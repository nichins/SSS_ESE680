
ESE680A_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003800  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .status       00000007  00003800  00003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .relocate     00000070  20000000  00003808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000000c0  20000070  00003878  00020070  2**2
                  ALLOC
  4 .stack        00002000  20000130  00003938  00020070  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  7 .debug_info   00018e00  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002139  00000000  00000000  00038ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001b87  00000000  00000000  0003b02a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005b0  00000000  00000000  0003cbb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004a0  00000000  00000000  0003d161  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000192c9  00000000  00000000  0003d601  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000adf4  00000000  00000000  000568ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00086793  00000000  00000000  000616be  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000017e8  00000000  00000000  000e7e54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002130 	.word	0x20002130
       4:	000022e1 	.word	0x000022e1
       8:	000023d9 	.word	0x000023d9
       c:	000023d9 	.word	0x000023d9
	...
      2c:	000023d9 	.word	0x000023d9
	...
      38:	000023d9 	.word	0x000023d9
      3c:	000023d9 	.word	0x000023d9
      40:	000023d9 	.word	0x000023d9
      44:	000023d9 	.word	0x000023d9
      48:	000023d9 	.word	0x000023d9
      4c:	000023d9 	.word	0x000023d9
      50:	000023d9 	.word	0x000023d9
      54:	000023d9 	.word	0x000023d9
      58:	000023d9 	.word	0x000023d9
      5c:	000023d9 	.word	0x000023d9
      60:	000023d9 	.word	0x000023d9
      64:	0000092d 	.word	0x0000092d
      68:	00000945 	.word	0x00000945
      6c:	0000095d 	.word	0x0000095d
      70:	00000975 	.word	0x00000975
      74:	0000098d 	.word	0x0000098d
      78:	000009a5 	.word	0x000009a5
      7c:	000023d9 	.word	0x000023d9
      80:	000023d9 	.word	0x000023d9
      84:	000023d9 	.word	0x000023d9
      88:	000023d9 	.word	0x000023d9
      8c:	000023d9 	.word	0x000023d9
      90:	000023d9 	.word	0x000023d9
	...
      9c:	000023d9 	.word	0x000023d9
      a0:	000023d9 	.word	0x000023d9
      a4:	000023d9 	.word	0x000023d9
      a8:	000023d9 	.word	0x000023d9
      ac:	000023d9 	.word	0x000023d9
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00003800 	.word	0x00003800

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00003800 	.word	0x00003800
     10c:	00003800 	.word	0x00003800
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}
     11e:	46c0      	nop			; (mov r8, r8)

00000120 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     120:	b580      	push	{r7, lr}
     122:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     124:	2000      	movs	r0, #0
     126:	4b0f      	ldr	r3, [pc, #60]	; (164 <delay_init+0x44>)
     128:	4798      	blx	r3
     12a:	0002      	movs	r2, r0
     12c:	4b0e      	ldr	r3, [pc, #56]	; (168 <delay_init+0x48>)
     12e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     130:	4b0d      	ldr	r3, [pc, #52]	; (168 <delay_init+0x48>)
     132:	6818      	ldr	r0, [r3, #0]
     134:	4b0d      	ldr	r3, [pc, #52]	; (16c <delay_init+0x4c>)
     136:	22fa      	movs	r2, #250	; 0xfa
     138:	0091      	lsls	r1, r2, #2
     13a:	4798      	blx	r3
     13c:	0003      	movs	r3, r0
     13e:	001a      	movs	r2, r3
     140:	4b09      	ldr	r3, [pc, #36]	; (168 <delay_init+0x48>)
     142:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     144:	4b08      	ldr	r3, [pc, #32]	; (168 <delay_init+0x48>)
     146:	6818      	ldr	r0, [r3, #0]
     148:	4b08      	ldr	r3, [pc, #32]	; (16c <delay_init+0x4c>)
     14a:	22fa      	movs	r2, #250	; 0xfa
     14c:	0091      	lsls	r1, r2, #2
     14e:	4798      	blx	r3
     150:	0003      	movs	r3, r0
     152:	001a      	movs	r2, r3
     154:	4b06      	ldr	r3, [pc, #24]	; (170 <delay_init+0x50>)
     156:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     158:	4b06      	ldr	r3, [pc, #24]	; (174 <delay_init+0x54>)
     15a:	2205      	movs	r2, #5
     15c:	601a      	str	r2, [r3, #0]
}
     15e:	46c0      	nop			; (mov r8, r8)
     160:	46bd      	mov	sp, r7
     162:	bd80      	pop	{r7, pc}
     164:	00001e95 	.word	0x00001e95
     168:	20000000 	.word	0x20000000
     16c:	00002a49 	.word	0x00002a49
     170:	20000004 	.word	0x20000004
     174:	e000e010 	.word	0xe000e010

00000178 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     178:	b580      	push	{r7, lr}
     17a:	b082      	sub	sp, #8
     17c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     17e:	4b10      	ldr	r3, [pc, #64]	; (1c0 <cpu_irq_enter_critical+0x48>)
     180:	681b      	ldr	r3, [r3, #0]
     182:	2b00      	cmp	r3, #0
     184:	d112      	bne.n	1ac <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     186:	f3ef 8310 	mrs	r3, PRIMASK
     18a:	607b      	str	r3, [r7, #4]
  return(result);
     18c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     18e:	2b00      	cmp	r3, #0
     190:	d109      	bne.n	1a6 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     192:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     194:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     198:	4b0a      	ldr	r3, [pc, #40]	; (1c4 <cpu_irq_enter_critical+0x4c>)
     19a:	2200      	movs	r2, #0
     19c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     19e:	4b0a      	ldr	r3, [pc, #40]	; (1c8 <cpu_irq_enter_critical+0x50>)
     1a0:	2201      	movs	r2, #1
     1a2:	701a      	strb	r2, [r3, #0]
     1a4:	e002      	b.n	1ac <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1a6:	4b08      	ldr	r3, [pc, #32]	; (1c8 <cpu_irq_enter_critical+0x50>)
     1a8:	2200      	movs	r2, #0
     1aa:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1ac:	4b04      	ldr	r3, [pc, #16]	; (1c0 <cpu_irq_enter_critical+0x48>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	1c5a      	adds	r2, r3, #1
     1b2:	4b03      	ldr	r3, [pc, #12]	; (1c0 <cpu_irq_enter_critical+0x48>)
     1b4:	601a      	str	r2, [r3, #0]
}
     1b6:	46c0      	nop			; (mov r8, r8)
     1b8:	46bd      	mov	sp, r7
     1ba:	b002      	add	sp, #8
     1bc:	bd80      	pop	{r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	2000008c 	.word	0x2000008c
     1c4:	20000008 	.word	0x20000008
     1c8:	20000090 	.word	0x20000090

000001cc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     1cc:	b580      	push	{r7, lr}
     1ce:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1d0:	4b0b      	ldr	r3, [pc, #44]	; (200 <cpu_irq_leave_critical+0x34>)
     1d2:	681b      	ldr	r3, [r3, #0]
     1d4:	1e5a      	subs	r2, r3, #1
     1d6:	4b0a      	ldr	r3, [pc, #40]	; (200 <cpu_irq_leave_critical+0x34>)
     1d8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1da:	4b09      	ldr	r3, [pc, #36]	; (200 <cpu_irq_leave_critical+0x34>)
     1dc:	681b      	ldr	r3, [r3, #0]
     1de:	2b00      	cmp	r3, #0
     1e0:	d10a      	bne.n	1f8 <cpu_irq_leave_critical+0x2c>
     1e2:	4b08      	ldr	r3, [pc, #32]	; (204 <cpu_irq_leave_critical+0x38>)
     1e4:	781b      	ldrb	r3, [r3, #0]
     1e6:	b2db      	uxtb	r3, r3
     1e8:	2b00      	cmp	r3, #0
     1ea:	d005      	beq.n	1f8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     1ec:	4b06      	ldr	r3, [pc, #24]	; (208 <cpu_irq_leave_critical+0x3c>)
     1ee:	2201      	movs	r2, #1
     1f0:	701a      	strb	r2, [r3, #0]
     1f2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     1f6:	b662      	cpsie	i
	}
}
     1f8:	46c0      	nop			; (mov r8, r8)
     1fa:	46bd      	mov	sp, r7
     1fc:	bd80      	pop	{r7, pc}
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	2000008c 	.word	0x2000008c
     204:	20000090 	.word	0x20000090
     208:	20000008 	.word	0x20000008

0000020c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     20c:	b580      	push	{r7, lr}
     20e:	b082      	sub	sp, #8
     210:	af00      	add	r7, sp, #0
     212:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     214:	687b      	ldr	r3, [r7, #4]
     216:	2280      	movs	r2, #128	; 0x80
     218:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     21a:	687b      	ldr	r3, [r7, #4]
     21c:	2200      	movs	r2, #0
     21e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     220:	687b      	ldr	r3, [r7, #4]
     222:	2201      	movs	r2, #1
     224:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     226:	687b      	ldr	r3, [r7, #4]
     228:	2200      	movs	r2, #0
     22a:	70da      	strb	r2, [r3, #3]
}
     22c:	46c0      	nop			; (mov r8, r8)
     22e:	46bd      	mov	sp, r7
     230:	b002      	add	sp, #8
     232:	bd80      	pop	{r7, pc}

00000234 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     234:	b580      	push	{r7, lr}
     236:	b084      	sub	sp, #16
     238:	af00      	add	r7, sp, #0
     23a:	0002      	movs	r2, r0
     23c:	6039      	str	r1, [r7, #0]
     23e:	1dfb      	adds	r3, r7, #7
     240:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     242:	230c      	movs	r3, #12
     244:	18fb      	adds	r3, r7, r3
     246:	0018      	movs	r0, r3
     248:	4b10      	ldr	r3, [pc, #64]	; (28c <port_pin_set_config+0x58>)
     24a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     24c:	230c      	movs	r3, #12
     24e:	18fb      	adds	r3, r7, r3
     250:	2280      	movs	r2, #128	; 0x80
     252:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     254:	683b      	ldr	r3, [r7, #0]
     256:	781a      	ldrb	r2, [r3, #0]
     258:	230c      	movs	r3, #12
     25a:	18fb      	adds	r3, r7, r3
     25c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     25e:	683b      	ldr	r3, [r7, #0]
     260:	785a      	ldrb	r2, [r3, #1]
     262:	230c      	movs	r3, #12
     264:	18fb      	adds	r3, r7, r3
     266:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     268:	683b      	ldr	r3, [r7, #0]
     26a:	789a      	ldrb	r2, [r3, #2]
     26c:	230c      	movs	r3, #12
     26e:	18fb      	adds	r3, r7, r3
     270:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     272:	230c      	movs	r3, #12
     274:	18fa      	adds	r2, r7, r3
     276:	1dfb      	adds	r3, r7, #7
     278:	781b      	ldrb	r3, [r3, #0]
     27a:	0011      	movs	r1, r2
     27c:	0018      	movs	r0, r3
     27e:	4b04      	ldr	r3, [pc, #16]	; (290 <port_pin_set_config+0x5c>)
     280:	4798      	blx	r3
}
     282:	46c0      	nop			; (mov r8, r8)
     284:	46bd      	mov	sp, r7
     286:	b004      	add	sp, #16
     288:	bd80      	pop	{r7, pc}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	0000020d 	.word	0x0000020d
     290:	00002259 	.word	0x00002259

00000294 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     294:	b580      	push	{r7, lr}
     296:	b082      	sub	sp, #8
     298:	af00      	add	r7, sp, #0
     29a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     29c:	687b      	ldr	r3, [r7, #4]
     29e:	2200      	movs	r2, #0
     2a0:	701a      	strb	r2, [r3, #0]
}
     2a2:	46c0      	nop			; (mov r8, r8)
     2a4:	46bd      	mov	sp, r7
     2a6:	b002      	add	sp, #8
     2a8:	bd80      	pop	{r7, pc}
     2aa:	46c0      	nop			; (mov r8, r8)

000002ac <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     2ae:	b08d      	sub	sp, #52	; 0x34
     2b0:	af00      	add	r7, sp, #0
     2b2:	60b8      	str	r0, [r7, #8]
     2b4:	60f9      	str	r1, [r7, #12]
     2b6:	603a      	str	r2, [r7, #0]
     2b8:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     2ba:	2300      	movs	r3, #0
     2bc:	2400      	movs	r4, #0
     2be:	623b      	str	r3, [r7, #32]
     2c0:	627c      	str	r4, [r7, #36]	; 0x24
     2c2:	2300      	movs	r3, #0
     2c4:	2400      	movs	r4, #0
     2c6:	61bb      	str	r3, [r7, #24]
     2c8:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
     2ca:	233f      	movs	r3, #63	; 0x3f
     2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
     2ce:	e053      	b.n	378 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
     2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     2d2:	3b20      	subs	r3, #32
     2d4:	2b00      	cmp	r3, #0
     2d6:	db04      	blt.n	2e2 <long_division+0x36>
     2d8:	2201      	movs	r2, #1
     2da:	409a      	lsls	r2, r3
     2dc:	0013      	movs	r3, r2
     2de:	617b      	str	r3, [r7, #20]
     2e0:	e00b      	b.n	2fa <long_division+0x4e>
     2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     2e4:	2220      	movs	r2, #32
     2e6:	1ad3      	subs	r3, r2, r3
     2e8:	2201      	movs	r2, #1
     2ea:	40da      	lsrs	r2, r3
     2ec:	0013      	movs	r3, r2
     2ee:	2100      	movs	r1, #0
     2f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
     2f2:	4091      	lsls	r1, r2
     2f4:	000a      	movs	r2, r1
     2f6:	4313      	orrs	r3, r2
     2f8:	617b      	str	r3, [r7, #20]
     2fa:	2201      	movs	r2, #1
     2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     2fe:	409a      	lsls	r2, r3
     300:	0013      	movs	r3, r2
     302:	613b      	str	r3, [r7, #16]

		r = r << 1;
     304:	69bb      	ldr	r3, [r7, #24]
     306:	69fc      	ldr	r4, [r7, #28]
     308:	18db      	adds	r3, r3, r3
     30a:	4164      	adcs	r4, r4
     30c:	61bb      	str	r3, [r7, #24]
     30e:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
     310:	68bb      	ldr	r3, [r7, #8]
     312:	693a      	ldr	r2, [r7, #16]
     314:	401a      	ands	r2, r3
     316:	0015      	movs	r5, r2
     318:	68fb      	ldr	r3, [r7, #12]
     31a:	697a      	ldr	r2, [r7, #20]
     31c:	401a      	ands	r2, r3
     31e:	0016      	movs	r6, r2
     320:	002b      	movs	r3, r5
     322:	4333      	orrs	r3, r6
     324:	d007      	beq.n	336 <long_division+0x8a>
			r |= 0x01;
     326:	69bb      	ldr	r3, [r7, #24]
     328:	2201      	movs	r2, #1
     32a:	4313      	orrs	r3, r2
     32c:	61bb      	str	r3, [r7, #24]
     32e:	69fb      	ldr	r3, [r7, #28]
     330:	2200      	movs	r2, #0
     332:	4313      	orrs	r3, r2
     334:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
     336:	687a      	ldr	r2, [r7, #4]
     338:	69fb      	ldr	r3, [r7, #28]
     33a:	429a      	cmp	r2, r3
     33c:	d819      	bhi.n	372 <long_division+0xc6>
     33e:	687a      	ldr	r2, [r7, #4]
     340:	69fb      	ldr	r3, [r7, #28]
     342:	429a      	cmp	r2, r3
     344:	d103      	bne.n	34e <long_division+0xa2>
     346:	683a      	ldr	r2, [r7, #0]
     348:	69bb      	ldr	r3, [r7, #24]
     34a:	429a      	cmp	r2, r3
     34c:	d811      	bhi.n	372 <long_division+0xc6>
			r = r - d;
     34e:	69b9      	ldr	r1, [r7, #24]
     350:	69fa      	ldr	r2, [r7, #28]
     352:	683b      	ldr	r3, [r7, #0]
     354:	687c      	ldr	r4, [r7, #4]
     356:	1ac9      	subs	r1, r1, r3
     358:	41a2      	sbcs	r2, r4
     35a:	000b      	movs	r3, r1
     35c:	0014      	movs	r4, r2
     35e:	61bb      	str	r3, [r7, #24]
     360:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
     362:	6a3a      	ldr	r2, [r7, #32]
     364:	693b      	ldr	r3, [r7, #16]
     366:	4313      	orrs	r3, r2
     368:	623b      	str	r3, [r7, #32]
     36a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     36c:	697b      	ldr	r3, [r7, #20]
     36e:	4313      	orrs	r3, r2
     370:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     374:	3b01      	subs	r3, #1
     376:	62fb      	str	r3, [r7, #44]	; 0x2c
     378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     37a:	2b00      	cmp	r3, #0
     37c:	daa8      	bge.n	2d0 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
     37e:	6a3b      	ldr	r3, [r7, #32]
     380:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
     382:	0018      	movs	r0, r3
     384:	0021      	movs	r1, r4
     386:	46bd      	mov	sp, r7
     388:	b00d      	add	sp, #52	; 0x34
     38a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000038c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     38c:	b580      	push	{r7, lr}
     38e:	b086      	sub	sp, #24
     390:	af00      	add	r7, sp, #0
     392:	60f8      	str	r0, [r7, #12]
     394:	60b9      	str	r1, [r7, #8]
     396:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
     398:	2316      	movs	r3, #22
     39a:	18fb      	adds	r3, r7, r3
     39c:	2200      	movs	r2, #0
     39e:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
     3a0:	68bb      	ldr	r3, [r7, #8]
     3a2:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     3a4:	68bb      	ldr	r3, [r7, #8]
     3a6:	085a      	lsrs	r2, r3, #1
     3a8:	68fb      	ldr	r3, [r7, #12]
     3aa:	429a      	cmp	r2, r3
     3ac:	d201      	bcs.n	3b2 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3ae:	2340      	movs	r3, #64	; 0x40
     3b0:	e026      	b.n	400 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
     3b2:	68bb      	ldr	r3, [r7, #8]
     3b4:	085b      	lsrs	r3, r3, #1
     3b6:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
     3b8:	e00a      	b.n	3d0 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
     3ba:	693a      	ldr	r2, [r7, #16]
     3bc:	68fb      	ldr	r3, [r7, #12]
     3be:	1ad3      	subs	r3, r2, r3
     3c0:	613b      	str	r3, [r7, #16]
		baud_calculated++;
     3c2:	2316      	movs	r3, #22
     3c4:	18fb      	adds	r3, r7, r3
     3c6:	881a      	ldrh	r2, [r3, #0]
     3c8:	2316      	movs	r3, #22
     3ca:	18fb      	adds	r3, r7, r3
     3cc:	3201      	adds	r2, #1
     3ce:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     3d0:	693a      	ldr	r2, [r7, #16]
     3d2:	68fb      	ldr	r3, [r7, #12]
     3d4:	429a      	cmp	r2, r3
     3d6:	d2f0      	bcs.n	3ba <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
     3d8:	2316      	movs	r3, #22
     3da:	18fb      	adds	r3, r7, r3
     3dc:	2216      	movs	r2, #22
     3de:	18ba      	adds	r2, r7, r2
     3e0:	8812      	ldrh	r2, [r2, #0]
     3e2:	3a01      	subs	r2, #1
     3e4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     3e6:	2316      	movs	r3, #22
     3e8:	18fb      	adds	r3, r7, r3
     3ea:	881b      	ldrh	r3, [r3, #0]
     3ec:	2bff      	cmp	r3, #255	; 0xff
     3ee:	d901      	bls.n	3f4 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3f0:	2340      	movs	r3, #64	; 0x40
     3f2:	e005      	b.n	400 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
     3f4:	687b      	ldr	r3, [r7, #4]
     3f6:	2216      	movs	r2, #22
     3f8:	18ba      	adds	r2, r7, r2
     3fa:	8812      	ldrh	r2, [r2, #0]
     3fc:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
     3fe:	2300      	movs	r3, #0
	}
}
     400:	0018      	movs	r0, r3
     402:	46bd      	mov	sp, r7
     404:	b006      	add	sp, #24
     406:	bd80      	pop	{r7, pc}

00000408 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     408:	b5f0      	push	{r4, r5, r6, r7, lr}
     40a:	b0a1      	sub	sp, #132	; 0x84
     40c:	af00      	add	r7, sp, #0
     40e:	64f8      	str	r0, [r7, #76]	; 0x4c
     410:	64b9      	str	r1, [r7, #72]	; 0x48
     412:	647a      	str	r2, [r7, #68]	; 0x44
     414:	2243      	movs	r2, #67	; 0x43
     416:	18ba      	adds	r2, r7, r2
     418:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
     41a:	2300      	movs	r3, #0
     41c:	2400      	movs	r4, #0
     41e:	673b      	str	r3, [r7, #112]	; 0x70
     420:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
     422:	2300      	movs	r3, #0
     424:	2400      	movs	r4, #0
     426:	66bb      	str	r3, [r7, #104]	; 0x68
     428:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
     42a:	2300      	movs	r3, #0
     42c:	2400      	movs	r4, #0
     42e:	67bb      	str	r3, [r7, #120]	; 0x78
     430:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
     432:	2300      	movs	r3, #0
     434:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     436:	2358      	movs	r3, #88	; 0x58
     438:	2240      	movs	r2, #64	; 0x40
     43a:	4694      	mov	ip, r2
     43c:	44bc      	add	ip, r7
     43e:	4463      	add	r3, ip
     440:	781a      	ldrb	r2, [r3, #0]
     442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     444:	435a      	muls	r2, r3
     446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     448:	429a      	cmp	r2, r3
     44a:	d901      	bls.n	450 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     44c:	2340      	movs	r3, #64	; 0x40
     44e:	e0b3      	b.n	5b8 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     450:	2343      	movs	r3, #67	; 0x43
     452:	18fb      	adds	r3, r7, r3
     454:	781b      	ldrb	r3, [r3, #0]
     456:	2b00      	cmp	r3, #0
     458:	d13d      	bne.n	4d6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     45a:	2358      	movs	r3, #88	; 0x58
     45c:	2240      	movs	r2, #64	; 0x40
     45e:	4694      	mov	ip, r2
     460:	44bc      	add	ip, r7
     462:	4463      	add	r3, ip
     464:	781b      	ldrb	r3, [r3, #0]
     466:	b2db      	uxtb	r3, r3
     468:	613b      	str	r3, [r7, #16]
     46a:	2300      	movs	r3, #0
     46c:	617b      	str	r3, [r7, #20]
     46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     470:	60bb      	str	r3, [r7, #8]
     472:	2300      	movs	r3, #0
     474:	60fb      	str	r3, [r7, #12]
     476:	4c52      	ldr	r4, [pc, #328]	; (5c0 <_sercom_get_async_baud_val+0x1b8>)
     478:	68ba      	ldr	r2, [r7, #8]
     47a:	68fb      	ldr	r3, [r7, #12]
     47c:	6938      	ldr	r0, [r7, #16]
     47e:	6979      	ldr	r1, [r7, #20]
     480:	47a0      	blx	r4
     482:	0003      	movs	r3, r0
     484:	000c      	movs	r4, r1
     486:	001b      	movs	r3, r3
     488:	65fb      	str	r3, [r7, #92]	; 0x5c
     48a:	2300      	movs	r3, #0
     48c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
     48e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     490:	603b      	str	r3, [r7, #0]
     492:	2300      	movs	r3, #0
     494:	607b      	str	r3, [r7, #4]
     496:	6db8      	ldr	r0, [r7, #88]	; 0x58
     498:	6df9      	ldr	r1, [r7, #92]	; 0x5c
     49a:	683a      	ldr	r2, [r7, #0]
     49c:	687b      	ldr	r3, [r7, #4]
     49e:	4c49      	ldr	r4, [pc, #292]	; (5c4 <_sercom_get_async_baud_val+0x1bc>)
     4a0:	47a0      	blx	r4
     4a2:	0003      	movs	r3, r0
     4a4:	000c      	movs	r4, r1
     4a6:	673b      	str	r3, [r7, #112]	; 0x70
     4a8:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
     4aa:	2100      	movs	r1, #0
     4ac:	2201      	movs	r2, #1
     4ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     4b0:	6f7c      	ldr	r4, [r7, #116]	; 0x74
     4b2:	1ac9      	subs	r1, r1, r3
     4b4:	41a2      	sbcs	r2, r4
     4b6:	000b      	movs	r3, r1
     4b8:	0014      	movs	r4, r2
     4ba:	66bb      	str	r3, [r7, #104]	; 0x68
     4bc:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
     4be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     4c0:	0c1b      	lsrs	r3, r3, #16
     4c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     4c4:	0416      	lsls	r6, r2, #16
     4c6:	431e      	orrs	r6, r3
     4c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     4ca:	041d      	lsls	r5, r3, #16
     4cc:	0033      	movs	r3, r6
     4ce:	67bb      	str	r3, [r7, #120]	; 0x78
     4d0:	2300      	movs	r3, #0
     4d2:	67fb      	str	r3, [r7, #124]	; 0x7c
     4d4:	e06a      	b.n	5ac <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     4d6:	2343      	movs	r3, #67	; 0x43
     4d8:	18fb      	adds	r3, r7, r3
     4da:	781b      	ldrb	r3, [r3, #0]
     4dc:	2b01      	cmp	r3, #1
     4de:	d165      	bne.n	5ac <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
     4e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     4e2:	633b      	str	r3, [r7, #48]	; 0x30
     4e4:	2300      	movs	r3, #0
     4e6:	637b      	str	r3, [r7, #52]	; 0x34
     4e8:	2358      	movs	r3, #88	; 0x58
     4ea:	2240      	movs	r2, #64	; 0x40
     4ec:	4694      	mov	ip, r2
     4ee:	44bc      	add	ip, r7
     4f0:	4463      	add	r3, ip
     4f2:	781b      	ldrb	r3, [r3, #0]
     4f4:	b2db      	uxtb	r3, r3
     4f6:	62bb      	str	r3, [r7, #40]	; 0x28
     4f8:	2300      	movs	r3, #0
     4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
     4fc:	4c30      	ldr	r4, [pc, #192]	; (5c0 <_sercom_get_async_baud_val+0x1b8>)
     4fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
     500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     502:	6b38      	ldr	r0, [r7, #48]	; 0x30
     504:	6b79      	ldr	r1, [r7, #52]	; 0x34
     506:	47a0      	blx	r4
     508:	0003      	movs	r3, r0
     50a:	000c      	movs	r4, r1
     50c:	65bb      	str	r3, [r7, #88]	; 0x58
     50e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
     510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     512:	623b      	str	r3, [r7, #32]
     514:	2300      	movs	r3, #0
     516:	627b      	str	r3, [r7, #36]	; 0x24
     518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     51a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     51c:	001a      	movs	r2, r3
     51e:	0023      	movs	r3, r4
     520:	6a38      	ldr	r0, [r7, #32]
     522:	6a79      	ldr	r1, [r7, #36]	; 0x24
     524:	4c27      	ldr	r4, [pc, #156]	; (5c4 <_sercom_get_async_baud_val+0x1bc>)
     526:	47a0      	blx	r4
     528:	0003      	movs	r3, r0
     52a:	000c      	movs	r4, r1
     52c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
     52e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
     530:	2380      	movs	r3, #128	; 0x80
     532:	019b      	lsls	r3, r3, #6
     534:	429a      	cmp	r2, r3
     536:	d901      	bls.n	53c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     538:	2340      	movs	r3, #64	; 0x40
     53a:	e03d      	b.n	5b8 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     53c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     53e:	61bb      	str	r3, [r7, #24]
     540:	2300      	movs	r3, #0
     542:	61fb      	str	r3, [r7, #28]
     544:	69b9      	ldr	r1, [r7, #24]
     546:	69fa      	ldr	r2, [r7, #28]
     548:	000b      	movs	r3, r1
     54a:	0f5b      	lsrs	r3, r3, #29
     54c:	0010      	movs	r0, r2
     54e:	00c0      	lsls	r0, r0, #3
     550:	63f8      	str	r0, [r7, #60]	; 0x3c
     552:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
     554:	4318      	orrs	r0, r3
     556:	63f8      	str	r0, [r7, #60]	; 0x3c
     558:	000b      	movs	r3, r1
     55a:	00db      	lsls	r3, r3, #3
     55c:	63bb      	str	r3, [r7, #56]	; 0x38
     55e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     560:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     562:	001a      	movs	r2, r3
     564:	0023      	movs	r3, r4
     566:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     568:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
     56a:	4c16      	ldr	r4, [pc, #88]	; (5c4 <_sercom_get_async_baud_val+0x1bc>)
     56c:	47a0      	blx	r4
     56e:	0003      	movs	r3, r0
     570:	000c      	movs	r4, r1
     572:	65bb      	str	r3, [r7, #88]	; 0x58
     574:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
     576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     578:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
     57a:	b2d9      	uxtb	r1, r3
     57c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     57e:	b2db      	uxtb	r3, r3
     580:	00db      	lsls	r3, r3, #3
     582:	b2da      	uxtb	r2, r3
     584:	2317      	movs	r3, #23
     586:	2040      	movs	r0, #64	; 0x40
     588:	4684      	mov	ip, r0
     58a:	44bc      	add	ip, r7
     58c:	4463      	add	r3, ip
     58e:	1a8a      	subs	r2, r1, r2
     590:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
     592:	2317      	movs	r3, #23
     594:	2240      	movs	r2, #64	; 0x40
     596:	4694      	mov	ip, r2
     598:	44bc      	add	ip, r7
     59a:	4463      	add	r3, ip
     59c:	781b      	ldrb	r3, [r3, #0]
     59e:	035b      	lsls	r3, r3, #13
     5a0:	001a      	movs	r2, r3
     5a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     5a4:	4313      	orrs	r3, r2
     5a6:	67bb      	str	r3, [r7, #120]	; 0x78
     5a8:	2300      	movs	r3, #0
     5aa:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
     5ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     5ae:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
     5b0:	b29a      	uxth	r2, r3
     5b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     5b4:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     5b6:	2300      	movs	r3, #0
}
     5b8:	0018      	movs	r0, r3
     5ba:	46bd      	mov	sp, r7
     5bc:	b021      	add	sp, #132	; 0x84
     5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c0:	00002b61 	.word	0x00002b61
     5c4:	000002ad 	.word	0x000002ad

000005c8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     5c8:	b580      	push	{r7, lr}
     5ca:	b084      	sub	sp, #16
     5cc:	af00      	add	r7, sp, #0
     5ce:	0002      	movs	r2, r0
     5d0:	1dfb      	adds	r3, r7, #7
     5d2:	701a      	strb	r2, [r3, #0]
     5d4:	1dbb      	adds	r3, r7, #6
     5d6:	1c0a      	adds	r2, r1, #0
     5d8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     5da:	4b1a      	ldr	r3, [pc, #104]	; (644 <sercom_set_gclk_generator+0x7c>)
     5dc:	781b      	ldrb	r3, [r3, #0]
     5de:	2201      	movs	r2, #1
     5e0:	4053      	eors	r3, r2
     5e2:	b2db      	uxtb	r3, r3
     5e4:	2b00      	cmp	r3, #0
     5e6:	d103      	bne.n	5f0 <sercom_set_gclk_generator+0x28>
     5e8:	1dbb      	adds	r3, r7, #6
     5ea:	781b      	ldrb	r3, [r3, #0]
     5ec:	2b00      	cmp	r3, #0
     5ee:	d01b      	beq.n	628 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     5f0:	230c      	movs	r3, #12
     5f2:	18fb      	adds	r3, r7, r3
     5f4:	0018      	movs	r0, r3
     5f6:	4b14      	ldr	r3, [pc, #80]	; (648 <sercom_set_gclk_generator+0x80>)
     5f8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
     5fa:	230c      	movs	r3, #12
     5fc:	18fb      	adds	r3, r7, r3
     5fe:	1dfa      	adds	r2, r7, #7
     600:	7812      	ldrb	r2, [r2, #0]
     602:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     604:	230c      	movs	r3, #12
     606:	18fb      	adds	r3, r7, r3
     608:	0019      	movs	r1, r3
     60a:	2013      	movs	r0, #19
     60c:	4b0f      	ldr	r3, [pc, #60]	; (64c <sercom_set_gclk_generator+0x84>)
     60e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     610:	2013      	movs	r0, #19
     612:	4b0f      	ldr	r3, [pc, #60]	; (650 <sercom_set_gclk_generator+0x88>)
     614:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     616:	4b0b      	ldr	r3, [pc, #44]	; (644 <sercom_set_gclk_generator+0x7c>)
     618:	1dfa      	adds	r2, r7, #7
     61a:	7812      	ldrb	r2, [r2, #0]
     61c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
     61e:	4b09      	ldr	r3, [pc, #36]	; (644 <sercom_set_gclk_generator+0x7c>)
     620:	2201      	movs	r2, #1
     622:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     624:	2300      	movs	r3, #0
     626:	e008      	b.n	63a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
     628:	4b06      	ldr	r3, [pc, #24]	; (644 <sercom_set_gclk_generator+0x7c>)
     62a:	785b      	ldrb	r3, [r3, #1]
     62c:	1dfa      	adds	r2, r7, #7
     62e:	7812      	ldrb	r2, [r2, #0]
     630:	429a      	cmp	r2, r3
     632:	d101      	bne.n	638 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
     634:	2300      	movs	r3, #0
     636:	e000      	b.n	63a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     638:	231d      	movs	r3, #29
}
     63a:	0018      	movs	r0, r3
     63c:	46bd      	mov	sp, r7
     63e:	b004      	add	sp, #16
     640:	bd80      	pop	{r7, pc}
     642:	46c0      	nop			; (mov r8, r8)
     644:	20000094 	.word	0x20000094
     648:	00000295 	.word	0x00000295
     64c:	00001f6d 	.word	0x00001f6d
     650:	00001fb1 	.word	0x00001fb1

00000654 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     654:	b580      	push	{r7, lr}
     656:	b082      	sub	sp, #8
     658:	af00      	add	r7, sp, #0
     65a:	6078      	str	r0, [r7, #4]
     65c:	000a      	movs	r2, r1
     65e:	1cfb      	adds	r3, r7, #3
     660:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
     662:	687b      	ldr	r3, [r7, #4]
     664:	4a4d      	ldr	r2, [pc, #308]	; (79c <_sercom_get_default_pad+0x148>)
     666:	4293      	cmp	r3, r2
     668:	d03f      	beq.n	6ea <_sercom_get_default_pad+0x96>
     66a:	4a4c      	ldr	r2, [pc, #304]	; (79c <_sercom_get_default_pad+0x148>)
     66c:	4293      	cmp	r3, r2
     66e:	d806      	bhi.n	67e <_sercom_get_default_pad+0x2a>
     670:	4a4b      	ldr	r2, [pc, #300]	; (7a0 <_sercom_get_default_pad+0x14c>)
     672:	4293      	cmp	r3, r2
     674:	d00f      	beq.n	696 <_sercom_get_default_pad+0x42>
     676:	4a4b      	ldr	r2, [pc, #300]	; (7a4 <_sercom_get_default_pad+0x150>)
     678:	4293      	cmp	r3, r2
     67a:	d021      	beq.n	6c0 <_sercom_get_default_pad+0x6c>
     67c:	e089      	b.n	792 <_sercom_get_default_pad+0x13e>
     67e:	4a4a      	ldr	r2, [pc, #296]	; (7a8 <_sercom_get_default_pad+0x154>)
     680:	4293      	cmp	r3, r2
     682:	d100      	bne.n	686 <_sercom_get_default_pad+0x32>
     684:	e05b      	b.n	73e <_sercom_get_default_pad+0xea>
     686:	4a49      	ldr	r2, [pc, #292]	; (7ac <_sercom_get_default_pad+0x158>)
     688:	4293      	cmp	r3, r2
     68a:	d100      	bne.n	68e <_sercom_get_default_pad+0x3a>
     68c:	e06c      	b.n	768 <_sercom_get_default_pad+0x114>
     68e:	4a48      	ldr	r2, [pc, #288]	; (7b0 <_sercom_get_default_pad+0x15c>)
     690:	4293      	cmp	r3, r2
     692:	d03f      	beq.n	714 <_sercom_get_default_pad+0xc0>
     694:	e07d      	b.n	792 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     696:	1cfb      	adds	r3, r7, #3
     698:	781b      	ldrb	r3, [r3, #0]
     69a:	2b01      	cmp	r3, #1
     69c:	d00a      	beq.n	6b4 <_sercom_get_default_pad+0x60>
     69e:	dc02      	bgt.n	6a6 <_sercom_get_default_pad+0x52>
     6a0:	2b00      	cmp	r3, #0
     6a2:	d005      	beq.n	6b0 <_sercom_get_default_pad+0x5c>
     6a4:	e075      	b.n	792 <_sercom_get_default_pad+0x13e>
     6a6:	2b02      	cmp	r3, #2
     6a8:	d006      	beq.n	6b8 <_sercom_get_default_pad+0x64>
     6aa:	2b03      	cmp	r3, #3
     6ac:	d006      	beq.n	6bc <_sercom_get_default_pad+0x68>
     6ae:	e070      	b.n	792 <_sercom_get_default_pad+0x13e>
     6b0:	4b40      	ldr	r3, [pc, #256]	; (7b4 <_sercom_get_default_pad+0x160>)
     6b2:	e06f      	b.n	794 <_sercom_get_default_pad+0x140>
     6b4:	4b40      	ldr	r3, [pc, #256]	; (7b8 <_sercom_get_default_pad+0x164>)
     6b6:	e06d      	b.n	794 <_sercom_get_default_pad+0x140>
     6b8:	4b40      	ldr	r3, [pc, #256]	; (7bc <_sercom_get_default_pad+0x168>)
     6ba:	e06b      	b.n	794 <_sercom_get_default_pad+0x140>
     6bc:	4b40      	ldr	r3, [pc, #256]	; (7c0 <_sercom_get_default_pad+0x16c>)
     6be:	e069      	b.n	794 <_sercom_get_default_pad+0x140>
     6c0:	1cfb      	adds	r3, r7, #3
     6c2:	781b      	ldrb	r3, [r3, #0]
     6c4:	2b01      	cmp	r3, #1
     6c6:	d00a      	beq.n	6de <_sercom_get_default_pad+0x8a>
     6c8:	dc02      	bgt.n	6d0 <_sercom_get_default_pad+0x7c>
     6ca:	2b00      	cmp	r3, #0
     6cc:	d005      	beq.n	6da <_sercom_get_default_pad+0x86>
     6ce:	e060      	b.n	792 <_sercom_get_default_pad+0x13e>
     6d0:	2b02      	cmp	r3, #2
     6d2:	d006      	beq.n	6e2 <_sercom_get_default_pad+0x8e>
     6d4:	2b03      	cmp	r3, #3
     6d6:	d006      	beq.n	6e6 <_sercom_get_default_pad+0x92>
     6d8:	e05b      	b.n	792 <_sercom_get_default_pad+0x13e>
     6da:	2303      	movs	r3, #3
     6dc:	e05a      	b.n	794 <_sercom_get_default_pad+0x140>
     6de:	4b39      	ldr	r3, [pc, #228]	; (7c4 <_sercom_get_default_pad+0x170>)
     6e0:	e058      	b.n	794 <_sercom_get_default_pad+0x140>
     6e2:	4b39      	ldr	r3, [pc, #228]	; (7c8 <_sercom_get_default_pad+0x174>)
     6e4:	e056      	b.n	794 <_sercom_get_default_pad+0x140>
     6e6:	4b39      	ldr	r3, [pc, #228]	; (7cc <_sercom_get_default_pad+0x178>)
     6e8:	e054      	b.n	794 <_sercom_get_default_pad+0x140>
     6ea:	1cfb      	adds	r3, r7, #3
     6ec:	781b      	ldrb	r3, [r3, #0]
     6ee:	2b01      	cmp	r3, #1
     6f0:	d00a      	beq.n	708 <_sercom_get_default_pad+0xb4>
     6f2:	dc02      	bgt.n	6fa <_sercom_get_default_pad+0xa6>
     6f4:	2b00      	cmp	r3, #0
     6f6:	d005      	beq.n	704 <_sercom_get_default_pad+0xb0>
     6f8:	e04b      	b.n	792 <_sercom_get_default_pad+0x13e>
     6fa:	2b02      	cmp	r3, #2
     6fc:	d006      	beq.n	70c <_sercom_get_default_pad+0xb8>
     6fe:	2b03      	cmp	r3, #3
     700:	d006      	beq.n	710 <_sercom_get_default_pad+0xbc>
     702:	e046      	b.n	792 <_sercom_get_default_pad+0x13e>
     704:	4b32      	ldr	r3, [pc, #200]	; (7d0 <_sercom_get_default_pad+0x17c>)
     706:	e045      	b.n	794 <_sercom_get_default_pad+0x140>
     708:	4b32      	ldr	r3, [pc, #200]	; (7d4 <_sercom_get_default_pad+0x180>)
     70a:	e043      	b.n	794 <_sercom_get_default_pad+0x140>
     70c:	4b32      	ldr	r3, [pc, #200]	; (7d8 <_sercom_get_default_pad+0x184>)
     70e:	e041      	b.n	794 <_sercom_get_default_pad+0x140>
     710:	4b32      	ldr	r3, [pc, #200]	; (7dc <_sercom_get_default_pad+0x188>)
     712:	e03f      	b.n	794 <_sercom_get_default_pad+0x140>
     714:	1cfb      	adds	r3, r7, #3
     716:	781b      	ldrb	r3, [r3, #0]
     718:	2b01      	cmp	r3, #1
     71a:	d00a      	beq.n	732 <_sercom_get_default_pad+0xde>
     71c:	dc02      	bgt.n	724 <_sercom_get_default_pad+0xd0>
     71e:	2b00      	cmp	r3, #0
     720:	d005      	beq.n	72e <_sercom_get_default_pad+0xda>
     722:	e036      	b.n	792 <_sercom_get_default_pad+0x13e>
     724:	2b02      	cmp	r3, #2
     726:	d006      	beq.n	736 <_sercom_get_default_pad+0xe2>
     728:	2b03      	cmp	r3, #3
     72a:	d006      	beq.n	73a <_sercom_get_default_pad+0xe6>
     72c:	e031      	b.n	792 <_sercom_get_default_pad+0x13e>
     72e:	4b2c      	ldr	r3, [pc, #176]	; (7e0 <_sercom_get_default_pad+0x18c>)
     730:	e030      	b.n	794 <_sercom_get_default_pad+0x140>
     732:	4b2c      	ldr	r3, [pc, #176]	; (7e4 <_sercom_get_default_pad+0x190>)
     734:	e02e      	b.n	794 <_sercom_get_default_pad+0x140>
     736:	4b2c      	ldr	r3, [pc, #176]	; (7e8 <_sercom_get_default_pad+0x194>)
     738:	e02c      	b.n	794 <_sercom_get_default_pad+0x140>
     73a:	4b2c      	ldr	r3, [pc, #176]	; (7ec <_sercom_get_default_pad+0x198>)
     73c:	e02a      	b.n	794 <_sercom_get_default_pad+0x140>
     73e:	1cfb      	adds	r3, r7, #3
     740:	781b      	ldrb	r3, [r3, #0]
     742:	2b01      	cmp	r3, #1
     744:	d00a      	beq.n	75c <_sercom_get_default_pad+0x108>
     746:	dc02      	bgt.n	74e <_sercom_get_default_pad+0xfa>
     748:	2b00      	cmp	r3, #0
     74a:	d005      	beq.n	758 <_sercom_get_default_pad+0x104>
     74c:	e021      	b.n	792 <_sercom_get_default_pad+0x13e>
     74e:	2b02      	cmp	r3, #2
     750:	d006      	beq.n	760 <_sercom_get_default_pad+0x10c>
     752:	2b03      	cmp	r3, #3
     754:	d006      	beq.n	764 <_sercom_get_default_pad+0x110>
     756:	e01c      	b.n	792 <_sercom_get_default_pad+0x13e>
     758:	4b25      	ldr	r3, [pc, #148]	; (7f0 <_sercom_get_default_pad+0x19c>)
     75a:	e01b      	b.n	794 <_sercom_get_default_pad+0x140>
     75c:	4b25      	ldr	r3, [pc, #148]	; (7f4 <_sercom_get_default_pad+0x1a0>)
     75e:	e019      	b.n	794 <_sercom_get_default_pad+0x140>
     760:	4b25      	ldr	r3, [pc, #148]	; (7f8 <_sercom_get_default_pad+0x1a4>)
     762:	e017      	b.n	794 <_sercom_get_default_pad+0x140>
     764:	4b25      	ldr	r3, [pc, #148]	; (7fc <_sercom_get_default_pad+0x1a8>)
     766:	e015      	b.n	794 <_sercom_get_default_pad+0x140>
     768:	1cfb      	adds	r3, r7, #3
     76a:	781b      	ldrb	r3, [r3, #0]
     76c:	2b01      	cmp	r3, #1
     76e:	d00a      	beq.n	786 <_sercom_get_default_pad+0x132>
     770:	dc02      	bgt.n	778 <_sercom_get_default_pad+0x124>
     772:	2b00      	cmp	r3, #0
     774:	d005      	beq.n	782 <_sercom_get_default_pad+0x12e>
     776:	e00c      	b.n	792 <_sercom_get_default_pad+0x13e>
     778:	2b02      	cmp	r3, #2
     77a:	d006      	beq.n	78a <_sercom_get_default_pad+0x136>
     77c:	2b03      	cmp	r3, #3
     77e:	d006      	beq.n	78e <_sercom_get_default_pad+0x13a>
     780:	e007      	b.n	792 <_sercom_get_default_pad+0x13e>
     782:	4b1f      	ldr	r3, [pc, #124]	; (800 <_sercom_get_default_pad+0x1ac>)
     784:	e006      	b.n	794 <_sercom_get_default_pad+0x140>
     786:	4b1f      	ldr	r3, [pc, #124]	; (804 <_sercom_get_default_pad+0x1b0>)
     788:	e004      	b.n	794 <_sercom_get_default_pad+0x140>
     78a:	4b1f      	ldr	r3, [pc, #124]	; (808 <_sercom_get_default_pad+0x1b4>)
     78c:	e002      	b.n	794 <_sercom_get_default_pad+0x140>
     78e:	4b1f      	ldr	r3, [pc, #124]	; (80c <_sercom_get_default_pad+0x1b8>)
     790:	e000      	b.n	794 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
     792:	2300      	movs	r3, #0
}
     794:	0018      	movs	r0, r3
     796:	46bd      	mov	sp, r7
     798:	b002      	add	sp, #8
     79a:	bd80      	pop	{r7, pc}
     79c:	42001000 	.word	0x42001000
     7a0:	42000800 	.word	0x42000800
     7a4:	42000c00 	.word	0x42000c00
     7a8:	42001800 	.word	0x42001800
     7ac:	42001c00 	.word	0x42001c00
     7b0:	42001400 	.word	0x42001400
     7b4:	00040003 	.word	0x00040003
     7b8:	00050003 	.word	0x00050003
     7bc:	00060003 	.word	0x00060003
     7c0:	00070003 	.word	0x00070003
     7c4:	00010003 	.word	0x00010003
     7c8:	001e0003 	.word	0x001e0003
     7cc:	001f0003 	.word	0x001f0003
     7d0:	00080003 	.word	0x00080003
     7d4:	00090003 	.word	0x00090003
     7d8:	000a0003 	.word	0x000a0003
     7dc:	000b0003 	.word	0x000b0003
     7e0:	00100003 	.word	0x00100003
     7e4:	00110003 	.word	0x00110003
     7e8:	00120003 	.word	0x00120003
     7ec:	00130003 	.word	0x00130003
     7f0:	000c0003 	.word	0x000c0003
     7f4:	000d0003 	.word	0x000d0003
     7f8:	000e0003 	.word	0x000e0003
     7fc:	000f0003 	.word	0x000f0003
     800:	00160003 	.word	0x00160003
     804:	00170003 	.word	0x00170003
     808:	00180003 	.word	0x00180003
     80c:	00190003 	.word	0x00190003

00000810 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     810:	b590      	push	{r4, r7, lr}
     812:	b08b      	sub	sp, #44	; 0x2c
     814:	af00      	add	r7, sp, #0
     816:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     818:	230c      	movs	r3, #12
     81a:	18fb      	adds	r3, r7, r3
     81c:	4a0f      	ldr	r2, [pc, #60]	; (85c <_sercom_get_sercom_inst_index+0x4c>)
     81e:	ca13      	ldmia	r2!, {r0, r1, r4}
     820:	c313      	stmia	r3!, {r0, r1, r4}
     822:	ca13      	ldmia	r2!, {r0, r1, r4}
     824:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     826:	2300      	movs	r3, #0
     828:	627b      	str	r3, [r7, #36]	; 0x24
     82a:	e00e      	b.n	84a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     82c:	230c      	movs	r3, #12
     82e:	18fb      	adds	r3, r7, r3
     830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     832:	0092      	lsls	r2, r2, #2
     834:	58d3      	ldr	r3, [r2, r3]
     836:	1e1a      	subs	r2, r3, #0
     838:	687b      	ldr	r3, [r7, #4]
     83a:	429a      	cmp	r2, r3
     83c:	d102      	bne.n	844 <_sercom_get_sercom_inst_index+0x34>
			return i;
     83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     840:	b2db      	uxtb	r3, r3
     842:	e006      	b.n	852 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     846:	3301      	adds	r3, #1
     848:	627b      	str	r3, [r7, #36]	; 0x24
     84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     84c:	2b05      	cmp	r3, #5
     84e:	d9ed      	bls.n	82c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     850:	2300      	movs	r3, #0
}
     852:	0018      	movs	r0, r3
     854:	46bd      	mov	sp, r7
     856:	b00b      	add	sp, #44	; 0x2c
     858:	bd90      	pop	{r4, r7, pc}
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	000036d4 	.word	0x000036d4

00000860 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
     860:	b580      	push	{r7, lr}
     862:	b082      	sub	sp, #8
     864:	af00      	add	r7, sp, #0
     866:	0002      	movs	r2, r0
     868:	1dfb      	adds	r3, r7, #7
     86a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
     86c:	46c0      	nop			; (mov r8, r8)
     86e:	46bd      	mov	sp, r7
     870:	b002      	add	sp, #8
     872:	bd80      	pop	{r7, pc}

00000874 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     874:	b580      	push	{r7, lr}
     876:	b084      	sub	sp, #16
     878:	af00      	add	r7, sp, #0
     87a:	0002      	movs	r2, r0
     87c:	6039      	str	r1, [r7, #0]
     87e:	1dfb      	adds	r3, r7, #7
     880:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     882:	4b13      	ldr	r3, [pc, #76]	; (8d0 <_sercom_set_handler+0x5c>)
     884:	781b      	ldrb	r3, [r3, #0]
     886:	2201      	movs	r2, #1
     888:	4053      	eors	r3, r2
     88a:	b2db      	uxtb	r3, r3
     88c:	2b00      	cmp	r3, #0
     88e:	d015      	beq.n	8bc <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     890:	2300      	movs	r3, #0
     892:	60fb      	str	r3, [r7, #12]
     894:	e00c      	b.n	8b0 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     896:	4b0f      	ldr	r3, [pc, #60]	; (8d4 <_sercom_set_handler+0x60>)
     898:	68fa      	ldr	r2, [r7, #12]
     89a:	0092      	lsls	r2, r2, #2
     89c:	490e      	ldr	r1, [pc, #56]	; (8d8 <_sercom_set_handler+0x64>)
     89e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
     8a0:	4b0e      	ldr	r3, [pc, #56]	; (8dc <_sercom_set_handler+0x68>)
     8a2:	68fa      	ldr	r2, [r7, #12]
     8a4:	0092      	lsls	r2, r2, #2
     8a6:	2100      	movs	r1, #0
     8a8:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8aa:	68fb      	ldr	r3, [r7, #12]
     8ac:	3301      	adds	r3, #1
     8ae:	60fb      	str	r3, [r7, #12]
     8b0:	68fb      	ldr	r3, [r7, #12]
     8b2:	2b05      	cmp	r3, #5
     8b4:	d9ef      	bls.n	896 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     8b6:	4b06      	ldr	r3, [pc, #24]	; (8d0 <_sercom_set_handler+0x5c>)
     8b8:	2201      	movs	r2, #1
     8ba:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     8bc:	1dfb      	adds	r3, r7, #7
     8be:	781a      	ldrb	r2, [r3, #0]
     8c0:	4b04      	ldr	r3, [pc, #16]	; (8d4 <_sercom_set_handler+0x60>)
     8c2:	0092      	lsls	r2, r2, #2
     8c4:	6839      	ldr	r1, [r7, #0]
     8c6:	50d1      	str	r1, [r2, r3]
}
     8c8:	46c0      	nop			; (mov r8, r8)
     8ca:	46bd      	mov	sp, r7
     8cc:	b004      	add	sp, #16
     8ce:	bd80      	pop	{r7, pc}
     8d0:	20000096 	.word	0x20000096
     8d4:	20000098 	.word	0x20000098
     8d8:	00000861 	.word	0x00000861
     8dc:	200000d4 	.word	0x200000d4

000008e0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     8e0:	b590      	push	{r4, r7, lr}
     8e2:	b085      	sub	sp, #20
     8e4:	af00      	add	r7, sp, #0
     8e6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     8e8:	2308      	movs	r3, #8
     8ea:	18fa      	adds	r2, r7, r3
     8ec:	4b0c      	ldr	r3, [pc, #48]	; (920 <_sercom_get_interrupt_vector+0x40>)
     8ee:	0010      	movs	r0, r2
     8f0:	0019      	movs	r1, r3
     8f2:	2306      	movs	r3, #6
     8f4:	001a      	movs	r2, r3
     8f6:	4b0b      	ldr	r3, [pc, #44]	; (924 <_sercom_get_interrupt_vector+0x44>)
     8f8:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     8fa:	230f      	movs	r3, #15
     8fc:	18fc      	adds	r4, r7, r3
     8fe:	687b      	ldr	r3, [r7, #4]
     900:	0018      	movs	r0, r3
     902:	4b09      	ldr	r3, [pc, #36]	; (928 <_sercom_get_interrupt_vector+0x48>)
     904:	4798      	blx	r3
     906:	0003      	movs	r3, r0
     908:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     90a:	230f      	movs	r3, #15
     90c:	18fb      	adds	r3, r7, r3
     90e:	781b      	ldrb	r3, [r3, #0]
     910:	2208      	movs	r2, #8
     912:	18ba      	adds	r2, r7, r2
     914:	5cd3      	ldrb	r3, [r2, r3]
     916:	b25b      	sxtb	r3, r3
}
     918:	0018      	movs	r0, r3
     91a:	46bd      	mov	sp, r7
     91c:	b005      	add	sp, #20
     91e:	bd90      	pop	{r4, r7, pc}
     920:	000036ec 	.word	0x000036ec
     924:	00002c05 	.word	0x00002c05
     928:	00000811 	.word	0x00000811

0000092c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     92c:	b580      	push	{r7, lr}
     92e:	af00      	add	r7, sp, #0
     930:	4b03      	ldr	r3, [pc, #12]	; (940 <SERCOM0_Handler+0x14>)
     932:	681b      	ldr	r3, [r3, #0]
     934:	2000      	movs	r0, #0
     936:	4798      	blx	r3
     938:	46c0      	nop			; (mov r8, r8)
     93a:	46bd      	mov	sp, r7
     93c:	bd80      	pop	{r7, pc}
     93e:	46c0      	nop			; (mov r8, r8)
     940:	20000098 	.word	0x20000098

00000944 <SERCOM1_Handler>:
     944:	b580      	push	{r7, lr}
     946:	af00      	add	r7, sp, #0
     948:	4b03      	ldr	r3, [pc, #12]	; (958 <SERCOM1_Handler+0x14>)
     94a:	685b      	ldr	r3, [r3, #4]
     94c:	2001      	movs	r0, #1
     94e:	4798      	blx	r3
     950:	46c0      	nop			; (mov r8, r8)
     952:	46bd      	mov	sp, r7
     954:	bd80      	pop	{r7, pc}
     956:	46c0      	nop			; (mov r8, r8)
     958:	20000098 	.word	0x20000098

0000095c <SERCOM2_Handler>:
     95c:	b580      	push	{r7, lr}
     95e:	af00      	add	r7, sp, #0
     960:	4b03      	ldr	r3, [pc, #12]	; (970 <SERCOM2_Handler+0x14>)
     962:	689b      	ldr	r3, [r3, #8]
     964:	2002      	movs	r0, #2
     966:	4798      	blx	r3
     968:	46c0      	nop			; (mov r8, r8)
     96a:	46bd      	mov	sp, r7
     96c:	bd80      	pop	{r7, pc}
     96e:	46c0      	nop			; (mov r8, r8)
     970:	20000098 	.word	0x20000098

00000974 <SERCOM3_Handler>:
     974:	b580      	push	{r7, lr}
     976:	af00      	add	r7, sp, #0
     978:	4b03      	ldr	r3, [pc, #12]	; (988 <SERCOM3_Handler+0x14>)
     97a:	68db      	ldr	r3, [r3, #12]
     97c:	2003      	movs	r0, #3
     97e:	4798      	blx	r3
     980:	46c0      	nop			; (mov r8, r8)
     982:	46bd      	mov	sp, r7
     984:	bd80      	pop	{r7, pc}
     986:	46c0      	nop			; (mov r8, r8)
     988:	20000098 	.word	0x20000098

0000098c <SERCOM4_Handler>:
     98c:	b580      	push	{r7, lr}
     98e:	af00      	add	r7, sp, #0
     990:	4b03      	ldr	r3, [pc, #12]	; (9a0 <SERCOM4_Handler+0x14>)
     992:	691b      	ldr	r3, [r3, #16]
     994:	2004      	movs	r0, #4
     996:	4798      	blx	r3
     998:	46c0      	nop			; (mov r8, r8)
     99a:	46bd      	mov	sp, r7
     99c:	bd80      	pop	{r7, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	20000098 	.word	0x20000098

000009a4 <SERCOM5_Handler>:
     9a4:	b580      	push	{r7, lr}
     9a6:	af00      	add	r7, sp, #0
     9a8:	4b03      	ldr	r3, [pc, #12]	; (9b8 <SERCOM5_Handler+0x14>)
     9aa:	695b      	ldr	r3, [r3, #20]
     9ac:	2005      	movs	r0, #5
     9ae:	4798      	blx	r3
     9b0:	46c0      	nop			; (mov r8, r8)
     9b2:	46bd      	mov	sp, r7
     9b4:	bd80      	pop	{r7, pc}
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	20000098 	.word	0x20000098

000009bc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     9bc:	b580      	push	{r7, lr}
     9be:	b082      	sub	sp, #8
     9c0:	af00      	add	r7, sp, #0
     9c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	2200      	movs	r2, #0
     9c8:	701a      	strb	r2, [r3, #0]
}
     9ca:	46c0      	nop			; (mov r8, r8)
     9cc:	46bd      	mov	sp, r7
     9ce:	b002      	add	sp, #8
     9d0:	bd80      	pop	{r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)

000009d4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     9d4:	b580      	push	{r7, lr}
     9d6:	b082      	sub	sp, #8
     9d8:	af00      	add	r7, sp, #0
     9da:	0002      	movs	r2, r0
     9dc:	6039      	str	r1, [r7, #0]
     9de:	1dfb      	adds	r3, r7, #7
     9e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     9e2:	1dfb      	adds	r3, r7, #7
     9e4:	781b      	ldrb	r3, [r3, #0]
     9e6:	2b01      	cmp	r3, #1
     9e8:	d00a      	beq.n	a00 <system_apb_clock_set_mask+0x2c>
     9ea:	2b02      	cmp	r3, #2
     9ec:	d00f      	beq.n	a0e <system_apb_clock_set_mask+0x3a>
     9ee:	2b00      	cmp	r3, #0
     9f0:	d114      	bne.n	a1c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     9f2:	4b0e      	ldr	r3, [pc, #56]	; (a2c <system_apb_clock_set_mask+0x58>)
     9f4:	4a0d      	ldr	r2, [pc, #52]	; (a2c <system_apb_clock_set_mask+0x58>)
     9f6:	6991      	ldr	r1, [r2, #24]
     9f8:	683a      	ldr	r2, [r7, #0]
     9fa:	430a      	orrs	r2, r1
     9fc:	619a      	str	r2, [r3, #24]
			break;
     9fe:	e00f      	b.n	a20 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     a00:	4b0a      	ldr	r3, [pc, #40]	; (a2c <system_apb_clock_set_mask+0x58>)
     a02:	4a0a      	ldr	r2, [pc, #40]	; (a2c <system_apb_clock_set_mask+0x58>)
     a04:	69d1      	ldr	r1, [r2, #28]
     a06:	683a      	ldr	r2, [r7, #0]
     a08:	430a      	orrs	r2, r1
     a0a:	61da      	str	r2, [r3, #28]
			break;
     a0c:	e008      	b.n	a20 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     a0e:	4b07      	ldr	r3, [pc, #28]	; (a2c <system_apb_clock_set_mask+0x58>)
     a10:	4a06      	ldr	r2, [pc, #24]	; (a2c <system_apb_clock_set_mask+0x58>)
     a12:	6a11      	ldr	r1, [r2, #32]
     a14:	683a      	ldr	r2, [r7, #0]
     a16:	430a      	orrs	r2, r1
     a18:	621a      	str	r2, [r3, #32]
			break;
     a1a:	e001      	b.n	a20 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     a1c:	2317      	movs	r3, #23
     a1e:	e000      	b.n	a22 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     a20:	2300      	movs	r3, #0
}
     a22:	0018      	movs	r0, r3
     a24:	46bd      	mov	sp, r7
     a26:	b002      	add	sp, #8
     a28:	bd80      	pop	{r7, pc}
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	40000400 	.word	0x40000400

00000a30 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     a30:	b580      	push	{r7, lr}
     a32:	b082      	sub	sp, #8
     a34:	af00      	add	r7, sp, #0
     a36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a38:	687b      	ldr	r3, [r7, #4]
     a3a:	2280      	movs	r2, #128	; 0x80
     a3c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a3e:	687b      	ldr	r3, [r7, #4]
     a40:	2200      	movs	r2, #0
     a42:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	2201      	movs	r2, #1
     a48:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     a4a:	687b      	ldr	r3, [r7, #4]
     a4c:	2200      	movs	r2, #0
     a4e:	70da      	strb	r2, [r3, #3]
}
     a50:	46c0      	nop			; (mov r8, r8)
     a52:	46bd      	mov	sp, r7
     a54:	b002      	add	sp, #8
     a56:	bd80      	pop	{r7, pc}

00000a58 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     a58:	b580      	push	{r7, lr}
     a5a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a5c:	4b05      	ldr	r3, [pc, #20]	; (a74 <system_is_debugger_present+0x1c>)
     a5e:	789b      	ldrb	r3, [r3, #2]
     a60:	b2db      	uxtb	r3, r3
     a62:	001a      	movs	r2, r3
     a64:	2302      	movs	r3, #2
     a66:	4013      	ands	r3, r2
     a68:	1e5a      	subs	r2, r3, #1
     a6a:	4193      	sbcs	r3, r2
     a6c:	b2db      	uxtb	r3, r3
}
     a6e:	0018      	movs	r0, r3
     a70:	46bd      	mov	sp, r7
     a72:	bd80      	pop	{r7, pc}
     a74:	41002000 	.word	0x41002000

00000a78 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     a78:	b580      	push	{r7, lr}
     a7a:	b084      	sub	sp, #16
     a7c:	af00      	add	r7, sp, #0
     a7e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a80:	687b      	ldr	r3, [r7, #4]
     a82:	681b      	ldr	r3, [r3, #0]
     a84:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a86:	68fb      	ldr	r3, [r7, #12]
     a88:	69db      	ldr	r3, [r3, #28]
     a8a:	1e5a      	subs	r2, r3, #1
     a8c:	4193      	sbcs	r3, r2
     a8e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     a90:	0018      	movs	r0, r3
     a92:	46bd      	mov	sp, r7
     a94:	b004      	add	sp, #16
     a96:	bd80      	pop	{r7, pc}

00000a98 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     a98:	b580      	push	{r7, lr}
     a9a:	b082      	sub	sp, #8
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     aa0:	46c0      	nop			; (mov r8, r8)
     aa2:	687b      	ldr	r3, [r7, #4]
     aa4:	0018      	movs	r0, r3
     aa6:	4b04      	ldr	r3, [pc, #16]	; (ab8 <_usart_wait_for_sync+0x20>)
     aa8:	4798      	blx	r3
     aaa:	1e03      	subs	r3, r0, #0
     aac:	d1f9      	bne.n	aa2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	46bd      	mov	sp, r7
     ab2:	b002      	add	sp, #8
     ab4:	bd80      	pop	{r7, pc}
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	00000a79 	.word	0x00000a79

00000abc <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
     abc:	b5b0      	push	{r4, r5, r7, lr}
     abe:	b08c      	sub	sp, #48	; 0x30
     ac0:	af02      	add	r7, sp, #8
     ac2:	6078      	str	r0, [r7, #4]
     ac4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	681b      	ldr	r3, [r3, #0]
     aca:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     acc:	687b      	ldr	r3, [r7, #4]
     ace:	681b      	ldr	r3, [r3, #0]
     ad0:	0018      	movs	r0, r3
     ad2:	4bab      	ldr	r3, [pc, #684]	; (d80 <_usart_set_config+0x2c4>)
     ad4:	4798      	blx	r3
     ad6:	0003      	movs	r3, r0
     ad8:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     ada:	697b      	ldr	r3, [r7, #20]
     adc:	3314      	adds	r3, #20
     ade:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
     ae0:	2300      	movs	r3, #0
     ae2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
     ae4:	2300      	movs	r3, #0
     ae6:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     ae8:	230a      	movs	r3, #10
     aea:	18fb      	adds	r3, r7, r3
     aec:	2200      	movs	r2, #0
     aee:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     af0:	231f      	movs	r3, #31
     af2:	18fb      	adds	r3, r7, r3
     af4:	2200      	movs	r2, #0
     af6:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     af8:	231e      	movs	r3, #30
     afa:	18fb      	adds	r3, r7, r3
     afc:	2210      	movs	r2, #16
     afe:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     b00:	683b      	ldr	r3, [r7, #0]
     b02:	8a1b      	ldrh	r3, [r3, #16]
     b04:	2280      	movs	r2, #128	; 0x80
     b06:	01d2      	lsls	r2, r2, #7
     b08:	4293      	cmp	r3, r2
     b0a:	d01c      	beq.n	b46 <_usart_set_config+0x8a>
     b0c:	2280      	movs	r2, #128	; 0x80
     b0e:	01d2      	lsls	r2, r2, #7
     b10:	4293      	cmp	r3, r2
     b12:	dc06      	bgt.n	b22 <_usart_set_config+0x66>
     b14:	2b00      	cmp	r3, #0
     b16:	d00d      	beq.n	b34 <_usart_set_config+0x78>
     b18:	2280      	movs	r2, #128	; 0x80
     b1a:	0192      	lsls	r2, r2, #6
     b1c:	4293      	cmp	r3, r2
     b1e:	d024      	beq.n	b6a <_usart_set_config+0xae>
     b20:	e035      	b.n	b8e <_usart_set_config+0xd2>
     b22:	22c0      	movs	r2, #192	; 0xc0
     b24:	01d2      	lsls	r2, r2, #7
     b26:	4293      	cmp	r3, r2
     b28:	d028      	beq.n	b7c <_usart_set_config+0xc0>
     b2a:	2280      	movs	r2, #128	; 0x80
     b2c:	0212      	lsls	r2, r2, #8
     b2e:	4293      	cmp	r3, r2
     b30:	d012      	beq.n	b58 <_usart_set_config+0x9c>
     b32:	e02c      	b.n	b8e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b34:	231f      	movs	r3, #31
     b36:	18fb      	adds	r3, r7, r3
     b38:	2200      	movs	r2, #0
     b3a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b3c:	231e      	movs	r3, #30
     b3e:	18fb      	adds	r3, r7, r3
     b40:	2210      	movs	r2, #16
     b42:	701a      	strb	r2, [r3, #0]
			break;
     b44:	e023      	b.n	b8e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b46:	231f      	movs	r3, #31
     b48:	18fb      	adds	r3, r7, r3
     b4a:	2200      	movs	r2, #0
     b4c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b4e:	231e      	movs	r3, #30
     b50:	18fb      	adds	r3, r7, r3
     b52:	2208      	movs	r2, #8
     b54:	701a      	strb	r2, [r3, #0]
			break;
     b56:	e01a      	b.n	b8e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b58:	231f      	movs	r3, #31
     b5a:	18fb      	adds	r3, r7, r3
     b5c:	2200      	movs	r2, #0
     b5e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     b60:	231e      	movs	r3, #30
     b62:	18fb      	adds	r3, r7, r3
     b64:	2203      	movs	r2, #3
     b66:	701a      	strb	r2, [r3, #0]
			break;
     b68:	e011      	b.n	b8e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b6a:	231f      	movs	r3, #31
     b6c:	18fb      	adds	r3, r7, r3
     b6e:	2201      	movs	r2, #1
     b70:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     b72:	231e      	movs	r3, #30
     b74:	18fb      	adds	r3, r7, r3
     b76:	2210      	movs	r2, #16
     b78:	701a      	strb	r2, [r3, #0]
			break;
     b7a:	e008      	b.n	b8e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     b7c:	231f      	movs	r3, #31
     b7e:	18fb      	adds	r3, r7, r3
     b80:	2201      	movs	r2, #1
     b82:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b84:	231e      	movs	r3, #30
     b86:	18fb      	adds	r3, r7, r3
     b88:	2208      	movs	r2, #8
     b8a:	701a      	strb	r2, [r3, #0]
			break;
     b8c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     b8e:	683b      	ldr	r3, [r7, #0]
     b90:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
     b92:	683b      	ldr	r3, [r7, #0]
     b94:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     b96:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     b98:	683b      	ldr	r3, [r7, #0]
     b9a:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
     b9c:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
     b9e:	683a      	ldr	r2, [r7, #0]
     ba0:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     ba2:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ba4:	683a      	ldr	r2, [r7, #0]
     ba6:	7e12      	ldrb	r2, [r2, #24]
     ba8:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
     baa:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bac:	683a      	ldr	r2, [r7, #0]
     bae:	2126      	movs	r1, #38	; 0x26
     bb0:	5c52      	ldrb	r2, [r2, r1]
     bb2:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     bb4:	4313      	orrs	r3, r2
     bb6:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     bb8:	231d      	movs	r3, #29
     bba:	18fb      	adds	r3, r7, r3
     bbc:	2200      	movs	r2, #0
     bbe:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
     bc0:	683b      	ldr	r3, [r7, #0]
     bc2:	685b      	ldr	r3, [r3, #4]
     bc4:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     bc6:	68fb      	ldr	r3, [r7, #12]
     bc8:	2b00      	cmp	r3, #0
     bca:	d01e      	beq.n	c0a <_usart_set_config+0x14e>
     bcc:	2280      	movs	r2, #128	; 0x80
     bce:	0552      	lsls	r2, r2, #21
     bd0:	4293      	cmp	r3, r2
     bd2:	d14f      	bne.n	c74 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     bd4:	683b      	ldr	r3, [r7, #0]
     bd6:	2227      	movs	r2, #39	; 0x27
     bd8:	5c9b      	ldrb	r3, [r3, r2]
     bda:	2201      	movs	r2, #1
     bdc:	4053      	eors	r3, r2
     bde:	b2db      	uxtb	r3, r3
     be0:	2b00      	cmp	r3, #0
     be2:	d046      	beq.n	c72 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     be4:	683b      	ldr	r3, [r7, #0]
     be6:	6a1d      	ldr	r5, [r3, #32]
     be8:	693b      	ldr	r3, [r7, #16]
     bea:	b2db      	uxtb	r3, r3
     bec:	0018      	movs	r0, r3
     bee:	4b65      	ldr	r3, [pc, #404]	; (d84 <_usart_set_config+0x2c8>)
     bf0:	4798      	blx	r3
     bf2:	0001      	movs	r1, r0
     bf4:	231d      	movs	r3, #29
     bf6:	18fc      	adds	r4, r7, r3
     bf8:	230a      	movs	r3, #10
     bfa:	18fb      	adds	r3, r7, r3
     bfc:	001a      	movs	r2, r3
     bfe:	0028      	movs	r0, r5
     c00:	4b61      	ldr	r3, [pc, #388]	; (d88 <_usart_set_config+0x2cc>)
     c02:	4798      	blx	r3
     c04:	0003      	movs	r3, r0
     c06:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
     c08:	e033      	b.n	c72 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     c0a:	683b      	ldr	r3, [r7, #0]
     c0c:	2227      	movs	r2, #39	; 0x27
     c0e:	5c9b      	ldrb	r3, [r3, r2]
     c10:	2b00      	cmp	r3, #0
     c12:	d014      	beq.n	c3e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     c14:	683b      	ldr	r3, [r7, #0]
     c16:	6a18      	ldr	r0, [r3, #32]
     c18:	683b      	ldr	r3, [r7, #0]
     c1a:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
     c1c:	231d      	movs	r3, #29
     c1e:	18fc      	adds	r4, r7, r3
     c20:	231f      	movs	r3, #31
     c22:	18fb      	adds	r3, r7, r3
     c24:	781d      	ldrb	r5, [r3, #0]
     c26:	230a      	movs	r3, #10
     c28:	18fa      	adds	r2, r7, r3
     c2a:	231e      	movs	r3, #30
     c2c:	18fb      	adds	r3, r7, r3
     c2e:	781b      	ldrb	r3, [r3, #0]
     c30:	9300      	str	r3, [sp, #0]
     c32:	002b      	movs	r3, r5
     c34:	4d55      	ldr	r5, [pc, #340]	; (d8c <_usart_set_config+0x2d0>)
     c36:	47a8      	blx	r5
     c38:	0003      	movs	r3, r0
     c3a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
     c3c:	e01a      	b.n	c74 <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     c3e:	683b      	ldr	r3, [r7, #0]
     c40:	6a1d      	ldr	r5, [r3, #32]
     c42:	693b      	ldr	r3, [r7, #16]
     c44:	b2db      	uxtb	r3, r3
     c46:	0018      	movs	r0, r3
     c48:	4b4e      	ldr	r3, [pc, #312]	; (d84 <_usart_set_config+0x2c8>)
     c4a:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     c4c:	231d      	movs	r3, #29
     c4e:	18fc      	adds	r4, r7, r3
     c50:	231f      	movs	r3, #31
     c52:	18fb      	adds	r3, r7, r3
     c54:	7819      	ldrb	r1, [r3, #0]
     c56:	230a      	movs	r3, #10
     c58:	18fa      	adds	r2, r7, r3
     c5a:	231e      	movs	r3, #30
     c5c:	18fb      	adds	r3, r7, r3
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	9300      	str	r3, [sp, #0]
     c62:	000b      	movs	r3, r1
     c64:	0001      	movs	r1, r0
     c66:	0028      	movs	r0, r5
     c68:	4d48      	ldr	r5, [pc, #288]	; (d8c <_usart_set_config+0x2d0>)
     c6a:	47a8      	blx	r5
     c6c:	0003      	movs	r3, r0
     c6e:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
     c70:	e000      	b.n	c74 <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
     c72:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     c74:	231d      	movs	r3, #29
     c76:	18fb      	adds	r3, r7, r3
     c78:	781b      	ldrb	r3, [r3, #0]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d003      	beq.n	c86 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
     c7e:	231d      	movs	r3, #29
     c80:	18fb      	adds	r3, r7, r3
     c82:	781b      	ldrb	r3, [r3, #0]
     c84:	e077      	b.n	d76 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     c86:	683b      	ldr	r3, [r7, #0]
     c88:	7e5b      	ldrb	r3, [r3, #25]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d003      	beq.n	c96 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     c8e:	683b      	ldr	r3, [r7, #0]
     c90:	7e9a      	ldrb	r2, [r3, #26]
     c92:	69bb      	ldr	r3, [r7, #24]
     c94:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	0018      	movs	r0, r3
     c9a:	4b3d      	ldr	r3, [pc, #244]	; (d90 <_usart_set_config+0x2d4>)
     c9c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     c9e:	230a      	movs	r3, #10
     ca0:	18fb      	adds	r3, r7, r3
     ca2:	881a      	ldrh	r2, [r3, #0]
     ca4:	69bb      	ldr	r3, [r7, #24]
     ca6:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     caa:	68fb      	ldr	r3, [r7, #12]
     cac:	4313      	orrs	r3, r2
     cae:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
     cb0:	683b      	ldr	r3, [r7, #0]
     cb2:	2227      	movs	r2, #39	; 0x27
     cb4:	5c9b      	ldrb	r3, [r3, r2]
     cb6:	2201      	movs	r2, #1
     cb8:	4053      	eors	r3, r2
     cba:	b2db      	uxtb	r3, r3
     cbc:	2b00      	cmp	r3, #0
     cbe:	d003      	beq.n	cc8 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     cc2:	2204      	movs	r2, #4
     cc4:	4313      	orrs	r3, r2
     cc6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     cc8:	683b      	ldr	r3, [r7, #0]
     cca:	7e5b      	ldrb	r3, [r3, #25]
     ccc:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     cce:	683b      	ldr	r3, [r7, #0]
     cd0:	7f1b      	ldrb	r3, [r3, #28]
     cd2:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     cd4:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     cd6:	683b      	ldr	r3, [r7, #0]
     cd8:	7f5b      	ldrb	r3, [r3, #29]
     cda:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     cdc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     cde:	683b      	ldr	r3, [r7, #0]
     ce0:	2124      	movs	r1, #36	; 0x24
     ce2:	5c5b      	ldrb	r3, [r3, r1]
     ce4:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     ce6:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     ce8:	683b      	ldr	r3, [r7, #0]
     cea:	2125      	movs	r1, #37	; 0x25
     cec:	5c5b      	ldrb	r3, [r3, r1]
     cee:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     cf0:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     cf2:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
     cf4:	683b      	ldr	r3, [r7, #0]
     cf6:	7a9b      	ldrb	r3, [r3, #10]
     cf8:	001a      	movs	r2, r3
     cfa:	6a3b      	ldr	r3, [r7, #32]
     cfc:	4313      	orrs	r3, r2
     cfe:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
     d00:	683b      	ldr	r3, [r7, #0]
     d02:	7adb      	ldrb	r3, [r3, #11]
     d04:	001a      	movs	r2, r3
     d06:	6a3b      	ldr	r3, [r7, #32]
     d08:	4313      	orrs	r3, r2
     d0a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     d0c:	683b      	ldr	r3, [r7, #0]
     d0e:	891b      	ldrh	r3, [r3, #8]
     d10:	2bff      	cmp	r3, #255	; 0xff
     d12:	d00b      	beq.n	d2c <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d16:	2280      	movs	r2, #128	; 0x80
     d18:	0452      	lsls	r2, r2, #17
     d1a:	4313      	orrs	r3, r2
     d1c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
     d1e:	683b      	ldr	r3, [r7, #0]
     d20:	891b      	ldrh	r3, [r3, #8]
     d22:	001a      	movs	r2, r3
     d24:	6a3b      	ldr	r3, [r7, #32]
     d26:	4313      	orrs	r3, r2
     d28:	623b      	str	r3, [r7, #32]
     d2a:	e008      	b.n	d3e <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     d2c:	683b      	ldr	r3, [r7, #0]
     d2e:	7edb      	ldrb	r3, [r3, #27]
     d30:	2b00      	cmp	r3, #0
     d32:	d004      	beq.n	d3e <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d36:	2280      	movs	r2, #128	; 0x80
     d38:	04d2      	lsls	r2, r2, #19
     d3a:	4313      	orrs	r3, r2
     d3c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     d3e:	683b      	ldr	r3, [r7, #0]
     d40:	222c      	movs	r2, #44	; 0x2c
     d42:	5c9b      	ldrb	r3, [r3, r2]
     d44:	2b00      	cmp	r3, #0
     d46:	d103      	bne.n	d50 <_usart_set_config+0x294>
     d48:	4b12      	ldr	r3, [pc, #72]	; (d94 <_usart_set_config+0x2d8>)
     d4a:	4798      	blx	r3
     d4c:	1e03      	subs	r3, r0, #0
     d4e:	d003      	beq.n	d58 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d52:	2280      	movs	r2, #128	; 0x80
     d54:	4313      	orrs	r3, r2
     d56:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     d58:	687b      	ldr	r3, [r7, #4]
     d5a:	0018      	movs	r0, r3
     d5c:	4b0c      	ldr	r3, [pc, #48]	; (d90 <_usart_set_config+0x2d4>)
     d5e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     d60:	69bb      	ldr	r3, [r7, #24]
     d62:	6a3a      	ldr	r2, [r7, #32]
     d64:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	0018      	movs	r0, r3
     d6a:	4b09      	ldr	r3, [pc, #36]	; (d90 <_usart_set_config+0x2d4>)
     d6c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     d6e:	69bb      	ldr	r3, [r7, #24]
     d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     d72:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
     d74:	2300      	movs	r3, #0
}
     d76:	0018      	movs	r0, r3
     d78:	46bd      	mov	sp, r7
     d7a:	b00a      	add	sp, #40	; 0x28
     d7c:	bdb0      	pop	{r4, r5, r7, pc}
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	00000811 	.word	0x00000811
     d84:	00002091 	.word	0x00002091
     d88:	0000038d 	.word	0x0000038d
     d8c:	00000409 	.word	0x00000409
     d90:	00000a99 	.word	0x00000a99
     d94:	00000a59 	.word	0x00000a59

00000d98 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     d98:	b590      	push	{r4, r7, lr}
     d9a:	b093      	sub	sp, #76	; 0x4c
     d9c:	af00      	add	r7, sp, #0
     d9e:	60f8      	str	r0, [r7, #12]
     da0:	60b9      	str	r1, [r7, #8]
     da2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
     da4:	233b      	movs	r3, #59	; 0x3b
     da6:	18fb      	adds	r3, r7, r3
     da8:	2200      	movs	r2, #0
     daa:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     dac:	68fb      	ldr	r3, [r7, #12]
     dae:	68ba      	ldr	r2, [r7, #8]
     db0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     db2:	68fb      	ldr	r3, [r7, #12]
     db4:	681b      	ldr	r3, [r3, #0]
     db6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     db8:	68fb      	ldr	r3, [r7, #12]
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	0018      	movs	r0, r3
     dbe:	4b86      	ldr	r3, [pc, #536]	; (fd8 <usart_init+0x240>)
     dc0:	4798      	blx	r3
     dc2:	0003      	movs	r3, r0
     dc4:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dc8:	3302      	adds	r3, #2
     dca:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dce:	3314      	adds	r3, #20
     dd0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     dd4:	681b      	ldr	r3, [r3, #0]
     dd6:	2201      	movs	r2, #1
     dd8:	4013      	ands	r3, r2
     dda:	d001      	beq.n	de0 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     ddc:	2305      	movs	r3, #5
     dde:	e0f6      	b.n	fce <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     de2:	681b      	ldr	r3, [r3, #0]
     de4:	2202      	movs	r2, #2
     de6:	4013      	ands	r3, r2
     de8:	d001      	beq.n	dee <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     dea:	231c      	movs	r3, #28
     dec:	e0ef      	b.n	fce <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     dee:	2201      	movs	r2, #1
     df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     df2:	409a      	lsls	r2, r3
     df4:	0013      	movs	r3, r2
     df6:	0019      	movs	r1, r3
     df8:	2002      	movs	r0, #2
     dfa:	4b78      	ldr	r3, [pc, #480]	; (fdc <usart_init+0x244>)
     dfc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     dfe:	2324      	movs	r3, #36	; 0x24
     e00:	18fb      	adds	r3, r7, r3
     e02:	0018      	movs	r0, r3
     e04:	4b76      	ldr	r3, [pc, #472]	; (fe0 <usart_init+0x248>)
     e06:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     e08:	687b      	ldr	r3, [r7, #4]
     e0a:	222d      	movs	r2, #45	; 0x2d
     e0c:	5c9a      	ldrb	r2, [r3, r2]
     e0e:	2324      	movs	r3, #36	; 0x24
     e10:	18fb      	adds	r3, r7, r3
     e12:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e16:	b2db      	uxtb	r3, r3
     e18:	2224      	movs	r2, #36	; 0x24
     e1a:	18ba      	adds	r2, r7, r2
     e1c:	0011      	movs	r1, r2
     e1e:	0018      	movs	r0, r3
     e20:	4b70      	ldr	r3, [pc, #448]	; (fe4 <usart_init+0x24c>)
     e22:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
     e26:	b2db      	uxtb	r3, r3
     e28:	0018      	movs	r0, r3
     e2a:	4b6f      	ldr	r3, [pc, #444]	; (fe8 <usart_init+0x250>)
     e2c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     e2e:	687b      	ldr	r3, [r7, #4]
     e30:	222d      	movs	r2, #45	; 0x2d
     e32:	5c9b      	ldrb	r3, [r3, r2]
     e34:	2100      	movs	r1, #0
     e36:	0018      	movs	r0, r3
     e38:	4b6c      	ldr	r3, [pc, #432]	; (fec <usart_init+0x254>)
     e3a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     e3c:	687b      	ldr	r3, [r7, #4]
     e3e:	7ada      	ldrb	r2, [r3, #11]
     e40:	68fb      	ldr	r3, [r7, #12]
     e42:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     e44:	687b      	ldr	r3, [r7, #4]
     e46:	2224      	movs	r2, #36	; 0x24
     e48:	5c9a      	ldrb	r2, [r3, r2]
     e4a:	68fb      	ldr	r3, [r7, #12]
     e4c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	2225      	movs	r2, #37	; 0x25
     e52:	5c9a      	ldrb	r2, [r3, r2]
     e54:	68fb      	ldr	r3, [r7, #12]
     e56:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     e58:	687b      	ldr	r3, [r7, #4]
     e5a:	7eda      	ldrb	r2, [r3, #27]
     e5c:	68fb      	ldr	r3, [r7, #12]
     e5e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     e60:	687b      	ldr	r3, [r7, #4]
     e62:	7f1a      	ldrb	r2, [r3, #28]
     e64:	68fb      	ldr	r3, [r7, #12]
     e66:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
     e68:	233b      	movs	r3, #59	; 0x3b
     e6a:	18fc      	adds	r4, r7, r3
     e6c:	687a      	ldr	r2, [r7, #4]
     e6e:	68fb      	ldr	r3, [r7, #12]
     e70:	0011      	movs	r1, r2
     e72:	0018      	movs	r0, r3
     e74:	4b5e      	ldr	r3, [pc, #376]	; (ff0 <usart_init+0x258>)
     e76:	4798      	blx	r3
     e78:	0003      	movs	r3, r0
     e7a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
     e7c:	233b      	movs	r3, #59	; 0x3b
     e7e:	18fb      	adds	r3, r7, r3
     e80:	781b      	ldrb	r3, [r3, #0]
     e82:	2b00      	cmp	r3, #0
     e84:	d003      	beq.n	e8e <usart_init+0xf6>
		return status_code;
     e86:	233b      	movs	r3, #59	; 0x3b
     e88:	18fb      	adds	r3, r7, r3
     e8a:	781b      	ldrb	r3, [r3, #0]
     e8c:	e09f      	b.n	fce <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     e8e:	2320      	movs	r3, #32
     e90:	18fb      	adds	r3, r7, r3
     e92:	0018      	movs	r0, r3
     e94:	4b57      	ldr	r3, [pc, #348]	; (ff4 <usart_init+0x25c>)
     e96:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e98:	2320      	movs	r3, #32
     e9a:	18fb      	adds	r3, r7, r3
     e9c:	2200      	movs	r2, #0
     e9e:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     ea0:	2320      	movs	r3, #32
     ea2:	18fb      	adds	r3, r7, r3
     ea4:	2200      	movs	r2, #0
     ea6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     eac:	2310      	movs	r3, #16
     eae:	18fb      	adds	r3, r7, r3
     eb0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     eb2:	687b      	ldr	r3, [r7, #4]
     eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     eb6:	2310      	movs	r3, #16
     eb8:	18fb      	adds	r3, r7, r3
     eba:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     ebc:	687b      	ldr	r3, [r7, #4]
     ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     ec0:	2310      	movs	r3, #16
     ec2:	18fb      	adds	r3, r7, r3
     ec4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
     ec6:	687b      	ldr	r3, [r7, #4]
     ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
     eca:	2310      	movs	r3, #16
     ecc:	18fb      	adds	r3, r7, r3
     ece:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     ed0:	2347      	movs	r3, #71	; 0x47
     ed2:	18fb      	adds	r3, r7, r3
     ed4:	2200      	movs	r2, #0
     ed6:	701a      	strb	r2, [r3, #0]
     ed8:	e02c      	b.n	f34 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     eda:	2347      	movs	r3, #71	; 0x47
     edc:	18fb      	adds	r3, r7, r3
     ede:	781a      	ldrb	r2, [r3, #0]
     ee0:	2310      	movs	r3, #16
     ee2:	18fb      	adds	r3, r7, r3
     ee4:	0092      	lsls	r2, r2, #2
     ee6:	58d3      	ldr	r3, [r2, r3]
     ee8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     eec:	2b00      	cmp	r3, #0
     eee:	d109      	bne.n	f04 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ef0:	2347      	movs	r3, #71	; 0x47
     ef2:	18fb      	adds	r3, r7, r3
     ef4:	781a      	ldrb	r2, [r3, #0]
     ef6:	68bb      	ldr	r3, [r7, #8]
     ef8:	0011      	movs	r1, r2
     efa:	0018      	movs	r0, r3
     efc:	4b3e      	ldr	r3, [pc, #248]	; (ff8 <usart_init+0x260>)
     efe:	4798      	blx	r3
     f00:	0003      	movs	r3, r0
     f02:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f06:	3301      	adds	r3, #1
     f08:	d00d      	beq.n	f26 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f0c:	b2da      	uxtb	r2, r3
     f0e:	2320      	movs	r3, #32
     f10:	18fb      	adds	r3, r7, r3
     f12:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     f16:	0c1b      	lsrs	r3, r3, #16
     f18:	b2db      	uxtb	r3, r3
     f1a:	2220      	movs	r2, #32
     f1c:	18ba      	adds	r2, r7, r2
     f1e:	0011      	movs	r1, r2
     f20:	0018      	movs	r0, r3
     f22:	4b36      	ldr	r3, [pc, #216]	; (ffc <usart_init+0x264>)
     f24:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     f26:	2347      	movs	r3, #71	; 0x47
     f28:	18fb      	adds	r3, r7, r3
     f2a:	781a      	ldrb	r2, [r3, #0]
     f2c:	2347      	movs	r3, #71	; 0x47
     f2e:	18fb      	adds	r3, r7, r3
     f30:	3201      	adds	r2, #1
     f32:	701a      	strb	r2, [r3, #0]
     f34:	2347      	movs	r3, #71	; 0x47
     f36:	18fb      	adds	r3, r7, r3
     f38:	781b      	ldrb	r3, [r3, #0]
     f3a:	2b03      	cmp	r3, #3
     f3c:	d9cd      	bls.n	eda <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     f3e:	2300      	movs	r3, #0
     f40:	63fb      	str	r3, [r7, #60]	; 0x3c
     f42:	e00a      	b.n	f5a <usart_init+0x1c2>
		module->callback[i]            = NULL;
     f44:	68fa      	ldr	r2, [r7, #12]
     f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f48:	3302      	adds	r3, #2
     f4a:	009b      	lsls	r3, r3, #2
     f4c:	18d3      	adds	r3, r2, r3
     f4e:	3304      	adds	r3, #4
     f50:	2200      	movs	r2, #0
     f52:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
     f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f56:	3301      	adds	r3, #1
     f58:	63fb      	str	r3, [r7, #60]	; 0x3c
     f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     f5c:	2b05      	cmp	r3, #5
     f5e:	d9f1      	bls.n	f44 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
     f60:	68fb      	ldr	r3, [r7, #12]
     f62:	2200      	movs	r2, #0
     f64:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     f66:	68fb      	ldr	r3, [r7, #12]
     f68:	2200      	movs	r2, #0
     f6a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     f6c:	68fb      	ldr	r3, [r7, #12]
     f6e:	2200      	movs	r2, #0
     f70:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     f72:	68fb      	ldr	r3, [r7, #12]
     f74:	2200      	movs	r2, #0
     f76:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     f78:	68fb      	ldr	r3, [r7, #12]
     f7a:	2230      	movs	r2, #48	; 0x30
     f7c:	2100      	movs	r1, #0
     f7e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
     f80:	68fb      	ldr	r3, [r7, #12]
     f82:	2231      	movs	r2, #49	; 0x31
     f84:	2100      	movs	r1, #0
     f86:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
     f88:	68fb      	ldr	r3, [r7, #12]
     f8a:	2232      	movs	r2, #50	; 0x32
     f8c:	2100      	movs	r1, #0
     f8e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
     f90:	68fb      	ldr	r3, [r7, #12]
     f92:	2233      	movs	r2, #51	; 0x33
     f94:	2100      	movs	r1, #0
     f96:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     f98:	68fb      	ldr	r3, [r7, #12]
     f9a:	681b      	ldr	r3, [r3, #0]
     f9c:	2227      	movs	r2, #39	; 0x27
     f9e:	18bc      	adds	r4, r7, r2
     fa0:	0018      	movs	r0, r3
     fa2:	4b0d      	ldr	r3, [pc, #52]	; (fd8 <usart_init+0x240>)
     fa4:	4798      	blx	r3
     fa6:	0003      	movs	r3, r0
     fa8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     faa:	4a15      	ldr	r2, [pc, #84]	; (1000 <usart_init+0x268>)
     fac:	2327      	movs	r3, #39	; 0x27
     fae:	18fb      	adds	r3, r7, r3
     fb0:	781b      	ldrb	r3, [r3, #0]
     fb2:	0011      	movs	r1, r2
     fb4:	0018      	movs	r0, r3
     fb6:	4b13      	ldr	r3, [pc, #76]	; (1004 <usart_init+0x26c>)
     fb8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     fba:	2327      	movs	r3, #39	; 0x27
     fbc:	18fb      	adds	r3, r7, r3
     fbe:	781a      	ldrb	r2, [r3, #0]
     fc0:	4b11      	ldr	r3, [pc, #68]	; (1008 <usart_init+0x270>)
     fc2:	0092      	lsls	r2, r2, #2
     fc4:	68f9      	ldr	r1, [r7, #12]
     fc6:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
     fc8:	233b      	movs	r3, #59	; 0x3b
     fca:	18fb      	adds	r3, r7, r3
     fcc:	781b      	ldrb	r3, [r3, #0]
}
     fce:	0018      	movs	r0, r3
     fd0:	46bd      	mov	sp, r7
     fd2:	b013      	add	sp, #76	; 0x4c
     fd4:	bd90      	pop	{r4, r7, pc}
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	00000811 	.word	0x00000811
     fdc:	000009d5 	.word	0x000009d5
     fe0:	000009bd 	.word	0x000009bd
     fe4:	00001f6d 	.word	0x00001f6d
     fe8:	00001fb1 	.word	0x00001fb1
     fec:	000005c9 	.word	0x000005c9
     ff0:	00000abd 	.word	0x00000abd
     ff4:	00000a31 	.word	0x00000a31
     ff8:	00000655 	.word	0x00000655
     ffc:	00002259 	.word	0x00002259
    1000:	000011a1 	.word	0x000011a1
    1004:	00000875 	.word	0x00000875
    1008:	200000d4 	.word	0x200000d4

0000100c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    100c:	b580      	push	{r7, lr}
    100e:	b084      	sub	sp, #16
    1010:	af00      	add	r7, sp, #0
    1012:	6078      	str	r0, [r7, #4]
    1014:	000a      	movs	r2, r1
    1016:	1cbb      	adds	r3, r7, #2
    1018:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    101a:	687b      	ldr	r3, [r7, #4]
    101c:	681b      	ldr	r3, [r3, #0]
    101e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1020:	687b      	ldr	r3, [r7, #4]
    1022:	79db      	ldrb	r3, [r3, #7]
    1024:	2201      	movs	r2, #1
    1026:	4053      	eors	r3, r2
    1028:	b2db      	uxtb	r3, r3
    102a:	2b00      	cmp	r3, #0
    102c:	d001      	beq.n	1032 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    102e:	231c      	movs	r3, #28
    1030:	e017      	b.n	1062 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1032:	687b      	ldr	r3, [r7, #4]
    1034:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1036:	b29b      	uxth	r3, r3
    1038:	2b00      	cmp	r3, #0
    103a:	d001      	beq.n	1040 <usart_write_wait+0x34>
		return STATUS_BUSY;
    103c:	2305      	movs	r3, #5
    103e:	e010      	b.n	1062 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    1040:	687b      	ldr	r3, [r7, #4]
    1042:	0018      	movs	r0, r3
    1044:	4b09      	ldr	r3, [pc, #36]	; (106c <usart_write_wait+0x60>)
    1046:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    1048:	68fb      	ldr	r3, [r7, #12]
    104a:	1cba      	adds	r2, r7, #2
    104c:	8812      	ldrh	r2, [r2, #0]
    104e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1050:	46c0      	nop			; (mov r8, r8)
    1052:	68fb      	ldr	r3, [r7, #12]
    1054:	7e1b      	ldrb	r3, [r3, #24]
    1056:	b2db      	uxtb	r3, r3
    1058:	001a      	movs	r2, r3
    105a:	2302      	movs	r3, #2
    105c:	4013      	ands	r3, r2
    105e:	d0f8      	beq.n	1052 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1060:	2300      	movs	r3, #0
}
    1062:	0018      	movs	r0, r3
    1064:	46bd      	mov	sp, r7
    1066:	b004      	add	sp, #16
    1068:	bd80      	pop	{r7, pc}
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	00000a99 	.word	0x00000a99

00001070 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1070:	b580      	push	{r7, lr}
    1072:	b084      	sub	sp, #16
    1074:	af00      	add	r7, sp, #0
    1076:	6078      	str	r0, [r7, #4]
    1078:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    107a:	687b      	ldr	r3, [r7, #4]
    107c:	681b      	ldr	r3, [r3, #0]
    107e:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1080:	687b      	ldr	r3, [r7, #4]
    1082:	799b      	ldrb	r3, [r3, #6]
    1084:	2201      	movs	r2, #1
    1086:	4053      	eors	r3, r2
    1088:	b2db      	uxtb	r3, r3
    108a:	2b00      	cmp	r3, #0
    108c:	d001      	beq.n	1092 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    108e:	231c      	movs	r3, #28
    1090:	e05e      	b.n	1150 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1096:	b29b      	uxth	r3, r3
    1098:	2b00      	cmp	r3, #0
    109a:	d001      	beq.n	10a0 <usart_read_wait+0x30>
		return STATUS_BUSY;
    109c:	2305      	movs	r3, #5
    109e:	e057      	b.n	1150 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    10a0:	68fb      	ldr	r3, [r7, #12]
    10a2:	7e1b      	ldrb	r3, [r3, #24]
    10a4:	b2db      	uxtb	r3, r3
    10a6:	001a      	movs	r2, r3
    10a8:	2304      	movs	r3, #4
    10aa:	4013      	ands	r3, r2
    10ac:	d101      	bne.n	10b2 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    10ae:	2305      	movs	r3, #5
    10b0:	e04e      	b.n	1150 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    10b2:	687b      	ldr	r3, [r7, #4]
    10b4:	0018      	movs	r0, r3
    10b6:	4b28      	ldr	r3, [pc, #160]	; (1158 <usart_read_wait+0xe8>)
    10b8:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    10ba:	68fb      	ldr	r3, [r7, #12]
    10bc:	8b5b      	ldrh	r3, [r3, #26]
    10be:	b29b      	uxth	r3, r3
    10c0:	b2da      	uxtb	r2, r3
    10c2:	230b      	movs	r3, #11
    10c4:	18fb      	adds	r3, r7, r3
    10c6:	213f      	movs	r1, #63	; 0x3f
    10c8:	400a      	ands	r2, r1
    10ca:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    10cc:	230b      	movs	r3, #11
    10ce:	18fb      	adds	r3, r7, r3
    10d0:	781b      	ldrb	r3, [r3, #0]
    10d2:	2b00      	cmp	r3, #0
    10d4:	d036      	beq.n	1144 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    10d6:	230b      	movs	r3, #11
    10d8:	18fb      	adds	r3, r7, r3
    10da:	781b      	ldrb	r3, [r3, #0]
    10dc:	2202      	movs	r2, #2
    10de:	4013      	ands	r3, r2
    10e0:	d004      	beq.n	10ec <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    10e2:	68fb      	ldr	r3, [r7, #12]
    10e4:	2202      	movs	r2, #2
    10e6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    10e8:	231a      	movs	r3, #26
    10ea:	e031      	b.n	1150 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    10ec:	230b      	movs	r3, #11
    10ee:	18fb      	adds	r3, r7, r3
    10f0:	781b      	ldrb	r3, [r3, #0]
    10f2:	2204      	movs	r2, #4
    10f4:	4013      	ands	r3, r2
    10f6:	d004      	beq.n	1102 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    10f8:	68fb      	ldr	r3, [r7, #12]
    10fa:	2204      	movs	r2, #4
    10fc:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    10fe:	231e      	movs	r3, #30
    1100:	e026      	b.n	1150 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1102:	230b      	movs	r3, #11
    1104:	18fb      	adds	r3, r7, r3
    1106:	781b      	ldrb	r3, [r3, #0]
    1108:	2201      	movs	r2, #1
    110a:	4013      	ands	r3, r2
    110c:	d004      	beq.n	1118 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    110e:	68fb      	ldr	r3, [r7, #12]
    1110:	2201      	movs	r2, #1
    1112:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    1114:	2313      	movs	r3, #19
    1116:	e01b      	b.n	1150 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1118:	230b      	movs	r3, #11
    111a:	18fb      	adds	r3, r7, r3
    111c:	781b      	ldrb	r3, [r3, #0]
    111e:	2210      	movs	r2, #16
    1120:	4013      	ands	r3, r2
    1122:	d004      	beq.n	112e <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1124:	68fb      	ldr	r3, [r7, #12]
    1126:	2210      	movs	r2, #16
    1128:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    112a:	2342      	movs	r3, #66	; 0x42
    112c:	e010      	b.n	1150 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    112e:	230b      	movs	r3, #11
    1130:	18fb      	adds	r3, r7, r3
    1132:	781b      	ldrb	r3, [r3, #0]
    1134:	2220      	movs	r2, #32
    1136:	4013      	ands	r3, r2
    1138:	d004      	beq.n	1144 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    113a:	68fb      	ldr	r3, [r7, #12]
    113c:	2220      	movs	r2, #32
    113e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1140:	2341      	movs	r3, #65	; 0x41
    1142:	e005      	b.n	1150 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1144:	68fb      	ldr	r3, [r7, #12]
    1146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1148:	b29a      	uxth	r2, r3
    114a:	683b      	ldr	r3, [r7, #0]
    114c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    114e:	2300      	movs	r3, #0
}
    1150:	0018      	movs	r0, r3
    1152:	46bd      	mov	sp, r7
    1154:	b004      	add	sp, #16
    1156:	bd80      	pop	{r7, pc}
    1158:	00000a99 	.word	0x00000a99

0000115c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    115c:	b580      	push	{r7, lr}
    115e:	b084      	sub	sp, #16
    1160:	af00      	add	r7, sp, #0
    1162:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1164:	687b      	ldr	r3, [r7, #4]
    1166:	681b      	ldr	r3, [r3, #0]
    1168:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    116a:	68fb      	ldr	r3, [r7, #12]
    116c:	69db      	ldr	r3, [r3, #28]
    116e:	1e5a      	subs	r2, r3, #1
    1170:	4193      	sbcs	r3, r2
    1172:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    1174:	0018      	movs	r0, r3
    1176:	46bd      	mov	sp, r7
    1178:	b004      	add	sp, #16
    117a:	bd80      	pop	{r7, pc}

0000117c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    117c:	b580      	push	{r7, lr}
    117e:	b082      	sub	sp, #8
    1180:	af00      	add	r7, sp, #0
    1182:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1184:	46c0      	nop			; (mov r8, r8)
    1186:	687b      	ldr	r3, [r7, #4]
    1188:	0018      	movs	r0, r3
    118a:	4b04      	ldr	r3, [pc, #16]	; (119c <_usart_wait_for_sync+0x20>)
    118c:	4798      	blx	r3
    118e:	1e03      	subs	r3, r0, #0
    1190:	d1f9      	bne.n	1186 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    1192:	46c0      	nop			; (mov r8, r8)
    1194:	46bd      	mov	sp, r7
    1196:	b002      	add	sp, #8
    1198:	bd80      	pop	{r7, pc}
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	0000115d 	.word	0x0000115d

000011a0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    11a0:	b580      	push	{r7, lr}
    11a2:	b088      	sub	sp, #32
    11a4:	af00      	add	r7, sp, #0
    11a6:	0002      	movs	r2, r0
    11a8:	1dfb      	adds	r3, r7, #7
    11aa:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    11ac:	1dfb      	adds	r3, r7, #7
    11ae:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    11b0:	4ba3      	ldr	r3, [pc, #652]	; (1440 <_usart_interrupt_handler+0x2a0>)
    11b2:	0092      	lsls	r2, r2, #2
    11b4:	58d3      	ldr	r3, [r2, r3]
    11b6:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    11b8:	69bb      	ldr	r3, [r7, #24]
    11ba:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    11bc:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    11be:	69bb      	ldr	r3, [r7, #24]
    11c0:	0018      	movs	r0, r3
    11c2:	4ba0      	ldr	r3, [pc, #640]	; (1444 <_usart_interrupt_handler+0x2a4>)
    11c4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    11c6:	697b      	ldr	r3, [r7, #20]
    11c8:	7e1b      	ldrb	r3, [r3, #24]
    11ca:	b2da      	uxtb	r2, r3
    11cc:	2312      	movs	r3, #18
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    11d2:	697b      	ldr	r3, [r7, #20]
    11d4:	7d9b      	ldrb	r3, [r3, #22]
    11d6:	b2db      	uxtb	r3, r3
    11d8:	b29a      	uxth	r2, r3
    11da:	2312      	movs	r3, #18
    11dc:	18fb      	adds	r3, r7, r3
    11de:	2112      	movs	r1, #18
    11e0:	1879      	adds	r1, r7, r1
    11e2:	8809      	ldrh	r1, [r1, #0]
    11e4:	400a      	ands	r2, r1
    11e6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    11e8:	69bb      	ldr	r3, [r7, #24]
    11ea:	2230      	movs	r2, #48	; 0x30
    11ec:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    11ee:	69ba      	ldr	r2, [r7, #24]
    11f0:	2131      	movs	r1, #49	; 0x31
    11f2:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    11f4:	4013      	ands	r3, r2
    11f6:	b2da      	uxtb	r2, r3
    11f8:	2310      	movs	r3, #16
    11fa:	18fb      	adds	r3, r7, r3
    11fc:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    11fe:	2312      	movs	r3, #18
    1200:	18fb      	adds	r3, r7, r3
    1202:	881b      	ldrh	r3, [r3, #0]
    1204:	2201      	movs	r2, #1
    1206:	4013      	ands	r3, r2
    1208:	d044      	beq.n	1294 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    120a:	69bb      	ldr	r3, [r7, #24]
    120c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    120e:	b29b      	uxth	r3, r3
    1210:	2b00      	cmp	r3, #0
    1212:	d03c      	beq.n	128e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1214:	69bb      	ldr	r3, [r7, #24]
    1216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1218:	781b      	ldrb	r3, [r3, #0]
    121a:	b2da      	uxtb	r2, r3
    121c:	231c      	movs	r3, #28
    121e:	18fb      	adds	r3, r7, r3
    1220:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1222:	69bb      	ldr	r3, [r7, #24]
    1224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1226:	1c5a      	adds	r2, r3, #1
    1228:	69bb      	ldr	r3, [r7, #24]
    122a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    122c:	69bb      	ldr	r3, [r7, #24]
    122e:	795b      	ldrb	r3, [r3, #5]
    1230:	2b01      	cmp	r3, #1
    1232:	d113      	bne.n	125c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1234:	69bb      	ldr	r3, [r7, #24]
    1236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1238:	781b      	ldrb	r3, [r3, #0]
    123a:	b2db      	uxtb	r3, r3
    123c:	021b      	lsls	r3, r3, #8
    123e:	b21a      	sxth	r2, r3
    1240:	231c      	movs	r3, #28
    1242:	18fb      	adds	r3, r7, r3
    1244:	2100      	movs	r1, #0
    1246:	5e5b      	ldrsh	r3, [r3, r1]
    1248:	4313      	orrs	r3, r2
    124a:	b21a      	sxth	r2, r3
    124c:	231c      	movs	r3, #28
    124e:	18fb      	adds	r3, r7, r3
    1250:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1252:	69bb      	ldr	r3, [r7, #24]
    1254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1256:	1c5a      	adds	r2, r3, #1
    1258:	69bb      	ldr	r3, [r7, #24]
    125a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    125c:	231c      	movs	r3, #28
    125e:	18fb      	adds	r3, r7, r3
    1260:	881b      	ldrh	r3, [r3, #0]
    1262:	05db      	lsls	r3, r3, #23
    1264:	0ddb      	lsrs	r3, r3, #23
    1266:	b29a      	uxth	r2, r3
    1268:	697b      	ldr	r3, [r7, #20]
    126a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    126c:	69bb      	ldr	r3, [r7, #24]
    126e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    1270:	b29b      	uxth	r3, r3
    1272:	3b01      	subs	r3, #1
    1274:	b29b      	uxth	r3, r3
    1276:	69ba      	ldr	r2, [r7, #24]
    1278:	1c19      	adds	r1, r3, #0
    127a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    127c:	2b00      	cmp	r3, #0
    127e:	d109      	bne.n	1294 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1280:	697b      	ldr	r3, [r7, #20]
    1282:	2201      	movs	r2, #1
    1284:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1286:	697b      	ldr	r3, [r7, #20]
    1288:	2202      	movs	r2, #2
    128a:	759a      	strb	r2, [r3, #22]
    128c:	e002      	b.n	1294 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    128e:	697b      	ldr	r3, [r7, #20]
    1290:	2201      	movs	r2, #1
    1292:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1294:	2312      	movs	r3, #18
    1296:	18fb      	adds	r3, r7, r3
    1298:	881b      	ldrh	r3, [r3, #0]
    129a:	2202      	movs	r2, #2
    129c:	4013      	ands	r3, r2
    129e:	d011      	beq.n	12c4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    12a0:	697b      	ldr	r3, [r7, #20]
    12a2:	2202      	movs	r2, #2
    12a4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    12a6:	69bb      	ldr	r3, [r7, #24]
    12a8:	2233      	movs	r2, #51	; 0x33
    12aa:	2100      	movs	r1, #0
    12ac:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    12ae:	2310      	movs	r3, #16
    12b0:	18fb      	adds	r3, r7, r3
    12b2:	881b      	ldrh	r3, [r3, #0]
    12b4:	2201      	movs	r2, #1
    12b6:	4013      	ands	r3, r2
    12b8:	d004      	beq.n	12c4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    12ba:	69bb      	ldr	r3, [r7, #24]
    12bc:	68db      	ldr	r3, [r3, #12]
    12be:	69ba      	ldr	r2, [r7, #24]
    12c0:	0010      	movs	r0, r2
    12c2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    12c4:	2312      	movs	r3, #18
    12c6:	18fb      	adds	r3, r7, r3
    12c8:	881b      	ldrh	r3, [r3, #0]
    12ca:	2204      	movs	r2, #4
    12cc:	4013      	ands	r3, r2
    12ce:	d100      	bne.n	12d2 <_usart_interrupt_handler+0x132>
    12d0:	e0bd      	b.n	144e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    12d2:	69bb      	ldr	r3, [r7, #24]
    12d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    12d6:	b29b      	uxth	r3, r3
    12d8:	2b00      	cmp	r3, #0
    12da:	d100      	bne.n	12de <_usart_interrupt_handler+0x13e>
    12dc:	e0b4      	b.n	1448 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12de:	697b      	ldr	r3, [r7, #20]
    12e0:	8b5b      	ldrh	r3, [r3, #26]
    12e2:	b29b      	uxth	r3, r3
    12e4:	b2da      	uxtb	r2, r3
    12e6:	231f      	movs	r3, #31
    12e8:	18fb      	adds	r3, r7, r3
    12ea:	213f      	movs	r1, #63	; 0x3f
    12ec:	400a      	ands	r2, r1
    12ee:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    12f0:	231f      	movs	r3, #31
    12f2:	18fb      	adds	r3, r7, r3
    12f4:	781b      	ldrb	r3, [r3, #0]
    12f6:	2208      	movs	r2, #8
    12f8:	4013      	ands	r3, r2
    12fa:	d007      	beq.n	130c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    12fc:	231f      	movs	r3, #31
    12fe:	18fb      	adds	r3, r7, r3
    1300:	221f      	movs	r2, #31
    1302:	18ba      	adds	r2, r7, r2
    1304:	7812      	ldrb	r2, [r2, #0]
    1306:	2108      	movs	r1, #8
    1308:	438a      	bics	r2, r1
    130a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    130c:	231f      	movs	r3, #31
    130e:	18fb      	adds	r3, r7, r3
    1310:	781b      	ldrb	r3, [r3, #0]
    1312:	2b00      	cmp	r3, #0
    1314:	d050      	beq.n	13b8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1316:	231f      	movs	r3, #31
    1318:	18fb      	adds	r3, r7, r3
    131a:	781b      	ldrb	r3, [r3, #0]
    131c:	2202      	movs	r2, #2
    131e:	4013      	ands	r3, r2
    1320:	d007      	beq.n	1332 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1322:	69bb      	ldr	r3, [r7, #24]
    1324:	2232      	movs	r2, #50	; 0x32
    1326:	211a      	movs	r1, #26
    1328:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    132a:	697b      	ldr	r3, [r7, #20]
    132c:	2202      	movs	r2, #2
    132e:	835a      	strh	r2, [r3, #26]
    1330:	e036      	b.n	13a0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1332:	231f      	movs	r3, #31
    1334:	18fb      	adds	r3, r7, r3
    1336:	781b      	ldrb	r3, [r3, #0]
    1338:	2204      	movs	r2, #4
    133a:	4013      	ands	r3, r2
    133c:	d007      	beq.n	134e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    133e:	69bb      	ldr	r3, [r7, #24]
    1340:	2232      	movs	r2, #50	; 0x32
    1342:	211e      	movs	r1, #30
    1344:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1346:	697b      	ldr	r3, [r7, #20]
    1348:	2204      	movs	r2, #4
    134a:	835a      	strh	r2, [r3, #26]
    134c:	e028      	b.n	13a0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    134e:	231f      	movs	r3, #31
    1350:	18fb      	adds	r3, r7, r3
    1352:	781b      	ldrb	r3, [r3, #0]
    1354:	2201      	movs	r2, #1
    1356:	4013      	ands	r3, r2
    1358:	d007      	beq.n	136a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    135a:	69bb      	ldr	r3, [r7, #24]
    135c:	2232      	movs	r2, #50	; 0x32
    135e:	2113      	movs	r1, #19
    1360:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1362:	697b      	ldr	r3, [r7, #20]
    1364:	2201      	movs	r2, #1
    1366:	835a      	strh	r2, [r3, #26]
    1368:	e01a      	b.n	13a0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    136a:	231f      	movs	r3, #31
    136c:	18fb      	adds	r3, r7, r3
    136e:	781b      	ldrb	r3, [r3, #0]
    1370:	2210      	movs	r2, #16
    1372:	4013      	ands	r3, r2
    1374:	d007      	beq.n	1386 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1376:	69bb      	ldr	r3, [r7, #24]
    1378:	2232      	movs	r2, #50	; 0x32
    137a:	2142      	movs	r1, #66	; 0x42
    137c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    137e:	697b      	ldr	r3, [r7, #20]
    1380:	2210      	movs	r2, #16
    1382:	835a      	strh	r2, [r3, #26]
    1384:	e00c      	b.n	13a0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1386:	231f      	movs	r3, #31
    1388:	18fb      	adds	r3, r7, r3
    138a:	781b      	ldrb	r3, [r3, #0]
    138c:	2220      	movs	r2, #32
    138e:	4013      	ands	r3, r2
    1390:	d006      	beq.n	13a0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1392:	69bb      	ldr	r3, [r7, #24]
    1394:	2232      	movs	r2, #50	; 0x32
    1396:	2141      	movs	r1, #65	; 0x41
    1398:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    139a:	697b      	ldr	r3, [r7, #20]
    139c:	2220      	movs	r2, #32
    139e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    13a0:	2310      	movs	r3, #16
    13a2:	18fb      	adds	r3, r7, r3
    13a4:	881b      	ldrh	r3, [r3, #0]
    13a6:	2204      	movs	r2, #4
    13a8:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    13aa:	d050      	beq.n	144e <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    13ac:	69bb      	ldr	r3, [r7, #24]
    13ae:	695b      	ldr	r3, [r3, #20]
    13b0:	69ba      	ldr	r2, [r7, #24]
    13b2:	0010      	movs	r0, r2
    13b4:	4798      	blx	r3
    13b6:	e04a      	b.n	144e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    13b8:	697b      	ldr	r3, [r7, #20]
    13ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    13bc:	b29a      	uxth	r2, r3
    13be:	230e      	movs	r3, #14
    13c0:	18fb      	adds	r3, r7, r3
    13c2:	05d2      	lsls	r2, r2, #23
    13c4:	0dd2      	lsrs	r2, r2, #23
    13c6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    13c8:	69bb      	ldr	r3, [r7, #24]
    13ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    13cc:	220e      	movs	r2, #14
    13ce:	18ba      	adds	r2, r7, r2
    13d0:	8812      	ldrh	r2, [r2, #0]
    13d2:	b2d2      	uxtb	r2, r2
    13d4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    13d6:	69bb      	ldr	r3, [r7, #24]
    13d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    13da:	1c5a      	adds	r2, r3, #1
    13dc:	69bb      	ldr	r3, [r7, #24]
    13de:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    13e0:	69bb      	ldr	r3, [r7, #24]
    13e2:	795b      	ldrb	r3, [r3, #5]
    13e4:	2b01      	cmp	r3, #1
    13e6:	d10d      	bne.n	1404 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    13e8:	69bb      	ldr	r3, [r7, #24]
    13ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    13ec:	220e      	movs	r2, #14
    13ee:	18ba      	adds	r2, r7, r2
    13f0:	8812      	ldrh	r2, [r2, #0]
    13f2:	0a12      	lsrs	r2, r2, #8
    13f4:	b292      	uxth	r2, r2
    13f6:	b2d2      	uxtb	r2, r2
    13f8:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    13fa:	69bb      	ldr	r3, [r7, #24]
    13fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    13fe:	1c5a      	adds	r2, r3, #1
    1400:	69bb      	ldr	r3, [r7, #24]
    1402:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1404:	69bb      	ldr	r3, [r7, #24]
    1406:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1408:	b29b      	uxth	r3, r3
    140a:	3b01      	subs	r3, #1
    140c:	b29b      	uxth	r3, r3
    140e:	69ba      	ldr	r2, [r7, #24]
    1410:	1c19      	adds	r1, r3, #0
    1412:	8591      	strh	r1, [r2, #44]	; 0x2c
    1414:	2b00      	cmp	r3, #0
    1416:	d11a      	bne.n	144e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1418:	697b      	ldr	r3, [r7, #20]
    141a:	2204      	movs	r2, #4
    141c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    141e:	69bb      	ldr	r3, [r7, #24]
    1420:	2232      	movs	r2, #50	; 0x32
    1422:	2100      	movs	r1, #0
    1424:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    1426:	2310      	movs	r3, #16
    1428:	18fb      	adds	r3, r7, r3
    142a:	881b      	ldrh	r3, [r3, #0]
    142c:	2202      	movs	r2, #2
    142e:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    1430:	d00d      	beq.n	144e <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1432:	69bb      	ldr	r3, [r7, #24]
    1434:	691b      	ldr	r3, [r3, #16]
    1436:	69ba      	ldr	r2, [r7, #24]
    1438:	0010      	movs	r0, r2
    143a:	4798      	blx	r3
    143c:	e007      	b.n	144e <_usart_interrupt_handler+0x2ae>
    143e:	46c0      	nop			; (mov r8, r8)
    1440:	200000d4 	.word	0x200000d4
    1444:	0000117d 	.word	0x0000117d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1448:	697b      	ldr	r3, [r7, #20]
    144a:	2204      	movs	r2, #4
    144c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    144e:	2312      	movs	r3, #18
    1450:	18fb      	adds	r3, r7, r3
    1452:	881b      	ldrh	r3, [r3, #0]
    1454:	2210      	movs	r2, #16
    1456:	4013      	ands	r3, r2
    1458:	d010      	beq.n	147c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    145a:	697b      	ldr	r3, [r7, #20]
    145c:	2210      	movs	r2, #16
    145e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1460:	697b      	ldr	r3, [r7, #20]
    1462:	2210      	movs	r2, #16
    1464:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1466:	2310      	movs	r3, #16
    1468:	18fb      	adds	r3, r7, r3
    146a:	881b      	ldrh	r3, [r3, #0]
    146c:	2210      	movs	r2, #16
    146e:	4013      	ands	r3, r2
    1470:	d004      	beq.n	147c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1472:	69bb      	ldr	r3, [r7, #24]
    1474:	69db      	ldr	r3, [r3, #28]
    1476:	69ba      	ldr	r2, [r7, #24]
    1478:	0010      	movs	r0, r2
    147a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    147c:	2312      	movs	r3, #18
    147e:	18fb      	adds	r3, r7, r3
    1480:	881b      	ldrh	r3, [r3, #0]
    1482:	2220      	movs	r2, #32
    1484:	4013      	ands	r3, r2
    1486:	d010      	beq.n	14aa <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1488:	697b      	ldr	r3, [r7, #20]
    148a:	2220      	movs	r2, #32
    148c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    148e:	697b      	ldr	r3, [r7, #20]
    1490:	2220      	movs	r2, #32
    1492:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1494:	2310      	movs	r3, #16
    1496:	18fb      	adds	r3, r7, r3
    1498:	881b      	ldrh	r3, [r3, #0]
    149a:	2208      	movs	r2, #8
    149c:	4013      	ands	r3, r2
    149e:	d004      	beq.n	14aa <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    14a0:	69bb      	ldr	r3, [r7, #24]
    14a2:	699b      	ldr	r3, [r3, #24]
    14a4:	69ba      	ldr	r2, [r7, #24]
    14a6:	0010      	movs	r0, r2
    14a8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    14aa:	2312      	movs	r3, #18
    14ac:	18fb      	adds	r3, r7, r3
    14ae:	881b      	ldrh	r3, [r3, #0]
    14b0:	2208      	movs	r2, #8
    14b2:	4013      	ands	r3, r2
    14b4:	d010      	beq.n	14d8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    14b6:	697b      	ldr	r3, [r7, #20]
    14b8:	2208      	movs	r2, #8
    14ba:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    14bc:	697b      	ldr	r3, [r7, #20]
    14be:	2208      	movs	r2, #8
    14c0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    14c2:	2310      	movs	r3, #16
    14c4:	18fb      	adds	r3, r7, r3
    14c6:	881b      	ldrh	r3, [r3, #0]
    14c8:	2220      	movs	r2, #32
    14ca:	4013      	ands	r3, r2
    14cc:	d004      	beq.n	14d8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    14ce:	69bb      	ldr	r3, [r7, #24]
    14d0:	6a1b      	ldr	r3, [r3, #32]
    14d2:	69ba      	ldr	r2, [r7, #24]
    14d4:	0010      	movs	r0, r2
    14d6:	4798      	blx	r3
		}
	}
#endif
}
    14d8:	46c0      	nop			; (mov r8, r8)
    14da:	46bd      	mov	sp, r7
    14dc:	b008      	add	sp, #32
    14de:	bd80      	pop	{r7, pc}

000014e0 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    14e0:	b580      	push	{r7, lr}
    14e2:	b082      	sub	sp, #8
    14e4:	af00      	add	r7, sp, #0
    14e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    14e8:	687b      	ldr	r3, [r7, #4]
    14ea:	2201      	movs	r2, #1
    14ec:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    14ee:	687b      	ldr	r3, [r7, #4]
    14f0:	2200      	movs	r2, #0
    14f2:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    14f4:	687b      	ldr	r3, [r7, #4]
    14f6:	2206      	movs	r2, #6
    14f8:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    14fa:	687b      	ldr	r3, [r7, #4]
    14fc:	2200      	movs	r2, #0
    14fe:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    1500:	687b      	ldr	r3, [r7, #4]
    1502:	2200      	movs	r2, #0
    1504:	725a      	strb	r2, [r3, #9]
}
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	46bd      	mov	sp, r7
    150a:	b002      	add	sp, #8
    150c:	bd80      	pop	{r7, pc}
    150e:	46c0      	nop			; (mov r8, r8)

00001510 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1510:	b580      	push	{r7, lr}
    1512:	b082      	sub	sp, #8
    1514:	af00      	add	r7, sp, #0
    1516:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1518:	687b      	ldr	r3, [r7, #4]
    151a:	2200      	movs	r2, #0
    151c:	701a      	strb	r2, [r3, #0]
}
    151e:	46c0      	nop			; (mov r8, r8)
    1520:	46bd      	mov	sp, r7
    1522:	b002      	add	sp, #8
    1524:	bd80      	pop	{r7, pc}
    1526:	46c0      	nop			; (mov r8, r8)

00001528 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    1528:	b580      	push	{r7, lr}
    152a:	b082      	sub	sp, #8
    152c:	af00      	add	r7, sp, #0
    152e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    1530:	687b      	ldr	r3, [r7, #4]
    1532:	2203      	movs	r2, #3
    1534:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    1536:	687b      	ldr	r3, [r7, #4]
    1538:	2200      	movs	r2, #0
    153a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    153c:	687b      	ldr	r3, [r7, #4]
    153e:	2201      	movs	r2, #1
    1540:	709a      	strb	r2, [r3, #2]
}
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	46bd      	mov	sp, r7
    1546:	b002      	add	sp, #8
    1548:	bd80      	pop	{r7, pc}
    154a:	46c0      	nop			; (mov r8, r8)

0000154c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    154c:	b580      	push	{r7, lr}
    154e:	b082      	sub	sp, #8
    1550:	af00      	add	r7, sp, #0
    1552:	0002      	movs	r2, r0
    1554:	1dfb      	adds	r3, r7, #7
    1556:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1558:	4a03      	ldr	r2, [pc, #12]	; (1568 <system_cpu_clock_set_divider+0x1c>)
    155a:	1dfb      	adds	r3, r7, #7
    155c:	781b      	ldrb	r3, [r3, #0]
    155e:	7213      	strb	r3, [r2, #8]
}
    1560:	46c0      	nop			; (mov r8, r8)
    1562:	46bd      	mov	sp, r7
    1564:	b002      	add	sp, #8
    1566:	bd80      	pop	{r7, pc}
    1568:	40000400 	.word	0x40000400

0000156c <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    156c:	b580      	push	{r7, lr}
    156e:	b082      	sub	sp, #8
    1570:	af00      	add	r7, sp, #0
    1572:	0002      	movs	r2, r0
    1574:	1dfb      	adds	r3, r7, #7
    1576:	701a      	strb	r2, [r3, #0]
    1578:	1dbb      	adds	r3, r7, #6
    157a:	1c0a      	adds	r2, r1, #0
    157c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    157e:	1dfb      	adds	r3, r7, #7
    1580:	781b      	ldrb	r3, [r3, #0]
    1582:	2b01      	cmp	r3, #1
    1584:	d008      	beq.n	1598 <system_apb_clock_set_divider+0x2c>
    1586:	2b02      	cmp	r3, #2
    1588:	d00b      	beq.n	15a2 <system_apb_clock_set_divider+0x36>
    158a:	2b00      	cmp	r3, #0
    158c:	d10e      	bne.n	15ac <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    158e:	4a0b      	ldr	r2, [pc, #44]	; (15bc <system_apb_clock_set_divider+0x50>)
    1590:	1dbb      	adds	r3, r7, #6
    1592:	781b      	ldrb	r3, [r3, #0]
    1594:	7253      	strb	r3, [r2, #9]
			break;
    1596:	e00b      	b.n	15b0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1598:	4a08      	ldr	r2, [pc, #32]	; (15bc <system_apb_clock_set_divider+0x50>)
    159a:	1dbb      	adds	r3, r7, #6
    159c:	781b      	ldrb	r3, [r3, #0]
    159e:	7293      	strb	r3, [r2, #10]
			break;
    15a0:	e006      	b.n	15b0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    15a2:	4a06      	ldr	r2, [pc, #24]	; (15bc <system_apb_clock_set_divider+0x50>)
    15a4:	1dbb      	adds	r3, r7, #6
    15a6:	781b      	ldrb	r3, [r3, #0]
    15a8:	72d3      	strb	r3, [r2, #11]
			break;
    15aa:	e001      	b.n	15b0 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    15ac:	2317      	movs	r3, #23
    15ae:	e000      	b.n	15b2 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    15b0:	2300      	movs	r3, #0
}
    15b2:	0018      	movs	r0, r3
    15b4:	46bd      	mov	sp, r7
    15b6:	b002      	add	sp, #8
    15b8:	bd80      	pop	{r7, pc}
    15ba:	46c0      	nop			; (mov r8, r8)
    15bc:	40000400 	.word	0x40000400

000015c0 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
    15c0:	b580      	push	{r7, lr}
    15c2:	b082      	sub	sp, #8
    15c4:	af00      	add	r7, sp, #0
    15c6:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
    15c8:	687b      	ldr	r3, [r7, #4]
    15ca:	2201      	movs	r2, #1
    15cc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
    15ce:	687b      	ldr	r3, [r7, #4]
    15d0:	2200      	movs	r2, #0
    15d2:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	2200      	movs	r2, #0
    15d8:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
    15da:	687b      	ldr	r3, [r7, #4]
    15dc:	2200      	movs	r2, #0
    15de:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
    15e0:	687b      	ldr	r3, [r7, #4]
    15e2:	2200      	movs	r2, #0
    15e4:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
    15e6:	687b      	ldr	r3, [r7, #4]
    15e8:	4a0a      	ldr	r2, [pc, #40]	; (1614 <system_clock_source_dpll_get_config_defaults+0x54>)
    15ea:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
    15ec:	687b      	ldr	r3, [r7, #4]
    15ee:	2280      	movs	r2, #128	; 0x80
    15f0:	0212      	lsls	r2, r2, #8
    15f2:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
    15f4:	687b      	ldr	r3, [r7, #4]
    15f6:	2201      	movs	r2, #1
    15f8:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
    15fa:	687b      	ldr	r3, [r7, #4]
    15fc:	2200      	movs	r2, #0
    15fe:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    1600:	687b      	ldr	r3, [r7, #4]
    1602:	2200      	movs	r2, #0
    1604:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    1606:	687b      	ldr	r3, [r7, #4]
    1608:	2200      	movs	r2, #0
    160a:	749a      	strb	r2, [r3, #18]
};
    160c:	46c0      	nop			; (mov r8, r8)
    160e:	46bd      	mov	sp, r7
    1610:	b002      	add	sp, #8
    1612:	bd80      	pop	{r7, pc}
    1614:	02dc6c00 	.word	0x02dc6c00

00001618 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    1618:	b580      	push	{r7, lr}
    161a:	b082      	sub	sp, #8
    161c:	af00      	add	r7, sp, #0
    161e:	0002      	movs	r2, r0
    1620:	1dfb      	adds	r3, r7, #7
    1622:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1624:	4a08      	ldr	r2, [pc, #32]	; (1648 <system_flash_set_waitstates+0x30>)
    1626:	1dfb      	adds	r3, r7, #7
    1628:	781b      	ldrb	r3, [r3, #0]
    162a:	210f      	movs	r1, #15
    162c:	400b      	ands	r3, r1
    162e:	b2d9      	uxtb	r1, r3
    1630:	6853      	ldr	r3, [r2, #4]
    1632:	200f      	movs	r0, #15
    1634:	4001      	ands	r1, r0
    1636:	0049      	lsls	r1, r1, #1
    1638:	201e      	movs	r0, #30
    163a:	4383      	bics	r3, r0
    163c:	430b      	orrs	r3, r1
    163e:	6053      	str	r3, [r2, #4]
}
    1640:	46c0      	nop			; (mov r8, r8)
    1642:	46bd      	mov	sp, r7
    1644:	b002      	add	sp, #8
    1646:	bd80      	pop	{r7, pc}
    1648:	41004000 	.word	0x41004000

0000164c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    164c:	b580      	push	{r7, lr}
    164e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1650:	46c0      	nop			; (mov r8, r8)
    1652:	4b04      	ldr	r3, [pc, #16]	; (1664 <_system_dfll_wait_for_sync+0x18>)
    1654:	68db      	ldr	r3, [r3, #12]
    1656:	2210      	movs	r2, #16
    1658:	4013      	ands	r3, r2
    165a:	d0fa      	beq.n	1652 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    165c:	46c0      	nop			; (mov r8, r8)
    165e:	46bd      	mov	sp, r7
    1660:	bd80      	pop	{r7, pc}
    1662:	46c0      	nop			; (mov r8, r8)
    1664:	40000800 	.word	0x40000800

00001668 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    1668:	b580      	push	{r7, lr}
    166a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    166c:	4b0c      	ldr	r3, [pc, #48]	; (16a0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    166e:	2202      	movs	r2, #2
    1670:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1672:	4b0c      	ldr	r3, [pc, #48]	; (16a4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    1674:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1676:	4a0a      	ldr	r2, [pc, #40]	; (16a0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1678:	4b0b      	ldr	r3, [pc, #44]	; (16a8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    167a:	689b      	ldr	r3, [r3, #8]
    167c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    167e:	4a08      	ldr	r2, [pc, #32]	; (16a0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1680:	4b09      	ldr	r3, [pc, #36]	; (16a8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1682:	685b      	ldr	r3, [r3, #4]
    1684:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    1686:	4b06      	ldr	r3, [pc, #24]	; (16a0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1688:	2200      	movs	r2, #0
    168a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    168c:	4b05      	ldr	r3, [pc, #20]	; (16a4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    168e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1690:	4a03      	ldr	r2, [pc, #12]	; (16a0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    1692:	4b05      	ldr	r3, [pc, #20]	; (16a8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    1694:	681b      	ldr	r3, [r3, #0]
    1696:	b29b      	uxth	r3, r3
    1698:	8493      	strh	r3, [r2, #36]	; 0x24
}
    169a:	46c0      	nop			; (mov r8, r8)
    169c:	46bd      	mov	sp, r7
    169e:	bd80      	pop	{r7, pc}
    16a0:	40000800 	.word	0x40000800
    16a4:	0000164d 	.word	0x0000164d
    16a8:	200000b0 	.word	0x200000b0

000016ac <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    16ac:	b580      	push	{r7, lr}
    16ae:	b082      	sub	sp, #8
    16b0:	af00      	add	r7, sp, #0
    16b2:	0002      	movs	r2, r0
    16b4:	1dfb      	adds	r3, r7, #7
    16b6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    16b8:	1dfb      	adds	r3, r7, #7
    16ba:	781b      	ldrb	r3, [r3, #0]
    16bc:	2b08      	cmp	r3, #8
    16be:	d840      	bhi.n	1742 <system_clock_source_get_hz+0x96>
    16c0:	009a      	lsls	r2, r3, #2
    16c2:	4b22      	ldr	r3, [pc, #136]	; (174c <system_clock_source_get_hz+0xa0>)
    16c4:	18d3      	adds	r3, r2, r3
    16c6:	681b      	ldr	r3, [r3, #0]
    16c8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    16ca:	4b21      	ldr	r3, [pc, #132]	; (1750 <system_clock_source_get_hz+0xa4>)
    16cc:	691b      	ldr	r3, [r3, #16]
    16ce:	e039      	b.n	1744 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    16d0:	4b20      	ldr	r3, [pc, #128]	; (1754 <system_clock_source_get_hz+0xa8>)
    16d2:	6a1b      	ldr	r3, [r3, #32]
    16d4:	059b      	lsls	r3, r3, #22
    16d6:	0f9b      	lsrs	r3, r3, #30
    16d8:	b2db      	uxtb	r3, r3
    16da:	001a      	movs	r2, r3
    16dc:	4b1e      	ldr	r3, [pc, #120]	; (1758 <system_clock_source_get_hz+0xac>)
    16de:	40d3      	lsrs	r3, r2
    16e0:	e030      	b.n	1744 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    16e2:	2380      	movs	r3, #128	; 0x80
    16e4:	021b      	lsls	r3, r3, #8
    16e6:	e02d      	b.n	1744 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    16e8:	2380      	movs	r3, #128	; 0x80
    16ea:	021b      	lsls	r3, r3, #8
    16ec:	e02a      	b.n	1744 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    16ee:	4b18      	ldr	r3, [pc, #96]	; (1750 <system_clock_source_get_hz+0xa4>)
    16f0:	695b      	ldr	r3, [r3, #20]
    16f2:	e027      	b.n	1744 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    16f4:	4b16      	ldr	r3, [pc, #88]	; (1750 <system_clock_source_get_hz+0xa4>)
    16f6:	681b      	ldr	r3, [r3, #0]
    16f8:	2202      	movs	r2, #2
    16fa:	4013      	ands	r3, r2
    16fc:	d101      	bne.n	1702 <system_clock_source_get_hz+0x56>
			return 0;
    16fe:	2300      	movs	r3, #0
    1700:	e020      	b.n	1744 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    1702:	4b16      	ldr	r3, [pc, #88]	; (175c <system_clock_source_get_hz+0xb0>)
    1704:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1706:	4b12      	ldr	r3, [pc, #72]	; (1750 <system_clock_source_get_hz+0xa4>)
    1708:	681b      	ldr	r3, [r3, #0]
    170a:	2204      	movs	r2, #4
    170c:	4013      	ands	r3, r2
    170e:	d009      	beq.n	1724 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1710:	2000      	movs	r0, #0
    1712:	4b13      	ldr	r3, [pc, #76]	; (1760 <system_clock_source_get_hz+0xb4>)
    1714:	4798      	blx	r3
    1716:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    1718:	4b0d      	ldr	r3, [pc, #52]	; (1750 <system_clock_source_get_hz+0xa4>)
    171a:	689b      	ldr	r3, [r3, #8]
    171c:	041b      	lsls	r3, r3, #16
    171e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1720:	4353      	muls	r3, r2
    1722:	e00f      	b.n	1744 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1724:	4b0f      	ldr	r3, [pc, #60]	; (1764 <system_clock_source_get_hz+0xb8>)
    1726:	e00d      	b.n	1744 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1728:	4a0a      	ldr	r2, [pc, #40]	; (1754 <system_clock_source_get_hz+0xa8>)
    172a:	2350      	movs	r3, #80	; 0x50
    172c:	5cd3      	ldrb	r3, [r2, r3]
    172e:	b2db      	uxtb	r3, r3
    1730:	001a      	movs	r2, r3
    1732:	2304      	movs	r3, #4
    1734:	4013      	ands	r3, r2
    1736:	d101      	bne.n	173c <system_clock_source_get_hz+0x90>
			return 0;
    1738:	2300      	movs	r3, #0
    173a:	e003      	b.n	1744 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    173c:	4b04      	ldr	r3, [pc, #16]	; (1750 <system_clock_source_get_hz+0xa4>)
    173e:	68db      	ldr	r3, [r3, #12]
    1740:	e000      	b.n	1744 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    1742:	2300      	movs	r3, #0
	}
}
    1744:	0018      	movs	r0, r3
    1746:	46bd      	mov	sp, r7
    1748:	b002      	add	sp, #8
    174a:	bd80      	pop	{r7, pc}
    174c:	000036f4 	.word	0x000036f4
    1750:	200000b0 	.word	0x200000b0
    1754:	40000800 	.word	0x40000800
    1758:	007a1200 	.word	0x007a1200
    175c:	0000164d 	.word	0x0000164d
    1760:	00002091 	.word	0x00002091
    1764:	02dc6c00 	.word	0x02dc6c00

00001768 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1768:	b580      	push	{r7, lr}
    176a:	b084      	sub	sp, #16
    176c:	af00      	add	r7, sp, #0
    176e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1770:	4b1a      	ldr	r3, [pc, #104]	; (17dc <system_clock_source_osc8m_set_config+0x74>)
    1772:	6a1b      	ldr	r3, [r3, #32]
    1774:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1776:	687b      	ldr	r3, [r7, #4]
    1778:	781b      	ldrb	r3, [r3, #0]
    177a:	1c1a      	adds	r2, r3, #0
    177c:	2303      	movs	r3, #3
    177e:	4013      	ands	r3, r2
    1780:	b2da      	uxtb	r2, r3
    1782:	230d      	movs	r3, #13
    1784:	18fb      	adds	r3, r7, r3
    1786:	2103      	movs	r1, #3
    1788:	400a      	ands	r2, r1
    178a:	0010      	movs	r0, r2
    178c:	781a      	ldrb	r2, [r3, #0]
    178e:	2103      	movs	r1, #3
    1790:	438a      	bics	r2, r1
    1792:	1c11      	adds	r1, r2, #0
    1794:	1c02      	adds	r2, r0, #0
    1796:	430a      	orrs	r2, r1
    1798:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    179a:	687b      	ldr	r3, [r7, #4]
    179c:	789a      	ldrb	r2, [r3, #2]
    179e:	230c      	movs	r3, #12
    17a0:	18fb      	adds	r3, r7, r3
    17a2:	01d0      	lsls	r0, r2, #7
    17a4:	781a      	ldrb	r2, [r3, #0]
    17a6:	217f      	movs	r1, #127	; 0x7f
    17a8:	400a      	ands	r2, r1
    17aa:	1c11      	adds	r1, r2, #0
    17ac:	1c02      	adds	r2, r0, #0
    17ae:	430a      	orrs	r2, r1
    17b0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	785a      	ldrb	r2, [r3, #1]
    17b6:	230c      	movs	r3, #12
    17b8:	18fb      	adds	r3, r7, r3
    17ba:	2101      	movs	r1, #1
    17bc:	400a      	ands	r2, r1
    17be:	0190      	lsls	r0, r2, #6
    17c0:	781a      	ldrb	r2, [r3, #0]
    17c2:	2140      	movs	r1, #64	; 0x40
    17c4:	438a      	bics	r2, r1
    17c6:	1c11      	adds	r1, r2, #0
    17c8:	1c02      	adds	r2, r0, #0
    17ca:	430a      	orrs	r2, r1
    17cc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    17ce:	4b03      	ldr	r3, [pc, #12]	; (17dc <system_clock_source_osc8m_set_config+0x74>)
    17d0:	68fa      	ldr	r2, [r7, #12]
    17d2:	621a      	str	r2, [r3, #32]
}
    17d4:	46c0      	nop			; (mov r8, r8)
    17d6:	46bd      	mov	sp, r7
    17d8:	b004      	add	sp, #16
    17da:	bd80      	pop	{r7, pc}
    17dc:	40000800 	.word	0x40000800

000017e0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    17e0:	b580      	push	{r7, lr}
    17e2:	b086      	sub	sp, #24
    17e4:	af00      	add	r7, sp, #0
    17e6:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    17e8:	687b      	ldr	r3, [r7, #4]
    17ea:	68db      	ldr	r3, [r3, #12]
    17ec:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    17ee:	687b      	ldr	r3, [r7, #4]
    17f0:	7d1b      	ldrb	r3, [r3, #20]
    17f2:	2b01      	cmp	r3, #1
    17f4:	d10a      	bne.n	180c <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
    17f6:	687b      	ldr	r3, [r7, #4]
    17f8:	8a1b      	ldrh	r3, [r3, #16]
    17fa:	3301      	adds	r3, #1
    17fc:	005b      	lsls	r3, r3, #1
    17fe:	001a      	movs	r2, r3
    1800:	4b36      	ldr	r3, [pc, #216]	; (18dc <system_clock_source_dpll_set_config+0xfc>)
    1802:	0011      	movs	r1, r2
    1804:	6978      	ldr	r0, [r7, #20]
    1806:	4798      	blx	r3
    1808:	0003      	movs	r3, r0
    180a:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    180c:	687b      	ldr	r3, [r7, #4]
    180e:	689b      	ldr	r3, [r3, #8]
    1810:	011a      	lsls	r2, r3, #4
    1812:	4b32      	ldr	r3, [pc, #200]	; (18dc <system_clock_source_dpll_set_config+0xfc>)
    1814:	6979      	ldr	r1, [r7, #20]
    1816:	0010      	movs	r0, r2
    1818:	4798      	blx	r3
    181a:	0003      	movs	r3, r0
    181c:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
    181e:	693b      	ldr	r3, [r7, #16]
    1820:	b2da      	uxtb	r2, r3
    1822:	230f      	movs	r3, #15
    1824:	18fb      	adds	r3, r7, r3
    1826:	210f      	movs	r1, #15
    1828:	400a      	ands	r2, r1
    182a:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
    182c:	693b      	ldr	r3, [r7, #16]
    182e:	091b      	lsrs	r3, r3, #4
    1830:	3b01      	subs	r3, #1
    1832:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
    1834:	492a      	ldr	r1, [pc, #168]	; (18e0 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    1836:	687b      	ldr	r3, [r7, #4]
    1838:	781b      	ldrb	r3, [r3, #0]
	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;

	SYSCTRL->DPLLCTRLA.reg =
    183a:	01db      	lsls	r3, r3, #7
    183c:	b2da      	uxtb	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    183e:	687b      	ldr	r3, [r7, #4]
    1840:	785b      	ldrb	r3, [r3, #1]
	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
	tmpldrfrac = tmpldr & 0x0f;
	tmpldr = (tmpldr >> 4) - 1;

	SYSCTRL->DPLLCTRLA.reg =
    1842:	019b      	lsls	r3, r3, #6
    1844:	b2db      	uxtb	r3, r3
    1846:	4313      	orrs	r3, r2
    1848:	b2da      	uxtb	r2, r3
    184a:	2344      	movs	r3, #68	; 0x44
    184c:	54ca      	strb	r2, [r1, r3]
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    184e:	4b24      	ldr	r3, [pc, #144]	; (18e0 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1850:	220f      	movs	r2, #15
    1852:	18ba      	adds	r2, r7, r2
    1854:	7812      	ldrb	r2, [r2, #0]
    1856:	0412      	lsls	r2, r2, #16
    1858:	0011      	movs	r1, r2
    185a:	22f0      	movs	r2, #240	; 0xf0
    185c:	0312      	lsls	r2, r2, #12
    185e:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
    1860:	693a      	ldr	r2, [r7, #16]
    1862:	0512      	lsls	r2, r2, #20
    1864:	0d12      	lsrs	r2, r2, #20
	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1866:	430a      	orrs	r2, r1

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    1868:	649a      	str	r2, [r3, #72]	; 0x48
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    186a:	4b1d      	ldr	r3, [pc, #116]	; (18e0 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    186c:	687a      	ldr	r2, [r7, #4]
    186e:	8a12      	ldrh	r2, [r2, #16]
    1870:	0412      	lsls	r2, r2, #16
    1872:	0011      	movs	r1, r2
    1874:	4a1b      	ldr	r2, [pc, #108]	; (18e4 <system_clock_source_dpll_set_config+0x104>)
    1876:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    1878:	687a      	ldr	r2, [r7, #4]
    187a:	7892      	ldrb	r2, [r2, #2]
    187c:	0312      	lsls	r2, r2, #12
	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    187e:	4311      	orrs	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    1880:	687a      	ldr	r2, [r7, #4]
    1882:	7cd2      	ldrb	r2, [r2, #19]
    1884:	0212      	lsls	r2, r2, #8
    1886:	0010      	movs	r0, r2
    1888:	22e0      	movs	r2, #224	; 0xe0
    188a:	00d2      	lsls	r2, r2, #3
    188c:	4002      	ands	r2, r0
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
    188e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    1890:	687a      	ldr	r2, [r7, #4]
    1892:	7d12      	ldrb	r2, [r2, #20]
    1894:	0112      	lsls	r2, r2, #4
    1896:	0010      	movs	r0, r2
    1898:	2230      	movs	r2, #48	; 0x30
    189a:	4002      	ands	r2, r0
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    189c:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    189e:	687a      	ldr	r2, [r7, #4]
    18a0:	78d2      	ldrb	r2, [r2, #3]
    18a2:	00d2      	lsls	r2, r2, #3

	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    18a4:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    18a6:	687a      	ldr	r2, [r7, #4]
    18a8:	7912      	ldrb	r2, [r2, #4]
    18aa:	0092      	lsls	r2, r2, #2
	SYSCTRL->DPLLCTRLB.reg =
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
    18ac:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
    18ae:	687a      	ldr	r2, [r7, #4]
    18b0:	7c92      	ldrb	r2, [r2, #18]
    18b2:	0010      	movs	r0, r2
    18b4:	2203      	movs	r2, #3
    18b6:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    18b8:	430a      	orrs	r2, r1

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    18ba:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    18bc:	693b      	ldr	r3, [r7, #16]
    18be:	3301      	adds	r3, #1
    18c0:	011a      	lsls	r2, r3, #4
    18c2:	230f      	movs	r3, #15
    18c4:	18fb      	adds	r3, r7, r3
    18c6:	781b      	ldrb	r3, [r3, #0]
    18c8:	18d3      	adds	r3, r2, r3
    18ca:	697a      	ldr	r2, [r7, #20]
    18cc:	4353      	muls	r3, r2
    18ce:	091a      	lsrs	r2, r3, #4
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
    18d0:	4b05      	ldr	r3, [pc, #20]	; (18e8 <system_clock_source_dpll_set_config+0x108>)
    18d2:	60da      	str	r2, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
}
    18d4:	46c0      	nop			; (mov r8, r8)
    18d6:	46bd      	mov	sp, r7
    18d8:	b006      	add	sp, #24
    18da:	bd80      	pop	{r7, pc}
    18dc:	00002a49 	.word	0x00002a49
    18e0:	40000800 	.word	0x40000800
    18e4:	07ff0000 	.word	0x07ff0000
    18e8:	200000b0 	.word	0x200000b0

000018ec <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    18ec:	b580      	push	{r7, lr}
    18ee:	b082      	sub	sp, #8
    18f0:	af00      	add	r7, sp, #0
    18f2:	0002      	movs	r2, r0
    18f4:	1dfb      	adds	r3, r7, #7
    18f6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    18f8:	1dfb      	adds	r3, r7, #7
    18fa:	781b      	ldrb	r3, [r3, #0]
    18fc:	2b08      	cmp	r3, #8
    18fe:	d83b      	bhi.n	1978 <system_clock_source_enable+0x8c>
    1900:	009a      	lsls	r2, r3, #2
    1902:	4b21      	ldr	r3, [pc, #132]	; (1988 <system_clock_source_enable+0x9c>)
    1904:	18d3      	adds	r3, r2, r3
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    190a:	4b20      	ldr	r3, [pc, #128]	; (198c <system_clock_source_enable+0xa0>)
    190c:	4a1f      	ldr	r2, [pc, #124]	; (198c <system_clock_source_enable+0xa0>)
    190e:	6a12      	ldr	r2, [r2, #32]
    1910:	2102      	movs	r1, #2
    1912:	430a      	orrs	r2, r1
    1914:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1916:	2300      	movs	r3, #0
    1918:	e031      	b.n	197e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    191a:	4b1c      	ldr	r3, [pc, #112]	; (198c <system_clock_source_enable+0xa0>)
    191c:	4a1b      	ldr	r2, [pc, #108]	; (198c <system_clock_source_enable+0xa0>)
    191e:	6992      	ldr	r2, [r2, #24]
    1920:	2102      	movs	r1, #2
    1922:	430a      	orrs	r2, r1
    1924:	619a      	str	r2, [r3, #24]
		break;
    1926:	e029      	b.n	197c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1928:	4a18      	ldr	r2, [pc, #96]	; (198c <system_clock_source_enable+0xa0>)
    192a:	4b18      	ldr	r3, [pc, #96]	; (198c <system_clock_source_enable+0xa0>)
    192c:	8a1b      	ldrh	r3, [r3, #16]
    192e:	b29b      	uxth	r3, r3
    1930:	2102      	movs	r1, #2
    1932:	430b      	orrs	r3, r1
    1934:	b29b      	uxth	r3, r3
    1936:	8213      	strh	r3, [r2, #16]
		break;
    1938:	e020      	b.n	197c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    193a:	4a14      	ldr	r2, [pc, #80]	; (198c <system_clock_source_enable+0xa0>)
    193c:	4b13      	ldr	r3, [pc, #76]	; (198c <system_clock_source_enable+0xa0>)
    193e:	8a9b      	ldrh	r3, [r3, #20]
    1940:	b29b      	uxth	r3, r3
    1942:	2102      	movs	r1, #2
    1944:	430b      	orrs	r3, r1
    1946:	b29b      	uxth	r3, r3
    1948:	8293      	strh	r3, [r2, #20]
		break;
    194a:	e017      	b.n	197c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    194c:	4b10      	ldr	r3, [pc, #64]	; (1990 <system_clock_source_enable+0xa4>)
    194e:	681b      	ldr	r3, [r3, #0]
    1950:	2202      	movs	r2, #2
    1952:	431a      	orrs	r2, r3
    1954:	4b0e      	ldr	r3, [pc, #56]	; (1990 <system_clock_source_enable+0xa4>)
    1956:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    1958:	4b0e      	ldr	r3, [pc, #56]	; (1994 <system_clock_source_enable+0xa8>)
    195a:	4798      	blx	r3
		break;
    195c:	e00e      	b.n	197c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    195e:	4a0b      	ldr	r2, [pc, #44]	; (198c <system_clock_source_enable+0xa0>)
    1960:	490a      	ldr	r1, [pc, #40]	; (198c <system_clock_source_enable+0xa0>)
    1962:	2344      	movs	r3, #68	; 0x44
    1964:	5ccb      	ldrb	r3, [r1, r3]
    1966:	b2db      	uxtb	r3, r3
    1968:	2102      	movs	r1, #2
    196a:	430b      	orrs	r3, r1
    196c:	b2d9      	uxtb	r1, r3
    196e:	2344      	movs	r3, #68	; 0x44
    1970:	54d1      	strb	r1, [r2, r3]
		break;
    1972:	e003      	b.n	197c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1974:	2300      	movs	r3, #0
    1976:	e002      	b.n	197e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1978:	2317      	movs	r3, #23
    197a:	e000      	b.n	197e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    197c:	2300      	movs	r3, #0
}
    197e:	0018      	movs	r0, r3
    1980:	46bd      	mov	sp, r7
    1982:	b002      	add	sp, #8
    1984:	bd80      	pop	{r7, pc}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	00003718 	.word	0x00003718
    198c:	40000800 	.word	0x40000800
    1990:	200000b0 	.word	0x200000b0
    1994:	00001669 	.word	0x00001669

00001998 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    1998:	b580      	push	{r7, lr}
    199a:	b084      	sub	sp, #16
    199c:	af00      	add	r7, sp, #0
    199e:	0002      	movs	r2, r0
    19a0:	1dfb      	adds	r3, r7, #7
    19a2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    19a4:	2300      	movs	r3, #0
    19a6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    19a8:	1dfb      	adds	r3, r7, #7
    19aa:	781b      	ldrb	r3, [r3, #0]
    19ac:	2b08      	cmp	r3, #8
    19ae:	d821      	bhi.n	19f4 <system_clock_source_is_ready+0x5c>
    19b0:	009a      	lsls	r2, r3, #2
    19b2:	4b18      	ldr	r3, [pc, #96]	; (1a14 <system_clock_source_is_ready+0x7c>)
    19b4:	18d3      	adds	r3, r2, r3
    19b6:	681b      	ldr	r3, [r3, #0]
    19b8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    19ba:	2308      	movs	r3, #8
    19bc:	60fb      	str	r3, [r7, #12]
		break;
    19be:	e01b      	b.n	19f8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    19c0:	2304      	movs	r3, #4
    19c2:	60fb      	str	r3, [r7, #12]
		break;
    19c4:	e018      	b.n	19f8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    19c6:	2301      	movs	r3, #1
    19c8:	60fb      	str	r3, [r7, #12]
		break;
    19ca:	e015      	b.n	19f8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    19cc:	2302      	movs	r3, #2
    19ce:	60fb      	str	r3, [r7, #12]
		break;
    19d0:	e012      	b.n	19f8 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    19d2:	2310      	movs	r3, #16
    19d4:	60fb      	str	r3, [r7, #12]
		}
		break;
    19d6:	e00f      	b.n	19f8 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    19d8:	4a0f      	ldr	r2, [pc, #60]	; (1a18 <system_clock_source_is_ready+0x80>)
    19da:	2350      	movs	r3, #80	; 0x50
    19dc:	5cd3      	ldrb	r3, [r2, r3]
    19de:	b2db      	uxtb	r3, r3
    19e0:	001a      	movs	r2, r3
    19e2:	2303      	movs	r3, #3
    19e4:	4013      	ands	r3, r2
    19e6:	3b03      	subs	r3, #3
    19e8:	425a      	negs	r2, r3
    19ea:	4153      	adcs	r3, r2
    19ec:	b2db      	uxtb	r3, r3
    19ee:	e00c      	b.n	1a0a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    19f0:	2301      	movs	r3, #1
    19f2:	e00a      	b.n	1a0a <system_clock_source_is_ready+0x72>

	default:
		return false;
    19f4:	2300      	movs	r3, #0
    19f6:	e008      	b.n	1a0a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    19f8:	4b07      	ldr	r3, [pc, #28]	; (1a18 <system_clock_source_is_ready+0x80>)
    19fa:	68db      	ldr	r3, [r3, #12]
    19fc:	68fa      	ldr	r2, [r7, #12]
    19fe:	401a      	ands	r2, r3
    1a00:	68fb      	ldr	r3, [r7, #12]
    1a02:	1ad3      	subs	r3, r2, r3
    1a04:	425a      	negs	r2, r3
    1a06:	4153      	adcs	r3, r2
    1a08:	b2db      	uxtb	r3, r3
}
    1a0a:	0018      	movs	r0, r3
    1a0c:	46bd      	mov	sp, r7
    1a0e:	b004      	add	sp, #16
    1a10:	bd80      	pop	{r7, pc}
    1a12:	46c0      	nop			; (mov r8, r8)
    1a14:	0000373c 	.word	0x0000373c
    1a18:	40000800 	.word	0x40000800

00001a1c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1a1c:	b580      	push	{r7, lr}
    1a1e:	b082      	sub	sp, #8
    1a20:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1a22:	003b      	movs	r3, r7
    1a24:	2202      	movs	r2, #2
    1a26:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a28:	2300      	movs	r3, #0
    1a2a:	607b      	str	r3, [r7, #4]
    1a2c:	e009      	b.n	1a42 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1a2e:	687b      	ldr	r3, [r7, #4]
    1a30:	b2db      	uxtb	r3, r3
    1a32:	003a      	movs	r2, r7
    1a34:	0011      	movs	r1, r2
    1a36:	0018      	movs	r0, r3
    1a38:	4b05      	ldr	r3, [pc, #20]	; (1a50 <_switch_peripheral_gclk+0x34>)
    1a3a:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	3301      	adds	r3, #1
    1a40:	607b      	str	r3, [r7, #4]
    1a42:	687b      	ldr	r3, [r7, #4]
    1a44:	2b24      	cmp	r3, #36	; 0x24
    1a46:	d9f2      	bls.n	1a2e <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    1a48:	46c0      	nop			; (mov r8, r8)
    1a4a:	46bd      	mov	sp, r7
    1a4c:	b002      	add	sp, #8
    1a4e:	bd80      	pop	{r7, pc}
    1a50:	00001f6d 	.word	0x00001f6d

00001a54 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1a54:	b580      	push	{r7, lr}
    1a56:	b0a6      	sub	sp, #152	; 0x98
    1a58:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1a5a:	4b65      	ldr	r3, [pc, #404]	; (1bf0 <system_clock_init+0x19c>)
    1a5c:	22c2      	movs	r2, #194	; 0xc2
    1a5e:	00d2      	lsls	r2, r2, #3
    1a60:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    1a62:	2001      	movs	r0, #1
    1a64:	4b63      	ldr	r3, [pc, #396]	; (1bf4 <system_clock_init+0x1a0>)
    1a66:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1a68:	4b63      	ldr	r3, [pc, #396]	; (1bf8 <system_clock_init+0x1a4>)
    1a6a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    1a6c:	2394      	movs	r3, #148	; 0x94
    1a6e:	18fb      	adds	r3, r7, r3
    1a70:	0018      	movs	r0, r3
    1a72:	4b62      	ldr	r3, [pc, #392]	; (1bfc <system_clock_init+0x1a8>)
    1a74:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1a76:	2394      	movs	r3, #148	; 0x94
    1a78:	18fb      	adds	r3, r7, r3
    1a7a:	2200      	movs	r2, #0
    1a7c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1a7e:	2394      	movs	r3, #148	; 0x94
    1a80:	18fb      	adds	r3, r7, r3
    1a82:	2201      	movs	r2, #1
    1a84:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1a86:	2394      	movs	r3, #148	; 0x94
    1a88:	18fb      	adds	r3, r7, r3
    1a8a:	2200      	movs	r2, #0
    1a8c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1a8e:	2394      	movs	r3, #148	; 0x94
    1a90:	18fb      	adds	r3, r7, r3
    1a92:	0018      	movs	r0, r3
    1a94:	4b5a      	ldr	r3, [pc, #360]	; (1c00 <system_clock_init+0x1ac>)
    1a96:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1a98:	2006      	movs	r0, #6
    1a9a:	4b5a      	ldr	r3, [pc, #360]	; (1c04 <system_clock_init+0x1b0>)
    1a9c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1a9e:	4b5a      	ldr	r3, [pc, #360]	; (1c08 <system_clock_init+0x1b4>)
    1aa0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1aa2:	2360      	movs	r3, #96	; 0x60
    1aa4:	18fb      	adds	r3, r7, r3
    1aa6:	0018      	movs	r0, r3
    1aa8:	4b58      	ldr	r3, [pc, #352]	; (1c0c <system_clock_init+0x1b8>)
    1aaa:	4798      	blx	r3
    1aac:	2360      	movs	r3, #96	; 0x60
    1aae:	18fb      	adds	r3, r7, r3
    1ab0:	2206      	movs	r2, #6
    1ab2:	701a      	strb	r2, [r3, #0]
    1ab4:	2360      	movs	r3, #96	; 0x60
    1ab6:	18fb      	adds	r3, r7, r3
    1ab8:	2208      	movs	r2, #8
    1aba:	605a      	str	r2, [r3, #4]
    1abc:	2360      	movs	r3, #96	; 0x60
    1abe:	18fb      	adds	r3, r7, r3
    1ac0:	2200      	movs	r2, #0
    1ac2:	721a      	strb	r2, [r3, #8]
    1ac4:	2360      	movs	r3, #96	; 0x60
    1ac6:	18fb      	adds	r3, r7, r3
    1ac8:	2200      	movs	r2, #0
    1aca:	725a      	strb	r2, [r3, #9]
    1acc:	2360      	movs	r3, #96	; 0x60
    1ace:	18fb      	adds	r3, r7, r3
    1ad0:	0019      	movs	r1, r3
    1ad2:	2001      	movs	r0, #1
    1ad4:	4b4e      	ldr	r3, [pc, #312]	; (1c10 <system_clock_init+0x1bc>)
    1ad6:	4798      	blx	r3
    1ad8:	2001      	movs	r0, #1
    1ada:	4b4e      	ldr	r3, [pc, #312]	; (1c14 <system_clock_init+0x1c0>)
    1adc:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
    1ade:	2390      	movs	r3, #144	; 0x90
    1ae0:	18fb      	adds	r3, r7, r3
    1ae2:	0018      	movs	r0, r3
    1ae4:	4b4c      	ldr	r3, [pc, #304]	; (1c18 <system_clock_init+0x1c4>)
    1ae6:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
    1ae8:	2390      	movs	r3, #144	; 0x90
    1aea:	18fb      	adds	r3, r7, r3
    1aec:	2201      	movs	r2, #1
    1aee:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
    1af0:	2390      	movs	r3, #144	; 0x90
    1af2:	18fb      	adds	r3, r7, r3
    1af4:	0019      	movs	r1, r3
    1af6:	2001      	movs	r0, #1
    1af8:	4b48      	ldr	r3, [pc, #288]	; (1c1c <system_clock_init+0x1c8>)
    1afa:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
    1afc:	2001      	movs	r0, #1
    1afe:	4b48      	ldr	r3, [pc, #288]	; (1c20 <system_clock_init+0x1cc>)
    1b00:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
    1b02:	2378      	movs	r3, #120	; 0x78
    1b04:	18fb      	adds	r3, r7, r3
    1b06:	0018      	movs	r0, r3
    1b08:	4b46      	ldr	r3, [pc, #280]	; (1c24 <system_clock_init+0x1d0>)
    1b0a:	4798      	blx	r3

	dpll_config.on_demand        = false;
    1b0c:	2378      	movs	r3, #120	; 0x78
    1b0e:	18fb      	adds	r3, r7, r3
    1b10:	2200      	movs	r2, #0
    1b12:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    1b14:	2378      	movs	r3, #120	; 0x78
    1b16:	18fb      	adds	r3, r7, r3
    1b18:	2200      	movs	r2, #0
    1b1a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
    1b1c:	2378      	movs	r3, #120	; 0x78
    1b1e:	18fb      	adds	r3, r7, r3
    1b20:	2200      	movs	r2, #0
    1b22:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
    1b24:	2378      	movs	r3, #120	; 0x78
    1b26:	18fb      	adds	r3, r7, r3
    1b28:	2200      	movs	r2, #0
    1b2a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
    1b2c:	2378      	movs	r3, #120	; 0x78
    1b2e:	18fb      	adds	r3, r7, r3
    1b30:	2200      	movs	r2, #0
    1b32:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
    1b34:	2378      	movs	r3, #120	; 0x78
    1b36:	18fb      	adds	r3, r7, r3
    1b38:	2200      	movs	r2, #0
    1b3a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
    1b3c:	2378      	movs	r3, #120	; 0x78
    1b3e:	18fb      	adds	r3, r7, r3
    1b40:	2200      	movs	r2, #0
    1b42:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    1b44:	2378      	movs	r3, #120	; 0x78
    1b46:	18fb      	adds	r3, r7, r3
    1b48:	2202      	movs	r2, #2
    1b4a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    1b4c:	2378      	movs	r3, #120	; 0x78
    1b4e:	18fb      	adds	r3, r7, r3
    1b50:	4a35      	ldr	r2, [pc, #212]	; (1c28 <system_clock_init+0x1d4>)
    1b52:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
    1b54:	2378      	movs	r3, #120	; 0x78
    1b56:	18fb      	adds	r3, r7, r3
    1b58:	2201      	movs	r2, #1
    1b5a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
    1b5c:	2378      	movs	r3, #120	; 0x78
    1b5e:	18fb      	adds	r3, r7, r3
    1b60:	4a32      	ldr	r2, [pc, #200]	; (1c2c <system_clock_init+0x1d8>)
    1b62:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
    1b64:	2378      	movs	r3, #120	; 0x78
    1b66:	18fb      	adds	r3, r7, r3
    1b68:	0018      	movs	r0, r3
    1b6a:	4b31      	ldr	r3, [pc, #196]	; (1c30 <system_clock_init+0x1dc>)
    1b6c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    1b6e:	2008      	movs	r0, #8
    1b70:	4b24      	ldr	r3, [pc, #144]	; (1c04 <system_clock_init+0x1b0>)
    1b72:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    1b74:	46c0      	nop			; (mov r8, r8)
    1b76:	2008      	movs	r0, #8
    1b78:	4b2e      	ldr	r3, [pc, #184]	; (1c34 <system_clock_init+0x1e0>)
    1b7a:	4798      	blx	r3
    1b7c:	0003      	movs	r3, r0
    1b7e:	001a      	movs	r2, r3
    1b80:	2301      	movs	r3, #1
    1b82:	4053      	eors	r3, r2
    1b84:	b2db      	uxtb	r3, r3
    1b86:	2b00      	cmp	r3, #0
    1b88:	d1f5      	bne.n	1b76 <system_clock_init+0x122>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    1b8a:	4919      	ldr	r1, [pc, #100]	; (1bf0 <system_clock_init+0x19c>)
    1b8c:	2244      	movs	r2, #68	; 0x44
    1b8e:	5c8b      	ldrb	r3, [r1, r2]
    1b90:	2080      	movs	r0, #128	; 0x80
    1b92:	4240      	negs	r0, r0
    1b94:	4303      	orrs	r3, r0
    1b96:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    1b98:	2000      	movs	r0, #0
    1b9a:	4b27      	ldr	r3, [pc, #156]	; (1c38 <system_clock_init+0x1e4>)
    1b9c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    1b9e:	2100      	movs	r1, #0
    1ba0:	2000      	movs	r0, #0
    1ba2:	4b26      	ldr	r3, [pc, #152]	; (1c3c <system_clock_init+0x1e8>)
    1ba4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    1ba6:	2100      	movs	r1, #0
    1ba8:	2001      	movs	r0, #1
    1baa:	4b24      	ldr	r3, [pc, #144]	; (1c3c <system_clock_init+0x1e8>)
    1bac:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    1bae:	2100      	movs	r1, #0
    1bb0:	2002      	movs	r0, #2
    1bb2:	4b22      	ldr	r3, [pc, #136]	; (1c3c <system_clock_init+0x1e8>)
    1bb4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1bb6:	003b      	movs	r3, r7
    1bb8:	0018      	movs	r0, r3
    1bba:	4b14      	ldr	r3, [pc, #80]	; (1c0c <system_clock_init+0x1b8>)
    1bbc:	4798      	blx	r3
    1bbe:	003b      	movs	r3, r7
    1bc0:	2206      	movs	r2, #6
    1bc2:	701a      	strb	r2, [r3, #0]
    1bc4:	003b      	movs	r3, r7
    1bc6:	2201      	movs	r2, #1
    1bc8:	605a      	str	r2, [r3, #4]
    1bca:	003b      	movs	r3, r7
    1bcc:	2200      	movs	r2, #0
    1bce:	721a      	strb	r2, [r3, #8]
    1bd0:	003b      	movs	r3, r7
    1bd2:	2200      	movs	r2, #0
    1bd4:	725a      	strb	r2, [r3, #9]
    1bd6:	003b      	movs	r3, r7
    1bd8:	0019      	movs	r1, r3
    1bda:	2000      	movs	r0, #0
    1bdc:	4b0c      	ldr	r3, [pc, #48]	; (1c10 <system_clock_init+0x1bc>)
    1bde:	4798      	blx	r3
    1be0:	2000      	movs	r0, #0
    1be2:	4b0c      	ldr	r3, [pc, #48]	; (1c14 <system_clock_init+0x1c0>)
    1be4:	4798      	blx	r3
#endif
}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	46bd      	mov	sp, r7
    1bea:	b026      	add	sp, #152	; 0x98
    1bec:	bd80      	pop	{r7, pc}
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	40000800 	.word	0x40000800
    1bf4:	00001619 	.word	0x00001619
    1bf8:	00001a1d 	.word	0x00001a1d
    1bfc:	00001529 	.word	0x00001529
    1c00:	00001769 	.word	0x00001769
    1c04:	000018ed 	.word	0x000018ed
    1c08:	00001ce5 	.word	0x00001ce5
    1c0c:	000014e1 	.word	0x000014e1
    1c10:	00001d15 	.word	0x00001d15
    1c14:	00001e39 	.word	0x00001e39
    1c18:	00001511 	.word	0x00001511
    1c1c:	00001f6d 	.word	0x00001f6d
    1c20:	00001fb1 	.word	0x00001fb1
    1c24:	000015c1 	.word	0x000015c1
    1c28:	000f4240 	.word	0x000f4240
    1c2c:	02dc6c00 	.word	0x02dc6c00
    1c30:	000017e1 	.word	0x000017e1
    1c34:	00001999 	.word	0x00001999
    1c38:	0000154d 	.word	0x0000154d
    1c3c:	0000156d 	.word	0x0000156d

00001c40 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1c40:	b580      	push	{r7, lr}
    1c42:	b082      	sub	sp, #8
    1c44:	af00      	add	r7, sp, #0
    1c46:	0002      	movs	r2, r0
    1c48:	6039      	str	r1, [r7, #0]
    1c4a:	1dfb      	adds	r3, r7, #7
    1c4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1c4e:	1dfb      	adds	r3, r7, #7
    1c50:	781b      	ldrb	r3, [r3, #0]
    1c52:	2b01      	cmp	r3, #1
    1c54:	d00a      	beq.n	1c6c <system_apb_clock_set_mask+0x2c>
    1c56:	2b02      	cmp	r3, #2
    1c58:	d00f      	beq.n	1c7a <system_apb_clock_set_mask+0x3a>
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d114      	bne.n	1c88 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1c5e:	4b0e      	ldr	r3, [pc, #56]	; (1c98 <system_apb_clock_set_mask+0x58>)
    1c60:	4a0d      	ldr	r2, [pc, #52]	; (1c98 <system_apb_clock_set_mask+0x58>)
    1c62:	6991      	ldr	r1, [r2, #24]
    1c64:	683a      	ldr	r2, [r7, #0]
    1c66:	430a      	orrs	r2, r1
    1c68:	619a      	str	r2, [r3, #24]
			break;
    1c6a:	e00f      	b.n	1c8c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1c6c:	4b0a      	ldr	r3, [pc, #40]	; (1c98 <system_apb_clock_set_mask+0x58>)
    1c6e:	4a0a      	ldr	r2, [pc, #40]	; (1c98 <system_apb_clock_set_mask+0x58>)
    1c70:	69d1      	ldr	r1, [r2, #28]
    1c72:	683a      	ldr	r2, [r7, #0]
    1c74:	430a      	orrs	r2, r1
    1c76:	61da      	str	r2, [r3, #28]
			break;
    1c78:	e008      	b.n	1c8c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1c7a:	4b07      	ldr	r3, [pc, #28]	; (1c98 <system_apb_clock_set_mask+0x58>)
    1c7c:	4a06      	ldr	r2, [pc, #24]	; (1c98 <system_apb_clock_set_mask+0x58>)
    1c7e:	6a11      	ldr	r1, [r2, #32]
    1c80:	683a      	ldr	r2, [r7, #0]
    1c82:	430a      	orrs	r2, r1
    1c84:	621a      	str	r2, [r3, #32]
			break;
    1c86:	e001      	b.n	1c8c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1c88:	2317      	movs	r3, #23
    1c8a:	e000      	b.n	1c8e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1c8c:	2300      	movs	r3, #0
}
    1c8e:	0018      	movs	r0, r3
    1c90:	46bd      	mov	sp, r7
    1c92:	b002      	add	sp, #8
    1c94:	bd80      	pop	{r7, pc}
    1c96:	46c0      	nop			; (mov r8, r8)
    1c98:	40000400 	.word	0x40000400

00001c9c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    1c9c:	b580      	push	{r7, lr}
    1c9e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    1ca0:	4b02      	ldr	r3, [pc, #8]	; (1cac <system_interrupt_enter_critical_section+0x10>)
    1ca2:	4798      	blx	r3
}
    1ca4:	46c0      	nop			; (mov r8, r8)
    1ca6:	46bd      	mov	sp, r7
    1ca8:	bd80      	pop	{r7, pc}
    1caa:	46c0      	nop			; (mov r8, r8)
    1cac:	00000179 	.word	0x00000179

00001cb0 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    1cb0:	b580      	push	{r7, lr}
    1cb2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    1cb4:	4b02      	ldr	r3, [pc, #8]	; (1cc0 <system_interrupt_leave_critical_section+0x10>)
    1cb6:	4798      	blx	r3
}
    1cb8:	46c0      	nop			; (mov r8, r8)
    1cba:	46bd      	mov	sp, r7
    1cbc:	bd80      	pop	{r7, pc}
    1cbe:	46c0      	nop			; (mov r8, r8)
    1cc0:	000001cd 	.word	0x000001cd

00001cc4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cc8:	4b05      	ldr	r3, [pc, #20]	; (1ce0 <system_gclk_is_syncing+0x1c>)
    1cca:	785b      	ldrb	r3, [r3, #1]
    1ccc:	b2db      	uxtb	r3, r3
    1cce:	b25b      	sxtb	r3, r3
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	da01      	bge.n	1cd8 <system_gclk_is_syncing+0x14>
		return true;
    1cd4:	2301      	movs	r3, #1
    1cd6:	e000      	b.n	1cda <system_gclk_is_syncing+0x16>
	}

	return false;
    1cd8:	2300      	movs	r3, #0
}
    1cda:	0018      	movs	r0, r3
    1cdc:	46bd      	mov	sp, r7
    1cde:	bd80      	pop	{r7, pc}
    1ce0:	40000c00 	.word	0x40000c00

00001ce4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    1ce4:	b580      	push	{r7, lr}
    1ce6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    1ce8:	2108      	movs	r1, #8
    1cea:	2000      	movs	r0, #0
    1cec:	4b07      	ldr	r3, [pc, #28]	; (1d0c <system_gclk_init+0x28>)
    1cee:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1cf0:	4b07      	ldr	r3, [pc, #28]	; (1d10 <system_gclk_init+0x2c>)
    1cf2:	2201      	movs	r2, #1
    1cf4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	4b05      	ldr	r3, [pc, #20]	; (1d10 <system_gclk_init+0x2c>)
    1cfa:	781b      	ldrb	r3, [r3, #0]
    1cfc:	b2db      	uxtb	r3, r3
    1cfe:	001a      	movs	r2, r3
    1d00:	2301      	movs	r3, #1
    1d02:	4013      	ands	r3, r2
    1d04:	d1f8      	bne.n	1cf8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    1d06:	46c0      	nop			; (mov r8, r8)
    1d08:	46bd      	mov	sp, r7
    1d0a:	bd80      	pop	{r7, pc}
    1d0c:	00001c41 	.word	0x00001c41
    1d10:	40000c00 	.word	0x40000c00

00001d14 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1d14:	b580      	push	{r7, lr}
    1d16:	b086      	sub	sp, #24
    1d18:	af00      	add	r7, sp, #0
    1d1a:	0002      	movs	r2, r0
    1d1c:	6039      	str	r1, [r7, #0]
    1d1e:	1dfb      	adds	r3, r7, #7
    1d20:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1d22:	1dfb      	adds	r3, r7, #7
    1d24:	781b      	ldrb	r3, [r3, #0]
    1d26:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    1d28:	1dfb      	adds	r3, r7, #7
    1d2a:	781b      	ldrb	r3, [r3, #0]
    1d2c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1d2e:	683b      	ldr	r3, [r7, #0]
    1d30:	781b      	ldrb	r3, [r3, #0]
    1d32:	021b      	lsls	r3, r3, #8
    1d34:	001a      	movs	r2, r3
    1d36:	697b      	ldr	r3, [r7, #20]
    1d38:	4313      	orrs	r3, r2
    1d3a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1d3c:	683b      	ldr	r3, [r7, #0]
    1d3e:	785b      	ldrb	r3, [r3, #1]
    1d40:	2b00      	cmp	r3, #0
    1d42:	d004      	beq.n	1d4e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1d44:	697b      	ldr	r3, [r7, #20]
    1d46:	2280      	movs	r2, #128	; 0x80
    1d48:	02d2      	lsls	r2, r2, #11
    1d4a:	4313      	orrs	r3, r2
    1d4c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1d4e:	683b      	ldr	r3, [r7, #0]
    1d50:	7a5b      	ldrb	r3, [r3, #9]
    1d52:	2b00      	cmp	r3, #0
    1d54:	d004      	beq.n	1d60 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1d56:	697b      	ldr	r3, [r7, #20]
    1d58:	2280      	movs	r2, #128	; 0x80
    1d5a:	0312      	lsls	r2, r2, #12
    1d5c:	4313      	orrs	r3, r2
    1d5e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1d60:	683b      	ldr	r3, [r7, #0]
    1d62:	685b      	ldr	r3, [r3, #4]
    1d64:	2b01      	cmp	r3, #1
    1d66:	d92c      	bls.n	1dc2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1d68:	683b      	ldr	r3, [r7, #0]
    1d6a:	685a      	ldr	r2, [r3, #4]
    1d6c:	683b      	ldr	r3, [r7, #0]
    1d6e:	685b      	ldr	r3, [r3, #4]
    1d70:	3b01      	subs	r3, #1
    1d72:	4013      	ands	r3, r2
    1d74:	d11a      	bne.n	1dac <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    1d76:	2300      	movs	r3, #0
    1d78:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1d7a:	2302      	movs	r3, #2
    1d7c:	60bb      	str	r3, [r7, #8]
    1d7e:	e005      	b.n	1d8c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    1d80:	68fb      	ldr	r3, [r7, #12]
    1d82:	3301      	adds	r3, #1
    1d84:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1d86:	68bb      	ldr	r3, [r7, #8]
    1d88:	005b      	lsls	r3, r3, #1
    1d8a:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1d8c:	683b      	ldr	r3, [r7, #0]
    1d8e:	685a      	ldr	r2, [r3, #4]
    1d90:	68bb      	ldr	r3, [r7, #8]
    1d92:	429a      	cmp	r2, r3
    1d94:	d8f4      	bhi.n	1d80 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1d96:	68fb      	ldr	r3, [r7, #12]
    1d98:	021b      	lsls	r3, r3, #8
    1d9a:	693a      	ldr	r2, [r7, #16]
    1d9c:	4313      	orrs	r3, r2
    1d9e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1da0:	697b      	ldr	r3, [r7, #20]
    1da2:	2280      	movs	r2, #128	; 0x80
    1da4:	0352      	lsls	r2, r2, #13
    1da6:	4313      	orrs	r3, r2
    1da8:	617b      	str	r3, [r7, #20]
    1daa:	e00a      	b.n	1dc2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1dac:	683b      	ldr	r3, [r7, #0]
    1dae:	685b      	ldr	r3, [r3, #4]
    1db0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1db2:	693a      	ldr	r2, [r7, #16]
    1db4:	4313      	orrs	r3, r2
    1db6:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1db8:	697b      	ldr	r3, [r7, #20]
    1dba:	2280      	movs	r2, #128	; 0x80
    1dbc:	0292      	lsls	r2, r2, #10
    1dbe:	4313      	orrs	r3, r2
    1dc0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1dc2:	683b      	ldr	r3, [r7, #0]
    1dc4:	7a1b      	ldrb	r3, [r3, #8]
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d004      	beq.n	1dd4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1dca:	697b      	ldr	r3, [r7, #20]
    1dcc:	2280      	movs	r2, #128	; 0x80
    1dce:	0392      	lsls	r2, r2, #14
    1dd0:	4313      	orrs	r3, r2
    1dd2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    1dd4:	46c0      	nop			; (mov r8, r8)
    1dd6:	4b13      	ldr	r3, [pc, #76]	; (1e24 <system_gclk_gen_set_config+0x110>)
    1dd8:	4798      	blx	r3
    1dda:	1e03      	subs	r3, r0, #0
    1ddc:	d1fb      	bne.n	1dd6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1dde:	4b12      	ldr	r3, [pc, #72]	; (1e28 <system_gclk_gen_set_config+0x114>)
    1de0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1de2:	4a12      	ldr	r2, [pc, #72]	; (1e2c <system_gclk_gen_set_config+0x118>)
    1de4:	1dfb      	adds	r3, r7, #7
    1de6:	781b      	ldrb	r3, [r3, #0]
    1de8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	4b0d      	ldr	r3, [pc, #52]	; (1e24 <system_gclk_gen_set_config+0x110>)
    1dee:	4798      	blx	r3
    1df0:	1e03      	subs	r3, r0, #0
    1df2:	d1fb      	bne.n	1dec <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1df4:	4b0e      	ldr	r3, [pc, #56]	; (1e30 <system_gclk_gen_set_config+0x11c>)
    1df6:	693a      	ldr	r2, [r7, #16]
    1df8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	4b09      	ldr	r3, [pc, #36]	; (1e24 <system_gclk_gen_set_config+0x110>)
    1dfe:	4798      	blx	r3
    1e00:	1e03      	subs	r3, r0, #0
    1e02:	d1fb      	bne.n	1dfc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1e04:	4b0a      	ldr	r3, [pc, #40]	; (1e30 <system_gclk_gen_set_config+0x11c>)
    1e06:	4a0a      	ldr	r2, [pc, #40]	; (1e30 <system_gclk_gen_set_config+0x11c>)
    1e08:	6851      	ldr	r1, [r2, #4]
    1e0a:	2280      	movs	r2, #128	; 0x80
    1e0c:	0252      	lsls	r2, r2, #9
    1e0e:	4011      	ands	r1, r2
    1e10:	697a      	ldr	r2, [r7, #20]
    1e12:	430a      	orrs	r2, r1
    1e14:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1e16:	4b07      	ldr	r3, [pc, #28]	; (1e34 <system_gclk_gen_set_config+0x120>)
    1e18:	4798      	blx	r3
}
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	46bd      	mov	sp, r7
    1e1e:	b006      	add	sp, #24
    1e20:	bd80      	pop	{r7, pc}
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	00001cc5 	.word	0x00001cc5
    1e28:	00001c9d 	.word	0x00001c9d
    1e2c:	40000c08 	.word	0x40000c08
    1e30:	40000c00 	.word	0x40000c00
    1e34:	00001cb1 	.word	0x00001cb1

00001e38 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1e38:	b580      	push	{r7, lr}
    1e3a:	b082      	sub	sp, #8
    1e3c:	af00      	add	r7, sp, #0
    1e3e:	0002      	movs	r2, r0
    1e40:	1dfb      	adds	r3, r7, #7
    1e42:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1e44:	46c0      	nop			; (mov r8, r8)
    1e46:	4b0e      	ldr	r3, [pc, #56]	; (1e80 <system_gclk_gen_enable+0x48>)
    1e48:	4798      	blx	r3
    1e4a:	1e03      	subs	r3, r0, #0
    1e4c:	d1fb      	bne.n	1e46 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1e4e:	4b0d      	ldr	r3, [pc, #52]	; (1e84 <system_gclk_gen_enable+0x4c>)
    1e50:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1e52:	4a0d      	ldr	r2, [pc, #52]	; (1e88 <system_gclk_gen_enable+0x50>)
    1e54:	1dfb      	adds	r3, r7, #7
    1e56:	781b      	ldrb	r3, [r3, #0]
    1e58:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	4b08      	ldr	r3, [pc, #32]	; (1e80 <system_gclk_gen_enable+0x48>)
    1e5e:	4798      	blx	r3
    1e60:	1e03      	subs	r3, r0, #0
    1e62:	d1fb      	bne.n	1e5c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1e64:	4b09      	ldr	r3, [pc, #36]	; (1e8c <system_gclk_gen_enable+0x54>)
    1e66:	4a09      	ldr	r2, [pc, #36]	; (1e8c <system_gclk_gen_enable+0x54>)
    1e68:	6852      	ldr	r2, [r2, #4]
    1e6a:	2180      	movs	r1, #128	; 0x80
    1e6c:	0249      	lsls	r1, r1, #9
    1e6e:	430a      	orrs	r2, r1
    1e70:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    1e72:	4b07      	ldr	r3, [pc, #28]	; (1e90 <system_gclk_gen_enable+0x58>)
    1e74:	4798      	blx	r3
}
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	46bd      	mov	sp, r7
    1e7a:	b002      	add	sp, #8
    1e7c:	bd80      	pop	{r7, pc}
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	00001cc5 	.word	0x00001cc5
    1e84:	00001c9d 	.word	0x00001c9d
    1e88:	40000c04 	.word	0x40000c04
    1e8c:	40000c00 	.word	0x40000c00
    1e90:	00001cb1 	.word	0x00001cb1

00001e94 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1e94:	b580      	push	{r7, lr}
    1e96:	b086      	sub	sp, #24
    1e98:	af00      	add	r7, sp, #0
    1e9a:	0002      	movs	r2, r0
    1e9c:	1dfb      	adds	r3, r7, #7
    1e9e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    1ea0:	46c0      	nop			; (mov r8, r8)
    1ea2:	4b2a      	ldr	r3, [pc, #168]	; (1f4c <system_gclk_gen_get_hz+0xb8>)
    1ea4:	4798      	blx	r3
    1ea6:	1e03      	subs	r3, r0, #0
    1ea8:	d1fb      	bne.n	1ea2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    1eaa:	4b29      	ldr	r3, [pc, #164]	; (1f50 <system_gclk_gen_get_hz+0xbc>)
    1eac:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1eae:	4a29      	ldr	r2, [pc, #164]	; (1f54 <system_gclk_gen_get_hz+0xc0>)
    1eb0:	1dfb      	adds	r3, r7, #7
    1eb2:	781b      	ldrb	r3, [r3, #0]
    1eb4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1eb6:	46c0      	nop			; (mov r8, r8)
    1eb8:	4b24      	ldr	r3, [pc, #144]	; (1f4c <system_gclk_gen_get_hz+0xb8>)
    1eba:	4798      	blx	r3
    1ebc:	1e03      	subs	r3, r0, #0
    1ebe:	d1fb      	bne.n	1eb8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1ec0:	4b25      	ldr	r3, [pc, #148]	; (1f58 <system_gclk_gen_get_hz+0xc4>)
    1ec2:	685b      	ldr	r3, [r3, #4]
    1ec4:	04db      	lsls	r3, r3, #19
    1ec6:	0edb      	lsrs	r3, r3, #27
    1ec8:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1eca:	0018      	movs	r0, r3
    1ecc:	4b23      	ldr	r3, [pc, #140]	; (1f5c <system_gclk_gen_get_hz+0xc8>)
    1ece:	4798      	blx	r3
    1ed0:	0003      	movs	r3, r0
    1ed2:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ed4:	4a1f      	ldr	r2, [pc, #124]	; (1f54 <system_gclk_gen_get_hz+0xc0>)
    1ed6:	1dfb      	adds	r3, r7, #7
    1ed8:	781b      	ldrb	r3, [r3, #0]
    1eda:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1edc:	4b1e      	ldr	r3, [pc, #120]	; (1f58 <system_gclk_gen_get_hz+0xc4>)
    1ede:	685b      	ldr	r3, [r3, #4]
    1ee0:	02db      	lsls	r3, r3, #11
    1ee2:	0fdb      	lsrs	r3, r3, #31
    1ee4:	b2da      	uxtb	r2, r3
    1ee6:	2313      	movs	r3, #19
    1ee8:	18fb      	adds	r3, r7, r3
    1eea:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1eec:	4a1c      	ldr	r2, [pc, #112]	; (1f60 <system_gclk_gen_get_hz+0xcc>)
    1eee:	1dfb      	adds	r3, r7, #7
    1ef0:	781b      	ldrb	r3, [r3, #0]
    1ef2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1ef4:	46c0      	nop			; (mov r8, r8)
    1ef6:	4b15      	ldr	r3, [pc, #84]	; (1f4c <system_gclk_gen_get_hz+0xb8>)
    1ef8:	4798      	blx	r3
    1efa:	1e03      	subs	r3, r0, #0
    1efc:	d1fb      	bne.n	1ef6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1efe:	4b16      	ldr	r3, [pc, #88]	; (1f58 <system_gclk_gen_get_hz+0xc4>)
    1f00:	689b      	ldr	r3, [r3, #8]
    1f02:	021b      	lsls	r3, r3, #8
    1f04:	0c1b      	lsrs	r3, r3, #16
    1f06:	b29b      	uxth	r3, r3
    1f08:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    1f0a:	4b16      	ldr	r3, [pc, #88]	; (1f64 <system_gclk_gen_get_hz+0xd0>)
    1f0c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1f0e:	2313      	movs	r3, #19
    1f10:	18fb      	adds	r3, r7, r3
    1f12:	781b      	ldrb	r3, [r3, #0]
    1f14:	2b00      	cmp	r3, #0
    1f16:	d109      	bne.n	1f2c <system_gclk_gen_get_hz+0x98>
    1f18:	68fb      	ldr	r3, [r7, #12]
    1f1a:	2b01      	cmp	r3, #1
    1f1c:	d906      	bls.n	1f2c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    1f1e:	4b12      	ldr	r3, [pc, #72]	; (1f68 <system_gclk_gen_get_hz+0xd4>)
    1f20:	68f9      	ldr	r1, [r7, #12]
    1f22:	6978      	ldr	r0, [r7, #20]
    1f24:	4798      	blx	r3
    1f26:	0003      	movs	r3, r0
    1f28:	617b      	str	r3, [r7, #20]
    1f2a:	e00a      	b.n	1f42 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    1f2c:	2313      	movs	r3, #19
    1f2e:	18fb      	adds	r3, r7, r3
    1f30:	781b      	ldrb	r3, [r3, #0]
    1f32:	2b00      	cmp	r3, #0
    1f34:	d005      	beq.n	1f42 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    1f36:	68fb      	ldr	r3, [r7, #12]
    1f38:	3301      	adds	r3, #1
    1f3a:	697a      	ldr	r2, [r7, #20]
    1f3c:	40da      	lsrs	r2, r3
    1f3e:	0013      	movs	r3, r2
    1f40:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    1f42:	697b      	ldr	r3, [r7, #20]
}
    1f44:	0018      	movs	r0, r3
    1f46:	46bd      	mov	sp, r7
    1f48:	b006      	add	sp, #24
    1f4a:	bd80      	pop	{r7, pc}
    1f4c:	00001cc5 	.word	0x00001cc5
    1f50:	00001c9d 	.word	0x00001c9d
    1f54:	40000c04 	.word	0x40000c04
    1f58:	40000c00 	.word	0x40000c00
    1f5c:	000016ad 	.word	0x000016ad
    1f60:	40000c08 	.word	0x40000c08
    1f64:	00001cb1 	.word	0x00001cb1
    1f68:	00002a49 	.word	0x00002a49

00001f6c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1f6c:	b580      	push	{r7, lr}
    1f6e:	b084      	sub	sp, #16
    1f70:	af00      	add	r7, sp, #0
    1f72:	0002      	movs	r2, r0
    1f74:	6039      	str	r1, [r7, #0]
    1f76:	1dfb      	adds	r3, r7, #7
    1f78:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    1f7a:	1dfb      	adds	r3, r7, #7
    1f7c:	781b      	ldrb	r3, [r3, #0]
    1f7e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1f80:	683b      	ldr	r3, [r7, #0]
    1f82:	781b      	ldrb	r3, [r3, #0]
    1f84:	021b      	lsls	r3, r3, #8
    1f86:	001a      	movs	r2, r3
    1f88:	68fb      	ldr	r3, [r7, #12]
    1f8a:	4313      	orrs	r3, r2
    1f8c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1f8e:	1dfb      	adds	r3, r7, #7
    1f90:	781b      	ldrb	r3, [r3, #0]
    1f92:	0018      	movs	r0, r3
    1f94:	4b04      	ldr	r3, [pc, #16]	; (1fa8 <system_gclk_chan_set_config+0x3c>)
    1f96:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1f98:	4b04      	ldr	r3, [pc, #16]	; (1fac <system_gclk_chan_set_config+0x40>)
    1f9a:	68fa      	ldr	r2, [r7, #12]
    1f9c:	b292      	uxth	r2, r2
    1f9e:	805a      	strh	r2, [r3, #2]
}
    1fa0:	46c0      	nop			; (mov r8, r8)
    1fa2:	46bd      	mov	sp, r7
    1fa4:	b004      	add	sp, #16
    1fa6:	bd80      	pop	{r7, pc}
    1fa8:	00001ff9 	.word	0x00001ff9
    1fac:	40000c00 	.word	0x40000c00

00001fb0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1fb0:	b580      	push	{r7, lr}
    1fb2:	b082      	sub	sp, #8
    1fb4:	af00      	add	r7, sp, #0
    1fb6:	0002      	movs	r2, r0
    1fb8:	1dfb      	adds	r3, r7, #7
    1fba:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    1fbc:	4b0a      	ldr	r3, [pc, #40]	; (1fe8 <system_gclk_chan_enable+0x38>)
    1fbe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1fc0:	4a0a      	ldr	r2, [pc, #40]	; (1fec <system_gclk_chan_enable+0x3c>)
    1fc2:	1dfb      	adds	r3, r7, #7
    1fc4:	781b      	ldrb	r3, [r3, #0]
    1fc6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1fc8:	4909      	ldr	r1, [pc, #36]	; (1ff0 <system_gclk_chan_enable+0x40>)
    1fca:	4b09      	ldr	r3, [pc, #36]	; (1ff0 <system_gclk_chan_enable+0x40>)
    1fcc:	885b      	ldrh	r3, [r3, #2]
    1fce:	b29b      	uxth	r3, r3
    1fd0:	2280      	movs	r2, #128	; 0x80
    1fd2:	01d2      	lsls	r2, r2, #7
    1fd4:	4313      	orrs	r3, r2
    1fd6:	b29b      	uxth	r3, r3
    1fd8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    1fda:	4b06      	ldr	r3, [pc, #24]	; (1ff4 <system_gclk_chan_enable+0x44>)
    1fdc:	4798      	blx	r3
}
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	46bd      	mov	sp, r7
    1fe2:	b002      	add	sp, #8
    1fe4:	bd80      	pop	{r7, pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	00001c9d 	.word	0x00001c9d
    1fec:	40000c02 	.word	0x40000c02
    1ff0:	40000c00 	.word	0x40000c00
    1ff4:	00001cb1 	.word	0x00001cb1

00001ff8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1ff8:	b580      	push	{r7, lr}
    1ffa:	b084      	sub	sp, #16
    1ffc:	af00      	add	r7, sp, #0
    1ffe:	0002      	movs	r2, r0
    2000:	1dfb      	adds	r3, r7, #7
    2002:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    2004:	4b1c      	ldr	r3, [pc, #112]	; (2078 <STACK_SIZE+0x78>)
    2006:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2008:	4a1c      	ldr	r2, [pc, #112]	; (207c <STACK_SIZE+0x7c>)
    200a:	1dfb      	adds	r3, r7, #7
    200c:	781b      	ldrb	r3, [r3, #0]
    200e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2010:	4b1b      	ldr	r3, [pc, #108]	; (2080 <STACK_SIZE+0x80>)
    2012:	885b      	ldrh	r3, [r3, #2]
    2014:	051b      	lsls	r3, r3, #20
    2016:	0f1b      	lsrs	r3, r3, #28
    2018:	b2db      	uxtb	r3, r3
    201a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    201c:	4a18      	ldr	r2, [pc, #96]	; (2080 <STACK_SIZE+0x80>)
    201e:	8853      	ldrh	r3, [r2, #2]
    2020:	4918      	ldr	r1, [pc, #96]	; (2084 <STACK_SIZE+0x84>)
    2022:	400b      	ands	r3, r1
    2024:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2026:	4a16      	ldr	r2, [pc, #88]	; (2080 <STACK_SIZE+0x80>)
    2028:	4b15      	ldr	r3, [pc, #84]	; (2080 <STACK_SIZE+0x80>)
    202a:	885b      	ldrh	r3, [r3, #2]
    202c:	b29b      	uxth	r3, r3
    202e:	4916      	ldr	r1, [pc, #88]	; (2088 <STACK_SIZE+0x88>)
    2030:	400b      	ands	r3, r1
    2032:	b29b      	uxth	r3, r3
    2034:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	4b11      	ldr	r3, [pc, #68]	; (2080 <STACK_SIZE+0x80>)
    203a:	885b      	ldrh	r3, [r3, #2]
    203c:	b29b      	uxth	r3, r3
    203e:	001a      	movs	r2, r3
    2040:	2380      	movs	r3, #128	; 0x80
    2042:	01db      	lsls	r3, r3, #7
    2044:	4013      	ands	r3, r2
    2046:	d1f7      	bne.n	2038 <STACK_SIZE+0x38>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2048:	4a0d      	ldr	r2, [pc, #52]	; (2080 <STACK_SIZE+0x80>)
    204a:	68fb      	ldr	r3, [r7, #12]
    204c:	b2db      	uxtb	r3, r3
    204e:	1c19      	adds	r1, r3, #0
    2050:	230f      	movs	r3, #15
    2052:	400b      	ands	r3, r1
    2054:	b2d9      	uxtb	r1, r3
    2056:	8853      	ldrh	r3, [r2, #2]
    2058:	1c08      	adds	r0, r1, #0
    205a:	210f      	movs	r1, #15
    205c:	4001      	ands	r1, r0
    205e:	0208      	lsls	r0, r1, #8
    2060:	4908      	ldr	r1, [pc, #32]	; (2084 <STACK_SIZE+0x84>)
    2062:	400b      	ands	r3, r1
    2064:	1c19      	adds	r1, r3, #0
    2066:	1c03      	adds	r3, r0, #0
    2068:	430b      	orrs	r3, r1
    206a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    206c:	4b07      	ldr	r3, [pc, #28]	; (208c <STACK_SIZE+0x8c>)
    206e:	4798      	blx	r3
}
    2070:	46c0      	nop			; (mov r8, r8)
    2072:	46bd      	mov	sp, r7
    2074:	b004      	add	sp, #16
    2076:	bd80      	pop	{r7, pc}
    2078:	00001c9d 	.word	0x00001c9d
    207c:	40000c02 	.word	0x40000c02
    2080:	40000c00 	.word	0x40000c00
    2084:	fffff0ff 	.word	0xfffff0ff
    2088:	ffffbfff 	.word	0xffffbfff
    208c:	00001cb1 	.word	0x00001cb1

00002090 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2090:	b580      	push	{r7, lr}
    2092:	b084      	sub	sp, #16
    2094:	af00      	add	r7, sp, #0
    2096:	0002      	movs	r2, r0
    2098:	1dfb      	adds	r3, r7, #7
    209a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    209c:	4b0d      	ldr	r3, [pc, #52]	; (20d4 <system_gclk_chan_get_hz+0x44>)
    209e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    20a0:	4a0d      	ldr	r2, [pc, #52]	; (20d8 <system_gclk_chan_get_hz+0x48>)
    20a2:	1dfb      	adds	r3, r7, #7
    20a4:	781b      	ldrb	r3, [r3, #0]
    20a6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    20a8:	4b0c      	ldr	r3, [pc, #48]	; (20dc <system_gclk_chan_get_hz+0x4c>)
    20aa:	885b      	ldrh	r3, [r3, #2]
    20ac:	051b      	lsls	r3, r3, #20
    20ae:	0f1b      	lsrs	r3, r3, #28
    20b0:	b2da      	uxtb	r2, r3
    20b2:	230f      	movs	r3, #15
    20b4:	18fb      	adds	r3, r7, r3
    20b6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    20b8:	4b09      	ldr	r3, [pc, #36]	; (20e0 <system_gclk_chan_get_hz+0x50>)
    20ba:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    20bc:	230f      	movs	r3, #15
    20be:	18fb      	adds	r3, r7, r3
    20c0:	781b      	ldrb	r3, [r3, #0]
    20c2:	0018      	movs	r0, r3
    20c4:	4b07      	ldr	r3, [pc, #28]	; (20e4 <system_gclk_chan_get_hz+0x54>)
    20c6:	4798      	blx	r3
    20c8:	0003      	movs	r3, r0
}
    20ca:	0018      	movs	r0, r3
    20cc:	46bd      	mov	sp, r7
    20ce:	b004      	add	sp, #16
    20d0:	bd80      	pop	{r7, pc}
    20d2:	46c0      	nop			; (mov r8, r8)
    20d4:	00001c9d 	.word	0x00001c9d
    20d8:	40000c02 	.word	0x40000c02
    20dc:	40000c00 	.word	0x40000c00
    20e0:	00001cb1 	.word	0x00001cb1
    20e4:	00001e95 	.word	0x00001e95

000020e8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    20e8:	b580      	push	{r7, lr}
    20ea:	b084      	sub	sp, #16
    20ec:	af00      	add	r7, sp, #0
    20ee:	0002      	movs	r2, r0
    20f0:	1dfb      	adds	r3, r7, #7
    20f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    20f4:	230f      	movs	r3, #15
    20f6:	18fb      	adds	r3, r7, r3
    20f8:	1dfa      	adds	r2, r7, #7
    20fa:	7812      	ldrb	r2, [r2, #0]
    20fc:	09d2      	lsrs	r2, r2, #7
    20fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2100:	230e      	movs	r3, #14
    2102:	18fb      	adds	r3, r7, r3
    2104:	1dfa      	adds	r2, r7, #7
    2106:	7812      	ldrb	r2, [r2, #0]
    2108:	0952      	lsrs	r2, r2, #5
    210a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    210c:	4b0d      	ldr	r3, [pc, #52]	; (2144 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    210e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2110:	230f      	movs	r3, #15
    2112:	18fb      	adds	r3, r7, r3
    2114:	781b      	ldrb	r3, [r3, #0]
    2116:	2b00      	cmp	r3, #0
    2118:	d10f      	bne.n	213a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    211a:	230f      	movs	r3, #15
    211c:	18fb      	adds	r3, r7, r3
    211e:	781b      	ldrb	r3, [r3, #0]
    2120:	009b      	lsls	r3, r3, #2
    2122:	2210      	movs	r2, #16
    2124:	4694      	mov	ip, r2
    2126:	44bc      	add	ip, r7
    2128:	4463      	add	r3, ip
    212a:	3b08      	subs	r3, #8
    212c:	681a      	ldr	r2, [r3, #0]
    212e:	230e      	movs	r3, #14
    2130:	18fb      	adds	r3, r7, r3
    2132:	781b      	ldrb	r3, [r3, #0]
    2134:	01db      	lsls	r3, r3, #7
    2136:	18d3      	adds	r3, r2, r3
    2138:	e000      	b.n	213c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    213a:	2300      	movs	r3, #0
	}
}
    213c:	0018      	movs	r0, r3
    213e:	46bd      	mov	sp, r7
    2140:	b004      	add	sp, #16
    2142:	bd80      	pop	{r7, pc}
    2144:	41004400 	.word	0x41004400

00002148 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2148:	b580      	push	{r7, lr}
    214a:	b088      	sub	sp, #32
    214c:	af00      	add	r7, sp, #0
    214e:	60f8      	str	r0, [r7, #12]
    2150:	60b9      	str	r1, [r7, #8]
    2152:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2154:	2300      	movs	r3, #0
    2156:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	78db      	ldrb	r3, [r3, #3]
    215c:	2201      	movs	r2, #1
    215e:	4053      	eors	r3, r2
    2160:	b2db      	uxtb	r3, r3
    2162:	2b00      	cmp	r3, #0
    2164:	d035      	beq.n	21d2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2166:	687b      	ldr	r3, [r7, #4]
    2168:	781b      	ldrb	r3, [r3, #0]
    216a:	2b80      	cmp	r3, #128	; 0x80
    216c:	d00b      	beq.n	2186 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    216e:	69fb      	ldr	r3, [r7, #28]
    2170:	2280      	movs	r2, #128	; 0x80
    2172:	0252      	lsls	r2, r2, #9
    2174:	4313      	orrs	r3, r2
    2176:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2178:	687b      	ldr	r3, [r7, #4]
    217a:	781b      	ldrb	r3, [r3, #0]
    217c:	061b      	lsls	r3, r3, #24
    217e:	001a      	movs	r2, r3
    2180:	69fb      	ldr	r3, [r7, #28]
    2182:	4313      	orrs	r3, r2
    2184:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	785b      	ldrb	r3, [r3, #1]
    218a:	2b00      	cmp	r3, #0
    218c:	d003      	beq.n	2196 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    218e:	687b      	ldr	r3, [r7, #4]
    2190:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2192:	2b02      	cmp	r3, #2
    2194:	d110      	bne.n	21b8 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2196:	69fb      	ldr	r3, [r7, #28]
    2198:	2280      	movs	r2, #128	; 0x80
    219a:	0292      	lsls	r2, r2, #10
    219c:	4313      	orrs	r3, r2
    219e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    21a0:	687b      	ldr	r3, [r7, #4]
    21a2:	789b      	ldrb	r3, [r3, #2]
    21a4:	2b00      	cmp	r3, #0
    21a6:	d004      	beq.n	21b2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    21a8:	69fb      	ldr	r3, [r7, #28]
    21aa:	2280      	movs	r2, #128	; 0x80
    21ac:	02d2      	lsls	r2, r2, #11
    21ae:	4313      	orrs	r3, r2
    21b0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    21b2:	68fb      	ldr	r3, [r7, #12]
    21b4:	68ba      	ldr	r2, [r7, #8]
    21b6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21b8:	687b      	ldr	r3, [r7, #4]
    21ba:	785b      	ldrb	r3, [r3, #1]
    21bc:	2b01      	cmp	r3, #1
    21be:	d003      	beq.n	21c8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    21c0:	687b      	ldr	r3, [r7, #4]
    21c2:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    21c4:	2b02      	cmp	r3, #2
    21c6:	d107      	bne.n	21d8 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    21c8:	69fb      	ldr	r3, [r7, #28]
    21ca:	4a22      	ldr	r2, [pc, #136]	; (2254 <_system_pinmux_config+0x10c>)
    21cc:	4013      	ands	r3, r2
    21ce:	61fb      	str	r3, [r7, #28]
    21d0:	e002      	b.n	21d8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    21d2:	68fb      	ldr	r3, [r7, #12]
    21d4:	68ba      	ldr	r2, [r7, #8]
    21d6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    21d8:	68bb      	ldr	r3, [r7, #8]
    21da:	041b      	lsls	r3, r3, #16
    21dc:	0c1b      	lsrs	r3, r3, #16
    21de:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    21e0:	68bb      	ldr	r3, [r7, #8]
    21e2:	0c1b      	lsrs	r3, r3, #16
    21e4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21e6:	69ba      	ldr	r2, [r7, #24]
    21e8:	69fb      	ldr	r3, [r7, #28]
    21ea:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    21ec:	22a0      	movs	r2, #160	; 0xa0
    21ee:	05d2      	lsls	r2, r2, #23
    21f0:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21f2:	68fb      	ldr	r3, [r7, #12]
    21f4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    21f6:	697a      	ldr	r2, [r7, #20]
    21f8:	69fb      	ldr	r3, [r7, #28]
    21fa:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    21fc:	22d0      	movs	r2, #208	; 0xd0
    21fe:	0612      	lsls	r2, r2, #24
    2200:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2202:	68fb      	ldr	r3, [r7, #12]
    2204:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2206:	687b      	ldr	r3, [r7, #4]
    2208:	78db      	ldrb	r3, [r3, #3]
    220a:	2201      	movs	r2, #1
    220c:	4053      	eors	r3, r2
    220e:	b2db      	uxtb	r3, r3
    2210:	2b00      	cmp	r3, #0
    2212:	d01a      	beq.n	224a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2214:	69fa      	ldr	r2, [r7, #28]
    2216:	2380      	movs	r3, #128	; 0x80
    2218:	02db      	lsls	r3, r3, #11
    221a:	4013      	ands	r3, r2
    221c:	d00a      	beq.n	2234 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    221e:	687b      	ldr	r3, [r7, #4]
    2220:	789b      	ldrb	r3, [r3, #2]
    2222:	2b01      	cmp	r3, #1
    2224:	d103      	bne.n	222e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    2226:	68fb      	ldr	r3, [r7, #12]
    2228:	68ba      	ldr	r2, [r7, #8]
    222a:	619a      	str	r2, [r3, #24]
    222c:	e002      	b.n	2234 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    222e:	68fb      	ldr	r3, [r7, #12]
    2230:	68ba      	ldr	r2, [r7, #8]
    2232:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2234:	687b      	ldr	r3, [r7, #4]
    2236:	785b      	ldrb	r3, [r3, #1]
    2238:	2b01      	cmp	r3, #1
    223a:	d003      	beq.n	2244 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    223c:	687b      	ldr	r3, [r7, #4]
    223e:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2240:	2b02      	cmp	r3, #2
    2242:	d102      	bne.n	224a <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    2244:	68fb      	ldr	r3, [r7, #12]
    2246:	68ba      	ldr	r2, [r7, #8]
    2248:	609a      	str	r2, [r3, #8]
		}
	}
}
    224a:	46c0      	nop			; (mov r8, r8)
    224c:	46bd      	mov	sp, r7
    224e:	b008      	add	sp, #32
    2250:	bd80      	pop	{r7, pc}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	fffbffff 	.word	0xfffbffff

00002258 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2258:	b580      	push	{r7, lr}
    225a:	b084      	sub	sp, #16
    225c:	af00      	add	r7, sp, #0
    225e:	0002      	movs	r2, r0
    2260:	6039      	str	r1, [r7, #0]
    2262:	1dfb      	adds	r3, r7, #7
    2264:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2266:	1dfb      	adds	r3, r7, #7
    2268:	781b      	ldrb	r3, [r3, #0]
    226a:	0018      	movs	r0, r3
    226c:	4b0a      	ldr	r3, [pc, #40]	; (2298 <system_pinmux_pin_set_config+0x40>)
    226e:	4798      	blx	r3
    2270:	0003      	movs	r3, r0
    2272:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2274:	1dfb      	adds	r3, r7, #7
    2276:	781b      	ldrb	r3, [r3, #0]
    2278:	221f      	movs	r2, #31
    227a:	4013      	ands	r3, r2
    227c:	2201      	movs	r2, #1
    227e:	409a      	lsls	r2, r3
    2280:	0013      	movs	r3, r2
    2282:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    2284:	683a      	ldr	r2, [r7, #0]
    2286:	68b9      	ldr	r1, [r7, #8]
    2288:	68fb      	ldr	r3, [r7, #12]
    228a:	0018      	movs	r0, r3
    228c:	4b03      	ldr	r3, [pc, #12]	; (229c <system_pinmux_pin_set_config+0x44>)
    228e:	4798      	blx	r3
}
    2290:	46c0      	nop			; (mov r8, r8)
    2292:	46bd      	mov	sp, r7
    2294:	b004      	add	sp, #16
    2296:	bd80      	pop	{r7, pc}
    2298:	000020e9 	.word	0x000020e9
    229c:	00002149 	.word	0x00002149

000022a0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    22a0:	b580      	push	{r7, lr}
    22a2:	af00      	add	r7, sp, #0
	return;
    22a4:	46c0      	nop			; (mov r8, r8)
}
    22a6:	46bd      	mov	sp, r7
    22a8:	bd80      	pop	{r7, pc}
    22aa:	46c0      	nop			; (mov r8, r8)

000022ac <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    22ac:	b580      	push	{r7, lr}
    22ae:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    22b0:	4b06      	ldr	r3, [pc, #24]	; (22cc <system_init+0x20>)
    22b2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    22b4:	4b06      	ldr	r3, [pc, #24]	; (22d0 <system_init+0x24>)
    22b6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    22b8:	4b06      	ldr	r3, [pc, #24]	; (22d4 <system_init+0x28>)
    22ba:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    22bc:	4b06      	ldr	r3, [pc, #24]	; (22d8 <system_init+0x2c>)
    22be:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    22c0:	4b06      	ldr	r3, [pc, #24]	; (22dc <system_init+0x30>)
    22c2:	4798      	blx	r3
}
    22c4:	46c0      	nop			; (mov r8, r8)
    22c6:	46bd      	mov	sp, r7
    22c8:	bd80      	pop	{r7, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	00001a55 	.word	0x00001a55
    22d0:	00000115 	.word	0x00000115
    22d4:	000022a1 	.word	0x000022a1
    22d8:	000022a1 	.word	0x000022a1
    22dc:	000022a1 	.word	0x000022a1

000022e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    22e0:	b580      	push	{r7, lr}
    22e2:	b082      	sub	sp, #8
    22e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    22e6:	4b2f      	ldr	r3, [pc, #188]	; (23a4 <Reset_Handler+0xc4>)
    22e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    22ea:	4b2f      	ldr	r3, [pc, #188]	; (23a8 <Reset_Handler+0xc8>)
    22ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    22ee:	687a      	ldr	r2, [r7, #4]
    22f0:	683b      	ldr	r3, [r7, #0]
    22f2:	429a      	cmp	r2, r3
    22f4:	d00c      	beq.n	2310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    22f6:	e007      	b.n	2308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    22f8:	683b      	ldr	r3, [r7, #0]
    22fa:	1d1a      	adds	r2, r3, #4
    22fc:	603a      	str	r2, [r7, #0]
    22fe:	687a      	ldr	r2, [r7, #4]
    2300:	1d11      	adds	r1, r2, #4
    2302:	6079      	str	r1, [r7, #4]
    2304:	6812      	ldr	r2, [r2, #0]
    2306:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    2308:	683a      	ldr	r2, [r7, #0]
    230a:	4b28      	ldr	r3, [pc, #160]	; (23ac <Reset_Handler+0xcc>)
    230c:	429a      	cmp	r2, r3
    230e:	d3f3      	bcc.n	22f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2310:	4b27      	ldr	r3, [pc, #156]	; (23b0 <Reset_Handler+0xd0>)
    2312:	603b      	str	r3, [r7, #0]
    2314:	e004      	b.n	2320 <Reset_Handler+0x40>
                *pDest++ = 0;
    2316:	683b      	ldr	r3, [r7, #0]
    2318:	1d1a      	adds	r2, r3, #4
    231a:	603a      	str	r2, [r7, #0]
    231c:	2200      	movs	r2, #0
    231e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    2320:	683a      	ldr	r2, [r7, #0]
    2322:	4b24      	ldr	r3, [pc, #144]	; (23b4 <Reset_Handler+0xd4>)
    2324:	429a      	cmp	r2, r3
    2326:	d3f6      	bcc.n	2316 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    2328:	4b23      	ldr	r3, [pc, #140]	; (23b8 <Reset_Handler+0xd8>)
    232a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    232c:	4b23      	ldr	r3, [pc, #140]	; (23bc <Reset_Handler+0xdc>)
    232e:	687a      	ldr	r2, [r7, #4]
    2330:	21ff      	movs	r1, #255	; 0xff
    2332:	438a      	bics	r2, r1
    2334:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2336:	4a22      	ldr	r2, [pc, #136]	; (23c0 <Reset_Handler+0xe0>)
    2338:	2390      	movs	r3, #144	; 0x90
    233a:	005b      	lsls	r3, r3, #1
    233c:	2102      	movs	r1, #2
    233e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2340:	4a20      	ldr	r2, [pc, #128]	; (23c4 <Reset_Handler+0xe4>)
    2342:	78d3      	ldrb	r3, [r2, #3]
    2344:	2103      	movs	r1, #3
    2346:	438b      	bics	r3, r1
    2348:	1c19      	adds	r1, r3, #0
    234a:	2302      	movs	r3, #2
    234c:	430b      	orrs	r3, r1
    234e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2350:	4a1c      	ldr	r2, [pc, #112]	; (23c4 <Reset_Handler+0xe4>)
    2352:	78d3      	ldrb	r3, [r2, #3]
    2354:	210c      	movs	r1, #12
    2356:	438b      	bics	r3, r1
    2358:	1c19      	adds	r1, r3, #0
    235a:	2308      	movs	r3, #8
    235c:	430b      	orrs	r3, r1
    235e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    2360:	4a19      	ldr	r2, [pc, #100]	; (23c8 <Reset_Handler+0xe8>)
    2362:	7b93      	ldrb	r3, [r2, #14]
    2364:	2130      	movs	r1, #48	; 0x30
    2366:	438b      	bics	r3, r1
    2368:	1c19      	adds	r1, r3, #0
    236a:	2320      	movs	r3, #32
    236c:	430b      	orrs	r3, r1
    236e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2370:	4a15      	ldr	r2, [pc, #84]	; (23c8 <Reset_Handler+0xe8>)
    2372:	7b93      	ldrb	r3, [r2, #14]
    2374:	210c      	movs	r1, #12
    2376:	438b      	bics	r3, r1
    2378:	1c19      	adds	r1, r3, #0
    237a:	2308      	movs	r3, #8
    237c:	430b      	orrs	r3, r1
    237e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2380:	4a11      	ldr	r2, [pc, #68]	; (23c8 <Reset_Handler+0xe8>)
    2382:	7b93      	ldrb	r3, [r2, #14]
    2384:	2103      	movs	r1, #3
    2386:	438b      	bics	r3, r1
    2388:	1c19      	adds	r1, r3, #0
    238a:	2302      	movs	r3, #2
    238c:	430b      	orrs	r3, r1
    238e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    2390:	4a0e      	ldr	r2, [pc, #56]	; (23cc <Reset_Handler+0xec>)
    2392:	6853      	ldr	r3, [r2, #4]
    2394:	2180      	movs	r1, #128	; 0x80
    2396:	430b      	orrs	r3, r1
    2398:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    239a:	4b0d      	ldr	r3, [pc, #52]	; (23d0 <Reset_Handler+0xf0>)
    239c:	4798      	blx	r3

        /* Branch to main function */
        main();
    239e:	4b0d      	ldr	r3, [pc, #52]	; (23d4 <Reset_Handler+0xf4>)
    23a0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    23a2:	e7fe      	b.n	23a2 <Reset_Handler+0xc2>
    23a4:	00003808 	.word	0x00003808
    23a8:	20000000 	.word	0x20000000
    23ac:	20000070 	.word	0x20000070
    23b0:	20000070 	.word	0x20000070
    23b4:	20000130 	.word	0x20000130
    23b8:	00000000 	.word	0x00000000
    23bc:	e000ed00 	.word	0xe000ed00
    23c0:	41007000 	.word	0x41007000
    23c4:	41005000 	.word	0x41005000
    23c8:	41004800 	.word	0x41004800
    23cc:	41004000 	.word	0x41004000
    23d0:	00002bb9 	.word	0x00002bb9
    23d4:	0000294d 	.word	0x0000294d

000023d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    23d8:	b580      	push	{r7, lr}
    23da:	af00      	add	r7, sp, #0
        while (1) {
        }
    23dc:	e7fe      	b.n	23dc <Dummy_Handler+0x4>
    23de:	46c0      	nop			; (mov r8, r8)

000023e0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    23e0:	b580      	push	{r7, lr}
    23e2:	b086      	sub	sp, #24
    23e4:	af00      	add	r7, sp, #0
    23e6:	60f8      	str	r0, [r7, #12]
    23e8:	60b9      	str	r1, [r7, #8]
    23ea:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    23ec:	2300      	movs	r3, #0
    23ee:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    23f0:	68fb      	ldr	r3, [r7, #12]
    23f2:	2b00      	cmp	r3, #0
    23f4:	d012      	beq.n	241c <_read+0x3c>
		return -1;
    23f6:	2301      	movs	r3, #1
    23f8:	425b      	negs	r3, r3
    23fa:	e013      	b.n	2424 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    23fc:	4b0b      	ldr	r3, [pc, #44]	; (242c <_read+0x4c>)
    23fe:	681a      	ldr	r2, [r3, #0]
    2400:	4b0b      	ldr	r3, [pc, #44]	; (2430 <_read+0x50>)
    2402:	681b      	ldr	r3, [r3, #0]
    2404:	68b9      	ldr	r1, [r7, #8]
    2406:	0018      	movs	r0, r3
    2408:	4790      	blx	r2
		ptr++;
    240a:	68bb      	ldr	r3, [r7, #8]
    240c:	3301      	adds	r3, #1
    240e:	60bb      	str	r3, [r7, #8]
		nChars++;
    2410:	697b      	ldr	r3, [r7, #20]
    2412:	3301      	adds	r3, #1
    2414:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    2416:	687b      	ldr	r3, [r7, #4]
    2418:	3b01      	subs	r3, #1
    241a:	607b      	str	r3, [r7, #4]
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	2b00      	cmp	r3, #0
    2420:	dcec      	bgt.n	23fc <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    2422:	697b      	ldr	r3, [r7, #20]
}
    2424:	0018      	movs	r0, r3
    2426:	46bd      	mov	sp, r7
    2428:	b006      	add	sp, #24
    242a:	bd80      	pop	{r7, pc}
    242c:	200000ec 	.word	0x200000ec
    2430:	200000f4 	.word	0x200000f4

00002434 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2434:	b580      	push	{r7, lr}
    2436:	b086      	sub	sp, #24
    2438:	af00      	add	r7, sp, #0
    243a:	60f8      	str	r0, [r7, #12]
    243c:	60b9      	str	r1, [r7, #8]
    243e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    2440:	2300      	movs	r3, #0
    2442:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    2444:	68fb      	ldr	r3, [r7, #12]
    2446:	2b01      	cmp	r3, #1
    2448:	d01d      	beq.n	2486 <_write+0x52>
    244a:	68fb      	ldr	r3, [r7, #12]
    244c:	2b02      	cmp	r3, #2
    244e:	d01a      	beq.n	2486 <_write+0x52>
    2450:	68fb      	ldr	r3, [r7, #12]
    2452:	2b03      	cmp	r3, #3
    2454:	d017      	beq.n	2486 <_write+0x52>
		return -1;
    2456:	2301      	movs	r3, #1
    2458:	425b      	negs	r3, r3
    245a:	e018      	b.n	248e <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    245c:	4b0e      	ldr	r3, [pc, #56]	; (2498 <_write+0x64>)
    245e:	681a      	ldr	r2, [r3, #0]
    2460:	4b0e      	ldr	r3, [pc, #56]	; (249c <_write+0x68>)
    2462:	6818      	ldr	r0, [r3, #0]
    2464:	68bb      	ldr	r3, [r7, #8]
    2466:	1c59      	adds	r1, r3, #1
    2468:	60b9      	str	r1, [r7, #8]
    246a:	781b      	ldrb	r3, [r3, #0]
    246c:	0019      	movs	r1, r3
    246e:	4790      	blx	r2
    2470:	1e03      	subs	r3, r0, #0
    2472:	da02      	bge.n	247a <_write+0x46>
			return -1;
    2474:	2301      	movs	r3, #1
    2476:	425b      	negs	r3, r3
    2478:	e009      	b.n	248e <_write+0x5a>
		}
		++nChars;
    247a:	697b      	ldr	r3, [r7, #20]
    247c:	3301      	adds	r3, #1
    247e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    2480:	687b      	ldr	r3, [r7, #4]
    2482:	3b01      	subs	r3, #1
    2484:	607b      	str	r3, [r7, #4]
    2486:	687b      	ldr	r3, [r7, #4]
    2488:	2b00      	cmp	r3, #0
    248a:	d1e7      	bne.n	245c <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    248c:	697b      	ldr	r3, [r7, #20]
}
    248e:	0018      	movs	r0, r3
    2490:	46bd      	mov	sp, r7
    2492:	b006      	add	sp, #24
    2494:	bd80      	pop	{r7, pc}
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	200000f0 	.word	0x200000f0
    249c:	200000f4 	.word	0x200000f4

000024a0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    24a0:	b580      	push	{r7, lr}
    24a2:	b084      	sub	sp, #16
    24a4:	af00      	add	r7, sp, #0
    24a6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    24a8:	4b0a      	ldr	r3, [pc, #40]	; (24d4 <_sbrk+0x34>)
    24aa:	681b      	ldr	r3, [r3, #0]
    24ac:	2b00      	cmp	r3, #0
    24ae:	d102      	bne.n	24b6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    24b0:	4b08      	ldr	r3, [pc, #32]	; (24d4 <_sbrk+0x34>)
    24b2:	4a09      	ldr	r2, [pc, #36]	; (24d8 <_sbrk+0x38>)
    24b4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    24b6:	4b07      	ldr	r3, [pc, #28]	; (24d4 <_sbrk+0x34>)
    24b8:	681b      	ldr	r3, [r3, #0]
    24ba:	60fb      	str	r3, [r7, #12]

	heap += incr;
    24bc:	4b05      	ldr	r3, [pc, #20]	; (24d4 <_sbrk+0x34>)
    24be:	681a      	ldr	r2, [r3, #0]
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	18d2      	adds	r2, r2, r3
    24c4:	4b03      	ldr	r3, [pc, #12]	; (24d4 <_sbrk+0x34>)
    24c6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    24c8:	68fb      	ldr	r3, [r7, #12]
}
    24ca:	0018      	movs	r0, r3
    24cc:	46bd      	mov	sp, r7
    24ce:	b004      	add	sp, #16
    24d0:	bd80      	pop	{r7, pc}
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	200000c8 	.word	0x200000c8
    24d8:	20002130 	.word	0x20002130

000024dc <_close>:
{
	return -1;
}

extern int _close(int file)
{
    24dc:	b580      	push	{r7, lr}
    24de:	b082      	sub	sp, #8
    24e0:	af00      	add	r7, sp, #0
    24e2:	6078      	str	r0, [r7, #4]
	return -1;
    24e4:	2301      	movs	r3, #1
    24e6:	425b      	negs	r3, r3
}
    24e8:	0018      	movs	r0, r3
    24ea:	46bd      	mov	sp, r7
    24ec:	b002      	add	sp, #8
    24ee:	bd80      	pop	{r7, pc}

000024f0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    24f0:	b580      	push	{r7, lr}
    24f2:	b082      	sub	sp, #8
    24f4:	af00      	add	r7, sp, #0
    24f6:	6078      	str	r0, [r7, #4]
    24f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    24fa:	683b      	ldr	r3, [r7, #0]
    24fc:	2280      	movs	r2, #128	; 0x80
    24fe:	0192      	lsls	r2, r2, #6
    2500:	605a      	str	r2, [r3, #4]

	return 0;
    2502:	2300      	movs	r3, #0
}
    2504:	0018      	movs	r0, r3
    2506:	46bd      	mov	sp, r7
    2508:	b002      	add	sp, #8
    250a:	bd80      	pop	{r7, pc}

0000250c <_isatty>:

extern int _isatty(int file)
{
    250c:	b580      	push	{r7, lr}
    250e:	b082      	sub	sp, #8
    2510:	af00      	add	r7, sp, #0
    2512:	6078      	str	r0, [r7, #4]
	return 1;
    2514:	2301      	movs	r3, #1
}
    2516:	0018      	movs	r0, r3
    2518:	46bd      	mov	sp, r7
    251a:	b002      	add	sp, #8
    251c:	bd80      	pop	{r7, pc}
    251e:	46c0      	nop			; (mov r8, r8)

00002520 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    2520:	b580      	push	{r7, lr}
    2522:	b084      	sub	sp, #16
    2524:	af00      	add	r7, sp, #0
    2526:	60f8      	str	r0, [r7, #12]
    2528:	60b9      	str	r1, [r7, #8]
    252a:	607a      	str	r2, [r7, #4]
	return 0;
    252c:	2300      	movs	r3, #0
}
    252e:	0018      	movs	r0, r3
    2530:	46bd      	mov	sp, r7
    2532:	b004      	add	sp, #16
    2534:	bd80      	pop	{r7, pc}
    2536:	46c0      	nop			; (mov r8, r8)

00002538 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2538:	b580      	push	{r7, lr}
    253a:	b084      	sub	sp, #16
    253c:	af00      	add	r7, sp, #0
    253e:	0002      	movs	r2, r0
    2540:	1dfb      	adds	r3, r7, #7
    2542:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2544:	230f      	movs	r3, #15
    2546:	18fb      	adds	r3, r7, r3
    2548:	1dfa      	adds	r2, r7, #7
    254a:	7812      	ldrb	r2, [r2, #0]
    254c:	09d2      	lsrs	r2, r2, #7
    254e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2550:	230e      	movs	r3, #14
    2552:	18fb      	adds	r3, r7, r3
    2554:	1dfa      	adds	r2, r7, #7
    2556:	7812      	ldrb	r2, [r2, #0]
    2558:	0952      	lsrs	r2, r2, #5
    255a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    255c:	4b0d      	ldr	r3, [pc, #52]	; (2594 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    255e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2560:	230f      	movs	r3, #15
    2562:	18fb      	adds	r3, r7, r3
    2564:	781b      	ldrb	r3, [r3, #0]
    2566:	2b00      	cmp	r3, #0
    2568:	d10f      	bne.n	258a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    256a:	230f      	movs	r3, #15
    256c:	18fb      	adds	r3, r7, r3
    256e:	781b      	ldrb	r3, [r3, #0]
    2570:	009b      	lsls	r3, r3, #2
    2572:	2210      	movs	r2, #16
    2574:	4694      	mov	ip, r2
    2576:	44bc      	add	ip, r7
    2578:	4463      	add	r3, ip
    257a:	3b08      	subs	r3, #8
    257c:	681a      	ldr	r2, [r3, #0]
    257e:	230e      	movs	r3, #14
    2580:	18fb      	adds	r3, r7, r3
    2582:	781b      	ldrb	r3, [r3, #0]
    2584:	01db      	lsls	r3, r3, #7
    2586:	18d3      	adds	r3, r2, r3
    2588:	e000      	b.n	258c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    258a:	2300      	movs	r3, #0
	}
}
    258c:	0018      	movs	r0, r3
    258e:	46bd      	mov	sp, r7
    2590:	b004      	add	sp, #16
    2592:	bd80      	pop	{r7, pc}
    2594:	41004400 	.word	0x41004400

00002598 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2598:	b580      	push	{r7, lr}
    259a:	b082      	sub	sp, #8
    259c:	af00      	add	r7, sp, #0
    259e:	0002      	movs	r2, r0
    25a0:	1dfb      	adds	r3, r7, #7
    25a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    25a4:	1dfb      	adds	r3, r7, #7
    25a6:	781b      	ldrb	r3, [r3, #0]
    25a8:	0018      	movs	r0, r3
    25aa:	4b03      	ldr	r3, [pc, #12]	; (25b8 <port_get_group_from_gpio_pin+0x20>)
    25ac:	4798      	blx	r3
    25ae:	0003      	movs	r3, r0
}
    25b0:	0018      	movs	r0, r3
    25b2:	46bd      	mov	sp, r7
    25b4:	b002      	add	sp, #8
    25b6:	bd80      	pop	{r7, pc}
    25b8:	00002539 	.word	0x00002539

000025bc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    25bc:	b580      	push	{r7, lr}
    25be:	b082      	sub	sp, #8
    25c0:	af00      	add	r7, sp, #0
    25c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    25c4:	687b      	ldr	r3, [r7, #4]
    25c6:	2200      	movs	r2, #0
    25c8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    25ca:	687b      	ldr	r3, [r7, #4]
    25cc:	2201      	movs	r2, #1
    25ce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    25d0:	687b      	ldr	r3, [r7, #4]
    25d2:	2200      	movs	r2, #0
    25d4:	709a      	strb	r2, [r3, #2]
}
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	46bd      	mov	sp, r7
    25da:	b002      	add	sp, #8
    25dc:	bd80      	pop	{r7, pc}
    25de:	46c0      	nop			; (mov r8, r8)

000025e0 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    25e0:	b580      	push	{r7, lr}
    25e2:	b084      	sub	sp, #16
    25e4:	af00      	add	r7, sp, #0
    25e6:	0002      	movs	r2, r0
    25e8:	1dfb      	adds	r3, r7, #7
    25ea:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    25ec:	1dfb      	adds	r3, r7, #7
    25ee:	781b      	ldrb	r3, [r3, #0]
    25f0:	0018      	movs	r0, r3
    25f2:	4b0b      	ldr	r3, [pc, #44]	; (2620 <port_pin_get_input_level+0x40>)
    25f4:	4798      	blx	r3
    25f6:	0003      	movs	r3, r0
    25f8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    25fa:	1dfb      	adds	r3, r7, #7
    25fc:	781b      	ldrb	r3, [r3, #0]
    25fe:	221f      	movs	r2, #31
    2600:	4013      	ands	r3, r2
    2602:	2201      	movs	r2, #1
    2604:	409a      	lsls	r2, r3
    2606:	0013      	movs	r3, r2
    2608:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    260a:	68fb      	ldr	r3, [r7, #12]
    260c:	6a1b      	ldr	r3, [r3, #32]
    260e:	68ba      	ldr	r2, [r7, #8]
    2610:	4013      	ands	r3, r2
    2612:	1e5a      	subs	r2, r3, #1
    2614:	4193      	sbcs	r3, r2
    2616:	b2db      	uxtb	r3, r3
}
    2618:	0018      	movs	r0, r3
    261a:	46bd      	mov	sp, r7
    261c:	b004      	add	sp, #16
    261e:	bd80      	pop	{r7, pc}
    2620:	00002599 	.word	0x00002599

00002624 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    2624:	b580      	push	{r7, lr}
    2626:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    2628:	4b04      	ldr	r3, [pc, #16]	; (263c <system_interrupt_enable_global+0x18>)
    262a:	2201      	movs	r2, #1
    262c:	701a      	strb	r2, [r3, #0]
    262e:	f3bf 8f5f 	dmb	sy
    2632:	b662      	cpsie	i
}
    2634:	46c0      	nop			; (mov r8, r8)
    2636:	46bd      	mov	sp, r7
    2638:	bd80      	pop	{r7, pc}
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	20000008 	.word	0x20000008

00002640 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    2640:	b580      	push	{r7, lr}
    2642:	b082      	sub	sp, #8
    2644:	af00      	add	r7, sp, #0
    2646:	0002      	movs	r2, r0
    2648:	1dfb      	adds	r3, r7, #7
    264a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    264c:	4b06      	ldr	r3, [pc, #24]	; (2668 <system_interrupt_enable+0x28>)
    264e:	1dfa      	adds	r2, r7, #7
    2650:	7812      	ldrb	r2, [r2, #0]
    2652:	0011      	movs	r1, r2
    2654:	221f      	movs	r2, #31
    2656:	400a      	ands	r2, r1
    2658:	2101      	movs	r1, #1
    265a:	4091      	lsls	r1, r2
    265c:	000a      	movs	r2, r1
    265e:	601a      	str	r2, [r3, #0]
}
    2660:	46c0      	nop			; (mov r8, r8)
    2662:	46bd      	mov	sp, r7
    2664:	b002      	add	sp, #8
    2666:	bd80      	pop	{r7, pc}
    2668:	e000e100 	.word	0xe000e100

0000266c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    266c:	b580      	push	{r7, lr}
    266e:	b084      	sub	sp, #16
    2670:	af00      	add	r7, sp, #0
    2672:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	681b      	ldr	r3, [r3, #0]
    2678:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    267a:	68fb      	ldr	r3, [r7, #12]
    267c:	69db      	ldr	r3, [r3, #28]
    267e:	1e5a      	subs	r2, r3, #1
    2680:	4193      	sbcs	r3, r2
    2682:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    2684:	0018      	movs	r0, r3
    2686:	46bd      	mov	sp, r7
    2688:	b004      	add	sp, #16
    268a:	bd80      	pop	{r7, pc}

0000268c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    268c:	b580      	push	{r7, lr}
    268e:	b082      	sub	sp, #8
    2690:	af00      	add	r7, sp, #0
    2692:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    2694:	46c0      	nop			; (mov r8, r8)
    2696:	687b      	ldr	r3, [r7, #4]
    2698:	0018      	movs	r0, r3
    269a:	4b04      	ldr	r3, [pc, #16]	; (26ac <_usart_wait_for_sync+0x20>)
    269c:	4798      	blx	r3
    269e:	1e03      	subs	r3, r0, #0
    26a0:	d1f9      	bne.n	2696 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    26a2:	46c0      	nop			; (mov r8, r8)
    26a4:	46bd      	mov	sp, r7
    26a6:	b002      	add	sp, #8
    26a8:	bd80      	pop	{r7, pc}
    26aa:	46c0      	nop			; (mov r8, r8)
    26ac:	0000266d 	.word	0x0000266d

000026b0 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    26b0:	b580      	push	{r7, lr}
    26b2:	b082      	sub	sp, #8
    26b4:	af00      	add	r7, sp, #0
    26b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    26b8:	687b      	ldr	r3, [r7, #4]
    26ba:	2280      	movs	r2, #128	; 0x80
    26bc:	05d2      	lsls	r2, r2, #23
    26be:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    26c0:	687b      	ldr	r3, [r7, #4]
    26c2:	2200      	movs	r2, #0
    26c4:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    26c6:	687b      	ldr	r3, [r7, #4]
    26c8:	22ff      	movs	r2, #255	; 0xff
    26ca:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	2200      	movs	r2, #0
    26d0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    26d2:	687b      	ldr	r3, [r7, #4]
    26d4:	2200      	movs	r2, #0
    26d6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    26d8:	687b      	ldr	r3, [r7, #4]
    26da:	2296      	movs	r2, #150	; 0x96
    26dc:	0192      	lsls	r2, r2, #6
    26de:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    26e0:	687b      	ldr	r3, [r7, #4]
    26e2:	2224      	movs	r2, #36	; 0x24
    26e4:	2101      	movs	r1, #1
    26e6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    26e8:	687b      	ldr	r3, [r7, #4]
    26ea:	2225      	movs	r2, #37	; 0x25
    26ec:	2101      	movs	r1, #1
    26ee:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	2226      	movs	r2, #38	; 0x26
    26f4:	2100      	movs	r1, #0
    26f6:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	2227      	movs	r2, #39	; 0x27
    26fc:	2100      	movs	r1, #0
    26fe:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    2700:	687b      	ldr	r3, [r7, #4]
    2702:	2200      	movs	r2, #0
    2704:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    2706:	687b      	ldr	r3, [r7, #4]
    2708:	2288      	movs	r2, #136	; 0x88
    270a:	0352      	lsls	r2, r2, #13
    270c:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	222c      	movs	r2, #44	; 0x2c
    2712:	2100      	movs	r1, #0
    2714:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    2716:	687b      	ldr	r3, [r7, #4]
    2718:	222d      	movs	r2, #45	; 0x2d
    271a:	2100      	movs	r1, #0
    271c:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    271e:	687b      	ldr	r3, [r7, #4]
    2720:	2200      	movs	r2, #0
    2722:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2724:	687b      	ldr	r3, [r7, #4]
    2726:	2200      	movs	r2, #0
    2728:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    272a:	687b      	ldr	r3, [r7, #4]
    272c:	2200      	movs	r2, #0
    272e:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    2730:	687b      	ldr	r3, [r7, #4]
    2732:	2200      	movs	r2, #0
    2734:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2736:	687b      	ldr	r3, [r7, #4]
    2738:	2200      	movs	r2, #0
    273a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    273c:	687b      	ldr	r3, [r7, #4]
    273e:	2200      	movs	r2, #0
    2740:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2742:	687b      	ldr	r3, [r7, #4]
    2744:	2200      	movs	r2, #0
    2746:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    2748:	687b      	ldr	r3, [r7, #4]
    274a:	2200      	movs	r2, #0
    274c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    274e:	687b      	ldr	r3, [r7, #4]
    2750:	2200      	movs	r2, #0
    2752:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    2754:	687b      	ldr	r3, [r7, #4]
    2756:	2200      	movs	r2, #0
    2758:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	2213      	movs	r2, #19
    275e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	2200      	movs	r2, #0
    2764:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    2766:	46c0      	nop			; (mov r8, r8)
    2768:	46bd      	mov	sp, r7
    276a:	b002      	add	sp, #8
    276c:	bd80      	pop	{r7, pc}
    276e:	46c0      	nop			; (mov r8, r8)

00002770 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    2770:	b580      	push	{r7, lr}
    2772:	b084      	sub	sp, #16
    2774:	af00      	add	r7, sp, #0
    2776:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2778:	687b      	ldr	r3, [r7, #4]
    277a:	681b      	ldr	r3, [r3, #0]
    277c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    277e:	687b      	ldr	r3, [r7, #4]
    2780:	681b      	ldr	r3, [r3, #0]
    2782:	0018      	movs	r0, r3
    2784:	4b09      	ldr	r3, [pc, #36]	; (27ac <usart_enable+0x3c>)
    2786:	4798      	blx	r3
    2788:	0003      	movs	r3, r0
    278a:	0018      	movs	r0, r3
    278c:	4b08      	ldr	r3, [pc, #32]	; (27b0 <usart_enable+0x40>)
    278e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	0018      	movs	r0, r3
    2794:	4b07      	ldr	r3, [pc, #28]	; (27b4 <usart_enable+0x44>)
    2796:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2798:	68fb      	ldr	r3, [r7, #12]
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	2202      	movs	r2, #2
    279e:	431a      	orrs	r2, r3
    27a0:	68fb      	ldr	r3, [r7, #12]
    27a2:	601a      	str	r2, [r3, #0]
}
    27a4:	46c0      	nop			; (mov r8, r8)
    27a6:	46bd      	mov	sp, r7
    27a8:	b004      	add	sp, #16
    27aa:	bd80      	pop	{r7, pc}
    27ac:	000008e1 	.word	0x000008e1
    27b0:	00002641 	.word	0x00002641
    27b4:	0000268d 	.word	0x0000268d

000027b8 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    27b8:	b580      	push	{r7, lr}
    27ba:	b084      	sub	sp, #16
    27bc:	af00      	add	r7, sp, #0
    27be:	60f8      	str	r0, [r7, #12]
    27c0:	60b9      	str	r1, [r7, #8]
    27c2:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    27c4:	687a      	ldr	r2, [r7, #4]
    27c6:	68b9      	ldr	r1, [r7, #8]
    27c8:	68fb      	ldr	r3, [r7, #12]
    27ca:	0018      	movs	r0, r3
    27cc:	4b05      	ldr	r3, [pc, #20]	; (27e4 <usart_serial_init+0x2c>)
    27ce:	4798      	blx	r3
    27d0:	1e03      	subs	r3, r0, #0
    27d2:	d101      	bne.n	27d8 <usart_serial_init+0x20>
		return true;
    27d4:	2301      	movs	r3, #1
    27d6:	e000      	b.n	27da <usart_serial_init+0x22>
	}
	else {
		return false;
    27d8:	2300      	movs	r3, #0
	}
}
    27da:	0018      	movs	r0, r3
    27dc:	46bd      	mov	sp, r7
    27de:	b004      	add	sp, #16
    27e0:	bd80      	pop	{r7, pc}
    27e2:	46c0      	nop			; (mov r8, r8)
    27e4:	00000d99 	.word	0x00000d99

000027e8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    27e8:	b580      	push	{r7, lr}
    27ea:	b082      	sub	sp, #8
    27ec:	af00      	add	r7, sp, #0
    27ee:	6078      	str	r0, [r7, #4]
    27f0:	000a      	movs	r2, r1
    27f2:	1cfb      	adds	r3, r7, #3
    27f4:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    27f6:	46c0      	nop			; (mov r8, r8)
    27f8:	1cfb      	adds	r3, r7, #3
    27fa:	781b      	ldrb	r3, [r3, #0]
    27fc:	b29a      	uxth	r2, r3
    27fe:	687b      	ldr	r3, [r7, #4]
    2800:	0011      	movs	r1, r2
    2802:	0018      	movs	r0, r3
    2804:	4b04      	ldr	r3, [pc, #16]	; (2818 <usart_serial_putchar+0x30>)
    2806:	4798      	blx	r3
    2808:	1e03      	subs	r3, r0, #0
    280a:	d1f5      	bne.n	27f8 <usart_serial_putchar+0x10>

	return STATUS_OK;
    280c:	2300      	movs	r3, #0
}
    280e:	0018      	movs	r0, r3
    2810:	46bd      	mov	sp, r7
    2812:	b002      	add	sp, #8
    2814:	bd80      	pop	{r7, pc}
    2816:	46c0      	nop			; (mov r8, r8)
    2818:	0000100d 	.word	0x0000100d

0000281c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    281c:	b580      	push	{r7, lr}
    281e:	b084      	sub	sp, #16
    2820:	af00      	add	r7, sp, #0
    2822:	6078      	str	r0, [r7, #4]
    2824:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    2826:	230e      	movs	r3, #14
    2828:	18fb      	adds	r3, r7, r3
    282a:	2200      	movs	r2, #0
    282c:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	230e      	movs	r3, #14
    2832:	18fa      	adds	r2, r7, r3
    2834:	687b      	ldr	r3, [r7, #4]
    2836:	0011      	movs	r1, r2
    2838:	0018      	movs	r0, r3
    283a:	4b07      	ldr	r3, [pc, #28]	; (2858 <usart_serial_getchar+0x3c>)
    283c:	4798      	blx	r3
    283e:	1e03      	subs	r3, r0, #0
    2840:	d1f6      	bne.n	2830 <usart_serial_getchar+0x14>

	*c = temp;
    2842:	230e      	movs	r3, #14
    2844:	18fb      	adds	r3, r7, r3
    2846:	881b      	ldrh	r3, [r3, #0]
    2848:	b2da      	uxtb	r2, r3
    284a:	683b      	ldr	r3, [r7, #0]
    284c:	701a      	strb	r2, [r3, #0]
}
    284e:	46c0      	nop			; (mov r8, r8)
    2850:	46bd      	mov	sp, r7
    2852:	b004      	add	sp, #16
    2854:	bd80      	pop	{r7, pc}
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	00001071 	.word	0x00001071

0000285c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    285c:	b580      	push	{r7, lr}
    285e:	b084      	sub	sp, #16
    2860:	af00      	add	r7, sp, #0
    2862:	60f8      	str	r0, [r7, #12]
    2864:	60b9      	str	r1, [r7, #8]
    2866:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    2868:	4b10      	ldr	r3, [pc, #64]	; (28ac <stdio_serial_init+0x50>)
    286a:	68fa      	ldr	r2, [r7, #12]
    286c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    286e:	4b10      	ldr	r3, [pc, #64]	; (28b0 <stdio_serial_init+0x54>)
    2870:	4a10      	ldr	r2, [pc, #64]	; (28b4 <stdio_serial_init+0x58>)
    2872:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2874:	4b10      	ldr	r3, [pc, #64]	; (28b8 <stdio_serial_init+0x5c>)
    2876:	4a11      	ldr	r2, [pc, #68]	; (28bc <stdio_serial_init+0x60>)
    2878:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    287a:	687a      	ldr	r2, [r7, #4]
    287c:	68b9      	ldr	r1, [r7, #8]
    287e:	68fb      	ldr	r3, [r7, #12]
    2880:	0018      	movs	r0, r3
    2882:	4b0f      	ldr	r3, [pc, #60]	; (28c0 <stdio_serial_init+0x64>)
    2884:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2886:	4b0f      	ldr	r3, [pc, #60]	; (28c4 <stdio_serial_init+0x68>)
    2888:	681b      	ldr	r3, [r3, #0]
    288a:	689b      	ldr	r3, [r3, #8]
    288c:	2100      	movs	r1, #0
    288e:	0018      	movs	r0, r3
    2890:	4b0d      	ldr	r3, [pc, #52]	; (28c8 <stdio_serial_init+0x6c>)
    2892:	4798      	blx	r3
	setbuf(stdin, NULL);
    2894:	4b0b      	ldr	r3, [pc, #44]	; (28c4 <stdio_serial_init+0x68>)
    2896:	681b      	ldr	r3, [r3, #0]
    2898:	685b      	ldr	r3, [r3, #4]
    289a:	2100      	movs	r1, #0
    289c:	0018      	movs	r0, r3
    289e:	4b0a      	ldr	r3, [pc, #40]	; (28c8 <stdio_serial_init+0x6c>)
    28a0:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    28a2:	46c0      	nop			; (mov r8, r8)
    28a4:	46bd      	mov	sp, r7
    28a6:	b004      	add	sp, #16
    28a8:	bd80      	pop	{r7, pc}
    28aa:	46c0      	nop			; (mov r8, r8)
    28ac:	200000f4 	.word	0x200000f4
    28b0:	200000f0 	.word	0x200000f0
    28b4:	000027e9 	.word	0x000027e9
    28b8:	200000ec 	.word	0x200000ec
    28bc:	0000281d 	.word	0x0000281d
    28c0:	000027b9 	.word	0x000027b9
    28c4:	2000006c 	.word	0x2000006c
    28c8:	00002d01 	.word	0x00002d01

000028cc <configure_console>:
#define EDBG_CDC_SERCOM_PINMUX_PAD2  PINMUX_PB10D_SERCOM4_PAD2
#define EDBG_CDC_SERCOM_PINMUX_PAD3  PINMUX_PB11D_SERCOM4_PAD3
#define APP_START_ADDRESS			0x4000
#define BOOT_PIN					PIN_PA04 //pin tied to button for stay in boot mode
static void configure_console(void)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	b090      	sub	sp, #64	; 0x40
    28d0:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    28d2:	003b      	movs	r3, r7
    28d4:	0018      	movs	r0, r3
    28d6:	4b13      	ldr	r3, [pc, #76]	; (2924 <configure_console+0x58>)
    28d8:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    28da:	003b      	movs	r3, r7
    28dc:	22c4      	movs	r2, #196	; 0xc4
    28de:	0392      	lsls	r2, r2, #14
    28e0:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    28e2:	003b      	movs	r3, r7
    28e4:	2201      	movs	r2, #1
    28e6:	4252      	negs	r2, r2
    28e8:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    28ea:	003b      	movs	r3, r7
    28ec:	2201      	movs	r2, #1
    28ee:	4252      	negs	r2, r2
    28f0:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    28f2:	003b      	movs	r3, r7
    28f4:	4a0c      	ldr	r2, [pc, #48]	; (2928 <configure_console+0x5c>)
    28f6:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    28f8:	003b      	movs	r3, r7
    28fa:	4a0c      	ldr	r2, [pc, #48]	; (292c <configure_console+0x60>)
    28fc:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    28fe:	003b      	movs	r3, r7
    2900:	22e1      	movs	r2, #225	; 0xe1
    2902:	0252      	lsls	r2, r2, #9
    2904:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
    2906:	003a      	movs	r2, r7
    2908:	4909      	ldr	r1, [pc, #36]	; (2930 <configure_console+0x64>)
    290a:	4b0a      	ldr	r3, [pc, #40]	; (2934 <configure_console+0x68>)
    290c:	0018      	movs	r0, r3
    290e:	4b0a      	ldr	r3, [pc, #40]	; (2938 <configure_console+0x6c>)
    2910:	4798      	blx	r3
	usart_enable(&usart_instance);
    2912:	4b08      	ldr	r3, [pc, #32]	; (2934 <configure_console+0x68>)
    2914:	0018      	movs	r0, r3
    2916:	4b09      	ldr	r3, [pc, #36]	; (293c <configure_console+0x70>)
    2918:	4798      	blx	r3
}
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	46bd      	mov	sp, r7
    291e:	b010      	add	sp, #64	; 0x40
    2920:	bd80      	pop	{r7, pc}
    2922:	46c0      	nop			; (mov r8, r8)
    2924:	000026b1 	.word	0x000026b1
    2928:	002a0003 	.word	0x002a0003
    292c:	002b0003 	.word	0x002b0003
    2930:	42001800 	.word	0x42001800
    2934:	200000f8 	.word	0x200000f8
    2938:	0000285d 	.word	0x0000285d
    293c:	00002771 	.word	0x00002771

00002940 <download_firmware>:

// download firmware and write it to the spi flash
static void download_firmware()
{
    2940:	b580      	push	{r7, lr}
    2942:	af00      	add	r7, sp, #0

	
}
    2944:	46c0      	nop			; (mov r8, r8)
    2946:	46bd      	mov	sp, r7
    2948:	bd80      	pop	{r7, pc}
    294a:	46c0      	nop			; (mov r8, r8)

0000294c <main>:
int main (void)
{
    294c:	b580      	push	{r7, lr}
    294e:	b084      	sub	sp, #16
    2950:	af00      	add	r7, sp, #0
	
	system_init();
    2952:	4b2e      	ldr	r3, [pc, #184]	; (2a0c <main+0xc0>)
    2954:	4798      	blx	r3
	system_interrupt_enable_global();
    2956:	4b2e      	ldr	r3, [pc, #184]	; (2a10 <main+0xc4>)
    2958:	4798      	blx	r3
	delay_init();
    295a:	4b2e      	ldr	r3, [pc, #184]	; (2a14 <main+0xc8>)
    295c:	4798      	blx	r3
	configure_console();
    295e:	4b2e      	ldr	r3, [pc, #184]	; (2a18 <main+0xcc>)
    2960:	4798      	blx	r3
	// boot pin config
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2962:	1d3b      	adds	r3, r7, #4
    2964:	0018      	movs	r0, r3
    2966:	4b2d      	ldr	r3, [pc, #180]	; (2a1c <main+0xd0>)
    2968:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    296a:	1d3b      	adds	r3, r7, #4
    296c:	2200      	movs	r2, #0
    296e:	701a      	strb	r2, [r3, #0]
	 port_pin_set_config(BOOT_PIN, &pin_conf);
    2970:	1d3b      	adds	r3, r7, #4
    2972:	0019      	movs	r1, r3
    2974:	2004      	movs	r0, #4
    2976:	4b2a      	ldr	r3, [pc, #168]	; (2a20 <main+0xd4>)
    2978:	4798      	blx	r3
	printf("Init done.\n");
    297a:	4b2a      	ldr	r3, [pc, #168]	; (2a24 <main+0xd8>)
    297c:	0018      	movs	r0, r3
    297e:	4b2a      	ldr	r3, [pc, #168]	; (2a28 <main+0xdc>)
    2980:	4798      	blx	r3
	/* Insert  code here, after the board has been initialized. */
	//handle writing to the flags
	FM_Status.executing_image = 1;
    2982:	4b2a      	ldr	r3, [pc, #168]	; (2a2c <main+0xe0>)
    2984:	2201      	movs	r2, #1
    2986:	711a      	strb	r2, [r3, #4]
	FM_Status.downloaded_image = 2;
    2988:	4b28      	ldr	r3, [pc, #160]	; (2a2c <main+0xe0>)
    298a:	2202      	movs	r2, #2
    298c:	715a      	strb	r2, [r3, #5]

	void (*app_code_entry)(void);
	while(1)
	{
		uint16_t n=0; uint8_t remain_in_boot = 0;
    298e:	230e      	movs	r3, #14
    2990:	18fb      	adds	r3, r7, r3
    2992:	2200      	movs	r2, #0
    2994:	801a      	strh	r2, [r3, #0]
    2996:	230d      	movs	r3, #13
    2998:	18fb      	adds	r3, r7, r3
    299a:	2200      	movs	r2, #0
    299c:	701a      	strb	r2, [r3, #0]
		//check if button is pressed to lock in boot
		while(n++ < 1000)
    299e:	e00e      	b.n	29be <main+0x72>
		{
			if(!port_pin_get_input_level(BOOT_PIN)) 
    29a0:	2004      	movs	r0, #4
    29a2:	4b23      	ldr	r3, [pc, #140]	; (2a30 <main+0xe4>)
    29a4:	4798      	blx	r3
    29a6:	0003      	movs	r3, r0
    29a8:	001a      	movs	r2, r3
    29aa:	2301      	movs	r3, #1
    29ac:	4053      	eors	r3, r2
    29ae:	b2db      	uxtb	r3, r3
    29b0:	2b00      	cmp	r3, #0
    29b2:	d004      	beq.n	29be <main+0x72>
			{
				remain_in_boot =1;
    29b4:	230d      	movs	r3, #13
    29b6:	18fb      	adds	r3, r7, r3
    29b8:	2201      	movs	r2, #1
    29ba:	701a      	strb	r2, [r3, #0]
				break;
    29bc:	e009      	b.n	29d2 <main+0x86>
	void (*app_code_entry)(void);
	while(1)
	{
		uint16_t n=0; uint8_t remain_in_boot = 0;
		//check if button is pressed to lock in boot
		while(n++ < 1000)
    29be:	230e      	movs	r3, #14
    29c0:	18fb      	adds	r3, r7, r3
    29c2:	881b      	ldrh	r3, [r3, #0]
    29c4:	220e      	movs	r2, #14
    29c6:	18ba      	adds	r2, r7, r2
    29c8:	1c59      	adds	r1, r3, #1
    29ca:	8011      	strh	r1, [r2, #0]
    29cc:	4a19      	ldr	r2, [pc, #100]	; (2a34 <main+0xe8>)
    29ce:	4293      	cmp	r3, r2
    29d0:	d9e6      	bls.n	29a0 <main+0x54>
				remain_in_boot =1;
				break;
			}
		}
		
		if(!remain_in_boot)
    29d2:	230d      	movs	r3, #13
    29d4:	18fb      	adds	r3, r7, r3
    29d6:	781b      	ldrb	r3, [r3, #0]
    29d8:	2b00      	cmp	r3, #0
    29da:	d1d8      	bne.n	298e <main+0x42>
		{
			// check for firmware download requested
			if(FM_Status.writenew_image)
    29dc:	4b13      	ldr	r3, [pc, #76]	; (2a2c <main+0xe0>)
    29de:	799b      	ldrb	r3, [r3, #6]
    29e0:	2201      	movs	r2, #1
    29e2:	4013      	ands	r3, r2
    29e4:	b2db      	uxtb	r3, r3
    29e6:	2b00      	cmp	r3, #0
    29e8:	d001      	beq.n	29ee <main+0xa2>
			{
				download_firmware();
    29ea:	4b13      	ldr	r3, [pc, #76]	; (2a38 <main+0xec>)
    29ec:	4798      	blx	r3
			}
			// vector table rebasing
			SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    29ee:	4b13      	ldr	r3, [pc, #76]	; (2a3c <main+0xf0>)
    29f0:	2280      	movs	r2, #128	; 0x80
    29f2:	01d2      	lsls	r2, r2, #7
    29f4:	609a      	str	r2, [r3, #8]

			// jump to reset handler
			app_code_entry =  (void(*)(void))(*(unsigned int*)(APP_START_ADDRESS+4));
    29f6:	4b12      	ldr	r3, [pc, #72]	; (2a40 <main+0xf4>)
    29f8:	681b      	ldr	r3, [r3, #0]
    29fa:	60bb      	str	r3, [r7, #8]
			// jump
			printf("starting app\n");
    29fc:	4b11      	ldr	r3, [pc, #68]	; (2a44 <main+0xf8>)
    29fe:	0018      	movs	r0, r3
    2a00:	4b09      	ldr	r3, [pc, #36]	; (2a28 <main+0xdc>)
    2a02:	4798      	blx	r3
			app_code_entry();
    2a04:	68bb      	ldr	r3, [r7, #8]
    2a06:	4798      	blx	r3
		}

	}
    2a08:	e7c1      	b.n	298e <main+0x42>
    2a0a:	46c0      	nop			; (mov r8, r8)
    2a0c:	000022ad 	.word	0x000022ad
    2a10:	00002625 	.word	0x00002625
    2a14:	00000121 	.word	0x00000121
    2a18:	000028cd 	.word	0x000028cd
    2a1c:	000025bd 	.word	0x000025bd
    2a20:	00000235 	.word	0x00000235
    2a24:	00003760 	.word	0x00003760
    2a28:	00002ced 	.word	0x00002ced
    2a2c:	00003800 	.word	0x00003800
    2a30:	000025e1 	.word	0x000025e1
    2a34:	000003e7 	.word	0x000003e7
    2a38:	00002941 	.word	0x00002941
    2a3c:	e000ed00 	.word	0xe000ed00
    2a40:	00004004 	.word	0x00004004
    2a44:	0000376c 	.word	0x0000376c

00002a48 <__aeabi_uidiv>:
    2a48:	2200      	movs	r2, #0
    2a4a:	0843      	lsrs	r3, r0, #1
    2a4c:	428b      	cmp	r3, r1
    2a4e:	d374      	bcc.n	2b3a <__aeabi_uidiv+0xf2>
    2a50:	0903      	lsrs	r3, r0, #4
    2a52:	428b      	cmp	r3, r1
    2a54:	d35f      	bcc.n	2b16 <__aeabi_uidiv+0xce>
    2a56:	0a03      	lsrs	r3, r0, #8
    2a58:	428b      	cmp	r3, r1
    2a5a:	d344      	bcc.n	2ae6 <__aeabi_uidiv+0x9e>
    2a5c:	0b03      	lsrs	r3, r0, #12
    2a5e:	428b      	cmp	r3, r1
    2a60:	d328      	bcc.n	2ab4 <__aeabi_uidiv+0x6c>
    2a62:	0c03      	lsrs	r3, r0, #16
    2a64:	428b      	cmp	r3, r1
    2a66:	d30d      	bcc.n	2a84 <__aeabi_uidiv+0x3c>
    2a68:	22ff      	movs	r2, #255	; 0xff
    2a6a:	0209      	lsls	r1, r1, #8
    2a6c:	ba12      	rev	r2, r2
    2a6e:	0c03      	lsrs	r3, r0, #16
    2a70:	428b      	cmp	r3, r1
    2a72:	d302      	bcc.n	2a7a <__aeabi_uidiv+0x32>
    2a74:	1212      	asrs	r2, r2, #8
    2a76:	0209      	lsls	r1, r1, #8
    2a78:	d065      	beq.n	2b46 <__aeabi_uidiv+0xfe>
    2a7a:	0b03      	lsrs	r3, r0, #12
    2a7c:	428b      	cmp	r3, r1
    2a7e:	d319      	bcc.n	2ab4 <__aeabi_uidiv+0x6c>
    2a80:	e000      	b.n	2a84 <__aeabi_uidiv+0x3c>
    2a82:	0a09      	lsrs	r1, r1, #8
    2a84:	0bc3      	lsrs	r3, r0, #15
    2a86:	428b      	cmp	r3, r1
    2a88:	d301      	bcc.n	2a8e <__aeabi_uidiv+0x46>
    2a8a:	03cb      	lsls	r3, r1, #15
    2a8c:	1ac0      	subs	r0, r0, r3
    2a8e:	4152      	adcs	r2, r2
    2a90:	0b83      	lsrs	r3, r0, #14
    2a92:	428b      	cmp	r3, r1
    2a94:	d301      	bcc.n	2a9a <__aeabi_uidiv+0x52>
    2a96:	038b      	lsls	r3, r1, #14
    2a98:	1ac0      	subs	r0, r0, r3
    2a9a:	4152      	adcs	r2, r2
    2a9c:	0b43      	lsrs	r3, r0, #13
    2a9e:	428b      	cmp	r3, r1
    2aa0:	d301      	bcc.n	2aa6 <__aeabi_uidiv+0x5e>
    2aa2:	034b      	lsls	r3, r1, #13
    2aa4:	1ac0      	subs	r0, r0, r3
    2aa6:	4152      	adcs	r2, r2
    2aa8:	0b03      	lsrs	r3, r0, #12
    2aaa:	428b      	cmp	r3, r1
    2aac:	d301      	bcc.n	2ab2 <__aeabi_uidiv+0x6a>
    2aae:	030b      	lsls	r3, r1, #12
    2ab0:	1ac0      	subs	r0, r0, r3
    2ab2:	4152      	adcs	r2, r2
    2ab4:	0ac3      	lsrs	r3, r0, #11
    2ab6:	428b      	cmp	r3, r1
    2ab8:	d301      	bcc.n	2abe <__aeabi_uidiv+0x76>
    2aba:	02cb      	lsls	r3, r1, #11
    2abc:	1ac0      	subs	r0, r0, r3
    2abe:	4152      	adcs	r2, r2
    2ac0:	0a83      	lsrs	r3, r0, #10
    2ac2:	428b      	cmp	r3, r1
    2ac4:	d301      	bcc.n	2aca <__aeabi_uidiv+0x82>
    2ac6:	028b      	lsls	r3, r1, #10
    2ac8:	1ac0      	subs	r0, r0, r3
    2aca:	4152      	adcs	r2, r2
    2acc:	0a43      	lsrs	r3, r0, #9
    2ace:	428b      	cmp	r3, r1
    2ad0:	d301      	bcc.n	2ad6 <__aeabi_uidiv+0x8e>
    2ad2:	024b      	lsls	r3, r1, #9
    2ad4:	1ac0      	subs	r0, r0, r3
    2ad6:	4152      	adcs	r2, r2
    2ad8:	0a03      	lsrs	r3, r0, #8
    2ada:	428b      	cmp	r3, r1
    2adc:	d301      	bcc.n	2ae2 <__aeabi_uidiv+0x9a>
    2ade:	020b      	lsls	r3, r1, #8
    2ae0:	1ac0      	subs	r0, r0, r3
    2ae2:	4152      	adcs	r2, r2
    2ae4:	d2cd      	bcs.n	2a82 <__aeabi_uidiv+0x3a>
    2ae6:	09c3      	lsrs	r3, r0, #7
    2ae8:	428b      	cmp	r3, r1
    2aea:	d301      	bcc.n	2af0 <__aeabi_uidiv+0xa8>
    2aec:	01cb      	lsls	r3, r1, #7
    2aee:	1ac0      	subs	r0, r0, r3
    2af0:	4152      	adcs	r2, r2
    2af2:	0983      	lsrs	r3, r0, #6
    2af4:	428b      	cmp	r3, r1
    2af6:	d301      	bcc.n	2afc <__aeabi_uidiv+0xb4>
    2af8:	018b      	lsls	r3, r1, #6
    2afa:	1ac0      	subs	r0, r0, r3
    2afc:	4152      	adcs	r2, r2
    2afe:	0943      	lsrs	r3, r0, #5
    2b00:	428b      	cmp	r3, r1
    2b02:	d301      	bcc.n	2b08 <__aeabi_uidiv+0xc0>
    2b04:	014b      	lsls	r3, r1, #5
    2b06:	1ac0      	subs	r0, r0, r3
    2b08:	4152      	adcs	r2, r2
    2b0a:	0903      	lsrs	r3, r0, #4
    2b0c:	428b      	cmp	r3, r1
    2b0e:	d301      	bcc.n	2b14 <__aeabi_uidiv+0xcc>
    2b10:	010b      	lsls	r3, r1, #4
    2b12:	1ac0      	subs	r0, r0, r3
    2b14:	4152      	adcs	r2, r2
    2b16:	08c3      	lsrs	r3, r0, #3
    2b18:	428b      	cmp	r3, r1
    2b1a:	d301      	bcc.n	2b20 <__aeabi_uidiv+0xd8>
    2b1c:	00cb      	lsls	r3, r1, #3
    2b1e:	1ac0      	subs	r0, r0, r3
    2b20:	4152      	adcs	r2, r2
    2b22:	0883      	lsrs	r3, r0, #2
    2b24:	428b      	cmp	r3, r1
    2b26:	d301      	bcc.n	2b2c <__aeabi_uidiv+0xe4>
    2b28:	008b      	lsls	r3, r1, #2
    2b2a:	1ac0      	subs	r0, r0, r3
    2b2c:	4152      	adcs	r2, r2
    2b2e:	0843      	lsrs	r3, r0, #1
    2b30:	428b      	cmp	r3, r1
    2b32:	d301      	bcc.n	2b38 <__aeabi_uidiv+0xf0>
    2b34:	004b      	lsls	r3, r1, #1
    2b36:	1ac0      	subs	r0, r0, r3
    2b38:	4152      	adcs	r2, r2
    2b3a:	1a41      	subs	r1, r0, r1
    2b3c:	d200      	bcs.n	2b40 <__aeabi_uidiv+0xf8>
    2b3e:	4601      	mov	r1, r0
    2b40:	4152      	adcs	r2, r2
    2b42:	4610      	mov	r0, r2
    2b44:	4770      	bx	lr
    2b46:	e7ff      	b.n	2b48 <__aeabi_uidiv+0x100>
    2b48:	b501      	push	{r0, lr}
    2b4a:	2000      	movs	r0, #0
    2b4c:	f000 f806 	bl	2b5c <__aeabi_idiv0>
    2b50:	bd02      	pop	{r1, pc}
    2b52:	46c0      	nop			; (mov r8, r8)

00002b54 <__aeabi_uidivmod>:
    2b54:	2900      	cmp	r1, #0
    2b56:	d0f7      	beq.n	2b48 <__aeabi_uidiv+0x100>
    2b58:	e776      	b.n	2a48 <__aeabi_uidiv>
    2b5a:	4770      	bx	lr

00002b5c <__aeabi_idiv0>:
    2b5c:	4770      	bx	lr
    2b5e:	46c0      	nop			; (mov r8, r8)

00002b60 <__aeabi_lmul>:
    2b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b62:	464f      	mov	r7, r9
    2b64:	4646      	mov	r6, r8
    2b66:	b4c0      	push	{r6, r7}
    2b68:	0416      	lsls	r6, r2, #16
    2b6a:	0c36      	lsrs	r6, r6, #16
    2b6c:	4699      	mov	r9, r3
    2b6e:	0033      	movs	r3, r6
    2b70:	0405      	lsls	r5, r0, #16
    2b72:	0c2c      	lsrs	r4, r5, #16
    2b74:	0c07      	lsrs	r7, r0, #16
    2b76:	0c15      	lsrs	r5, r2, #16
    2b78:	4363      	muls	r3, r4
    2b7a:	437e      	muls	r6, r7
    2b7c:	436f      	muls	r7, r5
    2b7e:	4365      	muls	r5, r4
    2b80:	0c1c      	lsrs	r4, r3, #16
    2b82:	19ad      	adds	r5, r5, r6
    2b84:	1964      	adds	r4, r4, r5
    2b86:	469c      	mov	ip, r3
    2b88:	42a6      	cmp	r6, r4
    2b8a:	d903      	bls.n	2b94 <__aeabi_lmul+0x34>
    2b8c:	2380      	movs	r3, #128	; 0x80
    2b8e:	025b      	lsls	r3, r3, #9
    2b90:	4698      	mov	r8, r3
    2b92:	4447      	add	r7, r8
    2b94:	4663      	mov	r3, ip
    2b96:	0c25      	lsrs	r5, r4, #16
    2b98:	19ef      	adds	r7, r5, r7
    2b9a:	041d      	lsls	r5, r3, #16
    2b9c:	464b      	mov	r3, r9
    2b9e:	434a      	muls	r2, r1
    2ba0:	4343      	muls	r3, r0
    2ba2:	0c2d      	lsrs	r5, r5, #16
    2ba4:	0424      	lsls	r4, r4, #16
    2ba6:	1964      	adds	r4, r4, r5
    2ba8:	1899      	adds	r1, r3, r2
    2baa:	19c9      	adds	r1, r1, r7
    2bac:	0020      	movs	r0, r4
    2bae:	bc0c      	pop	{r2, r3}
    2bb0:	4690      	mov	r8, r2
    2bb2:	4699      	mov	r9, r3
    2bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bb6:	46c0      	nop			; (mov r8, r8)

00002bb8 <__libc_init_array>:
    2bb8:	4b0e      	ldr	r3, [pc, #56]	; (2bf4 <__libc_init_array+0x3c>)
    2bba:	b570      	push	{r4, r5, r6, lr}
    2bbc:	2500      	movs	r5, #0
    2bbe:	001e      	movs	r6, r3
    2bc0:	4c0d      	ldr	r4, [pc, #52]	; (2bf8 <__libc_init_array+0x40>)
    2bc2:	1ae4      	subs	r4, r4, r3
    2bc4:	10a4      	asrs	r4, r4, #2
    2bc6:	42a5      	cmp	r5, r4
    2bc8:	d004      	beq.n	2bd4 <__libc_init_array+0x1c>
    2bca:	00ab      	lsls	r3, r5, #2
    2bcc:	58f3      	ldr	r3, [r6, r3]
    2bce:	4798      	blx	r3
    2bd0:	3501      	adds	r5, #1
    2bd2:	e7f8      	b.n	2bc6 <__libc_init_array+0xe>
    2bd4:	f000 fe04 	bl	37e0 <_init>
    2bd8:	4b08      	ldr	r3, [pc, #32]	; (2bfc <__libc_init_array+0x44>)
    2bda:	2500      	movs	r5, #0
    2bdc:	001e      	movs	r6, r3
    2bde:	4c08      	ldr	r4, [pc, #32]	; (2c00 <__libc_init_array+0x48>)
    2be0:	1ae4      	subs	r4, r4, r3
    2be2:	10a4      	asrs	r4, r4, #2
    2be4:	42a5      	cmp	r5, r4
    2be6:	d004      	beq.n	2bf2 <__libc_init_array+0x3a>
    2be8:	00ab      	lsls	r3, r5, #2
    2bea:	58f3      	ldr	r3, [r6, r3]
    2bec:	4798      	blx	r3
    2bee:	3501      	adds	r5, #1
    2bf0:	e7f8      	b.n	2be4 <__libc_init_array+0x2c>
    2bf2:	bd70      	pop	{r4, r5, r6, pc}
    2bf4:	000037ec 	.word	0x000037ec
    2bf8:	000037ec 	.word	0x000037ec
    2bfc:	000037ec 	.word	0x000037ec
    2c00:	000037f0 	.word	0x000037f0

00002c04 <memcpy>:
    2c04:	2300      	movs	r3, #0
    2c06:	b510      	push	{r4, lr}
    2c08:	429a      	cmp	r2, r3
    2c0a:	d003      	beq.n	2c14 <memcpy+0x10>
    2c0c:	5ccc      	ldrb	r4, [r1, r3]
    2c0e:	54c4      	strb	r4, [r0, r3]
    2c10:	3301      	adds	r3, #1
    2c12:	e7f9      	b.n	2c08 <memcpy+0x4>
    2c14:	bd10      	pop	{r4, pc}

00002c16 <memset>:
    2c16:	0003      	movs	r3, r0
    2c18:	1882      	adds	r2, r0, r2
    2c1a:	4293      	cmp	r3, r2
    2c1c:	d002      	beq.n	2c24 <memset+0xe>
    2c1e:	7019      	strb	r1, [r3, #0]
    2c20:	3301      	adds	r3, #1
    2c22:	e7fa      	b.n	2c1a <memset+0x4>
    2c24:	4770      	bx	lr
	...

00002c28 <_puts_r>:
    2c28:	b570      	push	{r4, r5, r6, lr}
    2c2a:	0005      	movs	r5, r0
    2c2c:	000e      	movs	r6, r1
    2c2e:	2800      	cmp	r0, #0
    2c30:	d004      	beq.n	2c3c <_puts_r+0x14>
    2c32:	6983      	ldr	r3, [r0, #24]
    2c34:	2b00      	cmp	r3, #0
    2c36:	d101      	bne.n	2c3c <_puts_r+0x14>
    2c38:	f000 fade 	bl	31f8 <__sinit>
    2c3c:	69ab      	ldr	r3, [r5, #24]
    2c3e:	68ac      	ldr	r4, [r5, #8]
    2c40:	2b00      	cmp	r3, #0
    2c42:	d102      	bne.n	2c4a <_puts_r+0x22>
    2c44:	0028      	movs	r0, r5
    2c46:	f000 fad7 	bl	31f8 <__sinit>
    2c4a:	4b25      	ldr	r3, [pc, #148]	; (2ce0 <_puts_r+0xb8>)
    2c4c:	429c      	cmp	r4, r3
    2c4e:	d101      	bne.n	2c54 <_puts_r+0x2c>
    2c50:	686c      	ldr	r4, [r5, #4]
    2c52:	e008      	b.n	2c66 <_puts_r+0x3e>
    2c54:	4b23      	ldr	r3, [pc, #140]	; (2ce4 <_puts_r+0xbc>)
    2c56:	429c      	cmp	r4, r3
    2c58:	d101      	bne.n	2c5e <_puts_r+0x36>
    2c5a:	68ac      	ldr	r4, [r5, #8]
    2c5c:	e003      	b.n	2c66 <_puts_r+0x3e>
    2c5e:	4b22      	ldr	r3, [pc, #136]	; (2ce8 <_puts_r+0xc0>)
    2c60:	429c      	cmp	r4, r3
    2c62:	d100      	bne.n	2c66 <_puts_r+0x3e>
    2c64:	68ec      	ldr	r4, [r5, #12]
    2c66:	89a3      	ldrh	r3, [r4, #12]
    2c68:	071b      	lsls	r3, r3, #28
    2c6a:	d502      	bpl.n	2c72 <_puts_r+0x4a>
    2c6c:	6923      	ldr	r3, [r4, #16]
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d111      	bne.n	2c96 <_puts_r+0x6e>
    2c72:	0021      	movs	r1, r4
    2c74:	0028      	movs	r0, r5
    2c76:	f000 f955 	bl	2f24 <__swsetup_r>
    2c7a:	2800      	cmp	r0, #0
    2c7c:	d00b      	beq.n	2c96 <_puts_r+0x6e>
    2c7e:	2001      	movs	r0, #1
    2c80:	4240      	negs	r0, r0
    2c82:	e02b      	b.n	2cdc <_puts_r+0xb4>
    2c84:	3b01      	subs	r3, #1
    2c86:	3601      	adds	r6, #1
    2c88:	60a3      	str	r3, [r4, #8]
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	db08      	blt.n	2ca0 <_puts_r+0x78>
    2c8e:	6823      	ldr	r3, [r4, #0]
    2c90:	1c5a      	adds	r2, r3, #1
    2c92:	6022      	str	r2, [r4, #0]
    2c94:	7019      	strb	r1, [r3, #0]
    2c96:	7831      	ldrb	r1, [r6, #0]
    2c98:	68a3      	ldr	r3, [r4, #8]
    2c9a:	2900      	cmp	r1, #0
    2c9c:	d1f2      	bne.n	2c84 <_puts_r+0x5c>
    2c9e:	e00b      	b.n	2cb8 <_puts_r+0x90>
    2ca0:	69a2      	ldr	r2, [r4, #24]
    2ca2:	4293      	cmp	r3, r2
    2ca4:	db01      	blt.n	2caa <_puts_r+0x82>
    2ca6:	290a      	cmp	r1, #10
    2ca8:	d1f1      	bne.n	2c8e <_puts_r+0x66>
    2caa:	0022      	movs	r2, r4
    2cac:	0028      	movs	r0, r5
    2cae:	f000 f8e1 	bl	2e74 <__swbuf_r>
    2cb2:	1c43      	adds	r3, r0, #1
    2cb4:	d1ef      	bne.n	2c96 <_puts_r+0x6e>
    2cb6:	e7e2      	b.n	2c7e <_puts_r+0x56>
    2cb8:	3b01      	subs	r3, #1
    2cba:	60a3      	str	r3, [r4, #8]
    2cbc:	2b00      	cmp	r3, #0
    2cbe:	da08      	bge.n	2cd2 <_puts_r+0xaa>
    2cc0:	0022      	movs	r2, r4
    2cc2:	310a      	adds	r1, #10
    2cc4:	0028      	movs	r0, r5
    2cc6:	f000 f8d5 	bl	2e74 <__swbuf_r>
    2cca:	1c43      	adds	r3, r0, #1
    2ccc:	d0d7      	beq.n	2c7e <_puts_r+0x56>
    2cce:	200a      	movs	r0, #10
    2cd0:	e004      	b.n	2cdc <_puts_r+0xb4>
    2cd2:	200a      	movs	r0, #10
    2cd4:	6823      	ldr	r3, [r4, #0]
    2cd6:	1c5a      	adds	r2, r3, #1
    2cd8:	6022      	str	r2, [r4, #0]
    2cda:	7018      	strb	r0, [r3, #0]
    2cdc:	bd70      	pop	{r4, r5, r6, pc}
    2cde:	46c0      	nop			; (mov r8, r8)
    2ce0:	00003780 	.word	0x00003780
    2ce4:	000037a0 	.word	0x000037a0
    2ce8:	000037c0 	.word	0x000037c0

00002cec <puts>:
    2cec:	b510      	push	{r4, lr}
    2cee:	4b03      	ldr	r3, [pc, #12]	; (2cfc <puts+0x10>)
    2cf0:	0001      	movs	r1, r0
    2cf2:	6818      	ldr	r0, [r3, #0]
    2cf4:	f7ff ff98 	bl	2c28 <_puts_r>
    2cf8:	bd10      	pop	{r4, pc}
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	2000006c 	.word	0x2000006c

00002d00 <setbuf>:
    2d00:	424a      	negs	r2, r1
    2d02:	414a      	adcs	r2, r1
    2d04:	2380      	movs	r3, #128	; 0x80
    2d06:	b510      	push	{r4, lr}
    2d08:	0052      	lsls	r2, r2, #1
    2d0a:	00db      	lsls	r3, r3, #3
    2d0c:	f000 f802 	bl	2d14 <setvbuf>
    2d10:	bd10      	pop	{r4, pc}
	...

00002d14 <setvbuf>:
    2d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d16:	001d      	movs	r5, r3
    2d18:	4b51      	ldr	r3, [pc, #324]	; (2e60 <setvbuf+0x14c>)
    2d1a:	b085      	sub	sp, #20
    2d1c:	681e      	ldr	r6, [r3, #0]
    2d1e:	0004      	movs	r4, r0
    2d20:	000f      	movs	r7, r1
    2d22:	9200      	str	r2, [sp, #0]
    2d24:	2e00      	cmp	r6, #0
    2d26:	d005      	beq.n	2d34 <setvbuf+0x20>
    2d28:	69b3      	ldr	r3, [r6, #24]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d102      	bne.n	2d34 <setvbuf+0x20>
    2d2e:	0030      	movs	r0, r6
    2d30:	f000 fa62 	bl	31f8 <__sinit>
    2d34:	4b4b      	ldr	r3, [pc, #300]	; (2e64 <setvbuf+0x150>)
    2d36:	429c      	cmp	r4, r3
    2d38:	d101      	bne.n	2d3e <setvbuf+0x2a>
    2d3a:	6874      	ldr	r4, [r6, #4]
    2d3c:	e008      	b.n	2d50 <setvbuf+0x3c>
    2d3e:	4b4a      	ldr	r3, [pc, #296]	; (2e68 <setvbuf+0x154>)
    2d40:	429c      	cmp	r4, r3
    2d42:	d101      	bne.n	2d48 <setvbuf+0x34>
    2d44:	68b4      	ldr	r4, [r6, #8]
    2d46:	e003      	b.n	2d50 <setvbuf+0x3c>
    2d48:	4b48      	ldr	r3, [pc, #288]	; (2e6c <setvbuf+0x158>)
    2d4a:	429c      	cmp	r4, r3
    2d4c:	d100      	bne.n	2d50 <setvbuf+0x3c>
    2d4e:	68f4      	ldr	r4, [r6, #12]
    2d50:	9b00      	ldr	r3, [sp, #0]
    2d52:	2b02      	cmp	r3, #2
    2d54:	d005      	beq.n	2d62 <setvbuf+0x4e>
    2d56:	2b01      	cmp	r3, #1
    2d58:	d900      	bls.n	2d5c <setvbuf+0x48>
    2d5a:	e07c      	b.n	2e56 <setvbuf+0x142>
    2d5c:	2d00      	cmp	r5, #0
    2d5e:	da00      	bge.n	2d62 <setvbuf+0x4e>
    2d60:	e079      	b.n	2e56 <setvbuf+0x142>
    2d62:	0021      	movs	r1, r4
    2d64:	0030      	movs	r0, r6
    2d66:	f000 f9d9 	bl	311c <_fflush_r>
    2d6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2d6c:	2900      	cmp	r1, #0
    2d6e:	d008      	beq.n	2d82 <setvbuf+0x6e>
    2d70:	0023      	movs	r3, r4
    2d72:	3344      	adds	r3, #68	; 0x44
    2d74:	4299      	cmp	r1, r3
    2d76:	d002      	beq.n	2d7e <setvbuf+0x6a>
    2d78:	0030      	movs	r0, r6
    2d7a:	f000 fb3f 	bl	33fc <_free_r>
    2d7e:	2300      	movs	r3, #0
    2d80:	6363      	str	r3, [r4, #52]	; 0x34
    2d82:	2300      	movs	r3, #0
    2d84:	61a3      	str	r3, [r4, #24]
    2d86:	6063      	str	r3, [r4, #4]
    2d88:	89a3      	ldrh	r3, [r4, #12]
    2d8a:	061b      	lsls	r3, r3, #24
    2d8c:	d503      	bpl.n	2d96 <setvbuf+0x82>
    2d8e:	6921      	ldr	r1, [r4, #16]
    2d90:	0030      	movs	r0, r6
    2d92:	f000 fb33 	bl	33fc <_free_r>
    2d96:	89a2      	ldrh	r2, [r4, #12]
    2d98:	4b35      	ldr	r3, [pc, #212]	; (2e70 <setvbuf+0x15c>)
    2d9a:	4013      	ands	r3, r2
    2d9c:	81a3      	strh	r3, [r4, #12]
    2d9e:	9b00      	ldr	r3, [sp, #0]
    2da0:	2b02      	cmp	r3, #2
    2da2:	d021      	beq.n	2de8 <setvbuf+0xd4>
    2da4:	ab03      	add	r3, sp, #12
    2da6:	aa02      	add	r2, sp, #8
    2da8:	0021      	movs	r1, r4
    2daa:	0030      	movs	r0, r6
    2dac:	f000 fab8 	bl	3320 <__swhatbuf_r>
    2db0:	89a3      	ldrh	r3, [r4, #12]
    2db2:	4318      	orrs	r0, r3
    2db4:	81a0      	strh	r0, [r4, #12]
    2db6:	2d00      	cmp	r5, #0
    2db8:	d101      	bne.n	2dbe <setvbuf+0xaa>
    2dba:	9d02      	ldr	r5, [sp, #8]
    2dbc:	e001      	b.n	2dc2 <setvbuf+0xae>
    2dbe:	2f00      	cmp	r7, #0
    2dc0:	d125      	bne.n	2e0e <setvbuf+0xfa>
    2dc2:	0028      	movs	r0, r5
    2dc4:	f000 fb10 	bl	33e8 <malloc>
    2dc8:	9501      	str	r5, [sp, #4]
    2dca:	1e07      	subs	r7, r0, #0
    2dcc:	d11a      	bne.n	2e04 <setvbuf+0xf0>
    2dce:	9b02      	ldr	r3, [sp, #8]
    2dd0:	9301      	str	r3, [sp, #4]
    2dd2:	42ab      	cmp	r3, r5
    2dd4:	d102      	bne.n	2ddc <setvbuf+0xc8>
    2dd6:	2001      	movs	r0, #1
    2dd8:	4240      	negs	r0, r0
    2dda:	e006      	b.n	2dea <setvbuf+0xd6>
    2ddc:	9801      	ldr	r0, [sp, #4]
    2dde:	f000 fb03 	bl	33e8 <malloc>
    2de2:	1e07      	subs	r7, r0, #0
    2de4:	d10e      	bne.n	2e04 <setvbuf+0xf0>
    2de6:	e7f6      	b.n	2dd6 <setvbuf+0xc2>
    2de8:	2000      	movs	r0, #0
    2dea:	2202      	movs	r2, #2
    2dec:	89a3      	ldrh	r3, [r4, #12]
    2dee:	4313      	orrs	r3, r2
    2df0:	81a3      	strh	r3, [r4, #12]
    2df2:	2300      	movs	r3, #0
    2df4:	60a3      	str	r3, [r4, #8]
    2df6:	0023      	movs	r3, r4
    2df8:	3347      	adds	r3, #71	; 0x47
    2dfa:	6023      	str	r3, [r4, #0]
    2dfc:	6123      	str	r3, [r4, #16]
    2dfe:	2301      	movs	r3, #1
    2e00:	6163      	str	r3, [r4, #20]
    2e02:	e02a      	b.n	2e5a <setvbuf+0x146>
    2e04:	2280      	movs	r2, #128	; 0x80
    2e06:	89a3      	ldrh	r3, [r4, #12]
    2e08:	9d01      	ldr	r5, [sp, #4]
    2e0a:	4313      	orrs	r3, r2
    2e0c:	81a3      	strh	r3, [r4, #12]
    2e0e:	69b3      	ldr	r3, [r6, #24]
    2e10:	2b00      	cmp	r3, #0
    2e12:	d102      	bne.n	2e1a <setvbuf+0x106>
    2e14:	0030      	movs	r0, r6
    2e16:	f000 f9ef 	bl	31f8 <__sinit>
    2e1a:	9b00      	ldr	r3, [sp, #0]
    2e1c:	2b01      	cmp	r3, #1
    2e1e:	d103      	bne.n	2e28 <setvbuf+0x114>
    2e20:	89a3      	ldrh	r3, [r4, #12]
    2e22:	9a00      	ldr	r2, [sp, #0]
    2e24:	431a      	orrs	r2, r3
    2e26:	81a2      	strh	r2, [r4, #12]
    2e28:	2308      	movs	r3, #8
    2e2a:	89a2      	ldrh	r2, [r4, #12]
    2e2c:	6027      	str	r7, [r4, #0]
    2e2e:	4013      	ands	r3, r2
    2e30:	6127      	str	r7, [r4, #16]
    2e32:	6165      	str	r5, [r4, #20]
    2e34:	1e18      	subs	r0, r3, #0
    2e36:	d00c      	beq.n	2e52 <setvbuf+0x13e>
    2e38:	2301      	movs	r3, #1
    2e3a:	401a      	ands	r2, r3
    2e3c:	2300      	movs	r3, #0
    2e3e:	1e10      	subs	r0, r2, #0
    2e40:	4298      	cmp	r0, r3
    2e42:	d004      	beq.n	2e4e <setvbuf+0x13a>
    2e44:	426d      	negs	r5, r5
    2e46:	60a3      	str	r3, [r4, #8]
    2e48:	61a5      	str	r5, [r4, #24]
    2e4a:	0018      	movs	r0, r3
    2e4c:	e005      	b.n	2e5a <setvbuf+0x146>
    2e4e:	60a5      	str	r5, [r4, #8]
    2e50:	e003      	b.n	2e5a <setvbuf+0x146>
    2e52:	60a3      	str	r3, [r4, #8]
    2e54:	e001      	b.n	2e5a <setvbuf+0x146>
    2e56:	2001      	movs	r0, #1
    2e58:	4240      	negs	r0, r0
    2e5a:	b005      	add	sp, #20
    2e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	2000006c 	.word	0x2000006c
    2e64:	00003780 	.word	0x00003780
    2e68:	000037a0 	.word	0x000037a0
    2e6c:	000037c0 	.word	0x000037c0
    2e70:	fffff35c 	.word	0xfffff35c

00002e74 <__swbuf_r>:
    2e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e76:	0005      	movs	r5, r0
    2e78:	000f      	movs	r7, r1
    2e7a:	0014      	movs	r4, r2
    2e7c:	2800      	cmp	r0, #0
    2e7e:	d004      	beq.n	2e8a <__swbuf_r+0x16>
    2e80:	6983      	ldr	r3, [r0, #24]
    2e82:	2b00      	cmp	r3, #0
    2e84:	d101      	bne.n	2e8a <__swbuf_r+0x16>
    2e86:	f000 f9b7 	bl	31f8 <__sinit>
    2e8a:	4b23      	ldr	r3, [pc, #140]	; (2f18 <__swbuf_r+0xa4>)
    2e8c:	429c      	cmp	r4, r3
    2e8e:	d101      	bne.n	2e94 <__swbuf_r+0x20>
    2e90:	686c      	ldr	r4, [r5, #4]
    2e92:	e008      	b.n	2ea6 <__swbuf_r+0x32>
    2e94:	4b21      	ldr	r3, [pc, #132]	; (2f1c <__swbuf_r+0xa8>)
    2e96:	429c      	cmp	r4, r3
    2e98:	d101      	bne.n	2e9e <__swbuf_r+0x2a>
    2e9a:	68ac      	ldr	r4, [r5, #8]
    2e9c:	e003      	b.n	2ea6 <__swbuf_r+0x32>
    2e9e:	4b20      	ldr	r3, [pc, #128]	; (2f20 <__swbuf_r+0xac>)
    2ea0:	429c      	cmp	r4, r3
    2ea2:	d100      	bne.n	2ea6 <__swbuf_r+0x32>
    2ea4:	68ec      	ldr	r4, [r5, #12]
    2ea6:	69a3      	ldr	r3, [r4, #24]
    2ea8:	60a3      	str	r3, [r4, #8]
    2eaa:	89a3      	ldrh	r3, [r4, #12]
    2eac:	071b      	lsls	r3, r3, #28
    2eae:	d50a      	bpl.n	2ec6 <__swbuf_r+0x52>
    2eb0:	6923      	ldr	r3, [r4, #16]
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	d007      	beq.n	2ec6 <__swbuf_r+0x52>
    2eb6:	6823      	ldr	r3, [r4, #0]
    2eb8:	6922      	ldr	r2, [r4, #16]
    2eba:	b2fe      	uxtb	r6, r7
    2ebc:	1a98      	subs	r0, r3, r2
    2ebe:	6963      	ldr	r3, [r4, #20]
    2ec0:	4298      	cmp	r0, r3
    2ec2:	db0f      	blt.n	2ee4 <__swbuf_r+0x70>
    2ec4:	e008      	b.n	2ed8 <__swbuf_r+0x64>
    2ec6:	0021      	movs	r1, r4
    2ec8:	0028      	movs	r0, r5
    2eca:	f000 f82b 	bl	2f24 <__swsetup_r>
    2ece:	2800      	cmp	r0, #0
    2ed0:	d0f1      	beq.n	2eb6 <__swbuf_r+0x42>
    2ed2:	2001      	movs	r0, #1
    2ed4:	4240      	negs	r0, r0
    2ed6:	e01d      	b.n	2f14 <__swbuf_r+0xa0>
    2ed8:	0021      	movs	r1, r4
    2eda:	0028      	movs	r0, r5
    2edc:	f000 f91e 	bl	311c <_fflush_r>
    2ee0:	2800      	cmp	r0, #0
    2ee2:	d1f6      	bne.n	2ed2 <__swbuf_r+0x5e>
    2ee4:	68a3      	ldr	r3, [r4, #8]
    2ee6:	3001      	adds	r0, #1
    2ee8:	3b01      	subs	r3, #1
    2eea:	60a3      	str	r3, [r4, #8]
    2eec:	6823      	ldr	r3, [r4, #0]
    2eee:	1c5a      	adds	r2, r3, #1
    2ef0:	6022      	str	r2, [r4, #0]
    2ef2:	701f      	strb	r7, [r3, #0]
    2ef4:	6963      	ldr	r3, [r4, #20]
    2ef6:	4298      	cmp	r0, r3
    2ef8:	d005      	beq.n	2f06 <__swbuf_r+0x92>
    2efa:	89a3      	ldrh	r3, [r4, #12]
    2efc:	0030      	movs	r0, r6
    2efe:	07db      	lsls	r3, r3, #31
    2f00:	d508      	bpl.n	2f14 <__swbuf_r+0xa0>
    2f02:	2e0a      	cmp	r6, #10
    2f04:	d106      	bne.n	2f14 <__swbuf_r+0xa0>
    2f06:	0021      	movs	r1, r4
    2f08:	0028      	movs	r0, r5
    2f0a:	f000 f907 	bl	311c <_fflush_r>
    2f0e:	2800      	cmp	r0, #0
    2f10:	d1df      	bne.n	2ed2 <__swbuf_r+0x5e>
    2f12:	0030      	movs	r0, r6
    2f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f16:	46c0      	nop			; (mov r8, r8)
    2f18:	00003780 	.word	0x00003780
    2f1c:	000037a0 	.word	0x000037a0
    2f20:	000037c0 	.word	0x000037c0

00002f24 <__swsetup_r>:
    2f24:	4b36      	ldr	r3, [pc, #216]	; (3000 <__swsetup_r+0xdc>)
    2f26:	b570      	push	{r4, r5, r6, lr}
    2f28:	681d      	ldr	r5, [r3, #0]
    2f2a:	0006      	movs	r6, r0
    2f2c:	000c      	movs	r4, r1
    2f2e:	2d00      	cmp	r5, #0
    2f30:	d005      	beq.n	2f3e <__swsetup_r+0x1a>
    2f32:	69ab      	ldr	r3, [r5, #24]
    2f34:	2b00      	cmp	r3, #0
    2f36:	d102      	bne.n	2f3e <__swsetup_r+0x1a>
    2f38:	0028      	movs	r0, r5
    2f3a:	f000 f95d 	bl	31f8 <__sinit>
    2f3e:	4b31      	ldr	r3, [pc, #196]	; (3004 <__swsetup_r+0xe0>)
    2f40:	429c      	cmp	r4, r3
    2f42:	d101      	bne.n	2f48 <__swsetup_r+0x24>
    2f44:	686c      	ldr	r4, [r5, #4]
    2f46:	e008      	b.n	2f5a <__swsetup_r+0x36>
    2f48:	4b2f      	ldr	r3, [pc, #188]	; (3008 <__swsetup_r+0xe4>)
    2f4a:	429c      	cmp	r4, r3
    2f4c:	d101      	bne.n	2f52 <__swsetup_r+0x2e>
    2f4e:	68ac      	ldr	r4, [r5, #8]
    2f50:	e003      	b.n	2f5a <__swsetup_r+0x36>
    2f52:	4b2e      	ldr	r3, [pc, #184]	; (300c <__swsetup_r+0xe8>)
    2f54:	429c      	cmp	r4, r3
    2f56:	d100      	bne.n	2f5a <__swsetup_r+0x36>
    2f58:	68ec      	ldr	r4, [r5, #12]
    2f5a:	220c      	movs	r2, #12
    2f5c:	5ea3      	ldrsh	r3, [r4, r2]
    2f5e:	b29a      	uxth	r2, r3
    2f60:	0711      	lsls	r1, r2, #28
    2f62:	d423      	bmi.n	2fac <__swsetup_r+0x88>
    2f64:	06d1      	lsls	r1, r2, #27
    2f66:	d407      	bmi.n	2f78 <__swsetup_r+0x54>
    2f68:	2209      	movs	r2, #9
    2f6a:	2001      	movs	r0, #1
    2f6c:	6032      	str	r2, [r6, #0]
    2f6e:	3237      	adds	r2, #55	; 0x37
    2f70:	4313      	orrs	r3, r2
    2f72:	81a3      	strh	r3, [r4, #12]
    2f74:	4240      	negs	r0, r0
    2f76:	e042      	b.n	2ffe <__swsetup_r+0xda>
    2f78:	0753      	lsls	r3, r2, #29
    2f7a:	d513      	bpl.n	2fa4 <__swsetup_r+0x80>
    2f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2f7e:	2900      	cmp	r1, #0
    2f80:	d008      	beq.n	2f94 <__swsetup_r+0x70>
    2f82:	0023      	movs	r3, r4
    2f84:	3344      	adds	r3, #68	; 0x44
    2f86:	4299      	cmp	r1, r3
    2f88:	d002      	beq.n	2f90 <__swsetup_r+0x6c>
    2f8a:	0030      	movs	r0, r6
    2f8c:	f000 fa36 	bl	33fc <_free_r>
    2f90:	2300      	movs	r3, #0
    2f92:	6363      	str	r3, [r4, #52]	; 0x34
    2f94:	2224      	movs	r2, #36	; 0x24
    2f96:	89a3      	ldrh	r3, [r4, #12]
    2f98:	4393      	bics	r3, r2
    2f9a:	81a3      	strh	r3, [r4, #12]
    2f9c:	2300      	movs	r3, #0
    2f9e:	6063      	str	r3, [r4, #4]
    2fa0:	6923      	ldr	r3, [r4, #16]
    2fa2:	6023      	str	r3, [r4, #0]
    2fa4:	2208      	movs	r2, #8
    2fa6:	89a3      	ldrh	r3, [r4, #12]
    2fa8:	4313      	orrs	r3, r2
    2faa:	81a3      	strh	r3, [r4, #12]
    2fac:	6923      	ldr	r3, [r4, #16]
    2fae:	2b00      	cmp	r3, #0
    2fb0:	d10b      	bne.n	2fca <__swsetup_r+0xa6>
    2fb2:	23a0      	movs	r3, #160	; 0xa0
    2fb4:	89a2      	ldrh	r2, [r4, #12]
    2fb6:	009b      	lsls	r3, r3, #2
    2fb8:	4013      	ands	r3, r2
    2fba:	2280      	movs	r2, #128	; 0x80
    2fbc:	0092      	lsls	r2, r2, #2
    2fbe:	4293      	cmp	r3, r2
    2fc0:	d003      	beq.n	2fca <__swsetup_r+0xa6>
    2fc2:	0021      	movs	r1, r4
    2fc4:	0030      	movs	r0, r6
    2fc6:	f000 f9d1 	bl	336c <__smakebuf_r>
    2fca:	2301      	movs	r3, #1
    2fcc:	89a2      	ldrh	r2, [r4, #12]
    2fce:	4013      	ands	r3, r2
    2fd0:	d005      	beq.n	2fde <__swsetup_r+0xba>
    2fd2:	2300      	movs	r3, #0
    2fd4:	60a3      	str	r3, [r4, #8]
    2fd6:	6963      	ldr	r3, [r4, #20]
    2fd8:	425b      	negs	r3, r3
    2fda:	61a3      	str	r3, [r4, #24]
    2fdc:	e003      	b.n	2fe6 <__swsetup_r+0xc2>
    2fde:	0792      	lsls	r2, r2, #30
    2fe0:	d400      	bmi.n	2fe4 <__swsetup_r+0xc0>
    2fe2:	6963      	ldr	r3, [r4, #20]
    2fe4:	60a3      	str	r3, [r4, #8]
    2fe6:	2000      	movs	r0, #0
    2fe8:	6923      	ldr	r3, [r4, #16]
    2fea:	4283      	cmp	r3, r0
    2fec:	d107      	bne.n	2ffe <__swsetup_r+0xda>
    2fee:	220c      	movs	r2, #12
    2ff0:	5ea3      	ldrsh	r3, [r4, r2]
    2ff2:	061a      	lsls	r2, r3, #24
    2ff4:	d503      	bpl.n	2ffe <__swsetup_r+0xda>
    2ff6:	2240      	movs	r2, #64	; 0x40
    2ff8:	4313      	orrs	r3, r2
    2ffa:	81a3      	strh	r3, [r4, #12]
    2ffc:	3801      	subs	r0, #1
    2ffe:	bd70      	pop	{r4, r5, r6, pc}
    3000:	2000006c 	.word	0x2000006c
    3004:	00003780 	.word	0x00003780
    3008:	000037a0 	.word	0x000037a0
    300c:	000037c0 	.word	0x000037c0

00003010 <__sflush_r>:
    3010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3012:	898a      	ldrh	r2, [r1, #12]
    3014:	0005      	movs	r5, r0
    3016:	000c      	movs	r4, r1
    3018:	0713      	lsls	r3, r2, #28
    301a:	d45a      	bmi.n	30d2 <__sflush_r+0xc2>
    301c:	684b      	ldr	r3, [r1, #4]
    301e:	2b00      	cmp	r3, #0
    3020:	dc02      	bgt.n	3028 <__sflush_r+0x18>
    3022:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3024:	2b00      	cmp	r3, #0
    3026:	dd19      	ble.n	305c <__sflush_r+0x4c>
    3028:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    302a:	2f00      	cmp	r7, #0
    302c:	d016      	beq.n	305c <__sflush_r+0x4c>
    302e:	2300      	movs	r3, #0
    3030:	682e      	ldr	r6, [r5, #0]
    3032:	602b      	str	r3, [r5, #0]
    3034:	2380      	movs	r3, #128	; 0x80
    3036:	015b      	lsls	r3, r3, #5
    3038:	401a      	ands	r2, r3
    303a:	d001      	beq.n	3040 <__sflush_r+0x30>
    303c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    303e:	e014      	b.n	306a <__sflush_r+0x5a>
    3040:	2301      	movs	r3, #1
    3042:	6a21      	ldr	r1, [r4, #32]
    3044:	0028      	movs	r0, r5
    3046:	47b8      	blx	r7
    3048:	1c43      	adds	r3, r0, #1
    304a:	d10e      	bne.n	306a <__sflush_r+0x5a>
    304c:	682b      	ldr	r3, [r5, #0]
    304e:	2b00      	cmp	r3, #0
    3050:	d00b      	beq.n	306a <__sflush_r+0x5a>
    3052:	2b1d      	cmp	r3, #29
    3054:	d001      	beq.n	305a <__sflush_r+0x4a>
    3056:	2b16      	cmp	r3, #22
    3058:	d102      	bne.n	3060 <__sflush_r+0x50>
    305a:	602e      	str	r6, [r5, #0]
    305c:	2000      	movs	r0, #0
    305e:	e05a      	b.n	3116 <__sflush_r+0x106>
    3060:	2240      	movs	r2, #64	; 0x40
    3062:	89a3      	ldrh	r3, [r4, #12]
    3064:	4313      	orrs	r3, r2
    3066:	81a3      	strh	r3, [r4, #12]
    3068:	e055      	b.n	3116 <__sflush_r+0x106>
    306a:	89a3      	ldrh	r3, [r4, #12]
    306c:	075b      	lsls	r3, r3, #29
    306e:	d506      	bpl.n	307e <__sflush_r+0x6e>
    3070:	6863      	ldr	r3, [r4, #4]
    3072:	1ac0      	subs	r0, r0, r3
    3074:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3076:	2b00      	cmp	r3, #0
    3078:	d001      	beq.n	307e <__sflush_r+0x6e>
    307a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    307c:	1ac0      	subs	r0, r0, r3
    307e:	2300      	movs	r3, #0
    3080:	0002      	movs	r2, r0
    3082:	6a21      	ldr	r1, [r4, #32]
    3084:	0028      	movs	r0, r5
    3086:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3088:	47b8      	blx	r7
    308a:	89a3      	ldrh	r3, [r4, #12]
    308c:	1c42      	adds	r2, r0, #1
    308e:	d106      	bne.n	309e <__sflush_r+0x8e>
    3090:	6829      	ldr	r1, [r5, #0]
    3092:	291d      	cmp	r1, #29
    3094:	d83a      	bhi.n	310c <__sflush_r+0xfc>
    3096:	4a20      	ldr	r2, [pc, #128]	; (3118 <__sflush_r+0x108>)
    3098:	40ca      	lsrs	r2, r1
    309a:	07d2      	lsls	r2, r2, #31
    309c:	d536      	bpl.n	310c <__sflush_r+0xfc>
    309e:	2200      	movs	r2, #0
    30a0:	6062      	str	r2, [r4, #4]
    30a2:	6922      	ldr	r2, [r4, #16]
    30a4:	6022      	str	r2, [r4, #0]
    30a6:	04db      	lsls	r3, r3, #19
    30a8:	d505      	bpl.n	30b6 <__sflush_r+0xa6>
    30aa:	1c43      	adds	r3, r0, #1
    30ac:	d102      	bne.n	30b4 <__sflush_r+0xa4>
    30ae:	682b      	ldr	r3, [r5, #0]
    30b0:	2b00      	cmp	r3, #0
    30b2:	d100      	bne.n	30b6 <__sflush_r+0xa6>
    30b4:	6560      	str	r0, [r4, #84]	; 0x54
    30b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    30b8:	602e      	str	r6, [r5, #0]
    30ba:	2900      	cmp	r1, #0
    30bc:	d0ce      	beq.n	305c <__sflush_r+0x4c>
    30be:	0023      	movs	r3, r4
    30c0:	3344      	adds	r3, #68	; 0x44
    30c2:	4299      	cmp	r1, r3
    30c4:	d002      	beq.n	30cc <__sflush_r+0xbc>
    30c6:	0028      	movs	r0, r5
    30c8:	f000 f998 	bl	33fc <_free_r>
    30cc:	2000      	movs	r0, #0
    30ce:	6360      	str	r0, [r4, #52]	; 0x34
    30d0:	e021      	b.n	3116 <__sflush_r+0x106>
    30d2:	690f      	ldr	r7, [r1, #16]
    30d4:	2f00      	cmp	r7, #0
    30d6:	d0c1      	beq.n	305c <__sflush_r+0x4c>
    30d8:	680b      	ldr	r3, [r1, #0]
    30da:	600f      	str	r7, [r1, #0]
    30dc:	1bdb      	subs	r3, r3, r7
    30de:	9301      	str	r3, [sp, #4]
    30e0:	2300      	movs	r3, #0
    30e2:	0792      	lsls	r2, r2, #30
    30e4:	d100      	bne.n	30e8 <__sflush_r+0xd8>
    30e6:	694b      	ldr	r3, [r1, #20]
    30e8:	60a3      	str	r3, [r4, #8]
    30ea:	e003      	b.n	30f4 <__sflush_r+0xe4>
    30ec:	9b01      	ldr	r3, [sp, #4]
    30ee:	183f      	adds	r7, r7, r0
    30f0:	1a1b      	subs	r3, r3, r0
    30f2:	9301      	str	r3, [sp, #4]
    30f4:	9b01      	ldr	r3, [sp, #4]
    30f6:	2b00      	cmp	r3, #0
    30f8:	ddb0      	ble.n	305c <__sflush_r+0x4c>
    30fa:	9b01      	ldr	r3, [sp, #4]
    30fc:	003a      	movs	r2, r7
    30fe:	6a21      	ldr	r1, [r4, #32]
    3100:	0028      	movs	r0, r5
    3102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3104:	47b0      	blx	r6
    3106:	2800      	cmp	r0, #0
    3108:	dcf0      	bgt.n	30ec <__sflush_r+0xdc>
    310a:	89a3      	ldrh	r3, [r4, #12]
    310c:	2240      	movs	r2, #64	; 0x40
    310e:	2001      	movs	r0, #1
    3110:	4313      	orrs	r3, r2
    3112:	81a3      	strh	r3, [r4, #12]
    3114:	4240      	negs	r0, r0
    3116:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3118:	20400001 	.word	0x20400001

0000311c <_fflush_r>:
    311c:	690b      	ldr	r3, [r1, #16]
    311e:	b570      	push	{r4, r5, r6, lr}
    3120:	0005      	movs	r5, r0
    3122:	000c      	movs	r4, r1
    3124:	2b00      	cmp	r3, #0
    3126:	d101      	bne.n	312c <_fflush_r+0x10>
    3128:	2000      	movs	r0, #0
    312a:	e01c      	b.n	3166 <_fflush_r+0x4a>
    312c:	2800      	cmp	r0, #0
    312e:	d004      	beq.n	313a <_fflush_r+0x1e>
    3130:	6983      	ldr	r3, [r0, #24]
    3132:	2b00      	cmp	r3, #0
    3134:	d101      	bne.n	313a <_fflush_r+0x1e>
    3136:	f000 f85f 	bl	31f8 <__sinit>
    313a:	4b0b      	ldr	r3, [pc, #44]	; (3168 <_fflush_r+0x4c>)
    313c:	429c      	cmp	r4, r3
    313e:	d101      	bne.n	3144 <_fflush_r+0x28>
    3140:	686c      	ldr	r4, [r5, #4]
    3142:	e008      	b.n	3156 <_fflush_r+0x3a>
    3144:	4b09      	ldr	r3, [pc, #36]	; (316c <_fflush_r+0x50>)
    3146:	429c      	cmp	r4, r3
    3148:	d101      	bne.n	314e <_fflush_r+0x32>
    314a:	68ac      	ldr	r4, [r5, #8]
    314c:	e003      	b.n	3156 <_fflush_r+0x3a>
    314e:	4b08      	ldr	r3, [pc, #32]	; (3170 <_fflush_r+0x54>)
    3150:	429c      	cmp	r4, r3
    3152:	d100      	bne.n	3156 <_fflush_r+0x3a>
    3154:	68ec      	ldr	r4, [r5, #12]
    3156:	220c      	movs	r2, #12
    3158:	5ea3      	ldrsh	r3, [r4, r2]
    315a:	2b00      	cmp	r3, #0
    315c:	d0e4      	beq.n	3128 <_fflush_r+0xc>
    315e:	0021      	movs	r1, r4
    3160:	0028      	movs	r0, r5
    3162:	f7ff ff55 	bl	3010 <__sflush_r>
    3166:	bd70      	pop	{r4, r5, r6, pc}
    3168:	00003780 	.word	0x00003780
    316c:	000037a0 	.word	0x000037a0
    3170:	000037c0 	.word	0x000037c0

00003174 <_cleanup_r>:
    3174:	b510      	push	{r4, lr}
    3176:	4902      	ldr	r1, [pc, #8]	; (3180 <_cleanup_r+0xc>)
    3178:	f000 f8b0 	bl	32dc <_fwalk_reent>
    317c:	bd10      	pop	{r4, pc}
    317e:	46c0      	nop			; (mov r8, r8)
    3180:	0000311d 	.word	0x0000311d

00003184 <std.isra.0>:
    3184:	2300      	movs	r3, #0
    3186:	b510      	push	{r4, lr}
    3188:	0004      	movs	r4, r0
    318a:	6003      	str	r3, [r0, #0]
    318c:	6043      	str	r3, [r0, #4]
    318e:	6083      	str	r3, [r0, #8]
    3190:	8181      	strh	r1, [r0, #12]
    3192:	6643      	str	r3, [r0, #100]	; 0x64
    3194:	81c2      	strh	r2, [r0, #14]
    3196:	6103      	str	r3, [r0, #16]
    3198:	6143      	str	r3, [r0, #20]
    319a:	6183      	str	r3, [r0, #24]
    319c:	0019      	movs	r1, r3
    319e:	2208      	movs	r2, #8
    31a0:	305c      	adds	r0, #92	; 0x5c
    31a2:	f7ff fd38 	bl	2c16 <memset>
    31a6:	4b05      	ldr	r3, [pc, #20]	; (31bc <std.isra.0+0x38>)
    31a8:	6224      	str	r4, [r4, #32]
    31aa:	6263      	str	r3, [r4, #36]	; 0x24
    31ac:	4b04      	ldr	r3, [pc, #16]	; (31c0 <std.isra.0+0x3c>)
    31ae:	62a3      	str	r3, [r4, #40]	; 0x28
    31b0:	4b04      	ldr	r3, [pc, #16]	; (31c4 <std.isra.0+0x40>)
    31b2:	62e3      	str	r3, [r4, #44]	; 0x2c
    31b4:	4b04      	ldr	r3, [pc, #16]	; (31c8 <std.isra.0+0x44>)
    31b6:	6323      	str	r3, [r4, #48]	; 0x30
    31b8:	bd10      	pop	{r4, pc}
    31ba:	46c0      	nop			; (mov r8, r8)
    31bc:	00003559 	.word	0x00003559
    31c0:	00003581 	.word	0x00003581
    31c4:	000035b9 	.word	0x000035b9
    31c8:	000035e5 	.word	0x000035e5

000031cc <__sfmoreglue>:
    31cc:	b570      	push	{r4, r5, r6, lr}
    31ce:	2568      	movs	r5, #104	; 0x68
    31d0:	1e4b      	subs	r3, r1, #1
    31d2:	435d      	muls	r5, r3
    31d4:	000e      	movs	r6, r1
    31d6:	0029      	movs	r1, r5
    31d8:	3174      	adds	r1, #116	; 0x74
    31da:	f000 f955 	bl	3488 <_malloc_r>
    31de:	1e04      	subs	r4, r0, #0
    31e0:	d008      	beq.n	31f4 <__sfmoreglue+0x28>
    31e2:	2100      	movs	r1, #0
    31e4:	002a      	movs	r2, r5
    31e6:	6001      	str	r1, [r0, #0]
    31e8:	6046      	str	r6, [r0, #4]
    31ea:	300c      	adds	r0, #12
    31ec:	60a0      	str	r0, [r4, #8]
    31ee:	3268      	adds	r2, #104	; 0x68
    31f0:	f7ff fd11 	bl	2c16 <memset>
    31f4:	0020      	movs	r0, r4
    31f6:	bd70      	pop	{r4, r5, r6, pc}

000031f8 <__sinit>:
    31f8:	6983      	ldr	r3, [r0, #24]
    31fa:	b513      	push	{r0, r1, r4, lr}
    31fc:	0004      	movs	r4, r0
    31fe:	2b00      	cmp	r3, #0
    3200:	d128      	bne.n	3254 <__sinit+0x5c>
    3202:	6483      	str	r3, [r0, #72]	; 0x48
    3204:	64c3      	str	r3, [r0, #76]	; 0x4c
    3206:	6503      	str	r3, [r0, #80]	; 0x50
    3208:	4b13      	ldr	r3, [pc, #76]	; (3258 <__sinit+0x60>)
    320a:	4a14      	ldr	r2, [pc, #80]	; (325c <__sinit+0x64>)
    320c:	681b      	ldr	r3, [r3, #0]
    320e:	6282      	str	r2, [r0, #40]	; 0x28
    3210:	9301      	str	r3, [sp, #4]
    3212:	4298      	cmp	r0, r3
    3214:	d101      	bne.n	321a <__sinit+0x22>
    3216:	2301      	movs	r3, #1
    3218:	6183      	str	r3, [r0, #24]
    321a:	0020      	movs	r0, r4
    321c:	f000 f820 	bl	3260 <__sfp>
    3220:	6060      	str	r0, [r4, #4]
    3222:	0020      	movs	r0, r4
    3224:	f000 f81c 	bl	3260 <__sfp>
    3228:	60a0      	str	r0, [r4, #8]
    322a:	0020      	movs	r0, r4
    322c:	f000 f818 	bl	3260 <__sfp>
    3230:	2200      	movs	r2, #0
    3232:	60e0      	str	r0, [r4, #12]
    3234:	2104      	movs	r1, #4
    3236:	6860      	ldr	r0, [r4, #4]
    3238:	f7ff ffa4 	bl	3184 <std.isra.0>
    323c:	2201      	movs	r2, #1
    323e:	2109      	movs	r1, #9
    3240:	68a0      	ldr	r0, [r4, #8]
    3242:	f7ff ff9f 	bl	3184 <std.isra.0>
    3246:	2202      	movs	r2, #2
    3248:	2112      	movs	r1, #18
    324a:	68e0      	ldr	r0, [r4, #12]
    324c:	f7ff ff9a 	bl	3184 <std.isra.0>
    3250:	2301      	movs	r3, #1
    3252:	61a3      	str	r3, [r4, #24]
    3254:	bd13      	pop	{r0, r1, r4, pc}
    3256:	46c0      	nop			; (mov r8, r8)
    3258:	0000377c 	.word	0x0000377c
    325c:	00003175 	.word	0x00003175

00003260 <__sfp>:
    3260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3262:	4b1d      	ldr	r3, [pc, #116]	; (32d8 <__sfp+0x78>)
    3264:	0006      	movs	r6, r0
    3266:	681d      	ldr	r5, [r3, #0]
    3268:	69ab      	ldr	r3, [r5, #24]
    326a:	2b00      	cmp	r3, #0
    326c:	d102      	bne.n	3274 <__sfp+0x14>
    326e:	0028      	movs	r0, r5
    3270:	f7ff ffc2 	bl	31f8 <__sinit>
    3274:	3548      	adds	r5, #72	; 0x48
    3276:	68ac      	ldr	r4, [r5, #8]
    3278:	686b      	ldr	r3, [r5, #4]
    327a:	3b01      	subs	r3, #1
    327c:	d405      	bmi.n	328a <__sfp+0x2a>
    327e:	220c      	movs	r2, #12
    3280:	5ea7      	ldrsh	r7, [r4, r2]
    3282:	2f00      	cmp	r7, #0
    3284:	d010      	beq.n	32a8 <__sfp+0x48>
    3286:	3468      	adds	r4, #104	; 0x68
    3288:	e7f7      	b.n	327a <__sfp+0x1a>
    328a:	682b      	ldr	r3, [r5, #0]
    328c:	2b00      	cmp	r3, #0
    328e:	d001      	beq.n	3294 <__sfp+0x34>
    3290:	682d      	ldr	r5, [r5, #0]
    3292:	e7f0      	b.n	3276 <__sfp+0x16>
    3294:	2104      	movs	r1, #4
    3296:	0030      	movs	r0, r6
    3298:	f7ff ff98 	bl	31cc <__sfmoreglue>
    329c:	6028      	str	r0, [r5, #0]
    329e:	2800      	cmp	r0, #0
    32a0:	d1f6      	bne.n	3290 <__sfp+0x30>
    32a2:	230c      	movs	r3, #12
    32a4:	6033      	str	r3, [r6, #0]
    32a6:	e016      	b.n	32d6 <__sfp+0x76>
    32a8:	2301      	movs	r3, #1
    32aa:	0020      	movs	r0, r4
    32ac:	425b      	negs	r3, r3
    32ae:	81e3      	strh	r3, [r4, #14]
    32b0:	3302      	adds	r3, #2
    32b2:	81a3      	strh	r3, [r4, #12]
    32b4:	6667      	str	r7, [r4, #100]	; 0x64
    32b6:	6027      	str	r7, [r4, #0]
    32b8:	60a7      	str	r7, [r4, #8]
    32ba:	6067      	str	r7, [r4, #4]
    32bc:	6127      	str	r7, [r4, #16]
    32be:	6167      	str	r7, [r4, #20]
    32c0:	61a7      	str	r7, [r4, #24]
    32c2:	305c      	adds	r0, #92	; 0x5c
    32c4:	2208      	movs	r2, #8
    32c6:	0039      	movs	r1, r7
    32c8:	f7ff fca5 	bl	2c16 <memset>
    32cc:	0020      	movs	r0, r4
    32ce:	6367      	str	r7, [r4, #52]	; 0x34
    32d0:	63a7      	str	r7, [r4, #56]	; 0x38
    32d2:	64a7      	str	r7, [r4, #72]	; 0x48
    32d4:	64e7      	str	r7, [r4, #76]	; 0x4c
    32d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32d8:	0000377c 	.word	0x0000377c

000032dc <_fwalk_reent>:
    32dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    32de:	0004      	movs	r4, r0
    32e0:	0007      	movs	r7, r0
    32e2:	2600      	movs	r6, #0
    32e4:	9101      	str	r1, [sp, #4]
    32e6:	3448      	adds	r4, #72	; 0x48
    32e8:	2c00      	cmp	r4, #0
    32ea:	d016      	beq.n	331a <_fwalk_reent+0x3e>
    32ec:	6863      	ldr	r3, [r4, #4]
    32ee:	68a5      	ldr	r5, [r4, #8]
    32f0:	9300      	str	r3, [sp, #0]
    32f2:	9b00      	ldr	r3, [sp, #0]
    32f4:	3b01      	subs	r3, #1
    32f6:	9300      	str	r3, [sp, #0]
    32f8:	d40d      	bmi.n	3316 <_fwalk_reent+0x3a>
    32fa:	89ab      	ldrh	r3, [r5, #12]
    32fc:	2b01      	cmp	r3, #1
    32fe:	d908      	bls.n	3312 <_fwalk_reent+0x36>
    3300:	220e      	movs	r2, #14
    3302:	5eab      	ldrsh	r3, [r5, r2]
    3304:	3301      	adds	r3, #1
    3306:	d004      	beq.n	3312 <_fwalk_reent+0x36>
    3308:	0029      	movs	r1, r5
    330a:	0038      	movs	r0, r7
    330c:	9b01      	ldr	r3, [sp, #4]
    330e:	4798      	blx	r3
    3310:	4306      	orrs	r6, r0
    3312:	3568      	adds	r5, #104	; 0x68
    3314:	e7ed      	b.n	32f2 <_fwalk_reent+0x16>
    3316:	6824      	ldr	r4, [r4, #0]
    3318:	e7e6      	b.n	32e8 <_fwalk_reent+0xc>
    331a:	0030      	movs	r0, r6
    331c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003320 <__swhatbuf_r>:
    3320:	b570      	push	{r4, r5, r6, lr}
    3322:	000e      	movs	r6, r1
    3324:	001d      	movs	r5, r3
    3326:	230e      	movs	r3, #14
    3328:	5ec9      	ldrsh	r1, [r1, r3]
    332a:	b090      	sub	sp, #64	; 0x40
    332c:	0014      	movs	r4, r2
    332e:	2900      	cmp	r1, #0
    3330:	da06      	bge.n	3340 <__swhatbuf_r+0x20>
    3332:	2300      	movs	r3, #0
    3334:	602b      	str	r3, [r5, #0]
    3336:	89b3      	ldrh	r3, [r6, #12]
    3338:	061b      	lsls	r3, r3, #24
    333a:	d50f      	bpl.n	335c <__swhatbuf_r+0x3c>
    333c:	2340      	movs	r3, #64	; 0x40
    333e:	e00f      	b.n	3360 <__swhatbuf_r+0x40>
    3340:	aa01      	add	r2, sp, #4
    3342:	f000 f97b 	bl	363c <_fstat_r>
    3346:	2800      	cmp	r0, #0
    3348:	dbf3      	blt.n	3332 <__swhatbuf_r+0x12>
    334a:	23f0      	movs	r3, #240	; 0xf0
    334c:	9a02      	ldr	r2, [sp, #8]
    334e:	021b      	lsls	r3, r3, #8
    3350:	4013      	ands	r3, r2
    3352:	4a05      	ldr	r2, [pc, #20]	; (3368 <__swhatbuf_r+0x48>)
    3354:	189b      	adds	r3, r3, r2
    3356:	425a      	negs	r2, r3
    3358:	4153      	adcs	r3, r2
    335a:	602b      	str	r3, [r5, #0]
    335c:	2380      	movs	r3, #128	; 0x80
    335e:	00db      	lsls	r3, r3, #3
    3360:	2000      	movs	r0, #0
    3362:	6023      	str	r3, [r4, #0]
    3364:	b010      	add	sp, #64	; 0x40
    3366:	bd70      	pop	{r4, r5, r6, pc}
    3368:	ffffe000 	.word	0xffffe000

0000336c <__smakebuf_r>:
    336c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    336e:	2602      	movs	r6, #2
    3370:	898b      	ldrh	r3, [r1, #12]
    3372:	0005      	movs	r5, r0
    3374:	000c      	movs	r4, r1
    3376:	4233      	tst	r3, r6
    3378:	d110      	bne.n	339c <__smakebuf_r+0x30>
    337a:	ab01      	add	r3, sp, #4
    337c:	466a      	mov	r2, sp
    337e:	f7ff ffcf 	bl	3320 <__swhatbuf_r>
    3382:	9900      	ldr	r1, [sp, #0]
    3384:	0007      	movs	r7, r0
    3386:	0028      	movs	r0, r5
    3388:	f000 f87e 	bl	3488 <_malloc_r>
    338c:	2800      	cmp	r0, #0
    338e:	d10c      	bne.n	33aa <__smakebuf_r+0x3e>
    3390:	220c      	movs	r2, #12
    3392:	5ea3      	ldrsh	r3, [r4, r2]
    3394:	059a      	lsls	r2, r3, #22
    3396:	d423      	bmi.n	33e0 <__smakebuf_r+0x74>
    3398:	4333      	orrs	r3, r6
    339a:	81a3      	strh	r3, [r4, #12]
    339c:	0023      	movs	r3, r4
    339e:	3347      	adds	r3, #71	; 0x47
    33a0:	6023      	str	r3, [r4, #0]
    33a2:	6123      	str	r3, [r4, #16]
    33a4:	2301      	movs	r3, #1
    33a6:	6163      	str	r3, [r4, #20]
    33a8:	e01a      	b.n	33e0 <__smakebuf_r+0x74>
    33aa:	2280      	movs	r2, #128	; 0x80
    33ac:	4b0d      	ldr	r3, [pc, #52]	; (33e4 <__smakebuf_r+0x78>)
    33ae:	62ab      	str	r3, [r5, #40]	; 0x28
    33b0:	89a3      	ldrh	r3, [r4, #12]
    33b2:	6020      	str	r0, [r4, #0]
    33b4:	4313      	orrs	r3, r2
    33b6:	81a3      	strh	r3, [r4, #12]
    33b8:	9b00      	ldr	r3, [sp, #0]
    33ba:	6120      	str	r0, [r4, #16]
    33bc:	6163      	str	r3, [r4, #20]
    33be:	9b01      	ldr	r3, [sp, #4]
    33c0:	2b00      	cmp	r3, #0
    33c2:	d00a      	beq.n	33da <__smakebuf_r+0x6e>
    33c4:	230e      	movs	r3, #14
    33c6:	5ee1      	ldrsh	r1, [r4, r3]
    33c8:	0028      	movs	r0, r5
    33ca:	f000 f949 	bl	3660 <_isatty_r>
    33ce:	2800      	cmp	r0, #0
    33d0:	d003      	beq.n	33da <__smakebuf_r+0x6e>
    33d2:	2201      	movs	r2, #1
    33d4:	89a3      	ldrh	r3, [r4, #12]
    33d6:	4313      	orrs	r3, r2
    33d8:	81a3      	strh	r3, [r4, #12]
    33da:	89a3      	ldrh	r3, [r4, #12]
    33dc:	431f      	orrs	r7, r3
    33de:	81a7      	strh	r7, [r4, #12]
    33e0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    33e2:	46c0      	nop			; (mov r8, r8)
    33e4:	00003175 	.word	0x00003175

000033e8 <malloc>:
    33e8:	b510      	push	{r4, lr}
    33ea:	4b03      	ldr	r3, [pc, #12]	; (33f8 <malloc+0x10>)
    33ec:	0001      	movs	r1, r0
    33ee:	6818      	ldr	r0, [r3, #0]
    33f0:	f000 f84a 	bl	3488 <_malloc_r>
    33f4:	bd10      	pop	{r4, pc}
    33f6:	46c0      	nop			; (mov r8, r8)
    33f8:	2000006c 	.word	0x2000006c

000033fc <_free_r>:
    33fc:	b530      	push	{r4, r5, lr}
    33fe:	2900      	cmp	r1, #0
    3400:	d03e      	beq.n	3480 <_free_r+0x84>
    3402:	3904      	subs	r1, #4
    3404:	680b      	ldr	r3, [r1, #0]
    3406:	2b00      	cmp	r3, #0
    3408:	da00      	bge.n	340c <_free_r+0x10>
    340a:	18c9      	adds	r1, r1, r3
    340c:	4a1d      	ldr	r2, [pc, #116]	; (3484 <_free_r+0x88>)
    340e:	6813      	ldr	r3, [r2, #0]
    3410:	0014      	movs	r4, r2
    3412:	2b00      	cmp	r3, #0
    3414:	d102      	bne.n	341c <_free_r+0x20>
    3416:	604b      	str	r3, [r1, #4]
    3418:	6011      	str	r1, [r2, #0]
    341a:	e031      	b.n	3480 <_free_r+0x84>
    341c:	428b      	cmp	r3, r1
    341e:	d90d      	bls.n	343c <_free_r+0x40>
    3420:	680a      	ldr	r2, [r1, #0]
    3422:	1888      	adds	r0, r1, r2
    3424:	4283      	cmp	r3, r0
    3426:	d103      	bne.n	3430 <_free_r+0x34>
    3428:	6818      	ldr	r0, [r3, #0]
    342a:	685b      	ldr	r3, [r3, #4]
    342c:	1882      	adds	r2, r0, r2
    342e:	600a      	str	r2, [r1, #0]
    3430:	604b      	str	r3, [r1, #4]
    3432:	6021      	str	r1, [r4, #0]
    3434:	e024      	b.n	3480 <_free_r+0x84>
    3436:	428a      	cmp	r2, r1
    3438:	d803      	bhi.n	3442 <_free_r+0x46>
    343a:	0013      	movs	r3, r2
    343c:	685a      	ldr	r2, [r3, #4]
    343e:	2a00      	cmp	r2, #0
    3440:	d1f9      	bne.n	3436 <_free_r+0x3a>
    3442:	681d      	ldr	r5, [r3, #0]
    3444:	195c      	adds	r4, r3, r5
    3446:	428c      	cmp	r4, r1
    3448:	d10b      	bne.n	3462 <_free_r+0x66>
    344a:	6809      	ldr	r1, [r1, #0]
    344c:	1869      	adds	r1, r5, r1
    344e:	1858      	adds	r0, r3, r1
    3450:	6019      	str	r1, [r3, #0]
    3452:	4282      	cmp	r2, r0
    3454:	d114      	bne.n	3480 <_free_r+0x84>
    3456:	6810      	ldr	r0, [r2, #0]
    3458:	6852      	ldr	r2, [r2, #4]
    345a:	1841      	adds	r1, r0, r1
    345c:	6019      	str	r1, [r3, #0]
    345e:	605a      	str	r2, [r3, #4]
    3460:	e00e      	b.n	3480 <_free_r+0x84>
    3462:	428c      	cmp	r4, r1
    3464:	d902      	bls.n	346c <_free_r+0x70>
    3466:	230c      	movs	r3, #12
    3468:	6003      	str	r3, [r0, #0]
    346a:	e009      	b.n	3480 <_free_r+0x84>
    346c:	6808      	ldr	r0, [r1, #0]
    346e:	180c      	adds	r4, r1, r0
    3470:	42a2      	cmp	r2, r4
    3472:	d103      	bne.n	347c <_free_r+0x80>
    3474:	6814      	ldr	r4, [r2, #0]
    3476:	6852      	ldr	r2, [r2, #4]
    3478:	1820      	adds	r0, r4, r0
    347a:	6008      	str	r0, [r1, #0]
    347c:	604a      	str	r2, [r1, #4]
    347e:	6059      	str	r1, [r3, #4]
    3480:	bd30      	pop	{r4, r5, pc}
    3482:	46c0      	nop			; (mov r8, r8)
    3484:	200000d0 	.word	0x200000d0

00003488 <_malloc_r>:
    3488:	2303      	movs	r3, #3
    348a:	b570      	push	{r4, r5, r6, lr}
    348c:	1ccd      	adds	r5, r1, #3
    348e:	439d      	bics	r5, r3
    3490:	3508      	adds	r5, #8
    3492:	0006      	movs	r6, r0
    3494:	2d0c      	cmp	r5, #12
    3496:	d201      	bcs.n	349c <_malloc_r+0x14>
    3498:	250c      	movs	r5, #12
    349a:	e005      	b.n	34a8 <_malloc_r+0x20>
    349c:	2d00      	cmp	r5, #0
    349e:	da03      	bge.n	34a8 <_malloc_r+0x20>
    34a0:	230c      	movs	r3, #12
    34a2:	2000      	movs	r0, #0
    34a4:	6033      	str	r3, [r6, #0]
    34a6:	e040      	b.n	352a <_malloc_r+0xa2>
    34a8:	42a9      	cmp	r1, r5
    34aa:	d8f9      	bhi.n	34a0 <_malloc_r+0x18>
    34ac:	4b1f      	ldr	r3, [pc, #124]	; (352c <_malloc_r+0xa4>)
    34ae:	681c      	ldr	r4, [r3, #0]
    34b0:	001a      	movs	r2, r3
    34b2:	0021      	movs	r1, r4
    34b4:	2900      	cmp	r1, #0
    34b6:	d013      	beq.n	34e0 <_malloc_r+0x58>
    34b8:	680b      	ldr	r3, [r1, #0]
    34ba:	1b5b      	subs	r3, r3, r5
    34bc:	d40d      	bmi.n	34da <_malloc_r+0x52>
    34be:	2b0b      	cmp	r3, #11
    34c0:	d902      	bls.n	34c8 <_malloc_r+0x40>
    34c2:	600b      	str	r3, [r1, #0]
    34c4:	18cc      	adds	r4, r1, r3
    34c6:	e01e      	b.n	3506 <_malloc_r+0x7e>
    34c8:	428c      	cmp	r4, r1
    34ca:	d102      	bne.n	34d2 <_malloc_r+0x4a>
    34cc:	6863      	ldr	r3, [r4, #4]
    34ce:	6013      	str	r3, [r2, #0]
    34d0:	e01a      	b.n	3508 <_malloc_r+0x80>
    34d2:	684b      	ldr	r3, [r1, #4]
    34d4:	6063      	str	r3, [r4, #4]
    34d6:	000c      	movs	r4, r1
    34d8:	e016      	b.n	3508 <_malloc_r+0x80>
    34da:	000c      	movs	r4, r1
    34dc:	6849      	ldr	r1, [r1, #4]
    34de:	e7e9      	b.n	34b4 <_malloc_r+0x2c>
    34e0:	4c13      	ldr	r4, [pc, #76]	; (3530 <_malloc_r+0xa8>)
    34e2:	6823      	ldr	r3, [r4, #0]
    34e4:	2b00      	cmp	r3, #0
    34e6:	d103      	bne.n	34f0 <_malloc_r+0x68>
    34e8:	0030      	movs	r0, r6
    34ea:	f000 f823 	bl	3534 <_sbrk_r>
    34ee:	6020      	str	r0, [r4, #0]
    34f0:	0029      	movs	r1, r5
    34f2:	0030      	movs	r0, r6
    34f4:	f000 f81e 	bl	3534 <_sbrk_r>
    34f8:	1c43      	adds	r3, r0, #1
    34fa:	d0d1      	beq.n	34a0 <_malloc_r+0x18>
    34fc:	2303      	movs	r3, #3
    34fe:	1cc4      	adds	r4, r0, #3
    3500:	439c      	bics	r4, r3
    3502:	42a0      	cmp	r0, r4
    3504:	d10a      	bne.n	351c <_malloc_r+0x94>
    3506:	6025      	str	r5, [r4, #0]
    3508:	0020      	movs	r0, r4
    350a:	2207      	movs	r2, #7
    350c:	300b      	adds	r0, #11
    350e:	1d23      	adds	r3, r4, #4
    3510:	4390      	bics	r0, r2
    3512:	1ac3      	subs	r3, r0, r3
    3514:	d009      	beq.n	352a <_malloc_r+0xa2>
    3516:	425a      	negs	r2, r3
    3518:	50e2      	str	r2, [r4, r3]
    351a:	e006      	b.n	352a <_malloc_r+0xa2>
    351c:	1a21      	subs	r1, r4, r0
    351e:	0030      	movs	r0, r6
    3520:	f000 f808 	bl	3534 <_sbrk_r>
    3524:	1c43      	adds	r3, r0, #1
    3526:	d1ee      	bne.n	3506 <_malloc_r+0x7e>
    3528:	e7ba      	b.n	34a0 <_malloc_r+0x18>
    352a:	bd70      	pop	{r4, r5, r6, pc}
    352c:	200000d0 	.word	0x200000d0
    3530:	200000cc 	.word	0x200000cc

00003534 <_sbrk_r>:
    3534:	2300      	movs	r3, #0
    3536:	b570      	push	{r4, r5, r6, lr}
    3538:	4c06      	ldr	r4, [pc, #24]	; (3554 <_sbrk_r+0x20>)
    353a:	0005      	movs	r5, r0
    353c:	0008      	movs	r0, r1
    353e:	6023      	str	r3, [r4, #0]
    3540:	f7fe ffae 	bl	24a0 <_sbrk>
    3544:	1c43      	adds	r3, r0, #1
    3546:	d103      	bne.n	3550 <_sbrk_r+0x1c>
    3548:	6823      	ldr	r3, [r4, #0]
    354a:	2b00      	cmp	r3, #0
    354c:	d000      	beq.n	3550 <_sbrk_r+0x1c>
    354e:	602b      	str	r3, [r5, #0]
    3550:	bd70      	pop	{r4, r5, r6, pc}
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	2000012c 	.word	0x2000012c

00003558 <__sread>:
    3558:	b570      	push	{r4, r5, r6, lr}
    355a:	000c      	movs	r4, r1
    355c:	250e      	movs	r5, #14
    355e:	5f49      	ldrsh	r1, [r1, r5]
    3560:	f000 f8a4 	bl	36ac <_read_r>
    3564:	2800      	cmp	r0, #0
    3566:	db03      	blt.n	3570 <__sread+0x18>
    3568:	6d63      	ldr	r3, [r4, #84]	; 0x54
    356a:	181b      	adds	r3, r3, r0
    356c:	6563      	str	r3, [r4, #84]	; 0x54
    356e:	e003      	b.n	3578 <__sread+0x20>
    3570:	89a2      	ldrh	r2, [r4, #12]
    3572:	4b02      	ldr	r3, [pc, #8]	; (357c <__sread+0x24>)
    3574:	4013      	ands	r3, r2
    3576:	81a3      	strh	r3, [r4, #12]
    3578:	bd70      	pop	{r4, r5, r6, pc}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	ffffefff 	.word	0xffffefff

00003580 <__swrite>:
    3580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3582:	001f      	movs	r7, r3
    3584:	898b      	ldrh	r3, [r1, #12]
    3586:	0005      	movs	r5, r0
    3588:	000c      	movs	r4, r1
    358a:	0016      	movs	r6, r2
    358c:	05db      	lsls	r3, r3, #23
    358e:	d505      	bpl.n	359c <__swrite+0x1c>
    3590:	230e      	movs	r3, #14
    3592:	5ec9      	ldrsh	r1, [r1, r3]
    3594:	2200      	movs	r2, #0
    3596:	2302      	movs	r3, #2
    3598:	f000 f874 	bl	3684 <_lseek_r>
    359c:	89a2      	ldrh	r2, [r4, #12]
    359e:	4b05      	ldr	r3, [pc, #20]	; (35b4 <__swrite+0x34>)
    35a0:	0028      	movs	r0, r5
    35a2:	4013      	ands	r3, r2
    35a4:	81a3      	strh	r3, [r4, #12]
    35a6:	0032      	movs	r2, r6
    35a8:	230e      	movs	r3, #14
    35aa:	5ee1      	ldrsh	r1, [r4, r3]
    35ac:	003b      	movs	r3, r7
    35ae:	f000 f81f 	bl	35f0 <_write_r>
    35b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35b4:	ffffefff 	.word	0xffffefff

000035b8 <__sseek>:
    35b8:	b570      	push	{r4, r5, r6, lr}
    35ba:	000c      	movs	r4, r1
    35bc:	250e      	movs	r5, #14
    35be:	5f49      	ldrsh	r1, [r1, r5]
    35c0:	f000 f860 	bl	3684 <_lseek_r>
    35c4:	89a3      	ldrh	r3, [r4, #12]
    35c6:	1c42      	adds	r2, r0, #1
    35c8:	d103      	bne.n	35d2 <__sseek+0x1a>
    35ca:	4a05      	ldr	r2, [pc, #20]	; (35e0 <__sseek+0x28>)
    35cc:	4013      	ands	r3, r2
    35ce:	81a3      	strh	r3, [r4, #12]
    35d0:	e004      	b.n	35dc <__sseek+0x24>
    35d2:	2280      	movs	r2, #128	; 0x80
    35d4:	0152      	lsls	r2, r2, #5
    35d6:	4313      	orrs	r3, r2
    35d8:	81a3      	strh	r3, [r4, #12]
    35da:	6560      	str	r0, [r4, #84]	; 0x54
    35dc:	bd70      	pop	{r4, r5, r6, pc}
    35de:	46c0      	nop			; (mov r8, r8)
    35e0:	ffffefff 	.word	0xffffefff

000035e4 <__sclose>:
    35e4:	b510      	push	{r4, lr}
    35e6:	230e      	movs	r3, #14
    35e8:	5ec9      	ldrsh	r1, [r1, r3]
    35ea:	f000 f815 	bl	3618 <_close_r>
    35ee:	bd10      	pop	{r4, pc}

000035f0 <_write_r>:
    35f0:	b570      	push	{r4, r5, r6, lr}
    35f2:	0005      	movs	r5, r0
    35f4:	0008      	movs	r0, r1
    35f6:	0011      	movs	r1, r2
    35f8:	2200      	movs	r2, #0
    35fa:	4c06      	ldr	r4, [pc, #24]	; (3614 <_write_r+0x24>)
    35fc:	6022      	str	r2, [r4, #0]
    35fe:	001a      	movs	r2, r3
    3600:	f7fe ff18 	bl	2434 <_write>
    3604:	1c43      	adds	r3, r0, #1
    3606:	d103      	bne.n	3610 <_write_r+0x20>
    3608:	6823      	ldr	r3, [r4, #0]
    360a:	2b00      	cmp	r3, #0
    360c:	d000      	beq.n	3610 <_write_r+0x20>
    360e:	602b      	str	r3, [r5, #0]
    3610:	bd70      	pop	{r4, r5, r6, pc}
    3612:	46c0      	nop			; (mov r8, r8)
    3614:	2000012c 	.word	0x2000012c

00003618 <_close_r>:
    3618:	2300      	movs	r3, #0
    361a:	b570      	push	{r4, r5, r6, lr}
    361c:	4c06      	ldr	r4, [pc, #24]	; (3638 <_close_r+0x20>)
    361e:	0005      	movs	r5, r0
    3620:	0008      	movs	r0, r1
    3622:	6023      	str	r3, [r4, #0]
    3624:	f7fe ff5a 	bl	24dc <_close>
    3628:	1c43      	adds	r3, r0, #1
    362a:	d103      	bne.n	3634 <_close_r+0x1c>
    362c:	6823      	ldr	r3, [r4, #0]
    362e:	2b00      	cmp	r3, #0
    3630:	d000      	beq.n	3634 <_close_r+0x1c>
    3632:	602b      	str	r3, [r5, #0]
    3634:	bd70      	pop	{r4, r5, r6, pc}
    3636:	46c0      	nop			; (mov r8, r8)
    3638:	2000012c 	.word	0x2000012c

0000363c <_fstat_r>:
    363c:	2300      	movs	r3, #0
    363e:	b570      	push	{r4, r5, r6, lr}
    3640:	4c06      	ldr	r4, [pc, #24]	; (365c <_fstat_r+0x20>)
    3642:	0005      	movs	r5, r0
    3644:	0008      	movs	r0, r1
    3646:	0011      	movs	r1, r2
    3648:	6023      	str	r3, [r4, #0]
    364a:	f7fe ff51 	bl	24f0 <_fstat>
    364e:	1c43      	adds	r3, r0, #1
    3650:	d103      	bne.n	365a <_fstat_r+0x1e>
    3652:	6823      	ldr	r3, [r4, #0]
    3654:	2b00      	cmp	r3, #0
    3656:	d000      	beq.n	365a <_fstat_r+0x1e>
    3658:	602b      	str	r3, [r5, #0]
    365a:	bd70      	pop	{r4, r5, r6, pc}
    365c:	2000012c 	.word	0x2000012c

00003660 <_isatty_r>:
    3660:	2300      	movs	r3, #0
    3662:	b570      	push	{r4, r5, r6, lr}
    3664:	4c06      	ldr	r4, [pc, #24]	; (3680 <_isatty_r+0x20>)
    3666:	0005      	movs	r5, r0
    3668:	0008      	movs	r0, r1
    366a:	6023      	str	r3, [r4, #0]
    366c:	f7fe ff4e 	bl	250c <_isatty>
    3670:	1c43      	adds	r3, r0, #1
    3672:	d103      	bne.n	367c <_isatty_r+0x1c>
    3674:	6823      	ldr	r3, [r4, #0]
    3676:	2b00      	cmp	r3, #0
    3678:	d000      	beq.n	367c <_isatty_r+0x1c>
    367a:	602b      	str	r3, [r5, #0]
    367c:	bd70      	pop	{r4, r5, r6, pc}
    367e:	46c0      	nop			; (mov r8, r8)
    3680:	2000012c 	.word	0x2000012c

00003684 <_lseek_r>:
    3684:	b570      	push	{r4, r5, r6, lr}
    3686:	0005      	movs	r5, r0
    3688:	0008      	movs	r0, r1
    368a:	0011      	movs	r1, r2
    368c:	2200      	movs	r2, #0
    368e:	4c06      	ldr	r4, [pc, #24]	; (36a8 <_lseek_r+0x24>)
    3690:	6022      	str	r2, [r4, #0]
    3692:	001a      	movs	r2, r3
    3694:	f7fe ff44 	bl	2520 <_lseek>
    3698:	1c43      	adds	r3, r0, #1
    369a:	d103      	bne.n	36a4 <_lseek_r+0x20>
    369c:	6823      	ldr	r3, [r4, #0]
    369e:	2b00      	cmp	r3, #0
    36a0:	d000      	beq.n	36a4 <_lseek_r+0x20>
    36a2:	602b      	str	r3, [r5, #0]
    36a4:	bd70      	pop	{r4, r5, r6, pc}
    36a6:	46c0      	nop			; (mov r8, r8)
    36a8:	2000012c 	.word	0x2000012c

000036ac <_read_r>:
    36ac:	b570      	push	{r4, r5, r6, lr}
    36ae:	0005      	movs	r5, r0
    36b0:	0008      	movs	r0, r1
    36b2:	0011      	movs	r1, r2
    36b4:	2200      	movs	r2, #0
    36b6:	4c06      	ldr	r4, [pc, #24]	; (36d0 <_read_r+0x24>)
    36b8:	6022      	str	r2, [r4, #0]
    36ba:	001a      	movs	r2, r3
    36bc:	f7fe fe90 	bl	23e0 <_read>
    36c0:	1c43      	adds	r3, r0, #1
    36c2:	d103      	bne.n	36cc <_read_r+0x20>
    36c4:	6823      	ldr	r3, [r4, #0]
    36c6:	2b00      	cmp	r3, #0
    36c8:	d000      	beq.n	36cc <_read_r+0x20>
    36ca:	602b      	str	r3, [r5, #0]
    36cc:	bd70      	pop	{r4, r5, r6, pc}
    36ce:	46c0      	nop			; (mov r8, r8)
    36d0:	2000012c 	.word	0x2000012c
    36d4:	42000800 	.word	0x42000800
    36d8:	42000c00 	.word	0x42000c00
    36dc:	42001000 	.word	0x42001000
    36e0:	42001400 	.word	0x42001400
    36e4:	42001800 	.word	0x42001800
    36e8:	42001c00 	.word	0x42001c00
    36ec:	0c0b0a09 	.word	0x0c0b0a09
    36f0:	00000e0d 	.word	0x00000e0d
    36f4:	000016ca 	.word	0x000016ca
    36f8:	00001742 	.word	0x00001742
    36fc:	00001742 	.word	0x00001742
    3700:	000016e8 	.word	0x000016e8
    3704:	000016e2 	.word	0x000016e2
    3708:	000016ee 	.word	0x000016ee
    370c:	000016d0 	.word	0x000016d0
    3710:	000016f4 	.word	0x000016f4
    3714:	00001728 	.word	0x00001728
    3718:	00001928 	.word	0x00001928
    371c:	00001978 	.word	0x00001978
    3720:	00001978 	.word	0x00001978
    3724:	00001974 	.word	0x00001974
    3728:	0000191a 	.word	0x0000191a
    372c:	0000193a 	.word	0x0000193a
    3730:	0000190a 	.word	0x0000190a
    3734:	0000194c 	.word	0x0000194c
    3738:	0000195e 	.word	0x0000195e
    373c:	000019c6 	.word	0x000019c6
    3740:	000019f4 	.word	0x000019f4
    3744:	000019f4 	.word	0x000019f4
    3748:	000019f0 	.word	0x000019f0
    374c:	000019c0 	.word	0x000019c0
    3750:	000019cc 	.word	0x000019cc
    3754:	000019ba 	.word	0x000019ba
    3758:	000019d2 	.word	0x000019d2
    375c:	000019d8 	.word	0x000019d8
    3760:	74696e49 	.word	0x74696e49
    3764:	6e6f6420 	.word	0x6e6f6420
    3768:	00002e65 	.word	0x00002e65
    376c:	72617473 	.word	0x72617473
    3770:	676e6974 	.word	0x676e6974
    3774:	70706120 	.word	0x70706120
    3778:	00          	.byte	0x00
    3779:	43          	.byte	0x43
	...

0000377c <_global_impure_ptr>:
    377c:	0c 00 00 20                                         ... 

00003780 <__sf_fake_stdin>:
	...

000037a0 <__sf_fake_stdout>:
	...

000037c0 <__sf_fake_stderr>:
	...

000037e0 <_init>:
    37e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37e2:	46c0      	nop			; (mov r8, r8)
    37e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    37e6:	bc08      	pop	{r3}
    37e8:	469e      	mov	lr, r3
    37ea:	4770      	bx	lr

000037ec <__init_array_start>:
    37ec:	000000dd 	.word	0x000000dd

000037f0 <_fini>:
    37f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37f2:	46c0      	nop			; (mov r8, r8)
    37f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    37f6:	bc08      	pop	{r3}
    37f8:	469e      	mov	lr, r3
    37fa:	4770      	bx	lr

000037fc <__fini_array_start>:
    37fc:	000000b5 	.word	0x000000b5
