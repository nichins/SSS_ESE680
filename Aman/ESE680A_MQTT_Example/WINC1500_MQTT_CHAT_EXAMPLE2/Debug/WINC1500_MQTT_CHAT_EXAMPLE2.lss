
WINC1500_MQTT_CHAT_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ece0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000084  20000000  0000ece0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000450  20000084  0000ed64  00020084  2**2
                  ALLOC
  3 .stack        00002004  200004d4  0000f1b4  00020084  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  6 .debug_info   00051ded  00000000  00000000  00020176  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000068fc  00000000  00000000  00071f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000659c  00000000  00000000  0007885f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001228  00000000  00000000  0007edfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010a0  00000000  00000000  00080023  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021fd4  00000000  00000000  000810c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001b816  00000000  00000000  000a3097  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094a99  00000000  00000000  000be8ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004814  00000000  00000000  00153348  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 24 00 20 49 9e 00 00 41 9f 00 00 41 9f 00 00     .$. I...A...A...
	...
      2c:	41 9f 00 00 00 00 00 00 00 00 00 00 41 9f 00 00     A...........A...
      3c:	41 9f 00 00 41 9f 00 00 41 9f 00 00 41 9f 00 00     A...A...A...A...
      4c:	41 9f 00 00 b9 5e 00 00 41 9f 00 00 41 9f 00 00     A....^..A...A...
      5c:	41 9f 00 00 41 9f 00 00 15 6a 00 00 2d 6a 00 00     A...A....j..-j..
      6c:	45 6a 00 00 5d 6a 00 00 75 6a 00 00 8d 6a 00 00     Ej..]j..uj...j..
      7c:	91 9d 00 00 a5 9d 00 00 b9 9d 00 00 41 9f 00 00     ............A...
      8c:	41 9f 00 00 41 9f 00 00 00 00 00 00 00 00 00 00     A...A...........
      9c:	41 9f 00 00 41 9f 00 00 41 9f 00 00 41 9f 00 00     A...A...A...A...
      ac:	41 9f 00 00 00 00 00 00                             A.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000084 	.word	0x20000084
      d4:	00000000 	.word	0x00000000
      d8:	0000ece0 	.word	0x0000ece0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000088 	.word	0x20000088
     108:	0000ece0 	.word	0x0000ece0
     10c:	0000ece0 	.word	0x0000ece0
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	00008d55 	.word	0x00008d55
     190:	20000000 	.word	0x20000000
     194:	0000bf21 	.word	0x0000bf21
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b084      	sub	sp, #16
     1d4:	af00      	add	r7, sp, #0
     1d6:	0002      	movs	r2, r0
     1d8:	1dfb      	adds	r3, r7, #7
     1da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     1dc:	230f      	movs	r3, #15
     1de:	18fb      	adds	r3, r7, r3
     1e0:	1dfa      	adds	r2, r7, #7
     1e2:	7812      	ldrb	r2, [r2, #0]
     1e4:	09d2      	lsrs	r2, r2, #7
     1e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     1e8:	230e      	movs	r3, #14
     1ea:	18fb      	adds	r3, r7, r3
     1ec:	1dfa      	adds	r2, r7, #7
     1ee:	7812      	ldrb	r2, [r2, #0]
     1f0:	0952      	lsrs	r2, r2, #5
     1f2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     1f4:	4b0d      	ldr	r3, [pc, #52]	; (22c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     1f6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1f8:	230f      	movs	r3, #15
     1fa:	18fb      	adds	r3, r7, r3
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d10f      	bne.n	222 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     202:	230f      	movs	r3, #15
     204:	18fb      	adds	r3, r7, r3
     206:	781b      	ldrb	r3, [r3, #0]
     208:	009b      	lsls	r3, r3, #2
     20a:	2210      	movs	r2, #16
     20c:	4694      	mov	ip, r2
     20e:	44bc      	add	ip, r7
     210:	4463      	add	r3, ip
     212:	3b08      	subs	r3, #8
     214:	681a      	ldr	r2, [r3, #0]
     216:	230e      	movs	r3, #14
     218:	18fb      	adds	r3, r7, r3
     21a:	781b      	ldrb	r3, [r3, #0]
     21c:	01db      	lsls	r3, r3, #7
     21e:	18d3      	adds	r3, r2, r3
     220:	e000      	b.n	224 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     222:	2300      	movs	r3, #0
	}
}
     224:	0018      	movs	r0, r3
     226:	46bd      	mov	sp, r7
     228:	b004      	add	sp, #16
     22a:	bd80      	pop	{r7, pc}
     22c:	41004400 	.word	0x41004400

00000230 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     230:	b580      	push	{r7, lr}
     232:	b082      	sub	sp, #8
     234:	af00      	add	r7, sp, #0
     236:	0002      	movs	r2, r0
     238:	1dfb      	adds	r3, r7, #7
     23a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     23c:	1dfb      	adds	r3, r7, #7
     23e:	781b      	ldrb	r3, [r3, #0]
     240:	0018      	movs	r0, r3
     242:	4b03      	ldr	r3, [pc, #12]	; (250 <port_get_group_from_gpio_pin+0x20>)
     244:	4798      	blx	r3
     246:	0003      	movs	r3, r0
}
     248:	0018      	movs	r0, r3
     24a:	46bd      	mov	sp, r7
     24c:	b002      	add	sp, #8
     24e:	bd80      	pop	{r7, pc}
     250:	000001d1 	.word	0x000001d1

00000254 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     254:	b580      	push	{r7, lr}
     256:	b082      	sub	sp, #8
     258:	af00      	add	r7, sp, #0
     25a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     25c:	687b      	ldr	r3, [r7, #4]
     25e:	2200      	movs	r2, #0
     260:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     262:	687b      	ldr	r3, [r7, #4]
     264:	2201      	movs	r2, #1
     266:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     268:	687b      	ldr	r3, [r7, #4]
     26a:	2200      	movs	r2, #0
     26c:	709a      	strb	r2, [r3, #2]
}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	46bd      	mov	sp, r7
     272:	b002      	add	sp, #8
     274:	bd80      	pop	{r7, pc}
	...

00000278 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     278:	b580      	push	{r7, lr}
     27a:	b084      	sub	sp, #16
     27c:	af00      	add	r7, sp, #0
     27e:	0002      	movs	r2, r0
     280:	1dfb      	adds	r3, r7, #7
     282:	701a      	strb	r2, [r3, #0]
     284:	1dbb      	adds	r3, r7, #6
     286:	1c0a      	adds	r2, r1, #0
     288:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     28a:	1dfb      	adds	r3, r7, #7
     28c:	781b      	ldrb	r3, [r3, #0]
     28e:	0018      	movs	r0, r3
     290:	4b0d      	ldr	r3, [pc, #52]	; (2c8 <port_pin_set_output_level+0x50>)
     292:	4798      	blx	r3
     294:	0003      	movs	r3, r0
     296:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     298:	1dfb      	adds	r3, r7, #7
     29a:	781b      	ldrb	r3, [r3, #0]
     29c:	221f      	movs	r2, #31
     29e:	4013      	ands	r3, r2
     2a0:	2201      	movs	r2, #1
     2a2:	409a      	lsls	r2, r3
     2a4:	0013      	movs	r3, r2
     2a6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2a8:	1dbb      	adds	r3, r7, #6
     2aa:	781b      	ldrb	r3, [r3, #0]
     2ac:	2b00      	cmp	r3, #0
     2ae:	d003      	beq.n	2b8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2b0:	68fb      	ldr	r3, [r7, #12]
     2b2:	68ba      	ldr	r2, [r7, #8]
     2b4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2b6:	e002      	b.n	2be <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2b8:	68fb      	ldr	r3, [r7, #12]
     2ba:	68ba      	ldr	r2, [r7, #8]
     2bc:	615a      	str	r2, [r3, #20]
}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	46bd      	mov	sp, r7
     2c2:	b004      	add	sp, #16
     2c4:	bd80      	pop	{r7, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	00000231 	.word	0x00000231

000002cc <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     2cc:	b580      	push	{r7, lr}
     2ce:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     2d0:	4b04      	ldr	r3, [pc, #16]	; (2e4 <system_interrupt_enable_global+0x18>)
     2d2:	2201      	movs	r2, #1
     2d4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     2d6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     2da:	b662      	cpsie	i
}
     2dc:	46c0      	nop			; (mov r8, r8)
     2de:	46bd      	mov	sp, r7
     2e0:	bd80      	pop	{r7, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	2000000a 	.word	0x2000000a

000002e8 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	af00      	add	r7, sp, #0
	if (gpfIsr) {
     2ec:	4b04      	ldr	r3, [pc, #16]	; (300 <chip_isr+0x18>)
     2ee:	681b      	ldr	r3, [r3, #0]
     2f0:	2b00      	cmp	r3, #0
     2f2:	d002      	beq.n	2fa <chip_isr+0x12>
		gpfIsr();
     2f4:	4b02      	ldr	r3, [pc, #8]	; (300 <chip_isr+0x18>)
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	4798      	blx	r3
	}
}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	46bd      	mov	sp, r7
     2fe:	bd80      	pop	{r7, pc}
     300:	200000a0 	.word	0x200000a0

00000304 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     304:	b580      	push	{r7, lr}
     306:	b082      	sub	sp, #8
     308:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     30a:	1d3b      	adds	r3, r7, #4
     30c:	0018      	movs	r0, r3
     30e:	4b10      	ldr	r3, [pc, #64]	; (350 <init_chip_pins+0x4c>)
     310:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     312:	1d3b      	adds	r3, r7, #4
     314:	2201      	movs	r2, #1
     316:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     318:	1d3b      	adds	r3, r7, #4
     31a:	0019      	movs	r1, r3
     31c:	201b      	movs	r0, #27
     31e:	4b0d      	ldr	r3, [pc, #52]	; (354 <init_chip_pins+0x50>)
     320:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     322:	1d3b      	adds	r3, r7, #4
     324:	0019      	movs	r1, r3
     326:	201c      	movs	r0, #28
     328:	4b0a      	ldr	r3, [pc, #40]	; (354 <init_chip_pins+0x50>)
     32a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     32c:	1d3b      	adds	r3, r7, #4
     32e:	0019      	movs	r1, r3
     330:	2028      	movs	r0, #40	; 0x28
     332:	4b08      	ldr	r3, [pc, #32]	; (354 <init_chip_pins+0x50>)
     334:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     336:	2100      	movs	r1, #0
     338:	201c      	movs	r0, #28
     33a:	4b07      	ldr	r3, [pc, #28]	; (358 <init_chip_pins+0x54>)
     33c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     33e:	2100      	movs	r1, #0
     340:	201b      	movs	r0, #27
     342:	4b05      	ldr	r3, [pc, #20]	; (358 <init_chip_pins+0x54>)
     344:	4798      	blx	r3
}
     346:	46c0      	nop			; (mov r8, r8)
     348:	46bd      	mov	sp, r7
     34a:	b002      	add	sp, #8
     34c:	bd80      	pop	{r7, pc}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	00000255 	.word	0x00000255
     354:	0000631d 	.word	0x0000631d
     358:	00000279 	.word	0x00000279

0000035c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     35c:	b580      	push	{r7, lr}
     35e:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     360:	4b0c      	ldr	r3, [pc, #48]	; (394 <nm_bsp_init+0x38>)
     362:	2200      	movs	r2, #0
     364:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     366:	4b0c      	ldr	r3, [pc, #48]	; (398 <nm_bsp_init+0x3c>)
     368:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     36a:	4b0c      	ldr	r3, [pc, #48]	; (39c <nm_bsp_init+0x40>)
     36c:	681b      	ldr	r3, [r3, #0]
     36e:	2201      	movs	r2, #1
     370:	4013      	ands	r3, r2
     372:	d004      	beq.n	37e <nm_bsp_init+0x22>
     374:	4b09      	ldr	r3, [pc, #36]	; (39c <nm_bsp_init+0x40>)
     376:	681b      	ldr	r3, [r3, #0]
     378:	2202      	movs	r2, #2
     37a:	4013      	ands	r3, r2
     37c:	d101      	bne.n	382 <nm_bsp_init+0x26>
	    delay_init();
     37e:	4b08      	ldr	r3, [pc, #32]	; (3a0 <nm_bsp_init+0x44>)
     380:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     382:	4b08      	ldr	r3, [pc, #32]	; (3a4 <nm_bsp_init+0x48>)
     384:	4798      	blx	r3

	system_interrupt_enable_global();
     386:	4b08      	ldr	r3, [pc, #32]	; (3a8 <nm_bsp_init+0x4c>)
     388:	4798      	blx	r3

	return M2M_SUCCESS;
     38a:	2300      	movs	r3, #0
}
     38c:	0018      	movs	r0, r3
     38e:	46bd      	mov	sp, r7
     390:	bd80      	pop	{r7, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	200000a0 	.word	0x200000a0
     398:	00000305 	.word	0x00000305
     39c:	e000e010 	.word	0xe000e010
     3a0:	00000149 	.word	0x00000149
     3a4:	000003ad 	.word	0x000003ad
     3a8:	000002cd 	.word	0x000002cd

000003ac <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     3ac:	b580      	push	{r7, lr}
     3ae:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     3b0:	2100      	movs	r1, #0
     3b2:	201c      	movs	r0, #28
     3b4:	4b0c      	ldr	r3, [pc, #48]	; (3e8 <nm_bsp_reset+0x3c>)
     3b6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     3b8:	2100      	movs	r1, #0
     3ba:	201b      	movs	r0, #27
     3bc:	4b0a      	ldr	r3, [pc, #40]	; (3e8 <nm_bsp_reset+0x3c>)
     3be:	4798      	blx	r3
	nm_bsp_sleep(100);
     3c0:	2064      	movs	r0, #100	; 0x64
     3c2:	4b0a      	ldr	r3, [pc, #40]	; (3ec <nm_bsp_reset+0x40>)
     3c4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     3c6:	2101      	movs	r1, #1
     3c8:	201c      	movs	r0, #28
     3ca:	4b07      	ldr	r3, [pc, #28]	; (3e8 <nm_bsp_reset+0x3c>)
     3cc:	4798      	blx	r3
	nm_bsp_sleep(100);
     3ce:	2064      	movs	r0, #100	; 0x64
     3d0:	4b06      	ldr	r3, [pc, #24]	; (3ec <nm_bsp_reset+0x40>)
     3d2:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     3d4:	2101      	movs	r1, #1
     3d6:	201b      	movs	r0, #27
     3d8:	4b03      	ldr	r3, [pc, #12]	; (3e8 <nm_bsp_reset+0x3c>)
     3da:	4798      	blx	r3
	nm_bsp_sleep(100);
     3dc:	2064      	movs	r0, #100	; 0x64
     3de:	4b03      	ldr	r3, [pc, #12]	; (3ec <nm_bsp_reset+0x40>)
     3e0:	4798      	blx	r3
}
     3e2:	46c0      	nop			; (mov r8, r8)
     3e4:	46bd      	mov	sp, r7
     3e6:	bd80      	pop	{r7, pc}
     3e8:	00000279 	.word	0x00000279
     3ec:	000003f1 	.word	0x000003f1

000003f0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     3f0:	b580      	push	{r7, lr}
     3f2:	b082      	sub	sp, #8
     3f4:	af00      	add	r7, sp, #0
     3f6:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     3f8:	e002      	b.n	400 <nm_bsp_sleep+0x10>
		delay_ms(1);
     3fa:	2001      	movs	r0, #1
     3fc:	4b05      	ldr	r3, [pc, #20]	; (414 <nm_bsp_sleep+0x24>)
     3fe:	4798      	blx	r3
	while (u32TimeMsec--) {
     400:	687b      	ldr	r3, [r7, #4]
     402:	1e5a      	subs	r2, r3, #1
     404:	607a      	str	r2, [r7, #4]
     406:	2b00      	cmp	r3, #0
     408:	d1f7      	bne.n	3fa <nm_bsp_sleep+0xa>
	}
}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	46bd      	mov	sp, r7
     40e:	b002      	add	sp, #8
     410:	bd80      	pop	{r7, pc}
     412:	46c0      	nop			; (mov r8, r8)
     414:	000001a1 	.word	0x000001a1

00000418 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     418:	b580      	push	{r7, lr}
     41a:	b086      	sub	sp, #24
     41c:	af00      	add	r7, sp, #0
     41e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     420:	4b15      	ldr	r3, [pc, #84]	; (478 <nm_bsp_register_isr+0x60>)
     422:	687a      	ldr	r2, [r7, #4]
     424:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     426:	230c      	movs	r3, #12
     428:	18fb      	adds	r3, r7, r3
     42a:	0018      	movs	r0, r3
     42c:	4b13      	ldr	r3, [pc, #76]	; (47c <nm_bsp_register_isr+0x64>)
     42e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     430:	230c      	movs	r3, #12
     432:	18fb      	adds	r3, r7, r3
     434:	2229      	movs	r2, #41	; 0x29
     436:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     438:	230c      	movs	r3, #12
     43a:	18fb      	adds	r3, r7, r3
     43c:	2200      	movs	r2, #0
     43e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     440:	230c      	movs	r3, #12
     442:	18fb      	adds	r3, r7, r3
     444:	2201      	movs	r2, #1
     446:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     448:	230c      	movs	r3, #12
     44a:	18fb      	adds	r3, r7, r3
     44c:	2202      	movs	r2, #2
     44e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     450:	230c      	movs	r3, #12
     452:	18fb      	adds	r3, r7, r3
     454:	0019      	movs	r1, r3
     456:	2009      	movs	r0, #9
     458:	4b09      	ldr	r3, [pc, #36]	; (480 <nm_bsp_register_isr+0x68>)
     45a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     45c:	4b09      	ldr	r3, [pc, #36]	; (484 <nm_bsp_register_isr+0x6c>)
     45e:	2200      	movs	r2, #0
     460:	2109      	movs	r1, #9
     462:	0018      	movs	r0, r3
     464:	4b08      	ldr	r3, [pc, #32]	; (488 <nm_bsp_register_isr+0x70>)
     466:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     468:	2100      	movs	r1, #0
     46a:	2009      	movs	r0, #9
     46c:	4b07      	ldr	r3, [pc, #28]	; (48c <nm_bsp_register_isr+0x74>)
     46e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     470:	46c0      	nop			; (mov r8, r8)
     472:	46bd      	mov	sp, r7
     474:	b006      	add	sp, #24
     476:	bd80      	pop	{r7, pc}
     478:	200000a0 	.word	0x200000a0
     47c:	000061c5 	.word	0x000061c5
     480:	000061f9 	.word	0x000061f9
     484:	000002e9 	.word	0x000002e9
     488:	00005dc5 	.word	0x00005dc5
     48c:	00005e29 	.word	0x00005e29

00000490 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     490:	b580      	push	{r7, lr}
     492:	b082      	sub	sp, #8
     494:	af00      	add	r7, sp, #0
     496:	0002      	movs	r2, r0
     498:	1dfb      	adds	r3, r7, #7
     49a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     49c:	1dfb      	adds	r3, r7, #7
     49e:	781b      	ldrb	r3, [r3, #0]
     4a0:	2b00      	cmp	r3, #0
     4a2:	d004      	beq.n	4ae <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     4a4:	2100      	movs	r1, #0
     4a6:	2009      	movs	r0, #9
     4a8:	4b05      	ldr	r3, [pc, #20]	; (4c0 <nm_bsp_interrupt_ctrl+0x30>)
     4aa:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     4ac:	e003      	b.n	4b6 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     4ae:	2100      	movs	r1, #0
     4b0:	2009      	movs	r0, #9
     4b2:	4b04      	ldr	r3, [pc, #16]	; (4c4 <nm_bsp_interrupt_ctrl+0x34>)
     4b4:	4798      	blx	r3
}
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	46bd      	mov	sp, r7
     4ba:	b002      	add	sp, #8
     4bc:	bd80      	pop	{r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	00005e29 	.word	0x00005e29
     4c4:	00005e71 	.word	0x00005e71

000004c8 <system_pinmux_get_group_from_gpio_pin>:
{
     4c8:	b580      	push	{r7, lr}
     4ca:	b084      	sub	sp, #16
     4cc:	af00      	add	r7, sp, #0
     4ce:	0002      	movs	r2, r0
     4d0:	1dfb      	adds	r3, r7, #7
     4d2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     4d4:	230f      	movs	r3, #15
     4d6:	18fb      	adds	r3, r7, r3
     4d8:	1dfa      	adds	r2, r7, #7
     4da:	7812      	ldrb	r2, [r2, #0]
     4dc:	09d2      	lsrs	r2, r2, #7
     4de:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     4e0:	230e      	movs	r3, #14
     4e2:	18fb      	adds	r3, r7, r3
     4e4:	1dfa      	adds	r2, r7, #7
     4e6:	7812      	ldrb	r2, [r2, #0]
     4e8:	0952      	lsrs	r2, r2, #5
     4ea:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     4ec:	4b0d      	ldr	r3, [pc, #52]	; (524 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     4ee:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     4f0:	230f      	movs	r3, #15
     4f2:	18fb      	adds	r3, r7, r3
     4f4:	781b      	ldrb	r3, [r3, #0]
     4f6:	2b00      	cmp	r3, #0
     4f8:	d10f      	bne.n	51a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     4fa:	230f      	movs	r3, #15
     4fc:	18fb      	adds	r3, r7, r3
     4fe:	781b      	ldrb	r3, [r3, #0]
     500:	009b      	lsls	r3, r3, #2
     502:	2210      	movs	r2, #16
     504:	4694      	mov	ip, r2
     506:	44bc      	add	ip, r7
     508:	4463      	add	r3, ip
     50a:	3b08      	subs	r3, #8
     50c:	681a      	ldr	r2, [r3, #0]
     50e:	230e      	movs	r3, #14
     510:	18fb      	adds	r3, r7, r3
     512:	781b      	ldrb	r3, [r3, #0]
     514:	01db      	lsls	r3, r3, #7
     516:	18d3      	adds	r3, r2, r3
     518:	e000      	b.n	51c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     51a:	2300      	movs	r3, #0
}
     51c:	0018      	movs	r0, r3
     51e:	46bd      	mov	sp, r7
     520:	b004      	add	sp, #16
     522:	bd80      	pop	{r7, pc}
     524:	41004400 	.word	0x41004400

00000528 <port_get_group_from_gpio_pin>:
{
     528:	b580      	push	{r7, lr}
     52a:	b082      	sub	sp, #8
     52c:	af00      	add	r7, sp, #0
     52e:	0002      	movs	r2, r0
     530:	1dfb      	adds	r3, r7, #7
     532:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     534:	1dfb      	adds	r3, r7, #7
     536:	781b      	ldrb	r3, [r3, #0]
     538:	0018      	movs	r0, r3
     53a:	4b03      	ldr	r3, [pc, #12]	; (548 <port_get_group_from_gpio_pin+0x20>)
     53c:	4798      	blx	r3
     53e:	0003      	movs	r3, r0
}
     540:	0018      	movs	r0, r3
     542:	46bd      	mov	sp, r7
     544:	b002      	add	sp, #8
     546:	bd80      	pop	{r7, pc}
     548:	000004c9 	.word	0x000004c9

0000054c <port_get_config_defaults>:
{
     54c:	b580      	push	{r7, lr}
     54e:	b082      	sub	sp, #8
     550:	af00      	add	r7, sp, #0
     552:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
     554:	687b      	ldr	r3, [r7, #4]
     556:	2200      	movs	r2, #0
     558:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	2201      	movs	r2, #1
     55e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     560:	687b      	ldr	r3, [r7, #4]
     562:	2200      	movs	r2, #0
     564:	709a      	strb	r2, [r3, #2]
}
     566:	46c0      	nop			; (mov r8, r8)
     568:	46bd      	mov	sp, r7
     56a:	b002      	add	sp, #8
     56c:	bd80      	pop	{r7, pc}
	...

00000570 <port_pin_set_output_level>:
{
     570:	b580      	push	{r7, lr}
     572:	b084      	sub	sp, #16
     574:	af00      	add	r7, sp, #0
     576:	0002      	movs	r2, r0
     578:	1dfb      	adds	r3, r7, #7
     57a:	701a      	strb	r2, [r3, #0]
     57c:	1dbb      	adds	r3, r7, #6
     57e:	1c0a      	adds	r2, r1, #0
     580:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     582:	1dfb      	adds	r3, r7, #7
     584:	781b      	ldrb	r3, [r3, #0]
     586:	0018      	movs	r0, r3
     588:	4b0d      	ldr	r3, [pc, #52]	; (5c0 <port_pin_set_output_level+0x50>)
     58a:	4798      	blx	r3
     58c:	0003      	movs	r3, r0
     58e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     590:	1dfb      	adds	r3, r7, #7
     592:	781b      	ldrb	r3, [r3, #0]
     594:	221f      	movs	r2, #31
     596:	4013      	ands	r3, r2
     598:	2201      	movs	r2, #1
     59a:	409a      	lsls	r2, r3
     59c:	0013      	movs	r3, r2
     59e:	60bb      	str	r3, [r7, #8]
	if (level) {
     5a0:	1dbb      	adds	r3, r7, #6
     5a2:	781b      	ldrb	r3, [r3, #0]
     5a4:	2b00      	cmp	r3, #0
     5a6:	d003      	beq.n	5b0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     5a8:	68fb      	ldr	r3, [r7, #12]
     5aa:	68ba      	ldr	r2, [r7, #8]
     5ac:	619a      	str	r2, [r3, #24]
}
     5ae:	e002      	b.n	5b6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     5b0:	68fb      	ldr	r3, [r7, #12]
     5b2:	68ba      	ldr	r2, [r7, #8]
     5b4:	615a      	str	r2, [r3, #20]
}
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	46bd      	mov	sp, r7
     5ba:	b004      	add	sp, #16
     5bc:	bd80      	pop	{r7, pc}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	00000529 	.word	0x00000529

000005c4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     5c4:	b580      	push	{r7, lr}
     5c6:	b082      	sub	sp, #8
     5c8:	af00      	add	r7, sp, #0
     5ca:	0002      	movs	r2, r0
     5cc:	1dfb      	adds	r3, r7, #7
     5ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5d0:	4b06      	ldr	r3, [pc, #24]	; (5ec <system_interrupt_enable+0x28>)
     5d2:	1dfa      	adds	r2, r7, #7
     5d4:	7812      	ldrb	r2, [r2, #0]
     5d6:	0011      	movs	r1, r2
     5d8:	221f      	movs	r2, #31
     5da:	400a      	ands	r2, r1
     5dc:	2101      	movs	r1, #1
     5de:	4091      	lsls	r1, r2
     5e0:	000a      	movs	r2, r1
     5e2:	601a      	str	r2, [r3, #0]
}
     5e4:	46c0      	nop			; (mov r8, r8)
     5e6:	46bd      	mov	sp, r7
     5e8:	b002      	add	sp, #8
     5ea:	bd80      	pop	{r7, pc}
     5ec:	e000e100 	.word	0xe000e100

000005f0 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     5f0:	b580      	push	{r7, lr}
     5f2:	b082      	sub	sp, #8
     5f4:	af00      	add	r7, sp, #0
     5f6:	0002      	movs	r2, r0
     5f8:	1dfb      	adds	r3, r7, #7
     5fa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5fc:	4a07      	ldr	r2, [pc, #28]	; (61c <system_interrupt_disable+0x2c>)
     5fe:	1dfb      	adds	r3, r7, #7
     600:	781b      	ldrb	r3, [r3, #0]
     602:	0019      	movs	r1, r3
     604:	231f      	movs	r3, #31
     606:	400b      	ands	r3, r1
     608:	2101      	movs	r1, #1
     60a:	4099      	lsls	r1, r3
     60c:	000b      	movs	r3, r1
     60e:	0019      	movs	r1, r3
     610:	2380      	movs	r3, #128	; 0x80
     612:	50d1      	str	r1, [r2, r3]
}
     614:	46c0      	nop			; (mov r8, r8)
     616:	46bd      	mov	sp, r7
     618:	b002      	add	sp, #8
     61a:	bd80      	pop	{r7, pc}
     61c:	e000e100 	.word	0xe000e100

00000620 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     620:	b580      	push	{r7, lr}
     622:	b084      	sub	sp, #16
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     628:	687b      	ldr	r3, [r7, #4]
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     62e:	68fb      	ldr	r3, [r7, #12]
     630:	69db      	ldr	r3, [r3, #28]
     632:	1e5a      	subs	r2, r3, #1
     634:	4193      	sbcs	r3, r2
     636:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     638:	0018      	movs	r0, r3
     63a:	46bd      	mov	sp, r7
     63c:	b004      	add	sp, #16
     63e:	bd80      	pop	{r7, pc}

00000640 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     640:	b580      	push	{r7, lr}
     642:	b082      	sub	sp, #8
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     648:	687b      	ldr	r3, [r7, #4]
     64a:	2201      	movs	r2, #1
     64c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     64e:	687b      	ldr	r3, [r7, #4]
     650:	2200      	movs	r2, #0
     652:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     654:	687b      	ldr	r3, [r7, #4]
     656:	2200      	movs	r2, #0
     658:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	22c0      	movs	r2, #192	; 0xc0
     65e:	0392      	lsls	r2, r2, #14
     660:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     662:	687b      	ldr	r3, [r7, #4]
     664:	2200      	movs	r2, #0
     666:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     668:	687b      	ldr	r3, [r7, #4]
     66a:	2200      	movs	r2, #0
     66c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     66e:	687b      	ldr	r3, [r7, #4]
     670:	2201      	movs	r2, #1
     672:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     674:	687b      	ldr	r3, [r7, #4]
     676:	2201      	movs	r2, #1
     678:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	2200      	movs	r2, #0
     67e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     680:	687b      	ldr	r3, [r7, #4]
     682:	2224      	movs	r2, #36	; 0x24
     684:	2100      	movs	r1, #0
     686:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     688:	687b      	ldr	r3, [r7, #4]
     68a:	3318      	adds	r3, #24
     68c:	220c      	movs	r2, #12
     68e:	2100      	movs	r1, #0
     690:	0018      	movs	r0, r3
     692:	4b0a      	ldr	r3, [pc, #40]	; (6bc <spi_get_config_defaults+0x7c>)
     694:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     696:	687b      	ldr	r3, [r7, #4]
     698:	4a09      	ldr	r2, [pc, #36]	; (6c0 <spi_get_config_defaults+0x80>)
     69a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     69c:	687b      	ldr	r3, [r7, #4]
     69e:	2200      	movs	r2, #0
     6a0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	2200      	movs	r2, #0
     6a6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	2200      	movs	r2, #0
     6ac:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	2200      	movs	r2, #0
     6b2:	635a      	str	r2, [r3, #52]	; 0x34

};
     6b4:	46c0      	nop			; (mov r8, r8)
     6b6:	46bd      	mov	sp, r7
     6b8:	b002      	add	sp, #8
     6ba:	bd80      	pop	{r7, pc}
     6bc:	0000c2f3 	.word	0x0000c2f3
     6c0:	000186a0 	.word	0x000186a0

000006c4 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     6c4:	b580      	push	{r7, lr}
     6c6:	b082      	sub	sp, #8
     6c8:	af00      	add	r7, sp, #0
     6ca:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	220a      	movs	r2, #10
     6d0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	2200      	movs	r2, #0
     6d6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	2200      	movs	r2, #0
     6dc:	709a      	strb	r2, [r3, #2]
}
     6de:	46c0      	nop			; (mov r8, r8)
     6e0:	46bd      	mov	sp, r7
     6e2:	b002      	add	sp, #8
     6e4:	bd80      	pop	{r7, pc}
	...

000006e8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     6e8:	b580      	push	{r7, lr}
     6ea:	b084      	sub	sp, #16
     6ec:	af00      	add	r7, sp, #0
     6ee:	6078      	str	r0, [r7, #4]
     6f0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     6f2:	683b      	ldr	r3, [r7, #0]
     6f4:	781a      	ldrb	r2, [r3, #0]
     6f6:	687b      	ldr	r3, [r7, #4]
     6f8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     6fa:	683b      	ldr	r3, [r7, #0]
     6fc:	785a      	ldrb	r2, [r3, #1]
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     702:	683b      	ldr	r3, [r7, #0]
     704:	789a      	ldrb	r2, [r3, #2]
     706:	687b      	ldr	r3, [r7, #4]
     708:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     70a:	230c      	movs	r3, #12
     70c:	18fb      	adds	r3, r7, r3
     70e:	0018      	movs	r0, r3
     710:	4b0b      	ldr	r3, [pc, #44]	; (740 <spi_attach_slave+0x58>)
     712:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     714:	230c      	movs	r3, #12
     716:	18fb      	adds	r3, r7, r3
     718:	2201      	movs	r2, #1
     71a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	781b      	ldrb	r3, [r3, #0]
     720:	220c      	movs	r2, #12
     722:	18ba      	adds	r2, r7, r2
     724:	0011      	movs	r1, r2
     726:	0018      	movs	r0, r3
     728:	4b06      	ldr	r3, [pc, #24]	; (744 <spi_attach_slave+0x5c>)
     72a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	781b      	ldrb	r3, [r3, #0]
     730:	2101      	movs	r1, #1
     732:	0018      	movs	r0, r3
     734:	4b04      	ldr	r3, [pc, #16]	; (748 <spi_attach_slave+0x60>)
     736:	4798      	blx	r3
}
     738:	46c0      	nop			; (mov r8, r8)
     73a:	46bd      	mov	sp, r7
     73c:	b004      	add	sp, #16
     73e:	bd80      	pop	{r7, pc}
     740:	0000054d 	.word	0x0000054d
     744:	0000631d 	.word	0x0000631d
     748:	00000571 	.word	0x00000571

0000074c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     74c:	b580      	push	{r7, lr}
     74e:	b084      	sub	sp, #16
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     754:	687b      	ldr	r3, [r7, #4]
     756:	681b      	ldr	r3, [r3, #0]
     758:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	681b      	ldr	r3, [r3, #0]
     75e:	0018      	movs	r0, r3
     760:	4b0b      	ldr	r3, [pc, #44]	; (790 <spi_enable+0x44>)
     762:	4798      	blx	r3
     764:	0003      	movs	r3, r0
     766:	0018      	movs	r0, r3
     768:	4b0a      	ldr	r3, [pc, #40]	; (794 <spi_enable+0x48>)
     76a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     76c:	46c0      	nop			; (mov r8, r8)
     76e:	687b      	ldr	r3, [r7, #4]
     770:	0018      	movs	r0, r3
     772:	4b09      	ldr	r3, [pc, #36]	; (798 <spi_enable+0x4c>)
     774:	4798      	blx	r3
     776:	1e03      	subs	r3, r0, #0
     778:	d1f9      	bne.n	76e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     77a:	68fb      	ldr	r3, [r7, #12]
     77c:	681b      	ldr	r3, [r3, #0]
     77e:	2202      	movs	r2, #2
     780:	431a      	orrs	r2, r3
     782:	68fb      	ldr	r3, [r7, #12]
     784:	601a      	str	r2, [r3, #0]
}
     786:	46c0      	nop			; (mov r8, r8)
     788:	46bd      	mov	sp, r7
     78a:	b004      	add	sp, #16
     78c:	bd80      	pop	{r7, pc}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	000069c9 	.word	0x000069c9
     794:	000005c5 	.word	0x000005c5
     798:	00000621 	.word	0x00000621

0000079c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     79c:	b580      	push	{r7, lr}
     79e:	b084      	sub	sp, #16
     7a0:	af00      	add	r7, sp, #0
     7a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	681b      	ldr	r3, [r3, #0]
     7a8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	681b      	ldr	r3, [r3, #0]
     7ae:	0018      	movs	r0, r3
     7b0:	4b0e      	ldr	r3, [pc, #56]	; (7ec <spi_disable+0x50>)
     7b2:	4798      	blx	r3
     7b4:	0003      	movs	r3, r0
     7b6:	0018      	movs	r0, r3
     7b8:	4b0d      	ldr	r3, [pc, #52]	; (7f0 <spi_disable+0x54>)
     7ba:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     7bc:	46c0      	nop			; (mov r8, r8)
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	0018      	movs	r0, r3
     7c2:	4b0c      	ldr	r3, [pc, #48]	; (7f4 <spi_disable+0x58>)
     7c4:	4798      	blx	r3
     7c6:	1e03      	subs	r3, r0, #0
     7c8:	d1f9      	bne.n	7be <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     7ca:	68fb      	ldr	r3, [r7, #12]
     7cc:	228f      	movs	r2, #143	; 0x8f
     7ce:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     7d0:	68fb      	ldr	r3, [r7, #12]
     7d2:	228f      	movs	r2, #143	; 0x8f
     7d4:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     7d6:	68fb      	ldr	r3, [r7, #12]
     7d8:	681b      	ldr	r3, [r3, #0]
     7da:	2202      	movs	r2, #2
     7dc:	4393      	bics	r3, r2
     7de:	001a      	movs	r2, r3
     7e0:	68fb      	ldr	r3, [r7, #12]
     7e2:	601a      	str	r2, [r3, #0]
}
     7e4:	46c0      	nop			; (mov r8, r8)
     7e6:	46bd      	mov	sp, r7
     7e8:	b004      	add	sp, #16
     7ea:	bd80      	pop	{r7, pc}
     7ec:	000069c9 	.word	0x000069c9
     7f0:	000005f1 	.word	0x000005f1
     7f4:	00000621 	.word	0x00000621

000007f8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b084      	sub	sp, #16
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     800:	687b      	ldr	r3, [r7, #4]
     802:	681b      	ldr	r3, [r3, #0]
     804:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     806:	68fb      	ldr	r3, [r7, #12]
     808:	7e1b      	ldrb	r3, [r3, #24]
     80a:	b2db      	uxtb	r3, r3
     80c:	001a      	movs	r2, r3
     80e:	2302      	movs	r3, #2
     810:	4013      	ands	r3, r2
     812:	1e5a      	subs	r2, r3, #1
     814:	4193      	sbcs	r3, r2
     816:	b2db      	uxtb	r3, r3
}
     818:	0018      	movs	r0, r3
     81a:	46bd      	mov	sp, r7
     81c:	b004      	add	sp, #16
     81e:	bd80      	pop	{r7, pc}

00000820 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     820:	b580      	push	{r7, lr}
     822:	b084      	sub	sp, #16
     824:	af00      	add	r7, sp, #0
     826:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     828:	687b      	ldr	r3, [r7, #4]
     82a:	681b      	ldr	r3, [r3, #0]
     82c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     82e:	68fb      	ldr	r3, [r7, #12]
     830:	7e1b      	ldrb	r3, [r3, #24]
     832:	b2db      	uxtb	r3, r3
     834:	001a      	movs	r2, r3
     836:	2301      	movs	r3, #1
     838:	4013      	ands	r3, r2
     83a:	1e5a      	subs	r2, r3, #1
     83c:	4193      	sbcs	r3, r2
     83e:	b2db      	uxtb	r3, r3
}
     840:	0018      	movs	r0, r3
     842:	46bd      	mov	sp, r7
     844:	b004      	add	sp, #16
     846:	bd80      	pop	{r7, pc}

00000848 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     848:	b580      	push	{r7, lr}
     84a:	b084      	sub	sp, #16
     84c:	af00      	add	r7, sp, #0
     84e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     850:	687b      	ldr	r3, [r7, #4]
     852:	681b      	ldr	r3, [r3, #0]
     854:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     856:	68fb      	ldr	r3, [r7, #12]
     858:	7e1b      	ldrb	r3, [r3, #24]
     85a:	b2db      	uxtb	r3, r3
     85c:	001a      	movs	r2, r3
     85e:	2304      	movs	r3, #4
     860:	4013      	ands	r3, r2
     862:	1e5a      	subs	r2, r3, #1
     864:	4193      	sbcs	r3, r2
     866:	b2db      	uxtb	r3, r3
}
     868:	0018      	movs	r0, r3
     86a:	46bd      	mov	sp, r7
     86c:	b004      	add	sp, #16
     86e:	bd80      	pop	{r7, pc}

00000870 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     870:	b580      	push	{r7, lr}
     872:	b084      	sub	sp, #16
     874:	af00      	add	r7, sp, #0
     876:	6078      	str	r0, [r7, #4]
     878:	000a      	movs	r2, r1
     87a:	1cbb      	adds	r3, r7, #2
     87c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     87e:	687b      	ldr	r3, [r7, #4]
     880:	681b      	ldr	r3, [r3, #0]
     882:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     884:	687b      	ldr	r3, [r7, #4]
     886:	0018      	movs	r0, r3
     888:	4b0a      	ldr	r3, [pc, #40]	; (8b4 <spi_write+0x44>)
     88a:	4798      	blx	r3
     88c:	0003      	movs	r3, r0
     88e:	001a      	movs	r2, r3
     890:	2301      	movs	r3, #1
     892:	4053      	eors	r3, r2
     894:	b2db      	uxtb	r3, r3
     896:	2b00      	cmp	r3, #0
     898:	d001      	beq.n	89e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     89a:	2305      	movs	r3, #5
     89c:	e006      	b.n	8ac <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     89e:	1cbb      	adds	r3, r7, #2
     8a0:	881b      	ldrh	r3, [r3, #0]
     8a2:	05db      	lsls	r3, r3, #23
     8a4:	0dda      	lsrs	r2, r3, #23
     8a6:	68fb      	ldr	r3, [r7, #12]
     8a8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     8aa:	2300      	movs	r3, #0
}
     8ac:	0018      	movs	r0, r3
     8ae:	46bd      	mov	sp, r7
     8b0:	b004      	add	sp, #16
     8b2:	bd80      	pop	{r7, pc}
     8b4:	00000821 	.word	0x00000821

000008b8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     8b8:	b580      	push	{r7, lr}
     8ba:	b084      	sub	sp, #16
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8c2:	687b      	ldr	r3, [r7, #4]
     8c4:	681b      	ldr	r3, [r3, #0]
     8c6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     8c8:	687b      	ldr	r3, [r7, #4]
     8ca:	0018      	movs	r0, r3
     8cc:	4b1b      	ldr	r3, [pc, #108]	; (93c <spi_read+0x84>)
     8ce:	4798      	blx	r3
     8d0:	0003      	movs	r3, r0
     8d2:	001a      	movs	r2, r3
     8d4:	2301      	movs	r3, #1
     8d6:	4053      	eors	r3, r2
     8d8:	b2db      	uxtb	r3, r3
     8da:	2b00      	cmp	r3, #0
     8dc:	d001      	beq.n	8e2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     8de:	2310      	movs	r3, #16
     8e0:	e027      	b.n	932 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     8e2:	230f      	movs	r3, #15
     8e4:	18fb      	adds	r3, r7, r3
     8e6:	2200      	movs	r2, #0
     8e8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8ea:	68bb      	ldr	r3, [r7, #8]
     8ec:	8b5b      	ldrh	r3, [r3, #26]
     8ee:	b29b      	uxth	r3, r3
     8f0:	001a      	movs	r2, r3
     8f2:	2304      	movs	r3, #4
     8f4:	4013      	ands	r3, r2
     8f6:	d006      	beq.n	906 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     8f8:	230f      	movs	r3, #15
     8fa:	18fb      	adds	r3, r7, r3
     8fc:	221e      	movs	r2, #30
     8fe:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     900:	68bb      	ldr	r3, [r7, #8]
     902:	2204      	movs	r2, #4
     904:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     906:	687b      	ldr	r3, [r7, #4]
     908:	799b      	ldrb	r3, [r3, #6]
     90a:	2b01      	cmp	r3, #1
     90c:	d108      	bne.n	920 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     90e:	68bb      	ldr	r3, [r7, #8]
     910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     912:	b29b      	uxth	r3, r3
     914:	05db      	lsls	r3, r3, #23
     916:	0ddb      	lsrs	r3, r3, #23
     918:	b29a      	uxth	r2, r3
     91a:	683b      	ldr	r3, [r7, #0]
     91c:	801a      	strh	r2, [r3, #0]
     91e:	e005      	b.n	92c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     920:	68bb      	ldr	r3, [r7, #8]
     922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     924:	b2db      	uxtb	r3, r3
     926:	b29a      	uxth	r2, r3
     928:	683b      	ldr	r3, [r7, #0]
     92a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     92c:	230f      	movs	r3, #15
     92e:	18fb      	adds	r3, r7, r3
     930:	781b      	ldrb	r3, [r3, #0]
}
     932:	0018      	movs	r0, r3
     934:	46bd      	mov	sp, r7
     936:	b004      	add	sp, #16
     938:	bd80      	pop	{r7, pc}
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	00000849 	.word	0x00000849

00000940 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     940:	b580      	push	{r7, lr}
     942:	b086      	sub	sp, #24
     944:	af00      	add	r7, sp, #0
     946:	60f8      	str	r0, [r7, #12]
     948:	60b9      	str	r1, [r7, #8]
     94a:	1dbb      	adds	r3, r7, #6
     94c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     94e:	2313      	movs	r3, #19
     950:	18fb      	adds	r3, r7, r3
     952:	2200      	movs	r2, #0
     954:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     956:	2317      	movs	r3, #23
     958:	18fb      	adds	r3, r7, r3
     95a:	2200      	movs	r2, #0
     95c:	701a      	strb	r2, [r3, #0]
     95e:	2316      	movs	r3, #22
     960:	18fb      	adds	r3, r7, r3
     962:	2200      	movs	r2, #0
     964:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     966:	2314      	movs	r3, #20
     968:	18fb      	adds	r3, r7, r3
     96a:	2200      	movs	r2, #0
     96c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     96e:	2310      	movs	r3, #16
     970:	18fb      	adds	r3, r7, r3
     972:	2200      	movs	r2, #0
     974:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     976:	68bb      	ldr	r3, [r7, #8]
     978:	2b00      	cmp	r3, #0
     97a:	d102      	bne.n	982 <spi_rw+0x42>
     97c:	68fb      	ldr	r3, [r7, #12]
     97e:	2b00      	cmp	r3, #0
     980:	d003      	beq.n	98a <spi_rw+0x4a>
     982:	1dbb      	adds	r3, r7, #6
     984:	881b      	ldrh	r3, [r3, #0]
     986:	2b00      	cmp	r3, #0
     988:	d102      	bne.n	990 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
     98a:	230f      	movs	r3, #15
     98c:	425b      	negs	r3, r3
     98e:	e07e      	b.n	a8e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
     990:	68fb      	ldr	r3, [r7, #12]
     992:	2b00      	cmp	r3, #0
     994:	d106      	bne.n	9a4 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
     996:	2313      	movs	r3, #19
     998:	18fb      	adds	r3, r7, r3
     99a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     99c:	2317      	movs	r3, #23
     99e:	18fb      	adds	r3, r7, r3
     9a0:	2201      	movs	r2, #1
     9a2:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
     9a4:	68bb      	ldr	r3, [r7, #8]
     9a6:	2b00      	cmp	r3, #0
     9a8:	d106      	bne.n	9b8 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
     9aa:	2313      	movs	r3, #19
     9ac:	18fb      	adds	r3, r7, r3
     9ae:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     9b0:	2316      	movs	r3, #22
     9b2:	18fb      	adds	r3, r7, r3
     9b4:	2201      	movs	r2, #1
     9b6:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
     9b8:	4937      	ldr	r1, [pc, #220]	; (a98 <spi_rw+0x158>)
     9ba:	4b38      	ldr	r3, [pc, #224]	; (a9c <spi_rw+0x15c>)
     9bc:	2201      	movs	r2, #1
     9be:	0018      	movs	r0, r3
     9c0:	4b37      	ldr	r3, [pc, #220]	; (aa0 <spi_rw+0x160>)
     9c2:	4798      	blx	r3

	while (u16Sz) {
     9c4:	e04c      	b.n	a60 <spi_rw+0x120>
		txd_data = *pu8Mosi;
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	781a      	ldrb	r2, [r3, #0]
     9ca:	2314      	movs	r3, #20
     9cc:	18fb      	adds	r3, r7, r3
     9ce:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
     9d0:	46c0      	nop			; (mov r8, r8)
     9d2:	4b32      	ldr	r3, [pc, #200]	; (a9c <spi_rw+0x15c>)
     9d4:	0018      	movs	r0, r3
     9d6:	4b33      	ldr	r3, [pc, #204]	; (aa4 <spi_rw+0x164>)
     9d8:	4798      	blx	r3
     9da:	0003      	movs	r3, r0
     9dc:	001a      	movs	r2, r3
     9de:	2301      	movs	r3, #1
     9e0:	4053      	eors	r3, r2
     9e2:	b2db      	uxtb	r3, r3
     9e4:	2b00      	cmp	r3, #0
     9e6:	d1f4      	bne.n	9d2 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
     9e8:	46c0      	nop			; (mov r8, r8)
     9ea:	2314      	movs	r3, #20
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	881a      	ldrh	r2, [r3, #0]
     9f0:	4b2a      	ldr	r3, [pc, #168]	; (a9c <spi_rw+0x15c>)
     9f2:	0011      	movs	r1, r2
     9f4:	0018      	movs	r0, r3
     9f6:	4b2c      	ldr	r3, [pc, #176]	; (aa8 <spi_rw+0x168>)
     9f8:	4798      	blx	r3
     9fa:	1e03      	subs	r3, r0, #0
     9fc:	d1f5      	bne.n	9ea <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	4b26      	ldr	r3, [pc, #152]	; (a9c <spi_rw+0x15c>)
     a02:	0018      	movs	r0, r3
     a04:	4b29      	ldr	r3, [pc, #164]	; (aac <spi_rw+0x16c>)
     a06:	4798      	blx	r3
     a08:	0003      	movs	r3, r0
     a0a:	001a      	movs	r2, r3
     a0c:	2301      	movs	r3, #1
     a0e:	4053      	eors	r3, r2
     a10:	b2db      	uxtb	r3, r3
     a12:	2b00      	cmp	r3, #0
     a14:	d1f4      	bne.n	a00 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	2310      	movs	r3, #16
     a1a:	18fa      	adds	r2, r7, r3
     a1c:	4b1f      	ldr	r3, [pc, #124]	; (a9c <spi_rw+0x15c>)
     a1e:	0011      	movs	r1, r2
     a20:	0018      	movs	r0, r3
     a22:	4b23      	ldr	r3, [pc, #140]	; (ab0 <spi_rw+0x170>)
     a24:	4798      	blx	r3
     a26:	1e03      	subs	r3, r0, #0
     a28:	d1f6      	bne.n	a18 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
     a2a:	2310      	movs	r3, #16
     a2c:	18fb      	adds	r3, r7, r3
     a2e:	881b      	ldrh	r3, [r3, #0]
     a30:	b2da      	uxtb	r2, r3
     a32:	68bb      	ldr	r3, [r7, #8]
     a34:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
     a36:	1dbb      	adds	r3, r7, #6
     a38:	881a      	ldrh	r2, [r3, #0]
     a3a:	1dbb      	adds	r3, r7, #6
     a3c:	3a01      	subs	r2, #1
     a3e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
     a40:	2316      	movs	r3, #22
     a42:	18fb      	adds	r3, r7, r3
     a44:	781b      	ldrb	r3, [r3, #0]
     a46:	2b00      	cmp	r3, #0
     a48:	d102      	bne.n	a50 <spi_rw+0x110>
			pu8Miso++;
     a4a:	68bb      	ldr	r3, [r7, #8]
     a4c:	3301      	adds	r3, #1
     a4e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
     a50:	2317      	movs	r3, #23
     a52:	18fb      	adds	r3, r7, r3
     a54:	781b      	ldrb	r3, [r3, #0]
     a56:	2b00      	cmp	r3, #0
     a58:	d102      	bne.n	a60 <spi_rw+0x120>
			pu8Mosi++;
     a5a:	68fb      	ldr	r3, [r7, #12]
     a5c:	3301      	adds	r3, #1
     a5e:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
     a60:	1dbb      	adds	r3, r7, #6
     a62:	881b      	ldrh	r3, [r3, #0]
     a64:	2b00      	cmp	r3, #0
     a66:	d1ae      	bne.n	9c6 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
     a68:	46c0      	nop			; (mov r8, r8)
     a6a:	4b0c      	ldr	r3, [pc, #48]	; (a9c <spi_rw+0x15c>)
     a6c:	0018      	movs	r0, r3
     a6e:	4b11      	ldr	r3, [pc, #68]	; (ab4 <spi_rw+0x174>)
     a70:	4798      	blx	r3
     a72:	0003      	movs	r3, r0
     a74:	001a      	movs	r2, r3
     a76:	2301      	movs	r3, #1
     a78:	4053      	eors	r3, r2
     a7a:	b2db      	uxtb	r3, r3
     a7c:	2b00      	cmp	r3, #0
     a7e:	d1f4      	bne.n	a6a <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
     a80:	4905      	ldr	r1, [pc, #20]	; (a98 <spi_rw+0x158>)
     a82:	4b06      	ldr	r3, [pc, #24]	; (a9c <spi_rw+0x15c>)
     a84:	2200      	movs	r2, #0
     a86:	0018      	movs	r0, r3
     a88:	4b05      	ldr	r3, [pc, #20]	; (aa0 <spi_rw+0x160>)
     a8a:	4798      	blx	r3

	return M2M_SUCCESS;
     a8c:	2300      	movs	r3, #0
}
     a8e:	0018      	movs	r0, r3
     a90:	46bd      	mov	sp, r7
     a92:	b006      	add	sp, #24
     a94:	bd80      	pop	{r7, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	200002d0 	.word	0x200002d0
     a9c:	200002d4 	.word	0x200002d4
     aa0:	000070f9 	.word	0x000070f9
     aa4:	00000821 	.word	0x00000821
     aa8:	00000871 	.word	0x00000871
     aac:	00000849 	.word	0x00000849
     ab0:	000008b9 	.word	0x000008b9
     ab4:	000007f9 	.word	0x000007f9

00000ab8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     ab8:	b580      	push	{r7, lr}
     aba:	b092      	sub	sp, #72	; 0x48
     abc:	af00      	add	r7, sp, #0
     abe:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
     ac0:	2347      	movs	r3, #71	; 0x47
     ac2:	18fb      	adds	r3, r7, r3
     ac4:	2200      	movs	r2, #0
     ac6:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
     ac8:	2308      	movs	r3, #8
     aca:	18fb      	adds	r3, r7, r3
     acc:	0018      	movs	r0, r3
     ace:	4b26      	ldr	r3, [pc, #152]	; (b68 <nm_bus_init+0xb0>)
     ad0:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
     ad2:	2308      	movs	r3, #8
     ad4:	18fb      	adds	r3, r7, r3
     ad6:	220e      	movs	r2, #14
     ad8:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
     ada:	2308      	movs	r3, #8
     adc:	18fa      	adds	r2, r7, r3
     ade:	4b23      	ldr	r3, [pc, #140]	; (b6c <nm_bus_init+0xb4>)
     ae0:	0011      	movs	r1, r2
     ae2:	0018      	movs	r0, r3
     ae4:	4b22      	ldr	r3, [pc, #136]	; (b70 <nm_bus_init+0xb8>)
     ae6:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
     ae8:	230c      	movs	r3, #12
     aea:	18fb      	adds	r3, r7, r3
     aec:	0018      	movs	r0, r3
     aee:	4b21      	ldr	r3, [pc, #132]	; (b74 <nm_bus_init+0xbc>)
     af0:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     af2:	230c      	movs	r3, #12
     af4:	18fb      	adds	r3, r7, r3
     af6:	22c0      	movs	r2, #192	; 0xc0
     af8:	0392      	lsls	r2, r2, #14
     afa:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     afc:	230c      	movs	r3, #12
     afe:	18fb      	adds	r3, r7, r3
     b00:	4a1d      	ldr	r2, [pc, #116]	; (b78 <nm_bus_init+0xc0>)
     b02:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     b04:	230c      	movs	r3, #12
     b06:	18fb      	adds	r3, r7, r3
     b08:	4a1c      	ldr	r2, [pc, #112]	; (b7c <nm_bus_init+0xc4>)
     b0a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     b0c:	230c      	movs	r3, #12
     b0e:	18fb      	adds	r3, r7, r3
     b10:	2201      	movs	r2, #1
     b12:	4252      	negs	r2, r2
     b14:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     b16:	230c      	movs	r3, #12
     b18:	18fb      	adds	r3, r7, r3
     b1a:	4a19      	ldr	r2, [pc, #100]	; (b80 <nm_bus_init+0xc8>)
     b1c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
     b1e:	230c      	movs	r3, #12
     b20:	18fb      	adds	r3, r7, r3
     b22:	2200      	movs	r2, #0
     b24:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     b26:	230c      	movs	r3, #12
     b28:	18fb      	adds	r3, r7, r3
     b2a:	4a16      	ldr	r2, [pc, #88]	; (b84 <nm_bus_init+0xcc>)
     b2c:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     b2e:	230c      	movs	r3, #12
     b30:	18fa      	adds	r2, r7, r3
     b32:	4915      	ldr	r1, [pc, #84]	; (b88 <nm_bus_init+0xd0>)
     b34:	4b15      	ldr	r3, [pc, #84]	; (b8c <nm_bus_init+0xd4>)
     b36:	0018      	movs	r0, r3
     b38:	4b15      	ldr	r3, [pc, #84]	; (b90 <nm_bus_init+0xd8>)
     b3a:	4798      	blx	r3
     b3c:	1e03      	subs	r3, r0, #0
     b3e:	d002      	beq.n	b46 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
     b40:	2306      	movs	r3, #6
     b42:	425b      	negs	r3, r3
     b44:	e00c      	b.n	b60 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
     b46:	4b11      	ldr	r3, [pc, #68]	; (b8c <nm_bus_init+0xd4>)
     b48:	0018      	movs	r0, r3
     b4a:	4b12      	ldr	r3, [pc, #72]	; (b94 <nm_bus_init+0xdc>)
     b4c:	4798      	blx	r3

	nm_bsp_reset();
     b4e:	4b12      	ldr	r3, [pc, #72]	; (b98 <nm_bus_init+0xe0>)
     b50:	4798      	blx	r3
	nm_bsp_sleep(1);
     b52:	2001      	movs	r0, #1
     b54:	4b11      	ldr	r3, [pc, #68]	; (b9c <nm_bus_init+0xe4>)
     b56:	4798      	blx	r3
#endif
	return result;
     b58:	2347      	movs	r3, #71	; 0x47
     b5a:	18fb      	adds	r3, r7, r3
     b5c:	781b      	ldrb	r3, [r3, #0]
     b5e:	b25b      	sxtb	r3, r3
}
     b60:	0018      	movs	r0, r3
     b62:	46bd      	mov	sp, r7
     b64:	b012      	add	sp, #72	; 0x48
     b66:	bd80      	pop	{r7, pc}
     b68:	000006c5 	.word	0x000006c5
     b6c:	200002d0 	.word	0x200002d0
     b70:	000006e9 	.word	0x000006e9
     b74:	00000641 	.word	0x00000641
     b78:	000c0002 	.word	0x000c0002
     b7c:	000d0002 	.word	0x000d0002
     b80:	000f0002 	.word	0x000f0002
     b84:	00b71b00 	.word	0x00b71b00
     b88:	42001000 	.word	0x42001000
     b8c:	200002d4 	.word	0x200002d4
     b90:	00006f69 	.word	0x00006f69
     b94:	0000074d 	.word	0x0000074d
     b98:	000003ad 	.word	0x000003ad
     b9c:	000003f1 	.word	0x000003f1

00000ba0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     ba0:	b590      	push	{r4, r7, lr}
     ba2:	b085      	sub	sp, #20
     ba4:	af00      	add	r7, sp, #0
     ba6:	0002      	movs	r2, r0
     ba8:	6039      	str	r1, [r7, #0]
     baa:	1dfb      	adds	r3, r7, #7
     bac:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
     bae:	230f      	movs	r3, #15
     bb0:	18fb      	adds	r3, r7, r3
     bb2:	2200      	movs	r2, #0
     bb4:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
     bb6:	1dfb      	adds	r3, r7, #7
     bb8:	781b      	ldrb	r3, [r3, #0]
     bba:	2b03      	cmp	r3, #3
     bbc:	d10f      	bne.n	bde <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
     bbe:	683b      	ldr	r3, [r7, #0]
     bc0:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     bc2:	68bb      	ldr	r3, [r7, #8]
     bc4:	6818      	ldr	r0, [r3, #0]
     bc6:	68bb      	ldr	r3, [r7, #8]
     bc8:	6859      	ldr	r1, [r3, #4]
     bca:	68bb      	ldr	r3, [r7, #8]
     bcc:	891b      	ldrh	r3, [r3, #8]
     bce:	220f      	movs	r2, #15
     bd0:	18bc      	adds	r4, r7, r2
     bd2:	001a      	movs	r2, r3
     bd4:	4b10      	ldr	r3, [pc, #64]	; (c18 <nm_bus_ioctl+0x78>)
     bd6:	4798      	blx	r3
     bd8:	0003      	movs	r3, r0
     bda:	7023      	strb	r3, [r4, #0]
		}
		break;
     bdc:	e013      	b.n	c06 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
     bde:	230f      	movs	r3, #15
     be0:	18fb      	adds	r3, r7, r3
     be2:	22ff      	movs	r2, #255	; 0xff
     be4:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
     be6:	230e      	movs	r3, #14
     be8:	33ff      	adds	r3, #255	; 0xff
     bea:	001a      	movs	r2, r3
     bec:	490b      	ldr	r1, [pc, #44]	; (c1c <nm_bus_ioctl+0x7c>)
     bee:	4b0c      	ldr	r3, [pc, #48]	; (c20 <nm_bus_ioctl+0x80>)
     bf0:	0018      	movs	r0, r3
     bf2:	4b0c      	ldr	r3, [pc, #48]	; (c24 <nm_bus_ioctl+0x84>)
     bf4:	4798      	blx	r3
     bf6:	4b0c      	ldr	r3, [pc, #48]	; (c28 <nm_bus_ioctl+0x88>)
     bf8:	0018      	movs	r0, r3
     bfa:	4b0c      	ldr	r3, [pc, #48]	; (c2c <nm_bus_ioctl+0x8c>)
     bfc:	4798      	blx	r3
     bfe:	200d      	movs	r0, #13
     c00:	4b0b      	ldr	r3, [pc, #44]	; (c30 <nm_bus_ioctl+0x90>)
     c02:	4798      	blx	r3
			break;
     c04:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
     c06:	230f      	movs	r3, #15
     c08:	18fb      	adds	r3, r7, r3
     c0a:	781b      	ldrb	r3, [r3, #0]
     c0c:	b25b      	sxtb	r3, r3
}
     c0e:	0018      	movs	r0, r3
     c10:	46bd      	mov	sp, r7
     c12:	b005      	add	sp, #20
     c14:	bd90      	pop	{r4, r7, pc}
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	00000941 	.word	0x00000941
     c1c:	0000d818 	.word	0x0000d818
     c20:	0000d7f0 	.word	0x0000d7f0
     c24:	0000c455 	.word	0x0000c455
     c28:	0000d804 	.word	0x0000d804
     c2c:	0000c571 	.word	0x0000c571
     c30:	0000c489 	.word	0x0000c489

00000c34 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     c34:	b580      	push	{r7, lr}
     c36:	b082      	sub	sp, #8
     c38:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
     c3a:	1dfb      	adds	r3, r7, #7
     c3c:	2200      	movs	r2, #0
     c3e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
     c40:	1d3b      	adds	r3, r7, #4
     c42:	0018      	movs	r0, r3
     c44:	4b13      	ldr	r3, [pc, #76]	; (c94 <nm_bus_deinit+0x60>)
     c46:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     c48:	1d3b      	adds	r3, r7, #4
     c4a:	2200      	movs	r2, #0
     c4c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     c4e:	1d3b      	adds	r3, r7, #4
     c50:	2200      	movs	r2, #0
     c52:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
     c54:	4b10      	ldr	r3, [pc, #64]	; (c98 <nm_bus_deinit+0x64>)
     c56:	0018      	movs	r0, r3
     c58:	4b10      	ldr	r3, [pc, #64]	; (c9c <nm_bus_deinit+0x68>)
     c5a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     c5c:	1d3b      	adds	r3, r7, #4
     c5e:	0019      	movs	r1, r3
     c60:	200c      	movs	r0, #12
     c62:	4b0f      	ldr	r3, [pc, #60]	; (ca0 <nm_bus_deinit+0x6c>)
     c64:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     c66:	1d3b      	adds	r3, r7, #4
     c68:	0019      	movs	r1, r3
     c6a:	200f      	movs	r0, #15
     c6c:	4b0c      	ldr	r3, [pc, #48]	; (ca0 <nm_bus_deinit+0x6c>)
     c6e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     c70:	1d3b      	adds	r3, r7, #4
     c72:	0019      	movs	r1, r3
     c74:	200d      	movs	r0, #13
     c76:	4b0a      	ldr	r3, [pc, #40]	; (ca0 <nm_bus_deinit+0x6c>)
     c78:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     c7a:	1d3b      	adds	r3, r7, #4
     c7c:	0019      	movs	r1, r3
     c7e:	200e      	movs	r0, #14
     c80:	4b07      	ldr	r3, [pc, #28]	; (ca0 <nm_bus_deinit+0x6c>)
     c82:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
     c84:	1dfb      	adds	r3, r7, #7
     c86:	781b      	ldrb	r3, [r3, #0]
     c88:	b25b      	sxtb	r3, r3
}
     c8a:	0018      	movs	r0, r3
     c8c:	46bd      	mov	sp, r7
     c8e:	b002      	add	sp, #8
     c90:	bd80      	pop	{r7, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	0000054d 	.word	0x0000054d
     c98:	200002d4 	.word	0x200002d4
     c9c:	0000079d 	.word	0x0000079d
     ca0:	0000631d 	.word	0x0000631d

00000ca4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
     ca4:	b580      	push	{r7, lr}
     ca6:	b084      	sub	sp, #16
     ca8:	af00      	add	r7, sp, #0
     caa:	60f8      	str	r0, [r7, #12]
     cac:	60b9      	str	r1, [r7, #8]
     cae:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
     cb0:	687b      	ldr	r3, [r7, #4]
     cb2:	2b00      	cmp	r3, #0
     cb4:	d010      	beq.n	cd8 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
     cb6:	68bb      	ldr	r3, [r7, #8]
     cb8:	781a      	ldrb	r2, [r3, #0]
     cba:	68fb      	ldr	r3, [r7, #12]
     cbc:	701a      	strb	r2, [r3, #0]
		pDst++;
     cbe:	68fb      	ldr	r3, [r7, #12]
     cc0:	3301      	adds	r3, #1
     cc2:	60fb      	str	r3, [r7, #12]
		pSrc++;
     cc4:	68bb      	ldr	r3, [r7, #8]
     cc6:	3301      	adds	r3, #1
     cc8:	60bb      	str	r3, [r7, #8]
	}while(--sz);
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	3b01      	subs	r3, #1
     cce:	607b      	str	r3, [r7, #4]
     cd0:	687b      	ldr	r3, [r7, #4]
     cd2:	2b00      	cmp	r3, #0
     cd4:	d1ef      	bne.n	cb6 <m2m_memcpy+0x12>
     cd6:	e000      	b.n	cda <m2m_memcpy+0x36>
	if(sz == 0) return;
     cd8:	46c0      	nop			; (mov r8, r8)
}
     cda:	46bd      	mov	sp, r7
     cdc:	b004      	add	sp, #16
     cde:	bd80      	pop	{r7, pc}

00000ce0 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
     ce0:	b580      	push	{r7, lr}
     ce2:	b084      	sub	sp, #16
     ce4:	af00      	add	r7, sp, #0
     ce6:	60f8      	str	r0, [r7, #12]
     ce8:	607a      	str	r2, [r7, #4]
     cea:	230b      	movs	r3, #11
     cec:	18fb      	adds	r3, r7, r3
     cee:	1c0a      	adds	r2, r1, #0
     cf0:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
     cf2:	687b      	ldr	r3, [r7, #4]
     cf4:	2b00      	cmp	r3, #0
     cf6:	d00e      	beq.n	d16 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
     cf8:	68fb      	ldr	r3, [r7, #12]
     cfa:	220b      	movs	r2, #11
     cfc:	18ba      	adds	r2, r7, r2
     cfe:	7812      	ldrb	r2, [r2, #0]
     d00:	701a      	strb	r2, [r3, #0]
		pBuf++;
     d02:	68fb      	ldr	r3, [r7, #12]
     d04:	3301      	adds	r3, #1
     d06:	60fb      	str	r3, [r7, #12]
	}while(--sz);
     d08:	687b      	ldr	r3, [r7, #4]
     d0a:	3b01      	subs	r3, #1
     d0c:	607b      	str	r3, [r7, #4]
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	2b00      	cmp	r3, #0
     d12:	d1f1      	bne.n	cf8 <m2m_memset+0x18>
     d14:	e000      	b.n	d18 <m2m_memset+0x38>
	if(sz == 0) return;
     d16:	46c0      	nop			; (mov r8, r8)
}
     d18:	46bd      	mov	sp, r7
     d1a:	b004      	add	sp, #16
     d1c:	bd80      	pop	{r7, pc}

00000d1e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     d1e:	b580      	push	{r7, lr}
     d20:	b084      	sub	sp, #16
     d22:	af00      	add	r7, sp, #0
     d24:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
     d26:	230e      	movs	r3, #14
     d28:	18fb      	adds	r3, r7, r3
     d2a:	2200      	movs	r2, #0
     d2c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
     d2e:	e009      	b.n	d44 <m2m_strlen+0x26>
	{
		u16StrLen ++;
     d30:	230e      	movs	r3, #14
     d32:	18fb      	adds	r3, r7, r3
     d34:	881a      	ldrh	r2, [r3, #0]
     d36:	230e      	movs	r3, #14
     d38:	18fb      	adds	r3, r7, r3
     d3a:	3201      	adds	r2, #1
     d3c:	801a      	strh	r2, [r3, #0]
		pcStr++;
     d3e:	687b      	ldr	r3, [r7, #4]
     d40:	3301      	adds	r3, #1
     d42:	607b      	str	r3, [r7, #4]
	while(*pcStr)
     d44:	687b      	ldr	r3, [r7, #4]
     d46:	781b      	ldrb	r3, [r3, #0]
     d48:	2b00      	cmp	r3, #0
     d4a:	d1f1      	bne.n	d30 <m2m_strlen+0x12>
	}
	return u16StrLen;
     d4c:	230e      	movs	r3, #14
     d4e:	18fb      	adds	r3, r7, r3
     d50:	881b      	ldrh	r3, [r3, #0]
}
     d52:	0018      	movs	r0, r3
     d54:	46bd      	mov	sp, r7
     d56:	b004      	add	sp, #16
     d58:	bd80      	pop	{r7, pc}
	...

00000d5c <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
     d5c:	b580      	push	{r7, lr}
     d5e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
     d60:	4b04      	ldr	r3, [pc, #16]	; (d74 <isr+0x18>)
     d62:	78db      	ldrb	r3, [r3, #3]
     d64:	b2db      	uxtb	r3, r3
     d66:	3301      	adds	r3, #1
     d68:	b2da      	uxtb	r2, r3
     d6a:	4b02      	ldr	r3, [pc, #8]	; (d74 <isr+0x18>)
     d6c:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	46bd      	mov	sp, r7
     d72:	bd80      	pop	{r7, pc}
     d74:	20000310 	.word	0x20000310

00000d78 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
     d78:	b590      	push	{r4, r7, lr}
     d7a:	b083      	sub	sp, #12
     d7c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
     d7e:	1dfb      	adds	r3, r7, #7
     d80:	2200      	movs	r2, #0
     d82:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
     d84:	4b14      	ldr	r3, [pc, #80]	; (dd8 <hif_set_rx_done+0x60>)
     d86:	2200      	movs	r2, #0
     d88:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     d8a:	2001      	movs	r0, #1
     d8c:	4b13      	ldr	r3, [pc, #76]	; (ddc <hif_set_rx_done+0x64>)
     d8e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     d90:	1dfc      	adds	r4, r7, #7
     d92:	003b      	movs	r3, r7
     d94:	4a12      	ldr	r2, [pc, #72]	; (de0 <hif_set_rx_done+0x68>)
     d96:	0019      	movs	r1, r3
     d98:	0010      	movs	r0, r2
     d9a:	4b12      	ldr	r3, [pc, #72]	; (de4 <hif_set_rx_done+0x6c>)
     d9c:	4798      	blx	r3
     d9e:	0003      	movs	r3, r0
     da0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
     da2:	1dfb      	adds	r3, r7, #7
     da4:	781b      	ldrb	r3, [r3, #0]
     da6:	b25b      	sxtb	r3, r3
     da8:	2b00      	cmp	r3, #0
     daa:	d10d      	bne.n	dc8 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
     dac:	683b      	ldr	r3, [r7, #0]
     dae:	2202      	movs	r2, #2
     db0:	4313      	orrs	r3, r2
     db2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     db4:	683b      	ldr	r3, [r7, #0]
     db6:	1dfc      	adds	r4, r7, #7
     db8:	4a09      	ldr	r2, [pc, #36]	; (de0 <hif_set_rx_done+0x68>)
     dba:	0019      	movs	r1, r3
     dbc:	0010      	movs	r0, r2
     dbe:	4b0a      	ldr	r3, [pc, #40]	; (de8 <hif_set_rx_done+0x70>)
     dc0:	4798      	blx	r3
     dc2:	0003      	movs	r3, r0
     dc4:	7023      	strb	r3, [r4, #0]
     dc6:	e000      	b.n	dca <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
     dc8:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     dca:	1dfb      	adds	r3, r7, #7
     dcc:	781b      	ldrb	r3, [r3, #0]
     dce:	b25b      	sxtb	r3, r3

}
     dd0:	0018      	movs	r0, r3
     dd2:	46bd      	mov	sp, r7
     dd4:	b003      	add	sp, #12
     dd6:	bd90      	pop	{r4, r7, pc}
     dd8:	20000310 	.word	0x20000310
     ddc:	00000491 	.word	0x00000491
     de0:	00001070 	.word	0x00001070
     de4:	00002d1d 	.word	0x00002d1d
     de8:	00002d41 	.word	0x00002d41

00000dec <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     dec:	b580      	push	{r7, lr}
     dee:	b082      	sub	sp, #8
     df0:	af00      	add	r7, sp, #0
     df2:	603a      	str	r2, [r7, #0]
     df4:	1dfb      	adds	r3, r7, #7
     df6:	1c02      	adds	r2, r0, #0
     df8:	701a      	strb	r2, [r3, #0]
     dfa:	1d3b      	adds	r3, r7, #4
     dfc:	1c0a      	adds	r2, r1, #0
     dfe:	801a      	strh	r2, [r3, #0]


}
     e00:	46c0      	nop			; (mov r8, r8)
     e02:	46bd      	mov	sp, r7
     e04:	b002      	add	sp, #8
     e06:	bd80      	pop	{r7, pc}

00000e08 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     e08:	b590      	push	{r4, r7, lr}
     e0a:	b083      	sub	sp, #12
     e0c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     e0e:	1dfb      	adds	r3, r7, #7
     e10:	2200      	movs	r2, #0
     e12:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
     e14:	4b16      	ldr	r3, [pc, #88]	; (e70 <hif_chip_wake+0x68>)
     e16:	789b      	ldrb	r3, [r3, #2]
     e18:	b2db      	uxtb	r3, r3
     e1a:	2b00      	cmp	r3, #0
     e1c:	d003      	beq.n	e26 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     e1e:	1dfb      	adds	r3, r7, #7
     e20:	781b      	ldrb	r3, [r3, #0]
     e22:	b25b      	sxtb	r3, r3
     e24:	e01f      	b.n	e66 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     e26:	4b12      	ldr	r3, [pc, #72]	; (e70 <hif_chip_wake+0x68>)
     e28:	785b      	ldrb	r3, [r3, #1]
     e2a:	b2db      	uxtb	r3, r3
     e2c:	2b00      	cmp	r3, #0
     e2e:	d10e      	bne.n	e4e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     e30:	4b0f      	ldr	r3, [pc, #60]	; (e70 <hif_chip_wake+0x68>)
     e32:	781b      	ldrb	r3, [r3, #0]
     e34:	b2db      	uxtb	r3, r3
     e36:	2b00      	cmp	r3, #0
     e38:	d009      	beq.n	e4e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
     e3a:	1dfc      	adds	r4, r7, #7
     e3c:	4b0d      	ldr	r3, [pc, #52]	; (e74 <hif_chip_wake+0x6c>)
     e3e:	4798      	blx	r3
     e40:	0003      	movs	r3, r0
     e42:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     e44:	1dfb      	adds	r3, r7, #7
     e46:	781b      	ldrb	r3, [r3, #0]
     e48:	b25b      	sxtb	r3, r3
     e4a:	2b00      	cmp	r3, #0
     e4c:	d107      	bne.n	e5e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     e4e:	4b08      	ldr	r3, [pc, #32]	; (e70 <hif_chip_wake+0x68>)
     e50:	785b      	ldrb	r3, [r3, #1]
     e52:	b2db      	uxtb	r3, r3
     e54:	3301      	adds	r3, #1
     e56:	b2da      	uxtb	r2, r3
     e58:	4b05      	ldr	r3, [pc, #20]	; (e70 <hif_chip_wake+0x68>)
     e5a:	705a      	strb	r2, [r3, #1]
     e5c:	e000      	b.n	e60 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
     e5e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
     e60:	1dfb      	adds	r3, r7, #7
     e62:	781b      	ldrb	r3, [r3, #0]
     e64:	b25b      	sxtb	r3, r3
}
     e66:	0018      	movs	r0, r3
     e68:	46bd      	mov	sp, r7
     e6a:	b003      	add	sp, #12
     e6c:	bd90      	pop	{r4, r7, pc}
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	20000310 	.word	0x20000310
     e74:	000027f1 	.word	0x000027f1

00000e78 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
     e78:	b580      	push	{r7, lr}
     e7a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
     e7c:	4b07      	ldr	r3, [pc, #28]	; (e9c <hif_chip_sleep_sc+0x24>)
     e7e:	785b      	ldrb	r3, [r3, #1]
     e80:	b2db      	uxtb	r3, r3
     e82:	2b00      	cmp	r3, #0
     e84:	d006      	beq.n	e94 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
     e86:	4b05      	ldr	r3, [pc, #20]	; (e9c <hif_chip_sleep_sc+0x24>)
     e88:	785b      	ldrb	r3, [r3, #1]
     e8a:	b2db      	uxtb	r3, r3
     e8c:	3b01      	subs	r3, #1
     e8e:	b2da      	uxtb	r2, r3
     e90:	4b02      	ldr	r3, [pc, #8]	; (e9c <hif_chip_sleep_sc+0x24>)
     e92:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
     e94:	2300      	movs	r3, #0
}
     e96:	0018      	movs	r0, r3
     e98:	46bd      	mov	sp, r7
     e9a:	bd80      	pop	{r7, pc}
     e9c:	20000310 	.word	0x20000310

00000ea0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     ea0:	b590      	push	{r4, r7, lr}
     ea2:	b083      	sub	sp, #12
     ea4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     ea6:	1dfb      	adds	r3, r7, #7
     ea8:	2200      	movs	r2, #0
     eaa:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
     eac:	4b10      	ldr	r3, [pc, #64]	; (ef0 <hif_chip_sleep+0x50>)
     eae:	785b      	ldrb	r3, [r3, #1]
     eb0:	b2db      	uxtb	r3, r3
     eb2:	2b00      	cmp	r3, #0
     eb4:	d006      	beq.n	ec4 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
     eb6:	4b0e      	ldr	r3, [pc, #56]	; (ef0 <hif_chip_sleep+0x50>)
     eb8:	785b      	ldrb	r3, [r3, #1]
     eba:	b2db      	uxtb	r3, r3
     ebc:	3b01      	subs	r3, #1
     ebe:	b2da      	uxtb	r2, r3
     ec0:	4b0b      	ldr	r3, [pc, #44]	; (ef0 <hif_chip_sleep+0x50>)
     ec2:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     ec4:	4b0a      	ldr	r3, [pc, #40]	; (ef0 <hif_chip_sleep+0x50>)
     ec6:	785b      	ldrb	r3, [r3, #1]
     ec8:	b2db      	uxtb	r3, r3
     eca:	2b00      	cmp	r3, #0
     ecc:	d109      	bne.n	ee2 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     ece:	4b08      	ldr	r3, [pc, #32]	; (ef0 <hif_chip_sleep+0x50>)
     ed0:	781b      	ldrb	r3, [r3, #0]
     ed2:	b2db      	uxtb	r3, r3
     ed4:	2b00      	cmp	r3, #0
     ed6:	d004      	beq.n	ee2 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
     ed8:	1dfc      	adds	r4, r7, #7
     eda:	4b06      	ldr	r3, [pc, #24]	; (ef4 <hif_chip_sleep+0x54>)
     edc:	4798      	blx	r3
     ede:	0003      	movs	r3, r0
     ee0:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
     ee2:	1dfb      	adds	r3, r7, #7
     ee4:	781b      	ldrb	r3, [r3, #0]
     ee6:	b25b      	sxtb	r3, r3
}
     ee8:	0018      	movs	r0, r3
     eea:	46bd      	mov	sp, r7
     eec:	b003      	add	sp, #12
     eee:	bd90      	pop	{r4, r7, pc}
     ef0:	20000310 	.word	0x20000310
     ef4:	00002719 	.word	0x00002719

00000ef8 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
     ef8:	b580      	push	{r7, lr}
     efa:	b082      	sub	sp, #8
     efc:	af00      	add	r7, sp, #0
     efe:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     f00:	4b09      	ldr	r3, [pc, #36]	; (f28 <hif_init+0x30>)
     f02:	2228      	movs	r2, #40	; 0x28
     f04:	2100      	movs	r1, #0
     f06:	0018      	movs	r0, r3
     f08:	4b08      	ldr	r3, [pc, #32]	; (f2c <hif_init+0x34>)
     f0a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     f0c:	4b08      	ldr	r3, [pc, #32]	; (f30 <hif_init+0x38>)
     f0e:	0018      	movs	r0, r3
     f10:	4b08      	ldr	r3, [pc, #32]	; (f34 <hif_init+0x3c>)
     f12:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     f14:	4b08      	ldr	r3, [pc, #32]	; (f38 <hif_init+0x40>)
     f16:	0019      	movs	r1, r3
     f18:	2003      	movs	r0, #3
     f1a:	4b08      	ldr	r3, [pc, #32]	; (f3c <hif_init+0x44>)
     f1c:	4798      	blx	r3
	return M2M_SUCCESS;
     f1e:	2300      	movs	r3, #0
}
     f20:	0018      	movs	r0, r3
     f22:	46bd      	mov	sp, r7
     f24:	b002      	add	sp, #8
     f26:	bd80      	pop	{r7, pc}
     f28:	20000310 	.word	0x20000310
     f2c:	00000ce1 	.word	0x00000ce1
     f30:	00000d5d 	.word	0x00000d5d
     f34:	00000419 	.word	0x00000419
     f38:	00000ded 	.word	0x00000ded
     f3c:	000019b5 	.word	0x000019b5

00000f40 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     f40:	b590      	push	{r4, r7, lr}
     f42:	b089      	sub	sp, #36	; 0x24
     f44:	af00      	add	r7, sp, #0
     f46:	0004      	movs	r4, r0
     f48:	0008      	movs	r0, r1
     f4a:	603a      	str	r2, [r7, #0]
     f4c:	0019      	movs	r1, r3
     f4e:	1dfb      	adds	r3, r7, #7
     f50:	1c22      	adds	r2, r4, #0
     f52:	701a      	strb	r2, [r3, #0]
     f54:	1dbb      	adds	r3, r7, #6
     f56:	1c02      	adds	r2, r0, #0
     f58:	701a      	strb	r2, [r3, #0]
     f5a:	1d3b      	adds	r3, r7, #4
     f5c:	1c0a      	adds	r2, r1, #0
     f5e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
     f60:	231f      	movs	r3, #31
     f62:	18fb      	adds	r3, r7, r3
     f64:	22ff      	movs	r2, #255	; 0xff
     f66:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     f68:	1dbb      	adds	r3, r7, #6
     f6a:	781b      	ldrb	r3, [r3, #0]
     f6c:	227f      	movs	r2, #127	; 0x7f
     f6e:	4013      	ands	r3, r2
     f70:	b2da      	uxtb	r2, r3
     f72:	2318      	movs	r3, #24
     f74:	18fb      	adds	r3, r7, r3
     f76:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     f78:	2318      	movs	r3, #24
     f7a:	18fb      	adds	r3, r7, r3
     f7c:	1dfa      	adds	r2, r7, #7
     f7e:	7812      	ldrb	r2, [r2, #0]
     f80:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     f82:	2318      	movs	r3, #24
     f84:	18fb      	adds	r3, r7, r3
     f86:	2208      	movs	r2, #8
     f88:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f8c:	2b00      	cmp	r3, #0
     f8e:	d011      	beq.n	fb4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     f90:	2318      	movs	r3, #24
     f92:	18fb      	adds	r3, r7, r3
     f94:	885b      	ldrh	r3, [r3, #2]
     f96:	b29a      	uxth	r2, r3
     f98:	2338      	movs	r3, #56	; 0x38
     f9a:	18f9      	adds	r1, r7, r3
     f9c:	2334      	movs	r3, #52	; 0x34
     f9e:	18fb      	adds	r3, r7, r3
     fa0:	8809      	ldrh	r1, [r1, #0]
     fa2:	881b      	ldrh	r3, [r3, #0]
     fa4:	18cb      	adds	r3, r1, r3
     fa6:	b29b      	uxth	r3, r3
     fa8:	18d3      	adds	r3, r2, r3
     faa:	b29a      	uxth	r2, r3
     fac:	2318      	movs	r3, #24
     fae:	18fb      	adds	r3, r7, r3
     fb0:	805a      	strh	r2, [r3, #2]
     fb2:	e00a      	b.n	fca <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     fb4:	2318      	movs	r3, #24
     fb6:	18fb      	adds	r3, r7, r3
     fb8:	885b      	ldrh	r3, [r3, #2]
     fba:	b29a      	uxth	r2, r3
     fbc:	1d3b      	adds	r3, r7, #4
     fbe:	881b      	ldrh	r3, [r3, #0]
     fc0:	18d3      	adds	r3, r2, r3
     fc2:	b29a      	uxth	r2, r3
     fc4:	2318      	movs	r3, #24
     fc6:	18fb      	adds	r3, r7, r3
     fc8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     fca:	231f      	movs	r3, #31
     fcc:	18fc      	adds	r4, r7, r3
     fce:	4bb0      	ldr	r3, [pc, #704]	; (1290 <hif_send+0x350>)
     fd0:	4798      	blx	r3
     fd2:	0003      	movs	r3, r0
     fd4:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
     fd6:	231f      	movs	r3, #31
     fd8:	18fb      	adds	r3, r7, r3
     fda:	781b      	ldrb	r3, [r3, #0]
     fdc:	b25b      	sxtb	r3, r3
     fde:	2b00      	cmp	r3, #0
     fe0:	d000      	beq.n	fe4 <hif_send+0xa4>
     fe2:	e127      	b.n	1234 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
     fe4:	2300      	movs	r3, #0
     fe6:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
     fe8:	230e      	movs	r3, #14
     fea:	18fb      	adds	r3, r7, r3
     fec:	2200      	movs	r2, #0
     fee:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     ff0:	2300      	movs	r3, #0
     ff2:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
     ff4:	1dfb      	adds	r3, r7, #7
     ff6:	781a      	ldrb	r2, [r3, #0]
     ff8:	697b      	ldr	r3, [r7, #20]
     ffa:	4313      	orrs	r3, r2
     ffc:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
     ffe:	1dbb      	adds	r3, r7, #6
    1000:	781b      	ldrb	r3, [r3, #0]
    1002:	021a      	lsls	r2, r3, #8
    1004:	697b      	ldr	r3, [r7, #20]
    1006:	4313      	orrs	r3, r2
    1008:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    100a:	2318      	movs	r3, #24
    100c:	18fb      	adds	r3, r7, r3
    100e:	885b      	ldrh	r3, [r3, #2]
    1010:	b29b      	uxth	r3, r3
    1012:	041a      	lsls	r2, r3, #16
    1014:	697b      	ldr	r3, [r7, #20]
    1016:	4313      	orrs	r3, r2
    1018:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    101a:	697b      	ldr	r3, [r7, #20]
    101c:	221f      	movs	r2, #31
    101e:	18bc      	adds	r4, r7, r2
    1020:	4a9c      	ldr	r2, [pc, #624]	; (1294 <hif_send+0x354>)
    1022:	0019      	movs	r1, r3
    1024:	0010      	movs	r0, r2
    1026:	4b9c      	ldr	r3, [pc, #624]	; (1298 <hif_send+0x358>)
    1028:	4798      	blx	r3
    102a:	0003      	movs	r3, r0
    102c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    102e:	231f      	movs	r3, #31
    1030:	18fb      	adds	r3, r7, r3
    1032:	781b      	ldrb	r3, [r3, #0]
    1034:	b25b      	sxtb	r3, r3
    1036:	2b00      	cmp	r3, #0
    1038:	d000      	beq.n	103c <hif_send+0xfc>
    103a:	e115      	b.n	1268 <hif_send+0x328>

		reg = 0UL;
    103c:	2300      	movs	r3, #0
    103e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    1040:	697b      	ldr	r3, [r7, #20]
    1042:	2202      	movs	r2, #2
    1044:	4313      	orrs	r3, r2
    1046:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    1048:	697b      	ldr	r3, [r7, #20]
    104a:	221f      	movs	r2, #31
    104c:	18bc      	adds	r4, r7, r2
    104e:	4a93      	ldr	r2, [pc, #588]	; (129c <hif_send+0x35c>)
    1050:	0019      	movs	r1, r3
    1052:	0010      	movs	r0, r2
    1054:	4b90      	ldr	r3, [pc, #576]	; (1298 <hif_send+0x358>)
    1056:	4798      	blx	r3
    1058:	0003      	movs	r3, r0
    105a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    105c:	231f      	movs	r3, #31
    105e:	18fb      	adds	r3, r7, r3
    1060:	781b      	ldrb	r3, [r3, #0]
    1062:	b25b      	sxtb	r3, r3
    1064:	2b00      	cmp	r3, #0
    1066:	d000      	beq.n	106a <hif_send+0x12a>
    1068:	e100      	b.n	126c <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    106a:	2300      	movs	r3, #0
    106c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    106e:	230e      	movs	r3, #14
    1070:	18fb      	adds	r3, r7, r3
    1072:	2200      	movs	r2, #0
    1074:	801a      	strh	r2, [r3, #0]
    1076:	e04f      	b.n	1118 <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    1078:	231f      	movs	r3, #31
    107a:	18fc      	adds	r4, r7, r3
    107c:	2314      	movs	r3, #20
    107e:	18fb      	adds	r3, r7, r3
    1080:	4a86      	ldr	r2, [pc, #536]	; (129c <hif_send+0x35c>)
    1082:	0019      	movs	r1, r3
    1084:	0010      	movs	r0, r2
    1086:	4b86      	ldr	r3, [pc, #536]	; (12a0 <hif_send+0x360>)
    1088:	4798      	blx	r3
    108a:	0003      	movs	r3, r0
    108c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    108e:	231f      	movs	r3, #31
    1090:	18fb      	adds	r3, r7, r3
    1092:	781b      	ldrb	r3, [r3, #0]
    1094:	b25b      	sxtb	r3, r3
    1096:	2b00      	cmp	r3, #0
    1098:	d146      	bne.n	1128 <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    109a:	230e      	movs	r3, #14
    109c:	18fb      	adds	r3, r7, r3
    109e:	881b      	ldrh	r3, [r3, #0]
    10a0:	b29a      	uxth	r2, r3
    10a2:	23f4      	movs	r3, #244	; 0xf4
    10a4:	33ff      	adds	r3, #255	; 0xff
    10a6:	429a      	cmp	r2, r3
    10a8:	d915      	bls.n	10d6 <hif_send+0x196>
				if(cnt < 501) {
    10aa:	230e      	movs	r3, #14
    10ac:	18fb      	adds	r3, r7, r3
    10ae:	881b      	ldrh	r3, [r3, #0]
    10b0:	b29a      	uxth	r2, r3
    10b2:	23fa      	movs	r3, #250	; 0xfa
    10b4:	005b      	lsls	r3, r3, #1
    10b6:	429a      	cmp	r2, r3
    10b8:	d80a      	bhi.n	10d0 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
    10ba:	4b7a      	ldr	r3, [pc, #488]	; (12a4 <hif_send+0x364>)
    10bc:	0018      	movs	r0, r3
    10be:	4b7a      	ldr	r3, [pc, #488]	; (12a8 <hif_send+0x368>)
    10c0:	4798      	blx	r3
    10c2:	4b7a      	ldr	r3, [pc, #488]	; (12ac <hif_send+0x36c>)
    10c4:	0018      	movs	r0, r3
    10c6:	4b7a      	ldr	r3, [pc, #488]	; (12b0 <hif_send+0x370>)
    10c8:	4798      	blx	r3
    10ca:	200d      	movs	r0, #13
    10cc:	4b79      	ldr	r3, [pc, #484]	; (12b4 <hif_send+0x374>)
    10ce:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    10d0:	2001      	movs	r0, #1
    10d2:	4b79      	ldr	r3, [pc, #484]	; (12b8 <hif_send+0x378>)
    10d4:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    10d6:	697b      	ldr	r3, [r7, #20]
    10d8:	2202      	movs	r2, #2
    10da:	4013      	ands	r3, r2
    10dc:	d113      	bne.n	1106 <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    10de:	231f      	movs	r3, #31
    10e0:	18fc      	adds	r4, r7, r3
    10e2:	2310      	movs	r3, #16
    10e4:	18fb      	adds	r3, r7, r3
    10e6:	4a75      	ldr	r2, [pc, #468]	; (12bc <hif_send+0x37c>)
    10e8:	0019      	movs	r1, r3
    10ea:	0010      	movs	r0, r2
    10ec:	4b6c      	ldr	r3, [pc, #432]	; (12a0 <hif_send+0x360>)
    10ee:	4798      	blx	r3
    10f0:	0003      	movs	r3, r0
    10f2:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    10f4:	231f      	movs	r3, #31
    10f6:	18fb      	adds	r3, r7, r3
    10f8:	781b      	ldrb	r3, [r3, #0]
    10fa:	b25b      	sxtb	r3, r3
    10fc:	2b00      	cmp	r3, #0
    10fe:	d015      	beq.n	112c <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    1100:	2300      	movs	r3, #0
    1102:	613b      	str	r3, [r7, #16]
					goto ERR1;
    1104:	e0b9      	b.n	127a <hif_send+0x33a>
		for(cnt = 0; cnt < 1000; cnt ++)
    1106:	230e      	movs	r3, #14
    1108:	18fb      	adds	r3, r7, r3
    110a:	881b      	ldrh	r3, [r3, #0]
    110c:	b29b      	uxth	r3, r3
    110e:	3301      	adds	r3, #1
    1110:	b29a      	uxth	r2, r3
    1112:	230e      	movs	r3, #14
    1114:	18fb      	adds	r3, r7, r3
    1116:	801a      	strh	r2, [r3, #0]
    1118:	230e      	movs	r3, #14
    111a:	18fb      	adds	r3, r7, r3
    111c:	881b      	ldrh	r3, [r3, #0]
    111e:	b29b      	uxth	r3, r3
    1120:	4a67      	ldr	r2, [pc, #412]	; (12c0 <hif_send+0x380>)
    1122:	4293      	cmp	r3, r2
    1124:	d9a8      	bls.n	1078 <hif_send+0x138>
    1126:	e002      	b.n	112e <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
    1128:	46c0      	nop			; (mov r8, r8)
    112a:	e000      	b.n	112e <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
    112c:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    112e:	693b      	ldr	r3, [r7, #16]
    1130:	2b00      	cmp	r3, #0
    1132:	d100      	bne.n	1136 <hif_send+0x1f6>
    1134:	e073      	b.n	121e <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    1136:	693b      	ldr	r3, [r7, #16]
    1138:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    113a:	2318      	movs	r3, #24
    113c:	18fb      	adds	r3, r7, r3
    113e:	885b      	ldrh	r3, [r3, #2]
    1140:	b29a      	uxth	r2, r3
    1142:	2318      	movs	r3, #24
    1144:	18fb      	adds	r3, r7, r3
    1146:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    1148:	68bb      	ldr	r3, [r7, #8]
    114a:	221f      	movs	r2, #31
    114c:	18bc      	adds	r4, r7, r2
    114e:	2218      	movs	r2, #24
    1150:	18b9      	adds	r1, r7, r2
    1152:	2208      	movs	r2, #8
    1154:	0018      	movs	r0, r3
    1156:	4b5b      	ldr	r3, [pc, #364]	; (12c4 <hif_send+0x384>)
    1158:	4798      	blx	r3
    115a:	0003      	movs	r3, r0
    115c:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    115e:	231f      	movs	r3, #31
    1160:	18fb      	adds	r3, r7, r3
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	b25b      	sxtb	r3, r3
    1166:	2b00      	cmp	r3, #0
    1168:	d000      	beq.n	116c <hif_send+0x22c>
    116a:	e081      	b.n	1270 <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    116c:	68bb      	ldr	r3, [r7, #8]
    116e:	3308      	adds	r3, #8
    1170:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    1172:	683b      	ldr	r3, [r7, #0]
    1174:	2b00      	cmp	r3, #0
    1176:	d015      	beq.n	11a4 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    1178:	68b8      	ldr	r0, [r7, #8]
    117a:	1d3b      	adds	r3, r7, #4
    117c:	881a      	ldrh	r2, [r3, #0]
    117e:	231f      	movs	r3, #31
    1180:	18fc      	adds	r4, r7, r3
    1182:	683b      	ldr	r3, [r7, #0]
    1184:	0019      	movs	r1, r3
    1186:	4b4f      	ldr	r3, [pc, #316]	; (12c4 <hif_send+0x384>)
    1188:	4798      	blx	r3
    118a:	0003      	movs	r3, r0
    118c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    118e:	231f      	movs	r3, #31
    1190:	18fb      	adds	r3, r7, r3
    1192:	781b      	ldrb	r3, [r3, #0]
    1194:	b25b      	sxtb	r3, r3
    1196:	2b00      	cmp	r3, #0
    1198:	d16c      	bne.n	1274 <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    119a:	1d3b      	adds	r3, r7, #4
    119c:	881a      	ldrh	r2, [r3, #0]
    119e:	68bb      	ldr	r3, [r7, #8]
    11a0:	18d3      	adds	r3, r2, r3
    11a2:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    11a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11a6:	2b00      	cmp	r3, #0
    11a8:	d021      	beq.n	11ee <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    11aa:	2338      	movs	r3, #56	; 0x38
    11ac:	18fb      	adds	r3, r7, r3
    11ae:	881a      	ldrh	r2, [r3, #0]
    11b0:	1d3b      	adds	r3, r7, #4
    11b2:	881b      	ldrh	r3, [r3, #0]
    11b4:	1ad3      	subs	r3, r2, r3
    11b6:	001a      	movs	r2, r3
    11b8:	68bb      	ldr	r3, [r7, #8]
    11ba:	18d3      	adds	r3, r2, r3
    11bc:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    11be:	68b8      	ldr	r0, [r7, #8]
    11c0:	2334      	movs	r3, #52	; 0x34
    11c2:	18fb      	adds	r3, r7, r3
    11c4:	881a      	ldrh	r2, [r3, #0]
    11c6:	231f      	movs	r3, #31
    11c8:	18fc      	adds	r4, r7, r3
    11ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11cc:	0019      	movs	r1, r3
    11ce:	4b3d      	ldr	r3, [pc, #244]	; (12c4 <hif_send+0x384>)
    11d0:	4798      	blx	r3
    11d2:	0003      	movs	r3, r0
    11d4:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    11d6:	231f      	movs	r3, #31
    11d8:	18fb      	adds	r3, r7, r3
    11da:	781b      	ldrb	r3, [r3, #0]
    11dc:	b25b      	sxtb	r3, r3
    11de:	2b00      	cmp	r3, #0
    11e0:	d14a      	bne.n	1278 <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    11e2:	2334      	movs	r3, #52	; 0x34
    11e4:	18fb      	adds	r3, r7, r3
    11e6:	881a      	ldrh	r2, [r3, #0]
    11e8:	68bb      	ldr	r3, [r7, #8]
    11ea:	18d3      	adds	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    11ee:	693b      	ldr	r3, [r7, #16]
    11f0:	009b      	lsls	r3, r3, #2
    11f2:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    11f4:	697b      	ldr	r3, [r7, #20]
    11f6:	2202      	movs	r2, #2
    11f8:	4313      	orrs	r3, r2
    11fa:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    11fc:	697b      	ldr	r3, [r7, #20]
    11fe:	221f      	movs	r2, #31
    1200:	18bc      	adds	r4, r7, r2
    1202:	4a31      	ldr	r2, [pc, #196]	; (12c8 <hif_send+0x388>)
    1204:	0019      	movs	r1, r3
    1206:	0010      	movs	r0, r2
    1208:	4b23      	ldr	r3, [pc, #140]	; (1298 <hif_send+0x358>)
    120a:	4798      	blx	r3
    120c:	0003      	movs	r3, r0
    120e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    1210:	231f      	movs	r3, #31
    1212:	18fb      	adds	r3, r7, r3
    1214:	781b      	ldrb	r3, [r3, #0]
    1216:	b25b      	sxtb	r3, r3
    1218:	2b00      	cmp	r3, #0
    121a:	d01a      	beq.n	1252 <hif_send+0x312>
    121c:	e02d      	b.n	127a <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    121e:	231f      	movs	r3, #31
    1220:	18fc      	adds	r4, r7, r3
    1222:	4b2a      	ldr	r3, [pc, #168]	; (12cc <hif_send+0x38c>)
    1224:	4798      	blx	r3
    1226:	0003      	movs	r3, r0
    1228:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    122a:	231f      	movs	r3, #31
    122c:	18fb      	adds	r3, r7, r3
    122e:	22fd      	movs	r2, #253	; 0xfd
    1230:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    1232:	e024      	b.n	127e <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1234:	23cb      	movs	r3, #203	; 0xcb
    1236:	005a      	lsls	r2, r3, #1
    1238:	4925      	ldr	r1, [pc, #148]	; (12d0 <hif_send+0x390>)
    123a:	4b26      	ldr	r3, [pc, #152]	; (12d4 <hif_send+0x394>)
    123c:	0018      	movs	r0, r3
    123e:	4b1a      	ldr	r3, [pc, #104]	; (12a8 <hif_send+0x368>)
    1240:	4798      	blx	r3
    1242:	4b25      	ldr	r3, [pc, #148]	; (12d8 <hif_send+0x398>)
    1244:	0018      	movs	r0, r3
    1246:	4b1a      	ldr	r3, [pc, #104]	; (12b0 <hif_send+0x370>)
    1248:	4798      	blx	r3
    124a:	200d      	movs	r0, #13
    124c:	4b19      	ldr	r3, [pc, #100]	; (12b4 <hif_send+0x374>)
    124e:	4798      	blx	r3
		goto ERR2;
    1250:	e015      	b.n	127e <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    1252:	231f      	movs	r3, #31
    1254:	18fc      	adds	r4, r7, r3
    1256:	4b1d      	ldr	r3, [pc, #116]	; (12cc <hif_send+0x38c>)
    1258:	4798      	blx	r3
    125a:	0003      	movs	r3, r0
    125c:	7023      	strb	r3, [r4, #0]
	return ret;
    125e:	231f      	movs	r3, #31
    1260:	18fb      	adds	r3, r7, r3
    1262:	781b      	ldrb	r3, [r3, #0]
    1264:	b25b      	sxtb	r3, r3
    1266:	e00e      	b.n	1286 <hif_send+0x346>
		if(M2M_SUCCESS != ret) goto ERR1;
    1268:	46c0      	nop			; (mov r8, r8)
    126a:	e006      	b.n	127a <hif_send+0x33a>
		if(M2M_SUCCESS != ret) goto ERR1;
    126c:	46c0      	nop			; (mov r8, r8)
    126e:	e004      	b.n	127a <hif_send+0x33a>
			if(M2M_SUCCESS != ret) goto ERR1;
    1270:	46c0      	nop			; (mov r8, r8)
    1272:	e002      	b.n	127a <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    1274:	46c0      	nop			; (mov r8, r8)
    1276:	e000      	b.n	127a <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    1278:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    127a:	4b18      	ldr	r3, [pc, #96]	; (12dc <hif_send+0x39c>)
    127c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    127e:	231f      	movs	r3, #31
    1280:	18fb      	adds	r3, r7, r3
    1282:	781b      	ldrb	r3, [r3, #0]
    1284:	b25b      	sxtb	r3, r3
}
    1286:	0018      	movs	r0, r3
    1288:	46bd      	mov	sp, r7
    128a:	b009      	add	sp, #36	; 0x24
    128c:	bd90      	pop	{r4, r7, pc}
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	00000e09 	.word	0x00000e09
    1294:	0000108c 	.word	0x0000108c
    1298:	00002d41 	.word	0x00002d41
    129c:	00001078 	.word	0x00001078
    12a0:	00002d1d 	.word	0x00002d1d
    12a4:	0000d828 	.word	0x0000d828
    12a8:	0000c455 	.word	0x0000c455
    12ac:	0000d834 	.word	0x0000d834
    12b0:	0000c571 	.word	0x0000c571
    12b4:	0000c489 	.word	0x0000c489
    12b8:	000003f1 	.word	0x000003f1
    12bc:	00150400 	.word	0x00150400
    12c0:	000003e7 	.word	0x000003e7
    12c4:	00002e89 	.word	0x00002e89
    12c8:	0000106c 	.word	0x0000106c
    12cc:	00000ea1 	.word	0x00000ea1
    12d0:	0000db3c 	.word	0x0000db3c
    12d4:	0000d844 	.word	0x0000d844
    12d8:	0000d858 	.word	0x0000d858
    12dc:	00000e79 	.word	0x00000e79

000012e0 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    12e0:	b590      	push	{r4, r7, lr}
    12e2:	b087      	sub	sp, #28
    12e4:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    12e6:	230f      	movs	r3, #15
    12e8:	18fb      	adds	r3, r7, r3
    12ea:	2200      	movs	r2, #0
    12ec:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    12ee:	230f      	movs	r3, #15
    12f0:	18fc      	adds	r4, r7, r3
    12f2:	2308      	movs	r3, #8
    12f4:	18fb      	adds	r3, r7, r3
    12f6:	4ad6      	ldr	r2, [pc, #856]	; (1650 <hif_isr+0x370>)
    12f8:	0019      	movs	r1, r3
    12fa:	0010      	movs	r0, r2
    12fc:	4bd5      	ldr	r3, [pc, #852]	; (1654 <hif_isr+0x374>)
    12fe:	4798      	blx	r3
    1300:	0003      	movs	r3, r0
    1302:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    1304:	230f      	movs	r3, #15
    1306:	18fb      	adds	r3, r7, r3
    1308:	781b      	ldrb	r3, [r3, #0]
    130a:	b25b      	sxtb	r3, r3
    130c:	2b00      	cmp	r3, #0
    130e:	d000      	beq.n	1312 <hif_isr+0x32>
    1310:	e217      	b.n	1742 <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    1312:	68bb      	ldr	r3, [r7, #8]
    1314:	2201      	movs	r2, #1
    1316:	4013      	ands	r3, r2
    1318:	d100      	bne.n	131c <hif_isr+0x3c>
    131a:	e1fd      	b.n	1718 <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    131c:	2000      	movs	r0, #0
    131e:	4bce      	ldr	r3, [pc, #824]	; (1658 <hif_isr+0x378>)
    1320:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    1322:	68bb      	ldr	r3, [r7, #8]
    1324:	2201      	movs	r2, #1
    1326:	4393      	bics	r3, r2
    1328:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    132a:	68bb      	ldr	r3, [r7, #8]
    132c:	220f      	movs	r2, #15
    132e:	18bc      	adds	r4, r7, r2
    1330:	4ac7      	ldr	r2, [pc, #796]	; (1650 <hif_isr+0x370>)
    1332:	0019      	movs	r1, r3
    1334:	0010      	movs	r0, r2
    1336:	4bc9      	ldr	r3, [pc, #804]	; (165c <hif_isr+0x37c>)
    1338:	4798      	blx	r3
    133a:	0003      	movs	r3, r0
    133c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    133e:	230f      	movs	r3, #15
    1340:	18fb      	adds	r3, r7, r3
    1342:	781b      	ldrb	r3, [r3, #0]
    1344:	b25b      	sxtb	r3, r3
    1346:	2b00      	cmp	r3, #0
    1348:	d000      	beq.n	134c <hif_isr+0x6c>
    134a:	e208      	b.n	175e <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    134c:	4bc4      	ldr	r3, [pc, #784]	; (1660 <hif_isr+0x380>)
    134e:	2201      	movs	r2, #1
    1350:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1352:	68bb      	ldr	r3, [r7, #8]
    1354:	089b      	lsrs	r3, r3, #2
    1356:	b29a      	uxth	r2, r3
    1358:	230c      	movs	r3, #12
    135a:	18fb      	adds	r3, r7, r3
    135c:	0512      	lsls	r2, r2, #20
    135e:	0d12      	lsrs	r2, r2, #20
    1360:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    1362:	230c      	movs	r3, #12
    1364:	18fb      	adds	r3, r7, r3
    1366:	881b      	ldrh	r3, [r3, #0]
    1368:	2b00      	cmp	r3, #0
    136a:	d100      	bne.n	136e <hif_isr+0x8e>
    136c:	e1c1      	b.n	16f2 <hif_isr+0x412>
				uint32 address = 0;
    136e:	2300      	movs	r3, #0
    1370:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1372:	230f      	movs	r3, #15
    1374:	18fc      	adds	r4, r7, r3
    1376:	003b      	movs	r3, r7
    1378:	4aba      	ldr	r2, [pc, #744]	; (1664 <hif_isr+0x384>)
    137a:	0019      	movs	r1, r3
    137c:	0010      	movs	r0, r2
    137e:	4bb5      	ldr	r3, [pc, #724]	; (1654 <hif_isr+0x374>)
    1380:	4798      	blx	r3
    1382:	0003      	movs	r3, r0
    1384:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    1386:	230f      	movs	r3, #15
    1388:	18fb      	adds	r3, r7, r3
    138a:	781b      	ldrb	r3, [r3, #0]
    138c:	b25b      	sxtb	r3, r3
    138e:	2b00      	cmp	r3, #0
    1390:	d012      	beq.n	13b8 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1392:	23c8      	movs	r3, #200	; 0xc8
    1394:	33ff      	adds	r3, #255	; 0xff
    1396:	001a      	movs	r2, r3
    1398:	49b3      	ldr	r1, [pc, #716]	; (1668 <hif_isr+0x388>)
    139a:	4bb4      	ldr	r3, [pc, #720]	; (166c <hif_isr+0x38c>)
    139c:	0018      	movs	r0, r3
    139e:	4bb4      	ldr	r3, [pc, #720]	; (1670 <hif_isr+0x390>)
    13a0:	4798      	blx	r3
    13a2:	4bb4      	ldr	r3, [pc, #720]	; (1674 <hif_isr+0x394>)
    13a4:	0018      	movs	r0, r3
    13a6:	4bb4      	ldr	r3, [pc, #720]	; (1678 <hif_isr+0x398>)
    13a8:	4798      	blx	r3
    13aa:	200d      	movs	r0, #13
    13ac:	4bb3      	ldr	r3, [pc, #716]	; (167c <hif_isr+0x39c>)
    13ae:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    13b0:	2001      	movs	r0, #1
    13b2:	4ba9      	ldr	r3, [pc, #676]	; (1658 <hif_isr+0x378>)
    13b4:	4798      	blx	r3
					goto ERR1;
    13b6:	e1d3      	b.n	1760 <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    13b8:	683a      	ldr	r2, [r7, #0]
    13ba:	4ba9      	ldr	r3, [pc, #676]	; (1660 <hif_isr+0x380>)
    13bc:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    13be:	230c      	movs	r3, #12
    13c0:	18fb      	adds	r3, r7, r3
    13c2:	881a      	ldrh	r2, [r3, #0]
    13c4:	4ba6      	ldr	r3, [pc, #664]	; (1660 <hif_isr+0x380>)
    13c6:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    13c8:	683b      	ldr	r3, [r7, #0]
    13ca:	220f      	movs	r2, #15
    13cc:	18bc      	adds	r4, r7, r2
    13ce:	1d39      	adds	r1, r7, #4
    13d0:	2204      	movs	r2, #4
    13d2:	0018      	movs	r0, r3
    13d4:	4baa      	ldr	r3, [pc, #680]	; (1680 <hif_isr+0x3a0>)
    13d6:	4798      	blx	r3
    13d8:	0003      	movs	r3, r0
    13da:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    13dc:	1d3b      	adds	r3, r7, #4
    13de:	885b      	ldrh	r3, [r3, #2]
    13e0:	b29a      	uxth	r2, r3
    13e2:	1d3b      	adds	r3, r7, #4
    13e4:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    13e6:	230f      	movs	r3, #15
    13e8:	18fb      	adds	r3, r7, r3
    13ea:	781b      	ldrb	r3, [r3, #0]
    13ec:	b25b      	sxtb	r3, r3
    13ee:	2b00      	cmp	r3, #0
    13f0:	d012      	beq.n	1418 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    13f2:	23d2      	movs	r3, #210	; 0xd2
    13f4:	33ff      	adds	r3, #255	; 0xff
    13f6:	001a      	movs	r2, r3
    13f8:	499b      	ldr	r1, [pc, #620]	; (1668 <hif_isr+0x388>)
    13fa:	4b9c      	ldr	r3, [pc, #624]	; (166c <hif_isr+0x38c>)
    13fc:	0018      	movs	r0, r3
    13fe:	4b9c      	ldr	r3, [pc, #624]	; (1670 <hif_isr+0x390>)
    1400:	4798      	blx	r3
    1402:	4ba0      	ldr	r3, [pc, #640]	; (1684 <hif_isr+0x3a4>)
    1404:	0018      	movs	r0, r3
    1406:	4b9c      	ldr	r3, [pc, #624]	; (1678 <hif_isr+0x398>)
    1408:	4798      	blx	r3
    140a:	200d      	movs	r0, #13
    140c:	4b9b      	ldr	r3, [pc, #620]	; (167c <hif_isr+0x39c>)
    140e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1410:	2001      	movs	r0, #1
    1412:	4b91      	ldr	r3, [pc, #580]	; (1658 <hif_isr+0x378>)
    1414:	4798      	blx	r3
					goto ERR1;
    1416:	e1a3      	b.n	1760 <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    1418:	1d3b      	adds	r3, r7, #4
    141a:	885b      	ldrh	r3, [r3, #2]
    141c:	b29b      	uxth	r3, r3
    141e:	220c      	movs	r2, #12
    1420:	18ba      	adds	r2, r7, r2
    1422:	8812      	ldrh	r2, [r2, #0]
    1424:	429a      	cmp	r2, r3
    1426:	d02d      	beq.n	1484 <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    1428:	230c      	movs	r3, #12
    142a:	18fb      	adds	r3, r7, r3
    142c:	881b      	ldrh	r3, [r3, #0]
    142e:	1d3a      	adds	r2, r7, #4
    1430:	8852      	ldrh	r2, [r2, #2]
    1432:	b292      	uxth	r2, r2
    1434:	1a9b      	subs	r3, r3, r2
    1436:	2b04      	cmp	r3, #4
    1438:	dd24      	ble.n	1484 <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    143a:	23ed      	movs	r3, #237	; 0xed
    143c:	005a      	lsls	r2, r3, #1
    143e:	498a      	ldr	r1, [pc, #552]	; (1668 <hif_isr+0x388>)
    1440:	4b8a      	ldr	r3, [pc, #552]	; (166c <hif_isr+0x38c>)
    1442:	0018      	movs	r0, r3
    1444:	4b8a      	ldr	r3, [pc, #552]	; (1670 <hif_isr+0x390>)
    1446:	4798      	blx	r3
    1448:	230c      	movs	r3, #12
    144a:	18fb      	adds	r3, r7, r3
    144c:	8819      	ldrh	r1, [r3, #0]
    144e:	1d3b      	adds	r3, r7, #4
    1450:	885b      	ldrh	r3, [r3, #2]
    1452:	b29b      	uxth	r3, r3
    1454:	001a      	movs	r2, r3
    1456:	1d3b      	adds	r3, r7, #4
    1458:	781b      	ldrb	r3, [r3, #0]
    145a:	b2db      	uxtb	r3, r3
    145c:	001c      	movs	r4, r3
    145e:	1d3b      	adds	r3, r7, #4
    1460:	785b      	ldrb	r3, [r3, #1]
    1462:	b2db      	uxtb	r3, r3
    1464:	4888      	ldr	r0, [pc, #544]	; (1688 <hif_isr+0x3a8>)
    1466:	9300      	str	r3, [sp, #0]
    1468:	0023      	movs	r3, r4
    146a:	4c81      	ldr	r4, [pc, #516]	; (1670 <hif_isr+0x390>)
    146c:	47a0      	blx	r4
    146e:	200d      	movs	r0, #13
    1470:	4b82      	ldr	r3, [pc, #520]	; (167c <hif_isr+0x39c>)
    1472:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    1474:	2001      	movs	r0, #1
    1476:	4b78      	ldr	r3, [pc, #480]	; (1658 <hif_isr+0x378>)
    1478:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    147a:	230f      	movs	r3, #15
    147c:	18fb      	adds	r3, r7, r3
    147e:	22fa      	movs	r2, #250	; 0xfa
    1480:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    1482:	e16d      	b.n	1760 <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1484:	1d3b      	adds	r3, r7, #4
    1486:	781b      	ldrb	r3, [r3, #0]
    1488:	b2db      	uxtb	r3, r3
    148a:	2b01      	cmp	r3, #1
    148c:	d120      	bne.n	14d0 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    148e:	4b74      	ldr	r3, [pc, #464]	; (1660 <hif_isr+0x380>)
    1490:	68db      	ldr	r3, [r3, #12]
    1492:	2b00      	cmp	r3, #0
    1494:	d00d      	beq.n	14b2 <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1496:	4b72      	ldr	r3, [pc, #456]	; (1660 <hif_isr+0x380>)
    1498:	68db      	ldr	r3, [r3, #12]
    149a:	1d3a      	adds	r2, r7, #4
    149c:	7852      	ldrb	r2, [r2, #1]
    149e:	b2d0      	uxtb	r0, r2
    14a0:	1d3a      	adds	r2, r7, #4
    14a2:	8852      	ldrh	r2, [r2, #2]
    14a4:	b292      	uxth	r2, r2
    14a6:	3a08      	subs	r2, #8
    14a8:	b291      	uxth	r1, r2
    14aa:	683a      	ldr	r2, [r7, #0]
    14ac:	3208      	adds	r2, #8
    14ae:	4798      	blx	r3
    14b0:	e0fe      	b.n	16b0 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    14b2:	23f3      	movs	r3, #243	; 0xf3
    14b4:	005a      	lsls	r2, r3, #1
    14b6:	496c      	ldr	r1, [pc, #432]	; (1668 <hif_isr+0x388>)
    14b8:	4b6c      	ldr	r3, [pc, #432]	; (166c <hif_isr+0x38c>)
    14ba:	0018      	movs	r0, r3
    14bc:	4b6c      	ldr	r3, [pc, #432]	; (1670 <hif_isr+0x390>)
    14be:	4798      	blx	r3
    14c0:	4b72      	ldr	r3, [pc, #456]	; (168c <hif_isr+0x3ac>)
    14c2:	0018      	movs	r0, r3
    14c4:	4b6c      	ldr	r3, [pc, #432]	; (1678 <hif_isr+0x398>)
    14c6:	4798      	blx	r3
    14c8:	200d      	movs	r0, #13
    14ca:	4b6c      	ldr	r3, [pc, #432]	; (167c <hif_isr+0x39c>)
    14cc:	4798      	blx	r3
    14ce:	e0ef      	b.n	16b0 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    14d0:	1d3b      	adds	r3, r7, #4
    14d2:	781b      	ldrb	r3, [r3, #0]
    14d4:	b2db      	uxtb	r3, r3
    14d6:	2b02      	cmp	r3, #2
    14d8:	d120      	bne.n	151c <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    14da:	4b61      	ldr	r3, [pc, #388]	; (1660 <hif_isr+0x380>)
    14dc:	691b      	ldr	r3, [r3, #16]
    14de:	2b00      	cmp	r3, #0
    14e0:	d00d      	beq.n	14fe <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    14e2:	4b5f      	ldr	r3, [pc, #380]	; (1660 <hif_isr+0x380>)
    14e4:	691b      	ldr	r3, [r3, #16]
    14e6:	1d3a      	adds	r2, r7, #4
    14e8:	7852      	ldrb	r2, [r2, #1]
    14ea:	b2d0      	uxtb	r0, r2
    14ec:	1d3a      	adds	r2, r7, #4
    14ee:	8852      	ldrh	r2, [r2, #2]
    14f0:	b292      	uxth	r2, r2
    14f2:	3a08      	subs	r2, #8
    14f4:	b291      	uxth	r1, r2
    14f6:	683a      	ldr	r2, [r7, #0]
    14f8:	3208      	adds	r2, #8
    14fa:	4798      	blx	r3
    14fc:	e0d8      	b.n	16b0 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    14fe:	23f7      	movs	r3, #247	; 0xf7
    1500:	005a      	lsls	r2, r3, #1
    1502:	4959      	ldr	r1, [pc, #356]	; (1668 <hif_isr+0x388>)
    1504:	4b59      	ldr	r3, [pc, #356]	; (166c <hif_isr+0x38c>)
    1506:	0018      	movs	r0, r3
    1508:	4b59      	ldr	r3, [pc, #356]	; (1670 <hif_isr+0x390>)
    150a:	4798      	blx	r3
    150c:	4b60      	ldr	r3, [pc, #384]	; (1690 <hif_isr+0x3b0>)
    150e:	0018      	movs	r0, r3
    1510:	4b59      	ldr	r3, [pc, #356]	; (1678 <hif_isr+0x398>)
    1512:	4798      	blx	r3
    1514:	200d      	movs	r0, #13
    1516:	4b59      	ldr	r3, [pc, #356]	; (167c <hif_isr+0x39c>)
    1518:	4798      	blx	r3
    151a:	e0c9      	b.n	16b0 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    151c:	1d3b      	adds	r3, r7, #4
    151e:	781b      	ldrb	r3, [r3, #0]
    1520:	b2db      	uxtb	r3, r3
    1522:	2b04      	cmp	r3, #4
    1524:	d120      	bne.n	1568 <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    1526:	4b4e      	ldr	r3, [pc, #312]	; (1660 <hif_isr+0x380>)
    1528:	695b      	ldr	r3, [r3, #20]
    152a:	2b00      	cmp	r3, #0
    152c:	d00d      	beq.n	154a <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    152e:	4b4c      	ldr	r3, [pc, #304]	; (1660 <hif_isr+0x380>)
    1530:	695b      	ldr	r3, [r3, #20]
    1532:	1d3a      	adds	r2, r7, #4
    1534:	7852      	ldrb	r2, [r2, #1]
    1536:	b2d0      	uxtb	r0, r2
    1538:	1d3a      	adds	r2, r7, #4
    153a:	8852      	ldrh	r2, [r2, #2]
    153c:	b292      	uxth	r2, r2
    153e:	3a08      	subs	r2, #8
    1540:	b291      	uxth	r1, r2
    1542:	683a      	ldr	r2, [r7, #0]
    1544:	3208      	adds	r2, #8
    1546:	4798      	blx	r3
    1548:	e0b2      	b.n	16b0 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    154a:	23fb      	movs	r3, #251	; 0xfb
    154c:	005a      	lsls	r2, r3, #1
    154e:	4946      	ldr	r1, [pc, #280]	; (1668 <hif_isr+0x388>)
    1550:	4b46      	ldr	r3, [pc, #280]	; (166c <hif_isr+0x38c>)
    1552:	0018      	movs	r0, r3
    1554:	4b46      	ldr	r3, [pc, #280]	; (1670 <hif_isr+0x390>)
    1556:	4798      	blx	r3
    1558:	4b4e      	ldr	r3, [pc, #312]	; (1694 <hif_isr+0x3b4>)
    155a:	0018      	movs	r0, r3
    155c:	4b46      	ldr	r3, [pc, #280]	; (1678 <hif_isr+0x398>)
    155e:	4798      	blx	r3
    1560:	200d      	movs	r0, #13
    1562:	4b46      	ldr	r3, [pc, #280]	; (167c <hif_isr+0x39c>)
    1564:	4798      	blx	r3
    1566:	e0a3      	b.n	16b0 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1568:	1d3b      	adds	r3, r7, #4
    156a:	781b      	ldrb	r3, [r3, #0]
    156c:	b2db      	uxtb	r3, r3
    156e:	2b06      	cmp	r3, #6
    1570:	d11f      	bne.n	15b2 <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    1572:	4b3b      	ldr	r3, [pc, #236]	; (1660 <hif_isr+0x380>)
    1574:	6a1b      	ldr	r3, [r3, #32]
    1576:	2b00      	cmp	r3, #0
    1578:	d00d      	beq.n	1596 <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    157a:	4b39      	ldr	r3, [pc, #228]	; (1660 <hif_isr+0x380>)
    157c:	6a1b      	ldr	r3, [r3, #32]
    157e:	1d3a      	adds	r2, r7, #4
    1580:	7852      	ldrb	r2, [r2, #1]
    1582:	b2d0      	uxtb	r0, r2
    1584:	1d3a      	adds	r2, r7, #4
    1586:	8852      	ldrh	r2, [r2, #2]
    1588:	b292      	uxth	r2, r2
    158a:	3a08      	subs	r2, #8
    158c:	b291      	uxth	r1, r2
    158e:	683a      	ldr	r2, [r7, #0]
    1590:	3208      	adds	r2, #8
    1592:	4798      	blx	r3
    1594:	e08c      	b.n	16b0 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    1596:	4a40      	ldr	r2, [pc, #256]	; (1698 <hif_isr+0x3b8>)
    1598:	4933      	ldr	r1, [pc, #204]	; (1668 <hif_isr+0x388>)
    159a:	4b34      	ldr	r3, [pc, #208]	; (166c <hif_isr+0x38c>)
    159c:	0018      	movs	r0, r3
    159e:	4b34      	ldr	r3, [pc, #208]	; (1670 <hif_isr+0x390>)
    15a0:	4798      	blx	r3
    15a2:	4b3e      	ldr	r3, [pc, #248]	; (169c <hif_isr+0x3bc>)
    15a4:	0018      	movs	r0, r3
    15a6:	4b34      	ldr	r3, [pc, #208]	; (1678 <hif_isr+0x398>)
    15a8:	4798      	blx	r3
    15aa:	200d      	movs	r0, #13
    15ac:	4b33      	ldr	r3, [pc, #204]	; (167c <hif_isr+0x39c>)
    15ae:	4798      	blx	r3
    15b0:	e07e      	b.n	16b0 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    15b2:	1d3b      	adds	r3, r7, #4
    15b4:	781b      	ldrb	r3, [r3, #0]
    15b6:	b2db      	uxtb	r3, r3
    15b8:	2b07      	cmp	r3, #7
    15ba:	d11f      	bne.n	15fc <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    15bc:	4b28      	ldr	r3, [pc, #160]	; (1660 <hif_isr+0x380>)
    15be:	699b      	ldr	r3, [r3, #24]
    15c0:	2b00      	cmp	r3, #0
    15c2:	d00d      	beq.n	15e0 <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    15c4:	4b26      	ldr	r3, [pc, #152]	; (1660 <hif_isr+0x380>)
    15c6:	699b      	ldr	r3, [r3, #24]
    15c8:	1d3a      	adds	r2, r7, #4
    15ca:	7852      	ldrb	r2, [r2, #1]
    15cc:	b2d0      	uxtb	r0, r2
    15ce:	1d3a      	adds	r2, r7, #4
    15d0:	8852      	ldrh	r2, [r2, #2]
    15d2:	b292      	uxth	r2, r2
    15d4:	3a08      	subs	r2, #8
    15d6:	b291      	uxth	r1, r2
    15d8:	683a      	ldr	r2, [r7, #0]
    15da:	3208      	adds	r2, #8
    15dc:	4798      	blx	r3
    15de:	e067      	b.n	16b0 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    15e0:	4a2f      	ldr	r2, [pc, #188]	; (16a0 <hif_isr+0x3c0>)
    15e2:	4921      	ldr	r1, [pc, #132]	; (1668 <hif_isr+0x388>)
    15e4:	4b21      	ldr	r3, [pc, #132]	; (166c <hif_isr+0x38c>)
    15e6:	0018      	movs	r0, r3
    15e8:	4b21      	ldr	r3, [pc, #132]	; (1670 <hif_isr+0x390>)
    15ea:	4798      	blx	r3
    15ec:	4b2d      	ldr	r3, [pc, #180]	; (16a4 <hif_isr+0x3c4>)
    15ee:	0018      	movs	r0, r3
    15f0:	4b21      	ldr	r3, [pc, #132]	; (1678 <hif_isr+0x398>)
    15f2:	4798      	blx	r3
    15f4:	200d      	movs	r0, #13
    15f6:	4b21      	ldr	r3, [pc, #132]	; (167c <hif_isr+0x39c>)
    15f8:	4798      	blx	r3
    15fa:	e059      	b.n	16b0 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    15fc:	1d3b      	adds	r3, r7, #4
    15fe:	781b      	ldrb	r3, [r3, #0]
    1600:	b2db      	uxtb	r3, r3
    1602:	2b05      	cmp	r3, #5
    1604:	d111      	bne.n	162a <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    1606:	4b16      	ldr	r3, [pc, #88]	; (1660 <hif_isr+0x380>)
    1608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    160a:	2b00      	cmp	r3, #0
    160c:	d050      	beq.n	16b0 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    160e:	4b14      	ldr	r3, [pc, #80]	; (1660 <hif_isr+0x380>)
    1610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1612:	1d3a      	adds	r2, r7, #4
    1614:	7852      	ldrb	r2, [r2, #1]
    1616:	b2d0      	uxtb	r0, r2
    1618:	1d3a      	adds	r2, r7, #4
    161a:	8852      	ldrh	r2, [r2, #2]
    161c:	b292      	uxth	r2, r2
    161e:	3a08      	subs	r2, #8
    1620:	b291      	uxth	r1, r2
    1622:	683a      	ldr	r2, [r7, #0]
    1624:	3208      	adds	r2, #8
    1626:	4798      	blx	r3
    1628:	e042      	b.n	16b0 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    162a:	4a1f      	ldr	r2, [pc, #124]	; (16a8 <hif_isr+0x3c8>)
    162c:	490e      	ldr	r1, [pc, #56]	; (1668 <hif_isr+0x388>)
    162e:	4b0f      	ldr	r3, [pc, #60]	; (166c <hif_isr+0x38c>)
    1630:	0018      	movs	r0, r3
    1632:	4b0f      	ldr	r3, [pc, #60]	; (1670 <hif_isr+0x390>)
    1634:	4798      	blx	r3
    1636:	4b1d      	ldr	r3, [pc, #116]	; (16ac <hif_isr+0x3cc>)
    1638:	0018      	movs	r0, r3
    163a:	4b0f      	ldr	r3, [pc, #60]	; (1678 <hif_isr+0x398>)
    163c:	4798      	blx	r3
    163e:	200d      	movs	r0, #13
    1640:	4b0e      	ldr	r3, [pc, #56]	; (167c <hif_isr+0x39c>)
    1642:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1644:	230f      	movs	r3, #15
    1646:	18fb      	adds	r3, r7, r3
    1648:	22fa      	movs	r2, #250	; 0xfa
    164a:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    164c:	e088      	b.n	1760 <hif_isr+0x480>
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	00001070 	.word	0x00001070
    1654:	00002d1d 	.word	0x00002d1d
    1658:	00000491 	.word	0x00000491
    165c:	00002d41 	.word	0x00002d41
    1660:	20000310 	.word	0x20000310
    1664:	00001084 	.word	0x00001084
    1668:	0000db48 	.word	0x0000db48
    166c:	0000d844 	.word	0x0000d844
    1670:	0000c455 	.word	0x0000c455
    1674:	0000d874 	.word	0x0000d874
    1678:	0000c571 	.word	0x0000c571
    167c:	0000c489 	.word	0x0000c489
    1680:	00002d91 	.word	0x00002d91
    1684:	0000d898 	.word	0x0000d898
    1688:	0000d8b0 	.word	0x0000d8b0
    168c:	0000d8f0 	.word	0x0000d8f0
    1690:	0000d910 	.word	0x0000d910
    1694:	0000d934 	.word	0x0000d934
    1698:	000001ff 	.word	0x000001ff
    169c:	0000d954 	.word	0x0000d954
    16a0:	00000206 	.word	0x00000206
    16a4:	0000d978 	.word	0x0000d978
    16a8:	0000020f 	.word	0x0000020f
    16ac:	0000d99c 	.word	0x0000d99c
				}
				if(gstrHifCxt.u8HifRXDone)
    16b0:	4b2f      	ldr	r3, [pc, #188]	; (1770 <hif_isr+0x490>)
    16b2:	789b      	ldrb	r3, [r3, #2]
    16b4:	b2db      	uxtb	r3, r3
    16b6:	2b00      	cmp	r3, #0
    16b8:	d052      	beq.n	1760 <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    16ba:	4a2e      	ldr	r2, [pc, #184]	; (1774 <hif_isr+0x494>)
    16bc:	492e      	ldr	r1, [pc, #184]	; (1778 <hif_isr+0x498>)
    16be:	4b2f      	ldr	r3, [pc, #188]	; (177c <hif_isr+0x49c>)
    16c0:	0018      	movs	r0, r3
    16c2:	4b2f      	ldr	r3, [pc, #188]	; (1780 <hif_isr+0x4a0>)
    16c4:	4798      	blx	r3
    16c6:	1d3b      	adds	r3, r7, #4
    16c8:	781b      	ldrb	r3, [r3, #0]
    16ca:	b2db      	uxtb	r3, r3
    16cc:	0019      	movs	r1, r3
    16ce:	1d3b      	adds	r3, r7, #4
    16d0:	785b      	ldrb	r3, [r3, #1]
    16d2:	b2db      	uxtb	r3, r3
    16d4:	001a      	movs	r2, r3
    16d6:	4b2b      	ldr	r3, [pc, #172]	; (1784 <hif_isr+0x4a4>)
    16d8:	0018      	movs	r0, r3
    16da:	4b29      	ldr	r3, [pc, #164]	; (1780 <hif_isr+0x4a0>)
    16dc:	4798      	blx	r3
    16de:	200d      	movs	r0, #13
    16e0:	4b29      	ldr	r3, [pc, #164]	; (1788 <hif_isr+0x4a8>)
    16e2:	4798      	blx	r3
					ret = hif_set_rx_done();
    16e4:	230f      	movs	r3, #15
    16e6:	18fc      	adds	r4, r7, r3
    16e8:	4b28      	ldr	r3, [pc, #160]	; (178c <hif_isr+0x4ac>)
    16ea:	4798      	blx	r3
    16ec:	0003      	movs	r3, r0
    16ee:	7023      	strb	r3, [r4, #0]
    16f0:	e036      	b.n	1760 <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    16f2:	2387      	movs	r3, #135	; 0x87
    16f4:	009a      	lsls	r2, r3, #2
    16f6:	4920      	ldr	r1, [pc, #128]	; (1778 <hif_isr+0x498>)
    16f8:	4b20      	ldr	r3, [pc, #128]	; (177c <hif_isr+0x49c>)
    16fa:	0018      	movs	r0, r3
    16fc:	4b20      	ldr	r3, [pc, #128]	; (1780 <hif_isr+0x4a0>)
    16fe:	4798      	blx	r3
    1700:	4b23      	ldr	r3, [pc, #140]	; (1790 <hif_isr+0x4b0>)
    1702:	0018      	movs	r0, r3
    1704:	4b23      	ldr	r3, [pc, #140]	; (1794 <hif_isr+0x4b4>)
    1706:	4798      	blx	r3
    1708:	200d      	movs	r0, #13
    170a:	4b1f      	ldr	r3, [pc, #124]	; (1788 <hif_isr+0x4a8>)
    170c:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    170e:	230f      	movs	r3, #15
    1710:	18fb      	adds	r3, r7, r3
    1712:	22fe      	movs	r2, #254	; 0xfe
    1714:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    1716:	e023      	b.n	1760 <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    1718:	2389      	movs	r3, #137	; 0x89
    171a:	009a      	lsls	r2, r3, #2
    171c:	4916      	ldr	r1, [pc, #88]	; (1778 <hif_isr+0x498>)
    171e:	4b17      	ldr	r3, [pc, #92]	; (177c <hif_isr+0x49c>)
    1720:	0018      	movs	r0, r3
    1722:	4b17      	ldr	r3, [pc, #92]	; (1780 <hif_isr+0x4a0>)
    1724:	4798      	blx	r3
    1726:	68ba      	ldr	r2, [r7, #8]
    1728:	4b1b      	ldr	r3, [pc, #108]	; (1798 <hif_isr+0x4b8>)
    172a:	0011      	movs	r1, r2
    172c:	0018      	movs	r0, r3
    172e:	4b14      	ldr	r3, [pc, #80]	; (1780 <hif_isr+0x4a0>)
    1730:	4798      	blx	r3
    1732:	200d      	movs	r0, #13
    1734:	4b14      	ldr	r3, [pc, #80]	; (1788 <hif_isr+0x4a8>)
    1736:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1738:	230f      	movs	r3, #15
    173a:	18fb      	adds	r3, r7, r3
    173c:	22f4      	movs	r2, #244	; 0xf4
    173e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1740:	e00e      	b.n	1760 <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1742:	4a16      	ldr	r2, [pc, #88]	; (179c <hif_isr+0x4bc>)
    1744:	490c      	ldr	r1, [pc, #48]	; (1778 <hif_isr+0x498>)
    1746:	4b0d      	ldr	r3, [pc, #52]	; (177c <hif_isr+0x49c>)
    1748:	0018      	movs	r0, r3
    174a:	4b0d      	ldr	r3, [pc, #52]	; (1780 <hif_isr+0x4a0>)
    174c:	4798      	blx	r3
    174e:	4b14      	ldr	r3, [pc, #80]	; (17a0 <hif_isr+0x4c0>)
    1750:	0018      	movs	r0, r3
    1752:	4b10      	ldr	r3, [pc, #64]	; (1794 <hif_isr+0x4b4>)
    1754:	4798      	blx	r3
    1756:	200d      	movs	r0, #13
    1758:	4b0b      	ldr	r3, [pc, #44]	; (1788 <hif_isr+0x4a8>)
    175a:	4798      	blx	r3
		goto ERR1;
    175c:	e000      	b.n	1760 <hif_isr+0x480>
			if(ret != M2M_SUCCESS)goto ERR1;
    175e:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    1760:	230f      	movs	r3, #15
    1762:	18fb      	adds	r3, r7, r3
    1764:	781b      	ldrb	r3, [r3, #0]
    1766:	b25b      	sxtb	r3, r3
}
    1768:	0018      	movs	r0, r3
    176a:	46bd      	mov	sp, r7
    176c:	b005      	add	sp, #20
    176e:	bd90      	pop	{r4, r7, pc}
    1770:	20000310 	.word	0x20000310
    1774:	00000215 	.word	0x00000215
    1778:	0000db48 	.word	0x0000db48
    177c:	0000d844 	.word	0x0000d844
    1780:	0000c455 	.word	0x0000c455
    1784:	0000d9b4 	.word	0x0000d9b4
    1788:	0000c489 	.word	0x0000c489
    178c:	00000d79 	.word	0x00000d79
    1790:	0000d9e0 	.word	0x0000d9e0
    1794:	0000c571 	.word	0x0000c571
    1798:	0000d9f4 	.word	0x0000d9f4
    179c:	0000022d 	.word	0x0000022d
    17a0:	0000da10 	.word	0x0000da10

000017a4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    17a4:	b590      	push	{r4, r7, lr}
    17a6:	b083      	sub	sp, #12
    17a8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    17aa:	1dfb      	adds	r3, r7, #7
    17ac:	2200      	movs	r2, #0
    17ae:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    17b0:	e023      	b.n	17fa <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    17b2:	4b18      	ldr	r3, [pc, #96]	; (1814 <hif_handle_isr+0x70>)
    17b4:	78db      	ldrb	r3, [r3, #3]
    17b6:	b2db      	uxtb	r3, r3
    17b8:	3b01      	subs	r3, #1
    17ba:	b2da      	uxtb	r2, r3
    17bc:	4b15      	ldr	r3, [pc, #84]	; (1814 <hif_handle_isr+0x70>)
    17be:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    17c0:	1dfc      	adds	r4, r7, #7
    17c2:	4b15      	ldr	r3, [pc, #84]	; (1818 <hif_handle_isr+0x74>)
    17c4:	4798      	blx	r3
    17c6:	0003      	movs	r3, r0
    17c8:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    17ca:	1dfb      	adds	r3, r7, #7
    17cc:	781b      	ldrb	r3, [r3, #0]
    17ce:	b25b      	sxtb	r3, r3
    17d0:	2b00      	cmp	r3, #0
    17d2:	d100      	bne.n	17d6 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    17d4:	e011      	b.n	17fa <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    17d6:	4a11      	ldr	r2, [pc, #68]	; (181c <hif_handle_isr+0x78>)
    17d8:	4911      	ldr	r1, [pc, #68]	; (1820 <hif_handle_isr+0x7c>)
    17da:	4b12      	ldr	r3, [pc, #72]	; (1824 <hif_handle_isr+0x80>)
    17dc:	0018      	movs	r0, r3
    17de:	4b12      	ldr	r3, [pc, #72]	; (1828 <hif_handle_isr+0x84>)
    17e0:	4798      	blx	r3
    17e2:	1dfb      	adds	r3, r7, #7
    17e4:	2200      	movs	r2, #0
    17e6:	569a      	ldrsb	r2, [r3, r2]
    17e8:	4b10      	ldr	r3, [pc, #64]	; (182c <hif_handle_isr+0x88>)
    17ea:	0011      	movs	r1, r2
    17ec:	0018      	movs	r0, r3
    17ee:	4b0e      	ldr	r3, [pc, #56]	; (1828 <hif_handle_isr+0x84>)
    17f0:	4798      	blx	r3
    17f2:	200d      	movs	r0, #13
    17f4:	4b0e      	ldr	r3, [pc, #56]	; (1830 <hif_handle_isr+0x8c>)
    17f6:	4798      	blx	r3
			ret = hif_isr();
    17f8:	e7e2      	b.n	17c0 <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    17fa:	4b06      	ldr	r3, [pc, #24]	; (1814 <hif_handle_isr+0x70>)
    17fc:	78db      	ldrb	r3, [r3, #3]
    17fe:	b2db      	uxtb	r3, r3
    1800:	2b00      	cmp	r3, #0
    1802:	d1d6      	bne.n	17b2 <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    1804:	1dfb      	adds	r3, r7, #7
    1806:	781b      	ldrb	r3, [r3, #0]
    1808:	b25b      	sxtb	r3, r3
}
    180a:	0018      	movs	r0, r3
    180c:	46bd      	mov	sp, r7
    180e:	b003      	add	sp, #12
    1810:	bd90      	pop	{r4, r7, pc}
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	20000310 	.word	0x20000310
    1818:	000012e1 	.word	0x000012e1
    181c:	0000024a 	.word	0x0000024a
    1820:	0000db50 	.word	0x0000db50
    1824:	0000d844 	.word	0x0000d844
    1828:	0000c455 	.word	0x0000c455
    182c:	0000da34 	.word	0x0000da34
    1830:	0000c489 	.word	0x0000c489

00001834 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1834:	b590      	push	{r4, r7, lr}
    1836:	b087      	sub	sp, #28
    1838:	af00      	add	r7, sp, #0
    183a:	60f8      	str	r0, [r7, #12]
    183c:	60b9      	str	r1, [r7, #8]
    183e:	0019      	movs	r1, r3
    1840:	1dbb      	adds	r3, r7, #6
    1842:	801a      	strh	r2, [r3, #0]
    1844:	1d7b      	adds	r3, r7, #5
    1846:	1c0a      	adds	r2, r1, #0
    1848:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    184a:	2317      	movs	r3, #23
    184c:	18fb      	adds	r3, r7, r3
    184e:	2200      	movs	r2, #0
    1850:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1852:	68fb      	ldr	r3, [r7, #12]
    1854:	2b00      	cmp	r3, #0
    1856:	d006      	beq.n	1866 <hif_receive+0x32>
    1858:	68bb      	ldr	r3, [r7, #8]
    185a:	2b00      	cmp	r3, #0
    185c:	d003      	beq.n	1866 <hif_receive+0x32>
    185e:	1dbb      	adds	r3, r7, #6
    1860:	881b      	ldrh	r3, [r3, #0]
    1862:	2b00      	cmp	r3, #0
    1864:	d11c      	bne.n	18a0 <hif_receive+0x6c>
	{
		if(isDone)
    1866:	1d7b      	adds	r3, r7, #5
    1868:	781b      	ldrb	r3, [r3, #0]
    186a:	2b00      	cmp	r3, #0
    186c:	d006      	beq.n	187c <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    186e:	2317      	movs	r3, #23
    1870:	18fc      	adds	r4, r7, r3
    1872:	4b42      	ldr	r3, [pc, #264]	; (197c <hif_receive+0x148>)
    1874:	4798      	blx	r3
    1876:	0003      	movs	r3, r0
    1878:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    187a:	e077      	b.n	196c <hif_receive+0x138>
			ret = M2M_ERR_FAIL;
    187c:	2317      	movs	r3, #23
    187e:	18fb      	adds	r3, r7, r3
    1880:	22f4      	movs	r2, #244	; 0xf4
    1882:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    1884:	4a3e      	ldr	r2, [pc, #248]	; (1980 <hif_receive+0x14c>)
    1886:	493f      	ldr	r1, [pc, #252]	; (1984 <hif_receive+0x150>)
    1888:	4b3f      	ldr	r3, [pc, #252]	; (1988 <hif_receive+0x154>)
    188a:	0018      	movs	r0, r3
    188c:	4b3f      	ldr	r3, [pc, #252]	; (198c <hif_receive+0x158>)
    188e:	4798      	blx	r3
    1890:	4b3f      	ldr	r3, [pc, #252]	; (1990 <hif_receive+0x15c>)
    1892:	0018      	movs	r0, r3
    1894:	4b3f      	ldr	r3, [pc, #252]	; (1994 <hif_receive+0x160>)
    1896:	4798      	blx	r3
    1898:	200d      	movs	r0, #13
    189a:	4b3f      	ldr	r3, [pc, #252]	; (1998 <hif_receive+0x164>)
    189c:	4798      	blx	r3
		goto ERR1;
    189e:	e065      	b.n	196c <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    18a0:	1dbb      	adds	r3, r7, #6
    18a2:	881a      	ldrh	r2, [r3, #0]
    18a4:	4b3d      	ldr	r3, [pc, #244]	; (199c <hif_receive+0x168>)
    18a6:	689b      	ldr	r3, [r3, #8]
    18a8:	429a      	cmp	r2, r3
    18aa:	d915      	bls.n	18d8 <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    18ac:	2317      	movs	r3, #23
    18ae:	18fb      	adds	r3, r7, r3
    18b0:	22f4      	movs	r2, #244	; 0xf4
    18b2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    18b4:	4a3a      	ldr	r2, [pc, #232]	; (19a0 <hif_receive+0x16c>)
    18b6:	4933      	ldr	r1, [pc, #204]	; (1984 <hif_receive+0x150>)
    18b8:	4b33      	ldr	r3, [pc, #204]	; (1988 <hif_receive+0x154>)
    18ba:	0018      	movs	r0, r3
    18bc:	4b33      	ldr	r3, [pc, #204]	; (198c <hif_receive+0x158>)
    18be:	4798      	blx	r3
    18c0:	1dbb      	adds	r3, r7, #6
    18c2:	8819      	ldrh	r1, [r3, #0]
    18c4:	4b35      	ldr	r3, [pc, #212]	; (199c <hif_receive+0x168>)
    18c6:	689a      	ldr	r2, [r3, #8]
    18c8:	4b36      	ldr	r3, [pc, #216]	; (19a4 <hif_receive+0x170>)
    18ca:	0018      	movs	r0, r3
    18cc:	4b2f      	ldr	r3, [pc, #188]	; (198c <hif_receive+0x158>)
    18ce:	4798      	blx	r3
    18d0:	200d      	movs	r0, #13
    18d2:	4b31      	ldr	r3, [pc, #196]	; (1998 <hif_receive+0x164>)
    18d4:	4798      	blx	r3
		goto ERR1;
    18d6:	e049      	b.n	196c <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    18d8:	4b30      	ldr	r3, [pc, #192]	; (199c <hif_receive+0x168>)
    18da:	685a      	ldr	r2, [r3, #4]
    18dc:	68fb      	ldr	r3, [r7, #12]
    18de:	429a      	cmp	r2, r3
    18e0:	d80a      	bhi.n	18f8 <hif_receive+0xc4>
    18e2:	1dbb      	adds	r3, r7, #6
    18e4:	881a      	ldrh	r2, [r3, #0]
    18e6:	68fb      	ldr	r3, [r7, #12]
    18e8:	18d2      	adds	r2, r2, r3
    18ea:	4b2c      	ldr	r3, [pc, #176]	; (199c <hif_receive+0x168>)
    18ec:	6859      	ldr	r1, [r3, #4]
    18ee:	4b2b      	ldr	r3, [pc, #172]	; (199c <hif_receive+0x168>)
    18f0:	689b      	ldr	r3, [r3, #8]
    18f2:	18cb      	adds	r3, r1, r3
    18f4:	429a      	cmp	r2, r3
    18f6:	d911      	bls.n	191c <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    18f8:	2317      	movs	r3, #23
    18fa:	18fb      	adds	r3, r7, r3
    18fc:	22f4      	movs	r2, #244	; 0xf4
    18fe:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1900:	4a29      	ldr	r2, [pc, #164]	; (19a8 <hif_receive+0x174>)
    1902:	4920      	ldr	r1, [pc, #128]	; (1984 <hif_receive+0x150>)
    1904:	4b20      	ldr	r3, [pc, #128]	; (1988 <hif_receive+0x154>)
    1906:	0018      	movs	r0, r3
    1908:	4b20      	ldr	r3, [pc, #128]	; (198c <hif_receive+0x158>)
    190a:	4798      	blx	r3
    190c:	4b27      	ldr	r3, [pc, #156]	; (19ac <hif_receive+0x178>)
    190e:	0018      	movs	r0, r3
    1910:	4b20      	ldr	r3, [pc, #128]	; (1994 <hif_receive+0x160>)
    1912:	4798      	blx	r3
    1914:	200d      	movs	r0, #13
    1916:	4b20      	ldr	r3, [pc, #128]	; (1998 <hif_receive+0x164>)
    1918:	4798      	blx	r3
		goto ERR1;
    191a:	e027      	b.n	196c <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    191c:	1dbb      	adds	r3, r7, #6
    191e:	881a      	ldrh	r2, [r3, #0]
    1920:	2317      	movs	r3, #23
    1922:	18fc      	adds	r4, r7, r3
    1924:	68b9      	ldr	r1, [r7, #8]
    1926:	68fb      	ldr	r3, [r7, #12]
    1928:	0018      	movs	r0, r3
    192a:	4b21      	ldr	r3, [pc, #132]	; (19b0 <hif_receive+0x17c>)
    192c:	4798      	blx	r3
    192e:	0003      	movs	r3, r0
    1930:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    1932:	2317      	movs	r3, #23
    1934:	18fb      	adds	r3, r7, r3
    1936:	781b      	ldrb	r3, [r3, #0]
    1938:	b25b      	sxtb	r3, r3
    193a:	2b00      	cmp	r3, #0
    193c:	d115      	bne.n	196a <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    193e:	4b17      	ldr	r3, [pc, #92]	; (199c <hif_receive+0x168>)
    1940:	685a      	ldr	r2, [r3, #4]
    1942:	4b16      	ldr	r3, [pc, #88]	; (199c <hif_receive+0x168>)
    1944:	689b      	ldr	r3, [r3, #8]
    1946:	18d2      	adds	r2, r2, r3
    1948:	1dbb      	adds	r3, r7, #6
    194a:	8819      	ldrh	r1, [r3, #0]
    194c:	68fb      	ldr	r3, [r7, #12]
    194e:	18cb      	adds	r3, r1, r3
    1950:	429a      	cmp	r2, r3
    1952:	d003      	beq.n	195c <hif_receive+0x128>
    1954:	1d7b      	adds	r3, r7, #5
    1956:	781b      	ldrb	r3, [r3, #0]
    1958:	2b00      	cmp	r3, #0
    195a:	d007      	beq.n	196c <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    195c:	2317      	movs	r3, #23
    195e:	18fc      	adds	r4, r7, r3
    1960:	4b06      	ldr	r3, [pc, #24]	; (197c <hif_receive+0x148>)
    1962:	4798      	blx	r3
    1964:	0003      	movs	r3, r0
    1966:	7023      	strb	r3, [r4, #0]
    1968:	e000      	b.n	196c <hif_receive+0x138>
	if(ret != M2M_SUCCESS)goto ERR1;
    196a:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    196c:	2317      	movs	r3, #23
    196e:	18fb      	adds	r3, r7, r3
    1970:	781b      	ldrb	r3, [r3, #0]
    1972:	b25b      	sxtb	r3, r3
}
    1974:	0018      	movs	r0, r3
    1976:	46bd      	mov	sp, r7
    1978:	b007      	add	sp, #28
    197a:	bd90      	pop	{r4, r7, pc}
    197c:	00000d79 	.word	0x00000d79
    1980:	0000026b 	.word	0x0000026b
    1984:	0000db60 	.word	0x0000db60
    1988:	0000d844 	.word	0x0000d844
    198c:	0000c455 	.word	0x0000c455
    1990:	0000da64 	.word	0x0000da64
    1994:	0000c571 	.word	0x0000c571
    1998:	0000c489 	.word	0x0000c489
    199c:	20000310 	.word	0x20000310
    19a0:	00000273 	.word	0x00000273
    19a4:	0000da84 	.word	0x0000da84
    19a8:	00000279 	.word	0x00000279
    19ac:	0000dacc 	.word	0x0000dacc
    19b0:	00002d91 	.word	0x00002d91

000019b4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    19b4:	b580      	push	{r7, lr}
    19b6:	b084      	sub	sp, #16
    19b8:	af00      	add	r7, sp, #0
    19ba:	0002      	movs	r2, r0
    19bc:	6039      	str	r1, [r7, #0]
    19be:	1dfb      	adds	r3, r7, #7
    19c0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    19c2:	230f      	movs	r3, #15
    19c4:	18fb      	adds	r3, r7, r3
    19c6:	2200      	movs	r2, #0
    19c8:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    19ca:	1dfb      	adds	r3, r7, #7
    19cc:	781b      	ldrb	r3, [r3, #0]
    19ce:	2b07      	cmp	r3, #7
    19d0:	d820      	bhi.n	1a14 <hif_register_cb+0x60>
    19d2:	009a      	lsls	r2, r3, #2
    19d4:	4b1e      	ldr	r3, [pc, #120]	; (1a50 <hif_register_cb+0x9c>)
    19d6:	18d3      	adds	r3, r2, r3
    19d8:	681b      	ldr	r3, [r3, #0]
    19da:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    19dc:	4b1d      	ldr	r3, [pc, #116]	; (1a54 <hif_register_cb+0xa0>)
    19de:	683a      	ldr	r2, [r7, #0]
    19e0:	611a      	str	r2, [r3, #16]
			break;
    19e2:	e02c      	b.n	1a3e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    19e4:	4b1b      	ldr	r3, [pc, #108]	; (1a54 <hif_register_cb+0xa0>)
    19e6:	683a      	ldr	r2, [r7, #0]
    19e8:	60da      	str	r2, [r3, #12]
			break;
    19ea:	e028      	b.n	1a3e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    19ec:	4b19      	ldr	r3, [pc, #100]	; (1a54 <hif_register_cb+0xa0>)
    19ee:	683a      	ldr	r2, [r7, #0]
    19f0:	615a      	str	r2, [r3, #20]
			break;
    19f2:	e024      	b.n	1a3e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    19f4:	4b17      	ldr	r3, [pc, #92]	; (1a54 <hif_register_cb+0xa0>)
    19f6:	683a      	ldr	r2, [r7, #0]
    19f8:	61da      	str	r2, [r3, #28]
			break;
    19fa:	e020      	b.n	1a3e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    19fc:	4b15      	ldr	r3, [pc, #84]	; (1a54 <hif_register_cb+0xa0>)
    19fe:	683a      	ldr	r2, [r7, #0]
    1a00:	621a      	str	r2, [r3, #32]
			break;
    1a02:	e01c      	b.n	1a3e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    1a04:	4b13      	ldr	r3, [pc, #76]	; (1a54 <hif_register_cb+0xa0>)
    1a06:	683a      	ldr	r2, [r7, #0]
    1a08:	619a      	str	r2, [r3, #24]
			break;
    1a0a:	e018      	b.n	1a3e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    1a0c:	4b11      	ldr	r3, [pc, #68]	; (1a54 <hif_register_cb+0xa0>)
    1a0e:	683a      	ldr	r2, [r7, #0]
    1a10:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    1a12:	e014      	b.n	1a3e <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    1a14:	4a10      	ldr	r2, [pc, #64]	; (1a58 <hif_register_cb+0xa4>)
    1a16:	4911      	ldr	r1, [pc, #68]	; (1a5c <hif_register_cb+0xa8>)
    1a18:	4b11      	ldr	r3, [pc, #68]	; (1a60 <hif_register_cb+0xac>)
    1a1a:	0018      	movs	r0, r3
    1a1c:	4b11      	ldr	r3, [pc, #68]	; (1a64 <hif_register_cb+0xb0>)
    1a1e:	4798      	blx	r3
    1a20:	1dfb      	adds	r3, r7, #7
    1a22:	781a      	ldrb	r2, [r3, #0]
    1a24:	4b10      	ldr	r3, [pc, #64]	; (1a68 <hif_register_cb+0xb4>)
    1a26:	0011      	movs	r1, r2
    1a28:	0018      	movs	r0, r3
    1a2a:	4b0e      	ldr	r3, [pc, #56]	; (1a64 <hif_register_cb+0xb0>)
    1a2c:	4798      	blx	r3
    1a2e:	200d      	movs	r0, #13
    1a30:	4b0e      	ldr	r3, [pc, #56]	; (1a6c <hif_register_cb+0xb8>)
    1a32:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1a34:	230f      	movs	r3, #15
    1a36:	18fb      	adds	r3, r7, r3
    1a38:	22f4      	movs	r2, #244	; 0xf4
    1a3a:	701a      	strb	r2, [r3, #0]
			break;
    1a3c:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    1a3e:	230f      	movs	r3, #15
    1a40:	18fb      	adds	r3, r7, r3
    1a42:	781b      	ldrb	r3, [r3, #0]
    1a44:	b25b      	sxtb	r3, r3
}
    1a46:	0018      	movs	r0, r3
    1a48:	46bd      	mov	sp, r7
    1a4a:	b004      	add	sp, #16
    1a4c:	bd80      	pop	{r7, pc}
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	0000db1c 	.word	0x0000db1c
    1a54:	20000310 	.word	0x20000310
    1a58:	000002b1 	.word	0x000002b1
    1a5c:	0000db6c 	.word	0x0000db6c
    1a60:	0000d844 	.word	0x0000d844
    1a64:	0000c455 	.word	0x0000c455
    1a68:	0000db10 	.word	0x0000db10
    1a6c:	0000c489 	.word	0x0000c489

00001a70 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1a70:	b590      	push	{r4, r7, lr}
    1a72:	b0ad      	sub	sp, #180	; 0xb4
    1a74:	af02      	add	r7, sp, #8
    1a76:	603a      	str	r2, [r7, #0]
    1a78:	1dfb      	adds	r3, r7, #7
    1a7a:	1c02      	adds	r2, r0, #0
    1a7c:	701a      	strb	r2, [r3, #0]
    1a7e:	1d3b      	adds	r3, r7, #4
    1a80:	1c0a      	adds	r2, r1, #0
    1a82:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1a84:	1dfb      	adds	r3, r7, #7
    1a86:	781b      	ldrb	r3, [r3, #0]
    1a88:	2b2c      	cmp	r3, #44	; 0x2c
    1a8a:	d116      	bne.n	1aba <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1a8c:	239c      	movs	r3, #156	; 0x9c
    1a8e:	18f9      	adds	r1, r7, r3
    1a90:	6838      	ldr	r0, [r7, #0]
    1a92:	2300      	movs	r3, #0
    1a94:	2204      	movs	r2, #4
    1a96:	4cc6      	ldr	r4, [pc, #792]	; (1db0 <m2m_wifi_cb+0x340>)
    1a98:	47a0      	blx	r4
    1a9a:	1e03      	subs	r3, r0, #0
    1a9c:	d000      	beq.n	1aa0 <m2m_wifi_cb+0x30>
    1a9e:	e1aa      	b.n	1df6 <m2m_wifi_cb+0x386>
		{
			if (gpfAppWifiCb)
    1aa0:	4bc4      	ldr	r3, [pc, #784]	; (1db4 <m2m_wifi_cb+0x344>)
    1aa2:	681b      	ldr	r3, [r3, #0]
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	d100      	bne.n	1aaa <m2m_wifi_cb+0x3a>
    1aa8:	e1a5      	b.n	1df6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1aaa:	4bc2      	ldr	r3, [pc, #776]	; (1db4 <m2m_wifi_cb+0x344>)
    1aac:	681b      	ldr	r3, [r3, #0]
    1aae:	229c      	movs	r2, #156	; 0x9c
    1ab0:	18ba      	adds	r2, r7, r2
    1ab2:	0011      	movs	r1, r2
    1ab4:	202c      	movs	r0, #44	; 0x2c
    1ab6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1ab8:	e19d      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1aba:	1dfb      	adds	r3, r7, #7
    1abc:	781b      	ldrb	r3, [r3, #0]
    1abe:	2b1b      	cmp	r3, #27
    1ac0:	d116      	bne.n	1af0 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1ac2:	2394      	movs	r3, #148	; 0x94
    1ac4:	18f9      	adds	r1, r7, r3
    1ac6:	6838      	ldr	r0, [r7, #0]
    1ac8:	2300      	movs	r3, #0
    1aca:	2208      	movs	r2, #8
    1acc:	4cb8      	ldr	r4, [pc, #736]	; (1db0 <m2m_wifi_cb+0x340>)
    1ace:	47a0      	blx	r4
    1ad0:	1e03      	subs	r3, r0, #0
    1ad2:	d000      	beq.n	1ad6 <m2m_wifi_cb+0x66>
    1ad4:	e18f      	b.n	1df6 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1ad6:	4bb7      	ldr	r3, [pc, #732]	; (1db4 <m2m_wifi_cb+0x344>)
    1ad8:	681b      	ldr	r3, [r3, #0]
    1ada:	2b00      	cmp	r3, #0
    1adc:	d100      	bne.n	1ae0 <m2m_wifi_cb+0x70>
    1ade:	e18a      	b.n	1df6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1ae0:	4bb4      	ldr	r3, [pc, #720]	; (1db4 <m2m_wifi_cb+0x344>)
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	2294      	movs	r2, #148	; 0x94
    1ae6:	18ba      	adds	r2, r7, r2
    1ae8:	0011      	movs	r1, r2
    1aea:	201b      	movs	r0, #27
    1aec:	4798      	blx	r3
}
    1aee:	e182      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1af0:	1dfb      	adds	r3, r7, #7
    1af2:	781b      	ldrb	r3, [r3, #0]
    1af4:	2b06      	cmp	r3, #6
    1af6:	d116      	bne.n	1b26 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1af8:	2308      	movs	r3, #8
    1afa:	18f9      	adds	r1, r7, r3
    1afc:	6838      	ldr	r0, [r7, #0]
    1afe:	2301      	movs	r3, #1
    1b00:	2230      	movs	r2, #48	; 0x30
    1b02:	4cab      	ldr	r4, [pc, #684]	; (1db0 <m2m_wifi_cb+0x340>)
    1b04:	47a0      	blx	r4
    1b06:	1e03      	subs	r3, r0, #0
    1b08:	d000      	beq.n	1b0c <m2m_wifi_cb+0x9c>
    1b0a:	e174      	b.n	1df6 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1b0c:	4ba9      	ldr	r3, [pc, #676]	; (1db4 <m2m_wifi_cb+0x344>)
    1b0e:	681b      	ldr	r3, [r3, #0]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d100      	bne.n	1b16 <m2m_wifi_cb+0xa6>
    1b14:	e16f      	b.n	1df6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1b16:	4ba7      	ldr	r3, [pc, #668]	; (1db4 <m2m_wifi_cb+0x344>)
    1b18:	681b      	ldr	r3, [r3, #0]
    1b1a:	2208      	movs	r2, #8
    1b1c:	18ba      	adds	r2, r7, r2
    1b1e:	0011      	movs	r1, r2
    1b20:	2006      	movs	r0, #6
    1b22:	4798      	blx	r3
}
    1b24:	e167      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1b26:	1dfb      	adds	r3, r7, #7
    1b28:	781b      	ldrb	r3, [r3, #0]
    1b2a:	2b0e      	cmp	r3, #14
    1b2c:	d100      	bne.n	1b30 <m2m_wifi_cb+0xc0>
    1b2e:	e162      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1b30:	1dfb      	adds	r3, r7, #7
    1b32:	781b      	ldrb	r3, [r3, #0]
    1b34:	2b32      	cmp	r3, #50	; 0x32
    1b36:	d116      	bne.n	1b66 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1b38:	2380      	movs	r3, #128	; 0x80
    1b3a:	18f9      	adds	r1, r7, r3
    1b3c:	6838      	ldr	r0, [r7, #0]
    1b3e:	2300      	movs	r3, #0
    1b40:	2214      	movs	r2, #20
    1b42:	4c9b      	ldr	r4, [pc, #620]	; (1db0 <m2m_wifi_cb+0x340>)
    1b44:	47a0      	blx	r4
    1b46:	1e03      	subs	r3, r0, #0
    1b48:	d000      	beq.n	1b4c <m2m_wifi_cb+0xdc>
    1b4a:	e154      	b.n	1df6 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1b4c:	4b99      	ldr	r3, [pc, #612]	; (1db4 <m2m_wifi_cb+0x344>)
    1b4e:	681b      	ldr	r3, [r3, #0]
    1b50:	2b00      	cmp	r3, #0
    1b52:	d100      	bne.n	1b56 <m2m_wifi_cb+0xe6>
    1b54:	e14f      	b.n	1df6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1b56:	4b97      	ldr	r3, [pc, #604]	; (1db4 <m2m_wifi_cb+0x344>)
    1b58:	681b      	ldr	r3, [r3, #0]
    1b5a:	2280      	movs	r2, #128	; 0x80
    1b5c:	18ba      	adds	r2, r7, r2
    1b5e:	0011      	movs	r1, r2
    1b60:	2032      	movs	r0, #50	; 0x32
    1b62:	4798      	blx	r3
}
    1b64:	e147      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1b66:	1dfb      	adds	r3, r7, #7
    1b68:	781b      	ldrb	r3, [r3, #0]
    1b6a:	2b2f      	cmp	r3, #47	; 0x2f
    1b6c:	d11d      	bne.n	1baa <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1b6e:	2308      	movs	r3, #8
    1b70:	18fb      	adds	r3, r7, r3
    1b72:	2264      	movs	r2, #100	; 0x64
    1b74:	2100      	movs	r1, #0
    1b76:	0018      	movs	r0, r3
    1b78:	4b8f      	ldr	r3, [pc, #572]	; (1db8 <m2m_wifi_cb+0x348>)
    1b7a:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1b7c:	2308      	movs	r3, #8
    1b7e:	18f9      	adds	r1, r7, r3
    1b80:	6838      	ldr	r0, [r7, #0]
    1b82:	2300      	movs	r3, #0
    1b84:	2264      	movs	r2, #100	; 0x64
    1b86:	4c8a      	ldr	r4, [pc, #552]	; (1db0 <m2m_wifi_cb+0x340>)
    1b88:	47a0      	blx	r4
    1b8a:	1e03      	subs	r3, r0, #0
    1b8c:	d000      	beq.n	1b90 <m2m_wifi_cb+0x120>
    1b8e:	e132      	b.n	1df6 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1b90:	4b88      	ldr	r3, [pc, #544]	; (1db4 <m2m_wifi_cb+0x344>)
    1b92:	681b      	ldr	r3, [r3, #0]
    1b94:	2b00      	cmp	r3, #0
    1b96:	d100      	bne.n	1b9a <m2m_wifi_cb+0x12a>
    1b98:	e12d      	b.n	1df6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1b9a:	4b86      	ldr	r3, [pc, #536]	; (1db4 <m2m_wifi_cb+0x344>)
    1b9c:	681b      	ldr	r3, [r3, #0]
    1b9e:	2208      	movs	r2, #8
    1ba0:	18ba      	adds	r2, r7, r2
    1ba2:	0011      	movs	r1, r2
    1ba4:	202f      	movs	r0, #47	; 0x2f
    1ba6:	4798      	blx	r3
}
    1ba8:	e125      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1baa:	1dfb      	adds	r3, r7, #7
    1bac:	781b      	ldrb	r3, [r3, #0]
    1bae:	2b34      	cmp	r3, #52	; 0x34
    1bb0:	d12e      	bne.n	1c10 <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1bb2:	237c      	movs	r3, #124	; 0x7c
    1bb4:	18f9      	adds	r1, r7, r3
    1bb6:	6838      	ldr	r0, [r7, #0]
    1bb8:	2300      	movs	r3, #0
    1bba:	2204      	movs	r2, #4
    1bbc:	4c7c      	ldr	r4, [pc, #496]	; (1db0 <m2m_wifi_cb+0x340>)
    1bbe:	47a0      	blx	r4
    1bc0:	1e03      	subs	r3, r0, #0
    1bc2:	d000      	beq.n	1bc6 <m2m_wifi_cb+0x156>
    1bc4:	e117      	b.n	1df6 <m2m_wifi_cb+0x386>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1bc6:	4b7d      	ldr	r3, [pc, #500]	; (1dbc <m2m_wifi_cb+0x34c>)
    1bc8:	0018      	movs	r0, r3
    1bca:	4b7d      	ldr	r3, [pc, #500]	; (1dc0 <m2m_wifi_cb+0x350>)
    1bcc:	4798      	blx	r3
    1bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1bd0:	0e1b      	lsrs	r3, r3, #24
    1bd2:	b2db      	uxtb	r3, r3
    1bd4:	0019      	movs	r1, r3
    1bd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1bd8:	0c1b      	lsrs	r3, r3, #16
    1bda:	b2db      	uxtb	r3, r3
    1bdc:	001a      	movs	r2, r3
    1bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1be0:	0a1b      	lsrs	r3, r3, #8
    1be2:	b2db      	uxtb	r3, r3
    1be4:	001c      	movs	r4, r3
    1be6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1be8:	b2db      	uxtb	r3, r3
    1bea:	4876      	ldr	r0, [pc, #472]	; (1dc4 <m2m_wifi_cb+0x354>)
    1bec:	9300      	str	r3, [sp, #0]
    1bee:	0023      	movs	r3, r4
    1bf0:	4c73      	ldr	r4, [pc, #460]	; (1dc0 <m2m_wifi_cb+0x350>)
    1bf2:	47a0      	blx	r4
    1bf4:	200d      	movs	r0, #13
    1bf6:	4b74      	ldr	r3, [pc, #464]	; (1dc8 <m2m_wifi_cb+0x358>)
    1bf8:	4798      	blx	r3
			if (gpfAppWifiCb)
    1bfa:	4b6e      	ldr	r3, [pc, #440]	; (1db4 <m2m_wifi_cb+0x344>)
    1bfc:	681b      	ldr	r3, [r3, #0]
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d100      	bne.n	1c04 <m2m_wifi_cb+0x194>
    1c02:	e0f8      	b.n	1df6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1c04:	4b6b      	ldr	r3, [pc, #428]	; (1db4 <m2m_wifi_cb+0x344>)
    1c06:	681b      	ldr	r3, [r3, #0]
    1c08:	2100      	movs	r1, #0
    1c0a:	2034      	movs	r0, #52	; 0x34
    1c0c:	4798      	blx	r3
}
    1c0e:	e0f2      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1c10:	1dfb      	adds	r3, r7, #7
    1c12:	781b      	ldrb	r3, [r3, #0]
    1c14:	2b11      	cmp	r3, #17
    1c16:	d11e      	bne.n	1c56 <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    1c18:	4b6c      	ldr	r3, [pc, #432]	; (1dcc <m2m_wifi_cb+0x35c>)
    1c1a:	2200      	movs	r2, #0
    1c1c:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1c1e:	2378      	movs	r3, #120	; 0x78
    1c20:	18f9      	adds	r1, r7, r3
    1c22:	6838      	ldr	r0, [r7, #0]
    1c24:	2300      	movs	r3, #0
    1c26:	2204      	movs	r2, #4
    1c28:	4c61      	ldr	r4, [pc, #388]	; (1db0 <m2m_wifi_cb+0x340>)
    1c2a:	47a0      	blx	r4
    1c2c:	1e03      	subs	r3, r0, #0
    1c2e:	d000      	beq.n	1c32 <m2m_wifi_cb+0x1c2>
    1c30:	e0e1      	b.n	1df6 <m2m_wifi_cb+0x386>
			gu8ChNum = strState.u8NumofCh;
    1c32:	2378      	movs	r3, #120	; 0x78
    1c34:	18fb      	adds	r3, r7, r3
    1c36:	781a      	ldrb	r2, [r3, #0]
    1c38:	4b65      	ldr	r3, [pc, #404]	; (1dd0 <m2m_wifi_cb+0x360>)
    1c3a:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1c3c:	4b5d      	ldr	r3, [pc, #372]	; (1db4 <m2m_wifi_cb+0x344>)
    1c3e:	681b      	ldr	r3, [r3, #0]
    1c40:	2b00      	cmp	r3, #0
    1c42:	d100      	bne.n	1c46 <m2m_wifi_cb+0x1d6>
    1c44:	e0d7      	b.n	1df6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1c46:	4b5b      	ldr	r3, [pc, #364]	; (1db4 <m2m_wifi_cb+0x344>)
    1c48:	681b      	ldr	r3, [r3, #0]
    1c4a:	2278      	movs	r2, #120	; 0x78
    1c4c:	18ba      	adds	r2, r7, r2
    1c4e:	0011      	movs	r1, r2
    1c50:	2011      	movs	r0, #17
    1c52:	4798      	blx	r3
}
    1c54:	e0cf      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1c56:	1dfb      	adds	r3, r7, #7
    1c58:	781b      	ldrb	r3, [r3, #0]
    1c5a:	2b13      	cmp	r3, #19
    1c5c:	d116      	bne.n	1c8c <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1c5e:	2308      	movs	r3, #8
    1c60:	18f9      	adds	r1, r7, r3
    1c62:	6838      	ldr	r0, [r7, #0]
    1c64:	2300      	movs	r3, #0
    1c66:	222c      	movs	r2, #44	; 0x2c
    1c68:	4c51      	ldr	r4, [pc, #324]	; (1db0 <m2m_wifi_cb+0x340>)
    1c6a:	47a0      	blx	r4
    1c6c:	1e03      	subs	r3, r0, #0
    1c6e:	d000      	beq.n	1c72 <m2m_wifi_cb+0x202>
    1c70:	e0c1      	b.n	1df6 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1c72:	4b50      	ldr	r3, [pc, #320]	; (1db4 <m2m_wifi_cb+0x344>)
    1c74:	681b      	ldr	r3, [r3, #0]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d100      	bne.n	1c7c <m2m_wifi_cb+0x20c>
    1c7a:	e0bc      	b.n	1df6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1c7c:	4b4d      	ldr	r3, [pc, #308]	; (1db4 <m2m_wifi_cb+0x344>)
    1c7e:	681b      	ldr	r3, [r3, #0]
    1c80:	2208      	movs	r2, #8
    1c82:	18ba      	adds	r2, r7, r2
    1c84:	0011      	movs	r1, r2
    1c86:	2013      	movs	r0, #19
    1c88:	4798      	blx	r3
}
    1c8a:	e0b4      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1c8c:	1dfb      	adds	r3, r7, #7
    1c8e:	781b      	ldrb	r3, [r3, #0]
    1c90:	2b04      	cmp	r3, #4
    1c92:	d116      	bne.n	1cc2 <m2m_wifi_cb+0x252>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1c94:	23a0      	movs	r3, #160	; 0xa0
    1c96:	18f9      	adds	r1, r7, r3
    1c98:	6838      	ldr	r0, [r7, #0]
    1c9a:	2300      	movs	r3, #0
    1c9c:	2204      	movs	r2, #4
    1c9e:	4c44      	ldr	r4, [pc, #272]	; (1db0 <m2m_wifi_cb+0x340>)
    1ca0:	47a0      	blx	r4
    1ca2:	1e03      	subs	r3, r0, #0
    1ca4:	d000      	beq.n	1ca8 <m2m_wifi_cb+0x238>
    1ca6:	e0a6      	b.n	1df6 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1ca8:	4b42      	ldr	r3, [pc, #264]	; (1db4 <m2m_wifi_cb+0x344>)
    1caa:	681b      	ldr	r3, [r3, #0]
    1cac:	2b00      	cmp	r3, #0
    1cae:	d100      	bne.n	1cb2 <m2m_wifi_cb+0x242>
    1cb0:	e0a1      	b.n	1df6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1cb2:	4b40      	ldr	r3, [pc, #256]	; (1db4 <m2m_wifi_cb+0x344>)
    1cb4:	681b      	ldr	r3, [r3, #0]
    1cb6:	22a0      	movs	r2, #160	; 0xa0
    1cb8:	18ba      	adds	r2, r7, r2
    1cba:	0011      	movs	r1, r2
    1cbc:	2004      	movs	r0, #4
    1cbe:	4798      	blx	r3
}
    1cc0:	e099      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1cc2:	1dfb      	adds	r3, r7, #7
    1cc4:	781b      	ldrb	r3, [r3, #0]
    1cc6:	2b65      	cmp	r3, #101	; 0x65
    1cc8:	d116      	bne.n	1cf8 <m2m_wifi_cb+0x288>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1cca:	23a0      	movs	r3, #160	; 0xa0
    1ccc:	18f9      	adds	r1, r7, r3
    1cce:	6838      	ldr	r0, [r7, #0]
    1cd0:	2300      	movs	r3, #0
    1cd2:	2204      	movs	r2, #4
    1cd4:	4c36      	ldr	r4, [pc, #216]	; (1db0 <m2m_wifi_cb+0x340>)
    1cd6:	47a0      	blx	r4
    1cd8:	1e03      	subs	r3, r0, #0
    1cda:	d000      	beq.n	1cde <m2m_wifi_cb+0x26e>
    1cdc:	e08b      	b.n	1df6 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    1cde:	4b35      	ldr	r3, [pc, #212]	; (1db4 <m2m_wifi_cb+0x344>)
    1ce0:	681b      	ldr	r3, [r3, #0]
    1ce2:	2b00      	cmp	r3, #0
    1ce4:	d100      	bne.n	1ce8 <m2m_wifi_cb+0x278>
    1ce6:	e086      	b.n	1df6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1ce8:	4b32      	ldr	r3, [pc, #200]	; (1db4 <m2m_wifi_cb+0x344>)
    1cea:	681b      	ldr	r3, [r3, #0]
    1cec:	22a0      	movs	r2, #160	; 0xa0
    1cee:	18ba      	adds	r2, r7, r2
    1cf0:	0011      	movs	r1, r2
    1cf2:	2065      	movs	r0, #101	; 0x65
    1cf4:	4798      	blx	r3
}
    1cf6:	e07e      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1cf8:	1dfb      	adds	r3, r7, #7
    1cfa:	781b      	ldrb	r3, [r3, #0]
    1cfc:	2b09      	cmp	r3, #9
    1cfe:	d116      	bne.n	1d2e <m2m_wifi_cb+0x2be>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1d00:	2308      	movs	r3, #8
    1d02:	18f9      	adds	r1, r7, r3
    1d04:	6838      	ldr	r0, [r7, #0]
    1d06:	2301      	movs	r3, #1
    1d08:	2264      	movs	r2, #100	; 0x64
    1d0a:	4c29      	ldr	r4, [pc, #164]	; (1db0 <m2m_wifi_cb+0x340>)
    1d0c:	47a0      	blx	r4
    1d0e:	1e03      	subs	r3, r0, #0
    1d10:	d000      	beq.n	1d14 <m2m_wifi_cb+0x2a4>
    1d12:	e070      	b.n	1df6 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1d14:	4b27      	ldr	r3, [pc, #156]	; (1db4 <m2m_wifi_cb+0x344>)
    1d16:	681b      	ldr	r3, [r3, #0]
    1d18:	2b00      	cmp	r3, #0
    1d1a:	d100      	bne.n	1d1e <m2m_wifi_cb+0x2ae>
    1d1c:	e06b      	b.n	1df6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1d1e:	4b25      	ldr	r3, [pc, #148]	; (1db4 <m2m_wifi_cb+0x344>)
    1d20:	681b      	ldr	r3, [r3, #0]
    1d22:	2208      	movs	r2, #8
    1d24:	18ba      	adds	r2, r7, r2
    1d26:	0011      	movs	r1, r2
    1d28:	2009      	movs	r0, #9
    1d2a:	4798      	blx	r3
}
    1d2c:	e063      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1d2e:	1dfb      	adds	r3, r7, #7
    1d30:	781b      	ldrb	r3, [r3, #0]
    1d32:	2b2a      	cmp	r3, #42	; 0x2a
    1d34:	d114      	bne.n	1d60 <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1d36:	2374      	movs	r3, #116	; 0x74
    1d38:	18f9      	adds	r1, r7, r3
    1d3a:	6838      	ldr	r0, [r7, #0]
    1d3c:	2301      	movs	r3, #1
    1d3e:	2204      	movs	r2, #4
    1d40:	4c1b      	ldr	r4, [pc, #108]	; (1db0 <m2m_wifi_cb+0x340>)
    1d42:	47a0      	blx	r4
    1d44:	1e03      	subs	r3, r0, #0
    1d46:	d156      	bne.n	1df6 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    1d48:	4b1a      	ldr	r3, [pc, #104]	; (1db4 <m2m_wifi_cb+0x344>)
    1d4a:	681b      	ldr	r3, [r3, #0]
    1d4c:	2b00      	cmp	r3, #0
    1d4e:	d052      	beq.n	1df6 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1d50:	4b18      	ldr	r3, [pc, #96]	; (1db4 <m2m_wifi_cb+0x344>)
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	2274      	movs	r2, #116	; 0x74
    1d56:	18ba      	adds	r2, r7, r2
    1d58:	0011      	movs	r1, r2
    1d5a:	202a      	movs	r0, #42	; 0x2a
    1d5c:	4798      	blx	r3
}
    1d5e:	e04a      	b.n	1df6 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1d60:	1dfb      	adds	r3, r7, #7
    1d62:	781b      	ldrb	r3, [r3, #0]
    1d64:	2b20      	cmp	r3, #32
    1d66:	d135      	bne.n	1dd4 <m2m_wifi_cb+0x364>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1d68:	236c      	movs	r3, #108	; 0x6c
    1d6a:	18f9      	adds	r1, r7, r3
    1d6c:	6838      	ldr	r0, [r7, #0]
    1d6e:	2300      	movs	r3, #0
    1d70:	2208      	movs	r2, #8
    1d72:	4c0f      	ldr	r4, [pc, #60]	; (1db0 <m2m_wifi_cb+0x340>)
    1d74:	47a0      	blx	r4
    1d76:	1e03      	subs	r3, r0, #0
    1d78:	d13d      	bne.n	1df6 <m2m_wifi_cb+0x386>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    1d7a:	683b      	ldr	r3, [r7, #0]
    1d7c:	3308      	adds	r3, #8
    1d7e:	0018      	movs	r0, r3
    1d80:	236c      	movs	r3, #108	; 0x6c
    1d82:	18fb      	adds	r3, r7, r3
    1d84:	6819      	ldr	r1, [r3, #0]
    1d86:	236c      	movs	r3, #108	; 0x6c
    1d88:	18fb      	adds	r3, r7, r3
    1d8a:	889a      	ldrh	r2, [r3, #4]
    1d8c:	2301      	movs	r3, #1
    1d8e:	4c08      	ldr	r4, [pc, #32]	; (1db0 <m2m_wifi_cb+0x340>)
    1d90:	47a0      	blx	r4
    1d92:	1e03      	subs	r3, r0, #0
    1d94:	d12f      	bne.n	1df6 <m2m_wifi_cb+0x386>
				if(gpfAppWifiCb)
    1d96:	4b07      	ldr	r3, [pc, #28]	; (1db4 <m2m_wifi_cb+0x344>)
    1d98:	681b      	ldr	r3, [r3, #0]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d02b      	beq.n	1df6 <m2m_wifi_cb+0x386>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    1d9e:	4b05      	ldr	r3, [pc, #20]	; (1db4 <m2m_wifi_cb+0x344>)
    1da0:	681b      	ldr	r3, [r3, #0]
    1da2:	226c      	movs	r2, #108	; 0x6c
    1da4:	18ba      	adds	r2, r7, r2
    1da6:	0011      	movs	r1, r2
    1da8:	2020      	movs	r0, #32
    1daa:	4798      	blx	r3
}
    1dac:	e023      	b.n	1df6 <m2m_wifi_cb+0x386>
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	00001835 	.word	0x00001835
    1db4:	200000a8 	.word	0x200000a8
    1db8:	00000ce1 	.word	0x00000ce1
    1dbc:	0000db7c 	.word	0x0000db7c
    1dc0:	0000c455 	.word	0x0000c455
    1dc4:	0000db88 	.word	0x0000db88
    1dc8:	0000c489 	.word	0x0000c489
    1dcc:	200000a5 	.word	0x200000a5
    1dd0:	200000a4 	.word	0x200000a4
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1dd4:	2392      	movs	r3, #146	; 0x92
    1dd6:	005a      	lsls	r2, r3, #1
    1dd8:	4909      	ldr	r1, [pc, #36]	; (1e00 <m2m_wifi_cb+0x390>)
    1dda:	4b0a      	ldr	r3, [pc, #40]	; (1e04 <m2m_wifi_cb+0x394>)
    1ddc:	0018      	movs	r0, r3
    1dde:	4b0a      	ldr	r3, [pc, #40]	; (1e08 <m2m_wifi_cb+0x398>)
    1de0:	4798      	blx	r3
    1de2:	1dfb      	adds	r3, r7, #7
    1de4:	781a      	ldrb	r2, [r3, #0]
    1de6:	4b09      	ldr	r3, [pc, #36]	; (1e0c <m2m_wifi_cb+0x39c>)
    1de8:	0011      	movs	r1, r2
    1dea:	0018      	movs	r0, r3
    1dec:	4b06      	ldr	r3, [pc, #24]	; (1e08 <m2m_wifi_cb+0x398>)
    1dee:	4798      	blx	r3
    1df0:	200d      	movs	r0, #13
    1df2:	4b07      	ldr	r3, [pc, #28]	; (1e10 <m2m_wifi_cb+0x3a0>)
    1df4:	4798      	blx	r3
}
    1df6:	46c0      	nop			; (mov r8, r8)
    1df8:	46bd      	mov	sp, r7
    1dfa:	b02b      	add	sp, #172	; 0xac
    1dfc:	bd90      	pop	{r4, r7, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	0000df30 	.word	0x0000df30
    1e04:	0000dba8 	.word	0x0000dba8
    1e08:	0000c455 	.word	0x0000c455
    1e0c:	0000dbbc 	.word	0x0000dbbc
    1e10:	0000c489 	.word	0x0000c489

00001e14 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1e14:	b590      	push	{r4, r7, lr}
    1e16:	b091      	sub	sp, #68	; 0x44
    1e18:	af02      	add	r7, sp, #8
    1e1a:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    1e1c:	2337      	movs	r3, #55	; 0x37
    1e1e:	18fb      	adds	r3, r7, r3
    1e20:	2200      	movs	r2, #0
    1e22:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1e24:	230b      	movs	r3, #11
    1e26:	18fb      	adds	r3, r7, r3
    1e28:	2201      	movs	r2, #1
    1e2a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1e2c:	687b      	ldr	r3, [r7, #4]
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d104      	bne.n	1e3c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1e32:	2337      	movs	r3, #55	; 0x37
    1e34:	18fb      	adds	r3, r7, r3
    1e36:	22f4      	movs	r2, #244	; 0xf4
    1e38:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    1e3a:	e0ad      	b.n	1f98 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1e3c:	687b      	ldr	r3, [r7, #4]
    1e3e:	681a      	ldr	r2, [r3, #0]
    1e40:	4b59      	ldr	r3, [pc, #356]	; (1fa8 <m2m_wifi_init+0x194>)
    1e42:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1e44:	4b59      	ldr	r3, [pc, #356]	; (1fac <m2m_wifi_init+0x198>)
    1e46:	2200      	movs	r2, #0
    1e48:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1e4a:	2337      	movs	r3, #55	; 0x37
    1e4c:	18fc      	adds	r4, r7, r3
    1e4e:	230b      	movs	r3, #11
    1e50:	18fb      	adds	r3, r7, r3
    1e52:	0018      	movs	r0, r3
    1e54:	4b56      	ldr	r3, [pc, #344]	; (1fb0 <m2m_wifi_init+0x19c>)
    1e56:	4798      	blx	r3
    1e58:	0003      	movs	r3, r0
    1e5a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1e5c:	2337      	movs	r3, #55	; 0x37
    1e5e:	18fb      	adds	r3, r7, r3
    1e60:	781b      	ldrb	r3, [r3, #0]
    1e62:	b25b      	sxtb	r3, r3
    1e64:	2b00      	cmp	r3, #0
    1e66:	d000      	beq.n	1e6a <m2m_wifi_init+0x56>
    1e68:	e093      	b.n	1f92 <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    1e6a:	2337      	movs	r3, #55	; 0x37
    1e6c:	18fc      	adds	r4, r7, r3
    1e6e:	2000      	movs	r0, #0
    1e70:	4b50      	ldr	r3, [pc, #320]	; (1fb4 <m2m_wifi_init+0x1a0>)
    1e72:	4798      	blx	r3
    1e74:	0003      	movs	r3, r0
    1e76:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1e78:	2337      	movs	r3, #55	; 0x37
    1e7a:	18fb      	adds	r3, r7, r3
    1e7c:	781b      	ldrb	r3, [r3, #0]
    1e7e:	b25b      	sxtb	r3, r3
    1e80:	2b00      	cmp	r3, #0
    1e82:	d000      	beq.n	1e86 <m2m_wifi_init+0x72>
    1e84:	e080      	b.n	1f88 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1e86:	4b4c      	ldr	r3, [pc, #304]	; (1fb8 <m2m_wifi_init+0x1a4>)
    1e88:	0019      	movs	r1, r3
    1e8a:	2001      	movs	r0, #1
    1e8c:	4b4b      	ldr	r3, [pc, #300]	; (1fbc <m2m_wifi_init+0x1a8>)
    1e8e:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    1e90:	2337      	movs	r3, #55	; 0x37
    1e92:	18fc      	adds	r4, r7, r3
    1e94:	230c      	movs	r3, #12
    1e96:	18fb      	adds	r3, r7, r3
    1e98:	0018      	movs	r0, r3
    1e9a:	4b49      	ldr	r3, [pc, #292]	; (1fc0 <m2m_wifi_init+0x1ac>)
    1e9c:	4798      	blx	r3
    1e9e:	0003      	movs	r3, r0
    1ea0:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    1ea2:	4b48      	ldr	r3, [pc, #288]	; (1fc4 <m2m_wifi_init+0x1b0>)
    1ea4:	0018      	movs	r0, r3
    1ea6:	4b48      	ldr	r3, [pc, #288]	; (1fc8 <m2m_wifi_init+0x1b4>)
    1ea8:	4798      	blx	r3
    1eaa:	230c      	movs	r3, #12
    1eac:	18fb      	adds	r3, r7, r3
    1eae:	791b      	ldrb	r3, [r3, #4]
    1eb0:	0019      	movs	r1, r3
    1eb2:	230c      	movs	r3, #12
    1eb4:	18fb      	adds	r3, r7, r3
    1eb6:	795b      	ldrb	r3, [r3, #5]
    1eb8:	001a      	movs	r2, r3
    1eba:	230c      	movs	r3, #12
    1ebc:	18fb      	adds	r3, r7, r3
    1ebe:	799b      	ldrb	r3, [r3, #6]
    1ec0:	001c      	movs	r4, r3
    1ec2:	230c      	movs	r3, #12
    1ec4:	18fb      	adds	r3, r7, r3
    1ec6:	8c1b      	ldrh	r3, [r3, #32]
    1ec8:	4840      	ldr	r0, [pc, #256]	; (1fcc <m2m_wifi_init+0x1b8>)
    1eca:	9300      	str	r3, [sp, #0]
    1ecc:	0023      	movs	r3, r4
    1ece:	4c3e      	ldr	r4, [pc, #248]	; (1fc8 <m2m_wifi_init+0x1b4>)
    1ed0:	47a0      	blx	r4
    1ed2:	200d      	movs	r0, #13
    1ed4:	4b3e      	ldr	r3, [pc, #248]	; (1fd0 <m2m_wifi_init+0x1bc>)
    1ed6:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1ed8:	4b3a      	ldr	r3, [pc, #232]	; (1fc4 <m2m_wifi_init+0x1b0>)
    1eda:	0018      	movs	r0, r3
    1edc:	4b3a      	ldr	r3, [pc, #232]	; (1fc8 <m2m_wifi_init+0x1b4>)
    1ede:	4798      	blx	r3
    1ee0:	230c      	movs	r3, #12
    1ee2:	18fb      	adds	r3, r7, r3
    1ee4:	3316      	adds	r3, #22
    1ee6:	001a      	movs	r2, r3
    1ee8:	230c      	movs	r3, #12
    1eea:	18fb      	adds	r3, r7, r3
    1eec:	330a      	adds	r3, #10
    1eee:	0019      	movs	r1, r3
    1ef0:	4b38      	ldr	r3, [pc, #224]	; (1fd4 <m2m_wifi_init+0x1c0>)
    1ef2:	0018      	movs	r0, r3
    1ef4:	4b34      	ldr	r3, [pc, #208]	; (1fc8 <m2m_wifi_init+0x1b4>)
    1ef6:	4798      	blx	r3
    1ef8:	200d      	movs	r0, #13
    1efa:	4b35      	ldr	r3, [pc, #212]	; (1fd0 <m2m_wifi_init+0x1bc>)
    1efc:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1efe:	4b31      	ldr	r3, [pc, #196]	; (1fc4 <m2m_wifi_init+0x1b0>)
    1f00:	0018      	movs	r0, r3
    1f02:	4b31      	ldr	r3, [pc, #196]	; (1fc8 <m2m_wifi_init+0x1b4>)
    1f04:	4798      	blx	r3
    1f06:	230c      	movs	r3, #12
    1f08:	18fb      	adds	r3, r7, r3
    1f0a:	79db      	ldrb	r3, [r3, #7]
    1f0c:	0019      	movs	r1, r3
    1f0e:	230c      	movs	r3, #12
    1f10:	18fb      	adds	r3, r7, r3
    1f12:	7a1b      	ldrb	r3, [r3, #8]
    1f14:	001a      	movs	r2, r3
    1f16:	230c      	movs	r3, #12
    1f18:	18fb      	adds	r3, r7, r3
    1f1a:	7a5b      	ldrb	r3, [r3, #9]
    1f1c:	482e      	ldr	r0, [pc, #184]	; (1fd8 <m2m_wifi_init+0x1c4>)
    1f1e:	4c2a      	ldr	r4, [pc, #168]	; (1fc8 <m2m_wifi_init+0x1b4>)
    1f20:	47a0      	blx	r4
    1f22:	200d      	movs	r0, #13
    1f24:	4b2a      	ldr	r3, [pc, #168]	; (1fd0 <m2m_wifi_init+0x1bc>)
    1f26:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    1f28:	4b26      	ldr	r3, [pc, #152]	; (1fc4 <m2m_wifi_init+0x1b0>)
    1f2a:	0018      	movs	r0, r3
    1f2c:	4b26      	ldr	r3, [pc, #152]	; (1fc8 <m2m_wifi_init+0x1b4>)
    1f2e:	4798      	blx	r3
    1f30:	482a      	ldr	r0, [pc, #168]	; (1fdc <m2m_wifi_init+0x1c8>)
    1f32:	2302      	movs	r3, #2
    1f34:	2205      	movs	r2, #5
    1f36:	2113      	movs	r1, #19
    1f38:	4c23      	ldr	r4, [pc, #140]	; (1fc8 <m2m_wifi_init+0x1b4>)
    1f3a:	47a0      	blx	r4
    1f3c:	200d      	movs	r0, #13
    1f3e:	4b24      	ldr	r3, [pc, #144]	; (1fd0 <m2m_wifi_init+0x1bc>)
    1f40:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    1f42:	4b20      	ldr	r3, [pc, #128]	; (1fc4 <m2m_wifi_init+0x1b0>)
    1f44:	0018      	movs	r0, r3
    1f46:	4b20      	ldr	r3, [pc, #128]	; (1fc8 <m2m_wifi_init+0x1b4>)
    1f48:	4798      	blx	r3
    1f4a:	4a25      	ldr	r2, [pc, #148]	; (1fe0 <m2m_wifi_init+0x1cc>)
    1f4c:	4925      	ldr	r1, [pc, #148]	; (1fe4 <m2m_wifi_init+0x1d0>)
    1f4e:	4b26      	ldr	r3, [pc, #152]	; (1fe8 <m2m_wifi_init+0x1d4>)
    1f50:	0018      	movs	r0, r3
    1f52:	4b1d      	ldr	r3, [pc, #116]	; (1fc8 <m2m_wifi_init+0x1b4>)
    1f54:	4798      	blx	r3
    1f56:	200d      	movs	r0, #13
    1f58:	4b1d      	ldr	r3, [pc, #116]	; (1fd0 <m2m_wifi_init+0x1bc>)
    1f5a:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1f5c:	2337      	movs	r3, #55	; 0x37
    1f5e:	18fb      	adds	r3, r7, r3
    1f60:	781b      	ldrb	r3, [r3, #0]
    1f62:	b25b      	sxtb	r3, r3
    1f64:	330d      	adds	r3, #13
    1f66:	d116      	bne.n	1f96 <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    1f68:	23e8      	movs	r3, #232	; 0xe8
    1f6a:	33ff      	adds	r3, #255	; 0xff
    1f6c:	001a      	movs	r2, r3
    1f6e:	491f      	ldr	r1, [pc, #124]	; (1fec <m2m_wifi_init+0x1d8>)
    1f70:	4b1f      	ldr	r3, [pc, #124]	; (1ff0 <m2m_wifi_init+0x1dc>)
    1f72:	0018      	movs	r0, r3
    1f74:	4b14      	ldr	r3, [pc, #80]	; (1fc8 <m2m_wifi_init+0x1b4>)
    1f76:	4798      	blx	r3
    1f78:	4b1e      	ldr	r3, [pc, #120]	; (1ff4 <m2m_wifi_init+0x1e0>)
    1f7a:	0018      	movs	r0, r3
    1f7c:	4b1e      	ldr	r3, [pc, #120]	; (1ff8 <m2m_wifi_init+0x1e4>)
    1f7e:	4798      	blx	r3
    1f80:	200d      	movs	r0, #13
    1f82:	4b13      	ldr	r3, [pc, #76]	; (1fd0 <m2m_wifi_init+0x1bc>)
    1f84:	4798      	blx	r3
	}

	goto _EXIT0;
    1f86:	e006      	b.n	1f96 <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1f88:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    1f8a:	2000      	movs	r0, #0
    1f8c:	4b1b      	ldr	r3, [pc, #108]	; (1ffc <m2m_wifi_init+0x1e8>)
    1f8e:	4798      	blx	r3
    1f90:	e002      	b.n	1f98 <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	e000      	b.n	1f98 <m2m_wifi_init+0x184>
	goto _EXIT0;
    1f96:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    1f98:	2337      	movs	r3, #55	; 0x37
    1f9a:	18fb      	adds	r3, r7, r3
    1f9c:	781b      	ldrb	r3, [r3, #0]
    1f9e:	b25b      	sxtb	r3, r3
}
    1fa0:	0018      	movs	r0, r3
    1fa2:	46bd      	mov	sp, r7
    1fa4:	b00f      	add	sp, #60	; 0x3c
    1fa6:	bd90      	pop	{r4, r7, pc}
    1fa8:	200000a8 	.word	0x200000a8
    1fac:	200000a5 	.word	0x200000a5
    1fb0:	00003121 	.word	0x00003121
    1fb4:	00000ef9 	.word	0x00000ef9
    1fb8:	00001a71 	.word	0x00001a71
    1fbc:	000019b5 	.word	0x000019b5
    1fc0:	00002f55 	.word	0x00002f55
    1fc4:	0000db7c 	.word	0x0000db7c
    1fc8:	0000c455 	.word	0x0000c455
    1fcc:	0000dd10 	.word	0x0000dd10
    1fd0:	0000c489 	.word	0x0000c489
    1fd4:	0000dd38 	.word	0x0000dd38
    1fd8:	0000dd54 	.word	0x0000dd54
    1fdc:	0000dd78 	.word	0x0000dd78
    1fe0:	0000dd90 	.word	0x0000dd90
    1fe4:	0000dd9c 	.word	0x0000dd9c
    1fe8:	0000dda8 	.word	0x0000dda8
    1fec:	0000df3c 	.word	0x0000df3c
    1ff0:	0000dba8 	.word	0x0000dba8
    1ff4:	0000ddc0 	.word	0x0000ddc0
    1ff8:	0000c571 	.word	0x0000c571
    1ffc:	000032b5 	.word	0x000032b5

00002000 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    2000:	b580      	push	{r7, lr}
    2002:	b082      	sub	sp, #8
    2004:	af00      	add	r7, sp, #0
    2006:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    2008:	4b03      	ldr	r3, [pc, #12]	; (2018 <STACK_SIZE+0x18>)
    200a:	4798      	blx	r3
    200c:	0003      	movs	r3, r0
}
    200e:	0018      	movs	r0, r3
    2010:	46bd      	mov	sp, r7
    2012:	b002      	add	sp, #8
    2014:	bd80      	pop	{r7, pc}
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	000017a5 	.word	0x000017a5

0000201c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    201c:	b590      	push	{r4, r7, lr}
    201e:	b087      	sub	sp, #28
    2020:	af02      	add	r7, sp, #8
    2022:	60f8      	str	r0, [r7, #12]
    2024:	0008      	movs	r0, r1
    2026:	0011      	movs	r1, r2
    2028:	607b      	str	r3, [r7, #4]
    202a:	230b      	movs	r3, #11
    202c:	18fb      	adds	r3, r7, r3
    202e:	1c02      	adds	r2, r0, #0
    2030:	701a      	strb	r2, [r3, #0]
    2032:	230a      	movs	r3, #10
    2034:	18fb      	adds	r3, r7, r3
    2036:	1c0a      	adds	r2, r1, #0
    2038:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    203a:	687c      	ldr	r4, [r7, #4]
    203c:	230a      	movs	r3, #10
    203e:	18fb      	adds	r3, r7, r3
    2040:	781a      	ldrb	r2, [r3, #0]
    2042:	230b      	movs	r3, #11
    2044:	18fb      	adds	r3, r7, r3
    2046:	7819      	ldrb	r1, [r3, #0]
    2048:	68f8      	ldr	r0, [r7, #12]
    204a:	2300      	movs	r3, #0
    204c:	9301      	str	r3, [sp, #4]
    204e:	2320      	movs	r3, #32
    2050:	18fb      	adds	r3, r7, r3
    2052:	881b      	ldrh	r3, [r3, #0]
    2054:	9300      	str	r3, [sp, #0]
    2056:	0023      	movs	r3, r4
    2058:	4c03      	ldr	r4, [pc, #12]	; (2068 <m2m_wifi_connect+0x4c>)
    205a:	47a0      	blx	r4
    205c:	0003      	movs	r3, r0
}
    205e:	0018      	movs	r0, r3
    2060:	46bd      	mov	sp, r7
    2062:	b005      	add	sp, #20
    2064:	bd90      	pop	{r4, r7, pc}
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	0000206d 	.word	0x0000206d

0000206c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    206c:	b5b0      	push	{r4, r5, r7, lr}
    206e:	b0aa      	sub	sp, #168	; 0xa8
    2070:	af04      	add	r7, sp, #16
    2072:	60f8      	str	r0, [r7, #12]
    2074:	0008      	movs	r0, r1
    2076:	0011      	movs	r1, r2
    2078:	607b      	str	r3, [r7, #4]
    207a:	230b      	movs	r3, #11
    207c:	18fb      	adds	r3, r7, r3
    207e:	1c02      	adds	r2, r0, #0
    2080:	701a      	strb	r2, [r3, #0]
    2082:	230a      	movs	r3, #10
    2084:	18fb      	adds	r3, r7, r3
    2086:	1c0a      	adds	r2, r1, #0
    2088:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    208a:	2397      	movs	r3, #151	; 0x97
    208c:	18fb      	adds	r3, r7, r3
    208e:	2200      	movs	r2, #0
    2090:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    2092:	230a      	movs	r3, #10
    2094:	18fb      	adds	r3, r7, r3
    2096:	781b      	ldrb	r3, [r3, #0]
    2098:	2b01      	cmp	r3, #1
    209a:	d100      	bne.n	209e <m2m_wifi_connect_sc+0x32>
    209c:	e083      	b.n	21a6 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    209e:	687b      	ldr	r3, [r7, #4]
    20a0:	2b00      	cmp	r3, #0
    20a2:	d111      	bne.n	20c8 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    20a4:	4adb      	ldr	r2, [pc, #876]	; (2414 <m2m_wifi_connect_sc+0x3a8>)
    20a6:	49dc      	ldr	r1, [pc, #880]	; (2418 <m2m_wifi_connect_sc+0x3ac>)
    20a8:	4bdc      	ldr	r3, [pc, #880]	; (241c <m2m_wifi_connect_sc+0x3b0>)
    20aa:	0018      	movs	r0, r3
    20ac:	4bdc      	ldr	r3, [pc, #880]	; (2420 <m2m_wifi_connect_sc+0x3b4>)
    20ae:	4798      	blx	r3
    20b0:	4bdc      	ldr	r3, [pc, #880]	; (2424 <m2m_wifi_connect_sc+0x3b8>)
    20b2:	0018      	movs	r0, r3
    20b4:	4bdc      	ldr	r3, [pc, #880]	; (2428 <m2m_wifi_connect_sc+0x3bc>)
    20b6:	4798      	blx	r3
    20b8:	200d      	movs	r0, #13
    20ba:	4bdc      	ldr	r3, [pc, #880]	; (242c <m2m_wifi_connect_sc+0x3c0>)
    20bc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    20be:	2397      	movs	r3, #151	; 0x97
    20c0:	18fb      	adds	r3, r7, r3
    20c2:	22f4      	movs	r2, #244	; 0xf4
    20c4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    20c6:	e1f5      	b.n	24b4 <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    20c8:	230a      	movs	r3, #10
    20ca:	18fb      	adds	r3, r7, r3
    20cc:	781b      	ldrb	r3, [r3, #0]
    20ce:	2b02      	cmp	r3, #2
    20d0:	d169      	bne.n	21a6 <m2m_wifi_connect_sc+0x13a>
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	0018      	movs	r0, r3
    20d6:	4bd6      	ldr	r3, [pc, #856]	; (2430 <m2m_wifi_connect_sc+0x3c4>)
    20d8:	4798      	blx	r3
    20da:	0003      	movs	r3, r0
    20dc:	2b40      	cmp	r3, #64	; 0x40
    20de:	d162      	bne.n	21a6 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    20e0:	2396      	movs	r3, #150	; 0x96
    20e2:	18fb      	adds	r3, r7, r3
    20e4:	2200      	movs	r2, #0
    20e6:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    20e8:	687b      	ldr	r3, [r7, #4]
    20ea:	2290      	movs	r2, #144	; 0x90
    20ec:	18ba      	adds	r2, r7, r2
    20ee:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    20f0:	e054      	b.n	219c <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    20f2:	2396      	movs	r3, #150	; 0x96
    20f4:	18fb      	adds	r3, r7, r3
    20f6:	781b      	ldrb	r3, [r3, #0]
    20f8:	2290      	movs	r2, #144	; 0x90
    20fa:	18ba      	adds	r2, r7, r2
    20fc:	6812      	ldr	r2, [r2, #0]
    20fe:	18d3      	adds	r3, r2, r3
    2100:	781b      	ldrb	r3, [r3, #0]
    2102:	2b2f      	cmp	r3, #47	; 0x2f
    2104:	d931      	bls.n	216a <m2m_wifi_connect_sc+0xfe>
    2106:	2396      	movs	r3, #150	; 0x96
    2108:	18fb      	adds	r3, r7, r3
    210a:	781b      	ldrb	r3, [r3, #0]
    210c:	2290      	movs	r2, #144	; 0x90
    210e:	18ba      	adds	r2, r7, r2
    2110:	6812      	ldr	r2, [r2, #0]
    2112:	18d3      	adds	r3, r2, r3
    2114:	781b      	ldrb	r3, [r3, #0]
    2116:	2b39      	cmp	r3, #57	; 0x39
    2118:	d909      	bls.n	212e <m2m_wifi_connect_sc+0xc2>
    211a:	2396      	movs	r3, #150	; 0x96
    211c:	18fb      	adds	r3, r7, r3
    211e:	781b      	ldrb	r3, [r3, #0]
    2120:	2290      	movs	r2, #144	; 0x90
    2122:	18ba      	adds	r2, r7, r2
    2124:	6812      	ldr	r2, [r2, #0]
    2126:	18d3      	adds	r3, r2, r3
    2128:	781b      	ldrb	r3, [r3, #0]
    212a:	2b40      	cmp	r3, #64	; 0x40
    212c:	d91d      	bls.n	216a <m2m_wifi_connect_sc+0xfe>
    212e:	2396      	movs	r3, #150	; 0x96
    2130:	18fb      	adds	r3, r7, r3
    2132:	781b      	ldrb	r3, [r3, #0]
    2134:	2290      	movs	r2, #144	; 0x90
    2136:	18ba      	adds	r2, r7, r2
    2138:	6812      	ldr	r2, [r2, #0]
    213a:	18d3      	adds	r3, r2, r3
    213c:	781b      	ldrb	r3, [r3, #0]
    213e:	2b46      	cmp	r3, #70	; 0x46
    2140:	d909      	bls.n	2156 <m2m_wifi_connect_sc+0xea>
    2142:	2396      	movs	r3, #150	; 0x96
    2144:	18fb      	adds	r3, r7, r3
    2146:	781b      	ldrb	r3, [r3, #0]
    2148:	2290      	movs	r2, #144	; 0x90
    214a:	18ba      	adds	r2, r7, r2
    214c:	6812      	ldr	r2, [r2, #0]
    214e:	18d3      	adds	r3, r2, r3
    2150:	781b      	ldrb	r3, [r3, #0]
    2152:	2b60      	cmp	r3, #96	; 0x60
    2154:	d909      	bls.n	216a <m2m_wifi_connect_sc+0xfe>
    2156:	2396      	movs	r3, #150	; 0x96
    2158:	18fb      	adds	r3, r7, r3
    215a:	781b      	ldrb	r3, [r3, #0]
    215c:	2290      	movs	r2, #144	; 0x90
    215e:	18ba      	adds	r2, r7, r2
    2160:	6812      	ldr	r2, [r2, #0]
    2162:	18d3      	adds	r3, r2, r3
    2164:	781b      	ldrb	r3, [r3, #0]
    2166:	2b66      	cmp	r3, #102	; 0x66
    2168:	d911      	bls.n	218e <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    216a:	4ab2      	ldr	r2, [pc, #712]	; (2434 <m2m_wifi_connect_sc+0x3c8>)
    216c:	49aa      	ldr	r1, [pc, #680]	; (2418 <m2m_wifi_connect_sc+0x3ac>)
    216e:	4bab      	ldr	r3, [pc, #684]	; (241c <m2m_wifi_connect_sc+0x3b0>)
    2170:	0018      	movs	r0, r3
    2172:	4bab      	ldr	r3, [pc, #684]	; (2420 <m2m_wifi_connect_sc+0x3b4>)
    2174:	4798      	blx	r3
    2176:	4bb0      	ldr	r3, [pc, #704]	; (2438 <m2m_wifi_connect_sc+0x3cc>)
    2178:	0018      	movs	r0, r3
    217a:	4bab      	ldr	r3, [pc, #684]	; (2428 <m2m_wifi_connect_sc+0x3bc>)
    217c:	4798      	blx	r3
    217e:	200d      	movs	r0, #13
    2180:	4baa      	ldr	r3, [pc, #680]	; (242c <m2m_wifi_connect_sc+0x3c0>)
    2182:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    2184:	2397      	movs	r3, #151	; 0x97
    2186:	18fb      	adds	r3, r7, r3
    2188:	22f4      	movs	r2, #244	; 0xf4
    218a:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    218c:	e192      	b.n	24b4 <m2m_wifi_connect_sc+0x448>
				}
				i++;
    218e:	2396      	movs	r3, #150	; 0x96
    2190:	18fb      	adds	r3, r7, r3
    2192:	781a      	ldrb	r2, [r3, #0]
    2194:	2396      	movs	r3, #150	; 0x96
    2196:	18fb      	adds	r3, r7, r3
    2198:	3201      	adds	r2, #1
    219a:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    219c:	2396      	movs	r3, #150	; 0x96
    219e:	18fb      	adds	r3, r7, r3
    21a0:	781b      	ldrb	r3, [r3, #0]
    21a2:	2b3f      	cmp	r3, #63	; 0x3f
    21a4:	d9a5      	bls.n	20f2 <m2m_wifi_connect_sc+0x86>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    21a6:	230b      	movs	r3, #11
    21a8:	18fb      	adds	r3, r7, r3
    21aa:	781b      	ldrb	r3, [r3, #0]
    21ac:	2b00      	cmp	r3, #0
    21ae:	d004      	beq.n	21ba <m2m_wifi_connect_sc+0x14e>
    21b0:	230b      	movs	r3, #11
    21b2:	18fb      	adds	r3, r7, r3
    21b4:	781b      	ldrb	r3, [r3, #0]
    21b6:	2b20      	cmp	r3, #32
    21b8:	d911      	bls.n	21de <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    21ba:	4aa0      	ldr	r2, [pc, #640]	; (243c <m2m_wifi_connect_sc+0x3d0>)
    21bc:	4996      	ldr	r1, [pc, #600]	; (2418 <m2m_wifi_connect_sc+0x3ac>)
    21be:	4b97      	ldr	r3, [pc, #604]	; (241c <m2m_wifi_connect_sc+0x3b0>)
    21c0:	0018      	movs	r0, r3
    21c2:	4b97      	ldr	r3, [pc, #604]	; (2420 <m2m_wifi_connect_sc+0x3b4>)
    21c4:	4798      	blx	r3
    21c6:	4b9e      	ldr	r3, [pc, #632]	; (2440 <m2m_wifi_connect_sc+0x3d4>)
    21c8:	0018      	movs	r0, r3
    21ca:	4b97      	ldr	r3, [pc, #604]	; (2428 <m2m_wifi_connect_sc+0x3bc>)
    21cc:	4798      	blx	r3
    21ce:	200d      	movs	r0, #13
    21d0:	4b96      	ldr	r3, [pc, #600]	; (242c <m2m_wifi_connect_sc+0x3c0>)
    21d2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    21d4:	2397      	movs	r3, #151	; 0x97
    21d6:	18fb      	adds	r3, r7, r3
    21d8:	22f4      	movs	r2, #244	; 0xf4
    21da:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    21dc:	e16a      	b.n	24b4 <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    21de:	23a8      	movs	r3, #168	; 0xa8
    21e0:	18fb      	adds	r3, r7, r3
    21e2:	881b      	ldrh	r3, [r3, #0]
    21e4:	2b00      	cmp	r3, #0
    21e6:	d004      	beq.n	21f2 <m2m_wifi_connect_sc+0x186>
    21e8:	23a8      	movs	r3, #168	; 0xa8
    21ea:	18fb      	adds	r3, r7, r3
    21ec:	881b      	ldrh	r3, [r3, #0]
    21ee:	2b0e      	cmp	r3, #14
    21f0:	d917      	bls.n	2222 <m2m_wifi_connect_sc+0x1b6>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    21f2:	23a8      	movs	r3, #168	; 0xa8
    21f4:	18fb      	adds	r3, r7, r3
    21f6:	881b      	ldrh	r3, [r3, #0]
    21f8:	2bff      	cmp	r3, #255	; 0xff
    21fa:	d012      	beq.n	2222 <m2m_wifi_connect_sc+0x1b6>
		{
			M2M_ERR("CH INVALID\n");
    21fc:	238d      	movs	r3, #141	; 0x8d
    21fe:	009a      	lsls	r2, r3, #2
    2200:	4985      	ldr	r1, [pc, #532]	; (2418 <m2m_wifi_connect_sc+0x3ac>)
    2202:	4b86      	ldr	r3, [pc, #536]	; (241c <m2m_wifi_connect_sc+0x3b0>)
    2204:	0018      	movs	r0, r3
    2206:	4b86      	ldr	r3, [pc, #536]	; (2420 <m2m_wifi_connect_sc+0x3b4>)
    2208:	4798      	blx	r3
    220a:	4b8e      	ldr	r3, [pc, #568]	; (2444 <m2m_wifi_connect_sc+0x3d8>)
    220c:	0018      	movs	r0, r3
    220e:	4b86      	ldr	r3, [pc, #536]	; (2428 <m2m_wifi_connect_sc+0x3bc>)
    2210:	4798      	blx	r3
    2212:	200d      	movs	r0, #13
    2214:	4b85      	ldr	r3, [pc, #532]	; (242c <m2m_wifi_connect_sc+0x3c0>)
    2216:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2218:	2397      	movs	r3, #151	; 0x97
    221a:	18fb      	adds	r3, r7, r3
    221c:	22f4      	movs	r2, #244	; 0xf4
    221e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2220:	e148      	b.n	24b4 <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2222:	230b      	movs	r3, #11
    2224:	18fb      	adds	r3, r7, r3
    2226:	781a      	ldrb	r2, [r3, #0]
    2228:	68f9      	ldr	r1, [r7, #12]
    222a:	2314      	movs	r3, #20
    222c:	18fb      	adds	r3, r7, r3
    222e:	3346      	adds	r3, #70	; 0x46
    2230:	0018      	movs	r0, r3
    2232:	4b85      	ldr	r3, [pc, #532]	; (2448 <m2m_wifi_connect_sc+0x3dc>)
    2234:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2236:	230b      	movs	r3, #11
    2238:	18fb      	adds	r3, r7, r3
    223a:	781b      	ldrb	r3, [r3, #0]
    223c:	2214      	movs	r2, #20
    223e:	18ba      	adds	r2, r7, r2
    2240:	2146      	movs	r1, #70	; 0x46
    2242:	18d3      	adds	r3, r2, r3
    2244:	185b      	adds	r3, r3, r1
    2246:	2200      	movs	r2, #0
    2248:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    224a:	2314      	movs	r3, #20
    224c:	18fb      	adds	r3, r7, r3
    224e:	22a8      	movs	r2, #168	; 0xa8
    2250:	18ba      	adds	r2, r7, r2
    2252:	2144      	movs	r1, #68	; 0x44
    2254:	8812      	ldrh	r2, [r2, #0]
    2256:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2258:	23ac      	movs	r3, #172	; 0xac
    225a:	18fb      	adds	r3, r7, r3
    225c:	781b      	ldrb	r3, [r3, #0]
    225e:	1e5a      	subs	r2, r3, #1
    2260:	4193      	sbcs	r3, r2
    2262:	b2db      	uxtb	r3, r3
    2264:	0019      	movs	r1, r3
    2266:	2314      	movs	r3, #20
    2268:	18fb      	adds	r3, r7, r3
    226a:	2267      	movs	r2, #103	; 0x67
    226c:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    226e:	2314      	movs	r3, #20
    2270:	18fb      	adds	r3, r7, r3
    2272:	228c      	movs	r2, #140	; 0x8c
    2274:	18ba      	adds	r2, r7, r2
    2276:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    2278:	238c      	movs	r3, #140	; 0x8c
    227a:	18fb      	adds	r3, r7, r3
    227c:	681b      	ldr	r3, [r3, #0]
    227e:	220a      	movs	r2, #10
    2280:	18ba      	adds	r2, r7, r2
    2282:	2141      	movs	r1, #65	; 0x41
    2284:	7812      	ldrb	r2, [r2, #0]
    2286:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    2288:	230a      	movs	r3, #10
    228a:	18fb      	adds	r3, r7, r3
    228c:	781b      	ldrb	r3, [r3, #0]
    228e:	2b03      	cmp	r3, #3
    2290:	d000      	beq.n	2294 <m2m_wifi_connect_sc+0x228>
    2292:	e07a      	b.n	238a <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	2288      	movs	r2, #136	; 0x88
    2298:	18ba      	adds	r2, r7, r2
    229a:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    229c:	238c      	movs	r3, #140	; 0x8c
    229e:	18fb      	adds	r3, r7, r3
    22a0:	681b      	ldr	r3, [r3, #0]
    22a2:	2284      	movs	r2, #132	; 0x84
    22a4:	18ba      	adds	r2, r7, r2
    22a6:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    22a8:	2388      	movs	r3, #136	; 0x88
    22aa:	18fb      	adds	r3, r7, r3
    22ac:	681b      	ldr	r3, [r3, #0]
    22ae:	781b      	ldrb	r3, [r3, #0]
    22b0:	3b01      	subs	r3, #1
    22b2:	b2da      	uxtb	r2, r3
    22b4:	2384      	movs	r3, #132	; 0x84
    22b6:	18fb      	adds	r3, r7, r3
    22b8:	681b      	ldr	r3, [r3, #0]
    22ba:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    22bc:	2384      	movs	r3, #132	; 0x84
    22be:	18fb      	adds	r3, r7, r3
    22c0:	681b      	ldr	r3, [r3, #0]
    22c2:	781b      	ldrb	r3, [r3, #0]
    22c4:	2b03      	cmp	r3, #3
    22c6:	d917      	bls.n	22f8 <m2m_wifi_connect_sc+0x28c>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    22c8:	4a60      	ldr	r2, [pc, #384]	; (244c <m2m_wifi_connect_sc+0x3e0>)
    22ca:	4953      	ldr	r1, [pc, #332]	; (2418 <m2m_wifi_connect_sc+0x3ac>)
    22cc:	4b53      	ldr	r3, [pc, #332]	; (241c <m2m_wifi_connect_sc+0x3b0>)
    22ce:	0018      	movs	r0, r3
    22d0:	4b53      	ldr	r3, [pc, #332]	; (2420 <m2m_wifi_connect_sc+0x3b4>)
    22d2:	4798      	blx	r3
    22d4:	2384      	movs	r3, #132	; 0x84
    22d6:	18fb      	adds	r3, r7, r3
    22d8:	681b      	ldr	r3, [r3, #0]
    22da:	781b      	ldrb	r3, [r3, #0]
    22dc:	001a      	movs	r2, r3
    22de:	4b5c      	ldr	r3, [pc, #368]	; (2450 <m2m_wifi_connect_sc+0x3e4>)
    22e0:	0011      	movs	r1, r2
    22e2:	0018      	movs	r0, r3
    22e4:	4b4e      	ldr	r3, [pc, #312]	; (2420 <m2m_wifi_connect_sc+0x3b4>)
    22e6:	4798      	blx	r3
    22e8:	200d      	movs	r0, #13
    22ea:	4b50      	ldr	r3, [pc, #320]	; (242c <m2m_wifi_connect_sc+0x3c0>)
    22ec:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    22ee:	2397      	movs	r3, #151	; 0x97
    22f0:	18fb      	adds	r3, r7, r3
    22f2:	22f4      	movs	r2, #244	; 0xf4
    22f4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    22f6:	e0dd      	b.n	24b4 <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    22f8:	2388      	movs	r3, #136	; 0x88
    22fa:	18fb      	adds	r3, r7, r3
    22fc:	681b      	ldr	r3, [r3, #0]
    22fe:	785b      	ldrb	r3, [r3, #1]
    2300:	3b01      	subs	r3, #1
    2302:	b2da      	uxtb	r2, r3
    2304:	2384      	movs	r3, #132	; 0x84
    2306:	18fb      	adds	r3, r7, r3
    2308:	681b      	ldr	r3, [r3, #0]
    230a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    230c:	2384      	movs	r3, #132	; 0x84
    230e:	18fb      	adds	r3, r7, r3
    2310:	681b      	ldr	r3, [r3, #0]
    2312:	785b      	ldrb	r3, [r3, #1]
    2314:	2b0a      	cmp	r3, #10
    2316:	d01d      	beq.n	2354 <m2m_wifi_connect_sc+0x2e8>
    2318:	2384      	movs	r3, #132	; 0x84
    231a:	18fb      	adds	r3, r7, r3
    231c:	681b      	ldr	r3, [r3, #0]
    231e:	785b      	ldrb	r3, [r3, #1]
    2320:	2b1a      	cmp	r3, #26
    2322:	d017      	beq.n	2354 <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    2324:	4a4b      	ldr	r2, [pc, #300]	; (2454 <m2m_wifi_connect_sc+0x3e8>)
    2326:	493c      	ldr	r1, [pc, #240]	; (2418 <m2m_wifi_connect_sc+0x3ac>)
    2328:	4b3c      	ldr	r3, [pc, #240]	; (241c <m2m_wifi_connect_sc+0x3b0>)
    232a:	0018      	movs	r0, r3
    232c:	4b3c      	ldr	r3, [pc, #240]	; (2420 <m2m_wifi_connect_sc+0x3b4>)
    232e:	4798      	blx	r3
    2330:	2384      	movs	r3, #132	; 0x84
    2332:	18fb      	adds	r3, r7, r3
    2334:	681b      	ldr	r3, [r3, #0]
    2336:	785b      	ldrb	r3, [r3, #1]
    2338:	001a      	movs	r2, r3
    233a:	4b47      	ldr	r3, [pc, #284]	; (2458 <m2m_wifi_connect_sc+0x3ec>)
    233c:	0011      	movs	r1, r2
    233e:	0018      	movs	r0, r3
    2340:	4b37      	ldr	r3, [pc, #220]	; (2420 <m2m_wifi_connect_sc+0x3b4>)
    2342:	4798      	blx	r3
    2344:	200d      	movs	r0, #13
    2346:	4b39      	ldr	r3, [pc, #228]	; (242c <m2m_wifi_connect_sc+0x3c0>)
    2348:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    234a:	2397      	movs	r3, #151	; 0x97
    234c:	18fb      	adds	r3, r7, r3
    234e:	22f4      	movs	r2, #244	; 0xf4
    2350:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2352:	e0af      	b.n	24b4 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    2354:	2384      	movs	r3, #132	; 0x84
    2356:	18fb      	adds	r3, r7, r3
    2358:	681b      	ldr	r3, [r3, #0]
    235a:	1c98      	adds	r0, r3, #2
    235c:	2388      	movs	r3, #136	; 0x88
    235e:	18fb      	adds	r3, r7, r3
    2360:	681b      	ldr	r3, [r3, #0]
    2362:	1c99      	adds	r1, r3, #2
    2364:	2388      	movs	r3, #136	; 0x88
    2366:	18fb      	adds	r3, r7, r3
    2368:	681b      	ldr	r3, [r3, #0]
    236a:	785b      	ldrb	r3, [r3, #1]
    236c:	001a      	movs	r2, r3
    236e:	4b36      	ldr	r3, [pc, #216]	; (2448 <m2m_wifi_connect_sc+0x3dc>)
    2370:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    2372:	2388      	movs	r3, #136	; 0x88
    2374:	18fb      	adds	r3, r7, r3
    2376:	681b      	ldr	r3, [r3, #0]
    2378:	785b      	ldrb	r3, [r3, #1]
    237a:	001a      	movs	r2, r3
    237c:	2384      	movs	r3, #132	; 0x84
    237e:	18fb      	adds	r3, r7, r3
    2380:	681b      	ldr	r3, [r3, #0]
    2382:	189b      	adds	r3, r3, r2
    2384:	2200      	movs	r2, #0
    2386:	709a      	strb	r2, [r3, #2]
    2388:	e083      	b.n	2492 <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    238a:	230a      	movs	r3, #10
    238c:	18fb      	adds	r3, r7, r3
    238e:	781b      	ldrb	r3, [r3, #0]
    2390:	2b02      	cmp	r3, #2
    2392:	d130      	bne.n	23f6 <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    2394:	2382      	movs	r3, #130	; 0x82
    2396:	18fc      	adds	r4, r7, r3
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	0018      	movs	r0, r3
    239c:	4b24      	ldr	r3, [pc, #144]	; (2430 <m2m_wifi_connect_sc+0x3c4>)
    239e:	4798      	blx	r3
    23a0:	0003      	movs	r3, r0
    23a2:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    23a4:	2382      	movs	r3, #130	; 0x82
    23a6:	18fb      	adds	r3, r7, r3
    23a8:	881b      	ldrh	r3, [r3, #0]
    23aa:	2b00      	cmp	r3, #0
    23ac:	d004      	beq.n	23b8 <m2m_wifi_connect_sc+0x34c>
    23ae:	2382      	movs	r3, #130	; 0x82
    23b0:	18fb      	adds	r3, r7, r3
    23b2:	881b      	ldrh	r3, [r3, #0]
    23b4:	2b40      	cmp	r3, #64	; 0x40
    23b6:	d911      	bls.n	23dc <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    23b8:	4a28      	ldr	r2, [pc, #160]	; (245c <m2m_wifi_connect_sc+0x3f0>)
    23ba:	4917      	ldr	r1, [pc, #92]	; (2418 <m2m_wifi_connect_sc+0x3ac>)
    23bc:	4b17      	ldr	r3, [pc, #92]	; (241c <m2m_wifi_connect_sc+0x3b0>)
    23be:	0018      	movs	r0, r3
    23c0:	4b17      	ldr	r3, [pc, #92]	; (2420 <m2m_wifi_connect_sc+0x3b4>)
    23c2:	4798      	blx	r3
    23c4:	4b26      	ldr	r3, [pc, #152]	; (2460 <m2m_wifi_connect_sc+0x3f4>)
    23c6:	0018      	movs	r0, r3
    23c8:	4b17      	ldr	r3, [pc, #92]	; (2428 <m2m_wifi_connect_sc+0x3bc>)
    23ca:	4798      	blx	r3
    23cc:	200d      	movs	r0, #13
    23ce:	4b17      	ldr	r3, [pc, #92]	; (242c <m2m_wifi_connect_sc+0x3c0>)
    23d0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    23d2:	2397      	movs	r3, #151	; 0x97
    23d4:	18fb      	adds	r3, r7, r3
    23d6:	22f4      	movs	r2, #244	; 0xf4
    23d8:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    23da:	e06b      	b.n	24b4 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    23dc:	238c      	movs	r3, #140	; 0x8c
    23de:	18fb      	adds	r3, r7, r3
    23e0:	6818      	ldr	r0, [r3, #0]
    23e2:	2382      	movs	r3, #130	; 0x82
    23e4:	18fb      	adds	r3, r7, r3
    23e6:	881b      	ldrh	r3, [r3, #0]
    23e8:	3301      	adds	r3, #1
    23ea:	001a      	movs	r2, r3
    23ec:	687b      	ldr	r3, [r7, #4]
    23ee:	0019      	movs	r1, r3
    23f0:	4b15      	ldr	r3, [pc, #84]	; (2448 <m2m_wifi_connect_sc+0x3dc>)
    23f2:	4798      	blx	r3
    23f4:	e04d      	b.n	2492 <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    23f6:	230a      	movs	r3, #10
    23f8:	18fb      	adds	r3, r7, r3
    23fa:	781b      	ldrb	r3, [r3, #0]
    23fc:	2b04      	cmp	r3, #4
    23fe:	d131      	bne.n	2464 <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    2400:	238c      	movs	r3, #140	; 0x8c
    2402:	18fb      	adds	r3, r7, r3
    2404:	681b      	ldr	r3, [r3, #0]
    2406:	6879      	ldr	r1, [r7, #4]
    2408:	223e      	movs	r2, #62	; 0x3e
    240a:	0018      	movs	r0, r3
    240c:	4b0e      	ldr	r3, [pc, #56]	; (2448 <m2m_wifi_connect_sc+0x3dc>)
    240e:	4798      	blx	r3
    2410:	e03f      	b.n	2492 <m2m_wifi_connect_sc+0x426>
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	00000215 	.word	0x00000215
    2418:	0000df4c 	.word	0x0000df4c
    241c:	0000dba8 	.word	0x0000dba8
    2420:	0000c455 	.word	0x0000c455
    2424:	0000dddc 	.word	0x0000dddc
    2428:	0000c571 	.word	0x0000c571
    242c:	0000c489 	.word	0x0000c489
    2430:	00000d1f 	.word	0x00000d1f
    2434:	00000221 	.word	0x00000221
    2438:	0000ddf0 	.word	0x0000ddf0
    243c:	0000022b 	.word	0x0000022b
    2440:	0000ddfc 	.word	0x0000ddfc
    2444:	0000de10 	.word	0x0000de10
    2448:	00000ca5 	.word	0x00000ca5
    244c:	0000024b 	.word	0x0000024b
    2450:	0000de1c 	.word	0x0000de1c
    2454:	00000252 	.word	0x00000252
    2458:	0000de38 	.word	0x0000de38
    245c:	00000261 	.word	0x00000261
    2460:	0000de54 	.word	0x0000de54
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    2464:	230a      	movs	r3, #10
    2466:	18fb      	adds	r3, r7, r3
    2468:	781b      	ldrb	r3, [r3, #0]
    246a:	2b01      	cmp	r3, #1
    246c:	d011      	beq.n	2492 <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    246e:	4a15      	ldr	r2, [pc, #84]	; (24c4 <m2m_wifi_connect_sc+0x458>)
    2470:	4915      	ldr	r1, [pc, #84]	; (24c8 <m2m_wifi_connect_sc+0x45c>)
    2472:	4b16      	ldr	r3, [pc, #88]	; (24cc <m2m_wifi_connect_sc+0x460>)
    2474:	0018      	movs	r0, r3
    2476:	4b16      	ldr	r3, [pc, #88]	; (24d0 <m2m_wifi_connect_sc+0x464>)
    2478:	4798      	blx	r3
    247a:	4b16      	ldr	r3, [pc, #88]	; (24d4 <m2m_wifi_connect_sc+0x468>)
    247c:	0018      	movs	r0, r3
    247e:	4b16      	ldr	r3, [pc, #88]	; (24d8 <m2m_wifi_connect_sc+0x46c>)
    2480:	4798      	blx	r3
    2482:	200d      	movs	r0, #13
    2484:	4b15      	ldr	r3, [pc, #84]	; (24dc <m2m_wifi_connect_sc+0x470>)
    2486:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2488:	2397      	movs	r3, #151	; 0x97
    248a:	18fb      	adds	r3, r7, r3
    248c:	22f4      	movs	r2, #244	; 0xf4
    248e:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    2490:	e010      	b.n	24b4 <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    2492:	2397      	movs	r3, #151	; 0x97
    2494:	18fc      	adds	r4, r7, r3
    2496:	2314      	movs	r3, #20
    2498:	18fa      	adds	r2, r7, r3
    249a:	2300      	movs	r3, #0
    249c:	9302      	str	r3, [sp, #8]
    249e:	2300      	movs	r3, #0
    24a0:	9301      	str	r3, [sp, #4]
    24a2:	2300      	movs	r3, #0
    24a4:	9300      	str	r3, [sp, #0]
    24a6:	236c      	movs	r3, #108	; 0x6c
    24a8:	2128      	movs	r1, #40	; 0x28
    24aa:	2001      	movs	r0, #1
    24ac:	4d0c      	ldr	r5, [pc, #48]	; (24e0 <m2m_wifi_connect_sc+0x474>)
    24ae:	47a8      	blx	r5
    24b0:	0003      	movs	r3, r0
    24b2:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    24b4:	2397      	movs	r3, #151	; 0x97
    24b6:	18fb      	adds	r3, r7, r3
    24b8:	781b      	ldrb	r3, [r3, #0]
    24ba:	b25b      	sxtb	r3, r3
}
    24bc:	0018      	movs	r0, r3
    24be:	46bd      	mov	sp, r7
    24c0:	b026      	add	sp, #152	; 0x98
    24c2:	bdb0      	pop	{r4, r5, r7, pc}
    24c4:	00000271 	.word	0x00000271
    24c8:	0000df4c 	.word	0x0000df4c
    24cc:	0000dba8 	.word	0x0000dba8
    24d0:	0000c455 	.word	0x0000c455
    24d4:	0000de70 	.word	0x0000de70
    24d8:	0000c571 	.word	0x0000c571
    24dc:	0000c489 	.word	0x0000c489
    24e0:	00000f41 	.word	0x00000f41

000024e4 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    24e4:	b580      	push	{r7, lr}
    24e6:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    24e8:	2300      	movs	r3, #0
}
    24ea:	0018      	movs	r0, r3
    24ec:	46bd      	mov	sp, r7
    24ee:	bd80      	pop	{r7, pc}

000024f0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    24f0:	b590      	push	{r4, r7, lr}
    24f2:	b087      	sub	sp, #28
    24f4:	af00      	add	r7, sp, #0
    24f6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    24f8:	2317      	movs	r3, #23
    24fa:	18fb      	adds	r3, r7, r3
    24fc:	2200      	movs	r2, #0
    24fe:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    2500:	687b      	ldr	r3, [r7, #4]
    2502:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    2504:	693b      	ldr	r3, [r7, #16]
    2506:	2280      	movs	r2, #128	; 0x80
    2508:	0052      	lsls	r2, r2, #1
    250a:	4313      	orrs	r3, r2
    250c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    250e:	693a      	ldr	r2, [r7, #16]
    2510:	23a5      	movs	r3, #165	; 0xa5
    2512:	015b      	lsls	r3, r3, #5
    2514:	0011      	movs	r1, r2
    2516:	0018      	movs	r0, r3
    2518:	4b12      	ldr	r3, [pc, #72]	; (2564 <chip_apply_conf+0x74>)
    251a:	4798      	blx	r3
		if(val32 != 0) {		
    251c:	693b      	ldr	r3, [r7, #16]
    251e:	2b00      	cmp	r3, #0
    2520:	d018      	beq.n	2554 <chip_apply_conf+0x64>
			uint32 reg = 0;
    2522:	2300      	movs	r3, #0
    2524:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    2526:	2317      	movs	r3, #23
    2528:	18fc      	adds	r4, r7, r3
    252a:	230c      	movs	r3, #12
    252c:	18fa      	adds	r2, r7, r3
    252e:	23a5      	movs	r3, #165	; 0xa5
    2530:	015b      	lsls	r3, r3, #5
    2532:	0011      	movs	r1, r2
    2534:	0018      	movs	r0, r3
    2536:	4b0c      	ldr	r3, [pc, #48]	; (2568 <chip_apply_conf+0x78>)
    2538:	4798      	blx	r3
    253a:	0003      	movs	r3, r0
    253c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    253e:	2317      	movs	r3, #23
    2540:	18fb      	adds	r3, r7, r3
    2542:	781b      	ldrb	r3, [r3, #0]
    2544:	b25b      	sxtb	r3, r3
    2546:	2b00      	cmp	r3, #0
    2548:	d1e1      	bne.n	250e <chip_apply_conf+0x1e>
				if(reg == val32)
    254a:	68fa      	ldr	r2, [r7, #12]
    254c:	693b      	ldr	r3, [r7, #16]
    254e:	429a      	cmp	r2, r3
    2550:	d002      	beq.n	2558 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    2552:	e7dc      	b.n	250e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    2554:	46c0      	nop			; (mov r8, r8)
    2556:	e000      	b.n	255a <chip_apply_conf+0x6a>
					break;
    2558:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    255a:	2300      	movs	r3, #0
}
    255c:	0018      	movs	r0, r3
    255e:	46bd      	mov	sp, r7
    2560:	b007      	add	sp, #28
    2562:	bd90      	pop	{r4, r7, pc}
    2564:	00002d41 	.word	0x00002d41
    2568:	00002d1d 	.word	0x00002d1d

0000256c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    256c:	b590      	push	{r4, r7, lr}
    256e:	b083      	sub	sp, #12
    2570:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    2572:	2300      	movs	r3, #0
    2574:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    2576:	1dfb      	adds	r3, r7, #7
    2578:	2200      	movs	r2, #0
    257a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    257c:	1dfc      	adds	r4, r7, #7
    257e:	003b      	movs	r3, r7
    2580:	4a24      	ldr	r2, [pc, #144]	; (2614 <enable_interrupts+0xa8>)
    2582:	0019      	movs	r1, r3
    2584:	0010      	movs	r0, r2
    2586:	4b24      	ldr	r3, [pc, #144]	; (2618 <enable_interrupts+0xac>)
    2588:	4798      	blx	r3
    258a:	0003      	movs	r3, r0
    258c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    258e:	1dfb      	adds	r3, r7, #7
    2590:	781b      	ldrb	r3, [r3, #0]
    2592:	b25b      	sxtb	r3, r3
    2594:	2b00      	cmp	r3, #0
    2596:	d131      	bne.n	25fc <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    2598:	683b      	ldr	r3, [r7, #0]
    259a:	2280      	movs	r2, #128	; 0x80
    259c:	0052      	lsls	r2, r2, #1
    259e:	4313      	orrs	r3, r2
    25a0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    25a2:	683b      	ldr	r3, [r7, #0]
    25a4:	1dfc      	adds	r4, r7, #7
    25a6:	4a1b      	ldr	r2, [pc, #108]	; (2614 <enable_interrupts+0xa8>)
    25a8:	0019      	movs	r1, r3
    25aa:	0010      	movs	r0, r2
    25ac:	4b1b      	ldr	r3, [pc, #108]	; (261c <enable_interrupts+0xb0>)
    25ae:	4798      	blx	r3
    25b0:	0003      	movs	r3, r0
    25b2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    25b4:	1dfb      	adds	r3, r7, #7
    25b6:	781b      	ldrb	r3, [r3, #0]
    25b8:	b25b      	sxtb	r3, r3
    25ba:	2b00      	cmp	r3, #0
    25bc:	d120      	bne.n	2600 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    25be:	1dfc      	adds	r4, r7, #7
    25c0:	003a      	movs	r2, r7
    25c2:	23d0      	movs	r3, #208	; 0xd0
    25c4:	015b      	lsls	r3, r3, #5
    25c6:	0011      	movs	r1, r2
    25c8:	0018      	movs	r0, r3
    25ca:	4b13      	ldr	r3, [pc, #76]	; (2618 <enable_interrupts+0xac>)
    25cc:	4798      	blx	r3
    25ce:	0003      	movs	r3, r0
    25d0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    25d2:	1dfb      	adds	r3, r7, #7
    25d4:	781b      	ldrb	r3, [r3, #0]
    25d6:	b25b      	sxtb	r3, r3
    25d8:	2b00      	cmp	r3, #0
    25da:	d113      	bne.n	2604 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    25dc:	683b      	ldr	r3, [r7, #0]
    25de:	2280      	movs	r2, #128	; 0x80
    25e0:	0252      	lsls	r2, r2, #9
    25e2:	4313      	orrs	r3, r2
    25e4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    25e6:	683a      	ldr	r2, [r7, #0]
    25e8:	1dfc      	adds	r4, r7, #7
    25ea:	23d0      	movs	r3, #208	; 0xd0
    25ec:	015b      	lsls	r3, r3, #5
    25ee:	0011      	movs	r1, r2
    25f0:	0018      	movs	r0, r3
    25f2:	4b0a      	ldr	r3, [pc, #40]	; (261c <enable_interrupts+0xb0>)
    25f4:	4798      	blx	r3
    25f6:	0003      	movs	r3, r0
    25f8:	7023      	strb	r3, [r4, #0]
    25fa:	e004      	b.n	2606 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    25fc:	46c0      	nop			; (mov r8, r8)
    25fe:	e002      	b.n	2606 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2600:	46c0      	nop			; (mov r8, r8)
    2602:	e000      	b.n	2606 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    2604:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    2606:	1dfb      	adds	r3, r7, #7
    2608:	781b      	ldrb	r3, [r3, #0]
    260a:	b25b      	sxtb	r3, r3
}
    260c:	0018      	movs	r0, r3
    260e:	46bd      	mov	sp, r7
    2610:	b003      	add	sp, #12
    2612:	bd90      	pop	{r4, r7, pc}
    2614:	00001408 	.word	0x00001408
    2618:	00002d1d 	.word	0x00002d1d
    261c:	00002d41 	.word	0x00002d41

00002620 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2620:	b580      	push	{r7, lr}
    2622:	b082      	sub	sp, #8
    2624:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    2626:	4b32      	ldr	r3, [pc, #200]	; (26f0 <nmi_get_chipid+0xd0>)
    2628:	681b      	ldr	r3, [r3, #0]
    262a:	2b00      	cmp	r3, #0
    262c:	d159      	bne.n	26e2 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    262e:	4a30      	ldr	r2, [pc, #192]	; (26f0 <nmi_get_chipid+0xd0>)
    2630:	2380      	movs	r3, #128	; 0x80
    2632:	015b      	lsls	r3, r3, #5
    2634:	0011      	movs	r1, r2
    2636:	0018      	movs	r0, r3
    2638:	4b2e      	ldr	r3, [pc, #184]	; (26f4 <nmi_get_chipid+0xd4>)
    263a:	4798      	blx	r3
    263c:	1e03      	subs	r3, r0, #0
    263e:	d004      	beq.n	264a <nmi_get_chipid+0x2a>
			chipid = 0;
    2640:	4b2b      	ldr	r3, [pc, #172]	; (26f0 <nmi_get_chipid+0xd0>)
    2642:	2200      	movs	r2, #0
    2644:	601a      	str	r2, [r3, #0]
			return 0;
    2646:	2300      	movs	r3, #0
    2648:	e04d      	b.n	26e6 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    264a:	1d3b      	adds	r3, r7, #4
    264c:	4a2a      	ldr	r2, [pc, #168]	; (26f8 <nmi_get_chipid+0xd8>)
    264e:	0019      	movs	r1, r3
    2650:	0010      	movs	r0, r2
    2652:	4b28      	ldr	r3, [pc, #160]	; (26f4 <nmi_get_chipid+0xd4>)
    2654:	4798      	blx	r3
    2656:	1e03      	subs	r3, r0, #0
    2658:	d004      	beq.n	2664 <nmi_get_chipid+0x44>
			chipid = 0;
    265a:	4b25      	ldr	r3, [pc, #148]	; (26f0 <nmi_get_chipid+0xd0>)
    265c:	2200      	movs	r2, #0
    265e:	601a      	str	r2, [r3, #0]
			return 0;
    2660:	2300      	movs	r3, #0
    2662:	e040      	b.n	26e6 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    2664:	4b22      	ldr	r3, [pc, #136]	; (26f0 <nmi_get_chipid+0xd0>)
    2666:	681b      	ldr	r3, [r3, #0]
    2668:	4a24      	ldr	r2, [pc, #144]	; (26fc <nmi_get_chipid+0xdc>)
    266a:	4293      	cmp	r3, r2
    266c:	d106      	bne.n	267c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    266e:	687b      	ldr	r3, [r7, #4]
    2670:	2b01      	cmp	r3, #1
    2672:	d029      	beq.n	26c8 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    2674:	4b1e      	ldr	r3, [pc, #120]	; (26f0 <nmi_get_chipid+0xd0>)
    2676:	4a22      	ldr	r2, [pc, #136]	; (2700 <nmi_get_chipid+0xe0>)
    2678:	601a      	str	r2, [r3, #0]
    267a:	e025      	b.n	26c8 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    267c:	4b1c      	ldr	r3, [pc, #112]	; (26f0 <nmi_get_chipid+0xd0>)
    267e:	681b      	ldr	r3, [r3, #0]
    2680:	4a20      	ldr	r2, [pc, #128]	; (2704 <nmi_get_chipid+0xe4>)
    2682:	4293      	cmp	r3, r2
    2684:	d10d      	bne.n	26a2 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    2686:	687b      	ldr	r3, [r7, #4]
    2688:	2b03      	cmp	r3, #3
    268a:	d01d      	beq.n	26c8 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    268c:	687b      	ldr	r3, [r7, #4]
    268e:	2b04      	cmp	r3, #4
    2690:	d103      	bne.n	269a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    2692:	4b17      	ldr	r3, [pc, #92]	; (26f0 <nmi_get_chipid+0xd0>)
    2694:	4a1c      	ldr	r2, [pc, #112]	; (2708 <nmi_get_chipid+0xe8>)
    2696:	601a      	str	r2, [r3, #0]
    2698:	e016      	b.n	26c8 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    269a:	4b15      	ldr	r3, [pc, #84]	; (26f0 <nmi_get_chipid+0xd0>)
    269c:	4a1b      	ldr	r2, [pc, #108]	; (270c <nmi_get_chipid+0xec>)
    269e:	601a      	str	r2, [r3, #0]
    26a0:	e012      	b.n	26c8 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    26a2:	4b13      	ldr	r3, [pc, #76]	; (26f0 <nmi_get_chipid+0xd0>)
    26a4:	681b      	ldr	r3, [r3, #0]
    26a6:	4a1a      	ldr	r2, [pc, #104]	; (2710 <nmi_get_chipid+0xf0>)
    26a8:	4293      	cmp	r3, r2
    26aa:	d10d      	bne.n	26c8 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    26ac:	4a10      	ldr	r2, [pc, #64]	; (26f0 <nmi_get_chipid+0xd0>)
    26ae:	23ec      	movs	r3, #236	; 0xec
    26b0:	039b      	lsls	r3, r3, #14
    26b2:	0011      	movs	r1, r2
    26b4:	0018      	movs	r0, r3
    26b6:	4b0f      	ldr	r3, [pc, #60]	; (26f4 <nmi_get_chipid+0xd4>)
    26b8:	4798      	blx	r3
    26ba:	1e03      	subs	r3, r0, #0
    26bc:	d004      	beq.n	26c8 <nmi_get_chipid+0xa8>
			chipid = 0;
    26be:	4b0c      	ldr	r3, [pc, #48]	; (26f0 <nmi_get_chipid+0xd0>)
    26c0:	2200      	movs	r2, #0
    26c2:	601a      	str	r2, [r3, #0]
			return 0;
    26c4:	2300      	movs	r3, #0
    26c6:	e00e      	b.n	26e6 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    26c8:	4b09      	ldr	r3, [pc, #36]	; (26f0 <nmi_get_chipid+0xd0>)
    26ca:	681b      	ldr	r3, [r3, #0]
    26cc:	4a11      	ldr	r2, [pc, #68]	; (2714 <nmi_get_chipid+0xf4>)
    26ce:	401a      	ands	r2, r3
    26d0:	4b07      	ldr	r3, [pc, #28]	; (26f0 <nmi_get_chipid+0xd0>)
    26d2:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    26d4:	4b06      	ldr	r3, [pc, #24]	; (26f0 <nmi_get_chipid+0xd0>)
    26d6:	681b      	ldr	r3, [r3, #0]
    26d8:	22a0      	movs	r2, #160	; 0xa0
    26da:	02d2      	lsls	r2, r2, #11
    26dc:	431a      	orrs	r2, r3
    26de:	4b04      	ldr	r3, [pc, #16]	; (26f0 <nmi_get_chipid+0xd0>)
    26e0:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    26e2:	4b03      	ldr	r3, [pc, #12]	; (26f0 <nmi_get_chipid+0xd0>)
    26e4:	681b      	ldr	r3, [r3, #0]
}
    26e6:	0018      	movs	r0, r3
    26e8:	46bd      	mov	sp, r7
    26ea:	b002      	add	sp, #8
    26ec:	bd80      	pop	{r7, pc}
    26ee:	46c0      	nop			; (mov r8, r8)
    26f0:	200000ac 	.word	0x200000ac
    26f4:	00002d1d 	.word	0x00002d1d
    26f8:	000013f4 	.word	0x000013f4
    26fc:	001002a0 	.word	0x001002a0
    2700:	001002a1 	.word	0x001002a1
    2704:	001002b0 	.word	0x001002b0
    2708:	001002b1 	.word	0x001002b1
    270c:	001002b2 	.word	0x001002b2
    2710:	001000f0 	.word	0x001000f0
    2714:	fff0ffff 	.word	0xfff0ffff

00002718 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2718:	b590      	push	{r4, r7, lr}
    271a:	b083      	sub	sp, #12
    271c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    271e:	1dfb      	adds	r3, r7, #7
    2720:	2200      	movs	r2, #0
    2722:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2724:	1dfc      	adds	r4, r7, #7
    2726:	003b      	movs	r3, r7
    2728:	0019      	movs	r1, r3
    272a:	2010      	movs	r0, #16
    272c:	4b2e      	ldr	r3, [pc, #184]	; (27e8 <chip_sleep+0xd0>)
    272e:	4798      	blx	r3
    2730:	0003      	movs	r3, r0
    2732:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    2734:	1dfb      	adds	r3, r7, #7
    2736:	781b      	ldrb	r3, [r3, #0]
    2738:	b25b      	sxtb	r3, r3
    273a:	2b00      	cmp	r3, #0
    273c:	d145      	bne.n	27ca <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    273e:	683b      	ldr	r3, [r7, #0]
    2740:	2201      	movs	r2, #1
    2742:	4013      	ands	r3, r2
    2744:	d000      	beq.n	2748 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2746:	e7ed      	b.n	2724 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    2748:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    274a:	1dfc      	adds	r4, r7, #7
    274c:	003b      	movs	r3, r7
    274e:	0019      	movs	r1, r3
    2750:	2001      	movs	r0, #1
    2752:	4b25      	ldr	r3, [pc, #148]	; (27e8 <chip_sleep+0xd0>)
    2754:	4798      	blx	r3
    2756:	0003      	movs	r3, r0
    2758:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    275a:	1dfb      	adds	r3, r7, #7
    275c:	781b      	ldrb	r3, [r3, #0]
    275e:	b25b      	sxtb	r3, r3
    2760:	2b00      	cmp	r3, #0
    2762:	d134      	bne.n	27ce <chip_sleep+0xb6>
	if(reg & NBIT1)
    2764:	683b      	ldr	r3, [r7, #0]
    2766:	2202      	movs	r2, #2
    2768:	4013      	ands	r3, r2
    276a:	d010      	beq.n	278e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    276c:	683b      	ldr	r3, [r7, #0]
    276e:	2202      	movs	r2, #2
    2770:	4393      	bics	r3, r2
    2772:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2774:	683b      	ldr	r3, [r7, #0]
    2776:	1dfc      	adds	r4, r7, #7
    2778:	0019      	movs	r1, r3
    277a:	2001      	movs	r0, #1
    277c:	4b1b      	ldr	r3, [pc, #108]	; (27ec <chip_sleep+0xd4>)
    277e:	4798      	blx	r3
    2780:	0003      	movs	r3, r0
    2782:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    2784:	1dfb      	adds	r3, r7, #7
    2786:	781b      	ldrb	r3, [r3, #0]
    2788:	b25b      	sxtb	r3, r3
    278a:	2b00      	cmp	r3, #0
    278c:	d121      	bne.n	27d2 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    278e:	1dfc      	adds	r4, r7, #7
    2790:	003b      	movs	r3, r7
    2792:	0019      	movs	r1, r3
    2794:	200b      	movs	r0, #11
    2796:	4b14      	ldr	r3, [pc, #80]	; (27e8 <chip_sleep+0xd0>)
    2798:	4798      	blx	r3
    279a:	0003      	movs	r3, r0
    279c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    279e:	1dfb      	adds	r3, r7, #7
    27a0:	781b      	ldrb	r3, [r3, #0]
    27a2:	b25b      	sxtb	r3, r3
    27a4:	2b00      	cmp	r3, #0
    27a6:	d116      	bne.n	27d6 <chip_sleep+0xbe>
	if(reg & NBIT0)
    27a8:	683b      	ldr	r3, [r7, #0]
    27aa:	2201      	movs	r2, #1
    27ac:	4013      	ands	r3, r2
    27ae:	d013      	beq.n	27d8 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    27b0:	683b      	ldr	r3, [r7, #0]
    27b2:	2201      	movs	r2, #1
    27b4:	4393      	bics	r3, r2
    27b6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    27b8:	683b      	ldr	r3, [r7, #0]
    27ba:	1dfc      	adds	r4, r7, #7
    27bc:	0019      	movs	r1, r3
    27be:	200b      	movs	r0, #11
    27c0:	4b0a      	ldr	r3, [pc, #40]	; (27ec <chip_sleep+0xd4>)
    27c2:	4798      	blx	r3
    27c4:	0003      	movs	r3, r0
    27c6:	7023      	strb	r3, [r4, #0]
    27c8:	e006      	b.n	27d8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    27ca:	46c0      	nop			; (mov r8, r8)
    27cc:	e004      	b.n	27d8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    27ce:	46c0      	nop			; (mov r8, r8)
    27d0:	e002      	b.n	27d8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	e000      	b.n	27d8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    27d6:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    27d8:	1dfb      	adds	r3, r7, #7
    27da:	781b      	ldrb	r3, [r3, #0]
    27dc:	b25b      	sxtb	r3, r3
}
    27de:	0018      	movs	r0, r3
    27e0:	46bd      	mov	sp, r7
    27e2:	b003      	add	sp, #12
    27e4:	bd90      	pop	{r4, r7, pc}
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	00002d1d 	.word	0x00002d1d
    27ec:	00002d41 	.word	0x00002d41

000027f0 <chip_wake>:
sint8 chip_wake(void)
{
    27f0:	b590      	push	{r4, r7, lr}
    27f2:	b085      	sub	sp, #20
    27f4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    27f6:	230f      	movs	r3, #15
    27f8:	18fb      	adds	r3, r7, r3
    27fa:	2200      	movs	r2, #0
    27fc:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    27fe:	2300      	movs	r3, #0
    2800:	607b      	str	r3, [r7, #4]
    2802:	2300      	movs	r3, #0
    2804:	603b      	str	r3, [r7, #0]
    2806:	2300      	movs	r3, #0
    2808:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    280a:	230f      	movs	r3, #15
    280c:	18fc      	adds	r4, r7, r3
    280e:	1d3b      	adds	r3, r7, #4
    2810:	0019      	movs	r1, r3
    2812:	200b      	movs	r0, #11
    2814:	4b4c      	ldr	r3, [pc, #304]	; (2948 <chip_wake+0x158>)
    2816:	4798      	blx	r3
    2818:	0003      	movs	r3, r0
    281a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    281c:	230f      	movs	r3, #15
    281e:	18fb      	adds	r3, r7, r3
    2820:	781b      	ldrb	r3, [r3, #0]
    2822:	b25b      	sxtb	r3, r3
    2824:	2b00      	cmp	r3, #0
    2826:	d000      	beq.n	282a <chip_wake+0x3a>
    2828:	e07f      	b.n	292a <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	2201      	movs	r2, #1
    282e:	4013      	ands	r3, r2
    2830:	d110      	bne.n	2854 <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    2832:	687b      	ldr	r3, [r7, #4]
    2834:	2201      	movs	r2, #1
    2836:	4313      	orrs	r3, r2
    2838:	220f      	movs	r2, #15
    283a:	18bc      	adds	r4, r7, r2
    283c:	0019      	movs	r1, r3
    283e:	200b      	movs	r0, #11
    2840:	4b42      	ldr	r3, [pc, #264]	; (294c <chip_wake+0x15c>)
    2842:	4798      	blx	r3
    2844:	0003      	movs	r3, r0
    2846:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2848:	230f      	movs	r3, #15
    284a:	18fb      	adds	r3, r7, r3
    284c:	781b      	ldrb	r3, [r3, #0]
    284e:	b25b      	sxtb	r3, r3
    2850:	2b00      	cmp	r3, #0
    2852:	d16c      	bne.n	292e <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2854:	230f      	movs	r3, #15
    2856:	18fc      	adds	r4, r7, r3
    2858:	1d3b      	adds	r3, r7, #4
    285a:	0019      	movs	r1, r3
    285c:	2001      	movs	r0, #1
    285e:	4b3a      	ldr	r3, [pc, #232]	; (2948 <chip_wake+0x158>)
    2860:	4798      	blx	r3
    2862:	0003      	movs	r3, r0
    2864:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2866:	230f      	movs	r3, #15
    2868:	18fb      	adds	r3, r7, r3
    286a:	781b      	ldrb	r3, [r3, #0]
    286c:	b25b      	sxtb	r3, r3
    286e:	2b00      	cmp	r3, #0
    2870:	d15f      	bne.n	2932 <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    2872:	687b      	ldr	r3, [r7, #4]
    2874:	2202      	movs	r2, #2
    2876:	4013      	ands	r3, r2
    2878:	d110      	bne.n	289c <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	2202      	movs	r2, #2
    287e:	4313      	orrs	r3, r2
    2880:	220f      	movs	r2, #15
    2882:	18bc      	adds	r4, r7, r2
    2884:	0019      	movs	r1, r3
    2886:	2001      	movs	r0, #1
    2888:	4b30      	ldr	r3, [pc, #192]	; (294c <chip_wake+0x15c>)
    288a:	4798      	blx	r3
    288c:	0003      	movs	r3, r0
    288e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2890:	230f      	movs	r3, #15
    2892:	18fb      	adds	r3, r7, r3
    2894:	781b      	ldrb	r3, [r3, #0]
    2896:	b25b      	sxtb	r3, r3
    2898:	2b00      	cmp	r3, #0
    289a:	d14c      	bne.n	2936 <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    289c:	230f      	movs	r3, #15
    289e:	18fc      	adds	r4, r7, r3
    28a0:	003b      	movs	r3, r7
    28a2:	0019      	movs	r1, r3
    28a4:	200f      	movs	r0, #15
    28a6:	4b28      	ldr	r3, [pc, #160]	; (2948 <chip_wake+0x158>)
    28a8:	4798      	blx	r3
    28aa:	0003      	movs	r3, r0
    28ac:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    28ae:	230f      	movs	r3, #15
    28b0:	18fb      	adds	r3, r7, r3
    28b2:	781b      	ldrb	r3, [r3, #0]
    28b4:	b25b      	sxtb	r3, r3
    28b6:	2b00      	cmp	r3, #0
    28b8:	d013      	beq.n	28e2 <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    28ba:	23aa      	movs	r3, #170	; 0xaa
    28bc:	005a      	lsls	r2, r3, #1
    28be:	4924      	ldr	r1, [pc, #144]	; (2950 <chip_wake+0x160>)
    28c0:	4b24      	ldr	r3, [pc, #144]	; (2954 <chip_wake+0x164>)
    28c2:	0018      	movs	r0, r3
    28c4:	4b24      	ldr	r3, [pc, #144]	; (2958 <chip_wake+0x168>)
    28c6:	4798      	blx	r3
    28c8:	230f      	movs	r3, #15
    28ca:	18fb      	adds	r3, r7, r3
    28cc:	2100      	movs	r1, #0
    28ce:	5659      	ldrsb	r1, [r3, r1]
    28d0:	683a      	ldr	r2, [r7, #0]
    28d2:	4b22      	ldr	r3, [pc, #136]	; (295c <chip_wake+0x16c>)
    28d4:	0018      	movs	r0, r3
    28d6:	4b20      	ldr	r3, [pc, #128]	; (2958 <chip_wake+0x168>)
    28d8:	4798      	blx	r3
    28da:	200d      	movs	r0, #13
    28dc:	4b20      	ldr	r3, [pc, #128]	; (2960 <chip_wake+0x170>)
    28de:	4798      	blx	r3
			goto _WAKE_EXIT;
    28e0:	e02a      	b.n	2938 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    28e2:	683b      	ldr	r3, [r7, #0]
    28e4:	2204      	movs	r2, #4
    28e6:	4013      	ands	r3, r2
    28e8:	d11b      	bne.n	2922 <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    28ea:	2002      	movs	r0, #2
    28ec:	4b1d      	ldr	r3, [pc, #116]	; (2964 <chip_wake+0x174>)
    28ee:	4798      	blx	r3
		trials++;
    28f0:	68bb      	ldr	r3, [r7, #8]
    28f2:	3301      	adds	r3, #1
    28f4:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    28f6:	68bb      	ldr	r3, [r7, #8]
    28f8:	2b04      	cmp	r3, #4
    28fa:	d9cf      	bls.n	289c <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    28fc:	23af      	movs	r3, #175	; 0xaf
    28fe:	005a      	lsls	r2, r3, #1
    2900:	4913      	ldr	r1, [pc, #76]	; (2950 <chip_wake+0x160>)
    2902:	4b14      	ldr	r3, [pc, #80]	; (2954 <chip_wake+0x164>)
    2904:	0018      	movs	r0, r3
    2906:	4b14      	ldr	r3, [pc, #80]	; (2958 <chip_wake+0x168>)
    2908:	4798      	blx	r3
    290a:	4b17      	ldr	r3, [pc, #92]	; (2968 <chip_wake+0x178>)
    290c:	0018      	movs	r0, r3
    290e:	4b17      	ldr	r3, [pc, #92]	; (296c <chip_wake+0x17c>)
    2910:	4798      	blx	r3
    2912:	200d      	movs	r0, #13
    2914:	4b12      	ldr	r3, [pc, #72]	; (2960 <chip_wake+0x170>)
    2916:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2918:	230f      	movs	r3, #15
    291a:	18fb      	adds	r3, r7, r3
    291c:	22fc      	movs	r2, #252	; 0xfc
    291e:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    2920:	e00a      	b.n	2938 <chip_wake+0x148>
			break;
    2922:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    2924:	4b12      	ldr	r3, [pc, #72]	; (2970 <chip_wake+0x180>)
    2926:	4798      	blx	r3
    2928:	e006      	b.n	2938 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	e004      	b.n	2938 <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    292e:	46c0      	nop			; (mov r8, r8)
    2930:	e002      	b.n	2938 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	e000      	b.n	2938 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2936:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    2938:	230f      	movs	r3, #15
    293a:	18fb      	adds	r3, r7, r3
    293c:	781b      	ldrb	r3, [r3, #0]
    293e:	b25b      	sxtb	r3, r3
}
    2940:	0018      	movs	r0, r3
    2942:	46bd      	mov	sp, r7
    2944:	b005      	add	sp, #20
    2946:	bd90      	pop	{r4, r7, pc}
    2948:	00002d1d 	.word	0x00002d1d
    294c:	00002d41 	.word	0x00002d41
    2950:	0000dfe4 	.word	0x0000dfe4
    2954:	0000df60 	.word	0x0000df60
    2958:	0000c455 	.word	0x0000c455
    295c:	0000df74 	.word	0x0000df74
    2960:	0000c489 	.word	0x0000c489
    2964:	000003f1 	.word	0x000003f1
    2968:	0000df8c 	.word	0x0000df8c
    296c:	0000c571 	.word	0x0000c571
    2970:	00002cdd 	.word	0x00002cdd

00002974 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2974:	b580      	push	{r7, lr}
    2976:	b088      	sub	sp, #32
    2978:	af00      	add	r7, sp, #0
    297a:	0002      	movs	r2, r0
    297c:	1dfb      	adds	r3, r7, #7
    297e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2980:	2313      	movs	r3, #19
    2982:	18fb      	adds	r3, r7, r3
    2984:	2200      	movs	r2, #0
    2986:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2988:	2300      	movs	r3, #0
    298a:	61fb      	str	r3, [r7, #28]
    298c:	2300      	movs	r3, #0
    298e:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    2990:	2300      	movs	r3, #0
    2992:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    2994:	4b4a      	ldr	r3, [pc, #296]	; (2ac0 <wait_for_bootrom+0x14c>)
    2996:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    2998:	2300      	movs	r3, #0
    299a:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    299c:	4b49      	ldr	r3, [pc, #292]	; (2ac4 <wait_for_bootrom+0x150>)
    299e:	0018      	movs	r0, r3
    29a0:	4b49      	ldr	r3, [pc, #292]	; (2ac8 <wait_for_bootrom+0x154>)
    29a2:	4798      	blx	r3
    29a4:	0003      	movs	r3, r0
    29a6:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    29a8:	69fb      	ldr	r3, [r7, #28]
    29aa:	2b00      	cmp	r3, #0
    29ac:	db03      	blt.n	29b6 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    29ae:	2001      	movs	r0, #1
    29b0:	4b46      	ldr	r3, [pc, #280]	; (2acc <wait_for_bootrom+0x158>)
    29b2:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    29b4:	e7f2      	b.n	299c <wait_for_bootrom+0x28>
			break;
    29b6:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    29b8:	4b45      	ldr	r3, [pc, #276]	; (2ad0 <wait_for_bootrom+0x15c>)
    29ba:	0018      	movs	r0, r3
    29bc:	4b42      	ldr	r3, [pc, #264]	; (2ac8 <wait_for_bootrom+0x154>)
    29be:	4798      	blx	r3
    29c0:	0003      	movs	r3, r0
    29c2:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    29c4:	69fb      	ldr	r3, [r7, #28]
    29c6:	2201      	movs	r2, #1
    29c8:	4013      	ands	r3, r2
    29ca:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    29cc:	69fb      	ldr	r3, [r7, #28]
    29ce:	2b00      	cmp	r3, #0
    29d0:	d112      	bne.n	29f8 <wait_for_bootrom+0x84>
	{
		reg = 0;
    29d2:	2300      	movs	r3, #0
    29d4:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    29d6:	e00b      	b.n	29f0 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    29d8:	2001      	movs	r0, #1
    29da:	4b3c      	ldr	r3, [pc, #240]	; (2acc <wait_for_bootrom+0x158>)
    29dc:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    29de:	4b3d      	ldr	r3, [pc, #244]	; (2ad4 <wait_for_bootrom+0x160>)
    29e0:	0018      	movs	r0, r3
    29e2:	4b39      	ldr	r3, [pc, #228]	; (2ac8 <wait_for_bootrom+0x154>)
    29e4:	4798      	blx	r3
    29e6:	0003      	movs	r3, r0
    29e8:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    29ea:	69bb      	ldr	r3, [r7, #24]
    29ec:	3301      	adds	r3, #1
    29ee:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    29f0:	69fb      	ldr	r3, [r7, #28]
    29f2:	4a39      	ldr	r2, [pc, #228]	; (2ad8 <wait_for_bootrom+0x164>)
    29f4:	4293      	cmp	r3, r2
    29f6:	d1ef      	bne.n	29d8 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    29f8:	1dfb      	adds	r3, r7, #7
    29fa:	781b      	ldrb	r3, [r3, #0]
    29fc:	2b02      	cmp	r3, #2
    29fe:	d10d      	bne.n	2a1c <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2a00:	4a36      	ldr	r2, [pc, #216]	; (2adc <wait_for_bootrom+0x168>)
    2a02:	4b37      	ldr	r3, [pc, #220]	; (2ae0 <wait_for_bootrom+0x16c>)
    2a04:	0011      	movs	r1, r2
    2a06:	0018      	movs	r0, r3
    2a08:	4b36      	ldr	r3, [pc, #216]	; (2ae4 <wait_for_bootrom+0x170>)
    2a0a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    2a0c:	2380      	movs	r3, #128	; 0x80
    2a0e:	035b      	lsls	r3, r3, #13
    2a10:	4a35      	ldr	r2, [pc, #212]	; (2ae8 <wait_for_bootrom+0x174>)
    2a12:	0019      	movs	r1, r3
    2a14:	0010      	movs	r0, r2
    2a16:	4b33      	ldr	r3, [pc, #204]	; (2ae4 <wait_for_bootrom+0x170>)
    2a18:	4798      	blx	r3
    2a1a:	e022      	b.n	2a62 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    2a1c:	1dfb      	adds	r3, r7, #7
    2a1e:	781b      	ldrb	r3, [r3, #0]
    2a20:	2b03      	cmp	r3, #3
    2a22:	d10b      	bne.n	2a3c <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2a24:	4a2d      	ldr	r2, [pc, #180]	; (2adc <wait_for_bootrom+0x168>)
    2a26:	4b2e      	ldr	r3, [pc, #184]	; (2ae0 <wait_for_bootrom+0x16c>)
    2a28:	0011      	movs	r1, r2
    2a2a:	0018      	movs	r0, r3
    2a2c:	4b2d      	ldr	r3, [pc, #180]	; (2ae4 <wait_for_bootrom+0x170>)
    2a2e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    2a30:	4b2d      	ldr	r3, [pc, #180]	; (2ae8 <wait_for_bootrom+0x174>)
    2a32:	2100      	movs	r1, #0
    2a34:	0018      	movs	r0, r3
    2a36:	4b2b      	ldr	r3, [pc, #172]	; (2ae4 <wait_for_bootrom+0x170>)
    2a38:	4798      	blx	r3
    2a3a:	e012      	b.n	2a62 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    2a3c:	1dfb      	adds	r3, r7, #7
    2a3e:	781b      	ldrb	r3, [r3, #0]
    2a40:	2b04      	cmp	r3, #4
    2a42:	d108      	bne.n	2a56 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2a44:	2380      	movs	r3, #128	; 0x80
    2a46:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2a48:	68fb      	ldr	r3, [r7, #12]
    2a4a:	4a27      	ldr	r2, [pc, #156]	; (2ae8 <wait_for_bootrom+0x174>)
    2a4c:	0019      	movs	r1, r3
    2a4e:	0010      	movs	r0, r2
    2a50:	4b24      	ldr	r3, [pc, #144]	; (2ae4 <wait_for_bootrom+0x170>)
    2a52:	4798      	blx	r3
    2a54:	e005      	b.n	2a62 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2a56:	68fb      	ldr	r3, [r7, #12]
    2a58:	4a23      	ldr	r2, [pc, #140]	; (2ae8 <wait_for_bootrom+0x174>)
    2a5a:	0019      	movs	r1, r3
    2a5c:	0010      	movs	r0, r2
    2a5e:	4b21      	ldr	r3, [pc, #132]	; (2ae4 <wait_for_bootrom+0x170>)
    2a60:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    2a62:	4b22      	ldr	r3, [pc, #136]	; (2aec <wait_for_bootrom+0x178>)
    2a64:	4798      	blx	r3
    2a66:	0003      	movs	r3, r0
    2a68:	051b      	lsls	r3, r3, #20
    2a6a:	0d1b      	lsrs	r3, r3, #20
    2a6c:	4a20      	ldr	r2, [pc, #128]	; (2af0 <wait_for_bootrom+0x17c>)
    2a6e:	4293      	cmp	r3, r2
    2a70:	d906      	bls.n	2a80 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    2a72:	697b      	ldr	r3, [r7, #20]
    2a74:	2202      	movs	r2, #2
    2a76:	4313      	orrs	r3, r2
    2a78:	0018      	movs	r0, r3
    2a7a:	4b1e      	ldr	r3, [pc, #120]	; (2af4 <wait_for_bootrom+0x180>)
    2a7c:	4798      	blx	r3
    2a7e:	e003      	b.n	2a88 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    2a80:	697b      	ldr	r3, [r7, #20]
    2a82:	0018      	movs	r0, r3
    2a84:	4b1b      	ldr	r3, [pc, #108]	; (2af4 <wait_for_bootrom+0x180>)
    2a86:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    2a88:	4b1b      	ldr	r3, [pc, #108]	; (2af8 <wait_for_bootrom+0x184>)
    2a8a:	0018      	movs	r0, r3
    2a8c:	4b1b      	ldr	r3, [pc, #108]	; (2afc <wait_for_bootrom+0x188>)
    2a8e:	4798      	blx	r3
    2a90:	68fa      	ldr	r2, [r7, #12]
    2a92:	4b1b      	ldr	r3, [pc, #108]	; (2b00 <wait_for_bootrom+0x18c>)
    2a94:	0011      	movs	r1, r2
    2a96:	0018      	movs	r0, r3
    2a98:	4b18      	ldr	r3, [pc, #96]	; (2afc <wait_for_bootrom+0x188>)
    2a9a:	4798      	blx	r3
    2a9c:	200d      	movs	r0, #13
    2a9e:	4b19      	ldr	r3, [pc, #100]	; (2b04 <wait_for_bootrom+0x190>)
    2aa0:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    2aa2:	4a19      	ldr	r2, [pc, #100]	; (2b08 <wait_for_bootrom+0x194>)
    2aa4:	4b0b      	ldr	r3, [pc, #44]	; (2ad4 <wait_for_bootrom+0x160>)
    2aa6:	0011      	movs	r1, r2
    2aa8:	0018      	movs	r0, r3
    2aaa:	4b0e      	ldr	r3, [pc, #56]	; (2ae4 <wait_for_bootrom+0x170>)
    2aac:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    2aae:	2313      	movs	r3, #19
    2ab0:	18fb      	adds	r3, r7, r3
    2ab2:	781b      	ldrb	r3, [r3, #0]
    2ab4:	b25b      	sxtb	r3, r3
}
    2ab6:	0018      	movs	r0, r3
    2ab8:	46bd      	mov	sp, r7
    2aba:	b008      	add	sp, #32
    2abc:	bd80      	pop	{r7, pc}
    2abe:	46c0      	nop			; (mov r8, r8)
    2ac0:	13521352 	.word	0x13521352
    2ac4:	00001014 	.word	0x00001014
    2ac8:	00002cfd 	.word	0x00002cfd
    2acc:	000003f1 	.word	0x000003f1
    2ad0:	000207bc 	.word	0x000207bc
    2ad4:	000c000c 	.word	0x000c000c
    2ad8:	10add09e 	.word	0x10add09e
    2adc:	3c1cd57d 	.word	0x3c1cd57d
    2ae0:	000207ac 	.word	0x000207ac
    2ae4:	00002d41 	.word	0x00002d41
    2ae8:	0000108c 	.word	0x0000108c
    2aec:	00002621 	.word	0x00002621
    2af0:	0000039f 	.word	0x0000039f
    2af4:	000024f1 	.word	0x000024f1
    2af8:	0000dfa8 	.word	0x0000dfa8
    2afc:	0000c455 	.word	0x0000c455
    2b00:	0000dfb4 	.word	0x0000dfb4
    2b04:	0000c489 	.word	0x0000c489
    2b08:	ef522f61 	.word	0xef522f61

00002b0c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	b088      	sub	sp, #32
    2b10:	af00      	add	r7, sp, #0
    2b12:	0002      	movs	r2, r0
    2b14:	1dfb      	adds	r3, r7, #7
    2b16:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2b18:	231f      	movs	r3, #31
    2b1a:	18fb      	adds	r3, r7, r3
    2b1c:	2200      	movs	r2, #0
    2b1e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2b20:	2300      	movs	r3, #0
    2b22:	61bb      	str	r3, [r7, #24]
    2b24:	2300      	movs	r3, #0
    2b26:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    2b28:	2301      	movs	r3, #1
    2b2a:	425b      	negs	r3, r3
    2b2c:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    2b2e:	4b1d      	ldr	r3, [pc, #116]	; (2ba4 <wait_for_firmware_start+0x98>)
    2b30:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2b32:	4b1d      	ldr	r3, [pc, #116]	; (2ba8 <wait_for_firmware_start+0x9c>)
    2b34:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2b36:	1dfb      	adds	r3, r7, #7
    2b38:	781b      	ldrb	r3, [r3, #0]
    2b3a:	2b02      	cmp	r3, #2
    2b3c:	d003      	beq.n	2b46 <wait_for_firmware_start+0x3a>
    2b3e:	1dfb      	adds	r3, r7, #7
    2b40:	781b      	ldrb	r3, [r3, #0]
    2b42:	2b03      	cmp	r3, #3
    2b44:	d119      	bne.n	2b7a <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    2b46:	4b19      	ldr	r3, [pc, #100]	; (2bac <wait_for_firmware_start+0xa0>)
    2b48:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2b4a:	4b19      	ldr	r3, [pc, #100]	; (2bb0 <wait_for_firmware_start+0xa4>)
    2b4c:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    2b4e:	e014      	b.n	2b7a <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2b50:	2002      	movs	r0, #2
    2b52:	4b18      	ldr	r3, [pc, #96]	; (2bb4 <wait_for_firmware_start+0xa8>)
    2b54:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2b56:	68fb      	ldr	r3, [r7, #12]
    2b58:	0018      	movs	r0, r3
    2b5a:	4b17      	ldr	r3, [pc, #92]	; (2bb8 <wait_for_firmware_start+0xac>)
    2b5c:	4798      	blx	r3
    2b5e:	0003      	movs	r3, r0
    2b60:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    2b62:	697b      	ldr	r3, [r7, #20]
    2b64:	3301      	adds	r3, #1
    2b66:	617b      	str	r3, [r7, #20]
    2b68:	697a      	ldr	r2, [r7, #20]
    2b6a:	693b      	ldr	r3, [r7, #16]
    2b6c:	429a      	cmp	r2, r3
    2b6e:	d304      	bcc.n	2b7a <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2b70:	231f      	movs	r3, #31
    2b72:	18fb      	adds	r3, r7, r3
    2b74:	22fb      	movs	r2, #251	; 0xfb
    2b76:	701a      	strb	r2, [r3, #0]
			goto ERR;
    2b78:	e00c      	b.n	2b94 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    2b7a:	68ba      	ldr	r2, [r7, #8]
    2b7c:	69bb      	ldr	r3, [r7, #24]
    2b7e:	429a      	cmp	r2, r3
    2b80:	d1e6      	bne.n	2b50 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2b82:	68bb      	ldr	r3, [r7, #8]
    2b84:	4a08      	ldr	r2, [pc, #32]	; (2ba8 <wait_for_firmware_start+0x9c>)
    2b86:	4293      	cmp	r3, r2
    2b88:	d104      	bne.n	2b94 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    2b8a:	4b06      	ldr	r3, [pc, #24]	; (2ba4 <wait_for_firmware_start+0x98>)
    2b8c:	2100      	movs	r1, #0
    2b8e:	0018      	movs	r0, r3
    2b90:	4b0a      	ldr	r3, [pc, #40]	; (2bbc <wait_for_firmware_start+0xb0>)
    2b92:	4798      	blx	r3
	}
ERR:
	return ret;
    2b94:	231f      	movs	r3, #31
    2b96:	18fb      	adds	r3, r7, r3
    2b98:	781b      	ldrb	r3, [r3, #0]
    2b9a:	b25b      	sxtb	r3, r3
}
    2b9c:	0018      	movs	r0, r3
    2b9e:	46bd      	mov	sp, r7
    2ba0:	b008      	add	sp, #32
    2ba2:	bd80      	pop	{r7, pc}
    2ba4:	0000108c 	.word	0x0000108c
    2ba8:	02532636 	.word	0x02532636
    2bac:	000207ac 	.word	0x000207ac
    2bb0:	d75dc1c3 	.word	0xd75dc1c3
    2bb4:	000003f1 	.word	0x000003f1
    2bb8:	00002cfd 	.word	0x00002cfd
    2bbc:	00002d41 	.word	0x00002d41

00002bc0 <chip_deinit>:

sint8 chip_deinit(void)
{
    2bc0:	b590      	push	{r4, r7, lr}
    2bc2:	b083      	sub	sp, #12
    2bc4:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    2bc6:	2300      	movs	r3, #0
    2bc8:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2bca:	1dfc      	adds	r4, r7, #7
    2bcc:	003a      	movs	r2, r7
    2bce:	23a0      	movs	r3, #160	; 0xa0
    2bd0:	015b      	lsls	r3, r3, #5
    2bd2:	0011      	movs	r1, r2
    2bd4:	0018      	movs	r0, r3
    2bd6:	4b1f      	ldr	r3, [pc, #124]	; (2c54 <chip_deinit+0x94>)
    2bd8:	4798      	blx	r3
    2bda:	0003      	movs	r3, r0
    2bdc:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2bde:	1dfb      	adds	r3, r7, #7
    2be0:	781b      	ldrb	r3, [r3, #0]
    2be2:	b25b      	sxtb	r3, r3
    2be4:	2b00      	cmp	r3, #0
    2be6:	d00d      	beq.n	2c04 <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    2be8:	4a1b      	ldr	r2, [pc, #108]	; (2c58 <chip_deinit+0x98>)
    2bea:	491c      	ldr	r1, [pc, #112]	; (2c5c <chip_deinit+0x9c>)
    2bec:	4b1c      	ldr	r3, [pc, #112]	; (2c60 <chip_deinit+0xa0>)
    2bee:	0018      	movs	r0, r3
    2bf0:	4b1c      	ldr	r3, [pc, #112]	; (2c64 <chip_deinit+0xa4>)
    2bf2:	4798      	blx	r3
    2bf4:	4b1c      	ldr	r3, [pc, #112]	; (2c68 <chip_deinit+0xa8>)
    2bf6:	0018      	movs	r0, r3
    2bf8:	4b1c      	ldr	r3, [pc, #112]	; (2c6c <chip_deinit+0xac>)
    2bfa:	4798      	blx	r3
    2bfc:	200d      	movs	r0, #13
    2bfe:	4b1c      	ldr	r3, [pc, #112]	; (2c70 <chip_deinit+0xb0>)
    2c00:	4798      	blx	r3
		goto ERR1;
    2c02:	e020      	b.n	2c46 <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    2c04:	683b      	ldr	r3, [r7, #0]
    2c06:	4a1b      	ldr	r2, [pc, #108]	; (2c74 <chip_deinit+0xb4>)
    2c08:	4013      	ands	r3, r2
    2c0a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2c0c:	683a      	ldr	r2, [r7, #0]
    2c0e:	1dfc      	adds	r4, r7, #7
    2c10:	23a0      	movs	r3, #160	; 0xa0
    2c12:	015b      	lsls	r3, r3, #5
    2c14:	0011      	movs	r1, r2
    2c16:	0018      	movs	r0, r3
    2c18:	4b17      	ldr	r3, [pc, #92]	; (2c78 <chip_deinit+0xb8>)
    2c1a:	4798      	blx	r3
    2c1c:	0003      	movs	r3, r0
    2c1e:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2c20:	1dfb      	adds	r3, r7, #7
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	b25b      	sxtb	r3, r3
    2c26:	2b00      	cmp	r3, #0
    2c28:	d00d      	beq.n	2c46 <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    2c2a:	4a14      	ldr	r2, [pc, #80]	; (2c7c <chip_deinit+0xbc>)
    2c2c:	490b      	ldr	r1, [pc, #44]	; (2c5c <chip_deinit+0x9c>)
    2c2e:	4b0c      	ldr	r3, [pc, #48]	; (2c60 <chip_deinit+0xa0>)
    2c30:	0018      	movs	r0, r3
    2c32:	4b0c      	ldr	r3, [pc, #48]	; (2c64 <chip_deinit+0xa4>)
    2c34:	4798      	blx	r3
    2c36:	4b0c      	ldr	r3, [pc, #48]	; (2c68 <chip_deinit+0xa8>)
    2c38:	0018      	movs	r0, r3
    2c3a:	4b0c      	ldr	r3, [pc, #48]	; (2c6c <chip_deinit+0xac>)
    2c3c:	4798      	blx	r3
    2c3e:	200d      	movs	r0, #13
    2c40:	4b0b      	ldr	r3, [pc, #44]	; (2c70 <chip_deinit+0xb0>)
    2c42:	4798      	blx	r3
		goto ERR1;
    2c44:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    2c46:	1dfb      	adds	r3, r7, #7
    2c48:	781b      	ldrb	r3, [r3, #0]
    2c4a:	b25b      	sxtb	r3, r3
}
    2c4c:	0018      	movs	r0, r3
    2c4e:	46bd      	mov	sp, r7
    2c50:	b003      	add	sp, #12
    2c52:	bd90      	pop	{r4, r7, pc}
    2c54:	00002d1d 	.word	0x00002d1d
    2c58:	00000205 	.word	0x00000205
    2c5c:	0000dff0 	.word	0x0000dff0
    2c60:	0000df60 	.word	0x0000df60
    2c64:	0000c455 	.word	0x0000c455
    2c68:	0000dfcc 	.word	0x0000dfcc
    2c6c:	0000c571 	.word	0x0000c571
    2c70:	0000c489 	.word	0x0000c489
    2c74:	fffffbff 	.word	0xfffffbff
    2c78:	00002d41 	.word	0x00002d41
    2c7c:	0000020b 	.word	0x0000020b

00002c80 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2c80:	b590      	push	{r4, r7, lr}
    2c82:	b085      	sub	sp, #20
    2c84:	af00      	add	r7, sp, #0
    2c86:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2c88:	230f      	movs	r3, #15
    2c8a:	18fb      	adds	r3, r7, r3
    2c8c:	2200      	movs	r2, #0
    2c8e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    2c90:	230f      	movs	r3, #15
    2c92:	18fc      	adds	r4, r7, r3
    2c94:	687b      	ldr	r3, [r7, #4]
    2c96:	0018      	movs	r0, r3
    2c98:	4b05      	ldr	r3, [pc, #20]	; (2cb0 <nm_bus_iface_init+0x30>)
    2c9a:	4798      	blx	r3
    2c9c:	0003      	movs	r3, r0
    2c9e:	7023      	strb	r3, [r4, #0]
	return ret;
    2ca0:	230f      	movs	r3, #15
    2ca2:	18fb      	adds	r3, r7, r3
    2ca4:	781b      	ldrb	r3, [r3, #0]
    2ca6:	b25b      	sxtb	r3, r3
}
    2ca8:	0018      	movs	r0, r3
    2caa:	46bd      	mov	sp, r7
    2cac:	b005      	add	sp, #20
    2cae:	bd90      	pop	{r4, r7, pc}
    2cb0:	00000ab9 	.word	0x00000ab9

00002cb4 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2cb4:	b590      	push	{r4, r7, lr}
    2cb6:	b083      	sub	sp, #12
    2cb8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2cba:	1dfb      	adds	r3, r7, #7
    2cbc:	2200      	movs	r2, #0
    2cbe:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    2cc0:	1dfc      	adds	r4, r7, #7
    2cc2:	4b05      	ldr	r3, [pc, #20]	; (2cd8 <nm_bus_iface_deinit+0x24>)
    2cc4:	4798      	blx	r3
    2cc6:	0003      	movs	r3, r0
    2cc8:	7023      	strb	r3, [r4, #0]

	return ret;
    2cca:	1dfb      	adds	r3, r7, #7
    2ccc:	781b      	ldrb	r3, [r3, #0]
    2cce:	b25b      	sxtb	r3, r3
}
    2cd0:	0018      	movs	r0, r3
    2cd2:	46bd      	mov	sp, r7
    2cd4:	b003      	add	sp, #12
    2cd6:	bd90      	pop	{r4, r7, pc}
    2cd8:	00000c35 	.word	0x00000c35

00002cdc <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2cdc:	b580      	push	{r7, lr}
    2cde:	b082      	sub	sp, #8
    2ce0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2ce2:	1dfb      	adds	r3, r7, #7
    2ce4:	2200      	movs	r2, #0
    2ce6:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2ce8:	4b03      	ldr	r3, [pc, #12]	; (2cf8 <nm_bus_reset+0x1c>)
    2cea:	4798      	blx	r3
    2cec:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2cee:	0018      	movs	r0, r3
    2cf0:	46bd      	mov	sp, r7
    2cf2:	b002      	add	sp, #8
    2cf4:	bd80      	pop	{r7, pc}
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	000045c5 	.word	0x000045c5

00002cfc <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2cfc:	b580      	push	{r7, lr}
    2cfe:	b082      	sub	sp, #8
    2d00:	af00      	add	r7, sp, #0
    2d02:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2d04:	687b      	ldr	r3, [r7, #4]
    2d06:	0018      	movs	r0, r3
    2d08:	4b03      	ldr	r3, [pc, #12]	; (2d18 <nm_read_reg+0x1c>)
    2d0a:	4798      	blx	r3
    2d0c:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2d0e:	0018      	movs	r0, r3
    2d10:	46bd      	mov	sp, r7
    2d12:	b002      	add	sp, #8
    2d14:	bd80      	pop	{r7, pc}
    2d16:	46c0      	nop			; (mov r8, r8)
    2d18:	00004759 	.word	0x00004759

00002d1c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2d1c:	b580      	push	{r7, lr}
    2d1e:	b082      	sub	sp, #8
    2d20:	af00      	add	r7, sp, #0
    2d22:	6078      	str	r0, [r7, #4]
    2d24:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2d26:	683a      	ldr	r2, [r7, #0]
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	0011      	movs	r1, r2
    2d2c:	0018      	movs	r0, r3
    2d2e:	4b03      	ldr	r3, [pc, #12]	; (2d3c <nm_read_reg_with_ret+0x20>)
    2d30:	4798      	blx	r3
    2d32:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2d34:	0018      	movs	r0, r3
    2d36:	46bd      	mov	sp, r7
    2d38:	b002      	add	sp, #8
    2d3a:	bd80      	pop	{r7, pc}
    2d3c:	0000477d 	.word	0x0000477d

00002d40 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2d40:	b580      	push	{r7, lr}
    2d42:	b082      	sub	sp, #8
    2d44:	af00      	add	r7, sp, #0
    2d46:	6078      	str	r0, [r7, #4]
    2d48:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2d4a:	683a      	ldr	r2, [r7, #0]
    2d4c:	687b      	ldr	r3, [r7, #4]
    2d4e:	0011      	movs	r1, r2
    2d50:	0018      	movs	r0, r3
    2d52:	4b03      	ldr	r3, [pc, #12]	; (2d60 <nm_write_reg+0x20>)
    2d54:	4798      	blx	r3
    2d56:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2d58:	0018      	movs	r0, r3
    2d5a:	46bd      	mov	sp, r7
    2d5c:	b002      	add	sp, #8
    2d5e:	bd80      	pop	{r7, pc}
    2d60:	000047cd 	.word	0x000047cd

00002d64 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2d64:	b580      	push	{r7, lr}
    2d66:	b084      	sub	sp, #16
    2d68:	af00      	add	r7, sp, #0
    2d6a:	60f8      	str	r0, [r7, #12]
    2d6c:	60b9      	str	r1, [r7, #8]
    2d6e:	1dbb      	adds	r3, r7, #6
    2d70:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2d72:	1dbb      	adds	r3, r7, #6
    2d74:	881a      	ldrh	r2, [r3, #0]
    2d76:	68b9      	ldr	r1, [r7, #8]
    2d78:	68fb      	ldr	r3, [r7, #12]
    2d7a:	0018      	movs	r0, r3
    2d7c:	4b03      	ldr	r3, [pc, #12]	; (2d8c <p_nm_read_block+0x28>)
    2d7e:	4798      	blx	r3
    2d80:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2d82:	0018      	movs	r0, r3
    2d84:	46bd      	mov	sp, r7
    2d86:	b004      	add	sp, #16
    2d88:	bd80      	pop	{r7, pc}
    2d8a:	46c0      	nop			; (mov r8, r8)
    2d8c:	0000481d 	.word	0x0000481d

00002d90 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2d90:	b580      	push	{r7, lr}
    2d92:	b086      	sub	sp, #24
    2d94:	af00      	add	r7, sp, #0
    2d96:	60f8      	str	r0, [r7, #12]
    2d98:	60b9      	str	r1, [r7, #8]
    2d9a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2d9c:	4b2d      	ldr	r3, [pc, #180]	; (2e54 <nm_read_block+0xc4>)
    2d9e:	881a      	ldrh	r2, [r3, #0]
    2da0:	2310      	movs	r3, #16
    2da2:	18fb      	adds	r3, r7, r3
    2da4:	3a08      	subs	r2, #8
    2da6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2da8:	2300      	movs	r3, #0
    2daa:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2dac:	2313      	movs	r3, #19
    2dae:	18fb      	adds	r3, r7, r3
    2db0:	2200      	movs	r2, #0
    2db2:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2db4:	2310      	movs	r3, #16
    2db6:	18fb      	adds	r3, r7, r3
    2db8:	881a      	ldrh	r2, [r3, #0]
    2dba:	687b      	ldr	r3, [r7, #4]
    2dbc:	429a      	cmp	r2, r3
    2dbe:	d313      	bcc.n	2de8 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2dc0:	68ba      	ldr	r2, [r7, #8]
    2dc2:	697b      	ldr	r3, [r7, #20]
    2dc4:	18d1      	adds	r1, r2, r3
    2dc6:	687b      	ldr	r3, [r7, #4]
    2dc8:	b29a      	uxth	r2, r3
    2dca:	68fb      	ldr	r3, [r7, #12]
    2dcc:	0018      	movs	r0, r3
    2dce:	4b22      	ldr	r3, [pc, #136]	; (2e58 <nm_read_block+0xc8>)
    2dd0:	4798      	blx	r3
    2dd2:	0003      	movs	r3, r0
    2dd4:	b2da      	uxtb	r2, r3
    2dd6:	2313      	movs	r3, #19
    2dd8:	18fb      	adds	r3, r7, r3
    2dda:	781b      	ldrb	r3, [r3, #0]
    2ddc:	18d3      	adds	r3, r2, r3
    2dde:	b2da      	uxtb	r2, r3
    2de0:	2313      	movs	r3, #19
    2de2:	18fb      	adds	r3, r7, r3
    2de4:	701a      	strb	r2, [r3, #0]
			break;
    2de6:	e02d      	b.n	2e44 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2de8:	68ba      	ldr	r2, [r7, #8]
    2dea:	697b      	ldr	r3, [r7, #20]
    2dec:	18d1      	adds	r1, r2, r3
    2dee:	2310      	movs	r3, #16
    2df0:	18fb      	adds	r3, r7, r3
    2df2:	881a      	ldrh	r2, [r3, #0]
    2df4:	68fb      	ldr	r3, [r7, #12]
    2df6:	0018      	movs	r0, r3
    2df8:	4b17      	ldr	r3, [pc, #92]	; (2e58 <nm_read_block+0xc8>)
    2dfa:	4798      	blx	r3
    2dfc:	0003      	movs	r3, r0
    2dfe:	b2da      	uxtb	r2, r3
    2e00:	2313      	movs	r3, #19
    2e02:	18fb      	adds	r3, r7, r3
    2e04:	781b      	ldrb	r3, [r3, #0]
    2e06:	18d3      	adds	r3, r2, r3
    2e08:	b2da      	uxtb	r2, r3
    2e0a:	2313      	movs	r3, #19
    2e0c:	18fb      	adds	r3, r7, r3
    2e0e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2e10:	2313      	movs	r3, #19
    2e12:	18fb      	adds	r3, r7, r3
    2e14:	781b      	ldrb	r3, [r3, #0]
    2e16:	b25b      	sxtb	r3, r3
    2e18:	2b00      	cmp	r3, #0
    2e1a:	d112      	bne.n	2e42 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2e1c:	2310      	movs	r3, #16
    2e1e:	18fb      	adds	r3, r7, r3
    2e20:	881b      	ldrh	r3, [r3, #0]
    2e22:	687a      	ldr	r2, [r7, #4]
    2e24:	1ad3      	subs	r3, r2, r3
    2e26:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2e28:	2310      	movs	r3, #16
    2e2a:	18fb      	adds	r3, r7, r3
    2e2c:	881b      	ldrh	r3, [r3, #0]
    2e2e:	697a      	ldr	r2, [r7, #20]
    2e30:	18d3      	adds	r3, r2, r3
    2e32:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2e34:	2310      	movs	r3, #16
    2e36:	18fb      	adds	r3, r7, r3
    2e38:	881b      	ldrh	r3, [r3, #0]
    2e3a:	68fa      	ldr	r2, [r7, #12]
    2e3c:	18d3      	adds	r3, r2, r3
    2e3e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    2e40:	e7b8      	b.n	2db4 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    2e42:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    2e44:	2313      	movs	r3, #19
    2e46:	18fb      	adds	r3, r7, r3
    2e48:	781b      	ldrb	r3, [r3, #0]
    2e4a:	b25b      	sxtb	r3, r3
}
    2e4c:	0018      	movs	r0, r3
    2e4e:	46bd      	mov	sp, r7
    2e50:	b006      	add	sp, #24
    2e52:	bd80      	pop	{r7, pc}
    2e54:	20000008 	.word	0x20000008
    2e58:	00002d65 	.word	0x00002d65

00002e5c <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2e5c:	b580      	push	{r7, lr}
    2e5e:	b084      	sub	sp, #16
    2e60:	af00      	add	r7, sp, #0
    2e62:	60f8      	str	r0, [r7, #12]
    2e64:	60b9      	str	r1, [r7, #8]
    2e66:	1dbb      	adds	r3, r7, #6
    2e68:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2e6a:	1dbb      	adds	r3, r7, #6
    2e6c:	881a      	ldrh	r2, [r3, #0]
    2e6e:	68b9      	ldr	r1, [r7, #8]
    2e70:	68fb      	ldr	r3, [r7, #12]
    2e72:	0018      	movs	r0, r3
    2e74:	4b03      	ldr	r3, [pc, #12]	; (2e84 <p_nm_write_block+0x28>)
    2e76:	4798      	blx	r3
    2e78:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2e7a:	0018      	movs	r0, r3
    2e7c:	46bd      	mov	sp, r7
    2e7e:	b004      	add	sp, #16
    2e80:	bd80      	pop	{r7, pc}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	00004875 	.word	0x00004875

00002e88 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2e88:	b580      	push	{r7, lr}
    2e8a:	b086      	sub	sp, #24
    2e8c:	af00      	add	r7, sp, #0
    2e8e:	60f8      	str	r0, [r7, #12]
    2e90:	60b9      	str	r1, [r7, #8]
    2e92:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2e94:	4b2d      	ldr	r3, [pc, #180]	; (2f4c <nm_write_block+0xc4>)
    2e96:	881a      	ldrh	r2, [r3, #0]
    2e98:	2310      	movs	r3, #16
    2e9a:	18fb      	adds	r3, r7, r3
    2e9c:	3a08      	subs	r2, #8
    2e9e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2ea0:	2300      	movs	r3, #0
    2ea2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2ea4:	2313      	movs	r3, #19
    2ea6:	18fb      	adds	r3, r7, r3
    2ea8:	2200      	movs	r2, #0
    2eaa:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2eac:	2310      	movs	r3, #16
    2eae:	18fb      	adds	r3, r7, r3
    2eb0:	881a      	ldrh	r2, [r3, #0]
    2eb2:	687b      	ldr	r3, [r7, #4]
    2eb4:	429a      	cmp	r2, r3
    2eb6:	d313      	bcc.n	2ee0 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2eb8:	68ba      	ldr	r2, [r7, #8]
    2eba:	697b      	ldr	r3, [r7, #20]
    2ebc:	18d1      	adds	r1, r2, r3
    2ebe:	687b      	ldr	r3, [r7, #4]
    2ec0:	b29a      	uxth	r2, r3
    2ec2:	68fb      	ldr	r3, [r7, #12]
    2ec4:	0018      	movs	r0, r3
    2ec6:	4b22      	ldr	r3, [pc, #136]	; (2f50 <nm_write_block+0xc8>)
    2ec8:	4798      	blx	r3
    2eca:	0003      	movs	r3, r0
    2ecc:	b2da      	uxtb	r2, r3
    2ece:	2313      	movs	r3, #19
    2ed0:	18fb      	adds	r3, r7, r3
    2ed2:	781b      	ldrb	r3, [r3, #0]
    2ed4:	18d3      	adds	r3, r2, r3
    2ed6:	b2da      	uxtb	r2, r3
    2ed8:	2313      	movs	r3, #19
    2eda:	18fb      	adds	r3, r7, r3
    2edc:	701a      	strb	r2, [r3, #0]
			break;
    2ede:	e02d      	b.n	2f3c <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2ee0:	68ba      	ldr	r2, [r7, #8]
    2ee2:	697b      	ldr	r3, [r7, #20]
    2ee4:	18d1      	adds	r1, r2, r3
    2ee6:	2310      	movs	r3, #16
    2ee8:	18fb      	adds	r3, r7, r3
    2eea:	881a      	ldrh	r2, [r3, #0]
    2eec:	68fb      	ldr	r3, [r7, #12]
    2eee:	0018      	movs	r0, r3
    2ef0:	4b17      	ldr	r3, [pc, #92]	; (2f50 <nm_write_block+0xc8>)
    2ef2:	4798      	blx	r3
    2ef4:	0003      	movs	r3, r0
    2ef6:	b2da      	uxtb	r2, r3
    2ef8:	2313      	movs	r3, #19
    2efa:	18fb      	adds	r3, r7, r3
    2efc:	781b      	ldrb	r3, [r3, #0]
    2efe:	18d3      	adds	r3, r2, r3
    2f00:	b2da      	uxtb	r2, r3
    2f02:	2313      	movs	r3, #19
    2f04:	18fb      	adds	r3, r7, r3
    2f06:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2f08:	2313      	movs	r3, #19
    2f0a:	18fb      	adds	r3, r7, r3
    2f0c:	781b      	ldrb	r3, [r3, #0]
    2f0e:	b25b      	sxtb	r3, r3
    2f10:	2b00      	cmp	r3, #0
    2f12:	d112      	bne.n	2f3a <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2f14:	2310      	movs	r3, #16
    2f16:	18fb      	adds	r3, r7, r3
    2f18:	881b      	ldrh	r3, [r3, #0]
    2f1a:	687a      	ldr	r2, [r7, #4]
    2f1c:	1ad3      	subs	r3, r2, r3
    2f1e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2f20:	2310      	movs	r3, #16
    2f22:	18fb      	adds	r3, r7, r3
    2f24:	881b      	ldrh	r3, [r3, #0]
    2f26:	697a      	ldr	r2, [r7, #20]
    2f28:	18d3      	adds	r3, r2, r3
    2f2a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2f2c:	2310      	movs	r3, #16
    2f2e:	18fb      	adds	r3, r7, r3
    2f30:	881b      	ldrh	r3, [r3, #0]
    2f32:	68fa      	ldr	r2, [r7, #12]
    2f34:	18d3      	adds	r3, r2, r3
    2f36:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    2f38:	e7b8      	b.n	2eac <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    2f3a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    2f3c:	2313      	movs	r3, #19
    2f3e:	18fb      	adds	r3, r7, r3
    2f40:	781b      	ldrb	r3, [r3, #0]
    2f42:	b25b      	sxtb	r3, r3
}
    2f44:	0018      	movs	r0, r3
    2f46:	46bd      	mov	sp, r7
    2f48:	b006      	add	sp, #24
    2f4a:	bd80      	pop	{r7, pc}
    2f4c:	20000008 	.word	0x20000008
    2f50:	00002e5d 	.word	0x00002e5d

00002f54 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2f54:	b590      	push	{r4, r7, lr}
    2f56:	b089      	sub	sp, #36	; 0x24
    2f58:	af00      	add	r7, sp, #0
    2f5a:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2f5c:	2300      	movs	r3, #0
    2f5e:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    2f60:	231f      	movs	r3, #31
    2f62:	18fb      	adds	r3, r7, r3
    2f64:	2200      	movs	r2, #0
    2f66:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    2f68:	230c      	movs	r3, #12
    2f6a:	18fb      	adds	r3, r7, r3
    2f6c:	0018      	movs	r0, r3
    2f6e:	2308      	movs	r3, #8
    2f70:	001a      	movs	r2, r3
    2f72:	2100      	movs	r1, #0
    2f74:	4b64      	ldr	r3, [pc, #400]	; (3108 <nm_get_firmware_full_info+0x1b4>)
    2f76:	4798      	blx	r3
	if (pstrRev != NULL)
    2f78:	687b      	ldr	r3, [r7, #4]
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	d100      	bne.n	2f80 <nm_get_firmware_full_info+0x2c>
    2f7e:	e0ba      	b.n	30f6 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2f80:	687b      	ldr	r3, [r7, #4]
    2f82:	2228      	movs	r2, #40	; 0x28
    2f84:	2100      	movs	r1, #0
    2f86:	0018      	movs	r0, r3
    2f88:	4b60      	ldr	r3, [pc, #384]	; (310c <nm_get_firmware_full_info+0x1b8>)
    2f8a:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2f8c:	231f      	movs	r3, #31
    2f8e:	18fc      	adds	r4, r7, r3
    2f90:	2314      	movs	r3, #20
    2f92:	18fb      	adds	r3, r7, r3
    2f94:	4a5e      	ldr	r2, [pc, #376]	; (3110 <nm_get_firmware_full_info+0x1bc>)
    2f96:	0019      	movs	r1, r3
    2f98:	0010      	movs	r0, r2
    2f9a:	4b5e      	ldr	r3, [pc, #376]	; (3114 <nm_get_firmware_full_info+0x1c0>)
    2f9c:	4798      	blx	r3
    2f9e:	0003      	movs	r3, r0
    2fa0:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    2fa2:	231f      	movs	r3, #31
    2fa4:	18fb      	adds	r3, r7, r3
    2fa6:	781b      	ldrb	r3, [r3, #0]
    2fa8:	b25b      	sxtb	r3, r3
    2faa:	2b00      	cmp	r3, #0
    2fac:	d000      	beq.n	2fb0 <nm_get_firmware_full_info+0x5c>
    2fae:	e0a2      	b.n	30f6 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    2fb0:	697b      	ldr	r3, [r7, #20]
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	d100      	bne.n	2fb8 <nm_get_firmware_full_info+0x64>
    2fb6:	e09a      	b.n	30ee <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2fb8:	697b      	ldr	r3, [r7, #20]
    2fba:	22c0      	movs	r2, #192	; 0xc0
    2fbc:	0292      	lsls	r2, r2, #10
    2fbe:	4313      	orrs	r3, r2
    2fc0:	221f      	movs	r2, #31
    2fc2:	18bc      	adds	r4, r7, r2
    2fc4:	220c      	movs	r2, #12
    2fc6:	18b9      	adds	r1, r7, r2
    2fc8:	2208      	movs	r2, #8
    2fca:	0018      	movs	r0, r3
    2fcc:	4b52      	ldr	r3, [pc, #328]	; (3118 <nm_get_firmware_full_info+0x1c4>)
    2fce:	4798      	blx	r3
    2fd0:	0003      	movs	r3, r0
    2fd2:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    2fd4:	231f      	movs	r3, #31
    2fd6:	18fb      	adds	r3, r7, r3
    2fd8:	781b      	ldrb	r3, [r3, #0]
    2fda:	b25b      	sxtb	r3, r3
    2fdc:	2b00      	cmp	r3, #0
    2fde:	d000      	beq.n	2fe2 <nm_get_firmware_full_info+0x8e>
    2fe0:	e089      	b.n	30f6 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    2fe2:	230c      	movs	r3, #12
    2fe4:	18fb      	adds	r3, r7, r3
    2fe6:	685b      	ldr	r3, [r3, #4]
    2fe8:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    2fea:	697b      	ldr	r3, [r7, #20]
    2fec:	041b      	lsls	r3, r3, #16
    2fee:	0c1b      	lsrs	r3, r3, #16
    2ff0:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    2ff2:	697b      	ldr	r3, [r7, #20]
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	d100      	bne.n	2ffa <nm_get_firmware_full_info+0xa6>
    2ff8:	e074      	b.n	30e4 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2ffa:	697b      	ldr	r3, [r7, #20]
    2ffc:	22c0      	movs	r2, #192	; 0xc0
    2ffe:	0292      	lsls	r2, r2, #10
    3000:	4313      	orrs	r3, r2
    3002:	221f      	movs	r2, #31
    3004:	18bc      	adds	r4, r7, r2
    3006:	6879      	ldr	r1, [r7, #4]
    3008:	2228      	movs	r2, #40	; 0x28
    300a:	0018      	movs	r0, r3
    300c:	4b42      	ldr	r3, [pc, #264]	; (3118 <nm_get_firmware_full_info+0x1c4>)
    300e:	4798      	blx	r3
    3010:	0003      	movs	r3, r0
    3012:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    3014:	231f      	movs	r3, #31
    3016:	18fb      	adds	r3, r7, r3
    3018:	781b      	ldrb	r3, [r3, #0]
    301a:	b25b      	sxtb	r3, r3
    301c:	2b00      	cmp	r3, #0
    301e:	d16a      	bne.n	30f6 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    3020:	687b      	ldr	r3, [r7, #4]
    3022:	791b      	ldrb	r3, [r3, #4]
    3024:	021b      	lsls	r3, r3, #8
    3026:	b21a      	sxth	r2, r3
    3028:	687b      	ldr	r3, [r7, #4]
    302a:	795b      	ldrb	r3, [r3, #5]
    302c:	011b      	lsls	r3, r3, #4
    302e:	b21b      	sxth	r3, r3
    3030:	21ff      	movs	r1, #255	; 0xff
    3032:	400b      	ands	r3, r1
    3034:	b21b      	sxth	r3, r3
    3036:	4313      	orrs	r3, r2
    3038:	b21a      	sxth	r2, r3
    303a:	687b      	ldr	r3, [r7, #4]
    303c:	799b      	ldrb	r3, [r3, #6]
    303e:	b21b      	sxth	r3, r3
    3040:	210f      	movs	r1, #15
    3042:	400b      	ands	r3, r1
    3044:	b21b      	sxth	r3, r3
    3046:	4313      	orrs	r3, r2
    3048:	b21a      	sxth	r2, r3
    304a:	231c      	movs	r3, #28
    304c:	18fb      	adds	r3, r7, r3
    304e:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    3050:	231a      	movs	r3, #26
    3052:	18fb      	adds	r3, r7, r3
    3054:	4a31      	ldr	r2, [pc, #196]	; (311c <nm_get_firmware_full_info+0x1c8>)
    3056:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    3058:	687b      	ldr	r3, [r7, #4]
    305a:	79db      	ldrb	r3, [r3, #7]
    305c:	021b      	lsls	r3, r3, #8
    305e:	b21a      	sxth	r2, r3
    3060:	687b      	ldr	r3, [r7, #4]
    3062:	7a1b      	ldrb	r3, [r3, #8]
    3064:	011b      	lsls	r3, r3, #4
    3066:	b21b      	sxth	r3, r3
    3068:	21ff      	movs	r1, #255	; 0xff
    306a:	400b      	ands	r3, r1
    306c:	b21b      	sxth	r3, r3
    306e:	4313      	orrs	r3, r2
    3070:	b21a      	sxth	r2, r3
    3072:	687b      	ldr	r3, [r7, #4]
    3074:	7a5b      	ldrb	r3, [r3, #9]
    3076:	b21b      	sxth	r3, r3
    3078:	210f      	movs	r1, #15
    307a:	400b      	ands	r3, r1
    307c:	b21b      	sxth	r3, r3
    307e:	4313      	orrs	r3, r2
    3080:	b21a      	sxth	r2, r3
    3082:	2318      	movs	r3, #24
    3084:	18fb      	adds	r3, r7, r3
    3086:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    3088:	231c      	movs	r3, #28
    308a:	18fb      	adds	r3, r7, r3
    308c:	881b      	ldrh	r3, [r3, #0]
    308e:	2b00      	cmp	r3, #0
    3090:	d009      	beq.n	30a6 <nm_get_firmware_full_info+0x152>
    3092:	2318      	movs	r3, #24
    3094:	18fb      	adds	r3, r7, r3
    3096:	881b      	ldrh	r3, [r3, #0]
    3098:	2b00      	cmp	r3, #0
    309a:	d004      	beq.n	30a6 <nm_get_firmware_full_info+0x152>
    309c:	2318      	movs	r3, #24
    309e:	18fb      	adds	r3, r7, r3
    30a0:	881b      	ldrh	r3, [r3, #0]
    30a2:	2b00      	cmp	r3, #0
    30a4:	d104      	bne.n	30b0 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    30a6:	231f      	movs	r3, #31
    30a8:	18fb      	adds	r3, r7, r3
    30aa:	22f4      	movs	r2, #244	; 0xf4
    30ac:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    30ae:	e022      	b.n	30f6 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    30b0:	231a      	movs	r3, #26
    30b2:	18fa      	adds	r2, r7, r3
    30b4:	2318      	movs	r3, #24
    30b6:	18fb      	adds	r3, r7, r3
    30b8:	8812      	ldrh	r2, [r2, #0]
    30ba:	881b      	ldrh	r3, [r3, #0]
    30bc:	429a      	cmp	r2, r3
    30be:	d204      	bcs.n	30ca <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    30c0:	231f      	movs	r3, #31
    30c2:	18fb      	adds	r3, r7, r3
    30c4:	22f3      	movs	r2, #243	; 0xf3
    30c6:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    30c8:	e015      	b.n	30f6 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    30ca:	231a      	movs	r3, #26
    30cc:	18fa      	adds	r2, r7, r3
    30ce:	231c      	movs	r3, #28
    30d0:	18fb      	adds	r3, r7, r3
    30d2:	8812      	ldrh	r2, [r2, #0]
    30d4:	881b      	ldrh	r3, [r3, #0]
    30d6:	429a      	cmp	r2, r3
    30d8:	d90d      	bls.n	30f6 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    30da:	231f      	movs	r3, #31
    30dc:	18fb      	adds	r3, r7, r3
    30de:	22f3      	movs	r2, #243	; 0xf3
    30e0:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    30e2:	e008      	b.n	30f6 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    30e4:	231f      	movs	r3, #31
    30e6:	18fb      	adds	r3, r7, r3
    30e8:	22f4      	movs	r2, #244	; 0xf4
    30ea:	701a      	strb	r2, [r3, #0]
    30ec:	e003      	b.n	30f6 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    30ee:	231f      	movs	r3, #31
    30f0:	18fb      	adds	r3, r7, r3
    30f2:	22f4      	movs	r2, #244	; 0xf4
    30f4:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    30f6:	231f      	movs	r3, #31
    30f8:	18fb      	adds	r3, r7, r3
    30fa:	781b      	ldrb	r3, [r3, #0]
    30fc:	b25b      	sxtb	r3, r3
}
    30fe:	0018      	movs	r0, r3
    3100:	46bd      	mov	sp, r7
    3102:	b009      	add	sp, #36	; 0x24
    3104:	bd90      	pop	{r4, r7, pc}
    3106:	46c0      	nop			; (mov r8, r8)
    3108:	0000c2f3 	.word	0x0000c2f3
    310c:	00000ce1 	.word	0x00000ce1
    3110:	000c0008 	.word	0x000c0008
    3114:	00002d1d 	.word	0x00002d1d
    3118:	00002d91 	.word	0x00002d91
    311c:	00001352 	.word	0x00001352

00003120 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    3120:	b590      	push	{r4, r7, lr}
    3122:	b085      	sub	sp, #20
    3124:	af00      	add	r7, sp, #0
    3126:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3128:	230f      	movs	r3, #15
    312a:	18fb      	adds	r3, r7, r3
    312c:	2200      	movs	r2, #0
    312e:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	2b00      	cmp	r3, #0
    3134:	d013      	beq.n	315e <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    3136:	230e      	movs	r3, #14
    3138:	18fb      	adds	r3, r7, r3
    313a:	687a      	ldr	r2, [r7, #4]
    313c:	7812      	ldrb	r2, [r2, #0]
    313e:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    3140:	230e      	movs	r3, #14
    3142:	18fb      	adds	r3, r7, r3
    3144:	781b      	ldrb	r3, [r3, #0]
    3146:	2b00      	cmp	r3, #0
    3148:	d004      	beq.n	3154 <nm_drv_init+0x34>
    314a:	230e      	movs	r3, #14
    314c:	18fb      	adds	r3, r7, r3
    314e:	781b      	ldrb	r3, [r3, #0]
    3150:	2b04      	cmp	r3, #4
    3152:	d908      	bls.n	3166 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    3154:	230e      	movs	r3, #14
    3156:	18fb      	adds	r3, r7, r3
    3158:	2201      	movs	r2, #1
    315a:	701a      	strb	r2, [r3, #0]
    315c:	e003      	b.n	3166 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    315e:	230e      	movs	r3, #14
    3160:	18fb      	adds	r3, r7, r3
    3162:	2201      	movs	r2, #1
    3164:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    3166:	230f      	movs	r3, #15
    3168:	18fc      	adds	r4, r7, r3
    316a:	2000      	movs	r0, #0
    316c:	4b41      	ldr	r3, [pc, #260]	; (3274 <nm_drv_init+0x154>)
    316e:	4798      	blx	r3
    3170:	0003      	movs	r3, r0
    3172:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3174:	230f      	movs	r3, #15
    3176:	18fb      	adds	r3, r7, r3
    3178:	781b      	ldrb	r3, [r3, #0]
    317a:	b25b      	sxtb	r3, r3
    317c:	2b00      	cmp	r3, #0
    317e:	d00f      	beq.n	31a0 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    3180:	2328      	movs	r3, #40	; 0x28
    3182:	33ff      	adds	r3, #255	; 0xff
    3184:	001a      	movs	r2, r3
    3186:	493c      	ldr	r1, [pc, #240]	; (3278 <nm_drv_init+0x158>)
    3188:	4b3c      	ldr	r3, [pc, #240]	; (327c <nm_drv_init+0x15c>)
    318a:	0018      	movs	r0, r3
    318c:	4b3c      	ldr	r3, [pc, #240]	; (3280 <nm_drv_init+0x160>)
    318e:	4798      	blx	r3
    3190:	4b3c      	ldr	r3, [pc, #240]	; (3284 <nm_drv_init+0x164>)
    3192:	0018      	movs	r0, r3
    3194:	4b3c      	ldr	r3, [pc, #240]	; (3288 <nm_drv_init+0x168>)
    3196:	4798      	blx	r3
    3198:	200d      	movs	r0, #13
    319a:	4b3c      	ldr	r3, [pc, #240]	; (328c <nm_drv_init+0x16c>)
    319c:	4798      	blx	r3
		goto ERR1;
    319e:	e060      	b.n	3262 <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    31a0:	4b3b      	ldr	r3, [pc, #236]	; (3290 <nm_drv_init+0x170>)
    31a2:	0018      	movs	r0, r3
    31a4:	4b36      	ldr	r3, [pc, #216]	; (3280 <nm_drv_init+0x160>)
    31a6:	4798      	blx	r3
    31a8:	4b3a      	ldr	r3, [pc, #232]	; (3294 <nm_drv_init+0x174>)
    31aa:	4798      	blx	r3
    31ac:	0002      	movs	r2, r0
    31ae:	4b3a      	ldr	r3, [pc, #232]	; (3298 <nm_drv_init+0x178>)
    31b0:	0011      	movs	r1, r2
    31b2:	0018      	movs	r0, r3
    31b4:	4b32      	ldr	r3, [pc, #200]	; (3280 <nm_drv_init+0x160>)
    31b6:	4798      	blx	r3
    31b8:	200d      	movs	r0, #13
    31ba:	4b34      	ldr	r3, [pc, #208]	; (328c <nm_drv_init+0x16c>)
    31bc:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    31be:	4b37      	ldr	r3, [pc, #220]	; (329c <nm_drv_init+0x17c>)
    31c0:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    31c2:	230f      	movs	r3, #15
    31c4:	18fc      	adds	r4, r7, r3
    31c6:	230e      	movs	r3, #14
    31c8:	18fb      	adds	r3, r7, r3
    31ca:	781b      	ldrb	r3, [r3, #0]
    31cc:	0018      	movs	r0, r3
    31ce:	4b34      	ldr	r3, [pc, #208]	; (32a0 <nm_drv_init+0x180>)
    31d0:	4798      	blx	r3
    31d2:	0003      	movs	r3, r0
    31d4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    31d6:	230f      	movs	r3, #15
    31d8:	18fb      	adds	r3, r7, r3
    31da:	781b      	ldrb	r3, [r3, #0]
    31dc:	b25b      	sxtb	r3, r3
    31de:	2b00      	cmp	r3, #0
    31e0:	d13a      	bne.n	3258 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    31e2:	230f      	movs	r3, #15
    31e4:	18fc      	adds	r4, r7, r3
    31e6:	230e      	movs	r3, #14
    31e8:	18fb      	adds	r3, r7, r3
    31ea:	781b      	ldrb	r3, [r3, #0]
    31ec:	0018      	movs	r0, r3
    31ee:	4b2d      	ldr	r3, [pc, #180]	; (32a4 <nm_drv_init+0x184>)
    31f0:	4798      	blx	r3
    31f2:	0003      	movs	r3, r0
    31f4:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    31f6:	230f      	movs	r3, #15
    31f8:	18fb      	adds	r3, r7, r3
    31fa:	781b      	ldrb	r3, [r3, #0]
    31fc:	b25b      	sxtb	r3, r3
    31fe:	2b00      	cmp	r3, #0
    3200:	d12c      	bne.n	325c <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    3202:	230e      	movs	r3, #14
    3204:	18fb      	adds	r3, r7, r3
    3206:	781b      	ldrb	r3, [r3, #0]
    3208:	2b02      	cmp	r3, #2
    320a:	d02a      	beq.n	3262 <nm_drv_init+0x142>
    320c:	230e      	movs	r3, #14
    320e:	18fb      	adds	r3, r7, r3
    3210:	781b      	ldrb	r3, [r3, #0]
    3212:	2b03      	cmp	r3, #3
    3214:	d025      	beq.n	3262 <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    3216:	230f      	movs	r3, #15
    3218:	18fc      	adds	r4, r7, r3
    321a:	4b23      	ldr	r3, [pc, #140]	; (32a8 <nm_drv_init+0x188>)
    321c:	4798      	blx	r3
    321e:	0003      	movs	r3, r0
    3220:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3222:	230f      	movs	r3, #15
    3224:	18fb      	adds	r3, r7, r3
    3226:	781b      	ldrb	r3, [r3, #0]
    3228:	b25b      	sxtb	r3, r3
    322a:	2b00      	cmp	r3, #0
    322c:	d00f      	beq.n	324e <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    322e:	2356      	movs	r3, #86	; 0x56
    3230:	33ff      	adds	r3, #255	; 0xff
    3232:	001a      	movs	r2, r3
    3234:	4910      	ldr	r1, [pc, #64]	; (3278 <nm_drv_init+0x158>)
    3236:	4b11      	ldr	r3, [pc, #68]	; (327c <nm_drv_init+0x15c>)
    3238:	0018      	movs	r0, r3
    323a:	4b11      	ldr	r3, [pc, #68]	; (3280 <nm_drv_init+0x160>)
    323c:	4798      	blx	r3
    323e:	4b1b      	ldr	r3, [pc, #108]	; (32ac <nm_drv_init+0x18c>)
    3240:	0018      	movs	r0, r3
    3242:	4b11      	ldr	r3, [pc, #68]	; (3288 <nm_drv_init+0x168>)
    3244:	4798      	blx	r3
    3246:	200d      	movs	r0, #13
    3248:	4b10      	ldr	r3, [pc, #64]	; (328c <nm_drv_init+0x16c>)
    324a:	4798      	blx	r3
		goto ERR2;
    324c:	e007      	b.n	325e <nm_drv_init+0x13e>
	}
	return ret;
    324e:	230f      	movs	r3, #15
    3250:	18fb      	adds	r3, r7, r3
    3252:	781b      	ldrb	r3, [r3, #0]
    3254:	b25b      	sxtb	r3, r3
    3256:	e008      	b.n	326a <nm_drv_init+0x14a>
		goto ERR2;
    3258:	46c0      	nop			; (mov r8, r8)
    325a:	e000      	b.n	325e <nm_drv_init+0x13e>
		goto ERR2;
    325c:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    325e:	4b14      	ldr	r3, [pc, #80]	; (32b0 <nm_drv_init+0x190>)
    3260:	4798      	blx	r3
ERR1:
	return ret;
    3262:	230f      	movs	r3, #15
    3264:	18fb      	adds	r3, r7, r3
    3266:	781b      	ldrb	r3, [r3, #0]
    3268:	b25b      	sxtb	r3, r3
}
    326a:	0018      	movs	r0, r3
    326c:	46bd      	mov	sp, r7
    326e:	b005      	add	sp, #20
    3270:	bd90      	pop	{r4, r7, pc}
    3272:	46c0      	nop			; (mov r8, r8)
    3274:	00002c81 	.word	0x00002c81
    3278:	0000e0c8 	.word	0x0000e0c8
    327c:	0000dffc 	.word	0x0000dffc
    3280:	0000c455 	.word	0x0000c455
    3284:	0000e010 	.word	0x0000e010
    3288:	0000c571 	.word	0x0000c571
    328c:	0000c489 	.word	0x0000c489
    3290:	0000e02c 	.word	0x0000e02c
    3294:	00002621 	.word	0x00002621
    3298:	0000e038 	.word	0x0000e038
    329c:	000045f5 	.word	0x000045f5
    32a0:	00002975 	.word	0x00002975
    32a4:	00002b0d 	.word	0x00002b0d
    32a8:	0000256d 	.word	0x0000256d
    32ac:	0000e048 	.word	0x0000e048
    32b0:	00002cb5 	.word	0x00002cb5

000032b4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    32b4:	b590      	push	{r4, r7, lr}
    32b6:	b085      	sub	sp, #20
    32b8:	af00      	add	r7, sp, #0
    32ba:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    32bc:	230f      	movs	r3, #15
    32be:	18fc      	adds	r4, r7, r3
    32c0:	4b2d      	ldr	r3, [pc, #180]	; (3378 <nm_drv_deinit+0xc4>)
    32c2:	4798      	blx	r3
    32c4:	0003      	movs	r3, r0
    32c6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    32c8:	230f      	movs	r3, #15
    32ca:	18fb      	adds	r3, r7, r3
    32cc:	781b      	ldrb	r3, [r3, #0]
    32ce:	b25b      	sxtb	r3, r3
    32d0:	2b00      	cmp	r3, #0
    32d2:	d00e      	beq.n	32f2 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    32d4:	23b6      	movs	r3, #182	; 0xb6
    32d6:	005a      	lsls	r2, r3, #1
    32d8:	4928      	ldr	r1, [pc, #160]	; (337c <nm_drv_deinit+0xc8>)
    32da:	4b29      	ldr	r3, [pc, #164]	; (3380 <nm_drv_deinit+0xcc>)
    32dc:	0018      	movs	r0, r3
    32de:	4b29      	ldr	r3, [pc, #164]	; (3384 <nm_drv_deinit+0xd0>)
    32e0:	4798      	blx	r3
    32e2:	4b29      	ldr	r3, [pc, #164]	; (3388 <nm_drv_deinit+0xd4>)
    32e4:	0018      	movs	r0, r3
    32e6:	4b29      	ldr	r3, [pc, #164]	; (338c <nm_drv_deinit+0xd8>)
    32e8:	4798      	blx	r3
    32ea:	200d      	movs	r0, #13
    32ec:	4b28      	ldr	r3, [pc, #160]	; (3390 <nm_drv_deinit+0xdc>)
    32ee:	4798      	blx	r3
		goto ERR1;
    32f0:	e03a      	b.n	3368 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    32f2:	230f      	movs	r3, #15
    32f4:	18fc      	adds	r4, r7, r3
    32f6:	2000      	movs	r0, #0
    32f8:	4b26      	ldr	r3, [pc, #152]	; (3394 <nm_drv_deinit+0xe0>)
    32fa:	4798      	blx	r3
    32fc:	0003      	movs	r3, r0
    32fe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3300:	230f      	movs	r3, #15
    3302:	18fb      	adds	r3, r7, r3
    3304:	781b      	ldrb	r3, [r3, #0]
    3306:	b25b      	sxtb	r3, r3
    3308:	2b00      	cmp	r3, #0
    330a:	d00f      	beq.n	332c <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    330c:	2374      	movs	r3, #116	; 0x74
    330e:	33ff      	adds	r3, #255	; 0xff
    3310:	001a      	movs	r2, r3
    3312:	491a      	ldr	r1, [pc, #104]	; (337c <nm_drv_deinit+0xc8>)
    3314:	4b1a      	ldr	r3, [pc, #104]	; (3380 <nm_drv_deinit+0xcc>)
    3316:	0018      	movs	r0, r3
    3318:	4b1a      	ldr	r3, [pc, #104]	; (3384 <nm_drv_deinit+0xd0>)
    331a:	4798      	blx	r3
    331c:	4b1e      	ldr	r3, [pc, #120]	; (3398 <nm_drv_deinit+0xe4>)
    331e:	0018      	movs	r0, r3
    3320:	4b1a      	ldr	r3, [pc, #104]	; (338c <nm_drv_deinit+0xd8>)
    3322:	4798      	blx	r3
    3324:	200d      	movs	r0, #13
    3326:	4b1a      	ldr	r3, [pc, #104]	; (3390 <nm_drv_deinit+0xdc>)
    3328:	4798      	blx	r3
		goto ERR1;
    332a:	e01d      	b.n	3368 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    332c:	230f      	movs	r3, #15
    332e:	18fc      	adds	r4, r7, r3
    3330:	4b1a      	ldr	r3, [pc, #104]	; (339c <nm_drv_deinit+0xe8>)
    3332:	4798      	blx	r3
    3334:	0003      	movs	r3, r0
    3336:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3338:	230f      	movs	r3, #15
    333a:	18fb      	adds	r3, r7, r3
    333c:	781b      	ldrb	r3, [r3, #0]
    333e:	b25b      	sxtb	r3, r3
    3340:	2b00      	cmp	r3, #0
    3342:	d00f      	beq.n	3364 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    3344:	237a      	movs	r3, #122	; 0x7a
    3346:	33ff      	adds	r3, #255	; 0xff
    3348:	001a      	movs	r2, r3
    334a:	490c      	ldr	r1, [pc, #48]	; (337c <nm_drv_deinit+0xc8>)
    334c:	4b0c      	ldr	r3, [pc, #48]	; (3380 <nm_drv_deinit+0xcc>)
    334e:	0018      	movs	r0, r3
    3350:	4b0c      	ldr	r3, [pc, #48]	; (3384 <nm_drv_deinit+0xd0>)
    3352:	4798      	blx	r3
    3354:	4b12      	ldr	r3, [pc, #72]	; (33a0 <nm_drv_deinit+0xec>)
    3356:	0018      	movs	r0, r3
    3358:	4b0c      	ldr	r3, [pc, #48]	; (338c <nm_drv_deinit+0xd8>)
    335a:	4798      	blx	r3
    335c:	200d      	movs	r0, #13
    335e:	4b0c      	ldr	r3, [pc, #48]	; (3390 <nm_drv_deinit+0xdc>)
    3360:	4798      	blx	r3
		goto ERR1;
    3362:	e001      	b.n	3368 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    3364:	4b0f      	ldr	r3, [pc, #60]	; (33a4 <nm_drv_deinit+0xf0>)
    3366:	4798      	blx	r3
#endif

ERR1:
	return ret;
    3368:	230f      	movs	r3, #15
    336a:	18fb      	adds	r3, r7, r3
    336c:	781b      	ldrb	r3, [r3, #0]
    336e:	b25b      	sxtb	r3, r3
}
    3370:	0018      	movs	r0, r3
    3372:	46bd      	mov	sp, r7
    3374:	b005      	add	sp, #20
    3376:	bd90      	pop	{r4, r7, pc}
    3378:	00002bc1 	.word	0x00002bc1
    337c:	0000e0d4 	.word	0x0000e0d4
    3380:	0000dffc 	.word	0x0000dffc
    3384:	0000c455 	.word	0x0000c455
    3388:	0000e068 	.word	0x0000e068
    338c:	0000c571 	.word	0x0000c571
    3390:	0000c489 	.word	0x0000c489
    3394:	00005a4d 	.word	0x00005a4d
    3398:	0000e088 	.word	0x0000e088
    339c:	00002cb5 	.word	0x00002cb5
    33a0:	0000e0ac 	.word	0x0000e0ac
    33a4:	00004741 	.word	0x00004741

000033a8 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    33a8:	b580      	push	{r7, lr}
    33aa:	b086      	sub	sp, #24
    33ac:	af00      	add	r7, sp, #0
    33ae:	6078      	str	r0, [r7, #4]
    33b0:	000a      	movs	r2, r1
    33b2:	1cbb      	adds	r3, r7, #2
    33b4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    33b6:	230c      	movs	r3, #12
    33b8:	18fb      	adds	r3, r7, r3
    33ba:	2200      	movs	r2, #0
    33bc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    33be:	230c      	movs	r3, #12
    33c0:	18fb      	adds	r3, r7, r3
    33c2:	687a      	ldr	r2, [r7, #4]
    33c4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    33c6:	230c      	movs	r3, #12
    33c8:	18fb      	adds	r3, r7, r3
    33ca:	1cba      	adds	r2, r7, #2
    33cc:	8812      	ldrh	r2, [r2, #0]
    33ce:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    33d0:	230c      	movs	r3, #12
    33d2:	18fb      	adds	r3, r7, r3
    33d4:	0019      	movs	r1, r3
    33d6:	2003      	movs	r0, #3
    33d8:	4b03      	ldr	r3, [pc, #12]	; (33e8 <nmi_spi_read+0x40>)
    33da:	4798      	blx	r3
    33dc:	0003      	movs	r3, r0
}
    33de:	0018      	movs	r0, r3
    33e0:	46bd      	mov	sp, r7
    33e2:	b006      	add	sp, #24
    33e4:	bd80      	pop	{r7, pc}
    33e6:	46c0      	nop			; (mov r8, r8)
    33e8:	00000ba1 	.word	0x00000ba1

000033ec <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    33ec:	b580      	push	{r7, lr}
    33ee:	b086      	sub	sp, #24
    33f0:	af00      	add	r7, sp, #0
    33f2:	6078      	str	r0, [r7, #4]
    33f4:	000a      	movs	r2, r1
    33f6:	1cbb      	adds	r3, r7, #2
    33f8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    33fa:	230c      	movs	r3, #12
    33fc:	18fb      	adds	r3, r7, r3
    33fe:	687a      	ldr	r2, [r7, #4]
    3400:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    3402:	230c      	movs	r3, #12
    3404:	18fb      	adds	r3, r7, r3
    3406:	2200      	movs	r2, #0
    3408:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    340a:	230c      	movs	r3, #12
    340c:	18fb      	adds	r3, r7, r3
    340e:	1cba      	adds	r2, r7, #2
    3410:	8812      	ldrh	r2, [r2, #0]
    3412:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3414:	230c      	movs	r3, #12
    3416:	18fb      	adds	r3, r7, r3
    3418:	0019      	movs	r1, r3
    341a:	2003      	movs	r0, #3
    341c:	4b03      	ldr	r3, [pc, #12]	; (342c <nmi_spi_write+0x40>)
    341e:	4798      	blx	r3
    3420:	0003      	movs	r3, r0
}
    3422:	0018      	movs	r0, r3
    3424:	46bd      	mov	sp, r7
    3426:	b006      	add	sp, #24
    3428:	bd80      	pop	{r7, pc}
    342a:	46c0      	nop			; (mov r8, r8)
    342c:	00000ba1 	.word	0x00000ba1

00003430 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    3430:	b580      	push	{r7, lr}
    3432:	b082      	sub	sp, #8
    3434:	af00      	add	r7, sp, #0
    3436:	0002      	movs	r2, r0
    3438:	1dfb      	adds	r3, r7, #7
    343a:	701a      	strb	r2, [r3, #0]
    343c:	1dbb      	adds	r3, r7, #6
    343e:	1c0a      	adds	r2, r1, #0
    3440:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    3442:	1dfb      	adds	r3, r7, #7
    3444:	781b      	ldrb	r3, [r3, #0]
    3446:	005a      	lsls	r2, r3, #1
    3448:	1dbb      	adds	r3, r7, #6
    344a:	781b      	ldrb	r3, [r3, #0]
    344c:	4053      	eors	r3, r2
    344e:	4a03      	ldr	r2, [pc, #12]	; (345c <crc7_byte+0x2c>)
    3450:	5cd3      	ldrb	r3, [r2, r3]
}
    3452:	0018      	movs	r0, r3
    3454:	46bd      	mov	sp, r7
    3456:	b002      	add	sp, #8
    3458:	bd80      	pop	{r7, pc}
    345a:	46c0      	nop			; (mov r8, r8)
    345c:	0000e0e4 	.word	0x0000e0e4

00003460 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    3460:	b590      	push	{r4, r7, lr}
    3462:	b085      	sub	sp, #20
    3464:	af00      	add	r7, sp, #0
    3466:	60b9      	str	r1, [r7, #8]
    3468:	607a      	str	r2, [r7, #4]
    346a:	230f      	movs	r3, #15
    346c:	18fb      	adds	r3, r7, r3
    346e:	1c02      	adds	r2, r0, #0
    3470:	701a      	strb	r2, [r3, #0]
	while (len--)
    3472:	e00e      	b.n	3492 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    3474:	68bb      	ldr	r3, [r7, #8]
    3476:	1c5a      	adds	r2, r3, #1
    3478:	60ba      	str	r2, [r7, #8]
    347a:	781a      	ldrb	r2, [r3, #0]
    347c:	230f      	movs	r3, #15
    347e:	18fc      	adds	r4, r7, r3
    3480:	230f      	movs	r3, #15
    3482:	18fb      	adds	r3, r7, r3
    3484:	781b      	ldrb	r3, [r3, #0]
    3486:	0011      	movs	r1, r2
    3488:	0018      	movs	r0, r3
    348a:	4b08      	ldr	r3, [pc, #32]	; (34ac <crc7+0x4c>)
    348c:	4798      	blx	r3
    348e:	0003      	movs	r3, r0
    3490:	7023      	strb	r3, [r4, #0]
	while (len--)
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	1e5a      	subs	r2, r3, #1
    3496:	607a      	str	r2, [r7, #4]
    3498:	2b00      	cmp	r3, #0
    349a:	d1eb      	bne.n	3474 <crc7+0x14>
	return crc;
    349c:	230f      	movs	r3, #15
    349e:	18fb      	adds	r3, r7, r3
    34a0:	781b      	ldrb	r3, [r3, #0]
}
    34a2:	0018      	movs	r0, r3
    34a4:	46bd      	mov	sp, r7
    34a6:	b005      	add	sp, #20
    34a8:	bd90      	pop	{r4, r7, pc}
    34aa:	46c0      	nop			; (mov r8, r8)
    34ac:	00003431 	.word	0x00003431

000034b0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    34b0:	b590      	push	{r4, r7, lr}
    34b2:	b089      	sub	sp, #36	; 0x24
    34b4:	af00      	add	r7, sp, #0
    34b6:	60b9      	str	r1, [r7, #8]
    34b8:	607a      	str	r2, [r7, #4]
    34ba:	603b      	str	r3, [r7, #0]
    34bc:	230f      	movs	r3, #15
    34be:	18fb      	adds	r3, r7, r3
    34c0:	1c02      	adds	r2, r0, #0
    34c2:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    34c4:	231f      	movs	r3, #31
    34c6:	18fb      	adds	r3, r7, r3
    34c8:	2205      	movs	r2, #5
    34ca:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    34cc:	231e      	movs	r3, #30
    34ce:	18fb      	adds	r3, r7, r3
    34d0:	2201      	movs	r2, #1
    34d2:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    34d4:	2314      	movs	r3, #20
    34d6:	18fb      	adds	r3, r7, r3
    34d8:	220f      	movs	r2, #15
    34da:	18ba      	adds	r2, r7, r2
    34dc:	7812      	ldrb	r2, [r2, #0]
    34de:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    34e0:	230f      	movs	r3, #15
    34e2:	18fb      	adds	r3, r7, r3
    34e4:	781b      	ldrb	r3, [r3, #0]
    34e6:	3bc1      	subs	r3, #193	; 0xc1
    34e8:	2b0e      	cmp	r3, #14
    34ea:	d900      	bls.n	34ee <spi_cmd+0x3e>
    34ec:	e11b      	b.n	3726 <spi_cmd+0x276>
    34ee:	009a      	lsls	r2, r3, #2
    34f0:	4bb6      	ldr	r3, [pc, #728]	; (37cc <spi_cmd+0x31c>)
    34f2:	18d3      	adds	r3, r2, r3
    34f4:	681b      	ldr	r3, [r3, #0]
    34f6:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    34f8:	68bb      	ldr	r3, [r7, #8]
    34fa:	0c1b      	lsrs	r3, r3, #16
    34fc:	b2da      	uxtb	r2, r3
    34fe:	2314      	movs	r3, #20
    3500:	18fb      	adds	r3, r7, r3
    3502:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3504:	68bb      	ldr	r3, [r7, #8]
    3506:	0a1b      	lsrs	r3, r3, #8
    3508:	b2da      	uxtb	r2, r3
    350a:	2314      	movs	r3, #20
    350c:	18fb      	adds	r3, r7, r3
    350e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3510:	68bb      	ldr	r3, [r7, #8]
    3512:	b2da      	uxtb	r2, r3
    3514:	2314      	movs	r3, #20
    3516:	18fb      	adds	r3, r7, r3
    3518:	70da      	strb	r2, [r3, #3]
		len = 5;
    351a:	231f      	movs	r3, #31
    351c:	18fb      	adds	r3, r7, r3
    351e:	2205      	movs	r2, #5
    3520:	701a      	strb	r2, [r3, #0]
		break;
    3522:	e105      	b.n	3730 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    3524:	68bb      	ldr	r3, [r7, #8]
    3526:	0a1b      	lsrs	r3, r3, #8
    3528:	b2da      	uxtb	r2, r3
    352a:	2314      	movs	r3, #20
    352c:	18fb      	adds	r3, r7, r3
    352e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    3530:	2330      	movs	r3, #48	; 0x30
    3532:	18fb      	adds	r3, r7, r3
    3534:	781b      	ldrb	r3, [r3, #0]
    3536:	2b00      	cmp	r3, #0
    3538:	d009      	beq.n	354e <spi_cmd+0x9e>
    353a:	2314      	movs	r3, #20
    353c:	18fb      	adds	r3, r7, r3
    353e:	785b      	ldrb	r3, [r3, #1]
    3540:	2280      	movs	r2, #128	; 0x80
    3542:	4252      	negs	r2, r2
    3544:	4313      	orrs	r3, r2
    3546:	b2da      	uxtb	r2, r3
    3548:	2314      	movs	r3, #20
    354a:	18fb      	adds	r3, r7, r3
    354c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    354e:	68bb      	ldr	r3, [r7, #8]
    3550:	b2da      	uxtb	r2, r3
    3552:	2314      	movs	r3, #20
    3554:	18fb      	adds	r3, r7, r3
    3556:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3558:	2314      	movs	r3, #20
    355a:	18fb      	adds	r3, r7, r3
    355c:	2200      	movs	r2, #0
    355e:	70da      	strb	r2, [r3, #3]
		len = 5;
    3560:	231f      	movs	r3, #31
    3562:	18fb      	adds	r3, r7, r3
    3564:	2205      	movs	r2, #5
    3566:	701a      	strb	r2, [r3, #0]
		break;
    3568:	e0e2      	b.n	3730 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    356a:	2314      	movs	r3, #20
    356c:	18fb      	adds	r3, r7, r3
    356e:	2200      	movs	r2, #0
    3570:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    3572:	2314      	movs	r3, #20
    3574:	18fb      	adds	r3, r7, r3
    3576:	2200      	movs	r2, #0
    3578:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    357a:	2314      	movs	r3, #20
    357c:	18fb      	adds	r3, r7, r3
    357e:	2200      	movs	r2, #0
    3580:	70da      	strb	r2, [r3, #3]
		len = 5;
    3582:	231f      	movs	r3, #31
    3584:	18fb      	adds	r3, r7, r3
    3586:	2205      	movs	r2, #5
    3588:	701a      	strb	r2, [r3, #0]
		break;
    358a:	e0d1      	b.n	3730 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    358c:	2314      	movs	r3, #20
    358e:	18fb      	adds	r3, r7, r3
    3590:	2200      	movs	r2, #0
    3592:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    3594:	2314      	movs	r3, #20
    3596:	18fb      	adds	r3, r7, r3
    3598:	2200      	movs	r2, #0
    359a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    359c:	2314      	movs	r3, #20
    359e:	18fb      	adds	r3, r7, r3
    35a0:	2200      	movs	r2, #0
    35a2:	70da      	strb	r2, [r3, #3]
		len = 5;
    35a4:	231f      	movs	r3, #31
    35a6:	18fb      	adds	r3, r7, r3
    35a8:	2205      	movs	r2, #5
    35aa:	701a      	strb	r2, [r3, #0]
		break;
    35ac:	e0c0      	b.n	3730 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    35ae:	2314      	movs	r3, #20
    35b0:	18fb      	adds	r3, r7, r3
    35b2:	22ff      	movs	r2, #255	; 0xff
    35b4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    35b6:	2314      	movs	r3, #20
    35b8:	18fb      	adds	r3, r7, r3
    35ba:	22ff      	movs	r2, #255	; 0xff
    35bc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    35be:	2314      	movs	r3, #20
    35c0:	18fb      	adds	r3, r7, r3
    35c2:	22ff      	movs	r2, #255	; 0xff
    35c4:	70da      	strb	r2, [r3, #3]
		len = 5;
    35c6:	231f      	movs	r3, #31
    35c8:	18fb      	adds	r3, r7, r3
    35ca:	2205      	movs	r2, #5
    35cc:	701a      	strb	r2, [r3, #0]
		break;
    35ce:	e0af      	b.n	3730 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    35d0:	68bb      	ldr	r3, [r7, #8]
    35d2:	0c1b      	lsrs	r3, r3, #16
    35d4:	b2da      	uxtb	r2, r3
    35d6:	2314      	movs	r3, #20
    35d8:	18fb      	adds	r3, r7, r3
    35da:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    35dc:	68bb      	ldr	r3, [r7, #8]
    35de:	0a1b      	lsrs	r3, r3, #8
    35e0:	b2da      	uxtb	r2, r3
    35e2:	2314      	movs	r3, #20
    35e4:	18fb      	adds	r3, r7, r3
    35e6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    35e8:	68bb      	ldr	r3, [r7, #8]
    35ea:	b2da      	uxtb	r2, r3
    35ec:	2314      	movs	r3, #20
    35ee:	18fb      	adds	r3, r7, r3
    35f0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    35f2:	683b      	ldr	r3, [r7, #0]
    35f4:	0a1b      	lsrs	r3, r3, #8
    35f6:	b2da      	uxtb	r2, r3
    35f8:	2314      	movs	r3, #20
    35fa:	18fb      	adds	r3, r7, r3
    35fc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    35fe:	683b      	ldr	r3, [r7, #0]
    3600:	b2da      	uxtb	r2, r3
    3602:	2314      	movs	r3, #20
    3604:	18fb      	adds	r3, r7, r3
    3606:	715a      	strb	r2, [r3, #5]
		len = 7;
    3608:	231f      	movs	r3, #31
    360a:	18fb      	adds	r3, r7, r3
    360c:	2207      	movs	r2, #7
    360e:	701a      	strb	r2, [r3, #0]
		break;
    3610:	e08e      	b.n	3730 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    3612:	68bb      	ldr	r3, [r7, #8]
    3614:	0c1b      	lsrs	r3, r3, #16
    3616:	b2da      	uxtb	r2, r3
    3618:	2314      	movs	r3, #20
    361a:	18fb      	adds	r3, r7, r3
    361c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    361e:	68bb      	ldr	r3, [r7, #8]
    3620:	0a1b      	lsrs	r3, r3, #8
    3622:	b2da      	uxtb	r2, r3
    3624:	2314      	movs	r3, #20
    3626:	18fb      	adds	r3, r7, r3
    3628:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    362a:	68bb      	ldr	r3, [r7, #8]
    362c:	b2da      	uxtb	r2, r3
    362e:	2314      	movs	r3, #20
    3630:	18fb      	adds	r3, r7, r3
    3632:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    3634:	683b      	ldr	r3, [r7, #0]
    3636:	0c1b      	lsrs	r3, r3, #16
    3638:	b2da      	uxtb	r2, r3
    363a:	2314      	movs	r3, #20
    363c:	18fb      	adds	r3, r7, r3
    363e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    3640:	683b      	ldr	r3, [r7, #0]
    3642:	0a1b      	lsrs	r3, r3, #8
    3644:	b2da      	uxtb	r2, r3
    3646:	2314      	movs	r3, #20
    3648:	18fb      	adds	r3, r7, r3
    364a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    364c:	683b      	ldr	r3, [r7, #0]
    364e:	b2da      	uxtb	r2, r3
    3650:	2314      	movs	r3, #20
    3652:	18fb      	adds	r3, r7, r3
    3654:	719a      	strb	r2, [r3, #6]
		len = 8;
    3656:	231f      	movs	r3, #31
    3658:	18fb      	adds	r3, r7, r3
    365a:	2208      	movs	r2, #8
    365c:	701a      	strb	r2, [r3, #0]
		break;
    365e:	e067      	b.n	3730 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    3660:	68bb      	ldr	r3, [r7, #8]
    3662:	0a1b      	lsrs	r3, r3, #8
    3664:	b2da      	uxtb	r2, r3
    3666:	2314      	movs	r3, #20
    3668:	18fb      	adds	r3, r7, r3
    366a:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    366c:	2330      	movs	r3, #48	; 0x30
    366e:	18fb      	adds	r3, r7, r3
    3670:	781b      	ldrb	r3, [r3, #0]
    3672:	2b00      	cmp	r3, #0
    3674:	d009      	beq.n	368a <spi_cmd+0x1da>
    3676:	2314      	movs	r3, #20
    3678:	18fb      	adds	r3, r7, r3
    367a:	785b      	ldrb	r3, [r3, #1]
    367c:	2280      	movs	r2, #128	; 0x80
    367e:	4252      	negs	r2, r2
    3680:	4313      	orrs	r3, r2
    3682:	b2da      	uxtb	r2, r3
    3684:	2314      	movs	r3, #20
    3686:	18fb      	adds	r3, r7, r3
    3688:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    368a:	68bb      	ldr	r3, [r7, #8]
    368c:	b2da      	uxtb	r2, r3
    368e:	2314      	movs	r3, #20
    3690:	18fb      	adds	r3, r7, r3
    3692:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    3694:	687b      	ldr	r3, [r7, #4]
    3696:	0e1b      	lsrs	r3, r3, #24
    3698:	b2da      	uxtb	r2, r3
    369a:	2314      	movs	r3, #20
    369c:	18fb      	adds	r3, r7, r3
    369e:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    36a0:	687b      	ldr	r3, [r7, #4]
    36a2:	0c1b      	lsrs	r3, r3, #16
    36a4:	b2da      	uxtb	r2, r3
    36a6:	2314      	movs	r3, #20
    36a8:	18fb      	adds	r3, r7, r3
    36aa:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    36ac:	687b      	ldr	r3, [r7, #4]
    36ae:	0a1b      	lsrs	r3, r3, #8
    36b0:	b2da      	uxtb	r2, r3
    36b2:	2314      	movs	r3, #20
    36b4:	18fb      	adds	r3, r7, r3
    36b6:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    36b8:	687b      	ldr	r3, [r7, #4]
    36ba:	b2da      	uxtb	r2, r3
    36bc:	2314      	movs	r3, #20
    36be:	18fb      	adds	r3, r7, r3
    36c0:	719a      	strb	r2, [r3, #6]
		len = 8;
    36c2:	231f      	movs	r3, #31
    36c4:	18fb      	adds	r3, r7, r3
    36c6:	2208      	movs	r2, #8
    36c8:	701a      	strb	r2, [r3, #0]
		break;
    36ca:	e031      	b.n	3730 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    36cc:	68bb      	ldr	r3, [r7, #8]
    36ce:	0c1b      	lsrs	r3, r3, #16
    36d0:	b2da      	uxtb	r2, r3
    36d2:	2314      	movs	r3, #20
    36d4:	18fb      	adds	r3, r7, r3
    36d6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    36d8:	68bb      	ldr	r3, [r7, #8]
    36da:	0a1b      	lsrs	r3, r3, #8
    36dc:	b2da      	uxtb	r2, r3
    36de:	2314      	movs	r3, #20
    36e0:	18fb      	adds	r3, r7, r3
    36e2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    36e4:	68bb      	ldr	r3, [r7, #8]
    36e6:	b2da      	uxtb	r2, r3
    36e8:	2314      	movs	r3, #20
    36ea:	18fb      	adds	r3, r7, r3
    36ec:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    36ee:	687b      	ldr	r3, [r7, #4]
    36f0:	0e1b      	lsrs	r3, r3, #24
    36f2:	b2da      	uxtb	r2, r3
    36f4:	2314      	movs	r3, #20
    36f6:	18fb      	adds	r3, r7, r3
    36f8:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    36fa:	687b      	ldr	r3, [r7, #4]
    36fc:	0c1b      	lsrs	r3, r3, #16
    36fe:	b2da      	uxtb	r2, r3
    3700:	2314      	movs	r3, #20
    3702:	18fb      	adds	r3, r7, r3
    3704:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    3706:	687b      	ldr	r3, [r7, #4]
    3708:	0a1b      	lsrs	r3, r3, #8
    370a:	b2da      	uxtb	r2, r3
    370c:	2314      	movs	r3, #20
    370e:	18fb      	adds	r3, r7, r3
    3710:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    3712:	687b      	ldr	r3, [r7, #4]
    3714:	b2da      	uxtb	r2, r3
    3716:	2314      	movs	r3, #20
    3718:	18fb      	adds	r3, r7, r3
    371a:	71da      	strb	r2, [r3, #7]
		len = 9;
    371c:	231f      	movs	r3, #31
    371e:	18fb      	adds	r3, r7, r3
    3720:	2209      	movs	r2, #9
    3722:	701a      	strb	r2, [r3, #0]
		break;
    3724:	e004      	b.n	3730 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    3726:	231e      	movs	r3, #30
    3728:	18fb      	adds	r3, r7, r3
    372a:	2200      	movs	r2, #0
    372c:	701a      	strb	r2, [r3, #0]
		break;
    372e:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    3730:	231e      	movs	r3, #30
    3732:	18fb      	adds	r3, r7, r3
    3734:	781b      	ldrb	r3, [r3, #0]
    3736:	b25b      	sxtb	r3, r3
    3738:	2b00      	cmp	r3, #0
    373a:	d03f      	beq.n	37bc <spi_cmd+0x30c>
		if (!gu8Crc_off)
    373c:	4b24      	ldr	r3, [pc, #144]	; (37d0 <spi_cmd+0x320>)
    373e:	781b      	ldrb	r3, [r3, #0]
    3740:	2b00      	cmp	r3, #0
    3742:	d115      	bne.n	3770 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    3744:	231f      	movs	r3, #31
    3746:	18fb      	adds	r3, r7, r3
    3748:	781b      	ldrb	r3, [r3, #0]
    374a:	1e5c      	subs	r4, r3, #1
    374c:	231f      	movs	r3, #31
    374e:	18fb      	adds	r3, r7, r3
    3750:	781b      	ldrb	r3, [r3, #0]
    3752:	3b01      	subs	r3, #1
    3754:	001a      	movs	r2, r3
    3756:	2314      	movs	r3, #20
    3758:	18fb      	adds	r3, r7, r3
    375a:	0019      	movs	r1, r3
    375c:	207f      	movs	r0, #127	; 0x7f
    375e:	4b1d      	ldr	r3, [pc, #116]	; (37d4 <spi_cmd+0x324>)
    3760:	4798      	blx	r3
    3762:	0003      	movs	r3, r0
    3764:	18db      	adds	r3, r3, r3
    3766:	b2da      	uxtb	r2, r3
    3768:	2314      	movs	r3, #20
    376a:	18fb      	adds	r3, r7, r3
    376c:	551a      	strb	r2, [r3, r4]
    376e:	e006      	b.n	377e <spi_cmd+0x2ce>
		else
			len-=1;
    3770:	231f      	movs	r3, #31
    3772:	18fb      	adds	r3, r7, r3
    3774:	221f      	movs	r2, #31
    3776:	18ba      	adds	r2, r7, r2
    3778:	7812      	ldrb	r2, [r2, #0]
    377a:	3a01      	subs	r2, #1
    377c:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    377e:	231f      	movs	r3, #31
    3780:	18fb      	adds	r3, r7, r3
    3782:	781b      	ldrb	r3, [r3, #0]
    3784:	b29a      	uxth	r2, r3
    3786:	2314      	movs	r3, #20
    3788:	18fb      	adds	r3, r7, r3
    378a:	0011      	movs	r1, r2
    378c:	0018      	movs	r0, r3
    378e:	4b12      	ldr	r3, [pc, #72]	; (37d8 <spi_cmd+0x328>)
    3790:	4798      	blx	r3
    3792:	1e03      	subs	r3, r0, #0
    3794:	d012      	beq.n	37bc <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    3796:	2328      	movs	r3, #40	; 0x28
    3798:	33ff      	adds	r3, #255	; 0xff
    379a:	001a      	movs	r2, r3
    379c:	490f      	ldr	r1, [pc, #60]	; (37dc <spi_cmd+0x32c>)
    379e:	4b10      	ldr	r3, [pc, #64]	; (37e0 <spi_cmd+0x330>)
    37a0:	0018      	movs	r0, r3
    37a2:	4b10      	ldr	r3, [pc, #64]	; (37e4 <spi_cmd+0x334>)
    37a4:	4798      	blx	r3
    37a6:	4b10      	ldr	r3, [pc, #64]	; (37e8 <spi_cmd+0x338>)
    37a8:	0018      	movs	r0, r3
    37aa:	4b10      	ldr	r3, [pc, #64]	; (37ec <spi_cmd+0x33c>)
    37ac:	4798      	blx	r3
    37ae:	200d      	movs	r0, #13
    37b0:	4b0f      	ldr	r3, [pc, #60]	; (37f0 <spi_cmd+0x340>)
    37b2:	4798      	blx	r3
			result = N_FAIL;
    37b4:	231e      	movs	r3, #30
    37b6:	18fb      	adds	r3, r7, r3
    37b8:	2200      	movs	r2, #0
    37ba:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    37bc:	231e      	movs	r3, #30
    37be:	18fb      	adds	r3, r7, r3
    37c0:	781b      	ldrb	r3, [r3, #0]
    37c2:	b25b      	sxtb	r3, r3
}
    37c4:	0018      	movs	r0, r3
    37c6:	46bd      	mov	sp, r7
    37c8:	b009      	add	sp, #36	; 0x24
    37ca:	bd90      	pop	{r4, r7, pc}
    37cc:	0000e73c 	.word	0x0000e73c
    37d0:	200000b0 	.word	0x200000b0
    37d4:	00003461 	.word	0x00003461
    37d8:	000033ed 	.word	0x000033ed
    37dc:	0000e778 	.word	0x0000e778
    37e0:	0000e1e4 	.word	0x0000e1e4
    37e4:	0000c455 	.word	0x0000c455
    37e8:	0000e1f8 	.word	0x0000e1f8
    37ec:	0000c571 	.word	0x0000c571
    37f0:	0000c489 	.word	0x0000c489

000037f4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    37f4:	b590      	push	{r4, r7, lr}
    37f6:	b085      	sub	sp, #20
    37f8:	af00      	add	r7, sp, #0
    37fa:	0002      	movs	r2, r0
    37fc:	1dfb      	adds	r3, r7, #7
    37fe:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    3800:	230e      	movs	r3, #14
    3802:	18fb      	adds	r3, r7, r3
    3804:	2201      	movs	r2, #1
    3806:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    3808:	4b31      	ldr	r3, [pc, #196]	; (38d0 <spi_data_rsp+0xdc>)
    380a:	781b      	ldrb	r3, [r3, #0]
    380c:	2b00      	cmp	r3, #0
    380e:	d104      	bne.n	381a <spi_data_rsp+0x26>
		len = 2;
    3810:	230f      	movs	r3, #15
    3812:	18fb      	adds	r3, r7, r3
    3814:	2202      	movs	r2, #2
    3816:	701a      	strb	r2, [r3, #0]
    3818:	e003      	b.n	3822 <spi_data_rsp+0x2e>
	else
		len = 3;
    381a:	230f      	movs	r3, #15
    381c:	18fb      	adds	r3, r7, r3
    381e:	2203      	movs	r2, #3
    3820:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3822:	230f      	movs	r3, #15
    3824:	18fb      	adds	r3, r7, r3
    3826:	781b      	ldrb	r3, [r3, #0]
    3828:	b29a      	uxth	r2, r3
    382a:	2308      	movs	r3, #8
    382c:	18fb      	adds	r3, r7, r3
    382e:	0011      	movs	r1, r2
    3830:	0018      	movs	r0, r3
    3832:	4b28      	ldr	r3, [pc, #160]	; (38d4 <spi_data_rsp+0xe0>)
    3834:	4798      	blx	r3
    3836:	1e03      	subs	r3, r0, #0
    3838:	d013      	beq.n	3862 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    383a:	233c      	movs	r3, #60	; 0x3c
    383c:	33ff      	adds	r3, #255	; 0xff
    383e:	001a      	movs	r2, r3
    3840:	4925      	ldr	r1, [pc, #148]	; (38d8 <spi_data_rsp+0xe4>)
    3842:	4b26      	ldr	r3, [pc, #152]	; (38dc <spi_data_rsp+0xe8>)
    3844:	0018      	movs	r0, r3
    3846:	4b26      	ldr	r3, [pc, #152]	; (38e0 <spi_data_rsp+0xec>)
    3848:	4798      	blx	r3
    384a:	4b26      	ldr	r3, [pc, #152]	; (38e4 <spi_data_rsp+0xf0>)
    384c:	0018      	movs	r0, r3
    384e:	4b26      	ldr	r3, [pc, #152]	; (38e8 <spi_data_rsp+0xf4>)
    3850:	4798      	blx	r3
    3852:	200d      	movs	r0, #13
    3854:	4b25      	ldr	r3, [pc, #148]	; (38ec <spi_data_rsp+0xf8>)
    3856:	4798      	blx	r3
		result = N_FAIL;
    3858:	230e      	movs	r3, #14
    385a:	18fb      	adds	r3, r7, r3
    385c:	2200      	movs	r2, #0
    385e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    3860:	e02e      	b.n	38c0 <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    3862:	230f      	movs	r3, #15
    3864:	18fb      	adds	r3, r7, r3
    3866:	781b      	ldrb	r3, [r3, #0]
    3868:	3b01      	subs	r3, #1
    386a:	2208      	movs	r2, #8
    386c:	18ba      	adds	r2, r7, r2
    386e:	5cd3      	ldrb	r3, [r2, r3]
    3870:	2b00      	cmp	r3, #0
    3872:	d108      	bne.n	3886 <spi_data_rsp+0x92>
    3874:	230f      	movs	r3, #15
    3876:	18fb      	adds	r3, r7, r3
    3878:	781b      	ldrb	r3, [r3, #0]
    387a:	3b02      	subs	r3, #2
    387c:	2208      	movs	r2, #8
    387e:	18ba      	adds	r2, r7, r2
    3880:	5cd3      	ldrb	r3, [r2, r3]
    3882:	2bc3      	cmp	r3, #195	; 0xc3
    3884:	d01c      	beq.n	38c0 <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    3886:	23a1      	movs	r3, #161	; 0xa1
    3888:	005a      	lsls	r2, r3, #1
    388a:	4913      	ldr	r1, [pc, #76]	; (38d8 <spi_data_rsp+0xe4>)
    388c:	4b13      	ldr	r3, [pc, #76]	; (38dc <spi_data_rsp+0xe8>)
    388e:	0018      	movs	r0, r3
    3890:	4b13      	ldr	r3, [pc, #76]	; (38e0 <spi_data_rsp+0xec>)
    3892:	4798      	blx	r3
    3894:	2308      	movs	r3, #8
    3896:	18fb      	adds	r3, r7, r3
    3898:	781b      	ldrb	r3, [r3, #0]
    389a:	0019      	movs	r1, r3
    389c:	2308      	movs	r3, #8
    389e:	18fb      	adds	r3, r7, r3
    38a0:	785b      	ldrb	r3, [r3, #1]
    38a2:	001a      	movs	r2, r3
    38a4:	2308      	movs	r3, #8
    38a6:	18fb      	adds	r3, r7, r3
    38a8:	789b      	ldrb	r3, [r3, #2]
    38aa:	4811      	ldr	r0, [pc, #68]	; (38f0 <spi_data_rsp+0xfc>)
    38ac:	4c0c      	ldr	r4, [pc, #48]	; (38e0 <spi_data_rsp+0xec>)
    38ae:	47a0      	blx	r4
    38b0:	200d      	movs	r0, #13
    38b2:	4b0e      	ldr	r3, [pc, #56]	; (38ec <spi_data_rsp+0xf8>)
    38b4:	4798      	blx	r3
		result = N_FAIL;
    38b6:	230e      	movs	r3, #14
    38b8:	18fb      	adds	r3, r7, r3
    38ba:	2200      	movs	r2, #0
    38bc:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    38be:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    38c0:	230e      	movs	r3, #14
    38c2:	18fb      	adds	r3, r7, r3
    38c4:	781b      	ldrb	r3, [r3, #0]
    38c6:	b25b      	sxtb	r3, r3
}
    38c8:	0018      	movs	r0, r3
    38ca:	46bd      	mov	sp, r7
    38cc:	b005      	add	sp, #20
    38ce:	bd90      	pop	{r4, r7, pc}
    38d0:	200000b0 	.word	0x200000b0
    38d4:	000033a9 	.word	0x000033a9
    38d8:	0000e780 	.word	0x0000e780
    38dc:	0000e1e4 	.word	0x0000e1e4
    38e0:	0000c455 	.word	0x0000c455
    38e4:	0000e224 	.word	0x0000e224
    38e8:	0000c571 	.word	0x0000c571
    38ec:	0000c489 	.word	0x0000c489
    38f0:	0000e244 	.word	0x0000e244

000038f4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    38f4:	b580      	push	{r7, lr}
    38f6:	b084      	sub	sp, #16
    38f8:	af00      	add	r7, sp, #0
    38fa:	0002      	movs	r2, r0
    38fc:	1dfb      	adds	r3, r7, #7
    38fe:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    3900:	230f      	movs	r3, #15
    3902:	18fb      	adds	r3, r7, r3
    3904:	2201      	movs	r2, #1
    3906:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    3908:	1dfb      	adds	r3, r7, #7
    390a:	781b      	ldrb	r3, [r3, #0]
    390c:	2bcf      	cmp	r3, #207	; 0xcf
    390e:	d007      	beq.n	3920 <spi_cmd_rsp+0x2c>
    3910:	1dfb      	adds	r3, r7, #7
    3912:	781b      	ldrb	r3, [r3, #0]
    3914:	2bc5      	cmp	r3, #197	; 0xc5
    3916:	d003      	beq.n	3920 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    3918:	1dfb      	adds	r3, r7, #7
    391a:	781b      	ldrb	r3, [r3, #0]
    391c:	2bc6      	cmp	r3, #198	; 0xc6
    391e:	d10c      	bne.n	393a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3920:	230d      	movs	r3, #13
    3922:	18fb      	adds	r3, r7, r3
    3924:	2101      	movs	r1, #1
    3926:	0018      	movs	r0, r3
    3928:	4b39      	ldr	r3, [pc, #228]	; (3a10 <spi_cmd_rsp+0x11c>)
    392a:	4798      	blx	r3
    392c:	1e03      	subs	r3, r0, #0
    392e:	d004      	beq.n	393a <spi_cmd_rsp+0x46>
			result = N_FAIL;
    3930:	230f      	movs	r3, #15
    3932:	18fb      	adds	r3, r7, r3
    3934:	2200      	movs	r2, #0
    3936:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3938:	e061      	b.n	39fe <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    393a:	230e      	movs	r3, #14
    393c:	18fb      	adds	r3, r7, r3
    393e:	220a      	movs	r2, #10
    3940:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3942:	230d      	movs	r3, #13
    3944:	18fb      	adds	r3, r7, r3
    3946:	2101      	movs	r1, #1
    3948:	0018      	movs	r0, r3
    394a:	4b31      	ldr	r3, [pc, #196]	; (3a10 <spi_cmd_rsp+0x11c>)
    394c:	4798      	blx	r3
    394e:	1e03      	subs	r3, r0, #0
    3950:	d012      	beq.n	3978 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3952:	23b1      	movs	r3, #177	; 0xb1
    3954:	005a      	lsls	r2, r3, #1
    3956:	492f      	ldr	r1, [pc, #188]	; (3a14 <spi_cmd_rsp+0x120>)
    3958:	4b2f      	ldr	r3, [pc, #188]	; (3a18 <spi_cmd_rsp+0x124>)
    395a:	0018      	movs	r0, r3
    395c:	4b2f      	ldr	r3, [pc, #188]	; (3a1c <spi_cmd_rsp+0x128>)
    395e:	4798      	blx	r3
    3960:	4b2f      	ldr	r3, [pc, #188]	; (3a20 <spi_cmd_rsp+0x12c>)
    3962:	0018      	movs	r0, r3
    3964:	4b2f      	ldr	r3, [pc, #188]	; (3a24 <spi_cmd_rsp+0x130>)
    3966:	4798      	blx	r3
    3968:	200d      	movs	r0, #13
    396a:	4b2f      	ldr	r3, [pc, #188]	; (3a28 <spi_cmd_rsp+0x134>)
    396c:	4798      	blx	r3
			result = N_FAIL;
    396e:	230f      	movs	r3, #15
    3970:	18fb      	adds	r3, r7, r3
    3972:	2200      	movs	r2, #0
    3974:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3976:	e042      	b.n	39fe <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    3978:	230d      	movs	r3, #13
    397a:	18fb      	adds	r3, r7, r3
    397c:	781b      	ldrb	r3, [r3, #0]
    397e:	1dfa      	adds	r2, r7, #7
    3980:	7812      	ldrb	r2, [r2, #0]
    3982:	429a      	cmp	r2, r3
    3984:	d00b      	beq.n	399e <spi_cmd_rsp+0xaa>
    3986:	230e      	movs	r3, #14
    3988:	18fb      	adds	r3, r7, r3
    398a:	781b      	ldrb	r3, [r3, #0]
    398c:	b25b      	sxtb	r3, r3
    398e:	b2da      	uxtb	r2, r3
    3990:	3a01      	subs	r2, #1
    3992:	b2d1      	uxtb	r1, r2
    3994:	220e      	movs	r2, #14
    3996:	18ba      	adds	r2, r7, r2
    3998:	7011      	strb	r1, [r2, #0]
    399a:	2b00      	cmp	r3, #0
    399c:	dcd1      	bgt.n	3942 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    399e:	230e      	movs	r3, #14
    39a0:	18fb      	adds	r3, r7, r3
    39a2:	220a      	movs	r2, #10
    39a4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    39a6:	230d      	movs	r3, #13
    39a8:	18fb      	adds	r3, r7, r3
    39aa:	2101      	movs	r1, #1
    39ac:	0018      	movs	r0, r3
    39ae:	4b18      	ldr	r3, [pc, #96]	; (3a10 <spi_cmd_rsp+0x11c>)
    39b0:	4798      	blx	r3
    39b2:	1e03      	subs	r3, r0, #0
    39b4:	d012      	beq.n	39dc <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    39b6:	23b8      	movs	r3, #184	; 0xb8
    39b8:	005a      	lsls	r2, r3, #1
    39ba:	4916      	ldr	r1, [pc, #88]	; (3a14 <spi_cmd_rsp+0x120>)
    39bc:	4b16      	ldr	r3, [pc, #88]	; (3a18 <spi_cmd_rsp+0x124>)
    39be:	0018      	movs	r0, r3
    39c0:	4b16      	ldr	r3, [pc, #88]	; (3a1c <spi_cmd_rsp+0x128>)
    39c2:	4798      	blx	r3
    39c4:	4b16      	ldr	r3, [pc, #88]	; (3a20 <spi_cmd_rsp+0x12c>)
    39c6:	0018      	movs	r0, r3
    39c8:	4b16      	ldr	r3, [pc, #88]	; (3a24 <spi_cmd_rsp+0x130>)
    39ca:	4798      	blx	r3
    39cc:	200d      	movs	r0, #13
    39ce:	4b16      	ldr	r3, [pc, #88]	; (3a28 <spi_cmd_rsp+0x134>)
    39d0:	4798      	blx	r3
			result = N_FAIL;
    39d2:	230f      	movs	r3, #15
    39d4:	18fb      	adds	r3, r7, r3
    39d6:	2200      	movs	r2, #0
    39d8:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    39da:	e010      	b.n	39fe <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    39dc:	230d      	movs	r3, #13
    39de:	18fb      	adds	r3, r7, r3
    39e0:	781b      	ldrb	r3, [r3, #0]
    39e2:	2b00      	cmp	r3, #0
    39e4:	d00b      	beq.n	39fe <spi_cmd_rsp+0x10a>
    39e6:	230e      	movs	r3, #14
    39e8:	18fb      	adds	r3, r7, r3
    39ea:	781b      	ldrb	r3, [r3, #0]
    39ec:	b25b      	sxtb	r3, r3
    39ee:	b2da      	uxtb	r2, r3
    39f0:	3a01      	subs	r2, #1
    39f2:	b2d1      	uxtb	r1, r2
    39f4:	220e      	movs	r2, #14
    39f6:	18ba      	adds	r2, r7, r2
    39f8:	7011      	strb	r1, [r2, #0]
    39fa:	2b00      	cmp	r3, #0
    39fc:	dcd3      	bgt.n	39a6 <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    39fe:	230f      	movs	r3, #15
    3a00:	18fb      	adds	r3, r7, r3
    3a02:	781b      	ldrb	r3, [r3, #0]
    3a04:	b25b      	sxtb	r3, r3
}
    3a06:	0018      	movs	r0, r3
    3a08:	46bd      	mov	sp, r7
    3a0a:	b004      	add	sp, #16
    3a0c:	bd80      	pop	{r7, pc}
    3a0e:	46c0      	nop			; (mov r8, r8)
    3a10:	000033a9 	.word	0x000033a9
    3a14:	0000e790 	.word	0x0000e790
    3a18:	0000e1e4 	.word	0x0000e1e4
    3a1c:	0000c455 	.word	0x0000c455
    3a20:	0000e274 	.word	0x0000e274
    3a24:	0000c571 	.word	0x0000c571
    3a28:	0000c489 	.word	0x0000c489

00003a2c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    3a2c:	b580      	push	{r7, lr}
    3a2e:	b086      	sub	sp, #24
    3a30:	af00      	add	r7, sp, #0
    3a32:	6078      	str	r0, [r7, #4]
    3a34:	0008      	movs	r0, r1
    3a36:	0011      	movs	r1, r2
    3a38:	1cbb      	adds	r3, r7, #2
    3a3a:	1c02      	adds	r2, r0, #0
    3a3c:	801a      	strh	r2, [r3, #0]
    3a3e:	1c7b      	adds	r3, r7, #1
    3a40:	1c0a      	adds	r2, r1, #0
    3a42:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    3a44:	2311      	movs	r3, #17
    3a46:	18fb      	adds	r3, r7, r3
    3a48:	2201      	movs	r2, #1
    3a4a:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3a4c:	2314      	movs	r3, #20
    3a4e:	18fb      	adds	r3, r7, r3
    3a50:	2200      	movs	r2, #0
    3a52:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3a54:	1cbb      	adds	r3, r7, #2
    3a56:	881a      	ldrh	r2, [r3, #0]
    3a58:	2380      	movs	r3, #128	; 0x80
    3a5a:	019b      	lsls	r3, r3, #6
    3a5c:	429a      	cmp	r2, r3
    3a5e:	d805      	bhi.n	3a6c <spi_data_read+0x40>
			nbytes = sz;
    3a60:	2312      	movs	r3, #18
    3a62:	18fb      	adds	r3, r7, r3
    3a64:	1cba      	adds	r2, r7, #2
    3a66:	8812      	ldrh	r2, [r2, #0]
    3a68:	801a      	strh	r2, [r3, #0]
    3a6a:	e004      	b.n	3a76 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    3a6c:	2312      	movs	r3, #18
    3a6e:	18fb      	adds	r3, r7, r3
    3a70:	2280      	movs	r2, #128	; 0x80
    3a72:	0192      	lsls	r2, r2, #6
    3a74:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    3a76:	2316      	movs	r3, #22
    3a78:	18fb      	adds	r3, r7, r3
    3a7a:	220a      	movs	r2, #10
    3a7c:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3a7e:	230b      	movs	r3, #11
    3a80:	18fb      	adds	r3, r7, r3
    3a82:	2101      	movs	r1, #1
    3a84:	0018      	movs	r0, r3
    3a86:	4b5c      	ldr	r3, [pc, #368]	; (3bf8 <spi_data_read+0x1cc>)
    3a88:	4798      	blx	r3
    3a8a:	1e03      	subs	r3, r0, #0
    3a8c:	d011      	beq.n	3ab2 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    3a8e:	4a5b      	ldr	r2, [pc, #364]	; (3bfc <spi_data_read+0x1d0>)
    3a90:	495b      	ldr	r1, [pc, #364]	; (3c00 <spi_data_read+0x1d4>)
    3a92:	4b5c      	ldr	r3, [pc, #368]	; (3c04 <spi_data_read+0x1d8>)
    3a94:	0018      	movs	r0, r3
    3a96:	4b5c      	ldr	r3, [pc, #368]	; (3c08 <spi_data_read+0x1dc>)
    3a98:	4798      	blx	r3
    3a9a:	4b5c      	ldr	r3, [pc, #368]	; (3c0c <spi_data_read+0x1e0>)
    3a9c:	0018      	movs	r0, r3
    3a9e:	4b5c      	ldr	r3, [pc, #368]	; (3c10 <spi_data_read+0x1e4>)
    3aa0:	4798      	blx	r3
    3aa2:	200d      	movs	r0, #13
    3aa4:	4b5b      	ldr	r3, [pc, #364]	; (3c14 <spi_data_read+0x1e8>)
    3aa6:	4798      	blx	r3
				result = N_FAIL;
    3aa8:	2311      	movs	r3, #17
    3aaa:	18fb      	adds	r3, r7, r3
    3aac:	2200      	movs	r2, #0
    3aae:	701a      	strb	r2, [r3, #0]
				break;
    3ab0:	e017      	b.n	3ae2 <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    3ab2:	230b      	movs	r3, #11
    3ab4:	18fb      	adds	r3, r7, r3
    3ab6:	781b      	ldrb	r3, [r3, #0]
    3ab8:	091b      	lsrs	r3, r3, #4
    3aba:	b2db      	uxtb	r3, r3
    3abc:	001a      	movs	r2, r3
    3abe:	230f      	movs	r3, #15
    3ac0:	4013      	ands	r3, r2
    3ac2:	2b0f      	cmp	r3, #15
    3ac4:	d00c      	beq.n	3ae0 <spi_data_read+0xb4>
				break;
		} while (retry--);
    3ac6:	2316      	movs	r3, #22
    3ac8:	18fb      	adds	r3, r7, r3
    3aca:	2200      	movs	r2, #0
    3acc:	5e9b      	ldrsh	r3, [r3, r2]
    3ace:	b29a      	uxth	r2, r3
    3ad0:	3a01      	subs	r2, #1
    3ad2:	b291      	uxth	r1, r2
    3ad4:	2216      	movs	r2, #22
    3ad6:	18ba      	adds	r2, r7, r2
    3ad8:	8011      	strh	r1, [r2, #0]
    3ada:	2b00      	cmp	r3, #0
    3adc:	d1cf      	bne.n	3a7e <spi_data_read+0x52>
    3ade:	e000      	b.n	3ae2 <spi_data_read+0xb6>
				break;
    3ae0:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    3ae2:	2311      	movs	r3, #17
    3ae4:	18fb      	adds	r3, r7, r3
    3ae6:	781b      	ldrb	r3, [r3, #0]
    3ae8:	b25b      	sxtb	r3, r3
    3aea:	2b00      	cmp	r3, #0
    3aec:	d100      	bne.n	3af0 <spi_data_read+0xc4>
    3aee:	e079      	b.n	3be4 <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    3af0:	2316      	movs	r3, #22
    3af2:	18fb      	adds	r3, r7, r3
    3af4:	2200      	movs	r2, #0
    3af6:	5e9b      	ldrsh	r3, [r3, r2]
    3af8:	2b00      	cmp	r3, #0
    3afa:	dc16      	bgt.n	3b2a <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    3afc:	4a46      	ldr	r2, [pc, #280]	; (3c18 <spi_data_read+0x1ec>)
    3afe:	4940      	ldr	r1, [pc, #256]	; (3c00 <spi_data_read+0x1d4>)
    3b00:	4b40      	ldr	r3, [pc, #256]	; (3c04 <spi_data_read+0x1d8>)
    3b02:	0018      	movs	r0, r3
    3b04:	4b40      	ldr	r3, [pc, #256]	; (3c08 <spi_data_read+0x1dc>)
    3b06:	4798      	blx	r3
    3b08:	230b      	movs	r3, #11
    3b0a:	18fb      	adds	r3, r7, r3
    3b0c:	781b      	ldrb	r3, [r3, #0]
    3b0e:	001a      	movs	r2, r3
    3b10:	4b42      	ldr	r3, [pc, #264]	; (3c1c <spi_data_read+0x1f0>)
    3b12:	0011      	movs	r1, r2
    3b14:	0018      	movs	r0, r3
    3b16:	4b3c      	ldr	r3, [pc, #240]	; (3c08 <spi_data_read+0x1dc>)
    3b18:	4798      	blx	r3
    3b1a:	200d      	movs	r0, #13
    3b1c:	4b3d      	ldr	r3, [pc, #244]	; (3c14 <spi_data_read+0x1e8>)
    3b1e:	4798      	blx	r3
			result = N_FAIL;
    3b20:	2311      	movs	r3, #17
    3b22:	18fb      	adds	r3, r7, r3
    3b24:	2200      	movs	r2, #0
    3b26:	701a      	strb	r2, [r3, #0]
			break;
    3b28:	e05d      	b.n	3be6 <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    3b2a:	2314      	movs	r3, #20
    3b2c:	18fb      	adds	r3, r7, r3
    3b2e:	2200      	movs	r2, #0
    3b30:	5e9b      	ldrsh	r3, [r3, r2]
    3b32:	687a      	ldr	r2, [r7, #4]
    3b34:	18d2      	adds	r2, r2, r3
    3b36:	2312      	movs	r3, #18
    3b38:	18fb      	adds	r3, r7, r3
    3b3a:	881b      	ldrh	r3, [r3, #0]
    3b3c:	0019      	movs	r1, r3
    3b3e:	0010      	movs	r0, r2
    3b40:	4b2d      	ldr	r3, [pc, #180]	; (3bf8 <spi_data_read+0x1cc>)
    3b42:	4798      	blx	r3
    3b44:	1e03      	subs	r3, r0, #0
    3b46:	d012      	beq.n	3b6e <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3b48:	23c5      	movs	r3, #197	; 0xc5
    3b4a:	009a      	lsls	r2, r3, #2
    3b4c:	492c      	ldr	r1, [pc, #176]	; (3c00 <spi_data_read+0x1d4>)
    3b4e:	4b2d      	ldr	r3, [pc, #180]	; (3c04 <spi_data_read+0x1d8>)
    3b50:	0018      	movs	r0, r3
    3b52:	4b2d      	ldr	r3, [pc, #180]	; (3c08 <spi_data_read+0x1dc>)
    3b54:	4798      	blx	r3
    3b56:	4b32      	ldr	r3, [pc, #200]	; (3c20 <spi_data_read+0x1f4>)
    3b58:	0018      	movs	r0, r3
    3b5a:	4b2d      	ldr	r3, [pc, #180]	; (3c10 <spi_data_read+0x1e4>)
    3b5c:	4798      	blx	r3
    3b5e:	200d      	movs	r0, #13
    3b60:	4b2c      	ldr	r3, [pc, #176]	; (3c14 <spi_data_read+0x1e8>)
    3b62:	4798      	blx	r3
			result = N_FAIL;
    3b64:	2311      	movs	r3, #17
    3b66:	18fb      	adds	r3, r7, r3
    3b68:	2200      	movs	r2, #0
    3b6a:	701a      	strb	r2, [r3, #0]
			break;
    3b6c:	e03b      	b.n	3be6 <spi_data_read+0x1ba>
		}
		if(!clockless)
    3b6e:	1c7b      	adds	r3, r7, #1
    3b70:	781b      	ldrb	r3, [r3, #0]
    3b72:	2b00      	cmp	r3, #0
    3b74:	d11d      	bne.n	3bb2 <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    3b76:	4b2b      	ldr	r3, [pc, #172]	; (3c24 <spi_data_read+0x1f8>)
    3b78:	781b      	ldrb	r3, [r3, #0]
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d119      	bne.n	3bb2 <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3b7e:	230c      	movs	r3, #12
    3b80:	18fb      	adds	r3, r7, r3
    3b82:	2102      	movs	r1, #2
    3b84:	0018      	movs	r0, r3
    3b86:	4b1c      	ldr	r3, [pc, #112]	; (3bf8 <spi_data_read+0x1cc>)
    3b88:	4798      	blx	r3
    3b8a:	1e03      	subs	r3, r0, #0
    3b8c:	d011      	beq.n	3bb2 <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    3b8e:	4a26      	ldr	r2, [pc, #152]	; (3c28 <spi_data_read+0x1fc>)
    3b90:	491b      	ldr	r1, [pc, #108]	; (3c00 <spi_data_read+0x1d4>)
    3b92:	4b1c      	ldr	r3, [pc, #112]	; (3c04 <spi_data_read+0x1d8>)
    3b94:	0018      	movs	r0, r3
    3b96:	4b1c      	ldr	r3, [pc, #112]	; (3c08 <spi_data_read+0x1dc>)
    3b98:	4798      	blx	r3
    3b9a:	4b24      	ldr	r3, [pc, #144]	; (3c2c <spi_data_read+0x200>)
    3b9c:	0018      	movs	r0, r3
    3b9e:	4b1c      	ldr	r3, [pc, #112]	; (3c10 <spi_data_read+0x1e4>)
    3ba0:	4798      	blx	r3
    3ba2:	200d      	movs	r0, #13
    3ba4:	4b1b      	ldr	r3, [pc, #108]	; (3c14 <spi_data_read+0x1e8>)
    3ba6:	4798      	blx	r3
					result = N_FAIL;
    3ba8:	2311      	movs	r3, #17
    3baa:	18fb      	adds	r3, r7, r3
    3bac:	2200      	movs	r2, #0
    3bae:	701a      	strb	r2, [r3, #0]
					break;
    3bb0:	e019      	b.n	3be6 <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    3bb2:	2314      	movs	r3, #20
    3bb4:	18fb      	adds	r3, r7, r3
    3bb6:	881a      	ldrh	r2, [r3, #0]
    3bb8:	2312      	movs	r3, #18
    3bba:	18fb      	adds	r3, r7, r3
    3bbc:	881b      	ldrh	r3, [r3, #0]
    3bbe:	18d3      	adds	r3, r2, r3
    3bc0:	b29a      	uxth	r2, r3
    3bc2:	2314      	movs	r3, #20
    3bc4:	18fb      	adds	r3, r7, r3
    3bc6:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3bc8:	2312      	movs	r3, #18
    3bca:	18fb      	adds	r3, r7, r3
    3bcc:	881a      	ldrh	r2, [r3, #0]
    3bce:	1cbb      	adds	r3, r7, #2
    3bd0:	1cb9      	adds	r1, r7, #2
    3bd2:	8809      	ldrh	r1, [r1, #0]
    3bd4:	1a8a      	subs	r2, r1, r2
    3bd6:	801a      	strh	r2, [r3, #0]

	} while (sz);
    3bd8:	1cbb      	adds	r3, r7, #2
    3bda:	881b      	ldrh	r3, [r3, #0]
    3bdc:	2b00      	cmp	r3, #0
    3bde:	d000      	beq.n	3be2 <spi_data_read+0x1b6>
    3be0:	e738      	b.n	3a54 <spi_data_read+0x28>
    3be2:	e000      	b.n	3be6 <spi_data_read+0x1ba>
			break;
    3be4:	46c0      	nop			; (mov r8, r8)

	return result;
    3be6:	2311      	movs	r3, #17
    3be8:	18fb      	adds	r3, r7, r3
    3bea:	781b      	ldrb	r3, [r3, #0]
    3bec:	b25b      	sxtb	r3, r3
}
    3bee:	0018      	movs	r0, r3
    3bf0:	46bd      	mov	sp, r7
    3bf2:	b006      	add	sp, #24
    3bf4:	bd80      	pop	{r7, pc}
    3bf6:	46c0      	nop			; (mov r8, r8)
    3bf8:	000033a9 	.word	0x000033a9
    3bfc:	000002ff 	.word	0x000002ff
    3c00:	0000e79c 	.word	0x0000e79c
    3c04:	0000e1e4 	.word	0x0000e1e4
    3c08:	0000c455 	.word	0x0000c455
    3c0c:	0000e2a8 	.word	0x0000e2a8
    3c10:	0000c571 	.word	0x0000c571
    3c14:	0000c489 	.word	0x0000c489
    3c18:	0000030b 	.word	0x0000030b
    3c1c:	0000e2dc 	.word	0x0000e2dc
    3c20:	0000e30c 	.word	0x0000e30c
    3c24:	200000b0 	.word	0x200000b0
    3c28:	0000031f 	.word	0x0000031f
    3c2c:	0000e33c 	.word	0x0000e33c

00003c30 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    3c30:	b580      	push	{r7, lr}
    3c32:	b086      	sub	sp, #24
    3c34:	af00      	add	r7, sp, #0
    3c36:	6078      	str	r0, [r7, #4]
    3c38:	000a      	movs	r2, r1
    3c3a:	1cbb      	adds	r3, r7, #2
    3c3c:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    3c3e:	2313      	movs	r3, #19
    3c40:	18fb      	adds	r3, r7, r3
    3c42:	2201      	movs	r2, #1
    3c44:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    3c46:	230c      	movs	r3, #12
    3c48:	18fb      	adds	r3, r7, r3
    3c4a:	2200      	movs	r2, #0
    3c4c:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3c4e:	2316      	movs	r3, #22
    3c50:	18fb      	adds	r3, r7, r3
    3c52:	2200      	movs	r2, #0
    3c54:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3c56:	1cbb      	adds	r3, r7, #2
    3c58:	881a      	ldrh	r2, [r3, #0]
    3c5a:	2380      	movs	r3, #128	; 0x80
    3c5c:	019b      	lsls	r3, r3, #6
    3c5e:	429a      	cmp	r2, r3
    3c60:	d805      	bhi.n	3c6e <spi_data_write+0x3e>
			nbytes = sz;
    3c62:	2314      	movs	r3, #20
    3c64:	18fb      	adds	r3, r7, r3
    3c66:	1cba      	adds	r2, r7, #2
    3c68:	8812      	ldrh	r2, [r2, #0]
    3c6a:	801a      	strh	r2, [r3, #0]
    3c6c:	e004      	b.n	3c78 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    3c6e:	2314      	movs	r3, #20
    3c70:	18fb      	adds	r3, r7, r3
    3c72:	2280      	movs	r2, #128	; 0x80
    3c74:	0192      	lsls	r2, r2, #6
    3c76:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    3c78:	2311      	movs	r3, #17
    3c7a:	18fb      	adds	r3, r7, r3
    3c7c:	22f0      	movs	r2, #240	; 0xf0
    3c7e:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    3c80:	2316      	movs	r3, #22
    3c82:	18fb      	adds	r3, r7, r3
    3c84:	2200      	movs	r2, #0
    3c86:	5e9b      	ldrsh	r3, [r3, r2]
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d10f      	bne.n	3cac <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    3c8c:	1cbb      	adds	r3, r7, #2
    3c8e:	881a      	ldrh	r2, [r3, #0]
    3c90:	2380      	movs	r3, #128	; 0x80
    3c92:	019b      	lsls	r3, r3, #6
    3c94:	429a      	cmp	r2, r3
    3c96:	d804      	bhi.n	3ca2 <spi_data_write+0x72>
				order = 0x3;
    3c98:	2312      	movs	r3, #18
    3c9a:	18fb      	adds	r3, r7, r3
    3c9c:	2203      	movs	r2, #3
    3c9e:	701a      	strb	r2, [r3, #0]
    3ca0:	e013      	b.n	3cca <spi_data_write+0x9a>
			else
				order = 0x1;
    3ca2:	2312      	movs	r3, #18
    3ca4:	18fb      	adds	r3, r7, r3
    3ca6:	2201      	movs	r2, #1
    3ca8:	701a      	strb	r2, [r3, #0]
    3caa:	e00e      	b.n	3cca <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    3cac:	1cbb      	adds	r3, r7, #2
    3cae:	881a      	ldrh	r2, [r3, #0]
    3cb0:	2380      	movs	r3, #128	; 0x80
    3cb2:	019b      	lsls	r3, r3, #6
    3cb4:	429a      	cmp	r2, r3
    3cb6:	d804      	bhi.n	3cc2 <spi_data_write+0x92>
				order = 0x3;
    3cb8:	2312      	movs	r3, #18
    3cba:	18fb      	adds	r3, r7, r3
    3cbc:	2203      	movs	r2, #3
    3cbe:	701a      	strb	r2, [r3, #0]
    3cc0:	e003      	b.n	3cca <spi_data_write+0x9a>
			else
				order = 0x2;
    3cc2:	2312      	movs	r3, #18
    3cc4:	18fb      	adds	r3, r7, r3
    3cc6:	2202      	movs	r2, #2
    3cc8:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    3cca:	2311      	movs	r3, #17
    3ccc:	18fb      	adds	r3, r7, r3
    3cce:	781a      	ldrb	r2, [r3, #0]
    3cd0:	2312      	movs	r3, #18
    3cd2:	18fb      	adds	r3, r7, r3
    3cd4:	781b      	ldrb	r3, [r3, #0]
    3cd6:	4313      	orrs	r3, r2
    3cd8:	b2da      	uxtb	r2, r3
    3cda:	2311      	movs	r3, #17
    3cdc:	18fb      	adds	r3, r7, r3
    3cde:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3ce0:	2311      	movs	r3, #17
    3ce2:	18fb      	adds	r3, r7, r3
    3ce4:	2101      	movs	r1, #1
    3ce6:	0018      	movs	r0, r3
    3ce8:	4b3a      	ldr	r3, [pc, #232]	; (3dd4 <spi_data_write+0x1a4>)
    3cea:	4798      	blx	r3
    3cec:	1e03      	subs	r3, r0, #0
    3cee:	d012      	beq.n	3d16 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    3cf0:	23d4      	movs	r3, #212	; 0xd4
    3cf2:	009a      	lsls	r2, r3, #2
    3cf4:	4938      	ldr	r1, [pc, #224]	; (3dd8 <spi_data_write+0x1a8>)
    3cf6:	4b39      	ldr	r3, [pc, #228]	; (3ddc <spi_data_write+0x1ac>)
    3cf8:	0018      	movs	r0, r3
    3cfa:	4b39      	ldr	r3, [pc, #228]	; (3de0 <spi_data_write+0x1b0>)
    3cfc:	4798      	blx	r3
    3cfe:	4b39      	ldr	r3, [pc, #228]	; (3de4 <spi_data_write+0x1b4>)
    3d00:	0018      	movs	r0, r3
    3d02:	4b39      	ldr	r3, [pc, #228]	; (3de8 <spi_data_write+0x1b8>)
    3d04:	4798      	blx	r3
    3d06:	200d      	movs	r0, #13
    3d08:	4b38      	ldr	r3, [pc, #224]	; (3dec <spi_data_write+0x1bc>)
    3d0a:	4798      	blx	r3
			result = N_FAIL;
    3d0c:	2313      	movs	r3, #19
    3d0e:	18fb      	adds	r3, r7, r3
    3d10:	2200      	movs	r2, #0
    3d12:	701a      	strb	r2, [r3, #0]
			break;
    3d14:	e056      	b.n	3dc4 <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    3d16:	2316      	movs	r3, #22
    3d18:	18fb      	adds	r3, r7, r3
    3d1a:	2200      	movs	r2, #0
    3d1c:	5e9b      	ldrsh	r3, [r3, r2]
    3d1e:	687a      	ldr	r2, [r7, #4]
    3d20:	18d2      	adds	r2, r2, r3
    3d22:	2314      	movs	r3, #20
    3d24:	18fb      	adds	r3, r7, r3
    3d26:	881b      	ldrh	r3, [r3, #0]
    3d28:	0019      	movs	r1, r3
    3d2a:	0010      	movs	r0, r2
    3d2c:	4b29      	ldr	r3, [pc, #164]	; (3dd4 <spi_data_write+0x1a4>)
    3d2e:	4798      	blx	r3
    3d30:	1e03      	subs	r3, r0, #0
    3d32:	d011      	beq.n	3d58 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    3d34:	4a2e      	ldr	r2, [pc, #184]	; (3df0 <spi_data_write+0x1c0>)
    3d36:	4928      	ldr	r1, [pc, #160]	; (3dd8 <spi_data_write+0x1a8>)
    3d38:	4b28      	ldr	r3, [pc, #160]	; (3ddc <spi_data_write+0x1ac>)
    3d3a:	0018      	movs	r0, r3
    3d3c:	4b28      	ldr	r3, [pc, #160]	; (3de0 <spi_data_write+0x1b0>)
    3d3e:	4798      	blx	r3
    3d40:	4b2c      	ldr	r3, [pc, #176]	; (3df4 <spi_data_write+0x1c4>)
    3d42:	0018      	movs	r0, r3
    3d44:	4b28      	ldr	r3, [pc, #160]	; (3de8 <spi_data_write+0x1b8>)
    3d46:	4798      	blx	r3
    3d48:	200d      	movs	r0, #13
    3d4a:	4b28      	ldr	r3, [pc, #160]	; (3dec <spi_data_write+0x1bc>)
    3d4c:	4798      	blx	r3
			result = N_FAIL;
    3d4e:	2313      	movs	r3, #19
    3d50:	18fb      	adds	r3, r7, r3
    3d52:	2200      	movs	r2, #0
    3d54:	701a      	strb	r2, [r3, #0]
			break;
    3d56:	e035      	b.n	3dc4 <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    3d58:	4b27      	ldr	r3, [pc, #156]	; (3df8 <spi_data_write+0x1c8>)
    3d5a:	781b      	ldrb	r3, [r3, #0]
    3d5c:	2b00      	cmp	r3, #0
    3d5e:	d119      	bne.n	3d94 <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    3d60:	230c      	movs	r3, #12
    3d62:	18fb      	adds	r3, r7, r3
    3d64:	2102      	movs	r1, #2
    3d66:	0018      	movs	r0, r3
    3d68:	4b1a      	ldr	r3, [pc, #104]	; (3dd4 <spi_data_write+0x1a4>)
    3d6a:	4798      	blx	r3
    3d6c:	1e03      	subs	r3, r0, #0
    3d6e:	d011      	beq.n	3d94 <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    3d70:	4a22      	ldr	r2, [pc, #136]	; (3dfc <spi_data_write+0x1cc>)
    3d72:	4919      	ldr	r1, [pc, #100]	; (3dd8 <spi_data_write+0x1a8>)
    3d74:	4b19      	ldr	r3, [pc, #100]	; (3ddc <spi_data_write+0x1ac>)
    3d76:	0018      	movs	r0, r3
    3d78:	4b19      	ldr	r3, [pc, #100]	; (3de0 <spi_data_write+0x1b0>)
    3d7a:	4798      	blx	r3
    3d7c:	4b20      	ldr	r3, [pc, #128]	; (3e00 <spi_data_write+0x1d0>)
    3d7e:	0018      	movs	r0, r3
    3d80:	4b19      	ldr	r3, [pc, #100]	; (3de8 <spi_data_write+0x1b8>)
    3d82:	4798      	blx	r3
    3d84:	200d      	movs	r0, #13
    3d86:	4b19      	ldr	r3, [pc, #100]	; (3dec <spi_data_write+0x1bc>)
    3d88:	4798      	blx	r3
				result = N_FAIL;
    3d8a:	2313      	movs	r3, #19
    3d8c:	18fb      	adds	r3, r7, r3
    3d8e:	2200      	movs	r2, #0
    3d90:	701a      	strb	r2, [r3, #0]
				break;
    3d92:	e017      	b.n	3dc4 <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    3d94:	2316      	movs	r3, #22
    3d96:	18fb      	adds	r3, r7, r3
    3d98:	881a      	ldrh	r2, [r3, #0]
    3d9a:	2314      	movs	r3, #20
    3d9c:	18fb      	adds	r3, r7, r3
    3d9e:	881b      	ldrh	r3, [r3, #0]
    3da0:	18d3      	adds	r3, r2, r3
    3da2:	b29a      	uxth	r2, r3
    3da4:	2316      	movs	r3, #22
    3da6:	18fb      	adds	r3, r7, r3
    3da8:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3daa:	1cbb      	adds	r3, r7, #2
    3dac:	1cb9      	adds	r1, r7, #2
    3dae:	2214      	movs	r2, #20
    3db0:	18ba      	adds	r2, r7, r2
    3db2:	8809      	ldrh	r1, [r1, #0]
    3db4:	8812      	ldrh	r2, [r2, #0]
    3db6:	1a8a      	subs	r2, r1, r2
    3db8:	801a      	strh	r2, [r3, #0]
	} while (sz);
    3dba:	1cbb      	adds	r3, r7, #2
    3dbc:	881b      	ldrh	r3, [r3, #0]
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d000      	beq.n	3dc4 <spi_data_write+0x194>
    3dc2:	e748      	b.n	3c56 <spi_data_write+0x26>


	return result;
    3dc4:	2313      	movs	r3, #19
    3dc6:	18fb      	adds	r3, r7, r3
    3dc8:	781b      	ldrb	r3, [r3, #0]
    3dca:	b25b      	sxtb	r3, r3
}
    3dcc:	0018      	movs	r0, r3
    3dce:	46bd      	mov	sp, r7
    3dd0:	b006      	add	sp, #24
    3dd2:	bd80      	pop	{r7, pc}
    3dd4:	000033ed 	.word	0x000033ed
    3dd8:	0000e7ac 	.word	0x0000e7ac
    3ddc:	0000e1e4 	.word	0x0000e1e4
    3de0:	0000c455 	.word	0x0000c455
    3de4:	0000e370 	.word	0x0000e370
    3de8:	0000c571 	.word	0x0000c571
    3dec:	0000c489 	.word	0x0000c489
    3df0:	00000359 	.word	0x00000359
    3df4:	0000e3a8 	.word	0x0000e3a8
    3df8:	200000b0 	.word	0x200000b0
    3dfc:	00000363 	.word	0x00000363
    3e00:	0000e3dc 	.word	0x0000e3dc

00003e04 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    3e04:	b5b0      	push	{r4, r5, r7, lr}
    3e06:	b086      	sub	sp, #24
    3e08:	af02      	add	r7, sp, #8
    3e0a:	6078      	str	r0, [r7, #4]
    3e0c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    3e0e:	230f      	movs	r3, #15
    3e10:	18fb      	adds	r3, r7, r3
    3e12:	220a      	movs	r2, #10
    3e14:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    3e16:	230e      	movs	r3, #14
    3e18:	18fb      	adds	r3, r7, r3
    3e1a:	2201      	movs	r2, #1
    3e1c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    3e1e:	230d      	movs	r3, #13
    3e20:	18fb      	adds	r3, r7, r3
    3e22:	22c9      	movs	r2, #201	; 0xc9
    3e24:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    3e26:	230c      	movs	r3, #12
    3e28:	18fb      	adds	r3, r7, r3
    3e2a:	2200      	movs	r2, #0
    3e2c:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    3e2e:	687b      	ldr	r3, [r7, #4]
    3e30:	2b30      	cmp	r3, #48	; 0x30
    3e32:	d808      	bhi.n	3e46 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    3e34:	230d      	movs	r3, #13
    3e36:	18fb      	adds	r3, r7, r3
    3e38:	22c3      	movs	r2, #195	; 0xc3
    3e3a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    3e3c:	230c      	movs	r3, #12
    3e3e:	18fb      	adds	r3, r7, r3
    3e40:	2201      	movs	r2, #1
    3e42:	701a      	strb	r2, [r3, #0]
    3e44:	e007      	b.n	3e56 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    3e46:	230d      	movs	r3, #13
    3e48:	18fb      	adds	r3, r7, r3
    3e4a:	22c9      	movs	r2, #201	; 0xc9
    3e4c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    3e4e:	230c      	movs	r3, #12
    3e50:	18fb      	adds	r3, r7, r3
    3e52:	2200      	movs	r2, #0
    3e54:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3e56:	230e      	movs	r3, #14
    3e58:	18fc      	adds	r4, r7, r3
    3e5a:	683a      	ldr	r2, [r7, #0]
    3e5c:	6879      	ldr	r1, [r7, #4]
    3e5e:	230d      	movs	r3, #13
    3e60:	18fb      	adds	r3, r7, r3
    3e62:	7818      	ldrb	r0, [r3, #0]
    3e64:	230c      	movs	r3, #12
    3e66:	18fb      	adds	r3, r7, r3
    3e68:	781b      	ldrb	r3, [r3, #0]
    3e6a:	9300      	str	r3, [sp, #0]
    3e6c:	2304      	movs	r3, #4
    3e6e:	4d3c      	ldr	r5, [pc, #240]	; (3f60 <spi_write_reg+0x15c>)
    3e70:	47a8      	blx	r5
    3e72:	0003      	movs	r3, r0
    3e74:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3e76:	230e      	movs	r3, #14
    3e78:	18fb      	adds	r3, r7, r3
    3e7a:	781b      	ldrb	r3, [r3, #0]
    3e7c:	b25b      	sxtb	r3, r3
    3e7e:	2b01      	cmp	r3, #1
    3e80:	d00f      	beq.n	3ea2 <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    3e82:	4a38      	ldr	r2, [pc, #224]	; (3f64 <spi_write_reg+0x160>)
    3e84:	4938      	ldr	r1, [pc, #224]	; (3f68 <spi_write_reg+0x164>)
    3e86:	4b39      	ldr	r3, [pc, #228]	; (3f6c <spi_write_reg+0x168>)
    3e88:	0018      	movs	r0, r3
    3e8a:	4b39      	ldr	r3, [pc, #228]	; (3f70 <spi_write_reg+0x16c>)
    3e8c:	4798      	blx	r3
    3e8e:	687a      	ldr	r2, [r7, #4]
    3e90:	4b38      	ldr	r3, [pc, #224]	; (3f74 <spi_write_reg+0x170>)
    3e92:	0011      	movs	r1, r2
    3e94:	0018      	movs	r0, r3
    3e96:	4b36      	ldr	r3, [pc, #216]	; (3f70 <spi_write_reg+0x16c>)
    3e98:	4798      	blx	r3
    3e9a:	200d      	movs	r0, #13
    3e9c:	4b36      	ldr	r3, [pc, #216]	; (3f78 <spi_write_reg+0x174>)
    3e9e:	4798      	blx	r3
		goto _FAIL_;
    3ea0:	e020      	b.n	3ee4 <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    3ea2:	230e      	movs	r3, #14
    3ea4:	18fc      	adds	r4, r7, r3
    3ea6:	230d      	movs	r3, #13
    3ea8:	18fb      	adds	r3, r7, r3
    3eaa:	781b      	ldrb	r3, [r3, #0]
    3eac:	0018      	movs	r0, r3
    3eae:	4b33      	ldr	r3, [pc, #204]	; (3f7c <spi_write_reg+0x178>)
    3eb0:	4798      	blx	r3
    3eb2:	0003      	movs	r3, r0
    3eb4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3eb6:	230e      	movs	r3, #14
    3eb8:	18fb      	adds	r3, r7, r3
    3eba:	781b      	ldrb	r3, [r3, #0]
    3ebc:	b25b      	sxtb	r3, r3
    3ebe:	2b01      	cmp	r3, #1
    3ec0:	d010      	beq.n	3ee4 <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3ec2:	23e7      	movs	r3, #231	; 0xe7
    3ec4:	009a      	lsls	r2, r3, #2
    3ec6:	4928      	ldr	r1, [pc, #160]	; (3f68 <spi_write_reg+0x164>)
    3ec8:	4b28      	ldr	r3, [pc, #160]	; (3f6c <spi_write_reg+0x168>)
    3eca:	0018      	movs	r0, r3
    3ecc:	4b28      	ldr	r3, [pc, #160]	; (3f70 <spi_write_reg+0x16c>)
    3ece:	4798      	blx	r3
    3ed0:	687a      	ldr	r2, [r7, #4]
    3ed2:	4b2b      	ldr	r3, [pc, #172]	; (3f80 <spi_write_reg+0x17c>)
    3ed4:	0011      	movs	r1, r2
    3ed6:	0018      	movs	r0, r3
    3ed8:	4b25      	ldr	r3, [pc, #148]	; (3f70 <spi_write_reg+0x16c>)
    3eda:	4798      	blx	r3
    3edc:	200d      	movs	r0, #13
    3ede:	4b26      	ldr	r3, [pc, #152]	; (3f78 <spi_write_reg+0x174>)
    3ee0:	4798      	blx	r3
		goto _FAIL_;
    3ee2:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    3ee4:	230e      	movs	r3, #14
    3ee6:	18fb      	adds	r3, r7, r3
    3ee8:	781b      	ldrb	r3, [r3, #0]
    3eea:	b25b      	sxtb	r3, r3
    3eec:	2b01      	cmp	r3, #1
    3eee:	d02e      	beq.n	3f4e <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    3ef0:	2001      	movs	r0, #1
    3ef2:	4b24      	ldr	r3, [pc, #144]	; (3f84 <spi_write_reg+0x180>)
    3ef4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3ef6:	2300      	movs	r3, #0
    3ef8:	9300      	str	r3, [sp, #0]
    3efa:	2300      	movs	r3, #0
    3efc:	2200      	movs	r2, #0
    3efe:	2100      	movs	r1, #0
    3f00:	20cf      	movs	r0, #207	; 0xcf
    3f02:	4c17      	ldr	r4, [pc, #92]	; (3f60 <spi_write_reg+0x15c>)
    3f04:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    3f06:	20cf      	movs	r0, #207	; 0xcf
    3f08:	4b1c      	ldr	r3, [pc, #112]	; (3f7c <spi_write_reg+0x178>)
    3f0a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    3f0c:	4a1e      	ldr	r2, [pc, #120]	; (3f88 <spi_write_reg+0x184>)
    3f0e:	4916      	ldr	r1, [pc, #88]	; (3f68 <spi_write_reg+0x164>)
    3f10:	4b16      	ldr	r3, [pc, #88]	; (3f6c <spi_write_reg+0x168>)
    3f12:	0018      	movs	r0, r3
    3f14:	4b16      	ldr	r3, [pc, #88]	; (3f70 <spi_write_reg+0x16c>)
    3f16:	4798      	blx	r3
    3f18:	230f      	movs	r3, #15
    3f1a:	18fb      	adds	r3, r7, r3
    3f1c:	7819      	ldrb	r1, [r3, #0]
    3f1e:	683b      	ldr	r3, [r7, #0]
    3f20:	687a      	ldr	r2, [r7, #4]
    3f22:	481a      	ldr	r0, [pc, #104]	; (3f8c <spi_write_reg+0x188>)
    3f24:	4c12      	ldr	r4, [pc, #72]	; (3f70 <spi_write_reg+0x16c>)
    3f26:	47a0      	blx	r4
    3f28:	200d      	movs	r0, #13
    3f2a:	4b13      	ldr	r3, [pc, #76]	; (3f78 <spi_write_reg+0x174>)
    3f2c:	4798      	blx	r3
		nm_bsp_sleep(1);
    3f2e:	2001      	movs	r0, #1
    3f30:	4b14      	ldr	r3, [pc, #80]	; (3f84 <spi_write_reg+0x180>)
    3f32:	4798      	blx	r3
		retry--;
    3f34:	230f      	movs	r3, #15
    3f36:	18fb      	adds	r3, r7, r3
    3f38:	781a      	ldrb	r2, [r3, #0]
    3f3a:	230f      	movs	r3, #15
    3f3c:	18fb      	adds	r3, r7, r3
    3f3e:	3a01      	subs	r2, #1
    3f40:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    3f42:	230f      	movs	r3, #15
    3f44:	18fb      	adds	r3, r7, r3
    3f46:	781b      	ldrb	r3, [r3, #0]
    3f48:	2b00      	cmp	r3, #0
    3f4a:	d000      	beq.n	3f4e <spi_write_reg+0x14a>
    3f4c:	e76f      	b.n	3e2e <spi_write_reg+0x2a>
	}

	return result;
    3f4e:	230e      	movs	r3, #14
    3f50:	18fb      	adds	r3, r7, r3
    3f52:	781b      	ldrb	r3, [r3, #0]
    3f54:	b25b      	sxtb	r3, r3
}
    3f56:	0018      	movs	r0, r3
    3f58:	46bd      	mov	sp, r7
    3f5a:	b004      	add	sp, #16
    3f5c:	bdb0      	pop	{r4, r5, r7, pc}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	000034b1 	.word	0x000034b1
    3f64:	00000396 	.word	0x00000396
    3f68:	0000e7bc 	.word	0x0000e7bc
    3f6c:	0000e1e4 	.word	0x0000e1e4
    3f70:	0000c455 	.word	0x0000c455
    3f74:	0000e414 	.word	0x0000e414
    3f78:	0000c489 	.word	0x0000c489
    3f7c:	000038f5 	.word	0x000038f5
    3f80:	0000e440 	.word	0x0000e440
    3f84:	000003f1 	.word	0x000003f1
    3f88:	000003af 	.word	0x000003af
    3f8c:	0000e478 	.word	0x0000e478

00003f90 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    3f90:	b5b0      	push	{r4, r5, r7, lr}
    3f92:	b088      	sub	sp, #32
    3f94:	af02      	add	r7, sp, #8
    3f96:	60f8      	str	r0, [r7, #12]
    3f98:	60b9      	str	r1, [r7, #8]
    3f9a:	1dbb      	adds	r3, r7, #6
    3f9c:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    3f9e:	2316      	movs	r3, #22
    3fa0:	18fb      	adds	r3, r7, r3
    3fa2:	220a      	movs	r2, #10
    3fa4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    3fa6:	2315      	movs	r3, #21
    3fa8:	18fb      	adds	r3, r7, r3
    3faa:	22c7      	movs	r2, #199	; 0xc7
    3fac:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    3fae:	1dbb      	adds	r3, r7, #6
    3fb0:	881b      	ldrh	r3, [r3, #0]
    3fb2:	2b01      	cmp	r3, #1
    3fb4:	d102      	bne.n	3fbc <nm_spi_write+0x2c>
		size = 2;
    3fb6:	1dbb      	adds	r3, r7, #6
    3fb8:	2202      	movs	r2, #2
    3fba:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    3fbc:	1dbb      	adds	r3, r7, #6
    3fbe:	881a      	ldrh	r2, [r3, #0]
    3fc0:	2317      	movs	r3, #23
    3fc2:	18fc      	adds	r4, r7, r3
    3fc4:	68f9      	ldr	r1, [r7, #12]
    3fc6:	2315      	movs	r3, #21
    3fc8:	18fb      	adds	r3, r7, r3
    3fca:	7818      	ldrb	r0, [r3, #0]
    3fcc:	2300      	movs	r3, #0
    3fce:	9300      	str	r3, [sp, #0]
    3fd0:	0013      	movs	r3, r2
    3fd2:	2200      	movs	r2, #0
    3fd4:	4d5b      	ldr	r5, [pc, #364]	; (4144 <nm_spi_write+0x1b4>)
    3fd6:	47a8      	blx	r5
    3fd8:	0003      	movs	r3, r0
    3fda:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3fdc:	2317      	movs	r3, #23
    3fde:	18fb      	adds	r3, r7, r3
    3fe0:	781b      	ldrb	r3, [r3, #0]
    3fe2:	b25b      	sxtb	r3, r3
    3fe4:	2b01      	cmp	r3, #1
    3fe6:	d00f      	beq.n	4008 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3fe8:	4a57      	ldr	r2, [pc, #348]	; (4148 <nm_spi_write+0x1b8>)
    3fea:	4958      	ldr	r1, [pc, #352]	; (414c <nm_spi_write+0x1bc>)
    3fec:	4b58      	ldr	r3, [pc, #352]	; (4150 <nm_spi_write+0x1c0>)
    3fee:	0018      	movs	r0, r3
    3ff0:	4b58      	ldr	r3, [pc, #352]	; (4154 <nm_spi_write+0x1c4>)
    3ff2:	4798      	blx	r3
    3ff4:	68fa      	ldr	r2, [r7, #12]
    3ff6:	4b58      	ldr	r3, [pc, #352]	; (4158 <nm_spi_write+0x1c8>)
    3ff8:	0011      	movs	r1, r2
    3ffa:	0018      	movs	r0, r3
    3ffc:	4b55      	ldr	r3, [pc, #340]	; (4154 <nm_spi_write+0x1c4>)
    3ffe:	4798      	blx	r3
    4000:	200d      	movs	r0, #13
    4002:	4b56      	ldr	r3, [pc, #344]	; (415c <nm_spi_write+0x1cc>)
    4004:	4798      	blx	r3
		goto _FAIL_;
    4006:	e05f      	b.n	40c8 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    4008:	2317      	movs	r3, #23
    400a:	18fc      	adds	r4, r7, r3
    400c:	2315      	movs	r3, #21
    400e:	18fb      	adds	r3, r7, r3
    4010:	781b      	ldrb	r3, [r3, #0]
    4012:	0018      	movs	r0, r3
    4014:	4b52      	ldr	r3, [pc, #328]	; (4160 <nm_spi_write+0x1d0>)
    4016:	4798      	blx	r3
    4018:	0003      	movs	r3, r0
    401a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    401c:	2317      	movs	r3, #23
    401e:	18fb      	adds	r3, r7, r3
    4020:	781b      	ldrb	r3, [r3, #0]
    4022:	b25b      	sxtb	r3, r3
    4024:	2b01      	cmp	r3, #1
    4026:	d010      	beq.n	404a <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    4028:	23f4      	movs	r3, #244	; 0xf4
    402a:	009a      	lsls	r2, r3, #2
    402c:	4947      	ldr	r1, [pc, #284]	; (414c <nm_spi_write+0x1bc>)
    402e:	4b48      	ldr	r3, [pc, #288]	; (4150 <nm_spi_write+0x1c0>)
    4030:	0018      	movs	r0, r3
    4032:	4b48      	ldr	r3, [pc, #288]	; (4154 <nm_spi_write+0x1c4>)
    4034:	4798      	blx	r3
    4036:	68fa      	ldr	r2, [r7, #12]
    4038:	4b4a      	ldr	r3, [pc, #296]	; (4164 <nm_spi_write+0x1d4>)
    403a:	0011      	movs	r1, r2
    403c:	0018      	movs	r0, r3
    403e:	4b45      	ldr	r3, [pc, #276]	; (4154 <nm_spi_write+0x1c4>)
    4040:	4798      	blx	r3
    4042:	200d      	movs	r0, #13
    4044:	4b45      	ldr	r3, [pc, #276]	; (415c <nm_spi_write+0x1cc>)
    4046:	4798      	blx	r3
		goto _FAIL_;
    4048:	e03e      	b.n	40c8 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    404a:	2317      	movs	r3, #23
    404c:	18fc      	adds	r4, r7, r3
    404e:	1dbb      	adds	r3, r7, #6
    4050:	881a      	ldrh	r2, [r3, #0]
    4052:	68bb      	ldr	r3, [r7, #8]
    4054:	0011      	movs	r1, r2
    4056:	0018      	movs	r0, r3
    4058:	4b43      	ldr	r3, [pc, #268]	; (4168 <nm_spi_write+0x1d8>)
    405a:	4798      	blx	r3
    405c:	0003      	movs	r3, r0
    405e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4060:	2317      	movs	r3, #23
    4062:	18fb      	adds	r3, r7, r3
    4064:	781b      	ldrb	r3, [r3, #0]
    4066:	b25b      	sxtb	r3, r3
    4068:	2b01      	cmp	r3, #1
    406a:	d00e      	beq.n	408a <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    406c:	23f8      	movs	r3, #248	; 0xf8
    406e:	009a      	lsls	r2, r3, #2
    4070:	4936      	ldr	r1, [pc, #216]	; (414c <nm_spi_write+0x1bc>)
    4072:	4b37      	ldr	r3, [pc, #220]	; (4150 <nm_spi_write+0x1c0>)
    4074:	0018      	movs	r0, r3
    4076:	4b37      	ldr	r3, [pc, #220]	; (4154 <nm_spi_write+0x1c4>)
    4078:	4798      	blx	r3
    407a:	4b3c      	ldr	r3, [pc, #240]	; (416c <nm_spi_write+0x1dc>)
    407c:	0018      	movs	r0, r3
    407e:	4b3c      	ldr	r3, [pc, #240]	; (4170 <nm_spi_write+0x1e0>)
    4080:	4798      	blx	r3
    4082:	200d      	movs	r0, #13
    4084:	4b35      	ldr	r3, [pc, #212]	; (415c <nm_spi_write+0x1cc>)
    4086:	4798      	blx	r3
		goto _FAIL_;
    4088:	e01e      	b.n	40c8 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    408a:	2317      	movs	r3, #23
    408c:	18fc      	adds	r4, r7, r3
    408e:	2315      	movs	r3, #21
    4090:	18fb      	adds	r3, r7, r3
    4092:	781b      	ldrb	r3, [r3, #0]
    4094:	0018      	movs	r0, r3
    4096:	4b37      	ldr	r3, [pc, #220]	; (4174 <nm_spi_write+0x1e4>)
    4098:	4798      	blx	r3
    409a:	0003      	movs	r3, r0
    409c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    409e:	2317      	movs	r3, #23
    40a0:	18fb      	adds	r3, r7, r3
    40a2:	781b      	ldrb	r3, [r3, #0]
    40a4:	b25b      	sxtb	r3, r3
    40a6:	2b01      	cmp	r3, #1
    40a8:	d00e      	beq.n	40c8 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    40aa:	23fa      	movs	r3, #250	; 0xfa
    40ac:	009a      	lsls	r2, r3, #2
    40ae:	4927      	ldr	r1, [pc, #156]	; (414c <nm_spi_write+0x1bc>)
    40b0:	4b27      	ldr	r3, [pc, #156]	; (4150 <nm_spi_write+0x1c0>)
    40b2:	0018      	movs	r0, r3
    40b4:	4b27      	ldr	r3, [pc, #156]	; (4154 <nm_spi_write+0x1c4>)
    40b6:	4798      	blx	r3
    40b8:	4b2c      	ldr	r3, [pc, #176]	; (416c <nm_spi_write+0x1dc>)
    40ba:	0018      	movs	r0, r3
    40bc:	4b2c      	ldr	r3, [pc, #176]	; (4170 <nm_spi_write+0x1e0>)
    40be:	4798      	blx	r3
    40c0:	200d      	movs	r0, #13
    40c2:	4b26      	ldr	r3, [pc, #152]	; (415c <nm_spi_write+0x1cc>)
    40c4:	4798      	blx	r3
		goto _FAIL_;
    40c6:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    40c8:	2317      	movs	r3, #23
    40ca:	18fb      	adds	r3, r7, r3
    40cc:	781b      	ldrb	r3, [r3, #0]
    40ce:	b25b      	sxtb	r3, r3
    40d0:	2b01      	cmp	r3, #1
    40d2:	d02f      	beq.n	4134 <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    40d4:	2001      	movs	r0, #1
    40d6:	4b28      	ldr	r3, [pc, #160]	; (4178 <nm_spi_write+0x1e8>)
    40d8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    40da:	2300      	movs	r3, #0
    40dc:	9300      	str	r3, [sp, #0]
    40de:	2300      	movs	r3, #0
    40e0:	2200      	movs	r2, #0
    40e2:	2100      	movs	r1, #0
    40e4:	20cf      	movs	r0, #207	; 0xcf
    40e6:	4c17      	ldr	r4, [pc, #92]	; (4144 <nm_spi_write+0x1b4>)
    40e8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    40ea:	20cf      	movs	r0, #207	; 0xcf
    40ec:	4b1c      	ldr	r3, [pc, #112]	; (4160 <nm_spi_write+0x1d0>)
    40ee:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    40f0:	4a22      	ldr	r2, [pc, #136]	; (417c <nm_spi_write+0x1ec>)
    40f2:	4916      	ldr	r1, [pc, #88]	; (414c <nm_spi_write+0x1bc>)
    40f4:	4b16      	ldr	r3, [pc, #88]	; (4150 <nm_spi_write+0x1c0>)
    40f6:	0018      	movs	r0, r3
    40f8:	4b16      	ldr	r3, [pc, #88]	; (4154 <nm_spi_write+0x1c4>)
    40fa:	4798      	blx	r3
    40fc:	2316      	movs	r3, #22
    40fe:	18fb      	adds	r3, r7, r3
    4100:	7819      	ldrb	r1, [r3, #0]
    4102:	1dbb      	adds	r3, r7, #6
    4104:	881b      	ldrh	r3, [r3, #0]
    4106:	68fa      	ldr	r2, [r7, #12]
    4108:	481d      	ldr	r0, [pc, #116]	; (4180 <nm_spi_write+0x1f0>)
    410a:	4c12      	ldr	r4, [pc, #72]	; (4154 <nm_spi_write+0x1c4>)
    410c:	47a0      	blx	r4
    410e:	200d      	movs	r0, #13
    4110:	4b12      	ldr	r3, [pc, #72]	; (415c <nm_spi_write+0x1cc>)
    4112:	4798      	blx	r3
		nm_bsp_sleep(1);
    4114:	2001      	movs	r0, #1
    4116:	4b18      	ldr	r3, [pc, #96]	; (4178 <nm_spi_write+0x1e8>)
    4118:	4798      	blx	r3
		retry--;
    411a:	2316      	movs	r3, #22
    411c:	18fb      	adds	r3, r7, r3
    411e:	781a      	ldrb	r2, [r3, #0]
    4120:	2316      	movs	r3, #22
    4122:	18fb      	adds	r3, r7, r3
    4124:	3a01      	subs	r2, #1
    4126:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4128:	2316      	movs	r3, #22
    412a:	18fb      	adds	r3, r7, r3
    412c:	781b      	ldrb	r3, [r3, #0]
    412e:	2b00      	cmp	r3, #0
    4130:	d000      	beq.n	4134 <nm_spi_write+0x1a4>
    4132:	e73c      	b.n	3fae <nm_spi_write+0x1e>
	}


	return result;
    4134:	2317      	movs	r3, #23
    4136:	18fb      	adds	r3, r7, r3
    4138:	781b      	ldrb	r3, [r3, #0]
    413a:	b25b      	sxtb	r3, r3
}
    413c:	0018      	movs	r0, r3
    413e:	46bd      	mov	sp, r7
    4140:	b006      	add	sp, #24
    4142:	bdb0      	pop	{r4, r5, r7, pc}
    4144:	000034b1 	.word	0x000034b1
    4148:	000003ca 	.word	0x000003ca
    414c:	0000e7cc 	.word	0x0000e7cc
    4150:	0000e1e4 	.word	0x0000e1e4
    4154:	0000c455 	.word	0x0000c455
    4158:	0000e494 	.word	0x0000e494
    415c:	0000c489 	.word	0x0000c489
    4160:	000038f5 	.word	0x000038f5
    4164:	0000e4c4 	.word	0x0000e4c4
    4168:	00003c31 	.word	0x00003c31
    416c:	0000e4fc 	.word	0x0000e4fc
    4170:	0000c571 	.word	0x0000c571
    4174:	000037f5 	.word	0x000037f5
    4178:	000003f1 	.word	0x000003f1
    417c:	000003f2 	.word	0x000003f2
    4180:	0000e524 	.word	0x0000e524

00004184 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    4184:	b5b0      	push	{r4, r5, r7, lr}
    4186:	b086      	sub	sp, #24
    4188:	af02      	add	r7, sp, #8
    418a:	6078      	str	r0, [r7, #4]
    418c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    418e:	230f      	movs	r3, #15
    4190:	18fb      	adds	r3, r7, r3
    4192:	220a      	movs	r2, #10
    4194:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    4196:	230e      	movs	r3, #14
    4198:	18fb      	adds	r3, r7, r3
    419a:	2201      	movs	r2, #1
    419c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    419e:	230d      	movs	r3, #13
    41a0:	18fb      	adds	r3, r7, r3
    41a2:	22ca      	movs	r2, #202	; 0xca
    41a4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    41a6:	230c      	movs	r3, #12
    41a8:	18fb      	adds	r3, r7, r3
    41aa:	2200      	movs	r2, #0
    41ac:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    41ae:	687b      	ldr	r3, [r7, #4]
    41b0:	2bff      	cmp	r3, #255	; 0xff
    41b2:	d808      	bhi.n	41c6 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    41b4:	230d      	movs	r3, #13
    41b6:	18fb      	adds	r3, r7, r3
    41b8:	22c4      	movs	r2, #196	; 0xc4
    41ba:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    41bc:	230c      	movs	r3, #12
    41be:	18fb      	adds	r3, r7, r3
    41c0:	2201      	movs	r2, #1
    41c2:	701a      	strb	r2, [r3, #0]
    41c4:	e007      	b.n	41d6 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    41c6:	230d      	movs	r3, #13
    41c8:	18fb      	adds	r3, r7, r3
    41ca:	22ca      	movs	r2, #202	; 0xca
    41cc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    41ce:	230c      	movs	r3, #12
    41d0:	18fb      	adds	r3, r7, r3
    41d2:	2200      	movs	r2, #0
    41d4:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    41d6:	230e      	movs	r3, #14
    41d8:	18fc      	adds	r4, r7, r3
    41da:	6879      	ldr	r1, [r7, #4]
    41dc:	230d      	movs	r3, #13
    41de:	18fb      	adds	r3, r7, r3
    41e0:	7818      	ldrb	r0, [r3, #0]
    41e2:	230c      	movs	r3, #12
    41e4:	18fb      	adds	r3, r7, r3
    41e6:	781b      	ldrb	r3, [r3, #0]
    41e8:	9300      	str	r3, [sp, #0]
    41ea:	2304      	movs	r3, #4
    41ec:	2200      	movs	r2, #0
    41ee:	4d56      	ldr	r5, [pc, #344]	; (4348 <spi_read_reg+0x1c4>)
    41f0:	47a8      	blx	r5
    41f2:	0003      	movs	r3, r0
    41f4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    41f6:	230e      	movs	r3, #14
    41f8:	18fb      	adds	r3, r7, r3
    41fa:	781b      	ldrb	r3, [r3, #0]
    41fc:	b25b      	sxtb	r3, r3
    41fe:	2b01      	cmp	r3, #1
    4200:	d00f      	beq.n	4222 <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    4202:	4a52      	ldr	r2, [pc, #328]	; (434c <spi_read_reg+0x1c8>)
    4204:	4952      	ldr	r1, [pc, #328]	; (4350 <spi_read_reg+0x1cc>)
    4206:	4b53      	ldr	r3, [pc, #332]	; (4354 <spi_read_reg+0x1d0>)
    4208:	0018      	movs	r0, r3
    420a:	4b53      	ldr	r3, [pc, #332]	; (4358 <spi_read_reg+0x1d4>)
    420c:	4798      	blx	r3
    420e:	687a      	ldr	r2, [r7, #4]
    4210:	4b52      	ldr	r3, [pc, #328]	; (435c <spi_read_reg+0x1d8>)
    4212:	0011      	movs	r1, r2
    4214:	0018      	movs	r0, r3
    4216:	4b50      	ldr	r3, [pc, #320]	; (4358 <spi_read_reg+0x1d4>)
    4218:	4798      	blx	r3
    421a:	200d      	movs	r0, #13
    421c:	4b50      	ldr	r3, [pc, #320]	; (4360 <spi_read_reg+0x1dc>)
    421e:	4798      	blx	r3
		goto _FAIL_;
    4220:	e055      	b.n	42ce <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    4222:	230e      	movs	r3, #14
    4224:	18fc      	adds	r4, r7, r3
    4226:	230d      	movs	r3, #13
    4228:	18fb      	adds	r3, r7, r3
    422a:	781b      	ldrb	r3, [r3, #0]
    422c:	0018      	movs	r0, r3
    422e:	4b4d      	ldr	r3, [pc, #308]	; (4364 <spi_read_reg+0x1e0>)
    4230:	4798      	blx	r3
    4232:	0003      	movs	r3, r0
    4234:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4236:	230e      	movs	r3, #14
    4238:	18fb      	adds	r3, r7, r3
    423a:	781b      	ldrb	r3, [r3, #0]
    423c:	b25b      	sxtb	r3, r3
    423e:	2b01      	cmp	r3, #1
    4240:	d00f      	beq.n	4262 <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    4242:	4a49      	ldr	r2, [pc, #292]	; (4368 <spi_read_reg+0x1e4>)
    4244:	4942      	ldr	r1, [pc, #264]	; (4350 <spi_read_reg+0x1cc>)
    4246:	4b43      	ldr	r3, [pc, #268]	; (4354 <spi_read_reg+0x1d0>)
    4248:	0018      	movs	r0, r3
    424a:	4b43      	ldr	r3, [pc, #268]	; (4358 <spi_read_reg+0x1d4>)
    424c:	4798      	blx	r3
    424e:	687a      	ldr	r2, [r7, #4]
    4250:	4b46      	ldr	r3, [pc, #280]	; (436c <spi_read_reg+0x1e8>)
    4252:	0011      	movs	r1, r2
    4254:	0018      	movs	r0, r3
    4256:	4b40      	ldr	r3, [pc, #256]	; (4358 <spi_read_reg+0x1d4>)
    4258:	4798      	blx	r3
    425a:	200d      	movs	r0, #13
    425c:	4b40      	ldr	r3, [pc, #256]	; (4360 <spi_read_reg+0x1dc>)
    425e:	4798      	blx	r3
		goto _FAIL_;
    4260:	e035      	b.n	42ce <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    4262:	230e      	movs	r3, #14
    4264:	18fc      	adds	r4, r7, r3
    4266:	230c      	movs	r3, #12
    4268:	18fb      	adds	r3, r7, r3
    426a:	781a      	ldrb	r2, [r3, #0]
    426c:	2308      	movs	r3, #8
    426e:	18fb      	adds	r3, r7, r3
    4270:	2104      	movs	r1, #4
    4272:	0018      	movs	r0, r3
    4274:	4b3e      	ldr	r3, [pc, #248]	; (4370 <spi_read_reg+0x1ec>)
    4276:	4798      	blx	r3
    4278:	0003      	movs	r3, r0
    427a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    427c:	230e      	movs	r3, #14
    427e:	18fb      	adds	r3, r7, r3
    4280:	781b      	ldrb	r3, [r3, #0]
    4282:	b25b      	sxtb	r3, r3
    4284:	2b01      	cmp	r3, #1
    4286:	d00d      	beq.n	42a4 <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    4288:	4a3a      	ldr	r2, [pc, #232]	; (4374 <spi_read_reg+0x1f0>)
    428a:	4931      	ldr	r1, [pc, #196]	; (4350 <spi_read_reg+0x1cc>)
    428c:	4b31      	ldr	r3, [pc, #196]	; (4354 <spi_read_reg+0x1d0>)
    428e:	0018      	movs	r0, r3
    4290:	4b31      	ldr	r3, [pc, #196]	; (4358 <spi_read_reg+0x1d4>)
    4292:	4798      	blx	r3
    4294:	4b38      	ldr	r3, [pc, #224]	; (4378 <spi_read_reg+0x1f4>)
    4296:	0018      	movs	r0, r3
    4298:	4b38      	ldr	r3, [pc, #224]	; (437c <spi_read_reg+0x1f8>)
    429a:	4798      	blx	r3
    429c:	200d      	movs	r0, #13
    429e:	4b30      	ldr	r3, [pc, #192]	; (4360 <spi_read_reg+0x1dc>)
    42a0:	4798      	blx	r3
		goto _FAIL_;
    42a2:	e014      	b.n	42ce <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    42a4:	2308      	movs	r3, #8
    42a6:	18fb      	adds	r3, r7, r3
    42a8:	781b      	ldrb	r3, [r3, #0]
    42aa:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    42ac:	2308      	movs	r3, #8
    42ae:	18fb      	adds	r3, r7, r3
    42b0:	785b      	ldrb	r3, [r3, #1]
    42b2:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    42b4:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    42b6:	2308      	movs	r3, #8
    42b8:	18fb      	adds	r3, r7, r3
    42ba:	789b      	ldrb	r3, [r3, #2]
    42bc:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    42be:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    42c0:	2308      	movs	r3, #8
    42c2:	18fb      	adds	r3, r7, r3
    42c4:	78db      	ldrb	r3, [r3, #3]
    42c6:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    42c8:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    42ca:	683b      	ldr	r3, [r7, #0]
    42cc:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    42ce:	230e      	movs	r3, #14
    42d0:	18fb      	adds	r3, r7, r3
    42d2:	781b      	ldrb	r3, [r3, #0]
    42d4:	b25b      	sxtb	r3, r3
    42d6:	2b01      	cmp	r3, #1
    42d8:	d02e      	beq.n	4338 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    42da:	2001      	movs	r0, #1
    42dc:	4b28      	ldr	r3, [pc, #160]	; (4380 <spi_read_reg+0x1fc>)
    42de:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    42e0:	2300      	movs	r3, #0
    42e2:	9300      	str	r3, [sp, #0]
    42e4:	2300      	movs	r3, #0
    42e6:	2200      	movs	r2, #0
    42e8:	2100      	movs	r1, #0
    42ea:	20cf      	movs	r0, #207	; 0xcf
    42ec:	4c16      	ldr	r4, [pc, #88]	; (4348 <spi_read_reg+0x1c4>)
    42ee:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    42f0:	20cf      	movs	r0, #207	; 0xcf
    42f2:	4b1c      	ldr	r3, [pc, #112]	; (4364 <spi_read_reg+0x1e0>)
    42f4:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    42f6:	4a23      	ldr	r2, [pc, #140]	; (4384 <spi_read_reg+0x200>)
    42f8:	4915      	ldr	r1, [pc, #84]	; (4350 <spi_read_reg+0x1cc>)
    42fa:	4b16      	ldr	r3, [pc, #88]	; (4354 <spi_read_reg+0x1d0>)
    42fc:	0018      	movs	r0, r3
    42fe:	4b16      	ldr	r3, [pc, #88]	; (4358 <spi_read_reg+0x1d4>)
    4300:	4798      	blx	r3
    4302:	230f      	movs	r3, #15
    4304:	18fb      	adds	r3, r7, r3
    4306:	7819      	ldrb	r1, [r3, #0]
    4308:	687a      	ldr	r2, [r7, #4]
    430a:	4b1f      	ldr	r3, [pc, #124]	; (4388 <spi_read_reg+0x204>)
    430c:	0018      	movs	r0, r3
    430e:	4b12      	ldr	r3, [pc, #72]	; (4358 <spi_read_reg+0x1d4>)
    4310:	4798      	blx	r3
    4312:	200d      	movs	r0, #13
    4314:	4b12      	ldr	r3, [pc, #72]	; (4360 <spi_read_reg+0x1dc>)
    4316:	4798      	blx	r3
		nm_bsp_sleep(1);
    4318:	2001      	movs	r0, #1
    431a:	4b19      	ldr	r3, [pc, #100]	; (4380 <spi_read_reg+0x1fc>)
    431c:	4798      	blx	r3
		retry--;
    431e:	230f      	movs	r3, #15
    4320:	18fb      	adds	r3, r7, r3
    4322:	781a      	ldrb	r2, [r3, #0]
    4324:	230f      	movs	r3, #15
    4326:	18fb      	adds	r3, r7, r3
    4328:	3a01      	subs	r2, #1
    432a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    432c:	230f      	movs	r3, #15
    432e:	18fb      	adds	r3, r7, r3
    4330:	781b      	ldrb	r3, [r3, #0]
    4332:	2b00      	cmp	r3, #0
    4334:	d000      	beq.n	4338 <spi_read_reg+0x1b4>
    4336:	e73a      	b.n	41ae <spi_read_reg+0x2a>
	}
		
	return result;
    4338:	230e      	movs	r3, #14
    433a:	18fb      	adds	r3, r7, r3
    433c:	781b      	ldrb	r3, [r3, #0]
    433e:	b25b      	sxtb	r3, r3
}
    4340:	0018      	movs	r0, r3
    4342:	46bd      	mov	sp, r7
    4344:	b004      	add	sp, #16
    4346:	bdb0      	pop	{r4, r5, r7, pc}
    4348:	000034b1 	.word	0x000034b1
    434c:	00000417 	.word	0x00000417
    4350:	0000e7dc 	.word	0x0000e7dc
    4354:	0000e1e4 	.word	0x0000e1e4
    4358:	0000c455 	.word	0x0000c455
    435c:	0000e540 	.word	0x0000e540
    4360:	0000c489 	.word	0x0000c489
    4364:	000038f5 	.word	0x000038f5
    4368:	0000041d 	.word	0x0000041d
    436c:	0000e56c 	.word	0x0000e56c
    4370:	00003a2d 	.word	0x00003a2d
    4374:	00000424 	.word	0x00000424
    4378:	0000e5a0 	.word	0x0000e5a0
    437c:	0000c571 	.word	0x0000c571
    4380:	000003f1 	.word	0x000003f1
    4384:	0000043c 	.word	0x0000043c
    4388:	0000e5c0 	.word	0x0000e5c0

0000438c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    438c:	b5b0      	push	{r4, r5, r7, lr}
    438e:	b088      	sub	sp, #32
    4390:	af02      	add	r7, sp, #8
    4392:	60f8      	str	r0, [r7, #12]
    4394:	60b9      	str	r1, [r7, #8]
    4396:	1dbb      	adds	r3, r7, #6
    4398:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    439a:	2314      	movs	r3, #20
    439c:	18fb      	adds	r3, r7, r3
    439e:	22c8      	movs	r2, #200	; 0xc8
    43a0:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    43a2:	2316      	movs	r3, #22
    43a4:	18fb      	adds	r3, r7, r3
    43a6:	220a      	movs	r2, #10
    43a8:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    43aa:	2315      	movs	r3, #21
    43ac:	18fb      	adds	r3, r7, r3
    43ae:	2200      	movs	r2, #0
    43b0:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    43b2:	1dbb      	adds	r3, r7, #6
    43b4:	881b      	ldrh	r3, [r3, #0]
    43b6:	2b01      	cmp	r3, #1
    43b8:	d106      	bne.n	43c8 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    43ba:	1dbb      	adds	r3, r7, #6
    43bc:	2202      	movs	r2, #2
    43be:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    43c0:	2315      	movs	r3, #21
    43c2:	18fb      	adds	r3, r7, r3
    43c4:	2201      	movs	r2, #1
    43c6:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    43c8:	1dbb      	adds	r3, r7, #6
    43ca:	881a      	ldrh	r2, [r3, #0]
    43cc:	2317      	movs	r3, #23
    43ce:	18fc      	adds	r4, r7, r3
    43d0:	68f9      	ldr	r1, [r7, #12]
    43d2:	2314      	movs	r3, #20
    43d4:	18fb      	adds	r3, r7, r3
    43d6:	7818      	ldrb	r0, [r3, #0]
    43d8:	2300      	movs	r3, #0
    43da:	9300      	str	r3, [sp, #0]
    43dc:	0013      	movs	r3, r2
    43de:	2200      	movs	r2, #0
    43e0:	4d56      	ldr	r5, [pc, #344]	; (453c <nm_spi_read+0x1b0>)
    43e2:	47a8      	blx	r5
    43e4:	0003      	movs	r3, r0
    43e6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    43e8:	2317      	movs	r3, #23
    43ea:	18fb      	adds	r3, r7, r3
    43ec:	781b      	ldrb	r3, [r3, #0]
    43ee:	b25b      	sxtb	r3, r3
    43f0:	2b01      	cmp	r3, #1
    43f2:	d00f      	beq.n	4414 <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    43f4:	4a52      	ldr	r2, [pc, #328]	; (4540 <nm_spi_read+0x1b4>)
    43f6:	4953      	ldr	r1, [pc, #332]	; (4544 <nm_spi_read+0x1b8>)
    43f8:	4b53      	ldr	r3, [pc, #332]	; (4548 <nm_spi_read+0x1bc>)
    43fa:	0018      	movs	r0, r3
    43fc:	4b53      	ldr	r3, [pc, #332]	; (454c <nm_spi_read+0x1c0>)
    43fe:	4798      	blx	r3
    4400:	68fa      	ldr	r2, [r7, #12]
    4402:	4b53      	ldr	r3, [pc, #332]	; (4550 <nm_spi_read+0x1c4>)
    4404:	0011      	movs	r1, r2
    4406:	0018      	movs	r0, r3
    4408:	4b50      	ldr	r3, [pc, #320]	; (454c <nm_spi_read+0x1c0>)
    440a:	4798      	blx	r3
    440c:	200d      	movs	r0, #13
    440e:	4b51      	ldr	r3, [pc, #324]	; (4554 <nm_spi_read+0x1c8>)
    4410:	4798      	blx	r3
		goto _FAIL_;
    4412:	e055      	b.n	44c0 <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    4414:	2317      	movs	r3, #23
    4416:	18fc      	adds	r4, r7, r3
    4418:	2314      	movs	r3, #20
    441a:	18fb      	adds	r3, r7, r3
    441c:	781b      	ldrb	r3, [r3, #0]
    441e:	0018      	movs	r0, r3
    4420:	4b4d      	ldr	r3, [pc, #308]	; (4558 <nm_spi_read+0x1cc>)
    4422:	4798      	blx	r3
    4424:	0003      	movs	r3, r0
    4426:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4428:	2317      	movs	r3, #23
    442a:	18fb      	adds	r3, r7, r3
    442c:	781b      	ldrb	r3, [r3, #0]
    442e:	b25b      	sxtb	r3, r3
    4430:	2b01      	cmp	r3, #1
    4432:	d00f      	beq.n	4454 <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    4434:	4a49      	ldr	r2, [pc, #292]	; (455c <nm_spi_read+0x1d0>)
    4436:	4943      	ldr	r1, [pc, #268]	; (4544 <nm_spi_read+0x1b8>)
    4438:	4b43      	ldr	r3, [pc, #268]	; (4548 <nm_spi_read+0x1bc>)
    443a:	0018      	movs	r0, r3
    443c:	4b43      	ldr	r3, [pc, #268]	; (454c <nm_spi_read+0x1c0>)
    443e:	4798      	blx	r3
    4440:	68fa      	ldr	r2, [r7, #12]
    4442:	4b47      	ldr	r3, [pc, #284]	; (4560 <nm_spi_read+0x1d4>)
    4444:	0011      	movs	r1, r2
    4446:	0018      	movs	r0, r3
    4448:	4b40      	ldr	r3, [pc, #256]	; (454c <nm_spi_read+0x1c0>)
    444a:	4798      	blx	r3
    444c:	200d      	movs	r0, #13
    444e:	4b41      	ldr	r3, [pc, #260]	; (4554 <nm_spi_read+0x1c8>)
    4450:	4798      	blx	r3
		goto _FAIL_;
    4452:	e035      	b.n	44c0 <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    4454:	2315      	movs	r3, #21
    4456:	18fb      	adds	r3, r7, r3
    4458:	781b      	ldrb	r3, [r3, #0]
    445a:	2b00      	cmp	r3, #0
    445c:	d011      	beq.n	4482 <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    445e:	2317      	movs	r3, #23
    4460:	18fc      	adds	r4, r7, r3
    4462:	1dbb      	adds	r3, r7, #6
    4464:	8819      	ldrh	r1, [r3, #0]
    4466:	2310      	movs	r3, #16
    4468:	18fb      	adds	r3, r7, r3
    446a:	2200      	movs	r2, #0
    446c:	0018      	movs	r0, r3
    446e:	4b3d      	ldr	r3, [pc, #244]	; (4564 <nm_spi_read+0x1d8>)
    4470:	4798      	blx	r3
    4472:	0003      	movs	r3, r0
    4474:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    4476:	2310      	movs	r3, #16
    4478:	18fb      	adds	r3, r7, r3
    447a:	781a      	ldrb	r2, [r3, #0]
    447c:	68bb      	ldr	r3, [r7, #8]
    447e:	701a      	strb	r2, [r3, #0]
    4480:	e00a      	b.n	4498 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    4482:	2317      	movs	r3, #23
    4484:	18fc      	adds	r4, r7, r3
    4486:	1dbb      	adds	r3, r7, #6
    4488:	8819      	ldrh	r1, [r3, #0]
    448a:	68bb      	ldr	r3, [r7, #8]
    448c:	2200      	movs	r2, #0
    448e:	0018      	movs	r0, r3
    4490:	4b34      	ldr	r3, [pc, #208]	; (4564 <nm_spi_read+0x1d8>)
    4492:	4798      	blx	r3
    4494:	0003      	movs	r3, r0
    4496:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    4498:	2317      	movs	r3, #23
    449a:	18fb      	adds	r3, r7, r3
    449c:	781b      	ldrb	r3, [r3, #0]
    449e:	b25b      	sxtb	r3, r3
    44a0:	2b01      	cmp	r3, #1
    44a2:	d00d      	beq.n	44c0 <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    44a4:	4a30      	ldr	r2, [pc, #192]	; (4568 <nm_spi_read+0x1dc>)
    44a6:	4927      	ldr	r1, [pc, #156]	; (4544 <nm_spi_read+0x1b8>)
    44a8:	4b27      	ldr	r3, [pc, #156]	; (4548 <nm_spi_read+0x1bc>)
    44aa:	0018      	movs	r0, r3
    44ac:	4b27      	ldr	r3, [pc, #156]	; (454c <nm_spi_read+0x1c0>)
    44ae:	4798      	blx	r3
    44b0:	4b2e      	ldr	r3, [pc, #184]	; (456c <nm_spi_read+0x1e0>)
    44b2:	0018      	movs	r0, r3
    44b4:	4b2e      	ldr	r3, [pc, #184]	; (4570 <nm_spi_read+0x1e4>)
    44b6:	4798      	blx	r3
    44b8:	200d      	movs	r0, #13
    44ba:	4b26      	ldr	r3, [pc, #152]	; (4554 <nm_spi_read+0x1c8>)
    44bc:	4798      	blx	r3
		goto _FAIL_;
    44be:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    44c0:	2317      	movs	r3, #23
    44c2:	18fb      	adds	r3, r7, r3
    44c4:	781b      	ldrb	r3, [r3, #0]
    44c6:	b25b      	sxtb	r3, r3
    44c8:	2b01      	cmp	r3, #1
    44ca:	d02f      	beq.n	452c <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    44cc:	2001      	movs	r0, #1
    44ce:	4b29      	ldr	r3, [pc, #164]	; (4574 <nm_spi_read+0x1e8>)
    44d0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    44d2:	2300      	movs	r3, #0
    44d4:	9300      	str	r3, [sp, #0]
    44d6:	2300      	movs	r3, #0
    44d8:	2200      	movs	r2, #0
    44da:	2100      	movs	r1, #0
    44dc:	20cf      	movs	r0, #207	; 0xcf
    44de:	4c17      	ldr	r4, [pc, #92]	; (453c <nm_spi_read+0x1b0>)
    44e0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    44e2:	20cf      	movs	r0, #207	; 0xcf
    44e4:	4b1c      	ldr	r3, [pc, #112]	; (4558 <nm_spi_read+0x1cc>)
    44e6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    44e8:	4a23      	ldr	r2, [pc, #140]	; (4578 <nm_spi_read+0x1ec>)
    44ea:	4916      	ldr	r1, [pc, #88]	; (4544 <nm_spi_read+0x1b8>)
    44ec:	4b16      	ldr	r3, [pc, #88]	; (4548 <nm_spi_read+0x1bc>)
    44ee:	0018      	movs	r0, r3
    44f0:	4b16      	ldr	r3, [pc, #88]	; (454c <nm_spi_read+0x1c0>)
    44f2:	4798      	blx	r3
    44f4:	2316      	movs	r3, #22
    44f6:	18fb      	adds	r3, r7, r3
    44f8:	7819      	ldrb	r1, [r3, #0]
    44fa:	1dbb      	adds	r3, r7, #6
    44fc:	881b      	ldrh	r3, [r3, #0]
    44fe:	68fa      	ldr	r2, [r7, #12]
    4500:	481e      	ldr	r0, [pc, #120]	; (457c <nm_spi_read+0x1f0>)
    4502:	4c12      	ldr	r4, [pc, #72]	; (454c <nm_spi_read+0x1c0>)
    4504:	47a0      	blx	r4
    4506:	200d      	movs	r0, #13
    4508:	4b12      	ldr	r3, [pc, #72]	; (4554 <nm_spi_read+0x1c8>)
    450a:	4798      	blx	r3
		nm_bsp_sleep(1);
    450c:	2001      	movs	r0, #1
    450e:	4b19      	ldr	r3, [pc, #100]	; (4574 <nm_spi_read+0x1e8>)
    4510:	4798      	blx	r3
		retry--;
    4512:	2316      	movs	r3, #22
    4514:	18fb      	adds	r3, r7, r3
    4516:	781a      	ldrb	r2, [r3, #0]
    4518:	2316      	movs	r3, #22
    451a:	18fb      	adds	r3, r7, r3
    451c:	3a01      	subs	r2, #1
    451e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4520:	2316      	movs	r3, #22
    4522:	18fb      	adds	r3, r7, r3
    4524:	781b      	ldrb	r3, [r3, #0]
    4526:	2b00      	cmp	r3, #0
    4528:	d000      	beq.n	452c <nm_spi_read+0x1a0>
    452a:	e742      	b.n	43b2 <nm_spi_read+0x26>
	}

	return result;
    452c:	2317      	movs	r3, #23
    452e:	18fb      	adds	r3, r7, r3
    4530:	781b      	ldrb	r3, [r3, #0]
    4532:	b25b      	sxtb	r3, r3
}
    4534:	0018      	movs	r0, r3
    4536:	46bd      	mov	sp, r7
    4538:	b006      	add	sp, #24
    453a:	bdb0      	pop	{r4, r5, r7, pc}
    453c:	000034b1 	.word	0x000034b1
    4540:	0000045d 	.word	0x0000045d
    4544:	0000e7ec 	.word	0x0000e7ec
    4548:	0000e1e4 	.word	0x0000e1e4
    454c:	0000c455 	.word	0x0000c455
    4550:	0000e5d8 	.word	0x0000e5d8
    4554:	0000c489 	.word	0x0000c489
    4558:	000038f5 	.word	0x000038f5
    455c:	00000463 	.word	0x00000463
    4560:	0000e608 	.word	0x0000e608
    4564:	00003a2d 	.word	0x00003a2d
    4568:	00000473 	.word	0x00000473
    456c:	0000e640 	.word	0x0000e640
    4570:	0000c571 	.word	0x0000c571
    4574:	000003f1 	.word	0x000003f1
    4578:	00000484 	.word	0x00000484
    457c:	0000e524 	.word	0x0000e524

00004580 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    4580:	b580      	push	{r7, lr}
    4582:	b082      	sub	sp, #8
    4584:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    4586:	4b0c      	ldr	r3, [pc, #48]	; (45b8 <spi_init_pkt_sz+0x38>)
    4588:	0018      	movs	r0, r3
    458a:	4b0c      	ldr	r3, [pc, #48]	; (45bc <spi_init_pkt_sz+0x3c>)
    458c:	4798      	blx	r3
    458e:	0003      	movs	r3, r0
    4590:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	2270      	movs	r2, #112	; 0x70
    4596:	4393      	bics	r3, r2
    4598:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    459a:	687b      	ldr	r3, [r7, #4]
    459c:	2250      	movs	r2, #80	; 0x50
    459e:	4313      	orrs	r3, r2
    45a0:	607b      	str	r3, [r7, #4]
    45a2:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    45a4:	687b      	ldr	r3, [r7, #4]
    45a6:	4a04      	ldr	r2, [pc, #16]	; (45b8 <spi_init_pkt_sz+0x38>)
    45a8:	0019      	movs	r1, r3
    45aa:	0010      	movs	r0, r2
    45ac:	4b04      	ldr	r3, [pc, #16]	; (45c0 <spi_init_pkt_sz+0x40>)
    45ae:	4798      	blx	r3
}
    45b0:	46c0      	nop			; (mov r8, r8)
    45b2:	46bd      	mov	sp, r7
    45b4:	b002      	add	sp, #8
    45b6:	bd80      	pop	{r7, pc}
    45b8:	0000e824 	.word	0x0000e824
    45bc:	00004759 	.word	0x00004759
    45c0:	000047cd 	.word	0x000047cd

000045c4 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    45c4:	b590      	push	{r4, r7, lr}
    45c6:	b083      	sub	sp, #12
    45c8:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    45ca:	2300      	movs	r3, #0
    45cc:	9300      	str	r3, [sp, #0]
    45ce:	2300      	movs	r3, #0
    45d0:	2200      	movs	r2, #0
    45d2:	2100      	movs	r1, #0
    45d4:	20cf      	movs	r0, #207	; 0xcf
    45d6:	4c05      	ldr	r4, [pc, #20]	; (45ec <nm_spi_reset+0x28>)
    45d8:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    45da:	20cf      	movs	r0, #207	; 0xcf
    45dc:	4b04      	ldr	r3, [pc, #16]	; (45f0 <nm_spi_reset+0x2c>)
    45de:	4798      	blx	r3
	return M2M_SUCCESS;
    45e0:	2300      	movs	r3, #0
}
    45e2:	0018      	movs	r0, r3
    45e4:	46bd      	mov	sp, r7
    45e6:	b001      	add	sp, #4
    45e8:	bd90      	pop	{r4, r7, pc}
    45ea:	46c0      	nop			; (mov r8, r8)
    45ec:	000034b1 	.word	0x000034b1
    45f0:	000038f5 	.word	0x000038f5

000045f4 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    45f4:	b580      	push	{r7, lr}
    45f6:	b082      	sub	sp, #8
    45f8:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    45fa:	2300      	movs	r3, #0
    45fc:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    45fe:	4b3e      	ldr	r3, [pc, #248]	; (46f8 <nm_spi_init+0x104>)
    4600:	2200      	movs	r2, #0
    4602:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    4604:	003b      	movs	r3, r7
    4606:	4a3d      	ldr	r2, [pc, #244]	; (46fc <nm_spi_init+0x108>)
    4608:	0019      	movs	r1, r3
    460a:	0010      	movs	r0, r2
    460c:	4b3c      	ldr	r3, [pc, #240]	; (4700 <nm_spi_init+0x10c>)
    460e:	4798      	blx	r3
    4610:	1e03      	subs	r3, r0, #0
    4612:	d126      	bne.n	4662 <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    4614:	4b38      	ldr	r3, [pc, #224]	; (46f8 <nm_spi_init+0x104>)
    4616:	2201      	movs	r2, #1
    4618:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    461a:	4a3a      	ldr	r2, [pc, #232]	; (4704 <nm_spi_init+0x110>)
    461c:	493a      	ldr	r1, [pc, #232]	; (4708 <nm_spi_init+0x114>)
    461e:	4b3b      	ldr	r3, [pc, #236]	; (470c <nm_spi_init+0x118>)
    4620:	0018      	movs	r0, r3
    4622:	4b3b      	ldr	r3, [pc, #236]	; (4710 <nm_spi_init+0x11c>)
    4624:	4798      	blx	r3
    4626:	4b3b      	ldr	r3, [pc, #236]	; (4714 <nm_spi_init+0x120>)
    4628:	0018      	movs	r0, r3
    462a:	4b3b      	ldr	r3, [pc, #236]	; (4718 <nm_spi_init+0x124>)
    462c:	4798      	blx	r3
    462e:	200d      	movs	r0, #13
    4630:	4b3a      	ldr	r3, [pc, #232]	; (471c <nm_spi_init+0x128>)
    4632:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    4634:	003b      	movs	r3, r7
    4636:	4a31      	ldr	r2, [pc, #196]	; (46fc <nm_spi_init+0x108>)
    4638:	0019      	movs	r1, r3
    463a:	0010      	movs	r0, r2
    463c:	4b30      	ldr	r3, [pc, #192]	; (4700 <nm_spi_init+0x10c>)
    463e:	4798      	blx	r3
    4640:	1e03      	subs	r3, r0, #0
    4642:	d10e      	bne.n	4662 <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    4644:	4a36      	ldr	r2, [pc, #216]	; (4720 <nm_spi_init+0x12c>)
    4646:	4930      	ldr	r1, [pc, #192]	; (4708 <nm_spi_init+0x114>)
    4648:	4b30      	ldr	r3, [pc, #192]	; (470c <nm_spi_init+0x118>)
    464a:	0018      	movs	r0, r3
    464c:	4b30      	ldr	r3, [pc, #192]	; (4710 <nm_spi_init+0x11c>)
    464e:	4798      	blx	r3
    4650:	4b34      	ldr	r3, [pc, #208]	; (4724 <nm_spi_init+0x130>)
    4652:	0018      	movs	r0, r3
    4654:	4b30      	ldr	r3, [pc, #192]	; (4718 <nm_spi_init+0x124>)
    4656:	4798      	blx	r3
    4658:	200d      	movs	r0, #13
    465a:	4b30      	ldr	r3, [pc, #192]	; (471c <nm_spi_init+0x128>)
    465c:	4798      	blx	r3
			return 0;
    465e:	2300      	movs	r3, #0
    4660:	e045      	b.n	46ee <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    4662:	4b25      	ldr	r3, [pc, #148]	; (46f8 <nm_spi_init+0x104>)
    4664:	781b      	ldrb	r3, [r3, #0]
    4666:	2b00      	cmp	r3, #0
    4668:	d125      	bne.n	46b6 <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    466a:	683b      	ldr	r3, [r7, #0]
    466c:	220c      	movs	r2, #12
    466e:	4393      	bics	r3, r2
    4670:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    4672:	683b      	ldr	r3, [r7, #0]
    4674:	2270      	movs	r2, #112	; 0x70
    4676:	4393      	bics	r3, r2
    4678:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    467a:	683b      	ldr	r3, [r7, #0]
    467c:	2250      	movs	r2, #80	; 0x50
    467e:	4313      	orrs	r3, r2
    4680:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    4682:	683b      	ldr	r3, [r7, #0]
    4684:	4a1d      	ldr	r2, [pc, #116]	; (46fc <nm_spi_init+0x108>)
    4686:	0019      	movs	r1, r3
    4688:	0010      	movs	r0, r2
    468a:	4b27      	ldr	r3, [pc, #156]	; (4728 <nm_spi_init+0x134>)
    468c:	4798      	blx	r3
    468e:	1e03      	subs	r3, r0, #0
    4690:	d10e      	bne.n	46b0 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    4692:	4a26      	ldr	r2, [pc, #152]	; (472c <nm_spi_init+0x138>)
    4694:	491c      	ldr	r1, [pc, #112]	; (4708 <nm_spi_init+0x114>)
    4696:	4b1d      	ldr	r3, [pc, #116]	; (470c <nm_spi_init+0x118>)
    4698:	0018      	movs	r0, r3
    469a:	4b1d      	ldr	r3, [pc, #116]	; (4710 <nm_spi_init+0x11c>)
    469c:	4798      	blx	r3
    469e:	4b24      	ldr	r3, [pc, #144]	; (4730 <nm_spi_init+0x13c>)
    46a0:	0018      	movs	r0, r3
    46a2:	4b1d      	ldr	r3, [pc, #116]	; (4718 <nm_spi_init+0x124>)
    46a4:	4798      	blx	r3
    46a6:	200d      	movs	r0, #13
    46a8:	4b1c      	ldr	r3, [pc, #112]	; (471c <nm_spi_init+0x128>)
    46aa:	4798      	blx	r3
			return 0;
    46ac:	2300      	movs	r3, #0
    46ae:	e01e      	b.n	46ee <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    46b0:	4b11      	ldr	r3, [pc, #68]	; (46f8 <nm_spi_init+0x104>)
    46b2:	2201      	movs	r2, #1
    46b4:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    46b6:	1d3a      	adds	r2, r7, #4
    46b8:	2380      	movs	r3, #128	; 0x80
    46ba:	015b      	lsls	r3, r3, #5
    46bc:	0011      	movs	r1, r2
    46be:	0018      	movs	r0, r3
    46c0:	4b0f      	ldr	r3, [pc, #60]	; (4700 <nm_spi_init+0x10c>)
    46c2:	4798      	blx	r3
    46c4:	1e03      	subs	r3, r0, #0
    46c6:	d10f      	bne.n	46e8 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    46c8:	4a1a      	ldr	r2, [pc, #104]	; (4734 <nm_spi_init+0x140>)
    46ca:	490f      	ldr	r1, [pc, #60]	; (4708 <nm_spi_init+0x114>)
    46cc:	4b0f      	ldr	r3, [pc, #60]	; (470c <nm_spi_init+0x118>)
    46ce:	0018      	movs	r0, r3
    46d0:	4b0f      	ldr	r3, [pc, #60]	; (4710 <nm_spi_init+0x11c>)
    46d2:	4798      	blx	r3
    46d4:	4b18      	ldr	r3, [pc, #96]	; (4738 <nm_spi_init+0x144>)
    46d6:	0018      	movs	r0, r3
    46d8:	4b0f      	ldr	r3, [pc, #60]	; (4718 <nm_spi_init+0x124>)
    46da:	4798      	blx	r3
    46dc:	200d      	movs	r0, #13
    46de:	4b0f      	ldr	r3, [pc, #60]	; (471c <nm_spi_init+0x128>)
    46e0:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    46e2:	2306      	movs	r3, #6
    46e4:	425b      	negs	r3, r3
    46e6:	e002      	b.n	46ee <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    46e8:	4b14      	ldr	r3, [pc, #80]	; (473c <nm_spi_init+0x148>)
    46ea:	4798      	blx	r3


	return M2M_SUCCESS;
    46ec:	2300      	movs	r3, #0
}
    46ee:	0018      	movs	r0, r3
    46f0:	46bd      	mov	sp, r7
    46f2:	b002      	add	sp, #8
    46f4:	bd80      	pop	{r7, pc}
    46f6:	46c0      	nop			; (mov r8, r8)
    46f8:	200000b0 	.word	0x200000b0
    46fc:	0000e824 	.word	0x0000e824
    4700:	00004185 	.word	0x00004185
    4704:	000004c7 	.word	0x000004c7
    4708:	0000e7f8 	.word	0x0000e7f8
    470c:	0000e1e4 	.word	0x0000e1e4
    4710:	0000c455 	.word	0x0000c455
    4714:	0000e668 	.word	0x0000e668
    4718:	0000c571 	.word	0x0000c571
    471c:	0000c489 	.word	0x0000c489
    4720:	000004ca 	.word	0x000004ca
    4724:	0000e6b8 	.word	0x0000e6b8
    4728:	00003e05 	.word	0x00003e05
    472c:	000004d4 	.word	0x000004d4
    4730:	0000e6e4 	.word	0x0000e6e4
    4734:	000004de 	.word	0x000004de
    4738:	0000e718 	.word	0x0000e718
    473c:	00004581 	.word	0x00004581

00004740 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    4740:	b580      	push	{r7, lr}
    4742:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    4744:	4b03      	ldr	r3, [pc, #12]	; (4754 <nm_spi_deinit+0x14>)
    4746:	2200      	movs	r2, #0
    4748:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    474a:	2300      	movs	r3, #0
}
    474c:	0018      	movs	r0, r3
    474e:	46bd      	mov	sp, r7
    4750:	bd80      	pop	{r7, pc}
    4752:	46c0      	nop			; (mov r8, r8)
    4754:	200000b0 	.word	0x200000b0

00004758 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    4758:	b580      	push	{r7, lr}
    475a:	b084      	sub	sp, #16
    475c:	af00      	add	r7, sp, #0
    475e:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    4760:	230c      	movs	r3, #12
    4762:	18fa      	adds	r2, r7, r3
    4764:	687b      	ldr	r3, [r7, #4]
    4766:	0011      	movs	r1, r2
    4768:	0018      	movs	r0, r3
    476a:	4b03      	ldr	r3, [pc, #12]	; (4778 <nm_spi_read_reg+0x20>)
    476c:	4798      	blx	r3

	return u32Val;
    476e:	68fb      	ldr	r3, [r7, #12]
}
    4770:	0018      	movs	r0, r3
    4772:	46bd      	mov	sp, r7
    4774:	b004      	add	sp, #16
    4776:	bd80      	pop	{r7, pc}
    4778:	00004185 	.word	0x00004185

0000477c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    477c:	b590      	push	{r4, r7, lr}
    477e:	b085      	sub	sp, #20
    4780:	af00      	add	r7, sp, #0
    4782:	6078      	str	r0, [r7, #4]
    4784:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    4786:	230f      	movs	r3, #15
    4788:	18fc      	adds	r4, r7, r3
    478a:	683a      	ldr	r2, [r7, #0]
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	0011      	movs	r1, r2
    4790:	0018      	movs	r0, r3
    4792:	4b0d      	ldr	r3, [pc, #52]	; (47c8 <nm_spi_read_reg_with_ret+0x4c>)
    4794:	4798      	blx	r3
    4796:	0003      	movs	r3, r0
    4798:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    479a:	230f      	movs	r3, #15
    479c:	18fb      	adds	r3, r7, r3
    479e:	781b      	ldrb	r3, [r3, #0]
    47a0:	b25b      	sxtb	r3, r3
    47a2:	2b01      	cmp	r3, #1
    47a4:	d104      	bne.n	47b0 <nm_spi_read_reg_with_ret+0x34>
    47a6:	230f      	movs	r3, #15
    47a8:	18fb      	adds	r3, r7, r3
    47aa:	2200      	movs	r2, #0
    47ac:	701a      	strb	r2, [r3, #0]
    47ae:	e003      	b.n	47b8 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    47b0:	230f      	movs	r3, #15
    47b2:	18fb      	adds	r3, r7, r3
    47b4:	22fa      	movs	r2, #250	; 0xfa
    47b6:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    47b8:	230f      	movs	r3, #15
    47ba:	18fb      	adds	r3, r7, r3
    47bc:	781b      	ldrb	r3, [r3, #0]
    47be:	b25b      	sxtb	r3, r3
}
    47c0:	0018      	movs	r0, r3
    47c2:	46bd      	mov	sp, r7
    47c4:	b005      	add	sp, #20
    47c6:	bd90      	pop	{r4, r7, pc}
    47c8:	00004185 	.word	0x00004185

000047cc <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    47cc:	b590      	push	{r4, r7, lr}
    47ce:	b085      	sub	sp, #20
    47d0:	af00      	add	r7, sp, #0
    47d2:	6078      	str	r0, [r7, #4]
    47d4:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    47d6:	230f      	movs	r3, #15
    47d8:	18fc      	adds	r4, r7, r3
    47da:	683a      	ldr	r2, [r7, #0]
    47dc:	687b      	ldr	r3, [r7, #4]
    47de:	0011      	movs	r1, r2
    47e0:	0018      	movs	r0, r3
    47e2:	4b0d      	ldr	r3, [pc, #52]	; (4818 <nm_spi_write_reg+0x4c>)
    47e4:	4798      	blx	r3
    47e6:	0003      	movs	r3, r0
    47e8:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    47ea:	230f      	movs	r3, #15
    47ec:	18fb      	adds	r3, r7, r3
    47ee:	781b      	ldrb	r3, [r3, #0]
    47f0:	b25b      	sxtb	r3, r3
    47f2:	2b01      	cmp	r3, #1
    47f4:	d104      	bne.n	4800 <nm_spi_write_reg+0x34>
    47f6:	230f      	movs	r3, #15
    47f8:	18fb      	adds	r3, r7, r3
    47fa:	2200      	movs	r2, #0
    47fc:	701a      	strb	r2, [r3, #0]
    47fe:	e003      	b.n	4808 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4800:	230f      	movs	r3, #15
    4802:	18fb      	adds	r3, r7, r3
    4804:	22fa      	movs	r2, #250	; 0xfa
    4806:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4808:	230f      	movs	r3, #15
    480a:	18fb      	adds	r3, r7, r3
    480c:	781b      	ldrb	r3, [r3, #0]
    480e:	b25b      	sxtb	r3, r3
}
    4810:	0018      	movs	r0, r3
    4812:	46bd      	mov	sp, r7
    4814:	b005      	add	sp, #20
    4816:	bd90      	pop	{r4, r7, pc}
    4818:	00003e05 	.word	0x00003e05

0000481c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    481c:	b590      	push	{r4, r7, lr}
    481e:	b087      	sub	sp, #28
    4820:	af00      	add	r7, sp, #0
    4822:	60f8      	str	r0, [r7, #12]
    4824:	60b9      	str	r1, [r7, #8]
    4826:	1dbb      	adds	r3, r7, #6
    4828:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    482a:	2317      	movs	r3, #23
    482c:	18fc      	adds	r4, r7, r3
    482e:	1dbb      	adds	r3, r7, #6
    4830:	881a      	ldrh	r2, [r3, #0]
    4832:	68b9      	ldr	r1, [r7, #8]
    4834:	68fb      	ldr	r3, [r7, #12]
    4836:	0018      	movs	r0, r3
    4838:	4b0d      	ldr	r3, [pc, #52]	; (4870 <nm_spi_read_block+0x54>)
    483a:	4798      	blx	r3
    483c:	0003      	movs	r3, r0
    483e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4840:	2317      	movs	r3, #23
    4842:	18fb      	adds	r3, r7, r3
    4844:	781b      	ldrb	r3, [r3, #0]
    4846:	b25b      	sxtb	r3, r3
    4848:	2b01      	cmp	r3, #1
    484a:	d104      	bne.n	4856 <nm_spi_read_block+0x3a>
    484c:	2317      	movs	r3, #23
    484e:	18fb      	adds	r3, r7, r3
    4850:	2200      	movs	r2, #0
    4852:	701a      	strb	r2, [r3, #0]
    4854:	e003      	b.n	485e <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4856:	2317      	movs	r3, #23
    4858:	18fb      	adds	r3, r7, r3
    485a:	22fa      	movs	r2, #250	; 0xfa
    485c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    485e:	2317      	movs	r3, #23
    4860:	18fb      	adds	r3, r7, r3
    4862:	781b      	ldrb	r3, [r3, #0]
    4864:	b25b      	sxtb	r3, r3
}
    4866:	0018      	movs	r0, r3
    4868:	46bd      	mov	sp, r7
    486a:	b007      	add	sp, #28
    486c:	bd90      	pop	{r4, r7, pc}
    486e:	46c0      	nop			; (mov r8, r8)
    4870:	0000438d 	.word	0x0000438d

00004874 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4874:	b590      	push	{r4, r7, lr}
    4876:	b087      	sub	sp, #28
    4878:	af00      	add	r7, sp, #0
    487a:	60f8      	str	r0, [r7, #12]
    487c:	60b9      	str	r1, [r7, #8]
    487e:	1dbb      	adds	r3, r7, #6
    4880:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    4882:	2317      	movs	r3, #23
    4884:	18fc      	adds	r4, r7, r3
    4886:	1dbb      	adds	r3, r7, #6
    4888:	881a      	ldrh	r2, [r3, #0]
    488a:	68b9      	ldr	r1, [r7, #8]
    488c:	68fb      	ldr	r3, [r7, #12]
    488e:	0018      	movs	r0, r3
    4890:	4b0d      	ldr	r3, [pc, #52]	; (48c8 <nm_spi_write_block+0x54>)
    4892:	4798      	blx	r3
    4894:	0003      	movs	r3, r0
    4896:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4898:	2317      	movs	r3, #23
    489a:	18fb      	adds	r3, r7, r3
    489c:	781b      	ldrb	r3, [r3, #0]
    489e:	b25b      	sxtb	r3, r3
    48a0:	2b01      	cmp	r3, #1
    48a2:	d104      	bne.n	48ae <nm_spi_write_block+0x3a>
    48a4:	2317      	movs	r3, #23
    48a6:	18fb      	adds	r3, r7, r3
    48a8:	2200      	movs	r2, #0
    48aa:	701a      	strb	r2, [r3, #0]
    48ac:	e003      	b.n	48b6 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    48ae:	2317      	movs	r3, #23
    48b0:	18fb      	adds	r3, r7, r3
    48b2:	22fa      	movs	r2, #250	; 0xfa
    48b4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    48b6:	2317      	movs	r3, #23
    48b8:	18fb      	adds	r3, r7, r3
    48ba:	781b      	ldrb	r3, [r3, #0]
    48bc:	b25b      	sxtb	r3, r3
}
    48be:	0018      	movs	r0, r3
    48c0:	46bd      	mov	sp, r7
    48c2:	b007      	add	sp, #28
    48c4:	bd90      	pop	{r4, r7, pc}
    48c6:	46c0      	nop			; (mov r8, r8)
    48c8:	00003f91 	.word	0x00003f91

000048cc <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    48cc:	b590      	push	{r4, r7, lr}
    48ce:	b089      	sub	sp, #36	; 0x24
    48d0:	af00      	add	r7, sp, #0
    48d2:	60b9      	str	r1, [r7, #8]
    48d4:	0011      	movs	r1, r2
    48d6:	607b      	str	r3, [r7, #4]
    48d8:	230f      	movs	r3, #15
    48da:	18fb      	adds	r3, r7, r3
    48dc:	1c02      	adds	r2, r0, #0
    48de:	701a      	strb	r2, [r3, #0]
    48e0:	230e      	movs	r3, #14
    48e2:	18fb      	adds	r3, r7, r3
    48e4:	1c0a      	adds	r2, r1, #0
    48e6:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    48e8:	2330      	movs	r3, #48	; 0x30
    48ea:	18fb      	adds	r3, r7, r3
    48ec:	881b      	ldrh	r3, [r3, #0]
    48ee:	2b00      	cmp	r3, #0
    48f0:	d100      	bne.n	48f4 <Socket_ReadSocketData+0x28>
    48f2:	e0d6      	b.n	4aa2 <Socket_ReadSocketData+0x1d6>
    48f4:	230f      	movs	r3, #15
    48f6:	18fb      	adds	r3, r7, r3
    48f8:	2200      	movs	r2, #0
    48fa:	569a      	ldrsb	r2, [r3, r2]
    48fc:	4b6b      	ldr	r3, [pc, #428]	; (4aac <Socket_ReadSocketData+0x1e0>)
    48fe:	0112      	lsls	r2, r2, #4
    4900:	58d3      	ldr	r3, [r2, r3]
    4902:	2b00      	cmp	r3, #0
    4904:	d100      	bne.n	4908 <Socket_ReadSocketData+0x3c>
    4906:	e0cc      	b.n	4aa2 <Socket_ReadSocketData+0x1d6>
    4908:	230f      	movs	r3, #15
    490a:	18fb      	adds	r3, r7, r3
    490c:	781b      	ldrb	r3, [r3, #0]
    490e:	b25b      	sxtb	r3, r3
    4910:	4a66      	ldr	r2, [pc, #408]	; (4aac <Socket_ReadSocketData+0x1e0>)
    4912:	011b      	lsls	r3, r3, #4
    4914:	18d3      	adds	r3, r2, r3
    4916:	3304      	adds	r3, #4
    4918:	881b      	ldrh	r3, [r3, #0]
    491a:	b29b      	uxth	r3, r3
    491c:	2b00      	cmp	r3, #0
    491e:	d100      	bne.n	4922 <Socket_ReadSocketData+0x56>
    4920:	e0bf      	b.n	4aa2 <Socket_ReadSocketData+0x1d6>
    4922:	230f      	movs	r3, #15
    4924:	18fb      	adds	r3, r7, r3
    4926:	781b      	ldrb	r3, [r3, #0]
    4928:	b25b      	sxtb	r3, r3
    492a:	4a60      	ldr	r2, [pc, #384]	; (4aac <Socket_ReadSocketData+0x1e0>)
    492c:	011b      	lsls	r3, r3, #4
    492e:	18d3      	adds	r3, r2, r3
    4930:	330a      	adds	r3, #10
    4932:	781b      	ldrb	r3, [r3, #0]
    4934:	b2db      	uxtb	r3, r3
    4936:	2b01      	cmp	r3, #1
    4938:	d000      	beq.n	493c <Socket_ReadSocketData+0x70>
    493a:	e0b2      	b.n	4aa2 <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    493c:	687b      	ldr	r3, [r7, #4]
    493e:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    4940:	68bb      	ldr	r3, [r7, #8]
    4942:	2230      	movs	r2, #48	; 0x30
    4944:	18ba      	adds	r2, r7, r2
    4946:	8812      	ldrh	r2, [r2, #0]
    4948:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    494a:	2319      	movs	r3, #25
    494c:	18fb      	adds	r3, r7, r3
    494e:	2201      	movs	r2, #1
    4950:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    4952:	231a      	movs	r3, #26
    4954:	18fb      	adds	r3, r7, r3
    4956:	2230      	movs	r2, #48	; 0x30
    4958:	18ba      	adds	r2, r7, r2
    495a:	8812      	ldrh	r2, [r2, #0]
    495c:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    495e:	230f      	movs	r3, #15
    4960:	18fb      	adds	r3, r7, r3
    4962:	781b      	ldrb	r3, [r3, #0]
    4964:	b25b      	sxtb	r3, r3
    4966:	4a51      	ldr	r2, [pc, #324]	; (4aac <Socket_ReadSocketData+0x1e0>)
    4968:	011b      	lsls	r3, r3, #4
    496a:	18d3      	adds	r3, r2, r3
    496c:	3304      	adds	r3, #4
    496e:	881b      	ldrh	r3, [r3, #0]
    4970:	b29b      	uxth	r3, r3
    4972:	221a      	movs	r2, #26
    4974:	18ba      	adds	r2, r7, r2
    4976:	8812      	ldrh	r2, [r2, #0]
    4978:	1ad3      	subs	r3, r2, r3
    497a:	b29a      	uxth	r2, r3
    497c:	2316      	movs	r3, #22
    497e:	18fb      	adds	r3, r7, r3
    4980:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    4982:	2316      	movs	r3, #22
    4984:	18fb      	adds	r3, r7, r3
    4986:	2200      	movs	r2, #0
    4988:	5e9b      	ldrsh	r3, [r3, r2]
    498a:	2b00      	cmp	r3, #0
    498c:	dd0f      	ble.n	49ae <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    498e:	2319      	movs	r3, #25
    4990:	18fb      	adds	r3, r7, r3
    4992:	2200      	movs	r2, #0
    4994:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    4996:	230f      	movs	r3, #15
    4998:	18fb      	adds	r3, r7, r3
    499a:	2200      	movs	r2, #0
    499c:	569a      	ldrsb	r2, [r3, r2]
    499e:	231a      	movs	r3, #26
    49a0:	18fb      	adds	r3, r7, r3
    49a2:	4942      	ldr	r1, [pc, #264]	; (4aac <Socket_ReadSocketData+0x1e0>)
    49a4:	0112      	lsls	r2, r2, #4
    49a6:	188a      	adds	r2, r1, r2
    49a8:	3204      	adds	r2, #4
    49aa:	8812      	ldrh	r2, [r2, #0]
    49ac:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    49ae:	230f      	movs	r3, #15
    49b0:	18fb      	adds	r3, r7, r3
    49b2:	2200      	movs	r2, #0
    49b4:	569a      	ldrsb	r2, [r3, r2]
    49b6:	4b3d      	ldr	r3, [pc, #244]	; (4aac <Socket_ReadSocketData+0x1e0>)
    49b8:	0112      	lsls	r2, r2, #4
    49ba:	58d1      	ldr	r1, [r2, r3]
    49bc:	2319      	movs	r3, #25
    49be:	18fb      	adds	r3, r7, r3
    49c0:	781c      	ldrb	r4, [r3, #0]
    49c2:	231a      	movs	r3, #26
    49c4:	18fb      	adds	r3, r7, r3
    49c6:	881a      	ldrh	r2, [r3, #0]
    49c8:	69f8      	ldr	r0, [r7, #28]
    49ca:	0023      	movs	r3, r4
    49cc:	4c38      	ldr	r4, [pc, #224]	; (4ab0 <Socket_ReadSocketData+0x1e4>)
    49ce:	47a0      	blx	r4
    49d0:	1e03      	subs	r3, r0, #0
    49d2:	d14f      	bne.n	4a74 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    49d4:	230f      	movs	r3, #15
    49d6:	18fb      	adds	r3, r7, r3
    49d8:	2200      	movs	r2, #0
    49da:	569a      	ldrsb	r2, [r3, r2]
    49dc:	4b33      	ldr	r3, [pc, #204]	; (4aac <Socket_ReadSocketData+0x1e0>)
    49de:	0112      	lsls	r2, r2, #4
    49e0:	58d2      	ldr	r2, [r2, r3]
    49e2:	68bb      	ldr	r3, [r7, #8]
    49e4:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    49e6:	231a      	movs	r3, #26
    49e8:	18fb      	adds	r3, r7, r3
    49ea:	2200      	movs	r2, #0
    49ec:	5e9a      	ldrsh	r2, [r3, r2]
    49ee:	68bb      	ldr	r3, [r7, #8]
    49f0:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    49f2:	68bb      	ldr	r3, [r7, #8]
    49f4:	88da      	ldrh	r2, [r3, #6]
    49f6:	231a      	movs	r3, #26
    49f8:	18fb      	adds	r3, r7, r3
    49fa:	881b      	ldrh	r3, [r3, #0]
    49fc:	1ad3      	subs	r3, r2, r3
    49fe:	b29a      	uxth	r2, r3
    4a00:	68bb      	ldr	r3, [r7, #8]
    4a02:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    4a04:	4b2b      	ldr	r3, [pc, #172]	; (4ab4 <Socket_ReadSocketData+0x1e8>)
    4a06:	681b      	ldr	r3, [r3, #0]
    4a08:	2b00      	cmp	r3, #0
    4a0a:	d00b      	beq.n	4a24 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    4a0c:	4b29      	ldr	r3, [pc, #164]	; (4ab4 <Socket_ReadSocketData+0x1e8>)
    4a0e:	681b      	ldr	r3, [r3, #0]
    4a10:	68bc      	ldr	r4, [r7, #8]
    4a12:	220e      	movs	r2, #14
    4a14:	18ba      	adds	r2, r7, r2
    4a16:	7811      	ldrb	r1, [r2, #0]
    4a18:	220f      	movs	r2, #15
    4a1a:	18ba      	adds	r2, r7, r2
    4a1c:	2000      	movs	r0, #0
    4a1e:	5610      	ldrsb	r0, [r2, r0]
    4a20:	0022      	movs	r2, r4
    4a22:	4798      	blx	r3

				u16ReadCount -= u16Read;
    4a24:	2330      	movs	r3, #48	; 0x30
    4a26:	18f9      	adds	r1, r7, r3
    4a28:	2330      	movs	r3, #48	; 0x30
    4a2a:	18fa      	adds	r2, r7, r3
    4a2c:	231a      	movs	r3, #26
    4a2e:	18fb      	adds	r3, r7, r3
    4a30:	8812      	ldrh	r2, [r2, #0]
    4a32:	881b      	ldrh	r3, [r3, #0]
    4a34:	1ad3      	subs	r3, r2, r3
    4a36:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    4a38:	231a      	movs	r3, #26
    4a3a:	18fb      	adds	r3, r7, r3
    4a3c:	881b      	ldrh	r3, [r3, #0]
    4a3e:	69fa      	ldr	r2, [r7, #28]
    4a40:	18d3      	adds	r3, r2, r3
    4a42:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    4a44:	230f      	movs	r3, #15
    4a46:	18fb      	adds	r3, r7, r3
    4a48:	781b      	ldrb	r3, [r3, #0]
    4a4a:	b25b      	sxtb	r3, r3
    4a4c:	4a17      	ldr	r2, [pc, #92]	; (4aac <Socket_ReadSocketData+0x1e0>)
    4a4e:	011b      	lsls	r3, r3, #4
    4a50:	18d3      	adds	r3, r2, r3
    4a52:	330a      	adds	r3, #10
    4a54:	781b      	ldrb	r3, [r3, #0]
    4a56:	b2db      	uxtb	r3, r3
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d11b      	bne.n	4a94 <Socket_ReadSocketData+0x1c8>
    4a5c:	2330      	movs	r3, #48	; 0x30
    4a5e:	18fb      	adds	r3, r7, r3
    4a60:	881b      	ldrh	r3, [r3, #0]
    4a62:	2b00      	cmp	r3, #0
    4a64:	d016      	beq.n	4a94 <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    4a66:	2301      	movs	r3, #1
    4a68:	2200      	movs	r2, #0
    4a6a:	2100      	movs	r1, #0
    4a6c:	2000      	movs	r0, #0
    4a6e:	4c10      	ldr	r4, [pc, #64]	; (4ab0 <Socket_ReadSocketData+0x1e4>)
    4a70:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    4a72:	e016      	b.n	4aa2 <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    4a74:	4b10      	ldr	r3, [pc, #64]	; (4ab8 <Socket_ReadSocketData+0x1ec>)
    4a76:	0018      	movs	r0, r3
    4a78:	4b10      	ldr	r3, [pc, #64]	; (4abc <Socket_ReadSocketData+0x1f0>)
    4a7a:	4798      	blx	r3
    4a7c:	2330      	movs	r3, #48	; 0x30
    4a7e:	18fb      	adds	r3, r7, r3
    4a80:	881a      	ldrh	r2, [r3, #0]
    4a82:	4b0f      	ldr	r3, [pc, #60]	; (4ac0 <Socket_ReadSocketData+0x1f4>)
    4a84:	0011      	movs	r1, r2
    4a86:	0018      	movs	r0, r3
    4a88:	4b0c      	ldr	r3, [pc, #48]	; (4abc <Socket_ReadSocketData+0x1f0>)
    4a8a:	4798      	blx	r3
    4a8c:	200d      	movs	r0, #13
    4a8e:	4b0d      	ldr	r3, [pc, #52]	; (4ac4 <Socket_ReadSocketData+0x1f8>)
    4a90:	4798      	blx	r3
				break;
    4a92:	e006      	b.n	4aa2 <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    4a94:	2330      	movs	r3, #48	; 0x30
    4a96:	18fb      	adds	r3, r7, r3
    4a98:	881b      	ldrh	r3, [r3, #0]
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d000      	beq.n	4aa0 <Socket_ReadSocketData+0x1d4>
    4a9e:	e754      	b.n	494a <Socket_ReadSocketData+0x7e>
	}
}
    4aa0:	e7ff      	b.n	4aa2 <Socket_ReadSocketData+0x1d6>
    4aa2:	46c0      	nop			; (mov r8, r8)
    4aa4:	46bd      	mov	sp, r7
    4aa6:	b009      	add	sp, #36	; 0x24
    4aa8:	bd90      	pop	{r4, r7, pc}
    4aaa:	46c0      	nop			; (mov r8, r8)
    4aac:	2000033c 	.word	0x2000033c
    4ab0:	00001835 	.word	0x00001835
    4ab4:	200003ec 	.word	0x200003ec
    4ab8:	0000e804 	.word	0x0000e804
    4abc:	0000c455 	.word	0x0000c455
    4ac0:	0000e810 	.word	0x0000e810
    4ac4:	0000c489 	.word	0x0000c489

00004ac8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    4ac8:	b590      	push	{r4, r7, lr}
    4aca:	b0bb      	sub	sp, #236	; 0xec
    4acc:	af02      	add	r7, sp, #8
    4ace:	603a      	str	r2, [r7, #0]
    4ad0:	1dfb      	adds	r3, r7, #7
    4ad2:	1c02      	adds	r2, r0, #0
    4ad4:	701a      	strb	r2, [r3, #0]
    4ad6:	1d3b      	adds	r3, r7, #4
    4ad8:	1c0a      	adds	r2, r1, #0
    4ada:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    4adc:	1dfb      	adds	r3, r7, #7
    4ade:	781b      	ldrb	r3, [r3, #0]
    4ae0:	2b41      	cmp	r3, #65	; 0x41
    4ae2:	d003      	beq.n	4aec <m2m_ip_cb+0x24>
    4ae4:	1dfb      	adds	r3, r7, #7
    4ae6:	781b      	ldrb	r3, [r3, #0]
    4ae8:	2b54      	cmp	r3, #84	; 0x54
    4aea:	d120      	bne.n	4b2e <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    4aec:	23cc      	movs	r3, #204	; 0xcc
    4aee:	18f9      	adds	r1, r7, r3
    4af0:	6838      	ldr	r0, [r7, #0]
    4af2:	2300      	movs	r3, #0
    4af4:	2204      	movs	r2, #4
    4af6:	4c98      	ldr	r4, [pc, #608]	; (4d58 <m2m_ip_cb+0x290>)
    4af8:	47a0      	blx	r4
    4afa:	1e03      	subs	r3, r0, #0
    4afc:	d000      	beq.n	4b00 <m2m_ip_cb+0x38>
    4afe:	e275      	b.n	4fec <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    4b00:	23cc      	movs	r3, #204	; 0xcc
    4b02:	18fb      	adds	r3, r7, r3
    4b04:	2201      	movs	r2, #1
    4b06:	569a      	ldrsb	r2, [r3, r2]
    4b08:	23c8      	movs	r3, #200	; 0xc8
    4b0a:	18fb      	adds	r3, r7, r3
    4b0c:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4b0e:	4b93      	ldr	r3, [pc, #588]	; (4d5c <m2m_ip_cb+0x294>)
    4b10:	681b      	ldr	r3, [r3, #0]
    4b12:	2b00      	cmp	r3, #0
    4b14:	d100      	bne.n	4b18 <m2m_ip_cb+0x50>
    4b16:	e269      	b.n	4fec <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    4b18:	4b90      	ldr	r3, [pc, #576]	; (4d5c <m2m_ip_cb+0x294>)
    4b1a:	681b      	ldr	r3, [r3, #0]
    4b1c:	22cc      	movs	r2, #204	; 0xcc
    4b1e:	18ba      	adds	r2, r7, r2
    4b20:	2000      	movs	r0, #0
    4b22:	5610      	ldrsb	r0, [r2, r0]
    4b24:	22c8      	movs	r2, #200	; 0xc8
    4b26:	18ba      	adds	r2, r7, r2
    4b28:	2101      	movs	r1, #1
    4b2a:	4798      	blx	r3
	{
    4b2c:	e25e      	b.n	4fec <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    4b2e:	1dfb      	adds	r3, r7, #7
    4b30:	781b      	ldrb	r3, [r3, #0]
    4b32:	2b42      	cmp	r3, #66	; 0x42
    4b34:	d120      	bne.n	4b78 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    4b36:	23c4      	movs	r3, #196	; 0xc4
    4b38:	18f9      	adds	r1, r7, r3
    4b3a:	6838      	ldr	r0, [r7, #0]
    4b3c:	2300      	movs	r3, #0
    4b3e:	2204      	movs	r2, #4
    4b40:	4c85      	ldr	r4, [pc, #532]	; (4d58 <m2m_ip_cb+0x290>)
    4b42:	47a0      	blx	r4
    4b44:	1e03      	subs	r3, r0, #0
    4b46:	d000      	beq.n	4b4a <m2m_ip_cb+0x82>
    4b48:	e257      	b.n	4ffa <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    4b4a:	23c4      	movs	r3, #196	; 0xc4
    4b4c:	18fb      	adds	r3, r7, r3
    4b4e:	2201      	movs	r2, #1
    4b50:	569a      	ldrsb	r2, [r3, r2]
    4b52:	23c0      	movs	r3, #192	; 0xc0
    4b54:	18fb      	adds	r3, r7, r3
    4b56:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4b58:	4b80      	ldr	r3, [pc, #512]	; (4d5c <m2m_ip_cb+0x294>)
    4b5a:	681b      	ldr	r3, [r3, #0]
    4b5c:	2b00      	cmp	r3, #0
    4b5e:	d100      	bne.n	4b62 <m2m_ip_cb+0x9a>
    4b60:	e24b      	b.n	4ffa <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    4b62:	4b7e      	ldr	r3, [pc, #504]	; (4d5c <m2m_ip_cb+0x294>)
    4b64:	681b      	ldr	r3, [r3, #0]
    4b66:	22c4      	movs	r2, #196	; 0xc4
    4b68:	18ba      	adds	r2, r7, r2
    4b6a:	2000      	movs	r0, #0
    4b6c:	5610      	ldrsb	r0, [r2, r0]
    4b6e:	22c0      	movs	r2, #192	; 0xc0
    4b70:	18ba      	adds	r2, r7, r2
    4b72:	2102      	movs	r1, #2
    4b74:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    4b76:	e240      	b.n	4ffa <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    4b78:	1dfb      	adds	r3, r7, #7
    4b7a:	781b      	ldrb	r3, [r3, #0]
    4b7c:	2b43      	cmp	r3, #67	; 0x43
    4b7e:	d000      	beq.n	4b82 <m2m_ip_cb+0xba>
    4b80:	e086      	b.n	4c90 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    4b82:	23b4      	movs	r3, #180	; 0xb4
    4b84:	18f9      	adds	r1, r7, r3
    4b86:	6838      	ldr	r0, [r7, #0]
    4b88:	2300      	movs	r3, #0
    4b8a:	220c      	movs	r2, #12
    4b8c:	4c72      	ldr	r4, [pc, #456]	; (4d58 <m2m_ip_cb+0x290>)
    4b8e:	47a0      	blx	r4
    4b90:	1e03      	subs	r3, r0, #0
    4b92:	d000      	beq.n	4b96 <m2m_ip_cb+0xce>
    4b94:	e231      	b.n	4ffa <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
    4b96:	23b4      	movs	r3, #180	; 0xb4
    4b98:	18fb      	adds	r3, r7, r3
    4b9a:	7a5b      	ldrb	r3, [r3, #9]
    4b9c:	b25b      	sxtb	r3, r3
    4b9e:	2b00      	cmp	r3, #0
    4ba0:	db4f      	blt.n	4c42 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    4ba2:	23b4      	movs	r3, #180	; 0xb4
    4ba4:	18fb      	adds	r3, r7, r3
    4ba6:	7a5b      	ldrb	r3, [r3, #9]
    4ba8:	b25b      	sxtb	r3, r3
    4baa:	0018      	movs	r0, r3
    4bac:	23b4      	movs	r3, #180	; 0xb4
    4bae:	18fb      	adds	r3, r7, r3
    4bb0:	7a1b      	ldrb	r3, [r3, #8]
    4bb2:	b25b      	sxtb	r3, r3
    4bb4:	4a6a      	ldr	r2, [pc, #424]	; (4d60 <m2m_ip_cb+0x298>)
    4bb6:	011b      	lsls	r3, r3, #4
    4bb8:	18d3      	adds	r3, r2, r3
    4bba:	330b      	adds	r3, #11
    4bbc:	781b      	ldrb	r3, [r3, #0]
    4bbe:	b2d9      	uxtb	r1, r3
    4bc0:	4a67      	ldr	r2, [pc, #412]	; (4d60 <m2m_ip_cb+0x298>)
    4bc2:	0103      	lsls	r3, r0, #4
    4bc4:	18d3      	adds	r3, r2, r3
    4bc6:	330b      	adds	r3, #11
    4bc8:	1c0a      	adds	r2, r1, #0
    4bca:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    4bcc:	23b4      	movs	r3, #180	; 0xb4
    4bce:	18fb      	adds	r3, r7, r3
    4bd0:	7a5b      	ldrb	r3, [r3, #9]
    4bd2:	b25b      	sxtb	r3, r3
    4bd4:	4a62      	ldr	r2, [pc, #392]	; (4d60 <m2m_ip_cb+0x298>)
    4bd6:	011b      	lsls	r3, r3, #4
    4bd8:	18d3      	adds	r3, r2, r3
    4bda:	330a      	adds	r3, #10
    4bdc:	2201      	movs	r2, #1
    4bde:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4be0:	23b4      	movs	r3, #180	; 0xb4
    4be2:	18fb      	adds	r3, r7, r3
    4be4:	7a5b      	ldrb	r3, [r3, #9]
    4be6:	b25b      	sxtb	r3, r3
    4be8:	0018      	movs	r0, r3
    4bea:	23b4      	movs	r3, #180	; 0xb4
    4bec:	18fb      	adds	r3, r7, r3
    4bee:	895b      	ldrh	r3, [r3, #10]
    4bf0:	3b08      	subs	r3, #8
    4bf2:	b299      	uxth	r1, r3
    4bf4:	4a5a      	ldr	r2, [pc, #360]	; (4d60 <m2m_ip_cb+0x298>)
    4bf6:	0103      	lsls	r3, r0, #4
    4bf8:	18d3      	adds	r3, r2, r3
    4bfa:	3308      	adds	r3, #8
    4bfc:	1c0a      	adds	r2, r1, #0
    4bfe:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
    4c00:	4b58      	ldr	r3, [pc, #352]	; (4d64 <m2m_ip_cb+0x29c>)
    4c02:	881b      	ldrh	r3, [r3, #0]
    4c04:	b29b      	uxth	r3, r3
    4c06:	3301      	adds	r3, #1
    4c08:	b29a      	uxth	r2, r3
    4c0a:	4b56      	ldr	r3, [pc, #344]	; (4d64 <m2m_ip_cb+0x29c>)
    4c0c:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    4c0e:	4b55      	ldr	r3, [pc, #340]	; (4d64 <m2m_ip_cb+0x29c>)
    4c10:	881b      	ldrh	r3, [r3, #0]
    4c12:	b29b      	uxth	r3, r3
    4c14:	2b00      	cmp	r3, #0
    4c16:	d106      	bne.n	4c26 <m2m_ip_cb+0x15e>
					++gu16SessionID;
    4c18:	4b52      	ldr	r3, [pc, #328]	; (4d64 <m2m_ip_cb+0x29c>)
    4c1a:	881b      	ldrh	r3, [r3, #0]
    4c1c:	b29b      	uxth	r3, r3
    4c1e:	3301      	adds	r3, #1
    4c20:	b29a      	uxth	r2, r3
    4c22:	4b50      	ldr	r3, [pc, #320]	; (4d64 <m2m_ip_cb+0x29c>)
    4c24:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    4c26:	23b4      	movs	r3, #180	; 0xb4
    4c28:	18fb      	adds	r3, r7, r3
    4c2a:	7a5b      	ldrb	r3, [r3, #9]
    4c2c:	b25b      	sxtb	r3, r3
    4c2e:	0018      	movs	r0, r3
    4c30:	4b4c      	ldr	r3, [pc, #304]	; (4d64 <m2m_ip_cb+0x29c>)
    4c32:	881b      	ldrh	r3, [r3, #0]
    4c34:	b299      	uxth	r1, r3
    4c36:	4a4a      	ldr	r2, [pc, #296]	; (4d60 <m2m_ip_cb+0x298>)
    4c38:	0103      	lsls	r3, r0, #4
    4c3a:	18d3      	adds	r3, r2, r3
    4c3c:	3306      	adds	r3, #6
    4c3e:	1c0a      	adds	r2, r1, #0
    4c40:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    4c42:	23b4      	movs	r3, #180	; 0xb4
    4c44:	18fb      	adds	r3, r7, r3
    4c46:	2209      	movs	r2, #9
    4c48:	569a      	ldrsb	r2, [r3, r2]
    4c4a:	23a0      	movs	r3, #160	; 0xa0
    4c4c:	18fb      	adds	r3, r7, r3
    4c4e:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    4c50:	23a0      	movs	r3, #160	; 0xa0
    4c52:	18fb      	adds	r3, r7, r3
    4c54:	2202      	movs	r2, #2
    4c56:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    4c58:	23b4      	movs	r3, #180	; 0xb4
    4c5a:	18fb      	adds	r3, r7, r3
    4c5c:	885a      	ldrh	r2, [r3, #2]
    4c5e:	23a0      	movs	r3, #160	; 0xa0
    4c60:	18fb      	adds	r3, r7, r3
    4c62:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    4c64:	23b4      	movs	r3, #180	; 0xb4
    4c66:	18fb      	adds	r3, r7, r3
    4c68:	685a      	ldr	r2, [r3, #4]
    4c6a:	23a0      	movs	r3, #160	; 0xa0
    4c6c:	18fb      	adds	r3, r7, r3
    4c6e:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    4c70:	4b3a      	ldr	r3, [pc, #232]	; (4d5c <m2m_ip_cb+0x294>)
    4c72:	681b      	ldr	r3, [r3, #0]
    4c74:	2b00      	cmp	r3, #0
    4c76:	d100      	bne.n	4c7a <m2m_ip_cb+0x1b2>
    4c78:	e1bf      	b.n	4ffa <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    4c7a:	4b38      	ldr	r3, [pc, #224]	; (4d5c <m2m_ip_cb+0x294>)
    4c7c:	681b      	ldr	r3, [r3, #0]
    4c7e:	22b4      	movs	r2, #180	; 0xb4
    4c80:	18ba      	adds	r2, r7, r2
    4c82:	2008      	movs	r0, #8
    4c84:	5610      	ldrsb	r0, [r2, r0]
    4c86:	22a0      	movs	r2, #160	; 0xa0
    4c88:	18ba      	adds	r2, r7, r2
    4c8a:	2104      	movs	r1, #4
    4c8c:	4798      	blx	r3
}
    4c8e:	e1b4      	b.n	4ffa <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    4c90:	1dfb      	adds	r3, r7, #7
    4c92:	781b      	ldrb	r3, [r3, #0]
    4c94:	2b44      	cmp	r3, #68	; 0x44
    4c96:	d003      	beq.n	4ca0 <m2m_ip_cb+0x1d8>
    4c98:	1dfb      	adds	r3, r7, #7
    4c9a:	781b      	ldrb	r3, [r3, #0]
    4c9c:	2b4b      	cmp	r3, #75	; 0x4b
    4c9e:	d13d      	bne.n	4d1c <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    4ca0:	239c      	movs	r3, #156	; 0x9c
    4ca2:	18f9      	adds	r1, r7, r3
    4ca4:	6838      	ldr	r0, [r7, #0]
    4ca6:	2300      	movs	r3, #0
    4ca8:	2204      	movs	r2, #4
    4caa:	4c2b      	ldr	r4, [pc, #172]	; (4d58 <m2m_ip_cb+0x290>)
    4cac:	47a0      	blx	r4
    4cae:	1e03      	subs	r3, r0, #0
    4cb0:	d000      	beq.n	4cb4 <m2m_ip_cb+0x1ec>
    4cb2:	e19d      	b.n	4ff0 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
    4cb4:	239c      	movs	r3, #156	; 0x9c
    4cb6:	18fb      	adds	r3, r7, r3
    4cb8:	2200      	movs	r2, #0
    4cba:	569a      	ldrsb	r2, [r3, r2]
    4cbc:	2398      	movs	r3, #152	; 0x98
    4cbe:	18fb      	adds	r3, r7, r3
    4cc0:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    4cc2:	239c      	movs	r3, #156	; 0x9c
    4cc4:	18fb      	adds	r3, r7, r3
    4cc6:	2201      	movs	r2, #1
    4cc8:	569a      	ldrsb	r2, [r3, r2]
    4cca:	2398      	movs	r3, #152	; 0x98
    4ccc:	18fb      	adds	r3, r7, r3
    4cce:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    4cd0:	239c      	movs	r3, #156	; 0x9c
    4cd2:	18fb      	adds	r3, r7, r3
    4cd4:	785b      	ldrb	r3, [r3, #1]
    4cd6:	b25b      	sxtb	r3, r3
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d10f      	bne.n	4cfc <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4cdc:	239c      	movs	r3, #156	; 0x9c
    4cde:	18fb      	adds	r3, r7, r3
    4ce0:	781b      	ldrb	r3, [r3, #0]
    4ce2:	b25b      	sxtb	r3, r3
    4ce4:	0018      	movs	r0, r3
    4ce6:	239c      	movs	r3, #156	; 0x9c
    4ce8:	18fb      	adds	r3, r7, r3
    4cea:	885b      	ldrh	r3, [r3, #2]
    4cec:	3b08      	subs	r3, #8
    4cee:	b299      	uxth	r1, r3
    4cf0:	4a1b      	ldr	r2, [pc, #108]	; (4d60 <m2m_ip_cb+0x298>)
    4cf2:	0103      	lsls	r3, r0, #4
    4cf4:	18d3      	adds	r3, r2, r3
    4cf6:	3308      	adds	r3, #8
    4cf8:	1c0a      	adds	r2, r1, #0
    4cfa:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    4cfc:	4b17      	ldr	r3, [pc, #92]	; (4d5c <m2m_ip_cb+0x294>)
    4cfe:	681b      	ldr	r3, [r3, #0]
    4d00:	2b00      	cmp	r3, #0
    4d02:	d100      	bne.n	4d06 <m2m_ip_cb+0x23e>
    4d04:	e174      	b.n	4ff0 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    4d06:	4b15      	ldr	r3, [pc, #84]	; (4d5c <m2m_ip_cb+0x294>)
    4d08:	681b      	ldr	r3, [r3, #0]
    4d0a:	229c      	movs	r2, #156	; 0x9c
    4d0c:	18ba      	adds	r2, r7, r2
    4d0e:	2000      	movs	r0, #0
    4d10:	5610      	ldrsb	r0, [r2, r0]
    4d12:	2298      	movs	r2, #152	; 0x98
    4d14:	18ba      	adds	r2, r7, r2
    4d16:	2105      	movs	r1, #5
    4d18:	4798      	blx	r3
	{
    4d1a:	e169      	b.n	4ff0 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    4d1c:	1dfb      	adds	r3, r7, #7
    4d1e:	781b      	ldrb	r3, [r3, #0]
    4d20:	2b4a      	cmp	r3, #74	; 0x4a
    4d22:	d123      	bne.n	4d6c <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    4d24:	230c      	movs	r3, #12
    4d26:	18f9      	adds	r1, r7, r3
    4d28:	6838      	ldr	r0, [r7, #0]
    4d2a:	2300      	movs	r3, #0
    4d2c:	2244      	movs	r2, #68	; 0x44
    4d2e:	4c0a      	ldr	r4, [pc, #40]	; (4d58 <m2m_ip_cb+0x290>)
    4d30:	47a0      	blx	r4
    4d32:	1e03      	subs	r3, r0, #0
    4d34:	d000      	beq.n	4d38 <m2m_ip_cb+0x270>
    4d36:	e160      	b.n	4ffa <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
    4d38:	4b0b      	ldr	r3, [pc, #44]	; (4d68 <m2m_ip_cb+0x2a0>)
    4d3a:	681b      	ldr	r3, [r3, #0]
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	d100      	bne.n	4d42 <m2m_ip_cb+0x27a>
    4d40:	e15b      	b.n	4ffa <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    4d42:	4b09      	ldr	r3, [pc, #36]	; (4d68 <m2m_ip_cb+0x2a0>)
    4d44:	681a      	ldr	r2, [r3, #0]
    4d46:	230c      	movs	r3, #12
    4d48:	18fb      	adds	r3, r7, r3
    4d4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    4d4c:	230c      	movs	r3, #12
    4d4e:	18fb      	adds	r3, r7, r3
    4d50:	0018      	movs	r0, r3
    4d52:	4790      	blx	r2
}
    4d54:	e151      	b.n	4ffa <m2m_ip_cb+0x532>
    4d56:	46c0      	nop			; (mov r8, r8)
    4d58:	00001835 	.word	0x00001835
    4d5c:	200003ec 	.word	0x200003ec
    4d60:	2000033c 	.word	0x2000033c
    4d64:	200000b2 	.word	0x200000b2
    4d68:	200003f4 	.word	0x200003f4
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    4d6c:	1dfb      	adds	r3, r7, #7
    4d6e:	781b      	ldrb	r3, [r3, #0]
    4d70:	2b46      	cmp	r3, #70	; 0x46
    4d72:	d008      	beq.n	4d86 <m2m_ip_cb+0x2be>
    4d74:	1dfb      	adds	r3, r7, #7
    4d76:	781b      	ldrb	r3, [r3, #0]
    4d78:	2b48      	cmp	r3, #72	; 0x48
    4d7a:	d004      	beq.n	4d86 <m2m_ip_cb+0x2be>
    4d7c:	1dfb      	adds	r3, r7, #7
    4d7e:	781b      	ldrb	r3, [r3, #0]
    4d80:	2b4d      	cmp	r3, #77	; 0x4d
    4d82:	d000      	beq.n	4d86 <m2m_ip_cb+0x2be>
    4d84:	e0b4      	b.n	4ef0 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    4d86:	23df      	movs	r3, #223	; 0xdf
    4d88:	18fb      	adds	r3, r7, r3
    4d8a:	2206      	movs	r2, #6
    4d8c:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    4d8e:	1dfb      	adds	r3, r7, #7
    4d90:	781b      	ldrb	r3, [r3, #0]
    4d92:	2b48      	cmp	r3, #72	; 0x48
    4d94:	d103      	bne.n	4d9e <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    4d96:	23df      	movs	r3, #223	; 0xdf
    4d98:	18fb      	adds	r3, r7, r3
    4d9a:	2209      	movs	r2, #9
    4d9c:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    4d9e:	23d8      	movs	r3, #216	; 0xd8
    4da0:	18fb      	adds	r3, r7, r3
    4da2:	2210      	movs	r2, #16
    4da4:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    4da6:	23d8      	movs	r3, #216	; 0xd8
    4da8:	18fb      	adds	r3, r7, r3
    4daa:	881a      	ldrh	r2, [r3, #0]
    4dac:	2388      	movs	r3, #136	; 0x88
    4dae:	18f9      	adds	r1, r7, r3
    4db0:	6838      	ldr	r0, [r7, #0]
    4db2:	2300      	movs	r3, #0
    4db4:	4c93      	ldr	r4, [pc, #588]	; (5004 <m2m_ip_cb+0x53c>)
    4db6:	47a0      	blx	r4
    4db8:	1e03      	subs	r3, r0, #0
    4dba:	d000      	beq.n	4dbe <m2m_ip_cb+0x2f6>
    4dbc:	e11a      	b.n	4ff4 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
    4dbe:	23d6      	movs	r3, #214	; 0xd6
    4dc0:	18fb      	adds	r3, r7, r3
    4dc2:	2200      	movs	r2, #0
    4dc4:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    4dc6:	23d5      	movs	r3, #213	; 0xd5
    4dc8:	18fb      	adds	r3, r7, r3
    4dca:	2288      	movs	r2, #136	; 0x88
    4dcc:	18ba      	adds	r2, r7, r2
    4dce:	7b12      	ldrb	r2, [r2, #12]
    4dd0:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    4dd2:	23d6      	movs	r3, #214	; 0xd6
    4dd4:	18fb      	adds	r3, r7, r3
    4dd6:	2288      	movs	r2, #136	; 0x88
    4dd8:	18ba      	adds	r2, r7, r2
    4dda:	89d2      	ldrh	r2, [r2, #14]
    4ddc:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    4dde:	23d5      	movs	r3, #213	; 0xd5
    4de0:	18fb      	adds	r3, r7, r3
    4de2:	781b      	ldrb	r3, [r3, #0]
    4de4:	b25b      	sxtb	r3, r3
    4de6:	4a88      	ldr	r2, [pc, #544]	; (5008 <m2m_ip_cb+0x540>)
    4de8:	011b      	lsls	r3, r3, #4
    4dea:	18d3      	adds	r3, r2, r3
    4dec:	330c      	adds	r3, #12
    4dee:	2200      	movs	r2, #0
    4df0:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    4df2:	23d2      	movs	r3, #210	; 0xd2
    4df4:	18fb      	adds	r3, r7, r3
    4df6:	2288      	movs	r2, #136	; 0x88
    4df8:	18ba      	adds	r2, r7, r2
    4dfa:	8912      	ldrh	r2, [r2, #8]
    4dfc:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    4dfe:	23d0      	movs	r3, #208	; 0xd0
    4e00:	18fb      	adds	r3, r7, r3
    4e02:	2288      	movs	r2, #136	; 0x88
    4e04:	18ba      	adds	r2, r7, r2
    4e06:	8952      	ldrh	r2, [r2, #10]
    4e08:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    4e0a:	2388      	movs	r3, #136	; 0x88
    4e0c:	18fb      	adds	r3, r7, r3
    4e0e:	885a      	ldrh	r2, [r3, #2]
    4e10:	2370      	movs	r3, #112	; 0x70
    4e12:	18fb      	adds	r3, r7, r3
    4e14:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    4e16:	2388      	movs	r3, #136	; 0x88
    4e18:	18fb      	adds	r3, r7, r3
    4e1a:	685a      	ldr	r2, [r3, #4]
    4e1c:	2370      	movs	r3, #112	; 0x70
    4e1e:	18fb      	adds	r3, r7, r3
    4e20:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4e22:	23d5      	movs	r3, #213	; 0xd5
    4e24:	18fb      	adds	r3, r7, r3
    4e26:	781b      	ldrb	r3, [r3, #0]
    4e28:	b25b      	sxtb	r3, r3
    4e2a:	4a77      	ldr	r2, [pc, #476]	; (5008 <m2m_ip_cb+0x540>)
    4e2c:	011b      	lsls	r3, r3, #4
    4e2e:	18d3      	adds	r3, r2, r3
    4e30:	3306      	adds	r3, #6
    4e32:	881b      	ldrh	r3, [r3, #0]
    4e34:	b29b      	uxth	r3, r3
    4e36:	22d6      	movs	r2, #214	; 0xd6
    4e38:	18ba      	adds	r2, r7, r2
    4e3a:	8812      	ldrh	r2, [r2, #0]
    4e3c:	429a      	cmp	r2, r3
    4e3e:	d148      	bne.n	4ed2 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    4e40:	23d2      	movs	r3, #210	; 0xd2
    4e42:	18fb      	adds	r3, r7, r3
    4e44:	2200      	movs	r2, #0
    4e46:	5e9b      	ldrsh	r3, [r3, r2]
    4e48:	2b00      	cmp	r3, #0
    4e4a:	dd25      	ble.n	4e98 <m2m_ip_cb+0x3d0>
    4e4c:	23d2      	movs	r3, #210	; 0xd2
    4e4e:	18fb      	adds	r3, r7, r3
    4e50:	2200      	movs	r2, #0
    4e52:	5e9a      	ldrsh	r2, [r3, r2]
    4e54:	1d3b      	adds	r3, r7, #4
    4e56:	881b      	ldrh	r3, [r3, #0]
    4e58:	429a      	cmp	r2, r3
    4e5a:	da1d      	bge.n	4e98 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
    4e5c:	23d0      	movs	r3, #208	; 0xd0
    4e5e:	18fb      	adds	r3, r7, r3
    4e60:	881b      	ldrh	r3, [r3, #0]
    4e62:	683a      	ldr	r2, [r7, #0]
    4e64:	18d3      	adds	r3, r2, r3
    4e66:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    4e68:	23d8      	movs	r3, #216	; 0xd8
    4e6a:	18fb      	adds	r3, r7, r3
    4e6c:	22d2      	movs	r2, #210	; 0xd2
    4e6e:	18ba      	adds	r2, r7, r2
    4e70:	8812      	ldrh	r2, [r2, #0]
    4e72:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    4e74:	683c      	ldr	r4, [r7, #0]
    4e76:	23df      	movs	r3, #223	; 0xdf
    4e78:	18fb      	adds	r3, r7, r3
    4e7a:	781a      	ldrb	r2, [r3, #0]
    4e7c:	2370      	movs	r3, #112	; 0x70
    4e7e:	18f9      	adds	r1, r7, r3
    4e80:	23d5      	movs	r3, #213	; 0xd5
    4e82:	18fb      	adds	r3, r7, r3
    4e84:	2000      	movs	r0, #0
    4e86:	5618      	ldrsb	r0, [r3, r0]
    4e88:	23d8      	movs	r3, #216	; 0xd8
    4e8a:	18fb      	adds	r3, r7, r3
    4e8c:	881b      	ldrh	r3, [r3, #0]
    4e8e:	9300      	str	r3, [sp, #0]
    4e90:	0023      	movs	r3, r4
    4e92:	4c5e      	ldr	r4, [pc, #376]	; (500c <m2m_ip_cb+0x544>)
    4e94:	47a0      	blx	r4
	{
    4e96:	e0ad      	b.n	4ff4 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    4e98:	2370      	movs	r3, #112	; 0x70
    4e9a:	18fb      	adds	r3, r7, r3
    4e9c:	22d2      	movs	r2, #210	; 0xd2
    4e9e:	18ba      	adds	r2, r7, r2
    4ea0:	8812      	ldrh	r2, [r2, #0]
    4ea2:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    4ea4:	2370      	movs	r3, #112	; 0x70
    4ea6:	18fb      	adds	r3, r7, r3
    4ea8:	2200      	movs	r2, #0
    4eaa:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    4eac:	4b58      	ldr	r3, [pc, #352]	; (5010 <m2m_ip_cb+0x548>)
    4eae:	681b      	ldr	r3, [r3, #0]
    4eb0:	2b00      	cmp	r3, #0
    4eb2:	d100      	bne.n	4eb6 <m2m_ip_cb+0x3ee>
    4eb4:	e09e      	b.n	4ff4 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    4eb6:	4b56      	ldr	r3, [pc, #344]	; (5010 <m2m_ip_cb+0x548>)
    4eb8:	681b      	ldr	r3, [r3, #0]
    4eba:	2270      	movs	r2, #112	; 0x70
    4ebc:	18bc      	adds	r4, r7, r2
    4ebe:	22df      	movs	r2, #223	; 0xdf
    4ec0:	18ba      	adds	r2, r7, r2
    4ec2:	7811      	ldrb	r1, [r2, #0]
    4ec4:	22d5      	movs	r2, #213	; 0xd5
    4ec6:	18ba      	adds	r2, r7, r2
    4ec8:	2000      	movs	r0, #0
    4eca:	5610      	ldrsb	r0, [r2, r0]
    4ecc:	0022      	movs	r2, r4
    4ece:	4798      	blx	r3
	{
    4ed0:	e090      	b.n	4ff4 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
    4ed2:	23d8      	movs	r3, #216	; 0xd8
    4ed4:	18fa      	adds	r2, r7, r3
    4ed6:	1d3b      	adds	r3, r7, #4
    4ed8:	8812      	ldrh	r2, [r2, #0]
    4eda:	881b      	ldrh	r3, [r3, #0]
    4edc:	429a      	cmp	r2, r3
    4ede:	d300      	bcc.n	4ee2 <m2m_ip_cb+0x41a>
    4ee0:	e088      	b.n	4ff4 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    4ee2:	2301      	movs	r3, #1
    4ee4:	2200      	movs	r2, #0
    4ee6:	2100      	movs	r1, #0
    4ee8:	2000      	movs	r0, #0
    4eea:	4c46      	ldr	r4, [pc, #280]	; (5004 <m2m_ip_cb+0x53c>)
    4eec:	47a0      	blx	r4
	{
    4eee:	e081      	b.n	4ff4 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    4ef0:	1dfb      	adds	r3, r7, #7
    4ef2:	781b      	ldrb	r3, [r3, #0]
    4ef4:	2b45      	cmp	r3, #69	; 0x45
    4ef6:	d007      	beq.n	4f08 <m2m_ip_cb+0x440>
    4ef8:	1dfb      	adds	r3, r7, #7
    4efa:	781b      	ldrb	r3, [r3, #0]
    4efc:	2b47      	cmp	r3, #71	; 0x47
    4efe:	d003      	beq.n	4f08 <m2m_ip_cb+0x440>
    4f00:	1dfb      	adds	r3, r7, #7
    4f02:	781b      	ldrb	r3, [r3, #0]
    4f04:	2b4c      	cmp	r3, #76	; 0x4c
    4f06:	d14c      	bne.n	4fa2 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    4f08:	23de      	movs	r3, #222	; 0xde
    4f0a:	18fb      	adds	r3, r7, r3
    4f0c:	2207      	movs	r2, #7
    4f0e:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    4f10:	1dfb      	adds	r3, r7, #7
    4f12:	781b      	ldrb	r3, [r3, #0]
    4f14:	2b47      	cmp	r3, #71	; 0x47
    4f16:	d103      	bne.n	4f20 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    4f18:	23de      	movs	r3, #222	; 0xde
    4f1a:	18fb      	adds	r3, r7, r3
    4f1c:	2208      	movs	r2, #8
    4f1e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    4f20:	2364      	movs	r3, #100	; 0x64
    4f22:	18f9      	adds	r1, r7, r3
    4f24:	6838      	ldr	r0, [r7, #0]
    4f26:	2300      	movs	r3, #0
    4f28:	2208      	movs	r2, #8
    4f2a:	4c36      	ldr	r4, [pc, #216]	; (5004 <m2m_ip_cb+0x53c>)
    4f2c:	47a0      	blx	r4
    4f2e:	1e03      	subs	r3, r0, #0
    4f30:	d162      	bne.n	4ff8 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
    4f32:	23dc      	movs	r3, #220	; 0xdc
    4f34:	18fb      	adds	r3, r7, r3
    4f36:	2200      	movs	r2, #0
    4f38:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    4f3a:	23db      	movs	r3, #219	; 0xdb
    4f3c:	18fb      	adds	r3, r7, r3
    4f3e:	2264      	movs	r2, #100	; 0x64
    4f40:	18ba      	adds	r2, r7, r2
    4f42:	7812      	ldrb	r2, [r2, #0]
    4f44:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    4f46:	23dc      	movs	r3, #220	; 0xdc
    4f48:	18fb      	adds	r3, r7, r3
    4f4a:	2264      	movs	r2, #100	; 0x64
    4f4c:	18ba      	adds	r2, r7, r2
    4f4e:	8892      	ldrh	r2, [r2, #4]
    4f50:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    4f52:	2364      	movs	r3, #100	; 0x64
    4f54:	18fb      	adds	r3, r7, r3
    4f56:	2202      	movs	r2, #2
    4f58:	5e9a      	ldrsh	r2, [r3, r2]
    4f5a:	236e      	movs	r3, #110	; 0x6e
    4f5c:	18fb      	adds	r3, r7, r3
    4f5e:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4f60:	23db      	movs	r3, #219	; 0xdb
    4f62:	18fb      	adds	r3, r7, r3
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	b25b      	sxtb	r3, r3
    4f68:	4a27      	ldr	r2, [pc, #156]	; (5008 <m2m_ip_cb+0x540>)
    4f6a:	011b      	lsls	r3, r3, #4
    4f6c:	18d3      	adds	r3, r2, r3
    4f6e:	3306      	adds	r3, #6
    4f70:	881b      	ldrh	r3, [r3, #0]
    4f72:	b29b      	uxth	r3, r3
    4f74:	22dc      	movs	r2, #220	; 0xdc
    4f76:	18ba      	adds	r2, r7, r2
    4f78:	8812      	ldrh	r2, [r2, #0]
    4f7a:	429a      	cmp	r2, r3
    4f7c:	d13c      	bne.n	4ff8 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
    4f7e:	4b24      	ldr	r3, [pc, #144]	; (5010 <m2m_ip_cb+0x548>)
    4f80:	681b      	ldr	r3, [r3, #0]
    4f82:	2b00      	cmp	r3, #0
    4f84:	d038      	beq.n	4ff8 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    4f86:	4b22      	ldr	r3, [pc, #136]	; (5010 <m2m_ip_cb+0x548>)
    4f88:	681b      	ldr	r3, [r3, #0]
    4f8a:	226e      	movs	r2, #110	; 0x6e
    4f8c:	18bc      	adds	r4, r7, r2
    4f8e:	22de      	movs	r2, #222	; 0xde
    4f90:	18ba      	adds	r2, r7, r2
    4f92:	7811      	ldrb	r1, [r2, #0]
    4f94:	22db      	movs	r2, #219	; 0xdb
    4f96:	18ba      	adds	r2, r7, r2
    4f98:	2000      	movs	r0, #0
    4f9a:	5610      	ldrsb	r0, [r2, r0]
    4f9c:	0022      	movs	r2, r4
    4f9e:	4798      	blx	r3
	{
    4fa0:	e02a      	b.n	4ff8 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
    4fa2:	1dfb      	adds	r3, r7, #7
    4fa4:	781b      	ldrb	r3, [r3, #0]
    4fa6:	2b52      	cmp	r3, #82	; 0x52
    4fa8:	d127      	bne.n	4ffa <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    4faa:	2350      	movs	r3, #80	; 0x50
    4fac:	18f9      	adds	r1, r7, r3
    4fae:	6838      	ldr	r0, [r7, #0]
    4fb0:	2301      	movs	r3, #1
    4fb2:	2214      	movs	r2, #20
    4fb4:	4c13      	ldr	r4, [pc, #76]	; (5004 <m2m_ip_cb+0x53c>)
    4fb6:	47a0      	blx	r4
    4fb8:	1e03      	subs	r3, r0, #0
    4fba:	d11e      	bne.n	4ffa <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    4fbc:	2350      	movs	r3, #80	; 0x50
    4fbe:	18fb      	adds	r3, r7, r3
    4fc0:	685b      	ldr	r3, [r3, #4]
    4fc2:	001a      	movs	r2, r3
    4fc4:	4b13      	ldr	r3, [pc, #76]	; (5014 <m2m_ip_cb+0x54c>)
    4fc6:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    4fc8:	4b12      	ldr	r3, [pc, #72]	; (5014 <m2m_ip_cb+0x54c>)
    4fca:	681b      	ldr	r3, [r3, #0]
    4fcc:	2b00      	cmp	r3, #0
    4fce:	d014      	beq.n	4ffa <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    4fd0:	4b10      	ldr	r3, [pc, #64]	; (5014 <m2m_ip_cb+0x54c>)
    4fd2:	681c      	ldr	r4, [r3, #0]
    4fd4:	2350      	movs	r3, #80	; 0x50
    4fd6:	18fb      	adds	r3, r7, r3
    4fd8:	6818      	ldr	r0, [r3, #0]
    4fda:	2350      	movs	r3, #80	; 0x50
    4fdc:	18fb      	adds	r3, r7, r3
    4fde:	6899      	ldr	r1, [r3, #8]
    4fe0:	2350      	movs	r3, #80	; 0x50
    4fe2:	18fb      	adds	r3, r7, r3
    4fe4:	7c1b      	ldrb	r3, [r3, #16]
    4fe6:	001a      	movs	r2, r3
    4fe8:	47a0      	blx	r4
}
    4fea:	e006      	b.n	4ffa <m2m_ip_cb+0x532>
	{
    4fec:	46c0      	nop			; (mov r8, r8)
    4fee:	e004      	b.n	4ffa <m2m_ip_cb+0x532>
	{
    4ff0:	46c0      	nop			; (mov r8, r8)
    4ff2:	e002      	b.n	4ffa <m2m_ip_cb+0x532>
	{
    4ff4:	46c0      	nop			; (mov r8, r8)
    4ff6:	e000      	b.n	4ffa <m2m_ip_cb+0x532>
	{
    4ff8:	46c0      	nop			; (mov r8, r8)
}
    4ffa:	46c0      	nop			; (mov r8, r8)
    4ffc:	46bd      	mov	sp, r7
    4ffe:	b039      	add	sp, #228	; 0xe4
    5000:	bd90      	pop	{r4, r7, pc}
    5002:	46c0      	nop			; (mov r8, r8)
    5004:	00001835 	.word	0x00001835
    5008:	2000033c 	.word	0x2000033c
    500c:	000048cd 	.word	0x000048cd
    5010:	200003ec 	.word	0x200003ec
    5014:	200003f0 	.word	0x200003f0

00005018 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    5018:	b580      	push	{r7, lr}
    501a:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    501c:	4b0c      	ldr	r3, [pc, #48]	; (5050 <socketInit+0x38>)
    501e:	781b      	ldrb	r3, [r3, #0]
    5020:	b2db      	uxtb	r3, r3
    5022:	2b00      	cmp	r3, #0
    5024:	d110      	bne.n	5048 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    5026:	4b0b      	ldr	r3, [pc, #44]	; (5054 <socketInit+0x3c>)
    5028:	22b0      	movs	r2, #176	; 0xb0
    502a:	2100      	movs	r1, #0
    502c:	0018      	movs	r0, r3
    502e:	4b0a      	ldr	r3, [pc, #40]	; (5058 <socketInit+0x40>)
    5030:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    5032:	4b0a      	ldr	r3, [pc, #40]	; (505c <socketInit+0x44>)
    5034:	0019      	movs	r1, r3
    5036:	2002      	movs	r0, #2
    5038:	4b09      	ldr	r3, [pc, #36]	; (5060 <socketInit+0x48>)
    503a:	4798      	blx	r3
		gbSocketInit	= 1;
    503c:	4b04      	ldr	r3, [pc, #16]	; (5050 <socketInit+0x38>)
    503e:	2201      	movs	r2, #1
    5040:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    5042:	4b08      	ldr	r3, [pc, #32]	; (5064 <socketInit+0x4c>)
    5044:	2200      	movs	r2, #0
    5046:	801a      	strh	r2, [r3, #0]
	}
}
    5048:	46c0      	nop			; (mov r8, r8)
    504a:	46bd      	mov	sp, r7
    504c:	bd80      	pop	{r7, pc}
    504e:	46c0      	nop			; (mov r8, r8)
    5050:	200000b4 	.word	0x200000b4
    5054:	2000033c 	.word	0x2000033c
    5058:	00000ce1 	.word	0x00000ce1
    505c:	00004ac9 	.word	0x00004ac9
    5060:	000019b5 	.word	0x000019b5
    5064:	200000b2 	.word	0x200000b2

00005068 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    5068:	b580      	push	{r7, lr}
    506a:	b082      	sub	sp, #8
    506c:	af00      	add	r7, sp, #0
    506e:	6078      	str	r0, [r7, #4]
    5070:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    5072:	4b05      	ldr	r3, [pc, #20]	; (5088 <registerSocketCallback+0x20>)
    5074:	687a      	ldr	r2, [r7, #4]
    5076:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    5078:	4b04      	ldr	r3, [pc, #16]	; (508c <registerSocketCallback+0x24>)
    507a:	683a      	ldr	r2, [r7, #0]
    507c:	601a      	str	r2, [r3, #0]
}
    507e:	46c0      	nop			; (mov r8, r8)
    5080:	46bd      	mov	sp, r7
    5082:	b002      	add	sp, #8
    5084:	bd80      	pop	{r7, pc}
    5086:	46c0      	nop			; (mov r8, r8)
    5088:	200003ec 	.word	0x200003ec
    508c:	200003f4 	.word	0x200003f4

00005090 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    5090:	b590      	push	{r4, r7, lr}
    5092:	b08d      	sub	sp, #52	; 0x34
    5094:	af04      	add	r7, sp, #16
    5096:	0004      	movs	r4, r0
    5098:	0008      	movs	r0, r1
    509a:	0011      	movs	r1, r2
    509c:	1dbb      	adds	r3, r7, #6
    509e:	1c22      	adds	r2, r4, #0
    50a0:	801a      	strh	r2, [r3, #0]
    50a2:	1d7b      	adds	r3, r7, #5
    50a4:	1c02      	adds	r2, r0, #0
    50a6:	701a      	strb	r2, [r3, #0]
    50a8:	1d3b      	adds	r3, r7, #4
    50aa:	1c0a      	adds	r2, r1, #0
    50ac:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    50ae:	231f      	movs	r3, #31
    50b0:	18fb      	adds	r3, r7, r3
    50b2:	22ff      	movs	r2, #255	; 0xff
    50b4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    50b6:	1dbb      	adds	r3, r7, #6
    50b8:	881b      	ldrh	r3, [r3, #0]
    50ba:	2b02      	cmp	r3, #2
    50bc:	d000      	beq.n	50c0 <socket+0x30>
    50be:	e0cd      	b.n	525c <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    50c0:	1d7b      	adds	r3, r7, #5
    50c2:	781b      	ldrb	r3, [r3, #0]
    50c4:	2b01      	cmp	r3, #1
    50c6:	d135      	bne.n	5134 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    50c8:	231e      	movs	r3, #30
    50ca:	18fb      	adds	r3, r7, r3
    50cc:	2200      	movs	r2, #0
    50ce:	701a      	strb	r2, [r3, #0]
    50d0:	e02a      	b.n	5128 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    50d2:	2317      	movs	r3, #23
    50d4:	18fb      	adds	r3, r7, r3
    50d6:	4a65      	ldr	r2, [pc, #404]	; (526c <socket+0x1dc>)
    50d8:	7812      	ldrb	r2, [r2, #0]
    50da:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    50dc:	4b63      	ldr	r3, [pc, #396]	; (526c <socket+0x1dc>)
    50de:	781b      	ldrb	r3, [r3, #0]
    50e0:	b2db      	uxtb	r3, r3
    50e2:	011a      	lsls	r2, r3, #4
    50e4:	4b62      	ldr	r3, [pc, #392]	; (5270 <socket+0x1e0>)
    50e6:	18d3      	adds	r3, r2, r3
    50e8:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    50ea:	4b60      	ldr	r3, [pc, #384]	; (526c <socket+0x1dc>)
    50ec:	781b      	ldrb	r3, [r3, #0]
    50ee:	b2db      	uxtb	r3, r3
    50f0:	1c5a      	adds	r2, r3, #1
    50f2:	4b60      	ldr	r3, [pc, #384]	; (5274 <socket+0x1e4>)
    50f4:	2107      	movs	r1, #7
    50f6:	0010      	movs	r0, r2
    50f8:	4798      	blx	r3
    50fa:	000b      	movs	r3, r1
    50fc:	b2da      	uxtb	r2, r3
    50fe:	4b5b      	ldr	r3, [pc, #364]	; (526c <socket+0x1dc>)
    5100:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    5102:	69bb      	ldr	r3, [r7, #24]
    5104:	7a9b      	ldrb	r3, [r3, #10]
    5106:	b2db      	uxtb	r3, r3
    5108:	2b00      	cmp	r3, #0
    510a:	d106      	bne.n	511a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    510c:	231f      	movs	r3, #31
    510e:	18fb      	adds	r3, r7, r3
    5110:	2217      	movs	r2, #23
    5112:	18ba      	adds	r2, r7, r2
    5114:	7812      	ldrb	r2, [r2, #0]
    5116:	701a      	strb	r2, [r3, #0]
					break;
    5118:	e04c      	b.n	51b4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    511a:	231e      	movs	r3, #30
    511c:	18fb      	adds	r3, r7, r3
    511e:	781a      	ldrb	r2, [r3, #0]
    5120:	231e      	movs	r3, #30
    5122:	18fb      	adds	r3, r7, r3
    5124:	3201      	adds	r2, #1
    5126:	701a      	strb	r2, [r3, #0]
    5128:	231e      	movs	r3, #30
    512a:	18fb      	adds	r3, r7, r3
    512c:	781b      	ldrb	r3, [r3, #0]
    512e:	2b06      	cmp	r3, #6
    5130:	d9cf      	bls.n	50d2 <socket+0x42>
    5132:	e03f      	b.n	51b4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    5134:	1d7b      	adds	r3, r7, #5
    5136:	781b      	ldrb	r3, [r3, #0]
    5138:	2b02      	cmp	r3, #2
    513a:	d13b      	bne.n	51b4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    513c:	4b4e      	ldr	r3, [pc, #312]	; (5278 <socket+0x1e8>)
    513e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    5140:	231e      	movs	r3, #30
    5142:	18fb      	adds	r3, r7, r3
    5144:	2200      	movs	r2, #0
    5146:	701a      	strb	r2, [r3, #0]
    5148:	e02f      	b.n	51aa <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    514a:	2317      	movs	r3, #23
    514c:	18fb      	adds	r3, r7, r3
    514e:	4a4b      	ldr	r2, [pc, #300]	; (527c <socket+0x1ec>)
    5150:	7812      	ldrb	r2, [r2, #0]
    5152:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    5154:	4b49      	ldr	r3, [pc, #292]	; (527c <socket+0x1ec>)
    5156:	781b      	ldrb	r3, [r3, #0]
    5158:	b2db      	uxtb	r3, r3
    515a:	011b      	lsls	r3, r3, #4
    515c:	693a      	ldr	r2, [r7, #16]
    515e:	18d3      	adds	r3, r2, r3
    5160:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    5162:	4b46      	ldr	r3, [pc, #280]	; (527c <socket+0x1ec>)
    5164:	781b      	ldrb	r3, [r3, #0]
    5166:	b2db      	uxtb	r3, r3
    5168:	3301      	adds	r3, #1
    516a:	4a45      	ldr	r2, [pc, #276]	; (5280 <socket+0x1f0>)
    516c:	4013      	ands	r3, r2
    516e:	d504      	bpl.n	517a <socket+0xea>
    5170:	3b01      	subs	r3, #1
    5172:	2204      	movs	r2, #4
    5174:	4252      	negs	r2, r2
    5176:	4313      	orrs	r3, r2
    5178:	3301      	adds	r3, #1
    517a:	b2da      	uxtb	r2, r3
    517c:	4b3f      	ldr	r3, [pc, #252]	; (527c <socket+0x1ec>)
    517e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    5180:	69bb      	ldr	r3, [r7, #24]
    5182:	7a9b      	ldrb	r3, [r3, #10]
    5184:	b2db      	uxtb	r3, r3
    5186:	2b00      	cmp	r3, #0
    5188:	d108      	bne.n	519c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    518a:	2317      	movs	r3, #23
    518c:	18fb      	adds	r3, r7, r3
    518e:	781b      	ldrb	r3, [r3, #0]
    5190:	3307      	adds	r3, #7
    5192:	b2da      	uxtb	r2, r3
    5194:	231f      	movs	r3, #31
    5196:	18fb      	adds	r3, r7, r3
    5198:	701a      	strb	r2, [r3, #0]
					break;
    519a:	e00b      	b.n	51b4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    519c:	231e      	movs	r3, #30
    519e:	18fb      	adds	r3, r7, r3
    51a0:	781a      	ldrb	r2, [r3, #0]
    51a2:	231e      	movs	r3, #30
    51a4:	18fb      	adds	r3, r7, r3
    51a6:	3201      	adds	r2, #1
    51a8:	701a      	strb	r2, [r3, #0]
    51aa:	231e      	movs	r3, #30
    51ac:	18fb      	adds	r3, r7, r3
    51ae:	781b      	ldrb	r3, [r3, #0]
    51b0:	2b03      	cmp	r3, #3
    51b2:	d9ca      	bls.n	514a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    51b4:	231f      	movs	r3, #31
    51b6:	18fb      	adds	r3, r7, r3
    51b8:	781b      	ldrb	r3, [r3, #0]
    51ba:	2b7f      	cmp	r3, #127	; 0x7f
    51bc:	d84e      	bhi.n	525c <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    51be:	69bb      	ldr	r3, [r7, #24]
    51c0:	2210      	movs	r2, #16
    51c2:	2100      	movs	r1, #0
    51c4:	0018      	movs	r0, r3
    51c6:	4b2f      	ldr	r3, [pc, #188]	; (5284 <socket+0x1f4>)
    51c8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    51ca:	69bb      	ldr	r3, [r7, #24]
    51cc:	2201      	movs	r2, #1
    51ce:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    51d0:	4b2d      	ldr	r3, [pc, #180]	; (5288 <socket+0x1f8>)
    51d2:	881b      	ldrh	r3, [r3, #0]
    51d4:	b29b      	uxth	r3, r3
    51d6:	3301      	adds	r3, #1
    51d8:	b29a      	uxth	r2, r3
    51da:	4b2b      	ldr	r3, [pc, #172]	; (5288 <socket+0x1f8>)
    51dc:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    51de:	4b2a      	ldr	r3, [pc, #168]	; (5288 <socket+0x1f8>)
    51e0:	881b      	ldrh	r3, [r3, #0]
    51e2:	b29b      	uxth	r3, r3
    51e4:	2b00      	cmp	r3, #0
    51e6:	d106      	bne.n	51f6 <socket+0x166>
				++gu16SessionID;
    51e8:	4b27      	ldr	r3, [pc, #156]	; (5288 <socket+0x1f8>)
    51ea:	881b      	ldrh	r3, [r3, #0]
    51ec:	b29b      	uxth	r3, r3
    51ee:	3301      	adds	r3, #1
    51f0:	b29a      	uxth	r2, r3
    51f2:	4b25      	ldr	r3, [pc, #148]	; (5288 <socket+0x1f8>)
    51f4:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    51f6:	4b24      	ldr	r3, [pc, #144]	; (5288 <socket+0x1f8>)
    51f8:	881b      	ldrh	r3, [r3, #0]
    51fa:	b29a      	uxth	r2, r3
    51fc:	69bb      	ldr	r3, [r7, #24]
    51fe:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    5200:	4b22      	ldr	r3, [pc, #136]	; (528c <socket+0x1fc>)
    5202:	0018      	movs	r0, r3
    5204:	4b22      	ldr	r3, [pc, #136]	; (5290 <socket+0x200>)
    5206:	4798      	blx	r3
    5208:	231f      	movs	r3, #31
    520a:	18fb      	adds	r3, r7, r3
    520c:	2100      	movs	r1, #0
    520e:	5659      	ldrsb	r1, [r3, r1]
    5210:	4b1d      	ldr	r3, [pc, #116]	; (5288 <socket+0x1f8>)
    5212:	881b      	ldrh	r3, [r3, #0]
    5214:	b29b      	uxth	r3, r3
    5216:	001a      	movs	r2, r3
    5218:	4b1e      	ldr	r3, [pc, #120]	; (5294 <socket+0x204>)
    521a:	0018      	movs	r0, r3
    521c:	4b1c      	ldr	r3, [pc, #112]	; (5290 <socket+0x200>)
    521e:	4798      	blx	r3
    5220:	200d      	movs	r0, #13
    5222:	4b1d      	ldr	r3, [pc, #116]	; (5298 <socket+0x208>)
    5224:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    5226:	1d3b      	adds	r3, r7, #4
    5228:	781b      	ldrb	r3, [r3, #0]
    522a:	2201      	movs	r2, #1
    522c:	4013      	ands	r3, r2
    522e:	d015      	beq.n	525c <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    5230:	230c      	movs	r3, #12
    5232:	18fb      	adds	r3, r7, r3
    5234:	221f      	movs	r2, #31
    5236:	18ba      	adds	r2, r7, r2
    5238:	7812      	ldrb	r2, [r2, #0]
    523a:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    523c:	69bb      	ldr	r3, [r7, #24]
    523e:	2221      	movs	r2, #33	; 0x21
    5240:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    5242:	230c      	movs	r3, #12
    5244:	18fa      	adds	r2, r7, r3
    5246:	2300      	movs	r3, #0
    5248:	9302      	str	r3, [sp, #8]
    524a:	2300      	movs	r3, #0
    524c:	9301      	str	r3, [sp, #4]
    524e:	2300      	movs	r3, #0
    5250:	9300      	str	r3, [sp, #0]
    5252:	2304      	movs	r3, #4
    5254:	2150      	movs	r1, #80	; 0x50
    5256:	2002      	movs	r0, #2
    5258:	4c10      	ldr	r4, [pc, #64]	; (529c <socket+0x20c>)
    525a:	47a0      	blx	r4
			}
		}
	}
	return sock;
    525c:	231f      	movs	r3, #31
    525e:	18fb      	adds	r3, r7, r3
    5260:	781b      	ldrb	r3, [r3, #0]
    5262:	b25b      	sxtb	r3, r3
}
    5264:	0018      	movs	r0, r3
    5266:	46bd      	mov	sp, r7
    5268:	b009      	add	sp, #36	; 0x24
    526a:	bd90      	pop	{r4, r7, pc}
    526c:	200000b5 	.word	0x200000b5
    5270:	2000033c 	.word	0x2000033c
    5274:	0000c201 	.word	0x0000c201
    5278:	200003ac 	.word	0x200003ac
    527c:	200000b6 	.word	0x200000b6
    5280:	80000003 	.word	0x80000003
    5284:	00000ce1 	.word	0x00000ce1
    5288:	200000b2 	.word	0x200000b2
    528c:	0000e804 	.word	0x0000e804
    5290:	0000c455 	.word	0x0000c455
    5294:	0000e824 	.word	0x0000e824
    5298:	0000c489 	.word	0x0000c489
    529c:	00000f41 	.word	0x00000f41

000052a0 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    52a0:	b5b0      	push	{r4, r5, r7, lr}
    52a2:	b08a      	sub	sp, #40	; 0x28
    52a4:	af04      	add	r7, sp, #16
    52a6:	6039      	str	r1, [r7, #0]
    52a8:	0011      	movs	r1, r2
    52aa:	1dfb      	adds	r3, r7, #7
    52ac:	1c02      	adds	r2, r0, #0
    52ae:	701a      	strb	r2, [r3, #0]
    52b0:	1dbb      	adds	r3, r7, #6
    52b2:	1c0a      	adds	r2, r1, #0
    52b4:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    52b6:	2317      	movs	r3, #23
    52b8:	18fb      	adds	r3, r7, r3
    52ba:	22fa      	movs	r2, #250	; 0xfa
    52bc:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    52be:	1dfb      	adds	r3, r7, #7
    52c0:	781b      	ldrb	r3, [r3, #0]
    52c2:	2b7f      	cmp	r3, #127	; 0x7f
    52c4:	d867      	bhi.n	5396 <connect+0xf6>
    52c6:	683b      	ldr	r3, [r7, #0]
    52c8:	2b00      	cmp	r3, #0
    52ca:	d064      	beq.n	5396 <connect+0xf6>
    52cc:	1dfb      	adds	r3, r7, #7
    52ce:	781b      	ldrb	r3, [r3, #0]
    52d0:	b25b      	sxtb	r3, r3
    52d2:	4a35      	ldr	r2, [pc, #212]	; (53a8 <connect+0x108>)
    52d4:	011b      	lsls	r3, r3, #4
    52d6:	18d3      	adds	r3, r2, r3
    52d8:	330a      	adds	r3, #10
    52da:	781b      	ldrb	r3, [r3, #0]
    52dc:	b2db      	uxtb	r3, r3
    52de:	2b01      	cmp	r3, #1
    52e0:	d159      	bne.n	5396 <connect+0xf6>
    52e2:	1dbb      	adds	r3, r7, #6
    52e4:	781b      	ldrb	r3, [r3, #0]
    52e6:	2b00      	cmp	r3, #0
    52e8:	d055      	beq.n	5396 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    52ea:	2316      	movs	r3, #22
    52ec:	18fb      	adds	r3, r7, r3
    52ee:	2244      	movs	r2, #68	; 0x44
    52f0:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    52f2:	1dfb      	adds	r3, r7, #7
    52f4:	781b      	ldrb	r3, [r3, #0]
    52f6:	b25b      	sxtb	r3, r3
    52f8:	4a2b      	ldr	r2, [pc, #172]	; (53a8 <connect+0x108>)
    52fa:	011b      	lsls	r3, r3, #4
    52fc:	18d3      	adds	r3, r2, r3
    52fe:	330b      	adds	r3, #11
    5300:	781b      	ldrb	r3, [r3, #0]
    5302:	b2db      	uxtb	r3, r3
    5304:	001a      	movs	r2, r3
    5306:	2301      	movs	r3, #1
    5308:	4013      	ands	r3, r2
    530a:	d00f      	beq.n	532c <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    530c:	2316      	movs	r3, #22
    530e:	18fb      	adds	r3, r7, r3
    5310:	224b      	movs	r2, #75	; 0x4b
    5312:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    5314:	1dfb      	adds	r3, r7, #7
    5316:	781b      	ldrb	r3, [r3, #0]
    5318:	b25b      	sxtb	r3, r3
    531a:	4a23      	ldr	r2, [pc, #140]	; (53a8 <connect+0x108>)
    531c:	011b      	lsls	r3, r3, #4
    531e:	18d3      	adds	r3, r2, r3
    5320:	330b      	adds	r3, #11
    5322:	781b      	ldrb	r3, [r3, #0]
    5324:	b2da      	uxtb	r2, r3
    5326:	2308      	movs	r3, #8
    5328:	18fb      	adds	r3, r7, r3
    532a:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    532c:	2308      	movs	r3, #8
    532e:	18fb      	adds	r3, r7, r3
    5330:	1dfa      	adds	r2, r7, #7
    5332:	7812      	ldrb	r2, [r2, #0]
    5334:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    5336:	6839      	ldr	r1, [r7, #0]
    5338:	2308      	movs	r3, #8
    533a:	18fb      	adds	r3, r7, r3
    533c:	2208      	movs	r2, #8
    533e:	0018      	movs	r0, r3
    5340:	4b1a      	ldr	r3, [pc, #104]	; (53ac <connect+0x10c>)
    5342:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    5344:	1dfb      	adds	r3, r7, #7
    5346:	781b      	ldrb	r3, [r3, #0]
    5348:	b25b      	sxtb	r3, r3
    534a:	4a17      	ldr	r2, [pc, #92]	; (53a8 <connect+0x108>)
    534c:	011b      	lsls	r3, r3, #4
    534e:	18d3      	adds	r3, r2, r3
    5350:	3306      	adds	r3, #6
    5352:	881b      	ldrh	r3, [r3, #0]
    5354:	b29a      	uxth	r2, r3
    5356:	2308      	movs	r3, #8
    5358:	18fb      	adds	r3, r7, r3
    535a:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    535c:	2317      	movs	r3, #23
    535e:	18fc      	adds	r4, r7, r3
    5360:	2308      	movs	r3, #8
    5362:	18fa      	adds	r2, r7, r3
    5364:	2316      	movs	r3, #22
    5366:	18fb      	adds	r3, r7, r3
    5368:	7819      	ldrb	r1, [r3, #0]
    536a:	2300      	movs	r3, #0
    536c:	9302      	str	r3, [sp, #8]
    536e:	2300      	movs	r3, #0
    5370:	9301      	str	r3, [sp, #4]
    5372:	2300      	movs	r3, #0
    5374:	9300      	str	r3, [sp, #0]
    5376:	230c      	movs	r3, #12
    5378:	2002      	movs	r0, #2
    537a:	4d0d      	ldr	r5, [pc, #52]	; (53b0 <connect+0x110>)
    537c:	47a8      	blx	r5
    537e:	0003      	movs	r3, r0
    5380:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    5382:	2317      	movs	r3, #23
    5384:	18fb      	adds	r3, r7, r3
    5386:	781b      	ldrb	r3, [r3, #0]
    5388:	b25b      	sxtb	r3, r3
    538a:	2b00      	cmp	r3, #0
    538c:	d003      	beq.n	5396 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    538e:	2317      	movs	r3, #23
    5390:	18fb      	adds	r3, r7, r3
    5392:	22f7      	movs	r2, #247	; 0xf7
    5394:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    5396:	2317      	movs	r3, #23
    5398:	18fb      	adds	r3, r7, r3
    539a:	781b      	ldrb	r3, [r3, #0]
    539c:	b25b      	sxtb	r3, r3
}
    539e:	0018      	movs	r0, r3
    53a0:	46bd      	mov	sp, r7
    53a2:	b006      	add	sp, #24
    53a4:	bdb0      	pop	{r4, r5, r7, pc}
    53a6:	46c0      	nop			; (mov r8, r8)
    53a8:	2000033c 	.word	0x2000033c
    53ac:	00000ca5 	.word	0x00000ca5
    53b0:	00000f41 	.word	0x00000f41

000053b4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    53b4:	b590      	push	{r4, r7, lr}
    53b6:	b08f      	sub	sp, #60	; 0x3c
    53b8:	af04      	add	r7, sp, #16
    53ba:	0004      	movs	r4, r0
    53bc:	60b9      	str	r1, [r7, #8]
    53be:	0010      	movs	r0, r2
    53c0:	0019      	movs	r1, r3
    53c2:	230f      	movs	r3, #15
    53c4:	18fb      	adds	r3, r7, r3
    53c6:	1c22      	adds	r2, r4, #0
    53c8:	701a      	strb	r2, [r3, #0]
    53ca:	230c      	movs	r3, #12
    53cc:	18fb      	adds	r3, r7, r3
    53ce:	1c02      	adds	r2, r0, #0
    53d0:	801a      	strh	r2, [r3, #0]
    53d2:	1dbb      	adds	r3, r7, #6
    53d4:	1c0a      	adds	r2, r1, #0
    53d6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    53d8:	2326      	movs	r3, #38	; 0x26
    53da:	18fb      	adds	r3, r7, r3
    53dc:	2206      	movs	r2, #6
    53de:	4252      	negs	r2, r2
    53e0:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    53e2:	230f      	movs	r3, #15
    53e4:	18fb      	adds	r3, r7, r3
    53e6:	781b      	ldrb	r3, [r3, #0]
    53e8:	2b7f      	cmp	r3, #127	; 0x7f
    53ea:	d900      	bls.n	53ee <send+0x3a>
    53ec:	e087      	b.n	54fe <send+0x14a>
    53ee:	68bb      	ldr	r3, [r7, #8]
    53f0:	2b00      	cmp	r3, #0
    53f2:	d100      	bne.n	53f6 <send+0x42>
    53f4:	e083      	b.n	54fe <send+0x14a>
    53f6:	230c      	movs	r3, #12
    53f8:	18fb      	adds	r3, r7, r3
    53fa:	881a      	ldrh	r2, [r3, #0]
    53fc:	23af      	movs	r3, #175	; 0xaf
    53fe:	00db      	lsls	r3, r3, #3
    5400:	429a      	cmp	r2, r3
    5402:	d900      	bls.n	5406 <send+0x52>
    5404:	e07b      	b.n	54fe <send+0x14a>
    5406:	230f      	movs	r3, #15
    5408:	18fb      	adds	r3, r7, r3
    540a:	781b      	ldrb	r3, [r3, #0]
    540c:	b25b      	sxtb	r3, r3
    540e:	4a40      	ldr	r2, [pc, #256]	; (5510 <send+0x15c>)
    5410:	011b      	lsls	r3, r3, #4
    5412:	18d3      	adds	r3, r2, r3
    5414:	330a      	adds	r3, #10
    5416:	781b      	ldrb	r3, [r3, #0]
    5418:	b2db      	uxtb	r3, r3
    541a:	2b01      	cmp	r3, #1
    541c:	d16f      	bne.n	54fe <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    541e:	2323      	movs	r3, #35	; 0x23
    5420:	18fb      	adds	r3, r7, r3
    5422:	2245      	movs	r2, #69	; 0x45
    5424:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    5426:	2324      	movs	r3, #36	; 0x24
    5428:	18fb      	adds	r3, r7, r3
    542a:	2250      	movs	r2, #80	; 0x50
    542c:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    542e:	2310      	movs	r3, #16
    5430:	18fb      	adds	r3, r7, r3
    5432:	220f      	movs	r2, #15
    5434:	18ba      	adds	r2, r7, r2
    5436:	7812      	ldrb	r2, [r2, #0]
    5438:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    543a:	2310      	movs	r3, #16
    543c:	18fb      	adds	r3, r7, r3
    543e:	220c      	movs	r2, #12
    5440:	18ba      	adds	r2, r7, r2
    5442:	8812      	ldrh	r2, [r2, #0]
    5444:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    5446:	230f      	movs	r3, #15
    5448:	18fb      	adds	r3, r7, r3
    544a:	781b      	ldrb	r3, [r3, #0]
    544c:	b25b      	sxtb	r3, r3
    544e:	4a30      	ldr	r2, [pc, #192]	; (5510 <send+0x15c>)
    5450:	011b      	lsls	r3, r3, #4
    5452:	18d3      	adds	r3, r2, r3
    5454:	3306      	adds	r3, #6
    5456:	881b      	ldrh	r3, [r3, #0]
    5458:	b29a      	uxth	r2, r3
    545a:	2310      	movs	r3, #16
    545c:	18fb      	adds	r3, r7, r3
    545e:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    5460:	230f      	movs	r3, #15
    5462:	18fb      	adds	r3, r7, r3
    5464:	781b      	ldrb	r3, [r3, #0]
    5466:	b25b      	sxtb	r3, r3
    5468:	2b06      	cmp	r3, #6
    546a:	dd03      	ble.n	5474 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    546c:	2324      	movs	r3, #36	; 0x24
    546e:	18fb      	adds	r3, r7, r3
    5470:	2244      	movs	r2, #68	; 0x44
    5472:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5474:	230f      	movs	r3, #15
    5476:	18fb      	adds	r3, r7, r3
    5478:	781b      	ldrb	r3, [r3, #0]
    547a:	b25b      	sxtb	r3, r3
    547c:	4a24      	ldr	r2, [pc, #144]	; (5510 <send+0x15c>)
    547e:	011b      	lsls	r3, r3, #4
    5480:	18d3      	adds	r3, r2, r3
    5482:	330b      	adds	r3, #11
    5484:	781b      	ldrb	r3, [r3, #0]
    5486:	b2db      	uxtb	r3, r3
    5488:	001a      	movs	r2, r3
    548a:	2301      	movs	r3, #1
    548c:	4013      	ands	r3, r2
    548e:	d00f      	beq.n	54b0 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    5490:	2323      	movs	r3, #35	; 0x23
    5492:	18fb      	adds	r3, r7, r3
    5494:	224c      	movs	r2, #76	; 0x4c
    5496:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    5498:	230f      	movs	r3, #15
    549a:	18fb      	adds	r3, r7, r3
    549c:	2200      	movs	r2, #0
    549e:	569a      	ldrsb	r2, [r3, r2]
    54a0:	2324      	movs	r3, #36	; 0x24
    54a2:	18fb      	adds	r3, r7, r3
    54a4:	491a      	ldr	r1, [pc, #104]	; (5510 <send+0x15c>)
    54a6:	0112      	lsls	r2, r2, #4
    54a8:	188a      	adds	r2, r1, r2
    54aa:	3208      	adds	r2, #8
    54ac:	8812      	ldrh	r2, [r2, #0]
    54ae:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    54b0:	2323      	movs	r3, #35	; 0x23
    54b2:	18fb      	adds	r3, r7, r3
    54b4:	781b      	ldrb	r3, [r3, #0]
    54b6:	2280      	movs	r2, #128	; 0x80
    54b8:	4252      	negs	r2, r2
    54ba:	4313      	orrs	r3, r2
    54bc:	b2d9      	uxtb	r1, r3
    54be:	2310      	movs	r3, #16
    54c0:	18fa      	adds	r2, r7, r3
    54c2:	2324      	movs	r3, #36	; 0x24
    54c4:	18fb      	adds	r3, r7, r3
    54c6:	881b      	ldrh	r3, [r3, #0]
    54c8:	9302      	str	r3, [sp, #8]
    54ca:	230c      	movs	r3, #12
    54cc:	18fb      	adds	r3, r7, r3
    54ce:	881b      	ldrh	r3, [r3, #0]
    54d0:	9301      	str	r3, [sp, #4]
    54d2:	68bb      	ldr	r3, [r7, #8]
    54d4:	9300      	str	r3, [sp, #0]
    54d6:	2310      	movs	r3, #16
    54d8:	2002      	movs	r0, #2
    54da:	4c0e      	ldr	r4, [pc, #56]	; (5514 <send+0x160>)
    54dc:	47a0      	blx	r4
    54de:	0003      	movs	r3, r0
    54e0:	001a      	movs	r2, r3
    54e2:	2326      	movs	r3, #38	; 0x26
    54e4:	18fb      	adds	r3, r7, r3
    54e6:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    54e8:	2326      	movs	r3, #38	; 0x26
    54ea:	18fb      	adds	r3, r7, r3
    54ec:	2200      	movs	r2, #0
    54ee:	5e9b      	ldrsh	r3, [r3, r2]
    54f0:	2b00      	cmp	r3, #0
    54f2:	d004      	beq.n	54fe <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    54f4:	2326      	movs	r3, #38	; 0x26
    54f6:	18fb      	adds	r3, r7, r3
    54f8:	220e      	movs	r2, #14
    54fa:	4252      	negs	r2, r2
    54fc:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    54fe:	2326      	movs	r3, #38	; 0x26
    5500:	18fb      	adds	r3, r7, r3
    5502:	2200      	movs	r2, #0
    5504:	5e9b      	ldrsh	r3, [r3, r2]
}
    5506:	0018      	movs	r0, r3
    5508:	46bd      	mov	sp, r7
    550a:	b00b      	add	sp, #44	; 0x2c
    550c:	bd90      	pop	{r4, r7, pc}
    550e:	46c0      	nop			; (mov r8, r8)
    5510:	2000033c 	.word	0x2000033c
    5514:	00000f41 	.word	0x00000f41

00005518 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    5518:	b590      	push	{r4, r7, lr}
    551a:	b08d      	sub	sp, #52	; 0x34
    551c:	af04      	add	r7, sp, #16
    551e:	60b9      	str	r1, [r7, #8]
    5520:	0011      	movs	r1, r2
    5522:	607b      	str	r3, [r7, #4]
    5524:	230f      	movs	r3, #15
    5526:	18fb      	adds	r3, r7, r3
    5528:	1c02      	adds	r2, r0, #0
    552a:	701a      	strb	r2, [r3, #0]
    552c:	230c      	movs	r3, #12
    552e:	18fb      	adds	r3, r7, r3
    5530:	1c0a      	adds	r2, r1, #0
    5532:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    5534:	231e      	movs	r3, #30
    5536:	18fb      	adds	r3, r7, r3
    5538:	2206      	movs	r2, #6
    553a:	4252      	negs	r2, r2
    553c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    553e:	230f      	movs	r3, #15
    5540:	18fb      	adds	r3, r7, r3
    5542:	781b      	ldrb	r3, [r3, #0]
    5544:	2b7f      	cmp	r3, #127	; 0x7f
    5546:	d900      	bls.n	554a <recv+0x32>
    5548:	e099      	b.n	567e <recv+0x166>
    554a:	68bb      	ldr	r3, [r7, #8]
    554c:	2b00      	cmp	r3, #0
    554e:	d100      	bne.n	5552 <recv+0x3a>
    5550:	e095      	b.n	567e <recv+0x166>
    5552:	230c      	movs	r3, #12
    5554:	18fb      	adds	r3, r7, r3
    5556:	881b      	ldrh	r3, [r3, #0]
    5558:	2b00      	cmp	r3, #0
    555a:	d100      	bne.n	555e <recv+0x46>
    555c:	e08f      	b.n	567e <recv+0x166>
    555e:	230f      	movs	r3, #15
    5560:	18fb      	adds	r3, r7, r3
    5562:	781b      	ldrb	r3, [r3, #0]
    5564:	b25b      	sxtb	r3, r3
    5566:	4a4a      	ldr	r2, [pc, #296]	; (5690 <recv+0x178>)
    5568:	011b      	lsls	r3, r3, #4
    556a:	18d3      	adds	r3, r2, r3
    556c:	330a      	adds	r3, #10
    556e:	781b      	ldrb	r3, [r3, #0]
    5570:	b2db      	uxtb	r3, r3
    5572:	2b01      	cmp	r3, #1
    5574:	d000      	beq.n	5578 <recv+0x60>
    5576:	e082      	b.n	567e <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    5578:	231e      	movs	r3, #30
    557a:	18fb      	adds	r3, r7, r3
    557c:	2200      	movs	r2, #0
    557e:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    5580:	230f      	movs	r3, #15
    5582:	18fb      	adds	r3, r7, r3
    5584:	2200      	movs	r2, #0
    5586:	569a      	ldrsb	r2, [r3, r2]
    5588:	4b41      	ldr	r3, [pc, #260]	; (5690 <recv+0x178>)
    558a:	0112      	lsls	r2, r2, #4
    558c:	68b9      	ldr	r1, [r7, #8]
    558e:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    5590:	230f      	movs	r3, #15
    5592:	18fb      	adds	r3, r7, r3
    5594:	781b      	ldrb	r3, [r3, #0]
    5596:	b25b      	sxtb	r3, r3
    5598:	4a3d      	ldr	r2, [pc, #244]	; (5690 <recv+0x178>)
    559a:	011b      	lsls	r3, r3, #4
    559c:	18d3      	adds	r3, r2, r3
    559e:	3304      	adds	r3, #4
    55a0:	220c      	movs	r2, #12
    55a2:	18ba      	adds	r2, r7, r2
    55a4:	8812      	ldrh	r2, [r2, #0]
    55a6:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    55a8:	230f      	movs	r3, #15
    55aa:	18fb      	adds	r3, r7, r3
    55ac:	781b      	ldrb	r3, [r3, #0]
    55ae:	b25b      	sxtb	r3, r3
    55b0:	4a37      	ldr	r2, [pc, #220]	; (5690 <recv+0x178>)
    55b2:	011b      	lsls	r3, r3, #4
    55b4:	18d3      	adds	r3, r2, r3
    55b6:	330c      	adds	r3, #12
    55b8:	781b      	ldrb	r3, [r3, #0]
    55ba:	b2db      	uxtb	r3, r3
    55bc:	2b00      	cmp	r3, #0
    55be:	d15e      	bne.n	567e <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    55c0:	231d      	movs	r3, #29
    55c2:	18fb      	adds	r3, r7, r3
    55c4:	2246      	movs	r2, #70	; 0x46
    55c6:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    55c8:	230f      	movs	r3, #15
    55ca:	18fb      	adds	r3, r7, r3
    55cc:	781b      	ldrb	r3, [r3, #0]
    55ce:	b25b      	sxtb	r3, r3
    55d0:	4a2f      	ldr	r2, [pc, #188]	; (5690 <recv+0x178>)
    55d2:	011b      	lsls	r3, r3, #4
    55d4:	18d3      	adds	r3, r2, r3
    55d6:	330c      	adds	r3, #12
    55d8:	2201      	movs	r2, #1
    55da:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    55dc:	230f      	movs	r3, #15
    55de:	18fb      	adds	r3, r7, r3
    55e0:	781b      	ldrb	r3, [r3, #0]
    55e2:	b25b      	sxtb	r3, r3
    55e4:	4a2a      	ldr	r2, [pc, #168]	; (5690 <recv+0x178>)
    55e6:	011b      	lsls	r3, r3, #4
    55e8:	18d3      	adds	r3, r2, r3
    55ea:	330b      	adds	r3, #11
    55ec:	781b      	ldrb	r3, [r3, #0]
    55ee:	b2db      	uxtb	r3, r3
    55f0:	001a      	movs	r2, r3
    55f2:	2301      	movs	r3, #1
    55f4:	4013      	ands	r3, r2
    55f6:	d003      	beq.n	5600 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    55f8:	231d      	movs	r3, #29
    55fa:	18fb      	adds	r3, r7, r3
    55fc:	224d      	movs	r2, #77	; 0x4d
    55fe:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    5600:	687b      	ldr	r3, [r7, #4]
    5602:	2b00      	cmp	r3, #0
    5604:	d105      	bne.n	5612 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    5606:	2314      	movs	r3, #20
    5608:	18fb      	adds	r3, r7, r3
    560a:	2201      	movs	r2, #1
    560c:	4252      	negs	r2, r2
    560e:	601a      	str	r2, [r3, #0]
    5610:	e003      	b.n	561a <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    5612:	2314      	movs	r3, #20
    5614:	18fb      	adds	r3, r7, r3
    5616:	687a      	ldr	r2, [r7, #4]
    5618:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    561a:	2314      	movs	r3, #20
    561c:	18fb      	adds	r3, r7, r3
    561e:	220f      	movs	r2, #15
    5620:	18ba      	adds	r2, r7, r2
    5622:	7812      	ldrb	r2, [r2, #0]
    5624:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    5626:	230f      	movs	r3, #15
    5628:	18fb      	adds	r3, r7, r3
    562a:	781b      	ldrb	r3, [r3, #0]
    562c:	b25b      	sxtb	r3, r3
    562e:	4a18      	ldr	r2, [pc, #96]	; (5690 <recv+0x178>)
    5630:	011b      	lsls	r3, r3, #4
    5632:	18d3      	adds	r3, r2, r3
    5634:	3306      	adds	r3, #6
    5636:	881b      	ldrh	r3, [r3, #0]
    5638:	b29a      	uxth	r2, r3
    563a:	2314      	movs	r3, #20
    563c:	18fb      	adds	r3, r7, r3
    563e:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    5640:	2314      	movs	r3, #20
    5642:	18fa      	adds	r2, r7, r3
    5644:	231d      	movs	r3, #29
    5646:	18fb      	adds	r3, r7, r3
    5648:	7819      	ldrb	r1, [r3, #0]
    564a:	2300      	movs	r3, #0
    564c:	9302      	str	r3, [sp, #8]
    564e:	2300      	movs	r3, #0
    5650:	9301      	str	r3, [sp, #4]
    5652:	2300      	movs	r3, #0
    5654:	9300      	str	r3, [sp, #0]
    5656:	2308      	movs	r3, #8
    5658:	2002      	movs	r0, #2
    565a:	4c0e      	ldr	r4, [pc, #56]	; (5694 <recv+0x17c>)
    565c:	47a0      	blx	r4
    565e:	0003      	movs	r3, r0
    5660:	001a      	movs	r2, r3
    5662:	231e      	movs	r3, #30
    5664:	18fb      	adds	r3, r7, r3
    5666:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    5668:	231e      	movs	r3, #30
    566a:	18fb      	adds	r3, r7, r3
    566c:	2200      	movs	r2, #0
    566e:	5e9b      	ldrsh	r3, [r3, r2]
    5670:	2b00      	cmp	r3, #0
    5672:	d004      	beq.n	567e <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    5674:	231e      	movs	r3, #30
    5676:	18fb      	adds	r3, r7, r3
    5678:	220e      	movs	r2, #14
    567a:	4252      	negs	r2, r2
    567c:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    567e:	231e      	movs	r3, #30
    5680:	18fb      	adds	r3, r7, r3
    5682:	2200      	movs	r2, #0
    5684:	5e9b      	ldrsh	r3, [r3, r2]
}
    5686:	0018      	movs	r0, r3
    5688:	46bd      	mov	sp, r7
    568a:	b009      	add	sp, #36	; 0x24
    568c:	bd90      	pop	{r4, r7, pc}
    568e:	46c0      	nop			; (mov r8, r8)
    5690:	2000033c 	.word	0x2000033c
    5694:	00000f41 	.word	0x00000f41

00005698 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    5698:	b5b0      	push	{r4, r5, r7, lr}
    569a:	b088      	sub	sp, #32
    569c:	af04      	add	r7, sp, #16
    569e:	0002      	movs	r2, r0
    56a0:	1dfb      	adds	r3, r7, #7
    56a2:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    56a4:	230f      	movs	r3, #15
    56a6:	18fb      	adds	r3, r7, r3
    56a8:	22fa      	movs	r2, #250	; 0xfa
    56aa:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    56ac:	4b42      	ldr	r3, [pc, #264]	; (57b8 <close+0x120>)
    56ae:	0018      	movs	r0, r3
    56b0:	4b42      	ldr	r3, [pc, #264]	; (57bc <close+0x124>)
    56b2:	4798      	blx	r3
    56b4:	1dfb      	adds	r3, r7, #7
    56b6:	2200      	movs	r2, #0
    56b8:	569a      	ldrsb	r2, [r3, r2]
    56ba:	4b41      	ldr	r3, [pc, #260]	; (57c0 <close+0x128>)
    56bc:	0011      	movs	r1, r2
    56be:	0018      	movs	r0, r3
    56c0:	4b3e      	ldr	r3, [pc, #248]	; (57bc <close+0x124>)
    56c2:	4798      	blx	r3
    56c4:	200d      	movs	r0, #13
    56c6:	4b3f      	ldr	r3, [pc, #252]	; (57c4 <close+0x12c>)
    56c8:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    56ca:	1dfb      	adds	r3, r7, #7
    56cc:	781b      	ldrb	r3, [r3, #0]
    56ce:	2b7f      	cmp	r3, #127	; 0x7f
    56d0:	d86a      	bhi.n	57a8 <close+0x110>
    56d2:	1dfb      	adds	r3, r7, #7
    56d4:	781b      	ldrb	r3, [r3, #0]
    56d6:	b25b      	sxtb	r3, r3
    56d8:	4a3b      	ldr	r2, [pc, #236]	; (57c8 <close+0x130>)
    56da:	011b      	lsls	r3, r3, #4
    56dc:	18d3      	adds	r3, r2, r3
    56de:	330a      	adds	r3, #10
    56e0:	781b      	ldrb	r3, [r3, #0]
    56e2:	b2db      	uxtb	r3, r3
    56e4:	2b01      	cmp	r3, #1
    56e6:	d15f      	bne.n	57a8 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    56e8:	230e      	movs	r3, #14
    56ea:	18fb      	adds	r3, r7, r3
    56ec:	2249      	movs	r2, #73	; 0x49
    56ee:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    56f0:	2308      	movs	r3, #8
    56f2:	18fb      	adds	r3, r7, r3
    56f4:	1dfa      	adds	r2, r7, #7
    56f6:	7812      	ldrb	r2, [r2, #0]
    56f8:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    56fa:	1dfb      	adds	r3, r7, #7
    56fc:	781b      	ldrb	r3, [r3, #0]
    56fe:	b25b      	sxtb	r3, r3
    5700:	4a31      	ldr	r2, [pc, #196]	; (57c8 <close+0x130>)
    5702:	011b      	lsls	r3, r3, #4
    5704:	18d3      	adds	r3, r2, r3
    5706:	3306      	adds	r3, #6
    5708:	881b      	ldrh	r3, [r3, #0]
    570a:	b29a      	uxth	r2, r3
    570c:	2308      	movs	r3, #8
    570e:	18fb      	adds	r3, r7, r3
    5710:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    5712:	1dfb      	adds	r3, r7, #7
    5714:	781b      	ldrb	r3, [r3, #0]
    5716:	b25b      	sxtb	r3, r3
    5718:	4a2b      	ldr	r2, [pc, #172]	; (57c8 <close+0x130>)
    571a:	011b      	lsls	r3, r3, #4
    571c:	18d3      	adds	r3, r2, r3
    571e:	330a      	adds	r3, #10
    5720:	2200      	movs	r2, #0
    5722:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    5724:	1dfb      	adds	r3, r7, #7
    5726:	781b      	ldrb	r3, [r3, #0]
    5728:	b25b      	sxtb	r3, r3
    572a:	4a27      	ldr	r2, [pc, #156]	; (57c8 <close+0x130>)
    572c:	011b      	lsls	r3, r3, #4
    572e:	18d3      	adds	r3, r2, r3
    5730:	3306      	adds	r3, #6
    5732:	2200      	movs	r2, #0
    5734:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5736:	1dfb      	adds	r3, r7, #7
    5738:	781b      	ldrb	r3, [r3, #0]
    573a:	b25b      	sxtb	r3, r3
    573c:	4a22      	ldr	r2, [pc, #136]	; (57c8 <close+0x130>)
    573e:	011b      	lsls	r3, r3, #4
    5740:	18d3      	adds	r3, r2, r3
    5742:	330b      	adds	r3, #11
    5744:	781b      	ldrb	r3, [r3, #0]
    5746:	b2db      	uxtb	r3, r3
    5748:	001a      	movs	r2, r3
    574a:	2301      	movs	r3, #1
    574c:	4013      	ands	r3, r2
    574e:	d003      	beq.n	5758 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    5750:	230e      	movs	r3, #14
    5752:	18fb      	adds	r3, r7, r3
    5754:	224e      	movs	r2, #78	; 0x4e
    5756:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    5758:	230f      	movs	r3, #15
    575a:	18fc      	adds	r4, r7, r3
    575c:	2308      	movs	r3, #8
    575e:	18fa      	adds	r2, r7, r3
    5760:	230e      	movs	r3, #14
    5762:	18fb      	adds	r3, r7, r3
    5764:	7819      	ldrb	r1, [r3, #0]
    5766:	2300      	movs	r3, #0
    5768:	9302      	str	r3, [sp, #8]
    576a:	2300      	movs	r3, #0
    576c:	9301      	str	r3, [sp, #4]
    576e:	2300      	movs	r3, #0
    5770:	9300      	str	r3, [sp, #0]
    5772:	2304      	movs	r3, #4
    5774:	2002      	movs	r0, #2
    5776:	4d15      	ldr	r5, [pc, #84]	; (57cc <close+0x134>)
    5778:	47a8      	blx	r5
    577a:	0003      	movs	r3, r0
    577c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    577e:	230f      	movs	r3, #15
    5780:	18fb      	adds	r3, r7, r3
    5782:	781b      	ldrb	r3, [r3, #0]
    5784:	b25b      	sxtb	r3, r3
    5786:	2b00      	cmp	r3, #0
    5788:	d003      	beq.n	5792 <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    578a:	230f      	movs	r3, #15
    578c:	18fb      	adds	r3, r7, r3
    578e:	22f7      	movs	r2, #247	; 0xf7
    5790:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    5792:	1dfb      	adds	r3, r7, #7
    5794:	781b      	ldrb	r3, [r3, #0]
    5796:	b25b      	sxtb	r3, r3
    5798:	011a      	lsls	r2, r3, #4
    579a:	4b0b      	ldr	r3, [pc, #44]	; (57c8 <close+0x130>)
    579c:	18d3      	adds	r3, r2, r3
    579e:	2210      	movs	r2, #16
    57a0:	2100      	movs	r1, #0
    57a2:	0018      	movs	r0, r3
    57a4:	4b0a      	ldr	r3, [pc, #40]	; (57d0 <close+0x138>)
    57a6:	4798      	blx	r3
	}
	return s8Ret;
    57a8:	230f      	movs	r3, #15
    57aa:	18fb      	adds	r3, r7, r3
    57ac:	781b      	ldrb	r3, [r3, #0]
    57ae:	b25b      	sxtb	r3, r3
}
    57b0:	0018      	movs	r0, r3
    57b2:	46bd      	mov	sp, r7
    57b4:	b004      	add	sp, #16
    57b6:	bdb0      	pop	{r4, r5, r7, pc}
    57b8:	0000e804 	.word	0x0000e804
    57bc:	0000c455 	.word	0x0000c455
    57c0:	0000e840 	.word	0x0000e840
    57c4:	0000c489 	.word	0x0000c489
    57c8:	2000033c 	.word	0x2000033c
    57cc:	00000f41 	.word	0x00000f41
    57d0:	00000ce1 	.word	0x00000ce1

000057d4 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    57d4:	b580      	push	{r7, lr}
    57d6:	b086      	sub	sp, #24
    57d8:	af00      	add	r7, sp, #0
    57da:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    57dc:	2300      	movs	r3, #0
    57de:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    57e0:	2317      	movs	r3, #23
    57e2:	18fb      	adds	r3, r7, r3
    57e4:	2200      	movs	r2, #0
    57e6:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    57e8:	2316      	movs	r3, #22
    57ea:	18fb      	adds	r3, r7, r3
    57ec:	2200      	movs	r2, #0
    57ee:	701a      	strb	r2, [r3, #0]
    57f0:	e060      	b.n	58b4 <nmi_inet_addr+0xe0>
	{
		j = 0;
    57f2:	2315      	movs	r3, #21
    57f4:	18fb      	adds	r3, r7, r3
    57f6:	2200      	movs	r2, #0
    57f8:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    57fa:	2314      	movs	r3, #20
    57fc:	18fb      	adds	r3, r7, r3
    57fe:	687a      	ldr	r2, [r7, #4]
    5800:	7812      	ldrb	r2, [r2, #0]
    5802:	701a      	strb	r2, [r3, #0]
			++j;
    5804:	2315      	movs	r3, #21
    5806:	18fb      	adds	r3, r7, r3
    5808:	2215      	movs	r2, #21
    580a:	18ba      	adds	r2, r7, r2
    580c:	7812      	ldrb	r2, [r2, #0]
    580e:	3201      	adds	r2, #1
    5810:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    5812:	2315      	movs	r3, #21
    5814:	18fb      	adds	r3, r7, r3
    5816:	781b      	ldrb	r3, [r3, #0]
    5818:	2b04      	cmp	r3, #4
    581a:	d901      	bls.n	5820 <nmi_inet_addr+0x4c>
			{
				return 0;
    581c:	2300      	movs	r3, #0
    581e:	e057      	b.n	58d0 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    5820:	2314      	movs	r3, #20
    5822:	18fb      	adds	r3, r7, r3
    5824:	781b      	ldrb	r3, [r3, #0]
    5826:	2b2e      	cmp	r3, #46	; 0x2e
    5828:	d004      	beq.n	5834 <nmi_inet_addr+0x60>
    582a:	2314      	movs	r3, #20
    582c:	18fb      	adds	r3, r7, r3
    582e:	781b      	ldrb	r3, [r3, #0]
    5830:	2b00      	cmp	r3, #0
    5832:	d10d      	bne.n	5850 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    5834:	2316      	movs	r3, #22
    5836:	18fb      	adds	r3, r7, r3
    5838:	781b      	ldrb	r3, [r3, #0]
    583a:	220c      	movs	r2, #12
    583c:	18ba      	adds	r2, r7, r2
    583e:	2117      	movs	r1, #23
    5840:	1879      	adds	r1, r7, r1
    5842:	7809      	ldrb	r1, [r1, #0]
    5844:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    5846:	2317      	movs	r3, #23
    5848:	18fb      	adds	r3, r7, r3
    584a:	2200      	movs	r2, #0
    584c:	701a      	strb	r2, [r3, #0]
    584e:	e01d      	b.n	588c <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    5850:	2314      	movs	r3, #20
    5852:	18fb      	adds	r3, r7, r3
    5854:	781b      	ldrb	r3, [r3, #0]
    5856:	2b2f      	cmp	r3, #47	; 0x2f
    5858:	d916      	bls.n	5888 <nmi_inet_addr+0xb4>
    585a:	2314      	movs	r3, #20
    585c:	18fb      	adds	r3, r7, r3
    585e:	781b      	ldrb	r3, [r3, #0]
    5860:	2b39      	cmp	r3, #57	; 0x39
    5862:	d811      	bhi.n	5888 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    5864:	2317      	movs	r3, #23
    5866:	18fb      	adds	r3, r7, r3
    5868:	781b      	ldrb	r3, [r3, #0]
    586a:	1c1a      	adds	r2, r3, #0
    586c:	0092      	lsls	r2, r2, #2
    586e:	18d3      	adds	r3, r2, r3
    5870:	18db      	adds	r3, r3, r3
    5872:	b2da      	uxtb	r2, r3
    5874:	2314      	movs	r3, #20
    5876:	18fb      	adds	r3, r7, r3
    5878:	781b      	ldrb	r3, [r3, #0]
    587a:	18d3      	adds	r3, r2, r3
    587c:	b2da      	uxtb	r2, r3
    587e:	2317      	movs	r3, #23
    5880:	18fb      	adds	r3, r7, r3
    5882:	3a30      	subs	r2, #48	; 0x30
    5884:	701a      	strb	r2, [r3, #0]
    5886:	e001      	b.n	588c <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    5888:	2300      	movs	r3, #0
    588a:	e021      	b.n	58d0 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    588c:	687b      	ldr	r3, [r7, #4]
    588e:	3301      	adds	r3, #1
    5890:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    5892:	2314      	movs	r3, #20
    5894:	18fb      	adds	r3, r7, r3
    5896:	781b      	ldrb	r3, [r3, #0]
    5898:	2b2e      	cmp	r3, #46	; 0x2e
    589a:	d004      	beq.n	58a6 <nmi_inet_addr+0xd2>
    589c:	2314      	movs	r3, #20
    589e:	18fb      	adds	r3, r7, r3
    58a0:	781b      	ldrb	r3, [r3, #0]
    58a2:	2b00      	cmp	r3, #0
    58a4:	d1a9      	bne.n	57fa <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
    58a6:	2316      	movs	r3, #22
    58a8:	18fb      	adds	r3, r7, r3
    58aa:	2216      	movs	r2, #22
    58ac:	18ba      	adds	r2, r7, r2
    58ae:	7812      	ldrb	r2, [r2, #0]
    58b0:	3201      	adds	r2, #1
    58b2:	701a      	strb	r2, [r3, #0]
    58b4:	2316      	movs	r3, #22
    58b6:	18fb      	adds	r3, r7, r3
    58b8:	781b      	ldrb	r3, [r3, #0]
    58ba:	2b03      	cmp	r3, #3
    58bc:	d999      	bls.n	57f2 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    58be:	230c      	movs	r3, #12
    58c0:	18f9      	adds	r1, r7, r3
    58c2:	2310      	movs	r3, #16
    58c4:	18fb      	adds	r3, r7, r3
    58c6:	2204      	movs	r2, #4
    58c8:	0018      	movs	r0, r3
    58ca:	4b03      	ldr	r3, [pc, #12]	; (58d8 <nmi_inet_addr+0x104>)
    58cc:	4798      	blx	r3
	return u32IP;
    58ce:	693b      	ldr	r3, [r7, #16]
}
    58d0:	0018      	movs	r0, r3
    58d2:	46bd      	mov	sp, r7
    58d4:	b006      	add	sp, #24
    58d6:	bd80      	pop	{r7, pc}
    58d8:	00000ca5 	.word	0x00000ca5

000058dc <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    58dc:	b5b0      	push	{r4, r5, r7, lr}
    58de:	b088      	sub	sp, #32
    58e0:	af04      	add	r7, sp, #16
    58e2:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    58e4:	230f      	movs	r3, #15
    58e6:	18fb      	adds	r3, r7, r3
    58e8:	22fa      	movs	r2, #250	; 0xfa
    58ea:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    58ec:	687b      	ldr	r3, [r7, #4]
    58ee:	0018      	movs	r0, r3
    58f0:	4b14      	ldr	r3, [pc, #80]	; (5944 <gethostbyname+0x68>)
    58f2:	4798      	blx	r3
    58f4:	0003      	movs	r3, r0
    58f6:	001a      	movs	r2, r3
    58f8:	230e      	movs	r3, #14
    58fa:	18fb      	adds	r3, r7, r3
    58fc:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    58fe:	230e      	movs	r3, #14
    5900:	18fb      	adds	r3, r7, r3
    5902:	781b      	ldrb	r3, [r3, #0]
    5904:	2b40      	cmp	r3, #64	; 0x40
    5906:	d815      	bhi.n	5934 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    5908:	230e      	movs	r3, #14
    590a:	18fb      	adds	r3, r7, r3
    590c:	781b      	ldrb	r3, [r3, #0]
    590e:	b29b      	uxth	r3, r3
    5910:	3301      	adds	r3, #1
    5912:	b299      	uxth	r1, r3
    5914:	230f      	movs	r3, #15
    5916:	18fc      	adds	r4, r7, r3
    5918:	687a      	ldr	r2, [r7, #4]
    591a:	2300      	movs	r3, #0
    591c:	9302      	str	r3, [sp, #8]
    591e:	2300      	movs	r3, #0
    5920:	9301      	str	r3, [sp, #4]
    5922:	2300      	movs	r3, #0
    5924:	9300      	str	r3, [sp, #0]
    5926:	000b      	movs	r3, r1
    5928:	214a      	movs	r1, #74	; 0x4a
    592a:	2002      	movs	r0, #2
    592c:	4d06      	ldr	r5, [pc, #24]	; (5948 <gethostbyname+0x6c>)
    592e:	47a8      	blx	r5
    5930:	0003      	movs	r3, r0
    5932:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    5934:	230f      	movs	r3, #15
    5936:	18fb      	adds	r3, r7, r3
    5938:	781b      	ldrb	r3, [r3, #0]
    593a:	b25b      	sxtb	r3, r3
}
    593c:	0018      	movs	r0, r3
    593e:	46bd      	mov	sp, r7
    5940:	b004      	add	sp, #16
    5942:	bdb0      	pop	{r4, r5, r7, pc}
    5944:	00000d1f 	.word	0x00000d1f
    5948:	00000f41 	.word	0x00000f41

0000594c <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    594c:	b580      	push	{r7, lr}
    594e:	b082      	sub	sp, #8
    5950:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    5952:	003b      	movs	r3, r7
    5954:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    5956:	687b      	ldr	r3, [r7, #4]
    5958:	22b9      	movs	r2, #185	; 0xb9
    595a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    595c:	4b13      	ldr	r3, [pc, #76]	; (59ac <spi_flash_enter_low_power_mode+0x60>)
    595e:	2100      	movs	r1, #0
    5960:	0018      	movs	r0, r3
    5962:	4b13      	ldr	r3, [pc, #76]	; (59b0 <spi_flash_enter_low_power_mode+0x64>)
    5964:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    5966:	687b      	ldr	r3, [r7, #4]
    5968:	781b      	ldrb	r3, [r3, #0]
    596a:	001a      	movs	r2, r3
    596c:	4b11      	ldr	r3, [pc, #68]	; (59b4 <spi_flash_enter_low_power_mode+0x68>)
    596e:	0011      	movs	r1, r2
    5970:	0018      	movs	r0, r3
    5972:	4b0f      	ldr	r3, [pc, #60]	; (59b0 <spi_flash_enter_low_power_mode+0x64>)
    5974:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    5976:	4b10      	ldr	r3, [pc, #64]	; (59b8 <spi_flash_enter_low_power_mode+0x6c>)
    5978:	2101      	movs	r1, #1
    597a:	0018      	movs	r0, r3
    597c:	4b0c      	ldr	r3, [pc, #48]	; (59b0 <spi_flash_enter_low_power_mode+0x64>)
    597e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5980:	4b0e      	ldr	r3, [pc, #56]	; (59bc <spi_flash_enter_low_power_mode+0x70>)
    5982:	2100      	movs	r1, #0
    5984:	0018      	movs	r0, r3
    5986:	4b0a      	ldr	r3, [pc, #40]	; (59b0 <spi_flash_enter_low_power_mode+0x64>)
    5988:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    598a:	4b0d      	ldr	r3, [pc, #52]	; (59c0 <spi_flash_enter_low_power_mode+0x74>)
    598c:	2181      	movs	r1, #129	; 0x81
    598e:	0018      	movs	r0, r3
    5990:	4b07      	ldr	r3, [pc, #28]	; (59b0 <spi_flash_enter_low_power_mode+0x64>)
    5992:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5994:	46c0      	nop			; (mov r8, r8)
    5996:	4b0b      	ldr	r3, [pc, #44]	; (59c4 <spi_flash_enter_low_power_mode+0x78>)
    5998:	0018      	movs	r0, r3
    599a:	4b0b      	ldr	r3, [pc, #44]	; (59c8 <spi_flash_enter_low_power_mode+0x7c>)
    599c:	4798      	blx	r3
    599e:	0003      	movs	r3, r0
    59a0:	2b01      	cmp	r3, #1
    59a2:	d1f8      	bne.n	5996 <spi_flash_enter_low_power_mode+0x4a>
}
    59a4:	46c0      	nop			; (mov r8, r8)
    59a6:	46bd      	mov	sp, r7
    59a8:	b002      	add	sp, #8
    59aa:	bd80      	pop	{r7, pc}
    59ac:	00010208 	.word	0x00010208
    59b0:	00002d41 	.word	0x00002d41
    59b4:	0001020c 	.word	0x0001020c
    59b8:	00010214 	.word	0x00010214
    59bc:	0001021c 	.word	0x0001021c
    59c0:	00010204 	.word	0x00010204
    59c4:	00010218 	.word	0x00010218
    59c8:	00002cfd 	.word	0x00002cfd

000059cc <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    59cc:	b580      	push	{r7, lr}
    59ce:	b082      	sub	sp, #8
    59d0:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    59d2:	003b      	movs	r3, r7
    59d4:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    59d6:	687b      	ldr	r3, [r7, #4]
    59d8:	22ab      	movs	r2, #171	; 0xab
    59da:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    59dc:	4b13      	ldr	r3, [pc, #76]	; (5a2c <spi_flash_leave_low_power_mode+0x60>)
    59de:	2100      	movs	r1, #0
    59e0:	0018      	movs	r0, r3
    59e2:	4b13      	ldr	r3, [pc, #76]	; (5a30 <spi_flash_leave_low_power_mode+0x64>)
    59e4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    59e6:	687b      	ldr	r3, [r7, #4]
    59e8:	781b      	ldrb	r3, [r3, #0]
    59ea:	001a      	movs	r2, r3
    59ec:	4b11      	ldr	r3, [pc, #68]	; (5a34 <spi_flash_leave_low_power_mode+0x68>)
    59ee:	0011      	movs	r1, r2
    59f0:	0018      	movs	r0, r3
    59f2:	4b0f      	ldr	r3, [pc, #60]	; (5a30 <spi_flash_leave_low_power_mode+0x64>)
    59f4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    59f6:	4b10      	ldr	r3, [pc, #64]	; (5a38 <spi_flash_leave_low_power_mode+0x6c>)
    59f8:	2101      	movs	r1, #1
    59fa:	0018      	movs	r0, r3
    59fc:	4b0c      	ldr	r3, [pc, #48]	; (5a30 <spi_flash_leave_low_power_mode+0x64>)
    59fe:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5a00:	4b0e      	ldr	r3, [pc, #56]	; (5a3c <spi_flash_leave_low_power_mode+0x70>)
    5a02:	2100      	movs	r1, #0
    5a04:	0018      	movs	r0, r3
    5a06:	4b0a      	ldr	r3, [pc, #40]	; (5a30 <spi_flash_leave_low_power_mode+0x64>)
    5a08:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    5a0a:	4b0d      	ldr	r3, [pc, #52]	; (5a40 <spi_flash_leave_low_power_mode+0x74>)
    5a0c:	2181      	movs	r1, #129	; 0x81
    5a0e:	0018      	movs	r0, r3
    5a10:	4b07      	ldr	r3, [pc, #28]	; (5a30 <spi_flash_leave_low_power_mode+0x64>)
    5a12:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5a14:	46c0      	nop			; (mov r8, r8)
    5a16:	4b0b      	ldr	r3, [pc, #44]	; (5a44 <spi_flash_leave_low_power_mode+0x78>)
    5a18:	0018      	movs	r0, r3
    5a1a:	4b0b      	ldr	r3, [pc, #44]	; (5a48 <spi_flash_leave_low_power_mode+0x7c>)
    5a1c:	4798      	blx	r3
    5a1e:	0003      	movs	r3, r0
    5a20:	2b01      	cmp	r3, #1
    5a22:	d1f8      	bne.n	5a16 <spi_flash_leave_low_power_mode+0x4a>
}
    5a24:	46c0      	nop			; (mov r8, r8)
    5a26:	46bd      	mov	sp, r7
    5a28:	b002      	add	sp, #8
    5a2a:	bd80      	pop	{r7, pc}
    5a2c:	00010208 	.word	0x00010208
    5a30:	00002d41 	.word	0x00002d41
    5a34:	0001020c 	.word	0x0001020c
    5a38:	00010214 	.word	0x00010214
    5a3c:	0001021c 	.word	0x0001021c
    5a40:	00010204 	.word	0x00010204
    5a44:	00010218 	.word	0x00010218
    5a48:	00002cfd 	.word	0x00002cfd

00005a4c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    5a4c:	b590      	push	{r4, r7, lr}
    5a4e:	b085      	sub	sp, #20
    5a50:	af00      	add	r7, sp, #0
    5a52:	0002      	movs	r2, r0
    5a54:	1dfb      	adds	r3, r7, #7
    5a56:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    5a58:	230f      	movs	r3, #15
    5a5a:	18fb      	adds	r3, r7, r3
    5a5c:	2200      	movs	r2, #0
    5a5e:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    5a60:	4b24      	ldr	r3, [pc, #144]	; (5af4 <spi_flash_enable+0xa8>)
    5a62:	4798      	blx	r3
    5a64:	0003      	movs	r3, r0
    5a66:	051b      	lsls	r3, r3, #20
    5a68:	0d1b      	lsrs	r3, r3, #20
    5a6a:	4a23      	ldr	r2, [pc, #140]	; (5af8 <spi_flash_enable+0xac>)
    5a6c:	4293      	cmp	r3, r2
    5a6e:	d938      	bls.n	5ae2 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    5a70:	230f      	movs	r3, #15
    5a72:	18fc      	adds	r4, r7, r3
    5a74:	2308      	movs	r3, #8
    5a76:	18fb      	adds	r3, r7, r3
    5a78:	4a20      	ldr	r2, [pc, #128]	; (5afc <spi_flash_enable+0xb0>)
    5a7a:	0019      	movs	r1, r3
    5a7c:	0010      	movs	r0, r2
    5a7e:	4b20      	ldr	r3, [pc, #128]	; (5b00 <spi_flash_enable+0xb4>)
    5a80:	4798      	blx	r3
    5a82:	0003      	movs	r3, r0
    5a84:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    5a86:	230f      	movs	r3, #15
    5a88:	18fb      	adds	r3, r7, r3
    5a8a:	781b      	ldrb	r3, [r3, #0]
    5a8c:	b25b      	sxtb	r3, r3
    5a8e:	2b00      	cmp	r3, #0
    5a90:	d126      	bne.n	5ae0 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    5a92:	68bb      	ldr	r3, [r7, #8]
    5a94:	4a1b      	ldr	r2, [pc, #108]	; (5b04 <spi_flash_enable+0xb8>)
    5a96:	4013      	ands	r3, r2
    5a98:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    5a9a:	68bb      	ldr	r3, [r7, #8]
    5a9c:	4a1a      	ldr	r2, [pc, #104]	; (5b08 <spi_flash_enable+0xbc>)
    5a9e:	4313      	orrs	r3, r2
    5aa0:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5aa2:	68bb      	ldr	r3, [r7, #8]
    5aa4:	4a15      	ldr	r2, [pc, #84]	; (5afc <spi_flash_enable+0xb0>)
    5aa6:	0019      	movs	r1, r3
    5aa8:	0010      	movs	r0, r2
    5aaa:	4b18      	ldr	r3, [pc, #96]	; (5b0c <spi_flash_enable+0xc0>)
    5aac:	4798      	blx	r3
		if(enable) {
    5aae:	1dfb      	adds	r3, r7, #7
    5ab0:	781b      	ldrb	r3, [r3, #0]
    5ab2:	2b00      	cmp	r3, #0
    5ab4:	d002      	beq.n	5abc <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    5ab6:	4b16      	ldr	r3, [pc, #88]	; (5b10 <spi_flash_enable+0xc4>)
    5ab8:	4798      	blx	r3
    5aba:	e001      	b.n	5ac0 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    5abc:	4b15      	ldr	r3, [pc, #84]	; (5b14 <spi_flash_enable+0xc8>)
    5abe:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    5ac0:	68bb      	ldr	r3, [r7, #8]
    5ac2:	4a10      	ldr	r2, [pc, #64]	; (5b04 <spi_flash_enable+0xb8>)
    5ac4:	4013      	ands	r3, r2
    5ac6:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    5ac8:	68bb      	ldr	r3, [r7, #8]
    5aca:	2280      	movs	r2, #128	; 0x80
    5acc:	0252      	lsls	r2, r2, #9
    5ace:	4313      	orrs	r3, r2
    5ad0:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5ad2:	68bb      	ldr	r3, [r7, #8]
    5ad4:	4a09      	ldr	r2, [pc, #36]	; (5afc <spi_flash_enable+0xb0>)
    5ad6:	0019      	movs	r1, r3
    5ad8:	0010      	movs	r0, r2
    5ada:	4b0c      	ldr	r3, [pc, #48]	; (5b0c <spi_flash_enable+0xc0>)
    5adc:	4798      	blx	r3
    5ade:	e000      	b.n	5ae2 <spi_flash_enable+0x96>
			goto ERR1;
    5ae0:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    5ae2:	230f      	movs	r3, #15
    5ae4:	18fb      	adds	r3, r7, r3
    5ae6:	781b      	ldrb	r3, [r3, #0]
    5ae8:	b25b      	sxtb	r3, r3
}
    5aea:	0018      	movs	r0, r3
    5aec:	46bd      	mov	sp, r7
    5aee:	b005      	add	sp, #20
    5af0:	bd90      	pop	{r4, r7, pc}
    5af2:	46c0      	nop			; (mov r8, r8)
    5af4:	00002621 	.word	0x00002621
    5af8:	0000039f 	.word	0x0000039f
    5afc:	00001410 	.word	0x00001410
    5b00:	00002d1d 	.word	0x00002d1d
    5b04:	f8888fff 	.word	0xf8888fff
    5b08:	01111000 	.word	0x01111000
    5b0c:	00002d41 	.word	0x00002d41
    5b10:	000059cd 	.word	0x000059cd
    5b14:	0000594d 	.word	0x0000594d

00005b18 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    5b18:	b580      	push	{r7, lr}
    5b1a:	b082      	sub	sp, #8
    5b1c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    5b1e:	4b10      	ldr	r3, [pc, #64]	; (5b60 <cpu_irq_enter_critical+0x48>)
    5b20:	681b      	ldr	r3, [r3, #0]
    5b22:	2b00      	cmp	r3, #0
    5b24:	d112      	bne.n	5b4c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5b26:	f3ef 8310 	mrs	r3, PRIMASK
    5b2a:	607b      	str	r3, [r7, #4]
  return(result);
    5b2c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    5b2e:	2b00      	cmp	r3, #0
    5b30:	d109      	bne.n	5b46 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    5b32:	b672      	cpsid	i
    5b34:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5b38:	4b0a      	ldr	r3, [pc, #40]	; (5b64 <cpu_irq_enter_critical+0x4c>)
    5b3a:	2200      	movs	r2, #0
    5b3c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5b3e:	4b0a      	ldr	r3, [pc, #40]	; (5b68 <cpu_irq_enter_critical+0x50>)
    5b40:	2201      	movs	r2, #1
    5b42:	701a      	strb	r2, [r3, #0]
    5b44:	e002      	b.n	5b4c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    5b46:	4b08      	ldr	r3, [pc, #32]	; (5b68 <cpu_irq_enter_critical+0x50>)
    5b48:	2200      	movs	r2, #0
    5b4a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5b4c:	4b04      	ldr	r3, [pc, #16]	; (5b60 <cpu_irq_enter_critical+0x48>)
    5b4e:	681b      	ldr	r3, [r3, #0]
    5b50:	1c5a      	adds	r2, r3, #1
    5b52:	4b03      	ldr	r3, [pc, #12]	; (5b60 <cpu_irq_enter_critical+0x48>)
    5b54:	601a      	str	r2, [r3, #0]
}
    5b56:	46c0      	nop			; (mov r8, r8)
    5b58:	46bd      	mov	sp, r7
    5b5a:	b002      	add	sp, #8
    5b5c:	bd80      	pop	{r7, pc}
    5b5e:	46c0      	nop			; (mov r8, r8)
    5b60:	200000b8 	.word	0x200000b8
    5b64:	2000000a 	.word	0x2000000a
    5b68:	200000bc 	.word	0x200000bc

00005b6c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    5b6c:	b580      	push	{r7, lr}
    5b6e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5b70:	4b0b      	ldr	r3, [pc, #44]	; (5ba0 <cpu_irq_leave_critical+0x34>)
    5b72:	681b      	ldr	r3, [r3, #0]
    5b74:	1e5a      	subs	r2, r3, #1
    5b76:	4b0a      	ldr	r3, [pc, #40]	; (5ba0 <cpu_irq_leave_critical+0x34>)
    5b78:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5b7a:	4b09      	ldr	r3, [pc, #36]	; (5ba0 <cpu_irq_leave_critical+0x34>)
    5b7c:	681b      	ldr	r3, [r3, #0]
    5b7e:	2b00      	cmp	r3, #0
    5b80:	d10a      	bne.n	5b98 <cpu_irq_leave_critical+0x2c>
    5b82:	4b08      	ldr	r3, [pc, #32]	; (5ba4 <cpu_irq_leave_critical+0x38>)
    5b84:	781b      	ldrb	r3, [r3, #0]
    5b86:	b2db      	uxtb	r3, r3
    5b88:	2b00      	cmp	r3, #0
    5b8a:	d005      	beq.n	5b98 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    5b8c:	4b06      	ldr	r3, [pc, #24]	; (5ba8 <cpu_irq_leave_critical+0x3c>)
    5b8e:	2201      	movs	r2, #1
    5b90:	701a      	strb	r2, [r3, #0]
    5b92:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5b96:	b662      	cpsie	i
	}
}
    5b98:	46c0      	nop			; (mov r8, r8)
    5b9a:	46bd      	mov	sp, r7
    5b9c:	bd80      	pop	{r7, pc}
    5b9e:	46c0      	nop			; (mov r8, r8)
    5ba0:	200000b8 	.word	0x200000b8
    5ba4:	200000bc 	.word	0x200000bc
    5ba8:	2000000a 	.word	0x2000000a

00005bac <system_pinmux_get_group_from_gpio_pin>:
{
    5bac:	b580      	push	{r7, lr}
    5bae:	b084      	sub	sp, #16
    5bb0:	af00      	add	r7, sp, #0
    5bb2:	0002      	movs	r2, r0
    5bb4:	1dfb      	adds	r3, r7, #7
    5bb6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5bb8:	230f      	movs	r3, #15
    5bba:	18fb      	adds	r3, r7, r3
    5bbc:	1dfa      	adds	r2, r7, #7
    5bbe:	7812      	ldrb	r2, [r2, #0]
    5bc0:	09d2      	lsrs	r2, r2, #7
    5bc2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5bc4:	230e      	movs	r3, #14
    5bc6:	18fb      	adds	r3, r7, r3
    5bc8:	1dfa      	adds	r2, r7, #7
    5bca:	7812      	ldrb	r2, [r2, #0]
    5bcc:	0952      	lsrs	r2, r2, #5
    5bce:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5bd0:	4b0d      	ldr	r3, [pc, #52]	; (5c08 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5bd2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    5bd4:	230f      	movs	r3, #15
    5bd6:	18fb      	adds	r3, r7, r3
    5bd8:	781b      	ldrb	r3, [r3, #0]
    5bda:	2b00      	cmp	r3, #0
    5bdc:	d10f      	bne.n	5bfe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5bde:	230f      	movs	r3, #15
    5be0:	18fb      	adds	r3, r7, r3
    5be2:	781b      	ldrb	r3, [r3, #0]
    5be4:	009b      	lsls	r3, r3, #2
    5be6:	2210      	movs	r2, #16
    5be8:	4694      	mov	ip, r2
    5bea:	44bc      	add	ip, r7
    5bec:	4463      	add	r3, ip
    5bee:	3b08      	subs	r3, #8
    5bf0:	681a      	ldr	r2, [r3, #0]
    5bf2:	230e      	movs	r3, #14
    5bf4:	18fb      	adds	r3, r7, r3
    5bf6:	781b      	ldrb	r3, [r3, #0]
    5bf8:	01db      	lsls	r3, r3, #7
    5bfa:	18d3      	adds	r3, r2, r3
    5bfc:	e000      	b.n	5c00 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    5bfe:	2300      	movs	r3, #0
}
    5c00:	0018      	movs	r0, r3
    5c02:	46bd      	mov	sp, r7
    5c04:	b004      	add	sp, #16
    5c06:	bd80      	pop	{r7, pc}
    5c08:	41004400 	.word	0x41004400

00005c0c <port_get_group_from_gpio_pin>:
{
    5c0c:	b580      	push	{r7, lr}
    5c0e:	b082      	sub	sp, #8
    5c10:	af00      	add	r7, sp, #0
    5c12:	0002      	movs	r2, r0
    5c14:	1dfb      	adds	r3, r7, #7
    5c16:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5c18:	1dfb      	adds	r3, r7, #7
    5c1a:	781b      	ldrb	r3, [r3, #0]
    5c1c:	0018      	movs	r0, r3
    5c1e:	4b03      	ldr	r3, [pc, #12]	; (5c2c <port_get_group_from_gpio_pin+0x20>)
    5c20:	4798      	blx	r3
    5c22:	0003      	movs	r3, r0
}
    5c24:	0018      	movs	r0, r3
    5c26:	46bd      	mov	sp, r7
    5c28:	b002      	add	sp, #8
    5c2a:	bd80      	pop	{r7, pc}
    5c2c:	00005bad 	.word	0x00005bad

00005c30 <port_get_config_defaults>:
{
    5c30:	b580      	push	{r7, lr}
    5c32:	b082      	sub	sp, #8
    5c34:	af00      	add	r7, sp, #0
    5c36:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    5c38:	687b      	ldr	r3, [r7, #4]
    5c3a:	2200      	movs	r2, #0
    5c3c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5c3e:	687b      	ldr	r3, [r7, #4]
    5c40:	2201      	movs	r2, #1
    5c42:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    5c44:	687b      	ldr	r3, [r7, #4]
    5c46:	2200      	movs	r2, #0
    5c48:	709a      	strb	r2, [r3, #2]
}
    5c4a:	46c0      	nop			; (mov r8, r8)
    5c4c:	46bd      	mov	sp, r7
    5c4e:	b002      	add	sp, #8
    5c50:	bd80      	pop	{r7, pc}
	...

00005c54 <port_pin_set_output_level>:
{
    5c54:	b580      	push	{r7, lr}
    5c56:	b084      	sub	sp, #16
    5c58:	af00      	add	r7, sp, #0
    5c5a:	0002      	movs	r2, r0
    5c5c:	1dfb      	adds	r3, r7, #7
    5c5e:	701a      	strb	r2, [r3, #0]
    5c60:	1dbb      	adds	r3, r7, #6
    5c62:	1c0a      	adds	r2, r1, #0
    5c64:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    5c66:	1dfb      	adds	r3, r7, #7
    5c68:	781b      	ldrb	r3, [r3, #0]
    5c6a:	0018      	movs	r0, r3
    5c6c:	4b0d      	ldr	r3, [pc, #52]	; (5ca4 <port_pin_set_output_level+0x50>)
    5c6e:	4798      	blx	r3
    5c70:	0003      	movs	r3, r0
    5c72:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c74:	1dfb      	adds	r3, r7, #7
    5c76:	781b      	ldrb	r3, [r3, #0]
    5c78:	221f      	movs	r2, #31
    5c7a:	4013      	ands	r3, r2
    5c7c:	2201      	movs	r2, #1
    5c7e:	409a      	lsls	r2, r3
    5c80:	0013      	movs	r3, r2
    5c82:	60bb      	str	r3, [r7, #8]
	if (level) {
    5c84:	1dbb      	adds	r3, r7, #6
    5c86:	781b      	ldrb	r3, [r3, #0]
    5c88:	2b00      	cmp	r3, #0
    5c8a:	d003      	beq.n	5c94 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    5c8c:	68fb      	ldr	r3, [r7, #12]
    5c8e:	68ba      	ldr	r2, [r7, #8]
    5c90:	619a      	str	r2, [r3, #24]
}
    5c92:	e002      	b.n	5c9a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    5c94:	68fb      	ldr	r3, [r7, #12]
    5c96:	68ba      	ldr	r2, [r7, #8]
    5c98:	615a      	str	r2, [r3, #20]
}
    5c9a:	46c0      	nop			; (mov r8, r8)
    5c9c:	46bd      	mov	sp, r7
    5c9e:	b004      	add	sp, #16
    5ca0:	bd80      	pop	{r7, pc}
    5ca2:	46c0      	nop			; (mov r8, r8)
    5ca4:	00005c0d 	.word	0x00005c0d

00005ca8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    5ca8:	b580      	push	{r7, lr}
    5caa:	b082      	sub	sp, #8
    5cac:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    5cae:	1d3b      	adds	r3, r7, #4
    5cb0:	0018      	movs	r0, r3
    5cb2:	4b0e      	ldr	r3, [pc, #56]	; (5cec <system_board_init+0x44>)
    5cb4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    5cb6:	1d3b      	adds	r3, r7, #4
    5cb8:	2201      	movs	r2, #1
    5cba:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    5cbc:	1d3b      	adds	r3, r7, #4
    5cbe:	0019      	movs	r1, r3
    5cc0:	2017      	movs	r0, #23
    5cc2:	4b0b      	ldr	r3, [pc, #44]	; (5cf0 <system_board_init+0x48>)
    5cc4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    5cc6:	2101      	movs	r1, #1
    5cc8:	2017      	movs	r0, #23
    5cca:	4b0a      	ldr	r3, [pc, #40]	; (5cf4 <system_board_init+0x4c>)
    5ccc:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    5cce:	1d3b      	adds	r3, r7, #4
    5cd0:	2200      	movs	r2, #0
    5cd2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    5cd4:	1d3b      	adds	r3, r7, #4
    5cd6:	2201      	movs	r2, #1
    5cd8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    5cda:	1d3b      	adds	r3, r7, #4
    5cdc:	0019      	movs	r1, r3
    5cde:	2037      	movs	r0, #55	; 0x37
    5ce0:	4b03      	ldr	r3, [pc, #12]	; (5cf0 <system_board_init+0x48>)
    5ce2:	4798      	blx	r3
}
    5ce4:	46c0      	nop			; (mov r8, r8)
    5ce6:	46bd      	mov	sp, r7
    5ce8:	b002      	add	sp, #8
    5cea:	bd80      	pop	{r7, pc}
    5cec:	00005c31 	.word	0x00005c31
    5cf0:	0000631d 	.word	0x0000631d
    5cf4:	00005c55 	.word	0x00005c55

00005cf8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    5cf8:	b580      	push	{r7, lr}
    5cfa:	b084      	sub	sp, #16
    5cfc:	af00      	add	r7, sp, #0
    5cfe:	0002      	movs	r2, r0
    5d00:	1dfb      	adds	r3, r7, #7
    5d02:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5d04:	230f      	movs	r3, #15
    5d06:	18fb      	adds	r3, r7, r3
    5d08:	1dfa      	adds	r2, r7, #7
    5d0a:	7812      	ldrb	r2, [r2, #0]
    5d0c:	0952      	lsrs	r2, r2, #5
    5d0e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    5d10:	230f      	movs	r3, #15
    5d12:	18fb      	adds	r3, r7, r3
    5d14:	781b      	ldrb	r3, [r3, #0]
    5d16:	2b00      	cmp	r3, #0
    5d18:	d10c      	bne.n	5d34 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5d1a:	4b09      	ldr	r3, [pc, #36]	; (5d40 <_extint_get_eic_from_channel+0x48>)
    5d1c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    5d1e:	230f      	movs	r3, #15
    5d20:	18fb      	adds	r3, r7, r3
    5d22:	781b      	ldrb	r3, [r3, #0]
    5d24:	009b      	lsls	r3, r3, #2
    5d26:	2210      	movs	r2, #16
    5d28:	4694      	mov	ip, r2
    5d2a:	44bc      	add	ip, r7
    5d2c:	4463      	add	r3, ip
    5d2e:	3b08      	subs	r3, #8
    5d30:	681b      	ldr	r3, [r3, #0]
    5d32:	e000      	b.n	5d36 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    5d34:	2300      	movs	r3, #0
	}
}
    5d36:	0018      	movs	r0, r3
    5d38:	46bd      	mov	sp, r7
    5d3a:	b004      	add	sp, #16
    5d3c:	bd80      	pop	{r7, pc}
    5d3e:	46c0      	nop			; (mov r8, r8)
    5d40:	40001800 	.word	0x40001800

00005d44 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    5d44:	b580      	push	{r7, lr}
    5d46:	b084      	sub	sp, #16
    5d48:	af00      	add	r7, sp, #0
    5d4a:	0002      	movs	r2, r0
    5d4c:	1dfb      	adds	r3, r7, #7
    5d4e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5d50:	1dfb      	adds	r3, r7, #7
    5d52:	781b      	ldrb	r3, [r3, #0]
    5d54:	0018      	movs	r0, r3
    5d56:	4b0b      	ldr	r3, [pc, #44]	; (5d84 <extint_chan_is_detected+0x40>)
    5d58:	4798      	blx	r3
    5d5a:	0003      	movs	r3, r0
    5d5c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5d5e:	1dfb      	adds	r3, r7, #7
    5d60:	781b      	ldrb	r3, [r3, #0]
    5d62:	221f      	movs	r2, #31
    5d64:	4013      	ands	r3, r2
    5d66:	2201      	movs	r2, #1
    5d68:	409a      	lsls	r2, r3
    5d6a:	0013      	movs	r3, r2
    5d6c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    5d6e:	68fb      	ldr	r3, [r7, #12]
    5d70:	691b      	ldr	r3, [r3, #16]
    5d72:	68ba      	ldr	r2, [r7, #8]
    5d74:	4013      	ands	r3, r2
    5d76:	1e5a      	subs	r2, r3, #1
    5d78:	4193      	sbcs	r3, r2
    5d7a:	b2db      	uxtb	r3, r3
}
    5d7c:	0018      	movs	r0, r3
    5d7e:	46bd      	mov	sp, r7
    5d80:	b004      	add	sp, #16
    5d82:	bd80      	pop	{r7, pc}
    5d84:	00005cf9 	.word	0x00005cf9

00005d88 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    5d88:	b580      	push	{r7, lr}
    5d8a:	b084      	sub	sp, #16
    5d8c:	af00      	add	r7, sp, #0
    5d8e:	0002      	movs	r2, r0
    5d90:	1dfb      	adds	r3, r7, #7
    5d92:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5d94:	1dfb      	adds	r3, r7, #7
    5d96:	781b      	ldrb	r3, [r3, #0]
    5d98:	0018      	movs	r0, r3
    5d9a:	4b09      	ldr	r3, [pc, #36]	; (5dc0 <extint_chan_clear_detected+0x38>)
    5d9c:	4798      	blx	r3
    5d9e:	0003      	movs	r3, r0
    5da0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5da2:	1dfb      	adds	r3, r7, #7
    5da4:	781b      	ldrb	r3, [r3, #0]
    5da6:	221f      	movs	r2, #31
    5da8:	4013      	ands	r3, r2
    5daa:	2201      	movs	r2, #1
    5dac:	409a      	lsls	r2, r3
    5dae:	0013      	movs	r3, r2
    5db0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    5db2:	68fb      	ldr	r3, [r7, #12]
    5db4:	68ba      	ldr	r2, [r7, #8]
    5db6:	611a      	str	r2, [r3, #16]
}
    5db8:	46c0      	nop			; (mov r8, r8)
    5dba:	46bd      	mov	sp, r7
    5dbc:	b004      	add	sp, #16
    5dbe:	bd80      	pop	{r7, pc}
    5dc0:	00005cf9 	.word	0x00005cf9

00005dc4 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5dc4:	b580      	push	{r7, lr}
    5dc6:	b082      	sub	sp, #8
    5dc8:	af00      	add	r7, sp, #0
    5dca:	6078      	str	r0, [r7, #4]
    5dcc:	0008      	movs	r0, r1
    5dce:	0011      	movs	r1, r2
    5dd0:	1cfb      	adds	r3, r7, #3
    5dd2:	1c02      	adds	r2, r0, #0
    5dd4:	701a      	strb	r2, [r3, #0]
    5dd6:	1cbb      	adds	r3, r7, #2
    5dd8:	1c0a      	adds	r2, r1, #0
    5dda:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    5ddc:	1cbb      	adds	r3, r7, #2
    5dde:	781b      	ldrb	r3, [r3, #0]
    5de0:	2b00      	cmp	r3, #0
    5de2:	d001      	beq.n	5de8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5de4:	2317      	movs	r3, #23
    5de6:	e019      	b.n	5e1c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    5de8:	1cfb      	adds	r3, r7, #3
    5dea:	781a      	ldrb	r2, [r3, #0]
    5dec:	4b0d      	ldr	r3, [pc, #52]	; (5e24 <extint_register_callback+0x60>)
    5dee:	0092      	lsls	r2, r2, #2
    5df0:	58d3      	ldr	r3, [r2, r3]
    5df2:	2b00      	cmp	r3, #0
    5df4:	d107      	bne.n	5e06 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    5df6:	1cfb      	adds	r3, r7, #3
    5df8:	781a      	ldrb	r2, [r3, #0]
    5dfa:	4b0a      	ldr	r3, [pc, #40]	; (5e24 <extint_register_callback+0x60>)
    5dfc:	0092      	lsls	r2, r2, #2
    5dfe:	6879      	ldr	r1, [r7, #4]
    5e00:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    5e02:	2300      	movs	r3, #0
    5e04:	e00a      	b.n	5e1c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    5e06:	1cfb      	adds	r3, r7, #3
    5e08:	781a      	ldrb	r2, [r3, #0]
    5e0a:	4b06      	ldr	r3, [pc, #24]	; (5e24 <extint_register_callback+0x60>)
    5e0c:	0092      	lsls	r2, r2, #2
    5e0e:	58d2      	ldr	r2, [r2, r3]
    5e10:	687b      	ldr	r3, [r7, #4]
    5e12:	429a      	cmp	r2, r3
    5e14:	d101      	bne.n	5e1a <extint_register_callback+0x56>
		return STATUS_OK;
    5e16:	2300      	movs	r3, #0
    5e18:	e000      	b.n	5e1c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    5e1a:	231d      	movs	r3, #29
}
    5e1c:	0018      	movs	r0, r3
    5e1e:	46bd      	mov	sp, r7
    5e20:	b002      	add	sp, #8
    5e22:	bd80      	pop	{r7, pc}
    5e24:	200003fc 	.word	0x200003fc

00005e28 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5e28:	b580      	push	{r7, lr}
    5e2a:	b084      	sub	sp, #16
    5e2c:	af00      	add	r7, sp, #0
    5e2e:	0002      	movs	r2, r0
    5e30:	1dfb      	adds	r3, r7, #7
    5e32:	701a      	strb	r2, [r3, #0]
    5e34:	1dbb      	adds	r3, r7, #6
    5e36:	1c0a      	adds	r2, r1, #0
    5e38:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5e3a:	1dbb      	adds	r3, r7, #6
    5e3c:	781b      	ldrb	r3, [r3, #0]
    5e3e:	2b00      	cmp	r3, #0
    5e40:	d10e      	bne.n	5e60 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    5e42:	1dfb      	adds	r3, r7, #7
    5e44:	781b      	ldrb	r3, [r3, #0]
    5e46:	0018      	movs	r0, r3
    5e48:	4b08      	ldr	r3, [pc, #32]	; (5e6c <extint_chan_enable_callback+0x44>)
    5e4a:	4798      	blx	r3
    5e4c:	0003      	movs	r3, r0
    5e4e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    5e50:	1dfb      	adds	r3, r7, #7
    5e52:	781b      	ldrb	r3, [r3, #0]
    5e54:	2201      	movs	r2, #1
    5e56:	409a      	lsls	r2, r3
    5e58:	68fb      	ldr	r3, [r7, #12]
    5e5a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5e5c:	2300      	movs	r3, #0
    5e5e:	e000      	b.n	5e62 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    5e60:	2317      	movs	r3, #23
}
    5e62:	0018      	movs	r0, r3
    5e64:	46bd      	mov	sp, r7
    5e66:	b004      	add	sp, #16
    5e68:	bd80      	pop	{r7, pc}
    5e6a:	46c0      	nop			; (mov r8, r8)
    5e6c:	00005cf9 	.word	0x00005cf9

00005e70 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5e70:	b580      	push	{r7, lr}
    5e72:	b084      	sub	sp, #16
    5e74:	af00      	add	r7, sp, #0
    5e76:	0002      	movs	r2, r0
    5e78:	1dfb      	adds	r3, r7, #7
    5e7a:	701a      	strb	r2, [r3, #0]
    5e7c:	1dbb      	adds	r3, r7, #6
    5e7e:	1c0a      	adds	r2, r1, #0
    5e80:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5e82:	1dbb      	adds	r3, r7, #6
    5e84:	781b      	ldrb	r3, [r3, #0]
    5e86:	2b00      	cmp	r3, #0
    5e88:	d10e      	bne.n	5ea8 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    5e8a:	1dfb      	adds	r3, r7, #7
    5e8c:	781b      	ldrb	r3, [r3, #0]
    5e8e:	0018      	movs	r0, r3
    5e90:	4b08      	ldr	r3, [pc, #32]	; (5eb4 <extint_chan_disable_callback+0x44>)
    5e92:	4798      	blx	r3
    5e94:	0003      	movs	r3, r0
    5e96:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    5e98:	1dfb      	adds	r3, r7, #7
    5e9a:	781b      	ldrb	r3, [r3, #0]
    5e9c:	2201      	movs	r2, #1
    5e9e:	409a      	lsls	r2, r3
    5ea0:	68fb      	ldr	r3, [r7, #12]
    5ea2:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5ea4:	2300      	movs	r3, #0
    5ea6:	e000      	b.n	5eaa <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    5ea8:	2317      	movs	r3, #23
}
    5eaa:	0018      	movs	r0, r3
    5eac:	46bd      	mov	sp, r7
    5eae:	b004      	add	sp, #16
    5eb0:	bd80      	pop	{r7, pc}
    5eb2:	46c0      	nop			; (mov r8, r8)
    5eb4:	00005cf9 	.word	0x00005cf9

00005eb8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    5eb8:	b580      	push	{r7, lr}
    5eba:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5ebc:	4b15      	ldr	r3, [pc, #84]	; (5f14 <EIC_Handler+0x5c>)
    5ebe:	2200      	movs	r2, #0
    5ec0:	701a      	strb	r2, [r3, #0]
    5ec2:	e020      	b.n	5f06 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    5ec4:	4b13      	ldr	r3, [pc, #76]	; (5f14 <EIC_Handler+0x5c>)
    5ec6:	781b      	ldrb	r3, [r3, #0]
    5ec8:	0018      	movs	r0, r3
    5eca:	4b13      	ldr	r3, [pc, #76]	; (5f18 <EIC_Handler+0x60>)
    5ecc:	4798      	blx	r3
    5ece:	1e03      	subs	r3, r0, #0
    5ed0:	d013      	beq.n	5efa <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    5ed2:	4b10      	ldr	r3, [pc, #64]	; (5f14 <EIC_Handler+0x5c>)
    5ed4:	781b      	ldrb	r3, [r3, #0]
    5ed6:	0018      	movs	r0, r3
    5ed8:	4b10      	ldr	r3, [pc, #64]	; (5f1c <EIC_Handler+0x64>)
    5eda:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5edc:	4b0d      	ldr	r3, [pc, #52]	; (5f14 <EIC_Handler+0x5c>)
    5ede:	781b      	ldrb	r3, [r3, #0]
    5ee0:	001a      	movs	r2, r3
    5ee2:	4b0f      	ldr	r3, [pc, #60]	; (5f20 <EIC_Handler+0x68>)
    5ee4:	0092      	lsls	r2, r2, #2
    5ee6:	58d3      	ldr	r3, [r2, r3]
    5ee8:	2b00      	cmp	r3, #0
    5eea:	d006      	beq.n	5efa <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    5eec:	4b09      	ldr	r3, [pc, #36]	; (5f14 <EIC_Handler+0x5c>)
    5eee:	781b      	ldrb	r3, [r3, #0]
    5ef0:	001a      	movs	r2, r3
    5ef2:	4b0b      	ldr	r3, [pc, #44]	; (5f20 <EIC_Handler+0x68>)
    5ef4:	0092      	lsls	r2, r2, #2
    5ef6:	58d3      	ldr	r3, [r2, r3]
    5ef8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5efa:	4b06      	ldr	r3, [pc, #24]	; (5f14 <EIC_Handler+0x5c>)
    5efc:	781b      	ldrb	r3, [r3, #0]
    5efe:	3301      	adds	r3, #1
    5f00:	b2da      	uxtb	r2, r3
    5f02:	4b04      	ldr	r3, [pc, #16]	; (5f14 <EIC_Handler+0x5c>)
    5f04:	701a      	strb	r2, [r3, #0]
    5f06:	4b03      	ldr	r3, [pc, #12]	; (5f14 <EIC_Handler+0x5c>)
    5f08:	781b      	ldrb	r3, [r3, #0]
    5f0a:	2b0f      	cmp	r3, #15
    5f0c:	d9da      	bls.n	5ec4 <EIC_Handler+0xc>
			}
		}
	}
}
    5f0e:	46c0      	nop			; (mov r8, r8)
    5f10:	46bd      	mov	sp, r7
    5f12:	bd80      	pop	{r7, pc}
    5f14:	200003f8 	.word	0x200003f8
    5f18:	00005d45 	.word	0x00005d45
    5f1c:	00005d89 	.word	0x00005d89
    5f20:	200003fc 	.word	0x200003fc

00005f24 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5f24:	b580      	push	{r7, lr}
    5f26:	b082      	sub	sp, #8
    5f28:	af00      	add	r7, sp, #0
    5f2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	2200      	movs	r2, #0
    5f30:	701a      	strb	r2, [r3, #0]
}
    5f32:	46c0      	nop			; (mov r8, r8)
    5f34:	46bd      	mov	sp, r7
    5f36:	b002      	add	sp, #8
    5f38:	bd80      	pop	{r7, pc}
	...

00005f3c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5f3c:	b580      	push	{r7, lr}
    5f3e:	b082      	sub	sp, #8
    5f40:	af00      	add	r7, sp, #0
    5f42:	0002      	movs	r2, r0
    5f44:	6039      	str	r1, [r7, #0]
    5f46:	1dfb      	adds	r3, r7, #7
    5f48:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5f4a:	1dfb      	adds	r3, r7, #7
    5f4c:	781b      	ldrb	r3, [r3, #0]
    5f4e:	2b01      	cmp	r3, #1
    5f50:	d00a      	beq.n	5f68 <system_apb_clock_set_mask+0x2c>
    5f52:	2b02      	cmp	r3, #2
    5f54:	d00f      	beq.n	5f76 <system_apb_clock_set_mask+0x3a>
    5f56:	2b00      	cmp	r3, #0
    5f58:	d114      	bne.n	5f84 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5f5a:	4b0e      	ldr	r3, [pc, #56]	; (5f94 <system_apb_clock_set_mask+0x58>)
    5f5c:	4a0d      	ldr	r2, [pc, #52]	; (5f94 <system_apb_clock_set_mask+0x58>)
    5f5e:	6991      	ldr	r1, [r2, #24]
    5f60:	683a      	ldr	r2, [r7, #0]
    5f62:	430a      	orrs	r2, r1
    5f64:	619a      	str	r2, [r3, #24]
			break;
    5f66:	e00f      	b.n	5f88 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5f68:	4b0a      	ldr	r3, [pc, #40]	; (5f94 <system_apb_clock_set_mask+0x58>)
    5f6a:	4a0a      	ldr	r2, [pc, #40]	; (5f94 <system_apb_clock_set_mask+0x58>)
    5f6c:	69d1      	ldr	r1, [r2, #28]
    5f6e:	683a      	ldr	r2, [r7, #0]
    5f70:	430a      	orrs	r2, r1
    5f72:	61da      	str	r2, [r3, #28]
			break;
    5f74:	e008      	b.n	5f88 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5f76:	4b07      	ldr	r3, [pc, #28]	; (5f94 <system_apb_clock_set_mask+0x58>)
    5f78:	4a06      	ldr	r2, [pc, #24]	; (5f94 <system_apb_clock_set_mask+0x58>)
    5f7a:	6a11      	ldr	r1, [r2, #32]
    5f7c:	683a      	ldr	r2, [r7, #0]
    5f7e:	430a      	orrs	r2, r1
    5f80:	621a      	str	r2, [r3, #32]
			break;
    5f82:	e001      	b.n	5f88 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5f84:	2317      	movs	r3, #23
    5f86:	e000      	b.n	5f8a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5f88:	2300      	movs	r3, #0
}
    5f8a:	0018      	movs	r0, r3
    5f8c:	46bd      	mov	sp, r7
    5f8e:	b002      	add	sp, #8
    5f90:	bd80      	pop	{r7, pc}
    5f92:	46c0      	nop			; (mov r8, r8)
    5f94:	40000400 	.word	0x40000400

00005f98 <system_pinmux_get_config_defaults>:
{
    5f98:	b580      	push	{r7, lr}
    5f9a:	b082      	sub	sp, #8
    5f9c:	af00      	add	r7, sp, #0
    5f9e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5fa0:	687b      	ldr	r3, [r7, #4]
    5fa2:	2280      	movs	r2, #128	; 0x80
    5fa4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5fa6:	687b      	ldr	r3, [r7, #4]
    5fa8:	2200      	movs	r2, #0
    5faa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5fac:	687b      	ldr	r3, [r7, #4]
    5fae:	2201      	movs	r2, #1
    5fb0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5fb2:	687b      	ldr	r3, [r7, #4]
    5fb4:	2200      	movs	r2, #0
    5fb6:	70da      	strb	r2, [r3, #3]
}
    5fb8:	46c0      	nop			; (mov r8, r8)
    5fba:	46bd      	mov	sp, r7
    5fbc:	b002      	add	sp, #8
    5fbe:	bd80      	pop	{r7, pc}

00005fc0 <system_interrupt_enable>:
{
    5fc0:	b580      	push	{r7, lr}
    5fc2:	b082      	sub	sp, #8
    5fc4:	af00      	add	r7, sp, #0
    5fc6:	0002      	movs	r2, r0
    5fc8:	1dfb      	adds	r3, r7, #7
    5fca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5fcc:	4b06      	ldr	r3, [pc, #24]	; (5fe8 <system_interrupt_enable+0x28>)
    5fce:	1dfa      	adds	r2, r7, #7
    5fd0:	7812      	ldrb	r2, [r2, #0]
    5fd2:	0011      	movs	r1, r2
    5fd4:	221f      	movs	r2, #31
    5fd6:	400a      	ands	r2, r1
    5fd8:	2101      	movs	r1, #1
    5fda:	4091      	lsls	r1, r2
    5fdc:	000a      	movs	r2, r1
    5fde:	601a      	str	r2, [r3, #0]
}
    5fe0:	46c0      	nop			; (mov r8, r8)
    5fe2:	46bd      	mov	sp, r7
    5fe4:	b002      	add	sp, #8
    5fe6:	bd80      	pop	{r7, pc}
    5fe8:	e000e100 	.word	0xe000e100

00005fec <_extint_get_eic_from_channel>:
{
    5fec:	b580      	push	{r7, lr}
    5fee:	b084      	sub	sp, #16
    5ff0:	af00      	add	r7, sp, #0
    5ff2:	0002      	movs	r2, r0
    5ff4:	1dfb      	adds	r3, r7, #7
    5ff6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5ff8:	230f      	movs	r3, #15
    5ffa:	18fb      	adds	r3, r7, r3
    5ffc:	1dfa      	adds	r2, r7, #7
    5ffe:	7812      	ldrb	r2, [r2, #0]
    6000:	0952      	lsrs	r2, r2, #5
    6002:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    6004:	230f      	movs	r3, #15
    6006:	18fb      	adds	r3, r7, r3
    6008:	781b      	ldrb	r3, [r3, #0]
    600a:	2b00      	cmp	r3, #0
    600c:	d10c      	bne.n	6028 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    600e:	4b09      	ldr	r3, [pc, #36]	; (6034 <_extint_get_eic_from_channel+0x48>)
    6010:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    6012:	230f      	movs	r3, #15
    6014:	18fb      	adds	r3, r7, r3
    6016:	781b      	ldrb	r3, [r3, #0]
    6018:	009b      	lsls	r3, r3, #2
    601a:	2210      	movs	r2, #16
    601c:	4694      	mov	ip, r2
    601e:	44bc      	add	ip, r7
    6020:	4463      	add	r3, ip
    6022:	3b08      	subs	r3, #8
    6024:	681b      	ldr	r3, [r3, #0]
    6026:	e000      	b.n	602a <_extint_get_eic_from_channel+0x3e>
		return NULL;
    6028:	2300      	movs	r3, #0
}
    602a:	0018      	movs	r0, r3
    602c:	46bd      	mov	sp, r7
    602e:	b004      	add	sp, #16
    6030:	bd80      	pop	{r7, pc}
    6032:	46c0      	nop			; (mov r8, r8)
    6034:	40001800 	.word	0x40001800

00006038 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    6038:	b580      	push	{r7, lr}
    603a:	b082      	sub	sp, #8
    603c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    603e:	4b0f      	ldr	r3, [pc, #60]	; (607c <extint_is_syncing+0x44>)
    6040:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6042:	2300      	movs	r3, #0
    6044:	607b      	str	r3, [r7, #4]
    6046:	e011      	b.n	606c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6048:	687b      	ldr	r3, [r7, #4]
    604a:	009b      	lsls	r3, r3, #2
    604c:	2208      	movs	r2, #8
    604e:	4694      	mov	ip, r2
    6050:	44bc      	add	ip, r7
    6052:	4463      	add	r3, ip
    6054:	3b08      	subs	r3, #8
    6056:	681b      	ldr	r3, [r3, #0]
    6058:	785b      	ldrb	r3, [r3, #1]
    605a:	b2db      	uxtb	r3, r3
    605c:	b25b      	sxtb	r3, r3
    605e:	2b00      	cmp	r3, #0
    6060:	da01      	bge.n	6066 <extint_is_syncing+0x2e>
			return true;
    6062:	2301      	movs	r3, #1
    6064:	e006      	b.n	6074 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6066:	687b      	ldr	r3, [r7, #4]
    6068:	3301      	adds	r3, #1
    606a:	607b      	str	r3, [r7, #4]
    606c:	687b      	ldr	r3, [r7, #4]
    606e:	2b00      	cmp	r3, #0
    6070:	d0ea      	beq.n	6048 <extint_is_syncing+0x10>
		}
	}
	return false;
    6072:	2300      	movs	r3, #0
}
    6074:	0018      	movs	r0, r3
    6076:	46bd      	mov	sp, r7
    6078:	b002      	add	sp, #8
    607a:	bd80      	pop	{r7, pc}
    607c:	40001800 	.word	0x40001800

00006080 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    6080:	b580      	push	{r7, lr}
    6082:	b084      	sub	sp, #16
    6084:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6086:	4b2d      	ldr	r3, [pc, #180]	; (613c <_system_extint_init+0xbc>)
    6088:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    608a:	2140      	movs	r1, #64	; 0x40
    608c:	2000      	movs	r0, #0
    608e:	4b2c      	ldr	r3, [pc, #176]	; (6140 <_system_extint_init+0xc0>)
    6090:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6092:	003b      	movs	r3, r7
    6094:	0018      	movs	r0, r3
    6096:	4b2b      	ldr	r3, [pc, #172]	; (6144 <_system_extint_init+0xc4>)
    6098:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    609a:	003b      	movs	r3, r7
    609c:	2200      	movs	r2, #0
    609e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    60a0:	003b      	movs	r3, r7
    60a2:	0019      	movs	r1, r3
    60a4:	2005      	movs	r0, #5
    60a6:	4b28      	ldr	r3, [pc, #160]	; (6148 <_system_extint_init+0xc8>)
    60a8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    60aa:	2005      	movs	r0, #5
    60ac:	4b27      	ldr	r3, [pc, #156]	; (614c <_system_extint_init+0xcc>)
    60ae:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    60b0:	2300      	movs	r3, #0
    60b2:	60fb      	str	r3, [r7, #12]
    60b4:	e018      	b.n	60e8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    60b6:	68fb      	ldr	r3, [r7, #12]
    60b8:	009b      	lsls	r3, r3, #2
    60ba:	2210      	movs	r2, #16
    60bc:	4694      	mov	ip, r2
    60be:	44bc      	add	ip, r7
    60c0:	4463      	add	r3, ip
    60c2:	3b0c      	subs	r3, #12
    60c4:	681a      	ldr	r2, [r3, #0]
    60c6:	68fb      	ldr	r3, [r7, #12]
    60c8:	009b      	lsls	r3, r3, #2
    60ca:	2110      	movs	r1, #16
    60cc:	468c      	mov	ip, r1
    60ce:	44bc      	add	ip, r7
    60d0:	4463      	add	r3, ip
    60d2:	3b0c      	subs	r3, #12
    60d4:	681b      	ldr	r3, [r3, #0]
    60d6:	781b      	ldrb	r3, [r3, #0]
    60d8:	b2db      	uxtb	r3, r3
    60da:	2101      	movs	r1, #1
    60dc:	430b      	orrs	r3, r1
    60de:	b2db      	uxtb	r3, r3
    60e0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    60e2:	68fb      	ldr	r3, [r7, #12]
    60e4:	3301      	adds	r3, #1
    60e6:	60fb      	str	r3, [r7, #12]
    60e8:	68fb      	ldr	r3, [r7, #12]
    60ea:	2b00      	cmp	r3, #0
    60ec:	d0e3      	beq.n	60b6 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    60ee:	46c0      	nop			; (mov r8, r8)
    60f0:	4b17      	ldr	r3, [pc, #92]	; (6150 <_system_extint_init+0xd0>)
    60f2:	4798      	blx	r3
    60f4:	1e03      	subs	r3, r0, #0
    60f6:	d1fb      	bne.n	60f0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    60f8:	230b      	movs	r3, #11
    60fa:	18fb      	adds	r3, r7, r3
    60fc:	2200      	movs	r2, #0
    60fe:	701a      	strb	r2, [r3, #0]
    6100:	e00d      	b.n	611e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    6102:	230b      	movs	r3, #11
    6104:	18fb      	adds	r3, r7, r3
    6106:	781a      	ldrb	r2, [r3, #0]
    6108:	4b12      	ldr	r3, [pc, #72]	; (6154 <_system_extint_init+0xd4>)
    610a:	0092      	lsls	r2, r2, #2
    610c:	2100      	movs	r1, #0
    610e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6110:	230b      	movs	r3, #11
    6112:	18fb      	adds	r3, r7, r3
    6114:	781a      	ldrb	r2, [r3, #0]
    6116:	230b      	movs	r3, #11
    6118:	18fb      	adds	r3, r7, r3
    611a:	3201      	adds	r2, #1
    611c:	701a      	strb	r2, [r3, #0]
    611e:	230b      	movs	r3, #11
    6120:	18fb      	adds	r3, r7, r3
    6122:	781b      	ldrb	r3, [r3, #0]
    6124:	2b0f      	cmp	r3, #15
    6126:	d9ec      	bls.n	6102 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    6128:	2004      	movs	r0, #4
    612a:	4b0b      	ldr	r3, [pc, #44]	; (6158 <_system_extint_init+0xd8>)
    612c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    612e:	4b0b      	ldr	r3, [pc, #44]	; (615c <_system_extint_init+0xdc>)
    6130:	4798      	blx	r3
}
    6132:	46c0      	nop			; (mov r8, r8)
    6134:	46bd      	mov	sp, r7
    6136:	b004      	add	sp, #16
    6138:	bd80      	pop	{r7, pc}
    613a:	46c0      	nop			; (mov r8, r8)
    613c:	40001800 	.word	0x40001800
    6140:	00005f3d 	.word	0x00005f3d
    6144:	00005f25 	.word	0x00005f25
    6148:	00008e2d 	.word	0x00008e2d
    614c:	00008e71 	.word	0x00008e71
    6150:	00006039 	.word	0x00006039
    6154:	200003fc 	.word	0x200003fc
    6158:	00005fc1 	.word	0x00005fc1
    615c:	00006161 	.word	0x00006161

00006160 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    6160:	b580      	push	{r7, lr}
    6162:	b082      	sub	sp, #8
    6164:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6166:	4b15      	ldr	r3, [pc, #84]	; (61bc <_extint_enable+0x5c>)
    6168:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    616a:	2300      	movs	r3, #0
    616c:	607b      	str	r3, [r7, #4]
    616e:	e018      	b.n	61a2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    6170:	687b      	ldr	r3, [r7, #4]
    6172:	009b      	lsls	r3, r3, #2
    6174:	2208      	movs	r2, #8
    6176:	4694      	mov	ip, r2
    6178:	44bc      	add	ip, r7
    617a:	4463      	add	r3, ip
    617c:	3b08      	subs	r3, #8
    617e:	681a      	ldr	r2, [r3, #0]
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	009b      	lsls	r3, r3, #2
    6184:	2108      	movs	r1, #8
    6186:	468c      	mov	ip, r1
    6188:	44bc      	add	ip, r7
    618a:	4463      	add	r3, ip
    618c:	3b08      	subs	r3, #8
    618e:	681b      	ldr	r3, [r3, #0]
    6190:	781b      	ldrb	r3, [r3, #0]
    6192:	b2db      	uxtb	r3, r3
    6194:	2102      	movs	r1, #2
    6196:	430b      	orrs	r3, r1
    6198:	b2db      	uxtb	r3, r3
    619a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    619c:	687b      	ldr	r3, [r7, #4]
    619e:	3301      	adds	r3, #1
    61a0:	607b      	str	r3, [r7, #4]
    61a2:	687b      	ldr	r3, [r7, #4]
    61a4:	2b00      	cmp	r3, #0
    61a6:	d0e3      	beq.n	6170 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    61a8:	46c0      	nop			; (mov r8, r8)
    61aa:	4b05      	ldr	r3, [pc, #20]	; (61c0 <_extint_enable+0x60>)
    61ac:	4798      	blx	r3
    61ae:	1e03      	subs	r3, r0, #0
    61b0:	d1fb      	bne.n	61aa <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    61b2:	46c0      	nop			; (mov r8, r8)
    61b4:	46bd      	mov	sp, r7
    61b6:	b002      	add	sp, #8
    61b8:	bd80      	pop	{r7, pc}
    61ba:	46c0      	nop			; (mov r8, r8)
    61bc:	40001800 	.word	0x40001800
    61c0:	00006039 	.word	0x00006039

000061c4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    61c4:	b580      	push	{r7, lr}
    61c6:	b082      	sub	sp, #8
    61c8:	af00      	add	r7, sp, #0
    61ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    61cc:	687b      	ldr	r3, [r7, #4]
    61ce:	2200      	movs	r2, #0
    61d0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    61d2:	687b      	ldr	r3, [r7, #4]
    61d4:	2200      	movs	r2, #0
    61d6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    61d8:	687b      	ldr	r3, [r7, #4]
    61da:	2201      	movs	r2, #1
    61dc:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    61de:	687b      	ldr	r3, [r7, #4]
    61e0:	2201      	movs	r2, #1
    61e2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    61e4:	687b      	ldr	r3, [r7, #4]
    61e6:	2200      	movs	r2, #0
    61e8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    61ea:	687b      	ldr	r3, [r7, #4]
    61ec:	2202      	movs	r2, #2
    61ee:	72da      	strb	r2, [r3, #11]
}
    61f0:	46c0      	nop			; (mov r8, r8)
    61f2:	46bd      	mov	sp, r7
    61f4:	b002      	add	sp, #8
    61f6:	bd80      	pop	{r7, pc}

000061f8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    61f8:	b580      	push	{r7, lr}
    61fa:	b086      	sub	sp, #24
    61fc:	af00      	add	r7, sp, #0
    61fe:	0002      	movs	r2, r0
    6200:	6039      	str	r1, [r7, #0]
    6202:	1dfb      	adds	r3, r7, #7
    6204:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    6206:	2308      	movs	r3, #8
    6208:	18fb      	adds	r3, r7, r3
    620a:	0018      	movs	r0, r3
    620c:	4b36      	ldr	r3, [pc, #216]	; (62e8 <extint_chan_set_config+0xf0>)
    620e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    6210:	683b      	ldr	r3, [r7, #0]
    6212:	685b      	ldr	r3, [r3, #4]
    6214:	b2da      	uxtb	r2, r3
    6216:	2308      	movs	r3, #8
    6218:	18fb      	adds	r3, r7, r3
    621a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    621c:	2308      	movs	r3, #8
    621e:	18fb      	adds	r3, r7, r3
    6220:	2200      	movs	r2, #0
    6222:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    6224:	683b      	ldr	r3, [r7, #0]
    6226:	7a1a      	ldrb	r2, [r3, #8]
    6228:	2308      	movs	r3, #8
    622a:	18fb      	adds	r3, r7, r3
    622c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    622e:	683b      	ldr	r3, [r7, #0]
    6230:	681b      	ldr	r3, [r3, #0]
    6232:	b2db      	uxtb	r3, r3
    6234:	2208      	movs	r2, #8
    6236:	18ba      	adds	r2, r7, r2
    6238:	0011      	movs	r1, r2
    623a:	0018      	movs	r0, r3
    623c:	4b2b      	ldr	r3, [pc, #172]	; (62ec <extint_chan_set_config+0xf4>)
    623e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    6240:	1dfb      	adds	r3, r7, #7
    6242:	781b      	ldrb	r3, [r3, #0]
    6244:	0018      	movs	r0, r3
    6246:	4b2a      	ldr	r3, [pc, #168]	; (62f0 <extint_chan_set_config+0xf8>)
    6248:	4798      	blx	r3
    624a:	0003      	movs	r3, r0
    624c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    624e:	1dfb      	adds	r3, r7, #7
    6250:	781b      	ldrb	r3, [r3, #0]
    6252:	2207      	movs	r2, #7
    6254:	4013      	ands	r3, r2
    6256:	009b      	lsls	r3, r3, #2
    6258:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    625a:	683b      	ldr	r3, [r7, #0]
    625c:	7adb      	ldrb	r3, [r3, #11]
    625e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    6260:	683b      	ldr	r3, [r7, #0]
    6262:	7a9b      	ldrb	r3, [r3, #10]
    6264:	2b00      	cmp	r3, #0
    6266:	d003      	beq.n	6270 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    6268:	697b      	ldr	r3, [r7, #20]
    626a:	2208      	movs	r2, #8
    626c:	4313      	orrs	r3, r2
    626e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    6270:	1dfb      	adds	r3, r7, #7
    6272:	781b      	ldrb	r3, [r3, #0]
    6274:	08db      	lsrs	r3, r3, #3
    6276:	b2db      	uxtb	r3, r3
    6278:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    627a:	1dfb      	adds	r3, r7, #7
    627c:	781b      	ldrb	r3, [r3, #0]
    627e:	08db      	lsrs	r3, r3, #3
    6280:	b2db      	uxtb	r3, r3
    6282:	001a      	movs	r2, r3
    6284:	693b      	ldr	r3, [r7, #16]
    6286:	3206      	adds	r2, #6
    6288:	0092      	lsls	r2, r2, #2
    628a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    628c:	210f      	movs	r1, #15
    628e:	68fa      	ldr	r2, [r7, #12]
    6290:	4091      	lsls	r1, r2
    6292:	000a      	movs	r2, r1
    6294:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    6296:	401a      	ands	r2, r3
			(new_config << config_pos);
    6298:	6979      	ldr	r1, [r7, #20]
    629a:	68fb      	ldr	r3, [r7, #12]
    629c:	4099      	lsls	r1, r3
    629e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    62a0:	431a      	orrs	r2, r3
    62a2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    62a4:	693b      	ldr	r3, [r7, #16]
    62a6:	1d82      	adds	r2, r0, #6
    62a8:	0092      	lsls	r2, r2, #2
    62aa:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    62ac:	683b      	ldr	r3, [r7, #0]
    62ae:	7a5b      	ldrb	r3, [r3, #9]
    62b0:	2b00      	cmp	r3, #0
    62b2:	d00a      	beq.n	62ca <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    62b4:	693b      	ldr	r3, [r7, #16]
    62b6:	695a      	ldr	r2, [r3, #20]
    62b8:	1dfb      	adds	r3, r7, #7
    62ba:	781b      	ldrb	r3, [r3, #0]
    62bc:	2101      	movs	r1, #1
    62be:	4099      	lsls	r1, r3
    62c0:	000b      	movs	r3, r1
    62c2:	431a      	orrs	r2, r3
    62c4:	693b      	ldr	r3, [r7, #16]
    62c6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    62c8:	e00a      	b.n	62e0 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    62ca:	693b      	ldr	r3, [r7, #16]
    62cc:	695b      	ldr	r3, [r3, #20]
    62ce:	1dfa      	adds	r2, r7, #7
    62d0:	7812      	ldrb	r2, [r2, #0]
    62d2:	2101      	movs	r1, #1
    62d4:	4091      	lsls	r1, r2
    62d6:	000a      	movs	r2, r1
    62d8:	43d2      	mvns	r2, r2
    62da:	401a      	ands	r2, r3
    62dc:	693b      	ldr	r3, [r7, #16]
    62de:	615a      	str	r2, [r3, #20]
}
    62e0:	46c0      	nop			; (mov r8, r8)
    62e2:	46bd      	mov	sp, r7
    62e4:	b006      	add	sp, #24
    62e6:	bd80      	pop	{r7, pc}
    62e8:	00005f99 	.word	0x00005f99
    62ec:	00009119 	.word	0x00009119
    62f0:	00005fed 	.word	0x00005fed

000062f4 <system_pinmux_get_config_defaults>:
{
    62f4:	b580      	push	{r7, lr}
    62f6:	b082      	sub	sp, #8
    62f8:	af00      	add	r7, sp, #0
    62fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    62fc:	687b      	ldr	r3, [r7, #4]
    62fe:	2280      	movs	r2, #128	; 0x80
    6300:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6302:	687b      	ldr	r3, [r7, #4]
    6304:	2200      	movs	r2, #0
    6306:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6308:	687b      	ldr	r3, [r7, #4]
    630a:	2201      	movs	r2, #1
    630c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    630e:	687b      	ldr	r3, [r7, #4]
    6310:	2200      	movs	r2, #0
    6312:	70da      	strb	r2, [r3, #3]
}
    6314:	46c0      	nop			; (mov r8, r8)
    6316:	46bd      	mov	sp, r7
    6318:	b002      	add	sp, #8
    631a:	bd80      	pop	{r7, pc}

0000631c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    631c:	b580      	push	{r7, lr}
    631e:	b084      	sub	sp, #16
    6320:	af00      	add	r7, sp, #0
    6322:	0002      	movs	r2, r0
    6324:	6039      	str	r1, [r7, #0]
    6326:	1dfb      	adds	r3, r7, #7
    6328:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    632a:	230c      	movs	r3, #12
    632c:	18fb      	adds	r3, r7, r3
    632e:	0018      	movs	r0, r3
    6330:	4b10      	ldr	r3, [pc, #64]	; (6374 <port_pin_set_config+0x58>)
    6332:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    6334:	230c      	movs	r3, #12
    6336:	18fb      	adds	r3, r7, r3
    6338:	2280      	movs	r2, #128	; 0x80
    633a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    633c:	683b      	ldr	r3, [r7, #0]
    633e:	781a      	ldrb	r2, [r3, #0]
    6340:	230c      	movs	r3, #12
    6342:	18fb      	adds	r3, r7, r3
    6344:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6346:	683b      	ldr	r3, [r7, #0]
    6348:	785a      	ldrb	r2, [r3, #1]
    634a:	230c      	movs	r3, #12
    634c:	18fb      	adds	r3, r7, r3
    634e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6350:	683b      	ldr	r3, [r7, #0]
    6352:	789a      	ldrb	r2, [r3, #2]
    6354:	230c      	movs	r3, #12
    6356:	18fb      	adds	r3, r7, r3
    6358:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    635a:	230c      	movs	r3, #12
    635c:	18fa      	adds	r2, r7, r3
    635e:	1dfb      	adds	r3, r7, #7
    6360:	781b      	ldrb	r3, [r3, #0]
    6362:	0011      	movs	r1, r2
    6364:	0018      	movs	r0, r3
    6366:	4b04      	ldr	r3, [pc, #16]	; (6378 <port_pin_set_config+0x5c>)
    6368:	4798      	blx	r3
}
    636a:	46c0      	nop			; (mov r8, r8)
    636c:	46bd      	mov	sp, r7
    636e:	b004      	add	sp, #16
    6370:	bd80      	pop	{r7, pc}
    6372:	46c0      	nop			; (mov r8, r8)
    6374:	000062f5 	.word	0x000062f5
    6378:	00009119 	.word	0x00009119

0000637c <system_gclk_chan_get_config_defaults>:
{
    637c:	b580      	push	{r7, lr}
    637e:	b082      	sub	sp, #8
    6380:	af00      	add	r7, sp, #0
    6382:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6384:	687b      	ldr	r3, [r7, #4]
    6386:	2200      	movs	r2, #0
    6388:	701a      	strb	r2, [r3, #0]
}
    638a:	46c0      	nop			; (mov r8, r8)
    638c:	46bd      	mov	sp, r7
    638e:	b002      	add	sp, #8
    6390:	bd80      	pop	{r7, pc}

00006392 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    6392:	b5f0      	push	{r4, r5, r6, r7, lr}
    6394:	b08d      	sub	sp, #52	; 0x34
    6396:	af00      	add	r7, sp, #0
    6398:	60b8      	str	r0, [r7, #8]
    639a:	60f9      	str	r1, [r7, #12]
    639c:	603a      	str	r2, [r7, #0]
    639e:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    63a0:	2300      	movs	r3, #0
    63a2:	2400      	movs	r4, #0
    63a4:	623b      	str	r3, [r7, #32]
    63a6:	627c      	str	r4, [r7, #36]	; 0x24
    63a8:	2300      	movs	r3, #0
    63aa:	2400      	movs	r4, #0
    63ac:	61bb      	str	r3, [r7, #24]
    63ae:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    63b0:	233f      	movs	r3, #63	; 0x3f
    63b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    63b4:	e053      	b.n	645e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    63b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63b8:	3b20      	subs	r3, #32
    63ba:	2b00      	cmp	r3, #0
    63bc:	db04      	blt.n	63c8 <long_division+0x36>
    63be:	2201      	movs	r2, #1
    63c0:	409a      	lsls	r2, r3
    63c2:	0013      	movs	r3, r2
    63c4:	617b      	str	r3, [r7, #20]
    63c6:	e00b      	b.n	63e0 <long_division+0x4e>
    63c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63ca:	2220      	movs	r2, #32
    63cc:	1ad3      	subs	r3, r2, r3
    63ce:	2201      	movs	r2, #1
    63d0:	40da      	lsrs	r2, r3
    63d2:	0013      	movs	r3, r2
    63d4:	2100      	movs	r1, #0
    63d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    63d8:	4091      	lsls	r1, r2
    63da:	000a      	movs	r2, r1
    63dc:	4313      	orrs	r3, r2
    63de:	617b      	str	r3, [r7, #20]
    63e0:	2201      	movs	r2, #1
    63e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63e4:	409a      	lsls	r2, r3
    63e6:	0013      	movs	r3, r2
    63e8:	613b      	str	r3, [r7, #16]

		r = r << 1;
    63ea:	69bb      	ldr	r3, [r7, #24]
    63ec:	69fc      	ldr	r4, [r7, #28]
    63ee:	18db      	adds	r3, r3, r3
    63f0:	4164      	adcs	r4, r4
    63f2:	61bb      	str	r3, [r7, #24]
    63f4:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    63f6:	68bb      	ldr	r3, [r7, #8]
    63f8:	693a      	ldr	r2, [r7, #16]
    63fa:	401a      	ands	r2, r3
    63fc:	0015      	movs	r5, r2
    63fe:	68fb      	ldr	r3, [r7, #12]
    6400:	697a      	ldr	r2, [r7, #20]
    6402:	401a      	ands	r2, r3
    6404:	0016      	movs	r6, r2
    6406:	002b      	movs	r3, r5
    6408:	4333      	orrs	r3, r6
    640a:	d007      	beq.n	641c <long_division+0x8a>
			r |= 0x01;
    640c:	69bb      	ldr	r3, [r7, #24]
    640e:	2201      	movs	r2, #1
    6410:	4313      	orrs	r3, r2
    6412:	61bb      	str	r3, [r7, #24]
    6414:	69fb      	ldr	r3, [r7, #28]
    6416:	2200      	movs	r2, #0
    6418:	4313      	orrs	r3, r2
    641a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    641c:	687a      	ldr	r2, [r7, #4]
    641e:	69fb      	ldr	r3, [r7, #28]
    6420:	429a      	cmp	r2, r3
    6422:	d819      	bhi.n	6458 <long_division+0xc6>
    6424:	687a      	ldr	r2, [r7, #4]
    6426:	69fb      	ldr	r3, [r7, #28]
    6428:	429a      	cmp	r2, r3
    642a:	d103      	bne.n	6434 <long_division+0xa2>
    642c:	683a      	ldr	r2, [r7, #0]
    642e:	69bb      	ldr	r3, [r7, #24]
    6430:	429a      	cmp	r2, r3
    6432:	d811      	bhi.n	6458 <long_division+0xc6>
			r = r - d;
    6434:	69b9      	ldr	r1, [r7, #24]
    6436:	69fa      	ldr	r2, [r7, #28]
    6438:	683b      	ldr	r3, [r7, #0]
    643a:	687c      	ldr	r4, [r7, #4]
    643c:	1ac9      	subs	r1, r1, r3
    643e:	41a2      	sbcs	r2, r4
    6440:	000b      	movs	r3, r1
    6442:	0014      	movs	r4, r2
    6444:	61bb      	str	r3, [r7, #24]
    6446:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    6448:	6a3a      	ldr	r2, [r7, #32]
    644a:	693b      	ldr	r3, [r7, #16]
    644c:	4313      	orrs	r3, r2
    644e:	623b      	str	r3, [r7, #32]
    6450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6452:	697b      	ldr	r3, [r7, #20]
    6454:	4313      	orrs	r3, r2
    6456:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    6458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    645a:	3b01      	subs	r3, #1
    645c:	62fb      	str	r3, [r7, #44]	; 0x2c
    645e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6460:	2b00      	cmp	r3, #0
    6462:	daa8      	bge.n	63b6 <long_division+0x24>
		}
	}

	return q;
    6464:	6a3b      	ldr	r3, [r7, #32]
    6466:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    6468:	0018      	movs	r0, r3
    646a:	0021      	movs	r1, r4
    646c:	46bd      	mov	sp, r7
    646e:	b00d      	add	sp, #52	; 0x34
    6470:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006472 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    6472:	b580      	push	{r7, lr}
    6474:	b086      	sub	sp, #24
    6476:	af00      	add	r7, sp, #0
    6478:	60f8      	str	r0, [r7, #12]
    647a:	60b9      	str	r1, [r7, #8]
    647c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    647e:	2316      	movs	r3, #22
    6480:	18fb      	adds	r3, r7, r3
    6482:	2200      	movs	r2, #0
    6484:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    6486:	68bb      	ldr	r3, [r7, #8]
    6488:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    648a:	68bb      	ldr	r3, [r7, #8]
    648c:	085a      	lsrs	r2, r3, #1
    648e:	68fb      	ldr	r3, [r7, #12]
    6490:	429a      	cmp	r2, r3
    6492:	d201      	bcs.n	6498 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6494:	2340      	movs	r3, #64	; 0x40
    6496:	e026      	b.n	64e6 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    6498:	68bb      	ldr	r3, [r7, #8]
    649a:	085b      	lsrs	r3, r3, #1
    649c:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    649e:	e00a      	b.n	64b6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    64a0:	693a      	ldr	r2, [r7, #16]
    64a2:	68fb      	ldr	r3, [r7, #12]
    64a4:	1ad3      	subs	r3, r2, r3
    64a6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    64a8:	2316      	movs	r3, #22
    64aa:	18fb      	adds	r3, r7, r3
    64ac:	881a      	ldrh	r2, [r3, #0]
    64ae:	2316      	movs	r3, #22
    64b0:	18fb      	adds	r3, r7, r3
    64b2:	3201      	adds	r2, #1
    64b4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    64b6:	693a      	ldr	r2, [r7, #16]
    64b8:	68fb      	ldr	r3, [r7, #12]
    64ba:	429a      	cmp	r2, r3
    64bc:	d2f0      	bcs.n	64a0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    64be:	2316      	movs	r3, #22
    64c0:	18fb      	adds	r3, r7, r3
    64c2:	2216      	movs	r2, #22
    64c4:	18ba      	adds	r2, r7, r2
    64c6:	8812      	ldrh	r2, [r2, #0]
    64c8:	3a01      	subs	r2, #1
    64ca:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    64cc:	2316      	movs	r3, #22
    64ce:	18fb      	adds	r3, r7, r3
    64d0:	881b      	ldrh	r3, [r3, #0]
    64d2:	2bff      	cmp	r3, #255	; 0xff
    64d4:	d901      	bls.n	64da <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    64d6:	2340      	movs	r3, #64	; 0x40
    64d8:	e005      	b.n	64e6 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    64da:	687b      	ldr	r3, [r7, #4]
    64dc:	2216      	movs	r2, #22
    64de:	18ba      	adds	r2, r7, r2
    64e0:	8812      	ldrh	r2, [r2, #0]
    64e2:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    64e4:	2300      	movs	r3, #0
	}
}
    64e6:	0018      	movs	r0, r3
    64e8:	46bd      	mov	sp, r7
    64ea:	b006      	add	sp, #24
    64ec:	bd80      	pop	{r7, pc}
	...

000064f0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    64f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    64f2:	b0a1      	sub	sp, #132	; 0x84
    64f4:	af00      	add	r7, sp, #0
    64f6:	64f8      	str	r0, [r7, #76]	; 0x4c
    64f8:	64b9      	str	r1, [r7, #72]	; 0x48
    64fa:	647a      	str	r2, [r7, #68]	; 0x44
    64fc:	2243      	movs	r2, #67	; 0x43
    64fe:	18ba      	adds	r2, r7, r2
    6500:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    6502:	2300      	movs	r3, #0
    6504:	2400      	movs	r4, #0
    6506:	673b      	str	r3, [r7, #112]	; 0x70
    6508:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    650a:	2300      	movs	r3, #0
    650c:	2400      	movs	r4, #0
    650e:	66bb      	str	r3, [r7, #104]	; 0x68
    6510:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    6512:	2300      	movs	r3, #0
    6514:	2400      	movs	r4, #0
    6516:	67bb      	str	r3, [r7, #120]	; 0x78
    6518:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    651a:	2300      	movs	r3, #0
    651c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    651e:	2358      	movs	r3, #88	; 0x58
    6520:	2240      	movs	r2, #64	; 0x40
    6522:	4694      	mov	ip, r2
    6524:	44bc      	add	ip, r7
    6526:	4463      	add	r3, ip
    6528:	781a      	ldrb	r2, [r3, #0]
    652a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    652c:	435a      	muls	r2, r3
    652e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6530:	429a      	cmp	r2, r3
    6532:	d901      	bls.n	6538 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6534:	2340      	movs	r3, #64	; 0x40
    6536:	e0b3      	b.n	66a0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    6538:	2343      	movs	r3, #67	; 0x43
    653a:	18fb      	adds	r3, r7, r3
    653c:	781b      	ldrb	r3, [r3, #0]
    653e:	2b00      	cmp	r3, #0
    6540:	d13d      	bne.n	65be <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    6542:	2358      	movs	r3, #88	; 0x58
    6544:	2240      	movs	r2, #64	; 0x40
    6546:	4694      	mov	ip, r2
    6548:	44bc      	add	ip, r7
    654a:	4463      	add	r3, ip
    654c:	781b      	ldrb	r3, [r3, #0]
    654e:	b2db      	uxtb	r3, r3
    6550:	613b      	str	r3, [r7, #16]
    6552:	2300      	movs	r3, #0
    6554:	617b      	str	r3, [r7, #20]
    6556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6558:	60bb      	str	r3, [r7, #8]
    655a:	2300      	movs	r3, #0
    655c:	60fb      	str	r3, [r7, #12]
    655e:	4c52      	ldr	r4, [pc, #328]	; (66a8 <_sercom_get_async_baud_val+0x1b8>)
    6560:	68ba      	ldr	r2, [r7, #8]
    6562:	68fb      	ldr	r3, [r7, #12]
    6564:	6938      	ldr	r0, [r7, #16]
    6566:	6979      	ldr	r1, [r7, #20]
    6568:	47a0      	blx	r4
    656a:	0003      	movs	r3, r0
    656c:	000c      	movs	r4, r1
    656e:	001b      	movs	r3, r3
    6570:	65fb      	str	r3, [r7, #92]	; 0x5c
    6572:	2300      	movs	r3, #0
    6574:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    6576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6578:	603b      	str	r3, [r7, #0]
    657a:	2300      	movs	r3, #0
    657c:	607b      	str	r3, [r7, #4]
    657e:	6db8      	ldr	r0, [r7, #88]	; 0x58
    6580:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6582:	683a      	ldr	r2, [r7, #0]
    6584:	687b      	ldr	r3, [r7, #4]
    6586:	4c49      	ldr	r4, [pc, #292]	; (66ac <_sercom_get_async_baud_val+0x1bc>)
    6588:	47a0      	blx	r4
    658a:	0003      	movs	r3, r0
    658c:	000c      	movs	r4, r1
    658e:	673b      	str	r3, [r7, #112]	; 0x70
    6590:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    6592:	2100      	movs	r1, #0
    6594:	2201      	movs	r2, #1
    6596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    6598:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    659a:	1ac9      	subs	r1, r1, r3
    659c:	41a2      	sbcs	r2, r4
    659e:	000b      	movs	r3, r1
    65a0:	0014      	movs	r4, r2
    65a2:	66bb      	str	r3, [r7, #104]	; 0x68
    65a4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    65a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    65a8:	0c1b      	lsrs	r3, r3, #16
    65aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    65ac:	0416      	lsls	r6, r2, #16
    65ae:	431e      	orrs	r6, r3
    65b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    65b2:	041d      	lsls	r5, r3, #16
    65b4:	0033      	movs	r3, r6
    65b6:	67bb      	str	r3, [r7, #120]	; 0x78
    65b8:	2300      	movs	r3, #0
    65ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    65bc:	e06a      	b.n	6694 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    65be:	2343      	movs	r3, #67	; 0x43
    65c0:	18fb      	adds	r3, r7, r3
    65c2:	781b      	ldrb	r3, [r3, #0]
    65c4:	2b01      	cmp	r3, #1
    65c6:	d165      	bne.n	6694 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    65c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65ca:	633b      	str	r3, [r7, #48]	; 0x30
    65cc:	2300      	movs	r3, #0
    65ce:	637b      	str	r3, [r7, #52]	; 0x34
    65d0:	2358      	movs	r3, #88	; 0x58
    65d2:	2240      	movs	r2, #64	; 0x40
    65d4:	4694      	mov	ip, r2
    65d6:	44bc      	add	ip, r7
    65d8:	4463      	add	r3, ip
    65da:	781b      	ldrb	r3, [r3, #0]
    65dc:	b2db      	uxtb	r3, r3
    65de:	62bb      	str	r3, [r7, #40]	; 0x28
    65e0:	2300      	movs	r3, #0
    65e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    65e4:	4c30      	ldr	r4, [pc, #192]	; (66a8 <_sercom_get_async_baud_val+0x1b8>)
    65e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    65e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    65ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
    65ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
    65ee:	47a0      	blx	r4
    65f0:	0003      	movs	r3, r0
    65f2:	000c      	movs	r4, r1
    65f4:	65bb      	str	r3, [r7, #88]	; 0x58
    65f6:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    65f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    65fa:	623b      	str	r3, [r7, #32]
    65fc:	2300      	movs	r3, #0
    65fe:	627b      	str	r3, [r7, #36]	; 0x24
    6600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6602:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    6604:	001a      	movs	r2, r3
    6606:	0023      	movs	r3, r4
    6608:	6a38      	ldr	r0, [r7, #32]
    660a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    660c:	4c27      	ldr	r4, [pc, #156]	; (66ac <_sercom_get_async_baud_val+0x1bc>)
    660e:	47a0      	blx	r4
    6610:	0003      	movs	r3, r0
    6612:	000c      	movs	r4, r1
    6614:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    6616:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6618:	2380      	movs	r3, #128	; 0x80
    661a:	019b      	lsls	r3, r3, #6
    661c:	429a      	cmp	r2, r3
    661e:	d901      	bls.n	6624 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6620:	2340      	movs	r3, #64	; 0x40
    6622:	e03d      	b.n	66a0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    6624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6626:	61bb      	str	r3, [r7, #24]
    6628:	2300      	movs	r3, #0
    662a:	61fb      	str	r3, [r7, #28]
    662c:	69b9      	ldr	r1, [r7, #24]
    662e:	69fa      	ldr	r2, [r7, #28]
    6630:	000b      	movs	r3, r1
    6632:	0f5b      	lsrs	r3, r3, #29
    6634:	0010      	movs	r0, r2
    6636:	00c0      	lsls	r0, r0, #3
    6638:	63f8      	str	r0, [r7, #60]	; 0x3c
    663a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    663c:	4318      	orrs	r0, r3
    663e:	63f8      	str	r0, [r7, #60]	; 0x3c
    6640:	000b      	movs	r3, r1
    6642:	00db      	lsls	r3, r3, #3
    6644:	63bb      	str	r3, [r7, #56]	; 0x38
    6646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6648:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    664a:	001a      	movs	r2, r3
    664c:	0023      	movs	r3, r4
    664e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    6650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    6652:	4c16      	ldr	r4, [pc, #88]	; (66ac <_sercom_get_async_baud_val+0x1bc>)
    6654:	47a0      	blx	r4
    6656:	0003      	movs	r3, r0
    6658:	000c      	movs	r4, r1
    665a:	65bb      	str	r3, [r7, #88]	; 0x58
    665c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    665e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6660:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    6662:	b2d9      	uxtb	r1, r3
    6664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6666:	b2db      	uxtb	r3, r3
    6668:	00db      	lsls	r3, r3, #3
    666a:	b2da      	uxtb	r2, r3
    666c:	2317      	movs	r3, #23
    666e:	2040      	movs	r0, #64	; 0x40
    6670:	4684      	mov	ip, r0
    6672:	44bc      	add	ip, r7
    6674:	4463      	add	r3, ip
    6676:	1a8a      	subs	r2, r1, r2
    6678:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    667a:	2317      	movs	r3, #23
    667c:	2240      	movs	r2, #64	; 0x40
    667e:	4694      	mov	ip, r2
    6680:	44bc      	add	ip, r7
    6682:	4463      	add	r3, ip
    6684:	781b      	ldrb	r3, [r3, #0]
    6686:	035b      	lsls	r3, r3, #13
    6688:	001a      	movs	r2, r3
    668a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    668c:	4313      	orrs	r3, r2
    668e:	67bb      	str	r3, [r7, #120]	; 0x78
    6690:	2300      	movs	r3, #0
    6692:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    6694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    6696:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    6698:	b29a      	uxth	r2, r3
    669a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    669c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    669e:	2300      	movs	r3, #0
}
    66a0:	0018      	movs	r0, r3
    66a2:	46bd      	mov	sp, r7
    66a4:	b021      	add	sp, #132	; 0x84
    66a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66a8:	0000c20d 	.word	0x0000c20d
    66ac:	00006393 	.word	0x00006393

000066b0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    66b0:	b580      	push	{r7, lr}
    66b2:	b084      	sub	sp, #16
    66b4:	af00      	add	r7, sp, #0
    66b6:	0002      	movs	r2, r0
    66b8:	1dfb      	adds	r3, r7, #7
    66ba:	701a      	strb	r2, [r3, #0]
    66bc:	1dbb      	adds	r3, r7, #6
    66be:	1c0a      	adds	r2, r1, #0
    66c0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    66c2:	4b1a      	ldr	r3, [pc, #104]	; (672c <sercom_set_gclk_generator+0x7c>)
    66c4:	781b      	ldrb	r3, [r3, #0]
    66c6:	2201      	movs	r2, #1
    66c8:	4053      	eors	r3, r2
    66ca:	b2db      	uxtb	r3, r3
    66cc:	2b00      	cmp	r3, #0
    66ce:	d103      	bne.n	66d8 <sercom_set_gclk_generator+0x28>
    66d0:	1dbb      	adds	r3, r7, #6
    66d2:	781b      	ldrb	r3, [r3, #0]
    66d4:	2b00      	cmp	r3, #0
    66d6:	d01b      	beq.n	6710 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    66d8:	230c      	movs	r3, #12
    66da:	18fb      	adds	r3, r7, r3
    66dc:	0018      	movs	r0, r3
    66de:	4b14      	ldr	r3, [pc, #80]	; (6730 <sercom_set_gclk_generator+0x80>)
    66e0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    66e2:	230c      	movs	r3, #12
    66e4:	18fb      	adds	r3, r7, r3
    66e6:	1dfa      	adds	r2, r7, #7
    66e8:	7812      	ldrb	r2, [r2, #0]
    66ea:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    66ec:	230c      	movs	r3, #12
    66ee:	18fb      	adds	r3, r7, r3
    66f0:	0019      	movs	r1, r3
    66f2:	2013      	movs	r0, #19
    66f4:	4b0f      	ldr	r3, [pc, #60]	; (6734 <sercom_set_gclk_generator+0x84>)
    66f6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    66f8:	2013      	movs	r0, #19
    66fa:	4b0f      	ldr	r3, [pc, #60]	; (6738 <sercom_set_gclk_generator+0x88>)
    66fc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    66fe:	4b0b      	ldr	r3, [pc, #44]	; (672c <sercom_set_gclk_generator+0x7c>)
    6700:	1dfa      	adds	r2, r7, #7
    6702:	7812      	ldrb	r2, [r2, #0]
    6704:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    6706:	4b09      	ldr	r3, [pc, #36]	; (672c <sercom_set_gclk_generator+0x7c>)
    6708:	2201      	movs	r2, #1
    670a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    670c:	2300      	movs	r3, #0
    670e:	e008      	b.n	6722 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    6710:	4b06      	ldr	r3, [pc, #24]	; (672c <sercom_set_gclk_generator+0x7c>)
    6712:	785b      	ldrb	r3, [r3, #1]
    6714:	1dfa      	adds	r2, r7, #7
    6716:	7812      	ldrb	r2, [r2, #0]
    6718:	429a      	cmp	r2, r3
    671a:	d101      	bne.n	6720 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    671c:	2300      	movs	r3, #0
    671e:	e000      	b.n	6722 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6720:	231d      	movs	r3, #29
}
    6722:	0018      	movs	r0, r3
    6724:	46bd      	mov	sp, r7
    6726:	b004      	add	sp, #16
    6728:	bd80      	pop	{r7, pc}
    672a:	46c0      	nop			; (mov r8, r8)
    672c:	200000c0 	.word	0x200000c0
    6730:	0000637d 	.word	0x0000637d
    6734:	00008e2d 	.word	0x00008e2d
    6738:	00008e71 	.word	0x00008e71

0000673c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    673c:	b580      	push	{r7, lr}
    673e:	b082      	sub	sp, #8
    6740:	af00      	add	r7, sp, #0
    6742:	6078      	str	r0, [r7, #4]
    6744:	000a      	movs	r2, r1
    6746:	1cfb      	adds	r3, r7, #3
    6748:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    674a:	687b      	ldr	r3, [r7, #4]
    674c:	4a4d      	ldr	r2, [pc, #308]	; (6884 <_sercom_get_default_pad+0x148>)
    674e:	4293      	cmp	r3, r2
    6750:	d03f      	beq.n	67d2 <_sercom_get_default_pad+0x96>
    6752:	4a4c      	ldr	r2, [pc, #304]	; (6884 <_sercom_get_default_pad+0x148>)
    6754:	4293      	cmp	r3, r2
    6756:	d806      	bhi.n	6766 <_sercom_get_default_pad+0x2a>
    6758:	4a4b      	ldr	r2, [pc, #300]	; (6888 <_sercom_get_default_pad+0x14c>)
    675a:	4293      	cmp	r3, r2
    675c:	d00f      	beq.n	677e <_sercom_get_default_pad+0x42>
    675e:	4a4b      	ldr	r2, [pc, #300]	; (688c <_sercom_get_default_pad+0x150>)
    6760:	4293      	cmp	r3, r2
    6762:	d021      	beq.n	67a8 <_sercom_get_default_pad+0x6c>
    6764:	e089      	b.n	687a <_sercom_get_default_pad+0x13e>
    6766:	4a4a      	ldr	r2, [pc, #296]	; (6890 <_sercom_get_default_pad+0x154>)
    6768:	4293      	cmp	r3, r2
    676a:	d100      	bne.n	676e <_sercom_get_default_pad+0x32>
    676c:	e05b      	b.n	6826 <_sercom_get_default_pad+0xea>
    676e:	4a49      	ldr	r2, [pc, #292]	; (6894 <_sercom_get_default_pad+0x158>)
    6770:	4293      	cmp	r3, r2
    6772:	d100      	bne.n	6776 <_sercom_get_default_pad+0x3a>
    6774:	e06c      	b.n	6850 <_sercom_get_default_pad+0x114>
    6776:	4a48      	ldr	r2, [pc, #288]	; (6898 <_sercom_get_default_pad+0x15c>)
    6778:	4293      	cmp	r3, r2
    677a:	d03f      	beq.n	67fc <_sercom_get_default_pad+0xc0>
    677c:	e07d      	b.n	687a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    677e:	1cfb      	adds	r3, r7, #3
    6780:	781b      	ldrb	r3, [r3, #0]
    6782:	2b01      	cmp	r3, #1
    6784:	d00a      	beq.n	679c <_sercom_get_default_pad+0x60>
    6786:	dc02      	bgt.n	678e <_sercom_get_default_pad+0x52>
    6788:	2b00      	cmp	r3, #0
    678a:	d005      	beq.n	6798 <_sercom_get_default_pad+0x5c>
    678c:	e075      	b.n	687a <_sercom_get_default_pad+0x13e>
    678e:	2b02      	cmp	r3, #2
    6790:	d006      	beq.n	67a0 <_sercom_get_default_pad+0x64>
    6792:	2b03      	cmp	r3, #3
    6794:	d006      	beq.n	67a4 <_sercom_get_default_pad+0x68>
    6796:	e070      	b.n	687a <_sercom_get_default_pad+0x13e>
    6798:	4b40      	ldr	r3, [pc, #256]	; (689c <_sercom_get_default_pad+0x160>)
    679a:	e06f      	b.n	687c <_sercom_get_default_pad+0x140>
    679c:	4b40      	ldr	r3, [pc, #256]	; (68a0 <_sercom_get_default_pad+0x164>)
    679e:	e06d      	b.n	687c <_sercom_get_default_pad+0x140>
    67a0:	4b40      	ldr	r3, [pc, #256]	; (68a4 <_sercom_get_default_pad+0x168>)
    67a2:	e06b      	b.n	687c <_sercom_get_default_pad+0x140>
    67a4:	4b40      	ldr	r3, [pc, #256]	; (68a8 <_sercom_get_default_pad+0x16c>)
    67a6:	e069      	b.n	687c <_sercom_get_default_pad+0x140>
    67a8:	1cfb      	adds	r3, r7, #3
    67aa:	781b      	ldrb	r3, [r3, #0]
    67ac:	2b01      	cmp	r3, #1
    67ae:	d00a      	beq.n	67c6 <_sercom_get_default_pad+0x8a>
    67b0:	dc02      	bgt.n	67b8 <_sercom_get_default_pad+0x7c>
    67b2:	2b00      	cmp	r3, #0
    67b4:	d005      	beq.n	67c2 <_sercom_get_default_pad+0x86>
    67b6:	e060      	b.n	687a <_sercom_get_default_pad+0x13e>
    67b8:	2b02      	cmp	r3, #2
    67ba:	d006      	beq.n	67ca <_sercom_get_default_pad+0x8e>
    67bc:	2b03      	cmp	r3, #3
    67be:	d006      	beq.n	67ce <_sercom_get_default_pad+0x92>
    67c0:	e05b      	b.n	687a <_sercom_get_default_pad+0x13e>
    67c2:	2303      	movs	r3, #3
    67c4:	e05a      	b.n	687c <_sercom_get_default_pad+0x140>
    67c6:	4b39      	ldr	r3, [pc, #228]	; (68ac <_sercom_get_default_pad+0x170>)
    67c8:	e058      	b.n	687c <_sercom_get_default_pad+0x140>
    67ca:	4b39      	ldr	r3, [pc, #228]	; (68b0 <_sercom_get_default_pad+0x174>)
    67cc:	e056      	b.n	687c <_sercom_get_default_pad+0x140>
    67ce:	4b39      	ldr	r3, [pc, #228]	; (68b4 <_sercom_get_default_pad+0x178>)
    67d0:	e054      	b.n	687c <_sercom_get_default_pad+0x140>
    67d2:	1cfb      	adds	r3, r7, #3
    67d4:	781b      	ldrb	r3, [r3, #0]
    67d6:	2b01      	cmp	r3, #1
    67d8:	d00a      	beq.n	67f0 <_sercom_get_default_pad+0xb4>
    67da:	dc02      	bgt.n	67e2 <_sercom_get_default_pad+0xa6>
    67dc:	2b00      	cmp	r3, #0
    67de:	d005      	beq.n	67ec <_sercom_get_default_pad+0xb0>
    67e0:	e04b      	b.n	687a <_sercom_get_default_pad+0x13e>
    67e2:	2b02      	cmp	r3, #2
    67e4:	d006      	beq.n	67f4 <_sercom_get_default_pad+0xb8>
    67e6:	2b03      	cmp	r3, #3
    67e8:	d006      	beq.n	67f8 <_sercom_get_default_pad+0xbc>
    67ea:	e046      	b.n	687a <_sercom_get_default_pad+0x13e>
    67ec:	4b32      	ldr	r3, [pc, #200]	; (68b8 <_sercom_get_default_pad+0x17c>)
    67ee:	e045      	b.n	687c <_sercom_get_default_pad+0x140>
    67f0:	4b32      	ldr	r3, [pc, #200]	; (68bc <_sercom_get_default_pad+0x180>)
    67f2:	e043      	b.n	687c <_sercom_get_default_pad+0x140>
    67f4:	4b32      	ldr	r3, [pc, #200]	; (68c0 <_sercom_get_default_pad+0x184>)
    67f6:	e041      	b.n	687c <_sercom_get_default_pad+0x140>
    67f8:	4b32      	ldr	r3, [pc, #200]	; (68c4 <_sercom_get_default_pad+0x188>)
    67fa:	e03f      	b.n	687c <_sercom_get_default_pad+0x140>
    67fc:	1cfb      	adds	r3, r7, #3
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	2b01      	cmp	r3, #1
    6802:	d00a      	beq.n	681a <_sercom_get_default_pad+0xde>
    6804:	dc02      	bgt.n	680c <_sercom_get_default_pad+0xd0>
    6806:	2b00      	cmp	r3, #0
    6808:	d005      	beq.n	6816 <_sercom_get_default_pad+0xda>
    680a:	e036      	b.n	687a <_sercom_get_default_pad+0x13e>
    680c:	2b02      	cmp	r3, #2
    680e:	d006      	beq.n	681e <_sercom_get_default_pad+0xe2>
    6810:	2b03      	cmp	r3, #3
    6812:	d006      	beq.n	6822 <_sercom_get_default_pad+0xe6>
    6814:	e031      	b.n	687a <_sercom_get_default_pad+0x13e>
    6816:	4b2c      	ldr	r3, [pc, #176]	; (68c8 <_sercom_get_default_pad+0x18c>)
    6818:	e030      	b.n	687c <_sercom_get_default_pad+0x140>
    681a:	4b2c      	ldr	r3, [pc, #176]	; (68cc <_sercom_get_default_pad+0x190>)
    681c:	e02e      	b.n	687c <_sercom_get_default_pad+0x140>
    681e:	4b2c      	ldr	r3, [pc, #176]	; (68d0 <_sercom_get_default_pad+0x194>)
    6820:	e02c      	b.n	687c <_sercom_get_default_pad+0x140>
    6822:	4b2c      	ldr	r3, [pc, #176]	; (68d4 <_sercom_get_default_pad+0x198>)
    6824:	e02a      	b.n	687c <_sercom_get_default_pad+0x140>
    6826:	1cfb      	adds	r3, r7, #3
    6828:	781b      	ldrb	r3, [r3, #0]
    682a:	2b01      	cmp	r3, #1
    682c:	d00a      	beq.n	6844 <_sercom_get_default_pad+0x108>
    682e:	dc02      	bgt.n	6836 <_sercom_get_default_pad+0xfa>
    6830:	2b00      	cmp	r3, #0
    6832:	d005      	beq.n	6840 <_sercom_get_default_pad+0x104>
    6834:	e021      	b.n	687a <_sercom_get_default_pad+0x13e>
    6836:	2b02      	cmp	r3, #2
    6838:	d006      	beq.n	6848 <_sercom_get_default_pad+0x10c>
    683a:	2b03      	cmp	r3, #3
    683c:	d006      	beq.n	684c <_sercom_get_default_pad+0x110>
    683e:	e01c      	b.n	687a <_sercom_get_default_pad+0x13e>
    6840:	4b25      	ldr	r3, [pc, #148]	; (68d8 <_sercom_get_default_pad+0x19c>)
    6842:	e01b      	b.n	687c <_sercom_get_default_pad+0x140>
    6844:	4b25      	ldr	r3, [pc, #148]	; (68dc <_sercom_get_default_pad+0x1a0>)
    6846:	e019      	b.n	687c <_sercom_get_default_pad+0x140>
    6848:	4b25      	ldr	r3, [pc, #148]	; (68e0 <_sercom_get_default_pad+0x1a4>)
    684a:	e017      	b.n	687c <_sercom_get_default_pad+0x140>
    684c:	4b25      	ldr	r3, [pc, #148]	; (68e4 <_sercom_get_default_pad+0x1a8>)
    684e:	e015      	b.n	687c <_sercom_get_default_pad+0x140>
    6850:	1cfb      	adds	r3, r7, #3
    6852:	781b      	ldrb	r3, [r3, #0]
    6854:	2b01      	cmp	r3, #1
    6856:	d00a      	beq.n	686e <_sercom_get_default_pad+0x132>
    6858:	dc02      	bgt.n	6860 <_sercom_get_default_pad+0x124>
    685a:	2b00      	cmp	r3, #0
    685c:	d005      	beq.n	686a <_sercom_get_default_pad+0x12e>
    685e:	e00c      	b.n	687a <_sercom_get_default_pad+0x13e>
    6860:	2b02      	cmp	r3, #2
    6862:	d006      	beq.n	6872 <_sercom_get_default_pad+0x136>
    6864:	2b03      	cmp	r3, #3
    6866:	d006      	beq.n	6876 <_sercom_get_default_pad+0x13a>
    6868:	e007      	b.n	687a <_sercom_get_default_pad+0x13e>
    686a:	4b1f      	ldr	r3, [pc, #124]	; (68e8 <_sercom_get_default_pad+0x1ac>)
    686c:	e006      	b.n	687c <_sercom_get_default_pad+0x140>
    686e:	4b1f      	ldr	r3, [pc, #124]	; (68ec <_sercom_get_default_pad+0x1b0>)
    6870:	e004      	b.n	687c <_sercom_get_default_pad+0x140>
    6872:	4b1f      	ldr	r3, [pc, #124]	; (68f0 <_sercom_get_default_pad+0x1b4>)
    6874:	e002      	b.n	687c <_sercom_get_default_pad+0x140>
    6876:	4b1f      	ldr	r3, [pc, #124]	; (68f4 <_sercom_get_default_pad+0x1b8>)
    6878:	e000      	b.n	687c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    687a:	2300      	movs	r3, #0
}
    687c:	0018      	movs	r0, r3
    687e:	46bd      	mov	sp, r7
    6880:	b002      	add	sp, #8
    6882:	bd80      	pop	{r7, pc}
    6884:	42001000 	.word	0x42001000
    6888:	42000800 	.word	0x42000800
    688c:	42000c00 	.word	0x42000c00
    6890:	42001800 	.word	0x42001800
    6894:	42001c00 	.word	0x42001c00
    6898:	42001400 	.word	0x42001400
    689c:	00040003 	.word	0x00040003
    68a0:	00050003 	.word	0x00050003
    68a4:	00060003 	.word	0x00060003
    68a8:	00070003 	.word	0x00070003
    68ac:	00010003 	.word	0x00010003
    68b0:	001e0003 	.word	0x001e0003
    68b4:	001f0003 	.word	0x001f0003
    68b8:	00080003 	.word	0x00080003
    68bc:	00090003 	.word	0x00090003
    68c0:	000a0003 	.word	0x000a0003
    68c4:	000b0003 	.word	0x000b0003
    68c8:	00100003 	.word	0x00100003
    68cc:	00110003 	.word	0x00110003
    68d0:	00120003 	.word	0x00120003
    68d4:	00130003 	.word	0x00130003
    68d8:	000c0003 	.word	0x000c0003
    68dc:	000d0003 	.word	0x000d0003
    68e0:	000e0003 	.word	0x000e0003
    68e4:	000f0003 	.word	0x000f0003
    68e8:	00160003 	.word	0x00160003
    68ec:	00170003 	.word	0x00170003
    68f0:	00180003 	.word	0x00180003
    68f4:	00190003 	.word	0x00190003

000068f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    68f8:	b590      	push	{r4, r7, lr}
    68fa:	b08b      	sub	sp, #44	; 0x2c
    68fc:	af00      	add	r7, sp, #0
    68fe:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    6900:	230c      	movs	r3, #12
    6902:	18fb      	adds	r3, r7, r3
    6904:	4a0f      	ldr	r2, [pc, #60]	; (6944 <_sercom_get_sercom_inst_index+0x4c>)
    6906:	ca13      	ldmia	r2!, {r0, r1, r4}
    6908:	c313      	stmia	r3!, {r0, r1, r4}
    690a:	ca13      	ldmia	r2!, {r0, r1, r4}
    690c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    690e:	2300      	movs	r3, #0
    6910:	627b      	str	r3, [r7, #36]	; 0x24
    6912:	e00e      	b.n	6932 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    6914:	230c      	movs	r3, #12
    6916:	18fb      	adds	r3, r7, r3
    6918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    691a:	0092      	lsls	r2, r2, #2
    691c:	58d3      	ldr	r3, [r2, r3]
    691e:	001a      	movs	r2, r3
    6920:	687b      	ldr	r3, [r7, #4]
    6922:	429a      	cmp	r2, r3
    6924:	d102      	bne.n	692c <_sercom_get_sercom_inst_index+0x34>
			return i;
    6926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6928:	b2db      	uxtb	r3, r3
    692a:	e006      	b.n	693a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    692e:	3301      	adds	r3, #1
    6930:	627b      	str	r3, [r7, #36]	; 0x24
    6932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6934:	2b05      	cmp	r3, #5
    6936:	d9ed      	bls.n	6914 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    6938:	2300      	movs	r3, #0
}
    693a:	0018      	movs	r0, r3
    693c:	46bd      	mov	sp, r7
    693e:	b00b      	add	sp, #44	; 0x2c
    6940:	bd90      	pop	{r4, r7, pc}
    6942:	46c0      	nop			; (mov r8, r8)
    6944:	0000e8b4 	.word	0x0000e8b4

00006948 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    6948:	b580      	push	{r7, lr}
    694a:	b082      	sub	sp, #8
    694c:	af00      	add	r7, sp, #0
    694e:	0002      	movs	r2, r0
    6950:	1dfb      	adds	r3, r7, #7
    6952:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    6954:	46c0      	nop			; (mov r8, r8)
    6956:	46bd      	mov	sp, r7
    6958:	b002      	add	sp, #8
    695a:	bd80      	pop	{r7, pc}

0000695c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    695c:	b580      	push	{r7, lr}
    695e:	b084      	sub	sp, #16
    6960:	af00      	add	r7, sp, #0
    6962:	0002      	movs	r2, r0
    6964:	6039      	str	r1, [r7, #0]
    6966:	1dfb      	adds	r3, r7, #7
    6968:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    696a:	4b13      	ldr	r3, [pc, #76]	; (69b8 <_sercom_set_handler+0x5c>)
    696c:	781b      	ldrb	r3, [r3, #0]
    696e:	2201      	movs	r2, #1
    6970:	4053      	eors	r3, r2
    6972:	b2db      	uxtb	r3, r3
    6974:	2b00      	cmp	r3, #0
    6976:	d015      	beq.n	69a4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6978:	2300      	movs	r3, #0
    697a:	60fb      	str	r3, [r7, #12]
    697c:	e00c      	b.n	6998 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    697e:	4b0f      	ldr	r3, [pc, #60]	; (69bc <_sercom_set_handler+0x60>)
    6980:	68fa      	ldr	r2, [r7, #12]
    6982:	0092      	lsls	r2, r2, #2
    6984:	490e      	ldr	r1, [pc, #56]	; (69c0 <_sercom_set_handler+0x64>)
    6986:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    6988:	4b0e      	ldr	r3, [pc, #56]	; (69c4 <_sercom_set_handler+0x68>)
    698a:	68fa      	ldr	r2, [r7, #12]
    698c:	0092      	lsls	r2, r2, #2
    698e:	2100      	movs	r1, #0
    6990:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6992:	68fb      	ldr	r3, [r7, #12]
    6994:	3301      	adds	r3, #1
    6996:	60fb      	str	r3, [r7, #12]
    6998:	68fb      	ldr	r3, [r7, #12]
    699a:	2b05      	cmp	r3, #5
    699c:	d9ef      	bls.n	697e <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    699e:	4b06      	ldr	r3, [pc, #24]	; (69b8 <_sercom_set_handler+0x5c>)
    69a0:	2201      	movs	r2, #1
    69a2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    69a4:	1dfb      	adds	r3, r7, #7
    69a6:	781a      	ldrb	r2, [r3, #0]
    69a8:	4b04      	ldr	r3, [pc, #16]	; (69bc <_sercom_set_handler+0x60>)
    69aa:	0092      	lsls	r2, r2, #2
    69ac:	6839      	ldr	r1, [r7, #0]
    69ae:	50d1      	str	r1, [r2, r3]
}
    69b0:	46c0      	nop			; (mov r8, r8)
    69b2:	46bd      	mov	sp, r7
    69b4:	b004      	add	sp, #16
    69b6:	bd80      	pop	{r7, pc}
    69b8:	200000c2 	.word	0x200000c2
    69bc:	200000c4 	.word	0x200000c4
    69c0:	00006949 	.word	0x00006949
    69c4:	2000043c 	.word	0x2000043c

000069c8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    69c8:	b590      	push	{r4, r7, lr}
    69ca:	b085      	sub	sp, #20
    69cc:	af00      	add	r7, sp, #0
    69ce:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    69d0:	2308      	movs	r3, #8
    69d2:	18fa      	adds	r2, r7, r3
    69d4:	4b0c      	ldr	r3, [pc, #48]	; (6a08 <_sercom_get_interrupt_vector+0x40>)
    69d6:	0010      	movs	r0, r2
    69d8:	0019      	movs	r1, r3
    69da:	2306      	movs	r3, #6
    69dc:	001a      	movs	r2, r3
    69de:	4b0b      	ldr	r3, [pc, #44]	; (6a0c <_sercom_get_interrupt_vector+0x44>)
    69e0:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    69e2:	230f      	movs	r3, #15
    69e4:	18fc      	adds	r4, r7, r3
    69e6:	687b      	ldr	r3, [r7, #4]
    69e8:	0018      	movs	r0, r3
    69ea:	4b09      	ldr	r3, [pc, #36]	; (6a10 <_sercom_get_interrupt_vector+0x48>)
    69ec:	4798      	blx	r3
    69ee:	0003      	movs	r3, r0
    69f0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    69f2:	230f      	movs	r3, #15
    69f4:	18fb      	adds	r3, r7, r3
    69f6:	781b      	ldrb	r3, [r3, #0]
    69f8:	2208      	movs	r2, #8
    69fa:	18ba      	adds	r2, r7, r2
    69fc:	5cd3      	ldrb	r3, [r2, r3]
    69fe:	b25b      	sxtb	r3, r3
}
    6a00:	0018      	movs	r0, r3
    6a02:	46bd      	mov	sp, r7
    6a04:	b005      	add	sp, #20
    6a06:	bd90      	pop	{r4, r7, pc}
    6a08:	0000e8cc 	.word	0x0000e8cc
    6a0c:	0000c2bd 	.word	0x0000c2bd
    6a10:	000068f9 	.word	0x000068f9

00006a14 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    6a14:	b580      	push	{r7, lr}
    6a16:	af00      	add	r7, sp, #0
    6a18:	4b03      	ldr	r3, [pc, #12]	; (6a28 <SERCOM0_Handler+0x14>)
    6a1a:	681b      	ldr	r3, [r3, #0]
    6a1c:	2000      	movs	r0, #0
    6a1e:	4798      	blx	r3
    6a20:	46c0      	nop			; (mov r8, r8)
    6a22:	46bd      	mov	sp, r7
    6a24:	bd80      	pop	{r7, pc}
    6a26:	46c0      	nop			; (mov r8, r8)
    6a28:	200000c4 	.word	0x200000c4

00006a2c <SERCOM1_Handler>:
    6a2c:	b580      	push	{r7, lr}
    6a2e:	af00      	add	r7, sp, #0
    6a30:	4b03      	ldr	r3, [pc, #12]	; (6a40 <SERCOM1_Handler+0x14>)
    6a32:	685b      	ldr	r3, [r3, #4]
    6a34:	2001      	movs	r0, #1
    6a36:	4798      	blx	r3
    6a38:	46c0      	nop			; (mov r8, r8)
    6a3a:	46bd      	mov	sp, r7
    6a3c:	bd80      	pop	{r7, pc}
    6a3e:	46c0      	nop			; (mov r8, r8)
    6a40:	200000c4 	.word	0x200000c4

00006a44 <SERCOM2_Handler>:
    6a44:	b580      	push	{r7, lr}
    6a46:	af00      	add	r7, sp, #0
    6a48:	4b03      	ldr	r3, [pc, #12]	; (6a58 <SERCOM2_Handler+0x14>)
    6a4a:	689b      	ldr	r3, [r3, #8]
    6a4c:	2002      	movs	r0, #2
    6a4e:	4798      	blx	r3
    6a50:	46c0      	nop			; (mov r8, r8)
    6a52:	46bd      	mov	sp, r7
    6a54:	bd80      	pop	{r7, pc}
    6a56:	46c0      	nop			; (mov r8, r8)
    6a58:	200000c4 	.word	0x200000c4

00006a5c <SERCOM3_Handler>:
    6a5c:	b580      	push	{r7, lr}
    6a5e:	af00      	add	r7, sp, #0
    6a60:	4b03      	ldr	r3, [pc, #12]	; (6a70 <SERCOM3_Handler+0x14>)
    6a62:	68db      	ldr	r3, [r3, #12]
    6a64:	2003      	movs	r0, #3
    6a66:	4798      	blx	r3
    6a68:	46c0      	nop			; (mov r8, r8)
    6a6a:	46bd      	mov	sp, r7
    6a6c:	bd80      	pop	{r7, pc}
    6a6e:	46c0      	nop			; (mov r8, r8)
    6a70:	200000c4 	.word	0x200000c4

00006a74 <SERCOM4_Handler>:
    6a74:	b580      	push	{r7, lr}
    6a76:	af00      	add	r7, sp, #0
    6a78:	4b03      	ldr	r3, [pc, #12]	; (6a88 <SERCOM4_Handler+0x14>)
    6a7a:	691b      	ldr	r3, [r3, #16]
    6a7c:	2004      	movs	r0, #4
    6a7e:	4798      	blx	r3
    6a80:	46c0      	nop			; (mov r8, r8)
    6a82:	46bd      	mov	sp, r7
    6a84:	bd80      	pop	{r7, pc}
    6a86:	46c0      	nop			; (mov r8, r8)
    6a88:	200000c4 	.word	0x200000c4

00006a8c <SERCOM5_Handler>:
    6a8c:	b580      	push	{r7, lr}
    6a8e:	af00      	add	r7, sp, #0
    6a90:	4b03      	ldr	r3, [pc, #12]	; (6aa0 <SERCOM5_Handler+0x14>)
    6a92:	695b      	ldr	r3, [r3, #20]
    6a94:	2005      	movs	r0, #5
    6a96:	4798      	blx	r3
    6a98:	46c0      	nop			; (mov r8, r8)
    6a9a:	46bd      	mov	sp, r7
    6a9c:	bd80      	pop	{r7, pc}
    6a9e:	46c0      	nop			; (mov r8, r8)
    6aa0:	200000c4 	.word	0x200000c4

00006aa4 <system_pinmux_get_config_defaults>:
{
    6aa4:	b580      	push	{r7, lr}
    6aa6:	b082      	sub	sp, #8
    6aa8:	af00      	add	r7, sp, #0
    6aaa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6aac:	687b      	ldr	r3, [r7, #4]
    6aae:	2280      	movs	r2, #128	; 0x80
    6ab0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6ab2:	687b      	ldr	r3, [r7, #4]
    6ab4:	2200      	movs	r2, #0
    6ab6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6ab8:	687b      	ldr	r3, [r7, #4]
    6aba:	2201      	movs	r2, #1
    6abc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6abe:	687b      	ldr	r3, [r7, #4]
    6ac0:	2200      	movs	r2, #0
    6ac2:	70da      	strb	r2, [r3, #3]
}
    6ac4:	46c0      	nop			; (mov r8, r8)
    6ac6:	46bd      	mov	sp, r7
    6ac8:	b002      	add	sp, #8
    6aca:	bd80      	pop	{r7, pc}

00006acc <system_pinmux_get_group_from_gpio_pin>:
{
    6acc:	b580      	push	{r7, lr}
    6ace:	b084      	sub	sp, #16
    6ad0:	af00      	add	r7, sp, #0
    6ad2:	0002      	movs	r2, r0
    6ad4:	1dfb      	adds	r3, r7, #7
    6ad6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6ad8:	230f      	movs	r3, #15
    6ada:	18fb      	adds	r3, r7, r3
    6adc:	1dfa      	adds	r2, r7, #7
    6ade:	7812      	ldrb	r2, [r2, #0]
    6ae0:	09d2      	lsrs	r2, r2, #7
    6ae2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6ae4:	230e      	movs	r3, #14
    6ae6:	18fb      	adds	r3, r7, r3
    6ae8:	1dfa      	adds	r2, r7, #7
    6aea:	7812      	ldrb	r2, [r2, #0]
    6aec:	0952      	lsrs	r2, r2, #5
    6aee:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6af0:	4b0d      	ldr	r3, [pc, #52]	; (6b28 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6af2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6af4:	230f      	movs	r3, #15
    6af6:	18fb      	adds	r3, r7, r3
    6af8:	781b      	ldrb	r3, [r3, #0]
    6afa:	2b00      	cmp	r3, #0
    6afc:	d10f      	bne.n	6b1e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6afe:	230f      	movs	r3, #15
    6b00:	18fb      	adds	r3, r7, r3
    6b02:	781b      	ldrb	r3, [r3, #0]
    6b04:	009b      	lsls	r3, r3, #2
    6b06:	2210      	movs	r2, #16
    6b08:	4694      	mov	ip, r2
    6b0a:	44bc      	add	ip, r7
    6b0c:	4463      	add	r3, ip
    6b0e:	3b08      	subs	r3, #8
    6b10:	681a      	ldr	r2, [r3, #0]
    6b12:	230e      	movs	r3, #14
    6b14:	18fb      	adds	r3, r7, r3
    6b16:	781b      	ldrb	r3, [r3, #0]
    6b18:	01db      	lsls	r3, r3, #7
    6b1a:	18d3      	adds	r3, r2, r3
    6b1c:	e000      	b.n	6b20 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6b1e:	2300      	movs	r3, #0
}
    6b20:	0018      	movs	r0, r3
    6b22:	46bd      	mov	sp, r7
    6b24:	b004      	add	sp, #16
    6b26:	bd80      	pop	{r7, pc}
    6b28:	41004400 	.word	0x41004400

00006b2c <port_get_group_from_gpio_pin>:
{
    6b2c:	b580      	push	{r7, lr}
    6b2e:	b082      	sub	sp, #8
    6b30:	af00      	add	r7, sp, #0
    6b32:	0002      	movs	r2, r0
    6b34:	1dfb      	adds	r3, r7, #7
    6b36:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6b38:	1dfb      	adds	r3, r7, #7
    6b3a:	781b      	ldrb	r3, [r3, #0]
    6b3c:	0018      	movs	r0, r3
    6b3e:	4b03      	ldr	r3, [pc, #12]	; (6b4c <port_get_group_from_gpio_pin+0x20>)
    6b40:	4798      	blx	r3
    6b42:	0003      	movs	r3, r0
}
    6b44:	0018      	movs	r0, r3
    6b46:	46bd      	mov	sp, r7
    6b48:	b002      	add	sp, #8
    6b4a:	bd80      	pop	{r7, pc}
    6b4c:	00006acd 	.word	0x00006acd

00006b50 <port_pin_set_output_level>:
{
    6b50:	b580      	push	{r7, lr}
    6b52:	b084      	sub	sp, #16
    6b54:	af00      	add	r7, sp, #0
    6b56:	0002      	movs	r2, r0
    6b58:	1dfb      	adds	r3, r7, #7
    6b5a:	701a      	strb	r2, [r3, #0]
    6b5c:	1dbb      	adds	r3, r7, #6
    6b5e:	1c0a      	adds	r2, r1, #0
    6b60:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6b62:	1dfb      	adds	r3, r7, #7
    6b64:	781b      	ldrb	r3, [r3, #0]
    6b66:	0018      	movs	r0, r3
    6b68:	4b0d      	ldr	r3, [pc, #52]	; (6ba0 <port_pin_set_output_level+0x50>)
    6b6a:	4798      	blx	r3
    6b6c:	0003      	movs	r3, r0
    6b6e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6b70:	1dfb      	adds	r3, r7, #7
    6b72:	781b      	ldrb	r3, [r3, #0]
    6b74:	221f      	movs	r2, #31
    6b76:	4013      	ands	r3, r2
    6b78:	2201      	movs	r2, #1
    6b7a:	409a      	lsls	r2, r3
    6b7c:	0013      	movs	r3, r2
    6b7e:	60bb      	str	r3, [r7, #8]
	if (level) {
    6b80:	1dbb      	adds	r3, r7, #6
    6b82:	781b      	ldrb	r3, [r3, #0]
    6b84:	2b00      	cmp	r3, #0
    6b86:	d003      	beq.n	6b90 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6b88:	68fb      	ldr	r3, [r7, #12]
    6b8a:	68ba      	ldr	r2, [r7, #8]
    6b8c:	619a      	str	r2, [r3, #24]
}
    6b8e:	e002      	b.n	6b96 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    6b90:	68fb      	ldr	r3, [r7, #12]
    6b92:	68ba      	ldr	r2, [r7, #8]
    6b94:	615a      	str	r2, [r3, #20]
}
    6b96:	46c0      	nop			; (mov r8, r8)
    6b98:	46bd      	mov	sp, r7
    6b9a:	b004      	add	sp, #16
    6b9c:	bd80      	pop	{r7, pc}
    6b9e:	46c0      	nop			; (mov r8, r8)
    6ba0:	00006b2d 	.word	0x00006b2d

00006ba4 <system_gclk_chan_get_config_defaults>:
{
    6ba4:	b580      	push	{r7, lr}
    6ba6:	b082      	sub	sp, #8
    6ba8:	af00      	add	r7, sp, #0
    6baa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6bac:	687b      	ldr	r3, [r7, #4]
    6bae:	2200      	movs	r2, #0
    6bb0:	701a      	strb	r2, [r3, #0]
}
    6bb2:	46c0      	nop			; (mov r8, r8)
    6bb4:	46bd      	mov	sp, r7
    6bb6:	b002      	add	sp, #8
    6bb8:	bd80      	pop	{r7, pc}
	...

00006bbc <system_apb_clock_set_mask>:
{
    6bbc:	b580      	push	{r7, lr}
    6bbe:	b082      	sub	sp, #8
    6bc0:	af00      	add	r7, sp, #0
    6bc2:	0002      	movs	r2, r0
    6bc4:	6039      	str	r1, [r7, #0]
    6bc6:	1dfb      	adds	r3, r7, #7
    6bc8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6bca:	1dfb      	adds	r3, r7, #7
    6bcc:	781b      	ldrb	r3, [r3, #0]
    6bce:	2b01      	cmp	r3, #1
    6bd0:	d00a      	beq.n	6be8 <system_apb_clock_set_mask+0x2c>
    6bd2:	2b02      	cmp	r3, #2
    6bd4:	d00f      	beq.n	6bf6 <system_apb_clock_set_mask+0x3a>
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d114      	bne.n	6c04 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6bda:	4b0e      	ldr	r3, [pc, #56]	; (6c14 <system_apb_clock_set_mask+0x58>)
    6bdc:	4a0d      	ldr	r2, [pc, #52]	; (6c14 <system_apb_clock_set_mask+0x58>)
    6bde:	6991      	ldr	r1, [r2, #24]
    6be0:	683a      	ldr	r2, [r7, #0]
    6be2:	430a      	orrs	r2, r1
    6be4:	619a      	str	r2, [r3, #24]
			break;
    6be6:	e00f      	b.n	6c08 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6be8:	4b0a      	ldr	r3, [pc, #40]	; (6c14 <system_apb_clock_set_mask+0x58>)
    6bea:	4a0a      	ldr	r2, [pc, #40]	; (6c14 <system_apb_clock_set_mask+0x58>)
    6bec:	69d1      	ldr	r1, [r2, #28]
    6bee:	683a      	ldr	r2, [r7, #0]
    6bf0:	430a      	orrs	r2, r1
    6bf2:	61da      	str	r2, [r3, #28]
			break;
    6bf4:	e008      	b.n	6c08 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6bf6:	4b07      	ldr	r3, [pc, #28]	; (6c14 <system_apb_clock_set_mask+0x58>)
    6bf8:	4a06      	ldr	r2, [pc, #24]	; (6c14 <system_apb_clock_set_mask+0x58>)
    6bfa:	6a11      	ldr	r1, [r2, #32]
    6bfc:	683a      	ldr	r2, [r7, #0]
    6bfe:	430a      	orrs	r2, r1
    6c00:	621a      	str	r2, [r3, #32]
			break;
    6c02:	e001      	b.n	6c08 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6c04:	2317      	movs	r3, #23
    6c06:	e000      	b.n	6c0a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6c08:	2300      	movs	r3, #0
}
    6c0a:	0018      	movs	r0, r3
    6c0c:	46bd      	mov	sp, r7
    6c0e:	b002      	add	sp, #8
    6c10:	bd80      	pop	{r7, pc}
    6c12:	46c0      	nop			; (mov r8, r8)
    6c14:	40000400 	.word	0x40000400

00006c18 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    6c18:	b580      	push	{r7, lr}
    6c1a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6c1c:	4b05      	ldr	r3, [pc, #20]	; (6c34 <system_is_debugger_present+0x1c>)
    6c1e:	789b      	ldrb	r3, [r3, #2]
    6c20:	b2db      	uxtb	r3, r3
    6c22:	001a      	movs	r2, r3
    6c24:	2302      	movs	r3, #2
    6c26:	4013      	ands	r3, r2
    6c28:	1e5a      	subs	r2, r3, #1
    6c2a:	4193      	sbcs	r3, r2
    6c2c:	b2db      	uxtb	r3, r3
}
    6c2e:	0018      	movs	r0, r3
    6c30:	46bd      	mov	sp, r7
    6c32:	bd80      	pop	{r7, pc}
    6c34:	41002000 	.word	0x41002000

00006c38 <spi_is_ready_to_write>:
{
    6c38:	b580      	push	{r7, lr}
    6c3a:	b084      	sub	sp, #16
    6c3c:	af00      	add	r7, sp, #0
    6c3e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6c40:	687b      	ldr	r3, [r7, #4]
    6c42:	681b      	ldr	r3, [r3, #0]
    6c44:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6c46:	68fb      	ldr	r3, [r7, #12]
    6c48:	7e1b      	ldrb	r3, [r3, #24]
    6c4a:	b2db      	uxtb	r3, r3
    6c4c:	001a      	movs	r2, r3
    6c4e:	2301      	movs	r3, #1
    6c50:	4013      	ands	r3, r2
    6c52:	1e5a      	subs	r2, r3, #1
    6c54:	4193      	sbcs	r3, r2
    6c56:	b2db      	uxtb	r3, r3
}
    6c58:	0018      	movs	r0, r3
    6c5a:	46bd      	mov	sp, r7
    6c5c:	b004      	add	sp, #16
    6c5e:	bd80      	pop	{r7, pc}

00006c60 <spi_is_ready_to_read>:
{
    6c60:	b580      	push	{r7, lr}
    6c62:	b084      	sub	sp, #16
    6c64:	af00      	add	r7, sp, #0
    6c66:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6c68:	687b      	ldr	r3, [r7, #4]
    6c6a:	681b      	ldr	r3, [r3, #0]
    6c6c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6c6e:	68fb      	ldr	r3, [r7, #12]
    6c70:	7e1b      	ldrb	r3, [r3, #24]
    6c72:	b2db      	uxtb	r3, r3
    6c74:	001a      	movs	r2, r3
    6c76:	2304      	movs	r3, #4
    6c78:	4013      	ands	r3, r2
    6c7a:	1e5a      	subs	r2, r3, #1
    6c7c:	4193      	sbcs	r3, r2
    6c7e:	b2db      	uxtb	r3, r3
}
    6c80:	0018      	movs	r0, r3
    6c82:	46bd      	mov	sp, r7
    6c84:	b004      	add	sp, #16
    6c86:	bd80      	pop	{r7, pc}

00006c88 <spi_write>:
{
    6c88:	b580      	push	{r7, lr}
    6c8a:	b084      	sub	sp, #16
    6c8c:	af00      	add	r7, sp, #0
    6c8e:	6078      	str	r0, [r7, #4]
    6c90:	000a      	movs	r2, r1
    6c92:	1cbb      	adds	r3, r7, #2
    6c94:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6c96:	687b      	ldr	r3, [r7, #4]
    6c98:	681b      	ldr	r3, [r3, #0]
    6c9a:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    6c9c:	687b      	ldr	r3, [r7, #4]
    6c9e:	0018      	movs	r0, r3
    6ca0:	4b0a      	ldr	r3, [pc, #40]	; (6ccc <spi_write+0x44>)
    6ca2:	4798      	blx	r3
    6ca4:	0003      	movs	r3, r0
    6ca6:	001a      	movs	r2, r3
    6ca8:	2301      	movs	r3, #1
    6caa:	4053      	eors	r3, r2
    6cac:	b2db      	uxtb	r3, r3
    6cae:	2b00      	cmp	r3, #0
    6cb0:	d001      	beq.n	6cb6 <spi_write+0x2e>
		return STATUS_BUSY;
    6cb2:	2305      	movs	r3, #5
    6cb4:	e006      	b.n	6cc4 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6cb6:	1cbb      	adds	r3, r7, #2
    6cb8:	881b      	ldrh	r3, [r3, #0]
    6cba:	05db      	lsls	r3, r3, #23
    6cbc:	0dda      	lsrs	r2, r3, #23
    6cbe:	68fb      	ldr	r3, [r7, #12]
    6cc0:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    6cc2:	2300      	movs	r3, #0
}
    6cc4:	0018      	movs	r0, r3
    6cc6:	46bd      	mov	sp, r7
    6cc8:	b004      	add	sp, #16
    6cca:	bd80      	pop	{r7, pc}
    6ccc:	00006c39 	.word	0x00006c39

00006cd0 <spi_read>:
{
    6cd0:	b580      	push	{r7, lr}
    6cd2:	b084      	sub	sp, #16
    6cd4:	af00      	add	r7, sp, #0
    6cd6:	6078      	str	r0, [r7, #4]
    6cd8:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6cda:	687b      	ldr	r3, [r7, #4]
    6cdc:	681b      	ldr	r3, [r3, #0]
    6cde:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    6ce0:	687b      	ldr	r3, [r7, #4]
    6ce2:	0018      	movs	r0, r3
    6ce4:	4b1b      	ldr	r3, [pc, #108]	; (6d54 <spi_read+0x84>)
    6ce6:	4798      	blx	r3
    6ce8:	0003      	movs	r3, r0
    6cea:	001a      	movs	r2, r3
    6cec:	2301      	movs	r3, #1
    6cee:	4053      	eors	r3, r2
    6cf0:	b2db      	uxtb	r3, r3
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d001      	beq.n	6cfa <spi_read+0x2a>
		return STATUS_ERR_IO;
    6cf6:	2310      	movs	r3, #16
    6cf8:	e027      	b.n	6d4a <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    6cfa:	230f      	movs	r3, #15
    6cfc:	18fb      	adds	r3, r7, r3
    6cfe:	2200      	movs	r2, #0
    6d00:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6d02:	68bb      	ldr	r3, [r7, #8]
    6d04:	8b5b      	ldrh	r3, [r3, #26]
    6d06:	b29b      	uxth	r3, r3
    6d08:	001a      	movs	r2, r3
    6d0a:	2304      	movs	r3, #4
    6d0c:	4013      	ands	r3, r2
    6d0e:	d006      	beq.n	6d1e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    6d10:	230f      	movs	r3, #15
    6d12:	18fb      	adds	r3, r7, r3
    6d14:	221e      	movs	r2, #30
    6d16:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6d18:	68bb      	ldr	r3, [r7, #8]
    6d1a:	2204      	movs	r2, #4
    6d1c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6d1e:	687b      	ldr	r3, [r7, #4]
    6d20:	799b      	ldrb	r3, [r3, #6]
    6d22:	2b01      	cmp	r3, #1
    6d24:	d108      	bne.n	6d38 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6d26:	68bb      	ldr	r3, [r7, #8]
    6d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d2a:	b29b      	uxth	r3, r3
    6d2c:	05db      	lsls	r3, r3, #23
    6d2e:	0ddb      	lsrs	r3, r3, #23
    6d30:	b29a      	uxth	r2, r3
    6d32:	683b      	ldr	r3, [r7, #0]
    6d34:	801a      	strh	r2, [r3, #0]
    6d36:	e005      	b.n	6d44 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6d38:	68bb      	ldr	r3, [r7, #8]
    6d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d3c:	b2db      	uxtb	r3, r3
    6d3e:	b29a      	uxth	r2, r3
    6d40:	683b      	ldr	r3, [r7, #0]
    6d42:	801a      	strh	r2, [r3, #0]
	return retval;
    6d44:	230f      	movs	r3, #15
    6d46:	18fb      	adds	r3, r7, r3
    6d48:	781b      	ldrb	r3, [r3, #0]
}
    6d4a:	0018      	movs	r0, r3
    6d4c:	46bd      	mov	sp, r7
    6d4e:	b004      	add	sp, #16
    6d50:	bd80      	pop	{r7, pc}
    6d52:	46c0      	nop			; (mov r8, r8)
    6d54:	00006c61 	.word	0x00006c61

00006d58 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    6d58:	b590      	push	{r4, r7, lr}
    6d5a:	b093      	sub	sp, #76	; 0x4c
    6d5c:	af00      	add	r7, sp, #0
    6d5e:	6078      	str	r0, [r7, #4]
    6d60:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6d62:	687b      	ldr	r3, [r7, #4]
    6d64:	681b      	ldr	r3, [r3, #0]
    6d66:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    6d68:	687b      	ldr	r3, [r7, #4]
    6d6a:	681b      	ldr	r3, [r3, #0]
    6d6c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    6d6e:	231c      	movs	r3, #28
    6d70:	18fb      	adds	r3, r7, r3
    6d72:	0018      	movs	r0, r3
    6d74:	4b75      	ldr	r3, [pc, #468]	; (6f4c <_spi_set_config+0x1f4>)
    6d76:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6d78:	231c      	movs	r3, #28
    6d7a:	18fb      	adds	r3, r7, r3
    6d7c:	2200      	movs	r2, #0
    6d7e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    6d80:	683b      	ldr	r3, [r7, #0]
    6d82:	781b      	ldrb	r3, [r3, #0]
    6d84:	2b00      	cmp	r3, #0
    6d86:	d103      	bne.n	6d90 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6d88:	231c      	movs	r3, #28
    6d8a:	18fb      	adds	r3, r7, r3
    6d8c:	2200      	movs	r2, #0
    6d8e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    6d90:	683b      	ldr	r3, [r7, #0]
    6d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    6d94:	230c      	movs	r3, #12
    6d96:	18fb      	adds	r3, r7, r3
    6d98:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    6d9a:	683b      	ldr	r3, [r7, #0]
    6d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    6d9e:	230c      	movs	r3, #12
    6da0:	18fb      	adds	r3, r7, r3
    6da2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    6da4:	683b      	ldr	r3, [r7, #0]
    6da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    6da8:	230c      	movs	r3, #12
    6daa:	18fb      	adds	r3, r7, r3
    6dac:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    6dae:	683b      	ldr	r3, [r7, #0]
    6db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6db2:	230c      	movs	r3, #12
    6db4:	18fb      	adds	r3, r7, r3
    6db6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    6db8:	2347      	movs	r3, #71	; 0x47
    6dba:	18fb      	adds	r3, r7, r3
    6dbc:	2200      	movs	r2, #0
    6dbe:	701a      	strb	r2, [r3, #0]
    6dc0:	e02c      	b.n	6e1c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6dc2:	2347      	movs	r3, #71	; 0x47
    6dc4:	18fb      	adds	r3, r7, r3
    6dc6:	781a      	ldrb	r2, [r3, #0]
    6dc8:	230c      	movs	r3, #12
    6dca:	18fb      	adds	r3, r7, r3
    6dcc:	0092      	lsls	r2, r2, #2
    6dce:	58d3      	ldr	r3, [r2, r3]
    6dd0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6dd4:	2b00      	cmp	r3, #0
    6dd6:	d109      	bne.n	6dec <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6dd8:	2347      	movs	r3, #71	; 0x47
    6dda:	18fb      	adds	r3, r7, r3
    6ddc:	781a      	ldrb	r2, [r3, #0]
    6dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6de0:	0011      	movs	r1, r2
    6de2:	0018      	movs	r0, r3
    6de4:	4b5a      	ldr	r3, [pc, #360]	; (6f50 <_spi_set_config+0x1f8>)
    6de6:	4798      	blx	r3
    6de8:	0003      	movs	r3, r0
    6dea:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6dee:	3301      	adds	r3, #1
    6df0:	d00d      	beq.n	6e0e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6df4:	b2da      	uxtb	r2, r3
    6df6:	231c      	movs	r3, #28
    6df8:	18fb      	adds	r3, r7, r3
    6dfa:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6dfe:	0c1b      	lsrs	r3, r3, #16
    6e00:	b2db      	uxtb	r3, r3
    6e02:	221c      	movs	r2, #28
    6e04:	18ba      	adds	r2, r7, r2
    6e06:	0011      	movs	r1, r2
    6e08:	0018      	movs	r0, r3
    6e0a:	4b52      	ldr	r3, [pc, #328]	; (6f54 <_spi_set_config+0x1fc>)
    6e0c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    6e0e:	2347      	movs	r3, #71	; 0x47
    6e10:	18fb      	adds	r3, r7, r3
    6e12:	781a      	ldrb	r2, [r3, #0]
    6e14:	2347      	movs	r3, #71	; 0x47
    6e16:	18fb      	adds	r3, r7, r3
    6e18:	3201      	adds	r2, #1
    6e1a:	701a      	strb	r2, [r3, #0]
    6e1c:	2347      	movs	r3, #71	; 0x47
    6e1e:	18fb      	adds	r3, r7, r3
    6e20:	781b      	ldrb	r3, [r3, #0]
    6e22:	2b03      	cmp	r3, #3
    6e24:	d9cd      	bls.n	6dc2 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    6e26:	683b      	ldr	r3, [r7, #0]
    6e28:	781a      	ldrb	r2, [r3, #0]
    6e2a:	687b      	ldr	r3, [r7, #4]
    6e2c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    6e2e:	683b      	ldr	r3, [r7, #0]
    6e30:	7c1a      	ldrb	r2, [r3, #16]
    6e32:	687b      	ldr	r3, [r7, #4]
    6e34:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    6e36:	683b      	ldr	r3, [r7, #0]
    6e38:	7c9a      	ldrb	r2, [r3, #18]
    6e3a:	687b      	ldr	r3, [r7, #4]
    6e3c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    6e3e:	683b      	ldr	r3, [r7, #0]
    6e40:	7d1a      	ldrb	r2, [r3, #20]
    6e42:	687b      	ldr	r3, [r7, #4]
    6e44:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    6e46:	230a      	movs	r3, #10
    6e48:	18fb      	adds	r3, r7, r3
    6e4a:	2200      	movs	r2, #0
    6e4c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    6e4e:	2300      	movs	r3, #0
    6e50:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    6e52:	2300      	movs	r3, #0
    6e54:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    6e56:	683b      	ldr	r3, [r7, #0]
    6e58:	781b      	ldrb	r3, [r3, #0]
    6e5a:	2b01      	cmp	r3, #1
    6e5c:	d129      	bne.n	6eb2 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6e5e:	687b      	ldr	r3, [r7, #4]
    6e60:	681b      	ldr	r3, [r3, #0]
    6e62:	0018      	movs	r0, r3
    6e64:	4b3c      	ldr	r3, [pc, #240]	; (6f58 <_spi_set_config+0x200>)
    6e66:	4798      	blx	r3
    6e68:	0003      	movs	r3, r0
    6e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6e6e:	3314      	adds	r3, #20
    6e70:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    6e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e74:	b2db      	uxtb	r3, r3
    6e76:	0018      	movs	r0, r3
    6e78:	4b38      	ldr	r3, [pc, #224]	; (6f5c <_spi_set_config+0x204>)
    6e7a:	4798      	blx	r3
    6e7c:	0003      	movs	r3, r0
    6e7e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    6e80:	683b      	ldr	r3, [r7, #0]
    6e82:	699b      	ldr	r3, [r3, #24]
    6e84:	2223      	movs	r2, #35	; 0x23
    6e86:	18bc      	adds	r4, r7, r2
    6e88:	220a      	movs	r2, #10
    6e8a:	18ba      	adds	r2, r7, r2
    6e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6e8e:	0018      	movs	r0, r3
    6e90:	4b33      	ldr	r3, [pc, #204]	; (6f60 <_spi_set_config+0x208>)
    6e92:	4798      	blx	r3
    6e94:	0003      	movs	r3, r0
    6e96:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    6e98:	2323      	movs	r3, #35	; 0x23
    6e9a:	18fb      	adds	r3, r7, r3
    6e9c:	781b      	ldrb	r3, [r3, #0]
    6e9e:	2b00      	cmp	r3, #0
    6ea0:	d001      	beq.n	6ea6 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    6ea2:	2317      	movs	r3, #23
    6ea4:	e04e      	b.n	6f44 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    6ea6:	230a      	movs	r3, #10
    6ea8:	18fb      	adds	r3, r7, r3
    6eaa:	881b      	ldrh	r3, [r3, #0]
    6eac:	b2da      	uxtb	r2, r3
    6eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6eb0:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    6eb2:	683b      	ldr	r3, [r7, #0]
    6eb4:	685b      	ldr	r3, [r3, #4]
    6eb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6eb8:	4313      	orrs	r3, r2
    6eba:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    6ebc:	683b      	ldr	r3, [r7, #0]
    6ebe:	689b      	ldr	r3, [r3, #8]
    6ec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6ec2:	4313      	orrs	r3, r2
    6ec4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    6ec6:	683b      	ldr	r3, [r7, #0]
    6ec8:	68db      	ldr	r3, [r3, #12]
    6eca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6ecc:	4313      	orrs	r3, r2
    6ece:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    6ed0:	683b      	ldr	r3, [r7, #0]
    6ed2:	7c1b      	ldrb	r3, [r3, #16]
    6ed4:	001a      	movs	r2, r3
    6ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6ed8:	4313      	orrs	r3, r2
    6eda:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    6edc:	683b      	ldr	r3, [r7, #0]
    6ede:	7c5b      	ldrb	r3, [r3, #17]
    6ee0:	2b00      	cmp	r3, #0
    6ee2:	d103      	bne.n	6eec <_spi_set_config+0x194>
    6ee4:	4b1f      	ldr	r3, [pc, #124]	; (6f64 <_spi_set_config+0x20c>)
    6ee6:	4798      	blx	r3
    6ee8:	1e03      	subs	r3, r0, #0
    6eea:	d003      	beq.n	6ef4 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6eee:	2280      	movs	r2, #128	; 0x80
    6ef0:	4313      	orrs	r3, r2
    6ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    6ef4:	683b      	ldr	r3, [r7, #0]
    6ef6:	7c9b      	ldrb	r3, [r3, #18]
    6ef8:	2b00      	cmp	r3, #0
    6efa:	d004      	beq.n	6f06 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6efe:	2280      	movs	r2, #128	; 0x80
    6f00:	0292      	lsls	r2, r2, #10
    6f02:	4313      	orrs	r3, r2
    6f04:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    6f06:	683b      	ldr	r3, [r7, #0]
    6f08:	7cdb      	ldrb	r3, [r3, #19]
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	d004      	beq.n	6f18 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    6f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f10:	2280      	movs	r2, #128	; 0x80
    6f12:	0092      	lsls	r2, r2, #2
    6f14:	4313      	orrs	r3, r2
    6f16:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    6f18:	683b      	ldr	r3, [r7, #0]
    6f1a:	7d1b      	ldrb	r3, [r3, #20]
    6f1c:	2b00      	cmp	r3, #0
    6f1e:	d004      	beq.n	6f2a <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    6f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f22:	2280      	movs	r2, #128	; 0x80
    6f24:	0192      	lsls	r2, r2, #6
    6f26:	4313      	orrs	r3, r2
    6f28:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    6f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f2c:	681a      	ldr	r2, [r3, #0]
    6f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6f30:	431a      	orrs	r2, r3
    6f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f34:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    6f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f38:	685a      	ldr	r2, [r3, #4]
    6f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f3c:	431a      	orrs	r2, r3
    6f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f40:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    6f42:	2300      	movs	r3, #0
}
    6f44:	0018      	movs	r0, r3
    6f46:	46bd      	mov	sp, r7
    6f48:	b013      	add	sp, #76	; 0x4c
    6f4a:	bd90      	pop	{r4, r7, pc}
    6f4c:	00006aa5 	.word	0x00006aa5
    6f50:	0000673d 	.word	0x0000673d
    6f54:	00009119 	.word	0x00009119
    6f58:	000068f9 	.word	0x000068f9
    6f5c:	00008f51 	.word	0x00008f51
    6f60:	00006473 	.word	0x00006473
    6f64:	00006c19 	.word	0x00006c19

00006f68 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    6f68:	b590      	push	{r4, r7, lr}
    6f6a:	b08b      	sub	sp, #44	; 0x2c
    6f6c:	af00      	add	r7, sp, #0
    6f6e:	60f8      	str	r0, [r7, #12]
    6f70:	60b9      	str	r1, [r7, #8]
    6f72:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    6f74:	68fb      	ldr	r3, [r7, #12]
    6f76:	68ba      	ldr	r2, [r7, #8]
    6f78:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    6f7a:	68fb      	ldr	r3, [r7, #12]
    6f7c:	681b      	ldr	r3, [r3, #0]
    6f7e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    6f80:	6a3b      	ldr	r3, [r7, #32]
    6f82:	681b      	ldr	r3, [r3, #0]
    6f84:	2202      	movs	r2, #2
    6f86:	4013      	ands	r3, r2
    6f88:	d001      	beq.n	6f8e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    6f8a:	231c      	movs	r3, #28
    6f8c:	e09c      	b.n	70c8 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    6f8e:	6a3b      	ldr	r3, [r7, #32]
    6f90:	681b      	ldr	r3, [r3, #0]
    6f92:	2201      	movs	r2, #1
    6f94:	4013      	ands	r3, r2
    6f96:	d001      	beq.n	6f9c <spi_init+0x34>
		return STATUS_BUSY;
    6f98:	2305      	movs	r3, #5
    6f9a:	e095      	b.n	70c8 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6f9c:	68fb      	ldr	r3, [r7, #12]
    6f9e:	681b      	ldr	r3, [r3, #0]
    6fa0:	0018      	movs	r0, r3
    6fa2:	4b4b      	ldr	r3, [pc, #300]	; (70d0 <spi_init+0x168>)
    6fa4:	4798      	blx	r3
    6fa6:	0003      	movs	r3, r0
    6fa8:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6faa:	69fb      	ldr	r3, [r7, #28]
    6fac:	3302      	adds	r3, #2
    6fae:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6fb0:	69fb      	ldr	r3, [r7, #28]
    6fb2:	3314      	adds	r3, #20
    6fb4:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6fb6:	2201      	movs	r2, #1
    6fb8:	69bb      	ldr	r3, [r7, #24]
    6fba:	409a      	lsls	r2, r3
    6fbc:	0013      	movs	r3, r2
    6fbe:	0019      	movs	r1, r3
    6fc0:	2002      	movs	r0, #2
    6fc2:	4b44      	ldr	r3, [pc, #272]	; (70d4 <spi_init+0x16c>)
    6fc4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6fc6:	2310      	movs	r3, #16
    6fc8:	18fb      	adds	r3, r7, r3
    6fca:	0018      	movs	r0, r3
    6fcc:	4b42      	ldr	r3, [pc, #264]	; (70d8 <spi_init+0x170>)
    6fce:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6fd0:	687b      	ldr	r3, [r7, #4]
    6fd2:	2224      	movs	r2, #36	; 0x24
    6fd4:	5c9a      	ldrb	r2, [r3, r2]
    6fd6:	2310      	movs	r3, #16
    6fd8:	18fb      	adds	r3, r7, r3
    6fda:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6fdc:	697b      	ldr	r3, [r7, #20]
    6fde:	b2db      	uxtb	r3, r3
    6fe0:	2210      	movs	r2, #16
    6fe2:	18ba      	adds	r2, r7, r2
    6fe4:	0011      	movs	r1, r2
    6fe6:	0018      	movs	r0, r3
    6fe8:	4b3c      	ldr	r3, [pc, #240]	; (70dc <spi_init+0x174>)
    6fea:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6fec:	697b      	ldr	r3, [r7, #20]
    6fee:	b2db      	uxtb	r3, r3
    6ff0:	0018      	movs	r0, r3
    6ff2:	4b3b      	ldr	r3, [pc, #236]	; (70e0 <spi_init+0x178>)
    6ff4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6ff6:	687b      	ldr	r3, [r7, #4]
    6ff8:	2224      	movs	r2, #36	; 0x24
    6ffa:	5c9b      	ldrb	r3, [r3, r2]
    6ffc:	2100      	movs	r1, #0
    6ffe:	0018      	movs	r0, r3
    7000:	4b38      	ldr	r3, [pc, #224]	; (70e4 <spi_init+0x17c>)
    7002:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    7004:	687b      	ldr	r3, [r7, #4]
    7006:	781b      	ldrb	r3, [r3, #0]
    7008:	2b01      	cmp	r3, #1
    700a:	d105      	bne.n	7018 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    700c:	6a3b      	ldr	r3, [r7, #32]
    700e:	681b      	ldr	r3, [r3, #0]
    7010:	220c      	movs	r2, #12
    7012:	431a      	orrs	r2, r3
    7014:	6a3b      	ldr	r3, [r7, #32]
    7016:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7018:	2327      	movs	r3, #39	; 0x27
    701a:	18fb      	adds	r3, r7, r3
    701c:	2200      	movs	r2, #0
    701e:	701a      	strb	r2, [r3, #0]
    7020:	e010      	b.n	7044 <spi_init+0xdc>
		module->callback[i]        = NULL;
    7022:	2327      	movs	r3, #39	; 0x27
    7024:	18fb      	adds	r3, r7, r3
    7026:	781b      	ldrb	r3, [r3, #0]
    7028:	68fa      	ldr	r2, [r7, #12]
    702a:	3302      	adds	r3, #2
    702c:	009b      	lsls	r3, r3, #2
    702e:	18d3      	adds	r3, r2, r3
    7030:	3304      	adds	r3, #4
    7032:	2200      	movs	r2, #0
    7034:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7036:	2327      	movs	r3, #39	; 0x27
    7038:	18fb      	adds	r3, r7, r3
    703a:	781a      	ldrb	r2, [r3, #0]
    703c:	2327      	movs	r3, #39	; 0x27
    703e:	18fb      	adds	r3, r7, r3
    7040:	3201      	adds	r2, #1
    7042:	701a      	strb	r2, [r3, #0]
    7044:	2327      	movs	r3, #39	; 0x27
    7046:	18fb      	adds	r3, r7, r3
    7048:	781b      	ldrb	r3, [r3, #0]
    704a:	2b06      	cmp	r3, #6
    704c:	d9e9      	bls.n	7022 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    704e:	68fb      	ldr	r3, [r7, #12]
    7050:	2200      	movs	r2, #0
    7052:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    7054:	68fb      	ldr	r3, [r7, #12]
    7056:	2200      	movs	r2, #0
    7058:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    705a:	68fb      	ldr	r3, [r7, #12]
    705c:	2200      	movs	r2, #0
    705e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    7060:	68fb      	ldr	r3, [r7, #12]
    7062:	2200      	movs	r2, #0
    7064:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    7066:	68fb      	ldr	r3, [r7, #12]
    7068:	2236      	movs	r2, #54	; 0x36
    706a:	2100      	movs	r1, #0
    706c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    706e:	68fb      	ldr	r3, [r7, #12]
    7070:	2237      	movs	r2, #55	; 0x37
    7072:	2100      	movs	r1, #0
    7074:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    7076:	68fb      	ldr	r3, [r7, #12]
    7078:	2238      	movs	r2, #56	; 0x38
    707a:	2100      	movs	r1, #0
    707c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    707e:	68fb      	ldr	r3, [r7, #12]
    7080:	2203      	movs	r2, #3
    7082:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    7084:	68fb      	ldr	r3, [r7, #12]
    7086:	2200      	movs	r2, #0
    7088:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    708a:	68fb      	ldr	r3, [r7, #12]
    708c:	681b      	ldr	r3, [r3, #0]
    708e:	2213      	movs	r2, #19
    7090:	18bc      	adds	r4, r7, r2
    7092:	0018      	movs	r0, r3
    7094:	4b0e      	ldr	r3, [pc, #56]	; (70d0 <spi_init+0x168>)
    7096:	4798      	blx	r3
    7098:	0003      	movs	r3, r0
    709a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    709c:	4a12      	ldr	r2, [pc, #72]	; (70e8 <spi_init+0x180>)
    709e:	2313      	movs	r3, #19
    70a0:	18fb      	adds	r3, r7, r3
    70a2:	781b      	ldrb	r3, [r3, #0]
    70a4:	0011      	movs	r1, r2
    70a6:	0018      	movs	r0, r3
    70a8:	4b10      	ldr	r3, [pc, #64]	; (70ec <spi_init+0x184>)
    70aa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    70ac:	2313      	movs	r3, #19
    70ae:	18fb      	adds	r3, r7, r3
    70b0:	781a      	ldrb	r2, [r3, #0]
    70b2:	4b0f      	ldr	r3, [pc, #60]	; (70f0 <spi_init+0x188>)
    70b4:	0092      	lsls	r2, r2, #2
    70b6:	68f9      	ldr	r1, [r7, #12]
    70b8:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    70ba:	687a      	ldr	r2, [r7, #4]
    70bc:	68fb      	ldr	r3, [r7, #12]
    70be:	0011      	movs	r1, r2
    70c0:	0018      	movs	r0, r3
    70c2:	4b0c      	ldr	r3, [pc, #48]	; (70f4 <spi_init+0x18c>)
    70c4:	4798      	blx	r3
    70c6:	0003      	movs	r3, r0
}
    70c8:	0018      	movs	r0, r3
    70ca:	46bd      	mov	sp, r7
    70cc:	b00b      	add	sp, #44	; 0x2c
    70ce:	bd90      	pop	{r4, r7, pc}
    70d0:	000068f9 	.word	0x000068f9
    70d4:	00006bbd 	.word	0x00006bbd
    70d8:	00006ba5 	.word	0x00006ba5
    70dc:	00008e2d 	.word	0x00008e2d
    70e0:	00008e71 	.word	0x00008e71
    70e4:	000066b1 	.word	0x000066b1
    70e8:	00007341 	.word	0x00007341
    70ec:	0000695d 	.word	0x0000695d
    70f0:	2000043c 	.word	0x2000043c
    70f4:	00006d59 	.word	0x00006d59

000070f8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    70f8:	b580      	push	{r7, lr}
    70fa:	b086      	sub	sp, #24
    70fc:	af00      	add	r7, sp, #0
    70fe:	60f8      	str	r0, [r7, #12]
    7100:	60b9      	str	r1, [r7, #8]
    7102:	1dfb      	adds	r3, r7, #7
    7104:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    7106:	68fb      	ldr	r3, [r7, #12]
    7108:	795b      	ldrb	r3, [r3, #5]
    710a:	2b01      	cmp	r3, #1
    710c:	d001      	beq.n	7112 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    710e:	2315      	movs	r3, #21
    7110:	e05c      	b.n	71cc <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    7112:	68fb      	ldr	r3, [r7, #12]
    7114:	7a1b      	ldrb	r3, [r3, #8]
    7116:	2201      	movs	r2, #1
    7118:	4053      	eors	r3, r2
    711a:	b2db      	uxtb	r3, r3
    711c:	2b00      	cmp	r3, #0
    711e:	d054      	beq.n	71ca <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    7120:	1dfb      	adds	r3, r7, #7
    7122:	781b      	ldrb	r3, [r3, #0]
    7124:	2b00      	cmp	r3, #0
    7126:	d04a      	beq.n	71be <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    7128:	68bb      	ldr	r3, [r7, #8]
    712a:	785b      	ldrb	r3, [r3, #1]
    712c:	2b00      	cmp	r3, #0
    712e:	d03f      	beq.n	71b0 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    7130:	68fb      	ldr	r3, [r7, #12]
    7132:	0018      	movs	r0, r3
    7134:	4b27      	ldr	r3, [pc, #156]	; (71d4 <spi_select_slave+0xdc>)
    7136:	4798      	blx	r3
    7138:	0003      	movs	r3, r0
    713a:	001a      	movs	r2, r3
    713c:	2301      	movs	r3, #1
    713e:	4053      	eors	r3, r2
    7140:	b2db      	uxtb	r3, r3
    7142:	2b00      	cmp	r3, #0
    7144:	d007      	beq.n	7156 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    7146:	68bb      	ldr	r3, [r7, #8]
    7148:	781b      	ldrb	r3, [r3, #0]
    714a:	2101      	movs	r1, #1
    714c:	0018      	movs	r0, r3
    714e:	4b22      	ldr	r3, [pc, #136]	; (71d8 <spi_select_slave+0xe0>)
    7150:	4798      	blx	r3
					return STATUS_BUSY;
    7152:	2305      	movs	r3, #5
    7154:	e03a      	b.n	71cc <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    7156:	68bb      	ldr	r3, [r7, #8]
    7158:	781b      	ldrb	r3, [r3, #0]
    715a:	2100      	movs	r1, #0
    715c:	0018      	movs	r0, r3
    715e:	4b1e      	ldr	r3, [pc, #120]	; (71d8 <spi_select_slave+0xe0>)
    7160:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    7162:	68bb      	ldr	r3, [r7, #8]
    7164:	789b      	ldrb	r3, [r3, #2]
    7166:	b29a      	uxth	r2, r3
    7168:	68fb      	ldr	r3, [r7, #12]
    716a:	0011      	movs	r1, r2
    716c:	0018      	movs	r0, r3
    716e:	4b1b      	ldr	r3, [pc, #108]	; (71dc <spi_select_slave+0xe4>)
    7170:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    7172:	68fb      	ldr	r3, [r7, #12]
    7174:	79db      	ldrb	r3, [r3, #7]
    7176:	2201      	movs	r2, #1
    7178:	4053      	eors	r3, r2
    717a:	b2db      	uxtb	r3, r3
    717c:	2b00      	cmp	r3, #0
    717e:	d024      	beq.n	71ca <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    7180:	46c0      	nop			; (mov r8, r8)
    7182:	68fb      	ldr	r3, [r7, #12]
    7184:	0018      	movs	r0, r3
    7186:	4b16      	ldr	r3, [pc, #88]	; (71e0 <spi_select_slave+0xe8>)
    7188:	4798      	blx	r3
    718a:	0003      	movs	r3, r0
    718c:	001a      	movs	r2, r3
    718e:	2301      	movs	r3, #1
    7190:	4053      	eors	r3, r2
    7192:	b2db      	uxtb	r3, r3
    7194:	2b00      	cmp	r3, #0
    7196:	d1f4      	bne.n	7182 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    7198:	2316      	movs	r3, #22
    719a:	18fb      	adds	r3, r7, r3
    719c:	2200      	movs	r2, #0
    719e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    71a0:	2316      	movs	r3, #22
    71a2:	18fa      	adds	r2, r7, r3
    71a4:	68fb      	ldr	r3, [r7, #12]
    71a6:	0011      	movs	r1, r2
    71a8:	0018      	movs	r0, r3
    71aa:	4b0e      	ldr	r3, [pc, #56]	; (71e4 <spi_select_slave+0xec>)
    71ac:	4798      	blx	r3
    71ae:	e00c      	b.n	71ca <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    71b0:	68bb      	ldr	r3, [r7, #8]
    71b2:	781b      	ldrb	r3, [r3, #0]
    71b4:	2100      	movs	r1, #0
    71b6:	0018      	movs	r0, r3
    71b8:	4b07      	ldr	r3, [pc, #28]	; (71d8 <spi_select_slave+0xe0>)
    71ba:	4798      	blx	r3
    71bc:	e005      	b.n	71ca <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    71be:	68bb      	ldr	r3, [r7, #8]
    71c0:	781b      	ldrb	r3, [r3, #0]
    71c2:	2101      	movs	r1, #1
    71c4:	0018      	movs	r0, r3
    71c6:	4b04      	ldr	r3, [pc, #16]	; (71d8 <spi_select_slave+0xe0>)
    71c8:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    71ca:	2300      	movs	r3, #0
}
    71cc:	0018      	movs	r0, r3
    71ce:	46bd      	mov	sp, r7
    71d0:	b006      	add	sp, #24
    71d2:	bd80      	pop	{r7, pc}
    71d4:	00006c39 	.word	0x00006c39
    71d8:	00006b51 	.word	0x00006b51
    71dc:	00006c89 	.word	0x00006c89
    71e0:	00006c61 	.word	0x00006c61
    71e4:	00006cd1 	.word	0x00006cd1

000071e8 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    71e8:	b580      	push	{r7, lr}
    71ea:	b084      	sub	sp, #16
    71ec:	af00      	add	r7, sp, #0
    71ee:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    71f0:	687b      	ldr	r3, [r7, #4]
    71f2:	681b      	ldr	r3, [r3, #0]
    71f4:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    71f6:	687b      	ldr	r3, [r7, #4]
    71f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    71fa:	781b      	ldrb	r3, [r3, #0]
    71fc:	b2da      	uxtb	r2, r3
    71fe:	230e      	movs	r3, #14
    7200:	18fb      	adds	r3, r7, r3
    7202:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    7204:	687b      	ldr	r3, [r7, #4]
    7206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7208:	1c5a      	adds	r2, r3, #1
    720a:	687b      	ldr	r3, [r7, #4]
    720c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    720e:	687b      	ldr	r3, [r7, #4]
    7210:	799b      	ldrb	r3, [r3, #6]
    7212:	2b01      	cmp	r3, #1
    7214:	d113      	bne.n	723e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    7216:	687b      	ldr	r3, [r7, #4]
    7218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    721a:	781b      	ldrb	r3, [r3, #0]
    721c:	b2db      	uxtb	r3, r3
    721e:	021b      	lsls	r3, r3, #8
    7220:	b21a      	sxth	r2, r3
    7222:	230e      	movs	r3, #14
    7224:	18fb      	adds	r3, r7, r3
    7226:	2100      	movs	r1, #0
    7228:	5e5b      	ldrsh	r3, [r3, r1]
    722a:	4313      	orrs	r3, r2
    722c:	b21a      	sxth	r2, r3
    722e:	230e      	movs	r3, #14
    7230:	18fb      	adds	r3, r7, r3
    7232:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7238:	1c5a      	adds	r2, r3, #1
    723a:	687b      	ldr	r3, [r7, #4]
    723c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    723e:	230e      	movs	r3, #14
    7240:	18fb      	adds	r3, r7, r3
    7242:	881b      	ldrh	r3, [r3, #0]
    7244:	05db      	lsls	r3, r3, #23
    7246:	0dda      	lsrs	r2, r3, #23
    7248:	68bb      	ldr	r3, [r7, #8]
    724a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    7250:	b29b      	uxth	r3, r3
    7252:	3b01      	subs	r3, #1
    7254:	b29a      	uxth	r2, r3
    7256:	687b      	ldr	r3, [r7, #4]
    7258:	869a      	strh	r2, [r3, #52]	; 0x34
}
    725a:	46c0      	nop			; (mov r8, r8)
    725c:	46bd      	mov	sp, r7
    725e:	b004      	add	sp, #16
    7260:	bd80      	pop	{r7, pc}
	...

00007264 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    7264:	b580      	push	{r7, lr}
    7266:	b084      	sub	sp, #16
    7268:	af00      	add	r7, sp, #0
    726a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    726c:	687b      	ldr	r3, [r7, #4]
    726e:	681b      	ldr	r3, [r3, #0]
    7270:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    7272:	4b08      	ldr	r3, [pc, #32]	; (7294 <_spi_write_dummy+0x30>)
    7274:	881b      	ldrh	r3, [r3, #0]
    7276:	001a      	movs	r2, r3
    7278:	68fb      	ldr	r3, [r7, #12]
    727a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    727c:	687b      	ldr	r3, [r7, #4]
    727e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    7280:	b29b      	uxth	r3, r3
    7282:	3b01      	subs	r3, #1
    7284:	b29a      	uxth	r2, r3
    7286:	687b      	ldr	r3, [r7, #4]
    7288:	865a      	strh	r2, [r3, #50]	; 0x32
}
    728a:	46c0      	nop			; (mov r8, r8)
    728c:	46bd      	mov	sp, r7
    728e:	b004      	add	sp, #16
    7290:	bd80      	pop	{r7, pc}
    7292:	46c0      	nop			; (mov r8, r8)
    7294:	20000454 	.word	0x20000454

00007298 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    7298:	b580      	push	{r7, lr}
    729a:	b084      	sub	sp, #16
    729c:	af00      	add	r7, sp, #0
    729e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    72a0:	687b      	ldr	r3, [r7, #4]
    72a2:	681b      	ldr	r3, [r3, #0]
    72a4:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    72a6:	230a      	movs	r3, #10
    72a8:	18fb      	adds	r3, r7, r3
    72aa:	2200      	movs	r2, #0
    72ac:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    72ae:	68fb      	ldr	r3, [r7, #12]
    72b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    72b2:	230a      	movs	r3, #10
    72b4:	18fb      	adds	r3, r7, r3
    72b6:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    72b8:	687b      	ldr	r3, [r7, #4]
    72ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    72bc:	b29b      	uxth	r3, r3
    72be:	3b01      	subs	r3, #1
    72c0:	b29a      	uxth	r2, r3
    72c2:	687b      	ldr	r3, [r7, #4]
    72c4:	865a      	strh	r2, [r3, #50]	; 0x32
}
    72c6:	46c0      	nop			; (mov r8, r8)
    72c8:	46bd      	mov	sp, r7
    72ca:	b004      	add	sp, #16
    72cc:	bd80      	pop	{r7, pc}

000072ce <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    72ce:	b580      	push	{r7, lr}
    72d0:	b084      	sub	sp, #16
    72d2:	af00      	add	r7, sp, #0
    72d4:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    72d6:	687b      	ldr	r3, [r7, #4]
    72d8:	681b      	ldr	r3, [r3, #0]
    72da:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    72dc:	68fb      	ldr	r3, [r7, #12]
    72de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72e0:	b29a      	uxth	r2, r3
    72e2:	230a      	movs	r3, #10
    72e4:	18fb      	adds	r3, r7, r3
    72e6:	05d2      	lsls	r2, r2, #23
    72e8:	0dd2      	lsrs	r2, r2, #23
    72ea:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    72ec:	687b      	ldr	r3, [r7, #4]
    72ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72f0:	220a      	movs	r2, #10
    72f2:	18ba      	adds	r2, r7, r2
    72f4:	8812      	ldrh	r2, [r2, #0]
    72f6:	b2d2      	uxtb	r2, r2
    72f8:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    72fa:	687b      	ldr	r3, [r7, #4]
    72fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72fe:	1c5a      	adds	r2, r3, #1
    7300:	687b      	ldr	r3, [r7, #4]
    7302:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7304:	687b      	ldr	r3, [r7, #4]
    7306:	799b      	ldrb	r3, [r3, #6]
    7308:	2b01      	cmp	r3, #1
    730a:	d10d      	bne.n	7328 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    730c:	687b      	ldr	r3, [r7, #4]
    730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7310:	220a      	movs	r2, #10
    7312:	18ba      	adds	r2, r7, r2
    7314:	8812      	ldrh	r2, [r2, #0]
    7316:	0a12      	lsrs	r2, r2, #8
    7318:	b292      	uxth	r2, r2
    731a:	b2d2      	uxtb	r2, r2
    731c:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    731e:	687b      	ldr	r3, [r7, #4]
    7320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7322:	1c5a      	adds	r2, r3, #1
    7324:	687b      	ldr	r3, [r7, #4]
    7326:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    7328:	687b      	ldr	r3, [r7, #4]
    732a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    732c:	b29b      	uxth	r3, r3
    732e:	3b01      	subs	r3, #1
    7330:	b29a      	uxth	r2, r3
    7332:	687b      	ldr	r3, [r7, #4]
    7334:	861a      	strh	r2, [r3, #48]	; 0x30
}
    7336:	46c0      	nop			; (mov r8, r8)
    7338:	46bd      	mov	sp, r7
    733a:	b004      	add	sp, #16
    733c:	bd80      	pop	{r7, pc}
	...

00007340 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    7340:	b580      	push	{r7, lr}
    7342:	b086      	sub	sp, #24
    7344:	af00      	add	r7, sp, #0
    7346:	0002      	movs	r2, r0
    7348:	1dfb      	adds	r3, r7, #7
    734a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    734c:	1dfb      	adds	r3, r7, #7
    734e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    7350:	4b96      	ldr	r3, [pc, #600]	; (75ac <_spi_interrupt_handler+0x26c>)
    7352:	0092      	lsls	r2, r2, #2
    7354:	58d3      	ldr	r3, [r2, r3]
    7356:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7358:	697b      	ldr	r3, [r7, #20]
    735a:	681b      	ldr	r3, [r3, #0]
    735c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    735e:	697b      	ldr	r3, [r7, #20]
    7360:	2237      	movs	r2, #55	; 0x37
    7362:	5c9a      	ldrb	r2, [r3, r2]
    7364:	697b      	ldr	r3, [r7, #20]
    7366:	2136      	movs	r1, #54	; 0x36
    7368:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    736a:	230f      	movs	r3, #15
    736c:	18fb      	adds	r3, r7, r3
    736e:	400a      	ands	r2, r1
    7370:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    7372:	693b      	ldr	r3, [r7, #16]
    7374:	7e1b      	ldrb	r3, [r3, #24]
    7376:	b2da      	uxtb	r2, r3
    7378:	230c      	movs	r3, #12
    737a:	18fb      	adds	r3, r7, r3
    737c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    737e:	693b      	ldr	r3, [r7, #16]
    7380:	7d9b      	ldrb	r3, [r3, #22]
    7382:	b2db      	uxtb	r3, r3
    7384:	b29a      	uxth	r2, r3
    7386:	230c      	movs	r3, #12
    7388:	18fb      	adds	r3, r7, r3
    738a:	210c      	movs	r1, #12
    738c:	1879      	adds	r1, r7, r1
    738e:	8809      	ldrh	r1, [r1, #0]
    7390:	400a      	ands	r2, r1
    7392:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    7394:	230c      	movs	r3, #12
    7396:	18fb      	adds	r3, r7, r3
    7398:	881b      	ldrh	r3, [r3, #0]
    739a:	2201      	movs	r2, #1
    739c:	4013      	ands	r3, r2
    739e:	d038      	beq.n	7412 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    73a0:	697b      	ldr	r3, [r7, #20]
    73a2:	795b      	ldrb	r3, [r3, #5]
    73a4:	2b01      	cmp	r3, #1
    73a6:	d110      	bne.n	73ca <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    73a8:	697b      	ldr	r3, [r7, #20]
    73aa:	7a5b      	ldrb	r3, [r3, #9]
    73ac:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    73ae:	2b00      	cmp	r3, #0
    73b0:	d10b      	bne.n	73ca <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    73b2:	697b      	ldr	r3, [r7, #20]
    73b4:	0018      	movs	r0, r3
    73b6:	4b7e      	ldr	r3, [pc, #504]	; (75b0 <_spi_interrupt_handler+0x270>)
    73b8:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    73ba:	697b      	ldr	r3, [r7, #20]
    73bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    73be:	b29b      	uxth	r3, r3
    73c0:	2b00      	cmp	r3, #0
    73c2:	d102      	bne.n	73ca <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    73c4:	693b      	ldr	r3, [r7, #16]
    73c6:	2201      	movs	r2, #1
    73c8:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    73ca:	697b      	ldr	r3, [r7, #20]
    73cc:	795b      	ldrb	r3, [r3, #5]
		if (0
    73ce:	2b01      	cmp	r3, #1
    73d0:	d11f      	bne.n	7412 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    73d2:	697b      	ldr	r3, [r7, #20]
    73d4:	7a5b      	ldrb	r3, [r3, #9]
    73d6:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    73d8:	2b00      	cmp	r3, #0
    73da:	d01a      	beq.n	7412 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    73dc:	697b      	ldr	r3, [r7, #20]
    73de:	0018      	movs	r0, r3
    73e0:	4b74      	ldr	r3, [pc, #464]	; (75b4 <_spi_interrupt_handler+0x274>)
    73e2:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    73e4:	697b      	ldr	r3, [r7, #20]
    73e6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    73e8:	b29b      	uxth	r3, r3
    73ea:	2b00      	cmp	r3, #0
    73ec:	d111      	bne.n	7412 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    73ee:	693b      	ldr	r3, [r7, #16]
    73f0:	2201      	movs	r2, #1
    73f2:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    73f4:	697b      	ldr	r3, [r7, #20]
    73f6:	7a5b      	ldrb	r3, [r3, #9]
    73f8:	b2db      	uxtb	r3, r3
    73fa:	2b01      	cmp	r3, #1
    73fc:	d109      	bne.n	7412 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    73fe:	697b      	ldr	r3, [r7, #20]
    7400:	79db      	ldrb	r3, [r3, #7]
    7402:	2201      	movs	r2, #1
    7404:	4053      	eors	r3, r2
    7406:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    7408:	2b00      	cmp	r3, #0
    740a:	d002      	beq.n	7412 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    740c:	693b      	ldr	r3, [r7, #16]
    740e:	2202      	movs	r2, #2
    7410:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    7412:	230c      	movs	r3, #12
    7414:	18fb      	adds	r3, r7, r3
    7416:	881b      	ldrh	r3, [r3, #0]
    7418:	2204      	movs	r2, #4
    741a:	4013      	ands	r3, r2
    741c:	d100      	bne.n	7420 <_spi_interrupt_handler+0xe0>
    741e:	e07e      	b.n	751e <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7420:	693b      	ldr	r3, [r7, #16]
    7422:	8b5b      	ldrh	r3, [r3, #26]
    7424:	b29b      	uxth	r3, r3
    7426:	001a      	movs	r2, r3
    7428:	2304      	movs	r3, #4
    742a:	4013      	ands	r3, r2
    742c:	d022      	beq.n	7474 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    742e:	697b      	ldr	r3, [r7, #20]
    7430:	7a5b      	ldrb	r3, [r3, #9]
    7432:	b2db      	uxtb	r3, r3
    7434:	2b01      	cmp	r3, #1
    7436:	d014      	beq.n	7462 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    7438:	697b      	ldr	r3, [r7, #20]
    743a:	2238      	movs	r2, #56	; 0x38
    743c:	211e      	movs	r1, #30
    743e:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    7440:	697b      	ldr	r3, [r7, #20]
    7442:	2203      	movs	r2, #3
    7444:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    7446:	693b      	ldr	r3, [r7, #16]
    7448:	2205      	movs	r2, #5
    744a:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    744c:	230f      	movs	r3, #15
    744e:	18fb      	adds	r3, r7, r3
    7450:	781b      	ldrb	r3, [r3, #0]
    7452:	2208      	movs	r2, #8
    7454:	4013      	ands	r3, r2
    7456:	d004      	beq.n	7462 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    7458:	697b      	ldr	r3, [r7, #20]
    745a:	699b      	ldr	r3, [r3, #24]
    745c:	697a      	ldr	r2, [r7, #20]
    745e:	0010      	movs	r0, r2
    7460:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    7462:	693b      	ldr	r3, [r7, #16]
    7464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7466:	230a      	movs	r3, #10
    7468:	18fb      	adds	r3, r7, r3
    746a:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    746c:	693b      	ldr	r3, [r7, #16]
    746e:	2204      	movs	r2, #4
    7470:	835a      	strh	r2, [r3, #26]
    7472:	e054      	b.n	751e <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    7474:	697b      	ldr	r3, [r7, #20]
    7476:	7a5b      	ldrb	r3, [r3, #9]
    7478:	b2db      	uxtb	r3, r3
    747a:	2b01      	cmp	r3, #1
    747c:	d11e      	bne.n	74bc <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    747e:	697b      	ldr	r3, [r7, #20]
    7480:	0018      	movs	r0, r3
    7482:	4b4d      	ldr	r3, [pc, #308]	; (75b8 <_spi_interrupt_handler+0x278>)
    7484:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    7486:	697b      	ldr	r3, [r7, #20]
    7488:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    748a:	b29b      	uxth	r3, r3
    748c:	2b00      	cmp	r3, #0
    748e:	d146      	bne.n	751e <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    7490:	693b      	ldr	r3, [r7, #16]
    7492:	2204      	movs	r2, #4
    7494:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    7496:	697b      	ldr	r3, [r7, #20]
    7498:	2238      	movs	r2, #56	; 0x38
    749a:	2100      	movs	r1, #0
    749c:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    749e:	697b      	ldr	r3, [r7, #20]
    74a0:	2203      	movs	r2, #3
    74a2:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    74a4:	230f      	movs	r3, #15
    74a6:	18fb      	adds	r3, r7, r3
    74a8:	781b      	ldrb	r3, [r3, #0]
    74aa:	2201      	movs	r2, #1
    74ac:	4013      	ands	r3, r2
    74ae:	d036      	beq.n	751e <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    74b0:	697b      	ldr	r3, [r7, #20]
    74b2:	68db      	ldr	r3, [r3, #12]
    74b4:	697a      	ldr	r2, [r7, #20]
    74b6:	0010      	movs	r0, r2
    74b8:	4798      	blx	r3
    74ba:	e030      	b.n	751e <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    74bc:	697b      	ldr	r3, [r7, #20]
    74be:	0018      	movs	r0, r3
    74c0:	4b3e      	ldr	r3, [pc, #248]	; (75bc <_spi_interrupt_handler+0x27c>)
    74c2:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    74c4:	697b      	ldr	r3, [r7, #20]
    74c6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    74c8:	b29b      	uxth	r3, r3
    74ca:	2b00      	cmp	r3, #0
    74cc:	d127      	bne.n	751e <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    74ce:	697b      	ldr	r3, [r7, #20]
    74d0:	2238      	movs	r2, #56	; 0x38
    74d2:	2100      	movs	r1, #0
    74d4:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    74d6:	693b      	ldr	r3, [r7, #16]
    74d8:	2204      	movs	r2, #4
    74da:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    74dc:	697b      	ldr	r3, [r7, #20]
    74de:	7a5b      	ldrb	r3, [r3, #9]
    74e0:	b2db      	uxtb	r3, r3
    74e2:	2b02      	cmp	r3, #2
    74e4:	d10b      	bne.n	74fe <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    74e6:	230f      	movs	r3, #15
    74e8:	18fb      	adds	r3, r7, r3
    74ea:	781b      	ldrb	r3, [r3, #0]
    74ec:	2204      	movs	r2, #4
    74ee:	4013      	ands	r3, r2
    74f0:	d015      	beq.n	751e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    74f2:	697b      	ldr	r3, [r7, #20]
    74f4:	695b      	ldr	r3, [r3, #20]
    74f6:	697a      	ldr	r2, [r7, #20]
    74f8:	0010      	movs	r0, r2
    74fa:	4798      	blx	r3
    74fc:	e00f      	b.n	751e <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    74fe:	697b      	ldr	r3, [r7, #20]
    7500:	7a5b      	ldrb	r3, [r3, #9]
    7502:	b2db      	uxtb	r3, r3
    7504:	2b00      	cmp	r3, #0
    7506:	d10a      	bne.n	751e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    7508:	230f      	movs	r3, #15
    750a:	18fb      	adds	r3, r7, r3
    750c:	781b      	ldrb	r3, [r3, #0]
    750e:	2202      	movs	r2, #2
    7510:	4013      	ands	r3, r2
    7512:	d004      	beq.n	751e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    7514:	697b      	ldr	r3, [r7, #20]
    7516:	691b      	ldr	r3, [r3, #16]
    7518:	697a      	ldr	r2, [r7, #20]
    751a:	0010      	movs	r0, r2
    751c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    751e:	230c      	movs	r3, #12
    7520:	18fb      	adds	r3, r7, r3
    7522:	881b      	ldrh	r3, [r3, #0]
    7524:	2202      	movs	r2, #2
    7526:	4013      	ands	r3, r2
    7528:	d024      	beq.n	7574 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    752a:	697b      	ldr	r3, [r7, #20]
    752c:	795b      	ldrb	r3, [r3, #5]
    752e:	2b01      	cmp	r3, #1
    7530:	d120      	bne.n	7574 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    7532:	697b      	ldr	r3, [r7, #20]
    7534:	7a5b      	ldrb	r3, [r3, #9]
    7536:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    7538:	2b01      	cmp	r3, #1
    753a:	d11b      	bne.n	7574 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    753c:	697b      	ldr	r3, [r7, #20]
    753e:	79db      	ldrb	r3, [r3, #7]
    7540:	2201      	movs	r2, #1
    7542:	4053      	eors	r3, r2
    7544:	b2db      	uxtb	r3, r3
    7546:	2b00      	cmp	r3, #0
    7548:	d014      	beq.n	7574 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    754a:	693b      	ldr	r3, [r7, #16]
    754c:	2202      	movs	r2, #2
    754e:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    7550:	697b      	ldr	r3, [r7, #20]
    7552:	2203      	movs	r2, #3
    7554:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    7556:	697b      	ldr	r3, [r7, #20]
    7558:	2238      	movs	r2, #56	; 0x38
    755a:	2100      	movs	r1, #0
    755c:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    755e:	230f      	movs	r3, #15
    7560:	18fb      	adds	r3, r7, r3
    7562:	781b      	ldrb	r3, [r3, #0]
    7564:	2201      	movs	r2, #1
    7566:	4013      	ands	r3, r2
    7568:	d004      	beq.n	7574 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    756a:	697b      	ldr	r3, [r7, #20]
    756c:	68db      	ldr	r3, [r3, #12]
    756e:	697a      	ldr	r2, [r7, #20]
    7570:	0010      	movs	r0, r2
    7572:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    7574:	230c      	movs	r3, #12
    7576:	18fb      	adds	r3, r7, r3
    7578:	881b      	ldrh	r3, [r3, #0]
    757a:	2280      	movs	r2, #128	; 0x80
    757c:	4013      	ands	r3, r2
    757e:	d010      	beq.n	75a2 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    7580:	693b      	ldr	r3, [r7, #16]
    7582:	2280      	movs	r2, #128	; 0x80
    7584:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    7586:	693b      	ldr	r3, [r7, #16]
    7588:	2280      	movs	r2, #128	; 0x80
    758a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    758c:	230f      	movs	r3, #15
    758e:	18fb      	adds	r3, r7, r3
    7590:	781b      	ldrb	r3, [r3, #0]
    7592:	2240      	movs	r2, #64	; 0x40
    7594:	4013      	ands	r3, r2
    7596:	d004      	beq.n	75a2 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    7598:	697b      	ldr	r3, [r7, #20]
    759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    759c:	697a      	ldr	r2, [r7, #20]
    759e:	0010      	movs	r0, r2
    75a0:	4798      	blx	r3
		}
	}
#  endif
}
    75a2:	46c0      	nop			; (mov r8, r8)
    75a4:	46bd      	mov	sp, r7
    75a6:	b006      	add	sp, #24
    75a8:	bd80      	pop	{r7, pc}
    75aa:	46c0      	nop			; (mov r8, r8)
    75ac:	2000043c 	.word	0x2000043c
    75b0:	00007265 	.word	0x00007265
    75b4:	000071e9 	.word	0x000071e9
    75b8:	00007299 	.word	0x00007299
    75bc:	000072cf 	.word	0x000072cf

000075c0 <system_gclk_chan_get_config_defaults>:
{
    75c0:	b580      	push	{r7, lr}
    75c2:	b082      	sub	sp, #8
    75c4:	af00      	add	r7, sp, #0
    75c6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    75c8:	687b      	ldr	r3, [r7, #4]
    75ca:	2200      	movs	r2, #0
    75cc:	701a      	strb	r2, [r3, #0]
}
    75ce:	46c0      	nop			; (mov r8, r8)
    75d0:	46bd      	mov	sp, r7
    75d2:	b002      	add	sp, #8
    75d4:	bd80      	pop	{r7, pc}
	...

000075d8 <system_apb_clock_set_mask>:
{
    75d8:	b580      	push	{r7, lr}
    75da:	b082      	sub	sp, #8
    75dc:	af00      	add	r7, sp, #0
    75de:	0002      	movs	r2, r0
    75e0:	6039      	str	r1, [r7, #0]
    75e2:	1dfb      	adds	r3, r7, #7
    75e4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    75e6:	1dfb      	adds	r3, r7, #7
    75e8:	781b      	ldrb	r3, [r3, #0]
    75ea:	2b01      	cmp	r3, #1
    75ec:	d00a      	beq.n	7604 <system_apb_clock_set_mask+0x2c>
    75ee:	2b02      	cmp	r3, #2
    75f0:	d00f      	beq.n	7612 <system_apb_clock_set_mask+0x3a>
    75f2:	2b00      	cmp	r3, #0
    75f4:	d114      	bne.n	7620 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    75f6:	4b0e      	ldr	r3, [pc, #56]	; (7630 <system_apb_clock_set_mask+0x58>)
    75f8:	4a0d      	ldr	r2, [pc, #52]	; (7630 <system_apb_clock_set_mask+0x58>)
    75fa:	6991      	ldr	r1, [r2, #24]
    75fc:	683a      	ldr	r2, [r7, #0]
    75fe:	430a      	orrs	r2, r1
    7600:	619a      	str	r2, [r3, #24]
			break;
    7602:	e00f      	b.n	7624 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    7604:	4b0a      	ldr	r3, [pc, #40]	; (7630 <system_apb_clock_set_mask+0x58>)
    7606:	4a0a      	ldr	r2, [pc, #40]	; (7630 <system_apb_clock_set_mask+0x58>)
    7608:	69d1      	ldr	r1, [r2, #28]
    760a:	683a      	ldr	r2, [r7, #0]
    760c:	430a      	orrs	r2, r1
    760e:	61da      	str	r2, [r3, #28]
			break;
    7610:	e008      	b.n	7624 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    7612:	4b07      	ldr	r3, [pc, #28]	; (7630 <system_apb_clock_set_mask+0x58>)
    7614:	4a06      	ldr	r2, [pc, #24]	; (7630 <system_apb_clock_set_mask+0x58>)
    7616:	6a11      	ldr	r1, [r2, #32]
    7618:	683a      	ldr	r2, [r7, #0]
    761a:	430a      	orrs	r2, r1
    761c:	621a      	str	r2, [r3, #32]
			break;
    761e:	e001      	b.n	7624 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    7620:	2317      	movs	r3, #23
    7622:	e000      	b.n	7626 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    7624:	2300      	movs	r3, #0
}
    7626:	0018      	movs	r0, r3
    7628:	46bd      	mov	sp, r7
    762a:	b002      	add	sp, #8
    762c:	bd80      	pop	{r7, pc}
    762e:	46c0      	nop			; (mov r8, r8)
    7630:	40000400 	.word	0x40000400

00007634 <system_pinmux_get_config_defaults>:
{
    7634:	b580      	push	{r7, lr}
    7636:	b082      	sub	sp, #8
    7638:	af00      	add	r7, sp, #0
    763a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    763c:	687b      	ldr	r3, [r7, #4]
    763e:	2280      	movs	r2, #128	; 0x80
    7640:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7642:	687b      	ldr	r3, [r7, #4]
    7644:	2200      	movs	r2, #0
    7646:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7648:	687b      	ldr	r3, [r7, #4]
    764a:	2201      	movs	r2, #1
    764c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    764e:	687b      	ldr	r3, [r7, #4]
    7650:	2200      	movs	r2, #0
    7652:	70da      	strb	r2, [r3, #3]
}
    7654:	46c0      	nop			; (mov r8, r8)
    7656:	46bd      	mov	sp, r7
    7658:	b002      	add	sp, #8
    765a:	bd80      	pop	{r7, pc}

0000765c <system_is_debugger_present>:
{
    765c:	b580      	push	{r7, lr}
    765e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    7660:	4b05      	ldr	r3, [pc, #20]	; (7678 <system_is_debugger_present+0x1c>)
    7662:	789b      	ldrb	r3, [r3, #2]
    7664:	b2db      	uxtb	r3, r3
    7666:	001a      	movs	r2, r3
    7668:	2302      	movs	r3, #2
    766a:	4013      	ands	r3, r2
    766c:	1e5a      	subs	r2, r3, #1
    766e:	4193      	sbcs	r3, r2
    7670:	b2db      	uxtb	r3, r3
}
    7672:	0018      	movs	r0, r3
    7674:	46bd      	mov	sp, r7
    7676:	bd80      	pop	{r7, pc}
    7678:	41002000 	.word	0x41002000

0000767c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    767c:	b580      	push	{r7, lr}
    767e:	b084      	sub	sp, #16
    7680:	af00      	add	r7, sp, #0
    7682:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	681b      	ldr	r3, [r3, #0]
    7688:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    768a:	68fb      	ldr	r3, [r7, #12]
    768c:	69db      	ldr	r3, [r3, #28]
    768e:	1e5a      	subs	r2, r3, #1
    7690:	4193      	sbcs	r3, r2
    7692:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    7694:	0018      	movs	r0, r3
    7696:	46bd      	mov	sp, r7
    7698:	b004      	add	sp, #16
    769a:	bd80      	pop	{r7, pc}

0000769c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    769c:	b580      	push	{r7, lr}
    769e:	b082      	sub	sp, #8
    76a0:	af00      	add	r7, sp, #0
    76a2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    76a4:	46c0      	nop			; (mov r8, r8)
    76a6:	687b      	ldr	r3, [r7, #4]
    76a8:	0018      	movs	r0, r3
    76aa:	4b04      	ldr	r3, [pc, #16]	; (76bc <_usart_wait_for_sync+0x20>)
    76ac:	4798      	blx	r3
    76ae:	1e03      	subs	r3, r0, #0
    76b0:	d1f9      	bne.n	76a6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    76b2:	46c0      	nop			; (mov r8, r8)
    76b4:	46bd      	mov	sp, r7
    76b6:	b002      	add	sp, #8
    76b8:	bd80      	pop	{r7, pc}
    76ba:	46c0      	nop			; (mov r8, r8)
    76bc:	0000767d 	.word	0x0000767d

000076c0 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    76c0:	b5b0      	push	{r4, r5, r7, lr}
    76c2:	b08c      	sub	sp, #48	; 0x30
    76c4:	af02      	add	r7, sp, #8
    76c6:	6078      	str	r0, [r7, #4]
    76c8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    76ca:	687b      	ldr	r3, [r7, #4]
    76cc:	681b      	ldr	r3, [r3, #0]
    76ce:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    76d0:	687b      	ldr	r3, [r7, #4]
    76d2:	681b      	ldr	r3, [r3, #0]
    76d4:	0018      	movs	r0, r3
    76d6:	4bab      	ldr	r3, [pc, #684]	; (7984 <_usart_set_config+0x2c4>)
    76d8:	4798      	blx	r3
    76da:	0003      	movs	r3, r0
    76dc:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    76de:	697b      	ldr	r3, [r7, #20]
    76e0:	3314      	adds	r3, #20
    76e2:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    76e4:	2300      	movs	r3, #0
    76e6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    76e8:	2300      	movs	r3, #0
    76ea:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    76ec:	230a      	movs	r3, #10
    76ee:	18fb      	adds	r3, r7, r3
    76f0:	2200      	movs	r2, #0
    76f2:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    76f4:	231f      	movs	r3, #31
    76f6:	18fb      	adds	r3, r7, r3
    76f8:	2200      	movs	r2, #0
    76fa:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    76fc:	231e      	movs	r3, #30
    76fe:	18fb      	adds	r3, r7, r3
    7700:	2210      	movs	r2, #16
    7702:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    7704:	683b      	ldr	r3, [r7, #0]
    7706:	8a1b      	ldrh	r3, [r3, #16]
    7708:	2280      	movs	r2, #128	; 0x80
    770a:	01d2      	lsls	r2, r2, #7
    770c:	4293      	cmp	r3, r2
    770e:	d01c      	beq.n	774a <_usart_set_config+0x8a>
    7710:	2280      	movs	r2, #128	; 0x80
    7712:	01d2      	lsls	r2, r2, #7
    7714:	4293      	cmp	r3, r2
    7716:	dc06      	bgt.n	7726 <_usart_set_config+0x66>
    7718:	2b00      	cmp	r3, #0
    771a:	d00d      	beq.n	7738 <_usart_set_config+0x78>
    771c:	2280      	movs	r2, #128	; 0x80
    771e:	0192      	lsls	r2, r2, #6
    7720:	4293      	cmp	r3, r2
    7722:	d024      	beq.n	776e <_usart_set_config+0xae>
    7724:	e035      	b.n	7792 <_usart_set_config+0xd2>
    7726:	22c0      	movs	r2, #192	; 0xc0
    7728:	01d2      	lsls	r2, r2, #7
    772a:	4293      	cmp	r3, r2
    772c:	d028      	beq.n	7780 <_usart_set_config+0xc0>
    772e:	2280      	movs	r2, #128	; 0x80
    7730:	0212      	lsls	r2, r2, #8
    7732:	4293      	cmp	r3, r2
    7734:	d012      	beq.n	775c <_usart_set_config+0x9c>
    7736:	e02c      	b.n	7792 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7738:	231f      	movs	r3, #31
    773a:	18fb      	adds	r3, r7, r3
    773c:	2200      	movs	r2, #0
    773e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7740:	231e      	movs	r3, #30
    7742:	18fb      	adds	r3, r7, r3
    7744:	2210      	movs	r2, #16
    7746:	701a      	strb	r2, [r3, #0]
			break;
    7748:	e023      	b.n	7792 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    774a:	231f      	movs	r3, #31
    774c:	18fb      	adds	r3, r7, r3
    774e:	2200      	movs	r2, #0
    7750:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7752:	231e      	movs	r3, #30
    7754:	18fb      	adds	r3, r7, r3
    7756:	2208      	movs	r2, #8
    7758:	701a      	strb	r2, [r3, #0]
			break;
    775a:	e01a      	b.n	7792 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    775c:	231f      	movs	r3, #31
    775e:	18fb      	adds	r3, r7, r3
    7760:	2200      	movs	r2, #0
    7762:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    7764:	231e      	movs	r3, #30
    7766:	18fb      	adds	r3, r7, r3
    7768:	2203      	movs	r2, #3
    776a:	701a      	strb	r2, [r3, #0]
			break;
    776c:	e011      	b.n	7792 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    776e:	231f      	movs	r3, #31
    7770:	18fb      	adds	r3, r7, r3
    7772:	2201      	movs	r2, #1
    7774:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7776:	231e      	movs	r3, #30
    7778:	18fb      	adds	r3, r7, r3
    777a:	2210      	movs	r2, #16
    777c:	701a      	strb	r2, [r3, #0]
			break;
    777e:	e008      	b.n	7792 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7780:	231f      	movs	r3, #31
    7782:	18fb      	adds	r3, r7, r3
    7784:	2201      	movs	r2, #1
    7786:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7788:	231e      	movs	r3, #30
    778a:	18fb      	adds	r3, r7, r3
    778c:	2208      	movs	r2, #8
    778e:	701a      	strb	r2, [r3, #0]
			break;
    7790:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    7792:	683b      	ldr	r3, [r7, #0]
    7794:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    7796:	683b      	ldr	r3, [r7, #0]
    7798:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    779a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    779c:	683b      	ldr	r3, [r7, #0]
    779e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    77a0:	4313      	orrs	r3, r2
		config->sample_rate |
    77a2:	683a      	ldr	r2, [r7, #0]
    77a4:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    77a6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    77a8:	683a      	ldr	r2, [r7, #0]
    77aa:	7e12      	ldrb	r2, [r2, #24]
    77ac:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    77ae:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    77b0:	683a      	ldr	r2, [r7, #0]
    77b2:	2126      	movs	r1, #38	; 0x26
    77b4:	5c52      	ldrb	r2, [r2, r1]
    77b6:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    77b8:	4313      	orrs	r3, r2
    77ba:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    77bc:	231d      	movs	r3, #29
    77be:	18fb      	adds	r3, r7, r3
    77c0:	2200      	movs	r2, #0
    77c2:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    77c4:	683b      	ldr	r3, [r7, #0]
    77c6:	685b      	ldr	r3, [r3, #4]
    77c8:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    77ca:	68fb      	ldr	r3, [r7, #12]
    77cc:	2b00      	cmp	r3, #0
    77ce:	d01e      	beq.n	780e <_usart_set_config+0x14e>
    77d0:	2280      	movs	r2, #128	; 0x80
    77d2:	0552      	lsls	r2, r2, #21
    77d4:	4293      	cmp	r3, r2
    77d6:	d14f      	bne.n	7878 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    77d8:	683b      	ldr	r3, [r7, #0]
    77da:	2227      	movs	r2, #39	; 0x27
    77dc:	5c9b      	ldrb	r3, [r3, r2]
    77de:	2201      	movs	r2, #1
    77e0:	4053      	eors	r3, r2
    77e2:	b2db      	uxtb	r3, r3
    77e4:	2b00      	cmp	r3, #0
    77e6:	d046      	beq.n	7876 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    77e8:	683b      	ldr	r3, [r7, #0]
    77ea:	6a1d      	ldr	r5, [r3, #32]
    77ec:	693b      	ldr	r3, [r7, #16]
    77ee:	b2db      	uxtb	r3, r3
    77f0:	0018      	movs	r0, r3
    77f2:	4b65      	ldr	r3, [pc, #404]	; (7988 <_usart_set_config+0x2c8>)
    77f4:	4798      	blx	r3
    77f6:	0001      	movs	r1, r0
    77f8:	231d      	movs	r3, #29
    77fa:	18fc      	adds	r4, r7, r3
    77fc:	230a      	movs	r3, #10
    77fe:	18fb      	adds	r3, r7, r3
    7800:	001a      	movs	r2, r3
    7802:	0028      	movs	r0, r5
    7804:	4b61      	ldr	r3, [pc, #388]	; (798c <_usart_set_config+0x2cc>)
    7806:	4798      	blx	r3
    7808:	0003      	movs	r3, r0
    780a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    780c:	e033      	b.n	7876 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    780e:	683b      	ldr	r3, [r7, #0]
    7810:	2227      	movs	r2, #39	; 0x27
    7812:	5c9b      	ldrb	r3, [r3, r2]
    7814:	2b00      	cmp	r3, #0
    7816:	d014      	beq.n	7842 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    7818:	683b      	ldr	r3, [r7, #0]
    781a:	6a18      	ldr	r0, [r3, #32]
    781c:	683b      	ldr	r3, [r7, #0]
    781e:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    7820:	231d      	movs	r3, #29
    7822:	18fc      	adds	r4, r7, r3
    7824:	231f      	movs	r3, #31
    7826:	18fb      	adds	r3, r7, r3
    7828:	781d      	ldrb	r5, [r3, #0]
    782a:	230a      	movs	r3, #10
    782c:	18fa      	adds	r2, r7, r3
    782e:	231e      	movs	r3, #30
    7830:	18fb      	adds	r3, r7, r3
    7832:	781b      	ldrb	r3, [r3, #0]
    7834:	9300      	str	r3, [sp, #0]
    7836:	002b      	movs	r3, r5
    7838:	4d55      	ldr	r5, [pc, #340]	; (7990 <_usart_set_config+0x2d0>)
    783a:	47a8      	blx	r5
    783c:	0003      	movs	r3, r0
    783e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    7840:	e01a      	b.n	7878 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    7842:	683b      	ldr	r3, [r7, #0]
    7844:	6a1d      	ldr	r5, [r3, #32]
    7846:	693b      	ldr	r3, [r7, #16]
    7848:	b2db      	uxtb	r3, r3
    784a:	0018      	movs	r0, r3
    784c:	4b4e      	ldr	r3, [pc, #312]	; (7988 <_usart_set_config+0x2c8>)
    784e:	4798      	blx	r3
				status_code =
    7850:	231d      	movs	r3, #29
    7852:	18fc      	adds	r4, r7, r3
    7854:	231f      	movs	r3, #31
    7856:	18fb      	adds	r3, r7, r3
    7858:	7819      	ldrb	r1, [r3, #0]
    785a:	230a      	movs	r3, #10
    785c:	18fa      	adds	r2, r7, r3
    785e:	231e      	movs	r3, #30
    7860:	18fb      	adds	r3, r7, r3
    7862:	781b      	ldrb	r3, [r3, #0]
    7864:	9300      	str	r3, [sp, #0]
    7866:	000b      	movs	r3, r1
    7868:	0001      	movs	r1, r0
    786a:	0028      	movs	r0, r5
    786c:	4d48      	ldr	r5, [pc, #288]	; (7990 <_usart_set_config+0x2d0>)
    786e:	47a8      	blx	r5
    7870:	0003      	movs	r3, r0
    7872:	7023      	strb	r3, [r4, #0]
			break;
    7874:	e000      	b.n	7878 <_usart_set_config+0x1b8>
			break;
    7876:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    7878:	231d      	movs	r3, #29
    787a:	18fb      	adds	r3, r7, r3
    787c:	781b      	ldrb	r3, [r3, #0]
    787e:	2b00      	cmp	r3, #0
    7880:	d003      	beq.n	788a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    7882:	231d      	movs	r3, #29
    7884:	18fb      	adds	r3, r7, r3
    7886:	781b      	ldrb	r3, [r3, #0]
    7888:	e077      	b.n	797a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    788a:	683b      	ldr	r3, [r7, #0]
    788c:	7e5b      	ldrb	r3, [r3, #25]
    788e:	2b00      	cmp	r3, #0
    7890:	d003      	beq.n	789a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    7892:	683b      	ldr	r3, [r7, #0]
    7894:	7e9a      	ldrb	r2, [r3, #26]
    7896:	69bb      	ldr	r3, [r7, #24]
    7898:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    789a:	687b      	ldr	r3, [r7, #4]
    789c:	0018      	movs	r0, r3
    789e:	4b3d      	ldr	r3, [pc, #244]	; (7994 <_usart_set_config+0x2d4>)
    78a0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    78a2:	230a      	movs	r3, #10
    78a4:	18fb      	adds	r3, r7, r3
    78a6:	881a      	ldrh	r2, [r3, #0]
    78a8:	69bb      	ldr	r3, [r7, #24]
    78aa:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    78ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    78ae:	68fb      	ldr	r3, [r7, #12]
    78b0:	4313      	orrs	r3, r2
    78b2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    78b4:	683b      	ldr	r3, [r7, #0]
    78b6:	2227      	movs	r2, #39	; 0x27
    78b8:	5c9b      	ldrb	r3, [r3, r2]
    78ba:	2201      	movs	r2, #1
    78bc:	4053      	eors	r3, r2
    78be:	b2db      	uxtb	r3, r3
    78c0:	2b00      	cmp	r3, #0
    78c2:	d003      	beq.n	78cc <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    78c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    78c6:	2204      	movs	r2, #4
    78c8:	4313      	orrs	r3, r2
    78ca:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    78cc:	683b      	ldr	r3, [r7, #0]
    78ce:	7e5b      	ldrb	r3, [r3, #25]
    78d0:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    78d2:	683b      	ldr	r3, [r7, #0]
    78d4:	7f1b      	ldrb	r3, [r3, #28]
    78d6:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    78d8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    78da:	683b      	ldr	r3, [r7, #0]
    78dc:	7f5b      	ldrb	r3, [r3, #29]
    78de:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    78e0:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    78e2:	683b      	ldr	r3, [r7, #0]
    78e4:	2124      	movs	r1, #36	; 0x24
    78e6:	5c5b      	ldrb	r3, [r3, r1]
    78e8:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    78ea:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    78ec:	683b      	ldr	r3, [r7, #0]
    78ee:	2125      	movs	r1, #37	; 0x25
    78f0:	5c5b      	ldrb	r3, [r3, r1]
    78f2:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    78f4:	4313      	orrs	r3, r2
	ctrlb =  
    78f6:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    78f8:	683b      	ldr	r3, [r7, #0]
    78fa:	7a9b      	ldrb	r3, [r3, #10]
    78fc:	001a      	movs	r2, r3
    78fe:	6a3b      	ldr	r3, [r7, #32]
    7900:	4313      	orrs	r3, r2
    7902:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    7904:	683b      	ldr	r3, [r7, #0]
    7906:	7adb      	ldrb	r3, [r3, #11]
    7908:	001a      	movs	r2, r3
    790a:	6a3b      	ldr	r3, [r7, #32]
    790c:	4313      	orrs	r3, r2
    790e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    7910:	683b      	ldr	r3, [r7, #0]
    7912:	891b      	ldrh	r3, [r3, #8]
    7914:	2bff      	cmp	r3, #255	; 0xff
    7916:	d00b      	beq.n	7930 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    7918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    791a:	2280      	movs	r2, #128	; 0x80
    791c:	0452      	lsls	r2, r2, #17
    791e:	4313      	orrs	r3, r2
    7920:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    7922:	683b      	ldr	r3, [r7, #0]
    7924:	891b      	ldrh	r3, [r3, #8]
    7926:	001a      	movs	r2, r3
    7928:	6a3b      	ldr	r3, [r7, #32]
    792a:	4313      	orrs	r3, r2
    792c:	623b      	str	r3, [r7, #32]
    792e:	e008      	b.n	7942 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    7930:	683b      	ldr	r3, [r7, #0]
    7932:	7edb      	ldrb	r3, [r3, #27]
    7934:	2b00      	cmp	r3, #0
    7936:	d004      	beq.n	7942 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    7938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    793a:	2280      	movs	r2, #128	; 0x80
    793c:	04d2      	lsls	r2, r2, #19
    793e:	4313      	orrs	r3, r2
    7940:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    7942:	683b      	ldr	r3, [r7, #0]
    7944:	222c      	movs	r2, #44	; 0x2c
    7946:	5c9b      	ldrb	r3, [r3, r2]
    7948:	2b00      	cmp	r3, #0
    794a:	d103      	bne.n	7954 <_usart_set_config+0x294>
    794c:	4b12      	ldr	r3, [pc, #72]	; (7998 <_usart_set_config+0x2d8>)
    794e:	4798      	blx	r3
    7950:	1e03      	subs	r3, r0, #0
    7952:	d003      	beq.n	795c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    7954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7956:	2280      	movs	r2, #128	; 0x80
    7958:	4313      	orrs	r3, r2
    795a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    795c:	687b      	ldr	r3, [r7, #4]
    795e:	0018      	movs	r0, r3
    7960:	4b0c      	ldr	r3, [pc, #48]	; (7994 <_usart_set_config+0x2d4>)
    7962:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    7964:	69bb      	ldr	r3, [r7, #24]
    7966:	6a3a      	ldr	r2, [r7, #32]
    7968:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    796a:	687b      	ldr	r3, [r7, #4]
    796c:	0018      	movs	r0, r3
    796e:	4b09      	ldr	r3, [pc, #36]	; (7994 <_usart_set_config+0x2d4>)
    7970:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    7972:	69bb      	ldr	r3, [r7, #24]
    7974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7976:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    7978:	2300      	movs	r3, #0
}
    797a:	0018      	movs	r0, r3
    797c:	46bd      	mov	sp, r7
    797e:	b00a      	add	sp, #40	; 0x28
    7980:	bdb0      	pop	{r4, r5, r7, pc}
    7982:	46c0      	nop			; (mov r8, r8)
    7984:	000068f9 	.word	0x000068f9
    7988:	00008f51 	.word	0x00008f51
    798c:	00006473 	.word	0x00006473
    7990:	000064f1 	.word	0x000064f1
    7994:	0000769d 	.word	0x0000769d
    7998:	0000765d 	.word	0x0000765d

0000799c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    799c:	b590      	push	{r4, r7, lr}
    799e:	b093      	sub	sp, #76	; 0x4c
    79a0:	af00      	add	r7, sp, #0
    79a2:	60f8      	str	r0, [r7, #12]
    79a4:	60b9      	str	r1, [r7, #8]
    79a6:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    79a8:	233b      	movs	r3, #59	; 0x3b
    79aa:	18fb      	adds	r3, r7, r3
    79ac:	2200      	movs	r2, #0
    79ae:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    79b0:	68fb      	ldr	r3, [r7, #12]
    79b2:	68ba      	ldr	r2, [r7, #8]
    79b4:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    79b6:	68fb      	ldr	r3, [r7, #12]
    79b8:	681b      	ldr	r3, [r3, #0]
    79ba:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    79bc:	68fb      	ldr	r3, [r7, #12]
    79be:	681b      	ldr	r3, [r3, #0]
    79c0:	0018      	movs	r0, r3
    79c2:	4b86      	ldr	r3, [pc, #536]	; (7bdc <usart_init+0x240>)
    79c4:	4798      	blx	r3
    79c6:	0003      	movs	r3, r0
    79c8:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    79ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    79cc:	3302      	adds	r3, #2
    79ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    79d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    79d2:	3314      	adds	r3, #20
    79d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    79d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    79d8:	681b      	ldr	r3, [r3, #0]
    79da:	2201      	movs	r2, #1
    79dc:	4013      	ands	r3, r2
    79de:	d001      	beq.n	79e4 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    79e0:	2305      	movs	r3, #5
    79e2:	e0f6      	b.n	7bd2 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    79e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    79e6:	681b      	ldr	r3, [r3, #0]
    79e8:	2202      	movs	r2, #2
    79ea:	4013      	ands	r3, r2
    79ec:	d001      	beq.n	79f2 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    79ee:	231c      	movs	r3, #28
    79f0:	e0ef      	b.n	7bd2 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    79f2:	2201      	movs	r2, #1
    79f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    79f6:	409a      	lsls	r2, r3
    79f8:	0013      	movs	r3, r2
    79fa:	0019      	movs	r1, r3
    79fc:	2002      	movs	r0, #2
    79fe:	4b78      	ldr	r3, [pc, #480]	; (7be0 <usart_init+0x244>)
    7a00:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7a02:	2324      	movs	r3, #36	; 0x24
    7a04:	18fb      	adds	r3, r7, r3
    7a06:	0018      	movs	r0, r3
    7a08:	4b76      	ldr	r3, [pc, #472]	; (7be4 <usart_init+0x248>)
    7a0a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    7a0c:	687b      	ldr	r3, [r7, #4]
    7a0e:	222d      	movs	r2, #45	; 0x2d
    7a10:	5c9a      	ldrb	r2, [r3, r2]
    7a12:	2324      	movs	r3, #36	; 0x24
    7a14:	18fb      	adds	r3, r7, r3
    7a16:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a1a:	b2db      	uxtb	r3, r3
    7a1c:	2224      	movs	r2, #36	; 0x24
    7a1e:	18ba      	adds	r2, r7, r2
    7a20:	0011      	movs	r1, r2
    7a22:	0018      	movs	r0, r3
    7a24:	4b70      	ldr	r3, [pc, #448]	; (7be8 <usart_init+0x24c>)
    7a26:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a2a:	b2db      	uxtb	r3, r3
    7a2c:	0018      	movs	r0, r3
    7a2e:	4b6f      	ldr	r3, [pc, #444]	; (7bec <usart_init+0x250>)
    7a30:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7a32:	687b      	ldr	r3, [r7, #4]
    7a34:	222d      	movs	r2, #45	; 0x2d
    7a36:	5c9b      	ldrb	r3, [r3, r2]
    7a38:	2100      	movs	r1, #0
    7a3a:	0018      	movs	r0, r3
    7a3c:	4b6c      	ldr	r3, [pc, #432]	; (7bf0 <usart_init+0x254>)
    7a3e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    7a40:	687b      	ldr	r3, [r7, #4]
    7a42:	7ada      	ldrb	r2, [r3, #11]
    7a44:	68fb      	ldr	r3, [r7, #12]
    7a46:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    7a48:	687b      	ldr	r3, [r7, #4]
    7a4a:	2224      	movs	r2, #36	; 0x24
    7a4c:	5c9a      	ldrb	r2, [r3, r2]
    7a4e:	68fb      	ldr	r3, [r7, #12]
    7a50:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    7a52:	687b      	ldr	r3, [r7, #4]
    7a54:	2225      	movs	r2, #37	; 0x25
    7a56:	5c9a      	ldrb	r2, [r3, r2]
    7a58:	68fb      	ldr	r3, [r7, #12]
    7a5a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    7a5c:	687b      	ldr	r3, [r7, #4]
    7a5e:	7eda      	ldrb	r2, [r3, #27]
    7a60:	68fb      	ldr	r3, [r7, #12]
    7a62:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    7a64:	687b      	ldr	r3, [r7, #4]
    7a66:	7f1a      	ldrb	r2, [r3, #28]
    7a68:	68fb      	ldr	r3, [r7, #12]
    7a6a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    7a6c:	233b      	movs	r3, #59	; 0x3b
    7a6e:	18fc      	adds	r4, r7, r3
    7a70:	687a      	ldr	r2, [r7, #4]
    7a72:	68fb      	ldr	r3, [r7, #12]
    7a74:	0011      	movs	r1, r2
    7a76:	0018      	movs	r0, r3
    7a78:	4b5e      	ldr	r3, [pc, #376]	; (7bf4 <usart_init+0x258>)
    7a7a:	4798      	blx	r3
    7a7c:	0003      	movs	r3, r0
    7a7e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    7a80:	233b      	movs	r3, #59	; 0x3b
    7a82:	18fb      	adds	r3, r7, r3
    7a84:	781b      	ldrb	r3, [r3, #0]
    7a86:	2b00      	cmp	r3, #0
    7a88:	d003      	beq.n	7a92 <usart_init+0xf6>
		return status_code;
    7a8a:	233b      	movs	r3, #59	; 0x3b
    7a8c:	18fb      	adds	r3, r7, r3
    7a8e:	781b      	ldrb	r3, [r3, #0]
    7a90:	e09f      	b.n	7bd2 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    7a92:	2320      	movs	r3, #32
    7a94:	18fb      	adds	r3, r7, r3
    7a96:	0018      	movs	r0, r3
    7a98:	4b57      	ldr	r3, [pc, #348]	; (7bf8 <usart_init+0x25c>)
    7a9a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7a9c:	2320      	movs	r3, #32
    7a9e:	18fb      	adds	r3, r7, r3
    7aa0:	2200      	movs	r2, #0
    7aa2:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7aa4:	2320      	movs	r3, #32
    7aa6:	18fb      	adds	r3, r7, r3
    7aa8:	2200      	movs	r2, #0
    7aaa:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    7aac:	687b      	ldr	r3, [r7, #4]
    7aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    7ab0:	2310      	movs	r3, #16
    7ab2:	18fb      	adds	r3, r7, r3
    7ab4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    7ab6:	687b      	ldr	r3, [r7, #4]
    7ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    7aba:	2310      	movs	r3, #16
    7abc:	18fb      	adds	r3, r7, r3
    7abe:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    7ac0:	687b      	ldr	r3, [r7, #4]
    7ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    7ac4:	2310      	movs	r3, #16
    7ac6:	18fb      	adds	r3, r7, r3
    7ac8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    7aca:	687b      	ldr	r3, [r7, #4]
    7acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    7ace:	2310      	movs	r3, #16
    7ad0:	18fb      	adds	r3, r7, r3
    7ad2:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    7ad4:	2347      	movs	r3, #71	; 0x47
    7ad6:	18fb      	adds	r3, r7, r3
    7ad8:	2200      	movs	r2, #0
    7ada:	701a      	strb	r2, [r3, #0]
    7adc:	e02c      	b.n	7b38 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7ade:	2347      	movs	r3, #71	; 0x47
    7ae0:	18fb      	adds	r3, r7, r3
    7ae2:	781a      	ldrb	r2, [r3, #0]
    7ae4:	2310      	movs	r3, #16
    7ae6:	18fb      	adds	r3, r7, r3
    7ae8:	0092      	lsls	r2, r2, #2
    7aea:	58d3      	ldr	r3, [r2, r3]
    7aec:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    7aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7af0:	2b00      	cmp	r3, #0
    7af2:	d109      	bne.n	7b08 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7af4:	2347      	movs	r3, #71	; 0x47
    7af6:	18fb      	adds	r3, r7, r3
    7af8:	781a      	ldrb	r2, [r3, #0]
    7afa:	68bb      	ldr	r3, [r7, #8]
    7afc:	0011      	movs	r1, r2
    7afe:	0018      	movs	r0, r3
    7b00:	4b3e      	ldr	r3, [pc, #248]	; (7bfc <usart_init+0x260>)
    7b02:	4798      	blx	r3
    7b04:	0003      	movs	r3, r0
    7b06:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    7b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7b0a:	3301      	adds	r3, #1
    7b0c:	d00d      	beq.n	7b2a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7b10:	b2da      	uxtb	r2, r3
    7b12:	2320      	movs	r3, #32
    7b14:	18fb      	adds	r3, r7, r3
    7b16:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7b1a:	0c1b      	lsrs	r3, r3, #16
    7b1c:	b2db      	uxtb	r3, r3
    7b1e:	2220      	movs	r2, #32
    7b20:	18ba      	adds	r2, r7, r2
    7b22:	0011      	movs	r1, r2
    7b24:	0018      	movs	r0, r3
    7b26:	4b36      	ldr	r3, [pc, #216]	; (7c00 <usart_init+0x264>)
    7b28:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    7b2a:	2347      	movs	r3, #71	; 0x47
    7b2c:	18fb      	adds	r3, r7, r3
    7b2e:	781a      	ldrb	r2, [r3, #0]
    7b30:	2347      	movs	r3, #71	; 0x47
    7b32:	18fb      	adds	r3, r7, r3
    7b34:	3201      	adds	r2, #1
    7b36:	701a      	strb	r2, [r3, #0]
    7b38:	2347      	movs	r3, #71	; 0x47
    7b3a:	18fb      	adds	r3, r7, r3
    7b3c:	781b      	ldrb	r3, [r3, #0]
    7b3e:	2b03      	cmp	r3, #3
    7b40:	d9cd      	bls.n	7ade <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    7b42:	2300      	movs	r3, #0
    7b44:	63fb      	str	r3, [r7, #60]	; 0x3c
    7b46:	e00a      	b.n	7b5e <usart_init+0x1c2>
		module->callback[i]            = NULL;
    7b48:	68fa      	ldr	r2, [r7, #12]
    7b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b4c:	3302      	adds	r3, #2
    7b4e:	009b      	lsls	r3, r3, #2
    7b50:	18d3      	adds	r3, r2, r3
    7b52:	3304      	adds	r3, #4
    7b54:	2200      	movs	r2, #0
    7b56:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    7b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b5a:	3301      	adds	r3, #1
    7b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    7b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b60:	2b05      	cmp	r3, #5
    7b62:	d9f1      	bls.n	7b48 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    7b64:	68fb      	ldr	r3, [r7, #12]
    7b66:	2200      	movs	r2, #0
    7b68:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    7b6a:	68fb      	ldr	r3, [r7, #12]
    7b6c:	2200      	movs	r2, #0
    7b6e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    7b70:	68fb      	ldr	r3, [r7, #12]
    7b72:	2200      	movs	r2, #0
    7b74:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    7b76:	68fb      	ldr	r3, [r7, #12]
    7b78:	2200      	movs	r2, #0
    7b7a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    7b7c:	68fb      	ldr	r3, [r7, #12]
    7b7e:	2230      	movs	r2, #48	; 0x30
    7b80:	2100      	movs	r1, #0
    7b82:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    7b84:	68fb      	ldr	r3, [r7, #12]
    7b86:	2231      	movs	r2, #49	; 0x31
    7b88:	2100      	movs	r1, #0
    7b8a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    7b8c:	68fb      	ldr	r3, [r7, #12]
    7b8e:	2232      	movs	r2, #50	; 0x32
    7b90:	2100      	movs	r1, #0
    7b92:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    7b94:	68fb      	ldr	r3, [r7, #12]
    7b96:	2233      	movs	r2, #51	; 0x33
    7b98:	2100      	movs	r1, #0
    7b9a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    7b9c:	68fb      	ldr	r3, [r7, #12]
    7b9e:	681b      	ldr	r3, [r3, #0]
    7ba0:	2227      	movs	r2, #39	; 0x27
    7ba2:	18bc      	adds	r4, r7, r2
    7ba4:	0018      	movs	r0, r3
    7ba6:	4b0d      	ldr	r3, [pc, #52]	; (7bdc <usart_init+0x240>)
    7ba8:	4798      	blx	r3
    7baa:	0003      	movs	r3, r0
    7bac:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    7bae:	4a15      	ldr	r2, [pc, #84]	; (7c04 <usart_init+0x268>)
    7bb0:	2327      	movs	r3, #39	; 0x27
    7bb2:	18fb      	adds	r3, r7, r3
    7bb4:	781b      	ldrb	r3, [r3, #0]
    7bb6:	0011      	movs	r1, r2
    7bb8:	0018      	movs	r0, r3
    7bba:	4b13      	ldr	r3, [pc, #76]	; (7c08 <usart_init+0x26c>)
    7bbc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7bbe:	2327      	movs	r3, #39	; 0x27
    7bc0:	18fb      	adds	r3, r7, r3
    7bc2:	781a      	ldrb	r2, [r3, #0]
    7bc4:	4b11      	ldr	r3, [pc, #68]	; (7c0c <usart_init+0x270>)
    7bc6:	0092      	lsls	r2, r2, #2
    7bc8:	68f9      	ldr	r1, [r7, #12]
    7bca:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    7bcc:	233b      	movs	r3, #59	; 0x3b
    7bce:	18fb      	adds	r3, r7, r3
    7bd0:	781b      	ldrb	r3, [r3, #0]
}
    7bd2:	0018      	movs	r0, r3
    7bd4:	46bd      	mov	sp, r7
    7bd6:	b013      	add	sp, #76	; 0x4c
    7bd8:	bd90      	pop	{r4, r7, pc}
    7bda:	46c0      	nop			; (mov r8, r8)
    7bdc:	000068f9 	.word	0x000068f9
    7be0:	000075d9 	.word	0x000075d9
    7be4:	000075c1 	.word	0x000075c1
    7be8:	00008e2d 	.word	0x00008e2d
    7bec:	00008e71 	.word	0x00008e71
    7bf0:	000066b1 	.word	0x000066b1
    7bf4:	000076c1 	.word	0x000076c1
    7bf8:	00007635 	.word	0x00007635
    7bfc:	0000673d 	.word	0x0000673d
    7c00:	00009119 	.word	0x00009119
    7c04:	00007eb1 	.word	0x00007eb1
    7c08:	0000695d 	.word	0x0000695d
    7c0c:	2000043c 	.word	0x2000043c

00007c10 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    7c10:	b580      	push	{r7, lr}
    7c12:	b084      	sub	sp, #16
    7c14:	af00      	add	r7, sp, #0
    7c16:	6078      	str	r0, [r7, #4]
    7c18:	000a      	movs	r2, r1
    7c1a:	1cbb      	adds	r3, r7, #2
    7c1c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c1e:	687b      	ldr	r3, [r7, #4]
    7c20:	681b      	ldr	r3, [r3, #0]
    7c22:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    7c24:	687b      	ldr	r3, [r7, #4]
    7c26:	79db      	ldrb	r3, [r3, #7]
    7c28:	2201      	movs	r2, #1
    7c2a:	4053      	eors	r3, r2
    7c2c:	b2db      	uxtb	r3, r3
    7c2e:	2b00      	cmp	r3, #0
    7c30:	d001      	beq.n	7c36 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    7c32:	231c      	movs	r3, #28
    7c34:	e017      	b.n	7c66 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    7c36:	687b      	ldr	r3, [r7, #4]
    7c38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    7c3a:	b29b      	uxth	r3, r3
    7c3c:	2b00      	cmp	r3, #0
    7c3e:	d001      	beq.n	7c44 <usart_write_wait+0x34>
		return STATUS_BUSY;
    7c40:	2305      	movs	r3, #5
    7c42:	e010      	b.n	7c66 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7c44:	687b      	ldr	r3, [r7, #4]
    7c46:	0018      	movs	r0, r3
    7c48:	4b09      	ldr	r3, [pc, #36]	; (7c70 <usart_write_wait+0x60>)
    7c4a:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    7c4c:	68fb      	ldr	r3, [r7, #12]
    7c4e:	1cba      	adds	r2, r7, #2
    7c50:	8812      	ldrh	r2, [r2, #0]
    7c52:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    7c54:	46c0      	nop			; (mov r8, r8)
    7c56:	68fb      	ldr	r3, [r7, #12]
    7c58:	7e1b      	ldrb	r3, [r3, #24]
    7c5a:	b2db      	uxtb	r3, r3
    7c5c:	001a      	movs	r2, r3
    7c5e:	2302      	movs	r3, #2
    7c60:	4013      	ands	r3, r2
    7c62:	d0f8      	beq.n	7c56 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    7c64:	2300      	movs	r3, #0
}
    7c66:	0018      	movs	r0, r3
    7c68:	46bd      	mov	sp, r7
    7c6a:	b004      	add	sp, #16
    7c6c:	bd80      	pop	{r7, pc}
    7c6e:	46c0      	nop			; (mov r8, r8)
    7c70:	0000769d 	.word	0x0000769d

00007c74 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    7c74:	b580      	push	{r7, lr}
    7c76:	b084      	sub	sp, #16
    7c78:	af00      	add	r7, sp, #0
    7c7a:	6078      	str	r0, [r7, #4]
    7c7c:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c7e:	687b      	ldr	r3, [r7, #4]
    7c80:	681b      	ldr	r3, [r3, #0]
    7c82:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    7c84:	687b      	ldr	r3, [r7, #4]
    7c86:	799b      	ldrb	r3, [r3, #6]
    7c88:	2201      	movs	r2, #1
    7c8a:	4053      	eors	r3, r2
    7c8c:	b2db      	uxtb	r3, r3
    7c8e:	2b00      	cmp	r3, #0
    7c90:	d001      	beq.n	7c96 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    7c92:	231c      	movs	r3, #28
    7c94:	e05e      	b.n	7d54 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    7c96:	687b      	ldr	r3, [r7, #4]
    7c98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7c9a:	b29b      	uxth	r3, r3
    7c9c:	2b00      	cmp	r3, #0
    7c9e:	d001      	beq.n	7ca4 <usart_read_wait+0x30>
		return STATUS_BUSY;
    7ca0:	2305      	movs	r3, #5
    7ca2:	e057      	b.n	7d54 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    7ca4:	68fb      	ldr	r3, [r7, #12]
    7ca6:	7e1b      	ldrb	r3, [r3, #24]
    7ca8:	b2db      	uxtb	r3, r3
    7caa:	001a      	movs	r2, r3
    7cac:	2304      	movs	r3, #4
    7cae:	4013      	ands	r3, r2
    7cb0:	d101      	bne.n	7cb6 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    7cb2:	2305      	movs	r3, #5
    7cb4:	e04e      	b.n	7d54 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7cb6:	687b      	ldr	r3, [r7, #4]
    7cb8:	0018      	movs	r0, r3
    7cba:	4b28      	ldr	r3, [pc, #160]	; (7d5c <usart_read_wait+0xe8>)
    7cbc:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7cbe:	68fb      	ldr	r3, [r7, #12]
    7cc0:	8b5b      	ldrh	r3, [r3, #26]
    7cc2:	b29b      	uxth	r3, r3
    7cc4:	b2da      	uxtb	r2, r3
    7cc6:	230b      	movs	r3, #11
    7cc8:	18fb      	adds	r3, r7, r3
    7cca:	213f      	movs	r1, #63	; 0x3f
    7ccc:	400a      	ands	r2, r1
    7cce:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    7cd0:	230b      	movs	r3, #11
    7cd2:	18fb      	adds	r3, r7, r3
    7cd4:	781b      	ldrb	r3, [r3, #0]
    7cd6:	2b00      	cmp	r3, #0
    7cd8:	d036      	beq.n	7d48 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    7cda:	230b      	movs	r3, #11
    7cdc:	18fb      	adds	r3, r7, r3
    7cde:	781b      	ldrb	r3, [r3, #0]
    7ce0:	2202      	movs	r2, #2
    7ce2:	4013      	ands	r3, r2
    7ce4:	d004      	beq.n	7cf0 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7ce6:	68fb      	ldr	r3, [r7, #12]
    7ce8:	2202      	movs	r2, #2
    7cea:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    7cec:	231a      	movs	r3, #26
    7cee:	e031      	b.n	7d54 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7cf0:	230b      	movs	r3, #11
    7cf2:	18fb      	adds	r3, r7, r3
    7cf4:	781b      	ldrb	r3, [r3, #0]
    7cf6:	2204      	movs	r2, #4
    7cf8:	4013      	ands	r3, r2
    7cfa:	d004      	beq.n	7d06 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7cfc:	68fb      	ldr	r3, [r7, #12]
    7cfe:	2204      	movs	r2, #4
    7d00:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    7d02:	231e      	movs	r3, #30
    7d04:	e026      	b.n	7d54 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7d06:	230b      	movs	r3, #11
    7d08:	18fb      	adds	r3, r7, r3
    7d0a:	781b      	ldrb	r3, [r3, #0]
    7d0c:	2201      	movs	r2, #1
    7d0e:	4013      	ands	r3, r2
    7d10:	d004      	beq.n	7d1c <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7d12:	68fb      	ldr	r3, [r7, #12]
    7d14:	2201      	movs	r2, #1
    7d16:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    7d18:	2313      	movs	r3, #19
    7d1a:	e01b      	b.n	7d54 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    7d1c:	230b      	movs	r3, #11
    7d1e:	18fb      	adds	r3, r7, r3
    7d20:	781b      	ldrb	r3, [r3, #0]
    7d22:	2210      	movs	r2, #16
    7d24:	4013      	ands	r3, r2
    7d26:	d004      	beq.n	7d32 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7d28:	68fb      	ldr	r3, [r7, #12]
    7d2a:	2210      	movs	r2, #16
    7d2c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    7d2e:	2342      	movs	r3, #66	; 0x42
    7d30:	e010      	b.n	7d54 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    7d32:	230b      	movs	r3, #11
    7d34:	18fb      	adds	r3, r7, r3
    7d36:	781b      	ldrb	r3, [r3, #0]
    7d38:	2220      	movs	r2, #32
    7d3a:	4013      	ands	r3, r2
    7d3c:	d004      	beq.n	7d48 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7d3e:	68fb      	ldr	r3, [r7, #12]
    7d40:	2220      	movs	r2, #32
    7d42:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    7d44:	2341      	movs	r3, #65	; 0x41
    7d46:	e005      	b.n	7d54 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    7d48:	68fb      	ldr	r3, [r7, #12]
    7d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    7d4c:	b29a      	uxth	r2, r3
    7d4e:	683b      	ldr	r3, [r7, #0]
    7d50:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    7d52:	2300      	movs	r3, #0
}
    7d54:	0018      	movs	r0, r3
    7d56:	46bd      	mov	sp, r7
    7d58:	b004      	add	sp, #16
    7d5a:	bd80      	pop	{r7, pc}
    7d5c:	0000769d 	.word	0x0000769d

00007d60 <system_interrupt_enter_critical_section>:
{
    7d60:	b580      	push	{r7, lr}
    7d62:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    7d64:	4b02      	ldr	r3, [pc, #8]	; (7d70 <system_interrupt_enter_critical_section+0x10>)
    7d66:	4798      	blx	r3
}
    7d68:	46c0      	nop			; (mov r8, r8)
    7d6a:	46bd      	mov	sp, r7
    7d6c:	bd80      	pop	{r7, pc}
    7d6e:	46c0      	nop			; (mov r8, r8)
    7d70:	00005b19 	.word	0x00005b19

00007d74 <system_interrupt_leave_critical_section>:
{
    7d74:	b580      	push	{r7, lr}
    7d76:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    7d78:	4b02      	ldr	r3, [pc, #8]	; (7d84 <system_interrupt_leave_critical_section+0x10>)
    7d7a:	4798      	blx	r3
}
    7d7c:	46c0      	nop			; (mov r8, r8)
    7d7e:	46bd      	mov	sp, r7
    7d80:	bd80      	pop	{r7, pc}
    7d82:	46c0      	nop			; (mov r8, r8)
    7d84:	00005b6d 	.word	0x00005b6d

00007d88 <usart_is_syncing>:
{
    7d88:	b580      	push	{r7, lr}
    7d8a:	b084      	sub	sp, #16
    7d8c:	af00      	add	r7, sp, #0
    7d8e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7d90:	687b      	ldr	r3, [r7, #4]
    7d92:	681b      	ldr	r3, [r3, #0]
    7d94:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    7d96:	68fb      	ldr	r3, [r7, #12]
    7d98:	69db      	ldr	r3, [r3, #28]
    7d9a:	1e5a      	subs	r2, r3, #1
    7d9c:	4193      	sbcs	r3, r2
    7d9e:	b2db      	uxtb	r3, r3
}
    7da0:	0018      	movs	r0, r3
    7da2:	46bd      	mov	sp, r7
    7da4:	b004      	add	sp, #16
    7da6:	bd80      	pop	{r7, pc}

00007da8 <_usart_wait_for_sync>:
{
    7da8:	b580      	push	{r7, lr}
    7daa:	b082      	sub	sp, #8
    7dac:	af00      	add	r7, sp, #0
    7dae:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    7db0:	46c0      	nop			; (mov r8, r8)
    7db2:	687b      	ldr	r3, [r7, #4]
    7db4:	0018      	movs	r0, r3
    7db6:	4b04      	ldr	r3, [pc, #16]	; (7dc8 <_usart_wait_for_sync+0x20>)
    7db8:	4798      	blx	r3
    7dba:	1e03      	subs	r3, r0, #0
    7dbc:	d1f9      	bne.n	7db2 <_usart_wait_for_sync+0xa>
}
    7dbe:	46c0      	nop			; (mov r8, r8)
    7dc0:	46bd      	mov	sp, r7
    7dc2:	b002      	add	sp, #8
    7dc4:	bd80      	pop	{r7, pc}
    7dc6:	46c0      	nop			; (mov r8, r8)
    7dc8:	00007d89 	.word	0x00007d89

00007dcc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    7dcc:	b580      	push	{r7, lr}
    7dce:	b086      	sub	sp, #24
    7dd0:	af00      	add	r7, sp, #0
    7dd2:	60f8      	str	r0, [r7, #12]
    7dd4:	60b9      	str	r1, [r7, #8]
    7dd6:	1dbb      	adds	r3, r7, #6
    7dd8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7dda:	68fb      	ldr	r3, [r7, #12]
    7ddc:	681b      	ldr	r3, [r3, #0]
    7dde:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    7de0:	4b16      	ldr	r3, [pc, #88]	; (7e3c <_usart_read_buffer+0x70>)
    7de2:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    7de4:	68fb      	ldr	r3, [r7, #12]
    7de6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7de8:	b29b      	uxth	r3, r3
    7dea:	2b00      	cmp	r3, #0
    7dec:	d003      	beq.n	7df6 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    7dee:	4b14      	ldr	r3, [pc, #80]	; (7e40 <_usart_read_buffer+0x74>)
    7df0:	4798      	blx	r3
		return STATUS_BUSY;
    7df2:	2305      	movs	r3, #5
    7df4:	e01e      	b.n	7e34 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    7df6:	68fb      	ldr	r3, [r7, #12]
    7df8:	1dba      	adds	r2, r7, #6
    7dfa:	8812      	ldrh	r2, [r2, #0]
    7dfc:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    7dfe:	4b10      	ldr	r3, [pc, #64]	; (7e40 <_usart_read_buffer+0x74>)
    7e00:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    7e02:	68fb      	ldr	r3, [r7, #12]
    7e04:	68ba      	ldr	r2, [r7, #8]
    7e06:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    7e08:	68fb      	ldr	r3, [r7, #12]
    7e0a:	2232      	movs	r2, #50	; 0x32
    7e0c:	2105      	movs	r1, #5
    7e0e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    7e10:	697b      	ldr	r3, [r7, #20]
    7e12:	2204      	movs	r2, #4
    7e14:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    7e16:	68fb      	ldr	r3, [r7, #12]
    7e18:	7a1b      	ldrb	r3, [r3, #8]
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	d002      	beq.n	7e24 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    7e1e:	697b      	ldr	r3, [r7, #20]
    7e20:	2220      	movs	r2, #32
    7e22:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    7e24:	68fb      	ldr	r3, [r7, #12]
    7e26:	7a5b      	ldrb	r3, [r3, #9]
    7e28:	2b00      	cmp	r3, #0
    7e2a:	d002      	beq.n	7e32 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    7e2c:	697b      	ldr	r3, [r7, #20]
    7e2e:	2208      	movs	r2, #8
    7e30:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    7e32:	2300      	movs	r3, #0
}
    7e34:	0018      	movs	r0, r3
    7e36:	46bd      	mov	sp, r7
    7e38:	b006      	add	sp, #24
    7e3a:	bd80      	pop	{r7, pc}
    7e3c:	00007d61 	.word	0x00007d61
    7e40:	00007d75 	.word	0x00007d75

00007e44 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    7e44:	b580      	push	{r7, lr}
    7e46:	b084      	sub	sp, #16
    7e48:	af00      	add	r7, sp, #0
    7e4a:	60f8      	str	r0, [r7, #12]
    7e4c:	60b9      	str	r1, [r7, #8]
    7e4e:	1dfb      	adds	r3, r7, #7
    7e50:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    7e52:	1dfb      	adds	r3, r7, #7
    7e54:	781b      	ldrb	r3, [r3, #0]
    7e56:	68fa      	ldr	r2, [r7, #12]
    7e58:	3302      	adds	r3, #2
    7e5a:	009b      	lsls	r3, r3, #2
    7e5c:	18d3      	adds	r3, r2, r3
    7e5e:	3304      	adds	r3, #4
    7e60:	68ba      	ldr	r2, [r7, #8]
    7e62:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    7e64:	68fb      	ldr	r3, [r7, #12]
    7e66:	2230      	movs	r2, #48	; 0x30
    7e68:	5c9b      	ldrb	r3, [r3, r2]
    7e6a:	b25a      	sxtb	r2, r3
    7e6c:	1dfb      	adds	r3, r7, #7
    7e6e:	781b      	ldrb	r3, [r3, #0]
    7e70:	2101      	movs	r1, #1
    7e72:	4099      	lsls	r1, r3
    7e74:	000b      	movs	r3, r1
    7e76:	b25b      	sxtb	r3, r3
    7e78:	4313      	orrs	r3, r2
    7e7a:	b25b      	sxtb	r3, r3
    7e7c:	b2d9      	uxtb	r1, r3
    7e7e:	68fb      	ldr	r3, [r7, #12]
    7e80:	2230      	movs	r2, #48	; 0x30
    7e82:	5499      	strb	r1, [r3, r2]
}
    7e84:	46c0      	nop			; (mov r8, r8)
    7e86:	46bd      	mov	sp, r7
    7e88:	b004      	add	sp, #16
    7e8a:	bd80      	pop	{r7, pc}

00007e8c <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    7e8c:	b580      	push	{r7, lr}
    7e8e:	b082      	sub	sp, #8
    7e90:	af00      	add	r7, sp, #0
    7e92:	6078      	str	r0, [r7, #4]
    7e94:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    7e96:	6839      	ldr	r1, [r7, #0]
    7e98:	687b      	ldr	r3, [r7, #4]
    7e9a:	2201      	movs	r2, #1
    7e9c:	0018      	movs	r0, r3
    7e9e:	4b03      	ldr	r3, [pc, #12]	; (7eac <usart_read_job+0x20>)
    7ea0:	4798      	blx	r3
    7ea2:	0003      	movs	r3, r0
}
    7ea4:	0018      	movs	r0, r3
    7ea6:	46bd      	mov	sp, r7
    7ea8:	b002      	add	sp, #8
    7eaa:	bd80      	pop	{r7, pc}
    7eac:	00007dcd 	.word	0x00007dcd

00007eb0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    7eb0:	b580      	push	{r7, lr}
    7eb2:	b088      	sub	sp, #32
    7eb4:	af00      	add	r7, sp, #0
    7eb6:	0002      	movs	r2, r0
    7eb8:	1dfb      	adds	r3, r7, #7
    7eba:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    7ebc:	1dfb      	adds	r3, r7, #7
    7ebe:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    7ec0:	4ba3      	ldr	r3, [pc, #652]	; (8150 <_usart_interrupt_handler+0x2a0>)
    7ec2:	0092      	lsls	r2, r2, #2
    7ec4:	58d3      	ldr	r3, [r2, r3]
    7ec6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    7ec8:	69bb      	ldr	r3, [r7, #24]
    7eca:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    7ecc:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    7ece:	69bb      	ldr	r3, [r7, #24]
    7ed0:	0018      	movs	r0, r3
    7ed2:	4ba0      	ldr	r3, [pc, #640]	; (8154 <_usart_interrupt_handler+0x2a4>)
    7ed4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    7ed6:	697b      	ldr	r3, [r7, #20]
    7ed8:	7e1b      	ldrb	r3, [r3, #24]
    7eda:	b2da      	uxtb	r2, r3
    7edc:	2312      	movs	r3, #18
    7ede:	18fb      	adds	r3, r7, r3
    7ee0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    7ee2:	697b      	ldr	r3, [r7, #20]
    7ee4:	7d9b      	ldrb	r3, [r3, #22]
    7ee6:	b2db      	uxtb	r3, r3
    7ee8:	b29a      	uxth	r2, r3
    7eea:	2312      	movs	r3, #18
    7eec:	18fb      	adds	r3, r7, r3
    7eee:	2112      	movs	r1, #18
    7ef0:	1879      	adds	r1, r7, r1
    7ef2:	8809      	ldrh	r1, [r1, #0]
    7ef4:	400a      	ands	r2, r1
    7ef6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    7ef8:	69bb      	ldr	r3, [r7, #24]
    7efa:	2230      	movs	r2, #48	; 0x30
    7efc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    7efe:	69ba      	ldr	r2, [r7, #24]
    7f00:	2131      	movs	r1, #49	; 0x31
    7f02:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    7f04:	4013      	ands	r3, r2
    7f06:	b2da      	uxtb	r2, r3
    7f08:	2310      	movs	r3, #16
    7f0a:	18fb      	adds	r3, r7, r3
    7f0c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    7f0e:	2312      	movs	r3, #18
    7f10:	18fb      	adds	r3, r7, r3
    7f12:	881b      	ldrh	r3, [r3, #0]
    7f14:	2201      	movs	r2, #1
    7f16:	4013      	ands	r3, r2
    7f18:	d044      	beq.n	7fa4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    7f1a:	69bb      	ldr	r3, [r7, #24]
    7f1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    7f1e:	b29b      	uxth	r3, r3
    7f20:	2b00      	cmp	r3, #0
    7f22:	d03c      	beq.n	7f9e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7f24:	69bb      	ldr	r3, [r7, #24]
    7f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f28:	781b      	ldrb	r3, [r3, #0]
    7f2a:	b2da      	uxtb	r2, r3
    7f2c:	231c      	movs	r3, #28
    7f2e:	18fb      	adds	r3, r7, r3
    7f30:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    7f32:	69bb      	ldr	r3, [r7, #24]
    7f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f36:	1c5a      	adds	r2, r3, #1
    7f38:	69bb      	ldr	r3, [r7, #24]
    7f3a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7f3c:	69bb      	ldr	r3, [r7, #24]
    7f3e:	795b      	ldrb	r3, [r3, #5]
    7f40:	2b01      	cmp	r3, #1
    7f42:	d113      	bne.n	7f6c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    7f44:	69bb      	ldr	r3, [r7, #24]
    7f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f48:	781b      	ldrb	r3, [r3, #0]
    7f4a:	b2db      	uxtb	r3, r3
    7f4c:	021b      	lsls	r3, r3, #8
    7f4e:	b21a      	sxth	r2, r3
    7f50:	231c      	movs	r3, #28
    7f52:	18fb      	adds	r3, r7, r3
    7f54:	2100      	movs	r1, #0
    7f56:	5e5b      	ldrsh	r3, [r3, r1]
    7f58:	4313      	orrs	r3, r2
    7f5a:	b21a      	sxth	r2, r3
    7f5c:	231c      	movs	r3, #28
    7f5e:	18fb      	adds	r3, r7, r3
    7f60:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    7f62:	69bb      	ldr	r3, [r7, #24]
    7f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f66:	1c5a      	adds	r2, r3, #1
    7f68:	69bb      	ldr	r3, [r7, #24]
    7f6a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    7f6c:	231c      	movs	r3, #28
    7f6e:	18fb      	adds	r3, r7, r3
    7f70:	881b      	ldrh	r3, [r3, #0]
    7f72:	05db      	lsls	r3, r3, #23
    7f74:	0ddb      	lsrs	r3, r3, #23
    7f76:	b29a      	uxth	r2, r3
    7f78:	697b      	ldr	r3, [r7, #20]
    7f7a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    7f7c:	69bb      	ldr	r3, [r7, #24]
    7f7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    7f80:	b29b      	uxth	r3, r3
    7f82:	3b01      	subs	r3, #1
    7f84:	b29b      	uxth	r3, r3
    7f86:	69ba      	ldr	r2, [r7, #24]
    7f88:	1c19      	adds	r1, r3, #0
    7f8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    7f8c:	2b00      	cmp	r3, #0
    7f8e:	d109      	bne.n	7fa4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7f90:	697b      	ldr	r3, [r7, #20]
    7f92:	2201      	movs	r2, #1
    7f94:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    7f96:	697b      	ldr	r3, [r7, #20]
    7f98:	2202      	movs	r2, #2
    7f9a:	759a      	strb	r2, [r3, #22]
    7f9c:	e002      	b.n	7fa4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7f9e:	697b      	ldr	r3, [r7, #20]
    7fa0:	2201      	movs	r2, #1
    7fa2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    7fa4:	2312      	movs	r3, #18
    7fa6:	18fb      	adds	r3, r7, r3
    7fa8:	881b      	ldrh	r3, [r3, #0]
    7faa:	2202      	movs	r2, #2
    7fac:	4013      	ands	r3, r2
    7fae:	d011      	beq.n	7fd4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    7fb0:	697b      	ldr	r3, [r7, #20]
    7fb2:	2202      	movs	r2, #2
    7fb4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    7fb6:	69bb      	ldr	r3, [r7, #24]
    7fb8:	2233      	movs	r2, #51	; 0x33
    7fba:	2100      	movs	r1, #0
    7fbc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    7fbe:	2310      	movs	r3, #16
    7fc0:	18fb      	adds	r3, r7, r3
    7fc2:	881b      	ldrh	r3, [r3, #0]
    7fc4:	2201      	movs	r2, #1
    7fc6:	4013      	ands	r3, r2
    7fc8:	d004      	beq.n	7fd4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    7fca:	69bb      	ldr	r3, [r7, #24]
    7fcc:	68db      	ldr	r3, [r3, #12]
    7fce:	69ba      	ldr	r2, [r7, #24]
    7fd0:	0010      	movs	r0, r2
    7fd2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    7fd4:	2312      	movs	r3, #18
    7fd6:	18fb      	adds	r3, r7, r3
    7fd8:	881b      	ldrh	r3, [r3, #0]
    7fda:	2204      	movs	r2, #4
    7fdc:	4013      	ands	r3, r2
    7fde:	d100      	bne.n	7fe2 <_usart_interrupt_handler+0x132>
    7fe0:	e0bd      	b.n	815e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    7fe2:	69bb      	ldr	r3, [r7, #24]
    7fe4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7fe6:	b29b      	uxth	r3, r3
    7fe8:	2b00      	cmp	r3, #0
    7fea:	d100      	bne.n	7fee <_usart_interrupt_handler+0x13e>
    7fec:	e0b4      	b.n	8158 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7fee:	697b      	ldr	r3, [r7, #20]
    7ff0:	8b5b      	ldrh	r3, [r3, #26]
    7ff2:	b29b      	uxth	r3, r3
    7ff4:	b2da      	uxtb	r2, r3
    7ff6:	231f      	movs	r3, #31
    7ff8:	18fb      	adds	r3, r7, r3
    7ffa:	213f      	movs	r1, #63	; 0x3f
    7ffc:	400a      	ands	r2, r1
    7ffe:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    8000:	231f      	movs	r3, #31
    8002:	18fb      	adds	r3, r7, r3
    8004:	781b      	ldrb	r3, [r3, #0]
    8006:	2208      	movs	r2, #8
    8008:	4013      	ands	r3, r2
    800a:	d007      	beq.n	801c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    800c:	231f      	movs	r3, #31
    800e:	18fb      	adds	r3, r7, r3
    8010:	221f      	movs	r2, #31
    8012:	18ba      	adds	r2, r7, r2
    8014:	7812      	ldrb	r2, [r2, #0]
    8016:	2108      	movs	r1, #8
    8018:	438a      	bics	r2, r1
    801a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    801c:	231f      	movs	r3, #31
    801e:	18fb      	adds	r3, r7, r3
    8020:	781b      	ldrb	r3, [r3, #0]
    8022:	2b00      	cmp	r3, #0
    8024:	d050      	beq.n	80c8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    8026:	231f      	movs	r3, #31
    8028:	18fb      	adds	r3, r7, r3
    802a:	781b      	ldrb	r3, [r3, #0]
    802c:	2202      	movs	r2, #2
    802e:	4013      	ands	r3, r2
    8030:	d007      	beq.n	8042 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    8032:	69bb      	ldr	r3, [r7, #24]
    8034:	2232      	movs	r2, #50	; 0x32
    8036:	211a      	movs	r1, #26
    8038:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    803a:	697b      	ldr	r3, [r7, #20]
    803c:	2202      	movs	r2, #2
    803e:	835a      	strh	r2, [r3, #26]
    8040:	e036      	b.n	80b0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    8042:	231f      	movs	r3, #31
    8044:	18fb      	adds	r3, r7, r3
    8046:	781b      	ldrb	r3, [r3, #0]
    8048:	2204      	movs	r2, #4
    804a:	4013      	ands	r3, r2
    804c:	d007      	beq.n	805e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    804e:	69bb      	ldr	r3, [r7, #24]
    8050:	2232      	movs	r2, #50	; 0x32
    8052:	211e      	movs	r1, #30
    8054:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    8056:	697b      	ldr	r3, [r7, #20]
    8058:	2204      	movs	r2, #4
    805a:	835a      	strh	r2, [r3, #26]
    805c:	e028      	b.n	80b0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    805e:	231f      	movs	r3, #31
    8060:	18fb      	adds	r3, r7, r3
    8062:	781b      	ldrb	r3, [r3, #0]
    8064:	2201      	movs	r2, #1
    8066:	4013      	ands	r3, r2
    8068:	d007      	beq.n	807a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    806a:	69bb      	ldr	r3, [r7, #24]
    806c:	2232      	movs	r2, #50	; 0x32
    806e:	2113      	movs	r1, #19
    8070:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    8072:	697b      	ldr	r3, [r7, #20]
    8074:	2201      	movs	r2, #1
    8076:	835a      	strh	r2, [r3, #26]
    8078:	e01a      	b.n	80b0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    807a:	231f      	movs	r3, #31
    807c:	18fb      	adds	r3, r7, r3
    807e:	781b      	ldrb	r3, [r3, #0]
    8080:	2210      	movs	r2, #16
    8082:	4013      	ands	r3, r2
    8084:	d007      	beq.n	8096 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    8086:	69bb      	ldr	r3, [r7, #24]
    8088:	2232      	movs	r2, #50	; 0x32
    808a:	2142      	movs	r1, #66	; 0x42
    808c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    808e:	697b      	ldr	r3, [r7, #20]
    8090:	2210      	movs	r2, #16
    8092:	835a      	strh	r2, [r3, #26]
    8094:	e00c      	b.n	80b0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    8096:	231f      	movs	r3, #31
    8098:	18fb      	adds	r3, r7, r3
    809a:	781b      	ldrb	r3, [r3, #0]
    809c:	2220      	movs	r2, #32
    809e:	4013      	ands	r3, r2
    80a0:	d006      	beq.n	80b0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    80a2:	69bb      	ldr	r3, [r7, #24]
    80a4:	2232      	movs	r2, #50	; 0x32
    80a6:	2141      	movs	r1, #65	; 0x41
    80a8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    80aa:	697b      	ldr	r3, [r7, #20]
    80ac:	2220      	movs	r2, #32
    80ae:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    80b0:	2310      	movs	r3, #16
    80b2:	18fb      	adds	r3, r7, r3
    80b4:	881b      	ldrh	r3, [r3, #0]
    80b6:	2204      	movs	r2, #4
    80b8:	4013      	ands	r3, r2
				if (callback_status
    80ba:	d050      	beq.n	815e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    80bc:	69bb      	ldr	r3, [r7, #24]
    80be:	695b      	ldr	r3, [r3, #20]
    80c0:	69ba      	ldr	r2, [r7, #24]
    80c2:	0010      	movs	r0, r2
    80c4:	4798      	blx	r3
    80c6:	e04a      	b.n	815e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    80c8:	697b      	ldr	r3, [r7, #20]
    80ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    80cc:	b29a      	uxth	r2, r3
    80ce:	230e      	movs	r3, #14
    80d0:	18fb      	adds	r3, r7, r3
    80d2:	05d2      	lsls	r2, r2, #23
    80d4:	0dd2      	lsrs	r2, r2, #23
    80d6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    80d8:	69bb      	ldr	r3, [r7, #24]
    80da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    80dc:	220e      	movs	r2, #14
    80de:	18ba      	adds	r2, r7, r2
    80e0:	8812      	ldrh	r2, [r2, #0]
    80e2:	b2d2      	uxtb	r2, r2
    80e4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    80e6:	69bb      	ldr	r3, [r7, #24]
    80e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    80ea:	1c5a      	adds	r2, r3, #1
    80ec:	69bb      	ldr	r3, [r7, #24]
    80ee:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    80f0:	69bb      	ldr	r3, [r7, #24]
    80f2:	795b      	ldrb	r3, [r3, #5]
    80f4:	2b01      	cmp	r3, #1
    80f6:	d10d      	bne.n	8114 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    80f8:	69bb      	ldr	r3, [r7, #24]
    80fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    80fc:	220e      	movs	r2, #14
    80fe:	18ba      	adds	r2, r7, r2
    8100:	8812      	ldrh	r2, [r2, #0]
    8102:	0a12      	lsrs	r2, r2, #8
    8104:	b292      	uxth	r2, r2
    8106:	b2d2      	uxtb	r2, r2
    8108:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    810a:	69bb      	ldr	r3, [r7, #24]
    810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    810e:	1c5a      	adds	r2, r3, #1
    8110:	69bb      	ldr	r3, [r7, #24]
    8112:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    8114:	69bb      	ldr	r3, [r7, #24]
    8116:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    8118:	b29b      	uxth	r3, r3
    811a:	3b01      	subs	r3, #1
    811c:	b29b      	uxth	r3, r3
    811e:	69ba      	ldr	r2, [r7, #24]
    8120:	1c19      	adds	r1, r3, #0
    8122:	8591      	strh	r1, [r2, #44]	; 0x2c
    8124:	2b00      	cmp	r3, #0
    8126:	d11a      	bne.n	815e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8128:	697b      	ldr	r3, [r7, #20]
    812a:	2204      	movs	r2, #4
    812c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    812e:	69bb      	ldr	r3, [r7, #24]
    8130:	2232      	movs	r2, #50	; 0x32
    8132:	2100      	movs	r1, #0
    8134:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    8136:	2310      	movs	r3, #16
    8138:	18fb      	adds	r3, r7, r3
    813a:	881b      	ldrh	r3, [r3, #0]
    813c:	2202      	movs	r2, #2
    813e:	4013      	ands	r3, r2
					if (callback_status
    8140:	d00d      	beq.n	815e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    8142:	69bb      	ldr	r3, [r7, #24]
    8144:	691b      	ldr	r3, [r3, #16]
    8146:	69ba      	ldr	r2, [r7, #24]
    8148:	0010      	movs	r0, r2
    814a:	4798      	blx	r3
    814c:	e007      	b.n	815e <_usart_interrupt_handler+0x2ae>
    814e:	46c0      	nop			; (mov r8, r8)
    8150:	2000043c 	.word	0x2000043c
    8154:	00007da9 	.word	0x00007da9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8158:	697b      	ldr	r3, [r7, #20]
    815a:	2204      	movs	r2, #4
    815c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    815e:	2312      	movs	r3, #18
    8160:	18fb      	adds	r3, r7, r3
    8162:	881b      	ldrh	r3, [r3, #0]
    8164:	2210      	movs	r2, #16
    8166:	4013      	ands	r3, r2
    8168:	d010      	beq.n	818c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    816a:	697b      	ldr	r3, [r7, #20]
    816c:	2210      	movs	r2, #16
    816e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    8170:	697b      	ldr	r3, [r7, #20]
    8172:	2210      	movs	r2, #16
    8174:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    8176:	2310      	movs	r3, #16
    8178:	18fb      	adds	r3, r7, r3
    817a:	881b      	ldrh	r3, [r3, #0]
    817c:	2210      	movs	r2, #16
    817e:	4013      	ands	r3, r2
    8180:	d004      	beq.n	818c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    8182:	69bb      	ldr	r3, [r7, #24]
    8184:	69db      	ldr	r3, [r3, #28]
    8186:	69ba      	ldr	r2, [r7, #24]
    8188:	0010      	movs	r0, r2
    818a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    818c:	2312      	movs	r3, #18
    818e:	18fb      	adds	r3, r7, r3
    8190:	881b      	ldrh	r3, [r3, #0]
    8192:	2220      	movs	r2, #32
    8194:	4013      	ands	r3, r2
    8196:	d010      	beq.n	81ba <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    8198:	697b      	ldr	r3, [r7, #20]
    819a:	2220      	movs	r2, #32
    819c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    819e:	697b      	ldr	r3, [r7, #20]
    81a0:	2220      	movs	r2, #32
    81a2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    81a4:	2310      	movs	r3, #16
    81a6:	18fb      	adds	r3, r7, r3
    81a8:	881b      	ldrh	r3, [r3, #0]
    81aa:	2208      	movs	r2, #8
    81ac:	4013      	ands	r3, r2
    81ae:	d004      	beq.n	81ba <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    81b0:	69bb      	ldr	r3, [r7, #24]
    81b2:	699b      	ldr	r3, [r3, #24]
    81b4:	69ba      	ldr	r2, [r7, #24]
    81b6:	0010      	movs	r0, r2
    81b8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    81ba:	2312      	movs	r3, #18
    81bc:	18fb      	adds	r3, r7, r3
    81be:	881b      	ldrh	r3, [r3, #0]
    81c0:	2208      	movs	r2, #8
    81c2:	4013      	ands	r3, r2
    81c4:	d010      	beq.n	81e8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    81c6:	697b      	ldr	r3, [r7, #20]
    81c8:	2208      	movs	r2, #8
    81ca:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    81cc:	697b      	ldr	r3, [r7, #20]
    81ce:	2208      	movs	r2, #8
    81d0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    81d2:	2310      	movs	r3, #16
    81d4:	18fb      	adds	r3, r7, r3
    81d6:	881b      	ldrh	r3, [r3, #0]
    81d8:	2220      	movs	r2, #32
    81da:	4013      	ands	r3, r2
    81dc:	d004      	beq.n	81e8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    81de:	69bb      	ldr	r3, [r7, #24]
    81e0:	6a1b      	ldr	r3, [r3, #32]
    81e2:	69ba      	ldr	r2, [r7, #24]
    81e4:	0010      	movs	r0, r2
    81e6:	4798      	blx	r3
		}
	}
#endif
}
    81e8:	46c0      	nop			; (mov r8, r8)
    81ea:	46bd      	mov	sp, r7
    81ec:	b008      	add	sp, #32
    81ee:	bd80      	pop	{r7, pc}

000081f0 <system_gclk_gen_get_config_defaults>:
{
    81f0:	b580      	push	{r7, lr}
    81f2:	b082      	sub	sp, #8
    81f4:	af00      	add	r7, sp, #0
    81f6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    81f8:	687b      	ldr	r3, [r7, #4]
    81fa:	2201      	movs	r2, #1
    81fc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    81fe:	687b      	ldr	r3, [r7, #4]
    8200:	2200      	movs	r2, #0
    8202:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    8204:	687b      	ldr	r3, [r7, #4]
    8206:	2206      	movs	r2, #6
    8208:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    820a:	687b      	ldr	r3, [r7, #4]
    820c:	2200      	movs	r2, #0
    820e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    8210:	687b      	ldr	r3, [r7, #4]
    8212:	2200      	movs	r2, #0
    8214:	725a      	strb	r2, [r3, #9]
}
    8216:	46c0      	nop			; (mov r8, r8)
    8218:	46bd      	mov	sp, r7
    821a:	b002      	add	sp, #8
    821c:	bd80      	pop	{r7, pc}

0000821e <system_gclk_chan_get_config_defaults>:
{
    821e:	b580      	push	{r7, lr}
    8220:	b082      	sub	sp, #8
    8222:	af00      	add	r7, sp, #0
    8224:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    8226:	687b      	ldr	r3, [r7, #4]
    8228:	2200      	movs	r2, #0
    822a:	701a      	strb	r2, [r3, #0]
}
    822c:	46c0      	nop			; (mov r8, r8)
    822e:	46bd      	mov	sp, r7
    8230:	b002      	add	sp, #8
    8232:	bd80      	pop	{r7, pc}

00008234 <system_clock_source_xosc32k_get_config_defaults>:
{
    8234:	b580      	push	{r7, lr}
    8236:	b082      	sub	sp, #8
    8238:	af00      	add	r7, sp, #0
    823a:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    823c:	687b      	ldr	r3, [r7, #4]
    823e:	2200      	movs	r2, #0
    8240:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    8242:	687b      	ldr	r3, [r7, #4]
    8244:	2204      	movs	r2, #4
    8246:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    8248:	687b      	ldr	r3, [r7, #4]
    824a:	2200      	movs	r2, #0
    824c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    824e:	687b      	ldr	r3, [r7, #4]
    8250:	2280      	movs	r2, #128	; 0x80
    8252:	0212      	lsls	r2, r2, #8
    8254:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    8256:	687b      	ldr	r3, [r7, #4]
    8258:	2200      	movs	r2, #0
    825a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    825c:	687b      	ldr	r3, [r7, #4]
    825e:	2201      	movs	r2, #1
    8260:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    8262:	687b      	ldr	r3, [r7, #4]
    8264:	2200      	movs	r2, #0
    8266:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    8268:	687b      	ldr	r3, [r7, #4]
    826a:	2201      	movs	r2, #1
    826c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    826e:	687b      	ldr	r3, [r7, #4]
    8270:	2200      	movs	r2, #0
    8272:	739a      	strb	r2, [r3, #14]
}
    8274:	46c0      	nop			; (mov r8, r8)
    8276:	46bd      	mov	sp, r7
    8278:	b002      	add	sp, #8
    827a:	bd80      	pop	{r7, pc}

0000827c <system_clock_source_osc8m_get_config_defaults>:
{
    827c:	b580      	push	{r7, lr}
    827e:	b082      	sub	sp, #8
    8280:	af00      	add	r7, sp, #0
    8282:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    8284:	687b      	ldr	r3, [r7, #4]
    8286:	2203      	movs	r2, #3
    8288:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    828a:	687b      	ldr	r3, [r7, #4]
    828c:	2200      	movs	r2, #0
    828e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    8290:	687b      	ldr	r3, [r7, #4]
    8292:	2201      	movs	r2, #1
    8294:	709a      	strb	r2, [r3, #2]
}
    8296:	46c0      	nop			; (mov r8, r8)
    8298:	46bd      	mov	sp, r7
    829a:	b002      	add	sp, #8
    829c:	bd80      	pop	{r7, pc}

0000829e <system_clock_source_dfll_get_config_defaults>:
{
    829e:	b580      	push	{r7, lr}
    82a0:	b082      	sub	sp, #8
    82a2:	af00      	add	r7, sp, #0
    82a4:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    82a6:	687b      	ldr	r3, [r7, #4]
    82a8:	2200      	movs	r2, #0
    82aa:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    82ac:	687b      	ldr	r3, [r7, #4]
    82ae:	2200      	movs	r2, #0
    82b0:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    82b2:	687b      	ldr	r3, [r7, #4]
    82b4:	2200      	movs	r2, #0
    82b6:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    82b8:	687b      	ldr	r3, [r7, #4]
    82ba:	2200      	movs	r2, #0
    82bc:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    82be:	687b      	ldr	r3, [r7, #4]
    82c0:	2200      	movs	r2, #0
    82c2:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    82c4:	687b      	ldr	r3, [r7, #4]
    82c6:	2201      	movs	r2, #1
    82c8:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    82ca:	687b      	ldr	r3, [r7, #4]
    82cc:	2207      	movs	r2, #7
    82ce:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    82d0:	687b      	ldr	r3, [r7, #4]
    82d2:	223f      	movs	r2, #63	; 0x3f
    82d4:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    82d6:	687b      	ldr	r3, [r7, #4]
    82d8:	2201      	movs	r2, #1
    82da:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    82dc:	687b      	ldr	r3, [r7, #4]
    82de:	2201      	movs	r2, #1
    82e0:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    82e2:	687b      	ldr	r3, [r7, #4]
    82e4:	2206      	movs	r2, #6
    82e6:	821a      	strh	r2, [r3, #16]
}
    82e8:	46c0      	nop			; (mov r8, r8)
    82ea:	46bd      	mov	sp, r7
    82ec:	b002      	add	sp, #8
    82ee:	bd80      	pop	{r7, pc}

000082f0 <system_cpu_clock_set_divider>:
{
    82f0:	b580      	push	{r7, lr}
    82f2:	b082      	sub	sp, #8
    82f4:	af00      	add	r7, sp, #0
    82f6:	0002      	movs	r2, r0
    82f8:	1dfb      	adds	r3, r7, #7
    82fa:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    82fc:	4a03      	ldr	r2, [pc, #12]	; (830c <system_cpu_clock_set_divider+0x1c>)
    82fe:	1dfb      	adds	r3, r7, #7
    8300:	781b      	ldrb	r3, [r3, #0]
    8302:	7213      	strb	r3, [r2, #8]
}
    8304:	46c0      	nop			; (mov r8, r8)
    8306:	46bd      	mov	sp, r7
    8308:	b002      	add	sp, #8
    830a:	bd80      	pop	{r7, pc}
    830c:	40000400 	.word	0x40000400

00008310 <system_apb_clock_set_divider>:
{
    8310:	b580      	push	{r7, lr}
    8312:	b082      	sub	sp, #8
    8314:	af00      	add	r7, sp, #0
    8316:	0002      	movs	r2, r0
    8318:	1dfb      	adds	r3, r7, #7
    831a:	701a      	strb	r2, [r3, #0]
    831c:	1dbb      	adds	r3, r7, #6
    831e:	1c0a      	adds	r2, r1, #0
    8320:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8322:	1dfb      	adds	r3, r7, #7
    8324:	781b      	ldrb	r3, [r3, #0]
    8326:	2b01      	cmp	r3, #1
    8328:	d008      	beq.n	833c <system_apb_clock_set_divider+0x2c>
    832a:	2b02      	cmp	r3, #2
    832c:	d00b      	beq.n	8346 <system_apb_clock_set_divider+0x36>
    832e:	2b00      	cmp	r3, #0
    8330:	d10e      	bne.n	8350 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    8332:	4a0b      	ldr	r2, [pc, #44]	; (8360 <system_apb_clock_set_divider+0x50>)
    8334:	1dbb      	adds	r3, r7, #6
    8336:	781b      	ldrb	r3, [r3, #0]
    8338:	7253      	strb	r3, [r2, #9]
			break;
    833a:	e00b      	b.n	8354 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    833c:	4a08      	ldr	r2, [pc, #32]	; (8360 <system_apb_clock_set_divider+0x50>)
    833e:	1dbb      	adds	r3, r7, #6
    8340:	781b      	ldrb	r3, [r3, #0]
    8342:	7293      	strb	r3, [r2, #10]
			break;
    8344:	e006      	b.n	8354 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    8346:	4a06      	ldr	r2, [pc, #24]	; (8360 <system_apb_clock_set_divider+0x50>)
    8348:	1dbb      	adds	r3, r7, #6
    834a:	781b      	ldrb	r3, [r3, #0]
    834c:	72d3      	strb	r3, [r2, #11]
			break;
    834e:	e001      	b.n	8354 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    8350:	2317      	movs	r3, #23
    8352:	e000      	b.n	8356 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    8354:	2300      	movs	r3, #0
}
    8356:	0018      	movs	r0, r3
    8358:	46bd      	mov	sp, r7
    835a:	b002      	add	sp, #8
    835c:	bd80      	pop	{r7, pc}
    835e:	46c0      	nop			; (mov r8, r8)
    8360:	40000400 	.word	0x40000400

00008364 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    8364:	b580      	push	{r7, lr}
    8366:	b082      	sub	sp, #8
    8368:	af00      	add	r7, sp, #0
    836a:	0002      	movs	r2, r0
    836c:	1dfb      	adds	r3, r7, #7
    836e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    8370:	4a08      	ldr	r2, [pc, #32]	; (8394 <system_flash_set_waitstates+0x30>)
    8372:	1dfb      	adds	r3, r7, #7
    8374:	781b      	ldrb	r3, [r3, #0]
    8376:	210f      	movs	r1, #15
    8378:	400b      	ands	r3, r1
    837a:	b2d9      	uxtb	r1, r3
    837c:	6853      	ldr	r3, [r2, #4]
    837e:	200f      	movs	r0, #15
    8380:	4001      	ands	r1, r0
    8382:	0049      	lsls	r1, r1, #1
    8384:	201e      	movs	r0, #30
    8386:	4383      	bics	r3, r0
    8388:	430b      	orrs	r3, r1
    838a:	6053      	str	r3, [r2, #4]
}
    838c:	46c0      	nop			; (mov r8, r8)
    838e:	46bd      	mov	sp, r7
    8390:	b002      	add	sp, #8
    8392:	bd80      	pop	{r7, pc}
    8394:	41004000 	.word	0x41004000

00008398 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    8398:	b580      	push	{r7, lr}
    839a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    839c:	46c0      	nop			; (mov r8, r8)
    839e:	4b04      	ldr	r3, [pc, #16]	; (83b0 <_system_dfll_wait_for_sync+0x18>)
    83a0:	68db      	ldr	r3, [r3, #12]
    83a2:	2210      	movs	r2, #16
    83a4:	4013      	ands	r3, r2
    83a6:	d0fa      	beq.n	839e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    83a8:	46c0      	nop			; (mov r8, r8)
    83aa:	46bd      	mov	sp, r7
    83ac:	bd80      	pop	{r7, pc}
    83ae:	46c0      	nop			; (mov r8, r8)
    83b0:	40000800 	.word	0x40000800

000083b4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    83b4:	b580      	push	{r7, lr}
    83b6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    83b8:	4b0c      	ldr	r3, [pc, #48]	; (83ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    83ba:	2202      	movs	r2, #2
    83bc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    83be:	4b0c      	ldr	r3, [pc, #48]	; (83f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    83c0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    83c2:	4a0a      	ldr	r2, [pc, #40]	; (83ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    83c4:	4b0b      	ldr	r3, [pc, #44]	; (83f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    83c6:	689b      	ldr	r3, [r3, #8]
    83c8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    83ca:	4a08      	ldr	r2, [pc, #32]	; (83ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    83cc:	4b09      	ldr	r3, [pc, #36]	; (83f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    83ce:	685b      	ldr	r3, [r3, #4]
    83d0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    83d2:	4b06      	ldr	r3, [pc, #24]	; (83ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    83d4:	2200      	movs	r2, #0
    83d6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    83d8:	4b05      	ldr	r3, [pc, #20]	; (83f0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    83da:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    83dc:	4a03      	ldr	r2, [pc, #12]	; (83ec <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    83de:	4b05      	ldr	r3, [pc, #20]	; (83f4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    83e0:	681b      	ldr	r3, [r3, #0]
    83e2:	b29b      	uxth	r3, r3
    83e4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    83e6:	46c0      	nop			; (mov r8, r8)
    83e8:	46bd      	mov	sp, r7
    83ea:	bd80      	pop	{r7, pc}
    83ec:	40000800 	.word	0x40000800
    83f0:	00008399 	.word	0x00008399
    83f4:	200000dc 	.word	0x200000dc

000083f8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    83f8:	b580      	push	{r7, lr}
    83fa:	b082      	sub	sp, #8
    83fc:	af00      	add	r7, sp, #0
    83fe:	0002      	movs	r2, r0
    8400:	1dfb      	adds	r3, r7, #7
    8402:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    8404:	1dfb      	adds	r3, r7, #7
    8406:	781b      	ldrb	r3, [r3, #0]
    8408:	2b08      	cmp	r3, #8
    840a:	d840      	bhi.n	848e <system_clock_source_get_hz+0x96>
    840c:	009a      	lsls	r2, r3, #2
    840e:	4b22      	ldr	r3, [pc, #136]	; (8498 <system_clock_source_get_hz+0xa0>)
    8410:	18d3      	adds	r3, r2, r3
    8412:	681b      	ldr	r3, [r3, #0]
    8414:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    8416:	4b21      	ldr	r3, [pc, #132]	; (849c <system_clock_source_get_hz+0xa4>)
    8418:	691b      	ldr	r3, [r3, #16]
    841a:	e039      	b.n	8490 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    841c:	4b20      	ldr	r3, [pc, #128]	; (84a0 <system_clock_source_get_hz+0xa8>)
    841e:	6a1b      	ldr	r3, [r3, #32]
    8420:	059b      	lsls	r3, r3, #22
    8422:	0f9b      	lsrs	r3, r3, #30
    8424:	b2db      	uxtb	r3, r3
    8426:	001a      	movs	r2, r3
    8428:	4b1e      	ldr	r3, [pc, #120]	; (84a4 <system_clock_source_get_hz+0xac>)
    842a:	40d3      	lsrs	r3, r2
    842c:	e030      	b.n	8490 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    842e:	2380      	movs	r3, #128	; 0x80
    8430:	021b      	lsls	r3, r3, #8
    8432:	e02d      	b.n	8490 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    8434:	2380      	movs	r3, #128	; 0x80
    8436:	021b      	lsls	r3, r3, #8
    8438:	e02a      	b.n	8490 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    843a:	4b18      	ldr	r3, [pc, #96]	; (849c <system_clock_source_get_hz+0xa4>)
    843c:	695b      	ldr	r3, [r3, #20]
    843e:	e027      	b.n	8490 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    8440:	4b16      	ldr	r3, [pc, #88]	; (849c <system_clock_source_get_hz+0xa4>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	2202      	movs	r2, #2
    8446:	4013      	ands	r3, r2
    8448:	d101      	bne.n	844e <system_clock_source_get_hz+0x56>
			return 0;
    844a:	2300      	movs	r3, #0
    844c:	e020      	b.n	8490 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    844e:	4b16      	ldr	r3, [pc, #88]	; (84a8 <system_clock_source_get_hz+0xb0>)
    8450:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    8452:	4b12      	ldr	r3, [pc, #72]	; (849c <system_clock_source_get_hz+0xa4>)
    8454:	681b      	ldr	r3, [r3, #0]
    8456:	2204      	movs	r2, #4
    8458:	4013      	ands	r3, r2
    845a:	d009      	beq.n	8470 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    845c:	2000      	movs	r0, #0
    845e:	4b13      	ldr	r3, [pc, #76]	; (84ac <system_clock_source_get_hz+0xb4>)
    8460:	4798      	blx	r3
    8462:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    8464:	4b0d      	ldr	r3, [pc, #52]	; (849c <system_clock_source_get_hz+0xa4>)
    8466:	689b      	ldr	r3, [r3, #8]
    8468:	041b      	lsls	r3, r3, #16
    846a:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    846c:	4353      	muls	r3, r2
    846e:	e00f      	b.n	8490 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    8470:	4b0f      	ldr	r3, [pc, #60]	; (84b0 <system_clock_source_get_hz+0xb8>)
    8472:	e00d      	b.n	8490 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    8474:	4a0a      	ldr	r2, [pc, #40]	; (84a0 <system_clock_source_get_hz+0xa8>)
    8476:	2350      	movs	r3, #80	; 0x50
    8478:	5cd3      	ldrb	r3, [r2, r3]
    847a:	b2db      	uxtb	r3, r3
    847c:	001a      	movs	r2, r3
    847e:	2304      	movs	r3, #4
    8480:	4013      	ands	r3, r2
    8482:	d101      	bne.n	8488 <system_clock_source_get_hz+0x90>
			return 0;
    8484:	2300      	movs	r3, #0
    8486:	e003      	b.n	8490 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    8488:	4b04      	ldr	r3, [pc, #16]	; (849c <system_clock_source_get_hz+0xa4>)
    848a:	68db      	ldr	r3, [r3, #12]
    848c:	e000      	b.n	8490 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    848e:	2300      	movs	r3, #0
	}
}
    8490:	0018      	movs	r0, r3
    8492:	46bd      	mov	sp, r7
    8494:	b002      	add	sp, #8
    8496:	bd80      	pop	{r7, pc}
    8498:	0000e8d4 	.word	0x0000e8d4
    849c:	200000dc 	.word	0x200000dc
    84a0:	40000800 	.word	0x40000800
    84a4:	007a1200 	.word	0x007a1200
    84a8:	00008399 	.word	0x00008399
    84ac:	00008f51 	.word	0x00008f51
    84b0:	02dc6c00 	.word	0x02dc6c00

000084b4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    84b4:	b580      	push	{r7, lr}
    84b6:	b084      	sub	sp, #16
    84b8:	af00      	add	r7, sp, #0
    84ba:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    84bc:	4b1a      	ldr	r3, [pc, #104]	; (8528 <system_clock_source_osc8m_set_config+0x74>)
    84be:	6a1b      	ldr	r3, [r3, #32]
    84c0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    84c2:	687b      	ldr	r3, [r7, #4]
    84c4:	781b      	ldrb	r3, [r3, #0]
    84c6:	1c1a      	adds	r2, r3, #0
    84c8:	2303      	movs	r3, #3
    84ca:	4013      	ands	r3, r2
    84cc:	b2da      	uxtb	r2, r3
    84ce:	230d      	movs	r3, #13
    84d0:	18fb      	adds	r3, r7, r3
    84d2:	2103      	movs	r1, #3
    84d4:	400a      	ands	r2, r1
    84d6:	0010      	movs	r0, r2
    84d8:	781a      	ldrb	r2, [r3, #0]
    84da:	2103      	movs	r1, #3
    84dc:	438a      	bics	r2, r1
    84de:	1c11      	adds	r1, r2, #0
    84e0:	1c02      	adds	r2, r0, #0
    84e2:	430a      	orrs	r2, r1
    84e4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    84e6:	687b      	ldr	r3, [r7, #4]
    84e8:	789a      	ldrb	r2, [r3, #2]
    84ea:	230c      	movs	r3, #12
    84ec:	18fb      	adds	r3, r7, r3
    84ee:	01d0      	lsls	r0, r2, #7
    84f0:	781a      	ldrb	r2, [r3, #0]
    84f2:	217f      	movs	r1, #127	; 0x7f
    84f4:	400a      	ands	r2, r1
    84f6:	1c11      	adds	r1, r2, #0
    84f8:	1c02      	adds	r2, r0, #0
    84fa:	430a      	orrs	r2, r1
    84fc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    84fe:	687b      	ldr	r3, [r7, #4]
    8500:	785a      	ldrb	r2, [r3, #1]
    8502:	230c      	movs	r3, #12
    8504:	18fb      	adds	r3, r7, r3
    8506:	2101      	movs	r1, #1
    8508:	400a      	ands	r2, r1
    850a:	0190      	lsls	r0, r2, #6
    850c:	781a      	ldrb	r2, [r3, #0]
    850e:	2140      	movs	r1, #64	; 0x40
    8510:	438a      	bics	r2, r1
    8512:	1c11      	adds	r1, r2, #0
    8514:	1c02      	adds	r2, r0, #0
    8516:	430a      	orrs	r2, r1
    8518:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    851a:	4b03      	ldr	r3, [pc, #12]	; (8528 <system_clock_source_osc8m_set_config+0x74>)
    851c:	68fa      	ldr	r2, [r7, #12]
    851e:	621a      	str	r2, [r3, #32]
}
    8520:	46c0      	nop			; (mov r8, r8)
    8522:	46bd      	mov	sp, r7
    8524:	b004      	add	sp, #16
    8526:	bd80      	pop	{r7, pc}
    8528:	40000800 	.word	0x40000800

0000852c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    852c:	b580      	push	{r7, lr}
    852e:	b084      	sub	sp, #16
    8530:	af00      	add	r7, sp, #0
    8532:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    8534:	4a43      	ldr	r2, [pc, #268]	; (8644 <system_clock_source_xosc32k_set_config+0x118>)
    8536:	230c      	movs	r3, #12
    8538:	18fb      	adds	r3, r7, r3
    853a:	8a92      	ldrh	r2, [r2, #20]
    853c:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    853e:	687b      	ldr	r3, [r7, #4]
    8540:	785b      	ldrb	r3, [r3, #1]
    8542:	1c1a      	adds	r2, r3, #0
    8544:	2307      	movs	r3, #7
    8546:	4013      	ands	r3, r2
    8548:	b2da      	uxtb	r2, r3
    854a:	230c      	movs	r3, #12
    854c:	18fb      	adds	r3, r7, r3
    854e:	2107      	movs	r1, #7
    8550:	400a      	ands	r2, r1
    8552:	0010      	movs	r0, r2
    8554:	785a      	ldrb	r2, [r3, #1]
    8556:	2107      	movs	r1, #7
    8558:	438a      	bics	r2, r1
    855a:	1c11      	adds	r1, r2, #0
    855c:	1c02      	adds	r2, r0, #0
    855e:	430a      	orrs	r2, r1
    8560:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	781b      	ldrb	r3, [r3, #0]
    8566:	2b00      	cmp	r3, #0
    8568:	d106      	bne.n	8578 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    856a:	230c      	movs	r3, #12
    856c:	18fb      	adds	r3, r7, r3
    856e:	781a      	ldrb	r2, [r3, #0]
    8570:	2104      	movs	r1, #4
    8572:	430a      	orrs	r2, r1
    8574:	701a      	strb	r2, [r3, #0]
    8576:	e005      	b.n	8584 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    8578:	230c      	movs	r3, #12
    857a:	18fb      	adds	r3, r7, r3
    857c:	781a      	ldrb	r2, [r3, #0]
    857e:	2104      	movs	r1, #4
    8580:	438a      	bics	r2, r1
    8582:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    8584:	687b      	ldr	r3, [r7, #4]
    8586:	789a      	ldrb	r2, [r3, #2]
    8588:	230c      	movs	r3, #12
    858a:	18fb      	adds	r3, r7, r3
    858c:	2101      	movs	r1, #1
    858e:	400a      	ands	r2, r1
    8590:	0150      	lsls	r0, r2, #5
    8592:	781a      	ldrb	r2, [r3, #0]
    8594:	2120      	movs	r1, #32
    8596:	438a      	bics	r2, r1
    8598:	1c11      	adds	r1, r2, #0
    859a:	1c02      	adds	r2, r0, #0
    859c:	430a      	orrs	r2, r1
    859e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    85a0:	687b      	ldr	r3, [r7, #4]
    85a2:	78da      	ldrb	r2, [r3, #3]
    85a4:	230c      	movs	r3, #12
    85a6:	18fb      	adds	r3, r7, r3
    85a8:	2101      	movs	r1, #1
    85aa:	400a      	ands	r2, r1
    85ac:	0110      	lsls	r0, r2, #4
    85ae:	781a      	ldrb	r2, [r3, #0]
    85b0:	2110      	movs	r1, #16
    85b2:	438a      	bics	r2, r1
    85b4:	1c11      	adds	r1, r2, #0
    85b6:	1c02      	adds	r2, r0, #0
    85b8:	430a      	orrs	r2, r1
    85ba:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    85bc:	687b      	ldr	r3, [r7, #4]
    85be:	791a      	ldrb	r2, [r3, #4]
    85c0:	230c      	movs	r3, #12
    85c2:	18fb      	adds	r3, r7, r3
    85c4:	2101      	movs	r1, #1
    85c6:	400a      	ands	r2, r1
    85c8:	00d0      	lsls	r0, r2, #3
    85ca:	781a      	ldrb	r2, [r3, #0]
    85cc:	2108      	movs	r1, #8
    85ce:	438a      	bics	r2, r1
    85d0:	1c11      	adds	r1, r2, #0
    85d2:	1c02      	adds	r2, r0, #0
    85d4:	430a      	orrs	r2, r1
    85d6:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    85d8:	687b      	ldr	r3, [r7, #4]
    85da:	7b5a      	ldrb	r2, [r3, #13]
    85dc:	230c      	movs	r3, #12
    85de:	18fb      	adds	r3, r7, r3
    85e0:	01d0      	lsls	r0, r2, #7
    85e2:	781a      	ldrb	r2, [r3, #0]
    85e4:	217f      	movs	r1, #127	; 0x7f
    85e6:	400a      	ands	r2, r1
    85e8:	1c11      	adds	r1, r2, #0
    85ea:	1c02      	adds	r2, r0, #0
    85ec:	430a      	orrs	r2, r1
    85ee:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    85f0:	687b      	ldr	r3, [r7, #4]
    85f2:	7b1a      	ldrb	r2, [r3, #12]
    85f4:	230c      	movs	r3, #12
    85f6:	18fb      	adds	r3, r7, r3
    85f8:	2101      	movs	r1, #1
    85fa:	400a      	ands	r2, r1
    85fc:	0190      	lsls	r0, r2, #6
    85fe:	781a      	ldrb	r2, [r3, #0]
    8600:	2140      	movs	r1, #64	; 0x40
    8602:	438a      	bics	r2, r1
    8604:	1c11      	adds	r1, r2, #0
    8606:	1c02      	adds	r2, r0, #0
    8608:	430a      	orrs	r2, r1
    860a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    860c:	687b      	ldr	r3, [r7, #4]
    860e:	7b9a      	ldrb	r2, [r3, #14]
    8610:	230c      	movs	r3, #12
    8612:	18fb      	adds	r3, r7, r3
    8614:	2101      	movs	r1, #1
    8616:	400a      	ands	r2, r1
    8618:	0110      	lsls	r0, r2, #4
    861a:	785a      	ldrb	r2, [r3, #1]
    861c:	2110      	movs	r1, #16
    861e:	438a      	bics	r2, r1
    8620:	1c11      	adds	r1, r2, #0
    8622:	1c02      	adds	r2, r0, #0
    8624:	430a      	orrs	r2, r1
    8626:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    8628:	687b      	ldr	r3, [r7, #4]
    862a:	689a      	ldr	r2, [r3, #8]
    862c:	4b06      	ldr	r3, [pc, #24]	; (8648 <system_clock_source_xosc32k_set_config+0x11c>)
    862e:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    8630:	4a04      	ldr	r2, [pc, #16]	; (8644 <system_clock_source_xosc32k_set_config+0x118>)
    8632:	230c      	movs	r3, #12
    8634:	18fb      	adds	r3, r7, r3
    8636:	881b      	ldrh	r3, [r3, #0]
    8638:	8293      	strh	r3, [r2, #20]
}
    863a:	46c0      	nop			; (mov r8, r8)
    863c:	46bd      	mov	sp, r7
    863e:	b004      	add	sp, #16
    8640:	bd80      	pop	{r7, pc}
    8642:	46c0      	nop			; (mov r8, r8)
    8644:	40000800 	.word	0x40000800
    8648:	200000dc 	.word	0x200000dc

0000864c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    864c:	b580      	push	{r7, lr}
    864e:	b082      	sub	sp, #8
    8650:	af00      	add	r7, sp, #0
    8652:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    8654:	687b      	ldr	r3, [r7, #4]
    8656:	7a1b      	ldrb	r3, [r3, #8]
    8658:	029b      	lsls	r3, r3, #10
    865a:	041b      	lsls	r3, r3, #16
    865c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    865e:	687b      	ldr	r3, [r7, #4]
    8660:	895b      	ldrh	r3, [r3, #10]
    8662:	059b      	lsls	r3, r3, #22
    8664:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    8666:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    8668:	4b2a      	ldr	r3, [pc, #168]	; (8714 <system_clock_source_dfll_set_config+0xc8>)
    866a:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    866c:	687b      	ldr	r3, [r7, #4]
    866e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    8670:	687b      	ldr	r3, [r7, #4]
    8672:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    8674:	4313      	orrs	r3, r2
    8676:	b2db      	uxtb	r3, r3
    8678:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    867a:	687b      	ldr	r3, [r7, #4]
    867c:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    867e:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    8680:	687a      	ldr	r2, [r7, #4]
    8682:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    8684:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    8686:	687b      	ldr	r3, [r7, #4]
    8688:	785b      	ldrb	r3, [r3, #1]
    868a:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    868c:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    868e:	4b21      	ldr	r3, [pc, #132]	; (8714 <system_clock_source_dfll_set_config+0xc8>)
    8690:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    8692:	687b      	ldr	r3, [r7, #4]
    8694:	781b      	ldrb	r3, [r3, #0]
    8696:	2b04      	cmp	r3, #4
    8698:	d116      	bne.n	86c8 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    869a:	687b      	ldr	r3, [r7, #4]
    869c:	7b1b      	ldrb	r3, [r3, #12]
    869e:	069b      	lsls	r3, r3, #26
    86a0:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    86a2:	687b      	ldr	r3, [r7, #4]
    86a4:	89db      	ldrh	r3, [r3, #14]
    86a6:	041b      	lsls	r3, r3, #16
    86a8:	0019      	movs	r1, r3
    86aa:	4b1b      	ldr	r3, [pc, #108]	; (8718 <system_clock_source_dfll_set_config+0xcc>)
    86ac:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    86ae:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    86b0:	687a      	ldr	r2, [r7, #4]
    86b2:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    86b4:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    86b6:	4b17      	ldr	r3, [pc, #92]	; (8714 <system_clock_source_dfll_set_config+0xc8>)
    86b8:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    86ba:	4b16      	ldr	r3, [pc, #88]	; (8714 <system_clock_source_dfll_set_config+0xc8>)
    86bc:	681b      	ldr	r3, [r3, #0]
    86be:	687a      	ldr	r2, [r7, #4]
    86c0:	7812      	ldrb	r2, [r2, #0]
    86c2:	431a      	orrs	r2, r3
    86c4:	4b13      	ldr	r3, [pc, #76]	; (8714 <system_clock_source_dfll_set_config+0xc8>)
    86c6:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    86c8:	687b      	ldr	r3, [r7, #4]
    86ca:	781b      	ldrb	r3, [r3, #0]
    86cc:	2b20      	cmp	r3, #32
    86ce:	d11c      	bne.n	870a <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    86d0:	687b      	ldr	r3, [r7, #4]
    86d2:	7b1b      	ldrb	r3, [r3, #12]
    86d4:	069b      	lsls	r3, r3, #26
    86d6:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    86d8:	687b      	ldr	r3, [r7, #4]
    86da:	89db      	ldrh	r3, [r3, #14]
    86dc:	041b      	lsls	r3, r3, #16
    86de:	0019      	movs	r1, r3
    86e0:	4b0d      	ldr	r3, [pc, #52]	; (8718 <system_clock_source_dfll_set_config+0xcc>)
    86e2:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    86e4:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    86e6:	687a      	ldr	r2, [r7, #4]
    86e8:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    86ea:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    86ec:	4b09      	ldr	r3, [pc, #36]	; (8714 <system_clock_source_dfll_set_config+0xc8>)
    86ee:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    86f0:	4b08      	ldr	r3, [pc, #32]	; (8714 <system_clock_source_dfll_set_config+0xc8>)
    86f2:	681b      	ldr	r3, [r3, #0]
    86f4:	687a      	ldr	r2, [r7, #4]
    86f6:	7812      	ldrb	r2, [r2, #0]
    86f8:	2104      	movs	r1, #4
    86fa:	430a      	orrs	r2, r1
    86fc:	b2d2      	uxtb	r2, r2
    86fe:	4313      	orrs	r3, r2
    8700:	2280      	movs	r2, #128	; 0x80
    8702:	00d2      	lsls	r2, r2, #3
    8704:	431a      	orrs	r2, r3
    8706:	4b03      	ldr	r3, [pc, #12]	; (8714 <system_clock_source_dfll_set_config+0xc8>)
    8708:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    870a:	46c0      	nop			; (mov r8, r8)
    870c:	46bd      	mov	sp, r7
    870e:	b002      	add	sp, #8
    8710:	bd80      	pop	{r7, pc}
    8712:	46c0      	nop			; (mov r8, r8)
    8714:	200000dc 	.word	0x200000dc
    8718:	03ff0000 	.word	0x03ff0000

0000871c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    871c:	b580      	push	{r7, lr}
    871e:	b082      	sub	sp, #8
    8720:	af00      	add	r7, sp, #0
    8722:	0002      	movs	r2, r0
    8724:	1dfb      	adds	r3, r7, #7
    8726:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    8728:	1dfb      	adds	r3, r7, #7
    872a:	781b      	ldrb	r3, [r3, #0]
    872c:	2b08      	cmp	r3, #8
    872e:	d83b      	bhi.n	87a8 <system_clock_source_enable+0x8c>
    8730:	009a      	lsls	r2, r3, #2
    8732:	4b21      	ldr	r3, [pc, #132]	; (87b8 <system_clock_source_enable+0x9c>)
    8734:	18d3      	adds	r3, r2, r3
    8736:	681b      	ldr	r3, [r3, #0]
    8738:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    873a:	4b20      	ldr	r3, [pc, #128]	; (87bc <system_clock_source_enable+0xa0>)
    873c:	4a1f      	ldr	r2, [pc, #124]	; (87bc <system_clock_source_enable+0xa0>)
    873e:	6a12      	ldr	r2, [r2, #32]
    8740:	2102      	movs	r1, #2
    8742:	430a      	orrs	r2, r1
    8744:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    8746:	2300      	movs	r3, #0
    8748:	e031      	b.n	87ae <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    874a:	4b1c      	ldr	r3, [pc, #112]	; (87bc <system_clock_source_enable+0xa0>)
    874c:	4a1b      	ldr	r2, [pc, #108]	; (87bc <system_clock_source_enable+0xa0>)
    874e:	6992      	ldr	r2, [r2, #24]
    8750:	2102      	movs	r1, #2
    8752:	430a      	orrs	r2, r1
    8754:	619a      	str	r2, [r3, #24]
		break;
    8756:	e029      	b.n	87ac <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    8758:	4a18      	ldr	r2, [pc, #96]	; (87bc <system_clock_source_enable+0xa0>)
    875a:	4b18      	ldr	r3, [pc, #96]	; (87bc <system_clock_source_enable+0xa0>)
    875c:	8a1b      	ldrh	r3, [r3, #16]
    875e:	b29b      	uxth	r3, r3
    8760:	2102      	movs	r1, #2
    8762:	430b      	orrs	r3, r1
    8764:	b29b      	uxth	r3, r3
    8766:	8213      	strh	r3, [r2, #16]
		break;
    8768:	e020      	b.n	87ac <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    876a:	4a14      	ldr	r2, [pc, #80]	; (87bc <system_clock_source_enable+0xa0>)
    876c:	4b13      	ldr	r3, [pc, #76]	; (87bc <system_clock_source_enable+0xa0>)
    876e:	8a9b      	ldrh	r3, [r3, #20]
    8770:	b29b      	uxth	r3, r3
    8772:	2102      	movs	r1, #2
    8774:	430b      	orrs	r3, r1
    8776:	b29b      	uxth	r3, r3
    8778:	8293      	strh	r3, [r2, #20]
		break;
    877a:	e017      	b.n	87ac <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    877c:	4b10      	ldr	r3, [pc, #64]	; (87c0 <system_clock_source_enable+0xa4>)
    877e:	681b      	ldr	r3, [r3, #0]
    8780:	2202      	movs	r2, #2
    8782:	431a      	orrs	r2, r3
    8784:	4b0e      	ldr	r3, [pc, #56]	; (87c0 <system_clock_source_enable+0xa4>)
    8786:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    8788:	4b0e      	ldr	r3, [pc, #56]	; (87c4 <system_clock_source_enable+0xa8>)
    878a:	4798      	blx	r3
		break;
    878c:	e00e      	b.n	87ac <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    878e:	4a0b      	ldr	r2, [pc, #44]	; (87bc <system_clock_source_enable+0xa0>)
    8790:	490a      	ldr	r1, [pc, #40]	; (87bc <system_clock_source_enable+0xa0>)
    8792:	2344      	movs	r3, #68	; 0x44
    8794:	5ccb      	ldrb	r3, [r1, r3]
    8796:	b2db      	uxtb	r3, r3
    8798:	2102      	movs	r1, #2
    879a:	430b      	orrs	r3, r1
    879c:	b2d9      	uxtb	r1, r3
    879e:	2344      	movs	r3, #68	; 0x44
    87a0:	54d1      	strb	r1, [r2, r3]
		break;
    87a2:	e003      	b.n	87ac <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    87a4:	2300      	movs	r3, #0
    87a6:	e002      	b.n	87ae <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    87a8:	2317      	movs	r3, #23
    87aa:	e000      	b.n	87ae <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    87ac:	2300      	movs	r3, #0
}
    87ae:	0018      	movs	r0, r3
    87b0:	46bd      	mov	sp, r7
    87b2:	b002      	add	sp, #8
    87b4:	bd80      	pop	{r7, pc}
    87b6:	46c0      	nop			; (mov r8, r8)
    87b8:	0000e8f8 	.word	0x0000e8f8
    87bc:	40000800 	.word	0x40000800
    87c0:	200000dc 	.word	0x200000dc
    87c4:	000083b5 	.word	0x000083b5

000087c8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    87c8:	b580      	push	{r7, lr}
    87ca:	b084      	sub	sp, #16
    87cc:	af00      	add	r7, sp, #0
    87ce:	0002      	movs	r2, r0
    87d0:	1dfb      	adds	r3, r7, #7
    87d2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    87d4:	2300      	movs	r3, #0
    87d6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    87d8:	1dfb      	adds	r3, r7, #7
    87da:	781b      	ldrb	r3, [r3, #0]
    87dc:	2b08      	cmp	r3, #8
    87de:	d821      	bhi.n	8824 <system_clock_source_is_ready+0x5c>
    87e0:	009a      	lsls	r2, r3, #2
    87e2:	4b18      	ldr	r3, [pc, #96]	; (8844 <system_clock_source_is_ready+0x7c>)
    87e4:	18d3      	adds	r3, r2, r3
    87e6:	681b      	ldr	r3, [r3, #0]
    87e8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    87ea:	2308      	movs	r3, #8
    87ec:	60fb      	str	r3, [r7, #12]
		break;
    87ee:	e01b      	b.n	8828 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    87f0:	2304      	movs	r3, #4
    87f2:	60fb      	str	r3, [r7, #12]
		break;
    87f4:	e018      	b.n	8828 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    87f6:	2301      	movs	r3, #1
    87f8:	60fb      	str	r3, [r7, #12]
		break;
    87fa:	e015      	b.n	8828 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    87fc:	2302      	movs	r3, #2
    87fe:	60fb      	str	r3, [r7, #12]
		break;
    8800:	e012      	b.n	8828 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    8802:	23d0      	movs	r3, #208	; 0xd0
    8804:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    8806:	e00f      	b.n	8828 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    8808:	4a0f      	ldr	r2, [pc, #60]	; (8848 <system_clock_source_is_ready+0x80>)
    880a:	2350      	movs	r3, #80	; 0x50
    880c:	5cd3      	ldrb	r3, [r2, r3]
    880e:	b2db      	uxtb	r3, r3
    8810:	001a      	movs	r2, r3
    8812:	2303      	movs	r3, #3
    8814:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    8816:	3b03      	subs	r3, #3
    8818:	425a      	negs	r2, r3
    881a:	4153      	adcs	r3, r2
    881c:	b2db      	uxtb	r3, r3
    881e:	e00c      	b.n	883a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    8820:	2301      	movs	r3, #1
    8822:	e00a      	b.n	883a <system_clock_source_is_ready+0x72>

	default:
		return false;
    8824:	2300      	movs	r3, #0
    8826:	e008      	b.n	883a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    8828:	4b07      	ldr	r3, [pc, #28]	; (8848 <system_clock_source_is_ready+0x80>)
    882a:	68db      	ldr	r3, [r3, #12]
    882c:	68fa      	ldr	r2, [r7, #12]
    882e:	401a      	ands	r2, r3
    8830:	68fb      	ldr	r3, [r7, #12]
    8832:	1ad3      	subs	r3, r2, r3
    8834:	425a      	negs	r2, r3
    8836:	4153      	adcs	r3, r2
    8838:	b2db      	uxtb	r3, r3
}
    883a:	0018      	movs	r0, r3
    883c:	46bd      	mov	sp, r7
    883e:	b004      	add	sp, #16
    8840:	bd80      	pop	{r7, pc}
    8842:	46c0      	nop			; (mov r8, r8)
    8844:	0000e91c 	.word	0x0000e91c
    8848:	40000800 	.word	0x40000800

0000884c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    884c:	b580      	push	{r7, lr}
    884e:	b082      	sub	sp, #8
    8850:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    8852:	003b      	movs	r3, r7
    8854:	2202      	movs	r2, #2
    8856:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8858:	2300      	movs	r3, #0
    885a:	607b      	str	r3, [r7, #4]
    885c:	e009      	b.n	8872 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    885e:	687b      	ldr	r3, [r7, #4]
    8860:	b2db      	uxtb	r3, r3
    8862:	003a      	movs	r2, r7
    8864:	0011      	movs	r1, r2
    8866:	0018      	movs	r0, r3
    8868:	4b05      	ldr	r3, [pc, #20]	; (8880 <_switch_peripheral_gclk+0x34>)
    886a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    886c:	687b      	ldr	r3, [r7, #4]
    886e:	3301      	adds	r3, #1
    8870:	607b      	str	r3, [r7, #4]
    8872:	687b      	ldr	r3, [r7, #4]
    8874:	2b24      	cmp	r3, #36	; 0x24
    8876:	d9f2      	bls.n	885e <_switch_peripheral_gclk+0x12>
	}
}
    8878:	46c0      	nop			; (mov r8, r8)
    887a:	46bd      	mov	sp, r7
    887c:	b002      	add	sp, #8
    887e:	bd80      	pop	{r7, pc}
    8880:	00008e2d 	.word	0x00008e2d

00008884 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    8884:	b580      	push	{r7, lr}
    8886:	b0aa      	sub	sp, #168	; 0xa8
    8888:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    888a:	4b87      	ldr	r3, [pc, #540]	; (8aa8 <system_clock_init+0x224>)
    888c:	22c2      	movs	r2, #194	; 0xc2
    888e:	00d2      	lsls	r2, r2, #3
    8890:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    8892:	2002      	movs	r0, #2
    8894:	4b85      	ldr	r3, [pc, #532]	; (8aac <system_clock_init+0x228>)
    8896:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    8898:	4b85      	ldr	r3, [pc, #532]	; (8ab0 <system_clock_init+0x22c>)
    889a:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    889c:	2394      	movs	r3, #148	; 0x94
    889e:	18fb      	adds	r3, r7, r3
    88a0:	0018      	movs	r0, r3
    88a2:	4b84      	ldr	r3, [pc, #528]	; (8ab4 <system_clock_init+0x230>)
    88a4:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    88a6:	2394      	movs	r3, #148	; 0x94
    88a8:	18fb      	adds	r3, r7, r3
    88aa:	2280      	movs	r2, #128	; 0x80
    88ac:	0212      	lsls	r2, r2, #8
    88ae:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    88b0:	2394      	movs	r3, #148	; 0x94
    88b2:	18fb      	adds	r3, r7, r3
    88b4:	2200      	movs	r2, #0
    88b6:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    88b8:	2394      	movs	r3, #148	; 0x94
    88ba:	18fb      	adds	r3, r7, r3
    88bc:	2203      	movs	r2, #3
    88be:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    88c0:	2394      	movs	r3, #148	; 0x94
    88c2:	18fb      	adds	r3, r7, r3
    88c4:	2200      	movs	r2, #0
    88c6:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    88c8:	2394      	movs	r3, #148	; 0x94
    88ca:	18fb      	adds	r3, r7, r3
    88cc:	2200      	movs	r2, #0
    88ce:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    88d0:	2394      	movs	r3, #148	; 0x94
    88d2:	18fb      	adds	r3, r7, r3
    88d4:	2201      	movs	r2, #1
    88d6:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    88d8:	2394      	movs	r3, #148	; 0x94
    88da:	18fb      	adds	r3, r7, r3
    88dc:	2200      	movs	r2, #0
    88de:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    88e0:	2394      	movs	r3, #148	; 0x94
    88e2:	18fb      	adds	r3, r7, r3
    88e4:	2200      	movs	r2, #0
    88e6:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    88e8:	2394      	movs	r3, #148	; 0x94
    88ea:	18fb      	adds	r3, r7, r3
    88ec:	0018      	movs	r0, r3
    88ee:	4b72      	ldr	r3, [pc, #456]	; (8ab8 <system_clock_init+0x234>)
    88f0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    88f2:	2005      	movs	r0, #5
    88f4:	4b71      	ldr	r3, [pc, #452]	; (8abc <system_clock_init+0x238>)
    88f6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    88f8:	46c0      	nop			; (mov r8, r8)
    88fa:	2005      	movs	r0, #5
    88fc:	4b70      	ldr	r3, [pc, #448]	; (8ac0 <system_clock_init+0x23c>)
    88fe:	4798      	blx	r3
    8900:	0003      	movs	r3, r0
    8902:	001a      	movs	r2, r3
    8904:	2301      	movs	r3, #1
    8906:	4053      	eors	r3, r2
    8908:	b2db      	uxtb	r3, r3
    890a:	2b00      	cmp	r3, #0
    890c:	d1f5      	bne.n	88fa <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    890e:	4a66      	ldr	r2, [pc, #408]	; (8aa8 <system_clock_init+0x224>)
    8910:	8a93      	ldrh	r3, [r2, #20]
    8912:	2180      	movs	r1, #128	; 0x80
    8914:	430b      	orrs	r3, r1
    8916:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    8918:	2380      	movs	r3, #128	; 0x80
    891a:	18fb      	adds	r3, r7, r3
    891c:	0018      	movs	r0, r3
    891e:	4b69      	ldr	r3, [pc, #420]	; (8ac4 <system_clock_init+0x240>)
    8920:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    8922:	2380      	movs	r3, #128	; 0x80
    8924:	18fb      	adds	r3, r7, r3
    8926:	2204      	movs	r2, #4
    8928:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    892a:	2380      	movs	r3, #128	; 0x80
    892c:	18fb      	adds	r3, r7, r3
    892e:	2200      	movs	r2, #0
    8930:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    8932:	4b65      	ldr	r3, [pc, #404]	; (8ac8 <system_clock_init+0x244>)
    8934:	681b      	ldr	r3, [r3, #0]
    8936:	0e9b      	lsrs	r3, r3, #26
    8938:	22a4      	movs	r2, #164	; 0xa4
    893a:	18ba      	adds	r2, r7, r2
    893c:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    893e:	23a4      	movs	r3, #164	; 0xa4
    8940:	18fb      	adds	r3, r7, r3
    8942:	681b      	ldr	r3, [r3, #0]
    8944:	2b3f      	cmp	r3, #63	; 0x3f
    8946:	d103      	bne.n	8950 <system_clock_init+0xcc>
		coarse = 0x1f;
    8948:	231f      	movs	r3, #31
    894a:	22a4      	movs	r2, #164	; 0xa4
    894c:	18ba      	adds	r2, r7, r2
    894e:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    8950:	23a4      	movs	r3, #164	; 0xa4
    8952:	18fb      	adds	r3, r7, r3
    8954:	681b      	ldr	r3, [r3, #0]
    8956:	b2da      	uxtb	r2, r3
    8958:	2380      	movs	r3, #128	; 0x80
    895a:	18fb      	adds	r3, r7, r3
    895c:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    895e:	2380      	movs	r3, #128	; 0x80
    8960:	18fb      	adds	r3, r7, r3
    8962:	2200      	movs	r2, #0
    8964:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    8966:	2380      	movs	r3, #128	; 0x80
    8968:	18fb      	adds	r3, r7, r3
    896a:	2200      	movs	r2, #0
    896c:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    896e:	2380      	movs	r3, #128	; 0x80
    8970:	18fb      	adds	r3, r7, r3
    8972:	2200      	movs	r2, #0
    8974:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    8976:	2380      	movs	r3, #128	; 0x80
    8978:	18fb      	adds	r3, r7, r3
    897a:	2200      	movs	r2, #0
    897c:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    897e:	2380      	movs	r3, #128	; 0x80
    8980:	18fb      	adds	r3, r7, r3
    8982:	4a52      	ldr	r2, [pc, #328]	; (8acc <system_clock_init+0x248>)
    8984:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    8986:	2380      	movs	r3, #128	; 0x80
    8988:	18fb      	adds	r3, r7, r3
    898a:	2207      	movs	r2, #7
    898c:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    898e:	2380      	movs	r3, #128	; 0x80
    8990:	18fb      	adds	r3, r7, r3
    8992:	223f      	movs	r2, #63	; 0x3f
    8994:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    8996:	2380      	movs	r3, #128	; 0x80
    8998:	18fb      	adds	r3, r7, r3
    899a:	0018      	movs	r0, r3
    899c:	4b4c      	ldr	r3, [pc, #304]	; (8ad0 <system_clock_init+0x24c>)
    899e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    89a0:	237c      	movs	r3, #124	; 0x7c
    89a2:	18fb      	adds	r3, r7, r3
    89a4:	0018      	movs	r0, r3
    89a6:	4b4b      	ldr	r3, [pc, #300]	; (8ad4 <system_clock_init+0x250>)
    89a8:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    89aa:	237c      	movs	r3, #124	; 0x7c
    89ac:	18fb      	adds	r3, r7, r3
    89ae:	2200      	movs	r2, #0
    89b0:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    89b2:	237c      	movs	r3, #124	; 0x7c
    89b4:	18fb      	adds	r3, r7, r3
    89b6:	2201      	movs	r2, #1
    89b8:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    89ba:	237c      	movs	r3, #124	; 0x7c
    89bc:	18fb      	adds	r3, r7, r3
    89be:	2200      	movs	r2, #0
    89c0:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    89c2:	237c      	movs	r3, #124	; 0x7c
    89c4:	18fb      	adds	r3, r7, r3
    89c6:	0018      	movs	r0, r3
    89c8:	4b43      	ldr	r3, [pc, #268]	; (8ad8 <system_clock_init+0x254>)
    89ca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    89cc:	2006      	movs	r0, #6
    89ce:	4b3b      	ldr	r3, [pc, #236]	; (8abc <system_clock_init+0x238>)
    89d0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    89d2:	4b42      	ldr	r3, [pc, #264]	; (8adc <system_clock_init+0x258>)
    89d4:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    89d6:	2364      	movs	r3, #100	; 0x64
    89d8:	18fb      	adds	r3, r7, r3
    89da:	0018      	movs	r0, r3
    89dc:	4b40      	ldr	r3, [pc, #256]	; (8ae0 <system_clock_init+0x25c>)
    89de:	4798      	blx	r3
    89e0:	2364      	movs	r3, #100	; 0x64
    89e2:	18fb      	adds	r3, r7, r3
    89e4:	2205      	movs	r2, #5
    89e6:	701a      	strb	r2, [r3, #0]
    89e8:	2364      	movs	r3, #100	; 0x64
    89ea:	18fb      	adds	r3, r7, r3
    89ec:	2201      	movs	r2, #1
    89ee:	605a      	str	r2, [r3, #4]
    89f0:	2364      	movs	r3, #100	; 0x64
    89f2:	18fb      	adds	r3, r7, r3
    89f4:	2200      	movs	r2, #0
    89f6:	721a      	strb	r2, [r3, #8]
    89f8:	2364      	movs	r3, #100	; 0x64
    89fa:	18fb      	adds	r3, r7, r3
    89fc:	2200      	movs	r2, #0
    89fe:	725a      	strb	r2, [r3, #9]
    8a00:	2364      	movs	r3, #100	; 0x64
    8a02:	18fb      	adds	r3, r7, r3
    8a04:	0019      	movs	r1, r3
    8a06:	2001      	movs	r0, #1
    8a08:	4b36      	ldr	r3, [pc, #216]	; (8ae4 <system_clock_init+0x260>)
    8a0a:	4798      	blx	r3
    8a0c:	2001      	movs	r0, #1
    8a0e:	4b36      	ldr	r3, [pc, #216]	; (8ae8 <system_clock_init+0x264>)
    8a10:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    8a12:	230c      	movs	r3, #12
    8a14:	18fb      	adds	r3, r7, r3
    8a16:	0018      	movs	r0, r3
    8a18:	4b34      	ldr	r3, [pc, #208]	; (8aec <system_clock_init+0x268>)
    8a1a:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    8a1c:	230c      	movs	r3, #12
    8a1e:	18fb      	adds	r3, r7, r3
    8a20:	2201      	movs	r2, #1
    8a22:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    8a24:	230c      	movs	r3, #12
    8a26:	18fb      	adds	r3, r7, r3
    8a28:	0019      	movs	r1, r3
    8a2a:	2000      	movs	r0, #0
    8a2c:	4b30      	ldr	r3, [pc, #192]	; (8af0 <system_clock_init+0x26c>)
    8a2e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    8a30:	2000      	movs	r0, #0
    8a32:	4b30      	ldr	r3, [pc, #192]	; (8af4 <system_clock_init+0x270>)
    8a34:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    8a36:	2007      	movs	r0, #7
    8a38:	4b20      	ldr	r3, [pc, #128]	; (8abc <system_clock_init+0x238>)
    8a3a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    8a3c:	46c0      	nop			; (mov r8, r8)
    8a3e:	2007      	movs	r0, #7
    8a40:	4b1f      	ldr	r3, [pc, #124]	; (8ac0 <system_clock_init+0x23c>)
    8a42:	4798      	blx	r3
    8a44:	0003      	movs	r3, r0
    8a46:	001a      	movs	r2, r3
    8a48:	2301      	movs	r3, #1
    8a4a:	4053      	eors	r3, r2
    8a4c:	b2db      	uxtb	r3, r3
    8a4e:	2b00      	cmp	r3, #0
    8a50:	d1f5      	bne.n	8a3e <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    8a52:	2000      	movs	r0, #0
    8a54:	4b28      	ldr	r3, [pc, #160]	; (8af8 <system_clock_init+0x274>)
    8a56:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    8a58:	2100      	movs	r1, #0
    8a5a:	2000      	movs	r0, #0
    8a5c:	4b27      	ldr	r3, [pc, #156]	; (8afc <system_clock_init+0x278>)
    8a5e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    8a60:	2100      	movs	r1, #0
    8a62:	2001      	movs	r0, #1
    8a64:	4b25      	ldr	r3, [pc, #148]	; (8afc <system_clock_init+0x278>)
    8a66:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    8a68:	2100      	movs	r1, #0
    8a6a:	2002      	movs	r0, #2
    8a6c:	4b23      	ldr	r3, [pc, #140]	; (8afc <system_clock_init+0x278>)
    8a6e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    8a70:	003b      	movs	r3, r7
    8a72:	0018      	movs	r0, r3
    8a74:	4b1a      	ldr	r3, [pc, #104]	; (8ae0 <system_clock_init+0x25c>)
    8a76:	4798      	blx	r3
    8a78:	003b      	movs	r3, r7
    8a7a:	2207      	movs	r2, #7
    8a7c:	701a      	strb	r2, [r3, #0]
    8a7e:	003b      	movs	r3, r7
    8a80:	2201      	movs	r2, #1
    8a82:	605a      	str	r2, [r3, #4]
    8a84:	003b      	movs	r3, r7
    8a86:	2200      	movs	r2, #0
    8a88:	721a      	strb	r2, [r3, #8]
    8a8a:	003b      	movs	r3, r7
    8a8c:	2200      	movs	r2, #0
    8a8e:	725a      	strb	r2, [r3, #9]
    8a90:	003b      	movs	r3, r7
    8a92:	0019      	movs	r1, r3
    8a94:	2000      	movs	r0, #0
    8a96:	4b13      	ldr	r3, [pc, #76]	; (8ae4 <system_clock_init+0x260>)
    8a98:	4798      	blx	r3
    8a9a:	2000      	movs	r0, #0
    8a9c:	4b12      	ldr	r3, [pc, #72]	; (8ae8 <system_clock_init+0x264>)
    8a9e:	4798      	blx	r3
#endif
}
    8aa0:	46c0      	nop			; (mov r8, r8)
    8aa2:	46bd      	mov	sp, r7
    8aa4:	b02a      	add	sp, #168	; 0xa8
    8aa6:	bd80      	pop	{r7, pc}
    8aa8:	40000800 	.word	0x40000800
    8aac:	00008365 	.word	0x00008365
    8ab0:	0000884d 	.word	0x0000884d
    8ab4:	00008235 	.word	0x00008235
    8ab8:	0000852d 	.word	0x0000852d
    8abc:	0000871d 	.word	0x0000871d
    8ac0:	000087c9 	.word	0x000087c9
    8ac4:	0000829f 	.word	0x0000829f
    8ac8:	00806024 	.word	0x00806024
    8acc:	000005b9 	.word	0x000005b9
    8ad0:	0000864d 	.word	0x0000864d
    8ad4:	0000827d 	.word	0x0000827d
    8ad8:	000084b5 	.word	0x000084b5
    8adc:	00008ba5 	.word	0x00008ba5
    8ae0:	000081f1 	.word	0x000081f1
    8ae4:	00008bd5 	.word	0x00008bd5
    8ae8:	00008cf9 	.word	0x00008cf9
    8aec:	0000821f 	.word	0x0000821f
    8af0:	00008e2d 	.word	0x00008e2d
    8af4:	00008e71 	.word	0x00008e71
    8af8:	000082f1 	.word	0x000082f1
    8afc:	00008311 	.word	0x00008311

00008b00 <system_apb_clock_set_mask>:
{
    8b00:	b580      	push	{r7, lr}
    8b02:	b082      	sub	sp, #8
    8b04:	af00      	add	r7, sp, #0
    8b06:	0002      	movs	r2, r0
    8b08:	6039      	str	r1, [r7, #0]
    8b0a:	1dfb      	adds	r3, r7, #7
    8b0c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8b0e:	1dfb      	adds	r3, r7, #7
    8b10:	781b      	ldrb	r3, [r3, #0]
    8b12:	2b01      	cmp	r3, #1
    8b14:	d00a      	beq.n	8b2c <system_apb_clock_set_mask+0x2c>
    8b16:	2b02      	cmp	r3, #2
    8b18:	d00f      	beq.n	8b3a <system_apb_clock_set_mask+0x3a>
    8b1a:	2b00      	cmp	r3, #0
    8b1c:	d114      	bne.n	8b48 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    8b1e:	4b0e      	ldr	r3, [pc, #56]	; (8b58 <system_apb_clock_set_mask+0x58>)
    8b20:	4a0d      	ldr	r2, [pc, #52]	; (8b58 <system_apb_clock_set_mask+0x58>)
    8b22:	6991      	ldr	r1, [r2, #24]
    8b24:	683a      	ldr	r2, [r7, #0]
    8b26:	430a      	orrs	r2, r1
    8b28:	619a      	str	r2, [r3, #24]
			break;
    8b2a:	e00f      	b.n	8b4c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    8b2c:	4b0a      	ldr	r3, [pc, #40]	; (8b58 <system_apb_clock_set_mask+0x58>)
    8b2e:	4a0a      	ldr	r2, [pc, #40]	; (8b58 <system_apb_clock_set_mask+0x58>)
    8b30:	69d1      	ldr	r1, [r2, #28]
    8b32:	683a      	ldr	r2, [r7, #0]
    8b34:	430a      	orrs	r2, r1
    8b36:	61da      	str	r2, [r3, #28]
			break;
    8b38:	e008      	b.n	8b4c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    8b3a:	4b07      	ldr	r3, [pc, #28]	; (8b58 <system_apb_clock_set_mask+0x58>)
    8b3c:	4a06      	ldr	r2, [pc, #24]	; (8b58 <system_apb_clock_set_mask+0x58>)
    8b3e:	6a11      	ldr	r1, [r2, #32]
    8b40:	683a      	ldr	r2, [r7, #0]
    8b42:	430a      	orrs	r2, r1
    8b44:	621a      	str	r2, [r3, #32]
			break;
    8b46:	e001      	b.n	8b4c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    8b48:	2317      	movs	r3, #23
    8b4a:	e000      	b.n	8b4e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    8b4c:	2300      	movs	r3, #0
}
    8b4e:	0018      	movs	r0, r3
    8b50:	46bd      	mov	sp, r7
    8b52:	b002      	add	sp, #8
    8b54:	bd80      	pop	{r7, pc}
    8b56:	46c0      	nop			; (mov r8, r8)
    8b58:	40000400 	.word	0x40000400

00008b5c <system_interrupt_enter_critical_section>:
{
    8b5c:	b580      	push	{r7, lr}
    8b5e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    8b60:	4b02      	ldr	r3, [pc, #8]	; (8b6c <system_interrupt_enter_critical_section+0x10>)
    8b62:	4798      	blx	r3
}
    8b64:	46c0      	nop			; (mov r8, r8)
    8b66:	46bd      	mov	sp, r7
    8b68:	bd80      	pop	{r7, pc}
    8b6a:	46c0      	nop			; (mov r8, r8)
    8b6c:	00005b19 	.word	0x00005b19

00008b70 <system_interrupt_leave_critical_section>:
{
    8b70:	b580      	push	{r7, lr}
    8b72:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    8b74:	4b02      	ldr	r3, [pc, #8]	; (8b80 <system_interrupt_leave_critical_section+0x10>)
    8b76:	4798      	blx	r3
}
    8b78:	46c0      	nop			; (mov r8, r8)
    8b7a:	46bd      	mov	sp, r7
    8b7c:	bd80      	pop	{r7, pc}
    8b7e:	46c0      	nop			; (mov r8, r8)
    8b80:	00005b6d 	.word	0x00005b6d

00008b84 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    8b84:	b580      	push	{r7, lr}
    8b86:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8b88:	4b05      	ldr	r3, [pc, #20]	; (8ba0 <system_gclk_is_syncing+0x1c>)
    8b8a:	785b      	ldrb	r3, [r3, #1]
    8b8c:	b2db      	uxtb	r3, r3
    8b8e:	b25b      	sxtb	r3, r3
    8b90:	2b00      	cmp	r3, #0
    8b92:	da01      	bge.n	8b98 <system_gclk_is_syncing+0x14>
		return true;
    8b94:	2301      	movs	r3, #1
    8b96:	e000      	b.n	8b9a <system_gclk_is_syncing+0x16>
	}

	return false;
    8b98:	2300      	movs	r3, #0
}
    8b9a:	0018      	movs	r0, r3
    8b9c:	46bd      	mov	sp, r7
    8b9e:	bd80      	pop	{r7, pc}
    8ba0:	40000c00 	.word	0x40000c00

00008ba4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    8ba4:	b580      	push	{r7, lr}
    8ba6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    8ba8:	2108      	movs	r1, #8
    8baa:	2000      	movs	r0, #0
    8bac:	4b07      	ldr	r3, [pc, #28]	; (8bcc <system_gclk_init+0x28>)
    8bae:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    8bb0:	4b07      	ldr	r3, [pc, #28]	; (8bd0 <system_gclk_init+0x2c>)
    8bb2:	2201      	movs	r2, #1
    8bb4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8bb6:	46c0      	nop			; (mov r8, r8)
    8bb8:	4b05      	ldr	r3, [pc, #20]	; (8bd0 <system_gclk_init+0x2c>)
    8bba:	781b      	ldrb	r3, [r3, #0]
    8bbc:	b2db      	uxtb	r3, r3
    8bbe:	001a      	movs	r2, r3
    8bc0:	2301      	movs	r3, #1
    8bc2:	4013      	ands	r3, r2
    8bc4:	d1f8      	bne.n	8bb8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    8bc6:	46c0      	nop			; (mov r8, r8)
    8bc8:	46bd      	mov	sp, r7
    8bca:	bd80      	pop	{r7, pc}
    8bcc:	00008b01 	.word	0x00008b01
    8bd0:	40000c00 	.word	0x40000c00

00008bd4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8bd4:	b580      	push	{r7, lr}
    8bd6:	b086      	sub	sp, #24
    8bd8:	af00      	add	r7, sp, #0
    8bda:	0002      	movs	r2, r0
    8bdc:	6039      	str	r1, [r7, #0]
    8bde:	1dfb      	adds	r3, r7, #7
    8be0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    8be2:	1dfb      	adds	r3, r7, #7
    8be4:	781b      	ldrb	r3, [r3, #0]
    8be6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    8be8:	1dfb      	adds	r3, r7, #7
    8bea:	781b      	ldrb	r3, [r3, #0]
    8bec:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    8bee:	683b      	ldr	r3, [r7, #0]
    8bf0:	781b      	ldrb	r3, [r3, #0]
    8bf2:	021b      	lsls	r3, r3, #8
    8bf4:	001a      	movs	r2, r3
    8bf6:	697b      	ldr	r3, [r7, #20]
    8bf8:	4313      	orrs	r3, r2
    8bfa:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    8bfc:	683b      	ldr	r3, [r7, #0]
    8bfe:	785b      	ldrb	r3, [r3, #1]
    8c00:	2b00      	cmp	r3, #0
    8c02:	d004      	beq.n	8c0e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    8c04:	697b      	ldr	r3, [r7, #20]
    8c06:	2280      	movs	r2, #128	; 0x80
    8c08:	02d2      	lsls	r2, r2, #11
    8c0a:	4313      	orrs	r3, r2
    8c0c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    8c0e:	683b      	ldr	r3, [r7, #0]
    8c10:	7a5b      	ldrb	r3, [r3, #9]
    8c12:	2b00      	cmp	r3, #0
    8c14:	d004      	beq.n	8c20 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    8c16:	697b      	ldr	r3, [r7, #20]
    8c18:	2280      	movs	r2, #128	; 0x80
    8c1a:	0312      	lsls	r2, r2, #12
    8c1c:	4313      	orrs	r3, r2
    8c1e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    8c20:	683b      	ldr	r3, [r7, #0]
    8c22:	685b      	ldr	r3, [r3, #4]
    8c24:	2b01      	cmp	r3, #1
    8c26:	d92c      	bls.n	8c82 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    8c28:	683b      	ldr	r3, [r7, #0]
    8c2a:	685a      	ldr	r2, [r3, #4]
    8c2c:	683b      	ldr	r3, [r7, #0]
    8c2e:	685b      	ldr	r3, [r3, #4]
    8c30:	3b01      	subs	r3, #1
    8c32:	4013      	ands	r3, r2
    8c34:	d11a      	bne.n	8c6c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    8c36:	2300      	movs	r3, #0
    8c38:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8c3a:	2302      	movs	r3, #2
    8c3c:	60bb      	str	r3, [r7, #8]
    8c3e:	e005      	b.n	8c4c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    8c40:	68fb      	ldr	r3, [r7, #12]
    8c42:	3301      	adds	r3, #1
    8c44:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    8c46:	68bb      	ldr	r3, [r7, #8]
    8c48:	005b      	lsls	r3, r3, #1
    8c4a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    8c4c:	683b      	ldr	r3, [r7, #0]
    8c4e:	685a      	ldr	r2, [r3, #4]
    8c50:	68bb      	ldr	r3, [r7, #8]
    8c52:	429a      	cmp	r2, r3
    8c54:	d8f4      	bhi.n	8c40 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8c56:	68fb      	ldr	r3, [r7, #12]
    8c58:	021b      	lsls	r3, r3, #8
    8c5a:	693a      	ldr	r2, [r7, #16]
    8c5c:	4313      	orrs	r3, r2
    8c5e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    8c60:	697b      	ldr	r3, [r7, #20]
    8c62:	2280      	movs	r2, #128	; 0x80
    8c64:	0352      	lsls	r2, r2, #13
    8c66:	4313      	orrs	r3, r2
    8c68:	617b      	str	r3, [r7, #20]
    8c6a:	e00a      	b.n	8c82 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    8c6c:	683b      	ldr	r3, [r7, #0]
    8c6e:	685b      	ldr	r3, [r3, #4]
    8c70:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    8c72:	693a      	ldr	r2, [r7, #16]
    8c74:	4313      	orrs	r3, r2
    8c76:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8c78:	697b      	ldr	r3, [r7, #20]
    8c7a:	2280      	movs	r2, #128	; 0x80
    8c7c:	0292      	lsls	r2, r2, #10
    8c7e:	4313      	orrs	r3, r2
    8c80:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8c82:	683b      	ldr	r3, [r7, #0]
    8c84:	7a1b      	ldrb	r3, [r3, #8]
    8c86:	2b00      	cmp	r3, #0
    8c88:	d004      	beq.n	8c94 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8c8a:	697b      	ldr	r3, [r7, #20]
    8c8c:	2280      	movs	r2, #128	; 0x80
    8c8e:	0392      	lsls	r2, r2, #14
    8c90:	4313      	orrs	r3, r2
    8c92:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    8c94:	46c0      	nop			; (mov r8, r8)
    8c96:	4b13      	ldr	r3, [pc, #76]	; (8ce4 <system_gclk_gen_set_config+0x110>)
    8c98:	4798      	blx	r3
    8c9a:	1e03      	subs	r3, r0, #0
    8c9c:	d1fb      	bne.n	8c96 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    8c9e:	4b12      	ldr	r3, [pc, #72]	; (8ce8 <system_gclk_gen_set_config+0x114>)
    8ca0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8ca2:	4a12      	ldr	r2, [pc, #72]	; (8cec <system_gclk_gen_set_config+0x118>)
    8ca4:	1dfb      	adds	r3, r7, #7
    8ca6:	781b      	ldrb	r3, [r3, #0]
    8ca8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    8caa:	46c0      	nop			; (mov r8, r8)
    8cac:	4b0d      	ldr	r3, [pc, #52]	; (8ce4 <system_gclk_gen_set_config+0x110>)
    8cae:	4798      	blx	r3
    8cb0:	1e03      	subs	r3, r0, #0
    8cb2:	d1fb      	bne.n	8cac <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8cb4:	4b0e      	ldr	r3, [pc, #56]	; (8cf0 <system_gclk_gen_set_config+0x11c>)
    8cb6:	693a      	ldr	r2, [r7, #16]
    8cb8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    8cba:	46c0      	nop			; (mov r8, r8)
    8cbc:	4b09      	ldr	r3, [pc, #36]	; (8ce4 <system_gclk_gen_set_config+0x110>)
    8cbe:	4798      	blx	r3
    8cc0:	1e03      	subs	r3, r0, #0
    8cc2:	d1fb      	bne.n	8cbc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8cc4:	4b0a      	ldr	r3, [pc, #40]	; (8cf0 <system_gclk_gen_set_config+0x11c>)
    8cc6:	4a0a      	ldr	r2, [pc, #40]	; (8cf0 <system_gclk_gen_set_config+0x11c>)
    8cc8:	6851      	ldr	r1, [r2, #4]
    8cca:	2280      	movs	r2, #128	; 0x80
    8ccc:	0252      	lsls	r2, r2, #9
    8cce:	4011      	ands	r1, r2
    8cd0:	697a      	ldr	r2, [r7, #20]
    8cd2:	430a      	orrs	r2, r1
    8cd4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    8cd6:	4b07      	ldr	r3, [pc, #28]	; (8cf4 <system_gclk_gen_set_config+0x120>)
    8cd8:	4798      	blx	r3
}
    8cda:	46c0      	nop			; (mov r8, r8)
    8cdc:	46bd      	mov	sp, r7
    8cde:	b006      	add	sp, #24
    8ce0:	bd80      	pop	{r7, pc}
    8ce2:	46c0      	nop			; (mov r8, r8)
    8ce4:	00008b85 	.word	0x00008b85
    8ce8:	00008b5d 	.word	0x00008b5d
    8cec:	40000c08 	.word	0x40000c08
    8cf0:	40000c00 	.word	0x40000c00
    8cf4:	00008b71 	.word	0x00008b71

00008cf8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    8cf8:	b580      	push	{r7, lr}
    8cfa:	b082      	sub	sp, #8
    8cfc:	af00      	add	r7, sp, #0
    8cfe:	0002      	movs	r2, r0
    8d00:	1dfb      	adds	r3, r7, #7
    8d02:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    8d04:	46c0      	nop			; (mov r8, r8)
    8d06:	4b0e      	ldr	r3, [pc, #56]	; (8d40 <system_gclk_gen_enable+0x48>)
    8d08:	4798      	blx	r3
    8d0a:	1e03      	subs	r3, r0, #0
    8d0c:	d1fb      	bne.n	8d06 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    8d0e:	4b0d      	ldr	r3, [pc, #52]	; (8d44 <system_gclk_gen_enable+0x4c>)
    8d10:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8d12:	4a0d      	ldr	r2, [pc, #52]	; (8d48 <system_gclk_gen_enable+0x50>)
    8d14:	1dfb      	adds	r3, r7, #7
    8d16:	781b      	ldrb	r3, [r3, #0]
    8d18:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    8d1a:	46c0      	nop			; (mov r8, r8)
    8d1c:	4b08      	ldr	r3, [pc, #32]	; (8d40 <system_gclk_gen_enable+0x48>)
    8d1e:	4798      	blx	r3
    8d20:	1e03      	subs	r3, r0, #0
    8d22:	d1fb      	bne.n	8d1c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    8d24:	4b09      	ldr	r3, [pc, #36]	; (8d4c <system_gclk_gen_enable+0x54>)
    8d26:	4a09      	ldr	r2, [pc, #36]	; (8d4c <system_gclk_gen_enable+0x54>)
    8d28:	6852      	ldr	r2, [r2, #4]
    8d2a:	2180      	movs	r1, #128	; 0x80
    8d2c:	0249      	lsls	r1, r1, #9
    8d2e:	430a      	orrs	r2, r1
    8d30:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    8d32:	4b07      	ldr	r3, [pc, #28]	; (8d50 <system_gclk_gen_enable+0x58>)
    8d34:	4798      	blx	r3
}
    8d36:	46c0      	nop			; (mov r8, r8)
    8d38:	46bd      	mov	sp, r7
    8d3a:	b002      	add	sp, #8
    8d3c:	bd80      	pop	{r7, pc}
    8d3e:	46c0      	nop			; (mov r8, r8)
    8d40:	00008b85 	.word	0x00008b85
    8d44:	00008b5d 	.word	0x00008b5d
    8d48:	40000c04 	.word	0x40000c04
    8d4c:	40000c00 	.word	0x40000c00
    8d50:	00008b71 	.word	0x00008b71

00008d54 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8d54:	b580      	push	{r7, lr}
    8d56:	b086      	sub	sp, #24
    8d58:	af00      	add	r7, sp, #0
    8d5a:	0002      	movs	r2, r0
    8d5c:	1dfb      	adds	r3, r7, #7
    8d5e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    8d60:	46c0      	nop			; (mov r8, r8)
    8d62:	4b2a      	ldr	r3, [pc, #168]	; (8e0c <system_gclk_gen_get_hz+0xb8>)
    8d64:	4798      	blx	r3
    8d66:	1e03      	subs	r3, r0, #0
    8d68:	d1fb      	bne.n	8d62 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    8d6a:	4b29      	ldr	r3, [pc, #164]	; (8e10 <system_gclk_gen_get_hz+0xbc>)
    8d6c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8d6e:	4a29      	ldr	r2, [pc, #164]	; (8e14 <system_gclk_gen_get_hz+0xc0>)
    8d70:	1dfb      	adds	r3, r7, #7
    8d72:	781b      	ldrb	r3, [r3, #0]
    8d74:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    8d76:	46c0      	nop			; (mov r8, r8)
    8d78:	4b24      	ldr	r3, [pc, #144]	; (8e0c <system_gclk_gen_get_hz+0xb8>)
    8d7a:	4798      	blx	r3
    8d7c:	1e03      	subs	r3, r0, #0
    8d7e:	d1fb      	bne.n	8d78 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    8d80:	4b25      	ldr	r3, [pc, #148]	; (8e18 <system_gclk_gen_get_hz+0xc4>)
    8d82:	685b      	ldr	r3, [r3, #4]
    8d84:	04db      	lsls	r3, r3, #19
    8d86:	0edb      	lsrs	r3, r3, #27
    8d88:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    8d8a:	0018      	movs	r0, r3
    8d8c:	4b23      	ldr	r3, [pc, #140]	; (8e1c <system_gclk_gen_get_hz+0xc8>)
    8d8e:	4798      	blx	r3
    8d90:	0003      	movs	r3, r0
    8d92:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8d94:	4a1f      	ldr	r2, [pc, #124]	; (8e14 <system_gclk_gen_get_hz+0xc0>)
    8d96:	1dfb      	adds	r3, r7, #7
    8d98:	781b      	ldrb	r3, [r3, #0]
    8d9a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    8d9c:	4b1e      	ldr	r3, [pc, #120]	; (8e18 <system_gclk_gen_get_hz+0xc4>)
    8d9e:	685b      	ldr	r3, [r3, #4]
    8da0:	02db      	lsls	r3, r3, #11
    8da2:	0fdb      	lsrs	r3, r3, #31
    8da4:	b2da      	uxtb	r2, r3
    8da6:	2313      	movs	r3, #19
    8da8:	18fb      	adds	r3, r7, r3
    8daa:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8dac:	4a1c      	ldr	r2, [pc, #112]	; (8e20 <system_gclk_gen_get_hz+0xcc>)
    8dae:	1dfb      	adds	r3, r7, #7
    8db0:	781b      	ldrb	r3, [r3, #0]
    8db2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    8db4:	46c0      	nop			; (mov r8, r8)
    8db6:	4b15      	ldr	r3, [pc, #84]	; (8e0c <system_gclk_gen_get_hz+0xb8>)
    8db8:	4798      	blx	r3
    8dba:	1e03      	subs	r3, r0, #0
    8dbc:	d1fb      	bne.n	8db6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    8dbe:	4b16      	ldr	r3, [pc, #88]	; (8e18 <system_gclk_gen_get_hz+0xc4>)
    8dc0:	689b      	ldr	r3, [r3, #8]
    8dc2:	021b      	lsls	r3, r3, #8
    8dc4:	0c1b      	lsrs	r3, r3, #16
    8dc6:	b29b      	uxth	r3, r3
    8dc8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    8dca:	4b16      	ldr	r3, [pc, #88]	; (8e24 <system_gclk_gen_get_hz+0xd0>)
    8dcc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    8dce:	2313      	movs	r3, #19
    8dd0:	18fb      	adds	r3, r7, r3
    8dd2:	781b      	ldrb	r3, [r3, #0]
    8dd4:	2b00      	cmp	r3, #0
    8dd6:	d109      	bne.n	8dec <system_gclk_gen_get_hz+0x98>
    8dd8:	68fb      	ldr	r3, [r7, #12]
    8dda:	2b01      	cmp	r3, #1
    8ddc:	d906      	bls.n	8dec <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    8dde:	4b12      	ldr	r3, [pc, #72]	; (8e28 <system_gclk_gen_get_hz+0xd4>)
    8de0:	68f9      	ldr	r1, [r7, #12]
    8de2:	6978      	ldr	r0, [r7, #20]
    8de4:	4798      	blx	r3
    8de6:	0003      	movs	r3, r0
    8de8:	617b      	str	r3, [r7, #20]
    8dea:	e00a      	b.n	8e02 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    8dec:	2313      	movs	r3, #19
    8dee:	18fb      	adds	r3, r7, r3
    8df0:	781b      	ldrb	r3, [r3, #0]
    8df2:	2b00      	cmp	r3, #0
    8df4:	d005      	beq.n	8e02 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    8df6:	68fb      	ldr	r3, [r7, #12]
    8df8:	3301      	adds	r3, #1
    8dfa:	697a      	ldr	r2, [r7, #20]
    8dfc:	40da      	lsrs	r2, r3
    8dfe:	0013      	movs	r3, r2
    8e00:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    8e02:	697b      	ldr	r3, [r7, #20]
}
    8e04:	0018      	movs	r0, r3
    8e06:	46bd      	mov	sp, r7
    8e08:	b006      	add	sp, #24
    8e0a:	bd80      	pop	{r7, pc}
    8e0c:	00008b85 	.word	0x00008b85
    8e10:	00008b5d 	.word	0x00008b5d
    8e14:	40000c04 	.word	0x40000c04
    8e18:	40000c00 	.word	0x40000c00
    8e1c:	000083f9 	.word	0x000083f9
    8e20:	40000c08 	.word	0x40000c08
    8e24:	00008b71 	.word	0x00008b71
    8e28:	0000bf21 	.word	0x0000bf21

00008e2c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    8e2c:	b580      	push	{r7, lr}
    8e2e:	b084      	sub	sp, #16
    8e30:	af00      	add	r7, sp, #0
    8e32:	0002      	movs	r2, r0
    8e34:	6039      	str	r1, [r7, #0]
    8e36:	1dfb      	adds	r3, r7, #7
    8e38:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    8e3a:	1dfb      	adds	r3, r7, #7
    8e3c:	781b      	ldrb	r3, [r3, #0]
    8e3e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8e40:	683b      	ldr	r3, [r7, #0]
    8e42:	781b      	ldrb	r3, [r3, #0]
    8e44:	021b      	lsls	r3, r3, #8
    8e46:	001a      	movs	r2, r3
    8e48:	68fb      	ldr	r3, [r7, #12]
    8e4a:	4313      	orrs	r3, r2
    8e4c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    8e4e:	1dfb      	adds	r3, r7, #7
    8e50:	781b      	ldrb	r3, [r3, #0]
    8e52:	0018      	movs	r0, r3
    8e54:	4b04      	ldr	r3, [pc, #16]	; (8e68 <system_gclk_chan_set_config+0x3c>)
    8e56:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8e58:	4b04      	ldr	r3, [pc, #16]	; (8e6c <system_gclk_chan_set_config+0x40>)
    8e5a:	68fa      	ldr	r2, [r7, #12]
    8e5c:	b292      	uxth	r2, r2
    8e5e:	805a      	strh	r2, [r3, #2]
}
    8e60:	46c0      	nop			; (mov r8, r8)
    8e62:	46bd      	mov	sp, r7
    8e64:	b004      	add	sp, #16
    8e66:	bd80      	pop	{r7, pc}
    8e68:	00008eb9 	.word	0x00008eb9
    8e6c:	40000c00 	.word	0x40000c00

00008e70 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8e70:	b580      	push	{r7, lr}
    8e72:	b082      	sub	sp, #8
    8e74:	af00      	add	r7, sp, #0
    8e76:	0002      	movs	r2, r0
    8e78:	1dfb      	adds	r3, r7, #7
    8e7a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    8e7c:	4b0a      	ldr	r3, [pc, #40]	; (8ea8 <system_gclk_chan_enable+0x38>)
    8e7e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8e80:	4a0a      	ldr	r2, [pc, #40]	; (8eac <system_gclk_chan_enable+0x3c>)
    8e82:	1dfb      	adds	r3, r7, #7
    8e84:	781b      	ldrb	r3, [r3, #0]
    8e86:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8e88:	4909      	ldr	r1, [pc, #36]	; (8eb0 <system_gclk_chan_enable+0x40>)
    8e8a:	4b09      	ldr	r3, [pc, #36]	; (8eb0 <system_gclk_chan_enable+0x40>)
    8e8c:	885b      	ldrh	r3, [r3, #2]
    8e8e:	b29b      	uxth	r3, r3
    8e90:	2280      	movs	r2, #128	; 0x80
    8e92:	01d2      	lsls	r2, r2, #7
    8e94:	4313      	orrs	r3, r2
    8e96:	b29b      	uxth	r3, r3
    8e98:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    8e9a:	4b06      	ldr	r3, [pc, #24]	; (8eb4 <system_gclk_chan_enable+0x44>)
    8e9c:	4798      	blx	r3
}
    8e9e:	46c0      	nop			; (mov r8, r8)
    8ea0:	46bd      	mov	sp, r7
    8ea2:	b002      	add	sp, #8
    8ea4:	bd80      	pop	{r7, pc}
    8ea6:	46c0      	nop			; (mov r8, r8)
    8ea8:	00008b5d 	.word	0x00008b5d
    8eac:	40000c02 	.word	0x40000c02
    8eb0:	40000c00 	.word	0x40000c00
    8eb4:	00008b71 	.word	0x00008b71

00008eb8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8eb8:	b580      	push	{r7, lr}
    8eba:	b084      	sub	sp, #16
    8ebc:	af00      	add	r7, sp, #0
    8ebe:	0002      	movs	r2, r0
    8ec0:	1dfb      	adds	r3, r7, #7
    8ec2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    8ec4:	4b1c      	ldr	r3, [pc, #112]	; (8f38 <system_gclk_chan_disable+0x80>)
    8ec6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8ec8:	4a1c      	ldr	r2, [pc, #112]	; (8f3c <system_gclk_chan_disable+0x84>)
    8eca:	1dfb      	adds	r3, r7, #7
    8ecc:	781b      	ldrb	r3, [r3, #0]
    8ece:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8ed0:	4b1b      	ldr	r3, [pc, #108]	; (8f40 <system_gclk_chan_disable+0x88>)
    8ed2:	885b      	ldrh	r3, [r3, #2]
    8ed4:	051b      	lsls	r3, r3, #20
    8ed6:	0f1b      	lsrs	r3, r3, #28
    8ed8:	b2db      	uxtb	r3, r3
    8eda:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    8edc:	4a18      	ldr	r2, [pc, #96]	; (8f40 <system_gclk_chan_disable+0x88>)
    8ede:	8853      	ldrh	r3, [r2, #2]
    8ee0:	4918      	ldr	r1, [pc, #96]	; (8f44 <system_gclk_chan_disable+0x8c>)
    8ee2:	400b      	ands	r3, r1
    8ee4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8ee6:	4a16      	ldr	r2, [pc, #88]	; (8f40 <system_gclk_chan_disable+0x88>)
    8ee8:	4b15      	ldr	r3, [pc, #84]	; (8f40 <system_gclk_chan_disable+0x88>)
    8eea:	885b      	ldrh	r3, [r3, #2]
    8eec:	b29b      	uxth	r3, r3
    8eee:	4916      	ldr	r1, [pc, #88]	; (8f48 <system_gclk_chan_disable+0x90>)
    8ef0:	400b      	ands	r3, r1
    8ef2:	b29b      	uxth	r3, r3
    8ef4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8ef6:	46c0      	nop			; (mov r8, r8)
    8ef8:	4b11      	ldr	r3, [pc, #68]	; (8f40 <system_gclk_chan_disable+0x88>)
    8efa:	885b      	ldrh	r3, [r3, #2]
    8efc:	b29b      	uxth	r3, r3
    8efe:	001a      	movs	r2, r3
    8f00:	2380      	movs	r3, #128	; 0x80
    8f02:	01db      	lsls	r3, r3, #7
    8f04:	4013      	ands	r3, r2
    8f06:	d1f7      	bne.n	8ef8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8f08:	4a0d      	ldr	r2, [pc, #52]	; (8f40 <system_gclk_chan_disable+0x88>)
    8f0a:	68fb      	ldr	r3, [r7, #12]
    8f0c:	b2db      	uxtb	r3, r3
    8f0e:	1c19      	adds	r1, r3, #0
    8f10:	230f      	movs	r3, #15
    8f12:	400b      	ands	r3, r1
    8f14:	b2d9      	uxtb	r1, r3
    8f16:	8853      	ldrh	r3, [r2, #2]
    8f18:	1c08      	adds	r0, r1, #0
    8f1a:	210f      	movs	r1, #15
    8f1c:	4001      	ands	r1, r0
    8f1e:	0208      	lsls	r0, r1, #8
    8f20:	4908      	ldr	r1, [pc, #32]	; (8f44 <system_gclk_chan_disable+0x8c>)
    8f22:	400b      	ands	r3, r1
    8f24:	1c19      	adds	r1, r3, #0
    8f26:	1c03      	adds	r3, r0, #0
    8f28:	430b      	orrs	r3, r1
    8f2a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    8f2c:	4b07      	ldr	r3, [pc, #28]	; (8f4c <system_gclk_chan_disable+0x94>)
    8f2e:	4798      	blx	r3
}
    8f30:	46c0      	nop			; (mov r8, r8)
    8f32:	46bd      	mov	sp, r7
    8f34:	b004      	add	sp, #16
    8f36:	bd80      	pop	{r7, pc}
    8f38:	00008b5d 	.word	0x00008b5d
    8f3c:	40000c02 	.word	0x40000c02
    8f40:	40000c00 	.word	0x40000c00
    8f44:	fffff0ff 	.word	0xfffff0ff
    8f48:	ffffbfff 	.word	0xffffbfff
    8f4c:	00008b71 	.word	0x00008b71

00008f50 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8f50:	b580      	push	{r7, lr}
    8f52:	b084      	sub	sp, #16
    8f54:	af00      	add	r7, sp, #0
    8f56:	0002      	movs	r2, r0
    8f58:	1dfb      	adds	r3, r7, #7
    8f5a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    8f5c:	4b0d      	ldr	r3, [pc, #52]	; (8f94 <system_gclk_chan_get_hz+0x44>)
    8f5e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8f60:	4a0d      	ldr	r2, [pc, #52]	; (8f98 <system_gclk_chan_get_hz+0x48>)
    8f62:	1dfb      	adds	r3, r7, #7
    8f64:	781b      	ldrb	r3, [r3, #0]
    8f66:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8f68:	4b0c      	ldr	r3, [pc, #48]	; (8f9c <system_gclk_chan_get_hz+0x4c>)
    8f6a:	885b      	ldrh	r3, [r3, #2]
    8f6c:	051b      	lsls	r3, r3, #20
    8f6e:	0f1b      	lsrs	r3, r3, #28
    8f70:	b2da      	uxtb	r2, r3
    8f72:	230f      	movs	r3, #15
    8f74:	18fb      	adds	r3, r7, r3
    8f76:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    8f78:	4b09      	ldr	r3, [pc, #36]	; (8fa0 <system_gclk_chan_get_hz+0x50>)
    8f7a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8f7c:	230f      	movs	r3, #15
    8f7e:	18fb      	adds	r3, r7, r3
    8f80:	781b      	ldrb	r3, [r3, #0]
    8f82:	0018      	movs	r0, r3
    8f84:	4b07      	ldr	r3, [pc, #28]	; (8fa4 <system_gclk_chan_get_hz+0x54>)
    8f86:	4798      	blx	r3
    8f88:	0003      	movs	r3, r0
}
    8f8a:	0018      	movs	r0, r3
    8f8c:	46bd      	mov	sp, r7
    8f8e:	b004      	add	sp, #16
    8f90:	bd80      	pop	{r7, pc}
    8f92:	46c0      	nop			; (mov r8, r8)
    8f94:	00008b5d 	.word	0x00008b5d
    8f98:	40000c02 	.word	0x40000c02
    8f9c:	40000c00 	.word	0x40000c00
    8fa0:	00008b71 	.word	0x00008b71
    8fa4:	00008d55 	.word	0x00008d55

00008fa8 <system_pinmux_get_group_from_gpio_pin>:
{
    8fa8:	b580      	push	{r7, lr}
    8faa:	b084      	sub	sp, #16
    8fac:	af00      	add	r7, sp, #0
    8fae:	0002      	movs	r2, r0
    8fb0:	1dfb      	adds	r3, r7, #7
    8fb2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8fb4:	230f      	movs	r3, #15
    8fb6:	18fb      	adds	r3, r7, r3
    8fb8:	1dfa      	adds	r2, r7, #7
    8fba:	7812      	ldrb	r2, [r2, #0]
    8fbc:	09d2      	lsrs	r2, r2, #7
    8fbe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8fc0:	230e      	movs	r3, #14
    8fc2:	18fb      	adds	r3, r7, r3
    8fc4:	1dfa      	adds	r2, r7, #7
    8fc6:	7812      	ldrb	r2, [r2, #0]
    8fc8:	0952      	lsrs	r2, r2, #5
    8fca:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8fcc:	4b0d      	ldr	r3, [pc, #52]	; (9004 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8fce:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    8fd0:	230f      	movs	r3, #15
    8fd2:	18fb      	adds	r3, r7, r3
    8fd4:	781b      	ldrb	r3, [r3, #0]
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	d10f      	bne.n	8ffa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8fda:	230f      	movs	r3, #15
    8fdc:	18fb      	adds	r3, r7, r3
    8fde:	781b      	ldrb	r3, [r3, #0]
    8fe0:	009b      	lsls	r3, r3, #2
    8fe2:	2210      	movs	r2, #16
    8fe4:	4694      	mov	ip, r2
    8fe6:	44bc      	add	ip, r7
    8fe8:	4463      	add	r3, ip
    8fea:	3b08      	subs	r3, #8
    8fec:	681a      	ldr	r2, [r3, #0]
    8fee:	230e      	movs	r3, #14
    8ff0:	18fb      	adds	r3, r7, r3
    8ff2:	781b      	ldrb	r3, [r3, #0]
    8ff4:	01db      	lsls	r3, r3, #7
    8ff6:	18d3      	adds	r3, r2, r3
    8ff8:	e000      	b.n	8ffc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    8ffa:	2300      	movs	r3, #0
}
    8ffc:	0018      	movs	r0, r3
    8ffe:	46bd      	mov	sp, r7
    9000:	b004      	add	sp, #16
    9002:	bd80      	pop	{r7, pc}
    9004:	41004400 	.word	0x41004400

00009008 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    9008:	b580      	push	{r7, lr}
    900a:	b088      	sub	sp, #32
    900c:	af00      	add	r7, sp, #0
    900e:	60f8      	str	r0, [r7, #12]
    9010:	60b9      	str	r1, [r7, #8]
    9012:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    9014:	2300      	movs	r3, #0
    9016:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    9018:	687b      	ldr	r3, [r7, #4]
    901a:	78db      	ldrb	r3, [r3, #3]
    901c:	2201      	movs	r2, #1
    901e:	4053      	eors	r3, r2
    9020:	b2db      	uxtb	r3, r3
    9022:	2b00      	cmp	r3, #0
    9024:	d035      	beq.n	9092 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    9026:	687b      	ldr	r3, [r7, #4]
    9028:	781b      	ldrb	r3, [r3, #0]
    902a:	2b80      	cmp	r3, #128	; 0x80
    902c:	d00b      	beq.n	9046 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    902e:	69fb      	ldr	r3, [r7, #28]
    9030:	2280      	movs	r2, #128	; 0x80
    9032:	0252      	lsls	r2, r2, #9
    9034:	4313      	orrs	r3, r2
    9036:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    9038:	687b      	ldr	r3, [r7, #4]
    903a:	781b      	ldrb	r3, [r3, #0]
    903c:	061b      	lsls	r3, r3, #24
    903e:	001a      	movs	r2, r3
    9040:	69fb      	ldr	r3, [r7, #28]
    9042:	4313      	orrs	r3, r2
    9044:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    9046:	687b      	ldr	r3, [r7, #4]
    9048:	785b      	ldrb	r3, [r3, #1]
    904a:	2b00      	cmp	r3, #0
    904c:	d003      	beq.n	9056 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    904e:	687b      	ldr	r3, [r7, #4]
    9050:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    9052:	2b02      	cmp	r3, #2
    9054:	d110      	bne.n	9078 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    9056:	69fb      	ldr	r3, [r7, #28]
    9058:	2280      	movs	r2, #128	; 0x80
    905a:	0292      	lsls	r2, r2, #10
    905c:	4313      	orrs	r3, r2
    905e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    9060:	687b      	ldr	r3, [r7, #4]
    9062:	789b      	ldrb	r3, [r3, #2]
    9064:	2b00      	cmp	r3, #0
    9066:	d004      	beq.n	9072 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    9068:	69fb      	ldr	r3, [r7, #28]
    906a:	2280      	movs	r2, #128	; 0x80
    906c:	02d2      	lsls	r2, r2, #11
    906e:	4313      	orrs	r3, r2
    9070:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    9072:	68fb      	ldr	r3, [r7, #12]
    9074:	68ba      	ldr	r2, [r7, #8]
    9076:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9078:	687b      	ldr	r3, [r7, #4]
    907a:	785b      	ldrb	r3, [r3, #1]
    907c:	2b01      	cmp	r3, #1
    907e:	d003      	beq.n	9088 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    9080:	687b      	ldr	r3, [r7, #4]
    9082:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9084:	2b02      	cmp	r3, #2
    9086:	d107      	bne.n	9098 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    9088:	69fb      	ldr	r3, [r7, #28]
    908a:	4a22      	ldr	r2, [pc, #136]	; (9114 <_system_pinmux_config+0x10c>)
    908c:	4013      	ands	r3, r2
    908e:	61fb      	str	r3, [r7, #28]
    9090:	e002      	b.n	9098 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    9092:	68fb      	ldr	r3, [r7, #12]
    9094:	68ba      	ldr	r2, [r7, #8]
    9096:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    9098:	68bb      	ldr	r3, [r7, #8]
    909a:	041b      	lsls	r3, r3, #16
    909c:	0c1b      	lsrs	r3, r3, #16
    909e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    90a0:	68bb      	ldr	r3, [r7, #8]
    90a2:	0c1b      	lsrs	r3, r3, #16
    90a4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    90a6:	69ba      	ldr	r2, [r7, #24]
    90a8:	69fb      	ldr	r3, [r7, #28]
    90aa:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    90ac:	22a0      	movs	r2, #160	; 0xa0
    90ae:	05d2      	lsls	r2, r2, #23
    90b0:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    90b2:	68fb      	ldr	r3, [r7, #12]
    90b4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    90b6:	697a      	ldr	r2, [r7, #20]
    90b8:	69fb      	ldr	r3, [r7, #28]
    90ba:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    90bc:	22d0      	movs	r2, #208	; 0xd0
    90be:	0612      	lsls	r2, r2, #24
    90c0:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    90c2:	68fb      	ldr	r3, [r7, #12]
    90c4:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    90c6:	687b      	ldr	r3, [r7, #4]
    90c8:	78db      	ldrb	r3, [r3, #3]
    90ca:	2201      	movs	r2, #1
    90cc:	4053      	eors	r3, r2
    90ce:	b2db      	uxtb	r3, r3
    90d0:	2b00      	cmp	r3, #0
    90d2:	d01a      	beq.n	910a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    90d4:	69fa      	ldr	r2, [r7, #28]
    90d6:	2380      	movs	r3, #128	; 0x80
    90d8:	02db      	lsls	r3, r3, #11
    90da:	4013      	ands	r3, r2
    90dc:	d00a      	beq.n	90f4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    90de:	687b      	ldr	r3, [r7, #4]
    90e0:	789b      	ldrb	r3, [r3, #2]
    90e2:	2b01      	cmp	r3, #1
    90e4:	d103      	bne.n	90ee <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    90e6:	68fb      	ldr	r3, [r7, #12]
    90e8:	68ba      	ldr	r2, [r7, #8]
    90ea:	619a      	str	r2, [r3, #24]
    90ec:	e002      	b.n	90f4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    90ee:	68fb      	ldr	r3, [r7, #12]
    90f0:	68ba      	ldr	r2, [r7, #8]
    90f2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    90f4:	687b      	ldr	r3, [r7, #4]
    90f6:	785b      	ldrb	r3, [r3, #1]
    90f8:	2b01      	cmp	r3, #1
    90fa:	d003      	beq.n	9104 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    90fc:	687b      	ldr	r3, [r7, #4]
    90fe:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9100:	2b02      	cmp	r3, #2
    9102:	d102      	bne.n	910a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    9104:	68fb      	ldr	r3, [r7, #12]
    9106:	68ba      	ldr	r2, [r7, #8]
    9108:	609a      	str	r2, [r3, #8]
		}
	}
}
    910a:	46c0      	nop			; (mov r8, r8)
    910c:	46bd      	mov	sp, r7
    910e:	b008      	add	sp, #32
    9110:	bd80      	pop	{r7, pc}
    9112:	46c0      	nop			; (mov r8, r8)
    9114:	fffbffff 	.word	0xfffbffff

00009118 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    9118:	b580      	push	{r7, lr}
    911a:	b084      	sub	sp, #16
    911c:	af00      	add	r7, sp, #0
    911e:	0002      	movs	r2, r0
    9120:	6039      	str	r1, [r7, #0]
    9122:	1dfb      	adds	r3, r7, #7
    9124:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    9126:	1dfb      	adds	r3, r7, #7
    9128:	781b      	ldrb	r3, [r3, #0]
    912a:	0018      	movs	r0, r3
    912c:	4b0a      	ldr	r3, [pc, #40]	; (9158 <system_pinmux_pin_set_config+0x40>)
    912e:	4798      	blx	r3
    9130:	0003      	movs	r3, r0
    9132:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    9134:	1dfb      	adds	r3, r7, #7
    9136:	781b      	ldrb	r3, [r3, #0]
    9138:	221f      	movs	r2, #31
    913a:	4013      	ands	r3, r2
    913c:	2201      	movs	r2, #1
    913e:	409a      	lsls	r2, r3
    9140:	0013      	movs	r3, r2
    9142:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    9144:	683a      	ldr	r2, [r7, #0]
    9146:	68b9      	ldr	r1, [r7, #8]
    9148:	68fb      	ldr	r3, [r7, #12]
    914a:	0018      	movs	r0, r3
    914c:	4b03      	ldr	r3, [pc, #12]	; (915c <system_pinmux_pin_set_config+0x44>)
    914e:	4798      	blx	r3
}
    9150:	46c0      	nop			; (mov r8, r8)
    9152:	46bd      	mov	sp, r7
    9154:	b004      	add	sp, #16
    9156:	bd80      	pop	{r7, pc}
    9158:	00008fa9 	.word	0x00008fa9
    915c:	00009009 	.word	0x00009009

00009160 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    9160:	b580      	push	{r7, lr}
    9162:	af00      	add	r7, sp, #0
	return;
    9164:	46c0      	nop			; (mov r8, r8)
}
    9166:	46bd      	mov	sp, r7
    9168:	bd80      	pop	{r7, pc}
	...

0000916c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    916c:	b580      	push	{r7, lr}
    916e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    9170:	4b06      	ldr	r3, [pc, #24]	; (918c <system_init+0x20>)
    9172:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    9174:	4b06      	ldr	r3, [pc, #24]	; (9190 <system_init+0x24>)
    9176:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    9178:	4b06      	ldr	r3, [pc, #24]	; (9194 <system_init+0x28>)
    917a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    917c:	4b06      	ldr	r3, [pc, #24]	; (9198 <system_init+0x2c>)
    917e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    9180:	4b06      	ldr	r3, [pc, #24]	; (919c <system_init+0x30>)
    9182:	4798      	blx	r3
}
    9184:	46c0      	nop			; (mov r8, r8)
    9186:	46bd      	mov	sp, r7
    9188:	bd80      	pop	{r7, pc}
    918a:	46c0      	nop			; (mov r8, r8)
    918c:	00008885 	.word	0x00008885
    9190:	00005ca9 	.word	0x00005ca9
    9194:	00009161 	.word	0x00009161
    9198:	00006081 	.word	0x00006081
    919c:	00009161 	.word	0x00009161

000091a0 <system_gclk_chan_get_config_defaults>:
{
    91a0:	b580      	push	{r7, lr}
    91a2:	b082      	sub	sp, #8
    91a4:	af00      	add	r7, sp, #0
    91a6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    91a8:	687b      	ldr	r3, [r7, #4]
    91aa:	2200      	movs	r2, #0
    91ac:	701a      	strb	r2, [r3, #0]
}
    91ae:	46c0      	nop			; (mov r8, r8)
    91b0:	46bd      	mov	sp, r7
    91b2:	b002      	add	sp, #8
    91b4:	bd80      	pop	{r7, pc}
	...

000091b8 <system_apb_clock_set_mask>:
{
    91b8:	b580      	push	{r7, lr}
    91ba:	b082      	sub	sp, #8
    91bc:	af00      	add	r7, sp, #0
    91be:	0002      	movs	r2, r0
    91c0:	6039      	str	r1, [r7, #0]
    91c2:	1dfb      	adds	r3, r7, #7
    91c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    91c6:	1dfb      	adds	r3, r7, #7
    91c8:	781b      	ldrb	r3, [r3, #0]
    91ca:	2b01      	cmp	r3, #1
    91cc:	d00a      	beq.n	91e4 <system_apb_clock_set_mask+0x2c>
    91ce:	2b02      	cmp	r3, #2
    91d0:	d00f      	beq.n	91f2 <system_apb_clock_set_mask+0x3a>
    91d2:	2b00      	cmp	r3, #0
    91d4:	d114      	bne.n	9200 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    91d6:	4b0e      	ldr	r3, [pc, #56]	; (9210 <system_apb_clock_set_mask+0x58>)
    91d8:	4a0d      	ldr	r2, [pc, #52]	; (9210 <system_apb_clock_set_mask+0x58>)
    91da:	6991      	ldr	r1, [r2, #24]
    91dc:	683a      	ldr	r2, [r7, #0]
    91de:	430a      	orrs	r2, r1
    91e0:	619a      	str	r2, [r3, #24]
			break;
    91e2:	e00f      	b.n	9204 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    91e4:	4b0a      	ldr	r3, [pc, #40]	; (9210 <system_apb_clock_set_mask+0x58>)
    91e6:	4a0a      	ldr	r2, [pc, #40]	; (9210 <system_apb_clock_set_mask+0x58>)
    91e8:	69d1      	ldr	r1, [r2, #28]
    91ea:	683a      	ldr	r2, [r7, #0]
    91ec:	430a      	orrs	r2, r1
    91ee:	61da      	str	r2, [r3, #28]
			break;
    91f0:	e008      	b.n	9204 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    91f2:	4b07      	ldr	r3, [pc, #28]	; (9210 <system_apb_clock_set_mask+0x58>)
    91f4:	4a06      	ldr	r2, [pc, #24]	; (9210 <system_apb_clock_set_mask+0x58>)
    91f6:	6a11      	ldr	r1, [r2, #32]
    91f8:	683a      	ldr	r2, [r7, #0]
    91fa:	430a      	orrs	r2, r1
    91fc:	621a      	str	r2, [r3, #32]
			break;
    91fe:	e001      	b.n	9204 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    9200:	2317      	movs	r3, #23
    9202:	e000      	b.n	9206 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    9204:	2300      	movs	r3, #0
}
    9206:	0018      	movs	r0, r3
    9208:	46bd      	mov	sp, r7
    920a:	b002      	add	sp, #8
    920c:	bd80      	pop	{r7, pc}
    920e:	46c0      	nop			; (mov r8, r8)
    9210:	40000400 	.word	0x40000400

00009214 <system_pinmux_get_config_defaults>:
{
    9214:	b580      	push	{r7, lr}
    9216:	b082      	sub	sp, #8
    9218:	af00      	add	r7, sp, #0
    921a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    921c:	687b      	ldr	r3, [r7, #4]
    921e:	2280      	movs	r2, #128	; 0x80
    9220:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9222:	687b      	ldr	r3, [r7, #4]
    9224:	2200      	movs	r2, #0
    9226:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9228:	687b      	ldr	r3, [r7, #4]
    922a:	2201      	movs	r2, #1
    922c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    922e:	687b      	ldr	r3, [r7, #4]
    9230:	2200      	movs	r2, #0
    9232:	70da      	strb	r2, [r3, #3]
}
    9234:	46c0      	nop			; (mov r8, r8)
    9236:	46bd      	mov	sp, r7
    9238:	b002      	add	sp, #8
    923a:	bd80      	pop	{r7, pc}

0000923c <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    923c:	b580      	push	{r7, lr}
    923e:	b084      	sub	sp, #16
    9240:	af00      	add	r7, sp, #0
    9242:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    9244:	2300      	movs	r3, #0
    9246:	60fb      	str	r3, [r7, #12]
    9248:	e00c      	b.n	9264 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    924a:	4b0a      	ldr	r3, [pc, #40]	; (9274 <_tcc_get_inst_index+0x38>)
    924c:	68fa      	ldr	r2, [r7, #12]
    924e:	0092      	lsls	r2, r2, #2
    9250:	58d2      	ldr	r2, [r2, r3]
    9252:	687b      	ldr	r3, [r7, #4]
    9254:	429a      	cmp	r2, r3
    9256:	d102      	bne.n	925e <_tcc_get_inst_index+0x22>
			return i;
    9258:	68fb      	ldr	r3, [r7, #12]
    925a:	b2db      	uxtb	r3, r3
    925c:	e006      	b.n	926c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    925e:	68fb      	ldr	r3, [r7, #12]
    9260:	3301      	adds	r3, #1
    9262:	60fb      	str	r3, [r7, #12]
    9264:	68fb      	ldr	r3, [r7, #12]
    9266:	2b02      	cmp	r3, #2
    9268:	d9ef      	bls.n	924a <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    926a:	2300      	movs	r3, #0
}
    926c:	0018      	movs	r0, r3
    926e:	46bd      	mov	sp, r7
    9270:	b004      	add	sp, #16
    9272:	bd80      	pop	{r7, pc}
    9274:	0000e940 	.word	0x0000e940

00009278 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    9278:	b590      	push	{r4, r7, lr}
    927a:	b085      	sub	sp, #20
    927c:	af00      	add	r7, sp, #0
    927e:	6078      	str	r0, [r7, #4]
    9280:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    9282:	230f      	movs	r3, #15
    9284:	18fc      	adds	r4, r7, r3
    9286:	683b      	ldr	r3, [r7, #0]
    9288:	0018      	movs	r0, r3
    928a:	4bad      	ldr	r3, [pc, #692]	; (9540 <tcc_get_config_defaults+0x2c8>)
    928c:	4798      	blx	r3
    928e:	0003      	movs	r3, r0
    9290:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    9292:	687b      	ldr	r3, [r7, #4]
    9294:	2200      	movs	r2, #0
    9296:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    9298:	230f      	movs	r3, #15
    929a:	18fb      	adds	r3, r7, r3
    929c:	781a      	ldrb	r2, [r3, #0]
    929e:	4ba9      	ldr	r3, [pc, #676]	; (9544 <tcc_get_config_defaults+0x2cc>)
    92a0:	0092      	lsls	r2, r2, #2
    92a2:	58d2      	ldr	r2, [r2, r3]
    92a4:	687b      	ldr	r3, [r7, #4]
    92a6:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    92a8:	687b      	ldr	r3, [r7, #4]
    92aa:	2200      	movs	r2, #0
    92ac:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    92ae:	687b      	ldr	r3, [r7, #4]
    92b0:	2200      	movs	r2, #0
    92b2:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    92b4:	687b      	ldr	r3, [r7, #4]
    92b6:	2200      	movs	r2, #0
    92b8:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    92ba:	687b      	ldr	r3, [r7, #4]
    92bc:	2200      	movs	r2, #0
    92be:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    92c0:	687b      	ldr	r3, [r7, #4]
    92c2:	2200      	movs	r2, #0
    92c4:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    92c6:	687b      	ldr	r3, [r7, #4]
    92c8:	2200      	movs	r2, #0
    92ca:	61da      	str	r2, [r3, #28]
    92cc:	687b      	ldr	r3, [r7, #4]
    92ce:	2200      	movs	r2, #0
    92d0:	621a      	str	r2, [r3, #32]
    92d2:	687b      	ldr	r3, [r7, #4]
    92d4:	2200      	movs	r2, #0
    92d6:	625a      	str	r2, [r3, #36]	; 0x24
    92d8:	687b      	ldr	r3, [r7, #4]
    92da:	2200      	movs	r2, #0
    92dc:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    92de:	687b      	ldr	r3, [r7, #4]
    92e0:	2200      	movs	r2, #0
    92e2:	751a      	strb	r2, [r3, #20]
    92e4:	687b      	ldr	r3, [r7, #4]
    92e6:	2200      	movs	r2, #0
    92e8:	755a      	strb	r2, [r3, #21]
    92ea:	687b      	ldr	r3, [r7, #4]
    92ec:	2200      	movs	r2, #0
    92ee:	759a      	strb	r2, [r3, #22]
    92f0:	687b      	ldr	r3, [r7, #4]
    92f2:	2200      	movs	r2, #0
    92f4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    92f6:	687b      	ldr	r3, [r7, #4]
    92f8:	2200      	movs	r2, #0
    92fa:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    92fc:	687b      	ldr	r3, [r7, #4]
    92fe:	2200      	movs	r2, #0
    9300:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    9302:	687b      	ldr	r3, [r7, #4]
    9304:	2200      	movs	r2, #0
    9306:	741a      	strb	r2, [r3, #16]
    9308:	687b      	ldr	r3, [r7, #4]
    930a:	2200      	movs	r2, #0
    930c:	745a      	strb	r2, [r3, #17]
    930e:	687b      	ldr	r3, [r7, #4]
    9310:	2200      	movs	r2, #0
    9312:	749a      	strb	r2, [r3, #18]
    9314:	687b      	ldr	r3, [r7, #4]
    9316:	2200      	movs	r2, #0
    9318:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    931a:	687b      	ldr	r3, [r7, #4]
    931c:	222c      	movs	r2, #44	; 0x2c
    931e:	2100      	movs	r1, #0
    9320:	5499      	strb	r1, [r3, r2]
    9322:	687b      	ldr	r3, [r7, #4]
    9324:	222d      	movs	r2, #45	; 0x2d
    9326:	2100      	movs	r1, #0
    9328:	5499      	strb	r1, [r3, r2]
    932a:	687b      	ldr	r3, [r7, #4]
    932c:	222e      	movs	r2, #46	; 0x2e
    932e:	2100      	movs	r1, #0
    9330:	5499      	strb	r1, [r3, r2]
    9332:	687b      	ldr	r3, [r7, #4]
    9334:	222f      	movs	r2, #47	; 0x2f
    9336:	2100      	movs	r1, #0
    9338:	5499      	strb	r1, [r3, r2]
    933a:	687b      	ldr	r3, [r7, #4]
    933c:	2230      	movs	r2, #48	; 0x30
    933e:	2100      	movs	r1, #0
    9340:	5499      	strb	r1, [r3, r2]
    9342:	687b      	ldr	r3, [r7, #4]
    9344:	2231      	movs	r2, #49	; 0x31
    9346:	2100      	movs	r1, #0
    9348:	5499      	strb	r1, [r3, r2]
    934a:	687b      	ldr	r3, [r7, #4]
    934c:	2232      	movs	r2, #50	; 0x32
    934e:	2100      	movs	r1, #0
    9350:	5499      	strb	r1, [r3, r2]
    9352:	687b      	ldr	r3, [r7, #4]
    9354:	2233      	movs	r2, #51	; 0x33
    9356:	2100      	movs	r1, #0
    9358:	5499      	strb	r1, [r3, r2]
    935a:	687b      	ldr	r3, [r7, #4]
    935c:	2234      	movs	r2, #52	; 0x34
    935e:	2100      	movs	r1, #0
    9360:	5499      	strb	r1, [r3, r2]
    9362:	687b      	ldr	r3, [r7, #4]
    9364:	2235      	movs	r2, #53	; 0x35
    9366:	2100      	movs	r1, #0
    9368:	5499      	strb	r1, [r3, r2]
    936a:	687b      	ldr	r3, [r7, #4]
    936c:	2236      	movs	r2, #54	; 0x36
    936e:	2100      	movs	r1, #0
    9370:	5499      	strb	r1, [r3, r2]
    9372:	687b      	ldr	r3, [r7, #4]
    9374:	2237      	movs	r2, #55	; 0x37
    9376:	2100      	movs	r1, #0
    9378:	5499      	strb	r1, [r3, r2]
    937a:	687b      	ldr	r3, [r7, #4]
    937c:	2238      	movs	r2, #56	; 0x38
    937e:	2100      	movs	r1, #0
    9380:	5499      	strb	r1, [r3, r2]
    9382:	687b      	ldr	r3, [r7, #4]
    9384:	2239      	movs	r2, #57	; 0x39
    9386:	2100      	movs	r1, #0
    9388:	5499      	strb	r1, [r3, r2]
    938a:	687b      	ldr	r3, [r7, #4]
    938c:	223a      	movs	r2, #58	; 0x3a
    938e:	2100      	movs	r1, #0
    9390:	5499      	strb	r1, [r3, r2]
    9392:	687b      	ldr	r3, [r7, #4]
    9394:	223b      	movs	r2, #59	; 0x3b
    9396:	2100      	movs	r1, #0
    9398:	5499      	strb	r1, [r3, r2]
    939a:	687b      	ldr	r3, [r7, #4]
    939c:	223c      	movs	r2, #60	; 0x3c
    939e:	2100      	movs	r1, #0
    93a0:	5499      	strb	r1, [r3, r2]
    93a2:	687b      	ldr	r3, [r7, #4]
    93a4:	223d      	movs	r2, #61	; 0x3d
    93a6:	2100      	movs	r1, #0
    93a8:	5499      	strb	r1, [r3, r2]
    93aa:	687b      	ldr	r3, [r7, #4]
    93ac:	223e      	movs	r2, #62	; 0x3e
    93ae:	2100      	movs	r1, #0
    93b0:	5499      	strb	r1, [r3, r2]
    93b2:	687b      	ldr	r3, [r7, #4]
    93b4:	223f      	movs	r2, #63	; 0x3f
    93b6:	2100      	movs	r1, #0
    93b8:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    93ba:	687b      	ldr	r3, [r7, #4]
    93bc:	2240      	movs	r2, #64	; 0x40
    93be:	2100      	movs	r1, #0
    93c0:	5499      	strb	r1, [r3, r2]
    93c2:	687b      	ldr	r3, [r7, #4]
    93c4:	2241      	movs	r2, #65	; 0x41
    93c6:	2100      	movs	r1, #0
    93c8:	5499      	strb	r1, [r3, r2]
    93ca:	687b      	ldr	r3, [r7, #4]
    93cc:	2242      	movs	r2, #66	; 0x42
    93ce:	2100      	movs	r1, #0
    93d0:	5499      	strb	r1, [r3, r2]
    93d2:	687b      	ldr	r3, [r7, #4]
    93d4:	2243      	movs	r2, #67	; 0x43
    93d6:	2100      	movs	r1, #0
    93d8:	5499      	strb	r1, [r3, r2]
    93da:	687b      	ldr	r3, [r7, #4]
    93dc:	2244      	movs	r2, #68	; 0x44
    93de:	2100      	movs	r1, #0
    93e0:	5499      	strb	r1, [r3, r2]
    93e2:	687b      	ldr	r3, [r7, #4]
    93e4:	2245      	movs	r2, #69	; 0x45
    93e6:	2100      	movs	r1, #0
    93e8:	5499      	strb	r1, [r3, r2]
    93ea:	687b      	ldr	r3, [r7, #4]
    93ec:	2246      	movs	r2, #70	; 0x46
    93ee:	2100      	movs	r1, #0
    93f0:	5499      	strb	r1, [r3, r2]
    93f2:	687b      	ldr	r3, [r7, #4]
    93f4:	2247      	movs	r2, #71	; 0x47
    93f6:	2100      	movs	r1, #0
    93f8:	5499      	strb	r1, [r3, r2]
    93fa:	687b      	ldr	r3, [r7, #4]
    93fc:	2248      	movs	r2, #72	; 0x48
    93fe:	2100      	movs	r1, #0
    9400:	5499      	strb	r1, [r3, r2]
    9402:	687b      	ldr	r3, [r7, #4]
    9404:	2249      	movs	r2, #73	; 0x49
    9406:	2100      	movs	r1, #0
    9408:	5499      	strb	r1, [r3, r2]
    940a:	687b      	ldr	r3, [r7, #4]
    940c:	224a      	movs	r2, #74	; 0x4a
    940e:	2100      	movs	r1, #0
    9410:	5499      	strb	r1, [r3, r2]
    9412:	687b      	ldr	r3, [r7, #4]
    9414:	224b      	movs	r2, #75	; 0x4b
    9416:	2100      	movs	r1, #0
    9418:	5499      	strb	r1, [r3, r2]
    941a:	687b      	ldr	r3, [r7, #4]
    941c:	224c      	movs	r2, #76	; 0x4c
    941e:	2100      	movs	r1, #0
    9420:	5499      	strb	r1, [r3, r2]
    9422:	687b      	ldr	r3, [r7, #4]
    9424:	224d      	movs	r2, #77	; 0x4d
    9426:	2100      	movs	r1, #0
    9428:	5499      	strb	r1, [r3, r2]
    942a:	687b      	ldr	r3, [r7, #4]
    942c:	224e      	movs	r2, #78	; 0x4e
    942e:	2100      	movs	r1, #0
    9430:	5499      	strb	r1, [r3, r2]
    9432:	687b      	ldr	r3, [r7, #4]
    9434:	224f      	movs	r2, #79	; 0x4f
    9436:	2100      	movs	r1, #0
    9438:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    943a:	687b      	ldr	r3, [r7, #4]
    943c:	2250      	movs	r2, #80	; 0x50
    943e:	2100      	movs	r1, #0
    9440:	5499      	strb	r1, [r3, r2]
    9442:	687b      	ldr	r3, [r7, #4]
    9444:	2251      	movs	r2, #81	; 0x51
    9446:	2100      	movs	r1, #0
    9448:	5499      	strb	r1, [r3, r2]
    944a:	687b      	ldr	r3, [r7, #4]
    944c:	2252      	movs	r2, #82	; 0x52
    944e:	2100      	movs	r1, #0
    9450:	5499      	strb	r1, [r3, r2]
    9452:	687b      	ldr	r3, [r7, #4]
    9454:	2253      	movs	r2, #83	; 0x53
    9456:	2100      	movs	r1, #0
    9458:	5499      	strb	r1, [r3, r2]
    945a:	687b      	ldr	r3, [r7, #4]
    945c:	2254      	movs	r2, #84	; 0x54
    945e:	2100      	movs	r1, #0
    9460:	5499      	strb	r1, [r3, r2]
    9462:	687b      	ldr	r3, [r7, #4]
    9464:	2255      	movs	r2, #85	; 0x55
    9466:	2100      	movs	r1, #0
    9468:	5499      	strb	r1, [r3, r2]
    946a:	687b      	ldr	r3, [r7, #4]
    946c:	2256      	movs	r2, #86	; 0x56
    946e:	2100      	movs	r1, #0
    9470:	5499      	strb	r1, [r3, r2]
    9472:	687b      	ldr	r3, [r7, #4]
    9474:	2257      	movs	r2, #87	; 0x57
    9476:	2100      	movs	r1, #0
    9478:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    947a:	687b      	ldr	r3, [r7, #4]
    947c:	2298      	movs	r2, #152	; 0x98
    947e:	2100      	movs	r1, #0
    9480:	5499      	strb	r1, [r3, r2]
    9482:	687b      	ldr	r3, [r7, #4]
    9484:	2200      	movs	r2, #0
    9486:	659a      	str	r2, [r3, #88]	; 0x58
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	2200      	movs	r2, #0
    948c:	679a      	str	r2, [r3, #120]	; 0x78
    948e:	687b      	ldr	r3, [r7, #4]
    9490:	2299      	movs	r2, #153	; 0x99
    9492:	2100      	movs	r1, #0
    9494:	5499      	strb	r1, [r3, r2]
    9496:	687b      	ldr	r3, [r7, #4]
    9498:	2200      	movs	r2, #0
    949a:	65da      	str	r2, [r3, #92]	; 0x5c
    949c:	687b      	ldr	r3, [r7, #4]
    949e:	2200      	movs	r2, #0
    94a0:	67da      	str	r2, [r3, #124]	; 0x7c
    94a2:	687b      	ldr	r3, [r7, #4]
    94a4:	229a      	movs	r2, #154	; 0x9a
    94a6:	2100      	movs	r1, #0
    94a8:	5499      	strb	r1, [r3, r2]
    94aa:	687b      	ldr	r3, [r7, #4]
    94ac:	2200      	movs	r2, #0
    94ae:	661a      	str	r2, [r3, #96]	; 0x60
    94b0:	687b      	ldr	r3, [r7, #4]
    94b2:	2280      	movs	r2, #128	; 0x80
    94b4:	2100      	movs	r1, #0
    94b6:	5099      	str	r1, [r3, r2]
    94b8:	687b      	ldr	r3, [r7, #4]
    94ba:	229b      	movs	r2, #155	; 0x9b
    94bc:	2100      	movs	r1, #0
    94be:	5499      	strb	r1, [r3, r2]
    94c0:	687b      	ldr	r3, [r7, #4]
    94c2:	2200      	movs	r2, #0
    94c4:	665a      	str	r2, [r3, #100]	; 0x64
    94c6:	687b      	ldr	r3, [r7, #4]
    94c8:	2284      	movs	r2, #132	; 0x84
    94ca:	2100      	movs	r1, #0
    94cc:	5099      	str	r1, [r3, r2]
    94ce:	687b      	ldr	r3, [r7, #4]
    94d0:	229c      	movs	r2, #156	; 0x9c
    94d2:	2100      	movs	r1, #0
    94d4:	5499      	strb	r1, [r3, r2]
    94d6:	687b      	ldr	r3, [r7, #4]
    94d8:	2200      	movs	r2, #0
    94da:	669a      	str	r2, [r3, #104]	; 0x68
    94dc:	687b      	ldr	r3, [r7, #4]
    94de:	2288      	movs	r2, #136	; 0x88
    94e0:	2100      	movs	r1, #0
    94e2:	5099      	str	r1, [r3, r2]
    94e4:	687b      	ldr	r3, [r7, #4]
    94e6:	229d      	movs	r2, #157	; 0x9d
    94e8:	2100      	movs	r1, #0
    94ea:	5499      	strb	r1, [r3, r2]
    94ec:	687b      	ldr	r3, [r7, #4]
    94ee:	2200      	movs	r2, #0
    94f0:	66da      	str	r2, [r3, #108]	; 0x6c
    94f2:	687b      	ldr	r3, [r7, #4]
    94f4:	228c      	movs	r2, #140	; 0x8c
    94f6:	2100      	movs	r1, #0
    94f8:	5099      	str	r1, [r3, r2]
    94fa:	687b      	ldr	r3, [r7, #4]
    94fc:	229e      	movs	r2, #158	; 0x9e
    94fe:	2100      	movs	r1, #0
    9500:	5499      	strb	r1, [r3, r2]
    9502:	687b      	ldr	r3, [r7, #4]
    9504:	2200      	movs	r2, #0
    9506:	671a      	str	r2, [r3, #112]	; 0x70
    9508:	687b      	ldr	r3, [r7, #4]
    950a:	2290      	movs	r2, #144	; 0x90
    950c:	2100      	movs	r1, #0
    950e:	5099      	str	r1, [r3, r2]
    9510:	687b      	ldr	r3, [r7, #4]
    9512:	229f      	movs	r2, #159	; 0x9f
    9514:	2100      	movs	r1, #0
    9516:	5499      	strb	r1, [r3, r2]
    9518:	687b      	ldr	r3, [r7, #4]
    951a:	2200      	movs	r2, #0
    951c:	675a      	str	r2, [r3, #116]	; 0x74
    951e:	687b      	ldr	r3, [r7, #4]
    9520:	2294      	movs	r2, #148	; 0x94
    9522:	2100      	movs	r1, #0
    9524:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    9526:	687b      	ldr	r3, [r7, #4]
    9528:	22a0      	movs	r2, #160	; 0xa0
    952a:	2101      	movs	r1, #1
    952c:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    952e:	687b      	ldr	r3, [r7, #4]
    9530:	22a1      	movs	r2, #161	; 0xa1
    9532:	2100      	movs	r1, #0
    9534:	5499      	strb	r1, [r3, r2]
}
    9536:	46c0      	nop			; (mov r8, r8)
    9538:	46bd      	mov	sp, r7
    953a:	b005      	add	sp, #20
    953c:	bd90      	pop	{r4, r7, pc}
    953e:	46c0      	nop			; (mov r8, r8)
    9540:	0000923d 	.word	0x0000923d
    9544:	0000e95c 	.word	0x0000e95c

00009548 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    9548:	b580      	push	{r7, lr}
    954a:	b086      	sub	sp, #24
    954c:	af00      	add	r7, sp, #0
    954e:	60b9      	str	r1, [r7, #8]
    9550:	607a      	str	r2, [r7, #4]
    9552:	230f      	movs	r3, #15
    9554:	18fb      	adds	r3, r7, r3
    9556:	1c02      	adds	r2, r0, #0
    9558:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    955a:	2300      	movs	r3, #0
    955c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    955e:	2300      	movs	r3, #0
    9560:	613b      	str	r3, [r7, #16]
    9562:	e01d      	b.n	95a0 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    9564:	68ba      	ldr	r2, [r7, #8]
    9566:	693b      	ldr	r3, [r7, #16]
    9568:	18d3      	adds	r3, r2, r3
    956a:	3310      	adds	r3, #16
    956c:	781b      	ldrb	r3, [r3, #0]
    956e:	2b01      	cmp	r3, #1
    9570:	d113      	bne.n	959a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    9572:	230f      	movs	r3, #15
    9574:	18fb      	adds	r3, r7, r3
    9576:	781b      	ldrb	r3, [r3, #0]
    9578:	4a1b      	ldr	r2, [pc, #108]	; (95e8 <_tcc_build_ctrla+0xa0>)
    957a:	5cd3      	ldrb	r3, [r2, r3]
    957c:	001a      	movs	r2, r3
    957e:	693b      	ldr	r3, [r7, #16]
    9580:	429a      	cmp	r2, r3
    9582:	da01      	bge.n	9588 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    9584:	2317      	movs	r3, #23
    9586:	e02a      	b.n	95de <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    9588:	2380      	movs	r3, #128	; 0x80
    958a:	045a      	lsls	r2, r3, #17
    958c:	693b      	ldr	r3, [r7, #16]
    958e:	409a      	lsls	r2, r3
    9590:	0013      	movs	r3, r2
    9592:	001a      	movs	r2, r3
    9594:	697b      	ldr	r3, [r7, #20]
    9596:	4313      	orrs	r3, r2
    9598:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    959a:	693b      	ldr	r3, [r7, #16]
    959c:	3301      	adds	r3, #1
    959e:	613b      	str	r3, [r7, #16]
    95a0:	693b      	ldr	r3, [r7, #16]
    95a2:	2b03      	cmp	r3, #3
    95a4:	ddde      	ble.n	9564 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    95a6:	68bb      	ldr	r3, [r7, #8]
    95a8:	22a1      	movs	r2, #161	; 0xa1
    95aa:	5c9b      	ldrb	r3, [r3, r2]
    95ac:	2b00      	cmp	r3, #0
    95ae:	d004      	beq.n	95ba <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    95b0:	697b      	ldr	r3, [r7, #20]
    95b2:	2280      	movs	r2, #128	; 0x80
    95b4:	0112      	lsls	r2, r2, #4
    95b6:	4313      	orrs	r3, r2
    95b8:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    95ba:	68bb      	ldr	r3, [r7, #8]
    95bc:	7b1b      	ldrb	r3, [r3, #12]
    95be:	031b      	lsls	r3, r3, #12
    95c0:	001a      	movs	r2, r3
    95c2:	697b      	ldr	r3, [r7, #20]
    95c4:	4313      	orrs	r3, r2
    95c6:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    95c8:	68bb      	ldr	r3, [r7, #8]
    95ca:	7adb      	ldrb	r3, [r3, #11]
    95cc:	021b      	lsls	r3, r3, #8
    95ce:	001a      	movs	r2, r3
    95d0:	697b      	ldr	r3, [r7, #20]
    95d2:	4313      	orrs	r3, r2
    95d4:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    95d6:	687b      	ldr	r3, [r7, #4]
    95d8:	697a      	ldr	r2, [r7, #20]
    95da:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    95dc:	2300      	movs	r3, #0
}
    95de:	0018      	movs	r0, r3
    95e0:	46bd      	mov	sp, r7
    95e2:	b006      	add	sp, #24
    95e4:	bd80      	pop	{r7, pc}
    95e6:	46c0      	nop			; (mov r8, r8)
    95e8:	0000e968 	.word	0x0000e968

000095ec <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    95ec:	b580      	push	{r7, lr}
    95ee:	b086      	sub	sp, #24
    95f0:	af00      	add	r7, sp, #0
    95f2:	60b9      	str	r1, [r7, #8]
    95f4:	607a      	str	r2, [r7, #4]
    95f6:	230f      	movs	r3, #15
    95f8:	18fb      	adds	r3, r7, r3
    95fa:	1c02      	adds	r2, r0, #0
    95fc:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    95fe:	2317      	movs	r3, #23
    9600:	18fb      	adds	r3, r7, r3
    9602:	2200      	movs	r2, #0
    9604:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    9606:	68bb      	ldr	r3, [r7, #8]
    9608:	7a1b      	ldrb	r3, [r3, #8]
    960a:	2b00      	cmp	r3, #0
    960c:	d007      	beq.n	961e <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    960e:	2317      	movs	r3, #23
    9610:	18fb      	adds	r3, r7, r3
    9612:	2217      	movs	r2, #23
    9614:	18ba      	adds	r2, r7, r2
    9616:	7812      	ldrb	r2, [r2, #0]
    9618:	2104      	movs	r1, #4
    961a:	430a      	orrs	r2, r1
    961c:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    961e:	68bb      	ldr	r3, [r7, #8]
    9620:	7a5b      	ldrb	r3, [r3, #9]
    9622:	2b01      	cmp	r3, #1
    9624:	d107      	bne.n	9636 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    9626:	2317      	movs	r3, #23
    9628:	18fb      	adds	r3, r7, r3
    962a:	2217      	movs	r2, #23
    962c:	18ba      	adds	r2, r7, r2
    962e:	7812      	ldrb	r2, [r2, #0]
    9630:	2101      	movs	r1, #1
    9632:	430a      	orrs	r2, r1
    9634:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    9636:	687b      	ldr	r3, [r7, #4]
    9638:	2217      	movs	r2, #23
    963a:	18ba      	adds	r2, r7, r2
    963c:	7812      	ldrb	r2, [r2, #0]
    963e:	701a      	strb	r2, [r3, #0]
}
    9640:	46c0      	nop			; (mov r8, r8)
    9642:	46bd      	mov	sp, r7
    9644:	b006      	add	sp, #24
    9646:	bd80      	pop	{r7, pc}

00009648 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    9648:	b580      	push	{r7, lr}
    964a:	b088      	sub	sp, #32
    964c:	af00      	add	r7, sp, #0
    964e:	60b9      	str	r1, [r7, #8]
    9650:	607a      	str	r2, [r7, #4]
    9652:	230f      	movs	r3, #15
    9654:	18fb      	adds	r3, r7, r3
    9656:	1c02      	adds	r2, r0, #0
    9658:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    965a:	230f      	movs	r3, #15
    965c:	18fb      	adds	r3, r7, r3
    965e:	781a      	ldrb	r2, [r3, #0]
    9660:	231b      	movs	r3, #27
    9662:	18fb      	adds	r3, r7, r3
    9664:	493e      	ldr	r1, [pc, #248]	; (9760 <_tcc_build_faults+0x118>)
    9666:	5c8a      	ldrb	r2, [r1, r2]
    9668:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    966a:	2300      	movs	r3, #0
    966c:	61fb      	str	r3, [r7, #28]
    966e:	e06e      	b.n	974e <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    9670:	69fa      	ldr	r2, [r7, #28]
    9672:	0013      	movs	r3, r2
    9674:	009b      	lsls	r3, r3, #2
    9676:	189b      	adds	r3, r3, r2
    9678:	005b      	lsls	r3, r3, #1
    967a:	3328      	adds	r3, #40	; 0x28
    967c:	68ba      	ldr	r2, [r7, #8]
    967e:	18d3      	adds	r3, r2, r3
    9680:	3304      	adds	r3, #4
    9682:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    9684:	697b      	ldr	r3, [r7, #20]
    9686:	7a5b      	ldrb	r3, [r3, #9]
    9688:	221b      	movs	r2, #27
    968a:	18ba      	adds	r2, r7, r2
    968c:	7812      	ldrb	r2, [r2, #0]
    968e:	429a      	cmp	r2, r3
    9690:	d801      	bhi.n	9696 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    9692:	2317      	movs	r3, #23
    9694:	e05f      	b.n	9756 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    9696:	697b      	ldr	r3, [r7, #20]
    9698:	781b      	ldrb	r3, [r3, #0]
    969a:	2b0f      	cmp	r3, #15
    969c:	d901      	bls.n	96a2 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    969e:	2317      	movs	r3, #23
    96a0:	e059      	b.n	9756 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    96a2:	697b      	ldr	r3, [r7, #20]
    96a4:	781b      	ldrb	r3, [r3, #0]
    96a6:	061b      	lsls	r3, r3, #24
    96a8:	001a      	movs	r2, r3
    96aa:	23f0      	movs	r3, #240	; 0xf0
    96ac:	051b      	lsls	r3, r3, #20
    96ae:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    96b0:	697b      	ldr	r3, [r7, #20]
    96b2:	785b      	ldrb	r3, [r3, #1]
    96b4:	041b      	lsls	r3, r3, #16
    96b6:	0019      	movs	r1, r3
    96b8:	23ff      	movs	r3, #255	; 0xff
    96ba:	041b      	lsls	r3, r3, #16
    96bc:	400b      	ands	r3, r1
    96be:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    96c0:	697b      	ldr	r3, [r7, #20]
    96c2:	789b      	ldrb	r3, [r3, #2]
    96c4:	2b00      	cmp	r3, #0
    96c6:	d001      	beq.n	96cc <_tcc_build_faults+0x84>
    96c8:	2380      	movs	r3, #128	; 0x80
    96ca:	e000      	b.n	96ce <_tcc_build_faults+0x86>
    96cc:	2300      	movs	r3, #0
    96ce:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    96d0:	697b      	ldr	r3, [r7, #20]
    96d2:	78db      	ldrb	r3, [r3, #3]
    96d4:	2b00      	cmp	r3, #0
    96d6:	d001      	beq.n	96dc <_tcc_build_faults+0x94>
    96d8:	2308      	movs	r3, #8
    96da:	e000      	b.n	96de <_tcc_build_faults+0x96>
    96dc:	2300      	movs	r3, #0
    96de:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    96e0:	697b      	ldr	r3, [r7, #20]
    96e2:	791b      	ldrb	r3, [r3, #4]
    96e4:	2b00      	cmp	r3, #0
    96e6:	d001      	beq.n	96ec <_tcc_build_faults+0xa4>
    96e8:	2310      	movs	r3, #16
    96ea:	e000      	b.n	96ee <_tcc_build_faults+0xa6>
    96ec:	2300      	movs	r3, #0
    96ee:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    96f0:	697b      	ldr	r3, [r7, #20]
    96f2:	795b      	ldrb	r3, [r3, #5]
    96f4:	0019      	movs	r1, r3
    96f6:	2303      	movs	r3, #3
    96f8:	400b      	ands	r3, r1
    96fa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    96fc:	697b      	ldr	r3, [r7, #20]
    96fe:	799b      	ldrb	r3, [r3, #6]
    9700:	015b      	lsls	r3, r3, #5
    9702:	0019      	movs	r1, r3
    9704:	2360      	movs	r3, #96	; 0x60
    9706:	400b      	ands	r3, r1
    9708:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    970a:	697b      	ldr	r3, [r7, #20]
    970c:	79db      	ldrb	r3, [r3, #7]
    970e:	021b      	lsls	r3, r3, #8
    9710:	0019      	movs	r1, r3
    9712:	23c0      	movs	r3, #192	; 0xc0
    9714:	009b      	lsls	r3, r3, #2
    9716:	400b      	ands	r3, r1
    9718:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    971a:	697b      	ldr	r3, [r7, #20]
    971c:	7a1b      	ldrb	r3, [r3, #8]
    971e:	031b      	lsls	r3, r3, #12
    9720:	0019      	movs	r1, r3
    9722:	23e0      	movs	r3, #224	; 0xe0
    9724:	01db      	lsls	r3, r3, #7
    9726:	400b      	ands	r3, r1
    9728:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    972a:	697b      	ldr	r3, [r7, #20]
    972c:	7a5b      	ldrb	r3, [r3, #9]
    972e:	029b      	lsls	r3, r3, #10
    9730:	0019      	movs	r1, r3
    9732:	23c0      	movs	r3, #192	; 0xc0
    9734:	011b      	lsls	r3, r3, #4
    9736:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    9738:	4313      	orrs	r3, r2
    973a:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    973c:	69fb      	ldr	r3, [r7, #28]
    973e:	009b      	lsls	r3, r3, #2
    9740:	687a      	ldr	r2, [r7, #4]
    9742:	18d3      	adds	r3, r2, r3
    9744:	693a      	ldr	r2, [r7, #16]
    9746:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    9748:	69fb      	ldr	r3, [r7, #28]
    974a:	3301      	adds	r3, #1
    974c:	61fb      	str	r3, [r7, #28]
    974e:	69fb      	ldr	r3, [r7, #28]
    9750:	2b01      	cmp	r3, #1
    9752:	dd8d      	ble.n	9670 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    9754:	2300      	movs	r3, #0
}
    9756:	0018      	movs	r0, r3
    9758:	46bd      	mov	sp, r7
    975a:	b008      	add	sp, #32
    975c:	bd80      	pop	{r7, pc}
    975e:	46c0      	nop			; (mov r8, r8)
    9760:	0000e968 	.word	0x0000e968

00009764 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    9764:	b580      	push	{r7, lr}
    9766:	b088      	sub	sp, #32
    9768:	af00      	add	r7, sp, #0
    976a:	60b9      	str	r1, [r7, #8]
    976c:	607a      	str	r2, [r7, #4]
    976e:	230f      	movs	r3, #15
    9770:	18fb      	adds	r3, r7, r3
    9772:	1c02      	adds	r2, r0, #0
    9774:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    9776:	230f      	movs	r3, #15
    9778:	18fb      	adds	r3, r7, r3
    977a:	781a      	ldrb	r2, [r3, #0]
    977c:	2317      	movs	r3, #23
    977e:	18fb      	adds	r3, r7, r3
    9780:	492d      	ldr	r1, [pc, #180]	; (9838 <_tcc_build_drvctrl+0xd4>)
    9782:	5c8a      	ldrb	r2, [r1, r2]
    9784:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    9786:	2300      	movs	r3, #0
    9788:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    978a:	2300      	movs	r3, #0
    978c:	61fb      	str	r3, [r7, #28]
    978e:	e048      	b.n	9822 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    9790:	68ba      	ldr	r2, [r7, #8]
    9792:	2150      	movs	r1, #80	; 0x50
    9794:	69fb      	ldr	r3, [r7, #28]
    9796:	18d3      	adds	r3, r2, r3
    9798:	185b      	adds	r3, r3, r1
    979a:	781b      	ldrb	r3, [r3, #0]
    979c:	2b00      	cmp	r3, #0
    979e:	d010      	beq.n	97c2 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    97a0:	2317      	movs	r3, #23
    97a2:	18fb      	adds	r3, r7, r3
    97a4:	781a      	ldrb	r2, [r3, #0]
    97a6:	69fb      	ldr	r3, [r7, #28]
    97a8:	429a      	cmp	r2, r3
    97aa:	d801      	bhi.n	97b0 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    97ac:	2317      	movs	r3, #23
    97ae:	e03f      	b.n	9830 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    97b0:	2380      	movs	r3, #128	; 0x80
    97b2:	025a      	lsls	r2, r3, #9
    97b4:	69fb      	ldr	r3, [r7, #28]
    97b6:	409a      	lsls	r2, r3
    97b8:	0013      	movs	r3, r2
    97ba:	001a      	movs	r2, r3
    97bc:	69bb      	ldr	r3, [r7, #24]
    97be:	4313      	orrs	r3, r2
    97c0:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    97c2:	68ba      	ldr	r2, [r7, #8]
    97c4:	69fb      	ldr	r3, [r7, #28]
    97c6:	331c      	adds	r3, #28
    97c8:	005b      	lsls	r3, r3, #1
    97ca:	18d3      	adds	r3, r2, r3
    97cc:	3309      	adds	r3, #9
    97ce:	781b      	ldrb	r3, [r3, #0]
    97d0:	2b00      	cmp	r3, #0
    97d2:	d023      	beq.n	981c <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    97d4:	2317      	movs	r3, #23
    97d6:	18fb      	adds	r3, r7, r3
    97d8:	781a      	ldrb	r2, [r3, #0]
    97da:	69fb      	ldr	r3, [r7, #28]
    97dc:	429a      	cmp	r2, r3
    97de:	d801      	bhi.n	97e4 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    97e0:	2317      	movs	r3, #23
    97e2:	e025      	b.n	9830 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    97e4:	68ba      	ldr	r2, [r7, #8]
    97e6:	69fb      	ldr	r3, [r7, #28]
    97e8:	331c      	adds	r3, #28
    97ea:	005b      	lsls	r3, r3, #1
    97ec:	18d3      	adds	r3, r2, r3
    97ee:	3309      	adds	r3, #9
    97f0:	781b      	ldrb	r3, [r3, #0]
    97f2:	2b02      	cmp	r3, #2
    97f4:	d10a      	bne.n	980c <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    97f6:	2302      	movs	r3, #2
    97f8:	33ff      	adds	r3, #255	; 0xff
    97fa:	001a      	movs	r2, r3
    97fc:	69fb      	ldr	r3, [r7, #28]
    97fe:	409a      	lsls	r2, r3
    9800:	0013      	movs	r3, r2
    9802:	001a      	movs	r2, r3
    9804:	69bb      	ldr	r3, [r7, #24]
    9806:	4313      	orrs	r3, r2
    9808:	61bb      	str	r3, [r7, #24]
    980a:	e007      	b.n	981c <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    980c:	2201      	movs	r2, #1
    980e:	69fb      	ldr	r3, [r7, #28]
    9810:	409a      	lsls	r2, r3
    9812:	0013      	movs	r3, r2
    9814:	001a      	movs	r2, r3
    9816:	69bb      	ldr	r3, [r7, #24]
    9818:	4313      	orrs	r3, r2
    981a:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    981c:	69fb      	ldr	r3, [r7, #28]
    981e:	3301      	adds	r3, #1
    9820:	61fb      	str	r3, [r7, #28]
    9822:	69fb      	ldr	r3, [r7, #28]
    9824:	2b07      	cmp	r3, #7
    9826:	d9b3      	bls.n	9790 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    9828:	687b      	ldr	r3, [r7, #4]
    982a:	69ba      	ldr	r2, [r7, #24]
    982c:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    982e:	2300      	movs	r3, #0
}
    9830:	0018      	movs	r0, r3
    9832:	46bd      	mov	sp, r7
    9834:	b008      	add	sp, #32
    9836:	bd80      	pop	{r7, pc}
    9838:	0000e96c 	.word	0x0000e96c

0000983c <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    983c:	b580      	push	{r7, lr}
    983e:	b088      	sub	sp, #32
    9840:	af00      	add	r7, sp, #0
    9842:	60b9      	str	r1, [r7, #8]
    9844:	607a      	str	r2, [r7, #4]
    9846:	230f      	movs	r3, #15
    9848:	18fb      	adds	r3, r7, r3
    984a:	1c02      	adds	r2, r0, #0
    984c:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    984e:	230f      	movs	r3, #15
    9850:	18fb      	adds	r3, r7, r3
    9852:	781a      	ldrb	r2, [r3, #0]
    9854:	2317      	movs	r3, #23
    9856:	18fb      	adds	r3, r7, r3
    9858:	491d      	ldr	r1, [pc, #116]	; (98d0 <_tcc_build_waves+0x94>)
    985a:	5c8a      	ldrb	r2, [r1, r2]
    985c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    985e:	68bb      	ldr	r3, [r7, #8]
    9860:	3310      	adds	r3, #16
    9862:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    9864:	693b      	ldr	r3, [r7, #16]
    9866:	7a5b      	ldrb	r3, [r3, #9]
    9868:	011b      	lsls	r3, r3, #4
    986a:	001a      	movs	r2, r3
    986c:	2330      	movs	r3, #48	; 0x30
    986e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    9870:	693b      	ldr	r3, [r7, #16]
    9872:	7a1b      	ldrb	r3, [r3, #8]
    9874:	0019      	movs	r1, r3
    9876:	2307      	movs	r3, #7
    9878:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    987a:	4313      	orrs	r3, r2
    987c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    987e:	2300      	movs	r3, #0
    9880:	61fb      	str	r3, [r7, #28]
    9882:	e01a      	b.n	98ba <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    9884:	693a      	ldr	r2, [r7, #16]
    9886:	69fb      	ldr	r3, [r7, #28]
    9888:	18d3      	adds	r3, r2, r3
    988a:	3304      	adds	r3, #4
    988c:	781b      	ldrb	r3, [r3, #0]
    988e:	2b00      	cmp	r3, #0
    9890:	d010      	beq.n	98b4 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    9892:	2317      	movs	r3, #23
    9894:	18fb      	adds	r3, r7, r3
    9896:	781a      	ldrb	r2, [r3, #0]
    9898:	69fb      	ldr	r3, [r7, #28]
    989a:	429a      	cmp	r2, r3
    989c:	dc01      	bgt.n	98a2 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    989e:	2317      	movs	r3, #23
    98a0:	e012      	b.n	98c8 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    98a2:	2380      	movs	r3, #128	; 0x80
    98a4:	025a      	lsls	r2, r3, #9
    98a6:	69fb      	ldr	r3, [r7, #28]
    98a8:	409a      	lsls	r2, r3
    98aa:	0013      	movs	r3, r2
    98ac:	001a      	movs	r2, r3
    98ae:	69bb      	ldr	r3, [r7, #24]
    98b0:	4313      	orrs	r3, r2
    98b2:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    98b4:	69fb      	ldr	r3, [r7, #28]
    98b6:	3301      	adds	r3, #1
    98b8:	61fb      	str	r3, [r7, #28]
    98ba:	69fb      	ldr	r3, [r7, #28]
    98bc:	2b03      	cmp	r3, #3
    98be:	dde1      	ble.n	9884 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    98c0:	687b      	ldr	r3, [r7, #4]
    98c2:	69ba      	ldr	r2, [r7, #24]
    98c4:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    98c6:	2300      	movs	r3, #0
}
    98c8:	0018      	movs	r0, r3
    98ca:	46bd      	mov	sp, r7
    98cc:	b008      	add	sp, #32
    98ce:	bd80      	pop	{r7, pc}
    98d0:	0000e968 	.word	0x0000e968

000098d4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    98d4:	b590      	push	{r4, r7, lr}
    98d6:	b091      	sub	sp, #68	; 0x44
    98d8:	af00      	add	r7, sp, #0
    98da:	60f8      	str	r0, [r7, #12]
    98dc:	60b9      	str	r1, [r7, #8]
    98de:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    98e0:	233b      	movs	r3, #59	; 0x3b
    98e2:	18fc      	adds	r4, r7, r3
    98e4:	68bb      	ldr	r3, [r7, #8]
    98e6:	0018      	movs	r0, r3
    98e8:	4bc4      	ldr	r3, [pc, #784]	; (9bfc <tcc_init+0x328>)
    98ea:	4798      	blx	r3
    98ec:	0003      	movs	r3, r0
    98ee:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    98f0:	233b      	movs	r3, #59	; 0x3b
    98f2:	18fb      	adds	r3, r7, r3
    98f4:	781a      	ldrb	r2, [r3, #0]
    98f6:	4bc2      	ldr	r3, [pc, #776]	; (9c00 <tcc_init+0x32c>)
    98f8:	0092      	lsls	r2, r2, #2
    98fa:	58d3      	ldr	r3, [r2, r3]
    98fc:	0019      	movs	r1, r3
    98fe:	2002      	movs	r0, #2
    9900:	4bc0      	ldr	r3, [pc, #768]	; (9c04 <tcc_init+0x330>)
    9902:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    9904:	68bb      	ldr	r3, [r7, #8]
    9906:	681b      	ldr	r3, [r3, #0]
    9908:	2202      	movs	r2, #2
    990a:	4013      	ands	r3, r2
    990c:	d001      	beq.n	9912 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    990e:	231c      	movs	r3, #28
    9910:	e1be      	b.n	9c90 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    9912:	68bb      	ldr	r3, [r7, #8]
    9914:	681b      	ldr	r3, [r3, #0]
    9916:	2201      	movs	r2, #1
    9918:	4013      	ands	r3, r2
    991a:	d001      	beq.n	9920 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    991c:	231c      	movs	r3, #28
    991e:	e1b7      	b.n	9c90 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    9920:	233b      	movs	r3, #59	; 0x3b
    9922:	18fb      	adds	r3, r7, r3
    9924:	781a      	ldrb	r2, [r3, #0]
    9926:	4bb8      	ldr	r3, [pc, #736]	; (9c08 <tcc_init+0x334>)
    9928:	0092      	lsls	r2, r2, #2
    992a:	58d3      	ldr	r3, [r2, r3]
    992c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    992e:	687b      	ldr	r3, [r7, #4]
    9930:	681a      	ldr	r2, [r3, #0]
    9932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9934:	429a      	cmp	r2, r3
    9936:	d804      	bhi.n	9942 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    9938:	687b      	ldr	r3, [r7, #4]
    993a:	685a      	ldr	r2, [r3, #4]
    993c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    993e:	429a      	cmp	r2, r3
    9940:	d901      	bls.n	9946 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    9942:	2317      	movs	r3, #23
    9944:	e1a4      	b.n	9c90 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    9946:	2300      	movs	r3, #0
    9948:	63fb      	str	r3, [r7, #60]	; 0x3c
    994a:	e00e      	b.n	996a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    994c:	687a      	ldr	r2, [r7, #4]
    994e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9950:	3306      	adds	r3, #6
    9952:	009b      	lsls	r3, r3, #2
    9954:	18d3      	adds	r3, r2, r3
    9956:	3304      	adds	r3, #4
    9958:	681a      	ldr	r2, [r3, #0]
    995a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    995c:	429a      	cmp	r2, r3
    995e:	d901      	bls.n	9964 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    9960:	2317      	movs	r3, #23
    9962:	e195      	b.n	9c90 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    9964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9966:	3301      	adds	r3, #1
    9968:	63fb      	str	r3, [r7, #60]	; 0x3c
    996a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    996c:	2b03      	cmp	r3, #3
    996e:	dded      	ble.n	994c <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    9970:	2300      	movs	r3, #0
    9972:	63fb      	str	r3, [r7, #60]	; 0x3c
    9974:	e019      	b.n	99aa <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    9976:	687a      	ldr	r2, [r7, #4]
    9978:	2198      	movs	r1, #152	; 0x98
    997a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    997c:	18d3      	adds	r3, r2, r3
    997e:	185b      	adds	r3, r3, r1
    9980:	781b      	ldrb	r3, [r3, #0]
    9982:	2201      	movs	r2, #1
    9984:	4053      	eors	r3, r2
    9986:	b2db      	uxtb	r3, r3
    9988:	2b00      	cmp	r3, #0
    998a:	d10a      	bne.n	99a2 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    998c:	233b      	movs	r3, #59	; 0x3b
    998e:	18fb      	adds	r3, r7, r3
    9990:	781b      	ldrb	r3, [r3, #0]
    9992:	4a9e      	ldr	r2, [pc, #632]	; (9c0c <tcc_init+0x338>)
    9994:	5cd3      	ldrb	r3, [r2, r3]
    9996:	001a      	movs	r2, r3
    9998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    999a:	429a      	cmp	r2, r3
    999c:	dc02      	bgt.n	99a4 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    999e:	2317      	movs	r3, #23
    99a0:	e176      	b.n	9c90 <tcc_init+0x3bc>
			continue;
    99a2:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    99a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    99a6:	3301      	adds	r3, #1
    99a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    99aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    99ac:	2b07      	cmp	r3, #7
    99ae:	dde2      	ble.n	9976 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    99b0:	2300      	movs	r3, #0
    99b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    99b4:	2333      	movs	r3, #51	; 0x33
    99b6:	18fc      	adds	r4, r7, r3
    99b8:	232c      	movs	r3, #44	; 0x2c
    99ba:	18fa      	adds	r2, r7, r3
    99bc:	6879      	ldr	r1, [r7, #4]
    99be:	233b      	movs	r3, #59	; 0x3b
    99c0:	18fb      	adds	r3, r7, r3
    99c2:	781b      	ldrb	r3, [r3, #0]
    99c4:	0018      	movs	r0, r3
    99c6:	4b92      	ldr	r3, [pc, #584]	; (9c10 <tcc_init+0x33c>)
    99c8:	4798      	blx	r3
    99ca:	0003      	movs	r3, r0
    99cc:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    99ce:	2333      	movs	r3, #51	; 0x33
    99d0:	18fb      	adds	r3, r7, r3
    99d2:	781b      	ldrb	r3, [r3, #0]
    99d4:	2b00      	cmp	r3, #0
    99d6:	d003      	beq.n	99e0 <tcc_init+0x10c>
		return status;
    99d8:	2333      	movs	r3, #51	; 0x33
    99da:	18fb      	adds	r3, r7, r3
    99dc:	781b      	ldrb	r3, [r3, #0]
    99de:	e157      	b.n	9c90 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    99e0:	232b      	movs	r3, #43	; 0x2b
    99e2:	18fa      	adds	r2, r7, r3
    99e4:	6879      	ldr	r1, [r7, #4]
    99e6:	233b      	movs	r3, #59	; 0x3b
    99e8:	18fb      	adds	r3, r7, r3
    99ea:	781b      	ldrb	r3, [r3, #0]
    99ec:	0018      	movs	r0, r3
    99ee:	4b89      	ldr	r3, [pc, #548]	; (9c14 <tcc_init+0x340>)
    99f0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    99f2:	2333      	movs	r3, #51	; 0x33
    99f4:	18fc      	adds	r4, r7, r3
    99f6:	2320      	movs	r3, #32
    99f8:	18fa      	adds	r2, r7, r3
    99fa:	6879      	ldr	r1, [r7, #4]
    99fc:	233b      	movs	r3, #59	; 0x3b
    99fe:	18fb      	adds	r3, r7, r3
    9a00:	781b      	ldrb	r3, [r3, #0]
    9a02:	0018      	movs	r0, r3
    9a04:	4b84      	ldr	r3, [pc, #528]	; (9c18 <tcc_init+0x344>)
    9a06:	4798      	blx	r3
    9a08:	0003      	movs	r3, r0
    9a0a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    9a0c:	2333      	movs	r3, #51	; 0x33
    9a0e:	18fb      	adds	r3, r7, r3
    9a10:	781b      	ldrb	r3, [r3, #0]
    9a12:	2b00      	cmp	r3, #0
    9a14:	d003      	beq.n	9a1e <tcc_init+0x14a>
		return status;
    9a16:	2333      	movs	r3, #51	; 0x33
    9a18:	18fb      	adds	r3, r7, r3
    9a1a:	781b      	ldrb	r3, [r3, #0]
    9a1c:	e138      	b.n	9c90 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    9a1e:	2300      	movs	r3, #0
    9a20:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    9a22:	2333      	movs	r3, #51	; 0x33
    9a24:	18fc      	adds	r4, r7, r3
    9a26:	231c      	movs	r3, #28
    9a28:	18fa      	adds	r2, r7, r3
    9a2a:	6879      	ldr	r1, [r7, #4]
    9a2c:	233b      	movs	r3, #59	; 0x3b
    9a2e:	18fb      	adds	r3, r7, r3
    9a30:	781b      	ldrb	r3, [r3, #0]
    9a32:	0018      	movs	r0, r3
    9a34:	4b79      	ldr	r3, [pc, #484]	; (9c1c <tcc_init+0x348>)
    9a36:	4798      	blx	r3
    9a38:	0003      	movs	r3, r0
    9a3a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    9a3c:	2333      	movs	r3, #51	; 0x33
    9a3e:	18fb      	adds	r3, r7, r3
    9a40:	781b      	ldrb	r3, [r3, #0]
    9a42:	2b00      	cmp	r3, #0
    9a44:	d003      	beq.n	9a4e <tcc_init+0x17a>
		return status;
    9a46:	2333      	movs	r3, #51	; 0x33
    9a48:	18fb      	adds	r3, r7, r3
    9a4a:	781b      	ldrb	r3, [r3, #0]
    9a4c:	e120      	b.n	9c90 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    9a4e:	2333      	movs	r3, #51	; 0x33
    9a50:	18fc      	adds	r4, r7, r3
    9a52:	2318      	movs	r3, #24
    9a54:	18fa      	adds	r2, r7, r3
    9a56:	6879      	ldr	r1, [r7, #4]
    9a58:	233b      	movs	r3, #59	; 0x3b
    9a5a:	18fb      	adds	r3, r7, r3
    9a5c:	781b      	ldrb	r3, [r3, #0]
    9a5e:	0018      	movs	r0, r3
    9a60:	4b6f      	ldr	r3, [pc, #444]	; (9c20 <tcc_init+0x34c>)
    9a62:	4798      	blx	r3
    9a64:	0003      	movs	r3, r0
    9a66:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    9a68:	2333      	movs	r3, #51	; 0x33
    9a6a:	18fb      	adds	r3, r7, r3
    9a6c:	781b      	ldrb	r3, [r3, #0]
    9a6e:	2b00      	cmp	r3, #0
    9a70:	d003      	beq.n	9a7a <tcc_init+0x1a6>
		return status;
    9a72:	2333      	movs	r3, #51	; 0x33
    9a74:	18fb      	adds	r3, r7, r3
    9a76:	781b      	ldrb	r3, [r3, #0]
    9a78:	e10a      	b.n	9c90 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    9a7a:	2300      	movs	r3, #0
    9a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    9a7e:	e009      	b.n	9a94 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    9a80:	68fa      	ldr	r2, [r7, #12]
    9a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9a84:	009b      	lsls	r3, r3, #2
    9a86:	18d3      	adds	r3, r2, r3
    9a88:	3304      	adds	r3, #4
    9a8a:	2200      	movs	r2, #0
    9a8c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    9a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9a90:	3301      	adds	r3, #1
    9a92:	63fb      	str	r3, [r7, #60]	; 0x3c
    9a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9a96:	2b0b      	cmp	r3, #11
    9a98:	ddf2      	ble.n	9a80 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    9a9a:	68fb      	ldr	r3, [r7, #12]
    9a9c:	2200      	movs	r2, #0
    9a9e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    9aa0:	68fb      	ldr	r3, [r7, #12]
    9aa2:	2200      	movs	r2, #0
    9aa4:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    9aa6:	233b      	movs	r3, #59	; 0x3b
    9aa8:	18fb      	adds	r3, r7, r3
    9aaa:	781a      	ldrb	r2, [r3, #0]
    9aac:	4b5d      	ldr	r3, [pc, #372]	; (9c24 <tcc_init+0x350>)
    9aae:	0092      	lsls	r2, r2, #2
    9ab0:	68f9      	ldr	r1, [r7, #12]
    9ab2:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    9ab4:	68fb      	ldr	r3, [r7, #12]
    9ab6:	68ba      	ldr	r2, [r7, #8]
    9ab8:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    9aba:	687b      	ldr	r3, [r7, #4]
    9abc:	22a0      	movs	r2, #160	; 0xa0
    9abe:	5c99      	ldrb	r1, [r3, r2]
    9ac0:	68fb      	ldr	r3, [r7, #12]
    9ac2:	223c      	movs	r2, #60	; 0x3c
    9ac4:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    9ac6:	2314      	movs	r3, #20
    9ac8:	18fb      	adds	r3, r7, r3
    9aca:	0018      	movs	r0, r3
    9acc:	4b56      	ldr	r3, [pc, #344]	; (9c28 <tcc_init+0x354>)
    9ace:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    9ad0:	687b      	ldr	r3, [r7, #4]
    9ad2:	7a9a      	ldrb	r2, [r3, #10]
    9ad4:	2314      	movs	r3, #20
    9ad6:	18fb      	adds	r3, r7, r3
    9ad8:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    9ada:	233b      	movs	r3, #59	; 0x3b
    9adc:	18fb      	adds	r3, r7, r3
    9ade:	781b      	ldrb	r3, [r3, #0]
    9ae0:	4a52      	ldr	r2, [pc, #328]	; (9c2c <tcc_init+0x358>)
    9ae2:	5cd3      	ldrb	r3, [r2, r3]
    9ae4:	2214      	movs	r2, #20
    9ae6:	18ba      	adds	r2, r7, r2
    9ae8:	0011      	movs	r1, r2
    9aea:	0018      	movs	r0, r3
    9aec:	4b50      	ldr	r3, [pc, #320]	; (9c30 <tcc_init+0x35c>)
    9aee:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    9af0:	233b      	movs	r3, #59	; 0x3b
    9af2:	18fb      	adds	r3, r7, r3
    9af4:	781b      	ldrb	r3, [r3, #0]
    9af6:	4a4d      	ldr	r2, [pc, #308]	; (9c2c <tcc_init+0x358>)
    9af8:	5cd3      	ldrb	r3, [r2, r3]
    9afa:	0018      	movs	r0, r3
    9afc:	4b4d      	ldr	r3, [pc, #308]	; (9c34 <tcc_init+0x360>)
    9afe:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    9b00:	2300      	movs	r3, #0
    9b02:	63fb      	str	r3, [r7, #60]	; 0x3c
    9b04:	e02d      	b.n	9b62 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    9b06:	687a      	ldr	r2, [r7, #4]
    9b08:	2198      	movs	r1, #152	; 0x98
    9b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9b0c:	18d3      	adds	r3, r2, r3
    9b0e:	185b      	adds	r3, r3, r1
    9b10:	781b      	ldrb	r3, [r3, #0]
    9b12:	2201      	movs	r2, #1
    9b14:	4053      	eors	r3, r2
    9b16:	b2db      	uxtb	r3, r3
    9b18:	2b00      	cmp	r3, #0
    9b1a:	d11e      	bne.n	9b5a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    9b1c:	2310      	movs	r3, #16
    9b1e:	18fb      	adds	r3, r7, r3
    9b20:	0018      	movs	r0, r3
    9b22:	4b45      	ldr	r3, [pc, #276]	; (9c38 <tcc_init+0x364>)
    9b24:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    9b26:	687b      	ldr	r3, [r7, #4]
    9b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9b2a:	321e      	adds	r2, #30
    9b2c:	0092      	lsls	r2, r2, #2
    9b2e:	58d3      	ldr	r3, [r2, r3]
    9b30:	b2da      	uxtb	r2, r3
    9b32:	2310      	movs	r3, #16
    9b34:	18fb      	adds	r3, r7, r3
    9b36:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    9b38:	2310      	movs	r3, #16
    9b3a:	18fb      	adds	r3, r7, r3
    9b3c:	2201      	movs	r2, #1
    9b3e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    9b40:	687b      	ldr	r3, [r7, #4]
    9b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9b44:	3216      	adds	r2, #22
    9b46:	0092      	lsls	r2, r2, #2
    9b48:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    9b4a:	b2db      	uxtb	r3, r3
    9b4c:	2210      	movs	r2, #16
    9b4e:	18ba      	adds	r2, r7, r2
    9b50:	0011      	movs	r1, r2
    9b52:	0018      	movs	r0, r3
    9b54:	4b39      	ldr	r3, [pc, #228]	; (9c3c <tcc_init+0x368>)
    9b56:	4798      	blx	r3
    9b58:	e000      	b.n	9b5c <tcc_init+0x288>
			continue;
    9b5a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    9b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9b5e:	3301      	adds	r3, #1
    9b60:	63fb      	str	r3, [r7, #60]	; 0x3c
    9b62:	233b      	movs	r3, #59	; 0x3b
    9b64:	18fb      	adds	r3, r7, r3
    9b66:	781b      	ldrb	r3, [r3, #0]
    9b68:	4a28      	ldr	r2, [pc, #160]	; (9c0c <tcc_init+0x338>)
    9b6a:	5cd3      	ldrb	r3, [r2, r3]
    9b6c:	001a      	movs	r2, r3
    9b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9b70:	429a      	cmp	r2, r3
    9b72:	dcc8      	bgt.n	9b06 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    9b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9b76:	68bb      	ldr	r3, [r7, #8]
    9b78:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    9b7a:	46c0      	nop			; (mov r8, r8)
    9b7c:	68bb      	ldr	r3, [r7, #8]
    9b7e:	689b      	ldr	r3, [r3, #8]
    9b80:	2204      	movs	r2, #4
    9b82:	4013      	ands	r3, r2
    9b84:	d1fa      	bne.n	9b7c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    9b86:	68bb      	ldr	r3, [r7, #8]
    9b88:	22ff      	movs	r2, #255	; 0xff
    9b8a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    9b8c:	46c0      	nop			; (mov r8, r8)
    9b8e:	68bb      	ldr	r3, [r7, #8]
    9b90:	689b      	ldr	r3, [r3, #8]
    9b92:	2204      	movs	r2, #4
    9b94:	4013      	ands	r3, r2
    9b96:	d1fa      	bne.n	9b8e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    9b98:	232b      	movs	r3, #43	; 0x2b
    9b9a:	18fb      	adds	r3, r7, r3
    9b9c:	781a      	ldrb	r2, [r3, #0]
    9b9e:	68bb      	ldr	r3, [r7, #8]
    9ba0:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    9ba2:	2320      	movs	r3, #32
    9ba4:	18fb      	adds	r3, r7, r3
    9ba6:	681a      	ldr	r2, [r3, #0]
    9ba8:	68bb      	ldr	r3, [r7, #8]
    9baa:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    9bac:	2320      	movs	r3, #32
    9bae:	18fb      	adds	r3, r7, r3
    9bb0:	685a      	ldr	r2, [r3, #4]
    9bb2:	68bb      	ldr	r3, [r7, #8]
    9bb4:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    9bb6:	69fa      	ldr	r2, [r7, #28]
    9bb8:	68bb      	ldr	r3, [r7, #8]
    9bba:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    9bbc:	46c0      	nop			; (mov r8, r8)
    9bbe:	68bb      	ldr	r3, [r7, #8]
    9bc0:	689b      	ldr	r3, [r3, #8]
    9bc2:	4a1f      	ldr	r2, [pc, #124]	; (9c40 <tcc_init+0x36c>)
    9bc4:	4013      	ands	r3, r2
    9bc6:	d1fa      	bne.n	9bbe <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    9bc8:	69ba      	ldr	r2, [r7, #24]
    9bca:	68bb      	ldr	r3, [r7, #8]
    9bcc:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    9bce:	46c0      	nop			; (mov r8, r8)
    9bd0:	68bb      	ldr	r3, [r7, #8]
    9bd2:	689b      	ldr	r3, [r3, #8]
    9bd4:	2210      	movs	r2, #16
    9bd6:	4013      	ands	r3, r2
    9bd8:	d1fa      	bne.n	9bd0 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    9bda:	687b      	ldr	r3, [r7, #4]
    9bdc:	681a      	ldr	r2, [r3, #0]
    9bde:	68bb      	ldr	r3, [r7, #8]
    9be0:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    9be2:	46c0      	nop			; (mov r8, r8)
    9be4:	68bb      	ldr	r3, [r7, #8]
    9be6:	689b      	ldr	r3, [r3, #8]
    9be8:	4a16      	ldr	r2, [pc, #88]	; (9c44 <tcc_init+0x370>)
    9bea:	4013      	ands	r3, r2
    9bec:	d1fa      	bne.n	9be4 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    9bee:	687b      	ldr	r3, [r7, #4]
    9bf0:	685a      	ldr	r2, [r3, #4]
    9bf2:	68bb      	ldr	r3, [r7, #8]
    9bf4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    9bf6:	2300      	movs	r3, #0
    9bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    9bfa:	e03f      	b.n	9c7c <tcc_init+0x3a8>
    9bfc:	0000923d 	.word	0x0000923d
    9c00:	0000e950 	.word	0x0000e950
    9c04:	000091b9 	.word	0x000091b9
    9c08:	0000e95c 	.word	0x0000e95c
    9c0c:	0000e96c 	.word	0x0000e96c
    9c10:	00009549 	.word	0x00009549
    9c14:	000095ed 	.word	0x000095ed
    9c18:	00009649 	.word	0x00009649
    9c1c:	00009765 	.word	0x00009765
    9c20:	0000983d 	.word	0x0000983d
    9c24:	20000458 	.word	0x20000458
    9c28:	000091a1 	.word	0x000091a1
    9c2c:	0000e94c 	.word	0x0000e94c
    9c30:	00008e2d 	.word	0x00008e2d
    9c34:	00008e71 	.word	0x00008e71
    9c38:	00009215 	.word	0x00009215
    9c3c:	00009119 	.word	0x00009119
    9c40:	00020040 	.word	0x00020040
    9c44:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    9c48:	46c0      	nop			; (mov r8, r8)
    9c4a:	68bb      	ldr	r3, [r7, #8]
    9c4c:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    9c4e:	4912      	ldr	r1, [pc, #72]	; (9c98 <tcc_init+0x3c4>)
    9c50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9c52:	4091      	lsls	r1, r2
    9c54:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    9c56:	4013      	ands	r3, r2
    9c58:	d1f7      	bne.n	9c4a <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    9c5a:	687a      	ldr	r2, [r7, #4]
    9c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9c5e:	3306      	adds	r3, #6
    9c60:	009b      	lsls	r3, r3, #2
    9c62:	18d3      	adds	r3, r2, r3
    9c64:	3304      	adds	r3, #4
    9c66:	681a      	ldr	r2, [r3, #0]
    9c68:	68b9      	ldr	r1, [r7, #8]
    9c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9c6c:	3310      	adds	r3, #16
    9c6e:	009b      	lsls	r3, r3, #2
    9c70:	18cb      	adds	r3, r1, r3
    9c72:	3304      	adds	r3, #4
    9c74:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    9c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9c78:	3301      	adds	r3, #1
    9c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    9c7c:	233b      	movs	r3, #59	; 0x3b
    9c7e:	18fb      	adds	r3, r7, r3
    9c80:	781b      	ldrb	r3, [r3, #0]
    9c82:	4a06      	ldr	r2, [pc, #24]	; (9c9c <tcc_init+0x3c8>)
    9c84:	5cd3      	ldrb	r3, [r2, r3]
    9c86:	001a      	movs	r2, r3
    9c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9c8a:	429a      	cmp	r2, r3
    9c8c:	dcdc      	bgt.n	9c48 <tcc_init+0x374>
	}

	return STATUS_OK;
    9c8e:	2300      	movs	r3, #0
}
    9c90:	0018      	movs	r0, r3
    9c92:	46bd      	mov	sp, r7
    9c94:	b011      	add	sp, #68	; 0x44
    9c96:	bd90      	pop	{r4, r7, pc}
    9c98:	00080100 	.word	0x00080100
    9c9c:	0000e968 	.word	0x0000e968

00009ca0 <system_interrupt_enable>:
{
    9ca0:	b580      	push	{r7, lr}
    9ca2:	b082      	sub	sp, #8
    9ca4:	af00      	add	r7, sp, #0
    9ca6:	0002      	movs	r2, r0
    9ca8:	1dfb      	adds	r3, r7, #7
    9caa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9cac:	4b06      	ldr	r3, [pc, #24]	; (9cc8 <system_interrupt_enable+0x28>)
    9cae:	1dfa      	adds	r2, r7, #7
    9cb0:	7812      	ldrb	r2, [r2, #0]
    9cb2:	0011      	movs	r1, r2
    9cb4:	221f      	movs	r2, #31
    9cb6:	400a      	ands	r2, r1
    9cb8:	2101      	movs	r1, #1
    9cba:	4091      	lsls	r1, r2
    9cbc:	000a      	movs	r2, r1
    9cbe:	601a      	str	r2, [r3, #0]
}
    9cc0:	46c0      	nop			; (mov r8, r8)
    9cc2:	46bd      	mov	sp, r7
    9cc4:	b002      	add	sp, #8
    9cc6:	bd80      	pop	{r7, pc}
    9cc8:	e000e100 	.word	0xe000e100

00009ccc <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    9ccc:	b580      	push	{r7, lr}
    9cce:	b082      	sub	sp, #8
    9cd0:	af00      	add	r7, sp, #0
    9cd2:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    9cd4:	4a04      	ldr	r2, [pc, #16]	; (9ce8 <_tcc_interrupt_get_interrupt_vector+0x1c>)
    9cd6:	687b      	ldr	r3, [r7, #4]
    9cd8:	18d3      	adds	r3, r2, r3
    9cda:	781b      	ldrb	r3, [r3, #0]
    9cdc:	b25b      	sxtb	r3, r3
}
    9cde:	0018      	movs	r0, r3
    9ce0:	46bd      	mov	sp, r7
    9ce2:	b002      	add	sp, #8
    9ce4:	bd80      	pop	{r7, pc}
    9ce6:	46c0      	nop			; (mov r8, r8)
    9ce8:	2000000c 	.word	0x2000000c

00009cec <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    9cec:	b580      	push	{r7, lr}
    9cee:	b084      	sub	sp, #16
    9cf0:	af00      	add	r7, sp, #0
    9cf2:	60f8      	str	r0, [r7, #12]
    9cf4:	60b9      	str	r1, [r7, #8]
    9cf6:	1dfb      	adds	r3, r7, #7
    9cf8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    9cfa:	1dfb      	adds	r3, r7, #7
    9cfc:	781b      	ldrb	r3, [r3, #0]
    9cfe:	68fa      	ldr	r2, [r7, #12]
    9d00:	009b      	lsls	r3, r3, #2
    9d02:	18d3      	adds	r3, r2, r3
    9d04:	3304      	adds	r3, #4
    9d06:	68ba      	ldr	r2, [r7, #8]
    9d08:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    9d0a:	68fb      	ldr	r3, [r7, #12]
    9d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9d0e:	1dfb      	adds	r3, r7, #7
    9d10:	7819      	ldrb	r1, [r3, #0]
    9d12:	4b05      	ldr	r3, [pc, #20]	; (9d28 <tcc_register_callback+0x3c>)
    9d14:	0089      	lsls	r1, r1, #2
    9d16:	58cb      	ldr	r3, [r1, r3]
    9d18:	431a      	orrs	r2, r3
    9d1a:	68fb      	ldr	r3, [r7, #12]
    9d1c:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    9d1e:	2300      	movs	r3, #0
}
    9d20:	0018      	movs	r0, r3
    9d22:	46bd      	mov	sp, r7
    9d24:	b004      	add	sp, #16
    9d26:	bd80      	pop	{r7, pc}
    9d28:	0000e970 	.word	0x0000e970

00009d2c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    9d2c:	b580      	push	{r7, lr}
    9d2e:	b082      	sub	sp, #8
    9d30:	af00      	add	r7, sp, #0
    9d32:	6078      	str	r0, [r7, #4]
    9d34:	000a      	movs	r2, r1
    9d36:	1cfb      	adds	r3, r7, #3
    9d38:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    9d3a:	687b      	ldr	r3, [r7, #4]
    9d3c:	681b      	ldr	r3, [r3, #0]
    9d3e:	0018      	movs	r0, r3
    9d40:	4b0f      	ldr	r3, [pc, #60]	; (9d80 <tcc_enable_callback+0x54>)
    9d42:	4798      	blx	r3
    9d44:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    9d46:	0018      	movs	r0, r3
    9d48:	4b0e      	ldr	r3, [pc, #56]	; (9d84 <tcc_enable_callback+0x58>)
    9d4a:	4798      	blx	r3
    9d4c:	0003      	movs	r3, r0
    9d4e:	0018      	movs	r0, r3
    9d50:	4b0d      	ldr	r3, [pc, #52]	; (9d88 <tcc_enable_callback+0x5c>)
    9d52:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    9d54:	687b      	ldr	r3, [r7, #4]
    9d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    9d58:	1cfb      	adds	r3, r7, #3
    9d5a:	7819      	ldrb	r1, [r3, #0]
    9d5c:	4b0b      	ldr	r3, [pc, #44]	; (9d8c <tcc_enable_callback+0x60>)
    9d5e:	0089      	lsls	r1, r1, #2
    9d60:	58cb      	ldr	r3, [r1, r3]
    9d62:	431a      	orrs	r2, r3
    9d64:	687b      	ldr	r3, [r7, #4]
    9d66:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    9d68:	687b      	ldr	r3, [r7, #4]
    9d6a:	681b      	ldr	r3, [r3, #0]
    9d6c:	1cfa      	adds	r2, r7, #3
    9d6e:	7811      	ldrb	r1, [r2, #0]
    9d70:	4a06      	ldr	r2, [pc, #24]	; (9d8c <tcc_enable_callback+0x60>)
    9d72:	0089      	lsls	r1, r1, #2
    9d74:	588a      	ldr	r2, [r1, r2]
    9d76:	629a      	str	r2, [r3, #40]	; 0x28
}
    9d78:	46c0      	nop			; (mov r8, r8)
    9d7a:	46bd      	mov	sp, r7
    9d7c:	b002      	add	sp, #8
    9d7e:	bd80      	pop	{r7, pc}
    9d80:	0000923d 	.word	0x0000923d
    9d84:	00009ccd 	.word	0x00009ccd
    9d88:	00009ca1 	.word	0x00009ca1
    9d8c:	0000e970 	.word	0x0000e970

00009d90 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    9d90:	b580      	push	{r7, lr}
    9d92:	af00      	add	r7, sp, #0
    9d94:	2000      	movs	r0, #0
    9d96:	4b02      	ldr	r3, [pc, #8]	; (9da0 <TCC0_Handler+0x10>)
    9d98:	4798      	blx	r3
    9d9a:	46c0      	nop			; (mov r8, r8)
    9d9c:	46bd      	mov	sp, r7
    9d9e:	bd80      	pop	{r7, pc}
    9da0:	00009dcd 	.word	0x00009dcd

00009da4 <TCC1_Handler>:
    9da4:	b580      	push	{r7, lr}
    9da6:	af00      	add	r7, sp, #0
    9da8:	2001      	movs	r0, #1
    9daa:	4b02      	ldr	r3, [pc, #8]	; (9db4 <TCC1_Handler+0x10>)
    9dac:	4798      	blx	r3
    9dae:	46c0      	nop			; (mov r8, r8)
    9db0:	46bd      	mov	sp, r7
    9db2:	bd80      	pop	{r7, pc}
    9db4:	00009dcd 	.word	0x00009dcd

00009db8 <TCC2_Handler>:
    9db8:	b580      	push	{r7, lr}
    9dba:	af00      	add	r7, sp, #0
    9dbc:	2002      	movs	r0, #2
    9dbe:	4b02      	ldr	r3, [pc, #8]	; (9dc8 <TCC2_Handler+0x10>)
    9dc0:	4798      	blx	r3
    9dc2:	46c0      	nop			; (mov r8, r8)
    9dc4:	46bd      	mov	sp, r7
    9dc6:	bd80      	pop	{r7, pc}
    9dc8:	00009dcd 	.word	0x00009dcd

00009dcc <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    9dcc:	b580      	push	{r7, lr}
    9dce:	b086      	sub	sp, #24
    9dd0:	af00      	add	r7, sp, #0
    9dd2:	0002      	movs	r2, r0
    9dd4:	1dfb      	adds	r3, r7, #7
    9dd6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    9dd8:	1dfb      	adds	r3, r7, #7
    9dda:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    9ddc:	4b18      	ldr	r3, [pc, #96]	; (9e40 <_tcc_interrupt_handler+0x74>)
    9dde:	0092      	lsls	r2, r2, #2
    9de0:	58d3      	ldr	r3, [r2, r3]
    9de2:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    9de4:	693b      	ldr	r3, [r7, #16]
    9de6:	681b      	ldr	r3, [r3, #0]
    9de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    9dea:	693b      	ldr	r3, [r7, #16]
    9dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    9dee:	401a      	ands	r2, r3
			module->enable_callback_mask);
    9df0:	693b      	ldr	r3, [r7, #16]
    9df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    9df4:	4013      	ands	r3, r2
    9df6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    9df8:	2300      	movs	r3, #0
    9dfa:	617b      	str	r3, [r7, #20]
    9dfc:	e019      	b.n	9e32 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    9dfe:	4b11      	ldr	r3, [pc, #68]	; (9e44 <_tcc_interrupt_handler+0x78>)
    9e00:	697a      	ldr	r2, [r7, #20]
    9e02:	0092      	lsls	r2, r2, #2
    9e04:	58d3      	ldr	r3, [r2, r3]
    9e06:	68fa      	ldr	r2, [r7, #12]
    9e08:	4013      	ands	r3, r2
    9e0a:	d00f      	beq.n	9e2c <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    9e0c:	693a      	ldr	r2, [r7, #16]
    9e0e:	697b      	ldr	r3, [r7, #20]
    9e10:	009b      	lsls	r3, r3, #2
    9e12:	18d3      	adds	r3, r2, r3
    9e14:	3304      	adds	r3, #4
    9e16:	681b      	ldr	r3, [r3, #0]
    9e18:	693a      	ldr	r2, [r7, #16]
    9e1a:	0010      	movs	r0, r2
    9e1c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    9e1e:	693b      	ldr	r3, [r7, #16]
    9e20:	681b      	ldr	r3, [r3, #0]
    9e22:	4a08      	ldr	r2, [pc, #32]	; (9e44 <_tcc_interrupt_handler+0x78>)
    9e24:	6979      	ldr	r1, [r7, #20]
    9e26:	0089      	lsls	r1, r1, #2
    9e28:	588a      	ldr	r2, [r1, r2]
    9e2a:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    9e2c:	697b      	ldr	r3, [r7, #20]
    9e2e:	3301      	adds	r3, #1
    9e30:	617b      	str	r3, [r7, #20]
    9e32:	697b      	ldr	r3, [r7, #20]
    9e34:	2b0b      	cmp	r3, #11
    9e36:	dde2      	ble.n	9dfe <_tcc_interrupt_handler+0x32>
		}
	}
}
    9e38:	46c0      	nop			; (mov r8, r8)
    9e3a:	46bd      	mov	sp, r7
    9e3c:	b006      	add	sp, #24
    9e3e:	bd80      	pop	{r7, pc}
    9e40:	20000458 	.word	0x20000458
    9e44:	0000e970 	.word	0x0000e970

00009e48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    9e48:	b580      	push	{r7, lr}
    9e4a:	b082      	sub	sp, #8
    9e4c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    9e4e:	4b2f      	ldr	r3, [pc, #188]	; (9f0c <Reset_Handler+0xc4>)
    9e50:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    9e52:	4b2f      	ldr	r3, [pc, #188]	; (9f10 <Reset_Handler+0xc8>)
    9e54:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    9e56:	687a      	ldr	r2, [r7, #4]
    9e58:	683b      	ldr	r3, [r7, #0]
    9e5a:	429a      	cmp	r2, r3
    9e5c:	d00c      	beq.n	9e78 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    9e5e:	e007      	b.n	9e70 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    9e60:	683b      	ldr	r3, [r7, #0]
    9e62:	1d1a      	adds	r2, r3, #4
    9e64:	603a      	str	r2, [r7, #0]
    9e66:	687a      	ldr	r2, [r7, #4]
    9e68:	1d11      	adds	r1, r2, #4
    9e6a:	6079      	str	r1, [r7, #4]
    9e6c:	6812      	ldr	r2, [r2, #0]
    9e6e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    9e70:	683a      	ldr	r2, [r7, #0]
    9e72:	4b28      	ldr	r3, [pc, #160]	; (9f14 <Reset_Handler+0xcc>)
    9e74:	429a      	cmp	r2, r3
    9e76:	d3f3      	bcc.n	9e60 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    9e78:	4b27      	ldr	r3, [pc, #156]	; (9f18 <Reset_Handler+0xd0>)
    9e7a:	603b      	str	r3, [r7, #0]
    9e7c:	e004      	b.n	9e88 <Reset_Handler+0x40>
                *pDest++ = 0;
    9e7e:	683b      	ldr	r3, [r7, #0]
    9e80:	1d1a      	adds	r2, r3, #4
    9e82:	603a      	str	r2, [r7, #0]
    9e84:	2200      	movs	r2, #0
    9e86:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    9e88:	683a      	ldr	r2, [r7, #0]
    9e8a:	4b24      	ldr	r3, [pc, #144]	; (9f1c <Reset_Handler+0xd4>)
    9e8c:	429a      	cmp	r2, r3
    9e8e:	d3f6      	bcc.n	9e7e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    9e90:	4b23      	ldr	r3, [pc, #140]	; (9f20 <Reset_Handler+0xd8>)
    9e92:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    9e94:	4b23      	ldr	r3, [pc, #140]	; (9f24 <Reset_Handler+0xdc>)
    9e96:	687a      	ldr	r2, [r7, #4]
    9e98:	21ff      	movs	r1, #255	; 0xff
    9e9a:	438a      	bics	r2, r1
    9e9c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    9e9e:	4a22      	ldr	r2, [pc, #136]	; (9f28 <Reset_Handler+0xe0>)
    9ea0:	2390      	movs	r3, #144	; 0x90
    9ea2:	005b      	lsls	r3, r3, #1
    9ea4:	2102      	movs	r1, #2
    9ea6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    9ea8:	4a20      	ldr	r2, [pc, #128]	; (9f2c <Reset_Handler+0xe4>)
    9eaa:	78d3      	ldrb	r3, [r2, #3]
    9eac:	2103      	movs	r1, #3
    9eae:	438b      	bics	r3, r1
    9eb0:	1c19      	adds	r1, r3, #0
    9eb2:	2302      	movs	r3, #2
    9eb4:	430b      	orrs	r3, r1
    9eb6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    9eb8:	4a1c      	ldr	r2, [pc, #112]	; (9f2c <Reset_Handler+0xe4>)
    9eba:	78d3      	ldrb	r3, [r2, #3]
    9ebc:	210c      	movs	r1, #12
    9ebe:	438b      	bics	r3, r1
    9ec0:	1c19      	adds	r1, r3, #0
    9ec2:	2308      	movs	r3, #8
    9ec4:	430b      	orrs	r3, r1
    9ec6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    9ec8:	4a19      	ldr	r2, [pc, #100]	; (9f30 <Reset_Handler+0xe8>)
    9eca:	7b93      	ldrb	r3, [r2, #14]
    9ecc:	2130      	movs	r1, #48	; 0x30
    9ece:	438b      	bics	r3, r1
    9ed0:	1c19      	adds	r1, r3, #0
    9ed2:	2320      	movs	r3, #32
    9ed4:	430b      	orrs	r3, r1
    9ed6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    9ed8:	4a15      	ldr	r2, [pc, #84]	; (9f30 <Reset_Handler+0xe8>)
    9eda:	7b93      	ldrb	r3, [r2, #14]
    9edc:	210c      	movs	r1, #12
    9ede:	438b      	bics	r3, r1
    9ee0:	1c19      	adds	r1, r3, #0
    9ee2:	2308      	movs	r3, #8
    9ee4:	430b      	orrs	r3, r1
    9ee6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    9ee8:	4a11      	ldr	r2, [pc, #68]	; (9f30 <Reset_Handler+0xe8>)
    9eea:	7b93      	ldrb	r3, [r2, #14]
    9eec:	2103      	movs	r1, #3
    9eee:	438b      	bics	r3, r1
    9ef0:	1c19      	adds	r1, r3, #0
    9ef2:	2302      	movs	r3, #2
    9ef4:	430b      	orrs	r3, r1
    9ef6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    9ef8:	4a0e      	ldr	r2, [pc, #56]	; (9f34 <Reset_Handler+0xec>)
    9efa:	6853      	ldr	r3, [r2, #4]
    9efc:	2180      	movs	r1, #128	; 0x80
    9efe:	430b      	orrs	r3, r1
    9f00:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    9f02:	4b0d      	ldr	r3, [pc, #52]	; (9f38 <Reset_Handler+0xf0>)
    9f04:	4798      	blx	r3

        /* Branch to main function */
        main();
    9f06:	4b0d      	ldr	r3, [pc, #52]	; (9f3c <Reset_Handler+0xf4>)
    9f08:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    9f0a:	e7fe      	b.n	9f0a <Reset_Handler+0xc2>
    9f0c:	0000ece0 	.word	0x0000ece0
    9f10:	20000000 	.word	0x20000000
    9f14:	20000084 	.word	0x20000084
    9f18:	20000084 	.word	0x20000084
    9f1c:	200004d4 	.word	0x200004d4
    9f20:	00000000 	.word	0x00000000
    9f24:	e000ed00 	.word	0xe000ed00
    9f28:	41007000 	.word	0x41007000
    9f2c:	41005000 	.word	0x41005000
    9f30:	41004800 	.word	0x41004800
    9f34:	41004000 	.word	0x41004000
    9f38:	0000c261 	.word	0x0000c261
    9f3c:	0000af1d 	.word	0x0000af1d

00009f40 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    9f40:	b580      	push	{r7, lr}
    9f42:	af00      	add	r7, sp, #0
        while (1) {
    9f44:	e7fe      	b.n	9f44 <Dummy_Handler+0x4>
	...

00009f48 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    9f48:	b580      	push	{r7, lr}
    9f4a:	b086      	sub	sp, #24
    9f4c:	af00      	add	r7, sp, #0
    9f4e:	60f8      	str	r0, [r7, #12]
    9f50:	60b9      	str	r1, [r7, #8]
    9f52:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    9f54:	2300      	movs	r3, #0
    9f56:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    9f58:	68fb      	ldr	r3, [r7, #12]
    9f5a:	2b00      	cmp	r3, #0
    9f5c:	d012      	beq.n	9f84 <_read+0x3c>
		return -1;
    9f5e:	2301      	movs	r3, #1
    9f60:	425b      	negs	r3, r3
    9f62:	e013      	b.n	9f8c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    9f64:	4b0b      	ldr	r3, [pc, #44]	; (9f94 <_read+0x4c>)
    9f66:	681a      	ldr	r2, [r3, #0]
    9f68:	4b0b      	ldr	r3, [pc, #44]	; (9f98 <_read+0x50>)
    9f6a:	681b      	ldr	r3, [r3, #0]
    9f6c:	68b9      	ldr	r1, [r7, #8]
    9f6e:	0018      	movs	r0, r3
    9f70:	4790      	blx	r2
		ptr++;
    9f72:	68bb      	ldr	r3, [r7, #8]
    9f74:	3301      	adds	r3, #1
    9f76:	60bb      	str	r3, [r7, #8]
		nChars++;
    9f78:	697b      	ldr	r3, [r7, #20]
    9f7a:	3301      	adds	r3, #1
    9f7c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    9f7e:	687b      	ldr	r3, [r7, #4]
    9f80:	3b01      	subs	r3, #1
    9f82:	607b      	str	r3, [r7, #4]
    9f84:	687b      	ldr	r3, [r7, #4]
    9f86:	2b00      	cmp	r3, #0
    9f88:	dcec      	bgt.n	9f64 <_read+0x1c>
	}
	return nChars;
    9f8a:	697b      	ldr	r3, [r7, #20]
}
    9f8c:	0018      	movs	r0, r3
    9f8e:	46bd      	mov	sp, r7
    9f90:	b006      	add	sp, #24
    9f92:	bd80      	pop	{r7, pc}
    9f94:	20000464 	.word	0x20000464
    9f98:	2000046c 	.word	0x2000046c

00009f9c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    9f9c:	b580      	push	{r7, lr}
    9f9e:	b086      	sub	sp, #24
    9fa0:	af00      	add	r7, sp, #0
    9fa2:	60f8      	str	r0, [r7, #12]
    9fa4:	60b9      	str	r1, [r7, #8]
    9fa6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    9fa8:	2300      	movs	r3, #0
    9faa:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    9fac:	68fb      	ldr	r3, [r7, #12]
    9fae:	2b01      	cmp	r3, #1
    9fb0:	d01d      	beq.n	9fee <_write+0x52>
    9fb2:	68fb      	ldr	r3, [r7, #12]
    9fb4:	2b02      	cmp	r3, #2
    9fb6:	d01a      	beq.n	9fee <_write+0x52>
    9fb8:	68fb      	ldr	r3, [r7, #12]
    9fba:	2b03      	cmp	r3, #3
    9fbc:	d017      	beq.n	9fee <_write+0x52>
		return -1;
    9fbe:	2301      	movs	r3, #1
    9fc0:	425b      	negs	r3, r3
    9fc2:	e018      	b.n	9ff6 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    9fc4:	4b0e      	ldr	r3, [pc, #56]	; (a000 <_write+0x64>)
    9fc6:	681a      	ldr	r2, [r3, #0]
    9fc8:	4b0e      	ldr	r3, [pc, #56]	; (a004 <_write+0x68>)
    9fca:	6818      	ldr	r0, [r3, #0]
    9fcc:	68bb      	ldr	r3, [r7, #8]
    9fce:	1c59      	adds	r1, r3, #1
    9fd0:	60b9      	str	r1, [r7, #8]
    9fd2:	781b      	ldrb	r3, [r3, #0]
    9fd4:	0019      	movs	r1, r3
    9fd6:	4790      	blx	r2
    9fd8:	1e03      	subs	r3, r0, #0
    9fda:	da02      	bge.n	9fe2 <_write+0x46>
			return -1;
    9fdc:	2301      	movs	r3, #1
    9fde:	425b      	negs	r3, r3
    9fe0:	e009      	b.n	9ff6 <_write+0x5a>
		}
		++nChars;
    9fe2:	697b      	ldr	r3, [r7, #20]
    9fe4:	3301      	adds	r3, #1
    9fe6:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    9fe8:	687b      	ldr	r3, [r7, #4]
    9fea:	3b01      	subs	r3, #1
    9fec:	607b      	str	r3, [r7, #4]
    9fee:	687b      	ldr	r3, [r7, #4]
    9ff0:	2b00      	cmp	r3, #0
    9ff2:	d1e7      	bne.n	9fc4 <_write+0x28>
	}
	return nChars;
    9ff4:	697b      	ldr	r3, [r7, #20]
}
    9ff6:	0018      	movs	r0, r3
    9ff8:	46bd      	mov	sp, r7
    9ffa:	b006      	add	sp, #24
    9ffc:	bd80      	pop	{r7, pc}
    9ffe:	46c0      	nop			; (mov r8, r8)
    a000:	20000468 	.word	0x20000468
    a004:	2000046c 	.word	0x2000046c

0000a008 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    a008:	b580      	push	{r7, lr}
    a00a:	b084      	sub	sp, #16
    a00c:	af00      	add	r7, sp, #0
    a00e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    a010:	4b0a      	ldr	r3, [pc, #40]	; (a03c <_sbrk+0x34>)
    a012:	681b      	ldr	r3, [r3, #0]
    a014:	2b00      	cmp	r3, #0
    a016:	d102      	bne.n	a01e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    a018:	4b08      	ldr	r3, [pc, #32]	; (a03c <_sbrk+0x34>)
    a01a:	4a09      	ldr	r2, [pc, #36]	; (a040 <_sbrk+0x38>)
    a01c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    a01e:	4b07      	ldr	r3, [pc, #28]	; (a03c <_sbrk+0x34>)
    a020:	681b      	ldr	r3, [r3, #0]
    a022:	60fb      	str	r3, [r7, #12]

	heap += incr;
    a024:	4b05      	ldr	r3, [pc, #20]	; (a03c <_sbrk+0x34>)
    a026:	681a      	ldr	r2, [r3, #0]
    a028:	687b      	ldr	r3, [r7, #4]
    a02a:	18d2      	adds	r2, r2, r3
    a02c:	4b03      	ldr	r3, [pc, #12]	; (a03c <_sbrk+0x34>)
    a02e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    a030:	68fb      	ldr	r3, [r7, #12]
}
    a032:	0018      	movs	r0, r3
    a034:	46bd      	mov	sp, r7
    a036:	b004      	add	sp, #16
    a038:	bd80      	pop	{r7, pc}
    a03a:	46c0      	nop			; (mov r8, r8)
    a03c:	200000f4 	.word	0x200000f4
    a040:	200024d8 	.word	0x200024d8

0000a044 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    a044:	b580      	push	{r7, lr}
    a046:	b082      	sub	sp, #8
    a048:	af00      	add	r7, sp, #0
    a04a:	6078      	str	r0, [r7, #4]
	return -1;
    a04c:	2301      	movs	r3, #1
    a04e:	425b      	negs	r3, r3
}
    a050:	0018      	movs	r0, r3
    a052:	46bd      	mov	sp, r7
    a054:	b002      	add	sp, #8
    a056:	bd80      	pop	{r7, pc}

0000a058 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    a058:	b580      	push	{r7, lr}
    a05a:	b082      	sub	sp, #8
    a05c:	af00      	add	r7, sp, #0
    a05e:	6078      	str	r0, [r7, #4]
    a060:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    a062:	683b      	ldr	r3, [r7, #0]
    a064:	2280      	movs	r2, #128	; 0x80
    a066:	0192      	lsls	r2, r2, #6
    a068:	605a      	str	r2, [r3, #4]

	return 0;
    a06a:	2300      	movs	r3, #0
}
    a06c:	0018      	movs	r0, r3
    a06e:	46bd      	mov	sp, r7
    a070:	b002      	add	sp, #8
    a072:	bd80      	pop	{r7, pc}

0000a074 <_isatty>:

extern int _isatty(int file)
{
    a074:	b580      	push	{r7, lr}
    a076:	b082      	sub	sp, #8
    a078:	af00      	add	r7, sp, #0
    a07a:	6078      	str	r0, [r7, #4]
	return 1;
    a07c:	2301      	movs	r3, #1
}
    a07e:	0018      	movs	r0, r3
    a080:	46bd      	mov	sp, r7
    a082:	b002      	add	sp, #8
    a084:	bd80      	pop	{r7, pc}

0000a086 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    a086:	b580      	push	{r7, lr}
    a088:	b084      	sub	sp, #16
    a08a:	af00      	add	r7, sp, #0
    a08c:	60f8      	str	r0, [r7, #12]
    a08e:	60b9      	str	r1, [r7, #8]
    a090:	607a      	str	r2, [r7, #4]
	return 0;
    a092:	2300      	movs	r3, #0
}
    a094:	0018      	movs	r0, r3
    a096:	46bd      	mov	sp, r7
    a098:	b004      	add	sp, #16
    a09a:	bd80      	pop	{r7, pc}

0000a09c <stream_writer_init>:
#include "iot/stream_writer.h"
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
    a09c:	b580      	push	{r7, lr}
    a09e:	b084      	sub	sp, #16
    a0a0:	af00      	add	r7, sp, #0
    a0a2:	60f8      	str	r0, [r7, #12]
    a0a4:	60b9      	str	r1, [r7, #8]
    a0a6:	607a      	str	r2, [r7, #4]
    a0a8:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
    a0aa:	68fb      	ldr	r3, [r7, #12]
    a0ac:	687a      	ldr	r2, [r7, #4]
    a0ae:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
    a0b0:	68fb      	ldr	r3, [r7, #12]
    a0b2:	68ba      	ldr	r2, [r7, #8]
    a0b4:	611a      	str	r2, [r3, #16]
	writer->written = 0;
    a0b6:	68fb      	ldr	r3, [r7, #12]
    a0b8:	2200      	movs	r2, #0
    a0ba:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
    a0bc:	68fb      	ldr	r3, [r7, #12]
    a0be:	683a      	ldr	r2, [r7, #0]
    a0c0:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
    a0c2:	68fb      	ldr	r3, [r7, #12]
    a0c4:	69ba      	ldr	r2, [r7, #24]
    a0c6:	60da      	str	r2, [r3, #12]
}
    a0c8:	46c0      	nop			; (mov r8, r8)
    a0ca:	46bd      	mov	sp, r7
    a0cc:	b004      	add	sp, #16
    a0ce:	bd80      	pop	{r7, pc}

0000a0d0 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    a0d0:	b580      	push	{r7, lr}
    a0d2:	b084      	sub	sp, #16
    a0d4:	af00      	add	r7, sp, #0
    a0d6:	6078      	str	r0, [r7, #4]
    a0d8:	000a      	movs	r2, r1
    a0da:	1cfb      	adds	r3, r7, #3
    a0dc:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
    a0de:	687b      	ldr	r3, [r7, #4]
    a0e0:	681a      	ldr	r2, [r3, #0]
    a0e2:	687b      	ldr	r3, [r7, #4]
    a0e4:	685b      	ldr	r3, [r3, #4]
    a0e6:	1ad3      	subs	r3, r2, r3
    a0e8:	60fb      	str	r3, [r7, #12]

	if (remain < 1) {
    a0ea:	68fb      	ldr	r3, [r7, #12]
    a0ec:	2b00      	cmp	r3, #0
    a0ee:	dc03      	bgt.n	a0f8 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
    a0f0:	687b      	ldr	r3, [r7, #4]
    a0f2:	0018      	movs	r0, r3
    a0f4:	4b08      	ldr	r3, [pc, #32]	; (a118 <stream_writer_send_8+0x48>)
    a0f6:	4798      	blx	r3
	}

	writer->buffer[writer->written++] = (char)value;
    a0f8:	687b      	ldr	r3, [r7, #4]
    a0fa:	6919      	ldr	r1, [r3, #16]
    a0fc:	687b      	ldr	r3, [r7, #4]
    a0fe:	685b      	ldr	r3, [r3, #4]
    a100:	1c58      	adds	r0, r3, #1
    a102:	687a      	ldr	r2, [r7, #4]
    a104:	6050      	str	r0, [r2, #4]
    a106:	18cb      	adds	r3, r1, r3
    a108:	1cfa      	adds	r2, r7, #3
    a10a:	7812      	ldrb	r2, [r2, #0]
    a10c:	701a      	strb	r2, [r3, #0]
}
    a10e:	46c0      	nop			; (mov r8, r8)
    a110:	46bd      	mov	sp, r7
    a112:	b004      	add	sp, #16
    a114:	bd80      	pop	{r7, pc}
    a116:	46c0      	nop			; (mov r8, r8)
    a118:	0000a199 	.word	0x0000a199

0000a11c <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
    a11c:	b580      	push	{r7, lr}
    a11e:	b082      	sub	sp, #8
    a120:	af00      	add	r7, sp, #0
    a122:	6078      	str	r0, [r7, #4]
    a124:	000a      	movs	r2, r1
    a126:	1cbb      	adds	r3, r7, #2
    a128:	801a      	strh	r2, [r3, #0]
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    a12a:	1cbb      	adds	r3, r7, #2
    a12c:	2200      	movs	r2, #0
    a12e:	5e9b      	ldrsh	r3, [r3, r2]
    a130:	121b      	asrs	r3, r3, #8
    a132:	b21b      	sxth	r3, r3
    a134:	b25a      	sxtb	r2, r3
    a136:	687b      	ldr	r3, [r7, #4]
    a138:	0011      	movs	r1, r2
    a13a:	0018      	movs	r0, r3
    a13c:	4b06      	ldr	r3, [pc, #24]	; (a158 <stream_writer_send_16BE+0x3c>)
    a13e:	4798      	blx	r3
	stream_writer_send_8(writer, value & 0xFF);
    a140:	1cbb      	adds	r3, r7, #2
    a142:	881b      	ldrh	r3, [r3, #0]
    a144:	b25a      	sxtb	r2, r3
    a146:	687b      	ldr	r3, [r7, #4]
    a148:	0011      	movs	r1, r2
    a14a:	0018      	movs	r0, r3
    a14c:	4b02      	ldr	r3, [pc, #8]	; (a158 <stream_writer_send_16BE+0x3c>)
    a14e:	4798      	blx	r3
}
    a150:	46c0      	nop			; (mov r8, r8)
    a152:	46bd      	mov	sp, r7
    a154:	b002      	add	sp, #8
    a156:	bd80      	pop	{r7, pc}
    a158:	0000a0d1 	.word	0x0000a0d1

0000a15c <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
    a15c:	b580      	push	{r7, lr}
    a15e:	b084      	sub	sp, #16
    a160:	af00      	add	r7, sp, #0
    a162:	60f8      	str	r0, [r7, #12]
    a164:	60b9      	str	r1, [r7, #8]
    a166:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
    a168:	e00d      	b.n	a186 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
    a16a:	68bb      	ldr	r3, [r7, #8]
    a16c:	781b      	ldrb	r3, [r3, #0]
    a16e:	b25a      	sxtb	r2, r3
    a170:	68fb      	ldr	r3, [r7, #12]
    a172:	0011      	movs	r1, r2
    a174:	0018      	movs	r0, r3
    a176:	4b07      	ldr	r3, [pc, #28]	; (a194 <stream_writer_send_buffer+0x38>)
    a178:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
    a17a:	687b      	ldr	r3, [r7, #4]
    a17c:	3b01      	subs	r3, #1
    a17e:	607b      	str	r3, [r7, #4]
    a180:	68bb      	ldr	r3, [r7, #8]
    a182:	3301      	adds	r3, #1
    a184:	60bb      	str	r3, [r7, #8]
    a186:	687b      	ldr	r3, [r7, #4]
    a188:	2b00      	cmp	r3, #0
    a18a:	d1ee      	bne.n	a16a <stream_writer_send_buffer+0xe>
	}
}
    a18c:	46c0      	nop			; (mov r8, r8)
    a18e:	46bd      	mov	sp, r7
    a190:	b004      	add	sp, #16
    a192:	bd80      	pop	{r7, pc}
    a194:	0000a0d1 	.word	0x0000a0d1

0000a198 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
    a198:	b590      	push	{r4, r7, lr}
    a19a:	b083      	sub	sp, #12
    a19c:	af00      	add	r7, sp, #0
    a19e:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
    a1a0:	687b      	ldr	r3, [r7, #4]
    a1a2:	685b      	ldr	r3, [r3, #4]
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	d00c      	beq.n	a1c2 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    a1a8:	687b      	ldr	r3, [r7, #4]
    a1aa:	689c      	ldr	r4, [r3, #8]
    a1ac:	687b      	ldr	r3, [r7, #4]
    a1ae:	68d8      	ldr	r0, [r3, #12]
    a1b0:	687b      	ldr	r3, [r7, #4]
    a1b2:	6919      	ldr	r1, [r3, #16]
    a1b4:	687b      	ldr	r3, [r7, #4]
    a1b6:	685b      	ldr	r3, [r3, #4]
    a1b8:	001a      	movs	r2, r3
    a1ba:	47a0      	blx	r4
		writer->written = 0;
    a1bc:	687b      	ldr	r3, [r7, #4]
    a1be:	2200      	movs	r2, #0
    a1c0:	605a      	str	r2, [r3, #4]
	}
}
    a1c2:	46c0      	nop			; (mov r8, r8)
    a1c4:	46bd      	mov	sp, r7
    a1c6:	b003      	add	sp, #12
    a1c8:	bd90      	pop	{r4, r7, pc}
	...

0000a1cc <system_cpu_clock_get_hz>:
{
    a1cc:	b580      	push	{r7, lr}
    a1ce:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    a1d0:	2000      	movs	r0, #0
    a1d2:	4b05      	ldr	r3, [pc, #20]	; (a1e8 <system_cpu_clock_get_hz+0x1c>)
    a1d4:	4798      	blx	r3
    a1d6:	0002      	movs	r2, r0
    a1d8:	4b04      	ldr	r3, [pc, #16]	; (a1ec <system_cpu_clock_get_hz+0x20>)
    a1da:	7a1b      	ldrb	r3, [r3, #8]
    a1dc:	b2db      	uxtb	r3, r3
    a1de:	40da      	lsrs	r2, r3
    a1e0:	0013      	movs	r3, r2
}
    a1e2:	0018      	movs	r0, r3
    a1e4:	46bd      	mov	sp, r7
    a1e6:	bd80      	pop	{r7, pc}
    a1e8:	00008d55 	.word	0x00008d55
    a1ec:	40000400 	.word	0x40000400

0000a1f0 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    a1f0:	b580      	push	{r7, lr}
    a1f2:	b084      	sub	sp, #16
    a1f4:	af00      	add	r7, sp, #0
    a1f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    a1f8:	687b      	ldr	r3, [r7, #4]
    a1fa:	681b      	ldr	r3, [r3, #0]
    a1fc:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    a1fe:	46c0      	nop			; (mov r8, r8)
    a200:	68fb      	ldr	r3, [r7, #12]
    a202:	689b      	ldr	r3, [r3, #8]
    a204:	2202      	movs	r2, #2
    a206:	4013      	ands	r3, r2
    a208:	d1fa      	bne.n	a200 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    a20a:	68fb      	ldr	r3, [r7, #12]
    a20c:	681b      	ldr	r3, [r3, #0]
    a20e:	2202      	movs	r2, #2
    a210:	431a      	orrs	r2, r3
    a212:	68fb      	ldr	r3, [r7, #12]
    a214:	601a      	str	r2, [r3, #0]
}
    a216:	46c0      	nop			; (mov r8, r8)
    a218:	46bd      	mov	sp, r7
    a21a:	b004      	add	sp, #16
    a21c:	bd80      	pop	{r7, pc}
	...

0000a220 <sw_timer_tcc_callback>:
 * This function performs to the increasing the tick count.
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
    a220:	b580      	push	{r7, lr}
    a222:	b082      	sub	sp, #8
    a224:	af00      	add	r7, sp, #0
    a226:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
    a228:	4b04      	ldr	r3, [pc, #16]	; (a23c <sw_timer_tcc_callback+0x1c>)
    a22a:	681b      	ldr	r3, [r3, #0]
    a22c:	1c5a      	adds	r2, r3, #1
    a22e:	4b03      	ldr	r3, [pc, #12]	; (a23c <sw_timer_tcc_callback+0x1c>)
    a230:	601a      	str	r2, [r3, #0]
}
    a232:	46c0      	nop			; (mov r8, r8)
    a234:	46bd      	mov	sp, r7
    a236:	b002      	add	sp, #8
    a238:	bd80      	pop	{r7, pc}
    a23a:	46c0      	nop			; (mov r8, r8)
    a23c:	200000f8 	.word	0x200000f8

0000a240 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
    a240:	b580      	push	{r7, lr}
    a242:	b082      	sub	sp, #8
    a244:	af00      	add	r7, sp, #0
    a246:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
    a248:	687b      	ldr	r3, [r7, #4]
    a24a:	2264      	movs	r2, #100	; 0x64
    a24c:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
    a24e:	687b      	ldr	r3, [r7, #4]
    a250:	2200      	movs	r2, #0
    a252:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
    a254:	687b      	ldr	r3, [r7, #4]
    a256:	2200      	movs	r2, #0
    a258:	705a      	strb	r2, [r3, #1]
}
    a25a:	46c0      	nop			; (mov r8, r8)
    a25c:	46bd      	mov	sp, r7
    a25e:	b002      	add	sp, #8
    a260:	bd80      	pop	{r7, pc}
	...

0000a264 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    a264:	b590      	push	{r4, r7, lr}
    a266:	b0b1      	sub	sp, #196	; 0xc4
    a268:	af00      	add	r7, sp, #0
    a26a:	6078      	str	r0, [r7, #4]
    a26c:	6039      	str	r1, [r7, #0]
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    a26e:	230c      	movs	r3, #12
    a270:	18fb      	adds	r3, r7, r3
    a272:	4a2e      	ldr	r2, [pc, #184]	; (a32c <sw_timer_init+0xc8>)
    a274:	ca13      	ldmia	r2!, {r0, r1, r4}
    a276:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    a278:	683b      	ldr	r3, [r7, #0]
    a27a:	885b      	ldrh	r3, [r3, #2]
    a27c:	001a      	movs	r2, r3
    a27e:	687b      	ldr	r3, [r7, #4]
    a280:	655a      	str	r2, [r3, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    a282:	687b      	ldr	r3, [r7, #4]
    a284:	3314      	adds	r3, #20
    a286:	22bc      	movs	r2, #188	; 0xbc
    a288:	18ba      	adds	r2, r7, r2
    a28a:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    a28c:	683b      	ldr	r3, [r7, #0]
    a28e:	781b      	ldrb	r3, [r3, #0]
    a290:	001a      	movs	r2, r3
    a292:	230c      	movs	r3, #12
    a294:	18fb      	adds	r3, r7, r3
    a296:	0092      	lsls	r2, r2, #2
    a298:	58d2      	ldr	r2, [r2, r3]
    a29a:	2318      	movs	r3, #24
    a29c:	18fb      	adds	r3, r7, r3
    a29e:	0011      	movs	r1, r2
    a2a0:	0018      	movs	r0, r3
    a2a2:	4b23      	ldr	r3, [pc, #140]	; (a330 <sw_timer_init+0xcc>)
    a2a4:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    a2a6:	4b23      	ldr	r3, [pc, #140]	; (a334 <sw_timer_init+0xd0>)
    a2a8:	4798      	blx	r3
    a2aa:	0004      	movs	r4, r0
    a2ac:	683b      	ldr	r3, [r7, #0]
    a2ae:	885b      	ldrh	r3, [r3, #2]
    a2b0:	001a      	movs	r2, r3
    a2b2:	4b21      	ldr	r3, [pc, #132]	; (a338 <sw_timer_init+0xd4>)
    a2b4:	0011      	movs	r1, r2
    a2b6:	22fa      	movs	r2, #250	; 0xfa
    a2b8:	0210      	lsls	r0, r2, #8
    a2ba:	4798      	blx	r3
    a2bc:	0003      	movs	r3, r0
    a2be:	001a      	movs	r2, r3
    a2c0:	4b1e      	ldr	r3, [pc, #120]	; (a33c <sw_timer_init+0xd8>)
    a2c2:	0011      	movs	r1, r2
    a2c4:	0020      	movs	r0, r4
    a2c6:	4798      	blx	r3
    a2c8:	0003      	movs	r3, r0
    a2ca:	001a      	movs	r2, r3
    a2cc:	2318      	movs	r3, #24
    a2ce:	18fb      	adds	r3, r7, r3
    a2d0:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    a2d2:	2318      	movs	r3, #24
    a2d4:	18fb      	adds	r3, r7, r3
    a2d6:	2205      	movs	r2, #5
    a2d8:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    a2da:	683b      	ldr	r3, [r7, #0]
    a2dc:	781b      	ldrb	r3, [r3, #0]
    a2de:	001a      	movs	r2, r3
    a2e0:	230c      	movs	r3, #12
    a2e2:	18fb      	adds	r3, r7, r3
    a2e4:	0092      	lsls	r2, r2, #2
    a2e6:	58d1      	ldr	r1, [r2, r3]
    a2e8:	2318      	movs	r3, #24
    a2ea:	18fa      	adds	r2, r7, r3
    a2ec:	23bc      	movs	r3, #188	; 0xbc
    a2ee:	18fb      	adds	r3, r7, r3
    a2f0:	681b      	ldr	r3, [r3, #0]
    a2f2:	0018      	movs	r0, r3
    a2f4:	4b12      	ldr	r3, [pc, #72]	; (a340 <sw_timer_init+0xdc>)
    a2f6:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    a2f8:	683b      	ldr	r3, [r7, #0]
    a2fa:	785b      	ldrb	r3, [r3, #1]
    a2fc:	3308      	adds	r3, #8
    a2fe:	b2da      	uxtb	r2, r3
    a300:	4910      	ldr	r1, [pc, #64]	; (a344 <sw_timer_init+0xe0>)
    a302:	23bc      	movs	r3, #188	; 0xbc
    a304:	18fb      	adds	r3, r7, r3
    a306:	681b      	ldr	r3, [r3, #0]
    a308:	0018      	movs	r0, r3
    a30a:	4b0f      	ldr	r3, [pc, #60]	; (a348 <sw_timer_init+0xe4>)
    a30c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    a30e:	683b      	ldr	r3, [r7, #0]
    a310:	785b      	ldrb	r3, [r3, #1]
    a312:	3308      	adds	r3, #8
    a314:	b2da      	uxtb	r2, r3
    a316:	23bc      	movs	r3, #188	; 0xbc
    a318:	18fb      	adds	r3, r7, r3
    a31a:	681b      	ldr	r3, [r3, #0]
    a31c:	0011      	movs	r1, r2
    a31e:	0018      	movs	r0, r3
    a320:	4b0a      	ldr	r3, [pc, #40]	; (a34c <sw_timer_init+0xe8>)
    a322:	4798      	blx	r3
}
    a324:	46c0      	nop			; (mov r8, r8)
    a326:	46bd      	mov	sp, r7
    a328:	b031      	add	sp, #196	; 0xc4
    a32a:	bd90      	pop	{r4, r7, pc}
    a32c:	0000e9a0 	.word	0x0000e9a0
    a330:	00009279 	.word	0x00009279
    a334:	0000a1cd 	.word	0x0000a1cd
    a338:	0000c035 	.word	0x0000c035
    a33c:	0000bf21 	.word	0x0000bf21
    a340:	000098d5 	.word	0x000098d5
    a344:	0000a221 	.word	0x0000a221
    a348:	00009ced 	.word	0x00009ced
    a34c:	00009d2d 	.word	0x00009d2d

0000a350 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
    a350:	b580      	push	{r7, lr}
    a352:	b084      	sub	sp, #16
    a354:	af00      	add	r7, sp, #0
    a356:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;

	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;
    a358:	687b      	ldr	r3, [r7, #4]
    a35a:	3314      	adds	r3, #20
    a35c:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
    a35e:	68fb      	ldr	r3, [r7, #12]
    a360:	0018      	movs	r0, r3
    a362:	4b03      	ldr	r3, [pc, #12]	; (a370 <sw_timer_enable+0x20>)
    a364:	4798      	blx	r3
}
    a366:	46c0      	nop			; (mov r8, r8)
    a368:	46bd      	mov	sp, r7
    a36a:	b004      	add	sp, #16
    a36c:	bd80      	pop	{r7, pc}
    a36e:	46c0      	nop			; (mov r8, r8)
    a370:	0000a1f1 	.word	0x0000a1f1

0000a374 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    a374:	b580      	push	{r7, lr}
    a376:	b086      	sub	sp, #24
    a378:	af00      	add	r7, sp, #0
    a37a:	60f8      	str	r0, [r7, #12]
    a37c:	60b9      	str	r1, [r7, #8]
    a37e:	607a      	str	r2, [r7, #4]
    a380:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    a382:	2300      	movs	r3, #0
    a384:	617b      	str	r3, [r7, #20]
    a386:	e032      	b.n	a3ee <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
    a388:	68f9      	ldr	r1, [r7, #12]
    a38a:	697a      	ldr	r2, [r7, #20]
    a38c:	0013      	movs	r3, r2
    a38e:	009b      	lsls	r3, r3, #2
    a390:	189b      	adds	r3, r3, r2
    a392:	009b      	lsls	r3, r3, #2
    a394:	5c5b      	ldrb	r3, [r3, r1]
    a396:	07db      	lsls	r3, r3, #31
    a398:	0fdb      	lsrs	r3, r3, #31
    a39a:	b2db      	uxtb	r3, r3
    a39c:	2b00      	cmp	r3, #0
    a39e:	d123      	bne.n	a3e8 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
    a3a0:	697a      	ldr	r2, [r7, #20]
    a3a2:	0013      	movs	r3, r2
    a3a4:	009b      	lsls	r3, r3, #2
    a3a6:	189b      	adds	r3, r3, r2
    a3a8:	009b      	lsls	r3, r3, #2
    a3aa:	68fa      	ldr	r2, [r7, #12]
    a3ac:	18d3      	adds	r3, r2, r3
    a3ae:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
    a3b0:	693b      	ldr	r3, [r7, #16]
    a3b2:	68ba      	ldr	r2, [r7, #8]
    a3b4:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
    a3b6:	693b      	ldr	r3, [r7, #16]
    a3b8:	781a      	ldrb	r2, [r3, #0]
    a3ba:	2102      	movs	r1, #2
    a3bc:	438a      	bics	r2, r1
    a3be:	701a      	strb	r2, [r3, #0]
			handler->context = context;
    a3c0:	693b      	ldr	r3, [r7, #16]
    a3c2:	687a      	ldr	r2, [r7, #4]
    a3c4:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
    a3c6:	68fb      	ldr	r3, [r7, #12]
    a3c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    a3ca:	4b0d      	ldr	r3, [pc, #52]	; (a400 <sw_timer_register_callback+0x8c>)
    a3cc:	0011      	movs	r1, r2
    a3ce:	6838      	ldr	r0, [r7, #0]
    a3d0:	4798      	blx	r3
    a3d2:	0003      	movs	r3, r0
    a3d4:	001a      	movs	r2, r3
    a3d6:	693b      	ldr	r3, [r7, #16]
    a3d8:	60da      	str	r2, [r3, #12]
			handler->used = 1;
    a3da:	693b      	ldr	r3, [r7, #16]
    a3dc:	781a      	ldrb	r2, [r3, #0]
    a3de:	2101      	movs	r1, #1
    a3e0:	430a      	orrs	r2, r1
    a3e2:	701a      	strb	r2, [r3, #0]
			return index;
    a3e4:	697b      	ldr	r3, [r7, #20]
    a3e6:	e007      	b.n	a3f8 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    a3e8:	697b      	ldr	r3, [r7, #20]
    a3ea:	3301      	adds	r3, #1
    a3ec:	617b      	str	r3, [r7, #20]
    a3ee:	697b      	ldr	r3, [r7, #20]
    a3f0:	2b00      	cmp	r3, #0
    a3f2:	ddc9      	ble.n	a388 <sw_timer_register_callback+0x14>
		}
	}

	return -1;
    a3f4:	2301      	movs	r3, #1
    a3f6:	425b      	negs	r3, r3
}
    a3f8:	0018      	movs	r0, r3
    a3fa:	46bd      	mov	sp, r7
    a3fc:	b006      	add	sp, #24
    a3fe:	bd80      	pop	{r7, pc}
    a400:	0000bf21 	.word	0x0000bf21

0000a404 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    a404:	b580      	push	{r7, lr}
    a406:	b086      	sub	sp, #24
    a408:	af00      	add	r7, sp, #0
    a40a:	60f8      	str	r0, [r7, #12]
    a40c:	60b9      	str	r1, [r7, #8]
    a40e:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    a410:	68ba      	ldr	r2, [r7, #8]
    a412:	0013      	movs	r3, r2
    a414:	009b      	lsls	r3, r3, #2
    a416:	189b      	adds	r3, r3, r2
    a418:	009b      	lsls	r3, r3, #2
    a41a:	68fa      	ldr	r2, [r7, #12]
    a41c:	18d3      	adds	r3, r2, r3
    a41e:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
    a420:	697b      	ldr	r3, [r7, #20]
    a422:	781a      	ldrb	r2, [r3, #0]
    a424:	2102      	movs	r1, #2
    a426:	430a      	orrs	r2, r1
    a428:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    a42a:	68fb      	ldr	r3, [r7, #12]
    a42c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    a42e:	4b07      	ldr	r3, [pc, #28]	; (a44c <sw_timer_enable_callback+0x48>)
    a430:	0011      	movs	r1, r2
    a432:	6878      	ldr	r0, [r7, #4]
    a434:	4798      	blx	r3
    a436:	0003      	movs	r3, r0
    a438:	001a      	movs	r2, r3
    a43a:	4b05      	ldr	r3, [pc, #20]	; (a450 <sw_timer_enable_callback+0x4c>)
    a43c:	681b      	ldr	r3, [r3, #0]
    a43e:	18d2      	adds	r2, r2, r3
    a440:	697b      	ldr	r3, [r7, #20]
    a442:	611a      	str	r2, [r3, #16]
}
    a444:	46c0      	nop			; (mov r8, r8)
    a446:	46bd      	mov	sp, r7
    a448:	b006      	add	sp, #24
    a44a:	bd80      	pop	{r7, pc}
    a44c:	0000bf21 	.word	0x0000bf21
    a450:	200000f8 	.word	0x200000f8

0000a454 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
    a454:	b580      	push	{r7, lr}
    a456:	b084      	sub	sp, #16
    a458:	af00      	add	r7, sp, #0
    a45a:	6078      	str	r0, [r7, #4]
    a45c:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    a45e:	683a      	ldr	r2, [r7, #0]
    a460:	0013      	movs	r3, r2
    a462:	009b      	lsls	r3, r3, #2
    a464:	189b      	adds	r3, r3, r2
    a466:	009b      	lsls	r3, r3, #2
    a468:	687a      	ldr	r2, [r7, #4]
    a46a:	18d3      	adds	r3, r2, r3
    a46c:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
    a46e:	68fb      	ldr	r3, [r7, #12]
    a470:	781a      	ldrb	r2, [r3, #0]
    a472:	2102      	movs	r1, #2
    a474:	438a      	bics	r2, r1
    a476:	701a      	strb	r2, [r3, #0]
}
    a478:	46c0      	nop			; (mov r8, r8)
    a47a:	46bd      	mov	sp, r7
    a47c:	b004      	add	sp, #16
    a47e:	bd80      	pop	{r7, pc}

0000a480 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    a480:	b590      	push	{r4, r7, lr}
    a482:	b085      	sub	sp, #20
    a484:	af00      	add	r7, sp, #0
    a486:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    a488:	2300      	movs	r3, #0
    a48a:	60fb      	str	r3, [r7, #12]
    a48c:	e053      	b.n	a536 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    a48e:	6879      	ldr	r1, [r7, #4]
    a490:	68fa      	ldr	r2, [r7, #12]
    a492:	0013      	movs	r3, r2
    a494:	009b      	lsls	r3, r3, #2
    a496:	189b      	adds	r3, r3, r2
    a498:	009b      	lsls	r3, r3, #2
    a49a:	5c5b      	ldrb	r3, [r3, r1]
    a49c:	07db      	lsls	r3, r3, #31
    a49e:	0fdb      	lsrs	r3, r3, #31
    a4a0:	b2db      	uxtb	r3, r3
    a4a2:	2b00      	cmp	r3, #0
    a4a4:	d044      	beq.n	a530 <sw_timer_task+0xb0>
    a4a6:	6879      	ldr	r1, [r7, #4]
    a4a8:	68fa      	ldr	r2, [r7, #12]
    a4aa:	0013      	movs	r3, r2
    a4ac:	009b      	lsls	r3, r3, #2
    a4ae:	189b      	adds	r3, r3, r2
    a4b0:	009b      	lsls	r3, r3, #2
    a4b2:	5c5b      	ldrb	r3, [r3, r1]
    a4b4:	079b      	lsls	r3, r3, #30
    a4b6:	0fdb      	lsrs	r3, r3, #31
    a4b8:	b2db      	uxtb	r3, r3
    a4ba:	2b00      	cmp	r3, #0
    a4bc:	d038      	beq.n	a530 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
    a4be:	68fa      	ldr	r2, [r7, #12]
    a4c0:	0013      	movs	r3, r2
    a4c2:	009b      	lsls	r3, r3, #2
    a4c4:	189b      	adds	r3, r3, r2
    a4c6:	009b      	lsls	r3, r3, #2
    a4c8:	687a      	ldr	r2, [r7, #4]
    a4ca:	18d3      	adds	r3, r2, r3
    a4cc:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    a4ce:	68bb      	ldr	r3, [r7, #8]
    a4d0:	691a      	ldr	r2, [r3, #16]
    a4d2:	4b1c      	ldr	r3, [pc, #112]	; (a544 <sw_timer_task+0xc4>)
    a4d4:	681b      	ldr	r3, [r3, #0]
    a4d6:	1ad3      	subs	r3, r2, r3
    a4d8:	d52a      	bpl.n	a530 <sw_timer_task+0xb0>
    a4da:	68bb      	ldr	r3, [r7, #8]
    a4dc:	781b      	ldrb	r3, [r3, #0]
    a4de:	2204      	movs	r2, #4
    a4e0:	4013      	ands	r3, r2
    a4e2:	b2db      	uxtb	r3, r3
    a4e4:	2b00      	cmp	r3, #0
    a4e6:	d123      	bne.n	a530 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
    a4e8:	68bb      	ldr	r3, [r7, #8]
    a4ea:	781a      	ldrb	r2, [r3, #0]
    a4ec:	2104      	movs	r1, #4
    a4ee:	430a      	orrs	r2, r1
    a4f0:	701a      	strb	r2, [r3, #0]
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    a4f2:	68bb      	ldr	r3, [r7, #8]
    a4f4:	685c      	ldr	r4, [r3, #4]
    a4f6:	68bb      	ldr	r3, [r7, #8]
    a4f8:	689a      	ldr	r2, [r3, #8]
    a4fa:	68bb      	ldr	r3, [r7, #8]
    a4fc:	68db      	ldr	r3, [r3, #12]
    a4fe:	68f9      	ldr	r1, [r7, #12]
    a500:	6878      	ldr	r0, [r7, #4]
    a502:	47a0      	blx	r4
				/* Timer was expired. */
				if (handler->period > 0) {
    a504:	68bb      	ldr	r3, [r7, #8]
    a506:	68db      	ldr	r3, [r3, #12]
    a508:	2b00      	cmp	r3, #0
    a50a:	d007      	beq.n	a51c <sw_timer_task+0x9c>
					handler->expire_time = sw_timer_tick + handler->period;
    a50c:	68bb      	ldr	r3, [r7, #8]
    a50e:	68da      	ldr	r2, [r3, #12]
    a510:	4b0c      	ldr	r3, [pc, #48]	; (a544 <sw_timer_task+0xc4>)
    a512:	681b      	ldr	r3, [r3, #0]
    a514:	18d2      	adds	r2, r2, r3
    a516:	68bb      	ldr	r3, [r7, #8]
    a518:	611a      	str	r2, [r3, #16]
    a51a:	e004      	b.n	a526 <sw_timer_task+0xa6>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    a51c:	68bb      	ldr	r3, [r7, #8]
    a51e:	781a      	ldrb	r2, [r3, #0]
    a520:	2102      	movs	r1, #2
    a522:	438a      	bics	r2, r1
    a524:	701a      	strb	r2, [r3, #0]
				}
				/* Leave critical section. */
				handler->busy = 0;
    a526:	68bb      	ldr	r3, [r7, #8]
    a528:	781a      	ldrb	r2, [r3, #0]
    a52a:	2104      	movs	r1, #4
    a52c:	438a      	bics	r2, r1
    a52e:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    a530:	68fb      	ldr	r3, [r7, #12]
    a532:	3301      	adds	r3, #1
    a534:	60fb      	str	r3, [r7, #12]
    a536:	68fb      	ldr	r3, [r7, #12]
    a538:	2b00      	cmp	r3, #0
    a53a:	dda8      	ble.n	a48e <sw_timer_task+0xe>
			}
		}
	}

}
    a53c:	46c0      	nop			; (mov r8, r8)
    a53e:	46bd      	mov	sp, r7
    a540:	b005      	add	sp, #20
    a542:	bd90      	pop	{r4, r7, pc}
    a544:	200000f8 	.word	0x200000f8

0000a548 <system_pinmux_get_group_from_gpio_pin>:
{
    a548:	b580      	push	{r7, lr}
    a54a:	b084      	sub	sp, #16
    a54c:	af00      	add	r7, sp, #0
    a54e:	0002      	movs	r2, r0
    a550:	1dfb      	adds	r3, r7, #7
    a552:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    a554:	230f      	movs	r3, #15
    a556:	18fb      	adds	r3, r7, r3
    a558:	1dfa      	adds	r2, r7, #7
    a55a:	7812      	ldrb	r2, [r2, #0]
    a55c:	09d2      	lsrs	r2, r2, #7
    a55e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    a560:	230e      	movs	r3, #14
    a562:	18fb      	adds	r3, r7, r3
    a564:	1dfa      	adds	r2, r7, #7
    a566:	7812      	ldrb	r2, [r2, #0]
    a568:	0952      	lsrs	r2, r2, #5
    a56a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    a56c:	4b0d      	ldr	r3, [pc, #52]	; (a5a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    a56e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    a570:	230f      	movs	r3, #15
    a572:	18fb      	adds	r3, r7, r3
    a574:	781b      	ldrb	r3, [r3, #0]
    a576:	2b00      	cmp	r3, #0
    a578:	d10f      	bne.n	a59a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    a57a:	230f      	movs	r3, #15
    a57c:	18fb      	adds	r3, r7, r3
    a57e:	781b      	ldrb	r3, [r3, #0]
    a580:	009b      	lsls	r3, r3, #2
    a582:	2210      	movs	r2, #16
    a584:	4694      	mov	ip, r2
    a586:	44bc      	add	ip, r7
    a588:	4463      	add	r3, ip
    a58a:	3b08      	subs	r3, #8
    a58c:	681a      	ldr	r2, [r3, #0]
    a58e:	230e      	movs	r3, #14
    a590:	18fb      	adds	r3, r7, r3
    a592:	781b      	ldrb	r3, [r3, #0]
    a594:	01db      	lsls	r3, r3, #7
    a596:	18d3      	adds	r3, r2, r3
    a598:	e000      	b.n	a59c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    a59a:	2300      	movs	r3, #0
}
    a59c:	0018      	movs	r0, r3
    a59e:	46bd      	mov	sp, r7
    a5a0:	b004      	add	sp, #16
    a5a2:	bd80      	pop	{r7, pc}
    a5a4:	41004400 	.word	0x41004400

0000a5a8 <port_get_group_from_gpio_pin>:
{
    a5a8:	b580      	push	{r7, lr}
    a5aa:	b082      	sub	sp, #8
    a5ac:	af00      	add	r7, sp, #0
    a5ae:	0002      	movs	r2, r0
    a5b0:	1dfb      	adds	r3, r7, #7
    a5b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    a5b4:	1dfb      	adds	r3, r7, #7
    a5b6:	781b      	ldrb	r3, [r3, #0]
    a5b8:	0018      	movs	r0, r3
    a5ba:	4b03      	ldr	r3, [pc, #12]	; (a5c8 <port_get_group_from_gpio_pin+0x20>)
    a5bc:	4798      	blx	r3
    a5be:	0003      	movs	r3, r0
}
    a5c0:	0018      	movs	r0, r3
    a5c2:	46bd      	mov	sp, r7
    a5c4:	b002      	add	sp, #8
    a5c6:	bd80      	pop	{r7, pc}
    a5c8:	0000a549 	.word	0x0000a549

0000a5cc <port_pin_get_input_level>:
{
    a5cc:	b580      	push	{r7, lr}
    a5ce:	b084      	sub	sp, #16
    a5d0:	af00      	add	r7, sp, #0
    a5d2:	0002      	movs	r2, r0
    a5d4:	1dfb      	adds	r3, r7, #7
    a5d6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    a5d8:	1dfb      	adds	r3, r7, #7
    a5da:	781b      	ldrb	r3, [r3, #0]
    a5dc:	0018      	movs	r0, r3
    a5de:	4b0b      	ldr	r3, [pc, #44]	; (a60c <port_pin_get_input_level+0x40>)
    a5e0:	4798      	blx	r3
    a5e2:	0003      	movs	r3, r0
    a5e4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    a5e6:	1dfb      	adds	r3, r7, #7
    a5e8:	781b      	ldrb	r3, [r3, #0]
    a5ea:	221f      	movs	r2, #31
    a5ec:	4013      	ands	r3, r2
    a5ee:	2201      	movs	r2, #1
    a5f0:	409a      	lsls	r2, r3
    a5f2:	0013      	movs	r3, r2
    a5f4:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    a5f6:	68fb      	ldr	r3, [r7, #12]
    a5f8:	6a1b      	ldr	r3, [r3, #32]
    a5fa:	68ba      	ldr	r2, [r7, #8]
    a5fc:	4013      	ands	r3, r2
    a5fe:	1e5a      	subs	r2, r3, #1
    a600:	4193      	sbcs	r3, r2
    a602:	b2db      	uxtb	r3, r3
}
    a604:	0018      	movs	r0, r3
    a606:	46bd      	mov	sp, r7
    a608:	b004      	add	sp, #16
    a60a:	bd80      	pop	{r7, pc}
    a60c:	0000a5a9 	.word	0x0000a5a9

0000a610 <system_interrupt_enable>:
{
    a610:	b580      	push	{r7, lr}
    a612:	b082      	sub	sp, #8
    a614:	af00      	add	r7, sp, #0
    a616:	0002      	movs	r2, r0
    a618:	1dfb      	adds	r3, r7, #7
    a61a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a61c:	4b06      	ldr	r3, [pc, #24]	; (a638 <system_interrupt_enable+0x28>)
    a61e:	1dfa      	adds	r2, r7, #7
    a620:	7812      	ldrb	r2, [r2, #0]
    a622:	0011      	movs	r1, r2
    a624:	221f      	movs	r2, #31
    a626:	400a      	ands	r2, r1
    a628:	2101      	movs	r1, #1
    a62a:	4091      	lsls	r1, r2
    a62c:	000a      	movs	r2, r1
    a62e:	601a      	str	r2, [r3, #0]
}
    a630:	46c0      	nop			; (mov r8, r8)
    a632:	46bd      	mov	sp, r7
    a634:	b002      	add	sp, #8
    a636:	bd80      	pop	{r7, pc}
    a638:	e000e100 	.word	0xe000e100

0000a63c <usart_is_syncing>:
{
    a63c:	b580      	push	{r7, lr}
    a63e:	b084      	sub	sp, #16
    a640:	af00      	add	r7, sp, #0
    a642:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    a644:	687b      	ldr	r3, [r7, #4]
    a646:	681b      	ldr	r3, [r3, #0]
    a648:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    a64a:	68fb      	ldr	r3, [r7, #12]
    a64c:	69db      	ldr	r3, [r3, #28]
    a64e:	1e5a      	subs	r2, r3, #1
    a650:	4193      	sbcs	r3, r2
    a652:	b2db      	uxtb	r3, r3
}
    a654:	0018      	movs	r0, r3
    a656:	46bd      	mov	sp, r7
    a658:	b004      	add	sp, #16
    a65a:	bd80      	pop	{r7, pc}

0000a65c <_usart_wait_for_sync>:
{
    a65c:	b580      	push	{r7, lr}
    a65e:	b082      	sub	sp, #8
    a660:	af00      	add	r7, sp, #0
    a662:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    a664:	46c0      	nop			; (mov r8, r8)
    a666:	687b      	ldr	r3, [r7, #4]
    a668:	0018      	movs	r0, r3
    a66a:	4b04      	ldr	r3, [pc, #16]	; (a67c <_usart_wait_for_sync+0x20>)
    a66c:	4798      	blx	r3
    a66e:	1e03      	subs	r3, r0, #0
    a670:	d1f9      	bne.n	a666 <_usart_wait_for_sync+0xa>
}
    a672:	46c0      	nop			; (mov r8, r8)
    a674:	46bd      	mov	sp, r7
    a676:	b002      	add	sp, #8
    a678:	bd80      	pop	{r7, pc}
    a67a:	46c0      	nop			; (mov r8, r8)
    a67c:	0000a63d 	.word	0x0000a63d

0000a680 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    a680:	b580      	push	{r7, lr}
    a682:	b082      	sub	sp, #8
    a684:	af00      	add	r7, sp, #0
    a686:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    a688:	687b      	ldr	r3, [r7, #4]
    a68a:	2280      	movs	r2, #128	; 0x80
    a68c:	05d2      	lsls	r2, r2, #23
    a68e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    a690:	687b      	ldr	r3, [r7, #4]
    a692:	2200      	movs	r2, #0
    a694:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    a696:	687b      	ldr	r3, [r7, #4]
    a698:	22ff      	movs	r2, #255	; 0xff
    a69a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    a69c:	687b      	ldr	r3, [r7, #4]
    a69e:	2200      	movs	r2, #0
    a6a0:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    a6a2:	687b      	ldr	r3, [r7, #4]
    a6a4:	2200      	movs	r2, #0
    a6a6:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    a6a8:	687b      	ldr	r3, [r7, #4]
    a6aa:	2296      	movs	r2, #150	; 0x96
    a6ac:	0192      	lsls	r2, r2, #6
    a6ae:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    a6b0:	687b      	ldr	r3, [r7, #4]
    a6b2:	2224      	movs	r2, #36	; 0x24
    a6b4:	2101      	movs	r1, #1
    a6b6:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    a6b8:	687b      	ldr	r3, [r7, #4]
    a6ba:	2225      	movs	r2, #37	; 0x25
    a6bc:	2101      	movs	r1, #1
    a6be:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    a6c0:	687b      	ldr	r3, [r7, #4]
    a6c2:	2226      	movs	r2, #38	; 0x26
    a6c4:	2100      	movs	r1, #0
    a6c6:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    a6c8:	687b      	ldr	r3, [r7, #4]
    a6ca:	2227      	movs	r2, #39	; 0x27
    a6cc:	2100      	movs	r1, #0
    a6ce:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    a6d0:	687b      	ldr	r3, [r7, #4]
    a6d2:	2200      	movs	r2, #0
    a6d4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    a6d6:	687b      	ldr	r3, [r7, #4]
    a6d8:	2288      	movs	r2, #136	; 0x88
    a6da:	0352      	lsls	r2, r2, #13
    a6dc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    a6de:	687b      	ldr	r3, [r7, #4]
    a6e0:	222c      	movs	r2, #44	; 0x2c
    a6e2:	2100      	movs	r1, #0
    a6e4:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    a6e6:	687b      	ldr	r3, [r7, #4]
    a6e8:	222d      	movs	r2, #45	; 0x2d
    a6ea:	2100      	movs	r1, #0
    a6ec:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    a6ee:	687b      	ldr	r3, [r7, #4]
    a6f0:	2200      	movs	r2, #0
    a6f2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    a6f4:	687b      	ldr	r3, [r7, #4]
    a6f6:	2200      	movs	r2, #0
    a6f8:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    a6fa:	687b      	ldr	r3, [r7, #4]
    a6fc:	2200      	movs	r2, #0
    a6fe:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    a700:	687b      	ldr	r3, [r7, #4]
    a702:	2200      	movs	r2, #0
    a704:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    a706:	687b      	ldr	r3, [r7, #4]
    a708:	2200      	movs	r2, #0
    a70a:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    a70c:	687b      	ldr	r3, [r7, #4]
    a70e:	2200      	movs	r2, #0
    a710:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    a712:	687b      	ldr	r3, [r7, #4]
    a714:	2200      	movs	r2, #0
    a716:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    a718:	687b      	ldr	r3, [r7, #4]
    a71a:	2200      	movs	r2, #0
    a71c:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    a71e:	687b      	ldr	r3, [r7, #4]
    a720:	2200      	movs	r2, #0
    a722:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    a724:	687b      	ldr	r3, [r7, #4]
    a726:	2200      	movs	r2, #0
    a728:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    a72a:	687b      	ldr	r3, [r7, #4]
    a72c:	2213      	movs	r2, #19
    a72e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    a730:	687b      	ldr	r3, [r7, #4]
    a732:	2200      	movs	r2, #0
    a734:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    a736:	46c0      	nop			; (mov r8, r8)
    a738:	46bd      	mov	sp, r7
    a73a:	b002      	add	sp, #8
    a73c:	bd80      	pop	{r7, pc}
	...

0000a740 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    a740:	b580      	push	{r7, lr}
    a742:	b084      	sub	sp, #16
    a744:	af00      	add	r7, sp, #0
    a746:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a748:	687b      	ldr	r3, [r7, #4]
    a74a:	681b      	ldr	r3, [r3, #0]
    a74c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a74e:	687b      	ldr	r3, [r7, #4]
    a750:	681b      	ldr	r3, [r3, #0]
    a752:	0018      	movs	r0, r3
    a754:	4b09      	ldr	r3, [pc, #36]	; (a77c <usart_enable+0x3c>)
    a756:	4798      	blx	r3
    a758:	0003      	movs	r3, r0
    a75a:	0018      	movs	r0, r3
    a75c:	4b08      	ldr	r3, [pc, #32]	; (a780 <usart_enable+0x40>)
    a75e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a760:	687b      	ldr	r3, [r7, #4]
    a762:	0018      	movs	r0, r3
    a764:	4b07      	ldr	r3, [pc, #28]	; (a784 <usart_enable+0x44>)
    a766:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    a768:	68fb      	ldr	r3, [r7, #12]
    a76a:	681b      	ldr	r3, [r3, #0]
    a76c:	2202      	movs	r2, #2
    a76e:	431a      	orrs	r2, r3
    a770:	68fb      	ldr	r3, [r7, #12]
    a772:	601a      	str	r2, [r3, #0]
}
    a774:	46c0      	nop			; (mov r8, r8)
    a776:	46bd      	mov	sp, r7
    a778:	b004      	add	sp, #16
    a77a:	bd80      	pop	{r7, pc}
    a77c:	000069c9 	.word	0x000069c9
    a780:	0000a611 	.word	0x0000a611
    a784:	0000a65d 	.word	0x0000a65d

0000a788 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    a788:	b580      	push	{r7, lr}
    a78a:	b082      	sub	sp, #8
    a78c:	af00      	add	r7, sp, #0
    a78e:	6078      	str	r0, [r7, #4]
    a790:	000a      	movs	r2, r1
    a792:	1cfb      	adds	r3, r7, #3
    a794:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    a796:	687b      	ldr	r3, [r7, #4]
    a798:	2231      	movs	r2, #49	; 0x31
    a79a:	5c9b      	ldrb	r3, [r3, r2]
    a79c:	b25a      	sxtb	r2, r3
    a79e:	1cfb      	adds	r3, r7, #3
    a7a0:	781b      	ldrb	r3, [r3, #0]
    a7a2:	2101      	movs	r1, #1
    a7a4:	4099      	lsls	r1, r3
    a7a6:	000b      	movs	r3, r1
    a7a8:	b25b      	sxtb	r3, r3
    a7aa:	4313      	orrs	r3, r2
    a7ac:	b25b      	sxtb	r3, r3
    a7ae:	b2d9      	uxtb	r1, r3
    a7b0:	687b      	ldr	r3, [r7, #4]
    a7b2:	2231      	movs	r2, #49	; 0x31
    a7b4:	5499      	strb	r1, [r3, r2]

}
    a7b6:	46c0      	nop			; (mov r8, r8)
    a7b8:	46bd      	mov	sp, r7
    a7ba:	b002      	add	sp, #8
    a7bc:	bd80      	pop	{r7, pc}

0000a7be <usart_disable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_disable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    a7be:	b580      	push	{r7, lr}
    a7c0:	b082      	sub	sp, #8
    a7c2:	af00      	add	r7, sp, #0
    a7c4:	6078      	str	r0, [r7, #4]
    a7c6:	000a      	movs	r2, r1
    a7c8:	1cfb      	adds	r3, r7, #3
    a7ca:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    a7cc:	687b      	ldr	r3, [r7, #4]
    a7ce:	2231      	movs	r2, #49	; 0x31
    a7d0:	5c9b      	ldrb	r3, [r3, r2]
    a7d2:	b25b      	sxtb	r3, r3
    a7d4:	1cfa      	adds	r2, r7, #3
    a7d6:	7812      	ldrb	r2, [r2, #0]
    a7d8:	2101      	movs	r1, #1
    a7da:	4091      	lsls	r1, r2
    a7dc:	000a      	movs	r2, r1
    a7de:	b252      	sxtb	r2, r2
    a7e0:	43d2      	mvns	r2, r2
    a7e2:	b252      	sxtb	r2, r2
    a7e4:	4013      	ands	r3, r2
    a7e6:	b25b      	sxtb	r3, r3
    a7e8:	b2d9      	uxtb	r1, r3
    a7ea:	687b      	ldr	r3, [r7, #4]
    a7ec:	2231      	movs	r2, #49	; 0x31
    a7ee:	5499      	strb	r1, [r3, r2]
}
    a7f0:	46c0      	nop			; (mov r8, r8)
    a7f2:	46bd      	mov	sp, r7
    a7f4:	b002      	add	sp, #8
    a7f6:	bd80      	pop	{r7, pc}

0000a7f8 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    a7f8:	b580      	push	{r7, lr}
    a7fa:	b084      	sub	sp, #16
    a7fc:	af00      	add	r7, sp, #0
    a7fe:	60f8      	str	r0, [r7, #12]
    a800:	60b9      	str	r1, [r7, #8]
    a802:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    a804:	687a      	ldr	r2, [r7, #4]
    a806:	68b9      	ldr	r1, [r7, #8]
    a808:	68fb      	ldr	r3, [r7, #12]
    a80a:	0018      	movs	r0, r3
    a80c:	4b05      	ldr	r3, [pc, #20]	; (a824 <usart_serial_init+0x2c>)
    a80e:	4798      	blx	r3
    a810:	1e03      	subs	r3, r0, #0
    a812:	d101      	bne.n	a818 <usart_serial_init+0x20>
		return true;
    a814:	2301      	movs	r3, #1
    a816:	e000      	b.n	a81a <usart_serial_init+0x22>
	}
	else {
		return false;
    a818:	2300      	movs	r3, #0
	}
}
    a81a:	0018      	movs	r0, r3
    a81c:	46bd      	mov	sp, r7
    a81e:	b004      	add	sp, #16
    a820:	bd80      	pop	{r7, pc}
    a822:	46c0      	nop			; (mov r8, r8)
    a824:	0000799d 	.word	0x0000799d

0000a828 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    a828:	b580      	push	{r7, lr}
    a82a:	b082      	sub	sp, #8
    a82c:	af00      	add	r7, sp, #0
    a82e:	6078      	str	r0, [r7, #4]
    a830:	000a      	movs	r2, r1
    a832:	1cfb      	adds	r3, r7, #3
    a834:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    a836:	46c0      	nop			; (mov r8, r8)
    a838:	1cfb      	adds	r3, r7, #3
    a83a:	781b      	ldrb	r3, [r3, #0]
    a83c:	b29a      	uxth	r2, r3
    a83e:	687b      	ldr	r3, [r7, #4]
    a840:	0011      	movs	r1, r2
    a842:	0018      	movs	r0, r3
    a844:	4b04      	ldr	r3, [pc, #16]	; (a858 <usart_serial_putchar+0x30>)
    a846:	4798      	blx	r3
    a848:	1e03      	subs	r3, r0, #0
    a84a:	d1f5      	bne.n	a838 <usart_serial_putchar+0x10>

	return STATUS_OK;
    a84c:	2300      	movs	r3, #0
}
    a84e:	0018      	movs	r0, r3
    a850:	46bd      	mov	sp, r7
    a852:	b002      	add	sp, #8
    a854:	bd80      	pop	{r7, pc}
    a856:	46c0      	nop			; (mov r8, r8)
    a858:	00007c11 	.word	0x00007c11

0000a85c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    a85c:	b580      	push	{r7, lr}
    a85e:	b084      	sub	sp, #16
    a860:	af00      	add	r7, sp, #0
    a862:	6078      	str	r0, [r7, #4]
    a864:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    a866:	230e      	movs	r3, #14
    a868:	18fb      	adds	r3, r7, r3
    a86a:	2200      	movs	r2, #0
    a86c:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    a86e:	46c0      	nop			; (mov r8, r8)
    a870:	230e      	movs	r3, #14
    a872:	18fa      	adds	r2, r7, r3
    a874:	687b      	ldr	r3, [r7, #4]
    a876:	0011      	movs	r1, r2
    a878:	0018      	movs	r0, r3
    a87a:	4b07      	ldr	r3, [pc, #28]	; (a898 <usart_serial_getchar+0x3c>)
    a87c:	4798      	blx	r3
    a87e:	1e03      	subs	r3, r0, #0
    a880:	d1f6      	bne.n	a870 <usart_serial_getchar+0x14>

	*c = temp;
    a882:	230e      	movs	r3, #14
    a884:	18fb      	adds	r3, r7, r3
    a886:	881b      	ldrh	r3, [r3, #0]
    a888:	b2da      	uxtb	r2, r3
    a88a:	683b      	ldr	r3, [r7, #0]
    a88c:	701a      	strb	r2, [r3, #0]
}
    a88e:	46c0      	nop			; (mov r8, r8)
    a890:	46bd      	mov	sp, r7
    a892:	b004      	add	sp, #16
    a894:	bd80      	pop	{r7, pc}
    a896:	46c0      	nop			; (mov r8, r8)
    a898:	00007c75 	.word	0x00007c75

0000a89c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    a89c:	b580      	push	{r7, lr}
    a89e:	b084      	sub	sp, #16
    a8a0:	af00      	add	r7, sp, #0
    a8a2:	60f8      	str	r0, [r7, #12]
    a8a4:	60b9      	str	r1, [r7, #8]
    a8a6:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    a8a8:	4b10      	ldr	r3, [pc, #64]	; (a8ec <stdio_serial_init+0x50>)
    a8aa:	68fa      	ldr	r2, [r7, #12]
    a8ac:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    a8ae:	4b10      	ldr	r3, [pc, #64]	; (a8f0 <stdio_serial_init+0x54>)
    a8b0:	4a10      	ldr	r2, [pc, #64]	; (a8f4 <stdio_serial_init+0x58>)
    a8b2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    a8b4:	4b10      	ldr	r3, [pc, #64]	; (a8f8 <stdio_serial_init+0x5c>)
    a8b6:	4a11      	ldr	r2, [pc, #68]	; (a8fc <stdio_serial_init+0x60>)
    a8b8:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    a8ba:	687a      	ldr	r2, [r7, #4]
    a8bc:	68b9      	ldr	r1, [r7, #8]
    a8be:	68fb      	ldr	r3, [r7, #12]
    a8c0:	0018      	movs	r0, r3
    a8c2:	4b0f      	ldr	r3, [pc, #60]	; (a900 <stdio_serial_init+0x64>)
    a8c4:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    a8c6:	4b0f      	ldr	r3, [pc, #60]	; (a904 <stdio_serial_init+0x68>)
    a8c8:	681b      	ldr	r3, [r3, #0]
    a8ca:	689b      	ldr	r3, [r3, #8]
    a8cc:	2100      	movs	r1, #0
    a8ce:	0018      	movs	r0, r3
    a8d0:	4b0d      	ldr	r3, [pc, #52]	; (a908 <stdio_serial_init+0x6c>)
    a8d2:	4798      	blx	r3
	setbuf(stdin, NULL);
    a8d4:	4b0b      	ldr	r3, [pc, #44]	; (a904 <stdio_serial_init+0x68>)
    a8d6:	681b      	ldr	r3, [r3, #0]
    a8d8:	685b      	ldr	r3, [r3, #4]
    a8da:	2100      	movs	r1, #0
    a8dc:	0018      	movs	r0, r3
    a8de:	4b0a      	ldr	r3, [pc, #40]	; (a908 <stdio_serial_init+0x6c>)
    a8e0:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    a8e2:	46c0      	nop			; (mov r8, r8)
    a8e4:	46bd      	mov	sp, r7
    a8e6:	b004      	add	sp, #16
    a8e8:	bd80      	pop	{r7, pc}
    a8ea:	46c0      	nop			; (mov r8, r8)
    a8ec:	2000046c 	.word	0x2000046c
    a8f0:	20000468 	.word	0x20000468
    a8f4:	0000a829 	.word	0x0000a829
    a8f8:	20000464 	.word	0x20000464
    a8fc:	0000a85d 	.word	0x0000a85d
    a900:	0000a7f9 	.word	0x0000a7f9
    a904:	20000020 	.word	0x20000020
    a908:	0000c5a9 	.word	0x0000c5a9

0000a90c <uart_callback>:
 * \brief Callback of USART input.
 *
 * \param[in] module USART module structure.
 */
static void uart_callback(const struct usart_module *const module)
{
    a90c:	b580      	push	{r7, lr}
    a90e:	b082      	sub	sp, #8
    a910:	af00      	add	r7, sp, #0
    a912:	6078      	str	r0, [r7, #4]
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    a914:	4b08      	ldr	r3, [pc, #32]	; (a938 <uart_callback+0x2c>)
    a916:	681b      	ldr	r3, [r3, #0]
    a918:	2b3f      	cmp	r3, #63	; 0x3f
    a91a:	dc09      	bgt.n	a930 <uart_callback+0x24>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    a91c:	4b06      	ldr	r3, [pc, #24]	; (a938 <uart_callback+0x2c>)
    a91e:	681b      	ldr	r3, [r3, #0]
    a920:	1c59      	adds	r1, r3, #1
    a922:	4a05      	ldr	r2, [pc, #20]	; (a938 <uart_callback+0x2c>)
    a924:	6011      	str	r1, [r2, #0]
    a926:	4a05      	ldr	r2, [pc, #20]	; (a93c <uart_callback+0x30>)
    a928:	8812      	ldrh	r2, [r2, #0]
    a92a:	b2d1      	uxtb	r1, r2
    a92c:	4a04      	ldr	r2, [pc, #16]	; (a940 <uart_callback+0x34>)
    a92e:	54d1      	strb	r1, [r2, r3]
	}
}
    a930:	46c0      	nop			; (mov r8, r8)
    a932:	46bd      	mov	sp, r7
    a934:	b002      	add	sp, #8
    a936:	bd80      	pop	{r7, pc}
    a938:	200002a4 	.word	0x200002a4
    a93c:	200002a8 	.word	0x200002a8
    a940:	20000264 	.word	0x20000264

0000a944 <wifi_callback>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_callback(uint8 msg_type, void *msg_data)
{
    a944:	b590      	push	{r4, r7, lr}
    a946:	b087      	sub	sp, #28
    a948:	af02      	add	r7, sp, #8
    a94a:	0002      	movs	r2, r0
    a94c:	6039      	str	r1, [r7, #0]
    a94e:	1dfb      	adds	r3, r7, #7
    a950:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiStateChanged *msg_wifi_state;
	uint8 *msg_ip_addr;

	switch (msg_type) {
    a952:	1dfb      	adds	r3, r7, #7
    a954:	781b      	ldrb	r3, [r3, #0]
    a956:	2b2c      	cmp	r3, #44	; 0x2c
    a958:	d002      	beq.n	a960 <wifi_callback+0x1c>
    a95a:	2b32      	cmp	r3, #50	; 0x32
    a95c:	d024      	beq.n	a9a8 <wifi_callback+0x64>
		/* Try to connect to MQTT broker when Wi-Fi was connected. */
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
		break;

	default:
		break;
    a95e:	e040      	b.n	a9e2 <wifi_callback+0x9e>
		msg_wifi_state = (tstrM2mWifiStateChanged *)msg_data;
    a960:	683b      	ldr	r3, [r7, #0]
    a962:	60fb      	str	r3, [r7, #12]
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    a964:	68fb      	ldr	r3, [r7, #12]
    a966:	781b      	ldrb	r3, [r3, #0]
    a968:	2b01      	cmp	r3, #1
    a96a:	d106      	bne.n	a97a <wifi_callback+0x36>
			printf("Wi-Fi connected\r\n");
    a96c:	4b1f      	ldr	r3, [pc, #124]	; (a9ec <wifi_callback+0xa8>)
    a96e:	0018      	movs	r0, r3
    a970:	4b1f      	ldr	r3, [pc, #124]	; (a9f0 <wifi_callback+0xac>)
    a972:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    a974:	4b1f      	ldr	r3, [pc, #124]	; (a9f4 <wifi_callback+0xb0>)
    a976:	4798      	blx	r3
		break;
    a978:	e032      	b.n	a9e0 <wifi_callback+0x9c>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    a97a:	68fb      	ldr	r3, [r7, #12]
    a97c:	781b      	ldrb	r3, [r3, #0]
    a97e:	2b00      	cmp	r3, #0
    a980:	d12e      	bne.n	a9e0 <wifi_callback+0x9c>
			printf("Wi-Fi disconnected\r\n");
    a982:	4b1d      	ldr	r3, [pc, #116]	; (a9f8 <wifi_callback+0xb4>)
    a984:	0018      	movs	r0, r3
    a986:	4b1a      	ldr	r3, [pc, #104]	; (a9f0 <wifi_callback+0xac>)
    a988:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    a98a:	4a1c      	ldr	r2, [pc, #112]	; (a9fc <wifi_callback+0xb8>)
    a98c:	481c      	ldr	r0, [pc, #112]	; (aa00 <wifi_callback+0xbc>)
    a98e:	23ff      	movs	r3, #255	; 0xff
    a990:	9300      	str	r3, [sp, #0]
    a992:	0013      	movs	r3, r2
    a994:	2202      	movs	r2, #2
    a996:	210b      	movs	r1, #11
    a998:	4c1a      	ldr	r4, [pc, #104]	; (aa04 <wifi_callback+0xc0>)
    a99a:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    a99c:	4b1a      	ldr	r3, [pc, #104]	; (aa08 <wifi_callback+0xc4>)
    a99e:	2101      	movs	r1, #1
    a9a0:	0018      	movs	r0, r3
    a9a2:	4b1a      	ldr	r3, [pc, #104]	; (aa0c <wifi_callback+0xc8>)
    a9a4:	4798      	blx	r3
		break;
    a9a6:	e01b      	b.n	a9e0 <wifi_callback+0x9c>
		msg_ip_addr = (uint8 *)msg_data;
    a9a8:	683b      	ldr	r3, [r7, #0]
    a9aa:	60bb      	str	r3, [r7, #8]
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    a9ac:	68bb      	ldr	r3, [r7, #8]
    a9ae:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    a9b0:	0019      	movs	r1, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    a9b2:	68bb      	ldr	r3, [r7, #8]
    a9b4:	3301      	adds	r3, #1
    a9b6:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    a9b8:	001a      	movs	r2, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    a9ba:	68bb      	ldr	r3, [r7, #8]
    a9bc:	3302      	adds	r3, #2
    a9be:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    a9c0:	001c      	movs	r4, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    a9c2:	68bb      	ldr	r3, [r7, #8]
    a9c4:	3303      	adds	r3, #3
    a9c6:	781b      	ldrb	r3, [r3, #0]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    a9c8:	4811      	ldr	r0, [pc, #68]	; (aa10 <wifi_callback+0xcc>)
    a9ca:	9300      	str	r3, [sp, #0]
    a9cc:	0023      	movs	r3, r4
    a9ce:	4c11      	ldr	r4, [pc, #68]	; (aa14 <wifi_callback+0xd0>)
    a9d0:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    a9d2:	4a11      	ldr	r2, [pc, #68]	; (aa18 <wifi_callback+0xd4>)
    a9d4:	4b0c      	ldr	r3, [pc, #48]	; (aa08 <wifi_callback+0xc4>)
    a9d6:	0011      	movs	r1, r2
    a9d8:	0018      	movs	r0, r3
    a9da:	4b10      	ldr	r3, [pc, #64]	; (aa1c <wifi_callback+0xd8>)
    a9dc:	4798      	blx	r3
		break;
    a9de:	e000      	b.n	a9e2 <wifi_callback+0x9e>
		break;
    a9e0:	46c0      	nop			; (mov r8, r8)
	}
}
    a9e2:	46c0      	nop			; (mov r8, r8)
    a9e4:	46bd      	mov	sp, r7
    a9e6:	b005      	add	sp, #20
    a9e8:	bd90      	pop	{r4, r7, pc}
    a9ea:	46c0      	nop			; (mov r8, r8)
    a9ec:	0000e9c0 	.word	0x0000e9c0
    a9f0:	0000c571 	.word	0x0000c571
    a9f4:	000024e5 	.word	0x000024e5
    a9f8:	0000e9d4 	.word	0x0000e9d4
    a9fc:	0000e9e8 	.word	0x0000e9e8
    aa00:	0000e9f4 	.word	0x0000e9f4
    aa04:	0000201d 	.word	0x0000201d
    aa08:	20000170 	.word	0x20000170
    aa0c:	0000bacd 	.word	0x0000bacd
    aa10:	0000ea00 	.word	0x0000ea00
    aa14:	0000c455 	.word	0x0000c455
    aa18:	0000e9ac 	.word	0x0000e9ac
    aa1c:	0000b2c1 	.word	0x0000b2c1

0000aa20 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    aa20:	b580      	push	{r7, lr}
    aa22:	b082      	sub	sp, #8
    aa24:	af00      	add	r7, sp, #0
    aa26:	603a      	str	r2, [r7, #0]
    aa28:	1dfb      	adds	r3, r7, #7
    aa2a:	1c02      	adds	r2, r0, #0
    aa2c:	701a      	strb	r2, [r3, #0]
    aa2e:	1dbb      	adds	r3, r7, #6
    aa30:	1c0a      	adds	r2, r1, #0
    aa32:	701a      	strb	r2, [r3, #0]
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    aa34:	683a      	ldr	r2, [r7, #0]
    aa36:	1dbb      	adds	r3, r7, #6
    aa38:	7819      	ldrb	r1, [r3, #0]
    aa3a:	1dfb      	adds	r3, r7, #7
    aa3c:	781b      	ldrb	r3, [r3, #0]
    aa3e:	b25b      	sxtb	r3, r3
    aa40:	0018      	movs	r0, r3
    aa42:	4b03      	ldr	r3, [pc, #12]	; (aa50 <socket_event_handler+0x30>)
    aa44:	4798      	blx	r3
}
    aa46:	46c0      	nop			; (mov r8, r8)
    aa48:	46bd      	mov	sp, r7
    aa4a:	b002      	add	sp, #8
    aa4c:	bd80      	pop	{r7, pc}
    aa4e:	46c0      	nop			; (mov r8, r8)
    aa50:	0000be0d 	.word	0x0000be0d

0000aa54 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    aa54:	b580      	push	{r7, lr}
    aa56:	b082      	sub	sp, #8
    aa58:	af00      	add	r7, sp, #0
    aa5a:	6078      	str	r0, [r7, #4]
    aa5c:	6039      	str	r1, [r7, #0]
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    aa5e:	683a      	ldr	r2, [r7, #0]
    aa60:	687b      	ldr	r3, [r7, #4]
    aa62:	0011      	movs	r1, r2
    aa64:	0018      	movs	r0, r3
    aa66:	4b03      	ldr	r3, [pc, #12]	; (aa74 <socket_resolve_handler+0x20>)
    aa68:	4798      	blx	r3
}
    aa6a:	46c0      	nop			; (mov r8, r8)
    aa6c:	46bd      	mov	sp, r7
    aa6e:	b002      	add	sp, #8
    aa70:	bd80      	pop	{r7, pc}
    aa72:	46c0      	nop			; (mov r8, r8)
    aa74:	0000b26d 	.word	0x0000b26d

0000aa78 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    aa78:	b590      	push	{r4, r7, lr}
    aa7a:	b08f      	sub	sp, #60	; 0x3c
    aa7c:	af06      	add	r7, sp, #24
    aa7e:	60f8      	str	r0, [r7, #12]
    aa80:	60b9      	str	r1, [r7, #8]
    aa82:	607a      	str	r2, [r7, #4]
	switch (type) {
    aa84:	68bb      	ldr	r3, [r7, #8]
    aa86:	2b01      	cmp	r3, #1
    aa88:	d031      	beq.n	aaee <mqtt_callback+0x76>
    aa8a:	dc02      	bgt.n	aa92 <mqtt_callback+0x1a>
    aa8c:	2b00      	cmp	r3, #0
    aa8e:	d006      	beq.n	aa9e <mqtt_callback+0x26>
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    aa90:	e0ec      	b.n	ac6c <mqtt_callback+0x1f4>
	switch (type) {
    aa92:	2b05      	cmp	r3, #5
    aa94:	d100      	bne.n	aa98 <mqtt_callback+0x20>
    aa96:	e0de      	b.n	ac56 <mqtt_callback+0x1de>
    aa98:	2b06      	cmp	r3, #6
    aa9a:	d05f      	beq.n	ab5c <mqtt_callback+0xe4>
}
    aa9c:	e0e6      	b.n	ac6c <mqtt_callback+0x1f4>
		if (data->sock_connected.result >= 0) {
    aa9e:	687b      	ldr	r3, [r7, #4]
    aaa0:	681b      	ldr	r3, [r3, #0]
    aaa2:	2b00      	cmp	r3, #0
    aaa4:	db16      	blt.n	aad4 <mqtt_callback+0x5c>
      status = mqtt_connect_broker(module_inst, 1, mqtt_user, mqtt_pass, mqtt_user, NULL, NULL, 0, 0, 0);
    aaa6:	4973      	ldr	r1, [pc, #460]	; (ac74 <mqtt_callback+0x1fc>)
    aaa8:	4a73      	ldr	r2, [pc, #460]	; (ac78 <mqtt_callback+0x200>)
    aaaa:	68f8      	ldr	r0, [r7, #12]
    aaac:	2300      	movs	r3, #0
    aaae:	9305      	str	r3, [sp, #20]
    aab0:	2300      	movs	r3, #0
    aab2:	9304      	str	r3, [sp, #16]
    aab4:	2300      	movs	r3, #0
    aab6:	9303      	str	r3, [sp, #12]
    aab8:	2300      	movs	r3, #0
    aaba:	9302      	str	r3, [sp, #8]
    aabc:	2300      	movs	r3, #0
    aabe:	9301      	str	r3, [sp, #4]
    aac0:	4b6d      	ldr	r3, [pc, #436]	; (ac78 <mqtt_callback+0x200>)
    aac2:	9300      	str	r3, [sp, #0]
    aac4:	000b      	movs	r3, r1
    aac6:	2101      	movs	r1, #1
    aac8:	4c6c      	ldr	r4, [pc, #432]	; (ac7c <mqtt_callback+0x204>)
    aaca:	47a0      	blx	r4
    aacc:	0002      	movs	r2, r0
    aace:	4b6c      	ldr	r3, [pc, #432]	; (ac80 <mqtt_callback+0x208>)
    aad0:	601a      	str	r2, [r3, #0]
	break;
    aad2:	e0cb      	b.n	ac6c <mqtt_callback+0x1f4>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    aad4:	4a6b      	ldr	r2, [pc, #428]	; (ac84 <mqtt_callback+0x20c>)
    aad6:	4b6c      	ldr	r3, [pc, #432]	; (ac88 <mqtt_callback+0x210>)
    aad8:	0011      	movs	r1, r2
    aada:	0018      	movs	r0, r3
    aadc:	4b6b      	ldr	r3, [pc, #428]	; (ac8c <mqtt_callback+0x214>)
    aade:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    aae0:	4a68      	ldr	r2, [pc, #416]	; (ac84 <mqtt_callback+0x20c>)
    aae2:	68fb      	ldr	r3, [r7, #12]
    aae4:	0011      	movs	r1, r2
    aae6:	0018      	movs	r0, r3
    aae8:	4b69      	ldr	r3, [pc, #420]	; (ac90 <mqtt_callback+0x218>)
    aaea:	4798      	blx	r3
	break;
    aaec:	e0be      	b.n	ac6c <mqtt_callback+0x1f4>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    aaee:	687b      	ldr	r3, [r7, #4]
    aaf0:	781b      	ldrb	r3, [r3, #0]
    aaf2:	2b00      	cmp	r3, #0
    aaf4:	d129      	bne.n	ab4a <mqtt_callback+0xd2>
      delay_ms(1000);
    aaf6:	23fa      	movs	r3, #250	; 0xfa
    aaf8:	009b      	lsls	r3, r3, #2
    aafa:	0018      	movs	r0, r3
    aafc:	4b65      	ldr	r3, [pc, #404]	; (ac94 <mqtt_callback+0x21c>)
    aafe:	4798      	blx	r3
			status = mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC, 2);
    ab00:	4965      	ldr	r1, [pc, #404]	; (ac98 <mqtt_callback+0x220>)
    ab02:	68fb      	ldr	r3, [r7, #12]
    ab04:	2202      	movs	r2, #2
    ab06:	0018      	movs	r0, r3
    ab08:	4b64      	ldr	r3, [pc, #400]	; (ac9c <mqtt_callback+0x224>)
    ab0a:	4798      	blx	r3
    ab0c:	0002      	movs	r2, r0
    ab0e:	4b5c      	ldr	r3, [pc, #368]	; (ac80 <mqtt_callback+0x208>)
    ab10:	601a      	str	r2, [r3, #0]
      status = mqtt_subscribe(module_inst, SENSOR_TOPIC, 2);
    ab12:	4963      	ldr	r1, [pc, #396]	; (aca0 <mqtt_callback+0x228>)
    ab14:	68fb      	ldr	r3, [r7, #12]
    ab16:	2202      	movs	r2, #2
    ab18:	0018      	movs	r0, r3
    ab1a:	4b60      	ldr	r3, [pc, #384]	; (ac9c <mqtt_callback+0x224>)
    ab1c:	4798      	blx	r3
    ab1e:	0002      	movs	r2, r0
    ab20:	4b57      	ldr	r3, [pc, #348]	; (ac80 <mqtt_callback+0x208>)
    ab22:	601a      	str	r2, [r3, #0]
      status = mqtt_subscribe(module_inst, ACTUATOR_TOPIC, 2);
    ab24:	495f      	ldr	r1, [pc, #380]	; (aca4 <mqtt_callback+0x22c>)
    ab26:	68fb      	ldr	r3, [r7, #12]
    ab28:	2202      	movs	r2, #2
    ab2a:	0018      	movs	r0, r3
    ab2c:	4b5b      	ldr	r3, [pc, #364]	; (ac9c <mqtt_callback+0x224>)
    ab2e:	4798      	blx	r3
    ab30:	0002      	movs	r2, r0
    ab32:	4b53      	ldr	r3, [pc, #332]	; (ac80 <mqtt_callback+0x208>)
    ab34:	601a      	str	r2, [r3, #0]
			usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
    ab36:	4b5c      	ldr	r3, [pc, #368]	; (aca8 <mqtt_callback+0x230>)
    ab38:	2101      	movs	r1, #1
    ab3a:	0018      	movs	r0, r3
    ab3c:	4b5b      	ldr	r3, [pc, #364]	; (acac <mqtt_callback+0x234>)
    ab3e:	4798      	blx	r3
			printf("Preparation of the chat has been completed.\r\n");
    ab40:	4b5b      	ldr	r3, [pc, #364]	; (acb0 <mqtt_callback+0x238>)
    ab42:	0018      	movs	r0, r3
    ab44:	4b5b      	ldr	r3, [pc, #364]	; (acb4 <mqtt_callback+0x23c>)
    ab46:	4798      	blx	r3
		break;
    ab48:	e090      	b.n	ac6c <mqtt_callback+0x1f4>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    ab4a:	687b      	ldr	r3, [r7, #4]
    ab4c:	781b      	ldrb	r3, [r3, #0]
    ab4e:	001a      	movs	r2, r3
    ab50:	4b59      	ldr	r3, [pc, #356]	; (acb8 <mqtt_callback+0x240>)
    ab52:	0011      	movs	r1, r2
    ab54:	0018      	movs	r0, r3
    ab56:	4b4d      	ldr	r3, [pc, #308]	; (ac8c <mqtt_callback+0x214>)
    ab58:	4798      	blx	r3
		break;
    ab5a:	e087      	b.n	ac6c <mqtt_callback+0x1f4>
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    ab5c:	687b      	ldr	r3, [r7, #4]
    ab5e:	681b      	ldr	r3, [r3, #0]
    ab60:	2b00      	cmp	r3, #0
    ab62:	d100      	bne.n	ab66 <mqtt_callback+0xee>
    ab64:	e081      	b.n	ac6a <mqtt_callback+0x1f2>
    ab66:	687b      	ldr	r3, [r7, #4]
    ab68:	689b      	ldr	r3, [r3, #8]
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	d100      	bne.n	ab70 <mqtt_callback+0xf8>
    ab6e:	e07c      	b.n	ac6a <mqtt_callback+0x1f2>
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC)) ) {
    ab70:	687b      	ldr	r3, [r7, #4]
    ab72:	681b      	ldr	r3, [r3, #0]
    ab74:	4948      	ldr	r1, [pc, #288]	; (ac98 <mqtt_callback+0x220>)
    ab76:	2204      	movs	r2, #4
    ab78:	0018      	movs	r0, r3
    ab7a:	4b50      	ldr	r3, [pc, #320]	; (acbc <mqtt_callback+0x244>)
    ab7c:	4798      	blx	r3
    ab7e:	1e03      	subs	r3, r0, #0
    ab80:	d11c      	bne.n	abbc <mqtt_callback+0x144>
        printf("%s >> ", MAIN_CHAT_TOPIC);
    ab82:	4a45      	ldr	r2, [pc, #276]	; (ac98 <mqtt_callback+0x220>)
    ab84:	4b4e      	ldr	r3, [pc, #312]	; (acc0 <mqtt_callback+0x248>)
    ab86:	0011      	movs	r1, r2
    ab88:	0018      	movs	r0, r3
    ab8a:	4b40      	ldr	r3, [pc, #256]	; (ac8c <mqtt_callback+0x214>)
    ab8c:	4798      	blx	r3
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    ab8e:	2300      	movs	r3, #0
    ab90:	61fb      	str	r3, [r7, #28]
    ab92:	e00a      	b.n	abaa <mqtt_callback+0x132>
          printf("%c", data->recv_publish.msg[i]);
    ab94:	687b      	ldr	r3, [r7, #4]
    ab96:	689a      	ldr	r2, [r3, #8]
    ab98:	69fb      	ldr	r3, [r7, #28]
    ab9a:	18d3      	adds	r3, r2, r3
    ab9c:	781b      	ldrb	r3, [r3, #0]
    ab9e:	0018      	movs	r0, r3
    aba0:	4b48      	ldr	r3, [pc, #288]	; (acc4 <mqtt_callback+0x24c>)
    aba2:	4798      	blx	r3
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    aba4:	69fb      	ldr	r3, [r7, #28]
    aba6:	3301      	adds	r3, #1
    aba8:	61fb      	str	r3, [r7, #28]
    abaa:	687b      	ldr	r3, [r7, #4]
    abac:	68da      	ldr	r2, [r3, #12]
    abae:	69fb      	ldr	r3, [r7, #28]
    abb0:	429a      	cmp	r2, r3
    abb2:	dcef      	bgt.n	ab94 <mqtt_callback+0x11c>
        printf("\r\n");
    abb4:	4b44      	ldr	r3, [pc, #272]	; (acc8 <mqtt_callback+0x250>)
    abb6:	0018      	movs	r0, r3
    abb8:	4b3e      	ldr	r3, [pc, #248]	; (acb4 <mqtt_callback+0x23c>)
    abba:	4798      	blx	r3
      if (!strncmp(data->recv_publish.topic, SENSOR_TOPIC, strlen(SENSOR_TOPIC)) ) {
    abbc:	687b      	ldr	r3, [r7, #4]
    abbe:	681b      	ldr	r3, [r3, #0]
    abc0:	4937      	ldr	r1, [pc, #220]	; (aca0 <mqtt_callback+0x228>)
    abc2:	2206      	movs	r2, #6
    abc4:	0018      	movs	r0, r3
    abc6:	4b3d      	ldr	r3, [pc, #244]	; (acbc <mqtt_callback+0x244>)
    abc8:	4798      	blx	r3
    abca:	1e03      	subs	r3, r0, #0
    abcc:	d11c      	bne.n	ac08 <mqtt_callback+0x190>
        printf("%s >> ", SENSOR_TOPIC);
    abce:	4a34      	ldr	r2, [pc, #208]	; (aca0 <mqtt_callback+0x228>)
    abd0:	4b3b      	ldr	r3, [pc, #236]	; (acc0 <mqtt_callback+0x248>)
    abd2:	0011      	movs	r1, r2
    abd4:	0018      	movs	r0, r3
    abd6:	4b2d      	ldr	r3, [pc, #180]	; (ac8c <mqtt_callback+0x214>)
    abd8:	4798      	blx	r3
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    abda:	2300      	movs	r3, #0
    abdc:	61bb      	str	r3, [r7, #24]
    abde:	e00a      	b.n	abf6 <mqtt_callback+0x17e>
          printf("%c", data->recv_publish.msg[i]);
    abe0:	687b      	ldr	r3, [r7, #4]
    abe2:	689a      	ldr	r2, [r3, #8]
    abe4:	69bb      	ldr	r3, [r7, #24]
    abe6:	18d3      	adds	r3, r2, r3
    abe8:	781b      	ldrb	r3, [r3, #0]
    abea:	0018      	movs	r0, r3
    abec:	4b35      	ldr	r3, [pc, #212]	; (acc4 <mqtt_callback+0x24c>)
    abee:	4798      	blx	r3
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    abf0:	69bb      	ldr	r3, [r7, #24]
    abf2:	3301      	adds	r3, #1
    abf4:	61bb      	str	r3, [r7, #24]
    abf6:	687b      	ldr	r3, [r7, #4]
    abf8:	68da      	ldr	r2, [r3, #12]
    abfa:	69bb      	ldr	r3, [r7, #24]
    abfc:	429a      	cmp	r2, r3
    abfe:	dcef      	bgt.n	abe0 <mqtt_callback+0x168>
        printf("\r\n");
    ac00:	4b31      	ldr	r3, [pc, #196]	; (acc8 <mqtt_callback+0x250>)
    ac02:	0018      	movs	r0, r3
    ac04:	4b2b      	ldr	r3, [pc, #172]	; (acb4 <mqtt_callback+0x23c>)
    ac06:	4798      	blx	r3
      if (!strncmp(data->recv_publish.topic, ACTUATOR_TOPIC, strlen(ACTUATOR_TOPIC)) ) {
    ac08:	687b      	ldr	r3, [r7, #4]
    ac0a:	681b      	ldr	r3, [r3, #0]
    ac0c:	4925      	ldr	r1, [pc, #148]	; (aca4 <mqtt_callback+0x22c>)
    ac0e:	2208      	movs	r2, #8
    ac10:	0018      	movs	r0, r3
    ac12:	4b2a      	ldr	r3, [pc, #168]	; (acbc <mqtt_callback+0x244>)
    ac14:	4798      	blx	r3
    ac16:	1e03      	subs	r3, r0, #0
    ac18:	d127      	bne.n	ac6a <mqtt_callback+0x1f2>
        printf("%s >> ", ACTUATOR_TOPIC);
    ac1a:	4a22      	ldr	r2, [pc, #136]	; (aca4 <mqtt_callback+0x22c>)
    ac1c:	4b28      	ldr	r3, [pc, #160]	; (acc0 <mqtt_callback+0x248>)
    ac1e:	0011      	movs	r1, r2
    ac20:	0018      	movs	r0, r3
    ac22:	4b1a      	ldr	r3, [pc, #104]	; (ac8c <mqtt_callback+0x214>)
    ac24:	4798      	blx	r3
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    ac26:	2300      	movs	r3, #0
    ac28:	617b      	str	r3, [r7, #20]
    ac2a:	e00a      	b.n	ac42 <mqtt_callback+0x1ca>
          printf("%c", data->recv_publish.msg[i]);
    ac2c:	687b      	ldr	r3, [r7, #4]
    ac2e:	689a      	ldr	r2, [r3, #8]
    ac30:	697b      	ldr	r3, [r7, #20]
    ac32:	18d3      	adds	r3, r2, r3
    ac34:	781b      	ldrb	r3, [r3, #0]
    ac36:	0018      	movs	r0, r3
    ac38:	4b22      	ldr	r3, [pc, #136]	; (acc4 <mqtt_callback+0x24c>)
    ac3a:	4798      	blx	r3
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    ac3c:	697b      	ldr	r3, [r7, #20]
    ac3e:	3301      	adds	r3, #1
    ac40:	617b      	str	r3, [r7, #20]
    ac42:	687b      	ldr	r3, [r7, #4]
    ac44:	68da      	ldr	r2, [r3, #12]
    ac46:	697b      	ldr	r3, [r7, #20]
    ac48:	429a      	cmp	r2, r3
    ac4a:	dcef      	bgt.n	ac2c <mqtt_callback+0x1b4>
        printf("\r\n");
    ac4c:	4b1e      	ldr	r3, [pc, #120]	; (acc8 <mqtt_callback+0x250>)
    ac4e:	0018      	movs	r0, r3
    ac50:	4b18      	ldr	r3, [pc, #96]	; (acb4 <mqtt_callback+0x23c>)
    ac52:	4798      	blx	r3
		break;
    ac54:	e009      	b.n	ac6a <mqtt_callback+0x1f2>
		printf("MQTT disconnected\r\n");
    ac56:	4b1d      	ldr	r3, [pc, #116]	; (accc <mqtt_callback+0x254>)
    ac58:	0018      	movs	r0, r3
    ac5a:	4b16      	ldr	r3, [pc, #88]	; (acb4 <mqtt_callback+0x23c>)
    ac5c:	4798      	blx	r3
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
    ac5e:	4b12      	ldr	r3, [pc, #72]	; (aca8 <mqtt_callback+0x230>)
    ac60:	2101      	movs	r1, #1
    ac62:	0018      	movs	r0, r3
    ac64:	4b1a      	ldr	r3, [pc, #104]	; (acd0 <mqtt_callback+0x258>)
    ac66:	4798      	blx	r3
		break;
    ac68:	e000      	b.n	ac6c <mqtt_callback+0x1f4>
		break;
    ac6a:	46c0      	nop			; (mov r8, r8)
}
    ac6c:	46c0      	nop			; (mov r8, r8)
    ac6e:	46bd      	mov	sp, r7
    ac70:	b009      	add	sp, #36	; 0x24
    ac72:	bd90      	pop	{r4, r7, pc}
    ac74:	20000018 	.word	0x20000018
    ac78:	20000010 	.word	0x20000010
    ac7c:	0000b3d5 	.word	0x0000b3d5
    ac80:	200004cc 	.word	0x200004cc
    ac84:	0000e9ac 	.word	0x0000e9ac
    ac88:	0000ea1c 	.word	0x0000ea1c
    ac8c:	0000c455 	.word	0x0000c455
    ac90:	0000b2c1 	.word	0x0000b2c1
    ac94:	000001a1 	.word	0x000001a1
    ac98:	0000ea54 	.word	0x0000ea54
    ac9c:	0000b82d 	.word	0x0000b82d
    aca0:	0000ea5c 	.word	0x0000ea5c
    aca4:	0000ea64 	.word	0x0000ea64
    aca8:	200000fc 	.word	0x200000fc
    acac:	0000a789 	.word	0x0000a789
    acb0:	0000ea70 	.word	0x0000ea70
    acb4:	0000c571 	.word	0x0000c571
    acb8:	0000eaa0 	.word	0x0000eaa0
    acbc:	0000c78b 	.word	0x0000c78b
    acc0:	0000ead4 	.word	0x0000ead4
    acc4:	0000c489 	.word	0x0000c489
    acc8:	0000eadc 	.word	0x0000eadc
    accc:	0000eae0 	.word	0x0000eae0
    acd0:	0000a7bf 	.word	0x0000a7bf

0000acd4 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    acd4:	b580      	push	{r7, lr}
    acd6:	b090      	sub	sp, #64	; 0x40
    acd8:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    acda:	003b      	movs	r3, r7
    acdc:	0018      	movs	r0, r3
    acde:	4b16      	ldr	r3, [pc, #88]	; (ad38 <configure_console+0x64>)
    ace0:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    ace2:	003b      	movs	r3, r7
    ace4:	22c4      	movs	r2, #196	; 0xc4
    ace6:	0392      	lsls	r2, r2, #14
    ace8:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    acea:	003b      	movs	r3, r7
    acec:	2201      	movs	r2, #1
    acee:	4252      	negs	r2, r2
    acf0:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    acf2:	003b      	movs	r3, r7
    acf4:	2201      	movs	r2, #1
    acf6:	4252      	negs	r2, r2
    acf8:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    acfa:	003b      	movs	r3, r7
    acfc:	4a0f      	ldr	r2, [pc, #60]	; (ad3c <configure_console+0x68>)
    acfe:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    ad00:	003b      	movs	r3, r7
    ad02:	4a0f      	ldr	r2, [pc, #60]	; (ad40 <configure_console+0x6c>)
    ad04:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    ad06:	003b      	movs	r3, r7
    ad08:	22e1      	movs	r2, #225	; 0xe1
    ad0a:	0252      	lsls	r2, r2, #9
    ad0c:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    ad0e:	003a      	movs	r2, r7
    ad10:	490c      	ldr	r1, [pc, #48]	; (ad44 <configure_console+0x70>)
    ad12:	4b0d      	ldr	r3, [pc, #52]	; (ad48 <configure_console+0x74>)
    ad14:	0018      	movs	r0, r3
    ad16:	4b0d      	ldr	r3, [pc, #52]	; (ad4c <configure_console+0x78>)
    ad18:	4798      	blx	r3
	/* Register USART callback for receiving user input. */
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    ad1a:	490d      	ldr	r1, [pc, #52]	; (ad50 <configure_console+0x7c>)
    ad1c:	4b0a      	ldr	r3, [pc, #40]	; (ad48 <configure_console+0x74>)
    ad1e:	2201      	movs	r2, #1
    ad20:	0018      	movs	r0, r3
    ad22:	4b0c      	ldr	r3, [pc, #48]	; (ad54 <configure_console+0x80>)
    ad24:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    ad26:	4b08      	ldr	r3, [pc, #32]	; (ad48 <configure_console+0x74>)
    ad28:	0018      	movs	r0, r3
    ad2a:	4b0b      	ldr	r3, [pc, #44]	; (ad58 <configure_console+0x84>)
    ad2c:	4798      	blx	r3
}
    ad2e:	46c0      	nop			; (mov r8, r8)
    ad30:	46bd      	mov	sp, r7
    ad32:	b010      	add	sp, #64	; 0x40
    ad34:	bd80      	pop	{r7, pc}
    ad36:	46c0      	nop			; (mov r8, r8)
    ad38:	0000a681 	.word	0x0000a681
    ad3c:	002a0003 	.word	0x002a0003
    ad40:	002b0003 	.word	0x002b0003
    ad44:	42001800 	.word	0x42001800
    ad48:	200000fc 	.word	0x200000fc
    ad4c:	0000a89d 	.word	0x0000a89d
    ad50:	0000a90d 	.word	0x0000a90d
    ad54:	00007e45 	.word	0x00007e45
    ad58:	0000a741 	.word	0x0000a741

0000ad5c <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
    ad5c:	b580      	push	{r7, lr}
    ad5e:	b082      	sub	sp, #8
    ad60:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
    ad62:	1d3b      	adds	r3, r7, #4
    ad64:	0018      	movs	r0, r3
    ad66:	4b08      	ldr	r3, [pc, #32]	; (ad88 <configure_timer+0x2c>)
    ad68:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    ad6a:	1d3a      	adds	r2, r7, #4
    ad6c:	4b07      	ldr	r3, [pc, #28]	; (ad8c <configure_timer+0x30>)
    ad6e:	0011      	movs	r1, r2
    ad70:	0018      	movs	r0, r3
    ad72:	4b07      	ldr	r3, [pc, #28]	; (ad90 <configure_timer+0x34>)
    ad74:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    ad76:	4b05      	ldr	r3, [pc, #20]	; (ad8c <configure_timer+0x30>)
    ad78:	0018      	movs	r0, r3
    ad7a:	4b06      	ldr	r3, [pc, #24]	; (ad94 <configure_timer+0x38>)
    ad7c:	4798      	blx	r3
}
    ad7e:	46c0      	nop			; (mov r8, r8)
    ad80:	46bd      	mov	sp, r7
    ad82:	b002      	add	sp, #8
    ad84:	bd80      	pop	{r7, pc}
    ad86:	46c0      	nop			; (mov r8, r8)
    ad88:	0000a241 	.word	0x0000a241
    ad8c:	20000474 	.word	0x20000474
    ad90:	0000a265 	.word	0x0000a265
    ad94:	0000a351 	.word	0x0000a351

0000ad98 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
    ad98:	b580      	push	{r7, lr}
    ad9a:	b088      	sub	sp, #32
    ad9c:	af00      	add	r7, sp, #0
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
    ad9e:	003b      	movs	r3, r7
    ada0:	0018      	movs	r0, r3
    ada2:	4b1b      	ldr	r3, [pc, #108]	; (ae10 <configure_mqtt+0x78>)
    ada4:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst;
    ada6:	003b      	movs	r3, r7
    ada8:	4a1a      	ldr	r2, [pc, #104]	; (ae14 <configure_mqtt+0x7c>)
    adaa:	605a      	str	r2, [r3, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
    adac:	003b      	movs	r3, r7
    adae:	4a1a      	ldr	r2, [pc, #104]	; (ae18 <configure_mqtt+0x80>)
    adb0:	60da      	str	r2, [r3, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    adb2:	003b      	movs	r3, r7
    adb4:	2280      	movs	r2, #128	; 0x80
    adb6:	611a      	str	r2, [r3, #16]
  mqtt_conf.port = MQTT_PORT;
    adb8:	003b      	movs	r3, r7
    adba:	4a18      	ldr	r2, [pc, #96]	; (ae1c <configure_mqtt+0x84>)
    adbc:	801a      	strh	r2, [r3, #0]

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    adbe:	003a      	movs	r2, r7
    adc0:	4b17      	ldr	r3, [pc, #92]	; (ae20 <configure_mqtt+0x88>)
    adc2:	0011      	movs	r1, r2
    adc4:	0018      	movs	r0, r3
    adc6:	4b17      	ldr	r3, [pc, #92]	; (ae24 <configure_mqtt+0x8c>)
    adc8:	4798      	blx	r3
    adca:	0003      	movs	r3, r0
    adcc:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    adce:	69fb      	ldr	r3, [r7, #28]
    add0:	2b00      	cmp	r3, #0
    add2:	da06      	bge.n	ade2 <configure_mqtt+0x4a>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    add4:	69fa      	ldr	r2, [r7, #28]
    add6:	4b14      	ldr	r3, [pc, #80]	; (ae28 <configure_mqtt+0x90>)
    add8:	0011      	movs	r1, r2
    adda:	0018      	movs	r0, r3
    addc:	4b13      	ldr	r3, [pc, #76]	; (ae2c <configure_mqtt+0x94>)
    adde:	4798      	blx	r3
		while (1) {
    ade0:	e7fe      	b.n	ade0 <configure_mqtt+0x48>
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    ade2:	4a13      	ldr	r2, [pc, #76]	; (ae30 <configure_mqtt+0x98>)
    ade4:	4b0e      	ldr	r3, [pc, #56]	; (ae20 <configure_mqtt+0x88>)
    ade6:	0011      	movs	r1, r2
    ade8:	0018      	movs	r0, r3
    adea:	4b12      	ldr	r3, [pc, #72]	; (ae34 <configure_mqtt+0x9c>)
    adec:	4798      	blx	r3
    adee:	0003      	movs	r3, r0
    adf0:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    adf2:	69fb      	ldr	r3, [r7, #28]
    adf4:	2b00      	cmp	r3, #0
    adf6:	da06      	bge.n	ae06 <configure_mqtt+0x6e>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    adf8:	69fa      	ldr	r2, [r7, #28]
    adfa:	4b0f      	ldr	r3, [pc, #60]	; (ae38 <configure_mqtt+0xa0>)
    adfc:	0011      	movs	r1, r2
    adfe:	0018      	movs	r0, r3
    ae00:	4b0a      	ldr	r3, [pc, #40]	; (ae2c <configure_mqtt+0x94>)
    ae02:	4798      	blx	r3
		while (1) {
    ae04:	e7fe      	b.n	ae04 <configure_mqtt+0x6c>
		}
	}
}
    ae06:	46c0      	nop			; (mov r8, r8)
    ae08:	46bd      	mov	sp, r7
    ae0a:	b008      	add	sp, #32
    ae0c:	bd80      	pop	{r7, pc}
    ae0e:	46c0      	nop			; (mov r8, r8)
    ae10:	0000b1ad 	.word	0x0000b1ad
    ae14:	20000474 	.word	0x20000474
    ae18:	200001e4 	.word	0x200001e4
    ae1c:	00004788 	.word	0x00004788
    ae20:	20000170 	.word	0x20000170
    ae24:	0000b1d1 	.word	0x0000b1d1
    ae28:	0000eaf4 	.word	0x0000eaf4
    ae2c:	0000c455 	.word	0x0000c455
    ae30:	0000aa79 	.word	0x0000aa79
    ae34:	0000b25d 	.word	0x0000b25d
    ae38:	0000eb28 	.word	0x0000eb28

0000ae3c <check_usart_buffer>:
 *
 * Finding the new line character(\n or \r\n) in the USART buffer.
 * If buffer was overflowed, Sending the buffer.
 */
static void check_usart_buffer(char *topic)
{
    ae3c:	b590      	push	{r4, r7, lr}
    ae3e:	b087      	sub	sp, #28
    ae40:	af02      	add	r7, sp, #8
    ae42:	6078      	str	r0, [r7, #4]
	int i;

	/* Publish the input string when newline was received or input string is bigger than buffer size limit. */
	if (uart_buffer_written >= MAIN_CHAT_BUFFER_SIZE) {
    ae44:	4b30      	ldr	r3, [pc, #192]	; (af08 <check_usart_buffer+0xcc>)
    ae46:	681b      	ldr	r3, [r3, #0]
    ae48:	2b3f      	cmp	r3, #63	; 0x3f
    ae4a:	dd0d      	ble.n	ae68 <check_usart_buffer+0x2c>
		mqtt_publish(&mqtt_inst, topic, uart_buffer, MAIN_CHAT_BUFFER_SIZE, 0, 0);
    ae4c:	4a2f      	ldr	r2, [pc, #188]	; (af0c <check_usart_buffer+0xd0>)
    ae4e:	6879      	ldr	r1, [r7, #4]
    ae50:	482f      	ldr	r0, [pc, #188]	; (af10 <check_usart_buffer+0xd4>)
    ae52:	2300      	movs	r3, #0
    ae54:	9301      	str	r3, [sp, #4]
    ae56:	2300      	movs	r3, #0
    ae58:	9300      	str	r3, [sp, #0]
    ae5a:	2340      	movs	r3, #64	; 0x40
    ae5c:	4c2d      	ldr	r4, [pc, #180]	; (af14 <check_usart_buffer+0xd8>)
    ae5e:	47a0      	blx	r4
		uart_buffer_written = 0;
    ae60:	4b29      	ldr	r3, [pc, #164]	; (af08 <check_usart_buffer+0xcc>)
    ae62:	2200      	movs	r2, #0
    ae64:	601a      	str	r2, [r3, #0]

				break;
			}
		}
	}
}
    ae66:	e04a      	b.n	aefe <check_usart_buffer+0xc2>
		for (i = 0; i < uart_buffer_written; i++) {
    ae68:	2300      	movs	r3, #0
    ae6a:	60fb      	str	r3, [r7, #12]
    ae6c:	e041      	b.n	aef2 <check_usart_buffer+0xb6>
			if (uart_buffer[i] == '\n') {
    ae6e:	4a27      	ldr	r2, [pc, #156]	; (af0c <check_usart_buffer+0xd0>)
    ae70:	68fb      	ldr	r3, [r7, #12]
    ae72:	18d3      	adds	r3, r2, r3
    ae74:	781b      	ldrb	r3, [r3, #0]
    ae76:	2b0a      	cmp	r3, #10
    ae78:	d138      	bne.n	aeec <check_usart_buffer+0xb0>
				mqtt_publish(&mqtt_inst, topic, uart_buffer, (i > 0 && uart_buffer[i - 1] == '\r') ? i - 1 : i, 0, 0);
    ae7a:	68fb      	ldr	r3, [r7, #12]
    ae7c:	2b00      	cmp	r3, #0
    ae7e:	dd09      	ble.n	ae94 <check_usart_buffer+0x58>
    ae80:	68fb      	ldr	r3, [r7, #12]
    ae82:	3b01      	subs	r3, #1
    ae84:	4a21      	ldr	r2, [pc, #132]	; (af0c <check_usart_buffer+0xd0>)
    ae86:	5cd3      	ldrb	r3, [r2, r3]
    ae88:	2b0d      	cmp	r3, #13
    ae8a:	d103      	bne.n	ae94 <check_usart_buffer+0x58>
    ae8c:	68fb      	ldr	r3, [r7, #12]
    ae8e:	3b01      	subs	r3, #1
    ae90:	001a      	movs	r2, r3
    ae92:	e000      	b.n	ae96 <check_usart_buffer+0x5a>
    ae94:	68fa      	ldr	r2, [r7, #12]
    ae96:	4c1d      	ldr	r4, [pc, #116]	; (af0c <check_usart_buffer+0xd0>)
    ae98:	6879      	ldr	r1, [r7, #4]
    ae9a:	481d      	ldr	r0, [pc, #116]	; (af10 <check_usart_buffer+0xd4>)
    ae9c:	2300      	movs	r3, #0
    ae9e:	9301      	str	r3, [sp, #4]
    aea0:	2300      	movs	r3, #0
    aea2:	9300      	str	r3, [sp, #0]
    aea4:	0013      	movs	r3, r2
    aea6:	0022      	movs	r2, r4
    aea8:	4c1a      	ldr	r4, [pc, #104]	; (af14 <check_usart_buffer+0xd8>)
    aeaa:	47a0      	blx	r4
				if (uart_buffer_written > i + 1) {
    aeac:	68fb      	ldr	r3, [r7, #12]
    aeae:	1c5a      	adds	r2, r3, #1
    aeb0:	4b15      	ldr	r3, [pc, #84]	; (af08 <check_usart_buffer+0xcc>)
    aeb2:	681b      	ldr	r3, [r3, #0]
    aeb4:	429a      	cmp	r2, r3
    aeb6:	da15      	bge.n	aee4 <check_usart_buffer+0xa8>
					memmove(uart_buffer, uart_buffer + i + 1, uart_buffer_written - i - 1);
    aeb8:	68fb      	ldr	r3, [r7, #12]
    aeba:	1c5a      	adds	r2, r3, #1
    aebc:	4b13      	ldr	r3, [pc, #76]	; (af0c <check_usart_buffer+0xd0>)
    aebe:	18d1      	adds	r1, r2, r3
    aec0:	4b11      	ldr	r3, [pc, #68]	; (af08 <check_usart_buffer+0xcc>)
    aec2:	681a      	ldr	r2, [r3, #0]
    aec4:	68fb      	ldr	r3, [r7, #12]
    aec6:	1ad3      	subs	r3, r2, r3
    aec8:	3b01      	subs	r3, #1
    aeca:	001a      	movs	r2, r3
    aecc:	4b0f      	ldr	r3, [pc, #60]	; (af0c <check_usart_buffer+0xd0>)
    aece:	0018      	movs	r0, r3
    aed0:	4b11      	ldr	r3, [pc, #68]	; (af18 <check_usart_buffer+0xdc>)
    aed2:	4798      	blx	r3
					uart_buffer_written = uart_buffer_written - i - 1;
    aed4:	4b0c      	ldr	r3, [pc, #48]	; (af08 <check_usart_buffer+0xcc>)
    aed6:	681a      	ldr	r2, [r3, #0]
    aed8:	68fb      	ldr	r3, [r7, #12]
    aeda:	1ad3      	subs	r3, r2, r3
    aedc:	1e5a      	subs	r2, r3, #1
    aede:	4b0a      	ldr	r3, [pc, #40]	; (af08 <check_usart_buffer+0xcc>)
    aee0:	601a      	str	r2, [r3, #0]
				break;
    aee2:	e00c      	b.n	aefe <check_usart_buffer+0xc2>
					uart_buffer_written = 0;
    aee4:	4b08      	ldr	r3, [pc, #32]	; (af08 <check_usart_buffer+0xcc>)
    aee6:	2200      	movs	r2, #0
    aee8:	601a      	str	r2, [r3, #0]
				break;
    aeea:	e008      	b.n	aefe <check_usart_buffer+0xc2>
		for (i = 0; i < uart_buffer_written; i++) {
    aeec:	68fb      	ldr	r3, [r7, #12]
    aeee:	3301      	adds	r3, #1
    aef0:	60fb      	str	r3, [r7, #12]
    aef2:	4b05      	ldr	r3, [pc, #20]	; (af08 <check_usart_buffer+0xcc>)
    aef4:	681b      	ldr	r3, [r3, #0]
    aef6:	68fa      	ldr	r2, [r7, #12]
    aef8:	429a      	cmp	r2, r3
    aefa:	dbb8      	blt.n	ae6e <check_usart_buffer+0x32>
}
    aefc:	e7ff      	b.n	aefe <check_usart_buffer+0xc2>
    aefe:	46c0      	nop			; (mov r8, r8)
    af00:	46bd      	mov	sp, r7
    af02:	b005      	add	sp, #20
    af04:	bd90      	pop	{r4, r7, pc}
    af06:	46c0      	nop			; (mov r8, r8)
    af08:	200002a4 	.word	0x200002a4
    af0c:	20000264 	.word	0x20000264
    af10:	20000170 	.word	0x20000170
    af14:	0000b685 	.word	0x0000b685
    af18:	0000c2cf 	.word	0x0000c2cf

0000af1c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    af1c:	b590      	push	{r4, r7, lr}
    af1e:	b08b      	sub	sp, #44	; 0x2c
    af20:	af02      	add	r7, sp, #8
	tstrWifiInitParam param;
	int8_t ret;
	char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];
    af22:	b092      	sub	sp, #72	; 0x48
    af24:	ab02      	add	r3, sp, #8
    af26:	3300      	adds	r3, #0
    af28:	61fb      	str	r3, [r7, #28]

	/* Initialize the board. */
	system_init();
    af2a:	4b4b      	ldr	r3, [pc, #300]	; (b058 <main+0x13c>)
    af2c:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    af2e:	4b4b      	ldr	r3, [pc, #300]	; (b05c <main+0x140>)
    af30:	4798      	blx	r3

	/* Output example information */
	printf(STRING_HEADER);
    af32:	4b4b      	ldr	r3, [pc, #300]	; (b060 <main+0x144>)
    af34:	0018      	movs	r0, r3
    af36:	4b4b      	ldr	r3, [pc, #300]	; (b064 <main+0x148>)
    af38:	4798      	blx	r3

	/* Initialize the Timer. */
	configure_timer();
    af3a:	4b4b      	ldr	r3, [pc, #300]	; (b068 <main+0x14c>)
    af3c:	4798      	blx	r3

	/* Initialize the MQTT service. */
	configure_mqtt();
    af3e:	4b4b      	ldr	r3, [pc, #300]	; (b06c <main+0x150>)
    af40:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    af42:	4b4b      	ldr	r3, [pc, #300]	; (b070 <main+0x154>)
    af44:	4798      	blx	r3
	//scanf("%64s", mqtt_user);
  
  //printf("Enter the password (Max %d characters)\r\n", MAIN_CHAT_PASSWORD_SIZE);
  //scanf("%64s", mqtt_pass);

	printf("User : %s\r\n", mqtt_user);
    af46:	4a4b      	ldr	r2, [pc, #300]	; (b074 <main+0x158>)
    af48:	4b4b      	ldr	r3, [pc, #300]	; (b078 <main+0x15c>)
    af4a:	0011      	movs	r1, r2
    af4c:	0018      	movs	r0, r3
    af4e:	4b4b      	ldr	r3, [pc, #300]	; (b07c <main+0x160>)
    af50:	4798      	blx	r3
  printf("Password : %s\r\n", mqtt_user);
    af52:	4a48      	ldr	r2, [pc, #288]	; (b074 <main+0x158>)
    af54:	4b4a      	ldr	r3, [pc, #296]	; (b080 <main+0x164>)
    af56:	0011      	movs	r1, r2
    af58:	0018      	movs	r0, r3
    af5a:	4b48      	ldr	r3, [pc, #288]	; (b07c <main+0x160>)
    af5c:	4798      	blx	r3
	sprintf(topic, "%s", MAIN_CHAT_TOPIC);
    af5e:	69fa      	ldr	r2, [r7, #28]
    af60:	4b48      	ldr	r3, [pc, #288]	; (b084 <main+0x168>)
    af62:	0010      	movs	r0, r2
    af64:	0019      	movs	r1, r3
    af66:	2305      	movs	r3, #5
    af68:	001a      	movs	r2, r3
    af6a:	4b47      	ldr	r3, [pc, #284]	; (b088 <main+0x16c>)
    af6c:	4798      	blx	r3
  printf("Topic : %s\r\n", topic);
    af6e:	69fa      	ldr	r2, [r7, #28]
    af70:	4b46      	ldr	r3, [pc, #280]	; (b08c <main+0x170>)
    af72:	0011      	movs	r1, r2
    af74:	0018      	movs	r0, r3
    af76:	4b41      	ldr	r3, [pc, #260]	; (b07c <main+0x160>)
    af78:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    af7a:	003b      	movs	r3, r7
    af7c:	2218      	movs	r2, #24
    af7e:	2100      	movs	r1, #0
    af80:	0018      	movs	r0, r3
    af82:	4b43      	ldr	r3, [pc, #268]	; (b090 <main+0x174>)
    af84:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    af86:	003b      	movs	r3, r7
    af88:	4a42      	ldr	r2, [pc, #264]	; (b094 <main+0x178>)
    af8a:	601a      	str	r2, [r3, #0]
	ret = m2m_wifi_init(&param);
    af8c:	231b      	movs	r3, #27
    af8e:	18fc      	adds	r4, r7, r3
    af90:	003b      	movs	r3, r7
    af92:	0018      	movs	r0, r3
    af94:	4b40      	ldr	r3, [pc, #256]	; (b098 <main+0x17c>)
    af96:	4798      	blx	r3
    af98:	0003      	movs	r3, r0
    af9a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    af9c:	231b      	movs	r3, #27
    af9e:	18fb      	adds	r3, r7, r3
    afa0:	781b      	ldrb	r3, [r3, #0]
    afa2:	b25b      	sxtb	r3, r3
    afa4:	2b00      	cmp	r3, #0
    afa6:	d009      	beq.n	afbc <main+0xa0>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    afa8:	231b      	movs	r3, #27
    afaa:	18fb      	adds	r3, r7, r3
    afac:	2200      	movs	r2, #0
    afae:	569a      	ldrsb	r2, [r3, r2]
    afb0:	4b3a      	ldr	r3, [pc, #232]	; (b09c <main+0x180>)
    afb2:	0011      	movs	r1, r2
    afb4:	0018      	movs	r0, r3
    afb6:	4b31      	ldr	r3, [pc, #196]	; (b07c <main+0x160>)
    afb8:	4798      	blx	r3
		while (1) { /* Loop forever. */
    afba:	e7fe      	b.n	afba <main+0x9e>
		}
	}

	/* Initialize socket interface. */
	socketInit();
    afbc:	4b38      	ldr	r3, [pc, #224]	; (b0a0 <main+0x184>)
    afbe:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    afc0:	4a38      	ldr	r2, [pc, #224]	; (b0a4 <main+0x188>)
    afc2:	4b39      	ldr	r3, [pc, #228]	; (b0a8 <main+0x18c>)
    afc4:	0011      	movs	r1, r2
    afc6:	0018      	movs	r0, r3
    afc8:	4b38      	ldr	r3, [pc, #224]	; (b0ac <main+0x190>)
    afca:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    afcc:	4a38      	ldr	r2, [pc, #224]	; (b0b0 <main+0x194>)
    afce:	4839      	ldr	r0, [pc, #228]	; (b0b4 <main+0x198>)
    afd0:	23ff      	movs	r3, #255	; 0xff
    afd2:	9300      	str	r3, [sp, #0]
    afd4:	0013      	movs	r3, r2
    afd6:	2202      	movs	r2, #2
    afd8:	210b      	movs	r1, #11
    afda:	4c37      	ldr	r4, [pc, #220]	; (b0b8 <main+0x19c>)
    afdc:	47a0      	blx	r4
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

	while (1) {
		/* Handle pending events from network controller. */
		sint8 wifiStatus = m2m_wifi_handle_events(NULL);
    afde:	231a      	movs	r3, #26
    afe0:	18fc      	adds	r4, r7, r3
    afe2:	2000      	movs	r0, #0
    afe4:	4b35      	ldr	r3, [pc, #212]	; (b0bc <main+0x1a0>)
    afe6:	4798      	blx	r3
    afe8:	0003      	movs	r3, r0
    afea:	7023      	strb	r3, [r4, #0]
		/* Try to read user input from USART. */
		usart_read_job(&cdc_uart_module, &uart_ch_buffer);
    afec:	4a34      	ldr	r2, [pc, #208]	; (b0c0 <main+0x1a4>)
    afee:	4b35      	ldr	r3, [pc, #212]	; (b0c4 <main+0x1a8>)
    aff0:	0011      	movs	r1, r2
    aff2:	0018      	movs	r0, r3
    aff4:	4b34      	ldr	r3, [pc, #208]	; (b0c8 <main+0x1ac>)
    aff6:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    aff8:	4b34      	ldr	r3, [pc, #208]	; (b0cc <main+0x1b0>)
    affa:	0018      	movs	r0, r3
    affc:	4b34      	ldr	r3, [pc, #208]	; (b0d0 <main+0x1b4>)
    affe:	4798      	blx	r3
    
    if( port_pin_get_input_level(BUTTON_0_PIN) != buttonLevel )
    b000:	2037      	movs	r0, #55	; 0x37
    b002:	4b34      	ldr	r3, [pc, #208]	; (b0d4 <main+0x1b8>)
    b004:	4798      	blx	r3
    b006:	0003      	movs	r3, r0
    b008:	001a      	movs	r2, r3
    b00a:	4b33      	ldr	r3, [pc, #204]	; (b0d8 <main+0x1bc>)
    b00c:	781b      	ldrb	r3, [r3, #0]
    b00e:	429a      	cmp	r2, r3
    b010:	d01d      	beq.n	b04e <main+0x132>
    {
      //int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain);
      buttonLevel = port_pin_get_input_level(BUTTON_0_PIN);
    b012:	2037      	movs	r0, #55	; 0x37
    b014:	4b2f      	ldr	r3, [pc, #188]	; (b0d4 <main+0x1b8>)
    b016:	4798      	blx	r3
    b018:	0003      	movs	r3, r0
    b01a:	001a      	movs	r2, r3
    b01c:	4b2e      	ldr	r3, [pc, #184]	; (b0d8 <main+0x1bc>)
    b01e:	701a      	strb	r2, [r3, #0]
      sprintf(pub_text, "%d", buttonLevel);
    b020:	4b2d      	ldr	r3, [pc, #180]	; (b0d8 <main+0x1bc>)
    b022:	781b      	ldrb	r3, [r3, #0]
    b024:	001a      	movs	r2, r3
    b026:	492d      	ldr	r1, [pc, #180]	; (b0dc <main+0x1c0>)
    b028:	4b2d      	ldr	r3, [pc, #180]	; (b0e0 <main+0x1c4>)
    b02a:	0018      	movs	r0, r3
    b02c:	4b2d      	ldr	r3, [pc, #180]	; (b0e4 <main+0x1c8>)
    b02e:	4798      	blx	r3
      mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 1, 1, 1);
    b030:	4a2b      	ldr	r2, [pc, #172]	; (b0e0 <main+0x1c4>)
    b032:	492d      	ldr	r1, [pc, #180]	; (b0e8 <main+0x1cc>)
    b034:	482d      	ldr	r0, [pc, #180]	; (b0ec <main+0x1d0>)
    b036:	2301      	movs	r3, #1
    b038:	9301      	str	r3, [sp, #4]
    b03a:	2301      	movs	r3, #1
    b03c:	9300      	str	r3, [sp, #0]
    b03e:	2301      	movs	r3, #1
    b040:	4c2b      	ldr	r4, [pc, #172]	; (b0f0 <main+0x1d4>)
    b042:	47a0      	blx	r4
      delay_ms(300);
    b044:	2396      	movs	r3, #150	; 0x96
    b046:	005b      	lsls	r3, r3, #1
    b048:	0018      	movs	r0, r3
    b04a:	4b2a      	ldr	r3, [pc, #168]	; (b0f4 <main+0x1d8>)
    b04c:	4798      	blx	r3
    }
		/* Checks the USART buffer. */
    check_usart_buffer(MAIN_CHAT_TOPIC);
    b04e:	4b0d      	ldr	r3, [pc, #52]	; (b084 <main+0x168>)
    b050:	0018      	movs	r0, r3
    b052:	4b29      	ldr	r3, [pc, #164]	; (b0f8 <main+0x1dc>)
    b054:	4798      	blx	r3
	while (1) {
    b056:	e7c2      	b.n	afde <main+0xc2>
    b058:	0000916d 	.word	0x0000916d
    b05c:	0000acd5 	.word	0x0000acd5
    b060:	0000eb5c 	.word	0x0000eb5c
    b064:	0000c571 	.word	0x0000c571
    b068:	0000ad5d 	.word	0x0000ad5d
    b06c:	0000ad99 	.word	0x0000ad99
    b070:	0000035d 	.word	0x0000035d
    b074:	20000010 	.word	0x20000010
    b078:	0000ebc8 	.word	0x0000ebc8
    b07c:	0000c455 	.word	0x0000c455
    b080:	0000ebd4 	.word	0x0000ebd4
    b084:	0000ea54 	.word	0x0000ea54
    b088:	0000c2bd 	.word	0x0000c2bd
    b08c:	0000ebe4 	.word	0x0000ebe4
    b090:	0000c2f3 	.word	0x0000c2f3
    b094:	0000a945 	.word	0x0000a945
    b098:	00001e15 	.word	0x00001e15
    b09c:	0000ebf4 	.word	0x0000ebf4
    b0a0:	00005019 	.word	0x00005019
    b0a4:	0000aa55 	.word	0x0000aa55
    b0a8:	0000aa21 	.word	0x0000aa21
    b0ac:	00005069 	.word	0x00005069
    b0b0:	0000e9e8 	.word	0x0000e9e8
    b0b4:	0000e9f4 	.word	0x0000e9f4
    b0b8:	0000201d 	.word	0x0000201d
    b0bc:	00002001 	.word	0x00002001
    b0c0:	200002a8 	.word	0x200002a8
    b0c4:	200000fc 	.word	0x200000fc
    b0c8:	00007e8d 	.word	0x00007e8d
    b0cc:	20000474 	.word	0x20000474
    b0d0:	0000a481 	.word	0x0000a481
    b0d4:	0000a5cd 	.word	0x0000a5cd
    b0d8:	20000470 	.word	0x20000470
    b0dc:	0000ec1c 	.word	0x0000ec1c
    b0e0:	20000130 	.word	0x20000130
    b0e4:	0000c715 	.word	0x0000c715
    b0e8:	0000ea5c 	.word	0x0000ea5c
    b0ec:	20000170 	.word	0x20000170
    b0f0:	0000b685 	.word	0x0000b685
    b0f4:	000001a1 	.word	0x000001a1
    b0f8:	0000ae3d 	.word	0x0000ae3d

0000b0fc <_hwerr_to_stderr>:
    b0fc:	1c03      	adds	r3, r0, #0
    b0fe:	300e      	adds	r0, #14
    b100:	b500      	push	{lr}
    b102:	280e      	cmp	r0, #14
    b104:	d819      	bhi.n	b13a <_hwerr_to_stderr+0x3e>
    b106:	f000 ff01 	bl	bf0c <__gnu_thumb1_case_uqi>
    b10a:	1416      	.short	0x1416
    b10c:	1b181012 	.word	0x1b181012
    b110:	180c0e18 	.word	0x180c0e18
    b114:	1d0a0e0e 	.word	0x1d0a0e0e
    b118:	08          	.byte	0x08
    b119:	00          	.byte	0x00
    b11a:	2000      	movs	r0, #0
    b11c:	e014      	b.n	b148 <_hwerr_to_stderr+0x4c>
    b11e:	2070      	movs	r0, #112	; 0x70
    b120:	e011      	b.n	b146 <_hwerr_to_stderr+0x4a>
    b122:	2016      	movs	r0, #22
    b124:	e00f      	b.n	b146 <_hwerr_to_stderr+0x4a>
    b126:	200c      	movs	r0, #12
    b128:	e00d      	b.n	b146 <_hwerr_to_stderr+0x4a>
    b12a:	2079      	movs	r0, #121	; 0x79
    b12c:	e00b      	b.n	b146 <_hwerr_to_stderr+0x4a>
    b12e:	2068      	movs	r0, #104	; 0x68
    b130:	e009      	b.n	b146 <_hwerr_to_stderr+0x4a>
    b132:	200b      	movs	r0, #11
    b134:	e007      	b.n	b146 <_hwerr_to_stderr+0x4a>
    b136:	2010      	movs	r0, #16
    b138:	e005      	b.n	b146 <_hwerr_to_stderr+0x4a>
    b13a:	2000      	movs	r0, #0
    b13c:	4283      	cmp	r3, r0
    b13e:	da03      	bge.n	b148 <_hwerr_to_stderr+0x4c>
    b140:	2005      	movs	r0, #5
    b142:	e000      	b.n	b146 <_hwerr_to_stderr+0x4a>
    b144:	2002      	movs	r0, #2
    b146:	4240      	negs	r0, r0
    b148:	bd00      	pop	{pc}
	...

0000b14c <_mqtt_send_wait>:
    b14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b14e:	1c04      	adds	r4, r0, #0
    b150:	3443      	adds	r4, #67	; 0x43
    b152:	7823      	ldrb	r3, [r4, #0]
    b154:	1c05      	adds	r5, r0, #0
    b156:	07d8      	lsls	r0, r3, #31
    b158:	d51c      	bpl.n	b194 <_mqtt_send_wait+0x48>
    b15a:	2604      	movs	r6, #4
    b15c:	4333      	orrs	r3, r6
    b15e:	7023      	strb	r3, [r4, #0]
    b160:	2002      	movs	r0, #2
    b162:	5628      	ldrsb	r0, [r5, r0]
    b164:	b292      	uxth	r2, r2
    b166:	2300      	movs	r3, #0
    b168:	4f0c      	ldr	r7, [pc, #48]	; (b19c <_mqtt_send_wait+0x50>)
    b16a:	47b8      	blx	r7
    b16c:	2800      	cmp	r0, #0
    b16e:	da05      	bge.n	b17c <_mqtt_send_wait+0x30>
    b170:	7823      	ldrb	r3, [r4, #0]
    b172:	43b3      	bics	r3, r6
    b174:	7023      	strb	r3, [r4, #0]
    b176:	4b0a      	ldr	r3, [pc, #40]	; (b1a0 <_mqtt_send_wait+0x54>)
    b178:	4798      	blx	r3
    b17a:	e00d      	b.n	b198 <_mqtt_send_wait+0x4c>
    b17c:	7822      	ldrb	r2, [r4, #0]
    b17e:	2314      	movs	r3, #20
    b180:	4013      	ands	r3, r2
    b182:	2000      	movs	r0, #0
    b184:	2b04      	cmp	r3, #4
    b186:	d107      	bne.n	b198 <_mqtt_send_wait+0x4c>
    b188:	4b06      	ldr	r3, [pc, #24]	; (b1a4 <_mqtt_send_wait+0x58>)
    b18a:	4798      	blx	r3
    b18c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    b18e:	4b06      	ldr	r3, [pc, #24]	; (b1a8 <_mqtt_send_wait+0x5c>)
    b190:	4798      	blx	r3
    b192:	e7f3      	b.n	b17c <_mqtt_send_wait+0x30>
    b194:	2001      	movs	r0, #1
    b196:	4240      	negs	r0, r0
    b198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b19a:	46c0      	nop			; (mov r8, r8)
    b19c:	000053b5 	.word	0x000053b5
    b1a0:	0000b0fd 	.word	0x0000b0fd
    b1a4:	00002001 	.word	0x00002001
    b1a8:	0000a481 	.word	0x0000a481

0000b1ac <mqtt_get_config_defaults>:
    b1ac:	4b07      	ldr	r3, [pc, #28]	; (b1cc <mqtt_get_config_defaults+0x20>)
    b1ae:	2240      	movs	r2, #64	; 0x40
    b1b0:	8003      	strh	r3, [r0, #0]
    b1b2:	2396      	movs	r3, #150	; 0x96
    b1b4:	009b      	lsls	r3, r3, #2
    b1b6:	8103      	strh	r3, [r0, #8]
    b1b8:	6102      	str	r2, [r0, #16]
    b1ba:	2300      	movs	r3, #0
    b1bc:	2220      	movs	r2, #32
    b1be:	7083      	strb	r3, [r0, #2]
    b1c0:	6043      	str	r3, [r0, #4]
    b1c2:	60c3      	str	r3, [r0, #12]
    b1c4:	6142      	str	r2, [r0, #20]
    b1c6:	7603      	strb	r3, [r0, #24]
    b1c8:	4770      	bx	lr
    b1ca:	46c0      	nop			; (mov r8, r8)
    b1cc:	0000075b 	.word	0x0000075b

0000b1d0 <mqtt_init>:
    b1d0:	b538      	push	{r3, r4, r5, lr}
    b1d2:	1c04      	adds	r4, r0, #0
    b1d4:	1c0d      	adds	r5, r1, #0
    b1d6:	2800      	cmp	r0, #0
    b1d8:	d030      	beq.n	b23c <mqtt_init+0x6c>
    b1da:	2900      	cmp	r1, #0
    b1dc:	d02e      	beq.n	b23c <mqtt_init+0x6c>
    b1de:	690b      	ldr	r3, [r1, #16]
    b1e0:	2b00      	cmp	r3, #0
    b1e2:	d02b      	beq.n	b23c <mqtt_init+0x6c>
    b1e4:	684b      	ldr	r3, [r1, #4]
    b1e6:	2b00      	cmp	r3, #0
    b1e8:	d028      	beq.n	b23c <mqtt_init+0x6c>
    b1ea:	2100      	movs	r1, #0
    b1ec:	2274      	movs	r2, #116	; 0x74
    b1ee:	4b16      	ldr	r3, [pc, #88]	; (b248 <mqtt_init+0x78>)
    b1f0:	4798      	blx	r3
    b1f2:	1c20      	adds	r0, r4, #0
    b1f4:	4b15      	ldr	r3, [pc, #84]	; (b24c <mqtt_init+0x7c>)
    b1f6:	3058      	adds	r0, #88	; 0x58
    b1f8:	1c29      	adds	r1, r5, #0
    b1fa:	221c      	movs	r2, #28
    b1fc:	4798      	blx	r3
    b1fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b200:	2b00      	cmp	r3, #0
    b202:	d10b      	bne.n	b21c <mqtt_init+0x4c>
    b204:	6928      	ldr	r0, [r5, #16]
    b206:	4b12      	ldr	r3, [pc, #72]	; (b250 <mqtt_init+0x80>)
    b208:	4798      	blx	r3
    b20a:	6660      	str	r0, [r4, #100]	; 0x64
    b20c:	2800      	cmp	r0, #0
    b20e:	d017      	beq.n	b240 <mqtt_init+0x70>
    b210:	1c23      	adds	r3, r4, #0
    b212:	3343      	adds	r3, #67	; 0x43
    b214:	781a      	ldrb	r2, [r3, #0]
    b216:	2120      	movs	r1, #32
    b218:	430a      	orrs	r2, r1
    b21a:	701a      	strb	r2, [r3, #0]
    b21c:	892a      	ldrh	r2, [r5, #8]
    b21e:	23fa      	movs	r3, #250	; 0xfa
    b220:	005b      	lsls	r3, r3, #1
    b222:	4353      	muls	r3, r2
    b224:	6868      	ldr	r0, [r5, #4]
    b226:	490b      	ldr	r1, [pc, #44]	; (b254 <mqtt_init+0x84>)
    b228:	1c22      	adds	r2, r4, #0
    b22a:	4d0b      	ldr	r5, [pc, #44]	; (b258 <mqtt_init+0x88>)
    b22c:	47a8      	blx	r5
    b22e:	1c03      	adds	r3, r0, #0
    b230:	6520      	str	r0, [r4, #80]	; 0x50
    b232:	2000      	movs	r0, #0
    b234:	4283      	cmp	r3, r0
    b236:	da05      	bge.n	b244 <mqtt_init+0x74>
    b238:	201c      	movs	r0, #28
    b23a:	e002      	b.n	b242 <mqtt_init+0x72>
    b23c:	2016      	movs	r0, #22
    b23e:	e000      	b.n	b242 <mqtt_init+0x72>
    b240:	200c      	movs	r0, #12
    b242:	4240      	negs	r0, r0
    b244:	bd38      	pop	{r3, r4, r5, pc}
    b246:	46c0      	nop			; (mov r8, r8)
    b248:	0000c2f3 	.word	0x0000c2f3
    b24c:	0000c2bd 	.word	0x0000c2bd
    b250:	0000c2a9 	.word	0x0000c2a9
    b254:	0000b9d9 	.word	0x0000b9d9
    b258:	0000a375 	.word	0x0000a375

0000b25c <mqtt_register_callback>:
    b25c:	2800      	cmp	r0, #0
    b25e:	d002      	beq.n	b266 <mqtt_register_callback+0xa>
    b260:	6541      	str	r1, [r0, #84]	; 0x54
    b262:	2000      	movs	r0, #0
    b264:	e001      	b.n	b26a <mqtt_register_callback+0xe>
    b266:	2016      	movs	r0, #22
    b268:	4240      	negs	r0, r0
    b26a:	4770      	bx	lr

0000b26c <mqtt_socket_resolve_handler>:
    b26c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b26e:	1c06      	adds	r6, r0, #0
    b270:	b085      	sub	sp, #20
    b272:	1c0f      	adds	r7, r1, #0
    b274:	2400      	movs	r4, #0
    b276:	4b0f      	ldr	r3, [pc, #60]	; (b2b4 <mqtt_socket_resolve_handler+0x48>)
    b278:	58e5      	ldr	r5, [r4, r3]
    b27a:	2d00      	cmp	r5, #0
    b27c:	d015      	beq.n	b2aa <mqtt_socket_resolve_handler+0x3e>
    b27e:	1ce9      	adds	r1, r5, #3
    b280:	1c30      	adds	r0, r6, #0
    b282:	4b0d      	ldr	r3, [pc, #52]	; (b2b8 <mqtt_socket_resolve_handler+0x4c>)
    b284:	4798      	blx	r3
    b286:	2800      	cmp	r0, #0
    b288:	d10f      	bne.n	b2aa <mqtt_socket_resolve_handler+0x3e>
    b28a:	466a      	mov	r2, sp
    b28c:	2302      	movs	r3, #2
    b28e:	8013      	strh	r3, [r2, #0]
    b290:	1c2b      	adds	r3, r5, #0
    b292:	3358      	adds	r3, #88	; 0x58
    b294:	881b      	ldrh	r3, [r3, #0]
    b296:	9701      	str	r7, [sp, #4]
    b298:	ba5b      	rev16	r3, r3
    b29a:	8053      	strh	r3, [r2, #2]
    b29c:	2002      	movs	r0, #2
    b29e:	5628      	ldrsb	r0, [r5, r0]
    b2a0:	4669      	mov	r1, sp
    b2a2:	2210      	movs	r2, #16
    b2a4:	4b05      	ldr	r3, [pc, #20]	; (b2bc <mqtt_socket_resolve_handler+0x50>)
    b2a6:	4798      	blx	r3
    b2a8:	e002      	b.n	b2b0 <mqtt_socket_resolve_handler+0x44>
    b2aa:	3404      	adds	r4, #4
    b2ac:	2c1c      	cmp	r4, #28
    b2ae:	d1e2      	bne.n	b276 <mqtt_socket_resolve_handler+0xa>
    b2b0:	b005      	add	sp, #20
    b2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b2b4:	200002ac 	.word	0x200002ac
    b2b8:	0000c759 	.word	0x0000c759
    b2bc:	000052a1 	.word	0x000052a1

0000b2c0 <mqtt_connect>:
    b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2c2:	1c04      	adds	r4, r0, #0
    b2c4:	b089      	sub	sp, #36	; 0x24
    b2c6:	1c0d      	adds	r5, r1, #0
    b2c8:	2800      	cmp	r0, #0
    b2ca:	d051      	beq.n	b370 <mqtt_connect+0xb0>
    b2cc:	2900      	cmp	r1, #0
    b2ce:	d04f      	beq.n	b370 <mqtt_connect+0xb0>
    b2d0:	1c08      	adds	r0, r1, #0
    b2d2:	4b39      	ldr	r3, [pc, #228]	; (b3b8 <mqtt_connect+0xf8>)
    b2d4:	4798      	blx	r3
    b2d6:	2840      	cmp	r0, #64	; 0x40
    b2d8:	d84c      	bhi.n	b374 <mqtt_connect+0xb4>
    b2da:	1c21      	adds	r1, r4, #0
    b2dc:	3143      	adds	r1, #67	; 0x43
    b2de:	780b      	ldrb	r3, [r1, #0]
    b2e0:	9101      	str	r1, [sp, #4]
    b2e2:	07db      	lsls	r3, r3, #31
    b2e4:	0fd9      	lsrs	r1, r3, #31
    b2e6:	466a      	mov	r2, sp
    b2e8:	b2ce      	uxtb	r6, r1
    b2ea:	1ce0      	adds	r0, r4, #3
    b2ec:	7211      	strb	r1, [r2, #8]
    b2ee:	2e00      	cmp	r6, #0
    b2f0:	d142      	bne.n	b378 <mqtt_connect+0xb8>
    b2f2:	2701      	movs	r7, #1
    b2f4:	1c29      	adds	r1, r5, #0
    b2f6:	4b31      	ldr	r3, [pc, #196]	; (b3bc <mqtt_connect+0xfc>)
    b2f8:	8027      	strh	r7, [r4, #0]
    b2fa:	4798      	blx	r3
    b2fc:	9a01      	ldr	r2, [sp, #4]
    b2fe:	2002      	movs	r0, #2
    b300:	7813      	ldrb	r3, [r2, #0]
    b302:	9901      	ldr	r1, [sp, #4]
    b304:	43bb      	bics	r3, r7
    b306:	4383      	bics	r3, r0
    b308:	22e3      	movs	r2, #227	; 0xe3
    b30a:	4013      	ands	r3, r2
    b30c:	466a      	mov	r2, sp
    b30e:	700b      	strb	r3, [r1, #0]
    b310:	7a12      	ldrb	r2, [r2, #8]
    b312:	1c23      	adds	r3, r4, #0
    b314:	3348      	adds	r3, #72	; 0x48
    b316:	6466      	str	r6, [r4, #68]	; 0x44
    b318:	701a      	strb	r2, [r3, #0]
    b31a:	7c9a      	ldrb	r2, [r3, #18]
    b31c:	805e      	strh	r6, [r3, #2]
    b31e:	1e53      	subs	r3, r2, #1
    b320:	419a      	sbcs	r2, r3
    b322:	b2d2      	uxtb	r2, r2
    b324:	1c39      	adds	r1, r7, #0
    b326:	4b26      	ldr	r3, [pc, #152]	; (b3c0 <mqtt_connect+0x100>)
    b328:	4798      	blx	r3
    b32a:	70a0      	strb	r0, [r4, #2]
    b32c:	2800      	cmp	r0, #0
    b32e:	db25      	blt.n	b37c <mqtt_connect+0xbc>
    b330:	4b24      	ldr	r3, [pc, #144]	; (b3c4 <mqtt_connect+0x104>)
    b332:	0080      	lsls	r0, r0, #2
    b334:	50c4      	str	r4, [r0, r3]
    b336:	1c2b      	adds	r3, r5, #0
    b338:	781f      	ldrb	r7, [r3, #0]
    b33a:	2f00      	cmp	r7, #0
    b33c:	d026      	beq.n	b38c <mqtt_connect+0xcc>
    b33e:	2220      	movs	r2, #32
    b340:	1c39      	adds	r1, r7, #0
    b342:	4391      	bics	r1, r2
    b344:	1c0a      	adds	r2, r1, #0
    b346:	3a41      	subs	r2, #65	; 0x41
    b348:	b2d2      	uxtb	r2, r2
    b34a:	3301      	adds	r3, #1
    b34c:	2a05      	cmp	r2, #5
    b34e:	d90d      	bls.n	b36c <mqtt_connect+0xac>
    b350:	2f3a      	cmp	r7, #58	; 0x3a
    b352:	d00b      	beq.n	b36c <mqtt_connect+0xac>
    b354:	2f2f      	cmp	r7, #47	; 0x2f
    b356:	d009      	beq.n	b36c <mqtt_connect+0xac>
    b358:	2f2e      	cmp	r7, #46	; 0x2e
    b35a:	d102      	bne.n	b362 <mqtt_connect+0xa2>
    b35c:	2e00      	cmp	r6, #0
    b35e:	d0eb      	beq.n	b338 <mqtt_connect+0x78>
    b360:	e00f      	b.n	b382 <mqtt_connect+0xc2>
    b362:	2230      	movs	r2, #48	; 0x30
    b364:	4017      	ands	r7, r2
    b366:	4297      	cmp	r7, r2
    b368:	d0e6      	beq.n	b338 <mqtt_connect+0x78>
    b36a:	e00a      	b.n	b382 <mqtt_connect+0xc2>
    b36c:	2601      	movs	r6, #1
    b36e:	e7e3      	b.n	b338 <mqtt_connect+0x78>
    b370:	2016      	movs	r0, #22
    b372:	e004      	b.n	b37e <mqtt_connect+0xbe>
    b374:	205b      	movs	r0, #91	; 0x5b
    b376:	e002      	b.n	b37e <mqtt_connect+0xbe>
    b378:	2078      	movs	r0, #120	; 0x78
    b37a:	e000      	b.n	b37e <mqtt_connect+0xbe>
    b37c:	201c      	movs	r0, #28
    b37e:	4240      	negs	r0, r0
    b380:	e017      	b.n	b3b2 <mqtt_connect+0xf2>
    b382:	1c28      	adds	r0, r5, #0
    b384:	4b10      	ldr	r3, [pc, #64]	; (b3c8 <mqtt_connect+0x108>)
    b386:	4798      	blx	r3
    b388:	2000      	movs	r0, #0
    b38a:	e012      	b.n	b3b2 <mqtt_connect+0xf2>
    b38c:	466a      	mov	r2, sp
    b38e:	2302      	movs	r3, #2
    b390:	8213      	strh	r3, [r2, #16]
    b392:	1c23      	adds	r3, r4, #0
    b394:	3358      	adds	r3, #88	; 0x58
    b396:	881b      	ldrh	r3, [r3, #0]
    b398:	1c28      	adds	r0, r5, #0
    b39a:	ba5b      	rev16	r3, r3
    b39c:	8253      	strh	r3, [r2, #18]
    b39e:	4b0b      	ldr	r3, [pc, #44]	; (b3cc <mqtt_connect+0x10c>)
    b3a0:	4798      	blx	r3
    b3a2:	9005      	str	r0, [sp, #20]
    b3a4:	2002      	movs	r0, #2
    b3a6:	5620      	ldrsb	r0, [r4, r0]
    b3a8:	a904      	add	r1, sp, #16
    b3aa:	2210      	movs	r2, #16
    b3ac:	4b08      	ldr	r3, [pc, #32]	; (b3d0 <mqtt_connect+0x110>)
    b3ae:	4798      	blx	r3
    b3b0:	1c38      	adds	r0, r7, #0
    b3b2:	b009      	add	sp, #36	; 0x24
    b3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3b6:	46c0      	nop			; (mov r8, r8)
    b3b8:	0000c77d 	.word	0x0000c77d
    b3bc:	0000c76d 	.word	0x0000c76d
    b3c0:	00005091 	.word	0x00005091
    b3c4:	200002ac 	.word	0x200002ac
    b3c8:	000058dd 	.word	0x000058dd
    b3cc:	000057d5 	.word	0x000057d5
    b3d0:	000052a1 	.word	0x000052a1

0000b3d4 <mqtt_connect_broker>:
    b3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3d6:	b095      	sub	sp, #84	; 0x54
    b3d8:	af02      	add	r7, sp, #8
    b3da:	617b      	str	r3, [r7, #20]
    b3dc:	1c3b      	adds	r3, r7, #0
    b3de:	3370      	adds	r3, #112	; 0x70
    b3e0:	781b      	ldrb	r3, [r3, #0]
    b3e2:	1c05      	adds	r5, r0, #0
    b3e4:	60fb      	str	r3, [r7, #12]
    b3e6:	1c3b      	adds	r3, r7, #0
    b3e8:	3374      	adds	r3, #116	; 0x74
    b3ea:	781b      	ldrb	r3, [r3, #0]
    b3ec:	6139      	str	r1, [r7, #16]
    b3ee:	61fa      	str	r2, [r7, #28]
    b3f0:	60bb      	str	r3, [r7, #8]
    b3f2:	2800      	cmp	r0, #0
    b3f4:	d101      	bne.n	b3fa <mqtt_connect_broker+0x26>
    b3f6:	2016      	movs	r0, #22
    b3f8:	e129      	b.n	b64e <mqtt_connect_broker+0x27a>
    b3fa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    b3fc:	4668      	mov	r0, sp
    b3fe:	3307      	adds	r3, #7
    b400:	08db      	lsrs	r3, r3, #3
    b402:	00db      	lsls	r3, r3, #3
    b404:	1ac0      	subs	r0, r0, r3
    b406:	4685      	mov	sp, r0
    b408:	ac02      	add	r4, sp, #8
    b40a:	607c      	str	r4, [r7, #4]
    b40c:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    b40e:	2c00      	cmp	r4, #0
    b410:	d0f1      	beq.n	b3f6 <mqtt_connect_broker+0x22>
    b412:	1c2b      	adds	r3, r5, #0
    b414:	3343      	adds	r3, #67	; 0x43
    b416:	781b      	ldrb	r3, [r3, #0]
    b418:	07d8      	lsls	r0, r3, #31
    b41a:	d400      	bmi.n	b41e <mqtt_connect_broker+0x4a>
    b41c:	e112      	b.n	b644 <mqtt_connect_broker+0x270>
    b41e:	079a      	lsls	r2, r3, #30
    b420:	d500      	bpl.n	b424 <mqtt_connect_broker+0x50>
    b422:	e111      	b.n	b648 <mqtt_connect_broker+0x274>
    b424:	071c      	lsls	r4, r3, #28
    b426:	d40b      	bmi.n	b440 <mqtt_connect_broker+0x6c>
    b428:	4e8b      	ldr	r6, [pc, #556]	; (b658 <mqtt_connect_broker+0x284>)
    b42a:	6e38      	ldr	r0, [r7, #96]	; 0x60
    b42c:	47b0      	blx	r6
    b42e:	1c03      	adds	r3, r0, #0
    b430:	61b8      	str	r0, [r7, #24]
    b432:	69f8      	ldr	r0, [r7, #28]
    b434:	330e      	adds	r3, #14
    b436:	1c34      	adds	r4, r6, #0
    b438:	2800      	cmp	r0, #0
    b43a:	d113      	bne.n	b464 <mqtt_connect_broker+0x90>
    b43c:	1c1e      	adds	r6, r3, #0
    b43e:	e01d      	b.n	b47c <mqtt_connect_broker+0xa8>
    b440:	1c2b      	adds	r3, r5, #0
    b442:	3370      	adds	r3, #112	; 0x70
    b444:	781b      	ldrb	r3, [r3, #0]
    b446:	2b00      	cmp	r3, #0
    b448:	d000      	beq.n	b44c <mqtt_connect_broker+0x78>
    b44a:	e0ff      	b.n	b64c <mqtt_connect_broker+0x278>
    b44c:	1c2b      	adds	r3, r5, #0
    b44e:	3343      	adds	r3, #67	; 0x43
    b450:	781b      	ldrb	r3, [r3, #0]
    b452:	071a      	lsls	r2, r3, #28
    b454:	d5e8      	bpl.n	b428 <mqtt_connect_broker+0x54>
    b456:	4b81      	ldr	r3, [pc, #516]	; (b65c <mqtt_connect_broker+0x288>)
    b458:	2000      	movs	r0, #0
    b45a:	4798      	blx	r3
    b45c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    b45e:	4b80      	ldr	r3, [pc, #512]	; (b660 <mqtt_connect_broker+0x28c>)
    b460:	4798      	blx	r3
    b462:	e7f3      	b.n	b44c <mqtt_connect_broker+0x78>
    b464:	69f8      	ldr	r0, [r7, #28]
    b466:	47b0      	blx	r6
    b468:	69be      	ldr	r6, [r7, #24]
    b46a:	697b      	ldr	r3, [r7, #20]
    b46c:	3610      	adds	r6, #16
    b46e:	1836      	adds	r6, r6, r0
    b470:	2b00      	cmp	r3, #0
    b472:	d003      	beq.n	b47c <mqtt_connect_broker+0xa8>
    b474:	1c18      	adds	r0, r3, #0
    b476:	47a0      	blx	r4
    b478:	3602      	adds	r6, #2
    b47a:	1836      	adds	r6, r6, r0
    b47c:	6e78      	ldr	r0, [r7, #100]	; 0x64
    b47e:	2800      	cmp	r0, #0
    b480:	d007      	beq.n	b492 <mqtt_connect_broker+0xbe>
    b482:	47a0      	blx	r4
    b484:	3602      	adds	r6, #2
    b486:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    b488:	1830      	adds	r0, r6, r0
    b48a:	1906      	adds	r6, r0, r4
    b48c:	2c00      	cmp	r4, #0
    b48e:	d100      	bne.n	b492 <mqtt_connect_broker+0xbe>
    b490:	1c06      	adds	r6, r0, #0
    b492:	69fc      	ldr	r4, [r7, #28]
    b494:	2c00      	cmp	r4, #0
    b496:	d006      	beq.n	b4a6 <mqtt_connect_broker+0xd2>
    b498:	24c0      	movs	r4, #192	; 0xc0
    b49a:	61bc      	str	r4, [r7, #24]
    b49c:	697c      	ldr	r4, [r7, #20]
    b49e:	2c00      	cmp	r4, #0
    b4a0:	d103      	bne.n	b4aa <mqtt_connect_broker+0xd6>
    b4a2:	2480      	movs	r4, #128	; 0x80
    b4a4:	e000      	b.n	b4a8 <mqtt_connect_broker+0xd4>
    b4a6:	69fc      	ldr	r4, [r7, #28]
    b4a8:	61bc      	str	r4, [r7, #24]
    b4aa:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    b4ac:	2c00      	cmp	r4, #0
    b4ae:	d00f      	beq.n	b4d0 <mqtt_connect_broker+0xfc>
    b4b0:	68bc      	ldr	r4, [r7, #8]
    b4b2:	2c00      	cmp	r4, #0
    b4b4:	d003      	beq.n	b4be <mqtt_connect_broker+0xea>
    b4b6:	69bc      	ldr	r4, [r7, #24]
    b4b8:	2320      	movs	r3, #32
    b4ba:	431c      	orrs	r4, r3
    b4bc:	61bc      	str	r4, [r7, #24]
    b4be:	68fc      	ldr	r4, [r7, #12]
    b4c0:	2303      	movs	r3, #3
    b4c2:	4023      	ands	r3, r4
    b4c4:	00db      	lsls	r3, r3, #3
    b4c6:	69bc      	ldr	r4, [r7, #24]
    b4c8:	2204      	movs	r2, #4
    b4ca:	4313      	orrs	r3, r2
    b4cc:	431c      	orrs	r4, r3
    b4ce:	61bc      	str	r4, [r7, #24]
    b4d0:	693c      	ldr	r4, [r7, #16]
    b4d2:	2c00      	cmp	r4, #0
    b4d4:	d003      	beq.n	b4de <mqtt_connect_broker+0x10a>
    b4d6:	69bc      	ldr	r4, [r7, #24]
    b4d8:	2302      	movs	r3, #2
    b4da:	431c      	orrs	r4, r3
    b4dc:	61bc      	str	r4, [r7, #24]
    b4de:	1c2b      	adds	r3, r5, #0
    b4e0:	3343      	adds	r3, #67	; 0x43
    b4e2:	781a      	ldrb	r2, [r3, #0]
    b4e4:	2108      	movs	r1, #8
    b4e6:	430a      	orrs	r2, r1
    b4e8:	701a      	strb	r2, [r3, #0]
    b4ea:	1c38      	adds	r0, r7, #0
    b4ec:	9500      	str	r5, [sp, #0]
    b4ee:	3020      	adds	r0, #32
    b4f0:	6879      	ldr	r1, [r7, #4]
    b4f2:	4b5c      	ldr	r3, [pc, #368]	; (b664 <mqtt_connect_broker+0x290>)
    b4f4:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    b4f6:	4c5c      	ldr	r4, [pc, #368]	; (b668 <mqtt_connect_broker+0x294>)
    b4f8:	47a0      	blx	r4
    b4fa:	1c38      	adds	r0, r7, #0
    b4fc:	3020      	adds	r0, #32
    b4fe:	2110      	movs	r1, #16
    b500:	4b5a      	ldr	r3, [pc, #360]	; (b66c <mqtt_connect_broker+0x298>)
    b502:	4798      	blx	r3
    b504:	2e80      	cmp	r6, #128	; 0x80
    b506:	dd09      	ble.n	b51c <mqtt_connect_broker+0x148>
    b508:	2180      	movs	r1, #128	; 0x80
    b50a:	4249      	negs	r1, r1
    b50c:	4331      	orrs	r1, r6
    b50e:	1c38      	adds	r0, r7, #0
    b510:	b249      	sxtb	r1, r1
    b512:	3020      	adds	r0, #32
    b514:	4c55      	ldr	r4, [pc, #340]	; (b66c <mqtt_connect_broker+0x298>)
    b516:	47a0      	blx	r4
    b518:	11f6      	asrs	r6, r6, #7
    b51a:	e7f3      	b.n	b504 <mqtt_connect_broker+0x130>
    b51c:	4b54      	ldr	r3, [pc, #336]	; (b670 <mqtt_connect_broker+0x29c>)
    b51e:	401e      	ands	r6, r3
    b520:	d504      	bpl.n	b52c <mqtt_connect_broker+0x158>
    b522:	2380      	movs	r3, #128	; 0x80
    b524:	3e01      	subs	r6, #1
    b526:	425b      	negs	r3, r3
    b528:	431e      	orrs	r6, r3
    b52a:	3601      	adds	r6, #1
    b52c:	1c38      	adds	r0, r7, #0
    b52e:	b271      	sxtb	r1, r6
    b530:	3020      	adds	r0, #32
    b532:	4c4e      	ldr	r4, [pc, #312]	; (b66c <mqtt_connect_broker+0x298>)
    b534:	47a0      	blx	r4
    b536:	1c38      	adds	r0, r7, #0
    b538:	4c4e      	ldr	r4, [pc, #312]	; (b674 <mqtt_connect_broker+0x2a0>)
    b53a:	3020      	adds	r0, #32
    b53c:	2106      	movs	r1, #6
    b53e:	47a0      	blx	r4
    b540:	1c38      	adds	r0, r7, #0
    b542:	4b4d      	ldr	r3, [pc, #308]	; (b678 <mqtt_connect_broker+0x2a4>)
    b544:	3020      	adds	r0, #32
    b546:	494d      	ldr	r1, [pc, #308]	; (b67c <mqtt_connect_broker+0x2a8>)
    b548:	2206      	movs	r2, #6
    b54a:	4798      	blx	r3
    b54c:	1c38      	adds	r0, r7, #0
    b54e:	3020      	adds	r0, #32
    b550:	2103      	movs	r1, #3
    b552:	4a46      	ldr	r2, [pc, #280]	; (b66c <mqtt_connect_broker+0x298>)
    b554:	4790      	blx	r2
    b556:	69bb      	ldr	r3, [r7, #24]
    b558:	1c38      	adds	r0, r7, #0
    b55a:	4a44      	ldr	r2, [pc, #272]	; (b66c <mqtt_connect_broker+0x298>)
    b55c:	b259      	sxtb	r1, r3
    b55e:	3020      	adds	r0, #32
    b560:	4790      	blx	r2
    b562:	1c2b      	adds	r3, r5, #0
    b564:	3360      	adds	r3, #96	; 0x60
    b566:	2000      	movs	r0, #0
    b568:	5e19      	ldrsh	r1, [r3, r0]
    b56a:	1c38      	adds	r0, r7, #0
    b56c:	3020      	adds	r0, #32
    b56e:	47a0      	blx	r4
    b570:	4e39      	ldr	r6, [pc, #228]	; (b658 <mqtt_connect_broker+0x284>)
    b572:	6e38      	ldr	r0, [r7, #96]	; 0x60
    b574:	47b0      	blx	r6
    b576:	b201      	sxth	r1, r0
    b578:	1c38      	adds	r0, r7, #0
    b57a:	3020      	adds	r0, #32
    b57c:	47a0      	blx	r4
    b57e:	6e38      	ldr	r0, [r7, #96]	; 0x60
    b580:	47b0      	blx	r6
    b582:	1c02      	adds	r2, r0, #0
    b584:	1c38      	adds	r0, r7, #0
    b586:	3020      	adds	r0, #32
    b588:	6e39      	ldr	r1, [r7, #96]	; 0x60
    b58a:	4b3b      	ldr	r3, [pc, #236]	; (b678 <mqtt_connect_broker+0x2a4>)
    b58c:	4798      	blx	r3
    b58e:	6e78      	ldr	r0, [r7, #100]	; 0x64
    b590:	2800      	cmp	r0, #0
    b592:	d015      	beq.n	b5c0 <mqtt_connect_broker+0x1ec>
    b594:	47b0      	blx	r6
    b596:	b201      	sxth	r1, r0
    b598:	1c38      	adds	r0, r7, #0
    b59a:	3020      	adds	r0, #32
    b59c:	47a0      	blx	r4
    b59e:	6e78      	ldr	r0, [r7, #100]	; 0x64
    b5a0:	47b0      	blx	r6
    b5a2:	1c02      	adds	r2, r0, #0
    b5a4:	1c38      	adds	r0, r7, #0
    b5a6:	4c34      	ldr	r4, [pc, #208]	; (b678 <mqtt_connect_broker+0x2a4>)
    b5a8:	3020      	adds	r0, #32
    b5aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
    b5ac:	47a0      	blx	r4
    b5ae:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    b5b0:	2c00      	cmp	r4, #0
    b5b2:	d005      	beq.n	b5c0 <mqtt_connect_broker+0x1ec>
    b5b4:	1c38      	adds	r0, r7, #0
    b5b6:	1c21      	adds	r1, r4, #0
    b5b8:	3020      	adds	r0, #32
    b5ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    b5bc:	4c2e      	ldr	r4, [pc, #184]	; (b678 <mqtt_connect_broker+0x2a4>)
    b5be:	47a0      	blx	r4
    b5c0:	69fc      	ldr	r4, [r7, #28]
    b5c2:	2c00      	cmp	r4, #0
    b5c4:	d01f      	beq.n	b606 <mqtt_connect_broker+0x232>
    b5c6:	4e24      	ldr	r6, [pc, #144]	; (b658 <mqtt_connect_broker+0x284>)
    b5c8:	1c20      	adds	r0, r4, #0
    b5ca:	47b0      	blx	r6
    b5cc:	b201      	sxth	r1, r0
    b5ce:	1c38      	adds	r0, r7, #0
    b5d0:	3020      	adds	r0, #32
    b5d2:	4c28      	ldr	r4, [pc, #160]	; (b674 <mqtt_connect_broker+0x2a0>)
    b5d4:	47a0      	blx	r4
    b5d6:	69f8      	ldr	r0, [r7, #28]
    b5d8:	47b0      	blx	r6
    b5da:	1c02      	adds	r2, r0, #0
    b5dc:	1c38      	adds	r0, r7, #0
    b5de:	3020      	adds	r0, #32
    b5e0:	69f9      	ldr	r1, [r7, #28]
    b5e2:	4c25      	ldr	r4, [pc, #148]	; (b678 <mqtt_connect_broker+0x2a4>)
    b5e4:	47a0      	blx	r4
    b5e6:	6978      	ldr	r0, [r7, #20]
    b5e8:	2800      	cmp	r0, #0
    b5ea:	d00c      	beq.n	b606 <mqtt_connect_broker+0x232>
    b5ec:	47b0      	blx	r6
    b5ee:	b201      	sxth	r1, r0
    b5f0:	1c38      	adds	r0, r7, #0
    b5f2:	4a20      	ldr	r2, [pc, #128]	; (b674 <mqtt_connect_broker+0x2a0>)
    b5f4:	3020      	adds	r0, #32
    b5f6:	4790      	blx	r2
    b5f8:	6978      	ldr	r0, [r7, #20]
    b5fa:	47b0      	blx	r6
    b5fc:	1c02      	adds	r2, r0, #0
    b5fe:	1c38      	adds	r0, r7, #0
    b600:	3020      	adds	r0, #32
    b602:	6979      	ldr	r1, [r7, #20]
    b604:	47a0      	blx	r4
    b606:	1c38      	adds	r0, r7, #0
    b608:	1c2c      	adds	r4, r5, #0
    b60a:	3020      	adds	r0, #32
    b60c:	4b1c      	ldr	r3, [pc, #112]	; (b680 <mqtt_connect_broker+0x2ac>)
    b60e:	3443      	adds	r4, #67	; 0x43
    b610:	4798      	blx	r3
    b612:	7821      	ldrb	r1, [r4, #0]
    b614:	0789      	lsls	r1, r1, #30
    b616:	0fc9      	lsrs	r1, r1, #31
    b618:	2901      	cmp	r1, #1
    b61a:	d10b      	bne.n	b634 <mqtt_connect_broker+0x260>
    b61c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    b61e:	2a00      	cmp	r2, #0
    b620:	d108      	bne.n	b634 <mqtt_connect_broker+0x260>
    b622:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    b624:	2b00      	cmp	r3, #0
    b626:	d005      	beq.n	b634 <mqtt_connect_broker+0x260>
    b628:	2034      	movs	r0, #52	; 0x34
    b62a:	55c2      	strb	r2, [r0, r7]
    b62c:	1c3a      	adds	r2, r7, #0
    b62e:	1c28      	adds	r0, r5, #0
    b630:	3234      	adds	r2, #52	; 0x34
    b632:	4798      	blx	r3
    b634:	7823      	ldrb	r3, [r4, #0]
    b636:	2202      	movs	r2, #2
    b638:	4313      	orrs	r3, r2
    b63a:	2208      	movs	r2, #8
    b63c:	4393      	bics	r3, r2
    b63e:	7023      	strb	r3, [r4, #0]
    b640:	2000      	movs	r0, #0
    b642:	e005      	b.n	b650 <mqtt_connect_broker+0x27c>
    b644:	2080      	movs	r0, #128	; 0x80
    b646:	e002      	b.n	b64e <mqtt_connect_broker+0x27a>
    b648:	2078      	movs	r0, #120	; 0x78
    b64a:	e000      	b.n	b64e <mqtt_connect_broker+0x27a>
    b64c:	200b      	movs	r0, #11
    b64e:	4240      	negs	r0, r0
    b650:	46bd      	mov	sp, r7
    b652:	b013      	add	sp, #76	; 0x4c
    b654:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b656:	46c0      	nop			; (mov r8, r8)
    b658:	0000c77d 	.word	0x0000c77d
    b65c:	00002001 	.word	0x00002001
    b660:	0000a481 	.word	0x0000a481
    b664:	0000b14d 	.word	0x0000b14d
    b668:	0000a09d 	.word	0x0000a09d
    b66c:	0000a0d1 	.word	0x0000a0d1
    b670:	8000007f 	.word	0x8000007f
    b674:	0000a11d 	.word	0x0000a11d
    b678:	0000a15d 	.word	0x0000a15d
    b67c:	0000ec1f 	.word	0x0000ec1f
    b680:	0000a199 	.word	0x0000a199

0000b684 <mqtt_publish>:
    b684:	b5f0      	push	{r4, r5, r6, r7, lr}
    b686:	b093      	sub	sp, #76	; 0x4c
    b688:	af02      	add	r7, sp, #8
    b68a:	60fb      	str	r3, [r7, #12]
    b68c:	1c3b      	adds	r3, r7, #0
    b68e:	3358      	adds	r3, #88	; 0x58
    b690:	781b      	ldrb	r3, [r3, #0]
    b692:	1c04      	adds	r4, r0, #0
    b694:	613b      	str	r3, [r7, #16]
    b696:	1c3b      	adds	r3, r7, #0
    b698:	335c      	adds	r3, #92	; 0x5c
    b69a:	781b      	ldrb	r3, [r3, #0]
    b69c:	6179      	str	r1, [r7, #20]
    b69e:	60ba      	str	r2, [r7, #8]
    b6a0:	607b      	str	r3, [r7, #4]
    b6a2:	2800      	cmp	r0, #0
    b6a4:	d101      	bne.n	b6aa <mqtt_publish+0x26>
    b6a6:	2516      	movs	r5, #22
    b6a8:	e0a7      	b.n	b7fa <mqtt_publish+0x176>
    b6aa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    b6ac:	466a      	mov	r2, sp
    b6ae:	3307      	adds	r3, #7
    b6b0:	08db      	lsrs	r3, r3, #3
    b6b2:	00db      	lsls	r3, r3, #3
    b6b4:	1ad2      	subs	r2, r2, r3
    b6b6:	697b      	ldr	r3, [r7, #20]
    b6b8:	4695      	mov	sp, r2
    b6ba:	ae02      	add	r6, sp, #8
    b6bc:	2b00      	cmp	r3, #0
    b6be:	d0f2      	beq.n	b6a6 <mqtt_publish+0x22>
    b6c0:	693a      	ldr	r2, [r7, #16]
    b6c2:	2a02      	cmp	r2, #2
    b6c4:	d8ef      	bhi.n	b6a6 <mqtt_publish+0x22>
    b6c6:	1c05      	adds	r5, r0, #0
    b6c8:	3543      	adds	r5, #67	; 0x43
    b6ca:	782b      	ldrb	r3, [r5, #0]
    b6cc:	079a      	lsls	r2, r3, #30
    b6ce:	d400      	bmi.n	b6d2 <mqtt_publish+0x4e>
    b6d0:	e090      	b.n	b7f4 <mqtt_publish+0x170>
    b6d2:	071a      	lsls	r2, r3, #28
    b6d4:	d40a      	bmi.n	b6ec <mqtt_publish+0x68>
    b6d6:	4b4b      	ldr	r3, [pc, #300]	; (b804 <mqtt_publish+0x180>)
    b6d8:	6978      	ldr	r0, [r7, #20]
    b6da:	4798      	blx	r3
    b6dc:	68fd      	ldr	r5, [r7, #12]
    b6de:	693b      	ldr	r3, [r7, #16]
    b6e0:	3502      	adds	r5, #2
    b6e2:	182d      	adds	r5, r5, r0
    b6e4:	2b00      	cmp	r3, #0
    b6e6:	d011      	beq.n	b70c <mqtt_publish+0x88>
    b6e8:	3502      	adds	r5, #2
    b6ea:	e00f      	b.n	b70c <mqtt_publish+0x88>
    b6ec:	1c03      	adds	r3, r0, #0
    b6ee:	3370      	adds	r3, #112	; 0x70
    b6f0:	781b      	ldrb	r3, [r3, #0]
    b6f2:	2b00      	cmp	r3, #0
    b6f4:	d000      	beq.n	b6f8 <mqtt_publish+0x74>
    b6f6:	e07f      	b.n	b7f8 <mqtt_publish+0x174>
    b6f8:	782b      	ldrb	r3, [r5, #0]
    b6fa:	071a      	lsls	r2, r3, #28
    b6fc:	d5eb      	bpl.n	b6d6 <mqtt_publish+0x52>
    b6fe:	4b42      	ldr	r3, [pc, #264]	; (b808 <mqtt_publish+0x184>)
    b700:	2000      	movs	r0, #0
    b702:	4798      	blx	r3
    b704:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    b706:	4b41      	ldr	r3, [pc, #260]	; (b80c <mqtt_publish+0x188>)
    b708:	4798      	blx	r3
    b70a:	e7f5      	b.n	b6f8 <mqtt_publish+0x74>
    b70c:	1c23      	adds	r3, r4, #0
    b70e:	3343      	adds	r3, #67	; 0x43
    b710:	781a      	ldrb	r2, [r3, #0]
    b712:	2108      	movs	r1, #8
    b714:	430a      	orrs	r2, r1
    b716:	701a      	strb	r2, [r3, #0]
    b718:	1c38      	adds	r0, r7, #0
    b71a:	9400      	str	r4, [sp, #0]
    b71c:	1c31      	adds	r1, r6, #0
    b71e:	302c      	adds	r0, #44	; 0x2c
    b720:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    b722:	4b3b      	ldr	r3, [pc, #236]	; (b810 <mqtt_publish+0x18c>)
    b724:	4e3b      	ldr	r6, [pc, #236]	; (b814 <mqtt_publish+0x190>)
    b726:	47b0      	blx	r6
    b728:	687b      	ldr	r3, [r7, #4]
    b72a:	2101      	movs	r1, #1
    b72c:	4019      	ands	r1, r3
    b72e:	2330      	movs	r3, #48	; 0x30
    b730:	4319      	orrs	r1, r3
    b732:	693b      	ldr	r3, [r7, #16]
    b734:	1c38      	adds	r0, r7, #0
    b736:	005a      	lsls	r2, r3, #1
    b738:	2306      	movs	r3, #6
    b73a:	4013      	ands	r3, r2
    b73c:	4319      	orrs	r1, r3
    b73e:	302c      	adds	r0, #44	; 0x2c
    b740:	4b35      	ldr	r3, [pc, #212]	; (b818 <mqtt_publish+0x194>)
    b742:	4798      	blx	r3
    b744:	4b34      	ldr	r3, [pc, #208]	; (b818 <mqtt_publish+0x194>)
    b746:	2d80      	cmp	r5, #128	; 0x80
    b748:	dd08      	ble.n	b75c <mqtt_publish+0xd8>
    b74a:	2180      	movs	r1, #128	; 0x80
    b74c:	4249      	negs	r1, r1
    b74e:	4329      	orrs	r1, r5
    b750:	1c38      	adds	r0, r7, #0
    b752:	b249      	sxtb	r1, r1
    b754:	302c      	adds	r0, #44	; 0x2c
    b756:	4798      	blx	r3
    b758:	11ed      	asrs	r5, r5, #7
    b75a:	e7f3      	b.n	b744 <mqtt_publish+0xc0>
    b75c:	4a2f      	ldr	r2, [pc, #188]	; (b81c <mqtt_publish+0x198>)
    b75e:	4015      	ands	r5, r2
    b760:	d504      	bpl.n	b76c <mqtt_publish+0xe8>
    b762:	2280      	movs	r2, #128	; 0x80
    b764:	3d01      	subs	r5, #1
    b766:	4252      	negs	r2, r2
    b768:	4315      	orrs	r5, r2
    b76a:	3501      	adds	r5, #1
    b76c:	1c38      	adds	r0, r7, #0
    b76e:	b269      	sxtb	r1, r5
    b770:	302c      	adds	r0, #44	; 0x2c
    b772:	4798      	blx	r3
    b774:	4e23      	ldr	r6, [pc, #140]	; (b804 <mqtt_publish+0x180>)
    b776:	6978      	ldr	r0, [r7, #20]
    b778:	47b0      	blx	r6
    b77a:	b201      	sxth	r1, r0
    b77c:	1c38      	adds	r0, r7, #0
    b77e:	302c      	adds	r0, #44	; 0x2c
    b780:	4d27      	ldr	r5, [pc, #156]	; (b820 <mqtt_publish+0x19c>)
    b782:	47a8      	blx	r5
    b784:	6978      	ldr	r0, [r7, #20]
    b786:	47b0      	blx	r6
    b788:	1c02      	adds	r2, r0, #0
    b78a:	1c38      	adds	r0, r7, #0
    b78c:	302c      	adds	r0, #44	; 0x2c
    b78e:	6979      	ldr	r1, [r7, #20]
    b790:	4e24      	ldr	r6, [pc, #144]	; (b824 <mqtt_publish+0x1a0>)
    b792:	47b0      	blx	r6
    b794:	693a      	ldr	r2, [r7, #16]
    b796:	2a00      	cmp	r2, #0
    b798:	d006      	beq.n	b7a8 <mqtt_publish+0x124>
    b79a:	8821      	ldrh	r1, [r4, #0]
    b79c:	1c38      	adds	r0, r7, #0
    b79e:	1c4b      	adds	r3, r1, #1
    b7a0:	8023      	strh	r3, [r4, #0]
    b7a2:	b209      	sxth	r1, r1
    b7a4:	302c      	adds	r0, #44	; 0x2c
    b7a6:	47a8      	blx	r5
    b7a8:	8823      	ldrh	r3, [r4, #0]
    b7aa:	2b00      	cmp	r3, #0
    b7ac:	d101      	bne.n	b7b2 <mqtt_publish+0x12e>
    b7ae:	2301      	movs	r3, #1
    b7b0:	8023      	strh	r3, [r4, #0]
    b7b2:	68bb      	ldr	r3, [r7, #8]
    b7b4:	2b00      	cmp	r3, #0
    b7b6:	d006      	beq.n	b7c6 <mqtt_publish+0x142>
    b7b8:	68fa      	ldr	r2, [r7, #12]
    b7ba:	2a00      	cmp	r2, #0
    b7bc:	d003      	beq.n	b7c6 <mqtt_publish+0x142>
    b7be:	1c38      	adds	r0, r7, #0
    b7c0:	302c      	adds	r0, #44	; 0x2c
    b7c2:	1c19      	adds	r1, r3, #0
    b7c4:	47b0      	blx	r6
    b7c6:	1c38      	adds	r0, r7, #0
    b7c8:	4b17      	ldr	r3, [pc, #92]	; (b828 <mqtt_publish+0x1a4>)
    b7ca:	302c      	adds	r0, #44	; 0x2c
    b7cc:	4798      	blx	r3
    b7ce:	1c23      	adds	r3, r4, #0
    b7d0:	3343      	adds	r3, #67	; 0x43
    b7d2:	781a      	ldrb	r2, [r3, #0]
    b7d4:	2108      	movs	r1, #8
    b7d6:	438a      	bics	r2, r1
    b7d8:	701a      	strb	r2, [r3, #0]
    b7da:	693b      	ldr	r3, [r7, #16]
    b7dc:	2500      	movs	r5, #0
    b7de:	42ab      	cmp	r3, r5
    b7e0:	d10c      	bne.n	b7fc <mqtt_publish+0x178>
    b7e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b7e4:	42ab      	cmp	r3, r5
    b7e6:	d009      	beq.n	b7fc <mqtt_publish+0x178>
    b7e8:	1c3a      	adds	r2, r7, #0
    b7ea:	1c20      	adds	r0, r4, #0
    b7ec:	2102      	movs	r1, #2
    b7ee:	3218      	adds	r2, #24
    b7f0:	4798      	blx	r3
    b7f2:	e003      	b.n	b7fc <mqtt_publish+0x178>
    b7f4:	2580      	movs	r5, #128	; 0x80
    b7f6:	e000      	b.n	b7fa <mqtt_publish+0x176>
    b7f8:	250b      	movs	r5, #11
    b7fa:	426d      	negs	r5, r5
    b7fc:	1c28      	adds	r0, r5, #0
    b7fe:	46bd      	mov	sp, r7
    b800:	b011      	add	sp, #68	; 0x44
    b802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b804:	0000c77d 	.word	0x0000c77d
    b808:	00002001 	.word	0x00002001
    b80c:	0000a481 	.word	0x0000a481
    b810:	0000b14d 	.word	0x0000b14d
    b814:	0000a09d 	.word	0x0000a09d
    b818:	0000a0d1 	.word	0x0000a0d1
    b81c:	8000007f 	.word	0x8000007f
    b820:	0000a11d 	.word	0x0000a11d
    b824:	0000a15d 	.word	0x0000a15d
    b828:	0000a199 	.word	0x0000a199

0000b82c <mqtt_subscribe>:
    b82c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b82e:	b08d      	sub	sp, #52	; 0x34
    b830:	af02      	add	r7, sp, #8
    b832:	1c04      	adds	r4, r0, #0
    b834:	60b9      	str	r1, [r7, #8]
    b836:	607a      	str	r2, [r7, #4]
    b838:	d101      	bne.n	b83e <mqtt_subscribe+0x12>
    b83a:	2016      	movs	r0, #22
    b83c:	e086      	b.n	b94c <mqtt_subscribe+0x120>
    b83e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    b840:	466a      	mov	r2, sp
    b842:	3307      	adds	r3, #7
    b844:	08db      	lsrs	r3, r3, #3
    b846:	00db      	lsls	r3, r3, #3
    b848:	1ad2      	subs	r2, r2, r3
    b84a:	4695      	mov	sp, r2
    b84c:	ad02      	add	r5, sp, #8
    b84e:	603d      	str	r5, [r7, #0]
    b850:	68bd      	ldr	r5, [r7, #8]
    b852:	2d00      	cmp	r5, #0
    b854:	d0f1      	beq.n	b83a <mqtt_subscribe+0xe>
    b856:	687d      	ldr	r5, [r7, #4]
    b858:	2d02      	cmp	r5, #2
    b85a:	d8ee      	bhi.n	b83a <mqtt_subscribe+0xe>
    b85c:	1c05      	adds	r5, r0, #0
    b85e:	3543      	adds	r5, #67	; 0x43
    b860:	782b      	ldrb	r3, [r5, #0]
    b862:	079a      	lsls	r2, r3, #30
    b864:	d56f      	bpl.n	b946 <mqtt_subscribe+0x11a>
    b866:	071a      	lsls	r2, r3, #28
    b868:	d41a      	bmi.n	b8a0 <mqtt_subscribe+0x74>
    b86a:	68b8      	ldr	r0, [r7, #8]
    b86c:	4d39      	ldr	r5, [pc, #228]	; (b954 <mqtt_subscribe+0x128>)
    b86e:	47a8      	blx	r5
    b870:	1c25      	adds	r5, r4, #0
    b872:	3543      	adds	r5, #67	; 0x43
    b874:	782b      	ldrb	r3, [r5, #0]
    b876:	2208      	movs	r2, #8
    b878:	4313      	orrs	r3, r2
    b87a:	702b      	strb	r3, [r5, #0]
    b87c:	60fd      	str	r5, [r7, #12]
    b87e:	1d46      	adds	r6, r0, #5
    b880:	9400      	str	r4, [sp, #0]
    b882:	1c38      	adds	r0, r7, #0
    b884:	3014      	adds	r0, #20
    b886:	6839      	ldr	r1, [r7, #0]
    b888:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    b88a:	4b33      	ldr	r3, [pc, #204]	; (b958 <mqtt_subscribe+0x12c>)
    b88c:	4d33      	ldr	r5, [pc, #204]	; (b95c <mqtt_subscribe+0x130>)
    b88e:	47a8      	blx	r5
    b890:	1c38      	adds	r0, r7, #0
    b892:	217e      	movs	r1, #126	; 0x7e
    b894:	3014      	adds	r0, #20
    b896:	4249      	negs	r1, r1
    b898:	4b31      	ldr	r3, [pc, #196]	; (b960 <mqtt_subscribe+0x134>)
    b89a:	4798      	blx	r3
    b89c:	4d2d      	ldr	r5, [pc, #180]	; (b954 <mqtt_subscribe+0x128>)
    b89e:	e00e      	b.n	b8be <mqtt_subscribe+0x92>
    b8a0:	1c03      	adds	r3, r0, #0
    b8a2:	3370      	adds	r3, #112	; 0x70
    b8a4:	781b      	ldrb	r3, [r3, #0]
    b8a6:	2b00      	cmp	r3, #0
    b8a8:	d14f      	bne.n	b94a <mqtt_subscribe+0x11e>
    b8aa:	782b      	ldrb	r3, [r5, #0]
    b8ac:	071a      	lsls	r2, r3, #28
    b8ae:	d5dc      	bpl.n	b86a <mqtt_subscribe+0x3e>
    b8b0:	4b2c      	ldr	r3, [pc, #176]	; (b964 <mqtt_subscribe+0x138>)
    b8b2:	2000      	movs	r0, #0
    b8b4:	4798      	blx	r3
    b8b6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    b8b8:	4b2b      	ldr	r3, [pc, #172]	; (b968 <mqtt_subscribe+0x13c>)
    b8ba:	4798      	blx	r3
    b8bc:	e7f5      	b.n	b8aa <mqtt_subscribe+0x7e>
    b8be:	4b28      	ldr	r3, [pc, #160]	; (b960 <mqtt_subscribe+0x134>)
    b8c0:	2e80      	cmp	r6, #128	; 0x80
    b8c2:	dd08      	ble.n	b8d6 <mqtt_subscribe+0xaa>
    b8c4:	2180      	movs	r1, #128	; 0x80
    b8c6:	4249      	negs	r1, r1
    b8c8:	4331      	orrs	r1, r6
    b8ca:	1c38      	adds	r0, r7, #0
    b8cc:	b249      	sxtb	r1, r1
    b8ce:	3014      	adds	r0, #20
    b8d0:	4798      	blx	r3
    b8d2:	11f6      	asrs	r6, r6, #7
    b8d4:	e7f3      	b.n	b8be <mqtt_subscribe+0x92>
    b8d6:	4925      	ldr	r1, [pc, #148]	; (b96c <mqtt_subscribe+0x140>)
    b8d8:	4031      	ands	r1, r6
    b8da:	d504      	bpl.n	b8e6 <mqtt_subscribe+0xba>
    b8dc:	2280      	movs	r2, #128	; 0x80
    b8de:	3901      	subs	r1, #1
    b8e0:	4252      	negs	r2, r2
    b8e2:	4311      	orrs	r1, r2
    b8e4:	3101      	adds	r1, #1
    b8e6:	1c38      	adds	r0, r7, #0
    b8e8:	b249      	sxtb	r1, r1
    b8ea:	3014      	adds	r0, #20
    b8ec:	4798      	blx	r3
    b8ee:	8821      	ldrh	r1, [r4, #0]
    b8f0:	1c38      	adds	r0, r7, #0
    b8f2:	1c4b      	adds	r3, r1, #1
    b8f4:	8023      	strh	r3, [r4, #0]
    b8f6:	b209      	sxth	r1, r1
    b8f8:	3014      	adds	r0, #20
    b8fa:	4e1d      	ldr	r6, [pc, #116]	; (b970 <mqtt_subscribe+0x144>)
    b8fc:	47b0      	blx	r6
    b8fe:	8823      	ldrh	r3, [r4, #0]
    b900:	2b00      	cmp	r3, #0
    b902:	d101      	bne.n	b908 <mqtt_subscribe+0xdc>
    b904:	2301      	movs	r3, #1
    b906:	8023      	strh	r3, [r4, #0]
    b908:	68b8      	ldr	r0, [r7, #8]
    b90a:	47a8      	blx	r5
    b90c:	b201      	sxth	r1, r0
    b90e:	1c38      	adds	r0, r7, #0
    b910:	3014      	adds	r0, #20
    b912:	47b0      	blx	r6
    b914:	68b8      	ldr	r0, [r7, #8]
    b916:	47a8      	blx	r5
    b918:	1c02      	adds	r2, r0, #0
    b91a:	1c38      	adds	r0, r7, #0
    b91c:	3014      	adds	r0, #20
    b91e:	68b9      	ldr	r1, [r7, #8]
    b920:	4b14      	ldr	r3, [pc, #80]	; (b974 <mqtt_subscribe+0x148>)
    b922:	4798      	blx	r3
    b924:	687d      	ldr	r5, [r7, #4]
    b926:	1c38      	adds	r0, r7, #0
    b928:	b269      	sxtb	r1, r5
    b92a:	3014      	adds	r0, #20
    b92c:	4b0c      	ldr	r3, [pc, #48]	; (b960 <mqtt_subscribe+0x134>)
    b92e:	4798      	blx	r3
    b930:	1c38      	adds	r0, r7, #0
    b932:	3014      	adds	r0, #20
    b934:	4b10      	ldr	r3, [pc, #64]	; (b978 <mqtt_subscribe+0x14c>)
    b936:	4798      	blx	r3
    b938:	68fd      	ldr	r5, [r7, #12]
    b93a:	2208      	movs	r2, #8
    b93c:	782b      	ldrb	r3, [r5, #0]
    b93e:	2000      	movs	r0, #0
    b940:	4393      	bics	r3, r2
    b942:	702b      	strb	r3, [r5, #0]
    b944:	e003      	b.n	b94e <mqtt_subscribe+0x122>
    b946:	2080      	movs	r0, #128	; 0x80
    b948:	e000      	b.n	b94c <mqtt_subscribe+0x120>
    b94a:	200b      	movs	r0, #11
    b94c:	4240      	negs	r0, r0
    b94e:	46bd      	mov	sp, r7
    b950:	b00b      	add	sp, #44	; 0x2c
    b952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b954:	0000c77d 	.word	0x0000c77d
    b958:	0000b14d 	.word	0x0000b14d
    b95c:	0000a09d 	.word	0x0000a09d
    b960:	0000a0d1 	.word	0x0000a0d1
    b964:	00002001 	.word	0x00002001
    b968:	0000a481 	.word	0x0000a481
    b96c:	8000007f 	.word	0x8000007f
    b970:	0000a11d 	.word	0x0000a11d
    b974:	0000a15d 	.word	0x0000a15d
    b978:	0000a199 	.word	0x0000a199

0000b97c <_mqtt_ping>:
    b97c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b97e:	23c0      	movs	r3, #192	; 0xc0
    b980:	a901      	add	r1, sp, #4
    b982:	2500      	movs	r5, #0
    b984:	700b      	strb	r3, [r1, #0]
    b986:	704d      	strb	r5, [r1, #1]
    b988:	42a8      	cmp	r0, r5
    b98a:	d019      	beq.n	b9c0 <_mqtt_ping+0x44>
    b98c:	1c04      	adds	r4, r0, #0
    b98e:	3443      	adds	r4, #67	; 0x43
    b990:	7823      	ldrb	r3, [r4, #0]
    b992:	079a      	lsls	r2, r3, #30
    b994:	d516      	bpl.n	b9c4 <_mqtt_ping+0x48>
    b996:	071a      	lsls	r2, r3, #28
    b998:	d416      	bmi.n	b9c8 <_mqtt_ping+0x4c>
    b99a:	2608      	movs	r6, #8
    b99c:	4333      	orrs	r3, r6
    b99e:	7023      	strb	r3, [r4, #0]
    b9a0:	7880      	ldrb	r0, [r0, #2]
    b9a2:	1c2b      	adds	r3, r5, #0
    b9a4:	b240      	sxtb	r0, r0
    b9a6:	2202      	movs	r2, #2
    b9a8:	4f09      	ldr	r7, [pc, #36]	; (b9d0 <_mqtt_ping+0x54>)
    b9aa:	47b8      	blx	r7
    b9ac:	1c2b      	adds	r3, r5, #0
    b9ae:	42a8      	cmp	r0, r5
    b9b0:	da0c      	bge.n	b9cc <_mqtt_ping+0x50>
    b9b2:	7823      	ldrb	r3, [r4, #0]
    b9b4:	43b3      	bics	r3, r6
    b9b6:	7023      	strb	r3, [r4, #0]
    b9b8:	4b06      	ldr	r3, [pc, #24]	; (b9d4 <_mqtt_ping+0x58>)
    b9ba:	4798      	blx	r3
    b9bc:	1c03      	adds	r3, r0, #0
    b9be:	e005      	b.n	b9cc <_mqtt_ping+0x50>
    b9c0:	2316      	movs	r3, #22
    b9c2:	e002      	b.n	b9ca <_mqtt_ping+0x4e>
    b9c4:	2380      	movs	r3, #128	; 0x80
    b9c6:	e000      	b.n	b9ca <_mqtt_ping+0x4e>
    b9c8:	230b      	movs	r3, #11
    b9ca:	425b      	negs	r3, r3
    b9cc:	1c18      	adds	r0, r3, #0
    b9ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b9d0:	000053b5 	.word	0x000053b5
    b9d4:	0000b0fd 	.word	0x0000b0fd

0000b9d8 <mqtt_timer_callback>:
    b9d8:	b570      	push	{r4, r5, r6, lr}
    b9da:	1c05      	adds	r5, r0, #0
    b9dc:	b086      	sub	sp, #24
    b9de:	1c0e      	adds	r6, r1, #0
    b9e0:	1c14      	adds	r4, r2, #0
    b9e2:	2800      	cmp	r0, #0
    b9e4:	d012      	beq.n	ba0c <mqtt_timer_callback+0x34>
    b9e6:	2a00      	cmp	r2, #0
    b9e8:	d010      	beq.n	ba0c <mqtt_timer_callback+0x34>
    b9ea:	1c10      	adds	r0, r2, #0
    b9ec:	4b08      	ldr	r3, [pc, #32]	; (ba10 <mqtt_timer_callback+0x38>)
    b9ee:	4798      	blx	r3
    b9f0:	2800      	cmp	r0, #0
    b9f2:	da04      	bge.n	b9fe <mqtt_timer_callback+0x26>
    b9f4:	1c28      	adds	r0, r5, #0
    b9f6:	1c31      	adds	r1, r6, #0
    b9f8:	2200      	movs	r2, #0
    b9fa:	4b06      	ldr	r3, [pc, #24]	; (ba14 <mqtt_timer_callback+0x3c>)
    b9fc:	e005      	b.n	ba0a <mqtt_timer_callback+0x32>
    b9fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ba00:	2b00      	cmp	r3, #0
    ba02:	d003      	beq.n	ba0c <mqtt_timer_callback+0x34>
    ba04:	1c20      	adds	r0, r4, #0
    ba06:	2107      	movs	r1, #7
    ba08:	aa01      	add	r2, sp, #4
    ba0a:	4798      	blx	r3
    ba0c:	b006      	add	sp, #24
    ba0e:	bd70      	pop	{r4, r5, r6, pc}
    ba10:	0000b97d 	.word	0x0000b97d
    ba14:	0000a405 	.word	0x0000a405

0000ba18 <_mqtt_puback>:
    ba18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ba1a:	2302      	movs	r3, #2
    ba1c:	ac01      	add	r4, sp, #4
    ba1e:	2700      	movs	r7, #0
    ba20:	7063      	strb	r3, [r4, #1]
    ba22:	42b8      	cmp	r0, r7
    ba24:	d01e      	beq.n	ba64 <_mqtt_puback+0x4c>
    ba26:	1c05      	adds	r5, r0, #0
    ba28:	3543      	adds	r5, #67	; 0x43
    ba2a:	782b      	ldrb	r3, [r5, #0]
    ba2c:	079e      	lsls	r6, r3, #30
    ba2e:	d51b      	bpl.n	ba68 <_mqtt_puback+0x50>
    ba30:	071e      	lsls	r6, r3, #28
    ba32:	d41b      	bmi.n	ba6c <_mqtt_puback+0x54>
    ba34:	2608      	movs	r6, #8
    ba36:	4333      	orrs	r3, r6
    ba38:	702b      	strb	r3, [r5, #0]
    ba3a:	7880      	ldrb	r0, [r0, #2]
    ba3c:	7021      	strb	r1, [r4, #0]
    ba3e:	0a11      	lsrs	r1, r2, #8
    ba40:	70a1      	strb	r1, [r4, #2]
    ba42:	70e2      	strb	r2, [r4, #3]
    ba44:	1c21      	adds	r1, r4, #0
    ba46:	1c3b      	adds	r3, r7, #0
    ba48:	b240      	sxtb	r0, r0
    ba4a:	2204      	movs	r2, #4
    ba4c:	4c09      	ldr	r4, [pc, #36]	; (ba74 <_mqtt_puback+0x5c>)
    ba4e:	47a0      	blx	r4
    ba50:	1c3b      	adds	r3, r7, #0
    ba52:	42b8      	cmp	r0, r7
    ba54:	da0c      	bge.n	ba70 <_mqtt_puback+0x58>
    ba56:	782b      	ldrb	r3, [r5, #0]
    ba58:	43b3      	bics	r3, r6
    ba5a:	702b      	strb	r3, [r5, #0]
    ba5c:	4b06      	ldr	r3, [pc, #24]	; (ba78 <_mqtt_puback+0x60>)
    ba5e:	4798      	blx	r3
    ba60:	1c03      	adds	r3, r0, #0
    ba62:	e005      	b.n	ba70 <_mqtt_puback+0x58>
    ba64:	2316      	movs	r3, #22
    ba66:	e002      	b.n	ba6e <_mqtt_puback+0x56>
    ba68:	2380      	movs	r3, #128	; 0x80
    ba6a:	e000      	b.n	ba6e <_mqtt_puback+0x56>
    ba6c:	230b      	movs	r3, #11
    ba6e:	425b      	negs	r3, r3
    ba70:	1c18      	adds	r0, r3, #0
    ba72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ba74:	000053b5 	.word	0x000053b5
    ba78:	0000b0fd 	.word	0x0000b0fd

0000ba7c <mqtt_clear_conn>:
    ba7c:	b530      	push	{r4, r5, lr}
    ba7e:	1c04      	adds	r4, r0, #0
    ba80:	b087      	sub	sp, #28
    ba82:	2800      	cmp	r0, #0
    ba84:	d01c      	beq.n	bac0 <mqtt_clear_conn+0x44>
    ba86:	2002      	movs	r0, #2
    ba88:	4b0e      	ldr	r3, [pc, #56]	; (bac4 <mqtt_clear_conn+0x48>)
    ba8a:	5620      	ldrsb	r0, [r4, r0]
    ba8c:	4798      	blx	r3
    ba8e:	1c23      	adds	r3, r4, #0
    ba90:	3343      	adds	r3, #67	; 0x43
    ba92:	781a      	ldrb	r2, [r3, #0]
    ba94:	21fc      	movs	r1, #252	; 0xfc
    ba96:	0795      	lsls	r5, r2, #30
    ba98:	400a      	ands	r2, r1
    ba9a:	701a      	strb	r2, [r3, #0]
    ba9c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ba9e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    baa0:	9301      	str	r3, [sp, #4]
    baa2:	2300      	movs	r3, #0
    baa4:	64e3      	str	r3, [r4, #76]	; 0x4c
    baa6:	6d21      	ldr	r1, [r4, #80]	; 0x50
    baa8:	4b07      	ldr	r3, [pc, #28]	; (bac8 <mqtt_clear_conn+0x4c>)
    baaa:	4798      	blx	r3
    baac:	6d63      	ldr	r3, [r4, #84]	; 0x54
    baae:	0fed      	lsrs	r5, r5, #31
    bab0:	2b00      	cmp	r3, #0
    bab2:	d005      	beq.n	bac0 <mqtt_clear_conn+0x44>
    bab4:	2d00      	cmp	r5, #0
    bab6:	d003      	beq.n	bac0 <mqtt_clear_conn+0x44>
    bab8:	1c20      	adds	r0, r4, #0
    baba:	2105      	movs	r1, #5
    babc:	aa01      	add	r2, sp, #4
    babe:	4798      	blx	r3
    bac0:	b007      	add	sp, #28
    bac2:	bd30      	pop	{r4, r5, pc}
    bac4:	00005699 	.word	0x00005699
    bac8:	0000a455 	.word	0x0000a455

0000bacc <mqtt_disconnect>:
    bacc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bace:	23e0      	movs	r3, #224	; 0xe0
    bad0:	ae01      	add	r6, sp, #4
    bad2:	2700      	movs	r7, #0
    bad4:	1c05      	adds	r5, r0, #0
    bad6:	7033      	strb	r3, [r6, #0]
    bad8:	7077      	strb	r7, [r6, #1]
    bada:	42b8      	cmp	r0, r7
    badc:	d036      	beq.n	bb4c <mqtt_disconnect+0x80>
    bade:	1c04      	adds	r4, r0, #0
    bae0:	3443      	adds	r4, #67	; 0x43
    bae2:	7823      	ldrb	r3, [r4, #0]
    bae4:	079a      	lsls	r2, r3, #30
    bae6:	d533      	bpl.n	bb50 <mqtt_disconnect+0x84>
    bae8:	42b9      	cmp	r1, r7
    baea:	d12b      	bne.n	bb44 <mqtt_disconnect+0x78>
    baec:	071a      	lsls	r2, r3, #28
    baee:	d414      	bmi.n	bb1a <mqtt_disconnect+0x4e>
    baf0:	7823      	ldrb	r3, [r4, #0]
    baf2:	2210      	movs	r2, #16
    baf4:	4313      	orrs	r3, r2
    baf6:	2708      	movs	r7, #8
    baf8:	433b      	orrs	r3, r7
    bafa:	7023      	strb	r3, [r4, #0]
    bafc:	2002      	movs	r0, #2
    bafe:	5628      	ldrsb	r0, [r5, r0]
    bb00:	1c31      	adds	r1, r6, #0
    bb02:	2202      	movs	r2, #2
    bb04:	2300      	movs	r3, #0
    bb06:	4d15      	ldr	r5, [pc, #84]	; (bb5c <mqtt_disconnect+0x90>)
    bb08:	47a8      	blx	r5
    bb0a:	2800      	cmp	r0, #0
    bb0c:	da14      	bge.n	bb38 <mqtt_disconnect+0x6c>
    bb0e:	7823      	ldrb	r3, [r4, #0]
    bb10:	43bb      	bics	r3, r7
    bb12:	7023      	strb	r3, [r4, #0]
    bb14:	4b12      	ldr	r3, [pc, #72]	; (bb60 <mqtt_disconnect+0x94>)
    bb16:	4798      	blx	r3
    bb18:	e01e      	b.n	bb58 <mqtt_disconnect+0x8c>
    bb1a:	1c03      	adds	r3, r0, #0
    bb1c:	3370      	adds	r3, #112	; 0x70
    bb1e:	781b      	ldrb	r3, [r3, #0]
    bb20:	2b00      	cmp	r3, #0
    bb22:	d117      	bne.n	bb54 <mqtt_disconnect+0x88>
    bb24:	7823      	ldrb	r3, [r4, #0]
    bb26:	071a      	lsls	r2, r3, #28
    bb28:	d5e2      	bpl.n	baf0 <mqtt_disconnect+0x24>
    bb2a:	4b0e      	ldr	r3, [pc, #56]	; (bb64 <mqtt_disconnect+0x98>)
    bb2c:	2000      	movs	r0, #0
    bb2e:	4798      	blx	r3
    bb30:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    bb32:	4b0d      	ldr	r3, [pc, #52]	; (bb68 <mqtt_disconnect+0x9c>)
    bb34:	4798      	blx	r3
    bb36:	e7f5      	b.n	bb24 <mqtt_disconnect+0x58>
    bb38:	7823      	ldrb	r3, [r4, #0]
    bb3a:	2202      	movs	r2, #2
    bb3c:	4393      	bics	r3, r2
    bb3e:	7023      	strb	r3, [r4, #0]
    bb40:	2000      	movs	r0, #0
    bb42:	e009      	b.n	bb58 <mqtt_disconnect+0x8c>
    bb44:	4b09      	ldr	r3, [pc, #36]	; (bb6c <mqtt_disconnect+0xa0>)
    bb46:	4798      	blx	r3
    bb48:	1c38      	adds	r0, r7, #0
    bb4a:	e005      	b.n	bb58 <mqtt_disconnect+0x8c>
    bb4c:	2016      	movs	r0, #22
    bb4e:	e002      	b.n	bb56 <mqtt_disconnect+0x8a>
    bb50:	2080      	movs	r0, #128	; 0x80
    bb52:	e000      	b.n	bb56 <mqtt_disconnect+0x8a>
    bb54:	200b      	movs	r0, #11
    bb56:	4240      	negs	r0, r0
    bb58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bb5a:	46c0      	nop			; (mov r8, r8)
    bb5c:	000053b5 	.word	0x000053b5
    bb60:	0000b0fd 	.word	0x0000b0fd
    bb64:	00002001 	.word	0x00002001
    bb68:	0000a481 	.word	0x0000a481
    bb6c:	0000ba7d 	.word	0x0000ba7d

0000bb70 <_mqtt_recv_handler>:
    bb70:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb72:	1c04      	adds	r4, r0, #0
    bb74:	6e40      	ldr	r0, [r0, #100]	; 0x64
    bb76:	230f      	movs	r3, #15
    bb78:	7802      	ldrb	r2, [r0, #0]
    bb7a:	b087      	sub	sp, #28
    bb7c:	1c15      	adds	r5, r2, #0
    bb7e:	439d      	bics	r5, r3
    bb80:	2d50      	cmp	r5, #80	; 0x50
    bb82:	d100      	bne.n	bb86 <_mqtt_recv_handler+0x16>
    bb84:	e098      	b.n	bcb8 <_mqtt_recv_handler+0x148>
    bb86:	d808      	bhi.n	bb9a <_mqtt_recv_handler+0x2a>
    bb88:	2d30      	cmp	r5, #48	; 0x30
    bb8a:	d03f      	beq.n	bc0c <_mqtt_recv_handler+0x9c>
    bb8c:	2d40      	cmp	r5, #64	; 0x40
    bb8e:	d100      	bne.n	bb92 <_mqtt_recv_handler+0x22>
    bb90:	e0b3      	b.n	bcfa <_mqtt_recv_handler+0x18a>
    bb92:	2d20      	cmp	r5, #32
    bb94:	d000      	beq.n	bb98 <_mqtt_recv_handler+0x28>
    bb96:	e0c3      	b.n	bd20 <_mqtt_recv_handler+0x1b0>
    bb98:	e00e      	b.n	bbb8 <_mqtt_recv_handler+0x48>
    bb9a:	2d70      	cmp	r5, #112	; 0x70
    bb9c:	d100      	bne.n	bba0 <_mqtt_recv_handler+0x30>
    bb9e:	e0ac      	b.n	bcfa <_mqtt_recv_handler+0x18a>
    bba0:	d803      	bhi.n	bbaa <_mqtt_recv_handler+0x3a>
    bba2:	2d60      	cmp	r5, #96	; 0x60
    bba4:	d100      	bne.n	bba8 <_mqtt_recv_handler+0x38>
    bba6:	e096      	b.n	bcd6 <_mqtt_recv_handler+0x166>
    bba8:	e0ba      	b.n	bd20 <_mqtt_recv_handler+0x1b0>
    bbaa:	2d90      	cmp	r5, #144	; 0x90
    bbac:	d100      	bne.n	bbb0 <_mqtt_recv_handler+0x40>
    bbae:	e0aa      	b.n	bd06 <_mqtt_recv_handler+0x196>
    bbb0:	2db0      	cmp	r5, #176	; 0xb0
    bbb2:	d100      	bne.n	bbb6 <_mqtt_recv_handler+0x46>
    bbb4:	e0ad      	b.n	bd12 <_mqtt_recv_handler+0x1a2>
    bbb6:	e0b3      	b.n	bd20 <_mqtt_recv_handler+0x1b0>
    bbb8:	aa01      	add	r2, sp, #4
    bbba:	2303      	movs	r3, #3
    bbbc:	2901      	cmp	r1, #1
    bbbe:	d900      	bls.n	bbc2 <_mqtt_recv_handler+0x52>
    bbc0:	78c3      	ldrb	r3, [r0, #3]
    bbc2:	7013      	strb	r3, [r2, #0]
    bbc4:	7813      	ldrb	r3, [r2, #0]
    bbc6:	2b00      	cmp	r3, #0
    bbc8:	d00d      	beq.n	bbe6 <_mqtt_recv_handler+0x76>
    bbca:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bbcc:	2b00      	cmp	r3, #0
    bbce:	d002      	beq.n	bbd6 <_mqtt_recv_handler+0x66>
    bbd0:	1c20      	adds	r0, r4, #0
    bbd2:	2101      	movs	r1, #1
    bbd4:	4798      	blx	r3
    bbd6:	236f      	movs	r3, #111	; 0x6f
    bbd8:	425b      	negs	r3, r3
    bbda:	64e3      	str	r3, [r4, #76]	; 0x4c
    bbdc:	1c20      	adds	r0, r4, #0
    bbde:	2100      	movs	r1, #0
    bbe0:	4b50      	ldr	r3, [pc, #320]	; (bd24 <_mqtt_recv_handler+0x1b4>)
    bbe2:	4798      	blx	r3
    bbe4:	e09c      	b.n	bd20 <_mqtt_recv_handler+0x1b0>
    bbe6:	1c23      	adds	r3, r4, #0
    bbe8:	3343      	adds	r3, #67	; 0x43
    bbea:	7819      	ldrb	r1, [r3, #0]
    bbec:	0789      	lsls	r1, r1, #30
    bbee:	0fc9      	lsrs	r1, r1, #31
    bbf0:	d105      	bne.n	bbfe <_mqtt_recv_handler+0x8e>
    bbf2:	781a      	ldrb	r2, [r3, #0]
    bbf4:	64e1      	str	r1, [r4, #76]	; 0x4c
    bbf6:	2102      	movs	r1, #2
    bbf8:	430a      	orrs	r2, r1
    bbfa:	701a      	strb	r2, [r3, #0]
    bbfc:	e090      	b.n	bd20 <_mqtt_recv_handler+0x1b0>
    bbfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bc00:	2b00      	cmp	r3, #0
    bc02:	d100      	bne.n	bc06 <_mqtt_recv_handler+0x96>
    bc04:	e08c      	b.n	bd20 <_mqtt_recv_handler+0x1b0>
    bc06:	1c20      	adds	r0, r4, #0
    bc08:	2101      	movs	r1, #1
    bc0a:	e088      	b.n	bd1e <_mqtt_recv_handler+0x1ae>
    bc0c:	ad01      	add	r5, sp, #4
    bc0e:	0713      	lsls	r3, r2, #28
    bc10:	7c2a      	ldrb	r2, [r5, #16]
    bc12:	0fdb      	lsrs	r3, r3, #31
    bc14:	2604      	movs	r6, #4
    bc16:	009b      	lsls	r3, r3, #2
    bc18:	43b2      	bics	r2, r6
    bc1a:	431a      	orrs	r2, r3
    bc1c:	742a      	strb	r2, [r5, #16]
    bc1e:	7807      	ldrb	r7, [r0, #0]
    bc20:	2303      	movs	r3, #3
    bc22:	b2d2      	uxtb	r2, r2
    bc24:	087f      	lsrs	r7, r7, #1
    bc26:	439a      	bics	r2, r3
    bc28:	401f      	ands	r7, r3
    bc2a:	1c13      	adds	r3, r2, #0
    bc2c:	433b      	orrs	r3, r7
    bc2e:	742b      	strb	r3, [r5, #16]
    bc30:	1c43      	adds	r3, r0, #1
    bc32:	7818      	ldrb	r0, [r3, #0]
    bc34:	1c5a      	adds	r2, r3, #1
    bc36:	287f      	cmp	r0, #127	; 0x7f
    bc38:	d901      	bls.n	bc3e <_mqtt_recv_handler+0xce>
    bc3a:	1c13      	adds	r3, r2, #0
    bc3c:	e7f9      	b.n	bc32 <_mqtt_recv_handler+0xc2>
    bc3e:	7858      	ldrb	r0, [r3, #1]
    bc40:	789e      	ldrb	r6, [r3, #2]
    bc42:	0200      	lsls	r0, r0, #8
    bc44:	4330      	orrs	r0, r6
    bc46:	3303      	adds	r3, #3
    bc48:	2600      	movs	r6, #0
    bc4a:	6068      	str	r0, [r5, #4]
    bc4c:	9301      	str	r3, [sp, #4]
    bc4e:	1818      	adds	r0, r3, r0
    bc50:	42b7      	cmp	r7, r6
    bc52:	d004      	beq.n	bc5e <_mqtt_recv_handler+0xee>
    bc54:	7806      	ldrb	r6, [r0, #0]
    bc56:	7843      	ldrb	r3, [r0, #1]
    bc58:	0236      	lsls	r6, r6, #8
    bc5a:	431e      	orrs	r6, r3
    bc5c:	3002      	adds	r0, #2
    bc5e:	1851      	adds	r1, r2, r1
    bc60:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bc62:	60a8      	str	r0, [r5, #8]
    bc64:	1a08      	subs	r0, r1, r0
    bc66:	60e8      	str	r0, [r5, #12]
    bc68:	2b00      	cmp	r3, #0
    bc6a:	d003      	beq.n	bc74 <_mqtt_recv_handler+0x104>
    bc6c:	1c20      	adds	r0, r4, #0
    bc6e:	2106      	movs	r1, #6
    bc70:	1c2a      	adds	r2, r5, #0
    bc72:	4798      	blx	r3
    bc74:	7c2b      	ldrb	r3, [r5, #16]
    bc76:	079b      	lsls	r3, r3, #30
    bc78:	0f9b      	lsrs	r3, r3, #30
    bc7a:	2b01      	cmp	r3, #1
    bc7c:	d10b      	bne.n	bc96 <_mqtt_recv_handler+0x126>
    bc7e:	b2b6      	uxth	r6, r6
    bc80:	1c20      	adds	r0, r4, #0
    bc82:	2140      	movs	r1, #64	; 0x40
    bc84:	1c32      	adds	r2, r6, #0
    bc86:	4b28      	ldr	r3, [pc, #160]	; (bd28 <_mqtt_recv_handler+0x1b8>)
    bc88:	4798      	blx	r3
    bc8a:	2800      	cmp	r0, #0
    bc8c:	d048      	beq.n	bd20 <_mqtt_recv_handler+0x1b0>
    bc8e:	1c23      	adds	r3, r4, #0
    bc90:	3348      	adds	r3, #72	; 0x48
    bc92:	2240      	movs	r2, #64	; 0x40
    bc94:	e00c      	b.n	bcb0 <_mqtt_recv_handler+0x140>
    bc96:	2b02      	cmp	r3, #2
    bc98:	d142      	bne.n	bd20 <_mqtt_recv_handler+0x1b0>
    bc9a:	b2b6      	uxth	r6, r6
    bc9c:	1c20      	adds	r0, r4, #0
    bc9e:	2150      	movs	r1, #80	; 0x50
    bca0:	1c32      	adds	r2, r6, #0
    bca2:	4b21      	ldr	r3, [pc, #132]	; (bd28 <_mqtt_recv_handler+0x1b8>)
    bca4:	4798      	blx	r3
    bca6:	2800      	cmp	r0, #0
    bca8:	d03a      	beq.n	bd20 <_mqtt_recv_handler+0x1b0>
    bcaa:	1c23      	adds	r3, r4, #0
    bcac:	3348      	adds	r3, #72	; 0x48
    bcae:	2250      	movs	r2, #80	; 0x50
    bcb0:	344a      	adds	r4, #74	; 0x4a
    bcb2:	701a      	strb	r2, [r3, #0]
    bcb4:	8026      	strh	r6, [r4, #0]
    bcb6:	e033      	b.n	bd20 <_mqtt_recv_handler+0x1b0>
    bcb8:	7885      	ldrb	r5, [r0, #2]
    bcba:	78c3      	ldrb	r3, [r0, #3]
    bcbc:	022d      	lsls	r5, r5, #8
    bcbe:	431d      	orrs	r5, r3
    bcc0:	1c20      	adds	r0, r4, #0
    bcc2:	2162      	movs	r1, #98	; 0x62
    bcc4:	1c2a      	adds	r2, r5, #0
    bcc6:	4b18      	ldr	r3, [pc, #96]	; (bd28 <_mqtt_recv_handler+0x1b8>)
    bcc8:	4798      	blx	r3
    bcca:	2800      	cmp	r0, #0
    bccc:	d028      	beq.n	bd20 <_mqtt_recv_handler+0x1b0>
    bcce:	1c23      	adds	r3, r4, #0
    bcd0:	3348      	adds	r3, #72	; 0x48
    bcd2:	2260      	movs	r2, #96	; 0x60
    bcd4:	e00d      	b.n	bcf2 <_mqtt_recv_handler+0x182>
    bcd6:	7885      	ldrb	r5, [r0, #2]
    bcd8:	78c3      	ldrb	r3, [r0, #3]
    bcda:	022d      	lsls	r5, r5, #8
    bcdc:	431d      	orrs	r5, r3
    bcde:	1c20      	adds	r0, r4, #0
    bce0:	2170      	movs	r1, #112	; 0x70
    bce2:	1c2a      	adds	r2, r5, #0
    bce4:	4b10      	ldr	r3, [pc, #64]	; (bd28 <_mqtt_recv_handler+0x1b8>)
    bce6:	4798      	blx	r3
    bce8:	2800      	cmp	r0, #0
    bcea:	d019      	beq.n	bd20 <_mqtt_recv_handler+0x1b0>
    bcec:	1c23      	adds	r3, r4, #0
    bcee:	3348      	adds	r3, #72	; 0x48
    bcf0:	2270      	movs	r2, #112	; 0x70
    bcf2:	344a      	adds	r4, #74	; 0x4a
    bcf4:	701a      	strb	r2, [r3, #0]
    bcf6:	8025      	strh	r5, [r4, #0]
    bcf8:	e012      	b.n	bd20 <_mqtt_recv_handler+0x1b0>
    bcfa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bcfc:	2b00      	cmp	r3, #0
    bcfe:	d00f      	beq.n	bd20 <_mqtt_recv_handler+0x1b0>
    bd00:	1c20      	adds	r0, r4, #0
    bd02:	2102      	movs	r1, #2
    bd04:	e00a      	b.n	bd1c <_mqtt_recv_handler+0x1ac>
    bd06:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bd08:	2b00      	cmp	r3, #0
    bd0a:	d009      	beq.n	bd20 <_mqtt_recv_handler+0x1b0>
    bd0c:	1c20      	adds	r0, r4, #0
    bd0e:	2103      	movs	r1, #3
    bd10:	e004      	b.n	bd1c <_mqtt_recv_handler+0x1ac>
    bd12:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bd14:	2b00      	cmp	r3, #0
    bd16:	d003      	beq.n	bd20 <_mqtt_recv_handler+0x1b0>
    bd18:	1c20      	adds	r0, r4, #0
    bd1a:	2104      	movs	r1, #4
    bd1c:	aa01      	add	r2, sp, #4
    bd1e:	4798      	blx	r3
    bd20:	b007      	add	sp, #28
    bd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd24:	0000bacd 	.word	0x0000bacd
    bd28:	0000ba19 	.word	0x0000ba19

0000bd2c <mqtt_recv_packet>:
    bd2c:	b538      	push	{r3, r4, r5, lr}
    bd2e:	1e04      	subs	r4, r0, #0
    bd30:	d017      	beq.n	bd62 <mqtt_recv_packet+0x36>
    bd32:	6c42      	ldr	r2, [r0, #68]	; 0x44
    bd34:	6e83      	ldr	r3, [r0, #104]	; 0x68
    bd36:	429a      	cmp	r2, r3
    bd38:	d906      	bls.n	bd48 <mqtt_recv_packet+0x1c>
    bd3a:	238b      	movs	r3, #139	; 0x8b
    bd3c:	425b      	negs	r3, r3
    bd3e:	64c3      	str	r3, [r0, #76]	; 0x4c
    bd40:	2100      	movs	r1, #0
    bd42:	4b08      	ldr	r3, [pc, #32]	; (bd64 <mqtt_recv_packet+0x38>)
    bd44:	4798      	blx	r3
    bd46:	e00c      	b.n	bd62 <mqtt_recv_packet+0x36>
    bd48:	6c62      	ldr	r2, [r4, #68]	; 0x44
    bd4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    bd4c:	2002      	movs	r0, #2
    bd4e:	1899      	adds	r1, r3, r2
    bd50:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    bd52:	5620      	ldrsb	r0, [r4, r0]
    bd54:	1a9a      	subs	r2, r3, r2
    bd56:	b292      	uxth	r2, r2
    bd58:	2300      	movs	r3, #0
    bd5a:	4d03      	ldr	r5, [pc, #12]	; (bd68 <mqtt_recv_packet+0x3c>)
    bd5c:	47a8      	blx	r5
    bd5e:	2800      	cmp	r0, #0
    bd60:	d1f2      	bne.n	bd48 <mqtt_recv_packet+0x1c>
    bd62:	bd38      	pop	{r3, r4, r5, pc}
    bd64:	0000bacd 	.word	0x0000bacd
    bd68:	00005519 	.word	0x00005519

0000bd6c <mqtt_recved_packet>:
    bd6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bd6e:	1e04      	subs	r4, r0, #0
    bd70:	d042      	beq.n	bdf8 <mqtt_recved_packet+0x8c>
    bd72:	6c63      	ldr	r3, [r4, #68]	; 0x44
    bd74:	6e67      	ldr	r7, [r4, #100]	; 0x64
    bd76:	18ca      	adds	r2, r1, r3
    bd78:	2301      	movs	r3, #1
    bd7a:	9701      	str	r7, [sp, #4]
    bd7c:	6462      	str	r2, [r4, #68]	; 0x44
    bd7e:	2600      	movs	r6, #0
    bd80:	1c1d      	adds	r5, r3, #0
    bd82:	42a9      	cmp	r1, r5
    bd84:	dc03      	bgt.n	bd8e <mqtt_recved_packet+0x22>
    bd86:	1c20      	adds	r0, r4, #0
    bd88:	4b1c      	ldr	r3, [pc, #112]	; (bdfc <mqtt_recved_packet+0x90>)
    bd8a:	4798      	blx	r3
    bd8c:	e034      	b.n	bdf8 <mqtt_recved_packet+0x8c>
    bd8e:	9f01      	ldr	r7, [sp, #4]
    bd90:	5d78      	ldrb	r0, [r7, r5]
    bd92:	01df      	lsls	r7, r3, #7
    bd94:	46bc      	mov	ip, r7
    bd96:	2d03      	cmp	r5, #3
    bd98:	d101      	bne.n	bd9e <mqtt_recved_packet+0x32>
    bd9a:	234d      	movs	r3, #77	; 0x4d
    bd9c:	e00e      	b.n	bdbc <mqtt_recved_packet+0x50>
    bd9e:	277f      	movs	r7, #127	; 0x7f
    bda0:	4007      	ands	r7, r0
    bda2:	437b      	muls	r3, r7
    bda4:	b240      	sxtb	r0, r0
    bda6:	3501      	adds	r5, #1
    bda8:	18f6      	adds	r6, r6, r3
    bdaa:	2800      	cmp	r0, #0
    bdac:	da01      	bge.n	bdb2 <mqtt_recved_packet+0x46>
    bdae:	4663      	mov	r3, ip
    bdb0:	e7e7      	b.n	bd82 <mqtt_recved_packet+0x16>
    bdb2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    bdb4:	19af      	adds	r7, r5, r6
    bdb6:	429f      	cmp	r7, r3
    bdb8:	d907      	bls.n	bdca <mqtt_recved_packet+0x5e>
    bdba:	238b      	movs	r3, #139	; 0x8b
    bdbc:	425b      	negs	r3, r3
    bdbe:	64e3      	str	r3, [r4, #76]	; 0x4c
    bdc0:	1c20      	adds	r0, r4, #0
    bdc2:	2100      	movs	r1, #0
    bdc4:	4b0e      	ldr	r3, [pc, #56]	; (be00 <mqtt_recved_packet+0x94>)
    bdc6:	4798      	blx	r3
    bdc8:	e016      	b.n	bdf8 <mqtt_recved_packet+0x8c>
    bdca:	42ba      	cmp	r2, r7
    bdcc:	d314      	bcc.n	bdf8 <mqtt_recved_packet+0x8c>
    bdce:	4b0d      	ldr	r3, [pc, #52]	; (be04 <mqtt_recved_packet+0x98>)
    bdd0:	1c20      	adds	r0, r4, #0
    bdd2:	1c31      	adds	r1, r6, #0
    bdd4:	4798      	blx	r3
    bdd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    bdd8:	42bb      	cmp	r3, r7
    bdda:	d102      	bne.n	bde2 <mqtt_recved_packet+0x76>
    bddc:	2300      	movs	r3, #0
    bdde:	6463      	str	r3, [r4, #68]	; 0x44
    bde0:	e00a      	b.n	bdf8 <mqtt_recved_packet+0x8c>
    bde2:	1b9e      	subs	r6, r3, r6
    bde4:	9b01      	ldr	r3, [sp, #4]
    bde6:	1b75      	subs	r5, r6, r5
    bde8:	19d9      	adds	r1, r3, r7
    bdea:	1c18      	adds	r0, r3, #0
    bdec:	1c2a      	adds	r2, r5, #0
    bdee:	4b06      	ldr	r3, [pc, #24]	; (be08 <mqtt_recved_packet+0x9c>)
    bdf0:	4798      	blx	r3
    bdf2:	6465      	str	r5, [r4, #68]	; 0x44
    bdf4:	2100      	movs	r1, #0
    bdf6:	e7bc      	b.n	bd72 <mqtt_recved_packet+0x6>
    bdf8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    bdfa:	46c0      	nop			; (mov r8, r8)
    bdfc:	0000bd2d 	.word	0x0000bd2d
    be00:	0000bacd 	.word	0x0000bacd
    be04:	0000bb71 	.word	0x0000bb71
    be08:	0000c2cf 	.word	0x0000c2cf

0000be0c <mqtt_socket_event_handler>:
    be0c:	b570      	push	{r4, r5, r6, lr}
    be0e:	4d37      	ldr	r5, [pc, #220]	; (beec <mqtt_socket_event_handler+0xe0>)
    be10:	0086      	lsls	r6, r0, #2
    be12:	5974      	ldr	r4, [r6, r5]
    be14:	b086      	sub	sp, #24
    be16:	2c00      	cmp	r4, #0
    be18:	d066      	beq.n	bee8 <mqtt_socket_event_handler+0xdc>
    be1a:	2906      	cmp	r1, #6
    be1c:	d02b      	beq.n	be76 <mqtt_socket_event_handler+0x6a>
    be1e:	2907      	cmp	r1, #7
    be20:	d039      	beq.n	be96 <mqtt_socket_event_handler+0x8a>
    be22:	2905      	cmp	r1, #5
    be24:	d160      	bne.n	bee8 <mqtt_socket_event_handler+0xdc>
    be26:	2001      	movs	r0, #1
    be28:	5610      	ldrsb	r0, [r2, r0]
    be2a:	4b31      	ldr	r3, [pc, #196]	; (bef0 <mqtt_socket_event_handler+0xe4>)
    be2c:	4798      	blx	r3
    be2e:	9001      	str	r0, [sp, #4]
    be30:	2800      	cmp	r0, #0
    be32:	da06      	bge.n	be42 <mqtt_socket_event_handler+0x36>
    be34:	2002      	movs	r0, #2
    be36:	4b2f      	ldr	r3, [pc, #188]	; (bef4 <mqtt_socket_event_handler+0xe8>)
    be38:	5620      	ldrsb	r0, [r4, r0]
    be3a:	4798      	blx	r3
    be3c:	2300      	movs	r3, #0
    be3e:	5173      	str	r3, [r6, r5]
    be40:	e011      	b.n	be66 <mqtt_socket_event_handler+0x5a>
    be42:	1c23      	adds	r3, r4, #0
    be44:	3343      	adds	r3, #67	; 0x43
    be46:	781a      	ldrb	r2, [r3, #0]
    be48:	2101      	movs	r1, #1
    be4a:	430a      	orrs	r2, r1
    be4c:	701a      	strb	r2, [r3, #0]
    be4e:	331d      	adds	r3, #29
    be50:	881b      	ldrh	r3, [r3, #0]
    be52:	2b00      	cmp	r3, #0
    be54:	d004      	beq.n	be60 <mqtt_socket_event_handler+0x54>
    be56:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    be58:	6d21      	ldr	r1, [r4, #80]	; 0x50
    be5a:	2200      	movs	r2, #0
    be5c:	4b26      	ldr	r3, [pc, #152]	; (bef8 <mqtt_socket_event_handler+0xec>)
    be5e:	4798      	blx	r3
    be60:	1c20      	adds	r0, r4, #0
    be62:	4b26      	ldr	r3, [pc, #152]	; (befc <mqtt_socket_event_handler+0xf0>)
    be64:	4798      	blx	r3
    be66:	6d63      	ldr	r3, [r4, #84]	; 0x54
    be68:	2b00      	cmp	r3, #0
    be6a:	d03d      	beq.n	bee8 <mqtt_socket_event_handler+0xdc>
    be6c:	1c20      	adds	r0, r4, #0
    be6e:	2100      	movs	r1, #0
    be70:	aa01      	add	r2, sp, #4
    be72:	4798      	blx	r3
    be74:	e038      	b.n	bee8 <mqtt_socket_event_handler+0xdc>
    be76:	2304      	movs	r3, #4
    be78:	5ed1      	ldrsh	r1, [r2, r3]
    be7a:	2900      	cmp	r1, #0
    be7c:	dd03      	ble.n	be86 <mqtt_socket_event_handler+0x7a>
    be7e:	1c20      	adds	r0, r4, #0
    be80:	4b1f      	ldr	r3, [pc, #124]	; (bf00 <mqtt_socket_event_handler+0xf4>)
    be82:	4798      	blx	r3
    be84:	e003      	b.n	be8e <mqtt_socket_event_handler+0x82>
    be86:	1c0b      	adds	r3, r1, #0
    be88:	1c08      	adds	r0, r1, #0
    be8a:	330d      	adds	r3, #13
    be8c:	d11a      	bne.n	bec4 <mqtt_socket_event_handler+0xb8>
    be8e:	4b1b      	ldr	r3, [pc, #108]	; (befc <mqtt_socket_event_handler+0xf0>)
    be90:	1c20      	adds	r0, r4, #0
    be92:	4798      	blx	r3
    be94:	e028      	b.n	bee8 <mqtt_socket_event_handler+0xdc>
    be96:	1c23      	adds	r3, r4, #0
    be98:	3343      	adds	r3, #67	; 0x43
    be9a:	8810      	ldrh	r0, [r2, #0]
    be9c:	781a      	ldrb	r2, [r3, #0]
    be9e:	0751      	lsls	r1, r2, #29
    bea0:	d402      	bmi.n	bea8 <mqtt_socket_event_handler+0x9c>
    bea2:	2108      	movs	r1, #8
    bea4:	438a      	bics	r2, r1
    bea6:	701a      	strb	r2, [r3, #0]
    bea8:	781a      	ldrb	r2, [r3, #0]
    beaa:	2104      	movs	r1, #4
    beac:	438a      	bics	r2, r1
    beae:	701a      	strb	r2, [r3, #0]
    beb0:	06d3      	lsls	r3, r2, #27
    beb2:	0fde      	lsrs	r6, r3, #31
    beb4:	b200      	sxth	r0, r0
    beb6:	2b00      	cmp	r3, #0
    beb8:	db02      	blt.n	bec0 <mqtt_socket_event_handler+0xb4>
    beba:	2800      	cmp	r0, #0
    bebc:	da08      	bge.n	bed0 <mqtt_socket_event_handler+0xc4>
    bebe:	e001      	b.n	bec4 <mqtt_socket_event_handler+0xb8>
    bec0:	2800      	cmp	r0, #0
    bec2:	da02      	bge.n	beca <mqtt_socket_event_handler+0xbe>
    bec4:	4b0a      	ldr	r3, [pc, #40]	; (bef0 <mqtt_socket_event_handler+0xe4>)
    bec6:	4798      	blx	r3
    bec8:	64e0      	str	r0, [r4, #76]	; 0x4c
    beca:	1c20      	adds	r0, r4, #0
    becc:	4b0d      	ldr	r3, [pc, #52]	; (bf04 <mqtt_socket_event_handler+0xf8>)
    bece:	e7e0      	b.n	be92 <mqtt_socket_event_handler+0x86>
    bed0:	1c25      	adds	r5, r4, #0
    bed2:	3548      	adds	r5, #72	; 0x48
    bed4:	7829      	ldrb	r1, [r5, #0]
    bed6:	2900      	cmp	r1, #0
    bed8:	d006      	beq.n	bee8 <mqtt_socket_event_handler+0xdc>
    beda:	1c23      	adds	r3, r4, #0
    bedc:	334a      	adds	r3, #74	; 0x4a
    bede:	881a      	ldrh	r2, [r3, #0]
    bee0:	1c20      	adds	r0, r4, #0
    bee2:	4b09      	ldr	r3, [pc, #36]	; (bf08 <mqtt_socket_event_handler+0xfc>)
    bee4:	4798      	blx	r3
    bee6:	702e      	strb	r6, [r5, #0]
    bee8:	b006      	add	sp, #24
    beea:	bd70      	pop	{r4, r5, r6, pc}
    beec:	200002ac 	.word	0x200002ac
    bef0:	0000b0fd 	.word	0x0000b0fd
    bef4:	00005699 	.word	0x00005699
    bef8:	0000a405 	.word	0x0000a405
    befc:	0000bd2d 	.word	0x0000bd2d
    bf00:	0000bd6d 	.word	0x0000bd6d
    bf04:	0000ba7d 	.word	0x0000ba7d
    bf08:	0000ba19 	.word	0x0000ba19

0000bf0c <__gnu_thumb1_case_uqi>:
    bf0c:	b402      	push	{r1}
    bf0e:	4671      	mov	r1, lr
    bf10:	0849      	lsrs	r1, r1, #1
    bf12:	0049      	lsls	r1, r1, #1
    bf14:	5c09      	ldrb	r1, [r1, r0]
    bf16:	0049      	lsls	r1, r1, #1
    bf18:	448e      	add	lr, r1
    bf1a:	bc02      	pop	{r1}
    bf1c:	4770      	bx	lr
    bf1e:	46c0      	nop			; (mov r8, r8)

0000bf20 <__udivsi3>:
    bf20:	2200      	movs	r2, #0
    bf22:	0843      	lsrs	r3, r0, #1
    bf24:	428b      	cmp	r3, r1
    bf26:	d374      	bcc.n	c012 <__udivsi3+0xf2>
    bf28:	0903      	lsrs	r3, r0, #4
    bf2a:	428b      	cmp	r3, r1
    bf2c:	d35f      	bcc.n	bfee <__udivsi3+0xce>
    bf2e:	0a03      	lsrs	r3, r0, #8
    bf30:	428b      	cmp	r3, r1
    bf32:	d344      	bcc.n	bfbe <__udivsi3+0x9e>
    bf34:	0b03      	lsrs	r3, r0, #12
    bf36:	428b      	cmp	r3, r1
    bf38:	d328      	bcc.n	bf8c <__udivsi3+0x6c>
    bf3a:	0c03      	lsrs	r3, r0, #16
    bf3c:	428b      	cmp	r3, r1
    bf3e:	d30d      	bcc.n	bf5c <__udivsi3+0x3c>
    bf40:	22ff      	movs	r2, #255	; 0xff
    bf42:	0209      	lsls	r1, r1, #8
    bf44:	ba12      	rev	r2, r2
    bf46:	0c03      	lsrs	r3, r0, #16
    bf48:	428b      	cmp	r3, r1
    bf4a:	d302      	bcc.n	bf52 <__udivsi3+0x32>
    bf4c:	1212      	asrs	r2, r2, #8
    bf4e:	0209      	lsls	r1, r1, #8
    bf50:	d065      	beq.n	c01e <__udivsi3+0xfe>
    bf52:	0b03      	lsrs	r3, r0, #12
    bf54:	428b      	cmp	r3, r1
    bf56:	d319      	bcc.n	bf8c <__udivsi3+0x6c>
    bf58:	e000      	b.n	bf5c <__udivsi3+0x3c>
    bf5a:	0a09      	lsrs	r1, r1, #8
    bf5c:	0bc3      	lsrs	r3, r0, #15
    bf5e:	428b      	cmp	r3, r1
    bf60:	d301      	bcc.n	bf66 <__udivsi3+0x46>
    bf62:	03cb      	lsls	r3, r1, #15
    bf64:	1ac0      	subs	r0, r0, r3
    bf66:	4152      	adcs	r2, r2
    bf68:	0b83      	lsrs	r3, r0, #14
    bf6a:	428b      	cmp	r3, r1
    bf6c:	d301      	bcc.n	bf72 <__udivsi3+0x52>
    bf6e:	038b      	lsls	r3, r1, #14
    bf70:	1ac0      	subs	r0, r0, r3
    bf72:	4152      	adcs	r2, r2
    bf74:	0b43      	lsrs	r3, r0, #13
    bf76:	428b      	cmp	r3, r1
    bf78:	d301      	bcc.n	bf7e <__udivsi3+0x5e>
    bf7a:	034b      	lsls	r3, r1, #13
    bf7c:	1ac0      	subs	r0, r0, r3
    bf7e:	4152      	adcs	r2, r2
    bf80:	0b03      	lsrs	r3, r0, #12
    bf82:	428b      	cmp	r3, r1
    bf84:	d301      	bcc.n	bf8a <__udivsi3+0x6a>
    bf86:	030b      	lsls	r3, r1, #12
    bf88:	1ac0      	subs	r0, r0, r3
    bf8a:	4152      	adcs	r2, r2
    bf8c:	0ac3      	lsrs	r3, r0, #11
    bf8e:	428b      	cmp	r3, r1
    bf90:	d301      	bcc.n	bf96 <__udivsi3+0x76>
    bf92:	02cb      	lsls	r3, r1, #11
    bf94:	1ac0      	subs	r0, r0, r3
    bf96:	4152      	adcs	r2, r2
    bf98:	0a83      	lsrs	r3, r0, #10
    bf9a:	428b      	cmp	r3, r1
    bf9c:	d301      	bcc.n	bfa2 <__udivsi3+0x82>
    bf9e:	028b      	lsls	r3, r1, #10
    bfa0:	1ac0      	subs	r0, r0, r3
    bfa2:	4152      	adcs	r2, r2
    bfa4:	0a43      	lsrs	r3, r0, #9
    bfa6:	428b      	cmp	r3, r1
    bfa8:	d301      	bcc.n	bfae <__udivsi3+0x8e>
    bfaa:	024b      	lsls	r3, r1, #9
    bfac:	1ac0      	subs	r0, r0, r3
    bfae:	4152      	adcs	r2, r2
    bfb0:	0a03      	lsrs	r3, r0, #8
    bfb2:	428b      	cmp	r3, r1
    bfb4:	d301      	bcc.n	bfba <__udivsi3+0x9a>
    bfb6:	020b      	lsls	r3, r1, #8
    bfb8:	1ac0      	subs	r0, r0, r3
    bfba:	4152      	adcs	r2, r2
    bfbc:	d2cd      	bcs.n	bf5a <__udivsi3+0x3a>
    bfbe:	09c3      	lsrs	r3, r0, #7
    bfc0:	428b      	cmp	r3, r1
    bfc2:	d301      	bcc.n	bfc8 <__udivsi3+0xa8>
    bfc4:	01cb      	lsls	r3, r1, #7
    bfc6:	1ac0      	subs	r0, r0, r3
    bfc8:	4152      	adcs	r2, r2
    bfca:	0983      	lsrs	r3, r0, #6
    bfcc:	428b      	cmp	r3, r1
    bfce:	d301      	bcc.n	bfd4 <__udivsi3+0xb4>
    bfd0:	018b      	lsls	r3, r1, #6
    bfd2:	1ac0      	subs	r0, r0, r3
    bfd4:	4152      	adcs	r2, r2
    bfd6:	0943      	lsrs	r3, r0, #5
    bfd8:	428b      	cmp	r3, r1
    bfda:	d301      	bcc.n	bfe0 <__udivsi3+0xc0>
    bfdc:	014b      	lsls	r3, r1, #5
    bfde:	1ac0      	subs	r0, r0, r3
    bfe0:	4152      	adcs	r2, r2
    bfe2:	0903      	lsrs	r3, r0, #4
    bfe4:	428b      	cmp	r3, r1
    bfe6:	d301      	bcc.n	bfec <__udivsi3+0xcc>
    bfe8:	010b      	lsls	r3, r1, #4
    bfea:	1ac0      	subs	r0, r0, r3
    bfec:	4152      	adcs	r2, r2
    bfee:	08c3      	lsrs	r3, r0, #3
    bff0:	428b      	cmp	r3, r1
    bff2:	d301      	bcc.n	bff8 <__udivsi3+0xd8>
    bff4:	00cb      	lsls	r3, r1, #3
    bff6:	1ac0      	subs	r0, r0, r3
    bff8:	4152      	adcs	r2, r2
    bffa:	0883      	lsrs	r3, r0, #2
    bffc:	428b      	cmp	r3, r1
    bffe:	d301      	bcc.n	c004 <__udivsi3+0xe4>
    c000:	008b      	lsls	r3, r1, #2
    c002:	1ac0      	subs	r0, r0, r3
    c004:	4152      	adcs	r2, r2
    c006:	0843      	lsrs	r3, r0, #1
    c008:	428b      	cmp	r3, r1
    c00a:	d301      	bcc.n	c010 <__udivsi3+0xf0>
    c00c:	004b      	lsls	r3, r1, #1
    c00e:	1ac0      	subs	r0, r0, r3
    c010:	4152      	adcs	r2, r2
    c012:	1a41      	subs	r1, r0, r1
    c014:	d200      	bcs.n	c018 <__udivsi3+0xf8>
    c016:	4601      	mov	r1, r0
    c018:	4152      	adcs	r2, r2
    c01a:	4610      	mov	r0, r2
    c01c:	4770      	bx	lr
    c01e:	e7ff      	b.n	c020 <__udivsi3+0x100>
    c020:	b501      	push	{r0, lr}
    c022:	2000      	movs	r0, #0
    c024:	f000 f8f0 	bl	c208 <__aeabi_idiv0>
    c028:	bd02      	pop	{r1, pc}
    c02a:	46c0      	nop			; (mov r8, r8)

0000c02c <__aeabi_uidivmod>:
    c02c:	2900      	cmp	r1, #0
    c02e:	d0f7      	beq.n	c020 <__udivsi3+0x100>
    c030:	e776      	b.n	bf20 <__udivsi3>
    c032:	4770      	bx	lr

0000c034 <__divsi3>:
    c034:	4603      	mov	r3, r0
    c036:	430b      	orrs	r3, r1
    c038:	d47f      	bmi.n	c13a <__divsi3+0x106>
    c03a:	2200      	movs	r2, #0
    c03c:	0843      	lsrs	r3, r0, #1
    c03e:	428b      	cmp	r3, r1
    c040:	d374      	bcc.n	c12c <__divsi3+0xf8>
    c042:	0903      	lsrs	r3, r0, #4
    c044:	428b      	cmp	r3, r1
    c046:	d35f      	bcc.n	c108 <__divsi3+0xd4>
    c048:	0a03      	lsrs	r3, r0, #8
    c04a:	428b      	cmp	r3, r1
    c04c:	d344      	bcc.n	c0d8 <__divsi3+0xa4>
    c04e:	0b03      	lsrs	r3, r0, #12
    c050:	428b      	cmp	r3, r1
    c052:	d328      	bcc.n	c0a6 <__divsi3+0x72>
    c054:	0c03      	lsrs	r3, r0, #16
    c056:	428b      	cmp	r3, r1
    c058:	d30d      	bcc.n	c076 <__divsi3+0x42>
    c05a:	22ff      	movs	r2, #255	; 0xff
    c05c:	0209      	lsls	r1, r1, #8
    c05e:	ba12      	rev	r2, r2
    c060:	0c03      	lsrs	r3, r0, #16
    c062:	428b      	cmp	r3, r1
    c064:	d302      	bcc.n	c06c <__divsi3+0x38>
    c066:	1212      	asrs	r2, r2, #8
    c068:	0209      	lsls	r1, r1, #8
    c06a:	d065      	beq.n	c138 <__divsi3+0x104>
    c06c:	0b03      	lsrs	r3, r0, #12
    c06e:	428b      	cmp	r3, r1
    c070:	d319      	bcc.n	c0a6 <__divsi3+0x72>
    c072:	e000      	b.n	c076 <__divsi3+0x42>
    c074:	0a09      	lsrs	r1, r1, #8
    c076:	0bc3      	lsrs	r3, r0, #15
    c078:	428b      	cmp	r3, r1
    c07a:	d301      	bcc.n	c080 <__divsi3+0x4c>
    c07c:	03cb      	lsls	r3, r1, #15
    c07e:	1ac0      	subs	r0, r0, r3
    c080:	4152      	adcs	r2, r2
    c082:	0b83      	lsrs	r3, r0, #14
    c084:	428b      	cmp	r3, r1
    c086:	d301      	bcc.n	c08c <__divsi3+0x58>
    c088:	038b      	lsls	r3, r1, #14
    c08a:	1ac0      	subs	r0, r0, r3
    c08c:	4152      	adcs	r2, r2
    c08e:	0b43      	lsrs	r3, r0, #13
    c090:	428b      	cmp	r3, r1
    c092:	d301      	bcc.n	c098 <__divsi3+0x64>
    c094:	034b      	lsls	r3, r1, #13
    c096:	1ac0      	subs	r0, r0, r3
    c098:	4152      	adcs	r2, r2
    c09a:	0b03      	lsrs	r3, r0, #12
    c09c:	428b      	cmp	r3, r1
    c09e:	d301      	bcc.n	c0a4 <__divsi3+0x70>
    c0a0:	030b      	lsls	r3, r1, #12
    c0a2:	1ac0      	subs	r0, r0, r3
    c0a4:	4152      	adcs	r2, r2
    c0a6:	0ac3      	lsrs	r3, r0, #11
    c0a8:	428b      	cmp	r3, r1
    c0aa:	d301      	bcc.n	c0b0 <__divsi3+0x7c>
    c0ac:	02cb      	lsls	r3, r1, #11
    c0ae:	1ac0      	subs	r0, r0, r3
    c0b0:	4152      	adcs	r2, r2
    c0b2:	0a83      	lsrs	r3, r0, #10
    c0b4:	428b      	cmp	r3, r1
    c0b6:	d301      	bcc.n	c0bc <__divsi3+0x88>
    c0b8:	028b      	lsls	r3, r1, #10
    c0ba:	1ac0      	subs	r0, r0, r3
    c0bc:	4152      	adcs	r2, r2
    c0be:	0a43      	lsrs	r3, r0, #9
    c0c0:	428b      	cmp	r3, r1
    c0c2:	d301      	bcc.n	c0c8 <__divsi3+0x94>
    c0c4:	024b      	lsls	r3, r1, #9
    c0c6:	1ac0      	subs	r0, r0, r3
    c0c8:	4152      	adcs	r2, r2
    c0ca:	0a03      	lsrs	r3, r0, #8
    c0cc:	428b      	cmp	r3, r1
    c0ce:	d301      	bcc.n	c0d4 <__divsi3+0xa0>
    c0d0:	020b      	lsls	r3, r1, #8
    c0d2:	1ac0      	subs	r0, r0, r3
    c0d4:	4152      	adcs	r2, r2
    c0d6:	d2cd      	bcs.n	c074 <__divsi3+0x40>
    c0d8:	09c3      	lsrs	r3, r0, #7
    c0da:	428b      	cmp	r3, r1
    c0dc:	d301      	bcc.n	c0e2 <__divsi3+0xae>
    c0de:	01cb      	lsls	r3, r1, #7
    c0e0:	1ac0      	subs	r0, r0, r3
    c0e2:	4152      	adcs	r2, r2
    c0e4:	0983      	lsrs	r3, r0, #6
    c0e6:	428b      	cmp	r3, r1
    c0e8:	d301      	bcc.n	c0ee <__divsi3+0xba>
    c0ea:	018b      	lsls	r3, r1, #6
    c0ec:	1ac0      	subs	r0, r0, r3
    c0ee:	4152      	adcs	r2, r2
    c0f0:	0943      	lsrs	r3, r0, #5
    c0f2:	428b      	cmp	r3, r1
    c0f4:	d301      	bcc.n	c0fa <__divsi3+0xc6>
    c0f6:	014b      	lsls	r3, r1, #5
    c0f8:	1ac0      	subs	r0, r0, r3
    c0fa:	4152      	adcs	r2, r2
    c0fc:	0903      	lsrs	r3, r0, #4
    c0fe:	428b      	cmp	r3, r1
    c100:	d301      	bcc.n	c106 <__divsi3+0xd2>
    c102:	010b      	lsls	r3, r1, #4
    c104:	1ac0      	subs	r0, r0, r3
    c106:	4152      	adcs	r2, r2
    c108:	08c3      	lsrs	r3, r0, #3
    c10a:	428b      	cmp	r3, r1
    c10c:	d301      	bcc.n	c112 <__divsi3+0xde>
    c10e:	00cb      	lsls	r3, r1, #3
    c110:	1ac0      	subs	r0, r0, r3
    c112:	4152      	adcs	r2, r2
    c114:	0883      	lsrs	r3, r0, #2
    c116:	428b      	cmp	r3, r1
    c118:	d301      	bcc.n	c11e <__divsi3+0xea>
    c11a:	008b      	lsls	r3, r1, #2
    c11c:	1ac0      	subs	r0, r0, r3
    c11e:	4152      	adcs	r2, r2
    c120:	0843      	lsrs	r3, r0, #1
    c122:	428b      	cmp	r3, r1
    c124:	d301      	bcc.n	c12a <__divsi3+0xf6>
    c126:	004b      	lsls	r3, r1, #1
    c128:	1ac0      	subs	r0, r0, r3
    c12a:	4152      	adcs	r2, r2
    c12c:	1a41      	subs	r1, r0, r1
    c12e:	d200      	bcs.n	c132 <__divsi3+0xfe>
    c130:	4601      	mov	r1, r0
    c132:	4152      	adcs	r2, r2
    c134:	4610      	mov	r0, r2
    c136:	4770      	bx	lr
    c138:	e05d      	b.n	c1f6 <__divsi3+0x1c2>
    c13a:	0fca      	lsrs	r2, r1, #31
    c13c:	d000      	beq.n	c140 <__divsi3+0x10c>
    c13e:	4249      	negs	r1, r1
    c140:	1003      	asrs	r3, r0, #32
    c142:	d300      	bcc.n	c146 <__divsi3+0x112>
    c144:	4240      	negs	r0, r0
    c146:	4053      	eors	r3, r2
    c148:	2200      	movs	r2, #0
    c14a:	469c      	mov	ip, r3
    c14c:	0903      	lsrs	r3, r0, #4
    c14e:	428b      	cmp	r3, r1
    c150:	d32d      	bcc.n	c1ae <__divsi3+0x17a>
    c152:	0a03      	lsrs	r3, r0, #8
    c154:	428b      	cmp	r3, r1
    c156:	d312      	bcc.n	c17e <__divsi3+0x14a>
    c158:	22fc      	movs	r2, #252	; 0xfc
    c15a:	0189      	lsls	r1, r1, #6
    c15c:	ba12      	rev	r2, r2
    c15e:	0a03      	lsrs	r3, r0, #8
    c160:	428b      	cmp	r3, r1
    c162:	d30c      	bcc.n	c17e <__divsi3+0x14a>
    c164:	0189      	lsls	r1, r1, #6
    c166:	1192      	asrs	r2, r2, #6
    c168:	428b      	cmp	r3, r1
    c16a:	d308      	bcc.n	c17e <__divsi3+0x14a>
    c16c:	0189      	lsls	r1, r1, #6
    c16e:	1192      	asrs	r2, r2, #6
    c170:	428b      	cmp	r3, r1
    c172:	d304      	bcc.n	c17e <__divsi3+0x14a>
    c174:	0189      	lsls	r1, r1, #6
    c176:	d03a      	beq.n	c1ee <__divsi3+0x1ba>
    c178:	1192      	asrs	r2, r2, #6
    c17a:	e000      	b.n	c17e <__divsi3+0x14a>
    c17c:	0989      	lsrs	r1, r1, #6
    c17e:	09c3      	lsrs	r3, r0, #7
    c180:	428b      	cmp	r3, r1
    c182:	d301      	bcc.n	c188 <__divsi3+0x154>
    c184:	01cb      	lsls	r3, r1, #7
    c186:	1ac0      	subs	r0, r0, r3
    c188:	4152      	adcs	r2, r2
    c18a:	0983      	lsrs	r3, r0, #6
    c18c:	428b      	cmp	r3, r1
    c18e:	d301      	bcc.n	c194 <__divsi3+0x160>
    c190:	018b      	lsls	r3, r1, #6
    c192:	1ac0      	subs	r0, r0, r3
    c194:	4152      	adcs	r2, r2
    c196:	0943      	lsrs	r3, r0, #5
    c198:	428b      	cmp	r3, r1
    c19a:	d301      	bcc.n	c1a0 <__divsi3+0x16c>
    c19c:	014b      	lsls	r3, r1, #5
    c19e:	1ac0      	subs	r0, r0, r3
    c1a0:	4152      	adcs	r2, r2
    c1a2:	0903      	lsrs	r3, r0, #4
    c1a4:	428b      	cmp	r3, r1
    c1a6:	d301      	bcc.n	c1ac <__divsi3+0x178>
    c1a8:	010b      	lsls	r3, r1, #4
    c1aa:	1ac0      	subs	r0, r0, r3
    c1ac:	4152      	adcs	r2, r2
    c1ae:	08c3      	lsrs	r3, r0, #3
    c1b0:	428b      	cmp	r3, r1
    c1b2:	d301      	bcc.n	c1b8 <__divsi3+0x184>
    c1b4:	00cb      	lsls	r3, r1, #3
    c1b6:	1ac0      	subs	r0, r0, r3
    c1b8:	4152      	adcs	r2, r2
    c1ba:	0883      	lsrs	r3, r0, #2
    c1bc:	428b      	cmp	r3, r1
    c1be:	d301      	bcc.n	c1c4 <__divsi3+0x190>
    c1c0:	008b      	lsls	r3, r1, #2
    c1c2:	1ac0      	subs	r0, r0, r3
    c1c4:	4152      	adcs	r2, r2
    c1c6:	d2d9      	bcs.n	c17c <__divsi3+0x148>
    c1c8:	0843      	lsrs	r3, r0, #1
    c1ca:	428b      	cmp	r3, r1
    c1cc:	d301      	bcc.n	c1d2 <__divsi3+0x19e>
    c1ce:	004b      	lsls	r3, r1, #1
    c1d0:	1ac0      	subs	r0, r0, r3
    c1d2:	4152      	adcs	r2, r2
    c1d4:	1a41      	subs	r1, r0, r1
    c1d6:	d200      	bcs.n	c1da <__divsi3+0x1a6>
    c1d8:	4601      	mov	r1, r0
    c1da:	4663      	mov	r3, ip
    c1dc:	4152      	adcs	r2, r2
    c1de:	105b      	asrs	r3, r3, #1
    c1e0:	4610      	mov	r0, r2
    c1e2:	d301      	bcc.n	c1e8 <__divsi3+0x1b4>
    c1e4:	4240      	negs	r0, r0
    c1e6:	2b00      	cmp	r3, #0
    c1e8:	d500      	bpl.n	c1ec <__divsi3+0x1b8>
    c1ea:	4249      	negs	r1, r1
    c1ec:	4770      	bx	lr
    c1ee:	4663      	mov	r3, ip
    c1f0:	105b      	asrs	r3, r3, #1
    c1f2:	d300      	bcc.n	c1f6 <__divsi3+0x1c2>
    c1f4:	4240      	negs	r0, r0
    c1f6:	b501      	push	{r0, lr}
    c1f8:	2000      	movs	r0, #0
    c1fa:	f000 f805 	bl	c208 <__aeabi_idiv0>
    c1fe:	bd02      	pop	{r1, pc}

0000c200 <__aeabi_idivmod>:
    c200:	2900      	cmp	r1, #0
    c202:	d0f8      	beq.n	c1f6 <__divsi3+0x1c2>
    c204:	e716      	b.n	c034 <__divsi3>
    c206:	4770      	bx	lr

0000c208 <__aeabi_idiv0>:
    c208:	4770      	bx	lr
    c20a:	46c0      	nop			; (mov r8, r8)

0000c20c <__aeabi_lmul>:
    c20c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c20e:	46ce      	mov	lr, r9
    c210:	4647      	mov	r7, r8
    c212:	0415      	lsls	r5, r2, #16
    c214:	0c2d      	lsrs	r5, r5, #16
    c216:	002e      	movs	r6, r5
    c218:	b580      	push	{r7, lr}
    c21a:	0407      	lsls	r7, r0, #16
    c21c:	0c14      	lsrs	r4, r2, #16
    c21e:	0c3f      	lsrs	r7, r7, #16
    c220:	4699      	mov	r9, r3
    c222:	0c03      	lsrs	r3, r0, #16
    c224:	437e      	muls	r6, r7
    c226:	435d      	muls	r5, r3
    c228:	4367      	muls	r7, r4
    c22a:	4363      	muls	r3, r4
    c22c:	197f      	adds	r7, r7, r5
    c22e:	0c34      	lsrs	r4, r6, #16
    c230:	19e4      	adds	r4, r4, r7
    c232:	469c      	mov	ip, r3
    c234:	42a5      	cmp	r5, r4
    c236:	d903      	bls.n	c240 <__aeabi_lmul+0x34>
    c238:	2380      	movs	r3, #128	; 0x80
    c23a:	025b      	lsls	r3, r3, #9
    c23c:	4698      	mov	r8, r3
    c23e:	44c4      	add	ip, r8
    c240:	464b      	mov	r3, r9
    c242:	4351      	muls	r1, r2
    c244:	4343      	muls	r3, r0
    c246:	0436      	lsls	r6, r6, #16
    c248:	0c36      	lsrs	r6, r6, #16
    c24a:	0c25      	lsrs	r5, r4, #16
    c24c:	0424      	lsls	r4, r4, #16
    c24e:	4465      	add	r5, ip
    c250:	19a4      	adds	r4, r4, r6
    c252:	1859      	adds	r1, r3, r1
    c254:	1949      	adds	r1, r1, r5
    c256:	0020      	movs	r0, r4
    c258:	bc0c      	pop	{r2, r3}
    c25a:	4690      	mov	r8, r2
    c25c:	4699      	mov	r9, r3
    c25e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c260 <__libc_init_array>:
    c260:	b570      	push	{r4, r5, r6, lr}
    c262:	2600      	movs	r6, #0
    c264:	4d0c      	ldr	r5, [pc, #48]	; (c298 <__libc_init_array+0x38>)
    c266:	4c0d      	ldr	r4, [pc, #52]	; (c29c <__libc_init_array+0x3c>)
    c268:	1b64      	subs	r4, r4, r5
    c26a:	10a4      	asrs	r4, r4, #2
    c26c:	42a6      	cmp	r6, r4
    c26e:	d109      	bne.n	c284 <__libc_init_array+0x24>
    c270:	2600      	movs	r6, #0
    c272:	f002 fd25 	bl	ecc0 <_init>
    c276:	4d0a      	ldr	r5, [pc, #40]	; (c2a0 <__libc_init_array+0x40>)
    c278:	4c0a      	ldr	r4, [pc, #40]	; (c2a4 <__libc_init_array+0x44>)
    c27a:	1b64      	subs	r4, r4, r5
    c27c:	10a4      	asrs	r4, r4, #2
    c27e:	42a6      	cmp	r6, r4
    c280:	d105      	bne.n	c28e <__libc_init_array+0x2e>
    c282:	bd70      	pop	{r4, r5, r6, pc}
    c284:	00b3      	lsls	r3, r6, #2
    c286:	58eb      	ldr	r3, [r5, r3]
    c288:	4798      	blx	r3
    c28a:	3601      	adds	r6, #1
    c28c:	e7ee      	b.n	c26c <__libc_init_array+0xc>
    c28e:	00b3      	lsls	r3, r6, #2
    c290:	58eb      	ldr	r3, [r5, r3]
    c292:	4798      	blx	r3
    c294:	3601      	adds	r6, #1
    c296:	e7f2      	b.n	c27e <__libc_init_array+0x1e>
    c298:	0000eccc 	.word	0x0000eccc
    c29c:	0000eccc 	.word	0x0000eccc
    c2a0:	0000eccc 	.word	0x0000eccc
    c2a4:	0000ecd0 	.word	0x0000ecd0

0000c2a8 <malloc>:
    c2a8:	b510      	push	{r4, lr}
    c2aa:	4b03      	ldr	r3, [pc, #12]	; (c2b8 <malloc+0x10>)
    c2ac:	0001      	movs	r1, r0
    c2ae:	6818      	ldr	r0, [r3, #0]
    c2b0:	f000 f872 	bl	c398 <_malloc_r>
    c2b4:	bd10      	pop	{r4, pc}
    c2b6:	46c0      	nop			; (mov r8, r8)
    c2b8:	20000020 	.word	0x20000020

0000c2bc <memcpy>:
    c2bc:	2300      	movs	r3, #0
    c2be:	b510      	push	{r4, lr}
    c2c0:	429a      	cmp	r2, r3
    c2c2:	d100      	bne.n	c2c6 <memcpy+0xa>
    c2c4:	bd10      	pop	{r4, pc}
    c2c6:	5ccc      	ldrb	r4, [r1, r3]
    c2c8:	54c4      	strb	r4, [r0, r3]
    c2ca:	3301      	adds	r3, #1
    c2cc:	e7f8      	b.n	c2c0 <memcpy+0x4>

0000c2ce <memmove>:
    c2ce:	b510      	push	{r4, lr}
    c2d0:	4288      	cmp	r0, r1
    c2d2:	d902      	bls.n	c2da <memmove+0xc>
    c2d4:	188b      	adds	r3, r1, r2
    c2d6:	4298      	cmp	r0, r3
    c2d8:	d308      	bcc.n	c2ec <memmove+0x1e>
    c2da:	2300      	movs	r3, #0
    c2dc:	429a      	cmp	r2, r3
    c2de:	d007      	beq.n	c2f0 <memmove+0x22>
    c2e0:	5ccc      	ldrb	r4, [r1, r3]
    c2e2:	54c4      	strb	r4, [r0, r3]
    c2e4:	3301      	adds	r3, #1
    c2e6:	e7f9      	b.n	c2dc <memmove+0xe>
    c2e8:	5c8b      	ldrb	r3, [r1, r2]
    c2ea:	5483      	strb	r3, [r0, r2]
    c2ec:	3a01      	subs	r2, #1
    c2ee:	d2fb      	bcs.n	c2e8 <memmove+0x1a>
    c2f0:	bd10      	pop	{r4, pc}

0000c2f2 <memset>:
    c2f2:	0003      	movs	r3, r0
    c2f4:	1882      	adds	r2, r0, r2
    c2f6:	4293      	cmp	r3, r2
    c2f8:	d100      	bne.n	c2fc <memset+0xa>
    c2fa:	4770      	bx	lr
    c2fc:	7019      	strb	r1, [r3, #0]
    c2fe:	3301      	adds	r3, #1
    c300:	e7f9      	b.n	c2f6 <memset+0x4>
	...

0000c304 <_free_r>:
    c304:	b570      	push	{r4, r5, r6, lr}
    c306:	0005      	movs	r5, r0
    c308:	2900      	cmp	r1, #0
    c30a:	d010      	beq.n	c32e <_free_r+0x2a>
    c30c:	1f0c      	subs	r4, r1, #4
    c30e:	6823      	ldr	r3, [r4, #0]
    c310:	2b00      	cmp	r3, #0
    c312:	da00      	bge.n	c316 <_free_r+0x12>
    c314:	18e4      	adds	r4, r4, r3
    c316:	0028      	movs	r0, r5
    c318:	f000 fd08 	bl	cd2c <__malloc_lock>
    c31c:	4a1d      	ldr	r2, [pc, #116]	; (c394 <_free_r+0x90>)
    c31e:	6813      	ldr	r3, [r2, #0]
    c320:	2b00      	cmp	r3, #0
    c322:	d105      	bne.n	c330 <_free_r+0x2c>
    c324:	6063      	str	r3, [r4, #4]
    c326:	6014      	str	r4, [r2, #0]
    c328:	0028      	movs	r0, r5
    c32a:	f000 fd00 	bl	cd2e <__malloc_unlock>
    c32e:	bd70      	pop	{r4, r5, r6, pc}
    c330:	42a3      	cmp	r3, r4
    c332:	d909      	bls.n	c348 <_free_r+0x44>
    c334:	6821      	ldr	r1, [r4, #0]
    c336:	1860      	adds	r0, r4, r1
    c338:	4283      	cmp	r3, r0
    c33a:	d1f3      	bne.n	c324 <_free_r+0x20>
    c33c:	6818      	ldr	r0, [r3, #0]
    c33e:	685b      	ldr	r3, [r3, #4]
    c340:	1841      	adds	r1, r0, r1
    c342:	6021      	str	r1, [r4, #0]
    c344:	e7ee      	b.n	c324 <_free_r+0x20>
    c346:	0013      	movs	r3, r2
    c348:	685a      	ldr	r2, [r3, #4]
    c34a:	2a00      	cmp	r2, #0
    c34c:	d001      	beq.n	c352 <_free_r+0x4e>
    c34e:	42a2      	cmp	r2, r4
    c350:	d9f9      	bls.n	c346 <_free_r+0x42>
    c352:	6819      	ldr	r1, [r3, #0]
    c354:	1858      	adds	r0, r3, r1
    c356:	42a0      	cmp	r0, r4
    c358:	d10b      	bne.n	c372 <_free_r+0x6e>
    c35a:	6820      	ldr	r0, [r4, #0]
    c35c:	1809      	adds	r1, r1, r0
    c35e:	1858      	adds	r0, r3, r1
    c360:	6019      	str	r1, [r3, #0]
    c362:	4282      	cmp	r2, r0
    c364:	d1e0      	bne.n	c328 <_free_r+0x24>
    c366:	6810      	ldr	r0, [r2, #0]
    c368:	6852      	ldr	r2, [r2, #4]
    c36a:	1841      	adds	r1, r0, r1
    c36c:	6019      	str	r1, [r3, #0]
    c36e:	605a      	str	r2, [r3, #4]
    c370:	e7da      	b.n	c328 <_free_r+0x24>
    c372:	42a0      	cmp	r0, r4
    c374:	d902      	bls.n	c37c <_free_r+0x78>
    c376:	230c      	movs	r3, #12
    c378:	602b      	str	r3, [r5, #0]
    c37a:	e7d5      	b.n	c328 <_free_r+0x24>
    c37c:	6821      	ldr	r1, [r4, #0]
    c37e:	1860      	adds	r0, r4, r1
    c380:	4282      	cmp	r2, r0
    c382:	d103      	bne.n	c38c <_free_r+0x88>
    c384:	6810      	ldr	r0, [r2, #0]
    c386:	6852      	ldr	r2, [r2, #4]
    c388:	1841      	adds	r1, r0, r1
    c38a:	6021      	str	r1, [r4, #0]
    c38c:	6062      	str	r2, [r4, #4]
    c38e:	605c      	str	r4, [r3, #4]
    c390:	e7ca      	b.n	c328 <_free_r+0x24>
    c392:	46c0      	nop			; (mov r8, r8)
    c394:	200002c8 	.word	0x200002c8

0000c398 <_malloc_r>:
    c398:	2303      	movs	r3, #3
    c39a:	b570      	push	{r4, r5, r6, lr}
    c39c:	1ccd      	adds	r5, r1, #3
    c39e:	439d      	bics	r5, r3
    c3a0:	3508      	adds	r5, #8
    c3a2:	0006      	movs	r6, r0
    c3a4:	2d0c      	cmp	r5, #12
    c3a6:	d21e      	bcs.n	c3e6 <_malloc_r+0x4e>
    c3a8:	250c      	movs	r5, #12
    c3aa:	42a9      	cmp	r1, r5
    c3ac:	d81d      	bhi.n	c3ea <_malloc_r+0x52>
    c3ae:	0030      	movs	r0, r6
    c3b0:	f000 fcbc 	bl	cd2c <__malloc_lock>
    c3b4:	4a25      	ldr	r2, [pc, #148]	; (c44c <_malloc_r+0xb4>)
    c3b6:	6814      	ldr	r4, [r2, #0]
    c3b8:	0021      	movs	r1, r4
    c3ba:	2900      	cmp	r1, #0
    c3bc:	d119      	bne.n	c3f2 <_malloc_r+0x5a>
    c3be:	4c24      	ldr	r4, [pc, #144]	; (c450 <_malloc_r+0xb8>)
    c3c0:	6823      	ldr	r3, [r4, #0]
    c3c2:	2b00      	cmp	r3, #0
    c3c4:	d103      	bne.n	c3ce <_malloc_r+0x36>
    c3c6:	0030      	movs	r0, r6
    c3c8:	f000 f8dc 	bl	c584 <_sbrk_r>
    c3cc:	6020      	str	r0, [r4, #0]
    c3ce:	0029      	movs	r1, r5
    c3d0:	0030      	movs	r0, r6
    c3d2:	f000 f8d7 	bl	c584 <_sbrk_r>
    c3d6:	1c43      	adds	r3, r0, #1
    c3d8:	d12c      	bne.n	c434 <_malloc_r+0x9c>
    c3da:	230c      	movs	r3, #12
    c3dc:	0030      	movs	r0, r6
    c3de:	6033      	str	r3, [r6, #0]
    c3e0:	f000 fca5 	bl	cd2e <__malloc_unlock>
    c3e4:	e003      	b.n	c3ee <_malloc_r+0x56>
    c3e6:	2d00      	cmp	r5, #0
    c3e8:	dadf      	bge.n	c3aa <_malloc_r+0x12>
    c3ea:	230c      	movs	r3, #12
    c3ec:	6033      	str	r3, [r6, #0]
    c3ee:	2000      	movs	r0, #0
    c3f0:	bd70      	pop	{r4, r5, r6, pc}
    c3f2:	680b      	ldr	r3, [r1, #0]
    c3f4:	1b5b      	subs	r3, r3, r5
    c3f6:	d41a      	bmi.n	c42e <_malloc_r+0x96>
    c3f8:	2b0b      	cmp	r3, #11
    c3fa:	d903      	bls.n	c404 <_malloc_r+0x6c>
    c3fc:	600b      	str	r3, [r1, #0]
    c3fe:	18cc      	adds	r4, r1, r3
    c400:	6025      	str	r5, [r4, #0]
    c402:	e003      	b.n	c40c <_malloc_r+0x74>
    c404:	428c      	cmp	r4, r1
    c406:	d10e      	bne.n	c426 <_malloc_r+0x8e>
    c408:	6863      	ldr	r3, [r4, #4]
    c40a:	6013      	str	r3, [r2, #0]
    c40c:	0030      	movs	r0, r6
    c40e:	f000 fc8e 	bl	cd2e <__malloc_unlock>
    c412:	0020      	movs	r0, r4
    c414:	2207      	movs	r2, #7
    c416:	300b      	adds	r0, #11
    c418:	1d23      	adds	r3, r4, #4
    c41a:	4390      	bics	r0, r2
    c41c:	1ac3      	subs	r3, r0, r3
    c41e:	d0e7      	beq.n	c3f0 <_malloc_r+0x58>
    c420:	425a      	negs	r2, r3
    c422:	50e2      	str	r2, [r4, r3]
    c424:	e7e4      	b.n	c3f0 <_malloc_r+0x58>
    c426:	684b      	ldr	r3, [r1, #4]
    c428:	6063      	str	r3, [r4, #4]
    c42a:	000c      	movs	r4, r1
    c42c:	e7ee      	b.n	c40c <_malloc_r+0x74>
    c42e:	000c      	movs	r4, r1
    c430:	6849      	ldr	r1, [r1, #4]
    c432:	e7c2      	b.n	c3ba <_malloc_r+0x22>
    c434:	2303      	movs	r3, #3
    c436:	1cc4      	adds	r4, r0, #3
    c438:	439c      	bics	r4, r3
    c43a:	42a0      	cmp	r0, r4
    c43c:	d0e0      	beq.n	c400 <_malloc_r+0x68>
    c43e:	1a21      	subs	r1, r4, r0
    c440:	0030      	movs	r0, r6
    c442:	f000 f89f 	bl	c584 <_sbrk_r>
    c446:	1c43      	adds	r3, r0, #1
    c448:	d1da      	bne.n	c400 <_malloc_r+0x68>
    c44a:	e7c6      	b.n	c3da <_malloc_r+0x42>
    c44c:	200002c8 	.word	0x200002c8
    c450:	200002cc 	.word	0x200002cc

0000c454 <iprintf>:
    c454:	b40f      	push	{r0, r1, r2, r3}
    c456:	4b0b      	ldr	r3, [pc, #44]	; (c484 <iprintf+0x30>)
    c458:	b513      	push	{r0, r1, r4, lr}
    c45a:	681c      	ldr	r4, [r3, #0]
    c45c:	2c00      	cmp	r4, #0
    c45e:	d005      	beq.n	c46c <iprintf+0x18>
    c460:	69a3      	ldr	r3, [r4, #24]
    c462:	2b00      	cmp	r3, #0
    c464:	d102      	bne.n	c46c <iprintf+0x18>
    c466:	0020      	movs	r0, r4
    c468:	f000 fb64 	bl	cb34 <__sinit>
    c46c:	ab05      	add	r3, sp, #20
    c46e:	9a04      	ldr	r2, [sp, #16]
    c470:	68a1      	ldr	r1, [r4, #8]
    c472:	0020      	movs	r0, r4
    c474:	9301      	str	r3, [sp, #4]
    c476:	f000 fde9 	bl	d04c <_vfiprintf_r>
    c47a:	bc16      	pop	{r1, r2, r4}
    c47c:	bc08      	pop	{r3}
    c47e:	b004      	add	sp, #16
    c480:	4718      	bx	r3
    c482:	46c0      	nop			; (mov r8, r8)
    c484:	20000020 	.word	0x20000020

0000c488 <putchar>:
    c488:	4b08      	ldr	r3, [pc, #32]	; (c4ac <putchar+0x24>)
    c48a:	b570      	push	{r4, r5, r6, lr}
    c48c:	681c      	ldr	r4, [r3, #0]
    c48e:	0005      	movs	r5, r0
    c490:	2c00      	cmp	r4, #0
    c492:	d005      	beq.n	c4a0 <putchar+0x18>
    c494:	69a3      	ldr	r3, [r4, #24]
    c496:	2b00      	cmp	r3, #0
    c498:	d102      	bne.n	c4a0 <putchar+0x18>
    c49a:	0020      	movs	r0, r4
    c49c:	f000 fb4a 	bl	cb34 <__sinit>
    c4a0:	0029      	movs	r1, r5
    c4a2:	68a2      	ldr	r2, [r4, #8]
    c4a4:	0020      	movs	r0, r4
    c4a6:	f001 f875 	bl	d594 <_putc_r>
    c4aa:	bd70      	pop	{r4, r5, r6, pc}
    c4ac:	20000020 	.word	0x20000020

0000c4b0 <_puts_r>:
    c4b0:	b570      	push	{r4, r5, r6, lr}
    c4b2:	0005      	movs	r5, r0
    c4b4:	000e      	movs	r6, r1
    c4b6:	2800      	cmp	r0, #0
    c4b8:	d004      	beq.n	c4c4 <_puts_r+0x14>
    c4ba:	6983      	ldr	r3, [r0, #24]
    c4bc:	2b00      	cmp	r3, #0
    c4be:	d101      	bne.n	c4c4 <_puts_r+0x14>
    c4c0:	f000 fb38 	bl	cb34 <__sinit>
    c4c4:	69ab      	ldr	r3, [r5, #24]
    c4c6:	68ac      	ldr	r4, [r5, #8]
    c4c8:	2b00      	cmp	r3, #0
    c4ca:	d102      	bne.n	c4d2 <_puts_r+0x22>
    c4cc:	0028      	movs	r0, r5
    c4ce:	f000 fb31 	bl	cb34 <__sinit>
    c4d2:	4b24      	ldr	r3, [pc, #144]	; (c564 <_puts_r+0xb4>)
    c4d4:	429c      	cmp	r4, r3
    c4d6:	d10f      	bne.n	c4f8 <_puts_r+0x48>
    c4d8:	686c      	ldr	r4, [r5, #4]
    c4da:	89a3      	ldrh	r3, [r4, #12]
    c4dc:	071b      	lsls	r3, r3, #28
    c4de:	d502      	bpl.n	c4e6 <_puts_r+0x36>
    c4e0:	6923      	ldr	r3, [r4, #16]
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d120      	bne.n	c528 <_puts_r+0x78>
    c4e6:	0021      	movs	r1, r4
    c4e8:	0028      	movs	r0, r5
    c4ea:	f000 f9b5 	bl	c858 <__swsetup_r>
    c4ee:	2800      	cmp	r0, #0
    c4f0:	d01a      	beq.n	c528 <_puts_r+0x78>
    c4f2:	2001      	movs	r0, #1
    c4f4:	4240      	negs	r0, r0
    c4f6:	bd70      	pop	{r4, r5, r6, pc}
    c4f8:	4b1b      	ldr	r3, [pc, #108]	; (c568 <_puts_r+0xb8>)
    c4fa:	429c      	cmp	r4, r3
    c4fc:	d101      	bne.n	c502 <_puts_r+0x52>
    c4fe:	68ac      	ldr	r4, [r5, #8]
    c500:	e7eb      	b.n	c4da <_puts_r+0x2a>
    c502:	4b1a      	ldr	r3, [pc, #104]	; (c56c <_puts_r+0xbc>)
    c504:	429c      	cmp	r4, r3
    c506:	d1e8      	bne.n	c4da <_puts_r+0x2a>
    c508:	68ec      	ldr	r4, [r5, #12]
    c50a:	e7e6      	b.n	c4da <_puts_r+0x2a>
    c50c:	3b01      	subs	r3, #1
    c50e:	3601      	adds	r6, #1
    c510:	60a3      	str	r3, [r4, #8]
    c512:	2b00      	cmp	r3, #0
    c514:	da04      	bge.n	c520 <_puts_r+0x70>
    c516:	69a2      	ldr	r2, [r4, #24]
    c518:	4293      	cmp	r3, r2
    c51a:	db16      	blt.n	c54a <_puts_r+0x9a>
    c51c:	290a      	cmp	r1, #10
    c51e:	d014      	beq.n	c54a <_puts_r+0x9a>
    c520:	6823      	ldr	r3, [r4, #0]
    c522:	1c5a      	adds	r2, r3, #1
    c524:	6022      	str	r2, [r4, #0]
    c526:	7019      	strb	r1, [r3, #0]
    c528:	7831      	ldrb	r1, [r6, #0]
    c52a:	68a3      	ldr	r3, [r4, #8]
    c52c:	2900      	cmp	r1, #0
    c52e:	d1ed      	bne.n	c50c <_puts_r+0x5c>
    c530:	3b01      	subs	r3, #1
    c532:	60a3      	str	r3, [r4, #8]
    c534:	2b00      	cmp	r3, #0
    c536:	da0f      	bge.n	c558 <_puts_r+0xa8>
    c538:	0022      	movs	r2, r4
    c53a:	310a      	adds	r1, #10
    c53c:	0028      	movs	r0, r5
    c53e:	f000 f935 	bl	c7ac <__swbuf_r>
    c542:	1c43      	adds	r3, r0, #1
    c544:	d0d5      	beq.n	c4f2 <_puts_r+0x42>
    c546:	200a      	movs	r0, #10
    c548:	e7d5      	b.n	c4f6 <_puts_r+0x46>
    c54a:	0022      	movs	r2, r4
    c54c:	0028      	movs	r0, r5
    c54e:	f000 f92d 	bl	c7ac <__swbuf_r>
    c552:	1c43      	adds	r3, r0, #1
    c554:	d1e8      	bne.n	c528 <_puts_r+0x78>
    c556:	e7cc      	b.n	c4f2 <_puts_r+0x42>
    c558:	200a      	movs	r0, #10
    c55a:	6823      	ldr	r3, [r4, #0]
    c55c:	1c5a      	adds	r2, r3, #1
    c55e:	6022      	str	r2, [r4, #0]
    c560:	7018      	strb	r0, [r3, #0]
    c562:	e7c8      	b.n	c4f6 <_puts_r+0x46>
    c564:	0000ec4c 	.word	0x0000ec4c
    c568:	0000ec6c 	.word	0x0000ec6c
    c56c:	0000ec2c 	.word	0x0000ec2c

0000c570 <puts>:
    c570:	b510      	push	{r4, lr}
    c572:	4b03      	ldr	r3, [pc, #12]	; (c580 <puts+0x10>)
    c574:	0001      	movs	r1, r0
    c576:	6818      	ldr	r0, [r3, #0]
    c578:	f7ff ff9a 	bl	c4b0 <_puts_r>
    c57c:	bd10      	pop	{r4, pc}
    c57e:	46c0      	nop			; (mov r8, r8)
    c580:	20000020 	.word	0x20000020

0000c584 <_sbrk_r>:
    c584:	2300      	movs	r3, #0
    c586:	b570      	push	{r4, r5, r6, lr}
    c588:	4c06      	ldr	r4, [pc, #24]	; (c5a4 <_sbrk_r+0x20>)
    c58a:	0005      	movs	r5, r0
    c58c:	0008      	movs	r0, r1
    c58e:	6023      	str	r3, [r4, #0]
    c590:	f7fd fd3a 	bl	a008 <_sbrk>
    c594:	1c43      	adds	r3, r0, #1
    c596:	d103      	bne.n	c5a0 <_sbrk_r+0x1c>
    c598:	6823      	ldr	r3, [r4, #0]
    c59a:	2b00      	cmp	r3, #0
    c59c:	d000      	beq.n	c5a0 <_sbrk_r+0x1c>
    c59e:	602b      	str	r3, [r5, #0]
    c5a0:	bd70      	pop	{r4, r5, r6, pc}
    c5a2:	46c0      	nop			; (mov r8, r8)
    c5a4:	200004d0 	.word	0x200004d0

0000c5a8 <setbuf>:
    c5a8:	424a      	negs	r2, r1
    c5aa:	414a      	adcs	r2, r1
    c5ac:	2380      	movs	r3, #128	; 0x80
    c5ae:	b510      	push	{r4, lr}
    c5b0:	0052      	lsls	r2, r2, #1
    c5b2:	00db      	lsls	r3, r3, #3
    c5b4:	f000 f802 	bl	c5bc <setvbuf>
    c5b8:	bd10      	pop	{r4, pc}
	...

0000c5bc <setvbuf>:
    c5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5be:	001d      	movs	r5, r3
    c5c0:	4b4f      	ldr	r3, [pc, #316]	; (c700 <setvbuf+0x144>)
    c5c2:	b085      	sub	sp, #20
    c5c4:	681e      	ldr	r6, [r3, #0]
    c5c6:	0004      	movs	r4, r0
    c5c8:	000f      	movs	r7, r1
    c5ca:	9200      	str	r2, [sp, #0]
    c5cc:	2e00      	cmp	r6, #0
    c5ce:	d005      	beq.n	c5dc <setvbuf+0x20>
    c5d0:	69b3      	ldr	r3, [r6, #24]
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	d102      	bne.n	c5dc <setvbuf+0x20>
    c5d6:	0030      	movs	r0, r6
    c5d8:	f000 faac 	bl	cb34 <__sinit>
    c5dc:	4b49      	ldr	r3, [pc, #292]	; (c704 <setvbuf+0x148>)
    c5de:	429c      	cmp	r4, r3
    c5e0:	d150      	bne.n	c684 <setvbuf+0xc8>
    c5e2:	6874      	ldr	r4, [r6, #4]
    c5e4:	9b00      	ldr	r3, [sp, #0]
    c5e6:	2b02      	cmp	r3, #2
    c5e8:	d005      	beq.n	c5f6 <setvbuf+0x3a>
    c5ea:	2b01      	cmp	r3, #1
    c5ec:	d900      	bls.n	c5f0 <setvbuf+0x34>
    c5ee:	e084      	b.n	c6fa <setvbuf+0x13e>
    c5f0:	2d00      	cmp	r5, #0
    c5f2:	da00      	bge.n	c5f6 <setvbuf+0x3a>
    c5f4:	e081      	b.n	c6fa <setvbuf+0x13e>
    c5f6:	0021      	movs	r1, r4
    c5f8:	0030      	movs	r0, r6
    c5fa:	f000 fa2d 	bl	ca58 <_fflush_r>
    c5fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c600:	2900      	cmp	r1, #0
    c602:	d008      	beq.n	c616 <setvbuf+0x5a>
    c604:	0023      	movs	r3, r4
    c606:	3344      	adds	r3, #68	; 0x44
    c608:	4299      	cmp	r1, r3
    c60a:	d002      	beq.n	c612 <setvbuf+0x56>
    c60c:	0030      	movs	r0, r6
    c60e:	f7ff fe79 	bl	c304 <_free_r>
    c612:	2300      	movs	r3, #0
    c614:	6363      	str	r3, [r4, #52]	; 0x34
    c616:	2300      	movs	r3, #0
    c618:	61a3      	str	r3, [r4, #24]
    c61a:	6063      	str	r3, [r4, #4]
    c61c:	89a3      	ldrh	r3, [r4, #12]
    c61e:	061b      	lsls	r3, r3, #24
    c620:	d503      	bpl.n	c62a <setvbuf+0x6e>
    c622:	6921      	ldr	r1, [r4, #16]
    c624:	0030      	movs	r0, r6
    c626:	f7ff fe6d 	bl	c304 <_free_r>
    c62a:	89a3      	ldrh	r3, [r4, #12]
    c62c:	4a36      	ldr	r2, [pc, #216]	; (c708 <setvbuf+0x14c>)
    c62e:	4013      	ands	r3, r2
    c630:	81a3      	strh	r3, [r4, #12]
    c632:	9b00      	ldr	r3, [sp, #0]
    c634:	2b02      	cmp	r3, #2
    c636:	d05a      	beq.n	c6ee <setvbuf+0x132>
    c638:	ab03      	add	r3, sp, #12
    c63a:	aa02      	add	r2, sp, #8
    c63c:	0021      	movs	r1, r4
    c63e:	0030      	movs	r0, r6
    c640:	f000 fb0e 	bl	cc60 <__swhatbuf_r>
    c644:	89a3      	ldrh	r3, [r4, #12]
    c646:	4318      	orrs	r0, r3
    c648:	81a0      	strh	r0, [r4, #12]
    c64a:	2d00      	cmp	r5, #0
    c64c:	d124      	bne.n	c698 <setvbuf+0xdc>
    c64e:	9d02      	ldr	r5, [sp, #8]
    c650:	0028      	movs	r0, r5
    c652:	f7ff fe29 	bl	c2a8 <malloc>
    c656:	9501      	str	r5, [sp, #4]
    c658:	1e07      	subs	r7, r0, #0
    c65a:	d142      	bne.n	c6e2 <setvbuf+0x126>
    c65c:	9b02      	ldr	r3, [sp, #8]
    c65e:	9301      	str	r3, [sp, #4]
    c660:	42ab      	cmp	r3, r5
    c662:	d139      	bne.n	c6d8 <setvbuf+0x11c>
    c664:	2001      	movs	r0, #1
    c666:	4240      	negs	r0, r0
    c668:	2302      	movs	r3, #2
    c66a:	89a2      	ldrh	r2, [r4, #12]
    c66c:	4313      	orrs	r3, r2
    c66e:	81a3      	strh	r3, [r4, #12]
    c670:	2300      	movs	r3, #0
    c672:	60a3      	str	r3, [r4, #8]
    c674:	0023      	movs	r3, r4
    c676:	3347      	adds	r3, #71	; 0x47
    c678:	6023      	str	r3, [r4, #0]
    c67a:	6123      	str	r3, [r4, #16]
    c67c:	2301      	movs	r3, #1
    c67e:	6163      	str	r3, [r4, #20]
    c680:	b005      	add	sp, #20
    c682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c684:	4b21      	ldr	r3, [pc, #132]	; (c70c <setvbuf+0x150>)
    c686:	429c      	cmp	r4, r3
    c688:	d101      	bne.n	c68e <setvbuf+0xd2>
    c68a:	68b4      	ldr	r4, [r6, #8]
    c68c:	e7aa      	b.n	c5e4 <setvbuf+0x28>
    c68e:	4b20      	ldr	r3, [pc, #128]	; (c710 <setvbuf+0x154>)
    c690:	429c      	cmp	r4, r3
    c692:	d1a7      	bne.n	c5e4 <setvbuf+0x28>
    c694:	68f4      	ldr	r4, [r6, #12]
    c696:	e7a5      	b.n	c5e4 <setvbuf+0x28>
    c698:	2f00      	cmp	r7, #0
    c69a:	d0d9      	beq.n	c650 <setvbuf+0x94>
    c69c:	69b3      	ldr	r3, [r6, #24]
    c69e:	2b00      	cmp	r3, #0
    c6a0:	d102      	bne.n	c6a8 <setvbuf+0xec>
    c6a2:	0030      	movs	r0, r6
    c6a4:	f000 fa46 	bl	cb34 <__sinit>
    c6a8:	9b00      	ldr	r3, [sp, #0]
    c6aa:	2b01      	cmp	r3, #1
    c6ac:	d103      	bne.n	c6b6 <setvbuf+0xfa>
    c6ae:	89a3      	ldrh	r3, [r4, #12]
    c6b0:	9a00      	ldr	r2, [sp, #0]
    c6b2:	431a      	orrs	r2, r3
    c6b4:	81a2      	strh	r2, [r4, #12]
    c6b6:	2008      	movs	r0, #8
    c6b8:	89a3      	ldrh	r3, [r4, #12]
    c6ba:	6027      	str	r7, [r4, #0]
    c6bc:	6127      	str	r7, [r4, #16]
    c6be:	6165      	str	r5, [r4, #20]
    c6c0:	4018      	ands	r0, r3
    c6c2:	d018      	beq.n	c6f6 <setvbuf+0x13a>
    c6c4:	2001      	movs	r0, #1
    c6c6:	4018      	ands	r0, r3
    c6c8:	2300      	movs	r3, #0
    c6ca:	4298      	cmp	r0, r3
    c6cc:	d011      	beq.n	c6f2 <setvbuf+0x136>
    c6ce:	426d      	negs	r5, r5
    c6d0:	60a3      	str	r3, [r4, #8]
    c6d2:	61a5      	str	r5, [r4, #24]
    c6d4:	0018      	movs	r0, r3
    c6d6:	e7d3      	b.n	c680 <setvbuf+0xc4>
    c6d8:	9801      	ldr	r0, [sp, #4]
    c6da:	f7ff fde5 	bl	c2a8 <malloc>
    c6de:	1e07      	subs	r7, r0, #0
    c6e0:	d0c0      	beq.n	c664 <setvbuf+0xa8>
    c6e2:	2380      	movs	r3, #128	; 0x80
    c6e4:	89a2      	ldrh	r2, [r4, #12]
    c6e6:	9d01      	ldr	r5, [sp, #4]
    c6e8:	4313      	orrs	r3, r2
    c6ea:	81a3      	strh	r3, [r4, #12]
    c6ec:	e7d6      	b.n	c69c <setvbuf+0xe0>
    c6ee:	2000      	movs	r0, #0
    c6f0:	e7ba      	b.n	c668 <setvbuf+0xac>
    c6f2:	60a5      	str	r5, [r4, #8]
    c6f4:	e7c4      	b.n	c680 <setvbuf+0xc4>
    c6f6:	60a0      	str	r0, [r4, #8]
    c6f8:	e7c2      	b.n	c680 <setvbuf+0xc4>
    c6fa:	2001      	movs	r0, #1
    c6fc:	4240      	negs	r0, r0
    c6fe:	e7bf      	b.n	c680 <setvbuf+0xc4>
    c700:	20000020 	.word	0x20000020
    c704:	0000ec4c 	.word	0x0000ec4c
    c708:	fffff35c 	.word	0xfffff35c
    c70c:	0000ec6c 	.word	0x0000ec6c
    c710:	0000ec2c 	.word	0x0000ec2c

0000c714 <siprintf>:
    c714:	b40e      	push	{r1, r2, r3}
    c716:	b510      	push	{r4, lr}
    c718:	b09d      	sub	sp, #116	; 0x74
    c71a:	a902      	add	r1, sp, #8
    c71c:	9002      	str	r0, [sp, #8]
    c71e:	6108      	str	r0, [r1, #16]
    c720:	480b      	ldr	r0, [pc, #44]	; (c750 <siprintf+0x3c>)
    c722:	2482      	movs	r4, #130	; 0x82
    c724:	6088      	str	r0, [r1, #8]
    c726:	6148      	str	r0, [r1, #20]
    c728:	2001      	movs	r0, #1
    c72a:	4240      	negs	r0, r0
    c72c:	ab1f      	add	r3, sp, #124	; 0x7c
    c72e:	81c8      	strh	r0, [r1, #14]
    c730:	4808      	ldr	r0, [pc, #32]	; (c754 <siprintf+0x40>)
    c732:	cb04      	ldmia	r3!, {r2}
    c734:	00a4      	lsls	r4, r4, #2
    c736:	6800      	ldr	r0, [r0, #0]
    c738:	9301      	str	r3, [sp, #4]
    c73a:	818c      	strh	r4, [r1, #12]
    c73c:	f000 fb5a 	bl	cdf4 <_svfiprintf_r>
    c740:	2300      	movs	r3, #0
    c742:	9a02      	ldr	r2, [sp, #8]
    c744:	7013      	strb	r3, [r2, #0]
    c746:	b01d      	add	sp, #116	; 0x74
    c748:	bc10      	pop	{r4}
    c74a:	bc08      	pop	{r3}
    c74c:	b003      	add	sp, #12
    c74e:	4718      	bx	r3
    c750:	7fffffff 	.word	0x7fffffff
    c754:	20000020 	.word	0x20000020

0000c758 <strcmp>:
    c758:	7802      	ldrb	r2, [r0, #0]
    c75a:	780b      	ldrb	r3, [r1, #0]
    c75c:	2a00      	cmp	r2, #0
    c75e:	d003      	beq.n	c768 <strcmp+0x10>
    c760:	3001      	adds	r0, #1
    c762:	3101      	adds	r1, #1
    c764:	429a      	cmp	r2, r3
    c766:	d0f7      	beq.n	c758 <strcmp>
    c768:	1ad0      	subs	r0, r2, r3
    c76a:	4770      	bx	lr

0000c76c <strcpy>:
    c76c:	1c03      	adds	r3, r0, #0
    c76e:	780a      	ldrb	r2, [r1, #0]
    c770:	3101      	adds	r1, #1
    c772:	701a      	strb	r2, [r3, #0]
    c774:	3301      	adds	r3, #1
    c776:	2a00      	cmp	r2, #0
    c778:	d1f9      	bne.n	c76e <strcpy+0x2>
    c77a:	4770      	bx	lr

0000c77c <strlen>:
    c77c:	2300      	movs	r3, #0
    c77e:	5cc2      	ldrb	r2, [r0, r3]
    c780:	3301      	adds	r3, #1
    c782:	2a00      	cmp	r2, #0
    c784:	d1fb      	bne.n	c77e <strlen+0x2>
    c786:	1e58      	subs	r0, r3, #1
    c788:	4770      	bx	lr

0000c78a <strncmp>:
    c78a:	2300      	movs	r3, #0
    c78c:	b530      	push	{r4, r5, lr}
    c78e:	429a      	cmp	r2, r3
    c790:	d00a      	beq.n	c7a8 <strncmp+0x1e>
    c792:	3a01      	subs	r2, #1
    c794:	5cc4      	ldrb	r4, [r0, r3]
    c796:	5ccd      	ldrb	r5, [r1, r3]
    c798:	42ac      	cmp	r4, r5
    c79a:	d104      	bne.n	c7a6 <strncmp+0x1c>
    c79c:	429a      	cmp	r2, r3
    c79e:	d002      	beq.n	c7a6 <strncmp+0x1c>
    c7a0:	3301      	adds	r3, #1
    c7a2:	2c00      	cmp	r4, #0
    c7a4:	d1f6      	bne.n	c794 <strncmp+0xa>
    c7a6:	1b63      	subs	r3, r4, r5
    c7a8:	0018      	movs	r0, r3
    c7aa:	bd30      	pop	{r4, r5, pc}

0000c7ac <__swbuf_r>:
    c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7ae:	0005      	movs	r5, r0
    c7b0:	000e      	movs	r6, r1
    c7b2:	0014      	movs	r4, r2
    c7b4:	2800      	cmp	r0, #0
    c7b6:	d004      	beq.n	c7c2 <__swbuf_r+0x16>
    c7b8:	6983      	ldr	r3, [r0, #24]
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	d101      	bne.n	c7c2 <__swbuf_r+0x16>
    c7be:	f000 f9b9 	bl	cb34 <__sinit>
    c7c2:	4b22      	ldr	r3, [pc, #136]	; (c84c <__swbuf_r+0xa0>)
    c7c4:	429c      	cmp	r4, r3
    c7c6:	d12d      	bne.n	c824 <__swbuf_r+0x78>
    c7c8:	686c      	ldr	r4, [r5, #4]
    c7ca:	69a3      	ldr	r3, [r4, #24]
    c7cc:	60a3      	str	r3, [r4, #8]
    c7ce:	89a3      	ldrh	r3, [r4, #12]
    c7d0:	071b      	lsls	r3, r3, #28
    c7d2:	d531      	bpl.n	c838 <__swbuf_r+0x8c>
    c7d4:	6923      	ldr	r3, [r4, #16]
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	d02e      	beq.n	c838 <__swbuf_r+0x8c>
    c7da:	6823      	ldr	r3, [r4, #0]
    c7dc:	6922      	ldr	r2, [r4, #16]
    c7de:	b2f7      	uxtb	r7, r6
    c7e0:	1a98      	subs	r0, r3, r2
    c7e2:	6963      	ldr	r3, [r4, #20]
    c7e4:	b2f6      	uxtb	r6, r6
    c7e6:	4298      	cmp	r0, r3
    c7e8:	db05      	blt.n	c7f6 <__swbuf_r+0x4a>
    c7ea:	0021      	movs	r1, r4
    c7ec:	0028      	movs	r0, r5
    c7ee:	f000 f933 	bl	ca58 <_fflush_r>
    c7f2:	2800      	cmp	r0, #0
    c7f4:	d126      	bne.n	c844 <__swbuf_r+0x98>
    c7f6:	68a3      	ldr	r3, [r4, #8]
    c7f8:	3001      	adds	r0, #1
    c7fa:	3b01      	subs	r3, #1
    c7fc:	60a3      	str	r3, [r4, #8]
    c7fe:	6823      	ldr	r3, [r4, #0]
    c800:	1c5a      	adds	r2, r3, #1
    c802:	6022      	str	r2, [r4, #0]
    c804:	701f      	strb	r7, [r3, #0]
    c806:	6963      	ldr	r3, [r4, #20]
    c808:	4298      	cmp	r0, r3
    c80a:	d004      	beq.n	c816 <__swbuf_r+0x6a>
    c80c:	89a3      	ldrh	r3, [r4, #12]
    c80e:	07db      	lsls	r3, r3, #31
    c810:	d51a      	bpl.n	c848 <__swbuf_r+0x9c>
    c812:	2e0a      	cmp	r6, #10
    c814:	d118      	bne.n	c848 <__swbuf_r+0x9c>
    c816:	0021      	movs	r1, r4
    c818:	0028      	movs	r0, r5
    c81a:	f000 f91d 	bl	ca58 <_fflush_r>
    c81e:	2800      	cmp	r0, #0
    c820:	d012      	beq.n	c848 <__swbuf_r+0x9c>
    c822:	e00f      	b.n	c844 <__swbuf_r+0x98>
    c824:	4b0a      	ldr	r3, [pc, #40]	; (c850 <__swbuf_r+0xa4>)
    c826:	429c      	cmp	r4, r3
    c828:	d101      	bne.n	c82e <__swbuf_r+0x82>
    c82a:	68ac      	ldr	r4, [r5, #8]
    c82c:	e7cd      	b.n	c7ca <__swbuf_r+0x1e>
    c82e:	4b09      	ldr	r3, [pc, #36]	; (c854 <__swbuf_r+0xa8>)
    c830:	429c      	cmp	r4, r3
    c832:	d1ca      	bne.n	c7ca <__swbuf_r+0x1e>
    c834:	68ec      	ldr	r4, [r5, #12]
    c836:	e7c8      	b.n	c7ca <__swbuf_r+0x1e>
    c838:	0021      	movs	r1, r4
    c83a:	0028      	movs	r0, r5
    c83c:	f000 f80c 	bl	c858 <__swsetup_r>
    c840:	2800      	cmp	r0, #0
    c842:	d0ca      	beq.n	c7da <__swbuf_r+0x2e>
    c844:	2601      	movs	r6, #1
    c846:	4276      	negs	r6, r6
    c848:	0030      	movs	r0, r6
    c84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c84c:	0000ec4c 	.word	0x0000ec4c
    c850:	0000ec6c 	.word	0x0000ec6c
    c854:	0000ec2c 	.word	0x0000ec2c

0000c858 <__swsetup_r>:
    c858:	4b36      	ldr	r3, [pc, #216]	; (c934 <__swsetup_r+0xdc>)
    c85a:	b570      	push	{r4, r5, r6, lr}
    c85c:	681d      	ldr	r5, [r3, #0]
    c85e:	0006      	movs	r6, r0
    c860:	000c      	movs	r4, r1
    c862:	2d00      	cmp	r5, #0
    c864:	d005      	beq.n	c872 <__swsetup_r+0x1a>
    c866:	69ab      	ldr	r3, [r5, #24]
    c868:	2b00      	cmp	r3, #0
    c86a:	d102      	bne.n	c872 <__swsetup_r+0x1a>
    c86c:	0028      	movs	r0, r5
    c86e:	f000 f961 	bl	cb34 <__sinit>
    c872:	4b31      	ldr	r3, [pc, #196]	; (c938 <__swsetup_r+0xe0>)
    c874:	429c      	cmp	r4, r3
    c876:	d10f      	bne.n	c898 <__swsetup_r+0x40>
    c878:	686c      	ldr	r4, [r5, #4]
    c87a:	230c      	movs	r3, #12
    c87c:	5ee2      	ldrsh	r2, [r4, r3]
    c87e:	b293      	uxth	r3, r2
    c880:	0719      	lsls	r1, r3, #28
    c882:	d42d      	bmi.n	c8e0 <__swsetup_r+0x88>
    c884:	06d9      	lsls	r1, r3, #27
    c886:	d411      	bmi.n	c8ac <__swsetup_r+0x54>
    c888:	2309      	movs	r3, #9
    c88a:	2001      	movs	r0, #1
    c88c:	6033      	str	r3, [r6, #0]
    c88e:	3337      	adds	r3, #55	; 0x37
    c890:	4313      	orrs	r3, r2
    c892:	81a3      	strh	r3, [r4, #12]
    c894:	4240      	negs	r0, r0
    c896:	bd70      	pop	{r4, r5, r6, pc}
    c898:	4b28      	ldr	r3, [pc, #160]	; (c93c <__swsetup_r+0xe4>)
    c89a:	429c      	cmp	r4, r3
    c89c:	d101      	bne.n	c8a2 <__swsetup_r+0x4a>
    c89e:	68ac      	ldr	r4, [r5, #8]
    c8a0:	e7eb      	b.n	c87a <__swsetup_r+0x22>
    c8a2:	4b27      	ldr	r3, [pc, #156]	; (c940 <__swsetup_r+0xe8>)
    c8a4:	429c      	cmp	r4, r3
    c8a6:	d1e8      	bne.n	c87a <__swsetup_r+0x22>
    c8a8:	68ec      	ldr	r4, [r5, #12]
    c8aa:	e7e6      	b.n	c87a <__swsetup_r+0x22>
    c8ac:	075b      	lsls	r3, r3, #29
    c8ae:	d513      	bpl.n	c8d8 <__swsetup_r+0x80>
    c8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c8b2:	2900      	cmp	r1, #0
    c8b4:	d008      	beq.n	c8c8 <__swsetup_r+0x70>
    c8b6:	0023      	movs	r3, r4
    c8b8:	3344      	adds	r3, #68	; 0x44
    c8ba:	4299      	cmp	r1, r3
    c8bc:	d002      	beq.n	c8c4 <__swsetup_r+0x6c>
    c8be:	0030      	movs	r0, r6
    c8c0:	f7ff fd20 	bl	c304 <_free_r>
    c8c4:	2300      	movs	r3, #0
    c8c6:	6363      	str	r3, [r4, #52]	; 0x34
    c8c8:	2224      	movs	r2, #36	; 0x24
    c8ca:	89a3      	ldrh	r3, [r4, #12]
    c8cc:	4393      	bics	r3, r2
    c8ce:	81a3      	strh	r3, [r4, #12]
    c8d0:	2300      	movs	r3, #0
    c8d2:	6063      	str	r3, [r4, #4]
    c8d4:	6923      	ldr	r3, [r4, #16]
    c8d6:	6023      	str	r3, [r4, #0]
    c8d8:	2308      	movs	r3, #8
    c8da:	89a2      	ldrh	r2, [r4, #12]
    c8dc:	4313      	orrs	r3, r2
    c8de:	81a3      	strh	r3, [r4, #12]
    c8e0:	6923      	ldr	r3, [r4, #16]
    c8e2:	2b00      	cmp	r3, #0
    c8e4:	d10b      	bne.n	c8fe <__swsetup_r+0xa6>
    c8e6:	21a0      	movs	r1, #160	; 0xa0
    c8e8:	2280      	movs	r2, #128	; 0x80
    c8ea:	89a3      	ldrh	r3, [r4, #12]
    c8ec:	0089      	lsls	r1, r1, #2
    c8ee:	0092      	lsls	r2, r2, #2
    c8f0:	400b      	ands	r3, r1
    c8f2:	4293      	cmp	r3, r2
    c8f4:	d003      	beq.n	c8fe <__swsetup_r+0xa6>
    c8f6:	0021      	movs	r1, r4
    c8f8:	0030      	movs	r0, r6
    c8fa:	f000 f9d9 	bl	ccb0 <__smakebuf_r>
    c8fe:	2301      	movs	r3, #1
    c900:	89a2      	ldrh	r2, [r4, #12]
    c902:	4013      	ands	r3, r2
    c904:	d011      	beq.n	c92a <__swsetup_r+0xd2>
    c906:	2300      	movs	r3, #0
    c908:	60a3      	str	r3, [r4, #8]
    c90a:	6963      	ldr	r3, [r4, #20]
    c90c:	425b      	negs	r3, r3
    c90e:	61a3      	str	r3, [r4, #24]
    c910:	2000      	movs	r0, #0
    c912:	6923      	ldr	r3, [r4, #16]
    c914:	4283      	cmp	r3, r0
    c916:	d1be      	bne.n	c896 <__swsetup_r+0x3e>
    c918:	230c      	movs	r3, #12
    c91a:	5ee2      	ldrsh	r2, [r4, r3]
    c91c:	0613      	lsls	r3, r2, #24
    c91e:	d5ba      	bpl.n	c896 <__swsetup_r+0x3e>
    c920:	2340      	movs	r3, #64	; 0x40
    c922:	4313      	orrs	r3, r2
    c924:	81a3      	strh	r3, [r4, #12]
    c926:	3801      	subs	r0, #1
    c928:	e7b5      	b.n	c896 <__swsetup_r+0x3e>
    c92a:	0792      	lsls	r2, r2, #30
    c92c:	d400      	bmi.n	c930 <__swsetup_r+0xd8>
    c92e:	6963      	ldr	r3, [r4, #20]
    c930:	60a3      	str	r3, [r4, #8]
    c932:	e7ed      	b.n	c910 <__swsetup_r+0xb8>
    c934:	20000020 	.word	0x20000020
    c938:	0000ec4c 	.word	0x0000ec4c
    c93c:	0000ec6c 	.word	0x0000ec6c
    c940:	0000ec2c 	.word	0x0000ec2c

0000c944 <__sflush_r>:
    c944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c946:	898a      	ldrh	r2, [r1, #12]
    c948:	0005      	movs	r5, r0
    c94a:	000c      	movs	r4, r1
    c94c:	0713      	lsls	r3, r2, #28
    c94e:	d460      	bmi.n	ca12 <__sflush_r+0xce>
    c950:	684b      	ldr	r3, [r1, #4]
    c952:	2b00      	cmp	r3, #0
    c954:	dc04      	bgt.n	c960 <__sflush_r+0x1c>
    c956:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c958:	2b00      	cmp	r3, #0
    c95a:	dc01      	bgt.n	c960 <__sflush_r+0x1c>
    c95c:	2000      	movs	r0, #0
    c95e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c960:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c962:	2f00      	cmp	r7, #0
    c964:	d0fa      	beq.n	c95c <__sflush_r+0x18>
    c966:	2300      	movs	r3, #0
    c968:	682e      	ldr	r6, [r5, #0]
    c96a:	602b      	str	r3, [r5, #0]
    c96c:	2380      	movs	r3, #128	; 0x80
    c96e:	015b      	lsls	r3, r3, #5
    c970:	401a      	ands	r2, r3
    c972:	d034      	beq.n	c9de <__sflush_r+0x9a>
    c974:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c976:	89a3      	ldrh	r3, [r4, #12]
    c978:	075b      	lsls	r3, r3, #29
    c97a:	d506      	bpl.n	c98a <__sflush_r+0x46>
    c97c:	6863      	ldr	r3, [r4, #4]
    c97e:	1ac0      	subs	r0, r0, r3
    c980:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c982:	2b00      	cmp	r3, #0
    c984:	d001      	beq.n	c98a <__sflush_r+0x46>
    c986:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c988:	1ac0      	subs	r0, r0, r3
    c98a:	0002      	movs	r2, r0
    c98c:	6a21      	ldr	r1, [r4, #32]
    c98e:	2300      	movs	r3, #0
    c990:	0028      	movs	r0, r5
    c992:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c994:	47b8      	blx	r7
    c996:	89a1      	ldrh	r1, [r4, #12]
    c998:	1c43      	adds	r3, r0, #1
    c99a:	d106      	bne.n	c9aa <__sflush_r+0x66>
    c99c:	682b      	ldr	r3, [r5, #0]
    c99e:	2b1d      	cmp	r3, #29
    c9a0:	d831      	bhi.n	ca06 <__sflush_r+0xc2>
    c9a2:	4a2c      	ldr	r2, [pc, #176]	; (ca54 <__sflush_r+0x110>)
    c9a4:	40da      	lsrs	r2, r3
    c9a6:	07d3      	lsls	r3, r2, #31
    c9a8:	d52d      	bpl.n	ca06 <__sflush_r+0xc2>
    c9aa:	2300      	movs	r3, #0
    c9ac:	6063      	str	r3, [r4, #4]
    c9ae:	6923      	ldr	r3, [r4, #16]
    c9b0:	6023      	str	r3, [r4, #0]
    c9b2:	04cb      	lsls	r3, r1, #19
    c9b4:	d505      	bpl.n	c9c2 <__sflush_r+0x7e>
    c9b6:	1c43      	adds	r3, r0, #1
    c9b8:	d102      	bne.n	c9c0 <__sflush_r+0x7c>
    c9ba:	682b      	ldr	r3, [r5, #0]
    c9bc:	2b00      	cmp	r3, #0
    c9be:	d100      	bne.n	c9c2 <__sflush_r+0x7e>
    c9c0:	6560      	str	r0, [r4, #84]	; 0x54
    c9c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c9c4:	602e      	str	r6, [r5, #0]
    c9c6:	2900      	cmp	r1, #0
    c9c8:	d0c8      	beq.n	c95c <__sflush_r+0x18>
    c9ca:	0023      	movs	r3, r4
    c9cc:	3344      	adds	r3, #68	; 0x44
    c9ce:	4299      	cmp	r1, r3
    c9d0:	d002      	beq.n	c9d8 <__sflush_r+0x94>
    c9d2:	0028      	movs	r0, r5
    c9d4:	f7ff fc96 	bl	c304 <_free_r>
    c9d8:	2000      	movs	r0, #0
    c9da:	6360      	str	r0, [r4, #52]	; 0x34
    c9dc:	e7bf      	b.n	c95e <__sflush_r+0x1a>
    c9de:	2301      	movs	r3, #1
    c9e0:	6a21      	ldr	r1, [r4, #32]
    c9e2:	0028      	movs	r0, r5
    c9e4:	47b8      	blx	r7
    c9e6:	1c43      	adds	r3, r0, #1
    c9e8:	d1c5      	bne.n	c976 <__sflush_r+0x32>
    c9ea:	682b      	ldr	r3, [r5, #0]
    c9ec:	2b00      	cmp	r3, #0
    c9ee:	d0c2      	beq.n	c976 <__sflush_r+0x32>
    c9f0:	2b1d      	cmp	r3, #29
    c9f2:	d001      	beq.n	c9f8 <__sflush_r+0xb4>
    c9f4:	2b16      	cmp	r3, #22
    c9f6:	d101      	bne.n	c9fc <__sflush_r+0xb8>
    c9f8:	602e      	str	r6, [r5, #0]
    c9fa:	e7af      	b.n	c95c <__sflush_r+0x18>
    c9fc:	2340      	movs	r3, #64	; 0x40
    c9fe:	89a2      	ldrh	r2, [r4, #12]
    ca00:	4313      	orrs	r3, r2
    ca02:	81a3      	strh	r3, [r4, #12]
    ca04:	e7ab      	b.n	c95e <__sflush_r+0x1a>
    ca06:	2340      	movs	r3, #64	; 0x40
    ca08:	430b      	orrs	r3, r1
    ca0a:	2001      	movs	r0, #1
    ca0c:	81a3      	strh	r3, [r4, #12]
    ca0e:	4240      	negs	r0, r0
    ca10:	e7a5      	b.n	c95e <__sflush_r+0x1a>
    ca12:	690f      	ldr	r7, [r1, #16]
    ca14:	2f00      	cmp	r7, #0
    ca16:	d0a1      	beq.n	c95c <__sflush_r+0x18>
    ca18:	680b      	ldr	r3, [r1, #0]
    ca1a:	600f      	str	r7, [r1, #0]
    ca1c:	1bdb      	subs	r3, r3, r7
    ca1e:	9301      	str	r3, [sp, #4]
    ca20:	2300      	movs	r3, #0
    ca22:	0792      	lsls	r2, r2, #30
    ca24:	d100      	bne.n	ca28 <__sflush_r+0xe4>
    ca26:	694b      	ldr	r3, [r1, #20]
    ca28:	60a3      	str	r3, [r4, #8]
    ca2a:	9b01      	ldr	r3, [sp, #4]
    ca2c:	2b00      	cmp	r3, #0
    ca2e:	dc00      	bgt.n	ca32 <__sflush_r+0xee>
    ca30:	e794      	b.n	c95c <__sflush_r+0x18>
    ca32:	9b01      	ldr	r3, [sp, #4]
    ca34:	003a      	movs	r2, r7
    ca36:	6a21      	ldr	r1, [r4, #32]
    ca38:	0028      	movs	r0, r5
    ca3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    ca3c:	47b0      	blx	r6
    ca3e:	2800      	cmp	r0, #0
    ca40:	dc03      	bgt.n	ca4a <__sflush_r+0x106>
    ca42:	2340      	movs	r3, #64	; 0x40
    ca44:	89a2      	ldrh	r2, [r4, #12]
    ca46:	4313      	orrs	r3, r2
    ca48:	e7df      	b.n	ca0a <__sflush_r+0xc6>
    ca4a:	9b01      	ldr	r3, [sp, #4]
    ca4c:	183f      	adds	r7, r7, r0
    ca4e:	1a1b      	subs	r3, r3, r0
    ca50:	9301      	str	r3, [sp, #4]
    ca52:	e7ea      	b.n	ca2a <__sflush_r+0xe6>
    ca54:	20400001 	.word	0x20400001

0000ca58 <_fflush_r>:
    ca58:	690b      	ldr	r3, [r1, #16]
    ca5a:	b570      	push	{r4, r5, r6, lr}
    ca5c:	0005      	movs	r5, r0
    ca5e:	000c      	movs	r4, r1
    ca60:	2b00      	cmp	r3, #0
    ca62:	d101      	bne.n	ca68 <_fflush_r+0x10>
    ca64:	2000      	movs	r0, #0
    ca66:	bd70      	pop	{r4, r5, r6, pc}
    ca68:	2800      	cmp	r0, #0
    ca6a:	d004      	beq.n	ca76 <_fflush_r+0x1e>
    ca6c:	6983      	ldr	r3, [r0, #24]
    ca6e:	2b00      	cmp	r3, #0
    ca70:	d101      	bne.n	ca76 <_fflush_r+0x1e>
    ca72:	f000 f85f 	bl	cb34 <__sinit>
    ca76:	4b0b      	ldr	r3, [pc, #44]	; (caa4 <_fflush_r+0x4c>)
    ca78:	429c      	cmp	r4, r3
    ca7a:	d109      	bne.n	ca90 <_fflush_r+0x38>
    ca7c:	686c      	ldr	r4, [r5, #4]
    ca7e:	220c      	movs	r2, #12
    ca80:	5ea3      	ldrsh	r3, [r4, r2]
    ca82:	2b00      	cmp	r3, #0
    ca84:	d0ee      	beq.n	ca64 <_fflush_r+0xc>
    ca86:	0021      	movs	r1, r4
    ca88:	0028      	movs	r0, r5
    ca8a:	f7ff ff5b 	bl	c944 <__sflush_r>
    ca8e:	e7ea      	b.n	ca66 <_fflush_r+0xe>
    ca90:	4b05      	ldr	r3, [pc, #20]	; (caa8 <_fflush_r+0x50>)
    ca92:	429c      	cmp	r4, r3
    ca94:	d101      	bne.n	ca9a <_fflush_r+0x42>
    ca96:	68ac      	ldr	r4, [r5, #8]
    ca98:	e7f1      	b.n	ca7e <_fflush_r+0x26>
    ca9a:	4b04      	ldr	r3, [pc, #16]	; (caac <_fflush_r+0x54>)
    ca9c:	429c      	cmp	r4, r3
    ca9e:	d1ee      	bne.n	ca7e <_fflush_r+0x26>
    caa0:	68ec      	ldr	r4, [r5, #12]
    caa2:	e7ec      	b.n	ca7e <_fflush_r+0x26>
    caa4:	0000ec4c 	.word	0x0000ec4c
    caa8:	0000ec6c 	.word	0x0000ec6c
    caac:	0000ec2c 	.word	0x0000ec2c

0000cab0 <_cleanup_r>:
    cab0:	b510      	push	{r4, lr}
    cab2:	4902      	ldr	r1, [pc, #8]	; (cabc <_cleanup_r+0xc>)
    cab4:	f000 f8b2 	bl	cc1c <_fwalk_reent>
    cab8:	bd10      	pop	{r4, pc}
    caba:	46c0      	nop			; (mov r8, r8)
    cabc:	0000ca59 	.word	0x0000ca59

0000cac0 <std.isra.0>:
    cac0:	2300      	movs	r3, #0
    cac2:	b510      	push	{r4, lr}
    cac4:	0004      	movs	r4, r0
    cac6:	6003      	str	r3, [r0, #0]
    cac8:	6043      	str	r3, [r0, #4]
    caca:	6083      	str	r3, [r0, #8]
    cacc:	8181      	strh	r1, [r0, #12]
    cace:	6643      	str	r3, [r0, #100]	; 0x64
    cad0:	81c2      	strh	r2, [r0, #14]
    cad2:	6103      	str	r3, [r0, #16]
    cad4:	6143      	str	r3, [r0, #20]
    cad6:	6183      	str	r3, [r0, #24]
    cad8:	0019      	movs	r1, r3
    cada:	2208      	movs	r2, #8
    cadc:	305c      	adds	r0, #92	; 0x5c
    cade:	f7ff fc08 	bl	c2f2 <memset>
    cae2:	4b05      	ldr	r3, [pc, #20]	; (caf8 <std.isra.0+0x38>)
    cae4:	6224      	str	r4, [r4, #32]
    cae6:	6263      	str	r3, [r4, #36]	; 0x24
    cae8:	4b04      	ldr	r3, [pc, #16]	; (cafc <std.isra.0+0x3c>)
    caea:	62a3      	str	r3, [r4, #40]	; 0x28
    caec:	4b04      	ldr	r3, [pc, #16]	; (cb00 <std.isra.0+0x40>)
    caee:	62e3      	str	r3, [r4, #44]	; 0x2c
    caf0:	4b04      	ldr	r3, [pc, #16]	; (cb04 <std.isra.0+0x44>)
    caf2:	6323      	str	r3, [r4, #48]	; 0x30
    caf4:	bd10      	pop	{r4, pc}
    caf6:	46c0      	nop			; (mov r8, r8)
    caf8:	0000d601 	.word	0x0000d601
    cafc:	0000d629 	.word	0x0000d629
    cb00:	0000d661 	.word	0x0000d661
    cb04:	0000d68d 	.word	0x0000d68d

0000cb08 <__sfmoreglue>:
    cb08:	b570      	push	{r4, r5, r6, lr}
    cb0a:	2568      	movs	r5, #104	; 0x68
    cb0c:	1e4a      	subs	r2, r1, #1
    cb0e:	4355      	muls	r5, r2
    cb10:	000e      	movs	r6, r1
    cb12:	0029      	movs	r1, r5
    cb14:	3174      	adds	r1, #116	; 0x74
    cb16:	f7ff fc3f 	bl	c398 <_malloc_r>
    cb1a:	1e04      	subs	r4, r0, #0
    cb1c:	d008      	beq.n	cb30 <__sfmoreglue+0x28>
    cb1e:	2100      	movs	r1, #0
    cb20:	002a      	movs	r2, r5
    cb22:	6001      	str	r1, [r0, #0]
    cb24:	6046      	str	r6, [r0, #4]
    cb26:	300c      	adds	r0, #12
    cb28:	60a0      	str	r0, [r4, #8]
    cb2a:	3268      	adds	r2, #104	; 0x68
    cb2c:	f7ff fbe1 	bl	c2f2 <memset>
    cb30:	0020      	movs	r0, r4
    cb32:	bd70      	pop	{r4, r5, r6, pc}

0000cb34 <__sinit>:
    cb34:	6983      	ldr	r3, [r0, #24]
    cb36:	b513      	push	{r0, r1, r4, lr}
    cb38:	0004      	movs	r4, r0
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	d128      	bne.n	cb90 <__sinit+0x5c>
    cb3e:	6483      	str	r3, [r0, #72]	; 0x48
    cb40:	64c3      	str	r3, [r0, #76]	; 0x4c
    cb42:	6503      	str	r3, [r0, #80]	; 0x50
    cb44:	4b13      	ldr	r3, [pc, #76]	; (cb94 <__sinit+0x60>)
    cb46:	4a14      	ldr	r2, [pc, #80]	; (cb98 <__sinit+0x64>)
    cb48:	681b      	ldr	r3, [r3, #0]
    cb4a:	6282      	str	r2, [r0, #40]	; 0x28
    cb4c:	9301      	str	r3, [sp, #4]
    cb4e:	4298      	cmp	r0, r3
    cb50:	d101      	bne.n	cb56 <__sinit+0x22>
    cb52:	2301      	movs	r3, #1
    cb54:	6183      	str	r3, [r0, #24]
    cb56:	0020      	movs	r0, r4
    cb58:	f000 f820 	bl	cb9c <__sfp>
    cb5c:	6060      	str	r0, [r4, #4]
    cb5e:	0020      	movs	r0, r4
    cb60:	f000 f81c 	bl	cb9c <__sfp>
    cb64:	60a0      	str	r0, [r4, #8]
    cb66:	0020      	movs	r0, r4
    cb68:	f000 f818 	bl	cb9c <__sfp>
    cb6c:	2200      	movs	r2, #0
    cb6e:	60e0      	str	r0, [r4, #12]
    cb70:	2104      	movs	r1, #4
    cb72:	6860      	ldr	r0, [r4, #4]
    cb74:	f7ff ffa4 	bl	cac0 <std.isra.0>
    cb78:	2201      	movs	r2, #1
    cb7a:	2109      	movs	r1, #9
    cb7c:	68a0      	ldr	r0, [r4, #8]
    cb7e:	f7ff ff9f 	bl	cac0 <std.isra.0>
    cb82:	2202      	movs	r2, #2
    cb84:	2112      	movs	r1, #18
    cb86:	68e0      	ldr	r0, [r4, #12]
    cb88:	f7ff ff9a 	bl	cac0 <std.isra.0>
    cb8c:	2301      	movs	r3, #1
    cb8e:	61a3      	str	r3, [r4, #24]
    cb90:	bd13      	pop	{r0, r1, r4, pc}
    cb92:	46c0      	nop			; (mov r8, r8)
    cb94:	0000ec28 	.word	0x0000ec28
    cb98:	0000cab1 	.word	0x0000cab1

0000cb9c <__sfp>:
    cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb9e:	4b1e      	ldr	r3, [pc, #120]	; (cc18 <__sfp+0x7c>)
    cba0:	0007      	movs	r7, r0
    cba2:	681e      	ldr	r6, [r3, #0]
    cba4:	69b3      	ldr	r3, [r6, #24]
    cba6:	2b00      	cmp	r3, #0
    cba8:	d102      	bne.n	cbb0 <__sfp+0x14>
    cbaa:	0030      	movs	r0, r6
    cbac:	f7ff ffc2 	bl	cb34 <__sinit>
    cbb0:	3648      	adds	r6, #72	; 0x48
    cbb2:	68b4      	ldr	r4, [r6, #8]
    cbb4:	6873      	ldr	r3, [r6, #4]
    cbb6:	3b01      	subs	r3, #1
    cbb8:	d504      	bpl.n	cbc4 <__sfp+0x28>
    cbba:	6833      	ldr	r3, [r6, #0]
    cbbc:	2b00      	cmp	r3, #0
    cbbe:	d007      	beq.n	cbd0 <__sfp+0x34>
    cbc0:	6836      	ldr	r6, [r6, #0]
    cbc2:	e7f6      	b.n	cbb2 <__sfp+0x16>
    cbc4:	220c      	movs	r2, #12
    cbc6:	5ea5      	ldrsh	r5, [r4, r2]
    cbc8:	2d00      	cmp	r5, #0
    cbca:	d00d      	beq.n	cbe8 <__sfp+0x4c>
    cbcc:	3468      	adds	r4, #104	; 0x68
    cbce:	e7f2      	b.n	cbb6 <__sfp+0x1a>
    cbd0:	2104      	movs	r1, #4
    cbd2:	0038      	movs	r0, r7
    cbd4:	f7ff ff98 	bl	cb08 <__sfmoreglue>
    cbd8:	6030      	str	r0, [r6, #0]
    cbda:	2800      	cmp	r0, #0
    cbdc:	d1f0      	bne.n	cbc0 <__sfp+0x24>
    cbde:	230c      	movs	r3, #12
    cbe0:	0004      	movs	r4, r0
    cbe2:	603b      	str	r3, [r7, #0]
    cbe4:	0020      	movs	r0, r4
    cbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cbe8:	2301      	movs	r3, #1
    cbea:	0020      	movs	r0, r4
    cbec:	425b      	negs	r3, r3
    cbee:	81e3      	strh	r3, [r4, #14]
    cbf0:	3302      	adds	r3, #2
    cbf2:	81a3      	strh	r3, [r4, #12]
    cbf4:	6665      	str	r5, [r4, #100]	; 0x64
    cbf6:	6025      	str	r5, [r4, #0]
    cbf8:	60a5      	str	r5, [r4, #8]
    cbfa:	6065      	str	r5, [r4, #4]
    cbfc:	6125      	str	r5, [r4, #16]
    cbfe:	6165      	str	r5, [r4, #20]
    cc00:	61a5      	str	r5, [r4, #24]
    cc02:	2208      	movs	r2, #8
    cc04:	0029      	movs	r1, r5
    cc06:	305c      	adds	r0, #92	; 0x5c
    cc08:	f7ff fb73 	bl	c2f2 <memset>
    cc0c:	6365      	str	r5, [r4, #52]	; 0x34
    cc0e:	63a5      	str	r5, [r4, #56]	; 0x38
    cc10:	64a5      	str	r5, [r4, #72]	; 0x48
    cc12:	64e5      	str	r5, [r4, #76]	; 0x4c
    cc14:	e7e6      	b.n	cbe4 <__sfp+0x48>
    cc16:	46c0      	nop			; (mov r8, r8)
    cc18:	0000ec28 	.word	0x0000ec28

0000cc1c <_fwalk_reent>:
    cc1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cc1e:	0004      	movs	r4, r0
    cc20:	0007      	movs	r7, r0
    cc22:	2600      	movs	r6, #0
    cc24:	9101      	str	r1, [sp, #4]
    cc26:	3448      	adds	r4, #72	; 0x48
    cc28:	2c00      	cmp	r4, #0
    cc2a:	d101      	bne.n	cc30 <_fwalk_reent+0x14>
    cc2c:	0030      	movs	r0, r6
    cc2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    cc30:	6863      	ldr	r3, [r4, #4]
    cc32:	68a5      	ldr	r5, [r4, #8]
    cc34:	9300      	str	r3, [sp, #0]
    cc36:	9b00      	ldr	r3, [sp, #0]
    cc38:	3b01      	subs	r3, #1
    cc3a:	9300      	str	r3, [sp, #0]
    cc3c:	d501      	bpl.n	cc42 <_fwalk_reent+0x26>
    cc3e:	6824      	ldr	r4, [r4, #0]
    cc40:	e7f2      	b.n	cc28 <_fwalk_reent+0xc>
    cc42:	89ab      	ldrh	r3, [r5, #12]
    cc44:	2b01      	cmp	r3, #1
    cc46:	d908      	bls.n	cc5a <_fwalk_reent+0x3e>
    cc48:	220e      	movs	r2, #14
    cc4a:	5eab      	ldrsh	r3, [r5, r2]
    cc4c:	3301      	adds	r3, #1
    cc4e:	d004      	beq.n	cc5a <_fwalk_reent+0x3e>
    cc50:	0029      	movs	r1, r5
    cc52:	0038      	movs	r0, r7
    cc54:	9b01      	ldr	r3, [sp, #4]
    cc56:	4798      	blx	r3
    cc58:	4306      	orrs	r6, r0
    cc5a:	3568      	adds	r5, #104	; 0x68
    cc5c:	e7eb      	b.n	cc36 <_fwalk_reent+0x1a>
	...

0000cc60 <__swhatbuf_r>:
    cc60:	b570      	push	{r4, r5, r6, lr}
    cc62:	000e      	movs	r6, r1
    cc64:	001d      	movs	r5, r3
    cc66:	230e      	movs	r3, #14
    cc68:	5ec9      	ldrsh	r1, [r1, r3]
    cc6a:	b090      	sub	sp, #64	; 0x40
    cc6c:	0014      	movs	r4, r2
    cc6e:	2900      	cmp	r1, #0
    cc70:	da07      	bge.n	cc82 <__swhatbuf_r+0x22>
    cc72:	2300      	movs	r3, #0
    cc74:	602b      	str	r3, [r5, #0]
    cc76:	89b3      	ldrh	r3, [r6, #12]
    cc78:	061b      	lsls	r3, r3, #24
    cc7a:	d411      	bmi.n	cca0 <__swhatbuf_r+0x40>
    cc7c:	2380      	movs	r3, #128	; 0x80
    cc7e:	00db      	lsls	r3, r3, #3
    cc80:	e00f      	b.n	cca2 <__swhatbuf_r+0x42>
    cc82:	aa01      	add	r2, sp, #4
    cc84:	f000 fd2e 	bl	d6e4 <_fstat_r>
    cc88:	2800      	cmp	r0, #0
    cc8a:	dbf2      	blt.n	cc72 <__swhatbuf_r+0x12>
    cc8c:	22f0      	movs	r2, #240	; 0xf0
    cc8e:	9b02      	ldr	r3, [sp, #8]
    cc90:	0212      	lsls	r2, r2, #8
    cc92:	4013      	ands	r3, r2
    cc94:	4a05      	ldr	r2, [pc, #20]	; (ccac <__swhatbuf_r+0x4c>)
    cc96:	189b      	adds	r3, r3, r2
    cc98:	425a      	negs	r2, r3
    cc9a:	4153      	adcs	r3, r2
    cc9c:	602b      	str	r3, [r5, #0]
    cc9e:	e7ed      	b.n	cc7c <__swhatbuf_r+0x1c>
    cca0:	2340      	movs	r3, #64	; 0x40
    cca2:	2000      	movs	r0, #0
    cca4:	6023      	str	r3, [r4, #0]
    cca6:	b010      	add	sp, #64	; 0x40
    cca8:	bd70      	pop	{r4, r5, r6, pc}
    ccaa:	46c0      	nop			; (mov r8, r8)
    ccac:	ffffe000 	.word	0xffffe000

0000ccb0 <__smakebuf_r>:
    ccb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ccb2:	2602      	movs	r6, #2
    ccb4:	898b      	ldrh	r3, [r1, #12]
    ccb6:	0005      	movs	r5, r0
    ccb8:	000c      	movs	r4, r1
    ccba:	4233      	tst	r3, r6
    ccbc:	d006      	beq.n	cccc <__smakebuf_r+0x1c>
    ccbe:	0023      	movs	r3, r4
    ccc0:	3347      	adds	r3, #71	; 0x47
    ccc2:	6023      	str	r3, [r4, #0]
    ccc4:	6123      	str	r3, [r4, #16]
    ccc6:	2301      	movs	r3, #1
    ccc8:	6163      	str	r3, [r4, #20]
    ccca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    cccc:	ab01      	add	r3, sp, #4
    ccce:	466a      	mov	r2, sp
    ccd0:	f7ff ffc6 	bl	cc60 <__swhatbuf_r>
    ccd4:	9900      	ldr	r1, [sp, #0]
    ccd6:	0007      	movs	r7, r0
    ccd8:	0028      	movs	r0, r5
    ccda:	f7ff fb5d 	bl	c398 <_malloc_r>
    ccde:	2800      	cmp	r0, #0
    cce0:	d106      	bne.n	ccf0 <__smakebuf_r+0x40>
    cce2:	220c      	movs	r2, #12
    cce4:	5ea3      	ldrsh	r3, [r4, r2]
    cce6:	059a      	lsls	r2, r3, #22
    cce8:	d4ef      	bmi.n	ccca <__smakebuf_r+0x1a>
    ccea:	431e      	orrs	r6, r3
    ccec:	81a6      	strh	r6, [r4, #12]
    ccee:	e7e6      	b.n	ccbe <__smakebuf_r+0xe>
    ccf0:	4b0d      	ldr	r3, [pc, #52]	; (cd28 <__smakebuf_r+0x78>)
    ccf2:	62ab      	str	r3, [r5, #40]	; 0x28
    ccf4:	2380      	movs	r3, #128	; 0x80
    ccf6:	89a2      	ldrh	r2, [r4, #12]
    ccf8:	6020      	str	r0, [r4, #0]
    ccfa:	4313      	orrs	r3, r2
    ccfc:	81a3      	strh	r3, [r4, #12]
    ccfe:	9b00      	ldr	r3, [sp, #0]
    cd00:	6120      	str	r0, [r4, #16]
    cd02:	6163      	str	r3, [r4, #20]
    cd04:	9b01      	ldr	r3, [sp, #4]
    cd06:	2b00      	cmp	r3, #0
    cd08:	d00a      	beq.n	cd20 <__smakebuf_r+0x70>
    cd0a:	230e      	movs	r3, #14
    cd0c:	5ee1      	ldrsh	r1, [r4, r3]
    cd0e:	0028      	movs	r0, r5
    cd10:	f000 fcfa 	bl	d708 <_isatty_r>
    cd14:	2800      	cmp	r0, #0
    cd16:	d003      	beq.n	cd20 <__smakebuf_r+0x70>
    cd18:	2301      	movs	r3, #1
    cd1a:	89a2      	ldrh	r2, [r4, #12]
    cd1c:	4313      	orrs	r3, r2
    cd1e:	81a3      	strh	r3, [r4, #12]
    cd20:	89a0      	ldrh	r0, [r4, #12]
    cd22:	4338      	orrs	r0, r7
    cd24:	81a0      	strh	r0, [r4, #12]
    cd26:	e7d0      	b.n	ccca <__smakebuf_r+0x1a>
    cd28:	0000cab1 	.word	0x0000cab1

0000cd2c <__malloc_lock>:
    cd2c:	4770      	bx	lr

0000cd2e <__malloc_unlock>:
    cd2e:	4770      	bx	lr

0000cd30 <__ssputs_r>:
    cd30:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd32:	688e      	ldr	r6, [r1, #8]
    cd34:	b085      	sub	sp, #20
    cd36:	0007      	movs	r7, r0
    cd38:	000c      	movs	r4, r1
    cd3a:	9203      	str	r2, [sp, #12]
    cd3c:	9301      	str	r3, [sp, #4]
    cd3e:	429e      	cmp	r6, r3
    cd40:	d839      	bhi.n	cdb6 <__ssputs_r+0x86>
    cd42:	2390      	movs	r3, #144	; 0x90
    cd44:	898a      	ldrh	r2, [r1, #12]
    cd46:	00db      	lsls	r3, r3, #3
    cd48:	421a      	tst	r2, r3
    cd4a:	d034      	beq.n	cdb6 <__ssputs_r+0x86>
    cd4c:	2503      	movs	r5, #3
    cd4e:	6909      	ldr	r1, [r1, #16]
    cd50:	6823      	ldr	r3, [r4, #0]
    cd52:	1a5b      	subs	r3, r3, r1
    cd54:	9302      	str	r3, [sp, #8]
    cd56:	6963      	ldr	r3, [r4, #20]
    cd58:	9802      	ldr	r0, [sp, #8]
    cd5a:	435d      	muls	r5, r3
    cd5c:	0feb      	lsrs	r3, r5, #31
    cd5e:	195d      	adds	r5, r3, r5
    cd60:	9b01      	ldr	r3, [sp, #4]
    cd62:	106d      	asrs	r5, r5, #1
    cd64:	3301      	adds	r3, #1
    cd66:	181b      	adds	r3, r3, r0
    cd68:	42ab      	cmp	r3, r5
    cd6a:	d900      	bls.n	cd6e <__ssputs_r+0x3e>
    cd6c:	001d      	movs	r5, r3
    cd6e:	0553      	lsls	r3, r2, #21
    cd70:	d532      	bpl.n	cdd8 <__ssputs_r+0xa8>
    cd72:	0029      	movs	r1, r5
    cd74:	0038      	movs	r0, r7
    cd76:	f7ff fb0f 	bl	c398 <_malloc_r>
    cd7a:	1e06      	subs	r6, r0, #0
    cd7c:	d109      	bne.n	cd92 <__ssputs_r+0x62>
    cd7e:	230c      	movs	r3, #12
    cd80:	603b      	str	r3, [r7, #0]
    cd82:	2340      	movs	r3, #64	; 0x40
    cd84:	2001      	movs	r0, #1
    cd86:	89a2      	ldrh	r2, [r4, #12]
    cd88:	4240      	negs	r0, r0
    cd8a:	4313      	orrs	r3, r2
    cd8c:	81a3      	strh	r3, [r4, #12]
    cd8e:	b005      	add	sp, #20
    cd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd92:	9a02      	ldr	r2, [sp, #8]
    cd94:	6921      	ldr	r1, [r4, #16]
    cd96:	f7ff fa91 	bl	c2bc <memcpy>
    cd9a:	89a3      	ldrh	r3, [r4, #12]
    cd9c:	4a14      	ldr	r2, [pc, #80]	; (cdf0 <__ssputs_r+0xc0>)
    cd9e:	401a      	ands	r2, r3
    cda0:	2380      	movs	r3, #128	; 0x80
    cda2:	4313      	orrs	r3, r2
    cda4:	81a3      	strh	r3, [r4, #12]
    cda6:	9b02      	ldr	r3, [sp, #8]
    cda8:	6126      	str	r6, [r4, #16]
    cdaa:	18f6      	adds	r6, r6, r3
    cdac:	6026      	str	r6, [r4, #0]
    cdae:	6165      	str	r5, [r4, #20]
    cdb0:	9e01      	ldr	r6, [sp, #4]
    cdb2:	1aed      	subs	r5, r5, r3
    cdb4:	60a5      	str	r5, [r4, #8]
    cdb6:	9b01      	ldr	r3, [sp, #4]
    cdb8:	42b3      	cmp	r3, r6
    cdba:	d200      	bcs.n	cdbe <__ssputs_r+0x8e>
    cdbc:	001e      	movs	r6, r3
    cdbe:	0032      	movs	r2, r6
    cdc0:	9903      	ldr	r1, [sp, #12]
    cdc2:	6820      	ldr	r0, [r4, #0]
    cdc4:	f7ff fa83 	bl	c2ce <memmove>
    cdc8:	68a3      	ldr	r3, [r4, #8]
    cdca:	2000      	movs	r0, #0
    cdcc:	1b9b      	subs	r3, r3, r6
    cdce:	60a3      	str	r3, [r4, #8]
    cdd0:	6823      	ldr	r3, [r4, #0]
    cdd2:	199e      	adds	r6, r3, r6
    cdd4:	6026      	str	r6, [r4, #0]
    cdd6:	e7da      	b.n	cd8e <__ssputs_r+0x5e>
    cdd8:	002a      	movs	r2, r5
    cdda:	0038      	movs	r0, r7
    cddc:	f000 fcc5 	bl	d76a <_realloc_r>
    cde0:	1e06      	subs	r6, r0, #0
    cde2:	d1e0      	bne.n	cda6 <__ssputs_r+0x76>
    cde4:	6921      	ldr	r1, [r4, #16]
    cde6:	0038      	movs	r0, r7
    cde8:	f7ff fa8c 	bl	c304 <_free_r>
    cdec:	e7c7      	b.n	cd7e <__ssputs_r+0x4e>
    cdee:	46c0      	nop			; (mov r8, r8)
    cdf0:	fffffb7f 	.word	0xfffffb7f

0000cdf4 <_svfiprintf_r>:
    cdf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdf6:	b09f      	sub	sp, #124	; 0x7c
    cdf8:	9002      	str	r0, [sp, #8]
    cdfa:	9305      	str	r3, [sp, #20]
    cdfc:	898b      	ldrh	r3, [r1, #12]
    cdfe:	000f      	movs	r7, r1
    ce00:	0016      	movs	r6, r2
    ce02:	061b      	lsls	r3, r3, #24
    ce04:	d511      	bpl.n	ce2a <_svfiprintf_r+0x36>
    ce06:	690b      	ldr	r3, [r1, #16]
    ce08:	2b00      	cmp	r3, #0
    ce0a:	d10e      	bne.n	ce2a <_svfiprintf_r+0x36>
    ce0c:	2140      	movs	r1, #64	; 0x40
    ce0e:	f7ff fac3 	bl	c398 <_malloc_r>
    ce12:	6038      	str	r0, [r7, #0]
    ce14:	6138      	str	r0, [r7, #16]
    ce16:	2800      	cmp	r0, #0
    ce18:	d105      	bne.n	ce26 <_svfiprintf_r+0x32>
    ce1a:	230c      	movs	r3, #12
    ce1c:	9a02      	ldr	r2, [sp, #8]
    ce1e:	3801      	subs	r0, #1
    ce20:	6013      	str	r3, [r2, #0]
    ce22:	b01f      	add	sp, #124	; 0x7c
    ce24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce26:	2340      	movs	r3, #64	; 0x40
    ce28:	617b      	str	r3, [r7, #20]
    ce2a:	2300      	movs	r3, #0
    ce2c:	ad06      	add	r5, sp, #24
    ce2e:	616b      	str	r3, [r5, #20]
    ce30:	3320      	adds	r3, #32
    ce32:	766b      	strb	r3, [r5, #25]
    ce34:	3310      	adds	r3, #16
    ce36:	76ab      	strb	r3, [r5, #26]
    ce38:	0034      	movs	r4, r6
    ce3a:	7823      	ldrb	r3, [r4, #0]
    ce3c:	2b00      	cmp	r3, #0
    ce3e:	d147      	bne.n	ced0 <_svfiprintf_r+0xdc>
    ce40:	1ba3      	subs	r3, r4, r6
    ce42:	9304      	str	r3, [sp, #16]
    ce44:	d00d      	beq.n	ce62 <_svfiprintf_r+0x6e>
    ce46:	1ba3      	subs	r3, r4, r6
    ce48:	0032      	movs	r2, r6
    ce4a:	0039      	movs	r1, r7
    ce4c:	9802      	ldr	r0, [sp, #8]
    ce4e:	f7ff ff6f 	bl	cd30 <__ssputs_r>
    ce52:	1c43      	adds	r3, r0, #1
    ce54:	d100      	bne.n	ce58 <_svfiprintf_r+0x64>
    ce56:	e0b5      	b.n	cfc4 <_svfiprintf_r+0x1d0>
    ce58:	696a      	ldr	r2, [r5, #20]
    ce5a:	9b04      	ldr	r3, [sp, #16]
    ce5c:	4694      	mov	ip, r2
    ce5e:	4463      	add	r3, ip
    ce60:	616b      	str	r3, [r5, #20]
    ce62:	7823      	ldrb	r3, [r4, #0]
    ce64:	2b00      	cmp	r3, #0
    ce66:	d100      	bne.n	ce6a <_svfiprintf_r+0x76>
    ce68:	e0ac      	b.n	cfc4 <_svfiprintf_r+0x1d0>
    ce6a:	2201      	movs	r2, #1
    ce6c:	2300      	movs	r3, #0
    ce6e:	4252      	negs	r2, r2
    ce70:	606a      	str	r2, [r5, #4]
    ce72:	a902      	add	r1, sp, #8
    ce74:	3254      	adds	r2, #84	; 0x54
    ce76:	1852      	adds	r2, r2, r1
    ce78:	3401      	adds	r4, #1
    ce7a:	602b      	str	r3, [r5, #0]
    ce7c:	60eb      	str	r3, [r5, #12]
    ce7e:	60ab      	str	r3, [r5, #8]
    ce80:	7013      	strb	r3, [r2, #0]
    ce82:	65ab      	str	r3, [r5, #88]	; 0x58
    ce84:	4e58      	ldr	r6, [pc, #352]	; (cfe8 <_svfiprintf_r+0x1f4>)
    ce86:	2205      	movs	r2, #5
    ce88:	7821      	ldrb	r1, [r4, #0]
    ce8a:	0030      	movs	r0, r6
    ce8c:	f000 fc62 	bl	d754 <memchr>
    ce90:	1c62      	adds	r2, r4, #1
    ce92:	2800      	cmp	r0, #0
    ce94:	d120      	bne.n	ced8 <_svfiprintf_r+0xe4>
    ce96:	6829      	ldr	r1, [r5, #0]
    ce98:	06cb      	lsls	r3, r1, #27
    ce9a:	d504      	bpl.n	cea6 <_svfiprintf_r+0xb2>
    ce9c:	2353      	movs	r3, #83	; 0x53
    ce9e:	ae02      	add	r6, sp, #8
    cea0:	3020      	adds	r0, #32
    cea2:	199b      	adds	r3, r3, r6
    cea4:	7018      	strb	r0, [r3, #0]
    cea6:	070b      	lsls	r3, r1, #28
    cea8:	d504      	bpl.n	ceb4 <_svfiprintf_r+0xc0>
    ceaa:	2353      	movs	r3, #83	; 0x53
    ceac:	202b      	movs	r0, #43	; 0x2b
    ceae:	ae02      	add	r6, sp, #8
    ceb0:	199b      	adds	r3, r3, r6
    ceb2:	7018      	strb	r0, [r3, #0]
    ceb4:	7823      	ldrb	r3, [r4, #0]
    ceb6:	2b2a      	cmp	r3, #42	; 0x2a
    ceb8:	d016      	beq.n	cee8 <_svfiprintf_r+0xf4>
    ceba:	2000      	movs	r0, #0
    cebc:	210a      	movs	r1, #10
    cebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cec0:	7822      	ldrb	r2, [r4, #0]
    cec2:	3a30      	subs	r2, #48	; 0x30
    cec4:	2a09      	cmp	r2, #9
    cec6:	d955      	bls.n	cf74 <_svfiprintf_r+0x180>
    cec8:	2800      	cmp	r0, #0
    ceca:	d015      	beq.n	cef8 <_svfiprintf_r+0x104>
    cecc:	9309      	str	r3, [sp, #36]	; 0x24
    cece:	e013      	b.n	cef8 <_svfiprintf_r+0x104>
    ced0:	2b25      	cmp	r3, #37	; 0x25
    ced2:	d0b5      	beq.n	ce40 <_svfiprintf_r+0x4c>
    ced4:	3401      	adds	r4, #1
    ced6:	e7b0      	b.n	ce3a <_svfiprintf_r+0x46>
    ced8:	2301      	movs	r3, #1
    ceda:	1b80      	subs	r0, r0, r6
    cedc:	4083      	lsls	r3, r0
    cede:	6829      	ldr	r1, [r5, #0]
    cee0:	0014      	movs	r4, r2
    cee2:	430b      	orrs	r3, r1
    cee4:	602b      	str	r3, [r5, #0]
    cee6:	e7cd      	b.n	ce84 <_svfiprintf_r+0x90>
    cee8:	9b05      	ldr	r3, [sp, #20]
    ceea:	1d18      	adds	r0, r3, #4
    ceec:	681b      	ldr	r3, [r3, #0]
    ceee:	9005      	str	r0, [sp, #20]
    cef0:	2b00      	cmp	r3, #0
    cef2:	db39      	blt.n	cf68 <_svfiprintf_r+0x174>
    cef4:	9309      	str	r3, [sp, #36]	; 0x24
    cef6:	0014      	movs	r4, r2
    cef8:	7823      	ldrb	r3, [r4, #0]
    cefa:	2b2e      	cmp	r3, #46	; 0x2e
    cefc:	d10b      	bne.n	cf16 <_svfiprintf_r+0x122>
    cefe:	7863      	ldrb	r3, [r4, #1]
    cf00:	1c62      	adds	r2, r4, #1
    cf02:	2b2a      	cmp	r3, #42	; 0x2a
    cf04:	d13e      	bne.n	cf84 <_svfiprintf_r+0x190>
    cf06:	9b05      	ldr	r3, [sp, #20]
    cf08:	3402      	adds	r4, #2
    cf0a:	1d1a      	adds	r2, r3, #4
    cf0c:	681b      	ldr	r3, [r3, #0]
    cf0e:	9205      	str	r2, [sp, #20]
    cf10:	2b00      	cmp	r3, #0
    cf12:	db34      	blt.n	cf7e <_svfiprintf_r+0x18a>
    cf14:	9307      	str	r3, [sp, #28]
    cf16:	4e35      	ldr	r6, [pc, #212]	; (cfec <_svfiprintf_r+0x1f8>)
    cf18:	7821      	ldrb	r1, [r4, #0]
    cf1a:	2203      	movs	r2, #3
    cf1c:	0030      	movs	r0, r6
    cf1e:	f000 fc19 	bl	d754 <memchr>
    cf22:	2800      	cmp	r0, #0
    cf24:	d006      	beq.n	cf34 <_svfiprintf_r+0x140>
    cf26:	2340      	movs	r3, #64	; 0x40
    cf28:	1b80      	subs	r0, r0, r6
    cf2a:	4083      	lsls	r3, r0
    cf2c:	682a      	ldr	r2, [r5, #0]
    cf2e:	3401      	adds	r4, #1
    cf30:	4313      	orrs	r3, r2
    cf32:	602b      	str	r3, [r5, #0]
    cf34:	7821      	ldrb	r1, [r4, #0]
    cf36:	2206      	movs	r2, #6
    cf38:	482d      	ldr	r0, [pc, #180]	; (cff0 <_svfiprintf_r+0x1fc>)
    cf3a:	1c66      	adds	r6, r4, #1
    cf3c:	7629      	strb	r1, [r5, #24]
    cf3e:	f000 fc09 	bl	d754 <memchr>
    cf42:	2800      	cmp	r0, #0
    cf44:	d046      	beq.n	cfd4 <_svfiprintf_r+0x1e0>
    cf46:	4b2b      	ldr	r3, [pc, #172]	; (cff4 <_svfiprintf_r+0x200>)
    cf48:	2b00      	cmp	r3, #0
    cf4a:	d12f      	bne.n	cfac <_svfiprintf_r+0x1b8>
    cf4c:	6829      	ldr	r1, [r5, #0]
    cf4e:	9b05      	ldr	r3, [sp, #20]
    cf50:	2207      	movs	r2, #7
    cf52:	05c9      	lsls	r1, r1, #23
    cf54:	d528      	bpl.n	cfa8 <_svfiprintf_r+0x1b4>
    cf56:	189b      	adds	r3, r3, r2
    cf58:	4393      	bics	r3, r2
    cf5a:	3308      	adds	r3, #8
    cf5c:	9305      	str	r3, [sp, #20]
    cf5e:	696b      	ldr	r3, [r5, #20]
    cf60:	9a03      	ldr	r2, [sp, #12]
    cf62:	189b      	adds	r3, r3, r2
    cf64:	616b      	str	r3, [r5, #20]
    cf66:	e767      	b.n	ce38 <_svfiprintf_r+0x44>
    cf68:	425b      	negs	r3, r3
    cf6a:	60eb      	str	r3, [r5, #12]
    cf6c:	2302      	movs	r3, #2
    cf6e:	430b      	orrs	r3, r1
    cf70:	602b      	str	r3, [r5, #0]
    cf72:	e7c0      	b.n	cef6 <_svfiprintf_r+0x102>
    cf74:	434b      	muls	r3, r1
    cf76:	3401      	adds	r4, #1
    cf78:	189b      	adds	r3, r3, r2
    cf7a:	2001      	movs	r0, #1
    cf7c:	e7a0      	b.n	cec0 <_svfiprintf_r+0xcc>
    cf7e:	2301      	movs	r3, #1
    cf80:	425b      	negs	r3, r3
    cf82:	e7c7      	b.n	cf14 <_svfiprintf_r+0x120>
    cf84:	2300      	movs	r3, #0
    cf86:	0014      	movs	r4, r2
    cf88:	200a      	movs	r0, #10
    cf8a:	001a      	movs	r2, r3
    cf8c:	606b      	str	r3, [r5, #4]
    cf8e:	7821      	ldrb	r1, [r4, #0]
    cf90:	3930      	subs	r1, #48	; 0x30
    cf92:	2909      	cmp	r1, #9
    cf94:	d903      	bls.n	cf9e <_svfiprintf_r+0x1aa>
    cf96:	2b00      	cmp	r3, #0
    cf98:	d0bd      	beq.n	cf16 <_svfiprintf_r+0x122>
    cf9a:	9207      	str	r2, [sp, #28]
    cf9c:	e7bb      	b.n	cf16 <_svfiprintf_r+0x122>
    cf9e:	4342      	muls	r2, r0
    cfa0:	3401      	adds	r4, #1
    cfa2:	1852      	adds	r2, r2, r1
    cfa4:	2301      	movs	r3, #1
    cfa6:	e7f2      	b.n	cf8e <_svfiprintf_r+0x19a>
    cfa8:	3307      	adds	r3, #7
    cfaa:	e7d5      	b.n	cf58 <_svfiprintf_r+0x164>
    cfac:	ab05      	add	r3, sp, #20
    cfae:	9300      	str	r3, [sp, #0]
    cfb0:	003a      	movs	r2, r7
    cfb2:	4b11      	ldr	r3, [pc, #68]	; (cff8 <_svfiprintf_r+0x204>)
    cfb4:	0029      	movs	r1, r5
    cfb6:	9802      	ldr	r0, [sp, #8]
    cfb8:	e000      	b.n	cfbc <_svfiprintf_r+0x1c8>
    cfba:	bf00      	nop
    cfbc:	9003      	str	r0, [sp, #12]
    cfbe:	9b03      	ldr	r3, [sp, #12]
    cfc0:	3301      	adds	r3, #1
    cfc2:	d1cc      	bne.n	cf5e <_svfiprintf_r+0x16a>
    cfc4:	89bb      	ldrh	r3, [r7, #12]
    cfc6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cfc8:	065b      	lsls	r3, r3, #25
    cfca:	d400      	bmi.n	cfce <_svfiprintf_r+0x1da>
    cfcc:	e729      	b.n	ce22 <_svfiprintf_r+0x2e>
    cfce:	2001      	movs	r0, #1
    cfd0:	4240      	negs	r0, r0
    cfd2:	e726      	b.n	ce22 <_svfiprintf_r+0x2e>
    cfd4:	ab05      	add	r3, sp, #20
    cfd6:	9300      	str	r3, [sp, #0]
    cfd8:	003a      	movs	r2, r7
    cfda:	4b07      	ldr	r3, [pc, #28]	; (cff8 <_svfiprintf_r+0x204>)
    cfdc:	0029      	movs	r1, r5
    cfde:	9802      	ldr	r0, [sp, #8]
    cfe0:	f000 f9be 	bl	d360 <_printf_i>
    cfe4:	e7ea      	b.n	cfbc <_svfiprintf_r+0x1c8>
    cfe6:	46c0      	nop			; (mov r8, r8)
    cfe8:	0000ec8c 	.word	0x0000ec8c
    cfec:	0000ec92 	.word	0x0000ec92
    cff0:	0000ec96 	.word	0x0000ec96
    cff4:	00000000 	.word	0x00000000
    cff8:	0000cd31 	.word	0x0000cd31

0000cffc <__sfputc_r>:
    cffc:	6893      	ldr	r3, [r2, #8]
    cffe:	b510      	push	{r4, lr}
    d000:	3b01      	subs	r3, #1
    d002:	6093      	str	r3, [r2, #8]
    d004:	2b00      	cmp	r3, #0
    d006:	da05      	bge.n	d014 <__sfputc_r+0x18>
    d008:	6994      	ldr	r4, [r2, #24]
    d00a:	42a3      	cmp	r3, r4
    d00c:	db08      	blt.n	d020 <__sfputc_r+0x24>
    d00e:	b2cb      	uxtb	r3, r1
    d010:	2b0a      	cmp	r3, #10
    d012:	d005      	beq.n	d020 <__sfputc_r+0x24>
    d014:	6813      	ldr	r3, [r2, #0]
    d016:	1c58      	adds	r0, r3, #1
    d018:	6010      	str	r0, [r2, #0]
    d01a:	7019      	strb	r1, [r3, #0]
    d01c:	b2c8      	uxtb	r0, r1
    d01e:	bd10      	pop	{r4, pc}
    d020:	f7ff fbc4 	bl	c7ac <__swbuf_r>
    d024:	e7fb      	b.n	d01e <__sfputc_r+0x22>

0000d026 <__sfputs_r>:
    d026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d028:	0006      	movs	r6, r0
    d02a:	000f      	movs	r7, r1
    d02c:	0014      	movs	r4, r2
    d02e:	18d5      	adds	r5, r2, r3
    d030:	42ac      	cmp	r4, r5
    d032:	d101      	bne.n	d038 <__sfputs_r+0x12>
    d034:	2000      	movs	r0, #0
    d036:	e007      	b.n	d048 <__sfputs_r+0x22>
    d038:	7821      	ldrb	r1, [r4, #0]
    d03a:	003a      	movs	r2, r7
    d03c:	0030      	movs	r0, r6
    d03e:	f7ff ffdd 	bl	cffc <__sfputc_r>
    d042:	3401      	adds	r4, #1
    d044:	1c43      	adds	r3, r0, #1
    d046:	d1f3      	bne.n	d030 <__sfputs_r+0xa>
    d048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000d04c <_vfiprintf_r>:
    d04c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d04e:	b09f      	sub	sp, #124	; 0x7c
    d050:	0006      	movs	r6, r0
    d052:	000f      	movs	r7, r1
    d054:	0014      	movs	r4, r2
    d056:	9305      	str	r3, [sp, #20]
    d058:	2800      	cmp	r0, #0
    d05a:	d004      	beq.n	d066 <_vfiprintf_r+0x1a>
    d05c:	6983      	ldr	r3, [r0, #24]
    d05e:	2b00      	cmp	r3, #0
    d060:	d101      	bne.n	d066 <_vfiprintf_r+0x1a>
    d062:	f7ff fd67 	bl	cb34 <__sinit>
    d066:	4b7f      	ldr	r3, [pc, #508]	; (d264 <_vfiprintf_r+0x218>)
    d068:	429f      	cmp	r7, r3
    d06a:	d15c      	bne.n	d126 <_vfiprintf_r+0xda>
    d06c:	6877      	ldr	r7, [r6, #4]
    d06e:	89bb      	ldrh	r3, [r7, #12]
    d070:	071b      	lsls	r3, r3, #28
    d072:	d562      	bpl.n	d13a <_vfiprintf_r+0xee>
    d074:	693b      	ldr	r3, [r7, #16]
    d076:	2b00      	cmp	r3, #0
    d078:	d05f      	beq.n	d13a <_vfiprintf_r+0xee>
    d07a:	2300      	movs	r3, #0
    d07c:	ad06      	add	r5, sp, #24
    d07e:	616b      	str	r3, [r5, #20]
    d080:	3320      	adds	r3, #32
    d082:	766b      	strb	r3, [r5, #25]
    d084:	3310      	adds	r3, #16
    d086:	76ab      	strb	r3, [r5, #26]
    d088:	9402      	str	r4, [sp, #8]
    d08a:	9c02      	ldr	r4, [sp, #8]
    d08c:	7823      	ldrb	r3, [r4, #0]
    d08e:	2b00      	cmp	r3, #0
    d090:	d15d      	bne.n	d14e <_vfiprintf_r+0x102>
    d092:	9b02      	ldr	r3, [sp, #8]
    d094:	1ae3      	subs	r3, r4, r3
    d096:	9304      	str	r3, [sp, #16]
    d098:	d00d      	beq.n	d0b6 <_vfiprintf_r+0x6a>
    d09a:	9b04      	ldr	r3, [sp, #16]
    d09c:	9a02      	ldr	r2, [sp, #8]
    d09e:	0039      	movs	r1, r7
    d0a0:	0030      	movs	r0, r6
    d0a2:	f7ff ffc0 	bl	d026 <__sfputs_r>
    d0a6:	1c43      	adds	r3, r0, #1
    d0a8:	d100      	bne.n	d0ac <_vfiprintf_r+0x60>
    d0aa:	e0cc      	b.n	d246 <_vfiprintf_r+0x1fa>
    d0ac:	696a      	ldr	r2, [r5, #20]
    d0ae:	9b04      	ldr	r3, [sp, #16]
    d0b0:	4694      	mov	ip, r2
    d0b2:	4463      	add	r3, ip
    d0b4:	616b      	str	r3, [r5, #20]
    d0b6:	7823      	ldrb	r3, [r4, #0]
    d0b8:	2b00      	cmp	r3, #0
    d0ba:	d100      	bne.n	d0be <_vfiprintf_r+0x72>
    d0bc:	e0c3      	b.n	d246 <_vfiprintf_r+0x1fa>
    d0be:	2201      	movs	r2, #1
    d0c0:	2300      	movs	r3, #0
    d0c2:	4252      	negs	r2, r2
    d0c4:	606a      	str	r2, [r5, #4]
    d0c6:	a902      	add	r1, sp, #8
    d0c8:	3254      	adds	r2, #84	; 0x54
    d0ca:	1852      	adds	r2, r2, r1
    d0cc:	3401      	adds	r4, #1
    d0ce:	602b      	str	r3, [r5, #0]
    d0d0:	60eb      	str	r3, [r5, #12]
    d0d2:	60ab      	str	r3, [r5, #8]
    d0d4:	7013      	strb	r3, [r2, #0]
    d0d6:	65ab      	str	r3, [r5, #88]	; 0x58
    d0d8:	7821      	ldrb	r1, [r4, #0]
    d0da:	2205      	movs	r2, #5
    d0dc:	4862      	ldr	r0, [pc, #392]	; (d268 <_vfiprintf_r+0x21c>)
    d0de:	f000 fb39 	bl	d754 <memchr>
    d0e2:	1c63      	adds	r3, r4, #1
    d0e4:	469c      	mov	ip, r3
    d0e6:	2800      	cmp	r0, #0
    d0e8:	d135      	bne.n	d156 <_vfiprintf_r+0x10a>
    d0ea:	6829      	ldr	r1, [r5, #0]
    d0ec:	06cb      	lsls	r3, r1, #27
    d0ee:	d504      	bpl.n	d0fa <_vfiprintf_r+0xae>
    d0f0:	2353      	movs	r3, #83	; 0x53
    d0f2:	aa02      	add	r2, sp, #8
    d0f4:	3020      	adds	r0, #32
    d0f6:	189b      	adds	r3, r3, r2
    d0f8:	7018      	strb	r0, [r3, #0]
    d0fa:	070b      	lsls	r3, r1, #28
    d0fc:	d504      	bpl.n	d108 <_vfiprintf_r+0xbc>
    d0fe:	2353      	movs	r3, #83	; 0x53
    d100:	202b      	movs	r0, #43	; 0x2b
    d102:	aa02      	add	r2, sp, #8
    d104:	189b      	adds	r3, r3, r2
    d106:	7018      	strb	r0, [r3, #0]
    d108:	7823      	ldrb	r3, [r4, #0]
    d10a:	2b2a      	cmp	r3, #42	; 0x2a
    d10c:	d02c      	beq.n	d168 <_vfiprintf_r+0x11c>
    d10e:	2000      	movs	r0, #0
    d110:	210a      	movs	r1, #10
    d112:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d114:	7822      	ldrb	r2, [r4, #0]
    d116:	3a30      	subs	r2, #48	; 0x30
    d118:	2a09      	cmp	r2, #9
    d11a:	d800      	bhi.n	d11e <_vfiprintf_r+0xd2>
    d11c:	e06b      	b.n	d1f6 <_vfiprintf_r+0x1aa>
    d11e:	2800      	cmp	r0, #0
    d120:	d02a      	beq.n	d178 <_vfiprintf_r+0x12c>
    d122:	9309      	str	r3, [sp, #36]	; 0x24
    d124:	e028      	b.n	d178 <_vfiprintf_r+0x12c>
    d126:	4b51      	ldr	r3, [pc, #324]	; (d26c <_vfiprintf_r+0x220>)
    d128:	429f      	cmp	r7, r3
    d12a:	d101      	bne.n	d130 <_vfiprintf_r+0xe4>
    d12c:	68b7      	ldr	r7, [r6, #8]
    d12e:	e79e      	b.n	d06e <_vfiprintf_r+0x22>
    d130:	4b4f      	ldr	r3, [pc, #316]	; (d270 <_vfiprintf_r+0x224>)
    d132:	429f      	cmp	r7, r3
    d134:	d19b      	bne.n	d06e <_vfiprintf_r+0x22>
    d136:	68f7      	ldr	r7, [r6, #12]
    d138:	e799      	b.n	d06e <_vfiprintf_r+0x22>
    d13a:	0039      	movs	r1, r7
    d13c:	0030      	movs	r0, r6
    d13e:	f7ff fb8b 	bl	c858 <__swsetup_r>
    d142:	2800      	cmp	r0, #0
    d144:	d099      	beq.n	d07a <_vfiprintf_r+0x2e>
    d146:	2001      	movs	r0, #1
    d148:	4240      	negs	r0, r0
    d14a:	b01f      	add	sp, #124	; 0x7c
    d14c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d14e:	2b25      	cmp	r3, #37	; 0x25
    d150:	d09f      	beq.n	d092 <_vfiprintf_r+0x46>
    d152:	3401      	adds	r4, #1
    d154:	e79a      	b.n	d08c <_vfiprintf_r+0x40>
    d156:	4b44      	ldr	r3, [pc, #272]	; (d268 <_vfiprintf_r+0x21c>)
    d158:	6829      	ldr	r1, [r5, #0]
    d15a:	1ac0      	subs	r0, r0, r3
    d15c:	2301      	movs	r3, #1
    d15e:	4083      	lsls	r3, r0
    d160:	430b      	orrs	r3, r1
    d162:	602b      	str	r3, [r5, #0]
    d164:	4664      	mov	r4, ip
    d166:	e7b7      	b.n	d0d8 <_vfiprintf_r+0x8c>
    d168:	9b05      	ldr	r3, [sp, #20]
    d16a:	1d18      	adds	r0, r3, #4
    d16c:	681b      	ldr	r3, [r3, #0]
    d16e:	9005      	str	r0, [sp, #20]
    d170:	2b00      	cmp	r3, #0
    d172:	db3a      	blt.n	d1ea <_vfiprintf_r+0x19e>
    d174:	9309      	str	r3, [sp, #36]	; 0x24
    d176:	4664      	mov	r4, ip
    d178:	7823      	ldrb	r3, [r4, #0]
    d17a:	2b2e      	cmp	r3, #46	; 0x2e
    d17c:	d10b      	bne.n	d196 <_vfiprintf_r+0x14a>
    d17e:	7863      	ldrb	r3, [r4, #1]
    d180:	1c62      	adds	r2, r4, #1
    d182:	2b2a      	cmp	r3, #42	; 0x2a
    d184:	d13f      	bne.n	d206 <_vfiprintf_r+0x1ba>
    d186:	9b05      	ldr	r3, [sp, #20]
    d188:	3402      	adds	r4, #2
    d18a:	1d1a      	adds	r2, r3, #4
    d18c:	681b      	ldr	r3, [r3, #0]
    d18e:	9205      	str	r2, [sp, #20]
    d190:	2b00      	cmp	r3, #0
    d192:	db35      	blt.n	d200 <_vfiprintf_r+0x1b4>
    d194:	9307      	str	r3, [sp, #28]
    d196:	7821      	ldrb	r1, [r4, #0]
    d198:	2203      	movs	r2, #3
    d19a:	4836      	ldr	r0, [pc, #216]	; (d274 <_vfiprintf_r+0x228>)
    d19c:	f000 fada 	bl	d754 <memchr>
    d1a0:	2800      	cmp	r0, #0
    d1a2:	d007      	beq.n	d1b4 <_vfiprintf_r+0x168>
    d1a4:	4b33      	ldr	r3, [pc, #204]	; (d274 <_vfiprintf_r+0x228>)
    d1a6:	682a      	ldr	r2, [r5, #0]
    d1a8:	1ac0      	subs	r0, r0, r3
    d1aa:	2340      	movs	r3, #64	; 0x40
    d1ac:	4083      	lsls	r3, r0
    d1ae:	4313      	orrs	r3, r2
    d1b0:	602b      	str	r3, [r5, #0]
    d1b2:	3401      	adds	r4, #1
    d1b4:	7821      	ldrb	r1, [r4, #0]
    d1b6:	1c63      	adds	r3, r4, #1
    d1b8:	2206      	movs	r2, #6
    d1ba:	482f      	ldr	r0, [pc, #188]	; (d278 <_vfiprintf_r+0x22c>)
    d1bc:	9302      	str	r3, [sp, #8]
    d1be:	7629      	strb	r1, [r5, #24]
    d1c0:	f000 fac8 	bl	d754 <memchr>
    d1c4:	2800      	cmp	r0, #0
    d1c6:	d044      	beq.n	d252 <_vfiprintf_r+0x206>
    d1c8:	4b2c      	ldr	r3, [pc, #176]	; (d27c <_vfiprintf_r+0x230>)
    d1ca:	2b00      	cmp	r3, #0
    d1cc:	d12f      	bne.n	d22e <_vfiprintf_r+0x1e2>
    d1ce:	6829      	ldr	r1, [r5, #0]
    d1d0:	9b05      	ldr	r3, [sp, #20]
    d1d2:	2207      	movs	r2, #7
    d1d4:	05c9      	lsls	r1, r1, #23
    d1d6:	d528      	bpl.n	d22a <_vfiprintf_r+0x1de>
    d1d8:	189b      	adds	r3, r3, r2
    d1da:	4393      	bics	r3, r2
    d1dc:	3308      	adds	r3, #8
    d1de:	9305      	str	r3, [sp, #20]
    d1e0:	696b      	ldr	r3, [r5, #20]
    d1e2:	9a03      	ldr	r2, [sp, #12]
    d1e4:	189b      	adds	r3, r3, r2
    d1e6:	616b      	str	r3, [r5, #20]
    d1e8:	e74f      	b.n	d08a <_vfiprintf_r+0x3e>
    d1ea:	425b      	negs	r3, r3
    d1ec:	60eb      	str	r3, [r5, #12]
    d1ee:	2302      	movs	r3, #2
    d1f0:	430b      	orrs	r3, r1
    d1f2:	602b      	str	r3, [r5, #0]
    d1f4:	e7bf      	b.n	d176 <_vfiprintf_r+0x12a>
    d1f6:	434b      	muls	r3, r1
    d1f8:	3401      	adds	r4, #1
    d1fa:	189b      	adds	r3, r3, r2
    d1fc:	2001      	movs	r0, #1
    d1fe:	e789      	b.n	d114 <_vfiprintf_r+0xc8>
    d200:	2301      	movs	r3, #1
    d202:	425b      	negs	r3, r3
    d204:	e7c6      	b.n	d194 <_vfiprintf_r+0x148>
    d206:	2300      	movs	r3, #0
    d208:	0014      	movs	r4, r2
    d20a:	200a      	movs	r0, #10
    d20c:	001a      	movs	r2, r3
    d20e:	606b      	str	r3, [r5, #4]
    d210:	7821      	ldrb	r1, [r4, #0]
    d212:	3930      	subs	r1, #48	; 0x30
    d214:	2909      	cmp	r1, #9
    d216:	d903      	bls.n	d220 <_vfiprintf_r+0x1d4>
    d218:	2b00      	cmp	r3, #0
    d21a:	d0bc      	beq.n	d196 <_vfiprintf_r+0x14a>
    d21c:	9207      	str	r2, [sp, #28]
    d21e:	e7ba      	b.n	d196 <_vfiprintf_r+0x14a>
    d220:	4342      	muls	r2, r0
    d222:	3401      	adds	r4, #1
    d224:	1852      	adds	r2, r2, r1
    d226:	2301      	movs	r3, #1
    d228:	e7f2      	b.n	d210 <_vfiprintf_r+0x1c4>
    d22a:	3307      	adds	r3, #7
    d22c:	e7d5      	b.n	d1da <_vfiprintf_r+0x18e>
    d22e:	ab05      	add	r3, sp, #20
    d230:	9300      	str	r3, [sp, #0]
    d232:	003a      	movs	r2, r7
    d234:	4b12      	ldr	r3, [pc, #72]	; (d280 <_vfiprintf_r+0x234>)
    d236:	0029      	movs	r1, r5
    d238:	0030      	movs	r0, r6
    d23a:	e000      	b.n	d23e <_vfiprintf_r+0x1f2>
    d23c:	bf00      	nop
    d23e:	9003      	str	r0, [sp, #12]
    d240:	9b03      	ldr	r3, [sp, #12]
    d242:	3301      	adds	r3, #1
    d244:	d1cc      	bne.n	d1e0 <_vfiprintf_r+0x194>
    d246:	89bb      	ldrh	r3, [r7, #12]
    d248:	065b      	lsls	r3, r3, #25
    d24a:	d500      	bpl.n	d24e <_vfiprintf_r+0x202>
    d24c:	e77b      	b.n	d146 <_vfiprintf_r+0xfa>
    d24e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d250:	e77b      	b.n	d14a <_vfiprintf_r+0xfe>
    d252:	ab05      	add	r3, sp, #20
    d254:	9300      	str	r3, [sp, #0]
    d256:	003a      	movs	r2, r7
    d258:	4b09      	ldr	r3, [pc, #36]	; (d280 <_vfiprintf_r+0x234>)
    d25a:	0029      	movs	r1, r5
    d25c:	0030      	movs	r0, r6
    d25e:	f000 f87f 	bl	d360 <_printf_i>
    d262:	e7ec      	b.n	d23e <_vfiprintf_r+0x1f2>
    d264:	0000ec4c 	.word	0x0000ec4c
    d268:	0000ec8c 	.word	0x0000ec8c
    d26c:	0000ec6c 	.word	0x0000ec6c
    d270:	0000ec2c 	.word	0x0000ec2c
    d274:	0000ec92 	.word	0x0000ec92
    d278:	0000ec96 	.word	0x0000ec96
    d27c:	00000000 	.word	0x00000000
    d280:	0000d027 	.word	0x0000d027

0000d284 <_printf_common>:
    d284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d286:	0015      	movs	r5, r2
    d288:	9301      	str	r3, [sp, #4]
    d28a:	688a      	ldr	r2, [r1, #8]
    d28c:	690b      	ldr	r3, [r1, #16]
    d28e:	9000      	str	r0, [sp, #0]
    d290:	000c      	movs	r4, r1
    d292:	4293      	cmp	r3, r2
    d294:	da00      	bge.n	d298 <_printf_common+0x14>
    d296:	0013      	movs	r3, r2
    d298:	0022      	movs	r2, r4
    d29a:	602b      	str	r3, [r5, #0]
    d29c:	3243      	adds	r2, #67	; 0x43
    d29e:	7812      	ldrb	r2, [r2, #0]
    d2a0:	2a00      	cmp	r2, #0
    d2a2:	d001      	beq.n	d2a8 <_printf_common+0x24>
    d2a4:	3301      	adds	r3, #1
    d2a6:	602b      	str	r3, [r5, #0]
    d2a8:	6823      	ldr	r3, [r4, #0]
    d2aa:	069b      	lsls	r3, r3, #26
    d2ac:	d502      	bpl.n	d2b4 <_printf_common+0x30>
    d2ae:	682b      	ldr	r3, [r5, #0]
    d2b0:	3302      	adds	r3, #2
    d2b2:	602b      	str	r3, [r5, #0]
    d2b4:	2706      	movs	r7, #6
    d2b6:	6823      	ldr	r3, [r4, #0]
    d2b8:	401f      	ands	r7, r3
    d2ba:	d027      	beq.n	d30c <_printf_common+0x88>
    d2bc:	0023      	movs	r3, r4
    d2be:	3343      	adds	r3, #67	; 0x43
    d2c0:	781b      	ldrb	r3, [r3, #0]
    d2c2:	1e5a      	subs	r2, r3, #1
    d2c4:	4193      	sbcs	r3, r2
    d2c6:	6822      	ldr	r2, [r4, #0]
    d2c8:	0692      	lsls	r2, r2, #26
    d2ca:	d430      	bmi.n	d32e <_printf_common+0xaa>
    d2cc:	0022      	movs	r2, r4
    d2ce:	9901      	ldr	r1, [sp, #4]
    d2d0:	3243      	adds	r2, #67	; 0x43
    d2d2:	9800      	ldr	r0, [sp, #0]
    d2d4:	9e08      	ldr	r6, [sp, #32]
    d2d6:	47b0      	blx	r6
    d2d8:	1c43      	adds	r3, r0, #1
    d2da:	d025      	beq.n	d328 <_printf_common+0xa4>
    d2dc:	2306      	movs	r3, #6
    d2de:	6820      	ldr	r0, [r4, #0]
    d2e0:	682a      	ldr	r2, [r5, #0]
    d2e2:	68e1      	ldr	r1, [r4, #12]
    d2e4:	4003      	ands	r3, r0
    d2e6:	2500      	movs	r5, #0
    d2e8:	2b04      	cmp	r3, #4
    d2ea:	d103      	bne.n	d2f4 <_printf_common+0x70>
    d2ec:	1a8d      	subs	r5, r1, r2
    d2ee:	43eb      	mvns	r3, r5
    d2f0:	17db      	asrs	r3, r3, #31
    d2f2:	401d      	ands	r5, r3
    d2f4:	68a3      	ldr	r3, [r4, #8]
    d2f6:	6922      	ldr	r2, [r4, #16]
    d2f8:	4293      	cmp	r3, r2
    d2fa:	dd01      	ble.n	d300 <_printf_common+0x7c>
    d2fc:	1a9b      	subs	r3, r3, r2
    d2fe:	18ed      	adds	r5, r5, r3
    d300:	2700      	movs	r7, #0
    d302:	42bd      	cmp	r5, r7
    d304:	d120      	bne.n	d348 <_printf_common+0xc4>
    d306:	2000      	movs	r0, #0
    d308:	e010      	b.n	d32c <_printf_common+0xa8>
    d30a:	3701      	adds	r7, #1
    d30c:	68e3      	ldr	r3, [r4, #12]
    d30e:	682a      	ldr	r2, [r5, #0]
    d310:	1a9b      	subs	r3, r3, r2
    d312:	429f      	cmp	r7, r3
    d314:	dad2      	bge.n	d2bc <_printf_common+0x38>
    d316:	0022      	movs	r2, r4
    d318:	2301      	movs	r3, #1
    d31a:	3219      	adds	r2, #25
    d31c:	9901      	ldr	r1, [sp, #4]
    d31e:	9800      	ldr	r0, [sp, #0]
    d320:	9e08      	ldr	r6, [sp, #32]
    d322:	47b0      	blx	r6
    d324:	1c43      	adds	r3, r0, #1
    d326:	d1f0      	bne.n	d30a <_printf_common+0x86>
    d328:	2001      	movs	r0, #1
    d32a:	4240      	negs	r0, r0
    d32c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d32e:	2030      	movs	r0, #48	; 0x30
    d330:	18e1      	adds	r1, r4, r3
    d332:	3143      	adds	r1, #67	; 0x43
    d334:	7008      	strb	r0, [r1, #0]
    d336:	0021      	movs	r1, r4
    d338:	1c5a      	adds	r2, r3, #1
    d33a:	3145      	adds	r1, #69	; 0x45
    d33c:	7809      	ldrb	r1, [r1, #0]
    d33e:	18a2      	adds	r2, r4, r2
    d340:	3243      	adds	r2, #67	; 0x43
    d342:	3302      	adds	r3, #2
    d344:	7011      	strb	r1, [r2, #0]
    d346:	e7c1      	b.n	d2cc <_printf_common+0x48>
    d348:	0022      	movs	r2, r4
    d34a:	2301      	movs	r3, #1
    d34c:	321a      	adds	r2, #26
    d34e:	9901      	ldr	r1, [sp, #4]
    d350:	9800      	ldr	r0, [sp, #0]
    d352:	9e08      	ldr	r6, [sp, #32]
    d354:	47b0      	blx	r6
    d356:	1c43      	adds	r3, r0, #1
    d358:	d0e6      	beq.n	d328 <_printf_common+0xa4>
    d35a:	3701      	adds	r7, #1
    d35c:	e7d1      	b.n	d302 <_printf_common+0x7e>
	...

0000d360 <_printf_i>:
    d360:	b5f0      	push	{r4, r5, r6, r7, lr}
    d362:	b08b      	sub	sp, #44	; 0x2c
    d364:	9206      	str	r2, [sp, #24]
    d366:	000a      	movs	r2, r1
    d368:	3243      	adds	r2, #67	; 0x43
    d36a:	9307      	str	r3, [sp, #28]
    d36c:	9005      	str	r0, [sp, #20]
    d36e:	9204      	str	r2, [sp, #16]
    d370:	7e0a      	ldrb	r2, [r1, #24]
    d372:	000c      	movs	r4, r1
    d374:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d376:	2a6e      	cmp	r2, #110	; 0x6e
    d378:	d100      	bne.n	d37c <_printf_i+0x1c>
    d37a:	e08f      	b.n	d49c <_printf_i+0x13c>
    d37c:	d817      	bhi.n	d3ae <_printf_i+0x4e>
    d37e:	2a63      	cmp	r2, #99	; 0x63
    d380:	d02c      	beq.n	d3dc <_printf_i+0x7c>
    d382:	d808      	bhi.n	d396 <_printf_i+0x36>
    d384:	2a00      	cmp	r2, #0
    d386:	d100      	bne.n	d38a <_printf_i+0x2a>
    d388:	e099      	b.n	d4be <_printf_i+0x15e>
    d38a:	2a58      	cmp	r2, #88	; 0x58
    d38c:	d054      	beq.n	d438 <_printf_i+0xd8>
    d38e:	0026      	movs	r6, r4
    d390:	3642      	adds	r6, #66	; 0x42
    d392:	7032      	strb	r2, [r6, #0]
    d394:	e029      	b.n	d3ea <_printf_i+0x8a>
    d396:	2a64      	cmp	r2, #100	; 0x64
    d398:	d001      	beq.n	d39e <_printf_i+0x3e>
    d39a:	2a69      	cmp	r2, #105	; 0x69
    d39c:	d1f7      	bne.n	d38e <_printf_i+0x2e>
    d39e:	6821      	ldr	r1, [r4, #0]
    d3a0:	681a      	ldr	r2, [r3, #0]
    d3a2:	0608      	lsls	r0, r1, #24
    d3a4:	d523      	bpl.n	d3ee <_printf_i+0x8e>
    d3a6:	1d11      	adds	r1, r2, #4
    d3a8:	6019      	str	r1, [r3, #0]
    d3aa:	6815      	ldr	r5, [r2, #0]
    d3ac:	e025      	b.n	d3fa <_printf_i+0x9a>
    d3ae:	2a73      	cmp	r2, #115	; 0x73
    d3b0:	d100      	bne.n	d3b4 <_printf_i+0x54>
    d3b2:	e088      	b.n	d4c6 <_printf_i+0x166>
    d3b4:	d808      	bhi.n	d3c8 <_printf_i+0x68>
    d3b6:	2a6f      	cmp	r2, #111	; 0x6f
    d3b8:	d029      	beq.n	d40e <_printf_i+0xae>
    d3ba:	2a70      	cmp	r2, #112	; 0x70
    d3bc:	d1e7      	bne.n	d38e <_printf_i+0x2e>
    d3be:	2220      	movs	r2, #32
    d3c0:	6809      	ldr	r1, [r1, #0]
    d3c2:	430a      	orrs	r2, r1
    d3c4:	6022      	str	r2, [r4, #0]
    d3c6:	e003      	b.n	d3d0 <_printf_i+0x70>
    d3c8:	2a75      	cmp	r2, #117	; 0x75
    d3ca:	d020      	beq.n	d40e <_printf_i+0xae>
    d3cc:	2a78      	cmp	r2, #120	; 0x78
    d3ce:	d1de      	bne.n	d38e <_printf_i+0x2e>
    d3d0:	0022      	movs	r2, r4
    d3d2:	2178      	movs	r1, #120	; 0x78
    d3d4:	3245      	adds	r2, #69	; 0x45
    d3d6:	7011      	strb	r1, [r2, #0]
    d3d8:	4a6c      	ldr	r2, [pc, #432]	; (d58c <_printf_i+0x22c>)
    d3da:	e030      	b.n	d43e <_printf_i+0xde>
    d3dc:	000e      	movs	r6, r1
    d3de:	681a      	ldr	r2, [r3, #0]
    d3e0:	3642      	adds	r6, #66	; 0x42
    d3e2:	1d11      	adds	r1, r2, #4
    d3e4:	6019      	str	r1, [r3, #0]
    d3e6:	6813      	ldr	r3, [r2, #0]
    d3e8:	7033      	strb	r3, [r6, #0]
    d3ea:	2301      	movs	r3, #1
    d3ec:	e079      	b.n	d4e2 <_printf_i+0x182>
    d3ee:	0649      	lsls	r1, r1, #25
    d3f0:	d5d9      	bpl.n	d3a6 <_printf_i+0x46>
    d3f2:	1d11      	adds	r1, r2, #4
    d3f4:	6019      	str	r1, [r3, #0]
    d3f6:	2300      	movs	r3, #0
    d3f8:	5ed5      	ldrsh	r5, [r2, r3]
    d3fa:	2d00      	cmp	r5, #0
    d3fc:	da03      	bge.n	d406 <_printf_i+0xa6>
    d3fe:	232d      	movs	r3, #45	; 0x2d
    d400:	9a04      	ldr	r2, [sp, #16]
    d402:	426d      	negs	r5, r5
    d404:	7013      	strb	r3, [r2, #0]
    d406:	4b62      	ldr	r3, [pc, #392]	; (d590 <_printf_i+0x230>)
    d408:	270a      	movs	r7, #10
    d40a:	9303      	str	r3, [sp, #12]
    d40c:	e02f      	b.n	d46e <_printf_i+0x10e>
    d40e:	6820      	ldr	r0, [r4, #0]
    d410:	6819      	ldr	r1, [r3, #0]
    d412:	0605      	lsls	r5, r0, #24
    d414:	d503      	bpl.n	d41e <_printf_i+0xbe>
    d416:	1d08      	adds	r0, r1, #4
    d418:	6018      	str	r0, [r3, #0]
    d41a:	680d      	ldr	r5, [r1, #0]
    d41c:	e005      	b.n	d42a <_printf_i+0xca>
    d41e:	0640      	lsls	r0, r0, #25
    d420:	d5f9      	bpl.n	d416 <_printf_i+0xb6>
    d422:	680d      	ldr	r5, [r1, #0]
    d424:	1d08      	adds	r0, r1, #4
    d426:	6018      	str	r0, [r3, #0]
    d428:	b2ad      	uxth	r5, r5
    d42a:	4b59      	ldr	r3, [pc, #356]	; (d590 <_printf_i+0x230>)
    d42c:	2708      	movs	r7, #8
    d42e:	9303      	str	r3, [sp, #12]
    d430:	2a6f      	cmp	r2, #111	; 0x6f
    d432:	d018      	beq.n	d466 <_printf_i+0x106>
    d434:	270a      	movs	r7, #10
    d436:	e016      	b.n	d466 <_printf_i+0x106>
    d438:	3145      	adds	r1, #69	; 0x45
    d43a:	700a      	strb	r2, [r1, #0]
    d43c:	4a54      	ldr	r2, [pc, #336]	; (d590 <_printf_i+0x230>)
    d43e:	9203      	str	r2, [sp, #12]
    d440:	681a      	ldr	r2, [r3, #0]
    d442:	6821      	ldr	r1, [r4, #0]
    d444:	1d10      	adds	r0, r2, #4
    d446:	6018      	str	r0, [r3, #0]
    d448:	6815      	ldr	r5, [r2, #0]
    d44a:	0608      	lsls	r0, r1, #24
    d44c:	d522      	bpl.n	d494 <_printf_i+0x134>
    d44e:	07cb      	lsls	r3, r1, #31
    d450:	d502      	bpl.n	d458 <_printf_i+0xf8>
    d452:	2320      	movs	r3, #32
    d454:	4319      	orrs	r1, r3
    d456:	6021      	str	r1, [r4, #0]
    d458:	2710      	movs	r7, #16
    d45a:	2d00      	cmp	r5, #0
    d45c:	d103      	bne.n	d466 <_printf_i+0x106>
    d45e:	2320      	movs	r3, #32
    d460:	6822      	ldr	r2, [r4, #0]
    d462:	439a      	bics	r2, r3
    d464:	6022      	str	r2, [r4, #0]
    d466:	0023      	movs	r3, r4
    d468:	2200      	movs	r2, #0
    d46a:	3343      	adds	r3, #67	; 0x43
    d46c:	701a      	strb	r2, [r3, #0]
    d46e:	6863      	ldr	r3, [r4, #4]
    d470:	60a3      	str	r3, [r4, #8]
    d472:	2b00      	cmp	r3, #0
    d474:	db5c      	blt.n	d530 <_printf_i+0x1d0>
    d476:	2204      	movs	r2, #4
    d478:	6821      	ldr	r1, [r4, #0]
    d47a:	4391      	bics	r1, r2
    d47c:	6021      	str	r1, [r4, #0]
    d47e:	2d00      	cmp	r5, #0
    d480:	d158      	bne.n	d534 <_printf_i+0x1d4>
    d482:	9e04      	ldr	r6, [sp, #16]
    d484:	2b00      	cmp	r3, #0
    d486:	d064      	beq.n	d552 <_printf_i+0x1f2>
    d488:	0026      	movs	r6, r4
    d48a:	9b03      	ldr	r3, [sp, #12]
    d48c:	3642      	adds	r6, #66	; 0x42
    d48e:	781b      	ldrb	r3, [r3, #0]
    d490:	7033      	strb	r3, [r6, #0]
    d492:	e05e      	b.n	d552 <_printf_i+0x1f2>
    d494:	0648      	lsls	r0, r1, #25
    d496:	d5da      	bpl.n	d44e <_printf_i+0xee>
    d498:	b2ad      	uxth	r5, r5
    d49a:	e7d8      	b.n	d44e <_printf_i+0xee>
    d49c:	6809      	ldr	r1, [r1, #0]
    d49e:	681a      	ldr	r2, [r3, #0]
    d4a0:	0608      	lsls	r0, r1, #24
    d4a2:	d505      	bpl.n	d4b0 <_printf_i+0x150>
    d4a4:	1d11      	adds	r1, r2, #4
    d4a6:	6019      	str	r1, [r3, #0]
    d4a8:	6813      	ldr	r3, [r2, #0]
    d4aa:	6962      	ldr	r2, [r4, #20]
    d4ac:	601a      	str	r2, [r3, #0]
    d4ae:	e006      	b.n	d4be <_printf_i+0x15e>
    d4b0:	0649      	lsls	r1, r1, #25
    d4b2:	d5f7      	bpl.n	d4a4 <_printf_i+0x144>
    d4b4:	1d11      	adds	r1, r2, #4
    d4b6:	6019      	str	r1, [r3, #0]
    d4b8:	6813      	ldr	r3, [r2, #0]
    d4ba:	8aa2      	ldrh	r2, [r4, #20]
    d4bc:	801a      	strh	r2, [r3, #0]
    d4be:	2300      	movs	r3, #0
    d4c0:	9e04      	ldr	r6, [sp, #16]
    d4c2:	6123      	str	r3, [r4, #16]
    d4c4:	e054      	b.n	d570 <_printf_i+0x210>
    d4c6:	681a      	ldr	r2, [r3, #0]
    d4c8:	1d11      	adds	r1, r2, #4
    d4ca:	6019      	str	r1, [r3, #0]
    d4cc:	6816      	ldr	r6, [r2, #0]
    d4ce:	2100      	movs	r1, #0
    d4d0:	6862      	ldr	r2, [r4, #4]
    d4d2:	0030      	movs	r0, r6
    d4d4:	f000 f93e 	bl	d754 <memchr>
    d4d8:	2800      	cmp	r0, #0
    d4da:	d001      	beq.n	d4e0 <_printf_i+0x180>
    d4dc:	1b80      	subs	r0, r0, r6
    d4de:	6060      	str	r0, [r4, #4]
    d4e0:	6863      	ldr	r3, [r4, #4]
    d4e2:	6123      	str	r3, [r4, #16]
    d4e4:	2300      	movs	r3, #0
    d4e6:	9a04      	ldr	r2, [sp, #16]
    d4e8:	7013      	strb	r3, [r2, #0]
    d4ea:	e041      	b.n	d570 <_printf_i+0x210>
    d4ec:	6923      	ldr	r3, [r4, #16]
    d4ee:	0032      	movs	r2, r6
    d4f0:	9906      	ldr	r1, [sp, #24]
    d4f2:	9805      	ldr	r0, [sp, #20]
    d4f4:	9d07      	ldr	r5, [sp, #28]
    d4f6:	47a8      	blx	r5
    d4f8:	1c43      	adds	r3, r0, #1
    d4fa:	d043      	beq.n	d584 <_printf_i+0x224>
    d4fc:	6823      	ldr	r3, [r4, #0]
    d4fe:	2500      	movs	r5, #0
    d500:	079b      	lsls	r3, r3, #30
    d502:	d40f      	bmi.n	d524 <_printf_i+0x1c4>
    d504:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d506:	68e0      	ldr	r0, [r4, #12]
    d508:	4298      	cmp	r0, r3
    d50a:	da3d      	bge.n	d588 <_printf_i+0x228>
    d50c:	0018      	movs	r0, r3
    d50e:	e03b      	b.n	d588 <_printf_i+0x228>
    d510:	0022      	movs	r2, r4
    d512:	2301      	movs	r3, #1
    d514:	3219      	adds	r2, #25
    d516:	9906      	ldr	r1, [sp, #24]
    d518:	9805      	ldr	r0, [sp, #20]
    d51a:	9e07      	ldr	r6, [sp, #28]
    d51c:	47b0      	blx	r6
    d51e:	1c43      	adds	r3, r0, #1
    d520:	d030      	beq.n	d584 <_printf_i+0x224>
    d522:	3501      	adds	r5, #1
    d524:	68e3      	ldr	r3, [r4, #12]
    d526:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d528:	1a9b      	subs	r3, r3, r2
    d52a:	429d      	cmp	r5, r3
    d52c:	dbf0      	blt.n	d510 <_printf_i+0x1b0>
    d52e:	e7e9      	b.n	d504 <_printf_i+0x1a4>
    d530:	2d00      	cmp	r5, #0
    d532:	d0a9      	beq.n	d488 <_printf_i+0x128>
    d534:	9e04      	ldr	r6, [sp, #16]
    d536:	0028      	movs	r0, r5
    d538:	0039      	movs	r1, r7
    d53a:	f7fe fd77 	bl	c02c <__aeabi_uidivmod>
    d53e:	9b03      	ldr	r3, [sp, #12]
    d540:	3e01      	subs	r6, #1
    d542:	5c5b      	ldrb	r3, [r3, r1]
    d544:	0028      	movs	r0, r5
    d546:	7033      	strb	r3, [r6, #0]
    d548:	0039      	movs	r1, r7
    d54a:	f7fe fce9 	bl	bf20 <__udivsi3>
    d54e:	1e05      	subs	r5, r0, #0
    d550:	d1f1      	bne.n	d536 <_printf_i+0x1d6>
    d552:	2f08      	cmp	r7, #8
    d554:	d109      	bne.n	d56a <_printf_i+0x20a>
    d556:	6823      	ldr	r3, [r4, #0]
    d558:	07db      	lsls	r3, r3, #31
    d55a:	d506      	bpl.n	d56a <_printf_i+0x20a>
    d55c:	6863      	ldr	r3, [r4, #4]
    d55e:	6922      	ldr	r2, [r4, #16]
    d560:	4293      	cmp	r3, r2
    d562:	dc02      	bgt.n	d56a <_printf_i+0x20a>
    d564:	2330      	movs	r3, #48	; 0x30
    d566:	3e01      	subs	r6, #1
    d568:	7033      	strb	r3, [r6, #0]
    d56a:	9b04      	ldr	r3, [sp, #16]
    d56c:	1b9b      	subs	r3, r3, r6
    d56e:	6123      	str	r3, [r4, #16]
    d570:	9b07      	ldr	r3, [sp, #28]
    d572:	aa09      	add	r2, sp, #36	; 0x24
    d574:	9300      	str	r3, [sp, #0]
    d576:	0021      	movs	r1, r4
    d578:	9b06      	ldr	r3, [sp, #24]
    d57a:	9805      	ldr	r0, [sp, #20]
    d57c:	f7ff fe82 	bl	d284 <_printf_common>
    d580:	1c43      	adds	r3, r0, #1
    d582:	d1b3      	bne.n	d4ec <_printf_i+0x18c>
    d584:	2001      	movs	r0, #1
    d586:	4240      	negs	r0, r0
    d588:	b00b      	add	sp, #44	; 0x2c
    d58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d58c:	0000ecae 	.word	0x0000ecae
    d590:	0000ec9d 	.word	0x0000ec9d

0000d594 <_putc_r>:
    d594:	b570      	push	{r4, r5, r6, lr}
    d596:	0006      	movs	r6, r0
    d598:	000d      	movs	r5, r1
    d59a:	0014      	movs	r4, r2
    d59c:	2800      	cmp	r0, #0
    d59e:	d004      	beq.n	d5aa <_putc_r+0x16>
    d5a0:	6983      	ldr	r3, [r0, #24]
    d5a2:	2b00      	cmp	r3, #0
    d5a4:	d101      	bne.n	d5aa <_putc_r+0x16>
    d5a6:	f7ff fac5 	bl	cb34 <__sinit>
    d5aa:	4b12      	ldr	r3, [pc, #72]	; (d5f4 <_putc_r+0x60>)
    d5ac:	429c      	cmp	r4, r3
    d5ae:	d111      	bne.n	d5d4 <_putc_r+0x40>
    d5b0:	6874      	ldr	r4, [r6, #4]
    d5b2:	68a3      	ldr	r3, [r4, #8]
    d5b4:	3b01      	subs	r3, #1
    d5b6:	60a3      	str	r3, [r4, #8]
    d5b8:	2b00      	cmp	r3, #0
    d5ba:	da05      	bge.n	d5c8 <_putc_r+0x34>
    d5bc:	69a2      	ldr	r2, [r4, #24]
    d5be:	4293      	cmp	r3, r2
    d5c0:	db12      	blt.n	d5e8 <_putc_r+0x54>
    d5c2:	b2eb      	uxtb	r3, r5
    d5c4:	2b0a      	cmp	r3, #10
    d5c6:	d00f      	beq.n	d5e8 <_putc_r+0x54>
    d5c8:	6823      	ldr	r3, [r4, #0]
    d5ca:	b2e8      	uxtb	r0, r5
    d5cc:	1c5a      	adds	r2, r3, #1
    d5ce:	6022      	str	r2, [r4, #0]
    d5d0:	701d      	strb	r5, [r3, #0]
    d5d2:	bd70      	pop	{r4, r5, r6, pc}
    d5d4:	4b08      	ldr	r3, [pc, #32]	; (d5f8 <_putc_r+0x64>)
    d5d6:	429c      	cmp	r4, r3
    d5d8:	d101      	bne.n	d5de <_putc_r+0x4a>
    d5da:	68b4      	ldr	r4, [r6, #8]
    d5dc:	e7e9      	b.n	d5b2 <_putc_r+0x1e>
    d5de:	4b07      	ldr	r3, [pc, #28]	; (d5fc <_putc_r+0x68>)
    d5e0:	429c      	cmp	r4, r3
    d5e2:	d1e6      	bne.n	d5b2 <_putc_r+0x1e>
    d5e4:	68f4      	ldr	r4, [r6, #12]
    d5e6:	e7e4      	b.n	d5b2 <_putc_r+0x1e>
    d5e8:	0022      	movs	r2, r4
    d5ea:	0029      	movs	r1, r5
    d5ec:	0030      	movs	r0, r6
    d5ee:	f7ff f8dd 	bl	c7ac <__swbuf_r>
    d5f2:	e7ee      	b.n	d5d2 <_putc_r+0x3e>
    d5f4:	0000ec4c 	.word	0x0000ec4c
    d5f8:	0000ec6c 	.word	0x0000ec6c
    d5fc:	0000ec2c 	.word	0x0000ec2c

0000d600 <__sread>:
    d600:	b570      	push	{r4, r5, r6, lr}
    d602:	000c      	movs	r4, r1
    d604:	250e      	movs	r5, #14
    d606:	5f49      	ldrsh	r1, [r1, r5]
    d608:	f000 f8d6 	bl	d7b8 <_read_r>
    d60c:	2800      	cmp	r0, #0
    d60e:	db03      	blt.n	d618 <__sread+0x18>
    d610:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d612:	181b      	adds	r3, r3, r0
    d614:	6563      	str	r3, [r4, #84]	; 0x54
    d616:	bd70      	pop	{r4, r5, r6, pc}
    d618:	89a3      	ldrh	r3, [r4, #12]
    d61a:	4a02      	ldr	r2, [pc, #8]	; (d624 <__sread+0x24>)
    d61c:	4013      	ands	r3, r2
    d61e:	81a3      	strh	r3, [r4, #12]
    d620:	e7f9      	b.n	d616 <__sread+0x16>
    d622:	46c0      	nop			; (mov r8, r8)
    d624:	ffffefff 	.word	0xffffefff

0000d628 <__swrite>:
    d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d62a:	001f      	movs	r7, r3
    d62c:	898b      	ldrh	r3, [r1, #12]
    d62e:	0005      	movs	r5, r0
    d630:	000c      	movs	r4, r1
    d632:	0016      	movs	r6, r2
    d634:	05db      	lsls	r3, r3, #23
    d636:	d505      	bpl.n	d644 <__swrite+0x1c>
    d638:	230e      	movs	r3, #14
    d63a:	5ec9      	ldrsh	r1, [r1, r3]
    d63c:	2200      	movs	r2, #0
    d63e:	2302      	movs	r3, #2
    d640:	f000 f874 	bl	d72c <_lseek_r>
    d644:	89a3      	ldrh	r3, [r4, #12]
    d646:	4a05      	ldr	r2, [pc, #20]	; (d65c <__swrite+0x34>)
    d648:	0028      	movs	r0, r5
    d64a:	4013      	ands	r3, r2
    d64c:	81a3      	strh	r3, [r4, #12]
    d64e:	0032      	movs	r2, r6
    d650:	230e      	movs	r3, #14
    d652:	5ee1      	ldrsh	r1, [r4, r3]
    d654:	003b      	movs	r3, r7
    d656:	f000 f81f 	bl	d698 <_write_r>
    d65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d65c:	ffffefff 	.word	0xffffefff

0000d660 <__sseek>:
    d660:	b570      	push	{r4, r5, r6, lr}
    d662:	000c      	movs	r4, r1
    d664:	250e      	movs	r5, #14
    d666:	5f49      	ldrsh	r1, [r1, r5]
    d668:	f000 f860 	bl	d72c <_lseek_r>
    d66c:	89a3      	ldrh	r3, [r4, #12]
    d66e:	1c42      	adds	r2, r0, #1
    d670:	d103      	bne.n	d67a <__sseek+0x1a>
    d672:	4a05      	ldr	r2, [pc, #20]	; (d688 <__sseek+0x28>)
    d674:	4013      	ands	r3, r2
    d676:	81a3      	strh	r3, [r4, #12]
    d678:	bd70      	pop	{r4, r5, r6, pc}
    d67a:	2280      	movs	r2, #128	; 0x80
    d67c:	0152      	lsls	r2, r2, #5
    d67e:	4313      	orrs	r3, r2
    d680:	81a3      	strh	r3, [r4, #12]
    d682:	6560      	str	r0, [r4, #84]	; 0x54
    d684:	e7f8      	b.n	d678 <__sseek+0x18>
    d686:	46c0      	nop			; (mov r8, r8)
    d688:	ffffefff 	.word	0xffffefff

0000d68c <__sclose>:
    d68c:	b510      	push	{r4, lr}
    d68e:	230e      	movs	r3, #14
    d690:	5ec9      	ldrsh	r1, [r1, r3]
    d692:	f000 f815 	bl	d6c0 <_close_r>
    d696:	bd10      	pop	{r4, pc}

0000d698 <_write_r>:
    d698:	b570      	push	{r4, r5, r6, lr}
    d69a:	0005      	movs	r5, r0
    d69c:	0008      	movs	r0, r1
    d69e:	0011      	movs	r1, r2
    d6a0:	2200      	movs	r2, #0
    d6a2:	4c06      	ldr	r4, [pc, #24]	; (d6bc <_write_r+0x24>)
    d6a4:	6022      	str	r2, [r4, #0]
    d6a6:	001a      	movs	r2, r3
    d6a8:	f7fc fc78 	bl	9f9c <_write>
    d6ac:	1c43      	adds	r3, r0, #1
    d6ae:	d103      	bne.n	d6b8 <_write_r+0x20>
    d6b0:	6823      	ldr	r3, [r4, #0]
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d000      	beq.n	d6b8 <_write_r+0x20>
    d6b6:	602b      	str	r3, [r5, #0]
    d6b8:	bd70      	pop	{r4, r5, r6, pc}
    d6ba:	46c0      	nop			; (mov r8, r8)
    d6bc:	200004d0 	.word	0x200004d0

0000d6c0 <_close_r>:
    d6c0:	2300      	movs	r3, #0
    d6c2:	b570      	push	{r4, r5, r6, lr}
    d6c4:	4c06      	ldr	r4, [pc, #24]	; (d6e0 <_close_r+0x20>)
    d6c6:	0005      	movs	r5, r0
    d6c8:	0008      	movs	r0, r1
    d6ca:	6023      	str	r3, [r4, #0]
    d6cc:	f7fc fcba 	bl	a044 <_close>
    d6d0:	1c43      	adds	r3, r0, #1
    d6d2:	d103      	bne.n	d6dc <_close_r+0x1c>
    d6d4:	6823      	ldr	r3, [r4, #0]
    d6d6:	2b00      	cmp	r3, #0
    d6d8:	d000      	beq.n	d6dc <_close_r+0x1c>
    d6da:	602b      	str	r3, [r5, #0]
    d6dc:	bd70      	pop	{r4, r5, r6, pc}
    d6de:	46c0      	nop			; (mov r8, r8)
    d6e0:	200004d0 	.word	0x200004d0

0000d6e4 <_fstat_r>:
    d6e4:	2300      	movs	r3, #0
    d6e6:	b570      	push	{r4, r5, r6, lr}
    d6e8:	4c06      	ldr	r4, [pc, #24]	; (d704 <_fstat_r+0x20>)
    d6ea:	0005      	movs	r5, r0
    d6ec:	0008      	movs	r0, r1
    d6ee:	0011      	movs	r1, r2
    d6f0:	6023      	str	r3, [r4, #0]
    d6f2:	f7fc fcb1 	bl	a058 <_fstat>
    d6f6:	1c43      	adds	r3, r0, #1
    d6f8:	d103      	bne.n	d702 <_fstat_r+0x1e>
    d6fa:	6823      	ldr	r3, [r4, #0]
    d6fc:	2b00      	cmp	r3, #0
    d6fe:	d000      	beq.n	d702 <_fstat_r+0x1e>
    d700:	602b      	str	r3, [r5, #0]
    d702:	bd70      	pop	{r4, r5, r6, pc}
    d704:	200004d0 	.word	0x200004d0

0000d708 <_isatty_r>:
    d708:	2300      	movs	r3, #0
    d70a:	b570      	push	{r4, r5, r6, lr}
    d70c:	4c06      	ldr	r4, [pc, #24]	; (d728 <_isatty_r+0x20>)
    d70e:	0005      	movs	r5, r0
    d710:	0008      	movs	r0, r1
    d712:	6023      	str	r3, [r4, #0]
    d714:	f7fc fcae 	bl	a074 <_isatty>
    d718:	1c43      	adds	r3, r0, #1
    d71a:	d103      	bne.n	d724 <_isatty_r+0x1c>
    d71c:	6823      	ldr	r3, [r4, #0]
    d71e:	2b00      	cmp	r3, #0
    d720:	d000      	beq.n	d724 <_isatty_r+0x1c>
    d722:	602b      	str	r3, [r5, #0]
    d724:	bd70      	pop	{r4, r5, r6, pc}
    d726:	46c0      	nop			; (mov r8, r8)
    d728:	200004d0 	.word	0x200004d0

0000d72c <_lseek_r>:
    d72c:	b570      	push	{r4, r5, r6, lr}
    d72e:	0005      	movs	r5, r0
    d730:	0008      	movs	r0, r1
    d732:	0011      	movs	r1, r2
    d734:	2200      	movs	r2, #0
    d736:	4c06      	ldr	r4, [pc, #24]	; (d750 <_lseek_r+0x24>)
    d738:	6022      	str	r2, [r4, #0]
    d73a:	001a      	movs	r2, r3
    d73c:	f7fc fca3 	bl	a086 <_lseek>
    d740:	1c43      	adds	r3, r0, #1
    d742:	d103      	bne.n	d74c <_lseek_r+0x20>
    d744:	6823      	ldr	r3, [r4, #0]
    d746:	2b00      	cmp	r3, #0
    d748:	d000      	beq.n	d74c <_lseek_r+0x20>
    d74a:	602b      	str	r3, [r5, #0]
    d74c:	bd70      	pop	{r4, r5, r6, pc}
    d74e:	46c0      	nop			; (mov r8, r8)
    d750:	200004d0 	.word	0x200004d0

0000d754 <memchr>:
    d754:	b2c9      	uxtb	r1, r1
    d756:	1882      	adds	r2, r0, r2
    d758:	4290      	cmp	r0, r2
    d75a:	d101      	bne.n	d760 <memchr+0xc>
    d75c:	2000      	movs	r0, #0
    d75e:	4770      	bx	lr
    d760:	7803      	ldrb	r3, [r0, #0]
    d762:	428b      	cmp	r3, r1
    d764:	d0fb      	beq.n	d75e <memchr+0xa>
    d766:	3001      	adds	r0, #1
    d768:	e7f6      	b.n	d758 <memchr+0x4>

0000d76a <_realloc_r>:
    d76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d76c:	0007      	movs	r7, r0
    d76e:	000d      	movs	r5, r1
    d770:	0016      	movs	r6, r2
    d772:	2900      	cmp	r1, #0
    d774:	d105      	bne.n	d782 <_realloc_r+0x18>
    d776:	0011      	movs	r1, r2
    d778:	f7fe fe0e 	bl	c398 <_malloc_r>
    d77c:	0004      	movs	r4, r0
    d77e:	0020      	movs	r0, r4
    d780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d782:	2a00      	cmp	r2, #0
    d784:	d103      	bne.n	d78e <_realloc_r+0x24>
    d786:	f7fe fdbd 	bl	c304 <_free_r>
    d78a:	0034      	movs	r4, r6
    d78c:	e7f7      	b.n	d77e <_realloc_r+0x14>
    d78e:	f000 f827 	bl	d7e0 <_malloc_usable_size_r>
    d792:	002c      	movs	r4, r5
    d794:	4286      	cmp	r6, r0
    d796:	d9f2      	bls.n	d77e <_realloc_r+0x14>
    d798:	0031      	movs	r1, r6
    d79a:	0038      	movs	r0, r7
    d79c:	f7fe fdfc 	bl	c398 <_malloc_r>
    d7a0:	1e04      	subs	r4, r0, #0
    d7a2:	d0ec      	beq.n	d77e <_realloc_r+0x14>
    d7a4:	0029      	movs	r1, r5
    d7a6:	0032      	movs	r2, r6
    d7a8:	f7fe fd88 	bl	c2bc <memcpy>
    d7ac:	0029      	movs	r1, r5
    d7ae:	0038      	movs	r0, r7
    d7b0:	f7fe fda8 	bl	c304 <_free_r>
    d7b4:	e7e3      	b.n	d77e <_realloc_r+0x14>
	...

0000d7b8 <_read_r>:
    d7b8:	b570      	push	{r4, r5, r6, lr}
    d7ba:	0005      	movs	r5, r0
    d7bc:	0008      	movs	r0, r1
    d7be:	0011      	movs	r1, r2
    d7c0:	2200      	movs	r2, #0
    d7c2:	4c06      	ldr	r4, [pc, #24]	; (d7dc <_read_r+0x24>)
    d7c4:	6022      	str	r2, [r4, #0]
    d7c6:	001a      	movs	r2, r3
    d7c8:	f7fc fbbe 	bl	9f48 <_read>
    d7cc:	1c43      	adds	r3, r0, #1
    d7ce:	d103      	bne.n	d7d8 <_read_r+0x20>
    d7d0:	6823      	ldr	r3, [r4, #0]
    d7d2:	2b00      	cmp	r3, #0
    d7d4:	d000      	beq.n	d7d8 <_read_r+0x20>
    d7d6:	602b      	str	r3, [r5, #0]
    d7d8:	bd70      	pop	{r4, r5, r6, pc}
    d7da:	46c0      	nop			; (mov r8, r8)
    d7dc:	200004d0 	.word	0x200004d0

0000d7e0 <_malloc_usable_size_r>:
    d7e0:	1f0b      	subs	r3, r1, #4
    d7e2:	681b      	ldr	r3, [r3, #0]
    d7e4:	1f18      	subs	r0, r3, #4
    d7e6:	2b00      	cmp	r3, #0
    d7e8:	da01      	bge.n	d7ee <_malloc_usable_size_r+0xe>
    d7ea:	580b      	ldr	r3, [r1, r0]
    d7ec:	18c0      	adds	r0, r0, r3
    d7ee:	4770      	bx	lr
    d7f0:	50504128 	.word	0x50504128
    d7f4:	52452829 	.word	0x52452829
    d7f8:	255b2952 	.word	0x255b2952
    d7fc:	255b5d73 	.word	0x255b5d73
    d800:	00005d64 	.word	0x00005d64
    d804:	61766e69 	.word	0x61766e69
    d808:	6564696c 	.word	0x6564696c
    d80c:	636f6920 	.word	0x636f6920
    d810:	6320746c 	.word	0x6320746c
    d814:	0000646d 	.word	0x0000646d

0000d818 <__FUNCTION__.14006>:
    d818:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    d828:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
    d838:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
    d848:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    d858:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
    d868:	74207075 63206568 00706968 66696828     up the chip.(hif
    d878:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
    d888:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
    d898:	66696828 64612029 73657264 75622073     (hif) address bu
    d8a8:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
    d8b8:	70757272 20646574 6b636170 53207465     rrupted packet S
    d8c8:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
    d8d8:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
    d8e8:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
    d8f8:	6361626c 7369206b 746f6e20 67657220     lback is not reg
    d908:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
    d918:	626c6c61 206b6361 6e207369 7220746f     allback is not r
    d928:	73696765 65726574 00000064 2061744f     egistered...Ota 
    d938:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
    d948:	69676572 72657473 00006465 70797243     registered..Cryp
    d958:	63206f74 626c6c61 206b6361 6e207369     to callback is n
    d968:	7220746f 73696765 65726574 00000064     ot registered...
    d978:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
    d988:	6f6e2073 65722074 74736967 64657265     s not registered
    d998:	00000000 66696828 6e692029 696c6176     ....(hif) invali
    d9a8:	72672064 2070756f 00004449 66696828     d group ID..(hif
    d9b8:	6f682029 61207473 64207070 276e6469     ) host app didn'
    d9c8:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
    d9d8:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
    d9e8:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
    d9f8:	61462029 2065736c 65746e69 70757272     ) False interrup
    da08:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
    da18:	74206c69 6552206f 69206461 7265746e     il to Read inter
    da28:	74707572 67657220 00000000 46494828     rupt reg....(HIF
    da38:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
    da48:	746e6920 75727265 25207470 72742064      interrupt %d tr
    da58:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
    da68:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
    da78:	72612064 656d7567 0000746e 20505041     d argument..APP 
    da88:	75716552 65747365 69532064 6920657a     Requested Size i
    da98:	616c2073 72656772 61687420 6874206e     s larger than th
    daa8:	65722065 65766963 75622064 72656666     e recived buffer
    dab8:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
    dac8:	00000000 20505041 75716552 65747365     ....APP Requeste
    dad8:	64412064 73657264 65622073 646e6f79     d Address beyond
    dae8:	65687420 63657220 64657669 66756220      the recived buf
    daf8:	20726566 72646461 20737365 20646e61     fer address and 
    db08:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
    db18:	0000000a 00001a14 000019e4 000019dc     ................
    db28:	000019f4 000019ec 00001a0c 000019fc     ................
    db38:	00001a04                                ....

0000db3c <__FUNCTION__.13058>:
    db3c:	5f666968 646e6573 00000000              hif_send....

0000db48 <__FUNCTION__.13068>:
    db48:	5f666968 00727369                       hif_isr.

0000db50 <__FUNCTION__.13074>:
    db50:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000db60 <__FUNCTION__.13086>:
    db60:	5f666968 65636572 00657669              hif_receive.

0000db6c <__FUNCTION__.13102>:
    db6c:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    db7c:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
    db8c:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
    db9c:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
    dbac:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    dbbc:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
    dbcc:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
    dbdc:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
    dbec:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
    dbfc:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
    dc0c:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
    dc1c:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
    dc2c:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
    dc3c:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
    dc4c:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
    dc5c:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
    dc6c:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
    dc7c:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
    dc8c:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
    dc9c:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
    dcac:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
    dcbc:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
    dccc:	6f206f4e 72702066 2065626f 75716572     No of probe requ
    dcdc:	73747365 72657020 61637320 6c73206e     ests per scan sl
    dcec:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
    dcfc:	49535352 72687420 6f687365 2520646c     RSSI threshold %
    dd0c:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
    dd1c:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
    dd2c:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
    dd3c:	65726177 69754220 2520646c 69542073     ware Build %s Ti
    dd4c:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
    dd5c:	6e694d20 69726420 20726576 20726576      Min driver ver 
    dd6c:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
    dd7c:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
    dd8c:	0000000a 313a3531 39333a32 00000000     ....15:12:39....
    dd9c:	20727041 32203431 00373130 76697244     Apr 14 2017.Driv
    ddac:	62207265 746c6975 20746120 25097325     er built at %s.%
    ddbc:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
    ddcc:	7277616d 65562065 6f697372 0000006e     mawre Version...
    dddc:	2079654b 6e207369 7620746f 64696c61     Key is not valid
    ddec:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
    ddfc:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
    de0c:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
    de1c:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
    de2c:	65646e69 64252078 0000000a 61766e49     index %d....Inva
    de3c:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
    de4c:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
    de5c:	53502074 656b204b 656c2079 6874676e     t PSK key length
    de6c:	00000000 65646e75 656e6966 65732064     ....undefined se
    de7c:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
    de8c:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
    de9c:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
    deac:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
    debc:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
    decc:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
    dedc:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
    deec:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
    defc:	66754220 20726566 65637865 64656465      Buffer exceeded
    df0c:	78616d20 6d756d69 7a697320 64252065      maximum size %d
    df1c:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
    df2c:	00000000                                ....

0000df30 <__FUNCTION__.13037>:
    df30:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000df3c <__FUNCTION__.13066>:
    df3c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0000df4c <__FUNCTION__.13094>:
    df4c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    df5c:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
    df6c:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
    df7c:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
    df8c:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
    df9c:	20656874 70696863 00000000 50504128     the chip....(APP
    dfac:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
    dfbc:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
    dfcc:	6c696166 74206465 6564206f 696e692d     failed to de-ini
    dfdc:	6c616974 00657a69                       tialize.

0000dfe4 <__FUNCTION__.12900>:
    dfe4:	70696863 6b61775f 00000065              chip_wake...

0000dff0 <__FUNCTION__.12949>:
    dff0:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
    e000:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    e010:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    e020:	6e69206c 62207469 00007375 50504128     l init bus..(APP
    e030:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
    e040:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
    e050:	6e65206f 656c6261 746e6920 75727265     o enable interru
    e060:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
    e070:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
    e080:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
    e090:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
    e0a0:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
    e0b0:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
    e0c0:	75622074 00000073                       t bus...

0000e0c8 <__FUNCTION__.12947>:
    e0c8:	645f6d6e 695f7672 0074696e              nm_drv_init.

0000e0d4 <__FUNCTION__.12954>:
    e0d4:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0000e0e4 <crc7_syndrome_table>:
    e0e4:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    e0f4:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    e104:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    e114:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    e124:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    e134:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    e144:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    e154:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    e164:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    e174:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    e184:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    e194:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    e1a4:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    e1b4:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    e1c4:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    e1d4:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    e1e4:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    e1f4:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
    e204:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    e214:	73756220 72726520 2e2e726f 0000002e      bus error......
    e224:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e234:	75622064 72652073 2e726f72 00002e2e     d bus error.....
    e244:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e254:	61642064 72206174 6f707365 2065736e     d data response 
    e264:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
    e274:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e284:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    e294:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    e2a4:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e2b4:	656c6961 61642064 72206174 6f707365     ailed data respo
    e2c4:	2065736e 64616572 7562202c 72652073     nse read, bus er
    e2d4:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    e2e4:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    e2f4:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    e304:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    e314:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    e324:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    e334:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    e344:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    e354:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    e364:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    e374:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    e384:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
    e394:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    e3a4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e3b4:	656c6961 61642064 62206174 6b636f6c     ailed data block
    e3c4:	69727720 202c6574 20737562 6f727265      write, bus erro
    e3d4:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    e3e4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    e3f4:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
    e404:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    e414:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e424:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    e434:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    e444:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    e454:	65722064 6e6f7073 202c6573 74697277     d response, writ
    e464:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    e474:	00000000 65736552 6e612074 65722064     ....Reset and re
    e484:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
    e494:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e4a4:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    e4b4:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    e4c4:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    e4d4:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    e4e4:	69727720 62206574 6b636f6c 30252820      write block (%0
    e4f4:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    e504:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
    e514:	61746164 69727720 2e2e6574 0000002e     data write......
    e524:	65736552 6e612074 65722064 20797274     Reset and retry 
    e534:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
    e544:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    e554:	72202c64 20646165 20676572 38302528     d, read reg (%08
    e564:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    e574:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    e584:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    e594:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    e5a4:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    e5b4:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    e5c4:	6e612074 65722064 20797274 25206425     t and retry %d %
    e5d4:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    e5e4:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    e5f4:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    e604:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e614:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    e624:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    e634:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    e644:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    e654:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    e664:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e674:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    e684:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
    e694:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
    e6a4:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
    e6b4:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e6c4:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    e6d4:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
    e6e4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e6f4:	6e692064 6e726574 77206c61 65746972     d internal write
    e704:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
    e714:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e724:	206c6961 20646d63 64616572 69686320     ail cmd read chi
    e734:	64692070 002e2e2e 000035d0 000035d0     p id.....5...5..
    e744:	00003660 00003524 0000356a 0000358c     `6..$5..j5...5..
    e754:	00003612 00003612 000036cc 000034f8     .6...6...6...4..
    e764:	00003726 00003726 00003726 00003726     &7..&7..&7..&7..
    e774:	000035ae                                .5..

0000e778 <__FUNCTION__.12253>:
    e778:	5f697073 00646d63                       spi_cmd.

0000e780 <__FUNCTION__.12260>:
    e780:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0000e790 <__FUNCTION__.12269>:
    e790:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000e79c <__FUNCTION__.12285>:
    e79c:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000e7ac <__FUNCTION__.12300>:
    e7ac:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000e7bc <__FUNCTION__.12312>:
    e7bc:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000e7cc <__FUNCTION__.12323>:
    e7cc:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000e7dc <__FUNCTION__.12335>:
    e7dc:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000e7ec <__FUNCTION__.12348>:
    e7ec:	735f6d6e 725f6970 00646165              nm_spi_read.

0000e7f8 <__FUNCTION__.12369>:
    e7f8:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
    e808:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
    e818:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
    e828:	25207465 65732064 6f697373 4449206e     et %d session ID
    e838:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
    e848:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    e858:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    e868:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
    e878:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
    e888:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
    e898:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
    e8a8:	204c5353 6b636f53 00007465 42000800     SSL Socket.....B
    e8b8:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    e8c8:	42001c00 0c0b0a09 00000e0d 00008416     ...B............
    e8d8:	0000848e 0000848e 00008434 0000842e     ........4.......
    e8e8:	0000843a 0000841c 00008440 00008474     :.......@...t...
    e8f8:	00008758 000087a8 000087a8 000087a4     X...............
    e908:	0000874a 0000876a 0000873a 0000877c     J...j...:...|...
    e918:	0000878e 000087f6 00008824 00008824     ........$...$...
    e928:	00008820 000087f0 000087fc 000087ea      ...............
    e938:	00008802 00008808                       ........

0000e940 <tcc_modules>:
    e940:	42002000 42002400 42002800              . .B.$.B.(.B

0000e94c <_tcc_gclk_ids>:
    e94c:	001b1a1a                                ....

0000e950 <_tcc_apbcmasks>:
    e950:	00000100 00000200 00000400              ............

0000e95c <_tcc_maxs>:
    e95c:	00ffffff 00ffffff 0000ffff              ............

0000e968 <_tcc_cc_nums>:
    e968:	00020204                                ....

0000e96c <_tcc_ow_nums>:
    e96c:	00020408                                ....

0000e970 <_tcc_intflag>:
    e970:	00000001 00000002 00000004 00000008     ................
    e980:	00001000 00002000 00004000 00008000     ..... ...@......
    e990:	00010000 00020000 00040000 00080000     ................
    e9a0:	42002000 42002400 42002800              . .B.$.B.(.B

0000e9ac <main_mqtt_broker>:
    e9ac:	2e33316d 756f6c63 74716d64 6f632e74     m13.cloudmqtt.co
    e9bc:	0000006d 462d6957 6f632069 63656e6e     m...Wi-Fi connec
    e9cc:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
    e9dc:	6e6f6373 7463656e 000d6465 636c6557     sconnected..Welc
    e9ec:	48656d6f 00006c61 732d7068 70757465     omeHal..hp-setup
    e9fc:	0000312d 462d6957 50492069 20736920     -1..Wi-Fi IP is 
    ea0c:	252e7525 75252e75 0d75252e 0000000a     %u.%u.%u.%u.....
    ea1c:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
    ea2c:	76726573 25287265 20212973 72746572     server(%s)! retr
    ea3c:	74692079 74756120 74616d6f 6c616369     y it automatical
    ea4c:	0d2e796c 0000000a 74616863 00000000     ly......chat....
    ea5c:	736e6573 0000726f 75746361 726f7461     sensor..actuator
    ea6c:	00000000 70657250 74617261 206e6f69     ....Preparation 
    ea7c:	7420666f 63206568 20746168 20736168     of the chat has 
    ea8c:	6e656562 6d6f6320 74656c70 0d2e6465     been completed..
    ea9c:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
    eaac:	6c636564 20656e69 72756f79 63636120     decline your acc
    eabc:	21737365 72726520 6320726f 2065646f     ess! error code 
    eacc:	0a0d6425 00000000 3e207325 0000203e     %d......%s >> ..
    eadc:	0000000d 5454514d 73696420 6e6e6f63     ....MQTT disconn
    eaec:	65746365 00000d64 5454514d 696e6920     ected...MQTT ini
    eafc:	6c616974 74617a69 206e6f69 6c696166     tialization fail
    eb0c:	202e6465 6f727245 6f632072 69206564     ed. Error code i
    eb1c:	25282073 0a0d2964 00000000 5454514d     s (%d)......MQTT
    eb2c:	67657220 65747369 61632072 61626c6c      register callba
    eb3c:	66206b63 656c6961 45202e64 726f7272     ck failed. Error
    eb4c:	646f6320 73692065 64252820 000a0d29      code is (%d)...
    eb5c:	57202d2d 31434e49 20303035 462d6957     -- WINC1500 Wi-F
    eb6c:	514d2069 63205454 20746168 6d617865     i MQTT chat exam
    eb7c:	20656c70 0a0d2d2d 53202d2d 32574d41     ple --..-- SAMW2
    eb8c:	50585f35 4e49414c 505f4445 2d204f52     5_XPLAINED_PRO -
    eb9c:	2d0a0d2d 6f43202d 6c69706d 203a6465     -..-- Compiled: 
    ebac:	20727041 32203431 20373130 323a3531     Apr 14 2017 15:2
    ebbc:	38303a35 0d2d2d20 00000000 72657355     5:08 --.....User
    ebcc:	25203a20 000a0d73 73736150 64726f77      : %s...Password
    ebdc:	25203a20 000a0d73 69706f54 203a2063      : %s...Topic : 
    ebec:	0a0d7325 00000000 6e69616d 326d203a     %s......main: m2
    ebfc:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
    ec0c:	72726520 2821726f 0d296425 0000000a      error!(%d).....
    ec1c:	4d006425 64734951 00000070              %d.MQIsdp...

0000ec28 <_global_impure_ptr>:
    ec28:	20000024                                $.. 

0000ec2c <__sf_fake_stderr>:
	...

0000ec4c <__sf_fake_stdin>:
	...

0000ec6c <__sf_fake_stdout>:
	...
    ec8c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    ec9c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    ecac:	31300046 35343332 39383736 64636261     F.0123456789abcd
    ecbc:	00006665                                ef..

0000ecc0 <_init>:
    ecc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecc2:	46c0      	nop			; (mov r8, r8)
    ecc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ecc6:	bc08      	pop	{r3}
    ecc8:	469e      	mov	lr, r3
    ecca:	4770      	bx	lr

0000eccc <__init_array_start>:
    eccc:	000000dd 	.word	0x000000dd

0000ecd0 <_fini>:
    ecd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecd2:	46c0      	nop			; (mov r8, r8)
    ecd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ecd6:	bc08      	pop	{r3}
    ecd8:	469e      	mov	lr, r3
    ecda:	4770      	bx	lr

0000ecdc <__fini_array_start>:
    ecdc:	000000b5 	.word	0x000000b5
