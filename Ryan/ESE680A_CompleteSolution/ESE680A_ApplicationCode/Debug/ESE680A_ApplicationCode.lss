
ESE680A_ApplicationCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002038  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00006038  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c0  20000070  000060a8  00010070  2**2
                  ALLOC
  3 .stack        00002000  20000130  00006168  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   000199ba  00000000  00000000  000100f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000272b  00000000  00000000  00029aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000460  00000000  00000000  0002c1d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000460  00000000  00000000  0002c636  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001920c  00000000  00000000  0002ca96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000aba6  00000000  00000000  00045ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00086615  00000000  00000000  00050848  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000f9c  00000000  00000000  000d6e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003ced  00000000  00000000  000d7dfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_sfixed>:
    4000:	20002130 	.word	0x20002130
    4004:	00005271 	.word	0x00005271
    4008:	0000526d 	.word	0x0000526d
    400c:	0000526d 	.word	0x0000526d
	...
    402c:	0000526d 	.word	0x0000526d
	...
    4038:	0000526d 	.word	0x0000526d
    403c:	0000526d 	.word	0x0000526d
    4040:	0000526d 	.word	0x0000526d
    4044:	0000526d 	.word	0x0000526d
    4048:	0000526d 	.word	0x0000526d
    404c:	0000526d 	.word	0x0000526d
    4050:	0000526d 	.word	0x0000526d
    4054:	0000526d 	.word	0x0000526d
    4058:	0000526d 	.word	0x0000526d
    405c:	0000526d 	.word	0x0000526d
    4060:	0000526d 	.word	0x0000526d
    4064:	000045e1 	.word	0x000045e1
    4068:	000045f1 	.word	0x000045f1
    406c:	00004601 	.word	0x00004601
    4070:	00004611 	.word	0x00004611
    4074:	00004621 	.word	0x00004621
    4078:	00004631 	.word	0x00004631
    407c:	0000526d 	.word	0x0000526d
    4080:	0000526d 	.word	0x0000526d
    4084:	0000526d 	.word	0x0000526d
    4088:	0000526d 	.word	0x0000526d
    408c:	0000526d 	.word	0x0000526d
    4090:	0000526d 	.word	0x0000526d
	...
    409c:	0000526d 	.word	0x0000526d
    40a0:	0000526d 	.word	0x0000526d
    40a4:	0000526d 	.word	0x0000526d
    40a8:	0000526d 	.word	0x0000526d
    40ac:	0000526d 	.word	0x0000526d
    40b0:	00000000 	.word	0x00000000

000040b4 <__do_global_dtors_aux>:
    40b4:	b510      	push	{r4, lr}
    40b6:	4c06      	ldr	r4, [pc, #24]	; (40d0 <__do_global_dtors_aux+0x1c>)
    40b8:	7823      	ldrb	r3, [r4, #0]
    40ba:	2b00      	cmp	r3, #0
    40bc:	d107      	bne.n	40ce <__do_global_dtors_aux+0x1a>
    40be:	4b05      	ldr	r3, [pc, #20]	; (40d4 <__do_global_dtors_aux+0x20>)
    40c0:	2b00      	cmp	r3, #0
    40c2:	d002      	beq.n	40ca <__do_global_dtors_aux+0x16>
    40c4:	4804      	ldr	r0, [pc, #16]	; (40d8 <__do_global_dtors_aux+0x24>)
    40c6:	e000      	b.n	40ca <__do_global_dtors_aux+0x16>
    40c8:	bf00      	nop
    40ca:	2301      	movs	r3, #1
    40cc:	7023      	strb	r3, [r4, #0]
    40ce:	bd10      	pop	{r4, pc}
    40d0:	20000070 	.word	0x20000070
    40d4:	00000000 	.word	0x00000000
    40d8:	00006038 	.word	0x00006038

000040dc <frame_dummy>:
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <frame_dummy+0x24>)
    40de:	b510      	push	{r4, lr}
    40e0:	2b00      	cmp	r3, #0
    40e2:	d003      	beq.n	40ec <frame_dummy+0x10>
    40e4:	4907      	ldr	r1, [pc, #28]	; (4104 <frame_dummy+0x28>)
    40e6:	4808      	ldr	r0, [pc, #32]	; (4108 <frame_dummy+0x2c>)
    40e8:	e000      	b.n	40ec <frame_dummy+0x10>
    40ea:	bf00      	nop
    40ec:	4807      	ldr	r0, [pc, #28]	; (410c <frame_dummy+0x30>)
    40ee:	6803      	ldr	r3, [r0, #0]
    40f0:	2b00      	cmp	r3, #0
    40f2:	d100      	bne.n	40f6 <frame_dummy+0x1a>
    40f4:	bd10      	pop	{r4, pc}
    40f6:	4b06      	ldr	r3, [pc, #24]	; (4110 <frame_dummy+0x34>)
    40f8:	2b00      	cmp	r3, #0
    40fa:	d0fb      	beq.n	40f4 <frame_dummy+0x18>
    40fc:	4798      	blx	r3
    40fe:	e7f9      	b.n	40f4 <frame_dummy+0x18>
    4100:	00000000 	.word	0x00000000
    4104:	20000074 	.word	0x20000074
    4108:	00006038 	.word	0x00006038
    410c:	00006038 	.word	0x00006038
    4110:	00000000 	.word	0x00000000

00004114 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    4114:	4770      	bx	lr
    4116:	46c0      	nop			; (mov r8, r8)

00004118 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    4118:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    411a:	2000      	movs	r0, #0
    411c:	4b08      	ldr	r3, [pc, #32]	; (4140 <delay_init+0x28>)
    411e:	4798      	blx	r3
    4120:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    4122:	4c08      	ldr	r4, [pc, #32]	; (4144 <delay_init+0x2c>)
    4124:	21fa      	movs	r1, #250	; 0xfa
    4126:	0089      	lsls	r1, r1, #2
    4128:	47a0      	blx	r4
    412a:	4b07      	ldr	r3, [pc, #28]	; (4148 <delay_init+0x30>)
    412c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    412e:	4907      	ldr	r1, [pc, #28]	; (414c <delay_init+0x34>)
    4130:	0028      	movs	r0, r5
    4132:	47a0      	blx	r4
    4134:	4b06      	ldr	r3, [pc, #24]	; (4150 <delay_init+0x38>)
    4136:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4138:	2205      	movs	r2, #5
    413a:	4b06      	ldr	r3, [pc, #24]	; (4154 <delay_init+0x3c>)
    413c:	601a      	str	r2, [r3, #0]
}
    413e:	bd70      	pop	{r4, r5, r6, pc}
    4140:	00004ffd 	.word	0x00004ffd
    4144:	000055d5 	.word	0x000055d5
    4148:	20000004 	.word	0x20000004
    414c:	000f4240 	.word	0x000f4240
    4150:	20000000 	.word	0x20000000
    4154:	e000e010 	.word	0xe000e010

00004158 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    4158:	4b0c      	ldr	r3, [pc, #48]	; (418c <cpu_irq_enter_critical+0x34>)
    415a:	681b      	ldr	r3, [r3, #0]
    415c:	2b00      	cmp	r3, #0
    415e:	d110      	bne.n	4182 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4160:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4164:	2b00      	cmp	r3, #0
    4166:	d109      	bne.n	417c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    4168:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    416a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    416e:	2200      	movs	r2, #0
    4170:	4b07      	ldr	r3, [pc, #28]	; (4190 <cpu_irq_enter_critical+0x38>)
    4172:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4174:	3201      	adds	r2, #1
    4176:	4b07      	ldr	r3, [pc, #28]	; (4194 <cpu_irq_enter_critical+0x3c>)
    4178:	701a      	strb	r2, [r3, #0]
    417a:	e002      	b.n	4182 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    417c:	2200      	movs	r2, #0
    417e:	4b05      	ldr	r3, [pc, #20]	; (4194 <cpu_irq_enter_critical+0x3c>)
    4180:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4182:	4a02      	ldr	r2, [pc, #8]	; (418c <cpu_irq_enter_critical+0x34>)
    4184:	6813      	ldr	r3, [r2, #0]
    4186:	3301      	adds	r3, #1
    4188:	6013      	str	r3, [r2, #0]
}
    418a:	4770      	bx	lr
    418c:	2000008c 	.word	0x2000008c
    4190:	20000008 	.word	0x20000008
    4194:	20000090 	.word	0x20000090

00004198 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4198:	4b08      	ldr	r3, [pc, #32]	; (41bc <cpu_irq_leave_critical+0x24>)
    419a:	681a      	ldr	r2, [r3, #0]
    419c:	3a01      	subs	r2, #1
    419e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    41a0:	681b      	ldr	r3, [r3, #0]
    41a2:	2b00      	cmp	r3, #0
    41a4:	d109      	bne.n	41ba <cpu_irq_leave_critical+0x22>
    41a6:	4b06      	ldr	r3, [pc, #24]	; (41c0 <cpu_irq_leave_critical+0x28>)
    41a8:	781b      	ldrb	r3, [r3, #0]
    41aa:	2b00      	cmp	r3, #0
    41ac:	d005      	beq.n	41ba <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    41ae:	2201      	movs	r2, #1
    41b0:	4b04      	ldr	r3, [pc, #16]	; (41c4 <cpu_irq_leave_critical+0x2c>)
    41b2:	701a      	strb	r2, [r3, #0]
    41b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    41b8:	b662      	cpsie	i
	}
}
    41ba:	4770      	bx	lr
    41bc:	2000008c 	.word	0x2000008c
    41c0:	20000090 	.word	0x20000090
    41c4:	20000008 	.word	0x20000008

000041c8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    41c8:	b500      	push	{lr}
    41ca:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    41cc:	ab01      	add	r3, sp, #4
    41ce:	2280      	movs	r2, #128	; 0x80
    41d0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    41d2:	780a      	ldrb	r2, [r1, #0]
    41d4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    41d6:	784a      	ldrb	r2, [r1, #1]
    41d8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    41da:	788a      	ldrb	r2, [r1, #2]
    41dc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    41de:	0019      	movs	r1, r3
    41e0:	4b01      	ldr	r3, [pc, #4]	; (41e8 <port_pin_set_config+0x20>)
    41e2:	4798      	blx	r3
}
    41e4:	b003      	add	sp, #12
    41e6:	bd00      	pop	{pc}
    41e8:	0000520d 	.word	0x0000520d

000041ec <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    41ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ee:	465f      	mov	r7, fp
    41f0:	4656      	mov	r6, sl
    41f2:	464d      	mov	r5, r9
    41f4:	4644      	mov	r4, r8
    41f6:	b4f0      	push	{r4, r5, r6, r7}
    41f8:	b087      	sub	sp, #28
    41fa:	4680      	mov	r8, r0
    41fc:	9104      	str	r1, [sp, #16]
    41fe:	0016      	movs	r6, r2
    4200:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4202:	2200      	movs	r2, #0
    4204:	2300      	movs	r3, #0
    4206:	2100      	movs	r1, #0
    4208:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    420a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    420c:	2001      	movs	r0, #1
    420e:	0021      	movs	r1, r4
    4210:	9600      	str	r6, [sp, #0]
    4212:	9701      	str	r7, [sp, #4]
    4214:	465c      	mov	r4, fp
    4216:	9403      	str	r4, [sp, #12]
    4218:	4644      	mov	r4, r8
    421a:	9405      	str	r4, [sp, #20]
    421c:	2420      	movs	r4, #32
    421e:	4264      	negs	r4, r4
    4220:	190c      	adds	r4, r1, r4
    4222:	d403      	bmi.n	422c <long_division+0x40>
    4224:	0005      	movs	r5, r0
    4226:	40a5      	lsls	r5, r4
    4228:	46a8      	mov	r8, r5
    422a:	e004      	b.n	4236 <long_division+0x4a>
    422c:	2420      	movs	r4, #32
    422e:	1a64      	subs	r4, r4, r1
    4230:	0005      	movs	r5, r0
    4232:	40e5      	lsrs	r5, r4
    4234:	46a8      	mov	r8, r5
    4236:	0004      	movs	r4, r0
    4238:	408c      	lsls	r4, r1
    423a:	46a1      	mov	r9, r4

		r = r << 1;
    423c:	0014      	movs	r4, r2
    423e:	001d      	movs	r5, r3
    4240:	18a4      	adds	r4, r4, r2
    4242:	415d      	adcs	r5, r3
    4244:	0022      	movs	r2, r4
    4246:	002b      	movs	r3, r5

		if (n & bit_shift) {
    4248:	9e05      	ldr	r6, [sp, #20]
    424a:	464f      	mov	r7, r9
    424c:	403e      	ands	r6, r7
    424e:	46b2      	mov	sl, r6
    4250:	9e04      	ldr	r6, [sp, #16]
    4252:	4647      	mov	r7, r8
    4254:	403e      	ands	r6, r7
    4256:	46b4      	mov	ip, r6
    4258:	4656      	mov	r6, sl
    425a:	4667      	mov	r7, ip
    425c:	433e      	orrs	r6, r7
    425e:	d003      	beq.n	4268 <long_division+0x7c>
			r |= 0x01;
    4260:	0006      	movs	r6, r0
    4262:	4326      	orrs	r6, r4
    4264:	0032      	movs	r2, r6
    4266:	002b      	movs	r3, r5
		}

		if (r >= d) {
    4268:	9c00      	ldr	r4, [sp, #0]
    426a:	9d01      	ldr	r5, [sp, #4]
    426c:	429d      	cmp	r5, r3
    426e:	d80e      	bhi.n	428e <long_division+0xa2>
    4270:	d101      	bne.n	4276 <long_division+0x8a>
    4272:	4294      	cmp	r4, r2
    4274:	d80b      	bhi.n	428e <long_division+0xa2>
			r = r - d;
    4276:	9c00      	ldr	r4, [sp, #0]
    4278:	9d01      	ldr	r5, [sp, #4]
    427a:	1b12      	subs	r2, r2, r4
    427c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    427e:	465c      	mov	r4, fp
    4280:	464d      	mov	r5, r9
    4282:	432c      	orrs	r4, r5
    4284:	46a3      	mov	fp, r4
    4286:	9c03      	ldr	r4, [sp, #12]
    4288:	4645      	mov	r5, r8
    428a:	432c      	orrs	r4, r5
    428c:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    428e:	3901      	subs	r1, #1
    4290:	d2c4      	bcs.n	421c <long_division+0x30>
    4292:	9b03      	ldr	r3, [sp, #12]
			q |= bit_shift;
		}
	}

	return q;
}
    4294:	4658      	mov	r0, fp
    4296:	0019      	movs	r1, r3
    4298:	b007      	add	sp, #28
    429a:	bc3c      	pop	{r2, r3, r4, r5}
    429c:	4690      	mov	r8, r2
    429e:	4699      	mov	r9, r3
    42a0:	46a2      	mov	sl, r4
    42a2:	46ab      	mov	fp, r5
    42a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42a6:	46c0      	nop			; (mov r8, r8)

000042a8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    42a8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    42aa:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    42ac:	2340      	movs	r3, #64	; 0x40
    42ae:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    42b0:	4281      	cmp	r1, r0
    42b2:	d201      	bcs.n	42b8 <_sercom_get_sync_baud_val+0x10>
    42b4:	e00a      	b.n	42cc <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
    42b6:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    42b8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    42ba:	1c63      	adds	r3, r4, #1
    42bc:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    42be:	4288      	cmp	r0, r1
    42c0:	d9f9      	bls.n	42b6 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    42c2:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    42c4:	2cff      	cmp	r4, #255	; 0xff
    42c6:	d801      	bhi.n	42cc <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    42c8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    42ca:	2300      	movs	r3, #0
	}
}
    42cc:	0018      	movs	r0, r3
    42ce:	bd10      	pop	{r4, pc}

000042d0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    42d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42d2:	b083      	sub	sp, #12
    42d4:	000f      	movs	r7, r1
    42d6:	0016      	movs	r6, r2
    42d8:	aa08      	add	r2, sp, #32
    42da:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    42dc:	0004      	movs	r4, r0
    42de:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    42e0:	2240      	movs	r2, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    42e2:	42bc      	cmp	r4, r7
    42e4:	d836      	bhi.n	4354 <_sercom_get_async_baud_val+0x84>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    42e6:	2b00      	cmp	r3, #0
    42e8:	d112      	bne.n	4310 <_sercom_get_async_baud_val+0x40>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
    42ea:	0002      	movs	r2, r0
    42ec:	0008      	movs	r0, r1
    42ee:	2100      	movs	r1, #0
    42f0:	4c1a      	ldr	r4, [pc, #104]	; (435c <_sercom_get_async_baud_val+0x8c>)
    42f2:	47a0      	blx	r4
    42f4:	0001      	movs	r1, r0
    42f6:	003a      	movs	r2, r7
    42f8:	2300      	movs	r3, #0
    42fa:	2000      	movs	r0, #0
    42fc:	4c18      	ldr	r4, [pc, #96]	; (4360 <_sercom_get_async_baud_val+0x90>)
    42fe:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
    4300:	2200      	movs	r2, #0
    4302:	2301      	movs	r3, #1
    4304:	1a12      	subs	r2, r2, r0
    4306:	418b      	sbcs	r3, r1
    4308:	0c12      	lsrs	r2, r2, #16
    430a:	041b      	lsls	r3, r3, #16
    430c:	431a      	orrs	r2, r3
    430e:	e01f      	b.n	4350 <_sercom_get_async_baud_val+0x80>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    4310:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4312:	2b01      	cmp	r3, #1
    4314:	d11c      	bne.n	4350 <_sercom_get_async_baud_val+0x80>
		temp1 = ((uint64_t)baudrate * sample_num);
    4316:	000a      	movs	r2, r1
    4318:	2300      	movs	r3, #0
    431a:	2100      	movs	r1, #0
    431c:	4c0f      	ldr	r4, [pc, #60]	; (435c <_sercom_get_async_baud_val+0x8c>)
    431e:	47a0      	blx	r4
    4320:	0002      	movs	r2, r0
    4322:	000b      	movs	r3, r1
    4324:	9200      	str	r2, [sp, #0]
    4326:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    4328:	0038      	movs	r0, r7
    432a:	2100      	movs	r1, #0
    432c:	4c0c      	ldr	r4, [pc, #48]	; (4360 <_sercom_get_async_baud_val+0x90>)
    432e:	47a0      	blx	r4
    4330:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4332:	2240      	movs	r2, #64	; 0x40
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		temp1 = ((uint64_t)baudrate * sample_num);
		baud_int = long_division( peripheral_clock, temp1);
		if(baud_int > BAUD_INT_MAX) {
    4334:	2380      	movs	r3, #128	; 0x80
    4336:	019b      	lsls	r3, r3, #6
    4338:	4298      	cmp	r0, r3
    433a:	d80b      	bhi.n	4354 <_sercom_get_async_baud_val+0x84>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    433c:	0f79      	lsrs	r1, r7, #29
    433e:	00f8      	lsls	r0, r7, #3
    4340:	9a00      	ldr	r2, [sp, #0]
    4342:	9b01      	ldr	r3, [sp, #4]
    4344:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
    4346:	00ea      	lsls	r2, r5, #3
    4348:	1a82      	subs	r2, r0, r2
    434a:	b2d2      	uxtb	r2, r2
    434c:	0352      	lsls	r2, r2, #13
    434e:	432a      	orrs	r2, r5
	}

	*baudval = baud_calculated;
    4350:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4352:	2200      	movs	r2, #0
}
    4354:	0010      	movs	r0, r2
    4356:	b003      	add	sp, #12
    4358:	bdf0      	pop	{r4, r5, r6, r7, pc}
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	000056ed 	.word	0x000056ed
    4360:	000041ed 	.word	0x000041ed

00004364 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4364:	b510      	push	{r4, lr}
    4366:	b082      	sub	sp, #8
    4368:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    436a:	4b0e      	ldr	r3, [pc, #56]	; (43a4 <sercom_set_gclk_generator+0x40>)
    436c:	781b      	ldrb	r3, [r3, #0]
    436e:	2b00      	cmp	r3, #0
    4370:	d001      	beq.n	4376 <sercom_set_gclk_generator+0x12>
    4372:	2900      	cmp	r1, #0
    4374:	d00d      	beq.n	4392 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    4376:	a901      	add	r1, sp, #4
    4378:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    437a:	2013      	movs	r0, #19
    437c:	4b0a      	ldr	r3, [pc, #40]	; (43a8 <sercom_set_gclk_generator+0x44>)
    437e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4380:	2013      	movs	r0, #19
    4382:	4b0a      	ldr	r3, [pc, #40]	; (43ac <sercom_set_gclk_generator+0x48>)
    4384:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    4386:	4b07      	ldr	r3, [pc, #28]	; (43a4 <sercom_set_gclk_generator+0x40>)
    4388:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    438a:	2201      	movs	r2, #1
    438c:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    438e:	2000      	movs	r0, #0
    4390:	e006      	b.n	43a0 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    4392:	4b04      	ldr	r3, [pc, #16]	; (43a4 <sercom_set_gclk_generator+0x40>)
    4394:	785b      	ldrb	r3, [r3, #1]
    4396:	4283      	cmp	r3, r0
    4398:	d001      	beq.n	439e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    439a:	201d      	movs	r0, #29
    439c:	e000      	b.n	43a0 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
    439e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    43a0:	b002      	add	sp, #8
    43a2:	bd10      	pop	{r4, pc}
    43a4:	20000094 	.word	0x20000094
    43a8:	00005115 	.word	0x00005115
    43ac:	00005089 	.word	0x00005089

000043b0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    43b0:	4b44      	ldr	r3, [pc, #272]	; (44c4 <_sercom_get_default_pad+0x114>)
    43b2:	4298      	cmp	r0, r3
    43b4:	d033      	beq.n	441e <_sercom_get_default_pad+0x6e>
    43b6:	d806      	bhi.n	43c6 <_sercom_get_default_pad+0x16>
    43b8:	4b43      	ldr	r3, [pc, #268]	; (44c8 <_sercom_get_default_pad+0x118>)
    43ba:	4298      	cmp	r0, r3
    43bc:	d00d      	beq.n	43da <_sercom_get_default_pad+0x2a>
    43be:	4b43      	ldr	r3, [pc, #268]	; (44cc <_sercom_get_default_pad+0x11c>)
    43c0:	4298      	cmp	r0, r3
    43c2:	d01b      	beq.n	43fc <_sercom_get_default_pad+0x4c>
    43c4:	e06f      	b.n	44a6 <_sercom_get_default_pad+0xf6>
    43c6:	4b42      	ldr	r3, [pc, #264]	; (44d0 <_sercom_get_default_pad+0x120>)
    43c8:	4298      	cmp	r0, r3
    43ca:	d04a      	beq.n	4462 <_sercom_get_default_pad+0xb2>
    43cc:	4b41      	ldr	r3, [pc, #260]	; (44d4 <_sercom_get_default_pad+0x124>)
    43ce:	4298      	cmp	r0, r3
    43d0:	d058      	beq.n	4484 <_sercom_get_default_pad+0xd4>
    43d2:	4b41      	ldr	r3, [pc, #260]	; (44d8 <_sercom_get_default_pad+0x128>)
    43d4:	4298      	cmp	r0, r3
    43d6:	d166      	bne.n	44a6 <_sercom_get_default_pad+0xf6>
    43d8:	e032      	b.n	4440 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    43da:	2901      	cmp	r1, #1
    43dc:	d006      	beq.n	43ec <_sercom_get_default_pad+0x3c>
    43de:	2900      	cmp	r1, #0
    43e0:	d063      	beq.n	44aa <_sercom_get_default_pad+0xfa>
    43e2:	2902      	cmp	r1, #2
    43e4:	d006      	beq.n	43f4 <_sercom_get_default_pad+0x44>
    43e6:	2903      	cmp	r1, #3
    43e8:	d006      	beq.n	43f8 <_sercom_get_default_pad+0x48>
    43ea:	e001      	b.n	43f0 <_sercom_get_default_pad+0x40>
    43ec:	483b      	ldr	r0, [pc, #236]	; (44dc <_sercom_get_default_pad+0x12c>)
    43ee:	e067      	b.n	44c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    43f0:	2000      	movs	r0, #0
    43f2:	e065      	b.n	44c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    43f4:	483a      	ldr	r0, [pc, #232]	; (44e0 <_sercom_get_default_pad+0x130>)
    43f6:	e063      	b.n	44c0 <_sercom_get_default_pad+0x110>
    43f8:	483a      	ldr	r0, [pc, #232]	; (44e4 <_sercom_get_default_pad+0x134>)
    43fa:	e061      	b.n	44c0 <_sercom_get_default_pad+0x110>
    43fc:	2901      	cmp	r1, #1
    43fe:	d006      	beq.n	440e <_sercom_get_default_pad+0x5e>
    4400:	2900      	cmp	r1, #0
    4402:	d054      	beq.n	44ae <_sercom_get_default_pad+0xfe>
    4404:	2902      	cmp	r1, #2
    4406:	d006      	beq.n	4416 <_sercom_get_default_pad+0x66>
    4408:	2903      	cmp	r1, #3
    440a:	d006      	beq.n	441a <_sercom_get_default_pad+0x6a>
    440c:	e001      	b.n	4412 <_sercom_get_default_pad+0x62>
    440e:	4836      	ldr	r0, [pc, #216]	; (44e8 <_sercom_get_default_pad+0x138>)
    4410:	e056      	b.n	44c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    4412:	2000      	movs	r0, #0
    4414:	e054      	b.n	44c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4416:	4835      	ldr	r0, [pc, #212]	; (44ec <_sercom_get_default_pad+0x13c>)
    4418:	e052      	b.n	44c0 <_sercom_get_default_pad+0x110>
    441a:	4835      	ldr	r0, [pc, #212]	; (44f0 <_sercom_get_default_pad+0x140>)
    441c:	e050      	b.n	44c0 <_sercom_get_default_pad+0x110>
    441e:	2901      	cmp	r1, #1
    4420:	d006      	beq.n	4430 <_sercom_get_default_pad+0x80>
    4422:	2900      	cmp	r1, #0
    4424:	d045      	beq.n	44b2 <_sercom_get_default_pad+0x102>
    4426:	2902      	cmp	r1, #2
    4428:	d006      	beq.n	4438 <_sercom_get_default_pad+0x88>
    442a:	2903      	cmp	r1, #3
    442c:	d006      	beq.n	443c <_sercom_get_default_pad+0x8c>
    442e:	e001      	b.n	4434 <_sercom_get_default_pad+0x84>
    4430:	4830      	ldr	r0, [pc, #192]	; (44f4 <_sercom_get_default_pad+0x144>)
    4432:	e045      	b.n	44c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    4434:	2000      	movs	r0, #0
    4436:	e043      	b.n	44c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4438:	482f      	ldr	r0, [pc, #188]	; (44f8 <_sercom_get_default_pad+0x148>)
    443a:	e041      	b.n	44c0 <_sercom_get_default_pad+0x110>
    443c:	482f      	ldr	r0, [pc, #188]	; (44fc <_sercom_get_default_pad+0x14c>)
    443e:	e03f      	b.n	44c0 <_sercom_get_default_pad+0x110>
    4440:	2901      	cmp	r1, #1
    4442:	d006      	beq.n	4452 <_sercom_get_default_pad+0xa2>
    4444:	2900      	cmp	r1, #0
    4446:	d036      	beq.n	44b6 <_sercom_get_default_pad+0x106>
    4448:	2902      	cmp	r1, #2
    444a:	d006      	beq.n	445a <_sercom_get_default_pad+0xaa>
    444c:	2903      	cmp	r1, #3
    444e:	d006      	beq.n	445e <_sercom_get_default_pad+0xae>
    4450:	e001      	b.n	4456 <_sercom_get_default_pad+0xa6>
    4452:	482b      	ldr	r0, [pc, #172]	; (4500 <_sercom_get_default_pad+0x150>)
    4454:	e034      	b.n	44c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    4456:	2000      	movs	r0, #0
    4458:	e032      	b.n	44c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    445a:	482a      	ldr	r0, [pc, #168]	; (4504 <_sercom_get_default_pad+0x154>)
    445c:	e030      	b.n	44c0 <_sercom_get_default_pad+0x110>
    445e:	482a      	ldr	r0, [pc, #168]	; (4508 <_sercom_get_default_pad+0x158>)
    4460:	e02e      	b.n	44c0 <_sercom_get_default_pad+0x110>
    4462:	2901      	cmp	r1, #1
    4464:	d006      	beq.n	4474 <_sercom_get_default_pad+0xc4>
    4466:	2900      	cmp	r1, #0
    4468:	d027      	beq.n	44ba <_sercom_get_default_pad+0x10a>
    446a:	2902      	cmp	r1, #2
    446c:	d006      	beq.n	447c <_sercom_get_default_pad+0xcc>
    446e:	2903      	cmp	r1, #3
    4470:	d006      	beq.n	4480 <_sercom_get_default_pad+0xd0>
    4472:	e001      	b.n	4478 <_sercom_get_default_pad+0xc8>
    4474:	4825      	ldr	r0, [pc, #148]	; (450c <_sercom_get_default_pad+0x15c>)
    4476:	e023      	b.n	44c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    4478:	2000      	movs	r0, #0
    447a:	e021      	b.n	44c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    447c:	4824      	ldr	r0, [pc, #144]	; (4510 <_sercom_get_default_pad+0x160>)
    447e:	e01f      	b.n	44c0 <_sercom_get_default_pad+0x110>
    4480:	4824      	ldr	r0, [pc, #144]	; (4514 <_sercom_get_default_pad+0x164>)
    4482:	e01d      	b.n	44c0 <_sercom_get_default_pad+0x110>
    4484:	2901      	cmp	r1, #1
    4486:	d006      	beq.n	4496 <_sercom_get_default_pad+0xe6>
    4488:	2900      	cmp	r1, #0
    448a:	d018      	beq.n	44be <_sercom_get_default_pad+0x10e>
    448c:	2902      	cmp	r1, #2
    448e:	d006      	beq.n	449e <_sercom_get_default_pad+0xee>
    4490:	2903      	cmp	r1, #3
    4492:	d006      	beq.n	44a2 <_sercom_get_default_pad+0xf2>
    4494:	e001      	b.n	449a <_sercom_get_default_pad+0xea>
    4496:	4820      	ldr	r0, [pc, #128]	; (4518 <_sercom_get_default_pad+0x168>)
    4498:	e012      	b.n	44c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    449a:	2000      	movs	r0, #0
    449c:	e010      	b.n	44c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    449e:	481f      	ldr	r0, [pc, #124]	; (451c <_sercom_get_default_pad+0x16c>)
    44a0:	e00e      	b.n	44c0 <_sercom_get_default_pad+0x110>
    44a2:	481f      	ldr	r0, [pc, #124]	; (4520 <_sercom_get_default_pad+0x170>)
    44a4:	e00c      	b.n	44c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    44a6:	2000      	movs	r0, #0
    44a8:	e00a      	b.n	44c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    44aa:	481e      	ldr	r0, [pc, #120]	; (4524 <_sercom_get_default_pad+0x174>)
    44ac:	e008      	b.n	44c0 <_sercom_get_default_pad+0x110>
    44ae:	2003      	movs	r0, #3
    44b0:	e006      	b.n	44c0 <_sercom_get_default_pad+0x110>
    44b2:	481d      	ldr	r0, [pc, #116]	; (4528 <_sercom_get_default_pad+0x178>)
    44b4:	e004      	b.n	44c0 <_sercom_get_default_pad+0x110>
    44b6:	481d      	ldr	r0, [pc, #116]	; (452c <_sercom_get_default_pad+0x17c>)
    44b8:	e002      	b.n	44c0 <_sercom_get_default_pad+0x110>
    44ba:	481d      	ldr	r0, [pc, #116]	; (4530 <_sercom_get_default_pad+0x180>)
    44bc:	e000      	b.n	44c0 <_sercom_get_default_pad+0x110>
    44be:	481d      	ldr	r0, [pc, #116]	; (4534 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    44c0:	4770      	bx	lr
    44c2:	46c0      	nop			; (mov r8, r8)
    44c4:	42001000 	.word	0x42001000
    44c8:	42000800 	.word	0x42000800
    44cc:	42000c00 	.word	0x42000c00
    44d0:	42001800 	.word	0x42001800
    44d4:	42001c00 	.word	0x42001c00
    44d8:	42001400 	.word	0x42001400
    44dc:	00050003 	.word	0x00050003
    44e0:	00060003 	.word	0x00060003
    44e4:	00070003 	.word	0x00070003
    44e8:	00010003 	.word	0x00010003
    44ec:	001e0003 	.word	0x001e0003
    44f0:	001f0003 	.word	0x001f0003
    44f4:	00090003 	.word	0x00090003
    44f8:	000a0003 	.word	0x000a0003
    44fc:	000b0003 	.word	0x000b0003
    4500:	00110003 	.word	0x00110003
    4504:	00120003 	.word	0x00120003
    4508:	00130003 	.word	0x00130003
    450c:	000d0003 	.word	0x000d0003
    4510:	000e0003 	.word	0x000e0003
    4514:	000f0003 	.word	0x000f0003
    4518:	00170003 	.word	0x00170003
    451c:	00180003 	.word	0x00180003
    4520:	00190003 	.word	0x00190003
    4524:	00040003 	.word	0x00040003
    4528:	00080003 	.word	0x00080003
    452c:	00100003 	.word	0x00100003
    4530:	000c0003 	.word	0x000c0003
    4534:	00160003 	.word	0x00160003

00004538 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4538:	b530      	push	{r4, r5, lr}
    453a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    453c:	4b0c      	ldr	r3, [pc, #48]	; (4570 <_sercom_get_sercom_inst_index+0x38>)
    453e:	466a      	mov	r2, sp
    4540:	cb32      	ldmia	r3!, {r1, r4, r5}
    4542:	c232      	stmia	r2!, {r1, r4, r5}
    4544:	cb32      	ldmia	r3!, {r1, r4, r5}
    4546:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4548:	9b00      	ldr	r3, [sp, #0]
    454a:	4283      	cmp	r3, r0
    454c:	d006      	beq.n	455c <_sercom_get_sercom_inst_index+0x24>
    454e:	2301      	movs	r3, #1
    4550:	009a      	lsls	r2, r3, #2
    4552:	4669      	mov	r1, sp
    4554:	5852      	ldr	r2, [r2, r1]
    4556:	4282      	cmp	r2, r0
    4558:	d103      	bne.n	4562 <_sercom_get_sercom_inst_index+0x2a>
    455a:	e000      	b.n	455e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    455c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    455e:	b2d8      	uxtb	r0, r3
    4560:	e003      	b.n	456a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4562:	3301      	adds	r3, #1
    4564:	2b06      	cmp	r3, #6
    4566:	d1f3      	bne.n	4550 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4568:	2000      	movs	r0, #0
}
    456a:	b007      	add	sp, #28
    456c:	bd30      	pop	{r4, r5, pc}
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	00005f48 	.word	0x00005f48

00004574 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4574:	4770      	bx	lr
    4576:	46c0      	nop			; (mov r8, r8)

00004578 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4578:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    457a:	4b0a      	ldr	r3, [pc, #40]	; (45a4 <_sercom_set_handler+0x2c>)
    457c:	781b      	ldrb	r3, [r3, #0]
    457e:	2b00      	cmp	r3, #0
    4580:	d10c      	bne.n	459c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4582:	4f09      	ldr	r7, [pc, #36]	; (45a8 <_sercom_set_handler+0x30>)
    4584:	4e09      	ldr	r6, [pc, #36]	; (45ac <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    4586:	4d0a      	ldr	r5, [pc, #40]	; (45b0 <_sercom_set_handler+0x38>)
    4588:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    458a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    458c:	195a      	adds	r2, r3, r5
    458e:	6014      	str	r4, [r2, #0]
    4590:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4592:	2b18      	cmp	r3, #24
    4594:	d1f9      	bne.n	458a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    4596:	2201      	movs	r2, #1
    4598:	4b02      	ldr	r3, [pc, #8]	; (45a4 <_sercom_set_handler+0x2c>)
    459a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    459c:	0080      	lsls	r0, r0, #2
    459e:	4b02      	ldr	r3, [pc, #8]	; (45a8 <_sercom_set_handler+0x30>)
    45a0:	50c1      	str	r1, [r0, r3]
}
    45a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45a4:	20000096 	.word	0x20000096
    45a8:	20000098 	.word	0x20000098
    45ac:	00004575 	.word	0x00004575
    45b0:	20000108 	.word	0x20000108

000045b4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    45b4:	b510      	push	{r4, lr}
    45b6:	b082      	sub	sp, #8
    45b8:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    45ba:	2206      	movs	r2, #6
    45bc:	4905      	ldr	r1, [pc, #20]	; (45d4 <_sercom_get_interrupt_vector+0x20>)
    45be:	4668      	mov	r0, sp
    45c0:	4b05      	ldr	r3, [pc, #20]	; (45d8 <_sercom_get_interrupt_vector+0x24>)
    45c2:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    45c4:	0020      	movs	r0, r4
    45c6:	4b05      	ldr	r3, [pc, #20]	; (45dc <_sercom_get_interrupt_vector+0x28>)
    45c8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    45ca:	466b      	mov	r3, sp
    45cc:	5618      	ldrsb	r0, [r3, r0]
}
    45ce:	b002      	add	sp, #8
    45d0:	bd10      	pop	{r4, pc}
    45d2:	46c0      	nop			; (mov r8, r8)
    45d4:	00005f60 	.word	0x00005f60
    45d8:	00005791 	.word	0x00005791
    45dc:	00004539 	.word	0x00004539

000045e0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    45e0:	b510      	push	{r4, lr}
    45e2:	4b02      	ldr	r3, [pc, #8]	; (45ec <SERCOM0_Handler+0xc>)
    45e4:	681b      	ldr	r3, [r3, #0]
    45e6:	2000      	movs	r0, #0
    45e8:	4798      	blx	r3
    45ea:	bd10      	pop	{r4, pc}
    45ec:	20000098 	.word	0x20000098

000045f0 <SERCOM1_Handler>:
    45f0:	b510      	push	{r4, lr}
    45f2:	4b02      	ldr	r3, [pc, #8]	; (45fc <SERCOM1_Handler+0xc>)
    45f4:	685b      	ldr	r3, [r3, #4]
    45f6:	2001      	movs	r0, #1
    45f8:	4798      	blx	r3
    45fa:	bd10      	pop	{r4, pc}
    45fc:	20000098 	.word	0x20000098

00004600 <SERCOM2_Handler>:
    4600:	b510      	push	{r4, lr}
    4602:	4b02      	ldr	r3, [pc, #8]	; (460c <SERCOM2_Handler+0xc>)
    4604:	689b      	ldr	r3, [r3, #8]
    4606:	2002      	movs	r0, #2
    4608:	4798      	blx	r3
    460a:	bd10      	pop	{r4, pc}
    460c:	20000098 	.word	0x20000098

00004610 <SERCOM3_Handler>:
    4610:	b510      	push	{r4, lr}
    4612:	4b02      	ldr	r3, [pc, #8]	; (461c <SERCOM3_Handler+0xc>)
    4614:	68db      	ldr	r3, [r3, #12]
    4616:	2003      	movs	r0, #3
    4618:	4798      	blx	r3
    461a:	bd10      	pop	{r4, pc}
    461c:	20000098 	.word	0x20000098

00004620 <SERCOM4_Handler>:
    4620:	b510      	push	{r4, lr}
    4622:	4b02      	ldr	r3, [pc, #8]	; (462c <SERCOM4_Handler+0xc>)
    4624:	691b      	ldr	r3, [r3, #16]
    4626:	2004      	movs	r0, #4
    4628:	4798      	blx	r3
    462a:	bd10      	pop	{r4, pc}
    462c:	20000098 	.word	0x20000098

00004630 <SERCOM5_Handler>:
    4630:	b510      	push	{r4, lr}
    4632:	4b02      	ldr	r3, [pc, #8]	; (463c <SERCOM5_Handler+0xc>)
    4634:	695b      	ldr	r3, [r3, #20]
    4636:	2005      	movs	r0, #5
    4638:	4798      	blx	r3
    463a:	bd10      	pop	{r4, pc}
    463c:	20000098 	.word	0x20000098

00004640 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4640:	b5f0      	push	{r4, r5, r6, r7, lr}
    4642:	465f      	mov	r7, fp
    4644:	4656      	mov	r6, sl
    4646:	464d      	mov	r5, r9
    4648:	4644      	mov	r4, r8
    464a:	b4f0      	push	{r4, r5, r6, r7}
    464c:	b091      	sub	sp, #68	; 0x44
    464e:	0005      	movs	r5, r0
    4650:	000c      	movs	r4, r1
    4652:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4654:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4656:	0008      	movs	r0, r1
    4658:	4bbb      	ldr	r3, [pc, #748]	; (4948 <usart_init+0x308>)
    465a:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    465c:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    465e:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4660:	07d2      	lsls	r2, r2, #31
    4662:	d500      	bpl.n	4666 <usart_init+0x26>
    4664:	e167      	b.n	4936 <usart_init+0x2f6>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4666:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4668:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    466a:	0792      	lsls	r2, r2, #30
    466c:	d500      	bpl.n	4670 <usart_init+0x30>
    466e:	e162      	b.n	4936 <usart_init+0x2f6>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4670:	49b6      	ldr	r1, [pc, #728]	; (494c <usart_init+0x30c>)
    4672:	6a0a      	ldr	r2, [r1, #32]
    4674:	1c87      	adds	r7, r0, #2
    4676:	3b1b      	subs	r3, #27
    4678:	40bb      	lsls	r3, r7
    467a:	4313      	orrs	r3, r2
    467c:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    467e:	a90f      	add	r1, sp, #60	; 0x3c
    4680:	272d      	movs	r7, #45	; 0x2d
    4682:	5df3      	ldrb	r3, [r6, r7]
    4684:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4686:	3014      	adds	r0, #20
    4688:	b2c3      	uxtb	r3, r0
    468a:	9302      	str	r3, [sp, #8]
    468c:	0018      	movs	r0, r3
    468e:	4bb0      	ldr	r3, [pc, #704]	; (4950 <usart_init+0x310>)
    4690:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4692:	9802      	ldr	r0, [sp, #8]
    4694:	4baf      	ldr	r3, [pc, #700]	; (4954 <usart_init+0x314>)
    4696:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4698:	5df0      	ldrb	r0, [r6, r7]
    469a:	2100      	movs	r1, #0
    469c:	4bae      	ldr	r3, [pc, #696]	; (4958 <usart_init+0x318>)
    469e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    46a0:	7af3      	ldrb	r3, [r6, #11]
    46a2:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    46a4:	2324      	movs	r3, #36	; 0x24
    46a6:	5cf3      	ldrb	r3, [r6, r3]
    46a8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    46aa:	2325      	movs	r3, #37	; 0x25
    46ac:	5cf3      	ldrb	r3, [r6, r3]
    46ae:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    46b0:	7ef3      	ldrb	r3, [r6, #27]
    46b2:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    46b4:	7f33      	ldrb	r3, [r6, #28]
    46b6:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    46b8:	682b      	ldr	r3, [r5, #0]
    46ba:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    46bc:	0018      	movs	r0, r3
    46be:	4ba2      	ldr	r3, [pc, #648]	; (4948 <usart_init+0x308>)
    46c0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    46c2:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    46c4:	2200      	movs	r2, #0
    46c6:	230e      	movs	r3, #14
    46c8:	a906      	add	r1, sp, #24
    46ca:	468c      	mov	ip, r1
    46cc:	4463      	add	r3, ip
    46ce:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    46d0:	8a32      	ldrh	r2, [r6, #16]
    46d2:	9202      	str	r2, [sp, #8]
    46d4:	2380      	movs	r3, #128	; 0x80
    46d6:	01db      	lsls	r3, r3, #7
    46d8:	429a      	cmp	r2, r3
    46da:	d01a      	beq.n	4712 <usart_init+0xd2>
    46dc:	d804      	bhi.n	46e8 <usart_init+0xa8>
    46de:	2380      	movs	r3, #128	; 0x80
    46e0:	019b      	lsls	r3, r3, #6
    46e2:	429a      	cmp	r2, r3
    46e4:	d00b      	beq.n	46fe <usart_init+0xbe>
    46e6:	e107      	b.n	48f8 <usart_init+0x2b8>
    46e8:	23c0      	movs	r3, #192	; 0xc0
    46ea:	01db      	lsls	r3, r3, #7
    46ec:	9a02      	ldr	r2, [sp, #8]
    46ee:	429a      	cmp	r2, r3
    46f0:	d00a      	beq.n	4708 <usart_init+0xc8>
    46f2:	2380      	movs	r3, #128	; 0x80
    46f4:	021b      	lsls	r3, r3, #8
    46f6:	429a      	cmp	r2, r3
    46f8:	d100      	bne.n	46fc <usart_init+0xbc>
    46fa:	e102      	b.n	4902 <usart_init+0x2c2>
    46fc:	e0fc      	b.n	48f8 <usart_init+0x2b8>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    46fe:	2310      	movs	r3, #16
    4700:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4702:	3b0f      	subs	r3, #15
    4704:	9307      	str	r3, [sp, #28]
    4706:	e100      	b.n	490a <usart_init+0x2ca>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4708:	2308      	movs	r3, #8
    470a:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    470c:	3b07      	subs	r3, #7
    470e:	9307      	str	r3, [sp, #28]
    4710:	e0fb      	b.n	490a <usart_init+0x2ca>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4712:	6833      	ldr	r3, [r6, #0]
    4714:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    4716:	68f3      	ldr	r3, [r6, #12]
    4718:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    471a:	6973      	ldr	r3, [r6, #20]
    471c:	4698      	mov	r8, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    471e:	7e33      	ldrb	r3, [r6, #24]
    4720:	469b      	mov	fp, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4722:	2326      	movs	r3, #38	; 0x26
    4724:	5cf3      	ldrb	r3, [r6, r3]
    4726:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    4728:	6873      	ldr	r3, [r6, #4]
    472a:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    472c:	2b00      	cmp	r3, #0
    472e:	d015      	beq.n	475c <usart_init+0x11c>
    4730:	2380      	movs	r3, #128	; 0x80
    4732:	055b      	lsls	r3, r3, #21
    4734:	459a      	cmp	sl, r3
    4736:	d136      	bne.n	47a6 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    4738:	2327      	movs	r3, #39	; 0x27
    473a:	5cf3      	ldrb	r3, [r6, r3]
    473c:	2b00      	cmp	r3, #0
    473e:	d136      	bne.n	47ae <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4740:	6a33      	ldr	r3, [r6, #32]
    4742:	001f      	movs	r7, r3
    4744:	b2c0      	uxtb	r0, r0
    4746:	4b85      	ldr	r3, [pc, #532]	; (495c <usart_init+0x31c>)
    4748:	4798      	blx	r3
    474a:	0001      	movs	r1, r0
    474c:	220e      	movs	r2, #14
    474e:	ab06      	add	r3, sp, #24
    4750:	469c      	mov	ip, r3
    4752:	4462      	add	r2, ip
    4754:	0038      	movs	r0, r7
    4756:	4b82      	ldr	r3, [pc, #520]	; (4960 <usart_init+0x320>)
    4758:	4798      	blx	r3
    475a:	e025      	b.n	47a8 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    475c:	2308      	movs	r3, #8
    475e:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4760:	2300      	movs	r3, #0
    4762:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4764:	2327      	movs	r3, #39	; 0x27
    4766:	5cf3      	ldrb	r3, [r6, r3]
    4768:	2b00      	cmp	r3, #0
    476a:	d00b      	beq.n	4784 <usart_init+0x144>
				status_code =
    476c:	9b06      	ldr	r3, [sp, #24]
    476e:	9300      	str	r3, [sp, #0]
    4770:	9b07      	ldr	r3, [sp, #28]
    4772:	220e      	movs	r2, #14
    4774:	a906      	add	r1, sp, #24
    4776:	468c      	mov	ip, r1
    4778:	4462      	add	r2, ip
    477a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    477c:	6a30      	ldr	r0, [r6, #32]
    477e:	4f79      	ldr	r7, [pc, #484]	; (4964 <usart_init+0x324>)
    4780:	47b8      	blx	r7
    4782:	e011      	b.n	47a8 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4784:	6a33      	ldr	r3, [r6, #32]
    4786:	001f      	movs	r7, r3
    4788:	b2c0      	uxtb	r0, r0
    478a:	4b74      	ldr	r3, [pc, #464]	; (495c <usart_init+0x31c>)
    478c:	4798      	blx	r3
    478e:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    4790:	9b06      	ldr	r3, [sp, #24]
    4792:	9300      	str	r3, [sp, #0]
    4794:	9b07      	ldr	r3, [sp, #28]
    4796:	220e      	movs	r2, #14
    4798:	a806      	add	r0, sp, #24
    479a:	4684      	mov	ip, r0
    479c:	4462      	add	r2, ip
    479e:	0038      	movs	r0, r7
    47a0:	4f70      	ldr	r7, [pc, #448]	; (4964 <usart_init+0x324>)
    47a2:	47b8      	blx	r7
    47a4:	e000      	b.n	47a8 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    47a6:	2000      	movs	r0, #0
    47a8:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    47aa:	d000      	beq.n	47ae <usart_init+0x16e>
    47ac:	e0c3      	b.n	4936 <usart_init+0x2f6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    47ae:	7e73      	ldrb	r3, [r6, #25]
    47b0:	2b00      	cmp	r3, #0
    47b2:	d002      	beq.n	47ba <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    47b4:	7eb3      	ldrb	r3, [r6, #26]
    47b6:	464a      	mov	r2, r9
    47b8:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    47ba:	682a      	ldr	r2, [r5, #0]
    47bc:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    47be:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    47c0:	2b00      	cmp	r3, #0
    47c2:	d1fc      	bne.n	47be <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    47c4:	330e      	adds	r3, #14
    47c6:	aa06      	add	r2, sp, #24
    47c8:	4694      	mov	ip, r2
    47ca:	4463      	add	r3, ip
    47cc:	881b      	ldrh	r3, [r3, #0]
    47ce:	464a      	mov	r2, r9
    47d0:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    47d2:	9b04      	ldr	r3, [sp, #16]
    47d4:	9a03      	ldr	r2, [sp, #12]
    47d6:	4313      	orrs	r3, r2
    47d8:	4642      	mov	r2, r8
    47da:	4313      	orrs	r3, r2
    47dc:	4652      	mov	r2, sl
    47de:	4313      	orrs	r3, r2
    47e0:	433b      	orrs	r3, r7
    47e2:	465a      	mov	r2, fp
    47e4:	0212      	lsls	r2, r2, #8
    47e6:	4313      	orrs	r3, r2
    47e8:	9a05      	ldr	r2, [sp, #20]
    47ea:	0757      	lsls	r7, r2, #29
    47ec:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    47ee:	2327      	movs	r3, #39	; 0x27
    47f0:	5cf3      	ldrb	r3, [r6, r3]
    47f2:	2b00      	cmp	r3, #0
    47f4:	d101      	bne.n	47fa <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    47f6:	3304      	adds	r3, #4
    47f8:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    47fa:	7e71      	ldrb	r1, [r6, #25]
    47fc:	0289      	lsls	r1, r1, #10
    47fe:	7f33      	ldrb	r3, [r6, #28]
    4800:	025b      	lsls	r3, r3, #9
    4802:	4319      	orrs	r1, r3
    4804:	7f73      	ldrb	r3, [r6, #29]
    4806:	021b      	lsls	r3, r3, #8
    4808:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    480a:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    480c:	5cf3      	ldrb	r3, [r6, r3]
    480e:	045b      	lsls	r3, r3, #17
    4810:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4812:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    4814:	5cf0      	ldrb	r0, [r6, r3]
    4816:	0400      	lsls	r0, r0, #16
    4818:	000a      	movs	r2, r1
    481a:	4302      	orrs	r2, r0
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
	ctrlb |= (uint32_t)config->character_size;
    481c:	7ab1      	ldrb	r1, [r6, #10]
    481e:	7af3      	ldrb	r3, [r6, #11]
    4820:	4319      	orrs	r1, r3
    4822:	4311      	orrs	r1, r2
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    4824:	8933      	ldrh	r3, [r6, #8]
    4826:	2bff      	cmp	r3, #255	; 0xff
    4828:	d004      	beq.n	4834 <usart_init+0x1f4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    482a:	2280      	movs	r2, #128	; 0x80
    482c:	0452      	lsls	r2, r2, #17
    482e:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4830:	4319      	orrs	r1, r3
    4832:	e005      	b.n	4840 <usart_init+0x200>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4834:	7ef3      	ldrb	r3, [r6, #27]
    4836:	2b00      	cmp	r3, #0
    4838:	d002      	beq.n	4840 <usart_init+0x200>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    483a:	2380      	movs	r3, #128	; 0x80
    483c:	04db      	lsls	r3, r3, #19
    483e:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4840:	232c      	movs	r3, #44	; 0x2c
    4842:	5cf3      	ldrb	r3, [r6, r3]
    4844:	2b00      	cmp	r3, #0
    4846:	d103      	bne.n	4850 <usart_init+0x210>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4848:	4b47      	ldr	r3, [pc, #284]	; (4968 <usart_init+0x328>)
    484a:	789b      	ldrb	r3, [r3, #2]
    484c:	079b      	lsls	r3, r3, #30
    484e:	d501      	bpl.n	4854 <usart_init+0x214>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4850:	2380      	movs	r3, #128	; 0x80
    4852:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4854:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4856:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4858:	2b00      	cmp	r3, #0
    485a:	d1fc      	bne.n	4856 <usart_init+0x216>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    485c:	464b      	mov	r3, r9
    485e:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4860:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4862:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4864:	2b00      	cmp	r3, #0
    4866:	d1fc      	bne.n	4862 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4868:	464b      	mov	r3, r9
    486a:	601f      	str	r7, [r3, #0]
    486c:	ab0e      	add	r3, sp, #56	; 0x38
    486e:	2280      	movs	r2, #128	; 0x80
    4870:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4872:	2200      	movs	r2, #0
    4874:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    4876:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4878:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    487a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    487c:	930a      	str	r3, [sp, #40]	; 0x28
    487e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4880:	930b      	str	r3, [sp, #44]	; 0x2c
    4882:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4884:	930c      	str	r3, [sp, #48]	; 0x30
    4886:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4888:	9302      	str	r3, [sp, #8]
    488a:	930d      	str	r3, [sp, #52]	; 0x34
    488c:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    488e:	ae0e      	add	r6, sp, #56	; 0x38
    4890:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4892:	00bb      	lsls	r3, r7, #2
    4894:	aa0a      	add	r2, sp, #40	; 0x28
    4896:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    4898:	2800      	cmp	r0, #0
    489a:	d102      	bne.n	48a2 <usart_init+0x262>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    489c:	0020      	movs	r0, r4
    489e:	4b33      	ldr	r3, [pc, #204]	; (496c <usart_init+0x32c>)
    48a0:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    48a2:	1c43      	adds	r3, r0, #1
    48a4:	d005      	beq.n	48b2 <usart_init+0x272>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    48a6:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    48a8:	0c00      	lsrs	r0, r0, #16
    48aa:	b2c0      	uxtb	r0, r0
    48ac:	0031      	movs	r1, r6
    48ae:	4b30      	ldr	r3, [pc, #192]	; (4970 <usart_init+0x330>)
    48b0:	4798      	blx	r3
    48b2:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    48b4:	2f04      	cmp	r7, #4
    48b6:	d1eb      	bne.n	4890 <usart_init+0x250>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    48b8:	2300      	movs	r3, #0
    48ba:	60eb      	str	r3, [r5, #12]
    48bc:	612b      	str	r3, [r5, #16]
    48be:	616b      	str	r3, [r5, #20]
    48c0:	61ab      	str	r3, [r5, #24]
    48c2:	61eb      	str	r3, [r5, #28]
    48c4:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    48c6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    48c8:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    48ca:	2200      	movs	r2, #0
    48cc:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    48ce:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    48d0:	3330      	adds	r3, #48	; 0x30
    48d2:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    48d4:	3301      	adds	r3, #1
    48d6:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    48d8:	3301      	adds	r3, #1
    48da:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    48dc:	3301      	adds	r3, #1
    48de:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    48e0:	6828      	ldr	r0, [r5, #0]
    48e2:	4b19      	ldr	r3, [pc, #100]	; (4948 <usart_init+0x308>)
    48e4:	4798      	blx	r3
    48e6:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    48e8:	4922      	ldr	r1, [pc, #136]	; (4974 <usart_init+0x334>)
    48ea:	4b23      	ldr	r3, [pc, #140]	; (4978 <usart_init+0x338>)
    48ec:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    48ee:	00a4      	lsls	r4, r4, #2
    48f0:	4b22      	ldr	r3, [pc, #136]	; (497c <usart_init+0x33c>)
    48f2:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    48f4:	2300      	movs	r3, #0
    48f6:	e01e      	b.n	4936 <usart_init+0x2f6>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    48f8:	2310      	movs	r3, #16
    48fa:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    48fc:	2300      	movs	r3, #0
    48fe:	9307      	str	r3, [sp, #28]
    4900:	e003      	b.n	490a <usart_init+0x2ca>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4902:	2303      	movs	r3, #3
    4904:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4906:	2300      	movs	r3, #0
    4908:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    490a:	6833      	ldr	r3, [r6, #0]
    490c:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
    490e:	68f3      	ldr	r3, [r6, #12]
    4910:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4912:	6973      	ldr	r3, [r6, #20]
    4914:	4698      	mov	r8, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4916:	7e33      	ldrb	r3, [r6, #24]
    4918:	469b      	mov	fp, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    491a:	2326      	movs	r3, #38	; 0x26
    491c:	5cf3      	ldrb	r3, [r6, r3]
    491e:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
    4920:	6873      	ldr	r3, [r6, #4]
    4922:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    4924:	2b00      	cmp	r3, #0
    4926:	d100      	bne.n	492a <usart_init+0x2ea>
    4928:	e71c      	b.n	4764 <usart_init+0x124>
    492a:	2380      	movs	r3, #128	; 0x80
    492c:	055b      	lsls	r3, r3, #21
    492e:	459a      	cmp	sl, r3
    4930:	d100      	bne.n	4934 <usart_init+0x2f4>
    4932:	e701      	b.n	4738 <usart_init+0xf8>
    4934:	e73b      	b.n	47ae <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    4936:	0018      	movs	r0, r3
    4938:	b011      	add	sp, #68	; 0x44
    493a:	bc3c      	pop	{r2, r3, r4, r5}
    493c:	4690      	mov	r8, r2
    493e:	4699      	mov	r9, r3
    4940:	46a2      	mov	sl, r4
    4942:	46ab      	mov	fp, r5
    4944:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4946:	46c0      	nop			; (mov r8, r8)
    4948:	00004539 	.word	0x00004539
    494c:	40000400 	.word	0x40000400
    4950:	00005115 	.word	0x00005115
    4954:	00005089 	.word	0x00005089
    4958:	00004365 	.word	0x00004365
    495c:	00005131 	.word	0x00005131
    4960:	000042a9 	.word	0x000042a9
    4964:	000042d1 	.word	0x000042d1
    4968:	41002000 	.word	0x41002000
    496c:	000043b1 	.word	0x000043b1
    4970:	0000520d 	.word	0x0000520d
    4974:	00004a1d 	.word	0x00004a1d
    4978:	00004579 	.word	0x00004579
    497c:	20000108 	.word	0x20000108

00004980 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4980:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    4982:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4984:	2a00      	cmp	r2, #0
    4986:	d00e      	beq.n	49a6 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    4988:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    498a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    498c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    498e:	2a00      	cmp	r2, #0
    4990:	d109      	bne.n	49a6 <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4992:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4994:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4996:	2a00      	cmp	r2, #0
    4998:	d1fc      	bne.n	4994 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    499a:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    499c:	2102      	movs	r1, #2
    499e:	7e1a      	ldrb	r2, [r3, #24]
    49a0:	420a      	tst	r2, r1
    49a2:	d0fc      	beq.n	499e <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    49a4:	2300      	movs	r3, #0
}
    49a6:	0018      	movs	r0, r3
    49a8:	4770      	bx	lr
    49aa:	46c0      	nop			; (mov r8, r8)

000049ac <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    49ac:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    49ae:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    49b0:	2a00      	cmp	r2, #0
    49b2:	d030      	beq.n	4a16 <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    49b4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    49b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    49b8:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    49ba:	2a00      	cmp	r2, #0
    49bc:	d12b      	bne.n	4a16 <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    49be:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    49c0:	7e10      	ldrb	r0, [r2, #24]
    49c2:	0740      	lsls	r0, r0, #29
    49c4:	d527      	bpl.n	4a16 <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    49c6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    49c8:	2b00      	cmp	r3, #0
    49ca:	d1fc      	bne.n	49c6 <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    49cc:	8b53      	ldrh	r3, [r2, #26]
    49ce:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    49d0:	0698      	lsls	r0, r3, #26
    49d2:	d01d      	beq.n	4a10 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    49d4:	0798      	lsls	r0, r3, #30
    49d6:	d503      	bpl.n	49e0 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    49d8:	2302      	movs	r3, #2
    49da:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
    49dc:	3318      	adds	r3, #24
    49de:	e01a      	b.n	4a16 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    49e0:	0758      	lsls	r0, r3, #29
    49e2:	d503      	bpl.n	49ec <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    49e4:	2304      	movs	r3, #4
    49e6:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
    49e8:	331a      	adds	r3, #26
    49ea:	e014      	b.n	4a16 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    49ec:	07d8      	lsls	r0, r3, #31
    49ee:	d503      	bpl.n	49f8 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    49f0:	2301      	movs	r3, #1
    49f2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
    49f4:	3312      	adds	r3, #18
    49f6:	e00e      	b.n	4a16 <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    49f8:	06d8      	lsls	r0, r3, #27
    49fa:	d503      	bpl.n	4a04 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    49fc:	2310      	movs	r3, #16
    49fe:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
    4a00:	3332      	adds	r3, #50	; 0x32
    4a02:	e008      	b.n	4a16 <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4a04:	069b      	lsls	r3, r3, #26
    4a06:	d503      	bpl.n	4a10 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4a08:	2320      	movs	r3, #32
    4a0a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
    4a0c:	3321      	adds	r3, #33	; 0x21
    4a0e:	e002      	b.n	4a16 <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    4a10:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4a12:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    4a14:	2300      	movs	r3, #0
}
    4a16:	0018      	movs	r0, r3
    4a18:	4770      	bx	lr
    4a1a:	46c0      	nop			; (mov r8, r8)

00004a1c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4a1e:	0080      	lsls	r0, r0, #2
    4a20:	4b60      	ldr	r3, [pc, #384]	; (4ba4 <_usart_interrupt_handler+0x188>)
    4a22:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4a24:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4a26:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4a28:	2b00      	cmp	r3, #0
    4a2a:	d1fc      	bne.n	4a26 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4a2c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    4a2e:	7da6      	ldrb	r6, [r4, #22]
    4a30:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    4a32:	2330      	movs	r3, #48	; 0x30
    4a34:	5ceb      	ldrb	r3, [r5, r3]
    4a36:	2231      	movs	r2, #49	; 0x31
    4a38:	5caf      	ldrb	r7, [r5, r2]
    4a3a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4a3c:	07f3      	lsls	r3, r6, #31
    4a3e:	d522      	bpl.n	4a86 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    4a40:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4a42:	b29b      	uxth	r3, r3
    4a44:	2b00      	cmp	r3, #0
    4a46:	d01c      	beq.n	4a82 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4a48:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4a4a:	7813      	ldrb	r3, [r2, #0]
    4a4c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4a4e:	1c51      	adds	r1, r2, #1
    4a50:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4a52:	7969      	ldrb	r1, [r5, #5]
    4a54:	2901      	cmp	r1, #1
    4a56:	d001      	beq.n	4a5c <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4a58:	b29b      	uxth	r3, r3
    4a5a:	e004      	b.n	4a66 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4a5c:	7851      	ldrb	r1, [r2, #1]
    4a5e:	0209      	lsls	r1, r1, #8
    4a60:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    4a62:	3202      	adds	r2, #2
    4a64:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4a66:	05db      	lsls	r3, r3, #23
    4a68:	0ddb      	lsrs	r3, r3, #23
    4a6a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4a6c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4a6e:	3b01      	subs	r3, #1
    4a70:	b29b      	uxth	r3, r3
    4a72:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4a74:	2b00      	cmp	r3, #0
    4a76:	d106      	bne.n	4a86 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4a78:	3301      	adds	r3, #1
    4a7a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4a7c:	3301      	adds	r3, #1
    4a7e:	75a3      	strb	r3, [r4, #22]
    4a80:	e001      	b.n	4a86 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4a82:	2301      	movs	r3, #1
    4a84:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4a86:	07b3      	lsls	r3, r6, #30
    4a88:	d509      	bpl.n	4a9e <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4a8a:	2302      	movs	r3, #2
    4a8c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4a8e:	2200      	movs	r2, #0
    4a90:	3331      	adds	r3, #49	; 0x31
    4a92:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4a94:	07fb      	lsls	r3, r7, #31
    4a96:	d502      	bpl.n	4a9e <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4a98:	0028      	movs	r0, r5
    4a9a:	68eb      	ldr	r3, [r5, #12]
    4a9c:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4a9e:	0773      	lsls	r3, r6, #29
    4aa0:	d560      	bpl.n	4b64 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
    4aa2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4aa4:	b29b      	uxth	r3, r3
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	d05a      	beq.n	4b60 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4aaa:	8b63      	ldrh	r3, [r4, #26]
    4aac:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4aae:	071a      	lsls	r2, r3, #28
    4ab0:	d402      	bmi.n	4ab8 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4ab2:	223f      	movs	r2, #63	; 0x3f
    4ab4:	4013      	ands	r3, r2
    4ab6:	e001      	b.n	4abc <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4ab8:	2237      	movs	r2, #55	; 0x37
    4aba:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4abc:	2b00      	cmp	r3, #0
    4abe:	d02d      	beq.n	4b1c <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4ac0:	079a      	lsls	r2, r3, #30
    4ac2:	d505      	bpl.n	4ad0 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4ac4:	221a      	movs	r2, #26
    4ac6:	2332      	movs	r3, #50	; 0x32
    4ac8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4aca:	3b30      	subs	r3, #48	; 0x30
    4acc:	8363      	strh	r3, [r4, #26]
    4ace:	e01f      	b.n	4b10 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4ad0:	075a      	lsls	r2, r3, #29
    4ad2:	d505      	bpl.n	4ae0 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    4ad4:	221e      	movs	r2, #30
    4ad6:	2332      	movs	r3, #50	; 0x32
    4ad8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4ada:	3b2e      	subs	r3, #46	; 0x2e
    4adc:	8363      	strh	r3, [r4, #26]
    4ade:	e017      	b.n	4b10 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4ae0:	07da      	lsls	r2, r3, #31
    4ae2:	d505      	bpl.n	4af0 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    4ae4:	2213      	movs	r2, #19
    4ae6:	2332      	movs	r3, #50	; 0x32
    4ae8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4aea:	3b31      	subs	r3, #49	; 0x31
    4aec:	8363      	strh	r3, [r4, #26]
    4aee:	e00f      	b.n	4b10 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4af0:	06da      	lsls	r2, r3, #27
    4af2:	d505      	bpl.n	4b00 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    4af4:	2242      	movs	r2, #66	; 0x42
    4af6:	2332      	movs	r3, #50	; 0x32
    4af8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4afa:	3b22      	subs	r3, #34	; 0x22
    4afc:	8363      	strh	r3, [r4, #26]
    4afe:	e007      	b.n	4b10 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4b00:	2220      	movs	r2, #32
    4b02:	421a      	tst	r2, r3
    4b04:	d004      	beq.n	4b10 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4b06:	3221      	adds	r2, #33	; 0x21
    4b08:	2332      	movs	r3, #50	; 0x32
    4b0a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4b0c:	3b12      	subs	r3, #18
    4b0e:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    4b10:	077b      	lsls	r3, r7, #29
    4b12:	d527      	bpl.n	4b64 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4b14:	0028      	movs	r0, r5
    4b16:	696b      	ldr	r3, [r5, #20]
    4b18:	4798      	blx	r3
    4b1a:	e023      	b.n	4b64 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4b1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4b1e:	05db      	lsls	r3, r3, #23
    4b20:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4b22:	b2da      	uxtb	r2, r3
    4b24:	6a69      	ldr	r1, [r5, #36]	; 0x24
    4b26:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4b28:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4b2a:	1c51      	adds	r1, r2, #1
    4b2c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4b2e:	7969      	ldrb	r1, [r5, #5]
    4b30:	2901      	cmp	r1, #1
    4b32:	d104      	bne.n	4b3e <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4b34:	0a1b      	lsrs	r3, r3, #8
    4b36:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    4b38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4b3a:	3301      	adds	r3, #1
    4b3c:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4b3e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4b40:	3b01      	subs	r3, #1
    4b42:	b29b      	uxth	r3, r3
    4b44:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4b46:	2b00      	cmp	r3, #0
    4b48:	d10c      	bne.n	4b64 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4b4a:	3304      	adds	r3, #4
    4b4c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    4b4e:	2200      	movs	r2, #0
    4b50:	332e      	adds	r3, #46	; 0x2e
    4b52:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4b54:	07bb      	lsls	r3, r7, #30
    4b56:	d505      	bpl.n	4b64 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4b58:	0028      	movs	r0, r5
    4b5a:	692b      	ldr	r3, [r5, #16]
    4b5c:	4798      	blx	r3
    4b5e:	e001      	b.n	4b64 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4b60:	2304      	movs	r3, #4
    4b62:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4b64:	06f3      	lsls	r3, r6, #27
    4b66:	d507      	bpl.n	4b78 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4b68:	2310      	movs	r3, #16
    4b6a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4b6c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4b6e:	06fb      	lsls	r3, r7, #27
    4b70:	d502      	bpl.n	4b78 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4b72:	0028      	movs	r0, r5
    4b74:	69eb      	ldr	r3, [r5, #28]
    4b76:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4b78:	06b3      	lsls	r3, r6, #26
    4b7a:	d507      	bpl.n	4b8c <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4b7c:	2320      	movs	r3, #32
    4b7e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4b80:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4b82:	073b      	lsls	r3, r7, #28
    4b84:	d502      	bpl.n	4b8c <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4b86:	0028      	movs	r0, r5
    4b88:	69ab      	ldr	r3, [r5, #24]
    4b8a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4b8c:	0733      	lsls	r3, r6, #28
    4b8e:	d507      	bpl.n	4ba0 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4b90:	2308      	movs	r3, #8
    4b92:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4b94:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4b96:	06bb      	lsls	r3, r7, #26
    4b98:	d502      	bpl.n	4ba0 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4b9a:	6a2b      	ldr	r3, [r5, #32]
    4b9c:	0028      	movs	r0, r5
    4b9e:	4798      	blx	r3
		}
	}
#endif
}
    4ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	20000108 	.word	0x20000108

00004ba8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4ba8:	b510      	push	{r4, lr}
	switch (clock_source) {
    4baa:	2808      	cmp	r0, #8
    4bac:	d803      	bhi.n	4bb6 <system_clock_source_get_hz+0xe>
    4bae:	0080      	lsls	r0, r0, #2
    4bb0:	4b1b      	ldr	r3, [pc, #108]	; (4c20 <system_clock_source_get_hz+0x78>)
    4bb2:	581b      	ldr	r3, [r3, r0]
    4bb4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4bb6:	2000      	movs	r0, #0
    4bb8:	e030      	b.n	4c1c <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4bba:	4b1a      	ldr	r3, [pc, #104]	; (4c24 <system_clock_source_get_hz+0x7c>)
    4bbc:	6918      	ldr	r0, [r3, #16]
    4bbe:	e02d      	b.n	4c1c <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4bc0:	4b19      	ldr	r3, [pc, #100]	; (4c28 <system_clock_source_get_hz+0x80>)
    4bc2:	6a1b      	ldr	r3, [r3, #32]
    4bc4:	059b      	lsls	r3, r3, #22
    4bc6:	0f9b      	lsrs	r3, r3, #30
    4bc8:	4818      	ldr	r0, [pc, #96]	; (4c2c <system_clock_source_get_hz+0x84>)
    4bca:	40d8      	lsrs	r0, r3
    4bcc:	e026      	b.n	4c1c <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4bce:	4b15      	ldr	r3, [pc, #84]	; (4c24 <system_clock_source_get_hz+0x7c>)
    4bd0:	6958      	ldr	r0, [r3, #20]
    4bd2:	e023      	b.n	4c1c <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4bd4:	4b13      	ldr	r3, [pc, #76]	; (4c24 <system_clock_source_get_hz+0x7c>)
    4bd6:	681b      	ldr	r3, [r3, #0]
    4bd8:	2002      	movs	r0, #2
    4bda:	4018      	ands	r0, r3
    4bdc:	d01e      	beq.n	4c1c <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4bde:	4912      	ldr	r1, [pc, #72]	; (4c28 <system_clock_source_get_hz+0x80>)
    4be0:	2210      	movs	r2, #16
    4be2:	68cb      	ldr	r3, [r1, #12]
    4be4:	421a      	tst	r2, r3
    4be6:	d0fc      	beq.n	4be2 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4be8:	4b0e      	ldr	r3, [pc, #56]	; (4c24 <system_clock_source_get_hz+0x7c>)
    4bea:	681b      	ldr	r3, [r3, #0]
    4bec:	075b      	lsls	r3, r3, #29
    4bee:	d514      	bpl.n	4c1a <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4bf0:	2000      	movs	r0, #0
    4bf2:	4b0f      	ldr	r3, [pc, #60]	; (4c30 <system_clock_source_get_hz+0x88>)
    4bf4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4bf6:	4b0b      	ldr	r3, [pc, #44]	; (4c24 <system_clock_source_get_hz+0x7c>)
    4bf8:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4bfa:	041b      	lsls	r3, r3, #16
    4bfc:	0c1b      	lsrs	r3, r3, #16
    4bfe:	4358      	muls	r0, r3
    4c00:	e00c      	b.n	4c1c <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4c02:	2350      	movs	r3, #80	; 0x50
    4c04:	4a08      	ldr	r2, [pc, #32]	; (4c28 <system_clock_source_get_hz+0x80>)
    4c06:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4c08:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4c0a:	075b      	lsls	r3, r3, #29
    4c0c:	d506      	bpl.n	4c1c <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    4c0e:	4b05      	ldr	r3, [pc, #20]	; (4c24 <system_clock_source_get_hz+0x7c>)
    4c10:	68d8      	ldr	r0, [r3, #12]
    4c12:	e003      	b.n	4c1c <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4c14:	2080      	movs	r0, #128	; 0x80
    4c16:	0200      	lsls	r0, r0, #8
    4c18:	e000      	b.n	4c1c <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4c1a:	4806      	ldr	r0, [pc, #24]	; (4c34 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    4c1c:	bd10      	pop	{r4, pc}
    4c1e:	46c0      	nop			; (mov r8, r8)
    4c20:	00005f68 	.word	0x00005f68
    4c24:	200000b0 	.word	0x200000b0
    4c28:	40000800 	.word	0x40000800
    4c2c:	007a1200 	.word	0x007a1200
    4c30:	00005131 	.word	0x00005131
    4c34:	02dc6c00 	.word	0x02dc6c00

00004c38 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4c38:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4c3a:	4c0c      	ldr	r4, [pc, #48]	; (4c6c <system_clock_source_osc8m_set_config+0x34>)
    4c3c:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4c3e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4c40:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4c42:	7842      	ldrb	r2, [r0, #1]
    4c44:	2001      	movs	r0, #1
    4c46:	4002      	ands	r2, r0
    4c48:	0192      	lsls	r2, r2, #6
    4c4a:	2640      	movs	r6, #64	; 0x40
    4c4c:	43b3      	bics	r3, r6
    4c4e:	4313      	orrs	r3, r2
    4c50:	0002      	movs	r2, r0
    4c52:	402a      	ands	r2, r5
    4c54:	01d2      	lsls	r2, r2, #7
    4c56:	307f      	adds	r0, #127	; 0x7f
    4c58:	4383      	bics	r3, r0
    4c5a:	4313      	orrs	r3, r2
    4c5c:	2203      	movs	r2, #3
    4c5e:	400a      	ands	r2, r1
    4c60:	0212      	lsls	r2, r2, #8
    4c62:	4903      	ldr	r1, [pc, #12]	; (4c70 <system_clock_source_osc8m_set_config+0x38>)
    4c64:	400b      	ands	r3, r1
    4c66:	4313      	orrs	r3, r2
    4c68:	6223      	str	r3, [r4, #32]
}
    4c6a:	bd70      	pop	{r4, r5, r6, pc}
    4c6c:	40000800 	.word	0x40000800
    4c70:	fffffcff 	.word	0xfffffcff

00004c74 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    4c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c76:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    4c78:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    4c7a:	7d03      	ldrb	r3, [r0, #20]
    4c7c:	2b01      	cmp	r3, #1
    4c7e:	d106      	bne.n	4c8e <system_clock_source_dpll_set_config+0x1a>
		refclk = refclk / (2 * (config->reference_divider + 1));
    4c80:	8a01      	ldrh	r1, [r0, #16]
    4c82:	3101      	adds	r1, #1
    4c84:	0049      	lsls	r1, r1, #1
    4c86:	0028      	movs	r0, r5
    4c88:	4b20      	ldr	r3, [pc, #128]	; (4d0c <system_clock_source_dpll_set_config+0x98>)
    4c8a:	4798      	blx	r3
    4c8c:	0005      	movs	r5, r0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    4c8e:	68a3      	ldr	r3, [r4, #8]
    4c90:	0118      	lsls	r0, r3, #4
    4c92:	0029      	movs	r1, r5
    4c94:	4b1d      	ldr	r3, [pc, #116]	; (4d0c <system_clock_source_dpll_set_config+0x98>)
    4c96:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    4c98:	210f      	movs	r1, #15
    4c9a:	4001      	ands	r1, r0
	tmpldr = (tmpldr >> 4) - 1;
    4c9c:	0900      	lsrs	r0, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
    4c9e:	7823      	ldrb	r3, [r4, #0]
    4ca0:	01da      	lsls	r2, r3, #7
    4ca2:	7863      	ldrb	r3, [r4, #1]
    4ca4:	019b      	lsls	r3, r3, #6
    4ca6:	4313      	orrs	r3, r2
    4ca8:	b2db      	uxtb	r3, r3
    4caa:	4e19      	ldr	r6, [pc, #100]	; (4d10 <system_clock_source_dpll_set_config+0x9c>)
    4cac:	2244      	movs	r2, #68	; 0x44
    4cae:	54b3      	strb	r3, [r6, r2]
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    4cb0:	040a      	lsls	r2, r1, #16
    4cb2:	1e43      	subs	r3, r0, #1
    4cb4:	051b      	lsls	r3, r3, #20
    4cb6:	0d1b      	lsrs	r3, r3, #20
    4cb8:	4313      	orrs	r3, r2

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    4cba:	64b3      	str	r3, [r6, #72]	; 0x48
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    4cbc:	78a3      	ldrb	r3, [r4, #2]
    4cbe:	031f      	lsls	r7, r3, #12
    4cc0:	78e3      	ldrb	r3, [r4, #3]
    4cc2:	00db      	lsls	r3, r3, #3
    4cc4:	433b      	orrs	r3, r7
    4cc6:	7922      	ldrb	r2, [r4, #4]
    4cc8:	0092      	lsls	r2, r2, #2
    4cca:	4313      	orrs	r3, r2
    4ccc:	7ca2      	ldrb	r2, [r4, #18]
    4cce:	2703      	movs	r7, #3
    4cd0:	403a      	ands	r2, r7
    4cd2:	4313      	orrs	r3, r2
    4cd4:	001f      	movs	r7, r3
    4cd6:	8a23      	ldrh	r3, [r4, #16]
    4cd8:	041b      	lsls	r3, r3, #16
    4cda:	4a0e      	ldr	r2, [pc, #56]	; (4d14 <system_clock_source_dpll_set_config+0xa0>)
    4cdc:	401a      	ands	r2, r3
    4cde:	003b      	movs	r3, r7
    4ce0:	4313      	orrs	r3, r2
    4ce2:	7ce7      	ldrb	r7, [r4, #19]
    4ce4:	023f      	lsls	r7, r7, #8
    4ce6:	22e0      	movs	r2, #224	; 0xe0
    4ce8:	00d2      	lsls	r2, r2, #3
    4cea:	403a      	ands	r2, r7
    4cec:	4313      	orrs	r3, r2
    4cee:	001f      	movs	r7, r3
    4cf0:	7d22      	ldrb	r2, [r4, #20]
    4cf2:	0112      	lsls	r2, r2, #4
    4cf4:	2330      	movs	r3, #48	; 0x30
    4cf6:	401a      	ands	r2, r3
    4cf8:	003b      	movs	r3, r7
    4cfa:	4313      	orrs	r3, r2

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    4cfc:	64f3      	str	r3, [r6, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    4cfe:	0100      	lsls	r0, r0, #4
    4d00:	1841      	adds	r1, r0, r1
    4d02:	434d      	muls	r5, r1
    4d04:	092d      	lsrs	r5, r5, #4
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
    4d06:	4b04      	ldr	r3, [pc, #16]	; (4d18 <system_clock_source_dpll_set_config+0xa4>)
    4d08:	60dd      	str	r5, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
}
    4d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d0c:	000055d5 	.word	0x000055d5
    4d10:	40000800 	.word	0x40000800
    4d14:	07ff0000 	.word	0x07ff0000
    4d18:	200000b0 	.word	0x200000b0

00004d1c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4d1c:	2808      	cmp	r0, #8
    4d1e:	d803      	bhi.n	4d28 <system_clock_source_enable+0xc>
    4d20:	0080      	lsls	r0, r0, #2
    4d22:	4b25      	ldr	r3, [pc, #148]	; (4db8 <system_clock_source_enable+0x9c>)
    4d24:	581b      	ldr	r3, [r3, r0]
    4d26:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4d28:	2017      	movs	r0, #23
    4d2a:	e044      	b.n	4db6 <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4d2c:	4a23      	ldr	r2, [pc, #140]	; (4dbc <system_clock_source_enable+0xa0>)
    4d2e:	6a11      	ldr	r1, [r2, #32]
    4d30:	2302      	movs	r3, #2
    4d32:	430b      	orrs	r3, r1
    4d34:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    4d36:	2000      	movs	r0, #0
    4d38:	e03d      	b.n	4db6 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4d3a:	4a20      	ldr	r2, [pc, #128]	; (4dbc <system_clock_source_enable+0xa0>)
    4d3c:	6991      	ldr	r1, [r2, #24]
    4d3e:	2302      	movs	r3, #2
    4d40:	430b      	orrs	r3, r1
    4d42:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4d44:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    4d46:	e036      	b.n	4db6 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4d48:	4a1c      	ldr	r2, [pc, #112]	; (4dbc <system_clock_source_enable+0xa0>)
    4d4a:	8a11      	ldrh	r1, [r2, #16]
    4d4c:	2302      	movs	r3, #2
    4d4e:	430b      	orrs	r3, r1
    4d50:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4d52:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    4d54:	e02f      	b.n	4db6 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4d56:	4a19      	ldr	r2, [pc, #100]	; (4dbc <system_clock_source_enable+0xa0>)
    4d58:	8a91      	ldrh	r1, [r2, #20]
    4d5a:	2302      	movs	r3, #2
    4d5c:	430b      	orrs	r3, r1
    4d5e:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4d60:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    4d62:	e028      	b.n	4db6 <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4d64:	4916      	ldr	r1, [pc, #88]	; (4dc0 <system_clock_source_enable+0xa4>)
    4d66:	680b      	ldr	r3, [r1, #0]
    4d68:	2202      	movs	r2, #2
    4d6a:	4313      	orrs	r3, r2
    4d6c:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4d6e:	4b13      	ldr	r3, [pc, #76]	; (4dbc <system_clock_source_enable+0xa0>)
    4d70:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4d72:	0019      	movs	r1, r3
    4d74:	320e      	adds	r2, #14
    4d76:	68cb      	ldr	r3, [r1, #12]
    4d78:	421a      	tst	r2, r3
    4d7a:	d0fc      	beq.n	4d76 <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4d7c:	4a10      	ldr	r2, [pc, #64]	; (4dc0 <system_clock_source_enable+0xa4>)
    4d7e:	6891      	ldr	r1, [r2, #8]
    4d80:	4b0e      	ldr	r3, [pc, #56]	; (4dbc <system_clock_source_enable+0xa0>)
    4d82:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4d84:	6852      	ldr	r2, [r2, #4]
    4d86:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    4d88:	2200      	movs	r2, #0
    4d8a:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4d8c:	0019      	movs	r1, r3
    4d8e:	3210      	adds	r2, #16
    4d90:	68cb      	ldr	r3, [r1, #12]
    4d92:	421a      	tst	r2, r3
    4d94:	d0fc      	beq.n	4d90 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4d96:	4b0a      	ldr	r3, [pc, #40]	; (4dc0 <system_clock_source_enable+0xa4>)
    4d98:	681b      	ldr	r3, [r3, #0]
    4d9a:	b29b      	uxth	r3, r3
    4d9c:	4a07      	ldr	r2, [pc, #28]	; (4dbc <system_clock_source_enable+0xa0>)
    4d9e:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4da0:	2000      	movs	r0, #0
    4da2:	e008      	b.n	4db6 <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4da4:	4905      	ldr	r1, [pc, #20]	; (4dbc <system_clock_source_enable+0xa0>)
    4da6:	2244      	movs	r2, #68	; 0x44
    4da8:	5c88      	ldrb	r0, [r1, r2]
    4daa:	2302      	movs	r3, #2
    4dac:	4303      	orrs	r3, r0
    4dae:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4db0:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    4db2:	e000      	b.n	4db6 <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4db4:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    4db6:	4770      	bx	lr
    4db8:	00005f8c 	.word	0x00005f8c
    4dbc:	40000800 	.word	0x40000800
    4dc0:	200000b0 	.word	0x200000b0

00004dc4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4dc4:	b570      	push	{r4, r5, r6, lr}
    4dc6:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4dc8:	22c2      	movs	r2, #194	; 0xc2
    4dca:	00d2      	lsls	r2, r2, #3
    4dcc:	4b36      	ldr	r3, [pc, #216]	; (4ea8 <system_clock_init+0xe4>)
    4dce:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4dd0:	4936      	ldr	r1, [pc, #216]	; (4eac <system_clock_init+0xe8>)
    4dd2:	684b      	ldr	r3, [r1, #4]
    4dd4:	221e      	movs	r2, #30
    4dd6:	4393      	bics	r3, r2
    4dd8:	3a1c      	subs	r2, #28
    4dda:	4313      	orrs	r3, r2
    4ddc:	604b      	str	r3, [r1, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4dde:	ab01      	add	r3, sp, #4
    4de0:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4de2:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4de4:	4d32      	ldr	r5, [pc, #200]	; (4eb0 <system_clock_init+0xec>)
    4de6:	b2e0      	uxtb	r0, r4
    4de8:	a901      	add	r1, sp, #4
    4dea:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4dec:	3401      	adds	r4, #1
    4dee:	2c25      	cmp	r4, #37	; 0x25
    4df0:	d1f9      	bne.n	4de6 <system_clock_init+0x22>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    4df2:	a80b      	add	r0, sp, #44	; 0x2c
    4df4:	2400      	movs	r4, #0
    4df6:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    4df8:	2501      	movs	r5, #1
    4dfa:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4dfc:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4dfe:	4b2d      	ldr	r3, [pc, #180]	; (4eb4 <system_clock_init+0xf0>)
    4e00:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4e02:	2006      	movs	r0, #6
    4e04:	4e2c      	ldr	r6, [pc, #176]	; (4eb8 <system_clock_init+0xf4>)
    4e06:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4e08:	4b2c      	ldr	r3, [pc, #176]	; (4ebc <system_clock_init+0xf8>)
    4e0a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    4e0c:	a901      	add	r1, sp, #4
    4e0e:	704c      	strb	r4, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4e10:	2306      	movs	r3, #6
    4e12:	700b      	strb	r3, [r1, #0]
#endif
	config->run_in_standby     = false;
    4e14:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    4e16:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4e18:	3302      	adds	r3, #2
    4e1a:	604b      	str	r3, [r1, #4]
    4e1c:	2001      	movs	r0, #1
    4e1e:	4b28      	ldr	r3, [pc, #160]	; (4ec0 <system_clock_init+0xfc>)
    4e20:	4798      	blx	r3
    4e22:	2001      	movs	r0, #1
    4e24:	4b27      	ldr	r3, [pc, #156]	; (4ec4 <system_clock_init+0x100>)
    4e26:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
    4e28:	a90a      	add	r1, sp, #40	; 0x28
    4e2a:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
    4e2c:	2001      	movs	r0, #1
    4e2e:	4b20      	ldr	r3, [pc, #128]	; (4eb0 <system_clock_init+0xec>)
    4e30:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
    4e32:	2001      	movs	r0, #1
    4e34:	4b24      	ldr	r3, [pc, #144]	; (4ec8 <system_clock_init+0x104>)
    4e36:	4798      	blx	r3
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
    4e38:	a804      	add	r0, sp, #16
    4e3a:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    4e3c:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    4e3e:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    4e40:	7104      	strb	r4, [r0, #4]

	config->output_frequency    = 48000000;
    4e42:	4b22      	ldr	r3, [pc, #136]	; (4ecc <system_clock_init+0x108>)
    4e44:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
	config->reference_divider   = 1;
    4e46:	8205      	strh	r5, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    4e48:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    4e4a:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    4e4c:	7004      	strb	r4, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    4e4e:	2302      	movs	r3, #2
    4e50:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    4e52:	4b1f      	ldr	r3, [pc, #124]	; (4ed0 <system_clock_init+0x10c>)
    4e54:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    4e56:	4b1f      	ldr	r3, [pc, #124]	; (4ed4 <system_clock_init+0x110>)
    4e58:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    4e5a:	2008      	movs	r0, #8
    4e5c:	47b0      	blx	r6
		}
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    4e5e:	4812      	ldr	r0, [pc, #72]	; (4ea8 <system_clock_init+0xe4>)
    4e60:	2150      	movs	r1, #80	; 0x50
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    4e62:	2203      	movs	r2, #3
		}
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    4e64:	5c43      	ldrb	r3, [r0, r1]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    4e66:	4013      	ands	r3, r2
    4e68:	2b03      	cmp	r3, #3
    4e6a:	d1fb      	bne.n	4e64 <system_clock_init+0xa0>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    4e6c:	490e      	ldr	r1, [pc, #56]	; (4ea8 <system_clock_init+0xe4>)
    4e6e:	2244      	movs	r2, #68	; 0x44
    4e70:	5c8b      	ldrb	r3, [r1, r2]
    4e72:	2080      	movs	r0, #128	; 0x80
    4e74:	4240      	negs	r0, r0
    4e76:	4303      	orrs	r3, r0
    4e78:	548b      	strb	r3, [r1, r2]
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    4e7a:	4a17      	ldr	r2, [pc, #92]	; (4ed8 <system_clock_init+0x114>)
    4e7c:	2300      	movs	r3, #0
    4e7e:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    4e80:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    4e82:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    4e84:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4e86:	a901      	add	r1, sp, #4
    4e88:	2201      	movs	r2, #1
    4e8a:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    4e8c:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    4e8e:	3205      	adds	r2, #5
    4e90:	700a      	strb	r2, [r1, #0]
#endif
	config->run_in_standby     = false;
    4e92:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    4e94:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4e96:	2000      	movs	r0, #0
    4e98:	4b09      	ldr	r3, [pc, #36]	; (4ec0 <system_clock_init+0xfc>)
    4e9a:	4798      	blx	r3
    4e9c:	2000      	movs	r0, #0
    4e9e:	4b09      	ldr	r3, [pc, #36]	; (4ec4 <system_clock_init+0x100>)
    4ea0:	4798      	blx	r3
#endif
}
    4ea2:	b00c      	add	sp, #48	; 0x30
    4ea4:	bd70      	pop	{r4, r5, r6, pc}
    4ea6:	46c0      	nop			; (mov r8, r8)
    4ea8:	40000800 	.word	0x40000800
    4eac:	41004000 	.word	0x41004000
    4eb0:	00005115 	.word	0x00005115
    4eb4:	00004c39 	.word	0x00004c39
    4eb8:	00004d1d 	.word	0x00004d1d
    4ebc:	00004edd 	.word	0x00004edd
    4ec0:	00004f01 	.word	0x00004f01
    4ec4:	00004fb9 	.word	0x00004fb9
    4ec8:	00005089 	.word	0x00005089
    4ecc:	02dc6c00 	.word	0x02dc6c00
    4ed0:	000f4240 	.word	0x000f4240
    4ed4:	00004c75 	.word	0x00004c75
    4ed8:	40000400 	.word	0x40000400

00004edc <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4edc:	4a06      	ldr	r2, [pc, #24]	; (4ef8 <system_gclk_init+0x1c>)
    4ede:	6991      	ldr	r1, [r2, #24]
    4ee0:	2308      	movs	r3, #8
    4ee2:	430b      	orrs	r3, r1
    4ee4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4ee6:	2201      	movs	r2, #1
    4ee8:	4b04      	ldr	r3, [pc, #16]	; (4efc <system_gclk_init+0x20>)
    4eea:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4eec:	0019      	movs	r1, r3
    4eee:	780b      	ldrb	r3, [r1, #0]
    4ef0:	4213      	tst	r3, r2
    4ef2:	d1fc      	bne.n	4eee <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4ef4:	4770      	bx	lr
    4ef6:	46c0      	nop			; (mov r8, r8)
    4ef8:	40000400 	.word	0x40000400
    4efc:	40000c00 	.word	0x40000c00

00004f00 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4f00:	b570      	push	{r4, r5, r6, lr}
    4f02:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4f04:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4f06:	780c      	ldrb	r4, [r1, #0]
    4f08:	0224      	lsls	r4, r4, #8
    4f0a:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4f0c:	784b      	ldrb	r3, [r1, #1]
    4f0e:	2b00      	cmp	r3, #0
    4f10:	d002      	beq.n	4f18 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4f12:	2380      	movs	r3, #128	; 0x80
    4f14:	02db      	lsls	r3, r3, #11
    4f16:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4f18:	7a4b      	ldrb	r3, [r1, #9]
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d002      	beq.n	4f24 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4f1e:	2380      	movs	r3, #128	; 0x80
    4f20:	031b      	lsls	r3, r3, #12
    4f22:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4f24:	6848      	ldr	r0, [r1, #4]
    4f26:	2801      	cmp	r0, #1
    4f28:	d918      	bls.n	4f5c <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4f2a:	1e43      	subs	r3, r0, #1
    4f2c:	4218      	tst	r0, r3
    4f2e:	d110      	bne.n	4f52 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4f30:	2802      	cmp	r0, #2
    4f32:	d906      	bls.n	4f42 <system_gclk_gen_set_config+0x42>
    4f34:	2302      	movs	r3, #2
    4f36:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4f38:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    4f3a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4f3c:	4298      	cmp	r0, r3
    4f3e:	d8fb      	bhi.n	4f38 <system_gclk_gen_set_config+0x38>
    4f40:	e000      	b.n	4f44 <system_gclk_gen_set_config+0x44>
    4f42:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4f44:	0212      	lsls	r2, r2, #8
    4f46:	4332      	orrs	r2, r6
    4f48:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4f4a:	2380      	movs	r3, #128	; 0x80
    4f4c:	035b      	lsls	r3, r3, #13
    4f4e:	431c      	orrs	r4, r3
    4f50:	e004      	b.n	4f5c <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    4f52:	0205      	lsls	r5, r0, #8
    4f54:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4f56:	2380      	movs	r3, #128	; 0x80
    4f58:	029b      	lsls	r3, r3, #10
    4f5a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4f5c:	7a0b      	ldrb	r3, [r1, #8]
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d002      	beq.n	4f68 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4f62:	2380      	movs	r3, #128	; 0x80
    4f64:	039b      	lsls	r3, r3, #14
    4f66:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4f68:	4a0f      	ldr	r2, [pc, #60]	; (4fa8 <system_gclk_gen_set_config+0xa8>)
    4f6a:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    4f6c:	b25b      	sxtb	r3, r3
    4f6e:	2b00      	cmp	r3, #0
    4f70:	dbfb      	blt.n	4f6a <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4f72:	4b0e      	ldr	r3, [pc, #56]	; (4fac <system_gclk_gen_set_config+0xac>)
    4f74:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4f76:	4b0e      	ldr	r3, [pc, #56]	; (4fb0 <system_gclk_gen_set_config+0xb0>)
    4f78:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4f7a:	4a0b      	ldr	r2, [pc, #44]	; (4fa8 <system_gclk_gen_set_config+0xa8>)
    4f7c:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4f7e:	b25b      	sxtb	r3, r3
    4f80:	2b00      	cmp	r3, #0
    4f82:	dbfb      	blt.n	4f7c <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4f84:	4b08      	ldr	r3, [pc, #32]	; (4fa8 <system_gclk_gen_set_config+0xa8>)
    4f86:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4f88:	001a      	movs	r2, r3
    4f8a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    4f8c:	b25b      	sxtb	r3, r3
    4f8e:	2b00      	cmp	r3, #0
    4f90:	dbfb      	blt.n	4f8a <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4f92:	4a05      	ldr	r2, [pc, #20]	; (4fa8 <system_gclk_gen_set_config+0xa8>)
    4f94:	6851      	ldr	r1, [r2, #4]
    4f96:	2380      	movs	r3, #128	; 0x80
    4f98:	025b      	lsls	r3, r3, #9
    4f9a:	400b      	ands	r3, r1
    4f9c:	431c      	orrs	r4, r3
    4f9e:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4fa0:	4b04      	ldr	r3, [pc, #16]	; (4fb4 <system_gclk_gen_set_config+0xb4>)
    4fa2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4fa4:	bd70      	pop	{r4, r5, r6, pc}
    4fa6:	46c0      	nop			; (mov r8, r8)
    4fa8:	40000c00 	.word	0x40000c00
    4fac:	00004159 	.word	0x00004159
    4fb0:	40000c08 	.word	0x40000c08
    4fb4:	00004199 	.word	0x00004199

00004fb8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4fb8:	b510      	push	{r4, lr}
    4fba:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4fbc:	4a0b      	ldr	r2, [pc, #44]	; (4fec <system_gclk_gen_enable+0x34>)
    4fbe:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    4fc0:	b25b      	sxtb	r3, r3
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	dbfb      	blt.n	4fbe <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    4fc6:	4b0a      	ldr	r3, [pc, #40]	; (4ff0 <system_gclk_gen_enable+0x38>)
    4fc8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4fca:	4b0a      	ldr	r3, [pc, #40]	; (4ff4 <system_gclk_gen_enable+0x3c>)
    4fcc:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4fce:	4a07      	ldr	r2, [pc, #28]	; (4fec <system_gclk_gen_enable+0x34>)
    4fd0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    4fd2:	b25b      	sxtb	r3, r3
    4fd4:	2b00      	cmp	r3, #0
    4fd6:	dbfb      	blt.n	4fd0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4fd8:	4a04      	ldr	r2, [pc, #16]	; (4fec <system_gclk_gen_enable+0x34>)
    4fda:	6853      	ldr	r3, [r2, #4]
    4fdc:	2180      	movs	r1, #128	; 0x80
    4fde:	0249      	lsls	r1, r1, #9
    4fe0:	430b      	orrs	r3, r1
    4fe2:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    4fe4:	4b04      	ldr	r3, [pc, #16]	; (4ff8 <system_gclk_gen_enable+0x40>)
    4fe6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4fe8:	bd10      	pop	{r4, pc}
    4fea:	46c0      	nop			; (mov r8, r8)
    4fec:	40000c00 	.word	0x40000c00
    4ff0:	00004159 	.word	0x00004159
    4ff4:	40000c04 	.word	0x40000c04
    4ff8:	00004199 	.word	0x00004199

00004ffc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4ffc:	b570      	push	{r4, r5, r6, lr}
    4ffe:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5000:	4a1a      	ldr	r2, [pc, #104]	; (506c <system_gclk_gen_get_hz+0x70>)
    5002:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    5004:	b25b      	sxtb	r3, r3
    5006:	2b00      	cmp	r3, #0
    5008:	dbfb      	blt.n	5002 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    500a:	4b19      	ldr	r3, [pc, #100]	; (5070 <system_gclk_gen_get_hz+0x74>)
    500c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    500e:	4b19      	ldr	r3, [pc, #100]	; (5074 <system_gclk_gen_get_hz+0x78>)
    5010:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5012:	4a16      	ldr	r2, [pc, #88]	; (506c <system_gclk_gen_get_hz+0x70>)
    5014:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    5016:	b25b      	sxtb	r3, r3
    5018:	2b00      	cmp	r3, #0
    501a:	dbfb      	blt.n	5014 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    501c:	4e13      	ldr	r6, [pc, #76]	; (506c <system_gclk_gen_get_hz+0x70>)
    501e:	6870      	ldr	r0, [r6, #4]
    5020:	04c0      	lsls	r0, r0, #19
    5022:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5024:	4b14      	ldr	r3, [pc, #80]	; (5078 <system_gclk_gen_get_hz+0x7c>)
    5026:	4798      	blx	r3
    5028:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    502a:	4b12      	ldr	r3, [pc, #72]	; (5074 <system_gclk_gen_get_hz+0x78>)
    502c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    502e:	6876      	ldr	r6, [r6, #4]
    5030:	02f6      	lsls	r6, r6, #11
    5032:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5034:	4b11      	ldr	r3, [pc, #68]	; (507c <system_gclk_gen_get_hz+0x80>)
    5036:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5038:	4a0c      	ldr	r2, [pc, #48]	; (506c <system_gclk_gen_get_hz+0x70>)
    503a:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    503c:	b25b      	sxtb	r3, r3
    503e:	2b00      	cmp	r3, #0
    5040:	dbfb      	blt.n	503a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5042:	4b0a      	ldr	r3, [pc, #40]	; (506c <system_gclk_gen_get_hz+0x70>)
    5044:	689c      	ldr	r4, [r3, #8]
    5046:	0224      	lsls	r4, r4, #8
    5048:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    504a:	4b0d      	ldr	r3, [pc, #52]	; (5080 <system_gclk_gen_get_hz+0x84>)
    504c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    504e:	2e00      	cmp	r6, #0
    5050:	d107      	bne.n	5062 <system_gclk_gen_get_hz+0x66>
    5052:	2c01      	cmp	r4, #1
    5054:	d907      	bls.n	5066 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    5056:	0021      	movs	r1, r4
    5058:	0028      	movs	r0, r5
    505a:	4b0a      	ldr	r3, [pc, #40]	; (5084 <system_gclk_gen_get_hz+0x88>)
    505c:	4798      	blx	r3
    505e:	0005      	movs	r5, r0
    5060:	e001      	b.n	5066 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    5062:	3401      	adds	r4, #1
    5064:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    5066:	0028      	movs	r0, r5
    5068:	bd70      	pop	{r4, r5, r6, pc}
    506a:	46c0      	nop			; (mov r8, r8)
    506c:	40000c00 	.word	0x40000c00
    5070:	00004159 	.word	0x00004159
    5074:	40000c04 	.word	0x40000c04
    5078:	00004ba9 	.word	0x00004ba9
    507c:	40000c08 	.word	0x40000c08
    5080:	00004199 	.word	0x00004199
    5084:	000055d5 	.word	0x000055d5

00005088 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5088:	b510      	push	{r4, lr}
    508a:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    508c:	4b06      	ldr	r3, [pc, #24]	; (50a8 <system_gclk_chan_enable+0x20>)
    508e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5090:	4b06      	ldr	r3, [pc, #24]	; (50ac <system_gclk_chan_enable+0x24>)
    5092:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5094:	4a06      	ldr	r2, [pc, #24]	; (50b0 <system_gclk_chan_enable+0x28>)
    5096:	8851      	ldrh	r1, [r2, #2]
    5098:	2380      	movs	r3, #128	; 0x80
    509a:	01db      	lsls	r3, r3, #7
    509c:	430b      	orrs	r3, r1
    509e:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    50a0:	4b04      	ldr	r3, [pc, #16]	; (50b4 <system_gclk_chan_enable+0x2c>)
    50a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    50a4:	bd10      	pop	{r4, pc}
    50a6:	46c0      	nop			; (mov r8, r8)
    50a8:	00004159 	.word	0x00004159
    50ac:	40000c02 	.word	0x40000c02
    50b0:	40000c00 	.word	0x40000c00
    50b4:	00004199 	.word	0x00004199

000050b8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    50b8:	b510      	push	{r4, lr}
    50ba:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    50bc:	4b0f      	ldr	r3, [pc, #60]	; (50fc <system_gclk_chan_disable+0x44>)
    50be:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    50c0:	4b0f      	ldr	r3, [pc, #60]	; (5100 <system_gclk_chan_disable+0x48>)
    50c2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    50c4:	4b0f      	ldr	r3, [pc, #60]	; (5104 <system_gclk_chan_disable+0x4c>)
    50c6:	885a      	ldrh	r2, [r3, #2]
    50c8:	0512      	lsls	r2, r2, #20
    50ca:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    50cc:	8859      	ldrh	r1, [r3, #2]
    50ce:	4a0e      	ldr	r2, [pc, #56]	; (5108 <system_gclk_chan_disable+0x50>)
    50d0:	400a      	ands	r2, r1
    50d2:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    50d4:	8859      	ldrh	r1, [r3, #2]
    50d6:	4a0d      	ldr	r2, [pc, #52]	; (510c <system_gclk_chan_disable+0x54>)
    50d8:	400a      	ands	r2, r1
    50da:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    50dc:	0019      	movs	r1, r3
    50de:	2280      	movs	r2, #128	; 0x80
    50e0:	01d2      	lsls	r2, r2, #7
    50e2:	884b      	ldrh	r3, [r1, #2]
    50e4:	4213      	tst	r3, r2
    50e6:	d1fc      	bne.n	50e2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    50e8:	4906      	ldr	r1, [pc, #24]	; (5104 <system_gclk_chan_disable+0x4c>)
    50ea:	884c      	ldrh	r4, [r1, #2]
    50ec:	0202      	lsls	r2, r0, #8
    50ee:	4b06      	ldr	r3, [pc, #24]	; (5108 <system_gclk_chan_disable+0x50>)
    50f0:	4023      	ands	r3, r4
    50f2:	4313      	orrs	r3, r2
    50f4:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    50f6:	4b06      	ldr	r3, [pc, #24]	; (5110 <system_gclk_chan_disable+0x58>)
    50f8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    50fa:	bd10      	pop	{r4, pc}
    50fc:	00004159 	.word	0x00004159
    5100:	40000c02 	.word	0x40000c02
    5104:	40000c00 	.word	0x40000c00
    5108:	fffff0ff 	.word	0xfffff0ff
    510c:	ffffbfff 	.word	0xffffbfff
    5110:	00004199 	.word	0x00004199

00005114 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    5114:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5116:	780c      	ldrb	r4, [r1, #0]
    5118:	0224      	lsls	r4, r4, #8
    511a:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    511c:	4b02      	ldr	r3, [pc, #8]	; (5128 <system_gclk_chan_set_config+0x14>)
    511e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5120:	b2a4      	uxth	r4, r4
    5122:	4b02      	ldr	r3, [pc, #8]	; (512c <system_gclk_chan_set_config+0x18>)
    5124:	805c      	strh	r4, [r3, #2]
}
    5126:	bd10      	pop	{r4, pc}
    5128:	000050b9 	.word	0x000050b9
    512c:	40000c00 	.word	0x40000c00

00005130 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5130:	b510      	push	{r4, lr}
    5132:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    5134:	4b06      	ldr	r3, [pc, #24]	; (5150 <system_gclk_chan_get_hz+0x20>)
    5136:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5138:	4b06      	ldr	r3, [pc, #24]	; (5154 <system_gclk_chan_get_hz+0x24>)
    513a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    513c:	4b06      	ldr	r3, [pc, #24]	; (5158 <system_gclk_chan_get_hz+0x28>)
    513e:	885c      	ldrh	r4, [r3, #2]
    5140:	0524      	lsls	r4, r4, #20
    5142:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    5144:	4b05      	ldr	r3, [pc, #20]	; (515c <system_gclk_chan_get_hz+0x2c>)
    5146:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5148:	0020      	movs	r0, r4
    514a:	4b05      	ldr	r3, [pc, #20]	; (5160 <system_gclk_chan_get_hz+0x30>)
    514c:	4798      	blx	r3
}
    514e:	bd10      	pop	{r4, pc}
    5150:	00004159 	.word	0x00004159
    5154:	40000c02 	.word	0x40000c02
    5158:	40000c00 	.word	0x40000c00
    515c:	00004199 	.word	0x00004199
    5160:	00004ffd 	.word	0x00004ffd

00005164 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5164:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5166:	78d3      	ldrb	r3, [r2, #3]
    5168:	2b00      	cmp	r3, #0
    516a:	d11e      	bne.n	51aa <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    516c:	7813      	ldrb	r3, [r2, #0]
    516e:	2b80      	cmp	r3, #128	; 0x80
    5170:	d004      	beq.n	517c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5172:	061b      	lsls	r3, r3, #24
    5174:	2480      	movs	r4, #128	; 0x80
    5176:	0264      	lsls	r4, r4, #9
    5178:	4323      	orrs	r3, r4
    517a:	e000      	b.n	517e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    517c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    517e:	7854      	ldrb	r4, [r2, #1]
    5180:	2502      	movs	r5, #2
    5182:	43ac      	bics	r4, r5
    5184:	d10a      	bne.n	519c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5186:	7894      	ldrb	r4, [r2, #2]
    5188:	2c00      	cmp	r4, #0
    518a:	d103      	bne.n	5194 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    518c:	2480      	movs	r4, #128	; 0x80
    518e:	02a4      	lsls	r4, r4, #10
    5190:	4323      	orrs	r3, r4
    5192:	e002      	b.n	519a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5194:	24c0      	movs	r4, #192	; 0xc0
    5196:	02e4      	lsls	r4, r4, #11
    5198:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    519a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    519c:	7854      	ldrb	r4, [r2, #1]
    519e:	3c01      	subs	r4, #1
    51a0:	2c01      	cmp	r4, #1
    51a2:	d812      	bhi.n	51ca <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    51a4:	4c18      	ldr	r4, [pc, #96]	; (5208 <_system_pinmux_config+0xa4>)
    51a6:	4023      	ands	r3, r4
    51a8:	e00f      	b.n	51ca <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    51aa:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    51ac:	040b      	lsls	r3, r1, #16
    51ae:	0c1b      	lsrs	r3, r3, #16
    51b0:	24a0      	movs	r4, #160	; 0xa0
    51b2:	05e4      	lsls	r4, r4, #23
    51b4:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    51b6:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    51b8:	0c0b      	lsrs	r3, r1, #16
    51ba:	24d0      	movs	r4, #208	; 0xd0
    51bc:	0624      	lsls	r4, r4, #24
    51be:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    51c0:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    51c2:	78d3      	ldrb	r3, [r2, #3]
    51c4:	2b00      	cmp	r3, #0
    51c6:	d018      	beq.n	51fa <_system_pinmux_config+0x96>
    51c8:	e01c      	b.n	5204 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    51ca:	040c      	lsls	r4, r1, #16
    51cc:	0c24      	lsrs	r4, r4, #16
    51ce:	25a0      	movs	r5, #160	; 0xa0
    51d0:	05ed      	lsls	r5, r5, #23
    51d2:	432c      	orrs	r4, r5
    51d4:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    51d6:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    51d8:	0c0c      	lsrs	r4, r1, #16
    51da:	25d0      	movs	r5, #208	; 0xd0
    51dc:	062d      	lsls	r5, r5, #24
    51de:	432c      	orrs	r4, r5
    51e0:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    51e2:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    51e4:	78d4      	ldrb	r4, [r2, #3]
    51e6:	2c00      	cmp	r4, #0
    51e8:	d10c      	bne.n	5204 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    51ea:	035b      	lsls	r3, r3, #13
    51ec:	d505      	bpl.n	51fa <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    51ee:	7893      	ldrb	r3, [r2, #2]
    51f0:	2b01      	cmp	r3, #1
    51f2:	d101      	bne.n	51f8 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    51f4:	6181      	str	r1, [r0, #24]
    51f6:	e000      	b.n	51fa <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    51f8:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    51fa:	7853      	ldrb	r3, [r2, #1]
    51fc:	3b01      	subs	r3, #1
    51fe:	2b01      	cmp	r3, #1
    5200:	d800      	bhi.n	5204 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    5202:	6081      	str	r1, [r0, #8]
		}
	}
}
    5204:	bd30      	pop	{r4, r5, pc}
    5206:	46c0      	nop			; (mov r8, r8)
    5208:	fffbffff 	.word	0xfffbffff

0000520c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    520c:	b510      	push	{r4, lr}
    520e:	0003      	movs	r3, r0
    5210:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5212:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    5214:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    5216:	2900      	cmp	r1, #0
    5218:	d104      	bne.n	5224 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    521a:	0958      	lsrs	r0, r3, #5
    521c:	01c0      	lsls	r0, r0, #7
    521e:	4905      	ldr	r1, [pc, #20]	; (5234 <system_pinmux_pin_set_config+0x28>)
    5220:	468c      	mov	ip, r1
    5222:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    5224:	211f      	movs	r1, #31
    5226:	400b      	ands	r3, r1
    5228:	391e      	subs	r1, #30
    522a:	4099      	lsls	r1, r3
    522c:	4b02      	ldr	r3, [pc, #8]	; (5238 <system_pinmux_pin_set_config+0x2c>)
    522e:	4798      	blx	r3
}
    5230:	bd10      	pop	{r4, pc}
    5232:	46c0      	nop			; (mov r8, r8)
    5234:	41004400 	.word	0x41004400
    5238:	00005165 	.word	0x00005165

0000523c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    523c:	4770      	bx	lr
    523e:	46c0      	nop			; (mov r8, r8)

00005240 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5240:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5242:	4b05      	ldr	r3, [pc, #20]	; (5258 <system_init+0x18>)
    5244:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5246:	4b05      	ldr	r3, [pc, #20]	; (525c <system_init+0x1c>)
    5248:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    524a:	4b05      	ldr	r3, [pc, #20]	; (5260 <system_init+0x20>)
    524c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    524e:	4b05      	ldr	r3, [pc, #20]	; (5264 <system_init+0x24>)
    5250:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5252:	4b05      	ldr	r3, [pc, #20]	; (5268 <system_init+0x28>)
    5254:	4798      	blx	r3
}
    5256:	bd10      	pop	{r4, pc}
    5258:	00004dc5 	.word	0x00004dc5
    525c:	00004115 	.word	0x00004115
    5260:	0000523d 	.word	0x0000523d
    5264:	0000523d 	.word	0x0000523d
    5268:	0000523d 	.word	0x0000523d

0000526c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    526c:	e7fe      	b.n	526c <Dummy_Handler>
    526e:	46c0      	nop			; (mov r8, r8)

00005270 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    5270:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    5272:	4b2e      	ldr	r3, [pc, #184]	; (532c <Reset_Handler+0xbc>)
    5274:	4a2e      	ldr	r2, [pc, #184]	; (5330 <Reset_Handler+0xc0>)
    5276:	429a      	cmp	r2, r3
    5278:	d003      	beq.n	5282 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    527a:	4b2e      	ldr	r3, [pc, #184]	; (5334 <Reset_Handler+0xc4>)
    527c:	4a2b      	ldr	r2, [pc, #172]	; (532c <Reset_Handler+0xbc>)
    527e:	429a      	cmp	r2, r3
    5280:	d304      	bcc.n	528c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5282:	4b2d      	ldr	r3, [pc, #180]	; (5338 <Reset_Handler+0xc8>)
    5284:	4a2d      	ldr	r2, [pc, #180]	; (533c <Reset_Handler+0xcc>)
    5286:	429a      	cmp	r2, r3
    5288:	d310      	bcc.n	52ac <Reset_Handler+0x3c>
    528a:	e01e      	b.n	52ca <Reset_Handler+0x5a>
    528c:	4a2c      	ldr	r2, [pc, #176]	; (5340 <Reset_Handler+0xd0>)
    528e:	4b29      	ldr	r3, [pc, #164]	; (5334 <Reset_Handler+0xc4>)
    5290:	3303      	adds	r3, #3
    5292:	1a9b      	subs	r3, r3, r2
    5294:	089b      	lsrs	r3, r3, #2
    5296:	3301      	adds	r3, #1
    5298:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    529a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    529c:	4823      	ldr	r0, [pc, #140]	; (532c <Reset_Handler+0xbc>)
    529e:	4924      	ldr	r1, [pc, #144]	; (5330 <Reset_Handler+0xc0>)
    52a0:	588c      	ldr	r4, [r1, r2]
    52a2:	5084      	str	r4, [r0, r2]
    52a4:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    52a6:	429a      	cmp	r2, r3
    52a8:	d1fa      	bne.n	52a0 <Reset_Handler+0x30>
    52aa:	e7ea      	b.n	5282 <Reset_Handler+0x12>
    52ac:	4a25      	ldr	r2, [pc, #148]	; (5344 <Reset_Handler+0xd4>)
    52ae:	4b22      	ldr	r3, [pc, #136]	; (5338 <Reset_Handler+0xc8>)
    52b0:	3303      	adds	r3, #3
    52b2:	1a9b      	subs	r3, r3, r2
    52b4:	089b      	lsrs	r3, r3, #2
    52b6:	3301      	adds	r3, #1
    52b8:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    52ba:	2200      	movs	r2, #0
                *pDest++ = 0;
    52bc:	481f      	ldr	r0, [pc, #124]	; (533c <Reset_Handler+0xcc>)
    52be:	2100      	movs	r1, #0
    52c0:	1814      	adds	r4, r2, r0
    52c2:	6021      	str	r1, [r4, #0]
    52c4:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    52c6:	429a      	cmp	r2, r3
    52c8:	d1fa      	bne.n	52c0 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    52ca:	4a1f      	ldr	r2, [pc, #124]	; (5348 <Reset_Handler+0xd8>)
    52cc:	21ff      	movs	r1, #255	; 0xff
    52ce:	4b1f      	ldr	r3, [pc, #124]	; (534c <Reset_Handler+0xdc>)
    52d0:	438b      	bics	r3, r1
    52d2:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    52d4:	39fd      	subs	r1, #253	; 0xfd
    52d6:	2390      	movs	r3, #144	; 0x90
    52d8:	005b      	lsls	r3, r3, #1
    52da:	4a1d      	ldr	r2, [pc, #116]	; (5350 <Reset_Handler+0xe0>)
    52dc:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    52de:	481d      	ldr	r0, [pc, #116]	; (5354 <Reset_Handler+0xe4>)
    52e0:	78c3      	ldrb	r3, [r0, #3]
    52e2:	2403      	movs	r4, #3
    52e4:	43a3      	bics	r3, r4
    52e6:	2202      	movs	r2, #2
    52e8:	4313      	orrs	r3, r2
    52ea:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    52ec:	78c3      	ldrb	r3, [r0, #3]
    52ee:	260c      	movs	r6, #12
    52f0:	43b3      	bics	r3, r6
    52f2:	2108      	movs	r1, #8
    52f4:	430b      	orrs	r3, r1
    52f6:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    52f8:	4b17      	ldr	r3, [pc, #92]	; (5358 <Reset_Handler+0xe8>)
    52fa:	7b98      	ldrb	r0, [r3, #14]
    52fc:	2530      	movs	r5, #48	; 0x30
    52fe:	43a8      	bics	r0, r5
    5300:	0005      	movs	r5, r0
    5302:	2020      	movs	r0, #32
    5304:	4328      	orrs	r0, r5
    5306:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5308:	7b98      	ldrb	r0, [r3, #14]
    530a:	43b0      	bics	r0, r6
    530c:	4301      	orrs	r1, r0
    530e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5310:	7b99      	ldrb	r1, [r3, #14]
    5312:	43a1      	bics	r1, r4
    5314:	430a      	orrs	r2, r1
    5316:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5318:	4a10      	ldr	r2, [pc, #64]	; (535c <Reset_Handler+0xec>)
    531a:	6851      	ldr	r1, [r2, #4]
    531c:	2380      	movs	r3, #128	; 0x80
    531e:	430b      	orrs	r3, r1
    5320:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    5322:	4b0f      	ldr	r3, [pc, #60]	; (5360 <Reset_Handler+0xf0>)
    5324:	4798      	blx	r3

        /* Branch to main function */
        main();
    5326:	4b0f      	ldr	r3, [pc, #60]	; (5364 <Reset_Handler+0xf4>)
    5328:	4798      	blx	r3
    532a:	e7fe      	b.n	532a <Reset_Handler+0xba>
    532c:	20000000 	.word	0x20000000
    5330:	00006038 	.word	0x00006038
    5334:	20000070 	.word	0x20000070
    5338:	20000130 	.word	0x20000130
    533c:	20000070 	.word	0x20000070
    5340:	20000004 	.word	0x20000004
    5344:	20000074 	.word	0x20000074
    5348:	e000ed00 	.word	0xe000ed00
    534c:	00004000 	.word	0x00004000
    5350:	41007000 	.word	0x41007000
    5354:	41005000 	.word	0x41005000
    5358:	41004800 	.word	0x41004800
    535c:	41004000 	.word	0x41004000
    5360:	00005745 	.word	0x00005745
    5364:	000054a1 	.word	0x000054a1

00005368 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    5368:	b5f0      	push	{r4, r5, r6, r7, lr}
    536a:	4647      	mov	r7, r8
    536c:	b480      	push	{r7}
    536e:	000c      	movs	r4, r1
    5370:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    5372:	2800      	cmp	r0, #0
    5374:	d10d      	bne.n	5392 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    5376:	2a00      	cmp	r2, #0
    5378:	dd0e      	ble.n	5398 <_read+0x30>
    537a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    537c:	4e08      	ldr	r6, [pc, #32]	; (53a0 <_read+0x38>)
    537e:	4d09      	ldr	r5, [pc, #36]	; (53a4 <_read+0x3c>)
    5380:	6830      	ldr	r0, [r6, #0]
    5382:	0021      	movs	r1, r4
    5384:	682b      	ldr	r3, [r5, #0]
    5386:	4798      	blx	r3
		ptr++;
    5388:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    538a:	42a7      	cmp	r7, r4
    538c:	d1f8      	bne.n	5380 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    538e:	4640      	mov	r0, r8
    5390:	e003      	b.n	539a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    5392:	2001      	movs	r0, #1
    5394:	4240      	negs	r0, r0
    5396:	e000      	b.n	539a <_read+0x32>
	}

	for (; len > 0; --len) {
    5398:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    539a:	bc04      	pop	{r2}
    539c:	4690      	mov	r8, r2
    539e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53a0:	20000128 	.word	0x20000128
    53a4:	20000120 	.word	0x20000120

000053a8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    53a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53aa:	4647      	mov	r7, r8
    53ac:	b480      	push	{r7}
    53ae:	000e      	movs	r6, r1
    53b0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    53b2:	3801      	subs	r0, #1
    53b4:	2802      	cmp	r0, #2
    53b6:	d811      	bhi.n	53dc <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    53b8:	2a00      	cmp	r2, #0
    53ba:	d012      	beq.n	53e2 <_write+0x3a>
    53bc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    53be:	4b0c      	ldr	r3, [pc, #48]	; (53f0 <_write+0x48>)
    53c0:	4698      	mov	r8, r3
    53c2:	4f0c      	ldr	r7, [pc, #48]	; (53f4 <_write+0x4c>)
    53c4:	4643      	mov	r3, r8
    53c6:	6818      	ldr	r0, [r3, #0]
    53c8:	5d31      	ldrb	r1, [r6, r4]
    53ca:	683b      	ldr	r3, [r7, #0]
    53cc:	4798      	blx	r3
    53ce:	2800      	cmp	r0, #0
    53d0:	db09      	blt.n	53e6 <_write+0x3e>
			return -1;
		}
		++nChars;
    53d2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    53d4:	42a5      	cmp	r5, r4
    53d6:	d1f5      	bne.n	53c4 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    53d8:	0020      	movs	r0, r4
    53da:	e006      	b.n	53ea <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    53dc:	2001      	movs	r0, #1
    53de:	4240      	negs	r0, r0
    53e0:	e003      	b.n	53ea <_write+0x42>
	}

	for (; len != 0; --len) {
    53e2:	2000      	movs	r0, #0
    53e4:	e001      	b.n	53ea <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    53e6:	2001      	movs	r0, #1
    53e8:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    53ea:	bc04      	pop	{r2}
    53ec:	4690      	mov	r8, r2
    53ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53f0:	20000128 	.word	0x20000128
    53f4:	20000124 	.word	0x20000124

000053f8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    53f8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    53fa:	4a06      	ldr	r2, [pc, #24]	; (5414 <_sbrk+0x1c>)
    53fc:	6812      	ldr	r2, [r2, #0]
    53fe:	2a00      	cmp	r2, #0
    5400:	d102      	bne.n	5408 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    5402:	4905      	ldr	r1, [pc, #20]	; (5418 <_sbrk+0x20>)
    5404:	4a03      	ldr	r2, [pc, #12]	; (5414 <_sbrk+0x1c>)
    5406:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    5408:	4a02      	ldr	r2, [pc, #8]	; (5414 <_sbrk+0x1c>)
    540a:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    540c:	18c3      	adds	r3, r0, r3
    540e:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    5410:	4770      	bx	lr
    5412:	46c0      	nop			; (mov r8, r8)
    5414:	200000c8 	.word	0x200000c8
    5418:	20002130 	.word	0x20002130

0000541c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    541c:	2001      	movs	r0, #1
    541e:	4240      	negs	r0, r0
    5420:	4770      	bx	lr
    5422:	46c0      	nop			; (mov r8, r8)

00005424 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    5424:	2380      	movs	r3, #128	; 0x80
    5426:	019b      	lsls	r3, r3, #6
    5428:	604b      	str	r3, [r1, #4]

	return 0;
}
    542a:	2000      	movs	r0, #0
    542c:	4770      	bx	lr
    542e:	46c0      	nop			; (mov r8, r8)

00005430 <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5430:	2000      	movs	r0, #0
    5432:	4770      	bx	lr

00005434 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5434:	b570      	push	{r4, r5, r6, lr}
    5436:	b082      	sub	sp, #8
    5438:	0005      	movs	r5, r0
    543a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    543c:	2200      	movs	r2, #0
    543e:	466b      	mov	r3, sp
    5440:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5442:	4c06      	ldr	r4, [pc, #24]	; (545c <usart_serial_getchar+0x28>)
    5444:	466b      	mov	r3, sp
    5446:	1d99      	adds	r1, r3, #6
    5448:	0028      	movs	r0, r5
    544a:	47a0      	blx	r4
    544c:	2800      	cmp	r0, #0
    544e:	d1f9      	bne.n	5444 <usart_serial_getchar+0x10>

	*c = temp;
    5450:	466b      	mov	r3, sp
    5452:	3306      	adds	r3, #6
    5454:	881b      	ldrh	r3, [r3, #0]
    5456:	7033      	strb	r3, [r6, #0]
}
    5458:	b002      	add	sp, #8
    545a:	bd70      	pop	{r4, r5, r6, pc}
    545c:	000049ad 	.word	0x000049ad

00005460 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    5460:	b570      	push	{r4, r5, r6, lr}
    5462:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    5464:	b28c      	uxth	r4, r1
    5466:	4e03      	ldr	r6, [pc, #12]	; (5474 <usart_serial_putchar+0x14>)
    5468:	0021      	movs	r1, r4
    546a:	0028      	movs	r0, r5
    546c:	47b0      	blx	r6
    546e:	2800      	cmp	r0, #0
    5470:	d1fa      	bne.n	5468 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    5472:	bd70      	pop	{r4, r5, r6, pc}
    5474:	00004981 	.word	0x00004981

00005478 <configure_port_pins>:
	//write status bits to NVMEM

}

void configure_port_pins(void)
{
    5478:	b570      	push	{r4, r5, r6, lr}
    547a:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    547c:	ac01      	add	r4, sp, #4
    547e:	2301      	movs	r3, #1
    5480:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    5482:	2600      	movs	r6, #0
    5484:	70a6      	strb	r6, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    5486:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    5488:	0021      	movs	r1, r4
    548a:	2017      	movs	r0, #23
    548c:	4d03      	ldr	r5, [pc, #12]	; (549c <configure_port_pins+0x24>)
    548e:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    5490:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(B1, &config_port_pin);
    5492:	0021      	movs	r1, r4
    5494:	2037      	movs	r0, #55	; 0x37
    5496:	47a8      	blx	r5
}
    5498:	b002      	add	sp, #8
    549a:	bd70      	pop	{r4, r5, r6, pc}
    549c:	000041c9 	.word	0x000041c9

000054a0 <main>:

int main (void)
{
    54a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    54a2:	b091      	sub	sp, #68	; 0x44
	system_init();
    54a4:	4b38      	ldr	r3, [pc, #224]	; (5588 <main+0xe8>)
    54a6:	4798      	blx	r3
	configure_port_pins();
    54a8:	4b38      	ldr	r3, [pc, #224]	; (558c <main+0xec>)
    54aa:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    54ac:	2401      	movs	r4, #1
    54ae:	4b38      	ldr	r3, [pc, #224]	; (5590 <main+0xf0>)
    54b0:	701c      	strb	r4, [r3, #0]
    54b2:	f3bf 8f5f 	dmb	sy
    54b6:	b662      	cpsie	i
	system_interrupt_enable_global();
	delay_init();
    54b8:	4b36      	ldr	r3, [pc, #216]	; (5594 <main+0xf4>)
    54ba:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    54bc:	2380      	movs	r3, #128	; 0x80
    54be:	05db      	lsls	r3, r3, #23
    54c0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    54c2:	2300      	movs	r3, #0
    54c4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    54c6:	22ff      	movs	r2, #255	; 0xff
    54c8:	4669      	mov	r1, sp
    54ca:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    54cc:	2200      	movs	r2, #0
    54ce:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    54d0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    54d2:	2124      	movs	r1, #36	; 0x24
    54d4:	4668      	mov	r0, sp
    54d6:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    54d8:	3101      	adds	r1, #1
    54da:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    54dc:	3101      	adds	r1, #1
    54de:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    54e0:	3101      	adds	r1, #1
    54e2:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    54e4:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    54e6:	3105      	adds	r1, #5
    54e8:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    54ea:	3101      	adds	r1, #1
    54ec:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    54ee:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    54f0:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    54f2:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    54f4:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    54f6:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    54f8:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    54fa:	2313      	movs	r3, #19
    54fc:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    54fe:	7742      	strb	r2, [r0, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    5500:	23c4      	movs	r3, #196	; 0xc4
    5502:	039b      	lsls	r3, r3, #14
    5504:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    5506:	2301      	movs	r3, #1
    5508:	425b      	negs	r3, r3
    550a:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    550c:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    550e:	4b22      	ldr	r3, [pc, #136]	; (5598 <main+0xf8>)
    5510:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    5512:	4b22      	ldr	r3, [pc, #136]	; (559c <main+0xfc>)
    5514:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    5516:	23e1      	movs	r3, #225	; 0xe1
    5518:	025b      	lsls	r3, r3, #9
    551a:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    551c:	4d20      	ldr	r5, [pc, #128]	; (55a0 <main+0x100>)
    551e:	4b21      	ldr	r3, [pc, #132]	; (55a4 <main+0x104>)
    5520:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    5522:	4a21      	ldr	r2, [pc, #132]	; (55a8 <main+0x108>)
    5524:	4b21      	ldr	r3, [pc, #132]	; (55ac <main+0x10c>)
    5526:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5528:	4a21      	ldr	r2, [pc, #132]	; (55b0 <main+0x110>)
    552a:	4b22      	ldr	r3, [pc, #136]	; (55b4 <main+0x114>)
    552c:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    552e:	466a      	mov	r2, sp
    5530:	4921      	ldr	r1, [pc, #132]	; (55b8 <main+0x118>)
    5532:	0028      	movs	r0, r5
    5534:	4b21      	ldr	r3, [pc, #132]	; (55bc <main+0x11c>)
    5536:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    5538:	4f21      	ldr	r7, [pc, #132]	; (55c0 <main+0x120>)
    553a:	683b      	ldr	r3, [r7, #0]
    553c:	6898      	ldr	r0, [r3, #8]
    553e:	2100      	movs	r1, #0
    5540:	4e20      	ldr	r6, [pc, #128]	; (55c4 <main+0x124>)
    5542:	47b0      	blx	r6
	setbuf(stdin, NULL);
    5544:	683b      	ldr	r3, [r7, #0]
    5546:	6858      	ldr	r0, [r3, #4]
    5548:	2100      	movs	r1, #0
    554a:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    554c:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    554e:	0030      	movs	r0, r6
    5550:	4b1d      	ldr	r3, [pc, #116]	; (55c8 <main+0x128>)
    5552:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5554:	231f      	movs	r3, #31
    5556:	4018      	ands	r0, r3
    5558:	4084      	lsls	r4, r0
    555a:	4b1c      	ldr	r3, [pc, #112]	; (55cc <main+0x12c>)
    555c:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    555e:	682b      	ldr	r3, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5560:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5562:	2a00      	cmp	r2, #0
    5564:	d1fc      	bne.n	5560 <main+0xc0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5566:	6832      	ldr	r2, [r6, #0]
    5568:	2302      	movs	r3, #2
    556a:	4313      	orrs	r3, r2
    556c:	6033      	str	r3, [r6, #0]
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    556e:	4918      	ldr	r1, [pc, #96]	; (55d0 <main+0x130>)
    5570:	0008      	movs	r0, r1
    5572:	3080      	adds	r0, #128	; 0x80
	configure_port_pins();
	system_interrupt_enable_global();
	delay_init();
	configure_console();
	while (1) {
		if (port_pin_get_input_level(B1) == false) {
    5574:	2380      	movs	r3, #128	; 0x80
    5576:	041b      	lsls	r3, r3, #16
    5578:	6a02      	ldr	r2, [r0, #32]
    557a:	421a      	tst	r2, r3
    557c:	d101      	bne.n	5582 <main+0xe2>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    557e:	614b      	str	r3, [r1, #20]
    5580:	e7fa      	b.n	5578 <main+0xd8>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    5582:	618b      	str	r3, [r1, #24]
    5584:	e7f8      	b.n	5578 <main+0xd8>
    5586:	46c0      	nop			; (mov r8, r8)
    5588:	00005241 	.word	0x00005241
    558c:	00005479 	.word	0x00005479
    5590:	20000008 	.word	0x20000008
    5594:	00004119 	.word	0x00004119
    5598:	002a0003 	.word	0x002a0003
    559c:	002b0003 	.word	0x002b0003
    55a0:	200000cc 	.word	0x200000cc
    55a4:	20000128 	.word	0x20000128
    55a8:	00005461 	.word	0x00005461
    55ac:	20000124 	.word	0x20000124
    55b0:	00005435 	.word	0x00005435
    55b4:	20000120 	.word	0x20000120
    55b8:	42001800 	.word	0x42001800
    55bc:	00004641 	.word	0x00004641
    55c0:	2000006c 	.word	0x2000006c
    55c4:	000057b3 	.word	0x000057b3
    55c8:	000045b5 	.word	0x000045b5
    55cc:	e000e100 	.word	0xe000e100
    55d0:	41004400 	.word	0x41004400

000055d4 <__aeabi_uidiv>:
    55d4:	2200      	movs	r2, #0
    55d6:	0843      	lsrs	r3, r0, #1
    55d8:	428b      	cmp	r3, r1
    55da:	d374      	bcc.n	56c6 <__aeabi_uidiv+0xf2>
    55dc:	0903      	lsrs	r3, r0, #4
    55de:	428b      	cmp	r3, r1
    55e0:	d35f      	bcc.n	56a2 <__aeabi_uidiv+0xce>
    55e2:	0a03      	lsrs	r3, r0, #8
    55e4:	428b      	cmp	r3, r1
    55e6:	d344      	bcc.n	5672 <__aeabi_uidiv+0x9e>
    55e8:	0b03      	lsrs	r3, r0, #12
    55ea:	428b      	cmp	r3, r1
    55ec:	d328      	bcc.n	5640 <__aeabi_uidiv+0x6c>
    55ee:	0c03      	lsrs	r3, r0, #16
    55f0:	428b      	cmp	r3, r1
    55f2:	d30d      	bcc.n	5610 <__aeabi_uidiv+0x3c>
    55f4:	22ff      	movs	r2, #255	; 0xff
    55f6:	0209      	lsls	r1, r1, #8
    55f8:	ba12      	rev	r2, r2
    55fa:	0c03      	lsrs	r3, r0, #16
    55fc:	428b      	cmp	r3, r1
    55fe:	d302      	bcc.n	5606 <__aeabi_uidiv+0x32>
    5600:	1212      	asrs	r2, r2, #8
    5602:	0209      	lsls	r1, r1, #8
    5604:	d065      	beq.n	56d2 <__aeabi_uidiv+0xfe>
    5606:	0b03      	lsrs	r3, r0, #12
    5608:	428b      	cmp	r3, r1
    560a:	d319      	bcc.n	5640 <__aeabi_uidiv+0x6c>
    560c:	e000      	b.n	5610 <__aeabi_uidiv+0x3c>
    560e:	0a09      	lsrs	r1, r1, #8
    5610:	0bc3      	lsrs	r3, r0, #15
    5612:	428b      	cmp	r3, r1
    5614:	d301      	bcc.n	561a <__aeabi_uidiv+0x46>
    5616:	03cb      	lsls	r3, r1, #15
    5618:	1ac0      	subs	r0, r0, r3
    561a:	4152      	adcs	r2, r2
    561c:	0b83      	lsrs	r3, r0, #14
    561e:	428b      	cmp	r3, r1
    5620:	d301      	bcc.n	5626 <__aeabi_uidiv+0x52>
    5622:	038b      	lsls	r3, r1, #14
    5624:	1ac0      	subs	r0, r0, r3
    5626:	4152      	adcs	r2, r2
    5628:	0b43      	lsrs	r3, r0, #13
    562a:	428b      	cmp	r3, r1
    562c:	d301      	bcc.n	5632 <__aeabi_uidiv+0x5e>
    562e:	034b      	lsls	r3, r1, #13
    5630:	1ac0      	subs	r0, r0, r3
    5632:	4152      	adcs	r2, r2
    5634:	0b03      	lsrs	r3, r0, #12
    5636:	428b      	cmp	r3, r1
    5638:	d301      	bcc.n	563e <__aeabi_uidiv+0x6a>
    563a:	030b      	lsls	r3, r1, #12
    563c:	1ac0      	subs	r0, r0, r3
    563e:	4152      	adcs	r2, r2
    5640:	0ac3      	lsrs	r3, r0, #11
    5642:	428b      	cmp	r3, r1
    5644:	d301      	bcc.n	564a <__aeabi_uidiv+0x76>
    5646:	02cb      	lsls	r3, r1, #11
    5648:	1ac0      	subs	r0, r0, r3
    564a:	4152      	adcs	r2, r2
    564c:	0a83      	lsrs	r3, r0, #10
    564e:	428b      	cmp	r3, r1
    5650:	d301      	bcc.n	5656 <__aeabi_uidiv+0x82>
    5652:	028b      	lsls	r3, r1, #10
    5654:	1ac0      	subs	r0, r0, r3
    5656:	4152      	adcs	r2, r2
    5658:	0a43      	lsrs	r3, r0, #9
    565a:	428b      	cmp	r3, r1
    565c:	d301      	bcc.n	5662 <__aeabi_uidiv+0x8e>
    565e:	024b      	lsls	r3, r1, #9
    5660:	1ac0      	subs	r0, r0, r3
    5662:	4152      	adcs	r2, r2
    5664:	0a03      	lsrs	r3, r0, #8
    5666:	428b      	cmp	r3, r1
    5668:	d301      	bcc.n	566e <__aeabi_uidiv+0x9a>
    566a:	020b      	lsls	r3, r1, #8
    566c:	1ac0      	subs	r0, r0, r3
    566e:	4152      	adcs	r2, r2
    5670:	d2cd      	bcs.n	560e <__aeabi_uidiv+0x3a>
    5672:	09c3      	lsrs	r3, r0, #7
    5674:	428b      	cmp	r3, r1
    5676:	d301      	bcc.n	567c <__aeabi_uidiv+0xa8>
    5678:	01cb      	lsls	r3, r1, #7
    567a:	1ac0      	subs	r0, r0, r3
    567c:	4152      	adcs	r2, r2
    567e:	0983      	lsrs	r3, r0, #6
    5680:	428b      	cmp	r3, r1
    5682:	d301      	bcc.n	5688 <__aeabi_uidiv+0xb4>
    5684:	018b      	lsls	r3, r1, #6
    5686:	1ac0      	subs	r0, r0, r3
    5688:	4152      	adcs	r2, r2
    568a:	0943      	lsrs	r3, r0, #5
    568c:	428b      	cmp	r3, r1
    568e:	d301      	bcc.n	5694 <__aeabi_uidiv+0xc0>
    5690:	014b      	lsls	r3, r1, #5
    5692:	1ac0      	subs	r0, r0, r3
    5694:	4152      	adcs	r2, r2
    5696:	0903      	lsrs	r3, r0, #4
    5698:	428b      	cmp	r3, r1
    569a:	d301      	bcc.n	56a0 <__aeabi_uidiv+0xcc>
    569c:	010b      	lsls	r3, r1, #4
    569e:	1ac0      	subs	r0, r0, r3
    56a0:	4152      	adcs	r2, r2
    56a2:	08c3      	lsrs	r3, r0, #3
    56a4:	428b      	cmp	r3, r1
    56a6:	d301      	bcc.n	56ac <__aeabi_uidiv+0xd8>
    56a8:	00cb      	lsls	r3, r1, #3
    56aa:	1ac0      	subs	r0, r0, r3
    56ac:	4152      	adcs	r2, r2
    56ae:	0883      	lsrs	r3, r0, #2
    56b0:	428b      	cmp	r3, r1
    56b2:	d301      	bcc.n	56b8 <__aeabi_uidiv+0xe4>
    56b4:	008b      	lsls	r3, r1, #2
    56b6:	1ac0      	subs	r0, r0, r3
    56b8:	4152      	adcs	r2, r2
    56ba:	0843      	lsrs	r3, r0, #1
    56bc:	428b      	cmp	r3, r1
    56be:	d301      	bcc.n	56c4 <__aeabi_uidiv+0xf0>
    56c0:	004b      	lsls	r3, r1, #1
    56c2:	1ac0      	subs	r0, r0, r3
    56c4:	4152      	adcs	r2, r2
    56c6:	1a41      	subs	r1, r0, r1
    56c8:	d200      	bcs.n	56cc <__aeabi_uidiv+0xf8>
    56ca:	4601      	mov	r1, r0
    56cc:	4152      	adcs	r2, r2
    56ce:	4610      	mov	r0, r2
    56d0:	4770      	bx	lr
    56d2:	e7ff      	b.n	56d4 <__aeabi_uidiv+0x100>
    56d4:	b501      	push	{r0, lr}
    56d6:	2000      	movs	r0, #0
    56d8:	f000 f806 	bl	56e8 <__aeabi_idiv0>
    56dc:	bd02      	pop	{r1, pc}
    56de:	46c0      	nop			; (mov r8, r8)

000056e0 <__aeabi_uidivmod>:
    56e0:	2900      	cmp	r1, #0
    56e2:	d0f7      	beq.n	56d4 <__aeabi_uidiv+0x100>
    56e4:	e776      	b.n	55d4 <__aeabi_uidiv>
    56e6:	4770      	bx	lr

000056e8 <__aeabi_idiv0>:
    56e8:	4770      	bx	lr
    56ea:	46c0      	nop			; (mov r8, r8)

000056ec <__aeabi_lmul>:
    56ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    56ee:	464f      	mov	r7, r9
    56f0:	4646      	mov	r6, r8
    56f2:	b4c0      	push	{r6, r7}
    56f4:	0416      	lsls	r6, r2, #16
    56f6:	0c36      	lsrs	r6, r6, #16
    56f8:	4699      	mov	r9, r3
    56fa:	0033      	movs	r3, r6
    56fc:	0405      	lsls	r5, r0, #16
    56fe:	0c2c      	lsrs	r4, r5, #16
    5700:	0c07      	lsrs	r7, r0, #16
    5702:	0c15      	lsrs	r5, r2, #16
    5704:	4363      	muls	r3, r4
    5706:	437e      	muls	r6, r7
    5708:	436f      	muls	r7, r5
    570a:	4365      	muls	r5, r4
    570c:	0c1c      	lsrs	r4, r3, #16
    570e:	19ad      	adds	r5, r5, r6
    5710:	1964      	adds	r4, r4, r5
    5712:	469c      	mov	ip, r3
    5714:	42a6      	cmp	r6, r4
    5716:	d903      	bls.n	5720 <__aeabi_lmul+0x34>
    5718:	2380      	movs	r3, #128	; 0x80
    571a:	025b      	lsls	r3, r3, #9
    571c:	4698      	mov	r8, r3
    571e:	4447      	add	r7, r8
    5720:	4663      	mov	r3, ip
    5722:	0c25      	lsrs	r5, r4, #16
    5724:	19ef      	adds	r7, r5, r7
    5726:	041d      	lsls	r5, r3, #16
    5728:	464b      	mov	r3, r9
    572a:	434a      	muls	r2, r1
    572c:	4343      	muls	r3, r0
    572e:	0c2d      	lsrs	r5, r5, #16
    5730:	0424      	lsls	r4, r4, #16
    5732:	1964      	adds	r4, r4, r5
    5734:	1899      	adds	r1, r3, r2
    5736:	19c9      	adds	r1, r1, r7
    5738:	0020      	movs	r0, r4
    573a:	bc0c      	pop	{r2, r3}
    573c:	4690      	mov	r8, r2
    573e:	4699      	mov	r9, r3
    5740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5742:	46c0      	nop			; (mov r8, r8)

00005744 <__libc_init_array>:
    5744:	4b0e      	ldr	r3, [pc, #56]	; (5780 <__libc_init_array+0x3c>)
    5746:	b570      	push	{r4, r5, r6, lr}
    5748:	2500      	movs	r5, #0
    574a:	001e      	movs	r6, r3
    574c:	4c0d      	ldr	r4, [pc, #52]	; (5784 <__libc_init_array+0x40>)
    574e:	1ae4      	subs	r4, r4, r3
    5750:	10a4      	asrs	r4, r4, #2
    5752:	42a5      	cmp	r5, r4
    5754:	d004      	beq.n	5760 <__libc_init_array+0x1c>
    5756:	00ab      	lsls	r3, r5, #2
    5758:	58f3      	ldr	r3, [r6, r3]
    575a:	4798      	blx	r3
    575c:	3501      	adds	r5, #1
    575e:	e7f8      	b.n	5752 <__libc_init_array+0xe>
    5760:	f000 fc5a 	bl	6018 <_init>
    5764:	4b08      	ldr	r3, [pc, #32]	; (5788 <__libc_init_array+0x44>)
    5766:	2500      	movs	r5, #0
    5768:	001e      	movs	r6, r3
    576a:	4c08      	ldr	r4, [pc, #32]	; (578c <__libc_init_array+0x48>)
    576c:	1ae4      	subs	r4, r4, r3
    576e:	10a4      	asrs	r4, r4, #2
    5770:	42a5      	cmp	r5, r4
    5772:	d004      	beq.n	577e <__libc_init_array+0x3a>
    5774:	00ab      	lsls	r3, r5, #2
    5776:	58f3      	ldr	r3, [r6, r3]
    5778:	4798      	blx	r3
    577a:	3501      	adds	r5, #1
    577c:	e7f8      	b.n	5770 <__libc_init_array+0x2c>
    577e:	bd70      	pop	{r4, r5, r6, pc}
    5780:	00006024 	.word	0x00006024
    5784:	00006024 	.word	0x00006024
    5788:	00006024 	.word	0x00006024
    578c:	00006028 	.word	0x00006028

00005790 <memcpy>:
    5790:	2300      	movs	r3, #0
    5792:	b510      	push	{r4, lr}
    5794:	429a      	cmp	r2, r3
    5796:	d003      	beq.n	57a0 <memcpy+0x10>
    5798:	5ccc      	ldrb	r4, [r1, r3]
    579a:	54c4      	strb	r4, [r0, r3]
    579c:	3301      	adds	r3, #1
    579e:	e7f9      	b.n	5794 <memcpy+0x4>
    57a0:	bd10      	pop	{r4, pc}

000057a2 <memset>:
    57a2:	0003      	movs	r3, r0
    57a4:	1882      	adds	r2, r0, r2
    57a6:	4293      	cmp	r3, r2
    57a8:	d002      	beq.n	57b0 <memset+0xe>
    57aa:	7019      	strb	r1, [r3, #0]
    57ac:	3301      	adds	r3, #1
    57ae:	e7fa      	b.n	57a6 <memset+0x4>
    57b0:	4770      	bx	lr

000057b2 <setbuf>:
    57b2:	424a      	negs	r2, r1
    57b4:	414a      	adcs	r2, r1
    57b6:	2380      	movs	r3, #128	; 0x80
    57b8:	b510      	push	{r4, lr}
    57ba:	0052      	lsls	r2, r2, #1
    57bc:	00db      	lsls	r3, r3, #3
    57be:	f000 f801 	bl	57c4 <setvbuf>
    57c2:	bd10      	pop	{r4, pc}

000057c4 <setvbuf>:
    57c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    57c6:	001d      	movs	r5, r3
    57c8:	4b51      	ldr	r3, [pc, #324]	; (5910 <setvbuf+0x14c>)
    57ca:	b085      	sub	sp, #20
    57cc:	681e      	ldr	r6, [r3, #0]
    57ce:	0004      	movs	r4, r0
    57d0:	000f      	movs	r7, r1
    57d2:	9200      	str	r2, [sp, #0]
    57d4:	2e00      	cmp	r6, #0
    57d6:	d005      	beq.n	57e4 <setvbuf+0x20>
    57d8:	69b3      	ldr	r3, [r6, #24]
    57da:	2b00      	cmp	r3, #0
    57dc:	d102      	bne.n	57e4 <setvbuf+0x20>
    57de:	0030      	movs	r0, r6
    57e0:	f000 f994 	bl	5b0c <__sinit>
    57e4:	4b4b      	ldr	r3, [pc, #300]	; (5914 <setvbuf+0x150>)
    57e6:	429c      	cmp	r4, r3
    57e8:	d101      	bne.n	57ee <setvbuf+0x2a>
    57ea:	6874      	ldr	r4, [r6, #4]
    57ec:	e008      	b.n	5800 <setvbuf+0x3c>
    57ee:	4b4a      	ldr	r3, [pc, #296]	; (5918 <setvbuf+0x154>)
    57f0:	429c      	cmp	r4, r3
    57f2:	d101      	bne.n	57f8 <setvbuf+0x34>
    57f4:	68b4      	ldr	r4, [r6, #8]
    57f6:	e003      	b.n	5800 <setvbuf+0x3c>
    57f8:	4b48      	ldr	r3, [pc, #288]	; (591c <setvbuf+0x158>)
    57fa:	429c      	cmp	r4, r3
    57fc:	d100      	bne.n	5800 <setvbuf+0x3c>
    57fe:	68f4      	ldr	r4, [r6, #12]
    5800:	9b00      	ldr	r3, [sp, #0]
    5802:	2b02      	cmp	r3, #2
    5804:	d005      	beq.n	5812 <setvbuf+0x4e>
    5806:	2b01      	cmp	r3, #1
    5808:	d900      	bls.n	580c <setvbuf+0x48>
    580a:	e07c      	b.n	5906 <setvbuf+0x142>
    580c:	2d00      	cmp	r5, #0
    580e:	da00      	bge.n	5812 <setvbuf+0x4e>
    5810:	e079      	b.n	5906 <setvbuf+0x142>
    5812:	0021      	movs	r1, r4
    5814:	0030      	movs	r0, r6
    5816:	f000 f90b 	bl	5a30 <_fflush_r>
    581a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    581c:	2900      	cmp	r1, #0
    581e:	d008      	beq.n	5832 <setvbuf+0x6e>
    5820:	0023      	movs	r3, r4
    5822:	3344      	adds	r3, #68	; 0x44
    5824:	4299      	cmp	r1, r3
    5826:	d002      	beq.n	582e <setvbuf+0x6a>
    5828:	0030      	movs	r0, r6
    582a:	f000 fa33 	bl	5c94 <_free_r>
    582e:	2300      	movs	r3, #0
    5830:	6363      	str	r3, [r4, #52]	; 0x34
    5832:	2300      	movs	r3, #0
    5834:	61a3      	str	r3, [r4, #24]
    5836:	6063      	str	r3, [r4, #4]
    5838:	89a3      	ldrh	r3, [r4, #12]
    583a:	061b      	lsls	r3, r3, #24
    583c:	d503      	bpl.n	5846 <setvbuf+0x82>
    583e:	6921      	ldr	r1, [r4, #16]
    5840:	0030      	movs	r0, r6
    5842:	f000 fa27 	bl	5c94 <_free_r>
    5846:	89a2      	ldrh	r2, [r4, #12]
    5848:	4b35      	ldr	r3, [pc, #212]	; (5920 <setvbuf+0x15c>)
    584a:	4013      	ands	r3, r2
    584c:	81a3      	strh	r3, [r4, #12]
    584e:	9b00      	ldr	r3, [sp, #0]
    5850:	2b02      	cmp	r3, #2
    5852:	d021      	beq.n	5898 <setvbuf+0xd4>
    5854:	ab03      	add	r3, sp, #12
    5856:	aa02      	add	r2, sp, #8
    5858:	0021      	movs	r1, r4
    585a:	0030      	movs	r0, r6
    585c:	f000 f9ea 	bl	5c34 <__swhatbuf_r>
    5860:	89a3      	ldrh	r3, [r4, #12]
    5862:	4318      	orrs	r0, r3
    5864:	81a0      	strh	r0, [r4, #12]
    5866:	2d00      	cmp	r5, #0
    5868:	d101      	bne.n	586e <setvbuf+0xaa>
    586a:	9d02      	ldr	r5, [sp, #8]
    586c:	e001      	b.n	5872 <setvbuf+0xae>
    586e:	2f00      	cmp	r7, #0
    5870:	d125      	bne.n	58be <setvbuf+0xfa>
    5872:	0028      	movs	r0, r5
    5874:	f000 fa04 	bl	5c80 <malloc>
    5878:	9501      	str	r5, [sp, #4]
    587a:	1e07      	subs	r7, r0, #0
    587c:	d11a      	bne.n	58b4 <setvbuf+0xf0>
    587e:	9b02      	ldr	r3, [sp, #8]
    5880:	9301      	str	r3, [sp, #4]
    5882:	42ab      	cmp	r3, r5
    5884:	d102      	bne.n	588c <setvbuf+0xc8>
    5886:	2001      	movs	r0, #1
    5888:	4240      	negs	r0, r0
    588a:	e006      	b.n	589a <setvbuf+0xd6>
    588c:	9801      	ldr	r0, [sp, #4]
    588e:	f000 f9f7 	bl	5c80 <malloc>
    5892:	1e07      	subs	r7, r0, #0
    5894:	d10e      	bne.n	58b4 <setvbuf+0xf0>
    5896:	e7f6      	b.n	5886 <setvbuf+0xc2>
    5898:	2000      	movs	r0, #0
    589a:	2202      	movs	r2, #2
    589c:	89a3      	ldrh	r3, [r4, #12]
    589e:	4313      	orrs	r3, r2
    58a0:	81a3      	strh	r3, [r4, #12]
    58a2:	2300      	movs	r3, #0
    58a4:	60a3      	str	r3, [r4, #8]
    58a6:	0023      	movs	r3, r4
    58a8:	3347      	adds	r3, #71	; 0x47
    58aa:	6023      	str	r3, [r4, #0]
    58ac:	6123      	str	r3, [r4, #16]
    58ae:	2301      	movs	r3, #1
    58b0:	6163      	str	r3, [r4, #20]
    58b2:	e02a      	b.n	590a <setvbuf+0x146>
    58b4:	2280      	movs	r2, #128	; 0x80
    58b6:	89a3      	ldrh	r3, [r4, #12]
    58b8:	9d01      	ldr	r5, [sp, #4]
    58ba:	4313      	orrs	r3, r2
    58bc:	81a3      	strh	r3, [r4, #12]
    58be:	69b3      	ldr	r3, [r6, #24]
    58c0:	2b00      	cmp	r3, #0
    58c2:	d102      	bne.n	58ca <setvbuf+0x106>
    58c4:	0030      	movs	r0, r6
    58c6:	f000 f921 	bl	5b0c <__sinit>
    58ca:	9b00      	ldr	r3, [sp, #0]
    58cc:	2b01      	cmp	r3, #1
    58ce:	d103      	bne.n	58d8 <setvbuf+0x114>
    58d0:	89a3      	ldrh	r3, [r4, #12]
    58d2:	9a00      	ldr	r2, [sp, #0]
    58d4:	431a      	orrs	r2, r3
    58d6:	81a2      	strh	r2, [r4, #12]
    58d8:	2308      	movs	r3, #8
    58da:	89a2      	ldrh	r2, [r4, #12]
    58dc:	6027      	str	r7, [r4, #0]
    58de:	4013      	ands	r3, r2
    58e0:	6127      	str	r7, [r4, #16]
    58e2:	6165      	str	r5, [r4, #20]
    58e4:	1e18      	subs	r0, r3, #0
    58e6:	d00c      	beq.n	5902 <setvbuf+0x13e>
    58e8:	2301      	movs	r3, #1
    58ea:	401a      	ands	r2, r3
    58ec:	2300      	movs	r3, #0
    58ee:	1e10      	subs	r0, r2, #0
    58f0:	4298      	cmp	r0, r3
    58f2:	d004      	beq.n	58fe <setvbuf+0x13a>
    58f4:	426d      	negs	r5, r5
    58f6:	60a3      	str	r3, [r4, #8]
    58f8:	61a5      	str	r5, [r4, #24]
    58fa:	0018      	movs	r0, r3
    58fc:	e005      	b.n	590a <setvbuf+0x146>
    58fe:	60a5      	str	r5, [r4, #8]
    5900:	e003      	b.n	590a <setvbuf+0x146>
    5902:	60a3      	str	r3, [r4, #8]
    5904:	e001      	b.n	590a <setvbuf+0x146>
    5906:	2001      	movs	r0, #1
    5908:	4240      	negs	r0, r0
    590a:	b005      	add	sp, #20
    590c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    590e:	46c0      	nop			; (mov r8, r8)
    5910:	2000006c 	.word	0x2000006c
    5914:	00005fb8 	.word	0x00005fb8
    5918:	00005fd8 	.word	0x00005fd8
    591c:	00005ff8 	.word	0x00005ff8
    5920:	fffff35c 	.word	0xfffff35c

00005924 <__sflush_r>:
    5924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5926:	898a      	ldrh	r2, [r1, #12]
    5928:	0005      	movs	r5, r0
    592a:	000c      	movs	r4, r1
    592c:	0713      	lsls	r3, r2, #28
    592e:	d45a      	bmi.n	59e6 <__sflush_r+0xc2>
    5930:	684b      	ldr	r3, [r1, #4]
    5932:	2b00      	cmp	r3, #0
    5934:	dc02      	bgt.n	593c <__sflush_r+0x18>
    5936:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    5938:	2b00      	cmp	r3, #0
    593a:	dd19      	ble.n	5970 <__sflush_r+0x4c>
    593c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    593e:	2f00      	cmp	r7, #0
    5940:	d016      	beq.n	5970 <__sflush_r+0x4c>
    5942:	2300      	movs	r3, #0
    5944:	682e      	ldr	r6, [r5, #0]
    5946:	602b      	str	r3, [r5, #0]
    5948:	2380      	movs	r3, #128	; 0x80
    594a:	015b      	lsls	r3, r3, #5
    594c:	401a      	ands	r2, r3
    594e:	d001      	beq.n	5954 <__sflush_r+0x30>
    5950:	6d60      	ldr	r0, [r4, #84]	; 0x54
    5952:	e014      	b.n	597e <__sflush_r+0x5a>
    5954:	2301      	movs	r3, #1
    5956:	6a21      	ldr	r1, [r4, #32]
    5958:	0028      	movs	r0, r5
    595a:	47b8      	blx	r7
    595c:	1c43      	adds	r3, r0, #1
    595e:	d10e      	bne.n	597e <__sflush_r+0x5a>
    5960:	682b      	ldr	r3, [r5, #0]
    5962:	2b00      	cmp	r3, #0
    5964:	d00b      	beq.n	597e <__sflush_r+0x5a>
    5966:	2b1d      	cmp	r3, #29
    5968:	d001      	beq.n	596e <__sflush_r+0x4a>
    596a:	2b16      	cmp	r3, #22
    596c:	d102      	bne.n	5974 <__sflush_r+0x50>
    596e:	602e      	str	r6, [r5, #0]
    5970:	2000      	movs	r0, #0
    5972:	e05a      	b.n	5a2a <__sflush_r+0x106>
    5974:	2240      	movs	r2, #64	; 0x40
    5976:	89a3      	ldrh	r3, [r4, #12]
    5978:	4313      	orrs	r3, r2
    597a:	81a3      	strh	r3, [r4, #12]
    597c:	e055      	b.n	5a2a <__sflush_r+0x106>
    597e:	89a3      	ldrh	r3, [r4, #12]
    5980:	075b      	lsls	r3, r3, #29
    5982:	d506      	bpl.n	5992 <__sflush_r+0x6e>
    5984:	6863      	ldr	r3, [r4, #4]
    5986:	1ac0      	subs	r0, r0, r3
    5988:	6b63      	ldr	r3, [r4, #52]	; 0x34
    598a:	2b00      	cmp	r3, #0
    598c:	d001      	beq.n	5992 <__sflush_r+0x6e>
    598e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5990:	1ac0      	subs	r0, r0, r3
    5992:	2300      	movs	r3, #0
    5994:	0002      	movs	r2, r0
    5996:	6a21      	ldr	r1, [r4, #32]
    5998:	0028      	movs	r0, r5
    599a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    599c:	47b8      	blx	r7
    599e:	89a3      	ldrh	r3, [r4, #12]
    59a0:	1c42      	adds	r2, r0, #1
    59a2:	d106      	bne.n	59b2 <__sflush_r+0x8e>
    59a4:	6829      	ldr	r1, [r5, #0]
    59a6:	291d      	cmp	r1, #29
    59a8:	d83a      	bhi.n	5a20 <__sflush_r+0xfc>
    59aa:	4a20      	ldr	r2, [pc, #128]	; (5a2c <__sflush_r+0x108>)
    59ac:	40ca      	lsrs	r2, r1
    59ae:	07d2      	lsls	r2, r2, #31
    59b0:	d536      	bpl.n	5a20 <__sflush_r+0xfc>
    59b2:	2200      	movs	r2, #0
    59b4:	6062      	str	r2, [r4, #4]
    59b6:	6922      	ldr	r2, [r4, #16]
    59b8:	6022      	str	r2, [r4, #0]
    59ba:	04db      	lsls	r3, r3, #19
    59bc:	d505      	bpl.n	59ca <__sflush_r+0xa6>
    59be:	1c43      	adds	r3, r0, #1
    59c0:	d102      	bne.n	59c8 <__sflush_r+0xa4>
    59c2:	682b      	ldr	r3, [r5, #0]
    59c4:	2b00      	cmp	r3, #0
    59c6:	d100      	bne.n	59ca <__sflush_r+0xa6>
    59c8:	6560      	str	r0, [r4, #84]	; 0x54
    59ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
    59cc:	602e      	str	r6, [r5, #0]
    59ce:	2900      	cmp	r1, #0
    59d0:	d0ce      	beq.n	5970 <__sflush_r+0x4c>
    59d2:	0023      	movs	r3, r4
    59d4:	3344      	adds	r3, #68	; 0x44
    59d6:	4299      	cmp	r1, r3
    59d8:	d002      	beq.n	59e0 <__sflush_r+0xbc>
    59da:	0028      	movs	r0, r5
    59dc:	f000 f95a 	bl	5c94 <_free_r>
    59e0:	2000      	movs	r0, #0
    59e2:	6360      	str	r0, [r4, #52]	; 0x34
    59e4:	e021      	b.n	5a2a <__sflush_r+0x106>
    59e6:	690f      	ldr	r7, [r1, #16]
    59e8:	2f00      	cmp	r7, #0
    59ea:	d0c1      	beq.n	5970 <__sflush_r+0x4c>
    59ec:	680b      	ldr	r3, [r1, #0]
    59ee:	600f      	str	r7, [r1, #0]
    59f0:	1bdb      	subs	r3, r3, r7
    59f2:	9301      	str	r3, [sp, #4]
    59f4:	2300      	movs	r3, #0
    59f6:	0792      	lsls	r2, r2, #30
    59f8:	d100      	bne.n	59fc <__sflush_r+0xd8>
    59fa:	694b      	ldr	r3, [r1, #20]
    59fc:	60a3      	str	r3, [r4, #8]
    59fe:	e003      	b.n	5a08 <__sflush_r+0xe4>
    5a00:	9b01      	ldr	r3, [sp, #4]
    5a02:	183f      	adds	r7, r7, r0
    5a04:	1a1b      	subs	r3, r3, r0
    5a06:	9301      	str	r3, [sp, #4]
    5a08:	9b01      	ldr	r3, [sp, #4]
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	ddb0      	ble.n	5970 <__sflush_r+0x4c>
    5a0e:	9b01      	ldr	r3, [sp, #4]
    5a10:	003a      	movs	r2, r7
    5a12:	6a21      	ldr	r1, [r4, #32]
    5a14:	0028      	movs	r0, r5
    5a16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    5a18:	47b0      	blx	r6
    5a1a:	2800      	cmp	r0, #0
    5a1c:	dcf0      	bgt.n	5a00 <__sflush_r+0xdc>
    5a1e:	89a3      	ldrh	r3, [r4, #12]
    5a20:	2240      	movs	r2, #64	; 0x40
    5a22:	2001      	movs	r0, #1
    5a24:	4313      	orrs	r3, r2
    5a26:	81a3      	strh	r3, [r4, #12]
    5a28:	4240      	negs	r0, r0
    5a2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5a2c:	20400001 	.word	0x20400001

00005a30 <_fflush_r>:
    5a30:	690b      	ldr	r3, [r1, #16]
    5a32:	b570      	push	{r4, r5, r6, lr}
    5a34:	0005      	movs	r5, r0
    5a36:	000c      	movs	r4, r1
    5a38:	2b00      	cmp	r3, #0
    5a3a:	d101      	bne.n	5a40 <_fflush_r+0x10>
    5a3c:	2000      	movs	r0, #0
    5a3e:	e01c      	b.n	5a7a <_fflush_r+0x4a>
    5a40:	2800      	cmp	r0, #0
    5a42:	d004      	beq.n	5a4e <_fflush_r+0x1e>
    5a44:	6983      	ldr	r3, [r0, #24]
    5a46:	2b00      	cmp	r3, #0
    5a48:	d101      	bne.n	5a4e <_fflush_r+0x1e>
    5a4a:	f000 f85f 	bl	5b0c <__sinit>
    5a4e:	4b0b      	ldr	r3, [pc, #44]	; (5a7c <_fflush_r+0x4c>)
    5a50:	429c      	cmp	r4, r3
    5a52:	d101      	bne.n	5a58 <_fflush_r+0x28>
    5a54:	686c      	ldr	r4, [r5, #4]
    5a56:	e008      	b.n	5a6a <_fflush_r+0x3a>
    5a58:	4b09      	ldr	r3, [pc, #36]	; (5a80 <_fflush_r+0x50>)
    5a5a:	429c      	cmp	r4, r3
    5a5c:	d101      	bne.n	5a62 <_fflush_r+0x32>
    5a5e:	68ac      	ldr	r4, [r5, #8]
    5a60:	e003      	b.n	5a6a <_fflush_r+0x3a>
    5a62:	4b08      	ldr	r3, [pc, #32]	; (5a84 <_fflush_r+0x54>)
    5a64:	429c      	cmp	r4, r3
    5a66:	d100      	bne.n	5a6a <_fflush_r+0x3a>
    5a68:	68ec      	ldr	r4, [r5, #12]
    5a6a:	220c      	movs	r2, #12
    5a6c:	5ea3      	ldrsh	r3, [r4, r2]
    5a6e:	2b00      	cmp	r3, #0
    5a70:	d0e4      	beq.n	5a3c <_fflush_r+0xc>
    5a72:	0021      	movs	r1, r4
    5a74:	0028      	movs	r0, r5
    5a76:	f7ff ff55 	bl	5924 <__sflush_r>
    5a7a:	bd70      	pop	{r4, r5, r6, pc}
    5a7c:	00005fb8 	.word	0x00005fb8
    5a80:	00005fd8 	.word	0x00005fd8
    5a84:	00005ff8 	.word	0x00005ff8

00005a88 <_cleanup_r>:
    5a88:	b510      	push	{r4, lr}
    5a8a:	4902      	ldr	r1, [pc, #8]	; (5a94 <_cleanup_r+0xc>)
    5a8c:	f000 f8b0 	bl	5bf0 <_fwalk_reent>
    5a90:	bd10      	pop	{r4, pc}
    5a92:	46c0      	nop			; (mov r8, r8)
    5a94:	00005a31 	.word	0x00005a31

00005a98 <std.isra.0>:
    5a98:	2300      	movs	r3, #0
    5a9a:	b510      	push	{r4, lr}
    5a9c:	0004      	movs	r4, r0
    5a9e:	6003      	str	r3, [r0, #0]
    5aa0:	6043      	str	r3, [r0, #4]
    5aa2:	6083      	str	r3, [r0, #8]
    5aa4:	8181      	strh	r1, [r0, #12]
    5aa6:	6643      	str	r3, [r0, #100]	; 0x64
    5aa8:	81c2      	strh	r2, [r0, #14]
    5aaa:	6103      	str	r3, [r0, #16]
    5aac:	6143      	str	r3, [r0, #20]
    5aae:	6183      	str	r3, [r0, #24]
    5ab0:	0019      	movs	r1, r3
    5ab2:	2208      	movs	r2, #8
    5ab4:	305c      	adds	r0, #92	; 0x5c
    5ab6:	f7ff fe74 	bl	57a2 <memset>
    5aba:	4b05      	ldr	r3, [pc, #20]	; (5ad0 <std.isra.0+0x38>)
    5abc:	6224      	str	r4, [r4, #32]
    5abe:	6263      	str	r3, [r4, #36]	; 0x24
    5ac0:	4b04      	ldr	r3, [pc, #16]	; (5ad4 <std.isra.0+0x3c>)
    5ac2:	62a3      	str	r3, [r4, #40]	; 0x28
    5ac4:	4b04      	ldr	r3, [pc, #16]	; (5ad8 <std.isra.0+0x40>)
    5ac6:	62e3      	str	r3, [r4, #44]	; 0x2c
    5ac8:	4b04      	ldr	r3, [pc, #16]	; (5adc <std.isra.0+0x44>)
    5aca:	6323      	str	r3, [r4, #48]	; 0x30
    5acc:	bd10      	pop	{r4, pc}
    5ace:	46c0      	nop			; (mov r8, r8)
    5ad0:	00005df1 	.word	0x00005df1
    5ad4:	00005e19 	.word	0x00005e19
    5ad8:	00005e51 	.word	0x00005e51
    5adc:	00005e7d 	.word	0x00005e7d

00005ae0 <__sfmoreglue>:
    5ae0:	b570      	push	{r4, r5, r6, lr}
    5ae2:	2568      	movs	r5, #104	; 0x68
    5ae4:	1e4b      	subs	r3, r1, #1
    5ae6:	435d      	muls	r5, r3
    5ae8:	000e      	movs	r6, r1
    5aea:	0029      	movs	r1, r5
    5aec:	3174      	adds	r1, #116	; 0x74
    5aee:	f000 f917 	bl	5d20 <_malloc_r>
    5af2:	1e04      	subs	r4, r0, #0
    5af4:	d008      	beq.n	5b08 <__sfmoreglue+0x28>
    5af6:	2100      	movs	r1, #0
    5af8:	002a      	movs	r2, r5
    5afa:	6001      	str	r1, [r0, #0]
    5afc:	6046      	str	r6, [r0, #4]
    5afe:	300c      	adds	r0, #12
    5b00:	60a0      	str	r0, [r4, #8]
    5b02:	3268      	adds	r2, #104	; 0x68
    5b04:	f7ff fe4d 	bl	57a2 <memset>
    5b08:	0020      	movs	r0, r4
    5b0a:	bd70      	pop	{r4, r5, r6, pc}

00005b0c <__sinit>:
    5b0c:	6983      	ldr	r3, [r0, #24]
    5b0e:	b513      	push	{r0, r1, r4, lr}
    5b10:	0004      	movs	r4, r0
    5b12:	2b00      	cmp	r3, #0
    5b14:	d128      	bne.n	5b68 <__sinit+0x5c>
    5b16:	6483      	str	r3, [r0, #72]	; 0x48
    5b18:	64c3      	str	r3, [r0, #76]	; 0x4c
    5b1a:	6503      	str	r3, [r0, #80]	; 0x50
    5b1c:	4b13      	ldr	r3, [pc, #76]	; (5b6c <__sinit+0x60>)
    5b1e:	4a14      	ldr	r2, [pc, #80]	; (5b70 <__sinit+0x64>)
    5b20:	681b      	ldr	r3, [r3, #0]
    5b22:	6282      	str	r2, [r0, #40]	; 0x28
    5b24:	9301      	str	r3, [sp, #4]
    5b26:	4298      	cmp	r0, r3
    5b28:	d101      	bne.n	5b2e <__sinit+0x22>
    5b2a:	2301      	movs	r3, #1
    5b2c:	6183      	str	r3, [r0, #24]
    5b2e:	0020      	movs	r0, r4
    5b30:	f000 f820 	bl	5b74 <__sfp>
    5b34:	6060      	str	r0, [r4, #4]
    5b36:	0020      	movs	r0, r4
    5b38:	f000 f81c 	bl	5b74 <__sfp>
    5b3c:	60a0      	str	r0, [r4, #8]
    5b3e:	0020      	movs	r0, r4
    5b40:	f000 f818 	bl	5b74 <__sfp>
    5b44:	2200      	movs	r2, #0
    5b46:	60e0      	str	r0, [r4, #12]
    5b48:	2104      	movs	r1, #4
    5b4a:	6860      	ldr	r0, [r4, #4]
    5b4c:	f7ff ffa4 	bl	5a98 <std.isra.0>
    5b50:	2201      	movs	r2, #1
    5b52:	2109      	movs	r1, #9
    5b54:	68a0      	ldr	r0, [r4, #8]
    5b56:	f7ff ff9f 	bl	5a98 <std.isra.0>
    5b5a:	2202      	movs	r2, #2
    5b5c:	2112      	movs	r1, #18
    5b5e:	68e0      	ldr	r0, [r4, #12]
    5b60:	f7ff ff9a 	bl	5a98 <std.isra.0>
    5b64:	2301      	movs	r3, #1
    5b66:	61a3      	str	r3, [r4, #24]
    5b68:	bd13      	pop	{r0, r1, r4, pc}
    5b6a:	46c0      	nop			; (mov r8, r8)
    5b6c:	00005fb4 	.word	0x00005fb4
    5b70:	00005a89 	.word	0x00005a89

00005b74 <__sfp>:
    5b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b76:	4b1d      	ldr	r3, [pc, #116]	; (5bec <__sfp+0x78>)
    5b78:	0006      	movs	r6, r0
    5b7a:	681d      	ldr	r5, [r3, #0]
    5b7c:	69ab      	ldr	r3, [r5, #24]
    5b7e:	2b00      	cmp	r3, #0
    5b80:	d102      	bne.n	5b88 <__sfp+0x14>
    5b82:	0028      	movs	r0, r5
    5b84:	f7ff ffc2 	bl	5b0c <__sinit>
    5b88:	3548      	adds	r5, #72	; 0x48
    5b8a:	68ac      	ldr	r4, [r5, #8]
    5b8c:	686b      	ldr	r3, [r5, #4]
    5b8e:	3b01      	subs	r3, #1
    5b90:	d405      	bmi.n	5b9e <__sfp+0x2a>
    5b92:	220c      	movs	r2, #12
    5b94:	5ea7      	ldrsh	r7, [r4, r2]
    5b96:	2f00      	cmp	r7, #0
    5b98:	d010      	beq.n	5bbc <__sfp+0x48>
    5b9a:	3468      	adds	r4, #104	; 0x68
    5b9c:	e7f7      	b.n	5b8e <__sfp+0x1a>
    5b9e:	682b      	ldr	r3, [r5, #0]
    5ba0:	2b00      	cmp	r3, #0
    5ba2:	d001      	beq.n	5ba8 <__sfp+0x34>
    5ba4:	682d      	ldr	r5, [r5, #0]
    5ba6:	e7f0      	b.n	5b8a <__sfp+0x16>
    5ba8:	2104      	movs	r1, #4
    5baa:	0030      	movs	r0, r6
    5bac:	f7ff ff98 	bl	5ae0 <__sfmoreglue>
    5bb0:	6028      	str	r0, [r5, #0]
    5bb2:	2800      	cmp	r0, #0
    5bb4:	d1f6      	bne.n	5ba4 <__sfp+0x30>
    5bb6:	230c      	movs	r3, #12
    5bb8:	6033      	str	r3, [r6, #0]
    5bba:	e016      	b.n	5bea <__sfp+0x76>
    5bbc:	2301      	movs	r3, #1
    5bbe:	0020      	movs	r0, r4
    5bc0:	425b      	negs	r3, r3
    5bc2:	81e3      	strh	r3, [r4, #14]
    5bc4:	3302      	adds	r3, #2
    5bc6:	81a3      	strh	r3, [r4, #12]
    5bc8:	6667      	str	r7, [r4, #100]	; 0x64
    5bca:	6027      	str	r7, [r4, #0]
    5bcc:	60a7      	str	r7, [r4, #8]
    5bce:	6067      	str	r7, [r4, #4]
    5bd0:	6127      	str	r7, [r4, #16]
    5bd2:	6167      	str	r7, [r4, #20]
    5bd4:	61a7      	str	r7, [r4, #24]
    5bd6:	305c      	adds	r0, #92	; 0x5c
    5bd8:	2208      	movs	r2, #8
    5bda:	0039      	movs	r1, r7
    5bdc:	f7ff fde1 	bl	57a2 <memset>
    5be0:	0020      	movs	r0, r4
    5be2:	6367      	str	r7, [r4, #52]	; 0x34
    5be4:	63a7      	str	r7, [r4, #56]	; 0x38
    5be6:	64a7      	str	r7, [r4, #72]	; 0x48
    5be8:	64e7      	str	r7, [r4, #76]	; 0x4c
    5bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bec:	00005fb4 	.word	0x00005fb4

00005bf0 <_fwalk_reent>:
    5bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5bf2:	0004      	movs	r4, r0
    5bf4:	0007      	movs	r7, r0
    5bf6:	2600      	movs	r6, #0
    5bf8:	9101      	str	r1, [sp, #4]
    5bfa:	3448      	adds	r4, #72	; 0x48
    5bfc:	2c00      	cmp	r4, #0
    5bfe:	d016      	beq.n	5c2e <_fwalk_reent+0x3e>
    5c00:	6863      	ldr	r3, [r4, #4]
    5c02:	68a5      	ldr	r5, [r4, #8]
    5c04:	9300      	str	r3, [sp, #0]
    5c06:	9b00      	ldr	r3, [sp, #0]
    5c08:	3b01      	subs	r3, #1
    5c0a:	9300      	str	r3, [sp, #0]
    5c0c:	d40d      	bmi.n	5c2a <_fwalk_reent+0x3a>
    5c0e:	89ab      	ldrh	r3, [r5, #12]
    5c10:	2b01      	cmp	r3, #1
    5c12:	d908      	bls.n	5c26 <_fwalk_reent+0x36>
    5c14:	220e      	movs	r2, #14
    5c16:	5eab      	ldrsh	r3, [r5, r2]
    5c18:	3301      	adds	r3, #1
    5c1a:	d004      	beq.n	5c26 <_fwalk_reent+0x36>
    5c1c:	0029      	movs	r1, r5
    5c1e:	0038      	movs	r0, r7
    5c20:	9b01      	ldr	r3, [sp, #4]
    5c22:	4798      	blx	r3
    5c24:	4306      	orrs	r6, r0
    5c26:	3568      	adds	r5, #104	; 0x68
    5c28:	e7ed      	b.n	5c06 <_fwalk_reent+0x16>
    5c2a:	6824      	ldr	r4, [r4, #0]
    5c2c:	e7e6      	b.n	5bfc <_fwalk_reent+0xc>
    5c2e:	0030      	movs	r0, r6
    5c30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00005c34 <__swhatbuf_r>:
    5c34:	b570      	push	{r4, r5, r6, lr}
    5c36:	000e      	movs	r6, r1
    5c38:	001d      	movs	r5, r3
    5c3a:	230e      	movs	r3, #14
    5c3c:	5ec9      	ldrsh	r1, [r1, r3]
    5c3e:	b090      	sub	sp, #64	; 0x40
    5c40:	0014      	movs	r4, r2
    5c42:	2900      	cmp	r1, #0
    5c44:	da06      	bge.n	5c54 <__swhatbuf_r+0x20>
    5c46:	2300      	movs	r3, #0
    5c48:	602b      	str	r3, [r5, #0]
    5c4a:	89b3      	ldrh	r3, [r6, #12]
    5c4c:	061b      	lsls	r3, r3, #24
    5c4e:	d50f      	bpl.n	5c70 <__swhatbuf_r+0x3c>
    5c50:	2340      	movs	r3, #64	; 0x40
    5c52:	e00f      	b.n	5c74 <__swhatbuf_r+0x40>
    5c54:	aa01      	add	r2, sp, #4
    5c56:	f000 f93d 	bl	5ed4 <_fstat_r>
    5c5a:	2800      	cmp	r0, #0
    5c5c:	dbf3      	blt.n	5c46 <__swhatbuf_r+0x12>
    5c5e:	23f0      	movs	r3, #240	; 0xf0
    5c60:	9a02      	ldr	r2, [sp, #8]
    5c62:	021b      	lsls	r3, r3, #8
    5c64:	4013      	ands	r3, r2
    5c66:	4a05      	ldr	r2, [pc, #20]	; (5c7c <__swhatbuf_r+0x48>)
    5c68:	189b      	adds	r3, r3, r2
    5c6a:	425a      	negs	r2, r3
    5c6c:	4153      	adcs	r3, r2
    5c6e:	602b      	str	r3, [r5, #0]
    5c70:	2380      	movs	r3, #128	; 0x80
    5c72:	00db      	lsls	r3, r3, #3
    5c74:	2000      	movs	r0, #0
    5c76:	6023      	str	r3, [r4, #0]
    5c78:	b010      	add	sp, #64	; 0x40
    5c7a:	bd70      	pop	{r4, r5, r6, pc}
    5c7c:	ffffe000 	.word	0xffffe000

00005c80 <malloc>:
    5c80:	b510      	push	{r4, lr}
    5c82:	4b03      	ldr	r3, [pc, #12]	; (5c90 <malloc+0x10>)
    5c84:	0001      	movs	r1, r0
    5c86:	6818      	ldr	r0, [r3, #0]
    5c88:	f000 f84a 	bl	5d20 <_malloc_r>
    5c8c:	bd10      	pop	{r4, pc}
    5c8e:	46c0      	nop			; (mov r8, r8)
    5c90:	2000006c 	.word	0x2000006c

00005c94 <_free_r>:
    5c94:	b530      	push	{r4, r5, lr}
    5c96:	2900      	cmp	r1, #0
    5c98:	d03e      	beq.n	5d18 <_free_r+0x84>
    5c9a:	3904      	subs	r1, #4
    5c9c:	680b      	ldr	r3, [r1, #0]
    5c9e:	2b00      	cmp	r3, #0
    5ca0:	da00      	bge.n	5ca4 <_free_r+0x10>
    5ca2:	18c9      	adds	r1, r1, r3
    5ca4:	4a1d      	ldr	r2, [pc, #116]	; (5d1c <_free_r+0x88>)
    5ca6:	6813      	ldr	r3, [r2, #0]
    5ca8:	0014      	movs	r4, r2
    5caa:	2b00      	cmp	r3, #0
    5cac:	d102      	bne.n	5cb4 <_free_r+0x20>
    5cae:	604b      	str	r3, [r1, #4]
    5cb0:	6011      	str	r1, [r2, #0]
    5cb2:	e031      	b.n	5d18 <_free_r+0x84>
    5cb4:	428b      	cmp	r3, r1
    5cb6:	d90d      	bls.n	5cd4 <_free_r+0x40>
    5cb8:	680a      	ldr	r2, [r1, #0]
    5cba:	1888      	adds	r0, r1, r2
    5cbc:	4283      	cmp	r3, r0
    5cbe:	d103      	bne.n	5cc8 <_free_r+0x34>
    5cc0:	6818      	ldr	r0, [r3, #0]
    5cc2:	685b      	ldr	r3, [r3, #4]
    5cc4:	1882      	adds	r2, r0, r2
    5cc6:	600a      	str	r2, [r1, #0]
    5cc8:	604b      	str	r3, [r1, #4]
    5cca:	6021      	str	r1, [r4, #0]
    5ccc:	e024      	b.n	5d18 <_free_r+0x84>
    5cce:	428a      	cmp	r2, r1
    5cd0:	d803      	bhi.n	5cda <_free_r+0x46>
    5cd2:	0013      	movs	r3, r2
    5cd4:	685a      	ldr	r2, [r3, #4]
    5cd6:	2a00      	cmp	r2, #0
    5cd8:	d1f9      	bne.n	5cce <_free_r+0x3a>
    5cda:	681d      	ldr	r5, [r3, #0]
    5cdc:	195c      	adds	r4, r3, r5
    5cde:	428c      	cmp	r4, r1
    5ce0:	d10b      	bne.n	5cfa <_free_r+0x66>
    5ce2:	6809      	ldr	r1, [r1, #0]
    5ce4:	1869      	adds	r1, r5, r1
    5ce6:	1858      	adds	r0, r3, r1
    5ce8:	6019      	str	r1, [r3, #0]
    5cea:	4282      	cmp	r2, r0
    5cec:	d114      	bne.n	5d18 <_free_r+0x84>
    5cee:	6810      	ldr	r0, [r2, #0]
    5cf0:	6852      	ldr	r2, [r2, #4]
    5cf2:	1841      	adds	r1, r0, r1
    5cf4:	6019      	str	r1, [r3, #0]
    5cf6:	605a      	str	r2, [r3, #4]
    5cf8:	e00e      	b.n	5d18 <_free_r+0x84>
    5cfa:	428c      	cmp	r4, r1
    5cfc:	d902      	bls.n	5d04 <_free_r+0x70>
    5cfe:	230c      	movs	r3, #12
    5d00:	6003      	str	r3, [r0, #0]
    5d02:	e009      	b.n	5d18 <_free_r+0x84>
    5d04:	6808      	ldr	r0, [r1, #0]
    5d06:	180c      	adds	r4, r1, r0
    5d08:	42a2      	cmp	r2, r4
    5d0a:	d103      	bne.n	5d14 <_free_r+0x80>
    5d0c:	6814      	ldr	r4, [r2, #0]
    5d0e:	6852      	ldr	r2, [r2, #4]
    5d10:	1820      	adds	r0, r4, r0
    5d12:	6008      	str	r0, [r1, #0]
    5d14:	604a      	str	r2, [r1, #4]
    5d16:	6059      	str	r1, [r3, #4]
    5d18:	bd30      	pop	{r4, r5, pc}
    5d1a:	46c0      	nop			; (mov r8, r8)
    5d1c:	20000104 	.word	0x20000104

00005d20 <_malloc_r>:
    5d20:	2303      	movs	r3, #3
    5d22:	b570      	push	{r4, r5, r6, lr}
    5d24:	1ccd      	adds	r5, r1, #3
    5d26:	439d      	bics	r5, r3
    5d28:	3508      	adds	r5, #8
    5d2a:	0006      	movs	r6, r0
    5d2c:	2d0c      	cmp	r5, #12
    5d2e:	d201      	bcs.n	5d34 <_malloc_r+0x14>
    5d30:	250c      	movs	r5, #12
    5d32:	e005      	b.n	5d40 <_malloc_r+0x20>
    5d34:	2d00      	cmp	r5, #0
    5d36:	da03      	bge.n	5d40 <_malloc_r+0x20>
    5d38:	230c      	movs	r3, #12
    5d3a:	2000      	movs	r0, #0
    5d3c:	6033      	str	r3, [r6, #0]
    5d3e:	e040      	b.n	5dc2 <_malloc_r+0xa2>
    5d40:	42a9      	cmp	r1, r5
    5d42:	d8f9      	bhi.n	5d38 <_malloc_r+0x18>
    5d44:	4b1f      	ldr	r3, [pc, #124]	; (5dc4 <_malloc_r+0xa4>)
    5d46:	681c      	ldr	r4, [r3, #0]
    5d48:	001a      	movs	r2, r3
    5d4a:	0021      	movs	r1, r4
    5d4c:	2900      	cmp	r1, #0
    5d4e:	d013      	beq.n	5d78 <_malloc_r+0x58>
    5d50:	680b      	ldr	r3, [r1, #0]
    5d52:	1b5b      	subs	r3, r3, r5
    5d54:	d40d      	bmi.n	5d72 <_malloc_r+0x52>
    5d56:	2b0b      	cmp	r3, #11
    5d58:	d902      	bls.n	5d60 <_malloc_r+0x40>
    5d5a:	600b      	str	r3, [r1, #0]
    5d5c:	18cc      	adds	r4, r1, r3
    5d5e:	e01e      	b.n	5d9e <_malloc_r+0x7e>
    5d60:	428c      	cmp	r4, r1
    5d62:	d102      	bne.n	5d6a <_malloc_r+0x4a>
    5d64:	6863      	ldr	r3, [r4, #4]
    5d66:	6013      	str	r3, [r2, #0]
    5d68:	e01a      	b.n	5da0 <_malloc_r+0x80>
    5d6a:	684b      	ldr	r3, [r1, #4]
    5d6c:	6063      	str	r3, [r4, #4]
    5d6e:	000c      	movs	r4, r1
    5d70:	e016      	b.n	5da0 <_malloc_r+0x80>
    5d72:	000c      	movs	r4, r1
    5d74:	6849      	ldr	r1, [r1, #4]
    5d76:	e7e9      	b.n	5d4c <_malloc_r+0x2c>
    5d78:	4c13      	ldr	r4, [pc, #76]	; (5dc8 <_malloc_r+0xa8>)
    5d7a:	6823      	ldr	r3, [r4, #0]
    5d7c:	2b00      	cmp	r3, #0
    5d7e:	d103      	bne.n	5d88 <_malloc_r+0x68>
    5d80:	0030      	movs	r0, r6
    5d82:	f000 f823 	bl	5dcc <_sbrk_r>
    5d86:	6020      	str	r0, [r4, #0]
    5d88:	0029      	movs	r1, r5
    5d8a:	0030      	movs	r0, r6
    5d8c:	f000 f81e 	bl	5dcc <_sbrk_r>
    5d90:	1c43      	adds	r3, r0, #1
    5d92:	d0d1      	beq.n	5d38 <_malloc_r+0x18>
    5d94:	2303      	movs	r3, #3
    5d96:	1cc4      	adds	r4, r0, #3
    5d98:	439c      	bics	r4, r3
    5d9a:	42a0      	cmp	r0, r4
    5d9c:	d10a      	bne.n	5db4 <_malloc_r+0x94>
    5d9e:	6025      	str	r5, [r4, #0]
    5da0:	0020      	movs	r0, r4
    5da2:	2207      	movs	r2, #7
    5da4:	300b      	adds	r0, #11
    5da6:	1d23      	adds	r3, r4, #4
    5da8:	4390      	bics	r0, r2
    5daa:	1ac3      	subs	r3, r0, r3
    5dac:	d009      	beq.n	5dc2 <_malloc_r+0xa2>
    5dae:	425a      	negs	r2, r3
    5db0:	50e2      	str	r2, [r4, r3]
    5db2:	e006      	b.n	5dc2 <_malloc_r+0xa2>
    5db4:	1a21      	subs	r1, r4, r0
    5db6:	0030      	movs	r0, r6
    5db8:	f000 f808 	bl	5dcc <_sbrk_r>
    5dbc:	1c43      	adds	r3, r0, #1
    5dbe:	d1ee      	bne.n	5d9e <_malloc_r+0x7e>
    5dc0:	e7ba      	b.n	5d38 <_malloc_r+0x18>
    5dc2:	bd70      	pop	{r4, r5, r6, pc}
    5dc4:	20000104 	.word	0x20000104
    5dc8:	20000100 	.word	0x20000100

00005dcc <_sbrk_r>:
    5dcc:	2300      	movs	r3, #0
    5dce:	b570      	push	{r4, r5, r6, lr}
    5dd0:	4c06      	ldr	r4, [pc, #24]	; (5dec <_sbrk_r+0x20>)
    5dd2:	0005      	movs	r5, r0
    5dd4:	0008      	movs	r0, r1
    5dd6:	6023      	str	r3, [r4, #0]
    5dd8:	f7ff fb0e 	bl	53f8 <_sbrk>
    5ddc:	1c43      	adds	r3, r0, #1
    5dde:	d103      	bne.n	5de8 <_sbrk_r+0x1c>
    5de0:	6823      	ldr	r3, [r4, #0]
    5de2:	2b00      	cmp	r3, #0
    5de4:	d000      	beq.n	5de8 <_sbrk_r+0x1c>
    5de6:	602b      	str	r3, [r5, #0]
    5de8:	bd70      	pop	{r4, r5, r6, pc}
    5dea:	46c0      	nop			; (mov r8, r8)
    5dec:	2000012c 	.word	0x2000012c

00005df0 <__sread>:
    5df0:	b570      	push	{r4, r5, r6, lr}
    5df2:	000c      	movs	r4, r1
    5df4:	250e      	movs	r5, #14
    5df6:	5f49      	ldrsh	r1, [r1, r5]
    5df8:	f000 f892 	bl	5f20 <_read_r>
    5dfc:	2800      	cmp	r0, #0
    5dfe:	db03      	blt.n	5e08 <__sread+0x18>
    5e00:	6d63      	ldr	r3, [r4, #84]	; 0x54
    5e02:	181b      	adds	r3, r3, r0
    5e04:	6563      	str	r3, [r4, #84]	; 0x54
    5e06:	e003      	b.n	5e10 <__sread+0x20>
    5e08:	89a2      	ldrh	r2, [r4, #12]
    5e0a:	4b02      	ldr	r3, [pc, #8]	; (5e14 <__sread+0x24>)
    5e0c:	4013      	ands	r3, r2
    5e0e:	81a3      	strh	r3, [r4, #12]
    5e10:	bd70      	pop	{r4, r5, r6, pc}
    5e12:	46c0      	nop			; (mov r8, r8)
    5e14:	ffffefff 	.word	0xffffefff

00005e18 <__swrite>:
    5e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e1a:	001f      	movs	r7, r3
    5e1c:	898b      	ldrh	r3, [r1, #12]
    5e1e:	0005      	movs	r5, r0
    5e20:	000c      	movs	r4, r1
    5e22:	0016      	movs	r6, r2
    5e24:	05db      	lsls	r3, r3, #23
    5e26:	d505      	bpl.n	5e34 <__swrite+0x1c>
    5e28:	230e      	movs	r3, #14
    5e2a:	5ec9      	ldrsh	r1, [r1, r3]
    5e2c:	2200      	movs	r2, #0
    5e2e:	2302      	movs	r3, #2
    5e30:	f000 f862 	bl	5ef8 <_lseek_r>
    5e34:	89a2      	ldrh	r2, [r4, #12]
    5e36:	4b05      	ldr	r3, [pc, #20]	; (5e4c <__swrite+0x34>)
    5e38:	0028      	movs	r0, r5
    5e3a:	4013      	ands	r3, r2
    5e3c:	81a3      	strh	r3, [r4, #12]
    5e3e:	0032      	movs	r2, r6
    5e40:	230e      	movs	r3, #14
    5e42:	5ee1      	ldrsh	r1, [r4, r3]
    5e44:	003b      	movs	r3, r7
    5e46:	f000 f81f 	bl	5e88 <_write_r>
    5e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e4c:	ffffefff 	.word	0xffffefff

00005e50 <__sseek>:
    5e50:	b570      	push	{r4, r5, r6, lr}
    5e52:	000c      	movs	r4, r1
    5e54:	250e      	movs	r5, #14
    5e56:	5f49      	ldrsh	r1, [r1, r5]
    5e58:	f000 f84e 	bl	5ef8 <_lseek_r>
    5e5c:	89a3      	ldrh	r3, [r4, #12]
    5e5e:	1c42      	adds	r2, r0, #1
    5e60:	d103      	bne.n	5e6a <__sseek+0x1a>
    5e62:	4a05      	ldr	r2, [pc, #20]	; (5e78 <__sseek+0x28>)
    5e64:	4013      	ands	r3, r2
    5e66:	81a3      	strh	r3, [r4, #12]
    5e68:	e004      	b.n	5e74 <__sseek+0x24>
    5e6a:	2280      	movs	r2, #128	; 0x80
    5e6c:	0152      	lsls	r2, r2, #5
    5e6e:	4313      	orrs	r3, r2
    5e70:	81a3      	strh	r3, [r4, #12]
    5e72:	6560      	str	r0, [r4, #84]	; 0x54
    5e74:	bd70      	pop	{r4, r5, r6, pc}
    5e76:	46c0      	nop			; (mov r8, r8)
    5e78:	ffffefff 	.word	0xffffefff

00005e7c <__sclose>:
    5e7c:	b510      	push	{r4, lr}
    5e7e:	230e      	movs	r3, #14
    5e80:	5ec9      	ldrsh	r1, [r1, r3]
    5e82:	f000 f815 	bl	5eb0 <_close_r>
    5e86:	bd10      	pop	{r4, pc}

00005e88 <_write_r>:
    5e88:	b570      	push	{r4, r5, r6, lr}
    5e8a:	0005      	movs	r5, r0
    5e8c:	0008      	movs	r0, r1
    5e8e:	0011      	movs	r1, r2
    5e90:	2200      	movs	r2, #0
    5e92:	4c06      	ldr	r4, [pc, #24]	; (5eac <_write_r+0x24>)
    5e94:	6022      	str	r2, [r4, #0]
    5e96:	001a      	movs	r2, r3
    5e98:	f7ff fa86 	bl	53a8 <_write>
    5e9c:	1c43      	adds	r3, r0, #1
    5e9e:	d103      	bne.n	5ea8 <_write_r+0x20>
    5ea0:	6823      	ldr	r3, [r4, #0]
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d000      	beq.n	5ea8 <_write_r+0x20>
    5ea6:	602b      	str	r3, [r5, #0]
    5ea8:	bd70      	pop	{r4, r5, r6, pc}
    5eaa:	46c0      	nop			; (mov r8, r8)
    5eac:	2000012c 	.word	0x2000012c

00005eb0 <_close_r>:
    5eb0:	2300      	movs	r3, #0
    5eb2:	b570      	push	{r4, r5, r6, lr}
    5eb4:	4c06      	ldr	r4, [pc, #24]	; (5ed0 <_close_r+0x20>)
    5eb6:	0005      	movs	r5, r0
    5eb8:	0008      	movs	r0, r1
    5eba:	6023      	str	r3, [r4, #0]
    5ebc:	f7ff faae 	bl	541c <_close>
    5ec0:	1c43      	adds	r3, r0, #1
    5ec2:	d103      	bne.n	5ecc <_close_r+0x1c>
    5ec4:	6823      	ldr	r3, [r4, #0]
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	d000      	beq.n	5ecc <_close_r+0x1c>
    5eca:	602b      	str	r3, [r5, #0]
    5ecc:	bd70      	pop	{r4, r5, r6, pc}
    5ece:	46c0      	nop			; (mov r8, r8)
    5ed0:	2000012c 	.word	0x2000012c

00005ed4 <_fstat_r>:
    5ed4:	2300      	movs	r3, #0
    5ed6:	b570      	push	{r4, r5, r6, lr}
    5ed8:	4c06      	ldr	r4, [pc, #24]	; (5ef4 <_fstat_r+0x20>)
    5eda:	0005      	movs	r5, r0
    5edc:	0008      	movs	r0, r1
    5ede:	0011      	movs	r1, r2
    5ee0:	6023      	str	r3, [r4, #0]
    5ee2:	f7ff fa9f 	bl	5424 <_fstat>
    5ee6:	1c43      	adds	r3, r0, #1
    5ee8:	d103      	bne.n	5ef2 <_fstat_r+0x1e>
    5eea:	6823      	ldr	r3, [r4, #0]
    5eec:	2b00      	cmp	r3, #0
    5eee:	d000      	beq.n	5ef2 <_fstat_r+0x1e>
    5ef0:	602b      	str	r3, [r5, #0]
    5ef2:	bd70      	pop	{r4, r5, r6, pc}
    5ef4:	2000012c 	.word	0x2000012c

00005ef8 <_lseek_r>:
    5ef8:	b570      	push	{r4, r5, r6, lr}
    5efa:	0005      	movs	r5, r0
    5efc:	0008      	movs	r0, r1
    5efe:	0011      	movs	r1, r2
    5f00:	2200      	movs	r2, #0
    5f02:	4c06      	ldr	r4, [pc, #24]	; (5f1c <_lseek_r+0x24>)
    5f04:	6022      	str	r2, [r4, #0]
    5f06:	001a      	movs	r2, r3
    5f08:	f7ff fa92 	bl	5430 <_lseek>
    5f0c:	1c43      	adds	r3, r0, #1
    5f0e:	d103      	bne.n	5f18 <_lseek_r+0x20>
    5f10:	6823      	ldr	r3, [r4, #0]
    5f12:	2b00      	cmp	r3, #0
    5f14:	d000      	beq.n	5f18 <_lseek_r+0x20>
    5f16:	602b      	str	r3, [r5, #0]
    5f18:	bd70      	pop	{r4, r5, r6, pc}
    5f1a:	46c0      	nop			; (mov r8, r8)
    5f1c:	2000012c 	.word	0x2000012c

00005f20 <_read_r>:
    5f20:	b570      	push	{r4, r5, r6, lr}
    5f22:	0005      	movs	r5, r0
    5f24:	0008      	movs	r0, r1
    5f26:	0011      	movs	r1, r2
    5f28:	2200      	movs	r2, #0
    5f2a:	4c06      	ldr	r4, [pc, #24]	; (5f44 <_read_r+0x24>)
    5f2c:	6022      	str	r2, [r4, #0]
    5f2e:	001a      	movs	r2, r3
    5f30:	f7ff fa1a 	bl	5368 <_read>
    5f34:	1c43      	adds	r3, r0, #1
    5f36:	d103      	bne.n	5f40 <_read_r+0x20>
    5f38:	6823      	ldr	r3, [r4, #0]
    5f3a:	2b00      	cmp	r3, #0
    5f3c:	d000      	beq.n	5f40 <_read_r+0x20>
    5f3e:	602b      	str	r3, [r5, #0]
    5f40:	bd70      	pop	{r4, r5, r6, pc}
    5f42:	46c0      	nop			; (mov r8, r8)
    5f44:	2000012c 	.word	0x2000012c
    5f48:	42000800 	.word	0x42000800
    5f4c:	42000c00 	.word	0x42000c00
    5f50:	42001000 	.word	0x42001000
    5f54:	42001400 	.word	0x42001400
    5f58:	42001800 	.word	0x42001800
    5f5c:	42001c00 	.word	0x42001c00
    5f60:	0c0b0a09 	.word	0x0c0b0a09
    5f64:	00000e0d 	.word	0x00000e0d
    5f68:	00004bba 	.word	0x00004bba
    5f6c:	00004bb6 	.word	0x00004bb6
    5f70:	00004bb6 	.word	0x00004bb6
    5f74:	00004c14 	.word	0x00004c14
    5f78:	00004c14 	.word	0x00004c14
    5f7c:	00004bce 	.word	0x00004bce
    5f80:	00004bc0 	.word	0x00004bc0
    5f84:	00004bd4 	.word	0x00004bd4
    5f88:	00004c02 	.word	0x00004c02
    5f8c:	00004d48 	.word	0x00004d48
    5f90:	00004d28 	.word	0x00004d28
    5f94:	00004d28 	.word	0x00004d28
    5f98:	00004db4 	.word	0x00004db4
    5f9c:	00004d3a 	.word	0x00004d3a
    5fa0:	00004d56 	.word	0x00004d56
    5fa4:	00004d2c 	.word	0x00004d2c
    5fa8:	00004d64 	.word	0x00004d64
    5fac:	00004da4 	.word	0x00004da4
    5fb0:	00000043 	.word	0x00000043

00005fb4 <_global_impure_ptr>:
    5fb4:	2000000c                                ... 

00005fb8 <__sf_fake_stdin>:
	...

00005fd8 <__sf_fake_stdout>:
	...

00005ff8 <__sf_fake_stderr>:
	...

00006018 <_init>:
    6018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    601a:	46c0      	nop			; (mov r8, r8)
    601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    601e:	bc08      	pop	{r3}
    6020:	469e      	mov	lr, r3
    6022:	4770      	bx	lr

00006024 <__init_array_start>:
    6024:	000040dd 	.word	0x000040dd

00006028 <_fini>:
    6028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    602a:	46c0      	nop			; (mov r8, r8)
    602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    602e:	bc08      	pop	{r3}
    6030:	469e      	mov	lr, r3
    6032:	4770      	bx	lr

00006034 <__fini_array_start>:
    6034:	000040b5 	.word	0x000040b5
