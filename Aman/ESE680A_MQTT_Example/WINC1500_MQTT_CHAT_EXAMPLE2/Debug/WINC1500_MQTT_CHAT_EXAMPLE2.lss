
WINC1500_MQTT_CHAT_EXAMPLE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ecf8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000084  20000000  0000ecf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000450  20000084  0000ed7c  00020084  2**2
                  ALLOC
  3 .stack        00002004  200004d4  0000f1cc  00020084  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003d67f  00000000  00000000  00020176  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004f82  00000000  00000000  0005d7f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000659c  00000000  00000000  00062777  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001228  00000000  00000000  00068d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000010a0  00000000  00000000  00069f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000217c2  00000000  00000000  0006afdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001b11d  00000000  00000000  0008c79d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000943a7  00000000  00000000  000a78ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000047e4  00000000  00000000  0013bc64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200024d8 	.word	0x200024d8
       4:	00009e59 	.word	0x00009e59
       8:	00009f51 	.word	0x00009f51
       c:	00009f51 	.word	0x00009f51
	...
      2c:	00009f51 	.word	0x00009f51
	...
      38:	00009f51 	.word	0x00009f51
      3c:	00009f51 	.word	0x00009f51
      40:	00009f51 	.word	0x00009f51
      44:	00009f51 	.word	0x00009f51
      48:	00009f51 	.word	0x00009f51
      4c:	00009f51 	.word	0x00009f51
      50:	00005ec1 	.word	0x00005ec1
      54:	00009f51 	.word	0x00009f51
      58:	00009f51 	.word	0x00009f51
      5c:	00009f51 	.word	0x00009f51
      60:	00009f51 	.word	0x00009f51
      64:	00006a1d 	.word	0x00006a1d
      68:	00006a35 	.word	0x00006a35
      6c:	00006a4d 	.word	0x00006a4d
      70:	00006a65 	.word	0x00006a65
      74:	00006a7d 	.word	0x00006a7d
      78:	00006a95 	.word	0x00006a95
      7c:	00009da1 	.word	0x00009da1
      80:	00009db5 	.word	0x00009db5
      84:	00009dc9 	.word	0x00009dc9
      88:	00009f51 	.word	0x00009f51
      8c:	00009f51 	.word	0x00009f51
      90:	00009f51 	.word	0x00009f51
	...
      9c:	00009f51 	.word	0x00009f51
      a0:	00009f51 	.word	0x00009f51
      a4:	00009f51 	.word	0x00009f51
      a8:	00009f51 	.word	0x00009f51
      ac:	00009f51 	.word	0x00009f51
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000084 	.word	0x20000084
      d4:	00000000 	.word	0x00000000
      d8:	0000ecf8 	.word	0x0000ecf8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000088 	.word	0x20000088
     108:	0000ecf8 	.word	0x0000ecf8
     10c:	0000ecf8 	.word	0x0000ecf8
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	00008d65 	.word	0x00008d65
     190:	20000000 	.word	0x20000000
     194:	0000bf39 	.word	0x0000bf39
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b084      	sub	sp, #16
     1d4:	af00      	add	r7, sp, #0
     1d6:	0002      	movs	r2, r0
     1d8:	1dfb      	adds	r3, r7, #7
     1da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     1dc:	230f      	movs	r3, #15
     1de:	18fb      	adds	r3, r7, r3
     1e0:	1dfa      	adds	r2, r7, #7
     1e2:	7812      	ldrb	r2, [r2, #0]
     1e4:	09d2      	lsrs	r2, r2, #7
     1e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     1e8:	230e      	movs	r3, #14
     1ea:	18fb      	adds	r3, r7, r3
     1ec:	1dfa      	adds	r2, r7, #7
     1ee:	7812      	ldrb	r2, [r2, #0]
     1f0:	0952      	lsrs	r2, r2, #5
     1f2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     1f4:	4b0d      	ldr	r3, [pc, #52]	; (22c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     1f6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1f8:	230f      	movs	r3, #15
     1fa:	18fb      	adds	r3, r7, r3
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d10f      	bne.n	222 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     202:	230f      	movs	r3, #15
     204:	18fb      	adds	r3, r7, r3
     206:	781b      	ldrb	r3, [r3, #0]
     208:	009b      	lsls	r3, r3, #2
     20a:	2210      	movs	r2, #16
     20c:	4694      	mov	ip, r2
     20e:	44bc      	add	ip, r7
     210:	4463      	add	r3, ip
     212:	3b08      	subs	r3, #8
     214:	681a      	ldr	r2, [r3, #0]
     216:	230e      	movs	r3, #14
     218:	18fb      	adds	r3, r7, r3
     21a:	781b      	ldrb	r3, [r3, #0]
     21c:	01db      	lsls	r3, r3, #7
     21e:	18d3      	adds	r3, r2, r3
     220:	e000      	b.n	224 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     222:	2300      	movs	r3, #0
	}
}
     224:	0018      	movs	r0, r3
     226:	46bd      	mov	sp, r7
     228:	b004      	add	sp, #16
     22a:	bd80      	pop	{r7, pc}
     22c:	41004400 	.word	0x41004400

00000230 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     230:	b580      	push	{r7, lr}
     232:	b082      	sub	sp, #8
     234:	af00      	add	r7, sp, #0
     236:	0002      	movs	r2, r0
     238:	1dfb      	adds	r3, r7, #7
     23a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     23c:	1dfb      	adds	r3, r7, #7
     23e:	781b      	ldrb	r3, [r3, #0]
     240:	0018      	movs	r0, r3
     242:	4b03      	ldr	r3, [pc, #12]	; (250 <port_get_group_from_gpio_pin+0x20>)
     244:	4798      	blx	r3
     246:	0003      	movs	r3, r0
}
     248:	0018      	movs	r0, r3
     24a:	46bd      	mov	sp, r7
     24c:	b002      	add	sp, #8
     24e:	bd80      	pop	{r7, pc}
     250:	000001d1 	.word	0x000001d1

00000254 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     254:	b580      	push	{r7, lr}
     256:	b082      	sub	sp, #8
     258:	af00      	add	r7, sp, #0
     25a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     25c:	687b      	ldr	r3, [r7, #4]
     25e:	2200      	movs	r2, #0
     260:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     262:	687b      	ldr	r3, [r7, #4]
     264:	2201      	movs	r2, #1
     266:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     268:	687b      	ldr	r3, [r7, #4]
     26a:	2200      	movs	r2, #0
     26c:	709a      	strb	r2, [r3, #2]
}
     26e:	46c0      	nop			; (mov r8, r8)
     270:	46bd      	mov	sp, r7
     272:	b002      	add	sp, #8
     274:	bd80      	pop	{r7, pc}
     276:	46c0      	nop			; (mov r8, r8)

00000278 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     278:	b580      	push	{r7, lr}
     27a:	b084      	sub	sp, #16
     27c:	af00      	add	r7, sp, #0
     27e:	0002      	movs	r2, r0
     280:	1dfb      	adds	r3, r7, #7
     282:	701a      	strb	r2, [r3, #0]
     284:	1dbb      	adds	r3, r7, #6
     286:	1c0a      	adds	r2, r1, #0
     288:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     28a:	1dfb      	adds	r3, r7, #7
     28c:	781b      	ldrb	r3, [r3, #0]
     28e:	0018      	movs	r0, r3
     290:	4b0d      	ldr	r3, [pc, #52]	; (2c8 <port_pin_set_output_level+0x50>)
     292:	4798      	blx	r3
     294:	0003      	movs	r3, r0
     296:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     298:	1dfb      	adds	r3, r7, #7
     29a:	781b      	ldrb	r3, [r3, #0]
     29c:	221f      	movs	r2, #31
     29e:	4013      	ands	r3, r2
     2a0:	2201      	movs	r2, #1
     2a2:	409a      	lsls	r2, r3
     2a4:	0013      	movs	r3, r2
     2a6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2a8:	1dbb      	adds	r3, r7, #6
     2aa:	781b      	ldrb	r3, [r3, #0]
     2ac:	2b00      	cmp	r3, #0
     2ae:	d003      	beq.n	2b8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2b0:	68fb      	ldr	r3, [r7, #12]
     2b2:	68ba      	ldr	r2, [r7, #8]
     2b4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2b6:	e002      	b.n	2be <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2b8:	68fb      	ldr	r3, [r7, #12]
     2ba:	68ba      	ldr	r2, [r7, #8]
     2bc:	615a      	str	r2, [r3, #20]
	}
}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	46bd      	mov	sp, r7
     2c2:	b004      	add	sp, #16
     2c4:	bd80      	pop	{r7, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	00000231 	.word	0x00000231

000002cc <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     2cc:	b580      	push	{r7, lr}
     2ce:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     2d0:	4b04      	ldr	r3, [pc, #16]	; (2e4 <system_interrupt_enable_global+0x18>)
     2d2:	2201      	movs	r2, #1
     2d4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     2d6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     2da:	b662      	cpsie	i
}
     2dc:	46c0      	nop			; (mov r8, r8)
     2de:	46bd      	mov	sp, r7
     2e0:	bd80      	pop	{r7, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	2000000a 	.word	0x2000000a

000002e8 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	af00      	add	r7, sp, #0
	if (gpfIsr) {
     2ec:	4b04      	ldr	r3, [pc, #16]	; (300 <chip_isr+0x18>)
     2ee:	681b      	ldr	r3, [r3, #0]
     2f0:	2b00      	cmp	r3, #0
     2f2:	d002      	beq.n	2fa <chip_isr+0x12>
		gpfIsr();
     2f4:	4b02      	ldr	r3, [pc, #8]	; (300 <chip_isr+0x18>)
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	4798      	blx	r3
	}
}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	46bd      	mov	sp, r7
     2fe:	bd80      	pop	{r7, pc}
     300:	200000a0 	.word	0x200000a0

00000304 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     304:	b580      	push	{r7, lr}
     306:	b082      	sub	sp, #8
     308:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     30a:	1d3b      	adds	r3, r7, #4
     30c:	0018      	movs	r0, r3
     30e:	4b10      	ldr	r3, [pc, #64]	; (350 <init_chip_pins+0x4c>)
     310:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     312:	1d3b      	adds	r3, r7, #4
     314:	2201      	movs	r2, #1
     316:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     318:	1d3b      	adds	r3, r7, #4
     31a:	0019      	movs	r1, r3
     31c:	201b      	movs	r0, #27
     31e:	4b0d      	ldr	r3, [pc, #52]	; (354 <init_chip_pins+0x50>)
     320:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     322:	1d3b      	adds	r3, r7, #4
     324:	0019      	movs	r1, r3
     326:	201c      	movs	r0, #28
     328:	4b0a      	ldr	r3, [pc, #40]	; (354 <init_chip_pins+0x50>)
     32a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     32c:	1d3b      	adds	r3, r7, #4
     32e:	0019      	movs	r1, r3
     330:	2028      	movs	r0, #40	; 0x28
     332:	4b08      	ldr	r3, [pc, #32]	; (354 <init_chip_pins+0x50>)
     334:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     336:	2100      	movs	r1, #0
     338:	201c      	movs	r0, #28
     33a:	4b07      	ldr	r3, [pc, #28]	; (358 <init_chip_pins+0x54>)
     33c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     33e:	2100      	movs	r1, #0
     340:	201b      	movs	r0, #27
     342:	4b05      	ldr	r3, [pc, #20]	; (358 <init_chip_pins+0x54>)
     344:	4798      	blx	r3
}
     346:	46c0      	nop			; (mov r8, r8)
     348:	46bd      	mov	sp, r7
     34a:	b002      	add	sp, #8
     34c:	bd80      	pop	{r7, pc}
     34e:	46c0      	nop			; (mov r8, r8)
     350:	00000255 	.word	0x00000255
     354:	00006325 	.word	0x00006325
     358:	00000279 	.word	0x00000279

0000035c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     35c:	b580      	push	{r7, lr}
     35e:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     360:	4b0c      	ldr	r3, [pc, #48]	; (394 <nm_bsp_init+0x38>)
     362:	2200      	movs	r2, #0
     364:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     366:	4b0c      	ldr	r3, [pc, #48]	; (398 <nm_bsp_init+0x3c>)
     368:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     36a:	4b0c      	ldr	r3, [pc, #48]	; (39c <nm_bsp_init+0x40>)
     36c:	681b      	ldr	r3, [r3, #0]
     36e:	2201      	movs	r2, #1
     370:	4013      	ands	r3, r2
     372:	d004      	beq.n	37e <nm_bsp_init+0x22>
     374:	4b09      	ldr	r3, [pc, #36]	; (39c <nm_bsp_init+0x40>)
     376:	681b      	ldr	r3, [r3, #0]
     378:	2202      	movs	r2, #2
     37a:	4013      	ands	r3, r2
     37c:	d101      	bne.n	382 <nm_bsp_init+0x26>
	    delay_init();
     37e:	4b08      	ldr	r3, [pc, #32]	; (3a0 <nm_bsp_init+0x44>)
     380:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     382:	4b08      	ldr	r3, [pc, #32]	; (3a4 <nm_bsp_init+0x48>)
     384:	4798      	blx	r3

	system_interrupt_enable_global();
     386:	4b08      	ldr	r3, [pc, #32]	; (3a8 <nm_bsp_init+0x4c>)
     388:	4798      	blx	r3

	return M2M_SUCCESS;
     38a:	2300      	movs	r3, #0
}
     38c:	0018      	movs	r0, r3
     38e:	46bd      	mov	sp, r7
     390:	bd80      	pop	{r7, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	200000a0 	.word	0x200000a0
     398:	00000305 	.word	0x00000305
     39c:	e000e010 	.word	0xe000e010
     3a0:	00000149 	.word	0x00000149
     3a4:	000003ad 	.word	0x000003ad
     3a8:	000002cd 	.word	0x000002cd

000003ac <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     3ac:	b580      	push	{r7, lr}
     3ae:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     3b0:	2100      	movs	r1, #0
     3b2:	201c      	movs	r0, #28
     3b4:	4b0c      	ldr	r3, [pc, #48]	; (3e8 <nm_bsp_reset+0x3c>)
     3b6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     3b8:	2100      	movs	r1, #0
     3ba:	201b      	movs	r0, #27
     3bc:	4b0a      	ldr	r3, [pc, #40]	; (3e8 <nm_bsp_reset+0x3c>)
     3be:	4798      	blx	r3
	nm_bsp_sleep(100);
     3c0:	2064      	movs	r0, #100	; 0x64
     3c2:	4b0a      	ldr	r3, [pc, #40]	; (3ec <nm_bsp_reset+0x40>)
     3c4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     3c6:	2101      	movs	r1, #1
     3c8:	201c      	movs	r0, #28
     3ca:	4b07      	ldr	r3, [pc, #28]	; (3e8 <nm_bsp_reset+0x3c>)
     3cc:	4798      	blx	r3
	nm_bsp_sleep(100);
     3ce:	2064      	movs	r0, #100	; 0x64
     3d0:	4b06      	ldr	r3, [pc, #24]	; (3ec <nm_bsp_reset+0x40>)
     3d2:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     3d4:	2101      	movs	r1, #1
     3d6:	201b      	movs	r0, #27
     3d8:	4b03      	ldr	r3, [pc, #12]	; (3e8 <nm_bsp_reset+0x3c>)
     3da:	4798      	blx	r3
	nm_bsp_sleep(100);
     3dc:	2064      	movs	r0, #100	; 0x64
     3de:	4b03      	ldr	r3, [pc, #12]	; (3ec <nm_bsp_reset+0x40>)
     3e0:	4798      	blx	r3
}
     3e2:	46c0      	nop			; (mov r8, r8)
     3e4:	46bd      	mov	sp, r7
     3e6:	bd80      	pop	{r7, pc}
     3e8:	00000279 	.word	0x00000279
     3ec:	000003f1 	.word	0x000003f1

000003f0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     3f0:	b580      	push	{r7, lr}
     3f2:	b082      	sub	sp, #8
     3f4:	af00      	add	r7, sp, #0
     3f6:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     3f8:	e002      	b.n	400 <nm_bsp_sleep+0x10>
		delay_ms(1);
     3fa:	2001      	movs	r0, #1
     3fc:	4b05      	ldr	r3, [pc, #20]	; (414 <nm_bsp_sleep+0x24>)
     3fe:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
     400:	687b      	ldr	r3, [r7, #4]
     402:	1e5a      	subs	r2, r3, #1
     404:	607a      	str	r2, [r7, #4]
     406:	2b00      	cmp	r3, #0
     408:	d1f7      	bne.n	3fa <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	46bd      	mov	sp, r7
     40e:	b002      	add	sp, #8
     410:	bd80      	pop	{r7, pc}
     412:	46c0      	nop			; (mov r8, r8)
     414:	000001a1 	.word	0x000001a1

00000418 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     418:	b580      	push	{r7, lr}
     41a:	b086      	sub	sp, #24
     41c:	af00      	add	r7, sp, #0
     41e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     420:	4b15      	ldr	r3, [pc, #84]	; (478 <nm_bsp_register_isr+0x60>)
     422:	687a      	ldr	r2, [r7, #4]
     424:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     426:	230c      	movs	r3, #12
     428:	18fb      	adds	r3, r7, r3
     42a:	0018      	movs	r0, r3
     42c:	4b13      	ldr	r3, [pc, #76]	; (47c <nm_bsp_register_isr+0x64>)
     42e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     430:	230c      	movs	r3, #12
     432:	18fb      	adds	r3, r7, r3
     434:	2229      	movs	r2, #41	; 0x29
     436:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     438:	230c      	movs	r3, #12
     43a:	18fb      	adds	r3, r7, r3
     43c:	2200      	movs	r2, #0
     43e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     440:	230c      	movs	r3, #12
     442:	18fb      	adds	r3, r7, r3
     444:	2201      	movs	r2, #1
     446:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     448:	230c      	movs	r3, #12
     44a:	18fb      	adds	r3, r7, r3
     44c:	2202      	movs	r2, #2
     44e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     450:	230c      	movs	r3, #12
     452:	18fb      	adds	r3, r7, r3
     454:	0019      	movs	r1, r3
     456:	2009      	movs	r0, #9
     458:	4b09      	ldr	r3, [pc, #36]	; (480 <nm_bsp_register_isr+0x68>)
     45a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     45c:	4b09      	ldr	r3, [pc, #36]	; (484 <nm_bsp_register_isr+0x6c>)
     45e:	2200      	movs	r2, #0
     460:	2109      	movs	r1, #9
     462:	0018      	movs	r0, r3
     464:	4b08      	ldr	r3, [pc, #32]	; (488 <nm_bsp_register_isr+0x70>)
     466:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     468:	2100      	movs	r1, #0
     46a:	2009      	movs	r0, #9
     46c:	4b07      	ldr	r3, [pc, #28]	; (48c <nm_bsp_register_isr+0x74>)
     46e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     470:	46c0      	nop			; (mov r8, r8)
     472:	46bd      	mov	sp, r7
     474:	b006      	add	sp, #24
     476:	bd80      	pop	{r7, pc}
     478:	200000a0 	.word	0x200000a0
     47c:	000061cd 	.word	0x000061cd
     480:	00006201 	.word	0x00006201
     484:	000002e9 	.word	0x000002e9
     488:	00005dcd 	.word	0x00005dcd
     48c:	00005e31 	.word	0x00005e31

00000490 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     490:	b580      	push	{r7, lr}
     492:	b082      	sub	sp, #8
     494:	af00      	add	r7, sp, #0
     496:	0002      	movs	r2, r0
     498:	1dfb      	adds	r3, r7, #7
     49a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     49c:	1dfb      	adds	r3, r7, #7
     49e:	781b      	ldrb	r3, [r3, #0]
     4a0:	2b00      	cmp	r3, #0
     4a2:	d004      	beq.n	4ae <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     4a4:	2100      	movs	r1, #0
     4a6:	2009      	movs	r0, #9
     4a8:	4b05      	ldr	r3, [pc, #20]	; (4c0 <nm_bsp_interrupt_ctrl+0x30>)
     4aa:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     4ac:	e003      	b.n	4b6 <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     4ae:	2100      	movs	r1, #0
     4b0:	2009      	movs	r0, #9
     4b2:	4b04      	ldr	r3, [pc, #16]	; (4c4 <nm_bsp_interrupt_ctrl+0x34>)
     4b4:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	46bd      	mov	sp, r7
     4ba:	b002      	add	sp, #8
     4bc:	bd80      	pop	{r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	00005e31 	.word	0x00005e31
     4c4:	00005e79 	.word	0x00005e79

000004c8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     4c8:	b580      	push	{r7, lr}
     4ca:	b084      	sub	sp, #16
     4cc:	af00      	add	r7, sp, #0
     4ce:	0002      	movs	r2, r0
     4d0:	1dfb      	adds	r3, r7, #7
     4d2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     4d4:	230f      	movs	r3, #15
     4d6:	18fb      	adds	r3, r7, r3
     4d8:	1dfa      	adds	r2, r7, #7
     4da:	7812      	ldrb	r2, [r2, #0]
     4dc:	09d2      	lsrs	r2, r2, #7
     4de:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     4e0:	230e      	movs	r3, #14
     4e2:	18fb      	adds	r3, r7, r3
     4e4:	1dfa      	adds	r2, r7, #7
     4e6:	7812      	ldrb	r2, [r2, #0]
     4e8:	0952      	lsrs	r2, r2, #5
     4ea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     4ec:	4b0d      	ldr	r3, [pc, #52]	; (524 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     4ee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     4f0:	230f      	movs	r3, #15
     4f2:	18fb      	adds	r3, r7, r3
     4f4:	781b      	ldrb	r3, [r3, #0]
     4f6:	2b00      	cmp	r3, #0
     4f8:	d10f      	bne.n	51a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     4fa:	230f      	movs	r3, #15
     4fc:	18fb      	adds	r3, r7, r3
     4fe:	781b      	ldrb	r3, [r3, #0]
     500:	009b      	lsls	r3, r3, #2
     502:	2210      	movs	r2, #16
     504:	4694      	mov	ip, r2
     506:	44bc      	add	ip, r7
     508:	4463      	add	r3, ip
     50a:	3b08      	subs	r3, #8
     50c:	681a      	ldr	r2, [r3, #0]
     50e:	230e      	movs	r3, #14
     510:	18fb      	adds	r3, r7, r3
     512:	781b      	ldrb	r3, [r3, #0]
     514:	01db      	lsls	r3, r3, #7
     516:	18d3      	adds	r3, r2, r3
     518:	e000      	b.n	51c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     51a:	2300      	movs	r3, #0
	}
}
     51c:	0018      	movs	r0, r3
     51e:	46bd      	mov	sp, r7
     520:	b004      	add	sp, #16
     522:	bd80      	pop	{r7, pc}
     524:	41004400 	.word	0x41004400

00000528 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     528:	b580      	push	{r7, lr}
     52a:	b082      	sub	sp, #8
     52c:	af00      	add	r7, sp, #0
     52e:	0002      	movs	r2, r0
     530:	1dfb      	adds	r3, r7, #7
     532:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     534:	1dfb      	adds	r3, r7, #7
     536:	781b      	ldrb	r3, [r3, #0]
     538:	0018      	movs	r0, r3
     53a:	4b03      	ldr	r3, [pc, #12]	; (548 <port_get_group_from_gpio_pin+0x20>)
     53c:	4798      	blx	r3
     53e:	0003      	movs	r3, r0
}
     540:	0018      	movs	r0, r3
     542:	46bd      	mov	sp, r7
     544:	b002      	add	sp, #8
     546:	bd80      	pop	{r7, pc}
     548:	000004c9 	.word	0x000004c9

0000054c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     54c:	b580      	push	{r7, lr}
     54e:	b082      	sub	sp, #8
     550:	af00      	add	r7, sp, #0
     552:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     554:	687b      	ldr	r3, [r7, #4]
     556:	2200      	movs	r2, #0
     558:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	2201      	movs	r2, #1
     55e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     560:	687b      	ldr	r3, [r7, #4]
     562:	2200      	movs	r2, #0
     564:	709a      	strb	r2, [r3, #2]
}
     566:	46c0      	nop			; (mov r8, r8)
     568:	46bd      	mov	sp, r7
     56a:	b002      	add	sp, #8
     56c:	bd80      	pop	{r7, pc}
     56e:	46c0      	nop			; (mov r8, r8)

00000570 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     570:	b580      	push	{r7, lr}
     572:	b084      	sub	sp, #16
     574:	af00      	add	r7, sp, #0
     576:	0002      	movs	r2, r0
     578:	1dfb      	adds	r3, r7, #7
     57a:	701a      	strb	r2, [r3, #0]
     57c:	1dbb      	adds	r3, r7, #6
     57e:	1c0a      	adds	r2, r1, #0
     580:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     582:	1dfb      	adds	r3, r7, #7
     584:	781b      	ldrb	r3, [r3, #0]
     586:	0018      	movs	r0, r3
     588:	4b0d      	ldr	r3, [pc, #52]	; (5c0 <port_pin_set_output_level+0x50>)
     58a:	4798      	blx	r3
     58c:	0003      	movs	r3, r0
     58e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     590:	1dfb      	adds	r3, r7, #7
     592:	781b      	ldrb	r3, [r3, #0]
     594:	221f      	movs	r2, #31
     596:	4013      	ands	r3, r2
     598:	2201      	movs	r2, #1
     59a:	409a      	lsls	r2, r3
     59c:	0013      	movs	r3, r2
     59e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     5a0:	1dbb      	adds	r3, r7, #6
     5a2:	781b      	ldrb	r3, [r3, #0]
     5a4:	2b00      	cmp	r3, #0
     5a6:	d003      	beq.n	5b0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     5a8:	68fb      	ldr	r3, [r7, #12]
     5aa:	68ba      	ldr	r2, [r7, #8]
     5ac:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     5ae:	e002      	b.n	5b6 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     5b0:	68fb      	ldr	r3, [r7, #12]
     5b2:	68ba      	ldr	r2, [r7, #8]
     5b4:	615a      	str	r2, [r3, #20]
	}
}
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	46bd      	mov	sp, r7
     5ba:	b004      	add	sp, #16
     5bc:	bd80      	pop	{r7, pc}
     5be:	46c0      	nop			; (mov r8, r8)
     5c0:	00000529 	.word	0x00000529

000005c4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     5c4:	b580      	push	{r7, lr}
     5c6:	b082      	sub	sp, #8
     5c8:	af00      	add	r7, sp, #0
     5ca:	0002      	movs	r2, r0
     5cc:	1dfb      	adds	r3, r7, #7
     5ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5d0:	4b06      	ldr	r3, [pc, #24]	; (5ec <system_interrupt_enable+0x28>)
     5d2:	1dfa      	adds	r2, r7, #7
     5d4:	7812      	ldrb	r2, [r2, #0]
     5d6:	0011      	movs	r1, r2
     5d8:	221f      	movs	r2, #31
     5da:	400a      	ands	r2, r1
     5dc:	2101      	movs	r1, #1
     5de:	4091      	lsls	r1, r2
     5e0:	000a      	movs	r2, r1
     5e2:	601a      	str	r2, [r3, #0]
}
     5e4:	46c0      	nop			; (mov r8, r8)
     5e6:	46bd      	mov	sp, r7
     5e8:	b002      	add	sp, #8
     5ea:	bd80      	pop	{r7, pc}
     5ec:	e000e100 	.word	0xe000e100

000005f0 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     5f0:	b580      	push	{r7, lr}
     5f2:	b082      	sub	sp, #8
     5f4:	af00      	add	r7, sp, #0
     5f6:	0002      	movs	r2, r0
     5f8:	1dfb      	adds	r3, r7, #7
     5fa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5fc:	4a07      	ldr	r2, [pc, #28]	; (61c <system_interrupt_disable+0x2c>)
     5fe:	1dfb      	adds	r3, r7, #7
     600:	781b      	ldrb	r3, [r3, #0]
     602:	0019      	movs	r1, r3
     604:	231f      	movs	r3, #31
     606:	400b      	ands	r3, r1
     608:	2101      	movs	r1, #1
     60a:	4099      	lsls	r1, r3
     60c:	000b      	movs	r3, r1
     60e:	0019      	movs	r1, r3
     610:	2380      	movs	r3, #128	; 0x80
     612:	50d1      	str	r1, [r2, r3]
}
     614:	46c0      	nop			; (mov r8, r8)
     616:	46bd      	mov	sp, r7
     618:	b002      	add	sp, #8
     61a:	bd80      	pop	{r7, pc}
     61c:	e000e100 	.word	0xe000e100

00000620 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     620:	b580      	push	{r7, lr}
     622:	b084      	sub	sp, #16
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     628:	687b      	ldr	r3, [r7, #4]
     62a:	681b      	ldr	r3, [r3, #0]
     62c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     62e:	68fb      	ldr	r3, [r7, #12]
     630:	69db      	ldr	r3, [r3, #28]
     632:	1e5a      	subs	r2, r3, #1
     634:	4193      	sbcs	r3, r2
     636:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     638:	0018      	movs	r0, r3
     63a:	46bd      	mov	sp, r7
     63c:	b004      	add	sp, #16
     63e:	bd80      	pop	{r7, pc}

00000640 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     640:	b580      	push	{r7, lr}
     642:	b082      	sub	sp, #8
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     648:	687b      	ldr	r3, [r7, #4]
     64a:	2201      	movs	r2, #1
     64c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     64e:	687b      	ldr	r3, [r7, #4]
     650:	2200      	movs	r2, #0
     652:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     654:	687b      	ldr	r3, [r7, #4]
     656:	2200      	movs	r2, #0
     658:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	22c0      	movs	r2, #192	; 0xc0
     65e:	0392      	lsls	r2, r2, #14
     660:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     662:	687b      	ldr	r3, [r7, #4]
     664:	2200      	movs	r2, #0
     666:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     668:	687b      	ldr	r3, [r7, #4]
     66a:	2200      	movs	r2, #0
     66c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     66e:	687b      	ldr	r3, [r7, #4]
     670:	2201      	movs	r2, #1
     672:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     674:	687b      	ldr	r3, [r7, #4]
     676:	2201      	movs	r2, #1
     678:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     67a:	687b      	ldr	r3, [r7, #4]
     67c:	2200      	movs	r2, #0
     67e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     680:	687b      	ldr	r3, [r7, #4]
     682:	2224      	movs	r2, #36	; 0x24
     684:	2100      	movs	r1, #0
     686:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     688:	687b      	ldr	r3, [r7, #4]
     68a:	3318      	adds	r3, #24
     68c:	220c      	movs	r2, #12
     68e:	2100      	movs	r1, #0
     690:	0018      	movs	r0, r3
     692:	4b0a      	ldr	r3, [pc, #40]	; (6bc <spi_get_config_defaults+0x7c>)
     694:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     696:	687b      	ldr	r3, [r7, #4]
     698:	4a09      	ldr	r2, [pc, #36]	; (6c0 <spi_get_config_defaults+0x80>)
     69a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     69c:	687b      	ldr	r3, [r7, #4]
     69e:	2200      	movs	r2, #0
     6a0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	2200      	movs	r2, #0
     6a6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	2200      	movs	r2, #0
     6ac:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	2200      	movs	r2, #0
     6b2:	635a      	str	r2, [r3, #52]	; 0x34

};
     6b4:	46c0      	nop			; (mov r8, r8)
     6b6:	46bd      	mov	sp, r7
     6b8:	b002      	add	sp, #8
     6ba:	bd80      	pop	{r7, pc}
     6bc:	0000c319 	.word	0x0000c319
     6c0:	000186a0 	.word	0x000186a0

000006c4 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     6c4:	b580      	push	{r7, lr}
     6c6:	b082      	sub	sp, #8
     6c8:	af00      	add	r7, sp, #0
     6ca:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	220a      	movs	r2, #10
     6d0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	2200      	movs	r2, #0
     6d6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     6d8:	687b      	ldr	r3, [r7, #4]
     6da:	2200      	movs	r2, #0
     6dc:	709a      	strb	r2, [r3, #2]
}
     6de:	46c0      	nop			; (mov r8, r8)
     6e0:	46bd      	mov	sp, r7
     6e2:	b002      	add	sp, #8
     6e4:	bd80      	pop	{r7, pc}
     6e6:	46c0      	nop			; (mov r8, r8)

000006e8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     6e8:	b580      	push	{r7, lr}
     6ea:	b084      	sub	sp, #16
     6ec:	af00      	add	r7, sp, #0
     6ee:	6078      	str	r0, [r7, #4]
     6f0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     6f2:	683b      	ldr	r3, [r7, #0]
     6f4:	781a      	ldrb	r2, [r3, #0]
     6f6:	687b      	ldr	r3, [r7, #4]
     6f8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     6fa:	683b      	ldr	r3, [r7, #0]
     6fc:	785a      	ldrb	r2, [r3, #1]
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     702:	683b      	ldr	r3, [r7, #0]
     704:	789a      	ldrb	r2, [r3, #2]
     706:	687b      	ldr	r3, [r7, #4]
     708:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     70a:	230c      	movs	r3, #12
     70c:	18fb      	adds	r3, r7, r3
     70e:	0018      	movs	r0, r3
     710:	4b0b      	ldr	r3, [pc, #44]	; (740 <spi_attach_slave+0x58>)
     712:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     714:	230c      	movs	r3, #12
     716:	18fb      	adds	r3, r7, r3
     718:	2201      	movs	r2, #1
     71a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	781b      	ldrb	r3, [r3, #0]
     720:	220c      	movs	r2, #12
     722:	18ba      	adds	r2, r7, r2
     724:	0011      	movs	r1, r2
     726:	0018      	movs	r0, r3
     728:	4b06      	ldr	r3, [pc, #24]	; (744 <spi_attach_slave+0x5c>)
     72a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	781b      	ldrb	r3, [r3, #0]
     730:	2101      	movs	r1, #1
     732:	0018      	movs	r0, r3
     734:	4b04      	ldr	r3, [pc, #16]	; (748 <spi_attach_slave+0x60>)
     736:	4798      	blx	r3
}
     738:	46c0      	nop			; (mov r8, r8)
     73a:	46bd      	mov	sp, r7
     73c:	b004      	add	sp, #16
     73e:	bd80      	pop	{r7, pc}
     740:	0000054d 	.word	0x0000054d
     744:	00006325 	.word	0x00006325
     748:	00000571 	.word	0x00000571

0000074c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     74c:	b580      	push	{r7, lr}
     74e:	b084      	sub	sp, #16
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     754:	687b      	ldr	r3, [r7, #4]
     756:	681b      	ldr	r3, [r3, #0]
     758:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	681b      	ldr	r3, [r3, #0]
     75e:	0018      	movs	r0, r3
     760:	4b0b      	ldr	r3, [pc, #44]	; (790 <spi_enable+0x44>)
     762:	4798      	blx	r3
     764:	0003      	movs	r3, r0
     766:	0018      	movs	r0, r3
     768:	4b0a      	ldr	r3, [pc, #40]	; (794 <spi_enable+0x48>)
     76a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     76c:	46c0      	nop			; (mov r8, r8)
     76e:	687b      	ldr	r3, [r7, #4]
     770:	0018      	movs	r0, r3
     772:	4b09      	ldr	r3, [pc, #36]	; (798 <spi_enable+0x4c>)
     774:	4798      	blx	r3
     776:	1e03      	subs	r3, r0, #0
     778:	d1f9      	bne.n	76e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     77a:	68fb      	ldr	r3, [r7, #12]
     77c:	681b      	ldr	r3, [r3, #0]
     77e:	2202      	movs	r2, #2
     780:	431a      	orrs	r2, r3
     782:	68fb      	ldr	r3, [r7, #12]
     784:	601a      	str	r2, [r3, #0]
}
     786:	46c0      	nop			; (mov r8, r8)
     788:	46bd      	mov	sp, r7
     78a:	b004      	add	sp, #16
     78c:	bd80      	pop	{r7, pc}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	000069d1 	.word	0x000069d1
     794:	000005c5 	.word	0x000005c5
     798:	00000621 	.word	0x00000621

0000079c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     79c:	b580      	push	{r7, lr}
     79e:	b084      	sub	sp, #16
     7a0:	af00      	add	r7, sp, #0
     7a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	681b      	ldr	r3, [r3, #0]
     7a8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	681b      	ldr	r3, [r3, #0]
     7ae:	0018      	movs	r0, r3
     7b0:	4b0e      	ldr	r3, [pc, #56]	; (7ec <spi_disable+0x50>)
     7b2:	4798      	blx	r3
     7b4:	0003      	movs	r3, r0
     7b6:	0018      	movs	r0, r3
     7b8:	4b0d      	ldr	r3, [pc, #52]	; (7f0 <spi_disable+0x54>)
     7ba:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     7bc:	46c0      	nop			; (mov r8, r8)
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	0018      	movs	r0, r3
     7c2:	4b0c      	ldr	r3, [pc, #48]	; (7f4 <spi_disable+0x58>)
     7c4:	4798      	blx	r3
     7c6:	1e03      	subs	r3, r0, #0
     7c8:	d1f9      	bne.n	7be <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     7ca:	68fb      	ldr	r3, [r7, #12]
     7cc:	228f      	movs	r2, #143	; 0x8f
     7ce:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     7d0:	68fb      	ldr	r3, [r7, #12]
     7d2:	228f      	movs	r2, #143	; 0x8f
     7d4:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     7d6:	68fb      	ldr	r3, [r7, #12]
     7d8:	681b      	ldr	r3, [r3, #0]
     7da:	2202      	movs	r2, #2
     7dc:	4393      	bics	r3, r2
     7de:	001a      	movs	r2, r3
     7e0:	68fb      	ldr	r3, [r7, #12]
     7e2:	601a      	str	r2, [r3, #0]
}
     7e4:	46c0      	nop			; (mov r8, r8)
     7e6:	46bd      	mov	sp, r7
     7e8:	b004      	add	sp, #16
     7ea:	bd80      	pop	{r7, pc}
     7ec:	000069d1 	.word	0x000069d1
     7f0:	000005f1 	.word	0x000005f1
     7f4:	00000621 	.word	0x00000621

000007f8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b084      	sub	sp, #16
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     800:	687b      	ldr	r3, [r7, #4]
     802:	681b      	ldr	r3, [r3, #0]
     804:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     806:	68fb      	ldr	r3, [r7, #12]
     808:	7e1b      	ldrb	r3, [r3, #24]
     80a:	b2db      	uxtb	r3, r3
     80c:	001a      	movs	r2, r3
     80e:	2302      	movs	r3, #2
     810:	4013      	ands	r3, r2
     812:	1e5a      	subs	r2, r3, #1
     814:	4193      	sbcs	r3, r2
     816:	b2db      	uxtb	r3, r3
}
     818:	0018      	movs	r0, r3
     81a:	46bd      	mov	sp, r7
     81c:	b004      	add	sp, #16
     81e:	bd80      	pop	{r7, pc}

00000820 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     820:	b580      	push	{r7, lr}
     822:	b084      	sub	sp, #16
     824:	af00      	add	r7, sp, #0
     826:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     828:	687b      	ldr	r3, [r7, #4]
     82a:	681b      	ldr	r3, [r3, #0]
     82c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     82e:	68fb      	ldr	r3, [r7, #12]
     830:	7e1b      	ldrb	r3, [r3, #24]
     832:	b2db      	uxtb	r3, r3
     834:	001a      	movs	r2, r3
     836:	2301      	movs	r3, #1
     838:	4013      	ands	r3, r2
     83a:	1e5a      	subs	r2, r3, #1
     83c:	4193      	sbcs	r3, r2
     83e:	b2db      	uxtb	r3, r3
}
     840:	0018      	movs	r0, r3
     842:	46bd      	mov	sp, r7
     844:	b004      	add	sp, #16
     846:	bd80      	pop	{r7, pc}

00000848 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     848:	b580      	push	{r7, lr}
     84a:	b084      	sub	sp, #16
     84c:	af00      	add	r7, sp, #0
     84e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     850:	687b      	ldr	r3, [r7, #4]
     852:	681b      	ldr	r3, [r3, #0]
     854:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     856:	68fb      	ldr	r3, [r7, #12]
     858:	7e1b      	ldrb	r3, [r3, #24]
     85a:	b2db      	uxtb	r3, r3
     85c:	001a      	movs	r2, r3
     85e:	2304      	movs	r3, #4
     860:	4013      	ands	r3, r2
     862:	1e5a      	subs	r2, r3, #1
     864:	4193      	sbcs	r3, r2
     866:	b2db      	uxtb	r3, r3
}
     868:	0018      	movs	r0, r3
     86a:	46bd      	mov	sp, r7
     86c:	b004      	add	sp, #16
     86e:	bd80      	pop	{r7, pc}

00000870 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     870:	b580      	push	{r7, lr}
     872:	b084      	sub	sp, #16
     874:	af00      	add	r7, sp, #0
     876:	6078      	str	r0, [r7, #4]
     878:	000a      	movs	r2, r1
     87a:	1cbb      	adds	r3, r7, #2
     87c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     87e:	687b      	ldr	r3, [r7, #4]
     880:	681b      	ldr	r3, [r3, #0]
     882:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     884:	687b      	ldr	r3, [r7, #4]
     886:	0018      	movs	r0, r3
     888:	4b0a      	ldr	r3, [pc, #40]	; (8b4 <spi_write+0x44>)
     88a:	4798      	blx	r3
     88c:	0003      	movs	r3, r0
     88e:	001a      	movs	r2, r3
     890:	2301      	movs	r3, #1
     892:	4053      	eors	r3, r2
     894:	b2db      	uxtb	r3, r3
     896:	2b00      	cmp	r3, #0
     898:	d001      	beq.n	89e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     89a:	2305      	movs	r3, #5
     89c:	e006      	b.n	8ac <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     89e:	1cbb      	adds	r3, r7, #2
     8a0:	881b      	ldrh	r3, [r3, #0]
     8a2:	05db      	lsls	r3, r3, #23
     8a4:	0dda      	lsrs	r2, r3, #23
     8a6:	68fb      	ldr	r3, [r7, #12]
     8a8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     8aa:	2300      	movs	r3, #0
}
     8ac:	0018      	movs	r0, r3
     8ae:	46bd      	mov	sp, r7
     8b0:	b004      	add	sp, #16
     8b2:	bd80      	pop	{r7, pc}
     8b4:	00000821 	.word	0x00000821

000008b8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     8b8:	b580      	push	{r7, lr}
     8ba:	b084      	sub	sp, #16
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8c2:	687b      	ldr	r3, [r7, #4]
     8c4:	681b      	ldr	r3, [r3, #0]
     8c6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     8c8:	687b      	ldr	r3, [r7, #4]
     8ca:	0018      	movs	r0, r3
     8cc:	4b1b      	ldr	r3, [pc, #108]	; (93c <spi_read+0x84>)
     8ce:	4798      	blx	r3
     8d0:	0003      	movs	r3, r0
     8d2:	001a      	movs	r2, r3
     8d4:	2301      	movs	r3, #1
     8d6:	4053      	eors	r3, r2
     8d8:	b2db      	uxtb	r3, r3
     8da:	2b00      	cmp	r3, #0
     8dc:	d001      	beq.n	8e2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     8de:	2310      	movs	r3, #16
     8e0:	e027      	b.n	932 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     8e2:	230f      	movs	r3, #15
     8e4:	18fb      	adds	r3, r7, r3
     8e6:	2200      	movs	r2, #0
     8e8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8ea:	68bb      	ldr	r3, [r7, #8]
     8ec:	8b5b      	ldrh	r3, [r3, #26]
     8ee:	b29b      	uxth	r3, r3
     8f0:	001a      	movs	r2, r3
     8f2:	2304      	movs	r3, #4
     8f4:	4013      	ands	r3, r2
     8f6:	d006      	beq.n	906 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     8f8:	230f      	movs	r3, #15
     8fa:	18fb      	adds	r3, r7, r3
     8fc:	221e      	movs	r2, #30
     8fe:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     900:	68bb      	ldr	r3, [r7, #8]
     902:	2204      	movs	r2, #4
     904:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     906:	687b      	ldr	r3, [r7, #4]
     908:	799b      	ldrb	r3, [r3, #6]
     90a:	2b01      	cmp	r3, #1
     90c:	d108      	bne.n	920 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     90e:	68bb      	ldr	r3, [r7, #8]
     910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     912:	b29b      	uxth	r3, r3
     914:	05db      	lsls	r3, r3, #23
     916:	0ddb      	lsrs	r3, r3, #23
     918:	b29a      	uxth	r2, r3
     91a:	683b      	ldr	r3, [r7, #0]
     91c:	801a      	strh	r2, [r3, #0]
     91e:	e005      	b.n	92c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     920:	68bb      	ldr	r3, [r7, #8]
     922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     924:	b2db      	uxtb	r3, r3
     926:	b29a      	uxth	r2, r3
     928:	683b      	ldr	r3, [r7, #0]
     92a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     92c:	230f      	movs	r3, #15
     92e:	18fb      	adds	r3, r7, r3
     930:	781b      	ldrb	r3, [r3, #0]
}
     932:	0018      	movs	r0, r3
     934:	46bd      	mov	sp, r7
     936:	b004      	add	sp, #16
     938:	bd80      	pop	{r7, pc}
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	00000849 	.word	0x00000849

00000940 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     940:	b580      	push	{r7, lr}
     942:	b086      	sub	sp, #24
     944:	af00      	add	r7, sp, #0
     946:	60f8      	str	r0, [r7, #12]
     948:	60b9      	str	r1, [r7, #8]
     94a:	1dbb      	adds	r3, r7, #6
     94c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     94e:	2313      	movs	r3, #19
     950:	18fb      	adds	r3, r7, r3
     952:	2200      	movs	r2, #0
     954:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     956:	2317      	movs	r3, #23
     958:	18fb      	adds	r3, r7, r3
     95a:	2200      	movs	r2, #0
     95c:	701a      	strb	r2, [r3, #0]
     95e:	2316      	movs	r3, #22
     960:	18fb      	adds	r3, r7, r3
     962:	2200      	movs	r2, #0
     964:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     966:	2314      	movs	r3, #20
     968:	18fb      	adds	r3, r7, r3
     96a:	2200      	movs	r2, #0
     96c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     96e:	2310      	movs	r3, #16
     970:	18fb      	adds	r3, r7, r3
     972:	2200      	movs	r2, #0
     974:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     976:	68bb      	ldr	r3, [r7, #8]
     978:	2b00      	cmp	r3, #0
     97a:	d102      	bne.n	982 <spi_rw+0x42>
     97c:	68fb      	ldr	r3, [r7, #12]
     97e:	2b00      	cmp	r3, #0
     980:	d003      	beq.n	98a <spi_rw+0x4a>
     982:	1dbb      	adds	r3, r7, #6
     984:	881b      	ldrh	r3, [r3, #0]
     986:	2b00      	cmp	r3, #0
     988:	d102      	bne.n	990 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
     98a:	230f      	movs	r3, #15
     98c:	425b      	negs	r3, r3
     98e:	e07e      	b.n	a8e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
     990:	68fb      	ldr	r3, [r7, #12]
     992:	2b00      	cmp	r3, #0
     994:	d106      	bne.n	9a4 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
     996:	2313      	movs	r3, #19
     998:	18fb      	adds	r3, r7, r3
     99a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     99c:	2317      	movs	r3, #23
     99e:	18fb      	adds	r3, r7, r3
     9a0:	2201      	movs	r2, #1
     9a2:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
     9a4:	68bb      	ldr	r3, [r7, #8]
     9a6:	2b00      	cmp	r3, #0
     9a8:	d106      	bne.n	9b8 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
     9aa:	2313      	movs	r3, #19
     9ac:	18fb      	adds	r3, r7, r3
     9ae:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     9b0:	2316      	movs	r3, #22
     9b2:	18fb      	adds	r3, r7, r3
     9b4:	2201      	movs	r2, #1
     9b6:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
     9b8:	4937      	ldr	r1, [pc, #220]	; (a98 <spi_rw+0x158>)
     9ba:	4b38      	ldr	r3, [pc, #224]	; (a9c <spi_rw+0x15c>)
     9bc:	2201      	movs	r2, #1
     9be:	0018      	movs	r0, r3
     9c0:	4b37      	ldr	r3, [pc, #220]	; (aa0 <spi_rw+0x160>)
     9c2:	4798      	blx	r3

	while (u16Sz) {
     9c4:	e04c      	b.n	a60 <spi_rw+0x120>
		txd_data = *pu8Mosi;
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	781a      	ldrb	r2, [r3, #0]
     9ca:	2314      	movs	r3, #20
     9cc:	18fb      	adds	r3, r7, r3
     9ce:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
     9d0:	46c0      	nop			; (mov r8, r8)
     9d2:	4b32      	ldr	r3, [pc, #200]	; (a9c <spi_rw+0x15c>)
     9d4:	0018      	movs	r0, r3
     9d6:	4b33      	ldr	r3, [pc, #204]	; (aa4 <spi_rw+0x164>)
     9d8:	4798      	blx	r3
     9da:	0003      	movs	r3, r0
     9dc:	001a      	movs	r2, r3
     9de:	2301      	movs	r3, #1
     9e0:	4053      	eors	r3, r2
     9e2:	b2db      	uxtb	r3, r3
     9e4:	2b00      	cmp	r3, #0
     9e6:	d1f4      	bne.n	9d2 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
     9e8:	46c0      	nop			; (mov r8, r8)
     9ea:	2314      	movs	r3, #20
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	881a      	ldrh	r2, [r3, #0]
     9f0:	4b2a      	ldr	r3, [pc, #168]	; (a9c <spi_rw+0x15c>)
     9f2:	0011      	movs	r1, r2
     9f4:	0018      	movs	r0, r3
     9f6:	4b2c      	ldr	r3, [pc, #176]	; (aa8 <spi_rw+0x168>)
     9f8:	4798      	blx	r3
     9fa:	1e03      	subs	r3, r0, #0
     9fc:	d1f5      	bne.n	9ea <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	4b26      	ldr	r3, [pc, #152]	; (a9c <spi_rw+0x15c>)
     a02:	0018      	movs	r0, r3
     a04:	4b29      	ldr	r3, [pc, #164]	; (aac <spi_rw+0x16c>)
     a06:	4798      	blx	r3
     a08:	0003      	movs	r3, r0
     a0a:	001a      	movs	r2, r3
     a0c:	2301      	movs	r3, #1
     a0e:	4053      	eors	r3, r2
     a10:	b2db      	uxtb	r3, r3
     a12:	2b00      	cmp	r3, #0
     a14:	d1f4      	bne.n	a00 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	2310      	movs	r3, #16
     a1a:	18fa      	adds	r2, r7, r3
     a1c:	4b1f      	ldr	r3, [pc, #124]	; (a9c <spi_rw+0x15c>)
     a1e:	0011      	movs	r1, r2
     a20:	0018      	movs	r0, r3
     a22:	4b23      	ldr	r3, [pc, #140]	; (ab0 <spi_rw+0x170>)
     a24:	4798      	blx	r3
     a26:	1e03      	subs	r3, r0, #0
     a28:	d1f6      	bne.n	a18 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
     a2a:	2310      	movs	r3, #16
     a2c:	18fb      	adds	r3, r7, r3
     a2e:	881b      	ldrh	r3, [r3, #0]
     a30:	b2da      	uxtb	r2, r3
     a32:	68bb      	ldr	r3, [r7, #8]
     a34:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
     a36:	1dbb      	adds	r3, r7, #6
     a38:	881a      	ldrh	r2, [r3, #0]
     a3a:	1dbb      	adds	r3, r7, #6
     a3c:	3a01      	subs	r2, #1
     a3e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
     a40:	2316      	movs	r3, #22
     a42:	18fb      	adds	r3, r7, r3
     a44:	781b      	ldrb	r3, [r3, #0]
     a46:	2b00      	cmp	r3, #0
     a48:	d102      	bne.n	a50 <spi_rw+0x110>
			pu8Miso++;
     a4a:	68bb      	ldr	r3, [r7, #8]
     a4c:	3301      	adds	r3, #1
     a4e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
     a50:	2317      	movs	r3, #23
     a52:	18fb      	adds	r3, r7, r3
     a54:	781b      	ldrb	r3, [r3, #0]
     a56:	2b00      	cmp	r3, #0
     a58:	d102      	bne.n	a60 <spi_rw+0x120>
			pu8Mosi++;
     a5a:	68fb      	ldr	r3, [r7, #12]
     a5c:	3301      	adds	r3, #1
     a5e:	60fb      	str	r3, [r7, #12]
		u8SkipMiso = 1;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
     a60:	1dbb      	adds	r3, r7, #6
     a62:	881b      	ldrh	r3, [r3, #0]
     a64:	2b00      	cmp	r3, #0
     a66:	d1ae      	bne.n	9c6 <spi_rw+0x86>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
     a68:	46c0      	nop			; (mov r8, r8)
     a6a:	4b0c      	ldr	r3, [pc, #48]	; (a9c <spi_rw+0x15c>)
     a6c:	0018      	movs	r0, r3
     a6e:	4b11      	ldr	r3, [pc, #68]	; (ab4 <spi_rw+0x174>)
     a70:	4798      	blx	r3
     a72:	0003      	movs	r3, r0
     a74:	001a      	movs	r2, r3
     a76:	2301      	movs	r3, #1
     a78:	4053      	eors	r3, r2
     a7a:	b2db      	uxtb	r3, r3
     a7c:	2b00      	cmp	r3, #0
     a7e:	d1f4      	bne.n	a6a <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
     a80:	4905      	ldr	r1, [pc, #20]	; (a98 <spi_rw+0x158>)
     a82:	4b06      	ldr	r3, [pc, #24]	; (a9c <spi_rw+0x15c>)
     a84:	2200      	movs	r2, #0
     a86:	0018      	movs	r0, r3
     a88:	4b05      	ldr	r3, [pc, #20]	; (aa0 <spi_rw+0x160>)
     a8a:	4798      	blx	r3

	return M2M_SUCCESS;
     a8c:	2300      	movs	r3, #0
}
     a8e:	0018      	movs	r0, r3
     a90:	46bd      	mov	sp, r7
     a92:	b006      	add	sp, #24
     a94:	bd80      	pop	{r7, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	200002d0 	.word	0x200002d0
     a9c:	200002d4 	.word	0x200002d4
     aa0:	00007101 	.word	0x00007101
     aa4:	00000821 	.word	0x00000821
     aa8:	00000871 	.word	0x00000871
     aac:	00000849 	.word	0x00000849
     ab0:	000008b9 	.word	0x000008b9
     ab4:	000007f9 	.word	0x000007f9

00000ab8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     ab8:	b580      	push	{r7, lr}
     aba:	b092      	sub	sp, #72	; 0x48
     abc:	af00      	add	r7, sp, #0
     abe:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
     ac0:	2347      	movs	r3, #71	; 0x47
     ac2:	18fb      	adds	r3, r7, r3
     ac4:	2200      	movs	r2, #0
     ac6:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
     ac8:	2308      	movs	r3, #8
     aca:	18fb      	adds	r3, r7, r3
     acc:	0018      	movs	r0, r3
     ace:	4b26      	ldr	r3, [pc, #152]	; (b68 <nm_bus_init+0xb0>)
     ad0:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
     ad2:	2308      	movs	r3, #8
     ad4:	18fb      	adds	r3, r7, r3
     ad6:	220e      	movs	r2, #14
     ad8:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
     ada:	2308      	movs	r3, #8
     adc:	18fa      	adds	r2, r7, r3
     ade:	4b23      	ldr	r3, [pc, #140]	; (b6c <nm_bus_init+0xb4>)
     ae0:	0011      	movs	r1, r2
     ae2:	0018      	movs	r0, r3
     ae4:	4b22      	ldr	r3, [pc, #136]	; (b70 <nm_bus_init+0xb8>)
     ae6:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
     ae8:	230c      	movs	r3, #12
     aea:	18fb      	adds	r3, r7, r3
     aec:	0018      	movs	r0, r3
     aee:	4b21      	ldr	r3, [pc, #132]	; (b74 <nm_bus_init+0xbc>)
     af0:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     af2:	230c      	movs	r3, #12
     af4:	18fb      	adds	r3, r7, r3
     af6:	22c0      	movs	r2, #192	; 0xc0
     af8:	0392      	lsls	r2, r2, #14
     afa:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     afc:	230c      	movs	r3, #12
     afe:	18fb      	adds	r3, r7, r3
     b00:	4a1d      	ldr	r2, [pc, #116]	; (b78 <nm_bus_init+0xc0>)
     b02:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     b04:	230c      	movs	r3, #12
     b06:	18fb      	adds	r3, r7, r3
     b08:	4a1c      	ldr	r2, [pc, #112]	; (b7c <nm_bus_init+0xc4>)
     b0a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     b0c:	230c      	movs	r3, #12
     b0e:	18fb      	adds	r3, r7, r3
     b10:	2201      	movs	r2, #1
     b12:	4252      	negs	r2, r2
     b14:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     b16:	230c      	movs	r3, #12
     b18:	18fb      	adds	r3, r7, r3
     b1a:	4a19      	ldr	r2, [pc, #100]	; (b80 <nm_bus_init+0xc8>)
     b1c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
     b1e:	230c      	movs	r3, #12
     b20:	18fb      	adds	r3, r7, r3
     b22:	2200      	movs	r2, #0
     b24:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     b26:	230c      	movs	r3, #12
     b28:	18fb      	adds	r3, r7, r3
     b2a:	4a16      	ldr	r2, [pc, #88]	; (b84 <nm_bus_init+0xcc>)
     b2c:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     b2e:	230c      	movs	r3, #12
     b30:	18fa      	adds	r2, r7, r3
     b32:	4915      	ldr	r1, [pc, #84]	; (b88 <nm_bus_init+0xd0>)
     b34:	4b15      	ldr	r3, [pc, #84]	; (b8c <nm_bus_init+0xd4>)
     b36:	0018      	movs	r0, r3
     b38:	4b15      	ldr	r3, [pc, #84]	; (b90 <nm_bus_init+0xd8>)
     b3a:	4798      	blx	r3
     b3c:	1e03      	subs	r3, r0, #0
     b3e:	d002      	beq.n	b46 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
     b40:	2306      	movs	r3, #6
     b42:	425b      	negs	r3, r3
     b44:	e00c      	b.n	b60 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
     b46:	4b11      	ldr	r3, [pc, #68]	; (b8c <nm_bus_init+0xd4>)
     b48:	0018      	movs	r0, r3
     b4a:	4b12      	ldr	r3, [pc, #72]	; (b94 <nm_bus_init+0xdc>)
     b4c:	4798      	blx	r3

	nm_bsp_reset();
     b4e:	4b12      	ldr	r3, [pc, #72]	; (b98 <nm_bus_init+0xe0>)
     b50:	4798      	blx	r3
	nm_bsp_sleep(1);
     b52:	2001      	movs	r0, #1
     b54:	4b11      	ldr	r3, [pc, #68]	; (b9c <nm_bus_init+0xe4>)
     b56:	4798      	blx	r3
#endif
	return result;
     b58:	2347      	movs	r3, #71	; 0x47
     b5a:	18fb      	adds	r3, r7, r3
     b5c:	781b      	ldrb	r3, [r3, #0]
     b5e:	b25b      	sxtb	r3, r3
}
     b60:	0018      	movs	r0, r3
     b62:	46bd      	mov	sp, r7
     b64:	b012      	add	sp, #72	; 0x48
     b66:	bd80      	pop	{r7, pc}
     b68:	000006c5 	.word	0x000006c5
     b6c:	200002d0 	.word	0x200002d0
     b70:	000006e9 	.word	0x000006e9
     b74:	00000641 	.word	0x00000641
     b78:	000c0002 	.word	0x000c0002
     b7c:	000d0002 	.word	0x000d0002
     b80:	000f0002 	.word	0x000f0002
     b84:	00b71b00 	.word	0x00b71b00
     b88:	42001000 	.word	0x42001000
     b8c:	200002d4 	.word	0x200002d4
     b90:	00006f71 	.word	0x00006f71
     b94:	0000074d 	.word	0x0000074d
     b98:	000003ad 	.word	0x000003ad
     b9c:	000003f1 	.word	0x000003f1

00000ba0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     ba0:	b590      	push	{r4, r7, lr}
     ba2:	b085      	sub	sp, #20
     ba4:	af00      	add	r7, sp, #0
     ba6:	0002      	movs	r2, r0
     ba8:	6039      	str	r1, [r7, #0]
     baa:	1dfb      	adds	r3, r7, #7
     bac:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
     bae:	230f      	movs	r3, #15
     bb0:	18fb      	adds	r3, r7, r3
     bb2:	2200      	movs	r2, #0
     bb4:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
     bb6:	1dfb      	adds	r3, r7, #7
     bb8:	781b      	ldrb	r3, [r3, #0]
     bba:	2b03      	cmp	r3, #3
     bbc:	d10f      	bne.n	bde <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
     bbe:	683b      	ldr	r3, [r7, #0]
     bc0:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     bc2:	68bb      	ldr	r3, [r7, #8]
     bc4:	6818      	ldr	r0, [r3, #0]
     bc6:	68bb      	ldr	r3, [r7, #8]
     bc8:	6859      	ldr	r1, [r3, #4]
     bca:	68bb      	ldr	r3, [r7, #8]
     bcc:	891b      	ldrh	r3, [r3, #8]
     bce:	220f      	movs	r2, #15
     bd0:	18bc      	adds	r4, r7, r2
     bd2:	001a      	movs	r2, r3
     bd4:	4b10      	ldr	r3, [pc, #64]	; (c18 <nm_bus_ioctl+0x78>)
     bd6:	4798      	blx	r3
     bd8:	0003      	movs	r3, r0
     bda:	7023      	strb	r3, [r4, #0]
		}
		break;
     bdc:	e013      	b.n	c06 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
     bde:	230f      	movs	r3, #15
     be0:	18fb      	adds	r3, r7, r3
     be2:	22ff      	movs	r2, #255	; 0xff
     be4:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
     be6:	230e      	movs	r3, #14
     be8:	33ff      	adds	r3, #255	; 0xff
     bea:	001a      	movs	r2, r3
     bec:	490b      	ldr	r1, [pc, #44]	; (c1c <nm_bus_ioctl+0x7c>)
     bee:	4b0c      	ldr	r3, [pc, #48]	; (c20 <nm_bus_ioctl+0x80>)
     bf0:	0018      	movs	r0, r3
     bf2:	4b0c      	ldr	r3, [pc, #48]	; (c24 <nm_bus_ioctl+0x84>)
     bf4:	4798      	blx	r3
     bf6:	4b0c      	ldr	r3, [pc, #48]	; (c28 <nm_bus_ioctl+0x88>)
     bf8:	0018      	movs	r0, r3
     bfa:	4b0c      	ldr	r3, [pc, #48]	; (c2c <nm_bus_ioctl+0x8c>)
     bfc:	4798      	blx	r3
     bfe:	200d      	movs	r0, #13
     c00:	4b0b      	ldr	r3, [pc, #44]	; (c30 <nm_bus_ioctl+0x90>)
     c02:	4798      	blx	r3
			break;
     c04:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
     c06:	230f      	movs	r3, #15
     c08:	18fb      	adds	r3, r7, r3
     c0a:	781b      	ldrb	r3, [r3, #0]
     c0c:	b25b      	sxtb	r3, r3
}
     c0e:	0018      	movs	r0, r3
     c10:	46bd      	mov	sp, r7
     c12:	b005      	add	sp, #20
     c14:	bd90      	pop	{r4, r7, pc}
     c16:	46c0      	nop			; (mov r8, r8)
     c18:	00000941 	.word	0x00000941
     c1c:	0000d830 	.word	0x0000d830
     c20:	0000d808 	.word	0x0000d808
     c24:	0000c461 	.word	0x0000c461
     c28:	0000d81c 	.word	0x0000d81c
     c2c:	0000c581 	.word	0x0000c581
     c30:	0000c495 	.word	0x0000c495

00000c34 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     c34:	b580      	push	{r7, lr}
     c36:	b082      	sub	sp, #8
     c38:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
     c3a:	1dfb      	adds	r3, r7, #7
     c3c:	2200      	movs	r2, #0
     c3e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
     c40:	1d3b      	adds	r3, r7, #4
     c42:	0018      	movs	r0, r3
     c44:	4b13      	ldr	r3, [pc, #76]	; (c94 <nm_bus_deinit+0x60>)
     c46:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     c48:	1d3b      	adds	r3, r7, #4
     c4a:	2200      	movs	r2, #0
     c4c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     c4e:	1d3b      	adds	r3, r7, #4
     c50:	2200      	movs	r2, #0
     c52:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
     c54:	4b10      	ldr	r3, [pc, #64]	; (c98 <nm_bus_deinit+0x64>)
     c56:	0018      	movs	r0, r3
     c58:	4b10      	ldr	r3, [pc, #64]	; (c9c <nm_bus_deinit+0x68>)
     c5a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     c5c:	1d3b      	adds	r3, r7, #4
     c5e:	0019      	movs	r1, r3
     c60:	200c      	movs	r0, #12
     c62:	4b0f      	ldr	r3, [pc, #60]	; (ca0 <nm_bus_deinit+0x6c>)
     c64:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     c66:	1d3b      	adds	r3, r7, #4
     c68:	0019      	movs	r1, r3
     c6a:	200f      	movs	r0, #15
     c6c:	4b0c      	ldr	r3, [pc, #48]	; (ca0 <nm_bus_deinit+0x6c>)
     c6e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     c70:	1d3b      	adds	r3, r7, #4
     c72:	0019      	movs	r1, r3
     c74:	200d      	movs	r0, #13
     c76:	4b0a      	ldr	r3, [pc, #40]	; (ca0 <nm_bus_deinit+0x6c>)
     c78:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     c7a:	1d3b      	adds	r3, r7, #4
     c7c:	0019      	movs	r1, r3
     c7e:	200e      	movs	r0, #14
     c80:	4b07      	ldr	r3, [pc, #28]	; (ca0 <nm_bus_deinit+0x6c>)
     c82:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
     c84:	1dfb      	adds	r3, r7, #7
     c86:	781b      	ldrb	r3, [r3, #0]
     c88:	b25b      	sxtb	r3, r3
}
     c8a:	0018      	movs	r0, r3
     c8c:	46bd      	mov	sp, r7
     c8e:	b002      	add	sp, #8
     c90:	bd80      	pop	{r7, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	0000054d 	.word	0x0000054d
     c98:	200002d4 	.word	0x200002d4
     c9c:	0000079d 	.word	0x0000079d
     ca0:	00006325 	.word	0x00006325

00000ca4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
     ca4:	b580      	push	{r7, lr}
     ca6:	b084      	sub	sp, #16
     ca8:	af00      	add	r7, sp, #0
     caa:	60f8      	str	r0, [r7, #12]
     cac:	60b9      	str	r1, [r7, #8]
     cae:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
     cb0:	687b      	ldr	r3, [r7, #4]
     cb2:	2b00      	cmp	r3, #0
     cb4:	d010      	beq.n	cd8 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
     cb6:	68bb      	ldr	r3, [r7, #8]
     cb8:	781a      	ldrb	r2, [r3, #0]
     cba:	68fb      	ldr	r3, [r7, #12]
     cbc:	701a      	strb	r2, [r3, #0]
		pDst++;
     cbe:	68fb      	ldr	r3, [r7, #12]
     cc0:	3301      	adds	r3, #1
     cc2:	60fb      	str	r3, [r7, #12]
		pSrc++;
     cc4:	68bb      	ldr	r3, [r7, #8]
     cc6:	3301      	adds	r3, #1
     cc8:	60bb      	str	r3, [r7, #8]
	}while(--sz);
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	3b01      	subs	r3, #1
     cce:	607b      	str	r3, [r7, #4]
     cd0:	687b      	ldr	r3, [r7, #4]
     cd2:	2b00      	cmp	r3, #0
     cd4:	d1ef      	bne.n	cb6 <m2m_memcpy+0x12>
     cd6:	e000      	b.n	cda <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     cd8:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
     cda:	46bd      	mov	sp, r7
     cdc:	b004      	add	sp, #16
     cde:	bd80      	pop	{r7, pc}

00000ce0 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
     ce0:	b580      	push	{r7, lr}
     ce2:	b084      	sub	sp, #16
     ce4:	af00      	add	r7, sp, #0
     ce6:	60f8      	str	r0, [r7, #12]
     ce8:	607a      	str	r2, [r7, #4]
     cea:	230b      	movs	r3, #11
     cec:	18fb      	adds	r3, r7, r3
     cee:	1c0a      	adds	r2, r1, #0
     cf0:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
     cf2:	687b      	ldr	r3, [r7, #4]
     cf4:	2b00      	cmp	r3, #0
     cf6:	d00e      	beq.n	d16 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
     cf8:	68fb      	ldr	r3, [r7, #12]
     cfa:	220b      	movs	r2, #11
     cfc:	18ba      	adds	r2, r7, r2
     cfe:	7812      	ldrb	r2, [r2, #0]
     d00:	701a      	strb	r2, [r3, #0]
		pBuf++;
     d02:	68fb      	ldr	r3, [r7, #12]
     d04:	3301      	adds	r3, #1
     d06:	60fb      	str	r3, [r7, #12]
	}while(--sz);
     d08:	687b      	ldr	r3, [r7, #4]
     d0a:	3b01      	subs	r3, #1
     d0c:	607b      	str	r3, [r7, #4]
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	2b00      	cmp	r3, #0
     d12:	d1f1      	bne.n	cf8 <m2m_memset+0x18>
     d14:	e000      	b.n	d18 <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     d16:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
     d18:	46bd      	mov	sp, r7
     d1a:	b004      	add	sp, #16
     d1c:	bd80      	pop	{r7, pc}
     d1e:	46c0      	nop			; (mov r8, r8)

00000d20 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     d20:	b580      	push	{r7, lr}
     d22:	b084      	sub	sp, #16
     d24:	af00      	add	r7, sp, #0
     d26:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
     d28:	230e      	movs	r3, #14
     d2a:	18fb      	adds	r3, r7, r3
     d2c:	2200      	movs	r2, #0
     d2e:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
     d30:	e009      	b.n	d46 <m2m_strlen+0x26>
	{
		u16StrLen ++;
     d32:	230e      	movs	r3, #14
     d34:	18fb      	adds	r3, r7, r3
     d36:	881a      	ldrh	r2, [r3, #0]
     d38:	230e      	movs	r3, #14
     d3a:	18fb      	adds	r3, r7, r3
     d3c:	3201      	adds	r2, #1
     d3e:	801a      	strh	r2, [r3, #0]
		pcStr++;
     d40:	687b      	ldr	r3, [r7, #4]
     d42:	3301      	adds	r3, #1
     d44:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
     d46:	687b      	ldr	r3, [r7, #4]
     d48:	781b      	ldrb	r3, [r3, #0]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d1f1      	bne.n	d32 <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
     d4e:	230e      	movs	r3, #14
     d50:	18fb      	adds	r3, r7, r3
     d52:	881b      	ldrh	r3, [r3, #0]
}
     d54:	0018      	movs	r0, r3
     d56:	46bd      	mov	sp, r7
     d58:	b004      	add	sp, #16
     d5a:	bd80      	pop	{r7, pc}

00000d5c <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
     d5c:	b580      	push	{r7, lr}
     d5e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
     d60:	4b04      	ldr	r3, [pc, #16]	; (d74 <isr+0x18>)
     d62:	78db      	ldrb	r3, [r3, #3]
     d64:	b2db      	uxtb	r3, r3
     d66:	3301      	adds	r3, #1
     d68:	b2da      	uxtb	r2, r3
     d6a:	4b02      	ldr	r3, [pc, #8]	; (d74 <isr+0x18>)
     d6c:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	46bd      	mov	sp, r7
     d72:	bd80      	pop	{r7, pc}
     d74:	20000310 	.word	0x20000310

00000d78 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
     d78:	b590      	push	{r4, r7, lr}
     d7a:	b083      	sub	sp, #12
     d7c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
     d7e:	1dfb      	adds	r3, r7, #7
     d80:	2200      	movs	r2, #0
     d82:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
     d84:	4b14      	ldr	r3, [pc, #80]	; (dd8 <hif_set_rx_done+0x60>)
     d86:	2200      	movs	r2, #0
     d88:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     d8a:	2001      	movs	r0, #1
     d8c:	4b13      	ldr	r3, [pc, #76]	; (ddc <hif_set_rx_done+0x64>)
     d8e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     d90:	1dfc      	adds	r4, r7, #7
     d92:	003b      	movs	r3, r7
     d94:	4a12      	ldr	r2, [pc, #72]	; (de0 <hif_set_rx_done+0x68>)
     d96:	0019      	movs	r1, r3
     d98:	0010      	movs	r0, r2
     d9a:	4b12      	ldr	r3, [pc, #72]	; (de4 <hif_set_rx_done+0x6c>)
     d9c:	4798      	blx	r3
     d9e:	0003      	movs	r3, r0
     da0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
     da2:	1dfb      	adds	r3, r7, #7
     da4:	781b      	ldrb	r3, [r3, #0]
     da6:	b25b      	sxtb	r3, r3
     da8:	2b00      	cmp	r3, #0
     daa:	d10d      	bne.n	dc8 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
     dac:	683b      	ldr	r3, [r7, #0]
     dae:	2202      	movs	r2, #2
     db0:	4313      	orrs	r3, r2
     db2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     db4:	683b      	ldr	r3, [r7, #0]
     db6:	1dfc      	adds	r4, r7, #7
     db8:	4a09      	ldr	r2, [pc, #36]	; (de0 <hif_set_rx_done+0x68>)
     dba:	0019      	movs	r1, r3
     dbc:	0010      	movs	r0, r2
     dbe:	4b0a      	ldr	r3, [pc, #40]	; (de8 <hif_set_rx_done+0x70>)
     dc0:	4798      	blx	r3
     dc2:	0003      	movs	r3, r0
     dc4:	7023      	strb	r3, [r4, #0]
     dc6:	e000      	b.n	dca <hif_set_rx_done+0x52>
	gstrHifCxt.u8HifRXDone = 0;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
     dc8:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     dca:	1dfb      	adds	r3, r7, #7
     dcc:	781b      	ldrb	r3, [r3, #0]
     dce:	b25b      	sxtb	r3, r3

}
     dd0:	0018      	movs	r0, r3
     dd2:	46bd      	mov	sp, r7
     dd4:	b003      	add	sp, #12
     dd6:	bd90      	pop	{r4, r7, pc}
     dd8:	20000310 	.word	0x20000310
     ddc:	00000491 	.word	0x00000491
     de0:	00001070 	.word	0x00001070
     de4:	00002d25 	.word	0x00002d25
     de8:	00002d49 	.word	0x00002d49

00000dec <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     dec:	b580      	push	{r7, lr}
     dee:	b082      	sub	sp, #8
     df0:	af00      	add	r7, sp, #0
     df2:	603a      	str	r2, [r7, #0]
     df4:	1dfb      	adds	r3, r7, #7
     df6:	1c02      	adds	r2, r0, #0
     df8:	701a      	strb	r2, [r3, #0]
     dfa:	1d3b      	adds	r3, r7, #4
     dfc:	1c0a      	adds	r2, r1, #0
     dfe:	801a      	strh	r2, [r3, #0]


}
     e00:	46c0      	nop			; (mov r8, r8)
     e02:	46bd      	mov	sp, r7
     e04:	b002      	add	sp, #8
     e06:	bd80      	pop	{r7, pc}

00000e08 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     e08:	b590      	push	{r4, r7, lr}
     e0a:	b083      	sub	sp, #12
     e0c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     e0e:	1dfb      	adds	r3, r7, #7
     e10:	2200      	movs	r2, #0
     e12:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
     e14:	4b16      	ldr	r3, [pc, #88]	; (e70 <hif_chip_wake+0x68>)
     e16:	789b      	ldrb	r3, [r3, #2]
     e18:	b2db      	uxtb	r3, r3
     e1a:	2b00      	cmp	r3, #0
     e1c:	d003      	beq.n	e26 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     e1e:	1dfb      	adds	r3, r7, #7
     e20:	781b      	ldrb	r3, [r3, #0]
     e22:	b25b      	sxtb	r3, r3
     e24:	e01f      	b.n	e66 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     e26:	4b12      	ldr	r3, [pc, #72]	; (e70 <hif_chip_wake+0x68>)
     e28:	785b      	ldrb	r3, [r3, #1]
     e2a:	b2db      	uxtb	r3, r3
     e2c:	2b00      	cmp	r3, #0
     e2e:	d10e      	bne.n	e4e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     e30:	4b0f      	ldr	r3, [pc, #60]	; (e70 <hif_chip_wake+0x68>)
     e32:	781b      	ldrb	r3, [r3, #0]
     e34:	b2db      	uxtb	r3, r3
     e36:	2b00      	cmp	r3, #0
     e38:	d009      	beq.n	e4e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
     e3a:	1dfc      	adds	r4, r7, #7
     e3c:	4b0d      	ldr	r3, [pc, #52]	; (e74 <hif_chip_wake+0x6c>)
     e3e:	4798      	blx	r3
     e40:	0003      	movs	r3, r0
     e42:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     e44:	1dfb      	adds	r3, r7, #7
     e46:	781b      	ldrb	r3, [r3, #0]
     e48:	b25b      	sxtb	r3, r3
     e4a:	2b00      	cmp	r3, #0
     e4c:	d107      	bne.n	e5e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     e4e:	4b08      	ldr	r3, [pc, #32]	; (e70 <hif_chip_wake+0x68>)
     e50:	785b      	ldrb	r3, [r3, #1]
     e52:	b2db      	uxtb	r3, r3
     e54:	3301      	adds	r3, #1
     e56:	b2da      	uxtb	r2, r3
     e58:	4b05      	ldr	r3, [pc, #20]	; (e70 <hif_chip_wake+0x68>)
     e5a:	705a      	strb	r2, [r3, #1]
     e5c:	e000      	b.n	e60 <hif_chip_wake+0x58>
	if(gstrHifCxt.u8ChipSleep == 0)
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
		{
			ret = chip_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
     e5e:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
ERR1:
	return ret;
     e60:	1dfb      	adds	r3, r7, #7
     e62:	781b      	ldrb	r3, [r3, #0]
     e64:	b25b      	sxtb	r3, r3
}
     e66:	0018      	movs	r0, r3
     e68:	46bd      	mov	sp, r7
     e6a:	b003      	add	sp, #12
     e6c:	bd90      	pop	{r4, r7, pc}
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	20000310 	.word	0x20000310
     e74:	000027f9 	.word	0x000027f9

00000e78 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
     e78:	b580      	push	{r7, lr}
     e7a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
     e7c:	4b07      	ldr	r3, [pc, #28]	; (e9c <hif_chip_sleep_sc+0x24>)
     e7e:	785b      	ldrb	r3, [r3, #1]
     e80:	b2db      	uxtb	r3, r3
     e82:	2b00      	cmp	r3, #0
     e84:	d006      	beq.n	e94 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
     e86:	4b05      	ldr	r3, [pc, #20]	; (e9c <hif_chip_sleep_sc+0x24>)
     e88:	785b      	ldrb	r3, [r3, #1]
     e8a:	b2db      	uxtb	r3, r3
     e8c:	3b01      	subs	r3, #1
     e8e:	b2da      	uxtb	r2, r3
     e90:	4b02      	ldr	r3, [pc, #8]	; (e9c <hif_chip_sleep_sc+0x24>)
     e92:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
     e94:	2300      	movs	r3, #0
}
     e96:	0018      	movs	r0, r3
     e98:	46bd      	mov	sp, r7
     e9a:	bd80      	pop	{r7, pc}
     e9c:	20000310 	.word	0x20000310

00000ea0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     ea0:	b590      	push	{r4, r7, lr}
     ea2:	b083      	sub	sp, #12
     ea4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     ea6:	1dfb      	adds	r3, r7, #7
     ea8:	2200      	movs	r2, #0
     eaa:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
     eac:	4b10      	ldr	r3, [pc, #64]	; (ef0 <hif_chip_sleep+0x50>)
     eae:	785b      	ldrb	r3, [r3, #1]
     eb0:	b2db      	uxtb	r3, r3
     eb2:	2b00      	cmp	r3, #0
     eb4:	d006      	beq.n	ec4 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
     eb6:	4b0e      	ldr	r3, [pc, #56]	; (ef0 <hif_chip_sleep+0x50>)
     eb8:	785b      	ldrb	r3, [r3, #1]
     eba:	b2db      	uxtb	r3, r3
     ebc:	3b01      	subs	r3, #1
     ebe:	b2da      	uxtb	r2, r3
     ec0:	4b0b      	ldr	r3, [pc, #44]	; (ef0 <hif_chip_sleep+0x50>)
     ec2:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     ec4:	4b0a      	ldr	r3, [pc, #40]	; (ef0 <hif_chip_sleep+0x50>)
     ec6:	785b      	ldrb	r3, [r3, #1]
     ec8:	b2db      	uxtb	r3, r3
     eca:	2b00      	cmp	r3, #0
     ecc:	d109      	bne.n	ee2 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     ece:	4b08      	ldr	r3, [pc, #32]	; (ef0 <hif_chip_sleep+0x50>)
     ed0:	781b      	ldrb	r3, [r3, #0]
     ed2:	b2db      	uxtb	r3, r3
     ed4:	2b00      	cmp	r3, #0
     ed6:	d004      	beq.n	ee2 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
     ed8:	1dfc      	adds	r4, r7, #7
     eda:	4b06      	ldr	r3, [pc, #24]	; (ef4 <hif_chip_sleep+0x54>)
     edc:	4798      	blx	r3
     ede:	0003      	movs	r3, r0
     ee0:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
     ee2:	1dfb      	adds	r3, r7, #7
     ee4:	781b      	ldrb	r3, [r3, #0]
     ee6:	b25b      	sxtb	r3, r3
}
     ee8:	0018      	movs	r0, r3
     eea:	46bd      	mov	sp, r7
     eec:	b003      	add	sp, #12
     eee:	bd90      	pop	{r4, r7, pc}
     ef0:	20000310 	.word	0x20000310
     ef4:	00002721 	.word	0x00002721

00000ef8 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
     ef8:	b580      	push	{r7, lr}
     efa:	b082      	sub	sp, #8
     efc:	af00      	add	r7, sp, #0
     efe:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     f00:	4b09      	ldr	r3, [pc, #36]	; (f28 <hif_init+0x30>)
     f02:	2228      	movs	r2, #40	; 0x28
     f04:	2100      	movs	r1, #0
     f06:	0018      	movs	r0, r3
     f08:	4b08      	ldr	r3, [pc, #32]	; (f2c <hif_init+0x34>)
     f0a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     f0c:	4b08      	ldr	r3, [pc, #32]	; (f30 <hif_init+0x38>)
     f0e:	0018      	movs	r0, r3
     f10:	4b08      	ldr	r3, [pc, #32]	; (f34 <hif_init+0x3c>)
     f12:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     f14:	4b08      	ldr	r3, [pc, #32]	; (f38 <hif_init+0x40>)
     f16:	0019      	movs	r1, r3
     f18:	2003      	movs	r0, #3
     f1a:	4b08      	ldr	r3, [pc, #32]	; (f3c <hif_init+0x44>)
     f1c:	4798      	blx	r3
	return M2M_SUCCESS;
     f1e:	2300      	movs	r3, #0
}
     f20:	0018      	movs	r0, r3
     f22:	46bd      	mov	sp, r7
     f24:	b002      	add	sp, #8
     f26:	bd80      	pop	{r7, pc}
     f28:	20000310 	.word	0x20000310
     f2c:	00000ce1 	.word	0x00000ce1
     f30:	00000d5d 	.word	0x00000d5d
     f34:	00000419 	.word	0x00000419
     f38:	00000ded 	.word	0x00000ded
     f3c:	000019b5 	.word	0x000019b5

00000f40 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     f40:	b590      	push	{r4, r7, lr}
     f42:	b089      	sub	sp, #36	; 0x24
     f44:	af00      	add	r7, sp, #0
     f46:	0004      	movs	r4, r0
     f48:	0008      	movs	r0, r1
     f4a:	603a      	str	r2, [r7, #0]
     f4c:	0019      	movs	r1, r3
     f4e:	1dfb      	adds	r3, r7, #7
     f50:	1c22      	adds	r2, r4, #0
     f52:	701a      	strb	r2, [r3, #0]
     f54:	1dbb      	adds	r3, r7, #6
     f56:	1c02      	adds	r2, r0, #0
     f58:	701a      	strb	r2, [r3, #0]
     f5a:	1d3b      	adds	r3, r7, #4
     f5c:	1c0a      	adds	r2, r1, #0
     f5e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
     f60:	231f      	movs	r3, #31
     f62:	18fb      	adds	r3, r7, r3
     f64:	22ff      	movs	r2, #255	; 0xff
     f66:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     f68:	1dbb      	adds	r3, r7, #6
     f6a:	781b      	ldrb	r3, [r3, #0]
     f6c:	227f      	movs	r2, #127	; 0x7f
     f6e:	4013      	ands	r3, r2
     f70:	b2da      	uxtb	r2, r3
     f72:	2318      	movs	r3, #24
     f74:	18fb      	adds	r3, r7, r3
     f76:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     f78:	2318      	movs	r3, #24
     f7a:	18fb      	adds	r3, r7, r3
     f7c:	1dfa      	adds	r2, r7, #7
     f7e:	7812      	ldrb	r2, [r2, #0]
     f80:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     f82:	2318      	movs	r3, #24
     f84:	18fb      	adds	r3, r7, r3
     f86:	2208      	movs	r2, #8
     f88:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f8c:	2b00      	cmp	r3, #0
     f8e:	d011      	beq.n	fb4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     f90:	2318      	movs	r3, #24
     f92:	18fb      	adds	r3, r7, r3
     f94:	885b      	ldrh	r3, [r3, #2]
     f96:	b29a      	uxth	r2, r3
     f98:	2338      	movs	r3, #56	; 0x38
     f9a:	18f9      	adds	r1, r7, r3
     f9c:	2334      	movs	r3, #52	; 0x34
     f9e:	18fb      	adds	r3, r7, r3
     fa0:	8809      	ldrh	r1, [r1, #0]
     fa2:	881b      	ldrh	r3, [r3, #0]
     fa4:	18cb      	adds	r3, r1, r3
     fa6:	b29b      	uxth	r3, r3
     fa8:	18d3      	adds	r3, r2, r3
     faa:	b29a      	uxth	r2, r3
     fac:	2318      	movs	r3, #24
     fae:	18fb      	adds	r3, r7, r3
     fb0:	805a      	strh	r2, [r3, #2]
     fb2:	e00a      	b.n	fca <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     fb4:	2318      	movs	r3, #24
     fb6:	18fb      	adds	r3, r7, r3
     fb8:	885b      	ldrh	r3, [r3, #2]
     fba:	b29a      	uxth	r2, r3
     fbc:	1d3b      	adds	r3, r7, #4
     fbe:	881b      	ldrh	r3, [r3, #0]
     fc0:	18d3      	adds	r3, r2, r3
     fc2:	b29a      	uxth	r2, r3
     fc4:	2318      	movs	r3, #24
     fc6:	18fb      	adds	r3, r7, r3
     fc8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     fca:	231f      	movs	r3, #31
     fcc:	18fc      	adds	r4, r7, r3
     fce:	4bb0      	ldr	r3, [pc, #704]	; (1290 <hif_send+0x350>)
     fd0:	4798      	blx	r3
     fd2:	0003      	movs	r3, r0
     fd4:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
     fd6:	231f      	movs	r3, #31
     fd8:	18fb      	adds	r3, r7, r3
     fda:	781b      	ldrb	r3, [r3, #0]
     fdc:	b25b      	sxtb	r3, r3
     fde:	2b00      	cmp	r3, #0
     fe0:	d000      	beq.n	fe4 <hif_send+0xa4>
     fe2:	e127      	b.n	1234 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
     fe4:	2300      	movs	r3, #0
     fe6:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
     fe8:	230e      	movs	r3, #14
     fea:	18fb      	adds	r3, r7, r3
     fec:	2200      	movs	r2, #0
     fee:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     ff0:	2300      	movs	r3, #0
     ff2:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
     ff4:	1dfb      	adds	r3, r7, #7
     ff6:	781a      	ldrb	r2, [r3, #0]
     ff8:	697b      	ldr	r3, [r7, #20]
     ffa:	4313      	orrs	r3, r2
     ffc:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
     ffe:	1dbb      	adds	r3, r7, #6
    1000:	781b      	ldrb	r3, [r3, #0]
    1002:	021a      	lsls	r2, r3, #8
    1004:	697b      	ldr	r3, [r7, #20]
    1006:	4313      	orrs	r3, r2
    1008:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    100a:	2318      	movs	r3, #24
    100c:	18fb      	adds	r3, r7, r3
    100e:	885b      	ldrh	r3, [r3, #2]
    1010:	b29b      	uxth	r3, r3
    1012:	041a      	lsls	r2, r3, #16
    1014:	697b      	ldr	r3, [r7, #20]
    1016:	4313      	orrs	r3, r2
    1018:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    101a:	697b      	ldr	r3, [r7, #20]
    101c:	221f      	movs	r2, #31
    101e:	18bc      	adds	r4, r7, r2
    1020:	4a9c      	ldr	r2, [pc, #624]	; (1294 <hif_send+0x354>)
    1022:	0019      	movs	r1, r3
    1024:	0010      	movs	r0, r2
    1026:	4b9c      	ldr	r3, [pc, #624]	; (1298 <hif_send+0x358>)
    1028:	4798      	blx	r3
    102a:	0003      	movs	r3, r0
    102c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    102e:	231f      	movs	r3, #31
    1030:	18fb      	adds	r3, r7, r3
    1032:	781b      	ldrb	r3, [r3, #0]
    1034:	b25b      	sxtb	r3, r3
    1036:	2b00      	cmp	r3, #0
    1038:	d000      	beq.n	103c <hif_send+0xfc>
    103a:	e115      	b.n	1268 <hif_send+0x328>

		reg = 0UL;
    103c:	2300      	movs	r3, #0
    103e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    1040:	697b      	ldr	r3, [r7, #20]
    1042:	2202      	movs	r2, #2
    1044:	4313      	orrs	r3, r2
    1046:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    1048:	697b      	ldr	r3, [r7, #20]
    104a:	221f      	movs	r2, #31
    104c:	18bc      	adds	r4, r7, r2
    104e:	4a93      	ldr	r2, [pc, #588]	; (129c <hif_send+0x35c>)
    1050:	0019      	movs	r1, r3
    1052:	0010      	movs	r0, r2
    1054:	4b90      	ldr	r3, [pc, #576]	; (1298 <hif_send+0x358>)
    1056:	4798      	blx	r3
    1058:	0003      	movs	r3, r0
    105a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    105c:	231f      	movs	r3, #31
    105e:	18fb      	adds	r3, r7, r3
    1060:	781b      	ldrb	r3, [r3, #0]
    1062:	b25b      	sxtb	r3, r3
    1064:	2b00      	cmp	r3, #0
    1066:	d000      	beq.n	106a <hif_send+0x12a>
    1068:	e100      	b.n	126c <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    106a:	2300      	movs	r3, #0
    106c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    106e:	230e      	movs	r3, #14
    1070:	18fb      	adds	r3, r7, r3
    1072:	2200      	movs	r2, #0
    1074:	801a      	strh	r2, [r3, #0]
    1076:	e04f      	b.n	1118 <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    1078:	231f      	movs	r3, #31
    107a:	18fc      	adds	r4, r7, r3
    107c:	2314      	movs	r3, #20
    107e:	18fb      	adds	r3, r7, r3
    1080:	4a86      	ldr	r2, [pc, #536]	; (129c <hif_send+0x35c>)
    1082:	0019      	movs	r1, r3
    1084:	0010      	movs	r0, r2
    1086:	4b86      	ldr	r3, [pc, #536]	; (12a0 <hif_send+0x360>)
    1088:	4798      	blx	r3
    108a:	0003      	movs	r3, r0
    108c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    108e:	231f      	movs	r3, #31
    1090:	18fb      	adds	r3, r7, r3
    1092:	781b      	ldrb	r3, [r3, #0]
    1094:	b25b      	sxtb	r3, r3
    1096:	2b00      	cmp	r3, #0
    1098:	d146      	bne.n	1128 <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    109a:	230e      	movs	r3, #14
    109c:	18fb      	adds	r3, r7, r3
    109e:	881b      	ldrh	r3, [r3, #0]
    10a0:	b29a      	uxth	r2, r3
    10a2:	23f4      	movs	r3, #244	; 0xf4
    10a4:	33ff      	adds	r3, #255	; 0xff
    10a6:	429a      	cmp	r2, r3
    10a8:	d915      	bls.n	10d6 <hif_send+0x196>
				if(cnt < 501) {
    10aa:	230e      	movs	r3, #14
    10ac:	18fb      	adds	r3, r7, r3
    10ae:	881b      	ldrh	r3, [r3, #0]
    10b0:	b29a      	uxth	r2, r3
    10b2:	23fa      	movs	r3, #250	; 0xfa
    10b4:	005b      	lsls	r3, r3, #1
    10b6:	429a      	cmp	r2, r3
    10b8:	d80a      	bhi.n	10d0 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
    10ba:	4b7a      	ldr	r3, [pc, #488]	; (12a4 <hif_send+0x364>)
    10bc:	0018      	movs	r0, r3
    10be:	4b7a      	ldr	r3, [pc, #488]	; (12a8 <hif_send+0x368>)
    10c0:	4798      	blx	r3
    10c2:	4b7a      	ldr	r3, [pc, #488]	; (12ac <hif_send+0x36c>)
    10c4:	0018      	movs	r0, r3
    10c6:	4b7a      	ldr	r3, [pc, #488]	; (12b0 <hif_send+0x370>)
    10c8:	4798      	blx	r3
    10ca:	200d      	movs	r0, #13
    10cc:	4b79      	ldr	r3, [pc, #484]	; (12b4 <hif_send+0x374>)
    10ce:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    10d0:	2001      	movs	r0, #1
    10d2:	4b79      	ldr	r3, [pc, #484]	; (12b8 <hif_send+0x378>)
    10d4:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    10d6:	697b      	ldr	r3, [r7, #20]
    10d8:	2202      	movs	r2, #2
    10da:	4013      	ands	r3, r2
    10dc:	d113      	bne.n	1106 <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    10de:	231f      	movs	r3, #31
    10e0:	18fc      	adds	r4, r7, r3
    10e2:	2310      	movs	r3, #16
    10e4:	18fb      	adds	r3, r7, r3
    10e6:	4a75      	ldr	r2, [pc, #468]	; (12bc <hif_send+0x37c>)
    10e8:	0019      	movs	r1, r3
    10ea:	0010      	movs	r0, r2
    10ec:	4b6c      	ldr	r3, [pc, #432]	; (12a0 <hif_send+0x360>)
    10ee:	4798      	blx	r3
    10f0:	0003      	movs	r3, r0
    10f2:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    10f4:	231f      	movs	r3, #31
    10f6:	18fb      	adds	r3, r7, r3
    10f8:	781b      	ldrb	r3, [r3, #0]
    10fa:	b25b      	sxtb	r3, r3
    10fc:	2b00      	cmp	r3, #0
    10fe:	d015      	beq.n	112c <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    1100:	2300      	movs	r3, #0
    1102:	613b      	str	r3, [r7, #16]
					goto ERR1;
    1104:	e0b9      	b.n	127a <hif_send+0x33a>
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
		
		for(cnt = 0; cnt < 1000; cnt ++)
    1106:	230e      	movs	r3, #14
    1108:	18fb      	adds	r3, r7, r3
    110a:	881b      	ldrh	r3, [r3, #0]
    110c:	b29b      	uxth	r3, r3
    110e:	3301      	adds	r3, #1
    1110:	b29a      	uxth	r2, r3
    1112:	230e      	movs	r3, #14
    1114:	18fb      	adds	r3, r7, r3
    1116:	801a      	strh	r2, [r3, #0]
    1118:	230e      	movs	r3, #14
    111a:	18fb      	adds	r3, r7, r3
    111c:	881b      	ldrh	r3, [r3, #0]
    111e:	b29b      	uxth	r3, r3
    1120:	4a67      	ldr	r2, [pc, #412]	; (12c0 <hif_send+0x380>)
    1122:	4293      	cmp	r3, r2
    1124:	d9a8      	bls.n	1078 <hif_send+0x138>
    1126:	e002      	b.n	112e <hif_send+0x1ee>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    1128:	46c0      	nop			; (mov r8, r8)
    112a:	e000      	b.n	112e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
					goto ERR1;
				}
				/*in case of success break */
				break;
    112c:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    112e:	693b      	ldr	r3, [r7, #16]
    1130:	2b00      	cmp	r3, #0
    1132:	d100      	bne.n	1136 <hif_send+0x1f6>
    1134:	e073      	b.n	121e <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    1136:	693b      	ldr	r3, [r7, #16]
    1138:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    113a:	2318      	movs	r3, #24
    113c:	18fb      	adds	r3, r7, r3
    113e:	885b      	ldrh	r3, [r3, #2]
    1140:	b29a      	uxth	r2, r3
    1142:	2318      	movs	r3, #24
    1144:	18fb      	adds	r3, r7, r3
    1146:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    1148:	68bb      	ldr	r3, [r7, #8]
    114a:	221f      	movs	r2, #31
    114c:	18bc      	adds	r4, r7, r2
    114e:	2218      	movs	r2, #24
    1150:	18b9      	adds	r1, r7, r2
    1152:	2208      	movs	r2, #8
    1154:	0018      	movs	r0, r3
    1156:	4b5b      	ldr	r3, [pc, #364]	; (12c4 <hif_send+0x384>)
    1158:	4798      	blx	r3
    115a:	0003      	movs	r3, r0
    115c:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    115e:	231f      	movs	r3, #31
    1160:	18fb      	adds	r3, r7, r3
    1162:	781b      	ldrb	r3, [r3, #0]
    1164:	b25b      	sxtb	r3, r3
    1166:	2b00      	cmp	r3, #0
    1168:	d000      	beq.n	116c <hif_send+0x22c>
    116a:	e081      	b.n	1270 <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    116c:	68bb      	ldr	r3, [r7, #8]
    116e:	3308      	adds	r3, #8
    1170:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    1172:	683b      	ldr	r3, [r7, #0]
    1174:	2b00      	cmp	r3, #0
    1176:	d015      	beq.n	11a4 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    1178:	68b8      	ldr	r0, [r7, #8]
    117a:	1d3b      	adds	r3, r7, #4
    117c:	881a      	ldrh	r2, [r3, #0]
    117e:	231f      	movs	r3, #31
    1180:	18fc      	adds	r4, r7, r3
    1182:	683b      	ldr	r3, [r7, #0]
    1184:	0019      	movs	r1, r3
    1186:	4b4f      	ldr	r3, [pc, #316]	; (12c4 <hif_send+0x384>)
    1188:	4798      	blx	r3
    118a:	0003      	movs	r3, r0
    118c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    118e:	231f      	movs	r3, #31
    1190:	18fb      	adds	r3, r7, r3
    1192:	781b      	ldrb	r3, [r3, #0]
    1194:	b25b      	sxtb	r3, r3
    1196:	2b00      	cmp	r3, #0
    1198:	d16c      	bne.n	1274 <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    119a:	1d3b      	adds	r3, r7, #4
    119c:	881a      	ldrh	r2, [r3, #0]
    119e:	68bb      	ldr	r3, [r7, #8]
    11a0:	18d3      	adds	r3, r2, r3
    11a2:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    11a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11a6:	2b00      	cmp	r3, #0
    11a8:	d021      	beq.n	11ee <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    11aa:	2338      	movs	r3, #56	; 0x38
    11ac:	18fb      	adds	r3, r7, r3
    11ae:	881a      	ldrh	r2, [r3, #0]
    11b0:	1d3b      	adds	r3, r7, #4
    11b2:	881b      	ldrh	r3, [r3, #0]
    11b4:	1ad3      	subs	r3, r2, r3
    11b6:	001a      	movs	r2, r3
    11b8:	68bb      	ldr	r3, [r7, #8]
    11ba:	18d3      	adds	r3, r2, r3
    11bc:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    11be:	68b8      	ldr	r0, [r7, #8]
    11c0:	2334      	movs	r3, #52	; 0x34
    11c2:	18fb      	adds	r3, r7, r3
    11c4:	881a      	ldrh	r2, [r3, #0]
    11c6:	231f      	movs	r3, #31
    11c8:	18fc      	adds	r4, r7, r3
    11ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    11cc:	0019      	movs	r1, r3
    11ce:	4b3d      	ldr	r3, [pc, #244]	; (12c4 <hif_send+0x384>)
    11d0:	4798      	blx	r3
    11d2:	0003      	movs	r3, r0
    11d4:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    11d6:	231f      	movs	r3, #31
    11d8:	18fb      	adds	r3, r7, r3
    11da:	781b      	ldrb	r3, [r3, #0]
    11dc:	b25b      	sxtb	r3, r3
    11de:	2b00      	cmp	r3, #0
    11e0:	d14a      	bne.n	1278 <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    11e2:	2334      	movs	r3, #52	; 0x34
    11e4:	18fb      	adds	r3, r7, r3
    11e6:	881a      	ldrh	r2, [r3, #0]
    11e8:	68bb      	ldr	r3, [r7, #8]
    11ea:	18d3      	adds	r3, r2, r3
    11ec:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    11ee:	693b      	ldr	r3, [r7, #16]
    11f0:	009b      	lsls	r3, r3, #2
    11f2:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    11f4:	697b      	ldr	r3, [r7, #20]
    11f6:	2202      	movs	r2, #2
    11f8:	4313      	orrs	r3, r2
    11fa:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    11fc:	697b      	ldr	r3, [r7, #20]
    11fe:	221f      	movs	r2, #31
    1200:	18bc      	adds	r4, r7, r2
    1202:	4a31      	ldr	r2, [pc, #196]	; (12c8 <hif_send+0x388>)
    1204:	0019      	movs	r1, r3
    1206:	0010      	movs	r0, r2
    1208:	4b23      	ldr	r3, [pc, #140]	; (1298 <hif_send+0x358>)
    120a:	4798      	blx	r3
    120c:	0003      	movs	r3, r0
    120e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    1210:	231f      	movs	r3, #31
    1212:	18fb      	adds	r3, r7, r3
    1214:	781b      	ldrb	r3, [r3, #0]
    1216:	b25b      	sxtb	r3, r3
    1218:	2b00      	cmp	r3, #0
    121a:	d01a      	beq.n	1252 <hif_send+0x312>
    121c:	e02d      	b.n	127a <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    121e:	231f      	movs	r3, #31
    1220:	18fc      	adds	r4, r7, r3
    1222:	4b2a      	ldr	r3, [pc, #168]	; (12cc <hif_send+0x38c>)
    1224:	4798      	blx	r3
    1226:	0003      	movs	r3, r0
    1228:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    122a:	231f      	movs	r3, #31
    122c:	18fb      	adds	r3, r7, r3
    122e:	22fd      	movs	r2, #253	; 0xfd
    1230:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    1232:	e024      	b.n	127e <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1234:	23cb      	movs	r3, #203	; 0xcb
    1236:	005a      	lsls	r2, r3, #1
    1238:	4925      	ldr	r1, [pc, #148]	; (12d0 <hif_send+0x390>)
    123a:	4b26      	ldr	r3, [pc, #152]	; (12d4 <hif_send+0x394>)
    123c:	0018      	movs	r0, r3
    123e:	4b1a      	ldr	r3, [pc, #104]	; (12a8 <hif_send+0x368>)
    1240:	4798      	blx	r3
    1242:	4b25      	ldr	r3, [pc, #148]	; (12d8 <hif_send+0x398>)
    1244:	0018      	movs	r0, r3
    1246:	4b1a      	ldr	r3, [pc, #104]	; (12b0 <hif_send+0x370>)
    1248:	4798      	blx	r3
    124a:	200d      	movs	r0, #13
    124c:	4b19      	ldr	r3, [pc, #100]	; (12b4 <hif_send+0x374>)
    124e:	4798      	blx	r3
		goto ERR2;
    1250:	e015      	b.n	127e <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    1252:	231f      	movs	r3, #31
    1254:	18fc      	adds	r4, r7, r3
    1256:	4b1d      	ldr	r3, [pc, #116]	; (12cc <hif_send+0x38c>)
    1258:	4798      	blx	r3
    125a:	0003      	movs	r3, r0
    125c:	7023      	strb	r3, [r4, #0]
	return ret;
    125e:	231f      	movs	r3, #31
    1260:	18fb      	adds	r3, r7, r3
    1262:	781b      	ldrb	r3, [r3, #0]
    1264:	b25b      	sxtb	r3, r3
    1266:	e00e      	b.n	1286 <hif_send+0x346>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    1268:	46c0      	nop			; (mov r8, r8)
    126a:	e006      	b.n	127a <hif_send+0x33a>

		reg = 0UL;
		reg |= NBIT1;
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    126c:	46c0      	nop			; (mov r8, r8)
    126e:	e004      	b.n	127a <hif_send+0x33a>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
			if(M2M_SUCCESS != ret) goto ERR1;
    1270:	46c0      	nop			; (mov r8, r8)
    1272:	e002      	b.n	127a <hif_send+0x33a>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
			if(pu8CtrlBuf != NULL)
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    1274:	46c0      	nop			; (mov r8, r8)
    1276:	e000      	b.n	127a <hif_send+0x33a>
			}
			if(pu8DataBuf != NULL)
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    1278:	46c0      	nop			; (mov r8, r8)
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    127a:	4b18      	ldr	r3, [pc, #96]	; (12dc <hif_send+0x39c>)
    127c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    127e:	231f      	movs	r3, #31
    1280:	18fb      	adds	r3, r7, r3
    1282:	781b      	ldrb	r3, [r3, #0]
    1284:	b25b      	sxtb	r3, r3
}
    1286:	0018      	movs	r0, r3
    1288:	46bd      	mov	sp, r7
    128a:	b009      	add	sp, #36	; 0x24
    128c:	bd90      	pop	{r4, r7, pc}
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	00000e09 	.word	0x00000e09
    1294:	0000108c 	.word	0x0000108c
    1298:	00002d49 	.word	0x00002d49
    129c:	00001078 	.word	0x00001078
    12a0:	00002d25 	.word	0x00002d25
    12a4:	0000d840 	.word	0x0000d840
    12a8:	0000c461 	.word	0x0000c461
    12ac:	0000d84c 	.word	0x0000d84c
    12b0:	0000c581 	.word	0x0000c581
    12b4:	0000c495 	.word	0x0000c495
    12b8:	000003f1 	.word	0x000003f1
    12bc:	00150400 	.word	0x00150400
    12c0:	000003e7 	.word	0x000003e7
    12c4:	00002e91 	.word	0x00002e91
    12c8:	0000106c 	.word	0x0000106c
    12cc:	00000ea1 	.word	0x00000ea1
    12d0:	0000db54 	.word	0x0000db54
    12d4:	0000d85c 	.word	0x0000d85c
    12d8:	0000d870 	.word	0x0000d870
    12dc:	00000e79 	.word	0x00000e79

000012e0 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    12e0:	b590      	push	{r4, r7, lr}
    12e2:	b087      	sub	sp, #28
    12e4:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    12e6:	230f      	movs	r3, #15
    12e8:	18fb      	adds	r3, r7, r3
    12ea:	2200      	movs	r2, #0
    12ec:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    12ee:	230f      	movs	r3, #15
    12f0:	18fc      	adds	r4, r7, r3
    12f2:	2308      	movs	r3, #8
    12f4:	18fb      	adds	r3, r7, r3
    12f6:	4ad6      	ldr	r2, [pc, #856]	; (1650 <hif_isr+0x370>)
    12f8:	0019      	movs	r1, r3
    12fa:	0010      	movs	r0, r2
    12fc:	4bd5      	ldr	r3, [pc, #852]	; (1654 <hif_isr+0x374>)
    12fe:	4798      	blx	r3
    1300:	0003      	movs	r3, r0
    1302:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    1304:	230f      	movs	r3, #15
    1306:	18fb      	adds	r3, r7, r3
    1308:	781b      	ldrb	r3, [r3, #0]
    130a:	b25b      	sxtb	r3, r3
    130c:	2b00      	cmp	r3, #0
    130e:	d000      	beq.n	1312 <hif_isr+0x32>
    1310:	e217      	b.n	1742 <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    1312:	68bb      	ldr	r3, [r7, #8]
    1314:	2201      	movs	r2, #1
    1316:	4013      	ands	r3, r2
    1318:	d100      	bne.n	131c <hif_isr+0x3c>
    131a:	e1fd      	b.n	1718 <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    131c:	2000      	movs	r0, #0
    131e:	4bce      	ldr	r3, [pc, #824]	; (1658 <hif_isr+0x378>)
    1320:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    1322:	68bb      	ldr	r3, [r7, #8]
    1324:	2201      	movs	r2, #1
    1326:	4393      	bics	r3, r2
    1328:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    132a:	68bb      	ldr	r3, [r7, #8]
    132c:	220f      	movs	r2, #15
    132e:	18bc      	adds	r4, r7, r2
    1330:	4ac7      	ldr	r2, [pc, #796]	; (1650 <hif_isr+0x370>)
    1332:	0019      	movs	r1, r3
    1334:	0010      	movs	r0, r2
    1336:	4bc9      	ldr	r3, [pc, #804]	; (165c <hif_isr+0x37c>)
    1338:	4798      	blx	r3
    133a:	0003      	movs	r3, r0
    133c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    133e:	230f      	movs	r3, #15
    1340:	18fb      	adds	r3, r7, r3
    1342:	781b      	ldrb	r3, [r3, #0]
    1344:	b25b      	sxtb	r3, r3
    1346:	2b00      	cmp	r3, #0
    1348:	d000      	beq.n	134c <hif_isr+0x6c>
    134a:	e208      	b.n	175e <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    134c:	4bc4      	ldr	r3, [pc, #784]	; (1660 <hif_isr+0x380>)
    134e:	2201      	movs	r2, #1
    1350:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1352:	68bb      	ldr	r3, [r7, #8]
    1354:	089b      	lsrs	r3, r3, #2
    1356:	b29a      	uxth	r2, r3
    1358:	230c      	movs	r3, #12
    135a:	18fb      	adds	r3, r7, r3
    135c:	0512      	lsls	r2, r2, #20
    135e:	0d12      	lsrs	r2, r2, #20
    1360:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    1362:	230c      	movs	r3, #12
    1364:	18fb      	adds	r3, r7, r3
    1366:	881b      	ldrh	r3, [r3, #0]
    1368:	2b00      	cmp	r3, #0
    136a:	d100      	bne.n	136e <hif_isr+0x8e>
    136c:	e1c1      	b.n	16f2 <hif_isr+0x412>
				uint32 address = 0;
    136e:	2300      	movs	r3, #0
    1370:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1372:	230f      	movs	r3, #15
    1374:	18fc      	adds	r4, r7, r3
    1376:	003b      	movs	r3, r7
    1378:	4aba      	ldr	r2, [pc, #744]	; (1664 <hif_isr+0x384>)
    137a:	0019      	movs	r1, r3
    137c:	0010      	movs	r0, r2
    137e:	4bb5      	ldr	r3, [pc, #724]	; (1654 <hif_isr+0x374>)
    1380:	4798      	blx	r3
    1382:	0003      	movs	r3, r0
    1384:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    1386:	230f      	movs	r3, #15
    1388:	18fb      	adds	r3, r7, r3
    138a:	781b      	ldrb	r3, [r3, #0]
    138c:	b25b      	sxtb	r3, r3
    138e:	2b00      	cmp	r3, #0
    1390:	d012      	beq.n	13b8 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1392:	23c8      	movs	r3, #200	; 0xc8
    1394:	33ff      	adds	r3, #255	; 0xff
    1396:	001a      	movs	r2, r3
    1398:	49b3      	ldr	r1, [pc, #716]	; (1668 <hif_isr+0x388>)
    139a:	4bb4      	ldr	r3, [pc, #720]	; (166c <hif_isr+0x38c>)
    139c:	0018      	movs	r0, r3
    139e:	4bb4      	ldr	r3, [pc, #720]	; (1670 <hif_isr+0x390>)
    13a0:	4798      	blx	r3
    13a2:	4bb4      	ldr	r3, [pc, #720]	; (1674 <hif_isr+0x394>)
    13a4:	0018      	movs	r0, r3
    13a6:	4bb4      	ldr	r3, [pc, #720]	; (1678 <hif_isr+0x398>)
    13a8:	4798      	blx	r3
    13aa:	200d      	movs	r0, #13
    13ac:	4bb3      	ldr	r3, [pc, #716]	; (167c <hif_isr+0x39c>)
    13ae:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    13b0:	2001      	movs	r0, #1
    13b2:	4ba9      	ldr	r3, [pc, #676]	; (1658 <hif_isr+0x378>)
    13b4:	4798      	blx	r3
					goto ERR1;
    13b6:	e1d3      	b.n	1760 <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    13b8:	683a      	ldr	r2, [r7, #0]
    13ba:	4ba9      	ldr	r3, [pc, #676]	; (1660 <hif_isr+0x380>)
    13bc:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    13be:	230c      	movs	r3, #12
    13c0:	18fb      	adds	r3, r7, r3
    13c2:	881a      	ldrh	r2, [r3, #0]
    13c4:	4ba6      	ldr	r3, [pc, #664]	; (1660 <hif_isr+0x380>)
    13c6:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    13c8:	683b      	ldr	r3, [r7, #0]
    13ca:	220f      	movs	r2, #15
    13cc:	18bc      	adds	r4, r7, r2
    13ce:	1d39      	adds	r1, r7, #4
    13d0:	2204      	movs	r2, #4
    13d2:	0018      	movs	r0, r3
    13d4:	4baa      	ldr	r3, [pc, #680]	; (1680 <hif_isr+0x3a0>)
    13d6:	4798      	blx	r3
    13d8:	0003      	movs	r3, r0
    13da:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    13dc:	1d3b      	adds	r3, r7, #4
    13de:	885b      	ldrh	r3, [r3, #2]
    13e0:	b29a      	uxth	r2, r3
    13e2:	1d3b      	adds	r3, r7, #4
    13e4:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    13e6:	230f      	movs	r3, #15
    13e8:	18fb      	adds	r3, r7, r3
    13ea:	781b      	ldrb	r3, [r3, #0]
    13ec:	b25b      	sxtb	r3, r3
    13ee:	2b00      	cmp	r3, #0
    13f0:	d012      	beq.n	1418 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    13f2:	23d2      	movs	r3, #210	; 0xd2
    13f4:	33ff      	adds	r3, #255	; 0xff
    13f6:	001a      	movs	r2, r3
    13f8:	499b      	ldr	r1, [pc, #620]	; (1668 <hif_isr+0x388>)
    13fa:	4b9c      	ldr	r3, [pc, #624]	; (166c <hif_isr+0x38c>)
    13fc:	0018      	movs	r0, r3
    13fe:	4b9c      	ldr	r3, [pc, #624]	; (1670 <hif_isr+0x390>)
    1400:	4798      	blx	r3
    1402:	4ba0      	ldr	r3, [pc, #640]	; (1684 <hif_isr+0x3a4>)
    1404:	0018      	movs	r0, r3
    1406:	4b9c      	ldr	r3, [pc, #624]	; (1678 <hif_isr+0x398>)
    1408:	4798      	blx	r3
    140a:	200d      	movs	r0, #13
    140c:	4b9b      	ldr	r3, [pc, #620]	; (167c <hif_isr+0x39c>)
    140e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1410:	2001      	movs	r0, #1
    1412:	4b91      	ldr	r3, [pc, #580]	; (1658 <hif_isr+0x378>)
    1414:	4798      	blx	r3
					goto ERR1;
    1416:	e1a3      	b.n	1760 <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    1418:	1d3b      	adds	r3, r7, #4
    141a:	885b      	ldrh	r3, [r3, #2]
    141c:	b29b      	uxth	r3, r3
    141e:	220c      	movs	r2, #12
    1420:	18ba      	adds	r2, r7, r2
    1422:	8812      	ldrh	r2, [r2, #0]
    1424:	429a      	cmp	r2, r3
    1426:	d02d      	beq.n	1484 <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    1428:	230c      	movs	r3, #12
    142a:	18fb      	adds	r3, r7, r3
    142c:	881b      	ldrh	r3, [r3, #0]
    142e:	1d3a      	adds	r2, r7, #4
    1430:	8852      	ldrh	r2, [r2, #2]
    1432:	b292      	uxth	r2, r2
    1434:	1a9b      	subs	r3, r3, r2
    1436:	2b04      	cmp	r3, #4
    1438:	dd24      	ble.n	1484 <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    143a:	23ed      	movs	r3, #237	; 0xed
    143c:	005a      	lsls	r2, r3, #1
    143e:	498a      	ldr	r1, [pc, #552]	; (1668 <hif_isr+0x388>)
    1440:	4b8a      	ldr	r3, [pc, #552]	; (166c <hif_isr+0x38c>)
    1442:	0018      	movs	r0, r3
    1444:	4b8a      	ldr	r3, [pc, #552]	; (1670 <hif_isr+0x390>)
    1446:	4798      	blx	r3
    1448:	230c      	movs	r3, #12
    144a:	18fb      	adds	r3, r7, r3
    144c:	8819      	ldrh	r1, [r3, #0]
    144e:	1d3b      	adds	r3, r7, #4
    1450:	885b      	ldrh	r3, [r3, #2]
    1452:	b29b      	uxth	r3, r3
    1454:	001a      	movs	r2, r3
    1456:	1d3b      	adds	r3, r7, #4
    1458:	781b      	ldrb	r3, [r3, #0]
    145a:	b2db      	uxtb	r3, r3
    145c:	001c      	movs	r4, r3
    145e:	1d3b      	adds	r3, r7, #4
    1460:	785b      	ldrb	r3, [r3, #1]
    1462:	b2db      	uxtb	r3, r3
    1464:	4888      	ldr	r0, [pc, #544]	; (1688 <hif_isr+0x3a8>)
    1466:	9300      	str	r3, [sp, #0]
    1468:	0023      	movs	r3, r4
    146a:	4c81      	ldr	r4, [pc, #516]	; (1670 <hif_isr+0x390>)
    146c:	47a0      	blx	r4
    146e:	200d      	movs	r0, #13
    1470:	4b82      	ldr	r3, [pc, #520]	; (167c <hif_isr+0x39c>)
    1472:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    1474:	2001      	movs	r0, #1
    1476:	4b78      	ldr	r3, [pc, #480]	; (1658 <hif_isr+0x378>)
    1478:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    147a:	230f      	movs	r3, #15
    147c:	18fb      	adds	r3, r7, r3
    147e:	22fa      	movs	r2, #250	; 0xfa
    1480:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    1482:	e16d      	b.n	1760 <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1484:	1d3b      	adds	r3, r7, #4
    1486:	781b      	ldrb	r3, [r3, #0]
    1488:	b2db      	uxtb	r3, r3
    148a:	2b01      	cmp	r3, #1
    148c:	d120      	bne.n	14d0 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    148e:	4b74      	ldr	r3, [pc, #464]	; (1660 <hif_isr+0x380>)
    1490:	68db      	ldr	r3, [r3, #12]
    1492:	2b00      	cmp	r3, #0
    1494:	d00d      	beq.n	14b2 <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1496:	4b72      	ldr	r3, [pc, #456]	; (1660 <hif_isr+0x380>)
    1498:	68db      	ldr	r3, [r3, #12]
    149a:	1d3a      	adds	r2, r7, #4
    149c:	7852      	ldrb	r2, [r2, #1]
    149e:	b2d0      	uxtb	r0, r2
    14a0:	1d3a      	adds	r2, r7, #4
    14a2:	8852      	ldrh	r2, [r2, #2]
    14a4:	b292      	uxth	r2, r2
    14a6:	3a08      	subs	r2, #8
    14a8:	b291      	uxth	r1, r2
    14aa:	683a      	ldr	r2, [r7, #0]
    14ac:	3208      	adds	r2, #8
    14ae:	4798      	blx	r3
    14b0:	e0fe      	b.n	16b0 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    14b2:	23f3      	movs	r3, #243	; 0xf3
    14b4:	005a      	lsls	r2, r3, #1
    14b6:	496c      	ldr	r1, [pc, #432]	; (1668 <hif_isr+0x388>)
    14b8:	4b6c      	ldr	r3, [pc, #432]	; (166c <hif_isr+0x38c>)
    14ba:	0018      	movs	r0, r3
    14bc:	4b6c      	ldr	r3, [pc, #432]	; (1670 <hif_isr+0x390>)
    14be:	4798      	blx	r3
    14c0:	4b72      	ldr	r3, [pc, #456]	; (168c <hif_isr+0x3ac>)
    14c2:	0018      	movs	r0, r3
    14c4:	4b6c      	ldr	r3, [pc, #432]	; (1678 <hif_isr+0x398>)
    14c6:	4798      	blx	r3
    14c8:	200d      	movs	r0, #13
    14ca:	4b6c      	ldr	r3, [pc, #432]	; (167c <hif_isr+0x39c>)
    14cc:	4798      	blx	r3
    14ce:	e0ef      	b.n	16b0 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    14d0:	1d3b      	adds	r3, r7, #4
    14d2:	781b      	ldrb	r3, [r3, #0]
    14d4:	b2db      	uxtb	r3, r3
    14d6:	2b02      	cmp	r3, #2
    14d8:	d120      	bne.n	151c <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    14da:	4b61      	ldr	r3, [pc, #388]	; (1660 <hif_isr+0x380>)
    14dc:	691b      	ldr	r3, [r3, #16]
    14de:	2b00      	cmp	r3, #0
    14e0:	d00d      	beq.n	14fe <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    14e2:	4b5f      	ldr	r3, [pc, #380]	; (1660 <hif_isr+0x380>)
    14e4:	691b      	ldr	r3, [r3, #16]
    14e6:	1d3a      	adds	r2, r7, #4
    14e8:	7852      	ldrb	r2, [r2, #1]
    14ea:	b2d0      	uxtb	r0, r2
    14ec:	1d3a      	adds	r2, r7, #4
    14ee:	8852      	ldrh	r2, [r2, #2]
    14f0:	b292      	uxth	r2, r2
    14f2:	3a08      	subs	r2, #8
    14f4:	b291      	uxth	r1, r2
    14f6:	683a      	ldr	r2, [r7, #0]
    14f8:	3208      	adds	r2, #8
    14fa:	4798      	blx	r3
    14fc:	e0d8      	b.n	16b0 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    14fe:	23f7      	movs	r3, #247	; 0xf7
    1500:	005a      	lsls	r2, r3, #1
    1502:	4959      	ldr	r1, [pc, #356]	; (1668 <hif_isr+0x388>)
    1504:	4b59      	ldr	r3, [pc, #356]	; (166c <hif_isr+0x38c>)
    1506:	0018      	movs	r0, r3
    1508:	4b59      	ldr	r3, [pc, #356]	; (1670 <hif_isr+0x390>)
    150a:	4798      	blx	r3
    150c:	4b60      	ldr	r3, [pc, #384]	; (1690 <hif_isr+0x3b0>)
    150e:	0018      	movs	r0, r3
    1510:	4b59      	ldr	r3, [pc, #356]	; (1678 <hif_isr+0x398>)
    1512:	4798      	blx	r3
    1514:	200d      	movs	r0, #13
    1516:	4b59      	ldr	r3, [pc, #356]	; (167c <hif_isr+0x39c>)
    1518:	4798      	blx	r3
    151a:	e0c9      	b.n	16b0 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    151c:	1d3b      	adds	r3, r7, #4
    151e:	781b      	ldrb	r3, [r3, #0]
    1520:	b2db      	uxtb	r3, r3
    1522:	2b04      	cmp	r3, #4
    1524:	d120      	bne.n	1568 <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    1526:	4b4e      	ldr	r3, [pc, #312]	; (1660 <hif_isr+0x380>)
    1528:	695b      	ldr	r3, [r3, #20]
    152a:	2b00      	cmp	r3, #0
    152c:	d00d      	beq.n	154a <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    152e:	4b4c      	ldr	r3, [pc, #304]	; (1660 <hif_isr+0x380>)
    1530:	695b      	ldr	r3, [r3, #20]
    1532:	1d3a      	adds	r2, r7, #4
    1534:	7852      	ldrb	r2, [r2, #1]
    1536:	b2d0      	uxtb	r0, r2
    1538:	1d3a      	adds	r2, r7, #4
    153a:	8852      	ldrh	r2, [r2, #2]
    153c:	b292      	uxth	r2, r2
    153e:	3a08      	subs	r2, #8
    1540:	b291      	uxth	r1, r2
    1542:	683a      	ldr	r2, [r7, #0]
    1544:	3208      	adds	r2, #8
    1546:	4798      	blx	r3
    1548:	e0b2      	b.n	16b0 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    154a:	23fb      	movs	r3, #251	; 0xfb
    154c:	005a      	lsls	r2, r3, #1
    154e:	4946      	ldr	r1, [pc, #280]	; (1668 <hif_isr+0x388>)
    1550:	4b46      	ldr	r3, [pc, #280]	; (166c <hif_isr+0x38c>)
    1552:	0018      	movs	r0, r3
    1554:	4b46      	ldr	r3, [pc, #280]	; (1670 <hif_isr+0x390>)
    1556:	4798      	blx	r3
    1558:	4b4e      	ldr	r3, [pc, #312]	; (1694 <hif_isr+0x3b4>)
    155a:	0018      	movs	r0, r3
    155c:	4b46      	ldr	r3, [pc, #280]	; (1678 <hif_isr+0x398>)
    155e:	4798      	blx	r3
    1560:	200d      	movs	r0, #13
    1562:	4b46      	ldr	r3, [pc, #280]	; (167c <hif_isr+0x39c>)
    1564:	4798      	blx	r3
    1566:	e0a3      	b.n	16b0 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1568:	1d3b      	adds	r3, r7, #4
    156a:	781b      	ldrb	r3, [r3, #0]
    156c:	b2db      	uxtb	r3, r3
    156e:	2b06      	cmp	r3, #6
    1570:	d11f      	bne.n	15b2 <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    1572:	4b3b      	ldr	r3, [pc, #236]	; (1660 <hif_isr+0x380>)
    1574:	6a1b      	ldr	r3, [r3, #32]
    1576:	2b00      	cmp	r3, #0
    1578:	d00d      	beq.n	1596 <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    157a:	4b39      	ldr	r3, [pc, #228]	; (1660 <hif_isr+0x380>)
    157c:	6a1b      	ldr	r3, [r3, #32]
    157e:	1d3a      	adds	r2, r7, #4
    1580:	7852      	ldrb	r2, [r2, #1]
    1582:	b2d0      	uxtb	r0, r2
    1584:	1d3a      	adds	r2, r7, #4
    1586:	8852      	ldrh	r2, [r2, #2]
    1588:	b292      	uxth	r2, r2
    158a:	3a08      	subs	r2, #8
    158c:	b291      	uxth	r1, r2
    158e:	683a      	ldr	r2, [r7, #0]
    1590:	3208      	adds	r2, #8
    1592:	4798      	blx	r3
    1594:	e08c      	b.n	16b0 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    1596:	4a40      	ldr	r2, [pc, #256]	; (1698 <hif_isr+0x3b8>)
    1598:	4933      	ldr	r1, [pc, #204]	; (1668 <hif_isr+0x388>)
    159a:	4b34      	ldr	r3, [pc, #208]	; (166c <hif_isr+0x38c>)
    159c:	0018      	movs	r0, r3
    159e:	4b34      	ldr	r3, [pc, #208]	; (1670 <hif_isr+0x390>)
    15a0:	4798      	blx	r3
    15a2:	4b3e      	ldr	r3, [pc, #248]	; (169c <hif_isr+0x3bc>)
    15a4:	0018      	movs	r0, r3
    15a6:	4b34      	ldr	r3, [pc, #208]	; (1678 <hif_isr+0x398>)
    15a8:	4798      	blx	r3
    15aa:	200d      	movs	r0, #13
    15ac:	4b33      	ldr	r3, [pc, #204]	; (167c <hif_isr+0x39c>)
    15ae:	4798      	blx	r3
    15b0:	e07e      	b.n	16b0 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    15b2:	1d3b      	adds	r3, r7, #4
    15b4:	781b      	ldrb	r3, [r3, #0]
    15b6:	b2db      	uxtb	r3, r3
    15b8:	2b07      	cmp	r3, #7
    15ba:	d11f      	bne.n	15fc <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    15bc:	4b28      	ldr	r3, [pc, #160]	; (1660 <hif_isr+0x380>)
    15be:	699b      	ldr	r3, [r3, #24]
    15c0:	2b00      	cmp	r3, #0
    15c2:	d00d      	beq.n	15e0 <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    15c4:	4b26      	ldr	r3, [pc, #152]	; (1660 <hif_isr+0x380>)
    15c6:	699b      	ldr	r3, [r3, #24]
    15c8:	1d3a      	adds	r2, r7, #4
    15ca:	7852      	ldrb	r2, [r2, #1]
    15cc:	b2d0      	uxtb	r0, r2
    15ce:	1d3a      	adds	r2, r7, #4
    15d0:	8852      	ldrh	r2, [r2, #2]
    15d2:	b292      	uxth	r2, r2
    15d4:	3a08      	subs	r2, #8
    15d6:	b291      	uxth	r1, r2
    15d8:	683a      	ldr	r2, [r7, #0]
    15da:	3208      	adds	r2, #8
    15dc:	4798      	blx	r3
    15de:	e067      	b.n	16b0 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    15e0:	4a2f      	ldr	r2, [pc, #188]	; (16a0 <hif_isr+0x3c0>)
    15e2:	4921      	ldr	r1, [pc, #132]	; (1668 <hif_isr+0x388>)
    15e4:	4b21      	ldr	r3, [pc, #132]	; (166c <hif_isr+0x38c>)
    15e6:	0018      	movs	r0, r3
    15e8:	4b21      	ldr	r3, [pc, #132]	; (1670 <hif_isr+0x390>)
    15ea:	4798      	blx	r3
    15ec:	4b2d      	ldr	r3, [pc, #180]	; (16a4 <hif_isr+0x3c4>)
    15ee:	0018      	movs	r0, r3
    15f0:	4b21      	ldr	r3, [pc, #132]	; (1678 <hif_isr+0x398>)
    15f2:	4798      	blx	r3
    15f4:	200d      	movs	r0, #13
    15f6:	4b21      	ldr	r3, [pc, #132]	; (167c <hif_isr+0x39c>)
    15f8:	4798      	blx	r3
    15fa:	e059      	b.n	16b0 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    15fc:	1d3b      	adds	r3, r7, #4
    15fe:	781b      	ldrb	r3, [r3, #0]
    1600:	b2db      	uxtb	r3, r3
    1602:	2b05      	cmp	r3, #5
    1604:	d111      	bne.n	162a <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    1606:	4b16      	ldr	r3, [pc, #88]	; (1660 <hif_isr+0x380>)
    1608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    160a:	2b00      	cmp	r3, #0
    160c:	d050      	beq.n	16b0 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    160e:	4b14      	ldr	r3, [pc, #80]	; (1660 <hif_isr+0x380>)
    1610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1612:	1d3a      	adds	r2, r7, #4
    1614:	7852      	ldrb	r2, [r2, #1]
    1616:	b2d0      	uxtb	r0, r2
    1618:	1d3a      	adds	r2, r7, #4
    161a:	8852      	ldrh	r2, [r2, #2]
    161c:	b292      	uxth	r2, r2
    161e:	3a08      	subs	r2, #8
    1620:	b291      	uxth	r1, r2
    1622:	683a      	ldr	r2, [r7, #0]
    1624:	3208      	adds	r2, #8
    1626:	4798      	blx	r3
    1628:	e042      	b.n	16b0 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    162a:	4a1f      	ldr	r2, [pc, #124]	; (16a8 <hif_isr+0x3c8>)
    162c:	490e      	ldr	r1, [pc, #56]	; (1668 <hif_isr+0x388>)
    162e:	4b0f      	ldr	r3, [pc, #60]	; (166c <hif_isr+0x38c>)
    1630:	0018      	movs	r0, r3
    1632:	4b0f      	ldr	r3, [pc, #60]	; (1670 <hif_isr+0x390>)
    1634:	4798      	blx	r3
    1636:	4b1d      	ldr	r3, [pc, #116]	; (16ac <hif_isr+0x3cc>)
    1638:	0018      	movs	r0, r3
    163a:	4b0f      	ldr	r3, [pc, #60]	; (1678 <hif_isr+0x398>)
    163c:	4798      	blx	r3
    163e:	200d      	movs	r0, #13
    1640:	4b0e      	ldr	r3, [pc, #56]	; (167c <hif_isr+0x39c>)
    1642:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1644:	230f      	movs	r3, #15
    1646:	18fb      	adds	r3, r7, r3
    1648:	22fa      	movs	r2, #250	; 0xfa
    164a:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    164c:	e088      	b.n	1760 <hif_isr+0x480>
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	00001070 	.word	0x00001070
    1654:	00002d25 	.word	0x00002d25
    1658:	00000491 	.word	0x00000491
    165c:	00002d49 	.word	0x00002d49
    1660:	20000310 	.word	0x20000310
    1664:	00001084 	.word	0x00001084
    1668:	0000db60 	.word	0x0000db60
    166c:	0000d85c 	.word	0x0000d85c
    1670:	0000c461 	.word	0x0000c461
    1674:	0000d88c 	.word	0x0000d88c
    1678:	0000c581 	.word	0x0000c581
    167c:	0000c495 	.word	0x0000c495
    1680:	00002d99 	.word	0x00002d99
    1684:	0000d8b0 	.word	0x0000d8b0
    1688:	0000d8c8 	.word	0x0000d8c8
    168c:	0000d908 	.word	0x0000d908
    1690:	0000d928 	.word	0x0000d928
    1694:	0000d94c 	.word	0x0000d94c
    1698:	000001ff 	.word	0x000001ff
    169c:	0000d96c 	.word	0x0000d96c
    16a0:	00000206 	.word	0x00000206
    16a4:	0000d990 	.word	0x0000d990
    16a8:	0000020f 	.word	0x0000020f
    16ac:	0000d9b4 	.word	0x0000d9b4
				}
				if(gstrHifCxt.u8HifRXDone)
    16b0:	4b2f      	ldr	r3, [pc, #188]	; (1770 <hif_isr+0x490>)
    16b2:	789b      	ldrb	r3, [r3, #2]
    16b4:	b2db      	uxtb	r3, r3
    16b6:	2b00      	cmp	r3, #0
    16b8:	d052      	beq.n	1760 <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    16ba:	4a2e      	ldr	r2, [pc, #184]	; (1774 <hif_isr+0x494>)
    16bc:	492e      	ldr	r1, [pc, #184]	; (1778 <hif_isr+0x498>)
    16be:	4b2f      	ldr	r3, [pc, #188]	; (177c <hif_isr+0x49c>)
    16c0:	0018      	movs	r0, r3
    16c2:	4b2f      	ldr	r3, [pc, #188]	; (1780 <hif_isr+0x4a0>)
    16c4:	4798      	blx	r3
    16c6:	1d3b      	adds	r3, r7, #4
    16c8:	781b      	ldrb	r3, [r3, #0]
    16ca:	b2db      	uxtb	r3, r3
    16cc:	0019      	movs	r1, r3
    16ce:	1d3b      	adds	r3, r7, #4
    16d0:	785b      	ldrb	r3, [r3, #1]
    16d2:	b2db      	uxtb	r3, r3
    16d4:	001a      	movs	r2, r3
    16d6:	4b2b      	ldr	r3, [pc, #172]	; (1784 <hif_isr+0x4a4>)
    16d8:	0018      	movs	r0, r3
    16da:	4b29      	ldr	r3, [pc, #164]	; (1780 <hif_isr+0x4a0>)
    16dc:	4798      	blx	r3
    16de:	200d      	movs	r0, #13
    16e0:	4b29      	ldr	r3, [pc, #164]	; (1788 <hif_isr+0x4a8>)
    16e2:	4798      	blx	r3
					ret = hif_set_rx_done();
    16e4:	230f      	movs	r3, #15
    16e6:	18fc      	adds	r4, r7, r3
    16e8:	4b28      	ldr	r3, [pc, #160]	; (178c <hif_isr+0x4ac>)
    16ea:	4798      	blx	r3
    16ec:	0003      	movs	r3, r0
    16ee:	7023      	strb	r3, [r4, #0]
    16f0:	e036      	b.n	1760 <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    16f2:	2387      	movs	r3, #135	; 0x87
    16f4:	009a      	lsls	r2, r3, #2
    16f6:	4920      	ldr	r1, [pc, #128]	; (1778 <hif_isr+0x498>)
    16f8:	4b20      	ldr	r3, [pc, #128]	; (177c <hif_isr+0x49c>)
    16fa:	0018      	movs	r0, r3
    16fc:	4b20      	ldr	r3, [pc, #128]	; (1780 <hif_isr+0x4a0>)
    16fe:	4798      	blx	r3
    1700:	4b23      	ldr	r3, [pc, #140]	; (1790 <hif_isr+0x4b0>)
    1702:	0018      	movs	r0, r3
    1704:	4b23      	ldr	r3, [pc, #140]	; (1794 <hif_isr+0x4b4>)
    1706:	4798      	blx	r3
    1708:	200d      	movs	r0, #13
    170a:	4b1f      	ldr	r3, [pc, #124]	; (1788 <hif_isr+0x4a8>)
    170c:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    170e:	230f      	movs	r3, #15
    1710:	18fb      	adds	r3, r7, r3
    1712:	22fe      	movs	r2, #254	; 0xfe
    1714:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    1716:	e023      	b.n	1760 <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    1718:	2389      	movs	r3, #137	; 0x89
    171a:	009a      	lsls	r2, r3, #2
    171c:	4916      	ldr	r1, [pc, #88]	; (1778 <hif_isr+0x498>)
    171e:	4b17      	ldr	r3, [pc, #92]	; (177c <hif_isr+0x49c>)
    1720:	0018      	movs	r0, r3
    1722:	4b17      	ldr	r3, [pc, #92]	; (1780 <hif_isr+0x4a0>)
    1724:	4798      	blx	r3
    1726:	68ba      	ldr	r2, [r7, #8]
    1728:	4b1b      	ldr	r3, [pc, #108]	; (1798 <hif_isr+0x4b8>)
    172a:	0011      	movs	r1, r2
    172c:	0018      	movs	r0, r3
    172e:	4b14      	ldr	r3, [pc, #80]	; (1780 <hif_isr+0x4a0>)
    1730:	4798      	blx	r3
    1732:	200d      	movs	r0, #13
    1734:	4b14      	ldr	r3, [pc, #80]	; (1788 <hif_isr+0x4a8>)
    1736:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1738:	230f      	movs	r3, #15
    173a:	18fb      	adds	r3, r7, r3
    173c:	22f4      	movs	r2, #244	; 0xf4
    173e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1740:	e00e      	b.n	1760 <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1742:	4a16      	ldr	r2, [pc, #88]	; (179c <hif_isr+0x4bc>)
    1744:	490c      	ldr	r1, [pc, #48]	; (1778 <hif_isr+0x498>)
    1746:	4b0d      	ldr	r3, [pc, #52]	; (177c <hif_isr+0x49c>)
    1748:	0018      	movs	r0, r3
    174a:	4b0d      	ldr	r3, [pc, #52]	; (1780 <hif_isr+0x4a0>)
    174c:	4798      	blx	r3
    174e:	4b14      	ldr	r3, [pc, #80]	; (17a0 <hif_isr+0x4c0>)
    1750:	0018      	movs	r0, r3
    1752:	4b10      	ldr	r3, [pc, #64]	; (1794 <hif_isr+0x4b4>)
    1754:	4798      	blx	r3
    1756:	200d      	movs	r0, #13
    1758:	4b0b      	ldr	r3, [pc, #44]	; (1788 <hif_isr+0x4a8>)
    175a:	4798      	blx	r3
		goto ERR1;
    175c:	e000      	b.n	1760 <hif_isr+0x480>

			nm_bsp_interrupt_ctrl(0);
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    175e:	46c0      	nop			; (mov r8, r8)
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
	}

ERR1:
	return ret;
    1760:	230f      	movs	r3, #15
    1762:	18fb      	adds	r3, r7, r3
    1764:	781b      	ldrb	r3, [r3, #0]
    1766:	b25b      	sxtb	r3, r3
}
    1768:	0018      	movs	r0, r3
    176a:	46bd      	mov	sp, r7
    176c:	b005      	add	sp, #20
    176e:	bd90      	pop	{r4, r7, pc}
    1770:	20000310 	.word	0x20000310
    1774:	00000215 	.word	0x00000215
    1778:	0000db60 	.word	0x0000db60
    177c:	0000d85c 	.word	0x0000d85c
    1780:	0000c461 	.word	0x0000c461
    1784:	0000d9cc 	.word	0x0000d9cc
    1788:	0000c495 	.word	0x0000c495
    178c:	00000d79 	.word	0x00000d79
    1790:	0000d9f8 	.word	0x0000d9f8
    1794:	0000c581 	.word	0x0000c581
    1798:	0000da0c 	.word	0x0000da0c
    179c:	0000022d 	.word	0x0000022d
    17a0:	0000da28 	.word	0x0000da28

000017a4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    17a4:	b590      	push	{r4, r7, lr}
    17a6:	b083      	sub	sp, #12
    17a8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    17aa:	1dfb      	adds	r3, r7, #7
    17ac:	2200      	movs	r2, #0
    17ae:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    17b0:	e023      	b.n	17fa <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    17b2:	4b18      	ldr	r3, [pc, #96]	; (1814 <hif_handle_isr+0x70>)
    17b4:	78db      	ldrb	r3, [r3, #3]
    17b6:	b2db      	uxtb	r3, r3
    17b8:	3b01      	subs	r3, #1
    17ba:	b2da      	uxtb	r2, r3
    17bc:	4b15      	ldr	r3, [pc, #84]	; (1814 <hif_handle_isr+0x70>)
    17be:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    17c0:	1dfc      	adds	r4, r7, #7
    17c2:	4b15      	ldr	r3, [pc, #84]	; (1818 <hif_handle_isr+0x74>)
    17c4:	4798      	blx	r3
    17c6:	0003      	movs	r3, r0
    17c8:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    17ca:	1dfb      	adds	r3, r7, #7
    17cc:	781b      	ldrb	r3, [r3, #0]
    17ce:	b25b      	sxtb	r3, r3
    17d0:	2b00      	cmp	r3, #0
    17d2:	d100      	bne.n	17d6 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    17d4:	e011      	b.n	17fa <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    17d6:	4a11      	ldr	r2, [pc, #68]	; (181c <hif_handle_isr+0x78>)
    17d8:	4911      	ldr	r1, [pc, #68]	; (1820 <hif_handle_isr+0x7c>)
    17da:	4b12      	ldr	r3, [pc, #72]	; (1824 <hif_handle_isr+0x80>)
    17dc:	0018      	movs	r0, r3
    17de:	4b12      	ldr	r3, [pc, #72]	; (1828 <hif_handle_isr+0x84>)
    17e0:	4798      	blx	r3
    17e2:	1dfb      	adds	r3, r7, #7
    17e4:	2200      	movs	r2, #0
    17e6:	569a      	ldrsb	r2, [r3, r2]
    17e8:	4b10      	ldr	r3, [pc, #64]	; (182c <hif_handle_isr+0x88>)
    17ea:	0011      	movs	r1, r2
    17ec:	0018      	movs	r0, r3
    17ee:	4b0e      	ldr	r3, [pc, #56]	; (1828 <hif_handle_isr+0x84>)
    17f0:	4798      	blx	r3
    17f2:	200d      	movs	r0, #13
    17f4:	4b0e      	ldr	r3, [pc, #56]	; (1830 <hif_handle_isr+0x8c>)
    17f6:	4798      	blx	r3
			}
		}
    17f8:	e7e2      	b.n	17c0 <hif_handle_isr+0x1c>
*/

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    17fa:	4b06      	ldr	r3, [pc, #24]	; (1814 <hif_handle_isr+0x70>)
    17fc:	78db      	ldrb	r3, [r3, #3]
    17fe:	b2db      	uxtb	r3, r3
    1800:	2b00      	cmp	r3, #0
    1802:	d1d6      	bne.n	17b2 <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    1804:	1dfb      	adds	r3, r7, #7
    1806:	781b      	ldrb	r3, [r3, #0]
    1808:	b25b      	sxtb	r3, r3
}
    180a:	0018      	movs	r0, r3
    180c:	46bd      	mov	sp, r7
    180e:	b003      	add	sp, #12
    1810:	bd90      	pop	{r4, r7, pc}
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	20000310 	.word	0x20000310
    1818:	000012e1 	.word	0x000012e1
    181c:	0000024a 	.word	0x0000024a
    1820:	0000db68 	.word	0x0000db68
    1824:	0000d85c 	.word	0x0000d85c
    1828:	0000c461 	.word	0x0000c461
    182c:	0000da4c 	.word	0x0000da4c
    1830:	0000c495 	.word	0x0000c495

00001834 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1834:	b590      	push	{r4, r7, lr}
    1836:	b087      	sub	sp, #28
    1838:	af00      	add	r7, sp, #0
    183a:	60f8      	str	r0, [r7, #12]
    183c:	60b9      	str	r1, [r7, #8]
    183e:	0019      	movs	r1, r3
    1840:	1dbb      	adds	r3, r7, #6
    1842:	801a      	strh	r2, [r3, #0]
    1844:	1d7b      	adds	r3, r7, #5
    1846:	1c0a      	adds	r2, r1, #0
    1848:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    184a:	2317      	movs	r3, #23
    184c:	18fb      	adds	r3, r7, r3
    184e:	2200      	movs	r2, #0
    1850:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1852:	68fb      	ldr	r3, [r7, #12]
    1854:	2b00      	cmp	r3, #0
    1856:	d006      	beq.n	1866 <hif_receive+0x32>
    1858:	68bb      	ldr	r3, [r7, #8]
    185a:	2b00      	cmp	r3, #0
    185c:	d003      	beq.n	1866 <hif_receive+0x32>
    185e:	1dbb      	adds	r3, r7, #6
    1860:	881b      	ldrh	r3, [r3, #0]
    1862:	2b00      	cmp	r3, #0
    1864:	d11c      	bne.n	18a0 <hif_receive+0x6c>
	{
		if(isDone)
    1866:	1d7b      	adds	r3, r7, #5
    1868:	781b      	ldrb	r3, [r3, #0]
    186a:	2b00      	cmp	r3, #0
    186c:	d006      	beq.n	187c <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    186e:	2317      	movs	r3, #23
    1870:	18fc      	adds	r4, r7, r3
    1872:	4b42      	ldr	r3, [pc, #264]	; (197c <hif_receive+0x148>)
    1874:	4798      	blx	r3
    1876:	0003      	movs	r3, r0
    1878:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    187a:	e077      	b.n	196c <hif_receive+0x138>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    187c:	2317      	movs	r3, #23
    187e:	18fb      	adds	r3, r7, r3
    1880:	22f4      	movs	r2, #244	; 0xf4
    1882:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    1884:	4a3e      	ldr	r2, [pc, #248]	; (1980 <hif_receive+0x14c>)
    1886:	493f      	ldr	r1, [pc, #252]	; (1984 <hif_receive+0x150>)
    1888:	4b3f      	ldr	r3, [pc, #252]	; (1988 <hif_receive+0x154>)
    188a:	0018      	movs	r0, r3
    188c:	4b3f      	ldr	r3, [pc, #252]	; (198c <hif_receive+0x158>)
    188e:	4798      	blx	r3
    1890:	4b3f      	ldr	r3, [pc, #252]	; (1990 <hif_receive+0x15c>)
    1892:	0018      	movs	r0, r3
    1894:	4b3f      	ldr	r3, [pc, #252]	; (1994 <hif_receive+0x160>)
    1896:	4798      	blx	r3
    1898:	200d      	movs	r0, #13
    189a:	4b3f      	ldr	r3, [pc, #252]	; (1998 <hif_receive+0x164>)
    189c:	4798      	blx	r3
		}
		goto ERR1;
    189e:	e065      	b.n	196c <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    18a0:	1dbb      	adds	r3, r7, #6
    18a2:	881a      	ldrh	r2, [r3, #0]
    18a4:	4b3d      	ldr	r3, [pc, #244]	; (199c <hif_receive+0x168>)
    18a6:	689b      	ldr	r3, [r3, #8]
    18a8:	429a      	cmp	r2, r3
    18aa:	d915      	bls.n	18d8 <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    18ac:	2317      	movs	r3, #23
    18ae:	18fb      	adds	r3, r7, r3
    18b0:	22f4      	movs	r2, #244	; 0xf4
    18b2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    18b4:	4a3a      	ldr	r2, [pc, #232]	; (19a0 <hif_receive+0x16c>)
    18b6:	4933      	ldr	r1, [pc, #204]	; (1984 <hif_receive+0x150>)
    18b8:	4b33      	ldr	r3, [pc, #204]	; (1988 <hif_receive+0x154>)
    18ba:	0018      	movs	r0, r3
    18bc:	4b33      	ldr	r3, [pc, #204]	; (198c <hif_receive+0x158>)
    18be:	4798      	blx	r3
    18c0:	1dbb      	adds	r3, r7, #6
    18c2:	8819      	ldrh	r1, [r3, #0]
    18c4:	4b35      	ldr	r3, [pc, #212]	; (199c <hif_receive+0x168>)
    18c6:	689a      	ldr	r2, [r3, #8]
    18c8:	4b36      	ldr	r3, [pc, #216]	; (19a4 <hif_receive+0x170>)
    18ca:	0018      	movs	r0, r3
    18cc:	4b2f      	ldr	r3, [pc, #188]	; (198c <hif_receive+0x158>)
    18ce:	4798      	blx	r3
    18d0:	200d      	movs	r0, #13
    18d2:	4b31      	ldr	r3, [pc, #196]	; (1998 <hif_receive+0x164>)
    18d4:	4798      	blx	r3
		goto ERR1;
    18d6:	e049      	b.n	196c <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    18d8:	4b30      	ldr	r3, [pc, #192]	; (199c <hif_receive+0x168>)
    18da:	685a      	ldr	r2, [r3, #4]
    18dc:	68fb      	ldr	r3, [r7, #12]
    18de:	429a      	cmp	r2, r3
    18e0:	d80a      	bhi.n	18f8 <hif_receive+0xc4>
    18e2:	1dbb      	adds	r3, r7, #6
    18e4:	881a      	ldrh	r2, [r3, #0]
    18e6:	68fb      	ldr	r3, [r7, #12]
    18e8:	18d2      	adds	r2, r2, r3
    18ea:	4b2c      	ldr	r3, [pc, #176]	; (199c <hif_receive+0x168>)
    18ec:	6859      	ldr	r1, [r3, #4]
    18ee:	4b2b      	ldr	r3, [pc, #172]	; (199c <hif_receive+0x168>)
    18f0:	689b      	ldr	r3, [r3, #8]
    18f2:	18cb      	adds	r3, r1, r3
    18f4:	429a      	cmp	r2, r3
    18f6:	d911      	bls.n	191c <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    18f8:	2317      	movs	r3, #23
    18fa:	18fb      	adds	r3, r7, r3
    18fc:	22f4      	movs	r2, #244	; 0xf4
    18fe:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1900:	4a29      	ldr	r2, [pc, #164]	; (19a8 <hif_receive+0x174>)
    1902:	4920      	ldr	r1, [pc, #128]	; (1984 <hif_receive+0x150>)
    1904:	4b20      	ldr	r3, [pc, #128]	; (1988 <hif_receive+0x154>)
    1906:	0018      	movs	r0, r3
    1908:	4b20      	ldr	r3, [pc, #128]	; (198c <hif_receive+0x158>)
    190a:	4798      	blx	r3
    190c:	4b27      	ldr	r3, [pc, #156]	; (19ac <hif_receive+0x178>)
    190e:	0018      	movs	r0, r3
    1910:	4b20      	ldr	r3, [pc, #128]	; (1994 <hif_receive+0x160>)
    1912:	4798      	blx	r3
    1914:	200d      	movs	r0, #13
    1916:	4b20      	ldr	r3, [pc, #128]	; (1998 <hif_receive+0x164>)
    1918:	4798      	blx	r3
		goto ERR1;
    191a:	e027      	b.n	196c <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    191c:	1dbb      	adds	r3, r7, #6
    191e:	881a      	ldrh	r2, [r3, #0]
    1920:	2317      	movs	r3, #23
    1922:	18fc      	adds	r4, r7, r3
    1924:	68b9      	ldr	r1, [r7, #8]
    1926:	68fb      	ldr	r3, [r7, #12]
    1928:	0018      	movs	r0, r3
    192a:	4b21      	ldr	r3, [pc, #132]	; (19b0 <hif_receive+0x17c>)
    192c:	4798      	blx	r3
    192e:	0003      	movs	r3, r0
    1930:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    1932:	2317      	movs	r3, #23
    1934:	18fb      	adds	r3, r7, r3
    1936:	781b      	ldrb	r3, [r3, #0]
    1938:	b25b      	sxtb	r3, r3
    193a:	2b00      	cmp	r3, #0
    193c:	d115      	bne.n	196a <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    193e:	4b17      	ldr	r3, [pc, #92]	; (199c <hif_receive+0x168>)
    1940:	685a      	ldr	r2, [r3, #4]
    1942:	4b16      	ldr	r3, [pc, #88]	; (199c <hif_receive+0x168>)
    1944:	689b      	ldr	r3, [r3, #8]
    1946:	18d2      	adds	r2, r2, r3
    1948:	1dbb      	adds	r3, r7, #6
    194a:	8819      	ldrh	r1, [r3, #0]
    194c:	68fb      	ldr	r3, [r7, #12]
    194e:	18cb      	adds	r3, r1, r3
    1950:	429a      	cmp	r2, r3
    1952:	d003      	beq.n	195c <hif_receive+0x128>
    1954:	1d7b      	adds	r3, r7, #5
    1956:	781b      	ldrb	r3, [r3, #0]
    1958:	2b00      	cmp	r3, #0
    195a:	d007      	beq.n	196c <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    195c:	2317      	movs	r3, #23
    195e:	18fc      	adds	r4, r7, r3
    1960:	4b06      	ldr	r3, [pc, #24]	; (197c <hif_receive+0x148>)
    1962:	4798      	blx	r3
    1964:	0003      	movs	r3, r0
    1966:	7023      	strb	r3, [r4, #0]
    1968:	e000      	b.n	196c <hif_receive+0x138>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    196a:	46c0      	nop			; (mov r8, r8)
		/* set RX done */
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
    196c:	2317      	movs	r3, #23
    196e:	18fb      	adds	r3, r7, r3
    1970:	781b      	ldrb	r3, [r3, #0]
    1972:	b25b      	sxtb	r3, r3
}
    1974:	0018      	movs	r0, r3
    1976:	46bd      	mov	sp, r7
    1978:	b007      	add	sp, #28
    197a:	bd90      	pop	{r4, r7, pc}
    197c:	00000d79 	.word	0x00000d79
    1980:	0000026b 	.word	0x0000026b
    1984:	0000db78 	.word	0x0000db78
    1988:	0000d85c 	.word	0x0000d85c
    198c:	0000c461 	.word	0x0000c461
    1990:	0000da7c 	.word	0x0000da7c
    1994:	0000c581 	.word	0x0000c581
    1998:	0000c495 	.word	0x0000c495
    199c:	20000310 	.word	0x20000310
    19a0:	00000273 	.word	0x00000273
    19a4:	0000da9c 	.word	0x0000da9c
    19a8:	00000279 	.word	0x00000279
    19ac:	0000dae4 	.word	0x0000dae4
    19b0:	00002d99 	.word	0x00002d99

000019b4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    19b4:	b580      	push	{r7, lr}
    19b6:	b084      	sub	sp, #16
    19b8:	af00      	add	r7, sp, #0
    19ba:	0002      	movs	r2, r0
    19bc:	6039      	str	r1, [r7, #0]
    19be:	1dfb      	adds	r3, r7, #7
    19c0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    19c2:	230f      	movs	r3, #15
    19c4:	18fb      	adds	r3, r7, r3
    19c6:	2200      	movs	r2, #0
    19c8:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    19ca:	1dfb      	adds	r3, r7, #7
    19cc:	781b      	ldrb	r3, [r3, #0]
    19ce:	2b07      	cmp	r3, #7
    19d0:	d820      	bhi.n	1a14 <hif_register_cb+0x60>
    19d2:	009a      	lsls	r2, r3, #2
    19d4:	4b1e      	ldr	r3, [pc, #120]	; (1a50 <hif_register_cb+0x9c>)
    19d6:	18d3      	adds	r3, r2, r3
    19d8:	681b      	ldr	r3, [r3, #0]
    19da:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    19dc:	4b1d      	ldr	r3, [pc, #116]	; (1a54 <hif_register_cb+0xa0>)
    19de:	683a      	ldr	r2, [r7, #0]
    19e0:	611a      	str	r2, [r3, #16]
			break;
    19e2:	e02c      	b.n	1a3e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    19e4:	4b1b      	ldr	r3, [pc, #108]	; (1a54 <hif_register_cb+0xa0>)
    19e6:	683a      	ldr	r2, [r7, #0]
    19e8:	60da      	str	r2, [r3, #12]
			break;
    19ea:	e028      	b.n	1a3e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    19ec:	4b19      	ldr	r3, [pc, #100]	; (1a54 <hif_register_cb+0xa0>)
    19ee:	683a      	ldr	r2, [r7, #0]
    19f0:	615a      	str	r2, [r3, #20]
			break;
    19f2:	e024      	b.n	1a3e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    19f4:	4b17      	ldr	r3, [pc, #92]	; (1a54 <hif_register_cb+0xa0>)
    19f6:	683a      	ldr	r2, [r7, #0]
    19f8:	61da      	str	r2, [r3, #28]
			break;
    19fa:	e020      	b.n	1a3e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    19fc:	4b15      	ldr	r3, [pc, #84]	; (1a54 <hif_register_cb+0xa0>)
    19fe:	683a      	ldr	r2, [r7, #0]
    1a00:	621a      	str	r2, [r3, #32]
			break;
    1a02:	e01c      	b.n	1a3e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    1a04:	4b13      	ldr	r3, [pc, #76]	; (1a54 <hif_register_cb+0xa0>)
    1a06:	683a      	ldr	r2, [r7, #0]
    1a08:	619a      	str	r2, [r3, #24]
			break;
    1a0a:	e018      	b.n	1a3e <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    1a0c:	4b11      	ldr	r3, [pc, #68]	; (1a54 <hif_register_cb+0xa0>)
    1a0e:	683a      	ldr	r2, [r7, #0]
    1a10:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    1a12:	e014      	b.n	1a3e <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    1a14:	4a10      	ldr	r2, [pc, #64]	; (1a58 <hif_register_cb+0xa4>)
    1a16:	4911      	ldr	r1, [pc, #68]	; (1a5c <hif_register_cb+0xa8>)
    1a18:	4b11      	ldr	r3, [pc, #68]	; (1a60 <hif_register_cb+0xac>)
    1a1a:	0018      	movs	r0, r3
    1a1c:	4b11      	ldr	r3, [pc, #68]	; (1a64 <hif_register_cb+0xb0>)
    1a1e:	4798      	blx	r3
    1a20:	1dfb      	adds	r3, r7, #7
    1a22:	781a      	ldrb	r2, [r3, #0]
    1a24:	4b10      	ldr	r3, [pc, #64]	; (1a68 <hif_register_cb+0xb4>)
    1a26:	0011      	movs	r1, r2
    1a28:	0018      	movs	r0, r3
    1a2a:	4b0e      	ldr	r3, [pc, #56]	; (1a64 <hif_register_cb+0xb0>)
    1a2c:	4798      	blx	r3
    1a2e:	200d      	movs	r0, #13
    1a30:	4b0e      	ldr	r3, [pc, #56]	; (1a6c <hif_register_cb+0xb8>)
    1a32:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1a34:	230f      	movs	r3, #15
    1a36:	18fb      	adds	r3, r7, r3
    1a38:	22f4      	movs	r2, #244	; 0xf4
    1a3a:	701a      	strb	r2, [r3, #0]
			break;
    1a3c:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    1a3e:	230f      	movs	r3, #15
    1a40:	18fb      	adds	r3, r7, r3
    1a42:	781b      	ldrb	r3, [r3, #0]
    1a44:	b25b      	sxtb	r3, r3
}
    1a46:	0018      	movs	r0, r3
    1a48:	46bd      	mov	sp, r7
    1a4a:	b004      	add	sp, #16
    1a4c:	bd80      	pop	{r7, pc}
    1a4e:	46c0      	nop			; (mov r8, r8)
    1a50:	0000db34 	.word	0x0000db34
    1a54:	20000310 	.word	0x20000310
    1a58:	000002b1 	.word	0x000002b1
    1a5c:	0000db84 	.word	0x0000db84
    1a60:	0000d85c 	.word	0x0000d85c
    1a64:	0000c461 	.word	0x0000c461
    1a68:	0000db28 	.word	0x0000db28
    1a6c:	0000c495 	.word	0x0000c495

00001a70 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1a70:	b590      	push	{r4, r7, lr}
    1a72:	b0ad      	sub	sp, #180	; 0xb4
    1a74:	af02      	add	r7, sp, #8
    1a76:	603a      	str	r2, [r7, #0]
    1a78:	1dfb      	adds	r3, r7, #7
    1a7a:	1c02      	adds	r2, r0, #0
    1a7c:	701a      	strb	r2, [r3, #0]
    1a7e:	1d3b      	adds	r3, r7, #4
    1a80:	1c0a      	adds	r2, r1, #0
    1a82:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1a84:	1dfb      	adds	r3, r7, #7
    1a86:	781b      	ldrb	r3, [r3, #0]
    1a88:	2b2c      	cmp	r3, #44	; 0x2c
    1a8a:	d116      	bne.n	1aba <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1a8c:	239c      	movs	r3, #156	; 0x9c
    1a8e:	18f9      	adds	r1, r7, r3
    1a90:	6838      	ldr	r0, [r7, #0]
    1a92:	2300      	movs	r3, #0
    1a94:	2204      	movs	r2, #4
    1a96:	4cc8      	ldr	r4, [pc, #800]	; (1db8 <m2m_wifi_cb+0x348>)
    1a98:	47a0      	blx	r4
    1a9a:	1e03      	subs	r3, r0, #0
    1a9c:	d000      	beq.n	1aa0 <m2m_wifi_cb+0x30>
    1a9e:	e1ae      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    1aa0:	4bc6      	ldr	r3, [pc, #792]	; (1dbc <m2m_wifi_cb+0x34c>)
    1aa2:	681b      	ldr	r3, [r3, #0]
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	d100      	bne.n	1aaa <m2m_wifi_cb+0x3a>
    1aa8:	e1a9      	b.n	1dfe <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1aaa:	4bc4      	ldr	r3, [pc, #784]	; (1dbc <m2m_wifi_cb+0x34c>)
    1aac:	681b      	ldr	r3, [r3, #0]
    1aae:	229c      	movs	r2, #156	; 0x9c
    1ab0:	18ba      	adds	r2, r7, r2
    1ab2:	0011      	movs	r1, r2
    1ab4:	202c      	movs	r0, #44	; 0x2c
    1ab6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1ab8:	e1a1      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1aba:	1dfb      	adds	r3, r7, #7
    1abc:	781b      	ldrb	r3, [r3, #0]
    1abe:	2b1b      	cmp	r3, #27
    1ac0:	d116      	bne.n	1af0 <m2m_wifi_cb+0x80>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1ac2:	2394      	movs	r3, #148	; 0x94
    1ac4:	18f9      	adds	r1, r7, r3
    1ac6:	6838      	ldr	r0, [r7, #0]
    1ac8:	2300      	movs	r3, #0
    1aca:	2208      	movs	r2, #8
    1acc:	4cba      	ldr	r4, [pc, #744]	; (1db8 <m2m_wifi_cb+0x348>)
    1ace:	47a0      	blx	r4
    1ad0:	1e03      	subs	r3, r0, #0
    1ad2:	d000      	beq.n	1ad6 <m2m_wifi_cb+0x66>
    1ad4:	e193      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    1ad6:	4bb9      	ldr	r3, [pc, #740]	; (1dbc <m2m_wifi_cb+0x34c>)
    1ad8:	681b      	ldr	r3, [r3, #0]
    1ada:	2b00      	cmp	r3, #0
    1adc:	d100      	bne.n	1ae0 <m2m_wifi_cb+0x70>
    1ade:	e18e      	b.n	1dfe <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1ae0:	4bb6      	ldr	r3, [pc, #728]	; (1dbc <m2m_wifi_cb+0x34c>)
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	2294      	movs	r2, #148	; 0x94
    1ae6:	18ba      	adds	r2, r7, r2
    1ae8:	0011      	movs	r1, r2
    1aea:	201b      	movs	r0, #27
    1aec:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1aee:	e186      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1af0:	1dfb      	adds	r3, r7, #7
    1af2:	781b      	ldrb	r3, [r3, #0]
    1af4:	2b06      	cmp	r3, #6
    1af6:	d116      	bne.n	1b26 <m2m_wifi_cb+0xb6>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1af8:	2308      	movs	r3, #8
    1afa:	18f9      	adds	r1, r7, r3
    1afc:	6838      	ldr	r0, [r7, #0]
    1afe:	2301      	movs	r3, #1
    1b00:	2230      	movs	r2, #48	; 0x30
    1b02:	4cad      	ldr	r4, [pc, #692]	; (1db8 <m2m_wifi_cb+0x348>)
    1b04:	47a0      	blx	r4
    1b06:	1e03      	subs	r3, r0, #0
    1b08:	d000      	beq.n	1b0c <m2m_wifi_cb+0x9c>
    1b0a:	e178      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
    1b0c:	4bab      	ldr	r3, [pc, #684]	; (1dbc <m2m_wifi_cb+0x34c>)
    1b0e:	681b      	ldr	r3, [r3, #0]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d100      	bne.n	1b16 <m2m_wifi_cb+0xa6>
    1b14:	e173      	b.n	1dfe <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1b16:	4ba9      	ldr	r3, [pc, #676]	; (1dbc <m2m_wifi_cb+0x34c>)
    1b18:	681b      	ldr	r3, [r3, #0]
    1b1a:	2208      	movs	r2, #8
    1b1c:	18ba      	adds	r2, r7, r2
    1b1e:	0011      	movs	r1, r2
    1b20:	2006      	movs	r0, #6
    1b22:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1b24:	e16b      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1b26:	1dfb      	adds	r3, r7, #7
    1b28:	781b      	ldrb	r3, [r3, #0]
    1b2a:	2b0e      	cmp	r3, #14
    1b2c:	d100      	bne.n	1b30 <m2m_wifi_cb+0xc0>
    1b2e:	e166      	b.n	1dfe <m2m_wifi_cb+0x38e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1b30:	1dfb      	adds	r3, r7, #7
    1b32:	781b      	ldrb	r3, [r3, #0]
    1b34:	2b32      	cmp	r3, #50	; 0x32
    1b36:	d116      	bne.n	1b66 <m2m_wifi_cb+0xf6>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1b38:	2380      	movs	r3, #128	; 0x80
    1b3a:	18f9      	adds	r1, r7, r3
    1b3c:	6838      	ldr	r0, [r7, #0]
    1b3e:	2300      	movs	r3, #0
    1b40:	2214      	movs	r2, #20
    1b42:	4c9d      	ldr	r4, [pc, #628]	; (1db8 <m2m_wifi_cb+0x348>)
    1b44:	47a0      	blx	r4
    1b46:	1e03      	subs	r3, r0, #0
    1b48:	d000      	beq.n	1b4c <m2m_wifi_cb+0xdc>
    1b4a:	e158      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    1b4c:	4b9b      	ldr	r3, [pc, #620]	; (1dbc <m2m_wifi_cb+0x34c>)
    1b4e:	681b      	ldr	r3, [r3, #0]
    1b50:	2b00      	cmp	r3, #0
    1b52:	d100      	bne.n	1b56 <m2m_wifi_cb+0xe6>
    1b54:	e153      	b.n	1dfe <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    1b56:	4b99      	ldr	r3, [pc, #612]	; (1dbc <m2m_wifi_cb+0x34c>)
    1b58:	681b      	ldr	r3, [r3, #0]
    1b5a:	2280      	movs	r2, #128	; 0x80
    1b5c:	18ba      	adds	r2, r7, r2
    1b5e:	0011      	movs	r1, r2
    1b60:	2032      	movs	r0, #50	; 0x32
    1b62:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1b64:	e14b      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1b66:	1dfb      	adds	r3, r7, #7
    1b68:	781b      	ldrb	r3, [r3, #0]
    1b6a:	2b2f      	cmp	r3, #47	; 0x2f
    1b6c:	d11d      	bne.n	1baa <m2m_wifi_cb+0x13a>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1b6e:	2308      	movs	r3, #8
    1b70:	18fb      	adds	r3, r7, r3
    1b72:	2264      	movs	r2, #100	; 0x64
    1b74:	2100      	movs	r1, #0
    1b76:	0018      	movs	r0, r3
    1b78:	4b91      	ldr	r3, [pc, #580]	; (1dc0 <m2m_wifi_cb+0x350>)
    1b7a:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1b7c:	2308      	movs	r3, #8
    1b7e:	18f9      	adds	r1, r7, r3
    1b80:	6838      	ldr	r0, [r7, #0]
    1b82:	2300      	movs	r3, #0
    1b84:	2264      	movs	r2, #100	; 0x64
    1b86:	4c8c      	ldr	r4, [pc, #560]	; (1db8 <m2m_wifi_cb+0x348>)
    1b88:	47a0      	blx	r4
    1b8a:	1e03      	subs	r3, r0, #0
    1b8c:	d000      	beq.n	1b90 <m2m_wifi_cb+0x120>
    1b8e:	e136      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    1b90:	4b8a      	ldr	r3, [pc, #552]	; (1dbc <m2m_wifi_cb+0x34c>)
    1b92:	681b      	ldr	r3, [r3, #0]
    1b94:	2b00      	cmp	r3, #0
    1b96:	d100      	bne.n	1b9a <m2m_wifi_cb+0x12a>
    1b98:	e131      	b.n	1dfe <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    1b9a:	4b88      	ldr	r3, [pc, #544]	; (1dbc <m2m_wifi_cb+0x34c>)
    1b9c:	681b      	ldr	r3, [r3, #0]
    1b9e:	2208      	movs	r2, #8
    1ba0:	18ba      	adds	r2, r7, r2
    1ba2:	0011      	movs	r1, r2
    1ba4:	202f      	movs	r0, #47	; 0x2f
    1ba6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1ba8:	e129      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1baa:	1dfb      	adds	r3, r7, #7
    1bac:	781b      	ldrb	r3, [r3, #0]
    1bae:	2b34      	cmp	r3, #52	; 0x34
    1bb0:	d132      	bne.n	1c18 <m2m_wifi_cb+0x1a8>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    1bb2:	237c      	movs	r3, #124	; 0x7c
    1bb4:	18f9      	adds	r1, r7, r3
    1bb6:	6838      	ldr	r0, [r7, #0]
    1bb8:	2300      	movs	r3, #0
    1bba:	2204      	movs	r2, #4
    1bbc:	4c7e      	ldr	r4, [pc, #504]	; (1db8 <m2m_wifi_cb+0x348>)
    1bbe:	47a0      	blx	r4
    1bc0:	1e03      	subs	r3, r0, #0
    1bc2:	d000      	beq.n	1bc6 <m2m_wifi_cb+0x156>
    1bc4:	e11b      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    1bc6:	4b7f      	ldr	r3, [pc, #508]	; (1dc4 <m2m_wifi_cb+0x354>)
    1bc8:	0018      	movs	r0, r3
    1bca:	4b7f      	ldr	r3, [pc, #508]	; (1dc8 <m2m_wifi_cb+0x358>)
    1bcc:	4798      	blx	r3
    1bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1bd0:	001a      	movs	r2, r3
    1bd2:	23ff      	movs	r3, #255	; 0xff
    1bd4:	401a      	ands	r2, r3
    1bd6:	0011      	movs	r1, r2
    1bd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1bda:	0a1b      	lsrs	r3, r3, #8
    1bdc:	001a      	movs	r2, r3
    1bde:	23ff      	movs	r3, #255	; 0xff
    1be0:	401a      	ands	r2, r3
    1be2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1be4:	0c1b      	lsrs	r3, r3, #16
    1be6:	0018      	movs	r0, r3
    1be8:	23ff      	movs	r3, #255	; 0xff
    1bea:	4018      	ands	r0, r3
    1bec:	0004      	movs	r4, r0
    1bee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1bf0:	0e1b      	lsrs	r3, r3, #24
    1bf2:	4876      	ldr	r0, [pc, #472]	; (1dcc <m2m_wifi_cb+0x35c>)
    1bf4:	9300      	str	r3, [sp, #0]
    1bf6:	0023      	movs	r3, r4
    1bf8:	4c73      	ldr	r4, [pc, #460]	; (1dc8 <m2m_wifi_cb+0x358>)
    1bfa:	47a0      	blx	r4
    1bfc:	200d      	movs	r0, #13
    1bfe:	4b74      	ldr	r3, [pc, #464]	; (1dd0 <m2m_wifi_cb+0x360>)
    1c00:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    1c02:	4b6e      	ldr	r3, [pc, #440]	; (1dbc <m2m_wifi_cb+0x34c>)
    1c04:	681b      	ldr	r3, [r3, #0]
    1c06:	2b00      	cmp	r3, #0
    1c08:	d100      	bne.n	1c0c <m2m_wifi_cb+0x19c>
    1c0a:	e0f8      	b.n	1dfe <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1c0c:	4b6b      	ldr	r3, [pc, #428]	; (1dbc <m2m_wifi_cb+0x34c>)
    1c0e:	681b      	ldr	r3, [r3, #0]
    1c10:	2100      	movs	r1, #0
    1c12:	2034      	movs	r0, #52	; 0x34
    1c14:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1c16:	e0f2      	b.n	1dfe <m2m_wifi_cb+0x38e>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1c18:	1dfb      	adds	r3, r7, #7
    1c1a:	781b      	ldrb	r3, [r3, #0]
    1c1c:	2b11      	cmp	r3, #17
    1c1e:	d11e      	bne.n	1c5e <m2m_wifi_cb+0x1ee>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    1c20:	4b6c      	ldr	r3, [pc, #432]	; (1dd4 <m2m_wifi_cb+0x364>)
    1c22:	2200      	movs	r2, #0
    1c24:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    1c26:	2378      	movs	r3, #120	; 0x78
    1c28:	18f9      	adds	r1, r7, r3
    1c2a:	6838      	ldr	r0, [r7, #0]
    1c2c:	2300      	movs	r3, #0
    1c2e:	2204      	movs	r2, #4
    1c30:	4c61      	ldr	r4, [pc, #388]	; (1db8 <m2m_wifi_cb+0x348>)
    1c32:	47a0      	blx	r4
    1c34:	1e03      	subs	r3, r0, #0
    1c36:	d000      	beq.n	1c3a <m2m_wifi_cb+0x1ca>
    1c38:	e0e1      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			gu8ChNum = strState.u8NumofCh;
    1c3a:	2378      	movs	r3, #120	; 0x78
    1c3c:	18fb      	adds	r3, r7, r3
    1c3e:	781a      	ldrb	r2, [r3, #0]
    1c40:	4b65      	ldr	r3, [pc, #404]	; (1dd8 <m2m_wifi_cb+0x368>)
    1c42:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1c44:	4b5d      	ldr	r3, [pc, #372]	; (1dbc <m2m_wifi_cb+0x34c>)
    1c46:	681b      	ldr	r3, [r3, #0]
    1c48:	2b00      	cmp	r3, #0
    1c4a:	d100      	bne.n	1c4e <m2m_wifi_cb+0x1de>
    1c4c:	e0d7      	b.n	1dfe <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1c4e:	4b5b      	ldr	r3, [pc, #364]	; (1dbc <m2m_wifi_cb+0x34c>)
    1c50:	681b      	ldr	r3, [r3, #0]
    1c52:	2278      	movs	r2, #120	; 0x78
    1c54:	18ba      	adds	r2, r7, r2
    1c56:	0011      	movs	r1, r2
    1c58:	2011      	movs	r0, #17
    1c5a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1c5c:	e0cf      	b.n	1dfe <m2m_wifi_cb+0x38e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1c5e:	1dfb      	adds	r3, r7, #7
    1c60:	781b      	ldrb	r3, [r3, #0]
    1c62:	2b13      	cmp	r3, #19
    1c64:	d116      	bne.n	1c94 <m2m_wifi_cb+0x224>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    1c66:	2308      	movs	r3, #8
    1c68:	18f9      	adds	r1, r7, r3
    1c6a:	6838      	ldr	r0, [r7, #0]
    1c6c:	2300      	movs	r3, #0
    1c6e:	222c      	movs	r2, #44	; 0x2c
    1c70:	4c51      	ldr	r4, [pc, #324]	; (1db8 <m2m_wifi_cb+0x348>)
    1c72:	47a0      	blx	r4
    1c74:	1e03      	subs	r3, r0, #0
    1c76:	d000      	beq.n	1c7a <m2m_wifi_cb+0x20a>
    1c78:	e0c1      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    1c7a:	4b50      	ldr	r3, [pc, #320]	; (1dbc <m2m_wifi_cb+0x34c>)
    1c7c:	681b      	ldr	r3, [r3, #0]
    1c7e:	2b00      	cmp	r3, #0
    1c80:	d100      	bne.n	1c84 <m2m_wifi_cb+0x214>
    1c82:	e0bc      	b.n	1dfe <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1c84:	4b4d      	ldr	r3, [pc, #308]	; (1dbc <m2m_wifi_cb+0x34c>)
    1c86:	681b      	ldr	r3, [r3, #0]
    1c88:	2208      	movs	r2, #8
    1c8a:	18ba      	adds	r2, r7, r2
    1c8c:	0011      	movs	r1, r2
    1c8e:	2013      	movs	r0, #19
    1c90:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1c92:	e0b4      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1c94:	1dfb      	adds	r3, r7, #7
    1c96:	781b      	ldrb	r3, [r3, #0]
    1c98:	2b04      	cmp	r3, #4
    1c9a:	d116      	bne.n	1cca <m2m_wifi_cb+0x25a>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1c9c:	23a0      	movs	r3, #160	; 0xa0
    1c9e:	18f9      	adds	r1, r7, r3
    1ca0:	6838      	ldr	r0, [r7, #0]
    1ca2:	2300      	movs	r3, #0
    1ca4:	2204      	movs	r2, #4
    1ca6:	4c44      	ldr	r4, [pc, #272]	; (1db8 <m2m_wifi_cb+0x348>)
    1ca8:	47a0      	blx	r4
    1caa:	1e03      	subs	r3, r0, #0
    1cac:	d000      	beq.n	1cb0 <m2m_wifi_cb+0x240>
    1cae:	e0a6      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    1cb0:	4b42      	ldr	r3, [pc, #264]	; (1dbc <m2m_wifi_cb+0x34c>)
    1cb2:	681b      	ldr	r3, [r3, #0]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d100      	bne.n	1cba <m2m_wifi_cb+0x24a>
    1cb8:	e0a1      	b.n	1dfe <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1cba:	4b40      	ldr	r3, [pc, #256]	; (1dbc <m2m_wifi_cb+0x34c>)
    1cbc:	681b      	ldr	r3, [r3, #0]
    1cbe:	22a0      	movs	r2, #160	; 0xa0
    1cc0:	18ba      	adds	r2, r7, r2
    1cc2:	0011      	movs	r1, r2
    1cc4:	2004      	movs	r0, #4
    1cc6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1cc8:	e099      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1cca:	1dfb      	adds	r3, r7, #7
    1ccc:	781b      	ldrb	r3, [r3, #0]
    1cce:	2b65      	cmp	r3, #101	; 0x65
    1cd0:	d116      	bne.n	1d00 <m2m_wifi_cb+0x290>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1cd2:	23a0      	movs	r3, #160	; 0xa0
    1cd4:	18f9      	adds	r1, r7, r3
    1cd6:	6838      	ldr	r0, [r7, #0]
    1cd8:	2300      	movs	r3, #0
    1cda:	2204      	movs	r2, #4
    1cdc:	4c36      	ldr	r4, [pc, #216]	; (1db8 <m2m_wifi_cb+0x348>)
    1cde:	47a0      	blx	r4
    1ce0:	1e03      	subs	r3, r0, #0
    1ce2:	d000      	beq.n	1ce6 <m2m_wifi_cb+0x276>
    1ce4:	e08b      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    1ce6:	4b35      	ldr	r3, [pc, #212]	; (1dbc <m2m_wifi_cb+0x34c>)
    1ce8:	681b      	ldr	r3, [r3, #0]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d100      	bne.n	1cf0 <m2m_wifi_cb+0x280>
    1cee:	e086      	b.n	1dfe <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1cf0:	4b32      	ldr	r3, [pc, #200]	; (1dbc <m2m_wifi_cb+0x34c>)
    1cf2:	681b      	ldr	r3, [r3, #0]
    1cf4:	22a0      	movs	r2, #160	; 0xa0
    1cf6:	18ba      	adds	r2, r7, r2
    1cf8:	0011      	movs	r1, r2
    1cfa:	2065      	movs	r0, #101	; 0x65
    1cfc:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1cfe:	e07e      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1d00:	1dfb      	adds	r3, r7, #7
    1d02:	781b      	ldrb	r3, [r3, #0]
    1d04:	2b09      	cmp	r3, #9
    1d06:	d116      	bne.n	1d36 <m2m_wifi_cb+0x2c6>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1d08:	2308      	movs	r3, #8
    1d0a:	18f9      	adds	r1, r7, r3
    1d0c:	6838      	ldr	r0, [r7, #0]
    1d0e:	2301      	movs	r3, #1
    1d10:	2264      	movs	r2, #100	; 0x64
    1d12:	4c29      	ldr	r4, [pc, #164]	; (1db8 <m2m_wifi_cb+0x348>)
    1d14:	47a0      	blx	r4
    1d16:	1e03      	subs	r3, r0, #0
    1d18:	d000      	beq.n	1d1c <m2m_wifi_cb+0x2ac>
    1d1a:	e070      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
    1d1c:	4b27      	ldr	r3, [pc, #156]	; (1dbc <m2m_wifi_cb+0x34c>)
    1d1e:	681b      	ldr	r3, [r3, #0]
    1d20:	2b00      	cmp	r3, #0
    1d22:	d100      	bne.n	1d26 <m2m_wifi_cb+0x2b6>
    1d24:	e06b      	b.n	1dfe <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    1d26:	4b25      	ldr	r3, [pc, #148]	; (1dbc <m2m_wifi_cb+0x34c>)
    1d28:	681b      	ldr	r3, [r3, #0]
    1d2a:	2208      	movs	r2, #8
    1d2c:	18ba      	adds	r2, r7, r2
    1d2e:	0011      	movs	r1, r2
    1d30:	2009      	movs	r0, #9
    1d32:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1d34:	e063      	b.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1d36:	1dfb      	adds	r3, r7, #7
    1d38:	781b      	ldrb	r3, [r3, #0]
    1d3a:	2b2a      	cmp	r3, #42	; 0x2a
    1d3c:	d114      	bne.n	1d68 <m2m_wifi_cb+0x2f8>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1d3e:	2374      	movs	r3, #116	; 0x74
    1d40:	18f9      	adds	r1, r7, r3
    1d42:	6838      	ldr	r0, [r7, #0]
    1d44:	2301      	movs	r3, #1
    1d46:	2204      	movs	r2, #4
    1d48:	4c1b      	ldr	r4, [pc, #108]	; (1db8 <m2m_wifi_cb+0x348>)
    1d4a:	47a0      	blx	r4
    1d4c:	1e03      	subs	r3, r0, #0
    1d4e:	d156      	bne.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
    1d50:	4b1a      	ldr	r3, [pc, #104]	; (1dbc <m2m_wifi_cb+0x34c>)
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	2b00      	cmp	r3, #0
    1d56:	d052      	beq.n	1dfe <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1d58:	4b18      	ldr	r3, [pc, #96]	; (1dbc <m2m_wifi_cb+0x34c>)
    1d5a:	681b      	ldr	r3, [r3, #0]
    1d5c:	2274      	movs	r2, #116	; 0x74
    1d5e:	18ba      	adds	r2, r7, r2
    1d60:	0011      	movs	r1, r2
    1d62:	202a      	movs	r0, #42	; 0x2a
    1d64:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1d66:	e04a      	b.n	1dfe <m2m_wifi_cb+0x38e>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1d68:	1dfb      	adds	r3, r7, #7
    1d6a:	781b      	ldrb	r3, [r3, #0]
    1d6c:	2b20      	cmp	r3, #32
    1d6e:	d135      	bne.n	1ddc <m2m_wifi_cb+0x36c>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1d70:	236c      	movs	r3, #108	; 0x6c
    1d72:	18f9      	adds	r1, r7, r3
    1d74:	6838      	ldr	r0, [r7, #0]
    1d76:	2300      	movs	r3, #0
    1d78:	2208      	movs	r2, #8
    1d7a:	4c0f      	ldr	r4, [pc, #60]	; (1db8 <m2m_wifi_cb+0x348>)
    1d7c:	47a0      	blx	r4
    1d7e:	1e03      	subs	r3, r0, #0
    1d80:	d13d      	bne.n	1dfe <m2m_wifi_cb+0x38e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    1d82:	683b      	ldr	r3, [r7, #0]
    1d84:	3308      	adds	r3, #8
    1d86:	0018      	movs	r0, r3
    1d88:	236c      	movs	r3, #108	; 0x6c
    1d8a:	18fb      	adds	r3, r7, r3
    1d8c:	6819      	ldr	r1, [r3, #0]
    1d8e:	236c      	movs	r3, #108	; 0x6c
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	889a      	ldrh	r2, [r3, #4]
    1d94:	2301      	movs	r3, #1
    1d96:	4c08      	ldr	r4, [pc, #32]	; (1db8 <m2m_wifi_cb+0x348>)
    1d98:	47a0      	blx	r4
    1d9a:	1e03      	subs	r3, r0, #0
    1d9c:	d12f      	bne.n	1dfe <m2m_wifi_cb+0x38e>
			{
				if(gpfAppWifiCb)
    1d9e:	4b07      	ldr	r3, [pc, #28]	; (1dbc <m2m_wifi_cb+0x34c>)
    1da0:	681b      	ldr	r3, [r3, #0]
    1da2:	2b00      	cmp	r3, #0
    1da4:	d02b      	beq.n	1dfe <m2m_wifi_cb+0x38e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    1da6:	4b05      	ldr	r3, [pc, #20]	; (1dbc <m2m_wifi_cb+0x34c>)
    1da8:	681b      	ldr	r3, [r3, #0]
    1daa:	226c      	movs	r2, #108	; 0x6c
    1dac:	18ba      	adds	r2, r7, r2
    1dae:	0011      	movs	r1, r2
    1db0:	2020      	movs	r0, #32
    1db2:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1db4:	e023      	b.n	1dfe <m2m_wifi_cb+0x38e>
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	00001835 	.word	0x00001835
    1dbc:	200000a8 	.word	0x200000a8
    1dc0:	00000ce1 	.word	0x00000ce1
    1dc4:	0000db94 	.word	0x0000db94
    1dc8:	0000c461 	.word	0x0000c461
    1dcc:	0000dba0 	.word	0x0000dba0
    1dd0:	0000c495 	.word	0x0000c495
    1dd4:	200000a5 	.word	0x200000a5
    1dd8:	200000a4 	.word	0x200000a4
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1ddc:	2392      	movs	r3, #146	; 0x92
    1dde:	005a      	lsls	r2, r3, #1
    1de0:	4909      	ldr	r1, [pc, #36]	; (1e08 <m2m_wifi_cb+0x398>)
    1de2:	4b0a      	ldr	r3, [pc, #40]	; (1e0c <m2m_wifi_cb+0x39c>)
    1de4:	0018      	movs	r0, r3
    1de6:	4b0a      	ldr	r3, [pc, #40]	; (1e10 <m2m_wifi_cb+0x3a0>)
    1de8:	4798      	blx	r3
    1dea:	1dfb      	adds	r3, r7, #7
    1dec:	781a      	ldrb	r2, [r3, #0]
    1dee:	4b09      	ldr	r3, [pc, #36]	; (1e14 <m2m_wifi_cb+0x3a4>)
    1df0:	0011      	movs	r1, r2
    1df2:	0018      	movs	r0, r3
    1df4:	4b06      	ldr	r3, [pc, #24]	; (1e10 <m2m_wifi_cb+0x3a0>)
    1df6:	4798      	blx	r3
    1df8:	200d      	movs	r0, #13
    1dfa:	4b07      	ldr	r3, [pc, #28]	; (1e18 <m2m_wifi_cb+0x3a8>)
    1dfc:	4798      	blx	r3
	}
}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	46bd      	mov	sp, r7
    1e02:	b02b      	add	sp, #172	; 0xac
    1e04:	bd90      	pop	{r4, r7, pc}
    1e06:	46c0      	nop			; (mov r8, r8)
    1e08:	0000df48 	.word	0x0000df48
    1e0c:	0000dbc0 	.word	0x0000dbc0
    1e10:	0000c461 	.word	0x0000c461
    1e14:	0000dbd4 	.word	0x0000dbd4
    1e18:	0000c495 	.word	0x0000c495

00001e1c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1e1c:	b590      	push	{r4, r7, lr}
    1e1e:	b091      	sub	sp, #68	; 0x44
    1e20:	af02      	add	r7, sp, #8
    1e22:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    1e24:	2337      	movs	r3, #55	; 0x37
    1e26:	18fb      	adds	r3, r7, r3
    1e28:	2200      	movs	r2, #0
    1e2a:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1e2c:	230b      	movs	r3, #11
    1e2e:	18fb      	adds	r3, r7, r3
    1e30:	2201      	movs	r2, #1
    1e32:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1e34:	687b      	ldr	r3, [r7, #4]
    1e36:	2b00      	cmp	r3, #0
    1e38:	d104      	bne.n	1e44 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1e3a:	2337      	movs	r3, #55	; 0x37
    1e3c:	18fb      	adds	r3, r7, r3
    1e3e:	22f4      	movs	r2, #244	; 0xf4
    1e40:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    1e42:	e0ad      	b.n	1fa0 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	681a      	ldr	r2, [r3, #0]
    1e48:	4b59      	ldr	r3, [pc, #356]	; (1fb0 <m2m_wifi_init+0x194>)
    1e4a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1e4c:	4b59      	ldr	r3, [pc, #356]	; (1fb4 <m2m_wifi_init+0x198>)
    1e4e:	2200      	movs	r2, #0
    1e50:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1e52:	2337      	movs	r3, #55	; 0x37
    1e54:	18fc      	adds	r4, r7, r3
    1e56:	230b      	movs	r3, #11
    1e58:	18fb      	adds	r3, r7, r3
    1e5a:	0018      	movs	r0, r3
    1e5c:	4b56      	ldr	r3, [pc, #344]	; (1fb8 <m2m_wifi_init+0x19c>)
    1e5e:	4798      	blx	r3
    1e60:	0003      	movs	r3, r0
    1e62:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1e64:	2337      	movs	r3, #55	; 0x37
    1e66:	18fb      	adds	r3, r7, r3
    1e68:	781b      	ldrb	r3, [r3, #0]
    1e6a:	b25b      	sxtb	r3, r3
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d000      	beq.n	1e72 <m2m_wifi_init+0x56>
    1e70:	e093      	b.n	1f9a <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    1e72:	2337      	movs	r3, #55	; 0x37
    1e74:	18fc      	adds	r4, r7, r3
    1e76:	2000      	movs	r0, #0
    1e78:	4b50      	ldr	r3, [pc, #320]	; (1fbc <m2m_wifi_init+0x1a0>)
    1e7a:	4798      	blx	r3
    1e7c:	0003      	movs	r3, r0
    1e7e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1e80:	2337      	movs	r3, #55	; 0x37
    1e82:	18fb      	adds	r3, r7, r3
    1e84:	781b      	ldrb	r3, [r3, #0]
    1e86:	b25b      	sxtb	r3, r3
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d000      	beq.n	1e8e <m2m_wifi_init+0x72>
    1e8c:	e080      	b.n	1f90 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1e8e:	4b4c      	ldr	r3, [pc, #304]	; (1fc0 <m2m_wifi_init+0x1a4>)
    1e90:	0019      	movs	r1, r3
    1e92:	2001      	movs	r0, #1
    1e94:	4b4b      	ldr	r3, [pc, #300]	; (1fc4 <m2m_wifi_init+0x1a8>)
    1e96:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    1e98:	2337      	movs	r3, #55	; 0x37
    1e9a:	18fc      	adds	r4, r7, r3
    1e9c:	230c      	movs	r3, #12
    1e9e:	18fb      	adds	r3, r7, r3
    1ea0:	0018      	movs	r0, r3
    1ea2:	4b49      	ldr	r3, [pc, #292]	; (1fc8 <m2m_wifi_init+0x1ac>)
    1ea4:	4798      	blx	r3
    1ea6:	0003      	movs	r3, r0
    1ea8:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    1eaa:	4b48      	ldr	r3, [pc, #288]	; (1fcc <m2m_wifi_init+0x1b0>)
    1eac:	0018      	movs	r0, r3
    1eae:	4b48      	ldr	r3, [pc, #288]	; (1fd0 <m2m_wifi_init+0x1b4>)
    1eb0:	4798      	blx	r3
    1eb2:	230c      	movs	r3, #12
    1eb4:	18fb      	adds	r3, r7, r3
    1eb6:	791b      	ldrb	r3, [r3, #4]
    1eb8:	0019      	movs	r1, r3
    1eba:	230c      	movs	r3, #12
    1ebc:	18fb      	adds	r3, r7, r3
    1ebe:	795b      	ldrb	r3, [r3, #5]
    1ec0:	001a      	movs	r2, r3
    1ec2:	230c      	movs	r3, #12
    1ec4:	18fb      	adds	r3, r7, r3
    1ec6:	799b      	ldrb	r3, [r3, #6]
    1ec8:	001c      	movs	r4, r3
    1eca:	230c      	movs	r3, #12
    1ecc:	18fb      	adds	r3, r7, r3
    1ece:	8c1b      	ldrh	r3, [r3, #32]
    1ed0:	4840      	ldr	r0, [pc, #256]	; (1fd4 <m2m_wifi_init+0x1b8>)
    1ed2:	9300      	str	r3, [sp, #0]
    1ed4:	0023      	movs	r3, r4
    1ed6:	4c3e      	ldr	r4, [pc, #248]	; (1fd0 <m2m_wifi_init+0x1b4>)
    1ed8:	47a0      	blx	r4
    1eda:	200d      	movs	r0, #13
    1edc:	4b3e      	ldr	r3, [pc, #248]	; (1fd8 <m2m_wifi_init+0x1bc>)
    1ede:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1ee0:	4b3a      	ldr	r3, [pc, #232]	; (1fcc <m2m_wifi_init+0x1b0>)
    1ee2:	0018      	movs	r0, r3
    1ee4:	4b3a      	ldr	r3, [pc, #232]	; (1fd0 <m2m_wifi_init+0x1b4>)
    1ee6:	4798      	blx	r3
    1ee8:	230c      	movs	r3, #12
    1eea:	18fb      	adds	r3, r7, r3
    1eec:	3316      	adds	r3, #22
    1eee:	001a      	movs	r2, r3
    1ef0:	230c      	movs	r3, #12
    1ef2:	18fb      	adds	r3, r7, r3
    1ef4:	330a      	adds	r3, #10
    1ef6:	0019      	movs	r1, r3
    1ef8:	4b38      	ldr	r3, [pc, #224]	; (1fdc <m2m_wifi_init+0x1c0>)
    1efa:	0018      	movs	r0, r3
    1efc:	4b34      	ldr	r3, [pc, #208]	; (1fd0 <m2m_wifi_init+0x1b4>)
    1efe:	4798      	blx	r3
    1f00:	200d      	movs	r0, #13
    1f02:	4b35      	ldr	r3, [pc, #212]	; (1fd8 <m2m_wifi_init+0x1bc>)
    1f04:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1f06:	4b31      	ldr	r3, [pc, #196]	; (1fcc <m2m_wifi_init+0x1b0>)
    1f08:	0018      	movs	r0, r3
    1f0a:	4b31      	ldr	r3, [pc, #196]	; (1fd0 <m2m_wifi_init+0x1b4>)
    1f0c:	4798      	blx	r3
    1f0e:	230c      	movs	r3, #12
    1f10:	18fb      	adds	r3, r7, r3
    1f12:	79db      	ldrb	r3, [r3, #7]
    1f14:	0019      	movs	r1, r3
    1f16:	230c      	movs	r3, #12
    1f18:	18fb      	adds	r3, r7, r3
    1f1a:	7a1b      	ldrb	r3, [r3, #8]
    1f1c:	001a      	movs	r2, r3
    1f1e:	230c      	movs	r3, #12
    1f20:	18fb      	adds	r3, r7, r3
    1f22:	7a5b      	ldrb	r3, [r3, #9]
    1f24:	482e      	ldr	r0, [pc, #184]	; (1fe0 <m2m_wifi_init+0x1c4>)
    1f26:	4c2a      	ldr	r4, [pc, #168]	; (1fd0 <m2m_wifi_init+0x1b4>)
    1f28:	47a0      	blx	r4
    1f2a:	200d      	movs	r0, #13
    1f2c:	4b2a      	ldr	r3, [pc, #168]	; (1fd8 <m2m_wifi_init+0x1bc>)
    1f2e:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    1f30:	4b26      	ldr	r3, [pc, #152]	; (1fcc <m2m_wifi_init+0x1b0>)
    1f32:	0018      	movs	r0, r3
    1f34:	4b26      	ldr	r3, [pc, #152]	; (1fd0 <m2m_wifi_init+0x1b4>)
    1f36:	4798      	blx	r3
    1f38:	482a      	ldr	r0, [pc, #168]	; (1fe4 <m2m_wifi_init+0x1c8>)
    1f3a:	2302      	movs	r3, #2
    1f3c:	2205      	movs	r2, #5
    1f3e:	2113      	movs	r1, #19
    1f40:	4c23      	ldr	r4, [pc, #140]	; (1fd0 <m2m_wifi_init+0x1b4>)
    1f42:	47a0      	blx	r4
    1f44:	200d      	movs	r0, #13
    1f46:	4b24      	ldr	r3, [pc, #144]	; (1fd8 <m2m_wifi_init+0x1bc>)
    1f48:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    1f4a:	4b20      	ldr	r3, [pc, #128]	; (1fcc <m2m_wifi_init+0x1b0>)
    1f4c:	0018      	movs	r0, r3
    1f4e:	4b20      	ldr	r3, [pc, #128]	; (1fd0 <m2m_wifi_init+0x1b4>)
    1f50:	4798      	blx	r3
    1f52:	4a25      	ldr	r2, [pc, #148]	; (1fe8 <m2m_wifi_init+0x1cc>)
    1f54:	4925      	ldr	r1, [pc, #148]	; (1fec <m2m_wifi_init+0x1d0>)
    1f56:	4b26      	ldr	r3, [pc, #152]	; (1ff0 <m2m_wifi_init+0x1d4>)
    1f58:	0018      	movs	r0, r3
    1f5a:	4b1d      	ldr	r3, [pc, #116]	; (1fd0 <m2m_wifi_init+0x1b4>)
    1f5c:	4798      	blx	r3
    1f5e:	200d      	movs	r0, #13
    1f60:	4b1d      	ldr	r3, [pc, #116]	; (1fd8 <m2m_wifi_init+0x1bc>)
    1f62:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1f64:	2337      	movs	r3, #55	; 0x37
    1f66:	18fb      	adds	r3, r7, r3
    1f68:	781b      	ldrb	r3, [r3, #0]
    1f6a:	b25b      	sxtb	r3, r3
    1f6c:	330d      	adds	r3, #13
    1f6e:	d116      	bne.n	1f9e <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    1f70:	23e8      	movs	r3, #232	; 0xe8
    1f72:	33ff      	adds	r3, #255	; 0xff
    1f74:	001a      	movs	r2, r3
    1f76:	491f      	ldr	r1, [pc, #124]	; (1ff4 <m2m_wifi_init+0x1d8>)
    1f78:	4b1f      	ldr	r3, [pc, #124]	; (1ff8 <m2m_wifi_init+0x1dc>)
    1f7a:	0018      	movs	r0, r3
    1f7c:	4b14      	ldr	r3, [pc, #80]	; (1fd0 <m2m_wifi_init+0x1b4>)
    1f7e:	4798      	blx	r3
    1f80:	4b1e      	ldr	r3, [pc, #120]	; (1ffc <m2m_wifi_init+0x1e0>)
    1f82:	0018      	movs	r0, r3
    1f84:	4b1e      	ldr	r3, [pc, #120]	; (2000 <STACK_SIZE>)
    1f86:	4798      	blx	r3
    1f88:	200d      	movs	r0, #13
    1f8a:	4b13      	ldr	r3, [pc, #76]	; (1fd8 <m2m_wifi_init+0x1bc>)
    1f8c:	4798      	blx	r3
	}

	goto _EXIT0;
    1f8e:	e006      	b.n	1f9e <m2m_wifi_init+0x182>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1f90:	46c0      	nop			; (mov r8, r8)
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
    1f92:	2000      	movs	r0, #0
    1f94:	4b1b      	ldr	r3, [pc, #108]	; (2004 <STACK_SIZE+0x4>)
    1f96:	4798      	blx	r3
    1f98:	e002      	b.n	1fa0 <m2m_wifi_init+0x184>
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	e000      	b.n	1fa0 <m2m_wifi_init+0x184>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
    1f9e:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
    1fa0:	2337      	movs	r3, #55	; 0x37
    1fa2:	18fb      	adds	r3, r7, r3
    1fa4:	781b      	ldrb	r3, [r3, #0]
    1fa6:	b25b      	sxtb	r3, r3
}
    1fa8:	0018      	movs	r0, r3
    1faa:	46bd      	mov	sp, r7
    1fac:	b00f      	add	sp, #60	; 0x3c
    1fae:	bd90      	pop	{r4, r7, pc}
    1fb0:	200000a8 	.word	0x200000a8
    1fb4:	200000a5 	.word	0x200000a5
    1fb8:	00003129 	.word	0x00003129
    1fbc:	00000ef9 	.word	0x00000ef9
    1fc0:	00001a71 	.word	0x00001a71
    1fc4:	000019b5 	.word	0x000019b5
    1fc8:	00002f5d 	.word	0x00002f5d
    1fcc:	0000db94 	.word	0x0000db94
    1fd0:	0000c461 	.word	0x0000c461
    1fd4:	0000dd28 	.word	0x0000dd28
    1fd8:	0000c495 	.word	0x0000c495
    1fdc:	0000dd50 	.word	0x0000dd50
    1fe0:	0000dd6c 	.word	0x0000dd6c
    1fe4:	0000dd90 	.word	0x0000dd90
    1fe8:	0000dda8 	.word	0x0000dda8
    1fec:	0000ddb4 	.word	0x0000ddb4
    1ff0:	0000ddc0 	.word	0x0000ddc0
    1ff4:	0000df54 	.word	0x0000df54
    1ff8:	0000dbc0 	.word	0x0000dbc0
    1ffc:	0000ddd8 	.word	0x0000ddd8
    2000:	0000c581 	.word	0x0000c581
    2004:	000032bd 	.word	0x000032bd

00002008 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    2008:	b580      	push	{r7, lr}
    200a:	b082      	sub	sp, #8
    200c:	af00      	add	r7, sp, #0
    200e:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    2010:	4b03      	ldr	r3, [pc, #12]	; (2020 <m2m_wifi_handle_events+0x18>)
    2012:	4798      	blx	r3
    2014:	0003      	movs	r3, r0
}
    2016:	0018      	movs	r0, r3
    2018:	46bd      	mov	sp, r7
    201a:	b002      	add	sp, #8
    201c:	bd80      	pop	{r7, pc}
    201e:	46c0      	nop			; (mov r8, r8)
    2020:	000017a5 	.word	0x000017a5

00002024 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    2024:	b590      	push	{r4, r7, lr}
    2026:	b087      	sub	sp, #28
    2028:	af02      	add	r7, sp, #8
    202a:	60f8      	str	r0, [r7, #12]
    202c:	0008      	movs	r0, r1
    202e:	0011      	movs	r1, r2
    2030:	607b      	str	r3, [r7, #4]
    2032:	230b      	movs	r3, #11
    2034:	18fb      	adds	r3, r7, r3
    2036:	1c02      	adds	r2, r0, #0
    2038:	701a      	strb	r2, [r3, #0]
    203a:	230a      	movs	r3, #10
    203c:	18fb      	adds	r3, r7, r3
    203e:	1c0a      	adds	r2, r1, #0
    2040:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    2042:	687c      	ldr	r4, [r7, #4]
    2044:	230a      	movs	r3, #10
    2046:	18fb      	adds	r3, r7, r3
    2048:	781a      	ldrb	r2, [r3, #0]
    204a:	230b      	movs	r3, #11
    204c:	18fb      	adds	r3, r7, r3
    204e:	7819      	ldrb	r1, [r3, #0]
    2050:	68f8      	ldr	r0, [r7, #12]
    2052:	2300      	movs	r3, #0
    2054:	9301      	str	r3, [sp, #4]
    2056:	2320      	movs	r3, #32
    2058:	18fb      	adds	r3, r7, r3
    205a:	881b      	ldrh	r3, [r3, #0]
    205c:	9300      	str	r3, [sp, #0]
    205e:	0023      	movs	r3, r4
    2060:	4c03      	ldr	r4, [pc, #12]	; (2070 <m2m_wifi_connect+0x4c>)
    2062:	47a0      	blx	r4
    2064:	0003      	movs	r3, r0
}
    2066:	0018      	movs	r0, r3
    2068:	46bd      	mov	sp, r7
    206a:	b005      	add	sp, #20
    206c:	bd90      	pop	{r4, r7, pc}
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	00002075 	.word	0x00002075

00002074 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    2074:	b5b0      	push	{r4, r5, r7, lr}
    2076:	b0aa      	sub	sp, #168	; 0xa8
    2078:	af04      	add	r7, sp, #16
    207a:	60f8      	str	r0, [r7, #12]
    207c:	0008      	movs	r0, r1
    207e:	0011      	movs	r1, r2
    2080:	607b      	str	r3, [r7, #4]
    2082:	230b      	movs	r3, #11
    2084:	18fb      	adds	r3, r7, r3
    2086:	1c02      	adds	r2, r0, #0
    2088:	701a      	strb	r2, [r3, #0]
    208a:	230a      	movs	r3, #10
    208c:	18fb      	adds	r3, r7, r3
    208e:	1c0a      	adds	r2, r1, #0
    2090:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    2092:	2397      	movs	r3, #151	; 0x97
    2094:	18fb      	adds	r3, r7, r3
    2096:	2200      	movs	r2, #0
    2098:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    209a:	230a      	movs	r3, #10
    209c:	18fb      	adds	r3, r7, r3
    209e:	781b      	ldrb	r3, [r3, #0]
    20a0:	2b01      	cmp	r3, #1
    20a2:	d100      	bne.n	20a6 <m2m_wifi_connect_sc+0x32>
    20a4:	e083      	b.n	21ae <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    20a6:	687b      	ldr	r3, [r7, #4]
    20a8:	2b00      	cmp	r3, #0
    20aa:	d111      	bne.n	20d0 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    20ac:	4adb      	ldr	r2, [pc, #876]	; (241c <m2m_wifi_connect_sc+0x3a8>)
    20ae:	49dc      	ldr	r1, [pc, #880]	; (2420 <m2m_wifi_connect_sc+0x3ac>)
    20b0:	4bdc      	ldr	r3, [pc, #880]	; (2424 <m2m_wifi_connect_sc+0x3b0>)
    20b2:	0018      	movs	r0, r3
    20b4:	4bdc      	ldr	r3, [pc, #880]	; (2428 <m2m_wifi_connect_sc+0x3b4>)
    20b6:	4798      	blx	r3
    20b8:	4bdc      	ldr	r3, [pc, #880]	; (242c <m2m_wifi_connect_sc+0x3b8>)
    20ba:	0018      	movs	r0, r3
    20bc:	4bdc      	ldr	r3, [pc, #880]	; (2430 <m2m_wifi_connect_sc+0x3bc>)
    20be:	4798      	blx	r3
    20c0:	200d      	movs	r0, #13
    20c2:	4bdc      	ldr	r3, [pc, #880]	; (2434 <m2m_wifi_connect_sc+0x3c0>)
    20c4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    20c6:	2397      	movs	r3, #151	; 0x97
    20c8:	18fb      	adds	r3, r7, r3
    20ca:	22f4      	movs	r2, #244	; 0xf4
    20cc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    20ce:	e1f5      	b.n	24bc <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    20d0:	230a      	movs	r3, #10
    20d2:	18fb      	adds	r3, r7, r3
    20d4:	781b      	ldrb	r3, [r3, #0]
    20d6:	2b02      	cmp	r3, #2
    20d8:	d169      	bne.n	21ae <m2m_wifi_connect_sc+0x13a>
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	0018      	movs	r0, r3
    20de:	4bd6      	ldr	r3, [pc, #856]	; (2438 <m2m_wifi_connect_sc+0x3c4>)
    20e0:	4798      	blx	r3
    20e2:	1e03      	subs	r3, r0, #0
    20e4:	2b40      	cmp	r3, #64	; 0x40
    20e6:	d162      	bne.n	21ae <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    20e8:	2396      	movs	r3, #150	; 0x96
    20ea:	18fb      	adds	r3, r7, r3
    20ec:	2200      	movs	r2, #0
    20ee:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    20f0:	687b      	ldr	r3, [r7, #4]
    20f2:	2290      	movs	r2, #144	; 0x90
    20f4:	18ba      	adds	r2, r7, r2
    20f6:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    20f8:	e054      	b.n	21a4 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    20fa:	2396      	movs	r3, #150	; 0x96
    20fc:	18fb      	adds	r3, r7, r3
    20fe:	781b      	ldrb	r3, [r3, #0]
    2100:	2290      	movs	r2, #144	; 0x90
    2102:	18ba      	adds	r2, r7, r2
    2104:	6812      	ldr	r2, [r2, #0]
    2106:	18d3      	adds	r3, r2, r3
    2108:	781b      	ldrb	r3, [r3, #0]
    210a:	2b2f      	cmp	r3, #47	; 0x2f
    210c:	d931      	bls.n	2172 <m2m_wifi_connect_sc+0xfe>
    210e:	2396      	movs	r3, #150	; 0x96
    2110:	18fb      	adds	r3, r7, r3
    2112:	781b      	ldrb	r3, [r3, #0]
    2114:	2290      	movs	r2, #144	; 0x90
    2116:	18ba      	adds	r2, r7, r2
    2118:	6812      	ldr	r2, [r2, #0]
    211a:	18d3      	adds	r3, r2, r3
    211c:	781b      	ldrb	r3, [r3, #0]
    211e:	2b39      	cmp	r3, #57	; 0x39
    2120:	d909      	bls.n	2136 <m2m_wifi_connect_sc+0xc2>
    2122:	2396      	movs	r3, #150	; 0x96
    2124:	18fb      	adds	r3, r7, r3
    2126:	781b      	ldrb	r3, [r3, #0]
    2128:	2290      	movs	r2, #144	; 0x90
    212a:	18ba      	adds	r2, r7, r2
    212c:	6812      	ldr	r2, [r2, #0]
    212e:	18d3      	adds	r3, r2, r3
    2130:	781b      	ldrb	r3, [r3, #0]
    2132:	2b40      	cmp	r3, #64	; 0x40
    2134:	d91d      	bls.n	2172 <m2m_wifi_connect_sc+0xfe>
    2136:	2396      	movs	r3, #150	; 0x96
    2138:	18fb      	adds	r3, r7, r3
    213a:	781b      	ldrb	r3, [r3, #0]
    213c:	2290      	movs	r2, #144	; 0x90
    213e:	18ba      	adds	r2, r7, r2
    2140:	6812      	ldr	r2, [r2, #0]
    2142:	18d3      	adds	r3, r2, r3
    2144:	781b      	ldrb	r3, [r3, #0]
    2146:	2b46      	cmp	r3, #70	; 0x46
    2148:	d909      	bls.n	215e <m2m_wifi_connect_sc+0xea>
    214a:	2396      	movs	r3, #150	; 0x96
    214c:	18fb      	adds	r3, r7, r3
    214e:	781b      	ldrb	r3, [r3, #0]
    2150:	2290      	movs	r2, #144	; 0x90
    2152:	18ba      	adds	r2, r7, r2
    2154:	6812      	ldr	r2, [r2, #0]
    2156:	18d3      	adds	r3, r2, r3
    2158:	781b      	ldrb	r3, [r3, #0]
    215a:	2b60      	cmp	r3, #96	; 0x60
    215c:	d909      	bls.n	2172 <m2m_wifi_connect_sc+0xfe>
    215e:	2396      	movs	r3, #150	; 0x96
    2160:	18fb      	adds	r3, r7, r3
    2162:	781b      	ldrb	r3, [r3, #0]
    2164:	2290      	movs	r2, #144	; 0x90
    2166:	18ba      	adds	r2, r7, r2
    2168:	6812      	ldr	r2, [r2, #0]
    216a:	18d3      	adds	r3, r2, r3
    216c:	781b      	ldrb	r3, [r3, #0]
    216e:	2b66      	cmp	r3, #102	; 0x66
    2170:	d911      	bls.n	2196 <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    2172:	4ab2      	ldr	r2, [pc, #712]	; (243c <m2m_wifi_connect_sc+0x3c8>)
    2174:	49aa      	ldr	r1, [pc, #680]	; (2420 <m2m_wifi_connect_sc+0x3ac>)
    2176:	4bab      	ldr	r3, [pc, #684]	; (2424 <m2m_wifi_connect_sc+0x3b0>)
    2178:	0018      	movs	r0, r3
    217a:	4bab      	ldr	r3, [pc, #684]	; (2428 <m2m_wifi_connect_sc+0x3b4>)
    217c:	4798      	blx	r3
    217e:	4bb0      	ldr	r3, [pc, #704]	; (2440 <m2m_wifi_connect_sc+0x3cc>)
    2180:	0018      	movs	r0, r3
    2182:	4bab      	ldr	r3, [pc, #684]	; (2430 <m2m_wifi_connect_sc+0x3bc>)
    2184:	4798      	blx	r3
    2186:	200d      	movs	r0, #13
    2188:	4baa      	ldr	r3, [pc, #680]	; (2434 <m2m_wifi_connect_sc+0x3c0>)
    218a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    218c:	2397      	movs	r3, #151	; 0x97
    218e:	18fb      	adds	r3, r7, r3
    2190:	22f4      	movs	r2, #244	; 0xf4
    2192:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    2194:	e192      	b.n	24bc <m2m_wifi_connect_sc+0x448>
				}
				i++;
    2196:	2396      	movs	r3, #150	; 0x96
    2198:	18fb      	adds	r3, r7, r3
    219a:	781a      	ldrb	r2, [r3, #0]
    219c:	2396      	movs	r3, #150	; 0x96
    219e:	18fb      	adds	r3, r7, r3
    21a0:	3201      	adds	r2, #1
    21a2:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    21a4:	2396      	movs	r3, #150	; 0x96
    21a6:	18fb      	adds	r3, r7, r3
    21a8:	781b      	ldrb	r3, [r3, #0]
    21aa:	2b3f      	cmp	r3, #63	; 0x3f
    21ac:	d9a5      	bls.n	20fa <m2m_wifi_connect_sc+0x86>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    21ae:	230b      	movs	r3, #11
    21b0:	18fb      	adds	r3, r7, r3
    21b2:	781b      	ldrb	r3, [r3, #0]
    21b4:	2b00      	cmp	r3, #0
    21b6:	d004      	beq.n	21c2 <m2m_wifi_connect_sc+0x14e>
    21b8:	230b      	movs	r3, #11
    21ba:	18fb      	adds	r3, r7, r3
    21bc:	781b      	ldrb	r3, [r3, #0]
    21be:	2b20      	cmp	r3, #32
    21c0:	d911      	bls.n	21e6 <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    21c2:	4aa0      	ldr	r2, [pc, #640]	; (2444 <m2m_wifi_connect_sc+0x3d0>)
    21c4:	4996      	ldr	r1, [pc, #600]	; (2420 <m2m_wifi_connect_sc+0x3ac>)
    21c6:	4b97      	ldr	r3, [pc, #604]	; (2424 <m2m_wifi_connect_sc+0x3b0>)
    21c8:	0018      	movs	r0, r3
    21ca:	4b97      	ldr	r3, [pc, #604]	; (2428 <m2m_wifi_connect_sc+0x3b4>)
    21cc:	4798      	blx	r3
    21ce:	4b9e      	ldr	r3, [pc, #632]	; (2448 <m2m_wifi_connect_sc+0x3d4>)
    21d0:	0018      	movs	r0, r3
    21d2:	4b97      	ldr	r3, [pc, #604]	; (2430 <m2m_wifi_connect_sc+0x3bc>)
    21d4:	4798      	blx	r3
    21d6:	200d      	movs	r0, #13
    21d8:	4b96      	ldr	r3, [pc, #600]	; (2434 <m2m_wifi_connect_sc+0x3c0>)
    21da:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    21dc:	2397      	movs	r3, #151	; 0x97
    21de:	18fb      	adds	r3, r7, r3
    21e0:	22f4      	movs	r2, #244	; 0xf4
    21e2:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    21e4:	e16a      	b.n	24bc <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    21e6:	23a8      	movs	r3, #168	; 0xa8
    21e8:	18fb      	adds	r3, r7, r3
    21ea:	881b      	ldrh	r3, [r3, #0]
    21ec:	2b00      	cmp	r3, #0
    21ee:	d004      	beq.n	21fa <m2m_wifi_connect_sc+0x186>
    21f0:	23a8      	movs	r3, #168	; 0xa8
    21f2:	18fb      	adds	r3, r7, r3
    21f4:	881b      	ldrh	r3, [r3, #0]
    21f6:	2b0e      	cmp	r3, #14
    21f8:	d917      	bls.n	222a <m2m_wifi_connect_sc+0x1b6>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    21fa:	23a8      	movs	r3, #168	; 0xa8
    21fc:	18fb      	adds	r3, r7, r3
    21fe:	881b      	ldrh	r3, [r3, #0]
    2200:	2bff      	cmp	r3, #255	; 0xff
    2202:	d012      	beq.n	222a <m2m_wifi_connect_sc+0x1b6>
		{
			M2M_ERR("CH INVALID\n");
    2204:	238d      	movs	r3, #141	; 0x8d
    2206:	009a      	lsls	r2, r3, #2
    2208:	4985      	ldr	r1, [pc, #532]	; (2420 <m2m_wifi_connect_sc+0x3ac>)
    220a:	4b86      	ldr	r3, [pc, #536]	; (2424 <m2m_wifi_connect_sc+0x3b0>)
    220c:	0018      	movs	r0, r3
    220e:	4b86      	ldr	r3, [pc, #536]	; (2428 <m2m_wifi_connect_sc+0x3b4>)
    2210:	4798      	blx	r3
    2212:	4b8e      	ldr	r3, [pc, #568]	; (244c <m2m_wifi_connect_sc+0x3d8>)
    2214:	0018      	movs	r0, r3
    2216:	4b86      	ldr	r3, [pc, #536]	; (2430 <m2m_wifi_connect_sc+0x3bc>)
    2218:	4798      	blx	r3
    221a:	200d      	movs	r0, #13
    221c:	4b85      	ldr	r3, [pc, #532]	; (2434 <m2m_wifi_connect_sc+0x3c0>)
    221e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2220:	2397      	movs	r3, #151	; 0x97
    2222:	18fb      	adds	r3, r7, r3
    2224:	22f4      	movs	r2, #244	; 0xf4
    2226:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2228:	e148      	b.n	24bc <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    222a:	230b      	movs	r3, #11
    222c:	18fb      	adds	r3, r7, r3
    222e:	781a      	ldrb	r2, [r3, #0]
    2230:	68f9      	ldr	r1, [r7, #12]
    2232:	2314      	movs	r3, #20
    2234:	18fb      	adds	r3, r7, r3
    2236:	3346      	adds	r3, #70	; 0x46
    2238:	0018      	movs	r0, r3
    223a:	4b85      	ldr	r3, [pc, #532]	; (2450 <m2m_wifi_connect_sc+0x3dc>)
    223c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    223e:	230b      	movs	r3, #11
    2240:	18fb      	adds	r3, r7, r3
    2242:	781b      	ldrb	r3, [r3, #0]
    2244:	2214      	movs	r2, #20
    2246:	18ba      	adds	r2, r7, r2
    2248:	2146      	movs	r1, #70	; 0x46
    224a:	18d3      	adds	r3, r2, r3
    224c:	185b      	adds	r3, r3, r1
    224e:	2200      	movs	r2, #0
    2250:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    2252:	2314      	movs	r3, #20
    2254:	18fb      	adds	r3, r7, r3
    2256:	22a8      	movs	r2, #168	; 0xa8
    2258:	18ba      	adds	r2, r7, r2
    225a:	2144      	movs	r1, #68	; 0x44
    225c:	8812      	ldrh	r2, [r2, #0]
    225e:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2260:	23ac      	movs	r3, #172	; 0xac
    2262:	18fb      	adds	r3, r7, r3
    2264:	781b      	ldrb	r3, [r3, #0]
    2266:	1e5a      	subs	r2, r3, #1
    2268:	4193      	sbcs	r3, r2
    226a:	b2db      	uxtb	r3, r3
    226c:	0019      	movs	r1, r3
    226e:	2314      	movs	r3, #20
    2270:	18fb      	adds	r3, r7, r3
    2272:	2267      	movs	r2, #103	; 0x67
    2274:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    2276:	2314      	movs	r3, #20
    2278:	18fb      	adds	r3, r7, r3
    227a:	228c      	movs	r2, #140	; 0x8c
    227c:	18ba      	adds	r2, r7, r2
    227e:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    2280:	238c      	movs	r3, #140	; 0x8c
    2282:	18fb      	adds	r3, r7, r3
    2284:	681b      	ldr	r3, [r3, #0]
    2286:	220a      	movs	r2, #10
    2288:	18ba      	adds	r2, r7, r2
    228a:	2141      	movs	r1, #65	; 0x41
    228c:	7812      	ldrb	r2, [r2, #0]
    228e:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    2290:	230a      	movs	r3, #10
    2292:	18fb      	adds	r3, r7, r3
    2294:	781b      	ldrb	r3, [r3, #0]
    2296:	2b03      	cmp	r3, #3
    2298:	d000      	beq.n	229c <m2m_wifi_connect_sc+0x228>
    229a:	e07a      	b.n	2392 <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	2288      	movs	r2, #136	; 0x88
    22a0:	18ba      	adds	r2, r7, r2
    22a2:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    22a4:	238c      	movs	r3, #140	; 0x8c
    22a6:	18fb      	adds	r3, r7, r3
    22a8:	681b      	ldr	r3, [r3, #0]
    22aa:	2284      	movs	r2, #132	; 0x84
    22ac:	18ba      	adds	r2, r7, r2
    22ae:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    22b0:	2388      	movs	r3, #136	; 0x88
    22b2:	18fb      	adds	r3, r7, r3
    22b4:	681b      	ldr	r3, [r3, #0]
    22b6:	781b      	ldrb	r3, [r3, #0]
    22b8:	3b01      	subs	r3, #1
    22ba:	b2da      	uxtb	r2, r3
    22bc:	2384      	movs	r3, #132	; 0x84
    22be:	18fb      	adds	r3, r7, r3
    22c0:	681b      	ldr	r3, [r3, #0]
    22c2:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    22c4:	2384      	movs	r3, #132	; 0x84
    22c6:	18fb      	adds	r3, r7, r3
    22c8:	681b      	ldr	r3, [r3, #0]
    22ca:	781b      	ldrb	r3, [r3, #0]
    22cc:	2b03      	cmp	r3, #3
    22ce:	d917      	bls.n	2300 <m2m_wifi_connect_sc+0x28c>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    22d0:	4a60      	ldr	r2, [pc, #384]	; (2454 <m2m_wifi_connect_sc+0x3e0>)
    22d2:	4953      	ldr	r1, [pc, #332]	; (2420 <m2m_wifi_connect_sc+0x3ac>)
    22d4:	4b53      	ldr	r3, [pc, #332]	; (2424 <m2m_wifi_connect_sc+0x3b0>)
    22d6:	0018      	movs	r0, r3
    22d8:	4b53      	ldr	r3, [pc, #332]	; (2428 <m2m_wifi_connect_sc+0x3b4>)
    22da:	4798      	blx	r3
    22dc:	2384      	movs	r3, #132	; 0x84
    22de:	18fb      	adds	r3, r7, r3
    22e0:	681b      	ldr	r3, [r3, #0]
    22e2:	781b      	ldrb	r3, [r3, #0]
    22e4:	001a      	movs	r2, r3
    22e6:	4b5c      	ldr	r3, [pc, #368]	; (2458 <m2m_wifi_connect_sc+0x3e4>)
    22e8:	0011      	movs	r1, r2
    22ea:	0018      	movs	r0, r3
    22ec:	4b4e      	ldr	r3, [pc, #312]	; (2428 <m2m_wifi_connect_sc+0x3b4>)
    22ee:	4798      	blx	r3
    22f0:	200d      	movs	r0, #13
    22f2:	4b50      	ldr	r3, [pc, #320]	; (2434 <m2m_wifi_connect_sc+0x3c0>)
    22f4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    22f6:	2397      	movs	r3, #151	; 0x97
    22f8:	18fb      	adds	r3, r7, r3
    22fa:	22f4      	movs	r2, #244	; 0xf4
    22fc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    22fe:	e0dd      	b.n	24bc <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    2300:	2388      	movs	r3, #136	; 0x88
    2302:	18fb      	adds	r3, r7, r3
    2304:	681b      	ldr	r3, [r3, #0]
    2306:	785b      	ldrb	r3, [r3, #1]
    2308:	3b01      	subs	r3, #1
    230a:	b2da      	uxtb	r2, r3
    230c:	2384      	movs	r3, #132	; 0x84
    230e:	18fb      	adds	r3, r7, r3
    2310:	681b      	ldr	r3, [r3, #0]
    2312:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2314:	2384      	movs	r3, #132	; 0x84
    2316:	18fb      	adds	r3, r7, r3
    2318:	681b      	ldr	r3, [r3, #0]
    231a:	785b      	ldrb	r3, [r3, #1]
    231c:	2b0a      	cmp	r3, #10
    231e:	d01d      	beq.n	235c <m2m_wifi_connect_sc+0x2e8>
    2320:	2384      	movs	r3, #132	; 0x84
    2322:	18fb      	adds	r3, r7, r3
    2324:	681b      	ldr	r3, [r3, #0]
    2326:	785b      	ldrb	r3, [r3, #1]
    2328:	2b1a      	cmp	r3, #26
    232a:	d017      	beq.n	235c <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    232c:	4a4b      	ldr	r2, [pc, #300]	; (245c <m2m_wifi_connect_sc+0x3e8>)
    232e:	493c      	ldr	r1, [pc, #240]	; (2420 <m2m_wifi_connect_sc+0x3ac>)
    2330:	4b3c      	ldr	r3, [pc, #240]	; (2424 <m2m_wifi_connect_sc+0x3b0>)
    2332:	0018      	movs	r0, r3
    2334:	4b3c      	ldr	r3, [pc, #240]	; (2428 <m2m_wifi_connect_sc+0x3b4>)
    2336:	4798      	blx	r3
    2338:	2384      	movs	r3, #132	; 0x84
    233a:	18fb      	adds	r3, r7, r3
    233c:	681b      	ldr	r3, [r3, #0]
    233e:	785b      	ldrb	r3, [r3, #1]
    2340:	001a      	movs	r2, r3
    2342:	4b47      	ldr	r3, [pc, #284]	; (2460 <m2m_wifi_connect_sc+0x3ec>)
    2344:	0011      	movs	r1, r2
    2346:	0018      	movs	r0, r3
    2348:	4b37      	ldr	r3, [pc, #220]	; (2428 <m2m_wifi_connect_sc+0x3b4>)
    234a:	4798      	blx	r3
    234c:	200d      	movs	r0, #13
    234e:	4b39      	ldr	r3, [pc, #228]	; (2434 <m2m_wifi_connect_sc+0x3c0>)
    2350:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2352:	2397      	movs	r3, #151	; 0x97
    2354:	18fb      	adds	r3, r7, r3
    2356:	22f4      	movs	r2, #244	; 0xf4
    2358:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    235a:	e0af      	b.n	24bc <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    235c:	2384      	movs	r3, #132	; 0x84
    235e:	18fb      	adds	r3, r7, r3
    2360:	681b      	ldr	r3, [r3, #0]
    2362:	1c98      	adds	r0, r3, #2
    2364:	2388      	movs	r3, #136	; 0x88
    2366:	18fb      	adds	r3, r7, r3
    2368:	681b      	ldr	r3, [r3, #0]
    236a:	1c99      	adds	r1, r3, #2
    236c:	2388      	movs	r3, #136	; 0x88
    236e:	18fb      	adds	r3, r7, r3
    2370:	681b      	ldr	r3, [r3, #0]
    2372:	785b      	ldrb	r3, [r3, #1]
    2374:	001a      	movs	r2, r3
    2376:	4b36      	ldr	r3, [pc, #216]	; (2450 <m2m_wifi_connect_sc+0x3dc>)
    2378:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    237a:	2388      	movs	r3, #136	; 0x88
    237c:	18fb      	adds	r3, r7, r3
    237e:	681b      	ldr	r3, [r3, #0]
    2380:	785b      	ldrb	r3, [r3, #1]
    2382:	001a      	movs	r2, r3
    2384:	2384      	movs	r3, #132	; 0x84
    2386:	18fb      	adds	r3, r7, r3
    2388:	681b      	ldr	r3, [r3, #0]
    238a:	189b      	adds	r3, r3, r2
    238c:	2200      	movs	r2, #0
    238e:	709a      	strb	r2, [r3, #2]
    2390:	e083      	b.n	249a <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    2392:	230a      	movs	r3, #10
    2394:	18fb      	adds	r3, r7, r3
    2396:	781b      	ldrb	r3, [r3, #0]
    2398:	2b02      	cmp	r3, #2
    239a:	d130      	bne.n	23fe <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    239c:	2382      	movs	r3, #130	; 0x82
    239e:	18fc      	adds	r4, r7, r3
    23a0:	687b      	ldr	r3, [r7, #4]
    23a2:	0018      	movs	r0, r3
    23a4:	4b24      	ldr	r3, [pc, #144]	; (2438 <m2m_wifi_connect_sc+0x3c4>)
    23a6:	4798      	blx	r3
    23a8:	0003      	movs	r3, r0
    23aa:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    23ac:	2382      	movs	r3, #130	; 0x82
    23ae:	18fb      	adds	r3, r7, r3
    23b0:	881b      	ldrh	r3, [r3, #0]
    23b2:	2b00      	cmp	r3, #0
    23b4:	d004      	beq.n	23c0 <m2m_wifi_connect_sc+0x34c>
    23b6:	2382      	movs	r3, #130	; 0x82
    23b8:	18fb      	adds	r3, r7, r3
    23ba:	881b      	ldrh	r3, [r3, #0]
    23bc:	2b40      	cmp	r3, #64	; 0x40
    23be:	d911      	bls.n	23e4 <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    23c0:	4a28      	ldr	r2, [pc, #160]	; (2464 <m2m_wifi_connect_sc+0x3f0>)
    23c2:	4917      	ldr	r1, [pc, #92]	; (2420 <m2m_wifi_connect_sc+0x3ac>)
    23c4:	4b17      	ldr	r3, [pc, #92]	; (2424 <m2m_wifi_connect_sc+0x3b0>)
    23c6:	0018      	movs	r0, r3
    23c8:	4b17      	ldr	r3, [pc, #92]	; (2428 <m2m_wifi_connect_sc+0x3b4>)
    23ca:	4798      	blx	r3
    23cc:	4b26      	ldr	r3, [pc, #152]	; (2468 <m2m_wifi_connect_sc+0x3f4>)
    23ce:	0018      	movs	r0, r3
    23d0:	4b17      	ldr	r3, [pc, #92]	; (2430 <m2m_wifi_connect_sc+0x3bc>)
    23d2:	4798      	blx	r3
    23d4:	200d      	movs	r0, #13
    23d6:	4b17      	ldr	r3, [pc, #92]	; (2434 <m2m_wifi_connect_sc+0x3c0>)
    23d8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    23da:	2397      	movs	r3, #151	; 0x97
    23dc:	18fb      	adds	r3, r7, r3
    23de:	22f4      	movs	r2, #244	; 0xf4
    23e0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    23e2:	e06b      	b.n	24bc <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    23e4:	238c      	movs	r3, #140	; 0x8c
    23e6:	18fb      	adds	r3, r7, r3
    23e8:	6818      	ldr	r0, [r3, #0]
    23ea:	2382      	movs	r3, #130	; 0x82
    23ec:	18fb      	adds	r3, r7, r3
    23ee:	881b      	ldrh	r3, [r3, #0]
    23f0:	3301      	adds	r3, #1
    23f2:	001a      	movs	r2, r3
    23f4:	687b      	ldr	r3, [r7, #4]
    23f6:	0019      	movs	r1, r3
    23f8:	4b15      	ldr	r3, [pc, #84]	; (2450 <m2m_wifi_connect_sc+0x3dc>)
    23fa:	4798      	blx	r3
    23fc:	e04d      	b.n	249a <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    23fe:	230a      	movs	r3, #10
    2400:	18fb      	adds	r3, r7, r3
    2402:	781b      	ldrb	r3, [r3, #0]
    2404:	2b04      	cmp	r3, #4
    2406:	d131      	bne.n	246c <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    2408:	238c      	movs	r3, #140	; 0x8c
    240a:	18fb      	adds	r3, r7, r3
    240c:	681b      	ldr	r3, [r3, #0]
    240e:	6879      	ldr	r1, [r7, #4]
    2410:	223e      	movs	r2, #62	; 0x3e
    2412:	0018      	movs	r0, r3
    2414:	4b0e      	ldr	r3, [pc, #56]	; (2450 <m2m_wifi_connect_sc+0x3dc>)
    2416:	4798      	blx	r3
    2418:	e03f      	b.n	249a <m2m_wifi_connect_sc+0x426>
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	00000215 	.word	0x00000215
    2420:	0000df64 	.word	0x0000df64
    2424:	0000dbc0 	.word	0x0000dbc0
    2428:	0000c461 	.word	0x0000c461
    242c:	0000ddf4 	.word	0x0000ddf4
    2430:	0000c581 	.word	0x0000c581
    2434:	0000c495 	.word	0x0000c495
    2438:	00000d21 	.word	0x00000d21
    243c:	00000221 	.word	0x00000221
    2440:	0000de08 	.word	0x0000de08
    2444:	0000022b 	.word	0x0000022b
    2448:	0000de14 	.word	0x0000de14
    244c:	0000de28 	.word	0x0000de28
    2450:	00000ca5 	.word	0x00000ca5
    2454:	0000024b 	.word	0x0000024b
    2458:	0000de34 	.word	0x0000de34
    245c:	00000252 	.word	0x00000252
    2460:	0000de50 	.word	0x0000de50
    2464:	00000261 	.word	0x00000261
    2468:	0000de6c 	.word	0x0000de6c
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    246c:	230a      	movs	r3, #10
    246e:	18fb      	adds	r3, r7, r3
    2470:	781b      	ldrb	r3, [r3, #0]
    2472:	2b01      	cmp	r3, #1
    2474:	d011      	beq.n	249a <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    2476:	4a15      	ldr	r2, [pc, #84]	; (24cc <m2m_wifi_connect_sc+0x458>)
    2478:	4915      	ldr	r1, [pc, #84]	; (24d0 <m2m_wifi_connect_sc+0x45c>)
    247a:	4b16      	ldr	r3, [pc, #88]	; (24d4 <m2m_wifi_connect_sc+0x460>)
    247c:	0018      	movs	r0, r3
    247e:	4b16      	ldr	r3, [pc, #88]	; (24d8 <m2m_wifi_connect_sc+0x464>)
    2480:	4798      	blx	r3
    2482:	4b16      	ldr	r3, [pc, #88]	; (24dc <m2m_wifi_connect_sc+0x468>)
    2484:	0018      	movs	r0, r3
    2486:	4b16      	ldr	r3, [pc, #88]	; (24e0 <m2m_wifi_connect_sc+0x46c>)
    2488:	4798      	blx	r3
    248a:	200d      	movs	r0, #13
    248c:	4b15      	ldr	r3, [pc, #84]	; (24e4 <m2m_wifi_connect_sc+0x470>)
    248e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2490:	2397      	movs	r3, #151	; 0x97
    2492:	18fb      	adds	r3, r7, r3
    2494:	22f4      	movs	r2, #244	; 0xf4
    2496:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    2498:	e010      	b.n	24bc <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    249a:	2397      	movs	r3, #151	; 0x97
    249c:	18fc      	adds	r4, r7, r3
    249e:	2314      	movs	r3, #20
    24a0:	18fa      	adds	r2, r7, r3
    24a2:	2300      	movs	r3, #0
    24a4:	9302      	str	r3, [sp, #8]
    24a6:	2300      	movs	r3, #0
    24a8:	9301      	str	r3, [sp, #4]
    24aa:	2300      	movs	r3, #0
    24ac:	9300      	str	r3, [sp, #0]
    24ae:	236c      	movs	r3, #108	; 0x6c
    24b0:	2128      	movs	r1, #40	; 0x28
    24b2:	2001      	movs	r0, #1
    24b4:	4d0c      	ldr	r5, [pc, #48]	; (24e8 <m2m_wifi_connect_sc+0x474>)
    24b6:	47a8      	blx	r5
    24b8:	0003      	movs	r3, r0
    24ba:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    24bc:	2397      	movs	r3, #151	; 0x97
    24be:	18fb      	adds	r3, r7, r3
    24c0:	781b      	ldrb	r3, [r3, #0]
    24c2:	b25b      	sxtb	r3, r3
}
    24c4:	0018      	movs	r0, r3
    24c6:	46bd      	mov	sp, r7
    24c8:	b026      	add	sp, #152	; 0x98
    24ca:	bdb0      	pop	{r4, r5, r7, pc}
    24cc:	00000271 	.word	0x00000271
    24d0:	0000df64 	.word	0x0000df64
    24d4:	0000dbc0 	.word	0x0000dbc0
    24d8:	0000c461 	.word	0x0000c461
    24dc:	0000de88 	.word	0x0000de88
    24e0:	0000c581 	.word	0x0000c581
    24e4:	0000c495 	.word	0x0000c495
    24e8:	00000f41 	.word	0x00000f41

000024ec <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    24ec:	b580      	push	{r7, lr}
    24ee:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    24f0:	2300      	movs	r3, #0
}
    24f2:	0018      	movs	r0, r3
    24f4:	46bd      	mov	sp, r7
    24f6:	bd80      	pop	{r7, pc}

000024f8 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    24f8:	b590      	push	{r4, r7, lr}
    24fa:	b087      	sub	sp, #28
    24fc:	af00      	add	r7, sp, #0
    24fe:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2500:	2317      	movs	r3, #23
    2502:	18fb      	adds	r3, r7, r3
    2504:	2200      	movs	r2, #0
    2506:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    2508:	687b      	ldr	r3, [r7, #4]
    250a:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    250c:	693b      	ldr	r3, [r7, #16]
    250e:	2280      	movs	r2, #128	; 0x80
    2510:	0052      	lsls	r2, r2, #1
    2512:	4313      	orrs	r3, r2
    2514:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    2516:	693a      	ldr	r2, [r7, #16]
    2518:	23a5      	movs	r3, #165	; 0xa5
    251a:	015b      	lsls	r3, r3, #5
    251c:	0011      	movs	r1, r2
    251e:	0018      	movs	r0, r3
    2520:	4b12      	ldr	r3, [pc, #72]	; (256c <chip_apply_conf+0x74>)
    2522:	4798      	blx	r3
		if(val32 != 0) {		
    2524:	693b      	ldr	r3, [r7, #16]
    2526:	2b00      	cmp	r3, #0
    2528:	d018      	beq.n	255c <chip_apply_conf+0x64>
			uint32 reg = 0;
    252a:	2300      	movs	r3, #0
    252c:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    252e:	2317      	movs	r3, #23
    2530:	18fc      	adds	r4, r7, r3
    2532:	230c      	movs	r3, #12
    2534:	18fa      	adds	r2, r7, r3
    2536:	23a5      	movs	r3, #165	; 0xa5
    2538:	015b      	lsls	r3, r3, #5
    253a:	0011      	movs	r1, r2
    253c:	0018      	movs	r0, r3
    253e:	4b0c      	ldr	r3, [pc, #48]	; (2570 <chip_apply_conf+0x78>)
    2540:	4798      	blx	r3
    2542:	0003      	movs	r3, r0
    2544:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    2546:	2317      	movs	r3, #23
    2548:	18fb      	adds	r3, r7, r3
    254a:	781b      	ldrb	r3, [r3, #0]
    254c:	b25b      	sxtb	r3, r3
    254e:	2b00      	cmp	r3, #0
    2550:	d1e1      	bne.n	2516 <chip_apply_conf+0x1e>
				if(reg == val32)
    2552:	68fa      	ldr	r2, [r7, #12]
    2554:	693b      	ldr	r3, [r7, #16]
    2556:	429a      	cmp	r2, r3
    2558:	d002      	beq.n	2560 <chip_apply_conf+0x68>
					break;
			}
		} else {
			break;
		}
	} while(1);
    255a:	e7dc      	b.n	2516 <chip_apply_conf+0x1e>
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
			}
		} else {
			break;
    255c:	46c0      	nop			; (mov r8, r8)
    255e:	e000      	b.n	2562 <chip_apply_conf+0x6a>
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
    2560:	46c0      	nop			; (mov r8, r8)
		} else {
			break;
		}
	} while(1);

	return M2M_SUCCESS;
    2562:	2300      	movs	r3, #0
}
    2564:	0018      	movs	r0, r3
    2566:	46bd      	mov	sp, r7
    2568:	b007      	add	sp, #28
    256a:	bd90      	pop	{r4, r7, pc}
    256c:	00002d49 	.word	0x00002d49
    2570:	00002d25 	.word	0x00002d25

00002574 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    2574:	b590      	push	{r4, r7, lr}
    2576:	b083      	sub	sp, #12
    2578:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    257a:	2300      	movs	r3, #0
    257c:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    257e:	1dfb      	adds	r3, r7, #7
    2580:	2200      	movs	r2, #0
    2582:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    2584:	1dfc      	adds	r4, r7, #7
    2586:	003b      	movs	r3, r7
    2588:	4a24      	ldr	r2, [pc, #144]	; (261c <enable_interrupts+0xa8>)
    258a:	0019      	movs	r1, r3
    258c:	0010      	movs	r0, r2
    258e:	4b24      	ldr	r3, [pc, #144]	; (2620 <enable_interrupts+0xac>)
    2590:	4798      	blx	r3
    2592:	0003      	movs	r3, r0
    2594:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    2596:	1dfb      	adds	r3, r7, #7
    2598:	781b      	ldrb	r3, [r3, #0]
    259a:	b25b      	sxtb	r3, r3
    259c:	2b00      	cmp	r3, #0
    259e:	d131      	bne.n	2604 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    25a0:	683b      	ldr	r3, [r7, #0]
    25a2:	2280      	movs	r2, #128	; 0x80
    25a4:	0052      	lsls	r2, r2, #1
    25a6:	4313      	orrs	r3, r2
    25a8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    25aa:	683b      	ldr	r3, [r7, #0]
    25ac:	1dfc      	adds	r4, r7, #7
    25ae:	4a1b      	ldr	r2, [pc, #108]	; (261c <enable_interrupts+0xa8>)
    25b0:	0019      	movs	r1, r3
    25b2:	0010      	movs	r0, r2
    25b4:	4b1b      	ldr	r3, [pc, #108]	; (2624 <enable_interrupts+0xb0>)
    25b6:	4798      	blx	r3
    25b8:	0003      	movs	r3, r0
    25ba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    25bc:	1dfb      	adds	r3, r7, #7
    25be:	781b      	ldrb	r3, [r3, #0]
    25c0:	b25b      	sxtb	r3, r3
    25c2:	2b00      	cmp	r3, #0
    25c4:	d120      	bne.n	2608 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    25c6:	1dfc      	adds	r4, r7, #7
    25c8:	003a      	movs	r2, r7
    25ca:	23d0      	movs	r3, #208	; 0xd0
    25cc:	015b      	lsls	r3, r3, #5
    25ce:	0011      	movs	r1, r2
    25d0:	0018      	movs	r0, r3
    25d2:	4b13      	ldr	r3, [pc, #76]	; (2620 <enable_interrupts+0xac>)
    25d4:	4798      	blx	r3
    25d6:	0003      	movs	r3, r0
    25d8:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    25da:	1dfb      	adds	r3, r7, #7
    25dc:	781b      	ldrb	r3, [r3, #0]
    25de:	b25b      	sxtb	r3, r3
    25e0:	2b00      	cmp	r3, #0
    25e2:	d113      	bne.n	260c <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    25e4:	683b      	ldr	r3, [r7, #0]
    25e6:	2280      	movs	r2, #128	; 0x80
    25e8:	0252      	lsls	r2, r2, #9
    25ea:	4313      	orrs	r3, r2
    25ec:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    25ee:	683a      	ldr	r2, [r7, #0]
    25f0:	1dfc      	adds	r4, r7, #7
    25f2:	23d0      	movs	r3, #208	; 0xd0
    25f4:	015b      	lsls	r3, r3, #5
    25f6:	0011      	movs	r1, r2
    25f8:	0018      	movs	r0, r3
    25fa:	4b0a      	ldr	r3, [pc, #40]	; (2624 <enable_interrupts+0xb0>)
    25fc:	4798      	blx	r3
    25fe:	0003      	movs	r3, r0
    2600:	7023      	strb	r3, [r4, #0]
    2602:	e004      	b.n	260e <enable_interrupts+0x9a>
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) goto ERR1;
    2604:	46c0      	nop			; (mov r8, r8)
    2606:	e002      	b.n	260e <enable_interrupts+0x9a>
	
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
    2608:	46c0      	nop			; (mov r8, r8)
    260a:	e000      	b.n	260e <enable_interrupts+0x9a>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) goto ERR1;
    260c:	46c0      	nop			; (mov r8, r8)
	
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    260e:	1dfb      	adds	r3, r7, #7
    2610:	781b      	ldrb	r3, [r3, #0]
    2612:	b25b      	sxtb	r3, r3
}
    2614:	0018      	movs	r0, r3
    2616:	46bd      	mov	sp, r7
    2618:	b003      	add	sp, #12
    261a:	bd90      	pop	{r4, r7, pc}
    261c:	00001408 	.word	0x00001408
    2620:	00002d25 	.word	0x00002d25
    2624:	00002d49 	.word	0x00002d49

00002628 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2628:	b580      	push	{r7, lr}
    262a:	b082      	sub	sp, #8
    262c:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    262e:	4b32      	ldr	r3, [pc, #200]	; (26f8 <nmi_get_chipid+0xd0>)
    2630:	681b      	ldr	r3, [r3, #0]
    2632:	2b00      	cmp	r3, #0
    2634:	d159      	bne.n	26ea <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    2636:	4a30      	ldr	r2, [pc, #192]	; (26f8 <nmi_get_chipid+0xd0>)
    2638:	2380      	movs	r3, #128	; 0x80
    263a:	015b      	lsls	r3, r3, #5
    263c:	0011      	movs	r1, r2
    263e:	0018      	movs	r0, r3
    2640:	4b2e      	ldr	r3, [pc, #184]	; (26fc <nmi_get_chipid+0xd4>)
    2642:	4798      	blx	r3
    2644:	1e03      	subs	r3, r0, #0
    2646:	d004      	beq.n	2652 <nmi_get_chipid+0x2a>
			chipid = 0;
    2648:	4b2b      	ldr	r3, [pc, #172]	; (26f8 <nmi_get_chipid+0xd0>)
    264a:	2200      	movs	r2, #0
    264c:	601a      	str	r2, [r3, #0]
			return 0;
    264e:	2300      	movs	r3, #0
    2650:	e04d      	b.n	26ee <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    2652:	1d3b      	adds	r3, r7, #4
    2654:	4a2a      	ldr	r2, [pc, #168]	; (2700 <nmi_get_chipid+0xd8>)
    2656:	0019      	movs	r1, r3
    2658:	0010      	movs	r0, r2
    265a:	4b28      	ldr	r3, [pc, #160]	; (26fc <nmi_get_chipid+0xd4>)
    265c:	4798      	blx	r3
    265e:	1e03      	subs	r3, r0, #0
    2660:	d004      	beq.n	266c <nmi_get_chipid+0x44>
			chipid = 0;
    2662:	4b25      	ldr	r3, [pc, #148]	; (26f8 <nmi_get_chipid+0xd0>)
    2664:	2200      	movs	r2, #0
    2666:	601a      	str	r2, [r3, #0]
			return 0;
    2668:	2300      	movs	r3, #0
    266a:	e040      	b.n	26ee <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    266c:	4b22      	ldr	r3, [pc, #136]	; (26f8 <nmi_get_chipid+0xd0>)
    266e:	681b      	ldr	r3, [r3, #0]
    2670:	4a24      	ldr	r2, [pc, #144]	; (2704 <nmi_get_chipid+0xdc>)
    2672:	4293      	cmp	r3, r2
    2674:	d106      	bne.n	2684 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    2676:	687b      	ldr	r3, [r7, #4]
    2678:	2b01      	cmp	r3, #1
    267a:	d029      	beq.n	26d0 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    267c:	4b1e      	ldr	r3, [pc, #120]	; (26f8 <nmi_get_chipid+0xd0>)
    267e:	4a22      	ldr	r2, [pc, #136]	; (2708 <nmi_get_chipid+0xe0>)
    2680:	601a      	str	r2, [r3, #0]
    2682:	e025      	b.n	26d0 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    2684:	4b1c      	ldr	r3, [pc, #112]	; (26f8 <nmi_get_chipid+0xd0>)
    2686:	681b      	ldr	r3, [r3, #0]
    2688:	4a20      	ldr	r2, [pc, #128]	; (270c <nmi_get_chipid+0xe4>)
    268a:	4293      	cmp	r3, r2
    268c:	d10d      	bne.n	26aa <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    268e:	687b      	ldr	r3, [r7, #4]
    2690:	2b03      	cmp	r3, #3
    2692:	d01d      	beq.n	26d0 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    2694:	687b      	ldr	r3, [r7, #4]
    2696:	2b04      	cmp	r3, #4
    2698:	d103      	bne.n	26a2 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    269a:	4b17      	ldr	r3, [pc, #92]	; (26f8 <nmi_get_chipid+0xd0>)
    269c:	4a1c      	ldr	r2, [pc, #112]	; (2710 <nmi_get_chipid+0xe8>)
    269e:	601a      	str	r2, [r3, #0]
    26a0:	e016      	b.n	26d0 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    26a2:	4b15      	ldr	r3, [pc, #84]	; (26f8 <nmi_get_chipid+0xd0>)
    26a4:	4a1b      	ldr	r2, [pc, #108]	; (2714 <nmi_get_chipid+0xec>)
    26a6:	601a      	str	r2, [r3, #0]
    26a8:	e012      	b.n	26d0 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    26aa:	4b13      	ldr	r3, [pc, #76]	; (26f8 <nmi_get_chipid+0xd0>)
    26ac:	681b      	ldr	r3, [r3, #0]
    26ae:	4a1a      	ldr	r2, [pc, #104]	; (2718 <nmi_get_chipid+0xf0>)
    26b0:	4293      	cmp	r3, r2
    26b2:	d10d      	bne.n	26d0 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    26b4:	4a10      	ldr	r2, [pc, #64]	; (26f8 <nmi_get_chipid+0xd0>)
    26b6:	23ec      	movs	r3, #236	; 0xec
    26b8:	039b      	lsls	r3, r3, #14
    26ba:	0011      	movs	r1, r2
    26bc:	0018      	movs	r0, r3
    26be:	4b0f      	ldr	r3, [pc, #60]	; (26fc <nmi_get_chipid+0xd4>)
    26c0:	4798      	blx	r3
    26c2:	1e03      	subs	r3, r0, #0
    26c4:	d004      	beq.n	26d0 <nmi_get_chipid+0xa8>
			chipid = 0;
    26c6:	4b0c      	ldr	r3, [pc, #48]	; (26f8 <nmi_get_chipid+0xd0>)
    26c8:	2200      	movs	r2, #0
    26ca:	601a      	str	r2, [r3, #0]
			return 0;
    26cc:	2300      	movs	r3, #0
    26ce:	e00e      	b.n	26ee <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    26d0:	4b09      	ldr	r3, [pc, #36]	; (26f8 <nmi_get_chipid+0xd0>)
    26d2:	681b      	ldr	r3, [r3, #0]
    26d4:	4a11      	ldr	r2, [pc, #68]	; (271c <nmi_get_chipid+0xf4>)
    26d6:	401a      	ands	r2, r3
    26d8:	4b07      	ldr	r3, [pc, #28]	; (26f8 <nmi_get_chipid+0xd0>)
    26da:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    26dc:	4b06      	ldr	r3, [pc, #24]	; (26f8 <nmi_get_chipid+0xd0>)
    26de:	681b      	ldr	r3, [r3, #0]
    26e0:	22a0      	movs	r2, #160	; 0xa0
    26e2:	02d2      	lsls	r2, r2, #11
    26e4:	431a      	orrs	r2, r3
    26e6:	4b04      	ldr	r3, [pc, #16]	; (26f8 <nmi_get_chipid+0xd0>)
    26e8:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    26ea:	4b03      	ldr	r3, [pc, #12]	; (26f8 <nmi_get_chipid+0xd0>)
    26ec:	681b      	ldr	r3, [r3, #0]
}
    26ee:	0018      	movs	r0, r3
    26f0:	46bd      	mov	sp, r7
    26f2:	b002      	add	sp, #8
    26f4:	bd80      	pop	{r7, pc}
    26f6:	46c0      	nop			; (mov r8, r8)
    26f8:	200000ac 	.word	0x200000ac
    26fc:	00002d25 	.word	0x00002d25
    2700:	000013f4 	.word	0x000013f4
    2704:	001002a0 	.word	0x001002a0
    2708:	001002a1 	.word	0x001002a1
    270c:	001002b0 	.word	0x001002b0
    2710:	001002b1 	.word	0x001002b1
    2714:	001002b2 	.word	0x001002b2
    2718:	001000f0 	.word	0x001000f0
    271c:	fff0ffff 	.word	0xfff0ffff

00002720 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2720:	b590      	push	{r4, r7, lr}
    2722:	b083      	sub	sp, #12
    2724:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    2726:	1dfb      	adds	r3, r7, #7
    2728:	2200      	movs	r2, #0
    272a:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    272c:	1dfc      	adds	r4, r7, #7
    272e:	003b      	movs	r3, r7
    2730:	0019      	movs	r1, r3
    2732:	2010      	movs	r0, #16
    2734:	4b2e      	ldr	r3, [pc, #184]	; (27f0 <chip_sleep+0xd0>)
    2736:	4798      	blx	r3
    2738:	0003      	movs	r3, r0
    273a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    273c:	1dfb      	adds	r3, r7, #7
    273e:	781b      	ldrb	r3, [r3, #0]
    2740:	b25b      	sxtb	r3, r3
    2742:	2b00      	cmp	r3, #0
    2744:	d145      	bne.n	27d2 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    2746:	683b      	ldr	r3, [r7, #0]
    2748:	2201      	movs	r2, #1
    274a:	4013      	ands	r3, r2
    274c:	d000      	beq.n	2750 <chip_sleep+0x30>
	}
    274e:	e7ed      	b.n	272c <chip_sleep+0xc>
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    2750:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2752:	1dfc      	adds	r4, r7, #7
    2754:	003b      	movs	r3, r7
    2756:	0019      	movs	r1, r3
    2758:	2001      	movs	r0, #1
    275a:	4b25      	ldr	r3, [pc, #148]	; (27f0 <chip_sleep+0xd0>)
    275c:	4798      	blx	r3
    275e:	0003      	movs	r3, r0
    2760:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    2762:	1dfb      	adds	r3, r7, #7
    2764:	781b      	ldrb	r3, [r3, #0]
    2766:	b25b      	sxtb	r3, r3
    2768:	2b00      	cmp	r3, #0
    276a:	d134      	bne.n	27d6 <chip_sleep+0xb6>
	if(reg & NBIT1)
    276c:	683b      	ldr	r3, [r7, #0]
    276e:	2202      	movs	r2, #2
    2770:	4013      	ands	r3, r2
    2772:	d010      	beq.n	2796 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    2774:	683b      	ldr	r3, [r7, #0]
    2776:	2202      	movs	r2, #2
    2778:	4393      	bics	r3, r2
    277a:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    277c:	683b      	ldr	r3, [r7, #0]
    277e:	1dfc      	adds	r4, r7, #7
    2780:	0019      	movs	r1, r3
    2782:	2001      	movs	r0, #1
    2784:	4b1b      	ldr	r3, [pc, #108]	; (27f4 <chip_sleep+0xd4>)
    2786:	4798      	blx	r3
    2788:	0003      	movs	r3, r0
    278a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    278c:	1dfb      	adds	r3, r7, #7
    278e:	781b      	ldrb	r3, [r3, #0]
    2790:	b25b      	sxtb	r3, r3
    2792:	2b00      	cmp	r3, #0
    2794:	d121      	bne.n	27da <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2796:	1dfc      	adds	r4, r7, #7
    2798:	003b      	movs	r3, r7
    279a:	0019      	movs	r1, r3
    279c:	200b      	movs	r0, #11
    279e:	4b14      	ldr	r3, [pc, #80]	; (27f0 <chip_sleep+0xd0>)
    27a0:	4798      	blx	r3
    27a2:	0003      	movs	r3, r0
    27a4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    27a6:	1dfb      	adds	r3, r7, #7
    27a8:	781b      	ldrb	r3, [r3, #0]
    27aa:	b25b      	sxtb	r3, r3
    27ac:	2b00      	cmp	r3, #0
    27ae:	d116      	bne.n	27de <chip_sleep+0xbe>
	if(reg & NBIT0)
    27b0:	683b      	ldr	r3, [r7, #0]
    27b2:	2201      	movs	r2, #1
    27b4:	4013      	ands	r3, r2
    27b6:	d013      	beq.n	27e0 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    27b8:	683b      	ldr	r3, [r7, #0]
    27ba:	2201      	movs	r2, #1
    27bc:	4393      	bics	r3, r2
    27be:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    27c0:	683b      	ldr	r3, [r7, #0]
    27c2:	1dfc      	adds	r4, r7, #7
    27c4:	0019      	movs	r1, r3
    27c6:	200b      	movs	r0, #11
    27c8:	4b0a      	ldr	r3, [pc, #40]	; (27f4 <chip_sleep+0xd4>)
    27ca:	4798      	blx	r3
    27cc:	0003      	movs	r3, r0
    27ce:	7023      	strb	r3, [r4, #0]
    27d0:	e006      	b.n	27e0 <chip_sleep+0xc0>
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
		if(ret != M2M_SUCCESS) goto ERR1;
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	e004      	b.n	27e0 <chip_sleep+0xc0>
		if((reg & NBIT0) == 0) break;
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	e002      	b.n	27e0 <chip_sleep+0xc0>
	if(reg & NBIT1)
	{
		reg &=~NBIT1;
		ret = nm_write_reg(WAKE_CLK_REG, reg);
		if(ret != M2M_SUCCESS)goto ERR1;
    27da:	46c0      	nop			; (mov r8, r8)
    27dc:	e000      	b.n	27e0 <chip_sleep+0xc0>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    27de:	46c0      	nop			; (mov r8, r8)
		ret = nm_write_reg(HOST_CORT_COMM, reg);
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    27e0:	1dfb      	adds	r3, r7, #7
    27e2:	781b      	ldrb	r3, [r3, #0]
    27e4:	b25b      	sxtb	r3, r3
}
    27e6:	0018      	movs	r0, r3
    27e8:	46bd      	mov	sp, r7
    27ea:	b003      	add	sp, #12
    27ec:	bd90      	pop	{r4, r7, pc}
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	00002d25 	.word	0x00002d25
    27f4:	00002d49 	.word	0x00002d49

000027f8 <chip_wake>:
sint8 chip_wake(void)
{
    27f8:	b590      	push	{r4, r7, lr}
    27fa:	b085      	sub	sp, #20
    27fc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    27fe:	230f      	movs	r3, #15
    2800:	18fb      	adds	r3, r7, r3
    2802:	2200      	movs	r2, #0
    2804:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    2806:	2300      	movs	r3, #0
    2808:	607b      	str	r3, [r7, #4]
    280a:	2300      	movs	r3, #0
    280c:	603b      	str	r3, [r7, #0]
    280e:	2300      	movs	r3, #0
    2810:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2812:	230f      	movs	r3, #15
    2814:	18fc      	adds	r4, r7, r3
    2816:	1d3b      	adds	r3, r7, #4
    2818:	0019      	movs	r1, r3
    281a:	200b      	movs	r0, #11
    281c:	4b4c      	ldr	r3, [pc, #304]	; (2950 <chip_wake+0x158>)
    281e:	4798      	blx	r3
    2820:	0003      	movs	r3, r0
    2822:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2824:	230f      	movs	r3, #15
    2826:	18fb      	adds	r3, r7, r3
    2828:	781b      	ldrb	r3, [r3, #0]
    282a:	b25b      	sxtb	r3, r3
    282c:	2b00      	cmp	r3, #0
    282e:	d000      	beq.n	2832 <chip_wake+0x3a>
    2830:	e07f      	b.n	2932 <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    2832:	687b      	ldr	r3, [r7, #4]
    2834:	2201      	movs	r2, #1
    2836:	4013      	ands	r3, r2
    2838:	d110      	bne.n	285c <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    283a:	687b      	ldr	r3, [r7, #4]
    283c:	2201      	movs	r2, #1
    283e:	4313      	orrs	r3, r2
    2840:	220f      	movs	r2, #15
    2842:	18bc      	adds	r4, r7, r2
    2844:	0019      	movs	r1, r3
    2846:	200b      	movs	r0, #11
    2848:	4b42      	ldr	r3, [pc, #264]	; (2954 <chip_wake+0x15c>)
    284a:	4798      	blx	r3
    284c:	0003      	movs	r3, r0
    284e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2850:	230f      	movs	r3, #15
    2852:	18fb      	adds	r3, r7, r3
    2854:	781b      	ldrb	r3, [r3, #0]
    2856:	b25b      	sxtb	r3, r3
    2858:	2b00      	cmp	r3, #0
    285a:	d16c      	bne.n	2936 <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    285c:	230f      	movs	r3, #15
    285e:	18fc      	adds	r4, r7, r3
    2860:	1d3b      	adds	r3, r7, #4
    2862:	0019      	movs	r1, r3
    2864:	2001      	movs	r0, #1
    2866:	4b3a      	ldr	r3, [pc, #232]	; (2950 <chip_wake+0x158>)
    2868:	4798      	blx	r3
    286a:	0003      	movs	r3, r0
    286c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    286e:	230f      	movs	r3, #15
    2870:	18fb      	adds	r3, r7, r3
    2872:	781b      	ldrb	r3, [r3, #0]
    2874:	b25b      	sxtb	r3, r3
    2876:	2b00      	cmp	r3, #0
    2878:	d15f      	bne.n	293a <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	2202      	movs	r2, #2
    287e:	4013      	ands	r3, r2
    2880:	d110      	bne.n	28a4 <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    2882:	687b      	ldr	r3, [r7, #4]
    2884:	2202      	movs	r2, #2
    2886:	4313      	orrs	r3, r2
    2888:	220f      	movs	r2, #15
    288a:	18bc      	adds	r4, r7, r2
    288c:	0019      	movs	r1, r3
    288e:	2001      	movs	r0, #1
    2890:	4b30      	ldr	r3, [pc, #192]	; (2954 <chip_wake+0x15c>)
    2892:	4798      	blx	r3
    2894:	0003      	movs	r3, r0
    2896:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2898:	230f      	movs	r3, #15
    289a:	18fb      	adds	r3, r7, r3
    289c:	781b      	ldrb	r3, [r3, #0]
    289e:	b25b      	sxtb	r3, r3
    28a0:	2b00      	cmp	r3, #0
    28a2:	d14c      	bne.n	293e <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    28a4:	230f      	movs	r3, #15
    28a6:	18fc      	adds	r4, r7, r3
    28a8:	003b      	movs	r3, r7
    28aa:	0019      	movs	r1, r3
    28ac:	200f      	movs	r0, #15
    28ae:	4b28      	ldr	r3, [pc, #160]	; (2950 <chip_wake+0x158>)
    28b0:	4798      	blx	r3
    28b2:	0003      	movs	r3, r0
    28b4:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    28b6:	230f      	movs	r3, #15
    28b8:	18fb      	adds	r3, r7, r3
    28ba:	781b      	ldrb	r3, [r3, #0]
    28bc:	b25b      	sxtb	r3, r3
    28be:	2b00      	cmp	r3, #0
    28c0:	d013      	beq.n	28ea <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    28c2:	23aa      	movs	r3, #170	; 0xaa
    28c4:	005a      	lsls	r2, r3, #1
    28c6:	4924      	ldr	r1, [pc, #144]	; (2958 <chip_wake+0x160>)
    28c8:	4b24      	ldr	r3, [pc, #144]	; (295c <chip_wake+0x164>)
    28ca:	0018      	movs	r0, r3
    28cc:	4b24      	ldr	r3, [pc, #144]	; (2960 <chip_wake+0x168>)
    28ce:	4798      	blx	r3
    28d0:	230f      	movs	r3, #15
    28d2:	18fb      	adds	r3, r7, r3
    28d4:	2100      	movs	r1, #0
    28d6:	5659      	ldrsb	r1, [r3, r1]
    28d8:	683a      	ldr	r2, [r7, #0]
    28da:	4b22      	ldr	r3, [pc, #136]	; (2964 <chip_wake+0x16c>)
    28dc:	0018      	movs	r0, r3
    28de:	4b20      	ldr	r3, [pc, #128]	; (2960 <chip_wake+0x168>)
    28e0:	4798      	blx	r3
    28e2:	200d      	movs	r0, #13
    28e4:	4b20      	ldr	r3, [pc, #128]	; (2968 <chip_wake+0x170>)
    28e6:	4798      	blx	r3
			goto _WAKE_EXIT;
    28e8:	e02a      	b.n	2940 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    28ea:	683b      	ldr	r3, [r7, #0]
    28ec:	2204      	movs	r2, #4
    28ee:	4013      	ands	r3, r2
    28f0:	d11b      	bne.n	292a <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    28f2:	2002      	movs	r0, #2
    28f4:	4b1d      	ldr	r3, [pc, #116]	; (296c <chip_wake+0x174>)
    28f6:	4798      	blx	r3
		trials++;
    28f8:	68bb      	ldr	r3, [r7, #8]
    28fa:	3301      	adds	r3, #1
    28fc:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    28fe:	68bb      	ldr	r3, [r7, #8]
    2900:	2b04      	cmp	r3, #4
    2902:	d9cf      	bls.n	28a4 <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    2904:	23af      	movs	r3, #175	; 0xaf
    2906:	005a      	lsls	r2, r3, #1
    2908:	4913      	ldr	r1, [pc, #76]	; (2958 <chip_wake+0x160>)
    290a:	4b14      	ldr	r3, [pc, #80]	; (295c <chip_wake+0x164>)
    290c:	0018      	movs	r0, r3
    290e:	4b14      	ldr	r3, [pc, #80]	; (2960 <chip_wake+0x168>)
    2910:	4798      	blx	r3
    2912:	4b17      	ldr	r3, [pc, #92]	; (2970 <chip_wake+0x178>)
    2914:	0018      	movs	r0, r3
    2916:	4b17      	ldr	r3, [pc, #92]	; (2974 <chip_wake+0x17c>)
    2918:	4798      	blx	r3
    291a:	200d      	movs	r0, #13
    291c:	4b12      	ldr	r3, [pc, #72]	; (2968 <chip_wake+0x170>)
    291e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2920:	230f      	movs	r3, #15
    2922:	18fb      	adds	r3, r7, r3
    2924:	22fc      	movs	r2, #252	; 0xfc
    2926:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    2928:	e00a      	b.n	2940 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) {
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
    292a:	46c0      	nop			; (mov r8, r8)
			goto _WAKE_EXIT;
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    292c:	4b12      	ldr	r3, [pc, #72]	; (2978 <chip_wake+0x180>)
    292e:	4798      	blx	r3
    2930:	e006      	b.n	2940 <chip_wake+0x148>
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	e004      	b.n	2940 <chip_wake+0x148>
	
	if(!(reg & NBIT0))
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	e002      	b.n	2940 <chip_wake+0x148>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	e000      	b.n	2940 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    293e:	46c0      	nop			; (mov r8, r8)
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
    2940:	230f      	movs	r3, #15
    2942:	18fb      	adds	r3, r7, r3
    2944:	781b      	ldrb	r3, [r3, #0]
    2946:	b25b      	sxtb	r3, r3
}
    2948:	0018      	movs	r0, r3
    294a:	46bd      	mov	sp, r7
    294c:	b005      	add	sp, #20
    294e:	bd90      	pop	{r4, r7, pc}
    2950:	00002d25 	.word	0x00002d25
    2954:	00002d49 	.word	0x00002d49
    2958:	0000dffc 	.word	0x0000dffc
    295c:	0000df78 	.word	0x0000df78
    2960:	0000c461 	.word	0x0000c461
    2964:	0000df8c 	.word	0x0000df8c
    2968:	0000c495 	.word	0x0000c495
    296c:	000003f1 	.word	0x000003f1
    2970:	0000dfa4 	.word	0x0000dfa4
    2974:	0000c581 	.word	0x0000c581
    2978:	00002ce5 	.word	0x00002ce5

0000297c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    297c:	b580      	push	{r7, lr}
    297e:	b088      	sub	sp, #32
    2980:	af00      	add	r7, sp, #0
    2982:	0002      	movs	r2, r0
    2984:	1dfb      	adds	r3, r7, #7
    2986:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2988:	2313      	movs	r3, #19
    298a:	18fb      	adds	r3, r7, r3
    298c:	2200      	movs	r2, #0
    298e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2990:	2300      	movs	r3, #0
    2992:	61fb      	str	r3, [r7, #28]
    2994:	2300      	movs	r3, #0
    2996:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    2998:	2300      	movs	r3, #0
    299a:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    299c:	4b4a      	ldr	r3, [pc, #296]	; (2ac8 <wait_for_bootrom+0x14c>)
    299e:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    29a0:	2300      	movs	r3, #0
    29a2:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    29a4:	4b49      	ldr	r3, [pc, #292]	; (2acc <wait_for_bootrom+0x150>)
    29a6:	0018      	movs	r0, r3
    29a8:	4b49      	ldr	r3, [pc, #292]	; (2ad0 <wait_for_bootrom+0x154>)
    29aa:	4798      	blx	r3
    29ac:	0003      	movs	r3, r0
    29ae:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    29b0:	69fb      	ldr	r3, [r7, #28]
    29b2:	2b00      	cmp	r3, #0
    29b4:	db03      	blt.n	29be <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    29b6:	2001      	movs	r0, #1
    29b8:	4b46      	ldr	r3, [pc, #280]	; (2ad4 <wait_for_bootrom+0x158>)
    29ba:	4798      	blx	r3
	}
    29bc:	e7f2      	b.n	29a4 <wait_for_bootrom+0x28>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    29be:	46c0      	nop			; (mov r8, r8)
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    29c0:	4b45      	ldr	r3, [pc, #276]	; (2ad8 <wait_for_bootrom+0x15c>)
    29c2:	0018      	movs	r0, r3
    29c4:	4b42      	ldr	r3, [pc, #264]	; (2ad0 <wait_for_bootrom+0x154>)
    29c6:	4798      	blx	r3
    29c8:	0003      	movs	r3, r0
    29ca:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    29cc:	69fb      	ldr	r3, [r7, #28]
    29ce:	2201      	movs	r2, #1
    29d0:	4013      	ands	r3, r2
    29d2:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    29d4:	69fb      	ldr	r3, [r7, #28]
    29d6:	2b00      	cmp	r3, #0
    29d8:	d112      	bne.n	2a00 <wait_for_bootrom+0x84>
	{
		reg = 0;
    29da:	2300      	movs	r3, #0
    29dc:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    29de:	e00b      	b.n	29f8 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    29e0:	2001      	movs	r0, #1
    29e2:	4b3c      	ldr	r3, [pc, #240]	; (2ad4 <wait_for_bootrom+0x158>)
    29e4:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    29e6:	4b3d      	ldr	r3, [pc, #244]	; (2adc <wait_for_bootrom+0x160>)
    29e8:	0018      	movs	r0, r3
    29ea:	4b39      	ldr	r3, [pc, #228]	; (2ad0 <wait_for_bootrom+0x154>)
    29ec:	4798      	blx	r3
    29ee:	0003      	movs	r3, r0
    29f0:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    29f2:	69bb      	ldr	r3, [r7, #24]
    29f4:	3301      	adds	r3, #1
    29f6:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    29f8:	69fb      	ldr	r3, [r7, #28]
    29fa:	4a39      	ldr	r2, [pc, #228]	; (2ae0 <wait_for_bootrom+0x164>)
    29fc:	4293      	cmp	r3, r2
    29fe:	d1ef      	bne.n	29e0 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    2a00:	1dfb      	adds	r3, r7, #7
    2a02:	781b      	ldrb	r3, [r3, #0]
    2a04:	2b02      	cmp	r3, #2
    2a06:	d10d      	bne.n	2a24 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2a08:	4a36      	ldr	r2, [pc, #216]	; (2ae4 <wait_for_bootrom+0x168>)
    2a0a:	4b37      	ldr	r3, [pc, #220]	; (2ae8 <wait_for_bootrom+0x16c>)
    2a0c:	0011      	movs	r1, r2
    2a0e:	0018      	movs	r0, r3
    2a10:	4b36      	ldr	r3, [pc, #216]	; (2aec <wait_for_bootrom+0x170>)
    2a12:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    2a14:	2380      	movs	r3, #128	; 0x80
    2a16:	035b      	lsls	r3, r3, #13
    2a18:	4a35      	ldr	r2, [pc, #212]	; (2af0 <wait_for_bootrom+0x174>)
    2a1a:	0019      	movs	r1, r3
    2a1c:	0010      	movs	r0, r2
    2a1e:	4b33      	ldr	r3, [pc, #204]	; (2aec <wait_for_bootrom+0x170>)
    2a20:	4798      	blx	r3
    2a22:	e022      	b.n	2a6a <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    2a24:	1dfb      	adds	r3, r7, #7
    2a26:	781b      	ldrb	r3, [r3, #0]
    2a28:	2b03      	cmp	r3, #3
    2a2a:	d10b      	bne.n	2a44 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2a2c:	4a2d      	ldr	r2, [pc, #180]	; (2ae4 <wait_for_bootrom+0x168>)
    2a2e:	4b2e      	ldr	r3, [pc, #184]	; (2ae8 <wait_for_bootrom+0x16c>)
    2a30:	0011      	movs	r1, r2
    2a32:	0018      	movs	r0, r3
    2a34:	4b2d      	ldr	r3, [pc, #180]	; (2aec <wait_for_bootrom+0x170>)
    2a36:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    2a38:	4b2d      	ldr	r3, [pc, #180]	; (2af0 <wait_for_bootrom+0x174>)
    2a3a:	2100      	movs	r1, #0
    2a3c:	0018      	movs	r0, r3
    2a3e:	4b2b      	ldr	r3, [pc, #172]	; (2aec <wait_for_bootrom+0x170>)
    2a40:	4798      	blx	r3
    2a42:	e012      	b.n	2a6a <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    2a44:	1dfb      	adds	r3, r7, #7
    2a46:	781b      	ldrb	r3, [r3, #0]
    2a48:	2b04      	cmp	r3, #4
    2a4a:	d108      	bne.n	2a5e <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2a4c:	2380      	movs	r3, #128	; 0x80
    2a4e:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2a50:	68fb      	ldr	r3, [r7, #12]
    2a52:	4a27      	ldr	r2, [pc, #156]	; (2af0 <wait_for_bootrom+0x174>)
    2a54:	0019      	movs	r1, r3
    2a56:	0010      	movs	r0, r2
    2a58:	4b24      	ldr	r3, [pc, #144]	; (2aec <wait_for_bootrom+0x170>)
    2a5a:	4798      	blx	r3
    2a5c:	e005      	b.n	2a6a <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2a5e:	68fb      	ldr	r3, [r7, #12]
    2a60:	4a23      	ldr	r2, [pc, #140]	; (2af0 <wait_for_bootrom+0x174>)
    2a62:	0019      	movs	r1, r3
    2a64:	0010      	movs	r0, r2
    2a66:	4b21      	ldr	r3, [pc, #132]	; (2aec <wait_for_bootrom+0x170>)
    2a68:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    2a6a:	4b22      	ldr	r3, [pc, #136]	; (2af4 <wait_for_bootrom+0x178>)
    2a6c:	4798      	blx	r3
    2a6e:	0003      	movs	r3, r0
    2a70:	051b      	lsls	r3, r3, #20
    2a72:	0d1b      	lsrs	r3, r3, #20
    2a74:	4a20      	ldr	r2, [pc, #128]	; (2af8 <wait_for_bootrom+0x17c>)
    2a76:	4293      	cmp	r3, r2
    2a78:	d906      	bls.n	2a88 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    2a7a:	697b      	ldr	r3, [r7, #20]
    2a7c:	2202      	movs	r2, #2
    2a7e:	4313      	orrs	r3, r2
    2a80:	0018      	movs	r0, r3
    2a82:	4b1e      	ldr	r3, [pc, #120]	; (2afc <wait_for_bootrom+0x180>)
    2a84:	4798      	blx	r3
    2a86:	e003      	b.n	2a90 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    2a88:	697b      	ldr	r3, [r7, #20]
    2a8a:	0018      	movs	r0, r3
    2a8c:	4b1b      	ldr	r3, [pc, #108]	; (2afc <wait_for_bootrom+0x180>)
    2a8e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    2a90:	4b1b      	ldr	r3, [pc, #108]	; (2b00 <wait_for_bootrom+0x184>)
    2a92:	0018      	movs	r0, r3
    2a94:	4b1b      	ldr	r3, [pc, #108]	; (2b04 <wait_for_bootrom+0x188>)
    2a96:	4798      	blx	r3
    2a98:	68fa      	ldr	r2, [r7, #12]
    2a9a:	4b1b      	ldr	r3, [pc, #108]	; (2b08 <wait_for_bootrom+0x18c>)
    2a9c:	0011      	movs	r1, r2
    2a9e:	0018      	movs	r0, r3
    2aa0:	4b18      	ldr	r3, [pc, #96]	; (2b04 <wait_for_bootrom+0x188>)
    2aa2:	4798      	blx	r3
    2aa4:	200d      	movs	r0, #13
    2aa6:	4b19      	ldr	r3, [pc, #100]	; (2b0c <wait_for_bootrom+0x190>)
    2aa8:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    2aaa:	4a19      	ldr	r2, [pc, #100]	; (2b10 <wait_for_bootrom+0x194>)
    2aac:	4b0b      	ldr	r3, [pc, #44]	; (2adc <wait_for_bootrom+0x160>)
    2aae:	0011      	movs	r1, r2
    2ab0:	0018      	movs	r0, r3
    2ab2:	4b0e      	ldr	r3, [pc, #56]	; (2aec <wait_for_bootrom+0x170>)
    2ab4:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    2ab6:	2313      	movs	r3, #19
    2ab8:	18fb      	adds	r3, r7, r3
    2aba:	781b      	ldrb	r3, [r3, #0]
    2abc:	b25b      	sxtb	r3, r3
}
    2abe:	0018      	movs	r0, r3
    2ac0:	46bd      	mov	sp, r7
    2ac2:	b008      	add	sp, #32
    2ac4:	bd80      	pop	{r7, pc}
    2ac6:	46c0      	nop			; (mov r8, r8)
    2ac8:	13521352 	.word	0x13521352
    2acc:	00001014 	.word	0x00001014
    2ad0:	00002d05 	.word	0x00002d05
    2ad4:	000003f1 	.word	0x000003f1
    2ad8:	000207bc 	.word	0x000207bc
    2adc:	000c000c 	.word	0x000c000c
    2ae0:	10add09e 	.word	0x10add09e
    2ae4:	3c1cd57d 	.word	0x3c1cd57d
    2ae8:	000207ac 	.word	0x000207ac
    2aec:	00002d49 	.word	0x00002d49
    2af0:	0000108c 	.word	0x0000108c
    2af4:	00002629 	.word	0x00002629
    2af8:	0000039f 	.word	0x0000039f
    2afc:	000024f9 	.word	0x000024f9
    2b00:	0000dfc0 	.word	0x0000dfc0
    2b04:	0000c461 	.word	0x0000c461
    2b08:	0000dfcc 	.word	0x0000dfcc
    2b0c:	0000c495 	.word	0x0000c495
    2b10:	ef522f61 	.word	0xef522f61

00002b14 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2b14:	b580      	push	{r7, lr}
    2b16:	b088      	sub	sp, #32
    2b18:	af00      	add	r7, sp, #0
    2b1a:	0002      	movs	r2, r0
    2b1c:	1dfb      	adds	r3, r7, #7
    2b1e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2b20:	231f      	movs	r3, #31
    2b22:	18fb      	adds	r3, r7, r3
    2b24:	2200      	movs	r2, #0
    2b26:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2b28:	2300      	movs	r3, #0
    2b2a:	61bb      	str	r3, [r7, #24]
    2b2c:	2300      	movs	r3, #0
    2b2e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    2b30:	2301      	movs	r3, #1
    2b32:	425b      	negs	r3, r3
    2b34:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    2b36:	4b1d      	ldr	r3, [pc, #116]	; (2bac <wait_for_firmware_start+0x98>)
    2b38:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2b3a:	4b1d      	ldr	r3, [pc, #116]	; (2bb0 <wait_for_firmware_start+0x9c>)
    2b3c:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2b3e:	1dfb      	adds	r3, r7, #7
    2b40:	781b      	ldrb	r3, [r3, #0]
    2b42:	2b02      	cmp	r3, #2
    2b44:	d003      	beq.n	2b4e <wait_for_firmware_start+0x3a>
    2b46:	1dfb      	adds	r3, r7, #7
    2b48:	781b      	ldrb	r3, [r3, #0]
    2b4a:	2b03      	cmp	r3, #3
    2b4c:	d119      	bne.n	2b82 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    2b4e:	4b19      	ldr	r3, [pc, #100]	; (2bb4 <wait_for_firmware_start+0xa0>)
    2b50:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    2b52:	4b19      	ldr	r3, [pc, #100]	; (2bb8 <wait_for_firmware_start+0xa4>)
    2b54:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    2b56:	e014      	b.n	2b82 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2b58:	2002      	movs	r0, #2
    2b5a:	4b18      	ldr	r3, [pc, #96]	; (2bbc <wait_for_firmware_start+0xa8>)
    2b5c:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2b5e:	68fb      	ldr	r3, [r7, #12]
    2b60:	0018      	movs	r0, r3
    2b62:	4b17      	ldr	r3, [pc, #92]	; (2bc0 <wait_for_firmware_start+0xac>)
    2b64:	4798      	blx	r3
    2b66:	0003      	movs	r3, r0
    2b68:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    2b6a:	697b      	ldr	r3, [r7, #20]
    2b6c:	3301      	adds	r3, #1
    2b6e:	617b      	str	r3, [r7, #20]
    2b70:	697a      	ldr	r2, [r7, #20]
    2b72:	693b      	ldr	r3, [r7, #16]
    2b74:	429a      	cmp	r2, r3
    2b76:	d304      	bcc.n	2b82 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    2b78:	231f      	movs	r3, #31
    2b7a:	18fb      	adds	r3, r7, r3
    2b7c:	22fb      	movs	r2, #251	; 0xfb
    2b7e:	701a      	strb	r2, [r3, #0]
			goto ERR;
    2b80:	e00c      	b.n	2b9c <wait_for_firmware_start+0x88>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    2b82:	68ba      	ldr	r2, [r7, #8]
    2b84:	69bb      	ldr	r3, [r7, #24]
    2b86:	429a      	cmp	r2, r3
    2b88:	d1e6      	bne.n	2b58 <wait_for_firmware_start+0x44>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    2b8a:	68bb      	ldr	r3, [r7, #8]
    2b8c:	4a08      	ldr	r2, [pc, #32]	; (2bb0 <wait_for_firmware_start+0x9c>)
    2b8e:	4293      	cmp	r3, r2
    2b90:	d104      	bne.n	2b9c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    2b92:	4b06      	ldr	r3, [pc, #24]	; (2bac <wait_for_firmware_start+0x98>)
    2b94:	2100      	movs	r1, #0
    2b96:	0018      	movs	r0, r3
    2b98:	4b0a      	ldr	r3, [pc, #40]	; (2bc4 <wait_for_firmware_start+0xb0>)
    2b9a:	4798      	blx	r3
	}
ERR:
	return ret;
    2b9c:	231f      	movs	r3, #31
    2b9e:	18fb      	adds	r3, r7, r3
    2ba0:	781b      	ldrb	r3, [r3, #0]
    2ba2:	b25b      	sxtb	r3, r3
}
    2ba4:	0018      	movs	r0, r3
    2ba6:	46bd      	mov	sp, r7
    2ba8:	b008      	add	sp, #32
    2baa:	bd80      	pop	{r7, pc}
    2bac:	0000108c 	.word	0x0000108c
    2bb0:	02532636 	.word	0x02532636
    2bb4:	000207ac 	.word	0x000207ac
    2bb8:	d75dc1c3 	.word	0xd75dc1c3
    2bbc:	000003f1 	.word	0x000003f1
    2bc0:	00002d05 	.word	0x00002d05
    2bc4:	00002d49 	.word	0x00002d49

00002bc8 <chip_deinit>:

sint8 chip_deinit(void)
{
    2bc8:	b590      	push	{r4, r7, lr}
    2bca:	b083      	sub	sp, #12
    2bcc:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    2bce:	2300      	movs	r3, #0
    2bd0:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2bd2:	1dfc      	adds	r4, r7, #7
    2bd4:	003a      	movs	r2, r7
    2bd6:	23a0      	movs	r3, #160	; 0xa0
    2bd8:	015b      	lsls	r3, r3, #5
    2bda:	0011      	movs	r1, r2
    2bdc:	0018      	movs	r0, r3
    2bde:	4b1f      	ldr	r3, [pc, #124]	; (2c5c <chip_deinit+0x94>)
    2be0:	4798      	blx	r3
    2be2:	0003      	movs	r3, r0
    2be4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2be6:	1dfb      	adds	r3, r7, #7
    2be8:	781b      	ldrb	r3, [r3, #0]
    2bea:	b25b      	sxtb	r3, r3
    2bec:	2b00      	cmp	r3, #0
    2bee:	d00d      	beq.n	2c0c <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    2bf0:	4a1b      	ldr	r2, [pc, #108]	; (2c60 <chip_deinit+0x98>)
    2bf2:	491c      	ldr	r1, [pc, #112]	; (2c64 <chip_deinit+0x9c>)
    2bf4:	4b1c      	ldr	r3, [pc, #112]	; (2c68 <chip_deinit+0xa0>)
    2bf6:	0018      	movs	r0, r3
    2bf8:	4b1c      	ldr	r3, [pc, #112]	; (2c6c <chip_deinit+0xa4>)
    2bfa:	4798      	blx	r3
    2bfc:	4b1c      	ldr	r3, [pc, #112]	; (2c70 <chip_deinit+0xa8>)
    2bfe:	0018      	movs	r0, r3
    2c00:	4b1c      	ldr	r3, [pc, #112]	; (2c74 <chip_deinit+0xac>)
    2c02:	4798      	blx	r3
    2c04:	200d      	movs	r0, #13
    2c06:	4b1c      	ldr	r3, [pc, #112]	; (2c78 <chip_deinit+0xb0>)
    2c08:	4798      	blx	r3
		goto ERR1;
    2c0a:	e020      	b.n	2c4e <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    2c0c:	683b      	ldr	r3, [r7, #0]
    2c0e:	4a1b      	ldr	r2, [pc, #108]	; (2c7c <chip_deinit+0xb4>)
    2c10:	4013      	ands	r3, r2
    2c12:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2c14:	683a      	ldr	r2, [r7, #0]
    2c16:	1dfc      	adds	r4, r7, #7
    2c18:	23a0      	movs	r3, #160	; 0xa0
    2c1a:	015b      	lsls	r3, r3, #5
    2c1c:	0011      	movs	r1, r2
    2c1e:	0018      	movs	r0, r3
    2c20:	4b17      	ldr	r3, [pc, #92]	; (2c80 <chip_deinit+0xb8>)
    2c22:	4798      	blx	r3
    2c24:	0003      	movs	r3, r0
    2c26:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    2c28:	1dfb      	adds	r3, r7, #7
    2c2a:	781b      	ldrb	r3, [r3, #0]
    2c2c:	b25b      	sxtb	r3, r3
    2c2e:	2b00      	cmp	r3, #0
    2c30:	d00d      	beq.n	2c4e <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    2c32:	4a14      	ldr	r2, [pc, #80]	; (2c84 <chip_deinit+0xbc>)
    2c34:	490b      	ldr	r1, [pc, #44]	; (2c64 <chip_deinit+0x9c>)
    2c36:	4b0c      	ldr	r3, [pc, #48]	; (2c68 <chip_deinit+0xa0>)
    2c38:	0018      	movs	r0, r3
    2c3a:	4b0c      	ldr	r3, [pc, #48]	; (2c6c <chip_deinit+0xa4>)
    2c3c:	4798      	blx	r3
    2c3e:	4b0c      	ldr	r3, [pc, #48]	; (2c70 <chip_deinit+0xa8>)
    2c40:	0018      	movs	r0, r3
    2c42:	4b0c      	ldr	r3, [pc, #48]	; (2c74 <chip_deinit+0xac>)
    2c44:	4798      	blx	r3
    2c46:	200d      	movs	r0, #13
    2c48:	4b0b      	ldr	r3, [pc, #44]	; (2c78 <chip_deinit+0xb0>)
    2c4a:	4798      	blx	r3
		goto ERR1;
    2c4c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    2c4e:	1dfb      	adds	r3, r7, #7
    2c50:	781b      	ldrb	r3, [r3, #0]
    2c52:	b25b      	sxtb	r3, r3
}
    2c54:	0018      	movs	r0, r3
    2c56:	46bd      	mov	sp, r7
    2c58:	b003      	add	sp, #12
    2c5a:	bd90      	pop	{r4, r7, pc}
    2c5c:	00002d25 	.word	0x00002d25
    2c60:	00000205 	.word	0x00000205
    2c64:	0000e008 	.word	0x0000e008
    2c68:	0000df78 	.word	0x0000df78
    2c6c:	0000c461 	.word	0x0000c461
    2c70:	0000dfe4 	.word	0x0000dfe4
    2c74:	0000c581 	.word	0x0000c581
    2c78:	0000c495 	.word	0x0000c495
    2c7c:	fffffbff 	.word	0xfffffbff
    2c80:	00002d49 	.word	0x00002d49
    2c84:	0000020b 	.word	0x0000020b

00002c88 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2c88:	b590      	push	{r4, r7, lr}
    2c8a:	b085      	sub	sp, #20
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2c90:	230f      	movs	r3, #15
    2c92:	18fb      	adds	r3, r7, r3
    2c94:	2200      	movs	r2, #0
    2c96:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    2c98:	230f      	movs	r3, #15
    2c9a:	18fc      	adds	r4, r7, r3
    2c9c:	687b      	ldr	r3, [r7, #4]
    2c9e:	0018      	movs	r0, r3
    2ca0:	4b05      	ldr	r3, [pc, #20]	; (2cb8 <nm_bus_iface_init+0x30>)
    2ca2:	4798      	blx	r3
    2ca4:	0003      	movs	r3, r0
    2ca6:	7023      	strb	r3, [r4, #0]
	return ret;
    2ca8:	230f      	movs	r3, #15
    2caa:	18fb      	adds	r3, r7, r3
    2cac:	781b      	ldrb	r3, [r3, #0]
    2cae:	b25b      	sxtb	r3, r3
}
    2cb0:	0018      	movs	r0, r3
    2cb2:	46bd      	mov	sp, r7
    2cb4:	b005      	add	sp, #20
    2cb6:	bd90      	pop	{r4, r7, pc}
    2cb8:	00000ab9 	.word	0x00000ab9

00002cbc <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2cbc:	b590      	push	{r4, r7, lr}
    2cbe:	b083      	sub	sp, #12
    2cc0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2cc2:	1dfb      	adds	r3, r7, #7
    2cc4:	2200      	movs	r2, #0
    2cc6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    2cc8:	1dfc      	adds	r4, r7, #7
    2cca:	4b05      	ldr	r3, [pc, #20]	; (2ce0 <nm_bus_iface_deinit+0x24>)
    2ccc:	4798      	blx	r3
    2cce:	0003      	movs	r3, r0
    2cd0:	7023      	strb	r3, [r4, #0]

	return ret;
    2cd2:	1dfb      	adds	r3, r7, #7
    2cd4:	781b      	ldrb	r3, [r3, #0]
    2cd6:	b25b      	sxtb	r3, r3
}
    2cd8:	0018      	movs	r0, r3
    2cda:	46bd      	mov	sp, r7
    2cdc:	b003      	add	sp, #12
    2cde:	bd90      	pop	{r4, r7, pc}
    2ce0:	00000c35 	.word	0x00000c35

00002ce4 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2ce4:	b580      	push	{r7, lr}
    2ce6:	b082      	sub	sp, #8
    2ce8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2cea:	1dfb      	adds	r3, r7, #7
    2cec:	2200      	movs	r2, #0
    2cee:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2cf0:	4b03      	ldr	r3, [pc, #12]	; (2d00 <nm_bus_reset+0x1c>)
    2cf2:	4798      	blx	r3
    2cf4:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2cf6:	0018      	movs	r0, r3
    2cf8:	46bd      	mov	sp, r7
    2cfa:	b002      	add	sp, #8
    2cfc:	bd80      	pop	{r7, pc}
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	000045cd 	.word	0x000045cd

00002d04 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2d04:	b580      	push	{r7, lr}
    2d06:	b082      	sub	sp, #8
    2d08:	af00      	add	r7, sp, #0
    2d0a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2d0c:	687b      	ldr	r3, [r7, #4]
    2d0e:	0018      	movs	r0, r3
    2d10:	4b03      	ldr	r3, [pc, #12]	; (2d20 <nm_read_reg+0x1c>)
    2d12:	4798      	blx	r3
    2d14:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2d16:	0018      	movs	r0, r3
    2d18:	46bd      	mov	sp, r7
    2d1a:	b002      	add	sp, #8
    2d1c:	bd80      	pop	{r7, pc}
    2d1e:	46c0      	nop			; (mov r8, r8)
    2d20:	00004761 	.word	0x00004761

00002d24 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2d24:	b580      	push	{r7, lr}
    2d26:	b082      	sub	sp, #8
    2d28:	af00      	add	r7, sp, #0
    2d2a:	6078      	str	r0, [r7, #4]
    2d2c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2d2e:	683a      	ldr	r2, [r7, #0]
    2d30:	687b      	ldr	r3, [r7, #4]
    2d32:	0011      	movs	r1, r2
    2d34:	0018      	movs	r0, r3
    2d36:	4b03      	ldr	r3, [pc, #12]	; (2d44 <nm_read_reg_with_ret+0x20>)
    2d38:	4798      	blx	r3
    2d3a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2d3c:	0018      	movs	r0, r3
    2d3e:	46bd      	mov	sp, r7
    2d40:	b002      	add	sp, #8
    2d42:	bd80      	pop	{r7, pc}
    2d44:	00004785 	.word	0x00004785

00002d48 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b082      	sub	sp, #8
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	6078      	str	r0, [r7, #4]
    2d50:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2d52:	683a      	ldr	r2, [r7, #0]
    2d54:	687b      	ldr	r3, [r7, #4]
    2d56:	0011      	movs	r1, r2
    2d58:	0018      	movs	r0, r3
    2d5a:	4b03      	ldr	r3, [pc, #12]	; (2d68 <nm_write_reg+0x20>)
    2d5c:	4798      	blx	r3
    2d5e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2d60:	0018      	movs	r0, r3
    2d62:	46bd      	mov	sp, r7
    2d64:	b002      	add	sp, #8
    2d66:	bd80      	pop	{r7, pc}
    2d68:	000047d5 	.word	0x000047d5

00002d6c <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2d6c:	b580      	push	{r7, lr}
    2d6e:	b084      	sub	sp, #16
    2d70:	af00      	add	r7, sp, #0
    2d72:	60f8      	str	r0, [r7, #12]
    2d74:	60b9      	str	r1, [r7, #8]
    2d76:	1dbb      	adds	r3, r7, #6
    2d78:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2d7a:	1dbb      	adds	r3, r7, #6
    2d7c:	881a      	ldrh	r2, [r3, #0]
    2d7e:	68b9      	ldr	r1, [r7, #8]
    2d80:	68fb      	ldr	r3, [r7, #12]
    2d82:	0018      	movs	r0, r3
    2d84:	4b03      	ldr	r3, [pc, #12]	; (2d94 <p_nm_read_block+0x28>)
    2d86:	4798      	blx	r3
    2d88:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2d8a:	0018      	movs	r0, r3
    2d8c:	46bd      	mov	sp, r7
    2d8e:	b004      	add	sp, #16
    2d90:	bd80      	pop	{r7, pc}
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	00004825 	.word	0x00004825

00002d98 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2d98:	b580      	push	{r7, lr}
    2d9a:	b086      	sub	sp, #24
    2d9c:	af00      	add	r7, sp, #0
    2d9e:	60f8      	str	r0, [r7, #12]
    2da0:	60b9      	str	r1, [r7, #8]
    2da2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2da4:	4b2d      	ldr	r3, [pc, #180]	; (2e5c <nm_read_block+0xc4>)
    2da6:	881a      	ldrh	r2, [r3, #0]
    2da8:	2310      	movs	r3, #16
    2daa:	18fb      	adds	r3, r7, r3
    2dac:	3a08      	subs	r2, #8
    2dae:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2db0:	2300      	movs	r3, #0
    2db2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2db4:	2313      	movs	r3, #19
    2db6:	18fb      	adds	r3, r7, r3
    2db8:	2200      	movs	r2, #0
    2dba:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2dbc:	2310      	movs	r3, #16
    2dbe:	18fb      	adds	r3, r7, r3
    2dc0:	881a      	ldrh	r2, [r3, #0]
    2dc2:	687b      	ldr	r3, [r7, #4]
    2dc4:	429a      	cmp	r2, r3
    2dc6:	d313      	bcc.n	2df0 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2dc8:	68ba      	ldr	r2, [r7, #8]
    2dca:	697b      	ldr	r3, [r7, #20]
    2dcc:	18d1      	adds	r1, r2, r3
    2dce:	687b      	ldr	r3, [r7, #4]
    2dd0:	b29a      	uxth	r2, r3
    2dd2:	68fb      	ldr	r3, [r7, #12]
    2dd4:	0018      	movs	r0, r3
    2dd6:	4b22      	ldr	r3, [pc, #136]	; (2e60 <nm_read_block+0xc8>)
    2dd8:	4798      	blx	r3
    2dda:	0003      	movs	r3, r0
    2ddc:	b2da      	uxtb	r2, r3
    2dde:	2313      	movs	r3, #19
    2de0:	18fb      	adds	r3, r7, r3
    2de2:	781b      	ldrb	r3, [r3, #0]
    2de4:	18d3      	adds	r3, r2, r3
    2de6:	b2da      	uxtb	r2, r3
    2de8:	2313      	movs	r3, #19
    2dea:	18fb      	adds	r3, r7, r3
    2dec:	701a      	strb	r2, [r3, #0]
			break;
    2dee:	e02d      	b.n	2e4c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2df0:	68ba      	ldr	r2, [r7, #8]
    2df2:	697b      	ldr	r3, [r7, #20]
    2df4:	18d1      	adds	r1, r2, r3
    2df6:	2310      	movs	r3, #16
    2df8:	18fb      	adds	r3, r7, r3
    2dfa:	881a      	ldrh	r2, [r3, #0]
    2dfc:	68fb      	ldr	r3, [r7, #12]
    2dfe:	0018      	movs	r0, r3
    2e00:	4b17      	ldr	r3, [pc, #92]	; (2e60 <nm_read_block+0xc8>)
    2e02:	4798      	blx	r3
    2e04:	0003      	movs	r3, r0
    2e06:	b2da      	uxtb	r2, r3
    2e08:	2313      	movs	r3, #19
    2e0a:	18fb      	adds	r3, r7, r3
    2e0c:	781b      	ldrb	r3, [r3, #0]
    2e0e:	18d3      	adds	r3, r2, r3
    2e10:	b2da      	uxtb	r2, r3
    2e12:	2313      	movs	r3, #19
    2e14:	18fb      	adds	r3, r7, r3
    2e16:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2e18:	2313      	movs	r3, #19
    2e1a:	18fb      	adds	r3, r7, r3
    2e1c:	781b      	ldrb	r3, [r3, #0]
    2e1e:	b25b      	sxtb	r3, r3
    2e20:	2b00      	cmp	r3, #0
    2e22:	d112      	bne.n	2e4a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2e24:	2310      	movs	r3, #16
    2e26:	18fb      	adds	r3, r7, r3
    2e28:	881b      	ldrh	r3, [r3, #0]
    2e2a:	687a      	ldr	r2, [r7, #4]
    2e2c:	1ad3      	subs	r3, r2, r3
    2e2e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2e30:	2310      	movs	r3, #16
    2e32:	18fb      	adds	r3, r7, r3
    2e34:	881b      	ldrh	r3, [r3, #0]
    2e36:	697a      	ldr	r2, [r7, #20]
    2e38:	18d3      	adds	r3, r2, r3
    2e3a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2e3c:	2310      	movs	r3, #16
    2e3e:	18fb      	adds	r3, r7, r3
    2e40:	881b      	ldrh	r3, [r3, #0]
    2e42:	68fa      	ldr	r2, [r7, #12]
    2e44:	18d3      	adds	r3, r2, r3
    2e46:	60fb      	str	r3, [r7, #12]
		}
	}
    2e48:	e7b8      	b.n	2dbc <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2e4a:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    2e4c:	2313      	movs	r3, #19
    2e4e:	18fb      	adds	r3, r7, r3
    2e50:	781b      	ldrb	r3, [r3, #0]
    2e52:	b25b      	sxtb	r3, r3
}
    2e54:	0018      	movs	r0, r3
    2e56:	46bd      	mov	sp, r7
    2e58:	b006      	add	sp, #24
    2e5a:	bd80      	pop	{r7, pc}
    2e5c:	20000008 	.word	0x20000008
    2e60:	00002d6d 	.word	0x00002d6d

00002e64 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2e64:	b580      	push	{r7, lr}
    2e66:	b084      	sub	sp, #16
    2e68:	af00      	add	r7, sp, #0
    2e6a:	60f8      	str	r0, [r7, #12]
    2e6c:	60b9      	str	r1, [r7, #8]
    2e6e:	1dbb      	adds	r3, r7, #6
    2e70:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2e72:	1dbb      	adds	r3, r7, #6
    2e74:	881a      	ldrh	r2, [r3, #0]
    2e76:	68b9      	ldr	r1, [r7, #8]
    2e78:	68fb      	ldr	r3, [r7, #12]
    2e7a:	0018      	movs	r0, r3
    2e7c:	4b03      	ldr	r3, [pc, #12]	; (2e8c <p_nm_write_block+0x28>)
    2e7e:	4798      	blx	r3
    2e80:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2e82:	0018      	movs	r0, r3
    2e84:	46bd      	mov	sp, r7
    2e86:	b004      	add	sp, #16
    2e88:	bd80      	pop	{r7, pc}
    2e8a:	46c0      	nop			; (mov r8, r8)
    2e8c:	0000487d 	.word	0x0000487d

00002e90 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2e90:	b580      	push	{r7, lr}
    2e92:	b086      	sub	sp, #24
    2e94:	af00      	add	r7, sp, #0
    2e96:	60f8      	str	r0, [r7, #12]
    2e98:	60b9      	str	r1, [r7, #8]
    2e9a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2e9c:	4b2d      	ldr	r3, [pc, #180]	; (2f54 <nm_write_block+0xc4>)
    2e9e:	881a      	ldrh	r2, [r3, #0]
    2ea0:	2310      	movs	r3, #16
    2ea2:	18fb      	adds	r3, r7, r3
    2ea4:	3a08      	subs	r2, #8
    2ea6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2ea8:	2300      	movs	r3, #0
    2eaa:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2eac:	2313      	movs	r3, #19
    2eae:	18fb      	adds	r3, r7, r3
    2eb0:	2200      	movs	r2, #0
    2eb2:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2eb4:	2310      	movs	r3, #16
    2eb6:	18fb      	adds	r3, r7, r3
    2eb8:	881a      	ldrh	r2, [r3, #0]
    2eba:	687b      	ldr	r3, [r7, #4]
    2ebc:	429a      	cmp	r2, r3
    2ebe:	d313      	bcc.n	2ee8 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2ec0:	68ba      	ldr	r2, [r7, #8]
    2ec2:	697b      	ldr	r3, [r7, #20]
    2ec4:	18d1      	adds	r1, r2, r3
    2ec6:	687b      	ldr	r3, [r7, #4]
    2ec8:	b29a      	uxth	r2, r3
    2eca:	68fb      	ldr	r3, [r7, #12]
    2ecc:	0018      	movs	r0, r3
    2ece:	4b22      	ldr	r3, [pc, #136]	; (2f58 <nm_write_block+0xc8>)
    2ed0:	4798      	blx	r3
    2ed2:	0003      	movs	r3, r0
    2ed4:	b2da      	uxtb	r2, r3
    2ed6:	2313      	movs	r3, #19
    2ed8:	18fb      	adds	r3, r7, r3
    2eda:	781b      	ldrb	r3, [r3, #0]
    2edc:	18d3      	adds	r3, r2, r3
    2ede:	b2da      	uxtb	r2, r3
    2ee0:	2313      	movs	r3, #19
    2ee2:	18fb      	adds	r3, r7, r3
    2ee4:	701a      	strb	r2, [r3, #0]
			break;
    2ee6:	e02d      	b.n	2f44 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2ee8:	68ba      	ldr	r2, [r7, #8]
    2eea:	697b      	ldr	r3, [r7, #20]
    2eec:	18d1      	adds	r1, r2, r3
    2eee:	2310      	movs	r3, #16
    2ef0:	18fb      	adds	r3, r7, r3
    2ef2:	881a      	ldrh	r2, [r3, #0]
    2ef4:	68fb      	ldr	r3, [r7, #12]
    2ef6:	0018      	movs	r0, r3
    2ef8:	4b17      	ldr	r3, [pc, #92]	; (2f58 <nm_write_block+0xc8>)
    2efa:	4798      	blx	r3
    2efc:	0003      	movs	r3, r0
    2efe:	b2da      	uxtb	r2, r3
    2f00:	2313      	movs	r3, #19
    2f02:	18fb      	adds	r3, r7, r3
    2f04:	781b      	ldrb	r3, [r3, #0]
    2f06:	18d3      	adds	r3, r2, r3
    2f08:	b2da      	uxtb	r2, r3
    2f0a:	2313      	movs	r3, #19
    2f0c:	18fb      	adds	r3, r7, r3
    2f0e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2f10:	2313      	movs	r3, #19
    2f12:	18fb      	adds	r3, r7, r3
    2f14:	781b      	ldrb	r3, [r3, #0]
    2f16:	b25b      	sxtb	r3, r3
    2f18:	2b00      	cmp	r3, #0
    2f1a:	d112      	bne.n	2f42 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2f1c:	2310      	movs	r3, #16
    2f1e:	18fb      	adds	r3, r7, r3
    2f20:	881b      	ldrh	r3, [r3, #0]
    2f22:	687a      	ldr	r2, [r7, #4]
    2f24:	1ad3      	subs	r3, r2, r3
    2f26:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2f28:	2310      	movs	r3, #16
    2f2a:	18fb      	adds	r3, r7, r3
    2f2c:	881b      	ldrh	r3, [r3, #0]
    2f2e:	697a      	ldr	r2, [r7, #20]
    2f30:	18d3      	adds	r3, r2, r3
    2f32:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2f34:	2310      	movs	r3, #16
    2f36:	18fb      	adds	r3, r7, r3
    2f38:	881b      	ldrh	r3, [r3, #0]
    2f3a:	68fa      	ldr	r2, [r7, #12]
    2f3c:	18d3      	adds	r3, r2, r3
    2f3e:	60fb      	str	r3, [r7, #12]
		}
	}
    2f40:	e7b8      	b.n	2eb4 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2f42:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    2f44:	2313      	movs	r3, #19
    2f46:	18fb      	adds	r3, r7, r3
    2f48:	781b      	ldrb	r3, [r3, #0]
    2f4a:	b25b      	sxtb	r3, r3
}
    2f4c:	0018      	movs	r0, r3
    2f4e:	46bd      	mov	sp, r7
    2f50:	b006      	add	sp, #24
    2f52:	bd80      	pop	{r7, pc}
    2f54:	20000008 	.word	0x20000008
    2f58:	00002e65 	.word	0x00002e65

00002f5c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2f5c:	b590      	push	{r4, r7, lr}
    2f5e:	b089      	sub	sp, #36	; 0x24
    2f60:	af00      	add	r7, sp, #0
    2f62:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2f64:	2300      	movs	r3, #0
    2f66:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    2f68:	231f      	movs	r3, #31
    2f6a:	18fb      	adds	r3, r7, r3
    2f6c:	2200      	movs	r2, #0
    2f6e:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    2f70:	230c      	movs	r3, #12
    2f72:	18fb      	adds	r3, r7, r3
    2f74:	0018      	movs	r0, r3
    2f76:	2308      	movs	r3, #8
    2f78:	001a      	movs	r2, r3
    2f7a:	2100      	movs	r1, #0
    2f7c:	4b64      	ldr	r3, [pc, #400]	; (3110 <nm_get_firmware_full_info+0x1b4>)
    2f7e:	4798      	blx	r3
	if (pstrRev != NULL)
    2f80:	687b      	ldr	r3, [r7, #4]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d100      	bne.n	2f88 <nm_get_firmware_full_info+0x2c>
    2f86:	e0ba      	b.n	30fe <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	2228      	movs	r2, #40	; 0x28
    2f8c:	2100      	movs	r1, #0
    2f8e:	0018      	movs	r0, r3
    2f90:	4b60      	ldr	r3, [pc, #384]	; (3114 <nm_get_firmware_full_info+0x1b8>)
    2f92:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2f94:	231f      	movs	r3, #31
    2f96:	18fc      	adds	r4, r7, r3
    2f98:	2314      	movs	r3, #20
    2f9a:	18fb      	adds	r3, r7, r3
    2f9c:	4a5e      	ldr	r2, [pc, #376]	; (3118 <nm_get_firmware_full_info+0x1bc>)
    2f9e:	0019      	movs	r1, r3
    2fa0:	0010      	movs	r0, r2
    2fa2:	4b5e      	ldr	r3, [pc, #376]	; (311c <nm_get_firmware_full_info+0x1c0>)
    2fa4:	4798      	blx	r3
    2fa6:	0003      	movs	r3, r0
    2fa8:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    2faa:	231f      	movs	r3, #31
    2fac:	18fb      	adds	r3, r7, r3
    2fae:	781b      	ldrb	r3, [r3, #0]
    2fb0:	b25b      	sxtb	r3, r3
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	d000      	beq.n	2fb8 <nm_get_firmware_full_info+0x5c>
    2fb6:	e0a2      	b.n	30fe <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    2fb8:	697b      	ldr	r3, [r7, #20]
    2fba:	2b00      	cmp	r3, #0
    2fbc:	d100      	bne.n	2fc0 <nm_get_firmware_full_info+0x64>
    2fbe:	e09a      	b.n	30f6 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2fc0:	697b      	ldr	r3, [r7, #20]
    2fc2:	22c0      	movs	r2, #192	; 0xc0
    2fc4:	0292      	lsls	r2, r2, #10
    2fc6:	4313      	orrs	r3, r2
    2fc8:	221f      	movs	r2, #31
    2fca:	18bc      	adds	r4, r7, r2
    2fcc:	220c      	movs	r2, #12
    2fce:	18b9      	adds	r1, r7, r2
    2fd0:	2208      	movs	r2, #8
    2fd2:	0018      	movs	r0, r3
    2fd4:	4b52      	ldr	r3, [pc, #328]	; (3120 <nm_get_firmware_full_info+0x1c4>)
    2fd6:	4798      	blx	r3
    2fd8:	0003      	movs	r3, r0
    2fda:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    2fdc:	231f      	movs	r3, #31
    2fde:	18fb      	adds	r3, r7, r3
    2fe0:	781b      	ldrb	r3, [r3, #0]
    2fe2:	b25b      	sxtb	r3, r3
    2fe4:	2b00      	cmp	r3, #0
    2fe6:	d000      	beq.n	2fea <nm_get_firmware_full_info+0x8e>
    2fe8:	e089      	b.n	30fe <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    2fea:	230c      	movs	r3, #12
    2fec:	18fb      	adds	r3, r7, r3
    2fee:	685b      	ldr	r3, [r3, #4]
    2ff0:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    2ff2:	697b      	ldr	r3, [r7, #20]
    2ff4:	041b      	lsls	r3, r3, #16
    2ff6:	0c1b      	lsrs	r3, r3, #16
    2ff8:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    2ffa:	697b      	ldr	r3, [r7, #20]
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d100      	bne.n	3002 <nm_get_firmware_full_info+0xa6>
    3000:	e074      	b.n	30ec <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    3002:	697b      	ldr	r3, [r7, #20]
    3004:	22c0      	movs	r2, #192	; 0xc0
    3006:	0292      	lsls	r2, r2, #10
    3008:	4313      	orrs	r3, r2
    300a:	221f      	movs	r2, #31
    300c:	18bc      	adds	r4, r7, r2
    300e:	6879      	ldr	r1, [r7, #4]
    3010:	2228      	movs	r2, #40	; 0x28
    3012:	0018      	movs	r0, r3
    3014:	4b42      	ldr	r3, [pc, #264]	; (3120 <nm_get_firmware_full_info+0x1c4>)
    3016:	4798      	blx	r3
    3018:	0003      	movs	r3, r0
    301a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    301c:	231f      	movs	r3, #31
    301e:	18fb      	adds	r3, r7, r3
    3020:	781b      	ldrb	r3, [r3, #0]
    3022:	b25b      	sxtb	r3, r3
    3024:	2b00      	cmp	r3, #0
    3026:	d16a      	bne.n	30fe <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    3028:	687b      	ldr	r3, [r7, #4]
    302a:	791b      	ldrb	r3, [r3, #4]
    302c:	021b      	lsls	r3, r3, #8
    302e:	b21a      	sxth	r2, r3
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	795b      	ldrb	r3, [r3, #5]
    3034:	011b      	lsls	r3, r3, #4
    3036:	b21b      	sxth	r3, r3
    3038:	21ff      	movs	r1, #255	; 0xff
    303a:	400b      	ands	r3, r1
    303c:	b21b      	sxth	r3, r3
    303e:	4313      	orrs	r3, r2
    3040:	b21a      	sxth	r2, r3
    3042:	687b      	ldr	r3, [r7, #4]
    3044:	799b      	ldrb	r3, [r3, #6]
    3046:	b21b      	sxth	r3, r3
    3048:	210f      	movs	r1, #15
    304a:	400b      	ands	r3, r1
    304c:	b21b      	sxth	r3, r3
    304e:	4313      	orrs	r3, r2
    3050:	b21a      	sxth	r2, r3
    3052:	231c      	movs	r3, #28
    3054:	18fb      	adds	r3, r7, r3
    3056:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    3058:	231a      	movs	r3, #26
    305a:	18fb      	adds	r3, r7, r3
    305c:	4a31      	ldr	r2, [pc, #196]	; (3124 <nm_get_firmware_full_info+0x1c8>)
    305e:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    3060:	687b      	ldr	r3, [r7, #4]
    3062:	79db      	ldrb	r3, [r3, #7]
    3064:	021b      	lsls	r3, r3, #8
    3066:	b21a      	sxth	r2, r3
    3068:	687b      	ldr	r3, [r7, #4]
    306a:	7a1b      	ldrb	r3, [r3, #8]
    306c:	011b      	lsls	r3, r3, #4
    306e:	b21b      	sxth	r3, r3
    3070:	21ff      	movs	r1, #255	; 0xff
    3072:	400b      	ands	r3, r1
    3074:	b21b      	sxth	r3, r3
    3076:	4313      	orrs	r3, r2
    3078:	b21a      	sxth	r2, r3
    307a:	687b      	ldr	r3, [r7, #4]
    307c:	7a5b      	ldrb	r3, [r3, #9]
    307e:	b21b      	sxth	r3, r3
    3080:	210f      	movs	r1, #15
    3082:	400b      	ands	r3, r1
    3084:	b21b      	sxth	r3, r3
    3086:	4313      	orrs	r3, r2
    3088:	b21a      	sxth	r2, r3
    308a:	2318      	movs	r3, #24
    308c:	18fb      	adds	r3, r7, r3
    308e:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    3090:	231c      	movs	r3, #28
    3092:	18fb      	adds	r3, r7, r3
    3094:	881b      	ldrh	r3, [r3, #0]
    3096:	2b00      	cmp	r3, #0
    3098:	d009      	beq.n	30ae <nm_get_firmware_full_info+0x152>
    309a:	2318      	movs	r3, #24
    309c:	18fb      	adds	r3, r7, r3
    309e:	881b      	ldrh	r3, [r3, #0]
    30a0:	2b00      	cmp	r3, #0
    30a2:	d004      	beq.n	30ae <nm_get_firmware_full_info+0x152>
    30a4:	2318      	movs	r3, #24
    30a6:	18fb      	adds	r3, r7, r3
    30a8:	881b      	ldrh	r3, [r3, #0]
    30aa:	2b00      	cmp	r3, #0
    30ac:	d104      	bne.n	30b8 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    30ae:	231f      	movs	r3, #31
    30b0:	18fb      	adds	r3, r7, r3
    30b2:	22f4      	movs	r2, #244	; 0xf4
    30b4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    30b6:	e022      	b.n	30fe <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    30b8:	231a      	movs	r3, #26
    30ba:	18fa      	adds	r2, r7, r3
    30bc:	2318      	movs	r3, #24
    30be:	18fb      	adds	r3, r7, r3
    30c0:	8812      	ldrh	r2, [r2, #0]
    30c2:	881b      	ldrh	r3, [r3, #0]
    30c4:	429a      	cmp	r2, r3
    30c6:	d204      	bcs.n	30d2 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    30c8:	231f      	movs	r3, #31
    30ca:	18fb      	adds	r3, r7, r3
    30cc:	22f3      	movs	r2, #243	; 0xf3
    30ce:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    30d0:	e015      	b.n	30fe <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    30d2:	231a      	movs	r3, #26
    30d4:	18fa      	adds	r2, r7, r3
    30d6:	231c      	movs	r3, #28
    30d8:	18fb      	adds	r3, r7, r3
    30da:	8812      	ldrh	r2, [r2, #0]
    30dc:	881b      	ldrh	r3, [r3, #0]
    30de:	429a      	cmp	r2, r3
    30e0:	d90d      	bls.n	30fe <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    30e2:	231f      	movs	r3, #31
    30e4:	18fb      	adds	r3, r7, r3
    30e6:	22f3      	movs	r2, #243	; 0xf3
    30e8:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    30ea:	e008      	b.n	30fe <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    30ec:	231f      	movs	r3, #31
    30ee:	18fb      	adds	r3, r7, r3
    30f0:	22f4      	movs	r2, #244	; 0xf4
    30f2:	701a      	strb	r2, [r3, #0]
    30f4:	e003      	b.n	30fe <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    30f6:	231f      	movs	r3, #31
    30f8:	18fb      	adds	r3, r7, r3
    30fa:	22f4      	movs	r2, #244	; 0xf4
    30fc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    30fe:	231f      	movs	r3, #31
    3100:	18fb      	adds	r3, r7, r3
    3102:	781b      	ldrb	r3, [r3, #0]
    3104:	b25b      	sxtb	r3, r3
}
    3106:	0018      	movs	r0, r3
    3108:	46bd      	mov	sp, r7
    310a:	b009      	add	sp, #36	; 0x24
    310c:	bd90      	pop	{r4, r7, pc}
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	0000c319 	.word	0x0000c319
    3114:	00000ce1 	.word	0x00000ce1
    3118:	000c0008 	.word	0x000c0008
    311c:	00002d25 	.word	0x00002d25
    3120:	00002d99 	.word	0x00002d99
    3124:	00001352 	.word	0x00001352

00003128 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    3128:	b590      	push	{r4, r7, lr}
    312a:	b085      	sub	sp, #20
    312c:	af00      	add	r7, sp, #0
    312e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3130:	230f      	movs	r3, #15
    3132:	18fb      	adds	r3, r7, r3
    3134:	2200      	movs	r2, #0
    3136:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    3138:	687b      	ldr	r3, [r7, #4]
    313a:	2b00      	cmp	r3, #0
    313c:	d013      	beq.n	3166 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    313e:	230e      	movs	r3, #14
    3140:	18fb      	adds	r3, r7, r3
    3142:	687a      	ldr	r2, [r7, #4]
    3144:	7812      	ldrb	r2, [r2, #0]
    3146:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    3148:	230e      	movs	r3, #14
    314a:	18fb      	adds	r3, r7, r3
    314c:	781b      	ldrb	r3, [r3, #0]
    314e:	2b00      	cmp	r3, #0
    3150:	d004      	beq.n	315c <nm_drv_init+0x34>
    3152:	230e      	movs	r3, #14
    3154:	18fb      	adds	r3, r7, r3
    3156:	781b      	ldrb	r3, [r3, #0]
    3158:	2b04      	cmp	r3, #4
    315a:	d908      	bls.n	316e <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    315c:	230e      	movs	r3, #14
    315e:	18fb      	adds	r3, r7, r3
    3160:	2201      	movs	r2, #1
    3162:	701a      	strb	r2, [r3, #0]
    3164:	e003      	b.n	316e <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    3166:	230e      	movs	r3, #14
    3168:	18fb      	adds	r3, r7, r3
    316a:	2201      	movs	r2, #1
    316c:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    316e:	230f      	movs	r3, #15
    3170:	18fc      	adds	r4, r7, r3
    3172:	2000      	movs	r0, #0
    3174:	4b41      	ldr	r3, [pc, #260]	; (327c <nm_drv_init+0x154>)
    3176:	4798      	blx	r3
    3178:	0003      	movs	r3, r0
    317a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    317c:	230f      	movs	r3, #15
    317e:	18fb      	adds	r3, r7, r3
    3180:	781b      	ldrb	r3, [r3, #0]
    3182:	b25b      	sxtb	r3, r3
    3184:	2b00      	cmp	r3, #0
    3186:	d00f      	beq.n	31a8 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    3188:	2328      	movs	r3, #40	; 0x28
    318a:	33ff      	adds	r3, #255	; 0xff
    318c:	001a      	movs	r2, r3
    318e:	493c      	ldr	r1, [pc, #240]	; (3280 <nm_drv_init+0x158>)
    3190:	4b3c      	ldr	r3, [pc, #240]	; (3284 <nm_drv_init+0x15c>)
    3192:	0018      	movs	r0, r3
    3194:	4b3c      	ldr	r3, [pc, #240]	; (3288 <nm_drv_init+0x160>)
    3196:	4798      	blx	r3
    3198:	4b3c      	ldr	r3, [pc, #240]	; (328c <nm_drv_init+0x164>)
    319a:	0018      	movs	r0, r3
    319c:	4b3c      	ldr	r3, [pc, #240]	; (3290 <nm_drv_init+0x168>)
    319e:	4798      	blx	r3
    31a0:	200d      	movs	r0, #13
    31a2:	4b3c      	ldr	r3, [pc, #240]	; (3294 <nm_drv_init+0x16c>)
    31a4:	4798      	blx	r3
		goto ERR1;
    31a6:	e060      	b.n	326a <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    31a8:	4b3b      	ldr	r3, [pc, #236]	; (3298 <nm_drv_init+0x170>)
    31aa:	0018      	movs	r0, r3
    31ac:	4b36      	ldr	r3, [pc, #216]	; (3288 <nm_drv_init+0x160>)
    31ae:	4798      	blx	r3
    31b0:	4b3a      	ldr	r3, [pc, #232]	; (329c <nm_drv_init+0x174>)
    31b2:	4798      	blx	r3
    31b4:	0002      	movs	r2, r0
    31b6:	4b3a      	ldr	r3, [pc, #232]	; (32a0 <nm_drv_init+0x178>)
    31b8:	0011      	movs	r1, r2
    31ba:	0018      	movs	r0, r3
    31bc:	4b32      	ldr	r3, [pc, #200]	; (3288 <nm_drv_init+0x160>)
    31be:	4798      	blx	r3
    31c0:	200d      	movs	r0, #13
    31c2:	4b34      	ldr	r3, [pc, #208]	; (3294 <nm_drv_init+0x16c>)
    31c4:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    31c6:	4b37      	ldr	r3, [pc, #220]	; (32a4 <nm_drv_init+0x17c>)
    31c8:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    31ca:	230f      	movs	r3, #15
    31cc:	18fc      	adds	r4, r7, r3
    31ce:	230e      	movs	r3, #14
    31d0:	18fb      	adds	r3, r7, r3
    31d2:	781b      	ldrb	r3, [r3, #0]
    31d4:	0018      	movs	r0, r3
    31d6:	4b34      	ldr	r3, [pc, #208]	; (32a8 <nm_drv_init+0x180>)
    31d8:	4798      	blx	r3
    31da:	0003      	movs	r3, r0
    31dc:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    31de:	230f      	movs	r3, #15
    31e0:	18fb      	adds	r3, r7, r3
    31e2:	781b      	ldrb	r3, [r3, #0]
    31e4:	b25b      	sxtb	r3, r3
    31e6:	2b00      	cmp	r3, #0
    31e8:	d13a      	bne.n	3260 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    31ea:	230f      	movs	r3, #15
    31ec:	18fc      	adds	r4, r7, r3
    31ee:	230e      	movs	r3, #14
    31f0:	18fb      	adds	r3, r7, r3
    31f2:	781b      	ldrb	r3, [r3, #0]
    31f4:	0018      	movs	r0, r3
    31f6:	4b2d      	ldr	r3, [pc, #180]	; (32ac <nm_drv_init+0x184>)
    31f8:	4798      	blx	r3
    31fa:	0003      	movs	r3, r0
    31fc:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    31fe:	230f      	movs	r3, #15
    3200:	18fb      	adds	r3, r7, r3
    3202:	781b      	ldrb	r3, [r3, #0]
    3204:	b25b      	sxtb	r3, r3
    3206:	2b00      	cmp	r3, #0
    3208:	d12c      	bne.n	3264 <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    320a:	230e      	movs	r3, #14
    320c:	18fb      	adds	r3, r7, r3
    320e:	781b      	ldrb	r3, [r3, #0]
    3210:	2b02      	cmp	r3, #2
    3212:	d02a      	beq.n	326a <nm_drv_init+0x142>
    3214:	230e      	movs	r3, #14
    3216:	18fb      	adds	r3, r7, r3
    3218:	781b      	ldrb	r3, [r3, #0]
    321a:	2b03      	cmp	r3, #3
    321c:	d025      	beq.n	326a <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    321e:	230f      	movs	r3, #15
    3220:	18fc      	adds	r4, r7, r3
    3222:	4b23      	ldr	r3, [pc, #140]	; (32b0 <nm_drv_init+0x188>)
    3224:	4798      	blx	r3
    3226:	0003      	movs	r3, r0
    3228:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    322a:	230f      	movs	r3, #15
    322c:	18fb      	adds	r3, r7, r3
    322e:	781b      	ldrb	r3, [r3, #0]
    3230:	b25b      	sxtb	r3, r3
    3232:	2b00      	cmp	r3, #0
    3234:	d00f      	beq.n	3256 <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    3236:	2356      	movs	r3, #86	; 0x56
    3238:	33ff      	adds	r3, #255	; 0xff
    323a:	001a      	movs	r2, r3
    323c:	4910      	ldr	r1, [pc, #64]	; (3280 <nm_drv_init+0x158>)
    323e:	4b11      	ldr	r3, [pc, #68]	; (3284 <nm_drv_init+0x15c>)
    3240:	0018      	movs	r0, r3
    3242:	4b11      	ldr	r3, [pc, #68]	; (3288 <nm_drv_init+0x160>)
    3244:	4798      	blx	r3
    3246:	4b1b      	ldr	r3, [pc, #108]	; (32b4 <nm_drv_init+0x18c>)
    3248:	0018      	movs	r0, r3
    324a:	4b11      	ldr	r3, [pc, #68]	; (3290 <nm_drv_init+0x168>)
    324c:	4798      	blx	r3
    324e:	200d      	movs	r0, #13
    3250:	4b10      	ldr	r3, [pc, #64]	; (3294 <nm_drv_init+0x16c>)
    3252:	4798      	blx	r3
		goto ERR2;
    3254:	e007      	b.n	3266 <nm_drv_init+0x13e>
	}
	return ret;
    3256:	230f      	movs	r3, #15
    3258:	18fb      	adds	r3, r7, r3
    325a:	781b      	ldrb	r3, [r3, #0]
    325c:	b25b      	sxtb	r3, r3
    325e:	e008      	b.n	3272 <nm_drv_init+0x14a>
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    3260:	46c0      	nop			; (mov r8, r8)
    3262:	e000      	b.n	3266 <nm_drv_init+0x13e>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    3264:	46c0      	nop			; (mov r8, r8)
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    3266:	4b14      	ldr	r3, [pc, #80]	; (32b8 <nm_drv_init+0x190>)
    3268:	4798      	blx	r3
ERR1:
	return ret;
    326a:	230f      	movs	r3, #15
    326c:	18fb      	adds	r3, r7, r3
    326e:	781b      	ldrb	r3, [r3, #0]
    3270:	b25b      	sxtb	r3, r3
}
    3272:	0018      	movs	r0, r3
    3274:	46bd      	mov	sp, r7
    3276:	b005      	add	sp, #20
    3278:	bd90      	pop	{r4, r7, pc}
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	00002c89 	.word	0x00002c89
    3280:	0000e0e0 	.word	0x0000e0e0
    3284:	0000e014 	.word	0x0000e014
    3288:	0000c461 	.word	0x0000c461
    328c:	0000e028 	.word	0x0000e028
    3290:	0000c581 	.word	0x0000c581
    3294:	0000c495 	.word	0x0000c495
    3298:	0000e044 	.word	0x0000e044
    329c:	00002629 	.word	0x00002629
    32a0:	0000e050 	.word	0x0000e050
    32a4:	000045fd 	.word	0x000045fd
    32a8:	0000297d 	.word	0x0000297d
    32ac:	00002b15 	.word	0x00002b15
    32b0:	00002575 	.word	0x00002575
    32b4:	0000e060 	.word	0x0000e060
    32b8:	00002cbd 	.word	0x00002cbd

000032bc <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    32bc:	b590      	push	{r4, r7, lr}
    32be:	b085      	sub	sp, #20
    32c0:	af00      	add	r7, sp, #0
    32c2:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    32c4:	230f      	movs	r3, #15
    32c6:	18fc      	adds	r4, r7, r3
    32c8:	4b2d      	ldr	r3, [pc, #180]	; (3380 <nm_drv_deinit+0xc4>)
    32ca:	4798      	blx	r3
    32cc:	0003      	movs	r3, r0
    32ce:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    32d0:	230f      	movs	r3, #15
    32d2:	18fb      	adds	r3, r7, r3
    32d4:	781b      	ldrb	r3, [r3, #0]
    32d6:	b25b      	sxtb	r3, r3
    32d8:	2b00      	cmp	r3, #0
    32da:	d00e      	beq.n	32fa <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    32dc:	23b6      	movs	r3, #182	; 0xb6
    32de:	005a      	lsls	r2, r3, #1
    32e0:	4928      	ldr	r1, [pc, #160]	; (3384 <nm_drv_deinit+0xc8>)
    32e2:	4b29      	ldr	r3, [pc, #164]	; (3388 <nm_drv_deinit+0xcc>)
    32e4:	0018      	movs	r0, r3
    32e6:	4b29      	ldr	r3, [pc, #164]	; (338c <nm_drv_deinit+0xd0>)
    32e8:	4798      	blx	r3
    32ea:	4b29      	ldr	r3, [pc, #164]	; (3390 <nm_drv_deinit+0xd4>)
    32ec:	0018      	movs	r0, r3
    32ee:	4b29      	ldr	r3, [pc, #164]	; (3394 <nm_drv_deinit+0xd8>)
    32f0:	4798      	blx	r3
    32f2:	200d      	movs	r0, #13
    32f4:	4b28      	ldr	r3, [pc, #160]	; (3398 <nm_drv_deinit+0xdc>)
    32f6:	4798      	blx	r3
		goto ERR1;
    32f8:	e03a      	b.n	3370 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    32fa:	230f      	movs	r3, #15
    32fc:	18fc      	adds	r4, r7, r3
    32fe:	2000      	movs	r0, #0
    3300:	4b26      	ldr	r3, [pc, #152]	; (339c <nm_drv_deinit+0xe0>)
    3302:	4798      	blx	r3
    3304:	0003      	movs	r3, r0
    3306:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3308:	230f      	movs	r3, #15
    330a:	18fb      	adds	r3, r7, r3
    330c:	781b      	ldrb	r3, [r3, #0]
    330e:	b25b      	sxtb	r3, r3
    3310:	2b00      	cmp	r3, #0
    3312:	d00f      	beq.n	3334 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    3314:	2374      	movs	r3, #116	; 0x74
    3316:	33ff      	adds	r3, #255	; 0xff
    3318:	001a      	movs	r2, r3
    331a:	491a      	ldr	r1, [pc, #104]	; (3384 <nm_drv_deinit+0xc8>)
    331c:	4b1a      	ldr	r3, [pc, #104]	; (3388 <nm_drv_deinit+0xcc>)
    331e:	0018      	movs	r0, r3
    3320:	4b1a      	ldr	r3, [pc, #104]	; (338c <nm_drv_deinit+0xd0>)
    3322:	4798      	blx	r3
    3324:	4b1e      	ldr	r3, [pc, #120]	; (33a0 <nm_drv_deinit+0xe4>)
    3326:	0018      	movs	r0, r3
    3328:	4b1a      	ldr	r3, [pc, #104]	; (3394 <nm_drv_deinit+0xd8>)
    332a:	4798      	blx	r3
    332c:	200d      	movs	r0, #13
    332e:	4b1a      	ldr	r3, [pc, #104]	; (3398 <nm_drv_deinit+0xdc>)
    3330:	4798      	blx	r3
		goto ERR1;
    3332:	e01d      	b.n	3370 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    3334:	230f      	movs	r3, #15
    3336:	18fc      	adds	r4, r7, r3
    3338:	4b1a      	ldr	r3, [pc, #104]	; (33a4 <nm_drv_deinit+0xe8>)
    333a:	4798      	blx	r3
    333c:	0003      	movs	r3, r0
    333e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3340:	230f      	movs	r3, #15
    3342:	18fb      	adds	r3, r7, r3
    3344:	781b      	ldrb	r3, [r3, #0]
    3346:	b25b      	sxtb	r3, r3
    3348:	2b00      	cmp	r3, #0
    334a:	d00f      	beq.n	336c <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    334c:	237a      	movs	r3, #122	; 0x7a
    334e:	33ff      	adds	r3, #255	; 0xff
    3350:	001a      	movs	r2, r3
    3352:	490c      	ldr	r1, [pc, #48]	; (3384 <nm_drv_deinit+0xc8>)
    3354:	4b0c      	ldr	r3, [pc, #48]	; (3388 <nm_drv_deinit+0xcc>)
    3356:	0018      	movs	r0, r3
    3358:	4b0c      	ldr	r3, [pc, #48]	; (338c <nm_drv_deinit+0xd0>)
    335a:	4798      	blx	r3
    335c:	4b12      	ldr	r3, [pc, #72]	; (33a8 <nm_drv_deinit+0xec>)
    335e:	0018      	movs	r0, r3
    3360:	4b0c      	ldr	r3, [pc, #48]	; (3394 <nm_drv_deinit+0xd8>)
    3362:	4798      	blx	r3
    3364:	200d      	movs	r0, #13
    3366:	4b0c      	ldr	r3, [pc, #48]	; (3398 <nm_drv_deinit+0xdc>)
    3368:	4798      	blx	r3
		goto ERR1;
    336a:	e001      	b.n	3370 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    336c:	4b0f      	ldr	r3, [pc, #60]	; (33ac <nm_drv_deinit+0xf0>)
    336e:	4798      	blx	r3
#endif

ERR1:
	return ret;
    3370:	230f      	movs	r3, #15
    3372:	18fb      	adds	r3, r7, r3
    3374:	781b      	ldrb	r3, [r3, #0]
    3376:	b25b      	sxtb	r3, r3
}
    3378:	0018      	movs	r0, r3
    337a:	46bd      	mov	sp, r7
    337c:	b005      	add	sp, #20
    337e:	bd90      	pop	{r4, r7, pc}
    3380:	00002bc9 	.word	0x00002bc9
    3384:	0000e0ec 	.word	0x0000e0ec
    3388:	0000e014 	.word	0x0000e014
    338c:	0000c461 	.word	0x0000c461
    3390:	0000e080 	.word	0x0000e080
    3394:	0000c581 	.word	0x0000c581
    3398:	0000c495 	.word	0x0000c495
    339c:	00005a55 	.word	0x00005a55
    33a0:	0000e0a0 	.word	0x0000e0a0
    33a4:	00002cbd 	.word	0x00002cbd
    33a8:	0000e0c4 	.word	0x0000e0c4
    33ac:	00004749 	.word	0x00004749

000033b0 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    33b0:	b580      	push	{r7, lr}
    33b2:	b086      	sub	sp, #24
    33b4:	af00      	add	r7, sp, #0
    33b6:	6078      	str	r0, [r7, #4]
    33b8:	000a      	movs	r2, r1
    33ba:	1cbb      	adds	r3, r7, #2
    33bc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    33be:	230c      	movs	r3, #12
    33c0:	18fb      	adds	r3, r7, r3
    33c2:	2200      	movs	r2, #0
    33c4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    33c6:	230c      	movs	r3, #12
    33c8:	18fb      	adds	r3, r7, r3
    33ca:	687a      	ldr	r2, [r7, #4]
    33cc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    33ce:	230c      	movs	r3, #12
    33d0:	18fb      	adds	r3, r7, r3
    33d2:	1cba      	adds	r2, r7, #2
    33d4:	8812      	ldrh	r2, [r2, #0]
    33d6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    33d8:	230c      	movs	r3, #12
    33da:	18fb      	adds	r3, r7, r3
    33dc:	0019      	movs	r1, r3
    33de:	2003      	movs	r0, #3
    33e0:	4b03      	ldr	r3, [pc, #12]	; (33f0 <nmi_spi_read+0x40>)
    33e2:	4798      	blx	r3
    33e4:	0003      	movs	r3, r0
}
    33e6:	0018      	movs	r0, r3
    33e8:	46bd      	mov	sp, r7
    33ea:	b006      	add	sp, #24
    33ec:	bd80      	pop	{r7, pc}
    33ee:	46c0      	nop			; (mov r8, r8)
    33f0:	00000ba1 	.word	0x00000ba1

000033f4 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    33f4:	b580      	push	{r7, lr}
    33f6:	b086      	sub	sp, #24
    33f8:	af00      	add	r7, sp, #0
    33fa:	6078      	str	r0, [r7, #4]
    33fc:	000a      	movs	r2, r1
    33fe:	1cbb      	adds	r3, r7, #2
    3400:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    3402:	230c      	movs	r3, #12
    3404:	18fb      	adds	r3, r7, r3
    3406:	687a      	ldr	r2, [r7, #4]
    3408:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    340a:	230c      	movs	r3, #12
    340c:	18fb      	adds	r3, r7, r3
    340e:	2200      	movs	r2, #0
    3410:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    3412:	230c      	movs	r3, #12
    3414:	18fb      	adds	r3, r7, r3
    3416:	1cba      	adds	r2, r7, #2
    3418:	8812      	ldrh	r2, [r2, #0]
    341a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    341c:	230c      	movs	r3, #12
    341e:	18fb      	adds	r3, r7, r3
    3420:	0019      	movs	r1, r3
    3422:	2003      	movs	r0, #3
    3424:	4b03      	ldr	r3, [pc, #12]	; (3434 <nmi_spi_write+0x40>)
    3426:	4798      	blx	r3
    3428:	0003      	movs	r3, r0
}
    342a:	0018      	movs	r0, r3
    342c:	46bd      	mov	sp, r7
    342e:	b006      	add	sp, #24
    3430:	bd80      	pop	{r7, pc}
    3432:	46c0      	nop			; (mov r8, r8)
    3434:	00000ba1 	.word	0x00000ba1

00003438 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    3438:	b580      	push	{r7, lr}
    343a:	b082      	sub	sp, #8
    343c:	af00      	add	r7, sp, #0
    343e:	0002      	movs	r2, r0
    3440:	1dfb      	adds	r3, r7, #7
    3442:	701a      	strb	r2, [r3, #0]
    3444:	1dbb      	adds	r3, r7, #6
    3446:	1c0a      	adds	r2, r1, #0
    3448:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    344a:	1dfb      	adds	r3, r7, #7
    344c:	781b      	ldrb	r3, [r3, #0]
    344e:	005a      	lsls	r2, r3, #1
    3450:	1dbb      	adds	r3, r7, #6
    3452:	781b      	ldrb	r3, [r3, #0]
    3454:	4053      	eors	r3, r2
    3456:	4a03      	ldr	r2, [pc, #12]	; (3464 <crc7_byte+0x2c>)
    3458:	5cd3      	ldrb	r3, [r2, r3]
}
    345a:	0018      	movs	r0, r3
    345c:	46bd      	mov	sp, r7
    345e:	b002      	add	sp, #8
    3460:	bd80      	pop	{r7, pc}
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	0000e0fc 	.word	0x0000e0fc

00003468 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    3468:	b590      	push	{r4, r7, lr}
    346a:	b085      	sub	sp, #20
    346c:	af00      	add	r7, sp, #0
    346e:	60b9      	str	r1, [r7, #8]
    3470:	607a      	str	r2, [r7, #4]
    3472:	230f      	movs	r3, #15
    3474:	18fb      	adds	r3, r7, r3
    3476:	1c02      	adds	r2, r0, #0
    3478:	701a      	strb	r2, [r3, #0]
	while (len--)
    347a:	e00e      	b.n	349a <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    347c:	68bb      	ldr	r3, [r7, #8]
    347e:	1c5a      	adds	r2, r3, #1
    3480:	60ba      	str	r2, [r7, #8]
    3482:	781a      	ldrb	r2, [r3, #0]
    3484:	230f      	movs	r3, #15
    3486:	18fc      	adds	r4, r7, r3
    3488:	230f      	movs	r3, #15
    348a:	18fb      	adds	r3, r7, r3
    348c:	781b      	ldrb	r3, [r3, #0]
    348e:	0011      	movs	r1, r2
    3490:	0018      	movs	r0, r3
    3492:	4b08      	ldr	r3, [pc, #32]	; (34b4 <crc7+0x4c>)
    3494:	4798      	blx	r3
    3496:	0003      	movs	r3, r0
    3498:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    349a:	687b      	ldr	r3, [r7, #4]
    349c:	1e5a      	subs	r2, r3, #1
    349e:	607a      	str	r2, [r7, #4]
    34a0:	2b00      	cmp	r3, #0
    34a2:	d1eb      	bne.n	347c <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    34a4:	230f      	movs	r3, #15
    34a6:	18fb      	adds	r3, r7, r3
    34a8:	781b      	ldrb	r3, [r3, #0]
}
    34aa:	0018      	movs	r0, r3
    34ac:	46bd      	mov	sp, r7
    34ae:	b005      	add	sp, #20
    34b0:	bd90      	pop	{r4, r7, pc}
    34b2:	46c0      	nop			; (mov r8, r8)
    34b4:	00003439 	.word	0x00003439

000034b8 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    34b8:	b590      	push	{r4, r7, lr}
    34ba:	b089      	sub	sp, #36	; 0x24
    34bc:	af00      	add	r7, sp, #0
    34be:	60b9      	str	r1, [r7, #8]
    34c0:	607a      	str	r2, [r7, #4]
    34c2:	603b      	str	r3, [r7, #0]
    34c4:	230f      	movs	r3, #15
    34c6:	18fb      	adds	r3, r7, r3
    34c8:	1c02      	adds	r2, r0, #0
    34ca:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    34cc:	231f      	movs	r3, #31
    34ce:	18fb      	adds	r3, r7, r3
    34d0:	2205      	movs	r2, #5
    34d2:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    34d4:	231e      	movs	r3, #30
    34d6:	18fb      	adds	r3, r7, r3
    34d8:	2201      	movs	r2, #1
    34da:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    34dc:	2314      	movs	r3, #20
    34de:	18fb      	adds	r3, r7, r3
    34e0:	220f      	movs	r2, #15
    34e2:	18ba      	adds	r2, r7, r2
    34e4:	7812      	ldrb	r2, [r2, #0]
    34e6:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    34e8:	230f      	movs	r3, #15
    34ea:	18fb      	adds	r3, r7, r3
    34ec:	781b      	ldrb	r3, [r3, #0]
    34ee:	3bc1      	subs	r3, #193	; 0xc1
    34f0:	2b0e      	cmp	r3, #14
    34f2:	d900      	bls.n	34f6 <spi_cmd+0x3e>
    34f4:	e11b      	b.n	372e <spi_cmd+0x276>
    34f6:	009a      	lsls	r2, r3, #2
    34f8:	4bb6      	ldr	r3, [pc, #728]	; (37d4 <spi_cmd+0x31c>)
    34fa:	18d3      	adds	r3, r2, r3
    34fc:	681b      	ldr	r3, [r3, #0]
    34fe:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    3500:	68bb      	ldr	r3, [r7, #8]
    3502:	0c1b      	lsrs	r3, r3, #16
    3504:	b2da      	uxtb	r2, r3
    3506:	2314      	movs	r3, #20
    3508:	18fb      	adds	r3, r7, r3
    350a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    350c:	68bb      	ldr	r3, [r7, #8]
    350e:	0a1b      	lsrs	r3, r3, #8
    3510:	b2da      	uxtb	r2, r3
    3512:	2314      	movs	r3, #20
    3514:	18fb      	adds	r3, r7, r3
    3516:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3518:	68bb      	ldr	r3, [r7, #8]
    351a:	b2da      	uxtb	r2, r3
    351c:	2314      	movs	r3, #20
    351e:	18fb      	adds	r3, r7, r3
    3520:	70da      	strb	r2, [r3, #3]
		len = 5;
    3522:	231f      	movs	r3, #31
    3524:	18fb      	adds	r3, r7, r3
    3526:	2205      	movs	r2, #5
    3528:	701a      	strb	r2, [r3, #0]
		break;
    352a:	e105      	b.n	3738 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    352c:	68bb      	ldr	r3, [r7, #8]
    352e:	0a1b      	lsrs	r3, r3, #8
    3530:	b2da      	uxtb	r2, r3
    3532:	2314      	movs	r3, #20
    3534:	18fb      	adds	r3, r7, r3
    3536:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    3538:	2330      	movs	r3, #48	; 0x30
    353a:	18fb      	adds	r3, r7, r3
    353c:	781b      	ldrb	r3, [r3, #0]
    353e:	2b00      	cmp	r3, #0
    3540:	d009      	beq.n	3556 <spi_cmd+0x9e>
    3542:	2314      	movs	r3, #20
    3544:	18fb      	adds	r3, r7, r3
    3546:	785b      	ldrb	r3, [r3, #1]
    3548:	2280      	movs	r2, #128	; 0x80
    354a:	4252      	negs	r2, r2
    354c:	4313      	orrs	r3, r2
    354e:	b2da      	uxtb	r2, r3
    3550:	2314      	movs	r3, #20
    3552:	18fb      	adds	r3, r7, r3
    3554:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    3556:	68bb      	ldr	r3, [r7, #8]
    3558:	b2da      	uxtb	r2, r3
    355a:	2314      	movs	r3, #20
    355c:	18fb      	adds	r3, r7, r3
    355e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3560:	2314      	movs	r3, #20
    3562:	18fb      	adds	r3, r7, r3
    3564:	2200      	movs	r2, #0
    3566:	70da      	strb	r2, [r3, #3]
		len = 5;
    3568:	231f      	movs	r3, #31
    356a:	18fb      	adds	r3, r7, r3
    356c:	2205      	movs	r2, #5
    356e:	701a      	strb	r2, [r3, #0]
		break;
    3570:	e0e2      	b.n	3738 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    3572:	2314      	movs	r3, #20
    3574:	18fb      	adds	r3, r7, r3
    3576:	2200      	movs	r2, #0
    3578:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    357a:	2314      	movs	r3, #20
    357c:	18fb      	adds	r3, r7, r3
    357e:	2200      	movs	r2, #0
    3580:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3582:	2314      	movs	r3, #20
    3584:	18fb      	adds	r3, r7, r3
    3586:	2200      	movs	r2, #0
    3588:	70da      	strb	r2, [r3, #3]
		len = 5;
    358a:	231f      	movs	r3, #31
    358c:	18fb      	adds	r3, r7, r3
    358e:	2205      	movs	r2, #5
    3590:	701a      	strb	r2, [r3, #0]
		break;
    3592:	e0d1      	b.n	3738 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    3594:	2314      	movs	r3, #20
    3596:	18fb      	adds	r3, r7, r3
    3598:	2200      	movs	r2, #0
    359a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    359c:	2314      	movs	r3, #20
    359e:	18fb      	adds	r3, r7, r3
    35a0:	2200      	movs	r2, #0
    35a2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    35a4:	2314      	movs	r3, #20
    35a6:	18fb      	adds	r3, r7, r3
    35a8:	2200      	movs	r2, #0
    35aa:	70da      	strb	r2, [r3, #3]
		len = 5;
    35ac:	231f      	movs	r3, #31
    35ae:	18fb      	adds	r3, r7, r3
    35b0:	2205      	movs	r2, #5
    35b2:	701a      	strb	r2, [r3, #0]
		break;
    35b4:	e0c0      	b.n	3738 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    35b6:	2314      	movs	r3, #20
    35b8:	18fb      	adds	r3, r7, r3
    35ba:	22ff      	movs	r2, #255	; 0xff
    35bc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    35be:	2314      	movs	r3, #20
    35c0:	18fb      	adds	r3, r7, r3
    35c2:	22ff      	movs	r2, #255	; 0xff
    35c4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    35c6:	2314      	movs	r3, #20
    35c8:	18fb      	adds	r3, r7, r3
    35ca:	22ff      	movs	r2, #255	; 0xff
    35cc:	70da      	strb	r2, [r3, #3]
		len = 5;
    35ce:	231f      	movs	r3, #31
    35d0:	18fb      	adds	r3, r7, r3
    35d2:	2205      	movs	r2, #5
    35d4:	701a      	strb	r2, [r3, #0]
		break;
    35d6:	e0af      	b.n	3738 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    35d8:	68bb      	ldr	r3, [r7, #8]
    35da:	0c1b      	lsrs	r3, r3, #16
    35dc:	b2da      	uxtb	r2, r3
    35de:	2314      	movs	r3, #20
    35e0:	18fb      	adds	r3, r7, r3
    35e2:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    35e4:	68bb      	ldr	r3, [r7, #8]
    35e6:	0a1b      	lsrs	r3, r3, #8
    35e8:	b2da      	uxtb	r2, r3
    35ea:	2314      	movs	r3, #20
    35ec:	18fb      	adds	r3, r7, r3
    35ee:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    35f0:	68bb      	ldr	r3, [r7, #8]
    35f2:	b2da      	uxtb	r2, r3
    35f4:	2314      	movs	r3, #20
    35f6:	18fb      	adds	r3, r7, r3
    35f8:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    35fa:	683b      	ldr	r3, [r7, #0]
    35fc:	0a1b      	lsrs	r3, r3, #8
    35fe:	b2da      	uxtb	r2, r3
    3600:	2314      	movs	r3, #20
    3602:	18fb      	adds	r3, r7, r3
    3604:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    3606:	683b      	ldr	r3, [r7, #0]
    3608:	b2da      	uxtb	r2, r3
    360a:	2314      	movs	r3, #20
    360c:	18fb      	adds	r3, r7, r3
    360e:	715a      	strb	r2, [r3, #5]
		len = 7;
    3610:	231f      	movs	r3, #31
    3612:	18fb      	adds	r3, r7, r3
    3614:	2207      	movs	r2, #7
    3616:	701a      	strb	r2, [r3, #0]
		break;
    3618:	e08e      	b.n	3738 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    361a:	68bb      	ldr	r3, [r7, #8]
    361c:	0c1b      	lsrs	r3, r3, #16
    361e:	b2da      	uxtb	r2, r3
    3620:	2314      	movs	r3, #20
    3622:	18fb      	adds	r3, r7, r3
    3624:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3626:	68bb      	ldr	r3, [r7, #8]
    3628:	0a1b      	lsrs	r3, r3, #8
    362a:	b2da      	uxtb	r2, r3
    362c:	2314      	movs	r3, #20
    362e:	18fb      	adds	r3, r7, r3
    3630:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3632:	68bb      	ldr	r3, [r7, #8]
    3634:	b2da      	uxtb	r2, r3
    3636:	2314      	movs	r3, #20
    3638:	18fb      	adds	r3, r7, r3
    363a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    363c:	683b      	ldr	r3, [r7, #0]
    363e:	0c1b      	lsrs	r3, r3, #16
    3640:	b2da      	uxtb	r2, r3
    3642:	2314      	movs	r3, #20
    3644:	18fb      	adds	r3, r7, r3
    3646:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    3648:	683b      	ldr	r3, [r7, #0]
    364a:	0a1b      	lsrs	r3, r3, #8
    364c:	b2da      	uxtb	r2, r3
    364e:	2314      	movs	r3, #20
    3650:	18fb      	adds	r3, r7, r3
    3652:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    3654:	683b      	ldr	r3, [r7, #0]
    3656:	b2da      	uxtb	r2, r3
    3658:	2314      	movs	r3, #20
    365a:	18fb      	adds	r3, r7, r3
    365c:	719a      	strb	r2, [r3, #6]
		len = 8;
    365e:	231f      	movs	r3, #31
    3660:	18fb      	adds	r3, r7, r3
    3662:	2208      	movs	r2, #8
    3664:	701a      	strb	r2, [r3, #0]
		break;
    3666:	e067      	b.n	3738 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    3668:	68bb      	ldr	r3, [r7, #8]
    366a:	0a1b      	lsrs	r3, r3, #8
    366c:	b2da      	uxtb	r2, r3
    366e:	2314      	movs	r3, #20
    3670:	18fb      	adds	r3, r7, r3
    3672:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    3674:	2330      	movs	r3, #48	; 0x30
    3676:	18fb      	adds	r3, r7, r3
    3678:	781b      	ldrb	r3, [r3, #0]
    367a:	2b00      	cmp	r3, #0
    367c:	d009      	beq.n	3692 <spi_cmd+0x1da>
    367e:	2314      	movs	r3, #20
    3680:	18fb      	adds	r3, r7, r3
    3682:	785b      	ldrb	r3, [r3, #1]
    3684:	2280      	movs	r2, #128	; 0x80
    3686:	4252      	negs	r2, r2
    3688:	4313      	orrs	r3, r2
    368a:	b2da      	uxtb	r2, r3
    368c:	2314      	movs	r3, #20
    368e:	18fb      	adds	r3, r7, r3
    3690:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    3692:	68bb      	ldr	r3, [r7, #8]
    3694:	b2da      	uxtb	r2, r3
    3696:	2314      	movs	r3, #20
    3698:	18fb      	adds	r3, r7, r3
    369a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    369c:	687b      	ldr	r3, [r7, #4]
    369e:	0e1b      	lsrs	r3, r3, #24
    36a0:	b2da      	uxtb	r2, r3
    36a2:	2314      	movs	r3, #20
    36a4:	18fb      	adds	r3, r7, r3
    36a6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    36a8:	687b      	ldr	r3, [r7, #4]
    36aa:	0c1b      	lsrs	r3, r3, #16
    36ac:	b2da      	uxtb	r2, r3
    36ae:	2314      	movs	r3, #20
    36b0:	18fb      	adds	r3, r7, r3
    36b2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    36b4:	687b      	ldr	r3, [r7, #4]
    36b6:	0a1b      	lsrs	r3, r3, #8
    36b8:	b2da      	uxtb	r2, r3
    36ba:	2314      	movs	r3, #20
    36bc:	18fb      	adds	r3, r7, r3
    36be:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	b2da      	uxtb	r2, r3
    36c4:	2314      	movs	r3, #20
    36c6:	18fb      	adds	r3, r7, r3
    36c8:	719a      	strb	r2, [r3, #6]
		len = 8;
    36ca:	231f      	movs	r3, #31
    36cc:	18fb      	adds	r3, r7, r3
    36ce:	2208      	movs	r2, #8
    36d0:	701a      	strb	r2, [r3, #0]
		break;
    36d2:	e031      	b.n	3738 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    36d4:	68bb      	ldr	r3, [r7, #8]
    36d6:	0c1b      	lsrs	r3, r3, #16
    36d8:	b2da      	uxtb	r2, r3
    36da:	2314      	movs	r3, #20
    36dc:	18fb      	adds	r3, r7, r3
    36de:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    36e0:	68bb      	ldr	r3, [r7, #8]
    36e2:	0a1b      	lsrs	r3, r3, #8
    36e4:	b2da      	uxtb	r2, r3
    36e6:	2314      	movs	r3, #20
    36e8:	18fb      	adds	r3, r7, r3
    36ea:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    36ec:	68bb      	ldr	r3, [r7, #8]
    36ee:	b2da      	uxtb	r2, r3
    36f0:	2314      	movs	r3, #20
    36f2:	18fb      	adds	r3, r7, r3
    36f4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    36f6:	687b      	ldr	r3, [r7, #4]
    36f8:	0e1b      	lsrs	r3, r3, #24
    36fa:	b2da      	uxtb	r2, r3
    36fc:	2314      	movs	r3, #20
    36fe:	18fb      	adds	r3, r7, r3
    3700:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    3702:	687b      	ldr	r3, [r7, #4]
    3704:	0c1b      	lsrs	r3, r3, #16
    3706:	b2da      	uxtb	r2, r3
    3708:	2314      	movs	r3, #20
    370a:	18fb      	adds	r3, r7, r3
    370c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    370e:	687b      	ldr	r3, [r7, #4]
    3710:	0a1b      	lsrs	r3, r3, #8
    3712:	b2da      	uxtb	r2, r3
    3714:	2314      	movs	r3, #20
    3716:	18fb      	adds	r3, r7, r3
    3718:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    371a:	687b      	ldr	r3, [r7, #4]
    371c:	b2da      	uxtb	r2, r3
    371e:	2314      	movs	r3, #20
    3720:	18fb      	adds	r3, r7, r3
    3722:	71da      	strb	r2, [r3, #7]
		len = 9;
    3724:	231f      	movs	r3, #31
    3726:	18fb      	adds	r3, r7, r3
    3728:	2209      	movs	r2, #9
    372a:	701a      	strb	r2, [r3, #0]
		break;
    372c:	e004      	b.n	3738 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    372e:	231e      	movs	r3, #30
    3730:	18fb      	adds	r3, r7, r3
    3732:	2200      	movs	r2, #0
    3734:	701a      	strb	r2, [r3, #0]
		break;
    3736:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    3738:	231e      	movs	r3, #30
    373a:	18fb      	adds	r3, r7, r3
    373c:	781b      	ldrb	r3, [r3, #0]
    373e:	b25b      	sxtb	r3, r3
    3740:	2b00      	cmp	r3, #0
    3742:	d03f      	beq.n	37c4 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    3744:	4b24      	ldr	r3, [pc, #144]	; (37d8 <spi_cmd+0x320>)
    3746:	781b      	ldrb	r3, [r3, #0]
    3748:	2b00      	cmp	r3, #0
    374a:	d115      	bne.n	3778 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    374c:	231f      	movs	r3, #31
    374e:	18fb      	adds	r3, r7, r3
    3750:	781b      	ldrb	r3, [r3, #0]
    3752:	1e5c      	subs	r4, r3, #1
    3754:	231f      	movs	r3, #31
    3756:	18fb      	adds	r3, r7, r3
    3758:	781b      	ldrb	r3, [r3, #0]
    375a:	3b01      	subs	r3, #1
    375c:	001a      	movs	r2, r3
    375e:	2314      	movs	r3, #20
    3760:	18fb      	adds	r3, r7, r3
    3762:	0019      	movs	r1, r3
    3764:	207f      	movs	r0, #127	; 0x7f
    3766:	4b1d      	ldr	r3, [pc, #116]	; (37dc <spi_cmd+0x324>)
    3768:	4798      	blx	r3
    376a:	0003      	movs	r3, r0
    376c:	18db      	adds	r3, r3, r3
    376e:	b2da      	uxtb	r2, r3
    3770:	2314      	movs	r3, #20
    3772:	18fb      	adds	r3, r7, r3
    3774:	551a      	strb	r2, [r3, r4]
    3776:	e006      	b.n	3786 <spi_cmd+0x2ce>
		else
			len-=1;
    3778:	231f      	movs	r3, #31
    377a:	18fb      	adds	r3, r7, r3
    377c:	221f      	movs	r2, #31
    377e:	18ba      	adds	r2, r7, r2
    3780:	7812      	ldrb	r2, [r2, #0]
    3782:	3a01      	subs	r2, #1
    3784:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    3786:	231f      	movs	r3, #31
    3788:	18fb      	adds	r3, r7, r3
    378a:	781b      	ldrb	r3, [r3, #0]
    378c:	b29a      	uxth	r2, r3
    378e:	2314      	movs	r3, #20
    3790:	18fb      	adds	r3, r7, r3
    3792:	0011      	movs	r1, r2
    3794:	0018      	movs	r0, r3
    3796:	4b12      	ldr	r3, [pc, #72]	; (37e0 <spi_cmd+0x328>)
    3798:	4798      	blx	r3
    379a:	1e03      	subs	r3, r0, #0
    379c:	d012      	beq.n	37c4 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    379e:	2328      	movs	r3, #40	; 0x28
    37a0:	33ff      	adds	r3, #255	; 0xff
    37a2:	001a      	movs	r2, r3
    37a4:	490f      	ldr	r1, [pc, #60]	; (37e4 <spi_cmd+0x32c>)
    37a6:	4b10      	ldr	r3, [pc, #64]	; (37e8 <spi_cmd+0x330>)
    37a8:	0018      	movs	r0, r3
    37aa:	4b10      	ldr	r3, [pc, #64]	; (37ec <spi_cmd+0x334>)
    37ac:	4798      	blx	r3
    37ae:	4b10      	ldr	r3, [pc, #64]	; (37f0 <spi_cmd+0x338>)
    37b0:	0018      	movs	r0, r3
    37b2:	4b10      	ldr	r3, [pc, #64]	; (37f4 <spi_cmd+0x33c>)
    37b4:	4798      	blx	r3
    37b6:	200d      	movs	r0, #13
    37b8:	4b0f      	ldr	r3, [pc, #60]	; (37f8 <spi_cmd+0x340>)
    37ba:	4798      	blx	r3
			result = N_FAIL;
    37bc:	231e      	movs	r3, #30
    37be:	18fb      	adds	r3, r7, r3
    37c0:	2200      	movs	r2, #0
    37c2:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    37c4:	231e      	movs	r3, #30
    37c6:	18fb      	adds	r3, r7, r3
    37c8:	781b      	ldrb	r3, [r3, #0]
    37ca:	b25b      	sxtb	r3, r3
}
    37cc:	0018      	movs	r0, r3
    37ce:	46bd      	mov	sp, r7
    37d0:	b009      	add	sp, #36	; 0x24
    37d2:	bd90      	pop	{r4, r7, pc}
    37d4:	0000e754 	.word	0x0000e754
    37d8:	200000b0 	.word	0x200000b0
    37dc:	00003469 	.word	0x00003469
    37e0:	000033f5 	.word	0x000033f5
    37e4:	0000e790 	.word	0x0000e790
    37e8:	0000e1fc 	.word	0x0000e1fc
    37ec:	0000c461 	.word	0x0000c461
    37f0:	0000e210 	.word	0x0000e210
    37f4:	0000c581 	.word	0x0000c581
    37f8:	0000c495 	.word	0x0000c495

000037fc <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    37fc:	b590      	push	{r4, r7, lr}
    37fe:	b085      	sub	sp, #20
    3800:	af00      	add	r7, sp, #0
    3802:	0002      	movs	r2, r0
    3804:	1dfb      	adds	r3, r7, #7
    3806:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    3808:	230e      	movs	r3, #14
    380a:	18fb      	adds	r3, r7, r3
    380c:	2201      	movs	r2, #1
    380e:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    3810:	4b31      	ldr	r3, [pc, #196]	; (38d8 <spi_data_rsp+0xdc>)
    3812:	781b      	ldrb	r3, [r3, #0]
    3814:	2b00      	cmp	r3, #0
    3816:	d104      	bne.n	3822 <spi_data_rsp+0x26>
		len = 2;
    3818:	230f      	movs	r3, #15
    381a:	18fb      	adds	r3, r7, r3
    381c:	2202      	movs	r2, #2
    381e:	701a      	strb	r2, [r3, #0]
    3820:	e003      	b.n	382a <spi_data_rsp+0x2e>
	else
		len = 3;
    3822:	230f      	movs	r3, #15
    3824:	18fb      	adds	r3, r7, r3
    3826:	2203      	movs	r2, #3
    3828:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    382a:	230f      	movs	r3, #15
    382c:	18fb      	adds	r3, r7, r3
    382e:	781b      	ldrb	r3, [r3, #0]
    3830:	b29a      	uxth	r2, r3
    3832:	2308      	movs	r3, #8
    3834:	18fb      	adds	r3, r7, r3
    3836:	0011      	movs	r1, r2
    3838:	0018      	movs	r0, r3
    383a:	4b28      	ldr	r3, [pc, #160]	; (38dc <spi_data_rsp+0xe0>)
    383c:	4798      	blx	r3
    383e:	1e03      	subs	r3, r0, #0
    3840:	d013      	beq.n	386a <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    3842:	233c      	movs	r3, #60	; 0x3c
    3844:	33ff      	adds	r3, #255	; 0xff
    3846:	001a      	movs	r2, r3
    3848:	4925      	ldr	r1, [pc, #148]	; (38e0 <spi_data_rsp+0xe4>)
    384a:	4b26      	ldr	r3, [pc, #152]	; (38e4 <spi_data_rsp+0xe8>)
    384c:	0018      	movs	r0, r3
    384e:	4b26      	ldr	r3, [pc, #152]	; (38e8 <spi_data_rsp+0xec>)
    3850:	4798      	blx	r3
    3852:	4b26      	ldr	r3, [pc, #152]	; (38ec <spi_data_rsp+0xf0>)
    3854:	0018      	movs	r0, r3
    3856:	4b26      	ldr	r3, [pc, #152]	; (38f0 <spi_data_rsp+0xf4>)
    3858:	4798      	blx	r3
    385a:	200d      	movs	r0, #13
    385c:	4b25      	ldr	r3, [pc, #148]	; (38f4 <spi_data_rsp+0xf8>)
    385e:	4798      	blx	r3
		result = N_FAIL;
    3860:	230e      	movs	r3, #14
    3862:	18fb      	adds	r3, r7, r3
    3864:	2200      	movs	r2, #0
    3866:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    3868:	e02e      	b.n	38c8 <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    386a:	230f      	movs	r3, #15
    386c:	18fb      	adds	r3, r7, r3
    386e:	781b      	ldrb	r3, [r3, #0]
    3870:	3b01      	subs	r3, #1
    3872:	2208      	movs	r2, #8
    3874:	18ba      	adds	r2, r7, r2
    3876:	5cd3      	ldrb	r3, [r2, r3]
    3878:	2b00      	cmp	r3, #0
    387a:	d108      	bne.n	388e <spi_data_rsp+0x92>
    387c:	230f      	movs	r3, #15
    387e:	18fb      	adds	r3, r7, r3
    3880:	781b      	ldrb	r3, [r3, #0]
    3882:	3b02      	subs	r3, #2
    3884:	2208      	movs	r2, #8
    3886:	18ba      	adds	r2, r7, r2
    3888:	5cd3      	ldrb	r3, [r2, r3]
    388a:	2bc3      	cmp	r3, #195	; 0xc3
    388c:	d01c      	beq.n	38c8 <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    388e:	23a1      	movs	r3, #161	; 0xa1
    3890:	005a      	lsls	r2, r3, #1
    3892:	4913      	ldr	r1, [pc, #76]	; (38e0 <spi_data_rsp+0xe4>)
    3894:	4b13      	ldr	r3, [pc, #76]	; (38e4 <spi_data_rsp+0xe8>)
    3896:	0018      	movs	r0, r3
    3898:	4b13      	ldr	r3, [pc, #76]	; (38e8 <spi_data_rsp+0xec>)
    389a:	4798      	blx	r3
    389c:	2308      	movs	r3, #8
    389e:	18fb      	adds	r3, r7, r3
    38a0:	781b      	ldrb	r3, [r3, #0]
    38a2:	0019      	movs	r1, r3
    38a4:	2308      	movs	r3, #8
    38a6:	18fb      	adds	r3, r7, r3
    38a8:	785b      	ldrb	r3, [r3, #1]
    38aa:	001a      	movs	r2, r3
    38ac:	2308      	movs	r3, #8
    38ae:	18fb      	adds	r3, r7, r3
    38b0:	789b      	ldrb	r3, [r3, #2]
    38b2:	4811      	ldr	r0, [pc, #68]	; (38f8 <spi_data_rsp+0xfc>)
    38b4:	4c0c      	ldr	r4, [pc, #48]	; (38e8 <spi_data_rsp+0xec>)
    38b6:	47a0      	blx	r4
    38b8:	200d      	movs	r0, #13
    38ba:	4b0e      	ldr	r3, [pc, #56]	; (38f4 <spi_data_rsp+0xf8>)
    38bc:	4798      	blx	r3
		result = N_FAIL;
    38be:	230e      	movs	r3, #14
    38c0:	18fb      	adds	r3, r7, r3
    38c2:	2200      	movs	r2, #0
    38c4:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    38c6:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    38c8:	230e      	movs	r3, #14
    38ca:	18fb      	adds	r3, r7, r3
    38cc:	781b      	ldrb	r3, [r3, #0]
    38ce:	b25b      	sxtb	r3, r3
}
    38d0:	0018      	movs	r0, r3
    38d2:	46bd      	mov	sp, r7
    38d4:	b005      	add	sp, #20
    38d6:	bd90      	pop	{r4, r7, pc}
    38d8:	200000b0 	.word	0x200000b0
    38dc:	000033b1 	.word	0x000033b1
    38e0:	0000e798 	.word	0x0000e798
    38e4:	0000e1fc 	.word	0x0000e1fc
    38e8:	0000c461 	.word	0x0000c461
    38ec:	0000e23c 	.word	0x0000e23c
    38f0:	0000c581 	.word	0x0000c581
    38f4:	0000c495 	.word	0x0000c495
    38f8:	0000e25c 	.word	0x0000e25c

000038fc <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    38fc:	b580      	push	{r7, lr}
    38fe:	b084      	sub	sp, #16
    3900:	af00      	add	r7, sp, #0
    3902:	0002      	movs	r2, r0
    3904:	1dfb      	adds	r3, r7, #7
    3906:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    3908:	230f      	movs	r3, #15
    390a:	18fb      	adds	r3, r7, r3
    390c:	2201      	movs	r2, #1
    390e:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    3910:	1dfb      	adds	r3, r7, #7
    3912:	781b      	ldrb	r3, [r3, #0]
    3914:	2bcf      	cmp	r3, #207	; 0xcf
    3916:	d007      	beq.n	3928 <spi_cmd_rsp+0x2c>
    3918:	1dfb      	adds	r3, r7, #7
    391a:	781b      	ldrb	r3, [r3, #0]
    391c:	2bc5      	cmp	r3, #197	; 0xc5
    391e:	d003      	beq.n	3928 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    3920:	1dfb      	adds	r3, r7, #7
    3922:	781b      	ldrb	r3, [r3, #0]
    3924:	2bc6      	cmp	r3, #198	; 0xc6
    3926:	d10c      	bne.n	3942 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3928:	230d      	movs	r3, #13
    392a:	18fb      	adds	r3, r7, r3
    392c:	2101      	movs	r1, #1
    392e:	0018      	movs	r0, r3
    3930:	4b39      	ldr	r3, [pc, #228]	; (3a18 <spi_cmd_rsp+0x11c>)
    3932:	4798      	blx	r3
    3934:	1e03      	subs	r3, r0, #0
    3936:	d004      	beq.n	3942 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    3938:	230f      	movs	r3, #15
    393a:	18fb      	adds	r3, r7, r3
    393c:	2200      	movs	r2, #0
    393e:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3940:	e061      	b.n	3a06 <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    3942:	230e      	movs	r3, #14
    3944:	18fb      	adds	r3, r7, r3
    3946:	220a      	movs	r2, #10
    3948:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    394a:	230d      	movs	r3, #13
    394c:	18fb      	adds	r3, r7, r3
    394e:	2101      	movs	r1, #1
    3950:	0018      	movs	r0, r3
    3952:	4b31      	ldr	r3, [pc, #196]	; (3a18 <spi_cmd_rsp+0x11c>)
    3954:	4798      	blx	r3
    3956:	1e03      	subs	r3, r0, #0
    3958:	d012      	beq.n	3980 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    395a:	23b1      	movs	r3, #177	; 0xb1
    395c:	005a      	lsls	r2, r3, #1
    395e:	492f      	ldr	r1, [pc, #188]	; (3a1c <spi_cmd_rsp+0x120>)
    3960:	4b2f      	ldr	r3, [pc, #188]	; (3a20 <spi_cmd_rsp+0x124>)
    3962:	0018      	movs	r0, r3
    3964:	4b2f      	ldr	r3, [pc, #188]	; (3a24 <spi_cmd_rsp+0x128>)
    3966:	4798      	blx	r3
    3968:	4b2f      	ldr	r3, [pc, #188]	; (3a28 <spi_cmd_rsp+0x12c>)
    396a:	0018      	movs	r0, r3
    396c:	4b2f      	ldr	r3, [pc, #188]	; (3a2c <spi_cmd_rsp+0x130>)
    396e:	4798      	blx	r3
    3970:	200d      	movs	r0, #13
    3972:	4b2f      	ldr	r3, [pc, #188]	; (3a30 <spi_cmd_rsp+0x134>)
    3974:	4798      	blx	r3
			result = N_FAIL;
    3976:	230f      	movs	r3, #15
    3978:	18fb      	adds	r3, r7, r3
    397a:	2200      	movs	r2, #0
    397c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    397e:	e042      	b.n	3a06 <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    3980:	230d      	movs	r3, #13
    3982:	18fb      	adds	r3, r7, r3
    3984:	781b      	ldrb	r3, [r3, #0]
    3986:	1dfa      	adds	r2, r7, #7
    3988:	7812      	ldrb	r2, [r2, #0]
    398a:	429a      	cmp	r2, r3
    398c:	d00b      	beq.n	39a6 <spi_cmd_rsp+0xaa>
    398e:	230e      	movs	r3, #14
    3990:	18fb      	adds	r3, r7, r3
    3992:	781b      	ldrb	r3, [r3, #0]
    3994:	b25b      	sxtb	r3, r3
    3996:	b2da      	uxtb	r2, r3
    3998:	3a01      	subs	r2, #1
    399a:	b2d1      	uxtb	r1, r2
    399c:	220e      	movs	r2, #14
    399e:	18ba      	adds	r2, r7, r2
    39a0:	7011      	strb	r1, [r2, #0]
    39a2:	2b00      	cmp	r3, #0
    39a4:	dcd1      	bgt.n	394a <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    39a6:	230e      	movs	r3, #14
    39a8:	18fb      	adds	r3, r7, r3
    39aa:	220a      	movs	r2, #10
    39ac:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    39ae:	230d      	movs	r3, #13
    39b0:	18fb      	adds	r3, r7, r3
    39b2:	2101      	movs	r1, #1
    39b4:	0018      	movs	r0, r3
    39b6:	4b18      	ldr	r3, [pc, #96]	; (3a18 <spi_cmd_rsp+0x11c>)
    39b8:	4798      	blx	r3
    39ba:	1e03      	subs	r3, r0, #0
    39bc:	d012      	beq.n	39e4 <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    39be:	23b8      	movs	r3, #184	; 0xb8
    39c0:	005a      	lsls	r2, r3, #1
    39c2:	4916      	ldr	r1, [pc, #88]	; (3a1c <spi_cmd_rsp+0x120>)
    39c4:	4b16      	ldr	r3, [pc, #88]	; (3a20 <spi_cmd_rsp+0x124>)
    39c6:	0018      	movs	r0, r3
    39c8:	4b16      	ldr	r3, [pc, #88]	; (3a24 <spi_cmd_rsp+0x128>)
    39ca:	4798      	blx	r3
    39cc:	4b16      	ldr	r3, [pc, #88]	; (3a28 <spi_cmd_rsp+0x12c>)
    39ce:	0018      	movs	r0, r3
    39d0:	4b16      	ldr	r3, [pc, #88]	; (3a2c <spi_cmd_rsp+0x130>)
    39d2:	4798      	blx	r3
    39d4:	200d      	movs	r0, #13
    39d6:	4b16      	ldr	r3, [pc, #88]	; (3a30 <spi_cmd_rsp+0x134>)
    39d8:	4798      	blx	r3
			result = N_FAIL;
    39da:	230f      	movs	r3, #15
    39dc:	18fb      	adds	r3, r7, r3
    39de:	2200      	movs	r2, #0
    39e0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    39e2:	e010      	b.n	3a06 <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    39e4:	230d      	movs	r3, #13
    39e6:	18fb      	adds	r3, r7, r3
    39e8:	781b      	ldrb	r3, [r3, #0]
    39ea:	2b00      	cmp	r3, #0
    39ec:	d00b      	beq.n	3a06 <spi_cmd_rsp+0x10a>
    39ee:	230e      	movs	r3, #14
    39f0:	18fb      	adds	r3, r7, r3
    39f2:	781b      	ldrb	r3, [r3, #0]
    39f4:	b25b      	sxtb	r3, r3
    39f6:	b2da      	uxtb	r2, r3
    39f8:	3a01      	subs	r2, #1
    39fa:	b2d1      	uxtb	r1, r2
    39fc:	220e      	movs	r2, #14
    39fe:	18ba      	adds	r2, r7, r2
    3a00:	7011      	strb	r1, [r2, #0]
    3a02:	2b00      	cmp	r3, #0
    3a04:	dcd3      	bgt.n	39ae <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    3a06:	230f      	movs	r3, #15
    3a08:	18fb      	adds	r3, r7, r3
    3a0a:	781b      	ldrb	r3, [r3, #0]
    3a0c:	b25b      	sxtb	r3, r3
}
    3a0e:	0018      	movs	r0, r3
    3a10:	46bd      	mov	sp, r7
    3a12:	b004      	add	sp, #16
    3a14:	bd80      	pop	{r7, pc}
    3a16:	46c0      	nop			; (mov r8, r8)
    3a18:	000033b1 	.word	0x000033b1
    3a1c:	0000e7a8 	.word	0x0000e7a8
    3a20:	0000e1fc 	.word	0x0000e1fc
    3a24:	0000c461 	.word	0x0000c461
    3a28:	0000e28c 	.word	0x0000e28c
    3a2c:	0000c581 	.word	0x0000c581
    3a30:	0000c495 	.word	0x0000c495

00003a34 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    3a34:	b580      	push	{r7, lr}
    3a36:	b086      	sub	sp, #24
    3a38:	af00      	add	r7, sp, #0
    3a3a:	6078      	str	r0, [r7, #4]
    3a3c:	0008      	movs	r0, r1
    3a3e:	0011      	movs	r1, r2
    3a40:	1cbb      	adds	r3, r7, #2
    3a42:	1c02      	adds	r2, r0, #0
    3a44:	801a      	strh	r2, [r3, #0]
    3a46:	1c7b      	adds	r3, r7, #1
    3a48:	1c0a      	adds	r2, r1, #0
    3a4a:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    3a4c:	2311      	movs	r3, #17
    3a4e:	18fb      	adds	r3, r7, r3
    3a50:	2201      	movs	r2, #1
    3a52:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3a54:	2314      	movs	r3, #20
    3a56:	18fb      	adds	r3, r7, r3
    3a58:	2200      	movs	r2, #0
    3a5a:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3a5c:	1cbb      	adds	r3, r7, #2
    3a5e:	881a      	ldrh	r2, [r3, #0]
    3a60:	2380      	movs	r3, #128	; 0x80
    3a62:	019b      	lsls	r3, r3, #6
    3a64:	429a      	cmp	r2, r3
    3a66:	d805      	bhi.n	3a74 <spi_data_read+0x40>
			nbytes = sz;
    3a68:	2312      	movs	r3, #18
    3a6a:	18fb      	adds	r3, r7, r3
    3a6c:	1cba      	adds	r2, r7, #2
    3a6e:	8812      	ldrh	r2, [r2, #0]
    3a70:	801a      	strh	r2, [r3, #0]
    3a72:	e004      	b.n	3a7e <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    3a74:	2312      	movs	r3, #18
    3a76:	18fb      	adds	r3, r7, r3
    3a78:	2280      	movs	r2, #128	; 0x80
    3a7a:	0192      	lsls	r2, r2, #6
    3a7c:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    3a7e:	2316      	movs	r3, #22
    3a80:	18fb      	adds	r3, r7, r3
    3a82:	220a      	movs	r2, #10
    3a84:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3a86:	230b      	movs	r3, #11
    3a88:	18fb      	adds	r3, r7, r3
    3a8a:	2101      	movs	r1, #1
    3a8c:	0018      	movs	r0, r3
    3a8e:	4b5c      	ldr	r3, [pc, #368]	; (3c00 <spi_data_read+0x1cc>)
    3a90:	4798      	blx	r3
    3a92:	1e03      	subs	r3, r0, #0
    3a94:	d011      	beq.n	3aba <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    3a96:	4a5b      	ldr	r2, [pc, #364]	; (3c04 <spi_data_read+0x1d0>)
    3a98:	495b      	ldr	r1, [pc, #364]	; (3c08 <spi_data_read+0x1d4>)
    3a9a:	4b5c      	ldr	r3, [pc, #368]	; (3c0c <spi_data_read+0x1d8>)
    3a9c:	0018      	movs	r0, r3
    3a9e:	4b5c      	ldr	r3, [pc, #368]	; (3c10 <spi_data_read+0x1dc>)
    3aa0:	4798      	blx	r3
    3aa2:	4b5c      	ldr	r3, [pc, #368]	; (3c14 <spi_data_read+0x1e0>)
    3aa4:	0018      	movs	r0, r3
    3aa6:	4b5c      	ldr	r3, [pc, #368]	; (3c18 <spi_data_read+0x1e4>)
    3aa8:	4798      	blx	r3
    3aaa:	200d      	movs	r0, #13
    3aac:	4b5b      	ldr	r3, [pc, #364]	; (3c1c <spi_data_read+0x1e8>)
    3aae:	4798      	blx	r3
				result = N_FAIL;
    3ab0:	2311      	movs	r3, #17
    3ab2:	18fb      	adds	r3, r7, r3
    3ab4:	2200      	movs	r2, #0
    3ab6:	701a      	strb	r2, [r3, #0]
				break;
    3ab8:	e017      	b.n	3aea <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    3aba:	230b      	movs	r3, #11
    3abc:	18fb      	adds	r3, r7, r3
    3abe:	781b      	ldrb	r3, [r3, #0]
    3ac0:	091b      	lsrs	r3, r3, #4
    3ac2:	b2db      	uxtb	r3, r3
    3ac4:	001a      	movs	r2, r3
    3ac6:	230f      	movs	r3, #15
    3ac8:	4013      	ands	r3, r2
    3aca:	2b0f      	cmp	r3, #15
    3acc:	d00c      	beq.n	3ae8 <spi_data_read+0xb4>
				break;
		} while (retry--);
    3ace:	2316      	movs	r3, #22
    3ad0:	18fb      	adds	r3, r7, r3
    3ad2:	2200      	movs	r2, #0
    3ad4:	5e9b      	ldrsh	r3, [r3, r2]
    3ad6:	b29a      	uxth	r2, r3
    3ad8:	3a01      	subs	r2, #1
    3ada:	b291      	uxth	r1, r2
    3adc:	2216      	movs	r2, #22
    3ade:	18ba      	adds	r2, r7, r2
    3ae0:	8011      	strh	r1, [r2, #0]
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d1cf      	bne.n	3a86 <spi_data_read+0x52>
    3ae6:	e000      	b.n	3aea <spi_data_read+0xb6>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    3ae8:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    3aea:	2311      	movs	r3, #17
    3aec:	18fb      	adds	r3, r7, r3
    3aee:	781b      	ldrb	r3, [r3, #0]
    3af0:	b25b      	sxtb	r3, r3
    3af2:	2b00      	cmp	r3, #0
    3af4:	d100      	bne.n	3af8 <spi_data_read+0xc4>
    3af6:	e079      	b.n	3bec <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    3af8:	2316      	movs	r3, #22
    3afa:	18fb      	adds	r3, r7, r3
    3afc:	2200      	movs	r2, #0
    3afe:	5e9b      	ldrsh	r3, [r3, r2]
    3b00:	2b00      	cmp	r3, #0
    3b02:	dc16      	bgt.n	3b32 <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    3b04:	4a46      	ldr	r2, [pc, #280]	; (3c20 <spi_data_read+0x1ec>)
    3b06:	4940      	ldr	r1, [pc, #256]	; (3c08 <spi_data_read+0x1d4>)
    3b08:	4b40      	ldr	r3, [pc, #256]	; (3c0c <spi_data_read+0x1d8>)
    3b0a:	0018      	movs	r0, r3
    3b0c:	4b40      	ldr	r3, [pc, #256]	; (3c10 <spi_data_read+0x1dc>)
    3b0e:	4798      	blx	r3
    3b10:	230b      	movs	r3, #11
    3b12:	18fb      	adds	r3, r7, r3
    3b14:	781b      	ldrb	r3, [r3, #0]
    3b16:	001a      	movs	r2, r3
    3b18:	4b42      	ldr	r3, [pc, #264]	; (3c24 <spi_data_read+0x1f0>)
    3b1a:	0011      	movs	r1, r2
    3b1c:	0018      	movs	r0, r3
    3b1e:	4b3c      	ldr	r3, [pc, #240]	; (3c10 <spi_data_read+0x1dc>)
    3b20:	4798      	blx	r3
    3b22:	200d      	movs	r0, #13
    3b24:	4b3d      	ldr	r3, [pc, #244]	; (3c1c <spi_data_read+0x1e8>)
    3b26:	4798      	blx	r3
			result = N_FAIL;
    3b28:	2311      	movs	r3, #17
    3b2a:	18fb      	adds	r3, r7, r3
    3b2c:	2200      	movs	r2, #0
    3b2e:	701a      	strb	r2, [r3, #0]
			break;
    3b30:	e05d      	b.n	3bee <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    3b32:	2314      	movs	r3, #20
    3b34:	18fb      	adds	r3, r7, r3
    3b36:	2200      	movs	r2, #0
    3b38:	5e9b      	ldrsh	r3, [r3, r2]
    3b3a:	687a      	ldr	r2, [r7, #4]
    3b3c:	18d2      	adds	r2, r2, r3
    3b3e:	2312      	movs	r3, #18
    3b40:	18fb      	adds	r3, r7, r3
    3b42:	881b      	ldrh	r3, [r3, #0]
    3b44:	0019      	movs	r1, r3
    3b46:	0010      	movs	r0, r2
    3b48:	4b2d      	ldr	r3, [pc, #180]	; (3c00 <spi_data_read+0x1cc>)
    3b4a:	4798      	blx	r3
    3b4c:	1e03      	subs	r3, r0, #0
    3b4e:	d012      	beq.n	3b76 <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3b50:	23c5      	movs	r3, #197	; 0xc5
    3b52:	009a      	lsls	r2, r3, #2
    3b54:	492c      	ldr	r1, [pc, #176]	; (3c08 <spi_data_read+0x1d4>)
    3b56:	4b2d      	ldr	r3, [pc, #180]	; (3c0c <spi_data_read+0x1d8>)
    3b58:	0018      	movs	r0, r3
    3b5a:	4b2d      	ldr	r3, [pc, #180]	; (3c10 <spi_data_read+0x1dc>)
    3b5c:	4798      	blx	r3
    3b5e:	4b32      	ldr	r3, [pc, #200]	; (3c28 <spi_data_read+0x1f4>)
    3b60:	0018      	movs	r0, r3
    3b62:	4b2d      	ldr	r3, [pc, #180]	; (3c18 <spi_data_read+0x1e4>)
    3b64:	4798      	blx	r3
    3b66:	200d      	movs	r0, #13
    3b68:	4b2c      	ldr	r3, [pc, #176]	; (3c1c <spi_data_read+0x1e8>)
    3b6a:	4798      	blx	r3
			result = N_FAIL;
    3b6c:	2311      	movs	r3, #17
    3b6e:	18fb      	adds	r3, r7, r3
    3b70:	2200      	movs	r2, #0
    3b72:	701a      	strb	r2, [r3, #0]
			break;
    3b74:	e03b      	b.n	3bee <spi_data_read+0x1ba>
		}
		if(!clockless)
    3b76:	1c7b      	adds	r3, r7, #1
    3b78:	781b      	ldrb	r3, [r3, #0]
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d11d      	bne.n	3bba <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    3b7e:	4b2b      	ldr	r3, [pc, #172]	; (3c2c <spi_data_read+0x1f8>)
    3b80:	781b      	ldrb	r3, [r3, #0]
    3b82:	2b00      	cmp	r3, #0
    3b84:	d119      	bne.n	3bba <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3b86:	230c      	movs	r3, #12
    3b88:	18fb      	adds	r3, r7, r3
    3b8a:	2102      	movs	r1, #2
    3b8c:	0018      	movs	r0, r3
    3b8e:	4b1c      	ldr	r3, [pc, #112]	; (3c00 <spi_data_read+0x1cc>)
    3b90:	4798      	blx	r3
    3b92:	1e03      	subs	r3, r0, #0
    3b94:	d011      	beq.n	3bba <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    3b96:	4a26      	ldr	r2, [pc, #152]	; (3c30 <spi_data_read+0x1fc>)
    3b98:	491b      	ldr	r1, [pc, #108]	; (3c08 <spi_data_read+0x1d4>)
    3b9a:	4b1c      	ldr	r3, [pc, #112]	; (3c0c <spi_data_read+0x1d8>)
    3b9c:	0018      	movs	r0, r3
    3b9e:	4b1c      	ldr	r3, [pc, #112]	; (3c10 <spi_data_read+0x1dc>)
    3ba0:	4798      	blx	r3
    3ba2:	4b24      	ldr	r3, [pc, #144]	; (3c34 <spi_data_read+0x200>)
    3ba4:	0018      	movs	r0, r3
    3ba6:	4b1c      	ldr	r3, [pc, #112]	; (3c18 <spi_data_read+0x1e4>)
    3ba8:	4798      	blx	r3
    3baa:	200d      	movs	r0, #13
    3bac:	4b1b      	ldr	r3, [pc, #108]	; (3c1c <spi_data_read+0x1e8>)
    3bae:	4798      	blx	r3
					result = N_FAIL;
    3bb0:	2311      	movs	r3, #17
    3bb2:	18fb      	adds	r3, r7, r3
    3bb4:	2200      	movs	r2, #0
    3bb6:	701a      	strb	r2, [r3, #0]
					break;
    3bb8:	e019      	b.n	3bee <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    3bba:	2314      	movs	r3, #20
    3bbc:	18fb      	adds	r3, r7, r3
    3bbe:	881a      	ldrh	r2, [r3, #0]
    3bc0:	2312      	movs	r3, #18
    3bc2:	18fb      	adds	r3, r7, r3
    3bc4:	881b      	ldrh	r3, [r3, #0]
    3bc6:	18d3      	adds	r3, r2, r3
    3bc8:	b29a      	uxth	r2, r3
    3bca:	2314      	movs	r3, #20
    3bcc:	18fb      	adds	r3, r7, r3
    3bce:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3bd0:	2312      	movs	r3, #18
    3bd2:	18fb      	adds	r3, r7, r3
    3bd4:	881a      	ldrh	r2, [r3, #0]
    3bd6:	1cbb      	adds	r3, r7, #2
    3bd8:	1cb9      	adds	r1, r7, #2
    3bda:	8809      	ldrh	r1, [r1, #0]
    3bdc:	1a8a      	subs	r2, r1, r2
    3bde:	801a      	strh	r2, [r3, #0]

	} while (sz);
    3be0:	1cbb      	adds	r3, r7, #2
    3be2:	881b      	ldrh	r3, [r3, #0]
    3be4:	2b00      	cmp	r3, #0
    3be6:	d000      	beq.n	3bea <spi_data_read+0x1b6>
    3be8:	e738      	b.n	3a5c <spi_data_read+0x28>
    3bea:	e000      	b.n	3bee <spi_data_read+0x1ba>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    3bec:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    3bee:	2311      	movs	r3, #17
    3bf0:	18fb      	adds	r3, r7, r3
    3bf2:	781b      	ldrb	r3, [r3, #0]
    3bf4:	b25b      	sxtb	r3, r3
}
    3bf6:	0018      	movs	r0, r3
    3bf8:	46bd      	mov	sp, r7
    3bfa:	b006      	add	sp, #24
    3bfc:	bd80      	pop	{r7, pc}
    3bfe:	46c0      	nop			; (mov r8, r8)
    3c00:	000033b1 	.word	0x000033b1
    3c04:	000002ff 	.word	0x000002ff
    3c08:	0000e7b4 	.word	0x0000e7b4
    3c0c:	0000e1fc 	.word	0x0000e1fc
    3c10:	0000c461 	.word	0x0000c461
    3c14:	0000e2c0 	.word	0x0000e2c0
    3c18:	0000c581 	.word	0x0000c581
    3c1c:	0000c495 	.word	0x0000c495
    3c20:	0000030b 	.word	0x0000030b
    3c24:	0000e2f4 	.word	0x0000e2f4
    3c28:	0000e324 	.word	0x0000e324
    3c2c:	200000b0 	.word	0x200000b0
    3c30:	0000031f 	.word	0x0000031f
    3c34:	0000e354 	.word	0x0000e354

00003c38 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    3c38:	b580      	push	{r7, lr}
    3c3a:	b086      	sub	sp, #24
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	6078      	str	r0, [r7, #4]
    3c40:	000a      	movs	r2, r1
    3c42:	1cbb      	adds	r3, r7, #2
    3c44:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    3c46:	2313      	movs	r3, #19
    3c48:	18fb      	adds	r3, r7, r3
    3c4a:	2201      	movs	r2, #1
    3c4c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    3c4e:	230c      	movs	r3, #12
    3c50:	18fb      	adds	r3, r7, r3
    3c52:	2200      	movs	r2, #0
    3c54:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3c56:	2316      	movs	r3, #22
    3c58:	18fb      	adds	r3, r7, r3
    3c5a:	2200      	movs	r2, #0
    3c5c:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    3c5e:	1cbb      	adds	r3, r7, #2
    3c60:	881a      	ldrh	r2, [r3, #0]
    3c62:	2380      	movs	r3, #128	; 0x80
    3c64:	019b      	lsls	r3, r3, #6
    3c66:	429a      	cmp	r2, r3
    3c68:	d805      	bhi.n	3c76 <spi_data_write+0x3e>
			nbytes = sz;
    3c6a:	2314      	movs	r3, #20
    3c6c:	18fb      	adds	r3, r7, r3
    3c6e:	1cba      	adds	r2, r7, #2
    3c70:	8812      	ldrh	r2, [r2, #0]
    3c72:	801a      	strh	r2, [r3, #0]
    3c74:	e004      	b.n	3c80 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    3c76:	2314      	movs	r3, #20
    3c78:	18fb      	adds	r3, r7, r3
    3c7a:	2280      	movs	r2, #128	; 0x80
    3c7c:	0192      	lsls	r2, r2, #6
    3c7e:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    3c80:	2311      	movs	r3, #17
    3c82:	18fb      	adds	r3, r7, r3
    3c84:	22f0      	movs	r2, #240	; 0xf0
    3c86:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    3c88:	2316      	movs	r3, #22
    3c8a:	18fb      	adds	r3, r7, r3
    3c8c:	2200      	movs	r2, #0
    3c8e:	5e9b      	ldrsh	r3, [r3, r2]
    3c90:	2b00      	cmp	r3, #0
    3c92:	d10f      	bne.n	3cb4 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    3c94:	1cbb      	adds	r3, r7, #2
    3c96:	881a      	ldrh	r2, [r3, #0]
    3c98:	2380      	movs	r3, #128	; 0x80
    3c9a:	019b      	lsls	r3, r3, #6
    3c9c:	429a      	cmp	r2, r3
    3c9e:	d804      	bhi.n	3caa <spi_data_write+0x72>
				order = 0x3;
    3ca0:	2312      	movs	r3, #18
    3ca2:	18fb      	adds	r3, r7, r3
    3ca4:	2203      	movs	r2, #3
    3ca6:	701a      	strb	r2, [r3, #0]
    3ca8:	e013      	b.n	3cd2 <spi_data_write+0x9a>
			else
				order = 0x1;
    3caa:	2312      	movs	r3, #18
    3cac:	18fb      	adds	r3, r7, r3
    3cae:	2201      	movs	r2, #1
    3cb0:	701a      	strb	r2, [r3, #0]
    3cb2:	e00e      	b.n	3cd2 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    3cb4:	1cbb      	adds	r3, r7, #2
    3cb6:	881a      	ldrh	r2, [r3, #0]
    3cb8:	2380      	movs	r3, #128	; 0x80
    3cba:	019b      	lsls	r3, r3, #6
    3cbc:	429a      	cmp	r2, r3
    3cbe:	d804      	bhi.n	3cca <spi_data_write+0x92>
				order = 0x3;
    3cc0:	2312      	movs	r3, #18
    3cc2:	18fb      	adds	r3, r7, r3
    3cc4:	2203      	movs	r2, #3
    3cc6:	701a      	strb	r2, [r3, #0]
    3cc8:	e003      	b.n	3cd2 <spi_data_write+0x9a>
			else
				order = 0x2;
    3cca:	2312      	movs	r3, #18
    3ccc:	18fb      	adds	r3, r7, r3
    3cce:	2202      	movs	r2, #2
    3cd0:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    3cd2:	2311      	movs	r3, #17
    3cd4:	18fb      	adds	r3, r7, r3
    3cd6:	781a      	ldrb	r2, [r3, #0]
    3cd8:	2312      	movs	r3, #18
    3cda:	18fb      	adds	r3, r7, r3
    3cdc:	781b      	ldrb	r3, [r3, #0]
    3cde:	4313      	orrs	r3, r2
    3ce0:	b2da      	uxtb	r2, r3
    3ce2:	2311      	movs	r3, #17
    3ce4:	18fb      	adds	r3, r7, r3
    3ce6:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3ce8:	2311      	movs	r3, #17
    3cea:	18fb      	adds	r3, r7, r3
    3cec:	2101      	movs	r1, #1
    3cee:	0018      	movs	r0, r3
    3cf0:	4b3a      	ldr	r3, [pc, #232]	; (3ddc <spi_data_write+0x1a4>)
    3cf2:	4798      	blx	r3
    3cf4:	1e03      	subs	r3, r0, #0
    3cf6:	d012      	beq.n	3d1e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    3cf8:	23d4      	movs	r3, #212	; 0xd4
    3cfa:	009a      	lsls	r2, r3, #2
    3cfc:	4938      	ldr	r1, [pc, #224]	; (3de0 <spi_data_write+0x1a8>)
    3cfe:	4b39      	ldr	r3, [pc, #228]	; (3de4 <spi_data_write+0x1ac>)
    3d00:	0018      	movs	r0, r3
    3d02:	4b39      	ldr	r3, [pc, #228]	; (3de8 <spi_data_write+0x1b0>)
    3d04:	4798      	blx	r3
    3d06:	4b39      	ldr	r3, [pc, #228]	; (3dec <spi_data_write+0x1b4>)
    3d08:	0018      	movs	r0, r3
    3d0a:	4b39      	ldr	r3, [pc, #228]	; (3df0 <spi_data_write+0x1b8>)
    3d0c:	4798      	blx	r3
    3d0e:	200d      	movs	r0, #13
    3d10:	4b38      	ldr	r3, [pc, #224]	; (3df4 <spi_data_write+0x1bc>)
    3d12:	4798      	blx	r3
			result = N_FAIL;
    3d14:	2313      	movs	r3, #19
    3d16:	18fb      	adds	r3, r7, r3
    3d18:	2200      	movs	r2, #0
    3d1a:	701a      	strb	r2, [r3, #0]
			break;
    3d1c:	e056      	b.n	3dcc <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    3d1e:	2316      	movs	r3, #22
    3d20:	18fb      	adds	r3, r7, r3
    3d22:	2200      	movs	r2, #0
    3d24:	5e9b      	ldrsh	r3, [r3, r2]
    3d26:	687a      	ldr	r2, [r7, #4]
    3d28:	18d2      	adds	r2, r2, r3
    3d2a:	2314      	movs	r3, #20
    3d2c:	18fb      	adds	r3, r7, r3
    3d2e:	881b      	ldrh	r3, [r3, #0]
    3d30:	0019      	movs	r1, r3
    3d32:	0010      	movs	r0, r2
    3d34:	4b29      	ldr	r3, [pc, #164]	; (3ddc <spi_data_write+0x1a4>)
    3d36:	4798      	blx	r3
    3d38:	1e03      	subs	r3, r0, #0
    3d3a:	d011      	beq.n	3d60 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    3d3c:	4a2e      	ldr	r2, [pc, #184]	; (3df8 <spi_data_write+0x1c0>)
    3d3e:	4928      	ldr	r1, [pc, #160]	; (3de0 <spi_data_write+0x1a8>)
    3d40:	4b28      	ldr	r3, [pc, #160]	; (3de4 <spi_data_write+0x1ac>)
    3d42:	0018      	movs	r0, r3
    3d44:	4b28      	ldr	r3, [pc, #160]	; (3de8 <spi_data_write+0x1b0>)
    3d46:	4798      	blx	r3
    3d48:	4b2c      	ldr	r3, [pc, #176]	; (3dfc <spi_data_write+0x1c4>)
    3d4a:	0018      	movs	r0, r3
    3d4c:	4b28      	ldr	r3, [pc, #160]	; (3df0 <spi_data_write+0x1b8>)
    3d4e:	4798      	blx	r3
    3d50:	200d      	movs	r0, #13
    3d52:	4b28      	ldr	r3, [pc, #160]	; (3df4 <spi_data_write+0x1bc>)
    3d54:	4798      	blx	r3
			result = N_FAIL;
    3d56:	2313      	movs	r3, #19
    3d58:	18fb      	adds	r3, r7, r3
    3d5a:	2200      	movs	r2, #0
    3d5c:	701a      	strb	r2, [r3, #0]
			break;
    3d5e:	e035      	b.n	3dcc <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    3d60:	4b27      	ldr	r3, [pc, #156]	; (3e00 <spi_data_write+0x1c8>)
    3d62:	781b      	ldrb	r3, [r3, #0]
    3d64:	2b00      	cmp	r3, #0
    3d66:	d119      	bne.n	3d9c <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    3d68:	230c      	movs	r3, #12
    3d6a:	18fb      	adds	r3, r7, r3
    3d6c:	2102      	movs	r1, #2
    3d6e:	0018      	movs	r0, r3
    3d70:	4b1a      	ldr	r3, [pc, #104]	; (3ddc <spi_data_write+0x1a4>)
    3d72:	4798      	blx	r3
    3d74:	1e03      	subs	r3, r0, #0
    3d76:	d011      	beq.n	3d9c <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    3d78:	4a22      	ldr	r2, [pc, #136]	; (3e04 <spi_data_write+0x1cc>)
    3d7a:	4919      	ldr	r1, [pc, #100]	; (3de0 <spi_data_write+0x1a8>)
    3d7c:	4b19      	ldr	r3, [pc, #100]	; (3de4 <spi_data_write+0x1ac>)
    3d7e:	0018      	movs	r0, r3
    3d80:	4b19      	ldr	r3, [pc, #100]	; (3de8 <spi_data_write+0x1b0>)
    3d82:	4798      	blx	r3
    3d84:	4b20      	ldr	r3, [pc, #128]	; (3e08 <spi_data_write+0x1d0>)
    3d86:	0018      	movs	r0, r3
    3d88:	4b19      	ldr	r3, [pc, #100]	; (3df0 <spi_data_write+0x1b8>)
    3d8a:	4798      	blx	r3
    3d8c:	200d      	movs	r0, #13
    3d8e:	4b19      	ldr	r3, [pc, #100]	; (3df4 <spi_data_write+0x1bc>)
    3d90:	4798      	blx	r3
				result = N_FAIL;
    3d92:	2313      	movs	r3, #19
    3d94:	18fb      	adds	r3, r7, r3
    3d96:	2200      	movs	r2, #0
    3d98:	701a      	strb	r2, [r3, #0]
				break;
    3d9a:	e017      	b.n	3dcc <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    3d9c:	2316      	movs	r3, #22
    3d9e:	18fb      	adds	r3, r7, r3
    3da0:	881a      	ldrh	r2, [r3, #0]
    3da2:	2314      	movs	r3, #20
    3da4:	18fb      	adds	r3, r7, r3
    3da6:	881b      	ldrh	r3, [r3, #0]
    3da8:	18d3      	adds	r3, r2, r3
    3daa:	b29a      	uxth	r2, r3
    3dac:	2316      	movs	r3, #22
    3dae:	18fb      	adds	r3, r7, r3
    3db0:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3db2:	1cbb      	adds	r3, r7, #2
    3db4:	1cb9      	adds	r1, r7, #2
    3db6:	2214      	movs	r2, #20
    3db8:	18ba      	adds	r2, r7, r2
    3dba:	8809      	ldrh	r1, [r1, #0]
    3dbc:	8812      	ldrh	r2, [r2, #0]
    3dbe:	1a8a      	subs	r2, r1, r2
    3dc0:	801a      	strh	r2, [r3, #0]
	} while (sz);
    3dc2:	1cbb      	adds	r3, r7, #2
    3dc4:	881b      	ldrh	r3, [r3, #0]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d000      	beq.n	3dcc <spi_data_write+0x194>
    3dca:	e748      	b.n	3c5e <spi_data_write+0x26>


	return result;
    3dcc:	2313      	movs	r3, #19
    3dce:	18fb      	adds	r3, r7, r3
    3dd0:	781b      	ldrb	r3, [r3, #0]
    3dd2:	b25b      	sxtb	r3, r3
}
    3dd4:	0018      	movs	r0, r3
    3dd6:	46bd      	mov	sp, r7
    3dd8:	b006      	add	sp, #24
    3dda:	bd80      	pop	{r7, pc}
    3ddc:	000033f5 	.word	0x000033f5
    3de0:	0000e7c4 	.word	0x0000e7c4
    3de4:	0000e1fc 	.word	0x0000e1fc
    3de8:	0000c461 	.word	0x0000c461
    3dec:	0000e388 	.word	0x0000e388
    3df0:	0000c581 	.word	0x0000c581
    3df4:	0000c495 	.word	0x0000c495
    3df8:	00000359 	.word	0x00000359
    3dfc:	0000e3c0 	.word	0x0000e3c0
    3e00:	200000b0 	.word	0x200000b0
    3e04:	00000363 	.word	0x00000363
    3e08:	0000e3f4 	.word	0x0000e3f4

00003e0c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    3e0c:	b5b0      	push	{r4, r5, r7, lr}
    3e0e:	b086      	sub	sp, #24
    3e10:	af02      	add	r7, sp, #8
    3e12:	6078      	str	r0, [r7, #4]
    3e14:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    3e16:	230f      	movs	r3, #15
    3e18:	18fb      	adds	r3, r7, r3
    3e1a:	220a      	movs	r2, #10
    3e1c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    3e1e:	230e      	movs	r3, #14
    3e20:	18fb      	adds	r3, r7, r3
    3e22:	2201      	movs	r2, #1
    3e24:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    3e26:	230d      	movs	r3, #13
    3e28:	18fb      	adds	r3, r7, r3
    3e2a:	22c9      	movs	r2, #201	; 0xc9
    3e2c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    3e2e:	230c      	movs	r3, #12
    3e30:	18fb      	adds	r3, r7, r3
    3e32:	2200      	movs	r2, #0
    3e34:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    3e36:	687b      	ldr	r3, [r7, #4]
    3e38:	2b30      	cmp	r3, #48	; 0x30
    3e3a:	d808      	bhi.n	3e4e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    3e3c:	230d      	movs	r3, #13
    3e3e:	18fb      	adds	r3, r7, r3
    3e40:	22c3      	movs	r2, #195	; 0xc3
    3e42:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    3e44:	230c      	movs	r3, #12
    3e46:	18fb      	adds	r3, r7, r3
    3e48:	2201      	movs	r2, #1
    3e4a:	701a      	strb	r2, [r3, #0]
    3e4c:	e007      	b.n	3e5e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    3e4e:	230d      	movs	r3, #13
    3e50:	18fb      	adds	r3, r7, r3
    3e52:	22c9      	movs	r2, #201	; 0xc9
    3e54:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    3e56:	230c      	movs	r3, #12
    3e58:	18fb      	adds	r3, r7, r3
    3e5a:	2200      	movs	r2, #0
    3e5c:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3e5e:	230e      	movs	r3, #14
    3e60:	18fc      	adds	r4, r7, r3
    3e62:	683a      	ldr	r2, [r7, #0]
    3e64:	6879      	ldr	r1, [r7, #4]
    3e66:	230d      	movs	r3, #13
    3e68:	18fb      	adds	r3, r7, r3
    3e6a:	7818      	ldrb	r0, [r3, #0]
    3e6c:	230c      	movs	r3, #12
    3e6e:	18fb      	adds	r3, r7, r3
    3e70:	781b      	ldrb	r3, [r3, #0]
    3e72:	9300      	str	r3, [sp, #0]
    3e74:	2304      	movs	r3, #4
    3e76:	4d3c      	ldr	r5, [pc, #240]	; (3f68 <spi_write_reg+0x15c>)
    3e78:	47a8      	blx	r5
    3e7a:	0003      	movs	r3, r0
    3e7c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3e7e:	230e      	movs	r3, #14
    3e80:	18fb      	adds	r3, r7, r3
    3e82:	781b      	ldrb	r3, [r3, #0]
    3e84:	b25b      	sxtb	r3, r3
    3e86:	2b01      	cmp	r3, #1
    3e88:	d00f      	beq.n	3eaa <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    3e8a:	4a38      	ldr	r2, [pc, #224]	; (3f6c <spi_write_reg+0x160>)
    3e8c:	4938      	ldr	r1, [pc, #224]	; (3f70 <spi_write_reg+0x164>)
    3e8e:	4b39      	ldr	r3, [pc, #228]	; (3f74 <spi_write_reg+0x168>)
    3e90:	0018      	movs	r0, r3
    3e92:	4b39      	ldr	r3, [pc, #228]	; (3f78 <spi_write_reg+0x16c>)
    3e94:	4798      	blx	r3
    3e96:	687a      	ldr	r2, [r7, #4]
    3e98:	4b38      	ldr	r3, [pc, #224]	; (3f7c <spi_write_reg+0x170>)
    3e9a:	0011      	movs	r1, r2
    3e9c:	0018      	movs	r0, r3
    3e9e:	4b36      	ldr	r3, [pc, #216]	; (3f78 <spi_write_reg+0x16c>)
    3ea0:	4798      	blx	r3
    3ea2:	200d      	movs	r0, #13
    3ea4:	4b36      	ldr	r3, [pc, #216]	; (3f80 <spi_write_reg+0x174>)
    3ea6:	4798      	blx	r3
		goto _FAIL_;
    3ea8:	e020      	b.n	3eec <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    3eaa:	230e      	movs	r3, #14
    3eac:	18fc      	adds	r4, r7, r3
    3eae:	230d      	movs	r3, #13
    3eb0:	18fb      	adds	r3, r7, r3
    3eb2:	781b      	ldrb	r3, [r3, #0]
    3eb4:	0018      	movs	r0, r3
    3eb6:	4b33      	ldr	r3, [pc, #204]	; (3f84 <spi_write_reg+0x178>)
    3eb8:	4798      	blx	r3
    3eba:	0003      	movs	r3, r0
    3ebc:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3ebe:	230e      	movs	r3, #14
    3ec0:	18fb      	adds	r3, r7, r3
    3ec2:	781b      	ldrb	r3, [r3, #0]
    3ec4:	b25b      	sxtb	r3, r3
    3ec6:	2b01      	cmp	r3, #1
    3ec8:	d010      	beq.n	3eec <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3eca:	23e7      	movs	r3, #231	; 0xe7
    3ecc:	009a      	lsls	r2, r3, #2
    3ece:	4928      	ldr	r1, [pc, #160]	; (3f70 <spi_write_reg+0x164>)
    3ed0:	4b28      	ldr	r3, [pc, #160]	; (3f74 <spi_write_reg+0x168>)
    3ed2:	0018      	movs	r0, r3
    3ed4:	4b28      	ldr	r3, [pc, #160]	; (3f78 <spi_write_reg+0x16c>)
    3ed6:	4798      	blx	r3
    3ed8:	687a      	ldr	r2, [r7, #4]
    3eda:	4b2b      	ldr	r3, [pc, #172]	; (3f88 <spi_write_reg+0x17c>)
    3edc:	0011      	movs	r1, r2
    3ede:	0018      	movs	r0, r3
    3ee0:	4b25      	ldr	r3, [pc, #148]	; (3f78 <spi_write_reg+0x16c>)
    3ee2:	4798      	blx	r3
    3ee4:	200d      	movs	r0, #13
    3ee6:	4b26      	ldr	r3, [pc, #152]	; (3f80 <spi_write_reg+0x174>)
    3ee8:	4798      	blx	r3
		goto _FAIL_;
    3eea:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    3eec:	230e      	movs	r3, #14
    3eee:	18fb      	adds	r3, r7, r3
    3ef0:	781b      	ldrb	r3, [r3, #0]
    3ef2:	b25b      	sxtb	r3, r3
    3ef4:	2b01      	cmp	r3, #1
    3ef6:	d02e      	beq.n	3f56 <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    3ef8:	2001      	movs	r0, #1
    3efa:	4b24      	ldr	r3, [pc, #144]	; (3f8c <spi_write_reg+0x180>)
    3efc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3efe:	2300      	movs	r3, #0
    3f00:	9300      	str	r3, [sp, #0]
    3f02:	2300      	movs	r3, #0
    3f04:	2200      	movs	r2, #0
    3f06:	2100      	movs	r1, #0
    3f08:	20cf      	movs	r0, #207	; 0xcf
    3f0a:	4c17      	ldr	r4, [pc, #92]	; (3f68 <spi_write_reg+0x15c>)
    3f0c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    3f0e:	20cf      	movs	r0, #207	; 0xcf
    3f10:	4b1c      	ldr	r3, [pc, #112]	; (3f84 <spi_write_reg+0x178>)
    3f12:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    3f14:	4a1e      	ldr	r2, [pc, #120]	; (3f90 <spi_write_reg+0x184>)
    3f16:	4916      	ldr	r1, [pc, #88]	; (3f70 <spi_write_reg+0x164>)
    3f18:	4b16      	ldr	r3, [pc, #88]	; (3f74 <spi_write_reg+0x168>)
    3f1a:	0018      	movs	r0, r3
    3f1c:	4b16      	ldr	r3, [pc, #88]	; (3f78 <spi_write_reg+0x16c>)
    3f1e:	4798      	blx	r3
    3f20:	230f      	movs	r3, #15
    3f22:	18fb      	adds	r3, r7, r3
    3f24:	7819      	ldrb	r1, [r3, #0]
    3f26:	683b      	ldr	r3, [r7, #0]
    3f28:	687a      	ldr	r2, [r7, #4]
    3f2a:	481a      	ldr	r0, [pc, #104]	; (3f94 <spi_write_reg+0x188>)
    3f2c:	4c12      	ldr	r4, [pc, #72]	; (3f78 <spi_write_reg+0x16c>)
    3f2e:	47a0      	blx	r4
    3f30:	200d      	movs	r0, #13
    3f32:	4b13      	ldr	r3, [pc, #76]	; (3f80 <spi_write_reg+0x174>)
    3f34:	4798      	blx	r3
		nm_bsp_sleep(1);
    3f36:	2001      	movs	r0, #1
    3f38:	4b14      	ldr	r3, [pc, #80]	; (3f8c <spi_write_reg+0x180>)
    3f3a:	4798      	blx	r3
		retry--;
    3f3c:	230f      	movs	r3, #15
    3f3e:	18fb      	adds	r3, r7, r3
    3f40:	781a      	ldrb	r2, [r3, #0]
    3f42:	230f      	movs	r3, #15
    3f44:	18fb      	adds	r3, r7, r3
    3f46:	3a01      	subs	r2, #1
    3f48:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    3f4a:	230f      	movs	r3, #15
    3f4c:	18fb      	adds	r3, r7, r3
    3f4e:	781b      	ldrb	r3, [r3, #0]
    3f50:	2b00      	cmp	r3, #0
    3f52:	d000      	beq.n	3f56 <spi_write_reg+0x14a>
    3f54:	e76f      	b.n	3e36 <spi_write_reg+0x2a>
	}

	return result;
    3f56:	230e      	movs	r3, #14
    3f58:	18fb      	adds	r3, r7, r3
    3f5a:	781b      	ldrb	r3, [r3, #0]
    3f5c:	b25b      	sxtb	r3, r3
}
    3f5e:	0018      	movs	r0, r3
    3f60:	46bd      	mov	sp, r7
    3f62:	b004      	add	sp, #16
    3f64:	bdb0      	pop	{r4, r5, r7, pc}
    3f66:	46c0      	nop			; (mov r8, r8)
    3f68:	000034b9 	.word	0x000034b9
    3f6c:	00000396 	.word	0x00000396
    3f70:	0000e7d4 	.word	0x0000e7d4
    3f74:	0000e1fc 	.word	0x0000e1fc
    3f78:	0000c461 	.word	0x0000c461
    3f7c:	0000e42c 	.word	0x0000e42c
    3f80:	0000c495 	.word	0x0000c495
    3f84:	000038fd 	.word	0x000038fd
    3f88:	0000e458 	.word	0x0000e458
    3f8c:	000003f1 	.word	0x000003f1
    3f90:	000003af 	.word	0x000003af
    3f94:	0000e490 	.word	0x0000e490

00003f98 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    3f98:	b5b0      	push	{r4, r5, r7, lr}
    3f9a:	b088      	sub	sp, #32
    3f9c:	af02      	add	r7, sp, #8
    3f9e:	60f8      	str	r0, [r7, #12]
    3fa0:	60b9      	str	r1, [r7, #8]
    3fa2:	1dbb      	adds	r3, r7, #6
    3fa4:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    3fa6:	2316      	movs	r3, #22
    3fa8:	18fb      	adds	r3, r7, r3
    3faa:	220a      	movs	r2, #10
    3fac:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    3fae:	2315      	movs	r3, #21
    3fb0:	18fb      	adds	r3, r7, r3
    3fb2:	22c7      	movs	r2, #199	; 0xc7
    3fb4:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    3fb6:	1dbb      	adds	r3, r7, #6
    3fb8:	881b      	ldrh	r3, [r3, #0]
    3fba:	2b01      	cmp	r3, #1
    3fbc:	d102      	bne.n	3fc4 <nm_spi_write+0x2c>
		size = 2;
    3fbe:	1dbb      	adds	r3, r7, #6
    3fc0:	2202      	movs	r2, #2
    3fc2:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    3fc4:	1dbb      	adds	r3, r7, #6
    3fc6:	881a      	ldrh	r2, [r3, #0]
    3fc8:	2317      	movs	r3, #23
    3fca:	18fc      	adds	r4, r7, r3
    3fcc:	68f9      	ldr	r1, [r7, #12]
    3fce:	2315      	movs	r3, #21
    3fd0:	18fb      	adds	r3, r7, r3
    3fd2:	7818      	ldrb	r0, [r3, #0]
    3fd4:	2300      	movs	r3, #0
    3fd6:	9300      	str	r3, [sp, #0]
    3fd8:	0013      	movs	r3, r2
    3fda:	2200      	movs	r2, #0
    3fdc:	4d5b      	ldr	r5, [pc, #364]	; (414c <nm_spi_write+0x1b4>)
    3fde:	47a8      	blx	r5
    3fe0:	0003      	movs	r3, r0
    3fe2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3fe4:	2317      	movs	r3, #23
    3fe6:	18fb      	adds	r3, r7, r3
    3fe8:	781b      	ldrb	r3, [r3, #0]
    3fea:	b25b      	sxtb	r3, r3
    3fec:	2b01      	cmp	r3, #1
    3fee:	d00f      	beq.n	4010 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3ff0:	4a57      	ldr	r2, [pc, #348]	; (4150 <nm_spi_write+0x1b8>)
    3ff2:	4958      	ldr	r1, [pc, #352]	; (4154 <nm_spi_write+0x1bc>)
    3ff4:	4b58      	ldr	r3, [pc, #352]	; (4158 <nm_spi_write+0x1c0>)
    3ff6:	0018      	movs	r0, r3
    3ff8:	4b58      	ldr	r3, [pc, #352]	; (415c <nm_spi_write+0x1c4>)
    3ffa:	4798      	blx	r3
    3ffc:	68fa      	ldr	r2, [r7, #12]
    3ffe:	4b58      	ldr	r3, [pc, #352]	; (4160 <nm_spi_write+0x1c8>)
    4000:	0011      	movs	r1, r2
    4002:	0018      	movs	r0, r3
    4004:	4b55      	ldr	r3, [pc, #340]	; (415c <nm_spi_write+0x1c4>)
    4006:	4798      	blx	r3
    4008:	200d      	movs	r0, #13
    400a:	4b56      	ldr	r3, [pc, #344]	; (4164 <nm_spi_write+0x1cc>)
    400c:	4798      	blx	r3
		goto _FAIL_;
    400e:	e05f      	b.n	40d0 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    4010:	2317      	movs	r3, #23
    4012:	18fc      	adds	r4, r7, r3
    4014:	2315      	movs	r3, #21
    4016:	18fb      	adds	r3, r7, r3
    4018:	781b      	ldrb	r3, [r3, #0]
    401a:	0018      	movs	r0, r3
    401c:	4b52      	ldr	r3, [pc, #328]	; (4168 <nm_spi_write+0x1d0>)
    401e:	4798      	blx	r3
    4020:	0003      	movs	r3, r0
    4022:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4024:	2317      	movs	r3, #23
    4026:	18fb      	adds	r3, r7, r3
    4028:	781b      	ldrb	r3, [r3, #0]
    402a:	b25b      	sxtb	r3, r3
    402c:	2b01      	cmp	r3, #1
    402e:	d010      	beq.n	4052 <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    4030:	23f4      	movs	r3, #244	; 0xf4
    4032:	009a      	lsls	r2, r3, #2
    4034:	4947      	ldr	r1, [pc, #284]	; (4154 <nm_spi_write+0x1bc>)
    4036:	4b48      	ldr	r3, [pc, #288]	; (4158 <nm_spi_write+0x1c0>)
    4038:	0018      	movs	r0, r3
    403a:	4b48      	ldr	r3, [pc, #288]	; (415c <nm_spi_write+0x1c4>)
    403c:	4798      	blx	r3
    403e:	68fa      	ldr	r2, [r7, #12]
    4040:	4b4a      	ldr	r3, [pc, #296]	; (416c <nm_spi_write+0x1d4>)
    4042:	0011      	movs	r1, r2
    4044:	0018      	movs	r0, r3
    4046:	4b45      	ldr	r3, [pc, #276]	; (415c <nm_spi_write+0x1c4>)
    4048:	4798      	blx	r3
    404a:	200d      	movs	r0, #13
    404c:	4b45      	ldr	r3, [pc, #276]	; (4164 <nm_spi_write+0x1cc>)
    404e:	4798      	blx	r3
		goto _FAIL_;
    4050:	e03e      	b.n	40d0 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    4052:	2317      	movs	r3, #23
    4054:	18fc      	adds	r4, r7, r3
    4056:	1dbb      	adds	r3, r7, #6
    4058:	881a      	ldrh	r2, [r3, #0]
    405a:	68bb      	ldr	r3, [r7, #8]
    405c:	0011      	movs	r1, r2
    405e:	0018      	movs	r0, r3
    4060:	4b43      	ldr	r3, [pc, #268]	; (4170 <nm_spi_write+0x1d8>)
    4062:	4798      	blx	r3
    4064:	0003      	movs	r3, r0
    4066:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4068:	2317      	movs	r3, #23
    406a:	18fb      	adds	r3, r7, r3
    406c:	781b      	ldrb	r3, [r3, #0]
    406e:	b25b      	sxtb	r3, r3
    4070:	2b01      	cmp	r3, #1
    4072:	d00e      	beq.n	4092 <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    4074:	23f8      	movs	r3, #248	; 0xf8
    4076:	009a      	lsls	r2, r3, #2
    4078:	4936      	ldr	r1, [pc, #216]	; (4154 <nm_spi_write+0x1bc>)
    407a:	4b37      	ldr	r3, [pc, #220]	; (4158 <nm_spi_write+0x1c0>)
    407c:	0018      	movs	r0, r3
    407e:	4b37      	ldr	r3, [pc, #220]	; (415c <nm_spi_write+0x1c4>)
    4080:	4798      	blx	r3
    4082:	4b3c      	ldr	r3, [pc, #240]	; (4174 <nm_spi_write+0x1dc>)
    4084:	0018      	movs	r0, r3
    4086:	4b3c      	ldr	r3, [pc, #240]	; (4178 <nm_spi_write+0x1e0>)
    4088:	4798      	blx	r3
    408a:	200d      	movs	r0, #13
    408c:	4b35      	ldr	r3, [pc, #212]	; (4164 <nm_spi_write+0x1cc>)
    408e:	4798      	blx	r3
		goto _FAIL_;
    4090:	e01e      	b.n	40d0 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    4092:	2317      	movs	r3, #23
    4094:	18fc      	adds	r4, r7, r3
    4096:	2315      	movs	r3, #21
    4098:	18fb      	adds	r3, r7, r3
    409a:	781b      	ldrb	r3, [r3, #0]
    409c:	0018      	movs	r0, r3
    409e:	4b37      	ldr	r3, [pc, #220]	; (417c <nm_spi_write+0x1e4>)
    40a0:	4798      	blx	r3
    40a2:	0003      	movs	r3, r0
    40a4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    40a6:	2317      	movs	r3, #23
    40a8:	18fb      	adds	r3, r7, r3
    40aa:	781b      	ldrb	r3, [r3, #0]
    40ac:	b25b      	sxtb	r3, r3
    40ae:	2b01      	cmp	r3, #1
    40b0:	d00e      	beq.n	40d0 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    40b2:	23fa      	movs	r3, #250	; 0xfa
    40b4:	009a      	lsls	r2, r3, #2
    40b6:	4927      	ldr	r1, [pc, #156]	; (4154 <nm_spi_write+0x1bc>)
    40b8:	4b27      	ldr	r3, [pc, #156]	; (4158 <nm_spi_write+0x1c0>)
    40ba:	0018      	movs	r0, r3
    40bc:	4b27      	ldr	r3, [pc, #156]	; (415c <nm_spi_write+0x1c4>)
    40be:	4798      	blx	r3
    40c0:	4b2c      	ldr	r3, [pc, #176]	; (4174 <nm_spi_write+0x1dc>)
    40c2:	0018      	movs	r0, r3
    40c4:	4b2c      	ldr	r3, [pc, #176]	; (4178 <nm_spi_write+0x1e0>)
    40c6:	4798      	blx	r3
    40c8:	200d      	movs	r0, #13
    40ca:	4b26      	ldr	r3, [pc, #152]	; (4164 <nm_spi_write+0x1cc>)
    40cc:	4798      	blx	r3
		goto _FAIL_;
    40ce:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    40d0:	2317      	movs	r3, #23
    40d2:	18fb      	adds	r3, r7, r3
    40d4:	781b      	ldrb	r3, [r3, #0]
    40d6:	b25b      	sxtb	r3, r3
    40d8:	2b01      	cmp	r3, #1
    40da:	d02f      	beq.n	413c <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    40dc:	2001      	movs	r0, #1
    40de:	4b28      	ldr	r3, [pc, #160]	; (4180 <nm_spi_write+0x1e8>)
    40e0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    40e2:	2300      	movs	r3, #0
    40e4:	9300      	str	r3, [sp, #0]
    40e6:	2300      	movs	r3, #0
    40e8:	2200      	movs	r2, #0
    40ea:	2100      	movs	r1, #0
    40ec:	20cf      	movs	r0, #207	; 0xcf
    40ee:	4c17      	ldr	r4, [pc, #92]	; (414c <nm_spi_write+0x1b4>)
    40f0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    40f2:	20cf      	movs	r0, #207	; 0xcf
    40f4:	4b1c      	ldr	r3, [pc, #112]	; (4168 <nm_spi_write+0x1d0>)
    40f6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    40f8:	4a22      	ldr	r2, [pc, #136]	; (4184 <nm_spi_write+0x1ec>)
    40fa:	4916      	ldr	r1, [pc, #88]	; (4154 <nm_spi_write+0x1bc>)
    40fc:	4b16      	ldr	r3, [pc, #88]	; (4158 <nm_spi_write+0x1c0>)
    40fe:	0018      	movs	r0, r3
    4100:	4b16      	ldr	r3, [pc, #88]	; (415c <nm_spi_write+0x1c4>)
    4102:	4798      	blx	r3
    4104:	2316      	movs	r3, #22
    4106:	18fb      	adds	r3, r7, r3
    4108:	7819      	ldrb	r1, [r3, #0]
    410a:	1dbb      	adds	r3, r7, #6
    410c:	881b      	ldrh	r3, [r3, #0]
    410e:	68fa      	ldr	r2, [r7, #12]
    4110:	481d      	ldr	r0, [pc, #116]	; (4188 <nm_spi_write+0x1f0>)
    4112:	4c12      	ldr	r4, [pc, #72]	; (415c <nm_spi_write+0x1c4>)
    4114:	47a0      	blx	r4
    4116:	200d      	movs	r0, #13
    4118:	4b12      	ldr	r3, [pc, #72]	; (4164 <nm_spi_write+0x1cc>)
    411a:	4798      	blx	r3
		nm_bsp_sleep(1);
    411c:	2001      	movs	r0, #1
    411e:	4b18      	ldr	r3, [pc, #96]	; (4180 <nm_spi_write+0x1e8>)
    4120:	4798      	blx	r3
		retry--;
    4122:	2316      	movs	r3, #22
    4124:	18fb      	adds	r3, r7, r3
    4126:	781a      	ldrb	r2, [r3, #0]
    4128:	2316      	movs	r3, #22
    412a:	18fb      	adds	r3, r7, r3
    412c:	3a01      	subs	r2, #1
    412e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4130:	2316      	movs	r3, #22
    4132:	18fb      	adds	r3, r7, r3
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	2b00      	cmp	r3, #0
    4138:	d000      	beq.n	413c <nm_spi_write+0x1a4>
    413a:	e73c      	b.n	3fb6 <nm_spi_write+0x1e>
	}


	return result;
    413c:	2317      	movs	r3, #23
    413e:	18fb      	adds	r3, r7, r3
    4140:	781b      	ldrb	r3, [r3, #0]
    4142:	b25b      	sxtb	r3, r3
}
    4144:	0018      	movs	r0, r3
    4146:	46bd      	mov	sp, r7
    4148:	b006      	add	sp, #24
    414a:	bdb0      	pop	{r4, r5, r7, pc}
    414c:	000034b9 	.word	0x000034b9
    4150:	000003ca 	.word	0x000003ca
    4154:	0000e7e4 	.word	0x0000e7e4
    4158:	0000e1fc 	.word	0x0000e1fc
    415c:	0000c461 	.word	0x0000c461
    4160:	0000e4ac 	.word	0x0000e4ac
    4164:	0000c495 	.word	0x0000c495
    4168:	000038fd 	.word	0x000038fd
    416c:	0000e4dc 	.word	0x0000e4dc
    4170:	00003c39 	.word	0x00003c39
    4174:	0000e514 	.word	0x0000e514
    4178:	0000c581 	.word	0x0000c581
    417c:	000037fd 	.word	0x000037fd
    4180:	000003f1 	.word	0x000003f1
    4184:	000003f2 	.word	0x000003f2
    4188:	0000e53c 	.word	0x0000e53c

0000418c <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    418c:	b5b0      	push	{r4, r5, r7, lr}
    418e:	b086      	sub	sp, #24
    4190:	af02      	add	r7, sp, #8
    4192:	6078      	str	r0, [r7, #4]
    4194:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    4196:	230f      	movs	r3, #15
    4198:	18fb      	adds	r3, r7, r3
    419a:	220a      	movs	r2, #10
    419c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    419e:	230e      	movs	r3, #14
    41a0:	18fb      	adds	r3, r7, r3
    41a2:	2201      	movs	r2, #1
    41a4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    41a6:	230d      	movs	r3, #13
    41a8:	18fb      	adds	r3, r7, r3
    41aa:	22ca      	movs	r2, #202	; 0xca
    41ac:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    41ae:	230c      	movs	r3, #12
    41b0:	18fb      	adds	r3, r7, r3
    41b2:	2200      	movs	r2, #0
    41b4:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    41b6:	687b      	ldr	r3, [r7, #4]
    41b8:	2bff      	cmp	r3, #255	; 0xff
    41ba:	d808      	bhi.n	41ce <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    41bc:	230d      	movs	r3, #13
    41be:	18fb      	adds	r3, r7, r3
    41c0:	22c4      	movs	r2, #196	; 0xc4
    41c2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    41c4:	230c      	movs	r3, #12
    41c6:	18fb      	adds	r3, r7, r3
    41c8:	2201      	movs	r2, #1
    41ca:	701a      	strb	r2, [r3, #0]
    41cc:	e007      	b.n	41de <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    41ce:	230d      	movs	r3, #13
    41d0:	18fb      	adds	r3, r7, r3
    41d2:	22ca      	movs	r2, #202	; 0xca
    41d4:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    41d6:	230c      	movs	r3, #12
    41d8:	18fb      	adds	r3, r7, r3
    41da:	2200      	movs	r2, #0
    41dc:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    41de:	230e      	movs	r3, #14
    41e0:	18fc      	adds	r4, r7, r3
    41e2:	6879      	ldr	r1, [r7, #4]
    41e4:	230d      	movs	r3, #13
    41e6:	18fb      	adds	r3, r7, r3
    41e8:	7818      	ldrb	r0, [r3, #0]
    41ea:	230c      	movs	r3, #12
    41ec:	18fb      	adds	r3, r7, r3
    41ee:	781b      	ldrb	r3, [r3, #0]
    41f0:	9300      	str	r3, [sp, #0]
    41f2:	2304      	movs	r3, #4
    41f4:	2200      	movs	r2, #0
    41f6:	4d56      	ldr	r5, [pc, #344]	; (4350 <spi_read_reg+0x1c4>)
    41f8:	47a8      	blx	r5
    41fa:	0003      	movs	r3, r0
    41fc:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    41fe:	230e      	movs	r3, #14
    4200:	18fb      	adds	r3, r7, r3
    4202:	781b      	ldrb	r3, [r3, #0]
    4204:	b25b      	sxtb	r3, r3
    4206:	2b01      	cmp	r3, #1
    4208:	d00f      	beq.n	422a <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    420a:	4a52      	ldr	r2, [pc, #328]	; (4354 <spi_read_reg+0x1c8>)
    420c:	4952      	ldr	r1, [pc, #328]	; (4358 <spi_read_reg+0x1cc>)
    420e:	4b53      	ldr	r3, [pc, #332]	; (435c <spi_read_reg+0x1d0>)
    4210:	0018      	movs	r0, r3
    4212:	4b53      	ldr	r3, [pc, #332]	; (4360 <spi_read_reg+0x1d4>)
    4214:	4798      	blx	r3
    4216:	687a      	ldr	r2, [r7, #4]
    4218:	4b52      	ldr	r3, [pc, #328]	; (4364 <spi_read_reg+0x1d8>)
    421a:	0011      	movs	r1, r2
    421c:	0018      	movs	r0, r3
    421e:	4b50      	ldr	r3, [pc, #320]	; (4360 <spi_read_reg+0x1d4>)
    4220:	4798      	blx	r3
    4222:	200d      	movs	r0, #13
    4224:	4b50      	ldr	r3, [pc, #320]	; (4368 <spi_read_reg+0x1dc>)
    4226:	4798      	blx	r3
		goto _FAIL_;
    4228:	e055      	b.n	42d6 <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    422a:	230e      	movs	r3, #14
    422c:	18fc      	adds	r4, r7, r3
    422e:	230d      	movs	r3, #13
    4230:	18fb      	adds	r3, r7, r3
    4232:	781b      	ldrb	r3, [r3, #0]
    4234:	0018      	movs	r0, r3
    4236:	4b4d      	ldr	r3, [pc, #308]	; (436c <spi_read_reg+0x1e0>)
    4238:	4798      	blx	r3
    423a:	0003      	movs	r3, r0
    423c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    423e:	230e      	movs	r3, #14
    4240:	18fb      	adds	r3, r7, r3
    4242:	781b      	ldrb	r3, [r3, #0]
    4244:	b25b      	sxtb	r3, r3
    4246:	2b01      	cmp	r3, #1
    4248:	d00f      	beq.n	426a <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    424a:	4a49      	ldr	r2, [pc, #292]	; (4370 <spi_read_reg+0x1e4>)
    424c:	4942      	ldr	r1, [pc, #264]	; (4358 <spi_read_reg+0x1cc>)
    424e:	4b43      	ldr	r3, [pc, #268]	; (435c <spi_read_reg+0x1d0>)
    4250:	0018      	movs	r0, r3
    4252:	4b43      	ldr	r3, [pc, #268]	; (4360 <spi_read_reg+0x1d4>)
    4254:	4798      	blx	r3
    4256:	687a      	ldr	r2, [r7, #4]
    4258:	4b46      	ldr	r3, [pc, #280]	; (4374 <spi_read_reg+0x1e8>)
    425a:	0011      	movs	r1, r2
    425c:	0018      	movs	r0, r3
    425e:	4b40      	ldr	r3, [pc, #256]	; (4360 <spi_read_reg+0x1d4>)
    4260:	4798      	blx	r3
    4262:	200d      	movs	r0, #13
    4264:	4b40      	ldr	r3, [pc, #256]	; (4368 <spi_read_reg+0x1dc>)
    4266:	4798      	blx	r3
		goto _FAIL_;
    4268:	e035      	b.n	42d6 <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    426a:	230e      	movs	r3, #14
    426c:	18fc      	adds	r4, r7, r3
    426e:	230c      	movs	r3, #12
    4270:	18fb      	adds	r3, r7, r3
    4272:	781a      	ldrb	r2, [r3, #0]
    4274:	2308      	movs	r3, #8
    4276:	18fb      	adds	r3, r7, r3
    4278:	2104      	movs	r1, #4
    427a:	0018      	movs	r0, r3
    427c:	4b3e      	ldr	r3, [pc, #248]	; (4378 <spi_read_reg+0x1ec>)
    427e:	4798      	blx	r3
    4280:	0003      	movs	r3, r0
    4282:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4284:	230e      	movs	r3, #14
    4286:	18fb      	adds	r3, r7, r3
    4288:	781b      	ldrb	r3, [r3, #0]
    428a:	b25b      	sxtb	r3, r3
    428c:	2b01      	cmp	r3, #1
    428e:	d00d      	beq.n	42ac <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    4290:	4a3a      	ldr	r2, [pc, #232]	; (437c <spi_read_reg+0x1f0>)
    4292:	4931      	ldr	r1, [pc, #196]	; (4358 <spi_read_reg+0x1cc>)
    4294:	4b31      	ldr	r3, [pc, #196]	; (435c <spi_read_reg+0x1d0>)
    4296:	0018      	movs	r0, r3
    4298:	4b31      	ldr	r3, [pc, #196]	; (4360 <spi_read_reg+0x1d4>)
    429a:	4798      	blx	r3
    429c:	4b38      	ldr	r3, [pc, #224]	; (4380 <spi_read_reg+0x1f4>)
    429e:	0018      	movs	r0, r3
    42a0:	4b38      	ldr	r3, [pc, #224]	; (4384 <spi_read_reg+0x1f8>)
    42a2:	4798      	blx	r3
    42a4:	200d      	movs	r0, #13
    42a6:	4b30      	ldr	r3, [pc, #192]	; (4368 <spi_read_reg+0x1dc>)
    42a8:	4798      	blx	r3
		goto _FAIL_;
    42aa:	e014      	b.n	42d6 <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    42ac:	2308      	movs	r3, #8
    42ae:	18fb      	adds	r3, r7, r3
    42b0:	781b      	ldrb	r3, [r3, #0]
    42b2:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    42b4:	2308      	movs	r3, #8
    42b6:	18fb      	adds	r3, r7, r3
    42b8:	785b      	ldrb	r3, [r3, #1]
    42ba:	021b      	lsls	r3, r3, #8
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    42bc:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    42be:	2308      	movs	r3, #8
    42c0:	18fb      	adds	r3, r7, r3
    42c2:	789b      	ldrb	r3, [r3, #2]
    42c4:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    42c6:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    42c8:	2308      	movs	r3, #8
    42ca:	18fb      	adds	r3, r7, r3
    42cc:	78db      	ldrb	r3, [r3, #3]
    42ce:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    42d0:	431a      	orrs	r2, r3
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    42d2:	683b      	ldr	r3, [r7, #0]
    42d4:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
		
_FAIL_:
	if(result != N_OK)
    42d6:	230e      	movs	r3, #14
    42d8:	18fb      	adds	r3, r7, r3
    42da:	781b      	ldrb	r3, [r3, #0]
    42dc:	b25b      	sxtb	r3, r3
    42de:	2b01      	cmp	r3, #1
    42e0:	d02e      	beq.n	4340 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    42e2:	2001      	movs	r0, #1
    42e4:	4b28      	ldr	r3, [pc, #160]	; (4388 <spi_read_reg+0x1fc>)
    42e6:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    42e8:	2300      	movs	r3, #0
    42ea:	9300      	str	r3, [sp, #0]
    42ec:	2300      	movs	r3, #0
    42ee:	2200      	movs	r2, #0
    42f0:	2100      	movs	r1, #0
    42f2:	20cf      	movs	r0, #207	; 0xcf
    42f4:	4c16      	ldr	r4, [pc, #88]	; (4350 <spi_read_reg+0x1c4>)
    42f6:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    42f8:	20cf      	movs	r0, #207	; 0xcf
    42fa:	4b1c      	ldr	r3, [pc, #112]	; (436c <spi_read_reg+0x1e0>)
    42fc:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    42fe:	4a23      	ldr	r2, [pc, #140]	; (438c <spi_read_reg+0x200>)
    4300:	4915      	ldr	r1, [pc, #84]	; (4358 <spi_read_reg+0x1cc>)
    4302:	4b16      	ldr	r3, [pc, #88]	; (435c <spi_read_reg+0x1d0>)
    4304:	0018      	movs	r0, r3
    4306:	4b16      	ldr	r3, [pc, #88]	; (4360 <spi_read_reg+0x1d4>)
    4308:	4798      	blx	r3
    430a:	230f      	movs	r3, #15
    430c:	18fb      	adds	r3, r7, r3
    430e:	7819      	ldrb	r1, [r3, #0]
    4310:	687a      	ldr	r2, [r7, #4]
    4312:	4b1f      	ldr	r3, [pc, #124]	; (4390 <spi_read_reg+0x204>)
    4314:	0018      	movs	r0, r3
    4316:	4b12      	ldr	r3, [pc, #72]	; (4360 <spi_read_reg+0x1d4>)
    4318:	4798      	blx	r3
    431a:	200d      	movs	r0, #13
    431c:	4b12      	ldr	r3, [pc, #72]	; (4368 <spi_read_reg+0x1dc>)
    431e:	4798      	blx	r3
		nm_bsp_sleep(1);
    4320:	2001      	movs	r0, #1
    4322:	4b19      	ldr	r3, [pc, #100]	; (4388 <spi_read_reg+0x1fc>)
    4324:	4798      	blx	r3
		retry--;
    4326:	230f      	movs	r3, #15
    4328:	18fb      	adds	r3, r7, r3
    432a:	781a      	ldrb	r2, [r3, #0]
    432c:	230f      	movs	r3, #15
    432e:	18fb      	adds	r3, r7, r3
    4330:	3a01      	subs	r2, #1
    4332:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4334:	230f      	movs	r3, #15
    4336:	18fb      	adds	r3, r7, r3
    4338:	781b      	ldrb	r3, [r3, #0]
    433a:	2b00      	cmp	r3, #0
    433c:	d000      	beq.n	4340 <spi_read_reg+0x1b4>
    433e:	e73a      	b.n	41b6 <spi_read_reg+0x2a>
	}
		
	return result;
    4340:	230e      	movs	r3, #14
    4342:	18fb      	adds	r3, r7, r3
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	b25b      	sxtb	r3, r3
}
    4348:	0018      	movs	r0, r3
    434a:	46bd      	mov	sp, r7
    434c:	b004      	add	sp, #16
    434e:	bdb0      	pop	{r4, r5, r7, pc}
    4350:	000034b9 	.word	0x000034b9
    4354:	00000417 	.word	0x00000417
    4358:	0000e7f4 	.word	0x0000e7f4
    435c:	0000e1fc 	.word	0x0000e1fc
    4360:	0000c461 	.word	0x0000c461
    4364:	0000e558 	.word	0x0000e558
    4368:	0000c495 	.word	0x0000c495
    436c:	000038fd 	.word	0x000038fd
    4370:	0000041d 	.word	0x0000041d
    4374:	0000e584 	.word	0x0000e584
    4378:	00003a35 	.word	0x00003a35
    437c:	00000424 	.word	0x00000424
    4380:	0000e5b8 	.word	0x0000e5b8
    4384:	0000c581 	.word	0x0000c581
    4388:	000003f1 	.word	0x000003f1
    438c:	0000043c 	.word	0x0000043c
    4390:	0000e5d8 	.word	0x0000e5d8

00004394 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    4394:	b5b0      	push	{r4, r5, r7, lr}
    4396:	b088      	sub	sp, #32
    4398:	af02      	add	r7, sp, #8
    439a:	60f8      	str	r0, [r7, #12]
    439c:	60b9      	str	r1, [r7, #8]
    439e:	1dbb      	adds	r3, r7, #6
    43a0:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    43a2:	2314      	movs	r3, #20
    43a4:	18fb      	adds	r3, r7, r3
    43a6:	22c8      	movs	r2, #200	; 0xc8
    43a8:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    43aa:	2316      	movs	r3, #22
    43ac:	18fb      	adds	r3, r7, r3
    43ae:	220a      	movs	r2, #10
    43b0:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    43b2:	2315      	movs	r3, #21
    43b4:	18fb      	adds	r3, r7, r3
    43b6:	2200      	movs	r2, #0
    43b8:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    43ba:	1dbb      	adds	r3, r7, #6
    43bc:	881b      	ldrh	r3, [r3, #0]
    43be:	2b01      	cmp	r3, #1
    43c0:	d106      	bne.n	43d0 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    43c2:	1dbb      	adds	r3, r7, #6
    43c4:	2202      	movs	r2, #2
    43c6:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    43c8:	2315      	movs	r3, #21
    43ca:	18fb      	adds	r3, r7, r3
    43cc:	2201      	movs	r2, #1
    43ce:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    43d0:	1dbb      	adds	r3, r7, #6
    43d2:	881a      	ldrh	r2, [r3, #0]
    43d4:	2317      	movs	r3, #23
    43d6:	18fc      	adds	r4, r7, r3
    43d8:	68f9      	ldr	r1, [r7, #12]
    43da:	2314      	movs	r3, #20
    43dc:	18fb      	adds	r3, r7, r3
    43de:	7818      	ldrb	r0, [r3, #0]
    43e0:	2300      	movs	r3, #0
    43e2:	9300      	str	r3, [sp, #0]
    43e4:	0013      	movs	r3, r2
    43e6:	2200      	movs	r2, #0
    43e8:	4d56      	ldr	r5, [pc, #344]	; (4544 <nm_spi_read+0x1b0>)
    43ea:	47a8      	blx	r5
    43ec:	0003      	movs	r3, r0
    43ee:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    43f0:	2317      	movs	r3, #23
    43f2:	18fb      	adds	r3, r7, r3
    43f4:	781b      	ldrb	r3, [r3, #0]
    43f6:	b25b      	sxtb	r3, r3
    43f8:	2b01      	cmp	r3, #1
    43fa:	d00f      	beq.n	441c <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    43fc:	4a52      	ldr	r2, [pc, #328]	; (4548 <nm_spi_read+0x1b4>)
    43fe:	4953      	ldr	r1, [pc, #332]	; (454c <nm_spi_read+0x1b8>)
    4400:	4b53      	ldr	r3, [pc, #332]	; (4550 <nm_spi_read+0x1bc>)
    4402:	0018      	movs	r0, r3
    4404:	4b53      	ldr	r3, [pc, #332]	; (4554 <nm_spi_read+0x1c0>)
    4406:	4798      	blx	r3
    4408:	68fa      	ldr	r2, [r7, #12]
    440a:	4b53      	ldr	r3, [pc, #332]	; (4558 <nm_spi_read+0x1c4>)
    440c:	0011      	movs	r1, r2
    440e:	0018      	movs	r0, r3
    4410:	4b50      	ldr	r3, [pc, #320]	; (4554 <nm_spi_read+0x1c0>)
    4412:	4798      	blx	r3
    4414:	200d      	movs	r0, #13
    4416:	4b51      	ldr	r3, [pc, #324]	; (455c <nm_spi_read+0x1c8>)
    4418:	4798      	blx	r3
		goto _FAIL_;
    441a:	e055      	b.n	44c8 <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    441c:	2317      	movs	r3, #23
    441e:	18fc      	adds	r4, r7, r3
    4420:	2314      	movs	r3, #20
    4422:	18fb      	adds	r3, r7, r3
    4424:	781b      	ldrb	r3, [r3, #0]
    4426:	0018      	movs	r0, r3
    4428:	4b4d      	ldr	r3, [pc, #308]	; (4560 <nm_spi_read+0x1cc>)
    442a:	4798      	blx	r3
    442c:	0003      	movs	r3, r0
    442e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    4430:	2317      	movs	r3, #23
    4432:	18fb      	adds	r3, r7, r3
    4434:	781b      	ldrb	r3, [r3, #0]
    4436:	b25b      	sxtb	r3, r3
    4438:	2b01      	cmp	r3, #1
    443a:	d00f      	beq.n	445c <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    443c:	4a49      	ldr	r2, [pc, #292]	; (4564 <nm_spi_read+0x1d0>)
    443e:	4943      	ldr	r1, [pc, #268]	; (454c <nm_spi_read+0x1b8>)
    4440:	4b43      	ldr	r3, [pc, #268]	; (4550 <nm_spi_read+0x1bc>)
    4442:	0018      	movs	r0, r3
    4444:	4b43      	ldr	r3, [pc, #268]	; (4554 <nm_spi_read+0x1c0>)
    4446:	4798      	blx	r3
    4448:	68fa      	ldr	r2, [r7, #12]
    444a:	4b47      	ldr	r3, [pc, #284]	; (4568 <nm_spi_read+0x1d4>)
    444c:	0011      	movs	r1, r2
    444e:	0018      	movs	r0, r3
    4450:	4b40      	ldr	r3, [pc, #256]	; (4554 <nm_spi_read+0x1c0>)
    4452:	4798      	blx	r3
    4454:	200d      	movs	r0, #13
    4456:	4b41      	ldr	r3, [pc, #260]	; (455c <nm_spi_read+0x1c8>)
    4458:	4798      	blx	r3
		goto _FAIL_;
    445a:	e035      	b.n	44c8 <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    445c:	2315      	movs	r3, #21
    445e:	18fb      	adds	r3, r7, r3
    4460:	781b      	ldrb	r3, [r3, #0]
    4462:	2b00      	cmp	r3, #0
    4464:	d011      	beq.n	448a <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    4466:	2317      	movs	r3, #23
    4468:	18fc      	adds	r4, r7, r3
    446a:	1dbb      	adds	r3, r7, #6
    446c:	8819      	ldrh	r1, [r3, #0]
    446e:	2310      	movs	r3, #16
    4470:	18fb      	adds	r3, r7, r3
    4472:	2200      	movs	r2, #0
    4474:	0018      	movs	r0, r3
    4476:	4b3d      	ldr	r3, [pc, #244]	; (456c <nm_spi_read+0x1d8>)
    4478:	4798      	blx	r3
    447a:	0003      	movs	r3, r0
    447c:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    447e:	2310      	movs	r3, #16
    4480:	18fb      	adds	r3, r7, r3
    4482:	781a      	ldrb	r2, [r3, #0]
    4484:	68bb      	ldr	r3, [r7, #8]
    4486:	701a      	strb	r2, [r3, #0]
    4488:	e00a      	b.n	44a0 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    448a:	2317      	movs	r3, #23
    448c:	18fc      	adds	r4, r7, r3
    448e:	1dbb      	adds	r3, r7, #6
    4490:	8819      	ldrh	r1, [r3, #0]
    4492:	68bb      	ldr	r3, [r7, #8]
    4494:	2200      	movs	r2, #0
    4496:	0018      	movs	r0, r3
    4498:	4b34      	ldr	r3, [pc, #208]	; (456c <nm_spi_read+0x1d8>)
    449a:	4798      	blx	r3
    449c:	0003      	movs	r3, r0
    449e:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    44a0:	2317      	movs	r3, #23
    44a2:	18fb      	adds	r3, r7, r3
    44a4:	781b      	ldrb	r3, [r3, #0]
    44a6:	b25b      	sxtb	r3, r3
    44a8:	2b01      	cmp	r3, #1
    44aa:	d00d      	beq.n	44c8 <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    44ac:	4a30      	ldr	r2, [pc, #192]	; (4570 <nm_spi_read+0x1dc>)
    44ae:	4927      	ldr	r1, [pc, #156]	; (454c <nm_spi_read+0x1b8>)
    44b0:	4b27      	ldr	r3, [pc, #156]	; (4550 <nm_spi_read+0x1bc>)
    44b2:	0018      	movs	r0, r3
    44b4:	4b27      	ldr	r3, [pc, #156]	; (4554 <nm_spi_read+0x1c0>)
    44b6:	4798      	blx	r3
    44b8:	4b2e      	ldr	r3, [pc, #184]	; (4574 <nm_spi_read+0x1e0>)
    44ba:	0018      	movs	r0, r3
    44bc:	4b2e      	ldr	r3, [pc, #184]	; (4578 <nm_spi_read+0x1e4>)
    44be:	4798      	blx	r3
    44c0:	200d      	movs	r0, #13
    44c2:	4b26      	ldr	r3, [pc, #152]	; (455c <nm_spi_read+0x1c8>)
    44c4:	4798      	blx	r3
		goto _FAIL_;
    44c6:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    44c8:	2317      	movs	r3, #23
    44ca:	18fb      	adds	r3, r7, r3
    44cc:	781b      	ldrb	r3, [r3, #0]
    44ce:	b25b      	sxtb	r3, r3
    44d0:	2b01      	cmp	r3, #1
    44d2:	d02f      	beq.n	4534 <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    44d4:	2001      	movs	r0, #1
    44d6:	4b29      	ldr	r3, [pc, #164]	; (457c <nm_spi_read+0x1e8>)
    44d8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    44da:	2300      	movs	r3, #0
    44dc:	9300      	str	r3, [sp, #0]
    44de:	2300      	movs	r3, #0
    44e0:	2200      	movs	r2, #0
    44e2:	2100      	movs	r1, #0
    44e4:	20cf      	movs	r0, #207	; 0xcf
    44e6:	4c17      	ldr	r4, [pc, #92]	; (4544 <nm_spi_read+0x1b0>)
    44e8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    44ea:	20cf      	movs	r0, #207	; 0xcf
    44ec:	4b1c      	ldr	r3, [pc, #112]	; (4560 <nm_spi_read+0x1cc>)
    44ee:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    44f0:	4a23      	ldr	r2, [pc, #140]	; (4580 <nm_spi_read+0x1ec>)
    44f2:	4916      	ldr	r1, [pc, #88]	; (454c <nm_spi_read+0x1b8>)
    44f4:	4b16      	ldr	r3, [pc, #88]	; (4550 <nm_spi_read+0x1bc>)
    44f6:	0018      	movs	r0, r3
    44f8:	4b16      	ldr	r3, [pc, #88]	; (4554 <nm_spi_read+0x1c0>)
    44fa:	4798      	blx	r3
    44fc:	2316      	movs	r3, #22
    44fe:	18fb      	adds	r3, r7, r3
    4500:	7819      	ldrb	r1, [r3, #0]
    4502:	1dbb      	adds	r3, r7, #6
    4504:	881b      	ldrh	r3, [r3, #0]
    4506:	68fa      	ldr	r2, [r7, #12]
    4508:	481e      	ldr	r0, [pc, #120]	; (4584 <nm_spi_read+0x1f0>)
    450a:	4c12      	ldr	r4, [pc, #72]	; (4554 <nm_spi_read+0x1c0>)
    450c:	47a0      	blx	r4
    450e:	200d      	movs	r0, #13
    4510:	4b12      	ldr	r3, [pc, #72]	; (455c <nm_spi_read+0x1c8>)
    4512:	4798      	blx	r3
		nm_bsp_sleep(1);
    4514:	2001      	movs	r0, #1
    4516:	4b19      	ldr	r3, [pc, #100]	; (457c <nm_spi_read+0x1e8>)
    4518:	4798      	blx	r3
		retry--;
    451a:	2316      	movs	r3, #22
    451c:	18fb      	adds	r3, r7, r3
    451e:	781a      	ldrb	r2, [r3, #0]
    4520:	2316      	movs	r3, #22
    4522:	18fb      	adds	r3, r7, r3
    4524:	3a01      	subs	r2, #1
    4526:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    4528:	2316      	movs	r3, #22
    452a:	18fb      	adds	r3, r7, r3
    452c:	781b      	ldrb	r3, [r3, #0]
    452e:	2b00      	cmp	r3, #0
    4530:	d000      	beq.n	4534 <nm_spi_read+0x1a0>
    4532:	e742      	b.n	43ba <nm_spi_read+0x26>
	}

	return result;
    4534:	2317      	movs	r3, #23
    4536:	18fb      	adds	r3, r7, r3
    4538:	781b      	ldrb	r3, [r3, #0]
    453a:	b25b      	sxtb	r3, r3
}
    453c:	0018      	movs	r0, r3
    453e:	46bd      	mov	sp, r7
    4540:	b006      	add	sp, #24
    4542:	bdb0      	pop	{r4, r5, r7, pc}
    4544:	000034b9 	.word	0x000034b9
    4548:	0000045d 	.word	0x0000045d
    454c:	0000e804 	.word	0x0000e804
    4550:	0000e1fc 	.word	0x0000e1fc
    4554:	0000c461 	.word	0x0000c461
    4558:	0000e5f0 	.word	0x0000e5f0
    455c:	0000c495 	.word	0x0000c495
    4560:	000038fd 	.word	0x000038fd
    4564:	00000463 	.word	0x00000463
    4568:	0000e620 	.word	0x0000e620
    456c:	00003a35 	.word	0x00003a35
    4570:	00000473 	.word	0x00000473
    4574:	0000e658 	.word	0x0000e658
    4578:	0000c581 	.word	0x0000c581
    457c:	000003f1 	.word	0x000003f1
    4580:	00000484 	.word	0x00000484
    4584:	0000e53c 	.word	0x0000e53c

00004588 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    4588:	b580      	push	{r7, lr}
    458a:	b082      	sub	sp, #8
    458c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    458e:	4b0c      	ldr	r3, [pc, #48]	; (45c0 <spi_init_pkt_sz+0x38>)
    4590:	0018      	movs	r0, r3
    4592:	4b0c      	ldr	r3, [pc, #48]	; (45c4 <spi_init_pkt_sz+0x3c>)
    4594:	4798      	blx	r3
    4596:	0003      	movs	r3, r0
    4598:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    459a:	687b      	ldr	r3, [r7, #4]
    459c:	2270      	movs	r2, #112	; 0x70
    459e:	4393      	bics	r3, r2
    45a0:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    45a2:	687b      	ldr	r3, [r7, #4]
    45a4:	2250      	movs	r2, #80	; 0x50
    45a6:	4313      	orrs	r3, r2
    45a8:	607b      	str	r3, [r7, #4]
    45aa:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    45ac:	687b      	ldr	r3, [r7, #4]
    45ae:	4a04      	ldr	r2, [pc, #16]	; (45c0 <spi_init_pkt_sz+0x38>)
    45b0:	0019      	movs	r1, r3
    45b2:	0010      	movs	r0, r2
    45b4:	4b04      	ldr	r3, [pc, #16]	; (45c8 <spi_init_pkt_sz+0x40>)
    45b6:	4798      	blx	r3
}
    45b8:	46c0      	nop			; (mov r8, r8)
    45ba:	46bd      	mov	sp, r7
    45bc:	b002      	add	sp, #8
    45be:	bd80      	pop	{r7, pc}
    45c0:	0000e824 	.word	0x0000e824
    45c4:	00004761 	.word	0x00004761
    45c8:	000047d5 	.word	0x000047d5

000045cc <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    45cc:	b590      	push	{r4, r7, lr}
    45ce:	b083      	sub	sp, #12
    45d0:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    45d2:	2300      	movs	r3, #0
    45d4:	9300      	str	r3, [sp, #0]
    45d6:	2300      	movs	r3, #0
    45d8:	2200      	movs	r2, #0
    45da:	2100      	movs	r1, #0
    45dc:	20cf      	movs	r0, #207	; 0xcf
    45de:	4c05      	ldr	r4, [pc, #20]	; (45f4 <nm_spi_reset+0x28>)
    45e0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    45e2:	20cf      	movs	r0, #207	; 0xcf
    45e4:	4b04      	ldr	r3, [pc, #16]	; (45f8 <nm_spi_reset+0x2c>)
    45e6:	4798      	blx	r3
	return M2M_SUCCESS;
    45e8:	2300      	movs	r3, #0
}
    45ea:	0018      	movs	r0, r3
    45ec:	46bd      	mov	sp, r7
    45ee:	b001      	add	sp, #4
    45f0:	bd90      	pop	{r4, r7, pc}
    45f2:	46c0      	nop			; (mov r8, r8)
    45f4:	000034b9 	.word	0x000034b9
    45f8:	000038fd 	.word	0x000038fd

000045fc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    45fc:	b580      	push	{r7, lr}
    45fe:	b082      	sub	sp, #8
    4600:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    4602:	2300      	movs	r3, #0
    4604:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    4606:	4b3e      	ldr	r3, [pc, #248]	; (4700 <nm_spi_init+0x104>)
    4608:	2200      	movs	r2, #0
    460a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    460c:	003b      	movs	r3, r7
    460e:	4a3d      	ldr	r2, [pc, #244]	; (4704 <nm_spi_init+0x108>)
    4610:	0019      	movs	r1, r3
    4612:	0010      	movs	r0, r2
    4614:	4b3c      	ldr	r3, [pc, #240]	; (4708 <nm_spi_init+0x10c>)
    4616:	4798      	blx	r3
    4618:	1e03      	subs	r3, r0, #0
    461a:	d126      	bne.n	466a <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    461c:	4b38      	ldr	r3, [pc, #224]	; (4700 <nm_spi_init+0x104>)
    461e:	2201      	movs	r2, #1
    4620:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    4622:	4a3a      	ldr	r2, [pc, #232]	; (470c <nm_spi_init+0x110>)
    4624:	493a      	ldr	r1, [pc, #232]	; (4710 <nm_spi_init+0x114>)
    4626:	4b3b      	ldr	r3, [pc, #236]	; (4714 <nm_spi_init+0x118>)
    4628:	0018      	movs	r0, r3
    462a:	4b3b      	ldr	r3, [pc, #236]	; (4718 <nm_spi_init+0x11c>)
    462c:	4798      	blx	r3
    462e:	4b3b      	ldr	r3, [pc, #236]	; (471c <nm_spi_init+0x120>)
    4630:	0018      	movs	r0, r3
    4632:	4b3b      	ldr	r3, [pc, #236]	; (4720 <nm_spi_init+0x124>)
    4634:	4798      	blx	r3
    4636:	200d      	movs	r0, #13
    4638:	4b3a      	ldr	r3, [pc, #232]	; (4724 <nm_spi_init+0x128>)
    463a:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    463c:	003b      	movs	r3, r7
    463e:	4a31      	ldr	r2, [pc, #196]	; (4704 <nm_spi_init+0x108>)
    4640:	0019      	movs	r1, r3
    4642:	0010      	movs	r0, r2
    4644:	4b30      	ldr	r3, [pc, #192]	; (4708 <nm_spi_init+0x10c>)
    4646:	4798      	blx	r3
    4648:	1e03      	subs	r3, r0, #0
    464a:	d10e      	bne.n	466a <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    464c:	4a36      	ldr	r2, [pc, #216]	; (4728 <nm_spi_init+0x12c>)
    464e:	4930      	ldr	r1, [pc, #192]	; (4710 <nm_spi_init+0x114>)
    4650:	4b30      	ldr	r3, [pc, #192]	; (4714 <nm_spi_init+0x118>)
    4652:	0018      	movs	r0, r3
    4654:	4b30      	ldr	r3, [pc, #192]	; (4718 <nm_spi_init+0x11c>)
    4656:	4798      	blx	r3
    4658:	4b34      	ldr	r3, [pc, #208]	; (472c <nm_spi_init+0x130>)
    465a:	0018      	movs	r0, r3
    465c:	4b30      	ldr	r3, [pc, #192]	; (4720 <nm_spi_init+0x124>)
    465e:	4798      	blx	r3
    4660:	200d      	movs	r0, #13
    4662:	4b30      	ldr	r3, [pc, #192]	; (4724 <nm_spi_init+0x128>)
    4664:	4798      	blx	r3
			return 0;
    4666:	2300      	movs	r3, #0
    4668:	e045      	b.n	46f6 <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    466a:	4b25      	ldr	r3, [pc, #148]	; (4700 <nm_spi_init+0x104>)
    466c:	781b      	ldrb	r3, [r3, #0]
    466e:	2b00      	cmp	r3, #0
    4670:	d125      	bne.n	46be <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    4672:	683b      	ldr	r3, [r7, #0]
    4674:	220c      	movs	r2, #12
    4676:	4393      	bics	r3, r2
    4678:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    467a:	683b      	ldr	r3, [r7, #0]
    467c:	2270      	movs	r2, #112	; 0x70
    467e:	4393      	bics	r3, r2
    4680:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    4682:	683b      	ldr	r3, [r7, #0]
    4684:	2250      	movs	r2, #80	; 0x50
    4686:	4313      	orrs	r3, r2
    4688:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    468a:	683b      	ldr	r3, [r7, #0]
    468c:	4a1d      	ldr	r2, [pc, #116]	; (4704 <nm_spi_init+0x108>)
    468e:	0019      	movs	r1, r3
    4690:	0010      	movs	r0, r2
    4692:	4b27      	ldr	r3, [pc, #156]	; (4730 <nm_spi_init+0x134>)
    4694:	4798      	blx	r3
    4696:	1e03      	subs	r3, r0, #0
    4698:	d10e      	bne.n	46b8 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    469a:	4a26      	ldr	r2, [pc, #152]	; (4734 <nm_spi_init+0x138>)
    469c:	491c      	ldr	r1, [pc, #112]	; (4710 <nm_spi_init+0x114>)
    469e:	4b1d      	ldr	r3, [pc, #116]	; (4714 <nm_spi_init+0x118>)
    46a0:	0018      	movs	r0, r3
    46a2:	4b1d      	ldr	r3, [pc, #116]	; (4718 <nm_spi_init+0x11c>)
    46a4:	4798      	blx	r3
    46a6:	4b24      	ldr	r3, [pc, #144]	; (4738 <nm_spi_init+0x13c>)
    46a8:	0018      	movs	r0, r3
    46aa:	4b1d      	ldr	r3, [pc, #116]	; (4720 <nm_spi_init+0x124>)
    46ac:	4798      	blx	r3
    46ae:	200d      	movs	r0, #13
    46b0:	4b1c      	ldr	r3, [pc, #112]	; (4724 <nm_spi_init+0x128>)
    46b2:	4798      	blx	r3
			return 0;
    46b4:	2300      	movs	r3, #0
    46b6:	e01e      	b.n	46f6 <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    46b8:	4b11      	ldr	r3, [pc, #68]	; (4700 <nm_spi_init+0x104>)
    46ba:	2201      	movs	r2, #1
    46bc:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    46be:	1d3a      	adds	r2, r7, #4
    46c0:	2380      	movs	r3, #128	; 0x80
    46c2:	015b      	lsls	r3, r3, #5
    46c4:	0011      	movs	r1, r2
    46c6:	0018      	movs	r0, r3
    46c8:	4b0f      	ldr	r3, [pc, #60]	; (4708 <nm_spi_init+0x10c>)
    46ca:	4798      	blx	r3
    46cc:	1e03      	subs	r3, r0, #0
    46ce:	d10f      	bne.n	46f0 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    46d0:	4a1a      	ldr	r2, [pc, #104]	; (473c <nm_spi_init+0x140>)
    46d2:	490f      	ldr	r1, [pc, #60]	; (4710 <nm_spi_init+0x114>)
    46d4:	4b0f      	ldr	r3, [pc, #60]	; (4714 <nm_spi_init+0x118>)
    46d6:	0018      	movs	r0, r3
    46d8:	4b0f      	ldr	r3, [pc, #60]	; (4718 <nm_spi_init+0x11c>)
    46da:	4798      	blx	r3
    46dc:	4b18      	ldr	r3, [pc, #96]	; (4740 <nm_spi_init+0x144>)
    46de:	0018      	movs	r0, r3
    46e0:	4b0f      	ldr	r3, [pc, #60]	; (4720 <nm_spi_init+0x124>)
    46e2:	4798      	blx	r3
    46e4:	200d      	movs	r0, #13
    46e6:	4b0f      	ldr	r3, [pc, #60]	; (4724 <nm_spi_init+0x128>)
    46e8:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    46ea:	2306      	movs	r3, #6
    46ec:	425b      	negs	r3, r3
    46ee:	e002      	b.n	46f6 <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    46f0:	4b14      	ldr	r3, [pc, #80]	; (4744 <nm_spi_init+0x148>)
    46f2:	4798      	blx	r3


	return M2M_SUCCESS;
    46f4:	2300      	movs	r3, #0
}
    46f6:	0018      	movs	r0, r3
    46f8:	46bd      	mov	sp, r7
    46fa:	b002      	add	sp, #8
    46fc:	bd80      	pop	{r7, pc}
    46fe:	46c0      	nop			; (mov r8, r8)
    4700:	200000b0 	.word	0x200000b0
    4704:	0000e824 	.word	0x0000e824
    4708:	0000418d 	.word	0x0000418d
    470c:	000004c7 	.word	0x000004c7
    4710:	0000e810 	.word	0x0000e810
    4714:	0000e1fc 	.word	0x0000e1fc
    4718:	0000c461 	.word	0x0000c461
    471c:	0000e680 	.word	0x0000e680
    4720:	0000c581 	.word	0x0000c581
    4724:	0000c495 	.word	0x0000c495
    4728:	000004ca 	.word	0x000004ca
    472c:	0000e6d0 	.word	0x0000e6d0
    4730:	00003e0d 	.word	0x00003e0d
    4734:	000004d4 	.word	0x000004d4
    4738:	0000e6fc 	.word	0x0000e6fc
    473c:	000004de 	.word	0x000004de
    4740:	0000e730 	.word	0x0000e730
    4744:	00004589 	.word	0x00004589

00004748 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    4748:	b580      	push	{r7, lr}
    474a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    474c:	4b03      	ldr	r3, [pc, #12]	; (475c <nm_spi_deinit+0x14>)
    474e:	2200      	movs	r2, #0
    4750:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    4752:	2300      	movs	r3, #0
}
    4754:	0018      	movs	r0, r3
    4756:	46bd      	mov	sp, r7
    4758:	bd80      	pop	{r7, pc}
    475a:	46c0      	nop			; (mov r8, r8)
    475c:	200000b0 	.word	0x200000b0

00004760 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    4760:	b580      	push	{r7, lr}
    4762:	b084      	sub	sp, #16
    4764:	af00      	add	r7, sp, #0
    4766:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    4768:	230c      	movs	r3, #12
    476a:	18fa      	adds	r2, r7, r3
    476c:	687b      	ldr	r3, [r7, #4]
    476e:	0011      	movs	r1, r2
    4770:	0018      	movs	r0, r3
    4772:	4b03      	ldr	r3, [pc, #12]	; (4780 <nm_spi_read_reg+0x20>)
    4774:	4798      	blx	r3

	return u32Val;
    4776:	68fb      	ldr	r3, [r7, #12]
}
    4778:	0018      	movs	r0, r3
    477a:	46bd      	mov	sp, r7
    477c:	b004      	add	sp, #16
    477e:	bd80      	pop	{r7, pc}
    4780:	0000418d 	.word	0x0000418d

00004784 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    4784:	b590      	push	{r4, r7, lr}
    4786:	b085      	sub	sp, #20
    4788:	af00      	add	r7, sp, #0
    478a:	6078      	str	r0, [r7, #4]
    478c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    478e:	230f      	movs	r3, #15
    4790:	18fc      	adds	r4, r7, r3
    4792:	683a      	ldr	r2, [r7, #0]
    4794:	687b      	ldr	r3, [r7, #4]
    4796:	0011      	movs	r1, r2
    4798:	0018      	movs	r0, r3
    479a:	4b0d      	ldr	r3, [pc, #52]	; (47d0 <nm_spi_read_reg_with_ret+0x4c>)
    479c:	4798      	blx	r3
    479e:	0003      	movs	r3, r0
    47a0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    47a2:	230f      	movs	r3, #15
    47a4:	18fb      	adds	r3, r7, r3
    47a6:	781b      	ldrb	r3, [r3, #0]
    47a8:	b25b      	sxtb	r3, r3
    47aa:	2b01      	cmp	r3, #1
    47ac:	d104      	bne.n	47b8 <nm_spi_read_reg_with_ret+0x34>
    47ae:	230f      	movs	r3, #15
    47b0:	18fb      	adds	r3, r7, r3
    47b2:	2200      	movs	r2, #0
    47b4:	701a      	strb	r2, [r3, #0]
    47b6:	e003      	b.n	47c0 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    47b8:	230f      	movs	r3, #15
    47ba:	18fb      	adds	r3, r7, r3
    47bc:	22fa      	movs	r2, #250	; 0xfa
    47be:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    47c0:	230f      	movs	r3, #15
    47c2:	18fb      	adds	r3, r7, r3
    47c4:	781b      	ldrb	r3, [r3, #0]
    47c6:	b25b      	sxtb	r3, r3
}
    47c8:	0018      	movs	r0, r3
    47ca:	46bd      	mov	sp, r7
    47cc:	b005      	add	sp, #20
    47ce:	bd90      	pop	{r4, r7, pc}
    47d0:	0000418d 	.word	0x0000418d

000047d4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    47d4:	b590      	push	{r4, r7, lr}
    47d6:	b085      	sub	sp, #20
    47d8:	af00      	add	r7, sp, #0
    47da:	6078      	str	r0, [r7, #4]
    47dc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    47de:	230f      	movs	r3, #15
    47e0:	18fc      	adds	r4, r7, r3
    47e2:	683a      	ldr	r2, [r7, #0]
    47e4:	687b      	ldr	r3, [r7, #4]
    47e6:	0011      	movs	r1, r2
    47e8:	0018      	movs	r0, r3
    47ea:	4b0d      	ldr	r3, [pc, #52]	; (4820 <nm_spi_write_reg+0x4c>)
    47ec:	4798      	blx	r3
    47ee:	0003      	movs	r3, r0
    47f0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    47f2:	230f      	movs	r3, #15
    47f4:	18fb      	adds	r3, r7, r3
    47f6:	781b      	ldrb	r3, [r3, #0]
    47f8:	b25b      	sxtb	r3, r3
    47fa:	2b01      	cmp	r3, #1
    47fc:	d104      	bne.n	4808 <nm_spi_write_reg+0x34>
    47fe:	230f      	movs	r3, #15
    4800:	18fb      	adds	r3, r7, r3
    4802:	2200      	movs	r2, #0
    4804:	701a      	strb	r2, [r3, #0]
    4806:	e003      	b.n	4810 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4808:	230f      	movs	r3, #15
    480a:	18fb      	adds	r3, r7, r3
    480c:	22fa      	movs	r2, #250	; 0xfa
    480e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4810:	230f      	movs	r3, #15
    4812:	18fb      	adds	r3, r7, r3
    4814:	781b      	ldrb	r3, [r3, #0]
    4816:	b25b      	sxtb	r3, r3
}
    4818:	0018      	movs	r0, r3
    481a:	46bd      	mov	sp, r7
    481c:	b005      	add	sp, #20
    481e:	bd90      	pop	{r4, r7, pc}
    4820:	00003e0d 	.word	0x00003e0d

00004824 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4824:	b590      	push	{r4, r7, lr}
    4826:	b087      	sub	sp, #28
    4828:	af00      	add	r7, sp, #0
    482a:	60f8      	str	r0, [r7, #12]
    482c:	60b9      	str	r1, [r7, #8]
    482e:	1dbb      	adds	r3, r7, #6
    4830:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    4832:	2317      	movs	r3, #23
    4834:	18fc      	adds	r4, r7, r3
    4836:	1dbb      	adds	r3, r7, #6
    4838:	881a      	ldrh	r2, [r3, #0]
    483a:	68b9      	ldr	r1, [r7, #8]
    483c:	68fb      	ldr	r3, [r7, #12]
    483e:	0018      	movs	r0, r3
    4840:	4b0d      	ldr	r3, [pc, #52]	; (4878 <nm_spi_read_block+0x54>)
    4842:	4798      	blx	r3
    4844:	0003      	movs	r3, r0
    4846:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4848:	2317      	movs	r3, #23
    484a:	18fb      	adds	r3, r7, r3
    484c:	781b      	ldrb	r3, [r3, #0]
    484e:	b25b      	sxtb	r3, r3
    4850:	2b01      	cmp	r3, #1
    4852:	d104      	bne.n	485e <nm_spi_read_block+0x3a>
    4854:	2317      	movs	r3, #23
    4856:	18fb      	adds	r3, r7, r3
    4858:	2200      	movs	r2, #0
    485a:	701a      	strb	r2, [r3, #0]
    485c:	e003      	b.n	4866 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    485e:	2317      	movs	r3, #23
    4860:	18fb      	adds	r3, r7, r3
    4862:	22fa      	movs	r2, #250	; 0xfa
    4864:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4866:	2317      	movs	r3, #23
    4868:	18fb      	adds	r3, r7, r3
    486a:	781b      	ldrb	r3, [r3, #0]
    486c:	b25b      	sxtb	r3, r3
}
    486e:	0018      	movs	r0, r3
    4870:	46bd      	mov	sp, r7
    4872:	b007      	add	sp, #28
    4874:	bd90      	pop	{r4, r7, pc}
    4876:	46c0      	nop			; (mov r8, r8)
    4878:	00004395 	.word	0x00004395

0000487c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    487c:	b590      	push	{r4, r7, lr}
    487e:	b087      	sub	sp, #28
    4880:	af00      	add	r7, sp, #0
    4882:	60f8      	str	r0, [r7, #12]
    4884:	60b9      	str	r1, [r7, #8]
    4886:	1dbb      	adds	r3, r7, #6
    4888:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    488a:	2317      	movs	r3, #23
    488c:	18fc      	adds	r4, r7, r3
    488e:	1dbb      	adds	r3, r7, #6
    4890:	881a      	ldrh	r2, [r3, #0]
    4892:	68b9      	ldr	r1, [r7, #8]
    4894:	68fb      	ldr	r3, [r7, #12]
    4896:	0018      	movs	r0, r3
    4898:	4b0d      	ldr	r3, [pc, #52]	; (48d0 <nm_spi_write_block+0x54>)
    489a:	4798      	blx	r3
    489c:	0003      	movs	r3, r0
    489e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    48a0:	2317      	movs	r3, #23
    48a2:	18fb      	adds	r3, r7, r3
    48a4:	781b      	ldrb	r3, [r3, #0]
    48a6:	b25b      	sxtb	r3, r3
    48a8:	2b01      	cmp	r3, #1
    48aa:	d104      	bne.n	48b6 <nm_spi_write_block+0x3a>
    48ac:	2317      	movs	r3, #23
    48ae:	18fb      	adds	r3, r7, r3
    48b0:	2200      	movs	r2, #0
    48b2:	701a      	strb	r2, [r3, #0]
    48b4:	e003      	b.n	48be <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    48b6:	2317      	movs	r3, #23
    48b8:	18fb      	adds	r3, r7, r3
    48ba:	22fa      	movs	r2, #250	; 0xfa
    48bc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    48be:	2317      	movs	r3, #23
    48c0:	18fb      	adds	r3, r7, r3
    48c2:	781b      	ldrb	r3, [r3, #0]
    48c4:	b25b      	sxtb	r3, r3
}
    48c6:	0018      	movs	r0, r3
    48c8:	46bd      	mov	sp, r7
    48ca:	b007      	add	sp, #28
    48cc:	bd90      	pop	{r4, r7, pc}
    48ce:	46c0      	nop			; (mov r8, r8)
    48d0:	00003f99 	.word	0x00003f99

000048d4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    48d4:	b590      	push	{r4, r7, lr}
    48d6:	b089      	sub	sp, #36	; 0x24
    48d8:	af00      	add	r7, sp, #0
    48da:	60b9      	str	r1, [r7, #8]
    48dc:	0011      	movs	r1, r2
    48de:	607b      	str	r3, [r7, #4]
    48e0:	230f      	movs	r3, #15
    48e2:	18fb      	adds	r3, r7, r3
    48e4:	1c02      	adds	r2, r0, #0
    48e6:	701a      	strb	r2, [r3, #0]
    48e8:	230e      	movs	r3, #14
    48ea:	18fb      	adds	r3, r7, r3
    48ec:	1c0a      	adds	r2, r1, #0
    48ee:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    48f0:	2330      	movs	r3, #48	; 0x30
    48f2:	18fb      	adds	r3, r7, r3
    48f4:	881b      	ldrh	r3, [r3, #0]
    48f6:	2b00      	cmp	r3, #0
    48f8:	d100      	bne.n	48fc <Socket_ReadSocketData+0x28>
    48fa:	e0d6      	b.n	4aaa <Socket_ReadSocketData+0x1d6>
    48fc:	230f      	movs	r3, #15
    48fe:	18fb      	adds	r3, r7, r3
    4900:	2200      	movs	r2, #0
    4902:	569a      	ldrsb	r2, [r3, r2]
    4904:	4b6b      	ldr	r3, [pc, #428]	; (4ab4 <Socket_ReadSocketData+0x1e0>)
    4906:	0112      	lsls	r2, r2, #4
    4908:	58d3      	ldr	r3, [r2, r3]
    490a:	2b00      	cmp	r3, #0
    490c:	d100      	bne.n	4910 <Socket_ReadSocketData+0x3c>
    490e:	e0cc      	b.n	4aaa <Socket_ReadSocketData+0x1d6>
    4910:	230f      	movs	r3, #15
    4912:	18fb      	adds	r3, r7, r3
    4914:	781b      	ldrb	r3, [r3, #0]
    4916:	b25b      	sxtb	r3, r3
    4918:	4a66      	ldr	r2, [pc, #408]	; (4ab4 <Socket_ReadSocketData+0x1e0>)
    491a:	011b      	lsls	r3, r3, #4
    491c:	18d3      	adds	r3, r2, r3
    491e:	3304      	adds	r3, #4
    4920:	881b      	ldrh	r3, [r3, #0]
    4922:	b29b      	uxth	r3, r3
    4924:	2b00      	cmp	r3, #0
    4926:	d100      	bne.n	492a <Socket_ReadSocketData+0x56>
    4928:	e0bf      	b.n	4aaa <Socket_ReadSocketData+0x1d6>
    492a:	230f      	movs	r3, #15
    492c:	18fb      	adds	r3, r7, r3
    492e:	781b      	ldrb	r3, [r3, #0]
    4930:	b25b      	sxtb	r3, r3
    4932:	4a60      	ldr	r2, [pc, #384]	; (4ab4 <Socket_ReadSocketData+0x1e0>)
    4934:	011b      	lsls	r3, r3, #4
    4936:	18d3      	adds	r3, r2, r3
    4938:	330a      	adds	r3, #10
    493a:	781b      	ldrb	r3, [r3, #0]
    493c:	b2db      	uxtb	r3, r3
    493e:	2b01      	cmp	r3, #1
    4940:	d000      	beq.n	4944 <Socket_ReadSocketData+0x70>
    4942:	e0b2      	b.n	4aaa <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    4944:	687b      	ldr	r3, [r7, #4]
    4946:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    4948:	68bb      	ldr	r3, [r7, #8]
    494a:	2230      	movs	r2, #48	; 0x30
    494c:	18ba      	adds	r2, r7, r2
    494e:	8812      	ldrh	r2, [r2, #0]
    4950:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    4952:	2319      	movs	r3, #25
    4954:	18fb      	adds	r3, r7, r3
    4956:	2201      	movs	r2, #1
    4958:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    495a:	231a      	movs	r3, #26
    495c:	18fb      	adds	r3, r7, r3
    495e:	2230      	movs	r2, #48	; 0x30
    4960:	18ba      	adds	r2, r7, r2
    4962:	8812      	ldrh	r2, [r2, #0]
    4964:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    4966:	230f      	movs	r3, #15
    4968:	18fb      	adds	r3, r7, r3
    496a:	781b      	ldrb	r3, [r3, #0]
    496c:	b25b      	sxtb	r3, r3
    496e:	4a51      	ldr	r2, [pc, #324]	; (4ab4 <Socket_ReadSocketData+0x1e0>)
    4970:	011b      	lsls	r3, r3, #4
    4972:	18d3      	adds	r3, r2, r3
    4974:	3304      	adds	r3, #4
    4976:	881b      	ldrh	r3, [r3, #0]
    4978:	b29b      	uxth	r3, r3
    497a:	221a      	movs	r2, #26
    497c:	18ba      	adds	r2, r7, r2
    497e:	8812      	ldrh	r2, [r2, #0]
    4980:	1ad3      	subs	r3, r2, r3
    4982:	b29a      	uxth	r2, r3
    4984:	2316      	movs	r3, #22
    4986:	18fb      	adds	r3, r7, r3
    4988:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    498a:	2316      	movs	r3, #22
    498c:	18fb      	adds	r3, r7, r3
    498e:	2200      	movs	r2, #0
    4990:	5e9b      	ldrsh	r3, [r3, r2]
    4992:	2b00      	cmp	r3, #0
    4994:	dd0f      	ble.n	49b6 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    4996:	2319      	movs	r3, #25
    4998:	18fb      	adds	r3, r7, r3
    499a:	2200      	movs	r2, #0
    499c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    499e:	230f      	movs	r3, #15
    49a0:	18fb      	adds	r3, r7, r3
    49a2:	2200      	movs	r2, #0
    49a4:	569a      	ldrsb	r2, [r3, r2]
    49a6:	231a      	movs	r3, #26
    49a8:	18fb      	adds	r3, r7, r3
    49aa:	4942      	ldr	r1, [pc, #264]	; (4ab4 <Socket_ReadSocketData+0x1e0>)
    49ac:	0112      	lsls	r2, r2, #4
    49ae:	188a      	adds	r2, r1, r2
    49b0:	3204      	adds	r2, #4
    49b2:	8812      	ldrh	r2, [r2, #0]
    49b4:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    49b6:	230f      	movs	r3, #15
    49b8:	18fb      	adds	r3, r7, r3
    49ba:	2200      	movs	r2, #0
    49bc:	569a      	ldrsb	r2, [r3, r2]
    49be:	4b3d      	ldr	r3, [pc, #244]	; (4ab4 <Socket_ReadSocketData+0x1e0>)
    49c0:	0112      	lsls	r2, r2, #4
    49c2:	58d1      	ldr	r1, [r2, r3]
    49c4:	2319      	movs	r3, #25
    49c6:	18fb      	adds	r3, r7, r3
    49c8:	781c      	ldrb	r4, [r3, #0]
    49ca:	231a      	movs	r3, #26
    49cc:	18fb      	adds	r3, r7, r3
    49ce:	881a      	ldrh	r2, [r3, #0]
    49d0:	69f8      	ldr	r0, [r7, #28]
    49d2:	0023      	movs	r3, r4
    49d4:	4c38      	ldr	r4, [pc, #224]	; (4ab8 <Socket_ReadSocketData+0x1e4>)
    49d6:	47a0      	blx	r4
    49d8:	1e03      	subs	r3, r0, #0
    49da:	d14f      	bne.n	4a7c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    49dc:	230f      	movs	r3, #15
    49de:	18fb      	adds	r3, r7, r3
    49e0:	2200      	movs	r2, #0
    49e2:	569a      	ldrsb	r2, [r3, r2]
    49e4:	4b33      	ldr	r3, [pc, #204]	; (4ab4 <Socket_ReadSocketData+0x1e0>)
    49e6:	0112      	lsls	r2, r2, #4
    49e8:	58d2      	ldr	r2, [r2, r3]
    49ea:	68bb      	ldr	r3, [r7, #8]
    49ec:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    49ee:	231a      	movs	r3, #26
    49f0:	18fb      	adds	r3, r7, r3
    49f2:	2200      	movs	r2, #0
    49f4:	5e9a      	ldrsh	r2, [r3, r2]
    49f6:	68bb      	ldr	r3, [r7, #8]
    49f8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    49fa:	68bb      	ldr	r3, [r7, #8]
    49fc:	88da      	ldrh	r2, [r3, #6]
    49fe:	231a      	movs	r3, #26
    4a00:	18fb      	adds	r3, r7, r3
    4a02:	881b      	ldrh	r3, [r3, #0]
    4a04:	1ad3      	subs	r3, r2, r3
    4a06:	b29a      	uxth	r2, r3
    4a08:	68bb      	ldr	r3, [r7, #8]
    4a0a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    4a0c:	4b2b      	ldr	r3, [pc, #172]	; (4abc <Socket_ReadSocketData+0x1e8>)
    4a0e:	681b      	ldr	r3, [r3, #0]
    4a10:	2b00      	cmp	r3, #0
    4a12:	d00b      	beq.n	4a2c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    4a14:	4b29      	ldr	r3, [pc, #164]	; (4abc <Socket_ReadSocketData+0x1e8>)
    4a16:	681b      	ldr	r3, [r3, #0]
    4a18:	68bc      	ldr	r4, [r7, #8]
    4a1a:	220e      	movs	r2, #14
    4a1c:	18ba      	adds	r2, r7, r2
    4a1e:	7811      	ldrb	r1, [r2, #0]
    4a20:	220f      	movs	r2, #15
    4a22:	18ba      	adds	r2, r7, r2
    4a24:	2000      	movs	r0, #0
    4a26:	5610      	ldrsb	r0, [r2, r0]
    4a28:	0022      	movs	r2, r4
    4a2a:	4798      	blx	r3

				u16ReadCount -= u16Read;
    4a2c:	2330      	movs	r3, #48	; 0x30
    4a2e:	18f9      	adds	r1, r7, r3
    4a30:	2330      	movs	r3, #48	; 0x30
    4a32:	18fa      	adds	r2, r7, r3
    4a34:	231a      	movs	r3, #26
    4a36:	18fb      	adds	r3, r7, r3
    4a38:	8812      	ldrh	r2, [r2, #0]
    4a3a:	881b      	ldrh	r3, [r3, #0]
    4a3c:	1ad3      	subs	r3, r2, r3
    4a3e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    4a40:	231a      	movs	r3, #26
    4a42:	18fb      	adds	r3, r7, r3
    4a44:	881b      	ldrh	r3, [r3, #0]
    4a46:	69fa      	ldr	r2, [r7, #28]
    4a48:	18d3      	adds	r3, r2, r3
    4a4a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    4a4c:	230f      	movs	r3, #15
    4a4e:	18fb      	adds	r3, r7, r3
    4a50:	781b      	ldrb	r3, [r3, #0]
    4a52:	b25b      	sxtb	r3, r3
    4a54:	4a17      	ldr	r2, [pc, #92]	; (4ab4 <Socket_ReadSocketData+0x1e0>)
    4a56:	011b      	lsls	r3, r3, #4
    4a58:	18d3      	adds	r3, r2, r3
    4a5a:	330a      	adds	r3, #10
    4a5c:	781b      	ldrb	r3, [r3, #0]
    4a5e:	b2db      	uxtb	r3, r3
    4a60:	2b00      	cmp	r3, #0
    4a62:	d11b      	bne.n	4a9c <Socket_ReadSocketData+0x1c8>
    4a64:	2330      	movs	r3, #48	; 0x30
    4a66:	18fb      	adds	r3, r7, r3
    4a68:	881b      	ldrh	r3, [r3, #0]
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d016      	beq.n	4a9c <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    4a6e:	2301      	movs	r3, #1
    4a70:	2200      	movs	r2, #0
    4a72:	2100      	movs	r1, #0
    4a74:	2000      	movs	r0, #0
    4a76:	4c10      	ldr	r4, [pc, #64]	; (4ab8 <Socket_ReadSocketData+0x1e4>)
    4a78:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    4a7a:	e016      	b.n	4aaa <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    4a7c:	4b10      	ldr	r3, [pc, #64]	; (4ac0 <Socket_ReadSocketData+0x1ec>)
    4a7e:	0018      	movs	r0, r3
    4a80:	4b10      	ldr	r3, [pc, #64]	; (4ac4 <Socket_ReadSocketData+0x1f0>)
    4a82:	4798      	blx	r3
    4a84:	2330      	movs	r3, #48	; 0x30
    4a86:	18fb      	adds	r3, r7, r3
    4a88:	881a      	ldrh	r2, [r3, #0]
    4a8a:	4b0f      	ldr	r3, [pc, #60]	; (4ac8 <Socket_ReadSocketData+0x1f4>)
    4a8c:	0011      	movs	r1, r2
    4a8e:	0018      	movs	r0, r3
    4a90:	4b0c      	ldr	r3, [pc, #48]	; (4ac4 <Socket_ReadSocketData+0x1f0>)
    4a92:	4798      	blx	r3
    4a94:	200d      	movs	r0, #13
    4a96:	4b0d      	ldr	r3, [pc, #52]	; (4acc <Socket_ReadSocketData+0x1f8>)
    4a98:	4798      	blx	r3
				break;
    4a9a:	e006      	b.n	4aaa <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    4a9c:	2330      	movs	r3, #48	; 0x30
    4a9e:	18fb      	adds	r3, r7, r3
    4aa0:	881b      	ldrh	r3, [r3, #0]
    4aa2:	2b00      	cmp	r3, #0
    4aa4:	d000      	beq.n	4aa8 <Socket_ReadSocketData+0x1d4>
    4aa6:	e754      	b.n	4952 <Socket_ReadSocketData+0x7e>
	}
}
    4aa8:	e7ff      	b.n	4aaa <Socket_ReadSocketData+0x1d6>
    4aaa:	46c0      	nop			; (mov r8, r8)
    4aac:	46bd      	mov	sp, r7
    4aae:	b009      	add	sp, #36	; 0x24
    4ab0:	bd90      	pop	{r4, r7, pc}
    4ab2:	46c0      	nop			; (mov r8, r8)
    4ab4:	2000033c 	.word	0x2000033c
    4ab8:	00001835 	.word	0x00001835
    4abc:	200003ec 	.word	0x200003ec
    4ac0:	0000e81c 	.word	0x0000e81c
    4ac4:	0000c461 	.word	0x0000c461
    4ac8:	0000e828 	.word	0x0000e828
    4acc:	0000c495 	.word	0x0000c495

00004ad0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    4ad0:	b590      	push	{r4, r7, lr}
    4ad2:	b0bb      	sub	sp, #236	; 0xec
    4ad4:	af02      	add	r7, sp, #8
    4ad6:	603a      	str	r2, [r7, #0]
    4ad8:	1dfb      	adds	r3, r7, #7
    4ada:	1c02      	adds	r2, r0, #0
    4adc:	701a      	strb	r2, [r3, #0]
    4ade:	1d3b      	adds	r3, r7, #4
    4ae0:	1c0a      	adds	r2, r1, #0
    4ae2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    4ae4:	1dfb      	adds	r3, r7, #7
    4ae6:	781b      	ldrb	r3, [r3, #0]
    4ae8:	2b41      	cmp	r3, #65	; 0x41
    4aea:	d003      	beq.n	4af4 <m2m_ip_cb+0x24>
    4aec:	1dfb      	adds	r3, r7, #7
    4aee:	781b      	ldrb	r3, [r3, #0]
    4af0:	2b54      	cmp	r3, #84	; 0x54
    4af2:	d120      	bne.n	4b36 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    4af4:	23cc      	movs	r3, #204	; 0xcc
    4af6:	18f9      	adds	r1, r7, r3
    4af8:	6838      	ldr	r0, [r7, #0]
    4afa:	2300      	movs	r3, #0
    4afc:	2204      	movs	r2, #4
    4afe:	4c98      	ldr	r4, [pc, #608]	; (4d60 <m2m_ip_cb+0x290>)
    4b00:	47a0      	blx	r4
    4b02:	1e03      	subs	r3, r0, #0
    4b04:	d000      	beq.n	4b08 <m2m_ip_cb+0x38>
    4b06:	e275      	b.n	4ff4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    4b08:	23cc      	movs	r3, #204	; 0xcc
    4b0a:	18fb      	adds	r3, r7, r3
    4b0c:	2201      	movs	r2, #1
    4b0e:	569a      	ldrsb	r2, [r3, r2]
    4b10:	23c8      	movs	r3, #200	; 0xc8
    4b12:	18fb      	adds	r3, r7, r3
    4b14:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4b16:	4b93      	ldr	r3, [pc, #588]	; (4d64 <m2m_ip_cb+0x294>)
    4b18:	681b      	ldr	r3, [r3, #0]
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d100      	bne.n	4b20 <m2m_ip_cb+0x50>
    4b1e:	e269      	b.n	4ff4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    4b20:	4b90      	ldr	r3, [pc, #576]	; (4d64 <m2m_ip_cb+0x294>)
    4b22:	681b      	ldr	r3, [r3, #0]
    4b24:	22cc      	movs	r2, #204	; 0xcc
    4b26:	18ba      	adds	r2, r7, r2
    4b28:	2000      	movs	r0, #0
    4b2a:	5610      	ldrsb	r0, [r2, r0]
    4b2c:	22c8      	movs	r2, #200	; 0xc8
    4b2e:	18ba      	adds	r2, r7, r2
    4b30:	2101      	movs	r1, #1
    4b32:	4798      	blx	r3
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
	{
    4b34:	e25e      	b.n	4ff4 <m2m_ip_cb+0x524>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    4b36:	1dfb      	adds	r3, r7, #7
    4b38:	781b      	ldrb	r3, [r3, #0]
    4b3a:	2b42      	cmp	r3, #66	; 0x42
    4b3c:	d120      	bne.n	4b80 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    4b3e:	23c4      	movs	r3, #196	; 0xc4
    4b40:	18f9      	adds	r1, r7, r3
    4b42:	6838      	ldr	r0, [r7, #0]
    4b44:	2300      	movs	r3, #0
    4b46:	2204      	movs	r2, #4
    4b48:	4c85      	ldr	r4, [pc, #532]	; (4d60 <m2m_ip_cb+0x290>)
    4b4a:	47a0      	blx	r4
    4b4c:	1e03      	subs	r3, r0, #0
    4b4e:	d000      	beq.n	4b52 <m2m_ip_cb+0x82>
    4b50:	e257      	b.n	5002 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    4b52:	23c4      	movs	r3, #196	; 0xc4
    4b54:	18fb      	adds	r3, r7, r3
    4b56:	2201      	movs	r2, #1
    4b58:	569a      	ldrsb	r2, [r3, r2]
    4b5a:	23c0      	movs	r3, #192	; 0xc0
    4b5c:	18fb      	adds	r3, r7, r3
    4b5e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4b60:	4b80      	ldr	r3, [pc, #512]	; (4d64 <m2m_ip_cb+0x294>)
    4b62:	681b      	ldr	r3, [r3, #0]
    4b64:	2b00      	cmp	r3, #0
    4b66:	d100      	bne.n	4b6a <m2m_ip_cb+0x9a>
    4b68:	e24b      	b.n	5002 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    4b6a:	4b7e      	ldr	r3, [pc, #504]	; (4d64 <m2m_ip_cb+0x294>)
    4b6c:	681b      	ldr	r3, [r3, #0]
    4b6e:	22c4      	movs	r2, #196	; 0xc4
    4b70:	18ba      	adds	r2, r7, r2
    4b72:	2000      	movs	r0, #0
    4b74:	5610      	ldrsb	r0, [r2, r0]
    4b76:	22c0      	movs	r2, #192	; 0xc0
    4b78:	18ba      	adds	r2, r7, r2
    4b7a:	2102      	movs	r1, #2
    4b7c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    4b7e:	e240      	b.n	5002 <m2m_ip_cb+0x532>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    4b80:	1dfb      	adds	r3, r7, #7
    4b82:	781b      	ldrb	r3, [r3, #0]
    4b84:	2b43      	cmp	r3, #67	; 0x43
    4b86:	d000      	beq.n	4b8a <m2m_ip_cb+0xba>
    4b88:	e086      	b.n	4c98 <m2m_ip_cb+0x1c8>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    4b8a:	23b4      	movs	r3, #180	; 0xb4
    4b8c:	18f9      	adds	r1, r7, r3
    4b8e:	6838      	ldr	r0, [r7, #0]
    4b90:	2300      	movs	r3, #0
    4b92:	220c      	movs	r2, #12
    4b94:	4c72      	ldr	r4, [pc, #456]	; (4d60 <m2m_ip_cb+0x290>)
    4b96:	47a0      	blx	r4
    4b98:	1e03      	subs	r3, r0, #0
    4b9a:	d000      	beq.n	4b9e <m2m_ip_cb+0xce>
    4b9c:	e231      	b.n	5002 <m2m_ip_cb+0x532>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    4b9e:	23b4      	movs	r3, #180	; 0xb4
    4ba0:	18fb      	adds	r3, r7, r3
    4ba2:	7a5b      	ldrb	r3, [r3, #9]
    4ba4:	b25b      	sxtb	r3, r3
    4ba6:	2b00      	cmp	r3, #0
    4ba8:	db4f      	blt.n	4c4a <m2m_ip_cb+0x17a>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    4baa:	23b4      	movs	r3, #180	; 0xb4
    4bac:	18fb      	adds	r3, r7, r3
    4bae:	7a5b      	ldrb	r3, [r3, #9]
    4bb0:	b25b      	sxtb	r3, r3
    4bb2:	0018      	movs	r0, r3
    4bb4:	23b4      	movs	r3, #180	; 0xb4
    4bb6:	18fb      	adds	r3, r7, r3
    4bb8:	7a1b      	ldrb	r3, [r3, #8]
    4bba:	b25b      	sxtb	r3, r3
    4bbc:	4a6a      	ldr	r2, [pc, #424]	; (4d68 <m2m_ip_cb+0x298>)
    4bbe:	011b      	lsls	r3, r3, #4
    4bc0:	18d3      	adds	r3, r2, r3
    4bc2:	330b      	adds	r3, #11
    4bc4:	781b      	ldrb	r3, [r3, #0]
    4bc6:	b2d9      	uxtb	r1, r3
    4bc8:	4a67      	ldr	r2, [pc, #412]	; (4d68 <m2m_ip_cb+0x298>)
    4bca:	0103      	lsls	r3, r0, #4
    4bcc:	18d3      	adds	r3, r2, r3
    4bce:	330b      	adds	r3, #11
    4bd0:	1c0a      	adds	r2, r1, #0
    4bd2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    4bd4:	23b4      	movs	r3, #180	; 0xb4
    4bd6:	18fb      	adds	r3, r7, r3
    4bd8:	7a5b      	ldrb	r3, [r3, #9]
    4bda:	b25b      	sxtb	r3, r3
    4bdc:	4a62      	ldr	r2, [pc, #392]	; (4d68 <m2m_ip_cb+0x298>)
    4bde:	011b      	lsls	r3, r3, #4
    4be0:	18d3      	adds	r3, r2, r3
    4be2:	330a      	adds	r3, #10
    4be4:	2201      	movs	r2, #1
    4be6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4be8:	23b4      	movs	r3, #180	; 0xb4
    4bea:	18fb      	adds	r3, r7, r3
    4bec:	7a5b      	ldrb	r3, [r3, #9]
    4bee:	b25b      	sxtb	r3, r3
    4bf0:	0018      	movs	r0, r3
    4bf2:	23b4      	movs	r3, #180	; 0xb4
    4bf4:	18fb      	adds	r3, r7, r3
    4bf6:	895b      	ldrh	r3, [r3, #10]
    4bf8:	3b08      	subs	r3, #8
    4bfa:	b299      	uxth	r1, r3
    4bfc:	4a5a      	ldr	r2, [pc, #360]	; (4d68 <m2m_ip_cb+0x298>)
    4bfe:	0103      	lsls	r3, r0, #4
    4c00:	18d3      	adds	r3, r2, r3
    4c02:	3308      	adds	r3, #8
    4c04:	1c0a      	adds	r2, r1, #0
    4c06:	801a      	strh	r2, [r3, #0]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    4c08:	4b58      	ldr	r3, [pc, #352]	; (4d6c <m2m_ip_cb+0x29c>)
    4c0a:	881b      	ldrh	r3, [r3, #0]
    4c0c:	b29b      	uxth	r3, r3
    4c0e:	3301      	adds	r3, #1
    4c10:	b29a      	uxth	r2, r3
    4c12:	4b56      	ldr	r3, [pc, #344]	; (4d6c <m2m_ip_cb+0x29c>)
    4c14:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    4c16:	4b55      	ldr	r3, [pc, #340]	; (4d6c <m2m_ip_cb+0x29c>)
    4c18:	881b      	ldrh	r3, [r3, #0]
    4c1a:	b29b      	uxth	r3, r3
    4c1c:	2b00      	cmp	r3, #0
    4c1e:	d106      	bne.n	4c2e <m2m_ip_cb+0x15e>
					++gu16SessionID;
    4c20:	4b52      	ldr	r3, [pc, #328]	; (4d6c <m2m_ip_cb+0x29c>)
    4c22:	881b      	ldrh	r3, [r3, #0]
    4c24:	b29b      	uxth	r3, r3
    4c26:	3301      	adds	r3, #1
    4c28:	b29a      	uxth	r2, r3
    4c2a:	4b50      	ldr	r3, [pc, #320]	; (4d6c <m2m_ip_cb+0x29c>)
    4c2c:	801a      	strh	r2, [r3, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    4c2e:	23b4      	movs	r3, #180	; 0xb4
    4c30:	18fb      	adds	r3, r7, r3
    4c32:	7a5b      	ldrb	r3, [r3, #9]
    4c34:	b25b      	sxtb	r3, r3
    4c36:	0018      	movs	r0, r3
    4c38:	4b4c      	ldr	r3, [pc, #304]	; (4d6c <m2m_ip_cb+0x29c>)
    4c3a:	881b      	ldrh	r3, [r3, #0]
    4c3c:	b299      	uxth	r1, r3
    4c3e:	4a4a      	ldr	r2, [pc, #296]	; (4d68 <m2m_ip_cb+0x298>)
    4c40:	0103      	lsls	r3, r0, #4
    4c42:	18d3      	adds	r3, r2, r3
    4c44:	3306      	adds	r3, #6
    4c46:	1c0a      	adds	r2, r1, #0
    4c48:	801a      	strh	r2, [r3, #0]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    4c4a:	23b4      	movs	r3, #180	; 0xb4
    4c4c:	18fb      	adds	r3, r7, r3
    4c4e:	2209      	movs	r2, #9
    4c50:	569a      	ldrsb	r2, [r3, r2]
    4c52:	23a0      	movs	r3, #160	; 0xa0
    4c54:	18fb      	adds	r3, r7, r3
    4c56:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    4c58:	23a0      	movs	r3, #160	; 0xa0
    4c5a:	18fb      	adds	r3, r7, r3
    4c5c:	2202      	movs	r2, #2
    4c5e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    4c60:	23b4      	movs	r3, #180	; 0xb4
    4c62:	18fb      	adds	r3, r7, r3
    4c64:	885a      	ldrh	r2, [r3, #2]
    4c66:	23a0      	movs	r3, #160	; 0xa0
    4c68:	18fb      	adds	r3, r7, r3
    4c6a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    4c6c:	23b4      	movs	r3, #180	; 0xb4
    4c6e:	18fb      	adds	r3, r7, r3
    4c70:	685a      	ldr	r2, [r3, #4]
    4c72:	23a0      	movs	r3, #160	; 0xa0
    4c74:	18fb      	adds	r3, r7, r3
    4c76:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    4c78:	4b3a      	ldr	r3, [pc, #232]	; (4d64 <m2m_ip_cb+0x294>)
    4c7a:	681b      	ldr	r3, [r3, #0]
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d100      	bne.n	4c82 <m2m_ip_cb+0x1b2>
    4c80:	e1bf      	b.n	5002 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    4c82:	4b38      	ldr	r3, [pc, #224]	; (4d64 <m2m_ip_cb+0x294>)
    4c84:	681b      	ldr	r3, [r3, #0]
    4c86:	22b4      	movs	r2, #180	; 0xb4
    4c88:	18ba      	adds	r2, r7, r2
    4c8a:	2008      	movs	r0, #8
    4c8c:	5610      	ldrsb	r0, [r2, r0]
    4c8e:	22a0      	movs	r2, #160	; 0xa0
    4c90:	18ba      	adds	r2, r7, r2
    4c92:	2104      	movs	r1, #4
    4c94:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    4c96:	e1b4      	b.n	5002 <m2m_ip_cb+0x532>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    4c98:	1dfb      	adds	r3, r7, #7
    4c9a:	781b      	ldrb	r3, [r3, #0]
    4c9c:	2b44      	cmp	r3, #68	; 0x44
    4c9e:	d003      	beq.n	4ca8 <m2m_ip_cb+0x1d8>
    4ca0:	1dfb      	adds	r3, r7, #7
    4ca2:	781b      	ldrb	r3, [r3, #0]
    4ca4:	2b4b      	cmp	r3, #75	; 0x4b
    4ca6:	d13d      	bne.n	4d24 <m2m_ip_cb+0x254>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    4ca8:	239c      	movs	r3, #156	; 0x9c
    4caa:	18f9      	adds	r1, r7, r3
    4cac:	6838      	ldr	r0, [r7, #0]
    4cae:	2300      	movs	r3, #0
    4cb0:	2204      	movs	r2, #4
    4cb2:	4c2b      	ldr	r4, [pc, #172]	; (4d60 <m2m_ip_cb+0x290>)
    4cb4:	47a0      	blx	r4
    4cb6:	1e03      	subs	r3, r0, #0
    4cb8:	d000      	beq.n	4cbc <m2m_ip_cb+0x1ec>
    4cba:	e19d      	b.n	4ff8 <m2m_ip_cb+0x528>
		{
			strConnMsg.sock		= strConnectReply.sock;
    4cbc:	239c      	movs	r3, #156	; 0x9c
    4cbe:	18fb      	adds	r3, r7, r3
    4cc0:	2200      	movs	r2, #0
    4cc2:	569a      	ldrsb	r2, [r3, r2]
    4cc4:	2398      	movs	r3, #152	; 0x98
    4cc6:	18fb      	adds	r3, r7, r3
    4cc8:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    4cca:	239c      	movs	r3, #156	; 0x9c
    4ccc:	18fb      	adds	r3, r7, r3
    4cce:	2201      	movs	r2, #1
    4cd0:	569a      	ldrsb	r2, [r3, r2]
    4cd2:	2398      	movs	r3, #152	; 0x98
    4cd4:	18fb      	adds	r3, r7, r3
    4cd6:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    4cd8:	239c      	movs	r3, #156	; 0x9c
    4cda:	18fb      	adds	r3, r7, r3
    4cdc:	785b      	ldrb	r3, [r3, #1]
    4cde:	b25b      	sxtb	r3, r3
    4ce0:	2b00      	cmp	r3, #0
    4ce2:	d10f      	bne.n	4d04 <m2m_ip_cb+0x234>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4ce4:	239c      	movs	r3, #156	; 0x9c
    4ce6:	18fb      	adds	r3, r7, r3
    4ce8:	781b      	ldrb	r3, [r3, #0]
    4cea:	b25b      	sxtb	r3, r3
    4cec:	0018      	movs	r0, r3
    4cee:	239c      	movs	r3, #156	; 0x9c
    4cf0:	18fb      	adds	r3, r7, r3
    4cf2:	885b      	ldrh	r3, [r3, #2]
    4cf4:	3b08      	subs	r3, #8
    4cf6:	b299      	uxth	r1, r3
    4cf8:	4a1b      	ldr	r2, [pc, #108]	; (4d68 <m2m_ip_cb+0x298>)
    4cfa:	0103      	lsls	r3, r0, #4
    4cfc:	18d3      	adds	r3, r2, r3
    4cfe:	3308      	adds	r3, #8
    4d00:	1c0a      	adds	r2, r1, #0
    4d02:	801a      	strh	r2, [r3, #0]
			}
			if(gpfAppSocketCb)
    4d04:	4b17      	ldr	r3, [pc, #92]	; (4d64 <m2m_ip_cb+0x294>)
    4d06:	681b      	ldr	r3, [r3, #0]
    4d08:	2b00      	cmp	r3, #0
    4d0a:	d100      	bne.n	4d0e <m2m_ip_cb+0x23e>
    4d0c:	e174      	b.n	4ff8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    4d0e:	4b15      	ldr	r3, [pc, #84]	; (4d64 <m2m_ip_cb+0x294>)
    4d10:	681b      	ldr	r3, [r3, #0]
    4d12:	229c      	movs	r2, #156	; 0x9c
    4d14:	18ba      	adds	r2, r7, r2
    4d16:	2000      	movs	r0, #0
    4d18:	5610      	ldrsb	r0, [r2, r0]
    4d1a:	2298      	movs	r2, #152	; 0x98
    4d1c:	18ba      	adds	r2, r7, r2
    4d1e:	2105      	movs	r1, #5
    4d20:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    4d22:	e169      	b.n	4ff8 <m2m_ip_cb+0x528>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    4d24:	1dfb      	adds	r3, r7, #7
    4d26:	781b      	ldrb	r3, [r3, #0]
    4d28:	2b4a      	cmp	r3, #74	; 0x4a
    4d2a:	d123      	bne.n	4d74 <m2m_ip_cb+0x2a4>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    4d2c:	230c      	movs	r3, #12
    4d2e:	18f9      	adds	r1, r7, r3
    4d30:	6838      	ldr	r0, [r7, #0]
    4d32:	2300      	movs	r3, #0
    4d34:	2244      	movs	r2, #68	; 0x44
    4d36:	4c0a      	ldr	r4, [pc, #40]	; (4d60 <m2m_ip_cb+0x290>)
    4d38:	47a0      	blx	r4
    4d3a:	1e03      	subs	r3, r0, #0
    4d3c:	d000      	beq.n	4d40 <m2m_ip_cb+0x270>
    4d3e:	e160      	b.n	5002 <m2m_ip_cb+0x532>
		{
			if(gpfAppResolveCb)
    4d40:	4b0b      	ldr	r3, [pc, #44]	; (4d70 <m2m_ip_cb+0x2a0>)
    4d42:	681b      	ldr	r3, [r3, #0]
    4d44:	2b00      	cmp	r3, #0
    4d46:	d100      	bne.n	4d4a <m2m_ip_cb+0x27a>
    4d48:	e15b      	b.n	5002 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    4d4a:	4b09      	ldr	r3, [pc, #36]	; (4d70 <m2m_ip_cb+0x2a0>)
    4d4c:	681a      	ldr	r2, [r3, #0]
    4d4e:	230c      	movs	r3, #12
    4d50:	18fb      	adds	r3, r7, r3
    4d52:	6c19      	ldr	r1, [r3, #64]	; 0x40
    4d54:	230c      	movs	r3, #12
    4d56:	18fb      	adds	r3, r7, r3
    4d58:	0018      	movs	r0, r3
    4d5a:	4790      	blx	r2
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    4d5c:	e151      	b.n	5002 <m2m_ip_cb+0x532>
    4d5e:	46c0      	nop			; (mov r8, r8)
    4d60:	00001835 	.word	0x00001835
    4d64:	200003ec 	.word	0x200003ec
    4d68:	2000033c 	.word	0x2000033c
    4d6c:	200000b2 	.word	0x200000b2
    4d70:	200003f4 	.word	0x200003f4
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    4d74:	1dfb      	adds	r3, r7, #7
    4d76:	781b      	ldrb	r3, [r3, #0]
    4d78:	2b46      	cmp	r3, #70	; 0x46
    4d7a:	d008      	beq.n	4d8e <m2m_ip_cb+0x2be>
    4d7c:	1dfb      	adds	r3, r7, #7
    4d7e:	781b      	ldrb	r3, [r3, #0]
    4d80:	2b48      	cmp	r3, #72	; 0x48
    4d82:	d004      	beq.n	4d8e <m2m_ip_cb+0x2be>
    4d84:	1dfb      	adds	r3, r7, #7
    4d86:	781b      	ldrb	r3, [r3, #0]
    4d88:	2b4d      	cmp	r3, #77	; 0x4d
    4d8a:	d000      	beq.n	4d8e <m2m_ip_cb+0x2be>
    4d8c:	e0b4      	b.n	4ef8 <m2m_ip_cb+0x428>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    4d8e:	23df      	movs	r3, #223	; 0xdf
    4d90:	18fb      	adds	r3, r7, r3
    4d92:	2206      	movs	r2, #6
    4d94:	701a      	strb	r2, [r3, #0]
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
    4d96:	1dfb      	adds	r3, r7, #7
    4d98:	781b      	ldrb	r3, [r3, #0]
    4d9a:	2b48      	cmp	r3, #72	; 0x48
    4d9c:	d103      	bne.n	4da6 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    4d9e:	23df      	movs	r3, #223	; 0xdf
    4da0:	18fb      	adds	r3, r7, r3
    4da2:	2209      	movs	r2, #9
    4da4:	701a      	strb	r2, [r3, #0]

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
    4da6:	23d8      	movs	r3, #216	; 0xd8
    4da8:	18fb      	adds	r3, r7, r3
    4daa:	2210      	movs	r2, #16
    4dac:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    4dae:	23d8      	movs	r3, #216	; 0xd8
    4db0:	18fb      	adds	r3, r7, r3
    4db2:	881a      	ldrh	r2, [r3, #0]
    4db4:	2388      	movs	r3, #136	; 0x88
    4db6:	18f9      	adds	r1, r7, r3
    4db8:	6838      	ldr	r0, [r7, #0]
    4dba:	2300      	movs	r3, #0
    4dbc:	4c93      	ldr	r4, [pc, #588]	; (500c <m2m_ip_cb+0x53c>)
    4dbe:	47a0      	blx	r4
    4dc0:	1e03      	subs	r3, r0, #0
    4dc2:	d000      	beq.n	4dc6 <m2m_ip_cb+0x2f6>
    4dc4:	e11a      	b.n	4ffc <m2m_ip_cb+0x52c>
		{
			uint16 u16SessionID = 0;
    4dc6:	23d6      	movs	r3, #214	; 0xd6
    4dc8:	18fb      	adds	r3, r7, r3
    4dca:	2200      	movs	r2, #0
    4dcc:	801a      	strh	r2, [r3, #0]

			sock			= strRecvReply.sock;
    4dce:	23d5      	movs	r3, #213	; 0xd5
    4dd0:	18fb      	adds	r3, r7, r3
    4dd2:	2288      	movs	r2, #136	; 0x88
    4dd4:	18ba      	adds	r2, r7, r2
    4dd6:	7b12      	ldrb	r2, [r2, #12]
    4dd8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    4dda:	23d6      	movs	r3, #214	; 0xd6
    4ddc:	18fb      	adds	r3, r7, r3
    4dde:	2288      	movs	r2, #136	; 0x88
    4de0:	18ba      	adds	r2, r7, r2
    4de2:	89d2      	ldrh	r2, [r2, #14]
    4de4:	801a      	strh	r2, [r3, #0]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    4de6:	23d5      	movs	r3, #213	; 0xd5
    4de8:	18fb      	adds	r3, r7, r3
    4dea:	781b      	ldrb	r3, [r3, #0]
    4dec:	b25b      	sxtb	r3, r3
    4dee:	4a88      	ldr	r2, [pc, #544]	; (5010 <m2m_ip_cb+0x540>)
    4df0:	011b      	lsls	r3, r3, #4
    4df2:	18d3      	adds	r3, r2, r3
    4df4:	330c      	adds	r3, #12
    4df6:	2200      	movs	r2, #0
    4df8:	701a      	strb	r2, [r3, #0]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    4dfa:	23d2      	movs	r3, #210	; 0xd2
    4dfc:	18fb      	adds	r3, r7, r3
    4dfe:	2288      	movs	r2, #136	; 0x88
    4e00:	18ba      	adds	r2, r7, r2
    4e02:	8912      	ldrh	r2, [r2, #8]
    4e04:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    4e06:	23d0      	movs	r3, #208	; 0xd0
    4e08:	18fb      	adds	r3, r7, r3
    4e0a:	2288      	movs	r2, #136	; 0x88
    4e0c:	18ba      	adds	r2, r7, r2
    4e0e:	8952      	ldrh	r2, [r2, #10]
    4e10:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    4e12:	2388      	movs	r3, #136	; 0x88
    4e14:	18fb      	adds	r3, r7, r3
    4e16:	885a      	ldrh	r2, [r3, #2]
    4e18:	2370      	movs	r3, #112	; 0x70
    4e1a:	18fb      	adds	r3, r7, r3
    4e1c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    4e1e:	2388      	movs	r3, #136	; 0x88
    4e20:	18fb      	adds	r3, r7, r3
    4e22:	685a      	ldr	r2, [r3, #4]
    4e24:	2370      	movs	r3, #112	; 0x70
    4e26:	18fb      	adds	r3, r7, r3
    4e28:	60da      	str	r2, [r3, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4e2a:	23d5      	movs	r3, #213	; 0xd5
    4e2c:	18fb      	adds	r3, r7, r3
    4e2e:	781b      	ldrb	r3, [r3, #0]
    4e30:	b25b      	sxtb	r3, r3
    4e32:	4a77      	ldr	r2, [pc, #476]	; (5010 <m2m_ip_cb+0x540>)
    4e34:	011b      	lsls	r3, r3, #4
    4e36:	18d3      	adds	r3, r2, r3
    4e38:	3306      	adds	r3, #6
    4e3a:	881b      	ldrh	r3, [r3, #0]
    4e3c:	b29b      	uxth	r3, r3
    4e3e:	22d6      	movs	r2, #214	; 0xd6
    4e40:	18ba      	adds	r2, r7, r2
    4e42:	8812      	ldrh	r2, [r2, #0]
    4e44:	429a      	cmp	r2, r3
    4e46:	d148      	bne.n	4eda <m2m_ip_cb+0x40a>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    4e48:	23d2      	movs	r3, #210	; 0xd2
    4e4a:	18fb      	adds	r3, r7, r3
    4e4c:	2200      	movs	r2, #0
    4e4e:	5e9b      	ldrsh	r3, [r3, r2]
    4e50:	2b00      	cmp	r3, #0
    4e52:	dd25      	ble.n	4ea0 <m2m_ip_cb+0x3d0>
    4e54:	23d2      	movs	r3, #210	; 0xd2
    4e56:	18fb      	adds	r3, r7, r3
    4e58:	2200      	movs	r2, #0
    4e5a:	5e9a      	ldrsh	r2, [r3, r2]
    4e5c:	1d3b      	adds	r3, r7, #4
    4e5e:	881b      	ldrh	r3, [r3, #0]
    4e60:	429a      	cmp	r2, r3
    4e62:	da1d      	bge.n	4ea0 <m2m_ip_cb+0x3d0>
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
    4e64:	23d0      	movs	r3, #208	; 0xd0
    4e66:	18fb      	adds	r3, r7, r3
    4e68:	881b      	ldrh	r3, [r3, #0]
    4e6a:	683a      	ldr	r2, [r7, #0]
    4e6c:	18d3      	adds	r3, r2, r3
    4e6e:	603b      	str	r3, [r7, #0]

					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
    4e70:	23d8      	movs	r3, #216	; 0xd8
    4e72:	18fb      	adds	r3, r7, r3
    4e74:	22d2      	movs	r2, #210	; 0xd2
    4e76:	18ba      	adds	r2, r7, r2
    4e78:	8812      	ldrh	r2, [r2, #0]
    4e7a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    4e7c:	683c      	ldr	r4, [r7, #0]
    4e7e:	23df      	movs	r3, #223	; 0xdf
    4e80:	18fb      	adds	r3, r7, r3
    4e82:	781a      	ldrb	r2, [r3, #0]
    4e84:	2370      	movs	r3, #112	; 0x70
    4e86:	18f9      	adds	r1, r7, r3
    4e88:	23d5      	movs	r3, #213	; 0xd5
    4e8a:	18fb      	adds	r3, r7, r3
    4e8c:	2000      	movs	r0, #0
    4e8e:	5618      	ldrsb	r0, [r3, r0]
    4e90:	23d8      	movs	r3, #216	; 0xd8
    4e92:	18fb      	adds	r3, r7, r3
    4e94:	881b      	ldrh	r3, [r3, #0]
    4e96:	9300      	str	r3, [sp, #0]
    4e98:	0023      	movs	r3, r4
    4e9a:	4c5e      	ldr	r4, [pc, #376]	; (5014 <m2m_ip_cb+0x544>)
    4e9c:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    4e9e:	e0ad      	b.n	4ffc <m2m_ip_cb+0x52c>
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    4ea0:	2370      	movs	r3, #112	; 0x70
    4ea2:	18fb      	adds	r3, r7, r3
    4ea4:	22d2      	movs	r2, #210	; 0xd2
    4ea6:	18ba      	adds	r2, r7, r2
    4ea8:	8812      	ldrh	r2, [r2, #0]
    4eaa:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    4eac:	2370      	movs	r3, #112	; 0x70
    4eae:	18fb      	adds	r3, r7, r3
    4eb0:	2200      	movs	r2, #0
    4eb2:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    4eb4:	4b58      	ldr	r3, [pc, #352]	; (5018 <m2m_ip_cb+0x548>)
    4eb6:	681b      	ldr	r3, [r3, #0]
    4eb8:	2b00      	cmp	r3, #0
    4eba:	d100      	bne.n	4ebe <m2m_ip_cb+0x3ee>
    4ebc:	e09e      	b.n	4ffc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    4ebe:	4b56      	ldr	r3, [pc, #344]	; (5018 <m2m_ip_cb+0x548>)
    4ec0:	681b      	ldr	r3, [r3, #0]
    4ec2:	2270      	movs	r2, #112	; 0x70
    4ec4:	18bc      	adds	r4, r7, r2
    4ec6:	22df      	movs	r2, #223	; 0xdf
    4ec8:	18ba      	adds	r2, r7, r2
    4eca:	7811      	ldrb	r1, [r2, #0]
    4ecc:	22d5      	movs	r2, #213	; 0xd5
    4ece:	18ba      	adds	r2, r7, r2
    4ed0:	2000      	movs	r0, #0
    4ed2:	5610      	ldrsb	r0, [r2, r0]
    4ed4:	0022      	movs	r2, r4
    4ed6:	4798      	blx	r3
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    4ed8:	e090      	b.n	4ffc <m2m_ip_cb+0x52c>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    4eda:	23d8      	movs	r3, #216	; 0xd8
    4edc:	18fa      	adds	r2, r7, r3
    4ede:	1d3b      	adds	r3, r7, #4
    4ee0:	8812      	ldrh	r2, [r2, #0]
    4ee2:	881b      	ldrh	r3, [r3, #0]
    4ee4:	429a      	cmp	r2, r3
    4ee6:	d300      	bcc.n	4eea <m2m_ip_cb+0x41a>
    4ee8:	e088      	b.n	4ffc <m2m_ip_cb+0x52c>
				{
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    4eea:	2301      	movs	r3, #1
    4eec:	2200      	movs	r2, #0
    4eee:	2100      	movs	r1, #0
    4ef0:	2000      	movs	r0, #0
    4ef2:	4c46      	ldr	r4, [pc, #280]	; (500c <m2m_ip_cb+0x53c>)
    4ef4:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    4ef6:	e081      	b.n	4ffc <m2m_ip_cb+0x52c>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    4ef8:	1dfb      	adds	r3, r7, #7
    4efa:	781b      	ldrb	r3, [r3, #0]
    4efc:	2b45      	cmp	r3, #69	; 0x45
    4efe:	d007      	beq.n	4f10 <m2m_ip_cb+0x440>
    4f00:	1dfb      	adds	r3, r7, #7
    4f02:	781b      	ldrb	r3, [r3, #0]
    4f04:	2b47      	cmp	r3, #71	; 0x47
    4f06:	d003      	beq.n	4f10 <m2m_ip_cb+0x440>
    4f08:	1dfb      	adds	r3, r7, #7
    4f0a:	781b      	ldrb	r3, [r3, #0]
    4f0c:	2b4c      	cmp	r3, #76	; 0x4c
    4f0e:	d14c      	bne.n	4faa <m2m_ip_cb+0x4da>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    4f10:	23de      	movs	r3, #222	; 0xde
    4f12:	18fb      	adds	r3, r7, r3
    4f14:	2207      	movs	r2, #7
    4f16:	701a      	strb	r2, [r3, #0]

		if(u8OpCode == SOCKET_CMD_SENDTO)
    4f18:	1dfb      	adds	r3, r7, #7
    4f1a:	781b      	ldrb	r3, [r3, #0]
    4f1c:	2b47      	cmp	r3, #71	; 0x47
    4f1e:	d103      	bne.n	4f28 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    4f20:	23de      	movs	r3, #222	; 0xde
    4f22:	18fb      	adds	r3, r7, r3
    4f24:	2208      	movs	r2, #8
    4f26:	701a      	strb	r2, [r3, #0]

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    4f28:	2364      	movs	r3, #100	; 0x64
    4f2a:	18f9      	adds	r1, r7, r3
    4f2c:	6838      	ldr	r0, [r7, #0]
    4f2e:	2300      	movs	r3, #0
    4f30:	2208      	movs	r2, #8
    4f32:	4c36      	ldr	r4, [pc, #216]	; (500c <m2m_ip_cb+0x53c>)
    4f34:	47a0      	blx	r4
    4f36:	1e03      	subs	r3, r0, #0
    4f38:	d162      	bne.n	5000 <m2m_ip_cb+0x530>
		{
			uint16 u16SessionID = 0;
    4f3a:	23dc      	movs	r3, #220	; 0xdc
    4f3c:	18fb      	adds	r3, r7, r3
    4f3e:	2200      	movs	r2, #0
    4f40:	801a      	strh	r2, [r3, #0]
			
			sock = strReply.sock;
    4f42:	23db      	movs	r3, #219	; 0xdb
    4f44:	18fb      	adds	r3, r7, r3
    4f46:	2264      	movs	r2, #100	; 0x64
    4f48:	18ba      	adds	r2, r7, r2
    4f4a:	7812      	ldrb	r2, [r2, #0]
    4f4c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    4f4e:	23dc      	movs	r3, #220	; 0xdc
    4f50:	18fb      	adds	r3, r7, r3
    4f52:	2264      	movs	r2, #100	; 0x64
    4f54:	18ba      	adds	r2, r7, r2
    4f56:	8892      	ldrh	r2, [r2, #4]
    4f58:	801a      	strh	r2, [r3, #0]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    4f5a:	2364      	movs	r3, #100	; 0x64
    4f5c:	18fb      	adds	r3, r7, r3
    4f5e:	2202      	movs	r2, #2
    4f60:	5e9a      	ldrsh	r2, [r3, r2]
    4f62:	236e      	movs	r3, #110	; 0x6e
    4f64:	18fb      	adds	r3, r7, r3
    4f66:	801a      	strh	r2, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4f68:	23db      	movs	r3, #219	; 0xdb
    4f6a:	18fb      	adds	r3, r7, r3
    4f6c:	781b      	ldrb	r3, [r3, #0]
    4f6e:	b25b      	sxtb	r3, r3
    4f70:	4a27      	ldr	r2, [pc, #156]	; (5010 <m2m_ip_cb+0x540>)
    4f72:	011b      	lsls	r3, r3, #4
    4f74:	18d3      	adds	r3, r2, r3
    4f76:	3306      	adds	r3, #6
    4f78:	881b      	ldrh	r3, [r3, #0]
    4f7a:	b29b      	uxth	r3, r3
    4f7c:	22dc      	movs	r2, #220	; 0xdc
    4f7e:	18ba      	adds	r2, r7, r2
    4f80:	8812      	ldrh	r2, [r2, #0]
    4f82:	429a      	cmp	r2, r3
    4f84:	d13c      	bne.n	5000 <m2m_ip_cb+0x530>
			{
				if(gpfAppSocketCb)
    4f86:	4b24      	ldr	r3, [pc, #144]	; (5018 <m2m_ip_cb+0x548>)
    4f88:	681b      	ldr	r3, [r3, #0]
    4f8a:	2b00      	cmp	r3, #0
    4f8c:	d038      	beq.n	5000 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    4f8e:	4b22      	ldr	r3, [pc, #136]	; (5018 <m2m_ip_cb+0x548>)
    4f90:	681b      	ldr	r3, [r3, #0]
    4f92:	226e      	movs	r2, #110	; 0x6e
    4f94:	18bc      	adds	r4, r7, r2
    4f96:	22de      	movs	r2, #222	; 0xde
    4f98:	18ba      	adds	r2, r7, r2
    4f9a:	7811      	ldrb	r1, [r2, #0]
    4f9c:	22db      	movs	r2, #219	; 0xdb
    4f9e:	18ba      	adds	r2, r7, r2
    4fa0:	2000      	movs	r0, #0
    4fa2:	5610      	ldrsb	r0, [r2, r0]
    4fa4:	0022      	movs	r2, r4
    4fa6:	4798      	blx	r3
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    4fa8:	e02a      	b.n	5000 <m2m_ip_cb+0x530>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    4faa:	1dfb      	adds	r3, r7, #7
    4fac:	781b      	ldrb	r3, [r3, #0]
    4fae:	2b52      	cmp	r3, #82	; 0x52
    4fb0:	d127      	bne.n	5002 <m2m_ip_cb+0x532>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    4fb2:	2350      	movs	r3, #80	; 0x50
    4fb4:	18f9      	adds	r1, r7, r3
    4fb6:	6838      	ldr	r0, [r7, #0]
    4fb8:	2301      	movs	r3, #1
    4fba:	2214      	movs	r2, #20
    4fbc:	4c13      	ldr	r4, [pc, #76]	; (500c <m2m_ip_cb+0x53c>)
    4fbe:	47a0      	blx	r4
    4fc0:	1e03      	subs	r3, r0, #0
    4fc2:	d11e      	bne.n	5002 <m2m_ip_cb+0x532>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    4fc4:	2350      	movs	r3, #80	; 0x50
    4fc6:	18fb      	adds	r3, r7, r3
    4fc8:	685b      	ldr	r3, [r3, #4]
    4fca:	001a      	movs	r2, r3
    4fcc:	4b13      	ldr	r3, [pc, #76]	; (501c <m2m_ip_cb+0x54c>)
    4fce:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    4fd0:	4b12      	ldr	r3, [pc, #72]	; (501c <m2m_ip_cb+0x54c>)
    4fd2:	681b      	ldr	r3, [r3, #0]
    4fd4:	2b00      	cmp	r3, #0
    4fd6:	d014      	beq.n	5002 <m2m_ip_cb+0x532>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    4fd8:	4b10      	ldr	r3, [pc, #64]	; (501c <m2m_ip_cb+0x54c>)
    4fda:	681c      	ldr	r4, [r3, #0]
    4fdc:	2350      	movs	r3, #80	; 0x50
    4fde:	18fb      	adds	r3, r7, r3
    4fe0:	6818      	ldr	r0, [r3, #0]
    4fe2:	2350      	movs	r3, #80	; 0x50
    4fe4:	18fb      	adds	r3, r7, r3
    4fe6:	6899      	ldr	r1, [r3, #8]
    4fe8:	2350      	movs	r3, #80	; 0x50
    4fea:	18fb      	adds	r3, r7, r3
    4fec:	7c1b      	ldrb	r3, [r3, #16]
    4fee:	001a      	movs	r2, r3
    4ff0:	47a0      	blx	r4
			}
		}
	}
}
    4ff2:	e006      	b.n	5002 <m2m_ip_cb+0x532>
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
	{
    4ff4:	46c0      	nop			; (mov r8, r8)
    4ff6:	e004      	b.n	5002 <m2m_ip_cb+0x532>
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    4ff8:	46c0      	nop			; (mov r8, r8)
    4ffa:	e002      	b.n	5002 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    4ffc:	46c0      	nop			; (mov r8, r8)
    4ffe:	e000      	b.n	5002 <m2m_ip_cb+0x532>
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    5000:	46c0      	nop			; (mov r8, r8)
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    5002:	46c0      	nop			; (mov r8, r8)
    5004:	46bd      	mov	sp, r7
    5006:	b039      	add	sp, #228	; 0xe4
    5008:	bd90      	pop	{r4, r7, pc}
    500a:	46c0      	nop			; (mov r8, r8)
    500c:	00001835 	.word	0x00001835
    5010:	2000033c 	.word	0x2000033c
    5014:	000048d5 	.word	0x000048d5
    5018:	200003ec 	.word	0x200003ec
    501c:	200003f0 	.word	0x200003f0

00005020 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    5020:	b580      	push	{r7, lr}
    5022:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    5024:	4b0c      	ldr	r3, [pc, #48]	; (5058 <socketInit+0x38>)
    5026:	781b      	ldrb	r3, [r3, #0]
    5028:	b2db      	uxtb	r3, r3
    502a:	2b00      	cmp	r3, #0
    502c:	d110      	bne.n	5050 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    502e:	4b0b      	ldr	r3, [pc, #44]	; (505c <socketInit+0x3c>)
    5030:	22b0      	movs	r2, #176	; 0xb0
    5032:	2100      	movs	r1, #0
    5034:	0018      	movs	r0, r3
    5036:	4b0a      	ldr	r3, [pc, #40]	; (5060 <socketInit+0x40>)
    5038:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    503a:	4b0a      	ldr	r3, [pc, #40]	; (5064 <socketInit+0x44>)
    503c:	0019      	movs	r1, r3
    503e:	2002      	movs	r0, #2
    5040:	4b09      	ldr	r3, [pc, #36]	; (5068 <socketInit+0x48>)
    5042:	4798      	blx	r3
		gbSocketInit	= 1;
    5044:	4b04      	ldr	r3, [pc, #16]	; (5058 <socketInit+0x38>)
    5046:	2201      	movs	r2, #1
    5048:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    504a:	4b08      	ldr	r3, [pc, #32]	; (506c <socketInit+0x4c>)
    504c:	2200      	movs	r2, #0
    504e:	801a      	strh	r2, [r3, #0]
	}
}
    5050:	46c0      	nop			; (mov r8, r8)
    5052:	46bd      	mov	sp, r7
    5054:	bd80      	pop	{r7, pc}
    5056:	46c0      	nop			; (mov r8, r8)
    5058:	200000b4 	.word	0x200000b4
    505c:	2000033c 	.word	0x2000033c
    5060:	00000ce1 	.word	0x00000ce1
    5064:	00004ad1 	.word	0x00004ad1
    5068:	000019b5 	.word	0x000019b5
    506c:	200000b2 	.word	0x200000b2

00005070 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    5070:	b580      	push	{r7, lr}
    5072:	b082      	sub	sp, #8
    5074:	af00      	add	r7, sp, #0
    5076:	6078      	str	r0, [r7, #4]
    5078:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    507a:	4b05      	ldr	r3, [pc, #20]	; (5090 <registerSocketCallback+0x20>)
    507c:	687a      	ldr	r2, [r7, #4]
    507e:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    5080:	4b04      	ldr	r3, [pc, #16]	; (5094 <registerSocketCallback+0x24>)
    5082:	683a      	ldr	r2, [r7, #0]
    5084:	601a      	str	r2, [r3, #0]
}
    5086:	46c0      	nop			; (mov r8, r8)
    5088:	46bd      	mov	sp, r7
    508a:	b002      	add	sp, #8
    508c:	bd80      	pop	{r7, pc}
    508e:	46c0      	nop			; (mov r8, r8)
    5090:	200003ec 	.word	0x200003ec
    5094:	200003f4 	.word	0x200003f4

00005098 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    5098:	b590      	push	{r4, r7, lr}
    509a:	b08d      	sub	sp, #52	; 0x34
    509c:	af04      	add	r7, sp, #16
    509e:	0004      	movs	r4, r0
    50a0:	0008      	movs	r0, r1
    50a2:	0011      	movs	r1, r2
    50a4:	1dbb      	adds	r3, r7, #6
    50a6:	1c22      	adds	r2, r4, #0
    50a8:	801a      	strh	r2, [r3, #0]
    50aa:	1d7b      	adds	r3, r7, #5
    50ac:	1c02      	adds	r2, r0, #0
    50ae:	701a      	strb	r2, [r3, #0]
    50b0:	1d3b      	adds	r3, r7, #4
    50b2:	1c0a      	adds	r2, r1, #0
    50b4:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    50b6:	231f      	movs	r3, #31
    50b8:	18fb      	adds	r3, r7, r3
    50ba:	22ff      	movs	r2, #255	; 0xff
    50bc:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    50be:	1dbb      	adds	r3, r7, #6
    50c0:	881b      	ldrh	r3, [r3, #0]
    50c2:	2b02      	cmp	r3, #2
    50c4:	d000      	beq.n	50c8 <socket+0x30>
    50c6:	e0cd      	b.n	5264 <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    50c8:	1d7b      	adds	r3, r7, #5
    50ca:	781b      	ldrb	r3, [r3, #0]
    50cc:	2b01      	cmp	r3, #1
    50ce:	d135      	bne.n	513c <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    50d0:	231e      	movs	r3, #30
    50d2:	18fb      	adds	r3, r7, r3
    50d4:	2200      	movs	r2, #0
    50d6:	701a      	strb	r2, [r3, #0]
    50d8:	e02a      	b.n	5130 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    50da:	2317      	movs	r3, #23
    50dc:	18fb      	adds	r3, r7, r3
    50de:	4a65      	ldr	r2, [pc, #404]	; (5274 <socket+0x1dc>)
    50e0:	7812      	ldrb	r2, [r2, #0]
    50e2:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    50e4:	4b63      	ldr	r3, [pc, #396]	; (5274 <socket+0x1dc>)
    50e6:	781b      	ldrb	r3, [r3, #0]
    50e8:	b2db      	uxtb	r3, r3
    50ea:	011a      	lsls	r2, r3, #4
    50ec:	4b62      	ldr	r3, [pc, #392]	; (5278 <socket+0x1e0>)
    50ee:	18d3      	adds	r3, r2, r3
    50f0:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    50f2:	4b60      	ldr	r3, [pc, #384]	; (5274 <socket+0x1dc>)
    50f4:	781b      	ldrb	r3, [r3, #0]
    50f6:	b2db      	uxtb	r3, r3
    50f8:	1c5a      	adds	r2, r3, #1
    50fa:	4b60      	ldr	r3, [pc, #384]	; (527c <socket+0x1e4>)
    50fc:	2107      	movs	r1, #7
    50fe:	0010      	movs	r0, r2
    5100:	4798      	blx	r3
    5102:	000b      	movs	r3, r1
    5104:	b2da      	uxtb	r2, r3
    5106:	4b5b      	ldr	r3, [pc, #364]	; (5274 <socket+0x1dc>)
    5108:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    510a:	69bb      	ldr	r3, [r7, #24]
    510c:	7a9b      	ldrb	r3, [r3, #10]
    510e:	b2db      	uxtb	r3, r3
    5110:	2b00      	cmp	r3, #0
    5112:	d106      	bne.n	5122 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    5114:	231f      	movs	r3, #31
    5116:	18fb      	adds	r3, r7, r3
    5118:	2217      	movs	r2, #23
    511a:	18ba      	adds	r2, r7, r2
    511c:	7812      	ldrb	r2, [r2, #0]
    511e:	701a      	strb	r2, [r3, #0]
					break;
    5120:	e04c      	b.n	51bc <socket+0x124>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    5122:	231e      	movs	r3, #30
    5124:	18fb      	adds	r3, r7, r3
    5126:	781a      	ldrb	r2, [r3, #0]
    5128:	231e      	movs	r3, #30
    512a:	18fb      	adds	r3, r7, r3
    512c:	3201      	adds	r2, #1
    512e:	701a      	strb	r2, [r3, #0]
    5130:	231e      	movs	r3, #30
    5132:	18fb      	adds	r3, r7, r3
    5134:	781b      	ldrb	r3, [r3, #0]
    5136:	2b06      	cmp	r3, #6
    5138:	d9cf      	bls.n	50da <socket+0x42>
    513a:	e03f      	b.n	51bc <socket+0x124>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    513c:	1d7b      	adds	r3, r7, #5
    513e:	781b      	ldrb	r3, [r3, #0]
    5140:	2b02      	cmp	r3, #2
    5142:	d13b      	bne.n	51bc <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    5144:	4b4e      	ldr	r3, [pc, #312]	; (5280 <socket+0x1e8>)
    5146:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    5148:	231e      	movs	r3, #30
    514a:	18fb      	adds	r3, r7, r3
    514c:	2200      	movs	r2, #0
    514e:	701a      	strb	r2, [r3, #0]
    5150:	e02f      	b.n	51b2 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    5152:	2317      	movs	r3, #23
    5154:	18fb      	adds	r3, r7, r3
    5156:	4a4b      	ldr	r2, [pc, #300]	; (5284 <socket+0x1ec>)
    5158:	7812      	ldrb	r2, [r2, #0]
    515a:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    515c:	4b49      	ldr	r3, [pc, #292]	; (5284 <socket+0x1ec>)
    515e:	781b      	ldrb	r3, [r3, #0]
    5160:	b2db      	uxtb	r3, r3
    5162:	011b      	lsls	r3, r3, #4
    5164:	693a      	ldr	r2, [r7, #16]
    5166:	18d3      	adds	r3, r2, r3
    5168:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    516a:	4b46      	ldr	r3, [pc, #280]	; (5284 <socket+0x1ec>)
    516c:	781b      	ldrb	r3, [r3, #0]
    516e:	b2db      	uxtb	r3, r3
    5170:	3301      	adds	r3, #1
    5172:	4a45      	ldr	r2, [pc, #276]	; (5288 <socket+0x1f0>)
    5174:	4013      	ands	r3, r2
    5176:	d504      	bpl.n	5182 <socket+0xea>
    5178:	3b01      	subs	r3, #1
    517a:	2204      	movs	r2, #4
    517c:	4252      	negs	r2, r2
    517e:	4313      	orrs	r3, r2
    5180:	3301      	adds	r3, #1
    5182:	b2da      	uxtb	r2, r3
    5184:	4b3f      	ldr	r3, [pc, #252]	; (5284 <socket+0x1ec>)
    5186:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    5188:	69bb      	ldr	r3, [r7, #24]
    518a:	7a9b      	ldrb	r3, [r3, #10]
    518c:	b2db      	uxtb	r3, r3
    518e:	2b00      	cmp	r3, #0
    5190:	d108      	bne.n	51a4 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    5192:	2317      	movs	r3, #23
    5194:	18fb      	adds	r3, r7, r3
    5196:	781b      	ldrb	r3, [r3, #0]
    5198:	3307      	adds	r3, #7
    519a:	b2da      	uxtb	r2, r3
    519c:	231f      	movs	r3, #31
    519e:	18fb      	adds	r3, r7, r3
    51a0:	701a      	strb	r2, [r3, #0]
					break;
    51a2:	e00b      	b.n	51bc <socket+0x124>
			}
		}
		else if(u8Type == SOCK_DGRAM)
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    51a4:	231e      	movs	r3, #30
    51a6:	18fb      	adds	r3, r7, r3
    51a8:	781a      	ldrb	r2, [r3, #0]
    51aa:	231e      	movs	r3, #30
    51ac:	18fb      	adds	r3, r7, r3
    51ae:	3201      	adds	r2, #1
    51b0:	701a      	strb	r2, [r3, #0]
    51b2:	231e      	movs	r3, #30
    51b4:	18fb      	adds	r3, r7, r3
    51b6:	781b      	ldrb	r3, [r3, #0]
    51b8:	2b03      	cmp	r3, #3
    51ba:	d9ca      	bls.n	5152 <socket+0xba>
					break;
				}
			}
		}

		if(sock >= 0)
    51bc:	231f      	movs	r3, #31
    51be:	18fb      	adds	r3, r7, r3
    51c0:	781b      	ldrb	r3, [r3, #0]
    51c2:	2b7f      	cmp	r3, #127	; 0x7f
    51c4:	d84e      	bhi.n	5264 <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    51c6:	69bb      	ldr	r3, [r7, #24]
    51c8:	2210      	movs	r2, #16
    51ca:	2100      	movs	r1, #0
    51cc:	0018      	movs	r0, r3
    51ce:	4b2f      	ldr	r3, [pc, #188]	; (528c <socket+0x1f4>)
    51d0:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    51d2:	69bb      	ldr	r3, [r7, #24]
    51d4:	2201      	movs	r2, #1
    51d6:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    51d8:	4b2d      	ldr	r3, [pc, #180]	; (5290 <socket+0x1f8>)
    51da:	881b      	ldrh	r3, [r3, #0]
    51dc:	b29b      	uxth	r3, r3
    51de:	3301      	adds	r3, #1
    51e0:	b29a      	uxth	r2, r3
    51e2:	4b2b      	ldr	r3, [pc, #172]	; (5290 <socket+0x1f8>)
    51e4:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    51e6:	4b2a      	ldr	r3, [pc, #168]	; (5290 <socket+0x1f8>)
    51e8:	881b      	ldrh	r3, [r3, #0]
    51ea:	b29b      	uxth	r3, r3
    51ec:	2b00      	cmp	r3, #0
    51ee:	d106      	bne.n	51fe <socket+0x166>
				++gu16SessionID;
    51f0:	4b27      	ldr	r3, [pc, #156]	; (5290 <socket+0x1f8>)
    51f2:	881b      	ldrh	r3, [r3, #0]
    51f4:	b29b      	uxth	r3, r3
    51f6:	3301      	adds	r3, #1
    51f8:	b29a      	uxth	r2, r3
    51fa:	4b25      	ldr	r3, [pc, #148]	; (5290 <socket+0x1f8>)
    51fc:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    51fe:	4b24      	ldr	r3, [pc, #144]	; (5290 <socket+0x1f8>)
    5200:	881b      	ldrh	r3, [r3, #0]
    5202:	b29a      	uxth	r2, r3
    5204:	69bb      	ldr	r3, [r7, #24]
    5206:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    5208:	4b22      	ldr	r3, [pc, #136]	; (5294 <socket+0x1fc>)
    520a:	0018      	movs	r0, r3
    520c:	4b22      	ldr	r3, [pc, #136]	; (5298 <socket+0x200>)
    520e:	4798      	blx	r3
    5210:	231f      	movs	r3, #31
    5212:	18fb      	adds	r3, r7, r3
    5214:	2100      	movs	r1, #0
    5216:	5659      	ldrsb	r1, [r3, r1]
    5218:	4b1d      	ldr	r3, [pc, #116]	; (5290 <socket+0x1f8>)
    521a:	881b      	ldrh	r3, [r3, #0]
    521c:	b29b      	uxth	r3, r3
    521e:	001a      	movs	r2, r3
    5220:	4b1e      	ldr	r3, [pc, #120]	; (529c <socket+0x204>)
    5222:	0018      	movs	r0, r3
    5224:	4b1c      	ldr	r3, [pc, #112]	; (5298 <socket+0x200>)
    5226:	4798      	blx	r3
    5228:	200d      	movs	r0, #13
    522a:	4b1d      	ldr	r3, [pc, #116]	; (52a0 <socket+0x208>)
    522c:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    522e:	1d3b      	adds	r3, r7, #4
    5230:	781b      	ldrb	r3, [r3, #0]
    5232:	2201      	movs	r2, #1
    5234:	4013      	ands	r3, r2
    5236:	d015      	beq.n	5264 <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    5238:	230c      	movs	r3, #12
    523a:	18fb      	adds	r3, r7, r3
    523c:	221f      	movs	r2, #31
    523e:	18ba      	adds	r2, r7, r2
    5240:	7812      	ldrb	r2, [r2, #0]
    5242:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    5244:	69bb      	ldr	r3, [r7, #24]
    5246:	2221      	movs	r2, #33	; 0x21
    5248:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    524a:	230c      	movs	r3, #12
    524c:	18fa      	adds	r2, r7, r3
    524e:	2300      	movs	r3, #0
    5250:	9302      	str	r3, [sp, #8]
    5252:	2300      	movs	r3, #0
    5254:	9301      	str	r3, [sp, #4]
    5256:	2300      	movs	r3, #0
    5258:	9300      	str	r3, [sp, #0]
    525a:	2304      	movs	r3, #4
    525c:	2150      	movs	r1, #80	; 0x50
    525e:	2002      	movs	r0, #2
    5260:	4c10      	ldr	r4, [pc, #64]	; (52a4 <socket+0x20c>)
    5262:	47a0      	blx	r4
			}
		}
	}
	return sock;
    5264:	231f      	movs	r3, #31
    5266:	18fb      	adds	r3, r7, r3
    5268:	781b      	ldrb	r3, [r3, #0]
    526a:	b25b      	sxtb	r3, r3
}
    526c:	0018      	movs	r0, r3
    526e:	46bd      	mov	sp, r7
    5270:	b009      	add	sp, #36	; 0x24
    5272:	bd90      	pop	{r4, r7, pc}
    5274:	200000b5 	.word	0x200000b5
    5278:	2000033c 	.word	0x2000033c
    527c:	0000c219 	.word	0x0000c219
    5280:	200003ac 	.word	0x200003ac
    5284:	200000b6 	.word	0x200000b6
    5288:	80000003 	.word	0x80000003
    528c:	00000ce1 	.word	0x00000ce1
    5290:	200000b2 	.word	0x200000b2
    5294:	0000e81c 	.word	0x0000e81c
    5298:	0000c461 	.word	0x0000c461
    529c:	0000e83c 	.word	0x0000e83c
    52a0:	0000c495 	.word	0x0000c495
    52a4:	00000f41 	.word	0x00000f41

000052a8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    52a8:	b5b0      	push	{r4, r5, r7, lr}
    52aa:	b08a      	sub	sp, #40	; 0x28
    52ac:	af04      	add	r7, sp, #16
    52ae:	6039      	str	r1, [r7, #0]
    52b0:	0011      	movs	r1, r2
    52b2:	1dfb      	adds	r3, r7, #7
    52b4:	1c02      	adds	r2, r0, #0
    52b6:	701a      	strb	r2, [r3, #0]
    52b8:	1dbb      	adds	r3, r7, #6
    52ba:	1c0a      	adds	r2, r1, #0
    52bc:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    52be:	2317      	movs	r3, #23
    52c0:	18fb      	adds	r3, r7, r3
    52c2:	22fa      	movs	r2, #250	; 0xfa
    52c4:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    52c6:	1dfb      	adds	r3, r7, #7
    52c8:	781b      	ldrb	r3, [r3, #0]
    52ca:	2b7f      	cmp	r3, #127	; 0x7f
    52cc:	d867      	bhi.n	539e <connect+0xf6>
    52ce:	683b      	ldr	r3, [r7, #0]
    52d0:	2b00      	cmp	r3, #0
    52d2:	d064      	beq.n	539e <connect+0xf6>
    52d4:	1dfb      	adds	r3, r7, #7
    52d6:	781b      	ldrb	r3, [r3, #0]
    52d8:	b25b      	sxtb	r3, r3
    52da:	4a35      	ldr	r2, [pc, #212]	; (53b0 <connect+0x108>)
    52dc:	011b      	lsls	r3, r3, #4
    52de:	18d3      	adds	r3, r2, r3
    52e0:	330a      	adds	r3, #10
    52e2:	781b      	ldrb	r3, [r3, #0]
    52e4:	b2db      	uxtb	r3, r3
    52e6:	2b01      	cmp	r3, #1
    52e8:	d159      	bne.n	539e <connect+0xf6>
    52ea:	1dbb      	adds	r3, r7, #6
    52ec:	781b      	ldrb	r3, [r3, #0]
    52ee:	2b00      	cmp	r3, #0
    52f0:	d055      	beq.n	539e <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    52f2:	2316      	movs	r3, #22
    52f4:	18fb      	adds	r3, r7, r3
    52f6:	2244      	movs	r2, #68	; 0x44
    52f8:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    52fa:	1dfb      	adds	r3, r7, #7
    52fc:	781b      	ldrb	r3, [r3, #0]
    52fe:	b25b      	sxtb	r3, r3
    5300:	4a2b      	ldr	r2, [pc, #172]	; (53b0 <connect+0x108>)
    5302:	011b      	lsls	r3, r3, #4
    5304:	18d3      	adds	r3, r2, r3
    5306:	330b      	adds	r3, #11
    5308:	781b      	ldrb	r3, [r3, #0]
    530a:	b2db      	uxtb	r3, r3
    530c:	001a      	movs	r2, r3
    530e:	2301      	movs	r3, #1
    5310:	4013      	ands	r3, r2
    5312:	d00f      	beq.n	5334 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    5314:	2316      	movs	r3, #22
    5316:	18fb      	adds	r3, r7, r3
    5318:	224b      	movs	r2, #75	; 0x4b
    531a:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    531c:	1dfb      	adds	r3, r7, #7
    531e:	781b      	ldrb	r3, [r3, #0]
    5320:	b25b      	sxtb	r3, r3
    5322:	4a23      	ldr	r2, [pc, #140]	; (53b0 <connect+0x108>)
    5324:	011b      	lsls	r3, r3, #4
    5326:	18d3      	adds	r3, r2, r3
    5328:	330b      	adds	r3, #11
    532a:	781b      	ldrb	r3, [r3, #0]
    532c:	b2da      	uxtb	r2, r3
    532e:	2308      	movs	r3, #8
    5330:	18fb      	adds	r3, r7, r3
    5332:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    5334:	2308      	movs	r3, #8
    5336:	18fb      	adds	r3, r7, r3
    5338:	1dfa      	adds	r2, r7, #7
    533a:	7812      	ldrb	r2, [r2, #0]
    533c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    533e:	6839      	ldr	r1, [r7, #0]
    5340:	2308      	movs	r3, #8
    5342:	18fb      	adds	r3, r7, r3
    5344:	2208      	movs	r2, #8
    5346:	0018      	movs	r0, r3
    5348:	4b1a      	ldr	r3, [pc, #104]	; (53b4 <connect+0x10c>)
    534a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    534c:	1dfb      	adds	r3, r7, #7
    534e:	781b      	ldrb	r3, [r3, #0]
    5350:	b25b      	sxtb	r3, r3
    5352:	4a17      	ldr	r2, [pc, #92]	; (53b0 <connect+0x108>)
    5354:	011b      	lsls	r3, r3, #4
    5356:	18d3      	adds	r3, r2, r3
    5358:	3306      	adds	r3, #6
    535a:	881b      	ldrh	r3, [r3, #0]
    535c:	b29a      	uxth	r2, r3
    535e:	2308      	movs	r3, #8
    5360:	18fb      	adds	r3, r7, r3
    5362:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    5364:	2317      	movs	r3, #23
    5366:	18fc      	adds	r4, r7, r3
    5368:	2308      	movs	r3, #8
    536a:	18fa      	adds	r2, r7, r3
    536c:	2316      	movs	r3, #22
    536e:	18fb      	adds	r3, r7, r3
    5370:	7819      	ldrb	r1, [r3, #0]
    5372:	2300      	movs	r3, #0
    5374:	9302      	str	r3, [sp, #8]
    5376:	2300      	movs	r3, #0
    5378:	9301      	str	r3, [sp, #4]
    537a:	2300      	movs	r3, #0
    537c:	9300      	str	r3, [sp, #0]
    537e:	230c      	movs	r3, #12
    5380:	2002      	movs	r0, #2
    5382:	4d0d      	ldr	r5, [pc, #52]	; (53b8 <connect+0x110>)
    5384:	47a8      	blx	r5
    5386:	0003      	movs	r3, r0
    5388:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    538a:	2317      	movs	r3, #23
    538c:	18fb      	adds	r3, r7, r3
    538e:	781b      	ldrb	r3, [r3, #0]
    5390:	b25b      	sxtb	r3, r3
    5392:	2b00      	cmp	r3, #0
    5394:	d003      	beq.n	539e <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    5396:	2317      	movs	r3, #23
    5398:	18fb      	adds	r3, r7, r3
    539a:	22f7      	movs	r2, #247	; 0xf7
    539c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    539e:	2317      	movs	r3, #23
    53a0:	18fb      	adds	r3, r7, r3
    53a2:	781b      	ldrb	r3, [r3, #0]
    53a4:	b25b      	sxtb	r3, r3
}
    53a6:	0018      	movs	r0, r3
    53a8:	46bd      	mov	sp, r7
    53aa:	b006      	add	sp, #24
    53ac:	bdb0      	pop	{r4, r5, r7, pc}
    53ae:	46c0      	nop			; (mov r8, r8)
    53b0:	2000033c 	.word	0x2000033c
    53b4:	00000ca5 	.word	0x00000ca5
    53b8:	00000f41 	.word	0x00000f41

000053bc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    53bc:	b590      	push	{r4, r7, lr}
    53be:	b08f      	sub	sp, #60	; 0x3c
    53c0:	af04      	add	r7, sp, #16
    53c2:	0004      	movs	r4, r0
    53c4:	60b9      	str	r1, [r7, #8]
    53c6:	0010      	movs	r0, r2
    53c8:	0019      	movs	r1, r3
    53ca:	230f      	movs	r3, #15
    53cc:	18fb      	adds	r3, r7, r3
    53ce:	1c22      	adds	r2, r4, #0
    53d0:	701a      	strb	r2, [r3, #0]
    53d2:	230c      	movs	r3, #12
    53d4:	18fb      	adds	r3, r7, r3
    53d6:	1c02      	adds	r2, r0, #0
    53d8:	801a      	strh	r2, [r3, #0]
    53da:	1dbb      	adds	r3, r7, #6
    53dc:	1c0a      	adds	r2, r1, #0
    53de:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    53e0:	2326      	movs	r3, #38	; 0x26
    53e2:	18fb      	adds	r3, r7, r3
    53e4:	2206      	movs	r2, #6
    53e6:	4252      	negs	r2, r2
    53e8:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    53ea:	230f      	movs	r3, #15
    53ec:	18fb      	adds	r3, r7, r3
    53ee:	781b      	ldrb	r3, [r3, #0]
    53f0:	2b7f      	cmp	r3, #127	; 0x7f
    53f2:	d900      	bls.n	53f6 <send+0x3a>
    53f4:	e087      	b.n	5506 <send+0x14a>
    53f6:	68bb      	ldr	r3, [r7, #8]
    53f8:	2b00      	cmp	r3, #0
    53fa:	d100      	bne.n	53fe <send+0x42>
    53fc:	e083      	b.n	5506 <send+0x14a>
    53fe:	230c      	movs	r3, #12
    5400:	18fb      	adds	r3, r7, r3
    5402:	881a      	ldrh	r2, [r3, #0]
    5404:	23af      	movs	r3, #175	; 0xaf
    5406:	00db      	lsls	r3, r3, #3
    5408:	429a      	cmp	r2, r3
    540a:	d900      	bls.n	540e <send+0x52>
    540c:	e07b      	b.n	5506 <send+0x14a>
    540e:	230f      	movs	r3, #15
    5410:	18fb      	adds	r3, r7, r3
    5412:	781b      	ldrb	r3, [r3, #0]
    5414:	b25b      	sxtb	r3, r3
    5416:	4a40      	ldr	r2, [pc, #256]	; (5518 <send+0x15c>)
    5418:	011b      	lsls	r3, r3, #4
    541a:	18d3      	adds	r3, r2, r3
    541c:	330a      	adds	r3, #10
    541e:	781b      	ldrb	r3, [r3, #0]
    5420:	b2db      	uxtb	r3, r3
    5422:	2b01      	cmp	r3, #1
    5424:	d16f      	bne.n	5506 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    5426:	2323      	movs	r3, #35	; 0x23
    5428:	18fb      	adds	r3, r7, r3
    542a:	2245      	movs	r2, #69	; 0x45
    542c:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    542e:	2324      	movs	r3, #36	; 0x24
    5430:	18fb      	adds	r3, r7, r3
    5432:	2250      	movs	r2, #80	; 0x50
    5434:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    5436:	2310      	movs	r3, #16
    5438:	18fb      	adds	r3, r7, r3
    543a:	220f      	movs	r2, #15
    543c:	18ba      	adds	r2, r7, r2
    543e:	7812      	ldrb	r2, [r2, #0]
    5440:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    5442:	2310      	movs	r3, #16
    5444:	18fb      	adds	r3, r7, r3
    5446:	220c      	movs	r2, #12
    5448:	18ba      	adds	r2, r7, r2
    544a:	8812      	ldrh	r2, [r2, #0]
    544c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    544e:	230f      	movs	r3, #15
    5450:	18fb      	adds	r3, r7, r3
    5452:	781b      	ldrb	r3, [r3, #0]
    5454:	b25b      	sxtb	r3, r3
    5456:	4a30      	ldr	r2, [pc, #192]	; (5518 <send+0x15c>)
    5458:	011b      	lsls	r3, r3, #4
    545a:	18d3      	adds	r3, r2, r3
    545c:	3306      	adds	r3, #6
    545e:	881b      	ldrh	r3, [r3, #0]
    5460:	b29a      	uxth	r2, r3
    5462:	2310      	movs	r3, #16
    5464:	18fb      	adds	r3, r7, r3
    5466:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    5468:	230f      	movs	r3, #15
    546a:	18fb      	adds	r3, r7, r3
    546c:	781b      	ldrb	r3, [r3, #0]
    546e:	b25b      	sxtb	r3, r3
    5470:	2b06      	cmp	r3, #6
    5472:	dd03      	ble.n	547c <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    5474:	2324      	movs	r3, #36	; 0x24
    5476:	18fb      	adds	r3, r7, r3
    5478:	2244      	movs	r2, #68	; 0x44
    547a:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    547c:	230f      	movs	r3, #15
    547e:	18fb      	adds	r3, r7, r3
    5480:	781b      	ldrb	r3, [r3, #0]
    5482:	b25b      	sxtb	r3, r3
    5484:	4a24      	ldr	r2, [pc, #144]	; (5518 <send+0x15c>)
    5486:	011b      	lsls	r3, r3, #4
    5488:	18d3      	adds	r3, r2, r3
    548a:	330b      	adds	r3, #11
    548c:	781b      	ldrb	r3, [r3, #0]
    548e:	b2db      	uxtb	r3, r3
    5490:	001a      	movs	r2, r3
    5492:	2301      	movs	r3, #1
    5494:	4013      	ands	r3, r2
    5496:	d00f      	beq.n	54b8 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    5498:	2323      	movs	r3, #35	; 0x23
    549a:	18fb      	adds	r3, r7, r3
    549c:	224c      	movs	r2, #76	; 0x4c
    549e:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    54a0:	230f      	movs	r3, #15
    54a2:	18fb      	adds	r3, r7, r3
    54a4:	2200      	movs	r2, #0
    54a6:	569a      	ldrsb	r2, [r3, r2]
    54a8:	2324      	movs	r3, #36	; 0x24
    54aa:	18fb      	adds	r3, r7, r3
    54ac:	491a      	ldr	r1, [pc, #104]	; (5518 <send+0x15c>)
    54ae:	0112      	lsls	r2, r2, #4
    54b0:	188a      	adds	r2, r1, r2
    54b2:	3208      	adds	r2, #8
    54b4:	8812      	ldrh	r2, [r2, #0]
    54b6:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    54b8:	2323      	movs	r3, #35	; 0x23
    54ba:	18fb      	adds	r3, r7, r3
    54bc:	781b      	ldrb	r3, [r3, #0]
    54be:	2280      	movs	r2, #128	; 0x80
    54c0:	4252      	negs	r2, r2
    54c2:	4313      	orrs	r3, r2
    54c4:	b2d9      	uxtb	r1, r3
    54c6:	2310      	movs	r3, #16
    54c8:	18fa      	adds	r2, r7, r3
    54ca:	2324      	movs	r3, #36	; 0x24
    54cc:	18fb      	adds	r3, r7, r3
    54ce:	881b      	ldrh	r3, [r3, #0]
    54d0:	9302      	str	r3, [sp, #8]
    54d2:	230c      	movs	r3, #12
    54d4:	18fb      	adds	r3, r7, r3
    54d6:	881b      	ldrh	r3, [r3, #0]
    54d8:	9301      	str	r3, [sp, #4]
    54da:	68bb      	ldr	r3, [r7, #8]
    54dc:	9300      	str	r3, [sp, #0]
    54de:	2310      	movs	r3, #16
    54e0:	2002      	movs	r0, #2
    54e2:	4c0e      	ldr	r4, [pc, #56]	; (551c <send+0x160>)
    54e4:	47a0      	blx	r4
    54e6:	0003      	movs	r3, r0
    54e8:	001a      	movs	r2, r3
    54ea:	2326      	movs	r3, #38	; 0x26
    54ec:	18fb      	adds	r3, r7, r3
    54ee:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    54f0:	2326      	movs	r3, #38	; 0x26
    54f2:	18fb      	adds	r3, r7, r3
    54f4:	2200      	movs	r2, #0
    54f6:	5e9b      	ldrsh	r3, [r3, r2]
    54f8:	2b00      	cmp	r3, #0
    54fa:	d004      	beq.n	5506 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    54fc:	2326      	movs	r3, #38	; 0x26
    54fe:	18fb      	adds	r3, r7, r3
    5500:	220e      	movs	r2, #14
    5502:	4252      	negs	r2, r2
    5504:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    5506:	2326      	movs	r3, #38	; 0x26
    5508:	18fb      	adds	r3, r7, r3
    550a:	2200      	movs	r2, #0
    550c:	5e9b      	ldrsh	r3, [r3, r2]
}
    550e:	0018      	movs	r0, r3
    5510:	46bd      	mov	sp, r7
    5512:	b00b      	add	sp, #44	; 0x2c
    5514:	bd90      	pop	{r4, r7, pc}
    5516:	46c0      	nop			; (mov r8, r8)
    5518:	2000033c 	.word	0x2000033c
    551c:	00000f41 	.word	0x00000f41

00005520 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    5520:	b590      	push	{r4, r7, lr}
    5522:	b08d      	sub	sp, #52	; 0x34
    5524:	af04      	add	r7, sp, #16
    5526:	60b9      	str	r1, [r7, #8]
    5528:	0011      	movs	r1, r2
    552a:	607b      	str	r3, [r7, #4]
    552c:	230f      	movs	r3, #15
    552e:	18fb      	adds	r3, r7, r3
    5530:	1c02      	adds	r2, r0, #0
    5532:	701a      	strb	r2, [r3, #0]
    5534:	230c      	movs	r3, #12
    5536:	18fb      	adds	r3, r7, r3
    5538:	1c0a      	adds	r2, r1, #0
    553a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    553c:	231e      	movs	r3, #30
    553e:	18fb      	adds	r3, r7, r3
    5540:	2206      	movs	r2, #6
    5542:	4252      	negs	r2, r2
    5544:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    5546:	230f      	movs	r3, #15
    5548:	18fb      	adds	r3, r7, r3
    554a:	781b      	ldrb	r3, [r3, #0]
    554c:	2b7f      	cmp	r3, #127	; 0x7f
    554e:	d900      	bls.n	5552 <recv+0x32>
    5550:	e099      	b.n	5686 <recv+0x166>
    5552:	68bb      	ldr	r3, [r7, #8]
    5554:	2b00      	cmp	r3, #0
    5556:	d100      	bne.n	555a <recv+0x3a>
    5558:	e095      	b.n	5686 <recv+0x166>
    555a:	230c      	movs	r3, #12
    555c:	18fb      	adds	r3, r7, r3
    555e:	881b      	ldrh	r3, [r3, #0]
    5560:	2b00      	cmp	r3, #0
    5562:	d100      	bne.n	5566 <recv+0x46>
    5564:	e08f      	b.n	5686 <recv+0x166>
    5566:	230f      	movs	r3, #15
    5568:	18fb      	adds	r3, r7, r3
    556a:	781b      	ldrb	r3, [r3, #0]
    556c:	b25b      	sxtb	r3, r3
    556e:	4a4a      	ldr	r2, [pc, #296]	; (5698 <recv+0x178>)
    5570:	011b      	lsls	r3, r3, #4
    5572:	18d3      	adds	r3, r2, r3
    5574:	330a      	adds	r3, #10
    5576:	781b      	ldrb	r3, [r3, #0]
    5578:	b2db      	uxtb	r3, r3
    557a:	2b01      	cmp	r3, #1
    557c:	d000      	beq.n	5580 <recv+0x60>
    557e:	e082      	b.n	5686 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    5580:	231e      	movs	r3, #30
    5582:	18fb      	adds	r3, r7, r3
    5584:	2200      	movs	r2, #0
    5586:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    5588:	230f      	movs	r3, #15
    558a:	18fb      	adds	r3, r7, r3
    558c:	2200      	movs	r2, #0
    558e:	569a      	ldrsb	r2, [r3, r2]
    5590:	4b41      	ldr	r3, [pc, #260]	; (5698 <recv+0x178>)
    5592:	0112      	lsls	r2, r2, #4
    5594:	68b9      	ldr	r1, [r7, #8]
    5596:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    5598:	230f      	movs	r3, #15
    559a:	18fb      	adds	r3, r7, r3
    559c:	781b      	ldrb	r3, [r3, #0]
    559e:	b25b      	sxtb	r3, r3
    55a0:	4a3d      	ldr	r2, [pc, #244]	; (5698 <recv+0x178>)
    55a2:	011b      	lsls	r3, r3, #4
    55a4:	18d3      	adds	r3, r2, r3
    55a6:	3304      	adds	r3, #4
    55a8:	220c      	movs	r2, #12
    55aa:	18ba      	adds	r2, r7, r2
    55ac:	8812      	ldrh	r2, [r2, #0]
    55ae:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    55b0:	230f      	movs	r3, #15
    55b2:	18fb      	adds	r3, r7, r3
    55b4:	781b      	ldrb	r3, [r3, #0]
    55b6:	b25b      	sxtb	r3, r3
    55b8:	4a37      	ldr	r2, [pc, #220]	; (5698 <recv+0x178>)
    55ba:	011b      	lsls	r3, r3, #4
    55bc:	18d3      	adds	r3, r2, r3
    55be:	330c      	adds	r3, #12
    55c0:	781b      	ldrb	r3, [r3, #0]
    55c2:	b2db      	uxtb	r3, r3
    55c4:	2b00      	cmp	r3, #0
    55c6:	d15e      	bne.n	5686 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    55c8:	231d      	movs	r3, #29
    55ca:	18fb      	adds	r3, r7, r3
    55cc:	2246      	movs	r2, #70	; 0x46
    55ce:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    55d0:	230f      	movs	r3, #15
    55d2:	18fb      	adds	r3, r7, r3
    55d4:	781b      	ldrb	r3, [r3, #0]
    55d6:	b25b      	sxtb	r3, r3
    55d8:	4a2f      	ldr	r2, [pc, #188]	; (5698 <recv+0x178>)
    55da:	011b      	lsls	r3, r3, #4
    55dc:	18d3      	adds	r3, r2, r3
    55de:	330c      	adds	r3, #12
    55e0:	2201      	movs	r2, #1
    55e2:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    55e4:	230f      	movs	r3, #15
    55e6:	18fb      	adds	r3, r7, r3
    55e8:	781b      	ldrb	r3, [r3, #0]
    55ea:	b25b      	sxtb	r3, r3
    55ec:	4a2a      	ldr	r2, [pc, #168]	; (5698 <recv+0x178>)
    55ee:	011b      	lsls	r3, r3, #4
    55f0:	18d3      	adds	r3, r2, r3
    55f2:	330b      	adds	r3, #11
    55f4:	781b      	ldrb	r3, [r3, #0]
    55f6:	b2db      	uxtb	r3, r3
    55f8:	001a      	movs	r2, r3
    55fa:	2301      	movs	r3, #1
    55fc:	4013      	ands	r3, r2
    55fe:	d003      	beq.n	5608 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    5600:	231d      	movs	r3, #29
    5602:	18fb      	adds	r3, r7, r3
    5604:	224d      	movs	r2, #77	; 0x4d
    5606:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    5608:	687b      	ldr	r3, [r7, #4]
    560a:	2b00      	cmp	r3, #0
    560c:	d105      	bne.n	561a <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    560e:	2314      	movs	r3, #20
    5610:	18fb      	adds	r3, r7, r3
    5612:	2201      	movs	r2, #1
    5614:	4252      	negs	r2, r2
    5616:	601a      	str	r2, [r3, #0]
    5618:	e003      	b.n	5622 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    561a:	2314      	movs	r3, #20
    561c:	18fb      	adds	r3, r7, r3
    561e:	687a      	ldr	r2, [r7, #4]
    5620:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    5622:	2314      	movs	r3, #20
    5624:	18fb      	adds	r3, r7, r3
    5626:	220f      	movs	r2, #15
    5628:	18ba      	adds	r2, r7, r2
    562a:	7812      	ldrb	r2, [r2, #0]
    562c:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    562e:	230f      	movs	r3, #15
    5630:	18fb      	adds	r3, r7, r3
    5632:	781b      	ldrb	r3, [r3, #0]
    5634:	b25b      	sxtb	r3, r3
    5636:	4a18      	ldr	r2, [pc, #96]	; (5698 <recv+0x178>)
    5638:	011b      	lsls	r3, r3, #4
    563a:	18d3      	adds	r3, r2, r3
    563c:	3306      	adds	r3, #6
    563e:	881b      	ldrh	r3, [r3, #0]
    5640:	b29a      	uxth	r2, r3
    5642:	2314      	movs	r3, #20
    5644:	18fb      	adds	r3, r7, r3
    5646:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    5648:	2314      	movs	r3, #20
    564a:	18fa      	adds	r2, r7, r3
    564c:	231d      	movs	r3, #29
    564e:	18fb      	adds	r3, r7, r3
    5650:	7819      	ldrb	r1, [r3, #0]
    5652:	2300      	movs	r3, #0
    5654:	9302      	str	r3, [sp, #8]
    5656:	2300      	movs	r3, #0
    5658:	9301      	str	r3, [sp, #4]
    565a:	2300      	movs	r3, #0
    565c:	9300      	str	r3, [sp, #0]
    565e:	2308      	movs	r3, #8
    5660:	2002      	movs	r0, #2
    5662:	4c0e      	ldr	r4, [pc, #56]	; (569c <recv+0x17c>)
    5664:	47a0      	blx	r4
    5666:	0003      	movs	r3, r0
    5668:	001a      	movs	r2, r3
    566a:	231e      	movs	r3, #30
    566c:	18fb      	adds	r3, r7, r3
    566e:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    5670:	231e      	movs	r3, #30
    5672:	18fb      	adds	r3, r7, r3
    5674:	2200      	movs	r2, #0
    5676:	5e9b      	ldrsh	r3, [r3, r2]
    5678:	2b00      	cmp	r3, #0
    567a:	d004      	beq.n	5686 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    567c:	231e      	movs	r3, #30
    567e:	18fb      	adds	r3, r7, r3
    5680:	220e      	movs	r2, #14
    5682:	4252      	negs	r2, r2
    5684:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    5686:	231e      	movs	r3, #30
    5688:	18fb      	adds	r3, r7, r3
    568a:	2200      	movs	r2, #0
    568c:	5e9b      	ldrsh	r3, [r3, r2]
}
    568e:	0018      	movs	r0, r3
    5690:	46bd      	mov	sp, r7
    5692:	b009      	add	sp, #36	; 0x24
    5694:	bd90      	pop	{r4, r7, pc}
    5696:	46c0      	nop			; (mov r8, r8)
    5698:	2000033c 	.word	0x2000033c
    569c:	00000f41 	.word	0x00000f41

000056a0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    56a0:	b5b0      	push	{r4, r5, r7, lr}
    56a2:	b088      	sub	sp, #32
    56a4:	af04      	add	r7, sp, #16
    56a6:	0002      	movs	r2, r0
    56a8:	1dfb      	adds	r3, r7, #7
    56aa:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    56ac:	230f      	movs	r3, #15
    56ae:	18fb      	adds	r3, r7, r3
    56b0:	22fa      	movs	r2, #250	; 0xfa
    56b2:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    56b4:	4b42      	ldr	r3, [pc, #264]	; (57c0 <close+0x120>)
    56b6:	0018      	movs	r0, r3
    56b8:	4b42      	ldr	r3, [pc, #264]	; (57c4 <close+0x124>)
    56ba:	4798      	blx	r3
    56bc:	1dfb      	adds	r3, r7, #7
    56be:	2200      	movs	r2, #0
    56c0:	569a      	ldrsb	r2, [r3, r2]
    56c2:	4b41      	ldr	r3, [pc, #260]	; (57c8 <close+0x128>)
    56c4:	0011      	movs	r1, r2
    56c6:	0018      	movs	r0, r3
    56c8:	4b3e      	ldr	r3, [pc, #248]	; (57c4 <close+0x124>)
    56ca:	4798      	blx	r3
    56cc:	200d      	movs	r0, #13
    56ce:	4b3f      	ldr	r3, [pc, #252]	; (57cc <close+0x12c>)
    56d0:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    56d2:	1dfb      	adds	r3, r7, #7
    56d4:	781b      	ldrb	r3, [r3, #0]
    56d6:	2b7f      	cmp	r3, #127	; 0x7f
    56d8:	d86a      	bhi.n	57b0 <close+0x110>
    56da:	1dfb      	adds	r3, r7, #7
    56dc:	781b      	ldrb	r3, [r3, #0]
    56de:	b25b      	sxtb	r3, r3
    56e0:	4a3b      	ldr	r2, [pc, #236]	; (57d0 <close+0x130>)
    56e2:	011b      	lsls	r3, r3, #4
    56e4:	18d3      	adds	r3, r2, r3
    56e6:	330a      	adds	r3, #10
    56e8:	781b      	ldrb	r3, [r3, #0]
    56ea:	b2db      	uxtb	r3, r3
    56ec:	2b01      	cmp	r3, #1
    56ee:	d15f      	bne.n	57b0 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    56f0:	230e      	movs	r3, #14
    56f2:	18fb      	adds	r3, r7, r3
    56f4:	2249      	movs	r2, #73	; 0x49
    56f6:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    56f8:	2308      	movs	r3, #8
    56fa:	18fb      	adds	r3, r7, r3
    56fc:	1dfa      	adds	r2, r7, #7
    56fe:	7812      	ldrb	r2, [r2, #0]
    5700:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    5702:	1dfb      	adds	r3, r7, #7
    5704:	781b      	ldrb	r3, [r3, #0]
    5706:	b25b      	sxtb	r3, r3
    5708:	4a31      	ldr	r2, [pc, #196]	; (57d0 <close+0x130>)
    570a:	011b      	lsls	r3, r3, #4
    570c:	18d3      	adds	r3, r2, r3
    570e:	3306      	adds	r3, #6
    5710:	881b      	ldrh	r3, [r3, #0]
    5712:	b29a      	uxth	r2, r3
    5714:	2308      	movs	r3, #8
    5716:	18fb      	adds	r3, r7, r3
    5718:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    571a:	1dfb      	adds	r3, r7, #7
    571c:	781b      	ldrb	r3, [r3, #0]
    571e:	b25b      	sxtb	r3, r3
    5720:	4a2b      	ldr	r2, [pc, #172]	; (57d0 <close+0x130>)
    5722:	011b      	lsls	r3, r3, #4
    5724:	18d3      	adds	r3, r2, r3
    5726:	330a      	adds	r3, #10
    5728:	2200      	movs	r2, #0
    572a:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    572c:	1dfb      	adds	r3, r7, #7
    572e:	781b      	ldrb	r3, [r3, #0]
    5730:	b25b      	sxtb	r3, r3
    5732:	4a27      	ldr	r2, [pc, #156]	; (57d0 <close+0x130>)
    5734:	011b      	lsls	r3, r3, #4
    5736:	18d3      	adds	r3, r2, r3
    5738:	3306      	adds	r3, #6
    573a:	2200      	movs	r2, #0
    573c:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    573e:	1dfb      	adds	r3, r7, #7
    5740:	781b      	ldrb	r3, [r3, #0]
    5742:	b25b      	sxtb	r3, r3
    5744:	4a22      	ldr	r2, [pc, #136]	; (57d0 <close+0x130>)
    5746:	011b      	lsls	r3, r3, #4
    5748:	18d3      	adds	r3, r2, r3
    574a:	330b      	adds	r3, #11
    574c:	781b      	ldrb	r3, [r3, #0]
    574e:	b2db      	uxtb	r3, r3
    5750:	001a      	movs	r2, r3
    5752:	2301      	movs	r3, #1
    5754:	4013      	ands	r3, r2
    5756:	d003      	beq.n	5760 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    5758:	230e      	movs	r3, #14
    575a:	18fb      	adds	r3, r7, r3
    575c:	224e      	movs	r2, #78	; 0x4e
    575e:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    5760:	230f      	movs	r3, #15
    5762:	18fc      	adds	r4, r7, r3
    5764:	2308      	movs	r3, #8
    5766:	18fa      	adds	r2, r7, r3
    5768:	230e      	movs	r3, #14
    576a:	18fb      	adds	r3, r7, r3
    576c:	7819      	ldrb	r1, [r3, #0]
    576e:	2300      	movs	r3, #0
    5770:	9302      	str	r3, [sp, #8]
    5772:	2300      	movs	r3, #0
    5774:	9301      	str	r3, [sp, #4]
    5776:	2300      	movs	r3, #0
    5778:	9300      	str	r3, [sp, #0]
    577a:	2304      	movs	r3, #4
    577c:	2002      	movs	r0, #2
    577e:	4d15      	ldr	r5, [pc, #84]	; (57d4 <close+0x134>)
    5780:	47a8      	blx	r5
    5782:	0003      	movs	r3, r0
    5784:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    5786:	230f      	movs	r3, #15
    5788:	18fb      	adds	r3, r7, r3
    578a:	781b      	ldrb	r3, [r3, #0]
    578c:	b25b      	sxtb	r3, r3
    578e:	2b00      	cmp	r3, #0
    5790:	d003      	beq.n	579a <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    5792:	230f      	movs	r3, #15
    5794:	18fb      	adds	r3, r7, r3
    5796:	22f7      	movs	r2, #247	; 0xf7
    5798:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    579a:	1dfb      	adds	r3, r7, #7
    579c:	781b      	ldrb	r3, [r3, #0]
    579e:	b25b      	sxtb	r3, r3
    57a0:	011a      	lsls	r2, r3, #4
    57a2:	4b0b      	ldr	r3, [pc, #44]	; (57d0 <close+0x130>)
    57a4:	18d3      	adds	r3, r2, r3
    57a6:	2210      	movs	r2, #16
    57a8:	2100      	movs	r1, #0
    57aa:	0018      	movs	r0, r3
    57ac:	4b0a      	ldr	r3, [pc, #40]	; (57d8 <close+0x138>)
    57ae:	4798      	blx	r3
	}
	return s8Ret;
    57b0:	230f      	movs	r3, #15
    57b2:	18fb      	adds	r3, r7, r3
    57b4:	781b      	ldrb	r3, [r3, #0]
    57b6:	b25b      	sxtb	r3, r3
}
    57b8:	0018      	movs	r0, r3
    57ba:	46bd      	mov	sp, r7
    57bc:	b004      	add	sp, #16
    57be:	bdb0      	pop	{r4, r5, r7, pc}
    57c0:	0000e81c 	.word	0x0000e81c
    57c4:	0000c461 	.word	0x0000c461
    57c8:	0000e858 	.word	0x0000e858
    57cc:	0000c495 	.word	0x0000c495
    57d0:	2000033c 	.word	0x2000033c
    57d4:	00000f41 	.word	0x00000f41
    57d8:	00000ce1 	.word	0x00000ce1

000057dc <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    57dc:	b580      	push	{r7, lr}
    57de:	b086      	sub	sp, #24
    57e0:	af00      	add	r7, sp, #0
    57e2:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    57e4:	2300      	movs	r3, #0
    57e6:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    57e8:	2317      	movs	r3, #23
    57ea:	18fb      	adds	r3, r7, r3
    57ec:	2200      	movs	r2, #0
    57ee:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    57f0:	2316      	movs	r3, #22
    57f2:	18fb      	adds	r3, r7, r3
    57f4:	2200      	movs	r2, #0
    57f6:	701a      	strb	r2, [r3, #0]
    57f8:	e060      	b.n	58bc <nmi_inet_addr+0xe0>
	{
		j = 0;
    57fa:	2315      	movs	r3, #21
    57fc:	18fb      	adds	r3, r7, r3
    57fe:	2200      	movs	r2, #0
    5800:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    5802:	2314      	movs	r3, #20
    5804:	18fb      	adds	r3, r7, r3
    5806:	687a      	ldr	r2, [r7, #4]
    5808:	7812      	ldrb	r2, [r2, #0]
    580a:	701a      	strb	r2, [r3, #0]
			++j;
    580c:	2315      	movs	r3, #21
    580e:	18fb      	adds	r3, r7, r3
    5810:	2215      	movs	r2, #21
    5812:	18ba      	adds	r2, r7, r2
    5814:	7812      	ldrb	r2, [r2, #0]
    5816:	3201      	adds	r2, #1
    5818:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    581a:	2315      	movs	r3, #21
    581c:	18fb      	adds	r3, r7, r3
    581e:	781b      	ldrb	r3, [r3, #0]
    5820:	2b04      	cmp	r3, #4
    5822:	d901      	bls.n	5828 <nmi_inet_addr+0x4c>
			{
				return 0;
    5824:	2300      	movs	r3, #0
    5826:	e057      	b.n	58d8 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    5828:	2314      	movs	r3, #20
    582a:	18fb      	adds	r3, r7, r3
    582c:	781b      	ldrb	r3, [r3, #0]
    582e:	2b2e      	cmp	r3, #46	; 0x2e
    5830:	d004      	beq.n	583c <nmi_inet_addr+0x60>
    5832:	2314      	movs	r3, #20
    5834:	18fb      	adds	r3, r7, r3
    5836:	781b      	ldrb	r3, [r3, #0]
    5838:	2b00      	cmp	r3, #0
    583a:	d10d      	bne.n	5858 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    583c:	2316      	movs	r3, #22
    583e:	18fb      	adds	r3, r7, r3
    5840:	781b      	ldrb	r3, [r3, #0]
    5842:	220c      	movs	r2, #12
    5844:	18ba      	adds	r2, r7, r2
    5846:	2117      	movs	r1, #23
    5848:	1879      	adds	r1, r7, r1
    584a:	7809      	ldrb	r1, [r1, #0]
    584c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    584e:	2317      	movs	r3, #23
    5850:	18fb      	adds	r3, r7, r3
    5852:	2200      	movs	r2, #0
    5854:	701a      	strb	r2, [r3, #0]
    5856:	e01d      	b.n	5894 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    5858:	2314      	movs	r3, #20
    585a:	18fb      	adds	r3, r7, r3
    585c:	781b      	ldrb	r3, [r3, #0]
    585e:	2b2f      	cmp	r3, #47	; 0x2f
    5860:	d916      	bls.n	5890 <nmi_inet_addr+0xb4>
    5862:	2314      	movs	r3, #20
    5864:	18fb      	adds	r3, r7, r3
    5866:	781b      	ldrb	r3, [r3, #0]
    5868:	2b39      	cmp	r3, #57	; 0x39
    586a:	d811      	bhi.n	5890 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    586c:	2317      	movs	r3, #23
    586e:	18fb      	adds	r3, r7, r3
    5870:	781b      	ldrb	r3, [r3, #0]
    5872:	1c1a      	adds	r2, r3, #0
    5874:	0092      	lsls	r2, r2, #2
    5876:	18d3      	adds	r3, r2, r3
    5878:	18db      	adds	r3, r3, r3
    587a:	b2da      	uxtb	r2, r3
    587c:	2314      	movs	r3, #20
    587e:	18fb      	adds	r3, r7, r3
    5880:	781b      	ldrb	r3, [r3, #0]
    5882:	18d3      	adds	r3, r2, r3
    5884:	b2da      	uxtb	r2, r3
    5886:	2317      	movs	r3, #23
    5888:	18fb      	adds	r3, r7, r3
    588a:	3a30      	subs	r2, #48	; 0x30
    588c:	701a      	strb	r2, [r3, #0]
    588e:	e001      	b.n	5894 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    5890:	2300      	movs	r3, #0
    5892:	e021      	b.n	58d8 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    5894:	687b      	ldr	r3, [r7, #4]
    5896:	3301      	adds	r3, #1
    5898:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    589a:	2314      	movs	r3, #20
    589c:	18fb      	adds	r3, r7, r3
    589e:	781b      	ldrb	r3, [r3, #0]
    58a0:	2b2e      	cmp	r3, #46	; 0x2e
    58a2:	d004      	beq.n	58ae <nmi_inet_addr+0xd2>
    58a4:	2314      	movs	r3, #20
    58a6:	18fb      	adds	r3, r7, r3
    58a8:	781b      	ldrb	r3, [r3, #0]
    58aa:	2b00      	cmp	r3, #0
    58ac:	d1a9      	bne.n	5802 <nmi_inet_addr+0x26>
	uint8 	c;
	uint8	i, j;

	tmp = 0;

	for(i = 0; i < 4; ++i)
    58ae:	2316      	movs	r3, #22
    58b0:	18fb      	adds	r3, r7, r3
    58b2:	2216      	movs	r2, #22
    58b4:	18ba      	adds	r2, r7, r2
    58b6:	7812      	ldrb	r2, [r2, #0]
    58b8:	3201      	adds	r2, #1
    58ba:	701a      	strb	r2, [r3, #0]
    58bc:	2316      	movs	r3, #22
    58be:	18fb      	adds	r3, r7, r3
    58c0:	781b      	ldrb	r3, [r3, #0]
    58c2:	2b03      	cmp	r3, #3
    58c4:	d999      	bls.n	57fa <nmi_inet_addr+0x1e>
				return 0;
			}
			++pcIpAddr;
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    58c6:	230c      	movs	r3, #12
    58c8:	18f9      	adds	r1, r7, r3
    58ca:	2310      	movs	r3, #16
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	2204      	movs	r2, #4
    58d0:	0018      	movs	r0, r3
    58d2:	4b03      	ldr	r3, [pc, #12]	; (58e0 <nmi_inet_addr+0x104>)
    58d4:	4798      	blx	r3
	return u32IP;
    58d6:	693b      	ldr	r3, [r7, #16]
}
    58d8:	0018      	movs	r0, r3
    58da:	46bd      	mov	sp, r7
    58dc:	b006      	add	sp, #24
    58de:	bd80      	pop	{r7, pc}
    58e0:	00000ca5 	.word	0x00000ca5

000058e4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    58e4:	b5b0      	push	{r4, r5, r7, lr}
    58e6:	b088      	sub	sp, #32
    58e8:	af04      	add	r7, sp, #16
    58ea:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    58ec:	230f      	movs	r3, #15
    58ee:	18fb      	adds	r3, r7, r3
    58f0:	22fa      	movs	r2, #250	; 0xfa
    58f2:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    58f4:	687b      	ldr	r3, [r7, #4]
    58f6:	0018      	movs	r0, r3
    58f8:	4b14      	ldr	r3, [pc, #80]	; (594c <gethostbyname+0x68>)
    58fa:	4798      	blx	r3
    58fc:	0003      	movs	r3, r0
    58fe:	001a      	movs	r2, r3
    5900:	230e      	movs	r3, #14
    5902:	18fb      	adds	r3, r7, r3
    5904:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    5906:	230e      	movs	r3, #14
    5908:	18fb      	adds	r3, r7, r3
    590a:	781b      	ldrb	r3, [r3, #0]
    590c:	2b40      	cmp	r3, #64	; 0x40
    590e:	d815      	bhi.n	593c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    5910:	230e      	movs	r3, #14
    5912:	18fb      	adds	r3, r7, r3
    5914:	781b      	ldrb	r3, [r3, #0]
    5916:	b29b      	uxth	r3, r3
    5918:	3301      	adds	r3, #1
    591a:	b299      	uxth	r1, r3
    591c:	230f      	movs	r3, #15
    591e:	18fc      	adds	r4, r7, r3
    5920:	687a      	ldr	r2, [r7, #4]
    5922:	2300      	movs	r3, #0
    5924:	9302      	str	r3, [sp, #8]
    5926:	2300      	movs	r3, #0
    5928:	9301      	str	r3, [sp, #4]
    592a:	2300      	movs	r3, #0
    592c:	9300      	str	r3, [sp, #0]
    592e:	000b      	movs	r3, r1
    5930:	214a      	movs	r1, #74	; 0x4a
    5932:	2002      	movs	r0, #2
    5934:	4d06      	ldr	r5, [pc, #24]	; (5950 <gethostbyname+0x6c>)
    5936:	47a8      	blx	r5
    5938:	0003      	movs	r3, r0
    593a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    593c:	230f      	movs	r3, #15
    593e:	18fb      	adds	r3, r7, r3
    5940:	781b      	ldrb	r3, [r3, #0]
    5942:	b25b      	sxtb	r3, r3
}
    5944:	0018      	movs	r0, r3
    5946:	46bd      	mov	sp, r7
    5948:	b004      	add	sp, #16
    594a:	bdb0      	pop	{r4, r5, r7, pc}
    594c:	00000d21 	.word	0x00000d21
    5950:	00000f41 	.word	0x00000f41

00005954 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    5954:	b580      	push	{r7, lr}
    5956:	b082      	sub	sp, #8
    5958:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    595a:	003b      	movs	r3, r7
    595c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    595e:	687b      	ldr	r3, [r7, #4]
    5960:	22b9      	movs	r2, #185	; 0xb9
    5962:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5964:	4b13      	ldr	r3, [pc, #76]	; (59b4 <spi_flash_enter_low_power_mode+0x60>)
    5966:	2100      	movs	r1, #0
    5968:	0018      	movs	r0, r3
    596a:	4b13      	ldr	r3, [pc, #76]	; (59b8 <spi_flash_enter_low_power_mode+0x64>)
    596c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    596e:	687b      	ldr	r3, [r7, #4]
    5970:	781b      	ldrb	r3, [r3, #0]
    5972:	001a      	movs	r2, r3
    5974:	4b11      	ldr	r3, [pc, #68]	; (59bc <spi_flash_enter_low_power_mode+0x68>)
    5976:	0011      	movs	r1, r2
    5978:	0018      	movs	r0, r3
    597a:	4b0f      	ldr	r3, [pc, #60]	; (59b8 <spi_flash_enter_low_power_mode+0x64>)
    597c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    597e:	4b10      	ldr	r3, [pc, #64]	; (59c0 <spi_flash_enter_low_power_mode+0x6c>)
    5980:	2101      	movs	r1, #1
    5982:	0018      	movs	r0, r3
    5984:	4b0c      	ldr	r3, [pc, #48]	; (59b8 <spi_flash_enter_low_power_mode+0x64>)
    5986:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5988:	4b0e      	ldr	r3, [pc, #56]	; (59c4 <spi_flash_enter_low_power_mode+0x70>)
    598a:	2100      	movs	r1, #0
    598c:	0018      	movs	r0, r3
    598e:	4b0a      	ldr	r3, [pc, #40]	; (59b8 <spi_flash_enter_low_power_mode+0x64>)
    5990:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    5992:	4b0d      	ldr	r3, [pc, #52]	; (59c8 <spi_flash_enter_low_power_mode+0x74>)
    5994:	2181      	movs	r1, #129	; 0x81
    5996:	0018      	movs	r0, r3
    5998:	4b07      	ldr	r3, [pc, #28]	; (59b8 <spi_flash_enter_low_power_mode+0x64>)
    599a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    599c:	46c0      	nop			; (mov r8, r8)
    599e:	4b0b      	ldr	r3, [pc, #44]	; (59cc <spi_flash_enter_low_power_mode+0x78>)
    59a0:	0018      	movs	r0, r3
    59a2:	4b0b      	ldr	r3, [pc, #44]	; (59d0 <spi_flash_enter_low_power_mode+0x7c>)
    59a4:	4798      	blx	r3
    59a6:	1e03      	subs	r3, r0, #0
    59a8:	2b01      	cmp	r3, #1
    59aa:	d1f8      	bne.n	599e <spi_flash_enter_low_power_mode+0x4a>
}
    59ac:	46c0      	nop			; (mov r8, r8)
    59ae:	46bd      	mov	sp, r7
    59b0:	b002      	add	sp, #8
    59b2:	bd80      	pop	{r7, pc}
    59b4:	00010208 	.word	0x00010208
    59b8:	00002d49 	.word	0x00002d49
    59bc:	0001020c 	.word	0x0001020c
    59c0:	00010214 	.word	0x00010214
    59c4:	0001021c 	.word	0x0001021c
    59c8:	00010204 	.word	0x00010204
    59cc:	00010218 	.word	0x00010218
    59d0:	00002d05 	.word	0x00002d05

000059d4 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    59d4:	b580      	push	{r7, lr}
    59d6:	b082      	sub	sp, #8
    59d8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    59da:	003b      	movs	r3, r7
    59dc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    59de:	687b      	ldr	r3, [r7, #4]
    59e0:	22ab      	movs	r2, #171	; 0xab
    59e2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    59e4:	4b13      	ldr	r3, [pc, #76]	; (5a34 <spi_flash_leave_low_power_mode+0x60>)
    59e6:	2100      	movs	r1, #0
    59e8:	0018      	movs	r0, r3
    59ea:	4b13      	ldr	r3, [pc, #76]	; (5a38 <spi_flash_leave_low_power_mode+0x64>)
    59ec:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    59ee:	687b      	ldr	r3, [r7, #4]
    59f0:	781b      	ldrb	r3, [r3, #0]
    59f2:	001a      	movs	r2, r3
    59f4:	4b11      	ldr	r3, [pc, #68]	; (5a3c <spi_flash_leave_low_power_mode+0x68>)
    59f6:	0011      	movs	r1, r2
    59f8:	0018      	movs	r0, r3
    59fa:	4b0f      	ldr	r3, [pc, #60]	; (5a38 <spi_flash_leave_low_power_mode+0x64>)
    59fc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    59fe:	4b10      	ldr	r3, [pc, #64]	; (5a40 <spi_flash_leave_low_power_mode+0x6c>)
    5a00:	2101      	movs	r1, #1
    5a02:	0018      	movs	r0, r3
    5a04:	4b0c      	ldr	r3, [pc, #48]	; (5a38 <spi_flash_leave_low_power_mode+0x64>)
    5a06:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5a08:	4b0e      	ldr	r3, [pc, #56]	; (5a44 <spi_flash_leave_low_power_mode+0x70>)
    5a0a:	2100      	movs	r1, #0
    5a0c:	0018      	movs	r0, r3
    5a0e:	4b0a      	ldr	r3, [pc, #40]	; (5a38 <spi_flash_leave_low_power_mode+0x64>)
    5a10:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    5a12:	4b0d      	ldr	r3, [pc, #52]	; (5a48 <spi_flash_leave_low_power_mode+0x74>)
    5a14:	2181      	movs	r1, #129	; 0x81
    5a16:	0018      	movs	r0, r3
    5a18:	4b07      	ldr	r3, [pc, #28]	; (5a38 <spi_flash_leave_low_power_mode+0x64>)
    5a1a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    5a1c:	46c0      	nop			; (mov r8, r8)
    5a1e:	4b0b      	ldr	r3, [pc, #44]	; (5a4c <spi_flash_leave_low_power_mode+0x78>)
    5a20:	0018      	movs	r0, r3
    5a22:	4b0b      	ldr	r3, [pc, #44]	; (5a50 <spi_flash_leave_low_power_mode+0x7c>)
    5a24:	4798      	blx	r3
    5a26:	1e03      	subs	r3, r0, #0
    5a28:	2b01      	cmp	r3, #1
    5a2a:	d1f8      	bne.n	5a1e <spi_flash_leave_low_power_mode+0x4a>
}
    5a2c:	46c0      	nop			; (mov r8, r8)
    5a2e:	46bd      	mov	sp, r7
    5a30:	b002      	add	sp, #8
    5a32:	bd80      	pop	{r7, pc}
    5a34:	00010208 	.word	0x00010208
    5a38:	00002d49 	.word	0x00002d49
    5a3c:	0001020c 	.word	0x0001020c
    5a40:	00010214 	.word	0x00010214
    5a44:	0001021c 	.word	0x0001021c
    5a48:	00010204 	.word	0x00010204
    5a4c:	00010218 	.word	0x00010218
    5a50:	00002d05 	.word	0x00002d05

00005a54 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    5a54:	b590      	push	{r4, r7, lr}
    5a56:	b085      	sub	sp, #20
    5a58:	af00      	add	r7, sp, #0
    5a5a:	0002      	movs	r2, r0
    5a5c:	1dfb      	adds	r3, r7, #7
    5a5e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    5a60:	230f      	movs	r3, #15
    5a62:	18fb      	adds	r3, r7, r3
    5a64:	2200      	movs	r2, #0
    5a66:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    5a68:	4b24      	ldr	r3, [pc, #144]	; (5afc <spi_flash_enable+0xa8>)
    5a6a:	4798      	blx	r3
    5a6c:	0003      	movs	r3, r0
    5a6e:	051b      	lsls	r3, r3, #20
    5a70:	0d1b      	lsrs	r3, r3, #20
    5a72:	4a23      	ldr	r2, [pc, #140]	; (5b00 <spi_flash_enable+0xac>)
    5a74:	4293      	cmp	r3, r2
    5a76:	d938      	bls.n	5aea <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    5a78:	230f      	movs	r3, #15
    5a7a:	18fc      	adds	r4, r7, r3
    5a7c:	2308      	movs	r3, #8
    5a7e:	18fb      	adds	r3, r7, r3
    5a80:	4a20      	ldr	r2, [pc, #128]	; (5b04 <spi_flash_enable+0xb0>)
    5a82:	0019      	movs	r1, r3
    5a84:	0010      	movs	r0, r2
    5a86:	4b20      	ldr	r3, [pc, #128]	; (5b08 <spi_flash_enable+0xb4>)
    5a88:	4798      	blx	r3
    5a8a:	0003      	movs	r3, r0
    5a8c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    5a8e:	230f      	movs	r3, #15
    5a90:	18fb      	adds	r3, r7, r3
    5a92:	781b      	ldrb	r3, [r3, #0]
    5a94:	b25b      	sxtb	r3, r3
    5a96:	2b00      	cmp	r3, #0
    5a98:	d126      	bne.n	5ae8 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    5a9a:	68bb      	ldr	r3, [r7, #8]
    5a9c:	4a1b      	ldr	r2, [pc, #108]	; (5b0c <spi_flash_enable+0xb8>)
    5a9e:	4013      	ands	r3, r2
    5aa0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    5aa2:	68bb      	ldr	r3, [r7, #8]
    5aa4:	4a1a      	ldr	r2, [pc, #104]	; (5b10 <spi_flash_enable+0xbc>)
    5aa6:	4313      	orrs	r3, r2
    5aa8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5aaa:	68bb      	ldr	r3, [r7, #8]
    5aac:	4a15      	ldr	r2, [pc, #84]	; (5b04 <spi_flash_enable+0xb0>)
    5aae:	0019      	movs	r1, r3
    5ab0:	0010      	movs	r0, r2
    5ab2:	4b18      	ldr	r3, [pc, #96]	; (5b14 <spi_flash_enable+0xc0>)
    5ab4:	4798      	blx	r3
		if(enable) {
    5ab6:	1dfb      	adds	r3, r7, #7
    5ab8:	781b      	ldrb	r3, [r3, #0]
    5aba:	2b00      	cmp	r3, #0
    5abc:	d002      	beq.n	5ac4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    5abe:	4b16      	ldr	r3, [pc, #88]	; (5b18 <spi_flash_enable+0xc4>)
    5ac0:	4798      	blx	r3
    5ac2:	e001      	b.n	5ac8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    5ac4:	4b15      	ldr	r3, [pc, #84]	; (5b1c <spi_flash_enable+0xc8>)
    5ac6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    5ac8:	68bb      	ldr	r3, [r7, #8]
    5aca:	4a10      	ldr	r2, [pc, #64]	; (5b0c <spi_flash_enable+0xb8>)
    5acc:	4013      	ands	r3, r2
    5ace:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    5ad0:	68bb      	ldr	r3, [r7, #8]
    5ad2:	2280      	movs	r2, #128	; 0x80
    5ad4:	0252      	lsls	r2, r2, #9
    5ad6:	4313      	orrs	r3, r2
    5ad8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    5ada:	68bb      	ldr	r3, [r7, #8]
    5adc:	4a09      	ldr	r2, [pc, #36]	; (5b04 <spi_flash_enable+0xb0>)
    5ade:	0019      	movs	r1, r3
    5ae0:	0010      	movs	r0, r2
    5ae2:	4b0c      	ldr	r3, [pc, #48]	; (5b14 <spi_flash_enable+0xc0>)
    5ae4:	4798      	blx	r3
    5ae6:	e000      	b.n	5aea <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    5ae8:	46c0      	nop			; (mov r8, r8)
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    5aea:	230f      	movs	r3, #15
    5aec:	18fb      	adds	r3, r7, r3
    5aee:	781b      	ldrb	r3, [r3, #0]
    5af0:	b25b      	sxtb	r3, r3
}
    5af2:	0018      	movs	r0, r3
    5af4:	46bd      	mov	sp, r7
    5af6:	b005      	add	sp, #20
    5af8:	bd90      	pop	{r4, r7, pc}
    5afa:	46c0      	nop			; (mov r8, r8)
    5afc:	00002629 	.word	0x00002629
    5b00:	0000039f 	.word	0x0000039f
    5b04:	00001410 	.word	0x00001410
    5b08:	00002d25 	.word	0x00002d25
    5b0c:	f8888fff 	.word	0xf8888fff
    5b10:	01111000 	.word	0x01111000
    5b14:	00002d49 	.word	0x00002d49
    5b18:	000059d5 	.word	0x000059d5
    5b1c:	00005955 	.word	0x00005955

00005b20 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    5b20:	b580      	push	{r7, lr}
    5b22:	b082      	sub	sp, #8
    5b24:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    5b26:	4b10      	ldr	r3, [pc, #64]	; (5b68 <cpu_irq_enter_critical+0x48>)
    5b28:	681b      	ldr	r3, [r3, #0]
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d112      	bne.n	5b54 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    5b2e:	f3ef 8310 	mrs	r3, PRIMASK
    5b32:	607b      	str	r3, [r7, #4]
  return(result);
    5b34:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    5b36:	2b00      	cmp	r3, #0
    5b38:	d109      	bne.n	5b4e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    5b3a:	b672      	cpsid	i
    5b3c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5b40:	4b0a      	ldr	r3, [pc, #40]	; (5b6c <cpu_irq_enter_critical+0x4c>)
    5b42:	2200      	movs	r2, #0
    5b44:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5b46:	4b0a      	ldr	r3, [pc, #40]	; (5b70 <cpu_irq_enter_critical+0x50>)
    5b48:	2201      	movs	r2, #1
    5b4a:	701a      	strb	r2, [r3, #0]
    5b4c:	e002      	b.n	5b54 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    5b4e:	4b08      	ldr	r3, [pc, #32]	; (5b70 <cpu_irq_enter_critical+0x50>)
    5b50:	2200      	movs	r2, #0
    5b52:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5b54:	4b04      	ldr	r3, [pc, #16]	; (5b68 <cpu_irq_enter_critical+0x48>)
    5b56:	681b      	ldr	r3, [r3, #0]
    5b58:	1c5a      	adds	r2, r3, #1
    5b5a:	4b03      	ldr	r3, [pc, #12]	; (5b68 <cpu_irq_enter_critical+0x48>)
    5b5c:	601a      	str	r2, [r3, #0]
}
    5b5e:	46c0      	nop			; (mov r8, r8)
    5b60:	46bd      	mov	sp, r7
    5b62:	b002      	add	sp, #8
    5b64:	bd80      	pop	{r7, pc}
    5b66:	46c0      	nop			; (mov r8, r8)
    5b68:	200000b8 	.word	0x200000b8
    5b6c:	2000000a 	.word	0x2000000a
    5b70:	200000bc 	.word	0x200000bc

00005b74 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    5b74:	b580      	push	{r7, lr}
    5b76:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5b78:	4b0b      	ldr	r3, [pc, #44]	; (5ba8 <cpu_irq_leave_critical+0x34>)
    5b7a:	681b      	ldr	r3, [r3, #0]
    5b7c:	1e5a      	subs	r2, r3, #1
    5b7e:	4b0a      	ldr	r3, [pc, #40]	; (5ba8 <cpu_irq_leave_critical+0x34>)
    5b80:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5b82:	4b09      	ldr	r3, [pc, #36]	; (5ba8 <cpu_irq_leave_critical+0x34>)
    5b84:	681b      	ldr	r3, [r3, #0]
    5b86:	2b00      	cmp	r3, #0
    5b88:	d10a      	bne.n	5ba0 <cpu_irq_leave_critical+0x2c>
    5b8a:	4b08      	ldr	r3, [pc, #32]	; (5bac <cpu_irq_leave_critical+0x38>)
    5b8c:	781b      	ldrb	r3, [r3, #0]
    5b8e:	b2db      	uxtb	r3, r3
    5b90:	2b00      	cmp	r3, #0
    5b92:	d005      	beq.n	5ba0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    5b94:	4b06      	ldr	r3, [pc, #24]	; (5bb0 <cpu_irq_leave_critical+0x3c>)
    5b96:	2201      	movs	r2, #1
    5b98:	701a      	strb	r2, [r3, #0]
    5b9a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5b9e:	b662      	cpsie	i
	}
}
    5ba0:	46c0      	nop			; (mov r8, r8)
    5ba2:	46bd      	mov	sp, r7
    5ba4:	bd80      	pop	{r7, pc}
    5ba6:	46c0      	nop			; (mov r8, r8)
    5ba8:	200000b8 	.word	0x200000b8
    5bac:	200000bc 	.word	0x200000bc
    5bb0:	2000000a 	.word	0x2000000a

00005bb4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5bb4:	b580      	push	{r7, lr}
    5bb6:	b084      	sub	sp, #16
    5bb8:	af00      	add	r7, sp, #0
    5bba:	0002      	movs	r2, r0
    5bbc:	1dfb      	adds	r3, r7, #7
    5bbe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5bc0:	230f      	movs	r3, #15
    5bc2:	18fb      	adds	r3, r7, r3
    5bc4:	1dfa      	adds	r2, r7, #7
    5bc6:	7812      	ldrb	r2, [r2, #0]
    5bc8:	09d2      	lsrs	r2, r2, #7
    5bca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5bcc:	230e      	movs	r3, #14
    5bce:	18fb      	adds	r3, r7, r3
    5bd0:	1dfa      	adds	r2, r7, #7
    5bd2:	7812      	ldrb	r2, [r2, #0]
    5bd4:	0952      	lsrs	r2, r2, #5
    5bd6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5bd8:	4b0d      	ldr	r3, [pc, #52]	; (5c10 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5bda:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    5bdc:	230f      	movs	r3, #15
    5bde:	18fb      	adds	r3, r7, r3
    5be0:	781b      	ldrb	r3, [r3, #0]
    5be2:	2b00      	cmp	r3, #0
    5be4:	d10f      	bne.n	5c06 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5be6:	230f      	movs	r3, #15
    5be8:	18fb      	adds	r3, r7, r3
    5bea:	781b      	ldrb	r3, [r3, #0]
    5bec:	009b      	lsls	r3, r3, #2
    5bee:	2210      	movs	r2, #16
    5bf0:	4694      	mov	ip, r2
    5bf2:	44bc      	add	ip, r7
    5bf4:	4463      	add	r3, ip
    5bf6:	3b08      	subs	r3, #8
    5bf8:	681a      	ldr	r2, [r3, #0]
    5bfa:	230e      	movs	r3, #14
    5bfc:	18fb      	adds	r3, r7, r3
    5bfe:	781b      	ldrb	r3, [r3, #0]
    5c00:	01db      	lsls	r3, r3, #7
    5c02:	18d3      	adds	r3, r2, r3
    5c04:	e000      	b.n	5c08 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    5c06:	2300      	movs	r3, #0
	}
}
    5c08:	0018      	movs	r0, r3
    5c0a:	46bd      	mov	sp, r7
    5c0c:	b004      	add	sp, #16
    5c0e:	bd80      	pop	{r7, pc}
    5c10:	41004400 	.word	0x41004400

00005c14 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5c14:	b580      	push	{r7, lr}
    5c16:	b082      	sub	sp, #8
    5c18:	af00      	add	r7, sp, #0
    5c1a:	0002      	movs	r2, r0
    5c1c:	1dfb      	adds	r3, r7, #7
    5c1e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5c20:	1dfb      	adds	r3, r7, #7
    5c22:	781b      	ldrb	r3, [r3, #0]
    5c24:	0018      	movs	r0, r3
    5c26:	4b03      	ldr	r3, [pc, #12]	; (5c34 <port_get_group_from_gpio_pin+0x20>)
    5c28:	4798      	blx	r3
    5c2a:	0003      	movs	r3, r0
}
    5c2c:	0018      	movs	r0, r3
    5c2e:	46bd      	mov	sp, r7
    5c30:	b002      	add	sp, #8
    5c32:	bd80      	pop	{r7, pc}
    5c34:	00005bb5 	.word	0x00005bb5

00005c38 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    5c38:	b580      	push	{r7, lr}
    5c3a:	b082      	sub	sp, #8
    5c3c:	af00      	add	r7, sp, #0
    5c3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    5c40:	687b      	ldr	r3, [r7, #4]
    5c42:	2200      	movs	r2, #0
    5c44:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5c46:	687b      	ldr	r3, [r7, #4]
    5c48:	2201      	movs	r2, #1
    5c4a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    5c4c:	687b      	ldr	r3, [r7, #4]
    5c4e:	2200      	movs	r2, #0
    5c50:	709a      	strb	r2, [r3, #2]
}
    5c52:	46c0      	nop			; (mov r8, r8)
    5c54:	46bd      	mov	sp, r7
    5c56:	b002      	add	sp, #8
    5c58:	bd80      	pop	{r7, pc}
    5c5a:	46c0      	nop			; (mov r8, r8)

00005c5c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    5c5c:	b580      	push	{r7, lr}
    5c5e:	b084      	sub	sp, #16
    5c60:	af00      	add	r7, sp, #0
    5c62:	0002      	movs	r2, r0
    5c64:	1dfb      	adds	r3, r7, #7
    5c66:	701a      	strb	r2, [r3, #0]
    5c68:	1dbb      	adds	r3, r7, #6
    5c6a:	1c0a      	adds	r2, r1, #0
    5c6c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    5c6e:	1dfb      	adds	r3, r7, #7
    5c70:	781b      	ldrb	r3, [r3, #0]
    5c72:	0018      	movs	r0, r3
    5c74:	4b0d      	ldr	r3, [pc, #52]	; (5cac <port_pin_set_output_level+0x50>)
    5c76:	4798      	blx	r3
    5c78:	0003      	movs	r3, r0
    5c7a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c7c:	1dfb      	adds	r3, r7, #7
    5c7e:	781b      	ldrb	r3, [r3, #0]
    5c80:	221f      	movs	r2, #31
    5c82:	4013      	ands	r3, r2
    5c84:	2201      	movs	r2, #1
    5c86:	409a      	lsls	r2, r3
    5c88:	0013      	movs	r3, r2
    5c8a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    5c8c:	1dbb      	adds	r3, r7, #6
    5c8e:	781b      	ldrb	r3, [r3, #0]
    5c90:	2b00      	cmp	r3, #0
    5c92:	d003      	beq.n	5c9c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    5c94:	68fb      	ldr	r3, [r7, #12]
    5c96:	68ba      	ldr	r2, [r7, #8]
    5c98:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    5c9a:	e002      	b.n	5ca2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    5c9c:	68fb      	ldr	r3, [r7, #12]
    5c9e:	68ba      	ldr	r2, [r7, #8]
    5ca0:	615a      	str	r2, [r3, #20]
	}
}
    5ca2:	46c0      	nop			; (mov r8, r8)
    5ca4:	46bd      	mov	sp, r7
    5ca6:	b004      	add	sp, #16
    5ca8:	bd80      	pop	{r7, pc}
    5caa:	46c0      	nop			; (mov r8, r8)
    5cac:	00005c15 	.word	0x00005c15

00005cb0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    5cb0:	b580      	push	{r7, lr}
    5cb2:	b082      	sub	sp, #8
    5cb4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    5cb6:	1d3b      	adds	r3, r7, #4
    5cb8:	0018      	movs	r0, r3
    5cba:	4b0e      	ldr	r3, [pc, #56]	; (5cf4 <system_board_init+0x44>)
    5cbc:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    5cbe:	1d3b      	adds	r3, r7, #4
    5cc0:	2201      	movs	r2, #1
    5cc2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    5cc4:	1d3b      	adds	r3, r7, #4
    5cc6:	0019      	movs	r1, r3
    5cc8:	2017      	movs	r0, #23
    5cca:	4b0b      	ldr	r3, [pc, #44]	; (5cf8 <system_board_init+0x48>)
    5ccc:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    5cce:	2101      	movs	r1, #1
    5cd0:	2017      	movs	r0, #23
    5cd2:	4b0a      	ldr	r3, [pc, #40]	; (5cfc <system_board_init+0x4c>)
    5cd4:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    5cd6:	1d3b      	adds	r3, r7, #4
    5cd8:	2200      	movs	r2, #0
    5cda:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    5cdc:	1d3b      	adds	r3, r7, #4
    5cde:	2201      	movs	r2, #1
    5ce0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    5ce2:	1d3b      	adds	r3, r7, #4
    5ce4:	0019      	movs	r1, r3
    5ce6:	2037      	movs	r0, #55	; 0x37
    5ce8:	4b03      	ldr	r3, [pc, #12]	; (5cf8 <system_board_init+0x48>)
    5cea:	4798      	blx	r3
}
    5cec:	46c0      	nop			; (mov r8, r8)
    5cee:	46bd      	mov	sp, r7
    5cf0:	b002      	add	sp, #8
    5cf2:	bd80      	pop	{r7, pc}
    5cf4:	00005c39 	.word	0x00005c39
    5cf8:	00006325 	.word	0x00006325
    5cfc:	00005c5d 	.word	0x00005c5d

00005d00 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    5d00:	b580      	push	{r7, lr}
    5d02:	b084      	sub	sp, #16
    5d04:	af00      	add	r7, sp, #0
    5d06:	0002      	movs	r2, r0
    5d08:	1dfb      	adds	r3, r7, #7
    5d0a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5d0c:	230f      	movs	r3, #15
    5d0e:	18fb      	adds	r3, r7, r3
    5d10:	1dfa      	adds	r2, r7, #7
    5d12:	7812      	ldrb	r2, [r2, #0]
    5d14:	0952      	lsrs	r2, r2, #5
    5d16:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    5d18:	230f      	movs	r3, #15
    5d1a:	18fb      	adds	r3, r7, r3
    5d1c:	781b      	ldrb	r3, [r3, #0]
    5d1e:	2b00      	cmp	r3, #0
    5d20:	d10c      	bne.n	5d3c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    5d22:	4b09      	ldr	r3, [pc, #36]	; (5d48 <_extint_get_eic_from_channel+0x48>)
    5d24:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    5d26:	230f      	movs	r3, #15
    5d28:	18fb      	adds	r3, r7, r3
    5d2a:	781b      	ldrb	r3, [r3, #0]
    5d2c:	009b      	lsls	r3, r3, #2
    5d2e:	2210      	movs	r2, #16
    5d30:	4694      	mov	ip, r2
    5d32:	44bc      	add	ip, r7
    5d34:	4463      	add	r3, ip
    5d36:	3b08      	subs	r3, #8
    5d38:	681b      	ldr	r3, [r3, #0]
    5d3a:	e000      	b.n	5d3e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    5d3c:	2300      	movs	r3, #0
	}
}
    5d3e:	0018      	movs	r0, r3
    5d40:	46bd      	mov	sp, r7
    5d42:	b004      	add	sp, #16
    5d44:	bd80      	pop	{r7, pc}
    5d46:	46c0      	nop			; (mov r8, r8)
    5d48:	40001800 	.word	0x40001800

00005d4c <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    5d4c:	b580      	push	{r7, lr}
    5d4e:	b084      	sub	sp, #16
    5d50:	af00      	add	r7, sp, #0
    5d52:	0002      	movs	r2, r0
    5d54:	1dfb      	adds	r3, r7, #7
    5d56:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5d58:	1dfb      	adds	r3, r7, #7
    5d5a:	781b      	ldrb	r3, [r3, #0]
    5d5c:	0018      	movs	r0, r3
    5d5e:	4b0b      	ldr	r3, [pc, #44]	; (5d8c <extint_chan_is_detected+0x40>)
    5d60:	4798      	blx	r3
    5d62:	0003      	movs	r3, r0
    5d64:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5d66:	1dfb      	adds	r3, r7, #7
    5d68:	781b      	ldrb	r3, [r3, #0]
    5d6a:	221f      	movs	r2, #31
    5d6c:	4013      	ands	r3, r2
    5d6e:	2201      	movs	r2, #1
    5d70:	409a      	lsls	r2, r3
    5d72:	0013      	movs	r3, r2
    5d74:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    5d76:	68fb      	ldr	r3, [r7, #12]
    5d78:	691b      	ldr	r3, [r3, #16]
    5d7a:	68ba      	ldr	r2, [r7, #8]
    5d7c:	4013      	ands	r3, r2
    5d7e:	1e5a      	subs	r2, r3, #1
    5d80:	4193      	sbcs	r3, r2
    5d82:	b2db      	uxtb	r3, r3
}
    5d84:	0018      	movs	r0, r3
    5d86:	46bd      	mov	sp, r7
    5d88:	b004      	add	sp, #16
    5d8a:	bd80      	pop	{r7, pc}
    5d8c:	00005d01 	.word	0x00005d01

00005d90 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    5d90:	b580      	push	{r7, lr}
    5d92:	b084      	sub	sp, #16
    5d94:	af00      	add	r7, sp, #0
    5d96:	0002      	movs	r2, r0
    5d98:	1dfb      	adds	r3, r7, #7
    5d9a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    5d9c:	1dfb      	adds	r3, r7, #7
    5d9e:	781b      	ldrb	r3, [r3, #0]
    5da0:	0018      	movs	r0, r3
    5da2:	4b09      	ldr	r3, [pc, #36]	; (5dc8 <extint_chan_clear_detected+0x38>)
    5da4:	4798      	blx	r3
    5da6:	0003      	movs	r3, r0
    5da8:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    5daa:	1dfb      	adds	r3, r7, #7
    5dac:	781b      	ldrb	r3, [r3, #0]
    5dae:	221f      	movs	r2, #31
    5db0:	4013      	ands	r3, r2
    5db2:	2201      	movs	r2, #1
    5db4:	409a      	lsls	r2, r3
    5db6:	0013      	movs	r3, r2
    5db8:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    5dba:	68fb      	ldr	r3, [r7, #12]
    5dbc:	68ba      	ldr	r2, [r7, #8]
    5dbe:	611a      	str	r2, [r3, #16]
}
    5dc0:	46c0      	nop			; (mov r8, r8)
    5dc2:	46bd      	mov	sp, r7
    5dc4:	b004      	add	sp, #16
    5dc6:	bd80      	pop	{r7, pc}
    5dc8:	00005d01 	.word	0x00005d01

00005dcc <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5dcc:	b580      	push	{r7, lr}
    5dce:	b082      	sub	sp, #8
    5dd0:	af00      	add	r7, sp, #0
    5dd2:	6078      	str	r0, [r7, #4]
    5dd4:	0008      	movs	r0, r1
    5dd6:	0011      	movs	r1, r2
    5dd8:	1cfb      	adds	r3, r7, #3
    5dda:	1c02      	adds	r2, r0, #0
    5ddc:	701a      	strb	r2, [r3, #0]
    5dde:	1cbb      	adds	r3, r7, #2
    5de0:	1c0a      	adds	r2, r1, #0
    5de2:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    5de4:	1cbb      	adds	r3, r7, #2
    5de6:	781b      	ldrb	r3, [r3, #0]
    5de8:	2b00      	cmp	r3, #0
    5dea:	d001      	beq.n	5df0 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5dec:	2317      	movs	r3, #23
    5dee:	e019      	b.n	5e24 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    5df0:	1cfb      	adds	r3, r7, #3
    5df2:	781a      	ldrb	r2, [r3, #0]
    5df4:	4b0d      	ldr	r3, [pc, #52]	; (5e2c <extint_register_callback+0x60>)
    5df6:	0092      	lsls	r2, r2, #2
    5df8:	58d3      	ldr	r3, [r2, r3]
    5dfa:	2b00      	cmp	r3, #0
    5dfc:	d107      	bne.n	5e0e <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    5dfe:	1cfb      	adds	r3, r7, #3
    5e00:	781a      	ldrb	r2, [r3, #0]
    5e02:	4b0a      	ldr	r3, [pc, #40]	; (5e2c <extint_register_callback+0x60>)
    5e04:	0092      	lsls	r2, r2, #2
    5e06:	6879      	ldr	r1, [r7, #4]
    5e08:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    5e0a:	2300      	movs	r3, #0
    5e0c:	e00a      	b.n	5e24 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    5e0e:	1cfb      	adds	r3, r7, #3
    5e10:	781a      	ldrb	r2, [r3, #0]
    5e12:	4b06      	ldr	r3, [pc, #24]	; (5e2c <extint_register_callback+0x60>)
    5e14:	0092      	lsls	r2, r2, #2
    5e16:	58d2      	ldr	r2, [r2, r3]
    5e18:	687b      	ldr	r3, [r7, #4]
    5e1a:	429a      	cmp	r2, r3
    5e1c:	d101      	bne.n	5e22 <extint_register_callback+0x56>
		return STATUS_OK;
    5e1e:	2300      	movs	r3, #0
    5e20:	e000      	b.n	5e24 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    5e22:	231d      	movs	r3, #29
}
    5e24:	0018      	movs	r0, r3
    5e26:	46bd      	mov	sp, r7
    5e28:	b002      	add	sp, #8
    5e2a:	bd80      	pop	{r7, pc}
    5e2c:	200003fc 	.word	0x200003fc

00005e30 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5e30:	b580      	push	{r7, lr}
    5e32:	b084      	sub	sp, #16
    5e34:	af00      	add	r7, sp, #0
    5e36:	0002      	movs	r2, r0
    5e38:	1dfb      	adds	r3, r7, #7
    5e3a:	701a      	strb	r2, [r3, #0]
    5e3c:	1dbb      	adds	r3, r7, #6
    5e3e:	1c0a      	adds	r2, r1, #0
    5e40:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5e42:	1dbb      	adds	r3, r7, #6
    5e44:	781b      	ldrb	r3, [r3, #0]
    5e46:	2b00      	cmp	r3, #0
    5e48:	d10e      	bne.n	5e68 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    5e4a:	1dfb      	adds	r3, r7, #7
    5e4c:	781b      	ldrb	r3, [r3, #0]
    5e4e:	0018      	movs	r0, r3
    5e50:	4b08      	ldr	r3, [pc, #32]	; (5e74 <extint_chan_enable_callback+0x44>)
    5e52:	4798      	blx	r3
    5e54:	0003      	movs	r3, r0
    5e56:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    5e58:	1dfb      	adds	r3, r7, #7
    5e5a:	781b      	ldrb	r3, [r3, #0]
    5e5c:	2201      	movs	r2, #1
    5e5e:	409a      	lsls	r2, r3
    5e60:	68fb      	ldr	r3, [r7, #12]
    5e62:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5e64:	2300      	movs	r3, #0
    5e66:	e000      	b.n	5e6a <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5e68:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    5e6a:	0018      	movs	r0, r3
    5e6c:	46bd      	mov	sp, r7
    5e6e:	b004      	add	sp, #16
    5e70:	bd80      	pop	{r7, pc}
    5e72:	46c0      	nop			; (mov r8, r8)
    5e74:	00005d01 	.word	0x00005d01

00005e78 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    5e78:	b580      	push	{r7, lr}
    5e7a:	b084      	sub	sp, #16
    5e7c:	af00      	add	r7, sp, #0
    5e7e:	0002      	movs	r2, r0
    5e80:	1dfb      	adds	r3, r7, #7
    5e82:	701a      	strb	r2, [r3, #0]
    5e84:	1dbb      	adds	r3, r7, #6
    5e86:	1c0a      	adds	r2, r1, #0
    5e88:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    5e8a:	1dbb      	adds	r3, r7, #6
    5e8c:	781b      	ldrb	r3, [r3, #0]
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d10e      	bne.n	5eb0 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    5e92:	1dfb      	adds	r3, r7, #7
    5e94:	781b      	ldrb	r3, [r3, #0]
    5e96:	0018      	movs	r0, r3
    5e98:	4b08      	ldr	r3, [pc, #32]	; (5ebc <extint_chan_disable_callback+0x44>)
    5e9a:	4798      	blx	r3
    5e9c:	0003      	movs	r3, r0
    5e9e:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    5ea0:	1dfb      	adds	r3, r7, #7
    5ea2:	781b      	ldrb	r3, [r3, #0]
    5ea4:	2201      	movs	r2, #1
    5ea6:	409a      	lsls	r2, r3
    5ea8:	68fb      	ldr	r3, [r7, #12]
    5eaa:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    5eac:	2300      	movs	r3, #0
    5eae:	e000      	b.n	5eb2 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5eb0:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    5eb2:	0018      	movs	r0, r3
    5eb4:	46bd      	mov	sp, r7
    5eb6:	b004      	add	sp, #16
    5eb8:	bd80      	pop	{r7, pc}
    5eba:	46c0      	nop			; (mov r8, r8)
    5ebc:	00005d01 	.word	0x00005d01

00005ec0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    5ec0:	b580      	push	{r7, lr}
    5ec2:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5ec4:	4b15      	ldr	r3, [pc, #84]	; (5f1c <EIC_Handler+0x5c>)
    5ec6:	2200      	movs	r2, #0
    5ec8:	701a      	strb	r2, [r3, #0]
    5eca:	e020      	b.n	5f0e <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    5ecc:	4b13      	ldr	r3, [pc, #76]	; (5f1c <EIC_Handler+0x5c>)
    5ece:	781b      	ldrb	r3, [r3, #0]
    5ed0:	0018      	movs	r0, r3
    5ed2:	4b13      	ldr	r3, [pc, #76]	; (5f20 <EIC_Handler+0x60>)
    5ed4:	4798      	blx	r3
    5ed6:	1e03      	subs	r3, r0, #0
    5ed8:	d013      	beq.n	5f02 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    5eda:	4b10      	ldr	r3, [pc, #64]	; (5f1c <EIC_Handler+0x5c>)
    5edc:	781b      	ldrb	r3, [r3, #0]
    5ede:	0018      	movs	r0, r3
    5ee0:	4b10      	ldr	r3, [pc, #64]	; (5f24 <EIC_Handler+0x64>)
    5ee2:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    5ee4:	4b0d      	ldr	r3, [pc, #52]	; (5f1c <EIC_Handler+0x5c>)
    5ee6:	781b      	ldrb	r3, [r3, #0]
    5ee8:	001a      	movs	r2, r3
    5eea:	4b0f      	ldr	r3, [pc, #60]	; (5f28 <EIC_Handler+0x68>)
    5eec:	0092      	lsls	r2, r2, #2
    5eee:	58d3      	ldr	r3, [r2, r3]
    5ef0:	2b00      	cmp	r3, #0
    5ef2:	d006      	beq.n	5f02 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    5ef4:	4b09      	ldr	r3, [pc, #36]	; (5f1c <EIC_Handler+0x5c>)
    5ef6:	781b      	ldrb	r3, [r3, #0]
    5ef8:	001a      	movs	r2, r3
    5efa:	4b0b      	ldr	r3, [pc, #44]	; (5f28 <EIC_Handler+0x68>)
    5efc:	0092      	lsls	r2, r2, #2
    5efe:	58d3      	ldr	r3, [r2, r3]
    5f00:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5f02:	4b06      	ldr	r3, [pc, #24]	; (5f1c <EIC_Handler+0x5c>)
    5f04:	781b      	ldrb	r3, [r3, #0]
    5f06:	3301      	adds	r3, #1
    5f08:	b2da      	uxtb	r2, r3
    5f0a:	4b04      	ldr	r3, [pc, #16]	; (5f1c <EIC_Handler+0x5c>)
    5f0c:	701a      	strb	r2, [r3, #0]
    5f0e:	4b03      	ldr	r3, [pc, #12]	; (5f1c <EIC_Handler+0x5c>)
    5f10:	781b      	ldrb	r3, [r3, #0]
    5f12:	2b0f      	cmp	r3, #15
    5f14:	d9da      	bls.n	5ecc <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    5f16:	46c0      	nop			; (mov r8, r8)
    5f18:	46bd      	mov	sp, r7
    5f1a:	bd80      	pop	{r7, pc}
    5f1c:	200003f8 	.word	0x200003f8
    5f20:	00005d4d 	.word	0x00005d4d
    5f24:	00005d91 	.word	0x00005d91
    5f28:	200003fc 	.word	0x200003fc

00005f2c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5f2c:	b580      	push	{r7, lr}
    5f2e:	b082      	sub	sp, #8
    5f30:	af00      	add	r7, sp, #0
    5f32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5f34:	687b      	ldr	r3, [r7, #4]
    5f36:	2200      	movs	r2, #0
    5f38:	701a      	strb	r2, [r3, #0]
}
    5f3a:	46c0      	nop			; (mov r8, r8)
    5f3c:	46bd      	mov	sp, r7
    5f3e:	b002      	add	sp, #8
    5f40:	bd80      	pop	{r7, pc}
    5f42:	46c0      	nop			; (mov r8, r8)

00005f44 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5f44:	b580      	push	{r7, lr}
    5f46:	b082      	sub	sp, #8
    5f48:	af00      	add	r7, sp, #0
    5f4a:	0002      	movs	r2, r0
    5f4c:	6039      	str	r1, [r7, #0]
    5f4e:	1dfb      	adds	r3, r7, #7
    5f50:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5f52:	1dfb      	adds	r3, r7, #7
    5f54:	781b      	ldrb	r3, [r3, #0]
    5f56:	2b01      	cmp	r3, #1
    5f58:	d00a      	beq.n	5f70 <system_apb_clock_set_mask+0x2c>
    5f5a:	2b02      	cmp	r3, #2
    5f5c:	d00f      	beq.n	5f7e <system_apb_clock_set_mask+0x3a>
    5f5e:	2b00      	cmp	r3, #0
    5f60:	d114      	bne.n	5f8c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5f62:	4b0e      	ldr	r3, [pc, #56]	; (5f9c <system_apb_clock_set_mask+0x58>)
    5f64:	4a0d      	ldr	r2, [pc, #52]	; (5f9c <system_apb_clock_set_mask+0x58>)
    5f66:	6991      	ldr	r1, [r2, #24]
    5f68:	683a      	ldr	r2, [r7, #0]
    5f6a:	430a      	orrs	r2, r1
    5f6c:	619a      	str	r2, [r3, #24]
			break;
    5f6e:	e00f      	b.n	5f90 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5f70:	4b0a      	ldr	r3, [pc, #40]	; (5f9c <system_apb_clock_set_mask+0x58>)
    5f72:	4a0a      	ldr	r2, [pc, #40]	; (5f9c <system_apb_clock_set_mask+0x58>)
    5f74:	69d1      	ldr	r1, [r2, #28]
    5f76:	683a      	ldr	r2, [r7, #0]
    5f78:	430a      	orrs	r2, r1
    5f7a:	61da      	str	r2, [r3, #28]
			break;
    5f7c:	e008      	b.n	5f90 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5f7e:	4b07      	ldr	r3, [pc, #28]	; (5f9c <system_apb_clock_set_mask+0x58>)
    5f80:	4a06      	ldr	r2, [pc, #24]	; (5f9c <system_apb_clock_set_mask+0x58>)
    5f82:	6a11      	ldr	r1, [r2, #32]
    5f84:	683a      	ldr	r2, [r7, #0]
    5f86:	430a      	orrs	r2, r1
    5f88:	621a      	str	r2, [r3, #32]
			break;
    5f8a:	e001      	b.n	5f90 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5f8c:	2317      	movs	r3, #23
    5f8e:	e000      	b.n	5f92 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5f90:	2300      	movs	r3, #0
}
    5f92:	0018      	movs	r0, r3
    5f94:	46bd      	mov	sp, r7
    5f96:	b002      	add	sp, #8
    5f98:	bd80      	pop	{r7, pc}
    5f9a:	46c0      	nop			; (mov r8, r8)
    5f9c:	40000400 	.word	0x40000400

00005fa0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    5fa0:	b580      	push	{r7, lr}
    5fa2:	b082      	sub	sp, #8
    5fa4:	af00      	add	r7, sp, #0
    5fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5fa8:	687b      	ldr	r3, [r7, #4]
    5faa:	2280      	movs	r2, #128	; 0x80
    5fac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5fae:	687b      	ldr	r3, [r7, #4]
    5fb0:	2200      	movs	r2, #0
    5fb2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5fb4:	687b      	ldr	r3, [r7, #4]
    5fb6:	2201      	movs	r2, #1
    5fb8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5fba:	687b      	ldr	r3, [r7, #4]
    5fbc:	2200      	movs	r2, #0
    5fbe:	70da      	strb	r2, [r3, #3]
}
    5fc0:	46c0      	nop			; (mov r8, r8)
    5fc2:	46bd      	mov	sp, r7
    5fc4:	b002      	add	sp, #8
    5fc6:	bd80      	pop	{r7, pc}

00005fc8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    5fc8:	b580      	push	{r7, lr}
    5fca:	b082      	sub	sp, #8
    5fcc:	af00      	add	r7, sp, #0
    5fce:	0002      	movs	r2, r0
    5fd0:	1dfb      	adds	r3, r7, #7
    5fd2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5fd4:	4b06      	ldr	r3, [pc, #24]	; (5ff0 <system_interrupt_enable+0x28>)
    5fd6:	1dfa      	adds	r2, r7, #7
    5fd8:	7812      	ldrb	r2, [r2, #0]
    5fda:	0011      	movs	r1, r2
    5fdc:	221f      	movs	r2, #31
    5fde:	400a      	ands	r2, r1
    5fe0:	2101      	movs	r1, #1
    5fe2:	4091      	lsls	r1, r2
    5fe4:	000a      	movs	r2, r1
    5fe6:	601a      	str	r2, [r3, #0]
}
    5fe8:	46c0      	nop			; (mov r8, r8)
    5fea:	46bd      	mov	sp, r7
    5fec:	b002      	add	sp, #8
    5fee:	bd80      	pop	{r7, pc}
    5ff0:	e000e100 	.word	0xe000e100

00005ff4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    5ff4:	b580      	push	{r7, lr}
    5ff6:	b084      	sub	sp, #16
    5ff8:	af00      	add	r7, sp, #0
    5ffa:	0002      	movs	r2, r0
    5ffc:	1dfb      	adds	r3, r7, #7
    5ffe:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    6000:	230f      	movs	r3, #15
    6002:	18fb      	adds	r3, r7, r3
    6004:	1dfa      	adds	r2, r7, #7
    6006:	7812      	ldrb	r2, [r2, #0]
    6008:	0952      	lsrs	r2, r2, #5
    600a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    600c:	230f      	movs	r3, #15
    600e:	18fb      	adds	r3, r7, r3
    6010:	781b      	ldrb	r3, [r3, #0]
    6012:	2b00      	cmp	r3, #0
    6014:	d10c      	bne.n	6030 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6016:	4b09      	ldr	r3, [pc, #36]	; (603c <_extint_get_eic_from_channel+0x48>)
    6018:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    601a:	230f      	movs	r3, #15
    601c:	18fb      	adds	r3, r7, r3
    601e:	781b      	ldrb	r3, [r3, #0]
    6020:	009b      	lsls	r3, r3, #2
    6022:	2210      	movs	r2, #16
    6024:	4694      	mov	ip, r2
    6026:	44bc      	add	ip, r7
    6028:	4463      	add	r3, ip
    602a:	3b08      	subs	r3, #8
    602c:	681b      	ldr	r3, [r3, #0]
    602e:	e000      	b.n	6032 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    6030:	2300      	movs	r3, #0
	}
}
    6032:	0018      	movs	r0, r3
    6034:	46bd      	mov	sp, r7
    6036:	b004      	add	sp, #16
    6038:	bd80      	pop	{r7, pc}
    603a:	46c0      	nop			; (mov r8, r8)
    603c:	40001800 	.word	0x40001800

00006040 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    6040:	b580      	push	{r7, lr}
    6042:	b082      	sub	sp, #8
    6044:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6046:	4b0f      	ldr	r3, [pc, #60]	; (6084 <extint_is_syncing+0x44>)
    6048:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    604a:	2300      	movs	r3, #0
    604c:	607b      	str	r3, [r7, #4]
    604e:	e011      	b.n	6074 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6050:	687b      	ldr	r3, [r7, #4]
    6052:	009b      	lsls	r3, r3, #2
    6054:	2208      	movs	r2, #8
    6056:	4694      	mov	ip, r2
    6058:	44bc      	add	ip, r7
    605a:	4463      	add	r3, ip
    605c:	3b08      	subs	r3, #8
    605e:	681b      	ldr	r3, [r3, #0]
    6060:	785b      	ldrb	r3, [r3, #1]
    6062:	b2db      	uxtb	r3, r3
    6064:	b25b      	sxtb	r3, r3
    6066:	2b00      	cmp	r3, #0
    6068:	da01      	bge.n	606e <extint_is_syncing+0x2e>
			return true;
    606a:	2301      	movs	r3, #1
    606c:	e006      	b.n	607c <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    606e:	687b      	ldr	r3, [r7, #4]
    6070:	3301      	adds	r3, #1
    6072:	607b      	str	r3, [r7, #4]
    6074:	687b      	ldr	r3, [r7, #4]
    6076:	2b00      	cmp	r3, #0
    6078:	d0ea      	beq.n	6050 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    607a:	2300      	movs	r3, #0
}
    607c:	0018      	movs	r0, r3
    607e:	46bd      	mov	sp, r7
    6080:	b002      	add	sp, #8
    6082:	bd80      	pop	{r7, pc}
    6084:	40001800 	.word	0x40001800

00006088 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    6088:	b580      	push	{r7, lr}
    608a:	b084      	sub	sp, #16
    608c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    608e:	4b2d      	ldr	r3, [pc, #180]	; (6144 <_system_extint_init+0xbc>)
    6090:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    6092:	2140      	movs	r1, #64	; 0x40
    6094:	2000      	movs	r0, #0
    6096:	4b2c      	ldr	r3, [pc, #176]	; (6148 <_system_extint_init+0xc0>)
    6098:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    609a:	003b      	movs	r3, r7
    609c:	0018      	movs	r0, r3
    609e:	4b2b      	ldr	r3, [pc, #172]	; (614c <_system_extint_init+0xc4>)
    60a0:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    60a2:	003b      	movs	r3, r7
    60a4:	2200      	movs	r2, #0
    60a6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    60a8:	003b      	movs	r3, r7
    60aa:	0019      	movs	r1, r3
    60ac:	2005      	movs	r0, #5
    60ae:	4b28      	ldr	r3, [pc, #160]	; (6150 <_system_extint_init+0xc8>)
    60b0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    60b2:	2005      	movs	r0, #5
    60b4:	4b27      	ldr	r3, [pc, #156]	; (6154 <_system_extint_init+0xcc>)
    60b6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    60b8:	2300      	movs	r3, #0
    60ba:	60fb      	str	r3, [r7, #12]
    60bc:	e018      	b.n	60f0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    60be:	68fb      	ldr	r3, [r7, #12]
    60c0:	009b      	lsls	r3, r3, #2
    60c2:	2210      	movs	r2, #16
    60c4:	4694      	mov	ip, r2
    60c6:	44bc      	add	ip, r7
    60c8:	4463      	add	r3, ip
    60ca:	3b0c      	subs	r3, #12
    60cc:	681a      	ldr	r2, [r3, #0]
    60ce:	68fb      	ldr	r3, [r7, #12]
    60d0:	009b      	lsls	r3, r3, #2
    60d2:	2110      	movs	r1, #16
    60d4:	468c      	mov	ip, r1
    60d6:	44bc      	add	ip, r7
    60d8:	4463      	add	r3, ip
    60da:	3b0c      	subs	r3, #12
    60dc:	681b      	ldr	r3, [r3, #0]
    60de:	781b      	ldrb	r3, [r3, #0]
    60e0:	b2db      	uxtb	r3, r3
    60e2:	2101      	movs	r1, #1
    60e4:	430b      	orrs	r3, r1
    60e6:	b2db      	uxtb	r3, r3
    60e8:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    60ea:	68fb      	ldr	r3, [r7, #12]
    60ec:	3301      	adds	r3, #1
    60ee:	60fb      	str	r3, [r7, #12]
    60f0:	68fb      	ldr	r3, [r7, #12]
    60f2:	2b00      	cmp	r3, #0
    60f4:	d0e3      	beq.n	60be <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    60f6:	46c0      	nop			; (mov r8, r8)
    60f8:	4b17      	ldr	r3, [pc, #92]	; (6158 <_system_extint_init+0xd0>)
    60fa:	4798      	blx	r3
    60fc:	1e03      	subs	r3, r0, #0
    60fe:	d1fb      	bne.n	60f8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6100:	230b      	movs	r3, #11
    6102:	18fb      	adds	r3, r7, r3
    6104:	2200      	movs	r2, #0
    6106:	701a      	strb	r2, [r3, #0]
    6108:	e00d      	b.n	6126 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    610a:	230b      	movs	r3, #11
    610c:	18fb      	adds	r3, r7, r3
    610e:	781a      	ldrb	r2, [r3, #0]
    6110:	4b12      	ldr	r3, [pc, #72]	; (615c <_system_extint_init+0xd4>)
    6112:	0092      	lsls	r2, r2, #2
    6114:	2100      	movs	r1, #0
    6116:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6118:	230b      	movs	r3, #11
    611a:	18fb      	adds	r3, r7, r3
    611c:	781a      	ldrb	r2, [r3, #0]
    611e:	230b      	movs	r3, #11
    6120:	18fb      	adds	r3, r7, r3
    6122:	3201      	adds	r2, #1
    6124:	701a      	strb	r2, [r3, #0]
    6126:	230b      	movs	r3, #11
    6128:	18fb      	adds	r3, r7, r3
    612a:	781b      	ldrb	r3, [r3, #0]
    612c:	2b0f      	cmp	r3, #15
    612e:	d9ec      	bls.n	610a <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    6130:	2004      	movs	r0, #4
    6132:	4b0b      	ldr	r3, [pc, #44]	; (6160 <_system_extint_init+0xd8>)
    6134:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    6136:	4b0b      	ldr	r3, [pc, #44]	; (6164 <_system_extint_init+0xdc>)
    6138:	4798      	blx	r3
}
    613a:	46c0      	nop			; (mov r8, r8)
    613c:	46bd      	mov	sp, r7
    613e:	b004      	add	sp, #16
    6140:	bd80      	pop	{r7, pc}
    6142:	46c0      	nop			; (mov r8, r8)
    6144:	40001800 	.word	0x40001800
    6148:	00005f45 	.word	0x00005f45
    614c:	00005f2d 	.word	0x00005f2d
    6150:	00008e3d 	.word	0x00008e3d
    6154:	00008e81 	.word	0x00008e81
    6158:	00006041 	.word	0x00006041
    615c:	200003fc 	.word	0x200003fc
    6160:	00005fc9 	.word	0x00005fc9
    6164:	00006169 	.word	0x00006169

00006168 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    6168:	b580      	push	{r7, lr}
    616a:	b082      	sub	sp, #8
    616c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    616e:	4b15      	ldr	r3, [pc, #84]	; (61c4 <_extint_enable+0x5c>)
    6170:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6172:	2300      	movs	r3, #0
    6174:	607b      	str	r3, [r7, #4]
    6176:	e018      	b.n	61aa <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    6178:	687b      	ldr	r3, [r7, #4]
    617a:	009b      	lsls	r3, r3, #2
    617c:	2208      	movs	r2, #8
    617e:	4694      	mov	ip, r2
    6180:	44bc      	add	ip, r7
    6182:	4463      	add	r3, ip
    6184:	3b08      	subs	r3, #8
    6186:	681a      	ldr	r2, [r3, #0]
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	009b      	lsls	r3, r3, #2
    618c:	2108      	movs	r1, #8
    618e:	468c      	mov	ip, r1
    6190:	44bc      	add	ip, r7
    6192:	4463      	add	r3, ip
    6194:	3b08      	subs	r3, #8
    6196:	681b      	ldr	r3, [r3, #0]
    6198:	781b      	ldrb	r3, [r3, #0]
    619a:	b2db      	uxtb	r3, r3
    619c:	2102      	movs	r1, #2
    619e:	430b      	orrs	r3, r1
    61a0:	b2db      	uxtb	r3, r3
    61a2:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	3301      	adds	r3, #1
    61a8:	607b      	str	r3, [r7, #4]
    61aa:	687b      	ldr	r3, [r7, #4]
    61ac:	2b00      	cmp	r3, #0
    61ae:	d0e3      	beq.n	6178 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    61b0:	46c0      	nop			; (mov r8, r8)
    61b2:	4b05      	ldr	r3, [pc, #20]	; (61c8 <_extint_enable+0x60>)
    61b4:	4798      	blx	r3
    61b6:	1e03      	subs	r3, r0, #0
    61b8:	d1fb      	bne.n	61b2 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    61ba:	46c0      	nop			; (mov r8, r8)
    61bc:	46bd      	mov	sp, r7
    61be:	b002      	add	sp, #8
    61c0:	bd80      	pop	{r7, pc}
    61c2:	46c0      	nop			; (mov r8, r8)
    61c4:	40001800 	.word	0x40001800
    61c8:	00006041 	.word	0x00006041

000061cc <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    61cc:	b580      	push	{r7, lr}
    61ce:	b082      	sub	sp, #8
    61d0:	af00      	add	r7, sp, #0
    61d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    61d4:	687b      	ldr	r3, [r7, #4]
    61d6:	2200      	movs	r2, #0
    61d8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    61da:	687b      	ldr	r3, [r7, #4]
    61dc:	2200      	movs	r2, #0
    61de:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	2201      	movs	r2, #1
    61e4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    61e6:	687b      	ldr	r3, [r7, #4]
    61e8:	2201      	movs	r2, #1
    61ea:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    61ec:	687b      	ldr	r3, [r7, #4]
    61ee:	2200      	movs	r2, #0
    61f0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    61f2:	687b      	ldr	r3, [r7, #4]
    61f4:	2202      	movs	r2, #2
    61f6:	72da      	strb	r2, [r3, #11]
}
    61f8:	46c0      	nop			; (mov r8, r8)
    61fa:	46bd      	mov	sp, r7
    61fc:	b002      	add	sp, #8
    61fe:	bd80      	pop	{r7, pc}

00006200 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    6200:	b580      	push	{r7, lr}
    6202:	b086      	sub	sp, #24
    6204:	af00      	add	r7, sp, #0
    6206:	0002      	movs	r2, r0
    6208:	6039      	str	r1, [r7, #0]
    620a:	1dfb      	adds	r3, r7, #7
    620c:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    620e:	2308      	movs	r3, #8
    6210:	18fb      	adds	r3, r7, r3
    6212:	0018      	movs	r0, r3
    6214:	4b36      	ldr	r3, [pc, #216]	; (62f0 <extint_chan_set_config+0xf0>)
    6216:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    6218:	683b      	ldr	r3, [r7, #0]
    621a:	685b      	ldr	r3, [r3, #4]
    621c:	b2da      	uxtb	r2, r3
    621e:	2308      	movs	r3, #8
    6220:	18fb      	adds	r3, r7, r3
    6222:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6224:	2308      	movs	r3, #8
    6226:	18fb      	adds	r3, r7, r3
    6228:	2200      	movs	r2, #0
    622a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    622c:	683b      	ldr	r3, [r7, #0]
    622e:	7a1a      	ldrb	r2, [r3, #8]
    6230:	2308      	movs	r3, #8
    6232:	18fb      	adds	r3, r7, r3
    6234:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    6236:	683b      	ldr	r3, [r7, #0]
    6238:	681b      	ldr	r3, [r3, #0]
    623a:	b2db      	uxtb	r3, r3
    623c:	2208      	movs	r2, #8
    623e:	18ba      	adds	r2, r7, r2
    6240:	0011      	movs	r1, r2
    6242:	0018      	movs	r0, r3
    6244:	4b2b      	ldr	r3, [pc, #172]	; (62f4 <extint_chan_set_config+0xf4>)
    6246:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    6248:	1dfb      	adds	r3, r7, #7
    624a:	781b      	ldrb	r3, [r3, #0]
    624c:	0018      	movs	r0, r3
    624e:	4b2a      	ldr	r3, [pc, #168]	; (62f8 <extint_chan_set_config+0xf8>)
    6250:	4798      	blx	r3
    6252:	0003      	movs	r3, r0
    6254:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    6256:	1dfb      	adds	r3, r7, #7
    6258:	781b      	ldrb	r3, [r3, #0]
    625a:	2207      	movs	r2, #7
    625c:	4013      	ands	r3, r2
    625e:	009b      	lsls	r3, r3, #2
    6260:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    6262:	683b      	ldr	r3, [r7, #0]
    6264:	7adb      	ldrb	r3, [r3, #11]
    6266:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    6268:	683b      	ldr	r3, [r7, #0]
    626a:	7a9b      	ldrb	r3, [r3, #10]
    626c:	2b00      	cmp	r3, #0
    626e:	d003      	beq.n	6278 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    6270:	697b      	ldr	r3, [r7, #20]
    6272:	2208      	movs	r2, #8
    6274:	4313      	orrs	r3, r2
    6276:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    6278:	1dfb      	adds	r3, r7, #7
    627a:	781b      	ldrb	r3, [r3, #0]
    627c:	08db      	lsrs	r3, r3, #3
    627e:	b2db      	uxtb	r3, r3
    6280:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    6282:	1dfb      	adds	r3, r7, #7
    6284:	781b      	ldrb	r3, [r3, #0]
    6286:	08db      	lsrs	r3, r3, #3
    6288:	b2db      	uxtb	r3, r3
    628a:	001a      	movs	r2, r3
    628c:	693b      	ldr	r3, [r7, #16]
    628e:	3206      	adds	r2, #6
    6290:	0092      	lsls	r2, r2, #2
    6292:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6294:	210f      	movs	r1, #15
    6296:	68fa      	ldr	r2, [r7, #12]
    6298:	4091      	lsls	r1, r2
    629a:	000a      	movs	r2, r1
    629c:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    629e:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    62a0:	6979      	ldr	r1, [r7, #20]
    62a2:	68fb      	ldr	r3, [r7, #12]
    62a4:	4099      	lsls	r1, r3
    62a6:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    62a8:	431a      	orrs	r2, r3
    62aa:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    62ac:	693b      	ldr	r3, [r7, #16]
    62ae:	1d82      	adds	r2, r0, #6
    62b0:	0092      	lsls	r2, r2, #2
    62b2:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    62b4:	683b      	ldr	r3, [r7, #0]
    62b6:	7a5b      	ldrb	r3, [r3, #9]
    62b8:	2b00      	cmp	r3, #0
    62ba:	d00a      	beq.n	62d2 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    62bc:	693b      	ldr	r3, [r7, #16]
    62be:	695a      	ldr	r2, [r3, #20]
    62c0:	1dfb      	adds	r3, r7, #7
    62c2:	781b      	ldrb	r3, [r3, #0]
    62c4:	2101      	movs	r1, #1
    62c6:	4099      	lsls	r1, r3
    62c8:	000b      	movs	r3, r1
    62ca:	431a      	orrs	r2, r3
    62cc:	693b      	ldr	r3, [r7, #16]
    62ce:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    62d0:	e00a      	b.n	62e8 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    62d2:	693b      	ldr	r3, [r7, #16]
    62d4:	695b      	ldr	r3, [r3, #20]
    62d6:	1dfa      	adds	r2, r7, #7
    62d8:	7812      	ldrb	r2, [r2, #0]
    62da:	2101      	movs	r1, #1
    62dc:	4091      	lsls	r1, r2
    62de:	000a      	movs	r2, r1
    62e0:	43d2      	mvns	r2, r2
    62e2:	401a      	ands	r2, r3
    62e4:	693b      	ldr	r3, [r7, #16]
    62e6:	615a      	str	r2, [r3, #20]
	}
}
    62e8:	46c0      	nop			; (mov r8, r8)
    62ea:	46bd      	mov	sp, r7
    62ec:	b006      	add	sp, #24
    62ee:	bd80      	pop	{r7, pc}
    62f0:	00005fa1 	.word	0x00005fa1
    62f4:	00009129 	.word	0x00009129
    62f8:	00005ff5 	.word	0x00005ff5

000062fc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    62fc:	b580      	push	{r7, lr}
    62fe:	b082      	sub	sp, #8
    6300:	af00      	add	r7, sp, #0
    6302:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6304:	687b      	ldr	r3, [r7, #4]
    6306:	2280      	movs	r2, #128	; 0x80
    6308:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    630a:	687b      	ldr	r3, [r7, #4]
    630c:	2200      	movs	r2, #0
    630e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6310:	687b      	ldr	r3, [r7, #4]
    6312:	2201      	movs	r2, #1
    6314:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6316:	687b      	ldr	r3, [r7, #4]
    6318:	2200      	movs	r2, #0
    631a:	70da      	strb	r2, [r3, #3]
}
    631c:	46c0      	nop			; (mov r8, r8)
    631e:	46bd      	mov	sp, r7
    6320:	b002      	add	sp, #8
    6322:	bd80      	pop	{r7, pc}

00006324 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6324:	b580      	push	{r7, lr}
    6326:	b084      	sub	sp, #16
    6328:	af00      	add	r7, sp, #0
    632a:	0002      	movs	r2, r0
    632c:	6039      	str	r1, [r7, #0]
    632e:	1dfb      	adds	r3, r7, #7
    6330:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    6332:	230c      	movs	r3, #12
    6334:	18fb      	adds	r3, r7, r3
    6336:	0018      	movs	r0, r3
    6338:	4b10      	ldr	r3, [pc, #64]	; (637c <port_pin_set_config+0x58>)
    633a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    633c:	230c      	movs	r3, #12
    633e:	18fb      	adds	r3, r7, r3
    6340:	2280      	movs	r2, #128	; 0x80
    6342:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6344:	683b      	ldr	r3, [r7, #0]
    6346:	781a      	ldrb	r2, [r3, #0]
    6348:	230c      	movs	r3, #12
    634a:	18fb      	adds	r3, r7, r3
    634c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    634e:	683b      	ldr	r3, [r7, #0]
    6350:	785a      	ldrb	r2, [r3, #1]
    6352:	230c      	movs	r3, #12
    6354:	18fb      	adds	r3, r7, r3
    6356:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6358:	683b      	ldr	r3, [r7, #0]
    635a:	789a      	ldrb	r2, [r3, #2]
    635c:	230c      	movs	r3, #12
    635e:	18fb      	adds	r3, r7, r3
    6360:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6362:	230c      	movs	r3, #12
    6364:	18fa      	adds	r2, r7, r3
    6366:	1dfb      	adds	r3, r7, #7
    6368:	781b      	ldrb	r3, [r3, #0]
    636a:	0011      	movs	r1, r2
    636c:	0018      	movs	r0, r3
    636e:	4b04      	ldr	r3, [pc, #16]	; (6380 <port_pin_set_config+0x5c>)
    6370:	4798      	blx	r3
}
    6372:	46c0      	nop			; (mov r8, r8)
    6374:	46bd      	mov	sp, r7
    6376:	b004      	add	sp, #16
    6378:	bd80      	pop	{r7, pc}
    637a:	46c0      	nop			; (mov r8, r8)
    637c:	000062fd 	.word	0x000062fd
    6380:	00009129 	.word	0x00009129

00006384 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6384:	b580      	push	{r7, lr}
    6386:	b082      	sub	sp, #8
    6388:	af00      	add	r7, sp, #0
    638a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    638c:	687b      	ldr	r3, [r7, #4]
    638e:	2200      	movs	r2, #0
    6390:	701a      	strb	r2, [r3, #0]
}
    6392:	46c0      	nop			; (mov r8, r8)
    6394:	46bd      	mov	sp, r7
    6396:	b002      	add	sp, #8
    6398:	bd80      	pop	{r7, pc}
    639a:	46c0      	nop			; (mov r8, r8)

0000639c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    639c:	b5f0      	push	{r4, r5, r6, r7, lr}
    639e:	b08d      	sub	sp, #52	; 0x34
    63a0:	af00      	add	r7, sp, #0
    63a2:	60b8      	str	r0, [r7, #8]
    63a4:	60f9      	str	r1, [r7, #12]
    63a6:	603a      	str	r2, [r7, #0]
    63a8:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    63aa:	2300      	movs	r3, #0
    63ac:	2400      	movs	r4, #0
    63ae:	623b      	str	r3, [r7, #32]
    63b0:	627c      	str	r4, [r7, #36]	; 0x24
    63b2:	2300      	movs	r3, #0
    63b4:	2400      	movs	r4, #0
    63b6:	61bb      	str	r3, [r7, #24]
    63b8:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    63ba:	233f      	movs	r3, #63	; 0x3f
    63bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    63be:	e053      	b.n	6468 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    63c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63c2:	3b20      	subs	r3, #32
    63c4:	2b00      	cmp	r3, #0
    63c6:	db04      	blt.n	63d2 <long_division+0x36>
    63c8:	2201      	movs	r2, #1
    63ca:	409a      	lsls	r2, r3
    63cc:	0013      	movs	r3, r2
    63ce:	617b      	str	r3, [r7, #20]
    63d0:	e00b      	b.n	63ea <long_division+0x4e>
    63d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63d4:	2220      	movs	r2, #32
    63d6:	1ad3      	subs	r3, r2, r3
    63d8:	2201      	movs	r2, #1
    63da:	40da      	lsrs	r2, r3
    63dc:	0013      	movs	r3, r2
    63de:	2100      	movs	r1, #0
    63e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    63e2:	4091      	lsls	r1, r2
    63e4:	000a      	movs	r2, r1
    63e6:	4313      	orrs	r3, r2
    63e8:	617b      	str	r3, [r7, #20]
    63ea:	2201      	movs	r2, #1
    63ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    63ee:	409a      	lsls	r2, r3
    63f0:	0013      	movs	r3, r2
    63f2:	613b      	str	r3, [r7, #16]

		r = r << 1;
    63f4:	69bb      	ldr	r3, [r7, #24]
    63f6:	69fc      	ldr	r4, [r7, #28]
    63f8:	18db      	adds	r3, r3, r3
    63fa:	4164      	adcs	r4, r4
    63fc:	61bb      	str	r3, [r7, #24]
    63fe:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    6400:	68bb      	ldr	r3, [r7, #8]
    6402:	693a      	ldr	r2, [r7, #16]
    6404:	401a      	ands	r2, r3
    6406:	0015      	movs	r5, r2
    6408:	68fb      	ldr	r3, [r7, #12]
    640a:	697a      	ldr	r2, [r7, #20]
    640c:	401a      	ands	r2, r3
    640e:	0016      	movs	r6, r2
    6410:	002b      	movs	r3, r5
    6412:	4333      	orrs	r3, r6
    6414:	d007      	beq.n	6426 <long_division+0x8a>
			r |= 0x01;
    6416:	69bb      	ldr	r3, [r7, #24]
    6418:	2201      	movs	r2, #1
    641a:	4313      	orrs	r3, r2
    641c:	61bb      	str	r3, [r7, #24]
    641e:	69fb      	ldr	r3, [r7, #28]
    6420:	2200      	movs	r2, #0
    6422:	4313      	orrs	r3, r2
    6424:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    6426:	687a      	ldr	r2, [r7, #4]
    6428:	69fb      	ldr	r3, [r7, #28]
    642a:	429a      	cmp	r2, r3
    642c:	d819      	bhi.n	6462 <long_division+0xc6>
    642e:	687a      	ldr	r2, [r7, #4]
    6430:	69fb      	ldr	r3, [r7, #28]
    6432:	429a      	cmp	r2, r3
    6434:	d103      	bne.n	643e <long_division+0xa2>
    6436:	683a      	ldr	r2, [r7, #0]
    6438:	69bb      	ldr	r3, [r7, #24]
    643a:	429a      	cmp	r2, r3
    643c:	d811      	bhi.n	6462 <long_division+0xc6>
			r = r - d;
    643e:	69b9      	ldr	r1, [r7, #24]
    6440:	69fa      	ldr	r2, [r7, #28]
    6442:	683b      	ldr	r3, [r7, #0]
    6444:	687c      	ldr	r4, [r7, #4]
    6446:	1ac9      	subs	r1, r1, r3
    6448:	41a2      	sbcs	r2, r4
    644a:	000b      	movs	r3, r1
    644c:	0014      	movs	r4, r2
    644e:	61bb      	str	r3, [r7, #24]
    6450:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    6452:	6a3a      	ldr	r2, [r7, #32]
    6454:	693b      	ldr	r3, [r7, #16]
    6456:	4313      	orrs	r3, r2
    6458:	623b      	str	r3, [r7, #32]
    645a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    645c:	697b      	ldr	r3, [r7, #20]
    645e:	4313      	orrs	r3, r2
    6460:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    6462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6464:	3b01      	subs	r3, #1
    6466:	62fb      	str	r3, [r7, #44]	; 0x2c
    6468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    646a:	2b00      	cmp	r3, #0
    646c:	daa8      	bge.n	63c0 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    646e:	6a3b      	ldr	r3, [r7, #32]
    6470:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    6472:	0018      	movs	r0, r3
    6474:	0021      	movs	r1, r4
    6476:	46bd      	mov	sp, r7
    6478:	b00d      	add	sp, #52	; 0x34
    647a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000647c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    647c:	b580      	push	{r7, lr}
    647e:	b086      	sub	sp, #24
    6480:	af00      	add	r7, sp, #0
    6482:	60f8      	str	r0, [r7, #12]
    6484:	60b9      	str	r1, [r7, #8]
    6486:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    6488:	2316      	movs	r3, #22
    648a:	18fb      	adds	r3, r7, r3
    648c:	2200      	movs	r2, #0
    648e:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    6490:	68bb      	ldr	r3, [r7, #8]
    6492:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    6494:	68bb      	ldr	r3, [r7, #8]
    6496:	085a      	lsrs	r2, r3, #1
    6498:	68fb      	ldr	r3, [r7, #12]
    649a:	429a      	cmp	r2, r3
    649c:	d201      	bcs.n	64a2 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    649e:	2340      	movs	r3, #64	; 0x40
    64a0:	e026      	b.n	64f0 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    64a2:	68bb      	ldr	r3, [r7, #8]
    64a4:	085b      	lsrs	r3, r3, #1
    64a6:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    64a8:	e00a      	b.n	64c0 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    64aa:	693a      	ldr	r2, [r7, #16]
    64ac:	68fb      	ldr	r3, [r7, #12]
    64ae:	1ad3      	subs	r3, r2, r3
    64b0:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    64b2:	2316      	movs	r3, #22
    64b4:	18fb      	adds	r3, r7, r3
    64b6:	881a      	ldrh	r2, [r3, #0]
    64b8:	2316      	movs	r3, #22
    64ba:	18fb      	adds	r3, r7, r3
    64bc:	3201      	adds	r2, #1
    64be:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    64c0:	693a      	ldr	r2, [r7, #16]
    64c2:	68fb      	ldr	r3, [r7, #12]
    64c4:	429a      	cmp	r2, r3
    64c6:	d2f0      	bcs.n	64aa <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    64c8:	2316      	movs	r3, #22
    64ca:	18fb      	adds	r3, r7, r3
    64cc:	2216      	movs	r2, #22
    64ce:	18ba      	adds	r2, r7, r2
    64d0:	8812      	ldrh	r2, [r2, #0]
    64d2:	3a01      	subs	r2, #1
    64d4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    64d6:	2316      	movs	r3, #22
    64d8:	18fb      	adds	r3, r7, r3
    64da:	881b      	ldrh	r3, [r3, #0]
    64dc:	2bff      	cmp	r3, #255	; 0xff
    64de:	d901      	bls.n	64e4 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    64e0:	2340      	movs	r3, #64	; 0x40
    64e2:	e005      	b.n	64f0 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    64e4:	687b      	ldr	r3, [r7, #4]
    64e6:	2216      	movs	r2, #22
    64e8:	18ba      	adds	r2, r7, r2
    64ea:	8812      	ldrh	r2, [r2, #0]
    64ec:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    64ee:	2300      	movs	r3, #0
	}
}
    64f0:	0018      	movs	r0, r3
    64f2:	46bd      	mov	sp, r7
    64f4:	b006      	add	sp, #24
    64f6:	bd80      	pop	{r7, pc}

000064f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    64f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    64fa:	b0a1      	sub	sp, #132	; 0x84
    64fc:	af00      	add	r7, sp, #0
    64fe:	64f8      	str	r0, [r7, #76]	; 0x4c
    6500:	64b9      	str	r1, [r7, #72]	; 0x48
    6502:	647a      	str	r2, [r7, #68]	; 0x44
    6504:	2243      	movs	r2, #67	; 0x43
    6506:	18ba      	adds	r2, r7, r2
    6508:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    650a:	2300      	movs	r3, #0
    650c:	2400      	movs	r4, #0
    650e:	673b      	str	r3, [r7, #112]	; 0x70
    6510:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    6512:	2300      	movs	r3, #0
    6514:	2400      	movs	r4, #0
    6516:	66bb      	str	r3, [r7, #104]	; 0x68
    6518:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    651a:	2300      	movs	r3, #0
    651c:	2400      	movs	r4, #0
    651e:	67bb      	str	r3, [r7, #120]	; 0x78
    6520:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    6522:	2300      	movs	r3, #0
    6524:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    6526:	2358      	movs	r3, #88	; 0x58
    6528:	2240      	movs	r2, #64	; 0x40
    652a:	4694      	mov	ip, r2
    652c:	44bc      	add	ip, r7
    652e:	4463      	add	r3, ip
    6530:	781a      	ldrb	r2, [r3, #0]
    6532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6534:	435a      	muls	r2, r3
    6536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6538:	429a      	cmp	r2, r3
    653a:	d901      	bls.n	6540 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    653c:	2340      	movs	r3, #64	; 0x40
    653e:	e0b3      	b.n	66a8 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    6540:	2343      	movs	r3, #67	; 0x43
    6542:	18fb      	adds	r3, r7, r3
    6544:	781b      	ldrb	r3, [r3, #0]
    6546:	2b00      	cmp	r3, #0
    6548:	d13d      	bne.n	65c6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    654a:	2358      	movs	r3, #88	; 0x58
    654c:	2240      	movs	r2, #64	; 0x40
    654e:	4694      	mov	ip, r2
    6550:	44bc      	add	ip, r7
    6552:	4463      	add	r3, ip
    6554:	781b      	ldrb	r3, [r3, #0]
    6556:	b2db      	uxtb	r3, r3
    6558:	613b      	str	r3, [r7, #16]
    655a:	2300      	movs	r3, #0
    655c:	617b      	str	r3, [r7, #20]
    655e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6560:	60bb      	str	r3, [r7, #8]
    6562:	2300      	movs	r3, #0
    6564:	60fb      	str	r3, [r7, #12]
    6566:	4c52      	ldr	r4, [pc, #328]	; (66b0 <_sercom_get_async_baud_val+0x1b8>)
    6568:	68ba      	ldr	r2, [r7, #8]
    656a:	68fb      	ldr	r3, [r7, #12]
    656c:	6938      	ldr	r0, [r7, #16]
    656e:	6979      	ldr	r1, [r7, #20]
    6570:	47a0      	blx	r4
    6572:	0003      	movs	r3, r0
    6574:	000c      	movs	r4, r1
    6576:	001b      	movs	r3, r3
    6578:	65fb      	str	r3, [r7, #92]	; 0x5c
    657a:	2300      	movs	r3, #0
    657c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    657e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6580:	603b      	str	r3, [r7, #0]
    6582:	2300      	movs	r3, #0
    6584:	607b      	str	r3, [r7, #4]
    6586:	6db8      	ldr	r0, [r7, #88]	; 0x58
    6588:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    658a:	683a      	ldr	r2, [r7, #0]
    658c:	687b      	ldr	r3, [r7, #4]
    658e:	4c49      	ldr	r4, [pc, #292]	; (66b4 <_sercom_get_async_baud_val+0x1bc>)
    6590:	47a0      	blx	r4
    6592:	0003      	movs	r3, r0
    6594:	000c      	movs	r4, r1
    6596:	673b      	str	r3, [r7, #112]	; 0x70
    6598:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    659a:	2100      	movs	r1, #0
    659c:	2201      	movs	r2, #1
    659e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    65a0:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    65a2:	1ac9      	subs	r1, r1, r3
    65a4:	41a2      	sbcs	r2, r4
    65a6:	000b      	movs	r3, r1
    65a8:	0014      	movs	r4, r2
    65aa:	66bb      	str	r3, [r7, #104]	; 0x68
    65ac:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    65ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    65b0:	0c1b      	lsrs	r3, r3, #16
    65b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    65b4:	0416      	lsls	r6, r2, #16
    65b6:	431e      	orrs	r6, r3
    65b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    65ba:	041d      	lsls	r5, r3, #16
    65bc:	0033      	movs	r3, r6
    65be:	67bb      	str	r3, [r7, #120]	; 0x78
    65c0:	2300      	movs	r3, #0
    65c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    65c4:	e06a      	b.n	669c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    65c6:	2343      	movs	r3, #67	; 0x43
    65c8:	18fb      	adds	r3, r7, r3
    65ca:	781b      	ldrb	r3, [r3, #0]
    65cc:	2b01      	cmp	r3, #1
    65ce:	d165      	bne.n	669c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    65d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    65d2:	633b      	str	r3, [r7, #48]	; 0x30
    65d4:	2300      	movs	r3, #0
    65d6:	637b      	str	r3, [r7, #52]	; 0x34
    65d8:	2358      	movs	r3, #88	; 0x58
    65da:	2240      	movs	r2, #64	; 0x40
    65dc:	4694      	mov	ip, r2
    65de:	44bc      	add	ip, r7
    65e0:	4463      	add	r3, ip
    65e2:	781b      	ldrb	r3, [r3, #0]
    65e4:	b2db      	uxtb	r3, r3
    65e6:	62bb      	str	r3, [r7, #40]	; 0x28
    65e8:	2300      	movs	r3, #0
    65ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    65ec:	4c30      	ldr	r4, [pc, #192]	; (66b0 <_sercom_get_async_baud_val+0x1b8>)
    65ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    65f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    65f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    65f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
    65f6:	47a0      	blx	r4
    65f8:	0003      	movs	r3, r0
    65fa:	000c      	movs	r4, r1
    65fc:	65bb      	str	r3, [r7, #88]	; 0x58
    65fe:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    6600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6602:	623b      	str	r3, [r7, #32]
    6604:	2300      	movs	r3, #0
    6606:	627b      	str	r3, [r7, #36]	; 0x24
    6608:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    660a:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    660c:	001a      	movs	r2, r3
    660e:	0023      	movs	r3, r4
    6610:	6a38      	ldr	r0, [r7, #32]
    6612:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6614:	4c27      	ldr	r4, [pc, #156]	; (66b4 <_sercom_get_async_baud_val+0x1bc>)
    6616:	47a0      	blx	r4
    6618:	0003      	movs	r3, r0
    661a:	000c      	movs	r4, r1
    661c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    661e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6620:	2380      	movs	r3, #128	; 0x80
    6622:	019b      	lsls	r3, r3, #6
    6624:	429a      	cmp	r2, r3
    6626:	d901      	bls.n	662c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6628:	2340      	movs	r3, #64	; 0x40
    662a:	e03d      	b.n	66a8 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    662c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    662e:	61bb      	str	r3, [r7, #24]
    6630:	2300      	movs	r3, #0
    6632:	61fb      	str	r3, [r7, #28]
    6634:	69b9      	ldr	r1, [r7, #24]
    6636:	69fa      	ldr	r2, [r7, #28]
    6638:	000b      	movs	r3, r1
    663a:	0f5b      	lsrs	r3, r3, #29
    663c:	0010      	movs	r0, r2
    663e:	00c0      	lsls	r0, r0, #3
    6640:	63f8      	str	r0, [r7, #60]	; 0x3c
    6642:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    6644:	4318      	orrs	r0, r3
    6646:	63f8      	str	r0, [r7, #60]	; 0x3c
    6648:	000b      	movs	r3, r1
    664a:	00db      	lsls	r3, r3, #3
    664c:	63bb      	str	r3, [r7, #56]	; 0x38
    664e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6650:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    6652:	001a      	movs	r2, r3
    6654:	0023      	movs	r3, r4
    6656:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    6658:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    665a:	4c16      	ldr	r4, [pc, #88]	; (66b4 <_sercom_get_async_baud_val+0x1bc>)
    665c:	47a0      	blx	r4
    665e:	0003      	movs	r3, r0
    6660:	000c      	movs	r4, r1
    6662:	65bb      	str	r3, [r7, #88]	; 0x58
    6664:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    6666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6668:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    666a:	b2d9      	uxtb	r1, r3
    666c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    666e:	b2db      	uxtb	r3, r3
    6670:	00db      	lsls	r3, r3, #3
    6672:	b2da      	uxtb	r2, r3
    6674:	2317      	movs	r3, #23
    6676:	2040      	movs	r0, #64	; 0x40
    6678:	4684      	mov	ip, r0
    667a:	44bc      	add	ip, r7
    667c:	4463      	add	r3, ip
    667e:	1a8a      	subs	r2, r1, r2
    6680:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    6682:	2317      	movs	r3, #23
    6684:	2240      	movs	r2, #64	; 0x40
    6686:	4694      	mov	ip, r2
    6688:	44bc      	add	ip, r7
    668a:	4463      	add	r3, ip
    668c:	781b      	ldrb	r3, [r3, #0]
    668e:	035b      	lsls	r3, r3, #13
    6690:	001a      	movs	r2, r3
    6692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6694:	4313      	orrs	r3, r2
    6696:	67bb      	str	r3, [r7, #120]	; 0x78
    6698:	2300      	movs	r3, #0
    669a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    669c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    669e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    66a0:	b29a      	uxth	r2, r3
    66a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    66a4:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    66a6:	2300      	movs	r3, #0
}
    66a8:	0018      	movs	r0, r3
    66aa:	46bd      	mov	sp, r7
    66ac:	b021      	add	sp, #132	; 0x84
    66ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66b0:	0000c225 	.word	0x0000c225
    66b4:	0000639d 	.word	0x0000639d

000066b8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    66b8:	b580      	push	{r7, lr}
    66ba:	b084      	sub	sp, #16
    66bc:	af00      	add	r7, sp, #0
    66be:	0002      	movs	r2, r0
    66c0:	1dfb      	adds	r3, r7, #7
    66c2:	701a      	strb	r2, [r3, #0]
    66c4:	1dbb      	adds	r3, r7, #6
    66c6:	1c0a      	adds	r2, r1, #0
    66c8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    66ca:	4b1a      	ldr	r3, [pc, #104]	; (6734 <sercom_set_gclk_generator+0x7c>)
    66cc:	781b      	ldrb	r3, [r3, #0]
    66ce:	2201      	movs	r2, #1
    66d0:	4053      	eors	r3, r2
    66d2:	b2db      	uxtb	r3, r3
    66d4:	2b00      	cmp	r3, #0
    66d6:	d103      	bne.n	66e0 <sercom_set_gclk_generator+0x28>
    66d8:	1dbb      	adds	r3, r7, #6
    66da:	781b      	ldrb	r3, [r3, #0]
    66dc:	2b00      	cmp	r3, #0
    66de:	d01b      	beq.n	6718 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    66e0:	230c      	movs	r3, #12
    66e2:	18fb      	adds	r3, r7, r3
    66e4:	0018      	movs	r0, r3
    66e6:	4b14      	ldr	r3, [pc, #80]	; (6738 <sercom_set_gclk_generator+0x80>)
    66e8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    66ea:	230c      	movs	r3, #12
    66ec:	18fb      	adds	r3, r7, r3
    66ee:	1dfa      	adds	r2, r7, #7
    66f0:	7812      	ldrb	r2, [r2, #0]
    66f2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    66f4:	230c      	movs	r3, #12
    66f6:	18fb      	adds	r3, r7, r3
    66f8:	0019      	movs	r1, r3
    66fa:	2013      	movs	r0, #19
    66fc:	4b0f      	ldr	r3, [pc, #60]	; (673c <sercom_set_gclk_generator+0x84>)
    66fe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6700:	2013      	movs	r0, #19
    6702:	4b0f      	ldr	r3, [pc, #60]	; (6740 <sercom_set_gclk_generator+0x88>)
    6704:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    6706:	4b0b      	ldr	r3, [pc, #44]	; (6734 <sercom_set_gclk_generator+0x7c>)
    6708:	1dfa      	adds	r2, r7, #7
    670a:	7812      	ldrb	r2, [r2, #0]
    670c:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    670e:	4b09      	ldr	r3, [pc, #36]	; (6734 <sercom_set_gclk_generator+0x7c>)
    6710:	2201      	movs	r2, #1
    6712:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    6714:	2300      	movs	r3, #0
    6716:	e008      	b.n	672a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    6718:	4b06      	ldr	r3, [pc, #24]	; (6734 <sercom_set_gclk_generator+0x7c>)
    671a:	785b      	ldrb	r3, [r3, #1]
    671c:	1dfa      	adds	r2, r7, #7
    671e:	7812      	ldrb	r2, [r2, #0]
    6720:	429a      	cmp	r2, r3
    6722:	d101      	bne.n	6728 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    6724:	2300      	movs	r3, #0
    6726:	e000      	b.n	672a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6728:	231d      	movs	r3, #29
}
    672a:	0018      	movs	r0, r3
    672c:	46bd      	mov	sp, r7
    672e:	b004      	add	sp, #16
    6730:	bd80      	pop	{r7, pc}
    6732:	46c0      	nop			; (mov r8, r8)
    6734:	200000c0 	.word	0x200000c0
    6738:	00006385 	.word	0x00006385
    673c:	00008e3d 	.word	0x00008e3d
    6740:	00008e81 	.word	0x00008e81

00006744 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    6744:	b580      	push	{r7, lr}
    6746:	b082      	sub	sp, #8
    6748:	af00      	add	r7, sp, #0
    674a:	6078      	str	r0, [r7, #4]
    674c:	000a      	movs	r2, r1
    674e:	1cfb      	adds	r3, r7, #3
    6750:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    6752:	687b      	ldr	r3, [r7, #4]
    6754:	4a4d      	ldr	r2, [pc, #308]	; (688c <_sercom_get_default_pad+0x148>)
    6756:	4293      	cmp	r3, r2
    6758:	d03f      	beq.n	67da <_sercom_get_default_pad+0x96>
    675a:	4a4c      	ldr	r2, [pc, #304]	; (688c <_sercom_get_default_pad+0x148>)
    675c:	4293      	cmp	r3, r2
    675e:	d806      	bhi.n	676e <_sercom_get_default_pad+0x2a>
    6760:	4a4b      	ldr	r2, [pc, #300]	; (6890 <_sercom_get_default_pad+0x14c>)
    6762:	4293      	cmp	r3, r2
    6764:	d00f      	beq.n	6786 <_sercom_get_default_pad+0x42>
    6766:	4a4b      	ldr	r2, [pc, #300]	; (6894 <_sercom_get_default_pad+0x150>)
    6768:	4293      	cmp	r3, r2
    676a:	d021      	beq.n	67b0 <_sercom_get_default_pad+0x6c>
    676c:	e089      	b.n	6882 <_sercom_get_default_pad+0x13e>
    676e:	4a4a      	ldr	r2, [pc, #296]	; (6898 <_sercom_get_default_pad+0x154>)
    6770:	4293      	cmp	r3, r2
    6772:	d100      	bne.n	6776 <_sercom_get_default_pad+0x32>
    6774:	e05b      	b.n	682e <_sercom_get_default_pad+0xea>
    6776:	4a49      	ldr	r2, [pc, #292]	; (689c <_sercom_get_default_pad+0x158>)
    6778:	4293      	cmp	r3, r2
    677a:	d100      	bne.n	677e <_sercom_get_default_pad+0x3a>
    677c:	e06c      	b.n	6858 <_sercom_get_default_pad+0x114>
    677e:	4a48      	ldr	r2, [pc, #288]	; (68a0 <_sercom_get_default_pad+0x15c>)
    6780:	4293      	cmp	r3, r2
    6782:	d03f      	beq.n	6804 <_sercom_get_default_pad+0xc0>
    6784:	e07d      	b.n	6882 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6786:	1cfb      	adds	r3, r7, #3
    6788:	781b      	ldrb	r3, [r3, #0]
    678a:	2b01      	cmp	r3, #1
    678c:	d00a      	beq.n	67a4 <_sercom_get_default_pad+0x60>
    678e:	dc02      	bgt.n	6796 <_sercom_get_default_pad+0x52>
    6790:	2b00      	cmp	r3, #0
    6792:	d005      	beq.n	67a0 <_sercom_get_default_pad+0x5c>
    6794:	e075      	b.n	6882 <_sercom_get_default_pad+0x13e>
    6796:	2b02      	cmp	r3, #2
    6798:	d006      	beq.n	67a8 <_sercom_get_default_pad+0x64>
    679a:	2b03      	cmp	r3, #3
    679c:	d006      	beq.n	67ac <_sercom_get_default_pad+0x68>
    679e:	e070      	b.n	6882 <_sercom_get_default_pad+0x13e>
    67a0:	4b40      	ldr	r3, [pc, #256]	; (68a4 <_sercom_get_default_pad+0x160>)
    67a2:	e06f      	b.n	6884 <_sercom_get_default_pad+0x140>
    67a4:	4b40      	ldr	r3, [pc, #256]	; (68a8 <_sercom_get_default_pad+0x164>)
    67a6:	e06d      	b.n	6884 <_sercom_get_default_pad+0x140>
    67a8:	4b40      	ldr	r3, [pc, #256]	; (68ac <_sercom_get_default_pad+0x168>)
    67aa:	e06b      	b.n	6884 <_sercom_get_default_pad+0x140>
    67ac:	4b40      	ldr	r3, [pc, #256]	; (68b0 <_sercom_get_default_pad+0x16c>)
    67ae:	e069      	b.n	6884 <_sercom_get_default_pad+0x140>
    67b0:	1cfb      	adds	r3, r7, #3
    67b2:	781b      	ldrb	r3, [r3, #0]
    67b4:	2b01      	cmp	r3, #1
    67b6:	d00a      	beq.n	67ce <_sercom_get_default_pad+0x8a>
    67b8:	dc02      	bgt.n	67c0 <_sercom_get_default_pad+0x7c>
    67ba:	2b00      	cmp	r3, #0
    67bc:	d005      	beq.n	67ca <_sercom_get_default_pad+0x86>
    67be:	e060      	b.n	6882 <_sercom_get_default_pad+0x13e>
    67c0:	2b02      	cmp	r3, #2
    67c2:	d006      	beq.n	67d2 <_sercom_get_default_pad+0x8e>
    67c4:	2b03      	cmp	r3, #3
    67c6:	d006      	beq.n	67d6 <_sercom_get_default_pad+0x92>
    67c8:	e05b      	b.n	6882 <_sercom_get_default_pad+0x13e>
    67ca:	2303      	movs	r3, #3
    67cc:	e05a      	b.n	6884 <_sercom_get_default_pad+0x140>
    67ce:	4b39      	ldr	r3, [pc, #228]	; (68b4 <_sercom_get_default_pad+0x170>)
    67d0:	e058      	b.n	6884 <_sercom_get_default_pad+0x140>
    67d2:	4b39      	ldr	r3, [pc, #228]	; (68b8 <_sercom_get_default_pad+0x174>)
    67d4:	e056      	b.n	6884 <_sercom_get_default_pad+0x140>
    67d6:	4b39      	ldr	r3, [pc, #228]	; (68bc <_sercom_get_default_pad+0x178>)
    67d8:	e054      	b.n	6884 <_sercom_get_default_pad+0x140>
    67da:	1cfb      	adds	r3, r7, #3
    67dc:	781b      	ldrb	r3, [r3, #0]
    67de:	2b01      	cmp	r3, #1
    67e0:	d00a      	beq.n	67f8 <_sercom_get_default_pad+0xb4>
    67e2:	dc02      	bgt.n	67ea <_sercom_get_default_pad+0xa6>
    67e4:	2b00      	cmp	r3, #0
    67e6:	d005      	beq.n	67f4 <_sercom_get_default_pad+0xb0>
    67e8:	e04b      	b.n	6882 <_sercom_get_default_pad+0x13e>
    67ea:	2b02      	cmp	r3, #2
    67ec:	d006      	beq.n	67fc <_sercom_get_default_pad+0xb8>
    67ee:	2b03      	cmp	r3, #3
    67f0:	d006      	beq.n	6800 <_sercom_get_default_pad+0xbc>
    67f2:	e046      	b.n	6882 <_sercom_get_default_pad+0x13e>
    67f4:	4b32      	ldr	r3, [pc, #200]	; (68c0 <_sercom_get_default_pad+0x17c>)
    67f6:	e045      	b.n	6884 <_sercom_get_default_pad+0x140>
    67f8:	4b32      	ldr	r3, [pc, #200]	; (68c4 <_sercom_get_default_pad+0x180>)
    67fa:	e043      	b.n	6884 <_sercom_get_default_pad+0x140>
    67fc:	4b32      	ldr	r3, [pc, #200]	; (68c8 <_sercom_get_default_pad+0x184>)
    67fe:	e041      	b.n	6884 <_sercom_get_default_pad+0x140>
    6800:	4b32      	ldr	r3, [pc, #200]	; (68cc <_sercom_get_default_pad+0x188>)
    6802:	e03f      	b.n	6884 <_sercom_get_default_pad+0x140>
    6804:	1cfb      	adds	r3, r7, #3
    6806:	781b      	ldrb	r3, [r3, #0]
    6808:	2b01      	cmp	r3, #1
    680a:	d00a      	beq.n	6822 <_sercom_get_default_pad+0xde>
    680c:	dc02      	bgt.n	6814 <_sercom_get_default_pad+0xd0>
    680e:	2b00      	cmp	r3, #0
    6810:	d005      	beq.n	681e <_sercom_get_default_pad+0xda>
    6812:	e036      	b.n	6882 <_sercom_get_default_pad+0x13e>
    6814:	2b02      	cmp	r3, #2
    6816:	d006      	beq.n	6826 <_sercom_get_default_pad+0xe2>
    6818:	2b03      	cmp	r3, #3
    681a:	d006      	beq.n	682a <_sercom_get_default_pad+0xe6>
    681c:	e031      	b.n	6882 <_sercom_get_default_pad+0x13e>
    681e:	4b2c      	ldr	r3, [pc, #176]	; (68d0 <_sercom_get_default_pad+0x18c>)
    6820:	e030      	b.n	6884 <_sercom_get_default_pad+0x140>
    6822:	4b2c      	ldr	r3, [pc, #176]	; (68d4 <_sercom_get_default_pad+0x190>)
    6824:	e02e      	b.n	6884 <_sercom_get_default_pad+0x140>
    6826:	4b2c      	ldr	r3, [pc, #176]	; (68d8 <_sercom_get_default_pad+0x194>)
    6828:	e02c      	b.n	6884 <_sercom_get_default_pad+0x140>
    682a:	4b2c      	ldr	r3, [pc, #176]	; (68dc <_sercom_get_default_pad+0x198>)
    682c:	e02a      	b.n	6884 <_sercom_get_default_pad+0x140>
    682e:	1cfb      	adds	r3, r7, #3
    6830:	781b      	ldrb	r3, [r3, #0]
    6832:	2b01      	cmp	r3, #1
    6834:	d00a      	beq.n	684c <_sercom_get_default_pad+0x108>
    6836:	dc02      	bgt.n	683e <_sercom_get_default_pad+0xfa>
    6838:	2b00      	cmp	r3, #0
    683a:	d005      	beq.n	6848 <_sercom_get_default_pad+0x104>
    683c:	e021      	b.n	6882 <_sercom_get_default_pad+0x13e>
    683e:	2b02      	cmp	r3, #2
    6840:	d006      	beq.n	6850 <_sercom_get_default_pad+0x10c>
    6842:	2b03      	cmp	r3, #3
    6844:	d006      	beq.n	6854 <_sercom_get_default_pad+0x110>
    6846:	e01c      	b.n	6882 <_sercom_get_default_pad+0x13e>
    6848:	4b25      	ldr	r3, [pc, #148]	; (68e0 <_sercom_get_default_pad+0x19c>)
    684a:	e01b      	b.n	6884 <_sercom_get_default_pad+0x140>
    684c:	4b25      	ldr	r3, [pc, #148]	; (68e4 <_sercom_get_default_pad+0x1a0>)
    684e:	e019      	b.n	6884 <_sercom_get_default_pad+0x140>
    6850:	4b25      	ldr	r3, [pc, #148]	; (68e8 <_sercom_get_default_pad+0x1a4>)
    6852:	e017      	b.n	6884 <_sercom_get_default_pad+0x140>
    6854:	4b25      	ldr	r3, [pc, #148]	; (68ec <_sercom_get_default_pad+0x1a8>)
    6856:	e015      	b.n	6884 <_sercom_get_default_pad+0x140>
    6858:	1cfb      	adds	r3, r7, #3
    685a:	781b      	ldrb	r3, [r3, #0]
    685c:	2b01      	cmp	r3, #1
    685e:	d00a      	beq.n	6876 <_sercom_get_default_pad+0x132>
    6860:	dc02      	bgt.n	6868 <_sercom_get_default_pad+0x124>
    6862:	2b00      	cmp	r3, #0
    6864:	d005      	beq.n	6872 <_sercom_get_default_pad+0x12e>
    6866:	e00c      	b.n	6882 <_sercom_get_default_pad+0x13e>
    6868:	2b02      	cmp	r3, #2
    686a:	d006      	beq.n	687a <_sercom_get_default_pad+0x136>
    686c:	2b03      	cmp	r3, #3
    686e:	d006      	beq.n	687e <_sercom_get_default_pad+0x13a>
    6870:	e007      	b.n	6882 <_sercom_get_default_pad+0x13e>
    6872:	4b1f      	ldr	r3, [pc, #124]	; (68f0 <_sercom_get_default_pad+0x1ac>)
    6874:	e006      	b.n	6884 <_sercom_get_default_pad+0x140>
    6876:	4b1f      	ldr	r3, [pc, #124]	; (68f4 <_sercom_get_default_pad+0x1b0>)
    6878:	e004      	b.n	6884 <_sercom_get_default_pad+0x140>
    687a:	4b1f      	ldr	r3, [pc, #124]	; (68f8 <_sercom_get_default_pad+0x1b4>)
    687c:	e002      	b.n	6884 <_sercom_get_default_pad+0x140>
    687e:	4b1f      	ldr	r3, [pc, #124]	; (68fc <_sercom_get_default_pad+0x1b8>)
    6880:	e000      	b.n	6884 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    6882:	2300      	movs	r3, #0
}
    6884:	0018      	movs	r0, r3
    6886:	46bd      	mov	sp, r7
    6888:	b002      	add	sp, #8
    688a:	bd80      	pop	{r7, pc}
    688c:	42001000 	.word	0x42001000
    6890:	42000800 	.word	0x42000800
    6894:	42000c00 	.word	0x42000c00
    6898:	42001800 	.word	0x42001800
    689c:	42001c00 	.word	0x42001c00
    68a0:	42001400 	.word	0x42001400
    68a4:	00040003 	.word	0x00040003
    68a8:	00050003 	.word	0x00050003
    68ac:	00060003 	.word	0x00060003
    68b0:	00070003 	.word	0x00070003
    68b4:	00010003 	.word	0x00010003
    68b8:	001e0003 	.word	0x001e0003
    68bc:	001f0003 	.word	0x001f0003
    68c0:	00080003 	.word	0x00080003
    68c4:	00090003 	.word	0x00090003
    68c8:	000a0003 	.word	0x000a0003
    68cc:	000b0003 	.word	0x000b0003
    68d0:	00100003 	.word	0x00100003
    68d4:	00110003 	.word	0x00110003
    68d8:	00120003 	.word	0x00120003
    68dc:	00130003 	.word	0x00130003
    68e0:	000c0003 	.word	0x000c0003
    68e4:	000d0003 	.word	0x000d0003
    68e8:	000e0003 	.word	0x000e0003
    68ec:	000f0003 	.word	0x000f0003
    68f0:	00160003 	.word	0x00160003
    68f4:	00170003 	.word	0x00170003
    68f8:	00180003 	.word	0x00180003
    68fc:	00190003 	.word	0x00190003

00006900 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    6900:	b590      	push	{r4, r7, lr}
    6902:	b08b      	sub	sp, #44	; 0x2c
    6904:	af00      	add	r7, sp, #0
    6906:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    6908:	230c      	movs	r3, #12
    690a:	18fb      	adds	r3, r7, r3
    690c:	4a0f      	ldr	r2, [pc, #60]	; (694c <_sercom_get_sercom_inst_index+0x4c>)
    690e:	ca13      	ldmia	r2!, {r0, r1, r4}
    6910:	c313      	stmia	r3!, {r0, r1, r4}
    6912:	ca13      	ldmia	r2!, {r0, r1, r4}
    6914:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6916:	2300      	movs	r3, #0
    6918:	627b      	str	r3, [r7, #36]	; 0x24
    691a:	e00e      	b.n	693a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    691c:	230c      	movs	r3, #12
    691e:	18fb      	adds	r3, r7, r3
    6920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6922:	0092      	lsls	r2, r2, #2
    6924:	58d3      	ldr	r3, [r2, r3]
    6926:	1e1a      	subs	r2, r3, #0
    6928:	687b      	ldr	r3, [r7, #4]
    692a:	429a      	cmp	r2, r3
    692c:	d102      	bne.n	6934 <_sercom_get_sercom_inst_index+0x34>
			return i;
    692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6930:	b2db      	uxtb	r3, r3
    6932:	e006      	b.n	6942 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6936:	3301      	adds	r3, #1
    6938:	627b      	str	r3, [r7, #36]	; 0x24
    693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    693c:	2b05      	cmp	r3, #5
    693e:	d9ed      	bls.n	691c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    6940:	2300      	movs	r3, #0
}
    6942:	0018      	movs	r0, r3
    6944:	46bd      	mov	sp, r7
    6946:	b00b      	add	sp, #44	; 0x2c
    6948:	bd90      	pop	{r4, r7, pc}
    694a:	46c0      	nop			; (mov r8, r8)
    694c:	0000e8cc 	.word	0x0000e8cc

00006950 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    6950:	b580      	push	{r7, lr}
    6952:	b082      	sub	sp, #8
    6954:	af00      	add	r7, sp, #0
    6956:	0002      	movs	r2, r0
    6958:	1dfb      	adds	r3, r7, #7
    695a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    695c:	46c0      	nop			; (mov r8, r8)
    695e:	46bd      	mov	sp, r7
    6960:	b002      	add	sp, #8
    6962:	bd80      	pop	{r7, pc}

00006964 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    6964:	b580      	push	{r7, lr}
    6966:	b084      	sub	sp, #16
    6968:	af00      	add	r7, sp, #0
    696a:	0002      	movs	r2, r0
    696c:	6039      	str	r1, [r7, #0]
    696e:	1dfb      	adds	r3, r7, #7
    6970:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    6972:	4b13      	ldr	r3, [pc, #76]	; (69c0 <_sercom_set_handler+0x5c>)
    6974:	781b      	ldrb	r3, [r3, #0]
    6976:	2201      	movs	r2, #1
    6978:	4053      	eors	r3, r2
    697a:	b2db      	uxtb	r3, r3
    697c:	2b00      	cmp	r3, #0
    697e:	d015      	beq.n	69ac <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6980:	2300      	movs	r3, #0
    6982:	60fb      	str	r3, [r7, #12]
    6984:	e00c      	b.n	69a0 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6986:	4b0f      	ldr	r3, [pc, #60]	; (69c4 <_sercom_set_handler+0x60>)
    6988:	68fa      	ldr	r2, [r7, #12]
    698a:	0092      	lsls	r2, r2, #2
    698c:	490e      	ldr	r1, [pc, #56]	; (69c8 <_sercom_set_handler+0x64>)
    698e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    6990:	4b0e      	ldr	r3, [pc, #56]	; (69cc <_sercom_set_handler+0x68>)
    6992:	68fa      	ldr	r2, [r7, #12]
    6994:	0092      	lsls	r2, r2, #2
    6996:	2100      	movs	r1, #0
    6998:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    699a:	68fb      	ldr	r3, [r7, #12]
    699c:	3301      	adds	r3, #1
    699e:	60fb      	str	r3, [r7, #12]
    69a0:	68fb      	ldr	r3, [r7, #12]
    69a2:	2b05      	cmp	r3, #5
    69a4:	d9ef      	bls.n	6986 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    69a6:	4b06      	ldr	r3, [pc, #24]	; (69c0 <_sercom_set_handler+0x5c>)
    69a8:	2201      	movs	r2, #1
    69aa:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    69ac:	1dfb      	adds	r3, r7, #7
    69ae:	781a      	ldrb	r2, [r3, #0]
    69b0:	4b04      	ldr	r3, [pc, #16]	; (69c4 <_sercom_set_handler+0x60>)
    69b2:	0092      	lsls	r2, r2, #2
    69b4:	6839      	ldr	r1, [r7, #0]
    69b6:	50d1      	str	r1, [r2, r3]
}
    69b8:	46c0      	nop			; (mov r8, r8)
    69ba:	46bd      	mov	sp, r7
    69bc:	b004      	add	sp, #16
    69be:	bd80      	pop	{r7, pc}
    69c0:	200000c2 	.word	0x200000c2
    69c4:	200000c4 	.word	0x200000c4
    69c8:	00006951 	.word	0x00006951
    69cc:	2000043c 	.word	0x2000043c

000069d0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    69d0:	b590      	push	{r4, r7, lr}
    69d2:	b085      	sub	sp, #20
    69d4:	af00      	add	r7, sp, #0
    69d6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    69d8:	2308      	movs	r3, #8
    69da:	18fa      	adds	r2, r7, r3
    69dc:	4b0c      	ldr	r3, [pc, #48]	; (6a10 <_sercom_get_interrupt_vector+0x40>)
    69de:	0010      	movs	r0, r2
    69e0:	0019      	movs	r1, r3
    69e2:	2306      	movs	r3, #6
    69e4:	001a      	movs	r2, r3
    69e6:	4b0b      	ldr	r3, [pc, #44]	; (6a14 <_sercom_get_interrupt_vector+0x44>)
    69e8:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    69ea:	230f      	movs	r3, #15
    69ec:	18fc      	adds	r4, r7, r3
    69ee:	687b      	ldr	r3, [r7, #4]
    69f0:	0018      	movs	r0, r3
    69f2:	4b09      	ldr	r3, [pc, #36]	; (6a18 <_sercom_get_interrupt_vector+0x48>)
    69f4:	4798      	blx	r3
    69f6:	0003      	movs	r3, r0
    69f8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    69fa:	230f      	movs	r3, #15
    69fc:	18fb      	adds	r3, r7, r3
    69fe:	781b      	ldrb	r3, [r3, #0]
    6a00:	2208      	movs	r2, #8
    6a02:	18ba      	adds	r2, r7, r2
    6a04:	5cd3      	ldrb	r3, [r2, r3]
    6a06:	b25b      	sxtb	r3, r3
}
    6a08:	0018      	movs	r0, r3
    6a0a:	46bd      	mov	sp, r7
    6a0c:	b005      	add	sp, #20
    6a0e:	bd90      	pop	{r4, r7, pc}
    6a10:	0000e8e4 	.word	0x0000e8e4
    6a14:	0000c2dd 	.word	0x0000c2dd
    6a18:	00006901 	.word	0x00006901

00006a1c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    6a1c:	b580      	push	{r7, lr}
    6a1e:	af00      	add	r7, sp, #0
    6a20:	4b03      	ldr	r3, [pc, #12]	; (6a30 <SERCOM0_Handler+0x14>)
    6a22:	681b      	ldr	r3, [r3, #0]
    6a24:	2000      	movs	r0, #0
    6a26:	4798      	blx	r3
    6a28:	46c0      	nop			; (mov r8, r8)
    6a2a:	46bd      	mov	sp, r7
    6a2c:	bd80      	pop	{r7, pc}
    6a2e:	46c0      	nop			; (mov r8, r8)
    6a30:	200000c4 	.word	0x200000c4

00006a34 <SERCOM1_Handler>:
    6a34:	b580      	push	{r7, lr}
    6a36:	af00      	add	r7, sp, #0
    6a38:	4b03      	ldr	r3, [pc, #12]	; (6a48 <SERCOM1_Handler+0x14>)
    6a3a:	685b      	ldr	r3, [r3, #4]
    6a3c:	2001      	movs	r0, #1
    6a3e:	4798      	blx	r3
    6a40:	46c0      	nop			; (mov r8, r8)
    6a42:	46bd      	mov	sp, r7
    6a44:	bd80      	pop	{r7, pc}
    6a46:	46c0      	nop			; (mov r8, r8)
    6a48:	200000c4 	.word	0x200000c4

00006a4c <SERCOM2_Handler>:
    6a4c:	b580      	push	{r7, lr}
    6a4e:	af00      	add	r7, sp, #0
    6a50:	4b03      	ldr	r3, [pc, #12]	; (6a60 <SERCOM2_Handler+0x14>)
    6a52:	689b      	ldr	r3, [r3, #8]
    6a54:	2002      	movs	r0, #2
    6a56:	4798      	blx	r3
    6a58:	46c0      	nop			; (mov r8, r8)
    6a5a:	46bd      	mov	sp, r7
    6a5c:	bd80      	pop	{r7, pc}
    6a5e:	46c0      	nop			; (mov r8, r8)
    6a60:	200000c4 	.word	0x200000c4

00006a64 <SERCOM3_Handler>:
    6a64:	b580      	push	{r7, lr}
    6a66:	af00      	add	r7, sp, #0
    6a68:	4b03      	ldr	r3, [pc, #12]	; (6a78 <SERCOM3_Handler+0x14>)
    6a6a:	68db      	ldr	r3, [r3, #12]
    6a6c:	2003      	movs	r0, #3
    6a6e:	4798      	blx	r3
    6a70:	46c0      	nop			; (mov r8, r8)
    6a72:	46bd      	mov	sp, r7
    6a74:	bd80      	pop	{r7, pc}
    6a76:	46c0      	nop			; (mov r8, r8)
    6a78:	200000c4 	.word	0x200000c4

00006a7c <SERCOM4_Handler>:
    6a7c:	b580      	push	{r7, lr}
    6a7e:	af00      	add	r7, sp, #0
    6a80:	4b03      	ldr	r3, [pc, #12]	; (6a90 <SERCOM4_Handler+0x14>)
    6a82:	691b      	ldr	r3, [r3, #16]
    6a84:	2004      	movs	r0, #4
    6a86:	4798      	blx	r3
    6a88:	46c0      	nop			; (mov r8, r8)
    6a8a:	46bd      	mov	sp, r7
    6a8c:	bd80      	pop	{r7, pc}
    6a8e:	46c0      	nop			; (mov r8, r8)
    6a90:	200000c4 	.word	0x200000c4

00006a94 <SERCOM5_Handler>:
    6a94:	b580      	push	{r7, lr}
    6a96:	af00      	add	r7, sp, #0
    6a98:	4b03      	ldr	r3, [pc, #12]	; (6aa8 <SERCOM5_Handler+0x14>)
    6a9a:	695b      	ldr	r3, [r3, #20]
    6a9c:	2005      	movs	r0, #5
    6a9e:	4798      	blx	r3
    6aa0:	46c0      	nop			; (mov r8, r8)
    6aa2:	46bd      	mov	sp, r7
    6aa4:	bd80      	pop	{r7, pc}
    6aa6:	46c0      	nop			; (mov r8, r8)
    6aa8:	200000c4 	.word	0x200000c4

00006aac <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6aac:	b580      	push	{r7, lr}
    6aae:	b082      	sub	sp, #8
    6ab0:	af00      	add	r7, sp, #0
    6ab2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6ab4:	687b      	ldr	r3, [r7, #4]
    6ab6:	2280      	movs	r2, #128	; 0x80
    6ab8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6aba:	687b      	ldr	r3, [r7, #4]
    6abc:	2200      	movs	r2, #0
    6abe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6ac0:	687b      	ldr	r3, [r7, #4]
    6ac2:	2201      	movs	r2, #1
    6ac4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6ac6:	687b      	ldr	r3, [r7, #4]
    6ac8:	2200      	movs	r2, #0
    6aca:	70da      	strb	r2, [r3, #3]
}
    6acc:	46c0      	nop			; (mov r8, r8)
    6ace:	46bd      	mov	sp, r7
    6ad0:	b002      	add	sp, #8
    6ad2:	bd80      	pop	{r7, pc}

00006ad4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6ad4:	b580      	push	{r7, lr}
    6ad6:	b084      	sub	sp, #16
    6ad8:	af00      	add	r7, sp, #0
    6ada:	0002      	movs	r2, r0
    6adc:	1dfb      	adds	r3, r7, #7
    6ade:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6ae0:	230f      	movs	r3, #15
    6ae2:	18fb      	adds	r3, r7, r3
    6ae4:	1dfa      	adds	r2, r7, #7
    6ae6:	7812      	ldrb	r2, [r2, #0]
    6ae8:	09d2      	lsrs	r2, r2, #7
    6aea:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6aec:	230e      	movs	r3, #14
    6aee:	18fb      	adds	r3, r7, r3
    6af0:	1dfa      	adds	r2, r7, #7
    6af2:	7812      	ldrb	r2, [r2, #0]
    6af4:	0952      	lsrs	r2, r2, #5
    6af6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6af8:	4b0d      	ldr	r3, [pc, #52]	; (6b30 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6afa:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6afc:	230f      	movs	r3, #15
    6afe:	18fb      	adds	r3, r7, r3
    6b00:	781b      	ldrb	r3, [r3, #0]
    6b02:	2b00      	cmp	r3, #0
    6b04:	d10f      	bne.n	6b26 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6b06:	230f      	movs	r3, #15
    6b08:	18fb      	adds	r3, r7, r3
    6b0a:	781b      	ldrb	r3, [r3, #0]
    6b0c:	009b      	lsls	r3, r3, #2
    6b0e:	2210      	movs	r2, #16
    6b10:	4694      	mov	ip, r2
    6b12:	44bc      	add	ip, r7
    6b14:	4463      	add	r3, ip
    6b16:	3b08      	subs	r3, #8
    6b18:	681a      	ldr	r2, [r3, #0]
    6b1a:	230e      	movs	r3, #14
    6b1c:	18fb      	adds	r3, r7, r3
    6b1e:	781b      	ldrb	r3, [r3, #0]
    6b20:	01db      	lsls	r3, r3, #7
    6b22:	18d3      	adds	r3, r2, r3
    6b24:	e000      	b.n	6b28 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    6b26:	2300      	movs	r3, #0
	}
}
    6b28:	0018      	movs	r0, r3
    6b2a:	46bd      	mov	sp, r7
    6b2c:	b004      	add	sp, #16
    6b2e:	bd80      	pop	{r7, pc}
    6b30:	41004400 	.word	0x41004400

00006b34 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6b34:	b580      	push	{r7, lr}
    6b36:	b082      	sub	sp, #8
    6b38:	af00      	add	r7, sp, #0
    6b3a:	0002      	movs	r2, r0
    6b3c:	1dfb      	adds	r3, r7, #7
    6b3e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6b40:	1dfb      	adds	r3, r7, #7
    6b42:	781b      	ldrb	r3, [r3, #0]
    6b44:	0018      	movs	r0, r3
    6b46:	4b03      	ldr	r3, [pc, #12]	; (6b54 <port_get_group_from_gpio_pin+0x20>)
    6b48:	4798      	blx	r3
    6b4a:	0003      	movs	r3, r0
}
    6b4c:	0018      	movs	r0, r3
    6b4e:	46bd      	mov	sp, r7
    6b50:	b002      	add	sp, #8
    6b52:	bd80      	pop	{r7, pc}
    6b54:	00006ad5 	.word	0x00006ad5

00006b58 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    6b58:	b580      	push	{r7, lr}
    6b5a:	b084      	sub	sp, #16
    6b5c:	af00      	add	r7, sp, #0
    6b5e:	0002      	movs	r2, r0
    6b60:	1dfb      	adds	r3, r7, #7
    6b62:	701a      	strb	r2, [r3, #0]
    6b64:	1dbb      	adds	r3, r7, #6
    6b66:	1c0a      	adds	r2, r1, #0
    6b68:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6b6a:	1dfb      	adds	r3, r7, #7
    6b6c:	781b      	ldrb	r3, [r3, #0]
    6b6e:	0018      	movs	r0, r3
    6b70:	4b0d      	ldr	r3, [pc, #52]	; (6ba8 <port_pin_set_output_level+0x50>)
    6b72:	4798      	blx	r3
    6b74:	0003      	movs	r3, r0
    6b76:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6b78:	1dfb      	adds	r3, r7, #7
    6b7a:	781b      	ldrb	r3, [r3, #0]
    6b7c:	221f      	movs	r2, #31
    6b7e:	4013      	ands	r3, r2
    6b80:	2201      	movs	r2, #1
    6b82:	409a      	lsls	r2, r3
    6b84:	0013      	movs	r3, r2
    6b86:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    6b88:	1dbb      	adds	r3, r7, #6
    6b8a:	781b      	ldrb	r3, [r3, #0]
    6b8c:	2b00      	cmp	r3, #0
    6b8e:	d003      	beq.n	6b98 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6b90:	68fb      	ldr	r3, [r7, #12]
    6b92:	68ba      	ldr	r2, [r7, #8]
    6b94:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    6b96:	e002      	b.n	6b9e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    6b98:	68fb      	ldr	r3, [r7, #12]
    6b9a:	68ba      	ldr	r2, [r7, #8]
    6b9c:	615a      	str	r2, [r3, #20]
	}
}
    6b9e:	46c0      	nop			; (mov r8, r8)
    6ba0:	46bd      	mov	sp, r7
    6ba2:	b004      	add	sp, #16
    6ba4:	bd80      	pop	{r7, pc}
    6ba6:	46c0      	nop			; (mov r8, r8)
    6ba8:	00006b35 	.word	0x00006b35

00006bac <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6bac:	b580      	push	{r7, lr}
    6bae:	b082      	sub	sp, #8
    6bb0:	af00      	add	r7, sp, #0
    6bb2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6bb4:	687b      	ldr	r3, [r7, #4]
    6bb6:	2200      	movs	r2, #0
    6bb8:	701a      	strb	r2, [r3, #0]
}
    6bba:	46c0      	nop			; (mov r8, r8)
    6bbc:	46bd      	mov	sp, r7
    6bbe:	b002      	add	sp, #8
    6bc0:	bd80      	pop	{r7, pc}
    6bc2:	46c0      	nop			; (mov r8, r8)

00006bc4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    6bc4:	b580      	push	{r7, lr}
    6bc6:	b082      	sub	sp, #8
    6bc8:	af00      	add	r7, sp, #0
    6bca:	0002      	movs	r2, r0
    6bcc:	6039      	str	r1, [r7, #0]
    6bce:	1dfb      	adds	r3, r7, #7
    6bd0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6bd2:	1dfb      	adds	r3, r7, #7
    6bd4:	781b      	ldrb	r3, [r3, #0]
    6bd6:	2b01      	cmp	r3, #1
    6bd8:	d00a      	beq.n	6bf0 <system_apb_clock_set_mask+0x2c>
    6bda:	2b02      	cmp	r3, #2
    6bdc:	d00f      	beq.n	6bfe <system_apb_clock_set_mask+0x3a>
    6bde:	2b00      	cmp	r3, #0
    6be0:	d114      	bne.n	6c0c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6be2:	4b0e      	ldr	r3, [pc, #56]	; (6c1c <system_apb_clock_set_mask+0x58>)
    6be4:	4a0d      	ldr	r2, [pc, #52]	; (6c1c <system_apb_clock_set_mask+0x58>)
    6be6:	6991      	ldr	r1, [r2, #24]
    6be8:	683a      	ldr	r2, [r7, #0]
    6bea:	430a      	orrs	r2, r1
    6bec:	619a      	str	r2, [r3, #24]
			break;
    6bee:	e00f      	b.n	6c10 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6bf0:	4b0a      	ldr	r3, [pc, #40]	; (6c1c <system_apb_clock_set_mask+0x58>)
    6bf2:	4a0a      	ldr	r2, [pc, #40]	; (6c1c <system_apb_clock_set_mask+0x58>)
    6bf4:	69d1      	ldr	r1, [r2, #28]
    6bf6:	683a      	ldr	r2, [r7, #0]
    6bf8:	430a      	orrs	r2, r1
    6bfa:	61da      	str	r2, [r3, #28]
			break;
    6bfc:	e008      	b.n	6c10 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6bfe:	4b07      	ldr	r3, [pc, #28]	; (6c1c <system_apb_clock_set_mask+0x58>)
    6c00:	4a06      	ldr	r2, [pc, #24]	; (6c1c <system_apb_clock_set_mask+0x58>)
    6c02:	6a11      	ldr	r1, [r2, #32]
    6c04:	683a      	ldr	r2, [r7, #0]
    6c06:	430a      	orrs	r2, r1
    6c08:	621a      	str	r2, [r3, #32]
			break;
    6c0a:	e001      	b.n	6c10 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6c0c:	2317      	movs	r3, #23
    6c0e:	e000      	b.n	6c12 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6c10:	2300      	movs	r3, #0
}
    6c12:	0018      	movs	r0, r3
    6c14:	46bd      	mov	sp, r7
    6c16:	b002      	add	sp, #8
    6c18:	bd80      	pop	{r7, pc}
    6c1a:	46c0      	nop			; (mov r8, r8)
    6c1c:	40000400 	.word	0x40000400

00006c20 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    6c20:	b580      	push	{r7, lr}
    6c22:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6c24:	4b05      	ldr	r3, [pc, #20]	; (6c3c <system_is_debugger_present+0x1c>)
    6c26:	789b      	ldrb	r3, [r3, #2]
    6c28:	b2db      	uxtb	r3, r3
    6c2a:	001a      	movs	r2, r3
    6c2c:	2302      	movs	r3, #2
    6c2e:	4013      	ands	r3, r2
    6c30:	1e5a      	subs	r2, r3, #1
    6c32:	4193      	sbcs	r3, r2
    6c34:	b2db      	uxtb	r3, r3
}
    6c36:	0018      	movs	r0, r3
    6c38:	46bd      	mov	sp, r7
    6c3a:	bd80      	pop	{r7, pc}
    6c3c:	41002000 	.word	0x41002000

00006c40 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    6c40:	b580      	push	{r7, lr}
    6c42:	b084      	sub	sp, #16
    6c44:	af00      	add	r7, sp, #0
    6c46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6c48:	687b      	ldr	r3, [r7, #4]
    6c4a:	681b      	ldr	r3, [r3, #0]
    6c4c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6c4e:	68fb      	ldr	r3, [r7, #12]
    6c50:	7e1b      	ldrb	r3, [r3, #24]
    6c52:	b2db      	uxtb	r3, r3
    6c54:	001a      	movs	r2, r3
    6c56:	2301      	movs	r3, #1
    6c58:	4013      	ands	r3, r2
    6c5a:	1e5a      	subs	r2, r3, #1
    6c5c:	4193      	sbcs	r3, r2
    6c5e:	b2db      	uxtb	r3, r3
}
    6c60:	0018      	movs	r0, r3
    6c62:	46bd      	mov	sp, r7
    6c64:	b004      	add	sp, #16
    6c66:	bd80      	pop	{r7, pc}

00006c68 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    6c68:	b580      	push	{r7, lr}
    6c6a:	b084      	sub	sp, #16
    6c6c:	af00      	add	r7, sp, #0
    6c6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6c70:	687b      	ldr	r3, [r7, #4]
    6c72:	681b      	ldr	r3, [r3, #0]
    6c74:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6c76:	68fb      	ldr	r3, [r7, #12]
    6c78:	7e1b      	ldrb	r3, [r3, #24]
    6c7a:	b2db      	uxtb	r3, r3
    6c7c:	001a      	movs	r2, r3
    6c7e:	2304      	movs	r3, #4
    6c80:	4013      	ands	r3, r2
    6c82:	1e5a      	subs	r2, r3, #1
    6c84:	4193      	sbcs	r3, r2
    6c86:	b2db      	uxtb	r3, r3
}
    6c88:	0018      	movs	r0, r3
    6c8a:	46bd      	mov	sp, r7
    6c8c:	b004      	add	sp, #16
    6c8e:	bd80      	pop	{r7, pc}

00006c90 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    6c90:	b580      	push	{r7, lr}
    6c92:	b084      	sub	sp, #16
    6c94:	af00      	add	r7, sp, #0
    6c96:	6078      	str	r0, [r7, #4]
    6c98:	000a      	movs	r2, r1
    6c9a:	1cbb      	adds	r3, r7, #2
    6c9c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6c9e:	687b      	ldr	r3, [r7, #4]
    6ca0:	681b      	ldr	r3, [r3, #0]
    6ca2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    6ca4:	687b      	ldr	r3, [r7, #4]
    6ca6:	0018      	movs	r0, r3
    6ca8:	4b0a      	ldr	r3, [pc, #40]	; (6cd4 <spi_write+0x44>)
    6caa:	4798      	blx	r3
    6cac:	0003      	movs	r3, r0
    6cae:	001a      	movs	r2, r3
    6cb0:	2301      	movs	r3, #1
    6cb2:	4053      	eors	r3, r2
    6cb4:	b2db      	uxtb	r3, r3
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	d001      	beq.n	6cbe <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    6cba:	2305      	movs	r3, #5
    6cbc:	e006      	b.n	6ccc <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6cbe:	1cbb      	adds	r3, r7, #2
    6cc0:	881b      	ldrh	r3, [r3, #0]
    6cc2:	05db      	lsls	r3, r3, #23
    6cc4:	0dda      	lsrs	r2, r3, #23
    6cc6:	68fb      	ldr	r3, [r7, #12]
    6cc8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    6cca:	2300      	movs	r3, #0
}
    6ccc:	0018      	movs	r0, r3
    6cce:	46bd      	mov	sp, r7
    6cd0:	b004      	add	sp, #16
    6cd2:	bd80      	pop	{r7, pc}
    6cd4:	00006c41 	.word	0x00006c41

00006cd8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    6cd8:	b580      	push	{r7, lr}
    6cda:	b084      	sub	sp, #16
    6cdc:	af00      	add	r7, sp, #0
    6cde:	6078      	str	r0, [r7, #4]
    6ce0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6ce2:	687b      	ldr	r3, [r7, #4]
    6ce4:	681b      	ldr	r3, [r3, #0]
    6ce6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    6ce8:	687b      	ldr	r3, [r7, #4]
    6cea:	0018      	movs	r0, r3
    6cec:	4b1b      	ldr	r3, [pc, #108]	; (6d5c <spi_read+0x84>)
    6cee:	4798      	blx	r3
    6cf0:	0003      	movs	r3, r0
    6cf2:	001a      	movs	r2, r3
    6cf4:	2301      	movs	r3, #1
    6cf6:	4053      	eors	r3, r2
    6cf8:	b2db      	uxtb	r3, r3
    6cfa:	2b00      	cmp	r3, #0
    6cfc:	d001      	beq.n	6d02 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    6cfe:	2310      	movs	r3, #16
    6d00:	e027      	b.n	6d52 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    6d02:	230f      	movs	r3, #15
    6d04:	18fb      	adds	r3, r7, r3
    6d06:	2200      	movs	r2, #0
    6d08:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6d0a:	68bb      	ldr	r3, [r7, #8]
    6d0c:	8b5b      	ldrh	r3, [r3, #26]
    6d0e:	b29b      	uxth	r3, r3
    6d10:	001a      	movs	r2, r3
    6d12:	2304      	movs	r3, #4
    6d14:	4013      	ands	r3, r2
    6d16:	d006      	beq.n	6d26 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    6d18:	230f      	movs	r3, #15
    6d1a:	18fb      	adds	r3, r7, r3
    6d1c:	221e      	movs	r2, #30
    6d1e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6d20:	68bb      	ldr	r3, [r7, #8]
    6d22:	2204      	movs	r2, #4
    6d24:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6d26:	687b      	ldr	r3, [r7, #4]
    6d28:	799b      	ldrb	r3, [r3, #6]
    6d2a:	2b01      	cmp	r3, #1
    6d2c:	d108      	bne.n	6d40 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    6d2e:	68bb      	ldr	r3, [r7, #8]
    6d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d32:	b29b      	uxth	r3, r3
    6d34:	05db      	lsls	r3, r3, #23
    6d36:	0ddb      	lsrs	r3, r3, #23
    6d38:	b29a      	uxth	r2, r3
    6d3a:	683b      	ldr	r3, [r7, #0]
    6d3c:	801a      	strh	r2, [r3, #0]
    6d3e:	e005      	b.n	6d4c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6d40:	68bb      	ldr	r3, [r7, #8]
    6d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d44:	b2db      	uxtb	r3, r3
    6d46:	b29a      	uxth	r2, r3
    6d48:	683b      	ldr	r3, [r7, #0]
    6d4a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    6d4c:	230f      	movs	r3, #15
    6d4e:	18fb      	adds	r3, r7, r3
    6d50:	781b      	ldrb	r3, [r3, #0]
}
    6d52:	0018      	movs	r0, r3
    6d54:	46bd      	mov	sp, r7
    6d56:	b004      	add	sp, #16
    6d58:	bd80      	pop	{r7, pc}
    6d5a:	46c0      	nop			; (mov r8, r8)
    6d5c:	00006c69 	.word	0x00006c69

00006d60 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    6d60:	b590      	push	{r4, r7, lr}
    6d62:	b093      	sub	sp, #76	; 0x4c
    6d64:	af00      	add	r7, sp, #0
    6d66:	6078      	str	r0, [r7, #4]
    6d68:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6d6a:	687b      	ldr	r3, [r7, #4]
    6d6c:	681b      	ldr	r3, [r3, #0]
    6d6e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    6d70:	687b      	ldr	r3, [r7, #4]
    6d72:	681b      	ldr	r3, [r3, #0]
    6d74:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    6d76:	231c      	movs	r3, #28
    6d78:	18fb      	adds	r3, r7, r3
    6d7a:	0018      	movs	r0, r3
    6d7c:	4b75      	ldr	r3, [pc, #468]	; (6f54 <_spi_set_config+0x1f4>)
    6d7e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6d80:	231c      	movs	r3, #28
    6d82:	18fb      	adds	r3, r7, r3
    6d84:	2200      	movs	r2, #0
    6d86:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    6d88:	683b      	ldr	r3, [r7, #0]
    6d8a:	781b      	ldrb	r3, [r3, #0]
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	d103      	bne.n	6d98 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6d90:	231c      	movs	r3, #28
    6d92:	18fb      	adds	r3, r7, r3
    6d94:	2200      	movs	r2, #0
    6d96:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    6d98:	683b      	ldr	r3, [r7, #0]
    6d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    6d9c:	230c      	movs	r3, #12
    6d9e:	18fb      	adds	r3, r7, r3
    6da0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    6da2:	683b      	ldr	r3, [r7, #0]
    6da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    6da6:	230c      	movs	r3, #12
    6da8:	18fb      	adds	r3, r7, r3
    6daa:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    6dac:	683b      	ldr	r3, [r7, #0]
    6dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    6db0:	230c      	movs	r3, #12
    6db2:	18fb      	adds	r3, r7, r3
    6db4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    6db6:	683b      	ldr	r3, [r7, #0]
    6db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    6dba:	230c      	movs	r3, #12
    6dbc:	18fb      	adds	r3, r7, r3
    6dbe:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    6dc0:	2347      	movs	r3, #71	; 0x47
    6dc2:	18fb      	adds	r3, r7, r3
    6dc4:	2200      	movs	r2, #0
    6dc6:	701a      	strb	r2, [r3, #0]
    6dc8:	e02c      	b.n	6e24 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6dca:	2347      	movs	r3, #71	; 0x47
    6dcc:	18fb      	adds	r3, r7, r3
    6dce:	781a      	ldrb	r2, [r3, #0]
    6dd0:	230c      	movs	r3, #12
    6dd2:	18fb      	adds	r3, r7, r3
    6dd4:	0092      	lsls	r2, r2, #2
    6dd6:	58d3      	ldr	r3, [r2, r3]
    6dd8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6ddc:	2b00      	cmp	r3, #0
    6dde:	d109      	bne.n	6df4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6de0:	2347      	movs	r3, #71	; 0x47
    6de2:	18fb      	adds	r3, r7, r3
    6de4:	781a      	ldrb	r2, [r3, #0]
    6de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6de8:	0011      	movs	r1, r2
    6dea:	0018      	movs	r0, r3
    6dec:	4b5a      	ldr	r3, [pc, #360]	; (6f58 <_spi_set_config+0x1f8>)
    6dee:	4798      	blx	r3
    6df0:	0003      	movs	r3, r0
    6df2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6df6:	3301      	adds	r3, #1
    6df8:	d00d      	beq.n	6e16 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6dfc:	b2da      	uxtb	r2, r3
    6dfe:	231c      	movs	r3, #28
    6e00:	18fb      	adds	r3, r7, r3
    6e02:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6e06:	0c1b      	lsrs	r3, r3, #16
    6e08:	b2db      	uxtb	r3, r3
    6e0a:	221c      	movs	r2, #28
    6e0c:	18ba      	adds	r2, r7, r2
    6e0e:	0011      	movs	r1, r2
    6e10:	0018      	movs	r0, r3
    6e12:	4b52      	ldr	r3, [pc, #328]	; (6f5c <_spi_set_config+0x1fc>)
    6e14:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    6e16:	2347      	movs	r3, #71	; 0x47
    6e18:	18fb      	adds	r3, r7, r3
    6e1a:	781a      	ldrb	r2, [r3, #0]
    6e1c:	2347      	movs	r3, #71	; 0x47
    6e1e:	18fb      	adds	r3, r7, r3
    6e20:	3201      	adds	r2, #1
    6e22:	701a      	strb	r2, [r3, #0]
    6e24:	2347      	movs	r3, #71	; 0x47
    6e26:	18fb      	adds	r3, r7, r3
    6e28:	781b      	ldrb	r3, [r3, #0]
    6e2a:	2b03      	cmp	r3, #3
    6e2c:	d9cd      	bls.n	6dca <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    6e2e:	683b      	ldr	r3, [r7, #0]
    6e30:	781a      	ldrb	r2, [r3, #0]
    6e32:	687b      	ldr	r3, [r7, #4]
    6e34:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    6e36:	683b      	ldr	r3, [r7, #0]
    6e38:	7c1a      	ldrb	r2, [r3, #16]
    6e3a:	687b      	ldr	r3, [r7, #4]
    6e3c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    6e3e:	683b      	ldr	r3, [r7, #0]
    6e40:	7c9a      	ldrb	r2, [r3, #18]
    6e42:	687b      	ldr	r3, [r7, #4]
    6e44:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    6e46:	683b      	ldr	r3, [r7, #0]
    6e48:	7d1a      	ldrb	r2, [r3, #20]
    6e4a:	687b      	ldr	r3, [r7, #4]
    6e4c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    6e4e:	230a      	movs	r3, #10
    6e50:	18fb      	adds	r3, r7, r3
    6e52:	2200      	movs	r2, #0
    6e54:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    6e56:	2300      	movs	r3, #0
    6e58:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    6e5a:	2300      	movs	r3, #0
    6e5c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    6e5e:	683b      	ldr	r3, [r7, #0]
    6e60:	781b      	ldrb	r3, [r3, #0]
    6e62:	2b01      	cmp	r3, #1
    6e64:	d129      	bne.n	6eba <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6e66:	687b      	ldr	r3, [r7, #4]
    6e68:	681b      	ldr	r3, [r3, #0]
    6e6a:	0018      	movs	r0, r3
    6e6c:	4b3c      	ldr	r3, [pc, #240]	; (6f60 <_spi_set_config+0x200>)
    6e6e:	4798      	blx	r3
    6e70:	0003      	movs	r3, r0
    6e72:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6e76:	3314      	adds	r3, #20
    6e78:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    6e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e7c:	b2db      	uxtb	r3, r3
    6e7e:	0018      	movs	r0, r3
    6e80:	4b38      	ldr	r3, [pc, #224]	; (6f64 <_spi_set_config+0x204>)
    6e82:	4798      	blx	r3
    6e84:	0003      	movs	r3, r0
    6e86:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    6e88:	683b      	ldr	r3, [r7, #0]
    6e8a:	699b      	ldr	r3, [r3, #24]
    6e8c:	2223      	movs	r2, #35	; 0x23
    6e8e:	18bc      	adds	r4, r7, r2
    6e90:	220a      	movs	r2, #10
    6e92:	18ba      	adds	r2, r7, r2
    6e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6e96:	0018      	movs	r0, r3
    6e98:	4b33      	ldr	r3, [pc, #204]	; (6f68 <_spi_set_config+0x208>)
    6e9a:	4798      	blx	r3
    6e9c:	0003      	movs	r3, r0
    6e9e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    6ea0:	2323      	movs	r3, #35	; 0x23
    6ea2:	18fb      	adds	r3, r7, r3
    6ea4:	781b      	ldrb	r3, [r3, #0]
    6ea6:	2b00      	cmp	r3, #0
    6ea8:	d001      	beq.n	6eae <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    6eaa:	2317      	movs	r3, #23
    6eac:	e04e      	b.n	6f4c <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    6eae:	230a      	movs	r3, #10
    6eb0:	18fb      	adds	r3, r7, r3
    6eb2:	881b      	ldrh	r3, [r3, #0]
    6eb4:	b2da      	uxtb	r2, r3
    6eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6eb8:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    6eba:	683b      	ldr	r3, [r7, #0]
    6ebc:	685b      	ldr	r3, [r3, #4]
    6ebe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6ec0:	4313      	orrs	r3, r2
    6ec2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    6ec4:	683b      	ldr	r3, [r7, #0]
    6ec6:	689b      	ldr	r3, [r3, #8]
    6ec8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6eca:	4313      	orrs	r3, r2
    6ecc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    6ece:	683b      	ldr	r3, [r7, #0]
    6ed0:	68db      	ldr	r3, [r3, #12]
    6ed2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6ed4:	4313      	orrs	r3, r2
    6ed6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    6ed8:	683b      	ldr	r3, [r7, #0]
    6eda:	7c1b      	ldrb	r3, [r3, #16]
    6edc:	001a      	movs	r2, r3
    6ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6ee0:	4313      	orrs	r3, r2
    6ee2:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    6ee4:	683b      	ldr	r3, [r7, #0]
    6ee6:	7c5b      	ldrb	r3, [r3, #17]
    6ee8:	2b00      	cmp	r3, #0
    6eea:	d103      	bne.n	6ef4 <_spi_set_config+0x194>
    6eec:	4b1f      	ldr	r3, [pc, #124]	; (6f6c <_spi_set_config+0x20c>)
    6eee:	4798      	blx	r3
    6ef0:	1e03      	subs	r3, r0, #0
    6ef2:	d003      	beq.n	6efc <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6ef6:	2280      	movs	r2, #128	; 0x80
    6ef8:	4313      	orrs	r3, r2
    6efa:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    6efc:	683b      	ldr	r3, [r7, #0]
    6efe:	7c9b      	ldrb	r3, [r3, #18]
    6f00:	2b00      	cmp	r3, #0
    6f02:	d004      	beq.n	6f0e <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f06:	2280      	movs	r2, #128	; 0x80
    6f08:	0292      	lsls	r2, r2, #10
    6f0a:	4313      	orrs	r3, r2
    6f0c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    6f0e:	683b      	ldr	r3, [r7, #0]
    6f10:	7cdb      	ldrb	r3, [r3, #19]
    6f12:	2b00      	cmp	r3, #0
    6f14:	d004      	beq.n	6f20 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    6f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f18:	2280      	movs	r2, #128	; 0x80
    6f1a:	0092      	lsls	r2, r2, #2
    6f1c:	4313      	orrs	r3, r2
    6f1e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    6f20:	683b      	ldr	r3, [r7, #0]
    6f22:	7d1b      	ldrb	r3, [r3, #20]
    6f24:	2b00      	cmp	r3, #0
    6f26:	d004      	beq.n	6f32 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    6f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f2a:	2280      	movs	r2, #128	; 0x80
    6f2c:	0192      	lsls	r2, r2, #6
    6f2e:	4313      	orrs	r3, r2
    6f30:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    6f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f34:	681a      	ldr	r2, [r3, #0]
    6f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6f38:	431a      	orrs	r2, r3
    6f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f3c:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    6f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f40:	685a      	ldr	r2, [r3, #4]
    6f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f44:	431a      	orrs	r2, r3
    6f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f48:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    6f4a:	2300      	movs	r3, #0
}
    6f4c:	0018      	movs	r0, r3
    6f4e:	46bd      	mov	sp, r7
    6f50:	b013      	add	sp, #76	; 0x4c
    6f52:	bd90      	pop	{r4, r7, pc}
    6f54:	00006aad 	.word	0x00006aad
    6f58:	00006745 	.word	0x00006745
    6f5c:	00009129 	.word	0x00009129
    6f60:	00006901 	.word	0x00006901
    6f64:	00008f61 	.word	0x00008f61
    6f68:	0000647d 	.word	0x0000647d
    6f6c:	00006c21 	.word	0x00006c21

00006f70 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    6f70:	b590      	push	{r4, r7, lr}
    6f72:	b08b      	sub	sp, #44	; 0x2c
    6f74:	af00      	add	r7, sp, #0
    6f76:	60f8      	str	r0, [r7, #12]
    6f78:	60b9      	str	r1, [r7, #8]
    6f7a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    6f7c:	68fb      	ldr	r3, [r7, #12]
    6f7e:	68ba      	ldr	r2, [r7, #8]
    6f80:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    6f82:	68fb      	ldr	r3, [r7, #12]
    6f84:	681b      	ldr	r3, [r3, #0]
    6f86:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    6f88:	6a3b      	ldr	r3, [r7, #32]
    6f8a:	681b      	ldr	r3, [r3, #0]
    6f8c:	2202      	movs	r2, #2
    6f8e:	4013      	ands	r3, r2
    6f90:	d001      	beq.n	6f96 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    6f92:	231c      	movs	r3, #28
    6f94:	e09c      	b.n	70d0 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    6f96:	6a3b      	ldr	r3, [r7, #32]
    6f98:	681b      	ldr	r3, [r3, #0]
    6f9a:	2201      	movs	r2, #1
    6f9c:	4013      	ands	r3, r2
    6f9e:	d001      	beq.n	6fa4 <spi_init+0x34>
		return STATUS_BUSY;
    6fa0:	2305      	movs	r3, #5
    6fa2:	e095      	b.n	70d0 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6fa4:	68fb      	ldr	r3, [r7, #12]
    6fa6:	681b      	ldr	r3, [r3, #0]
    6fa8:	0018      	movs	r0, r3
    6faa:	4b4b      	ldr	r3, [pc, #300]	; (70d8 <spi_init+0x168>)
    6fac:	4798      	blx	r3
    6fae:	0003      	movs	r3, r0
    6fb0:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6fb2:	69fb      	ldr	r3, [r7, #28]
    6fb4:	3302      	adds	r3, #2
    6fb6:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6fb8:	69fb      	ldr	r3, [r7, #28]
    6fba:	3314      	adds	r3, #20
    6fbc:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6fbe:	2201      	movs	r2, #1
    6fc0:	69bb      	ldr	r3, [r7, #24]
    6fc2:	409a      	lsls	r2, r3
    6fc4:	0013      	movs	r3, r2
    6fc6:	0019      	movs	r1, r3
    6fc8:	2002      	movs	r0, #2
    6fca:	4b44      	ldr	r3, [pc, #272]	; (70dc <spi_init+0x16c>)
    6fcc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6fce:	2310      	movs	r3, #16
    6fd0:	18fb      	adds	r3, r7, r3
    6fd2:	0018      	movs	r0, r3
    6fd4:	4b42      	ldr	r3, [pc, #264]	; (70e0 <spi_init+0x170>)
    6fd6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6fd8:	687b      	ldr	r3, [r7, #4]
    6fda:	2224      	movs	r2, #36	; 0x24
    6fdc:	5c9a      	ldrb	r2, [r3, r2]
    6fde:	2310      	movs	r3, #16
    6fe0:	18fb      	adds	r3, r7, r3
    6fe2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6fe4:	697b      	ldr	r3, [r7, #20]
    6fe6:	b2db      	uxtb	r3, r3
    6fe8:	2210      	movs	r2, #16
    6fea:	18ba      	adds	r2, r7, r2
    6fec:	0011      	movs	r1, r2
    6fee:	0018      	movs	r0, r3
    6ff0:	4b3c      	ldr	r3, [pc, #240]	; (70e4 <spi_init+0x174>)
    6ff2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6ff4:	697b      	ldr	r3, [r7, #20]
    6ff6:	b2db      	uxtb	r3, r3
    6ff8:	0018      	movs	r0, r3
    6ffa:	4b3b      	ldr	r3, [pc, #236]	; (70e8 <spi_init+0x178>)
    6ffc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6ffe:	687b      	ldr	r3, [r7, #4]
    7000:	2224      	movs	r2, #36	; 0x24
    7002:	5c9b      	ldrb	r3, [r3, r2]
    7004:	2100      	movs	r1, #0
    7006:	0018      	movs	r0, r3
    7008:	4b38      	ldr	r3, [pc, #224]	; (70ec <spi_init+0x17c>)
    700a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    700c:	687b      	ldr	r3, [r7, #4]
    700e:	781b      	ldrb	r3, [r3, #0]
    7010:	2b01      	cmp	r3, #1
    7012:	d105      	bne.n	7020 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    7014:	6a3b      	ldr	r3, [r7, #32]
    7016:	681b      	ldr	r3, [r3, #0]
    7018:	220c      	movs	r2, #12
    701a:	431a      	orrs	r2, r3
    701c:	6a3b      	ldr	r3, [r7, #32]
    701e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7020:	2327      	movs	r3, #39	; 0x27
    7022:	18fb      	adds	r3, r7, r3
    7024:	2200      	movs	r2, #0
    7026:	701a      	strb	r2, [r3, #0]
    7028:	e010      	b.n	704c <spi_init+0xdc>
		module->callback[i]        = NULL;
    702a:	2327      	movs	r3, #39	; 0x27
    702c:	18fb      	adds	r3, r7, r3
    702e:	781b      	ldrb	r3, [r3, #0]
    7030:	68fa      	ldr	r2, [r7, #12]
    7032:	3302      	adds	r3, #2
    7034:	009b      	lsls	r3, r3, #2
    7036:	18d3      	adds	r3, r2, r3
    7038:	3304      	adds	r3, #4
    703a:	2200      	movs	r2, #0
    703c:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    703e:	2327      	movs	r3, #39	; 0x27
    7040:	18fb      	adds	r3, r7, r3
    7042:	781a      	ldrb	r2, [r3, #0]
    7044:	2327      	movs	r3, #39	; 0x27
    7046:	18fb      	adds	r3, r7, r3
    7048:	3201      	adds	r2, #1
    704a:	701a      	strb	r2, [r3, #0]
    704c:	2327      	movs	r3, #39	; 0x27
    704e:	18fb      	adds	r3, r7, r3
    7050:	781b      	ldrb	r3, [r3, #0]
    7052:	2b06      	cmp	r3, #6
    7054:	d9e9      	bls.n	702a <spi_init+0xba>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    7056:	68fb      	ldr	r3, [r7, #12]
    7058:	2200      	movs	r2, #0
    705a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    705c:	68fb      	ldr	r3, [r7, #12]
    705e:	2200      	movs	r2, #0
    7060:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    7062:	68fb      	ldr	r3, [r7, #12]
    7064:	2200      	movs	r2, #0
    7066:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    7068:	68fb      	ldr	r3, [r7, #12]
    706a:	2200      	movs	r2, #0
    706c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    706e:	68fb      	ldr	r3, [r7, #12]
    7070:	2236      	movs	r2, #54	; 0x36
    7072:	2100      	movs	r1, #0
    7074:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    7076:	68fb      	ldr	r3, [r7, #12]
    7078:	2237      	movs	r2, #55	; 0x37
    707a:	2100      	movs	r1, #0
    707c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    707e:	68fb      	ldr	r3, [r7, #12]
    7080:	2238      	movs	r2, #56	; 0x38
    7082:	2100      	movs	r1, #0
    7084:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    7086:	68fb      	ldr	r3, [r7, #12]
    7088:	2203      	movs	r2, #3
    708a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    708c:	68fb      	ldr	r3, [r7, #12]
    708e:	2200      	movs	r2, #0
    7090:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    7092:	68fb      	ldr	r3, [r7, #12]
    7094:	681b      	ldr	r3, [r3, #0]
    7096:	2213      	movs	r2, #19
    7098:	18bc      	adds	r4, r7, r2
    709a:	0018      	movs	r0, r3
    709c:	4b0e      	ldr	r3, [pc, #56]	; (70d8 <spi_init+0x168>)
    709e:	4798      	blx	r3
    70a0:	0003      	movs	r3, r0
    70a2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    70a4:	4a12      	ldr	r2, [pc, #72]	; (70f0 <spi_init+0x180>)
    70a6:	2313      	movs	r3, #19
    70a8:	18fb      	adds	r3, r7, r3
    70aa:	781b      	ldrb	r3, [r3, #0]
    70ac:	0011      	movs	r1, r2
    70ae:	0018      	movs	r0, r3
    70b0:	4b10      	ldr	r3, [pc, #64]	; (70f4 <spi_init+0x184>)
    70b2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    70b4:	2313      	movs	r3, #19
    70b6:	18fb      	adds	r3, r7, r3
    70b8:	781a      	ldrb	r2, [r3, #0]
    70ba:	4b0f      	ldr	r3, [pc, #60]	; (70f8 <spi_init+0x188>)
    70bc:	0092      	lsls	r2, r2, #2
    70be:	68f9      	ldr	r1, [r7, #12]
    70c0:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    70c2:	687a      	ldr	r2, [r7, #4]
    70c4:	68fb      	ldr	r3, [r7, #12]
    70c6:	0011      	movs	r1, r2
    70c8:	0018      	movs	r0, r3
    70ca:	4b0c      	ldr	r3, [pc, #48]	; (70fc <spi_init+0x18c>)
    70cc:	4798      	blx	r3
    70ce:	0003      	movs	r3, r0
}
    70d0:	0018      	movs	r0, r3
    70d2:	46bd      	mov	sp, r7
    70d4:	b00b      	add	sp, #44	; 0x2c
    70d6:	bd90      	pop	{r4, r7, pc}
    70d8:	00006901 	.word	0x00006901
    70dc:	00006bc5 	.word	0x00006bc5
    70e0:	00006bad 	.word	0x00006bad
    70e4:	00008e3d 	.word	0x00008e3d
    70e8:	00008e81 	.word	0x00008e81
    70ec:	000066b9 	.word	0x000066b9
    70f0:	00007349 	.word	0x00007349
    70f4:	00006965 	.word	0x00006965
    70f8:	2000043c 	.word	0x2000043c
    70fc:	00006d61 	.word	0x00006d61

00007100 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    7100:	b580      	push	{r7, lr}
    7102:	b086      	sub	sp, #24
    7104:	af00      	add	r7, sp, #0
    7106:	60f8      	str	r0, [r7, #12]
    7108:	60b9      	str	r1, [r7, #8]
    710a:	1dfb      	adds	r3, r7, #7
    710c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    710e:	68fb      	ldr	r3, [r7, #12]
    7110:	795b      	ldrb	r3, [r3, #5]
    7112:	2b01      	cmp	r3, #1
    7114:	d001      	beq.n	711a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    7116:	2315      	movs	r3, #21
    7118:	e05c      	b.n	71d4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    711a:	68fb      	ldr	r3, [r7, #12]
    711c:	7a1b      	ldrb	r3, [r3, #8]
    711e:	2201      	movs	r2, #1
    7120:	4053      	eors	r3, r2
    7122:	b2db      	uxtb	r3, r3
    7124:	2b00      	cmp	r3, #0
    7126:	d054      	beq.n	71d2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    7128:	1dfb      	adds	r3, r7, #7
    712a:	781b      	ldrb	r3, [r3, #0]
    712c:	2b00      	cmp	r3, #0
    712e:	d04a      	beq.n	71c6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    7130:	68bb      	ldr	r3, [r7, #8]
    7132:	785b      	ldrb	r3, [r3, #1]
    7134:	2b00      	cmp	r3, #0
    7136:	d03f      	beq.n	71b8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    7138:	68fb      	ldr	r3, [r7, #12]
    713a:	0018      	movs	r0, r3
    713c:	4b27      	ldr	r3, [pc, #156]	; (71dc <spi_select_slave+0xdc>)
    713e:	4798      	blx	r3
    7140:	0003      	movs	r3, r0
    7142:	001a      	movs	r2, r3
    7144:	2301      	movs	r3, #1
    7146:	4053      	eors	r3, r2
    7148:	b2db      	uxtb	r3, r3
    714a:	2b00      	cmp	r3, #0
    714c:	d007      	beq.n	715e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    714e:	68bb      	ldr	r3, [r7, #8]
    7150:	781b      	ldrb	r3, [r3, #0]
    7152:	2101      	movs	r1, #1
    7154:	0018      	movs	r0, r3
    7156:	4b22      	ldr	r3, [pc, #136]	; (71e0 <spi_select_slave+0xe0>)
    7158:	4798      	blx	r3
					return STATUS_BUSY;
    715a:	2305      	movs	r3, #5
    715c:	e03a      	b.n	71d4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    715e:	68bb      	ldr	r3, [r7, #8]
    7160:	781b      	ldrb	r3, [r3, #0]
    7162:	2100      	movs	r1, #0
    7164:	0018      	movs	r0, r3
    7166:	4b1e      	ldr	r3, [pc, #120]	; (71e0 <spi_select_slave+0xe0>)
    7168:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    716a:	68bb      	ldr	r3, [r7, #8]
    716c:	789b      	ldrb	r3, [r3, #2]
    716e:	b29a      	uxth	r2, r3
    7170:	68fb      	ldr	r3, [r7, #12]
    7172:	0011      	movs	r1, r2
    7174:	0018      	movs	r0, r3
    7176:	4b1b      	ldr	r3, [pc, #108]	; (71e4 <spi_select_slave+0xe4>)
    7178:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    717a:	68fb      	ldr	r3, [r7, #12]
    717c:	79db      	ldrb	r3, [r3, #7]
    717e:	2201      	movs	r2, #1
    7180:	4053      	eors	r3, r2
    7182:	b2db      	uxtb	r3, r3
    7184:	2b00      	cmp	r3, #0
    7186:	d024      	beq.n	71d2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    7188:	46c0      	nop			; (mov r8, r8)
    718a:	68fb      	ldr	r3, [r7, #12]
    718c:	0018      	movs	r0, r3
    718e:	4b16      	ldr	r3, [pc, #88]	; (71e8 <spi_select_slave+0xe8>)
    7190:	4798      	blx	r3
    7192:	0003      	movs	r3, r0
    7194:	001a      	movs	r2, r3
    7196:	2301      	movs	r3, #1
    7198:	4053      	eors	r3, r2
    719a:	b2db      	uxtb	r3, r3
    719c:	2b00      	cmp	r3, #0
    719e:	d1f4      	bne.n	718a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    71a0:	2316      	movs	r3, #22
    71a2:	18fb      	adds	r3, r7, r3
    71a4:	2200      	movs	r2, #0
    71a6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    71a8:	2316      	movs	r3, #22
    71aa:	18fa      	adds	r2, r7, r3
    71ac:	68fb      	ldr	r3, [r7, #12]
    71ae:	0011      	movs	r1, r2
    71b0:	0018      	movs	r0, r3
    71b2:	4b0e      	ldr	r3, [pc, #56]	; (71ec <spi_select_slave+0xec>)
    71b4:	4798      	blx	r3
    71b6:	e00c      	b.n	71d2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    71b8:	68bb      	ldr	r3, [r7, #8]
    71ba:	781b      	ldrb	r3, [r3, #0]
    71bc:	2100      	movs	r1, #0
    71be:	0018      	movs	r0, r3
    71c0:	4b07      	ldr	r3, [pc, #28]	; (71e0 <spi_select_slave+0xe0>)
    71c2:	4798      	blx	r3
    71c4:	e005      	b.n	71d2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    71c6:	68bb      	ldr	r3, [r7, #8]
    71c8:	781b      	ldrb	r3, [r3, #0]
    71ca:	2101      	movs	r1, #1
    71cc:	0018      	movs	r0, r3
    71ce:	4b04      	ldr	r3, [pc, #16]	; (71e0 <spi_select_slave+0xe0>)
    71d0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    71d2:	2300      	movs	r3, #0
}
    71d4:	0018      	movs	r0, r3
    71d6:	46bd      	mov	sp, r7
    71d8:	b006      	add	sp, #24
    71da:	bd80      	pop	{r7, pc}
    71dc:	00006c41 	.word	0x00006c41
    71e0:	00006b59 	.word	0x00006b59
    71e4:	00006c91 	.word	0x00006c91
    71e8:	00006c69 	.word	0x00006c69
    71ec:	00006cd9 	.word	0x00006cd9

000071f0 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    71f0:	b580      	push	{r7, lr}
    71f2:	b084      	sub	sp, #16
    71f4:	af00      	add	r7, sp, #0
    71f6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    71f8:	687b      	ldr	r3, [r7, #4]
    71fa:	681b      	ldr	r3, [r3, #0]
    71fc:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    71fe:	687b      	ldr	r3, [r7, #4]
    7200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7202:	781b      	ldrb	r3, [r3, #0]
    7204:	b2da      	uxtb	r2, r3
    7206:	230e      	movs	r3, #14
    7208:	18fb      	adds	r3, r7, r3
    720a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    720c:	687b      	ldr	r3, [r7, #4]
    720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7210:	1c5a      	adds	r2, r3, #1
    7212:	687b      	ldr	r3, [r7, #4]
    7214:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7216:	687b      	ldr	r3, [r7, #4]
    7218:	799b      	ldrb	r3, [r3, #6]
    721a:	2b01      	cmp	r3, #1
    721c:	d113      	bne.n	7246 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    721e:	687b      	ldr	r3, [r7, #4]
    7220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7222:	781b      	ldrb	r3, [r3, #0]
    7224:	b2db      	uxtb	r3, r3
    7226:	021b      	lsls	r3, r3, #8
    7228:	b21a      	sxth	r2, r3
    722a:	230e      	movs	r3, #14
    722c:	18fb      	adds	r3, r7, r3
    722e:	2100      	movs	r1, #0
    7230:	5e5b      	ldrsh	r3, [r3, r1]
    7232:	4313      	orrs	r3, r2
    7234:	b21a      	sxth	r2, r3
    7236:	230e      	movs	r3, #14
    7238:	18fb      	adds	r3, r7, r3
    723a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    723c:	687b      	ldr	r3, [r7, #4]
    723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7240:	1c5a      	adds	r2, r3, #1
    7242:	687b      	ldr	r3, [r7, #4]
    7244:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    7246:	230e      	movs	r3, #14
    7248:	18fb      	adds	r3, r7, r3
    724a:	881b      	ldrh	r3, [r3, #0]
    724c:	05db      	lsls	r3, r3, #23
    724e:	0dda      	lsrs	r2, r3, #23
    7250:	68bb      	ldr	r3, [r7, #8]
    7252:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    7258:	b29b      	uxth	r3, r3
    725a:	3b01      	subs	r3, #1
    725c:	b29a      	uxth	r2, r3
    725e:	687b      	ldr	r3, [r7, #4]
    7260:	869a      	strh	r2, [r3, #52]	; 0x34
}
    7262:	46c0      	nop			; (mov r8, r8)
    7264:	46bd      	mov	sp, r7
    7266:	b004      	add	sp, #16
    7268:	bd80      	pop	{r7, pc}
    726a:	46c0      	nop			; (mov r8, r8)

0000726c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    726c:	b580      	push	{r7, lr}
    726e:	b084      	sub	sp, #16
    7270:	af00      	add	r7, sp, #0
    7272:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7274:	687b      	ldr	r3, [r7, #4]
    7276:	681b      	ldr	r3, [r3, #0]
    7278:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    727a:	4b08      	ldr	r3, [pc, #32]	; (729c <_spi_write_dummy+0x30>)
    727c:	881b      	ldrh	r3, [r3, #0]
    727e:	001a      	movs	r2, r3
    7280:	68fb      	ldr	r3, [r7, #12]
    7282:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    7284:	687b      	ldr	r3, [r7, #4]
    7286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    7288:	b29b      	uxth	r3, r3
    728a:	3b01      	subs	r3, #1
    728c:	b29a      	uxth	r2, r3
    728e:	687b      	ldr	r3, [r7, #4]
    7290:	865a      	strh	r2, [r3, #50]	; 0x32
}
    7292:	46c0      	nop			; (mov r8, r8)
    7294:	46bd      	mov	sp, r7
    7296:	b004      	add	sp, #16
    7298:	bd80      	pop	{r7, pc}
    729a:	46c0      	nop			; (mov r8, r8)
    729c:	20000454 	.word	0x20000454

000072a0 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    72a0:	b580      	push	{r7, lr}
    72a2:	b084      	sub	sp, #16
    72a4:	af00      	add	r7, sp, #0
    72a6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    72a8:	687b      	ldr	r3, [r7, #4]
    72aa:	681b      	ldr	r3, [r3, #0]
    72ac:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    72ae:	230a      	movs	r3, #10
    72b0:	18fb      	adds	r3, r7, r3
    72b2:	2200      	movs	r2, #0
    72b4:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    72b6:	68fb      	ldr	r3, [r7, #12]
    72b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    72ba:	230a      	movs	r3, #10
    72bc:	18fb      	adds	r3, r7, r3
    72be:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    72c0:	687b      	ldr	r3, [r7, #4]
    72c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    72c4:	b29b      	uxth	r3, r3
    72c6:	3b01      	subs	r3, #1
    72c8:	b29a      	uxth	r2, r3
    72ca:	687b      	ldr	r3, [r7, #4]
    72cc:	865a      	strh	r2, [r3, #50]	; 0x32
}
    72ce:	46c0      	nop			; (mov r8, r8)
    72d0:	46bd      	mov	sp, r7
    72d2:	b004      	add	sp, #16
    72d4:	bd80      	pop	{r7, pc}
    72d6:	46c0      	nop			; (mov r8, r8)

000072d8 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    72d8:	b580      	push	{r7, lr}
    72da:	b084      	sub	sp, #16
    72dc:	af00      	add	r7, sp, #0
    72de:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    72e0:	687b      	ldr	r3, [r7, #4]
    72e2:	681b      	ldr	r3, [r3, #0]
    72e4:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    72e6:	68fb      	ldr	r3, [r7, #12]
    72e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72ea:	b29a      	uxth	r2, r3
    72ec:	230a      	movs	r3, #10
    72ee:	18fb      	adds	r3, r7, r3
    72f0:	05d2      	lsls	r2, r2, #23
    72f2:	0dd2      	lsrs	r2, r2, #23
    72f4:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    72f6:	687b      	ldr	r3, [r7, #4]
    72f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    72fa:	220a      	movs	r2, #10
    72fc:	18ba      	adds	r2, r7, r2
    72fe:	8812      	ldrh	r2, [r2, #0]
    7300:	b2d2      	uxtb	r2, r2
    7302:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    7304:	687b      	ldr	r3, [r7, #4]
    7306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7308:	1c5a      	adds	r2, r3, #1
    730a:	687b      	ldr	r3, [r7, #4]
    730c:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    730e:	687b      	ldr	r3, [r7, #4]
    7310:	799b      	ldrb	r3, [r3, #6]
    7312:	2b01      	cmp	r3, #1
    7314:	d10d      	bne.n	7332 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    7316:	687b      	ldr	r3, [r7, #4]
    7318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    731a:	220a      	movs	r2, #10
    731c:	18ba      	adds	r2, r7, r2
    731e:	8812      	ldrh	r2, [r2, #0]
    7320:	0a12      	lsrs	r2, r2, #8
    7322:	b292      	uxth	r2, r2
    7324:	b2d2      	uxtb	r2, r2
    7326:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    7328:	687b      	ldr	r3, [r7, #4]
    732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    732c:	1c5a      	adds	r2, r3, #1
    732e:	687b      	ldr	r3, [r7, #4]
    7330:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    7332:	687b      	ldr	r3, [r7, #4]
    7334:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    7336:	b29b      	uxth	r3, r3
    7338:	3b01      	subs	r3, #1
    733a:	b29a      	uxth	r2, r3
    733c:	687b      	ldr	r3, [r7, #4]
    733e:	861a      	strh	r2, [r3, #48]	; 0x30
}
    7340:	46c0      	nop			; (mov r8, r8)
    7342:	46bd      	mov	sp, r7
    7344:	b004      	add	sp, #16
    7346:	bd80      	pop	{r7, pc}

00007348 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    7348:	b580      	push	{r7, lr}
    734a:	b086      	sub	sp, #24
    734c:	af00      	add	r7, sp, #0
    734e:	0002      	movs	r2, r0
    7350:	1dfb      	adds	r3, r7, #7
    7352:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    7354:	1dfb      	adds	r3, r7, #7
    7356:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    7358:	4b96      	ldr	r3, [pc, #600]	; (75b4 <_spi_interrupt_handler+0x26c>)
    735a:	0092      	lsls	r2, r2, #2
    735c:	58d3      	ldr	r3, [r2, r3]
    735e:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    7360:	697b      	ldr	r3, [r7, #20]
    7362:	681b      	ldr	r3, [r3, #0]
    7364:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    7366:	697b      	ldr	r3, [r7, #20]
    7368:	2237      	movs	r2, #55	; 0x37
    736a:	5c9a      	ldrb	r2, [r3, r2]
    736c:	697b      	ldr	r3, [r7, #20]
    736e:	2136      	movs	r1, #54	; 0x36
    7370:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    7372:	230f      	movs	r3, #15
    7374:	18fb      	adds	r3, r7, r3
    7376:	400a      	ands	r2, r1
    7378:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    737a:	693b      	ldr	r3, [r7, #16]
    737c:	7e1b      	ldrb	r3, [r3, #24]
    737e:	b2da      	uxtb	r2, r3
    7380:	230c      	movs	r3, #12
    7382:	18fb      	adds	r3, r7, r3
    7384:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    7386:	693b      	ldr	r3, [r7, #16]
    7388:	7d9b      	ldrb	r3, [r3, #22]
    738a:	b2db      	uxtb	r3, r3
    738c:	b29a      	uxth	r2, r3
    738e:	230c      	movs	r3, #12
    7390:	18fb      	adds	r3, r7, r3
    7392:	210c      	movs	r1, #12
    7394:	1879      	adds	r1, r7, r1
    7396:	8809      	ldrh	r1, [r1, #0]
    7398:	400a      	ands	r2, r1
    739a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    739c:	230c      	movs	r3, #12
    739e:	18fb      	adds	r3, r7, r3
    73a0:	881b      	ldrh	r3, [r3, #0]
    73a2:	2201      	movs	r2, #1
    73a4:	4013      	ands	r3, r2
    73a6:	d038      	beq.n	741a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    73a8:	697b      	ldr	r3, [r7, #20]
    73aa:	795b      	ldrb	r3, [r3, #5]
    73ac:	2b01      	cmp	r3, #1
    73ae:	d110      	bne.n	73d2 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    73b0:	697b      	ldr	r3, [r7, #20]
    73b2:	7a5b      	ldrb	r3, [r3, #9]
    73b4:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    73b6:	2b00      	cmp	r3, #0
    73b8:	d10b      	bne.n	73d2 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    73ba:	697b      	ldr	r3, [r7, #20]
    73bc:	0018      	movs	r0, r3
    73be:	4b7e      	ldr	r3, [pc, #504]	; (75b8 <_spi_interrupt_handler+0x270>)
    73c0:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    73c2:	697b      	ldr	r3, [r7, #20]
    73c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    73c6:	b29b      	uxth	r3, r3
    73c8:	2b00      	cmp	r3, #0
    73ca:	d102      	bne.n	73d2 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    73cc:	693b      	ldr	r3, [r7, #16]
    73ce:	2201      	movs	r2, #1
    73d0:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    73d2:	697b      	ldr	r3, [r7, #20]
    73d4:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    73d6:	2b01      	cmp	r3, #1
    73d8:	d11f      	bne.n	741a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    73da:	697b      	ldr	r3, [r7, #20]
    73dc:	7a5b      	ldrb	r3, [r3, #9]
    73de:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    73e0:	2b00      	cmp	r3, #0
    73e2:	d01a      	beq.n	741a <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    73e4:	697b      	ldr	r3, [r7, #20]
    73e6:	0018      	movs	r0, r3
    73e8:	4b74      	ldr	r3, [pc, #464]	; (75bc <_spi_interrupt_handler+0x274>)
    73ea:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    73ec:	697b      	ldr	r3, [r7, #20]
    73ee:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    73f0:	b29b      	uxth	r3, r3
    73f2:	2b00      	cmp	r3, #0
    73f4:	d111      	bne.n	741a <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    73f6:	693b      	ldr	r3, [r7, #16]
    73f8:	2201      	movs	r2, #1
    73fa:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    73fc:	697b      	ldr	r3, [r7, #20]
    73fe:	7a5b      	ldrb	r3, [r3, #9]
    7400:	b2db      	uxtb	r3, r3
    7402:	2b01      	cmp	r3, #1
    7404:	d109      	bne.n	741a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    7406:	697b      	ldr	r3, [r7, #20]
    7408:	79db      	ldrb	r3, [r3, #7]
    740a:	2201      	movs	r2, #1
    740c:	4053      	eors	r3, r2
    740e:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    7410:	2b00      	cmp	r3, #0
    7412:	d002      	beq.n	741a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7414:	693b      	ldr	r3, [r7, #16]
    7416:	2202      	movs	r2, #2
    7418:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    741a:	230c      	movs	r3, #12
    741c:	18fb      	adds	r3, r7, r3
    741e:	881b      	ldrh	r3, [r3, #0]
    7420:	2204      	movs	r2, #4
    7422:	4013      	ands	r3, r2
    7424:	d100      	bne.n	7428 <_spi_interrupt_handler+0xe0>
    7426:	e07e      	b.n	7526 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7428:	693b      	ldr	r3, [r7, #16]
    742a:	8b5b      	ldrh	r3, [r3, #26]
    742c:	b29b      	uxth	r3, r3
    742e:	001a      	movs	r2, r3
    7430:	2304      	movs	r3, #4
    7432:	4013      	ands	r3, r2
    7434:	d022      	beq.n	747c <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    7436:	697b      	ldr	r3, [r7, #20]
    7438:	7a5b      	ldrb	r3, [r3, #9]
    743a:	b2db      	uxtb	r3, r3
    743c:	2b01      	cmp	r3, #1
    743e:	d014      	beq.n	746a <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    7440:	697b      	ldr	r3, [r7, #20]
    7442:	2238      	movs	r2, #56	; 0x38
    7444:	211e      	movs	r1, #30
    7446:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    7448:	697b      	ldr	r3, [r7, #20]
    744a:	2203      	movs	r2, #3
    744c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    744e:	693b      	ldr	r3, [r7, #16]
    7450:	2205      	movs	r2, #5
    7452:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    7454:	230f      	movs	r3, #15
    7456:	18fb      	adds	r3, r7, r3
    7458:	781b      	ldrb	r3, [r3, #0]
    745a:	2208      	movs	r2, #8
    745c:	4013      	ands	r3, r2
    745e:	d004      	beq.n	746a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    7460:	697b      	ldr	r3, [r7, #20]
    7462:	699b      	ldr	r3, [r3, #24]
    7464:	697a      	ldr	r2, [r7, #20]
    7466:	0010      	movs	r0, r2
    7468:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    746a:	693b      	ldr	r3, [r7, #16]
    746c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    746e:	230a      	movs	r3, #10
    7470:	18fb      	adds	r3, r7, r3
    7472:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7474:	693b      	ldr	r3, [r7, #16]
    7476:	2204      	movs	r2, #4
    7478:	835a      	strh	r2, [r3, #26]
    747a:	e054      	b.n	7526 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    747c:	697b      	ldr	r3, [r7, #20]
    747e:	7a5b      	ldrb	r3, [r3, #9]
    7480:	b2db      	uxtb	r3, r3
    7482:	2b01      	cmp	r3, #1
    7484:	d11e      	bne.n	74c4 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    7486:	697b      	ldr	r3, [r7, #20]
    7488:	0018      	movs	r0, r3
    748a:	4b4d      	ldr	r3, [pc, #308]	; (75c0 <_spi_interrupt_handler+0x278>)
    748c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    748e:	697b      	ldr	r3, [r7, #20]
    7490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    7492:	b29b      	uxth	r3, r3
    7494:	2b00      	cmp	r3, #0
    7496:	d146      	bne.n	7526 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    7498:	693b      	ldr	r3, [r7, #16]
    749a:	2204      	movs	r2, #4
    749c:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    749e:	697b      	ldr	r3, [r7, #20]
    74a0:	2238      	movs	r2, #56	; 0x38
    74a2:	2100      	movs	r1, #0
    74a4:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    74a6:	697b      	ldr	r3, [r7, #20]
    74a8:	2203      	movs	r2, #3
    74aa:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    74ac:	230f      	movs	r3, #15
    74ae:	18fb      	adds	r3, r7, r3
    74b0:	781b      	ldrb	r3, [r3, #0]
    74b2:	2201      	movs	r2, #1
    74b4:	4013      	ands	r3, r2
    74b6:	d036      	beq.n	7526 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    74b8:	697b      	ldr	r3, [r7, #20]
    74ba:	68db      	ldr	r3, [r3, #12]
    74bc:	697a      	ldr	r2, [r7, #20]
    74be:	0010      	movs	r0, r2
    74c0:	4798      	blx	r3
    74c2:	e030      	b.n	7526 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    74c4:	697b      	ldr	r3, [r7, #20]
    74c6:	0018      	movs	r0, r3
    74c8:	4b3e      	ldr	r3, [pc, #248]	; (75c4 <_spi_interrupt_handler+0x27c>)
    74ca:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    74cc:	697b      	ldr	r3, [r7, #20]
    74ce:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    74d0:	b29b      	uxth	r3, r3
    74d2:	2b00      	cmp	r3, #0
    74d4:	d127      	bne.n	7526 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    74d6:	697b      	ldr	r3, [r7, #20]
    74d8:	2238      	movs	r2, #56	; 0x38
    74da:	2100      	movs	r1, #0
    74dc:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    74de:	693b      	ldr	r3, [r7, #16]
    74e0:	2204      	movs	r2, #4
    74e2:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    74e4:	697b      	ldr	r3, [r7, #20]
    74e6:	7a5b      	ldrb	r3, [r3, #9]
    74e8:	b2db      	uxtb	r3, r3
    74ea:	2b02      	cmp	r3, #2
    74ec:	d10b      	bne.n	7506 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    74ee:	230f      	movs	r3, #15
    74f0:	18fb      	adds	r3, r7, r3
    74f2:	781b      	ldrb	r3, [r3, #0]
    74f4:	2204      	movs	r2, #4
    74f6:	4013      	ands	r3, r2
    74f8:	d015      	beq.n	7526 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    74fa:	697b      	ldr	r3, [r7, #20]
    74fc:	695b      	ldr	r3, [r3, #20]
    74fe:	697a      	ldr	r2, [r7, #20]
    7500:	0010      	movs	r0, r2
    7502:	4798      	blx	r3
    7504:	e00f      	b.n	7526 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    7506:	697b      	ldr	r3, [r7, #20]
    7508:	7a5b      	ldrb	r3, [r3, #9]
    750a:	b2db      	uxtb	r3, r3
    750c:	2b00      	cmp	r3, #0
    750e:	d10a      	bne.n	7526 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    7510:	230f      	movs	r3, #15
    7512:	18fb      	adds	r3, r7, r3
    7514:	781b      	ldrb	r3, [r3, #0]
    7516:	2202      	movs	r2, #2
    7518:	4013      	ands	r3, r2
    751a:	d004      	beq.n	7526 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    751c:	697b      	ldr	r3, [r7, #20]
    751e:	691b      	ldr	r3, [r3, #16]
    7520:	697a      	ldr	r2, [r7, #20]
    7522:	0010      	movs	r0, r2
    7524:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    7526:	230c      	movs	r3, #12
    7528:	18fb      	adds	r3, r7, r3
    752a:	881b      	ldrh	r3, [r3, #0]
    752c:	2202      	movs	r2, #2
    752e:	4013      	ands	r3, r2
    7530:	d024      	beq.n	757c <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    7532:	697b      	ldr	r3, [r7, #20]
    7534:	795b      	ldrb	r3, [r3, #5]
    7536:	2b01      	cmp	r3, #1
    7538:	d120      	bne.n	757c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    753a:	697b      	ldr	r3, [r7, #20]
    753c:	7a5b      	ldrb	r3, [r3, #9]
    753e:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    7540:	2b01      	cmp	r3, #1
    7542:	d11b      	bne.n	757c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    7544:	697b      	ldr	r3, [r7, #20]
    7546:	79db      	ldrb	r3, [r3, #7]
    7548:	2201      	movs	r2, #1
    754a:	4053      	eors	r3, r2
    754c:	b2db      	uxtb	r3, r3
    754e:	2b00      	cmp	r3, #0
    7550:	d014      	beq.n	757c <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    7552:	693b      	ldr	r3, [r7, #16]
    7554:	2202      	movs	r2, #2
    7556:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    7558:	697b      	ldr	r3, [r7, #20]
    755a:	2203      	movs	r2, #3
    755c:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    755e:	697b      	ldr	r3, [r7, #20]
    7560:	2238      	movs	r2, #56	; 0x38
    7562:	2100      	movs	r1, #0
    7564:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    7566:	230f      	movs	r3, #15
    7568:	18fb      	adds	r3, r7, r3
    756a:	781b      	ldrb	r3, [r3, #0]
    756c:	2201      	movs	r2, #1
    756e:	4013      	ands	r3, r2
    7570:	d004      	beq.n	757c <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    7572:	697b      	ldr	r3, [r7, #20]
    7574:	68db      	ldr	r3, [r3, #12]
    7576:	697a      	ldr	r2, [r7, #20]
    7578:	0010      	movs	r0, r2
    757a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    757c:	230c      	movs	r3, #12
    757e:	18fb      	adds	r3, r7, r3
    7580:	881b      	ldrh	r3, [r3, #0]
    7582:	2280      	movs	r2, #128	; 0x80
    7584:	4013      	ands	r3, r2
    7586:	d010      	beq.n	75aa <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    7588:	693b      	ldr	r3, [r7, #16]
    758a:	2280      	movs	r2, #128	; 0x80
    758c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    758e:	693b      	ldr	r3, [r7, #16]
    7590:	2280      	movs	r2, #128	; 0x80
    7592:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    7594:	230f      	movs	r3, #15
    7596:	18fb      	adds	r3, r7, r3
    7598:	781b      	ldrb	r3, [r3, #0]
    759a:	2240      	movs	r2, #64	; 0x40
    759c:	4013      	ands	r3, r2
    759e:	d004      	beq.n	75aa <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    75a0:	697b      	ldr	r3, [r7, #20]
    75a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    75a4:	697a      	ldr	r2, [r7, #20]
    75a6:	0010      	movs	r0, r2
    75a8:	4798      	blx	r3
		}
	}
#  endif
}
    75aa:	46c0      	nop			; (mov r8, r8)
    75ac:	46bd      	mov	sp, r7
    75ae:	b006      	add	sp, #24
    75b0:	bd80      	pop	{r7, pc}
    75b2:	46c0      	nop			; (mov r8, r8)
    75b4:	2000043c 	.word	0x2000043c
    75b8:	0000726d 	.word	0x0000726d
    75bc:	000071f1 	.word	0x000071f1
    75c0:	000072a1 	.word	0x000072a1
    75c4:	000072d9 	.word	0x000072d9

000075c8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    75c8:	b580      	push	{r7, lr}
    75ca:	b082      	sub	sp, #8
    75cc:	af00      	add	r7, sp, #0
    75ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    75d0:	687b      	ldr	r3, [r7, #4]
    75d2:	2200      	movs	r2, #0
    75d4:	701a      	strb	r2, [r3, #0]
}
    75d6:	46c0      	nop			; (mov r8, r8)
    75d8:	46bd      	mov	sp, r7
    75da:	b002      	add	sp, #8
    75dc:	bd80      	pop	{r7, pc}
    75de:	46c0      	nop			; (mov r8, r8)

000075e0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    75e0:	b580      	push	{r7, lr}
    75e2:	b082      	sub	sp, #8
    75e4:	af00      	add	r7, sp, #0
    75e6:	0002      	movs	r2, r0
    75e8:	6039      	str	r1, [r7, #0]
    75ea:	1dfb      	adds	r3, r7, #7
    75ec:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    75ee:	1dfb      	adds	r3, r7, #7
    75f0:	781b      	ldrb	r3, [r3, #0]
    75f2:	2b01      	cmp	r3, #1
    75f4:	d00a      	beq.n	760c <system_apb_clock_set_mask+0x2c>
    75f6:	2b02      	cmp	r3, #2
    75f8:	d00f      	beq.n	761a <system_apb_clock_set_mask+0x3a>
    75fa:	2b00      	cmp	r3, #0
    75fc:	d114      	bne.n	7628 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    75fe:	4b0e      	ldr	r3, [pc, #56]	; (7638 <system_apb_clock_set_mask+0x58>)
    7600:	4a0d      	ldr	r2, [pc, #52]	; (7638 <system_apb_clock_set_mask+0x58>)
    7602:	6991      	ldr	r1, [r2, #24]
    7604:	683a      	ldr	r2, [r7, #0]
    7606:	430a      	orrs	r2, r1
    7608:	619a      	str	r2, [r3, #24]
			break;
    760a:	e00f      	b.n	762c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    760c:	4b0a      	ldr	r3, [pc, #40]	; (7638 <system_apb_clock_set_mask+0x58>)
    760e:	4a0a      	ldr	r2, [pc, #40]	; (7638 <system_apb_clock_set_mask+0x58>)
    7610:	69d1      	ldr	r1, [r2, #28]
    7612:	683a      	ldr	r2, [r7, #0]
    7614:	430a      	orrs	r2, r1
    7616:	61da      	str	r2, [r3, #28]
			break;
    7618:	e008      	b.n	762c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    761a:	4b07      	ldr	r3, [pc, #28]	; (7638 <system_apb_clock_set_mask+0x58>)
    761c:	4a06      	ldr	r2, [pc, #24]	; (7638 <system_apb_clock_set_mask+0x58>)
    761e:	6a11      	ldr	r1, [r2, #32]
    7620:	683a      	ldr	r2, [r7, #0]
    7622:	430a      	orrs	r2, r1
    7624:	621a      	str	r2, [r3, #32]
			break;
    7626:	e001      	b.n	762c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    7628:	2317      	movs	r3, #23
    762a:	e000      	b.n	762e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    762c:	2300      	movs	r3, #0
}
    762e:	0018      	movs	r0, r3
    7630:	46bd      	mov	sp, r7
    7632:	b002      	add	sp, #8
    7634:	bd80      	pop	{r7, pc}
    7636:	46c0      	nop			; (mov r8, r8)
    7638:	40000400 	.word	0x40000400

0000763c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    763c:	b580      	push	{r7, lr}
    763e:	b082      	sub	sp, #8
    7640:	af00      	add	r7, sp, #0
    7642:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7644:	687b      	ldr	r3, [r7, #4]
    7646:	2280      	movs	r2, #128	; 0x80
    7648:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    764a:	687b      	ldr	r3, [r7, #4]
    764c:	2200      	movs	r2, #0
    764e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7650:	687b      	ldr	r3, [r7, #4]
    7652:	2201      	movs	r2, #1
    7654:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7656:	687b      	ldr	r3, [r7, #4]
    7658:	2200      	movs	r2, #0
    765a:	70da      	strb	r2, [r3, #3]
}
    765c:	46c0      	nop			; (mov r8, r8)
    765e:	46bd      	mov	sp, r7
    7660:	b002      	add	sp, #8
    7662:	bd80      	pop	{r7, pc}

00007664 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    7664:	b580      	push	{r7, lr}
    7666:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    7668:	4b05      	ldr	r3, [pc, #20]	; (7680 <system_is_debugger_present+0x1c>)
    766a:	789b      	ldrb	r3, [r3, #2]
    766c:	b2db      	uxtb	r3, r3
    766e:	001a      	movs	r2, r3
    7670:	2302      	movs	r3, #2
    7672:	4013      	ands	r3, r2
    7674:	1e5a      	subs	r2, r3, #1
    7676:	4193      	sbcs	r3, r2
    7678:	b2db      	uxtb	r3, r3
}
    767a:	0018      	movs	r0, r3
    767c:	46bd      	mov	sp, r7
    767e:	bd80      	pop	{r7, pc}
    7680:	41002000 	.word	0x41002000

00007684 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    7684:	b580      	push	{r7, lr}
    7686:	b084      	sub	sp, #16
    7688:	af00      	add	r7, sp, #0
    768a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    768c:	687b      	ldr	r3, [r7, #4]
    768e:	681b      	ldr	r3, [r3, #0]
    7690:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    7692:	68fb      	ldr	r3, [r7, #12]
    7694:	69db      	ldr	r3, [r3, #28]
    7696:	1e5a      	subs	r2, r3, #1
    7698:	4193      	sbcs	r3, r2
    769a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    769c:	0018      	movs	r0, r3
    769e:	46bd      	mov	sp, r7
    76a0:	b004      	add	sp, #16
    76a2:	bd80      	pop	{r7, pc}

000076a4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    76a4:	b580      	push	{r7, lr}
    76a6:	b082      	sub	sp, #8
    76a8:	af00      	add	r7, sp, #0
    76aa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    76ac:	46c0      	nop			; (mov r8, r8)
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	0018      	movs	r0, r3
    76b2:	4b04      	ldr	r3, [pc, #16]	; (76c4 <_usart_wait_for_sync+0x20>)
    76b4:	4798      	blx	r3
    76b6:	1e03      	subs	r3, r0, #0
    76b8:	d1f9      	bne.n	76ae <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    76ba:	46c0      	nop			; (mov r8, r8)
    76bc:	46bd      	mov	sp, r7
    76be:	b002      	add	sp, #8
    76c0:	bd80      	pop	{r7, pc}
    76c2:	46c0      	nop			; (mov r8, r8)
    76c4:	00007685 	.word	0x00007685

000076c8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    76c8:	b5b0      	push	{r4, r5, r7, lr}
    76ca:	b08c      	sub	sp, #48	; 0x30
    76cc:	af02      	add	r7, sp, #8
    76ce:	6078      	str	r0, [r7, #4]
    76d0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    76d2:	687b      	ldr	r3, [r7, #4]
    76d4:	681b      	ldr	r3, [r3, #0]
    76d6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    76d8:	687b      	ldr	r3, [r7, #4]
    76da:	681b      	ldr	r3, [r3, #0]
    76dc:	0018      	movs	r0, r3
    76de:	4bab      	ldr	r3, [pc, #684]	; (798c <_usart_set_config+0x2c4>)
    76e0:	4798      	blx	r3
    76e2:	0003      	movs	r3, r0
    76e4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    76e6:	697b      	ldr	r3, [r7, #20]
    76e8:	3314      	adds	r3, #20
    76ea:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    76ec:	2300      	movs	r3, #0
    76ee:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    76f0:	2300      	movs	r3, #0
    76f2:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    76f4:	230a      	movs	r3, #10
    76f6:	18fb      	adds	r3, r7, r3
    76f8:	2200      	movs	r2, #0
    76fa:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    76fc:	231f      	movs	r3, #31
    76fe:	18fb      	adds	r3, r7, r3
    7700:	2200      	movs	r2, #0
    7702:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7704:	231e      	movs	r3, #30
    7706:	18fb      	adds	r3, r7, r3
    7708:	2210      	movs	r2, #16
    770a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    770c:	683b      	ldr	r3, [r7, #0]
    770e:	8a1b      	ldrh	r3, [r3, #16]
    7710:	2280      	movs	r2, #128	; 0x80
    7712:	01d2      	lsls	r2, r2, #7
    7714:	4293      	cmp	r3, r2
    7716:	d01c      	beq.n	7752 <_usart_set_config+0x8a>
    7718:	2280      	movs	r2, #128	; 0x80
    771a:	01d2      	lsls	r2, r2, #7
    771c:	4293      	cmp	r3, r2
    771e:	dc06      	bgt.n	772e <_usart_set_config+0x66>
    7720:	2b00      	cmp	r3, #0
    7722:	d00d      	beq.n	7740 <_usart_set_config+0x78>
    7724:	2280      	movs	r2, #128	; 0x80
    7726:	0192      	lsls	r2, r2, #6
    7728:	4293      	cmp	r3, r2
    772a:	d024      	beq.n	7776 <_usart_set_config+0xae>
    772c:	e035      	b.n	779a <_usart_set_config+0xd2>
    772e:	22c0      	movs	r2, #192	; 0xc0
    7730:	01d2      	lsls	r2, r2, #7
    7732:	4293      	cmp	r3, r2
    7734:	d028      	beq.n	7788 <_usart_set_config+0xc0>
    7736:	2280      	movs	r2, #128	; 0x80
    7738:	0212      	lsls	r2, r2, #8
    773a:	4293      	cmp	r3, r2
    773c:	d012      	beq.n	7764 <_usart_set_config+0x9c>
    773e:	e02c      	b.n	779a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7740:	231f      	movs	r3, #31
    7742:	18fb      	adds	r3, r7, r3
    7744:	2200      	movs	r2, #0
    7746:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7748:	231e      	movs	r3, #30
    774a:	18fb      	adds	r3, r7, r3
    774c:	2210      	movs	r2, #16
    774e:	701a      	strb	r2, [r3, #0]
			break;
    7750:	e023      	b.n	779a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7752:	231f      	movs	r3, #31
    7754:	18fb      	adds	r3, r7, r3
    7756:	2200      	movs	r2, #0
    7758:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    775a:	231e      	movs	r3, #30
    775c:	18fb      	adds	r3, r7, r3
    775e:	2208      	movs	r2, #8
    7760:	701a      	strb	r2, [r3, #0]
			break;
    7762:	e01a      	b.n	779a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7764:	231f      	movs	r3, #31
    7766:	18fb      	adds	r3, r7, r3
    7768:	2200      	movs	r2, #0
    776a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    776c:	231e      	movs	r3, #30
    776e:	18fb      	adds	r3, r7, r3
    7770:	2203      	movs	r2, #3
    7772:	701a      	strb	r2, [r3, #0]
			break;
    7774:	e011      	b.n	779a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7776:	231f      	movs	r3, #31
    7778:	18fb      	adds	r3, r7, r3
    777a:	2201      	movs	r2, #1
    777c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    777e:	231e      	movs	r3, #30
    7780:	18fb      	adds	r3, r7, r3
    7782:	2210      	movs	r2, #16
    7784:	701a      	strb	r2, [r3, #0]
			break;
    7786:	e008      	b.n	779a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7788:	231f      	movs	r3, #31
    778a:	18fb      	adds	r3, r7, r3
    778c:	2201      	movs	r2, #1
    778e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7790:	231e      	movs	r3, #30
    7792:	18fb      	adds	r3, r7, r3
    7794:	2208      	movs	r2, #8
    7796:	701a      	strb	r2, [r3, #0]
			break;
    7798:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    779a:	683b      	ldr	r3, [r7, #0]
    779c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    779e:	683b      	ldr	r3, [r7, #0]
    77a0:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    77a2:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    77a4:	683b      	ldr	r3, [r7, #0]
    77a6:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    77a8:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    77aa:	683a      	ldr	r2, [r7, #0]
    77ac:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    77ae:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    77b0:	683a      	ldr	r2, [r7, #0]
    77b2:	7e12      	ldrb	r2, [r2, #24]
    77b4:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    77b6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    77b8:	683a      	ldr	r2, [r7, #0]
    77ba:	2126      	movs	r1, #38	; 0x26
    77bc:	5c52      	ldrb	r2, [r2, r1]
    77be:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    77c0:	4313      	orrs	r3, r2
    77c2:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    77c4:	231d      	movs	r3, #29
    77c6:	18fb      	adds	r3, r7, r3
    77c8:	2200      	movs	r2, #0
    77ca:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    77cc:	683b      	ldr	r3, [r7, #0]
    77ce:	685b      	ldr	r3, [r3, #4]
    77d0:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    77d2:	68fb      	ldr	r3, [r7, #12]
    77d4:	2b00      	cmp	r3, #0
    77d6:	d01e      	beq.n	7816 <_usart_set_config+0x14e>
    77d8:	2280      	movs	r2, #128	; 0x80
    77da:	0552      	lsls	r2, r2, #21
    77dc:	4293      	cmp	r3, r2
    77de:	d14f      	bne.n	7880 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    77e0:	683b      	ldr	r3, [r7, #0]
    77e2:	2227      	movs	r2, #39	; 0x27
    77e4:	5c9b      	ldrb	r3, [r3, r2]
    77e6:	2201      	movs	r2, #1
    77e8:	4053      	eors	r3, r2
    77ea:	b2db      	uxtb	r3, r3
    77ec:	2b00      	cmp	r3, #0
    77ee:	d046      	beq.n	787e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    77f0:	683b      	ldr	r3, [r7, #0]
    77f2:	6a1d      	ldr	r5, [r3, #32]
    77f4:	693b      	ldr	r3, [r7, #16]
    77f6:	b2db      	uxtb	r3, r3
    77f8:	0018      	movs	r0, r3
    77fa:	4b65      	ldr	r3, [pc, #404]	; (7990 <_usart_set_config+0x2c8>)
    77fc:	4798      	blx	r3
    77fe:	0001      	movs	r1, r0
    7800:	231d      	movs	r3, #29
    7802:	18fc      	adds	r4, r7, r3
    7804:	230a      	movs	r3, #10
    7806:	18fb      	adds	r3, r7, r3
    7808:	001a      	movs	r2, r3
    780a:	0028      	movs	r0, r5
    780c:	4b61      	ldr	r3, [pc, #388]	; (7994 <_usart_set_config+0x2cc>)
    780e:	4798      	blx	r3
    7810:	0003      	movs	r3, r0
    7812:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    7814:	e033      	b.n	787e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    7816:	683b      	ldr	r3, [r7, #0]
    7818:	2227      	movs	r2, #39	; 0x27
    781a:	5c9b      	ldrb	r3, [r3, r2]
    781c:	2b00      	cmp	r3, #0
    781e:	d014      	beq.n	784a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    7820:	683b      	ldr	r3, [r7, #0]
    7822:	6a18      	ldr	r0, [r3, #32]
    7824:	683b      	ldr	r3, [r7, #0]
    7826:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    7828:	231d      	movs	r3, #29
    782a:	18fc      	adds	r4, r7, r3
    782c:	231f      	movs	r3, #31
    782e:	18fb      	adds	r3, r7, r3
    7830:	781d      	ldrb	r5, [r3, #0]
    7832:	230a      	movs	r3, #10
    7834:	18fa      	adds	r2, r7, r3
    7836:	231e      	movs	r3, #30
    7838:	18fb      	adds	r3, r7, r3
    783a:	781b      	ldrb	r3, [r3, #0]
    783c:	9300      	str	r3, [sp, #0]
    783e:	002b      	movs	r3, r5
    7840:	4d55      	ldr	r5, [pc, #340]	; (7998 <_usart_set_config+0x2d0>)
    7842:	47a8      	blx	r5
    7844:	0003      	movs	r3, r0
    7846:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    7848:	e01a      	b.n	7880 <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    784a:	683b      	ldr	r3, [r7, #0]
    784c:	6a1d      	ldr	r5, [r3, #32]
    784e:	693b      	ldr	r3, [r7, #16]
    7850:	b2db      	uxtb	r3, r3
    7852:	0018      	movs	r0, r3
    7854:	4b4e      	ldr	r3, [pc, #312]	; (7990 <_usart_set_config+0x2c8>)
    7856:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    7858:	231d      	movs	r3, #29
    785a:	18fc      	adds	r4, r7, r3
    785c:	231f      	movs	r3, #31
    785e:	18fb      	adds	r3, r7, r3
    7860:	7819      	ldrb	r1, [r3, #0]
    7862:	230a      	movs	r3, #10
    7864:	18fa      	adds	r2, r7, r3
    7866:	231e      	movs	r3, #30
    7868:	18fb      	adds	r3, r7, r3
    786a:	781b      	ldrb	r3, [r3, #0]
    786c:	9300      	str	r3, [sp, #0]
    786e:	000b      	movs	r3, r1
    7870:	0001      	movs	r1, r0
    7872:	0028      	movs	r0, r5
    7874:	4d48      	ldr	r5, [pc, #288]	; (7998 <_usart_set_config+0x2d0>)
    7876:	47a8      	blx	r5
    7878:	0003      	movs	r3, r0
    787a:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    787c:	e000      	b.n	7880 <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    787e:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    7880:	231d      	movs	r3, #29
    7882:	18fb      	adds	r3, r7, r3
    7884:	781b      	ldrb	r3, [r3, #0]
    7886:	2b00      	cmp	r3, #0
    7888:	d003      	beq.n	7892 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    788a:	231d      	movs	r3, #29
    788c:	18fb      	adds	r3, r7, r3
    788e:	781b      	ldrb	r3, [r3, #0]
    7890:	e077      	b.n	7982 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    7892:	683b      	ldr	r3, [r7, #0]
    7894:	7e5b      	ldrb	r3, [r3, #25]
    7896:	2b00      	cmp	r3, #0
    7898:	d003      	beq.n	78a2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    789a:	683b      	ldr	r3, [r7, #0]
    789c:	7e9a      	ldrb	r2, [r3, #26]
    789e:	69bb      	ldr	r3, [r7, #24]
    78a0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    78a2:	687b      	ldr	r3, [r7, #4]
    78a4:	0018      	movs	r0, r3
    78a6:	4b3d      	ldr	r3, [pc, #244]	; (799c <_usart_set_config+0x2d4>)
    78a8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    78aa:	230a      	movs	r3, #10
    78ac:	18fb      	adds	r3, r7, r3
    78ae:	881a      	ldrh	r2, [r3, #0]
    78b0:	69bb      	ldr	r3, [r7, #24]
    78b2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    78b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    78b6:	68fb      	ldr	r3, [r7, #12]
    78b8:	4313      	orrs	r3, r2
    78ba:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    78bc:	683b      	ldr	r3, [r7, #0]
    78be:	2227      	movs	r2, #39	; 0x27
    78c0:	5c9b      	ldrb	r3, [r3, r2]
    78c2:	2201      	movs	r2, #1
    78c4:	4053      	eors	r3, r2
    78c6:	b2db      	uxtb	r3, r3
    78c8:	2b00      	cmp	r3, #0
    78ca:	d003      	beq.n	78d4 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    78cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    78ce:	2204      	movs	r2, #4
    78d0:	4313      	orrs	r3, r2
    78d2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    78d4:	683b      	ldr	r3, [r7, #0]
    78d6:	7e5b      	ldrb	r3, [r3, #25]
    78d8:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    78da:	683b      	ldr	r3, [r7, #0]
    78dc:	7f1b      	ldrb	r3, [r3, #28]
    78de:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    78e0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    78e2:	683b      	ldr	r3, [r7, #0]
    78e4:	7f5b      	ldrb	r3, [r3, #29]
    78e6:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    78e8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    78ea:	683b      	ldr	r3, [r7, #0]
    78ec:	2124      	movs	r1, #36	; 0x24
    78ee:	5c5b      	ldrb	r3, [r3, r1]
    78f0:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    78f2:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    78f4:	683b      	ldr	r3, [r7, #0]
    78f6:	2125      	movs	r1, #37	; 0x25
    78f8:	5c5b      	ldrb	r3, [r3, r1]
    78fa:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    78fc:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    78fe:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    7900:	683b      	ldr	r3, [r7, #0]
    7902:	7a9b      	ldrb	r3, [r3, #10]
    7904:	001a      	movs	r2, r3
    7906:	6a3b      	ldr	r3, [r7, #32]
    7908:	4313      	orrs	r3, r2
    790a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    790c:	683b      	ldr	r3, [r7, #0]
    790e:	7adb      	ldrb	r3, [r3, #11]
    7910:	001a      	movs	r2, r3
    7912:	6a3b      	ldr	r3, [r7, #32]
    7914:	4313      	orrs	r3, r2
    7916:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    7918:	683b      	ldr	r3, [r7, #0]
    791a:	891b      	ldrh	r3, [r3, #8]
    791c:	2bff      	cmp	r3, #255	; 0xff
    791e:	d00b      	beq.n	7938 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    7920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7922:	2280      	movs	r2, #128	; 0x80
    7924:	0452      	lsls	r2, r2, #17
    7926:	4313      	orrs	r3, r2
    7928:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    792a:	683b      	ldr	r3, [r7, #0]
    792c:	891b      	ldrh	r3, [r3, #8]
    792e:	001a      	movs	r2, r3
    7930:	6a3b      	ldr	r3, [r7, #32]
    7932:	4313      	orrs	r3, r2
    7934:	623b      	str	r3, [r7, #32]
    7936:	e008      	b.n	794a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    7938:	683b      	ldr	r3, [r7, #0]
    793a:	7edb      	ldrb	r3, [r3, #27]
    793c:	2b00      	cmp	r3, #0
    793e:	d004      	beq.n	794a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    7940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7942:	2280      	movs	r2, #128	; 0x80
    7944:	04d2      	lsls	r2, r2, #19
    7946:	4313      	orrs	r3, r2
    7948:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    794a:	683b      	ldr	r3, [r7, #0]
    794c:	222c      	movs	r2, #44	; 0x2c
    794e:	5c9b      	ldrb	r3, [r3, r2]
    7950:	2b00      	cmp	r3, #0
    7952:	d103      	bne.n	795c <_usart_set_config+0x294>
    7954:	4b12      	ldr	r3, [pc, #72]	; (79a0 <_usart_set_config+0x2d8>)
    7956:	4798      	blx	r3
    7958:	1e03      	subs	r3, r0, #0
    795a:	d003      	beq.n	7964 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    795e:	2280      	movs	r2, #128	; 0x80
    7960:	4313      	orrs	r3, r2
    7962:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7964:	687b      	ldr	r3, [r7, #4]
    7966:	0018      	movs	r0, r3
    7968:	4b0c      	ldr	r3, [pc, #48]	; (799c <_usart_set_config+0x2d4>)
    796a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    796c:	69bb      	ldr	r3, [r7, #24]
    796e:	6a3a      	ldr	r2, [r7, #32]
    7970:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	0018      	movs	r0, r3
    7976:	4b09      	ldr	r3, [pc, #36]	; (799c <_usart_set_config+0x2d4>)
    7978:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    797a:	69bb      	ldr	r3, [r7, #24]
    797c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    797e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    7980:	2300      	movs	r3, #0
}
    7982:	0018      	movs	r0, r3
    7984:	46bd      	mov	sp, r7
    7986:	b00a      	add	sp, #40	; 0x28
    7988:	bdb0      	pop	{r4, r5, r7, pc}
    798a:	46c0      	nop			; (mov r8, r8)
    798c:	00006901 	.word	0x00006901
    7990:	00008f61 	.word	0x00008f61
    7994:	0000647d 	.word	0x0000647d
    7998:	000064f9 	.word	0x000064f9
    799c:	000076a5 	.word	0x000076a5
    79a0:	00007665 	.word	0x00007665

000079a4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    79a4:	b590      	push	{r4, r7, lr}
    79a6:	b093      	sub	sp, #76	; 0x4c
    79a8:	af00      	add	r7, sp, #0
    79aa:	60f8      	str	r0, [r7, #12]
    79ac:	60b9      	str	r1, [r7, #8]
    79ae:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    79b0:	233b      	movs	r3, #59	; 0x3b
    79b2:	18fb      	adds	r3, r7, r3
    79b4:	2200      	movs	r2, #0
    79b6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    79b8:	68fb      	ldr	r3, [r7, #12]
    79ba:	68ba      	ldr	r2, [r7, #8]
    79bc:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    79be:	68fb      	ldr	r3, [r7, #12]
    79c0:	681b      	ldr	r3, [r3, #0]
    79c2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    79c4:	68fb      	ldr	r3, [r7, #12]
    79c6:	681b      	ldr	r3, [r3, #0]
    79c8:	0018      	movs	r0, r3
    79ca:	4b86      	ldr	r3, [pc, #536]	; (7be4 <usart_init+0x240>)
    79cc:	4798      	blx	r3
    79ce:	0003      	movs	r3, r0
    79d0:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    79d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    79d4:	3302      	adds	r3, #2
    79d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    79d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    79da:	3314      	adds	r3, #20
    79dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    79de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    79e0:	681b      	ldr	r3, [r3, #0]
    79e2:	2201      	movs	r2, #1
    79e4:	4013      	ands	r3, r2
    79e6:	d001      	beq.n	79ec <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    79e8:	2305      	movs	r3, #5
    79ea:	e0f6      	b.n	7bda <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    79ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    79ee:	681b      	ldr	r3, [r3, #0]
    79f0:	2202      	movs	r2, #2
    79f2:	4013      	ands	r3, r2
    79f4:	d001      	beq.n	79fa <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    79f6:	231c      	movs	r3, #28
    79f8:	e0ef      	b.n	7bda <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    79fa:	2201      	movs	r2, #1
    79fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    79fe:	409a      	lsls	r2, r3
    7a00:	0013      	movs	r3, r2
    7a02:	0019      	movs	r1, r3
    7a04:	2002      	movs	r0, #2
    7a06:	4b78      	ldr	r3, [pc, #480]	; (7be8 <usart_init+0x244>)
    7a08:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7a0a:	2324      	movs	r3, #36	; 0x24
    7a0c:	18fb      	adds	r3, r7, r3
    7a0e:	0018      	movs	r0, r3
    7a10:	4b76      	ldr	r3, [pc, #472]	; (7bec <usart_init+0x248>)
    7a12:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    7a14:	687b      	ldr	r3, [r7, #4]
    7a16:	222d      	movs	r2, #45	; 0x2d
    7a18:	5c9a      	ldrb	r2, [r3, r2]
    7a1a:	2324      	movs	r3, #36	; 0x24
    7a1c:	18fb      	adds	r3, r7, r3
    7a1e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a22:	b2db      	uxtb	r3, r3
    7a24:	2224      	movs	r2, #36	; 0x24
    7a26:	18ba      	adds	r2, r7, r2
    7a28:	0011      	movs	r1, r2
    7a2a:	0018      	movs	r0, r3
    7a2c:	4b70      	ldr	r3, [pc, #448]	; (7bf0 <usart_init+0x24c>)
    7a2e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7a32:	b2db      	uxtb	r3, r3
    7a34:	0018      	movs	r0, r3
    7a36:	4b6f      	ldr	r3, [pc, #444]	; (7bf4 <usart_init+0x250>)
    7a38:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7a3a:	687b      	ldr	r3, [r7, #4]
    7a3c:	222d      	movs	r2, #45	; 0x2d
    7a3e:	5c9b      	ldrb	r3, [r3, r2]
    7a40:	2100      	movs	r1, #0
    7a42:	0018      	movs	r0, r3
    7a44:	4b6c      	ldr	r3, [pc, #432]	; (7bf8 <usart_init+0x254>)
    7a46:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    7a48:	687b      	ldr	r3, [r7, #4]
    7a4a:	7ada      	ldrb	r2, [r3, #11]
    7a4c:	68fb      	ldr	r3, [r7, #12]
    7a4e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    7a50:	687b      	ldr	r3, [r7, #4]
    7a52:	2224      	movs	r2, #36	; 0x24
    7a54:	5c9a      	ldrb	r2, [r3, r2]
    7a56:	68fb      	ldr	r3, [r7, #12]
    7a58:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    7a5a:	687b      	ldr	r3, [r7, #4]
    7a5c:	2225      	movs	r2, #37	; 0x25
    7a5e:	5c9a      	ldrb	r2, [r3, r2]
    7a60:	68fb      	ldr	r3, [r7, #12]
    7a62:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    7a64:	687b      	ldr	r3, [r7, #4]
    7a66:	7eda      	ldrb	r2, [r3, #27]
    7a68:	68fb      	ldr	r3, [r7, #12]
    7a6a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    7a6c:	687b      	ldr	r3, [r7, #4]
    7a6e:	7f1a      	ldrb	r2, [r3, #28]
    7a70:	68fb      	ldr	r3, [r7, #12]
    7a72:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    7a74:	233b      	movs	r3, #59	; 0x3b
    7a76:	18fc      	adds	r4, r7, r3
    7a78:	687a      	ldr	r2, [r7, #4]
    7a7a:	68fb      	ldr	r3, [r7, #12]
    7a7c:	0011      	movs	r1, r2
    7a7e:	0018      	movs	r0, r3
    7a80:	4b5e      	ldr	r3, [pc, #376]	; (7bfc <usart_init+0x258>)
    7a82:	4798      	blx	r3
    7a84:	0003      	movs	r3, r0
    7a86:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    7a88:	233b      	movs	r3, #59	; 0x3b
    7a8a:	18fb      	adds	r3, r7, r3
    7a8c:	781b      	ldrb	r3, [r3, #0]
    7a8e:	2b00      	cmp	r3, #0
    7a90:	d003      	beq.n	7a9a <usart_init+0xf6>
		return status_code;
    7a92:	233b      	movs	r3, #59	; 0x3b
    7a94:	18fb      	adds	r3, r7, r3
    7a96:	781b      	ldrb	r3, [r3, #0]
    7a98:	e09f      	b.n	7bda <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    7a9a:	2320      	movs	r3, #32
    7a9c:	18fb      	adds	r3, r7, r3
    7a9e:	0018      	movs	r0, r3
    7aa0:	4b57      	ldr	r3, [pc, #348]	; (7c00 <usart_init+0x25c>)
    7aa2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7aa4:	2320      	movs	r3, #32
    7aa6:	18fb      	adds	r3, r7, r3
    7aa8:	2200      	movs	r2, #0
    7aaa:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7aac:	2320      	movs	r3, #32
    7aae:	18fb      	adds	r3, r7, r3
    7ab0:	2200      	movs	r2, #0
    7ab2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    7ab4:	687b      	ldr	r3, [r7, #4]
    7ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    7ab8:	2310      	movs	r3, #16
    7aba:	18fb      	adds	r3, r7, r3
    7abc:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    7abe:	687b      	ldr	r3, [r7, #4]
    7ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    7ac2:	2310      	movs	r3, #16
    7ac4:	18fb      	adds	r3, r7, r3
    7ac6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    7ac8:	687b      	ldr	r3, [r7, #4]
    7aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    7acc:	2310      	movs	r3, #16
    7ace:	18fb      	adds	r3, r7, r3
    7ad0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    7ad2:	687b      	ldr	r3, [r7, #4]
    7ad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    7ad6:	2310      	movs	r3, #16
    7ad8:	18fb      	adds	r3, r7, r3
    7ada:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    7adc:	2347      	movs	r3, #71	; 0x47
    7ade:	18fb      	adds	r3, r7, r3
    7ae0:	2200      	movs	r2, #0
    7ae2:	701a      	strb	r2, [r3, #0]
    7ae4:	e02c      	b.n	7b40 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7ae6:	2347      	movs	r3, #71	; 0x47
    7ae8:	18fb      	adds	r3, r7, r3
    7aea:	781a      	ldrb	r2, [r3, #0]
    7aec:	2310      	movs	r3, #16
    7aee:	18fb      	adds	r3, r7, r3
    7af0:	0092      	lsls	r2, r2, #2
    7af2:	58d3      	ldr	r3, [r2, r3]
    7af4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    7af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7af8:	2b00      	cmp	r3, #0
    7afa:	d109      	bne.n	7b10 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7afc:	2347      	movs	r3, #71	; 0x47
    7afe:	18fb      	adds	r3, r7, r3
    7b00:	781a      	ldrb	r2, [r3, #0]
    7b02:	68bb      	ldr	r3, [r7, #8]
    7b04:	0011      	movs	r1, r2
    7b06:	0018      	movs	r0, r3
    7b08:	4b3e      	ldr	r3, [pc, #248]	; (7c04 <usart_init+0x260>)
    7b0a:	4798      	blx	r3
    7b0c:	0003      	movs	r3, r0
    7b0e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    7b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7b12:	3301      	adds	r3, #1
    7b14:	d00d      	beq.n	7b32 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7b18:	b2da      	uxtb	r2, r3
    7b1a:	2320      	movs	r3, #32
    7b1c:	18fb      	adds	r3, r7, r3
    7b1e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7b22:	0c1b      	lsrs	r3, r3, #16
    7b24:	b2db      	uxtb	r3, r3
    7b26:	2220      	movs	r2, #32
    7b28:	18ba      	adds	r2, r7, r2
    7b2a:	0011      	movs	r1, r2
    7b2c:	0018      	movs	r0, r3
    7b2e:	4b36      	ldr	r3, [pc, #216]	; (7c08 <usart_init+0x264>)
    7b30:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    7b32:	2347      	movs	r3, #71	; 0x47
    7b34:	18fb      	adds	r3, r7, r3
    7b36:	781a      	ldrb	r2, [r3, #0]
    7b38:	2347      	movs	r3, #71	; 0x47
    7b3a:	18fb      	adds	r3, r7, r3
    7b3c:	3201      	adds	r2, #1
    7b3e:	701a      	strb	r2, [r3, #0]
    7b40:	2347      	movs	r3, #71	; 0x47
    7b42:	18fb      	adds	r3, r7, r3
    7b44:	781b      	ldrb	r3, [r3, #0]
    7b46:	2b03      	cmp	r3, #3
    7b48:	d9cd      	bls.n	7ae6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    7b4a:	2300      	movs	r3, #0
    7b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    7b4e:	e00a      	b.n	7b66 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    7b50:	68fa      	ldr	r2, [r7, #12]
    7b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b54:	3302      	adds	r3, #2
    7b56:	009b      	lsls	r3, r3, #2
    7b58:	18d3      	adds	r3, r2, r3
    7b5a:	3304      	adds	r3, #4
    7b5c:	2200      	movs	r2, #0
    7b5e:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    7b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b62:	3301      	adds	r3, #1
    7b64:	63fb      	str	r3, [r7, #60]	; 0x3c
    7b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7b68:	2b05      	cmp	r3, #5
    7b6a:	d9f1      	bls.n	7b50 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    7b6c:	68fb      	ldr	r3, [r7, #12]
    7b6e:	2200      	movs	r2, #0
    7b70:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    7b72:	68fb      	ldr	r3, [r7, #12]
    7b74:	2200      	movs	r2, #0
    7b76:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    7b78:	68fb      	ldr	r3, [r7, #12]
    7b7a:	2200      	movs	r2, #0
    7b7c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    7b7e:	68fb      	ldr	r3, [r7, #12]
    7b80:	2200      	movs	r2, #0
    7b82:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    7b84:	68fb      	ldr	r3, [r7, #12]
    7b86:	2230      	movs	r2, #48	; 0x30
    7b88:	2100      	movs	r1, #0
    7b8a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    7b8c:	68fb      	ldr	r3, [r7, #12]
    7b8e:	2231      	movs	r2, #49	; 0x31
    7b90:	2100      	movs	r1, #0
    7b92:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    7b94:	68fb      	ldr	r3, [r7, #12]
    7b96:	2232      	movs	r2, #50	; 0x32
    7b98:	2100      	movs	r1, #0
    7b9a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    7b9c:	68fb      	ldr	r3, [r7, #12]
    7b9e:	2233      	movs	r2, #51	; 0x33
    7ba0:	2100      	movs	r1, #0
    7ba2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    7ba4:	68fb      	ldr	r3, [r7, #12]
    7ba6:	681b      	ldr	r3, [r3, #0]
    7ba8:	2227      	movs	r2, #39	; 0x27
    7baa:	18bc      	adds	r4, r7, r2
    7bac:	0018      	movs	r0, r3
    7bae:	4b0d      	ldr	r3, [pc, #52]	; (7be4 <usart_init+0x240>)
    7bb0:	4798      	blx	r3
    7bb2:	0003      	movs	r3, r0
    7bb4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    7bb6:	4a15      	ldr	r2, [pc, #84]	; (7c0c <usart_init+0x268>)
    7bb8:	2327      	movs	r3, #39	; 0x27
    7bba:	18fb      	adds	r3, r7, r3
    7bbc:	781b      	ldrb	r3, [r3, #0]
    7bbe:	0011      	movs	r1, r2
    7bc0:	0018      	movs	r0, r3
    7bc2:	4b13      	ldr	r3, [pc, #76]	; (7c10 <usart_init+0x26c>)
    7bc4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7bc6:	2327      	movs	r3, #39	; 0x27
    7bc8:	18fb      	adds	r3, r7, r3
    7bca:	781a      	ldrb	r2, [r3, #0]
    7bcc:	4b11      	ldr	r3, [pc, #68]	; (7c14 <usart_init+0x270>)
    7bce:	0092      	lsls	r2, r2, #2
    7bd0:	68f9      	ldr	r1, [r7, #12]
    7bd2:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    7bd4:	233b      	movs	r3, #59	; 0x3b
    7bd6:	18fb      	adds	r3, r7, r3
    7bd8:	781b      	ldrb	r3, [r3, #0]
}
    7bda:	0018      	movs	r0, r3
    7bdc:	46bd      	mov	sp, r7
    7bde:	b013      	add	sp, #76	; 0x4c
    7be0:	bd90      	pop	{r4, r7, pc}
    7be2:	46c0      	nop			; (mov r8, r8)
    7be4:	00006901 	.word	0x00006901
    7be8:	000075e1 	.word	0x000075e1
    7bec:	000075c9 	.word	0x000075c9
    7bf0:	00008e3d 	.word	0x00008e3d
    7bf4:	00008e81 	.word	0x00008e81
    7bf8:	000066b9 	.word	0x000066b9
    7bfc:	000076c9 	.word	0x000076c9
    7c00:	0000763d 	.word	0x0000763d
    7c04:	00006745 	.word	0x00006745
    7c08:	00009129 	.word	0x00009129
    7c0c:	00007eb9 	.word	0x00007eb9
    7c10:	00006965 	.word	0x00006965
    7c14:	2000043c 	.word	0x2000043c

00007c18 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    7c18:	b580      	push	{r7, lr}
    7c1a:	b084      	sub	sp, #16
    7c1c:	af00      	add	r7, sp, #0
    7c1e:	6078      	str	r0, [r7, #4]
    7c20:	000a      	movs	r2, r1
    7c22:	1cbb      	adds	r3, r7, #2
    7c24:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c26:	687b      	ldr	r3, [r7, #4]
    7c28:	681b      	ldr	r3, [r3, #0]
    7c2a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    7c2c:	687b      	ldr	r3, [r7, #4]
    7c2e:	79db      	ldrb	r3, [r3, #7]
    7c30:	2201      	movs	r2, #1
    7c32:	4053      	eors	r3, r2
    7c34:	b2db      	uxtb	r3, r3
    7c36:	2b00      	cmp	r3, #0
    7c38:	d001      	beq.n	7c3e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    7c3a:	231c      	movs	r3, #28
    7c3c:	e017      	b.n	7c6e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    7c3e:	687b      	ldr	r3, [r7, #4]
    7c40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    7c42:	b29b      	uxth	r3, r3
    7c44:	2b00      	cmp	r3, #0
    7c46:	d001      	beq.n	7c4c <usart_write_wait+0x34>
		return STATUS_BUSY;
    7c48:	2305      	movs	r3, #5
    7c4a:	e010      	b.n	7c6e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7c4c:	687b      	ldr	r3, [r7, #4]
    7c4e:	0018      	movs	r0, r3
    7c50:	4b09      	ldr	r3, [pc, #36]	; (7c78 <usart_write_wait+0x60>)
    7c52:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    7c54:	68fb      	ldr	r3, [r7, #12]
    7c56:	1cba      	adds	r2, r7, #2
    7c58:	8812      	ldrh	r2, [r2, #0]
    7c5a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    7c5c:	46c0      	nop			; (mov r8, r8)
    7c5e:	68fb      	ldr	r3, [r7, #12]
    7c60:	7e1b      	ldrb	r3, [r3, #24]
    7c62:	b2db      	uxtb	r3, r3
    7c64:	001a      	movs	r2, r3
    7c66:	2302      	movs	r3, #2
    7c68:	4013      	ands	r3, r2
    7c6a:	d0f8      	beq.n	7c5e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    7c6c:	2300      	movs	r3, #0
}
    7c6e:	0018      	movs	r0, r3
    7c70:	46bd      	mov	sp, r7
    7c72:	b004      	add	sp, #16
    7c74:	bd80      	pop	{r7, pc}
    7c76:	46c0      	nop			; (mov r8, r8)
    7c78:	000076a5 	.word	0x000076a5

00007c7c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    7c7c:	b580      	push	{r7, lr}
    7c7e:	b084      	sub	sp, #16
    7c80:	af00      	add	r7, sp, #0
    7c82:	6078      	str	r0, [r7, #4]
    7c84:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c86:	687b      	ldr	r3, [r7, #4]
    7c88:	681b      	ldr	r3, [r3, #0]
    7c8a:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    7c8c:	687b      	ldr	r3, [r7, #4]
    7c8e:	799b      	ldrb	r3, [r3, #6]
    7c90:	2201      	movs	r2, #1
    7c92:	4053      	eors	r3, r2
    7c94:	b2db      	uxtb	r3, r3
    7c96:	2b00      	cmp	r3, #0
    7c98:	d001      	beq.n	7c9e <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    7c9a:	231c      	movs	r3, #28
    7c9c:	e05e      	b.n	7d5c <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    7c9e:	687b      	ldr	r3, [r7, #4]
    7ca0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7ca2:	b29b      	uxth	r3, r3
    7ca4:	2b00      	cmp	r3, #0
    7ca6:	d001      	beq.n	7cac <usart_read_wait+0x30>
		return STATUS_BUSY;
    7ca8:	2305      	movs	r3, #5
    7caa:	e057      	b.n	7d5c <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    7cac:	68fb      	ldr	r3, [r7, #12]
    7cae:	7e1b      	ldrb	r3, [r3, #24]
    7cb0:	b2db      	uxtb	r3, r3
    7cb2:	001a      	movs	r2, r3
    7cb4:	2304      	movs	r3, #4
    7cb6:	4013      	ands	r3, r2
    7cb8:	d101      	bne.n	7cbe <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    7cba:	2305      	movs	r3, #5
    7cbc:	e04e      	b.n	7d5c <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    7cbe:	687b      	ldr	r3, [r7, #4]
    7cc0:	0018      	movs	r0, r3
    7cc2:	4b28      	ldr	r3, [pc, #160]	; (7d64 <usart_read_wait+0xe8>)
    7cc4:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7cc6:	68fb      	ldr	r3, [r7, #12]
    7cc8:	8b5b      	ldrh	r3, [r3, #26]
    7cca:	b29b      	uxth	r3, r3
    7ccc:	b2da      	uxtb	r2, r3
    7cce:	230b      	movs	r3, #11
    7cd0:	18fb      	adds	r3, r7, r3
    7cd2:	213f      	movs	r1, #63	; 0x3f
    7cd4:	400a      	ands	r2, r1
    7cd6:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    7cd8:	230b      	movs	r3, #11
    7cda:	18fb      	adds	r3, r7, r3
    7cdc:	781b      	ldrb	r3, [r3, #0]
    7cde:	2b00      	cmp	r3, #0
    7ce0:	d036      	beq.n	7d50 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    7ce2:	230b      	movs	r3, #11
    7ce4:	18fb      	adds	r3, r7, r3
    7ce6:	781b      	ldrb	r3, [r3, #0]
    7ce8:	2202      	movs	r2, #2
    7cea:	4013      	ands	r3, r2
    7cec:	d004      	beq.n	7cf8 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7cee:	68fb      	ldr	r3, [r7, #12]
    7cf0:	2202      	movs	r2, #2
    7cf2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    7cf4:	231a      	movs	r3, #26
    7cf6:	e031      	b.n	7d5c <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7cf8:	230b      	movs	r3, #11
    7cfa:	18fb      	adds	r3, r7, r3
    7cfc:	781b      	ldrb	r3, [r3, #0]
    7cfe:	2204      	movs	r2, #4
    7d00:	4013      	ands	r3, r2
    7d02:	d004      	beq.n	7d0e <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7d04:	68fb      	ldr	r3, [r7, #12]
    7d06:	2204      	movs	r2, #4
    7d08:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    7d0a:	231e      	movs	r3, #30
    7d0c:	e026      	b.n	7d5c <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7d0e:	230b      	movs	r3, #11
    7d10:	18fb      	adds	r3, r7, r3
    7d12:	781b      	ldrb	r3, [r3, #0]
    7d14:	2201      	movs	r2, #1
    7d16:	4013      	ands	r3, r2
    7d18:	d004      	beq.n	7d24 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7d1a:	68fb      	ldr	r3, [r7, #12]
    7d1c:	2201      	movs	r2, #1
    7d1e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    7d20:	2313      	movs	r3, #19
    7d22:	e01b      	b.n	7d5c <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    7d24:	230b      	movs	r3, #11
    7d26:	18fb      	adds	r3, r7, r3
    7d28:	781b      	ldrb	r3, [r3, #0]
    7d2a:	2210      	movs	r2, #16
    7d2c:	4013      	ands	r3, r2
    7d2e:	d004      	beq.n	7d3a <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7d30:	68fb      	ldr	r3, [r7, #12]
    7d32:	2210      	movs	r2, #16
    7d34:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    7d36:	2342      	movs	r3, #66	; 0x42
    7d38:	e010      	b.n	7d5c <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    7d3a:	230b      	movs	r3, #11
    7d3c:	18fb      	adds	r3, r7, r3
    7d3e:	781b      	ldrb	r3, [r3, #0]
    7d40:	2220      	movs	r2, #32
    7d42:	4013      	ands	r3, r2
    7d44:	d004      	beq.n	7d50 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7d46:	68fb      	ldr	r3, [r7, #12]
    7d48:	2220      	movs	r2, #32
    7d4a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    7d4c:	2341      	movs	r3, #65	; 0x41
    7d4e:	e005      	b.n	7d5c <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    7d50:	68fb      	ldr	r3, [r7, #12]
    7d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    7d54:	b29a      	uxth	r2, r3
    7d56:	683b      	ldr	r3, [r7, #0]
    7d58:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    7d5a:	2300      	movs	r3, #0
}
    7d5c:	0018      	movs	r0, r3
    7d5e:	46bd      	mov	sp, r7
    7d60:	b004      	add	sp, #16
    7d62:	bd80      	pop	{r7, pc}
    7d64:	000076a5 	.word	0x000076a5

00007d68 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    7d68:	b580      	push	{r7, lr}
    7d6a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    7d6c:	4b02      	ldr	r3, [pc, #8]	; (7d78 <system_interrupt_enter_critical_section+0x10>)
    7d6e:	4798      	blx	r3
}
    7d70:	46c0      	nop			; (mov r8, r8)
    7d72:	46bd      	mov	sp, r7
    7d74:	bd80      	pop	{r7, pc}
    7d76:	46c0      	nop			; (mov r8, r8)
    7d78:	00005b21 	.word	0x00005b21

00007d7c <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    7d7c:	b580      	push	{r7, lr}
    7d7e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    7d80:	4b02      	ldr	r3, [pc, #8]	; (7d8c <system_interrupt_leave_critical_section+0x10>)
    7d82:	4798      	blx	r3
}
    7d84:	46c0      	nop			; (mov r8, r8)
    7d86:	46bd      	mov	sp, r7
    7d88:	bd80      	pop	{r7, pc}
    7d8a:	46c0      	nop			; (mov r8, r8)
    7d8c:	00005b75 	.word	0x00005b75

00007d90 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    7d90:	b580      	push	{r7, lr}
    7d92:	b084      	sub	sp, #16
    7d94:	af00      	add	r7, sp, #0
    7d96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    7d98:	687b      	ldr	r3, [r7, #4]
    7d9a:	681b      	ldr	r3, [r3, #0]
    7d9c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    7d9e:	68fb      	ldr	r3, [r7, #12]
    7da0:	69db      	ldr	r3, [r3, #28]
    7da2:	1e5a      	subs	r2, r3, #1
    7da4:	4193      	sbcs	r3, r2
    7da6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    7da8:	0018      	movs	r0, r3
    7daa:	46bd      	mov	sp, r7
    7dac:	b004      	add	sp, #16
    7dae:	bd80      	pop	{r7, pc}

00007db0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    7db0:	b580      	push	{r7, lr}
    7db2:	b082      	sub	sp, #8
    7db4:	af00      	add	r7, sp, #0
    7db6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    7db8:	46c0      	nop			; (mov r8, r8)
    7dba:	687b      	ldr	r3, [r7, #4]
    7dbc:	0018      	movs	r0, r3
    7dbe:	4b04      	ldr	r3, [pc, #16]	; (7dd0 <_usart_wait_for_sync+0x20>)
    7dc0:	4798      	blx	r3
    7dc2:	1e03      	subs	r3, r0, #0
    7dc4:	d1f9      	bne.n	7dba <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    7dc6:	46c0      	nop			; (mov r8, r8)
    7dc8:	46bd      	mov	sp, r7
    7dca:	b002      	add	sp, #8
    7dcc:	bd80      	pop	{r7, pc}
    7dce:	46c0      	nop			; (mov r8, r8)
    7dd0:	00007d91 	.word	0x00007d91

00007dd4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    7dd4:	b580      	push	{r7, lr}
    7dd6:	b086      	sub	sp, #24
    7dd8:	af00      	add	r7, sp, #0
    7dda:	60f8      	str	r0, [r7, #12]
    7ddc:	60b9      	str	r1, [r7, #8]
    7dde:	1dbb      	adds	r3, r7, #6
    7de0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7de2:	68fb      	ldr	r3, [r7, #12]
    7de4:	681b      	ldr	r3, [r3, #0]
    7de6:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    7de8:	4b16      	ldr	r3, [pc, #88]	; (7e44 <_usart_read_buffer+0x70>)
    7dea:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    7dec:	68fb      	ldr	r3, [r7, #12]
    7dee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7df0:	b29b      	uxth	r3, r3
    7df2:	2b00      	cmp	r3, #0
    7df4:	d003      	beq.n	7dfe <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    7df6:	4b14      	ldr	r3, [pc, #80]	; (7e48 <_usart_read_buffer+0x74>)
    7df8:	4798      	blx	r3
		return STATUS_BUSY;
    7dfa:	2305      	movs	r3, #5
    7dfc:	e01e      	b.n	7e3c <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    7dfe:	68fb      	ldr	r3, [r7, #12]
    7e00:	1dba      	adds	r2, r7, #6
    7e02:	8812      	ldrh	r2, [r2, #0]
    7e04:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    7e06:	4b10      	ldr	r3, [pc, #64]	; (7e48 <_usart_read_buffer+0x74>)
    7e08:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    7e0a:	68fb      	ldr	r3, [r7, #12]
    7e0c:	68ba      	ldr	r2, [r7, #8]
    7e0e:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    7e10:	68fb      	ldr	r3, [r7, #12]
    7e12:	2232      	movs	r2, #50	; 0x32
    7e14:	2105      	movs	r1, #5
    7e16:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    7e18:	697b      	ldr	r3, [r7, #20]
    7e1a:	2204      	movs	r2, #4
    7e1c:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    7e1e:	68fb      	ldr	r3, [r7, #12]
    7e20:	7a1b      	ldrb	r3, [r3, #8]
    7e22:	2b00      	cmp	r3, #0
    7e24:	d002      	beq.n	7e2c <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    7e26:	697b      	ldr	r3, [r7, #20]
    7e28:	2220      	movs	r2, #32
    7e2a:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    7e2c:	68fb      	ldr	r3, [r7, #12]
    7e2e:	7a5b      	ldrb	r3, [r3, #9]
    7e30:	2b00      	cmp	r3, #0
    7e32:	d002      	beq.n	7e3a <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    7e34:	697b      	ldr	r3, [r7, #20]
    7e36:	2208      	movs	r2, #8
    7e38:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    7e3a:	2300      	movs	r3, #0
}
    7e3c:	0018      	movs	r0, r3
    7e3e:	46bd      	mov	sp, r7
    7e40:	b006      	add	sp, #24
    7e42:	bd80      	pop	{r7, pc}
    7e44:	00007d69 	.word	0x00007d69
    7e48:	00007d7d 	.word	0x00007d7d

00007e4c <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    7e4c:	b580      	push	{r7, lr}
    7e4e:	b084      	sub	sp, #16
    7e50:	af00      	add	r7, sp, #0
    7e52:	60f8      	str	r0, [r7, #12]
    7e54:	60b9      	str	r1, [r7, #8]
    7e56:	1dfb      	adds	r3, r7, #7
    7e58:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    7e5a:	1dfb      	adds	r3, r7, #7
    7e5c:	781b      	ldrb	r3, [r3, #0]
    7e5e:	68fa      	ldr	r2, [r7, #12]
    7e60:	3302      	adds	r3, #2
    7e62:	009b      	lsls	r3, r3, #2
    7e64:	18d3      	adds	r3, r2, r3
    7e66:	3304      	adds	r3, #4
    7e68:	68ba      	ldr	r2, [r7, #8]
    7e6a:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    7e6c:	68fb      	ldr	r3, [r7, #12]
    7e6e:	2230      	movs	r2, #48	; 0x30
    7e70:	5c9b      	ldrb	r3, [r3, r2]
    7e72:	b25a      	sxtb	r2, r3
    7e74:	1dfb      	adds	r3, r7, #7
    7e76:	781b      	ldrb	r3, [r3, #0]
    7e78:	2101      	movs	r1, #1
    7e7a:	4099      	lsls	r1, r3
    7e7c:	000b      	movs	r3, r1
    7e7e:	b25b      	sxtb	r3, r3
    7e80:	4313      	orrs	r3, r2
    7e82:	b25b      	sxtb	r3, r3
    7e84:	b2d9      	uxtb	r1, r3
    7e86:	68fb      	ldr	r3, [r7, #12]
    7e88:	2230      	movs	r2, #48	; 0x30
    7e8a:	5499      	strb	r1, [r3, r2]
}
    7e8c:	46c0      	nop			; (mov r8, r8)
    7e8e:	46bd      	mov	sp, r7
    7e90:	b004      	add	sp, #16
    7e92:	bd80      	pop	{r7, pc}

00007e94 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    7e94:	b580      	push	{r7, lr}
    7e96:	b082      	sub	sp, #8
    7e98:	af00      	add	r7, sp, #0
    7e9a:	6078      	str	r0, [r7, #4]
    7e9c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    7e9e:	6839      	ldr	r1, [r7, #0]
    7ea0:	687b      	ldr	r3, [r7, #4]
    7ea2:	2201      	movs	r2, #1
    7ea4:	0018      	movs	r0, r3
    7ea6:	4b03      	ldr	r3, [pc, #12]	; (7eb4 <usart_read_job+0x20>)
    7ea8:	4798      	blx	r3
    7eaa:	0003      	movs	r3, r0
}
    7eac:	0018      	movs	r0, r3
    7eae:	46bd      	mov	sp, r7
    7eb0:	b002      	add	sp, #8
    7eb2:	bd80      	pop	{r7, pc}
    7eb4:	00007dd5 	.word	0x00007dd5

00007eb8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    7eb8:	b580      	push	{r7, lr}
    7eba:	b088      	sub	sp, #32
    7ebc:	af00      	add	r7, sp, #0
    7ebe:	0002      	movs	r2, r0
    7ec0:	1dfb      	adds	r3, r7, #7
    7ec2:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    7ec4:	1dfb      	adds	r3, r7, #7
    7ec6:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    7ec8:	4ba3      	ldr	r3, [pc, #652]	; (8158 <_usart_interrupt_handler+0x2a0>)
    7eca:	0092      	lsls	r2, r2, #2
    7ecc:	58d3      	ldr	r3, [r2, r3]
    7ece:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    7ed0:	69bb      	ldr	r3, [r7, #24]
    7ed2:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    7ed4:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    7ed6:	69bb      	ldr	r3, [r7, #24]
    7ed8:	0018      	movs	r0, r3
    7eda:	4ba0      	ldr	r3, [pc, #640]	; (815c <_usart_interrupt_handler+0x2a4>)
    7edc:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    7ede:	697b      	ldr	r3, [r7, #20]
    7ee0:	7e1b      	ldrb	r3, [r3, #24]
    7ee2:	b2da      	uxtb	r2, r3
    7ee4:	2312      	movs	r3, #18
    7ee6:	18fb      	adds	r3, r7, r3
    7ee8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    7eea:	697b      	ldr	r3, [r7, #20]
    7eec:	7d9b      	ldrb	r3, [r3, #22]
    7eee:	b2db      	uxtb	r3, r3
    7ef0:	b29a      	uxth	r2, r3
    7ef2:	2312      	movs	r3, #18
    7ef4:	18fb      	adds	r3, r7, r3
    7ef6:	2112      	movs	r1, #18
    7ef8:	1879      	adds	r1, r7, r1
    7efa:	8809      	ldrh	r1, [r1, #0]
    7efc:	400a      	ands	r2, r1
    7efe:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    7f00:	69bb      	ldr	r3, [r7, #24]
    7f02:	2230      	movs	r2, #48	; 0x30
    7f04:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    7f06:	69ba      	ldr	r2, [r7, #24]
    7f08:	2131      	movs	r1, #49	; 0x31
    7f0a:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    7f0c:	4013      	ands	r3, r2
    7f0e:	b2da      	uxtb	r2, r3
    7f10:	2310      	movs	r3, #16
    7f12:	18fb      	adds	r3, r7, r3
    7f14:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    7f16:	2312      	movs	r3, #18
    7f18:	18fb      	adds	r3, r7, r3
    7f1a:	881b      	ldrh	r3, [r3, #0]
    7f1c:	2201      	movs	r2, #1
    7f1e:	4013      	ands	r3, r2
    7f20:	d044      	beq.n	7fac <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    7f22:	69bb      	ldr	r3, [r7, #24]
    7f24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    7f26:	b29b      	uxth	r3, r3
    7f28:	2b00      	cmp	r3, #0
    7f2a:	d03c      	beq.n	7fa6 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7f2c:	69bb      	ldr	r3, [r7, #24]
    7f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f30:	781b      	ldrb	r3, [r3, #0]
    7f32:	b2da      	uxtb	r2, r3
    7f34:	231c      	movs	r3, #28
    7f36:	18fb      	adds	r3, r7, r3
    7f38:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    7f3a:	69bb      	ldr	r3, [r7, #24]
    7f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f3e:	1c5a      	adds	r2, r3, #1
    7f40:	69bb      	ldr	r3, [r7, #24]
    7f42:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7f44:	69bb      	ldr	r3, [r7, #24]
    7f46:	795b      	ldrb	r3, [r3, #5]
    7f48:	2b01      	cmp	r3, #1
    7f4a:	d113      	bne.n	7f74 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    7f4c:	69bb      	ldr	r3, [r7, #24]
    7f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f50:	781b      	ldrb	r3, [r3, #0]
    7f52:	b2db      	uxtb	r3, r3
    7f54:	021b      	lsls	r3, r3, #8
    7f56:	b21a      	sxth	r2, r3
    7f58:	231c      	movs	r3, #28
    7f5a:	18fb      	adds	r3, r7, r3
    7f5c:	2100      	movs	r1, #0
    7f5e:	5e5b      	ldrsh	r3, [r3, r1]
    7f60:	4313      	orrs	r3, r2
    7f62:	b21a      	sxth	r2, r3
    7f64:	231c      	movs	r3, #28
    7f66:	18fb      	adds	r3, r7, r3
    7f68:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    7f6a:	69bb      	ldr	r3, [r7, #24]
    7f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7f6e:	1c5a      	adds	r2, r3, #1
    7f70:	69bb      	ldr	r3, [r7, #24]
    7f72:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    7f74:	231c      	movs	r3, #28
    7f76:	18fb      	adds	r3, r7, r3
    7f78:	881b      	ldrh	r3, [r3, #0]
    7f7a:	05db      	lsls	r3, r3, #23
    7f7c:	0ddb      	lsrs	r3, r3, #23
    7f7e:	b29a      	uxth	r2, r3
    7f80:	697b      	ldr	r3, [r7, #20]
    7f82:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    7f84:	69bb      	ldr	r3, [r7, #24]
    7f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    7f88:	b29b      	uxth	r3, r3
    7f8a:	3b01      	subs	r3, #1
    7f8c:	b29b      	uxth	r3, r3
    7f8e:	69ba      	ldr	r2, [r7, #24]
    7f90:	1c19      	adds	r1, r3, #0
    7f92:	85d1      	strh	r1, [r2, #46]	; 0x2e
    7f94:	2b00      	cmp	r3, #0
    7f96:	d109      	bne.n	7fac <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7f98:	697b      	ldr	r3, [r7, #20]
    7f9a:	2201      	movs	r2, #1
    7f9c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    7f9e:	697b      	ldr	r3, [r7, #20]
    7fa0:	2202      	movs	r2, #2
    7fa2:	759a      	strb	r2, [r3, #22]
    7fa4:	e002      	b.n	7fac <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7fa6:	697b      	ldr	r3, [r7, #20]
    7fa8:	2201      	movs	r2, #1
    7faa:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    7fac:	2312      	movs	r3, #18
    7fae:	18fb      	adds	r3, r7, r3
    7fb0:	881b      	ldrh	r3, [r3, #0]
    7fb2:	2202      	movs	r2, #2
    7fb4:	4013      	ands	r3, r2
    7fb6:	d011      	beq.n	7fdc <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    7fb8:	697b      	ldr	r3, [r7, #20]
    7fba:	2202      	movs	r2, #2
    7fbc:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    7fbe:	69bb      	ldr	r3, [r7, #24]
    7fc0:	2233      	movs	r2, #51	; 0x33
    7fc2:	2100      	movs	r1, #0
    7fc4:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    7fc6:	2310      	movs	r3, #16
    7fc8:	18fb      	adds	r3, r7, r3
    7fca:	881b      	ldrh	r3, [r3, #0]
    7fcc:	2201      	movs	r2, #1
    7fce:	4013      	ands	r3, r2
    7fd0:	d004      	beq.n	7fdc <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    7fd2:	69bb      	ldr	r3, [r7, #24]
    7fd4:	68db      	ldr	r3, [r3, #12]
    7fd6:	69ba      	ldr	r2, [r7, #24]
    7fd8:	0010      	movs	r0, r2
    7fda:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    7fdc:	2312      	movs	r3, #18
    7fde:	18fb      	adds	r3, r7, r3
    7fe0:	881b      	ldrh	r3, [r3, #0]
    7fe2:	2204      	movs	r2, #4
    7fe4:	4013      	ands	r3, r2
    7fe6:	d100      	bne.n	7fea <_usart_interrupt_handler+0x132>
    7fe8:	e0bd      	b.n	8166 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    7fea:	69bb      	ldr	r3, [r7, #24]
    7fec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7fee:	b29b      	uxth	r3, r3
    7ff0:	2b00      	cmp	r3, #0
    7ff2:	d100      	bne.n	7ff6 <_usart_interrupt_handler+0x13e>
    7ff4:	e0b4      	b.n	8160 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7ff6:	697b      	ldr	r3, [r7, #20]
    7ff8:	8b5b      	ldrh	r3, [r3, #26]
    7ffa:	b29b      	uxth	r3, r3
    7ffc:	b2da      	uxtb	r2, r3
    7ffe:	231f      	movs	r3, #31
    8000:	18fb      	adds	r3, r7, r3
    8002:	213f      	movs	r1, #63	; 0x3f
    8004:	400a      	ands	r2, r1
    8006:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    8008:	231f      	movs	r3, #31
    800a:	18fb      	adds	r3, r7, r3
    800c:	781b      	ldrb	r3, [r3, #0]
    800e:	2208      	movs	r2, #8
    8010:	4013      	ands	r3, r2
    8012:	d007      	beq.n	8024 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    8014:	231f      	movs	r3, #31
    8016:	18fb      	adds	r3, r7, r3
    8018:	221f      	movs	r2, #31
    801a:	18ba      	adds	r2, r7, r2
    801c:	7812      	ldrb	r2, [r2, #0]
    801e:	2108      	movs	r1, #8
    8020:	438a      	bics	r2, r1
    8022:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    8024:	231f      	movs	r3, #31
    8026:	18fb      	adds	r3, r7, r3
    8028:	781b      	ldrb	r3, [r3, #0]
    802a:	2b00      	cmp	r3, #0
    802c:	d050      	beq.n	80d0 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    802e:	231f      	movs	r3, #31
    8030:	18fb      	adds	r3, r7, r3
    8032:	781b      	ldrb	r3, [r3, #0]
    8034:	2202      	movs	r2, #2
    8036:	4013      	ands	r3, r2
    8038:	d007      	beq.n	804a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    803a:	69bb      	ldr	r3, [r7, #24]
    803c:	2232      	movs	r2, #50	; 0x32
    803e:	211a      	movs	r1, #26
    8040:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    8042:	697b      	ldr	r3, [r7, #20]
    8044:	2202      	movs	r2, #2
    8046:	835a      	strh	r2, [r3, #26]
    8048:	e036      	b.n	80b8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    804a:	231f      	movs	r3, #31
    804c:	18fb      	adds	r3, r7, r3
    804e:	781b      	ldrb	r3, [r3, #0]
    8050:	2204      	movs	r2, #4
    8052:	4013      	ands	r3, r2
    8054:	d007      	beq.n	8066 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    8056:	69bb      	ldr	r3, [r7, #24]
    8058:	2232      	movs	r2, #50	; 0x32
    805a:	211e      	movs	r1, #30
    805c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    805e:	697b      	ldr	r3, [r7, #20]
    8060:	2204      	movs	r2, #4
    8062:	835a      	strh	r2, [r3, #26]
    8064:	e028      	b.n	80b8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    8066:	231f      	movs	r3, #31
    8068:	18fb      	adds	r3, r7, r3
    806a:	781b      	ldrb	r3, [r3, #0]
    806c:	2201      	movs	r2, #1
    806e:	4013      	ands	r3, r2
    8070:	d007      	beq.n	8082 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    8072:	69bb      	ldr	r3, [r7, #24]
    8074:	2232      	movs	r2, #50	; 0x32
    8076:	2113      	movs	r1, #19
    8078:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    807a:	697b      	ldr	r3, [r7, #20]
    807c:	2201      	movs	r2, #1
    807e:	835a      	strh	r2, [r3, #26]
    8080:	e01a      	b.n	80b8 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    8082:	231f      	movs	r3, #31
    8084:	18fb      	adds	r3, r7, r3
    8086:	781b      	ldrb	r3, [r3, #0]
    8088:	2210      	movs	r2, #16
    808a:	4013      	ands	r3, r2
    808c:	d007      	beq.n	809e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    808e:	69bb      	ldr	r3, [r7, #24]
    8090:	2232      	movs	r2, #50	; 0x32
    8092:	2142      	movs	r1, #66	; 0x42
    8094:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    8096:	697b      	ldr	r3, [r7, #20]
    8098:	2210      	movs	r2, #16
    809a:	835a      	strh	r2, [r3, #26]
    809c:	e00c      	b.n	80b8 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    809e:	231f      	movs	r3, #31
    80a0:	18fb      	adds	r3, r7, r3
    80a2:	781b      	ldrb	r3, [r3, #0]
    80a4:	2220      	movs	r2, #32
    80a6:	4013      	ands	r3, r2
    80a8:	d006      	beq.n	80b8 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    80aa:	69bb      	ldr	r3, [r7, #24]
    80ac:	2232      	movs	r2, #50	; 0x32
    80ae:	2141      	movs	r1, #65	; 0x41
    80b0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    80b2:	697b      	ldr	r3, [r7, #20]
    80b4:	2220      	movs	r2, #32
    80b6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    80b8:	2310      	movs	r3, #16
    80ba:	18fb      	adds	r3, r7, r3
    80bc:	881b      	ldrh	r3, [r3, #0]
    80be:	2204      	movs	r2, #4
    80c0:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    80c2:	d050      	beq.n	8166 <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    80c4:	69bb      	ldr	r3, [r7, #24]
    80c6:	695b      	ldr	r3, [r3, #20]
    80c8:	69ba      	ldr	r2, [r7, #24]
    80ca:	0010      	movs	r0, r2
    80cc:	4798      	blx	r3
    80ce:	e04a      	b.n	8166 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    80d0:	697b      	ldr	r3, [r7, #20]
    80d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    80d4:	b29a      	uxth	r2, r3
    80d6:	230e      	movs	r3, #14
    80d8:	18fb      	adds	r3, r7, r3
    80da:	05d2      	lsls	r2, r2, #23
    80dc:	0dd2      	lsrs	r2, r2, #23
    80de:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    80e0:	69bb      	ldr	r3, [r7, #24]
    80e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    80e4:	220e      	movs	r2, #14
    80e6:	18ba      	adds	r2, r7, r2
    80e8:	8812      	ldrh	r2, [r2, #0]
    80ea:	b2d2      	uxtb	r2, r2
    80ec:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    80ee:	69bb      	ldr	r3, [r7, #24]
    80f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    80f2:	1c5a      	adds	r2, r3, #1
    80f4:	69bb      	ldr	r3, [r7, #24]
    80f6:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    80f8:	69bb      	ldr	r3, [r7, #24]
    80fa:	795b      	ldrb	r3, [r3, #5]
    80fc:	2b01      	cmp	r3, #1
    80fe:	d10d      	bne.n	811c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    8100:	69bb      	ldr	r3, [r7, #24]
    8102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8104:	220e      	movs	r2, #14
    8106:	18ba      	adds	r2, r7, r2
    8108:	8812      	ldrh	r2, [r2, #0]
    810a:	0a12      	lsrs	r2, r2, #8
    810c:	b292      	uxth	r2, r2
    810e:	b2d2      	uxtb	r2, r2
    8110:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    8112:	69bb      	ldr	r3, [r7, #24]
    8114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8116:	1c5a      	adds	r2, r3, #1
    8118:	69bb      	ldr	r3, [r7, #24]
    811a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    811c:	69bb      	ldr	r3, [r7, #24]
    811e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    8120:	b29b      	uxth	r3, r3
    8122:	3b01      	subs	r3, #1
    8124:	b29b      	uxth	r3, r3
    8126:	69ba      	ldr	r2, [r7, #24]
    8128:	1c19      	adds	r1, r3, #0
    812a:	8591      	strh	r1, [r2, #44]	; 0x2c
    812c:	2b00      	cmp	r3, #0
    812e:	d11a      	bne.n	8166 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8130:	697b      	ldr	r3, [r7, #20]
    8132:	2204      	movs	r2, #4
    8134:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    8136:	69bb      	ldr	r3, [r7, #24]
    8138:	2232      	movs	r2, #50	; 0x32
    813a:	2100      	movs	r1, #0
    813c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    813e:	2310      	movs	r3, #16
    8140:	18fb      	adds	r3, r7, r3
    8142:	881b      	ldrh	r3, [r3, #0]
    8144:	2202      	movs	r2, #2
    8146:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    8148:	d00d      	beq.n	8166 <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    814a:	69bb      	ldr	r3, [r7, #24]
    814c:	691b      	ldr	r3, [r3, #16]
    814e:	69ba      	ldr	r2, [r7, #24]
    8150:	0010      	movs	r0, r2
    8152:	4798      	blx	r3
    8154:	e007      	b.n	8166 <_usart_interrupt_handler+0x2ae>
    8156:	46c0      	nop			; (mov r8, r8)
    8158:	2000043c 	.word	0x2000043c
    815c:	00007db1 	.word	0x00007db1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8160:	697b      	ldr	r3, [r7, #20]
    8162:	2204      	movs	r2, #4
    8164:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    8166:	2312      	movs	r3, #18
    8168:	18fb      	adds	r3, r7, r3
    816a:	881b      	ldrh	r3, [r3, #0]
    816c:	2210      	movs	r2, #16
    816e:	4013      	ands	r3, r2
    8170:	d010      	beq.n	8194 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    8172:	697b      	ldr	r3, [r7, #20]
    8174:	2210      	movs	r2, #16
    8176:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    8178:	697b      	ldr	r3, [r7, #20]
    817a:	2210      	movs	r2, #16
    817c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    817e:	2310      	movs	r3, #16
    8180:	18fb      	adds	r3, r7, r3
    8182:	881b      	ldrh	r3, [r3, #0]
    8184:	2210      	movs	r2, #16
    8186:	4013      	ands	r3, r2
    8188:	d004      	beq.n	8194 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    818a:	69bb      	ldr	r3, [r7, #24]
    818c:	69db      	ldr	r3, [r3, #28]
    818e:	69ba      	ldr	r2, [r7, #24]
    8190:	0010      	movs	r0, r2
    8192:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    8194:	2312      	movs	r3, #18
    8196:	18fb      	adds	r3, r7, r3
    8198:	881b      	ldrh	r3, [r3, #0]
    819a:	2220      	movs	r2, #32
    819c:	4013      	ands	r3, r2
    819e:	d010      	beq.n	81c2 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    81a0:	697b      	ldr	r3, [r7, #20]
    81a2:	2220      	movs	r2, #32
    81a4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    81a6:	697b      	ldr	r3, [r7, #20]
    81a8:	2220      	movs	r2, #32
    81aa:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    81ac:	2310      	movs	r3, #16
    81ae:	18fb      	adds	r3, r7, r3
    81b0:	881b      	ldrh	r3, [r3, #0]
    81b2:	2208      	movs	r2, #8
    81b4:	4013      	ands	r3, r2
    81b6:	d004      	beq.n	81c2 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    81b8:	69bb      	ldr	r3, [r7, #24]
    81ba:	699b      	ldr	r3, [r3, #24]
    81bc:	69ba      	ldr	r2, [r7, #24]
    81be:	0010      	movs	r0, r2
    81c0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    81c2:	2312      	movs	r3, #18
    81c4:	18fb      	adds	r3, r7, r3
    81c6:	881b      	ldrh	r3, [r3, #0]
    81c8:	2208      	movs	r2, #8
    81ca:	4013      	ands	r3, r2
    81cc:	d010      	beq.n	81f0 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    81ce:	697b      	ldr	r3, [r7, #20]
    81d0:	2208      	movs	r2, #8
    81d2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    81d4:	697b      	ldr	r3, [r7, #20]
    81d6:	2208      	movs	r2, #8
    81d8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    81da:	2310      	movs	r3, #16
    81dc:	18fb      	adds	r3, r7, r3
    81de:	881b      	ldrh	r3, [r3, #0]
    81e0:	2220      	movs	r2, #32
    81e2:	4013      	ands	r3, r2
    81e4:	d004      	beq.n	81f0 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    81e6:	69bb      	ldr	r3, [r7, #24]
    81e8:	6a1b      	ldr	r3, [r3, #32]
    81ea:	69ba      	ldr	r2, [r7, #24]
    81ec:	0010      	movs	r0, r2
    81ee:	4798      	blx	r3
		}
	}
#endif
}
    81f0:	46c0      	nop			; (mov r8, r8)
    81f2:	46bd      	mov	sp, r7
    81f4:	b008      	add	sp, #32
    81f6:	bd80      	pop	{r7, pc}

000081f8 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    81f8:	b580      	push	{r7, lr}
    81fa:	b082      	sub	sp, #8
    81fc:	af00      	add	r7, sp, #0
    81fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    8200:	687b      	ldr	r3, [r7, #4]
    8202:	2201      	movs	r2, #1
    8204:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    8206:	687b      	ldr	r3, [r7, #4]
    8208:	2200      	movs	r2, #0
    820a:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    820c:	687b      	ldr	r3, [r7, #4]
    820e:	2206      	movs	r2, #6
    8210:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    8212:	687b      	ldr	r3, [r7, #4]
    8214:	2200      	movs	r2, #0
    8216:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    8218:	687b      	ldr	r3, [r7, #4]
    821a:	2200      	movs	r2, #0
    821c:	725a      	strb	r2, [r3, #9]
}
    821e:	46c0      	nop			; (mov r8, r8)
    8220:	46bd      	mov	sp, r7
    8222:	b002      	add	sp, #8
    8224:	bd80      	pop	{r7, pc}
    8226:	46c0      	nop			; (mov r8, r8)

00008228 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    8228:	b580      	push	{r7, lr}
    822a:	b082      	sub	sp, #8
    822c:	af00      	add	r7, sp, #0
    822e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    8230:	687b      	ldr	r3, [r7, #4]
    8232:	2200      	movs	r2, #0
    8234:	701a      	strb	r2, [r3, #0]
}
    8236:	46c0      	nop			; (mov r8, r8)
    8238:	46bd      	mov	sp, r7
    823a:	b002      	add	sp, #8
    823c:	bd80      	pop	{r7, pc}
    823e:	46c0      	nop			; (mov r8, r8)

00008240 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    8240:	b580      	push	{r7, lr}
    8242:	b082      	sub	sp, #8
    8244:	af00      	add	r7, sp, #0
    8246:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    8248:	687b      	ldr	r3, [r7, #4]
    824a:	2200      	movs	r2, #0
    824c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    824e:	687b      	ldr	r3, [r7, #4]
    8250:	2204      	movs	r2, #4
    8252:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    8254:	687b      	ldr	r3, [r7, #4]
    8256:	2200      	movs	r2, #0
    8258:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    825a:	687b      	ldr	r3, [r7, #4]
    825c:	2280      	movs	r2, #128	; 0x80
    825e:	0212      	lsls	r2, r2, #8
    8260:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    8262:	687b      	ldr	r3, [r7, #4]
    8264:	2200      	movs	r2, #0
    8266:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    8268:	687b      	ldr	r3, [r7, #4]
    826a:	2201      	movs	r2, #1
    826c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    826e:	687b      	ldr	r3, [r7, #4]
    8270:	2200      	movs	r2, #0
    8272:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    8274:	687b      	ldr	r3, [r7, #4]
    8276:	2201      	movs	r2, #1
    8278:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    827a:	687b      	ldr	r3, [r7, #4]
    827c:	2200      	movs	r2, #0
    827e:	739a      	strb	r2, [r3, #14]
}
    8280:	46c0      	nop			; (mov r8, r8)
    8282:	46bd      	mov	sp, r7
    8284:	b002      	add	sp, #8
    8286:	bd80      	pop	{r7, pc}

00008288 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    8288:	b580      	push	{r7, lr}
    828a:	b082      	sub	sp, #8
    828c:	af00      	add	r7, sp, #0
    828e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    8290:	687b      	ldr	r3, [r7, #4]
    8292:	2203      	movs	r2, #3
    8294:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    8296:	687b      	ldr	r3, [r7, #4]
    8298:	2200      	movs	r2, #0
    829a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    829c:	687b      	ldr	r3, [r7, #4]
    829e:	2201      	movs	r2, #1
    82a0:	709a      	strb	r2, [r3, #2]
}
    82a2:	46c0      	nop			; (mov r8, r8)
    82a4:	46bd      	mov	sp, r7
    82a6:	b002      	add	sp, #8
    82a8:	bd80      	pop	{r7, pc}
    82aa:	46c0      	nop			; (mov r8, r8)

000082ac <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    82ac:	b580      	push	{r7, lr}
    82ae:	b082      	sub	sp, #8
    82b0:	af00      	add	r7, sp, #0
    82b2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    82b4:	687b      	ldr	r3, [r7, #4]
    82b6:	2200      	movs	r2, #0
    82b8:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    82ba:	687b      	ldr	r3, [r7, #4]
    82bc:	2200      	movs	r2, #0
    82be:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    82c0:	687b      	ldr	r3, [r7, #4]
    82c2:	2200      	movs	r2, #0
    82c4:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    82c6:	687b      	ldr	r3, [r7, #4]
    82c8:	2200      	movs	r2, #0
    82ca:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    82cc:	687b      	ldr	r3, [r7, #4]
    82ce:	2200      	movs	r2, #0
    82d0:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    82d2:	687b      	ldr	r3, [r7, #4]
    82d4:	2201      	movs	r2, #1
    82d6:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    82d8:	687b      	ldr	r3, [r7, #4]
    82da:	2207      	movs	r2, #7
    82dc:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    82de:	687b      	ldr	r3, [r7, #4]
    82e0:	223f      	movs	r2, #63	; 0x3f
    82e2:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    82e4:	687b      	ldr	r3, [r7, #4]
    82e6:	2201      	movs	r2, #1
    82e8:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    82ea:	687b      	ldr	r3, [r7, #4]
    82ec:	2201      	movs	r2, #1
    82ee:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    82f0:	687b      	ldr	r3, [r7, #4]
    82f2:	2206      	movs	r2, #6
    82f4:	821a      	strh	r2, [r3, #16]
}
    82f6:	46c0      	nop			; (mov r8, r8)
    82f8:	46bd      	mov	sp, r7
    82fa:	b002      	add	sp, #8
    82fc:	bd80      	pop	{r7, pc}
    82fe:	46c0      	nop			; (mov r8, r8)

00008300 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    8300:	b580      	push	{r7, lr}
    8302:	b082      	sub	sp, #8
    8304:	af00      	add	r7, sp, #0
    8306:	0002      	movs	r2, r0
    8308:	1dfb      	adds	r3, r7, #7
    830a:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    830c:	4a03      	ldr	r2, [pc, #12]	; (831c <system_cpu_clock_set_divider+0x1c>)
    830e:	1dfb      	adds	r3, r7, #7
    8310:	781b      	ldrb	r3, [r3, #0]
    8312:	7213      	strb	r3, [r2, #8]
}
    8314:	46c0      	nop			; (mov r8, r8)
    8316:	46bd      	mov	sp, r7
    8318:	b002      	add	sp, #8
    831a:	bd80      	pop	{r7, pc}
    831c:	40000400 	.word	0x40000400

00008320 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    8320:	b580      	push	{r7, lr}
    8322:	b082      	sub	sp, #8
    8324:	af00      	add	r7, sp, #0
    8326:	0002      	movs	r2, r0
    8328:	1dfb      	adds	r3, r7, #7
    832a:	701a      	strb	r2, [r3, #0]
    832c:	1dbb      	adds	r3, r7, #6
    832e:	1c0a      	adds	r2, r1, #0
    8330:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8332:	1dfb      	adds	r3, r7, #7
    8334:	781b      	ldrb	r3, [r3, #0]
    8336:	2b01      	cmp	r3, #1
    8338:	d008      	beq.n	834c <system_apb_clock_set_divider+0x2c>
    833a:	2b02      	cmp	r3, #2
    833c:	d00b      	beq.n	8356 <system_apb_clock_set_divider+0x36>
    833e:	2b00      	cmp	r3, #0
    8340:	d10e      	bne.n	8360 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    8342:	4a0b      	ldr	r2, [pc, #44]	; (8370 <system_apb_clock_set_divider+0x50>)
    8344:	1dbb      	adds	r3, r7, #6
    8346:	781b      	ldrb	r3, [r3, #0]
    8348:	7253      	strb	r3, [r2, #9]
			break;
    834a:	e00b      	b.n	8364 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    834c:	4a08      	ldr	r2, [pc, #32]	; (8370 <system_apb_clock_set_divider+0x50>)
    834e:	1dbb      	adds	r3, r7, #6
    8350:	781b      	ldrb	r3, [r3, #0]
    8352:	7293      	strb	r3, [r2, #10]
			break;
    8354:	e006      	b.n	8364 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    8356:	4a06      	ldr	r2, [pc, #24]	; (8370 <system_apb_clock_set_divider+0x50>)
    8358:	1dbb      	adds	r3, r7, #6
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	72d3      	strb	r3, [r2, #11]
			break;
    835e:	e001      	b.n	8364 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8360:	2317      	movs	r3, #23
    8362:	e000      	b.n	8366 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    8364:	2300      	movs	r3, #0
}
    8366:	0018      	movs	r0, r3
    8368:	46bd      	mov	sp, r7
    836a:	b002      	add	sp, #8
    836c:	bd80      	pop	{r7, pc}
    836e:	46c0      	nop			; (mov r8, r8)
    8370:	40000400 	.word	0x40000400

00008374 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    8374:	b580      	push	{r7, lr}
    8376:	b082      	sub	sp, #8
    8378:	af00      	add	r7, sp, #0
    837a:	0002      	movs	r2, r0
    837c:	1dfb      	adds	r3, r7, #7
    837e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    8380:	4a08      	ldr	r2, [pc, #32]	; (83a4 <system_flash_set_waitstates+0x30>)
    8382:	1dfb      	adds	r3, r7, #7
    8384:	781b      	ldrb	r3, [r3, #0]
    8386:	210f      	movs	r1, #15
    8388:	400b      	ands	r3, r1
    838a:	b2d9      	uxtb	r1, r3
    838c:	6853      	ldr	r3, [r2, #4]
    838e:	200f      	movs	r0, #15
    8390:	4001      	ands	r1, r0
    8392:	0049      	lsls	r1, r1, #1
    8394:	201e      	movs	r0, #30
    8396:	4383      	bics	r3, r0
    8398:	430b      	orrs	r3, r1
    839a:	6053      	str	r3, [r2, #4]
}
    839c:	46c0      	nop			; (mov r8, r8)
    839e:	46bd      	mov	sp, r7
    83a0:	b002      	add	sp, #8
    83a2:	bd80      	pop	{r7, pc}
    83a4:	41004000 	.word	0x41004000

000083a8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    83a8:	b580      	push	{r7, lr}
    83aa:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    83ac:	46c0      	nop			; (mov r8, r8)
    83ae:	4b04      	ldr	r3, [pc, #16]	; (83c0 <_system_dfll_wait_for_sync+0x18>)
    83b0:	68db      	ldr	r3, [r3, #12]
    83b2:	2210      	movs	r2, #16
    83b4:	4013      	ands	r3, r2
    83b6:	d0fa      	beq.n	83ae <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    83b8:	46c0      	nop			; (mov r8, r8)
    83ba:	46bd      	mov	sp, r7
    83bc:	bd80      	pop	{r7, pc}
    83be:	46c0      	nop			; (mov r8, r8)
    83c0:	40000800 	.word	0x40000800

000083c4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    83c4:	b580      	push	{r7, lr}
    83c6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    83c8:	4b0c      	ldr	r3, [pc, #48]	; (83fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    83ca:	2202      	movs	r2, #2
    83cc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    83ce:	4b0c      	ldr	r3, [pc, #48]	; (8400 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    83d0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    83d2:	4a0a      	ldr	r2, [pc, #40]	; (83fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    83d4:	4b0b      	ldr	r3, [pc, #44]	; (8404 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    83d6:	689b      	ldr	r3, [r3, #8]
    83d8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    83da:	4a08      	ldr	r2, [pc, #32]	; (83fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    83dc:	4b09      	ldr	r3, [pc, #36]	; (8404 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    83de:	685b      	ldr	r3, [r3, #4]
    83e0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    83e2:	4b06      	ldr	r3, [pc, #24]	; (83fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    83e4:	2200      	movs	r2, #0
    83e6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    83e8:	4b05      	ldr	r3, [pc, #20]	; (8400 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    83ea:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    83ec:	4a03      	ldr	r2, [pc, #12]	; (83fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    83ee:	4b05      	ldr	r3, [pc, #20]	; (8404 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    83f0:	681b      	ldr	r3, [r3, #0]
    83f2:	b29b      	uxth	r3, r3
    83f4:	8493      	strh	r3, [r2, #36]	; 0x24
}
    83f6:	46c0      	nop			; (mov r8, r8)
    83f8:	46bd      	mov	sp, r7
    83fa:	bd80      	pop	{r7, pc}
    83fc:	40000800 	.word	0x40000800
    8400:	000083a9 	.word	0x000083a9
    8404:	200000dc 	.word	0x200000dc

00008408 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    8408:	b580      	push	{r7, lr}
    840a:	b082      	sub	sp, #8
    840c:	af00      	add	r7, sp, #0
    840e:	0002      	movs	r2, r0
    8410:	1dfb      	adds	r3, r7, #7
    8412:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    8414:	1dfb      	adds	r3, r7, #7
    8416:	781b      	ldrb	r3, [r3, #0]
    8418:	2b08      	cmp	r3, #8
    841a:	d840      	bhi.n	849e <system_clock_source_get_hz+0x96>
    841c:	009a      	lsls	r2, r3, #2
    841e:	4b22      	ldr	r3, [pc, #136]	; (84a8 <system_clock_source_get_hz+0xa0>)
    8420:	18d3      	adds	r3, r2, r3
    8422:	681b      	ldr	r3, [r3, #0]
    8424:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    8426:	4b21      	ldr	r3, [pc, #132]	; (84ac <system_clock_source_get_hz+0xa4>)
    8428:	691b      	ldr	r3, [r3, #16]
    842a:	e039      	b.n	84a0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    842c:	4b20      	ldr	r3, [pc, #128]	; (84b0 <system_clock_source_get_hz+0xa8>)
    842e:	6a1b      	ldr	r3, [r3, #32]
    8430:	059b      	lsls	r3, r3, #22
    8432:	0f9b      	lsrs	r3, r3, #30
    8434:	b2db      	uxtb	r3, r3
    8436:	001a      	movs	r2, r3
    8438:	4b1e      	ldr	r3, [pc, #120]	; (84b4 <system_clock_source_get_hz+0xac>)
    843a:	40d3      	lsrs	r3, r2
    843c:	e030      	b.n	84a0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    843e:	2380      	movs	r3, #128	; 0x80
    8440:	021b      	lsls	r3, r3, #8
    8442:	e02d      	b.n	84a0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    8444:	2380      	movs	r3, #128	; 0x80
    8446:	021b      	lsls	r3, r3, #8
    8448:	e02a      	b.n	84a0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    844a:	4b18      	ldr	r3, [pc, #96]	; (84ac <system_clock_source_get_hz+0xa4>)
    844c:	695b      	ldr	r3, [r3, #20]
    844e:	e027      	b.n	84a0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    8450:	4b16      	ldr	r3, [pc, #88]	; (84ac <system_clock_source_get_hz+0xa4>)
    8452:	681b      	ldr	r3, [r3, #0]
    8454:	2202      	movs	r2, #2
    8456:	4013      	ands	r3, r2
    8458:	d101      	bne.n	845e <system_clock_source_get_hz+0x56>
			return 0;
    845a:	2300      	movs	r3, #0
    845c:	e020      	b.n	84a0 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    845e:	4b16      	ldr	r3, [pc, #88]	; (84b8 <system_clock_source_get_hz+0xb0>)
    8460:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    8462:	4b12      	ldr	r3, [pc, #72]	; (84ac <system_clock_source_get_hz+0xa4>)
    8464:	681b      	ldr	r3, [r3, #0]
    8466:	2204      	movs	r2, #4
    8468:	4013      	ands	r3, r2
    846a:	d009      	beq.n	8480 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    846c:	2000      	movs	r0, #0
    846e:	4b13      	ldr	r3, [pc, #76]	; (84bc <system_clock_source_get_hz+0xb4>)
    8470:	4798      	blx	r3
    8472:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    8474:	4b0d      	ldr	r3, [pc, #52]	; (84ac <system_clock_source_get_hz+0xa4>)
    8476:	689b      	ldr	r3, [r3, #8]
    8478:	041b      	lsls	r3, r3, #16
    847a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    847c:	4353      	muls	r3, r2
    847e:	e00f      	b.n	84a0 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    8480:	4b0f      	ldr	r3, [pc, #60]	; (84c0 <system_clock_source_get_hz+0xb8>)
    8482:	e00d      	b.n	84a0 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    8484:	4a0a      	ldr	r2, [pc, #40]	; (84b0 <system_clock_source_get_hz+0xa8>)
    8486:	2350      	movs	r3, #80	; 0x50
    8488:	5cd3      	ldrb	r3, [r2, r3]
    848a:	b2db      	uxtb	r3, r3
    848c:	001a      	movs	r2, r3
    848e:	2304      	movs	r3, #4
    8490:	4013      	ands	r3, r2
    8492:	d101      	bne.n	8498 <system_clock_source_get_hz+0x90>
			return 0;
    8494:	2300      	movs	r3, #0
    8496:	e003      	b.n	84a0 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    8498:	4b04      	ldr	r3, [pc, #16]	; (84ac <system_clock_source_get_hz+0xa4>)
    849a:	68db      	ldr	r3, [r3, #12]
    849c:	e000      	b.n	84a0 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    849e:	2300      	movs	r3, #0
	}
}
    84a0:	0018      	movs	r0, r3
    84a2:	46bd      	mov	sp, r7
    84a4:	b002      	add	sp, #8
    84a6:	bd80      	pop	{r7, pc}
    84a8:	0000e8ec 	.word	0x0000e8ec
    84ac:	200000dc 	.word	0x200000dc
    84b0:	40000800 	.word	0x40000800
    84b4:	007a1200 	.word	0x007a1200
    84b8:	000083a9 	.word	0x000083a9
    84bc:	00008f61 	.word	0x00008f61
    84c0:	02dc6c00 	.word	0x02dc6c00

000084c4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    84c4:	b580      	push	{r7, lr}
    84c6:	b084      	sub	sp, #16
    84c8:	af00      	add	r7, sp, #0
    84ca:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    84cc:	4b1a      	ldr	r3, [pc, #104]	; (8538 <system_clock_source_osc8m_set_config+0x74>)
    84ce:	6a1b      	ldr	r3, [r3, #32]
    84d0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    84d2:	687b      	ldr	r3, [r7, #4]
    84d4:	781b      	ldrb	r3, [r3, #0]
    84d6:	1c1a      	adds	r2, r3, #0
    84d8:	2303      	movs	r3, #3
    84da:	4013      	ands	r3, r2
    84dc:	b2da      	uxtb	r2, r3
    84de:	230d      	movs	r3, #13
    84e0:	18fb      	adds	r3, r7, r3
    84e2:	2103      	movs	r1, #3
    84e4:	400a      	ands	r2, r1
    84e6:	0010      	movs	r0, r2
    84e8:	781a      	ldrb	r2, [r3, #0]
    84ea:	2103      	movs	r1, #3
    84ec:	438a      	bics	r2, r1
    84ee:	1c11      	adds	r1, r2, #0
    84f0:	1c02      	adds	r2, r0, #0
    84f2:	430a      	orrs	r2, r1
    84f4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    84f6:	687b      	ldr	r3, [r7, #4]
    84f8:	789a      	ldrb	r2, [r3, #2]
    84fa:	230c      	movs	r3, #12
    84fc:	18fb      	adds	r3, r7, r3
    84fe:	01d0      	lsls	r0, r2, #7
    8500:	781a      	ldrb	r2, [r3, #0]
    8502:	217f      	movs	r1, #127	; 0x7f
    8504:	400a      	ands	r2, r1
    8506:	1c11      	adds	r1, r2, #0
    8508:	1c02      	adds	r2, r0, #0
    850a:	430a      	orrs	r2, r1
    850c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    850e:	687b      	ldr	r3, [r7, #4]
    8510:	785a      	ldrb	r2, [r3, #1]
    8512:	230c      	movs	r3, #12
    8514:	18fb      	adds	r3, r7, r3
    8516:	2101      	movs	r1, #1
    8518:	400a      	ands	r2, r1
    851a:	0190      	lsls	r0, r2, #6
    851c:	781a      	ldrb	r2, [r3, #0]
    851e:	2140      	movs	r1, #64	; 0x40
    8520:	438a      	bics	r2, r1
    8522:	1c11      	adds	r1, r2, #0
    8524:	1c02      	adds	r2, r0, #0
    8526:	430a      	orrs	r2, r1
    8528:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    852a:	4b03      	ldr	r3, [pc, #12]	; (8538 <system_clock_source_osc8m_set_config+0x74>)
    852c:	68fa      	ldr	r2, [r7, #12]
    852e:	621a      	str	r2, [r3, #32]
}
    8530:	46c0      	nop			; (mov r8, r8)
    8532:	46bd      	mov	sp, r7
    8534:	b004      	add	sp, #16
    8536:	bd80      	pop	{r7, pc}
    8538:	40000800 	.word	0x40000800

0000853c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    853c:	b580      	push	{r7, lr}
    853e:	b084      	sub	sp, #16
    8540:	af00      	add	r7, sp, #0
    8542:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    8544:	4a43      	ldr	r2, [pc, #268]	; (8654 <system_clock_source_xosc32k_set_config+0x118>)
    8546:	230c      	movs	r3, #12
    8548:	18fb      	adds	r3, r7, r3
    854a:	8a92      	ldrh	r2, [r2, #20]
    854c:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    854e:	687b      	ldr	r3, [r7, #4]
    8550:	785b      	ldrb	r3, [r3, #1]
    8552:	1c1a      	adds	r2, r3, #0
    8554:	2307      	movs	r3, #7
    8556:	4013      	ands	r3, r2
    8558:	b2da      	uxtb	r2, r3
    855a:	230c      	movs	r3, #12
    855c:	18fb      	adds	r3, r7, r3
    855e:	2107      	movs	r1, #7
    8560:	400a      	ands	r2, r1
    8562:	0010      	movs	r0, r2
    8564:	785a      	ldrb	r2, [r3, #1]
    8566:	2107      	movs	r1, #7
    8568:	438a      	bics	r2, r1
    856a:	1c11      	adds	r1, r2, #0
    856c:	1c02      	adds	r2, r0, #0
    856e:	430a      	orrs	r2, r1
    8570:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    8572:	687b      	ldr	r3, [r7, #4]
    8574:	781b      	ldrb	r3, [r3, #0]
    8576:	2b00      	cmp	r3, #0
    8578:	d106      	bne.n	8588 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    857a:	230c      	movs	r3, #12
    857c:	18fb      	adds	r3, r7, r3
    857e:	781a      	ldrb	r2, [r3, #0]
    8580:	2104      	movs	r1, #4
    8582:	430a      	orrs	r2, r1
    8584:	701a      	strb	r2, [r3, #0]
    8586:	e005      	b.n	8594 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    8588:	230c      	movs	r3, #12
    858a:	18fb      	adds	r3, r7, r3
    858c:	781a      	ldrb	r2, [r3, #0]
    858e:	2104      	movs	r1, #4
    8590:	438a      	bics	r2, r1
    8592:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    8594:	687b      	ldr	r3, [r7, #4]
    8596:	789a      	ldrb	r2, [r3, #2]
    8598:	230c      	movs	r3, #12
    859a:	18fb      	adds	r3, r7, r3
    859c:	2101      	movs	r1, #1
    859e:	400a      	ands	r2, r1
    85a0:	0150      	lsls	r0, r2, #5
    85a2:	781a      	ldrb	r2, [r3, #0]
    85a4:	2120      	movs	r1, #32
    85a6:	438a      	bics	r2, r1
    85a8:	1c11      	adds	r1, r2, #0
    85aa:	1c02      	adds	r2, r0, #0
    85ac:	430a      	orrs	r2, r1
    85ae:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    85b0:	687b      	ldr	r3, [r7, #4]
    85b2:	78da      	ldrb	r2, [r3, #3]
    85b4:	230c      	movs	r3, #12
    85b6:	18fb      	adds	r3, r7, r3
    85b8:	2101      	movs	r1, #1
    85ba:	400a      	ands	r2, r1
    85bc:	0110      	lsls	r0, r2, #4
    85be:	781a      	ldrb	r2, [r3, #0]
    85c0:	2110      	movs	r1, #16
    85c2:	438a      	bics	r2, r1
    85c4:	1c11      	adds	r1, r2, #0
    85c6:	1c02      	adds	r2, r0, #0
    85c8:	430a      	orrs	r2, r1
    85ca:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    85cc:	687b      	ldr	r3, [r7, #4]
    85ce:	791a      	ldrb	r2, [r3, #4]
    85d0:	230c      	movs	r3, #12
    85d2:	18fb      	adds	r3, r7, r3
    85d4:	2101      	movs	r1, #1
    85d6:	400a      	ands	r2, r1
    85d8:	00d0      	lsls	r0, r2, #3
    85da:	781a      	ldrb	r2, [r3, #0]
    85dc:	2108      	movs	r1, #8
    85de:	438a      	bics	r2, r1
    85e0:	1c11      	adds	r1, r2, #0
    85e2:	1c02      	adds	r2, r0, #0
    85e4:	430a      	orrs	r2, r1
    85e6:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    85e8:	687b      	ldr	r3, [r7, #4]
    85ea:	7b5a      	ldrb	r2, [r3, #13]
    85ec:	230c      	movs	r3, #12
    85ee:	18fb      	adds	r3, r7, r3
    85f0:	01d0      	lsls	r0, r2, #7
    85f2:	781a      	ldrb	r2, [r3, #0]
    85f4:	217f      	movs	r1, #127	; 0x7f
    85f6:	400a      	ands	r2, r1
    85f8:	1c11      	adds	r1, r2, #0
    85fa:	1c02      	adds	r2, r0, #0
    85fc:	430a      	orrs	r2, r1
    85fe:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    8600:	687b      	ldr	r3, [r7, #4]
    8602:	7b1a      	ldrb	r2, [r3, #12]
    8604:	230c      	movs	r3, #12
    8606:	18fb      	adds	r3, r7, r3
    8608:	2101      	movs	r1, #1
    860a:	400a      	ands	r2, r1
    860c:	0190      	lsls	r0, r2, #6
    860e:	781a      	ldrb	r2, [r3, #0]
    8610:	2140      	movs	r1, #64	; 0x40
    8612:	438a      	bics	r2, r1
    8614:	1c11      	adds	r1, r2, #0
    8616:	1c02      	adds	r2, r0, #0
    8618:	430a      	orrs	r2, r1
    861a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    861c:	687b      	ldr	r3, [r7, #4]
    861e:	7b9a      	ldrb	r2, [r3, #14]
    8620:	230c      	movs	r3, #12
    8622:	18fb      	adds	r3, r7, r3
    8624:	2101      	movs	r1, #1
    8626:	400a      	ands	r2, r1
    8628:	0110      	lsls	r0, r2, #4
    862a:	785a      	ldrb	r2, [r3, #1]
    862c:	2110      	movs	r1, #16
    862e:	438a      	bics	r2, r1
    8630:	1c11      	adds	r1, r2, #0
    8632:	1c02      	adds	r2, r0, #0
    8634:	430a      	orrs	r2, r1
    8636:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    8638:	687b      	ldr	r3, [r7, #4]
    863a:	689a      	ldr	r2, [r3, #8]
    863c:	4b06      	ldr	r3, [pc, #24]	; (8658 <system_clock_source_xosc32k_set_config+0x11c>)
    863e:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    8640:	4a04      	ldr	r2, [pc, #16]	; (8654 <system_clock_source_xosc32k_set_config+0x118>)
    8642:	230c      	movs	r3, #12
    8644:	18fb      	adds	r3, r7, r3
    8646:	881b      	ldrh	r3, [r3, #0]
    8648:	8293      	strh	r3, [r2, #20]
}
    864a:	46c0      	nop			; (mov r8, r8)
    864c:	46bd      	mov	sp, r7
    864e:	b004      	add	sp, #16
    8650:	bd80      	pop	{r7, pc}
    8652:	46c0      	nop			; (mov r8, r8)
    8654:	40000800 	.word	0x40000800
    8658:	200000dc 	.word	0x200000dc

0000865c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    865c:	b580      	push	{r7, lr}
    865e:	b082      	sub	sp, #8
    8660:	af00      	add	r7, sp, #0
    8662:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    8664:	687b      	ldr	r3, [r7, #4]
    8666:	7a1b      	ldrb	r3, [r3, #8]
    8668:	029b      	lsls	r3, r3, #10
    866a:	041b      	lsls	r3, r3, #16
    866c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    866e:	687b      	ldr	r3, [r7, #4]
    8670:	895b      	ldrh	r3, [r3, #10]
    8672:	059b      	lsls	r3, r3, #22
    8674:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    8676:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    8678:	4b2a      	ldr	r3, [pc, #168]	; (8724 <system_clock_source_dfll_set_config+0xc8>)
    867a:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    867c:	687b      	ldr	r3, [r7, #4]
    867e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    8680:	687b      	ldr	r3, [r7, #4]
    8682:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    8684:	4313      	orrs	r3, r2
    8686:	b2db      	uxtb	r3, r3
    8688:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    868a:	687b      	ldr	r3, [r7, #4]
    868c:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    868e:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    8690:	687a      	ldr	r2, [r7, #4]
    8692:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    8694:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    8696:	687b      	ldr	r3, [r7, #4]
    8698:	785b      	ldrb	r3, [r3, #1]
    869a:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    869c:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    869e:	4b21      	ldr	r3, [pc, #132]	; (8724 <system_clock_source_dfll_set_config+0xc8>)
    86a0:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    86a2:	687b      	ldr	r3, [r7, #4]
    86a4:	781b      	ldrb	r3, [r3, #0]
    86a6:	2b04      	cmp	r3, #4
    86a8:	d116      	bne.n	86d8 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    86aa:	687b      	ldr	r3, [r7, #4]
    86ac:	7b1b      	ldrb	r3, [r3, #12]
    86ae:	069b      	lsls	r3, r3, #26
    86b0:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    86b2:	687b      	ldr	r3, [r7, #4]
    86b4:	89db      	ldrh	r3, [r3, #14]
    86b6:	041b      	lsls	r3, r3, #16
    86b8:	0019      	movs	r1, r3
    86ba:	4b1b      	ldr	r3, [pc, #108]	; (8728 <system_clock_source_dfll_set_config+0xcc>)
    86bc:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    86be:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    86c0:	687a      	ldr	r2, [r7, #4]
    86c2:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    86c4:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    86c6:	4b17      	ldr	r3, [pc, #92]	; (8724 <system_clock_source_dfll_set_config+0xc8>)
    86c8:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    86ca:	4b16      	ldr	r3, [pc, #88]	; (8724 <system_clock_source_dfll_set_config+0xc8>)
    86cc:	681b      	ldr	r3, [r3, #0]
    86ce:	687a      	ldr	r2, [r7, #4]
    86d0:	7812      	ldrb	r2, [r2, #0]
    86d2:	431a      	orrs	r2, r3
    86d4:	4b13      	ldr	r3, [pc, #76]	; (8724 <system_clock_source_dfll_set_config+0xc8>)
    86d6:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    86d8:	687b      	ldr	r3, [r7, #4]
    86da:	781b      	ldrb	r3, [r3, #0]
    86dc:	2b20      	cmp	r3, #32
    86de:	d11c      	bne.n	871a <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    86e0:	687b      	ldr	r3, [r7, #4]
    86e2:	7b1b      	ldrb	r3, [r3, #12]
    86e4:	069b      	lsls	r3, r3, #26
    86e6:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    86e8:	687b      	ldr	r3, [r7, #4]
    86ea:	89db      	ldrh	r3, [r3, #14]
    86ec:	041b      	lsls	r3, r3, #16
    86ee:	0019      	movs	r1, r3
    86f0:	4b0d      	ldr	r3, [pc, #52]	; (8728 <system_clock_source_dfll_set_config+0xcc>)
    86f2:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    86f4:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    86f6:	687a      	ldr	r2, [r7, #4]
    86f8:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    86fa:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    86fc:	4b09      	ldr	r3, [pc, #36]	; (8724 <system_clock_source_dfll_set_config+0xc8>)
    86fe:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    8700:	4b08      	ldr	r3, [pc, #32]	; (8724 <system_clock_source_dfll_set_config+0xc8>)
    8702:	681b      	ldr	r3, [r3, #0]
    8704:	687a      	ldr	r2, [r7, #4]
    8706:	7812      	ldrb	r2, [r2, #0]
    8708:	2104      	movs	r1, #4
    870a:	430a      	orrs	r2, r1
    870c:	b2d2      	uxtb	r2, r2
    870e:	4313      	orrs	r3, r2
    8710:	2280      	movs	r2, #128	; 0x80
    8712:	00d2      	lsls	r2, r2, #3
    8714:	431a      	orrs	r2, r3
    8716:	4b03      	ldr	r3, [pc, #12]	; (8724 <system_clock_source_dfll_set_config+0xc8>)
    8718:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    871a:	46c0      	nop			; (mov r8, r8)
    871c:	46bd      	mov	sp, r7
    871e:	b002      	add	sp, #8
    8720:	bd80      	pop	{r7, pc}
    8722:	46c0      	nop			; (mov r8, r8)
    8724:	200000dc 	.word	0x200000dc
    8728:	03ff0000 	.word	0x03ff0000

0000872c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    872c:	b580      	push	{r7, lr}
    872e:	b082      	sub	sp, #8
    8730:	af00      	add	r7, sp, #0
    8732:	0002      	movs	r2, r0
    8734:	1dfb      	adds	r3, r7, #7
    8736:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    8738:	1dfb      	adds	r3, r7, #7
    873a:	781b      	ldrb	r3, [r3, #0]
    873c:	2b08      	cmp	r3, #8
    873e:	d83b      	bhi.n	87b8 <system_clock_source_enable+0x8c>
    8740:	009a      	lsls	r2, r3, #2
    8742:	4b21      	ldr	r3, [pc, #132]	; (87c8 <system_clock_source_enable+0x9c>)
    8744:	18d3      	adds	r3, r2, r3
    8746:	681b      	ldr	r3, [r3, #0]
    8748:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    874a:	4b20      	ldr	r3, [pc, #128]	; (87cc <system_clock_source_enable+0xa0>)
    874c:	4a1f      	ldr	r2, [pc, #124]	; (87cc <system_clock_source_enable+0xa0>)
    874e:	6a12      	ldr	r2, [r2, #32]
    8750:	2102      	movs	r1, #2
    8752:	430a      	orrs	r2, r1
    8754:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    8756:	2300      	movs	r3, #0
    8758:	e031      	b.n	87be <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    875a:	4b1c      	ldr	r3, [pc, #112]	; (87cc <system_clock_source_enable+0xa0>)
    875c:	4a1b      	ldr	r2, [pc, #108]	; (87cc <system_clock_source_enable+0xa0>)
    875e:	6992      	ldr	r2, [r2, #24]
    8760:	2102      	movs	r1, #2
    8762:	430a      	orrs	r2, r1
    8764:	619a      	str	r2, [r3, #24]
		break;
    8766:	e029      	b.n	87bc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    8768:	4a18      	ldr	r2, [pc, #96]	; (87cc <system_clock_source_enable+0xa0>)
    876a:	4b18      	ldr	r3, [pc, #96]	; (87cc <system_clock_source_enable+0xa0>)
    876c:	8a1b      	ldrh	r3, [r3, #16]
    876e:	b29b      	uxth	r3, r3
    8770:	2102      	movs	r1, #2
    8772:	430b      	orrs	r3, r1
    8774:	b29b      	uxth	r3, r3
    8776:	8213      	strh	r3, [r2, #16]
		break;
    8778:	e020      	b.n	87bc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    877a:	4a14      	ldr	r2, [pc, #80]	; (87cc <system_clock_source_enable+0xa0>)
    877c:	4b13      	ldr	r3, [pc, #76]	; (87cc <system_clock_source_enable+0xa0>)
    877e:	8a9b      	ldrh	r3, [r3, #20]
    8780:	b29b      	uxth	r3, r3
    8782:	2102      	movs	r1, #2
    8784:	430b      	orrs	r3, r1
    8786:	b29b      	uxth	r3, r3
    8788:	8293      	strh	r3, [r2, #20]
		break;
    878a:	e017      	b.n	87bc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    878c:	4b10      	ldr	r3, [pc, #64]	; (87d0 <system_clock_source_enable+0xa4>)
    878e:	681b      	ldr	r3, [r3, #0]
    8790:	2202      	movs	r2, #2
    8792:	431a      	orrs	r2, r3
    8794:	4b0e      	ldr	r3, [pc, #56]	; (87d0 <system_clock_source_enable+0xa4>)
    8796:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    8798:	4b0e      	ldr	r3, [pc, #56]	; (87d4 <system_clock_source_enable+0xa8>)
    879a:	4798      	blx	r3
		break;
    879c:	e00e      	b.n	87bc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    879e:	4a0b      	ldr	r2, [pc, #44]	; (87cc <system_clock_source_enable+0xa0>)
    87a0:	490a      	ldr	r1, [pc, #40]	; (87cc <system_clock_source_enable+0xa0>)
    87a2:	2344      	movs	r3, #68	; 0x44
    87a4:	5ccb      	ldrb	r3, [r1, r3]
    87a6:	b2db      	uxtb	r3, r3
    87a8:	2102      	movs	r1, #2
    87aa:	430b      	orrs	r3, r1
    87ac:	b2d9      	uxtb	r1, r3
    87ae:	2344      	movs	r3, #68	; 0x44
    87b0:	54d1      	strb	r1, [r2, r3]
		break;
    87b2:	e003      	b.n	87bc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    87b4:	2300      	movs	r3, #0
    87b6:	e002      	b.n	87be <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    87b8:	2317      	movs	r3, #23
    87ba:	e000      	b.n	87be <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    87bc:	2300      	movs	r3, #0
}
    87be:	0018      	movs	r0, r3
    87c0:	46bd      	mov	sp, r7
    87c2:	b002      	add	sp, #8
    87c4:	bd80      	pop	{r7, pc}
    87c6:	46c0      	nop			; (mov r8, r8)
    87c8:	0000e910 	.word	0x0000e910
    87cc:	40000800 	.word	0x40000800
    87d0:	200000dc 	.word	0x200000dc
    87d4:	000083c5 	.word	0x000083c5

000087d8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    87d8:	b580      	push	{r7, lr}
    87da:	b084      	sub	sp, #16
    87dc:	af00      	add	r7, sp, #0
    87de:	0002      	movs	r2, r0
    87e0:	1dfb      	adds	r3, r7, #7
    87e2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    87e4:	2300      	movs	r3, #0
    87e6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    87e8:	1dfb      	adds	r3, r7, #7
    87ea:	781b      	ldrb	r3, [r3, #0]
    87ec:	2b08      	cmp	r3, #8
    87ee:	d821      	bhi.n	8834 <system_clock_source_is_ready+0x5c>
    87f0:	009a      	lsls	r2, r3, #2
    87f2:	4b18      	ldr	r3, [pc, #96]	; (8854 <system_clock_source_is_ready+0x7c>)
    87f4:	18d3      	adds	r3, r2, r3
    87f6:	681b      	ldr	r3, [r3, #0]
    87f8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    87fa:	2308      	movs	r3, #8
    87fc:	60fb      	str	r3, [r7, #12]
		break;
    87fe:	e01b      	b.n	8838 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    8800:	2304      	movs	r3, #4
    8802:	60fb      	str	r3, [r7, #12]
		break;
    8804:	e018      	b.n	8838 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    8806:	2301      	movs	r3, #1
    8808:	60fb      	str	r3, [r7, #12]
		break;
    880a:	e015      	b.n	8838 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    880c:	2302      	movs	r3, #2
    880e:	60fb      	str	r3, [r7, #12]
		break;
    8810:	e012      	b.n	8838 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    8812:	23d0      	movs	r3, #208	; 0xd0
    8814:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    8816:	e00f      	b.n	8838 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    8818:	4a0f      	ldr	r2, [pc, #60]	; (8858 <system_clock_source_is_ready+0x80>)
    881a:	2350      	movs	r3, #80	; 0x50
    881c:	5cd3      	ldrb	r3, [r2, r3]
    881e:	b2db      	uxtb	r3, r3
    8820:	001a      	movs	r2, r3
    8822:	2303      	movs	r3, #3
    8824:	4013      	ands	r3, r2
    8826:	3b03      	subs	r3, #3
    8828:	425a      	negs	r2, r3
    882a:	4153      	adcs	r3, r2
    882c:	b2db      	uxtb	r3, r3
    882e:	e00c      	b.n	884a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    8830:	2301      	movs	r3, #1
    8832:	e00a      	b.n	884a <system_clock_source_is_ready+0x72>

	default:
		return false;
    8834:	2300      	movs	r3, #0
    8836:	e008      	b.n	884a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    8838:	4b07      	ldr	r3, [pc, #28]	; (8858 <system_clock_source_is_ready+0x80>)
    883a:	68db      	ldr	r3, [r3, #12]
    883c:	68fa      	ldr	r2, [r7, #12]
    883e:	401a      	ands	r2, r3
    8840:	68fb      	ldr	r3, [r7, #12]
    8842:	1ad3      	subs	r3, r2, r3
    8844:	425a      	negs	r2, r3
    8846:	4153      	adcs	r3, r2
    8848:	b2db      	uxtb	r3, r3
}
    884a:	0018      	movs	r0, r3
    884c:	46bd      	mov	sp, r7
    884e:	b004      	add	sp, #16
    8850:	bd80      	pop	{r7, pc}
    8852:	46c0      	nop			; (mov r8, r8)
    8854:	0000e934 	.word	0x0000e934
    8858:	40000800 	.word	0x40000800

0000885c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    885c:	b580      	push	{r7, lr}
    885e:	b082      	sub	sp, #8
    8860:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    8862:	003b      	movs	r3, r7
    8864:	2202      	movs	r2, #2
    8866:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8868:	2300      	movs	r3, #0
    886a:	607b      	str	r3, [r7, #4]
    886c:	e009      	b.n	8882 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    886e:	687b      	ldr	r3, [r7, #4]
    8870:	b2db      	uxtb	r3, r3
    8872:	003a      	movs	r2, r7
    8874:	0011      	movs	r1, r2
    8876:	0018      	movs	r0, r3
    8878:	4b05      	ldr	r3, [pc, #20]	; (8890 <_switch_peripheral_gclk+0x34>)
    887a:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    887c:	687b      	ldr	r3, [r7, #4]
    887e:	3301      	adds	r3, #1
    8880:	607b      	str	r3, [r7, #4]
    8882:	687b      	ldr	r3, [r7, #4]
    8884:	2b24      	cmp	r3, #36	; 0x24
    8886:	d9f2      	bls.n	886e <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    8888:	46c0      	nop			; (mov r8, r8)
    888a:	46bd      	mov	sp, r7
    888c:	b002      	add	sp, #8
    888e:	bd80      	pop	{r7, pc}
    8890:	00008e3d 	.word	0x00008e3d

00008894 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    8894:	b580      	push	{r7, lr}
    8896:	b0aa      	sub	sp, #168	; 0xa8
    8898:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    889a:	4b87      	ldr	r3, [pc, #540]	; (8ab8 <system_clock_init+0x224>)
    889c:	22c2      	movs	r2, #194	; 0xc2
    889e:	00d2      	lsls	r2, r2, #3
    88a0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    88a2:	2002      	movs	r0, #2
    88a4:	4b85      	ldr	r3, [pc, #532]	; (8abc <system_clock_init+0x228>)
    88a6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    88a8:	4b85      	ldr	r3, [pc, #532]	; (8ac0 <system_clock_init+0x22c>)
    88aa:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    88ac:	2394      	movs	r3, #148	; 0x94
    88ae:	18fb      	adds	r3, r7, r3
    88b0:	0018      	movs	r0, r3
    88b2:	4b84      	ldr	r3, [pc, #528]	; (8ac4 <system_clock_init+0x230>)
    88b4:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    88b6:	2394      	movs	r3, #148	; 0x94
    88b8:	18fb      	adds	r3, r7, r3
    88ba:	2280      	movs	r2, #128	; 0x80
    88bc:	0212      	lsls	r2, r2, #8
    88be:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    88c0:	2394      	movs	r3, #148	; 0x94
    88c2:	18fb      	adds	r3, r7, r3
    88c4:	2200      	movs	r2, #0
    88c6:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    88c8:	2394      	movs	r3, #148	; 0x94
    88ca:	18fb      	adds	r3, r7, r3
    88cc:	2203      	movs	r2, #3
    88ce:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    88d0:	2394      	movs	r3, #148	; 0x94
    88d2:	18fb      	adds	r3, r7, r3
    88d4:	2200      	movs	r2, #0
    88d6:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    88d8:	2394      	movs	r3, #148	; 0x94
    88da:	18fb      	adds	r3, r7, r3
    88dc:	2200      	movs	r2, #0
    88de:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    88e0:	2394      	movs	r3, #148	; 0x94
    88e2:	18fb      	adds	r3, r7, r3
    88e4:	2201      	movs	r2, #1
    88e6:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    88e8:	2394      	movs	r3, #148	; 0x94
    88ea:	18fb      	adds	r3, r7, r3
    88ec:	2200      	movs	r2, #0
    88ee:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    88f0:	2394      	movs	r3, #148	; 0x94
    88f2:	18fb      	adds	r3, r7, r3
    88f4:	2200      	movs	r2, #0
    88f6:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    88f8:	2394      	movs	r3, #148	; 0x94
    88fa:	18fb      	adds	r3, r7, r3
    88fc:	0018      	movs	r0, r3
    88fe:	4b72      	ldr	r3, [pc, #456]	; (8ac8 <system_clock_init+0x234>)
    8900:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    8902:	2005      	movs	r0, #5
    8904:	4b71      	ldr	r3, [pc, #452]	; (8acc <system_clock_init+0x238>)
    8906:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    8908:	46c0      	nop			; (mov r8, r8)
    890a:	2005      	movs	r0, #5
    890c:	4b70      	ldr	r3, [pc, #448]	; (8ad0 <system_clock_init+0x23c>)
    890e:	4798      	blx	r3
    8910:	0003      	movs	r3, r0
    8912:	001a      	movs	r2, r3
    8914:	2301      	movs	r3, #1
    8916:	4053      	eors	r3, r2
    8918:	b2db      	uxtb	r3, r3
    891a:	2b00      	cmp	r3, #0
    891c:	d1f5      	bne.n	890a <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    891e:	4a66      	ldr	r2, [pc, #408]	; (8ab8 <system_clock_init+0x224>)
    8920:	8a93      	ldrh	r3, [r2, #20]
    8922:	2180      	movs	r1, #128	; 0x80
    8924:	430b      	orrs	r3, r1
    8926:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    8928:	2380      	movs	r3, #128	; 0x80
    892a:	18fb      	adds	r3, r7, r3
    892c:	0018      	movs	r0, r3
    892e:	4b69      	ldr	r3, [pc, #420]	; (8ad4 <system_clock_init+0x240>)
    8930:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    8932:	2380      	movs	r3, #128	; 0x80
    8934:	18fb      	adds	r3, r7, r3
    8936:	2204      	movs	r2, #4
    8938:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    893a:	2380      	movs	r3, #128	; 0x80
    893c:	18fb      	adds	r3, r7, r3
    893e:	2200      	movs	r2, #0
    8940:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    8942:	4b65      	ldr	r3, [pc, #404]	; (8ad8 <system_clock_init+0x244>)
    8944:	681b      	ldr	r3, [r3, #0]
    8946:	0e9b      	lsrs	r3, r3, #26
    8948:	22a4      	movs	r2, #164	; 0xa4
    894a:	18ba      	adds	r2, r7, r2
    894c:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    894e:	23a4      	movs	r3, #164	; 0xa4
    8950:	18fb      	adds	r3, r7, r3
    8952:	681b      	ldr	r3, [r3, #0]
    8954:	2b3f      	cmp	r3, #63	; 0x3f
    8956:	d103      	bne.n	8960 <system_clock_init+0xcc>
		coarse = 0x1f;
    8958:	231f      	movs	r3, #31
    895a:	22a4      	movs	r2, #164	; 0xa4
    895c:	18ba      	adds	r2, r7, r2
    895e:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    8960:	23a4      	movs	r3, #164	; 0xa4
    8962:	18fb      	adds	r3, r7, r3
    8964:	681b      	ldr	r3, [r3, #0]
    8966:	b2da      	uxtb	r2, r3
    8968:	2380      	movs	r3, #128	; 0x80
    896a:	18fb      	adds	r3, r7, r3
    896c:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    896e:	2380      	movs	r3, #128	; 0x80
    8970:	18fb      	adds	r3, r7, r3
    8972:	2200      	movs	r2, #0
    8974:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    8976:	2380      	movs	r3, #128	; 0x80
    8978:	18fb      	adds	r3, r7, r3
    897a:	2200      	movs	r2, #0
    897c:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    897e:	2380      	movs	r3, #128	; 0x80
    8980:	18fb      	adds	r3, r7, r3
    8982:	2200      	movs	r2, #0
    8984:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    8986:	2380      	movs	r3, #128	; 0x80
    8988:	18fb      	adds	r3, r7, r3
    898a:	2200      	movs	r2, #0
    898c:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    898e:	2380      	movs	r3, #128	; 0x80
    8990:	18fb      	adds	r3, r7, r3
    8992:	4a52      	ldr	r2, [pc, #328]	; (8adc <system_clock_init+0x248>)
    8994:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    8996:	2380      	movs	r3, #128	; 0x80
    8998:	18fb      	adds	r3, r7, r3
    899a:	2207      	movs	r2, #7
    899c:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    899e:	2380      	movs	r3, #128	; 0x80
    89a0:	18fb      	adds	r3, r7, r3
    89a2:	223f      	movs	r2, #63	; 0x3f
    89a4:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    89a6:	2380      	movs	r3, #128	; 0x80
    89a8:	18fb      	adds	r3, r7, r3
    89aa:	0018      	movs	r0, r3
    89ac:	4b4c      	ldr	r3, [pc, #304]	; (8ae0 <system_clock_init+0x24c>)
    89ae:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    89b0:	237c      	movs	r3, #124	; 0x7c
    89b2:	18fb      	adds	r3, r7, r3
    89b4:	0018      	movs	r0, r3
    89b6:	4b4b      	ldr	r3, [pc, #300]	; (8ae4 <system_clock_init+0x250>)
    89b8:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    89ba:	237c      	movs	r3, #124	; 0x7c
    89bc:	18fb      	adds	r3, r7, r3
    89be:	2200      	movs	r2, #0
    89c0:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    89c2:	237c      	movs	r3, #124	; 0x7c
    89c4:	18fb      	adds	r3, r7, r3
    89c6:	2201      	movs	r2, #1
    89c8:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    89ca:	237c      	movs	r3, #124	; 0x7c
    89cc:	18fb      	adds	r3, r7, r3
    89ce:	2200      	movs	r2, #0
    89d0:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    89d2:	237c      	movs	r3, #124	; 0x7c
    89d4:	18fb      	adds	r3, r7, r3
    89d6:	0018      	movs	r0, r3
    89d8:	4b43      	ldr	r3, [pc, #268]	; (8ae8 <system_clock_init+0x254>)
    89da:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    89dc:	2006      	movs	r0, #6
    89de:	4b3b      	ldr	r3, [pc, #236]	; (8acc <system_clock_init+0x238>)
    89e0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    89e2:	4b42      	ldr	r3, [pc, #264]	; (8aec <system_clock_init+0x258>)
    89e4:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    89e6:	2364      	movs	r3, #100	; 0x64
    89e8:	18fb      	adds	r3, r7, r3
    89ea:	0018      	movs	r0, r3
    89ec:	4b40      	ldr	r3, [pc, #256]	; (8af0 <system_clock_init+0x25c>)
    89ee:	4798      	blx	r3
    89f0:	2364      	movs	r3, #100	; 0x64
    89f2:	18fb      	adds	r3, r7, r3
    89f4:	2205      	movs	r2, #5
    89f6:	701a      	strb	r2, [r3, #0]
    89f8:	2364      	movs	r3, #100	; 0x64
    89fa:	18fb      	adds	r3, r7, r3
    89fc:	2201      	movs	r2, #1
    89fe:	605a      	str	r2, [r3, #4]
    8a00:	2364      	movs	r3, #100	; 0x64
    8a02:	18fb      	adds	r3, r7, r3
    8a04:	2200      	movs	r2, #0
    8a06:	721a      	strb	r2, [r3, #8]
    8a08:	2364      	movs	r3, #100	; 0x64
    8a0a:	18fb      	adds	r3, r7, r3
    8a0c:	2200      	movs	r2, #0
    8a0e:	725a      	strb	r2, [r3, #9]
    8a10:	2364      	movs	r3, #100	; 0x64
    8a12:	18fb      	adds	r3, r7, r3
    8a14:	0019      	movs	r1, r3
    8a16:	2001      	movs	r0, #1
    8a18:	4b36      	ldr	r3, [pc, #216]	; (8af4 <system_clock_init+0x260>)
    8a1a:	4798      	blx	r3
    8a1c:	2001      	movs	r0, #1
    8a1e:	4b36      	ldr	r3, [pc, #216]	; (8af8 <system_clock_init+0x264>)
    8a20:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    8a22:	230c      	movs	r3, #12
    8a24:	18fb      	adds	r3, r7, r3
    8a26:	0018      	movs	r0, r3
    8a28:	4b34      	ldr	r3, [pc, #208]	; (8afc <system_clock_init+0x268>)
    8a2a:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    8a2c:	230c      	movs	r3, #12
    8a2e:	18fb      	adds	r3, r7, r3
    8a30:	2201      	movs	r2, #1
    8a32:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    8a34:	230c      	movs	r3, #12
    8a36:	18fb      	adds	r3, r7, r3
    8a38:	0019      	movs	r1, r3
    8a3a:	2000      	movs	r0, #0
    8a3c:	4b30      	ldr	r3, [pc, #192]	; (8b00 <system_clock_init+0x26c>)
    8a3e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    8a40:	2000      	movs	r0, #0
    8a42:	4b30      	ldr	r3, [pc, #192]	; (8b04 <system_clock_init+0x270>)
    8a44:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    8a46:	2007      	movs	r0, #7
    8a48:	4b20      	ldr	r3, [pc, #128]	; (8acc <system_clock_init+0x238>)
    8a4a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    8a4c:	46c0      	nop			; (mov r8, r8)
    8a4e:	2007      	movs	r0, #7
    8a50:	4b1f      	ldr	r3, [pc, #124]	; (8ad0 <system_clock_init+0x23c>)
    8a52:	4798      	blx	r3
    8a54:	0003      	movs	r3, r0
    8a56:	001a      	movs	r2, r3
    8a58:	2301      	movs	r3, #1
    8a5a:	4053      	eors	r3, r2
    8a5c:	b2db      	uxtb	r3, r3
    8a5e:	2b00      	cmp	r3, #0
    8a60:	d1f5      	bne.n	8a4e <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    8a62:	2000      	movs	r0, #0
    8a64:	4b28      	ldr	r3, [pc, #160]	; (8b08 <system_clock_init+0x274>)
    8a66:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    8a68:	2100      	movs	r1, #0
    8a6a:	2000      	movs	r0, #0
    8a6c:	4b27      	ldr	r3, [pc, #156]	; (8b0c <system_clock_init+0x278>)
    8a6e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    8a70:	2100      	movs	r1, #0
    8a72:	2001      	movs	r0, #1
    8a74:	4b25      	ldr	r3, [pc, #148]	; (8b0c <system_clock_init+0x278>)
    8a76:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    8a78:	2100      	movs	r1, #0
    8a7a:	2002      	movs	r0, #2
    8a7c:	4b23      	ldr	r3, [pc, #140]	; (8b0c <system_clock_init+0x278>)
    8a7e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    8a80:	003b      	movs	r3, r7
    8a82:	0018      	movs	r0, r3
    8a84:	4b1a      	ldr	r3, [pc, #104]	; (8af0 <system_clock_init+0x25c>)
    8a86:	4798      	blx	r3
    8a88:	003b      	movs	r3, r7
    8a8a:	2207      	movs	r2, #7
    8a8c:	701a      	strb	r2, [r3, #0]
    8a8e:	003b      	movs	r3, r7
    8a90:	2201      	movs	r2, #1
    8a92:	605a      	str	r2, [r3, #4]
    8a94:	003b      	movs	r3, r7
    8a96:	2200      	movs	r2, #0
    8a98:	721a      	strb	r2, [r3, #8]
    8a9a:	003b      	movs	r3, r7
    8a9c:	2200      	movs	r2, #0
    8a9e:	725a      	strb	r2, [r3, #9]
    8aa0:	003b      	movs	r3, r7
    8aa2:	0019      	movs	r1, r3
    8aa4:	2000      	movs	r0, #0
    8aa6:	4b13      	ldr	r3, [pc, #76]	; (8af4 <system_clock_init+0x260>)
    8aa8:	4798      	blx	r3
    8aaa:	2000      	movs	r0, #0
    8aac:	4b12      	ldr	r3, [pc, #72]	; (8af8 <system_clock_init+0x264>)
    8aae:	4798      	blx	r3
#endif
}
    8ab0:	46c0      	nop			; (mov r8, r8)
    8ab2:	46bd      	mov	sp, r7
    8ab4:	b02a      	add	sp, #168	; 0xa8
    8ab6:	bd80      	pop	{r7, pc}
    8ab8:	40000800 	.word	0x40000800
    8abc:	00008375 	.word	0x00008375
    8ac0:	0000885d 	.word	0x0000885d
    8ac4:	00008241 	.word	0x00008241
    8ac8:	0000853d 	.word	0x0000853d
    8acc:	0000872d 	.word	0x0000872d
    8ad0:	000087d9 	.word	0x000087d9
    8ad4:	000082ad 	.word	0x000082ad
    8ad8:	00806024 	.word	0x00806024
    8adc:	000005b9 	.word	0x000005b9
    8ae0:	0000865d 	.word	0x0000865d
    8ae4:	00008289 	.word	0x00008289
    8ae8:	000084c5 	.word	0x000084c5
    8aec:	00008bb5 	.word	0x00008bb5
    8af0:	000081f9 	.word	0x000081f9
    8af4:	00008be5 	.word	0x00008be5
    8af8:	00008d09 	.word	0x00008d09
    8afc:	00008229 	.word	0x00008229
    8b00:	00008e3d 	.word	0x00008e3d
    8b04:	00008e81 	.word	0x00008e81
    8b08:	00008301 	.word	0x00008301
    8b0c:	00008321 	.word	0x00008321

00008b10 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    8b10:	b580      	push	{r7, lr}
    8b12:	b082      	sub	sp, #8
    8b14:	af00      	add	r7, sp, #0
    8b16:	0002      	movs	r2, r0
    8b18:	6039      	str	r1, [r7, #0]
    8b1a:	1dfb      	adds	r3, r7, #7
    8b1c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8b1e:	1dfb      	adds	r3, r7, #7
    8b20:	781b      	ldrb	r3, [r3, #0]
    8b22:	2b01      	cmp	r3, #1
    8b24:	d00a      	beq.n	8b3c <system_apb_clock_set_mask+0x2c>
    8b26:	2b02      	cmp	r3, #2
    8b28:	d00f      	beq.n	8b4a <system_apb_clock_set_mask+0x3a>
    8b2a:	2b00      	cmp	r3, #0
    8b2c:	d114      	bne.n	8b58 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    8b2e:	4b0e      	ldr	r3, [pc, #56]	; (8b68 <system_apb_clock_set_mask+0x58>)
    8b30:	4a0d      	ldr	r2, [pc, #52]	; (8b68 <system_apb_clock_set_mask+0x58>)
    8b32:	6991      	ldr	r1, [r2, #24]
    8b34:	683a      	ldr	r2, [r7, #0]
    8b36:	430a      	orrs	r2, r1
    8b38:	619a      	str	r2, [r3, #24]
			break;
    8b3a:	e00f      	b.n	8b5c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    8b3c:	4b0a      	ldr	r3, [pc, #40]	; (8b68 <system_apb_clock_set_mask+0x58>)
    8b3e:	4a0a      	ldr	r2, [pc, #40]	; (8b68 <system_apb_clock_set_mask+0x58>)
    8b40:	69d1      	ldr	r1, [r2, #28]
    8b42:	683a      	ldr	r2, [r7, #0]
    8b44:	430a      	orrs	r2, r1
    8b46:	61da      	str	r2, [r3, #28]
			break;
    8b48:	e008      	b.n	8b5c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    8b4a:	4b07      	ldr	r3, [pc, #28]	; (8b68 <system_apb_clock_set_mask+0x58>)
    8b4c:	4a06      	ldr	r2, [pc, #24]	; (8b68 <system_apb_clock_set_mask+0x58>)
    8b4e:	6a11      	ldr	r1, [r2, #32]
    8b50:	683a      	ldr	r2, [r7, #0]
    8b52:	430a      	orrs	r2, r1
    8b54:	621a      	str	r2, [r3, #32]
			break;
    8b56:	e001      	b.n	8b5c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8b58:	2317      	movs	r3, #23
    8b5a:	e000      	b.n	8b5e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    8b5c:	2300      	movs	r3, #0
}
    8b5e:	0018      	movs	r0, r3
    8b60:	46bd      	mov	sp, r7
    8b62:	b002      	add	sp, #8
    8b64:	bd80      	pop	{r7, pc}
    8b66:	46c0      	nop			; (mov r8, r8)
    8b68:	40000400 	.word	0x40000400

00008b6c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    8b6c:	b580      	push	{r7, lr}
    8b6e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    8b70:	4b02      	ldr	r3, [pc, #8]	; (8b7c <system_interrupt_enter_critical_section+0x10>)
    8b72:	4798      	blx	r3
}
    8b74:	46c0      	nop			; (mov r8, r8)
    8b76:	46bd      	mov	sp, r7
    8b78:	bd80      	pop	{r7, pc}
    8b7a:	46c0      	nop			; (mov r8, r8)
    8b7c:	00005b21 	.word	0x00005b21

00008b80 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    8b80:	b580      	push	{r7, lr}
    8b82:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    8b84:	4b02      	ldr	r3, [pc, #8]	; (8b90 <system_interrupt_leave_critical_section+0x10>)
    8b86:	4798      	blx	r3
}
    8b88:	46c0      	nop			; (mov r8, r8)
    8b8a:	46bd      	mov	sp, r7
    8b8c:	bd80      	pop	{r7, pc}
    8b8e:	46c0      	nop			; (mov r8, r8)
    8b90:	00005b75 	.word	0x00005b75

00008b94 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    8b94:	b580      	push	{r7, lr}
    8b96:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8b98:	4b05      	ldr	r3, [pc, #20]	; (8bb0 <system_gclk_is_syncing+0x1c>)
    8b9a:	785b      	ldrb	r3, [r3, #1]
    8b9c:	b2db      	uxtb	r3, r3
    8b9e:	b25b      	sxtb	r3, r3
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	da01      	bge.n	8ba8 <system_gclk_is_syncing+0x14>
		return true;
    8ba4:	2301      	movs	r3, #1
    8ba6:	e000      	b.n	8baa <system_gclk_is_syncing+0x16>
	}

	return false;
    8ba8:	2300      	movs	r3, #0
}
    8baa:	0018      	movs	r0, r3
    8bac:	46bd      	mov	sp, r7
    8bae:	bd80      	pop	{r7, pc}
    8bb0:	40000c00 	.word	0x40000c00

00008bb4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    8bb4:	b580      	push	{r7, lr}
    8bb6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    8bb8:	2108      	movs	r1, #8
    8bba:	2000      	movs	r0, #0
    8bbc:	4b07      	ldr	r3, [pc, #28]	; (8bdc <system_gclk_init+0x28>)
    8bbe:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    8bc0:	4b07      	ldr	r3, [pc, #28]	; (8be0 <system_gclk_init+0x2c>)
    8bc2:	2201      	movs	r2, #1
    8bc4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8bc6:	46c0      	nop			; (mov r8, r8)
    8bc8:	4b05      	ldr	r3, [pc, #20]	; (8be0 <system_gclk_init+0x2c>)
    8bca:	781b      	ldrb	r3, [r3, #0]
    8bcc:	b2db      	uxtb	r3, r3
    8bce:	001a      	movs	r2, r3
    8bd0:	2301      	movs	r3, #1
    8bd2:	4013      	ands	r3, r2
    8bd4:	d1f8      	bne.n	8bc8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    8bd6:	46c0      	nop			; (mov r8, r8)
    8bd8:	46bd      	mov	sp, r7
    8bda:	bd80      	pop	{r7, pc}
    8bdc:	00008b11 	.word	0x00008b11
    8be0:	40000c00 	.word	0x40000c00

00008be4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8be4:	b580      	push	{r7, lr}
    8be6:	b086      	sub	sp, #24
    8be8:	af00      	add	r7, sp, #0
    8bea:	0002      	movs	r2, r0
    8bec:	6039      	str	r1, [r7, #0]
    8bee:	1dfb      	adds	r3, r7, #7
    8bf0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    8bf2:	1dfb      	adds	r3, r7, #7
    8bf4:	781b      	ldrb	r3, [r3, #0]
    8bf6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    8bf8:	1dfb      	adds	r3, r7, #7
    8bfa:	781b      	ldrb	r3, [r3, #0]
    8bfc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    8bfe:	683b      	ldr	r3, [r7, #0]
    8c00:	781b      	ldrb	r3, [r3, #0]
    8c02:	021b      	lsls	r3, r3, #8
    8c04:	001a      	movs	r2, r3
    8c06:	697b      	ldr	r3, [r7, #20]
    8c08:	4313      	orrs	r3, r2
    8c0a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    8c0c:	683b      	ldr	r3, [r7, #0]
    8c0e:	785b      	ldrb	r3, [r3, #1]
    8c10:	2b00      	cmp	r3, #0
    8c12:	d004      	beq.n	8c1e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    8c14:	697b      	ldr	r3, [r7, #20]
    8c16:	2280      	movs	r2, #128	; 0x80
    8c18:	02d2      	lsls	r2, r2, #11
    8c1a:	4313      	orrs	r3, r2
    8c1c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    8c1e:	683b      	ldr	r3, [r7, #0]
    8c20:	7a5b      	ldrb	r3, [r3, #9]
    8c22:	2b00      	cmp	r3, #0
    8c24:	d004      	beq.n	8c30 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    8c26:	697b      	ldr	r3, [r7, #20]
    8c28:	2280      	movs	r2, #128	; 0x80
    8c2a:	0312      	lsls	r2, r2, #12
    8c2c:	4313      	orrs	r3, r2
    8c2e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    8c30:	683b      	ldr	r3, [r7, #0]
    8c32:	685b      	ldr	r3, [r3, #4]
    8c34:	2b01      	cmp	r3, #1
    8c36:	d92c      	bls.n	8c92 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    8c38:	683b      	ldr	r3, [r7, #0]
    8c3a:	685a      	ldr	r2, [r3, #4]
    8c3c:	683b      	ldr	r3, [r7, #0]
    8c3e:	685b      	ldr	r3, [r3, #4]
    8c40:	3b01      	subs	r3, #1
    8c42:	4013      	ands	r3, r2
    8c44:	d11a      	bne.n	8c7c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    8c46:	2300      	movs	r3, #0
    8c48:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8c4a:	2302      	movs	r3, #2
    8c4c:	60bb      	str	r3, [r7, #8]
    8c4e:	e005      	b.n	8c5c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    8c50:	68fb      	ldr	r3, [r7, #12]
    8c52:	3301      	adds	r3, #1
    8c54:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    8c56:	68bb      	ldr	r3, [r7, #8]
    8c58:	005b      	lsls	r3, r3, #1
    8c5a:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    8c5c:	683b      	ldr	r3, [r7, #0]
    8c5e:	685a      	ldr	r2, [r3, #4]
    8c60:	68bb      	ldr	r3, [r7, #8]
    8c62:	429a      	cmp	r2, r3
    8c64:	d8f4      	bhi.n	8c50 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    8c66:	68fb      	ldr	r3, [r7, #12]
    8c68:	021b      	lsls	r3, r3, #8
    8c6a:	693a      	ldr	r2, [r7, #16]
    8c6c:	4313      	orrs	r3, r2
    8c6e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    8c70:	697b      	ldr	r3, [r7, #20]
    8c72:	2280      	movs	r2, #128	; 0x80
    8c74:	0352      	lsls	r2, r2, #13
    8c76:	4313      	orrs	r3, r2
    8c78:	617b      	str	r3, [r7, #20]
    8c7a:	e00a      	b.n	8c92 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    8c7c:	683b      	ldr	r3, [r7, #0]
    8c7e:	685b      	ldr	r3, [r3, #4]
    8c80:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    8c82:	693a      	ldr	r2, [r7, #16]
    8c84:	4313      	orrs	r3, r2
    8c86:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8c88:	697b      	ldr	r3, [r7, #20]
    8c8a:	2280      	movs	r2, #128	; 0x80
    8c8c:	0292      	lsls	r2, r2, #10
    8c8e:	4313      	orrs	r3, r2
    8c90:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8c92:	683b      	ldr	r3, [r7, #0]
    8c94:	7a1b      	ldrb	r3, [r3, #8]
    8c96:	2b00      	cmp	r3, #0
    8c98:	d004      	beq.n	8ca4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8c9a:	697b      	ldr	r3, [r7, #20]
    8c9c:	2280      	movs	r2, #128	; 0x80
    8c9e:	0392      	lsls	r2, r2, #14
    8ca0:	4313      	orrs	r3, r2
    8ca2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    8ca4:	46c0      	nop			; (mov r8, r8)
    8ca6:	4b13      	ldr	r3, [pc, #76]	; (8cf4 <system_gclk_gen_set_config+0x110>)
    8ca8:	4798      	blx	r3
    8caa:	1e03      	subs	r3, r0, #0
    8cac:	d1fb      	bne.n	8ca6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    8cae:	4b12      	ldr	r3, [pc, #72]	; (8cf8 <system_gclk_gen_set_config+0x114>)
    8cb0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8cb2:	4a12      	ldr	r2, [pc, #72]	; (8cfc <system_gclk_gen_set_config+0x118>)
    8cb4:	1dfb      	adds	r3, r7, #7
    8cb6:	781b      	ldrb	r3, [r3, #0]
    8cb8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    8cba:	46c0      	nop			; (mov r8, r8)
    8cbc:	4b0d      	ldr	r3, [pc, #52]	; (8cf4 <system_gclk_gen_set_config+0x110>)
    8cbe:	4798      	blx	r3
    8cc0:	1e03      	subs	r3, r0, #0
    8cc2:	d1fb      	bne.n	8cbc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8cc4:	4b0e      	ldr	r3, [pc, #56]	; (8d00 <system_gclk_gen_set_config+0x11c>)
    8cc6:	693a      	ldr	r2, [r7, #16]
    8cc8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    8cca:	46c0      	nop			; (mov r8, r8)
    8ccc:	4b09      	ldr	r3, [pc, #36]	; (8cf4 <system_gclk_gen_set_config+0x110>)
    8cce:	4798      	blx	r3
    8cd0:	1e03      	subs	r3, r0, #0
    8cd2:	d1fb      	bne.n	8ccc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8cd4:	4b0a      	ldr	r3, [pc, #40]	; (8d00 <system_gclk_gen_set_config+0x11c>)
    8cd6:	4a0a      	ldr	r2, [pc, #40]	; (8d00 <system_gclk_gen_set_config+0x11c>)
    8cd8:	6851      	ldr	r1, [r2, #4]
    8cda:	2280      	movs	r2, #128	; 0x80
    8cdc:	0252      	lsls	r2, r2, #9
    8cde:	4011      	ands	r1, r2
    8ce0:	697a      	ldr	r2, [r7, #20]
    8ce2:	430a      	orrs	r2, r1
    8ce4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    8ce6:	4b07      	ldr	r3, [pc, #28]	; (8d04 <system_gclk_gen_set_config+0x120>)
    8ce8:	4798      	blx	r3
}
    8cea:	46c0      	nop			; (mov r8, r8)
    8cec:	46bd      	mov	sp, r7
    8cee:	b006      	add	sp, #24
    8cf0:	bd80      	pop	{r7, pc}
    8cf2:	46c0      	nop			; (mov r8, r8)
    8cf4:	00008b95 	.word	0x00008b95
    8cf8:	00008b6d 	.word	0x00008b6d
    8cfc:	40000c08 	.word	0x40000c08
    8d00:	40000c00 	.word	0x40000c00
    8d04:	00008b81 	.word	0x00008b81

00008d08 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    8d08:	b580      	push	{r7, lr}
    8d0a:	b082      	sub	sp, #8
    8d0c:	af00      	add	r7, sp, #0
    8d0e:	0002      	movs	r2, r0
    8d10:	1dfb      	adds	r3, r7, #7
    8d12:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    8d14:	46c0      	nop			; (mov r8, r8)
    8d16:	4b0e      	ldr	r3, [pc, #56]	; (8d50 <system_gclk_gen_enable+0x48>)
    8d18:	4798      	blx	r3
    8d1a:	1e03      	subs	r3, r0, #0
    8d1c:	d1fb      	bne.n	8d16 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    8d1e:	4b0d      	ldr	r3, [pc, #52]	; (8d54 <system_gclk_gen_enable+0x4c>)
    8d20:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8d22:	4a0d      	ldr	r2, [pc, #52]	; (8d58 <system_gclk_gen_enable+0x50>)
    8d24:	1dfb      	adds	r3, r7, #7
    8d26:	781b      	ldrb	r3, [r3, #0]
    8d28:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    8d2a:	46c0      	nop			; (mov r8, r8)
    8d2c:	4b08      	ldr	r3, [pc, #32]	; (8d50 <system_gclk_gen_enable+0x48>)
    8d2e:	4798      	blx	r3
    8d30:	1e03      	subs	r3, r0, #0
    8d32:	d1fb      	bne.n	8d2c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    8d34:	4b09      	ldr	r3, [pc, #36]	; (8d5c <system_gclk_gen_enable+0x54>)
    8d36:	4a09      	ldr	r2, [pc, #36]	; (8d5c <system_gclk_gen_enable+0x54>)
    8d38:	6852      	ldr	r2, [r2, #4]
    8d3a:	2180      	movs	r1, #128	; 0x80
    8d3c:	0249      	lsls	r1, r1, #9
    8d3e:	430a      	orrs	r2, r1
    8d40:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    8d42:	4b07      	ldr	r3, [pc, #28]	; (8d60 <system_gclk_gen_enable+0x58>)
    8d44:	4798      	blx	r3
}
    8d46:	46c0      	nop			; (mov r8, r8)
    8d48:	46bd      	mov	sp, r7
    8d4a:	b002      	add	sp, #8
    8d4c:	bd80      	pop	{r7, pc}
    8d4e:	46c0      	nop			; (mov r8, r8)
    8d50:	00008b95 	.word	0x00008b95
    8d54:	00008b6d 	.word	0x00008b6d
    8d58:	40000c04 	.word	0x40000c04
    8d5c:	40000c00 	.word	0x40000c00
    8d60:	00008b81 	.word	0x00008b81

00008d64 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    8d64:	b580      	push	{r7, lr}
    8d66:	b086      	sub	sp, #24
    8d68:	af00      	add	r7, sp, #0
    8d6a:	0002      	movs	r2, r0
    8d6c:	1dfb      	adds	r3, r7, #7
    8d6e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    8d70:	46c0      	nop			; (mov r8, r8)
    8d72:	4b2a      	ldr	r3, [pc, #168]	; (8e1c <system_gclk_gen_get_hz+0xb8>)
    8d74:	4798      	blx	r3
    8d76:	1e03      	subs	r3, r0, #0
    8d78:	d1fb      	bne.n	8d72 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    8d7a:	4b29      	ldr	r3, [pc, #164]	; (8e20 <system_gclk_gen_get_hz+0xbc>)
    8d7c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8d7e:	4a29      	ldr	r2, [pc, #164]	; (8e24 <system_gclk_gen_get_hz+0xc0>)
    8d80:	1dfb      	adds	r3, r7, #7
    8d82:	781b      	ldrb	r3, [r3, #0]
    8d84:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    8d86:	46c0      	nop			; (mov r8, r8)
    8d88:	4b24      	ldr	r3, [pc, #144]	; (8e1c <system_gclk_gen_get_hz+0xb8>)
    8d8a:	4798      	blx	r3
    8d8c:	1e03      	subs	r3, r0, #0
    8d8e:	d1fb      	bne.n	8d88 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    8d90:	4b25      	ldr	r3, [pc, #148]	; (8e28 <system_gclk_gen_get_hz+0xc4>)
    8d92:	685b      	ldr	r3, [r3, #4]
    8d94:	04db      	lsls	r3, r3, #19
    8d96:	0edb      	lsrs	r3, r3, #27
    8d98:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    8d9a:	0018      	movs	r0, r3
    8d9c:	4b23      	ldr	r3, [pc, #140]	; (8e2c <system_gclk_gen_get_hz+0xc8>)
    8d9e:	4798      	blx	r3
    8da0:	0003      	movs	r3, r0
    8da2:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    8da4:	4a1f      	ldr	r2, [pc, #124]	; (8e24 <system_gclk_gen_get_hz+0xc0>)
    8da6:	1dfb      	adds	r3, r7, #7
    8da8:	781b      	ldrb	r3, [r3, #0]
    8daa:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    8dac:	4b1e      	ldr	r3, [pc, #120]	; (8e28 <system_gclk_gen_get_hz+0xc4>)
    8dae:	685b      	ldr	r3, [r3, #4]
    8db0:	02db      	lsls	r3, r3, #11
    8db2:	0fdb      	lsrs	r3, r3, #31
    8db4:	b2da      	uxtb	r2, r3
    8db6:	2313      	movs	r3, #19
    8db8:	18fb      	adds	r3, r7, r3
    8dba:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    8dbc:	4a1c      	ldr	r2, [pc, #112]	; (8e30 <system_gclk_gen_get_hz+0xcc>)
    8dbe:	1dfb      	adds	r3, r7, #7
    8dc0:	781b      	ldrb	r3, [r3, #0]
    8dc2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    8dc4:	46c0      	nop			; (mov r8, r8)
    8dc6:	4b15      	ldr	r3, [pc, #84]	; (8e1c <system_gclk_gen_get_hz+0xb8>)
    8dc8:	4798      	blx	r3
    8dca:	1e03      	subs	r3, r0, #0
    8dcc:	d1fb      	bne.n	8dc6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    8dce:	4b16      	ldr	r3, [pc, #88]	; (8e28 <system_gclk_gen_get_hz+0xc4>)
    8dd0:	689b      	ldr	r3, [r3, #8]
    8dd2:	021b      	lsls	r3, r3, #8
    8dd4:	0c1b      	lsrs	r3, r3, #16
    8dd6:	b29b      	uxth	r3, r3
    8dd8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    8dda:	4b16      	ldr	r3, [pc, #88]	; (8e34 <system_gclk_gen_get_hz+0xd0>)
    8ddc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    8dde:	2313      	movs	r3, #19
    8de0:	18fb      	adds	r3, r7, r3
    8de2:	781b      	ldrb	r3, [r3, #0]
    8de4:	2b00      	cmp	r3, #0
    8de6:	d109      	bne.n	8dfc <system_gclk_gen_get_hz+0x98>
    8de8:	68fb      	ldr	r3, [r7, #12]
    8dea:	2b01      	cmp	r3, #1
    8dec:	d906      	bls.n	8dfc <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    8dee:	4b12      	ldr	r3, [pc, #72]	; (8e38 <system_gclk_gen_get_hz+0xd4>)
    8df0:	68f9      	ldr	r1, [r7, #12]
    8df2:	6978      	ldr	r0, [r7, #20]
    8df4:	4798      	blx	r3
    8df6:	0003      	movs	r3, r0
    8df8:	617b      	str	r3, [r7, #20]
    8dfa:	e00a      	b.n	8e12 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    8dfc:	2313      	movs	r3, #19
    8dfe:	18fb      	adds	r3, r7, r3
    8e00:	781b      	ldrb	r3, [r3, #0]
    8e02:	2b00      	cmp	r3, #0
    8e04:	d005      	beq.n	8e12 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    8e06:	68fb      	ldr	r3, [r7, #12]
    8e08:	3301      	adds	r3, #1
    8e0a:	697a      	ldr	r2, [r7, #20]
    8e0c:	40da      	lsrs	r2, r3
    8e0e:	0013      	movs	r3, r2
    8e10:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    8e12:	697b      	ldr	r3, [r7, #20]
}
    8e14:	0018      	movs	r0, r3
    8e16:	46bd      	mov	sp, r7
    8e18:	b006      	add	sp, #24
    8e1a:	bd80      	pop	{r7, pc}
    8e1c:	00008b95 	.word	0x00008b95
    8e20:	00008b6d 	.word	0x00008b6d
    8e24:	40000c04 	.word	0x40000c04
    8e28:	40000c00 	.word	0x40000c00
    8e2c:	00008409 	.word	0x00008409
    8e30:	40000c08 	.word	0x40000c08
    8e34:	00008b81 	.word	0x00008b81
    8e38:	0000bf39 	.word	0x0000bf39

00008e3c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    8e3c:	b580      	push	{r7, lr}
    8e3e:	b084      	sub	sp, #16
    8e40:	af00      	add	r7, sp, #0
    8e42:	0002      	movs	r2, r0
    8e44:	6039      	str	r1, [r7, #0]
    8e46:	1dfb      	adds	r3, r7, #7
    8e48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    8e4a:	1dfb      	adds	r3, r7, #7
    8e4c:	781b      	ldrb	r3, [r3, #0]
    8e4e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    8e50:	683b      	ldr	r3, [r7, #0]
    8e52:	781b      	ldrb	r3, [r3, #0]
    8e54:	021b      	lsls	r3, r3, #8
    8e56:	001a      	movs	r2, r3
    8e58:	68fb      	ldr	r3, [r7, #12]
    8e5a:	4313      	orrs	r3, r2
    8e5c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    8e5e:	1dfb      	adds	r3, r7, #7
    8e60:	781b      	ldrb	r3, [r3, #0]
    8e62:	0018      	movs	r0, r3
    8e64:	4b04      	ldr	r3, [pc, #16]	; (8e78 <system_gclk_chan_set_config+0x3c>)
    8e66:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    8e68:	4b04      	ldr	r3, [pc, #16]	; (8e7c <system_gclk_chan_set_config+0x40>)
    8e6a:	68fa      	ldr	r2, [r7, #12]
    8e6c:	b292      	uxth	r2, r2
    8e6e:	805a      	strh	r2, [r3, #2]
}
    8e70:	46c0      	nop			; (mov r8, r8)
    8e72:	46bd      	mov	sp, r7
    8e74:	b004      	add	sp, #16
    8e76:	bd80      	pop	{r7, pc}
    8e78:	00008ec9 	.word	0x00008ec9
    8e7c:	40000c00 	.word	0x40000c00

00008e80 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    8e80:	b580      	push	{r7, lr}
    8e82:	b082      	sub	sp, #8
    8e84:	af00      	add	r7, sp, #0
    8e86:	0002      	movs	r2, r0
    8e88:	1dfb      	adds	r3, r7, #7
    8e8a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    8e8c:	4b0a      	ldr	r3, [pc, #40]	; (8eb8 <system_gclk_chan_enable+0x38>)
    8e8e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8e90:	4a0a      	ldr	r2, [pc, #40]	; (8ebc <system_gclk_chan_enable+0x3c>)
    8e92:	1dfb      	adds	r3, r7, #7
    8e94:	781b      	ldrb	r3, [r3, #0]
    8e96:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8e98:	4909      	ldr	r1, [pc, #36]	; (8ec0 <system_gclk_chan_enable+0x40>)
    8e9a:	4b09      	ldr	r3, [pc, #36]	; (8ec0 <system_gclk_chan_enable+0x40>)
    8e9c:	885b      	ldrh	r3, [r3, #2]
    8e9e:	b29b      	uxth	r3, r3
    8ea0:	2280      	movs	r2, #128	; 0x80
    8ea2:	01d2      	lsls	r2, r2, #7
    8ea4:	4313      	orrs	r3, r2
    8ea6:	b29b      	uxth	r3, r3
    8ea8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    8eaa:	4b06      	ldr	r3, [pc, #24]	; (8ec4 <system_gclk_chan_enable+0x44>)
    8eac:	4798      	blx	r3
}
    8eae:	46c0      	nop			; (mov r8, r8)
    8eb0:	46bd      	mov	sp, r7
    8eb2:	b002      	add	sp, #8
    8eb4:	bd80      	pop	{r7, pc}
    8eb6:	46c0      	nop			; (mov r8, r8)
    8eb8:	00008b6d 	.word	0x00008b6d
    8ebc:	40000c02 	.word	0x40000c02
    8ec0:	40000c00 	.word	0x40000c00
    8ec4:	00008b81 	.word	0x00008b81

00008ec8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8ec8:	b580      	push	{r7, lr}
    8eca:	b084      	sub	sp, #16
    8ecc:	af00      	add	r7, sp, #0
    8ece:	0002      	movs	r2, r0
    8ed0:	1dfb      	adds	r3, r7, #7
    8ed2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    8ed4:	4b1c      	ldr	r3, [pc, #112]	; (8f48 <system_gclk_chan_disable+0x80>)
    8ed6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8ed8:	4a1c      	ldr	r2, [pc, #112]	; (8f4c <system_gclk_chan_disable+0x84>)
    8eda:	1dfb      	adds	r3, r7, #7
    8edc:	781b      	ldrb	r3, [r3, #0]
    8ede:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8ee0:	4b1b      	ldr	r3, [pc, #108]	; (8f50 <system_gclk_chan_disable+0x88>)
    8ee2:	885b      	ldrh	r3, [r3, #2]
    8ee4:	051b      	lsls	r3, r3, #20
    8ee6:	0f1b      	lsrs	r3, r3, #28
    8ee8:	b2db      	uxtb	r3, r3
    8eea:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    8eec:	4a18      	ldr	r2, [pc, #96]	; (8f50 <system_gclk_chan_disable+0x88>)
    8eee:	8853      	ldrh	r3, [r2, #2]
    8ef0:	4918      	ldr	r1, [pc, #96]	; (8f54 <system_gclk_chan_disable+0x8c>)
    8ef2:	400b      	ands	r3, r1
    8ef4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8ef6:	4a16      	ldr	r2, [pc, #88]	; (8f50 <system_gclk_chan_disable+0x88>)
    8ef8:	4b15      	ldr	r3, [pc, #84]	; (8f50 <system_gclk_chan_disable+0x88>)
    8efa:	885b      	ldrh	r3, [r3, #2]
    8efc:	b29b      	uxth	r3, r3
    8efe:	4916      	ldr	r1, [pc, #88]	; (8f58 <system_gclk_chan_disable+0x90>)
    8f00:	400b      	ands	r3, r1
    8f02:	b29b      	uxth	r3, r3
    8f04:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8f06:	46c0      	nop			; (mov r8, r8)
    8f08:	4b11      	ldr	r3, [pc, #68]	; (8f50 <system_gclk_chan_disable+0x88>)
    8f0a:	885b      	ldrh	r3, [r3, #2]
    8f0c:	b29b      	uxth	r3, r3
    8f0e:	001a      	movs	r2, r3
    8f10:	2380      	movs	r3, #128	; 0x80
    8f12:	01db      	lsls	r3, r3, #7
    8f14:	4013      	ands	r3, r2
    8f16:	d1f7      	bne.n	8f08 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    8f18:	4a0d      	ldr	r2, [pc, #52]	; (8f50 <system_gclk_chan_disable+0x88>)
    8f1a:	68fb      	ldr	r3, [r7, #12]
    8f1c:	b2db      	uxtb	r3, r3
    8f1e:	1c19      	adds	r1, r3, #0
    8f20:	230f      	movs	r3, #15
    8f22:	400b      	ands	r3, r1
    8f24:	b2d9      	uxtb	r1, r3
    8f26:	8853      	ldrh	r3, [r2, #2]
    8f28:	1c08      	adds	r0, r1, #0
    8f2a:	210f      	movs	r1, #15
    8f2c:	4001      	ands	r1, r0
    8f2e:	0208      	lsls	r0, r1, #8
    8f30:	4908      	ldr	r1, [pc, #32]	; (8f54 <system_gclk_chan_disable+0x8c>)
    8f32:	400b      	ands	r3, r1
    8f34:	1c19      	adds	r1, r3, #0
    8f36:	1c03      	adds	r3, r0, #0
    8f38:	430b      	orrs	r3, r1
    8f3a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    8f3c:	4b07      	ldr	r3, [pc, #28]	; (8f5c <system_gclk_chan_disable+0x94>)
    8f3e:	4798      	blx	r3
}
    8f40:	46c0      	nop			; (mov r8, r8)
    8f42:	46bd      	mov	sp, r7
    8f44:	b004      	add	sp, #16
    8f46:	bd80      	pop	{r7, pc}
    8f48:	00008b6d 	.word	0x00008b6d
    8f4c:	40000c02 	.word	0x40000c02
    8f50:	40000c00 	.word	0x40000c00
    8f54:	fffff0ff 	.word	0xfffff0ff
    8f58:	ffffbfff 	.word	0xffffbfff
    8f5c:	00008b81 	.word	0x00008b81

00008f60 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    8f60:	b580      	push	{r7, lr}
    8f62:	b084      	sub	sp, #16
    8f64:	af00      	add	r7, sp, #0
    8f66:	0002      	movs	r2, r0
    8f68:	1dfb      	adds	r3, r7, #7
    8f6a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    8f6c:	4b0d      	ldr	r3, [pc, #52]	; (8fa4 <system_gclk_chan_get_hz+0x44>)
    8f6e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8f70:	4a0d      	ldr	r2, [pc, #52]	; (8fa8 <system_gclk_chan_get_hz+0x48>)
    8f72:	1dfb      	adds	r3, r7, #7
    8f74:	781b      	ldrb	r3, [r3, #0]
    8f76:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    8f78:	4b0c      	ldr	r3, [pc, #48]	; (8fac <system_gclk_chan_get_hz+0x4c>)
    8f7a:	885b      	ldrh	r3, [r3, #2]
    8f7c:	051b      	lsls	r3, r3, #20
    8f7e:	0f1b      	lsrs	r3, r3, #28
    8f80:	b2da      	uxtb	r2, r3
    8f82:	230f      	movs	r3, #15
    8f84:	18fb      	adds	r3, r7, r3
    8f86:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    8f88:	4b09      	ldr	r3, [pc, #36]	; (8fb0 <system_gclk_chan_get_hz+0x50>)
    8f8a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8f8c:	230f      	movs	r3, #15
    8f8e:	18fb      	adds	r3, r7, r3
    8f90:	781b      	ldrb	r3, [r3, #0]
    8f92:	0018      	movs	r0, r3
    8f94:	4b07      	ldr	r3, [pc, #28]	; (8fb4 <system_gclk_chan_get_hz+0x54>)
    8f96:	4798      	blx	r3
    8f98:	0003      	movs	r3, r0
}
    8f9a:	0018      	movs	r0, r3
    8f9c:	46bd      	mov	sp, r7
    8f9e:	b004      	add	sp, #16
    8fa0:	bd80      	pop	{r7, pc}
    8fa2:	46c0      	nop			; (mov r8, r8)
    8fa4:	00008b6d 	.word	0x00008b6d
    8fa8:	40000c02 	.word	0x40000c02
    8fac:	40000c00 	.word	0x40000c00
    8fb0:	00008b81 	.word	0x00008b81
    8fb4:	00008d65 	.word	0x00008d65

00008fb8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8fb8:	b580      	push	{r7, lr}
    8fba:	b084      	sub	sp, #16
    8fbc:	af00      	add	r7, sp, #0
    8fbe:	0002      	movs	r2, r0
    8fc0:	1dfb      	adds	r3, r7, #7
    8fc2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8fc4:	230f      	movs	r3, #15
    8fc6:	18fb      	adds	r3, r7, r3
    8fc8:	1dfa      	adds	r2, r7, #7
    8fca:	7812      	ldrb	r2, [r2, #0]
    8fcc:	09d2      	lsrs	r2, r2, #7
    8fce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8fd0:	230e      	movs	r3, #14
    8fd2:	18fb      	adds	r3, r7, r3
    8fd4:	1dfa      	adds	r2, r7, #7
    8fd6:	7812      	ldrb	r2, [r2, #0]
    8fd8:	0952      	lsrs	r2, r2, #5
    8fda:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8fdc:	4b0d      	ldr	r3, [pc, #52]	; (9014 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8fde:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8fe0:	230f      	movs	r3, #15
    8fe2:	18fb      	adds	r3, r7, r3
    8fe4:	781b      	ldrb	r3, [r3, #0]
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	d10f      	bne.n	900a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8fea:	230f      	movs	r3, #15
    8fec:	18fb      	adds	r3, r7, r3
    8fee:	781b      	ldrb	r3, [r3, #0]
    8ff0:	009b      	lsls	r3, r3, #2
    8ff2:	2210      	movs	r2, #16
    8ff4:	4694      	mov	ip, r2
    8ff6:	44bc      	add	ip, r7
    8ff8:	4463      	add	r3, ip
    8ffa:	3b08      	subs	r3, #8
    8ffc:	681a      	ldr	r2, [r3, #0]
    8ffe:	230e      	movs	r3, #14
    9000:	18fb      	adds	r3, r7, r3
    9002:	781b      	ldrb	r3, [r3, #0]
    9004:	01db      	lsls	r3, r3, #7
    9006:	18d3      	adds	r3, r2, r3
    9008:	e000      	b.n	900c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    900a:	2300      	movs	r3, #0
	}
}
    900c:	0018      	movs	r0, r3
    900e:	46bd      	mov	sp, r7
    9010:	b004      	add	sp, #16
    9012:	bd80      	pop	{r7, pc}
    9014:	41004400 	.word	0x41004400

00009018 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    9018:	b580      	push	{r7, lr}
    901a:	b088      	sub	sp, #32
    901c:	af00      	add	r7, sp, #0
    901e:	60f8      	str	r0, [r7, #12]
    9020:	60b9      	str	r1, [r7, #8]
    9022:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    9024:	2300      	movs	r3, #0
    9026:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    9028:	687b      	ldr	r3, [r7, #4]
    902a:	78db      	ldrb	r3, [r3, #3]
    902c:	2201      	movs	r2, #1
    902e:	4053      	eors	r3, r2
    9030:	b2db      	uxtb	r3, r3
    9032:	2b00      	cmp	r3, #0
    9034:	d035      	beq.n	90a2 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    9036:	687b      	ldr	r3, [r7, #4]
    9038:	781b      	ldrb	r3, [r3, #0]
    903a:	2b80      	cmp	r3, #128	; 0x80
    903c:	d00b      	beq.n	9056 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    903e:	69fb      	ldr	r3, [r7, #28]
    9040:	2280      	movs	r2, #128	; 0x80
    9042:	0252      	lsls	r2, r2, #9
    9044:	4313      	orrs	r3, r2
    9046:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    9048:	687b      	ldr	r3, [r7, #4]
    904a:	781b      	ldrb	r3, [r3, #0]
    904c:	061b      	lsls	r3, r3, #24
    904e:	001a      	movs	r2, r3
    9050:	69fb      	ldr	r3, [r7, #28]
    9052:	4313      	orrs	r3, r2
    9054:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    9056:	687b      	ldr	r3, [r7, #4]
    9058:	785b      	ldrb	r3, [r3, #1]
    905a:	2b00      	cmp	r3, #0
    905c:	d003      	beq.n	9066 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    905e:	687b      	ldr	r3, [r7, #4]
    9060:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    9062:	2b02      	cmp	r3, #2
    9064:	d110      	bne.n	9088 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    9066:	69fb      	ldr	r3, [r7, #28]
    9068:	2280      	movs	r2, #128	; 0x80
    906a:	0292      	lsls	r2, r2, #10
    906c:	4313      	orrs	r3, r2
    906e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    9070:	687b      	ldr	r3, [r7, #4]
    9072:	789b      	ldrb	r3, [r3, #2]
    9074:	2b00      	cmp	r3, #0
    9076:	d004      	beq.n	9082 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    9078:	69fb      	ldr	r3, [r7, #28]
    907a:	2280      	movs	r2, #128	; 0x80
    907c:	02d2      	lsls	r2, r2, #11
    907e:	4313      	orrs	r3, r2
    9080:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    9082:	68fb      	ldr	r3, [r7, #12]
    9084:	68ba      	ldr	r2, [r7, #8]
    9086:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9088:	687b      	ldr	r3, [r7, #4]
    908a:	785b      	ldrb	r3, [r3, #1]
    908c:	2b01      	cmp	r3, #1
    908e:	d003      	beq.n	9098 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    9090:	687b      	ldr	r3, [r7, #4]
    9092:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9094:	2b02      	cmp	r3, #2
    9096:	d107      	bne.n	90a8 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    9098:	69fb      	ldr	r3, [r7, #28]
    909a:	4a22      	ldr	r2, [pc, #136]	; (9124 <_system_pinmux_config+0x10c>)
    909c:	4013      	ands	r3, r2
    909e:	61fb      	str	r3, [r7, #28]
    90a0:	e002      	b.n	90a8 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    90a2:	68fb      	ldr	r3, [r7, #12]
    90a4:	68ba      	ldr	r2, [r7, #8]
    90a6:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    90a8:	68bb      	ldr	r3, [r7, #8]
    90aa:	041b      	lsls	r3, r3, #16
    90ac:	0c1b      	lsrs	r3, r3, #16
    90ae:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    90b0:	68bb      	ldr	r3, [r7, #8]
    90b2:	0c1b      	lsrs	r3, r3, #16
    90b4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    90b6:	69ba      	ldr	r2, [r7, #24]
    90b8:	69fb      	ldr	r3, [r7, #28]
    90ba:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    90bc:	22a0      	movs	r2, #160	; 0xa0
    90be:	05d2      	lsls	r2, r2, #23
    90c0:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    90c2:	68fb      	ldr	r3, [r7, #12]
    90c4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    90c6:	697a      	ldr	r2, [r7, #20]
    90c8:	69fb      	ldr	r3, [r7, #28]
    90ca:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    90cc:	22d0      	movs	r2, #208	; 0xd0
    90ce:	0612      	lsls	r2, r2, #24
    90d0:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    90d2:	68fb      	ldr	r3, [r7, #12]
    90d4:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    90d6:	687b      	ldr	r3, [r7, #4]
    90d8:	78db      	ldrb	r3, [r3, #3]
    90da:	2201      	movs	r2, #1
    90dc:	4053      	eors	r3, r2
    90de:	b2db      	uxtb	r3, r3
    90e0:	2b00      	cmp	r3, #0
    90e2:	d01a      	beq.n	911a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    90e4:	69fa      	ldr	r2, [r7, #28]
    90e6:	2380      	movs	r3, #128	; 0x80
    90e8:	02db      	lsls	r3, r3, #11
    90ea:	4013      	ands	r3, r2
    90ec:	d00a      	beq.n	9104 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    90ee:	687b      	ldr	r3, [r7, #4]
    90f0:	789b      	ldrb	r3, [r3, #2]
    90f2:	2b01      	cmp	r3, #1
    90f4:	d103      	bne.n	90fe <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    90f6:	68fb      	ldr	r3, [r7, #12]
    90f8:	68ba      	ldr	r2, [r7, #8]
    90fa:	619a      	str	r2, [r3, #24]
    90fc:	e002      	b.n	9104 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    90fe:	68fb      	ldr	r3, [r7, #12]
    9100:	68ba      	ldr	r2, [r7, #8]
    9102:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9104:	687b      	ldr	r3, [r7, #4]
    9106:	785b      	ldrb	r3, [r3, #1]
    9108:	2b01      	cmp	r3, #1
    910a:	d003      	beq.n	9114 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    910c:	687b      	ldr	r3, [r7, #4]
    910e:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9110:	2b02      	cmp	r3, #2
    9112:	d102      	bne.n	911a <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    9114:	68fb      	ldr	r3, [r7, #12]
    9116:	68ba      	ldr	r2, [r7, #8]
    9118:	609a      	str	r2, [r3, #8]
		}
	}
}
    911a:	46c0      	nop			; (mov r8, r8)
    911c:	46bd      	mov	sp, r7
    911e:	b008      	add	sp, #32
    9120:	bd80      	pop	{r7, pc}
    9122:	46c0      	nop			; (mov r8, r8)
    9124:	fffbffff 	.word	0xfffbffff

00009128 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    9128:	b580      	push	{r7, lr}
    912a:	b084      	sub	sp, #16
    912c:	af00      	add	r7, sp, #0
    912e:	0002      	movs	r2, r0
    9130:	6039      	str	r1, [r7, #0]
    9132:	1dfb      	adds	r3, r7, #7
    9134:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    9136:	1dfb      	adds	r3, r7, #7
    9138:	781b      	ldrb	r3, [r3, #0]
    913a:	0018      	movs	r0, r3
    913c:	4b0a      	ldr	r3, [pc, #40]	; (9168 <system_pinmux_pin_set_config+0x40>)
    913e:	4798      	blx	r3
    9140:	0003      	movs	r3, r0
    9142:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    9144:	1dfb      	adds	r3, r7, #7
    9146:	781b      	ldrb	r3, [r3, #0]
    9148:	221f      	movs	r2, #31
    914a:	4013      	ands	r3, r2
    914c:	2201      	movs	r2, #1
    914e:	409a      	lsls	r2, r3
    9150:	0013      	movs	r3, r2
    9152:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    9154:	683a      	ldr	r2, [r7, #0]
    9156:	68b9      	ldr	r1, [r7, #8]
    9158:	68fb      	ldr	r3, [r7, #12]
    915a:	0018      	movs	r0, r3
    915c:	4b03      	ldr	r3, [pc, #12]	; (916c <system_pinmux_pin_set_config+0x44>)
    915e:	4798      	blx	r3
}
    9160:	46c0      	nop			; (mov r8, r8)
    9162:	46bd      	mov	sp, r7
    9164:	b004      	add	sp, #16
    9166:	bd80      	pop	{r7, pc}
    9168:	00008fb9 	.word	0x00008fb9
    916c:	00009019 	.word	0x00009019

00009170 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    9170:	b580      	push	{r7, lr}
    9172:	af00      	add	r7, sp, #0
	return;
    9174:	46c0      	nop			; (mov r8, r8)
}
    9176:	46bd      	mov	sp, r7
    9178:	bd80      	pop	{r7, pc}
    917a:	46c0      	nop			; (mov r8, r8)

0000917c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    917c:	b580      	push	{r7, lr}
    917e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    9180:	4b06      	ldr	r3, [pc, #24]	; (919c <system_init+0x20>)
    9182:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    9184:	4b06      	ldr	r3, [pc, #24]	; (91a0 <system_init+0x24>)
    9186:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    9188:	4b06      	ldr	r3, [pc, #24]	; (91a4 <system_init+0x28>)
    918a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    918c:	4b06      	ldr	r3, [pc, #24]	; (91a8 <system_init+0x2c>)
    918e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    9190:	4b06      	ldr	r3, [pc, #24]	; (91ac <system_init+0x30>)
    9192:	4798      	blx	r3
}
    9194:	46c0      	nop			; (mov r8, r8)
    9196:	46bd      	mov	sp, r7
    9198:	bd80      	pop	{r7, pc}
    919a:	46c0      	nop			; (mov r8, r8)
    919c:	00008895 	.word	0x00008895
    91a0:	00005cb1 	.word	0x00005cb1
    91a4:	00009171 	.word	0x00009171
    91a8:	00006089 	.word	0x00006089
    91ac:	00009171 	.word	0x00009171

000091b0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    91b0:	b580      	push	{r7, lr}
    91b2:	b082      	sub	sp, #8
    91b4:	af00      	add	r7, sp, #0
    91b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    91b8:	687b      	ldr	r3, [r7, #4]
    91ba:	2200      	movs	r2, #0
    91bc:	701a      	strb	r2, [r3, #0]
}
    91be:	46c0      	nop			; (mov r8, r8)
    91c0:	46bd      	mov	sp, r7
    91c2:	b002      	add	sp, #8
    91c4:	bd80      	pop	{r7, pc}
    91c6:	46c0      	nop			; (mov r8, r8)

000091c8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    91c8:	b580      	push	{r7, lr}
    91ca:	b082      	sub	sp, #8
    91cc:	af00      	add	r7, sp, #0
    91ce:	0002      	movs	r2, r0
    91d0:	6039      	str	r1, [r7, #0]
    91d2:	1dfb      	adds	r3, r7, #7
    91d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    91d6:	1dfb      	adds	r3, r7, #7
    91d8:	781b      	ldrb	r3, [r3, #0]
    91da:	2b01      	cmp	r3, #1
    91dc:	d00a      	beq.n	91f4 <system_apb_clock_set_mask+0x2c>
    91de:	2b02      	cmp	r3, #2
    91e0:	d00f      	beq.n	9202 <system_apb_clock_set_mask+0x3a>
    91e2:	2b00      	cmp	r3, #0
    91e4:	d114      	bne.n	9210 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    91e6:	4b0e      	ldr	r3, [pc, #56]	; (9220 <system_apb_clock_set_mask+0x58>)
    91e8:	4a0d      	ldr	r2, [pc, #52]	; (9220 <system_apb_clock_set_mask+0x58>)
    91ea:	6991      	ldr	r1, [r2, #24]
    91ec:	683a      	ldr	r2, [r7, #0]
    91ee:	430a      	orrs	r2, r1
    91f0:	619a      	str	r2, [r3, #24]
			break;
    91f2:	e00f      	b.n	9214 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    91f4:	4b0a      	ldr	r3, [pc, #40]	; (9220 <system_apb_clock_set_mask+0x58>)
    91f6:	4a0a      	ldr	r2, [pc, #40]	; (9220 <system_apb_clock_set_mask+0x58>)
    91f8:	69d1      	ldr	r1, [r2, #28]
    91fa:	683a      	ldr	r2, [r7, #0]
    91fc:	430a      	orrs	r2, r1
    91fe:	61da      	str	r2, [r3, #28]
			break;
    9200:	e008      	b.n	9214 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    9202:	4b07      	ldr	r3, [pc, #28]	; (9220 <system_apb_clock_set_mask+0x58>)
    9204:	4a06      	ldr	r2, [pc, #24]	; (9220 <system_apb_clock_set_mask+0x58>)
    9206:	6a11      	ldr	r1, [r2, #32]
    9208:	683a      	ldr	r2, [r7, #0]
    920a:	430a      	orrs	r2, r1
    920c:	621a      	str	r2, [r3, #32]
			break;
    920e:	e001      	b.n	9214 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    9210:	2317      	movs	r3, #23
    9212:	e000      	b.n	9216 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    9214:	2300      	movs	r3, #0
}
    9216:	0018      	movs	r0, r3
    9218:	46bd      	mov	sp, r7
    921a:	b002      	add	sp, #8
    921c:	bd80      	pop	{r7, pc}
    921e:	46c0      	nop			; (mov r8, r8)
    9220:	40000400 	.word	0x40000400

00009224 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    9224:	b580      	push	{r7, lr}
    9226:	b082      	sub	sp, #8
    9228:	af00      	add	r7, sp, #0
    922a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    922c:	687b      	ldr	r3, [r7, #4]
    922e:	2280      	movs	r2, #128	; 0x80
    9230:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9232:	687b      	ldr	r3, [r7, #4]
    9234:	2200      	movs	r2, #0
    9236:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9238:	687b      	ldr	r3, [r7, #4]
    923a:	2201      	movs	r2, #1
    923c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    923e:	687b      	ldr	r3, [r7, #4]
    9240:	2200      	movs	r2, #0
    9242:	70da      	strb	r2, [r3, #3]
}
    9244:	46c0      	nop			; (mov r8, r8)
    9246:	46bd      	mov	sp, r7
    9248:	b002      	add	sp, #8
    924a:	bd80      	pop	{r7, pc}

0000924c <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    924c:	b580      	push	{r7, lr}
    924e:	b084      	sub	sp, #16
    9250:	af00      	add	r7, sp, #0
    9252:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    9254:	2300      	movs	r3, #0
    9256:	60fb      	str	r3, [r7, #12]
    9258:	e00c      	b.n	9274 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    925a:	4b0a      	ldr	r3, [pc, #40]	; (9284 <_tcc_get_inst_index+0x38>)
    925c:	68fa      	ldr	r2, [r7, #12]
    925e:	0092      	lsls	r2, r2, #2
    9260:	58d2      	ldr	r2, [r2, r3]
    9262:	687b      	ldr	r3, [r7, #4]
    9264:	429a      	cmp	r2, r3
    9266:	d102      	bne.n	926e <_tcc_get_inst_index+0x22>
			return i;
    9268:	68fb      	ldr	r3, [r7, #12]
    926a:	b2db      	uxtb	r3, r3
    926c:	e006      	b.n	927c <_tcc_get_inst_index+0x30>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    926e:	68fb      	ldr	r3, [r7, #12]
    9270:	3301      	adds	r3, #1
    9272:	60fb      	str	r3, [r7, #12]
    9274:	68fb      	ldr	r3, [r7, #12]
    9276:	2b02      	cmp	r3, #2
    9278:	d9ef      	bls.n	925a <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    927a:	2300      	movs	r3, #0
}
    927c:	0018      	movs	r0, r3
    927e:	46bd      	mov	sp, r7
    9280:	b004      	add	sp, #16
    9282:	bd80      	pop	{r7, pc}
    9284:	0000e958 	.word	0x0000e958

00009288 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    9288:	b590      	push	{r4, r7, lr}
    928a:	b085      	sub	sp, #20
    928c:	af00      	add	r7, sp, #0
    928e:	6078      	str	r0, [r7, #4]
    9290:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    9292:	230f      	movs	r3, #15
    9294:	18fc      	adds	r4, r7, r3
    9296:	683b      	ldr	r3, [r7, #0]
    9298:	0018      	movs	r0, r3
    929a:	4bad      	ldr	r3, [pc, #692]	; (9550 <tcc_get_config_defaults+0x2c8>)
    929c:	4798      	blx	r3
    929e:	0003      	movs	r3, r0
    92a0:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    92a2:	687b      	ldr	r3, [r7, #4]
    92a4:	2200      	movs	r2, #0
    92a6:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    92a8:	230f      	movs	r3, #15
    92aa:	18fb      	adds	r3, r7, r3
    92ac:	781a      	ldrb	r2, [r3, #0]
    92ae:	4ba9      	ldr	r3, [pc, #676]	; (9554 <tcc_get_config_defaults+0x2cc>)
    92b0:	0092      	lsls	r2, r2, #2
    92b2:	58d2      	ldr	r2, [r2, r3]
    92b4:	687b      	ldr	r3, [r7, #4]
    92b6:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    92b8:	687b      	ldr	r3, [r7, #4]
    92ba:	2200      	movs	r2, #0
    92bc:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    92be:	687b      	ldr	r3, [r7, #4]
    92c0:	2200      	movs	r2, #0
    92c2:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	2200      	movs	r2, #0
    92c8:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    92ca:	687b      	ldr	r3, [r7, #4]
    92cc:	2200      	movs	r2, #0
    92ce:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    92d0:	687b      	ldr	r3, [r7, #4]
    92d2:	2200      	movs	r2, #0
    92d4:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    92d6:	687b      	ldr	r3, [r7, #4]
    92d8:	2200      	movs	r2, #0
    92da:	61da      	str	r2, [r3, #28]
    92dc:	687b      	ldr	r3, [r7, #4]
    92de:	2200      	movs	r2, #0
    92e0:	621a      	str	r2, [r3, #32]
    92e2:	687b      	ldr	r3, [r7, #4]
    92e4:	2200      	movs	r2, #0
    92e6:	625a      	str	r2, [r3, #36]	; 0x24
    92e8:	687b      	ldr	r3, [r7, #4]
    92ea:	2200      	movs	r2, #0
    92ec:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    92ee:	687b      	ldr	r3, [r7, #4]
    92f0:	2200      	movs	r2, #0
    92f2:	751a      	strb	r2, [r3, #20]
    92f4:	687b      	ldr	r3, [r7, #4]
    92f6:	2200      	movs	r2, #0
    92f8:	755a      	strb	r2, [r3, #21]
    92fa:	687b      	ldr	r3, [r7, #4]
    92fc:	2200      	movs	r2, #0
    92fe:	759a      	strb	r2, [r3, #22]
    9300:	687b      	ldr	r3, [r7, #4]
    9302:	2200      	movs	r2, #0
    9304:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    9306:	687b      	ldr	r3, [r7, #4]
    9308:	2200      	movs	r2, #0
    930a:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    930c:	687b      	ldr	r3, [r7, #4]
    930e:	2200      	movs	r2, #0
    9310:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    9312:	687b      	ldr	r3, [r7, #4]
    9314:	2200      	movs	r2, #0
    9316:	741a      	strb	r2, [r3, #16]
    9318:	687b      	ldr	r3, [r7, #4]
    931a:	2200      	movs	r2, #0
    931c:	745a      	strb	r2, [r3, #17]
    931e:	687b      	ldr	r3, [r7, #4]
    9320:	2200      	movs	r2, #0
    9322:	749a      	strb	r2, [r3, #18]
    9324:	687b      	ldr	r3, [r7, #4]
    9326:	2200      	movs	r2, #0
    9328:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    932a:	687b      	ldr	r3, [r7, #4]
    932c:	222c      	movs	r2, #44	; 0x2c
    932e:	2100      	movs	r1, #0
    9330:	5499      	strb	r1, [r3, r2]
    9332:	687b      	ldr	r3, [r7, #4]
    9334:	222d      	movs	r2, #45	; 0x2d
    9336:	2100      	movs	r1, #0
    9338:	5499      	strb	r1, [r3, r2]
    933a:	687b      	ldr	r3, [r7, #4]
    933c:	222e      	movs	r2, #46	; 0x2e
    933e:	2100      	movs	r1, #0
    9340:	5499      	strb	r1, [r3, r2]
    9342:	687b      	ldr	r3, [r7, #4]
    9344:	222f      	movs	r2, #47	; 0x2f
    9346:	2100      	movs	r1, #0
    9348:	5499      	strb	r1, [r3, r2]
    934a:	687b      	ldr	r3, [r7, #4]
    934c:	2230      	movs	r2, #48	; 0x30
    934e:	2100      	movs	r1, #0
    9350:	5499      	strb	r1, [r3, r2]
    9352:	687b      	ldr	r3, [r7, #4]
    9354:	2231      	movs	r2, #49	; 0x31
    9356:	2100      	movs	r1, #0
    9358:	5499      	strb	r1, [r3, r2]
    935a:	687b      	ldr	r3, [r7, #4]
    935c:	2232      	movs	r2, #50	; 0x32
    935e:	2100      	movs	r1, #0
    9360:	5499      	strb	r1, [r3, r2]
    9362:	687b      	ldr	r3, [r7, #4]
    9364:	2233      	movs	r2, #51	; 0x33
    9366:	2100      	movs	r1, #0
    9368:	5499      	strb	r1, [r3, r2]
    936a:	687b      	ldr	r3, [r7, #4]
    936c:	2234      	movs	r2, #52	; 0x34
    936e:	2100      	movs	r1, #0
    9370:	5499      	strb	r1, [r3, r2]
    9372:	687b      	ldr	r3, [r7, #4]
    9374:	2235      	movs	r2, #53	; 0x35
    9376:	2100      	movs	r1, #0
    9378:	5499      	strb	r1, [r3, r2]
    937a:	687b      	ldr	r3, [r7, #4]
    937c:	2236      	movs	r2, #54	; 0x36
    937e:	2100      	movs	r1, #0
    9380:	5499      	strb	r1, [r3, r2]
    9382:	687b      	ldr	r3, [r7, #4]
    9384:	2237      	movs	r2, #55	; 0x37
    9386:	2100      	movs	r1, #0
    9388:	5499      	strb	r1, [r3, r2]
    938a:	687b      	ldr	r3, [r7, #4]
    938c:	2238      	movs	r2, #56	; 0x38
    938e:	2100      	movs	r1, #0
    9390:	5499      	strb	r1, [r3, r2]
    9392:	687b      	ldr	r3, [r7, #4]
    9394:	2239      	movs	r2, #57	; 0x39
    9396:	2100      	movs	r1, #0
    9398:	5499      	strb	r1, [r3, r2]
    939a:	687b      	ldr	r3, [r7, #4]
    939c:	223a      	movs	r2, #58	; 0x3a
    939e:	2100      	movs	r1, #0
    93a0:	5499      	strb	r1, [r3, r2]
    93a2:	687b      	ldr	r3, [r7, #4]
    93a4:	223b      	movs	r2, #59	; 0x3b
    93a6:	2100      	movs	r1, #0
    93a8:	5499      	strb	r1, [r3, r2]
    93aa:	687b      	ldr	r3, [r7, #4]
    93ac:	223c      	movs	r2, #60	; 0x3c
    93ae:	2100      	movs	r1, #0
    93b0:	5499      	strb	r1, [r3, r2]
    93b2:	687b      	ldr	r3, [r7, #4]
    93b4:	223d      	movs	r2, #61	; 0x3d
    93b6:	2100      	movs	r1, #0
    93b8:	5499      	strb	r1, [r3, r2]
    93ba:	687b      	ldr	r3, [r7, #4]
    93bc:	223e      	movs	r2, #62	; 0x3e
    93be:	2100      	movs	r1, #0
    93c0:	5499      	strb	r1, [r3, r2]
    93c2:	687b      	ldr	r3, [r7, #4]
    93c4:	223f      	movs	r2, #63	; 0x3f
    93c6:	2100      	movs	r1, #0
    93c8:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    93ca:	687b      	ldr	r3, [r7, #4]
    93cc:	2240      	movs	r2, #64	; 0x40
    93ce:	2100      	movs	r1, #0
    93d0:	5499      	strb	r1, [r3, r2]
    93d2:	687b      	ldr	r3, [r7, #4]
    93d4:	2241      	movs	r2, #65	; 0x41
    93d6:	2100      	movs	r1, #0
    93d8:	5499      	strb	r1, [r3, r2]
    93da:	687b      	ldr	r3, [r7, #4]
    93dc:	2242      	movs	r2, #66	; 0x42
    93de:	2100      	movs	r1, #0
    93e0:	5499      	strb	r1, [r3, r2]
    93e2:	687b      	ldr	r3, [r7, #4]
    93e4:	2243      	movs	r2, #67	; 0x43
    93e6:	2100      	movs	r1, #0
    93e8:	5499      	strb	r1, [r3, r2]
    93ea:	687b      	ldr	r3, [r7, #4]
    93ec:	2244      	movs	r2, #68	; 0x44
    93ee:	2100      	movs	r1, #0
    93f0:	5499      	strb	r1, [r3, r2]
    93f2:	687b      	ldr	r3, [r7, #4]
    93f4:	2245      	movs	r2, #69	; 0x45
    93f6:	2100      	movs	r1, #0
    93f8:	5499      	strb	r1, [r3, r2]
    93fa:	687b      	ldr	r3, [r7, #4]
    93fc:	2246      	movs	r2, #70	; 0x46
    93fe:	2100      	movs	r1, #0
    9400:	5499      	strb	r1, [r3, r2]
    9402:	687b      	ldr	r3, [r7, #4]
    9404:	2247      	movs	r2, #71	; 0x47
    9406:	2100      	movs	r1, #0
    9408:	5499      	strb	r1, [r3, r2]
    940a:	687b      	ldr	r3, [r7, #4]
    940c:	2248      	movs	r2, #72	; 0x48
    940e:	2100      	movs	r1, #0
    9410:	5499      	strb	r1, [r3, r2]
    9412:	687b      	ldr	r3, [r7, #4]
    9414:	2249      	movs	r2, #73	; 0x49
    9416:	2100      	movs	r1, #0
    9418:	5499      	strb	r1, [r3, r2]
    941a:	687b      	ldr	r3, [r7, #4]
    941c:	224a      	movs	r2, #74	; 0x4a
    941e:	2100      	movs	r1, #0
    9420:	5499      	strb	r1, [r3, r2]
    9422:	687b      	ldr	r3, [r7, #4]
    9424:	224b      	movs	r2, #75	; 0x4b
    9426:	2100      	movs	r1, #0
    9428:	5499      	strb	r1, [r3, r2]
    942a:	687b      	ldr	r3, [r7, #4]
    942c:	224c      	movs	r2, #76	; 0x4c
    942e:	2100      	movs	r1, #0
    9430:	5499      	strb	r1, [r3, r2]
    9432:	687b      	ldr	r3, [r7, #4]
    9434:	224d      	movs	r2, #77	; 0x4d
    9436:	2100      	movs	r1, #0
    9438:	5499      	strb	r1, [r3, r2]
    943a:	687b      	ldr	r3, [r7, #4]
    943c:	224e      	movs	r2, #78	; 0x4e
    943e:	2100      	movs	r1, #0
    9440:	5499      	strb	r1, [r3, r2]
    9442:	687b      	ldr	r3, [r7, #4]
    9444:	224f      	movs	r2, #79	; 0x4f
    9446:	2100      	movs	r1, #0
    9448:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    944a:	687b      	ldr	r3, [r7, #4]
    944c:	2250      	movs	r2, #80	; 0x50
    944e:	2100      	movs	r1, #0
    9450:	5499      	strb	r1, [r3, r2]
    9452:	687b      	ldr	r3, [r7, #4]
    9454:	2251      	movs	r2, #81	; 0x51
    9456:	2100      	movs	r1, #0
    9458:	5499      	strb	r1, [r3, r2]
    945a:	687b      	ldr	r3, [r7, #4]
    945c:	2252      	movs	r2, #82	; 0x52
    945e:	2100      	movs	r1, #0
    9460:	5499      	strb	r1, [r3, r2]
    9462:	687b      	ldr	r3, [r7, #4]
    9464:	2253      	movs	r2, #83	; 0x53
    9466:	2100      	movs	r1, #0
    9468:	5499      	strb	r1, [r3, r2]
    946a:	687b      	ldr	r3, [r7, #4]
    946c:	2254      	movs	r2, #84	; 0x54
    946e:	2100      	movs	r1, #0
    9470:	5499      	strb	r1, [r3, r2]
    9472:	687b      	ldr	r3, [r7, #4]
    9474:	2255      	movs	r2, #85	; 0x55
    9476:	2100      	movs	r1, #0
    9478:	5499      	strb	r1, [r3, r2]
    947a:	687b      	ldr	r3, [r7, #4]
    947c:	2256      	movs	r2, #86	; 0x56
    947e:	2100      	movs	r1, #0
    9480:	5499      	strb	r1, [r3, r2]
    9482:	687b      	ldr	r3, [r7, #4]
    9484:	2257      	movs	r2, #87	; 0x57
    9486:	2100      	movs	r1, #0
    9488:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    948a:	687b      	ldr	r3, [r7, #4]
    948c:	2298      	movs	r2, #152	; 0x98
    948e:	2100      	movs	r1, #0
    9490:	5499      	strb	r1, [r3, r2]
    9492:	687b      	ldr	r3, [r7, #4]
    9494:	2200      	movs	r2, #0
    9496:	659a      	str	r2, [r3, #88]	; 0x58
    9498:	687b      	ldr	r3, [r7, #4]
    949a:	2200      	movs	r2, #0
    949c:	679a      	str	r2, [r3, #120]	; 0x78
    949e:	687b      	ldr	r3, [r7, #4]
    94a0:	2299      	movs	r2, #153	; 0x99
    94a2:	2100      	movs	r1, #0
    94a4:	5499      	strb	r1, [r3, r2]
    94a6:	687b      	ldr	r3, [r7, #4]
    94a8:	2200      	movs	r2, #0
    94aa:	65da      	str	r2, [r3, #92]	; 0x5c
    94ac:	687b      	ldr	r3, [r7, #4]
    94ae:	2200      	movs	r2, #0
    94b0:	67da      	str	r2, [r3, #124]	; 0x7c
    94b2:	687b      	ldr	r3, [r7, #4]
    94b4:	229a      	movs	r2, #154	; 0x9a
    94b6:	2100      	movs	r1, #0
    94b8:	5499      	strb	r1, [r3, r2]
    94ba:	687b      	ldr	r3, [r7, #4]
    94bc:	2200      	movs	r2, #0
    94be:	661a      	str	r2, [r3, #96]	; 0x60
    94c0:	687b      	ldr	r3, [r7, #4]
    94c2:	2280      	movs	r2, #128	; 0x80
    94c4:	2100      	movs	r1, #0
    94c6:	5099      	str	r1, [r3, r2]
    94c8:	687b      	ldr	r3, [r7, #4]
    94ca:	229b      	movs	r2, #155	; 0x9b
    94cc:	2100      	movs	r1, #0
    94ce:	5499      	strb	r1, [r3, r2]
    94d0:	687b      	ldr	r3, [r7, #4]
    94d2:	2200      	movs	r2, #0
    94d4:	665a      	str	r2, [r3, #100]	; 0x64
    94d6:	687b      	ldr	r3, [r7, #4]
    94d8:	2284      	movs	r2, #132	; 0x84
    94da:	2100      	movs	r1, #0
    94dc:	5099      	str	r1, [r3, r2]
    94de:	687b      	ldr	r3, [r7, #4]
    94e0:	229c      	movs	r2, #156	; 0x9c
    94e2:	2100      	movs	r1, #0
    94e4:	5499      	strb	r1, [r3, r2]
    94e6:	687b      	ldr	r3, [r7, #4]
    94e8:	2200      	movs	r2, #0
    94ea:	669a      	str	r2, [r3, #104]	; 0x68
    94ec:	687b      	ldr	r3, [r7, #4]
    94ee:	2288      	movs	r2, #136	; 0x88
    94f0:	2100      	movs	r1, #0
    94f2:	5099      	str	r1, [r3, r2]
    94f4:	687b      	ldr	r3, [r7, #4]
    94f6:	229d      	movs	r2, #157	; 0x9d
    94f8:	2100      	movs	r1, #0
    94fa:	5499      	strb	r1, [r3, r2]
    94fc:	687b      	ldr	r3, [r7, #4]
    94fe:	2200      	movs	r2, #0
    9500:	66da      	str	r2, [r3, #108]	; 0x6c
    9502:	687b      	ldr	r3, [r7, #4]
    9504:	228c      	movs	r2, #140	; 0x8c
    9506:	2100      	movs	r1, #0
    9508:	5099      	str	r1, [r3, r2]
    950a:	687b      	ldr	r3, [r7, #4]
    950c:	229e      	movs	r2, #158	; 0x9e
    950e:	2100      	movs	r1, #0
    9510:	5499      	strb	r1, [r3, r2]
    9512:	687b      	ldr	r3, [r7, #4]
    9514:	2200      	movs	r2, #0
    9516:	671a      	str	r2, [r3, #112]	; 0x70
    9518:	687b      	ldr	r3, [r7, #4]
    951a:	2290      	movs	r2, #144	; 0x90
    951c:	2100      	movs	r1, #0
    951e:	5099      	str	r1, [r3, r2]
    9520:	687b      	ldr	r3, [r7, #4]
    9522:	229f      	movs	r2, #159	; 0x9f
    9524:	2100      	movs	r1, #0
    9526:	5499      	strb	r1, [r3, r2]
    9528:	687b      	ldr	r3, [r7, #4]
    952a:	2200      	movs	r2, #0
    952c:	675a      	str	r2, [r3, #116]	; 0x74
    952e:	687b      	ldr	r3, [r7, #4]
    9530:	2294      	movs	r2, #148	; 0x94
    9532:	2100      	movs	r1, #0
    9534:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    9536:	687b      	ldr	r3, [r7, #4]
    9538:	22a0      	movs	r2, #160	; 0xa0
    953a:	2101      	movs	r1, #1
    953c:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    953e:	687b      	ldr	r3, [r7, #4]
    9540:	22a1      	movs	r2, #161	; 0xa1
    9542:	2100      	movs	r1, #0
    9544:	5499      	strb	r1, [r3, r2]
}
    9546:	46c0      	nop			; (mov r8, r8)
    9548:	46bd      	mov	sp, r7
    954a:	b005      	add	sp, #20
    954c:	bd90      	pop	{r4, r7, pc}
    954e:	46c0      	nop			; (mov r8, r8)
    9550:	0000924d 	.word	0x0000924d
    9554:	0000e974 	.word	0x0000e974

00009558 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    9558:	b580      	push	{r7, lr}
    955a:	b086      	sub	sp, #24
    955c:	af00      	add	r7, sp, #0
    955e:	60b9      	str	r1, [r7, #8]
    9560:	607a      	str	r2, [r7, #4]
    9562:	230f      	movs	r3, #15
    9564:	18fb      	adds	r3, r7, r3
    9566:	1c02      	adds	r2, r0, #0
    9568:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    956a:	2300      	movs	r3, #0
    956c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    956e:	2300      	movs	r3, #0
    9570:	613b      	str	r3, [r7, #16]
    9572:	e01d      	b.n	95b0 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    9574:	68ba      	ldr	r2, [r7, #8]
    9576:	693b      	ldr	r3, [r7, #16]
    9578:	18d3      	adds	r3, r2, r3
    957a:	3310      	adds	r3, #16
    957c:	781b      	ldrb	r3, [r3, #0]
    957e:	2b01      	cmp	r3, #1
    9580:	d113      	bne.n	95aa <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    9582:	230f      	movs	r3, #15
    9584:	18fb      	adds	r3, r7, r3
    9586:	781b      	ldrb	r3, [r3, #0]
    9588:	4a1b      	ldr	r2, [pc, #108]	; (95f8 <_tcc_build_ctrla+0xa0>)
    958a:	5cd3      	ldrb	r3, [r2, r3]
    958c:	1e1a      	subs	r2, r3, #0
    958e:	693b      	ldr	r3, [r7, #16]
    9590:	429a      	cmp	r2, r3
    9592:	da01      	bge.n	9598 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    9594:	2317      	movs	r3, #23
    9596:	e02a      	b.n	95ee <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    9598:	2380      	movs	r3, #128	; 0x80
    959a:	045a      	lsls	r2, r3, #17
    959c:	693b      	ldr	r3, [r7, #16]
    959e:	409a      	lsls	r2, r3
    95a0:	0013      	movs	r3, r2
    95a2:	001a      	movs	r2, r3
    95a4:	697b      	ldr	r3, [r7, #20]
    95a6:	4313      	orrs	r3, r2
    95a8:	617b      	str	r3, [r7, #20]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    95aa:	693b      	ldr	r3, [r7, #16]
    95ac:	3301      	adds	r3, #1
    95ae:	613b      	str	r3, [r7, #16]
    95b0:	693b      	ldr	r3, [r7, #16]
    95b2:	2b03      	cmp	r3, #3
    95b4:	ddde      	ble.n	9574 <_tcc_build_ctrla+0x1c>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    95b6:	68bb      	ldr	r3, [r7, #8]
    95b8:	22a1      	movs	r2, #161	; 0xa1
    95ba:	5c9b      	ldrb	r3, [r3, r2]
    95bc:	2b00      	cmp	r3, #0
    95be:	d004      	beq.n	95ca <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    95c0:	697b      	ldr	r3, [r7, #20]
    95c2:	2280      	movs	r2, #128	; 0x80
    95c4:	0112      	lsls	r2, r2, #4
    95c6:	4313      	orrs	r3, r2
    95c8:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    95ca:	68bb      	ldr	r3, [r7, #8]
    95cc:	7b1b      	ldrb	r3, [r3, #12]
    95ce:	031b      	lsls	r3, r3, #12
    95d0:	001a      	movs	r2, r3
    95d2:	697b      	ldr	r3, [r7, #20]
    95d4:	4313      	orrs	r3, r2
    95d6:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    95d8:	68bb      	ldr	r3, [r7, #8]
    95da:	7adb      	ldrb	r3, [r3, #11]
    95dc:	021b      	lsls	r3, r3, #8
    95de:	001a      	movs	r2, r3
    95e0:	697b      	ldr	r3, [r7, #20]
    95e2:	4313      	orrs	r3, r2
    95e4:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    95e6:	687b      	ldr	r3, [r7, #4]
    95e8:	697a      	ldr	r2, [r7, #20]
    95ea:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    95ec:	2300      	movs	r3, #0
}
    95ee:	0018      	movs	r0, r3
    95f0:	46bd      	mov	sp, r7
    95f2:	b006      	add	sp, #24
    95f4:	bd80      	pop	{r7, pc}
    95f6:	46c0      	nop			; (mov r8, r8)
    95f8:	0000e980 	.word	0x0000e980

000095fc <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    95fc:	b580      	push	{r7, lr}
    95fe:	b086      	sub	sp, #24
    9600:	af00      	add	r7, sp, #0
    9602:	60b9      	str	r1, [r7, #8]
    9604:	607a      	str	r2, [r7, #4]
    9606:	230f      	movs	r3, #15
    9608:	18fb      	adds	r3, r7, r3
    960a:	1c02      	adds	r2, r0, #0
    960c:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    960e:	2317      	movs	r3, #23
    9610:	18fb      	adds	r3, r7, r3
    9612:	2200      	movs	r2, #0
    9614:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    9616:	68bb      	ldr	r3, [r7, #8]
    9618:	7a1b      	ldrb	r3, [r3, #8]
    961a:	2b00      	cmp	r3, #0
    961c:	d007      	beq.n	962e <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    961e:	2317      	movs	r3, #23
    9620:	18fb      	adds	r3, r7, r3
    9622:	2217      	movs	r2, #23
    9624:	18ba      	adds	r2, r7, r2
    9626:	7812      	ldrb	r2, [r2, #0]
    9628:	2104      	movs	r1, #4
    962a:	430a      	orrs	r2, r1
    962c:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    962e:	68bb      	ldr	r3, [r7, #8]
    9630:	7a5b      	ldrb	r3, [r3, #9]
    9632:	2b01      	cmp	r3, #1
    9634:	d107      	bne.n	9646 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    9636:	2317      	movs	r3, #23
    9638:	18fb      	adds	r3, r7, r3
    963a:	2217      	movs	r2, #23
    963c:	18ba      	adds	r2, r7, r2
    963e:	7812      	ldrb	r2, [r2, #0]
    9640:	2101      	movs	r1, #1
    9642:	430a      	orrs	r2, r1
    9644:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    9646:	687b      	ldr	r3, [r7, #4]
    9648:	2217      	movs	r2, #23
    964a:	18ba      	adds	r2, r7, r2
    964c:	7812      	ldrb	r2, [r2, #0]
    964e:	701a      	strb	r2, [r3, #0]
}
    9650:	46c0      	nop			; (mov r8, r8)
    9652:	46bd      	mov	sp, r7
    9654:	b006      	add	sp, #24
    9656:	bd80      	pop	{r7, pc}

00009658 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    9658:	b580      	push	{r7, lr}
    965a:	b088      	sub	sp, #32
    965c:	af00      	add	r7, sp, #0
    965e:	60b9      	str	r1, [r7, #8]
    9660:	607a      	str	r2, [r7, #4]
    9662:	230f      	movs	r3, #15
    9664:	18fb      	adds	r3, r7, r3
    9666:	1c02      	adds	r2, r0, #0
    9668:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    966a:	230f      	movs	r3, #15
    966c:	18fb      	adds	r3, r7, r3
    966e:	781a      	ldrb	r2, [r3, #0]
    9670:	231b      	movs	r3, #27
    9672:	18fb      	adds	r3, r7, r3
    9674:	493e      	ldr	r1, [pc, #248]	; (9770 <_tcc_build_faults+0x118>)
    9676:	5c8a      	ldrb	r2, [r1, r2]
    9678:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    967a:	2300      	movs	r3, #0
    967c:	61fb      	str	r3, [r7, #28]
    967e:	e06e      	b.n	975e <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    9680:	69fa      	ldr	r2, [r7, #28]
    9682:	0013      	movs	r3, r2
    9684:	009b      	lsls	r3, r3, #2
    9686:	189b      	adds	r3, r3, r2
    9688:	005b      	lsls	r3, r3, #1
    968a:	3328      	adds	r3, #40	; 0x28
    968c:	68ba      	ldr	r2, [r7, #8]
    968e:	18d3      	adds	r3, r2, r3
    9690:	3304      	adds	r3, #4
    9692:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    9694:	697b      	ldr	r3, [r7, #20]
    9696:	7a5b      	ldrb	r3, [r3, #9]
    9698:	221b      	movs	r2, #27
    969a:	18ba      	adds	r2, r7, r2
    969c:	7812      	ldrb	r2, [r2, #0]
    969e:	429a      	cmp	r2, r3
    96a0:	d801      	bhi.n	96a6 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    96a2:	2317      	movs	r3, #23
    96a4:	e05f      	b.n	9766 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    96a6:	697b      	ldr	r3, [r7, #20]
    96a8:	781b      	ldrb	r3, [r3, #0]
    96aa:	2b0f      	cmp	r3, #15
    96ac:	d901      	bls.n	96b2 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    96ae:	2317      	movs	r3, #23
    96b0:	e059      	b.n	9766 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    96b2:	697b      	ldr	r3, [r7, #20]
    96b4:	781b      	ldrb	r3, [r3, #0]
    96b6:	061b      	lsls	r3, r3, #24
    96b8:	001a      	movs	r2, r3
    96ba:	23f0      	movs	r3, #240	; 0xf0
    96bc:	051b      	lsls	r3, r3, #20
    96be:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    96c0:	697b      	ldr	r3, [r7, #20]
    96c2:	785b      	ldrb	r3, [r3, #1]
    96c4:	041b      	lsls	r3, r3, #16
    96c6:	0019      	movs	r1, r3
    96c8:	23ff      	movs	r3, #255	; 0xff
    96ca:	041b      	lsls	r3, r3, #16
    96cc:	400b      	ands	r3, r1
    96ce:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    96d0:	697b      	ldr	r3, [r7, #20]
    96d2:	789b      	ldrb	r3, [r3, #2]
    96d4:	2b00      	cmp	r3, #0
    96d6:	d001      	beq.n	96dc <_tcc_build_faults+0x84>
    96d8:	2380      	movs	r3, #128	; 0x80
    96da:	e000      	b.n	96de <_tcc_build_faults+0x86>
    96dc:	2300      	movs	r3, #0
    96de:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    96e0:	697b      	ldr	r3, [r7, #20]
    96e2:	78db      	ldrb	r3, [r3, #3]
    96e4:	2b00      	cmp	r3, #0
    96e6:	d001      	beq.n	96ec <_tcc_build_faults+0x94>
    96e8:	2308      	movs	r3, #8
    96ea:	e000      	b.n	96ee <_tcc_build_faults+0x96>
    96ec:	2300      	movs	r3, #0
    96ee:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    96f0:	697b      	ldr	r3, [r7, #20]
    96f2:	791b      	ldrb	r3, [r3, #4]
    96f4:	2b00      	cmp	r3, #0
    96f6:	d001      	beq.n	96fc <_tcc_build_faults+0xa4>
    96f8:	2310      	movs	r3, #16
    96fa:	e000      	b.n	96fe <_tcc_build_faults+0xa6>
    96fc:	2300      	movs	r3, #0
    96fe:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    9700:	697b      	ldr	r3, [r7, #20]
    9702:	795b      	ldrb	r3, [r3, #5]
    9704:	0019      	movs	r1, r3
    9706:	2303      	movs	r3, #3
    9708:	400b      	ands	r3, r1
    970a:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    970c:	697b      	ldr	r3, [r7, #20]
    970e:	799b      	ldrb	r3, [r3, #6]
    9710:	015b      	lsls	r3, r3, #5
    9712:	0019      	movs	r1, r3
    9714:	2360      	movs	r3, #96	; 0x60
    9716:	400b      	ands	r3, r1
    9718:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    971a:	697b      	ldr	r3, [r7, #20]
    971c:	79db      	ldrb	r3, [r3, #7]
    971e:	021b      	lsls	r3, r3, #8
    9720:	0019      	movs	r1, r3
    9722:	23c0      	movs	r3, #192	; 0xc0
    9724:	009b      	lsls	r3, r3, #2
    9726:	400b      	ands	r3, r1
    9728:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    972a:	697b      	ldr	r3, [r7, #20]
    972c:	7a1b      	ldrb	r3, [r3, #8]
    972e:	031b      	lsls	r3, r3, #12
    9730:	0019      	movs	r1, r3
    9732:	23e0      	movs	r3, #224	; 0xe0
    9734:	01db      	lsls	r3, r3, #7
    9736:	400b      	ands	r3, r1
    9738:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    973a:	697b      	ldr	r3, [r7, #20]
    973c:	7a5b      	ldrb	r3, [r3, #9]
    973e:	029b      	lsls	r3, r3, #10
    9740:	0019      	movs	r1, r3
    9742:	23c0      	movs	r3, #192	; 0xc0
    9744:	011b      	lsls	r3, r3, #4
    9746:	400b      	ands	r3, r1
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    9748:	4313      	orrs	r3, r2
    974a:	613b      	str	r3, [r7, #16]
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    974c:	69fb      	ldr	r3, [r7, #28]
    974e:	009b      	lsls	r3, r3, #2
    9750:	687a      	ldr	r2, [r7, #4]
    9752:	18d3      	adds	r3, r2, r3
    9754:	693a      	ldr	r2, [r7, #16]
    9756:	601a      	str	r2, [r3, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    9758:	69fb      	ldr	r3, [r7, #28]
    975a:	3301      	adds	r3, #1
    975c:	61fb      	str	r3, [r7, #28]
    975e:	69fb      	ldr	r3, [r7, #28]
    9760:	2b01      	cmp	r3, #1
    9762:	dd8d      	ble.n	9680 <_tcc_build_faults+0x28>
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
	}
	return STATUS_OK;
    9764:	2300      	movs	r3, #0
}
    9766:	0018      	movs	r0, r3
    9768:	46bd      	mov	sp, r7
    976a:	b008      	add	sp, #32
    976c:	bd80      	pop	{r7, pc}
    976e:	46c0      	nop			; (mov r8, r8)
    9770:	0000e980 	.word	0x0000e980

00009774 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    9774:	b580      	push	{r7, lr}
    9776:	b088      	sub	sp, #32
    9778:	af00      	add	r7, sp, #0
    977a:	60b9      	str	r1, [r7, #8]
    977c:	607a      	str	r2, [r7, #4]
    977e:	230f      	movs	r3, #15
    9780:	18fb      	adds	r3, r7, r3
    9782:	1c02      	adds	r2, r0, #0
    9784:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    9786:	230f      	movs	r3, #15
    9788:	18fb      	adds	r3, r7, r3
    978a:	781a      	ldrb	r2, [r3, #0]
    978c:	2317      	movs	r3, #23
    978e:	18fb      	adds	r3, r7, r3
    9790:	492d      	ldr	r1, [pc, #180]	; (9848 <_tcc_build_drvctrl+0xd4>)
    9792:	5c8a      	ldrb	r2, [r1, r2]
    9794:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    9796:	2300      	movs	r3, #0
    9798:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    979a:	2300      	movs	r3, #0
    979c:	61fb      	str	r3, [r7, #28]
    979e:	e048      	b.n	9832 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    97a0:	68ba      	ldr	r2, [r7, #8]
    97a2:	2150      	movs	r1, #80	; 0x50
    97a4:	69fb      	ldr	r3, [r7, #28]
    97a6:	18d3      	adds	r3, r2, r3
    97a8:	185b      	adds	r3, r3, r1
    97aa:	781b      	ldrb	r3, [r3, #0]
    97ac:	2b00      	cmp	r3, #0
    97ae:	d010      	beq.n	97d2 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    97b0:	2317      	movs	r3, #23
    97b2:	18fb      	adds	r3, r7, r3
    97b4:	781a      	ldrb	r2, [r3, #0]
    97b6:	69fb      	ldr	r3, [r7, #28]
    97b8:	429a      	cmp	r2, r3
    97ba:	d801      	bhi.n	97c0 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    97bc:	2317      	movs	r3, #23
    97be:	e03f      	b.n	9840 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    97c0:	2380      	movs	r3, #128	; 0x80
    97c2:	025a      	lsls	r2, r3, #9
    97c4:	69fb      	ldr	r3, [r7, #28]
    97c6:	409a      	lsls	r2, r3
    97c8:	0013      	movs	r3, r2
    97ca:	001a      	movs	r2, r3
    97cc:	69bb      	ldr	r3, [r7, #24]
    97ce:	4313      	orrs	r3, r2
    97d0:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    97d2:	68ba      	ldr	r2, [r7, #8]
    97d4:	69fb      	ldr	r3, [r7, #28]
    97d6:	331c      	adds	r3, #28
    97d8:	005b      	lsls	r3, r3, #1
    97da:	18d3      	adds	r3, r2, r3
    97dc:	3309      	adds	r3, #9
    97de:	781b      	ldrb	r3, [r3, #0]
    97e0:	2b00      	cmp	r3, #0
    97e2:	d023      	beq.n	982c <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    97e4:	2317      	movs	r3, #23
    97e6:	18fb      	adds	r3, r7, r3
    97e8:	781a      	ldrb	r2, [r3, #0]
    97ea:	69fb      	ldr	r3, [r7, #28]
    97ec:	429a      	cmp	r2, r3
    97ee:	d801      	bhi.n	97f4 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    97f0:	2317      	movs	r3, #23
    97f2:	e025      	b.n	9840 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    97f4:	68ba      	ldr	r2, [r7, #8]
    97f6:	69fb      	ldr	r3, [r7, #28]
    97f8:	331c      	adds	r3, #28
    97fa:	005b      	lsls	r3, r3, #1
    97fc:	18d3      	adds	r3, r2, r3
    97fe:	3309      	adds	r3, #9
    9800:	781b      	ldrb	r3, [r3, #0]
    9802:	2b02      	cmp	r3, #2
    9804:	d10a      	bne.n	981c <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    9806:	2302      	movs	r3, #2
    9808:	33ff      	adds	r3, #255	; 0xff
    980a:	001a      	movs	r2, r3
    980c:	69fb      	ldr	r3, [r7, #28]
    980e:	409a      	lsls	r2, r3
    9810:	0013      	movs	r3, r2
    9812:	001a      	movs	r2, r3
    9814:	69bb      	ldr	r3, [r7, #24]
    9816:	4313      	orrs	r3, r2
    9818:	61bb      	str	r3, [r7, #24]
    981a:	e007      	b.n	982c <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    981c:	2201      	movs	r2, #1
    981e:	69fb      	ldr	r3, [r7, #28]
    9820:	409a      	lsls	r2, r3
    9822:	0013      	movs	r3, r2
    9824:	001a      	movs	r2, r3
    9826:	69bb      	ldr	r3, [r7, #24]
    9828:	4313      	orrs	r3, r2
    982a:	61bb      	str	r3, [r7, #24]
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    982c:	69fb      	ldr	r3, [r7, #28]
    982e:	3301      	adds	r3, #1
    9830:	61fb      	str	r3, [r7, #28]
    9832:	69fb      	ldr	r3, [r7, #28]
    9834:	2b07      	cmp	r3, #7
    9836:	d9b3      	bls.n	97a0 <_tcc_build_drvctrl+0x2c>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
			}
		}
	}
	*value_buffer = drvctrl;
    9838:	687b      	ldr	r3, [r7, #4]
    983a:	69ba      	ldr	r2, [r7, #24]
    983c:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    983e:	2300      	movs	r3, #0
}
    9840:	0018      	movs	r0, r3
    9842:	46bd      	mov	sp, r7
    9844:	b008      	add	sp, #32
    9846:	bd80      	pop	{r7, pc}
    9848:	0000e984 	.word	0x0000e984

0000984c <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    984c:	b580      	push	{r7, lr}
    984e:	b088      	sub	sp, #32
    9850:	af00      	add	r7, sp, #0
    9852:	60b9      	str	r1, [r7, #8]
    9854:	607a      	str	r2, [r7, #4]
    9856:	230f      	movs	r3, #15
    9858:	18fb      	adds	r3, r7, r3
    985a:	1c02      	adds	r2, r0, #0
    985c:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    985e:	230f      	movs	r3, #15
    9860:	18fb      	adds	r3, r7, r3
    9862:	781a      	ldrb	r2, [r3, #0]
    9864:	2317      	movs	r3, #23
    9866:	18fb      	adds	r3, r7, r3
    9868:	491d      	ldr	r1, [pc, #116]	; (98e0 <_tcc_build_waves+0x94>)
    986a:	5c8a      	ldrb	r2, [r1, r2]
    986c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    986e:	68bb      	ldr	r3, [r7, #8]
    9870:	3310      	adds	r3, #16
    9872:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    9874:	693b      	ldr	r3, [r7, #16]
    9876:	7a5b      	ldrb	r3, [r3, #9]
    9878:	011b      	lsls	r3, r3, #4
    987a:	001a      	movs	r2, r3
    987c:	2330      	movs	r3, #48	; 0x30
    987e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    9880:	693b      	ldr	r3, [r7, #16]
    9882:	7a1b      	ldrb	r3, [r3, #8]
    9884:	0019      	movs	r1, r3
    9886:	2307      	movs	r3, #7
    9888:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    988a:	4313      	orrs	r3, r2
    988c:	61bb      	str	r3, [r7, #24]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    988e:	2300      	movs	r3, #0
    9890:	61fb      	str	r3, [r7, #28]
    9892:	e01a      	b.n	98ca <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    9894:	693a      	ldr	r2, [r7, #16]
    9896:	69fb      	ldr	r3, [r7, #28]
    9898:	18d3      	adds	r3, r2, r3
    989a:	3304      	adds	r3, #4
    989c:	781b      	ldrb	r3, [r3, #0]
    989e:	2b00      	cmp	r3, #0
    98a0:	d010      	beq.n	98c4 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    98a2:	2317      	movs	r3, #23
    98a4:	18fb      	adds	r3, r7, r3
    98a6:	781a      	ldrb	r2, [r3, #0]
    98a8:	69fb      	ldr	r3, [r7, #28]
    98aa:	429a      	cmp	r2, r3
    98ac:	dc01      	bgt.n	98b2 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    98ae:	2317      	movs	r3, #23
    98b0:	e012      	b.n	98d8 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    98b2:	2380      	movs	r3, #128	; 0x80
    98b4:	025a      	lsls	r2, r3, #9
    98b6:	69fb      	ldr	r3, [r7, #28]
    98b8:	409a      	lsls	r2, r3
    98ba:	0013      	movs	r3, r2
    98bc:	001a      	movs	r2, r3
    98be:	69bb      	ldr	r3, [r7, #24]
    98c0:	4313      	orrs	r3, r2
    98c2:	61bb      	str	r3, [r7, #24]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    98c4:	69fb      	ldr	r3, [r7, #28]
    98c6:	3301      	adds	r3, #1
    98c8:	61fb      	str	r3, [r7, #28]
    98ca:	69fb      	ldr	r3, [r7, #28]
    98cc:	2b03      	cmp	r3, #3
    98ce:	dde1      	ble.n	9894 <_tcc_build_waves+0x48>
			}
			wave |= (TCC_WAVE_POL0 << n);
		}
	}

	value_buffer[0] = wave;
    98d0:	687b      	ldr	r3, [r7, #4]
    98d2:	69ba      	ldr	r2, [r7, #24]
    98d4:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    98d6:	2300      	movs	r3, #0
}
    98d8:	0018      	movs	r0, r3
    98da:	46bd      	mov	sp, r7
    98dc:	b008      	add	sp, #32
    98de:	bd80      	pop	{r7, pc}
    98e0:	0000e980 	.word	0x0000e980

000098e4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    98e4:	b590      	push	{r4, r7, lr}
    98e6:	b091      	sub	sp, #68	; 0x44
    98e8:	af00      	add	r7, sp, #0
    98ea:	60f8      	str	r0, [r7, #12]
    98ec:	60b9      	str	r1, [r7, #8]
    98ee:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    98f0:	233b      	movs	r3, #59	; 0x3b
    98f2:	18fc      	adds	r4, r7, r3
    98f4:	68bb      	ldr	r3, [r7, #8]
    98f6:	0018      	movs	r0, r3
    98f8:	4bc4      	ldr	r3, [pc, #784]	; (9c0c <tcc_init+0x328>)
    98fa:	4798      	blx	r3
    98fc:	0003      	movs	r3, r0
    98fe:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    9900:	233b      	movs	r3, #59	; 0x3b
    9902:	18fb      	adds	r3, r7, r3
    9904:	781a      	ldrb	r2, [r3, #0]
    9906:	4bc2      	ldr	r3, [pc, #776]	; (9c10 <tcc_init+0x32c>)
    9908:	0092      	lsls	r2, r2, #2
    990a:	58d3      	ldr	r3, [r2, r3]
    990c:	0019      	movs	r1, r3
    990e:	2002      	movs	r0, #2
    9910:	4bc0      	ldr	r3, [pc, #768]	; (9c14 <tcc_init+0x330>)
    9912:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    9914:	68bb      	ldr	r3, [r7, #8]
    9916:	681b      	ldr	r3, [r3, #0]
    9918:	2202      	movs	r2, #2
    991a:	4013      	ands	r3, r2
    991c:	d001      	beq.n	9922 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    991e:	231c      	movs	r3, #28
    9920:	e1be      	b.n	9ca0 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    9922:	68bb      	ldr	r3, [r7, #8]
    9924:	681b      	ldr	r3, [r3, #0]
    9926:	2201      	movs	r2, #1
    9928:	4013      	ands	r3, r2
    992a:	d001      	beq.n	9930 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    992c:	231c      	movs	r3, #28
    992e:	e1b7      	b.n	9ca0 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    9930:	233b      	movs	r3, #59	; 0x3b
    9932:	18fb      	adds	r3, r7, r3
    9934:	781a      	ldrb	r2, [r3, #0]
    9936:	4bb8      	ldr	r3, [pc, #736]	; (9c18 <tcc_init+0x334>)
    9938:	0092      	lsls	r2, r2, #2
    993a:	58d3      	ldr	r3, [r2, r3]
    993c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    993e:	687b      	ldr	r3, [r7, #4]
    9940:	681a      	ldr	r2, [r3, #0]
    9942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9944:	429a      	cmp	r2, r3
    9946:	d804      	bhi.n	9952 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    9948:	687b      	ldr	r3, [r7, #4]
    994a:	685a      	ldr	r2, [r3, #4]
    994c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    994e:	429a      	cmp	r2, r3
    9950:	d901      	bls.n	9956 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    9952:	2317      	movs	r3, #23
    9954:	e1a4      	b.n	9ca0 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    9956:	2300      	movs	r3, #0
    9958:	63fb      	str	r3, [r7, #60]	; 0x3c
    995a:	e00e      	b.n	997a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    995c:	687a      	ldr	r2, [r7, #4]
    995e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9960:	3306      	adds	r3, #6
    9962:	009b      	lsls	r3, r3, #2
    9964:	18d3      	adds	r3, r2, r3
    9966:	3304      	adds	r3, #4
    9968:	681a      	ldr	r2, [r3, #0]
    996a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    996c:	429a      	cmp	r2, r3
    996e:	d901      	bls.n	9974 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    9970:	2317      	movs	r3, #23
    9972:	e195      	b.n	9ca0 <tcc_init+0x3bc>
		) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    9974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9976:	3301      	adds	r3, #1
    9978:	63fb      	str	r3, [r7, #60]	; 0x3c
    997a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    997c:	2b03      	cmp	r3, #3
    997e:	dded      	ble.n	995c <tcc_init+0x78>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    9980:	2300      	movs	r3, #0
    9982:	63fb      	str	r3, [r7, #60]	; 0x3c
    9984:	e019      	b.n	99ba <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    9986:	687a      	ldr	r2, [r7, #4]
    9988:	2198      	movs	r1, #152	; 0x98
    998a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    998c:	18d3      	adds	r3, r2, r3
    998e:	185b      	adds	r3, r3, r1
    9990:	781b      	ldrb	r3, [r3, #0]
    9992:	2201      	movs	r2, #1
    9994:	4053      	eors	r3, r2
    9996:	b2db      	uxtb	r3, r3
    9998:	2b00      	cmp	r3, #0
    999a:	d10a      	bne.n	99b2 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    999c:	233b      	movs	r3, #59	; 0x3b
    999e:	18fb      	adds	r3, r7, r3
    99a0:	781b      	ldrb	r3, [r3, #0]
    99a2:	4a9e      	ldr	r2, [pc, #632]	; (9c1c <tcc_init+0x338>)
    99a4:	5cd3      	ldrb	r3, [r2, r3]
    99a6:	1e1a      	subs	r2, r3, #0
    99a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    99aa:	429a      	cmp	r2, r3
    99ac:	dc02      	bgt.n	99b4 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    99ae:	2317      	movs	r3, #23
    99b0:	e176      	b.n	9ca0 <tcc_init+0x3bc>
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    99b2:	46c0      	nop			; (mov r8, r8)
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    99b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    99b6:	3301      	adds	r3, #1
    99b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    99ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    99bc:	2b07      	cmp	r3, #7
    99be:	dde2      	ble.n	9986 <tcc_init+0xa2>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    99c0:	2300      	movs	r3, #0
    99c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    99c4:	2333      	movs	r3, #51	; 0x33
    99c6:	18fc      	adds	r4, r7, r3
    99c8:	232c      	movs	r3, #44	; 0x2c
    99ca:	18fa      	adds	r2, r7, r3
    99cc:	6879      	ldr	r1, [r7, #4]
    99ce:	233b      	movs	r3, #59	; 0x3b
    99d0:	18fb      	adds	r3, r7, r3
    99d2:	781b      	ldrb	r3, [r3, #0]
    99d4:	0018      	movs	r0, r3
    99d6:	4b92      	ldr	r3, [pc, #584]	; (9c20 <tcc_init+0x33c>)
    99d8:	4798      	blx	r3
    99da:	0003      	movs	r3, r0
    99dc:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    99de:	2333      	movs	r3, #51	; 0x33
    99e0:	18fb      	adds	r3, r7, r3
    99e2:	781b      	ldrb	r3, [r3, #0]
    99e4:	2b00      	cmp	r3, #0
    99e6:	d003      	beq.n	99f0 <tcc_init+0x10c>
		return status;
    99e8:	2333      	movs	r3, #51	; 0x33
    99ea:	18fb      	adds	r3, r7, r3
    99ec:	781b      	ldrb	r3, [r3, #0]
    99ee:	e157      	b.n	9ca0 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    99f0:	232b      	movs	r3, #43	; 0x2b
    99f2:	18fa      	adds	r2, r7, r3
    99f4:	6879      	ldr	r1, [r7, #4]
    99f6:	233b      	movs	r3, #59	; 0x3b
    99f8:	18fb      	adds	r3, r7, r3
    99fa:	781b      	ldrb	r3, [r3, #0]
    99fc:	0018      	movs	r0, r3
    99fe:	4b89      	ldr	r3, [pc, #548]	; (9c24 <tcc_init+0x340>)
    9a00:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    9a02:	2333      	movs	r3, #51	; 0x33
    9a04:	18fc      	adds	r4, r7, r3
    9a06:	2320      	movs	r3, #32
    9a08:	18fa      	adds	r2, r7, r3
    9a0a:	6879      	ldr	r1, [r7, #4]
    9a0c:	233b      	movs	r3, #59	; 0x3b
    9a0e:	18fb      	adds	r3, r7, r3
    9a10:	781b      	ldrb	r3, [r3, #0]
    9a12:	0018      	movs	r0, r3
    9a14:	4b84      	ldr	r3, [pc, #528]	; (9c28 <tcc_init+0x344>)
    9a16:	4798      	blx	r3
    9a18:	0003      	movs	r3, r0
    9a1a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    9a1c:	2333      	movs	r3, #51	; 0x33
    9a1e:	18fb      	adds	r3, r7, r3
    9a20:	781b      	ldrb	r3, [r3, #0]
    9a22:	2b00      	cmp	r3, #0
    9a24:	d003      	beq.n	9a2e <tcc_init+0x14a>
		return status;
    9a26:	2333      	movs	r3, #51	; 0x33
    9a28:	18fb      	adds	r3, r7, r3
    9a2a:	781b      	ldrb	r3, [r3, #0]
    9a2c:	e138      	b.n	9ca0 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    9a2e:	2300      	movs	r3, #0
    9a30:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    9a32:	2333      	movs	r3, #51	; 0x33
    9a34:	18fc      	adds	r4, r7, r3
    9a36:	231c      	movs	r3, #28
    9a38:	18fa      	adds	r2, r7, r3
    9a3a:	6879      	ldr	r1, [r7, #4]
    9a3c:	233b      	movs	r3, #59	; 0x3b
    9a3e:	18fb      	adds	r3, r7, r3
    9a40:	781b      	ldrb	r3, [r3, #0]
    9a42:	0018      	movs	r0, r3
    9a44:	4b79      	ldr	r3, [pc, #484]	; (9c2c <tcc_init+0x348>)
    9a46:	4798      	blx	r3
    9a48:	0003      	movs	r3, r0
    9a4a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    9a4c:	2333      	movs	r3, #51	; 0x33
    9a4e:	18fb      	adds	r3, r7, r3
    9a50:	781b      	ldrb	r3, [r3, #0]
    9a52:	2b00      	cmp	r3, #0
    9a54:	d003      	beq.n	9a5e <tcc_init+0x17a>
		return status;
    9a56:	2333      	movs	r3, #51	; 0x33
    9a58:	18fb      	adds	r3, r7, r3
    9a5a:	781b      	ldrb	r3, [r3, #0]
    9a5c:	e120      	b.n	9ca0 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    9a5e:	2333      	movs	r3, #51	; 0x33
    9a60:	18fc      	adds	r4, r7, r3
    9a62:	2318      	movs	r3, #24
    9a64:	18fa      	adds	r2, r7, r3
    9a66:	6879      	ldr	r1, [r7, #4]
    9a68:	233b      	movs	r3, #59	; 0x3b
    9a6a:	18fb      	adds	r3, r7, r3
    9a6c:	781b      	ldrb	r3, [r3, #0]
    9a6e:	0018      	movs	r0, r3
    9a70:	4b6f      	ldr	r3, [pc, #444]	; (9c30 <tcc_init+0x34c>)
    9a72:	4798      	blx	r3
    9a74:	0003      	movs	r3, r0
    9a76:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    9a78:	2333      	movs	r3, #51	; 0x33
    9a7a:	18fb      	adds	r3, r7, r3
    9a7c:	781b      	ldrb	r3, [r3, #0]
    9a7e:	2b00      	cmp	r3, #0
    9a80:	d003      	beq.n	9a8a <tcc_init+0x1a6>
		return status;
    9a82:	2333      	movs	r3, #51	; 0x33
    9a84:	18fb      	adds	r3, r7, r3
    9a86:	781b      	ldrb	r3, [r3, #0]
    9a88:	e10a      	b.n	9ca0 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    9a8a:	2300      	movs	r3, #0
    9a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    9a8e:	e009      	b.n	9aa4 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    9a90:	68fa      	ldr	r2, [r7, #12]
    9a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9a94:	009b      	lsls	r3, r3, #2
    9a96:	18d3      	adds	r3, r2, r3
    9a98:	3304      	adds	r3, #4
    9a9a:	2200      	movs	r2, #0
    9a9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    9a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9aa0:	3301      	adds	r3, #1
    9aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
    9aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9aa6:	2b0b      	cmp	r3, #11
    9aa8:	ddf2      	ble.n	9a90 <tcc_init+0x1ac>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    9aaa:	68fb      	ldr	r3, [r7, #12]
    9aac:	2200      	movs	r2, #0
    9aae:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    9ab0:	68fb      	ldr	r3, [r7, #12]
    9ab2:	2200      	movs	r2, #0
    9ab4:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    9ab6:	233b      	movs	r3, #59	; 0x3b
    9ab8:	18fb      	adds	r3, r7, r3
    9aba:	781a      	ldrb	r2, [r3, #0]
    9abc:	4b5d      	ldr	r3, [pc, #372]	; (9c34 <tcc_init+0x350>)
    9abe:	0092      	lsls	r2, r2, #2
    9ac0:	68f9      	ldr	r1, [r7, #12]
    9ac2:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    9ac4:	68fb      	ldr	r3, [r7, #12]
    9ac6:	68ba      	ldr	r2, [r7, #8]
    9ac8:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    9aca:	687b      	ldr	r3, [r7, #4]
    9acc:	22a0      	movs	r2, #160	; 0xa0
    9ace:	5c99      	ldrb	r1, [r3, r2]
    9ad0:	68fb      	ldr	r3, [r7, #12]
    9ad2:	223c      	movs	r2, #60	; 0x3c
    9ad4:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    9ad6:	2314      	movs	r3, #20
    9ad8:	18fb      	adds	r3, r7, r3
    9ada:	0018      	movs	r0, r3
    9adc:	4b56      	ldr	r3, [pc, #344]	; (9c38 <tcc_init+0x354>)
    9ade:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    9ae0:	687b      	ldr	r3, [r7, #4]
    9ae2:	7a9a      	ldrb	r2, [r3, #10]
    9ae4:	2314      	movs	r3, #20
    9ae6:	18fb      	adds	r3, r7, r3
    9ae8:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    9aea:	233b      	movs	r3, #59	; 0x3b
    9aec:	18fb      	adds	r3, r7, r3
    9aee:	781b      	ldrb	r3, [r3, #0]
    9af0:	4a52      	ldr	r2, [pc, #328]	; (9c3c <tcc_init+0x358>)
    9af2:	5cd3      	ldrb	r3, [r2, r3]
    9af4:	2214      	movs	r2, #20
    9af6:	18ba      	adds	r2, r7, r2
    9af8:	0011      	movs	r1, r2
    9afa:	0018      	movs	r0, r3
    9afc:	4b50      	ldr	r3, [pc, #320]	; (9c40 <tcc_init+0x35c>)
    9afe:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    9b00:	233b      	movs	r3, #59	; 0x3b
    9b02:	18fb      	adds	r3, r7, r3
    9b04:	781b      	ldrb	r3, [r3, #0]
    9b06:	4a4d      	ldr	r2, [pc, #308]	; (9c3c <tcc_init+0x358>)
    9b08:	5cd3      	ldrb	r3, [r2, r3]
    9b0a:	0018      	movs	r0, r3
    9b0c:	4b4d      	ldr	r3, [pc, #308]	; (9c44 <tcc_init+0x360>)
    9b0e:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    9b10:	2300      	movs	r3, #0
    9b12:	63fb      	str	r3, [r7, #60]	; 0x3c
    9b14:	e02d      	b.n	9b72 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    9b16:	687a      	ldr	r2, [r7, #4]
    9b18:	2198      	movs	r1, #152	; 0x98
    9b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9b1c:	18d3      	adds	r3, r2, r3
    9b1e:	185b      	adds	r3, r3, r1
    9b20:	781b      	ldrb	r3, [r3, #0]
    9b22:	2201      	movs	r2, #1
    9b24:	4053      	eors	r3, r2
    9b26:	b2db      	uxtb	r3, r3
    9b28:	2b00      	cmp	r3, #0
    9b2a:	d11e      	bne.n	9b6a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    9b2c:	2310      	movs	r3, #16
    9b2e:	18fb      	adds	r3, r7, r3
    9b30:	0018      	movs	r0, r3
    9b32:	4b45      	ldr	r3, [pc, #276]	; (9c48 <tcc_init+0x364>)
    9b34:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    9b36:	687b      	ldr	r3, [r7, #4]
    9b38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9b3a:	321e      	adds	r2, #30
    9b3c:	0092      	lsls	r2, r2, #2
    9b3e:	58d3      	ldr	r3, [r2, r3]
    9b40:	b2da      	uxtb	r2, r3
    9b42:	2310      	movs	r3, #16
    9b44:	18fb      	adds	r3, r7, r3
    9b46:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    9b48:	2310      	movs	r3, #16
    9b4a:	18fb      	adds	r3, r7, r3
    9b4c:	2201      	movs	r2, #1
    9b4e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    9b50:	687b      	ldr	r3, [r7, #4]
    9b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9b54:	3216      	adds	r2, #22
    9b56:	0092      	lsls	r2, r2, #2
    9b58:	58d3      	ldr	r3, [r2, r3]
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    9b5a:	b2db      	uxtb	r3, r3
    9b5c:	2210      	movs	r2, #16
    9b5e:	18ba      	adds	r2, r7, r2
    9b60:	0011      	movs	r1, r2
    9b62:	0018      	movs	r0, r3
    9b64:	4b39      	ldr	r3, [pc, #228]	; (9c4c <tcc_init+0x368>)
    9b66:	4798      	blx	r3
    9b68:	e000      	b.n	9b6c <tcc_init+0x288>

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    9b6a:	46c0      	nop			; (mov r8, r8)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    9b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9b6e:	3301      	adds	r3, #1
    9b70:	63fb      	str	r3, [r7, #60]	; 0x3c
    9b72:	233b      	movs	r3, #59	; 0x3b
    9b74:	18fb      	adds	r3, r7, r3
    9b76:	781b      	ldrb	r3, [r3, #0]
    9b78:	4a28      	ldr	r2, [pc, #160]	; (9c1c <tcc_init+0x338>)
    9b7a:	5cd3      	ldrb	r3, [r2, r3]
    9b7c:	1e1a      	subs	r2, r3, #0
    9b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9b80:	429a      	cmp	r2, r3
    9b82:	dcc8      	bgt.n	9b16 <tcc_init+0x232>
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    9b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9b86:	68bb      	ldr	r3, [r7, #8]
    9b88:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    9b8a:	46c0      	nop			; (mov r8, r8)
    9b8c:	68bb      	ldr	r3, [r7, #8]
    9b8e:	689b      	ldr	r3, [r3, #8]
    9b90:	2204      	movs	r2, #4
    9b92:	4013      	ands	r3, r2
    9b94:	d1fa      	bne.n	9b8c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    9b96:	68bb      	ldr	r3, [r7, #8]
    9b98:	22ff      	movs	r2, #255	; 0xff
    9b9a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    9b9c:	46c0      	nop			; (mov r8, r8)
    9b9e:	68bb      	ldr	r3, [r7, #8]
    9ba0:	689b      	ldr	r3, [r3, #8]
    9ba2:	2204      	movs	r2, #4
    9ba4:	4013      	ands	r3, r2
    9ba6:	d1fa      	bne.n	9b9e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    9ba8:	232b      	movs	r3, #43	; 0x2b
    9baa:	18fb      	adds	r3, r7, r3
    9bac:	781a      	ldrb	r2, [r3, #0]
    9bae:	68bb      	ldr	r3, [r7, #8]
    9bb0:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    9bb2:	2320      	movs	r3, #32
    9bb4:	18fb      	adds	r3, r7, r3
    9bb6:	681a      	ldr	r2, [r3, #0]
    9bb8:	68bb      	ldr	r3, [r7, #8]
    9bba:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    9bbc:	2320      	movs	r3, #32
    9bbe:	18fb      	adds	r3, r7, r3
    9bc0:	685a      	ldr	r2, [r3, #4]
    9bc2:	68bb      	ldr	r3, [r7, #8]
    9bc4:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    9bc6:	69fa      	ldr	r2, [r7, #28]
    9bc8:	68bb      	ldr	r3, [r7, #8]
    9bca:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    9bcc:	46c0      	nop			; (mov r8, r8)
    9bce:	68bb      	ldr	r3, [r7, #8]
    9bd0:	689b      	ldr	r3, [r3, #8]
    9bd2:	4a1f      	ldr	r2, [pc, #124]	; (9c50 <tcc_init+0x36c>)
    9bd4:	4013      	ands	r3, r2
    9bd6:	d1fa      	bne.n	9bce <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    9bd8:	69ba      	ldr	r2, [r7, #24]
    9bda:	68bb      	ldr	r3, [r7, #8]
    9bdc:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    9bde:	46c0      	nop			; (mov r8, r8)
    9be0:	68bb      	ldr	r3, [r7, #8]
    9be2:	689b      	ldr	r3, [r3, #8]
    9be4:	2210      	movs	r2, #16
    9be6:	4013      	ands	r3, r2
    9be8:	d1fa      	bne.n	9be0 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    9bea:	687b      	ldr	r3, [r7, #4]
    9bec:	681a      	ldr	r2, [r3, #0]
    9bee:	68bb      	ldr	r3, [r7, #8]
    9bf0:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    9bf2:	46c0      	nop			; (mov r8, r8)
    9bf4:	68bb      	ldr	r3, [r7, #8]
    9bf6:	689b      	ldr	r3, [r3, #8]
    9bf8:	4a16      	ldr	r2, [pc, #88]	; (9c54 <tcc_init+0x370>)
    9bfa:	4013      	ands	r3, r2
    9bfc:	d1fa      	bne.n	9bf4 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    9bfe:	687b      	ldr	r3, [r7, #4]
    9c00:	685a      	ldr	r2, [r3, #4]
    9c02:	68bb      	ldr	r3, [r7, #8]
    9c04:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    9c06:	2300      	movs	r3, #0
    9c08:	63fb      	str	r3, [r7, #60]	; 0x3c
    9c0a:	e03f      	b.n	9c8c <tcc_init+0x3a8>
    9c0c:	0000924d 	.word	0x0000924d
    9c10:	0000e968 	.word	0x0000e968
    9c14:	000091c9 	.word	0x000091c9
    9c18:	0000e974 	.word	0x0000e974
    9c1c:	0000e984 	.word	0x0000e984
    9c20:	00009559 	.word	0x00009559
    9c24:	000095fd 	.word	0x000095fd
    9c28:	00009659 	.word	0x00009659
    9c2c:	00009775 	.word	0x00009775
    9c30:	0000984d 	.word	0x0000984d
    9c34:	20000458 	.word	0x20000458
    9c38:	000091b1 	.word	0x000091b1
    9c3c:	0000e964 	.word	0x0000e964
    9c40:	00008e3d 	.word	0x00008e3d
    9c44:	00008e81 	.word	0x00008e81
    9c48:	00009225 	.word	0x00009225
    9c4c:	00009129 	.word	0x00009129
    9c50:	00020040 	.word	0x00020040
    9c54:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    9c58:	46c0      	nop			; (mov r8, r8)
    9c5a:	68bb      	ldr	r3, [r7, #8]
    9c5c:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    9c5e:	4912      	ldr	r1, [pc, #72]	; (9ca8 <tcc_init+0x3c4>)
    9c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9c62:	4091      	lsls	r1, r2
    9c64:	000a      	movs	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    9c66:	4013      	ands	r3, r2
    9c68:	d1f7      	bne.n	9c5a <tcc_init+0x376>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    9c6a:	687a      	ldr	r2, [r7, #4]
    9c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9c6e:	3306      	adds	r3, #6
    9c70:	009b      	lsls	r3, r3, #2
    9c72:	18d3      	adds	r3, r2, r3
    9c74:	3304      	adds	r3, #4
    9c76:	681a      	ldr	r2, [r3, #0]
    9c78:	68b9      	ldr	r1, [r7, #8]
    9c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9c7c:	3310      	adds	r3, #16
    9c7e:	009b      	lsls	r3, r3, #2
    9c80:	18cb      	adds	r3, r1, r3
    9c82:	3304      	adds	r3, #4
    9c84:	601a      	str	r2, [r3, #0]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    9c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9c88:	3301      	adds	r3, #1
    9c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    9c8c:	233b      	movs	r3, #59	; 0x3b
    9c8e:	18fb      	adds	r3, r7, r3
    9c90:	781b      	ldrb	r3, [r3, #0]
    9c92:	4a06      	ldr	r2, [pc, #24]	; (9cac <tcc_init+0x3c8>)
    9c94:	5cd3      	ldrb	r3, [r2, r3]
    9c96:	1e1a      	subs	r2, r3, #0
    9c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9c9a:	429a      	cmp	r2, r3
    9c9c:	dcdc      	bgt.n	9c58 <tcc_init+0x374>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    9c9e:	2300      	movs	r3, #0
}
    9ca0:	0018      	movs	r0, r3
    9ca2:	46bd      	mov	sp, r7
    9ca4:	b011      	add	sp, #68	; 0x44
    9ca6:	bd90      	pop	{r4, r7, pc}
    9ca8:	00080100 	.word	0x00080100
    9cac:	0000e980 	.word	0x0000e980

00009cb0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    9cb0:	b580      	push	{r7, lr}
    9cb2:	b082      	sub	sp, #8
    9cb4:	af00      	add	r7, sp, #0
    9cb6:	0002      	movs	r2, r0
    9cb8:	1dfb      	adds	r3, r7, #7
    9cba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9cbc:	4b06      	ldr	r3, [pc, #24]	; (9cd8 <system_interrupt_enable+0x28>)
    9cbe:	1dfa      	adds	r2, r7, #7
    9cc0:	7812      	ldrb	r2, [r2, #0]
    9cc2:	0011      	movs	r1, r2
    9cc4:	221f      	movs	r2, #31
    9cc6:	400a      	ands	r2, r1
    9cc8:	2101      	movs	r1, #1
    9cca:	4091      	lsls	r1, r2
    9ccc:	000a      	movs	r2, r1
    9cce:	601a      	str	r2, [r3, #0]
}
    9cd0:	46c0      	nop			; (mov r8, r8)
    9cd2:	46bd      	mov	sp, r7
    9cd4:	b002      	add	sp, #8
    9cd6:	bd80      	pop	{r7, pc}
    9cd8:	e000e100 	.word	0xe000e100

00009cdc <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    9cdc:	b580      	push	{r7, lr}
    9cde:	b082      	sub	sp, #8
    9ce0:	af00      	add	r7, sp, #0
    9ce2:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    9ce4:	4a04      	ldr	r2, [pc, #16]	; (9cf8 <_tcc_interrupt_get_interrupt_vector+0x1c>)
    9ce6:	687b      	ldr	r3, [r7, #4]
    9ce8:	18d3      	adds	r3, r2, r3
    9cea:	781b      	ldrb	r3, [r3, #0]
    9cec:	b25b      	sxtb	r3, r3
}
    9cee:	0018      	movs	r0, r3
    9cf0:	46bd      	mov	sp, r7
    9cf2:	b002      	add	sp, #8
    9cf4:	bd80      	pop	{r7, pc}
    9cf6:	46c0      	nop			; (mov r8, r8)
    9cf8:	2000000c 	.word	0x2000000c

00009cfc <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    9cfc:	b580      	push	{r7, lr}
    9cfe:	b084      	sub	sp, #16
    9d00:	af00      	add	r7, sp, #0
    9d02:	60f8      	str	r0, [r7, #12]
    9d04:	60b9      	str	r1, [r7, #8]
    9d06:	1dfb      	adds	r3, r7, #7
    9d08:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    9d0a:	1dfb      	adds	r3, r7, #7
    9d0c:	781b      	ldrb	r3, [r3, #0]
    9d0e:	68fa      	ldr	r2, [r7, #12]
    9d10:	009b      	lsls	r3, r3, #2
    9d12:	18d3      	adds	r3, r2, r3
    9d14:	3304      	adds	r3, #4
    9d16:	68ba      	ldr	r2, [r7, #8]
    9d18:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    9d1a:	68fb      	ldr	r3, [r7, #12]
    9d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    9d1e:	1dfb      	adds	r3, r7, #7
    9d20:	7819      	ldrb	r1, [r3, #0]
    9d22:	4b05      	ldr	r3, [pc, #20]	; (9d38 <tcc_register_callback+0x3c>)
    9d24:	0089      	lsls	r1, r1, #2
    9d26:	58cb      	ldr	r3, [r1, r3]
    9d28:	431a      	orrs	r2, r3
    9d2a:	68fb      	ldr	r3, [r7, #12]
    9d2c:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    9d2e:	2300      	movs	r3, #0
}
    9d30:	0018      	movs	r0, r3
    9d32:	46bd      	mov	sp, r7
    9d34:	b004      	add	sp, #16
    9d36:	bd80      	pop	{r7, pc}
    9d38:	0000e988 	.word	0x0000e988

00009d3c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    9d3c:	b580      	push	{r7, lr}
    9d3e:	b082      	sub	sp, #8
    9d40:	af00      	add	r7, sp, #0
    9d42:	6078      	str	r0, [r7, #4]
    9d44:	000a      	movs	r2, r1
    9d46:	1cfb      	adds	r3, r7, #3
    9d48:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    9d4a:	687b      	ldr	r3, [r7, #4]
    9d4c:	681b      	ldr	r3, [r3, #0]
    9d4e:	0018      	movs	r0, r3
    9d50:	4b0f      	ldr	r3, [pc, #60]	; (9d90 <tcc_enable_callback+0x54>)
    9d52:	4798      	blx	r3
    9d54:	0003      	movs	r3, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    9d56:	0018      	movs	r0, r3
    9d58:	4b0e      	ldr	r3, [pc, #56]	; (9d94 <tcc_enable_callback+0x58>)
    9d5a:	4798      	blx	r3
    9d5c:	0003      	movs	r3, r0
    9d5e:	0018      	movs	r0, r3
    9d60:	4b0d      	ldr	r3, [pc, #52]	; (9d98 <tcc_enable_callback+0x5c>)
    9d62:	4798      	blx	r3
			_tcc_get_inst_index(module->hw)));

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    9d64:	687b      	ldr	r3, [r7, #4]
    9d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    9d68:	1cfb      	adds	r3, r7, #3
    9d6a:	7819      	ldrb	r1, [r3, #0]
    9d6c:	4b0b      	ldr	r3, [pc, #44]	; (9d9c <tcc_enable_callback+0x60>)
    9d6e:	0089      	lsls	r1, r1, #2
    9d70:	58cb      	ldr	r3, [r1, r3]
    9d72:	431a      	orrs	r2, r3
    9d74:	687b      	ldr	r3, [r7, #4]
    9d76:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    9d78:	687b      	ldr	r3, [r7, #4]
    9d7a:	681b      	ldr	r3, [r3, #0]
    9d7c:	1cfa      	adds	r2, r7, #3
    9d7e:	7811      	ldrb	r1, [r2, #0]
    9d80:	4a06      	ldr	r2, [pc, #24]	; (9d9c <tcc_enable_callback+0x60>)
    9d82:	0089      	lsls	r1, r1, #2
    9d84:	588a      	ldr	r2, [r1, r2]
    9d86:	629a      	str	r2, [r3, #40]	; 0x28
}
    9d88:	46c0      	nop			; (mov r8, r8)
    9d8a:	46bd      	mov	sp, r7
    9d8c:	b002      	add	sp, #8
    9d8e:	bd80      	pop	{r7, pc}
    9d90:	0000924d 	.word	0x0000924d
    9d94:	00009cdd 	.word	0x00009cdd
    9d98:	00009cb1 	.word	0x00009cb1
    9d9c:	0000e988 	.word	0x0000e988

00009da0 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    9da0:	b580      	push	{r7, lr}
    9da2:	af00      	add	r7, sp, #0
    9da4:	2000      	movs	r0, #0
    9da6:	4b02      	ldr	r3, [pc, #8]	; (9db0 <TCC0_Handler+0x10>)
    9da8:	4798      	blx	r3
    9daa:	46c0      	nop			; (mov r8, r8)
    9dac:	46bd      	mov	sp, r7
    9dae:	bd80      	pop	{r7, pc}
    9db0:	00009ddd 	.word	0x00009ddd

00009db4 <TCC1_Handler>:
    9db4:	b580      	push	{r7, lr}
    9db6:	af00      	add	r7, sp, #0
    9db8:	2001      	movs	r0, #1
    9dba:	4b02      	ldr	r3, [pc, #8]	; (9dc4 <TCC1_Handler+0x10>)
    9dbc:	4798      	blx	r3
    9dbe:	46c0      	nop			; (mov r8, r8)
    9dc0:	46bd      	mov	sp, r7
    9dc2:	bd80      	pop	{r7, pc}
    9dc4:	00009ddd 	.word	0x00009ddd

00009dc8 <TCC2_Handler>:
    9dc8:	b580      	push	{r7, lr}
    9dca:	af00      	add	r7, sp, #0
    9dcc:	2002      	movs	r0, #2
    9dce:	4b02      	ldr	r3, [pc, #8]	; (9dd8 <TCC2_Handler+0x10>)
    9dd0:	4798      	blx	r3
    9dd2:	46c0      	nop			; (mov r8, r8)
    9dd4:	46bd      	mov	sp, r7
    9dd6:	bd80      	pop	{r7, pc}
    9dd8:	00009ddd 	.word	0x00009ddd

00009ddc <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    9ddc:	b580      	push	{r7, lr}
    9dde:	b086      	sub	sp, #24
    9de0:	af00      	add	r7, sp, #0
    9de2:	0002      	movs	r2, r0
    9de4:	1dfb      	adds	r3, r7, #7
    9de6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    9de8:	1dfb      	adds	r3, r7, #7
    9dea:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    9dec:	4b18      	ldr	r3, [pc, #96]	; (9e50 <_tcc_interrupt_handler+0x74>)
    9dee:	0092      	lsls	r2, r2, #2
    9df0:	58d3      	ldr	r3, [r2, r3]
    9df2:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    9df4:	693b      	ldr	r3, [r7, #16]
    9df6:	681b      	ldr	r3, [r3, #0]
    9df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    9dfa:	693b      	ldr	r3, [r7, #16]
    9dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    9dfe:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    9e00:	693b      	ldr	r3, [r7, #16]
    9e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    9e04:	4013      	ands	r3, r2
    9e06:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    9e08:	2300      	movs	r3, #0
    9e0a:	617b      	str	r3, [r7, #20]
    9e0c:	e019      	b.n	9e42 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    9e0e:	4b11      	ldr	r3, [pc, #68]	; (9e54 <_tcc_interrupt_handler+0x78>)
    9e10:	697a      	ldr	r2, [r7, #20]
    9e12:	0092      	lsls	r2, r2, #2
    9e14:	58d3      	ldr	r3, [r2, r3]
    9e16:	68fa      	ldr	r2, [r7, #12]
    9e18:	4013      	ands	r3, r2
    9e1a:	d00f      	beq.n	9e3c <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    9e1c:	693a      	ldr	r2, [r7, #16]
    9e1e:	697b      	ldr	r3, [r7, #20]
    9e20:	009b      	lsls	r3, r3, #2
    9e22:	18d3      	adds	r3, r2, r3
    9e24:	3304      	adds	r3, #4
    9e26:	681b      	ldr	r3, [r3, #0]
    9e28:	693a      	ldr	r2, [r7, #16]
    9e2a:	0010      	movs	r0, r2
    9e2c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    9e2e:	693b      	ldr	r3, [r7, #16]
    9e30:	681b      	ldr	r3, [r3, #0]
    9e32:	4a08      	ldr	r2, [pc, #32]	; (9e54 <_tcc_interrupt_handler+0x78>)
    9e34:	6979      	ldr	r1, [r7, #20]
    9e36:	0089      	lsls	r1, r1, #2
    9e38:	588a      	ldr	r2, [r1, r2]
    9e3a:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    9e3c:	697b      	ldr	r3, [r7, #20]
    9e3e:	3301      	adds	r3, #1
    9e40:	617b      	str	r3, [r7, #20]
    9e42:	697b      	ldr	r3, [r7, #20]
    9e44:	2b0b      	cmp	r3, #11
    9e46:	dde2      	ble.n	9e0e <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    9e48:	46c0      	nop			; (mov r8, r8)
    9e4a:	46bd      	mov	sp, r7
    9e4c:	b006      	add	sp, #24
    9e4e:	bd80      	pop	{r7, pc}
    9e50:	20000458 	.word	0x20000458
    9e54:	0000e988 	.word	0x0000e988

00009e58 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    9e58:	b580      	push	{r7, lr}
    9e5a:	b082      	sub	sp, #8
    9e5c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    9e5e:	4b2f      	ldr	r3, [pc, #188]	; (9f1c <Reset_Handler+0xc4>)
    9e60:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    9e62:	4b2f      	ldr	r3, [pc, #188]	; (9f20 <Reset_Handler+0xc8>)
    9e64:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    9e66:	687a      	ldr	r2, [r7, #4]
    9e68:	683b      	ldr	r3, [r7, #0]
    9e6a:	429a      	cmp	r2, r3
    9e6c:	d00c      	beq.n	9e88 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    9e6e:	e007      	b.n	9e80 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    9e70:	683b      	ldr	r3, [r7, #0]
    9e72:	1d1a      	adds	r2, r3, #4
    9e74:	603a      	str	r2, [r7, #0]
    9e76:	687a      	ldr	r2, [r7, #4]
    9e78:	1d11      	adds	r1, r2, #4
    9e7a:	6079      	str	r1, [r7, #4]
    9e7c:	6812      	ldr	r2, [r2, #0]
    9e7e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    9e80:	683a      	ldr	r2, [r7, #0]
    9e82:	4b28      	ldr	r3, [pc, #160]	; (9f24 <Reset_Handler+0xcc>)
    9e84:	429a      	cmp	r2, r3
    9e86:	d3f3      	bcc.n	9e70 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    9e88:	4b27      	ldr	r3, [pc, #156]	; (9f28 <Reset_Handler+0xd0>)
    9e8a:	603b      	str	r3, [r7, #0]
    9e8c:	e004      	b.n	9e98 <Reset_Handler+0x40>
                *pDest++ = 0;
    9e8e:	683b      	ldr	r3, [r7, #0]
    9e90:	1d1a      	adds	r2, r3, #4
    9e92:	603a      	str	r2, [r7, #0]
    9e94:	2200      	movs	r2, #0
    9e96:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    9e98:	683a      	ldr	r2, [r7, #0]
    9e9a:	4b24      	ldr	r3, [pc, #144]	; (9f2c <Reset_Handler+0xd4>)
    9e9c:	429a      	cmp	r2, r3
    9e9e:	d3f6      	bcc.n	9e8e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    9ea0:	4b23      	ldr	r3, [pc, #140]	; (9f30 <Reset_Handler+0xd8>)
    9ea2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    9ea4:	4b23      	ldr	r3, [pc, #140]	; (9f34 <Reset_Handler+0xdc>)
    9ea6:	687a      	ldr	r2, [r7, #4]
    9ea8:	21ff      	movs	r1, #255	; 0xff
    9eaa:	438a      	bics	r2, r1
    9eac:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    9eae:	4a22      	ldr	r2, [pc, #136]	; (9f38 <Reset_Handler+0xe0>)
    9eb0:	2390      	movs	r3, #144	; 0x90
    9eb2:	005b      	lsls	r3, r3, #1
    9eb4:	2102      	movs	r1, #2
    9eb6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    9eb8:	4a20      	ldr	r2, [pc, #128]	; (9f3c <Reset_Handler+0xe4>)
    9eba:	78d3      	ldrb	r3, [r2, #3]
    9ebc:	2103      	movs	r1, #3
    9ebe:	438b      	bics	r3, r1
    9ec0:	1c19      	adds	r1, r3, #0
    9ec2:	2302      	movs	r3, #2
    9ec4:	430b      	orrs	r3, r1
    9ec6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    9ec8:	4a1c      	ldr	r2, [pc, #112]	; (9f3c <Reset_Handler+0xe4>)
    9eca:	78d3      	ldrb	r3, [r2, #3]
    9ecc:	210c      	movs	r1, #12
    9ece:	438b      	bics	r3, r1
    9ed0:	1c19      	adds	r1, r3, #0
    9ed2:	2308      	movs	r3, #8
    9ed4:	430b      	orrs	r3, r1
    9ed6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    9ed8:	4a19      	ldr	r2, [pc, #100]	; (9f40 <Reset_Handler+0xe8>)
    9eda:	7b93      	ldrb	r3, [r2, #14]
    9edc:	2130      	movs	r1, #48	; 0x30
    9ede:	438b      	bics	r3, r1
    9ee0:	1c19      	adds	r1, r3, #0
    9ee2:	2320      	movs	r3, #32
    9ee4:	430b      	orrs	r3, r1
    9ee6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    9ee8:	4a15      	ldr	r2, [pc, #84]	; (9f40 <Reset_Handler+0xe8>)
    9eea:	7b93      	ldrb	r3, [r2, #14]
    9eec:	210c      	movs	r1, #12
    9eee:	438b      	bics	r3, r1
    9ef0:	1c19      	adds	r1, r3, #0
    9ef2:	2308      	movs	r3, #8
    9ef4:	430b      	orrs	r3, r1
    9ef6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    9ef8:	4a11      	ldr	r2, [pc, #68]	; (9f40 <Reset_Handler+0xe8>)
    9efa:	7b93      	ldrb	r3, [r2, #14]
    9efc:	2103      	movs	r1, #3
    9efe:	438b      	bics	r3, r1
    9f00:	1c19      	adds	r1, r3, #0
    9f02:	2302      	movs	r3, #2
    9f04:	430b      	orrs	r3, r1
    9f06:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    9f08:	4a0e      	ldr	r2, [pc, #56]	; (9f44 <Reset_Handler+0xec>)
    9f0a:	6853      	ldr	r3, [r2, #4]
    9f0c:	2180      	movs	r1, #128	; 0x80
    9f0e:	430b      	orrs	r3, r1
    9f10:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    9f12:	4b0d      	ldr	r3, [pc, #52]	; (9f48 <Reset_Handler+0xf0>)
    9f14:	4798      	blx	r3

        /* Branch to main function */
        main();
    9f16:	4b0d      	ldr	r3, [pc, #52]	; (9f4c <Reset_Handler+0xf4>)
    9f18:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    9f1a:	e7fe      	b.n	9f1a <Reset_Handler+0xc2>
    9f1c:	0000ecf8 	.word	0x0000ecf8
    9f20:	20000000 	.word	0x20000000
    9f24:	20000084 	.word	0x20000084
    9f28:	20000084 	.word	0x20000084
    9f2c:	200004d4 	.word	0x200004d4
    9f30:	00000000 	.word	0x00000000
    9f34:	e000ed00 	.word	0xe000ed00
    9f38:	41007000 	.word	0x41007000
    9f3c:	41005000 	.word	0x41005000
    9f40:	41004800 	.word	0x41004800
    9f44:	41004000 	.word	0x41004000
    9f48:	0000c27d 	.word	0x0000c27d
    9f4c:	0000af35 	.word	0x0000af35

00009f50 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    9f50:	b580      	push	{r7, lr}
    9f52:	af00      	add	r7, sp, #0
        while (1) {
        }
    9f54:	e7fe      	b.n	9f54 <Dummy_Handler+0x4>
    9f56:	46c0      	nop			; (mov r8, r8)

00009f58 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    9f58:	b580      	push	{r7, lr}
    9f5a:	b086      	sub	sp, #24
    9f5c:	af00      	add	r7, sp, #0
    9f5e:	60f8      	str	r0, [r7, #12]
    9f60:	60b9      	str	r1, [r7, #8]
    9f62:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    9f64:	2300      	movs	r3, #0
    9f66:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    9f68:	68fb      	ldr	r3, [r7, #12]
    9f6a:	2b00      	cmp	r3, #0
    9f6c:	d012      	beq.n	9f94 <_read+0x3c>
		return -1;
    9f6e:	2301      	movs	r3, #1
    9f70:	425b      	negs	r3, r3
    9f72:	e013      	b.n	9f9c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    9f74:	4b0b      	ldr	r3, [pc, #44]	; (9fa4 <_read+0x4c>)
    9f76:	681a      	ldr	r2, [r3, #0]
    9f78:	4b0b      	ldr	r3, [pc, #44]	; (9fa8 <_read+0x50>)
    9f7a:	681b      	ldr	r3, [r3, #0]
    9f7c:	68b9      	ldr	r1, [r7, #8]
    9f7e:	0018      	movs	r0, r3
    9f80:	4790      	blx	r2
		ptr++;
    9f82:	68bb      	ldr	r3, [r7, #8]
    9f84:	3301      	adds	r3, #1
    9f86:	60bb      	str	r3, [r7, #8]
		nChars++;
    9f88:	697b      	ldr	r3, [r7, #20]
    9f8a:	3301      	adds	r3, #1
    9f8c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    9f8e:	687b      	ldr	r3, [r7, #4]
    9f90:	3b01      	subs	r3, #1
    9f92:	607b      	str	r3, [r7, #4]
    9f94:	687b      	ldr	r3, [r7, #4]
    9f96:	2b00      	cmp	r3, #0
    9f98:	dcec      	bgt.n	9f74 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    9f9a:	697b      	ldr	r3, [r7, #20]
}
    9f9c:	0018      	movs	r0, r3
    9f9e:	46bd      	mov	sp, r7
    9fa0:	b006      	add	sp, #24
    9fa2:	bd80      	pop	{r7, pc}
    9fa4:	20000464 	.word	0x20000464
    9fa8:	2000046c 	.word	0x2000046c

00009fac <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    9fac:	b580      	push	{r7, lr}
    9fae:	b086      	sub	sp, #24
    9fb0:	af00      	add	r7, sp, #0
    9fb2:	60f8      	str	r0, [r7, #12]
    9fb4:	60b9      	str	r1, [r7, #8]
    9fb6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    9fb8:	2300      	movs	r3, #0
    9fba:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    9fbc:	68fb      	ldr	r3, [r7, #12]
    9fbe:	2b01      	cmp	r3, #1
    9fc0:	d01d      	beq.n	9ffe <_write+0x52>
    9fc2:	68fb      	ldr	r3, [r7, #12]
    9fc4:	2b02      	cmp	r3, #2
    9fc6:	d01a      	beq.n	9ffe <_write+0x52>
    9fc8:	68fb      	ldr	r3, [r7, #12]
    9fca:	2b03      	cmp	r3, #3
    9fcc:	d017      	beq.n	9ffe <_write+0x52>
		return -1;
    9fce:	2301      	movs	r3, #1
    9fd0:	425b      	negs	r3, r3
    9fd2:	e018      	b.n	a006 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    9fd4:	4b0e      	ldr	r3, [pc, #56]	; (a010 <_write+0x64>)
    9fd6:	681a      	ldr	r2, [r3, #0]
    9fd8:	4b0e      	ldr	r3, [pc, #56]	; (a014 <_write+0x68>)
    9fda:	6818      	ldr	r0, [r3, #0]
    9fdc:	68bb      	ldr	r3, [r7, #8]
    9fde:	1c59      	adds	r1, r3, #1
    9fe0:	60b9      	str	r1, [r7, #8]
    9fe2:	781b      	ldrb	r3, [r3, #0]
    9fe4:	0019      	movs	r1, r3
    9fe6:	4790      	blx	r2
    9fe8:	1e03      	subs	r3, r0, #0
    9fea:	da02      	bge.n	9ff2 <_write+0x46>
			return -1;
    9fec:	2301      	movs	r3, #1
    9fee:	425b      	negs	r3, r3
    9ff0:	e009      	b.n	a006 <_write+0x5a>
		}
		++nChars;
    9ff2:	697b      	ldr	r3, [r7, #20]
    9ff4:	3301      	adds	r3, #1
    9ff6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    9ff8:	687b      	ldr	r3, [r7, #4]
    9ffa:	3b01      	subs	r3, #1
    9ffc:	607b      	str	r3, [r7, #4]
    9ffe:	687b      	ldr	r3, [r7, #4]
    a000:	2b00      	cmp	r3, #0
    a002:	d1e7      	bne.n	9fd4 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    a004:	697b      	ldr	r3, [r7, #20]
}
    a006:	0018      	movs	r0, r3
    a008:	46bd      	mov	sp, r7
    a00a:	b006      	add	sp, #24
    a00c:	bd80      	pop	{r7, pc}
    a00e:	46c0      	nop			; (mov r8, r8)
    a010:	20000468 	.word	0x20000468
    a014:	2000046c 	.word	0x2000046c

0000a018 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    a018:	b580      	push	{r7, lr}
    a01a:	b084      	sub	sp, #16
    a01c:	af00      	add	r7, sp, #0
    a01e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    a020:	4b0a      	ldr	r3, [pc, #40]	; (a04c <_sbrk+0x34>)
    a022:	681b      	ldr	r3, [r3, #0]
    a024:	2b00      	cmp	r3, #0
    a026:	d102      	bne.n	a02e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    a028:	4b08      	ldr	r3, [pc, #32]	; (a04c <_sbrk+0x34>)
    a02a:	4a09      	ldr	r2, [pc, #36]	; (a050 <_sbrk+0x38>)
    a02c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    a02e:	4b07      	ldr	r3, [pc, #28]	; (a04c <_sbrk+0x34>)
    a030:	681b      	ldr	r3, [r3, #0]
    a032:	60fb      	str	r3, [r7, #12]

	heap += incr;
    a034:	4b05      	ldr	r3, [pc, #20]	; (a04c <_sbrk+0x34>)
    a036:	681a      	ldr	r2, [r3, #0]
    a038:	687b      	ldr	r3, [r7, #4]
    a03a:	18d2      	adds	r2, r2, r3
    a03c:	4b03      	ldr	r3, [pc, #12]	; (a04c <_sbrk+0x34>)
    a03e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    a040:	68fb      	ldr	r3, [r7, #12]
}
    a042:	0018      	movs	r0, r3
    a044:	46bd      	mov	sp, r7
    a046:	b004      	add	sp, #16
    a048:	bd80      	pop	{r7, pc}
    a04a:	46c0      	nop			; (mov r8, r8)
    a04c:	200000f4 	.word	0x200000f4
    a050:	200024d8 	.word	0x200024d8

0000a054 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    a054:	b580      	push	{r7, lr}
    a056:	b082      	sub	sp, #8
    a058:	af00      	add	r7, sp, #0
    a05a:	6078      	str	r0, [r7, #4]
	return -1;
    a05c:	2301      	movs	r3, #1
    a05e:	425b      	negs	r3, r3
}
    a060:	0018      	movs	r0, r3
    a062:	46bd      	mov	sp, r7
    a064:	b002      	add	sp, #8
    a066:	bd80      	pop	{r7, pc}

0000a068 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    a068:	b580      	push	{r7, lr}
    a06a:	b082      	sub	sp, #8
    a06c:	af00      	add	r7, sp, #0
    a06e:	6078      	str	r0, [r7, #4]
    a070:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    a072:	683b      	ldr	r3, [r7, #0]
    a074:	2280      	movs	r2, #128	; 0x80
    a076:	0192      	lsls	r2, r2, #6
    a078:	605a      	str	r2, [r3, #4]

	return 0;
    a07a:	2300      	movs	r3, #0
}
    a07c:	0018      	movs	r0, r3
    a07e:	46bd      	mov	sp, r7
    a080:	b002      	add	sp, #8
    a082:	bd80      	pop	{r7, pc}

0000a084 <_isatty>:

extern int _isatty(int file)
{
    a084:	b580      	push	{r7, lr}
    a086:	b082      	sub	sp, #8
    a088:	af00      	add	r7, sp, #0
    a08a:	6078      	str	r0, [r7, #4]
	return 1;
    a08c:	2301      	movs	r3, #1
}
    a08e:	0018      	movs	r0, r3
    a090:	46bd      	mov	sp, r7
    a092:	b002      	add	sp, #8
    a094:	bd80      	pop	{r7, pc}
    a096:	46c0      	nop			; (mov r8, r8)

0000a098 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    a098:	b580      	push	{r7, lr}
    a09a:	b084      	sub	sp, #16
    a09c:	af00      	add	r7, sp, #0
    a09e:	60f8      	str	r0, [r7, #12]
    a0a0:	60b9      	str	r1, [r7, #8]
    a0a2:	607a      	str	r2, [r7, #4]
	return 0;
    a0a4:	2300      	movs	r3, #0
}
    a0a6:	0018      	movs	r0, r3
    a0a8:	46bd      	mov	sp, r7
    a0aa:	b004      	add	sp, #16
    a0ac:	bd80      	pop	{r7, pc}
    a0ae:	46c0      	nop			; (mov r8, r8)

0000a0b0 <stream_writer_init>:
#include "iot/stream_writer.h"
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
    a0b0:	b580      	push	{r7, lr}
    a0b2:	b084      	sub	sp, #16
    a0b4:	af00      	add	r7, sp, #0
    a0b6:	60f8      	str	r0, [r7, #12]
    a0b8:	60b9      	str	r1, [r7, #8]
    a0ba:	607a      	str	r2, [r7, #4]
    a0bc:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
    a0be:	68fb      	ldr	r3, [r7, #12]
    a0c0:	687a      	ldr	r2, [r7, #4]
    a0c2:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
    a0c4:	68fb      	ldr	r3, [r7, #12]
    a0c6:	68ba      	ldr	r2, [r7, #8]
    a0c8:	611a      	str	r2, [r3, #16]
	writer->written = 0;
    a0ca:	68fb      	ldr	r3, [r7, #12]
    a0cc:	2200      	movs	r2, #0
    a0ce:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
    a0d0:	68fb      	ldr	r3, [r7, #12]
    a0d2:	683a      	ldr	r2, [r7, #0]
    a0d4:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
    a0d6:	68fb      	ldr	r3, [r7, #12]
    a0d8:	69ba      	ldr	r2, [r7, #24]
    a0da:	60da      	str	r2, [r3, #12]
}
    a0dc:	46c0      	nop			; (mov r8, r8)
    a0de:	46bd      	mov	sp, r7
    a0e0:	b004      	add	sp, #16
    a0e2:	bd80      	pop	{r7, pc}

0000a0e4 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    a0e4:	b580      	push	{r7, lr}
    a0e6:	b084      	sub	sp, #16
    a0e8:	af00      	add	r7, sp, #0
    a0ea:	6078      	str	r0, [r7, #4]
    a0ec:	000a      	movs	r2, r1
    a0ee:	1cfb      	adds	r3, r7, #3
    a0f0:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
    a0f2:	687b      	ldr	r3, [r7, #4]
    a0f4:	681a      	ldr	r2, [r3, #0]
    a0f6:	687b      	ldr	r3, [r7, #4]
    a0f8:	685b      	ldr	r3, [r3, #4]
    a0fa:	1ad3      	subs	r3, r2, r3
    a0fc:	60fb      	str	r3, [r7, #12]

	if (remain < 1) {
    a0fe:	68fb      	ldr	r3, [r7, #12]
    a100:	2b00      	cmp	r3, #0
    a102:	dc03      	bgt.n	a10c <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
    a104:	687b      	ldr	r3, [r7, #4]
    a106:	0018      	movs	r0, r3
    a108:	4b08      	ldr	r3, [pc, #32]	; (a12c <stream_writer_send_8+0x48>)
    a10a:	4798      	blx	r3
	}

	writer->buffer[writer->written++] = (char)value;
    a10c:	687b      	ldr	r3, [r7, #4]
    a10e:	6919      	ldr	r1, [r3, #16]
    a110:	687b      	ldr	r3, [r7, #4]
    a112:	685b      	ldr	r3, [r3, #4]
    a114:	1c58      	adds	r0, r3, #1
    a116:	687a      	ldr	r2, [r7, #4]
    a118:	6050      	str	r0, [r2, #4]
    a11a:	18cb      	adds	r3, r1, r3
    a11c:	1cfa      	adds	r2, r7, #3
    a11e:	7812      	ldrb	r2, [r2, #0]
    a120:	701a      	strb	r2, [r3, #0]
}
    a122:	46c0      	nop			; (mov r8, r8)
    a124:	46bd      	mov	sp, r7
    a126:	b004      	add	sp, #16
    a128:	bd80      	pop	{r7, pc}
    a12a:	46c0      	nop			; (mov r8, r8)
    a12c:	0000a1ad 	.word	0x0000a1ad

0000a130 <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
    a130:	b580      	push	{r7, lr}
    a132:	b082      	sub	sp, #8
    a134:	af00      	add	r7, sp, #0
    a136:	6078      	str	r0, [r7, #4]
    a138:	000a      	movs	r2, r1
    a13a:	1cbb      	adds	r3, r7, #2
    a13c:	801a      	strh	r2, [r3, #0]
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    a13e:	1cbb      	adds	r3, r7, #2
    a140:	2200      	movs	r2, #0
    a142:	5e9b      	ldrsh	r3, [r3, r2]
    a144:	121b      	asrs	r3, r3, #8
    a146:	b21b      	sxth	r3, r3
    a148:	b25a      	sxtb	r2, r3
    a14a:	687b      	ldr	r3, [r7, #4]
    a14c:	0011      	movs	r1, r2
    a14e:	0018      	movs	r0, r3
    a150:	4b06      	ldr	r3, [pc, #24]	; (a16c <stream_writer_send_16BE+0x3c>)
    a152:	4798      	blx	r3
	stream_writer_send_8(writer, value & 0xFF);
    a154:	1cbb      	adds	r3, r7, #2
    a156:	881b      	ldrh	r3, [r3, #0]
    a158:	b25a      	sxtb	r2, r3
    a15a:	687b      	ldr	r3, [r7, #4]
    a15c:	0011      	movs	r1, r2
    a15e:	0018      	movs	r0, r3
    a160:	4b02      	ldr	r3, [pc, #8]	; (a16c <stream_writer_send_16BE+0x3c>)
    a162:	4798      	blx	r3
}
    a164:	46c0      	nop			; (mov r8, r8)
    a166:	46bd      	mov	sp, r7
    a168:	b002      	add	sp, #8
    a16a:	bd80      	pop	{r7, pc}
    a16c:	0000a0e5 	.word	0x0000a0e5

0000a170 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
    a170:	b580      	push	{r7, lr}
    a172:	b084      	sub	sp, #16
    a174:	af00      	add	r7, sp, #0
    a176:	60f8      	str	r0, [r7, #12]
    a178:	60b9      	str	r1, [r7, #8]
    a17a:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
    a17c:	e00d      	b.n	a19a <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
    a17e:	68bb      	ldr	r3, [r7, #8]
    a180:	781b      	ldrb	r3, [r3, #0]
    a182:	b25a      	sxtb	r2, r3
    a184:	68fb      	ldr	r3, [r7, #12]
    a186:	0011      	movs	r1, r2
    a188:	0018      	movs	r0, r3
    a18a:	4b07      	ldr	r3, [pc, #28]	; (a1a8 <stream_writer_send_buffer+0x38>)
    a18c:	4798      	blx	r3
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, char *buffer, size_t length)
{
	for (; length > 0; length--, buffer++) {
    a18e:	687b      	ldr	r3, [r7, #4]
    a190:	3b01      	subs	r3, #1
    a192:	607b      	str	r3, [r7, #4]
    a194:	68bb      	ldr	r3, [r7, #8]
    a196:	3301      	adds	r3, #1
    a198:	60bb      	str	r3, [r7, #8]
    a19a:	687b      	ldr	r3, [r7, #4]
    a19c:	2b00      	cmp	r3, #0
    a19e:	d1ee      	bne.n	a17e <stream_writer_send_buffer+0xe>
		stream_writer_send_8(writer, *buffer);
	}
}
    a1a0:	46c0      	nop			; (mov r8, r8)
    a1a2:	46bd      	mov	sp, r7
    a1a4:	b004      	add	sp, #16
    a1a6:	bd80      	pop	{r7, pc}
    a1a8:	0000a0e5 	.word	0x0000a0e5

0000a1ac <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
    a1ac:	b590      	push	{r4, r7, lr}
    a1ae:	b083      	sub	sp, #12
    a1b0:	af00      	add	r7, sp, #0
    a1b2:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
    a1b4:	687b      	ldr	r3, [r7, #4]
    a1b6:	685b      	ldr	r3, [r3, #4]
    a1b8:	2b00      	cmp	r3, #0
    a1ba:	d00c      	beq.n	a1d6 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    a1bc:	687b      	ldr	r3, [r7, #4]
    a1be:	689c      	ldr	r4, [r3, #8]
    a1c0:	687b      	ldr	r3, [r7, #4]
    a1c2:	68d8      	ldr	r0, [r3, #12]
    a1c4:	687b      	ldr	r3, [r7, #4]
    a1c6:	6919      	ldr	r1, [r3, #16]
    a1c8:	687b      	ldr	r3, [r7, #4]
    a1ca:	685b      	ldr	r3, [r3, #4]
    a1cc:	001a      	movs	r2, r3
    a1ce:	47a0      	blx	r4
		writer->written = 0;
    a1d0:	687b      	ldr	r3, [r7, #4]
    a1d2:	2200      	movs	r2, #0
    a1d4:	605a      	str	r2, [r3, #4]
	}
}
    a1d6:	46c0      	nop			; (mov r8, r8)
    a1d8:	46bd      	mov	sp, r7
    a1da:	b003      	add	sp, #12
    a1dc:	bd90      	pop	{r4, r7, pc}
    a1de:	46c0      	nop			; (mov r8, r8)

0000a1e0 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
    a1e0:	b580      	push	{r7, lr}
    a1e2:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    a1e4:	2000      	movs	r0, #0
    a1e6:	4b05      	ldr	r3, [pc, #20]	; (a1fc <system_cpu_clock_get_hz+0x1c>)
    a1e8:	4798      	blx	r3
    a1ea:	0002      	movs	r2, r0
    a1ec:	4b04      	ldr	r3, [pc, #16]	; (a200 <system_cpu_clock_get_hz+0x20>)
    a1ee:	7a1b      	ldrb	r3, [r3, #8]
    a1f0:	b2db      	uxtb	r3, r3
    a1f2:	40da      	lsrs	r2, r3
    a1f4:	0013      	movs	r3, r2
}
    a1f6:	0018      	movs	r0, r3
    a1f8:	46bd      	mov	sp, r7
    a1fa:	bd80      	pop	{r7, pc}
    a1fc:	00008d65 	.word	0x00008d65
    a200:	40000400 	.word	0x40000400

0000a204 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
    a204:	b580      	push	{r7, lr}
    a206:	b084      	sub	sp, #16
    a208:	af00      	add	r7, sp, #0
    a20a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    a20c:	687b      	ldr	r3, [r7, #4]
    a20e:	681b      	ldr	r3, [r3, #0]
    a210:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    a212:	46c0      	nop			; (mov r8, r8)
    a214:	68fb      	ldr	r3, [r7, #12]
    a216:	689b      	ldr	r3, [r3, #8]
    a218:	2202      	movs	r2, #2
    a21a:	4013      	ands	r3, r2
    a21c:	d1fa      	bne.n	a214 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    a21e:	68fb      	ldr	r3, [r7, #12]
    a220:	681b      	ldr	r3, [r3, #0]
    a222:	2202      	movs	r2, #2
    a224:	431a      	orrs	r2, r3
    a226:	68fb      	ldr	r3, [r7, #12]
    a228:	601a      	str	r2, [r3, #0]
}
    a22a:	46c0      	nop			; (mov r8, r8)
    a22c:	46bd      	mov	sp, r7
    a22e:	b004      	add	sp, #16
    a230:	bd80      	pop	{r7, pc}
    a232:	46c0      	nop			; (mov r8, r8)

0000a234 <sw_timer_tcc_callback>:
 * This function performs to the increasing the tick count.
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
    a234:	b580      	push	{r7, lr}
    a236:	b082      	sub	sp, #8
    a238:	af00      	add	r7, sp, #0
    a23a:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
    a23c:	4b04      	ldr	r3, [pc, #16]	; (a250 <sw_timer_tcc_callback+0x1c>)
    a23e:	681b      	ldr	r3, [r3, #0]
    a240:	1c5a      	adds	r2, r3, #1
    a242:	4b03      	ldr	r3, [pc, #12]	; (a250 <sw_timer_tcc_callback+0x1c>)
    a244:	601a      	str	r2, [r3, #0]
}
    a246:	46c0      	nop			; (mov r8, r8)
    a248:	46bd      	mov	sp, r7
    a24a:	b002      	add	sp, #8
    a24c:	bd80      	pop	{r7, pc}
    a24e:	46c0      	nop			; (mov r8, r8)
    a250:	200000f8 	.word	0x200000f8

0000a254 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
    a254:	b580      	push	{r7, lr}
    a256:	b082      	sub	sp, #8
    a258:	af00      	add	r7, sp, #0
    a25a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
    a25c:	687b      	ldr	r3, [r7, #4]
    a25e:	2264      	movs	r2, #100	; 0x64
    a260:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
    a262:	687b      	ldr	r3, [r7, #4]
    a264:	2200      	movs	r2, #0
    a266:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
    a268:	687b      	ldr	r3, [r7, #4]
    a26a:	2200      	movs	r2, #0
    a26c:	705a      	strb	r2, [r3, #1]
}
    a26e:	46c0      	nop			; (mov r8, r8)
    a270:	46bd      	mov	sp, r7
    a272:	b002      	add	sp, #8
    a274:	bd80      	pop	{r7, pc}
    a276:	46c0      	nop			; (mov r8, r8)

0000a278 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    a278:	b590      	push	{r4, r7, lr}
    a27a:	b0b1      	sub	sp, #196	; 0xc4
    a27c:	af00      	add	r7, sp, #0
    a27e:	6078      	str	r0, [r7, #4]
    a280:	6039      	str	r1, [r7, #0]
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    a282:	230c      	movs	r3, #12
    a284:	18fb      	adds	r3, r7, r3
    a286:	4a2e      	ldr	r2, [pc, #184]	; (a340 <sw_timer_init+0xc8>)
    a288:	ca13      	ldmia	r2!, {r0, r1, r4}
    a28a:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    a28c:	683b      	ldr	r3, [r7, #0]
    a28e:	885b      	ldrh	r3, [r3, #2]
    a290:	001a      	movs	r2, r3
    a292:	687b      	ldr	r3, [r7, #4]
    a294:	655a      	str	r2, [r3, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    a296:	687b      	ldr	r3, [r7, #4]
    a298:	3314      	adds	r3, #20
    a29a:	22bc      	movs	r2, #188	; 0xbc
    a29c:	18ba      	adds	r2, r7, r2
    a29e:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    a2a0:	683b      	ldr	r3, [r7, #0]
    a2a2:	781b      	ldrb	r3, [r3, #0]
    a2a4:	001a      	movs	r2, r3
    a2a6:	230c      	movs	r3, #12
    a2a8:	18fb      	adds	r3, r7, r3
    a2aa:	0092      	lsls	r2, r2, #2
    a2ac:	58d2      	ldr	r2, [r2, r3]
    a2ae:	2318      	movs	r3, #24
    a2b0:	18fb      	adds	r3, r7, r3
    a2b2:	0011      	movs	r1, r2
    a2b4:	0018      	movs	r0, r3
    a2b6:	4b23      	ldr	r3, [pc, #140]	; (a344 <sw_timer_init+0xcc>)
    a2b8:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    a2ba:	4b23      	ldr	r3, [pc, #140]	; (a348 <sw_timer_init+0xd0>)
    a2bc:	4798      	blx	r3
    a2be:	0004      	movs	r4, r0
    a2c0:	683b      	ldr	r3, [r7, #0]
    a2c2:	885b      	ldrh	r3, [r3, #2]
    a2c4:	001a      	movs	r2, r3
    a2c6:	4b21      	ldr	r3, [pc, #132]	; (a34c <sw_timer_init+0xd4>)
    a2c8:	0011      	movs	r1, r2
    a2ca:	22fa      	movs	r2, #250	; 0xfa
    a2cc:	0210      	lsls	r0, r2, #8
    a2ce:	4798      	blx	r3
    a2d0:	0003      	movs	r3, r0
    a2d2:	001a      	movs	r2, r3
    a2d4:	4b1e      	ldr	r3, [pc, #120]	; (a350 <sw_timer_init+0xd8>)
    a2d6:	0011      	movs	r1, r2
    a2d8:	0020      	movs	r0, r4
    a2da:	4798      	blx	r3
    a2dc:	0003      	movs	r3, r0
    a2de:	001a      	movs	r2, r3
    a2e0:	2318      	movs	r3, #24
    a2e2:	18fb      	adds	r3, r7, r3
    a2e4:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    a2e6:	2318      	movs	r3, #24
    a2e8:	18fb      	adds	r3, r7, r3
    a2ea:	2205      	movs	r2, #5
    a2ec:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    a2ee:	683b      	ldr	r3, [r7, #0]
    a2f0:	781b      	ldrb	r3, [r3, #0]
    a2f2:	001a      	movs	r2, r3
    a2f4:	230c      	movs	r3, #12
    a2f6:	18fb      	adds	r3, r7, r3
    a2f8:	0092      	lsls	r2, r2, #2
    a2fa:	58d1      	ldr	r1, [r2, r3]
    a2fc:	2318      	movs	r3, #24
    a2fe:	18fa      	adds	r2, r7, r3
    a300:	23bc      	movs	r3, #188	; 0xbc
    a302:	18fb      	adds	r3, r7, r3
    a304:	681b      	ldr	r3, [r3, #0]
    a306:	0018      	movs	r0, r3
    a308:	4b12      	ldr	r3, [pc, #72]	; (a354 <sw_timer_init+0xdc>)
    a30a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    a30c:	683b      	ldr	r3, [r7, #0]
    a30e:	785b      	ldrb	r3, [r3, #1]
    a310:	3308      	adds	r3, #8
    a312:	b2da      	uxtb	r2, r3
    a314:	4910      	ldr	r1, [pc, #64]	; (a358 <sw_timer_init+0xe0>)
    a316:	23bc      	movs	r3, #188	; 0xbc
    a318:	18fb      	adds	r3, r7, r3
    a31a:	681b      	ldr	r3, [r3, #0]
    a31c:	0018      	movs	r0, r3
    a31e:	4b0f      	ldr	r3, [pc, #60]	; (a35c <sw_timer_init+0xe4>)
    a320:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    a322:	683b      	ldr	r3, [r7, #0]
    a324:	785b      	ldrb	r3, [r3, #1]
    a326:	3308      	adds	r3, #8
    a328:	b2da      	uxtb	r2, r3
    a32a:	23bc      	movs	r3, #188	; 0xbc
    a32c:	18fb      	adds	r3, r7, r3
    a32e:	681b      	ldr	r3, [r3, #0]
    a330:	0011      	movs	r1, r2
    a332:	0018      	movs	r0, r3
    a334:	4b0a      	ldr	r3, [pc, #40]	; (a360 <sw_timer_init+0xe8>)
    a336:	4798      	blx	r3
}
    a338:	46c0      	nop			; (mov r8, r8)
    a33a:	46bd      	mov	sp, r7
    a33c:	b031      	add	sp, #196	; 0xc4
    a33e:	bd90      	pop	{r4, r7, pc}
    a340:	0000e9b8 	.word	0x0000e9b8
    a344:	00009289 	.word	0x00009289
    a348:	0000a1e1 	.word	0x0000a1e1
    a34c:	0000c04d 	.word	0x0000c04d
    a350:	0000bf39 	.word	0x0000bf39
    a354:	000098e5 	.word	0x000098e5
    a358:	0000a235 	.word	0x0000a235
    a35c:	00009cfd 	.word	0x00009cfd
    a360:	00009d3d 	.word	0x00009d3d

0000a364 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
    a364:	b580      	push	{r7, lr}
    a366:	b084      	sub	sp, #16
    a368:	af00      	add	r7, sp, #0
    a36a:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;

	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;
    a36c:	687b      	ldr	r3, [r7, #4]
    a36e:	3314      	adds	r3, #20
    a370:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
    a372:	68fb      	ldr	r3, [r7, #12]
    a374:	0018      	movs	r0, r3
    a376:	4b03      	ldr	r3, [pc, #12]	; (a384 <sw_timer_enable+0x20>)
    a378:	4798      	blx	r3
}
    a37a:	46c0      	nop			; (mov r8, r8)
    a37c:	46bd      	mov	sp, r7
    a37e:	b004      	add	sp, #16
    a380:	bd80      	pop	{r7, pc}
    a382:	46c0      	nop			; (mov r8, r8)
    a384:	0000a205 	.word	0x0000a205

0000a388 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    a388:	b580      	push	{r7, lr}
    a38a:	b086      	sub	sp, #24
    a38c:	af00      	add	r7, sp, #0
    a38e:	60f8      	str	r0, [r7, #12]
    a390:	60b9      	str	r1, [r7, #8]
    a392:	607a      	str	r2, [r7, #4]
    a394:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    a396:	2300      	movs	r3, #0
    a398:	617b      	str	r3, [r7, #20]
    a39a:	e032      	b.n	a402 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
    a39c:	68f9      	ldr	r1, [r7, #12]
    a39e:	697a      	ldr	r2, [r7, #20]
    a3a0:	0013      	movs	r3, r2
    a3a2:	009b      	lsls	r3, r3, #2
    a3a4:	189b      	adds	r3, r3, r2
    a3a6:	009b      	lsls	r3, r3, #2
    a3a8:	5c5b      	ldrb	r3, [r3, r1]
    a3aa:	07db      	lsls	r3, r3, #31
    a3ac:	0fdb      	lsrs	r3, r3, #31
    a3ae:	b2db      	uxtb	r3, r3
    a3b0:	2b00      	cmp	r3, #0
    a3b2:	d123      	bne.n	a3fc <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
    a3b4:	697a      	ldr	r2, [r7, #20]
    a3b6:	0013      	movs	r3, r2
    a3b8:	009b      	lsls	r3, r3, #2
    a3ba:	189b      	adds	r3, r3, r2
    a3bc:	009b      	lsls	r3, r3, #2
    a3be:	68fa      	ldr	r2, [r7, #12]
    a3c0:	18d3      	adds	r3, r2, r3
    a3c2:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
    a3c4:	693b      	ldr	r3, [r7, #16]
    a3c6:	68ba      	ldr	r2, [r7, #8]
    a3c8:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
    a3ca:	693b      	ldr	r3, [r7, #16]
    a3cc:	781a      	ldrb	r2, [r3, #0]
    a3ce:	2102      	movs	r1, #2
    a3d0:	438a      	bics	r2, r1
    a3d2:	701a      	strb	r2, [r3, #0]
			handler->context = context;
    a3d4:	693b      	ldr	r3, [r7, #16]
    a3d6:	687a      	ldr	r2, [r7, #4]
    a3d8:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
    a3da:	68fb      	ldr	r3, [r7, #12]
    a3dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    a3de:	4b0d      	ldr	r3, [pc, #52]	; (a414 <sw_timer_register_callback+0x8c>)
    a3e0:	0011      	movs	r1, r2
    a3e2:	6838      	ldr	r0, [r7, #0]
    a3e4:	4798      	blx	r3
    a3e6:	0003      	movs	r3, r0
    a3e8:	001a      	movs	r2, r3
    a3ea:	693b      	ldr	r3, [r7, #16]
    a3ec:	60da      	str	r2, [r3, #12]
			handler->used = 1;
    a3ee:	693b      	ldr	r3, [r7, #16]
    a3f0:	781a      	ldrb	r2, [r3, #0]
    a3f2:	2101      	movs	r1, #1
    a3f4:	430a      	orrs	r2, r1
    a3f6:	701a      	strb	r2, [r3, #0]
			return index;
    a3f8:	697b      	ldr	r3, [r7, #20]
    a3fa:	e007      	b.n	a40c <sw_timer_register_callback+0x84>
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    a3fc:	697b      	ldr	r3, [r7, #20]
    a3fe:	3301      	adds	r3, #1
    a400:	617b      	str	r3, [r7, #20]
    a402:	697b      	ldr	r3, [r7, #20]
    a404:	2b00      	cmp	r3, #0
    a406:	ddc9      	ble.n	a39c <sw_timer_register_callback+0x14>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    a408:	2301      	movs	r3, #1
    a40a:	425b      	negs	r3, r3
}
    a40c:	0018      	movs	r0, r3
    a40e:	46bd      	mov	sp, r7
    a410:	b006      	add	sp, #24
    a412:	bd80      	pop	{r7, pc}
    a414:	0000bf39 	.word	0x0000bf39

0000a418 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    a418:	b580      	push	{r7, lr}
    a41a:	b086      	sub	sp, #24
    a41c:	af00      	add	r7, sp, #0
    a41e:	60f8      	str	r0, [r7, #12]
    a420:	60b9      	str	r1, [r7, #8]
    a422:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    a424:	68ba      	ldr	r2, [r7, #8]
    a426:	0013      	movs	r3, r2
    a428:	009b      	lsls	r3, r3, #2
    a42a:	189b      	adds	r3, r3, r2
    a42c:	009b      	lsls	r3, r3, #2
    a42e:	68fa      	ldr	r2, [r7, #12]
    a430:	18d3      	adds	r3, r2, r3
    a432:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
    a434:	697b      	ldr	r3, [r7, #20]
    a436:	781a      	ldrb	r2, [r3, #0]
    a438:	2102      	movs	r1, #2
    a43a:	430a      	orrs	r2, r1
    a43c:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    a43e:	68fb      	ldr	r3, [r7, #12]
    a440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    a442:	4b07      	ldr	r3, [pc, #28]	; (a460 <sw_timer_enable_callback+0x48>)
    a444:	0011      	movs	r1, r2
    a446:	6878      	ldr	r0, [r7, #4]
    a448:	4798      	blx	r3
    a44a:	0003      	movs	r3, r0
    a44c:	001a      	movs	r2, r3
    a44e:	4b05      	ldr	r3, [pc, #20]	; (a464 <sw_timer_enable_callback+0x4c>)
    a450:	681b      	ldr	r3, [r3, #0]
    a452:	18d2      	adds	r2, r2, r3
    a454:	697b      	ldr	r3, [r7, #20]
    a456:	611a      	str	r2, [r3, #16]
}
    a458:	46c0      	nop			; (mov r8, r8)
    a45a:	46bd      	mov	sp, r7
    a45c:	b006      	add	sp, #24
    a45e:	bd80      	pop	{r7, pc}
    a460:	0000bf39 	.word	0x0000bf39
    a464:	200000f8 	.word	0x200000f8

0000a468 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
    a468:	b580      	push	{r7, lr}
    a46a:	b084      	sub	sp, #16
    a46c:	af00      	add	r7, sp, #0
    a46e:	6078      	str	r0, [r7, #4]
    a470:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
    a472:	683a      	ldr	r2, [r7, #0]
    a474:	0013      	movs	r3, r2
    a476:	009b      	lsls	r3, r3, #2
    a478:	189b      	adds	r3, r3, r2
    a47a:	009b      	lsls	r3, r3, #2
    a47c:	687a      	ldr	r2, [r7, #4]
    a47e:	18d3      	adds	r3, r2, r3
    a480:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
    a482:	68fb      	ldr	r3, [r7, #12]
    a484:	781a      	ldrb	r2, [r3, #0]
    a486:	2102      	movs	r1, #2
    a488:	438a      	bics	r2, r1
    a48a:	701a      	strb	r2, [r3, #0]
}
    a48c:	46c0      	nop			; (mov r8, r8)
    a48e:	46bd      	mov	sp, r7
    a490:	b004      	add	sp, #16
    a492:	bd80      	pop	{r7, pc}

0000a494 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    a494:	b590      	push	{r4, r7, lr}
    a496:	b085      	sub	sp, #20
    a498:	af00      	add	r7, sp, #0
    a49a:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    a49c:	2300      	movs	r3, #0
    a49e:	60fb      	str	r3, [r7, #12]
    a4a0:	e053      	b.n	a54a <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    a4a2:	6879      	ldr	r1, [r7, #4]
    a4a4:	68fa      	ldr	r2, [r7, #12]
    a4a6:	0013      	movs	r3, r2
    a4a8:	009b      	lsls	r3, r3, #2
    a4aa:	189b      	adds	r3, r3, r2
    a4ac:	009b      	lsls	r3, r3, #2
    a4ae:	5c5b      	ldrb	r3, [r3, r1]
    a4b0:	07db      	lsls	r3, r3, #31
    a4b2:	0fdb      	lsrs	r3, r3, #31
    a4b4:	b2db      	uxtb	r3, r3
    a4b6:	2b00      	cmp	r3, #0
    a4b8:	d044      	beq.n	a544 <sw_timer_task+0xb0>
    a4ba:	6879      	ldr	r1, [r7, #4]
    a4bc:	68fa      	ldr	r2, [r7, #12]
    a4be:	0013      	movs	r3, r2
    a4c0:	009b      	lsls	r3, r3, #2
    a4c2:	189b      	adds	r3, r3, r2
    a4c4:	009b      	lsls	r3, r3, #2
    a4c6:	5c5b      	ldrb	r3, [r3, r1]
    a4c8:	079b      	lsls	r3, r3, #30
    a4ca:	0fdb      	lsrs	r3, r3, #31
    a4cc:	b2db      	uxtb	r3, r3
    a4ce:	2b00      	cmp	r3, #0
    a4d0:	d038      	beq.n	a544 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
    a4d2:	68fa      	ldr	r2, [r7, #12]
    a4d4:	0013      	movs	r3, r2
    a4d6:	009b      	lsls	r3, r3, #2
    a4d8:	189b      	adds	r3, r3, r2
    a4da:	009b      	lsls	r3, r3, #2
    a4dc:	687a      	ldr	r2, [r7, #4]
    a4de:	18d3      	adds	r3, r2, r3
    a4e0:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    a4e2:	68bb      	ldr	r3, [r7, #8]
    a4e4:	691a      	ldr	r2, [r3, #16]
    a4e6:	4b1c      	ldr	r3, [pc, #112]	; (a558 <sw_timer_task+0xc4>)
    a4e8:	681b      	ldr	r3, [r3, #0]
    a4ea:	1ad3      	subs	r3, r2, r3
    a4ec:	d52a      	bpl.n	a544 <sw_timer_task+0xb0>
    a4ee:	68bb      	ldr	r3, [r7, #8]
    a4f0:	781b      	ldrb	r3, [r3, #0]
    a4f2:	2204      	movs	r2, #4
    a4f4:	4013      	ands	r3, r2
    a4f6:	b2db      	uxtb	r3, r3
    a4f8:	2b00      	cmp	r3, #0
    a4fa:	d123      	bne.n	a544 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
    a4fc:	68bb      	ldr	r3, [r7, #8]
    a4fe:	781a      	ldrb	r2, [r3, #0]
    a500:	2104      	movs	r1, #4
    a502:	430a      	orrs	r2, r1
    a504:	701a      	strb	r2, [r3, #0]
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    a506:	68bb      	ldr	r3, [r7, #8]
    a508:	685c      	ldr	r4, [r3, #4]
    a50a:	68bb      	ldr	r3, [r7, #8]
    a50c:	689a      	ldr	r2, [r3, #8]
    a50e:	68bb      	ldr	r3, [r7, #8]
    a510:	68db      	ldr	r3, [r3, #12]
    a512:	68f9      	ldr	r1, [r7, #12]
    a514:	6878      	ldr	r0, [r7, #4]
    a516:	47a0      	blx	r4
				/* Timer was expired. */
				if (handler->period > 0) {
    a518:	68bb      	ldr	r3, [r7, #8]
    a51a:	68db      	ldr	r3, [r3, #12]
    a51c:	2b00      	cmp	r3, #0
    a51e:	d007      	beq.n	a530 <sw_timer_task+0x9c>
					handler->expire_time = sw_timer_tick + handler->period;
    a520:	68bb      	ldr	r3, [r7, #8]
    a522:	68da      	ldr	r2, [r3, #12]
    a524:	4b0c      	ldr	r3, [pc, #48]	; (a558 <sw_timer_task+0xc4>)
    a526:	681b      	ldr	r3, [r3, #0]
    a528:	18d2      	adds	r2, r2, r3
    a52a:	68bb      	ldr	r3, [r7, #8]
    a52c:	611a      	str	r2, [r3, #16]
    a52e:	e004      	b.n	a53a <sw_timer_task+0xa6>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    a530:	68bb      	ldr	r3, [r7, #8]
    a532:	781a      	ldrb	r2, [r3, #0]
    a534:	2102      	movs	r1, #2
    a536:	438a      	bics	r2, r1
    a538:	701a      	strb	r2, [r3, #0]
				}
				/* Leave critical section. */
				handler->busy = 0;
    a53a:	68bb      	ldr	r3, [r7, #8]
    a53c:	781a      	ldrb	r2, [r3, #0]
    a53e:	2104      	movs	r1, #4
    a540:	438a      	bics	r2, r1
    a542:	701a      	strb	r2, [r3, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
    a544:	68fb      	ldr	r3, [r7, #12]
    a546:	3301      	adds	r3, #1
    a548:	60fb      	str	r3, [r7, #12]
    a54a:	68fb      	ldr	r3, [r7, #12]
    a54c:	2b00      	cmp	r3, #0
    a54e:	dda8      	ble.n	a4a2 <sw_timer_task+0xe>
				handler->busy = 0;
			}
		}
	}

}
    a550:	46c0      	nop			; (mov r8, r8)
    a552:	46bd      	mov	sp, r7
    a554:	b005      	add	sp, #20
    a556:	bd90      	pop	{r4, r7, pc}
    a558:	200000f8 	.word	0x200000f8

0000a55c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a55c:	b580      	push	{r7, lr}
    a55e:	b084      	sub	sp, #16
    a560:	af00      	add	r7, sp, #0
    a562:	0002      	movs	r2, r0
    a564:	1dfb      	adds	r3, r7, #7
    a566:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    a568:	230f      	movs	r3, #15
    a56a:	18fb      	adds	r3, r7, r3
    a56c:	1dfa      	adds	r2, r7, #7
    a56e:	7812      	ldrb	r2, [r2, #0]
    a570:	09d2      	lsrs	r2, r2, #7
    a572:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    a574:	230e      	movs	r3, #14
    a576:	18fb      	adds	r3, r7, r3
    a578:	1dfa      	adds	r2, r7, #7
    a57a:	7812      	ldrb	r2, [r2, #0]
    a57c:	0952      	lsrs	r2, r2, #5
    a57e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    a580:	4b0d      	ldr	r3, [pc, #52]	; (a5b8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    a582:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    a584:	230f      	movs	r3, #15
    a586:	18fb      	adds	r3, r7, r3
    a588:	781b      	ldrb	r3, [r3, #0]
    a58a:	2b00      	cmp	r3, #0
    a58c:	d10f      	bne.n	a5ae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    a58e:	230f      	movs	r3, #15
    a590:	18fb      	adds	r3, r7, r3
    a592:	781b      	ldrb	r3, [r3, #0]
    a594:	009b      	lsls	r3, r3, #2
    a596:	2210      	movs	r2, #16
    a598:	4694      	mov	ip, r2
    a59a:	44bc      	add	ip, r7
    a59c:	4463      	add	r3, ip
    a59e:	3b08      	subs	r3, #8
    a5a0:	681a      	ldr	r2, [r3, #0]
    a5a2:	230e      	movs	r3, #14
    a5a4:	18fb      	adds	r3, r7, r3
    a5a6:	781b      	ldrb	r3, [r3, #0]
    a5a8:	01db      	lsls	r3, r3, #7
    a5aa:	18d3      	adds	r3, r2, r3
    a5ac:	e000      	b.n	a5b0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    a5ae:	2300      	movs	r3, #0
	}
}
    a5b0:	0018      	movs	r0, r3
    a5b2:	46bd      	mov	sp, r7
    a5b4:	b004      	add	sp, #16
    a5b6:	bd80      	pop	{r7, pc}
    a5b8:	41004400 	.word	0x41004400

0000a5bc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a5bc:	b580      	push	{r7, lr}
    a5be:	b082      	sub	sp, #8
    a5c0:	af00      	add	r7, sp, #0
    a5c2:	0002      	movs	r2, r0
    a5c4:	1dfb      	adds	r3, r7, #7
    a5c6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    a5c8:	1dfb      	adds	r3, r7, #7
    a5ca:	781b      	ldrb	r3, [r3, #0]
    a5cc:	0018      	movs	r0, r3
    a5ce:	4b03      	ldr	r3, [pc, #12]	; (a5dc <port_get_group_from_gpio_pin+0x20>)
    a5d0:	4798      	blx	r3
    a5d2:	0003      	movs	r3, r0
}
    a5d4:	0018      	movs	r0, r3
    a5d6:	46bd      	mov	sp, r7
    a5d8:	b002      	add	sp, #8
    a5da:	bd80      	pop	{r7, pc}
    a5dc:	0000a55d 	.word	0x0000a55d

0000a5e0 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    a5e0:	b580      	push	{r7, lr}
    a5e2:	b084      	sub	sp, #16
    a5e4:	af00      	add	r7, sp, #0
    a5e6:	0002      	movs	r2, r0
    a5e8:	1dfb      	adds	r3, r7, #7
    a5ea:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    a5ec:	1dfb      	adds	r3, r7, #7
    a5ee:	781b      	ldrb	r3, [r3, #0]
    a5f0:	0018      	movs	r0, r3
    a5f2:	4b0b      	ldr	r3, [pc, #44]	; (a620 <port_pin_get_input_level+0x40>)
    a5f4:	4798      	blx	r3
    a5f6:	0003      	movs	r3, r0
    a5f8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    a5fa:	1dfb      	adds	r3, r7, #7
    a5fc:	781b      	ldrb	r3, [r3, #0]
    a5fe:	221f      	movs	r2, #31
    a600:	4013      	ands	r3, r2
    a602:	2201      	movs	r2, #1
    a604:	409a      	lsls	r2, r3
    a606:	0013      	movs	r3, r2
    a608:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    a60a:	68fb      	ldr	r3, [r7, #12]
    a60c:	6a1b      	ldr	r3, [r3, #32]
    a60e:	68ba      	ldr	r2, [r7, #8]
    a610:	4013      	ands	r3, r2
    a612:	1e5a      	subs	r2, r3, #1
    a614:	4193      	sbcs	r3, r2
    a616:	b2db      	uxtb	r3, r3
}
    a618:	0018      	movs	r0, r3
    a61a:	46bd      	mov	sp, r7
    a61c:	b004      	add	sp, #16
    a61e:	bd80      	pop	{r7, pc}
    a620:	0000a5bd 	.word	0x0000a5bd

0000a624 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    a624:	b580      	push	{r7, lr}
    a626:	b082      	sub	sp, #8
    a628:	af00      	add	r7, sp, #0
    a62a:	0002      	movs	r2, r0
    a62c:	1dfb      	adds	r3, r7, #7
    a62e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a630:	4b06      	ldr	r3, [pc, #24]	; (a64c <system_interrupt_enable+0x28>)
    a632:	1dfa      	adds	r2, r7, #7
    a634:	7812      	ldrb	r2, [r2, #0]
    a636:	0011      	movs	r1, r2
    a638:	221f      	movs	r2, #31
    a63a:	400a      	ands	r2, r1
    a63c:	2101      	movs	r1, #1
    a63e:	4091      	lsls	r1, r2
    a640:	000a      	movs	r2, r1
    a642:	601a      	str	r2, [r3, #0]
}
    a644:	46c0      	nop			; (mov r8, r8)
    a646:	46bd      	mov	sp, r7
    a648:	b002      	add	sp, #8
    a64a:	bd80      	pop	{r7, pc}
    a64c:	e000e100 	.word	0xe000e100

0000a650 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    a650:	b580      	push	{r7, lr}
    a652:	b084      	sub	sp, #16
    a654:	af00      	add	r7, sp, #0
    a656:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    a658:	687b      	ldr	r3, [r7, #4]
    a65a:	681b      	ldr	r3, [r3, #0]
    a65c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    a65e:	68fb      	ldr	r3, [r7, #12]
    a660:	69db      	ldr	r3, [r3, #28]
    a662:	1e5a      	subs	r2, r3, #1
    a664:	4193      	sbcs	r3, r2
    a666:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    a668:	0018      	movs	r0, r3
    a66a:	46bd      	mov	sp, r7
    a66c:	b004      	add	sp, #16
    a66e:	bd80      	pop	{r7, pc}

0000a670 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    a670:	b580      	push	{r7, lr}
    a672:	b082      	sub	sp, #8
    a674:	af00      	add	r7, sp, #0
    a676:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    a678:	46c0      	nop			; (mov r8, r8)
    a67a:	687b      	ldr	r3, [r7, #4]
    a67c:	0018      	movs	r0, r3
    a67e:	4b04      	ldr	r3, [pc, #16]	; (a690 <_usart_wait_for_sync+0x20>)
    a680:	4798      	blx	r3
    a682:	1e03      	subs	r3, r0, #0
    a684:	d1f9      	bne.n	a67a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    a686:	46c0      	nop			; (mov r8, r8)
    a688:	46bd      	mov	sp, r7
    a68a:	b002      	add	sp, #8
    a68c:	bd80      	pop	{r7, pc}
    a68e:	46c0      	nop			; (mov r8, r8)
    a690:	0000a651 	.word	0x0000a651

0000a694 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    a694:	b580      	push	{r7, lr}
    a696:	b082      	sub	sp, #8
    a698:	af00      	add	r7, sp, #0
    a69a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    a69c:	687b      	ldr	r3, [r7, #4]
    a69e:	2280      	movs	r2, #128	; 0x80
    a6a0:	05d2      	lsls	r2, r2, #23
    a6a2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    a6a4:	687b      	ldr	r3, [r7, #4]
    a6a6:	2200      	movs	r2, #0
    a6a8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    a6aa:	687b      	ldr	r3, [r7, #4]
    a6ac:	22ff      	movs	r2, #255	; 0xff
    a6ae:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    a6b0:	687b      	ldr	r3, [r7, #4]
    a6b2:	2200      	movs	r2, #0
    a6b4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    a6b6:	687b      	ldr	r3, [r7, #4]
    a6b8:	2200      	movs	r2, #0
    a6ba:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    a6bc:	687b      	ldr	r3, [r7, #4]
    a6be:	2296      	movs	r2, #150	; 0x96
    a6c0:	0192      	lsls	r2, r2, #6
    a6c2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    a6c4:	687b      	ldr	r3, [r7, #4]
    a6c6:	2224      	movs	r2, #36	; 0x24
    a6c8:	2101      	movs	r1, #1
    a6ca:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    a6cc:	687b      	ldr	r3, [r7, #4]
    a6ce:	2225      	movs	r2, #37	; 0x25
    a6d0:	2101      	movs	r1, #1
    a6d2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    a6d4:	687b      	ldr	r3, [r7, #4]
    a6d6:	2226      	movs	r2, #38	; 0x26
    a6d8:	2100      	movs	r1, #0
    a6da:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    a6dc:	687b      	ldr	r3, [r7, #4]
    a6de:	2227      	movs	r2, #39	; 0x27
    a6e0:	2100      	movs	r1, #0
    a6e2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    a6e4:	687b      	ldr	r3, [r7, #4]
    a6e6:	2200      	movs	r2, #0
    a6e8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    a6ea:	687b      	ldr	r3, [r7, #4]
    a6ec:	2288      	movs	r2, #136	; 0x88
    a6ee:	0352      	lsls	r2, r2, #13
    a6f0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    a6f2:	687b      	ldr	r3, [r7, #4]
    a6f4:	222c      	movs	r2, #44	; 0x2c
    a6f6:	2100      	movs	r1, #0
    a6f8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    a6fa:	687b      	ldr	r3, [r7, #4]
    a6fc:	222d      	movs	r2, #45	; 0x2d
    a6fe:	2100      	movs	r1, #0
    a700:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    a702:	687b      	ldr	r3, [r7, #4]
    a704:	2200      	movs	r2, #0
    a706:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    a708:	687b      	ldr	r3, [r7, #4]
    a70a:	2200      	movs	r2, #0
    a70c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    a70e:	687b      	ldr	r3, [r7, #4]
    a710:	2200      	movs	r2, #0
    a712:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    a714:	687b      	ldr	r3, [r7, #4]
    a716:	2200      	movs	r2, #0
    a718:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    a71a:	687b      	ldr	r3, [r7, #4]
    a71c:	2200      	movs	r2, #0
    a71e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    a720:	687b      	ldr	r3, [r7, #4]
    a722:	2200      	movs	r2, #0
    a724:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    a726:	687b      	ldr	r3, [r7, #4]
    a728:	2200      	movs	r2, #0
    a72a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    a72c:	687b      	ldr	r3, [r7, #4]
    a72e:	2200      	movs	r2, #0
    a730:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    a732:	687b      	ldr	r3, [r7, #4]
    a734:	2200      	movs	r2, #0
    a736:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    a738:	687b      	ldr	r3, [r7, #4]
    a73a:	2200      	movs	r2, #0
    a73c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    a73e:	687b      	ldr	r3, [r7, #4]
    a740:	2213      	movs	r2, #19
    a742:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    a744:	687b      	ldr	r3, [r7, #4]
    a746:	2200      	movs	r2, #0
    a748:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    a74a:	46c0      	nop			; (mov r8, r8)
    a74c:	46bd      	mov	sp, r7
    a74e:	b002      	add	sp, #8
    a750:	bd80      	pop	{r7, pc}
    a752:	46c0      	nop			; (mov r8, r8)

0000a754 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    a754:	b580      	push	{r7, lr}
    a756:	b084      	sub	sp, #16
    a758:	af00      	add	r7, sp, #0
    a75a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a75c:	687b      	ldr	r3, [r7, #4]
    a75e:	681b      	ldr	r3, [r3, #0]
    a760:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a762:	687b      	ldr	r3, [r7, #4]
    a764:	681b      	ldr	r3, [r3, #0]
    a766:	0018      	movs	r0, r3
    a768:	4b09      	ldr	r3, [pc, #36]	; (a790 <usart_enable+0x3c>)
    a76a:	4798      	blx	r3
    a76c:	0003      	movs	r3, r0
    a76e:	0018      	movs	r0, r3
    a770:	4b08      	ldr	r3, [pc, #32]	; (a794 <usart_enable+0x40>)
    a772:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a774:	687b      	ldr	r3, [r7, #4]
    a776:	0018      	movs	r0, r3
    a778:	4b07      	ldr	r3, [pc, #28]	; (a798 <usart_enable+0x44>)
    a77a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    a77c:	68fb      	ldr	r3, [r7, #12]
    a77e:	681b      	ldr	r3, [r3, #0]
    a780:	2202      	movs	r2, #2
    a782:	431a      	orrs	r2, r3
    a784:	68fb      	ldr	r3, [r7, #12]
    a786:	601a      	str	r2, [r3, #0]
}
    a788:	46c0      	nop			; (mov r8, r8)
    a78a:	46bd      	mov	sp, r7
    a78c:	b004      	add	sp, #16
    a78e:	bd80      	pop	{r7, pc}
    a790:	000069d1 	.word	0x000069d1
    a794:	0000a625 	.word	0x0000a625
    a798:	0000a671 	.word	0x0000a671

0000a79c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    a79c:	b580      	push	{r7, lr}
    a79e:	b082      	sub	sp, #8
    a7a0:	af00      	add	r7, sp, #0
    a7a2:	6078      	str	r0, [r7, #4]
    a7a4:	000a      	movs	r2, r1
    a7a6:	1cfb      	adds	r3, r7, #3
    a7a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    a7aa:	687b      	ldr	r3, [r7, #4]
    a7ac:	2231      	movs	r2, #49	; 0x31
    a7ae:	5c9b      	ldrb	r3, [r3, r2]
    a7b0:	b25a      	sxtb	r2, r3
    a7b2:	1cfb      	adds	r3, r7, #3
    a7b4:	781b      	ldrb	r3, [r3, #0]
    a7b6:	2101      	movs	r1, #1
    a7b8:	4099      	lsls	r1, r3
    a7ba:	000b      	movs	r3, r1
    a7bc:	b25b      	sxtb	r3, r3
    a7be:	4313      	orrs	r3, r2
    a7c0:	b25b      	sxtb	r3, r3
    a7c2:	b2d9      	uxtb	r1, r3
    a7c4:	687b      	ldr	r3, [r7, #4]
    a7c6:	2231      	movs	r2, #49	; 0x31
    a7c8:	5499      	strb	r1, [r3, r2]

}
    a7ca:	46c0      	nop			; (mov r8, r8)
    a7cc:	46bd      	mov	sp, r7
    a7ce:	b002      	add	sp, #8
    a7d0:	bd80      	pop	{r7, pc}
    a7d2:	46c0      	nop			; (mov r8, r8)

0000a7d4 <usart_disable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_disable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    a7d4:	b580      	push	{r7, lr}
    a7d6:	b082      	sub	sp, #8
    a7d8:	af00      	add	r7, sp, #0
    a7da:	6078      	str	r0, [r7, #4]
    a7dc:	000a      	movs	r2, r1
    a7de:	1cfb      	adds	r3, r7, #3
    a7e0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    a7e2:	687b      	ldr	r3, [r7, #4]
    a7e4:	2231      	movs	r2, #49	; 0x31
    a7e6:	5c9b      	ldrb	r3, [r3, r2]
    a7e8:	b25b      	sxtb	r3, r3
    a7ea:	1cfa      	adds	r2, r7, #3
    a7ec:	7812      	ldrb	r2, [r2, #0]
    a7ee:	2101      	movs	r1, #1
    a7f0:	4091      	lsls	r1, r2
    a7f2:	000a      	movs	r2, r1
    a7f4:	b252      	sxtb	r2, r2
    a7f6:	43d2      	mvns	r2, r2
    a7f8:	b252      	sxtb	r2, r2
    a7fa:	4013      	ands	r3, r2
    a7fc:	b25b      	sxtb	r3, r3
    a7fe:	b2d9      	uxtb	r1, r3
    a800:	687b      	ldr	r3, [r7, #4]
    a802:	2231      	movs	r2, #49	; 0x31
    a804:	5499      	strb	r1, [r3, r2]
}
    a806:	46c0      	nop			; (mov r8, r8)
    a808:	46bd      	mov	sp, r7
    a80a:	b002      	add	sp, #8
    a80c:	bd80      	pop	{r7, pc}
    a80e:	46c0      	nop			; (mov r8, r8)

0000a810 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    a810:	b580      	push	{r7, lr}
    a812:	b084      	sub	sp, #16
    a814:	af00      	add	r7, sp, #0
    a816:	60f8      	str	r0, [r7, #12]
    a818:	60b9      	str	r1, [r7, #8]
    a81a:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    a81c:	687a      	ldr	r2, [r7, #4]
    a81e:	68b9      	ldr	r1, [r7, #8]
    a820:	68fb      	ldr	r3, [r7, #12]
    a822:	0018      	movs	r0, r3
    a824:	4b05      	ldr	r3, [pc, #20]	; (a83c <usart_serial_init+0x2c>)
    a826:	4798      	blx	r3
    a828:	1e03      	subs	r3, r0, #0
    a82a:	d101      	bne.n	a830 <usart_serial_init+0x20>
		return true;
    a82c:	2301      	movs	r3, #1
    a82e:	e000      	b.n	a832 <usart_serial_init+0x22>
	}
	else {
		return false;
    a830:	2300      	movs	r3, #0
	}
}
    a832:	0018      	movs	r0, r3
    a834:	46bd      	mov	sp, r7
    a836:	b004      	add	sp, #16
    a838:	bd80      	pop	{r7, pc}
    a83a:	46c0      	nop			; (mov r8, r8)
    a83c:	000079a5 	.word	0x000079a5

0000a840 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    a840:	b580      	push	{r7, lr}
    a842:	b082      	sub	sp, #8
    a844:	af00      	add	r7, sp, #0
    a846:	6078      	str	r0, [r7, #4]
    a848:	000a      	movs	r2, r1
    a84a:	1cfb      	adds	r3, r7, #3
    a84c:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    a84e:	46c0      	nop			; (mov r8, r8)
    a850:	1cfb      	adds	r3, r7, #3
    a852:	781b      	ldrb	r3, [r3, #0]
    a854:	b29a      	uxth	r2, r3
    a856:	687b      	ldr	r3, [r7, #4]
    a858:	0011      	movs	r1, r2
    a85a:	0018      	movs	r0, r3
    a85c:	4b04      	ldr	r3, [pc, #16]	; (a870 <usart_serial_putchar+0x30>)
    a85e:	4798      	blx	r3
    a860:	1e03      	subs	r3, r0, #0
    a862:	d1f5      	bne.n	a850 <usart_serial_putchar+0x10>

	return STATUS_OK;
    a864:	2300      	movs	r3, #0
}
    a866:	0018      	movs	r0, r3
    a868:	46bd      	mov	sp, r7
    a86a:	b002      	add	sp, #8
    a86c:	bd80      	pop	{r7, pc}
    a86e:	46c0      	nop			; (mov r8, r8)
    a870:	00007c19 	.word	0x00007c19

0000a874 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    a874:	b580      	push	{r7, lr}
    a876:	b084      	sub	sp, #16
    a878:	af00      	add	r7, sp, #0
    a87a:	6078      	str	r0, [r7, #4]
    a87c:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    a87e:	230e      	movs	r3, #14
    a880:	18fb      	adds	r3, r7, r3
    a882:	2200      	movs	r2, #0
    a884:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    a886:	46c0      	nop			; (mov r8, r8)
    a888:	230e      	movs	r3, #14
    a88a:	18fa      	adds	r2, r7, r3
    a88c:	687b      	ldr	r3, [r7, #4]
    a88e:	0011      	movs	r1, r2
    a890:	0018      	movs	r0, r3
    a892:	4b07      	ldr	r3, [pc, #28]	; (a8b0 <usart_serial_getchar+0x3c>)
    a894:	4798      	blx	r3
    a896:	1e03      	subs	r3, r0, #0
    a898:	d1f6      	bne.n	a888 <usart_serial_getchar+0x14>

	*c = temp;
    a89a:	230e      	movs	r3, #14
    a89c:	18fb      	adds	r3, r7, r3
    a89e:	881b      	ldrh	r3, [r3, #0]
    a8a0:	b2da      	uxtb	r2, r3
    a8a2:	683b      	ldr	r3, [r7, #0]
    a8a4:	701a      	strb	r2, [r3, #0]
}
    a8a6:	46c0      	nop			; (mov r8, r8)
    a8a8:	46bd      	mov	sp, r7
    a8aa:	b004      	add	sp, #16
    a8ac:	bd80      	pop	{r7, pc}
    a8ae:	46c0      	nop			; (mov r8, r8)
    a8b0:	00007c7d 	.word	0x00007c7d

0000a8b4 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    a8b4:	b580      	push	{r7, lr}
    a8b6:	b084      	sub	sp, #16
    a8b8:	af00      	add	r7, sp, #0
    a8ba:	60f8      	str	r0, [r7, #12]
    a8bc:	60b9      	str	r1, [r7, #8]
    a8be:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    a8c0:	4b10      	ldr	r3, [pc, #64]	; (a904 <stdio_serial_init+0x50>)
    a8c2:	68fa      	ldr	r2, [r7, #12]
    a8c4:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    a8c6:	4b10      	ldr	r3, [pc, #64]	; (a908 <stdio_serial_init+0x54>)
    a8c8:	4a10      	ldr	r2, [pc, #64]	; (a90c <stdio_serial_init+0x58>)
    a8ca:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    a8cc:	4b10      	ldr	r3, [pc, #64]	; (a910 <stdio_serial_init+0x5c>)
    a8ce:	4a11      	ldr	r2, [pc, #68]	; (a914 <stdio_serial_init+0x60>)
    a8d0:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    a8d2:	687a      	ldr	r2, [r7, #4]
    a8d4:	68b9      	ldr	r1, [r7, #8]
    a8d6:	68fb      	ldr	r3, [r7, #12]
    a8d8:	0018      	movs	r0, r3
    a8da:	4b0f      	ldr	r3, [pc, #60]	; (a918 <stdio_serial_init+0x64>)
    a8dc:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    a8de:	4b0f      	ldr	r3, [pc, #60]	; (a91c <stdio_serial_init+0x68>)
    a8e0:	681b      	ldr	r3, [r3, #0]
    a8e2:	689b      	ldr	r3, [r3, #8]
    a8e4:	2100      	movs	r1, #0
    a8e6:	0018      	movs	r0, r3
    a8e8:	4b0d      	ldr	r3, [pc, #52]	; (a920 <stdio_serial_init+0x6c>)
    a8ea:	4798      	blx	r3
	setbuf(stdin, NULL);
    a8ec:	4b0b      	ldr	r3, [pc, #44]	; (a91c <stdio_serial_init+0x68>)
    a8ee:	681b      	ldr	r3, [r3, #0]
    a8f0:	685b      	ldr	r3, [r3, #4]
    a8f2:	2100      	movs	r1, #0
    a8f4:	0018      	movs	r0, r3
    a8f6:	4b0a      	ldr	r3, [pc, #40]	; (a920 <stdio_serial_init+0x6c>)
    a8f8:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    a8fa:	46c0      	nop			; (mov r8, r8)
    a8fc:	46bd      	mov	sp, r7
    a8fe:	b004      	add	sp, #16
    a900:	bd80      	pop	{r7, pc}
    a902:	46c0      	nop			; (mov r8, r8)
    a904:	2000046c 	.word	0x2000046c
    a908:	20000468 	.word	0x20000468
    a90c:	0000a841 	.word	0x0000a841
    a910:	20000464 	.word	0x20000464
    a914:	0000a875 	.word	0x0000a875
    a918:	0000a811 	.word	0x0000a811
    a91c:	20000080 	.word	0x20000080
    a920:	0000c5b9 	.word	0x0000c5b9

0000a924 <uart_callback>:
 * \brief Callback of USART input.
 *
 * \param[in] module USART module structure.
 */
static void uart_callback(const struct usart_module *const module)
{
    a924:	b580      	push	{r7, lr}
    a926:	b082      	sub	sp, #8
    a928:	af00      	add	r7, sp, #0
    a92a:	6078      	str	r0, [r7, #4]
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    a92c:	4b08      	ldr	r3, [pc, #32]	; (a950 <uart_callback+0x2c>)
    a92e:	681b      	ldr	r3, [r3, #0]
    a930:	2b3f      	cmp	r3, #63	; 0x3f
    a932:	dc09      	bgt.n	a948 <uart_callback+0x24>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    a934:	4b06      	ldr	r3, [pc, #24]	; (a950 <uart_callback+0x2c>)
    a936:	681b      	ldr	r3, [r3, #0]
    a938:	1c59      	adds	r1, r3, #1
    a93a:	4a05      	ldr	r2, [pc, #20]	; (a950 <uart_callback+0x2c>)
    a93c:	6011      	str	r1, [r2, #0]
    a93e:	4a05      	ldr	r2, [pc, #20]	; (a954 <uart_callback+0x30>)
    a940:	8812      	ldrh	r2, [r2, #0]
    a942:	b2d1      	uxtb	r1, r2
    a944:	4a04      	ldr	r2, [pc, #16]	; (a958 <uart_callback+0x34>)
    a946:	54d1      	strb	r1, [r2, r3]
	}
}
    a948:	46c0      	nop			; (mov r8, r8)
    a94a:	46bd      	mov	sp, r7
    a94c:	b002      	add	sp, #8
    a94e:	bd80      	pop	{r7, pc}
    a950:	200002a4 	.word	0x200002a4
    a954:	200002a8 	.word	0x200002a8
    a958:	20000264 	.word	0x20000264

0000a95c <wifi_callback>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_callback(uint8 msg_type, void *msg_data)
{
    a95c:	b590      	push	{r4, r7, lr}
    a95e:	b087      	sub	sp, #28
    a960:	af02      	add	r7, sp, #8
    a962:	0002      	movs	r2, r0
    a964:	6039      	str	r1, [r7, #0]
    a966:	1dfb      	adds	r3, r7, #7
    a968:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiStateChanged *msg_wifi_state;
	uint8 *msg_ip_addr;

	switch (msg_type) {
    a96a:	1dfb      	adds	r3, r7, #7
    a96c:	781b      	ldrb	r3, [r3, #0]
    a96e:	2b2c      	cmp	r3, #44	; 0x2c
    a970:	d002      	beq.n	a978 <wifi_callback+0x1c>
    a972:	2b32      	cmp	r3, #50	; 0x32
    a974:	d024      	beq.n	a9c0 <wifi_callback+0x64>
		/* Try to connect to MQTT broker when Wi-Fi was connected. */
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
		break;

	default:
		break;
    a976:	e040      	b.n	a9fa <wifi_callback+0x9e>
	tstrM2mWifiStateChanged *msg_wifi_state;
	uint8 *msg_ip_addr;

	switch (msg_type) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
		msg_wifi_state = (tstrM2mWifiStateChanged *)msg_data;
    a978:	683b      	ldr	r3, [r7, #0]
    a97a:	60fb      	str	r3, [r7, #12]
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    a97c:	68fb      	ldr	r3, [r7, #12]
    a97e:	781b      	ldrb	r3, [r3, #0]
    a980:	2b01      	cmp	r3, #1
    a982:	d106      	bne.n	a992 <wifi_callback+0x36>
			/* If Wi-Fi is connected. */
			printf("Wi-Fi connected\r\n");
    a984:	4b1f      	ldr	r3, [pc, #124]	; (aa04 <wifi_callback+0xa8>)
    a986:	0018      	movs	r0, r3
    a988:	4b1f      	ldr	r3, [pc, #124]	; (aa08 <wifi_callback+0xac>)
    a98a:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    a98c:	4b1f      	ldr	r3, [pc, #124]	; (aa0c <wifi_callback+0xb0>)
    a98e:	4798      	blx	r3
			/* Disconnect from MQTT broker. */
			/* Force close the MQTT connection, because cannot send a disconnect message to the broker when network is broken. */
			mqtt_disconnect(&mqtt_inst, 1);
		}

		break;
    a990:	e032      	b.n	a9f8 <wifi_callback+0x9c>
		msg_wifi_state = (tstrM2mWifiStateChanged *)msg_data;
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
			/* If Wi-Fi is connected. */
			printf("Wi-Fi connected\r\n");
			m2m_wifi_request_dhcp_client();
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    a992:	68fb      	ldr	r3, [r7, #12]
    a994:	781b      	ldrb	r3, [r3, #0]
    a996:	2b00      	cmp	r3, #0
    a998:	d12e      	bne.n	a9f8 <wifi_callback+0x9c>
			/* If Wi-Fi is disconnected. */
			printf("Wi-Fi disconnected\r\n");
    a99a:	4b1d      	ldr	r3, [pc, #116]	; (aa10 <wifi_callback+0xb4>)
    a99c:	0018      	movs	r0, r3
    a99e:	4b1a      	ldr	r3, [pc, #104]	; (aa08 <wifi_callback+0xac>)
    a9a0:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    a9a2:	4a1c      	ldr	r2, [pc, #112]	; (aa14 <wifi_callback+0xb8>)
    a9a4:	481c      	ldr	r0, [pc, #112]	; (aa18 <wifi_callback+0xbc>)
    a9a6:	23ff      	movs	r3, #255	; 0xff
    a9a8:	9300      	str	r3, [sp, #0]
    a9aa:	0013      	movs	r3, r2
    a9ac:	2202      	movs	r2, #2
    a9ae:	210b      	movs	r1, #11
    a9b0:	4c1a      	ldr	r4, [pc, #104]	; (aa1c <wifi_callback+0xc0>)
    a9b2:	47a0      	blx	r4
					MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			/* Disconnect from MQTT broker. */
			/* Force close the MQTT connection, because cannot send a disconnect message to the broker when network is broken. */
			mqtt_disconnect(&mqtt_inst, 1);
    a9b4:	4b1a      	ldr	r3, [pc, #104]	; (aa20 <wifi_callback+0xc4>)
    a9b6:	2101      	movs	r1, #1
    a9b8:	0018      	movs	r0, r3
    a9ba:	4b1a      	ldr	r3, [pc, #104]	; (aa24 <wifi_callback+0xc8>)
    a9bc:	4798      	blx	r3
		}

		break;
    a9be:	e01b      	b.n	a9f8 <wifi_callback+0x9c>

	case M2M_WIFI_REQ_DHCP_CONF:
		msg_ip_addr = (uint8 *)msg_data;
    a9c0:	683b      	ldr	r3, [r7, #0]
    a9c2:	60bb      	str	r3, [r7, #8]
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    a9c4:	68bb      	ldr	r3, [r7, #8]
    a9c6:	781b      	ldrb	r3, [r3, #0]

		break;

	case M2M_WIFI_REQ_DHCP_CONF:
		msg_ip_addr = (uint8 *)msg_data;
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    a9c8:	0019      	movs	r1, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    a9ca:	68bb      	ldr	r3, [r7, #8]
    a9cc:	3301      	adds	r3, #1
    a9ce:	781b      	ldrb	r3, [r3, #0]

		break;

	case M2M_WIFI_REQ_DHCP_CONF:
		msg_ip_addr = (uint8 *)msg_data;
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    a9d0:	001a      	movs	r2, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    a9d2:	68bb      	ldr	r3, [r7, #8]
    a9d4:	3302      	adds	r3, #2
    a9d6:	781b      	ldrb	r3, [r3, #0]

		break;

	case M2M_WIFI_REQ_DHCP_CONF:
		msg_ip_addr = (uint8 *)msg_data;
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    a9d8:	001c      	movs	r4, r3
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
    a9da:	68bb      	ldr	r3, [r7, #8]
    a9dc:	3303      	adds	r3, #3
    a9de:	781b      	ldrb	r3, [r3, #0]

		break;

	case M2M_WIFI_REQ_DHCP_CONF:
		msg_ip_addr = (uint8 *)msg_data;
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    a9e0:	4811      	ldr	r0, [pc, #68]	; (aa28 <wifi_callback+0xcc>)
    a9e2:	9300      	str	r3, [sp, #0]
    a9e4:	0023      	movs	r3, r4
    a9e6:	4c11      	ldr	r4, [pc, #68]	; (aa2c <wifi_callback+0xd0>)
    a9e8:	47a0      	blx	r4
				msg_ip_addr[0], msg_ip_addr[1], msg_ip_addr[2], msg_ip_addr[3]);
		/* Try to connect to MQTT broker when Wi-Fi was connected. */
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    a9ea:	4a11      	ldr	r2, [pc, #68]	; (aa30 <wifi_callback+0xd4>)
    a9ec:	4b0c      	ldr	r3, [pc, #48]	; (aa20 <wifi_callback+0xc4>)
    a9ee:	0011      	movs	r1, r2
    a9f0:	0018      	movs	r0, r3
    a9f2:	4b10      	ldr	r3, [pc, #64]	; (aa34 <wifi_callback+0xd8>)
    a9f4:	4798      	blx	r3
		break;
    a9f6:	e000      	b.n	a9fa <wifi_callback+0x9e>
			/* Disconnect from MQTT broker. */
			/* Force close the MQTT connection, because cannot send a disconnect message to the broker when network is broken. */
			mqtt_disconnect(&mqtt_inst, 1);
		}

		break;
    a9f8:	46c0      	nop			; (mov r8, r8)
		break;

	default:
		break;
	}
}
    a9fa:	46c0      	nop			; (mov r8, r8)
    a9fc:	46bd      	mov	sp, r7
    a9fe:	b005      	add	sp, #20
    aa00:	bd90      	pop	{r4, r7, pc}
    aa02:	46c0      	nop			; (mov r8, r8)
    aa04:	0000e9d8 	.word	0x0000e9d8
    aa08:	0000c581 	.word	0x0000c581
    aa0c:	000024ed 	.word	0x000024ed
    aa10:	0000e9ec 	.word	0x0000e9ec
    aa14:	0000ea00 	.word	0x0000ea00
    aa18:	0000ea0c 	.word	0x0000ea0c
    aa1c:	00002025 	.word	0x00002025
    aa20:	20000170 	.word	0x20000170
    aa24:	0000bae5 	.word	0x0000bae5
    aa28:	0000ea18 	.word	0x0000ea18
    aa2c:	0000c461 	.word	0x0000c461
    aa30:	0000e9c4 	.word	0x0000e9c4
    aa34:	0000b2d9 	.word	0x0000b2d9

0000aa38 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    aa38:	b580      	push	{r7, lr}
    aa3a:	b082      	sub	sp, #8
    aa3c:	af00      	add	r7, sp, #0
    aa3e:	603a      	str	r2, [r7, #0]
    aa40:	1dfb      	adds	r3, r7, #7
    aa42:	1c02      	adds	r2, r0, #0
    aa44:	701a      	strb	r2, [r3, #0]
    aa46:	1dbb      	adds	r3, r7, #6
    aa48:	1c0a      	adds	r2, r1, #0
    aa4a:	701a      	strb	r2, [r3, #0]
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    aa4c:	683a      	ldr	r2, [r7, #0]
    aa4e:	1dbb      	adds	r3, r7, #6
    aa50:	7819      	ldrb	r1, [r3, #0]
    aa52:	1dfb      	adds	r3, r7, #7
    aa54:	781b      	ldrb	r3, [r3, #0]
    aa56:	b25b      	sxtb	r3, r3
    aa58:	0018      	movs	r0, r3
    aa5a:	4b03      	ldr	r3, [pc, #12]	; (aa68 <socket_event_handler+0x30>)
    aa5c:	4798      	blx	r3
}
    aa5e:	46c0      	nop			; (mov r8, r8)
    aa60:	46bd      	mov	sp, r7
    aa62:	b002      	add	sp, #8
    aa64:	bd80      	pop	{r7, pc}
    aa66:	46c0      	nop			; (mov r8, r8)
    aa68:	0000be25 	.word	0x0000be25

0000aa6c <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    aa6c:	b580      	push	{r7, lr}
    aa6e:	b082      	sub	sp, #8
    aa70:	af00      	add	r7, sp, #0
    aa72:	6078      	str	r0, [r7, #4]
    aa74:	6039      	str	r1, [r7, #0]
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    aa76:	683a      	ldr	r2, [r7, #0]
    aa78:	687b      	ldr	r3, [r7, #4]
    aa7a:	0011      	movs	r1, r2
    aa7c:	0018      	movs	r0, r3
    aa7e:	4b03      	ldr	r3, [pc, #12]	; (aa8c <socket_resolve_handler+0x20>)
    aa80:	4798      	blx	r3
}
    aa82:	46c0      	nop			; (mov r8, r8)
    aa84:	46bd      	mov	sp, r7
    aa86:	b002      	add	sp, #8
    aa88:	bd80      	pop	{r7, pc}
    aa8a:	46c0      	nop			; (mov r8, r8)
    aa8c:	0000b285 	.word	0x0000b285

0000aa90 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    aa90:	b590      	push	{r4, r7, lr}
    aa92:	b08f      	sub	sp, #60	; 0x3c
    aa94:	af06      	add	r7, sp, #24
    aa96:	60f8      	str	r0, [r7, #12]
    aa98:	60b9      	str	r1, [r7, #8]
    aa9a:	607a      	str	r2, [r7, #4]
	switch (type) {
    aa9c:	68bb      	ldr	r3, [r7, #8]
    aa9e:	2b01      	cmp	r3, #1
    aaa0:	d031      	beq.n	ab06 <mqtt_callback+0x76>
    aaa2:	dc02      	bgt.n	aaaa <mqtt_callback+0x1a>
    aaa4:	2b00      	cmp	r3, #0
    aaa6:	d006      	beq.n	aab6 <mqtt_callback+0x26>
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    aaa8:	e0ec      	b.n	ac84 <mqtt_callback+0x1f4>
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
	switch (type) {
    aaaa:	2b05      	cmp	r3, #5
    aaac:	d100      	bne.n	aab0 <mqtt_callback+0x20>
    aaae:	e0de      	b.n	ac6e <mqtt_callback+0x1de>
    aab0:	2b06      	cmp	r3, #6
    aab2:	d05f      	beq.n	ab74 <mqtt_callback+0xe4>
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    aab4:	e0e6      	b.n	ac84 <mqtt_callback+0x1f4>
	{
		/*
		 * If connecting to broker server is complete successfully, Start sending CONNECT message of MQTT.
		 * Or else retry to connect to broker server.
		 */
		if (data->sock_connected.result >= 0) {
    aab6:	687b      	ldr	r3, [r7, #4]
    aab8:	681b      	ldr	r3, [r3, #0]
    aaba:	2b00      	cmp	r3, #0
    aabc:	db16      	blt.n	aaec <mqtt_callback+0x5c>
			//mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
      status = mqtt_connect_broker(module_inst, 1, mqtt_user, mqtt_pass, mqtt_user, NULL, NULL, 0, 0, 0);
    aabe:	4973      	ldr	r1, [pc, #460]	; (ac8c <mqtt_callback+0x1fc>)
    aac0:	4a73      	ldr	r2, [pc, #460]	; (ac90 <mqtt_callback+0x200>)
    aac2:	68f8      	ldr	r0, [r7, #12]
    aac4:	2300      	movs	r3, #0
    aac6:	9305      	str	r3, [sp, #20]
    aac8:	2300      	movs	r3, #0
    aaca:	9304      	str	r3, [sp, #16]
    aacc:	2300      	movs	r3, #0
    aace:	9303      	str	r3, [sp, #12]
    aad0:	2300      	movs	r3, #0
    aad2:	9302      	str	r3, [sp, #8]
    aad4:	2300      	movs	r3, #0
    aad6:	9301      	str	r3, [sp, #4]
    aad8:	4b6d      	ldr	r3, [pc, #436]	; (ac90 <mqtt_callback+0x200>)
    aada:	9300      	str	r3, [sp, #0]
    aadc:	000b      	movs	r3, r1
    aade:	2101      	movs	r1, #1
    aae0:	4c6c      	ldr	r4, [pc, #432]	; (ac94 <mqtt_callback+0x204>)
    aae2:	47a0      	blx	r4
    aae4:	0002      	movs	r2, r0
    aae6:	4b6c      	ldr	r3, [pc, #432]	; (ac98 <mqtt_callback+0x208>)
    aae8:	601a      	str	r2, [r3, #0]
		} else {
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
		}
	}
	break;
    aaea:	e0cb      	b.n	ac84 <mqtt_callback+0x1f4>
		 */
		if (data->sock_connected.result >= 0) {
			//mqtt_connect_broker(module_inst, 1, NULL, NULL, mqtt_user, NULL, NULL, 0, 0, 0);
      status = mqtt_connect_broker(module_inst, 1, mqtt_user, mqtt_pass, mqtt_user, NULL, NULL, 0, 0, 0);
		} else {
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    aaec:	4a6b      	ldr	r2, [pc, #428]	; (ac9c <mqtt_callback+0x20c>)
    aaee:	4b6c      	ldr	r3, [pc, #432]	; (aca0 <mqtt_callback+0x210>)
    aaf0:	0011      	movs	r1, r2
    aaf2:	0018      	movs	r0, r3
    aaf4:	4b6b      	ldr	r3, [pc, #428]	; (aca4 <mqtt_callback+0x214>)
    aaf6:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    aaf8:	4a68      	ldr	r2, [pc, #416]	; (ac9c <mqtt_callback+0x20c>)
    aafa:	68fb      	ldr	r3, [r7, #12]
    aafc:	0011      	movs	r1, r2
    aafe:	0018      	movs	r0, r3
    ab00:	4b69      	ldr	r3, [pc, #420]	; (aca8 <mqtt_callback+0x218>)
    ab02:	4798      	blx	r3
		}
	}
	break;
    ab04:	e0be      	b.n	ac84 <mqtt_callback+0x1f4>

	case MQTT_CALLBACK_CONNECTED:
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    ab06:	687b      	ldr	r3, [r7, #4]
    ab08:	781b      	ldrb	r3, [r3, #0]
    ab0a:	2b00      	cmp	r3, #0
    ab0c:	d129      	bne.n	ab62 <mqtt_callback+0xd2>
			/* Subscribe chat topic. */
      delay_ms(1000);
    ab0e:	23fa      	movs	r3, #250	; 0xfa
    ab10:	009b      	lsls	r3, r3, #2
    ab12:	0018      	movs	r0, r3
    ab14:	4b65      	ldr	r3, [pc, #404]	; (acac <mqtt_callback+0x21c>)
    ab16:	4798      	blx	r3
			status = mqtt_subscribe(module_inst, MAIN_CHAT_TOPIC, 2);
    ab18:	4965      	ldr	r1, [pc, #404]	; (acb0 <mqtt_callback+0x220>)
    ab1a:	68fb      	ldr	r3, [r7, #12]
    ab1c:	2202      	movs	r2, #2
    ab1e:	0018      	movs	r0, r3
    ab20:	4b64      	ldr	r3, [pc, #400]	; (acb4 <mqtt_callback+0x224>)
    ab22:	4798      	blx	r3
    ab24:	0002      	movs	r2, r0
    ab26:	4b5c      	ldr	r3, [pc, #368]	; (ac98 <mqtt_callback+0x208>)
    ab28:	601a      	str	r2, [r3, #0]
      status = mqtt_subscribe(module_inst, SENSOR_TOPIC, 2);
    ab2a:	4963      	ldr	r1, [pc, #396]	; (acb8 <mqtt_callback+0x228>)
    ab2c:	68fb      	ldr	r3, [r7, #12]
    ab2e:	2202      	movs	r2, #2
    ab30:	0018      	movs	r0, r3
    ab32:	4b60      	ldr	r3, [pc, #384]	; (acb4 <mqtt_callback+0x224>)
    ab34:	4798      	blx	r3
    ab36:	0002      	movs	r2, r0
    ab38:	4b57      	ldr	r3, [pc, #348]	; (ac98 <mqtt_callback+0x208>)
    ab3a:	601a      	str	r2, [r3, #0]
      status = mqtt_subscribe(module_inst, ACTUATOR_TOPIC, 2);
    ab3c:	495f      	ldr	r1, [pc, #380]	; (acbc <mqtt_callback+0x22c>)
    ab3e:	68fb      	ldr	r3, [r7, #12]
    ab40:	2202      	movs	r2, #2
    ab42:	0018      	movs	r0, r3
    ab44:	4b5b      	ldr	r3, [pc, #364]	; (acb4 <mqtt_callback+0x224>)
    ab46:	4798      	blx	r3
    ab48:	0002      	movs	r2, r0
    ab4a:	4b53      	ldr	r3, [pc, #332]	; (ac98 <mqtt_callback+0x208>)
    ab4c:	601a      	str	r2, [r3, #0]
			/* Enable USART receiving callback. */
			usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
    ab4e:	4b5c      	ldr	r3, [pc, #368]	; (acc0 <mqtt_callback+0x230>)
    ab50:	2101      	movs	r1, #1
    ab52:	0018      	movs	r0, r3
    ab54:	4b5b      	ldr	r3, [pc, #364]	; (acc4 <mqtt_callback+0x234>)
    ab56:	4798      	blx	r3
			printf("Preparation of the chat has been completed.\r\n");
    ab58:	4b5b      	ldr	r3, [pc, #364]	; (acc8 <mqtt_callback+0x238>)
    ab5a:	0018      	movs	r0, r3
    ab5c:	4b5b      	ldr	r3, [pc, #364]	; (accc <mqtt_callback+0x23c>)
    ab5e:	4798      	blx	r3
		} else {
			/* Cannot connect for some reason. */
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
		}

		break;
    ab60:	e090      	b.n	ac84 <mqtt_callback+0x1f4>
			/* Enable USART receiving callback. */
			usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
			printf("Preparation of the chat has been completed.\r\n");
		} else {
			/* Cannot connect for some reason. */
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    ab62:	687b      	ldr	r3, [r7, #4]
    ab64:	781b      	ldrb	r3, [r3, #0]
    ab66:	001a      	movs	r2, r3
    ab68:	4b59      	ldr	r3, [pc, #356]	; (acd0 <mqtt_callback+0x240>)
    ab6a:	0011      	movs	r1, r2
    ab6c:	0018      	movs	r0, r3
    ab6e:	4b4d      	ldr	r3, [pc, #308]	; (aca4 <mqtt_callback+0x214>)
    ab70:	4798      	blx	r3
		}

		break;
    ab72:	e087      	b.n	ac84 <mqtt_callback+0x1f4>

	case MQTT_CALLBACK_RECV_PUBLISH:
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    ab74:	687b      	ldr	r3, [r7, #4]
    ab76:	681b      	ldr	r3, [r3, #0]
    ab78:	2b00      	cmp	r3, #0
    ab7a:	d100      	bne.n	ab7e <mqtt_callback+0xee>
    ab7c:	e081      	b.n	ac82 <mqtt_callback+0x1f2>
    ab7e:	687b      	ldr	r3, [r7, #4]
    ab80:	689b      	ldr	r3, [r3, #8]
    ab82:	2b00      	cmp	r3, #0
    ab84:	d100      	bne.n	ab88 <mqtt_callback+0xf8>
    ab86:	e07c      	b.n	ac82 <mqtt_callback+0x1f2>
      
      
      /// Main Topic
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC)) ) {
    ab88:	687b      	ldr	r3, [r7, #4]
    ab8a:	681b      	ldr	r3, [r3, #0]
    ab8c:	4948      	ldr	r1, [pc, #288]	; (acb0 <mqtt_callback+0x220>)
    ab8e:	2204      	movs	r2, #4
    ab90:	0018      	movs	r0, r3
    ab92:	4b50      	ldr	r3, [pc, #320]	; (acd4 <mqtt_callback+0x244>)
    ab94:	4798      	blx	r3
    ab96:	1e03      	subs	r3, r0, #0
    ab98:	d11c      	bne.n	abd4 <mqtt_callback+0x144>
        /* Print Topic */
        printf("%s >> ", MAIN_CHAT_TOPIC);
    ab9a:	4a45      	ldr	r2, [pc, #276]	; (acb0 <mqtt_callback+0x220>)
    ab9c:	4b4e      	ldr	r3, [pc, #312]	; (acd8 <mqtt_callback+0x248>)
    ab9e:	0011      	movs	r1, r2
    aba0:	0018      	movs	r0, r3
    aba2:	4b40      	ldr	r3, [pc, #256]	; (aca4 <mqtt_callback+0x214>)
    aba4:	4798      	blx	r3
        
        /* Print message */
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    aba6:	2300      	movs	r3, #0
    aba8:	61fb      	str	r3, [r7, #28]
    abaa:	e00a      	b.n	abc2 <mqtt_callback+0x132>
          printf("%c", data->recv_publish.msg[i]);
    abac:	687b      	ldr	r3, [r7, #4]
    abae:	689a      	ldr	r2, [r3, #8]
    abb0:	69fb      	ldr	r3, [r7, #28]
    abb2:	18d3      	adds	r3, r2, r3
    abb4:	781b      	ldrb	r3, [r3, #0]
    abb6:	0018      	movs	r0, r3
    abb8:	4b48      	ldr	r3, [pc, #288]	; (acdc <mqtt_callback+0x24c>)
    abba:	4798      	blx	r3
			if (!strncmp(data->recv_publish.topic, MAIN_CHAT_TOPIC, strlen(MAIN_CHAT_TOPIC)) ) {
        /* Print Topic */
        printf("%s >> ", MAIN_CHAT_TOPIC);
        
        /* Print message */
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    abbc:	69fb      	ldr	r3, [r7, #28]
    abbe:	3301      	adds	r3, #1
    abc0:	61fb      	str	r3, [r7, #28]
    abc2:	687b      	ldr	r3, [r7, #4]
    abc4:	68da      	ldr	r2, [r3, #12]
    abc6:	69fb      	ldr	r3, [r7, #28]
    abc8:	429a      	cmp	r2, r3
    abca:	dcef      	bgt.n	abac <mqtt_callback+0x11c>
          printf("%c", data->recv_publish.msg[i]);
        }
        printf("\r\n");
    abcc:	4b44      	ldr	r3, [pc, #272]	; (ace0 <mqtt_callback+0x250>)
    abce:	0018      	movs	r0, r3
    abd0:	4b3e      	ldr	r3, [pc, #248]	; (accc <mqtt_callback+0x23c>)
    abd2:	4798      	blx	r3
			}
      
      /// Sensor Topic
      if (!strncmp(data->recv_publish.topic, SENSOR_TOPIC, strlen(SENSOR_TOPIC)) ) {
    abd4:	687b      	ldr	r3, [r7, #4]
    abd6:	681b      	ldr	r3, [r3, #0]
    abd8:	4937      	ldr	r1, [pc, #220]	; (acb8 <mqtt_callback+0x228>)
    abda:	2206      	movs	r2, #6
    abdc:	0018      	movs	r0, r3
    abde:	4b3d      	ldr	r3, [pc, #244]	; (acd4 <mqtt_callback+0x244>)
    abe0:	4798      	blx	r3
    abe2:	1e03      	subs	r3, r0, #0
    abe4:	d11c      	bne.n	ac20 <mqtt_callback+0x190>
        /* Print Topic */
        printf("%s >> ", SENSOR_TOPIC);
    abe6:	4a34      	ldr	r2, [pc, #208]	; (acb8 <mqtt_callback+0x228>)
    abe8:	4b3b      	ldr	r3, [pc, #236]	; (acd8 <mqtt_callback+0x248>)
    abea:	0011      	movs	r1, r2
    abec:	0018      	movs	r0, r3
    abee:	4b2d      	ldr	r3, [pc, #180]	; (aca4 <mqtt_callback+0x214>)
    abf0:	4798      	blx	r3
        
        /* Print message */
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    abf2:	2300      	movs	r3, #0
    abf4:	61bb      	str	r3, [r7, #24]
    abf6:	e00a      	b.n	ac0e <mqtt_callback+0x17e>
          printf("%c", data->recv_publish.msg[i]);
    abf8:	687b      	ldr	r3, [r7, #4]
    abfa:	689a      	ldr	r2, [r3, #8]
    abfc:	69bb      	ldr	r3, [r7, #24]
    abfe:	18d3      	adds	r3, r2, r3
    ac00:	781b      	ldrb	r3, [r3, #0]
    ac02:	0018      	movs	r0, r3
    ac04:	4b35      	ldr	r3, [pc, #212]	; (acdc <mqtt_callback+0x24c>)
    ac06:	4798      	blx	r3
      if (!strncmp(data->recv_publish.topic, SENSOR_TOPIC, strlen(SENSOR_TOPIC)) ) {
        /* Print Topic */
        printf("%s >> ", SENSOR_TOPIC);
        
        /* Print message */
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    ac08:	69bb      	ldr	r3, [r7, #24]
    ac0a:	3301      	adds	r3, #1
    ac0c:	61bb      	str	r3, [r7, #24]
    ac0e:	687b      	ldr	r3, [r7, #4]
    ac10:	68da      	ldr	r2, [r3, #12]
    ac12:	69bb      	ldr	r3, [r7, #24]
    ac14:	429a      	cmp	r2, r3
    ac16:	dcef      	bgt.n	abf8 <mqtt_callback+0x168>
          printf("%c", data->recv_publish.msg[i]);
        }
        printf("\r\n");
    ac18:	4b31      	ldr	r3, [pc, #196]	; (ace0 <mqtt_callback+0x250>)
    ac1a:	0018      	movs	r0, r3
    ac1c:	4b2b      	ldr	r3, [pc, #172]	; (accc <mqtt_callback+0x23c>)
    ac1e:	4798      	blx	r3
      }
      
      /// Actuator Topic
      if (!strncmp(data->recv_publish.topic, ACTUATOR_TOPIC, strlen(ACTUATOR_TOPIC)) ) {
    ac20:	687b      	ldr	r3, [r7, #4]
    ac22:	681b      	ldr	r3, [r3, #0]
    ac24:	4925      	ldr	r1, [pc, #148]	; (acbc <mqtt_callback+0x22c>)
    ac26:	2208      	movs	r2, #8
    ac28:	0018      	movs	r0, r3
    ac2a:	4b2a      	ldr	r3, [pc, #168]	; (acd4 <mqtt_callback+0x244>)
    ac2c:	4798      	blx	r3
    ac2e:	1e03      	subs	r3, r0, #0
    ac30:	d127      	bne.n	ac82 <mqtt_callback+0x1f2>
        /* Print Topic */
        printf("%s >> ", ACTUATOR_TOPIC);
    ac32:	4a22      	ldr	r2, [pc, #136]	; (acbc <mqtt_callback+0x22c>)
    ac34:	4b28      	ldr	r3, [pc, #160]	; (acd8 <mqtt_callback+0x248>)
    ac36:	0011      	movs	r1, r2
    ac38:	0018      	movs	r0, r3
    ac3a:	4b1a      	ldr	r3, [pc, #104]	; (aca4 <mqtt_callback+0x214>)
    ac3c:	4798      	blx	r3
       
        /* Print message */
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    ac3e:	2300      	movs	r3, #0
    ac40:	617b      	str	r3, [r7, #20]
    ac42:	e00a      	b.n	ac5a <mqtt_callback+0x1ca>
          printf("%c", data->recv_publish.msg[i]);
    ac44:	687b      	ldr	r3, [r7, #4]
    ac46:	689a      	ldr	r2, [r3, #8]
    ac48:	697b      	ldr	r3, [r7, #20]
    ac4a:	18d3      	adds	r3, r2, r3
    ac4c:	781b      	ldrb	r3, [r3, #0]
    ac4e:	0018      	movs	r0, r3
    ac50:	4b22      	ldr	r3, [pc, #136]	; (acdc <mqtt_callback+0x24c>)
    ac52:	4798      	blx	r3
      if (!strncmp(data->recv_publish.topic, ACTUATOR_TOPIC, strlen(ACTUATOR_TOPIC)) ) {
        /* Print Topic */
        printf("%s >> ", ACTUATOR_TOPIC);
       
        /* Print message */
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    ac54:	697b      	ldr	r3, [r7, #20]
    ac56:	3301      	adds	r3, #1
    ac58:	617b      	str	r3, [r7, #20]
    ac5a:	687b      	ldr	r3, [r7, #4]
    ac5c:	68da      	ldr	r2, [r3, #12]
    ac5e:	697b      	ldr	r3, [r7, #20]
    ac60:	429a      	cmp	r2, r3
    ac62:	dcef      	bgt.n	ac44 <mqtt_callback+0x1b4>
          printf("%c", data->recv_publish.msg[i]);
        }
        printf("\r\n");
    ac64:	4b1e      	ldr	r3, [pc, #120]	; (ace0 <mqtt_callback+0x250>)
    ac66:	0018      	movs	r0, r3
    ac68:	4b18      	ldr	r3, [pc, #96]	; (accc <mqtt_callback+0x23c>)
    ac6a:	4798      	blx	r3
      }
      
		}

		break;
    ac6c:	e009      	b.n	ac82 <mqtt_callback+0x1f2>

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
    ac6e:	4b1d      	ldr	r3, [pc, #116]	; (ace4 <mqtt_callback+0x254>)
    ac70:	0018      	movs	r0, r3
    ac72:	4b16      	ldr	r3, [pc, #88]	; (accc <mqtt_callback+0x23c>)
    ac74:	4798      	blx	r3
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
    ac76:	4b12      	ldr	r3, [pc, #72]	; (acc0 <mqtt_callback+0x230>)
    ac78:	2101      	movs	r1, #1
    ac7a:	0018      	movs	r0, r3
    ac7c:	4b1a      	ldr	r3, [pc, #104]	; (ace8 <mqtt_callback+0x258>)
    ac7e:	4798      	blx	r3
		break;
    ac80:	e000      	b.n	ac84 <mqtt_callback+0x1f4>
        printf("\r\n");
      }
      
		}

		break;
    ac82:	46c0      	nop			; (mov r8, r8)
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    ac84:	46c0      	nop			; (mov r8, r8)
    ac86:	46bd      	mov	sp, r7
    ac88:	b009      	add	sp, #36	; 0x24
    ac8a:	bd90      	pop	{r4, r7, pc}
    ac8c:	20000018 	.word	0x20000018
    ac90:	20000010 	.word	0x20000010
    ac94:	0000b3ed 	.word	0x0000b3ed
    ac98:	200004cc 	.word	0x200004cc
    ac9c:	0000e9c4 	.word	0x0000e9c4
    aca0:	0000ea34 	.word	0x0000ea34
    aca4:	0000c461 	.word	0x0000c461
    aca8:	0000b2d9 	.word	0x0000b2d9
    acac:	000001a1 	.word	0x000001a1
    acb0:	0000ea6c 	.word	0x0000ea6c
    acb4:	0000b845 	.word	0x0000b845
    acb8:	0000ea74 	.word	0x0000ea74
    acbc:	0000ea7c 	.word	0x0000ea7c
    acc0:	200000fc 	.word	0x200000fc
    acc4:	0000a79d 	.word	0x0000a79d
    acc8:	0000ea88 	.word	0x0000ea88
    accc:	0000c581 	.word	0x0000c581
    acd0:	0000eab8 	.word	0x0000eab8
    acd4:	0000c7a3 	.word	0x0000c7a3
    acd8:	0000eaec 	.word	0x0000eaec
    acdc:	0000c495 	.word	0x0000c495
    ace0:	0000eaf4 	.word	0x0000eaf4
    ace4:	0000eaf8 	.word	0x0000eaf8
    ace8:	0000a7d5 	.word	0x0000a7d5

0000acec <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    acec:	b580      	push	{r7, lr}
    acee:	b090      	sub	sp, #64	; 0x40
    acf0:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    acf2:	003b      	movs	r3, r7
    acf4:	0018      	movs	r0, r3
    acf6:	4b16      	ldr	r3, [pc, #88]	; (ad50 <configure_console+0x64>)
    acf8:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    acfa:	003b      	movs	r3, r7
    acfc:	22c4      	movs	r2, #196	; 0xc4
    acfe:	0392      	lsls	r2, r2, #14
    ad00:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    ad02:	003b      	movs	r3, r7
    ad04:	2201      	movs	r2, #1
    ad06:	4252      	negs	r2, r2
    ad08:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    ad0a:	003b      	movs	r3, r7
    ad0c:	2201      	movs	r2, #1
    ad0e:	4252      	negs	r2, r2
    ad10:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    ad12:	003b      	movs	r3, r7
    ad14:	4a0f      	ldr	r2, [pc, #60]	; (ad54 <configure_console+0x68>)
    ad16:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    ad18:	003b      	movs	r3, r7
    ad1a:	4a0f      	ldr	r2, [pc, #60]	; (ad58 <configure_console+0x6c>)
    ad1c:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    ad1e:	003b      	movs	r3, r7
    ad20:	22e1      	movs	r2, #225	; 0xe1
    ad22:	0252      	lsls	r2, r2, #9
    ad24:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    ad26:	003a      	movs	r2, r7
    ad28:	490c      	ldr	r1, [pc, #48]	; (ad5c <configure_console+0x70>)
    ad2a:	4b0d      	ldr	r3, [pc, #52]	; (ad60 <configure_console+0x74>)
    ad2c:	0018      	movs	r0, r3
    ad2e:	4b0d      	ldr	r3, [pc, #52]	; (ad64 <configure_console+0x78>)
    ad30:	4798      	blx	r3
	/* Register USART callback for receiving user input. */
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    ad32:	490d      	ldr	r1, [pc, #52]	; (ad68 <configure_console+0x7c>)
    ad34:	4b0a      	ldr	r3, [pc, #40]	; (ad60 <configure_console+0x74>)
    ad36:	2201      	movs	r2, #1
    ad38:	0018      	movs	r0, r3
    ad3a:	4b0c      	ldr	r3, [pc, #48]	; (ad6c <configure_console+0x80>)
    ad3c:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    ad3e:	4b08      	ldr	r3, [pc, #32]	; (ad60 <configure_console+0x74>)
    ad40:	0018      	movs	r0, r3
    ad42:	4b0b      	ldr	r3, [pc, #44]	; (ad70 <configure_console+0x84>)
    ad44:	4798      	blx	r3
}
    ad46:	46c0      	nop			; (mov r8, r8)
    ad48:	46bd      	mov	sp, r7
    ad4a:	b010      	add	sp, #64	; 0x40
    ad4c:	bd80      	pop	{r7, pc}
    ad4e:	46c0      	nop			; (mov r8, r8)
    ad50:	0000a695 	.word	0x0000a695
    ad54:	002a0003 	.word	0x002a0003
    ad58:	002b0003 	.word	0x002b0003
    ad5c:	42001800 	.word	0x42001800
    ad60:	200000fc 	.word	0x200000fc
    ad64:	0000a8b5 	.word	0x0000a8b5
    ad68:	0000a925 	.word	0x0000a925
    ad6c:	00007e4d 	.word	0x00007e4d
    ad70:	0000a755 	.word	0x0000a755

0000ad74 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
    ad74:	b580      	push	{r7, lr}
    ad76:	b082      	sub	sp, #8
    ad78:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
    ad7a:	1d3b      	adds	r3, r7, #4
    ad7c:	0018      	movs	r0, r3
    ad7e:	4b08      	ldr	r3, [pc, #32]	; (ada0 <configure_timer+0x2c>)
    ad80:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    ad82:	1d3a      	adds	r2, r7, #4
    ad84:	4b07      	ldr	r3, [pc, #28]	; (ada4 <configure_timer+0x30>)
    ad86:	0011      	movs	r1, r2
    ad88:	0018      	movs	r0, r3
    ad8a:	4b07      	ldr	r3, [pc, #28]	; (ada8 <configure_timer+0x34>)
    ad8c:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    ad8e:	4b05      	ldr	r3, [pc, #20]	; (ada4 <configure_timer+0x30>)
    ad90:	0018      	movs	r0, r3
    ad92:	4b06      	ldr	r3, [pc, #24]	; (adac <configure_timer+0x38>)
    ad94:	4798      	blx	r3
}
    ad96:	46c0      	nop			; (mov r8, r8)
    ad98:	46bd      	mov	sp, r7
    ad9a:	b002      	add	sp, #8
    ad9c:	bd80      	pop	{r7, pc}
    ad9e:	46c0      	nop			; (mov r8, r8)
    ada0:	0000a255 	.word	0x0000a255
    ada4:	20000474 	.word	0x20000474
    ada8:	0000a279 	.word	0x0000a279
    adac:	0000a365 	.word	0x0000a365

0000adb0 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
    adb0:	b580      	push	{r7, lr}
    adb2:	b088      	sub	sp, #32
    adb4:	af00      	add	r7, sp, #0
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
    adb6:	003b      	movs	r3, r7
    adb8:	0018      	movs	r0, r3
    adba:	4b1b      	ldr	r3, [pc, #108]	; (ae28 <configure_mqtt+0x78>)
    adbc:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_inst;
    adbe:	003b      	movs	r3, r7
    adc0:	4a1a      	ldr	r2, [pc, #104]	; (ae2c <configure_mqtt+0x7c>)
    adc2:	605a      	str	r2, [r3, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
    adc4:	003b      	movs	r3, r7
    adc6:	4a1a      	ldr	r2, [pc, #104]	; (ae30 <configure_mqtt+0x80>)
    adc8:	60da      	str	r2, [r3, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    adca:	003b      	movs	r3, r7
    adcc:	2280      	movs	r2, #128	; 0x80
    adce:	611a      	str	r2, [r3, #16]
  mqtt_conf.port = MQTT_PORT;
    add0:	003b      	movs	r3, r7
    add2:	4a18      	ldr	r2, [pc, #96]	; (ae34 <configure_mqtt+0x84>)
    add4:	801a      	strh	r2, [r3, #0]

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    add6:	003a      	movs	r2, r7
    add8:	4b17      	ldr	r3, [pc, #92]	; (ae38 <configure_mqtt+0x88>)
    adda:	0011      	movs	r1, r2
    addc:	0018      	movs	r0, r3
    adde:	4b17      	ldr	r3, [pc, #92]	; (ae3c <configure_mqtt+0x8c>)
    ade0:	4798      	blx	r3
    ade2:	0003      	movs	r3, r0
    ade4:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    ade6:	69fb      	ldr	r3, [r7, #28]
    ade8:	2b00      	cmp	r3, #0
    adea:	da06      	bge.n	adfa <configure_mqtt+0x4a>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    adec:	69fa      	ldr	r2, [r7, #28]
    adee:	4b14      	ldr	r3, [pc, #80]	; (ae40 <configure_mqtt+0x90>)
    adf0:	0011      	movs	r1, r2
    adf2:	0018      	movs	r0, r3
    adf4:	4b13      	ldr	r3, [pc, #76]	; (ae44 <configure_mqtt+0x94>)
    adf6:	4798      	blx	r3
		while (1) {
		}
    adf8:	e7fe      	b.n	adf8 <configure_mqtt+0x48>
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    adfa:	4a13      	ldr	r2, [pc, #76]	; (ae48 <configure_mqtt+0x98>)
    adfc:	4b0e      	ldr	r3, [pc, #56]	; (ae38 <configure_mqtt+0x88>)
    adfe:	0011      	movs	r1, r2
    ae00:	0018      	movs	r0, r3
    ae02:	4b12      	ldr	r3, [pc, #72]	; (ae4c <configure_mqtt+0x9c>)
    ae04:	4798      	blx	r3
    ae06:	0003      	movs	r3, r0
    ae08:	61fb      	str	r3, [r7, #28]
	if (result < 0) {
    ae0a:	69fb      	ldr	r3, [r7, #28]
    ae0c:	2b00      	cmp	r3, #0
    ae0e:	da06      	bge.n	ae1e <configure_mqtt+0x6e>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    ae10:	69fa      	ldr	r2, [r7, #28]
    ae12:	4b0f      	ldr	r3, [pc, #60]	; (ae50 <configure_mqtt+0xa0>)
    ae14:	0011      	movs	r1, r2
    ae16:	0018      	movs	r0, r3
    ae18:	4b0a      	ldr	r3, [pc, #40]	; (ae44 <configure_mqtt+0x94>)
    ae1a:	4798      	blx	r3
		while (1) {
		}
    ae1c:	e7fe      	b.n	ae1c <configure_mqtt+0x6c>
	}
}
    ae1e:	46c0      	nop			; (mov r8, r8)
    ae20:	46bd      	mov	sp, r7
    ae22:	b008      	add	sp, #32
    ae24:	bd80      	pop	{r7, pc}
    ae26:	46c0      	nop			; (mov r8, r8)
    ae28:	0000b1c5 	.word	0x0000b1c5
    ae2c:	20000474 	.word	0x20000474
    ae30:	200001e4 	.word	0x200001e4
    ae34:	00004788 	.word	0x00004788
    ae38:	20000170 	.word	0x20000170
    ae3c:	0000b1e9 	.word	0x0000b1e9
    ae40:	0000eb0c 	.word	0x0000eb0c
    ae44:	0000c461 	.word	0x0000c461
    ae48:	0000aa91 	.word	0x0000aa91
    ae4c:	0000b275 	.word	0x0000b275
    ae50:	0000eb40 	.word	0x0000eb40

0000ae54 <check_usart_buffer>:
 *
 * Finding the new line character(\n or \r\n) in the USART buffer.
 * If buffer was overflowed, Sending the buffer.
 */
static void check_usart_buffer(char *topic)
{
    ae54:	b590      	push	{r4, r7, lr}
    ae56:	b087      	sub	sp, #28
    ae58:	af02      	add	r7, sp, #8
    ae5a:	6078      	str	r0, [r7, #4]
	int i;

	/* Publish the input string when newline was received or input string is bigger than buffer size limit. */
	if (uart_buffer_written >= MAIN_CHAT_BUFFER_SIZE) {
    ae5c:	4b30      	ldr	r3, [pc, #192]	; (af20 <check_usart_buffer+0xcc>)
    ae5e:	681b      	ldr	r3, [r3, #0]
    ae60:	2b3f      	cmp	r3, #63	; 0x3f
    ae62:	dd0d      	ble.n	ae80 <check_usart_buffer+0x2c>
		mqtt_publish(&mqtt_inst, topic, uart_buffer, MAIN_CHAT_BUFFER_SIZE, 0, 0);
    ae64:	4a2f      	ldr	r2, [pc, #188]	; (af24 <check_usart_buffer+0xd0>)
    ae66:	6879      	ldr	r1, [r7, #4]
    ae68:	482f      	ldr	r0, [pc, #188]	; (af28 <check_usart_buffer+0xd4>)
    ae6a:	2300      	movs	r3, #0
    ae6c:	9301      	str	r3, [sp, #4]
    ae6e:	2300      	movs	r3, #0
    ae70:	9300      	str	r3, [sp, #0]
    ae72:	2340      	movs	r3, #64	; 0x40
    ae74:	4c2d      	ldr	r4, [pc, #180]	; (af2c <check_usart_buffer+0xd8>)
    ae76:	47a0      	blx	r4
		uart_buffer_written = 0;
    ae78:	4b29      	ldr	r3, [pc, #164]	; (af20 <check_usart_buffer+0xcc>)
    ae7a:	2200      	movs	r2, #0
    ae7c:	601a      	str	r2, [r3, #0]

				break;
			}
		}
	}
}
    ae7e:	e04a      	b.n	af16 <check_usart_buffer+0xc2>
	/* Publish the input string when newline was received or input string is bigger than buffer size limit. */
	if (uart_buffer_written >= MAIN_CHAT_BUFFER_SIZE) {
		mqtt_publish(&mqtt_inst, topic, uart_buffer, MAIN_CHAT_BUFFER_SIZE, 0, 0);
		uart_buffer_written = 0;
	} else {
		for (i = 0; i < uart_buffer_written; i++) {
    ae80:	2300      	movs	r3, #0
    ae82:	60fb      	str	r3, [r7, #12]
    ae84:	e041      	b.n	af0a <check_usart_buffer+0xb6>
			/* Find newline character ('\n' or '\r\n') and publish the previous string . */
			if (uart_buffer[i] == '\n') {
    ae86:	4a27      	ldr	r2, [pc, #156]	; (af24 <check_usart_buffer+0xd0>)
    ae88:	68fb      	ldr	r3, [r7, #12]
    ae8a:	18d3      	adds	r3, r2, r3
    ae8c:	781b      	ldrb	r3, [r3, #0]
    ae8e:	2b0a      	cmp	r3, #10
    ae90:	d138      	bne.n	af04 <check_usart_buffer+0xb0>
				mqtt_publish(&mqtt_inst, topic, uart_buffer, (i > 0 && uart_buffer[i - 1] == '\r') ? i - 1 : i, 0, 0);
    ae92:	68fb      	ldr	r3, [r7, #12]
    ae94:	2b00      	cmp	r3, #0
    ae96:	dd09      	ble.n	aeac <check_usart_buffer+0x58>
    ae98:	68fb      	ldr	r3, [r7, #12]
    ae9a:	3b01      	subs	r3, #1
    ae9c:	4a21      	ldr	r2, [pc, #132]	; (af24 <check_usart_buffer+0xd0>)
    ae9e:	5cd3      	ldrb	r3, [r2, r3]
    aea0:	2b0d      	cmp	r3, #13
    aea2:	d103      	bne.n	aeac <check_usart_buffer+0x58>
    aea4:	68fb      	ldr	r3, [r7, #12]
    aea6:	3b01      	subs	r3, #1
    aea8:	001a      	movs	r2, r3
    aeaa:	e000      	b.n	aeae <check_usart_buffer+0x5a>
    aeac:	68fa      	ldr	r2, [r7, #12]
    aeae:	4c1d      	ldr	r4, [pc, #116]	; (af24 <check_usart_buffer+0xd0>)
    aeb0:	6879      	ldr	r1, [r7, #4]
    aeb2:	481d      	ldr	r0, [pc, #116]	; (af28 <check_usart_buffer+0xd4>)
    aeb4:	2300      	movs	r3, #0
    aeb6:	9301      	str	r3, [sp, #4]
    aeb8:	2300      	movs	r3, #0
    aeba:	9300      	str	r3, [sp, #0]
    aebc:	0013      	movs	r3, r2
    aebe:	0022      	movs	r2, r4
    aec0:	4c1a      	ldr	r4, [pc, #104]	; (af2c <check_usart_buffer+0xd8>)
    aec2:	47a0      	blx	r4
				/* Move remain data to start of the buffer. */
				if (uart_buffer_written > i + 1) {
    aec4:	68fb      	ldr	r3, [r7, #12]
    aec6:	1c5a      	adds	r2, r3, #1
    aec8:	4b15      	ldr	r3, [pc, #84]	; (af20 <check_usart_buffer+0xcc>)
    aeca:	681b      	ldr	r3, [r3, #0]
    aecc:	429a      	cmp	r2, r3
    aece:	da15      	bge.n	aefc <check_usart_buffer+0xa8>
					memmove(uart_buffer, uart_buffer + i + 1, uart_buffer_written - i - 1);
    aed0:	68fb      	ldr	r3, [r7, #12]
    aed2:	1c5a      	adds	r2, r3, #1
    aed4:	4b13      	ldr	r3, [pc, #76]	; (af24 <check_usart_buffer+0xd0>)
    aed6:	18d1      	adds	r1, r2, r3
    aed8:	4b11      	ldr	r3, [pc, #68]	; (af20 <check_usart_buffer+0xcc>)
    aeda:	681a      	ldr	r2, [r3, #0]
    aedc:	68fb      	ldr	r3, [r7, #12]
    aede:	1ad3      	subs	r3, r2, r3
    aee0:	3b01      	subs	r3, #1
    aee2:	001a      	movs	r2, r3
    aee4:	4b0f      	ldr	r3, [pc, #60]	; (af24 <check_usart_buffer+0xd0>)
    aee6:	0018      	movs	r0, r3
    aee8:	4b11      	ldr	r3, [pc, #68]	; (af30 <check_usart_buffer+0xdc>)
    aeea:	4798      	blx	r3
					uart_buffer_written = uart_buffer_written - i - 1;
    aeec:	4b0c      	ldr	r3, [pc, #48]	; (af20 <check_usart_buffer+0xcc>)
    aeee:	681a      	ldr	r2, [r3, #0]
    aef0:	68fb      	ldr	r3, [r7, #12]
    aef2:	1ad3      	subs	r3, r2, r3
    aef4:	1e5a      	subs	r2, r3, #1
    aef6:	4b0a      	ldr	r3, [pc, #40]	; (af20 <check_usart_buffer+0xcc>)
    aef8:	601a      	str	r2, [r3, #0]
				} else {
					uart_buffer_written = 0;
				}

				break;
    aefa:	e00c      	b.n	af16 <check_usart_buffer+0xc2>
				/* Move remain data to start of the buffer. */
				if (uart_buffer_written > i + 1) {
					memmove(uart_buffer, uart_buffer + i + 1, uart_buffer_written - i - 1);
					uart_buffer_written = uart_buffer_written - i - 1;
				} else {
					uart_buffer_written = 0;
    aefc:	4b08      	ldr	r3, [pc, #32]	; (af20 <check_usart_buffer+0xcc>)
    aefe:	2200      	movs	r2, #0
    af00:	601a      	str	r2, [r3, #0]
				}

				break;
    af02:	e008      	b.n	af16 <check_usart_buffer+0xc2>
	/* Publish the input string when newline was received or input string is bigger than buffer size limit. */
	if (uart_buffer_written >= MAIN_CHAT_BUFFER_SIZE) {
		mqtt_publish(&mqtt_inst, topic, uart_buffer, MAIN_CHAT_BUFFER_SIZE, 0, 0);
		uart_buffer_written = 0;
	} else {
		for (i = 0; i < uart_buffer_written; i++) {
    af04:	68fb      	ldr	r3, [r7, #12]
    af06:	3301      	adds	r3, #1
    af08:	60fb      	str	r3, [r7, #12]
    af0a:	4b05      	ldr	r3, [pc, #20]	; (af20 <check_usart_buffer+0xcc>)
    af0c:	681b      	ldr	r3, [r3, #0]
    af0e:	68fa      	ldr	r2, [r7, #12]
    af10:	429a      	cmp	r2, r3
    af12:	dbb8      	blt.n	ae86 <check_usart_buffer+0x32>

				break;
			}
		}
	}
}
    af14:	e7ff      	b.n	af16 <check_usart_buffer+0xc2>
    af16:	46c0      	nop			; (mov r8, r8)
    af18:	46bd      	mov	sp, r7
    af1a:	b005      	add	sp, #20
    af1c:	bd90      	pop	{r4, r7, pc}
    af1e:	46c0      	nop			; (mov r8, r8)
    af20:	200002a4 	.word	0x200002a4
    af24:	20000264 	.word	0x20000264
    af28:	20000170 	.word	0x20000170
    af2c:	0000b69d 	.word	0x0000b69d
    af30:	0000c2ef 	.word	0x0000c2ef

0000af34 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    af34:	b590      	push	{r4, r7, lr}
    af36:	b08b      	sub	sp, #44	; 0x2c
    af38:	af02      	add	r7, sp, #8
	tstrWifiInitParam param;
	int8_t ret;
	char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];
    af3a:	b092      	sub	sp, #72	; 0x48
    af3c:	ab02      	add	r3, sp, #8
    af3e:	3300      	adds	r3, #0
    af40:	61fb      	str	r3, [r7, #28]

	/* Initialize the board. */
	system_init();
    af42:	4b4b      	ldr	r3, [pc, #300]	; (b070 <main+0x13c>)
    af44:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    af46:	4b4b      	ldr	r3, [pc, #300]	; (b074 <main+0x140>)
    af48:	4798      	blx	r3

	/* Output example information */
	printf(STRING_HEADER);
    af4a:	4b4b      	ldr	r3, [pc, #300]	; (b078 <main+0x144>)
    af4c:	0018      	movs	r0, r3
    af4e:	4b4b      	ldr	r3, [pc, #300]	; (b07c <main+0x148>)
    af50:	4798      	blx	r3

	/* Initialize the Timer. */
	configure_timer();
    af52:	4b4b      	ldr	r3, [pc, #300]	; (b080 <main+0x14c>)
    af54:	4798      	blx	r3

	/* Initialize the MQTT service. */
	configure_mqtt();
    af56:	4b4b      	ldr	r3, [pc, #300]	; (b084 <main+0x150>)
    af58:	4798      	blx	r3

	/* Initialize the BSP. */
	nm_bsp_init();
    af5a:	4b4b      	ldr	r3, [pc, #300]	; (b088 <main+0x154>)
    af5c:	4798      	blx	r3
	//scanf("%64s", mqtt_user);
  
  //printf("Enter the password (Max %d characters)\r\n", MAIN_CHAT_PASSWORD_SIZE);
  //scanf("%64s", mqtt_pass);

	printf("User : %s\r\n", mqtt_user);
    af5e:	4a4b      	ldr	r2, [pc, #300]	; (b08c <main+0x158>)
    af60:	4b4b      	ldr	r3, [pc, #300]	; (b090 <main+0x15c>)
    af62:	0011      	movs	r1, r2
    af64:	0018      	movs	r0, r3
    af66:	4b4b      	ldr	r3, [pc, #300]	; (b094 <main+0x160>)
    af68:	4798      	blx	r3
  printf("Password : %s\r\n", mqtt_user);
    af6a:	4a48      	ldr	r2, [pc, #288]	; (b08c <main+0x158>)
    af6c:	4b4a      	ldr	r3, [pc, #296]	; (b098 <main+0x164>)
    af6e:	0011      	movs	r1, r2
    af70:	0018      	movs	r0, r3
    af72:	4b48      	ldr	r3, [pc, #288]	; (b094 <main+0x160>)
    af74:	4798      	blx	r3
	sprintf(topic, "%s", MAIN_CHAT_TOPIC);
    af76:	69fa      	ldr	r2, [r7, #28]
    af78:	4b48      	ldr	r3, [pc, #288]	; (b09c <main+0x168>)
    af7a:	0010      	movs	r0, r2
    af7c:	0019      	movs	r1, r3
    af7e:	2305      	movs	r3, #5
    af80:	001a      	movs	r2, r3
    af82:	4b47      	ldr	r3, [pc, #284]	; (b0a0 <main+0x16c>)
    af84:	4798      	blx	r3
  printf("Topic : %s\r\n", topic);
    af86:	69fa      	ldr	r2, [r7, #28]
    af88:	4b46      	ldr	r3, [pc, #280]	; (b0a4 <main+0x170>)
    af8a:	0011      	movs	r1, r2
    af8c:	0018      	movs	r0, r3
    af8e:	4b41      	ldr	r3, [pc, #260]	; (b094 <main+0x160>)
    af90:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    af92:	003b      	movs	r3, r7
    af94:	2218      	movs	r2, #24
    af96:	2100      	movs	r1, #0
    af98:	0018      	movs	r0, r3
    af9a:	4b43      	ldr	r3, [pc, #268]	; (b0a8 <main+0x174>)
    af9c:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    af9e:	003b      	movs	r3, r7
    afa0:	4a42      	ldr	r2, [pc, #264]	; (b0ac <main+0x178>)
    afa2:	601a      	str	r2, [r3, #0]
	ret = m2m_wifi_init(&param);
    afa4:	231b      	movs	r3, #27
    afa6:	18fc      	adds	r4, r7, r3
    afa8:	003b      	movs	r3, r7
    afaa:	0018      	movs	r0, r3
    afac:	4b40      	ldr	r3, [pc, #256]	; (b0b0 <main+0x17c>)
    afae:	4798      	blx	r3
    afb0:	0003      	movs	r3, r0
    afb2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    afb4:	231b      	movs	r3, #27
    afb6:	18fb      	adds	r3, r7, r3
    afb8:	781b      	ldrb	r3, [r3, #0]
    afba:	b25b      	sxtb	r3, r3
    afbc:	2b00      	cmp	r3, #0
    afbe:	d009      	beq.n	afd4 <main+0xa0>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    afc0:	231b      	movs	r3, #27
    afc2:	18fb      	adds	r3, r7, r3
    afc4:	2200      	movs	r2, #0
    afc6:	569a      	ldrsb	r2, [r3, r2]
    afc8:	4b3a      	ldr	r3, [pc, #232]	; (b0b4 <main+0x180>)
    afca:	0011      	movs	r1, r2
    afcc:	0018      	movs	r0, r3
    afce:	4b31      	ldr	r3, [pc, #196]	; (b094 <main+0x160>)
    afd0:	4798      	blx	r3
		while (1) { /* Loop forever. */
		}
    afd2:	e7fe      	b.n	afd2 <main+0x9e>
	}

	/* Initialize socket interface. */
	socketInit();
    afd4:	4b38      	ldr	r3, [pc, #224]	; (b0b8 <main+0x184>)
    afd6:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    afd8:	4a38      	ldr	r2, [pc, #224]	; (b0bc <main+0x188>)
    afda:	4b39      	ldr	r3, [pc, #228]	; (b0c0 <main+0x18c>)
    afdc:	0011      	movs	r1, r2
    afde:	0018      	movs	r0, r3
    afe0:	4b38      	ldr	r3, [pc, #224]	; (b0c4 <main+0x190>)
    afe2:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    afe4:	4a38      	ldr	r2, [pc, #224]	; (b0c8 <main+0x194>)
    afe6:	4839      	ldr	r0, [pc, #228]	; (b0cc <main+0x198>)
    afe8:	23ff      	movs	r3, #255	; 0xff
    afea:	9300      	str	r3, [sp, #0]
    afec:	0013      	movs	r3, r2
    afee:	2202      	movs	r2, #2
    aff0:	210b      	movs	r1, #11
    aff2:	4c37      	ldr	r4, [pc, #220]	; (b0d0 <main+0x19c>)
    aff4:	47a0      	blx	r4
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

	while (1) {
		/* Handle pending events from network controller. */
		sint8 wifiStatus = m2m_wifi_handle_events(NULL);
    aff6:	231a      	movs	r3, #26
    aff8:	18fc      	adds	r4, r7, r3
    affa:	2000      	movs	r0, #0
    affc:	4b35      	ldr	r3, [pc, #212]	; (b0d4 <main+0x1a0>)
    affe:	4798      	blx	r3
    b000:	0003      	movs	r3, r0
    b002:	7023      	strb	r3, [r4, #0]
		/* Try to read user input from USART. */
		usart_read_job(&cdc_uart_module, &uart_ch_buffer);
    b004:	4a34      	ldr	r2, [pc, #208]	; (b0d8 <main+0x1a4>)
    b006:	4b35      	ldr	r3, [pc, #212]	; (b0dc <main+0x1a8>)
    b008:	0011      	movs	r1, r2
    b00a:	0018      	movs	r0, r3
    b00c:	4b34      	ldr	r3, [pc, #208]	; (b0e0 <main+0x1ac>)
    b00e:	4798      	blx	r3
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
    b010:	4b34      	ldr	r3, [pc, #208]	; (b0e4 <main+0x1b0>)
    b012:	0018      	movs	r0, r3
    b014:	4b34      	ldr	r3, [pc, #208]	; (b0e8 <main+0x1b4>)
    b016:	4798      	blx	r3
    
    if( port_pin_get_input_level(BUTTON_0_PIN) != buttonLevel )
    b018:	2037      	movs	r0, #55	; 0x37
    b01a:	4b34      	ldr	r3, [pc, #208]	; (b0ec <main+0x1b8>)
    b01c:	4798      	blx	r3
    b01e:	0003      	movs	r3, r0
    b020:	001a      	movs	r2, r3
    b022:	4b33      	ldr	r3, [pc, #204]	; (b0f0 <main+0x1bc>)
    b024:	781b      	ldrb	r3, [r3, #0]
    b026:	429a      	cmp	r2, r3
    b028:	d01d      	beq.n	b066 <main+0x132>
    {
      //int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain);
      buttonLevel = port_pin_get_input_level(BUTTON_0_PIN);
    b02a:	2037      	movs	r0, #55	; 0x37
    b02c:	4b2f      	ldr	r3, [pc, #188]	; (b0ec <main+0x1b8>)
    b02e:	4798      	blx	r3
    b030:	0003      	movs	r3, r0
    b032:	001a      	movs	r2, r3
    b034:	4b2e      	ldr	r3, [pc, #184]	; (b0f0 <main+0x1bc>)
    b036:	701a      	strb	r2, [r3, #0]
      sprintf(pub_text, "%d", buttonLevel);
    b038:	4b2d      	ldr	r3, [pc, #180]	; (b0f0 <main+0x1bc>)
    b03a:	781b      	ldrb	r3, [r3, #0]
    b03c:	001a      	movs	r2, r3
    b03e:	492d      	ldr	r1, [pc, #180]	; (b0f4 <main+0x1c0>)
    b040:	4b2d      	ldr	r3, [pc, #180]	; (b0f8 <main+0x1c4>)
    b042:	0018      	movs	r0, r3
    b044:	4b2d      	ldr	r3, [pc, #180]	; (b0fc <main+0x1c8>)
    b046:	4798      	blx	r3
      mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 1, 1, 1);
    b048:	4a2b      	ldr	r2, [pc, #172]	; (b0f8 <main+0x1c4>)
    b04a:	492d      	ldr	r1, [pc, #180]	; (b100 <main+0x1cc>)
    b04c:	482d      	ldr	r0, [pc, #180]	; (b104 <main+0x1d0>)
    b04e:	2301      	movs	r3, #1
    b050:	9301      	str	r3, [sp, #4]
    b052:	2301      	movs	r3, #1
    b054:	9300      	str	r3, [sp, #0]
    b056:	2301      	movs	r3, #1
    b058:	4c2b      	ldr	r4, [pc, #172]	; (b108 <main+0x1d4>)
    b05a:	47a0      	blx	r4
      delay_ms(300);
    b05c:	2396      	movs	r3, #150	; 0x96
    b05e:	005b      	lsls	r3, r3, #1
    b060:	0018      	movs	r0, r3
    b062:	4b2a      	ldr	r3, [pc, #168]	; (b10c <main+0x1d8>)
    b064:	4798      	blx	r3
    }
		/* Checks the USART buffer. */
    check_usart_buffer(MAIN_CHAT_TOPIC);
    b066:	4b0d      	ldr	r3, [pc, #52]	; (b09c <main+0x168>)
    b068:	0018      	movs	r0, r3
    b06a:	4b29      	ldr	r3, [pc, #164]	; (b110 <main+0x1dc>)
    b06c:	4798      	blx	r3
	}
    b06e:	e7c2      	b.n	aff6 <main+0xc2>
    b070:	0000917d 	.word	0x0000917d
    b074:	0000aced 	.word	0x0000aced
    b078:	0000eb74 	.word	0x0000eb74
    b07c:	0000c581 	.word	0x0000c581
    b080:	0000ad75 	.word	0x0000ad75
    b084:	0000adb1 	.word	0x0000adb1
    b088:	0000035d 	.word	0x0000035d
    b08c:	20000010 	.word	0x20000010
    b090:	0000ebe0 	.word	0x0000ebe0
    b094:	0000c461 	.word	0x0000c461
    b098:	0000ebec 	.word	0x0000ebec
    b09c:	0000ea6c 	.word	0x0000ea6c
    b0a0:	0000c2dd 	.word	0x0000c2dd
    b0a4:	0000ebfc 	.word	0x0000ebfc
    b0a8:	0000c319 	.word	0x0000c319
    b0ac:	0000a95d 	.word	0x0000a95d
    b0b0:	00001e1d 	.word	0x00001e1d
    b0b4:	0000ec0c 	.word	0x0000ec0c
    b0b8:	00005021 	.word	0x00005021
    b0bc:	0000aa6d 	.word	0x0000aa6d
    b0c0:	0000aa39 	.word	0x0000aa39
    b0c4:	00005071 	.word	0x00005071
    b0c8:	0000ea00 	.word	0x0000ea00
    b0cc:	0000ea0c 	.word	0x0000ea0c
    b0d0:	00002025 	.word	0x00002025
    b0d4:	00002009 	.word	0x00002009
    b0d8:	200002a8 	.word	0x200002a8
    b0dc:	200000fc 	.word	0x200000fc
    b0e0:	00007e95 	.word	0x00007e95
    b0e4:	20000474 	.word	0x20000474
    b0e8:	0000a495 	.word	0x0000a495
    b0ec:	0000a5e1 	.word	0x0000a5e1
    b0f0:	20000470 	.word	0x20000470
    b0f4:	0000ec34 	.word	0x0000ec34
    b0f8:	20000130 	.word	0x20000130
    b0fc:	0000c72d 	.word	0x0000c72d
    b100:	0000ea74 	.word	0x0000ea74
    b104:	20000170 	.word	0x20000170
    b108:	0000b69d 	.word	0x0000b69d
    b10c:	000001a1 	.word	0x000001a1
    b110:	0000ae55 	.word	0x0000ae55

0000b114 <_hwerr_to_stderr>:
    b114:	1c03      	adds	r3, r0, #0
    b116:	300e      	adds	r0, #14
    b118:	b500      	push	{lr}
    b11a:	280e      	cmp	r0, #14
    b11c:	d819      	bhi.n	b152 <_hwerr_to_stderr+0x3e>
    b11e:	f000 ff01 	bl	bf24 <__gnu_thumb1_case_uqi>
    b122:	1416      	.short	0x1416
    b124:	1b181012 	.word	0x1b181012
    b128:	180c0e18 	.word	0x180c0e18
    b12c:	1d0a0e0e 	.word	0x1d0a0e0e
    b130:	08          	.byte	0x08
    b131:	00          	.byte	0x00
    b132:	2000      	movs	r0, #0
    b134:	e014      	b.n	b160 <_hwerr_to_stderr+0x4c>
    b136:	2070      	movs	r0, #112	; 0x70
    b138:	e011      	b.n	b15e <_hwerr_to_stderr+0x4a>
    b13a:	2016      	movs	r0, #22
    b13c:	e00f      	b.n	b15e <_hwerr_to_stderr+0x4a>
    b13e:	200c      	movs	r0, #12
    b140:	e00d      	b.n	b15e <_hwerr_to_stderr+0x4a>
    b142:	2079      	movs	r0, #121	; 0x79
    b144:	e00b      	b.n	b15e <_hwerr_to_stderr+0x4a>
    b146:	2068      	movs	r0, #104	; 0x68
    b148:	e009      	b.n	b15e <_hwerr_to_stderr+0x4a>
    b14a:	200b      	movs	r0, #11
    b14c:	e007      	b.n	b15e <_hwerr_to_stderr+0x4a>
    b14e:	2010      	movs	r0, #16
    b150:	e005      	b.n	b15e <_hwerr_to_stderr+0x4a>
    b152:	2000      	movs	r0, #0
    b154:	4283      	cmp	r3, r0
    b156:	da03      	bge.n	b160 <_hwerr_to_stderr+0x4c>
    b158:	2005      	movs	r0, #5
    b15a:	e000      	b.n	b15e <_hwerr_to_stderr+0x4a>
    b15c:	2002      	movs	r0, #2
    b15e:	4240      	negs	r0, r0
    b160:	bd00      	pop	{pc}
	...

0000b164 <_mqtt_send_wait>:
    b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b166:	1c04      	adds	r4, r0, #0
    b168:	3443      	adds	r4, #67	; 0x43
    b16a:	7823      	ldrb	r3, [r4, #0]
    b16c:	1c05      	adds	r5, r0, #0
    b16e:	07d8      	lsls	r0, r3, #31
    b170:	d51c      	bpl.n	b1ac <_mqtt_send_wait+0x48>
    b172:	2604      	movs	r6, #4
    b174:	4333      	orrs	r3, r6
    b176:	7023      	strb	r3, [r4, #0]
    b178:	2002      	movs	r0, #2
    b17a:	5628      	ldrsb	r0, [r5, r0]
    b17c:	b292      	uxth	r2, r2
    b17e:	2300      	movs	r3, #0
    b180:	4f0c      	ldr	r7, [pc, #48]	; (b1b4 <_mqtt_send_wait+0x50>)
    b182:	47b8      	blx	r7
    b184:	2800      	cmp	r0, #0
    b186:	da05      	bge.n	b194 <_mqtt_send_wait+0x30>
    b188:	7823      	ldrb	r3, [r4, #0]
    b18a:	43b3      	bics	r3, r6
    b18c:	7023      	strb	r3, [r4, #0]
    b18e:	4b0a      	ldr	r3, [pc, #40]	; (b1b8 <_mqtt_send_wait+0x54>)
    b190:	4798      	blx	r3
    b192:	e00d      	b.n	b1b0 <_mqtt_send_wait+0x4c>
    b194:	7822      	ldrb	r2, [r4, #0]
    b196:	2314      	movs	r3, #20
    b198:	4013      	ands	r3, r2
    b19a:	2000      	movs	r0, #0
    b19c:	2b04      	cmp	r3, #4
    b19e:	d107      	bne.n	b1b0 <_mqtt_send_wait+0x4c>
    b1a0:	4b06      	ldr	r3, [pc, #24]	; (b1bc <_mqtt_send_wait+0x58>)
    b1a2:	4798      	blx	r3
    b1a4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    b1a6:	4b06      	ldr	r3, [pc, #24]	; (b1c0 <_mqtt_send_wait+0x5c>)
    b1a8:	4798      	blx	r3
    b1aa:	e7f3      	b.n	b194 <_mqtt_send_wait+0x30>
    b1ac:	2001      	movs	r0, #1
    b1ae:	4240      	negs	r0, r0
    b1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b1b2:	46c0      	nop			; (mov r8, r8)
    b1b4:	000053bd 	.word	0x000053bd
    b1b8:	0000b115 	.word	0x0000b115
    b1bc:	00002009 	.word	0x00002009
    b1c0:	0000a495 	.word	0x0000a495

0000b1c4 <mqtt_get_config_defaults>:
    b1c4:	4b07      	ldr	r3, [pc, #28]	; (b1e4 <mqtt_get_config_defaults+0x20>)
    b1c6:	2240      	movs	r2, #64	; 0x40
    b1c8:	8003      	strh	r3, [r0, #0]
    b1ca:	2396      	movs	r3, #150	; 0x96
    b1cc:	009b      	lsls	r3, r3, #2
    b1ce:	8103      	strh	r3, [r0, #8]
    b1d0:	6102      	str	r2, [r0, #16]
    b1d2:	2300      	movs	r3, #0
    b1d4:	2220      	movs	r2, #32
    b1d6:	7083      	strb	r3, [r0, #2]
    b1d8:	6043      	str	r3, [r0, #4]
    b1da:	60c3      	str	r3, [r0, #12]
    b1dc:	6142      	str	r2, [r0, #20]
    b1de:	7603      	strb	r3, [r0, #24]
    b1e0:	4770      	bx	lr
    b1e2:	46c0      	nop			; (mov r8, r8)
    b1e4:	0000075b 	.word	0x0000075b

0000b1e8 <mqtt_init>:
    b1e8:	b538      	push	{r3, r4, r5, lr}
    b1ea:	1c04      	adds	r4, r0, #0
    b1ec:	1c0d      	adds	r5, r1, #0
    b1ee:	2800      	cmp	r0, #0
    b1f0:	d030      	beq.n	b254 <mqtt_init+0x6c>
    b1f2:	2900      	cmp	r1, #0
    b1f4:	d02e      	beq.n	b254 <mqtt_init+0x6c>
    b1f6:	690b      	ldr	r3, [r1, #16]
    b1f8:	2b00      	cmp	r3, #0
    b1fa:	d02b      	beq.n	b254 <mqtt_init+0x6c>
    b1fc:	684b      	ldr	r3, [r1, #4]
    b1fe:	2b00      	cmp	r3, #0
    b200:	d028      	beq.n	b254 <mqtt_init+0x6c>
    b202:	2100      	movs	r1, #0
    b204:	2274      	movs	r2, #116	; 0x74
    b206:	4b16      	ldr	r3, [pc, #88]	; (b260 <mqtt_init+0x78>)
    b208:	4798      	blx	r3
    b20a:	1c20      	adds	r0, r4, #0
    b20c:	4b15      	ldr	r3, [pc, #84]	; (b264 <mqtt_init+0x7c>)
    b20e:	3058      	adds	r0, #88	; 0x58
    b210:	1c29      	adds	r1, r5, #0
    b212:	221c      	movs	r2, #28
    b214:	4798      	blx	r3
    b216:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b218:	2b00      	cmp	r3, #0
    b21a:	d10b      	bne.n	b234 <mqtt_init+0x4c>
    b21c:	6928      	ldr	r0, [r5, #16]
    b21e:	4b12      	ldr	r3, [pc, #72]	; (b268 <mqtt_init+0x80>)
    b220:	4798      	blx	r3
    b222:	6660      	str	r0, [r4, #100]	; 0x64
    b224:	2800      	cmp	r0, #0
    b226:	d017      	beq.n	b258 <mqtt_init+0x70>
    b228:	1c23      	adds	r3, r4, #0
    b22a:	3343      	adds	r3, #67	; 0x43
    b22c:	781a      	ldrb	r2, [r3, #0]
    b22e:	2120      	movs	r1, #32
    b230:	430a      	orrs	r2, r1
    b232:	701a      	strb	r2, [r3, #0]
    b234:	892a      	ldrh	r2, [r5, #8]
    b236:	23fa      	movs	r3, #250	; 0xfa
    b238:	005b      	lsls	r3, r3, #1
    b23a:	4353      	muls	r3, r2
    b23c:	6868      	ldr	r0, [r5, #4]
    b23e:	490b      	ldr	r1, [pc, #44]	; (b26c <mqtt_init+0x84>)
    b240:	1c22      	adds	r2, r4, #0
    b242:	4d0b      	ldr	r5, [pc, #44]	; (b270 <mqtt_init+0x88>)
    b244:	47a8      	blx	r5
    b246:	1c03      	adds	r3, r0, #0
    b248:	6520      	str	r0, [r4, #80]	; 0x50
    b24a:	2000      	movs	r0, #0
    b24c:	4283      	cmp	r3, r0
    b24e:	da05      	bge.n	b25c <mqtt_init+0x74>
    b250:	201c      	movs	r0, #28
    b252:	e002      	b.n	b25a <mqtt_init+0x72>
    b254:	2016      	movs	r0, #22
    b256:	e000      	b.n	b25a <mqtt_init+0x72>
    b258:	200c      	movs	r0, #12
    b25a:	4240      	negs	r0, r0
    b25c:	bd38      	pop	{r3, r4, r5, pc}
    b25e:	46c0      	nop			; (mov r8, r8)
    b260:	0000c319 	.word	0x0000c319
    b264:	0000c2dd 	.word	0x0000c2dd
    b268:	0000c2c9 	.word	0x0000c2c9
    b26c:	0000b9f1 	.word	0x0000b9f1
    b270:	0000a389 	.word	0x0000a389

0000b274 <mqtt_register_callback>:
    b274:	2800      	cmp	r0, #0
    b276:	d002      	beq.n	b27e <mqtt_register_callback+0xa>
    b278:	6541      	str	r1, [r0, #84]	; 0x54
    b27a:	2000      	movs	r0, #0
    b27c:	e001      	b.n	b282 <mqtt_register_callback+0xe>
    b27e:	2016      	movs	r0, #22
    b280:	4240      	negs	r0, r0
    b282:	4770      	bx	lr

0000b284 <mqtt_socket_resolve_handler>:
    b284:	b5f0      	push	{r4, r5, r6, r7, lr}
    b286:	1c06      	adds	r6, r0, #0
    b288:	b085      	sub	sp, #20
    b28a:	1c0f      	adds	r7, r1, #0
    b28c:	2400      	movs	r4, #0
    b28e:	4b0f      	ldr	r3, [pc, #60]	; (b2cc <mqtt_socket_resolve_handler+0x48>)
    b290:	58e5      	ldr	r5, [r4, r3]
    b292:	2d00      	cmp	r5, #0
    b294:	d015      	beq.n	b2c2 <mqtt_socket_resolve_handler+0x3e>
    b296:	1ce9      	adds	r1, r5, #3
    b298:	1c30      	adds	r0, r6, #0
    b29a:	4b0d      	ldr	r3, [pc, #52]	; (b2d0 <mqtt_socket_resolve_handler+0x4c>)
    b29c:	4798      	blx	r3
    b29e:	2800      	cmp	r0, #0
    b2a0:	d10f      	bne.n	b2c2 <mqtt_socket_resolve_handler+0x3e>
    b2a2:	466a      	mov	r2, sp
    b2a4:	2302      	movs	r3, #2
    b2a6:	8013      	strh	r3, [r2, #0]
    b2a8:	1c2b      	adds	r3, r5, #0
    b2aa:	3358      	adds	r3, #88	; 0x58
    b2ac:	881b      	ldrh	r3, [r3, #0]
    b2ae:	9701      	str	r7, [sp, #4]
    b2b0:	ba5b      	rev16	r3, r3
    b2b2:	8053      	strh	r3, [r2, #2]
    b2b4:	2002      	movs	r0, #2
    b2b6:	5628      	ldrsb	r0, [r5, r0]
    b2b8:	4669      	mov	r1, sp
    b2ba:	2210      	movs	r2, #16
    b2bc:	4b05      	ldr	r3, [pc, #20]	; (b2d4 <mqtt_socket_resolve_handler+0x50>)
    b2be:	4798      	blx	r3
    b2c0:	e002      	b.n	b2c8 <mqtt_socket_resolve_handler+0x44>
    b2c2:	3404      	adds	r4, #4
    b2c4:	2c1c      	cmp	r4, #28
    b2c6:	d1e2      	bne.n	b28e <mqtt_socket_resolve_handler+0xa>
    b2c8:	b005      	add	sp, #20
    b2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b2cc:	200002ac 	.word	0x200002ac
    b2d0:	0000c771 	.word	0x0000c771
    b2d4:	000052a9 	.word	0x000052a9

0000b2d8 <mqtt_connect>:
    b2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2da:	1c04      	adds	r4, r0, #0
    b2dc:	b089      	sub	sp, #36	; 0x24
    b2de:	1c0d      	adds	r5, r1, #0
    b2e0:	2800      	cmp	r0, #0
    b2e2:	d051      	beq.n	b388 <mqtt_connect+0xb0>
    b2e4:	2900      	cmp	r1, #0
    b2e6:	d04f      	beq.n	b388 <mqtt_connect+0xb0>
    b2e8:	1c08      	adds	r0, r1, #0
    b2ea:	4b39      	ldr	r3, [pc, #228]	; (b3d0 <mqtt_connect+0xf8>)
    b2ec:	4798      	blx	r3
    b2ee:	2840      	cmp	r0, #64	; 0x40
    b2f0:	d84c      	bhi.n	b38c <mqtt_connect+0xb4>
    b2f2:	1c21      	adds	r1, r4, #0
    b2f4:	3143      	adds	r1, #67	; 0x43
    b2f6:	780b      	ldrb	r3, [r1, #0]
    b2f8:	9101      	str	r1, [sp, #4]
    b2fa:	07db      	lsls	r3, r3, #31
    b2fc:	0fd9      	lsrs	r1, r3, #31
    b2fe:	466a      	mov	r2, sp
    b300:	b2ce      	uxtb	r6, r1
    b302:	1ce0      	adds	r0, r4, #3
    b304:	7211      	strb	r1, [r2, #8]
    b306:	2e00      	cmp	r6, #0
    b308:	d142      	bne.n	b390 <mqtt_connect+0xb8>
    b30a:	2701      	movs	r7, #1
    b30c:	1c29      	adds	r1, r5, #0
    b30e:	4b31      	ldr	r3, [pc, #196]	; (b3d4 <mqtt_connect+0xfc>)
    b310:	8027      	strh	r7, [r4, #0]
    b312:	4798      	blx	r3
    b314:	9a01      	ldr	r2, [sp, #4]
    b316:	2002      	movs	r0, #2
    b318:	7813      	ldrb	r3, [r2, #0]
    b31a:	9901      	ldr	r1, [sp, #4]
    b31c:	43bb      	bics	r3, r7
    b31e:	4383      	bics	r3, r0
    b320:	22e3      	movs	r2, #227	; 0xe3
    b322:	4013      	ands	r3, r2
    b324:	466a      	mov	r2, sp
    b326:	700b      	strb	r3, [r1, #0]
    b328:	7a12      	ldrb	r2, [r2, #8]
    b32a:	1c23      	adds	r3, r4, #0
    b32c:	3348      	adds	r3, #72	; 0x48
    b32e:	6466      	str	r6, [r4, #68]	; 0x44
    b330:	701a      	strb	r2, [r3, #0]
    b332:	7c9a      	ldrb	r2, [r3, #18]
    b334:	805e      	strh	r6, [r3, #2]
    b336:	1e53      	subs	r3, r2, #1
    b338:	419a      	sbcs	r2, r3
    b33a:	b2d2      	uxtb	r2, r2
    b33c:	1c39      	adds	r1, r7, #0
    b33e:	4b26      	ldr	r3, [pc, #152]	; (b3d8 <mqtt_connect+0x100>)
    b340:	4798      	blx	r3
    b342:	70a0      	strb	r0, [r4, #2]
    b344:	2800      	cmp	r0, #0
    b346:	db25      	blt.n	b394 <mqtt_connect+0xbc>
    b348:	4b24      	ldr	r3, [pc, #144]	; (b3dc <mqtt_connect+0x104>)
    b34a:	0080      	lsls	r0, r0, #2
    b34c:	50c4      	str	r4, [r0, r3]
    b34e:	1c2b      	adds	r3, r5, #0
    b350:	781f      	ldrb	r7, [r3, #0]
    b352:	2f00      	cmp	r7, #0
    b354:	d026      	beq.n	b3a4 <mqtt_connect+0xcc>
    b356:	2220      	movs	r2, #32
    b358:	1c39      	adds	r1, r7, #0
    b35a:	4391      	bics	r1, r2
    b35c:	1c0a      	adds	r2, r1, #0
    b35e:	3a41      	subs	r2, #65	; 0x41
    b360:	b2d2      	uxtb	r2, r2
    b362:	3301      	adds	r3, #1
    b364:	2a05      	cmp	r2, #5
    b366:	d90d      	bls.n	b384 <mqtt_connect+0xac>
    b368:	2f3a      	cmp	r7, #58	; 0x3a
    b36a:	d00b      	beq.n	b384 <mqtt_connect+0xac>
    b36c:	2f2f      	cmp	r7, #47	; 0x2f
    b36e:	d009      	beq.n	b384 <mqtt_connect+0xac>
    b370:	2f2e      	cmp	r7, #46	; 0x2e
    b372:	d102      	bne.n	b37a <mqtt_connect+0xa2>
    b374:	2e00      	cmp	r6, #0
    b376:	d0eb      	beq.n	b350 <mqtt_connect+0x78>
    b378:	e00f      	b.n	b39a <mqtt_connect+0xc2>
    b37a:	2230      	movs	r2, #48	; 0x30
    b37c:	4017      	ands	r7, r2
    b37e:	4297      	cmp	r7, r2
    b380:	d0e6      	beq.n	b350 <mqtt_connect+0x78>
    b382:	e00a      	b.n	b39a <mqtt_connect+0xc2>
    b384:	2601      	movs	r6, #1
    b386:	e7e3      	b.n	b350 <mqtt_connect+0x78>
    b388:	2016      	movs	r0, #22
    b38a:	e004      	b.n	b396 <mqtt_connect+0xbe>
    b38c:	205b      	movs	r0, #91	; 0x5b
    b38e:	e002      	b.n	b396 <mqtt_connect+0xbe>
    b390:	2078      	movs	r0, #120	; 0x78
    b392:	e000      	b.n	b396 <mqtt_connect+0xbe>
    b394:	201c      	movs	r0, #28
    b396:	4240      	negs	r0, r0
    b398:	e017      	b.n	b3ca <mqtt_connect+0xf2>
    b39a:	1c28      	adds	r0, r5, #0
    b39c:	4b10      	ldr	r3, [pc, #64]	; (b3e0 <mqtt_connect+0x108>)
    b39e:	4798      	blx	r3
    b3a0:	2000      	movs	r0, #0
    b3a2:	e012      	b.n	b3ca <mqtt_connect+0xf2>
    b3a4:	466a      	mov	r2, sp
    b3a6:	2302      	movs	r3, #2
    b3a8:	8213      	strh	r3, [r2, #16]
    b3aa:	1c23      	adds	r3, r4, #0
    b3ac:	3358      	adds	r3, #88	; 0x58
    b3ae:	881b      	ldrh	r3, [r3, #0]
    b3b0:	1c28      	adds	r0, r5, #0
    b3b2:	ba5b      	rev16	r3, r3
    b3b4:	8253      	strh	r3, [r2, #18]
    b3b6:	4b0b      	ldr	r3, [pc, #44]	; (b3e4 <mqtt_connect+0x10c>)
    b3b8:	4798      	blx	r3
    b3ba:	9005      	str	r0, [sp, #20]
    b3bc:	2002      	movs	r0, #2
    b3be:	5620      	ldrsb	r0, [r4, r0]
    b3c0:	a904      	add	r1, sp, #16
    b3c2:	2210      	movs	r2, #16
    b3c4:	4b08      	ldr	r3, [pc, #32]	; (b3e8 <mqtt_connect+0x110>)
    b3c6:	4798      	blx	r3
    b3c8:	1c38      	adds	r0, r7, #0
    b3ca:	b009      	add	sp, #36	; 0x24
    b3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3ce:	46c0      	nop			; (mov r8, r8)
    b3d0:	0000c795 	.word	0x0000c795
    b3d4:	0000c785 	.word	0x0000c785
    b3d8:	00005099 	.word	0x00005099
    b3dc:	200002ac 	.word	0x200002ac
    b3e0:	000058e5 	.word	0x000058e5
    b3e4:	000057dd 	.word	0x000057dd
    b3e8:	000052a9 	.word	0x000052a9

0000b3ec <mqtt_connect_broker>:
    b3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3ee:	b095      	sub	sp, #84	; 0x54
    b3f0:	af02      	add	r7, sp, #8
    b3f2:	617b      	str	r3, [r7, #20]
    b3f4:	1c3b      	adds	r3, r7, #0
    b3f6:	3370      	adds	r3, #112	; 0x70
    b3f8:	781b      	ldrb	r3, [r3, #0]
    b3fa:	1c05      	adds	r5, r0, #0
    b3fc:	60fb      	str	r3, [r7, #12]
    b3fe:	1c3b      	adds	r3, r7, #0
    b400:	3374      	adds	r3, #116	; 0x74
    b402:	781b      	ldrb	r3, [r3, #0]
    b404:	6139      	str	r1, [r7, #16]
    b406:	61fa      	str	r2, [r7, #28]
    b408:	60bb      	str	r3, [r7, #8]
    b40a:	2800      	cmp	r0, #0
    b40c:	d101      	bne.n	b412 <mqtt_connect_broker+0x26>
    b40e:	2016      	movs	r0, #22
    b410:	e129      	b.n	b666 <mqtt_connect_broker+0x27a>
    b412:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    b414:	4668      	mov	r0, sp
    b416:	3307      	adds	r3, #7
    b418:	08db      	lsrs	r3, r3, #3
    b41a:	00db      	lsls	r3, r3, #3
    b41c:	1ac0      	subs	r0, r0, r3
    b41e:	4685      	mov	sp, r0
    b420:	ac02      	add	r4, sp, #8
    b422:	607c      	str	r4, [r7, #4]
    b424:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    b426:	2c00      	cmp	r4, #0
    b428:	d0f1      	beq.n	b40e <mqtt_connect_broker+0x22>
    b42a:	1c2b      	adds	r3, r5, #0
    b42c:	3343      	adds	r3, #67	; 0x43
    b42e:	781b      	ldrb	r3, [r3, #0]
    b430:	07d8      	lsls	r0, r3, #31
    b432:	d400      	bmi.n	b436 <mqtt_connect_broker+0x4a>
    b434:	e112      	b.n	b65c <mqtt_connect_broker+0x270>
    b436:	079a      	lsls	r2, r3, #30
    b438:	d500      	bpl.n	b43c <mqtt_connect_broker+0x50>
    b43a:	e111      	b.n	b660 <mqtt_connect_broker+0x274>
    b43c:	071c      	lsls	r4, r3, #28
    b43e:	d40b      	bmi.n	b458 <mqtt_connect_broker+0x6c>
    b440:	4e8b      	ldr	r6, [pc, #556]	; (b670 <mqtt_connect_broker+0x284>)
    b442:	6e38      	ldr	r0, [r7, #96]	; 0x60
    b444:	47b0      	blx	r6
    b446:	1c03      	adds	r3, r0, #0
    b448:	61b8      	str	r0, [r7, #24]
    b44a:	69f8      	ldr	r0, [r7, #28]
    b44c:	330e      	adds	r3, #14
    b44e:	1c34      	adds	r4, r6, #0
    b450:	2800      	cmp	r0, #0
    b452:	d113      	bne.n	b47c <mqtt_connect_broker+0x90>
    b454:	1c1e      	adds	r6, r3, #0
    b456:	e01d      	b.n	b494 <mqtt_connect_broker+0xa8>
    b458:	1c2b      	adds	r3, r5, #0
    b45a:	3370      	adds	r3, #112	; 0x70
    b45c:	781b      	ldrb	r3, [r3, #0]
    b45e:	2b00      	cmp	r3, #0
    b460:	d000      	beq.n	b464 <mqtt_connect_broker+0x78>
    b462:	e0ff      	b.n	b664 <mqtt_connect_broker+0x278>
    b464:	1c2b      	adds	r3, r5, #0
    b466:	3343      	adds	r3, #67	; 0x43
    b468:	781b      	ldrb	r3, [r3, #0]
    b46a:	071a      	lsls	r2, r3, #28
    b46c:	d5e8      	bpl.n	b440 <mqtt_connect_broker+0x54>
    b46e:	4b81      	ldr	r3, [pc, #516]	; (b674 <mqtt_connect_broker+0x288>)
    b470:	2000      	movs	r0, #0
    b472:	4798      	blx	r3
    b474:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    b476:	4b80      	ldr	r3, [pc, #512]	; (b678 <mqtt_connect_broker+0x28c>)
    b478:	4798      	blx	r3
    b47a:	e7f3      	b.n	b464 <mqtt_connect_broker+0x78>
    b47c:	69f8      	ldr	r0, [r7, #28]
    b47e:	47b0      	blx	r6
    b480:	69be      	ldr	r6, [r7, #24]
    b482:	697b      	ldr	r3, [r7, #20]
    b484:	3610      	adds	r6, #16
    b486:	1836      	adds	r6, r6, r0
    b488:	2b00      	cmp	r3, #0
    b48a:	d003      	beq.n	b494 <mqtt_connect_broker+0xa8>
    b48c:	1c18      	adds	r0, r3, #0
    b48e:	47a0      	blx	r4
    b490:	3602      	adds	r6, #2
    b492:	1836      	adds	r6, r6, r0
    b494:	6e78      	ldr	r0, [r7, #100]	; 0x64
    b496:	2800      	cmp	r0, #0
    b498:	d007      	beq.n	b4aa <mqtt_connect_broker+0xbe>
    b49a:	47a0      	blx	r4
    b49c:	3602      	adds	r6, #2
    b49e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    b4a0:	1830      	adds	r0, r6, r0
    b4a2:	1906      	adds	r6, r0, r4
    b4a4:	2c00      	cmp	r4, #0
    b4a6:	d100      	bne.n	b4aa <mqtt_connect_broker+0xbe>
    b4a8:	1c06      	adds	r6, r0, #0
    b4aa:	69fc      	ldr	r4, [r7, #28]
    b4ac:	2c00      	cmp	r4, #0
    b4ae:	d006      	beq.n	b4be <mqtt_connect_broker+0xd2>
    b4b0:	24c0      	movs	r4, #192	; 0xc0
    b4b2:	61bc      	str	r4, [r7, #24]
    b4b4:	697c      	ldr	r4, [r7, #20]
    b4b6:	2c00      	cmp	r4, #0
    b4b8:	d103      	bne.n	b4c2 <mqtt_connect_broker+0xd6>
    b4ba:	2480      	movs	r4, #128	; 0x80
    b4bc:	e000      	b.n	b4c0 <mqtt_connect_broker+0xd4>
    b4be:	69fc      	ldr	r4, [r7, #28]
    b4c0:	61bc      	str	r4, [r7, #24]
    b4c2:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    b4c4:	2c00      	cmp	r4, #0
    b4c6:	d00f      	beq.n	b4e8 <mqtt_connect_broker+0xfc>
    b4c8:	68bc      	ldr	r4, [r7, #8]
    b4ca:	2c00      	cmp	r4, #0
    b4cc:	d003      	beq.n	b4d6 <mqtt_connect_broker+0xea>
    b4ce:	69bc      	ldr	r4, [r7, #24]
    b4d0:	2320      	movs	r3, #32
    b4d2:	431c      	orrs	r4, r3
    b4d4:	61bc      	str	r4, [r7, #24]
    b4d6:	68fc      	ldr	r4, [r7, #12]
    b4d8:	2303      	movs	r3, #3
    b4da:	4023      	ands	r3, r4
    b4dc:	00db      	lsls	r3, r3, #3
    b4de:	69bc      	ldr	r4, [r7, #24]
    b4e0:	2204      	movs	r2, #4
    b4e2:	4313      	orrs	r3, r2
    b4e4:	431c      	orrs	r4, r3
    b4e6:	61bc      	str	r4, [r7, #24]
    b4e8:	693c      	ldr	r4, [r7, #16]
    b4ea:	2c00      	cmp	r4, #0
    b4ec:	d003      	beq.n	b4f6 <mqtt_connect_broker+0x10a>
    b4ee:	69bc      	ldr	r4, [r7, #24]
    b4f0:	2302      	movs	r3, #2
    b4f2:	431c      	orrs	r4, r3
    b4f4:	61bc      	str	r4, [r7, #24]
    b4f6:	1c2b      	adds	r3, r5, #0
    b4f8:	3343      	adds	r3, #67	; 0x43
    b4fa:	781a      	ldrb	r2, [r3, #0]
    b4fc:	2108      	movs	r1, #8
    b4fe:	430a      	orrs	r2, r1
    b500:	701a      	strb	r2, [r3, #0]
    b502:	1c38      	adds	r0, r7, #0
    b504:	9500      	str	r5, [sp, #0]
    b506:	3020      	adds	r0, #32
    b508:	6879      	ldr	r1, [r7, #4]
    b50a:	4b5c      	ldr	r3, [pc, #368]	; (b67c <mqtt_connect_broker+0x290>)
    b50c:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    b50e:	4c5c      	ldr	r4, [pc, #368]	; (b680 <mqtt_connect_broker+0x294>)
    b510:	47a0      	blx	r4
    b512:	1c38      	adds	r0, r7, #0
    b514:	3020      	adds	r0, #32
    b516:	2110      	movs	r1, #16
    b518:	4b5a      	ldr	r3, [pc, #360]	; (b684 <mqtt_connect_broker+0x298>)
    b51a:	4798      	blx	r3
    b51c:	2e80      	cmp	r6, #128	; 0x80
    b51e:	dd09      	ble.n	b534 <mqtt_connect_broker+0x148>
    b520:	2180      	movs	r1, #128	; 0x80
    b522:	4249      	negs	r1, r1
    b524:	4331      	orrs	r1, r6
    b526:	1c38      	adds	r0, r7, #0
    b528:	b249      	sxtb	r1, r1
    b52a:	3020      	adds	r0, #32
    b52c:	4c55      	ldr	r4, [pc, #340]	; (b684 <mqtt_connect_broker+0x298>)
    b52e:	47a0      	blx	r4
    b530:	11f6      	asrs	r6, r6, #7
    b532:	e7f3      	b.n	b51c <mqtt_connect_broker+0x130>
    b534:	4b54      	ldr	r3, [pc, #336]	; (b688 <mqtt_connect_broker+0x29c>)
    b536:	401e      	ands	r6, r3
    b538:	d504      	bpl.n	b544 <mqtt_connect_broker+0x158>
    b53a:	2380      	movs	r3, #128	; 0x80
    b53c:	3e01      	subs	r6, #1
    b53e:	425b      	negs	r3, r3
    b540:	431e      	orrs	r6, r3
    b542:	3601      	adds	r6, #1
    b544:	1c38      	adds	r0, r7, #0
    b546:	b271      	sxtb	r1, r6
    b548:	3020      	adds	r0, #32
    b54a:	4c4e      	ldr	r4, [pc, #312]	; (b684 <mqtt_connect_broker+0x298>)
    b54c:	47a0      	blx	r4
    b54e:	1c38      	adds	r0, r7, #0
    b550:	4c4e      	ldr	r4, [pc, #312]	; (b68c <mqtt_connect_broker+0x2a0>)
    b552:	3020      	adds	r0, #32
    b554:	2106      	movs	r1, #6
    b556:	47a0      	blx	r4
    b558:	1c38      	adds	r0, r7, #0
    b55a:	4b4d      	ldr	r3, [pc, #308]	; (b690 <mqtt_connect_broker+0x2a4>)
    b55c:	3020      	adds	r0, #32
    b55e:	494d      	ldr	r1, [pc, #308]	; (b694 <mqtt_connect_broker+0x2a8>)
    b560:	2206      	movs	r2, #6
    b562:	4798      	blx	r3
    b564:	1c38      	adds	r0, r7, #0
    b566:	3020      	adds	r0, #32
    b568:	2103      	movs	r1, #3
    b56a:	4a46      	ldr	r2, [pc, #280]	; (b684 <mqtt_connect_broker+0x298>)
    b56c:	4790      	blx	r2
    b56e:	69bb      	ldr	r3, [r7, #24]
    b570:	1c38      	adds	r0, r7, #0
    b572:	4a44      	ldr	r2, [pc, #272]	; (b684 <mqtt_connect_broker+0x298>)
    b574:	b259      	sxtb	r1, r3
    b576:	3020      	adds	r0, #32
    b578:	4790      	blx	r2
    b57a:	1c2b      	adds	r3, r5, #0
    b57c:	3360      	adds	r3, #96	; 0x60
    b57e:	2000      	movs	r0, #0
    b580:	5e19      	ldrsh	r1, [r3, r0]
    b582:	1c38      	adds	r0, r7, #0
    b584:	3020      	adds	r0, #32
    b586:	47a0      	blx	r4
    b588:	4e39      	ldr	r6, [pc, #228]	; (b670 <mqtt_connect_broker+0x284>)
    b58a:	6e38      	ldr	r0, [r7, #96]	; 0x60
    b58c:	47b0      	blx	r6
    b58e:	b201      	sxth	r1, r0
    b590:	1c38      	adds	r0, r7, #0
    b592:	3020      	adds	r0, #32
    b594:	47a0      	blx	r4
    b596:	6e38      	ldr	r0, [r7, #96]	; 0x60
    b598:	47b0      	blx	r6
    b59a:	1c02      	adds	r2, r0, #0
    b59c:	1c38      	adds	r0, r7, #0
    b59e:	3020      	adds	r0, #32
    b5a0:	6e39      	ldr	r1, [r7, #96]	; 0x60
    b5a2:	4b3b      	ldr	r3, [pc, #236]	; (b690 <mqtt_connect_broker+0x2a4>)
    b5a4:	4798      	blx	r3
    b5a6:	6e78      	ldr	r0, [r7, #100]	; 0x64
    b5a8:	2800      	cmp	r0, #0
    b5aa:	d015      	beq.n	b5d8 <mqtt_connect_broker+0x1ec>
    b5ac:	47b0      	blx	r6
    b5ae:	b201      	sxth	r1, r0
    b5b0:	1c38      	adds	r0, r7, #0
    b5b2:	3020      	adds	r0, #32
    b5b4:	47a0      	blx	r4
    b5b6:	6e78      	ldr	r0, [r7, #100]	; 0x64
    b5b8:	47b0      	blx	r6
    b5ba:	1c02      	adds	r2, r0, #0
    b5bc:	1c38      	adds	r0, r7, #0
    b5be:	4c34      	ldr	r4, [pc, #208]	; (b690 <mqtt_connect_broker+0x2a4>)
    b5c0:	3020      	adds	r0, #32
    b5c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
    b5c4:	47a0      	blx	r4
    b5c6:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    b5c8:	2c00      	cmp	r4, #0
    b5ca:	d005      	beq.n	b5d8 <mqtt_connect_broker+0x1ec>
    b5cc:	1c38      	adds	r0, r7, #0
    b5ce:	1c21      	adds	r1, r4, #0
    b5d0:	3020      	adds	r0, #32
    b5d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    b5d4:	4c2e      	ldr	r4, [pc, #184]	; (b690 <mqtt_connect_broker+0x2a4>)
    b5d6:	47a0      	blx	r4
    b5d8:	69fc      	ldr	r4, [r7, #28]
    b5da:	2c00      	cmp	r4, #0
    b5dc:	d01f      	beq.n	b61e <mqtt_connect_broker+0x232>
    b5de:	4e24      	ldr	r6, [pc, #144]	; (b670 <mqtt_connect_broker+0x284>)
    b5e0:	1c20      	adds	r0, r4, #0
    b5e2:	47b0      	blx	r6
    b5e4:	b201      	sxth	r1, r0
    b5e6:	1c38      	adds	r0, r7, #0
    b5e8:	3020      	adds	r0, #32
    b5ea:	4c28      	ldr	r4, [pc, #160]	; (b68c <mqtt_connect_broker+0x2a0>)
    b5ec:	47a0      	blx	r4
    b5ee:	69f8      	ldr	r0, [r7, #28]
    b5f0:	47b0      	blx	r6
    b5f2:	1c02      	adds	r2, r0, #0
    b5f4:	1c38      	adds	r0, r7, #0
    b5f6:	3020      	adds	r0, #32
    b5f8:	69f9      	ldr	r1, [r7, #28]
    b5fa:	4c25      	ldr	r4, [pc, #148]	; (b690 <mqtt_connect_broker+0x2a4>)
    b5fc:	47a0      	blx	r4
    b5fe:	6978      	ldr	r0, [r7, #20]
    b600:	2800      	cmp	r0, #0
    b602:	d00c      	beq.n	b61e <mqtt_connect_broker+0x232>
    b604:	47b0      	blx	r6
    b606:	b201      	sxth	r1, r0
    b608:	1c38      	adds	r0, r7, #0
    b60a:	4a20      	ldr	r2, [pc, #128]	; (b68c <mqtt_connect_broker+0x2a0>)
    b60c:	3020      	adds	r0, #32
    b60e:	4790      	blx	r2
    b610:	6978      	ldr	r0, [r7, #20]
    b612:	47b0      	blx	r6
    b614:	1c02      	adds	r2, r0, #0
    b616:	1c38      	adds	r0, r7, #0
    b618:	3020      	adds	r0, #32
    b61a:	6979      	ldr	r1, [r7, #20]
    b61c:	47a0      	blx	r4
    b61e:	1c38      	adds	r0, r7, #0
    b620:	1c2c      	adds	r4, r5, #0
    b622:	3020      	adds	r0, #32
    b624:	4b1c      	ldr	r3, [pc, #112]	; (b698 <mqtt_connect_broker+0x2ac>)
    b626:	3443      	adds	r4, #67	; 0x43
    b628:	4798      	blx	r3
    b62a:	7821      	ldrb	r1, [r4, #0]
    b62c:	0789      	lsls	r1, r1, #30
    b62e:	0fc9      	lsrs	r1, r1, #31
    b630:	2901      	cmp	r1, #1
    b632:	d10b      	bne.n	b64c <mqtt_connect_broker+0x260>
    b634:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    b636:	2a00      	cmp	r2, #0
    b638:	d108      	bne.n	b64c <mqtt_connect_broker+0x260>
    b63a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    b63c:	2b00      	cmp	r3, #0
    b63e:	d005      	beq.n	b64c <mqtt_connect_broker+0x260>
    b640:	2034      	movs	r0, #52	; 0x34
    b642:	55c2      	strb	r2, [r0, r7]
    b644:	1c3a      	adds	r2, r7, #0
    b646:	1c28      	adds	r0, r5, #0
    b648:	3234      	adds	r2, #52	; 0x34
    b64a:	4798      	blx	r3
    b64c:	7823      	ldrb	r3, [r4, #0]
    b64e:	2202      	movs	r2, #2
    b650:	4313      	orrs	r3, r2
    b652:	2208      	movs	r2, #8
    b654:	4393      	bics	r3, r2
    b656:	7023      	strb	r3, [r4, #0]
    b658:	2000      	movs	r0, #0
    b65a:	e005      	b.n	b668 <mqtt_connect_broker+0x27c>
    b65c:	2080      	movs	r0, #128	; 0x80
    b65e:	e002      	b.n	b666 <mqtt_connect_broker+0x27a>
    b660:	2078      	movs	r0, #120	; 0x78
    b662:	e000      	b.n	b666 <mqtt_connect_broker+0x27a>
    b664:	200b      	movs	r0, #11
    b666:	4240      	negs	r0, r0
    b668:	46bd      	mov	sp, r7
    b66a:	b013      	add	sp, #76	; 0x4c
    b66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b66e:	46c0      	nop			; (mov r8, r8)
    b670:	0000c795 	.word	0x0000c795
    b674:	00002009 	.word	0x00002009
    b678:	0000a495 	.word	0x0000a495
    b67c:	0000b165 	.word	0x0000b165
    b680:	0000a0b1 	.word	0x0000a0b1
    b684:	0000a0e5 	.word	0x0000a0e5
    b688:	8000007f 	.word	0x8000007f
    b68c:	0000a131 	.word	0x0000a131
    b690:	0000a171 	.word	0x0000a171
    b694:	0000ec37 	.word	0x0000ec37
    b698:	0000a1ad 	.word	0x0000a1ad

0000b69c <mqtt_publish>:
    b69c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b69e:	b093      	sub	sp, #76	; 0x4c
    b6a0:	af02      	add	r7, sp, #8
    b6a2:	60fb      	str	r3, [r7, #12]
    b6a4:	1c3b      	adds	r3, r7, #0
    b6a6:	3358      	adds	r3, #88	; 0x58
    b6a8:	781b      	ldrb	r3, [r3, #0]
    b6aa:	1c04      	adds	r4, r0, #0
    b6ac:	613b      	str	r3, [r7, #16]
    b6ae:	1c3b      	adds	r3, r7, #0
    b6b0:	335c      	adds	r3, #92	; 0x5c
    b6b2:	781b      	ldrb	r3, [r3, #0]
    b6b4:	6179      	str	r1, [r7, #20]
    b6b6:	60ba      	str	r2, [r7, #8]
    b6b8:	607b      	str	r3, [r7, #4]
    b6ba:	2800      	cmp	r0, #0
    b6bc:	d101      	bne.n	b6c2 <mqtt_publish+0x26>
    b6be:	2516      	movs	r5, #22
    b6c0:	e0a7      	b.n	b812 <mqtt_publish+0x176>
    b6c2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    b6c4:	466a      	mov	r2, sp
    b6c6:	3307      	adds	r3, #7
    b6c8:	08db      	lsrs	r3, r3, #3
    b6ca:	00db      	lsls	r3, r3, #3
    b6cc:	1ad2      	subs	r2, r2, r3
    b6ce:	697b      	ldr	r3, [r7, #20]
    b6d0:	4695      	mov	sp, r2
    b6d2:	ae02      	add	r6, sp, #8
    b6d4:	2b00      	cmp	r3, #0
    b6d6:	d0f2      	beq.n	b6be <mqtt_publish+0x22>
    b6d8:	693a      	ldr	r2, [r7, #16]
    b6da:	2a02      	cmp	r2, #2
    b6dc:	d8ef      	bhi.n	b6be <mqtt_publish+0x22>
    b6de:	1c05      	adds	r5, r0, #0
    b6e0:	3543      	adds	r5, #67	; 0x43
    b6e2:	782b      	ldrb	r3, [r5, #0]
    b6e4:	079a      	lsls	r2, r3, #30
    b6e6:	d400      	bmi.n	b6ea <mqtt_publish+0x4e>
    b6e8:	e090      	b.n	b80c <mqtt_publish+0x170>
    b6ea:	071a      	lsls	r2, r3, #28
    b6ec:	d40a      	bmi.n	b704 <mqtt_publish+0x68>
    b6ee:	4b4b      	ldr	r3, [pc, #300]	; (b81c <mqtt_publish+0x180>)
    b6f0:	6978      	ldr	r0, [r7, #20]
    b6f2:	4798      	blx	r3
    b6f4:	68fd      	ldr	r5, [r7, #12]
    b6f6:	693b      	ldr	r3, [r7, #16]
    b6f8:	3502      	adds	r5, #2
    b6fa:	182d      	adds	r5, r5, r0
    b6fc:	2b00      	cmp	r3, #0
    b6fe:	d011      	beq.n	b724 <mqtt_publish+0x88>
    b700:	3502      	adds	r5, #2
    b702:	e00f      	b.n	b724 <mqtt_publish+0x88>
    b704:	1c03      	adds	r3, r0, #0
    b706:	3370      	adds	r3, #112	; 0x70
    b708:	781b      	ldrb	r3, [r3, #0]
    b70a:	2b00      	cmp	r3, #0
    b70c:	d000      	beq.n	b710 <mqtt_publish+0x74>
    b70e:	e07f      	b.n	b810 <mqtt_publish+0x174>
    b710:	782b      	ldrb	r3, [r5, #0]
    b712:	071a      	lsls	r2, r3, #28
    b714:	d5eb      	bpl.n	b6ee <mqtt_publish+0x52>
    b716:	4b42      	ldr	r3, [pc, #264]	; (b820 <mqtt_publish+0x184>)
    b718:	2000      	movs	r0, #0
    b71a:	4798      	blx	r3
    b71c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    b71e:	4b41      	ldr	r3, [pc, #260]	; (b824 <mqtt_publish+0x188>)
    b720:	4798      	blx	r3
    b722:	e7f5      	b.n	b710 <mqtt_publish+0x74>
    b724:	1c23      	adds	r3, r4, #0
    b726:	3343      	adds	r3, #67	; 0x43
    b728:	781a      	ldrb	r2, [r3, #0]
    b72a:	2108      	movs	r1, #8
    b72c:	430a      	orrs	r2, r1
    b72e:	701a      	strb	r2, [r3, #0]
    b730:	1c38      	adds	r0, r7, #0
    b732:	9400      	str	r4, [sp, #0]
    b734:	1c31      	adds	r1, r6, #0
    b736:	302c      	adds	r0, #44	; 0x2c
    b738:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    b73a:	4b3b      	ldr	r3, [pc, #236]	; (b828 <mqtt_publish+0x18c>)
    b73c:	4e3b      	ldr	r6, [pc, #236]	; (b82c <mqtt_publish+0x190>)
    b73e:	47b0      	blx	r6
    b740:	687b      	ldr	r3, [r7, #4]
    b742:	2101      	movs	r1, #1
    b744:	4019      	ands	r1, r3
    b746:	2330      	movs	r3, #48	; 0x30
    b748:	4319      	orrs	r1, r3
    b74a:	693b      	ldr	r3, [r7, #16]
    b74c:	1c38      	adds	r0, r7, #0
    b74e:	005a      	lsls	r2, r3, #1
    b750:	2306      	movs	r3, #6
    b752:	4013      	ands	r3, r2
    b754:	4319      	orrs	r1, r3
    b756:	302c      	adds	r0, #44	; 0x2c
    b758:	4b35      	ldr	r3, [pc, #212]	; (b830 <mqtt_publish+0x194>)
    b75a:	4798      	blx	r3
    b75c:	4b34      	ldr	r3, [pc, #208]	; (b830 <mqtt_publish+0x194>)
    b75e:	2d80      	cmp	r5, #128	; 0x80
    b760:	dd08      	ble.n	b774 <mqtt_publish+0xd8>
    b762:	2180      	movs	r1, #128	; 0x80
    b764:	4249      	negs	r1, r1
    b766:	4329      	orrs	r1, r5
    b768:	1c38      	adds	r0, r7, #0
    b76a:	b249      	sxtb	r1, r1
    b76c:	302c      	adds	r0, #44	; 0x2c
    b76e:	4798      	blx	r3
    b770:	11ed      	asrs	r5, r5, #7
    b772:	e7f3      	b.n	b75c <mqtt_publish+0xc0>
    b774:	4a2f      	ldr	r2, [pc, #188]	; (b834 <mqtt_publish+0x198>)
    b776:	4015      	ands	r5, r2
    b778:	d504      	bpl.n	b784 <mqtt_publish+0xe8>
    b77a:	2280      	movs	r2, #128	; 0x80
    b77c:	3d01      	subs	r5, #1
    b77e:	4252      	negs	r2, r2
    b780:	4315      	orrs	r5, r2
    b782:	3501      	adds	r5, #1
    b784:	1c38      	adds	r0, r7, #0
    b786:	b269      	sxtb	r1, r5
    b788:	302c      	adds	r0, #44	; 0x2c
    b78a:	4798      	blx	r3
    b78c:	4e23      	ldr	r6, [pc, #140]	; (b81c <mqtt_publish+0x180>)
    b78e:	6978      	ldr	r0, [r7, #20]
    b790:	47b0      	blx	r6
    b792:	b201      	sxth	r1, r0
    b794:	1c38      	adds	r0, r7, #0
    b796:	302c      	adds	r0, #44	; 0x2c
    b798:	4d27      	ldr	r5, [pc, #156]	; (b838 <mqtt_publish+0x19c>)
    b79a:	47a8      	blx	r5
    b79c:	6978      	ldr	r0, [r7, #20]
    b79e:	47b0      	blx	r6
    b7a0:	1c02      	adds	r2, r0, #0
    b7a2:	1c38      	adds	r0, r7, #0
    b7a4:	302c      	adds	r0, #44	; 0x2c
    b7a6:	6979      	ldr	r1, [r7, #20]
    b7a8:	4e24      	ldr	r6, [pc, #144]	; (b83c <mqtt_publish+0x1a0>)
    b7aa:	47b0      	blx	r6
    b7ac:	693a      	ldr	r2, [r7, #16]
    b7ae:	2a00      	cmp	r2, #0
    b7b0:	d006      	beq.n	b7c0 <mqtt_publish+0x124>
    b7b2:	8821      	ldrh	r1, [r4, #0]
    b7b4:	1c38      	adds	r0, r7, #0
    b7b6:	1c4b      	adds	r3, r1, #1
    b7b8:	8023      	strh	r3, [r4, #0]
    b7ba:	b209      	sxth	r1, r1
    b7bc:	302c      	adds	r0, #44	; 0x2c
    b7be:	47a8      	blx	r5
    b7c0:	8823      	ldrh	r3, [r4, #0]
    b7c2:	2b00      	cmp	r3, #0
    b7c4:	d101      	bne.n	b7ca <mqtt_publish+0x12e>
    b7c6:	2301      	movs	r3, #1
    b7c8:	8023      	strh	r3, [r4, #0]
    b7ca:	68bb      	ldr	r3, [r7, #8]
    b7cc:	2b00      	cmp	r3, #0
    b7ce:	d006      	beq.n	b7de <mqtt_publish+0x142>
    b7d0:	68fa      	ldr	r2, [r7, #12]
    b7d2:	2a00      	cmp	r2, #0
    b7d4:	d003      	beq.n	b7de <mqtt_publish+0x142>
    b7d6:	1c38      	adds	r0, r7, #0
    b7d8:	302c      	adds	r0, #44	; 0x2c
    b7da:	1c19      	adds	r1, r3, #0
    b7dc:	47b0      	blx	r6
    b7de:	1c38      	adds	r0, r7, #0
    b7e0:	4b17      	ldr	r3, [pc, #92]	; (b840 <mqtt_publish+0x1a4>)
    b7e2:	302c      	adds	r0, #44	; 0x2c
    b7e4:	4798      	blx	r3
    b7e6:	1c23      	adds	r3, r4, #0
    b7e8:	3343      	adds	r3, #67	; 0x43
    b7ea:	781a      	ldrb	r2, [r3, #0]
    b7ec:	2108      	movs	r1, #8
    b7ee:	438a      	bics	r2, r1
    b7f0:	701a      	strb	r2, [r3, #0]
    b7f2:	693b      	ldr	r3, [r7, #16]
    b7f4:	2500      	movs	r5, #0
    b7f6:	42ab      	cmp	r3, r5
    b7f8:	d10c      	bne.n	b814 <mqtt_publish+0x178>
    b7fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b7fc:	42ab      	cmp	r3, r5
    b7fe:	d009      	beq.n	b814 <mqtt_publish+0x178>
    b800:	1c3a      	adds	r2, r7, #0
    b802:	1c20      	adds	r0, r4, #0
    b804:	2102      	movs	r1, #2
    b806:	3218      	adds	r2, #24
    b808:	4798      	blx	r3
    b80a:	e003      	b.n	b814 <mqtt_publish+0x178>
    b80c:	2580      	movs	r5, #128	; 0x80
    b80e:	e000      	b.n	b812 <mqtt_publish+0x176>
    b810:	250b      	movs	r5, #11
    b812:	426d      	negs	r5, r5
    b814:	1c28      	adds	r0, r5, #0
    b816:	46bd      	mov	sp, r7
    b818:	b011      	add	sp, #68	; 0x44
    b81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b81c:	0000c795 	.word	0x0000c795
    b820:	00002009 	.word	0x00002009
    b824:	0000a495 	.word	0x0000a495
    b828:	0000b165 	.word	0x0000b165
    b82c:	0000a0b1 	.word	0x0000a0b1
    b830:	0000a0e5 	.word	0x0000a0e5
    b834:	8000007f 	.word	0x8000007f
    b838:	0000a131 	.word	0x0000a131
    b83c:	0000a171 	.word	0x0000a171
    b840:	0000a1ad 	.word	0x0000a1ad

0000b844 <mqtt_subscribe>:
    b844:	b5f0      	push	{r4, r5, r6, r7, lr}
    b846:	b08d      	sub	sp, #52	; 0x34
    b848:	af02      	add	r7, sp, #8
    b84a:	1c04      	adds	r4, r0, #0
    b84c:	60b9      	str	r1, [r7, #8]
    b84e:	607a      	str	r2, [r7, #4]
    b850:	d101      	bne.n	b856 <mqtt_subscribe+0x12>
    b852:	2016      	movs	r0, #22
    b854:	e086      	b.n	b964 <mqtt_subscribe+0x120>
    b856:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    b858:	466a      	mov	r2, sp
    b85a:	3307      	adds	r3, #7
    b85c:	08db      	lsrs	r3, r3, #3
    b85e:	00db      	lsls	r3, r3, #3
    b860:	1ad2      	subs	r2, r2, r3
    b862:	4695      	mov	sp, r2
    b864:	ad02      	add	r5, sp, #8
    b866:	603d      	str	r5, [r7, #0]
    b868:	68bd      	ldr	r5, [r7, #8]
    b86a:	2d00      	cmp	r5, #0
    b86c:	d0f1      	beq.n	b852 <mqtt_subscribe+0xe>
    b86e:	687d      	ldr	r5, [r7, #4]
    b870:	2d02      	cmp	r5, #2
    b872:	d8ee      	bhi.n	b852 <mqtt_subscribe+0xe>
    b874:	1c05      	adds	r5, r0, #0
    b876:	3543      	adds	r5, #67	; 0x43
    b878:	782b      	ldrb	r3, [r5, #0]
    b87a:	079a      	lsls	r2, r3, #30
    b87c:	d56f      	bpl.n	b95e <mqtt_subscribe+0x11a>
    b87e:	071a      	lsls	r2, r3, #28
    b880:	d41a      	bmi.n	b8b8 <mqtt_subscribe+0x74>
    b882:	68b8      	ldr	r0, [r7, #8]
    b884:	4d39      	ldr	r5, [pc, #228]	; (b96c <mqtt_subscribe+0x128>)
    b886:	47a8      	blx	r5
    b888:	1c25      	adds	r5, r4, #0
    b88a:	3543      	adds	r5, #67	; 0x43
    b88c:	782b      	ldrb	r3, [r5, #0]
    b88e:	2208      	movs	r2, #8
    b890:	4313      	orrs	r3, r2
    b892:	702b      	strb	r3, [r5, #0]
    b894:	60fd      	str	r5, [r7, #12]
    b896:	1d46      	adds	r6, r0, #5
    b898:	9400      	str	r4, [sp, #0]
    b89a:	1c38      	adds	r0, r7, #0
    b89c:	3014      	adds	r0, #20
    b89e:	6839      	ldr	r1, [r7, #0]
    b8a0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    b8a2:	4b33      	ldr	r3, [pc, #204]	; (b970 <mqtt_subscribe+0x12c>)
    b8a4:	4d33      	ldr	r5, [pc, #204]	; (b974 <mqtt_subscribe+0x130>)
    b8a6:	47a8      	blx	r5
    b8a8:	1c38      	adds	r0, r7, #0
    b8aa:	217e      	movs	r1, #126	; 0x7e
    b8ac:	3014      	adds	r0, #20
    b8ae:	4249      	negs	r1, r1
    b8b0:	4b31      	ldr	r3, [pc, #196]	; (b978 <mqtt_subscribe+0x134>)
    b8b2:	4798      	blx	r3
    b8b4:	4d2d      	ldr	r5, [pc, #180]	; (b96c <mqtt_subscribe+0x128>)
    b8b6:	e00e      	b.n	b8d6 <mqtt_subscribe+0x92>
    b8b8:	1c03      	adds	r3, r0, #0
    b8ba:	3370      	adds	r3, #112	; 0x70
    b8bc:	781b      	ldrb	r3, [r3, #0]
    b8be:	2b00      	cmp	r3, #0
    b8c0:	d14f      	bne.n	b962 <mqtt_subscribe+0x11e>
    b8c2:	782b      	ldrb	r3, [r5, #0]
    b8c4:	071a      	lsls	r2, r3, #28
    b8c6:	d5dc      	bpl.n	b882 <mqtt_subscribe+0x3e>
    b8c8:	4b2c      	ldr	r3, [pc, #176]	; (b97c <mqtt_subscribe+0x138>)
    b8ca:	2000      	movs	r0, #0
    b8cc:	4798      	blx	r3
    b8ce:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    b8d0:	4b2b      	ldr	r3, [pc, #172]	; (b980 <mqtt_subscribe+0x13c>)
    b8d2:	4798      	blx	r3
    b8d4:	e7f5      	b.n	b8c2 <mqtt_subscribe+0x7e>
    b8d6:	4b28      	ldr	r3, [pc, #160]	; (b978 <mqtt_subscribe+0x134>)
    b8d8:	2e80      	cmp	r6, #128	; 0x80
    b8da:	dd08      	ble.n	b8ee <mqtt_subscribe+0xaa>
    b8dc:	2180      	movs	r1, #128	; 0x80
    b8de:	4249      	negs	r1, r1
    b8e0:	4331      	orrs	r1, r6
    b8e2:	1c38      	adds	r0, r7, #0
    b8e4:	b249      	sxtb	r1, r1
    b8e6:	3014      	adds	r0, #20
    b8e8:	4798      	blx	r3
    b8ea:	11f6      	asrs	r6, r6, #7
    b8ec:	e7f3      	b.n	b8d6 <mqtt_subscribe+0x92>
    b8ee:	4925      	ldr	r1, [pc, #148]	; (b984 <mqtt_subscribe+0x140>)
    b8f0:	4031      	ands	r1, r6
    b8f2:	d504      	bpl.n	b8fe <mqtt_subscribe+0xba>
    b8f4:	2280      	movs	r2, #128	; 0x80
    b8f6:	3901      	subs	r1, #1
    b8f8:	4252      	negs	r2, r2
    b8fa:	4311      	orrs	r1, r2
    b8fc:	3101      	adds	r1, #1
    b8fe:	1c38      	adds	r0, r7, #0
    b900:	b249      	sxtb	r1, r1
    b902:	3014      	adds	r0, #20
    b904:	4798      	blx	r3
    b906:	8821      	ldrh	r1, [r4, #0]
    b908:	1c38      	adds	r0, r7, #0
    b90a:	1c4b      	adds	r3, r1, #1
    b90c:	8023      	strh	r3, [r4, #0]
    b90e:	b209      	sxth	r1, r1
    b910:	3014      	adds	r0, #20
    b912:	4e1d      	ldr	r6, [pc, #116]	; (b988 <mqtt_subscribe+0x144>)
    b914:	47b0      	blx	r6
    b916:	8823      	ldrh	r3, [r4, #0]
    b918:	2b00      	cmp	r3, #0
    b91a:	d101      	bne.n	b920 <mqtt_subscribe+0xdc>
    b91c:	2301      	movs	r3, #1
    b91e:	8023      	strh	r3, [r4, #0]
    b920:	68b8      	ldr	r0, [r7, #8]
    b922:	47a8      	blx	r5
    b924:	b201      	sxth	r1, r0
    b926:	1c38      	adds	r0, r7, #0
    b928:	3014      	adds	r0, #20
    b92a:	47b0      	blx	r6
    b92c:	68b8      	ldr	r0, [r7, #8]
    b92e:	47a8      	blx	r5
    b930:	1c02      	adds	r2, r0, #0
    b932:	1c38      	adds	r0, r7, #0
    b934:	3014      	adds	r0, #20
    b936:	68b9      	ldr	r1, [r7, #8]
    b938:	4b14      	ldr	r3, [pc, #80]	; (b98c <mqtt_subscribe+0x148>)
    b93a:	4798      	blx	r3
    b93c:	687d      	ldr	r5, [r7, #4]
    b93e:	1c38      	adds	r0, r7, #0
    b940:	b269      	sxtb	r1, r5
    b942:	3014      	adds	r0, #20
    b944:	4b0c      	ldr	r3, [pc, #48]	; (b978 <mqtt_subscribe+0x134>)
    b946:	4798      	blx	r3
    b948:	1c38      	adds	r0, r7, #0
    b94a:	3014      	adds	r0, #20
    b94c:	4b10      	ldr	r3, [pc, #64]	; (b990 <mqtt_subscribe+0x14c>)
    b94e:	4798      	blx	r3
    b950:	68fd      	ldr	r5, [r7, #12]
    b952:	2208      	movs	r2, #8
    b954:	782b      	ldrb	r3, [r5, #0]
    b956:	2000      	movs	r0, #0
    b958:	4393      	bics	r3, r2
    b95a:	702b      	strb	r3, [r5, #0]
    b95c:	e003      	b.n	b966 <mqtt_subscribe+0x122>
    b95e:	2080      	movs	r0, #128	; 0x80
    b960:	e000      	b.n	b964 <mqtt_subscribe+0x120>
    b962:	200b      	movs	r0, #11
    b964:	4240      	negs	r0, r0
    b966:	46bd      	mov	sp, r7
    b968:	b00b      	add	sp, #44	; 0x2c
    b96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b96c:	0000c795 	.word	0x0000c795
    b970:	0000b165 	.word	0x0000b165
    b974:	0000a0b1 	.word	0x0000a0b1
    b978:	0000a0e5 	.word	0x0000a0e5
    b97c:	00002009 	.word	0x00002009
    b980:	0000a495 	.word	0x0000a495
    b984:	8000007f 	.word	0x8000007f
    b988:	0000a131 	.word	0x0000a131
    b98c:	0000a171 	.word	0x0000a171
    b990:	0000a1ad 	.word	0x0000a1ad

0000b994 <_mqtt_ping>:
    b994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b996:	23c0      	movs	r3, #192	; 0xc0
    b998:	a901      	add	r1, sp, #4
    b99a:	2500      	movs	r5, #0
    b99c:	700b      	strb	r3, [r1, #0]
    b99e:	704d      	strb	r5, [r1, #1]
    b9a0:	42a8      	cmp	r0, r5
    b9a2:	d019      	beq.n	b9d8 <_mqtt_ping+0x44>
    b9a4:	1c04      	adds	r4, r0, #0
    b9a6:	3443      	adds	r4, #67	; 0x43
    b9a8:	7823      	ldrb	r3, [r4, #0]
    b9aa:	079a      	lsls	r2, r3, #30
    b9ac:	d516      	bpl.n	b9dc <_mqtt_ping+0x48>
    b9ae:	071a      	lsls	r2, r3, #28
    b9b0:	d416      	bmi.n	b9e0 <_mqtt_ping+0x4c>
    b9b2:	2608      	movs	r6, #8
    b9b4:	4333      	orrs	r3, r6
    b9b6:	7023      	strb	r3, [r4, #0]
    b9b8:	7880      	ldrb	r0, [r0, #2]
    b9ba:	1c2b      	adds	r3, r5, #0
    b9bc:	b240      	sxtb	r0, r0
    b9be:	2202      	movs	r2, #2
    b9c0:	4f09      	ldr	r7, [pc, #36]	; (b9e8 <_mqtt_ping+0x54>)
    b9c2:	47b8      	blx	r7
    b9c4:	1c2b      	adds	r3, r5, #0
    b9c6:	42a8      	cmp	r0, r5
    b9c8:	da0c      	bge.n	b9e4 <_mqtt_ping+0x50>
    b9ca:	7823      	ldrb	r3, [r4, #0]
    b9cc:	43b3      	bics	r3, r6
    b9ce:	7023      	strb	r3, [r4, #0]
    b9d0:	4b06      	ldr	r3, [pc, #24]	; (b9ec <_mqtt_ping+0x58>)
    b9d2:	4798      	blx	r3
    b9d4:	1c03      	adds	r3, r0, #0
    b9d6:	e005      	b.n	b9e4 <_mqtt_ping+0x50>
    b9d8:	2316      	movs	r3, #22
    b9da:	e002      	b.n	b9e2 <_mqtt_ping+0x4e>
    b9dc:	2380      	movs	r3, #128	; 0x80
    b9de:	e000      	b.n	b9e2 <_mqtt_ping+0x4e>
    b9e0:	230b      	movs	r3, #11
    b9e2:	425b      	negs	r3, r3
    b9e4:	1c18      	adds	r0, r3, #0
    b9e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    b9e8:	000053bd 	.word	0x000053bd
    b9ec:	0000b115 	.word	0x0000b115

0000b9f0 <mqtt_timer_callback>:
    b9f0:	b570      	push	{r4, r5, r6, lr}
    b9f2:	1c05      	adds	r5, r0, #0
    b9f4:	b086      	sub	sp, #24
    b9f6:	1c0e      	adds	r6, r1, #0
    b9f8:	1c14      	adds	r4, r2, #0
    b9fa:	2800      	cmp	r0, #0
    b9fc:	d012      	beq.n	ba24 <mqtt_timer_callback+0x34>
    b9fe:	2a00      	cmp	r2, #0
    ba00:	d010      	beq.n	ba24 <mqtt_timer_callback+0x34>
    ba02:	1c10      	adds	r0, r2, #0
    ba04:	4b08      	ldr	r3, [pc, #32]	; (ba28 <mqtt_timer_callback+0x38>)
    ba06:	4798      	blx	r3
    ba08:	2800      	cmp	r0, #0
    ba0a:	da04      	bge.n	ba16 <mqtt_timer_callback+0x26>
    ba0c:	1c28      	adds	r0, r5, #0
    ba0e:	1c31      	adds	r1, r6, #0
    ba10:	2200      	movs	r2, #0
    ba12:	4b06      	ldr	r3, [pc, #24]	; (ba2c <mqtt_timer_callback+0x3c>)
    ba14:	e005      	b.n	ba22 <mqtt_timer_callback+0x32>
    ba16:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ba18:	2b00      	cmp	r3, #0
    ba1a:	d003      	beq.n	ba24 <mqtt_timer_callback+0x34>
    ba1c:	1c20      	adds	r0, r4, #0
    ba1e:	2107      	movs	r1, #7
    ba20:	aa01      	add	r2, sp, #4
    ba22:	4798      	blx	r3
    ba24:	b006      	add	sp, #24
    ba26:	bd70      	pop	{r4, r5, r6, pc}
    ba28:	0000b995 	.word	0x0000b995
    ba2c:	0000a419 	.word	0x0000a419

0000ba30 <_mqtt_puback>:
    ba30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ba32:	2302      	movs	r3, #2
    ba34:	ac01      	add	r4, sp, #4
    ba36:	2700      	movs	r7, #0
    ba38:	7063      	strb	r3, [r4, #1]
    ba3a:	42b8      	cmp	r0, r7
    ba3c:	d01e      	beq.n	ba7c <_mqtt_puback+0x4c>
    ba3e:	1c05      	adds	r5, r0, #0
    ba40:	3543      	adds	r5, #67	; 0x43
    ba42:	782b      	ldrb	r3, [r5, #0]
    ba44:	079e      	lsls	r6, r3, #30
    ba46:	d51b      	bpl.n	ba80 <_mqtt_puback+0x50>
    ba48:	071e      	lsls	r6, r3, #28
    ba4a:	d41b      	bmi.n	ba84 <_mqtt_puback+0x54>
    ba4c:	2608      	movs	r6, #8
    ba4e:	4333      	orrs	r3, r6
    ba50:	702b      	strb	r3, [r5, #0]
    ba52:	7880      	ldrb	r0, [r0, #2]
    ba54:	7021      	strb	r1, [r4, #0]
    ba56:	0a11      	lsrs	r1, r2, #8
    ba58:	70a1      	strb	r1, [r4, #2]
    ba5a:	70e2      	strb	r2, [r4, #3]
    ba5c:	1c21      	adds	r1, r4, #0
    ba5e:	1c3b      	adds	r3, r7, #0
    ba60:	b240      	sxtb	r0, r0
    ba62:	2204      	movs	r2, #4
    ba64:	4c09      	ldr	r4, [pc, #36]	; (ba8c <_mqtt_puback+0x5c>)
    ba66:	47a0      	blx	r4
    ba68:	1c3b      	adds	r3, r7, #0
    ba6a:	42b8      	cmp	r0, r7
    ba6c:	da0c      	bge.n	ba88 <_mqtt_puback+0x58>
    ba6e:	782b      	ldrb	r3, [r5, #0]
    ba70:	43b3      	bics	r3, r6
    ba72:	702b      	strb	r3, [r5, #0]
    ba74:	4b06      	ldr	r3, [pc, #24]	; (ba90 <_mqtt_puback+0x60>)
    ba76:	4798      	blx	r3
    ba78:	1c03      	adds	r3, r0, #0
    ba7a:	e005      	b.n	ba88 <_mqtt_puback+0x58>
    ba7c:	2316      	movs	r3, #22
    ba7e:	e002      	b.n	ba86 <_mqtt_puback+0x56>
    ba80:	2380      	movs	r3, #128	; 0x80
    ba82:	e000      	b.n	ba86 <_mqtt_puback+0x56>
    ba84:	230b      	movs	r3, #11
    ba86:	425b      	negs	r3, r3
    ba88:	1c18      	adds	r0, r3, #0
    ba8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ba8c:	000053bd 	.word	0x000053bd
    ba90:	0000b115 	.word	0x0000b115

0000ba94 <mqtt_clear_conn>:
    ba94:	b530      	push	{r4, r5, lr}
    ba96:	1c04      	adds	r4, r0, #0
    ba98:	b087      	sub	sp, #28
    ba9a:	2800      	cmp	r0, #0
    ba9c:	d01c      	beq.n	bad8 <mqtt_clear_conn+0x44>
    ba9e:	2002      	movs	r0, #2
    baa0:	4b0e      	ldr	r3, [pc, #56]	; (badc <mqtt_clear_conn+0x48>)
    baa2:	5620      	ldrsb	r0, [r4, r0]
    baa4:	4798      	blx	r3
    baa6:	1c23      	adds	r3, r4, #0
    baa8:	3343      	adds	r3, #67	; 0x43
    baaa:	781a      	ldrb	r2, [r3, #0]
    baac:	21fc      	movs	r1, #252	; 0xfc
    baae:	0795      	lsls	r5, r2, #30
    bab0:	400a      	ands	r2, r1
    bab2:	701a      	strb	r2, [r3, #0]
    bab4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    bab6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    bab8:	9301      	str	r3, [sp, #4]
    baba:	2300      	movs	r3, #0
    babc:	64e3      	str	r3, [r4, #76]	; 0x4c
    babe:	6d21      	ldr	r1, [r4, #80]	; 0x50
    bac0:	4b07      	ldr	r3, [pc, #28]	; (bae0 <mqtt_clear_conn+0x4c>)
    bac2:	4798      	blx	r3
    bac4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bac6:	0fed      	lsrs	r5, r5, #31
    bac8:	2b00      	cmp	r3, #0
    baca:	d005      	beq.n	bad8 <mqtt_clear_conn+0x44>
    bacc:	2d00      	cmp	r5, #0
    bace:	d003      	beq.n	bad8 <mqtt_clear_conn+0x44>
    bad0:	1c20      	adds	r0, r4, #0
    bad2:	2105      	movs	r1, #5
    bad4:	aa01      	add	r2, sp, #4
    bad6:	4798      	blx	r3
    bad8:	b007      	add	sp, #28
    bada:	bd30      	pop	{r4, r5, pc}
    badc:	000056a1 	.word	0x000056a1
    bae0:	0000a469 	.word	0x0000a469

0000bae4 <mqtt_disconnect>:
    bae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bae6:	23e0      	movs	r3, #224	; 0xe0
    bae8:	ae01      	add	r6, sp, #4
    baea:	2700      	movs	r7, #0
    baec:	1c05      	adds	r5, r0, #0
    baee:	7033      	strb	r3, [r6, #0]
    baf0:	7077      	strb	r7, [r6, #1]
    baf2:	42b8      	cmp	r0, r7
    baf4:	d036      	beq.n	bb64 <mqtt_disconnect+0x80>
    baf6:	1c04      	adds	r4, r0, #0
    baf8:	3443      	adds	r4, #67	; 0x43
    bafa:	7823      	ldrb	r3, [r4, #0]
    bafc:	079a      	lsls	r2, r3, #30
    bafe:	d533      	bpl.n	bb68 <mqtt_disconnect+0x84>
    bb00:	42b9      	cmp	r1, r7
    bb02:	d12b      	bne.n	bb5c <mqtt_disconnect+0x78>
    bb04:	071a      	lsls	r2, r3, #28
    bb06:	d414      	bmi.n	bb32 <mqtt_disconnect+0x4e>
    bb08:	7823      	ldrb	r3, [r4, #0]
    bb0a:	2210      	movs	r2, #16
    bb0c:	4313      	orrs	r3, r2
    bb0e:	2708      	movs	r7, #8
    bb10:	433b      	orrs	r3, r7
    bb12:	7023      	strb	r3, [r4, #0]
    bb14:	2002      	movs	r0, #2
    bb16:	5628      	ldrsb	r0, [r5, r0]
    bb18:	1c31      	adds	r1, r6, #0
    bb1a:	2202      	movs	r2, #2
    bb1c:	2300      	movs	r3, #0
    bb1e:	4d15      	ldr	r5, [pc, #84]	; (bb74 <mqtt_disconnect+0x90>)
    bb20:	47a8      	blx	r5
    bb22:	2800      	cmp	r0, #0
    bb24:	da14      	bge.n	bb50 <mqtt_disconnect+0x6c>
    bb26:	7823      	ldrb	r3, [r4, #0]
    bb28:	43bb      	bics	r3, r7
    bb2a:	7023      	strb	r3, [r4, #0]
    bb2c:	4b12      	ldr	r3, [pc, #72]	; (bb78 <mqtt_disconnect+0x94>)
    bb2e:	4798      	blx	r3
    bb30:	e01e      	b.n	bb70 <mqtt_disconnect+0x8c>
    bb32:	1c03      	adds	r3, r0, #0
    bb34:	3370      	adds	r3, #112	; 0x70
    bb36:	781b      	ldrb	r3, [r3, #0]
    bb38:	2b00      	cmp	r3, #0
    bb3a:	d117      	bne.n	bb6c <mqtt_disconnect+0x88>
    bb3c:	7823      	ldrb	r3, [r4, #0]
    bb3e:	071a      	lsls	r2, r3, #28
    bb40:	d5e2      	bpl.n	bb08 <mqtt_disconnect+0x24>
    bb42:	4b0e      	ldr	r3, [pc, #56]	; (bb7c <mqtt_disconnect+0x98>)
    bb44:	2000      	movs	r0, #0
    bb46:	4798      	blx	r3
    bb48:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    bb4a:	4b0d      	ldr	r3, [pc, #52]	; (bb80 <mqtt_disconnect+0x9c>)
    bb4c:	4798      	blx	r3
    bb4e:	e7f5      	b.n	bb3c <mqtt_disconnect+0x58>
    bb50:	7823      	ldrb	r3, [r4, #0]
    bb52:	2202      	movs	r2, #2
    bb54:	4393      	bics	r3, r2
    bb56:	7023      	strb	r3, [r4, #0]
    bb58:	2000      	movs	r0, #0
    bb5a:	e009      	b.n	bb70 <mqtt_disconnect+0x8c>
    bb5c:	4b09      	ldr	r3, [pc, #36]	; (bb84 <mqtt_disconnect+0xa0>)
    bb5e:	4798      	blx	r3
    bb60:	1c38      	adds	r0, r7, #0
    bb62:	e005      	b.n	bb70 <mqtt_disconnect+0x8c>
    bb64:	2016      	movs	r0, #22
    bb66:	e002      	b.n	bb6e <mqtt_disconnect+0x8a>
    bb68:	2080      	movs	r0, #128	; 0x80
    bb6a:	e000      	b.n	bb6e <mqtt_disconnect+0x8a>
    bb6c:	200b      	movs	r0, #11
    bb6e:	4240      	negs	r0, r0
    bb70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bb72:	46c0      	nop			; (mov r8, r8)
    bb74:	000053bd 	.word	0x000053bd
    bb78:	0000b115 	.word	0x0000b115
    bb7c:	00002009 	.word	0x00002009
    bb80:	0000a495 	.word	0x0000a495
    bb84:	0000ba95 	.word	0x0000ba95

0000bb88 <_mqtt_recv_handler>:
    bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb8a:	1c04      	adds	r4, r0, #0
    bb8c:	6e40      	ldr	r0, [r0, #100]	; 0x64
    bb8e:	230f      	movs	r3, #15
    bb90:	7802      	ldrb	r2, [r0, #0]
    bb92:	b087      	sub	sp, #28
    bb94:	1c15      	adds	r5, r2, #0
    bb96:	439d      	bics	r5, r3
    bb98:	2d50      	cmp	r5, #80	; 0x50
    bb9a:	d100      	bne.n	bb9e <_mqtt_recv_handler+0x16>
    bb9c:	e098      	b.n	bcd0 <_mqtt_recv_handler+0x148>
    bb9e:	d808      	bhi.n	bbb2 <_mqtt_recv_handler+0x2a>
    bba0:	2d30      	cmp	r5, #48	; 0x30
    bba2:	d03f      	beq.n	bc24 <_mqtt_recv_handler+0x9c>
    bba4:	2d40      	cmp	r5, #64	; 0x40
    bba6:	d100      	bne.n	bbaa <_mqtt_recv_handler+0x22>
    bba8:	e0b3      	b.n	bd12 <_mqtt_recv_handler+0x18a>
    bbaa:	2d20      	cmp	r5, #32
    bbac:	d000      	beq.n	bbb0 <_mqtt_recv_handler+0x28>
    bbae:	e0c3      	b.n	bd38 <_mqtt_recv_handler+0x1b0>
    bbb0:	e00e      	b.n	bbd0 <_mqtt_recv_handler+0x48>
    bbb2:	2d70      	cmp	r5, #112	; 0x70
    bbb4:	d100      	bne.n	bbb8 <_mqtt_recv_handler+0x30>
    bbb6:	e0ac      	b.n	bd12 <_mqtt_recv_handler+0x18a>
    bbb8:	d803      	bhi.n	bbc2 <_mqtt_recv_handler+0x3a>
    bbba:	2d60      	cmp	r5, #96	; 0x60
    bbbc:	d100      	bne.n	bbc0 <_mqtt_recv_handler+0x38>
    bbbe:	e096      	b.n	bcee <_mqtt_recv_handler+0x166>
    bbc0:	e0ba      	b.n	bd38 <_mqtt_recv_handler+0x1b0>
    bbc2:	2d90      	cmp	r5, #144	; 0x90
    bbc4:	d100      	bne.n	bbc8 <_mqtt_recv_handler+0x40>
    bbc6:	e0aa      	b.n	bd1e <_mqtt_recv_handler+0x196>
    bbc8:	2db0      	cmp	r5, #176	; 0xb0
    bbca:	d100      	bne.n	bbce <_mqtt_recv_handler+0x46>
    bbcc:	e0ad      	b.n	bd2a <_mqtt_recv_handler+0x1a2>
    bbce:	e0b3      	b.n	bd38 <_mqtt_recv_handler+0x1b0>
    bbd0:	aa01      	add	r2, sp, #4
    bbd2:	2303      	movs	r3, #3
    bbd4:	2901      	cmp	r1, #1
    bbd6:	d900      	bls.n	bbda <_mqtt_recv_handler+0x52>
    bbd8:	78c3      	ldrb	r3, [r0, #3]
    bbda:	7013      	strb	r3, [r2, #0]
    bbdc:	7813      	ldrb	r3, [r2, #0]
    bbde:	2b00      	cmp	r3, #0
    bbe0:	d00d      	beq.n	bbfe <_mqtt_recv_handler+0x76>
    bbe2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bbe4:	2b00      	cmp	r3, #0
    bbe6:	d002      	beq.n	bbee <_mqtt_recv_handler+0x66>
    bbe8:	1c20      	adds	r0, r4, #0
    bbea:	2101      	movs	r1, #1
    bbec:	4798      	blx	r3
    bbee:	236f      	movs	r3, #111	; 0x6f
    bbf0:	425b      	negs	r3, r3
    bbf2:	64e3      	str	r3, [r4, #76]	; 0x4c
    bbf4:	1c20      	adds	r0, r4, #0
    bbf6:	2100      	movs	r1, #0
    bbf8:	4b50      	ldr	r3, [pc, #320]	; (bd3c <_mqtt_recv_handler+0x1b4>)
    bbfa:	4798      	blx	r3
    bbfc:	e09c      	b.n	bd38 <_mqtt_recv_handler+0x1b0>
    bbfe:	1c23      	adds	r3, r4, #0
    bc00:	3343      	adds	r3, #67	; 0x43
    bc02:	7819      	ldrb	r1, [r3, #0]
    bc04:	0789      	lsls	r1, r1, #30
    bc06:	0fc9      	lsrs	r1, r1, #31
    bc08:	d105      	bne.n	bc16 <_mqtt_recv_handler+0x8e>
    bc0a:	781a      	ldrb	r2, [r3, #0]
    bc0c:	64e1      	str	r1, [r4, #76]	; 0x4c
    bc0e:	2102      	movs	r1, #2
    bc10:	430a      	orrs	r2, r1
    bc12:	701a      	strb	r2, [r3, #0]
    bc14:	e090      	b.n	bd38 <_mqtt_recv_handler+0x1b0>
    bc16:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bc18:	2b00      	cmp	r3, #0
    bc1a:	d100      	bne.n	bc1e <_mqtt_recv_handler+0x96>
    bc1c:	e08c      	b.n	bd38 <_mqtt_recv_handler+0x1b0>
    bc1e:	1c20      	adds	r0, r4, #0
    bc20:	2101      	movs	r1, #1
    bc22:	e088      	b.n	bd36 <_mqtt_recv_handler+0x1ae>
    bc24:	ad01      	add	r5, sp, #4
    bc26:	0713      	lsls	r3, r2, #28
    bc28:	7c2a      	ldrb	r2, [r5, #16]
    bc2a:	0fdb      	lsrs	r3, r3, #31
    bc2c:	2604      	movs	r6, #4
    bc2e:	009b      	lsls	r3, r3, #2
    bc30:	43b2      	bics	r2, r6
    bc32:	431a      	orrs	r2, r3
    bc34:	742a      	strb	r2, [r5, #16]
    bc36:	7807      	ldrb	r7, [r0, #0]
    bc38:	2303      	movs	r3, #3
    bc3a:	b2d2      	uxtb	r2, r2
    bc3c:	087f      	lsrs	r7, r7, #1
    bc3e:	439a      	bics	r2, r3
    bc40:	401f      	ands	r7, r3
    bc42:	1c13      	adds	r3, r2, #0
    bc44:	433b      	orrs	r3, r7
    bc46:	742b      	strb	r3, [r5, #16]
    bc48:	1c43      	adds	r3, r0, #1
    bc4a:	7818      	ldrb	r0, [r3, #0]
    bc4c:	1c5a      	adds	r2, r3, #1
    bc4e:	287f      	cmp	r0, #127	; 0x7f
    bc50:	d901      	bls.n	bc56 <_mqtt_recv_handler+0xce>
    bc52:	1c13      	adds	r3, r2, #0
    bc54:	e7f9      	b.n	bc4a <_mqtt_recv_handler+0xc2>
    bc56:	7858      	ldrb	r0, [r3, #1]
    bc58:	789e      	ldrb	r6, [r3, #2]
    bc5a:	0200      	lsls	r0, r0, #8
    bc5c:	4330      	orrs	r0, r6
    bc5e:	3303      	adds	r3, #3
    bc60:	2600      	movs	r6, #0
    bc62:	6068      	str	r0, [r5, #4]
    bc64:	9301      	str	r3, [sp, #4]
    bc66:	1818      	adds	r0, r3, r0
    bc68:	42b7      	cmp	r7, r6
    bc6a:	d004      	beq.n	bc76 <_mqtt_recv_handler+0xee>
    bc6c:	7806      	ldrb	r6, [r0, #0]
    bc6e:	7843      	ldrb	r3, [r0, #1]
    bc70:	0236      	lsls	r6, r6, #8
    bc72:	431e      	orrs	r6, r3
    bc74:	3002      	adds	r0, #2
    bc76:	1851      	adds	r1, r2, r1
    bc78:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bc7a:	60a8      	str	r0, [r5, #8]
    bc7c:	1a08      	subs	r0, r1, r0
    bc7e:	60e8      	str	r0, [r5, #12]
    bc80:	2b00      	cmp	r3, #0
    bc82:	d003      	beq.n	bc8c <_mqtt_recv_handler+0x104>
    bc84:	1c20      	adds	r0, r4, #0
    bc86:	2106      	movs	r1, #6
    bc88:	1c2a      	adds	r2, r5, #0
    bc8a:	4798      	blx	r3
    bc8c:	7c2b      	ldrb	r3, [r5, #16]
    bc8e:	079b      	lsls	r3, r3, #30
    bc90:	0f9b      	lsrs	r3, r3, #30
    bc92:	2b01      	cmp	r3, #1
    bc94:	d10b      	bne.n	bcae <_mqtt_recv_handler+0x126>
    bc96:	b2b6      	uxth	r6, r6
    bc98:	1c20      	adds	r0, r4, #0
    bc9a:	2140      	movs	r1, #64	; 0x40
    bc9c:	1c32      	adds	r2, r6, #0
    bc9e:	4b28      	ldr	r3, [pc, #160]	; (bd40 <_mqtt_recv_handler+0x1b8>)
    bca0:	4798      	blx	r3
    bca2:	2800      	cmp	r0, #0
    bca4:	d048      	beq.n	bd38 <_mqtt_recv_handler+0x1b0>
    bca6:	1c23      	adds	r3, r4, #0
    bca8:	3348      	adds	r3, #72	; 0x48
    bcaa:	2240      	movs	r2, #64	; 0x40
    bcac:	e00c      	b.n	bcc8 <_mqtt_recv_handler+0x140>
    bcae:	2b02      	cmp	r3, #2
    bcb0:	d142      	bne.n	bd38 <_mqtt_recv_handler+0x1b0>
    bcb2:	b2b6      	uxth	r6, r6
    bcb4:	1c20      	adds	r0, r4, #0
    bcb6:	2150      	movs	r1, #80	; 0x50
    bcb8:	1c32      	adds	r2, r6, #0
    bcba:	4b21      	ldr	r3, [pc, #132]	; (bd40 <_mqtt_recv_handler+0x1b8>)
    bcbc:	4798      	blx	r3
    bcbe:	2800      	cmp	r0, #0
    bcc0:	d03a      	beq.n	bd38 <_mqtt_recv_handler+0x1b0>
    bcc2:	1c23      	adds	r3, r4, #0
    bcc4:	3348      	adds	r3, #72	; 0x48
    bcc6:	2250      	movs	r2, #80	; 0x50
    bcc8:	344a      	adds	r4, #74	; 0x4a
    bcca:	701a      	strb	r2, [r3, #0]
    bccc:	8026      	strh	r6, [r4, #0]
    bcce:	e033      	b.n	bd38 <_mqtt_recv_handler+0x1b0>
    bcd0:	7885      	ldrb	r5, [r0, #2]
    bcd2:	78c3      	ldrb	r3, [r0, #3]
    bcd4:	022d      	lsls	r5, r5, #8
    bcd6:	431d      	orrs	r5, r3
    bcd8:	1c20      	adds	r0, r4, #0
    bcda:	2162      	movs	r1, #98	; 0x62
    bcdc:	1c2a      	adds	r2, r5, #0
    bcde:	4b18      	ldr	r3, [pc, #96]	; (bd40 <_mqtt_recv_handler+0x1b8>)
    bce0:	4798      	blx	r3
    bce2:	2800      	cmp	r0, #0
    bce4:	d028      	beq.n	bd38 <_mqtt_recv_handler+0x1b0>
    bce6:	1c23      	adds	r3, r4, #0
    bce8:	3348      	adds	r3, #72	; 0x48
    bcea:	2260      	movs	r2, #96	; 0x60
    bcec:	e00d      	b.n	bd0a <_mqtt_recv_handler+0x182>
    bcee:	7885      	ldrb	r5, [r0, #2]
    bcf0:	78c3      	ldrb	r3, [r0, #3]
    bcf2:	022d      	lsls	r5, r5, #8
    bcf4:	431d      	orrs	r5, r3
    bcf6:	1c20      	adds	r0, r4, #0
    bcf8:	2170      	movs	r1, #112	; 0x70
    bcfa:	1c2a      	adds	r2, r5, #0
    bcfc:	4b10      	ldr	r3, [pc, #64]	; (bd40 <_mqtt_recv_handler+0x1b8>)
    bcfe:	4798      	blx	r3
    bd00:	2800      	cmp	r0, #0
    bd02:	d019      	beq.n	bd38 <_mqtt_recv_handler+0x1b0>
    bd04:	1c23      	adds	r3, r4, #0
    bd06:	3348      	adds	r3, #72	; 0x48
    bd08:	2270      	movs	r2, #112	; 0x70
    bd0a:	344a      	adds	r4, #74	; 0x4a
    bd0c:	701a      	strb	r2, [r3, #0]
    bd0e:	8025      	strh	r5, [r4, #0]
    bd10:	e012      	b.n	bd38 <_mqtt_recv_handler+0x1b0>
    bd12:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bd14:	2b00      	cmp	r3, #0
    bd16:	d00f      	beq.n	bd38 <_mqtt_recv_handler+0x1b0>
    bd18:	1c20      	adds	r0, r4, #0
    bd1a:	2102      	movs	r1, #2
    bd1c:	e00a      	b.n	bd34 <_mqtt_recv_handler+0x1ac>
    bd1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bd20:	2b00      	cmp	r3, #0
    bd22:	d009      	beq.n	bd38 <_mqtt_recv_handler+0x1b0>
    bd24:	1c20      	adds	r0, r4, #0
    bd26:	2103      	movs	r1, #3
    bd28:	e004      	b.n	bd34 <_mqtt_recv_handler+0x1ac>
    bd2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    bd2c:	2b00      	cmp	r3, #0
    bd2e:	d003      	beq.n	bd38 <_mqtt_recv_handler+0x1b0>
    bd30:	1c20      	adds	r0, r4, #0
    bd32:	2104      	movs	r1, #4
    bd34:	aa01      	add	r2, sp, #4
    bd36:	4798      	blx	r3
    bd38:	b007      	add	sp, #28
    bd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd3c:	0000bae5 	.word	0x0000bae5
    bd40:	0000ba31 	.word	0x0000ba31

0000bd44 <mqtt_recv_packet>:
    bd44:	b538      	push	{r3, r4, r5, lr}
    bd46:	1e04      	subs	r4, r0, #0
    bd48:	d017      	beq.n	bd7a <mqtt_recv_packet+0x36>
    bd4a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    bd4c:	6e83      	ldr	r3, [r0, #104]	; 0x68
    bd4e:	429a      	cmp	r2, r3
    bd50:	d906      	bls.n	bd60 <mqtt_recv_packet+0x1c>
    bd52:	238b      	movs	r3, #139	; 0x8b
    bd54:	425b      	negs	r3, r3
    bd56:	64c3      	str	r3, [r0, #76]	; 0x4c
    bd58:	2100      	movs	r1, #0
    bd5a:	4b08      	ldr	r3, [pc, #32]	; (bd7c <mqtt_recv_packet+0x38>)
    bd5c:	4798      	blx	r3
    bd5e:	e00c      	b.n	bd7a <mqtt_recv_packet+0x36>
    bd60:	6c62      	ldr	r2, [r4, #68]	; 0x44
    bd62:	6e63      	ldr	r3, [r4, #100]	; 0x64
    bd64:	2002      	movs	r0, #2
    bd66:	1899      	adds	r1, r3, r2
    bd68:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    bd6a:	5620      	ldrsb	r0, [r4, r0]
    bd6c:	1a9a      	subs	r2, r3, r2
    bd6e:	b292      	uxth	r2, r2
    bd70:	2300      	movs	r3, #0
    bd72:	4d03      	ldr	r5, [pc, #12]	; (bd80 <mqtt_recv_packet+0x3c>)
    bd74:	47a8      	blx	r5
    bd76:	2800      	cmp	r0, #0
    bd78:	d1f2      	bne.n	bd60 <mqtt_recv_packet+0x1c>
    bd7a:	bd38      	pop	{r3, r4, r5, pc}
    bd7c:	0000bae5 	.word	0x0000bae5
    bd80:	00005521 	.word	0x00005521

0000bd84 <mqtt_recved_packet>:
    bd84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bd86:	1e04      	subs	r4, r0, #0
    bd88:	d042      	beq.n	be10 <mqtt_recved_packet+0x8c>
    bd8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    bd8c:	6e67      	ldr	r7, [r4, #100]	; 0x64
    bd8e:	18ca      	adds	r2, r1, r3
    bd90:	2301      	movs	r3, #1
    bd92:	9701      	str	r7, [sp, #4]
    bd94:	6462      	str	r2, [r4, #68]	; 0x44
    bd96:	2600      	movs	r6, #0
    bd98:	1c1d      	adds	r5, r3, #0
    bd9a:	42a9      	cmp	r1, r5
    bd9c:	dc03      	bgt.n	bda6 <mqtt_recved_packet+0x22>
    bd9e:	1c20      	adds	r0, r4, #0
    bda0:	4b1c      	ldr	r3, [pc, #112]	; (be14 <mqtt_recved_packet+0x90>)
    bda2:	4798      	blx	r3
    bda4:	e034      	b.n	be10 <mqtt_recved_packet+0x8c>
    bda6:	9f01      	ldr	r7, [sp, #4]
    bda8:	5d78      	ldrb	r0, [r7, r5]
    bdaa:	01df      	lsls	r7, r3, #7
    bdac:	46bc      	mov	ip, r7
    bdae:	2d03      	cmp	r5, #3
    bdb0:	d101      	bne.n	bdb6 <mqtt_recved_packet+0x32>
    bdb2:	234d      	movs	r3, #77	; 0x4d
    bdb4:	e00e      	b.n	bdd4 <mqtt_recved_packet+0x50>
    bdb6:	277f      	movs	r7, #127	; 0x7f
    bdb8:	4007      	ands	r7, r0
    bdba:	437b      	muls	r3, r7
    bdbc:	b240      	sxtb	r0, r0
    bdbe:	3501      	adds	r5, #1
    bdc0:	18f6      	adds	r6, r6, r3
    bdc2:	2800      	cmp	r0, #0
    bdc4:	da01      	bge.n	bdca <mqtt_recved_packet+0x46>
    bdc6:	4663      	mov	r3, ip
    bdc8:	e7e7      	b.n	bd9a <mqtt_recved_packet+0x16>
    bdca:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    bdcc:	19af      	adds	r7, r5, r6
    bdce:	429f      	cmp	r7, r3
    bdd0:	d907      	bls.n	bde2 <mqtt_recved_packet+0x5e>
    bdd2:	238b      	movs	r3, #139	; 0x8b
    bdd4:	425b      	negs	r3, r3
    bdd6:	64e3      	str	r3, [r4, #76]	; 0x4c
    bdd8:	1c20      	adds	r0, r4, #0
    bdda:	2100      	movs	r1, #0
    bddc:	4b0e      	ldr	r3, [pc, #56]	; (be18 <mqtt_recved_packet+0x94>)
    bdde:	4798      	blx	r3
    bde0:	e016      	b.n	be10 <mqtt_recved_packet+0x8c>
    bde2:	42ba      	cmp	r2, r7
    bde4:	d314      	bcc.n	be10 <mqtt_recved_packet+0x8c>
    bde6:	4b0d      	ldr	r3, [pc, #52]	; (be1c <mqtt_recved_packet+0x98>)
    bde8:	1c20      	adds	r0, r4, #0
    bdea:	1c31      	adds	r1, r6, #0
    bdec:	4798      	blx	r3
    bdee:	6c63      	ldr	r3, [r4, #68]	; 0x44
    bdf0:	42bb      	cmp	r3, r7
    bdf2:	d102      	bne.n	bdfa <mqtt_recved_packet+0x76>
    bdf4:	2300      	movs	r3, #0
    bdf6:	6463      	str	r3, [r4, #68]	; 0x44
    bdf8:	e00a      	b.n	be10 <mqtt_recved_packet+0x8c>
    bdfa:	1b9e      	subs	r6, r3, r6
    bdfc:	9b01      	ldr	r3, [sp, #4]
    bdfe:	1b75      	subs	r5, r6, r5
    be00:	19d9      	adds	r1, r3, r7
    be02:	1c18      	adds	r0, r3, #0
    be04:	1c2a      	adds	r2, r5, #0
    be06:	4b06      	ldr	r3, [pc, #24]	; (be20 <mqtt_recved_packet+0x9c>)
    be08:	4798      	blx	r3
    be0a:	6465      	str	r5, [r4, #68]	; 0x44
    be0c:	2100      	movs	r1, #0
    be0e:	e7bc      	b.n	bd8a <mqtt_recved_packet+0x6>
    be10:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    be12:	46c0      	nop			; (mov r8, r8)
    be14:	0000bd45 	.word	0x0000bd45
    be18:	0000bae5 	.word	0x0000bae5
    be1c:	0000bb89 	.word	0x0000bb89
    be20:	0000c2ef 	.word	0x0000c2ef

0000be24 <mqtt_socket_event_handler>:
    be24:	b570      	push	{r4, r5, r6, lr}
    be26:	4d37      	ldr	r5, [pc, #220]	; (bf04 <mqtt_socket_event_handler+0xe0>)
    be28:	0086      	lsls	r6, r0, #2
    be2a:	5974      	ldr	r4, [r6, r5]
    be2c:	b086      	sub	sp, #24
    be2e:	2c00      	cmp	r4, #0
    be30:	d066      	beq.n	bf00 <mqtt_socket_event_handler+0xdc>
    be32:	2906      	cmp	r1, #6
    be34:	d02b      	beq.n	be8e <mqtt_socket_event_handler+0x6a>
    be36:	2907      	cmp	r1, #7
    be38:	d039      	beq.n	beae <mqtt_socket_event_handler+0x8a>
    be3a:	2905      	cmp	r1, #5
    be3c:	d160      	bne.n	bf00 <mqtt_socket_event_handler+0xdc>
    be3e:	2001      	movs	r0, #1
    be40:	5610      	ldrsb	r0, [r2, r0]
    be42:	4b31      	ldr	r3, [pc, #196]	; (bf08 <mqtt_socket_event_handler+0xe4>)
    be44:	4798      	blx	r3
    be46:	9001      	str	r0, [sp, #4]
    be48:	2800      	cmp	r0, #0
    be4a:	da06      	bge.n	be5a <mqtt_socket_event_handler+0x36>
    be4c:	2002      	movs	r0, #2
    be4e:	4b2f      	ldr	r3, [pc, #188]	; (bf0c <mqtt_socket_event_handler+0xe8>)
    be50:	5620      	ldrsb	r0, [r4, r0]
    be52:	4798      	blx	r3
    be54:	2300      	movs	r3, #0
    be56:	5173      	str	r3, [r6, r5]
    be58:	e011      	b.n	be7e <mqtt_socket_event_handler+0x5a>
    be5a:	1c23      	adds	r3, r4, #0
    be5c:	3343      	adds	r3, #67	; 0x43
    be5e:	781a      	ldrb	r2, [r3, #0]
    be60:	2101      	movs	r1, #1
    be62:	430a      	orrs	r2, r1
    be64:	701a      	strb	r2, [r3, #0]
    be66:	331d      	adds	r3, #29
    be68:	881b      	ldrh	r3, [r3, #0]
    be6a:	2b00      	cmp	r3, #0
    be6c:	d004      	beq.n	be78 <mqtt_socket_event_handler+0x54>
    be6e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    be70:	6d21      	ldr	r1, [r4, #80]	; 0x50
    be72:	2200      	movs	r2, #0
    be74:	4b26      	ldr	r3, [pc, #152]	; (bf10 <mqtt_socket_event_handler+0xec>)
    be76:	4798      	blx	r3
    be78:	1c20      	adds	r0, r4, #0
    be7a:	4b26      	ldr	r3, [pc, #152]	; (bf14 <mqtt_socket_event_handler+0xf0>)
    be7c:	4798      	blx	r3
    be7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    be80:	2b00      	cmp	r3, #0
    be82:	d03d      	beq.n	bf00 <mqtt_socket_event_handler+0xdc>
    be84:	1c20      	adds	r0, r4, #0
    be86:	2100      	movs	r1, #0
    be88:	aa01      	add	r2, sp, #4
    be8a:	4798      	blx	r3
    be8c:	e038      	b.n	bf00 <mqtt_socket_event_handler+0xdc>
    be8e:	2304      	movs	r3, #4
    be90:	5ed1      	ldrsh	r1, [r2, r3]
    be92:	2900      	cmp	r1, #0
    be94:	dd03      	ble.n	be9e <mqtt_socket_event_handler+0x7a>
    be96:	1c20      	adds	r0, r4, #0
    be98:	4b1f      	ldr	r3, [pc, #124]	; (bf18 <mqtt_socket_event_handler+0xf4>)
    be9a:	4798      	blx	r3
    be9c:	e003      	b.n	bea6 <mqtt_socket_event_handler+0x82>
    be9e:	1c0b      	adds	r3, r1, #0
    bea0:	1c08      	adds	r0, r1, #0
    bea2:	330d      	adds	r3, #13
    bea4:	d11a      	bne.n	bedc <mqtt_socket_event_handler+0xb8>
    bea6:	4b1b      	ldr	r3, [pc, #108]	; (bf14 <mqtt_socket_event_handler+0xf0>)
    bea8:	1c20      	adds	r0, r4, #0
    beaa:	4798      	blx	r3
    beac:	e028      	b.n	bf00 <mqtt_socket_event_handler+0xdc>
    beae:	1c23      	adds	r3, r4, #0
    beb0:	3343      	adds	r3, #67	; 0x43
    beb2:	8810      	ldrh	r0, [r2, #0]
    beb4:	781a      	ldrb	r2, [r3, #0]
    beb6:	0751      	lsls	r1, r2, #29
    beb8:	d402      	bmi.n	bec0 <mqtt_socket_event_handler+0x9c>
    beba:	2108      	movs	r1, #8
    bebc:	438a      	bics	r2, r1
    bebe:	701a      	strb	r2, [r3, #0]
    bec0:	781a      	ldrb	r2, [r3, #0]
    bec2:	2104      	movs	r1, #4
    bec4:	438a      	bics	r2, r1
    bec6:	701a      	strb	r2, [r3, #0]
    bec8:	06d3      	lsls	r3, r2, #27
    beca:	0fde      	lsrs	r6, r3, #31
    becc:	b200      	sxth	r0, r0
    bece:	2b00      	cmp	r3, #0
    bed0:	db02      	blt.n	bed8 <mqtt_socket_event_handler+0xb4>
    bed2:	2800      	cmp	r0, #0
    bed4:	da08      	bge.n	bee8 <mqtt_socket_event_handler+0xc4>
    bed6:	e001      	b.n	bedc <mqtt_socket_event_handler+0xb8>
    bed8:	2800      	cmp	r0, #0
    beda:	da02      	bge.n	bee2 <mqtt_socket_event_handler+0xbe>
    bedc:	4b0a      	ldr	r3, [pc, #40]	; (bf08 <mqtt_socket_event_handler+0xe4>)
    bede:	4798      	blx	r3
    bee0:	64e0      	str	r0, [r4, #76]	; 0x4c
    bee2:	1c20      	adds	r0, r4, #0
    bee4:	4b0d      	ldr	r3, [pc, #52]	; (bf1c <mqtt_socket_event_handler+0xf8>)
    bee6:	e7e0      	b.n	beaa <mqtt_socket_event_handler+0x86>
    bee8:	1c25      	adds	r5, r4, #0
    beea:	3548      	adds	r5, #72	; 0x48
    beec:	7829      	ldrb	r1, [r5, #0]
    beee:	2900      	cmp	r1, #0
    bef0:	d006      	beq.n	bf00 <mqtt_socket_event_handler+0xdc>
    bef2:	1c23      	adds	r3, r4, #0
    bef4:	334a      	adds	r3, #74	; 0x4a
    bef6:	881a      	ldrh	r2, [r3, #0]
    bef8:	1c20      	adds	r0, r4, #0
    befa:	4b09      	ldr	r3, [pc, #36]	; (bf20 <mqtt_socket_event_handler+0xfc>)
    befc:	4798      	blx	r3
    befe:	702e      	strb	r6, [r5, #0]
    bf00:	b006      	add	sp, #24
    bf02:	bd70      	pop	{r4, r5, r6, pc}
    bf04:	200002ac 	.word	0x200002ac
    bf08:	0000b115 	.word	0x0000b115
    bf0c:	000056a1 	.word	0x000056a1
    bf10:	0000a419 	.word	0x0000a419
    bf14:	0000bd45 	.word	0x0000bd45
    bf18:	0000bd85 	.word	0x0000bd85
    bf1c:	0000ba95 	.word	0x0000ba95
    bf20:	0000ba31 	.word	0x0000ba31

0000bf24 <__gnu_thumb1_case_uqi>:
    bf24:	b402      	push	{r1}
    bf26:	4671      	mov	r1, lr
    bf28:	0849      	lsrs	r1, r1, #1
    bf2a:	0049      	lsls	r1, r1, #1
    bf2c:	5c09      	ldrb	r1, [r1, r0]
    bf2e:	0049      	lsls	r1, r1, #1
    bf30:	448e      	add	lr, r1
    bf32:	bc02      	pop	{r1}
    bf34:	4770      	bx	lr
    bf36:	46c0      	nop			; (mov r8, r8)

0000bf38 <__aeabi_uidiv>:
    bf38:	2200      	movs	r2, #0
    bf3a:	0843      	lsrs	r3, r0, #1
    bf3c:	428b      	cmp	r3, r1
    bf3e:	d374      	bcc.n	c02a <__aeabi_uidiv+0xf2>
    bf40:	0903      	lsrs	r3, r0, #4
    bf42:	428b      	cmp	r3, r1
    bf44:	d35f      	bcc.n	c006 <__aeabi_uidiv+0xce>
    bf46:	0a03      	lsrs	r3, r0, #8
    bf48:	428b      	cmp	r3, r1
    bf4a:	d344      	bcc.n	bfd6 <__aeabi_uidiv+0x9e>
    bf4c:	0b03      	lsrs	r3, r0, #12
    bf4e:	428b      	cmp	r3, r1
    bf50:	d328      	bcc.n	bfa4 <__aeabi_uidiv+0x6c>
    bf52:	0c03      	lsrs	r3, r0, #16
    bf54:	428b      	cmp	r3, r1
    bf56:	d30d      	bcc.n	bf74 <__aeabi_uidiv+0x3c>
    bf58:	22ff      	movs	r2, #255	; 0xff
    bf5a:	0209      	lsls	r1, r1, #8
    bf5c:	ba12      	rev	r2, r2
    bf5e:	0c03      	lsrs	r3, r0, #16
    bf60:	428b      	cmp	r3, r1
    bf62:	d302      	bcc.n	bf6a <__aeabi_uidiv+0x32>
    bf64:	1212      	asrs	r2, r2, #8
    bf66:	0209      	lsls	r1, r1, #8
    bf68:	d065      	beq.n	c036 <__aeabi_uidiv+0xfe>
    bf6a:	0b03      	lsrs	r3, r0, #12
    bf6c:	428b      	cmp	r3, r1
    bf6e:	d319      	bcc.n	bfa4 <__aeabi_uidiv+0x6c>
    bf70:	e000      	b.n	bf74 <__aeabi_uidiv+0x3c>
    bf72:	0a09      	lsrs	r1, r1, #8
    bf74:	0bc3      	lsrs	r3, r0, #15
    bf76:	428b      	cmp	r3, r1
    bf78:	d301      	bcc.n	bf7e <__aeabi_uidiv+0x46>
    bf7a:	03cb      	lsls	r3, r1, #15
    bf7c:	1ac0      	subs	r0, r0, r3
    bf7e:	4152      	adcs	r2, r2
    bf80:	0b83      	lsrs	r3, r0, #14
    bf82:	428b      	cmp	r3, r1
    bf84:	d301      	bcc.n	bf8a <__aeabi_uidiv+0x52>
    bf86:	038b      	lsls	r3, r1, #14
    bf88:	1ac0      	subs	r0, r0, r3
    bf8a:	4152      	adcs	r2, r2
    bf8c:	0b43      	lsrs	r3, r0, #13
    bf8e:	428b      	cmp	r3, r1
    bf90:	d301      	bcc.n	bf96 <__aeabi_uidiv+0x5e>
    bf92:	034b      	lsls	r3, r1, #13
    bf94:	1ac0      	subs	r0, r0, r3
    bf96:	4152      	adcs	r2, r2
    bf98:	0b03      	lsrs	r3, r0, #12
    bf9a:	428b      	cmp	r3, r1
    bf9c:	d301      	bcc.n	bfa2 <__aeabi_uidiv+0x6a>
    bf9e:	030b      	lsls	r3, r1, #12
    bfa0:	1ac0      	subs	r0, r0, r3
    bfa2:	4152      	adcs	r2, r2
    bfa4:	0ac3      	lsrs	r3, r0, #11
    bfa6:	428b      	cmp	r3, r1
    bfa8:	d301      	bcc.n	bfae <__aeabi_uidiv+0x76>
    bfaa:	02cb      	lsls	r3, r1, #11
    bfac:	1ac0      	subs	r0, r0, r3
    bfae:	4152      	adcs	r2, r2
    bfb0:	0a83      	lsrs	r3, r0, #10
    bfb2:	428b      	cmp	r3, r1
    bfb4:	d301      	bcc.n	bfba <__aeabi_uidiv+0x82>
    bfb6:	028b      	lsls	r3, r1, #10
    bfb8:	1ac0      	subs	r0, r0, r3
    bfba:	4152      	adcs	r2, r2
    bfbc:	0a43      	lsrs	r3, r0, #9
    bfbe:	428b      	cmp	r3, r1
    bfc0:	d301      	bcc.n	bfc6 <__aeabi_uidiv+0x8e>
    bfc2:	024b      	lsls	r3, r1, #9
    bfc4:	1ac0      	subs	r0, r0, r3
    bfc6:	4152      	adcs	r2, r2
    bfc8:	0a03      	lsrs	r3, r0, #8
    bfca:	428b      	cmp	r3, r1
    bfcc:	d301      	bcc.n	bfd2 <__aeabi_uidiv+0x9a>
    bfce:	020b      	lsls	r3, r1, #8
    bfd0:	1ac0      	subs	r0, r0, r3
    bfd2:	4152      	adcs	r2, r2
    bfd4:	d2cd      	bcs.n	bf72 <__aeabi_uidiv+0x3a>
    bfd6:	09c3      	lsrs	r3, r0, #7
    bfd8:	428b      	cmp	r3, r1
    bfda:	d301      	bcc.n	bfe0 <__aeabi_uidiv+0xa8>
    bfdc:	01cb      	lsls	r3, r1, #7
    bfde:	1ac0      	subs	r0, r0, r3
    bfe0:	4152      	adcs	r2, r2
    bfe2:	0983      	lsrs	r3, r0, #6
    bfe4:	428b      	cmp	r3, r1
    bfe6:	d301      	bcc.n	bfec <__aeabi_uidiv+0xb4>
    bfe8:	018b      	lsls	r3, r1, #6
    bfea:	1ac0      	subs	r0, r0, r3
    bfec:	4152      	adcs	r2, r2
    bfee:	0943      	lsrs	r3, r0, #5
    bff0:	428b      	cmp	r3, r1
    bff2:	d301      	bcc.n	bff8 <__aeabi_uidiv+0xc0>
    bff4:	014b      	lsls	r3, r1, #5
    bff6:	1ac0      	subs	r0, r0, r3
    bff8:	4152      	adcs	r2, r2
    bffa:	0903      	lsrs	r3, r0, #4
    bffc:	428b      	cmp	r3, r1
    bffe:	d301      	bcc.n	c004 <__aeabi_uidiv+0xcc>
    c000:	010b      	lsls	r3, r1, #4
    c002:	1ac0      	subs	r0, r0, r3
    c004:	4152      	adcs	r2, r2
    c006:	08c3      	lsrs	r3, r0, #3
    c008:	428b      	cmp	r3, r1
    c00a:	d301      	bcc.n	c010 <__aeabi_uidiv+0xd8>
    c00c:	00cb      	lsls	r3, r1, #3
    c00e:	1ac0      	subs	r0, r0, r3
    c010:	4152      	adcs	r2, r2
    c012:	0883      	lsrs	r3, r0, #2
    c014:	428b      	cmp	r3, r1
    c016:	d301      	bcc.n	c01c <__aeabi_uidiv+0xe4>
    c018:	008b      	lsls	r3, r1, #2
    c01a:	1ac0      	subs	r0, r0, r3
    c01c:	4152      	adcs	r2, r2
    c01e:	0843      	lsrs	r3, r0, #1
    c020:	428b      	cmp	r3, r1
    c022:	d301      	bcc.n	c028 <__aeabi_uidiv+0xf0>
    c024:	004b      	lsls	r3, r1, #1
    c026:	1ac0      	subs	r0, r0, r3
    c028:	4152      	adcs	r2, r2
    c02a:	1a41      	subs	r1, r0, r1
    c02c:	d200      	bcs.n	c030 <__aeabi_uidiv+0xf8>
    c02e:	4601      	mov	r1, r0
    c030:	4152      	adcs	r2, r2
    c032:	4610      	mov	r0, r2
    c034:	4770      	bx	lr
    c036:	e7ff      	b.n	c038 <__aeabi_uidiv+0x100>
    c038:	b501      	push	{r0, lr}
    c03a:	2000      	movs	r0, #0
    c03c:	f000 f8f0 	bl	c220 <__aeabi_idiv0>
    c040:	bd02      	pop	{r1, pc}
    c042:	46c0      	nop			; (mov r8, r8)

0000c044 <__aeabi_uidivmod>:
    c044:	2900      	cmp	r1, #0
    c046:	d0f7      	beq.n	c038 <__aeabi_uidiv+0x100>
    c048:	e776      	b.n	bf38 <__aeabi_uidiv>
    c04a:	4770      	bx	lr

0000c04c <__aeabi_idiv>:
    c04c:	4603      	mov	r3, r0
    c04e:	430b      	orrs	r3, r1
    c050:	d47f      	bmi.n	c152 <__aeabi_idiv+0x106>
    c052:	2200      	movs	r2, #0
    c054:	0843      	lsrs	r3, r0, #1
    c056:	428b      	cmp	r3, r1
    c058:	d374      	bcc.n	c144 <__aeabi_idiv+0xf8>
    c05a:	0903      	lsrs	r3, r0, #4
    c05c:	428b      	cmp	r3, r1
    c05e:	d35f      	bcc.n	c120 <__aeabi_idiv+0xd4>
    c060:	0a03      	lsrs	r3, r0, #8
    c062:	428b      	cmp	r3, r1
    c064:	d344      	bcc.n	c0f0 <__aeabi_idiv+0xa4>
    c066:	0b03      	lsrs	r3, r0, #12
    c068:	428b      	cmp	r3, r1
    c06a:	d328      	bcc.n	c0be <__aeabi_idiv+0x72>
    c06c:	0c03      	lsrs	r3, r0, #16
    c06e:	428b      	cmp	r3, r1
    c070:	d30d      	bcc.n	c08e <__aeabi_idiv+0x42>
    c072:	22ff      	movs	r2, #255	; 0xff
    c074:	0209      	lsls	r1, r1, #8
    c076:	ba12      	rev	r2, r2
    c078:	0c03      	lsrs	r3, r0, #16
    c07a:	428b      	cmp	r3, r1
    c07c:	d302      	bcc.n	c084 <__aeabi_idiv+0x38>
    c07e:	1212      	asrs	r2, r2, #8
    c080:	0209      	lsls	r1, r1, #8
    c082:	d065      	beq.n	c150 <__aeabi_idiv+0x104>
    c084:	0b03      	lsrs	r3, r0, #12
    c086:	428b      	cmp	r3, r1
    c088:	d319      	bcc.n	c0be <__aeabi_idiv+0x72>
    c08a:	e000      	b.n	c08e <__aeabi_idiv+0x42>
    c08c:	0a09      	lsrs	r1, r1, #8
    c08e:	0bc3      	lsrs	r3, r0, #15
    c090:	428b      	cmp	r3, r1
    c092:	d301      	bcc.n	c098 <__aeabi_idiv+0x4c>
    c094:	03cb      	lsls	r3, r1, #15
    c096:	1ac0      	subs	r0, r0, r3
    c098:	4152      	adcs	r2, r2
    c09a:	0b83      	lsrs	r3, r0, #14
    c09c:	428b      	cmp	r3, r1
    c09e:	d301      	bcc.n	c0a4 <__aeabi_idiv+0x58>
    c0a0:	038b      	lsls	r3, r1, #14
    c0a2:	1ac0      	subs	r0, r0, r3
    c0a4:	4152      	adcs	r2, r2
    c0a6:	0b43      	lsrs	r3, r0, #13
    c0a8:	428b      	cmp	r3, r1
    c0aa:	d301      	bcc.n	c0b0 <__aeabi_idiv+0x64>
    c0ac:	034b      	lsls	r3, r1, #13
    c0ae:	1ac0      	subs	r0, r0, r3
    c0b0:	4152      	adcs	r2, r2
    c0b2:	0b03      	lsrs	r3, r0, #12
    c0b4:	428b      	cmp	r3, r1
    c0b6:	d301      	bcc.n	c0bc <__aeabi_idiv+0x70>
    c0b8:	030b      	lsls	r3, r1, #12
    c0ba:	1ac0      	subs	r0, r0, r3
    c0bc:	4152      	adcs	r2, r2
    c0be:	0ac3      	lsrs	r3, r0, #11
    c0c0:	428b      	cmp	r3, r1
    c0c2:	d301      	bcc.n	c0c8 <__aeabi_idiv+0x7c>
    c0c4:	02cb      	lsls	r3, r1, #11
    c0c6:	1ac0      	subs	r0, r0, r3
    c0c8:	4152      	adcs	r2, r2
    c0ca:	0a83      	lsrs	r3, r0, #10
    c0cc:	428b      	cmp	r3, r1
    c0ce:	d301      	bcc.n	c0d4 <__aeabi_idiv+0x88>
    c0d0:	028b      	lsls	r3, r1, #10
    c0d2:	1ac0      	subs	r0, r0, r3
    c0d4:	4152      	adcs	r2, r2
    c0d6:	0a43      	lsrs	r3, r0, #9
    c0d8:	428b      	cmp	r3, r1
    c0da:	d301      	bcc.n	c0e0 <__aeabi_idiv+0x94>
    c0dc:	024b      	lsls	r3, r1, #9
    c0de:	1ac0      	subs	r0, r0, r3
    c0e0:	4152      	adcs	r2, r2
    c0e2:	0a03      	lsrs	r3, r0, #8
    c0e4:	428b      	cmp	r3, r1
    c0e6:	d301      	bcc.n	c0ec <__aeabi_idiv+0xa0>
    c0e8:	020b      	lsls	r3, r1, #8
    c0ea:	1ac0      	subs	r0, r0, r3
    c0ec:	4152      	adcs	r2, r2
    c0ee:	d2cd      	bcs.n	c08c <__aeabi_idiv+0x40>
    c0f0:	09c3      	lsrs	r3, r0, #7
    c0f2:	428b      	cmp	r3, r1
    c0f4:	d301      	bcc.n	c0fa <__aeabi_idiv+0xae>
    c0f6:	01cb      	lsls	r3, r1, #7
    c0f8:	1ac0      	subs	r0, r0, r3
    c0fa:	4152      	adcs	r2, r2
    c0fc:	0983      	lsrs	r3, r0, #6
    c0fe:	428b      	cmp	r3, r1
    c100:	d301      	bcc.n	c106 <__aeabi_idiv+0xba>
    c102:	018b      	lsls	r3, r1, #6
    c104:	1ac0      	subs	r0, r0, r3
    c106:	4152      	adcs	r2, r2
    c108:	0943      	lsrs	r3, r0, #5
    c10a:	428b      	cmp	r3, r1
    c10c:	d301      	bcc.n	c112 <__aeabi_idiv+0xc6>
    c10e:	014b      	lsls	r3, r1, #5
    c110:	1ac0      	subs	r0, r0, r3
    c112:	4152      	adcs	r2, r2
    c114:	0903      	lsrs	r3, r0, #4
    c116:	428b      	cmp	r3, r1
    c118:	d301      	bcc.n	c11e <__aeabi_idiv+0xd2>
    c11a:	010b      	lsls	r3, r1, #4
    c11c:	1ac0      	subs	r0, r0, r3
    c11e:	4152      	adcs	r2, r2
    c120:	08c3      	lsrs	r3, r0, #3
    c122:	428b      	cmp	r3, r1
    c124:	d301      	bcc.n	c12a <__aeabi_idiv+0xde>
    c126:	00cb      	lsls	r3, r1, #3
    c128:	1ac0      	subs	r0, r0, r3
    c12a:	4152      	adcs	r2, r2
    c12c:	0883      	lsrs	r3, r0, #2
    c12e:	428b      	cmp	r3, r1
    c130:	d301      	bcc.n	c136 <__aeabi_idiv+0xea>
    c132:	008b      	lsls	r3, r1, #2
    c134:	1ac0      	subs	r0, r0, r3
    c136:	4152      	adcs	r2, r2
    c138:	0843      	lsrs	r3, r0, #1
    c13a:	428b      	cmp	r3, r1
    c13c:	d301      	bcc.n	c142 <__aeabi_idiv+0xf6>
    c13e:	004b      	lsls	r3, r1, #1
    c140:	1ac0      	subs	r0, r0, r3
    c142:	4152      	adcs	r2, r2
    c144:	1a41      	subs	r1, r0, r1
    c146:	d200      	bcs.n	c14a <__aeabi_idiv+0xfe>
    c148:	4601      	mov	r1, r0
    c14a:	4152      	adcs	r2, r2
    c14c:	4610      	mov	r0, r2
    c14e:	4770      	bx	lr
    c150:	e05d      	b.n	c20e <__aeabi_idiv+0x1c2>
    c152:	0fca      	lsrs	r2, r1, #31
    c154:	d000      	beq.n	c158 <__aeabi_idiv+0x10c>
    c156:	4249      	negs	r1, r1
    c158:	1003      	asrs	r3, r0, #32
    c15a:	d300      	bcc.n	c15e <__aeabi_idiv+0x112>
    c15c:	4240      	negs	r0, r0
    c15e:	4053      	eors	r3, r2
    c160:	2200      	movs	r2, #0
    c162:	469c      	mov	ip, r3
    c164:	0903      	lsrs	r3, r0, #4
    c166:	428b      	cmp	r3, r1
    c168:	d32d      	bcc.n	c1c6 <__aeabi_idiv+0x17a>
    c16a:	0a03      	lsrs	r3, r0, #8
    c16c:	428b      	cmp	r3, r1
    c16e:	d312      	bcc.n	c196 <__aeabi_idiv+0x14a>
    c170:	22fc      	movs	r2, #252	; 0xfc
    c172:	0189      	lsls	r1, r1, #6
    c174:	ba12      	rev	r2, r2
    c176:	0a03      	lsrs	r3, r0, #8
    c178:	428b      	cmp	r3, r1
    c17a:	d30c      	bcc.n	c196 <__aeabi_idiv+0x14a>
    c17c:	0189      	lsls	r1, r1, #6
    c17e:	1192      	asrs	r2, r2, #6
    c180:	428b      	cmp	r3, r1
    c182:	d308      	bcc.n	c196 <__aeabi_idiv+0x14a>
    c184:	0189      	lsls	r1, r1, #6
    c186:	1192      	asrs	r2, r2, #6
    c188:	428b      	cmp	r3, r1
    c18a:	d304      	bcc.n	c196 <__aeabi_idiv+0x14a>
    c18c:	0189      	lsls	r1, r1, #6
    c18e:	d03a      	beq.n	c206 <__aeabi_idiv+0x1ba>
    c190:	1192      	asrs	r2, r2, #6
    c192:	e000      	b.n	c196 <__aeabi_idiv+0x14a>
    c194:	0989      	lsrs	r1, r1, #6
    c196:	09c3      	lsrs	r3, r0, #7
    c198:	428b      	cmp	r3, r1
    c19a:	d301      	bcc.n	c1a0 <__aeabi_idiv+0x154>
    c19c:	01cb      	lsls	r3, r1, #7
    c19e:	1ac0      	subs	r0, r0, r3
    c1a0:	4152      	adcs	r2, r2
    c1a2:	0983      	lsrs	r3, r0, #6
    c1a4:	428b      	cmp	r3, r1
    c1a6:	d301      	bcc.n	c1ac <__aeabi_idiv+0x160>
    c1a8:	018b      	lsls	r3, r1, #6
    c1aa:	1ac0      	subs	r0, r0, r3
    c1ac:	4152      	adcs	r2, r2
    c1ae:	0943      	lsrs	r3, r0, #5
    c1b0:	428b      	cmp	r3, r1
    c1b2:	d301      	bcc.n	c1b8 <__aeabi_idiv+0x16c>
    c1b4:	014b      	lsls	r3, r1, #5
    c1b6:	1ac0      	subs	r0, r0, r3
    c1b8:	4152      	adcs	r2, r2
    c1ba:	0903      	lsrs	r3, r0, #4
    c1bc:	428b      	cmp	r3, r1
    c1be:	d301      	bcc.n	c1c4 <__aeabi_idiv+0x178>
    c1c0:	010b      	lsls	r3, r1, #4
    c1c2:	1ac0      	subs	r0, r0, r3
    c1c4:	4152      	adcs	r2, r2
    c1c6:	08c3      	lsrs	r3, r0, #3
    c1c8:	428b      	cmp	r3, r1
    c1ca:	d301      	bcc.n	c1d0 <__aeabi_idiv+0x184>
    c1cc:	00cb      	lsls	r3, r1, #3
    c1ce:	1ac0      	subs	r0, r0, r3
    c1d0:	4152      	adcs	r2, r2
    c1d2:	0883      	lsrs	r3, r0, #2
    c1d4:	428b      	cmp	r3, r1
    c1d6:	d301      	bcc.n	c1dc <__aeabi_idiv+0x190>
    c1d8:	008b      	lsls	r3, r1, #2
    c1da:	1ac0      	subs	r0, r0, r3
    c1dc:	4152      	adcs	r2, r2
    c1de:	d2d9      	bcs.n	c194 <__aeabi_idiv+0x148>
    c1e0:	0843      	lsrs	r3, r0, #1
    c1e2:	428b      	cmp	r3, r1
    c1e4:	d301      	bcc.n	c1ea <__aeabi_idiv+0x19e>
    c1e6:	004b      	lsls	r3, r1, #1
    c1e8:	1ac0      	subs	r0, r0, r3
    c1ea:	4152      	adcs	r2, r2
    c1ec:	1a41      	subs	r1, r0, r1
    c1ee:	d200      	bcs.n	c1f2 <__aeabi_idiv+0x1a6>
    c1f0:	4601      	mov	r1, r0
    c1f2:	4663      	mov	r3, ip
    c1f4:	4152      	adcs	r2, r2
    c1f6:	105b      	asrs	r3, r3, #1
    c1f8:	4610      	mov	r0, r2
    c1fa:	d301      	bcc.n	c200 <__aeabi_idiv+0x1b4>
    c1fc:	4240      	negs	r0, r0
    c1fe:	2b00      	cmp	r3, #0
    c200:	d500      	bpl.n	c204 <__aeabi_idiv+0x1b8>
    c202:	4249      	negs	r1, r1
    c204:	4770      	bx	lr
    c206:	4663      	mov	r3, ip
    c208:	105b      	asrs	r3, r3, #1
    c20a:	d300      	bcc.n	c20e <__aeabi_idiv+0x1c2>
    c20c:	4240      	negs	r0, r0
    c20e:	b501      	push	{r0, lr}
    c210:	2000      	movs	r0, #0
    c212:	f000 f805 	bl	c220 <__aeabi_idiv0>
    c216:	bd02      	pop	{r1, pc}

0000c218 <__aeabi_idivmod>:
    c218:	2900      	cmp	r1, #0
    c21a:	d0f8      	beq.n	c20e <__aeabi_idiv+0x1c2>
    c21c:	e716      	b.n	c04c <__aeabi_idiv>
    c21e:	4770      	bx	lr

0000c220 <__aeabi_idiv0>:
    c220:	4770      	bx	lr
    c222:	46c0      	nop			; (mov r8, r8)

0000c224 <__aeabi_lmul>:
    c224:	b5f0      	push	{r4, r5, r6, r7, lr}
    c226:	464f      	mov	r7, r9
    c228:	4646      	mov	r6, r8
    c22a:	b4c0      	push	{r6, r7}
    c22c:	0416      	lsls	r6, r2, #16
    c22e:	0c36      	lsrs	r6, r6, #16
    c230:	4699      	mov	r9, r3
    c232:	0033      	movs	r3, r6
    c234:	0405      	lsls	r5, r0, #16
    c236:	0c2c      	lsrs	r4, r5, #16
    c238:	0c07      	lsrs	r7, r0, #16
    c23a:	0c15      	lsrs	r5, r2, #16
    c23c:	4363      	muls	r3, r4
    c23e:	437e      	muls	r6, r7
    c240:	436f      	muls	r7, r5
    c242:	4365      	muls	r5, r4
    c244:	0c1c      	lsrs	r4, r3, #16
    c246:	19ad      	adds	r5, r5, r6
    c248:	1964      	adds	r4, r4, r5
    c24a:	469c      	mov	ip, r3
    c24c:	42a6      	cmp	r6, r4
    c24e:	d903      	bls.n	c258 <__aeabi_lmul+0x34>
    c250:	2380      	movs	r3, #128	; 0x80
    c252:	025b      	lsls	r3, r3, #9
    c254:	4698      	mov	r8, r3
    c256:	4447      	add	r7, r8
    c258:	4663      	mov	r3, ip
    c25a:	0c25      	lsrs	r5, r4, #16
    c25c:	19ef      	adds	r7, r5, r7
    c25e:	041d      	lsls	r5, r3, #16
    c260:	464b      	mov	r3, r9
    c262:	434a      	muls	r2, r1
    c264:	4343      	muls	r3, r0
    c266:	0c2d      	lsrs	r5, r5, #16
    c268:	0424      	lsls	r4, r4, #16
    c26a:	1964      	adds	r4, r4, r5
    c26c:	1899      	adds	r1, r3, r2
    c26e:	19c9      	adds	r1, r1, r7
    c270:	0020      	movs	r0, r4
    c272:	bc0c      	pop	{r2, r3}
    c274:	4690      	mov	r8, r2
    c276:	4699      	mov	r9, r3
    c278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c27a:	46c0      	nop			; (mov r8, r8)

0000c27c <__libc_init_array>:
    c27c:	4b0e      	ldr	r3, [pc, #56]	; (c2b8 <__libc_init_array+0x3c>)
    c27e:	b570      	push	{r4, r5, r6, lr}
    c280:	2500      	movs	r5, #0
    c282:	001e      	movs	r6, r3
    c284:	4c0d      	ldr	r4, [pc, #52]	; (c2bc <__libc_init_array+0x40>)
    c286:	1ae4      	subs	r4, r4, r3
    c288:	10a4      	asrs	r4, r4, #2
    c28a:	42a5      	cmp	r5, r4
    c28c:	d004      	beq.n	c298 <__libc_init_array+0x1c>
    c28e:	00ab      	lsls	r3, r5, #2
    c290:	58f3      	ldr	r3, [r6, r3]
    c292:	4798      	blx	r3
    c294:	3501      	adds	r5, #1
    c296:	e7f8      	b.n	c28a <__libc_init_array+0xe>
    c298:	f002 fd1e 	bl	ecd8 <_init>
    c29c:	4b08      	ldr	r3, [pc, #32]	; (c2c0 <__libc_init_array+0x44>)
    c29e:	2500      	movs	r5, #0
    c2a0:	001e      	movs	r6, r3
    c2a2:	4c08      	ldr	r4, [pc, #32]	; (c2c4 <__libc_init_array+0x48>)
    c2a4:	1ae4      	subs	r4, r4, r3
    c2a6:	10a4      	asrs	r4, r4, #2
    c2a8:	42a5      	cmp	r5, r4
    c2aa:	d004      	beq.n	c2b6 <__libc_init_array+0x3a>
    c2ac:	00ab      	lsls	r3, r5, #2
    c2ae:	58f3      	ldr	r3, [r6, r3]
    c2b0:	4798      	blx	r3
    c2b2:	3501      	adds	r5, #1
    c2b4:	e7f8      	b.n	c2a8 <__libc_init_array+0x2c>
    c2b6:	bd70      	pop	{r4, r5, r6, pc}
    c2b8:	0000ece4 	.word	0x0000ece4
    c2bc:	0000ece4 	.word	0x0000ece4
    c2c0:	0000ece4 	.word	0x0000ece4
    c2c4:	0000ece8 	.word	0x0000ece8

0000c2c8 <malloc>:
    c2c8:	b510      	push	{r4, lr}
    c2ca:	4b03      	ldr	r3, [pc, #12]	; (c2d8 <malloc+0x10>)
    c2cc:	0001      	movs	r1, r0
    c2ce:	6818      	ldr	r0, [r3, #0]
    c2d0:	f000 f870 	bl	c3b4 <_malloc_r>
    c2d4:	bd10      	pop	{r4, pc}
    c2d6:	46c0      	nop			; (mov r8, r8)
    c2d8:	20000080 	.word	0x20000080

0000c2dc <memcpy>:
    c2dc:	2300      	movs	r3, #0
    c2de:	b510      	push	{r4, lr}
    c2e0:	429a      	cmp	r2, r3
    c2e2:	d003      	beq.n	c2ec <memcpy+0x10>
    c2e4:	5ccc      	ldrb	r4, [r1, r3]
    c2e6:	54c4      	strb	r4, [r0, r3]
    c2e8:	3301      	adds	r3, #1
    c2ea:	e7f9      	b.n	c2e0 <memcpy+0x4>
    c2ec:	bd10      	pop	{r4, pc}

0000c2ee <memmove>:
    c2ee:	b510      	push	{r4, lr}
    c2f0:	4288      	cmp	r0, r1
    c2f2:	d902      	bls.n	c2fa <memmove+0xc>
    c2f4:	188b      	adds	r3, r1, r2
    c2f6:	4298      	cmp	r0, r3
    c2f8:	d301      	bcc.n	c2fe <memmove+0x10>
    c2fa:	2300      	movs	r3, #0
    c2fc:	e005      	b.n	c30a <memmove+0x1c>
    c2fe:	1a9b      	subs	r3, r3, r2
    c300:	3a01      	subs	r2, #1
    c302:	d308      	bcc.n	c316 <memmove+0x28>
    c304:	5c99      	ldrb	r1, [r3, r2]
    c306:	5481      	strb	r1, [r0, r2]
    c308:	e7fa      	b.n	c300 <memmove+0x12>
    c30a:	4293      	cmp	r3, r2
    c30c:	d003      	beq.n	c316 <memmove+0x28>
    c30e:	5ccc      	ldrb	r4, [r1, r3]
    c310:	54c4      	strb	r4, [r0, r3]
    c312:	3301      	adds	r3, #1
    c314:	e7f9      	b.n	c30a <memmove+0x1c>
    c316:	bd10      	pop	{r4, pc}

0000c318 <memset>:
    c318:	0003      	movs	r3, r0
    c31a:	1882      	adds	r2, r0, r2
    c31c:	4293      	cmp	r3, r2
    c31e:	d002      	beq.n	c326 <memset+0xe>
    c320:	7019      	strb	r1, [r3, #0]
    c322:	3301      	adds	r3, #1
    c324:	e7fa      	b.n	c31c <memset+0x4>
    c326:	4770      	bx	lr

0000c328 <_free_r>:
    c328:	b530      	push	{r4, r5, lr}
    c32a:	2900      	cmp	r1, #0
    c32c:	d03e      	beq.n	c3ac <_free_r+0x84>
    c32e:	3904      	subs	r1, #4
    c330:	680b      	ldr	r3, [r1, #0]
    c332:	2b00      	cmp	r3, #0
    c334:	da00      	bge.n	c338 <_free_r+0x10>
    c336:	18c9      	adds	r1, r1, r3
    c338:	4a1d      	ldr	r2, [pc, #116]	; (c3b0 <_free_r+0x88>)
    c33a:	6813      	ldr	r3, [r2, #0]
    c33c:	0014      	movs	r4, r2
    c33e:	2b00      	cmp	r3, #0
    c340:	d102      	bne.n	c348 <_free_r+0x20>
    c342:	604b      	str	r3, [r1, #4]
    c344:	6011      	str	r1, [r2, #0]
    c346:	e031      	b.n	c3ac <_free_r+0x84>
    c348:	428b      	cmp	r3, r1
    c34a:	d90d      	bls.n	c368 <_free_r+0x40>
    c34c:	680a      	ldr	r2, [r1, #0]
    c34e:	1888      	adds	r0, r1, r2
    c350:	4283      	cmp	r3, r0
    c352:	d103      	bne.n	c35c <_free_r+0x34>
    c354:	6818      	ldr	r0, [r3, #0]
    c356:	685b      	ldr	r3, [r3, #4]
    c358:	1882      	adds	r2, r0, r2
    c35a:	600a      	str	r2, [r1, #0]
    c35c:	604b      	str	r3, [r1, #4]
    c35e:	6021      	str	r1, [r4, #0]
    c360:	e024      	b.n	c3ac <_free_r+0x84>
    c362:	428a      	cmp	r2, r1
    c364:	d803      	bhi.n	c36e <_free_r+0x46>
    c366:	0013      	movs	r3, r2
    c368:	685a      	ldr	r2, [r3, #4]
    c36a:	2a00      	cmp	r2, #0
    c36c:	d1f9      	bne.n	c362 <_free_r+0x3a>
    c36e:	681d      	ldr	r5, [r3, #0]
    c370:	195c      	adds	r4, r3, r5
    c372:	428c      	cmp	r4, r1
    c374:	d10b      	bne.n	c38e <_free_r+0x66>
    c376:	6809      	ldr	r1, [r1, #0]
    c378:	1869      	adds	r1, r5, r1
    c37a:	1858      	adds	r0, r3, r1
    c37c:	6019      	str	r1, [r3, #0]
    c37e:	4282      	cmp	r2, r0
    c380:	d114      	bne.n	c3ac <_free_r+0x84>
    c382:	6810      	ldr	r0, [r2, #0]
    c384:	6852      	ldr	r2, [r2, #4]
    c386:	1841      	adds	r1, r0, r1
    c388:	6019      	str	r1, [r3, #0]
    c38a:	605a      	str	r2, [r3, #4]
    c38c:	e00e      	b.n	c3ac <_free_r+0x84>
    c38e:	428c      	cmp	r4, r1
    c390:	d902      	bls.n	c398 <_free_r+0x70>
    c392:	230c      	movs	r3, #12
    c394:	6003      	str	r3, [r0, #0]
    c396:	e009      	b.n	c3ac <_free_r+0x84>
    c398:	6808      	ldr	r0, [r1, #0]
    c39a:	180c      	adds	r4, r1, r0
    c39c:	42a2      	cmp	r2, r4
    c39e:	d103      	bne.n	c3a8 <_free_r+0x80>
    c3a0:	6814      	ldr	r4, [r2, #0]
    c3a2:	6852      	ldr	r2, [r2, #4]
    c3a4:	1820      	adds	r0, r4, r0
    c3a6:	6008      	str	r0, [r1, #0]
    c3a8:	604a      	str	r2, [r1, #4]
    c3aa:	6059      	str	r1, [r3, #4]
    c3ac:	bd30      	pop	{r4, r5, pc}
    c3ae:	46c0      	nop			; (mov r8, r8)
    c3b0:	200002cc 	.word	0x200002cc

0000c3b4 <_malloc_r>:
    c3b4:	2303      	movs	r3, #3
    c3b6:	b570      	push	{r4, r5, r6, lr}
    c3b8:	1ccd      	adds	r5, r1, #3
    c3ba:	439d      	bics	r5, r3
    c3bc:	3508      	adds	r5, #8
    c3be:	0006      	movs	r6, r0
    c3c0:	2d0c      	cmp	r5, #12
    c3c2:	d201      	bcs.n	c3c8 <_malloc_r+0x14>
    c3c4:	250c      	movs	r5, #12
    c3c6:	e005      	b.n	c3d4 <_malloc_r+0x20>
    c3c8:	2d00      	cmp	r5, #0
    c3ca:	da03      	bge.n	c3d4 <_malloc_r+0x20>
    c3cc:	230c      	movs	r3, #12
    c3ce:	2000      	movs	r0, #0
    c3d0:	6033      	str	r3, [r6, #0]
    c3d2:	e040      	b.n	c456 <_malloc_r+0xa2>
    c3d4:	42a9      	cmp	r1, r5
    c3d6:	d8f9      	bhi.n	c3cc <_malloc_r+0x18>
    c3d8:	4b1f      	ldr	r3, [pc, #124]	; (c458 <_malloc_r+0xa4>)
    c3da:	681c      	ldr	r4, [r3, #0]
    c3dc:	001a      	movs	r2, r3
    c3de:	0021      	movs	r1, r4
    c3e0:	2900      	cmp	r1, #0
    c3e2:	d013      	beq.n	c40c <_malloc_r+0x58>
    c3e4:	680b      	ldr	r3, [r1, #0]
    c3e6:	1b5b      	subs	r3, r3, r5
    c3e8:	d40d      	bmi.n	c406 <_malloc_r+0x52>
    c3ea:	2b0b      	cmp	r3, #11
    c3ec:	d902      	bls.n	c3f4 <_malloc_r+0x40>
    c3ee:	600b      	str	r3, [r1, #0]
    c3f0:	18cc      	adds	r4, r1, r3
    c3f2:	e01e      	b.n	c432 <_malloc_r+0x7e>
    c3f4:	428c      	cmp	r4, r1
    c3f6:	d102      	bne.n	c3fe <_malloc_r+0x4a>
    c3f8:	6863      	ldr	r3, [r4, #4]
    c3fa:	6013      	str	r3, [r2, #0]
    c3fc:	e01a      	b.n	c434 <_malloc_r+0x80>
    c3fe:	684b      	ldr	r3, [r1, #4]
    c400:	6063      	str	r3, [r4, #4]
    c402:	000c      	movs	r4, r1
    c404:	e016      	b.n	c434 <_malloc_r+0x80>
    c406:	000c      	movs	r4, r1
    c408:	6849      	ldr	r1, [r1, #4]
    c40a:	e7e9      	b.n	c3e0 <_malloc_r+0x2c>
    c40c:	4c13      	ldr	r4, [pc, #76]	; (c45c <_malloc_r+0xa8>)
    c40e:	6823      	ldr	r3, [r4, #0]
    c410:	2b00      	cmp	r3, #0
    c412:	d103      	bne.n	c41c <_malloc_r+0x68>
    c414:	0030      	movs	r0, r6
    c416:	f000 f8bd 	bl	c594 <_sbrk_r>
    c41a:	6020      	str	r0, [r4, #0]
    c41c:	0029      	movs	r1, r5
    c41e:	0030      	movs	r0, r6
    c420:	f000 f8b8 	bl	c594 <_sbrk_r>
    c424:	1c43      	adds	r3, r0, #1
    c426:	d0d1      	beq.n	c3cc <_malloc_r+0x18>
    c428:	2303      	movs	r3, #3
    c42a:	1cc4      	adds	r4, r0, #3
    c42c:	439c      	bics	r4, r3
    c42e:	42a0      	cmp	r0, r4
    c430:	d10a      	bne.n	c448 <_malloc_r+0x94>
    c432:	6025      	str	r5, [r4, #0]
    c434:	0020      	movs	r0, r4
    c436:	2207      	movs	r2, #7
    c438:	300b      	adds	r0, #11
    c43a:	1d23      	adds	r3, r4, #4
    c43c:	4390      	bics	r0, r2
    c43e:	1ac3      	subs	r3, r0, r3
    c440:	d009      	beq.n	c456 <_malloc_r+0xa2>
    c442:	425a      	negs	r2, r3
    c444:	50e2      	str	r2, [r4, r3]
    c446:	e006      	b.n	c456 <_malloc_r+0xa2>
    c448:	1a21      	subs	r1, r4, r0
    c44a:	0030      	movs	r0, r6
    c44c:	f000 f8a2 	bl	c594 <_sbrk_r>
    c450:	1c43      	adds	r3, r0, #1
    c452:	d1ee      	bne.n	c432 <_malloc_r+0x7e>
    c454:	e7ba      	b.n	c3cc <_malloc_r+0x18>
    c456:	bd70      	pop	{r4, r5, r6, pc}
    c458:	200002cc 	.word	0x200002cc
    c45c:	200002c8 	.word	0x200002c8

0000c460 <iprintf>:
    c460:	b40f      	push	{r0, r1, r2, r3}
    c462:	4b0b      	ldr	r3, [pc, #44]	; (c490 <iprintf+0x30>)
    c464:	b513      	push	{r0, r1, r4, lr}
    c466:	681c      	ldr	r4, [r3, #0]
    c468:	2c00      	cmp	r4, #0
    c46a:	d005      	beq.n	c478 <iprintf+0x18>
    c46c:	69a3      	ldr	r3, [r4, #24]
    c46e:	2b00      	cmp	r3, #0
    c470:	d102      	bne.n	c478 <iprintf+0x18>
    c472:	0020      	movs	r0, r4
    c474:	f000 fb6a 	bl	cb4c <__sinit>
    c478:	ab05      	add	r3, sp, #20
    c47a:	9a04      	ldr	r2, [sp, #16]
    c47c:	68a1      	ldr	r1, [r4, #8]
    c47e:	0020      	movs	r0, r4
    c480:	9301      	str	r3, [sp, #4]
    c482:	f000 fde3 	bl	d04c <_vfiprintf_r>
    c486:	bc16      	pop	{r1, r2, r4}
    c488:	bc08      	pop	{r3}
    c48a:	b004      	add	sp, #16
    c48c:	4718      	bx	r3
    c48e:	46c0      	nop			; (mov r8, r8)
    c490:	20000080 	.word	0x20000080

0000c494 <putchar>:
    c494:	4b08      	ldr	r3, [pc, #32]	; (c4b8 <putchar+0x24>)
    c496:	b570      	push	{r4, r5, r6, lr}
    c498:	681c      	ldr	r4, [r3, #0]
    c49a:	0005      	movs	r5, r0
    c49c:	2c00      	cmp	r4, #0
    c49e:	d005      	beq.n	c4ac <putchar+0x18>
    c4a0:	69a3      	ldr	r3, [r4, #24]
    c4a2:	2b00      	cmp	r3, #0
    c4a4:	d102      	bne.n	c4ac <putchar+0x18>
    c4a6:	0020      	movs	r0, r4
    c4a8:	f000 fb50 	bl	cb4c <__sinit>
    c4ac:	0029      	movs	r1, r5
    c4ae:	68a2      	ldr	r2, [r4, #8]
    c4b0:	0020      	movs	r0, r4
    c4b2:	f001 f877 	bl	d5a4 <_putc_r>
    c4b6:	bd70      	pop	{r4, r5, r6, pc}
    c4b8:	20000080 	.word	0x20000080

0000c4bc <_puts_r>:
    c4bc:	b570      	push	{r4, r5, r6, lr}
    c4be:	0005      	movs	r5, r0
    c4c0:	000e      	movs	r6, r1
    c4c2:	2800      	cmp	r0, #0
    c4c4:	d004      	beq.n	c4d0 <_puts_r+0x14>
    c4c6:	6983      	ldr	r3, [r0, #24]
    c4c8:	2b00      	cmp	r3, #0
    c4ca:	d101      	bne.n	c4d0 <_puts_r+0x14>
    c4cc:	f000 fb3e 	bl	cb4c <__sinit>
    c4d0:	69ab      	ldr	r3, [r5, #24]
    c4d2:	68ac      	ldr	r4, [r5, #8]
    c4d4:	2b00      	cmp	r3, #0
    c4d6:	d102      	bne.n	c4de <_puts_r+0x22>
    c4d8:	0028      	movs	r0, r5
    c4da:	f000 fb37 	bl	cb4c <__sinit>
    c4de:	4b25      	ldr	r3, [pc, #148]	; (c574 <_puts_r+0xb8>)
    c4e0:	429c      	cmp	r4, r3
    c4e2:	d101      	bne.n	c4e8 <_puts_r+0x2c>
    c4e4:	686c      	ldr	r4, [r5, #4]
    c4e6:	e008      	b.n	c4fa <_puts_r+0x3e>
    c4e8:	4b23      	ldr	r3, [pc, #140]	; (c578 <_puts_r+0xbc>)
    c4ea:	429c      	cmp	r4, r3
    c4ec:	d101      	bne.n	c4f2 <_puts_r+0x36>
    c4ee:	68ac      	ldr	r4, [r5, #8]
    c4f0:	e003      	b.n	c4fa <_puts_r+0x3e>
    c4f2:	4b22      	ldr	r3, [pc, #136]	; (c57c <_puts_r+0xc0>)
    c4f4:	429c      	cmp	r4, r3
    c4f6:	d100      	bne.n	c4fa <_puts_r+0x3e>
    c4f8:	68ec      	ldr	r4, [r5, #12]
    c4fa:	89a3      	ldrh	r3, [r4, #12]
    c4fc:	071b      	lsls	r3, r3, #28
    c4fe:	d502      	bpl.n	c506 <_puts_r+0x4a>
    c500:	6923      	ldr	r3, [r4, #16]
    c502:	2b00      	cmp	r3, #0
    c504:	d111      	bne.n	c52a <_puts_r+0x6e>
    c506:	0021      	movs	r1, r4
    c508:	0028      	movs	r0, r5
    c50a:	f000 f9b5 	bl	c878 <__swsetup_r>
    c50e:	2800      	cmp	r0, #0
    c510:	d00b      	beq.n	c52a <_puts_r+0x6e>
    c512:	2001      	movs	r0, #1
    c514:	4240      	negs	r0, r0
    c516:	e02b      	b.n	c570 <_puts_r+0xb4>
    c518:	3b01      	subs	r3, #1
    c51a:	3601      	adds	r6, #1
    c51c:	60a3      	str	r3, [r4, #8]
    c51e:	2b00      	cmp	r3, #0
    c520:	db08      	blt.n	c534 <_puts_r+0x78>
    c522:	6823      	ldr	r3, [r4, #0]
    c524:	1c5a      	adds	r2, r3, #1
    c526:	6022      	str	r2, [r4, #0]
    c528:	7019      	strb	r1, [r3, #0]
    c52a:	7831      	ldrb	r1, [r6, #0]
    c52c:	68a3      	ldr	r3, [r4, #8]
    c52e:	2900      	cmp	r1, #0
    c530:	d1f2      	bne.n	c518 <_puts_r+0x5c>
    c532:	e00b      	b.n	c54c <_puts_r+0x90>
    c534:	69a2      	ldr	r2, [r4, #24]
    c536:	4293      	cmp	r3, r2
    c538:	db01      	blt.n	c53e <_puts_r+0x82>
    c53a:	290a      	cmp	r1, #10
    c53c:	d1f1      	bne.n	c522 <_puts_r+0x66>
    c53e:	0022      	movs	r2, r4
    c540:	0028      	movs	r0, r5
    c542:	f000 f941 	bl	c7c8 <__swbuf_r>
    c546:	1c43      	adds	r3, r0, #1
    c548:	d1ef      	bne.n	c52a <_puts_r+0x6e>
    c54a:	e7e2      	b.n	c512 <_puts_r+0x56>
    c54c:	3b01      	subs	r3, #1
    c54e:	60a3      	str	r3, [r4, #8]
    c550:	2b00      	cmp	r3, #0
    c552:	da08      	bge.n	c566 <_puts_r+0xaa>
    c554:	0022      	movs	r2, r4
    c556:	310a      	adds	r1, #10
    c558:	0028      	movs	r0, r5
    c55a:	f000 f935 	bl	c7c8 <__swbuf_r>
    c55e:	1c43      	adds	r3, r0, #1
    c560:	d0d7      	beq.n	c512 <_puts_r+0x56>
    c562:	200a      	movs	r0, #10
    c564:	e004      	b.n	c570 <_puts_r+0xb4>
    c566:	200a      	movs	r0, #10
    c568:	6823      	ldr	r3, [r4, #0]
    c56a:	1c5a      	adds	r2, r3, #1
    c56c:	6022      	str	r2, [r4, #0]
    c56e:	7018      	strb	r0, [r3, #0]
    c570:	bd70      	pop	{r4, r5, r6, pc}
    c572:	46c0      	nop			; (mov r8, r8)
    c574:	0000ec44 	.word	0x0000ec44
    c578:	0000ec64 	.word	0x0000ec64
    c57c:	0000ec84 	.word	0x0000ec84

0000c580 <puts>:
    c580:	b510      	push	{r4, lr}
    c582:	4b03      	ldr	r3, [pc, #12]	; (c590 <puts+0x10>)
    c584:	0001      	movs	r1, r0
    c586:	6818      	ldr	r0, [r3, #0]
    c588:	f7ff ff98 	bl	c4bc <_puts_r>
    c58c:	bd10      	pop	{r4, pc}
    c58e:	46c0      	nop			; (mov r8, r8)
    c590:	20000080 	.word	0x20000080

0000c594 <_sbrk_r>:
    c594:	2300      	movs	r3, #0
    c596:	b570      	push	{r4, r5, r6, lr}
    c598:	4c06      	ldr	r4, [pc, #24]	; (c5b4 <_sbrk_r+0x20>)
    c59a:	0005      	movs	r5, r0
    c59c:	0008      	movs	r0, r1
    c59e:	6023      	str	r3, [r4, #0]
    c5a0:	f7fd fd3a 	bl	a018 <_sbrk>
    c5a4:	1c43      	adds	r3, r0, #1
    c5a6:	d103      	bne.n	c5b0 <_sbrk_r+0x1c>
    c5a8:	6823      	ldr	r3, [r4, #0]
    c5aa:	2b00      	cmp	r3, #0
    c5ac:	d000      	beq.n	c5b0 <_sbrk_r+0x1c>
    c5ae:	602b      	str	r3, [r5, #0]
    c5b0:	bd70      	pop	{r4, r5, r6, pc}
    c5b2:	46c0      	nop			; (mov r8, r8)
    c5b4:	200004d0 	.word	0x200004d0

0000c5b8 <setbuf>:
    c5b8:	424a      	negs	r2, r1
    c5ba:	414a      	adcs	r2, r1
    c5bc:	2380      	movs	r3, #128	; 0x80
    c5be:	b510      	push	{r4, lr}
    c5c0:	0052      	lsls	r2, r2, #1
    c5c2:	00db      	lsls	r3, r3, #3
    c5c4:	f000 f802 	bl	c5cc <setvbuf>
    c5c8:	bd10      	pop	{r4, pc}
	...

0000c5cc <setvbuf>:
    c5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5ce:	001d      	movs	r5, r3
    c5d0:	4b51      	ldr	r3, [pc, #324]	; (c718 <setvbuf+0x14c>)
    c5d2:	b085      	sub	sp, #20
    c5d4:	681e      	ldr	r6, [r3, #0]
    c5d6:	0004      	movs	r4, r0
    c5d8:	000f      	movs	r7, r1
    c5da:	9200      	str	r2, [sp, #0]
    c5dc:	2e00      	cmp	r6, #0
    c5de:	d005      	beq.n	c5ec <setvbuf+0x20>
    c5e0:	69b3      	ldr	r3, [r6, #24]
    c5e2:	2b00      	cmp	r3, #0
    c5e4:	d102      	bne.n	c5ec <setvbuf+0x20>
    c5e6:	0030      	movs	r0, r6
    c5e8:	f000 fab0 	bl	cb4c <__sinit>
    c5ec:	4b4b      	ldr	r3, [pc, #300]	; (c71c <setvbuf+0x150>)
    c5ee:	429c      	cmp	r4, r3
    c5f0:	d101      	bne.n	c5f6 <setvbuf+0x2a>
    c5f2:	6874      	ldr	r4, [r6, #4]
    c5f4:	e008      	b.n	c608 <setvbuf+0x3c>
    c5f6:	4b4a      	ldr	r3, [pc, #296]	; (c720 <setvbuf+0x154>)
    c5f8:	429c      	cmp	r4, r3
    c5fa:	d101      	bne.n	c600 <setvbuf+0x34>
    c5fc:	68b4      	ldr	r4, [r6, #8]
    c5fe:	e003      	b.n	c608 <setvbuf+0x3c>
    c600:	4b48      	ldr	r3, [pc, #288]	; (c724 <setvbuf+0x158>)
    c602:	429c      	cmp	r4, r3
    c604:	d100      	bne.n	c608 <setvbuf+0x3c>
    c606:	68f4      	ldr	r4, [r6, #12]
    c608:	9b00      	ldr	r3, [sp, #0]
    c60a:	2b02      	cmp	r3, #2
    c60c:	d005      	beq.n	c61a <setvbuf+0x4e>
    c60e:	2b01      	cmp	r3, #1
    c610:	d900      	bls.n	c614 <setvbuf+0x48>
    c612:	e07c      	b.n	c70e <setvbuf+0x142>
    c614:	2d00      	cmp	r5, #0
    c616:	da00      	bge.n	c61a <setvbuf+0x4e>
    c618:	e079      	b.n	c70e <setvbuf+0x142>
    c61a:	0021      	movs	r1, r4
    c61c:	0030      	movs	r0, r6
    c61e:	f000 fa27 	bl	ca70 <_fflush_r>
    c622:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c624:	2900      	cmp	r1, #0
    c626:	d008      	beq.n	c63a <setvbuf+0x6e>
    c628:	0023      	movs	r3, r4
    c62a:	3344      	adds	r3, #68	; 0x44
    c62c:	4299      	cmp	r1, r3
    c62e:	d002      	beq.n	c636 <setvbuf+0x6a>
    c630:	0030      	movs	r0, r6
    c632:	f7ff fe79 	bl	c328 <_free_r>
    c636:	2300      	movs	r3, #0
    c638:	6363      	str	r3, [r4, #52]	; 0x34
    c63a:	2300      	movs	r3, #0
    c63c:	61a3      	str	r3, [r4, #24]
    c63e:	6063      	str	r3, [r4, #4]
    c640:	89a3      	ldrh	r3, [r4, #12]
    c642:	061b      	lsls	r3, r3, #24
    c644:	d503      	bpl.n	c64e <setvbuf+0x82>
    c646:	6921      	ldr	r1, [r4, #16]
    c648:	0030      	movs	r0, r6
    c64a:	f7ff fe6d 	bl	c328 <_free_r>
    c64e:	89a2      	ldrh	r2, [r4, #12]
    c650:	4b35      	ldr	r3, [pc, #212]	; (c728 <setvbuf+0x15c>)
    c652:	4013      	ands	r3, r2
    c654:	81a3      	strh	r3, [r4, #12]
    c656:	9b00      	ldr	r3, [sp, #0]
    c658:	2b02      	cmp	r3, #2
    c65a:	d021      	beq.n	c6a0 <setvbuf+0xd4>
    c65c:	ab03      	add	r3, sp, #12
    c65e:	aa02      	add	r2, sp, #8
    c660:	0021      	movs	r1, r4
    c662:	0030      	movs	r0, r6
    c664:	f000 fb06 	bl	cc74 <__swhatbuf_r>
    c668:	89a3      	ldrh	r3, [r4, #12]
    c66a:	4318      	orrs	r0, r3
    c66c:	81a0      	strh	r0, [r4, #12]
    c66e:	2d00      	cmp	r5, #0
    c670:	d101      	bne.n	c676 <setvbuf+0xaa>
    c672:	9d02      	ldr	r5, [sp, #8]
    c674:	e001      	b.n	c67a <setvbuf+0xae>
    c676:	2f00      	cmp	r7, #0
    c678:	d125      	bne.n	c6c6 <setvbuf+0xfa>
    c67a:	0028      	movs	r0, r5
    c67c:	f7ff fe24 	bl	c2c8 <malloc>
    c680:	9501      	str	r5, [sp, #4]
    c682:	1e07      	subs	r7, r0, #0
    c684:	d11a      	bne.n	c6bc <setvbuf+0xf0>
    c686:	9b02      	ldr	r3, [sp, #8]
    c688:	9301      	str	r3, [sp, #4]
    c68a:	42ab      	cmp	r3, r5
    c68c:	d102      	bne.n	c694 <setvbuf+0xc8>
    c68e:	2001      	movs	r0, #1
    c690:	4240      	negs	r0, r0
    c692:	e006      	b.n	c6a2 <setvbuf+0xd6>
    c694:	9801      	ldr	r0, [sp, #4]
    c696:	f7ff fe17 	bl	c2c8 <malloc>
    c69a:	1e07      	subs	r7, r0, #0
    c69c:	d10e      	bne.n	c6bc <setvbuf+0xf0>
    c69e:	e7f6      	b.n	c68e <setvbuf+0xc2>
    c6a0:	2000      	movs	r0, #0
    c6a2:	2202      	movs	r2, #2
    c6a4:	89a3      	ldrh	r3, [r4, #12]
    c6a6:	4313      	orrs	r3, r2
    c6a8:	81a3      	strh	r3, [r4, #12]
    c6aa:	2300      	movs	r3, #0
    c6ac:	60a3      	str	r3, [r4, #8]
    c6ae:	0023      	movs	r3, r4
    c6b0:	3347      	adds	r3, #71	; 0x47
    c6b2:	6023      	str	r3, [r4, #0]
    c6b4:	6123      	str	r3, [r4, #16]
    c6b6:	2301      	movs	r3, #1
    c6b8:	6163      	str	r3, [r4, #20]
    c6ba:	e02a      	b.n	c712 <setvbuf+0x146>
    c6bc:	2280      	movs	r2, #128	; 0x80
    c6be:	89a3      	ldrh	r3, [r4, #12]
    c6c0:	9d01      	ldr	r5, [sp, #4]
    c6c2:	4313      	orrs	r3, r2
    c6c4:	81a3      	strh	r3, [r4, #12]
    c6c6:	69b3      	ldr	r3, [r6, #24]
    c6c8:	2b00      	cmp	r3, #0
    c6ca:	d102      	bne.n	c6d2 <setvbuf+0x106>
    c6cc:	0030      	movs	r0, r6
    c6ce:	f000 fa3d 	bl	cb4c <__sinit>
    c6d2:	9b00      	ldr	r3, [sp, #0]
    c6d4:	2b01      	cmp	r3, #1
    c6d6:	d103      	bne.n	c6e0 <setvbuf+0x114>
    c6d8:	89a3      	ldrh	r3, [r4, #12]
    c6da:	9a00      	ldr	r2, [sp, #0]
    c6dc:	431a      	orrs	r2, r3
    c6de:	81a2      	strh	r2, [r4, #12]
    c6e0:	2308      	movs	r3, #8
    c6e2:	89a2      	ldrh	r2, [r4, #12]
    c6e4:	6027      	str	r7, [r4, #0]
    c6e6:	4013      	ands	r3, r2
    c6e8:	6127      	str	r7, [r4, #16]
    c6ea:	6165      	str	r5, [r4, #20]
    c6ec:	1e18      	subs	r0, r3, #0
    c6ee:	d00c      	beq.n	c70a <setvbuf+0x13e>
    c6f0:	2301      	movs	r3, #1
    c6f2:	401a      	ands	r2, r3
    c6f4:	2300      	movs	r3, #0
    c6f6:	1e10      	subs	r0, r2, #0
    c6f8:	4298      	cmp	r0, r3
    c6fa:	d004      	beq.n	c706 <setvbuf+0x13a>
    c6fc:	426d      	negs	r5, r5
    c6fe:	60a3      	str	r3, [r4, #8]
    c700:	61a5      	str	r5, [r4, #24]
    c702:	0018      	movs	r0, r3
    c704:	e005      	b.n	c712 <setvbuf+0x146>
    c706:	60a5      	str	r5, [r4, #8]
    c708:	e003      	b.n	c712 <setvbuf+0x146>
    c70a:	60a3      	str	r3, [r4, #8]
    c70c:	e001      	b.n	c712 <setvbuf+0x146>
    c70e:	2001      	movs	r0, #1
    c710:	4240      	negs	r0, r0
    c712:	b005      	add	sp, #20
    c714:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c716:	46c0      	nop			; (mov r8, r8)
    c718:	20000080 	.word	0x20000080
    c71c:	0000ec44 	.word	0x0000ec44
    c720:	0000ec64 	.word	0x0000ec64
    c724:	0000ec84 	.word	0x0000ec84
    c728:	fffff35c 	.word	0xfffff35c

0000c72c <siprintf>:
    c72c:	b40e      	push	{r1, r2, r3}
    c72e:	b510      	push	{r4, lr}
    c730:	b09d      	sub	sp, #116	; 0x74
    c732:	a902      	add	r1, sp, #8
    c734:	9002      	str	r0, [sp, #8]
    c736:	6108      	str	r0, [r1, #16]
    c738:	480b      	ldr	r0, [pc, #44]	; (c768 <siprintf+0x3c>)
    c73a:	2482      	movs	r4, #130	; 0x82
    c73c:	6088      	str	r0, [r1, #8]
    c73e:	6148      	str	r0, [r1, #20]
    c740:	2001      	movs	r0, #1
    c742:	4240      	negs	r0, r0
    c744:	ab1f      	add	r3, sp, #124	; 0x7c
    c746:	81c8      	strh	r0, [r1, #14]
    c748:	4808      	ldr	r0, [pc, #32]	; (c76c <siprintf+0x40>)
    c74a:	cb04      	ldmia	r3!, {r2}
    c74c:	00a4      	lsls	r4, r4, #2
    c74e:	6800      	ldr	r0, [r0, #0]
    c750:	9301      	str	r3, [sp, #4]
    c752:	818c      	strh	r4, [r1, #12]
    c754:	f000 fb54 	bl	ce00 <_svfiprintf_r>
    c758:	2300      	movs	r3, #0
    c75a:	9a02      	ldr	r2, [sp, #8]
    c75c:	7013      	strb	r3, [r2, #0]
    c75e:	b01d      	add	sp, #116	; 0x74
    c760:	bc10      	pop	{r4}
    c762:	bc08      	pop	{r3}
    c764:	b003      	add	sp, #12
    c766:	4718      	bx	r3
    c768:	7fffffff 	.word	0x7fffffff
    c76c:	20000080 	.word	0x20000080

0000c770 <strcmp>:
    c770:	7802      	ldrb	r2, [r0, #0]
    c772:	780b      	ldrb	r3, [r1, #0]
    c774:	2a00      	cmp	r2, #0
    c776:	d003      	beq.n	c780 <strcmp+0x10>
    c778:	3001      	adds	r0, #1
    c77a:	3101      	adds	r1, #1
    c77c:	429a      	cmp	r2, r3
    c77e:	d0f7      	beq.n	c770 <strcmp>
    c780:	1ad0      	subs	r0, r2, r3
    c782:	4770      	bx	lr

0000c784 <strcpy>:
    c784:	1c03      	adds	r3, r0, #0
    c786:	780a      	ldrb	r2, [r1, #0]
    c788:	3101      	adds	r1, #1
    c78a:	701a      	strb	r2, [r3, #0]
    c78c:	3301      	adds	r3, #1
    c78e:	2a00      	cmp	r2, #0
    c790:	d1f9      	bne.n	c786 <strcpy+0x2>
    c792:	4770      	bx	lr

0000c794 <strlen>:
    c794:	2300      	movs	r3, #0
    c796:	5cc2      	ldrb	r2, [r0, r3]
    c798:	3301      	adds	r3, #1
    c79a:	2a00      	cmp	r2, #0
    c79c:	d1fb      	bne.n	c796 <strlen+0x2>
    c79e:	1e58      	subs	r0, r3, #1
    c7a0:	4770      	bx	lr

0000c7a2 <strncmp>:
    c7a2:	2300      	movs	r3, #0
    c7a4:	b530      	push	{r4, r5, lr}
    c7a6:	429a      	cmp	r2, r3
    c7a8:	d00b      	beq.n	c7c2 <strncmp+0x20>
    c7aa:	3a01      	subs	r2, #1
    c7ac:	5cc4      	ldrb	r4, [r0, r3]
    c7ae:	5ccd      	ldrb	r5, [r1, r3]
    c7b0:	42ac      	cmp	r4, r5
    c7b2:	d105      	bne.n	c7c0 <strncmp+0x1e>
    c7b4:	429a      	cmp	r2, r3
    c7b6:	d002      	beq.n	c7be <strncmp+0x1c>
    c7b8:	3301      	adds	r3, #1
    c7ba:	2c00      	cmp	r4, #0
    c7bc:	d1f6      	bne.n	c7ac <strncmp+0xa>
    c7be:	0025      	movs	r5, r4
    c7c0:	1b63      	subs	r3, r4, r5
    c7c2:	0018      	movs	r0, r3
    c7c4:	bd30      	pop	{r4, r5, pc}
	...

0000c7c8 <__swbuf_r>:
    c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7ca:	0005      	movs	r5, r0
    c7cc:	000f      	movs	r7, r1
    c7ce:	0014      	movs	r4, r2
    c7d0:	2800      	cmp	r0, #0
    c7d2:	d004      	beq.n	c7de <__swbuf_r+0x16>
    c7d4:	6983      	ldr	r3, [r0, #24]
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	d101      	bne.n	c7de <__swbuf_r+0x16>
    c7da:	f000 f9b7 	bl	cb4c <__sinit>
    c7de:	4b23      	ldr	r3, [pc, #140]	; (c86c <__swbuf_r+0xa4>)
    c7e0:	429c      	cmp	r4, r3
    c7e2:	d101      	bne.n	c7e8 <__swbuf_r+0x20>
    c7e4:	686c      	ldr	r4, [r5, #4]
    c7e6:	e008      	b.n	c7fa <__swbuf_r+0x32>
    c7e8:	4b21      	ldr	r3, [pc, #132]	; (c870 <__swbuf_r+0xa8>)
    c7ea:	429c      	cmp	r4, r3
    c7ec:	d101      	bne.n	c7f2 <__swbuf_r+0x2a>
    c7ee:	68ac      	ldr	r4, [r5, #8]
    c7f0:	e003      	b.n	c7fa <__swbuf_r+0x32>
    c7f2:	4b20      	ldr	r3, [pc, #128]	; (c874 <__swbuf_r+0xac>)
    c7f4:	429c      	cmp	r4, r3
    c7f6:	d100      	bne.n	c7fa <__swbuf_r+0x32>
    c7f8:	68ec      	ldr	r4, [r5, #12]
    c7fa:	69a3      	ldr	r3, [r4, #24]
    c7fc:	60a3      	str	r3, [r4, #8]
    c7fe:	89a3      	ldrh	r3, [r4, #12]
    c800:	071b      	lsls	r3, r3, #28
    c802:	d50a      	bpl.n	c81a <__swbuf_r+0x52>
    c804:	6923      	ldr	r3, [r4, #16]
    c806:	2b00      	cmp	r3, #0
    c808:	d007      	beq.n	c81a <__swbuf_r+0x52>
    c80a:	6823      	ldr	r3, [r4, #0]
    c80c:	6922      	ldr	r2, [r4, #16]
    c80e:	b2fe      	uxtb	r6, r7
    c810:	1a98      	subs	r0, r3, r2
    c812:	6963      	ldr	r3, [r4, #20]
    c814:	4298      	cmp	r0, r3
    c816:	db0f      	blt.n	c838 <__swbuf_r+0x70>
    c818:	e008      	b.n	c82c <__swbuf_r+0x64>
    c81a:	0021      	movs	r1, r4
    c81c:	0028      	movs	r0, r5
    c81e:	f000 f82b 	bl	c878 <__swsetup_r>
    c822:	2800      	cmp	r0, #0
    c824:	d0f1      	beq.n	c80a <__swbuf_r+0x42>
    c826:	2001      	movs	r0, #1
    c828:	4240      	negs	r0, r0
    c82a:	e01d      	b.n	c868 <__swbuf_r+0xa0>
    c82c:	0021      	movs	r1, r4
    c82e:	0028      	movs	r0, r5
    c830:	f000 f91e 	bl	ca70 <_fflush_r>
    c834:	2800      	cmp	r0, #0
    c836:	d1f6      	bne.n	c826 <__swbuf_r+0x5e>
    c838:	68a3      	ldr	r3, [r4, #8]
    c83a:	3001      	adds	r0, #1
    c83c:	3b01      	subs	r3, #1
    c83e:	60a3      	str	r3, [r4, #8]
    c840:	6823      	ldr	r3, [r4, #0]
    c842:	1c5a      	adds	r2, r3, #1
    c844:	6022      	str	r2, [r4, #0]
    c846:	701f      	strb	r7, [r3, #0]
    c848:	6963      	ldr	r3, [r4, #20]
    c84a:	4298      	cmp	r0, r3
    c84c:	d005      	beq.n	c85a <__swbuf_r+0x92>
    c84e:	89a3      	ldrh	r3, [r4, #12]
    c850:	0030      	movs	r0, r6
    c852:	07db      	lsls	r3, r3, #31
    c854:	d508      	bpl.n	c868 <__swbuf_r+0xa0>
    c856:	2e0a      	cmp	r6, #10
    c858:	d106      	bne.n	c868 <__swbuf_r+0xa0>
    c85a:	0021      	movs	r1, r4
    c85c:	0028      	movs	r0, r5
    c85e:	f000 f907 	bl	ca70 <_fflush_r>
    c862:	2800      	cmp	r0, #0
    c864:	d1df      	bne.n	c826 <__swbuf_r+0x5e>
    c866:	0030      	movs	r0, r6
    c868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c86a:	46c0      	nop			; (mov r8, r8)
    c86c:	0000ec44 	.word	0x0000ec44
    c870:	0000ec64 	.word	0x0000ec64
    c874:	0000ec84 	.word	0x0000ec84

0000c878 <__swsetup_r>:
    c878:	4b36      	ldr	r3, [pc, #216]	; (c954 <__swsetup_r+0xdc>)
    c87a:	b570      	push	{r4, r5, r6, lr}
    c87c:	681d      	ldr	r5, [r3, #0]
    c87e:	0006      	movs	r6, r0
    c880:	000c      	movs	r4, r1
    c882:	2d00      	cmp	r5, #0
    c884:	d005      	beq.n	c892 <__swsetup_r+0x1a>
    c886:	69ab      	ldr	r3, [r5, #24]
    c888:	2b00      	cmp	r3, #0
    c88a:	d102      	bne.n	c892 <__swsetup_r+0x1a>
    c88c:	0028      	movs	r0, r5
    c88e:	f000 f95d 	bl	cb4c <__sinit>
    c892:	4b31      	ldr	r3, [pc, #196]	; (c958 <__swsetup_r+0xe0>)
    c894:	429c      	cmp	r4, r3
    c896:	d101      	bne.n	c89c <__swsetup_r+0x24>
    c898:	686c      	ldr	r4, [r5, #4]
    c89a:	e008      	b.n	c8ae <__swsetup_r+0x36>
    c89c:	4b2f      	ldr	r3, [pc, #188]	; (c95c <__swsetup_r+0xe4>)
    c89e:	429c      	cmp	r4, r3
    c8a0:	d101      	bne.n	c8a6 <__swsetup_r+0x2e>
    c8a2:	68ac      	ldr	r4, [r5, #8]
    c8a4:	e003      	b.n	c8ae <__swsetup_r+0x36>
    c8a6:	4b2e      	ldr	r3, [pc, #184]	; (c960 <__swsetup_r+0xe8>)
    c8a8:	429c      	cmp	r4, r3
    c8aa:	d100      	bne.n	c8ae <__swsetup_r+0x36>
    c8ac:	68ec      	ldr	r4, [r5, #12]
    c8ae:	220c      	movs	r2, #12
    c8b0:	5ea3      	ldrsh	r3, [r4, r2]
    c8b2:	b29a      	uxth	r2, r3
    c8b4:	0711      	lsls	r1, r2, #28
    c8b6:	d423      	bmi.n	c900 <__swsetup_r+0x88>
    c8b8:	06d1      	lsls	r1, r2, #27
    c8ba:	d407      	bmi.n	c8cc <__swsetup_r+0x54>
    c8bc:	2209      	movs	r2, #9
    c8be:	2001      	movs	r0, #1
    c8c0:	6032      	str	r2, [r6, #0]
    c8c2:	3237      	adds	r2, #55	; 0x37
    c8c4:	4313      	orrs	r3, r2
    c8c6:	81a3      	strh	r3, [r4, #12]
    c8c8:	4240      	negs	r0, r0
    c8ca:	e042      	b.n	c952 <__swsetup_r+0xda>
    c8cc:	0753      	lsls	r3, r2, #29
    c8ce:	d513      	bpl.n	c8f8 <__swsetup_r+0x80>
    c8d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c8d2:	2900      	cmp	r1, #0
    c8d4:	d008      	beq.n	c8e8 <__swsetup_r+0x70>
    c8d6:	0023      	movs	r3, r4
    c8d8:	3344      	adds	r3, #68	; 0x44
    c8da:	4299      	cmp	r1, r3
    c8dc:	d002      	beq.n	c8e4 <__swsetup_r+0x6c>
    c8de:	0030      	movs	r0, r6
    c8e0:	f7ff fd22 	bl	c328 <_free_r>
    c8e4:	2300      	movs	r3, #0
    c8e6:	6363      	str	r3, [r4, #52]	; 0x34
    c8e8:	2224      	movs	r2, #36	; 0x24
    c8ea:	89a3      	ldrh	r3, [r4, #12]
    c8ec:	4393      	bics	r3, r2
    c8ee:	81a3      	strh	r3, [r4, #12]
    c8f0:	2300      	movs	r3, #0
    c8f2:	6063      	str	r3, [r4, #4]
    c8f4:	6923      	ldr	r3, [r4, #16]
    c8f6:	6023      	str	r3, [r4, #0]
    c8f8:	2208      	movs	r2, #8
    c8fa:	89a3      	ldrh	r3, [r4, #12]
    c8fc:	4313      	orrs	r3, r2
    c8fe:	81a3      	strh	r3, [r4, #12]
    c900:	6923      	ldr	r3, [r4, #16]
    c902:	2b00      	cmp	r3, #0
    c904:	d10b      	bne.n	c91e <__swsetup_r+0xa6>
    c906:	23a0      	movs	r3, #160	; 0xa0
    c908:	89a2      	ldrh	r2, [r4, #12]
    c90a:	009b      	lsls	r3, r3, #2
    c90c:	4013      	ands	r3, r2
    c90e:	2280      	movs	r2, #128	; 0x80
    c910:	0092      	lsls	r2, r2, #2
    c912:	4293      	cmp	r3, r2
    c914:	d003      	beq.n	c91e <__swsetup_r+0xa6>
    c916:	0021      	movs	r1, r4
    c918:	0030      	movs	r0, r6
    c91a:	f000 f9d1 	bl	ccc0 <__smakebuf_r>
    c91e:	2301      	movs	r3, #1
    c920:	89a2      	ldrh	r2, [r4, #12]
    c922:	4013      	ands	r3, r2
    c924:	d005      	beq.n	c932 <__swsetup_r+0xba>
    c926:	2300      	movs	r3, #0
    c928:	60a3      	str	r3, [r4, #8]
    c92a:	6963      	ldr	r3, [r4, #20]
    c92c:	425b      	negs	r3, r3
    c92e:	61a3      	str	r3, [r4, #24]
    c930:	e003      	b.n	c93a <__swsetup_r+0xc2>
    c932:	0792      	lsls	r2, r2, #30
    c934:	d400      	bmi.n	c938 <__swsetup_r+0xc0>
    c936:	6963      	ldr	r3, [r4, #20]
    c938:	60a3      	str	r3, [r4, #8]
    c93a:	2000      	movs	r0, #0
    c93c:	6923      	ldr	r3, [r4, #16]
    c93e:	4283      	cmp	r3, r0
    c940:	d107      	bne.n	c952 <__swsetup_r+0xda>
    c942:	220c      	movs	r2, #12
    c944:	5ea3      	ldrsh	r3, [r4, r2]
    c946:	061a      	lsls	r2, r3, #24
    c948:	d503      	bpl.n	c952 <__swsetup_r+0xda>
    c94a:	2240      	movs	r2, #64	; 0x40
    c94c:	4313      	orrs	r3, r2
    c94e:	81a3      	strh	r3, [r4, #12]
    c950:	3801      	subs	r0, #1
    c952:	bd70      	pop	{r4, r5, r6, pc}
    c954:	20000080 	.word	0x20000080
    c958:	0000ec44 	.word	0x0000ec44
    c95c:	0000ec64 	.word	0x0000ec64
    c960:	0000ec84 	.word	0x0000ec84

0000c964 <__sflush_r>:
    c964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c966:	898a      	ldrh	r2, [r1, #12]
    c968:	0005      	movs	r5, r0
    c96a:	000c      	movs	r4, r1
    c96c:	0713      	lsls	r3, r2, #28
    c96e:	d45a      	bmi.n	ca26 <__sflush_r+0xc2>
    c970:	684b      	ldr	r3, [r1, #4]
    c972:	2b00      	cmp	r3, #0
    c974:	dc02      	bgt.n	c97c <__sflush_r+0x18>
    c976:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c978:	2b00      	cmp	r3, #0
    c97a:	dd19      	ble.n	c9b0 <__sflush_r+0x4c>
    c97c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c97e:	2f00      	cmp	r7, #0
    c980:	d016      	beq.n	c9b0 <__sflush_r+0x4c>
    c982:	2300      	movs	r3, #0
    c984:	682e      	ldr	r6, [r5, #0]
    c986:	602b      	str	r3, [r5, #0]
    c988:	2380      	movs	r3, #128	; 0x80
    c98a:	015b      	lsls	r3, r3, #5
    c98c:	401a      	ands	r2, r3
    c98e:	d001      	beq.n	c994 <__sflush_r+0x30>
    c990:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c992:	e014      	b.n	c9be <__sflush_r+0x5a>
    c994:	2301      	movs	r3, #1
    c996:	6a21      	ldr	r1, [r4, #32]
    c998:	0028      	movs	r0, r5
    c99a:	47b8      	blx	r7
    c99c:	1c43      	adds	r3, r0, #1
    c99e:	d10e      	bne.n	c9be <__sflush_r+0x5a>
    c9a0:	682b      	ldr	r3, [r5, #0]
    c9a2:	2b00      	cmp	r3, #0
    c9a4:	d00b      	beq.n	c9be <__sflush_r+0x5a>
    c9a6:	2b1d      	cmp	r3, #29
    c9a8:	d001      	beq.n	c9ae <__sflush_r+0x4a>
    c9aa:	2b16      	cmp	r3, #22
    c9ac:	d102      	bne.n	c9b4 <__sflush_r+0x50>
    c9ae:	602e      	str	r6, [r5, #0]
    c9b0:	2000      	movs	r0, #0
    c9b2:	e05a      	b.n	ca6a <__sflush_r+0x106>
    c9b4:	2240      	movs	r2, #64	; 0x40
    c9b6:	89a3      	ldrh	r3, [r4, #12]
    c9b8:	4313      	orrs	r3, r2
    c9ba:	81a3      	strh	r3, [r4, #12]
    c9bc:	e055      	b.n	ca6a <__sflush_r+0x106>
    c9be:	89a3      	ldrh	r3, [r4, #12]
    c9c0:	075b      	lsls	r3, r3, #29
    c9c2:	d506      	bpl.n	c9d2 <__sflush_r+0x6e>
    c9c4:	6863      	ldr	r3, [r4, #4]
    c9c6:	1ac0      	subs	r0, r0, r3
    c9c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c9ca:	2b00      	cmp	r3, #0
    c9cc:	d001      	beq.n	c9d2 <__sflush_r+0x6e>
    c9ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c9d0:	1ac0      	subs	r0, r0, r3
    c9d2:	2300      	movs	r3, #0
    c9d4:	0002      	movs	r2, r0
    c9d6:	6a21      	ldr	r1, [r4, #32]
    c9d8:	0028      	movs	r0, r5
    c9da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c9dc:	47b8      	blx	r7
    c9de:	89a3      	ldrh	r3, [r4, #12]
    c9e0:	1c42      	adds	r2, r0, #1
    c9e2:	d106      	bne.n	c9f2 <__sflush_r+0x8e>
    c9e4:	6829      	ldr	r1, [r5, #0]
    c9e6:	291d      	cmp	r1, #29
    c9e8:	d83a      	bhi.n	ca60 <__sflush_r+0xfc>
    c9ea:	4a20      	ldr	r2, [pc, #128]	; (ca6c <__sflush_r+0x108>)
    c9ec:	40ca      	lsrs	r2, r1
    c9ee:	07d2      	lsls	r2, r2, #31
    c9f0:	d536      	bpl.n	ca60 <__sflush_r+0xfc>
    c9f2:	2200      	movs	r2, #0
    c9f4:	6062      	str	r2, [r4, #4]
    c9f6:	6922      	ldr	r2, [r4, #16]
    c9f8:	6022      	str	r2, [r4, #0]
    c9fa:	04db      	lsls	r3, r3, #19
    c9fc:	d505      	bpl.n	ca0a <__sflush_r+0xa6>
    c9fe:	1c43      	adds	r3, r0, #1
    ca00:	d102      	bne.n	ca08 <__sflush_r+0xa4>
    ca02:	682b      	ldr	r3, [r5, #0]
    ca04:	2b00      	cmp	r3, #0
    ca06:	d100      	bne.n	ca0a <__sflush_r+0xa6>
    ca08:	6560      	str	r0, [r4, #84]	; 0x54
    ca0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ca0c:	602e      	str	r6, [r5, #0]
    ca0e:	2900      	cmp	r1, #0
    ca10:	d0ce      	beq.n	c9b0 <__sflush_r+0x4c>
    ca12:	0023      	movs	r3, r4
    ca14:	3344      	adds	r3, #68	; 0x44
    ca16:	4299      	cmp	r1, r3
    ca18:	d002      	beq.n	ca20 <__sflush_r+0xbc>
    ca1a:	0028      	movs	r0, r5
    ca1c:	f7ff fc84 	bl	c328 <_free_r>
    ca20:	2000      	movs	r0, #0
    ca22:	6360      	str	r0, [r4, #52]	; 0x34
    ca24:	e021      	b.n	ca6a <__sflush_r+0x106>
    ca26:	690f      	ldr	r7, [r1, #16]
    ca28:	2f00      	cmp	r7, #0
    ca2a:	d0c1      	beq.n	c9b0 <__sflush_r+0x4c>
    ca2c:	680b      	ldr	r3, [r1, #0]
    ca2e:	600f      	str	r7, [r1, #0]
    ca30:	1bdb      	subs	r3, r3, r7
    ca32:	9301      	str	r3, [sp, #4]
    ca34:	2300      	movs	r3, #0
    ca36:	0792      	lsls	r2, r2, #30
    ca38:	d100      	bne.n	ca3c <__sflush_r+0xd8>
    ca3a:	694b      	ldr	r3, [r1, #20]
    ca3c:	60a3      	str	r3, [r4, #8]
    ca3e:	e003      	b.n	ca48 <__sflush_r+0xe4>
    ca40:	9b01      	ldr	r3, [sp, #4]
    ca42:	183f      	adds	r7, r7, r0
    ca44:	1a1b      	subs	r3, r3, r0
    ca46:	9301      	str	r3, [sp, #4]
    ca48:	9b01      	ldr	r3, [sp, #4]
    ca4a:	2b00      	cmp	r3, #0
    ca4c:	ddb0      	ble.n	c9b0 <__sflush_r+0x4c>
    ca4e:	9b01      	ldr	r3, [sp, #4]
    ca50:	003a      	movs	r2, r7
    ca52:	6a21      	ldr	r1, [r4, #32]
    ca54:	0028      	movs	r0, r5
    ca56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    ca58:	47b0      	blx	r6
    ca5a:	2800      	cmp	r0, #0
    ca5c:	dcf0      	bgt.n	ca40 <__sflush_r+0xdc>
    ca5e:	89a3      	ldrh	r3, [r4, #12]
    ca60:	2240      	movs	r2, #64	; 0x40
    ca62:	2001      	movs	r0, #1
    ca64:	4313      	orrs	r3, r2
    ca66:	81a3      	strh	r3, [r4, #12]
    ca68:	4240      	negs	r0, r0
    ca6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ca6c:	20400001 	.word	0x20400001

0000ca70 <_fflush_r>:
    ca70:	690b      	ldr	r3, [r1, #16]
    ca72:	b570      	push	{r4, r5, r6, lr}
    ca74:	0005      	movs	r5, r0
    ca76:	000c      	movs	r4, r1
    ca78:	2b00      	cmp	r3, #0
    ca7a:	d101      	bne.n	ca80 <_fflush_r+0x10>
    ca7c:	2000      	movs	r0, #0
    ca7e:	e01c      	b.n	caba <_fflush_r+0x4a>
    ca80:	2800      	cmp	r0, #0
    ca82:	d004      	beq.n	ca8e <_fflush_r+0x1e>
    ca84:	6983      	ldr	r3, [r0, #24]
    ca86:	2b00      	cmp	r3, #0
    ca88:	d101      	bne.n	ca8e <_fflush_r+0x1e>
    ca8a:	f000 f85f 	bl	cb4c <__sinit>
    ca8e:	4b0b      	ldr	r3, [pc, #44]	; (cabc <_fflush_r+0x4c>)
    ca90:	429c      	cmp	r4, r3
    ca92:	d101      	bne.n	ca98 <_fflush_r+0x28>
    ca94:	686c      	ldr	r4, [r5, #4]
    ca96:	e008      	b.n	caaa <_fflush_r+0x3a>
    ca98:	4b09      	ldr	r3, [pc, #36]	; (cac0 <_fflush_r+0x50>)
    ca9a:	429c      	cmp	r4, r3
    ca9c:	d101      	bne.n	caa2 <_fflush_r+0x32>
    ca9e:	68ac      	ldr	r4, [r5, #8]
    caa0:	e003      	b.n	caaa <_fflush_r+0x3a>
    caa2:	4b08      	ldr	r3, [pc, #32]	; (cac4 <_fflush_r+0x54>)
    caa4:	429c      	cmp	r4, r3
    caa6:	d100      	bne.n	caaa <_fflush_r+0x3a>
    caa8:	68ec      	ldr	r4, [r5, #12]
    caaa:	220c      	movs	r2, #12
    caac:	5ea3      	ldrsh	r3, [r4, r2]
    caae:	2b00      	cmp	r3, #0
    cab0:	d0e4      	beq.n	ca7c <_fflush_r+0xc>
    cab2:	0021      	movs	r1, r4
    cab4:	0028      	movs	r0, r5
    cab6:	f7ff ff55 	bl	c964 <__sflush_r>
    caba:	bd70      	pop	{r4, r5, r6, pc}
    cabc:	0000ec44 	.word	0x0000ec44
    cac0:	0000ec64 	.word	0x0000ec64
    cac4:	0000ec84 	.word	0x0000ec84

0000cac8 <_cleanup_r>:
    cac8:	b510      	push	{r4, lr}
    caca:	4902      	ldr	r1, [pc, #8]	; (cad4 <_cleanup_r+0xc>)
    cacc:	f000 f8b0 	bl	cc30 <_fwalk_reent>
    cad0:	bd10      	pop	{r4, pc}
    cad2:	46c0      	nop			; (mov r8, r8)
    cad4:	0000ca71 	.word	0x0000ca71

0000cad8 <std.isra.0>:
    cad8:	2300      	movs	r3, #0
    cada:	b510      	push	{r4, lr}
    cadc:	0004      	movs	r4, r0
    cade:	6003      	str	r3, [r0, #0]
    cae0:	6043      	str	r3, [r0, #4]
    cae2:	6083      	str	r3, [r0, #8]
    cae4:	8181      	strh	r1, [r0, #12]
    cae6:	6643      	str	r3, [r0, #100]	; 0x64
    cae8:	81c2      	strh	r2, [r0, #14]
    caea:	6103      	str	r3, [r0, #16]
    caec:	6143      	str	r3, [r0, #20]
    caee:	6183      	str	r3, [r0, #24]
    caf0:	0019      	movs	r1, r3
    caf2:	2208      	movs	r2, #8
    caf4:	305c      	adds	r0, #92	; 0x5c
    caf6:	f7ff fc0f 	bl	c318 <memset>
    cafa:	4b05      	ldr	r3, [pc, #20]	; (cb10 <std.isra.0+0x38>)
    cafc:	6224      	str	r4, [r4, #32]
    cafe:	6263      	str	r3, [r4, #36]	; 0x24
    cb00:	4b04      	ldr	r3, [pc, #16]	; (cb14 <std.isra.0+0x3c>)
    cb02:	62a3      	str	r3, [r4, #40]	; 0x28
    cb04:	4b04      	ldr	r3, [pc, #16]	; (cb18 <std.isra.0+0x40>)
    cb06:	62e3      	str	r3, [r4, #44]	; 0x2c
    cb08:	4b04      	ldr	r3, [pc, #16]	; (cb1c <std.isra.0+0x44>)
    cb0a:	6323      	str	r3, [r4, #48]	; 0x30
    cb0c:	bd10      	pop	{r4, pc}
    cb0e:	46c0      	nop			; (mov r8, r8)
    cb10:	0000d611 	.word	0x0000d611
    cb14:	0000d639 	.word	0x0000d639
    cb18:	0000d671 	.word	0x0000d671
    cb1c:	0000d69d 	.word	0x0000d69d

0000cb20 <__sfmoreglue>:
    cb20:	b570      	push	{r4, r5, r6, lr}
    cb22:	2568      	movs	r5, #104	; 0x68
    cb24:	1e4b      	subs	r3, r1, #1
    cb26:	435d      	muls	r5, r3
    cb28:	000e      	movs	r6, r1
    cb2a:	0029      	movs	r1, r5
    cb2c:	3174      	adds	r1, #116	; 0x74
    cb2e:	f7ff fc41 	bl	c3b4 <_malloc_r>
    cb32:	1e04      	subs	r4, r0, #0
    cb34:	d008      	beq.n	cb48 <__sfmoreglue+0x28>
    cb36:	2100      	movs	r1, #0
    cb38:	002a      	movs	r2, r5
    cb3a:	6001      	str	r1, [r0, #0]
    cb3c:	6046      	str	r6, [r0, #4]
    cb3e:	300c      	adds	r0, #12
    cb40:	60a0      	str	r0, [r4, #8]
    cb42:	3268      	adds	r2, #104	; 0x68
    cb44:	f7ff fbe8 	bl	c318 <memset>
    cb48:	0020      	movs	r0, r4
    cb4a:	bd70      	pop	{r4, r5, r6, pc}

0000cb4c <__sinit>:
    cb4c:	6983      	ldr	r3, [r0, #24]
    cb4e:	b513      	push	{r0, r1, r4, lr}
    cb50:	0004      	movs	r4, r0
    cb52:	2b00      	cmp	r3, #0
    cb54:	d128      	bne.n	cba8 <__sinit+0x5c>
    cb56:	6483      	str	r3, [r0, #72]	; 0x48
    cb58:	64c3      	str	r3, [r0, #76]	; 0x4c
    cb5a:	6503      	str	r3, [r0, #80]	; 0x50
    cb5c:	4b13      	ldr	r3, [pc, #76]	; (cbac <__sinit+0x60>)
    cb5e:	4a14      	ldr	r2, [pc, #80]	; (cbb0 <__sinit+0x64>)
    cb60:	681b      	ldr	r3, [r3, #0]
    cb62:	6282      	str	r2, [r0, #40]	; 0x28
    cb64:	9301      	str	r3, [sp, #4]
    cb66:	4298      	cmp	r0, r3
    cb68:	d101      	bne.n	cb6e <__sinit+0x22>
    cb6a:	2301      	movs	r3, #1
    cb6c:	6183      	str	r3, [r0, #24]
    cb6e:	0020      	movs	r0, r4
    cb70:	f000 f820 	bl	cbb4 <__sfp>
    cb74:	6060      	str	r0, [r4, #4]
    cb76:	0020      	movs	r0, r4
    cb78:	f000 f81c 	bl	cbb4 <__sfp>
    cb7c:	60a0      	str	r0, [r4, #8]
    cb7e:	0020      	movs	r0, r4
    cb80:	f000 f818 	bl	cbb4 <__sfp>
    cb84:	2200      	movs	r2, #0
    cb86:	60e0      	str	r0, [r4, #12]
    cb88:	2104      	movs	r1, #4
    cb8a:	6860      	ldr	r0, [r4, #4]
    cb8c:	f7ff ffa4 	bl	cad8 <std.isra.0>
    cb90:	2201      	movs	r2, #1
    cb92:	2109      	movs	r1, #9
    cb94:	68a0      	ldr	r0, [r4, #8]
    cb96:	f7ff ff9f 	bl	cad8 <std.isra.0>
    cb9a:	2202      	movs	r2, #2
    cb9c:	2112      	movs	r1, #18
    cb9e:	68e0      	ldr	r0, [r4, #12]
    cba0:	f7ff ff9a 	bl	cad8 <std.isra.0>
    cba4:	2301      	movs	r3, #1
    cba6:	61a3      	str	r3, [r4, #24]
    cba8:	bd13      	pop	{r0, r1, r4, pc}
    cbaa:	46c0      	nop			; (mov r8, r8)
    cbac:	0000ec40 	.word	0x0000ec40
    cbb0:	0000cac9 	.word	0x0000cac9

0000cbb4 <__sfp>:
    cbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cbb6:	4b1d      	ldr	r3, [pc, #116]	; (cc2c <__sfp+0x78>)
    cbb8:	0006      	movs	r6, r0
    cbba:	681d      	ldr	r5, [r3, #0]
    cbbc:	69ab      	ldr	r3, [r5, #24]
    cbbe:	2b00      	cmp	r3, #0
    cbc0:	d102      	bne.n	cbc8 <__sfp+0x14>
    cbc2:	0028      	movs	r0, r5
    cbc4:	f7ff ffc2 	bl	cb4c <__sinit>
    cbc8:	3548      	adds	r5, #72	; 0x48
    cbca:	68ac      	ldr	r4, [r5, #8]
    cbcc:	686b      	ldr	r3, [r5, #4]
    cbce:	3b01      	subs	r3, #1
    cbd0:	d405      	bmi.n	cbde <__sfp+0x2a>
    cbd2:	220c      	movs	r2, #12
    cbd4:	5ea7      	ldrsh	r7, [r4, r2]
    cbd6:	2f00      	cmp	r7, #0
    cbd8:	d010      	beq.n	cbfc <__sfp+0x48>
    cbda:	3468      	adds	r4, #104	; 0x68
    cbdc:	e7f7      	b.n	cbce <__sfp+0x1a>
    cbde:	682b      	ldr	r3, [r5, #0]
    cbe0:	2b00      	cmp	r3, #0
    cbe2:	d001      	beq.n	cbe8 <__sfp+0x34>
    cbe4:	682d      	ldr	r5, [r5, #0]
    cbe6:	e7f0      	b.n	cbca <__sfp+0x16>
    cbe8:	2104      	movs	r1, #4
    cbea:	0030      	movs	r0, r6
    cbec:	f7ff ff98 	bl	cb20 <__sfmoreglue>
    cbf0:	6028      	str	r0, [r5, #0]
    cbf2:	2800      	cmp	r0, #0
    cbf4:	d1f6      	bne.n	cbe4 <__sfp+0x30>
    cbf6:	230c      	movs	r3, #12
    cbf8:	6033      	str	r3, [r6, #0]
    cbfa:	e016      	b.n	cc2a <__sfp+0x76>
    cbfc:	2301      	movs	r3, #1
    cbfe:	0020      	movs	r0, r4
    cc00:	425b      	negs	r3, r3
    cc02:	81e3      	strh	r3, [r4, #14]
    cc04:	3302      	adds	r3, #2
    cc06:	81a3      	strh	r3, [r4, #12]
    cc08:	6667      	str	r7, [r4, #100]	; 0x64
    cc0a:	6027      	str	r7, [r4, #0]
    cc0c:	60a7      	str	r7, [r4, #8]
    cc0e:	6067      	str	r7, [r4, #4]
    cc10:	6127      	str	r7, [r4, #16]
    cc12:	6167      	str	r7, [r4, #20]
    cc14:	61a7      	str	r7, [r4, #24]
    cc16:	305c      	adds	r0, #92	; 0x5c
    cc18:	2208      	movs	r2, #8
    cc1a:	0039      	movs	r1, r7
    cc1c:	f7ff fb7c 	bl	c318 <memset>
    cc20:	0020      	movs	r0, r4
    cc22:	6367      	str	r7, [r4, #52]	; 0x34
    cc24:	63a7      	str	r7, [r4, #56]	; 0x38
    cc26:	64a7      	str	r7, [r4, #72]	; 0x48
    cc28:	64e7      	str	r7, [r4, #76]	; 0x4c
    cc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc2c:	0000ec40 	.word	0x0000ec40

0000cc30 <_fwalk_reent>:
    cc30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cc32:	0004      	movs	r4, r0
    cc34:	0007      	movs	r7, r0
    cc36:	2600      	movs	r6, #0
    cc38:	9101      	str	r1, [sp, #4]
    cc3a:	3448      	adds	r4, #72	; 0x48
    cc3c:	2c00      	cmp	r4, #0
    cc3e:	d016      	beq.n	cc6e <_fwalk_reent+0x3e>
    cc40:	6863      	ldr	r3, [r4, #4]
    cc42:	68a5      	ldr	r5, [r4, #8]
    cc44:	9300      	str	r3, [sp, #0]
    cc46:	9b00      	ldr	r3, [sp, #0]
    cc48:	3b01      	subs	r3, #1
    cc4a:	9300      	str	r3, [sp, #0]
    cc4c:	d40d      	bmi.n	cc6a <_fwalk_reent+0x3a>
    cc4e:	89ab      	ldrh	r3, [r5, #12]
    cc50:	2b01      	cmp	r3, #1
    cc52:	d908      	bls.n	cc66 <_fwalk_reent+0x36>
    cc54:	220e      	movs	r2, #14
    cc56:	5eab      	ldrsh	r3, [r5, r2]
    cc58:	3301      	adds	r3, #1
    cc5a:	d004      	beq.n	cc66 <_fwalk_reent+0x36>
    cc5c:	0029      	movs	r1, r5
    cc5e:	0038      	movs	r0, r7
    cc60:	9b01      	ldr	r3, [sp, #4]
    cc62:	4798      	blx	r3
    cc64:	4306      	orrs	r6, r0
    cc66:	3568      	adds	r5, #104	; 0x68
    cc68:	e7ed      	b.n	cc46 <_fwalk_reent+0x16>
    cc6a:	6824      	ldr	r4, [r4, #0]
    cc6c:	e7e6      	b.n	cc3c <_fwalk_reent+0xc>
    cc6e:	0030      	movs	r0, r6
    cc70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000cc74 <__swhatbuf_r>:
    cc74:	b570      	push	{r4, r5, r6, lr}
    cc76:	000e      	movs	r6, r1
    cc78:	001d      	movs	r5, r3
    cc7a:	230e      	movs	r3, #14
    cc7c:	5ec9      	ldrsh	r1, [r1, r3]
    cc7e:	b090      	sub	sp, #64	; 0x40
    cc80:	0014      	movs	r4, r2
    cc82:	2900      	cmp	r1, #0
    cc84:	da06      	bge.n	cc94 <__swhatbuf_r+0x20>
    cc86:	2300      	movs	r3, #0
    cc88:	602b      	str	r3, [r5, #0]
    cc8a:	89b3      	ldrh	r3, [r6, #12]
    cc8c:	061b      	lsls	r3, r3, #24
    cc8e:	d50f      	bpl.n	ccb0 <__swhatbuf_r+0x3c>
    cc90:	2340      	movs	r3, #64	; 0x40
    cc92:	e00f      	b.n	ccb4 <__swhatbuf_r+0x40>
    cc94:	aa01      	add	r2, sp, #4
    cc96:	f000 fd2d 	bl	d6f4 <_fstat_r>
    cc9a:	2800      	cmp	r0, #0
    cc9c:	dbf3      	blt.n	cc86 <__swhatbuf_r+0x12>
    cc9e:	23f0      	movs	r3, #240	; 0xf0
    cca0:	9a02      	ldr	r2, [sp, #8]
    cca2:	021b      	lsls	r3, r3, #8
    cca4:	4013      	ands	r3, r2
    cca6:	4a05      	ldr	r2, [pc, #20]	; (ccbc <__swhatbuf_r+0x48>)
    cca8:	189b      	adds	r3, r3, r2
    ccaa:	425a      	negs	r2, r3
    ccac:	4153      	adcs	r3, r2
    ccae:	602b      	str	r3, [r5, #0]
    ccb0:	2380      	movs	r3, #128	; 0x80
    ccb2:	00db      	lsls	r3, r3, #3
    ccb4:	2000      	movs	r0, #0
    ccb6:	6023      	str	r3, [r4, #0]
    ccb8:	b010      	add	sp, #64	; 0x40
    ccba:	bd70      	pop	{r4, r5, r6, pc}
    ccbc:	ffffe000 	.word	0xffffe000

0000ccc0 <__smakebuf_r>:
    ccc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ccc2:	2602      	movs	r6, #2
    ccc4:	898b      	ldrh	r3, [r1, #12]
    ccc6:	0005      	movs	r5, r0
    ccc8:	000c      	movs	r4, r1
    ccca:	4233      	tst	r3, r6
    cccc:	d110      	bne.n	ccf0 <__smakebuf_r+0x30>
    ccce:	ab01      	add	r3, sp, #4
    ccd0:	466a      	mov	r2, sp
    ccd2:	f7ff ffcf 	bl	cc74 <__swhatbuf_r>
    ccd6:	9900      	ldr	r1, [sp, #0]
    ccd8:	0007      	movs	r7, r0
    ccda:	0028      	movs	r0, r5
    ccdc:	f7ff fb6a 	bl	c3b4 <_malloc_r>
    cce0:	2800      	cmp	r0, #0
    cce2:	d10c      	bne.n	ccfe <__smakebuf_r+0x3e>
    cce4:	220c      	movs	r2, #12
    cce6:	5ea3      	ldrsh	r3, [r4, r2]
    cce8:	059a      	lsls	r2, r3, #22
    ccea:	d423      	bmi.n	cd34 <__smakebuf_r+0x74>
    ccec:	4333      	orrs	r3, r6
    ccee:	81a3      	strh	r3, [r4, #12]
    ccf0:	0023      	movs	r3, r4
    ccf2:	3347      	adds	r3, #71	; 0x47
    ccf4:	6023      	str	r3, [r4, #0]
    ccf6:	6123      	str	r3, [r4, #16]
    ccf8:	2301      	movs	r3, #1
    ccfa:	6163      	str	r3, [r4, #20]
    ccfc:	e01a      	b.n	cd34 <__smakebuf_r+0x74>
    ccfe:	2280      	movs	r2, #128	; 0x80
    cd00:	4b0d      	ldr	r3, [pc, #52]	; (cd38 <__smakebuf_r+0x78>)
    cd02:	62ab      	str	r3, [r5, #40]	; 0x28
    cd04:	89a3      	ldrh	r3, [r4, #12]
    cd06:	6020      	str	r0, [r4, #0]
    cd08:	4313      	orrs	r3, r2
    cd0a:	81a3      	strh	r3, [r4, #12]
    cd0c:	9b00      	ldr	r3, [sp, #0]
    cd0e:	6120      	str	r0, [r4, #16]
    cd10:	6163      	str	r3, [r4, #20]
    cd12:	9b01      	ldr	r3, [sp, #4]
    cd14:	2b00      	cmp	r3, #0
    cd16:	d00a      	beq.n	cd2e <__smakebuf_r+0x6e>
    cd18:	230e      	movs	r3, #14
    cd1a:	5ee1      	ldrsh	r1, [r4, r3]
    cd1c:	0028      	movs	r0, r5
    cd1e:	f000 fcfb 	bl	d718 <_isatty_r>
    cd22:	2800      	cmp	r0, #0
    cd24:	d003      	beq.n	cd2e <__smakebuf_r+0x6e>
    cd26:	2201      	movs	r2, #1
    cd28:	89a3      	ldrh	r3, [r4, #12]
    cd2a:	4313      	orrs	r3, r2
    cd2c:	81a3      	strh	r3, [r4, #12]
    cd2e:	89a3      	ldrh	r3, [r4, #12]
    cd30:	431f      	orrs	r7, r3
    cd32:	81a7      	strh	r7, [r4, #12]
    cd34:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    cd36:	46c0      	nop			; (mov r8, r8)
    cd38:	0000cac9 	.word	0x0000cac9

0000cd3c <__ssputs_r>:
    cd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd3e:	688e      	ldr	r6, [r1, #8]
    cd40:	b085      	sub	sp, #20
    cd42:	0007      	movs	r7, r0
    cd44:	000c      	movs	r4, r1
    cd46:	9203      	str	r2, [sp, #12]
    cd48:	9301      	str	r3, [sp, #4]
    cd4a:	429e      	cmp	r6, r3
    cd4c:	d843      	bhi.n	cdd6 <__ssputs_r+0x9a>
    cd4e:	2390      	movs	r3, #144	; 0x90
    cd50:	898a      	ldrh	r2, [r1, #12]
    cd52:	00db      	lsls	r3, r3, #3
    cd54:	421a      	tst	r2, r3
    cd56:	d03e      	beq.n	cdd6 <__ssputs_r+0x9a>
    cd58:	2503      	movs	r5, #3
    cd5a:	6909      	ldr	r1, [r1, #16]
    cd5c:	6823      	ldr	r3, [r4, #0]
    cd5e:	9801      	ldr	r0, [sp, #4]
    cd60:	1a5b      	subs	r3, r3, r1
    cd62:	9302      	str	r3, [sp, #8]
    cd64:	6963      	ldr	r3, [r4, #20]
    cd66:	435d      	muls	r5, r3
    cd68:	0feb      	lsrs	r3, r5, #31
    cd6a:	195d      	adds	r5, r3, r5
    cd6c:	9b02      	ldr	r3, [sp, #8]
    cd6e:	106d      	asrs	r5, r5, #1
    cd70:	3301      	adds	r3, #1
    cd72:	181b      	adds	r3, r3, r0
    cd74:	42ab      	cmp	r3, r5
    cd76:	d900      	bls.n	cd7a <__ssputs_r+0x3e>
    cd78:	001d      	movs	r5, r3
    cd7a:	0553      	lsls	r3, r2, #21
    cd7c:	d510      	bpl.n	cda0 <__ssputs_r+0x64>
    cd7e:	0029      	movs	r1, r5
    cd80:	0038      	movs	r0, r7
    cd82:	f7ff fb17 	bl	c3b4 <_malloc_r>
    cd86:	1e06      	subs	r6, r0, #0
    cd88:	d014      	beq.n	cdb4 <__ssputs_r+0x78>
    cd8a:	9a02      	ldr	r2, [sp, #8]
    cd8c:	6921      	ldr	r1, [r4, #16]
    cd8e:	f7ff faa5 	bl	c2dc <memcpy>
    cd92:	89a2      	ldrh	r2, [r4, #12]
    cd94:	4b19      	ldr	r3, [pc, #100]	; (cdfc <__ssputs_r+0xc0>)
    cd96:	4013      	ands	r3, r2
    cd98:	2280      	movs	r2, #128	; 0x80
    cd9a:	4313      	orrs	r3, r2
    cd9c:	81a3      	strh	r3, [r4, #12]
    cd9e:	e012      	b.n	cdc6 <__ssputs_r+0x8a>
    cda0:	002a      	movs	r2, r5
    cda2:	0038      	movs	r0, r7
    cda4:	f000 fce9 	bl	d77a <_realloc_r>
    cda8:	1e06      	subs	r6, r0, #0
    cdaa:	d10c      	bne.n	cdc6 <__ssputs_r+0x8a>
    cdac:	6921      	ldr	r1, [r4, #16]
    cdae:	0038      	movs	r0, r7
    cdb0:	f7ff faba 	bl	c328 <_free_r>
    cdb4:	230c      	movs	r3, #12
    cdb6:	2240      	movs	r2, #64	; 0x40
    cdb8:	2001      	movs	r0, #1
    cdba:	603b      	str	r3, [r7, #0]
    cdbc:	89a3      	ldrh	r3, [r4, #12]
    cdbe:	4240      	negs	r0, r0
    cdc0:	4313      	orrs	r3, r2
    cdc2:	81a3      	strh	r3, [r4, #12]
    cdc4:	e017      	b.n	cdf6 <__ssputs_r+0xba>
    cdc6:	9b02      	ldr	r3, [sp, #8]
    cdc8:	6126      	str	r6, [r4, #16]
    cdca:	18f6      	adds	r6, r6, r3
    cdcc:	6026      	str	r6, [r4, #0]
    cdce:	6165      	str	r5, [r4, #20]
    cdd0:	9e01      	ldr	r6, [sp, #4]
    cdd2:	1aed      	subs	r5, r5, r3
    cdd4:	60a5      	str	r5, [r4, #8]
    cdd6:	9b01      	ldr	r3, [sp, #4]
    cdd8:	42b3      	cmp	r3, r6
    cdda:	d200      	bcs.n	cdde <__ssputs_r+0xa2>
    cddc:	001e      	movs	r6, r3
    cdde:	0032      	movs	r2, r6
    cde0:	9903      	ldr	r1, [sp, #12]
    cde2:	6820      	ldr	r0, [r4, #0]
    cde4:	f7ff fa83 	bl	c2ee <memmove>
    cde8:	2000      	movs	r0, #0
    cdea:	68a3      	ldr	r3, [r4, #8]
    cdec:	1b9b      	subs	r3, r3, r6
    cdee:	60a3      	str	r3, [r4, #8]
    cdf0:	6823      	ldr	r3, [r4, #0]
    cdf2:	199e      	adds	r6, r3, r6
    cdf4:	6026      	str	r6, [r4, #0]
    cdf6:	b005      	add	sp, #20
    cdf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdfa:	46c0      	nop			; (mov r8, r8)
    cdfc:	fffffb7f 	.word	0xfffffb7f

0000ce00 <_svfiprintf_r>:
    ce00:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce02:	b09f      	sub	sp, #124	; 0x7c
    ce04:	9002      	str	r0, [sp, #8]
    ce06:	9305      	str	r3, [sp, #20]
    ce08:	898b      	ldrh	r3, [r1, #12]
    ce0a:	000f      	movs	r7, r1
    ce0c:	0016      	movs	r6, r2
    ce0e:	061b      	lsls	r3, r3, #24
    ce10:	d510      	bpl.n	ce34 <_svfiprintf_r+0x34>
    ce12:	690b      	ldr	r3, [r1, #16]
    ce14:	2b00      	cmp	r3, #0
    ce16:	d10d      	bne.n	ce34 <_svfiprintf_r+0x34>
    ce18:	2140      	movs	r1, #64	; 0x40
    ce1a:	f7ff facb 	bl	c3b4 <_malloc_r>
    ce1e:	6038      	str	r0, [r7, #0]
    ce20:	6138      	str	r0, [r7, #16]
    ce22:	2800      	cmp	r0, #0
    ce24:	d104      	bne.n	ce30 <_svfiprintf_r+0x30>
    ce26:	230c      	movs	r3, #12
    ce28:	9a02      	ldr	r2, [sp, #8]
    ce2a:	3801      	subs	r0, #1
    ce2c:	6013      	str	r3, [r2, #0]
    ce2e:	e0d8      	b.n	cfe2 <_svfiprintf_r+0x1e2>
    ce30:	2340      	movs	r3, #64	; 0x40
    ce32:	617b      	str	r3, [r7, #20]
    ce34:	2300      	movs	r3, #0
    ce36:	ad06      	add	r5, sp, #24
    ce38:	616b      	str	r3, [r5, #20]
    ce3a:	3320      	adds	r3, #32
    ce3c:	766b      	strb	r3, [r5, #25]
    ce3e:	3310      	adds	r3, #16
    ce40:	76ab      	strb	r3, [r5, #26]
    ce42:	0034      	movs	r4, r6
    ce44:	7823      	ldrb	r3, [r4, #0]
    ce46:	2b00      	cmp	r3, #0
    ce48:	d103      	bne.n	ce52 <_svfiprintf_r+0x52>
    ce4a:	1ba3      	subs	r3, r4, r6
    ce4c:	9304      	str	r3, [sp, #16]
    ce4e:	d012      	beq.n	ce76 <_svfiprintf_r+0x76>
    ce50:	e003      	b.n	ce5a <_svfiprintf_r+0x5a>
    ce52:	2b25      	cmp	r3, #37	; 0x25
    ce54:	d0f9      	beq.n	ce4a <_svfiprintf_r+0x4a>
    ce56:	3401      	adds	r4, #1
    ce58:	e7f4      	b.n	ce44 <_svfiprintf_r+0x44>
    ce5a:	1ba3      	subs	r3, r4, r6
    ce5c:	0032      	movs	r2, r6
    ce5e:	0039      	movs	r1, r7
    ce60:	9802      	ldr	r0, [sp, #8]
    ce62:	f7ff ff6b 	bl	cd3c <__ssputs_r>
    ce66:	1c43      	adds	r3, r0, #1
    ce68:	d100      	bne.n	ce6c <_svfiprintf_r+0x6c>
    ce6a:	e0b4      	b.n	cfd6 <_svfiprintf_r+0x1d6>
    ce6c:	696a      	ldr	r2, [r5, #20]
    ce6e:	9b04      	ldr	r3, [sp, #16]
    ce70:	4694      	mov	ip, r2
    ce72:	4463      	add	r3, ip
    ce74:	616b      	str	r3, [r5, #20]
    ce76:	7823      	ldrb	r3, [r4, #0]
    ce78:	2b00      	cmp	r3, #0
    ce7a:	d100      	bne.n	ce7e <_svfiprintf_r+0x7e>
    ce7c:	e0ab      	b.n	cfd6 <_svfiprintf_r+0x1d6>
    ce7e:	2201      	movs	r2, #1
    ce80:	2300      	movs	r3, #0
    ce82:	4252      	negs	r2, r2
    ce84:	606a      	str	r2, [r5, #4]
    ce86:	a902      	add	r1, sp, #8
    ce88:	3254      	adds	r2, #84	; 0x54
    ce8a:	1852      	adds	r2, r2, r1
    ce8c:	3401      	adds	r4, #1
    ce8e:	602b      	str	r3, [r5, #0]
    ce90:	60eb      	str	r3, [r5, #12]
    ce92:	60ab      	str	r3, [r5, #8]
    ce94:	7013      	strb	r3, [r2, #0]
    ce96:	65ab      	str	r3, [r5, #88]	; 0x58
    ce98:	4e53      	ldr	r6, [pc, #332]	; (cfe8 <_svfiprintf_r+0x1e8>)
    ce9a:	7821      	ldrb	r1, [r4, #0]
    ce9c:	2205      	movs	r2, #5
    ce9e:	0030      	movs	r0, r6
    cea0:	f000 fc60 	bl	d764 <memchr>
    cea4:	2800      	cmp	r0, #0
    cea6:	d007      	beq.n	ceb8 <_svfiprintf_r+0xb8>
    cea8:	2301      	movs	r3, #1
    ceaa:	1b80      	subs	r0, r0, r6
    ceac:	4083      	lsls	r3, r0
    ceae:	682a      	ldr	r2, [r5, #0]
    ceb0:	3401      	adds	r4, #1
    ceb2:	4313      	orrs	r3, r2
    ceb4:	602b      	str	r3, [r5, #0]
    ceb6:	e7ef      	b.n	ce98 <_svfiprintf_r+0x98>
    ceb8:	682b      	ldr	r3, [r5, #0]
    ceba:	06da      	lsls	r2, r3, #27
    cebc:	d504      	bpl.n	cec8 <_svfiprintf_r+0xc8>
    cebe:	2253      	movs	r2, #83	; 0x53
    cec0:	2120      	movs	r1, #32
    cec2:	a802      	add	r0, sp, #8
    cec4:	1812      	adds	r2, r2, r0
    cec6:	7011      	strb	r1, [r2, #0]
    cec8:	071a      	lsls	r2, r3, #28
    ceca:	d504      	bpl.n	ced6 <_svfiprintf_r+0xd6>
    cecc:	2253      	movs	r2, #83	; 0x53
    cece:	212b      	movs	r1, #43	; 0x2b
    ced0:	a802      	add	r0, sp, #8
    ced2:	1812      	adds	r2, r2, r0
    ced4:	7011      	strb	r1, [r2, #0]
    ced6:	7822      	ldrb	r2, [r4, #0]
    ced8:	2a2a      	cmp	r2, #42	; 0x2a
    ceda:	d003      	beq.n	cee4 <_svfiprintf_r+0xe4>
    cedc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cede:	2000      	movs	r0, #0
    cee0:	210a      	movs	r1, #10
    cee2:	e00e      	b.n	cf02 <_svfiprintf_r+0x102>
    cee4:	9a05      	ldr	r2, [sp, #20]
    cee6:	1d11      	adds	r1, r2, #4
    cee8:	6812      	ldr	r2, [r2, #0]
    ceea:	9105      	str	r1, [sp, #20]
    ceec:	2a00      	cmp	r2, #0
    ceee:	db01      	blt.n	cef4 <_svfiprintf_r+0xf4>
    cef0:	9209      	str	r2, [sp, #36]	; 0x24
    cef2:	e004      	b.n	cefe <_svfiprintf_r+0xfe>
    cef4:	4252      	negs	r2, r2
    cef6:	60ea      	str	r2, [r5, #12]
    cef8:	2202      	movs	r2, #2
    cefa:	4313      	orrs	r3, r2
    cefc:	602b      	str	r3, [r5, #0]
    cefe:	3401      	adds	r4, #1
    cf00:	e00b      	b.n	cf1a <_svfiprintf_r+0x11a>
    cf02:	7822      	ldrb	r2, [r4, #0]
    cf04:	3a30      	subs	r2, #48	; 0x30
    cf06:	2a09      	cmp	r2, #9
    cf08:	d804      	bhi.n	cf14 <_svfiprintf_r+0x114>
    cf0a:	434b      	muls	r3, r1
    cf0c:	3401      	adds	r4, #1
    cf0e:	189b      	adds	r3, r3, r2
    cf10:	2001      	movs	r0, #1
    cf12:	e7f6      	b.n	cf02 <_svfiprintf_r+0x102>
    cf14:	2800      	cmp	r0, #0
    cf16:	d000      	beq.n	cf1a <_svfiprintf_r+0x11a>
    cf18:	9309      	str	r3, [sp, #36]	; 0x24
    cf1a:	7823      	ldrb	r3, [r4, #0]
    cf1c:	2b2e      	cmp	r3, #46	; 0x2e
    cf1e:	d11e      	bne.n	cf5e <_svfiprintf_r+0x15e>
    cf20:	7863      	ldrb	r3, [r4, #1]
    cf22:	2b2a      	cmp	r3, #42	; 0x2a
    cf24:	d10a      	bne.n	cf3c <_svfiprintf_r+0x13c>
    cf26:	9b05      	ldr	r3, [sp, #20]
    cf28:	3402      	adds	r4, #2
    cf2a:	1d1a      	adds	r2, r3, #4
    cf2c:	681b      	ldr	r3, [r3, #0]
    cf2e:	9205      	str	r2, [sp, #20]
    cf30:	2b00      	cmp	r3, #0
    cf32:	da01      	bge.n	cf38 <_svfiprintf_r+0x138>
    cf34:	2301      	movs	r3, #1
    cf36:	425b      	negs	r3, r3
    cf38:	9307      	str	r3, [sp, #28]
    cf3a:	e010      	b.n	cf5e <_svfiprintf_r+0x15e>
    cf3c:	2300      	movs	r3, #0
    cf3e:	200a      	movs	r0, #10
    cf40:	001a      	movs	r2, r3
    cf42:	3401      	adds	r4, #1
    cf44:	606b      	str	r3, [r5, #4]
    cf46:	7821      	ldrb	r1, [r4, #0]
    cf48:	3930      	subs	r1, #48	; 0x30
    cf4a:	2909      	cmp	r1, #9
    cf4c:	d804      	bhi.n	cf58 <_svfiprintf_r+0x158>
    cf4e:	4342      	muls	r2, r0
    cf50:	3401      	adds	r4, #1
    cf52:	1852      	adds	r2, r2, r1
    cf54:	2301      	movs	r3, #1
    cf56:	e7f6      	b.n	cf46 <_svfiprintf_r+0x146>
    cf58:	2b00      	cmp	r3, #0
    cf5a:	d000      	beq.n	cf5e <_svfiprintf_r+0x15e>
    cf5c:	9207      	str	r2, [sp, #28]
    cf5e:	4e23      	ldr	r6, [pc, #140]	; (cfec <_svfiprintf_r+0x1ec>)
    cf60:	7821      	ldrb	r1, [r4, #0]
    cf62:	2203      	movs	r2, #3
    cf64:	0030      	movs	r0, r6
    cf66:	f000 fbfd 	bl	d764 <memchr>
    cf6a:	2800      	cmp	r0, #0
    cf6c:	d006      	beq.n	cf7c <_svfiprintf_r+0x17c>
    cf6e:	2340      	movs	r3, #64	; 0x40
    cf70:	1b80      	subs	r0, r0, r6
    cf72:	4083      	lsls	r3, r0
    cf74:	682a      	ldr	r2, [r5, #0]
    cf76:	3401      	adds	r4, #1
    cf78:	4313      	orrs	r3, r2
    cf7a:	602b      	str	r3, [r5, #0]
    cf7c:	7821      	ldrb	r1, [r4, #0]
    cf7e:	2206      	movs	r2, #6
    cf80:	481b      	ldr	r0, [pc, #108]	; (cff0 <_svfiprintf_r+0x1f0>)
    cf82:	1c66      	adds	r6, r4, #1
    cf84:	7629      	strb	r1, [r5, #24]
    cf86:	f000 fbed 	bl	d764 <memchr>
    cf8a:	2800      	cmp	r0, #0
    cf8c:	d012      	beq.n	cfb4 <_svfiprintf_r+0x1b4>
    cf8e:	4b19      	ldr	r3, [pc, #100]	; (cff4 <_svfiprintf_r+0x1f4>)
    cf90:	2b00      	cmp	r3, #0
    cf92:	d106      	bne.n	cfa2 <_svfiprintf_r+0x1a2>
    cf94:	2207      	movs	r2, #7
    cf96:	9b05      	ldr	r3, [sp, #20]
    cf98:	3307      	adds	r3, #7
    cf9a:	4393      	bics	r3, r2
    cf9c:	3308      	adds	r3, #8
    cf9e:	9305      	str	r3, [sp, #20]
    cfa0:	e014      	b.n	cfcc <_svfiprintf_r+0x1cc>
    cfa2:	ab05      	add	r3, sp, #20
    cfa4:	9300      	str	r3, [sp, #0]
    cfa6:	003a      	movs	r2, r7
    cfa8:	4b13      	ldr	r3, [pc, #76]	; (cff8 <_svfiprintf_r+0x1f8>)
    cfaa:	0029      	movs	r1, r5
    cfac:	9802      	ldr	r0, [sp, #8]
    cfae:	e000      	b.n	cfb2 <_svfiprintf_r+0x1b2>
    cfb0:	bf00      	nop
    cfb2:	e007      	b.n	cfc4 <_svfiprintf_r+0x1c4>
    cfb4:	ab05      	add	r3, sp, #20
    cfb6:	9300      	str	r3, [sp, #0]
    cfb8:	003a      	movs	r2, r7
    cfba:	4b0f      	ldr	r3, [pc, #60]	; (cff8 <_svfiprintf_r+0x1f8>)
    cfbc:	0029      	movs	r1, r5
    cfbe:	9802      	ldr	r0, [sp, #8]
    cfc0:	f000 f9ce 	bl	d360 <_printf_i>
    cfc4:	9003      	str	r0, [sp, #12]
    cfc6:	9b03      	ldr	r3, [sp, #12]
    cfc8:	3301      	adds	r3, #1
    cfca:	d004      	beq.n	cfd6 <_svfiprintf_r+0x1d6>
    cfcc:	696b      	ldr	r3, [r5, #20]
    cfce:	9a03      	ldr	r2, [sp, #12]
    cfd0:	189b      	adds	r3, r3, r2
    cfd2:	616b      	str	r3, [r5, #20]
    cfd4:	e735      	b.n	ce42 <_svfiprintf_r+0x42>
    cfd6:	89bb      	ldrh	r3, [r7, #12]
    cfd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cfda:	065b      	lsls	r3, r3, #25
    cfdc:	d501      	bpl.n	cfe2 <_svfiprintf_r+0x1e2>
    cfde:	2001      	movs	r0, #1
    cfe0:	4240      	negs	r0, r0
    cfe2:	b01f      	add	sp, #124	; 0x7c
    cfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfe6:	46c0      	nop			; (mov r8, r8)
    cfe8:	0000eca4 	.word	0x0000eca4
    cfec:	0000ecaa 	.word	0x0000ecaa
    cff0:	0000ecae 	.word	0x0000ecae
    cff4:	00000000 	.word	0x00000000
    cff8:	0000cd3d 	.word	0x0000cd3d

0000cffc <__sfputc_r>:
    cffc:	6893      	ldr	r3, [r2, #8]
    cffe:	b510      	push	{r4, lr}
    d000:	3b01      	subs	r3, #1
    d002:	6093      	str	r3, [r2, #8]
    d004:	2b00      	cmp	r3, #0
    d006:	da05      	bge.n	d014 <__sfputc_r+0x18>
    d008:	6994      	ldr	r4, [r2, #24]
    d00a:	42a3      	cmp	r3, r4
    d00c:	db08      	blt.n	d020 <__sfputc_r+0x24>
    d00e:	b2cb      	uxtb	r3, r1
    d010:	2b0a      	cmp	r3, #10
    d012:	d005      	beq.n	d020 <__sfputc_r+0x24>
    d014:	6813      	ldr	r3, [r2, #0]
    d016:	1c58      	adds	r0, r3, #1
    d018:	6010      	str	r0, [r2, #0]
    d01a:	7019      	strb	r1, [r3, #0]
    d01c:	b2c8      	uxtb	r0, r1
    d01e:	e001      	b.n	d024 <__sfputc_r+0x28>
    d020:	f7ff fbd2 	bl	c7c8 <__swbuf_r>
    d024:	bd10      	pop	{r4, pc}

0000d026 <__sfputs_r>:
    d026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d028:	0006      	movs	r6, r0
    d02a:	000f      	movs	r7, r1
    d02c:	0014      	movs	r4, r2
    d02e:	18d5      	adds	r5, r2, r3
    d030:	42ac      	cmp	r4, r5
    d032:	d008      	beq.n	d046 <__sfputs_r+0x20>
    d034:	7821      	ldrb	r1, [r4, #0]
    d036:	003a      	movs	r2, r7
    d038:	0030      	movs	r0, r6
    d03a:	f7ff ffdf 	bl	cffc <__sfputc_r>
    d03e:	3401      	adds	r4, #1
    d040:	1c43      	adds	r3, r0, #1
    d042:	d1f5      	bne.n	d030 <__sfputs_r+0xa>
    d044:	e000      	b.n	d048 <__sfputs_r+0x22>
    d046:	2000      	movs	r0, #0
    d048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000d04c <_vfiprintf_r>:
    d04c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d04e:	b09f      	sub	sp, #124	; 0x7c
    d050:	0006      	movs	r6, r0
    d052:	000f      	movs	r7, r1
    d054:	9202      	str	r2, [sp, #8]
    d056:	9305      	str	r3, [sp, #20]
    d058:	2800      	cmp	r0, #0
    d05a:	d004      	beq.n	d066 <_vfiprintf_r+0x1a>
    d05c:	6983      	ldr	r3, [r0, #24]
    d05e:	2b00      	cmp	r3, #0
    d060:	d101      	bne.n	d066 <_vfiprintf_r+0x1a>
    d062:	f7ff fd73 	bl	cb4c <__sinit>
    d066:	4b7f      	ldr	r3, [pc, #508]	; (d264 <_vfiprintf_r+0x218>)
    d068:	429f      	cmp	r7, r3
    d06a:	d101      	bne.n	d070 <_vfiprintf_r+0x24>
    d06c:	6877      	ldr	r7, [r6, #4]
    d06e:	e008      	b.n	d082 <_vfiprintf_r+0x36>
    d070:	4b7d      	ldr	r3, [pc, #500]	; (d268 <_vfiprintf_r+0x21c>)
    d072:	429f      	cmp	r7, r3
    d074:	d101      	bne.n	d07a <_vfiprintf_r+0x2e>
    d076:	68b7      	ldr	r7, [r6, #8]
    d078:	e003      	b.n	d082 <_vfiprintf_r+0x36>
    d07a:	4b7c      	ldr	r3, [pc, #496]	; (d26c <_vfiprintf_r+0x220>)
    d07c:	429f      	cmp	r7, r3
    d07e:	d100      	bne.n	d082 <_vfiprintf_r+0x36>
    d080:	68f7      	ldr	r7, [r6, #12]
    d082:	89bb      	ldrh	r3, [r7, #12]
    d084:	071b      	lsls	r3, r3, #28
    d086:	d50a      	bpl.n	d09e <_vfiprintf_r+0x52>
    d088:	693b      	ldr	r3, [r7, #16]
    d08a:	2b00      	cmp	r3, #0
    d08c:	d007      	beq.n	d09e <_vfiprintf_r+0x52>
    d08e:	2300      	movs	r3, #0
    d090:	ad06      	add	r5, sp, #24
    d092:	616b      	str	r3, [r5, #20]
    d094:	3320      	adds	r3, #32
    d096:	766b      	strb	r3, [r5, #25]
    d098:	3310      	adds	r3, #16
    d09a:	76ab      	strb	r3, [r5, #26]
    d09c:	e03d      	b.n	d11a <_vfiprintf_r+0xce>
    d09e:	0039      	movs	r1, r7
    d0a0:	0030      	movs	r0, r6
    d0a2:	f7ff fbe9 	bl	c878 <__swsetup_r>
    d0a6:	2800      	cmp	r0, #0
    d0a8:	d0f1      	beq.n	d08e <_vfiprintf_r+0x42>
    d0aa:	2001      	movs	r0, #1
    d0ac:	4240      	negs	r0, r0
    d0ae:	e0d6      	b.n	d25e <_vfiprintf_r+0x212>
    d0b0:	9a05      	ldr	r2, [sp, #20]
    d0b2:	1d11      	adds	r1, r2, #4
    d0b4:	6812      	ldr	r2, [r2, #0]
    d0b6:	9105      	str	r1, [sp, #20]
    d0b8:	2a00      	cmp	r2, #0
    d0ba:	da00      	bge.n	d0be <_vfiprintf_r+0x72>
    d0bc:	e07f      	b.n	d1be <_vfiprintf_r+0x172>
    d0be:	9209      	str	r2, [sp, #36]	; 0x24
    d0c0:	3401      	adds	r4, #1
    d0c2:	7823      	ldrb	r3, [r4, #0]
    d0c4:	2b2e      	cmp	r3, #46	; 0x2e
    d0c6:	d100      	bne.n	d0ca <_vfiprintf_r+0x7e>
    d0c8:	e08d      	b.n	d1e6 <_vfiprintf_r+0x19a>
    d0ca:	7821      	ldrb	r1, [r4, #0]
    d0cc:	2203      	movs	r2, #3
    d0ce:	4868      	ldr	r0, [pc, #416]	; (d270 <_vfiprintf_r+0x224>)
    d0d0:	f000 fb48 	bl	d764 <memchr>
    d0d4:	2800      	cmp	r0, #0
    d0d6:	d007      	beq.n	d0e8 <_vfiprintf_r+0x9c>
    d0d8:	4b65      	ldr	r3, [pc, #404]	; (d270 <_vfiprintf_r+0x224>)
    d0da:	682a      	ldr	r2, [r5, #0]
    d0dc:	1ac0      	subs	r0, r0, r3
    d0de:	2340      	movs	r3, #64	; 0x40
    d0e0:	4083      	lsls	r3, r0
    d0e2:	4313      	orrs	r3, r2
    d0e4:	602b      	str	r3, [r5, #0]
    d0e6:	3401      	adds	r4, #1
    d0e8:	7821      	ldrb	r1, [r4, #0]
    d0ea:	1c63      	adds	r3, r4, #1
    d0ec:	2206      	movs	r2, #6
    d0ee:	4861      	ldr	r0, [pc, #388]	; (d274 <_vfiprintf_r+0x228>)
    d0f0:	9302      	str	r3, [sp, #8]
    d0f2:	7629      	strb	r1, [r5, #24]
    d0f4:	f000 fb36 	bl	d764 <memchr>
    d0f8:	2800      	cmp	r0, #0
    d0fa:	d100      	bne.n	d0fe <_vfiprintf_r+0xb2>
    d0fc:	e09d      	b.n	d23a <_vfiprintf_r+0x1ee>
    d0fe:	4b5e      	ldr	r3, [pc, #376]	; (d278 <_vfiprintf_r+0x22c>)
    d100:	2b00      	cmp	r3, #0
    d102:	d000      	beq.n	d106 <_vfiprintf_r+0xba>
    d104:	e090      	b.n	d228 <_vfiprintf_r+0x1dc>
    d106:	2207      	movs	r2, #7
    d108:	9b05      	ldr	r3, [sp, #20]
    d10a:	3307      	adds	r3, #7
    d10c:	4393      	bics	r3, r2
    d10e:	3308      	adds	r3, #8
    d110:	9305      	str	r3, [sp, #20]
    d112:	696b      	ldr	r3, [r5, #20]
    d114:	9a03      	ldr	r2, [sp, #12]
    d116:	189b      	adds	r3, r3, r2
    d118:	616b      	str	r3, [r5, #20]
    d11a:	9c02      	ldr	r4, [sp, #8]
    d11c:	7823      	ldrb	r3, [r4, #0]
    d11e:	2b00      	cmp	r3, #0
    d120:	d104      	bne.n	d12c <_vfiprintf_r+0xe0>
    d122:	9b02      	ldr	r3, [sp, #8]
    d124:	1ae3      	subs	r3, r4, r3
    d126:	9304      	str	r3, [sp, #16]
    d128:	d012      	beq.n	d150 <_vfiprintf_r+0x104>
    d12a:	e003      	b.n	d134 <_vfiprintf_r+0xe8>
    d12c:	2b25      	cmp	r3, #37	; 0x25
    d12e:	d0f8      	beq.n	d122 <_vfiprintf_r+0xd6>
    d130:	3401      	adds	r4, #1
    d132:	e7f3      	b.n	d11c <_vfiprintf_r+0xd0>
    d134:	9b04      	ldr	r3, [sp, #16]
    d136:	9a02      	ldr	r2, [sp, #8]
    d138:	0039      	movs	r1, r7
    d13a:	0030      	movs	r0, r6
    d13c:	f7ff ff73 	bl	d026 <__sfputs_r>
    d140:	1c43      	adds	r3, r0, #1
    d142:	d100      	bne.n	d146 <_vfiprintf_r+0xfa>
    d144:	e086      	b.n	d254 <_vfiprintf_r+0x208>
    d146:	696a      	ldr	r2, [r5, #20]
    d148:	9b04      	ldr	r3, [sp, #16]
    d14a:	4694      	mov	ip, r2
    d14c:	4463      	add	r3, ip
    d14e:	616b      	str	r3, [r5, #20]
    d150:	7823      	ldrb	r3, [r4, #0]
    d152:	2b00      	cmp	r3, #0
    d154:	d07e      	beq.n	d254 <_vfiprintf_r+0x208>
    d156:	2201      	movs	r2, #1
    d158:	2300      	movs	r3, #0
    d15a:	4252      	negs	r2, r2
    d15c:	606a      	str	r2, [r5, #4]
    d15e:	a902      	add	r1, sp, #8
    d160:	3254      	adds	r2, #84	; 0x54
    d162:	1852      	adds	r2, r2, r1
    d164:	3401      	adds	r4, #1
    d166:	602b      	str	r3, [r5, #0]
    d168:	60eb      	str	r3, [r5, #12]
    d16a:	60ab      	str	r3, [r5, #8]
    d16c:	7013      	strb	r3, [r2, #0]
    d16e:	65ab      	str	r3, [r5, #88]	; 0x58
    d170:	7821      	ldrb	r1, [r4, #0]
    d172:	2205      	movs	r2, #5
    d174:	4841      	ldr	r0, [pc, #260]	; (d27c <_vfiprintf_r+0x230>)
    d176:	f000 faf5 	bl	d764 <memchr>
    d17a:	2800      	cmp	r0, #0
    d17c:	d008      	beq.n	d190 <_vfiprintf_r+0x144>
    d17e:	4b3f      	ldr	r3, [pc, #252]	; (d27c <_vfiprintf_r+0x230>)
    d180:	682a      	ldr	r2, [r5, #0]
    d182:	1ac0      	subs	r0, r0, r3
    d184:	2301      	movs	r3, #1
    d186:	4083      	lsls	r3, r0
    d188:	4313      	orrs	r3, r2
    d18a:	602b      	str	r3, [r5, #0]
    d18c:	3401      	adds	r4, #1
    d18e:	e7ef      	b.n	d170 <_vfiprintf_r+0x124>
    d190:	682b      	ldr	r3, [r5, #0]
    d192:	06da      	lsls	r2, r3, #27
    d194:	d504      	bpl.n	d1a0 <_vfiprintf_r+0x154>
    d196:	2253      	movs	r2, #83	; 0x53
    d198:	2120      	movs	r1, #32
    d19a:	a802      	add	r0, sp, #8
    d19c:	1812      	adds	r2, r2, r0
    d19e:	7011      	strb	r1, [r2, #0]
    d1a0:	071a      	lsls	r2, r3, #28
    d1a2:	d504      	bpl.n	d1ae <_vfiprintf_r+0x162>
    d1a4:	2253      	movs	r2, #83	; 0x53
    d1a6:	212b      	movs	r1, #43	; 0x2b
    d1a8:	a802      	add	r0, sp, #8
    d1aa:	1812      	adds	r2, r2, r0
    d1ac:	7011      	strb	r1, [r2, #0]
    d1ae:	7822      	ldrb	r2, [r4, #0]
    d1b0:	2a2a      	cmp	r2, #42	; 0x2a
    d1b2:	d100      	bne.n	d1b6 <_vfiprintf_r+0x16a>
    d1b4:	e77c      	b.n	d0b0 <_vfiprintf_r+0x64>
    d1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d1b8:	2000      	movs	r0, #0
    d1ba:	210a      	movs	r1, #10
    d1bc:	e005      	b.n	d1ca <_vfiprintf_r+0x17e>
    d1be:	4252      	negs	r2, r2
    d1c0:	60ea      	str	r2, [r5, #12]
    d1c2:	2202      	movs	r2, #2
    d1c4:	4313      	orrs	r3, r2
    d1c6:	602b      	str	r3, [r5, #0]
    d1c8:	e77a      	b.n	d0c0 <_vfiprintf_r+0x74>
    d1ca:	7822      	ldrb	r2, [r4, #0]
    d1cc:	3a30      	subs	r2, #48	; 0x30
    d1ce:	2a09      	cmp	r2, #9
    d1d0:	d804      	bhi.n	d1dc <_vfiprintf_r+0x190>
    d1d2:	434b      	muls	r3, r1
    d1d4:	3401      	adds	r4, #1
    d1d6:	189b      	adds	r3, r3, r2
    d1d8:	2001      	movs	r0, #1
    d1da:	e7f6      	b.n	d1ca <_vfiprintf_r+0x17e>
    d1dc:	2800      	cmp	r0, #0
    d1de:	d100      	bne.n	d1e2 <_vfiprintf_r+0x196>
    d1e0:	e76f      	b.n	d0c2 <_vfiprintf_r+0x76>
    d1e2:	9309      	str	r3, [sp, #36]	; 0x24
    d1e4:	e76d      	b.n	d0c2 <_vfiprintf_r+0x76>
    d1e6:	7863      	ldrb	r3, [r4, #1]
    d1e8:	2b2a      	cmp	r3, #42	; 0x2a
    d1ea:	d10a      	bne.n	d202 <_vfiprintf_r+0x1b6>
    d1ec:	9b05      	ldr	r3, [sp, #20]
    d1ee:	3402      	adds	r4, #2
    d1f0:	1d1a      	adds	r2, r3, #4
    d1f2:	681b      	ldr	r3, [r3, #0]
    d1f4:	9205      	str	r2, [sp, #20]
    d1f6:	2b00      	cmp	r3, #0
    d1f8:	da01      	bge.n	d1fe <_vfiprintf_r+0x1b2>
    d1fa:	2301      	movs	r3, #1
    d1fc:	425b      	negs	r3, r3
    d1fe:	9307      	str	r3, [sp, #28]
    d200:	e763      	b.n	d0ca <_vfiprintf_r+0x7e>
    d202:	2300      	movs	r3, #0
    d204:	200a      	movs	r0, #10
    d206:	001a      	movs	r2, r3
    d208:	3401      	adds	r4, #1
    d20a:	606b      	str	r3, [r5, #4]
    d20c:	7821      	ldrb	r1, [r4, #0]
    d20e:	3930      	subs	r1, #48	; 0x30
    d210:	2909      	cmp	r1, #9
    d212:	d804      	bhi.n	d21e <_vfiprintf_r+0x1d2>
    d214:	4342      	muls	r2, r0
    d216:	3401      	adds	r4, #1
    d218:	1852      	adds	r2, r2, r1
    d21a:	2301      	movs	r3, #1
    d21c:	e7f6      	b.n	d20c <_vfiprintf_r+0x1c0>
    d21e:	2b00      	cmp	r3, #0
    d220:	d100      	bne.n	d224 <_vfiprintf_r+0x1d8>
    d222:	e752      	b.n	d0ca <_vfiprintf_r+0x7e>
    d224:	9207      	str	r2, [sp, #28]
    d226:	e750      	b.n	d0ca <_vfiprintf_r+0x7e>
    d228:	ab05      	add	r3, sp, #20
    d22a:	9300      	str	r3, [sp, #0]
    d22c:	003a      	movs	r2, r7
    d22e:	4b14      	ldr	r3, [pc, #80]	; (d280 <_vfiprintf_r+0x234>)
    d230:	0029      	movs	r1, r5
    d232:	0030      	movs	r0, r6
    d234:	e000      	b.n	d238 <_vfiprintf_r+0x1ec>
    d236:	bf00      	nop
    d238:	e007      	b.n	d24a <_vfiprintf_r+0x1fe>
    d23a:	ab05      	add	r3, sp, #20
    d23c:	9300      	str	r3, [sp, #0]
    d23e:	003a      	movs	r2, r7
    d240:	4b0f      	ldr	r3, [pc, #60]	; (d280 <_vfiprintf_r+0x234>)
    d242:	0029      	movs	r1, r5
    d244:	0030      	movs	r0, r6
    d246:	f000 f88b 	bl	d360 <_printf_i>
    d24a:	9003      	str	r0, [sp, #12]
    d24c:	9b03      	ldr	r3, [sp, #12]
    d24e:	3301      	adds	r3, #1
    d250:	d000      	beq.n	d254 <_vfiprintf_r+0x208>
    d252:	e75e      	b.n	d112 <_vfiprintf_r+0xc6>
    d254:	89bb      	ldrh	r3, [r7, #12]
    d256:	065b      	lsls	r3, r3, #25
    d258:	d500      	bpl.n	d25c <_vfiprintf_r+0x210>
    d25a:	e726      	b.n	d0aa <_vfiprintf_r+0x5e>
    d25c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d25e:	b01f      	add	sp, #124	; 0x7c
    d260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d262:	46c0      	nop			; (mov r8, r8)
    d264:	0000ec44 	.word	0x0000ec44
    d268:	0000ec64 	.word	0x0000ec64
    d26c:	0000ec84 	.word	0x0000ec84
    d270:	0000ecaa 	.word	0x0000ecaa
    d274:	0000ecae 	.word	0x0000ecae
    d278:	00000000 	.word	0x00000000
    d27c:	0000eca4 	.word	0x0000eca4
    d280:	0000d027 	.word	0x0000d027

0000d284 <_printf_common>:
    d284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d286:	0017      	movs	r7, r2
    d288:	9301      	str	r3, [sp, #4]
    d28a:	688a      	ldr	r2, [r1, #8]
    d28c:	690b      	ldr	r3, [r1, #16]
    d28e:	9000      	str	r0, [sp, #0]
    d290:	000c      	movs	r4, r1
    d292:	4293      	cmp	r3, r2
    d294:	da00      	bge.n	d298 <_printf_common+0x14>
    d296:	0013      	movs	r3, r2
    d298:	0022      	movs	r2, r4
    d29a:	603b      	str	r3, [r7, #0]
    d29c:	3243      	adds	r2, #67	; 0x43
    d29e:	7812      	ldrb	r2, [r2, #0]
    d2a0:	2a00      	cmp	r2, #0
    d2a2:	d001      	beq.n	d2a8 <_printf_common+0x24>
    d2a4:	3301      	adds	r3, #1
    d2a6:	603b      	str	r3, [r7, #0]
    d2a8:	6823      	ldr	r3, [r4, #0]
    d2aa:	069b      	lsls	r3, r3, #26
    d2ac:	d502      	bpl.n	d2b4 <_printf_common+0x30>
    d2ae:	683b      	ldr	r3, [r7, #0]
    d2b0:	3302      	adds	r3, #2
    d2b2:	603b      	str	r3, [r7, #0]
    d2b4:	2506      	movs	r5, #6
    d2b6:	6823      	ldr	r3, [r4, #0]
    d2b8:	401d      	ands	r5, r3
    d2ba:	d01e      	beq.n	d2fa <_printf_common+0x76>
    d2bc:	0023      	movs	r3, r4
    d2be:	3343      	adds	r3, #67	; 0x43
    d2c0:	781b      	ldrb	r3, [r3, #0]
    d2c2:	1e5a      	subs	r2, r3, #1
    d2c4:	4193      	sbcs	r3, r2
    d2c6:	6822      	ldr	r2, [r4, #0]
    d2c8:	0692      	lsls	r2, r2, #26
    d2ca:	d51c      	bpl.n	d306 <_printf_common+0x82>
    d2cc:	2030      	movs	r0, #48	; 0x30
    d2ce:	18e1      	adds	r1, r4, r3
    d2d0:	3143      	adds	r1, #67	; 0x43
    d2d2:	7008      	strb	r0, [r1, #0]
    d2d4:	0021      	movs	r1, r4
    d2d6:	1c5a      	adds	r2, r3, #1
    d2d8:	3145      	adds	r1, #69	; 0x45
    d2da:	7809      	ldrb	r1, [r1, #0]
    d2dc:	18a2      	adds	r2, r4, r2
    d2de:	3243      	adds	r2, #67	; 0x43
    d2e0:	3302      	adds	r3, #2
    d2e2:	7011      	strb	r1, [r2, #0]
    d2e4:	e00f      	b.n	d306 <_printf_common+0x82>
    d2e6:	0022      	movs	r2, r4
    d2e8:	2301      	movs	r3, #1
    d2ea:	3219      	adds	r2, #25
    d2ec:	9901      	ldr	r1, [sp, #4]
    d2ee:	9800      	ldr	r0, [sp, #0]
    d2f0:	9e08      	ldr	r6, [sp, #32]
    d2f2:	47b0      	blx	r6
    d2f4:	1c43      	adds	r3, r0, #1
    d2f6:	d00e      	beq.n	d316 <_printf_common+0x92>
    d2f8:	3501      	adds	r5, #1
    d2fa:	68e3      	ldr	r3, [r4, #12]
    d2fc:	683a      	ldr	r2, [r7, #0]
    d2fe:	1a9b      	subs	r3, r3, r2
    d300:	429d      	cmp	r5, r3
    d302:	dbf0      	blt.n	d2e6 <_printf_common+0x62>
    d304:	e7da      	b.n	d2bc <_printf_common+0x38>
    d306:	0022      	movs	r2, r4
    d308:	9901      	ldr	r1, [sp, #4]
    d30a:	3243      	adds	r2, #67	; 0x43
    d30c:	9800      	ldr	r0, [sp, #0]
    d30e:	9d08      	ldr	r5, [sp, #32]
    d310:	47a8      	blx	r5
    d312:	1c43      	adds	r3, r0, #1
    d314:	d102      	bne.n	d31c <_printf_common+0x98>
    d316:	2001      	movs	r0, #1
    d318:	4240      	negs	r0, r0
    d31a:	e020      	b.n	d35e <_printf_common+0xda>
    d31c:	2306      	movs	r3, #6
    d31e:	6820      	ldr	r0, [r4, #0]
    d320:	68e1      	ldr	r1, [r4, #12]
    d322:	683a      	ldr	r2, [r7, #0]
    d324:	4003      	ands	r3, r0
    d326:	2500      	movs	r5, #0
    d328:	2b04      	cmp	r3, #4
    d32a:	d103      	bne.n	d334 <_printf_common+0xb0>
    d32c:	1a8d      	subs	r5, r1, r2
    d32e:	43eb      	mvns	r3, r5
    d330:	17db      	asrs	r3, r3, #31
    d332:	401d      	ands	r5, r3
    d334:	68a3      	ldr	r3, [r4, #8]
    d336:	6922      	ldr	r2, [r4, #16]
    d338:	4293      	cmp	r3, r2
    d33a:	dd01      	ble.n	d340 <_printf_common+0xbc>
    d33c:	1a9b      	subs	r3, r3, r2
    d33e:	18ed      	adds	r5, r5, r3
    d340:	2700      	movs	r7, #0
    d342:	42bd      	cmp	r5, r7
    d344:	d00a      	beq.n	d35c <_printf_common+0xd8>
    d346:	0022      	movs	r2, r4
    d348:	2301      	movs	r3, #1
    d34a:	321a      	adds	r2, #26
    d34c:	9901      	ldr	r1, [sp, #4]
    d34e:	9800      	ldr	r0, [sp, #0]
    d350:	9e08      	ldr	r6, [sp, #32]
    d352:	47b0      	blx	r6
    d354:	1c43      	adds	r3, r0, #1
    d356:	d0de      	beq.n	d316 <_printf_common+0x92>
    d358:	3701      	adds	r7, #1
    d35a:	e7f2      	b.n	d342 <_printf_common+0xbe>
    d35c:	2000      	movs	r0, #0
    d35e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000d360 <_printf_i>:
    d360:	b5f0      	push	{r4, r5, r6, r7, lr}
    d362:	b08b      	sub	sp, #44	; 0x2c
    d364:	9206      	str	r2, [sp, #24]
    d366:	000a      	movs	r2, r1
    d368:	3243      	adds	r2, #67	; 0x43
    d36a:	9307      	str	r3, [sp, #28]
    d36c:	9005      	str	r0, [sp, #20]
    d36e:	9204      	str	r2, [sp, #16]
    d370:	7e0a      	ldrb	r2, [r1, #24]
    d372:	000c      	movs	r4, r1
    d374:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d376:	2a6e      	cmp	r2, #110	; 0x6e
    d378:	d100      	bne.n	d37c <_printf_i+0x1c>
    d37a:	e0ab      	b.n	d4d4 <_printf_i+0x174>
    d37c:	d811      	bhi.n	d3a2 <_printf_i+0x42>
    d37e:	2a63      	cmp	r2, #99	; 0x63
    d380:	d022      	beq.n	d3c8 <_printf_i+0x68>
    d382:	d809      	bhi.n	d398 <_printf_i+0x38>
    d384:	2a00      	cmp	r2, #0
    d386:	d100      	bne.n	d38a <_printf_i+0x2a>
    d388:	e0b5      	b.n	d4f6 <_printf_i+0x196>
    d38a:	2a58      	cmp	r2, #88	; 0x58
    d38c:	d000      	beq.n	d390 <_printf_i+0x30>
    d38e:	e0c5      	b.n	d51c <_printf_i+0x1bc>
    d390:	3145      	adds	r1, #69	; 0x45
    d392:	700a      	strb	r2, [r1, #0]
    d394:	4a81      	ldr	r2, [pc, #516]	; (d59c <_printf_i+0x23c>)
    d396:	e04f      	b.n	d438 <_printf_i+0xd8>
    d398:	2a64      	cmp	r2, #100	; 0x64
    d39a:	d01d      	beq.n	d3d8 <_printf_i+0x78>
    d39c:	2a69      	cmp	r2, #105	; 0x69
    d39e:	d01b      	beq.n	d3d8 <_printf_i+0x78>
    d3a0:	e0bc      	b.n	d51c <_printf_i+0x1bc>
    d3a2:	2a73      	cmp	r2, #115	; 0x73
    d3a4:	d100      	bne.n	d3a8 <_printf_i+0x48>
    d3a6:	e0aa      	b.n	d4fe <_printf_i+0x19e>
    d3a8:	d809      	bhi.n	d3be <_printf_i+0x5e>
    d3aa:	2a6f      	cmp	r2, #111	; 0x6f
    d3ac:	d029      	beq.n	d402 <_printf_i+0xa2>
    d3ae:	2a70      	cmp	r2, #112	; 0x70
    d3b0:	d000      	beq.n	d3b4 <_printf_i+0x54>
    d3b2:	e0b3      	b.n	d51c <_printf_i+0x1bc>
    d3b4:	2220      	movs	r2, #32
    d3b6:	6809      	ldr	r1, [r1, #0]
    d3b8:	430a      	orrs	r2, r1
    d3ba:	6022      	str	r2, [r4, #0]
    d3bc:	e037      	b.n	d42e <_printf_i+0xce>
    d3be:	2a75      	cmp	r2, #117	; 0x75
    d3c0:	d01f      	beq.n	d402 <_printf_i+0xa2>
    d3c2:	2a78      	cmp	r2, #120	; 0x78
    d3c4:	d033      	beq.n	d42e <_printf_i+0xce>
    d3c6:	e0a9      	b.n	d51c <_printf_i+0x1bc>
    d3c8:	000e      	movs	r6, r1
    d3ca:	681a      	ldr	r2, [r3, #0]
    d3cc:	3642      	adds	r6, #66	; 0x42
    d3ce:	1d11      	adds	r1, r2, #4
    d3d0:	6019      	str	r1, [r3, #0]
    d3d2:	6813      	ldr	r3, [r2, #0]
    d3d4:	7033      	strb	r3, [r6, #0]
    d3d6:	e0a4      	b.n	d522 <_printf_i+0x1c2>
    d3d8:	6821      	ldr	r1, [r4, #0]
    d3da:	681a      	ldr	r2, [r3, #0]
    d3dc:	0608      	lsls	r0, r1, #24
    d3de:	d406      	bmi.n	d3ee <_printf_i+0x8e>
    d3e0:	0649      	lsls	r1, r1, #25
    d3e2:	d504      	bpl.n	d3ee <_printf_i+0x8e>
    d3e4:	1d11      	adds	r1, r2, #4
    d3e6:	6019      	str	r1, [r3, #0]
    d3e8:	2300      	movs	r3, #0
    d3ea:	5ed5      	ldrsh	r5, [r2, r3]
    d3ec:	e002      	b.n	d3f4 <_printf_i+0x94>
    d3ee:	1d11      	adds	r1, r2, #4
    d3f0:	6019      	str	r1, [r3, #0]
    d3f2:	6815      	ldr	r5, [r2, #0]
    d3f4:	2d00      	cmp	r5, #0
    d3f6:	da3b      	bge.n	d470 <_printf_i+0x110>
    d3f8:	232d      	movs	r3, #45	; 0x2d
    d3fa:	9a04      	ldr	r2, [sp, #16]
    d3fc:	426d      	negs	r5, r5
    d3fe:	7013      	strb	r3, [r2, #0]
    d400:	e036      	b.n	d470 <_printf_i+0x110>
    d402:	6821      	ldr	r1, [r4, #0]
    d404:	681a      	ldr	r2, [r3, #0]
    d406:	0608      	lsls	r0, r1, #24
    d408:	d406      	bmi.n	d418 <_printf_i+0xb8>
    d40a:	0649      	lsls	r1, r1, #25
    d40c:	d504      	bpl.n	d418 <_printf_i+0xb8>
    d40e:	6815      	ldr	r5, [r2, #0]
    d410:	1d11      	adds	r1, r2, #4
    d412:	6019      	str	r1, [r3, #0]
    d414:	b2ad      	uxth	r5, r5
    d416:	e002      	b.n	d41e <_printf_i+0xbe>
    d418:	1d11      	adds	r1, r2, #4
    d41a:	6019      	str	r1, [r3, #0]
    d41c:	6815      	ldr	r5, [r2, #0]
    d41e:	4b5f      	ldr	r3, [pc, #380]	; (d59c <_printf_i+0x23c>)
    d420:	7e22      	ldrb	r2, [r4, #24]
    d422:	9303      	str	r3, [sp, #12]
    d424:	2708      	movs	r7, #8
    d426:	2a6f      	cmp	r2, #111	; 0x6f
    d428:	d01d      	beq.n	d466 <_printf_i+0x106>
    d42a:	270a      	movs	r7, #10
    d42c:	e01b      	b.n	d466 <_printf_i+0x106>
    d42e:	0022      	movs	r2, r4
    d430:	2178      	movs	r1, #120	; 0x78
    d432:	3245      	adds	r2, #69	; 0x45
    d434:	7011      	strb	r1, [r2, #0]
    d436:	4a5a      	ldr	r2, [pc, #360]	; (d5a0 <_printf_i+0x240>)
    d438:	6819      	ldr	r1, [r3, #0]
    d43a:	9203      	str	r2, [sp, #12]
    d43c:	1d08      	adds	r0, r1, #4
    d43e:	6822      	ldr	r2, [r4, #0]
    d440:	6018      	str	r0, [r3, #0]
    d442:	680d      	ldr	r5, [r1, #0]
    d444:	0610      	lsls	r0, r2, #24
    d446:	d402      	bmi.n	d44e <_printf_i+0xee>
    d448:	0650      	lsls	r0, r2, #25
    d44a:	d500      	bpl.n	d44e <_printf_i+0xee>
    d44c:	b2ad      	uxth	r5, r5
    d44e:	07d3      	lsls	r3, r2, #31
    d450:	d502      	bpl.n	d458 <_printf_i+0xf8>
    d452:	2320      	movs	r3, #32
    d454:	431a      	orrs	r2, r3
    d456:	6022      	str	r2, [r4, #0]
    d458:	2710      	movs	r7, #16
    d45a:	2d00      	cmp	r5, #0
    d45c:	d103      	bne.n	d466 <_printf_i+0x106>
    d45e:	2320      	movs	r3, #32
    d460:	6822      	ldr	r2, [r4, #0]
    d462:	439a      	bics	r2, r3
    d464:	6022      	str	r2, [r4, #0]
    d466:	0023      	movs	r3, r4
    d468:	2200      	movs	r2, #0
    d46a:	3343      	adds	r3, #67	; 0x43
    d46c:	701a      	strb	r2, [r3, #0]
    d46e:	e002      	b.n	d476 <_printf_i+0x116>
    d470:	270a      	movs	r7, #10
    d472:	4b4a      	ldr	r3, [pc, #296]	; (d59c <_printf_i+0x23c>)
    d474:	9303      	str	r3, [sp, #12]
    d476:	6863      	ldr	r3, [r4, #4]
    d478:	60a3      	str	r3, [r4, #8]
    d47a:	2b00      	cmp	r3, #0
    d47c:	db09      	blt.n	d492 <_printf_i+0x132>
    d47e:	2204      	movs	r2, #4
    d480:	6821      	ldr	r1, [r4, #0]
    d482:	4391      	bics	r1, r2
    d484:	6021      	str	r1, [r4, #0]
    d486:	2d00      	cmp	r5, #0
    d488:	d105      	bne.n	d496 <_printf_i+0x136>
    d48a:	9e04      	ldr	r6, [sp, #16]
    d48c:	2b00      	cmp	r3, #0
    d48e:	d011      	beq.n	d4b4 <_printf_i+0x154>
    d490:	e07b      	b.n	d58a <_printf_i+0x22a>
    d492:	2d00      	cmp	r5, #0
    d494:	d079      	beq.n	d58a <_printf_i+0x22a>
    d496:	9e04      	ldr	r6, [sp, #16]
    d498:	0028      	movs	r0, r5
    d49a:	0039      	movs	r1, r7
    d49c:	f7fe fdd2 	bl	c044 <__aeabi_uidivmod>
    d4a0:	9b03      	ldr	r3, [sp, #12]
    d4a2:	3e01      	subs	r6, #1
    d4a4:	5c5b      	ldrb	r3, [r3, r1]
    d4a6:	0028      	movs	r0, r5
    d4a8:	7033      	strb	r3, [r6, #0]
    d4aa:	0039      	movs	r1, r7
    d4ac:	f7fe fd44 	bl	bf38 <__aeabi_uidiv>
    d4b0:	1e05      	subs	r5, r0, #0
    d4b2:	d1f1      	bne.n	d498 <_printf_i+0x138>
    d4b4:	2f08      	cmp	r7, #8
    d4b6:	d109      	bne.n	d4cc <_printf_i+0x16c>
    d4b8:	6823      	ldr	r3, [r4, #0]
    d4ba:	07db      	lsls	r3, r3, #31
    d4bc:	d506      	bpl.n	d4cc <_printf_i+0x16c>
    d4be:	6863      	ldr	r3, [r4, #4]
    d4c0:	6922      	ldr	r2, [r4, #16]
    d4c2:	4293      	cmp	r3, r2
    d4c4:	dc02      	bgt.n	d4cc <_printf_i+0x16c>
    d4c6:	2330      	movs	r3, #48	; 0x30
    d4c8:	3e01      	subs	r6, #1
    d4ca:	7033      	strb	r3, [r6, #0]
    d4cc:	9b04      	ldr	r3, [sp, #16]
    d4ce:	1b9b      	subs	r3, r3, r6
    d4d0:	6123      	str	r3, [r4, #16]
    d4d2:	e02b      	b.n	d52c <_printf_i+0x1cc>
    d4d4:	6809      	ldr	r1, [r1, #0]
    d4d6:	681a      	ldr	r2, [r3, #0]
    d4d8:	0608      	lsls	r0, r1, #24
    d4da:	d407      	bmi.n	d4ec <_printf_i+0x18c>
    d4dc:	0649      	lsls	r1, r1, #25
    d4de:	d505      	bpl.n	d4ec <_printf_i+0x18c>
    d4e0:	1d11      	adds	r1, r2, #4
    d4e2:	6019      	str	r1, [r3, #0]
    d4e4:	6813      	ldr	r3, [r2, #0]
    d4e6:	8aa2      	ldrh	r2, [r4, #20]
    d4e8:	801a      	strh	r2, [r3, #0]
    d4ea:	e004      	b.n	d4f6 <_printf_i+0x196>
    d4ec:	1d11      	adds	r1, r2, #4
    d4ee:	6019      	str	r1, [r3, #0]
    d4f0:	6813      	ldr	r3, [r2, #0]
    d4f2:	6962      	ldr	r2, [r4, #20]
    d4f4:	601a      	str	r2, [r3, #0]
    d4f6:	2300      	movs	r3, #0
    d4f8:	9e04      	ldr	r6, [sp, #16]
    d4fa:	6123      	str	r3, [r4, #16]
    d4fc:	e016      	b.n	d52c <_printf_i+0x1cc>
    d4fe:	681a      	ldr	r2, [r3, #0]
    d500:	1d11      	adds	r1, r2, #4
    d502:	6019      	str	r1, [r3, #0]
    d504:	6816      	ldr	r6, [r2, #0]
    d506:	2100      	movs	r1, #0
    d508:	6862      	ldr	r2, [r4, #4]
    d50a:	0030      	movs	r0, r6
    d50c:	f000 f92a 	bl	d764 <memchr>
    d510:	2800      	cmp	r0, #0
    d512:	d001      	beq.n	d518 <_printf_i+0x1b8>
    d514:	1b80      	subs	r0, r0, r6
    d516:	6060      	str	r0, [r4, #4]
    d518:	6863      	ldr	r3, [r4, #4]
    d51a:	e003      	b.n	d524 <_printf_i+0x1c4>
    d51c:	0026      	movs	r6, r4
    d51e:	3642      	adds	r6, #66	; 0x42
    d520:	7032      	strb	r2, [r6, #0]
    d522:	2301      	movs	r3, #1
    d524:	6123      	str	r3, [r4, #16]
    d526:	2300      	movs	r3, #0
    d528:	9a04      	ldr	r2, [sp, #16]
    d52a:	7013      	strb	r3, [r2, #0]
    d52c:	9b07      	ldr	r3, [sp, #28]
    d52e:	aa09      	add	r2, sp, #36	; 0x24
    d530:	9300      	str	r3, [sp, #0]
    d532:	0021      	movs	r1, r4
    d534:	9b06      	ldr	r3, [sp, #24]
    d536:	9805      	ldr	r0, [sp, #20]
    d538:	f7ff fea4 	bl	d284 <_printf_common>
    d53c:	1c43      	adds	r3, r0, #1
    d53e:	d102      	bne.n	d546 <_printf_i+0x1e6>
    d540:	2001      	movs	r0, #1
    d542:	4240      	negs	r0, r0
    d544:	e027      	b.n	d596 <_printf_i+0x236>
    d546:	6923      	ldr	r3, [r4, #16]
    d548:	0032      	movs	r2, r6
    d54a:	9906      	ldr	r1, [sp, #24]
    d54c:	9805      	ldr	r0, [sp, #20]
    d54e:	9d07      	ldr	r5, [sp, #28]
    d550:	47a8      	blx	r5
    d552:	1c43      	adds	r3, r0, #1
    d554:	d0f4      	beq.n	d540 <_printf_i+0x1e0>
    d556:	6823      	ldr	r3, [r4, #0]
    d558:	2500      	movs	r5, #0
    d55a:	079b      	lsls	r3, r3, #30
    d55c:	d40f      	bmi.n	d57e <_printf_i+0x21e>
    d55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d560:	68e0      	ldr	r0, [r4, #12]
    d562:	4298      	cmp	r0, r3
    d564:	da17      	bge.n	d596 <_printf_i+0x236>
    d566:	0018      	movs	r0, r3
    d568:	e015      	b.n	d596 <_printf_i+0x236>
    d56a:	0022      	movs	r2, r4
    d56c:	2301      	movs	r3, #1
    d56e:	3219      	adds	r2, #25
    d570:	9906      	ldr	r1, [sp, #24]
    d572:	9805      	ldr	r0, [sp, #20]
    d574:	9e07      	ldr	r6, [sp, #28]
    d576:	47b0      	blx	r6
    d578:	1c43      	adds	r3, r0, #1
    d57a:	d0e1      	beq.n	d540 <_printf_i+0x1e0>
    d57c:	3501      	adds	r5, #1
    d57e:	68e3      	ldr	r3, [r4, #12]
    d580:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d582:	1a9b      	subs	r3, r3, r2
    d584:	429d      	cmp	r5, r3
    d586:	dbf0      	blt.n	d56a <_printf_i+0x20a>
    d588:	e7e9      	b.n	d55e <_printf_i+0x1fe>
    d58a:	0026      	movs	r6, r4
    d58c:	9b03      	ldr	r3, [sp, #12]
    d58e:	3642      	adds	r6, #66	; 0x42
    d590:	781b      	ldrb	r3, [r3, #0]
    d592:	7033      	strb	r3, [r6, #0]
    d594:	e78e      	b.n	d4b4 <_printf_i+0x154>
    d596:	b00b      	add	sp, #44	; 0x2c
    d598:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d59a:	46c0      	nop			; (mov r8, r8)
    d59c:	0000ecb5 	.word	0x0000ecb5
    d5a0:	0000ecc6 	.word	0x0000ecc6

0000d5a4 <_putc_r>:
    d5a4:	b570      	push	{r4, r5, r6, lr}
    d5a6:	0006      	movs	r6, r0
    d5a8:	000d      	movs	r5, r1
    d5aa:	0014      	movs	r4, r2
    d5ac:	2800      	cmp	r0, #0
    d5ae:	d004      	beq.n	d5ba <_putc_r+0x16>
    d5b0:	6983      	ldr	r3, [r0, #24]
    d5b2:	2b00      	cmp	r3, #0
    d5b4:	d101      	bne.n	d5ba <_putc_r+0x16>
    d5b6:	f7ff fac9 	bl	cb4c <__sinit>
    d5ba:	4b12      	ldr	r3, [pc, #72]	; (d604 <_putc_r+0x60>)
    d5bc:	429c      	cmp	r4, r3
    d5be:	d101      	bne.n	d5c4 <_putc_r+0x20>
    d5c0:	6874      	ldr	r4, [r6, #4]
    d5c2:	e008      	b.n	d5d6 <_putc_r+0x32>
    d5c4:	4b10      	ldr	r3, [pc, #64]	; (d608 <_putc_r+0x64>)
    d5c6:	429c      	cmp	r4, r3
    d5c8:	d101      	bne.n	d5ce <_putc_r+0x2a>
    d5ca:	68b4      	ldr	r4, [r6, #8]
    d5cc:	e003      	b.n	d5d6 <_putc_r+0x32>
    d5ce:	4b0f      	ldr	r3, [pc, #60]	; (d60c <_putc_r+0x68>)
    d5d0:	429c      	cmp	r4, r3
    d5d2:	d100      	bne.n	d5d6 <_putc_r+0x32>
    d5d4:	68f4      	ldr	r4, [r6, #12]
    d5d6:	68a3      	ldr	r3, [r4, #8]
    d5d8:	3b01      	subs	r3, #1
    d5da:	60a3      	str	r3, [r4, #8]
    d5dc:	2b00      	cmp	r3, #0
    d5de:	da05      	bge.n	d5ec <_putc_r+0x48>
    d5e0:	69a2      	ldr	r2, [r4, #24]
    d5e2:	4293      	cmp	r3, r2
    d5e4:	db08      	blt.n	d5f8 <_putc_r+0x54>
    d5e6:	b2eb      	uxtb	r3, r5
    d5e8:	2b0a      	cmp	r3, #10
    d5ea:	d005      	beq.n	d5f8 <_putc_r+0x54>
    d5ec:	6823      	ldr	r3, [r4, #0]
    d5ee:	b2e8      	uxtb	r0, r5
    d5f0:	1c5a      	adds	r2, r3, #1
    d5f2:	6022      	str	r2, [r4, #0]
    d5f4:	701d      	strb	r5, [r3, #0]
    d5f6:	e004      	b.n	d602 <_putc_r+0x5e>
    d5f8:	0022      	movs	r2, r4
    d5fa:	0029      	movs	r1, r5
    d5fc:	0030      	movs	r0, r6
    d5fe:	f7ff f8e3 	bl	c7c8 <__swbuf_r>
    d602:	bd70      	pop	{r4, r5, r6, pc}
    d604:	0000ec44 	.word	0x0000ec44
    d608:	0000ec64 	.word	0x0000ec64
    d60c:	0000ec84 	.word	0x0000ec84

0000d610 <__sread>:
    d610:	b570      	push	{r4, r5, r6, lr}
    d612:	000c      	movs	r4, r1
    d614:	250e      	movs	r5, #14
    d616:	5f49      	ldrsh	r1, [r1, r5]
    d618:	f000 f8d6 	bl	d7c8 <_read_r>
    d61c:	2800      	cmp	r0, #0
    d61e:	db03      	blt.n	d628 <__sread+0x18>
    d620:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d622:	181b      	adds	r3, r3, r0
    d624:	6563      	str	r3, [r4, #84]	; 0x54
    d626:	e003      	b.n	d630 <__sread+0x20>
    d628:	89a2      	ldrh	r2, [r4, #12]
    d62a:	4b02      	ldr	r3, [pc, #8]	; (d634 <__sread+0x24>)
    d62c:	4013      	ands	r3, r2
    d62e:	81a3      	strh	r3, [r4, #12]
    d630:	bd70      	pop	{r4, r5, r6, pc}
    d632:	46c0      	nop			; (mov r8, r8)
    d634:	ffffefff 	.word	0xffffefff

0000d638 <__swrite>:
    d638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d63a:	001f      	movs	r7, r3
    d63c:	898b      	ldrh	r3, [r1, #12]
    d63e:	0005      	movs	r5, r0
    d640:	000c      	movs	r4, r1
    d642:	0016      	movs	r6, r2
    d644:	05db      	lsls	r3, r3, #23
    d646:	d505      	bpl.n	d654 <__swrite+0x1c>
    d648:	230e      	movs	r3, #14
    d64a:	5ec9      	ldrsh	r1, [r1, r3]
    d64c:	2200      	movs	r2, #0
    d64e:	2302      	movs	r3, #2
    d650:	f000 f874 	bl	d73c <_lseek_r>
    d654:	89a2      	ldrh	r2, [r4, #12]
    d656:	4b05      	ldr	r3, [pc, #20]	; (d66c <__swrite+0x34>)
    d658:	0028      	movs	r0, r5
    d65a:	4013      	ands	r3, r2
    d65c:	81a3      	strh	r3, [r4, #12]
    d65e:	0032      	movs	r2, r6
    d660:	230e      	movs	r3, #14
    d662:	5ee1      	ldrsh	r1, [r4, r3]
    d664:	003b      	movs	r3, r7
    d666:	f000 f81f 	bl	d6a8 <_write_r>
    d66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d66c:	ffffefff 	.word	0xffffefff

0000d670 <__sseek>:
    d670:	b570      	push	{r4, r5, r6, lr}
    d672:	000c      	movs	r4, r1
    d674:	250e      	movs	r5, #14
    d676:	5f49      	ldrsh	r1, [r1, r5]
    d678:	f000 f860 	bl	d73c <_lseek_r>
    d67c:	89a3      	ldrh	r3, [r4, #12]
    d67e:	1c42      	adds	r2, r0, #1
    d680:	d103      	bne.n	d68a <__sseek+0x1a>
    d682:	4a05      	ldr	r2, [pc, #20]	; (d698 <__sseek+0x28>)
    d684:	4013      	ands	r3, r2
    d686:	81a3      	strh	r3, [r4, #12]
    d688:	e004      	b.n	d694 <__sseek+0x24>
    d68a:	2280      	movs	r2, #128	; 0x80
    d68c:	0152      	lsls	r2, r2, #5
    d68e:	4313      	orrs	r3, r2
    d690:	81a3      	strh	r3, [r4, #12]
    d692:	6560      	str	r0, [r4, #84]	; 0x54
    d694:	bd70      	pop	{r4, r5, r6, pc}
    d696:	46c0      	nop			; (mov r8, r8)
    d698:	ffffefff 	.word	0xffffefff

0000d69c <__sclose>:
    d69c:	b510      	push	{r4, lr}
    d69e:	230e      	movs	r3, #14
    d6a0:	5ec9      	ldrsh	r1, [r1, r3]
    d6a2:	f000 f815 	bl	d6d0 <_close_r>
    d6a6:	bd10      	pop	{r4, pc}

0000d6a8 <_write_r>:
    d6a8:	b570      	push	{r4, r5, r6, lr}
    d6aa:	0005      	movs	r5, r0
    d6ac:	0008      	movs	r0, r1
    d6ae:	0011      	movs	r1, r2
    d6b0:	2200      	movs	r2, #0
    d6b2:	4c06      	ldr	r4, [pc, #24]	; (d6cc <_write_r+0x24>)
    d6b4:	6022      	str	r2, [r4, #0]
    d6b6:	001a      	movs	r2, r3
    d6b8:	f7fc fc78 	bl	9fac <_write>
    d6bc:	1c43      	adds	r3, r0, #1
    d6be:	d103      	bne.n	d6c8 <_write_r+0x20>
    d6c0:	6823      	ldr	r3, [r4, #0]
    d6c2:	2b00      	cmp	r3, #0
    d6c4:	d000      	beq.n	d6c8 <_write_r+0x20>
    d6c6:	602b      	str	r3, [r5, #0]
    d6c8:	bd70      	pop	{r4, r5, r6, pc}
    d6ca:	46c0      	nop			; (mov r8, r8)
    d6cc:	200004d0 	.word	0x200004d0

0000d6d0 <_close_r>:
    d6d0:	2300      	movs	r3, #0
    d6d2:	b570      	push	{r4, r5, r6, lr}
    d6d4:	4c06      	ldr	r4, [pc, #24]	; (d6f0 <_close_r+0x20>)
    d6d6:	0005      	movs	r5, r0
    d6d8:	0008      	movs	r0, r1
    d6da:	6023      	str	r3, [r4, #0]
    d6dc:	f7fc fcba 	bl	a054 <_close>
    d6e0:	1c43      	adds	r3, r0, #1
    d6e2:	d103      	bne.n	d6ec <_close_r+0x1c>
    d6e4:	6823      	ldr	r3, [r4, #0]
    d6e6:	2b00      	cmp	r3, #0
    d6e8:	d000      	beq.n	d6ec <_close_r+0x1c>
    d6ea:	602b      	str	r3, [r5, #0]
    d6ec:	bd70      	pop	{r4, r5, r6, pc}
    d6ee:	46c0      	nop			; (mov r8, r8)
    d6f0:	200004d0 	.word	0x200004d0

0000d6f4 <_fstat_r>:
    d6f4:	2300      	movs	r3, #0
    d6f6:	b570      	push	{r4, r5, r6, lr}
    d6f8:	4c06      	ldr	r4, [pc, #24]	; (d714 <_fstat_r+0x20>)
    d6fa:	0005      	movs	r5, r0
    d6fc:	0008      	movs	r0, r1
    d6fe:	0011      	movs	r1, r2
    d700:	6023      	str	r3, [r4, #0]
    d702:	f7fc fcb1 	bl	a068 <_fstat>
    d706:	1c43      	adds	r3, r0, #1
    d708:	d103      	bne.n	d712 <_fstat_r+0x1e>
    d70a:	6823      	ldr	r3, [r4, #0]
    d70c:	2b00      	cmp	r3, #0
    d70e:	d000      	beq.n	d712 <_fstat_r+0x1e>
    d710:	602b      	str	r3, [r5, #0]
    d712:	bd70      	pop	{r4, r5, r6, pc}
    d714:	200004d0 	.word	0x200004d0

0000d718 <_isatty_r>:
    d718:	2300      	movs	r3, #0
    d71a:	b570      	push	{r4, r5, r6, lr}
    d71c:	4c06      	ldr	r4, [pc, #24]	; (d738 <_isatty_r+0x20>)
    d71e:	0005      	movs	r5, r0
    d720:	0008      	movs	r0, r1
    d722:	6023      	str	r3, [r4, #0]
    d724:	f7fc fcae 	bl	a084 <_isatty>
    d728:	1c43      	adds	r3, r0, #1
    d72a:	d103      	bne.n	d734 <_isatty_r+0x1c>
    d72c:	6823      	ldr	r3, [r4, #0]
    d72e:	2b00      	cmp	r3, #0
    d730:	d000      	beq.n	d734 <_isatty_r+0x1c>
    d732:	602b      	str	r3, [r5, #0]
    d734:	bd70      	pop	{r4, r5, r6, pc}
    d736:	46c0      	nop			; (mov r8, r8)
    d738:	200004d0 	.word	0x200004d0

0000d73c <_lseek_r>:
    d73c:	b570      	push	{r4, r5, r6, lr}
    d73e:	0005      	movs	r5, r0
    d740:	0008      	movs	r0, r1
    d742:	0011      	movs	r1, r2
    d744:	2200      	movs	r2, #0
    d746:	4c06      	ldr	r4, [pc, #24]	; (d760 <_lseek_r+0x24>)
    d748:	6022      	str	r2, [r4, #0]
    d74a:	001a      	movs	r2, r3
    d74c:	f7fc fca4 	bl	a098 <_lseek>
    d750:	1c43      	adds	r3, r0, #1
    d752:	d103      	bne.n	d75c <_lseek_r+0x20>
    d754:	6823      	ldr	r3, [r4, #0]
    d756:	2b00      	cmp	r3, #0
    d758:	d000      	beq.n	d75c <_lseek_r+0x20>
    d75a:	602b      	str	r3, [r5, #0]
    d75c:	bd70      	pop	{r4, r5, r6, pc}
    d75e:	46c0      	nop			; (mov r8, r8)
    d760:	200004d0 	.word	0x200004d0

0000d764 <memchr>:
    d764:	b2c9      	uxtb	r1, r1
    d766:	1882      	adds	r2, r0, r2
    d768:	4290      	cmp	r0, r2
    d76a:	d004      	beq.n	d776 <memchr+0x12>
    d76c:	7803      	ldrb	r3, [r0, #0]
    d76e:	428b      	cmp	r3, r1
    d770:	d002      	beq.n	d778 <memchr+0x14>
    d772:	3001      	adds	r0, #1
    d774:	e7f8      	b.n	d768 <memchr+0x4>
    d776:	2000      	movs	r0, #0
    d778:	4770      	bx	lr

0000d77a <_realloc_r>:
    d77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d77c:	0006      	movs	r6, r0
    d77e:	000c      	movs	r4, r1
    d780:	0015      	movs	r5, r2
    d782:	2900      	cmp	r1, #0
    d784:	d104      	bne.n	d790 <_realloc_r+0x16>
    d786:	0011      	movs	r1, r2
    d788:	f7fe fe14 	bl	c3b4 <_malloc_r>
    d78c:	0004      	movs	r4, r0
    d78e:	e018      	b.n	d7c2 <_realloc_r+0x48>
    d790:	2a00      	cmp	r2, #0
    d792:	d103      	bne.n	d79c <_realloc_r+0x22>
    d794:	f7fe fdc8 	bl	c328 <_free_r>
    d798:	002c      	movs	r4, r5
    d79a:	e012      	b.n	d7c2 <_realloc_r+0x48>
    d79c:	f000 f828 	bl	d7f0 <_malloc_usable_size_r>
    d7a0:	4285      	cmp	r5, r0
    d7a2:	d90e      	bls.n	d7c2 <_realloc_r+0x48>
    d7a4:	0029      	movs	r1, r5
    d7a6:	0030      	movs	r0, r6
    d7a8:	f7fe fe04 	bl	c3b4 <_malloc_r>
    d7ac:	1e07      	subs	r7, r0, #0
    d7ae:	d007      	beq.n	d7c0 <_realloc_r+0x46>
    d7b0:	0021      	movs	r1, r4
    d7b2:	002a      	movs	r2, r5
    d7b4:	f7fe fd92 	bl	c2dc <memcpy>
    d7b8:	0021      	movs	r1, r4
    d7ba:	0030      	movs	r0, r6
    d7bc:	f7fe fdb4 	bl	c328 <_free_r>
    d7c0:	003c      	movs	r4, r7
    d7c2:	0020      	movs	r0, r4
    d7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000d7c8 <_read_r>:
    d7c8:	b570      	push	{r4, r5, r6, lr}
    d7ca:	0005      	movs	r5, r0
    d7cc:	0008      	movs	r0, r1
    d7ce:	0011      	movs	r1, r2
    d7d0:	2200      	movs	r2, #0
    d7d2:	4c06      	ldr	r4, [pc, #24]	; (d7ec <_read_r+0x24>)
    d7d4:	6022      	str	r2, [r4, #0]
    d7d6:	001a      	movs	r2, r3
    d7d8:	f7fc fbbe 	bl	9f58 <_read>
    d7dc:	1c43      	adds	r3, r0, #1
    d7de:	d103      	bne.n	d7e8 <_read_r+0x20>
    d7e0:	6823      	ldr	r3, [r4, #0]
    d7e2:	2b00      	cmp	r3, #0
    d7e4:	d000      	beq.n	d7e8 <_read_r+0x20>
    d7e6:	602b      	str	r3, [r5, #0]
    d7e8:	bd70      	pop	{r4, r5, r6, pc}
    d7ea:	46c0      	nop			; (mov r8, r8)
    d7ec:	200004d0 	.word	0x200004d0

0000d7f0 <_malloc_usable_size_r>:
    d7f0:	1f0b      	subs	r3, r1, #4
    d7f2:	681a      	ldr	r2, [r3, #0]
    d7f4:	1f10      	subs	r0, r2, #4
    d7f6:	2a00      	cmp	r2, #0
    d7f8:	da04      	bge.n	d804 <_malloc_usable_size_r+0x14>
    d7fa:	1889      	adds	r1, r1, r2
    d7fc:	3904      	subs	r1, #4
    d7fe:	680b      	ldr	r3, [r1, #0]
    d800:	18d0      	adds	r0, r2, r3
    d802:	3804      	subs	r0, #4
    d804:	4770      	bx	lr
    d806:	0000      	movs	r0, r0
    d808:	50504128 	.word	0x50504128
    d80c:	52452829 	.word	0x52452829
    d810:	255b2952 	.word	0x255b2952
    d814:	255b5d73 	.word	0x255b5d73
    d818:	00005d64 	.word	0x00005d64
    d81c:	61766e69 	.word	0x61766e69
    d820:	6564696c 	.word	0x6564696c
    d824:	636f6920 	.word	0x636f6920
    d828:	6320746c 	.word	0x6320746c
    d82c:	0000646d 	.word	0x0000646d

0000d830 <__FUNCTION__.14003>:
    d830:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    d840:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
    d850:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
    d860:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    d870:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
    d880:	74207075 63206568 00706968 66696828     up the chip.(hif
    d890:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
    d8a0:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
    d8b0:	66696828 64612029 73657264 75622073     (hif) address bu
    d8c0:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
    d8d0:	70757272 20646574 6b636170 53207465     rrupted packet S
    d8e0:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
    d8f0:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
    d900:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
    d910:	6361626c 7369206b 746f6e20 67657220     lback is not reg
    d920:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
    d930:	626c6c61 206b6361 6e207369 7220746f     allback is not r
    d940:	73696765 65726574 00000064 2061744f     egistered...Ota 
    d950:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
    d960:	69676572 72657473 00006465 70797243     registered..Cryp
    d970:	63206f74 626c6c61 206b6361 6e207369     to callback is n
    d980:	7220746f 73696765 65726574 00000064     ot registered...
    d990:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
    d9a0:	6f6e2073 65722074 74736967 64657265     s not registered
    d9b0:	00000000 66696828 6e692029 696c6176     ....(hif) invali
    d9c0:	72672064 2070756f 00004449 66696828     d group ID..(hif
    d9d0:	6f682029 61207473 64207070 276e6469     ) host app didn'
    d9e0:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
    d9f0:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
    da00:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
    da10:	61462029 2065736c 65746e69 70757272     ) False interrup
    da20:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
    da30:	74206c69 6552206f 69206461 7265746e     il to Read inter
    da40:	74707572 67657220 00000000 46494828     rupt reg....(HIF
    da50:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
    da60:	746e6920 75727265 25207470 72742064      interrupt %d tr
    da70:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
    da80:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
    da90:	72612064 656d7567 0000746e 20505041     d argument..APP 
    daa0:	75716552 65747365 69532064 6920657a     Requested Size i
    dab0:	616c2073 72656772 61687420 6874206e     s larger than th
    dac0:	65722065 65766963 75622064 72656666     e recived buffer
    dad0:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
    dae0:	00000000 20505041 75716552 65747365     ....APP Requeste
    daf0:	64412064 73657264 65622073 646e6f79     d Address beyond
    db00:	65687420 63657220 64657669 66756220      the recived buf
    db10:	20726566 72646461 20737365 20646e61     fer address and 
    db20:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
    db30:	0000000a 00001a14 000019e4 000019dc     ................
    db40:	000019f4 000019ec 00001a0c 000019fc     ................
    db50:	00001a04                                ....

0000db54 <__FUNCTION__.13068>:
    db54:	5f666968 646e6573 00000000              hif_send....

0000db60 <__FUNCTION__.13078>:
    db60:	5f666968 00727369                       hif_isr.

0000db68 <__FUNCTION__.13084>:
    db68:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000db78 <__FUNCTION__.13096>:
    db78:	5f666968 65636572 00657669              hif_receive.

0000db84 <__FUNCTION__.13112>:
    db84:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    db94:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
    dba4:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
    dbb4:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
    dbc4:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    dbd4:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
    dbe4:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
    dbf4:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
    dc04:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
    dc14:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
    dc24:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
    dc34:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
    dc44:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
    dc54:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
    dc64:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
    dc74:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
    dc84:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
    dc94:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
    dca4:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
    dcb4:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
    dcc4:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
    dcd4:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
    dce4:	6f206f4e 72702066 2065626f 75716572     No of probe requ
    dcf4:	73747365 72657020 61637320 6c73206e     ests per scan sl
    dd04:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
    dd14:	49535352 72687420 6f687365 2520646c     RSSI threshold %
    dd24:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
    dd34:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
    dd44:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
    dd54:	65726177 69754220 2520646c 69542073     ware Build %s Ti
    dd64:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
    dd74:	6e694d20 69726420 20726576 20726576      Min driver ver 
    dd84:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
    dd94:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
    dda4:	0000000a 303a3531 34313a30 00000000     ....15:00:14....
    ddb4:	20727041 32203931 00373130 76697244     Apr 19 2017.Driv
    ddc4:	62207265 746c6975 20746120 25097325     er built at %s.%
    ddd4:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
    dde4:	7277616d 65562065 6f697372 0000006e     mawre Version...
    ddf4:	2079654b 6e207369 7620746f 64696c61     Key is not valid
    de04:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
    de14:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
    de24:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
    de34:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
    de44:	65646e69 64252078 0000000a 61766e49     index %d....Inva
    de54:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
    de64:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
    de74:	53502074 656b204b 656c2079 6874676e     t PSK key length
    de84:	00000000 65646e75 656e6966 65732064     ....undefined se
    de94:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
    dea4:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
    deb4:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
    dec4:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
    ded4:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
    dee4:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
    def4:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
    df04:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
    df14:	66754220 20726566 65637865 64656465      Buffer exceeded
    df24:	78616d20 6d756d69 7a697320 64252065      maximum size %d
    df34:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
    df44:	00000000                                ....

0000df48 <__FUNCTION__.13047>:
    df48:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000df54 <__FUNCTION__.13076>:
    df54:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0000df64 <__FUNCTION__.13104>:
    df64:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    df74:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
    df84:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
    df94:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
    dfa4:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
    dfb4:	20656874 70696863 00000000 50504128     the chip....(APP
    dfc4:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
    dfd4:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
    dfe4:	6c696166 74206465 6564206f 696e692d     failed to de-ini
    dff4:	6c616974 00657a69                       tialize.

0000dffc <__FUNCTION__.12910>:
    dffc:	70696863 6b61775f 00000065              chip_wake...

0000e008 <__FUNCTION__.12959>:
    e008:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
    e018:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    e028:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    e038:	6e69206c 62207469 00007375 50504128     l init bus..(APP
    e048:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
    e058:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
    e068:	6e65206f 656c6261 746e6920 75727265     o enable interru
    e078:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
    e088:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
    e098:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
    e0a8:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
    e0b8:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
    e0c8:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
    e0d8:	75622074 00000073                       t bus...

0000e0e0 <__FUNCTION__.12957>:
    e0e0:	645f6d6e 695f7672 0074696e              nm_drv_init.

0000e0ec <__FUNCTION__.12964>:
    e0ec:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0000e0fc <crc7_syndrome_table>:
    e0fc:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    e10c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    e11c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    e12c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    e13c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    e14c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    e15c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    e16c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    e17c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    e18c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    e19c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    e1ac:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    e1bc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    e1cc:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    e1dc:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    e1ec:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    e1fc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    e20c:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
    e21c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    e22c:	73756220 72726520 2e2e726f 0000002e      bus error......
    e23c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e24c:	75622064 72652073 2e726f72 00002e2e     d bus error.....
    e25c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e26c:	61642064 72206174 6f707365 2065736e     d data response 
    e27c:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
    e28c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e29c:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    e2ac:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    e2bc:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e2cc:	656c6961 61642064 72206174 6f707365     ailed data respo
    e2dc:	2065736e 64616572 7562202c 72652073     nse read, bus er
    e2ec:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    e2fc:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    e30c:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    e31c:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    e32c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    e33c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    e34c:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    e35c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    e36c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    e37c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    e38c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    e39c:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
    e3ac:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    e3bc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e3cc:	656c6961 61642064 62206174 6b636f6c     ailed data block
    e3dc:	69727720 202c6574 20737562 6f727265      write, bus erro
    e3ec:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    e3fc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    e40c:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
    e41c:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    e42c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e43c:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    e44c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    e45c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    e46c:	65722064 6e6f7073 202c6573 74697277     d response, writ
    e47c:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    e48c:	00000000 65736552 6e612074 65722064     ....Reset and re
    e49c:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
    e4ac:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e4bc:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    e4cc:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    e4dc:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    e4ec:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    e4fc:	69727720 62206574 6b636f6c 30252820      write block (%0
    e50c:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    e51c:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
    e52c:	61746164 69727720 2e2e6574 0000002e     data write......
    e53c:	65736552 6e612074 65722064 20797274     Reset and retry 
    e54c:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
    e55c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    e56c:	72202c64 20646165 20676572 38302528     d, read reg (%08
    e57c:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    e58c:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    e59c:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    e5ac:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    e5bc:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    e5cc:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    e5dc:	6e612074 65722064 20797274 25206425     t and retry %d %
    e5ec:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    e5fc:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    e60c:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    e61c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e62c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    e63c:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    e64c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    e65c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    e66c:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    e67c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e68c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    e69c:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
    e6ac:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
    e6bc:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
    e6cc:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e6dc:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    e6ec:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
    e6fc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e70c:	6e692064 6e726574 77206c61 65746972     d internal write
    e71c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
    e72c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e73c:	206c6961 20646d63 64616572 69686320     ail cmd read chi
    e74c:	64692070 002e2e2e 000035d8 000035d8     p id.....5...5..
    e75c:	00003668 0000352c 00003572 00003594     h6..,5..r5...5..
    e76c:	0000361a 0000361a 000036d4 00003500     .6...6...6...5..
    e77c:	0000372e 0000372e 0000372e 0000372e     .7...7...7...7..
    e78c:	000035b6                                .5..

0000e790 <__FUNCTION__.12263>:
    e790:	5f697073 00646d63                       spi_cmd.

0000e798 <__FUNCTION__.12270>:
    e798:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0000e7a8 <__FUNCTION__.12279>:
    e7a8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000e7b4 <__FUNCTION__.12295>:
    e7b4:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000e7c4 <__FUNCTION__.12310>:
    e7c4:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000e7d4 <__FUNCTION__.12322>:
    e7d4:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000e7e4 <__FUNCTION__.12333>:
    e7e4:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000e7f4 <__FUNCTION__.12345>:
    e7f4:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000e804 <__FUNCTION__.12358>:
    e804:	735f6d6e 725f6970 00646165              nm_spi_read.

0000e810 <__FUNCTION__.12379>:
    e810:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
    e820:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
    e830:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
    e840:	25207465 65732064 6f697373 4449206e     et %d session ID
    e850:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
    e860:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    e870:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    e880:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
    e890:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
    e8a0:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
    e8b0:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
    e8c0:	204c5353 6b636f53 00007465 42000800     SSL Socket.....B
    e8d0:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    e8e0:	42001c00 0c0b0a09 00000e0d 00008426     ...B........&...
    e8f0:	0000849e 0000849e 00008444 0000843e     ........D...>...
    e900:	0000844a 0000842c 00008450 00008484     J...,...P.......
    e910:	00008768 000087b8 000087b8 000087b4     h...............
    e920:	0000875a 0000877a 0000874a 0000878c     Z...z...J.......
    e930:	0000879e 00008806 00008834 00008834     ........4...4...
    e940:	00008830 00008800 0000880c 000087fa     0...............
    e950:	00008812 00008818                       ........

0000e958 <tcc_modules>:
    e958:	42002000 42002400 42002800              . .B.$.B.(.B

0000e964 <_tcc_gclk_ids>:
    e964:	001b1a1a                                ....

0000e968 <_tcc_apbcmasks>:
    e968:	00000100 00000200 00000400              ............

0000e974 <_tcc_maxs>:
    e974:	00ffffff 00ffffff 0000ffff              ............

0000e980 <_tcc_cc_nums>:
    e980:	00020204                                ....

0000e984 <_tcc_ow_nums>:
    e984:	00020408                                ....

0000e988 <_tcc_intflag>:
    e988:	00000001 00000002 00000004 00000008     ................
    e998:	00001000 00002000 00004000 00008000     ..... ...@......
    e9a8:	00010000 00020000 00040000 00080000     ................
    e9b8:	42002000 42002400 42002800              . .B.$.B.(.B

0000e9c4 <main_mqtt_broker>:
    e9c4:	2e33316d 756f6c63 74716d64 6f632e74     m13.cloudmqtt.co
    e9d4:	0000006d 462d6957 6f632069 63656e6e     m...Wi-Fi connec
    e9e4:	0d646574 00000000 462d6957 69642069     ted.....Wi-Fi di
    e9f4:	6e6f6373 7463656e 000d6465 636c6557     sconnected..Welc
    ea04:	48656d6f 00006c61 732d7068 70757465     omeHal..hp-setup
    ea14:	0000312d 462d6957 50492069 20736920     -1..Wi-Fi IP is 
    ea24:	252e7525 75252e75 0d75252e 0000000a     %u.%u.%u.%u.....
    ea34:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
    ea44:	76726573 25287265 20212973 72746572     server(%s)! retr
    ea54:	74692079 74756120 74616d6f 6c616369     y it automatical
    ea64:	0d2e796c 0000000a 74616863 00000000     ly......chat....
    ea74:	736e6573 0000726f 75746361 726f7461     sensor..actuator
    ea84:	00000000 70657250 74617261 206e6f69     ....Preparation 
    ea94:	7420666f 63206568 20746168 20736168     of the chat has 
    eaa4:	6e656562 6d6f6320 74656c70 0d2e6465     been completed..
    eab4:	00000000 5454514d 6f726220 2072656b     ....MQTT broker 
    eac4:	6c636564 20656e69 72756f79 63636120     decline your acc
    ead4:	21737365 72726520 6320726f 2065646f     ess! error code 
    eae4:	0a0d6425 00000000 3e207325 0000203e     %d......%s >> ..
    eaf4:	0000000d 5454514d 73696420 6e6e6f63     ....MQTT disconn
    eb04:	65746365 00000d64 5454514d 696e6920     ected...MQTT ini
    eb14:	6c616974 74617a69 206e6f69 6c696166     tialization fail
    eb24:	202e6465 6f727245 6f632072 69206564     ed. Error code i
    eb34:	25282073 0a0d2964 00000000 5454514d     s (%d)......MQTT
    eb44:	67657220 65747369 61632072 61626c6c      register callba
    eb54:	66206b63 656c6961 45202e64 726f7272     ck failed. Error
    eb64:	646f6320 73692065 64252820 000a0d29      code is (%d)...
    eb74:	57202d2d 31434e49 20303035 462d6957     -- WINC1500 Wi-F
    eb84:	514d2069 63205454 20746168 6d617865     i MQTT chat exam
    eb94:	20656c70 0a0d2d2d 53202d2d 32574d41     ple --..-- SAMW2
    eba4:	50585f35 4e49414c 505f4445 2d204f52     5_XPLAINED_PRO -
    ebb4:	2d0a0d2d 6f43202d 6c69706d 203a6465     -..-- Compiled: 
    ebc4:	20727041 32203931 20373130 303a3531     Apr 19 2017 15:0
    ebd4:	30323a30 0d2d2d20 00000000 72657355     0:20 --.....User
    ebe4:	25203a20 000a0d73 73736150 64726f77      : %s...Password
    ebf4:	25203a20 000a0d73 69706f54 203a2063      : %s...Topic : 
    ec04:	0a0d7325 00000000 6e69616d 326d203a     %s......main: m2
    ec14:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
    ec24:	72726520 2821726f 0d296425 0000000a      error!(%d).....
    ec34:	4d006425 64734951 00430070              %d.MQIsdp.C.

0000ec40 <_global_impure_ptr>:
    ec40:	20000020                                 .. 

0000ec44 <__sf_fake_stdin>:
	...

0000ec64 <__sf_fake_stdout>:
	...

0000ec84 <__sf_fake_stderr>:
	...
    eca4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    ecb4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    ecc4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    ecd4:	00006665                                ef..

0000ecd8 <_init>:
    ecd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecda:	46c0      	nop			; (mov r8, r8)
    ecdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ecde:	bc08      	pop	{r3}
    ece0:	469e      	mov	lr, r3
    ece2:	4770      	bx	lr

0000ece4 <__init_array_start>:
    ece4:	000000dd 	.word	0x000000dd

0000ece8 <_fini>:
    ece8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ecea:	46c0      	nop			; (mov r8, r8)
    ecec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    ecee:	bc08      	pop	{r3}
    ecf0:	469e      	mov	lr, r3
    ecf2:	4770      	bx	lr

0000ecf4 <__fini_array_start>:
    ecf4:	000000b5 	.word	0x000000b5
