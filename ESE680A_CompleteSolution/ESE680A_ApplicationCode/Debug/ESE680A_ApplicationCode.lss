
ESE680A_ApplicationCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011e18  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001ec  20000000  00019e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c20  200001ec  0001a004  000201ec  2**2
                  ALLOC
  3 .stack        00002004  20000e0c  0001ac24  000201ec  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
  6 .debug_info   00063587  00000000  00000000  0002026d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007c4c  00000000  00000000  000837f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007cc2  00000000  00000000  0008b440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001610  00000000  00000000  00093102  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001440  00000000  00000000  00094712  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00024205  00000000  00000000  00095b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00021c9d  00000000  00000000  000b9d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00095627  00000000  00000000  000db9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000057fc  00000000  00000000  0017101c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <exception_table>:
    8000:	10 2e 00 20 31 0c 01 00 29 0d 01 00 29 0d 01 00     ... 1...)...)...
	...
    802c:	29 0d 01 00 00 00 00 00 00 00 00 00 29 0d 01 00     )...........)...
    803c:	29 0d 01 00 29 0d 01 00 29 0d 01 00 29 0d 01 00     )...)...)...)...
    804c:	81 e2 00 00 95 dd 00 00 29 0d 01 00 29 0d 01 00     ........)...)...
    805c:	29 0d 01 00 29 0d 01 00 45 27 01 00 5d 27 01 00     )...)...E'..]'..
    806c:	75 27 01 00 8d 27 01 00 a5 27 01 00 bd 27 01 00     u'...'...'...'..
    807c:	85 ee 00 00 99 ee 00 00 ad ee 00 00 29 0d 01 00     ............)...
    808c:	29 0d 01 00 29 0d 01 00 00 00 00 00 00 00 00 00     )...)...........
    809c:	29 0d 01 00 29 0d 01 00 29 0d 01 00 29 0d 01 00     )...)...)...)...
    80ac:	29 0d 01 00 00 00 00 00                             ).......

000080b4 <__do_global_dtors_aux>:
    80b4:	b510      	push	{r4, lr}
    80b6:	4c06      	ldr	r4, [pc, #24]	; (80d0 <__do_global_dtors_aux+0x1c>)
    80b8:	7823      	ldrb	r3, [r4, #0]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d107      	bne.n	80ce <__do_global_dtors_aux+0x1a>
    80be:	4b05      	ldr	r3, [pc, #20]	; (80d4 <__do_global_dtors_aux+0x20>)
    80c0:	2b00      	cmp	r3, #0
    80c2:	d002      	beq.n	80ca <__do_global_dtors_aux+0x16>
    80c4:	4804      	ldr	r0, [pc, #16]	; (80d8 <__do_global_dtors_aux+0x24>)
    80c6:	e000      	b.n	80ca <__do_global_dtors_aux+0x16>
    80c8:	bf00      	nop
    80ca:	2301      	movs	r3, #1
    80cc:	7023      	strb	r3, [r4, #0]
    80ce:	bd10      	pop	{r4, pc}
    80d0:	200001ec 	.word	0x200001ec
    80d4:	00000000 	.word	0x00000000
    80d8:	00019e18 	.word	0x00019e18

000080dc <frame_dummy>:
    80dc:	4b08      	ldr	r3, [pc, #32]	; (8100 <frame_dummy+0x24>)
    80de:	b510      	push	{r4, lr}
    80e0:	2b00      	cmp	r3, #0
    80e2:	d003      	beq.n	80ec <frame_dummy+0x10>
    80e4:	4907      	ldr	r1, [pc, #28]	; (8104 <frame_dummy+0x28>)
    80e6:	4808      	ldr	r0, [pc, #32]	; (8108 <frame_dummy+0x2c>)
    80e8:	e000      	b.n	80ec <frame_dummy+0x10>
    80ea:	bf00      	nop
    80ec:	4807      	ldr	r0, [pc, #28]	; (810c <frame_dummy+0x30>)
    80ee:	6803      	ldr	r3, [r0, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d100      	bne.n	80f6 <frame_dummy+0x1a>
    80f4:	bd10      	pop	{r4, pc}
    80f6:	4b06      	ldr	r3, [pc, #24]	; (8110 <frame_dummy+0x34>)
    80f8:	2b00      	cmp	r3, #0
    80fa:	d0fb      	beq.n	80f4 <frame_dummy+0x18>
    80fc:	4798      	blx	r3
    80fe:	e7f9      	b.n	80f4 <frame_dummy+0x18>
    8100:	00000000 	.word	0x00000000
    8104:	200001f0 	.word	0x200001f0
    8108:	00019e18 	.word	0x00019e18
    810c:	00019e18 	.word	0x00019e18
    8110:	00000000 	.word	0x00000000

00008114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8114:	b580      	push	{r7, lr}
    8116:	b084      	sub	sp, #16
    8118:	af00      	add	r7, sp, #0
    811a:	0002      	movs	r2, r0
    811c:	1dfb      	adds	r3, r7, #7
    811e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8120:	230f      	movs	r3, #15
    8122:	18fb      	adds	r3, r7, r3
    8124:	1dfa      	adds	r2, r7, #7
    8126:	7812      	ldrb	r2, [r2, #0]
    8128:	09d2      	lsrs	r2, r2, #7
    812a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    812c:	230e      	movs	r3, #14
    812e:	18fb      	adds	r3, r7, r3
    8130:	1dfa      	adds	r2, r7, #7
    8132:	7812      	ldrb	r2, [r2, #0]
    8134:	0952      	lsrs	r2, r2, #5
    8136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8138:	4b0d      	ldr	r3, [pc, #52]	; (8170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    813a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    813c:	230f      	movs	r3, #15
    813e:	18fb      	adds	r3, r7, r3
    8140:	781b      	ldrb	r3, [r3, #0]
    8142:	2b00      	cmp	r3, #0
    8144:	d10f      	bne.n	8166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8146:	230f      	movs	r3, #15
    8148:	18fb      	adds	r3, r7, r3
    814a:	781b      	ldrb	r3, [r3, #0]
    814c:	009b      	lsls	r3, r3, #2
    814e:	2210      	movs	r2, #16
    8150:	4694      	mov	ip, r2
    8152:	44bc      	add	ip, r7
    8154:	4463      	add	r3, ip
    8156:	3b08      	subs	r3, #8
    8158:	681a      	ldr	r2, [r3, #0]
    815a:	230e      	movs	r3, #14
    815c:	18fb      	adds	r3, r7, r3
    815e:	781b      	ldrb	r3, [r3, #0]
    8160:	01db      	lsls	r3, r3, #7
    8162:	18d3      	adds	r3, r2, r3
    8164:	e000      	b.n	8168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    8166:	2300      	movs	r3, #0
	}
}
    8168:	0018      	movs	r0, r3
    816a:	46bd      	mov	sp, r7
    816c:	b004      	add	sp, #16
    816e:	bd80      	pop	{r7, pc}
    8170:	41004400 	.word	0x41004400

00008174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8174:	b580      	push	{r7, lr}
    8176:	b082      	sub	sp, #8
    8178:	af00      	add	r7, sp, #0
    817a:	0002      	movs	r2, r0
    817c:	1dfb      	adds	r3, r7, #7
    817e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8180:	1dfb      	adds	r3, r7, #7
    8182:	781b      	ldrb	r3, [r3, #0]
    8184:	0018      	movs	r0, r3
    8186:	4b03      	ldr	r3, [pc, #12]	; (8194 <port_get_group_from_gpio_pin+0x20>)
    8188:	4798      	blx	r3
    818a:	0003      	movs	r3, r0
}
    818c:	0018      	movs	r0, r3
    818e:	46bd      	mov	sp, r7
    8190:	b002      	add	sp, #8
    8192:	bd80      	pop	{r7, pc}
    8194:	00008115 	.word	0x00008115

00008198 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    8198:	b580      	push	{r7, lr}
    819a:	b082      	sub	sp, #8
    819c:	af00      	add	r7, sp, #0
    819e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    81a0:	687b      	ldr	r3, [r7, #4]
    81a2:	2200      	movs	r2, #0
    81a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    81a6:	687b      	ldr	r3, [r7, #4]
    81a8:	2201      	movs	r2, #1
    81aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    81ac:	687b      	ldr	r3, [r7, #4]
    81ae:	2200      	movs	r2, #0
    81b0:	709a      	strb	r2, [r3, #2]
}
    81b2:	46c0      	nop			; (mov r8, r8)
    81b4:	46bd      	mov	sp, r7
    81b6:	b002      	add	sp, #8
    81b8:	bd80      	pop	{r7, pc}
	...

000081bc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    81bc:	b580      	push	{r7, lr}
    81be:	b084      	sub	sp, #16
    81c0:	af00      	add	r7, sp, #0
    81c2:	0002      	movs	r2, r0
    81c4:	1dfb      	adds	r3, r7, #7
    81c6:	701a      	strb	r2, [r3, #0]
    81c8:	1dbb      	adds	r3, r7, #6
    81ca:	1c0a      	adds	r2, r1, #0
    81cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    81ce:	1dfb      	adds	r3, r7, #7
    81d0:	781b      	ldrb	r3, [r3, #0]
    81d2:	0018      	movs	r0, r3
    81d4:	4b0d      	ldr	r3, [pc, #52]	; (820c <port_pin_set_output_level+0x50>)
    81d6:	4798      	blx	r3
    81d8:	0003      	movs	r3, r0
    81da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    81dc:	1dfb      	adds	r3, r7, #7
    81de:	781b      	ldrb	r3, [r3, #0]
    81e0:	221f      	movs	r2, #31
    81e2:	4013      	ands	r3, r2
    81e4:	2201      	movs	r2, #1
    81e6:	409a      	lsls	r2, r3
    81e8:	0013      	movs	r3, r2
    81ea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    81ec:	1dbb      	adds	r3, r7, #6
    81ee:	781b      	ldrb	r3, [r3, #0]
    81f0:	2b00      	cmp	r3, #0
    81f2:	d003      	beq.n	81fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    81f4:	68fb      	ldr	r3, [r7, #12]
    81f6:	68ba      	ldr	r2, [r7, #8]
    81f8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    81fa:	e002      	b.n	8202 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    81fc:	68fb      	ldr	r3, [r7, #12]
    81fe:	68ba      	ldr	r2, [r7, #8]
    8200:	615a      	str	r2, [r3, #20]
}
    8202:	46c0      	nop			; (mov r8, r8)
    8204:	46bd      	mov	sp, r7
    8206:	b004      	add	sp, #16
    8208:	bd80      	pop	{r7, pc}
    820a:	46c0      	nop			; (mov r8, r8)
    820c:	00008175 	.word	0x00008175

00008210 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    8210:	b580      	push	{r7, lr}
    8212:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    8214:	4b04      	ldr	r3, [pc, #16]	; (8228 <system_interrupt_enable_global+0x18>)
    8216:	2201      	movs	r2, #1
    8218:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    821a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    821e:	b662      	cpsie	i
}
    8220:	46c0      	nop			; (mov r8, r8)
    8222:	46bd      	mov	sp, r7
    8224:	bd80      	pop	{r7, pc}
    8226:	46c0      	nop			; (mov r8, r8)
    8228:	2000000c 	.word	0x2000000c

0000822c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    822c:	b580      	push	{r7, lr}
    822e:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    8230:	4b04      	ldr	r3, [pc, #16]	; (8244 <chip_isr+0x18>)
    8232:	681b      	ldr	r3, [r3, #0]
    8234:	2b00      	cmp	r3, #0
    8236:	d002      	beq.n	823e <chip_isr+0x12>
		gpfIsr();
    8238:	4b02      	ldr	r3, [pc, #8]	; (8244 <chip_isr+0x18>)
    823a:	681b      	ldr	r3, [r3, #0]
    823c:	4798      	blx	r3
	}
}
    823e:	46c0      	nop			; (mov r8, r8)
    8240:	46bd      	mov	sp, r7
    8242:	bd80      	pop	{r7, pc}
    8244:	20000208 	.word	0x20000208

00008248 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    8248:	b580      	push	{r7, lr}
    824a:	b082      	sub	sp, #8
    824c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    824e:	1d3b      	adds	r3, r7, #4
    8250:	0018      	movs	r0, r3
    8252:	4b10      	ldr	r3, [pc, #64]	; (8294 <init_chip_pins+0x4c>)
    8254:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8256:	1d3b      	adds	r3, r7, #4
    8258:	2201      	movs	r2, #1
    825a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    825c:	1d3b      	adds	r3, r7, #4
    825e:	0019      	movs	r1, r3
    8260:	201b      	movs	r0, #27
    8262:	4b0d      	ldr	r3, [pc, #52]	; (8298 <init_chip_pins+0x50>)
    8264:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    8266:	1d3b      	adds	r3, r7, #4
    8268:	0019      	movs	r1, r3
    826a:	201c      	movs	r0, #28
    826c:	4b0a      	ldr	r3, [pc, #40]	; (8298 <init_chip_pins+0x50>)
    826e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    8270:	1d3b      	adds	r3, r7, #4
    8272:	0019      	movs	r1, r3
    8274:	2028      	movs	r0, #40	; 0x28
    8276:	4b08      	ldr	r3, [pc, #32]	; (8298 <init_chip_pins+0x50>)
    8278:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    827a:	2100      	movs	r1, #0
    827c:	201c      	movs	r0, #28
    827e:	4b07      	ldr	r3, [pc, #28]	; (829c <init_chip_pins+0x54>)
    8280:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    8282:	2100      	movs	r1, #0
    8284:	201b      	movs	r0, #27
    8286:	4b05      	ldr	r3, [pc, #20]	; (829c <init_chip_pins+0x54>)
    8288:	4798      	blx	r3
}
    828a:	46c0      	nop			; (mov r8, r8)
    828c:	46bd      	mov	sp, r7
    828e:	b002      	add	sp, #8
    8290:	bd80      	pop	{r7, pc}
    8292:	46c0      	nop			; (mov r8, r8)
    8294:	00008199 	.word	0x00008199
    8298:	0001204d 	.word	0x0001204d
    829c:	000081bd 	.word	0x000081bd

000082a0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    82a0:	b580      	push	{r7, lr}
    82a2:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    82a4:	4b0c      	ldr	r3, [pc, #48]	; (82d8 <nm_bsp_init+0x38>)
    82a6:	2200      	movs	r2, #0
    82a8:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    82aa:	4b0c      	ldr	r3, [pc, #48]	; (82dc <nm_bsp_init+0x3c>)
    82ac:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    82ae:	4b0c      	ldr	r3, [pc, #48]	; (82e0 <nm_bsp_init+0x40>)
    82b0:	681b      	ldr	r3, [r3, #0]
    82b2:	2201      	movs	r2, #1
    82b4:	4013      	ands	r3, r2
    82b6:	d004      	beq.n	82c2 <nm_bsp_init+0x22>
    82b8:	4b09      	ldr	r3, [pc, #36]	; (82e0 <nm_bsp_init+0x40>)
    82ba:	681b      	ldr	r3, [r3, #0]
    82bc:	2202      	movs	r2, #2
    82be:	4013      	ands	r3, r2
    82c0:	d101      	bne.n	82c6 <nm_bsp_init+0x26>
	    delay_init();
    82c2:	4b08      	ldr	r3, [pc, #32]	; (82e4 <nm_bsp_init+0x44>)
    82c4:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    82c6:	4b08      	ldr	r3, [pc, #32]	; (82e8 <nm_bsp_init+0x48>)
    82c8:	4798      	blx	r3

	system_interrupt_enable_global();
    82ca:	4b08      	ldr	r3, [pc, #32]	; (82ec <nm_bsp_init+0x4c>)
    82cc:	4798      	blx	r3

	return M2M_SUCCESS;
    82ce:	2300      	movs	r3, #0
}
    82d0:	0018      	movs	r0, r3
    82d2:	46bd      	mov	sp, r7
    82d4:	bd80      	pop	{r7, pc}
    82d6:	46c0      	nop			; (mov r8, r8)
    82d8:	20000208 	.word	0x20000208
    82dc:	00008249 	.word	0x00008249
    82e0:	e000e010 	.word	0xe000e010
    82e4:	00011a39 	.word	0x00011a39
    82e8:	000082f1 	.word	0x000082f1
    82ec:	00008211 	.word	0x00008211

000082f0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    82f0:	b580      	push	{r7, lr}
    82f2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    82f4:	2100      	movs	r1, #0
    82f6:	201c      	movs	r0, #28
    82f8:	4b0c      	ldr	r3, [pc, #48]	; (832c <nm_bsp_reset+0x3c>)
    82fa:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    82fc:	2100      	movs	r1, #0
    82fe:	201b      	movs	r0, #27
    8300:	4b0a      	ldr	r3, [pc, #40]	; (832c <nm_bsp_reset+0x3c>)
    8302:	4798      	blx	r3
	nm_bsp_sleep(100);
    8304:	2064      	movs	r0, #100	; 0x64
    8306:	4b0a      	ldr	r3, [pc, #40]	; (8330 <nm_bsp_reset+0x40>)
    8308:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    830a:	2101      	movs	r1, #1
    830c:	201c      	movs	r0, #28
    830e:	4b07      	ldr	r3, [pc, #28]	; (832c <nm_bsp_reset+0x3c>)
    8310:	4798      	blx	r3
	nm_bsp_sleep(100);
    8312:	2064      	movs	r0, #100	; 0x64
    8314:	4b06      	ldr	r3, [pc, #24]	; (8330 <nm_bsp_reset+0x40>)
    8316:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    8318:	2101      	movs	r1, #1
    831a:	201b      	movs	r0, #27
    831c:	4b03      	ldr	r3, [pc, #12]	; (832c <nm_bsp_reset+0x3c>)
    831e:	4798      	blx	r3
	nm_bsp_sleep(100);
    8320:	2064      	movs	r0, #100	; 0x64
    8322:	4b03      	ldr	r3, [pc, #12]	; (8330 <nm_bsp_reset+0x40>)
    8324:	4798      	blx	r3
}
    8326:	46c0      	nop			; (mov r8, r8)
    8328:	46bd      	mov	sp, r7
    832a:	bd80      	pop	{r7, pc}
    832c:	000081bd 	.word	0x000081bd
    8330:	00008335 	.word	0x00008335

00008334 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    8334:	b580      	push	{r7, lr}
    8336:	b082      	sub	sp, #8
    8338:	af00      	add	r7, sp, #0
    833a:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    833c:	e002      	b.n	8344 <nm_bsp_sleep+0x10>
		delay_ms(1);
    833e:	2001      	movs	r0, #1
    8340:	4b05      	ldr	r3, [pc, #20]	; (8358 <nm_bsp_sleep+0x24>)
    8342:	4798      	blx	r3
	while (u32TimeMsec--) {
    8344:	687b      	ldr	r3, [r7, #4]
    8346:	1e5a      	subs	r2, r3, #1
    8348:	607a      	str	r2, [r7, #4]
    834a:	2b00      	cmp	r3, #0
    834c:	d1f7      	bne.n	833e <nm_bsp_sleep+0xa>
	}
}
    834e:	46c0      	nop			; (mov r8, r8)
    8350:	46bd      	mov	sp, r7
    8352:	b002      	add	sp, #8
    8354:	bd80      	pop	{r7, pc}
    8356:	46c0      	nop			; (mov r8, r8)
    8358:	00011a91 	.word	0x00011a91

0000835c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    835c:	b580      	push	{r7, lr}
    835e:	b086      	sub	sp, #24
    8360:	af00      	add	r7, sp, #0
    8362:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    8364:	4b15      	ldr	r3, [pc, #84]	; (83bc <nm_bsp_register_isr+0x60>)
    8366:	687a      	ldr	r2, [r7, #4]
    8368:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    836a:	230c      	movs	r3, #12
    836c:	18fb      	adds	r3, r7, r3
    836e:	0018      	movs	r0, r3
    8370:	4b13      	ldr	r3, [pc, #76]	; (83c0 <nm_bsp_register_isr+0x64>)
    8372:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    8374:	230c      	movs	r3, #12
    8376:	18fb      	adds	r3, r7, r3
    8378:	2229      	movs	r2, #41	; 0x29
    837a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    837c:	230c      	movs	r3, #12
    837e:	18fb      	adds	r3, r7, r3
    8380:	2200      	movs	r2, #0
    8382:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    8384:	230c      	movs	r3, #12
    8386:	18fb      	adds	r3, r7, r3
    8388:	2201      	movs	r2, #1
    838a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    838c:	230c      	movs	r3, #12
    838e:	18fb      	adds	r3, r7, r3
    8390:	2202      	movs	r2, #2
    8392:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    8394:	230c      	movs	r3, #12
    8396:	18fb      	adds	r3, r7, r3
    8398:	0019      	movs	r1, r3
    839a:	2009      	movs	r0, #9
    839c:	4b09      	ldr	r3, [pc, #36]	; (83c4 <nm_bsp_register_isr+0x68>)
    839e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <nm_bsp_register_isr+0x6c>)
    83a2:	2200      	movs	r2, #0
    83a4:	2109      	movs	r1, #9
    83a6:	0018      	movs	r0, r3
    83a8:	4b08      	ldr	r3, [pc, #32]	; (83cc <nm_bsp_register_isr+0x70>)
    83aa:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    83ac:	2100      	movs	r1, #0
    83ae:	2009      	movs	r0, #9
    83b0:	4b07      	ldr	r3, [pc, #28]	; (83d0 <nm_bsp_register_isr+0x74>)
    83b2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    83b4:	46c0      	nop			; (mov r8, r8)
    83b6:	46bd      	mov	sp, r7
    83b8:	b006      	add	sp, #24
    83ba:	bd80      	pop	{r7, pc}
    83bc:	20000208 	.word	0x20000208
    83c0:	0000e0a1 	.word	0x0000e0a1
    83c4:	0000e0d5 	.word	0x0000e0d5
    83c8:	0000822d 	.word	0x0000822d
    83cc:	0000dca1 	.word	0x0000dca1
    83d0:	0000dd05 	.word	0x0000dd05

000083d4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    83d4:	b580      	push	{r7, lr}
    83d6:	b082      	sub	sp, #8
    83d8:	af00      	add	r7, sp, #0
    83da:	0002      	movs	r2, r0
    83dc:	1dfb      	adds	r3, r7, #7
    83de:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    83e0:	1dfb      	adds	r3, r7, #7
    83e2:	781b      	ldrb	r3, [r3, #0]
    83e4:	2b00      	cmp	r3, #0
    83e6:	d004      	beq.n	83f2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    83e8:	2100      	movs	r1, #0
    83ea:	2009      	movs	r0, #9
    83ec:	4b05      	ldr	r3, [pc, #20]	; (8404 <nm_bsp_interrupt_ctrl+0x30>)
    83ee:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    83f0:	e003      	b.n	83fa <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    83f2:	2100      	movs	r1, #0
    83f4:	2009      	movs	r0, #9
    83f6:	4b04      	ldr	r3, [pc, #16]	; (8408 <nm_bsp_interrupt_ctrl+0x34>)
    83f8:	4798      	blx	r3
}
    83fa:	46c0      	nop			; (mov r8, r8)
    83fc:	46bd      	mov	sp, r7
    83fe:	b002      	add	sp, #8
    8400:	bd80      	pop	{r7, pc}
    8402:	46c0      	nop			; (mov r8, r8)
    8404:	0000dd05 	.word	0x0000dd05
    8408:	0000dd4d 	.word	0x0000dd4d

0000840c <system_pinmux_get_group_from_gpio_pin>:
{
    840c:	b580      	push	{r7, lr}
    840e:	b084      	sub	sp, #16
    8410:	af00      	add	r7, sp, #0
    8412:	0002      	movs	r2, r0
    8414:	1dfb      	adds	r3, r7, #7
    8416:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8418:	230f      	movs	r3, #15
    841a:	18fb      	adds	r3, r7, r3
    841c:	1dfa      	adds	r2, r7, #7
    841e:	7812      	ldrb	r2, [r2, #0]
    8420:	09d2      	lsrs	r2, r2, #7
    8422:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8424:	230e      	movs	r3, #14
    8426:	18fb      	adds	r3, r7, r3
    8428:	1dfa      	adds	r2, r7, #7
    842a:	7812      	ldrb	r2, [r2, #0]
    842c:	0952      	lsrs	r2, r2, #5
    842e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8430:	4b0d      	ldr	r3, [pc, #52]	; (8468 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8432:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    8434:	230f      	movs	r3, #15
    8436:	18fb      	adds	r3, r7, r3
    8438:	781b      	ldrb	r3, [r3, #0]
    843a:	2b00      	cmp	r3, #0
    843c:	d10f      	bne.n	845e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    843e:	230f      	movs	r3, #15
    8440:	18fb      	adds	r3, r7, r3
    8442:	781b      	ldrb	r3, [r3, #0]
    8444:	009b      	lsls	r3, r3, #2
    8446:	2210      	movs	r2, #16
    8448:	4694      	mov	ip, r2
    844a:	44bc      	add	ip, r7
    844c:	4463      	add	r3, ip
    844e:	3b08      	subs	r3, #8
    8450:	681a      	ldr	r2, [r3, #0]
    8452:	230e      	movs	r3, #14
    8454:	18fb      	adds	r3, r7, r3
    8456:	781b      	ldrb	r3, [r3, #0]
    8458:	01db      	lsls	r3, r3, #7
    845a:	18d3      	adds	r3, r2, r3
    845c:	e000      	b.n	8460 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    845e:	2300      	movs	r3, #0
}
    8460:	0018      	movs	r0, r3
    8462:	46bd      	mov	sp, r7
    8464:	b004      	add	sp, #16
    8466:	bd80      	pop	{r7, pc}
    8468:	41004400 	.word	0x41004400

0000846c <port_get_group_from_gpio_pin>:
{
    846c:	b580      	push	{r7, lr}
    846e:	b082      	sub	sp, #8
    8470:	af00      	add	r7, sp, #0
    8472:	0002      	movs	r2, r0
    8474:	1dfb      	adds	r3, r7, #7
    8476:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8478:	1dfb      	adds	r3, r7, #7
    847a:	781b      	ldrb	r3, [r3, #0]
    847c:	0018      	movs	r0, r3
    847e:	4b03      	ldr	r3, [pc, #12]	; (848c <port_get_group_from_gpio_pin+0x20>)
    8480:	4798      	blx	r3
    8482:	0003      	movs	r3, r0
}
    8484:	0018      	movs	r0, r3
    8486:	46bd      	mov	sp, r7
    8488:	b002      	add	sp, #8
    848a:	bd80      	pop	{r7, pc}
    848c:	0000840d 	.word	0x0000840d

00008490 <port_get_config_defaults>:
{
    8490:	b580      	push	{r7, lr}
    8492:	b082      	sub	sp, #8
    8494:	af00      	add	r7, sp, #0
    8496:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    8498:	687b      	ldr	r3, [r7, #4]
    849a:	2200      	movs	r2, #0
    849c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    849e:	687b      	ldr	r3, [r7, #4]
    84a0:	2201      	movs	r2, #1
    84a2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    84a4:	687b      	ldr	r3, [r7, #4]
    84a6:	2200      	movs	r2, #0
    84a8:	709a      	strb	r2, [r3, #2]
}
    84aa:	46c0      	nop			; (mov r8, r8)
    84ac:	46bd      	mov	sp, r7
    84ae:	b002      	add	sp, #8
    84b0:	bd80      	pop	{r7, pc}
	...

000084b4 <port_pin_set_output_level>:
{
    84b4:	b580      	push	{r7, lr}
    84b6:	b084      	sub	sp, #16
    84b8:	af00      	add	r7, sp, #0
    84ba:	0002      	movs	r2, r0
    84bc:	1dfb      	adds	r3, r7, #7
    84be:	701a      	strb	r2, [r3, #0]
    84c0:	1dbb      	adds	r3, r7, #6
    84c2:	1c0a      	adds	r2, r1, #0
    84c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    84c6:	1dfb      	adds	r3, r7, #7
    84c8:	781b      	ldrb	r3, [r3, #0]
    84ca:	0018      	movs	r0, r3
    84cc:	4b0d      	ldr	r3, [pc, #52]	; (8504 <port_pin_set_output_level+0x50>)
    84ce:	4798      	blx	r3
    84d0:	0003      	movs	r3, r0
    84d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    84d4:	1dfb      	adds	r3, r7, #7
    84d6:	781b      	ldrb	r3, [r3, #0]
    84d8:	221f      	movs	r2, #31
    84da:	4013      	ands	r3, r2
    84dc:	2201      	movs	r2, #1
    84de:	409a      	lsls	r2, r3
    84e0:	0013      	movs	r3, r2
    84e2:	60bb      	str	r3, [r7, #8]
	if (level) {
    84e4:	1dbb      	adds	r3, r7, #6
    84e6:	781b      	ldrb	r3, [r3, #0]
    84e8:	2b00      	cmp	r3, #0
    84ea:	d003      	beq.n	84f4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    84ec:	68fb      	ldr	r3, [r7, #12]
    84ee:	68ba      	ldr	r2, [r7, #8]
    84f0:	619a      	str	r2, [r3, #24]
}
    84f2:	e002      	b.n	84fa <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    84f4:	68fb      	ldr	r3, [r7, #12]
    84f6:	68ba      	ldr	r2, [r7, #8]
    84f8:	615a      	str	r2, [r3, #20]
}
    84fa:	46c0      	nop			; (mov r8, r8)
    84fc:	46bd      	mov	sp, r7
    84fe:	b004      	add	sp, #16
    8500:	bd80      	pop	{r7, pc}
    8502:	46c0      	nop			; (mov r8, r8)
    8504:	0000846d 	.word	0x0000846d

00008508 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    8508:	b580      	push	{r7, lr}
    850a:	b082      	sub	sp, #8
    850c:	af00      	add	r7, sp, #0
    850e:	0002      	movs	r2, r0
    8510:	1dfb      	adds	r3, r7, #7
    8512:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8514:	4b06      	ldr	r3, [pc, #24]	; (8530 <system_interrupt_enable+0x28>)
    8516:	1dfa      	adds	r2, r7, #7
    8518:	7812      	ldrb	r2, [r2, #0]
    851a:	0011      	movs	r1, r2
    851c:	221f      	movs	r2, #31
    851e:	400a      	ands	r2, r1
    8520:	2101      	movs	r1, #1
    8522:	4091      	lsls	r1, r2
    8524:	000a      	movs	r2, r1
    8526:	601a      	str	r2, [r3, #0]
}
    8528:	46c0      	nop			; (mov r8, r8)
    852a:	46bd      	mov	sp, r7
    852c:	b002      	add	sp, #8
    852e:	bd80      	pop	{r7, pc}
    8530:	e000e100 	.word	0xe000e100

00008534 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    8534:	b580      	push	{r7, lr}
    8536:	b082      	sub	sp, #8
    8538:	af00      	add	r7, sp, #0
    853a:	0002      	movs	r2, r0
    853c:	1dfb      	adds	r3, r7, #7
    853e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8540:	4a07      	ldr	r2, [pc, #28]	; (8560 <system_interrupt_disable+0x2c>)
    8542:	1dfb      	adds	r3, r7, #7
    8544:	781b      	ldrb	r3, [r3, #0]
    8546:	0019      	movs	r1, r3
    8548:	231f      	movs	r3, #31
    854a:	400b      	ands	r3, r1
    854c:	2101      	movs	r1, #1
    854e:	4099      	lsls	r1, r3
    8550:	000b      	movs	r3, r1
    8552:	0019      	movs	r1, r3
    8554:	2380      	movs	r3, #128	; 0x80
    8556:	50d1      	str	r1, [r2, r3]
}
    8558:	46c0      	nop			; (mov r8, r8)
    855a:	46bd      	mov	sp, r7
    855c:	b002      	add	sp, #8
    855e:	bd80      	pop	{r7, pc}
    8560:	e000e100 	.word	0xe000e100

00008564 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    8564:	b580      	push	{r7, lr}
    8566:	b084      	sub	sp, #16
    8568:	af00      	add	r7, sp, #0
    856a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	681b      	ldr	r3, [r3, #0]
    8570:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    8572:	68fb      	ldr	r3, [r7, #12]
    8574:	69db      	ldr	r3, [r3, #28]
    8576:	1e5a      	subs	r2, r3, #1
    8578:	4193      	sbcs	r3, r2
    857a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    857c:	0018      	movs	r0, r3
    857e:	46bd      	mov	sp, r7
    8580:	b004      	add	sp, #16
    8582:	bd80      	pop	{r7, pc}

00008584 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    8584:	b580      	push	{r7, lr}
    8586:	b082      	sub	sp, #8
    8588:	af00      	add	r7, sp, #0
    858a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    858c:	687b      	ldr	r3, [r7, #4]
    858e:	2201      	movs	r2, #1
    8590:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    8592:	687b      	ldr	r3, [r7, #4]
    8594:	2200      	movs	r2, #0
    8596:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    8598:	687b      	ldr	r3, [r7, #4]
    859a:	2200      	movs	r2, #0
    859c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    859e:	687b      	ldr	r3, [r7, #4]
    85a0:	22c0      	movs	r2, #192	; 0xc0
    85a2:	0392      	lsls	r2, r2, #14
    85a4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    85a6:	687b      	ldr	r3, [r7, #4]
    85a8:	2200      	movs	r2, #0
    85aa:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    85ac:	687b      	ldr	r3, [r7, #4]
    85ae:	2200      	movs	r2, #0
    85b0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    85b2:	687b      	ldr	r3, [r7, #4]
    85b4:	2201      	movs	r2, #1
    85b6:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	2201      	movs	r2, #1
    85bc:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    85be:	687b      	ldr	r3, [r7, #4]
    85c0:	2200      	movs	r2, #0
    85c2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	2224      	movs	r2, #36	; 0x24
    85c8:	2100      	movs	r1, #0
    85ca:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    85cc:	687b      	ldr	r3, [r7, #4]
    85ce:	3318      	adds	r3, #24
    85d0:	220c      	movs	r2, #12
    85d2:	2100      	movs	r1, #0
    85d4:	0018      	movs	r0, r3
    85d6:	4b0a      	ldr	r3, [pc, #40]	; (8600 <spi_get_config_defaults+0x7c>)
    85d8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    85da:	687b      	ldr	r3, [r7, #4]
    85dc:	4a09      	ldr	r2, [pc, #36]	; (8604 <spi_get_config_defaults+0x80>)
    85de:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    85e0:	687b      	ldr	r3, [r7, #4]
    85e2:	2200      	movs	r2, #0
    85e4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    85e6:	687b      	ldr	r3, [r7, #4]
    85e8:	2200      	movs	r2, #0
    85ea:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    85ec:	687b      	ldr	r3, [r7, #4]
    85ee:	2200      	movs	r2, #0
    85f0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    85f2:	687b      	ldr	r3, [r7, #4]
    85f4:	2200      	movs	r2, #0
    85f6:	635a      	str	r2, [r3, #52]	; 0x34

};
    85f8:	46c0      	nop			; (mov r8, r8)
    85fa:	46bd      	mov	sp, r7
    85fc:	b002      	add	sp, #8
    85fe:	bd80      	pop	{r7, pc}
    8600:	00016c07 	.word	0x00016c07
    8604:	000186a0 	.word	0x000186a0

00008608 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    8608:	b580      	push	{r7, lr}
    860a:	b082      	sub	sp, #8
    860c:	af00      	add	r7, sp, #0
    860e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    8610:	687b      	ldr	r3, [r7, #4]
    8612:	220a      	movs	r2, #10
    8614:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    8616:	687b      	ldr	r3, [r7, #4]
    8618:	2200      	movs	r2, #0
    861a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    861c:	687b      	ldr	r3, [r7, #4]
    861e:	2200      	movs	r2, #0
    8620:	709a      	strb	r2, [r3, #2]
}
    8622:	46c0      	nop			; (mov r8, r8)
    8624:	46bd      	mov	sp, r7
    8626:	b002      	add	sp, #8
    8628:	bd80      	pop	{r7, pc}
	...

0000862c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    862c:	b580      	push	{r7, lr}
    862e:	b084      	sub	sp, #16
    8630:	af00      	add	r7, sp, #0
    8632:	6078      	str	r0, [r7, #4]
    8634:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    8636:	683b      	ldr	r3, [r7, #0]
    8638:	781a      	ldrb	r2, [r3, #0]
    863a:	687b      	ldr	r3, [r7, #4]
    863c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    863e:	683b      	ldr	r3, [r7, #0]
    8640:	785a      	ldrb	r2, [r3, #1]
    8642:	687b      	ldr	r3, [r7, #4]
    8644:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    8646:	683b      	ldr	r3, [r7, #0]
    8648:	789a      	ldrb	r2, [r3, #2]
    864a:	687b      	ldr	r3, [r7, #4]
    864c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    864e:	230c      	movs	r3, #12
    8650:	18fb      	adds	r3, r7, r3
    8652:	0018      	movs	r0, r3
    8654:	4b0b      	ldr	r3, [pc, #44]	; (8684 <spi_attach_slave+0x58>)
    8656:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    8658:	230c      	movs	r3, #12
    865a:	18fb      	adds	r3, r7, r3
    865c:	2201      	movs	r2, #1
    865e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    8660:	687b      	ldr	r3, [r7, #4]
    8662:	781b      	ldrb	r3, [r3, #0]
    8664:	220c      	movs	r2, #12
    8666:	18ba      	adds	r2, r7, r2
    8668:	0011      	movs	r1, r2
    866a:	0018      	movs	r0, r3
    866c:	4b06      	ldr	r3, [pc, #24]	; (8688 <spi_attach_slave+0x5c>)
    866e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8670:	687b      	ldr	r3, [r7, #4]
    8672:	781b      	ldrb	r3, [r3, #0]
    8674:	2101      	movs	r1, #1
    8676:	0018      	movs	r0, r3
    8678:	4b04      	ldr	r3, [pc, #16]	; (868c <spi_attach_slave+0x60>)
    867a:	4798      	blx	r3
}
    867c:	46c0      	nop			; (mov r8, r8)
    867e:	46bd      	mov	sp, r7
    8680:	b004      	add	sp, #16
    8682:	bd80      	pop	{r7, pc}
    8684:	00008491 	.word	0x00008491
    8688:	0001204d 	.word	0x0001204d
    868c:	000084b5 	.word	0x000084b5

00008690 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    8690:	b580      	push	{r7, lr}
    8692:	b084      	sub	sp, #16
    8694:	af00      	add	r7, sp, #0
    8696:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8698:	687b      	ldr	r3, [r7, #4]
    869a:	681b      	ldr	r3, [r3, #0]
    869c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    869e:	687b      	ldr	r3, [r7, #4]
    86a0:	681b      	ldr	r3, [r3, #0]
    86a2:	0018      	movs	r0, r3
    86a4:	4b0b      	ldr	r3, [pc, #44]	; (86d4 <spi_enable+0x44>)
    86a6:	4798      	blx	r3
    86a8:	0003      	movs	r3, r0
    86aa:	0018      	movs	r0, r3
    86ac:	4b0a      	ldr	r3, [pc, #40]	; (86d8 <spi_enable+0x48>)
    86ae:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    86b0:	46c0      	nop			; (mov r8, r8)
    86b2:	687b      	ldr	r3, [r7, #4]
    86b4:	0018      	movs	r0, r3
    86b6:	4b09      	ldr	r3, [pc, #36]	; (86dc <spi_enable+0x4c>)
    86b8:	4798      	blx	r3
    86ba:	1e03      	subs	r3, r0, #0
    86bc:	d1f9      	bne.n	86b2 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    86be:	68fb      	ldr	r3, [r7, #12]
    86c0:	681b      	ldr	r3, [r3, #0]
    86c2:	2202      	movs	r2, #2
    86c4:	431a      	orrs	r2, r3
    86c6:	68fb      	ldr	r3, [r7, #12]
    86c8:	601a      	str	r2, [r3, #0]
}
    86ca:	46c0      	nop			; (mov r8, r8)
    86cc:	46bd      	mov	sp, r7
    86ce:	b004      	add	sp, #16
    86d0:	bd80      	pop	{r7, pc}
    86d2:	46c0      	nop			; (mov r8, r8)
    86d4:	000126f9 	.word	0x000126f9
    86d8:	00008509 	.word	0x00008509
    86dc:	00008565 	.word	0x00008565

000086e0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    86e0:	b580      	push	{r7, lr}
    86e2:	b084      	sub	sp, #16
    86e4:	af00      	add	r7, sp, #0
    86e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    86e8:	687b      	ldr	r3, [r7, #4]
    86ea:	681b      	ldr	r3, [r3, #0]
    86ec:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    86ee:	687b      	ldr	r3, [r7, #4]
    86f0:	681b      	ldr	r3, [r3, #0]
    86f2:	0018      	movs	r0, r3
    86f4:	4b0e      	ldr	r3, [pc, #56]	; (8730 <spi_disable+0x50>)
    86f6:	4798      	blx	r3
    86f8:	0003      	movs	r3, r0
    86fa:	0018      	movs	r0, r3
    86fc:	4b0d      	ldr	r3, [pc, #52]	; (8734 <spi_disable+0x54>)
    86fe:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    8700:	46c0      	nop			; (mov r8, r8)
    8702:	687b      	ldr	r3, [r7, #4]
    8704:	0018      	movs	r0, r3
    8706:	4b0c      	ldr	r3, [pc, #48]	; (8738 <spi_disable+0x58>)
    8708:	4798      	blx	r3
    870a:	1e03      	subs	r3, r0, #0
    870c:	d1f9      	bne.n	8702 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    870e:	68fb      	ldr	r3, [r7, #12]
    8710:	228f      	movs	r2, #143	; 0x8f
    8712:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    8714:	68fb      	ldr	r3, [r7, #12]
    8716:	228f      	movs	r2, #143	; 0x8f
    8718:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    871a:	68fb      	ldr	r3, [r7, #12]
    871c:	681b      	ldr	r3, [r3, #0]
    871e:	2202      	movs	r2, #2
    8720:	4393      	bics	r3, r2
    8722:	001a      	movs	r2, r3
    8724:	68fb      	ldr	r3, [r7, #12]
    8726:	601a      	str	r2, [r3, #0]
}
    8728:	46c0      	nop			; (mov r8, r8)
    872a:	46bd      	mov	sp, r7
    872c:	b004      	add	sp, #16
    872e:	bd80      	pop	{r7, pc}
    8730:	000126f9 	.word	0x000126f9
    8734:	00008535 	.word	0x00008535
    8738:	00008565 	.word	0x00008565

0000873c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    873c:	b580      	push	{r7, lr}
    873e:	b084      	sub	sp, #16
    8740:	af00      	add	r7, sp, #0
    8742:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8744:	687b      	ldr	r3, [r7, #4]
    8746:	681b      	ldr	r3, [r3, #0]
    8748:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    874a:	68fb      	ldr	r3, [r7, #12]
    874c:	7e1b      	ldrb	r3, [r3, #24]
    874e:	b2db      	uxtb	r3, r3
    8750:	001a      	movs	r2, r3
    8752:	2302      	movs	r3, #2
    8754:	4013      	ands	r3, r2
    8756:	1e5a      	subs	r2, r3, #1
    8758:	4193      	sbcs	r3, r2
    875a:	b2db      	uxtb	r3, r3
}
    875c:	0018      	movs	r0, r3
    875e:	46bd      	mov	sp, r7
    8760:	b004      	add	sp, #16
    8762:	bd80      	pop	{r7, pc}

00008764 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    8764:	b580      	push	{r7, lr}
    8766:	b084      	sub	sp, #16
    8768:	af00      	add	r7, sp, #0
    876a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    876c:	687b      	ldr	r3, [r7, #4]
    876e:	681b      	ldr	r3, [r3, #0]
    8770:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8772:	68fb      	ldr	r3, [r7, #12]
    8774:	7e1b      	ldrb	r3, [r3, #24]
    8776:	b2db      	uxtb	r3, r3
    8778:	001a      	movs	r2, r3
    877a:	2301      	movs	r3, #1
    877c:	4013      	ands	r3, r2
    877e:	1e5a      	subs	r2, r3, #1
    8780:	4193      	sbcs	r3, r2
    8782:	b2db      	uxtb	r3, r3
}
    8784:	0018      	movs	r0, r3
    8786:	46bd      	mov	sp, r7
    8788:	b004      	add	sp, #16
    878a:	bd80      	pop	{r7, pc}

0000878c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    878c:	b580      	push	{r7, lr}
    878e:	b084      	sub	sp, #16
    8790:	af00      	add	r7, sp, #0
    8792:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8794:	687b      	ldr	r3, [r7, #4]
    8796:	681b      	ldr	r3, [r3, #0]
    8798:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    879a:	68fb      	ldr	r3, [r7, #12]
    879c:	7e1b      	ldrb	r3, [r3, #24]
    879e:	b2db      	uxtb	r3, r3
    87a0:	001a      	movs	r2, r3
    87a2:	2304      	movs	r3, #4
    87a4:	4013      	ands	r3, r2
    87a6:	1e5a      	subs	r2, r3, #1
    87a8:	4193      	sbcs	r3, r2
    87aa:	b2db      	uxtb	r3, r3
}
    87ac:	0018      	movs	r0, r3
    87ae:	46bd      	mov	sp, r7
    87b0:	b004      	add	sp, #16
    87b2:	bd80      	pop	{r7, pc}

000087b4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    87b4:	b580      	push	{r7, lr}
    87b6:	b084      	sub	sp, #16
    87b8:	af00      	add	r7, sp, #0
    87ba:	6078      	str	r0, [r7, #4]
    87bc:	000a      	movs	r2, r1
    87be:	1cbb      	adds	r3, r7, #2
    87c0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    87c2:	687b      	ldr	r3, [r7, #4]
    87c4:	681b      	ldr	r3, [r3, #0]
    87c6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    87c8:	687b      	ldr	r3, [r7, #4]
    87ca:	0018      	movs	r0, r3
    87cc:	4b0a      	ldr	r3, [pc, #40]	; (87f8 <spi_write+0x44>)
    87ce:	4798      	blx	r3
    87d0:	0003      	movs	r3, r0
    87d2:	001a      	movs	r2, r3
    87d4:	2301      	movs	r3, #1
    87d6:	4053      	eors	r3, r2
    87d8:	b2db      	uxtb	r3, r3
    87da:	2b00      	cmp	r3, #0
    87dc:	d001      	beq.n	87e2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    87de:	2305      	movs	r3, #5
    87e0:	e006      	b.n	87f0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    87e2:	1cbb      	adds	r3, r7, #2
    87e4:	881b      	ldrh	r3, [r3, #0]
    87e6:	05db      	lsls	r3, r3, #23
    87e8:	0dda      	lsrs	r2, r3, #23
    87ea:	68fb      	ldr	r3, [r7, #12]
    87ec:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    87ee:	2300      	movs	r3, #0
}
    87f0:	0018      	movs	r0, r3
    87f2:	46bd      	mov	sp, r7
    87f4:	b004      	add	sp, #16
    87f6:	bd80      	pop	{r7, pc}
    87f8:	00008765 	.word	0x00008765

000087fc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    87fc:	b580      	push	{r7, lr}
    87fe:	b084      	sub	sp, #16
    8800:	af00      	add	r7, sp, #0
    8802:	6078      	str	r0, [r7, #4]
    8804:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8806:	687b      	ldr	r3, [r7, #4]
    8808:	681b      	ldr	r3, [r3, #0]
    880a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    880c:	687b      	ldr	r3, [r7, #4]
    880e:	0018      	movs	r0, r3
    8810:	4b1b      	ldr	r3, [pc, #108]	; (8880 <spi_read+0x84>)
    8812:	4798      	blx	r3
    8814:	0003      	movs	r3, r0
    8816:	001a      	movs	r2, r3
    8818:	2301      	movs	r3, #1
    881a:	4053      	eors	r3, r2
    881c:	b2db      	uxtb	r3, r3
    881e:	2b00      	cmp	r3, #0
    8820:	d001      	beq.n	8826 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    8822:	2310      	movs	r3, #16
    8824:	e027      	b.n	8876 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    8826:	230f      	movs	r3, #15
    8828:	18fb      	adds	r3, r7, r3
    882a:	2200      	movs	r2, #0
    882c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    882e:	68bb      	ldr	r3, [r7, #8]
    8830:	8b5b      	ldrh	r3, [r3, #26]
    8832:	b29b      	uxth	r3, r3
    8834:	001a      	movs	r2, r3
    8836:	2304      	movs	r3, #4
    8838:	4013      	ands	r3, r2
    883a:	d006      	beq.n	884a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    883c:	230f      	movs	r3, #15
    883e:	18fb      	adds	r3, r7, r3
    8840:	221e      	movs	r2, #30
    8842:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8844:	68bb      	ldr	r3, [r7, #8]
    8846:	2204      	movs	r2, #4
    8848:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    884a:	687b      	ldr	r3, [r7, #4]
    884c:	799b      	ldrb	r3, [r3, #6]
    884e:	2b01      	cmp	r3, #1
    8850:	d108      	bne.n	8864 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8852:	68bb      	ldr	r3, [r7, #8]
    8854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8856:	b29b      	uxth	r3, r3
    8858:	05db      	lsls	r3, r3, #23
    885a:	0ddb      	lsrs	r3, r3, #23
    885c:	b29a      	uxth	r2, r3
    885e:	683b      	ldr	r3, [r7, #0]
    8860:	801a      	strh	r2, [r3, #0]
    8862:	e005      	b.n	8870 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8864:	68bb      	ldr	r3, [r7, #8]
    8866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8868:	b2db      	uxtb	r3, r3
    886a:	b29a      	uxth	r2, r3
    886c:	683b      	ldr	r3, [r7, #0]
    886e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    8870:	230f      	movs	r3, #15
    8872:	18fb      	adds	r3, r7, r3
    8874:	781b      	ldrb	r3, [r3, #0]
}
    8876:	0018      	movs	r0, r3
    8878:	46bd      	mov	sp, r7
    887a:	b004      	add	sp, #16
    887c:	bd80      	pop	{r7, pc}
    887e:	46c0      	nop			; (mov r8, r8)
    8880:	0000878d 	.word	0x0000878d

00008884 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    8884:	b580      	push	{r7, lr}
    8886:	b086      	sub	sp, #24
    8888:	af00      	add	r7, sp, #0
    888a:	60f8      	str	r0, [r7, #12]
    888c:	60b9      	str	r1, [r7, #8]
    888e:	1dbb      	adds	r3, r7, #6
    8890:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    8892:	2313      	movs	r3, #19
    8894:	18fb      	adds	r3, r7, r3
    8896:	2200      	movs	r2, #0
    8898:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    889a:	2317      	movs	r3, #23
    889c:	18fb      	adds	r3, r7, r3
    889e:	2200      	movs	r2, #0
    88a0:	701a      	strb	r2, [r3, #0]
    88a2:	2316      	movs	r3, #22
    88a4:	18fb      	adds	r3, r7, r3
    88a6:	2200      	movs	r2, #0
    88a8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    88aa:	2314      	movs	r3, #20
    88ac:	18fb      	adds	r3, r7, r3
    88ae:	2200      	movs	r2, #0
    88b0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    88b2:	2310      	movs	r3, #16
    88b4:	18fb      	adds	r3, r7, r3
    88b6:	2200      	movs	r2, #0
    88b8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    88ba:	68bb      	ldr	r3, [r7, #8]
    88bc:	2b00      	cmp	r3, #0
    88be:	d102      	bne.n	88c6 <spi_rw+0x42>
    88c0:	68fb      	ldr	r3, [r7, #12]
    88c2:	2b00      	cmp	r3, #0
    88c4:	d003      	beq.n	88ce <spi_rw+0x4a>
    88c6:	1dbb      	adds	r3, r7, #6
    88c8:	881b      	ldrh	r3, [r3, #0]
    88ca:	2b00      	cmp	r3, #0
    88cc:	d102      	bne.n	88d4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    88ce:	230f      	movs	r3, #15
    88d0:	425b      	negs	r3, r3
    88d2:	e07e      	b.n	89d2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    88d4:	68fb      	ldr	r3, [r7, #12]
    88d6:	2b00      	cmp	r3, #0
    88d8:	d106      	bne.n	88e8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    88da:	2313      	movs	r3, #19
    88dc:	18fb      	adds	r3, r7, r3
    88de:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    88e0:	2317      	movs	r3, #23
    88e2:	18fb      	adds	r3, r7, r3
    88e4:	2201      	movs	r2, #1
    88e6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    88e8:	68bb      	ldr	r3, [r7, #8]
    88ea:	2b00      	cmp	r3, #0
    88ec:	d106      	bne.n	88fc <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    88ee:	2313      	movs	r3, #19
    88f0:	18fb      	adds	r3, r7, r3
    88f2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    88f4:	2316      	movs	r3, #22
    88f6:	18fb      	adds	r3, r7, r3
    88f8:	2201      	movs	r2, #1
    88fa:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    88fc:	4937      	ldr	r1, [pc, #220]	; (89dc <spi_rw+0x158>)
    88fe:	4b38      	ldr	r3, [pc, #224]	; (89e0 <spi_rw+0x15c>)
    8900:	2201      	movs	r2, #1
    8902:	0018      	movs	r0, r3
    8904:	4b37      	ldr	r3, [pc, #220]	; (89e4 <spi_rw+0x160>)
    8906:	4798      	blx	r3

	while (u16Sz) {
    8908:	e04c      	b.n	89a4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    890a:	68fb      	ldr	r3, [r7, #12]
    890c:	781a      	ldrb	r2, [r3, #0]
    890e:	2314      	movs	r3, #20
    8910:	18fb      	adds	r3, r7, r3
    8912:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    8914:	46c0      	nop			; (mov r8, r8)
    8916:	4b32      	ldr	r3, [pc, #200]	; (89e0 <spi_rw+0x15c>)
    8918:	0018      	movs	r0, r3
    891a:	4b33      	ldr	r3, [pc, #204]	; (89e8 <spi_rw+0x164>)
    891c:	4798      	blx	r3
    891e:	0003      	movs	r3, r0
    8920:	001a      	movs	r2, r3
    8922:	2301      	movs	r3, #1
    8924:	4053      	eors	r3, r2
    8926:	b2db      	uxtb	r3, r3
    8928:	2b00      	cmp	r3, #0
    892a:	d1f4      	bne.n	8916 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    892c:	46c0      	nop			; (mov r8, r8)
    892e:	2314      	movs	r3, #20
    8930:	18fb      	adds	r3, r7, r3
    8932:	881a      	ldrh	r2, [r3, #0]
    8934:	4b2a      	ldr	r3, [pc, #168]	; (89e0 <spi_rw+0x15c>)
    8936:	0011      	movs	r1, r2
    8938:	0018      	movs	r0, r3
    893a:	4b2c      	ldr	r3, [pc, #176]	; (89ec <spi_rw+0x168>)
    893c:	4798      	blx	r3
    893e:	1e03      	subs	r3, r0, #0
    8940:	d1f5      	bne.n	892e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    8942:	46c0      	nop			; (mov r8, r8)
    8944:	4b26      	ldr	r3, [pc, #152]	; (89e0 <spi_rw+0x15c>)
    8946:	0018      	movs	r0, r3
    8948:	4b29      	ldr	r3, [pc, #164]	; (89f0 <spi_rw+0x16c>)
    894a:	4798      	blx	r3
    894c:	0003      	movs	r3, r0
    894e:	001a      	movs	r2, r3
    8950:	2301      	movs	r3, #1
    8952:	4053      	eors	r3, r2
    8954:	b2db      	uxtb	r3, r3
    8956:	2b00      	cmp	r3, #0
    8958:	d1f4      	bne.n	8944 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    895a:	46c0      	nop			; (mov r8, r8)
    895c:	2310      	movs	r3, #16
    895e:	18fa      	adds	r2, r7, r3
    8960:	4b1f      	ldr	r3, [pc, #124]	; (89e0 <spi_rw+0x15c>)
    8962:	0011      	movs	r1, r2
    8964:	0018      	movs	r0, r3
    8966:	4b23      	ldr	r3, [pc, #140]	; (89f4 <spi_rw+0x170>)
    8968:	4798      	blx	r3
    896a:	1e03      	subs	r3, r0, #0
    896c:	d1f6      	bne.n	895c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    896e:	2310      	movs	r3, #16
    8970:	18fb      	adds	r3, r7, r3
    8972:	881b      	ldrh	r3, [r3, #0]
    8974:	b2da      	uxtb	r2, r3
    8976:	68bb      	ldr	r3, [r7, #8]
    8978:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    897a:	1dbb      	adds	r3, r7, #6
    897c:	881a      	ldrh	r2, [r3, #0]
    897e:	1dbb      	adds	r3, r7, #6
    8980:	3a01      	subs	r2, #1
    8982:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    8984:	2316      	movs	r3, #22
    8986:	18fb      	adds	r3, r7, r3
    8988:	781b      	ldrb	r3, [r3, #0]
    898a:	2b00      	cmp	r3, #0
    898c:	d102      	bne.n	8994 <spi_rw+0x110>
			pu8Miso++;
    898e:	68bb      	ldr	r3, [r7, #8]
    8990:	3301      	adds	r3, #1
    8992:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    8994:	2317      	movs	r3, #23
    8996:	18fb      	adds	r3, r7, r3
    8998:	781b      	ldrb	r3, [r3, #0]
    899a:	2b00      	cmp	r3, #0
    899c:	d102      	bne.n	89a4 <spi_rw+0x120>
			pu8Mosi++;
    899e:	68fb      	ldr	r3, [r7, #12]
    89a0:	3301      	adds	r3, #1
    89a2:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
    89a4:	1dbb      	adds	r3, r7, #6
    89a6:	881b      	ldrh	r3, [r3, #0]
    89a8:	2b00      	cmp	r3, #0
    89aa:	d1ae      	bne.n	890a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
    89ac:	46c0      	nop			; (mov r8, r8)
    89ae:	4b0c      	ldr	r3, [pc, #48]	; (89e0 <spi_rw+0x15c>)
    89b0:	0018      	movs	r0, r3
    89b2:	4b11      	ldr	r3, [pc, #68]	; (89f8 <spi_rw+0x174>)
    89b4:	4798      	blx	r3
    89b6:	0003      	movs	r3, r0
    89b8:	001a      	movs	r2, r3
    89ba:	2301      	movs	r3, #1
    89bc:	4053      	eors	r3, r2
    89be:	b2db      	uxtb	r3, r3
    89c0:	2b00      	cmp	r3, #0
    89c2:	d1f4      	bne.n	89ae <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    89c4:	4905      	ldr	r1, [pc, #20]	; (89dc <spi_rw+0x158>)
    89c6:	4b06      	ldr	r3, [pc, #24]	; (89e0 <spi_rw+0x15c>)
    89c8:	2200      	movs	r2, #0
    89ca:	0018      	movs	r0, r3
    89cc:	4b05      	ldr	r3, [pc, #20]	; (89e4 <spi_rw+0x160>)
    89ce:	4798      	blx	r3

	return M2M_SUCCESS;
    89d0:	2300      	movs	r3, #0
}
    89d2:	0018      	movs	r0, r3
    89d4:	46bd      	mov	sp, r7
    89d6:	b006      	add	sp, #24
    89d8:	bd80      	pop	{r7, pc}
    89da:	46c0      	nop			; (mov r8, r8)
    89dc:	200002a0 	.word	0x200002a0
    89e0:	200002a4 	.word	0x200002a4
    89e4:	0001307d 	.word	0x0001307d
    89e8:	00008765 	.word	0x00008765
    89ec:	000087b5 	.word	0x000087b5
    89f0:	0000878d 	.word	0x0000878d
    89f4:	000087fd 	.word	0x000087fd
    89f8:	0000873d 	.word	0x0000873d

000089fc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    89fc:	b580      	push	{r7, lr}
    89fe:	b092      	sub	sp, #72	; 0x48
    8a00:	af00      	add	r7, sp, #0
    8a02:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    8a04:	2347      	movs	r3, #71	; 0x47
    8a06:	18fb      	adds	r3, r7, r3
    8a08:	2200      	movs	r2, #0
    8a0a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    8a0c:	2308      	movs	r3, #8
    8a0e:	18fb      	adds	r3, r7, r3
    8a10:	0018      	movs	r0, r3
    8a12:	4b26      	ldr	r3, [pc, #152]	; (8aac <nm_bus_init+0xb0>)
    8a14:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    8a16:	2308      	movs	r3, #8
    8a18:	18fb      	adds	r3, r7, r3
    8a1a:	220e      	movs	r2, #14
    8a1c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    8a1e:	2308      	movs	r3, #8
    8a20:	18fa      	adds	r2, r7, r3
    8a22:	4b23      	ldr	r3, [pc, #140]	; (8ab0 <nm_bus_init+0xb4>)
    8a24:	0011      	movs	r1, r2
    8a26:	0018      	movs	r0, r3
    8a28:	4b22      	ldr	r3, [pc, #136]	; (8ab4 <nm_bus_init+0xb8>)
    8a2a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    8a2c:	230c      	movs	r3, #12
    8a2e:	18fb      	adds	r3, r7, r3
    8a30:	0018      	movs	r0, r3
    8a32:	4b21      	ldr	r3, [pc, #132]	; (8ab8 <nm_bus_init+0xbc>)
    8a34:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    8a36:	230c      	movs	r3, #12
    8a38:	18fb      	adds	r3, r7, r3
    8a3a:	22c0      	movs	r2, #192	; 0xc0
    8a3c:	0392      	lsls	r2, r2, #14
    8a3e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    8a40:	230c      	movs	r3, #12
    8a42:	18fb      	adds	r3, r7, r3
    8a44:	4a1d      	ldr	r2, [pc, #116]	; (8abc <nm_bus_init+0xc0>)
    8a46:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    8a48:	230c      	movs	r3, #12
    8a4a:	18fb      	adds	r3, r7, r3
    8a4c:	4a1c      	ldr	r2, [pc, #112]	; (8ac0 <nm_bus_init+0xc4>)
    8a4e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    8a50:	230c      	movs	r3, #12
    8a52:	18fb      	adds	r3, r7, r3
    8a54:	2201      	movs	r2, #1
    8a56:	4252      	negs	r2, r2
    8a58:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    8a5a:	230c      	movs	r3, #12
    8a5c:	18fb      	adds	r3, r7, r3
    8a5e:	4a19      	ldr	r2, [pc, #100]	; (8ac4 <nm_bus_init+0xc8>)
    8a60:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    8a62:	230c      	movs	r3, #12
    8a64:	18fb      	adds	r3, r7, r3
    8a66:	2200      	movs	r2, #0
    8a68:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    8a6a:	230c      	movs	r3, #12
    8a6c:	18fb      	adds	r3, r7, r3
    8a6e:	4a16      	ldr	r2, [pc, #88]	; (8ac8 <nm_bus_init+0xcc>)
    8a70:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    8a72:	230c      	movs	r3, #12
    8a74:	18fa      	adds	r2, r7, r3
    8a76:	4915      	ldr	r1, [pc, #84]	; (8acc <nm_bus_init+0xd0>)
    8a78:	4b15      	ldr	r3, [pc, #84]	; (8ad0 <nm_bus_init+0xd4>)
    8a7a:	0018      	movs	r0, r3
    8a7c:	4b15      	ldr	r3, [pc, #84]	; (8ad4 <nm_bus_init+0xd8>)
    8a7e:	4798      	blx	r3
    8a80:	1e03      	subs	r3, r0, #0
    8a82:	d002      	beq.n	8a8a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    8a84:	2306      	movs	r3, #6
    8a86:	425b      	negs	r3, r3
    8a88:	e00c      	b.n	8aa4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    8a8a:	4b11      	ldr	r3, [pc, #68]	; (8ad0 <nm_bus_init+0xd4>)
    8a8c:	0018      	movs	r0, r3
    8a8e:	4b12      	ldr	r3, [pc, #72]	; (8ad8 <nm_bus_init+0xdc>)
    8a90:	4798      	blx	r3

	nm_bsp_reset();
    8a92:	4b12      	ldr	r3, [pc, #72]	; (8adc <nm_bus_init+0xe0>)
    8a94:	4798      	blx	r3
	nm_bsp_sleep(1);
    8a96:	2001      	movs	r0, #1
    8a98:	4b11      	ldr	r3, [pc, #68]	; (8ae0 <nm_bus_init+0xe4>)
    8a9a:	4798      	blx	r3
#endif
	return result;
    8a9c:	2347      	movs	r3, #71	; 0x47
    8a9e:	18fb      	adds	r3, r7, r3
    8aa0:	781b      	ldrb	r3, [r3, #0]
    8aa2:	b25b      	sxtb	r3, r3
}
    8aa4:	0018      	movs	r0, r3
    8aa6:	46bd      	mov	sp, r7
    8aa8:	b012      	add	sp, #72	; 0x48
    8aaa:	bd80      	pop	{r7, pc}
    8aac:	00008609 	.word	0x00008609
    8ab0:	200002a0 	.word	0x200002a0
    8ab4:	0000862d 	.word	0x0000862d
    8ab8:	00008585 	.word	0x00008585
    8abc:	000c0002 	.word	0x000c0002
    8ac0:	000d0002 	.word	0x000d0002
    8ac4:	000f0002 	.word	0x000f0002
    8ac8:	00b71b00 	.word	0x00b71b00
    8acc:	42001000 	.word	0x42001000
    8ad0:	200002a4 	.word	0x200002a4
    8ad4:	00012d1d 	.word	0x00012d1d
    8ad8:	00008691 	.word	0x00008691
    8adc:	000082f1 	.word	0x000082f1
    8ae0:	00008335 	.word	0x00008335

00008ae4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    8ae4:	b590      	push	{r4, r7, lr}
    8ae6:	b085      	sub	sp, #20
    8ae8:	af00      	add	r7, sp, #0
    8aea:	0002      	movs	r2, r0
    8aec:	6039      	str	r1, [r7, #0]
    8aee:	1dfb      	adds	r3, r7, #7
    8af0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    8af2:	230f      	movs	r3, #15
    8af4:	18fb      	adds	r3, r7, r3
    8af6:	2200      	movs	r2, #0
    8af8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    8afa:	1dfb      	adds	r3, r7, #7
    8afc:	781b      	ldrb	r3, [r3, #0]
    8afe:	2b03      	cmp	r3, #3
    8b00:	d10f      	bne.n	8b22 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    8b02:	683b      	ldr	r3, [r7, #0]
    8b04:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    8b06:	68bb      	ldr	r3, [r7, #8]
    8b08:	6818      	ldr	r0, [r3, #0]
    8b0a:	68bb      	ldr	r3, [r7, #8]
    8b0c:	6859      	ldr	r1, [r3, #4]
    8b0e:	68bb      	ldr	r3, [r7, #8]
    8b10:	891b      	ldrh	r3, [r3, #8]
    8b12:	220f      	movs	r2, #15
    8b14:	18bc      	adds	r4, r7, r2
    8b16:	001a      	movs	r2, r3
    8b18:	4b10      	ldr	r3, [pc, #64]	; (8b5c <nm_bus_ioctl+0x78>)
    8b1a:	4798      	blx	r3
    8b1c:	0003      	movs	r3, r0
    8b1e:	7023      	strb	r3, [r4, #0]
		}
		break;
    8b20:	e013      	b.n	8b4a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    8b22:	230f      	movs	r3, #15
    8b24:	18fb      	adds	r3, r7, r3
    8b26:	22ff      	movs	r2, #255	; 0xff
    8b28:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    8b2a:	230e      	movs	r3, #14
    8b2c:	33ff      	adds	r3, #255	; 0xff
    8b2e:	001a      	movs	r2, r3
    8b30:	490b      	ldr	r1, [pc, #44]	; (8b60 <nm_bus_ioctl+0x7c>)
    8b32:	4b0c      	ldr	r3, [pc, #48]	; (8b64 <nm_bus_ioctl+0x80>)
    8b34:	0018      	movs	r0, r3
    8b36:	4b0c      	ldr	r3, [pc, #48]	; (8b68 <nm_bus_ioctl+0x84>)
    8b38:	4798      	blx	r3
    8b3a:	4b0c      	ldr	r3, [pc, #48]	; (8b6c <nm_bus_ioctl+0x88>)
    8b3c:	0018      	movs	r0, r3
    8b3e:	4b0c      	ldr	r3, [pc, #48]	; (8b70 <nm_bus_ioctl+0x8c>)
    8b40:	4798      	blx	r3
    8b42:	200d      	movs	r0, #13
    8b44:	4b0b      	ldr	r3, [pc, #44]	; (8b74 <nm_bus_ioctl+0x90>)
    8b46:	4798      	blx	r3
			break;
    8b48:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    8b4a:	230f      	movs	r3, #15
    8b4c:	18fb      	adds	r3, r7, r3
    8b4e:	781b      	ldrb	r3, [r3, #0]
    8b50:	b25b      	sxtb	r3, r3
}
    8b52:	0018      	movs	r0, r3
    8b54:	46bd      	mov	sp, r7
    8b56:	b005      	add	sp, #20
    8b58:	bd90      	pop	{r4, r7, pc}
    8b5a:	46c0      	nop			; (mov r8, r8)
    8b5c:	00008885 	.word	0x00008885
    8b60:	0001830c 	.word	0x0001830c
    8b64:	000182e4 	.word	0x000182e4
    8b68:	00016d69 	.word	0x00016d69
    8b6c:	000182f8 	.word	0x000182f8
    8b70:	00016e85 	.word	0x00016e85
    8b74:	00016d9d 	.word	0x00016d9d

00008b78 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    8b78:	b580      	push	{r7, lr}
    8b7a:	b082      	sub	sp, #8
    8b7c:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    8b7e:	1dfb      	adds	r3, r7, #7
    8b80:	2200      	movs	r2, #0
    8b82:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    8b84:	1d3b      	adds	r3, r7, #4
    8b86:	0018      	movs	r0, r3
    8b88:	4b13      	ldr	r3, [pc, #76]	; (8bd8 <nm_bus_deinit+0x60>)
    8b8a:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8b8c:	1d3b      	adds	r3, r7, #4
    8b8e:	2200      	movs	r2, #0
    8b90:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    8b92:	1d3b      	adds	r3, r7, #4
    8b94:	2200      	movs	r2, #0
    8b96:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    8b98:	4b10      	ldr	r3, [pc, #64]	; (8bdc <nm_bus_deinit+0x64>)
    8b9a:	0018      	movs	r0, r3
    8b9c:	4b10      	ldr	r3, [pc, #64]	; (8be0 <nm_bus_deinit+0x68>)
    8b9e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    8ba0:	1d3b      	adds	r3, r7, #4
    8ba2:	0019      	movs	r1, r3
    8ba4:	200c      	movs	r0, #12
    8ba6:	4b0f      	ldr	r3, [pc, #60]	; (8be4 <nm_bus_deinit+0x6c>)
    8ba8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    8baa:	1d3b      	adds	r3, r7, #4
    8bac:	0019      	movs	r1, r3
    8bae:	200f      	movs	r0, #15
    8bb0:	4b0c      	ldr	r3, [pc, #48]	; (8be4 <nm_bus_deinit+0x6c>)
    8bb2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    8bb4:	1d3b      	adds	r3, r7, #4
    8bb6:	0019      	movs	r1, r3
    8bb8:	200d      	movs	r0, #13
    8bba:	4b0a      	ldr	r3, [pc, #40]	; (8be4 <nm_bus_deinit+0x6c>)
    8bbc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    8bbe:	1d3b      	adds	r3, r7, #4
    8bc0:	0019      	movs	r1, r3
    8bc2:	200e      	movs	r0, #14
    8bc4:	4b07      	ldr	r3, [pc, #28]	; (8be4 <nm_bus_deinit+0x6c>)
    8bc6:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    8bc8:	1dfb      	adds	r3, r7, #7
    8bca:	781b      	ldrb	r3, [r3, #0]
    8bcc:	b25b      	sxtb	r3, r3
}
    8bce:	0018      	movs	r0, r3
    8bd0:	46bd      	mov	sp, r7
    8bd2:	b002      	add	sp, #8
    8bd4:	bd80      	pop	{r7, pc}
    8bd6:	46c0      	nop			; (mov r8, r8)
    8bd8:	00008491 	.word	0x00008491
    8bdc:	200002a4 	.word	0x200002a4
    8be0:	000086e1 	.word	0x000086e1
    8be4:	0001204d 	.word	0x0001204d

00008be8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    8be8:	b580      	push	{r7, lr}
    8bea:	b084      	sub	sp, #16
    8bec:	af00      	add	r7, sp, #0
    8bee:	60f8      	str	r0, [r7, #12]
    8bf0:	60b9      	str	r1, [r7, #8]
    8bf2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	2b00      	cmp	r3, #0
    8bf8:	d010      	beq.n	8c1c <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    8bfa:	68bb      	ldr	r3, [r7, #8]
    8bfc:	781a      	ldrb	r2, [r3, #0]
    8bfe:	68fb      	ldr	r3, [r7, #12]
    8c00:	701a      	strb	r2, [r3, #0]
		pDst++;
    8c02:	68fb      	ldr	r3, [r7, #12]
    8c04:	3301      	adds	r3, #1
    8c06:	60fb      	str	r3, [r7, #12]
		pSrc++;
    8c08:	68bb      	ldr	r3, [r7, #8]
    8c0a:	3301      	adds	r3, #1
    8c0c:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    8c0e:	687b      	ldr	r3, [r7, #4]
    8c10:	3b01      	subs	r3, #1
    8c12:	607b      	str	r3, [r7, #4]
    8c14:	687b      	ldr	r3, [r7, #4]
    8c16:	2b00      	cmp	r3, #0
    8c18:	d1ef      	bne.n	8bfa <m2m_memcpy+0x12>
    8c1a:	e000      	b.n	8c1e <m2m_memcpy+0x36>
	if(sz == 0) return;
    8c1c:	46c0      	nop			; (mov r8, r8)
}
    8c1e:	46bd      	mov	sp, r7
    8c20:	b004      	add	sp, #16
    8c22:	bd80      	pop	{r7, pc}

00008c24 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    8c24:	b580      	push	{r7, lr}
    8c26:	b084      	sub	sp, #16
    8c28:	af00      	add	r7, sp, #0
    8c2a:	60f8      	str	r0, [r7, #12]
    8c2c:	607a      	str	r2, [r7, #4]
    8c2e:	230b      	movs	r3, #11
    8c30:	18fb      	adds	r3, r7, r3
    8c32:	1c0a      	adds	r2, r1, #0
    8c34:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    8c36:	687b      	ldr	r3, [r7, #4]
    8c38:	2b00      	cmp	r3, #0
    8c3a:	d00e      	beq.n	8c5a <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    8c3c:	68fb      	ldr	r3, [r7, #12]
    8c3e:	220b      	movs	r2, #11
    8c40:	18ba      	adds	r2, r7, r2
    8c42:	7812      	ldrb	r2, [r2, #0]
    8c44:	701a      	strb	r2, [r3, #0]
		pBuf++;
    8c46:	68fb      	ldr	r3, [r7, #12]
    8c48:	3301      	adds	r3, #1
    8c4a:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    8c4c:	687b      	ldr	r3, [r7, #4]
    8c4e:	3b01      	subs	r3, #1
    8c50:	607b      	str	r3, [r7, #4]
    8c52:	687b      	ldr	r3, [r7, #4]
    8c54:	2b00      	cmp	r3, #0
    8c56:	d1f1      	bne.n	8c3c <m2m_memset+0x18>
    8c58:	e000      	b.n	8c5c <m2m_memset+0x38>
	if(sz == 0) return;
    8c5a:	46c0      	nop			; (mov r8, r8)
}
    8c5c:	46bd      	mov	sp, r7
    8c5e:	b004      	add	sp, #16
    8c60:	bd80      	pop	{r7, pc}

00008c62 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    8c62:	b580      	push	{r7, lr}
    8c64:	b084      	sub	sp, #16
    8c66:	af00      	add	r7, sp, #0
    8c68:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    8c6a:	230e      	movs	r3, #14
    8c6c:	18fb      	adds	r3, r7, r3
    8c6e:	2200      	movs	r2, #0
    8c70:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    8c72:	e009      	b.n	8c88 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    8c74:	230e      	movs	r3, #14
    8c76:	18fb      	adds	r3, r7, r3
    8c78:	881a      	ldrh	r2, [r3, #0]
    8c7a:	230e      	movs	r3, #14
    8c7c:	18fb      	adds	r3, r7, r3
    8c7e:	3201      	adds	r2, #1
    8c80:	801a      	strh	r2, [r3, #0]
		pcStr++;
    8c82:	687b      	ldr	r3, [r7, #4]
    8c84:	3301      	adds	r3, #1
    8c86:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    8c88:	687b      	ldr	r3, [r7, #4]
    8c8a:	781b      	ldrb	r3, [r3, #0]
    8c8c:	2b00      	cmp	r3, #0
    8c8e:	d1f1      	bne.n	8c74 <m2m_strlen+0x12>
	}
	return u16StrLen;
    8c90:	230e      	movs	r3, #14
    8c92:	18fb      	adds	r3, r7, r3
    8c94:	881b      	ldrh	r3, [r3, #0]
}
    8c96:	0018      	movs	r0, r3
    8c98:	46bd      	mov	sp, r7
    8c9a:	b004      	add	sp, #16
    8c9c:	bd80      	pop	{r7, pc}
	...

00008ca0 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
    8ca0:	b580      	push	{r7, lr}
    8ca2:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    8ca4:	4b04      	ldr	r3, [pc, #16]	; (8cb8 <isr+0x18>)
    8ca6:	78db      	ldrb	r3, [r3, #3]
    8ca8:	b2db      	uxtb	r3, r3
    8caa:	3301      	adds	r3, #1
    8cac:	b2da      	uxtb	r2, r3
    8cae:	4b02      	ldr	r3, [pc, #8]	; (8cb8 <isr+0x18>)
    8cb0:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    8cb2:	46c0      	nop			; (mov r8, r8)
    8cb4:	46bd      	mov	sp, r7
    8cb6:	bd80      	pop	{r7, pc}
    8cb8:	200002e0 	.word	0x200002e0

00008cbc <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    8cbc:	b590      	push	{r4, r7, lr}
    8cbe:	b083      	sub	sp, #12
    8cc0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    8cc2:	1dfb      	adds	r3, r7, #7
    8cc4:	2200      	movs	r2, #0
    8cc6:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    8cc8:	4b14      	ldr	r3, [pc, #80]	; (8d1c <hif_set_rx_done+0x60>)
    8cca:	2200      	movs	r2, #0
    8ccc:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    8cce:	2001      	movs	r0, #1
    8cd0:	4b13      	ldr	r3, [pc, #76]	; (8d20 <hif_set_rx_done+0x64>)
    8cd2:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    8cd4:	1dfc      	adds	r4, r7, #7
    8cd6:	003b      	movs	r3, r7
    8cd8:	4a12      	ldr	r2, [pc, #72]	; (8d24 <hif_set_rx_done+0x68>)
    8cda:	0019      	movs	r1, r3
    8cdc:	0010      	movs	r0, r2
    8cde:	4b12      	ldr	r3, [pc, #72]	; (8d28 <hif_set_rx_done+0x6c>)
    8ce0:	4798      	blx	r3
    8ce2:	0003      	movs	r3, r0
    8ce4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    8ce6:	1dfb      	adds	r3, r7, #7
    8ce8:	781b      	ldrb	r3, [r3, #0]
    8cea:	b25b      	sxtb	r3, r3
    8cec:	2b00      	cmp	r3, #0
    8cee:	d10d      	bne.n	8d0c <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    8cf0:	683b      	ldr	r3, [r7, #0]
    8cf2:	2202      	movs	r2, #2
    8cf4:	4313      	orrs	r3, r2
    8cf6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    8cf8:	683b      	ldr	r3, [r7, #0]
    8cfa:	1dfc      	adds	r4, r7, #7
    8cfc:	4a09      	ldr	r2, [pc, #36]	; (8d24 <hif_set_rx_done+0x68>)
    8cfe:	0019      	movs	r1, r3
    8d00:	0010      	movs	r0, r2
    8d02:	4b0a      	ldr	r3, [pc, #40]	; (8d2c <hif_set_rx_done+0x70>)
    8d04:	4798      	blx	r3
    8d06:	0003      	movs	r3, r0
    8d08:	7023      	strb	r3, [r4, #0]
    8d0a:	e000      	b.n	8d0e <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
    8d0c:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    8d0e:	1dfb      	adds	r3, r7, #7
    8d10:	781b      	ldrb	r3, [r3, #0]
    8d12:	b25b      	sxtb	r3, r3

}
    8d14:	0018      	movs	r0, r3
    8d16:	46bd      	mov	sp, r7
    8d18:	b003      	add	sp, #12
    8d1a:	bd90      	pop	{r4, r7, pc}
    8d1c:	200002e0 	.word	0x200002e0
    8d20:	000083d5 	.word	0x000083d5
    8d24:	00001070 	.word	0x00001070
    8d28:	0000ac8d 	.word	0x0000ac8d
    8d2c:	0000acb1 	.word	0x0000acb1

00008d30 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    8d30:	b580      	push	{r7, lr}
    8d32:	b082      	sub	sp, #8
    8d34:	af00      	add	r7, sp, #0
    8d36:	603a      	str	r2, [r7, #0]
    8d38:	1dfb      	adds	r3, r7, #7
    8d3a:	1c02      	adds	r2, r0, #0
    8d3c:	701a      	strb	r2, [r3, #0]
    8d3e:	1d3b      	adds	r3, r7, #4
    8d40:	1c0a      	adds	r2, r1, #0
    8d42:	801a      	strh	r2, [r3, #0]


}
    8d44:	46c0      	nop			; (mov r8, r8)
    8d46:	46bd      	mov	sp, r7
    8d48:	b002      	add	sp, #8
    8d4a:	bd80      	pop	{r7, pc}

00008d4c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    8d4c:	b590      	push	{r4, r7, lr}
    8d4e:	b083      	sub	sp, #12
    8d50:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    8d52:	1dfb      	adds	r3, r7, #7
    8d54:	2200      	movs	r2, #0
    8d56:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    8d58:	4b16      	ldr	r3, [pc, #88]	; (8db4 <hif_chip_wake+0x68>)
    8d5a:	789b      	ldrb	r3, [r3, #2]
    8d5c:	b2db      	uxtb	r3, r3
    8d5e:	2b00      	cmp	r3, #0
    8d60:	d003      	beq.n	8d6a <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    8d62:	1dfb      	adds	r3, r7, #7
    8d64:	781b      	ldrb	r3, [r3, #0]
    8d66:	b25b      	sxtb	r3, r3
    8d68:	e01f      	b.n	8daa <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    8d6a:	4b12      	ldr	r3, [pc, #72]	; (8db4 <hif_chip_wake+0x68>)
    8d6c:	785b      	ldrb	r3, [r3, #1]
    8d6e:	b2db      	uxtb	r3, r3
    8d70:	2b00      	cmp	r3, #0
    8d72:	d10e      	bne.n	8d92 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    8d74:	4b0f      	ldr	r3, [pc, #60]	; (8db4 <hif_chip_wake+0x68>)
    8d76:	781b      	ldrb	r3, [r3, #0]
    8d78:	b2db      	uxtb	r3, r3
    8d7a:	2b00      	cmp	r3, #0
    8d7c:	d009      	beq.n	8d92 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    8d7e:	1dfc      	adds	r4, r7, #7
    8d80:	4b0d      	ldr	r3, [pc, #52]	; (8db8 <hif_chip_wake+0x6c>)
    8d82:	4798      	blx	r3
    8d84:	0003      	movs	r3, r0
    8d86:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    8d88:	1dfb      	adds	r3, r7, #7
    8d8a:	781b      	ldrb	r3, [r3, #0]
    8d8c:	b25b      	sxtb	r3, r3
    8d8e:	2b00      	cmp	r3, #0
    8d90:	d107      	bne.n	8da2 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    8d92:	4b08      	ldr	r3, [pc, #32]	; (8db4 <hif_chip_wake+0x68>)
    8d94:	785b      	ldrb	r3, [r3, #1]
    8d96:	b2db      	uxtb	r3, r3
    8d98:	3301      	adds	r3, #1
    8d9a:	b2da      	uxtb	r2, r3
    8d9c:	4b05      	ldr	r3, [pc, #20]	; (8db4 <hif_chip_wake+0x68>)
    8d9e:	705a      	strb	r2, [r3, #1]
    8da0:	e000      	b.n	8da4 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
    8da2:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    8da4:	1dfb      	adds	r3, r7, #7
    8da6:	781b      	ldrb	r3, [r3, #0]
    8da8:	b25b      	sxtb	r3, r3
}
    8daa:	0018      	movs	r0, r3
    8dac:	46bd      	mov	sp, r7
    8dae:	b003      	add	sp, #12
    8db0:	bd90      	pop	{r4, r7, pc}
    8db2:	46c0      	nop			; (mov r8, r8)
    8db4:	200002e0 	.word	0x200002e0
    8db8:	0000a761 	.word	0x0000a761

00008dbc <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    8dbc:	b580      	push	{r7, lr}
    8dbe:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    8dc0:	4b07      	ldr	r3, [pc, #28]	; (8de0 <hif_chip_sleep_sc+0x24>)
    8dc2:	785b      	ldrb	r3, [r3, #1]
    8dc4:	b2db      	uxtb	r3, r3
    8dc6:	2b00      	cmp	r3, #0
    8dc8:	d006      	beq.n	8dd8 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    8dca:	4b05      	ldr	r3, [pc, #20]	; (8de0 <hif_chip_sleep_sc+0x24>)
    8dcc:	785b      	ldrb	r3, [r3, #1]
    8dce:	b2db      	uxtb	r3, r3
    8dd0:	3b01      	subs	r3, #1
    8dd2:	b2da      	uxtb	r2, r3
    8dd4:	4b02      	ldr	r3, [pc, #8]	; (8de0 <hif_chip_sleep_sc+0x24>)
    8dd6:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    8dd8:	2300      	movs	r3, #0
}
    8dda:	0018      	movs	r0, r3
    8ddc:	46bd      	mov	sp, r7
    8dde:	bd80      	pop	{r7, pc}
    8de0:	200002e0 	.word	0x200002e0

00008de4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    8de4:	b590      	push	{r4, r7, lr}
    8de6:	b083      	sub	sp, #12
    8de8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    8dea:	1dfb      	adds	r3, r7, #7
    8dec:	2200      	movs	r2, #0
    8dee:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    8df0:	4b10      	ldr	r3, [pc, #64]	; (8e34 <hif_chip_sleep+0x50>)
    8df2:	785b      	ldrb	r3, [r3, #1]
    8df4:	b2db      	uxtb	r3, r3
    8df6:	2b00      	cmp	r3, #0
    8df8:	d006      	beq.n	8e08 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    8dfa:	4b0e      	ldr	r3, [pc, #56]	; (8e34 <hif_chip_sleep+0x50>)
    8dfc:	785b      	ldrb	r3, [r3, #1]
    8dfe:	b2db      	uxtb	r3, r3
    8e00:	3b01      	subs	r3, #1
    8e02:	b2da      	uxtb	r2, r3
    8e04:	4b0b      	ldr	r3, [pc, #44]	; (8e34 <hif_chip_sleep+0x50>)
    8e06:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    8e08:	4b0a      	ldr	r3, [pc, #40]	; (8e34 <hif_chip_sleep+0x50>)
    8e0a:	785b      	ldrb	r3, [r3, #1]
    8e0c:	b2db      	uxtb	r3, r3
    8e0e:	2b00      	cmp	r3, #0
    8e10:	d109      	bne.n	8e26 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    8e12:	4b08      	ldr	r3, [pc, #32]	; (8e34 <hif_chip_sleep+0x50>)
    8e14:	781b      	ldrb	r3, [r3, #0]
    8e16:	b2db      	uxtb	r3, r3
    8e18:	2b00      	cmp	r3, #0
    8e1a:	d004      	beq.n	8e26 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    8e1c:	1dfc      	adds	r4, r7, #7
    8e1e:	4b06      	ldr	r3, [pc, #24]	; (8e38 <hif_chip_sleep+0x54>)
    8e20:	4798      	blx	r3
    8e22:	0003      	movs	r3, r0
    8e24:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    8e26:	1dfb      	adds	r3, r7, #7
    8e28:	781b      	ldrb	r3, [r3, #0]
    8e2a:	b25b      	sxtb	r3, r3
}
    8e2c:	0018      	movs	r0, r3
    8e2e:	46bd      	mov	sp, r7
    8e30:	b003      	add	sp, #12
    8e32:	bd90      	pop	{r4, r7, pc}
    8e34:	200002e0 	.word	0x200002e0
    8e38:	0000a689 	.word	0x0000a689

00008e3c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    8e3c:	b580      	push	{r7, lr}
    8e3e:	b082      	sub	sp, #8
    8e40:	af00      	add	r7, sp, #0
    8e42:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    8e44:	4b09      	ldr	r3, [pc, #36]	; (8e6c <hif_init+0x30>)
    8e46:	2228      	movs	r2, #40	; 0x28
    8e48:	2100      	movs	r1, #0
    8e4a:	0018      	movs	r0, r3
    8e4c:	4b08      	ldr	r3, [pc, #32]	; (8e70 <hif_init+0x34>)
    8e4e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    8e50:	4b08      	ldr	r3, [pc, #32]	; (8e74 <hif_init+0x38>)
    8e52:	0018      	movs	r0, r3
    8e54:	4b08      	ldr	r3, [pc, #32]	; (8e78 <hif_init+0x3c>)
    8e56:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    8e58:	4b08      	ldr	r3, [pc, #32]	; (8e7c <hif_init+0x40>)
    8e5a:	0019      	movs	r1, r3
    8e5c:	2003      	movs	r0, #3
    8e5e:	4b08      	ldr	r3, [pc, #32]	; (8e80 <hif_init+0x44>)
    8e60:	4798      	blx	r3
	return M2M_SUCCESS;
    8e62:	2300      	movs	r3, #0
}
    8e64:	0018      	movs	r0, r3
    8e66:	46bd      	mov	sp, r7
    8e68:	b002      	add	sp, #8
    8e6a:	bd80      	pop	{r7, pc}
    8e6c:	200002e0 	.word	0x200002e0
    8e70:	00008c25 	.word	0x00008c25
    8e74:	00008ca1 	.word	0x00008ca1
    8e78:	0000835d 	.word	0x0000835d
    8e7c:	00008d31 	.word	0x00008d31
    8e80:	000098f9 	.word	0x000098f9

00008e84 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    8e84:	b590      	push	{r4, r7, lr}
    8e86:	b089      	sub	sp, #36	; 0x24
    8e88:	af00      	add	r7, sp, #0
    8e8a:	0004      	movs	r4, r0
    8e8c:	0008      	movs	r0, r1
    8e8e:	603a      	str	r2, [r7, #0]
    8e90:	0019      	movs	r1, r3
    8e92:	1dfb      	adds	r3, r7, #7
    8e94:	1c22      	adds	r2, r4, #0
    8e96:	701a      	strb	r2, [r3, #0]
    8e98:	1dbb      	adds	r3, r7, #6
    8e9a:	1c02      	adds	r2, r0, #0
    8e9c:	701a      	strb	r2, [r3, #0]
    8e9e:	1d3b      	adds	r3, r7, #4
    8ea0:	1c0a      	adds	r2, r1, #0
    8ea2:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    8ea4:	231f      	movs	r3, #31
    8ea6:	18fb      	adds	r3, r7, r3
    8ea8:	22ff      	movs	r2, #255	; 0xff
    8eaa:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    8eac:	1dbb      	adds	r3, r7, #6
    8eae:	781b      	ldrb	r3, [r3, #0]
    8eb0:	227f      	movs	r2, #127	; 0x7f
    8eb2:	4013      	ands	r3, r2
    8eb4:	b2da      	uxtb	r2, r3
    8eb6:	2318      	movs	r3, #24
    8eb8:	18fb      	adds	r3, r7, r3
    8eba:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    8ebc:	2318      	movs	r3, #24
    8ebe:	18fb      	adds	r3, r7, r3
    8ec0:	1dfa      	adds	r2, r7, #7
    8ec2:	7812      	ldrb	r2, [r2, #0]
    8ec4:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    8ec6:	2318      	movs	r3, #24
    8ec8:	18fb      	adds	r3, r7, r3
    8eca:	2208      	movs	r2, #8
    8ecc:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    8ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	d011      	beq.n	8ef8 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    8ed4:	2318      	movs	r3, #24
    8ed6:	18fb      	adds	r3, r7, r3
    8ed8:	885b      	ldrh	r3, [r3, #2]
    8eda:	b29a      	uxth	r2, r3
    8edc:	2338      	movs	r3, #56	; 0x38
    8ede:	18f9      	adds	r1, r7, r3
    8ee0:	2334      	movs	r3, #52	; 0x34
    8ee2:	18fb      	adds	r3, r7, r3
    8ee4:	8809      	ldrh	r1, [r1, #0]
    8ee6:	881b      	ldrh	r3, [r3, #0]
    8ee8:	18cb      	adds	r3, r1, r3
    8eea:	b29b      	uxth	r3, r3
    8eec:	18d3      	adds	r3, r2, r3
    8eee:	b29a      	uxth	r2, r3
    8ef0:	2318      	movs	r3, #24
    8ef2:	18fb      	adds	r3, r7, r3
    8ef4:	805a      	strh	r2, [r3, #2]
    8ef6:	e00a      	b.n	8f0e <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    8ef8:	2318      	movs	r3, #24
    8efa:	18fb      	adds	r3, r7, r3
    8efc:	885b      	ldrh	r3, [r3, #2]
    8efe:	b29a      	uxth	r2, r3
    8f00:	1d3b      	adds	r3, r7, #4
    8f02:	881b      	ldrh	r3, [r3, #0]
    8f04:	18d3      	adds	r3, r2, r3
    8f06:	b29a      	uxth	r2, r3
    8f08:	2318      	movs	r3, #24
    8f0a:	18fb      	adds	r3, r7, r3
    8f0c:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    8f0e:	231f      	movs	r3, #31
    8f10:	18fc      	adds	r4, r7, r3
    8f12:	4bb0      	ldr	r3, [pc, #704]	; (91d4 <hif_send+0x350>)
    8f14:	4798      	blx	r3
    8f16:	0003      	movs	r3, r0
    8f18:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    8f1a:	231f      	movs	r3, #31
    8f1c:	18fb      	adds	r3, r7, r3
    8f1e:	781b      	ldrb	r3, [r3, #0]
    8f20:	b25b      	sxtb	r3, r3
    8f22:	2b00      	cmp	r3, #0
    8f24:	d000      	beq.n	8f28 <hif_send+0xa4>
    8f26:	e127      	b.n	9178 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
    8f28:	2300      	movs	r3, #0
    8f2a:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    8f2c:	230e      	movs	r3, #14
    8f2e:	18fb      	adds	r3, r7, r3
    8f30:	2200      	movs	r2, #0
    8f32:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    8f34:	2300      	movs	r3, #0
    8f36:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    8f38:	1dfb      	adds	r3, r7, #7
    8f3a:	781a      	ldrb	r2, [r3, #0]
    8f3c:	697b      	ldr	r3, [r7, #20]
    8f3e:	4313      	orrs	r3, r2
    8f40:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    8f42:	1dbb      	adds	r3, r7, #6
    8f44:	781b      	ldrb	r3, [r3, #0]
    8f46:	021a      	lsls	r2, r3, #8
    8f48:	697b      	ldr	r3, [r7, #20]
    8f4a:	4313      	orrs	r3, r2
    8f4c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    8f4e:	2318      	movs	r3, #24
    8f50:	18fb      	adds	r3, r7, r3
    8f52:	885b      	ldrh	r3, [r3, #2]
    8f54:	b29b      	uxth	r3, r3
    8f56:	041a      	lsls	r2, r3, #16
    8f58:	697b      	ldr	r3, [r7, #20]
    8f5a:	4313      	orrs	r3, r2
    8f5c:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    8f5e:	697b      	ldr	r3, [r7, #20]
    8f60:	221f      	movs	r2, #31
    8f62:	18bc      	adds	r4, r7, r2
    8f64:	4a9c      	ldr	r2, [pc, #624]	; (91d8 <hif_send+0x354>)
    8f66:	0019      	movs	r1, r3
    8f68:	0010      	movs	r0, r2
    8f6a:	4b9c      	ldr	r3, [pc, #624]	; (91dc <hif_send+0x358>)
    8f6c:	4798      	blx	r3
    8f6e:	0003      	movs	r3, r0
    8f70:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    8f72:	231f      	movs	r3, #31
    8f74:	18fb      	adds	r3, r7, r3
    8f76:	781b      	ldrb	r3, [r3, #0]
    8f78:	b25b      	sxtb	r3, r3
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	d000      	beq.n	8f80 <hif_send+0xfc>
    8f7e:	e115      	b.n	91ac <hif_send+0x328>

		reg = 0UL;
    8f80:	2300      	movs	r3, #0
    8f82:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    8f84:	697b      	ldr	r3, [r7, #20]
    8f86:	2202      	movs	r2, #2
    8f88:	4313      	orrs	r3, r2
    8f8a:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    8f8c:	697b      	ldr	r3, [r7, #20]
    8f8e:	221f      	movs	r2, #31
    8f90:	18bc      	adds	r4, r7, r2
    8f92:	4a93      	ldr	r2, [pc, #588]	; (91e0 <hif_send+0x35c>)
    8f94:	0019      	movs	r1, r3
    8f96:	0010      	movs	r0, r2
    8f98:	4b90      	ldr	r3, [pc, #576]	; (91dc <hif_send+0x358>)
    8f9a:	4798      	blx	r3
    8f9c:	0003      	movs	r3, r0
    8f9e:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    8fa0:	231f      	movs	r3, #31
    8fa2:	18fb      	adds	r3, r7, r3
    8fa4:	781b      	ldrb	r3, [r3, #0]
    8fa6:	b25b      	sxtb	r3, r3
    8fa8:	2b00      	cmp	r3, #0
    8faa:	d000      	beq.n	8fae <hif_send+0x12a>
    8fac:	e100      	b.n	91b0 <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    8fae:	2300      	movs	r3, #0
    8fb0:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    8fb2:	230e      	movs	r3, #14
    8fb4:	18fb      	adds	r3, r7, r3
    8fb6:	2200      	movs	r2, #0
    8fb8:	801a      	strh	r2, [r3, #0]
    8fba:	e04f      	b.n	905c <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    8fbc:	231f      	movs	r3, #31
    8fbe:	18fc      	adds	r4, r7, r3
    8fc0:	2314      	movs	r3, #20
    8fc2:	18fb      	adds	r3, r7, r3
    8fc4:	4a86      	ldr	r2, [pc, #536]	; (91e0 <hif_send+0x35c>)
    8fc6:	0019      	movs	r1, r3
    8fc8:	0010      	movs	r0, r2
    8fca:	4b86      	ldr	r3, [pc, #536]	; (91e4 <hif_send+0x360>)
    8fcc:	4798      	blx	r3
    8fce:	0003      	movs	r3, r0
    8fd0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    8fd2:	231f      	movs	r3, #31
    8fd4:	18fb      	adds	r3, r7, r3
    8fd6:	781b      	ldrb	r3, [r3, #0]
    8fd8:	b25b      	sxtb	r3, r3
    8fda:	2b00      	cmp	r3, #0
    8fdc:	d146      	bne.n	906c <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    8fde:	230e      	movs	r3, #14
    8fe0:	18fb      	adds	r3, r7, r3
    8fe2:	881b      	ldrh	r3, [r3, #0]
    8fe4:	b29a      	uxth	r2, r3
    8fe6:	23f4      	movs	r3, #244	; 0xf4
    8fe8:	33ff      	adds	r3, #255	; 0xff
    8fea:	429a      	cmp	r2, r3
    8fec:	d915      	bls.n	901a <hif_send+0x196>
				if(cnt < 501) {
    8fee:	230e      	movs	r3, #14
    8ff0:	18fb      	adds	r3, r7, r3
    8ff2:	881b      	ldrh	r3, [r3, #0]
    8ff4:	b29a      	uxth	r2, r3
    8ff6:	23fa      	movs	r3, #250	; 0xfa
    8ff8:	005b      	lsls	r3, r3, #1
    8ffa:	429a      	cmp	r2, r3
    8ffc:	d80a      	bhi.n	9014 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
    8ffe:	4b7a      	ldr	r3, [pc, #488]	; (91e8 <hif_send+0x364>)
    9000:	0018      	movs	r0, r3
    9002:	4b7a      	ldr	r3, [pc, #488]	; (91ec <hif_send+0x368>)
    9004:	4798      	blx	r3
    9006:	4b7a      	ldr	r3, [pc, #488]	; (91f0 <hif_send+0x36c>)
    9008:	0018      	movs	r0, r3
    900a:	4b7a      	ldr	r3, [pc, #488]	; (91f4 <hif_send+0x370>)
    900c:	4798      	blx	r3
    900e:	200d      	movs	r0, #13
    9010:	4b79      	ldr	r3, [pc, #484]	; (91f8 <hif_send+0x374>)
    9012:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    9014:	2001      	movs	r0, #1
    9016:	4b79      	ldr	r3, [pc, #484]	; (91fc <hif_send+0x378>)
    9018:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    901a:	697b      	ldr	r3, [r7, #20]
    901c:	2202      	movs	r2, #2
    901e:	4013      	ands	r3, r2
    9020:	d113      	bne.n	904a <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    9022:	231f      	movs	r3, #31
    9024:	18fc      	adds	r4, r7, r3
    9026:	2310      	movs	r3, #16
    9028:	18fb      	adds	r3, r7, r3
    902a:	4a75      	ldr	r2, [pc, #468]	; (9200 <hif_send+0x37c>)
    902c:	0019      	movs	r1, r3
    902e:	0010      	movs	r0, r2
    9030:	4b6c      	ldr	r3, [pc, #432]	; (91e4 <hif_send+0x360>)
    9032:	4798      	blx	r3
    9034:	0003      	movs	r3, r0
    9036:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    9038:	231f      	movs	r3, #31
    903a:	18fb      	adds	r3, r7, r3
    903c:	781b      	ldrb	r3, [r3, #0]
    903e:	b25b      	sxtb	r3, r3
    9040:	2b00      	cmp	r3, #0
    9042:	d015      	beq.n	9070 <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    9044:	2300      	movs	r3, #0
    9046:	613b      	str	r3, [r7, #16]
					goto ERR1;
    9048:	e0b9      	b.n	91be <hif_send+0x33a>
		for(cnt = 0; cnt < 1000; cnt ++)
    904a:	230e      	movs	r3, #14
    904c:	18fb      	adds	r3, r7, r3
    904e:	881b      	ldrh	r3, [r3, #0]
    9050:	b29b      	uxth	r3, r3
    9052:	3301      	adds	r3, #1
    9054:	b29a      	uxth	r2, r3
    9056:	230e      	movs	r3, #14
    9058:	18fb      	adds	r3, r7, r3
    905a:	801a      	strh	r2, [r3, #0]
    905c:	230e      	movs	r3, #14
    905e:	18fb      	adds	r3, r7, r3
    9060:	881b      	ldrh	r3, [r3, #0]
    9062:	b29b      	uxth	r3, r3
    9064:	4a67      	ldr	r2, [pc, #412]	; (9204 <hif_send+0x380>)
    9066:	4293      	cmp	r3, r2
    9068:	d9a8      	bls.n	8fbc <hif_send+0x138>
    906a:	e002      	b.n	9072 <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
    906c:	46c0      	nop			; (mov r8, r8)
    906e:	e000      	b.n	9072 <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
    9070:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    9072:	693b      	ldr	r3, [r7, #16]
    9074:	2b00      	cmp	r3, #0
    9076:	d100      	bne.n	907a <hif_send+0x1f6>
    9078:	e073      	b.n	9162 <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    907a:	693b      	ldr	r3, [r7, #16]
    907c:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    907e:	2318      	movs	r3, #24
    9080:	18fb      	adds	r3, r7, r3
    9082:	885b      	ldrh	r3, [r3, #2]
    9084:	b29a      	uxth	r2, r3
    9086:	2318      	movs	r3, #24
    9088:	18fb      	adds	r3, r7, r3
    908a:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    908c:	68bb      	ldr	r3, [r7, #8]
    908e:	221f      	movs	r2, #31
    9090:	18bc      	adds	r4, r7, r2
    9092:	2218      	movs	r2, #24
    9094:	18b9      	adds	r1, r7, r2
    9096:	2208      	movs	r2, #8
    9098:	0018      	movs	r0, r3
    909a:	4b5b      	ldr	r3, [pc, #364]	; (9208 <hif_send+0x384>)
    909c:	4798      	blx	r3
    909e:	0003      	movs	r3, r0
    90a0:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    90a2:	231f      	movs	r3, #31
    90a4:	18fb      	adds	r3, r7, r3
    90a6:	781b      	ldrb	r3, [r3, #0]
    90a8:	b25b      	sxtb	r3, r3
    90aa:	2b00      	cmp	r3, #0
    90ac:	d000      	beq.n	90b0 <hif_send+0x22c>
    90ae:	e081      	b.n	91b4 <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    90b0:	68bb      	ldr	r3, [r7, #8]
    90b2:	3308      	adds	r3, #8
    90b4:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    90b6:	683b      	ldr	r3, [r7, #0]
    90b8:	2b00      	cmp	r3, #0
    90ba:	d015      	beq.n	90e8 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    90bc:	68b8      	ldr	r0, [r7, #8]
    90be:	1d3b      	adds	r3, r7, #4
    90c0:	881a      	ldrh	r2, [r3, #0]
    90c2:	231f      	movs	r3, #31
    90c4:	18fc      	adds	r4, r7, r3
    90c6:	683b      	ldr	r3, [r7, #0]
    90c8:	0019      	movs	r1, r3
    90ca:	4b4f      	ldr	r3, [pc, #316]	; (9208 <hif_send+0x384>)
    90cc:	4798      	blx	r3
    90ce:	0003      	movs	r3, r0
    90d0:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    90d2:	231f      	movs	r3, #31
    90d4:	18fb      	adds	r3, r7, r3
    90d6:	781b      	ldrb	r3, [r3, #0]
    90d8:	b25b      	sxtb	r3, r3
    90da:	2b00      	cmp	r3, #0
    90dc:	d16c      	bne.n	91b8 <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    90de:	1d3b      	adds	r3, r7, #4
    90e0:	881a      	ldrh	r2, [r3, #0]
    90e2:	68bb      	ldr	r3, [r7, #8]
    90e4:	18d3      	adds	r3, r2, r3
    90e6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    90e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    90ea:	2b00      	cmp	r3, #0
    90ec:	d021      	beq.n	9132 <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    90ee:	2338      	movs	r3, #56	; 0x38
    90f0:	18fb      	adds	r3, r7, r3
    90f2:	881a      	ldrh	r2, [r3, #0]
    90f4:	1d3b      	adds	r3, r7, #4
    90f6:	881b      	ldrh	r3, [r3, #0]
    90f8:	1ad3      	subs	r3, r2, r3
    90fa:	001a      	movs	r2, r3
    90fc:	68bb      	ldr	r3, [r7, #8]
    90fe:	18d3      	adds	r3, r2, r3
    9100:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    9102:	68b8      	ldr	r0, [r7, #8]
    9104:	2334      	movs	r3, #52	; 0x34
    9106:	18fb      	adds	r3, r7, r3
    9108:	881a      	ldrh	r2, [r3, #0]
    910a:	231f      	movs	r3, #31
    910c:	18fc      	adds	r4, r7, r3
    910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9110:	0019      	movs	r1, r3
    9112:	4b3d      	ldr	r3, [pc, #244]	; (9208 <hif_send+0x384>)
    9114:	4798      	blx	r3
    9116:	0003      	movs	r3, r0
    9118:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    911a:	231f      	movs	r3, #31
    911c:	18fb      	adds	r3, r7, r3
    911e:	781b      	ldrb	r3, [r3, #0]
    9120:	b25b      	sxtb	r3, r3
    9122:	2b00      	cmp	r3, #0
    9124:	d14a      	bne.n	91bc <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    9126:	2334      	movs	r3, #52	; 0x34
    9128:	18fb      	adds	r3, r7, r3
    912a:	881a      	ldrh	r2, [r3, #0]
    912c:	68bb      	ldr	r3, [r7, #8]
    912e:	18d3      	adds	r3, r2, r3
    9130:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    9132:	693b      	ldr	r3, [r7, #16]
    9134:	009b      	lsls	r3, r3, #2
    9136:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    9138:	697b      	ldr	r3, [r7, #20]
    913a:	2202      	movs	r2, #2
    913c:	4313      	orrs	r3, r2
    913e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    9140:	697b      	ldr	r3, [r7, #20]
    9142:	221f      	movs	r2, #31
    9144:	18bc      	adds	r4, r7, r2
    9146:	4a31      	ldr	r2, [pc, #196]	; (920c <hif_send+0x388>)
    9148:	0019      	movs	r1, r3
    914a:	0010      	movs	r0, r2
    914c:	4b23      	ldr	r3, [pc, #140]	; (91dc <hif_send+0x358>)
    914e:	4798      	blx	r3
    9150:	0003      	movs	r3, r0
    9152:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    9154:	231f      	movs	r3, #31
    9156:	18fb      	adds	r3, r7, r3
    9158:	781b      	ldrb	r3, [r3, #0]
    915a:	b25b      	sxtb	r3, r3
    915c:	2b00      	cmp	r3, #0
    915e:	d01a      	beq.n	9196 <hif_send+0x312>
    9160:	e02d      	b.n	91be <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    9162:	231f      	movs	r3, #31
    9164:	18fc      	adds	r4, r7, r3
    9166:	4b2a      	ldr	r3, [pc, #168]	; (9210 <hif_send+0x38c>)
    9168:	4798      	blx	r3
    916a:	0003      	movs	r3, r0
    916c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    916e:	231f      	movs	r3, #31
    9170:	18fb      	adds	r3, r7, r3
    9172:	22fd      	movs	r2, #253	; 0xfd
    9174:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    9176:	e024      	b.n	91c2 <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    9178:	23cb      	movs	r3, #203	; 0xcb
    917a:	005a      	lsls	r2, r3, #1
    917c:	4925      	ldr	r1, [pc, #148]	; (9214 <hif_send+0x390>)
    917e:	4b26      	ldr	r3, [pc, #152]	; (9218 <hif_send+0x394>)
    9180:	0018      	movs	r0, r3
    9182:	4b1a      	ldr	r3, [pc, #104]	; (91ec <hif_send+0x368>)
    9184:	4798      	blx	r3
    9186:	4b25      	ldr	r3, [pc, #148]	; (921c <hif_send+0x398>)
    9188:	0018      	movs	r0, r3
    918a:	4b1a      	ldr	r3, [pc, #104]	; (91f4 <hif_send+0x370>)
    918c:	4798      	blx	r3
    918e:	200d      	movs	r0, #13
    9190:	4b19      	ldr	r3, [pc, #100]	; (91f8 <hif_send+0x374>)
    9192:	4798      	blx	r3
		goto ERR2;
    9194:	e015      	b.n	91c2 <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    9196:	231f      	movs	r3, #31
    9198:	18fc      	adds	r4, r7, r3
    919a:	4b1d      	ldr	r3, [pc, #116]	; (9210 <hif_send+0x38c>)
    919c:	4798      	blx	r3
    919e:	0003      	movs	r3, r0
    91a0:	7023      	strb	r3, [r4, #0]
	return ret;
    91a2:	231f      	movs	r3, #31
    91a4:	18fb      	adds	r3, r7, r3
    91a6:	781b      	ldrb	r3, [r3, #0]
    91a8:	b25b      	sxtb	r3, r3
    91aa:	e00e      	b.n	91ca <hif_send+0x346>
		if(M2M_SUCCESS != ret) goto ERR1;
    91ac:	46c0      	nop			; (mov r8, r8)
    91ae:	e006      	b.n	91be <hif_send+0x33a>
		if(M2M_SUCCESS != ret) goto ERR1;
    91b0:	46c0      	nop			; (mov r8, r8)
    91b2:	e004      	b.n	91be <hif_send+0x33a>
			if(M2M_SUCCESS != ret) goto ERR1;
    91b4:	46c0      	nop			; (mov r8, r8)
    91b6:	e002      	b.n	91be <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    91b8:	46c0      	nop			; (mov r8, r8)
    91ba:	e000      	b.n	91be <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    91bc:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    91be:	4b18      	ldr	r3, [pc, #96]	; (9220 <hif_send+0x39c>)
    91c0:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    91c2:	231f      	movs	r3, #31
    91c4:	18fb      	adds	r3, r7, r3
    91c6:	781b      	ldrb	r3, [r3, #0]
    91c8:	b25b      	sxtb	r3, r3
}
    91ca:	0018      	movs	r0, r3
    91cc:	46bd      	mov	sp, r7
    91ce:	b009      	add	sp, #36	; 0x24
    91d0:	bd90      	pop	{r4, r7, pc}
    91d2:	46c0      	nop			; (mov r8, r8)
    91d4:	00008d4d 	.word	0x00008d4d
    91d8:	0000108c 	.word	0x0000108c
    91dc:	0000acb1 	.word	0x0000acb1
    91e0:	00001078 	.word	0x00001078
    91e4:	0000ac8d 	.word	0x0000ac8d
    91e8:	0001831c 	.word	0x0001831c
    91ec:	00016d69 	.word	0x00016d69
    91f0:	00018328 	.word	0x00018328
    91f4:	00016e85 	.word	0x00016e85
    91f8:	00016d9d 	.word	0x00016d9d
    91fc:	00008335 	.word	0x00008335
    9200:	00150400 	.word	0x00150400
    9204:	000003e7 	.word	0x000003e7
    9208:	0000adf9 	.word	0x0000adf9
    920c:	0000106c 	.word	0x0000106c
    9210:	00008de5 	.word	0x00008de5
    9214:	00018630 	.word	0x00018630
    9218:	00018338 	.word	0x00018338
    921c:	0001834c 	.word	0x0001834c
    9220:	00008dbd 	.word	0x00008dbd

00009224 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    9224:	b590      	push	{r4, r7, lr}
    9226:	b087      	sub	sp, #28
    9228:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    922a:	230f      	movs	r3, #15
    922c:	18fb      	adds	r3, r7, r3
    922e:	2200      	movs	r2, #0
    9230:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    9232:	230f      	movs	r3, #15
    9234:	18fc      	adds	r4, r7, r3
    9236:	2308      	movs	r3, #8
    9238:	18fb      	adds	r3, r7, r3
    923a:	4ad6      	ldr	r2, [pc, #856]	; (9594 <hif_isr+0x370>)
    923c:	0019      	movs	r1, r3
    923e:	0010      	movs	r0, r2
    9240:	4bd5      	ldr	r3, [pc, #852]	; (9598 <hif_isr+0x374>)
    9242:	4798      	blx	r3
    9244:	0003      	movs	r3, r0
    9246:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    9248:	230f      	movs	r3, #15
    924a:	18fb      	adds	r3, r7, r3
    924c:	781b      	ldrb	r3, [r3, #0]
    924e:	b25b      	sxtb	r3, r3
    9250:	2b00      	cmp	r3, #0
    9252:	d000      	beq.n	9256 <hif_isr+0x32>
    9254:	e217      	b.n	9686 <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    9256:	68bb      	ldr	r3, [r7, #8]
    9258:	2201      	movs	r2, #1
    925a:	4013      	ands	r3, r2
    925c:	d100      	bne.n	9260 <hif_isr+0x3c>
    925e:	e1fd      	b.n	965c <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    9260:	2000      	movs	r0, #0
    9262:	4bce      	ldr	r3, [pc, #824]	; (959c <hif_isr+0x378>)
    9264:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    9266:	68bb      	ldr	r3, [r7, #8]
    9268:	2201      	movs	r2, #1
    926a:	4393      	bics	r3, r2
    926c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    926e:	68bb      	ldr	r3, [r7, #8]
    9270:	220f      	movs	r2, #15
    9272:	18bc      	adds	r4, r7, r2
    9274:	4ac7      	ldr	r2, [pc, #796]	; (9594 <hif_isr+0x370>)
    9276:	0019      	movs	r1, r3
    9278:	0010      	movs	r0, r2
    927a:	4bc9      	ldr	r3, [pc, #804]	; (95a0 <hif_isr+0x37c>)
    927c:	4798      	blx	r3
    927e:	0003      	movs	r3, r0
    9280:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    9282:	230f      	movs	r3, #15
    9284:	18fb      	adds	r3, r7, r3
    9286:	781b      	ldrb	r3, [r3, #0]
    9288:	b25b      	sxtb	r3, r3
    928a:	2b00      	cmp	r3, #0
    928c:	d000      	beq.n	9290 <hif_isr+0x6c>
    928e:	e208      	b.n	96a2 <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    9290:	4bc4      	ldr	r3, [pc, #784]	; (95a4 <hif_isr+0x380>)
    9292:	2201      	movs	r2, #1
    9294:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    9296:	68bb      	ldr	r3, [r7, #8]
    9298:	089b      	lsrs	r3, r3, #2
    929a:	b29a      	uxth	r2, r3
    929c:	230c      	movs	r3, #12
    929e:	18fb      	adds	r3, r7, r3
    92a0:	0512      	lsls	r2, r2, #20
    92a2:	0d12      	lsrs	r2, r2, #20
    92a4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    92a6:	230c      	movs	r3, #12
    92a8:	18fb      	adds	r3, r7, r3
    92aa:	881b      	ldrh	r3, [r3, #0]
    92ac:	2b00      	cmp	r3, #0
    92ae:	d100      	bne.n	92b2 <hif_isr+0x8e>
    92b0:	e1c1      	b.n	9636 <hif_isr+0x412>
				uint32 address = 0;
    92b2:	2300      	movs	r3, #0
    92b4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    92b6:	230f      	movs	r3, #15
    92b8:	18fc      	adds	r4, r7, r3
    92ba:	003b      	movs	r3, r7
    92bc:	4aba      	ldr	r2, [pc, #744]	; (95a8 <hif_isr+0x384>)
    92be:	0019      	movs	r1, r3
    92c0:	0010      	movs	r0, r2
    92c2:	4bb5      	ldr	r3, [pc, #724]	; (9598 <hif_isr+0x374>)
    92c4:	4798      	blx	r3
    92c6:	0003      	movs	r3, r0
    92c8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    92ca:	230f      	movs	r3, #15
    92cc:	18fb      	adds	r3, r7, r3
    92ce:	781b      	ldrb	r3, [r3, #0]
    92d0:	b25b      	sxtb	r3, r3
    92d2:	2b00      	cmp	r3, #0
    92d4:	d012      	beq.n	92fc <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    92d6:	23c8      	movs	r3, #200	; 0xc8
    92d8:	33ff      	adds	r3, #255	; 0xff
    92da:	001a      	movs	r2, r3
    92dc:	49b3      	ldr	r1, [pc, #716]	; (95ac <hif_isr+0x388>)
    92de:	4bb4      	ldr	r3, [pc, #720]	; (95b0 <hif_isr+0x38c>)
    92e0:	0018      	movs	r0, r3
    92e2:	4bb4      	ldr	r3, [pc, #720]	; (95b4 <hif_isr+0x390>)
    92e4:	4798      	blx	r3
    92e6:	4bb4      	ldr	r3, [pc, #720]	; (95b8 <hif_isr+0x394>)
    92e8:	0018      	movs	r0, r3
    92ea:	4bb4      	ldr	r3, [pc, #720]	; (95bc <hif_isr+0x398>)
    92ec:	4798      	blx	r3
    92ee:	200d      	movs	r0, #13
    92f0:	4bb3      	ldr	r3, [pc, #716]	; (95c0 <hif_isr+0x39c>)
    92f2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    92f4:	2001      	movs	r0, #1
    92f6:	4ba9      	ldr	r3, [pc, #676]	; (959c <hif_isr+0x378>)
    92f8:	4798      	blx	r3
					goto ERR1;
    92fa:	e1d3      	b.n	96a4 <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    92fc:	683a      	ldr	r2, [r7, #0]
    92fe:	4ba9      	ldr	r3, [pc, #676]	; (95a4 <hif_isr+0x380>)
    9300:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    9302:	230c      	movs	r3, #12
    9304:	18fb      	adds	r3, r7, r3
    9306:	881a      	ldrh	r2, [r3, #0]
    9308:	4ba6      	ldr	r3, [pc, #664]	; (95a4 <hif_isr+0x380>)
    930a:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    930c:	683b      	ldr	r3, [r7, #0]
    930e:	220f      	movs	r2, #15
    9310:	18bc      	adds	r4, r7, r2
    9312:	1d39      	adds	r1, r7, #4
    9314:	2204      	movs	r2, #4
    9316:	0018      	movs	r0, r3
    9318:	4baa      	ldr	r3, [pc, #680]	; (95c4 <hif_isr+0x3a0>)
    931a:	4798      	blx	r3
    931c:	0003      	movs	r3, r0
    931e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    9320:	1d3b      	adds	r3, r7, #4
    9322:	885b      	ldrh	r3, [r3, #2]
    9324:	b29a      	uxth	r2, r3
    9326:	1d3b      	adds	r3, r7, #4
    9328:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    932a:	230f      	movs	r3, #15
    932c:	18fb      	adds	r3, r7, r3
    932e:	781b      	ldrb	r3, [r3, #0]
    9330:	b25b      	sxtb	r3, r3
    9332:	2b00      	cmp	r3, #0
    9334:	d012      	beq.n	935c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    9336:	23d2      	movs	r3, #210	; 0xd2
    9338:	33ff      	adds	r3, #255	; 0xff
    933a:	001a      	movs	r2, r3
    933c:	499b      	ldr	r1, [pc, #620]	; (95ac <hif_isr+0x388>)
    933e:	4b9c      	ldr	r3, [pc, #624]	; (95b0 <hif_isr+0x38c>)
    9340:	0018      	movs	r0, r3
    9342:	4b9c      	ldr	r3, [pc, #624]	; (95b4 <hif_isr+0x390>)
    9344:	4798      	blx	r3
    9346:	4ba0      	ldr	r3, [pc, #640]	; (95c8 <hif_isr+0x3a4>)
    9348:	0018      	movs	r0, r3
    934a:	4b9c      	ldr	r3, [pc, #624]	; (95bc <hif_isr+0x398>)
    934c:	4798      	blx	r3
    934e:	200d      	movs	r0, #13
    9350:	4b9b      	ldr	r3, [pc, #620]	; (95c0 <hif_isr+0x39c>)
    9352:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    9354:	2001      	movs	r0, #1
    9356:	4b91      	ldr	r3, [pc, #580]	; (959c <hif_isr+0x378>)
    9358:	4798      	blx	r3
					goto ERR1;
    935a:	e1a3      	b.n	96a4 <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    935c:	1d3b      	adds	r3, r7, #4
    935e:	885b      	ldrh	r3, [r3, #2]
    9360:	b29b      	uxth	r3, r3
    9362:	220c      	movs	r2, #12
    9364:	18ba      	adds	r2, r7, r2
    9366:	8812      	ldrh	r2, [r2, #0]
    9368:	429a      	cmp	r2, r3
    936a:	d02d      	beq.n	93c8 <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    936c:	230c      	movs	r3, #12
    936e:	18fb      	adds	r3, r7, r3
    9370:	881b      	ldrh	r3, [r3, #0]
    9372:	1d3a      	adds	r2, r7, #4
    9374:	8852      	ldrh	r2, [r2, #2]
    9376:	b292      	uxth	r2, r2
    9378:	1a9b      	subs	r3, r3, r2
    937a:	2b04      	cmp	r3, #4
    937c:	dd24      	ble.n	93c8 <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    937e:	23ed      	movs	r3, #237	; 0xed
    9380:	005a      	lsls	r2, r3, #1
    9382:	498a      	ldr	r1, [pc, #552]	; (95ac <hif_isr+0x388>)
    9384:	4b8a      	ldr	r3, [pc, #552]	; (95b0 <hif_isr+0x38c>)
    9386:	0018      	movs	r0, r3
    9388:	4b8a      	ldr	r3, [pc, #552]	; (95b4 <hif_isr+0x390>)
    938a:	4798      	blx	r3
    938c:	230c      	movs	r3, #12
    938e:	18fb      	adds	r3, r7, r3
    9390:	8819      	ldrh	r1, [r3, #0]
    9392:	1d3b      	adds	r3, r7, #4
    9394:	885b      	ldrh	r3, [r3, #2]
    9396:	b29b      	uxth	r3, r3
    9398:	001a      	movs	r2, r3
    939a:	1d3b      	adds	r3, r7, #4
    939c:	781b      	ldrb	r3, [r3, #0]
    939e:	b2db      	uxtb	r3, r3
    93a0:	001c      	movs	r4, r3
    93a2:	1d3b      	adds	r3, r7, #4
    93a4:	785b      	ldrb	r3, [r3, #1]
    93a6:	b2db      	uxtb	r3, r3
    93a8:	4888      	ldr	r0, [pc, #544]	; (95cc <hif_isr+0x3a8>)
    93aa:	9300      	str	r3, [sp, #0]
    93ac:	0023      	movs	r3, r4
    93ae:	4c81      	ldr	r4, [pc, #516]	; (95b4 <hif_isr+0x390>)
    93b0:	47a0      	blx	r4
    93b2:	200d      	movs	r0, #13
    93b4:	4b82      	ldr	r3, [pc, #520]	; (95c0 <hif_isr+0x39c>)
    93b6:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    93b8:	2001      	movs	r0, #1
    93ba:	4b78      	ldr	r3, [pc, #480]	; (959c <hif_isr+0x378>)
    93bc:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    93be:	230f      	movs	r3, #15
    93c0:	18fb      	adds	r3, r7, r3
    93c2:	22fa      	movs	r2, #250	; 0xfa
    93c4:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    93c6:	e16d      	b.n	96a4 <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    93c8:	1d3b      	adds	r3, r7, #4
    93ca:	781b      	ldrb	r3, [r3, #0]
    93cc:	b2db      	uxtb	r3, r3
    93ce:	2b01      	cmp	r3, #1
    93d0:	d120      	bne.n	9414 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    93d2:	4b74      	ldr	r3, [pc, #464]	; (95a4 <hif_isr+0x380>)
    93d4:	68db      	ldr	r3, [r3, #12]
    93d6:	2b00      	cmp	r3, #0
    93d8:	d00d      	beq.n	93f6 <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    93da:	4b72      	ldr	r3, [pc, #456]	; (95a4 <hif_isr+0x380>)
    93dc:	68db      	ldr	r3, [r3, #12]
    93de:	1d3a      	adds	r2, r7, #4
    93e0:	7852      	ldrb	r2, [r2, #1]
    93e2:	b2d0      	uxtb	r0, r2
    93e4:	1d3a      	adds	r2, r7, #4
    93e6:	8852      	ldrh	r2, [r2, #2]
    93e8:	b292      	uxth	r2, r2
    93ea:	3a08      	subs	r2, #8
    93ec:	b291      	uxth	r1, r2
    93ee:	683a      	ldr	r2, [r7, #0]
    93f0:	3208      	adds	r2, #8
    93f2:	4798      	blx	r3
    93f4:	e0fe      	b.n	95f4 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    93f6:	23f3      	movs	r3, #243	; 0xf3
    93f8:	005a      	lsls	r2, r3, #1
    93fa:	496c      	ldr	r1, [pc, #432]	; (95ac <hif_isr+0x388>)
    93fc:	4b6c      	ldr	r3, [pc, #432]	; (95b0 <hif_isr+0x38c>)
    93fe:	0018      	movs	r0, r3
    9400:	4b6c      	ldr	r3, [pc, #432]	; (95b4 <hif_isr+0x390>)
    9402:	4798      	blx	r3
    9404:	4b72      	ldr	r3, [pc, #456]	; (95d0 <hif_isr+0x3ac>)
    9406:	0018      	movs	r0, r3
    9408:	4b6c      	ldr	r3, [pc, #432]	; (95bc <hif_isr+0x398>)
    940a:	4798      	blx	r3
    940c:	200d      	movs	r0, #13
    940e:	4b6c      	ldr	r3, [pc, #432]	; (95c0 <hif_isr+0x39c>)
    9410:	4798      	blx	r3
    9412:	e0ef      	b.n	95f4 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    9414:	1d3b      	adds	r3, r7, #4
    9416:	781b      	ldrb	r3, [r3, #0]
    9418:	b2db      	uxtb	r3, r3
    941a:	2b02      	cmp	r3, #2
    941c:	d120      	bne.n	9460 <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    941e:	4b61      	ldr	r3, [pc, #388]	; (95a4 <hif_isr+0x380>)
    9420:	691b      	ldr	r3, [r3, #16]
    9422:	2b00      	cmp	r3, #0
    9424:	d00d      	beq.n	9442 <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9426:	4b5f      	ldr	r3, [pc, #380]	; (95a4 <hif_isr+0x380>)
    9428:	691b      	ldr	r3, [r3, #16]
    942a:	1d3a      	adds	r2, r7, #4
    942c:	7852      	ldrb	r2, [r2, #1]
    942e:	b2d0      	uxtb	r0, r2
    9430:	1d3a      	adds	r2, r7, #4
    9432:	8852      	ldrh	r2, [r2, #2]
    9434:	b292      	uxth	r2, r2
    9436:	3a08      	subs	r2, #8
    9438:	b291      	uxth	r1, r2
    943a:	683a      	ldr	r2, [r7, #0]
    943c:	3208      	adds	r2, #8
    943e:	4798      	blx	r3
    9440:	e0d8      	b.n	95f4 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    9442:	23f7      	movs	r3, #247	; 0xf7
    9444:	005a      	lsls	r2, r3, #1
    9446:	4959      	ldr	r1, [pc, #356]	; (95ac <hif_isr+0x388>)
    9448:	4b59      	ldr	r3, [pc, #356]	; (95b0 <hif_isr+0x38c>)
    944a:	0018      	movs	r0, r3
    944c:	4b59      	ldr	r3, [pc, #356]	; (95b4 <hif_isr+0x390>)
    944e:	4798      	blx	r3
    9450:	4b60      	ldr	r3, [pc, #384]	; (95d4 <hif_isr+0x3b0>)
    9452:	0018      	movs	r0, r3
    9454:	4b59      	ldr	r3, [pc, #356]	; (95bc <hif_isr+0x398>)
    9456:	4798      	blx	r3
    9458:	200d      	movs	r0, #13
    945a:	4b59      	ldr	r3, [pc, #356]	; (95c0 <hif_isr+0x39c>)
    945c:	4798      	blx	r3
    945e:	e0c9      	b.n	95f4 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    9460:	1d3b      	adds	r3, r7, #4
    9462:	781b      	ldrb	r3, [r3, #0]
    9464:	b2db      	uxtb	r3, r3
    9466:	2b04      	cmp	r3, #4
    9468:	d120      	bne.n	94ac <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    946a:	4b4e      	ldr	r3, [pc, #312]	; (95a4 <hif_isr+0x380>)
    946c:	695b      	ldr	r3, [r3, #20]
    946e:	2b00      	cmp	r3, #0
    9470:	d00d      	beq.n	948e <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9472:	4b4c      	ldr	r3, [pc, #304]	; (95a4 <hif_isr+0x380>)
    9474:	695b      	ldr	r3, [r3, #20]
    9476:	1d3a      	adds	r2, r7, #4
    9478:	7852      	ldrb	r2, [r2, #1]
    947a:	b2d0      	uxtb	r0, r2
    947c:	1d3a      	adds	r2, r7, #4
    947e:	8852      	ldrh	r2, [r2, #2]
    9480:	b292      	uxth	r2, r2
    9482:	3a08      	subs	r2, #8
    9484:	b291      	uxth	r1, r2
    9486:	683a      	ldr	r2, [r7, #0]
    9488:	3208      	adds	r2, #8
    948a:	4798      	blx	r3
    948c:	e0b2      	b.n	95f4 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    948e:	23fb      	movs	r3, #251	; 0xfb
    9490:	005a      	lsls	r2, r3, #1
    9492:	4946      	ldr	r1, [pc, #280]	; (95ac <hif_isr+0x388>)
    9494:	4b46      	ldr	r3, [pc, #280]	; (95b0 <hif_isr+0x38c>)
    9496:	0018      	movs	r0, r3
    9498:	4b46      	ldr	r3, [pc, #280]	; (95b4 <hif_isr+0x390>)
    949a:	4798      	blx	r3
    949c:	4b4e      	ldr	r3, [pc, #312]	; (95d8 <hif_isr+0x3b4>)
    949e:	0018      	movs	r0, r3
    94a0:	4b46      	ldr	r3, [pc, #280]	; (95bc <hif_isr+0x398>)
    94a2:	4798      	blx	r3
    94a4:	200d      	movs	r0, #13
    94a6:	4b46      	ldr	r3, [pc, #280]	; (95c0 <hif_isr+0x39c>)
    94a8:	4798      	blx	r3
    94aa:	e0a3      	b.n	95f4 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    94ac:	1d3b      	adds	r3, r7, #4
    94ae:	781b      	ldrb	r3, [r3, #0]
    94b0:	b2db      	uxtb	r3, r3
    94b2:	2b06      	cmp	r3, #6
    94b4:	d11f      	bne.n	94f6 <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    94b6:	4b3b      	ldr	r3, [pc, #236]	; (95a4 <hif_isr+0x380>)
    94b8:	6a1b      	ldr	r3, [r3, #32]
    94ba:	2b00      	cmp	r3, #0
    94bc:	d00d      	beq.n	94da <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    94be:	4b39      	ldr	r3, [pc, #228]	; (95a4 <hif_isr+0x380>)
    94c0:	6a1b      	ldr	r3, [r3, #32]
    94c2:	1d3a      	adds	r2, r7, #4
    94c4:	7852      	ldrb	r2, [r2, #1]
    94c6:	b2d0      	uxtb	r0, r2
    94c8:	1d3a      	adds	r2, r7, #4
    94ca:	8852      	ldrh	r2, [r2, #2]
    94cc:	b292      	uxth	r2, r2
    94ce:	3a08      	subs	r2, #8
    94d0:	b291      	uxth	r1, r2
    94d2:	683a      	ldr	r2, [r7, #0]
    94d4:	3208      	adds	r2, #8
    94d6:	4798      	blx	r3
    94d8:	e08c      	b.n	95f4 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    94da:	4a40      	ldr	r2, [pc, #256]	; (95dc <hif_isr+0x3b8>)
    94dc:	4933      	ldr	r1, [pc, #204]	; (95ac <hif_isr+0x388>)
    94de:	4b34      	ldr	r3, [pc, #208]	; (95b0 <hif_isr+0x38c>)
    94e0:	0018      	movs	r0, r3
    94e2:	4b34      	ldr	r3, [pc, #208]	; (95b4 <hif_isr+0x390>)
    94e4:	4798      	blx	r3
    94e6:	4b3e      	ldr	r3, [pc, #248]	; (95e0 <hif_isr+0x3bc>)
    94e8:	0018      	movs	r0, r3
    94ea:	4b34      	ldr	r3, [pc, #208]	; (95bc <hif_isr+0x398>)
    94ec:	4798      	blx	r3
    94ee:	200d      	movs	r0, #13
    94f0:	4b33      	ldr	r3, [pc, #204]	; (95c0 <hif_isr+0x39c>)
    94f2:	4798      	blx	r3
    94f4:	e07e      	b.n	95f4 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    94f6:	1d3b      	adds	r3, r7, #4
    94f8:	781b      	ldrb	r3, [r3, #0]
    94fa:	b2db      	uxtb	r3, r3
    94fc:	2b07      	cmp	r3, #7
    94fe:	d11f      	bne.n	9540 <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    9500:	4b28      	ldr	r3, [pc, #160]	; (95a4 <hif_isr+0x380>)
    9502:	699b      	ldr	r3, [r3, #24]
    9504:	2b00      	cmp	r3, #0
    9506:	d00d      	beq.n	9524 <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9508:	4b26      	ldr	r3, [pc, #152]	; (95a4 <hif_isr+0x380>)
    950a:	699b      	ldr	r3, [r3, #24]
    950c:	1d3a      	adds	r2, r7, #4
    950e:	7852      	ldrb	r2, [r2, #1]
    9510:	b2d0      	uxtb	r0, r2
    9512:	1d3a      	adds	r2, r7, #4
    9514:	8852      	ldrh	r2, [r2, #2]
    9516:	b292      	uxth	r2, r2
    9518:	3a08      	subs	r2, #8
    951a:	b291      	uxth	r1, r2
    951c:	683a      	ldr	r2, [r7, #0]
    951e:	3208      	adds	r2, #8
    9520:	4798      	blx	r3
    9522:	e067      	b.n	95f4 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    9524:	4a2f      	ldr	r2, [pc, #188]	; (95e4 <hif_isr+0x3c0>)
    9526:	4921      	ldr	r1, [pc, #132]	; (95ac <hif_isr+0x388>)
    9528:	4b21      	ldr	r3, [pc, #132]	; (95b0 <hif_isr+0x38c>)
    952a:	0018      	movs	r0, r3
    952c:	4b21      	ldr	r3, [pc, #132]	; (95b4 <hif_isr+0x390>)
    952e:	4798      	blx	r3
    9530:	4b2d      	ldr	r3, [pc, #180]	; (95e8 <hif_isr+0x3c4>)
    9532:	0018      	movs	r0, r3
    9534:	4b21      	ldr	r3, [pc, #132]	; (95bc <hif_isr+0x398>)
    9536:	4798      	blx	r3
    9538:	200d      	movs	r0, #13
    953a:	4b21      	ldr	r3, [pc, #132]	; (95c0 <hif_isr+0x39c>)
    953c:	4798      	blx	r3
    953e:	e059      	b.n	95f4 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    9540:	1d3b      	adds	r3, r7, #4
    9542:	781b      	ldrb	r3, [r3, #0]
    9544:	b2db      	uxtb	r3, r3
    9546:	2b05      	cmp	r3, #5
    9548:	d111      	bne.n	956e <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    954a:	4b16      	ldr	r3, [pc, #88]	; (95a4 <hif_isr+0x380>)
    954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    954e:	2b00      	cmp	r3, #0
    9550:	d050      	beq.n	95f4 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9552:	4b14      	ldr	r3, [pc, #80]	; (95a4 <hif_isr+0x380>)
    9554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9556:	1d3a      	adds	r2, r7, #4
    9558:	7852      	ldrb	r2, [r2, #1]
    955a:	b2d0      	uxtb	r0, r2
    955c:	1d3a      	adds	r2, r7, #4
    955e:	8852      	ldrh	r2, [r2, #2]
    9560:	b292      	uxth	r2, r2
    9562:	3a08      	subs	r2, #8
    9564:	b291      	uxth	r1, r2
    9566:	683a      	ldr	r2, [r7, #0]
    9568:	3208      	adds	r2, #8
    956a:	4798      	blx	r3
    956c:	e042      	b.n	95f4 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    956e:	4a1f      	ldr	r2, [pc, #124]	; (95ec <hif_isr+0x3c8>)
    9570:	490e      	ldr	r1, [pc, #56]	; (95ac <hif_isr+0x388>)
    9572:	4b0f      	ldr	r3, [pc, #60]	; (95b0 <hif_isr+0x38c>)
    9574:	0018      	movs	r0, r3
    9576:	4b0f      	ldr	r3, [pc, #60]	; (95b4 <hif_isr+0x390>)
    9578:	4798      	blx	r3
    957a:	4b1d      	ldr	r3, [pc, #116]	; (95f0 <hif_isr+0x3cc>)
    957c:	0018      	movs	r0, r3
    957e:	4b0f      	ldr	r3, [pc, #60]	; (95bc <hif_isr+0x398>)
    9580:	4798      	blx	r3
    9582:	200d      	movs	r0, #13
    9584:	4b0e      	ldr	r3, [pc, #56]	; (95c0 <hif_isr+0x39c>)
    9586:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    9588:	230f      	movs	r3, #15
    958a:	18fb      	adds	r3, r7, r3
    958c:	22fa      	movs	r2, #250	; 0xfa
    958e:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    9590:	e088      	b.n	96a4 <hif_isr+0x480>
    9592:	46c0      	nop			; (mov r8, r8)
    9594:	00001070 	.word	0x00001070
    9598:	0000ac8d 	.word	0x0000ac8d
    959c:	000083d5 	.word	0x000083d5
    95a0:	0000acb1 	.word	0x0000acb1
    95a4:	200002e0 	.word	0x200002e0
    95a8:	00001084 	.word	0x00001084
    95ac:	0001863c 	.word	0x0001863c
    95b0:	00018338 	.word	0x00018338
    95b4:	00016d69 	.word	0x00016d69
    95b8:	00018368 	.word	0x00018368
    95bc:	00016e85 	.word	0x00016e85
    95c0:	00016d9d 	.word	0x00016d9d
    95c4:	0000ad01 	.word	0x0000ad01
    95c8:	0001838c 	.word	0x0001838c
    95cc:	000183a4 	.word	0x000183a4
    95d0:	000183e4 	.word	0x000183e4
    95d4:	00018404 	.word	0x00018404
    95d8:	00018428 	.word	0x00018428
    95dc:	000001ff 	.word	0x000001ff
    95e0:	00018448 	.word	0x00018448
    95e4:	00000206 	.word	0x00000206
    95e8:	0001846c 	.word	0x0001846c
    95ec:	0000020f 	.word	0x0000020f
    95f0:	00018490 	.word	0x00018490
				}
				if(gstrHifCxt.u8HifRXDone)
    95f4:	4b2f      	ldr	r3, [pc, #188]	; (96b4 <hif_isr+0x490>)
    95f6:	789b      	ldrb	r3, [r3, #2]
    95f8:	b2db      	uxtb	r3, r3
    95fa:	2b00      	cmp	r3, #0
    95fc:	d052      	beq.n	96a4 <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    95fe:	4a2e      	ldr	r2, [pc, #184]	; (96b8 <hif_isr+0x494>)
    9600:	492e      	ldr	r1, [pc, #184]	; (96bc <hif_isr+0x498>)
    9602:	4b2f      	ldr	r3, [pc, #188]	; (96c0 <hif_isr+0x49c>)
    9604:	0018      	movs	r0, r3
    9606:	4b2f      	ldr	r3, [pc, #188]	; (96c4 <hif_isr+0x4a0>)
    9608:	4798      	blx	r3
    960a:	1d3b      	adds	r3, r7, #4
    960c:	781b      	ldrb	r3, [r3, #0]
    960e:	b2db      	uxtb	r3, r3
    9610:	0019      	movs	r1, r3
    9612:	1d3b      	adds	r3, r7, #4
    9614:	785b      	ldrb	r3, [r3, #1]
    9616:	b2db      	uxtb	r3, r3
    9618:	001a      	movs	r2, r3
    961a:	4b2b      	ldr	r3, [pc, #172]	; (96c8 <hif_isr+0x4a4>)
    961c:	0018      	movs	r0, r3
    961e:	4b29      	ldr	r3, [pc, #164]	; (96c4 <hif_isr+0x4a0>)
    9620:	4798      	blx	r3
    9622:	200d      	movs	r0, #13
    9624:	4b29      	ldr	r3, [pc, #164]	; (96cc <hif_isr+0x4a8>)
    9626:	4798      	blx	r3
					ret = hif_set_rx_done();
    9628:	230f      	movs	r3, #15
    962a:	18fc      	adds	r4, r7, r3
    962c:	4b28      	ldr	r3, [pc, #160]	; (96d0 <hif_isr+0x4ac>)
    962e:	4798      	blx	r3
    9630:	0003      	movs	r3, r0
    9632:	7023      	strb	r3, [r4, #0]
    9634:	e036      	b.n	96a4 <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    9636:	2387      	movs	r3, #135	; 0x87
    9638:	009a      	lsls	r2, r3, #2
    963a:	4920      	ldr	r1, [pc, #128]	; (96bc <hif_isr+0x498>)
    963c:	4b20      	ldr	r3, [pc, #128]	; (96c0 <hif_isr+0x49c>)
    963e:	0018      	movs	r0, r3
    9640:	4b20      	ldr	r3, [pc, #128]	; (96c4 <hif_isr+0x4a0>)
    9642:	4798      	blx	r3
    9644:	4b23      	ldr	r3, [pc, #140]	; (96d4 <hif_isr+0x4b0>)
    9646:	0018      	movs	r0, r3
    9648:	4b23      	ldr	r3, [pc, #140]	; (96d8 <hif_isr+0x4b4>)
    964a:	4798      	blx	r3
    964c:	200d      	movs	r0, #13
    964e:	4b1f      	ldr	r3, [pc, #124]	; (96cc <hif_isr+0x4a8>)
    9650:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    9652:	230f      	movs	r3, #15
    9654:	18fb      	adds	r3, r7, r3
    9656:	22fe      	movs	r2, #254	; 0xfe
    9658:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    965a:	e023      	b.n	96a4 <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    965c:	2389      	movs	r3, #137	; 0x89
    965e:	009a      	lsls	r2, r3, #2
    9660:	4916      	ldr	r1, [pc, #88]	; (96bc <hif_isr+0x498>)
    9662:	4b17      	ldr	r3, [pc, #92]	; (96c0 <hif_isr+0x49c>)
    9664:	0018      	movs	r0, r3
    9666:	4b17      	ldr	r3, [pc, #92]	; (96c4 <hif_isr+0x4a0>)
    9668:	4798      	blx	r3
    966a:	68ba      	ldr	r2, [r7, #8]
    966c:	4b1b      	ldr	r3, [pc, #108]	; (96dc <hif_isr+0x4b8>)
    966e:	0011      	movs	r1, r2
    9670:	0018      	movs	r0, r3
    9672:	4b14      	ldr	r3, [pc, #80]	; (96c4 <hif_isr+0x4a0>)
    9674:	4798      	blx	r3
    9676:	200d      	movs	r0, #13
    9678:	4b14      	ldr	r3, [pc, #80]	; (96cc <hif_isr+0x4a8>)
    967a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    967c:	230f      	movs	r3, #15
    967e:	18fb      	adds	r3, r7, r3
    9680:	22f4      	movs	r2, #244	; 0xf4
    9682:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    9684:	e00e      	b.n	96a4 <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    9686:	4a16      	ldr	r2, [pc, #88]	; (96e0 <hif_isr+0x4bc>)
    9688:	490c      	ldr	r1, [pc, #48]	; (96bc <hif_isr+0x498>)
    968a:	4b0d      	ldr	r3, [pc, #52]	; (96c0 <hif_isr+0x49c>)
    968c:	0018      	movs	r0, r3
    968e:	4b0d      	ldr	r3, [pc, #52]	; (96c4 <hif_isr+0x4a0>)
    9690:	4798      	blx	r3
    9692:	4b14      	ldr	r3, [pc, #80]	; (96e4 <hif_isr+0x4c0>)
    9694:	0018      	movs	r0, r3
    9696:	4b10      	ldr	r3, [pc, #64]	; (96d8 <hif_isr+0x4b4>)
    9698:	4798      	blx	r3
    969a:	200d      	movs	r0, #13
    969c:	4b0b      	ldr	r3, [pc, #44]	; (96cc <hif_isr+0x4a8>)
    969e:	4798      	blx	r3
		goto ERR1;
    96a0:	e000      	b.n	96a4 <hif_isr+0x480>
			if(ret != M2M_SUCCESS)goto ERR1;
    96a2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    96a4:	230f      	movs	r3, #15
    96a6:	18fb      	adds	r3, r7, r3
    96a8:	781b      	ldrb	r3, [r3, #0]
    96aa:	b25b      	sxtb	r3, r3
}
    96ac:	0018      	movs	r0, r3
    96ae:	46bd      	mov	sp, r7
    96b0:	b005      	add	sp, #20
    96b2:	bd90      	pop	{r4, r7, pc}
    96b4:	200002e0 	.word	0x200002e0
    96b8:	00000215 	.word	0x00000215
    96bc:	0001863c 	.word	0x0001863c
    96c0:	00018338 	.word	0x00018338
    96c4:	00016d69 	.word	0x00016d69
    96c8:	000184a8 	.word	0x000184a8
    96cc:	00016d9d 	.word	0x00016d9d
    96d0:	00008cbd 	.word	0x00008cbd
    96d4:	000184d4 	.word	0x000184d4
    96d8:	00016e85 	.word	0x00016e85
    96dc:	000184e8 	.word	0x000184e8
    96e0:	0000022d 	.word	0x0000022d
    96e4:	00018504 	.word	0x00018504

000096e8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    96e8:	b590      	push	{r4, r7, lr}
    96ea:	b083      	sub	sp, #12
    96ec:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    96ee:	1dfb      	adds	r3, r7, #7
    96f0:	2200      	movs	r2, #0
    96f2:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    96f4:	e023      	b.n	973e <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    96f6:	4b18      	ldr	r3, [pc, #96]	; (9758 <hif_handle_isr+0x70>)
    96f8:	78db      	ldrb	r3, [r3, #3]
    96fa:	b2db      	uxtb	r3, r3
    96fc:	3b01      	subs	r3, #1
    96fe:	b2da      	uxtb	r2, r3
    9700:	4b15      	ldr	r3, [pc, #84]	; (9758 <hif_handle_isr+0x70>)
    9702:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    9704:	1dfc      	adds	r4, r7, #7
    9706:	4b15      	ldr	r3, [pc, #84]	; (975c <hif_handle_isr+0x74>)
    9708:	4798      	blx	r3
    970a:	0003      	movs	r3, r0
    970c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    970e:	1dfb      	adds	r3, r7, #7
    9710:	781b      	ldrb	r3, [r3, #0]
    9712:	b25b      	sxtb	r3, r3
    9714:	2b00      	cmp	r3, #0
    9716:	d100      	bne.n	971a <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    9718:	e011      	b.n	973e <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    971a:	4a11      	ldr	r2, [pc, #68]	; (9760 <hif_handle_isr+0x78>)
    971c:	4911      	ldr	r1, [pc, #68]	; (9764 <hif_handle_isr+0x7c>)
    971e:	4b12      	ldr	r3, [pc, #72]	; (9768 <hif_handle_isr+0x80>)
    9720:	0018      	movs	r0, r3
    9722:	4b12      	ldr	r3, [pc, #72]	; (976c <hif_handle_isr+0x84>)
    9724:	4798      	blx	r3
    9726:	1dfb      	adds	r3, r7, #7
    9728:	2200      	movs	r2, #0
    972a:	569a      	ldrsb	r2, [r3, r2]
    972c:	4b10      	ldr	r3, [pc, #64]	; (9770 <hif_handle_isr+0x88>)
    972e:	0011      	movs	r1, r2
    9730:	0018      	movs	r0, r3
    9732:	4b0e      	ldr	r3, [pc, #56]	; (976c <hif_handle_isr+0x84>)
    9734:	4798      	blx	r3
    9736:	200d      	movs	r0, #13
    9738:	4b0e      	ldr	r3, [pc, #56]	; (9774 <hif_handle_isr+0x8c>)
    973a:	4798      	blx	r3
			ret = hif_isr();
    973c:	e7e2      	b.n	9704 <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    973e:	4b06      	ldr	r3, [pc, #24]	; (9758 <hif_handle_isr+0x70>)
    9740:	78db      	ldrb	r3, [r3, #3]
    9742:	b2db      	uxtb	r3, r3
    9744:	2b00      	cmp	r3, #0
    9746:	d1d6      	bne.n	96f6 <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    9748:	1dfb      	adds	r3, r7, #7
    974a:	781b      	ldrb	r3, [r3, #0]
    974c:	b25b      	sxtb	r3, r3
}
    974e:	0018      	movs	r0, r3
    9750:	46bd      	mov	sp, r7
    9752:	b003      	add	sp, #12
    9754:	bd90      	pop	{r4, r7, pc}
    9756:	46c0      	nop			; (mov r8, r8)
    9758:	200002e0 	.word	0x200002e0
    975c:	00009225 	.word	0x00009225
    9760:	0000024a 	.word	0x0000024a
    9764:	00018644 	.word	0x00018644
    9768:	00018338 	.word	0x00018338
    976c:	00016d69 	.word	0x00016d69
    9770:	00018528 	.word	0x00018528
    9774:	00016d9d 	.word	0x00016d9d

00009778 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    9778:	b590      	push	{r4, r7, lr}
    977a:	b087      	sub	sp, #28
    977c:	af00      	add	r7, sp, #0
    977e:	60f8      	str	r0, [r7, #12]
    9780:	60b9      	str	r1, [r7, #8]
    9782:	0019      	movs	r1, r3
    9784:	1dbb      	adds	r3, r7, #6
    9786:	801a      	strh	r2, [r3, #0]
    9788:	1d7b      	adds	r3, r7, #5
    978a:	1c0a      	adds	r2, r1, #0
    978c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    978e:	2317      	movs	r3, #23
    9790:	18fb      	adds	r3, r7, r3
    9792:	2200      	movs	r2, #0
    9794:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    9796:	68fb      	ldr	r3, [r7, #12]
    9798:	2b00      	cmp	r3, #0
    979a:	d006      	beq.n	97aa <hif_receive+0x32>
    979c:	68bb      	ldr	r3, [r7, #8]
    979e:	2b00      	cmp	r3, #0
    97a0:	d003      	beq.n	97aa <hif_receive+0x32>
    97a2:	1dbb      	adds	r3, r7, #6
    97a4:	881b      	ldrh	r3, [r3, #0]
    97a6:	2b00      	cmp	r3, #0
    97a8:	d11c      	bne.n	97e4 <hif_receive+0x6c>
	{
		if(isDone)
    97aa:	1d7b      	adds	r3, r7, #5
    97ac:	781b      	ldrb	r3, [r3, #0]
    97ae:	2b00      	cmp	r3, #0
    97b0:	d006      	beq.n	97c0 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    97b2:	2317      	movs	r3, #23
    97b4:	18fc      	adds	r4, r7, r3
    97b6:	4b42      	ldr	r3, [pc, #264]	; (98c0 <hif_receive+0x148>)
    97b8:	4798      	blx	r3
    97ba:	0003      	movs	r3, r0
    97bc:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    97be:	e077      	b.n	98b0 <hif_receive+0x138>
			ret = M2M_ERR_FAIL;
    97c0:	2317      	movs	r3, #23
    97c2:	18fb      	adds	r3, r7, r3
    97c4:	22f4      	movs	r2, #244	; 0xf4
    97c6:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    97c8:	4a3e      	ldr	r2, [pc, #248]	; (98c4 <hif_receive+0x14c>)
    97ca:	493f      	ldr	r1, [pc, #252]	; (98c8 <hif_receive+0x150>)
    97cc:	4b3f      	ldr	r3, [pc, #252]	; (98cc <hif_receive+0x154>)
    97ce:	0018      	movs	r0, r3
    97d0:	4b3f      	ldr	r3, [pc, #252]	; (98d0 <hif_receive+0x158>)
    97d2:	4798      	blx	r3
    97d4:	4b3f      	ldr	r3, [pc, #252]	; (98d4 <hif_receive+0x15c>)
    97d6:	0018      	movs	r0, r3
    97d8:	4b3f      	ldr	r3, [pc, #252]	; (98d8 <hif_receive+0x160>)
    97da:	4798      	blx	r3
    97dc:	200d      	movs	r0, #13
    97de:	4b3f      	ldr	r3, [pc, #252]	; (98dc <hif_receive+0x164>)
    97e0:	4798      	blx	r3
		goto ERR1;
    97e2:	e065      	b.n	98b0 <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    97e4:	1dbb      	adds	r3, r7, #6
    97e6:	881a      	ldrh	r2, [r3, #0]
    97e8:	4b3d      	ldr	r3, [pc, #244]	; (98e0 <hif_receive+0x168>)
    97ea:	689b      	ldr	r3, [r3, #8]
    97ec:	429a      	cmp	r2, r3
    97ee:	d915      	bls.n	981c <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    97f0:	2317      	movs	r3, #23
    97f2:	18fb      	adds	r3, r7, r3
    97f4:	22f4      	movs	r2, #244	; 0xf4
    97f6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    97f8:	4a3a      	ldr	r2, [pc, #232]	; (98e4 <hif_receive+0x16c>)
    97fa:	4933      	ldr	r1, [pc, #204]	; (98c8 <hif_receive+0x150>)
    97fc:	4b33      	ldr	r3, [pc, #204]	; (98cc <hif_receive+0x154>)
    97fe:	0018      	movs	r0, r3
    9800:	4b33      	ldr	r3, [pc, #204]	; (98d0 <hif_receive+0x158>)
    9802:	4798      	blx	r3
    9804:	1dbb      	adds	r3, r7, #6
    9806:	8819      	ldrh	r1, [r3, #0]
    9808:	4b35      	ldr	r3, [pc, #212]	; (98e0 <hif_receive+0x168>)
    980a:	689a      	ldr	r2, [r3, #8]
    980c:	4b36      	ldr	r3, [pc, #216]	; (98e8 <hif_receive+0x170>)
    980e:	0018      	movs	r0, r3
    9810:	4b2f      	ldr	r3, [pc, #188]	; (98d0 <hif_receive+0x158>)
    9812:	4798      	blx	r3
    9814:	200d      	movs	r0, #13
    9816:	4b31      	ldr	r3, [pc, #196]	; (98dc <hif_receive+0x164>)
    9818:	4798      	blx	r3
		goto ERR1;
    981a:	e049      	b.n	98b0 <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    981c:	4b30      	ldr	r3, [pc, #192]	; (98e0 <hif_receive+0x168>)
    981e:	685a      	ldr	r2, [r3, #4]
    9820:	68fb      	ldr	r3, [r7, #12]
    9822:	429a      	cmp	r2, r3
    9824:	d80a      	bhi.n	983c <hif_receive+0xc4>
    9826:	1dbb      	adds	r3, r7, #6
    9828:	881a      	ldrh	r2, [r3, #0]
    982a:	68fb      	ldr	r3, [r7, #12]
    982c:	18d2      	adds	r2, r2, r3
    982e:	4b2c      	ldr	r3, [pc, #176]	; (98e0 <hif_receive+0x168>)
    9830:	6859      	ldr	r1, [r3, #4]
    9832:	4b2b      	ldr	r3, [pc, #172]	; (98e0 <hif_receive+0x168>)
    9834:	689b      	ldr	r3, [r3, #8]
    9836:	18cb      	adds	r3, r1, r3
    9838:	429a      	cmp	r2, r3
    983a:	d911      	bls.n	9860 <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    983c:	2317      	movs	r3, #23
    983e:	18fb      	adds	r3, r7, r3
    9840:	22f4      	movs	r2, #244	; 0xf4
    9842:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    9844:	4a29      	ldr	r2, [pc, #164]	; (98ec <hif_receive+0x174>)
    9846:	4920      	ldr	r1, [pc, #128]	; (98c8 <hif_receive+0x150>)
    9848:	4b20      	ldr	r3, [pc, #128]	; (98cc <hif_receive+0x154>)
    984a:	0018      	movs	r0, r3
    984c:	4b20      	ldr	r3, [pc, #128]	; (98d0 <hif_receive+0x158>)
    984e:	4798      	blx	r3
    9850:	4b27      	ldr	r3, [pc, #156]	; (98f0 <hif_receive+0x178>)
    9852:	0018      	movs	r0, r3
    9854:	4b20      	ldr	r3, [pc, #128]	; (98d8 <hif_receive+0x160>)
    9856:	4798      	blx	r3
    9858:	200d      	movs	r0, #13
    985a:	4b20      	ldr	r3, [pc, #128]	; (98dc <hif_receive+0x164>)
    985c:	4798      	blx	r3
		goto ERR1;
    985e:	e027      	b.n	98b0 <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    9860:	1dbb      	adds	r3, r7, #6
    9862:	881a      	ldrh	r2, [r3, #0]
    9864:	2317      	movs	r3, #23
    9866:	18fc      	adds	r4, r7, r3
    9868:	68b9      	ldr	r1, [r7, #8]
    986a:	68fb      	ldr	r3, [r7, #12]
    986c:	0018      	movs	r0, r3
    986e:	4b21      	ldr	r3, [pc, #132]	; (98f4 <hif_receive+0x17c>)
    9870:	4798      	blx	r3
    9872:	0003      	movs	r3, r0
    9874:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    9876:	2317      	movs	r3, #23
    9878:	18fb      	adds	r3, r7, r3
    987a:	781b      	ldrb	r3, [r3, #0]
    987c:	b25b      	sxtb	r3, r3
    987e:	2b00      	cmp	r3, #0
    9880:	d115      	bne.n	98ae <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    9882:	4b17      	ldr	r3, [pc, #92]	; (98e0 <hif_receive+0x168>)
    9884:	685a      	ldr	r2, [r3, #4]
    9886:	4b16      	ldr	r3, [pc, #88]	; (98e0 <hif_receive+0x168>)
    9888:	689b      	ldr	r3, [r3, #8]
    988a:	18d2      	adds	r2, r2, r3
    988c:	1dbb      	adds	r3, r7, #6
    988e:	8819      	ldrh	r1, [r3, #0]
    9890:	68fb      	ldr	r3, [r7, #12]
    9892:	18cb      	adds	r3, r1, r3
    9894:	429a      	cmp	r2, r3
    9896:	d003      	beq.n	98a0 <hif_receive+0x128>
    9898:	1d7b      	adds	r3, r7, #5
    989a:	781b      	ldrb	r3, [r3, #0]
    989c:	2b00      	cmp	r3, #0
    989e:	d007      	beq.n	98b0 <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    98a0:	2317      	movs	r3, #23
    98a2:	18fc      	adds	r4, r7, r3
    98a4:	4b06      	ldr	r3, [pc, #24]	; (98c0 <hif_receive+0x148>)
    98a6:	4798      	blx	r3
    98a8:	0003      	movs	r3, r0
    98aa:	7023      	strb	r3, [r4, #0]
    98ac:	e000      	b.n	98b0 <hif_receive+0x138>
	if(ret != M2M_SUCCESS)goto ERR1;
    98ae:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    98b0:	2317      	movs	r3, #23
    98b2:	18fb      	adds	r3, r7, r3
    98b4:	781b      	ldrb	r3, [r3, #0]
    98b6:	b25b      	sxtb	r3, r3
}
    98b8:	0018      	movs	r0, r3
    98ba:	46bd      	mov	sp, r7
    98bc:	b007      	add	sp, #28
    98be:	bd90      	pop	{r4, r7, pc}
    98c0:	00008cbd 	.word	0x00008cbd
    98c4:	0000026b 	.word	0x0000026b
    98c8:	00018654 	.word	0x00018654
    98cc:	00018338 	.word	0x00018338
    98d0:	00016d69 	.word	0x00016d69
    98d4:	00018558 	.word	0x00018558
    98d8:	00016e85 	.word	0x00016e85
    98dc:	00016d9d 	.word	0x00016d9d
    98e0:	200002e0 	.word	0x200002e0
    98e4:	00000273 	.word	0x00000273
    98e8:	00018578 	.word	0x00018578
    98ec:	00000279 	.word	0x00000279
    98f0:	000185c0 	.word	0x000185c0
    98f4:	0000ad01 	.word	0x0000ad01

000098f8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    98f8:	b580      	push	{r7, lr}
    98fa:	b084      	sub	sp, #16
    98fc:	af00      	add	r7, sp, #0
    98fe:	0002      	movs	r2, r0
    9900:	6039      	str	r1, [r7, #0]
    9902:	1dfb      	adds	r3, r7, #7
    9904:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    9906:	230f      	movs	r3, #15
    9908:	18fb      	adds	r3, r7, r3
    990a:	2200      	movs	r2, #0
    990c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    990e:	1dfb      	adds	r3, r7, #7
    9910:	781b      	ldrb	r3, [r3, #0]
    9912:	2b07      	cmp	r3, #7
    9914:	d820      	bhi.n	9958 <hif_register_cb+0x60>
    9916:	009a      	lsls	r2, r3, #2
    9918:	4b1e      	ldr	r3, [pc, #120]	; (9994 <hif_register_cb+0x9c>)
    991a:	18d3      	adds	r3, r2, r3
    991c:	681b      	ldr	r3, [r3, #0]
    991e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    9920:	4b1d      	ldr	r3, [pc, #116]	; (9998 <hif_register_cb+0xa0>)
    9922:	683a      	ldr	r2, [r7, #0]
    9924:	611a      	str	r2, [r3, #16]
			break;
    9926:	e02c      	b.n	9982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    9928:	4b1b      	ldr	r3, [pc, #108]	; (9998 <hif_register_cb+0xa0>)
    992a:	683a      	ldr	r2, [r7, #0]
    992c:	60da      	str	r2, [r3, #12]
			break;
    992e:	e028      	b.n	9982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    9930:	4b19      	ldr	r3, [pc, #100]	; (9998 <hif_register_cb+0xa0>)
    9932:	683a      	ldr	r2, [r7, #0]
    9934:	615a      	str	r2, [r3, #20]
			break;
    9936:	e024      	b.n	9982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    9938:	4b17      	ldr	r3, [pc, #92]	; (9998 <hif_register_cb+0xa0>)
    993a:	683a      	ldr	r2, [r7, #0]
    993c:	61da      	str	r2, [r3, #28]
			break;
    993e:	e020      	b.n	9982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    9940:	4b15      	ldr	r3, [pc, #84]	; (9998 <hif_register_cb+0xa0>)
    9942:	683a      	ldr	r2, [r7, #0]
    9944:	621a      	str	r2, [r3, #32]
			break;
    9946:	e01c      	b.n	9982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    9948:	4b13      	ldr	r3, [pc, #76]	; (9998 <hif_register_cb+0xa0>)
    994a:	683a      	ldr	r2, [r7, #0]
    994c:	619a      	str	r2, [r3, #24]
			break;
    994e:	e018      	b.n	9982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    9950:	4b11      	ldr	r3, [pc, #68]	; (9998 <hif_register_cb+0xa0>)
    9952:	683a      	ldr	r2, [r7, #0]
    9954:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    9956:	e014      	b.n	9982 <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    9958:	4a10      	ldr	r2, [pc, #64]	; (999c <hif_register_cb+0xa4>)
    995a:	4911      	ldr	r1, [pc, #68]	; (99a0 <hif_register_cb+0xa8>)
    995c:	4b11      	ldr	r3, [pc, #68]	; (99a4 <hif_register_cb+0xac>)
    995e:	0018      	movs	r0, r3
    9960:	4b11      	ldr	r3, [pc, #68]	; (99a8 <hif_register_cb+0xb0>)
    9962:	4798      	blx	r3
    9964:	1dfb      	adds	r3, r7, #7
    9966:	781a      	ldrb	r2, [r3, #0]
    9968:	4b10      	ldr	r3, [pc, #64]	; (99ac <hif_register_cb+0xb4>)
    996a:	0011      	movs	r1, r2
    996c:	0018      	movs	r0, r3
    996e:	4b0e      	ldr	r3, [pc, #56]	; (99a8 <hif_register_cb+0xb0>)
    9970:	4798      	blx	r3
    9972:	200d      	movs	r0, #13
    9974:	4b0e      	ldr	r3, [pc, #56]	; (99b0 <hif_register_cb+0xb8>)
    9976:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9978:	230f      	movs	r3, #15
    997a:	18fb      	adds	r3, r7, r3
    997c:	22f4      	movs	r2, #244	; 0xf4
    997e:	701a      	strb	r2, [r3, #0]
			break;
    9980:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    9982:	230f      	movs	r3, #15
    9984:	18fb      	adds	r3, r7, r3
    9986:	781b      	ldrb	r3, [r3, #0]
    9988:	b25b      	sxtb	r3, r3
}
    998a:	0018      	movs	r0, r3
    998c:	46bd      	mov	sp, r7
    998e:	b004      	add	sp, #16
    9990:	bd80      	pop	{r7, pc}
    9992:	46c0      	nop			; (mov r8, r8)
    9994:	00018610 	.word	0x00018610
    9998:	200002e0 	.word	0x200002e0
    999c:	000002b1 	.word	0x000002b1
    99a0:	00018660 	.word	0x00018660
    99a4:	00018338 	.word	0x00018338
    99a8:	00016d69 	.word	0x00016d69
    99ac:	00018604 	.word	0x00018604
    99b0:	00016d9d 	.word	0x00016d9d

000099b4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    99b4:	b590      	push	{r4, r7, lr}
    99b6:	b0ad      	sub	sp, #180	; 0xb4
    99b8:	af02      	add	r7, sp, #8
    99ba:	603a      	str	r2, [r7, #0]
    99bc:	1dfb      	adds	r3, r7, #7
    99be:	1c02      	adds	r2, r0, #0
    99c0:	701a      	strb	r2, [r3, #0]
    99c2:	1d3b      	adds	r3, r7, #4
    99c4:	1c0a      	adds	r2, r1, #0
    99c6:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    99c8:	1dfb      	adds	r3, r7, #7
    99ca:	781b      	ldrb	r3, [r3, #0]
    99cc:	2b2c      	cmp	r3, #44	; 0x2c
    99ce:	d116      	bne.n	99fe <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    99d0:	239c      	movs	r3, #156	; 0x9c
    99d2:	18f9      	adds	r1, r7, r3
    99d4:	6838      	ldr	r0, [r7, #0]
    99d6:	2300      	movs	r3, #0
    99d8:	2204      	movs	r2, #4
    99da:	4cc6      	ldr	r4, [pc, #792]	; (9cf4 <m2m_wifi_cb+0x340>)
    99dc:	47a0      	blx	r4
    99de:	1e03      	subs	r3, r0, #0
    99e0:	d000      	beq.n	99e4 <m2m_wifi_cb+0x30>
    99e2:	e1aa      	b.n	9d3a <m2m_wifi_cb+0x386>
		{
			if (gpfAppWifiCb)
    99e4:	4bc4      	ldr	r3, [pc, #784]	; (9cf8 <m2m_wifi_cb+0x344>)
    99e6:	681b      	ldr	r3, [r3, #0]
    99e8:	2b00      	cmp	r3, #0
    99ea:	d100      	bne.n	99ee <m2m_wifi_cb+0x3a>
    99ec:	e1a5      	b.n	9d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    99ee:	4bc2      	ldr	r3, [pc, #776]	; (9cf8 <m2m_wifi_cb+0x344>)
    99f0:	681b      	ldr	r3, [r3, #0]
    99f2:	229c      	movs	r2, #156	; 0x9c
    99f4:	18ba      	adds	r2, r7, r2
    99f6:	0011      	movs	r1, r2
    99f8:	202c      	movs	r0, #44	; 0x2c
    99fa:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    99fc:	e19d      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    99fe:	1dfb      	adds	r3, r7, #7
    9a00:	781b      	ldrb	r3, [r3, #0]
    9a02:	2b1b      	cmp	r3, #27
    9a04:	d116      	bne.n	9a34 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    9a06:	2394      	movs	r3, #148	; 0x94
    9a08:	18f9      	adds	r1, r7, r3
    9a0a:	6838      	ldr	r0, [r7, #0]
    9a0c:	2300      	movs	r3, #0
    9a0e:	2208      	movs	r2, #8
    9a10:	4cb8      	ldr	r4, [pc, #736]	; (9cf4 <m2m_wifi_cb+0x340>)
    9a12:	47a0      	blx	r4
    9a14:	1e03      	subs	r3, r0, #0
    9a16:	d000      	beq.n	9a1a <m2m_wifi_cb+0x66>
    9a18:	e18f      	b.n	9d3a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    9a1a:	4bb7      	ldr	r3, [pc, #732]	; (9cf8 <m2m_wifi_cb+0x344>)
    9a1c:	681b      	ldr	r3, [r3, #0]
    9a1e:	2b00      	cmp	r3, #0
    9a20:	d100      	bne.n	9a24 <m2m_wifi_cb+0x70>
    9a22:	e18a      	b.n	9d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    9a24:	4bb4      	ldr	r3, [pc, #720]	; (9cf8 <m2m_wifi_cb+0x344>)
    9a26:	681b      	ldr	r3, [r3, #0]
    9a28:	2294      	movs	r2, #148	; 0x94
    9a2a:	18ba      	adds	r2, r7, r2
    9a2c:	0011      	movs	r1, r2
    9a2e:	201b      	movs	r0, #27
    9a30:	4798      	blx	r3
}
    9a32:	e182      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    9a34:	1dfb      	adds	r3, r7, #7
    9a36:	781b      	ldrb	r3, [r3, #0]
    9a38:	2b06      	cmp	r3, #6
    9a3a:	d116      	bne.n	9a6a <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    9a3c:	2308      	movs	r3, #8
    9a3e:	18f9      	adds	r1, r7, r3
    9a40:	6838      	ldr	r0, [r7, #0]
    9a42:	2301      	movs	r3, #1
    9a44:	2230      	movs	r2, #48	; 0x30
    9a46:	4cab      	ldr	r4, [pc, #684]	; (9cf4 <m2m_wifi_cb+0x340>)
    9a48:	47a0      	blx	r4
    9a4a:	1e03      	subs	r3, r0, #0
    9a4c:	d000      	beq.n	9a50 <m2m_wifi_cb+0x9c>
    9a4e:	e174      	b.n	9d3a <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    9a50:	4ba9      	ldr	r3, [pc, #676]	; (9cf8 <m2m_wifi_cb+0x344>)
    9a52:	681b      	ldr	r3, [r3, #0]
    9a54:	2b00      	cmp	r3, #0
    9a56:	d100      	bne.n	9a5a <m2m_wifi_cb+0xa6>
    9a58:	e16f      	b.n	9d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    9a5a:	4ba7      	ldr	r3, [pc, #668]	; (9cf8 <m2m_wifi_cb+0x344>)
    9a5c:	681b      	ldr	r3, [r3, #0]
    9a5e:	2208      	movs	r2, #8
    9a60:	18ba      	adds	r2, r7, r2
    9a62:	0011      	movs	r1, r2
    9a64:	2006      	movs	r0, #6
    9a66:	4798      	blx	r3
}
    9a68:	e167      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    9a6a:	1dfb      	adds	r3, r7, #7
    9a6c:	781b      	ldrb	r3, [r3, #0]
    9a6e:	2b0e      	cmp	r3, #14
    9a70:	d100      	bne.n	9a74 <m2m_wifi_cb+0xc0>
    9a72:	e162      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    9a74:	1dfb      	adds	r3, r7, #7
    9a76:	781b      	ldrb	r3, [r3, #0]
    9a78:	2b32      	cmp	r3, #50	; 0x32
    9a7a:	d116      	bne.n	9aaa <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    9a7c:	2380      	movs	r3, #128	; 0x80
    9a7e:	18f9      	adds	r1, r7, r3
    9a80:	6838      	ldr	r0, [r7, #0]
    9a82:	2300      	movs	r3, #0
    9a84:	2214      	movs	r2, #20
    9a86:	4c9b      	ldr	r4, [pc, #620]	; (9cf4 <m2m_wifi_cb+0x340>)
    9a88:	47a0      	blx	r4
    9a8a:	1e03      	subs	r3, r0, #0
    9a8c:	d000      	beq.n	9a90 <m2m_wifi_cb+0xdc>
    9a8e:	e154      	b.n	9d3a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    9a90:	4b99      	ldr	r3, [pc, #612]	; (9cf8 <m2m_wifi_cb+0x344>)
    9a92:	681b      	ldr	r3, [r3, #0]
    9a94:	2b00      	cmp	r3, #0
    9a96:	d100      	bne.n	9a9a <m2m_wifi_cb+0xe6>
    9a98:	e14f      	b.n	9d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    9a9a:	4b97      	ldr	r3, [pc, #604]	; (9cf8 <m2m_wifi_cb+0x344>)
    9a9c:	681b      	ldr	r3, [r3, #0]
    9a9e:	2280      	movs	r2, #128	; 0x80
    9aa0:	18ba      	adds	r2, r7, r2
    9aa2:	0011      	movs	r1, r2
    9aa4:	2032      	movs	r0, #50	; 0x32
    9aa6:	4798      	blx	r3
}
    9aa8:	e147      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    9aaa:	1dfb      	adds	r3, r7, #7
    9aac:	781b      	ldrb	r3, [r3, #0]
    9aae:	2b2f      	cmp	r3, #47	; 0x2f
    9ab0:	d11d      	bne.n	9aee <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    9ab2:	2308      	movs	r3, #8
    9ab4:	18fb      	adds	r3, r7, r3
    9ab6:	2264      	movs	r2, #100	; 0x64
    9ab8:	2100      	movs	r1, #0
    9aba:	0018      	movs	r0, r3
    9abc:	4b8f      	ldr	r3, [pc, #572]	; (9cfc <m2m_wifi_cb+0x348>)
    9abe:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    9ac0:	2308      	movs	r3, #8
    9ac2:	18f9      	adds	r1, r7, r3
    9ac4:	6838      	ldr	r0, [r7, #0]
    9ac6:	2300      	movs	r3, #0
    9ac8:	2264      	movs	r2, #100	; 0x64
    9aca:	4c8a      	ldr	r4, [pc, #552]	; (9cf4 <m2m_wifi_cb+0x340>)
    9acc:	47a0      	blx	r4
    9ace:	1e03      	subs	r3, r0, #0
    9ad0:	d000      	beq.n	9ad4 <m2m_wifi_cb+0x120>
    9ad2:	e132      	b.n	9d3a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    9ad4:	4b88      	ldr	r3, [pc, #544]	; (9cf8 <m2m_wifi_cb+0x344>)
    9ad6:	681b      	ldr	r3, [r3, #0]
    9ad8:	2b00      	cmp	r3, #0
    9ada:	d100      	bne.n	9ade <m2m_wifi_cb+0x12a>
    9adc:	e12d      	b.n	9d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    9ade:	4b86      	ldr	r3, [pc, #536]	; (9cf8 <m2m_wifi_cb+0x344>)
    9ae0:	681b      	ldr	r3, [r3, #0]
    9ae2:	2208      	movs	r2, #8
    9ae4:	18ba      	adds	r2, r7, r2
    9ae6:	0011      	movs	r1, r2
    9ae8:	202f      	movs	r0, #47	; 0x2f
    9aea:	4798      	blx	r3
}
    9aec:	e125      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    9aee:	1dfb      	adds	r3, r7, #7
    9af0:	781b      	ldrb	r3, [r3, #0]
    9af2:	2b34      	cmp	r3, #52	; 0x34
    9af4:	d12e      	bne.n	9b54 <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    9af6:	237c      	movs	r3, #124	; 0x7c
    9af8:	18f9      	adds	r1, r7, r3
    9afa:	6838      	ldr	r0, [r7, #0]
    9afc:	2300      	movs	r3, #0
    9afe:	2204      	movs	r2, #4
    9b00:	4c7c      	ldr	r4, [pc, #496]	; (9cf4 <m2m_wifi_cb+0x340>)
    9b02:	47a0      	blx	r4
    9b04:	1e03      	subs	r3, r0, #0
    9b06:	d000      	beq.n	9b0a <m2m_wifi_cb+0x156>
    9b08:	e117      	b.n	9d3a <m2m_wifi_cb+0x386>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    9b0a:	4b7d      	ldr	r3, [pc, #500]	; (9d00 <m2m_wifi_cb+0x34c>)
    9b0c:	0018      	movs	r0, r3
    9b0e:	4b7d      	ldr	r3, [pc, #500]	; (9d04 <m2m_wifi_cb+0x350>)
    9b10:	4798      	blx	r3
    9b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9b14:	0e1b      	lsrs	r3, r3, #24
    9b16:	b2db      	uxtb	r3, r3
    9b18:	0019      	movs	r1, r3
    9b1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9b1c:	0c1b      	lsrs	r3, r3, #16
    9b1e:	b2db      	uxtb	r3, r3
    9b20:	001a      	movs	r2, r3
    9b22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9b24:	0a1b      	lsrs	r3, r3, #8
    9b26:	b2db      	uxtb	r3, r3
    9b28:	001c      	movs	r4, r3
    9b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9b2c:	b2db      	uxtb	r3, r3
    9b2e:	4876      	ldr	r0, [pc, #472]	; (9d08 <m2m_wifi_cb+0x354>)
    9b30:	9300      	str	r3, [sp, #0]
    9b32:	0023      	movs	r3, r4
    9b34:	4c73      	ldr	r4, [pc, #460]	; (9d04 <m2m_wifi_cb+0x350>)
    9b36:	47a0      	blx	r4
    9b38:	200d      	movs	r0, #13
    9b3a:	4b74      	ldr	r3, [pc, #464]	; (9d0c <m2m_wifi_cb+0x358>)
    9b3c:	4798      	blx	r3
			if (gpfAppWifiCb)
    9b3e:	4b6e      	ldr	r3, [pc, #440]	; (9cf8 <m2m_wifi_cb+0x344>)
    9b40:	681b      	ldr	r3, [r3, #0]
    9b42:	2b00      	cmp	r3, #0
    9b44:	d100      	bne.n	9b48 <m2m_wifi_cb+0x194>
    9b46:	e0f8      	b.n	9d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    9b48:	4b6b      	ldr	r3, [pc, #428]	; (9cf8 <m2m_wifi_cb+0x344>)
    9b4a:	681b      	ldr	r3, [r3, #0]
    9b4c:	2100      	movs	r1, #0
    9b4e:	2034      	movs	r0, #52	; 0x34
    9b50:	4798      	blx	r3
}
    9b52:	e0f2      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    9b54:	1dfb      	adds	r3, r7, #7
    9b56:	781b      	ldrb	r3, [r3, #0]
    9b58:	2b11      	cmp	r3, #17
    9b5a:	d11e      	bne.n	9b9a <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    9b5c:	4b6c      	ldr	r3, [pc, #432]	; (9d10 <m2m_wifi_cb+0x35c>)
    9b5e:	2200      	movs	r2, #0
    9b60:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    9b62:	2378      	movs	r3, #120	; 0x78
    9b64:	18f9      	adds	r1, r7, r3
    9b66:	6838      	ldr	r0, [r7, #0]
    9b68:	2300      	movs	r3, #0
    9b6a:	2204      	movs	r2, #4
    9b6c:	4c61      	ldr	r4, [pc, #388]	; (9cf4 <m2m_wifi_cb+0x340>)
    9b6e:	47a0      	blx	r4
    9b70:	1e03      	subs	r3, r0, #0
    9b72:	d000      	beq.n	9b76 <m2m_wifi_cb+0x1c2>
    9b74:	e0e1      	b.n	9d3a <m2m_wifi_cb+0x386>
			gu8ChNum = strState.u8NumofCh;
    9b76:	2378      	movs	r3, #120	; 0x78
    9b78:	18fb      	adds	r3, r7, r3
    9b7a:	781a      	ldrb	r2, [r3, #0]
    9b7c:	4b65      	ldr	r3, [pc, #404]	; (9d14 <m2m_wifi_cb+0x360>)
    9b7e:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    9b80:	4b5d      	ldr	r3, [pc, #372]	; (9cf8 <m2m_wifi_cb+0x344>)
    9b82:	681b      	ldr	r3, [r3, #0]
    9b84:	2b00      	cmp	r3, #0
    9b86:	d100      	bne.n	9b8a <m2m_wifi_cb+0x1d6>
    9b88:	e0d7      	b.n	9d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    9b8a:	4b5b      	ldr	r3, [pc, #364]	; (9cf8 <m2m_wifi_cb+0x344>)
    9b8c:	681b      	ldr	r3, [r3, #0]
    9b8e:	2278      	movs	r2, #120	; 0x78
    9b90:	18ba      	adds	r2, r7, r2
    9b92:	0011      	movs	r1, r2
    9b94:	2011      	movs	r0, #17
    9b96:	4798      	blx	r3
}
    9b98:	e0cf      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    9b9a:	1dfb      	adds	r3, r7, #7
    9b9c:	781b      	ldrb	r3, [r3, #0]
    9b9e:	2b13      	cmp	r3, #19
    9ba0:	d116      	bne.n	9bd0 <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    9ba2:	2308      	movs	r3, #8
    9ba4:	18f9      	adds	r1, r7, r3
    9ba6:	6838      	ldr	r0, [r7, #0]
    9ba8:	2300      	movs	r3, #0
    9baa:	222c      	movs	r2, #44	; 0x2c
    9bac:	4c51      	ldr	r4, [pc, #324]	; (9cf4 <m2m_wifi_cb+0x340>)
    9bae:	47a0      	blx	r4
    9bb0:	1e03      	subs	r3, r0, #0
    9bb2:	d000      	beq.n	9bb6 <m2m_wifi_cb+0x202>
    9bb4:	e0c1      	b.n	9d3a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    9bb6:	4b50      	ldr	r3, [pc, #320]	; (9cf8 <m2m_wifi_cb+0x344>)
    9bb8:	681b      	ldr	r3, [r3, #0]
    9bba:	2b00      	cmp	r3, #0
    9bbc:	d100      	bne.n	9bc0 <m2m_wifi_cb+0x20c>
    9bbe:	e0bc      	b.n	9d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    9bc0:	4b4d      	ldr	r3, [pc, #308]	; (9cf8 <m2m_wifi_cb+0x344>)
    9bc2:	681b      	ldr	r3, [r3, #0]
    9bc4:	2208      	movs	r2, #8
    9bc6:	18ba      	adds	r2, r7, r2
    9bc8:	0011      	movs	r1, r2
    9bca:	2013      	movs	r0, #19
    9bcc:	4798      	blx	r3
}
    9bce:	e0b4      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    9bd0:	1dfb      	adds	r3, r7, #7
    9bd2:	781b      	ldrb	r3, [r3, #0]
    9bd4:	2b04      	cmp	r3, #4
    9bd6:	d116      	bne.n	9c06 <m2m_wifi_cb+0x252>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    9bd8:	23a0      	movs	r3, #160	; 0xa0
    9bda:	18f9      	adds	r1, r7, r3
    9bdc:	6838      	ldr	r0, [r7, #0]
    9bde:	2300      	movs	r3, #0
    9be0:	2204      	movs	r2, #4
    9be2:	4c44      	ldr	r4, [pc, #272]	; (9cf4 <m2m_wifi_cb+0x340>)
    9be4:	47a0      	blx	r4
    9be6:	1e03      	subs	r3, r0, #0
    9be8:	d000      	beq.n	9bec <m2m_wifi_cb+0x238>
    9bea:	e0a6      	b.n	9d3a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    9bec:	4b42      	ldr	r3, [pc, #264]	; (9cf8 <m2m_wifi_cb+0x344>)
    9bee:	681b      	ldr	r3, [r3, #0]
    9bf0:	2b00      	cmp	r3, #0
    9bf2:	d100      	bne.n	9bf6 <m2m_wifi_cb+0x242>
    9bf4:	e0a1      	b.n	9d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    9bf6:	4b40      	ldr	r3, [pc, #256]	; (9cf8 <m2m_wifi_cb+0x344>)
    9bf8:	681b      	ldr	r3, [r3, #0]
    9bfa:	22a0      	movs	r2, #160	; 0xa0
    9bfc:	18ba      	adds	r2, r7, r2
    9bfe:	0011      	movs	r1, r2
    9c00:	2004      	movs	r0, #4
    9c02:	4798      	blx	r3
}
    9c04:	e099      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    9c06:	1dfb      	adds	r3, r7, #7
    9c08:	781b      	ldrb	r3, [r3, #0]
    9c0a:	2b65      	cmp	r3, #101	; 0x65
    9c0c:	d116      	bne.n	9c3c <m2m_wifi_cb+0x288>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    9c0e:	23a0      	movs	r3, #160	; 0xa0
    9c10:	18f9      	adds	r1, r7, r3
    9c12:	6838      	ldr	r0, [r7, #0]
    9c14:	2300      	movs	r3, #0
    9c16:	2204      	movs	r2, #4
    9c18:	4c36      	ldr	r4, [pc, #216]	; (9cf4 <m2m_wifi_cb+0x340>)
    9c1a:	47a0      	blx	r4
    9c1c:	1e03      	subs	r3, r0, #0
    9c1e:	d000      	beq.n	9c22 <m2m_wifi_cb+0x26e>
    9c20:	e08b      	b.n	9d3a <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    9c22:	4b35      	ldr	r3, [pc, #212]	; (9cf8 <m2m_wifi_cb+0x344>)
    9c24:	681b      	ldr	r3, [r3, #0]
    9c26:	2b00      	cmp	r3, #0
    9c28:	d100      	bne.n	9c2c <m2m_wifi_cb+0x278>
    9c2a:	e086      	b.n	9d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    9c2c:	4b32      	ldr	r3, [pc, #200]	; (9cf8 <m2m_wifi_cb+0x344>)
    9c2e:	681b      	ldr	r3, [r3, #0]
    9c30:	22a0      	movs	r2, #160	; 0xa0
    9c32:	18ba      	adds	r2, r7, r2
    9c34:	0011      	movs	r1, r2
    9c36:	2065      	movs	r0, #101	; 0x65
    9c38:	4798      	blx	r3
}
    9c3a:	e07e      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    9c3c:	1dfb      	adds	r3, r7, #7
    9c3e:	781b      	ldrb	r3, [r3, #0]
    9c40:	2b09      	cmp	r3, #9
    9c42:	d116      	bne.n	9c72 <m2m_wifi_cb+0x2be>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    9c44:	2308      	movs	r3, #8
    9c46:	18f9      	adds	r1, r7, r3
    9c48:	6838      	ldr	r0, [r7, #0]
    9c4a:	2301      	movs	r3, #1
    9c4c:	2264      	movs	r2, #100	; 0x64
    9c4e:	4c29      	ldr	r4, [pc, #164]	; (9cf4 <m2m_wifi_cb+0x340>)
    9c50:	47a0      	blx	r4
    9c52:	1e03      	subs	r3, r0, #0
    9c54:	d000      	beq.n	9c58 <m2m_wifi_cb+0x2a4>
    9c56:	e070      	b.n	9d3a <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    9c58:	4b27      	ldr	r3, [pc, #156]	; (9cf8 <m2m_wifi_cb+0x344>)
    9c5a:	681b      	ldr	r3, [r3, #0]
    9c5c:	2b00      	cmp	r3, #0
    9c5e:	d100      	bne.n	9c62 <m2m_wifi_cb+0x2ae>
    9c60:	e06b      	b.n	9d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    9c62:	4b25      	ldr	r3, [pc, #148]	; (9cf8 <m2m_wifi_cb+0x344>)
    9c64:	681b      	ldr	r3, [r3, #0]
    9c66:	2208      	movs	r2, #8
    9c68:	18ba      	adds	r2, r7, r2
    9c6a:	0011      	movs	r1, r2
    9c6c:	2009      	movs	r0, #9
    9c6e:	4798      	blx	r3
}
    9c70:	e063      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    9c72:	1dfb      	adds	r3, r7, #7
    9c74:	781b      	ldrb	r3, [r3, #0]
    9c76:	2b2a      	cmp	r3, #42	; 0x2a
    9c78:	d114      	bne.n	9ca4 <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    9c7a:	2374      	movs	r3, #116	; 0x74
    9c7c:	18f9      	adds	r1, r7, r3
    9c7e:	6838      	ldr	r0, [r7, #0]
    9c80:	2301      	movs	r3, #1
    9c82:	2204      	movs	r2, #4
    9c84:	4c1b      	ldr	r4, [pc, #108]	; (9cf4 <m2m_wifi_cb+0x340>)
    9c86:	47a0      	blx	r4
    9c88:	1e03      	subs	r3, r0, #0
    9c8a:	d156      	bne.n	9d3a <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    9c8c:	4b1a      	ldr	r3, [pc, #104]	; (9cf8 <m2m_wifi_cb+0x344>)
    9c8e:	681b      	ldr	r3, [r3, #0]
    9c90:	2b00      	cmp	r3, #0
    9c92:	d052      	beq.n	9d3a <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    9c94:	4b18      	ldr	r3, [pc, #96]	; (9cf8 <m2m_wifi_cb+0x344>)
    9c96:	681b      	ldr	r3, [r3, #0]
    9c98:	2274      	movs	r2, #116	; 0x74
    9c9a:	18ba      	adds	r2, r7, r2
    9c9c:	0011      	movs	r1, r2
    9c9e:	202a      	movs	r0, #42	; 0x2a
    9ca0:	4798      	blx	r3
}
    9ca2:	e04a      	b.n	9d3a <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    9ca4:	1dfb      	adds	r3, r7, #7
    9ca6:	781b      	ldrb	r3, [r3, #0]
    9ca8:	2b20      	cmp	r3, #32
    9caa:	d135      	bne.n	9d18 <m2m_wifi_cb+0x364>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    9cac:	236c      	movs	r3, #108	; 0x6c
    9cae:	18f9      	adds	r1, r7, r3
    9cb0:	6838      	ldr	r0, [r7, #0]
    9cb2:	2300      	movs	r3, #0
    9cb4:	2208      	movs	r2, #8
    9cb6:	4c0f      	ldr	r4, [pc, #60]	; (9cf4 <m2m_wifi_cb+0x340>)
    9cb8:	47a0      	blx	r4
    9cba:	1e03      	subs	r3, r0, #0
    9cbc:	d13d      	bne.n	9d3a <m2m_wifi_cb+0x386>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    9cbe:	683b      	ldr	r3, [r7, #0]
    9cc0:	3308      	adds	r3, #8
    9cc2:	0018      	movs	r0, r3
    9cc4:	236c      	movs	r3, #108	; 0x6c
    9cc6:	18fb      	adds	r3, r7, r3
    9cc8:	6819      	ldr	r1, [r3, #0]
    9cca:	236c      	movs	r3, #108	; 0x6c
    9ccc:	18fb      	adds	r3, r7, r3
    9cce:	889a      	ldrh	r2, [r3, #4]
    9cd0:	2301      	movs	r3, #1
    9cd2:	4c08      	ldr	r4, [pc, #32]	; (9cf4 <m2m_wifi_cb+0x340>)
    9cd4:	47a0      	blx	r4
    9cd6:	1e03      	subs	r3, r0, #0
    9cd8:	d12f      	bne.n	9d3a <m2m_wifi_cb+0x386>
				if(gpfAppWifiCb)
    9cda:	4b07      	ldr	r3, [pc, #28]	; (9cf8 <m2m_wifi_cb+0x344>)
    9cdc:	681b      	ldr	r3, [r3, #0]
    9cde:	2b00      	cmp	r3, #0
    9ce0:	d02b      	beq.n	9d3a <m2m_wifi_cb+0x386>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    9ce2:	4b05      	ldr	r3, [pc, #20]	; (9cf8 <m2m_wifi_cb+0x344>)
    9ce4:	681b      	ldr	r3, [r3, #0]
    9ce6:	226c      	movs	r2, #108	; 0x6c
    9ce8:	18ba      	adds	r2, r7, r2
    9cea:	0011      	movs	r1, r2
    9cec:	2020      	movs	r0, #32
    9cee:	4798      	blx	r3
}
    9cf0:	e023      	b.n	9d3a <m2m_wifi_cb+0x386>
    9cf2:	46c0      	nop			; (mov r8, r8)
    9cf4:	00009779 	.word	0x00009779
    9cf8:	20000210 	.word	0x20000210
    9cfc:	00008c25 	.word	0x00008c25
    9d00:	00018670 	.word	0x00018670
    9d04:	00016d69 	.word	0x00016d69
    9d08:	0001867c 	.word	0x0001867c
    9d0c:	00016d9d 	.word	0x00016d9d
    9d10:	2000020d 	.word	0x2000020d
    9d14:	2000020c 	.word	0x2000020c
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    9d18:	2392      	movs	r3, #146	; 0x92
    9d1a:	005a      	lsls	r2, r3, #1
    9d1c:	4909      	ldr	r1, [pc, #36]	; (9d44 <m2m_wifi_cb+0x390>)
    9d1e:	4b0a      	ldr	r3, [pc, #40]	; (9d48 <m2m_wifi_cb+0x394>)
    9d20:	0018      	movs	r0, r3
    9d22:	4b0a      	ldr	r3, [pc, #40]	; (9d4c <m2m_wifi_cb+0x398>)
    9d24:	4798      	blx	r3
    9d26:	1dfb      	adds	r3, r7, #7
    9d28:	781a      	ldrb	r2, [r3, #0]
    9d2a:	4b09      	ldr	r3, [pc, #36]	; (9d50 <m2m_wifi_cb+0x39c>)
    9d2c:	0011      	movs	r1, r2
    9d2e:	0018      	movs	r0, r3
    9d30:	4b06      	ldr	r3, [pc, #24]	; (9d4c <m2m_wifi_cb+0x398>)
    9d32:	4798      	blx	r3
    9d34:	200d      	movs	r0, #13
    9d36:	4b07      	ldr	r3, [pc, #28]	; (9d54 <m2m_wifi_cb+0x3a0>)
    9d38:	4798      	blx	r3
}
    9d3a:	46c0      	nop			; (mov r8, r8)
    9d3c:	46bd      	mov	sp, r7
    9d3e:	b02b      	add	sp, #172	; 0xac
    9d40:	bd90      	pop	{r4, r7, pc}
    9d42:	46c0      	nop			; (mov r8, r8)
    9d44:	00018a24 	.word	0x00018a24
    9d48:	0001869c 	.word	0x0001869c
    9d4c:	00016d69 	.word	0x00016d69
    9d50:	000186b0 	.word	0x000186b0
    9d54:	00016d9d 	.word	0x00016d9d

00009d58 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    9d58:	b590      	push	{r4, r7, lr}
    9d5a:	b091      	sub	sp, #68	; 0x44
    9d5c:	af02      	add	r7, sp, #8
    9d5e:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    9d60:	2337      	movs	r3, #55	; 0x37
    9d62:	18fb      	adds	r3, r7, r3
    9d64:	2200      	movs	r2, #0
    9d66:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    9d68:	230b      	movs	r3, #11
    9d6a:	18fb      	adds	r3, r7, r3
    9d6c:	2201      	movs	r2, #1
    9d6e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    9d70:	687b      	ldr	r3, [r7, #4]
    9d72:	2b00      	cmp	r3, #0
    9d74:	d104      	bne.n	9d80 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    9d76:	2337      	movs	r3, #55	; 0x37
    9d78:	18fb      	adds	r3, r7, r3
    9d7a:	22f4      	movs	r2, #244	; 0xf4
    9d7c:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    9d7e:	e0ad      	b.n	9edc <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    9d80:	687b      	ldr	r3, [r7, #4]
    9d82:	681a      	ldr	r2, [r3, #0]
    9d84:	4b59      	ldr	r3, [pc, #356]	; (9eec <m2m_wifi_init+0x194>)
    9d86:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    9d88:	4b59      	ldr	r3, [pc, #356]	; (9ef0 <m2m_wifi_init+0x198>)
    9d8a:	2200      	movs	r2, #0
    9d8c:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    9d8e:	2337      	movs	r3, #55	; 0x37
    9d90:	18fc      	adds	r4, r7, r3
    9d92:	230b      	movs	r3, #11
    9d94:	18fb      	adds	r3, r7, r3
    9d96:	0018      	movs	r0, r3
    9d98:	4b56      	ldr	r3, [pc, #344]	; (9ef4 <m2m_wifi_init+0x19c>)
    9d9a:	4798      	blx	r3
    9d9c:	0003      	movs	r3, r0
    9d9e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    9da0:	2337      	movs	r3, #55	; 0x37
    9da2:	18fb      	adds	r3, r7, r3
    9da4:	781b      	ldrb	r3, [r3, #0]
    9da6:	b25b      	sxtb	r3, r3
    9da8:	2b00      	cmp	r3, #0
    9daa:	d000      	beq.n	9dae <m2m_wifi_init+0x56>
    9dac:	e093      	b.n	9ed6 <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    9dae:	2337      	movs	r3, #55	; 0x37
    9db0:	18fc      	adds	r4, r7, r3
    9db2:	2000      	movs	r0, #0
    9db4:	4b50      	ldr	r3, [pc, #320]	; (9ef8 <m2m_wifi_init+0x1a0>)
    9db6:	4798      	blx	r3
    9db8:	0003      	movs	r3, r0
    9dba:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    9dbc:	2337      	movs	r3, #55	; 0x37
    9dbe:	18fb      	adds	r3, r7, r3
    9dc0:	781b      	ldrb	r3, [r3, #0]
    9dc2:	b25b      	sxtb	r3, r3
    9dc4:	2b00      	cmp	r3, #0
    9dc6:	d000      	beq.n	9dca <m2m_wifi_init+0x72>
    9dc8:	e080      	b.n	9ecc <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    9dca:	4b4c      	ldr	r3, [pc, #304]	; (9efc <m2m_wifi_init+0x1a4>)
    9dcc:	0019      	movs	r1, r3
    9dce:	2001      	movs	r0, #1
    9dd0:	4b4b      	ldr	r3, [pc, #300]	; (9f00 <m2m_wifi_init+0x1a8>)
    9dd2:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    9dd4:	2337      	movs	r3, #55	; 0x37
    9dd6:	18fc      	adds	r4, r7, r3
    9dd8:	230c      	movs	r3, #12
    9dda:	18fb      	adds	r3, r7, r3
    9ddc:	0018      	movs	r0, r3
    9dde:	4b49      	ldr	r3, [pc, #292]	; (9f04 <m2m_wifi_init+0x1ac>)
    9de0:	4798      	blx	r3
    9de2:	0003      	movs	r3, r0
    9de4:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    9de6:	4b48      	ldr	r3, [pc, #288]	; (9f08 <m2m_wifi_init+0x1b0>)
    9de8:	0018      	movs	r0, r3
    9dea:	4b48      	ldr	r3, [pc, #288]	; (9f0c <m2m_wifi_init+0x1b4>)
    9dec:	4798      	blx	r3
    9dee:	230c      	movs	r3, #12
    9df0:	18fb      	adds	r3, r7, r3
    9df2:	791b      	ldrb	r3, [r3, #4]
    9df4:	0019      	movs	r1, r3
    9df6:	230c      	movs	r3, #12
    9df8:	18fb      	adds	r3, r7, r3
    9dfa:	795b      	ldrb	r3, [r3, #5]
    9dfc:	001a      	movs	r2, r3
    9dfe:	230c      	movs	r3, #12
    9e00:	18fb      	adds	r3, r7, r3
    9e02:	799b      	ldrb	r3, [r3, #6]
    9e04:	001c      	movs	r4, r3
    9e06:	230c      	movs	r3, #12
    9e08:	18fb      	adds	r3, r7, r3
    9e0a:	8c1b      	ldrh	r3, [r3, #32]
    9e0c:	4840      	ldr	r0, [pc, #256]	; (9f10 <m2m_wifi_init+0x1b8>)
    9e0e:	9300      	str	r3, [sp, #0]
    9e10:	0023      	movs	r3, r4
    9e12:	4c3e      	ldr	r4, [pc, #248]	; (9f0c <m2m_wifi_init+0x1b4>)
    9e14:	47a0      	blx	r4
    9e16:	200d      	movs	r0, #13
    9e18:	4b3e      	ldr	r3, [pc, #248]	; (9f14 <m2m_wifi_init+0x1bc>)
    9e1a:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    9e1c:	4b3a      	ldr	r3, [pc, #232]	; (9f08 <m2m_wifi_init+0x1b0>)
    9e1e:	0018      	movs	r0, r3
    9e20:	4b3a      	ldr	r3, [pc, #232]	; (9f0c <m2m_wifi_init+0x1b4>)
    9e22:	4798      	blx	r3
    9e24:	230c      	movs	r3, #12
    9e26:	18fb      	adds	r3, r7, r3
    9e28:	3316      	adds	r3, #22
    9e2a:	001a      	movs	r2, r3
    9e2c:	230c      	movs	r3, #12
    9e2e:	18fb      	adds	r3, r7, r3
    9e30:	330a      	adds	r3, #10
    9e32:	0019      	movs	r1, r3
    9e34:	4b38      	ldr	r3, [pc, #224]	; (9f18 <m2m_wifi_init+0x1c0>)
    9e36:	0018      	movs	r0, r3
    9e38:	4b34      	ldr	r3, [pc, #208]	; (9f0c <m2m_wifi_init+0x1b4>)
    9e3a:	4798      	blx	r3
    9e3c:	200d      	movs	r0, #13
    9e3e:	4b35      	ldr	r3, [pc, #212]	; (9f14 <m2m_wifi_init+0x1bc>)
    9e40:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    9e42:	4b31      	ldr	r3, [pc, #196]	; (9f08 <m2m_wifi_init+0x1b0>)
    9e44:	0018      	movs	r0, r3
    9e46:	4b31      	ldr	r3, [pc, #196]	; (9f0c <m2m_wifi_init+0x1b4>)
    9e48:	4798      	blx	r3
    9e4a:	230c      	movs	r3, #12
    9e4c:	18fb      	adds	r3, r7, r3
    9e4e:	79db      	ldrb	r3, [r3, #7]
    9e50:	0019      	movs	r1, r3
    9e52:	230c      	movs	r3, #12
    9e54:	18fb      	adds	r3, r7, r3
    9e56:	7a1b      	ldrb	r3, [r3, #8]
    9e58:	001a      	movs	r2, r3
    9e5a:	230c      	movs	r3, #12
    9e5c:	18fb      	adds	r3, r7, r3
    9e5e:	7a5b      	ldrb	r3, [r3, #9]
    9e60:	482e      	ldr	r0, [pc, #184]	; (9f1c <m2m_wifi_init+0x1c4>)
    9e62:	4c2a      	ldr	r4, [pc, #168]	; (9f0c <m2m_wifi_init+0x1b4>)
    9e64:	47a0      	blx	r4
    9e66:	200d      	movs	r0, #13
    9e68:	4b2a      	ldr	r3, [pc, #168]	; (9f14 <m2m_wifi_init+0x1bc>)
    9e6a:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    9e6c:	4b26      	ldr	r3, [pc, #152]	; (9f08 <m2m_wifi_init+0x1b0>)
    9e6e:	0018      	movs	r0, r3
    9e70:	4b26      	ldr	r3, [pc, #152]	; (9f0c <m2m_wifi_init+0x1b4>)
    9e72:	4798      	blx	r3
    9e74:	482a      	ldr	r0, [pc, #168]	; (9f20 <m2m_wifi_init+0x1c8>)
    9e76:	2302      	movs	r3, #2
    9e78:	2205      	movs	r2, #5
    9e7a:	2113      	movs	r1, #19
    9e7c:	4c23      	ldr	r4, [pc, #140]	; (9f0c <m2m_wifi_init+0x1b4>)
    9e7e:	47a0      	blx	r4
    9e80:	200d      	movs	r0, #13
    9e82:	4b24      	ldr	r3, [pc, #144]	; (9f14 <m2m_wifi_init+0x1bc>)
    9e84:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    9e86:	4b20      	ldr	r3, [pc, #128]	; (9f08 <m2m_wifi_init+0x1b0>)
    9e88:	0018      	movs	r0, r3
    9e8a:	4b20      	ldr	r3, [pc, #128]	; (9f0c <m2m_wifi_init+0x1b4>)
    9e8c:	4798      	blx	r3
    9e8e:	4a25      	ldr	r2, [pc, #148]	; (9f24 <m2m_wifi_init+0x1cc>)
    9e90:	4925      	ldr	r1, [pc, #148]	; (9f28 <m2m_wifi_init+0x1d0>)
    9e92:	4b26      	ldr	r3, [pc, #152]	; (9f2c <m2m_wifi_init+0x1d4>)
    9e94:	0018      	movs	r0, r3
    9e96:	4b1d      	ldr	r3, [pc, #116]	; (9f0c <m2m_wifi_init+0x1b4>)
    9e98:	4798      	blx	r3
    9e9a:	200d      	movs	r0, #13
    9e9c:	4b1d      	ldr	r3, [pc, #116]	; (9f14 <m2m_wifi_init+0x1bc>)
    9e9e:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    9ea0:	2337      	movs	r3, #55	; 0x37
    9ea2:	18fb      	adds	r3, r7, r3
    9ea4:	781b      	ldrb	r3, [r3, #0]
    9ea6:	b25b      	sxtb	r3, r3
    9ea8:	330d      	adds	r3, #13
    9eaa:	d116      	bne.n	9eda <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    9eac:	23e8      	movs	r3, #232	; 0xe8
    9eae:	33ff      	adds	r3, #255	; 0xff
    9eb0:	001a      	movs	r2, r3
    9eb2:	491f      	ldr	r1, [pc, #124]	; (9f30 <m2m_wifi_init+0x1d8>)
    9eb4:	4b1f      	ldr	r3, [pc, #124]	; (9f34 <m2m_wifi_init+0x1dc>)
    9eb6:	0018      	movs	r0, r3
    9eb8:	4b14      	ldr	r3, [pc, #80]	; (9f0c <m2m_wifi_init+0x1b4>)
    9eba:	4798      	blx	r3
    9ebc:	4b1e      	ldr	r3, [pc, #120]	; (9f38 <m2m_wifi_init+0x1e0>)
    9ebe:	0018      	movs	r0, r3
    9ec0:	4b1e      	ldr	r3, [pc, #120]	; (9f3c <m2m_wifi_init+0x1e4>)
    9ec2:	4798      	blx	r3
    9ec4:	200d      	movs	r0, #13
    9ec6:	4b13      	ldr	r3, [pc, #76]	; (9f14 <m2m_wifi_init+0x1bc>)
    9ec8:	4798      	blx	r3
	}

	goto _EXIT0;
    9eca:	e006      	b.n	9eda <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    9ecc:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    9ece:	2000      	movs	r0, #0
    9ed0:	4b1b      	ldr	r3, [pc, #108]	; (9f40 <m2m_wifi_init+0x1e8>)
    9ed2:	4798      	blx	r3
    9ed4:	e002      	b.n	9edc <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    9ed6:	46c0      	nop			; (mov r8, r8)
    9ed8:	e000      	b.n	9edc <m2m_wifi_init+0x184>
	goto _EXIT0;
    9eda:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    9edc:	2337      	movs	r3, #55	; 0x37
    9ede:	18fb      	adds	r3, r7, r3
    9ee0:	781b      	ldrb	r3, [r3, #0]
    9ee2:	b25b      	sxtb	r3, r3
}
    9ee4:	0018      	movs	r0, r3
    9ee6:	46bd      	mov	sp, r7
    9ee8:	b00f      	add	sp, #60	; 0x3c
    9eea:	bd90      	pop	{r4, r7, pc}
    9eec:	20000210 	.word	0x20000210
    9ef0:	2000020d 	.word	0x2000020d
    9ef4:	0000b091 	.word	0x0000b091
    9ef8:	00008e3d 	.word	0x00008e3d
    9efc:	000099b5 	.word	0x000099b5
    9f00:	000098f9 	.word	0x000098f9
    9f04:	0000aec5 	.word	0x0000aec5
    9f08:	00018670 	.word	0x00018670
    9f0c:	00016d69 	.word	0x00016d69
    9f10:	00018804 	.word	0x00018804
    9f14:	00016d9d 	.word	0x00016d9d
    9f18:	0001882c 	.word	0x0001882c
    9f1c:	00018848 	.word	0x00018848
    9f20:	0001886c 	.word	0x0001886c
    9f24:	00018884 	.word	0x00018884
    9f28:	00018890 	.word	0x00018890
    9f2c:	0001889c 	.word	0x0001889c
    9f30:	00018a30 	.word	0x00018a30
    9f34:	0001869c 	.word	0x0001869c
    9f38:	000188b4 	.word	0x000188b4
    9f3c:	00016e85 	.word	0x00016e85
    9f40:	0000b225 	.word	0x0000b225

00009f44 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    9f44:	b580      	push	{r7, lr}
    9f46:	b082      	sub	sp, #8
    9f48:	af00      	add	r7, sp, #0
    9f4a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    9f4c:	4b03      	ldr	r3, [pc, #12]	; (9f5c <m2m_wifi_handle_events+0x18>)
    9f4e:	4798      	blx	r3
    9f50:	0003      	movs	r3, r0
}
    9f52:	0018      	movs	r0, r3
    9f54:	46bd      	mov	sp, r7
    9f56:	b002      	add	sp, #8
    9f58:	bd80      	pop	{r7, pc}
    9f5a:	46c0      	nop			; (mov r8, r8)
    9f5c:	000096e9 	.word	0x000096e9

00009f60 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    9f60:	b590      	push	{r4, r7, lr}
    9f62:	b087      	sub	sp, #28
    9f64:	af02      	add	r7, sp, #8
    9f66:	60f8      	str	r0, [r7, #12]
    9f68:	0008      	movs	r0, r1
    9f6a:	0011      	movs	r1, r2
    9f6c:	607b      	str	r3, [r7, #4]
    9f6e:	230b      	movs	r3, #11
    9f70:	18fb      	adds	r3, r7, r3
    9f72:	1c02      	adds	r2, r0, #0
    9f74:	701a      	strb	r2, [r3, #0]
    9f76:	230a      	movs	r3, #10
    9f78:	18fb      	adds	r3, r7, r3
    9f7a:	1c0a      	adds	r2, r1, #0
    9f7c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    9f7e:	687c      	ldr	r4, [r7, #4]
    9f80:	230a      	movs	r3, #10
    9f82:	18fb      	adds	r3, r7, r3
    9f84:	781a      	ldrb	r2, [r3, #0]
    9f86:	230b      	movs	r3, #11
    9f88:	18fb      	adds	r3, r7, r3
    9f8a:	7819      	ldrb	r1, [r3, #0]
    9f8c:	68f8      	ldr	r0, [r7, #12]
    9f8e:	2300      	movs	r3, #0
    9f90:	9301      	str	r3, [sp, #4]
    9f92:	2320      	movs	r3, #32
    9f94:	18fb      	adds	r3, r7, r3
    9f96:	881b      	ldrh	r3, [r3, #0]
    9f98:	9300      	str	r3, [sp, #0]
    9f9a:	0023      	movs	r3, r4
    9f9c:	4c03      	ldr	r4, [pc, #12]	; (9fac <m2m_wifi_connect+0x4c>)
    9f9e:	47a0      	blx	r4
    9fa0:	0003      	movs	r3, r0
}
    9fa2:	0018      	movs	r0, r3
    9fa4:	46bd      	mov	sp, r7
    9fa6:	b005      	add	sp, #20
    9fa8:	bd90      	pop	{r4, r7, pc}
    9faa:	46c0      	nop			; (mov r8, r8)
    9fac:	00009fb1 	.word	0x00009fb1

00009fb0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    9fb0:	b5b0      	push	{r4, r5, r7, lr}
    9fb2:	b0aa      	sub	sp, #168	; 0xa8
    9fb4:	af04      	add	r7, sp, #16
    9fb6:	60f8      	str	r0, [r7, #12]
    9fb8:	0008      	movs	r0, r1
    9fba:	0011      	movs	r1, r2
    9fbc:	607b      	str	r3, [r7, #4]
    9fbe:	230b      	movs	r3, #11
    9fc0:	18fb      	adds	r3, r7, r3
    9fc2:	1c02      	adds	r2, r0, #0
    9fc4:	701a      	strb	r2, [r3, #0]
    9fc6:	230a      	movs	r3, #10
    9fc8:	18fb      	adds	r3, r7, r3
    9fca:	1c0a      	adds	r2, r1, #0
    9fcc:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    9fce:	2397      	movs	r3, #151	; 0x97
    9fd0:	18fb      	adds	r3, r7, r3
    9fd2:	2200      	movs	r2, #0
    9fd4:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    9fd6:	230a      	movs	r3, #10
    9fd8:	18fb      	adds	r3, r7, r3
    9fda:	781b      	ldrb	r3, [r3, #0]
    9fdc:	2b01      	cmp	r3, #1
    9fde:	d100      	bne.n	9fe2 <m2m_wifi_connect_sc+0x32>
    9fe0:	e083      	b.n	a0ea <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    9fe2:	687b      	ldr	r3, [r7, #4]
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d111      	bne.n	a00c <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    9fe8:	4adb      	ldr	r2, [pc, #876]	; (a358 <m2m_wifi_connect_sc+0x3a8>)
    9fea:	49dc      	ldr	r1, [pc, #880]	; (a35c <m2m_wifi_connect_sc+0x3ac>)
    9fec:	4bdc      	ldr	r3, [pc, #880]	; (a360 <m2m_wifi_connect_sc+0x3b0>)
    9fee:	0018      	movs	r0, r3
    9ff0:	4bdc      	ldr	r3, [pc, #880]	; (a364 <m2m_wifi_connect_sc+0x3b4>)
    9ff2:	4798      	blx	r3
    9ff4:	4bdc      	ldr	r3, [pc, #880]	; (a368 <m2m_wifi_connect_sc+0x3b8>)
    9ff6:	0018      	movs	r0, r3
    9ff8:	4bdc      	ldr	r3, [pc, #880]	; (a36c <m2m_wifi_connect_sc+0x3bc>)
    9ffa:	4798      	blx	r3
    9ffc:	200d      	movs	r0, #13
    9ffe:	4bdc      	ldr	r3, [pc, #880]	; (a370 <m2m_wifi_connect_sc+0x3c0>)
    a000:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a002:	2397      	movs	r3, #151	; 0x97
    a004:	18fb      	adds	r3, r7, r3
    a006:	22f4      	movs	r2, #244	; 0xf4
    a008:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a00a:	e1f5      	b.n	a3f8 <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    a00c:	230a      	movs	r3, #10
    a00e:	18fb      	adds	r3, r7, r3
    a010:	781b      	ldrb	r3, [r3, #0]
    a012:	2b02      	cmp	r3, #2
    a014:	d169      	bne.n	a0ea <m2m_wifi_connect_sc+0x13a>
    a016:	687b      	ldr	r3, [r7, #4]
    a018:	0018      	movs	r0, r3
    a01a:	4bd6      	ldr	r3, [pc, #856]	; (a374 <m2m_wifi_connect_sc+0x3c4>)
    a01c:	4798      	blx	r3
    a01e:	0003      	movs	r3, r0
    a020:	2b40      	cmp	r3, #64	; 0x40
    a022:	d162      	bne.n	a0ea <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    a024:	2396      	movs	r3, #150	; 0x96
    a026:	18fb      	adds	r3, r7, r3
    a028:	2200      	movs	r2, #0
    a02a:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    a02c:	687b      	ldr	r3, [r7, #4]
    a02e:	2290      	movs	r2, #144	; 0x90
    a030:	18ba      	adds	r2, r7, r2
    a032:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    a034:	e054      	b.n	a0e0 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    a036:	2396      	movs	r3, #150	; 0x96
    a038:	18fb      	adds	r3, r7, r3
    a03a:	781b      	ldrb	r3, [r3, #0]
    a03c:	2290      	movs	r2, #144	; 0x90
    a03e:	18ba      	adds	r2, r7, r2
    a040:	6812      	ldr	r2, [r2, #0]
    a042:	18d3      	adds	r3, r2, r3
    a044:	781b      	ldrb	r3, [r3, #0]
    a046:	2b2f      	cmp	r3, #47	; 0x2f
    a048:	d931      	bls.n	a0ae <m2m_wifi_connect_sc+0xfe>
    a04a:	2396      	movs	r3, #150	; 0x96
    a04c:	18fb      	adds	r3, r7, r3
    a04e:	781b      	ldrb	r3, [r3, #0]
    a050:	2290      	movs	r2, #144	; 0x90
    a052:	18ba      	adds	r2, r7, r2
    a054:	6812      	ldr	r2, [r2, #0]
    a056:	18d3      	adds	r3, r2, r3
    a058:	781b      	ldrb	r3, [r3, #0]
    a05a:	2b39      	cmp	r3, #57	; 0x39
    a05c:	d909      	bls.n	a072 <m2m_wifi_connect_sc+0xc2>
    a05e:	2396      	movs	r3, #150	; 0x96
    a060:	18fb      	adds	r3, r7, r3
    a062:	781b      	ldrb	r3, [r3, #0]
    a064:	2290      	movs	r2, #144	; 0x90
    a066:	18ba      	adds	r2, r7, r2
    a068:	6812      	ldr	r2, [r2, #0]
    a06a:	18d3      	adds	r3, r2, r3
    a06c:	781b      	ldrb	r3, [r3, #0]
    a06e:	2b40      	cmp	r3, #64	; 0x40
    a070:	d91d      	bls.n	a0ae <m2m_wifi_connect_sc+0xfe>
    a072:	2396      	movs	r3, #150	; 0x96
    a074:	18fb      	adds	r3, r7, r3
    a076:	781b      	ldrb	r3, [r3, #0]
    a078:	2290      	movs	r2, #144	; 0x90
    a07a:	18ba      	adds	r2, r7, r2
    a07c:	6812      	ldr	r2, [r2, #0]
    a07e:	18d3      	adds	r3, r2, r3
    a080:	781b      	ldrb	r3, [r3, #0]
    a082:	2b46      	cmp	r3, #70	; 0x46
    a084:	d909      	bls.n	a09a <m2m_wifi_connect_sc+0xea>
    a086:	2396      	movs	r3, #150	; 0x96
    a088:	18fb      	adds	r3, r7, r3
    a08a:	781b      	ldrb	r3, [r3, #0]
    a08c:	2290      	movs	r2, #144	; 0x90
    a08e:	18ba      	adds	r2, r7, r2
    a090:	6812      	ldr	r2, [r2, #0]
    a092:	18d3      	adds	r3, r2, r3
    a094:	781b      	ldrb	r3, [r3, #0]
    a096:	2b60      	cmp	r3, #96	; 0x60
    a098:	d909      	bls.n	a0ae <m2m_wifi_connect_sc+0xfe>
    a09a:	2396      	movs	r3, #150	; 0x96
    a09c:	18fb      	adds	r3, r7, r3
    a09e:	781b      	ldrb	r3, [r3, #0]
    a0a0:	2290      	movs	r2, #144	; 0x90
    a0a2:	18ba      	adds	r2, r7, r2
    a0a4:	6812      	ldr	r2, [r2, #0]
    a0a6:	18d3      	adds	r3, r2, r3
    a0a8:	781b      	ldrb	r3, [r3, #0]
    a0aa:	2b66      	cmp	r3, #102	; 0x66
    a0ac:	d911      	bls.n	a0d2 <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    a0ae:	4ab2      	ldr	r2, [pc, #712]	; (a378 <m2m_wifi_connect_sc+0x3c8>)
    a0b0:	49aa      	ldr	r1, [pc, #680]	; (a35c <m2m_wifi_connect_sc+0x3ac>)
    a0b2:	4bab      	ldr	r3, [pc, #684]	; (a360 <m2m_wifi_connect_sc+0x3b0>)
    a0b4:	0018      	movs	r0, r3
    a0b6:	4bab      	ldr	r3, [pc, #684]	; (a364 <m2m_wifi_connect_sc+0x3b4>)
    a0b8:	4798      	blx	r3
    a0ba:	4bb0      	ldr	r3, [pc, #704]	; (a37c <m2m_wifi_connect_sc+0x3cc>)
    a0bc:	0018      	movs	r0, r3
    a0be:	4bab      	ldr	r3, [pc, #684]	; (a36c <m2m_wifi_connect_sc+0x3bc>)
    a0c0:	4798      	blx	r3
    a0c2:	200d      	movs	r0, #13
    a0c4:	4baa      	ldr	r3, [pc, #680]	; (a370 <m2m_wifi_connect_sc+0x3c0>)
    a0c6:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    a0c8:	2397      	movs	r3, #151	; 0x97
    a0ca:	18fb      	adds	r3, r7, r3
    a0cc:	22f4      	movs	r2, #244	; 0xf4
    a0ce:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    a0d0:	e192      	b.n	a3f8 <m2m_wifi_connect_sc+0x448>
				}
				i++;
    a0d2:	2396      	movs	r3, #150	; 0x96
    a0d4:	18fb      	adds	r3, r7, r3
    a0d6:	781a      	ldrb	r2, [r3, #0]
    a0d8:	2396      	movs	r3, #150	; 0x96
    a0da:	18fb      	adds	r3, r7, r3
    a0dc:	3201      	adds	r2, #1
    a0de:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    a0e0:	2396      	movs	r3, #150	; 0x96
    a0e2:	18fb      	adds	r3, r7, r3
    a0e4:	781b      	ldrb	r3, [r3, #0]
    a0e6:	2b3f      	cmp	r3, #63	; 0x3f
    a0e8:	d9a5      	bls.n	a036 <m2m_wifi_connect_sc+0x86>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    a0ea:	230b      	movs	r3, #11
    a0ec:	18fb      	adds	r3, r7, r3
    a0ee:	781b      	ldrb	r3, [r3, #0]
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d004      	beq.n	a0fe <m2m_wifi_connect_sc+0x14e>
    a0f4:	230b      	movs	r3, #11
    a0f6:	18fb      	adds	r3, r7, r3
    a0f8:	781b      	ldrb	r3, [r3, #0]
    a0fa:	2b20      	cmp	r3, #32
    a0fc:	d911      	bls.n	a122 <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    a0fe:	4aa0      	ldr	r2, [pc, #640]	; (a380 <m2m_wifi_connect_sc+0x3d0>)
    a100:	4996      	ldr	r1, [pc, #600]	; (a35c <m2m_wifi_connect_sc+0x3ac>)
    a102:	4b97      	ldr	r3, [pc, #604]	; (a360 <m2m_wifi_connect_sc+0x3b0>)
    a104:	0018      	movs	r0, r3
    a106:	4b97      	ldr	r3, [pc, #604]	; (a364 <m2m_wifi_connect_sc+0x3b4>)
    a108:	4798      	blx	r3
    a10a:	4b9e      	ldr	r3, [pc, #632]	; (a384 <m2m_wifi_connect_sc+0x3d4>)
    a10c:	0018      	movs	r0, r3
    a10e:	4b97      	ldr	r3, [pc, #604]	; (a36c <m2m_wifi_connect_sc+0x3bc>)
    a110:	4798      	blx	r3
    a112:	200d      	movs	r0, #13
    a114:	4b96      	ldr	r3, [pc, #600]	; (a370 <m2m_wifi_connect_sc+0x3c0>)
    a116:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    a118:	2397      	movs	r3, #151	; 0x97
    a11a:	18fb      	adds	r3, r7, r3
    a11c:	22f4      	movs	r2, #244	; 0xf4
    a11e:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    a120:	e16a      	b.n	a3f8 <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    a122:	23a8      	movs	r3, #168	; 0xa8
    a124:	18fb      	adds	r3, r7, r3
    a126:	881b      	ldrh	r3, [r3, #0]
    a128:	2b00      	cmp	r3, #0
    a12a:	d004      	beq.n	a136 <m2m_wifi_connect_sc+0x186>
    a12c:	23a8      	movs	r3, #168	; 0xa8
    a12e:	18fb      	adds	r3, r7, r3
    a130:	881b      	ldrh	r3, [r3, #0]
    a132:	2b0e      	cmp	r3, #14
    a134:	d917      	bls.n	a166 <m2m_wifi_connect_sc+0x1b6>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    a136:	23a8      	movs	r3, #168	; 0xa8
    a138:	18fb      	adds	r3, r7, r3
    a13a:	881b      	ldrh	r3, [r3, #0]
    a13c:	2bff      	cmp	r3, #255	; 0xff
    a13e:	d012      	beq.n	a166 <m2m_wifi_connect_sc+0x1b6>
		{
			M2M_ERR("CH INVALID\n");
    a140:	238d      	movs	r3, #141	; 0x8d
    a142:	009a      	lsls	r2, r3, #2
    a144:	4985      	ldr	r1, [pc, #532]	; (a35c <m2m_wifi_connect_sc+0x3ac>)
    a146:	4b86      	ldr	r3, [pc, #536]	; (a360 <m2m_wifi_connect_sc+0x3b0>)
    a148:	0018      	movs	r0, r3
    a14a:	4b86      	ldr	r3, [pc, #536]	; (a364 <m2m_wifi_connect_sc+0x3b4>)
    a14c:	4798      	blx	r3
    a14e:	4b8e      	ldr	r3, [pc, #568]	; (a388 <m2m_wifi_connect_sc+0x3d8>)
    a150:	0018      	movs	r0, r3
    a152:	4b86      	ldr	r3, [pc, #536]	; (a36c <m2m_wifi_connect_sc+0x3bc>)
    a154:	4798      	blx	r3
    a156:	200d      	movs	r0, #13
    a158:	4b85      	ldr	r3, [pc, #532]	; (a370 <m2m_wifi_connect_sc+0x3c0>)
    a15a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a15c:	2397      	movs	r3, #151	; 0x97
    a15e:	18fb      	adds	r3, r7, r3
    a160:	22f4      	movs	r2, #244	; 0xf4
    a162:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a164:	e148      	b.n	a3f8 <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    a166:	230b      	movs	r3, #11
    a168:	18fb      	adds	r3, r7, r3
    a16a:	781a      	ldrb	r2, [r3, #0]
    a16c:	68f9      	ldr	r1, [r7, #12]
    a16e:	2314      	movs	r3, #20
    a170:	18fb      	adds	r3, r7, r3
    a172:	3346      	adds	r3, #70	; 0x46
    a174:	0018      	movs	r0, r3
    a176:	4b85      	ldr	r3, [pc, #532]	; (a38c <m2m_wifi_connect_sc+0x3dc>)
    a178:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    a17a:	230b      	movs	r3, #11
    a17c:	18fb      	adds	r3, r7, r3
    a17e:	781b      	ldrb	r3, [r3, #0]
    a180:	2214      	movs	r2, #20
    a182:	18ba      	adds	r2, r7, r2
    a184:	2146      	movs	r1, #70	; 0x46
    a186:	18d3      	adds	r3, r2, r3
    a188:	185b      	adds	r3, r3, r1
    a18a:	2200      	movs	r2, #0
    a18c:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    a18e:	2314      	movs	r3, #20
    a190:	18fb      	adds	r3, r7, r3
    a192:	22a8      	movs	r2, #168	; 0xa8
    a194:	18ba      	adds	r2, r7, r2
    a196:	2144      	movs	r1, #68	; 0x44
    a198:	8812      	ldrh	r2, [r2, #0]
    a19a:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    a19c:	23ac      	movs	r3, #172	; 0xac
    a19e:	18fb      	adds	r3, r7, r3
    a1a0:	781b      	ldrb	r3, [r3, #0]
    a1a2:	1e5a      	subs	r2, r3, #1
    a1a4:	4193      	sbcs	r3, r2
    a1a6:	b2db      	uxtb	r3, r3
    a1a8:	0019      	movs	r1, r3
    a1aa:	2314      	movs	r3, #20
    a1ac:	18fb      	adds	r3, r7, r3
    a1ae:	2267      	movs	r2, #103	; 0x67
    a1b0:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    a1b2:	2314      	movs	r3, #20
    a1b4:	18fb      	adds	r3, r7, r3
    a1b6:	228c      	movs	r2, #140	; 0x8c
    a1b8:	18ba      	adds	r2, r7, r2
    a1ba:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    a1bc:	238c      	movs	r3, #140	; 0x8c
    a1be:	18fb      	adds	r3, r7, r3
    a1c0:	681b      	ldr	r3, [r3, #0]
    a1c2:	220a      	movs	r2, #10
    a1c4:	18ba      	adds	r2, r7, r2
    a1c6:	2141      	movs	r1, #65	; 0x41
    a1c8:	7812      	ldrb	r2, [r2, #0]
    a1ca:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    a1cc:	230a      	movs	r3, #10
    a1ce:	18fb      	adds	r3, r7, r3
    a1d0:	781b      	ldrb	r3, [r3, #0]
    a1d2:	2b03      	cmp	r3, #3
    a1d4:	d000      	beq.n	a1d8 <m2m_wifi_connect_sc+0x228>
    a1d6:	e07a      	b.n	a2ce <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    a1d8:	687b      	ldr	r3, [r7, #4]
    a1da:	2288      	movs	r2, #136	; 0x88
    a1dc:	18ba      	adds	r2, r7, r2
    a1de:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    a1e0:	238c      	movs	r3, #140	; 0x8c
    a1e2:	18fb      	adds	r3, r7, r3
    a1e4:	681b      	ldr	r3, [r3, #0]
    a1e6:	2284      	movs	r2, #132	; 0x84
    a1e8:	18ba      	adds	r2, r7, r2
    a1ea:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    a1ec:	2388      	movs	r3, #136	; 0x88
    a1ee:	18fb      	adds	r3, r7, r3
    a1f0:	681b      	ldr	r3, [r3, #0]
    a1f2:	781b      	ldrb	r3, [r3, #0]
    a1f4:	3b01      	subs	r3, #1
    a1f6:	b2da      	uxtb	r2, r3
    a1f8:	2384      	movs	r3, #132	; 0x84
    a1fa:	18fb      	adds	r3, r7, r3
    a1fc:	681b      	ldr	r3, [r3, #0]
    a1fe:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    a200:	2384      	movs	r3, #132	; 0x84
    a202:	18fb      	adds	r3, r7, r3
    a204:	681b      	ldr	r3, [r3, #0]
    a206:	781b      	ldrb	r3, [r3, #0]
    a208:	2b03      	cmp	r3, #3
    a20a:	d917      	bls.n	a23c <m2m_wifi_connect_sc+0x28c>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    a20c:	4a60      	ldr	r2, [pc, #384]	; (a390 <m2m_wifi_connect_sc+0x3e0>)
    a20e:	4953      	ldr	r1, [pc, #332]	; (a35c <m2m_wifi_connect_sc+0x3ac>)
    a210:	4b53      	ldr	r3, [pc, #332]	; (a360 <m2m_wifi_connect_sc+0x3b0>)
    a212:	0018      	movs	r0, r3
    a214:	4b53      	ldr	r3, [pc, #332]	; (a364 <m2m_wifi_connect_sc+0x3b4>)
    a216:	4798      	blx	r3
    a218:	2384      	movs	r3, #132	; 0x84
    a21a:	18fb      	adds	r3, r7, r3
    a21c:	681b      	ldr	r3, [r3, #0]
    a21e:	781b      	ldrb	r3, [r3, #0]
    a220:	001a      	movs	r2, r3
    a222:	4b5c      	ldr	r3, [pc, #368]	; (a394 <m2m_wifi_connect_sc+0x3e4>)
    a224:	0011      	movs	r1, r2
    a226:	0018      	movs	r0, r3
    a228:	4b4e      	ldr	r3, [pc, #312]	; (a364 <m2m_wifi_connect_sc+0x3b4>)
    a22a:	4798      	blx	r3
    a22c:	200d      	movs	r0, #13
    a22e:	4b50      	ldr	r3, [pc, #320]	; (a370 <m2m_wifi_connect_sc+0x3c0>)
    a230:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a232:	2397      	movs	r3, #151	; 0x97
    a234:	18fb      	adds	r3, r7, r3
    a236:	22f4      	movs	r2, #244	; 0xf4
    a238:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a23a:	e0dd      	b.n	a3f8 <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    a23c:	2388      	movs	r3, #136	; 0x88
    a23e:	18fb      	adds	r3, r7, r3
    a240:	681b      	ldr	r3, [r3, #0]
    a242:	785b      	ldrb	r3, [r3, #1]
    a244:	3b01      	subs	r3, #1
    a246:	b2da      	uxtb	r2, r3
    a248:	2384      	movs	r3, #132	; 0x84
    a24a:	18fb      	adds	r3, r7, r3
    a24c:	681b      	ldr	r3, [r3, #0]
    a24e:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    a250:	2384      	movs	r3, #132	; 0x84
    a252:	18fb      	adds	r3, r7, r3
    a254:	681b      	ldr	r3, [r3, #0]
    a256:	785b      	ldrb	r3, [r3, #1]
    a258:	2b0a      	cmp	r3, #10
    a25a:	d01d      	beq.n	a298 <m2m_wifi_connect_sc+0x2e8>
    a25c:	2384      	movs	r3, #132	; 0x84
    a25e:	18fb      	adds	r3, r7, r3
    a260:	681b      	ldr	r3, [r3, #0]
    a262:	785b      	ldrb	r3, [r3, #1]
    a264:	2b1a      	cmp	r3, #26
    a266:	d017      	beq.n	a298 <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    a268:	4a4b      	ldr	r2, [pc, #300]	; (a398 <m2m_wifi_connect_sc+0x3e8>)
    a26a:	493c      	ldr	r1, [pc, #240]	; (a35c <m2m_wifi_connect_sc+0x3ac>)
    a26c:	4b3c      	ldr	r3, [pc, #240]	; (a360 <m2m_wifi_connect_sc+0x3b0>)
    a26e:	0018      	movs	r0, r3
    a270:	4b3c      	ldr	r3, [pc, #240]	; (a364 <m2m_wifi_connect_sc+0x3b4>)
    a272:	4798      	blx	r3
    a274:	2384      	movs	r3, #132	; 0x84
    a276:	18fb      	adds	r3, r7, r3
    a278:	681b      	ldr	r3, [r3, #0]
    a27a:	785b      	ldrb	r3, [r3, #1]
    a27c:	001a      	movs	r2, r3
    a27e:	4b47      	ldr	r3, [pc, #284]	; (a39c <m2m_wifi_connect_sc+0x3ec>)
    a280:	0011      	movs	r1, r2
    a282:	0018      	movs	r0, r3
    a284:	4b37      	ldr	r3, [pc, #220]	; (a364 <m2m_wifi_connect_sc+0x3b4>)
    a286:	4798      	blx	r3
    a288:	200d      	movs	r0, #13
    a28a:	4b39      	ldr	r3, [pc, #228]	; (a370 <m2m_wifi_connect_sc+0x3c0>)
    a28c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a28e:	2397      	movs	r3, #151	; 0x97
    a290:	18fb      	adds	r3, r7, r3
    a292:	22f4      	movs	r2, #244	; 0xf4
    a294:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a296:	e0af      	b.n	a3f8 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    a298:	2384      	movs	r3, #132	; 0x84
    a29a:	18fb      	adds	r3, r7, r3
    a29c:	681b      	ldr	r3, [r3, #0]
    a29e:	1c98      	adds	r0, r3, #2
    a2a0:	2388      	movs	r3, #136	; 0x88
    a2a2:	18fb      	adds	r3, r7, r3
    a2a4:	681b      	ldr	r3, [r3, #0]
    a2a6:	1c99      	adds	r1, r3, #2
    a2a8:	2388      	movs	r3, #136	; 0x88
    a2aa:	18fb      	adds	r3, r7, r3
    a2ac:	681b      	ldr	r3, [r3, #0]
    a2ae:	785b      	ldrb	r3, [r3, #1]
    a2b0:	001a      	movs	r2, r3
    a2b2:	4b36      	ldr	r3, [pc, #216]	; (a38c <m2m_wifi_connect_sc+0x3dc>)
    a2b4:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    a2b6:	2388      	movs	r3, #136	; 0x88
    a2b8:	18fb      	adds	r3, r7, r3
    a2ba:	681b      	ldr	r3, [r3, #0]
    a2bc:	785b      	ldrb	r3, [r3, #1]
    a2be:	001a      	movs	r2, r3
    a2c0:	2384      	movs	r3, #132	; 0x84
    a2c2:	18fb      	adds	r3, r7, r3
    a2c4:	681b      	ldr	r3, [r3, #0]
    a2c6:	189b      	adds	r3, r3, r2
    a2c8:	2200      	movs	r2, #0
    a2ca:	709a      	strb	r2, [r3, #2]
    a2cc:	e083      	b.n	a3d6 <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    a2ce:	230a      	movs	r3, #10
    a2d0:	18fb      	adds	r3, r7, r3
    a2d2:	781b      	ldrb	r3, [r3, #0]
    a2d4:	2b02      	cmp	r3, #2
    a2d6:	d130      	bne.n	a33a <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    a2d8:	2382      	movs	r3, #130	; 0x82
    a2da:	18fc      	adds	r4, r7, r3
    a2dc:	687b      	ldr	r3, [r7, #4]
    a2de:	0018      	movs	r0, r3
    a2e0:	4b24      	ldr	r3, [pc, #144]	; (a374 <m2m_wifi_connect_sc+0x3c4>)
    a2e2:	4798      	blx	r3
    a2e4:	0003      	movs	r3, r0
    a2e6:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    a2e8:	2382      	movs	r3, #130	; 0x82
    a2ea:	18fb      	adds	r3, r7, r3
    a2ec:	881b      	ldrh	r3, [r3, #0]
    a2ee:	2b00      	cmp	r3, #0
    a2f0:	d004      	beq.n	a2fc <m2m_wifi_connect_sc+0x34c>
    a2f2:	2382      	movs	r3, #130	; 0x82
    a2f4:	18fb      	adds	r3, r7, r3
    a2f6:	881b      	ldrh	r3, [r3, #0]
    a2f8:	2b40      	cmp	r3, #64	; 0x40
    a2fa:	d911      	bls.n	a320 <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    a2fc:	4a28      	ldr	r2, [pc, #160]	; (a3a0 <m2m_wifi_connect_sc+0x3f0>)
    a2fe:	4917      	ldr	r1, [pc, #92]	; (a35c <m2m_wifi_connect_sc+0x3ac>)
    a300:	4b17      	ldr	r3, [pc, #92]	; (a360 <m2m_wifi_connect_sc+0x3b0>)
    a302:	0018      	movs	r0, r3
    a304:	4b17      	ldr	r3, [pc, #92]	; (a364 <m2m_wifi_connect_sc+0x3b4>)
    a306:	4798      	blx	r3
    a308:	4b26      	ldr	r3, [pc, #152]	; (a3a4 <m2m_wifi_connect_sc+0x3f4>)
    a30a:	0018      	movs	r0, r3
    a30c:	4b17      	ldr	r3, [pc, #92]	; (a36c <m2m_wifi_connect_sc+0x3bc>)
    a30e:	4798      	blx	r3
    a310:	200d      	movs	r0, #13
    a312:	4b17      	ldr	r3, [pc, #92]	; (a370 <m2m_wifi_connect_sc+0x3c0>)
    a314:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a316:	2397      	movs	r3, #151	; 0x97
    a318:	18fb      	adds	r3, r7, r3
    a31a:	22f4      	movs	r2, #244	; 0xf4
    a31c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a31e:	e06b      	b.n	a3f8 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    a320:	238c      	movs	r3, #140	; 0x8c
    a322:	18fb      	adds	r3, r7, r3
    a324:	6818      	ldr	r0, [r3, #0]
    a326:	2382      	movs	r3, #130	; 0x82
    a328:	18fb      	adds	r3, r7, r3
    a32a:	881b      	ldrh	r3, [r3, #0]
    a32c:	3301      	adds	r3, #1
    a32e:	001a      	movs	r2, r3
    a330:	687b      	ldr	r3, [r7, #4]
    a332:	0019      	movs	r1, r3
    a334:	4b15      	ldr	r3, [pc, #84]	; (a38c <m2m_wifi_connect_sc+0x3dc>)
    a336:	4798      	blx	r3
    a338:	e04d      	b.n	a3d6 <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    a33a:	230a      	movs	r3, #10
    a33c:	18fb      	adds	r3, r7, r3
    a33e:	781b      	ldrb	r3, [r3, #0]
    a340:	2b04      	cmp	r3, #4
    a342:	d131      	bne.n	a3a8 <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    a344:	238c      	movs	r3, #140	; 0x8c
    a346:	18fb      	adds	r3, r7, r3
    a348:	681b      	ldr	r3, [r3, #0]
    a34a:	6879      	ldr	r1, [r7, #4]
    a34c:	223e      	movs	r2, #62	; 0x3e
    a34e:	0018      	movs	r0, r3
    a350:	4b0e      	ldr	r3, [pc, #56]	; (a38c <m2m_wifi_connect_sc+0x3dc>)
    a352:	4798      	blx	r3
    a354:	e03f      	b.n	a3d6 <m2m_wifi_connect_sc+0x426>
    a356:	46c0      	nop			; (mov r8, r8)
    a358:	00000215 	.word	0x00000215
    a35c:	00018a40 	.word	0x00018a40
    a360:	0001869c 	.word	0x0001869c
    a364:	00016d69 	.word	0x00016d69
    a368:	000188d0 	.word	0x000188d0
    a36c:	00016e85 	.word	0x00016e85
    a370:	00016d9d 	.word	0x00016d9d
    a374:	00008c63 	.word	0x00008c63
    a378:	00000221 	.word	0x00000221
    a37c:	000188e4 	.word	0x000188e4
    a380:	0000022b 	.word	0x0000022b
    a384:	000188f0 	.word	0x000188f0
    a388:	00018904 	.word	0x00018904
    a38c:	00008be9 	.word	0x00008be9
    a390:	0000024b 	.word	0x0000024b
    a394:	00018910 	.word	0x00018910
    a398:	00000252 	.word	0x00000252
    a39c:	0001892c 	.word	0x0001892c
    a3a0:	00000261 	.word	0x00000261
    a3a4:	00018948 	.word	0x00018948
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    a3a8:	230a      	movs	r3, #10
    a3aa:	18fb      	adds	r3, r7, r3
    a3ac:	781b      	ldrb	r3, [r3, #0]
    a3ae:	2b01      	cmp	r3, #1
    a3b0:	d011      	beq.n	a3d6 <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    a3b2:	4a15      	ldr	r2, [pc, #84]	; (a408 <m2m_wifi_connect_sc+0x458>)
    a3b4:	4915      	ldr	r1, [pc, #84]	; (a40c <m2m_wifi_connect_sc+0x45c>)
    a3b6:	4b16      	ldr	r3, [pc, #88]	; (a410 <m2m_wifi_connect_sc+0x460>)
    a3b8:	0018      	movs	r0, r3
    a3ba:	4b16      	ldr	r3, [pc, #88]	; (a414 <m2m_wifi_connect_sc+0x464>)
    a3bc:	4798      	blx	r3
    a3be:	4b16      	ldr	r3, [pc, #88]	; (a418 <m2m_wifi_connect_sc+0x468>)
    a3c0:	0018      	movs	r0, r3
    a3c2:	4b16      	ldr	r3, [pc, #88]	; (a41c <m2m_wifi_connect_sc+0x46c>)
    a3c4:	4798      	blx	r3
    a3c6:	200d      	movs	r0, #13
    a3c8:	4b15      	ldr	r3, [pc, #84]	; (a420 <m2m_wifi_connect_sc+0x470>)
    a3ca:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    a3cc:	2397      	movs	r3, #151	; 0x97
    a3ce:	18fb      	adds	r3, r7, r3
    a3d0:	22f4      	movs	r2, #244	; 0xf4
    a3d2:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    a3d4:	e010      	b.n	a3f8 <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    a3d6:	2397      	movs	r3, #151	; 0x97
    a3d8:	18fc      	adds	r4, r7, r3
    a3da:	2314      	movs	r3, #20
    a3dc:	18fa      	adds	r2, r7, r3
    a3de:	2300      	movs	r3, #0
    a3e0:	9302      	str	r3, [sp, #8]
    a3e2:	2300      	movs	r3, #0
    a3e4:	9301      	str	r3, [sp, #4]
    a3e6:	2300      	movs	r3, #0
    a3e8:	9300      	str	r3, [sp, #0]
    a3ea:	236c      	movs	r3, #108	; 0x6c
    a3ec:	2128      	movs	r1, #40	; 0x28
    a3ee:	2001      	movs	r0, #1
    a3f0:	4d0c      	ldr	r5, [pc, #48]	; (a424 <m2m_wifi_connect_sc+0x474>)
    a3f2:	47a8      	blx	r5
    a3f4:	0003      	movs	r3, r0
    a3f6:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    a3f8:	2397      	movs	r3, #151	; 0x97
    a3fa:	18fb      	adds	r3, r7, r3
    a3fc:	781b      	ldrb	r3, [r3, #0]
    a3fe:	b25b      	sxtb	r3, r3
}
    a400:	0018      	movs	r0, r3
    a402:	46bd      	mov	sp, r7
    a404:	b026      	add	sp, #152	; 0x98
    a406:	bdb0      	pop	{r4, r5, r7, pc}
    a408:	00000271 	.word	0x00000271
    a40c:	00018a40 	.word	0x00018a40
    a410:	0001869c 	.word	0x0001869c
    a414:	00016d69 	.word	0x00016d69
    a418:	00018964 	.word	0x00018964
    a41c:	00016e85 	.word	0x00016e85
    a420:	00016d9d 	.word	0x00016d9d
    a424:	00008e85 	.word	0x00008e85

0000a428 <m2m_wifi_disconnect>:

sint8 m2m_wifi_disconnect(void)
{
    a428:	b590      	push	{r4, r7, lr}
    a42a:	b085      	sub	sp, #20
    a42c:	af04      	add	r7, sp, #16
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
    a42e:	2300      	movs	r3, #0
    a430:	9302      	str	r3, [sp, #8]
    a432:	2300      	movs	r3, #0
    a434:	9301      	str	r3, [sp, #4]
    a436:	2300      	movs	r3, #0
    a438:	9300      	str	r3, [sp, #0]
    a43a:	2300      	movs	r3, #0
    a43c:	2200      	movs	r2, #0
    a43e:	212b      	movs	r1, #43	; 0x2b
    a440:	2001      	movs	r0, #1
    a442:	4c03      	ldr	r4, [pc, #12]	; (a450 <m2m_wifi_disconnect+0x28>)
    a444:	47a0      	blx	r4
    a446:	0003      	movs	r3, r0
}
    a448:	0018      	movs	r0, r3
    a44a:	46bd      	mov	sp, r7
    a44c:	b001      	add	sp, #4
    a44e:	bd90      	pop	{r4, r7, pc}
    a450:	00008e85 	.word	0x00008e85

0000a454 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    a454:	b580      	push	{r7, lr}
    a456:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    a458:	2300      	movs	r3, #0
}
    a45a:	0018      	movs	r0, r3
    a45c:	46bd      	mov	sp, r7
    a45e:	bd80      	pop	{r7, pc}

0000a460 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    a460:	b590      	push	{r4, r7, lr}
    a462:	b087      	sub	sp, #28
    a464:	af00      	add	r7, sp, #0
    a466:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    a468:	2317      	movs	r3, #23
    a46a:	18fb      	adds	r3, r7, r3
    a46c:	2200      	movs	r2, #0
    a46e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    a470:	687b      	ldr	r3, [r7, #4]
    a472:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    a474:	693b      	ldr	r3, [r7, #16]
    a476:	2280      	movs	r2, #128	; 0x80
    a478:	0052      	lsls	r2, r2, #1
    a47a:	4313      	orrs	r3, r2
    a47c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    a47e:	693a      	ldr	r2, [r7, #16]
    a480:	23a5      	movs	r3, #165	; 0xa5
    a482:	015b      	lsls	r3, r3, #5
    a484:	0011      	movs	r1, r2
    a486:	0018      	movs	r0, r3
    a488:	4b12      	ldr	r3, [pc, #72]	; (a4d4 <chip_apply_conf+0x74>)
    a48a:	4798      	blx	r3
		if(val32 != 0) {		
    a48c:	693b      	ldr	r3, [r7, #16]
    a48e:	2b00      	cmp	r3, #0
    a490:	d018      	beq.n	a4c4 <chip_apply_conf+0x64>
			uint32 reg = 0;
    a492:	2300      	movs	r3, #0
    a494:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    a496:	2317      	movs	r3, #23
    a498:	18fc      	adds	r4, r7, r3
    a49a:	230c      	movs	r3, #12
    a49c:	18fa      	adds	r2, r7, r3
    a49e:	23a5      	movs	r3, #165	; 0xa5
    a4a0:	015b      	lsls	r3, r3, #5
    a4a2:	0011      	movs	r1, r2
    a4a4:	0018      	movs	r0, r3
    a4a6:	4b0c      	ldr	r3, [pc, #48]	; (a4d8 <chip_apply_conf+0x78>)
    a4a8:	4798      	blx	r3
    a4aa:	0003      	movs	r3, r0
    a4ac:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    a4ae:	2317      	movs	r3, #23
    a4b0:	18fb      	adds	r3, r7, r3
    a4b2:	781b      	ldrb	r3, [r3, #0]
    a4b4:	b25b      	sxtb	r3, r3
    a4b6:	2b00      	cmp	r3, #0
    a4b8:	d1e1      	bne.n	a47e <chip_apply_conf+0x1e>
				if(reg == val32)
    a4ba:	68fa      	ldr	r2, [r7, #12]
    a4bc:	693b      	ldr	r3, [r7, #16]
    a4be:	429a      	cmp	r2, r3
    a4c0:	d002      	beq.n	a4c8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    a4c2:	e7dc      	b.n	a47e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    a4c4:	46c0      	nop			; (mov r8, r8)
    a4c6:	e000      	b.n	a4ca <chip_apply_conf+0x6a>
					break;
    a4c8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    a4ca:	2300      	movs	r3, #0
}
    a4cc:	0018      	movs	r0, r3
    a4ce:	46bd      	mov	sp, r7
    a4d0:	b007      	add	sp, #28
    a4d2:	bd90      	pop	{r4, r7, pc}
    a4d4:	0000acb1 	.word	0x0000acb1
    a4d8:	0000ac8d 	.word	0x0000ac8d

0000a4dc <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    a4dc:	b590      	push	{r4, r7, lr}
    a4de:	b083      	sub	sp, #12
    a4e0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    a4e2:	2300      	movs	r3, #0
    a4e4:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    a4e6:	1dfb      	adds	r3, r7, #7
    a4e8:	2200      	movs	r2, #0
    a4ea:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    a4ec:	1dfc      	adds	r4, r7, #7
    a4ee:	003b      	movs	r3, r7
    a4f0:	4a24      	ldr	r2, [pc, #144]	; (a584 <enable_interrupts+0xa8>)
    a4f2:	0019      	movs	r1, r3
    a4f4:	0010      	movs	r0, r2
    a4f6:	4b24      	ldr	r3, [pc, #144]	; (a588 <enable_interrupts+0xac>)
    a4f8:	4798      	blx	r3
    a4fa:	0003      	movs	r3, r0
    a4fc:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    a4fe:	1dfb      	adds	r3, r7, #7
    a500:	781b      	ldrb	r3, [r3, #0]
    a502:	b25b      	sxtb	r3, r3
    a504:	2b00      	cmp	r3, #0
    a506:	d131      	bne.n	a56c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    a508:	683b      	ldr	r3, [r7, #0]
    a50a:	2280      	movs	r2, #128	; 0x80
    a50c:	0052      	lsls	r2, r2, #1
    a50e:	4313      	orrs	r3, r2
    a510:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    a512:	683b      	ldr	r3, [r7, #0]
    a514:	1dfc      	adds	r4, r7, #7
    a516:	4a1b      	ldr	r2, [pc, #108]	; (a584 <enable_interrupts+0xa8>)
    a518:	0019      	movs	r1, r3
    a51a:	0010      	movs	r0, r2
    a51c:	4b1b      	ldr	r3, [pc, #108]	; (a58c <enable_interrupts+0xb0>)
    a51e:	4798      	blx	r3
    a520:	0003      	movs	r3, r0
    a522:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    a524:	1dfb      	adds	r3, r7, #7
    a526:	781b      	ldrb	r3, [r3, #0]
    a528:	b25b      	sxtb	r3, r3
    a52a:	2b00      	cmp	r3, #0
    a52c:	d120      	bne.n	a570 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    a52e:	1dfc      	adds	r4, r7, #7
    a530:	003a      	movs	r2, r7
    a532:	23d0      	movs	r3, #208	; 0xd0
    a534:	015b      	lsls	r3, r3, #5
    a536:	0011      	movs	r1, r2
    a538:	0018      	movs	r0, r3
    a53a:	4b13      	ldr	r3, [pc, #76]	; (a588 <enable_interrupts+0xac>)
    a53c:	4798      	blx	r3
    a53e:	0003      	movs	r3, r0
    a540:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    a542:	1dfb      	adds	r3, r7, #7
    a544:	781b      	ldrb	r3, [r3, #0]
    a546:	b25b      	sxtb	r3, r3
    a548:	2b00      	cmp	r3, #0
    a54a:	d113      	bne.n	a574 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    a54c:	683b      	ldr	r3, [r7, #0]
    a54e:	2280      	movs	r2, #128	; 0x80
    a550:	0252      	lsls	r2, r2, #9
    a552:	4313      	orrs	r3, r2
    a554:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    a556:	683a      	ldr	r2, [r7, #0]
    a558:	1dfc      	adds	r4, r7, #7
    a55a:	23d0      	movs	r3, #208	; 0xd0
    a55c:	015b      	lsls	r3, r3, #5
    a55e:	0011      	movs	r1, r2
    a560:	0018      	movs	r0, r3
    a562:	4b0a      	ldr	r3, [pc, #40]	; (a58c <enable_interrupts+0xb0>)
    a564:	4798      	blx	r3
    a566:	0003      	movs	r3, r0
    a568:	7023      	strb	r3, [r4, #0]
    a56a:	e004      	b.n	a576 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    a56c:	46c0      	nop			; (mov r8, r8)
    a56e:	e002      	b.n	a576 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    a570:	46c0      	nop			; (mov r8, r8)
    a572:	e000      	b.n	a576 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    a574:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    a576:	1dfb      	adds	r3, r7, #7
    a578:	781b      	ldrb	r3, [r3, #0]
    a57a:	b25b      	sxtb	r3, r3
}
    a57c:	0018      	movs	r0, r3
    a57e:	46bd      	mov	sp, r7
    a580:	b003      	add	sp, #12
    a582:	bd90      	pop	{r4, r7, pc}
    a584:	00001408 	.word	0x00001408
    a588:	0000ac8d 	.word	0x0000ac8d
    a58c:	0000acb1 	.word	0x0000acb1

0000a590 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    a590:	b580      	push	{r7, lr}
    a592:	b082      	sub	sp, #8
    a594:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    a596:	4b32      	ldr	r3, [pc, #200]	; (a660 <nmi_get_chipid+0xd0>)
    a598:	681b      	ldr	r3, [r3, #0]
    a59a:	2b00      	cmp	r3, #0
    a59c:	d159      	bne.n	a652 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    a59e:	4a30      	ldr	r2, [pc, #192]	; (a660 <nmi_get_chipid+0xd0>)
    a5a0:	2380      	movs	r3, #128	; 0x80
    a5a2:	015b      	lsls	r3, r3, #5
    a5a4:	0011      	movs	r1, r2
    a5a6:	0018      	movs	r0, r3
    a5a8:	4b2e      	ldr	r3, [pc, #184]	; (a664 <nmi_get_chipid+0xd4>)
    a5aa:	4798      	blx	r3
    a5ac:	1e03      	subs	r3, r0, #0
    a5ae:	d004      	beq.n	a5ba <nmi_get_chipid+0x2a>
			chipid = 0;
    a5b0:	4b2b      	ldr	r3, [pc, #172]	; (a660 <nmi_get_chipid+0xd0>)
    a5b2:	2200      	movs	r2, #0
    a5b4:	601a      	str	r2, [r3, #0]
			return 0;
    a5b6:	2300      	movs	r3, #0
    a5b8:	e04d      	b.n	a656 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    a5ba:	1d3b      	adds	r3, r7, #4
    a5bc:	4a2a      	ldr	r2, [pc, #168]	; (a668 <nmi_get_chipid+0xd8>)
    a5be:	0019      	movs	r1, r3
    a5c0:	0010      	movs	r0, r2
    a5c2:	4b28      	ldr	r3, [pc, #160]	; (a664 <nmi_get_chipid+0xd4>)
    a5c4:	4798      	blx	r3
    a5c6:	1e03      	subs	r3, r0, #0
    a5c8:	d004      	beq.n	a5d4 <nmi_get_chipid+0x44>
			chipid = 0;
    a5ca:	4b25      	ldr	r3, [pc, #148]	; (a660 <nmi_get_chipid+0xd0>)
    a5cc:	2200      	movs	r2, #0
    a5ce:	601a      	str	r2, [r3, #0]
			return 0;
    a5d0:	2300      	movs	r3, #0
    a5d2:	e040      	b.n	a656 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    a5d4:	4b22      	ldr	r3, [pc, #136]	; (a660 <nmi_get_chipid+0xd0>)
    a5d6:	681b      	ldr	r3, [r3, #0]
    a5d8:	4a24      	ldr	r2, [pc, #144]	; (a66c <nmi_get_chipid+0xdc>)
    a5da:	4293      	cmp	r3, r2
    a5dc:	d106      	bne.n	a5ec <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    a5de:	687b      	ldr	r3, [r7, #4]
    a5e0:	2b01      	cmp	r3, #1
    a5e2:	d029      	beq.n	a638 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    a5e4:	4b1e      	ldr	r3, [pc, #120]	; (a660 <nmi_get_chipid+0xd0>)
    a5e6:	4a22      	ldr	r2, [pc, #136]	; (a670 <nmi_get_chipid+0xe0>)
    a5e8:	601a      	str	r2, [r3, #0]
    a5ea:	e025      	b.n	a638 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    a5ec:	4b1c      	ldr	r3, [pc, #112]	; (a660 <nmi_get_chipid+0xd0>)
    a5ee:	681b      	ldr	r3, [r3, #0]
    a5f0:	4a20      	ldr	r2, [pc, #128]	; (a674 <nmi_get_chipid+0xe4>)
    a5f2:	4293      	cmp	r3, r2
    a5f4:	d10d      	bne.n	a612 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    a5f6:	687b      	ldr	r3, [r7, #4]
    a5f8:	2b03      	cmp	r3, #3
    a5fa:	d01d      	beq.n	a638 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    a5fc:	687b      	ldr	r3, [r7, #4]
    a5fe:	2b04      	cmp	r3, #4
    a600:	d103      	bne.n	a60a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    a602:	4b17      	ldr	r3, [pc, #92]	; (a660 <nmi_get_chipid+0xd0>)
    a604:	4a1c      	ldr	r2, [pc, #112]	; (a678 <nmi_get_chipid+0xe8>)
    a606:	601a      	str	r2, [r3, #0]
    a608:	e016      	b.n	a638 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    a60a:	4b15      	ldr	r3, [pc, #84]	; (a660 <nmi_get_chipid+0xd0>)
    a60c:	4a1b      	ldr	r2, [pc, #108]	; (a67c <nmi_get_chipid+0xec>)
    a60e:	601a      	str	r2, [r3, #0]
    a610:	e012      	b.n	a638 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    a612:	4b13      	ldr	r3, [pc, #76]	; (a660 <nmi_get_chipid+0xd0>)
    a614:	681b      	ldr	r3, [r3, #0]
    a616:	4a1a      	ldr	r2, [pc, #104]	; (a680 <nmi_get_chipid+0xf0>)
    a618:	4293      	cmp	r3, r2
    a61a:	d10d      	bne.n	a638 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    a61c:	4a10      	ldr	r2, [pc, #64]	; (a660 <nmi_get_chipid+0xd0>)
    a61e:	23ec      	movs	r3, #236	; 0xec
    a620:	039b      	lsls	r3, r3, #14
    a622:	0011      	movs	r1, r2
    a624:	0018      	movs	r0, r3
    a626:	4b0f      	ldr	r3, [pc, #60]	; (a664 <nmi_get_chipid+0xd4>)
    a628:	4798      	blx	r3
    a62a:	1e03      	subs	r3, r0, #0
    a62c:	d004      	beq.n	a638 <nmi_get_chipid+0xa8>
			chipid = 0;
    a62e:	4b0c      	ldr	r3, [pc, #48]	; (a660 <nmi_get_chipid+0xd0>)
    a630:	2200      	movs	r2, #0
    a632:	601a      	str	r2, [r3, #0]
			return 0;
    a634:	2300      	movs	r3, #0
    a636:	e00e      	b.n	a656 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    a638:	4b09      	ldr	r3, [pc, #36]	; (a660 <nmi_get_chipid+0xd0>)
    a63a:	681b      	ldr	r3, [r3, #0]
    a63c:	4a11      	ldr	r2, [pc, #68]	; (a684 <nmi_get_chipid+0xf4>)
    a63e:	401a      	ands	r2, r3
    a640:	4b07      	ldr	r3, [pc, #28]	; (a660 <nmi_get_chipid+0xd0>)
    a642:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    a644:	4b06      	ldr	r3, [pc, #24]	; (a660 <nmi_get_chipid+0xd0>)
    a646:	681b      	ldr	r3, [r3, #0]
    a648:	22a0      	movs	r2, #160	; 0xa0
    a64a:	02d2      	lsls	r2, r2, #11
    a64c:	431a      	orrs	r2, r3
    a64e:	4b04      	ldr	r3, [pc, #16]	; (a660 <nmi_get_chipid+0xd0>)
    a650:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    a652:	4b03      	ldr	r3, [pc, #12]	; (a660 <nmi_get_chipid+0xd0>)
    a654:	681b      	ldr	r3, [r3, #0]
}
    a656:	0018      	movs	r0, r3
    a658:	46bd      	mov	sp, r7
    a65a:	b002      	add	sp, #8
    a65c:	bd80      	pop	{r7, pc}
    a65e:	46c0      	nop			; (mov r8, r8)
    a660:	20000214 	.word	0x20000214
    a664:	0000ac8d 	.word	0x0000ac8d
    a668:	000013f4 	.word	0x000013f4
    a66c:	001002a0 	.word	0x001002a0
    a670:	001002a1 	.word	0x001002a1
    a674:	001002b0 	.word	0x001002b0
    a678:	001002b1 	.word	0x001002b1
    a67c:	001002b2 	.word	0x001002b2
    a680:	001000f0 	.word	0x001000f0
    a684:	fff0ffff 	.word	0xfff0ffff

0000a688 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    a688:	b590      	push	{r4, r7, lr}
    a68a:	b083      	sub	sp, #12
    a68c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    a68e:	1dfb      	adds	r3, r7, #7
    a690:	2200      	movs	r2, #0
    a692:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    a694:	1dfc      	adds	r4, r7, #7
    a696:	003b      	movs	r3, r7
    a698:	0019      	movs	r1, r3
    a69a:	2010      	movs	r0, #16
    a69c:	4b2e      	ldr	r3, [pc, #184]	; (a758 <chip_sleep+0xd0>)
    a69e:	4798      	blx	r3
    a6a0:	0003      	movs	r3, r0
    a6a2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    a6a4:	1dfb      	adds	r3, r7, #7
    a6a6:	781b      	ldrb	r3, [r3, #0]
    a6a8:	b25b      	sxtb	r3, r3
    a6aa:	2b00      	cmp	r3, #0
    a6ac:	d145      	bne.n	a73a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    a6ae:	683b      	ldr	r3, [r7, #0]
    a6b0:	2201      	movs	r2, #1
    a6b2:	4013      	ands	r3, r2
    a6b4:	d000      	beq.n	a6b8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    a6b6:	e7ed      	b.n	a694 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    a6b8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    a6ba:	1dfc      	adds	r4, r7, #7
    a6bc:	003b      	movs	r3, r7
    a6be:	0019      	movs	r1, r3
    a6c0:	2001      	movs	r0, #1
    a6c2:	4b25      	ldr	r3, [pc, #148]	; (a758 <chip_sleep+0xd0>)
    a6c4:	4798      	blx	r3
    a6c6:	0003      	movs	r3, r0
    a6c8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    a6ca:	1dfb      	adds	r3, r7, #7
    a6cc:	781b      	ldrb	r3, [r3, #0]
    a6ce:	b25b      	sxtb	r3, r3
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d134      	bne.n	a73e <chip_sleep+0xb6>
	if(reg & NBIT1)
    a6d4:	683b      	ldr	r3, [r7, #0]
    a6d6:	2202      	movs	r2, #2
    a6d8:	4013      	ands	r3, r2
    a6da:	d010      	beq.n	a6fe <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    a6dc:	683b      	ldr	r3, [r7, #0]
    a6de:	2202      	movs	r2, #2
    a6e0:	4393      	bics	r3, r2
    a6e2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    a6e4:	683b      	ldr	r3, [r7, #0]
    a6e6:	1dfc      	adds	r4, r7, #7
    a6e8:	0019      	movs	r1, r3
    a6ea:	2001      	movs	r0, #1
    a6ec:	4b1b      	ldr	r3, [pc, #108]	; (a75c <chip_sleep+0xd4>)
    a6ee:	4798      	blx	r3
    a6f0:	0003      	movs	r3, r0
    a6f2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    a6f4:	1dfb      	adds	r3, r7, #7
    a6f6:	781b      	ldrb	r3, [r3, #0]
    a6f8:	b25b      	sxtb	r3, r3
    a6fa:	2b00      	cmp	r3, #0
    a6fc:	d121      	bne.n	a742 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    a6fe:	1dfc      	adds	r4, r7, #7
    a700:	003b      	movs	r3, r7
    a702:	0019      	movs	r1, r3
    a704:	200b      	movs	r0, #11
    a706:	4b14      	ldr	r3, [pc, #80]	; (a758 <chip_sleep+0xd0>)
    a708:	4798      	blx	r3
    a70a:	0003      	movs	r3, r0
    a70c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    a70e:	1dfb      	adds	r3, r7, #7
    a710:	781b      	ldrb	r3, [r3, #0]
    a712:	b25b      	sxtb	r3, r3
    a714:	2b00      	cmp	r3, #0
    a716:	d116      	bne.n	a746 <chip_sleep+0xbe>
	if(reg & NBIT0)
    a718:	683b      	ldr	r3, [r7, #0]
    a71a:	2201      	movs	r2, #1
    a71c:	4013      	ands	r3, r2
    a71e:	d013      	beq.n	a748 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    a720:	683b      	ldr	r3, [r7, #0]
    a722:	2201      	movs	r2, #1
    a724:	4393      	bics	r3, r2
    a726:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    a728:	683b      	ldr	r3, [r7, #0]
    a72a:	1dfc      	adds	r4, r7, #7
    a72c:	0019      	movs	r1, r3
    a72e:	200b      	movs	r0, #11
    a730:	4b0a      	ldr	r3, [pc, #40]	; (a75c <chip_sleep+0xd4>)
    a732:	4798      	blx	r3
    a734:	0003      	movs	r3, r0
    a736:	7023      	strb	r3, [r4, #0]
    a738:	e006      	b.n	a748 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    a73a:	46c0      	nop			; (mov r8, r8)
    a73c:	e004      	b.n	a748 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    a73e:	46c0      	nop			; (mov r8, r8)
    a740:	e002      	b.n	a748 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    a742:	46c0      	nop			; (mov r8, r8)
    a744:	e000      	b.n	a748 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    a746:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    a748:	1dfb      	adds	r3, r7, #7
    a74a:	781b      	ldrb	r3, [r3, #0]
    a74c:	b25b      	sxtb	r3, r3
}
    a74e:	0018      	movs	r0, r3
    a750:	46bd      	mov	sp, r7
    a752:	b003      	add	sp, #12
    a754:	bd90      	pop	{r4, r7, pc}
    a756:	46c0      	nop			; (mov r8, r8)
    a758:	0000ac8d 	.word	0x0000ac8d
    a75c:	0000acb1 	.word	0x0000acb1

0000a760 <chip_wake>:
sint8 chip_wake(void)
{
    a760:	b590      	push	{r4, r7, lr}
    a762:	b085      	sub	sp, #20
    a764:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    a766:	230f      	movs	r3, #15
    a768:	18fb      	adds	r3, r7, r3
    a76a:	2200      	movs	r2, #0
    a76c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    a76e:	2300      	movs	r3, #0
    a770:	607b      	str	r3, [r7, #4]
    a772:	2300      	movs	r3, #0
    a774:	603b      	str	r3, [r7, #0]
    a776:	2300      	movs	r3, #0
    a778:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    a77a:	230f      	movs	r3, #15
    a77c:	18fc      	adds	r4, r7, r3
    a77e:	1d3b      	adds	r3, r7, #4
    a780:	0019      	movs	r1, r3
    a782:	200b      	movs	r0, #11
    a784:	4b4c      	ldr	r3, [pc, #304]	; (a8b8 <chip_wake+0x158>)
    a786:	4798      	blx	r3
    a788:	0003      	movs	r3, r0
    a78a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a78c:	230f      	movs	r3, #15
    a78e:	18fb      	adds	r3, r7, r3
    a790:	781b      	ldrb	r3, [r3, #0]
    a792:	b25b      	sxtb	r3, r3
    a794:	2b00      	cmp	r3, #0
    a796:	d000      	beq.n	a79a <chip_wake+0x3a>
    a798:	e07f      	b.n	a89a <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    a79a:	687b      	ldr	r3, [r7, #4]
    a79c:	2201      	movs	r2, #1
    a79e:	4013      	ands	r3, r2
    a7a0:	d110      	bne.n	a7c4 <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    a7a2:	687b      	ldr	r3, [r7, #4]
    a7a4:	2201      	movs	r2, #1
    a7a6:	4313      	orrs	r3, r2
    a7a8:	220f      	movs	r2, #15
    a7aa:	18bc      	adds	r4, r7, r2
    a7ac:	0019      	movs	r1, r3
    a7ae:	200b      	movs	r0, #11
    a7b0:	4b42      	ldr	r3, [pc, #264]	; (a8bc <chip_wake+0x15c>)
    a7b2:	4798      	blx	r3
    a7b4:	0003      	movs	r3, r0
    a7b6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a7b8:	230f      	movs	r3, #15
    a7ba:	18fb      	adds	r3, r7, r3
    a7bc:	781b      	ldrb	r3, [r3, #0]
    a7be:	b25b      	sxtb	r3, r3
    a7c0:	2b00      	cmp	r3, #0
    a7c2:	d16c      	bne.n	a89e <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    a7c4:	230f      	movs	r3, #15
    a7c6:	18fc      	adds	r4, r7, r3
    a7c8:	1d3b      	adds	r3, r7, #4
    a7ca:	0019      	movs	r1, r3
    a7cc:	2001      	movs	r0, #1
    a7ce:	4b3a      	ldr	r3, [pc, #232]	; (a8b8 <chip_wake+0x158>)
    a7d0:	4798      	blx	r3
    a7d2:	0003      	movs	r3, r0
    a7d4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a7d6:	230f      	movs	r3, #15
    a7d8:	18fb      	adds	r3, r7, r3
    a7da:	781b      	ldrb	r3, [r3, #0]
    a7dc:	b25b      	sxtb	r3, r3
    a7de:	2b00      	cmp	r3, #0
    a7e0:	d15f      	bne.n	a8a2 <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    a7e2:	687b      	ldr	r3, [r7, #4]
    a7e4:	2202      	movs	r2, #2
    a7e6:	4013      	ands	r3, r2
    a7e8:	d110      	bne.n	a80c <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    a7ea:	687b      	ldr	r3, [r7, #4]
    a7ec:	2202      	movs	r2, #2
    a7ee:	4313      	orrs	r3, r2
    a7f0:	220f      	movs	r2, #15
    a7f2:	18bc      	adds	r4, r7, r2
    a7f4:	0019      	movs	r1, r3
    a7f6:	2001      	movs	r0, #1
    a7f8:	4b30      	ldr	r3, [pc, #192]	; (a8bc <chip_wake+0x15c>)
    a7fa:	4798      	blx	r3
    a7fc:	0003      	movs	r3, r0
    a7fe:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    a800:	230f      	movs	r3, #15
    a802:	18fb      	adds	r3, r7, r3
    a804:	781b      	ldrb	r3, [r3, #0]
    a806:	b25b      	sxtb	r3, r3
    a808:	2b00      	cmp	r3, #0
    a80a:	d14c      	bne.n	a8a6 <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    a80c:	230f      	movs	r3, #15
    a80e:	18fc      	adds	r4, r7, r3
    a810:	003b      	movs	r3, r7
    a812:	0019      	movs	r1, r3
    a814:	200f      	movs	r0, #15
    a816:	4b28      	ldr	r3, [pc, #160]	; (a8b8 <chip_wake+0x158>)
    a818:	4798      	blx	r3
    a81a:	0003      	movs	r3, r0
    a81c:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    a81e:	230f      	movs	r3, #15
    a820:	18fb      	adds	r3, r7, r3
    a822:	781b      	ldrb	r3, [r3, #0]
    a824:	b25b      	sxtb	r3, r3
    a826:	2b00      	cmp	r3, #0
    a828:	d013      	beq.n	a852 <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    a82a:	23aa      	movs	r3, #170	; 0xaa
    a82c:	005a      	lsls	r2, r3, #1
    a82e:	4924      	ldr	r1, [pc, #144]	; (a8c0 <chip_wake+0x160>)
    a830:	4b24      	ldr	r3, [pc, #144]	; (a8c4 <chip_wake+0x164>)
    a832:	0018      	movs	r0, r3
    a834:	4b24      	ldr	r3, [pc, #144]	; (a8c8 <chip_wake+0x168>)
    a836:	4798      	blx	r3
    a838:	230f      	movs	r3, #15
    a83a:	18fb      	adds	r3, r7, r3
    a83c:	2100      	movs	r1, #0
    a83e:	5659      	ldrsb	r1, [r3, r1]
    a840:	683a      	ldr	r2, [r7, #0]
    a842:	4b22      	ldr	r3, [pc, #136]	; (a8cc <chip_wake+0x16c>)
    a844:	0018      	movs	r0, r3
    a846:	4b20      	ldr	r3, [pc, #128]	; (a8c8 <chip_wake+0x168>)
    a848:	4798      	blx	r3
    a84a:	200d      	movs	r0, #13
    a84c:	4b20      	ldr	r3, [pc, #128]	; (a8d0 <chip_wake+0x170>)
    a84e:	4798      	blx	r3
			goto _WAKE_EXIT;
    a850:	e02a      	b.n	a8a8 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    a852:	683b      	ldr	r3, [r7, #0]
    a854:	2204      	movs	r2, #4
    a856:	4013      	ands	r3, r2
    a858:	d11b      	bne.n	a892 <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    a85a:	2002      	movs	r0, #2
    a85c:	4b1d      	ldr	r3, [pc, #116]	; (a8d4 <chip_wake+0x174>)
    a85e:	4798      	blx	r3
		trials++;
    a860:	68bb      	ldr	r3, [r7, #8]
    a862:	3301      	adds	r3, #1
    a864:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    a866:	68bb      	ldr	r3, [r7, #8]
    a868:	2b04      	cmp	r3, #4
    a86a:	d9cf      	bls.n	a80c <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    a86c:	23af      	movs	r3, #175	; 0xaf
    a86e:	005a      	lsls	r2, r3, #1
    a870:	4913      	ldr	r1, [pc, #76]	; (a8c0 <chip_wake+0x160>)
    a872:	4b14      	ldr	r3, [pc, #80]	; (a8c4 <chip_wake+0x164>)
    a874:	0018      	movs	r0, r3
    a876:	4b14      	ldr	r3, [pc, #80]	; (a8c8 <chip_wake+0x168>)
    a878:	4798      	blx	r3
    a87a:	4b17      	ldr	r3, [pc, #92]	; (a8d8 <chip_wake+0x178>)
    a87c:	0018      	movs	r0, r3
    a87e:	4b17      	ldr	r3, [pc, #92]	; (a8dc <chip_wake+0x17c>)
    a880:	4798      	blx	r3
    a882:	200d      	movs	r0, #13
    a884:	4b12      	ldr	r3, [pc, #72]	; (a8d0 <chip_wake+0x170>)
    a886:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    a888:	230f      	movs	r3, #15
    a88a:	18fb      	adds	r3, r7, r3
    a88c:	22fc      	movs	r2, #252	; 0xfc
    a88e:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    a890:	e00a      	b.n	a8a8 <chip_wake+0x148>
			break;
    a892:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    a894:	4b12      	ldr	r3, [pc, #72]	; (a8e0 <chip_wake+0x180>)
    a896:	4798      	blx	r3
    a898:	e006      	b.n	a8a8 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a89a:	46c0      	nop			; (mov r8, r8)
    a89c:	e004      	b.n	a8a8 <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a89e:	46c0      	nop			; (mov r8, r8)
    a8a0:	e002      	b.n	a8a8 <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a8a2:	46c0      	nop			; (mov r8, r8)
    a8a4:	e000      	b.n	a8a8 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    a8a6:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    a8a8:	230f      	movs	r3, #15
    a8aa:	18fb      	adds	r3, r7, r3
    a8ac:	781b      	ldrb	r3, [r3, #0]
    a8ae:	b25b      	sxtb	r3, r3
}
    a8b0:	0018      	movs	r0, r3
    a8b2:	46bd      	mov	sp, r7
    a8b4:	b005      	add	sp, #20
    a8b6:	bd90      	pop	{r4, r7, pc}
    a8b8:	0000ac8d 	.word	0x0000ac8d
    a8bc:	0000acb1 	.word	0x0000acb1
    a8c0:	00018ad8 	.word	0x00018ad8
    a8c4:	00018a54 	.word	0x00018a54
    a8c8:	00016d69 	.word	0x00016d69
    a8cc:	00018a68 	.word	0x00018a68
    a8d0:	00016d9d 	.word	0x00016d9d
    a8d4:	00008335 	.word	0x00008335
    a8d8:	00018a80 	.word	0x00018a80
    a8dc:	00016e85 	.word	0x00016e85
    a8e0:	0000ac4d 	.word	0x0000ac4d

0000a8e4 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    a8e4:	b580      	push	{r7, lr}
    a8e6:	b088      	sub	sp, #32
    a8e8:	af00      	add	r7, sp, #0
    a8ea:	0002      	movs	r2, r0
    a8ec:	1dfb      	adds	r3, r7, #7
    a8ee:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    a8f0:	2313      	movs	r3, #19
    a8f2:	18fb      	adds	r3, r7, r3
    a8f4:	2200      	movs	r2, #0
    a8f6:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    a8f8:	2300      	movs	r3, #0
    a8fa:	61fb      	str	r3, [r7, #28]
    a8fc:	2300      	movs	r3, #0
    a8fe:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    a900:	2300      	movs	r3, #0
    a902:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    a904:	4b4a      	ldr	r3, [pc, #296]	; (aa30 <wait_for_bootrom+0x14c>)
    a906:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    a908:	2300      	movs	r3, #0
    a90a:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    a90c:	4b49      	ldr	r3, [pc, #292]	; (aa34 <wait_for_bootrom+0x150>)
    a90e:	0018      	movs	r0, r3
    a910:	4b49      	ldr	r3, [pc, #292]	; (aa38 <wait_for_bootrom+0x154>)
    a912:	4798      	blx	r3
    a914:	0003      	movs	r3, r0
    a916:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    a918:	69fb      	ldr	r3, [r7, #28]
    a91a:	2b00      	cmp	r3, #0
    a91c:	db03      	blt.n	a926 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    a91e:	2001      	movs	r0, #1
    a920:	4b46      	ldr	r3, [pc, #280]	; (aa3c <wait_for_bootrom+0x158>)
    a922:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    a924:	e7f2      	b.n	a90c <wait_for_bootrom+0x28>
			break;
    a926:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    a928:	4b45      	ldr	r3, [pc, #276]	; (aa40 <wait_for_bootrom+0x15c>)
    a92a:	0018      	movs	r0, r3
    a92c:	4b42      	ldr	r3, [pc, #264]	; (aa38 <wait_for_bootrom+0x154>)
    a92e:	4798      	blx	r3
    a930:	0003      	movs	r3, r0
    a932:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    a934:	69fb      	ldr	r3, [r7, #28]
    a936:	2201      	movs	r2, #1
    a938:	4013      	ands	r3, r2
    a93a:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    a93c:	69fb      	ldr	r3, [r7, #28]
    a93e:	2b00      	cmp	r3, #0
    a940:	d112      	bne.n	a968 <wait_for_bootrom+0x84>
	{
		reg = 0;
    a942:	2300      	movs	r3, #0
    a944:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    a946:	e00b      	b.n	a960 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    a948:	2001      	movs	r0, #1
    a94a:	4b3c      	ldr	r3, [pc, #240]	; (aa3c <wait_for_bootrom+0x158>)
    a94c:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    a94e:	4b3d      	ldr	r3, [pc, #244]	; (aa44 <wait_for_bootrom+0x160>)
    a950:	0018      	movs	r0, r3
    a952:	4b39      	ldr	r3, [pc, #228]	; (aa38 <wait_for_bootrom+0x154>)
    a954:	4798      	blx	r3
    a956:	0003      	movs	r3, r0
    a958:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    a95a:	69bb      	ldr	r3, [r7, #24]
    a95c:	3301      	adds	r3, #1
    a95e:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    a960:	69fb      	ldr	r3, [r7, #28]
    a962:	4a39      	ldr	r2, [pc, #228]	; (aa48 <wait_for_bootrom+0x164>)
    a964:	4293      	cmp	r3, r2
    a966:	d1ef      	bne.n	a948 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    a968:	1dfb      	adds	r3, r7, #7
    a96a:	781b      	ldrb	r3, [r3, #0]
    a96c:	2b02      	cmp	r3, #2
    a96e:	d10d      	bne.n	a98c <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    a970:	4a36      	ldr	r2, [pc, #216]	; (aa4c <wait_for_bootrom+0x168>)
    a972:	4b37      	ldr	r3, [pc, #220]	; (aa50 <wait_for_bootrom+0x16c>)
    a974:	0011      	movs	r1, r2
    a976:	0018      	movs	r0, r3
    a978:	4b36      	ldr	r3, [pc, #216]	; (aa54 <wait_for_bootrom+0x170>)
    a97a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    a97c:	2380      	movs	r3, #128	; 0x80
    a97e:	035b      	lsls	r3, r3, #13
    a980:	4a35      	ldr	r2, [pc, #212]	; (aa58 <wait_for_bootrom+0x174>)
    a982:	0019      	movs	r1, r3
    a984:	0010      	movs	r0, r2
    a986:	4b33      	ldr	r3, [pc, #204]	; (aa54 <wait_for_bootrom+0x170>)
    a988:	4798      	blx	r3
    a98a:	e022      	b.n	a9d2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    a98c:	1dfb      	adds	r3, r7, #7
    a98e:	781b      	ldrb	r3, [r3, #0]
    a990:	2b03      	cmp	r3, #3
    a992:	d10b      	bne.n	a9ac <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    a994:	4a2d      	ldr	r2, [pc, #180]	; (aa4c <wait_for_bootrom+0x168>)
    a996:	4b2e      	ldr	r3, [pc, #184]	; (aa50 <wait_for_bootrom+0x16c>)
    a998:	0011      	movs	r1, r2
    a99a:	0018      	movs	r0, r3
    a99c:	4b2d      	ldr	r3, [pc, #180]	; (aa54 <wait_for_bootrom+0x170>)
    a99e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    a9a0:	4b2d      	ldr	r3, [pc, #180]	; (aa58 <wait_for_bootrom+0x174>)
    a9a2:	2100      	movs	r1, #0
    a9a4:	0018      	movs	r0, r3
    a9a6:	4b2b      	ldr	r3, [pc, #172]	; (aa54 <wait_for_bootrom+0x170>)
    a9a8:	4798      	blx	r3
    a9aa:	e012      	b.n	a9d2 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    a9ac:	1dfb      	adds	r3, r7, #7
    a9ae:	781b      	ldrb	r3, [r3, #0]
    a9b0:	2b04      	cmp	r3, #4
    a9b2:	d108      	bne.n	a9c6 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    a9b4:	2380      	movs	r3, #128	; 0x80
    a9b6:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    a9b8:	68fb      	ldr	r3, [r7, #12]
    a9ba:	4a27      	ldr	r2, [pc, #156]	; (aa58 <wait_for_bootrom+0x174>)
    a9bc:	0019      	movs	r1, r3
    a9be:	0010      	movs	r0, r2
    a9c0:	4b24      	ldr	r3, [pc, #144]	; (aa54 <wait_for_bootrom+0x170>)
    a9c2:	4798      	blx	r3
    a9c4:	e005      	b.n	a9d2 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    a9c6:	68fb      	ldr	r3, [r7, #12]
    a9c8:	4a23      	ldr	r2, [pc, #140]	; (aa58 <wait_for_bootrom+0x174>)
    a9ca:	0019      	movs	r1, r3
    a9cc:	0010      	movs	r0, r2
    a9ce:	4b21      	ldr	r3, [pc, #132]	; (aa54 <wait_for_bootrom+0x170>)
    a9d0:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    a9d2:	4b22      	ldr	r3, [pc, #136]	; (aa5c <wait_for_bootrom+0x178>)
    a9d4:	4798      	blx	r3
    a9d6:	0003      	movs	r3, r0
    a9d8:	051b      	lsls	r3, r3, #20
    a9da:	0d1b      	lsrs	r3, r3, #20
    a9dc:	4a20      	ldr	r2, [pc, #128]	; (aa60 <wait_for_bootrom+0x17c>)
    a9de:	4293      	cmp	r3, r2
    a9e0:	d906      	bls.n	a9f0 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    a9e2:	697b      	ldr	r3, [r7, #20]
    a9e4:	2202      	movs	r2, #2
    a9e6:	4313      	orrs	r3, r2
    a9e8:	0018      	movs	r0, r3
    a9ea:	4b1e      	ldr	r3, [pc, #120]	; (aa64 <wait_for_bootrom+0x180>)
    a9ec:	4798      	blx	r3
    a9ee:	e003      	b.n	a9f8 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    a9f0:	697b      	ldr	r3, [r7, #20]
    a9f2:	0018      	movs	r0, r3
    a9f4:	4b1b      	ldr	r3, [pc, #108]	; (aa64 <wait_for_bootrom+0x180>)
    a9f6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    a9f8:	4b1b      	ldr	r3, [pc, #108]	; (aa68 <wait_for_bootrom+0x184>)
    a9fa:	0018      	movs	r0, r3
    a9fc:	4b1b      	ldr	r3, [pc, #108]	; (aa6c <wait_for_bootrom+0x188>)
    a9fe:	4798      	blx	r3
    aa00:	68fa      	ldr	r2, [r7, #12]
    aa02:	4b1b      	ldr	r3, [pc, #108]	; (aa70 <wait_for_bootrom+0x18c>)
    aa04:	0011      	movs	r1, r2
    aa06:	0018      	movs	r0, r3
    aa08:	4b18      	ldr	r3, [pc, #96]	; (aa6c <wait_for_bootrom+0x188>)
    aa0a:	4798      	blx	r3
    aa0c:	200d      	movs	r0, #13
    aa0e:	4b19      	ldr	r3, [pc, #100]	; (aa74 <wait_for_bootrom+0x190>)
    aa10:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    aa12:	4a19      	ldr	r2, [pc, #100]	; (aa78 <wait_for_bootrom+0x194>)
    aa14:	4b0b      	ldr	r3, [pc, #44]	; (aa44 <wait_for_bootrom+0x160>)
    aa16:	0011      	movs	r1, r2
    aa18:	0018      	movs	r0, r3
    aa1a:	4b0e      	ldr	r3, [pc, #56]	; (aa54 <wait_for_bootrom+0x170>)
    aa1c:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    aa1e:	2313      	movs	r3, #19
    aa20:	18fb      	adds	r3, r7, r3
    aa22:	781b      	ldrb	r3, [r3, #0]
    aa24:	b25b      	sxtb	r3, r3
}
    aa26:	0018      	movs	r0, r3
    aa28:	46bd      	mov	sp, r7
    aa2a:	b008      	add	sp, #32
    aa2c:	bd80      	pop	{r7, pc}
    aa2e:	46c0      	nop			; (mov r8, r8)
    aa30:	13521352 	.word	0x13521352
    aa34:	00001014 	.word	0x00001014
    aa38:	0000ac6d 	.word	0x0000ac6d
    aa3c:	00008335 	.word	0x00008335
    aa40:	000207bc 	.word	0x000207bc
    aa44:	000c000c 	.word	0x000c000c
    aa48:	10add09e 	.word	0x10add09e
    aa4c:	3c1cd57d 	.word	0x3c1cd57d
    aa50:	000207ac 	.word	0x000207ac
    aa54:	0000acb1 	.word	0x0000acb1
    aa58:	0000108c 	.word	0x0000108c
    aa5c:	0000a591 	.word	0x0000a591
    aa60:	0000039f 	.word	0x0000039f
    aa64:	0000a461 	.word	0x0000a461
    aa68:	00018a9c 	.word	0x00018a9c
    aa6c:	00016d69 	.word	0x00016d69
    aa70:	00018aa8 	.word	0x00018aa8
    aa74:	00016d9d 	.word	0x00016d9d
    aa78:	ef522f61 	.word	0xef522f61

0000aa7c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    aa7c:	b580      	push	{r7, lr}
    aa7e:	b088      	sub	sp, #32
    aa80:	af00      	add	r7, sp, #0
    aa82:	0002      	movs	r2, r0
    aa84:	1dfb      	adds	r3, r7, #7
    aa86:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    aa88:	231f      	movs	r3, #31
    aa8a:	18fb      	adds	r3, r7, r3
    aa8c:	2200      	movs	r2, #0
    aa8e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    aa90:	2300      	movs	r3, #0
    aa92:	61bb      	str	r3, [r7, #24]
    aa94:	2300      	movs	r3, #0
    aa96:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    aa98:	2301      	movs	r3, #1
    aa9a:	425b      	negs	r3, r3
    aa9c:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    aa9e:	4b1d      	ldr	r3, [pc, #116]	; (ab14 <wait_for_firmware_start+0x98>)
    aaa0:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    aaa2:	4b1d      	ldr	r3, [pc, #116]	; (ab18 <wait_for_firmware_start+0x9c>)
    aaa4:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    aaa6:	1dfb      	adds	r3, r7, #7
    aaa8:	781b      	ldrb	r3, [r3, #0]
    aaaa:	2b02      	cmp	r3, #2
    aaac:	d003      	beq.n	aab6 <wait_for_firmware_start+0x3a>
    aaae:	1dfb      	adds	r3, r7, #7
    aab0:	781b      	ldrb	r3, [r3, #0]
    aab2:	2b03      	cmp	r3, #3
    aab4:	d119      	bne.n	aaea <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    aab6:	4b19      	ldr	r3, [pc, #100]	; (ab1c <wait_for_firmware_start+0xa0>)
    aab8:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    aaba:	4b19      	ldr	r3, [pc, #100]	; (ab20 <wait_for_firmware_start+0xa4>)
    aabc:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    aabe:	e014      	b.n	aaea <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    aac0:	2002      	movs	r0, #2
    aac2:	4b18      	ldr	r3, [pc, #96]	; (ab24 <wait_for_firmware_start+0xa8>)
    aac4:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    aac6:	68fb      	ldr	r3, [r7, #12]
    aac8:	0018      	movs	r0, r3
    aaca:	4b17      	ldr	r3, [pc, #92]	; (ab28 <wait_for_firmware_start+0xac>)
    aacc:	4798      	blx	r3
    aace:	0003      	movs	r3, r0
    aad0:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    aad2:	697b      	ldr	r3, [r7, #20]
    aad4:	3301      	adds	r3, #1
    aad6:	617b      	str	r3, [r7, #20]
    aad8:	697a      	ldr	r2, [r7, #20]
    aada:	693b      	ldr	r3, [r7, #16]
    aadc:	429a      	cmp	r2, r3
    aade:	d304      	bcc.n	aaea <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    aae0:	231f      	movs	r3, #31
    aae2:	18fb      	adds	r3, r7, r3
    aae4:	22fb      	movs	r2, #251	; 0xfb
    aae6:	701a      	strb	r2, [r3, #0]
			goto ERR;
    aae8:	e00c      	b.n	ab04 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    aaea:	68ba      	ldr	r2, [r7, #8]
    aaec:	69bb      	ldr	r3, [r7, #24]
    aaee:	429a      	cmp	r2, r3
    aaf0:	d1e6      	bne.n	aac0 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    aaf2:	68bb      	ldr	r3, [r7, #8]
    aaf4:	4a08      	ldr	r2, [pc, #32]	; (ab18 <wait_for_firmware_start+0x9c>)
    aaf6:	4293      	cmp	r3, r2
    aaf8:	d104      	bne.n	ab04 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    aafa:	4b06      	ldr	r3, [pc, #24]	; (ab14 <wait_for_firmware_start+0x98>)
    aafc:	2100      	movs	r1, #0
    aafe:	0018      	movs	r0, r3
    ab00:	4b0a      	ldr	r3, [pc, #40]	; (ab2c <wait_for_firmware_start+0xb0>)
    ab02:	4798      	blx	r3
	}
ERR:
	return ret;
    ab04:	231f      	movs	r3, #31
    ab06:	18fb      	adds	r3, r7, r3
    ab08:	781b      	ldrb	r3, [r3, #0]
    ab0a:	b25b      	sxtb	r3, r3
}
    ab0c:	0018      	movs	r0, r3
    ab0e:	46bd      	mov	sp, r7
    ab10:	b008      	add	sp, #32
    ab12:	bd80      	pop	{r7, pc}
    ab14:	0000108c 	.word	0x0000108c
    ab18:	02532636 	.word	0x02532636
    ab1c:	000207ac 	.word	0x000207ac
    ab20:	d75dc1c3 	.word	0xd75dc1c3
    ab24:	00008335 	.word	0x00008335
    ab28:	0000ac6d 	.word	0x0000ac6d
    ab2c:	0000acb1 	.word	0x0000acb1

0000ab30 <chip_deinit>:

sint8 chip_deinit(void)
{
    ab30:	b590      	push	{r4, r7, lr}
    ab32:	b083      	sub	sp, #12
    ab34:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    ab36:	2300      	movs	r3, #0
    ab38:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    ab3a:	1dfc      	adds	r4, r7, #7
    ab3c:	003a      	movs	r2, r7
    ab3e:	23a0      	movs	r3, #160	; 0xa0
    ab40:	015b      	lsls	r3, r3, #5
    ab42:	0011      	movs	r1, r2
    ab44:	0018      	movs	r0, r3
    ab46:	4b1f      	ldr	r3, [pc, #124]	; (abc4 <chip_deinit+0x94>)
    ab48:	4798      	blx	r3
    ab4a:	0003      	movs	r3, r0
    ab4c:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    ab4e:	1dfb      	adds	r3, r7, #7
    ab50:	781b      	ldrb	r3, [r3, #0]
    ab52:	b25b      	sxtb	r3, r3
    ab54:	2b00      	cmp	r3, #0
    ab56:	d00d      	beq.n	ab74 <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    ab58:	4a1b      	ldr	r2, [pc, #108]	; (abc8 <chip_deinit+0x98>)
    ab5a:	491c      	ldr	r1, [pc, #112]	; (abcc <chip_deinit+0x9c>)
    ab5c:	4b1c      	ldr	r3, [pc, #112]	; (abd0 <chip_deinit+0xa0>)
    ab5e:	0018      	movs	r0, r3
    ab60:	4b1c      	ldr	r3, [pc, #112]	; (abd4 <chip_deinit+0xa4>)
    ab62:	4798      	blx	r3
    ab64:	4b1c      	ldr	r3, [pc, #112]	; (abd8 <chip_deinit+0xa8>)
    ab66:	0018      	movs	r0, r3
    ab68:	4b1c      	ldr	r3, [pc, #112]	; (abdc <chip_deinit+0xac>)
    ab6a:	4798      	blx	r3
    ab6c:	200d      	movs	r0, #13
    ab6e:	4b1c      	ldr	r3, [pc, #112]	; (abe0 <chip_deinit+0xb0>)
    ab70:	4798      	blx	r3
		goto ERR1;
    ab72:	e020      	b.n	abb6 <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    ab74:	683b      	ldr	r3, [r7, #0]
    ab76:	4a1b      	ldr	r2, [pc, #108]	; (abe4 <chip_deinit+0xb4>)
    ab78:	4013      	ands	r3, r2
    ab7a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    ab7c:	683a      	ldr	r2, [r7, #0]
    ab7e:	1dfc      	adds	r4, r7, #7
    ab80:	23a0      	movs	r3, #160	; 0xa0
    ab82:	015b      	lsls	r3, r3, #5
    ab84:	0011      	movs	r1, r2
    ab86:	0018      	movs	r0, r3
    ab88:	4b17      	ldr	r3, [pc, #92]	; (abe8 <chip_deinit+0xb8>)
    ab8a:	4798      	blx	r3
    ab8c:	0003      	movs	r3, r0
    ab8e:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    ab90:	1dfb      	adds	r3, r7, #7
    ab92:	781b      	ldrb	r3, [r3, #0]
    ab94:	b25b      	sxtb	r3, r3
    ab96:	2b00      	cmp	r3, #0
    ab98:	d00d      	beq.n	abb6 <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    ab9a:	4a14      	ldr	r2, [pc, #80]	; (abec <chip_deinit+0xbc>)
    ab9c:	490b      	ldr	r1, [pc, #44]	; (abcc <chip_deinit+0x9c>)
    ab9e:	4b0c      	ldr	r3, [pc, #48]	; (abd0 <chip_deinit+0xa0>)
    aba0:	0018      	movs	r0, r3
    aba2:	4b0c      	ldr	r3, [pc, #48]	; (abd4 <chip_deinit+0xa4>)
    aba4:	4798      	blx	r3
    aba6:	4b0c      	ldr	r3, [pc, #48]	; (abd8 <chip_deinit+0xa8>)
    aba8:	0018      	movs	r0, r3
    abaa:	4b0c      	ldr	r3, [pc, #48]	; (abdc <chip_deinit+0xac>)
    abac:	4798      	blx	r3
    abae:	200d      	movs	r0, #13
    abb0:	4b0b      	ldr	r3, [pc, #44]	; (abe0 <chip_deinit+0xb0>)
    abb2:	4798      	blx	r3
		goto ERR1;
    abb4:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    abb6:	1dfb      	adds	r3, r7, #7
    abb8:	781b      	ldrb	r3, [r3, #0]
    abba:	b25b      	sxtb	r3, r3
}
    abbc:	0018      	movs	r0, r3
    abbe:	46bd      	mov	sp, r7
    abc0:	b003      	add	sp, #12
    abc2:	bd90      	pop	{r4, r7, pc}
    abc4:	0000ac8d 	.word	0x0000ac8d
    abc8:	00000205 	.word	0x00000205
    abcc:	00018ae4 	.word	0x00018ae4
    abd0:	00018a54 	.word	0x00018a54
    abd4:	00016d69 	.word	0x00016d69
    abd8:	00018ac0 	.word	0x00018ac0
    abdc:	00016e85 	.word	0x00016e85
    abe0:	00016d9d 	.word	0x00016d9d
    abe4:	fffffbff 	.word	0xfffffbff
    abe8:	0000acb1 	.word	0x0000acb1
    abec:	0000020b 	.word	0x0000020b

0000abf0 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    abf0:	b590      	push	{r4, r7, lr}
    abf2:	b085      	sub	sp, #20
    abf4:	af00      	add	r7, sp, #0
    abf6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    abf8:	230f      	movs	r3, #15
    abfa:	18fb      	adds	r3, r7, r3
    abfc:	2200      	movs	r2, #0
    abfe:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    ac00:	230f      	movs	r3, #15
    ac02:	18fc      	adds	r4, r7, r3
    ac04:	687b      	ldr	r3, [r7, #4]
    ac06:	0018      	movs	r0, r3
    ac08:	4b05      	ldr	r3, [pc, #20]	; (ac20 <nm_bus_iface_init+0x30>)
    ac0a:	4798      	blx	r3
    ac0c:	0003      	movs	r3, r0
    ac0e:	7023      	strb	r3, [r4, #0]
	return ret;
    ac10:	230f      	movs	r3, #15
    ac12:	18fb      	adds	r3, r7, r3
    ac14:	781b      	ldrb	r3, [r3, #0]
    ac16:	b25b      	sxtb	r3, r3
}
    ac18:	0018      	movs	r0, r3
    ac1a:	46bd      	mov	sp, r7
    ac1c:	b005      	add	sp, #20
    ac1e:	bd90      	pop	{r4, r7, pc}
    ac20:	000089fd 	.word	0x000089fd

0000ac24 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    ac24:	b590      	push	{r4, r7, lr}
    ac26:	b083      	sub	sp, #12
    ac28:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    ac2a:	1dfb      	adds	r3, r7, #7
    ac2c:	2200      	movs	r2, #0
    ac2e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    ac30:	1dfc      	adds	r4, r7, #7
    ac32:	4b05      	ldr	r3, [pc, #20]	; (ac48 <nm_bus_iface_deinit+0x24>)
    ac34:	4798      	blx	r3
    ac36:	0003      	movs	r3, r0
    ac38:	7023      	strb	r3, [r4, #0]

	return ret;
    ac3a:	1dfb      	adds	r3, r7, #7
    ac3c:	781b      	ldrb	r3, [r3, #0]
    ac3e:	b25b      	sxtb	r3, r3
}
    ac40:	0018      	movs	r0, r3
    ac42:	46bd      	mov	sp, r7
    ac44:	b003      	add	sp, #12
    ac46:	bd90      	pop	{r4, r7, pc}
    ac48:	00008b79 	.word	0x00008b79

0000ac4c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    ac4c:	b580      	push	{r7, lr}
    ac4e:	b082      	sub	sp, #8
    ac50:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    ac52:	1dfb      	adds	r3, r7, #7
    ac54:	2200      	movs	r2, #0
    ac56:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    ac58:	4b03      	ldr	r3, [pc, #12]	; (ac68 <nm_bus_reset+0x1c>)
    ac5a:	4798      	blx	r3
    ac5c:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    ac5e:	0018      	movs	r0, r3
    ac60:	46bd      	mov	sp, r7
    ac62:	b002      	add	sp, #8
    ac64:	bd80      	pop	{r7, pc}
    ac66:	46c0      	nop			; (mov r8, r8)
    ac68:	0000c535 	.word	0x0000c535

0000ac6c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    ac6c:	b580      	push	{r7, lr}
    ac6e:	b082      	sub	sp, #8
    ac70:	af00      	add	r7, sp, #0
    ac72:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    ac74:	687b      	ldr	r3, [r7, #4]
    ac76:	0018      	movs	r0, r3
    ac78:	4b03      	ldr	r3, [pc, #12]	; (ac88 <nm_read_reg+0x1c>)
    ac7a:	4798      	blx	r3
    ac7c:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    ac7e:	0018      	movs	r0, r3
    ac80:	46bd      	mov	sp, r7
    ac82:	b002      	add	sp, #8
    ac84:	bd80      	pop	{r7, pc}
    ac86:	46c0      	nop			; (mov r8, r8)
    ac88:	0000c6c9 	.word	0x0000c6c9

0000ac8c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    ac8c:	b580      	push	{r7, lr}
    ac8e:	b082      	sub	sp, #8
    ac90:	af00      	add	r7, sp, #0
    ac92:	6078      	str	r0, [r7, #4]
    ac94:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    ac96:	683a      	ldr	r2, [r7, #0]
    ac98:	687b      	ldr	r3, [r7, #4]
    ac9a:	0011      	movs	r1, r2
    ac9c:	0018      	movs	r0, r3
    ac9e:	4b03      	ldr	r3, [pc, #12]	; (acac <nm_read_reg_with_ret+0x20>)
    aca0:	4798      	blx	r3
    aca2:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    aca4:	0018      	movs	r0, r3
    aca6:	46bd      	mov	sp, r7
    aca8:	b002      	add	sp, #8
    acaa:	bd80      	pop	{r7, pc}
    acac:	0000c6ed 	.word	0x0000c6ed

0000acb0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    acb0:	b580      	push	{r7, lr}
    acb2:	b082      	sub	sp, #8
    acb4:	af00      	add	r7, sp, #0
    acb6:	6078      	str	r0, [r7, #4]
    acb8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    acba:	683a      	ldr	r2, [r7, #0]
    acbc:	687b      	ldr	r3, [r7, #4]
    acbe:	0011      	movs	r1, r2
    acc0:	0018      	movs	r0, r3
    acc2:	4b03      	ldr	r3, [pc, #12]	; (acd0 <nm_write_reg+0x20>)
    acc4:	4798      	blx	r3
    acc6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    acc8:	0018      	movs	r0, r3
    acca:	46bd      	mov	sp, r7
    accc:	b002      	add	sp, #8
    acce:	bd80      	pop	{r7, pc}
    acd0:	0000c73d 	.word	0x0000c73d

0000acd4 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    acd4:	b580      	push	{r7, lr}
    acd6:	b084      	sub	sp, #16
    acd8:	af00      	add	r7, sp, #0
    acda:	60f8      	str	r0, [r7, #12]
    acdc:	60b9      	str	r1, [r7, #8]
    acde:	1dbb      	adds	r3, r7, #6
    ace0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    ace2:	1dbb      	adds	r3, r7, #6
    ace4:	881a      	ldrh	r2, [r3, #0]
    ace6:	68b9      	ldr	r1, [r7, #8]
    ace8:	68fb      	ldr	r3, [r7, #12]
    acea:	0018      	movs	r0, r3
    acec:	4b03      	ldr	r3, [pc, #12]	; (acfc <p_nm_read_block+0x28>)
    acee:	4798      	blx	r3
    acf0:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    acf2:	0018      	movs	r0, r3
    acf4:	46bd      	mov	sp, r7
    acf6:	b004      	add	sp, #16
    acf8:	bd80      	pop	{r7, pc}
    acfa:	46c0      	nop			; (mov r8, r8)
    acfc:	0000c78d 	.word	0x0000c78d

0000ad00 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    ad00:	b580      	push	{r7, lr}
    ad02:	b086      	sub	sp, #24
    ad04:	af00      	add	r7, sp, #0
    ad06:	60f8      	str	r0, [r7, #12]
    ad08:	60b9      	str	r1, [r7, #8]
    ad0a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    ad0c:	4b2d      	ldr	r3, [pc, #180]	; (adc4 <nm_read_block+0xc4>)
    ad0e:	881a      	ldrh	r2, [r3, #0]
    ad10:	2310      	movs	r3, #16
    ad12:	18fb      	adds	r3, r7, r3
    ad14:	3a08      	subs	r2, #8
    ad16:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    ad18:	2300      	movs	r3, #0
    ad1a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    ad1c:	2313      	movs	r3, #19
    ad1e:	18fb      	adds	r3, r7, r3
    ad20:	2200      	movs	r2, #0
    ad22:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    ad24:	2310      	movs	r3, #16
    ad26:	18fb      	adds	r3, r7, r3
    ad28:	881a      	ldrh	r2, [r3, #0]
    ad2a:	687b      	ldr	r3, [r7, #4]
    ad2c:	429a      	cmp	r2, r3
    ad2e:	d313      	bcc.n	ad58 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    ad30:	68ba      	ldr	r2, [r7, #8]
    ad32:	697b      	ldr	r3, [r7, #20]
    ad34:	18d1      	adds	r1, r2, r3
    ad36:	687b      	ldr	r3, [r7, #4]
    ad38:	b29a      	uxth	r2, r3
    ad3a:	68fb      	ldr	r3, [r7, #12]
    ad3c:	0018      	movs	r0, r3
    ad3e:	4b22      	ldr	r3, [pc, #136]	; (adc8 <nm_read_block+0xc8>)
    ad40:	4798      	blx	r3
    ad42:	0003      	movs	r3, r0
    ad44:	b2da      	uxtb	r2, r3
    ad46:	2313      	movs	r3, #19
    ad48:	18fb      	adds	r3, r7, r3
    ad4a:	781b      	ldrb	r3, [r3, #0]
    ad4c:	18d3      	adds	r3, r2, r3
    ad4e:	b2da      	uxtb	r2, r3
    ad50:	2313      	movs	r3, #19
    ad52:	18fb      	adds	r3, r7, r3
    ad54:	701a      	strb	r2, [r3, #0]
			break;
    ad56:	e02d      	b.n	adb4 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    ad58:	68ba      	ldr	r2, [r7, #8]
    ad5a:	697b      	ldr	r3, [r7, #20]
    ad5c:	18d1      	adds	r1, r2, r3
    ad5e:	2310      	movs	r3, #16
    ad60:	18fb      	adds	r3, r7, r3
    ad62:	881a      	ldrh	r2, [r3, #0]
    ad64:	68fb      	ldr	r3, [r7, #12]
    ad66:	0018      	movs	r0, r3
    ad68:	4b17      	ldr	r3, [pc, #92]	; (adc8 <nm_read_block+0xc8>)
    ad6a:	4798      	blx	r3
    ad6c:	0003      	movs	r3, r0
    ad6e:	b2da      	uxtb	r2, r3
    ad70:	2313      	movs	r3, #19
    ad72:	18fb      	adds	r3, r7, r3
    ad74:	781b      	ldrb	r3, [r3, #0]
    ad76:	18d3      	adds	r3, r2, r3
    ad78:	b2da      	uxtb	r2, r3
    ad7a:	2313      	movs	r3, #19
    ad7c:	18fb      	adds	r3, r7, r3
    ad7e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    ad80:	2313      	movs	r3, #19
    ad82:	18fb      	adds	r3, r7, r3
    ad84:	781b      	ldrb	r3, [r3, #0]
    ad86:	b25b      	sxtb	r3, r3
    ad88:	2b00      	cmp	r3, #0
    ad8a:	d112      	bne.n	adb2 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    ad8c:	2310      	movs	r3, #16
    ad8e:	18fb      	adds	r3, r7, r3
    ad90:	881b      	ldrh	r3, [r3, #0]
    ad92:	687a      	ldr	r2, [r7, #4]
    ad94:	1ad3      	subs	r3, r2, r3
    ad96:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    ad98:	2310      	movs	r3, #16
    ad9a:	18fb      	adds	r3, r7, r3
    ad9c:	881b      	ldrh	r3, [r3, #0]
    ad9e:	697a      	ldr	r2, [r7, #20]
    ada0:	18d3      	adds	r3, r2, r3
    ada2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    ada4:	2310      	movs	r3, #16
    ada6:	18fb      	adds	r3, r7, r3
    ada8:	881b      	ldrh	r3, [r3, #0]
    adaa:	68fa      	ldr	r2, [r7, #12]
    adac:	18d3      	adds	r3, r2, r3
    adae:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    adb0:	e7b8      	b.n	ad24 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    adb2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    adb4:	2313      	movs	r3, #19
    adb6:	18fb      	adds	r3, r7, r3
    adb8:	781b      	ldrb	r3, [r3, #0]
    adba:	b25b      	sxtb	r3, r3
}
    adbc:	0018      	movs	r0, r3
    adbe:	46bd      	mov	sp, r7
    adc0:	b006      	add	sp, #24
    adc2:	bd80      	pop	{r7, pc}
    adc4:	20000000 	.word	0x20000000
    adc8:	0000acd5 	.word	0x0000acd5

0000adcc <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    adcc:	b580      	push	{r7, lr}
    adce:	b084      	sub	sp, #16
    add0:	af00      	add	r7, sp, #0
    add2:	60f8      	str	r0, [r7, #12]
    add4:	60b9      	str	r1, [r7, #8]
    add6:	1dbb      	adds	r3, r7, #6
    add8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    adda:	1dbb      	adds	r3, r7, #6
    addc:	881a      	ldrh	r2, [r3, #0]
    adde:	68b9      	ldr	r1, [r7, #8]
    ade0:	68fb      	ldr	r3, [r7, #12]
    ade2:	0018      	movs	r0, r3
    ade4:	4b03      	ldr	r3, [pc, #12]	; (adf4 <p_nm_write_block+0x28>)
    ade6:	4798      	blx	r3
    ade8:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    adea:	0018      	movs	r0, r3
    adec:	46bd      	mov	sp, r7
    adee:	b004      	add	sp, #16
    adf0:	bd80      	pop	{r7, pc}
    adf2:	46c0      	nop			; (mov r8, r8)
    adf4:	0000c7e5 	.word	0x0000c7e5

0000adf8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    adf8:	b580      	push	{r7, lr}
    adfa:	b086      	sub	sp, #24
    adfc:	af00      	add	r7, sp, #0
    adfe:	60f8      	str	r0, [r7, #12]
    ae00:	60b9      	str	r1, [r7, #8]
    ae02:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    ae04:	4b2d      	ldr	r3, [pc, #180]	; (aebc <nm_write_block+0xc4>)
    ae06:	881a      	ldrh	r2, [r3, #0]
    ae08:	2310      	movs	r3, #16
    ae0a:	18fb      	adds	r3, r7, r3
    ae0c:	3a08      	subs	r2, #8
    ae0e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    ae10:	2300      	movs	r3, #0
    ae12:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    ae14:	2313      	movs	r3, #19
    ae16:	18fb      	adds	r3, r7, r3
    ae18:	2200      	movs	r2, #0
    ae1a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    ae1c:	2310      	movs	r3, #16
    ae1e:	18fb      	adds	r3, r7, r3
    ae20:	881a      	ldrh	r2, [r3, #0]
    ae22:	687b      	ldr	r3, [r7, #4]
    ae24:	429a      	cmp	r2, r3
    ae26:	d313      	bcc.n	ae50 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    ae28:	68ba      	ldr	r2, [r7, #8]
    ae2a:	697b      	ldr	r3, [r7, #20]
    ae2c:	18d1      	adds	r1, r2, r3
    ae2e:	687b      	ldr	r3, [r7, #4]
    ae30:	b29a      	uxth	r2, r3
    ae32:	68fb      	ldr	r3, [r7, #12]
    ae34:	0018      	movs	r0, r3
    ae36:	4b22      	ldr	r3, [pc, #136]	; (aec0 <nm_write_block+0xc8>)
    ae38:	4798      	blx	r3
    ae3a:	0003      	movs	r3, r0
    ae3c:	b2da      	uxtb	r2, r3
    ae3e:	2313      	movs	r3, #19
    ae40:	18fb      	adds	r3, r7, r3
    ae42:	781b      	ldrb	r3, [r3, #0]
    ae44:	18d3      	adds	r3, r2, r3
    ae46:	b2da      	uxtb	r2, r3
    ae48:	2313      	movs	r3, #19
    ae4a:	18fb      	adds	r3, r7, r3
    ae4c:	701a      	strb	r2, [r3, #0]
			break;
    ae4e:	e02d      	b.n	aeac <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    ae50:	68ba      	ldr	r2, [r7, #8]
    ae52:	697b      	ldr	r3, [r7, #20]
    ae54:	18d1      	adds	r1, r2, r3
    ae56:	2310      	movs	r3, #16
    ae58:	18fb      	adds	r3, r7, r3
    ae5a:	881a      	ldrh	r2, [r3, #0]
    ae5c:	68fb      	ldr	r3, [r7, #12]
    ae5e:	0018      	movs	r0, r3
    ae60:	4b17      	ldr	r3, [pc, #92]	; (aec0 <nm_write_block+0xc8>)
    ae62:	4798      	blx	r3
    ae64:	0003      	movs	r3, r0
    ae66:	b2da      	uxtb	r2, r3
    ae68:	2313      	movs	r3, #19
    ae6a:	18fb      	adds	r3, r7, r3
    ae6c:	781b      	ldrb	r3, [r3, #0]
    ae6e:	18d3      	adds	r3, r2, r3
    ae70:	b2da      	uxtb	r2, r3
    ae72:	2313      	movs	r3, #19
    ae74:	18fb      	adds	r3, r7, r3
    ae76:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    ae78:	2313      	movs	r3, #19
    ae7a:	18fb      	adds	r3, r7, r3
    ae7c:	781b      	ldrb	r3, [r3, #0]
    ae7e:	b25b      	sxtb	r3, r3
    ae80:	2b00      	cmp	r3, #0
    ae82:	d112      	bne.n	aeaa <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    ae84:	2310      	movs	r3, #16
    ae86:	18fb      	adds	r3, r7, r3
    ae88:	881b      	ldrh	r3, [r3, #0]
    ae8a:	687a      	ldr	r2, [r7, #4]
    ae8c:	1ad3      	subs	r3, r2, r3
    ae8e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    ae90:	2310      	movs	r3, #16
    ae92:	18fb      	adds	r3, r7, r3
    ae94:	881b      	ldrh	r3, [r3, #0]
    ae96:	697a      	ldr	r2, [r7, #20]
    ae98:	18d3      	adds	r3, r2, r3
    ae9a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    ae9c:	2310      	movs	r3, #16
    ae9e:	18fb      	adds	r3, r7, r3
    aea0:	881b      	ldrh	r3, [r3, #0]
    aea2:	68fa      	ldr	r2, [r7, #12]
    aea4:	18d3      	adds	r3, r2, r3
    aea6:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    aea8:	e7b8      	b.n	ae1c <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    aeaa:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    aeac:	2313      	movs	r3, #19
    aeae:	18fb      	adds	r3, r7, r3
    aeb0:	781b      	ldrb	r3, [r3, #0]
    aeb2:	b25b      	sxtb	r3, r3
}
    aeb4:	0018      	movs	r0, r3
    aeb6:	46bd      	mov	sp, r7
    aeb8:	b006      	add	sp, #24
    aeba:	bd80      	pop	{r7, pc}
    aebc:	20000000 	.word	0x20000000
    aec0:	0000adcd 	.word	0x0000adcd

0000aec4 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    aec4:	b590      	push	{r4, r7, lr}
    aec6:	b089      	sub	sp, #36	; 0x24
    aec8:	af00      	add	r7, sp, #0
    aeca:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    aecc:	2300      	movs	r3, #0
    aece:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    aed0:	231f      	movs	r3, #31
    aed2:	18fb      	adds	r3, r7, r3
    aed4:	2200      	movs	r2, #0
    aed6:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    aed8:	230c      	movs	r3, #12
    aeda:	18fb      	adds	r3, r7, r3
    aedc:	0018      	movs	r0, r3
    aede:	2308      	movs	r3, #8
    aee0:	001a      	movs	r2, r3
    aee2:	2100      	movs	r1, #0
    aee4:	4b64      	ldr	r3, [pc, #400]	; (b078 <nm_get_firmware_full_info+0x1b4>)
    aee6:	4798      	blx	r3
	if (pstrRev != NULL)
    aee8:	687b      	ldr	r3, [r7, #4]
    aeea:	2b00      	cmp	r3, #0
    aeec:	d100      	bne.n	aef0 <nm_get_firmware_full_info+0x2c>
    aeee:	e0ba      	b.n	b066 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    aef0:	687b      	ldr	r3, [r7, #4]
    aef2:	2228      	movs	r2, #40	; 0x28
    aef4:	2100      	movs	r1, #0
    aef6:	0018      	movs	r0, r3
    aef8:	4b60      	ldr	r3, [pc, #384]	; (b07c <nm_get_firmware_full_info+0x1b8>)
    aefa:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    aefc:	231f      	movs	r3, #31
    aefe:	18fc      	adds	r4, r7, r3
    af00:	2314      	movs	r3, #20
    af02:	18fb      	adds	r3, r7, r3
    af04:	4a5e      	ldr	r2, [pc, #376]	; (b080 <nm_get_firmware_full_info+0x1bc>)
    af06:	0019      	movs	r1, r3
    af08:	0010      	movs	r0, r2
    af0a:	4b5e      	ldr	r3, [pc, #376]	; (b084 <nm_get_firmware_full_info+0x1c0>)
    af0c:	4798      	blx	r3
    af0e:	0003      	movs	r3, r0
    af10:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    af12:	231f      	movs	r3, #31
    af14:	18fb      	adds	r3, r7, r3
    af16:	781b      	ldrb	r3, [r3, #0]
    af18:	b25b      	sxtb	r3, r3
    af1a:	2b00      	cmp	r3, #0
    af1c:	d000      	beq.n	af20 <nm_get_firmware_full_info+0x5c>
    af1e:	e0a2      	b.n	b066 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    af20:	697b      	ldr	r3, [r7, #20]
    af22:	2b00      	cmp	r3, #0
    af24:	d100      	bne.n	af28 <nm_get_firmware_full_info+0x64>
    af26:	e09a      	b.n	b05e <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    af28:	697b      	ldr	r3, [r7, #20]
    af2a:	22c0      	movs	r2, #192	; 0xc0
    af2c:	0292      	lsls	r2, r2, #10
    af2e:	4313      	orrs	r3, r2
    af30:	221f      	movs	r2, #31
    af32:	18bc      	adds	r4, r7, r2
    af34:	220c      	movs	r2, #12
    af36:	18b9      	adds	r1, r7, r2
    af38:	2208      	movs	r2, #8
    af3a:	0018      	movs	r0, r3
    af3c:	4b52      	ldr	r3, [pc, #328]	; (b088 <nm_get_firmware_full_info+0x1c4>)
    af3e:	4798      	blx	r3
    af40:	0003      	movs	r3, r0
    af42:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    af44:	231f      	movs	r3, #31
    af46:	18fb      	adds	r3, r7, r3
    af48:	781b      	ldrb	r3, [r3, #0]
    af4a:	b25b      	sxtb	r3, r3
    af4c:	2b00      	cmp	r3, #0
    af4e:	d000      	beq.n	af52 <nm_get_firmware_full_info+0x8e>
    af50:	e089      	b.n	b066 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    af52:	230c      	movs	r3, #12
    af54:	18fb      	adds	r3, r7, r3
    af56:	685b      	ldr	r3, [r3, #4]
    af58:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    af5a:	697b      	ldr	r3, [r7, #20]
    af5c:	041b      	lsls	r3, r3, #16
    af5e:	0c1b      	lsrs	r3, r3, #16
    af60:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    af62:	697b      	ldr	r3, [r7, #20]
    af64:	2b00      	cmp	r3, #0
    af66:	d100      	bne.n	af6a <nm_get_firmware_full_info+0xa6>
    af68:	e074      	b.n	b054 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    af6a:	697b      	ldr	r3, [r7, #20]
    af6c:	22c0      	movs	r2, #192	; 0xc0
    af6e:	0292      	lsls	r2, r2, #10
    af70:	4313      	orrs	r3, r2
    af72:	221f      	movs	r2, #31
    af74:	18bc      	adds	r4, r7, r2
    af76:	6879      	ldr	r1, [r7, #4]
    af78:	2228      	movs	r2, #40	; 0x28
    af7a:	0018      	movs	r0, r3
    af7c:	4b42      	ldr	r3, [pc, #264]	; (b088 <nm_get_firmware_full_info+0x1c4>)
    af7e:	4798      	blx	r3
    af80:	0003      	movs	r3, r0
    af82:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    af84:	231f      	movs	r3, #31
    af86:	18fb      	adds	r3, r7, r3
    af88:	781b      	ldrb	r3, [r3, #0]
    af8a:	b25b      	sxtb	r3, r3
    af8c:	2b00      	cmp	r3, #0
    af8e:	d16a      	bne.n	b066 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    af90:	687b      	ldr	r3, [r7, #4]
    af92:	791b      	ldrb	r3, [r3, #4]
    af94:	021b      	lsls	r3, r3, #8
    af96:	b21a      	sxth	r2, r3
    af98:	687b      	ldr	r3, [r7, #4]
    af9a:	795b      	ldrb	r3, [r3, #5]
    af9c:	011b      	lsls	r3, r3, #4
    af9e:	b21b      	sxth	r3, r3
    afa0:	21ff      	movs	r1, #255	; 0xff
    afa2:	400b      	ands	r3, r1
    afa4:	b21b      	sxth	r3, r3
    afa6:	4313      	orrs	r3, r2
    afa8:	b21a      	sxth	r2, r3
    afaa:	687b      	ldr	r3, [r7, #4]
    afac:	799b      	ldrb	r3, [r3, #6]
    afae:	b21b      	sxth	r3, r3
    afb0:	210f      	movs	r1, #15
    afb2:	400b      	ands	r3, r1
    afb4:	b21b      	sxth	r3, r3
    afb6:	4313      	orrs	r3, r2
    afb8:	b21a      	sxth	r2, r3
    afba:	231c      	movs	r3, #28
    afbc:	18fb      	adds	r3, r7, r3
    afbe:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    afc0:	231a      	movs	r3, #26
    afc2:	18fb      	adds	r3, r7, r3
    afc4:	4a31      	ldr	r2, [pc, #196]	; (b08c <nm_get_firmware_full_info+0x1c8>)
    afc6:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    afc8:	687b      	ldr	r3, [r7, #4]
    afca:	79db      	ldrb	r3, [r3, #7]
    afcc:	021b      	lsls	r3, r3, #8
    afce:	b21a      	sxth	r2, r3
    afd0:	687b      	ldr	r3, [r7, #4]
    afd2:	7a1b      	ldrb	r3, [r3, #8]
    afd4:	011b      	lsls	r3, r3, #4
    afd6:	b21b      	sxth	r3, r3
    afd8:	21ff      	movs	r1, #255	; 0xff
    afda:	400b      	ands	r3, r1
    afdc:	b21b      	sxth	r3, r3
    afde:	4313      	orrs	r3, r2
    afe0:	b21a      	sxth	r2, r3
    afe2:	687b      	ldr	r3, [r7, #4]
    afe4:	7a5b      	ldrb	r3, [r3, #9]
    afe6:	b21b      	sxth	r3, r3
    afe8:	210f      	movs	r1, #15
    afea:	400b      	ands	r3, r1
    afec:	b21b      	sxth	r3, r3
    afee:	4313      	orrs	r3, r2
    aff0:	b21a      	sxth	r2, r3
    aff2:	2318      	movs	r3, #24
    aff4:	18fb      	adds	r3, r7, r3
    aff6:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    aff8:	231c      	movs	r3, #28
    affa:	18fb      	adds	r3, r7, r3
    affc:	881b      	ldrh	r3, [r3, #0]
    affe:	2b00      	cmp	r3, #0
    b000:	d009      	beq.n	b016 <nm_get_firmware_full_info+0x152>
    b002:	2318      	movs	r3, #24
    b004:	18fb      	adds	r3, r7, r3
    b006:	881b      	ldrh	r3, [r3, #0]
    b008:	2b00      	cmp	r3, #0
    b00a:	d004      	beq.n	b016 <nm_get_firmware_full_info+0x152>
    b00c:	2318      	movs	r3, #24
    b00e:	18fb      	adds	r3, r7, r3
    b010:	881b      	ldrh	r3, [r3, #0]
    b012:	2b00      	cmp	r3, #0
    b014:	d104      	bne.n	b020 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    b016:	231f      	movs	r3, #31
    b018:	18fb      	adds	r3, r7, r3
    b01a:	22f4      	movs	r2, #244	; 0xf4
    b01c:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    b01e:	e022      	b.n	b066 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    b020:	231a      	movs	r3, #26
    b022:	18fa      	adds	r2, r7, r3
    b024:	2318      	movs	r3, #24
    b026:	18fb      	adds	r3, r7, r3
    b028:	8812      	ldrh	r2, [r2, #0]
    b02a:	881b      	ldrh	r3, [r3, #0]
    b02c:	429a      	cmp	r2, r3
    b02e:	d204      	bcs.n	b03a <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    b030:	231f      	movs	r3, #31
    b032:	18fb      	adds	r3, r7, r3
    b034:	22f3      	movs	r2, #243	; 0xf3
    b036:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    b038:	e015      	b.n	b066 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    b03a:	231a      	movs	r3, #26
    b03c:	18fa      	adds	r2, r7, r3
    b03e:	231c      	movs	r3, #28
    b040:	18fb      	adds	r3, r7, r3
    b042:	8812      	ldrh	r2, [r2, #0]
    b044:	881b      	ldrh	r3, [r3, #0]
    b046:	429a      	cmp	r2, r3
    b048:	d90d      	bls.n	b066 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    b04a:	231f      	movs	r3, #31
    b04c:	18fb      	adds	r3, r7, r3
    b04e:	22f3      	movs	r2, #243	; 0xf3
    b050:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    b052:	e008      	b.n	b066 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    b054:	231f      	movs	r3, #31
    b056:	18fb      	adds	r3, r7, r3
    b058:	22f4      	movs	r2, #244	; 0xf4
    b05a:	701a      	strb	r2, [r3, #0]
    b05c:	e003      	b.n	b066 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    b05e:	231f      	movs	r3, #31
    b060:	18fb      	adds	r3, r7, r3
    b062:	22f4      	movs	r2, #244	; 0xf4
    b064:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    b066:	231f      	movs	r3, #31
    b068:	18fb      	adds	r3, r7, r3
    b06a:	781b      	ldrb	r3, [r3, #0]
    b06c:	b25b      	sxtb	r3, r3
}
    b06e:	0018      	movs	r0, r3
    b070:	46bd      	mov	sp, r7
    b072:	b009      	add	sp, #36	; 0x24
    b074:	bd90      	pop	{r4, r7, pc}
    b076:	46c0      	nop			; (mov r8, r8)
    b078:	00016c07 	.word	0x00016c07
    b07c:	00008c25 	.word	0x00008c25
    b080:	000c0008 	.word	0x000c0008
    b084:	0000ac8d 	.word	0x0000ac8d
    b088:	0000ad01 	.word	0x0000ad01
    b08c:	00001352 	.word	0x00001352

0000b090 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    b090:	b590      	push	{r4, r7, lr}
    b092:	b085      	sub	sp, #20
    b094:	af00      	add	r7, sp, #0
    b096:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    b098:	230f      	movs	r3, #15
    b09a:	18fb      	adds	r3, r7, r3
    b09c:	2200      	movs	r2, #0
    b09e:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    b0a0:	687b      	ldr	r3, [r7, #4]
    b0a2:	2b00      	cmp	r3, #0
    b0a4:	d013      	beq.n	b0ce <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    b0a6:	230e      	movs	r3, #14
    b0a8:	18fb      	adds	r3, r7, r3
    b0aa:	687a      	ldr	r2, [r7, #4]
    b0ac:	7812      	ldrb	r2, [r2, #0]
    b0ae:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    b0b0:	230e      	movs	r3, #14
    b0b2:	18fb      	adds	r3, r7, r3
    b0b4:	781b      	ldrb	r3, [r3, #0]
    b0b6:	2b00      	cmp	r3, #0
    b0b8:	d004      	beq.n	b0c4 <nm_drv_init+0x34>
    b0ba:	230e      	movs	r3, #14
    b0bc:	18fb      	adds	r3, r7, r3
    b0be:	781b      	ldrb	r3, [r3, #0]
    b0c0:	2b04      	cmp	r3, #4
    b0c2:	d908      	bls.n	b0d6 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    b0c4:	230e      	movs	r3, #14
    b0c6:	18fb      	adds	r3, r7, r3
    b0c8:	2201      	movs	r2, #1
    b0ca:	701a      	strb	r2, [r3, #0]
    b0cc:	e003      	b.n	b0d6 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    b0ce:	230e      	movs	r3, #14
    b0d0:	18fb      	adds	r3, r7, r3
    b0d2:	2201      	movs	r2, #1
    b0d4:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    b0d6:	230f      	movs	r3, #15
    b0d8:	18fc      	adds	r4, r7, r3
    b0da:	2000      	movs	r0, #0
    b0dc:	4b41      	ldr	r3, [pc, #260]	; (b1e4 <nm_drv_init+0x154>)
    b0de:	4798      	blx	r3
    b0e0:	0003      	movs	r3, r0
    b0e2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b0e4:	230f      	movs	r3, #15
    b0e6:	18fb      	adds	r3, r7, r3
    b0e8:	781b      	ldrb	r3, [r3, #0]
    b0ea:	b25b      	sxtb	r3, r3
    b0ec:	2b00      	cmp	r3, #0
    b0ee:	d00f      	beq.n	b110 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    b0f0:	2328      	movs	r3, #40	; 0x28
    b0f2:	33ff      	adds	r3, #255	; 0xff
    b0f4:	001a      	movs	r2, r3
    b0f6:	493c      	ldr	r1, [pc, #240]	; (b1e8 <nm_drv_init+0x158>)
    b0f8:	4b3c      	ldr	r3, [pc, #240]	; (b1ec <nm_drv_init+0x15c>)
    b0fa:	0018      	movs	r0, r3
    b0fc:	4b3c      	ldr	r3, [pc, #240]	; (b1f0 <nm_drv_init+0x160>)
    b0fe:	4798      	blx	r3
    b100:	4b3c      	ldr	r3, [pc, #240]	; (b1f4 <nm_drv_init+0x164>)
    b102:	0018      	movs	r0, r3
    b104:	4b3c      	ldr	r3, [pc, #240]	; (b1f8 <nm_drv_init+0x168>)
    b106:	4798      	blx	r3
    b108:	200d      	movs	r0, #13
    b10a:	4b3c      	ldr	r3, [pc, #240]	; (b1fc <nm_drv_init+0x16c>)
    b10c:	4798      	blx	r3
		goto ERR1;
    b10e:	e060      	b.n	b1d2 <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    b110:	4b3b      	ldr	r3, [pc, #236]	; (b200 <nm_drv_init+0x170>)
    b112:	0018      	movs	r0, r3
    b114:	4b36      	ldr	r3, [pc, #216]	; (b1f0 <nm_drv_init+0x160>)
    b116:	4798      	blx	r3
    b118:	4b3a      	ldr	r3, [pc, #232]	; (b204 <nm_drv_init+0x174>)
    b11a:	4798      	blx	r3
    b11c:	0002      	movs	r2, r0
    b11e:	4b3a      	ldr	r3, [pc, #232]	; (b208 <nm_drv_init+0x178>)
    b120:	0011      	movs	r1, r2
    b122:	0018      	movs	r0, r3
    b124:	4b32      	ldr	r3, [pc, #200]	; (b1f0 <nm_drv_init+0x160>)
    b126:	4798      	blx	r3
    b128:	200d      	movs	r0, #13
    b12a:	4b34      	ldr	r3, [pc, #208]	; (b1fc <nm_drv_init+0x16c>)
    b12c:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    b12e:	4b37      	ldr	r3, [pc, #220]	; (b20c <nm_drv_init+0x17c>)
    b130:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    b132:	230f      	movs	r3, #15
    b134:	18fc      	adds	r4, r7, r3
    b136:	230e      	movs	r3, #14
    b138:	18fb      	adds	r3, r7, r3
    b13a:	781b      	ldrb	r3, [r3, #0]
    b13c:	0018      	movs	r0, r3
    b13e:	4b34      	ldr	r3, [pc, #208]	; (b210 <nm_drv_init+0x180>)
    b140:	4798      	blx	r3
    b142:	0003      	movs	r3, r0
    b144:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b146:	230f      	movs	r3, #15
    b148:	18fb      	adds	r3, r7, r3
    b14a:	781b      	ldrb	r3, [r3, #0]
    b14c:	b25b      	sxtb	r3, r3
    b14e:	2b00      	cmp	r3, #0
    b150:	d13a      	bne.n	b1c8 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    b152:	230f      	movs	r3, #15
    b154:	18fc      	adds	r4, r7, r3
    b156:	230e      	movs	r3, #14
    b158:	18fb      	adds	r3, r7, r3
    b15a:	781b      	ldrb	r3, [r3, #0]
    b15c:	0018      	movs	r0, r3
    b15e:	4b2d      	ldr	r3, [pc, #180]	; (b214 <nm_drv_init+0x184>)
    b160:	4798      	blx	r3
    b162:	0003      	movs	r3, r0
    b164:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b166:	230f      	movs	r3, #15
    b168:	18fb      	adds	r3, r7, r3
    b16a:	781b      	ldrb	r3, [r3, #0]
    b16c:	b25b      	sxtb	r3, r3
    b16e:	2b00      	cmp	r3, #0
    b170:	d12c      	bne.n	b1cc <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    b172:	230e      	movs	r3, #14
    b174:	18fb      	adds	r3, r7, r3
    b176:	781b      	ldrb	r3, [r3, #0]
    b178:	2b02      	cmp	r3, #2
    b17a:	d02a      	beq.n	b1d2 <nm_drv_init+0x142>
    b17c:	230e      	movs	r3, #14
    b17e:	18fb      	adds	r3, r7, r3
    b180:	781b      	ldrb	r3, [r3, #0]
    b182:	2b03      	cmp	r3, #3
    b184:	d025      	beq.n	b1d2 <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    b186:	230f      	movs	r3, #15
    b188:	18fc      	adds	r4, r7, r3
    b18a:	4b23      	ldr	r3, [pc, #140]	; (b218 <nm_drv_init+0x188>)
    b18c:	4798      	blx	r3
    b18e:	0003      	movs	r3, r0
    b190:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b192:	230f      	movs	r3, #15
    b194:	18fb      	adds	r3, r7, r3
    b196:	781b      	ldrb	r3, [r3, #0]
    b198:	b25b      	sxtb	r3, r3
    b19a:	2b00      	cmp	r3, #0
    b19c:	d00f      	beq.n	b1be <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    b19e:	2356      	movs	r3, #86	; 0x56
    b1a0:	33ff      	adds	r3, #255	; 0xff
    b1a2:	001a      	movs	r2, r3
    b1a4:	4910      	ldr	r1, [pc, #64]	; (b1e8 <nm_drv_init+0x158>)
    b1a6:	4b11      	ldr	r3, [pc, #68]	; (b1ec <nm_drv_init+0x15c>)
    b1a8:	0018      	movs	r0, r3
    b1aa:	4b11      	ldr	r3, [pc, #68]	; (b1f0 <nm_drv_init+0x160>)
    b1ac:	4798      	blx	r3
    b1ae:	4b1b      	ldr	r3, [pc, #108]	; (b21c <nm_drv_init+0x18c>)
    b1b0:	0018      	movs	r0, r3
    b1b2:	4b11      	ldr	r3, [pc, #68]	; (b1f8 <nm_drv_init+0x168>)
    b1b4:	4798      	blx	r3
    b1b6:	200d      	movs	r0, #13
    b1b8:	4b10      	ldr	r3, [pc, #64]	; (b1fc <nm_drv_init+0x16c>)
    b1ba:	4798      	blx	r3
		goto ERR2;
    b1bc:	e007      	b.n	b1ce <nm_drv_init+0x13e>
	}
	return ret;
    b1be:	230f      	movs	r3, #15
    b1c0:	18fb      	adds	r3, r7, r3
    b1c2:	781b      	ldrb	r3, [r3, #0]
    b1c4:	b25b      	sxtb	r3, r3
    b1c6:	e008      	b.n	b1da <nm_drv_init+0x14a>
		goto ERR2;
    b1c8:	46c0      	nop			; (mov r8, r8)
    b1ca:	e000      	b.n	b1ce <nm_drv_init+0x13e>
		goto ERR2;
    b1cc:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    b1ce:	4b14      	ldr	r3, [pc, #80]	; (b220 <nm_drv_init+0x190>)
    b1d0:	4798      	blx	r3
ERR1:
	return ret;
    b1d2:	230f      	movs	r3, #15
    b1d4:	18fb      	adds	r3, r7, r3
    b1d6:	781b      	ldrb	r3, [r3, #0]
    b1d8:	b25b      	sxtb	r3, r3
}
    b1da:	0018      	movs	r0, r3
    b1dc:	46bd      	mov	sp, r7
    b1de:	b005      	add	sp, #20
    b1e0:	bd90      	pop	{r4, r7, pc}
    b1e2:	46c0      	nop			; (mov r8, r8)
    b1e4:	0000abf1 	.word	0x0000abf1
    b1e8:	00018bbc 	.word	0x00018bbc
    b1ec:	00018af0 	.word	0x00018af0
    b1f0:	00016d69 	.word	0x00016d69
    b1f4:	00018b04 	.word	0x00018b04
    b1f8:	00016e85 	.word	0x00016e85
    b1fc:	00016d9d 	.word	0x00016d9d
    b200:	00018b20 	.word	0x00018b20
    b204:	0000a591 	.word	0x0000a591
    b208:	00018b2c 	.word	0x00018b2c
    b20c:	0000c565 	.word	0x0000c565
    b210:	0000a8e5 	.word	0x0000a8e5
    b214:	0000aa7d 	.word	0x0000aa7d
    b218:	0000a4dd 	.word	0x0000a4dd
    b21c:	00018b3c 	.word	0x00018b3c
    b220:	0000ac25 	.word	0x0000ac25

0000b224 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    b224:	b590      	push	{r4, r7, lr}
    b226:	b085      	sub	sp, #20
    b228:	af00      	add	r7, sp, #0
    b22a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    b22c:	230f      	movs	r3, #15
    b22e:	18fc      	adds	r4, r7, r3
    b230:	4b2d      	ldr	r3, [pc, #180]	; (b2e8 <nm_drv_deinit+0xc4>)
    b232:	4798      	blx	r3
    b234:	0003      	movs	r3, r0
    b236:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b238:	230f      	movs	r3, #15
    b23a:	18fb      	adds	r3, r7, r3
    b23c:	781b      	ldrb	r3, [r3, #0]
    b23e:	b25b      	sxtb	r3, r3
    b240:	2b00      	cmp	r3, #0
    b242:	d00e      	beq.n	b262 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    b244:	23b6      	movs	r3, #182	; 0xb6
    b246:	005a      	lsls	r2, r3, #1
    b248:	4928      	ldr	r1, [pc, #160]	; (b2ec <nm_drv_deinit+0xc8>)
    b24a:	4b29      	ldr	r3, [pc, #164]	; (b2f0 <nm_drv_deinit+0xcc>)
    b24c:	0018      	movs	r0, r3
    b24e:	4b29      	ldr	r3, [pc, #164]	; (b2f4 <nm_drv_deinit+0xd0>)
    b250:	4798      	blx	r3
    b252:	4b29      	ldr	r3, [pc, #164]	; (b2f8 <nm_drv_deinit+0xd4>)
    b254:	0018      	movs	r0, r3
    b256:	4b29      	ldr	r3, [pc, #164]	; (b2fc <nm_drv_deinit+0xd8>)
    b258:	4798      	blx	r3
    b25a:	200d      	movs	r0, #13
    b25c:	4b28      	ldr	r3, [pc, #160]	; (b300 <nm_drv_deinit+0xdc>)
    b25e:	4798      	blx	r3
		goto ERR1;
    b260:	e03a      	b.n	b2d8 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    b262:	230f      	movs	r3, #15
    b264:	18fc      	adds	r4, r7, r3
    b266:	2000      	movs	r0, #0
    b268:	4b26      	ldr	r3, [pc, #152]	; (b304 <nm_drv_deinit+0xe0>)
    b26a:	4798      	blx	r3
    b26c:	0003      	movs	r3, r0
    b26e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b270:	230f      	movs	r3, #15
    b272:	18fb      	adds	r3, r7, r3
    b274:	781b      	ldrb	r3, [r3, #0]
    b276:	b25b      	sxtb	r3, r3
    b278:	2b00      	cmp	r3, #0
    b27a:	d00f      	beq.n	b29c <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    b27c:	2374      	movs	r3, #116	; 0x74
    b27e:	33ff      	adds	r3, #255	; 0xff
    b280:	001a      	movs	r2, r3
    b282:	491a      	ldr	r1, [pc, #104]	; (b2ec <nm_drv_deinit+0xc8>)
    b284:	4b1a      	ldr	r3, [pc, #104]	; (b2f0 <nm_drv_deinit+0xcc>)
    b286:	0018      	movs	r0, r3
    b288:	4b1a      	ldr	r3, [pc, #104]	; (b2f4 <nm_drv_deinit+0xd0>)
    b28a:	4798      	blx	r3
    b28c:	4b1e      	ldr	r3, [pc, #120]	; (b308 <nm_drv_deinit+0xe4>)
    b28e:	0018      	movs	r0, r3
    b290:	4b1a      	ldr	r3, [pc, #104]	; (b2fc <nm_drv_deinit+0xd8>)
    b292:	4798      	blx	r3
    b294:	200d      	movs	r0, #13
    b296:	4b1a      	ldr	r3, [pc, #104]	; (b300 <nm_drv_deinit+0xdc>)
    b298:	4798      	blx	r3
		goto ERR1;
    b29a:	e01d      	b.n	b2d8 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    b29c:	230f      	movs	r3, #15
    b29e:	18fc      	adds	r4, r7, r3
    b2a0:	4b1a      	ldr	r3, [pc, #104]	; (b30c <nm_drv_deinit+0xe8>)
    b2a2:	4798      	blx	r3
    b2a4:	0003      	movs	r3, r0
    b2a6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b2a8:	230f      	movs	r3, #15
    b2aa:	18fb      	adds	r3, r7, r3
    b2ac:	781b      	ldrb	r3, [r3, #0]
    b2ae:	b25b      	sxtb	r3, r3
    b2b0:	2b00      	cmp	r3, #0
    b2b2:	d00f      	beq.n	b2d4 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    b2b4:	237a      	movs	r3, #122	; 0x7a
    b2b6:	33ff      	adds	r3, #255	; 0xff
    b2b8:	001a      	movs	r2, r3
    b2ba:	490c      	ldr	r1, [pc, #48]	; (b2ec <nm_drv_deinit+0xc8>)
    b2bc:	4b0c      	ldr	r3, [pc, #48]	; (b2f0 <nm_drv_deinit+0xcc>)
    b2be:	0018      	movs	r0, r3
    b2c0:	4b0c      	ldr	r3, [pc, #48]	; (b2f4 <nm_drv_deinit+0xd0>)
    b2c2:	4798      	blx	r3
    b2c4:	4b12      	ldr	r3, [pc, #72]	; (b310 <nm_drv_deinit+0xec>)
    b2c6:	0018      	movs	r0, r3
    b2c8:	4b0c      	ldr	r3, [pc, #48]	; (b2fc <nm_drv_deinit+0xd8>)
    b2ca:	4798      	blx	r3
    b2cc:	200d      	movs	r0, #13
    b2ce:	4b0c      	ldr	r3, [pc, #48]	; (b300 <nm_drv_deinit+0xdc>)
    b2d0:	4798      	blx	r3
		goto ERR1;
    b2d2:	e001      	b.n	b2d8 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    b2d4:	4b0f      	ldr	r3, [pc, #60]	; (b314 <nm_drv_deinit+0xf0>)
    b2d6:	4798      	blx	r3
#endif

ERR1:
	return ret;
    b2d8:	230f      	movs	r3, #15
    b2da:	18fb      	adds	r3, r7, r3
    b2dc:	781b      	ldrb	r3, [r3, #0]
    b2de:	b25b      	sxtb	r3, r3
}
    b2e0:	0018      	movs	r0, r3
    b2e2:	46bd      	mov	sp, r7
    b2e4:	b005      	add	sp, #20
    b2e6:	bd90      	pop	{r4, r7, pc}
    b2e8:	0000ab31 	.word	0x0000ab31
    b2ec:	00018bc8 	.word	0x00018bc8
    b2f0:	00018af0 	.word	0x00018af0
    b2f4:	00016d69 	.word	0x00016d69
    b2f8:	00018b5c 	.word	0x00018b5c
    b2fc:	00016e85 	.word	0x00016e85
    b300:	00016d9d 	.word	0x00016d9d
    b304:	0000d9bd 	.word	0x0000d9bd
    b308:	00018b7c 	.word	0x00018b7c
    b30c:	0000ac25 	.word	0x0000ac25
    b310:	00018ba0 	.word	0x00018ba0
    b314:	0000c6b1 	.word	0x0000c6b1

0000b318 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    b318:	b580      	push	{r7, lr}
    b31a:	b086      	sub	sp, #24
    b31c:	af00      	add	r7, sp, #0
    b31e:	6078      	str	r0, [r7, #4]
    b320:	000a      	movs	r2, r1
    b322:	1cbb      	adds	r3, r7, #2
    b324:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    b326:	230c      	movs	r3, #12
    b328:	18fb      	adds	r3, r7, r3
    b32a:	2200      	movs	r2, #0
    b32c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    b32e:	230c      	movs	r3, #12
    b330:	18fb      	adds	r3, r7, r3
    b332:	687a      	ldr	r2, [r7, #4]
    b334:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    b336:	230c      	movs	r3, #12
    b338:	18fb      	adds	r3, r7, r3
    b33a:	1cba      	adds	r2, r7, #2
    b33c:	8812      	ldrh	r2, [r2, #0]
    b33e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    b340:	230c      	movs	r3, #12
    b342:	18fb      	adds	r3, r7, r3
    b344:	0019      	movs	r1, r3
    b346:	2003      	movs	r0, #3
    b348:	4b03      	ldr	r3, [pc, #12]	; (b358 <nmi_spi_read+0x40>)
    b34a:	4798      	blx	r3
    b34c:	0003      	movs	r3, r0
}
    b34e:	0018      	movs	r0, r3
    b350:	46bd      	mov	sp, r7
    b352:	b006      	add	sp, #24
    b354:	bd80      	pop	{r7, pc}
    b356:	46c0      	nop			; (mov r8, r8)
    b358:	00008ae5 	.word	0x00008ae5

0000b35c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    b35c:	b580      	push	{r7, lr}
    b35e:	b086      	sub	sp, #24
    b360:	af00      	add	r7, sp, #0
    b362:	6078      	str	r0, [r7, #4]
    b364:	000a      	movs	r2, r1
    b366:	1cbb      	adds	r3, r7, #2
    b368:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    b36a:	230c      	movs	r3, #12
    b36c:	18fb      	adds	r3, r7, r3
    b36e:	687a      	ldr	r2, [r7, #4]
    b370:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    b372:	230c      	movs	r3, #12
    b374:	18fb      	adds	r3, r7, r3
    b376:	2200      	movs	r2, #0
    b378:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    b37a:	230c      	movs	r3, #12
    b37c:	18fb      	adds	r3, r7, r3
    b37e:	1cba      	adds	r2, r7, #2
    b380:	8812      	ldrh	r2, [r2, #0]
    b382:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    b384:	230c      	movs	r3, #12
    b386:	18fb      	adds	r3, r7, r3
    b388:	0019      	movs	r1, r3
    b38a:	2003      	movs	r0, #3
    b38c:	4b03      	ldr	r3, [pc, #12]	; (b39c <nmi_spi_write+0x40>)
    b38e:	4798      	blx	r3
    b390:	0003      	movs	r3, r0
}
    b392:	0018      	movs	r0, r3
    b394:	46bd      	mov	sp, r7
    b396:	b006      	add	sp, #24
    b398:	bd80      	pop	{r7, pc}
    b39a:	46c0      	nop			; (mov r8, r8)
    b39c:	00008ae5 	.word	0x00008ae5

0000b3a0 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    b3a0:	b580      	push	{r7, lr}
    b3a2:	b082      	sub	sp, #8
    b3a4:	af00      	add	r7, sp, #0
    b3a6:	0002      	movs	r2, r0
    b3a8:	1dfb      	adds	r3, r7, #7
    b3aa:	701a      	strb	r2, [r3, #0]
    b3ac:	1dbb      	adds	r3, r7, #6
    b3ae:	1c0a      	adds	r2, r1, #0
    b3b0:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    b3b2:	1dfb      	adds	r3, r7, #7
    b3b4:	781b      	ldrb	r3, [r3, #0]
    b3b6:	005a      	lsls	r2, r3, #1
    b3b8:	1dbb      	adds	r3, r7, #6
    b3ba:	781b      	ldrb	r3, [r3, #0]
    b3bc:	4053      	eors	r3, r2
    b3be:	4a03      	ldr	r2, [pc, #12]	; (b3cc <crc7_byte+0x2c>)
    b3c0:	5cd3      	ldrb	r3, [r2, r3]
}
    b3c2:	0018      	movs	r0, r3
    b3c4:	46bd      	mov	sp, r7
    b3c6:	b002      	add	sp, #8
    b3c8:	bd80      	pop	{r7, pc}
    b3ca:	46c0      	nop			; (mov r8, r8)
    b3cc:	00018bd8 	.word	0x00018bd8

0000b3d0 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    b3d0:	b590      	push	{r4, r7, lr}
    b3d2:	b085      	sub	sp, #20
    b3d4:	af00      	add	r7, sp, #0
    b3d6:	60b9      	str	r1, [r7, #8]
    b3d8:	607a      	str	r2, [r7, #4]
    b3da:	230f      	movs	r3, #15
    b3dc:	18fb      	adds	r3, r7, r3
    b3de:	1c02      	adds	r2, r0, #0
    b3e0:	701a      	strb	r2, [r3, #0]
	while (len--)
    b3e2:	e00e      	b.n	b402 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    b3e4:	68bb      	ldr	r3, [r7, #8]
    b3e6:	1c5a      	adds	r2, r3, #1
    b3e8:	60ba      	str	r2, [r7, #8]
    b3ea:	781a      	ldrb	r2, [r3, #0]
    b3ec:	230f      	movs	r3, #15
    b3ee:	18fc      	adds	r4, r7, r3
    b3f0:	230f      	movs	r3, #15
    b3f2:	18fb      	adds	r3, r7, r3
    b3f4:	781b      	ldrb	r3, [r3, #0]
    b3f6:	0011      	movs	r1, r2
    b3f8:	0018      	movs	r0, r3
    b3fa:	4b08      	ldr	r3, [pc, #32]	; (b41c <crc7+0x4c>)
    b3fc:	4798      	blx	r3
    b3fe:	0003      	movs	r3, r0
    b400:	7023      	strb	r3, [r4, #0]
	while (len--)
    b402:	687b      	ldr	r3, [r7, #4]
    b404:	1e5a      	subs	r2, r3, #1
    b406:	607a      	str	r2, [r7, #4]
    b408:	2b00      	cmp	r3, #0
    b40a:	d1eb      	bne.n	b3e4 <crc7+0x14>
	return crc;
    b40c:	230f      	movs	r3, #15
    b40e:	18fb      	adds	r3, r7, r3
    b410:	781b      	ldrb	r3, [r3, #0]
}
    b412:	0018      	movs	r0, r3
    b414:	46bd      	mov	sp, r7
    b416:	b005      	add	sp, #20
    b418:	bd90      	pop	{r4, r7, pc}
    b41a:	46c0      	nop			; (mov r8, r8)
    b41c:	0000b3a1 	.word	0x0000b3a1

0000b420 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    b420:	b590      	push	{r4, r7, lr}
    b422:	b089      	sub	sp, #36	; 0x24
    b424:	af00      	add	r7, sp, #0
    b426:	60b9      	str	r1, [r7, #8]
    b428:	607a      	str	r2, [r7, #4]
    b42a:	603b      	str	r3, [r7, #0]
    b42c:	230f      	movs	r3, #15
    b42e:	18fb      	adds	r3, r7, r3
    b430:	1c02      	adds	r2, r0, #0
    b432:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    b434:	231f      	movs	r3, #31
    b436:	18fb      	adds	r3, r7, r3
    b438:	2205      	movs	r2, #5
    b43a:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    b43c:	231e      	movs	r3, #30
    b43e:	18fb      	adds	r3, r7, r3
    b440:	2201      	movs	r2, #1
    b442:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    b444:	2314      	movs	r3, #20
    b446:	18fb      	adds	r3, r7, r3
    b448:	220f      	movs	r2, #15
    b44a:	18ba      	adds	r2, r7, r2
    b44c:	7812      	ldrb	r2, [r2, #0]
    b44e:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    b450:	230f      	movs	r3, #15
    b452:	18fb      	adds	r3, r7, r3
    b454:	781b      	ldrb	r3, [r3, #0]
    b456:	3bc1      	subs	r3, #193	; 0xc1
    b458:	2b0e      	cmp	r3, #14
    b45a:	d900      	bls.n	b45e <spi_cmd+0x3e>
    b45c:	e11b      	b.n	b696 <spi_cmd+0x276>
    b45e:	009a      	lsls	r2, r3, #2
    b460:	4bb6      	ldr	r3, [pc, #728]	; (b73c <spi_cmd+0x31c>)
    b462:	18d3      	adds	r3, r2, r3
    b464:	681b      	ldr	r3, [r3, #0]
    b466:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    b468:	68bb      	ldr	r3, [r7, #8]
    b46a:	0c1b      	lsrs	r3, r3, #16
    b46c:	b2da      	uxtb	r2, r3
    b46e:	2314      	movs	r3, #20
    b470:	18fb      	adds	r3, r7, r3
    b472:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b474:	68bb      	ldr	r3, [r7, #8]
    b476:	0a1b      	lsrs	r3, r3, #8
    b478:	b2da      	uxtb	r2, r3
    b47a:	2314      	movs	r3, #20
    b47c:	18fb      	adds	r3, r7, r3
    b47e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    b480:	68bb      	ldr	r3, [r7, #8]
    b482:	b2da      	uxtb	r2, r3
    b484:	2314      	movs	r3, #20
    b486:	18fb      	adds	r3, r7, r3
    b488:	70da      	strb	r2, [r3, #3]
		len = 5;
    b48a:	231f      	movs	r3, #31
    b48c:	18fb      	adds	r3, r7, r3
    b48e:	2205      	movs	r2, #5
    b490:	701a      	strb	r2, [r3, #0]
		break;
    b492:	e105      	b.n	b6a0 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    b494:	68bb      	ldr	r3, [r7, #8]
    b496:	0a1b      	lsrs	r3, r3, #8
    b498:	b2da      	uxtb	r2, r3
    b49a:	2314      	movs	r3, #20
    b49c:	18fb      	adds	r3, r7, r3
    b49e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    b4a0:	2330      	movs	r3, #48	; 0x30
    b4a2:	18fb      	adds	r3, r7, r3
    b4a4:	781b      	ldrb	r3, [r3, #0]
    b4a6:	2b00      	cmp	r3, #0
    b4a8:	d009      	beq.n	b4be <spi_cmd+0x9e>
    b4aa:	2314      	movs	r3, #20
    b4ac:	18fb      	adds	r3, r7, r3
    b4ae:	785b      	ldrb	r3, [r3, #1]
    b4b0:	2280      	movs	r2, #128	; 0x80
    b4b2:	4252      	negs	r2, r2
    b4b4:	4313      	orrs	r3, r2
    b4b6:	b2da      	uxtb	r2, r3
    b4b8:	2314      	movs	r3, #20
    b4ba:	18fb      	adds	r3, r7, r3
    b4bc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    b4be:	68bb      	ldr	r3, [r7, #8]
    b4c0:	b2da      	uxtb	r2, r3
    b4c2:	2314      	movs	r3, #20
    b4c4:	18fb      	adds	r3, r7, r3
    b4c6:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b4c8:	2314      	movs	r3, #20
    b4ca:	18fb      	adds	r3, r7, r3
    b4cc:	2200      	movs	r2, #0
    b4ce:	70da      	strb	r2, [r3, #3]
		len = 5;
    b4d0:	231f      	movs	r3, #31
    b4d2:	18fb      	adds	r3, r7, r3
    b4d4:	2205      	movs	r2, #5
    b4d6:	701a      	strb	r2, [r3, #0]
		break;
    b4d8:	e0e2      	b.n	b6a0 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    b4da:	2314      	movs	r3, #20
    b4dc:	18fb      	adds	r3, r7, r3
    b4de:	2200      	movs	r2, #0
    b4e0:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    b4e2:	2314      	movs	r3, #20
    b4e4:	18fb      	adds	r3, r7, r3
    b4e6:	2200      	movs	r2, #0
    b4e8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b4ea:	2314      	movs	r3, #20
    b4ec:	18fb      	adds	r3, r7, r3
    b4ee:	2200      	movs	r2, #0
    b4f0:	70da      	strb	r2, [r3, #3]
		len = 5;
    b4f2:	231f      	movs	r3, #31
    b4f4:	18fb      	adds	r3, r7, r3
    b4f6:	2205      	movs	r2, #5
    b4f8:	701a      	strb	r2, [r3, #0]
		break;
    b4fa:	e0d1      	b.n	b6a0 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    b4fc:	2314      	movs	r3, #20
    b4fe:	18fb      	adds	r3, r7, r3
    b500:	2200      	movs	r2, #0
    b502:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    b504:	2314      	movs	r3, #20
    b506:	18fb      	adds	r3, r7, r3
    b508:	2200      	movs	r2, #0
    b50a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b50c:	2314      	movs	r3, #20
    b50e:	18fb      	adds	r3, r7, r3
    b510:	2200      	movs	r2, #0
    b512:	70da      	strb	r2, [r3, #3]
		len = 5;
    b514:	231f      	movs	r3, #31
    b516:	18fb      	adds	r3, r7, r3
    b518:	2205      	movs	r2, #5
    b51a:	701a      	strb	r2, [r3, #0]
		break;
    b51c:	e0c0      	b.n	b6a0 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    b51e:	2314      	movs	r3, #20
    b520:	18fb      	adds	r3, r7, r3
    b522:	22ff      	movs	r2, #255	; 0xff
    b524:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    b526:	2314      	movs	r3, #20
    b528:	18fb      	adds	r3, r7, r3
    b52a:	22ff      	movs	r2, #255	; 0xff
    b52c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    b52e:	2314      	movs	r3, #20
    b530:	18fb      	adds	r3, r7, r3
    b532:	22ff      	movs	r2, #255	; 0xff
    b534:	70da      	strb	r2, [r3, #3]
		len = 5;
    b536:	231f      	movs	r3, #31
    b538:	18fb      	adds	r3, r7, r3
    b53a:	2205      	movs	r2, #5
    b53c:	701a      	strb	r2, [r3, #0]
		break;
    b53e:	e0af      	b.n	b6a0 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    b540:	68bb      	ldr	r3, [r7, #8]
    b542:	0c1b      	lsrs	r3, r3, #16
    b544:	b2da      	uxtb	r2, r3
    b546:	2314      	movs	r3, #20
    b548:	18fb      	adds	r3, r7, r3
    b54a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b54c:	68bb      	ldr	r3, [r7, #8]
    b54e:	0a1b      	lsrs	r3, r3, #8
    b550:	b2da      	uxtb	r2, r3
    b552:	2314      	movs	r3, #20
    b554:	18fb      	adds	r3, r7, r3
    b556:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    b558:	68bb      	ldr	r3, [r7, #8]
    b55a:	b2da      	uxtb	r2, r3
    b55c:	2314      	movs	r3, #20
    b55e:	18fb      	adds	r3, r7, r3
    b560:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    b562:	683b      	ldr	r3, [r7, #0]
    b564:	0a1b      	lsrs	r3, r3, #8
    b566:	b2da      	uxtb	r2, r3
    b568:	2314      	movs	r3, #20
    b56a:	18fb      	adds	r3, r7, r3
    b56c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    b56e:	683b      	ldr	r3, [r7, #0]
    b570:	b2da      	uxtb	r2, r3
    b572:	2314      	movs	r3, #20
    b574:	18fb      	adds	r3, r7, r3
    b576:	715a      	strb	r2, [r3, #5]
		len = 7;
    b578:	231f      	movs	r3, #31
    b57a:	18fb      	adds	r3, r7, r3
    b57c:	2207      	movs	r2, #7
    b57e:	701a      	strb	r2, [r3, #0]
		break;
    b580:	e08e      	b.n	b6a0 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    b582:	68bb      	ldr	r3, [r7, #8]
    b584:	0c1b      	lsrs	r3, r3, #16
    b586:	b2da      	uxtb	r2, r3
    b588:	2314      	movs	r3, #20
    b58a:	18fb      	adds	r3, r7, r3
    b58c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b58e:	68bb      	ldr	r3, [r7, #8]
    b590:	0a1b      	lsrs	r3, r3, #8
    b592:	b2da      	uxtb	r2, r3
    b594:	2314      	movs	r3, #20
    b596:	18fb      	adds	r3, r7, r3
    b598:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    b59a:	68bb      	ldr	r3, [r7, #8]
    b59c:	b2da      	uxtb	r2, r3
    b59e:	2314      	movs	r3, #20
    b5a0:	18fb      	adds	r3, r7, r3
    b5a2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    b5a4:	683b      	ldr	r3, [r7, #0]
    b5a6:	0c1b      	lsrs	r3, r3, #16
    b5a8:	b2da      	uxtb	r2, r3
    b5aa:	2314      	movs	r3, #20
    b5ac:	18fb      	adds	r3, r7, r3
    b5ae:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    b5b0:	683b      	ldr	r3, [r7, #0]
    b5b2:	0a1b      	lsrs	r3, r3, #8
    b5b4:	b2da      	uxtb	r2, r3
    b5b6:	2314      	movs	r3, #20
    b5b8:	18fb      	adds	r3, r7, r3
    b5ba:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    b5bc:	683b      	ldr	r3, [r7, #0]
    b5be:	b2da      	uxtb	r2, r3
    b5c0:	2314      	movs	r3, #20
    b5c2:	18fb      	adds	r3, r7, r3
    b5c4:	719a      	strb	r2, [r3, #6]
		len = 8;
    b5c6:	231f      	movs	r3, #31
    b5c8:	18fb      	adds	r3, r7, r3
    b5ca:	2208      	movs	r2, #8
    b5cc:	701a      	strb	r2, [r3, #0]
		break;
    b5ce:	e067      	b.n	b6a0 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    b5d0:	68bb      	ldr	r3, [r7, #8]
    b5d2:	0a1b      	lsrs	r3, r3, #8
    b5d4:	b2da      	uxtb	r2, r3
    b5d6:	2314      	movs	r3, #20
    b5d8:	18fb      	adds	r3, r7, r3
    b5da:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    b5dc:	2330      	movs	r3, #48	; 0x30
    b5de:	18fb      	adds	r3, r7, r3
    b5e0:	781b      	ldrb	r3, [r3, #0]
    b5e2:	2b00      	cmp	r3, #0
    b5e4:	d009      	beq.n	b5fa <spi_cmd+0x1da>
    b5e6:	2314      	movs	r3, #20
    b5e8:	18fb      	adds	r3, r7, r3
    b5ea:	785b      	ldrb	r3, [r3, #1]
    b5ec:	2280      	movs	r2, #128	; 0x80
    b5ee:	4252      	negs	r2, r2
    b5f0:	4313      	orrs	r3, r2
    b5f2:	b2da      	uxtb	r2, r3
    b5f4:	2314      	movs	r3, #20
    b5f6:	18fb      	adds	r3, r7, r3
    b5f8:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    b5fa:	68bb      	ldr	r3, [r7, #8]
    b5fc:	b2da      	uxtb	r2, r3
    b5fe:	2314      	movs	r3, #20
    b600:	18fb      	adds	r3, r7, r3
    b602:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    b604:	687b      	ldr	r3, [r7, #4]
    b606:	0e1b      	lsrs	r3, r3, #24
    b608:	b2da      	uxtb	r2, r3
    b60a:	2314      	movs	r3, #20
    b60c:	18fb      	adds	r3, r7, r3
    b60e:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    b610:	687b      	ldr	r3, [r7, #4]
    b612:	0c1b      	lsrs	r3, r3, #16
    b614:	b2da      	uxtb	r2, r3
    b616:	2314      	movs	r3, #20
    b618:	18fb      	adds	r3, r7, r3
    b61a:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    b61c:	687b      	ldr	r3, [r7, #4]
    b61e:	0a1b      	lsrs	r3, r3, #8
    b620:	b2da      	uxtb	r2, r3
    b622:	2314      	movs	r3, #20
    b624:	18fb      	adds	r3, r7, r3
    b626:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    b628:	687b      	ldr	r3, [r7, #4]
    b62a:	b2da      	uxtb	r2, r3
    b62c:	2314      	movs	r3, #20
    b62e:	18fb      	adds	r3, r7, r3
    b630:	719a      	strb	r2, [r3, #6]
		len = 8;
    b632:	231f      	movs	r3, #31
    b634:	18fb      	adds	r3, r7, r3
    b636:	2208      	movs	r2, #8
    b638:	701a      	strb	r2, [r3, #0]
		break;
    b63a:	e031      	b.n	b6a0 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    b63c:	68bb      	ldr	r3, [r7, #8]
    b63e:	0c1b      	lsrs	r3, r3, #16
    b640:	b2da      	uxtb	r2, r3
    b642:	2314      	movs	r3, #20
    b644:	18fb      	adds	r3, r7, r3
    b646:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b648:	68bb      	ldr	r3, [r7, #8]
    b64a:	0a1b      	lsrs	r3, r3, #8
    b64c:	b2da      	uxtb	r2, r3
    b64e:	2314      	movs	r3, #20
    b650:	18fb      	adds	r3, r7, r3
    b652:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    b654:	68bb      	ldr	r3, [r7, #8]
    b656:	b2da      	uxtb	r2, r3
    b658:	2314      	movs	r3, #20
    b65a:	18fb      	adds	r3, r7, r3
    b65c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    b65e:	687b      	ldr	r3, [r7, #4]
    b660:	0e1b      	lsrs	r3, r3, #24
    b662:	b2da      	uxtb	r2, r3
    b664:	2314      	movs	r3, #20
    b666:	18fb      	adds	r3, r7, r3
    b668:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    b66a:	687b      	ldr	r3, [r7, #4]
    b66c:	0c1b      	lsrs	r3, r3, #16
    b66e:	b2da      	uxtb	r2, r3
    b670:	2314      	movs	r3, #20
    b672:	18fb      	adds	r3, r7, r3
    b674:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    b676:	687b      	ldr	r3, [r7, #4]
    b678:	0a1b      	lsrs	r3, r3, #8
    b67a:	b2da      	uxtb	r2, r3
    b67c:	2314      	movs	r3, #20
    b67e:	18fb      	adds	r3, r7, r3
    b680:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    b682:	687b      	ldr	r3, [r7, #4]
    b684:	b2da      	uxtb	r2, r3
    b686:	2314      	movs	r3, #20
    b688:	18fb      	adds	r3, r7, r3
    b68a:	71da      	strb	r2, [r3, #7]
		len = 9;
    b68c:	231f      	movs	r3, #31
    b68e:	18fb      	adds	r3, r7, r3
    b690:	2209      	movs	r2, #9
    b692:	701a      	strb	r2, [r3, #0]
		break;
    b694:	e004      	b.n	b6a0 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    b696:	231e      	movs	r3, #30
    b698:	18fb      	adds	r3, r7, r3
    b69a:	2200      	movs	r2, #0
    b69c:	701a      	strb	r2, [r3, #0]
		break;
    b69e:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    b6a0:	231e      	movs	r3, #30
    b6a2:	18fb      	adds	r3, r7, r3
    b6a4:	781b      	ldrb	r3, [r3, #0]
    b6a6:	b25b      	sxtb	r3, r3
    b6a8:	2b00      	cmp	r3, #0
    b6aa:	d03f      	beq.n	b72c <spi_cmd+0x30c>
		if (!gu8Crc_off)
    b6ac:	4b24      	ldr	r3, [pc, #144]	; (b740 <spi_cmd+0x320>)
    b6ae:	781b      	ldrb	r3, [r3, #0]
    b6b0:	2b00      	cmp	r3, #0
    b6b2:	d115      	bne.n	b6e0 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    b6b4:	231f      	movs	r3, #31
    b6b6:	18fb      	adds	r3, r7, r3
    b6b8:	781b      	ldrb	r3, [r3, #0]
    b6ba:	1e5c      	subs	r4, r3, #1
    b6bc:	231f      	movs	r3, #31
    b6be:	18fb      	adds	r3, r7, r3
    b6c0:	781b      	ldrb	r3, [r3, #0]
    b6c2:	3b01      	subs	r3, #1
    b6c4:	001a      	movs	r2, r3
    b6c6:	2314      	movs	r3, #20
    b6c8:	18fb      	adds	r3, r7, r3
    b6ca:	0019      	movs	r1, r3
    b6cc:	207f      	movs	r0, #127	; 0x7f
    b6ce:	4b1d      	ldr	r3, [pc, #116]	; (b744 <spi_cmd+0x324>)
    b6d0:	4798      	blx	r3
    b6d2:	0003      	movs	r3, r0
    b6d4:	18db      	adds	r3, r3, r3
    b6d6:	b2da      	uxtb	r2, r3
    b6d8:	2314      	movs	r3, #20
    b6da:	18fb      	adds	r3, r7, r3
    b6dc:	551a      	strb	r2, [r3, r4]
    b6de:	e006      	b.n	b6ee <spi_cmd+0x2ce>
		else
			len-=1;
    b6e0:	231f      	movs	r3, #31
    b6e2:	18fb      	adds	r3, r7, r3
    b6e4:	221f      	movs	r2, #31
    b6e6:	18ba      	adds	r2, r7, r2
    b6e8:	7812      	ldrb	r2, [r2, #0]
    b6ea:	3a01      	subs	r2, #1
    b6ec:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    b6ee:	231f      	movs	r3, #31
    b6f0:	18fb      	adds	r3, r7, r3
    b6f2:	781b      	ldrb	r3, [r3, #0]
    b6f4:	b29a      	uxth	r2, r3
    b6f6:	2314      	movs	r3, #20
    b6f8:	18fb      	adds	r3, r7, r3
    b6fa:	0011      	movs	r1, r2
    b6fc:	0018      	movs	r0, r3
    b6fe:	4b12      	ldr	r3, [pc, #72]	; (b748 <spi_cmd+0x328>)
    b700:	4798      	blx	r3
    b702:	1e03      	subs	r3, r0, #0
    b704:	d012      	beq.n	b72c <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    b706:	2328      	movs	r3, #40	; 0x28
    b708:	33ff      	adds	r3, #255	; 0xff
    b70a:	001a      	movs	r2, r3
    b70c:	490f      	ldr	r1, [pc, #60]	; (b74c <spi_cmd+0x32c>)
    b70e:	4b10      	ldr	r3, [pc, #64]	; (b750 <spi_cmd+0x330>)
    b710:	0018      	movs	r0, r3
    b712:	4b10      	ldr	r3, [pc, #64]	; (b754 <spi_cmd+0x334>)
    b714:	4798      	blx	r3
    b716:	4b10      	ldr	r3, [pc, #64]	; (b758 <spi_cmd+0x338>)
    b718:	0018      	movs	r0, r3
    b71a:	4b10      	ldr	r3, [pc, #64]	; (b75c <spi_cmd+0x33c>)
    b71c:	4798      	blx	r3
    b71e:	200d      	movs	r0, #13
    b720:	4b0f      	ldr	r3, [pc, #60]	; (b760 <spi_cmd+0x340>)
    b722:	4798      	blx	r3
			result = N_FAIL;
    b724:	231e      	movs	r3, #30
    b726:	18fb      	adds	r3, r7, r3
    b728:	2200      	movs	r2, #0
    b72a:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    b72c:	231e      	movs	r3, #30
    b72e:	18fb      	adds	r3, r7, r3
    b730:	781b      	ldrb	r3, [r3, #0]
    b732:	b25b      	sxtb	r3, r3
}
    b734:	0018      	movs	r0, r3
    b736:	46bd      	mov	sp, r7
    b738:	b009      	add	sp, #36	; 0x24
    b73a:	bd90      	pop	{r4, r7, pc}
    b73c:	00019230 	.word	0x00019230
    b740:	20000218 	.word	0x20000218
    b744:	0000b3d1 	.word	0x0000b3d1
    b748:	0000b35d 	.word	0x0000b35d
    b74c:	0001926c 	.word	0x0001926c
    b750:	00018cd8 	.word	0x00018cd8
    b754:	00016d69 	.word	0x00016d69
    b758:	00018cec 	.word	0x00018cec
    b75c:	00016e85 	.word	0x00016e85
    b760:	00016d9d 	.word	0x00016d9d

0000b764 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    b764:	b590      	push	{r4, r7, lr}
    b766:	b085      	sub	sp, #20
    b768:	af00      	add	r7, sp, #0
    b76a:	0002      	movs	r2, r0
    b76c:	1dfb      	adds	r3, r7, #7
    b76e:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    b770:	230e      	movs	r3, #14
    b772:	18fb      	adds	r3, r7, r3
    b774:	2201      	movs	r2, #1
    b776:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    b778:	4b31      	ldr	r3, [pc, #196]	; (b840 <spi_data_rsp+0xdc>)
    b77a:	781b      	ldrb	r3, [r3, #0]
    b77c:	2b00      	cmp	r3, #0
    b77e:	d104      	bne.n	b78a <spi_data_rsp+0x26>
		len = 2;
    b780:	230f      	movs	r3, #15
    b782:	18fb      	adds	r3, r7, r3
    b784:	2202      	movs	r2, #2
    b786:	701a      	strb	r2, [r3, #0]
    b788:	e003      	b.n	b792 <spi_data_rsp+0x2e>
	else
		len = 3;
    b78a:	230f      	movs	r3, #15
    b78c:	18fb      	adds	r3, r7, r3
    b78e:	2203      	movs	r2, #3
    b790:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    b792:	230f      	movs	r3, #15
    b794:	18fb      	adds	r3, r7, r3
    b796:	781b      	ldrb	r3, [r3, #0]
    b798:	b29a      	uxth	r2, r3
    b79a:	2308      	movs	r3, #8
    b79c:	18fb      	adds	r3, r7, r3
    b79e:	0011      	movs	r1, r2
    b7a0:	0018      	movs	r0, r3
    b7a2:	4b28      	ldr	r3, [pc, #160]	; (b844 <spi_data_rsp+0xe0>)
    b7a4:	4798      	blx	r3
    b7a6:	1e03      	subs	r3, r0, #0
    b7a8:	d013      	beq.n	b7d2 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    b7aa:	233c      	movs	r3, #60	; 0x3c
    b7ac:	33ff      	adds	r3, #255	; 0xff
    b7ae:	001a      	movs	r2, r3
    b7b0:	4925      	ldr	r1, [pc, #148]	; (b848 <spi_data_rsp+0xe4>)
    b7b2:	4b26      	ldr	r3, [pc, #152]	; (b84c <spi_data_rsp+0xe8>)
    b7b4:	0018      	movs	r0, r3
    b7b6:	4b26      	ldr	r3, [pc, #152]	; (b850 <spi_data_rsp+0xec>)
    b7b8:	4798      	blx	r3
    b7ba:	4b26      	ldr	r3, [pc, #152]	; (b854 <spi_data_rsp+0xf0>)
    b7bc:	0018      	movs	r0, r3
    b7be:	4b26      	ldr	r3, [pc, #152]	; (b858 <spi_data_rsp+0xf4>)
    b7c0:	4798      	blx	r3
    b7c2:	200d      	movs	r0, #13
    b7c4:	4b25      	ldr	r3, [pc, #148]	; (b85c <spi_data_rsp+0xf8>)
    b7c6:	4798      	blx	r3
		result = N_FAIL;
    b7c8:	230e      	movs	r3, #14
    b7ca:	18fb      	adds	r3, r7, r3
    b7cc:	2200      	movs	r2, #0
    b7ce:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    b7d0:	e02e      	b.n	b830 <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    b7d2:	230f      	movs	r3, #15
    b7d4:	18fb      	adds	r3, r7, r3
    b7d6:	781b      	ldrb	r3, [r3, #0]
    b7d8:	3b01      	subs	r3, #1
    b7da:	2208      	movs	r2, #8
    b7dc:	18ba      	adds	r2, r7, r2
    b7de:	5cd3      	ldrb	r3, [r2, r3]
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d108      	bne.n	b7f6 <spi_data_rsp+0x92>
    b7e4:	230f      	movs	r3, #15
    b7e6:	18fb      	adds	r3, r7, r3
    b7e8:	781b      	ldrb	r3, [r3, #0]
    b7ea:	3b02      	subs	r3, #2
    b7ec:	2208      	movs	r2, #8
    b7ee:	18ba      	adds	r2, r7, r2
    b7f0:	5cd3      	ldrb	r3, [r2, r3]
    b7f2:	2bc3      	cmp	r3, #195	; 0xc3
    b7f4:	d01c      	beq.n	b830 <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    b7f6:	23a1      	movs	r3, #161	; 0xa1
    b7f8:	005a      	lsls	r2, r3, #1
    b7fa:	4913      	ldr	r1, [pc, #76]	; (b848 <spi_data_rsp+0xe4>)
    b7fc:	4b13      	ldr	r3, [pc, #76]	; (b84c <spi_data_rsp+0xe8>)
    b7fe:	0018      	movs	r0, r3
    b800:	4b13      	ldr	r3, [pc, #76]	; (b850 <spi_data_rsp+0xec>)
    b802:	4798      	blx	r3
    b804:	2308      	movs	r3, #8
    b806:	18fb      	adds	r3, r7, r3
    b808:	781b      	ldrb	r3, [r3, #0]
    b80a:	0019      	movs	r1, r3
    b80c:	2308      	movs	r3, #8
    b80e:	18fb      	adds	r3, r7, r3
    b810:	785b      	ldrb	r3, [r3, #1]
    b812:	001a      	movs	r2, r3
    b814:	2308      	movs	r3, #8
    b816:	18fb      	adds	r3, r7, r3
    b818:	789b      	ldrb	r3, [r3, #2]
    b81a:	4811      	ldr	r0, [pc, #68]	; (b860 <spi_data_rsp+0xfc>)
    b81c:	4c0c      	ldr	r4, [pc, #48]	; (b850 <spi_data_rsp+0xec>)
    b81e:	47a0      	blx	r4
    b820:	200d      	movs	r0, #13
    b822:	4b0e      	ldr	r3, [pc, #56]	; (b85c <spi_data_rsp+0xf8>)
    b824:	4798      	blx	r3
		result = N_FAIL;
    b826:	230e      	movs	r3, #14
    b828:	18fb      	adds	r3, r7, r3
    b82a:	2200      	movs	r2, #0
    b82c:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    b82e:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    b830:	230e      	movs	r3, #14
    b832:	18fb      	adds	r3, r7, r3
    b834:	781b      	ldrb	r3, [r3, #0]
    b836:	b25b      	sxtb	r3, r3
}
    b838:	0018      	movs	r0, r3
    b83a:	46bd      	mov	sp, r7
    b83c:	b005      	add	sp, #20
    b83e:	bd90      	pop	{r4, r7, pc}
    b840:	20000218 	.word	0x20000218
    b844:	0000b319 	.word	0x0000b319
    b848:	00019274 	.word	0x00019274
    b84c:	00018cd8 	.word	0x00018cd8
    b850:	00016d69 	.word	0x00016d69
    b854:	00018d18 	.word	0x00018d18
    b858:	00016e85 	.word	0x00016e85
    b85c:	00016d9d 	.word	0x00016d9d
    b860:	00018d38 	.word	0x00018d38

0000b864 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    b864:	b580      	push	{r7, lr}
    b866:	b084      	sub	sp, #16
    b868:	af00      	add	r7, sp, #0
    b86a:	0002      	movs	r2, r0
    b86c:	1dfb      	adds	r3, r7, #7
    b86e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    b870:	230f      	movs	r3, #15
    b872:	18fb      	adds	r3, r7, r3
    b874:	2201      	movs	r2, #1
    b876:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    b878:	1dfb      	adds	r3, r7, #7
    b87a:	781b      	ldrb	r3, [r3, #0]
    b87c:	2bcf      	cmp	r3, #207	; 0xcf
    b87e:	d007      	beq.n	b890 <spi_cmd_rsp+0x2c>
    b880:	1dfb      	adds	r3, r7, #7
    b882:	781b      	ldrb	r3, [r3, #0]
    b884:	2bc5      	cmp	r3, #197	; 0xc5
    b886:	d003      	beq.n	b890 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    b888:	1dfb      	adds	r3, r7, #7
    b88a:	781b      	ldrb	r3, [r3, #0]
    b88c:	2bc6      	cmp	r3, #198	; 0xc6
    b88e:	d10c      	bne.n	b8aa <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b890:	230d      	movs	r3, #13
    b892:	18fb      	adds	r3, r7, r3
    b894:	2101      	movs	r1, #1
    b896:	0018      	movs	r0, r3
    b898:	4b39      	ldr	r3, [pc, #228]	; (b980 <spi_cmd_rsp+0x11c>)
    b89a:	4798      	blx	r3
    b89c:	1e03      	subs	r3, r0, #0
    b89e:	d004      	beq.n	b8aa <spi_cmd_rsp+0x46>
			result = N_FAIL;
    b8a0:	230f      	movs	r3, #15
    b8a2:	18fb      	adds	r3, r7, r3
    b8a4:	2200      	movs	r2, #0
    b8a6:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    b8a8:	e061      	b.n	b96e <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    b8aa:	230e      	movs	r3, #14
    b8ac:	18fb      	adds	r3, r7, r3
    b8ae:	220a      	movs	r2, #10
    b8b0:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b8b2:	230d      	movs	r3, #13
    b8b4:	18fb      	adds	r3, r7, r3
    b8b6:	2101      	movs	r1, #1
    b8b8:	0018      	movs	r0, r3
    b8ba:	4b31      	ldr	r3, [pc, #196]	; (b980 <spi_cmd_rsp+0x11c>)
    b8bc:	4798      	blx	r3
    b8be:	1e03      	subs	r3, r0, #0
    b8c0:	d012      	beq.n	b8e8 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    b8c2:	23b1      	movs	r3, #177	; 0xb1
    b8c4:	005a      	lsls	r2, r3, #1
    b8c6:	492f      	ldr	r1, [pc, #188]	; (b984 <spi_cmd_rsp+0x120>)
    b8c8:	4b2f      	ldr	r3, [pc, #188]	; (b988 <spi_cmd_rsp+0x124>)
    b8ca:	0018      	movs	r0, r3
    b8cc:	4b2f      	ldr	r3, [pc, #188]	; (b98c <spi_cmd_rsp+0x128>)
    b8ce:	4798      	blx	r3
    b8d0:	4b2f      	ldr	r3, [pc, #188]	; (b990 <spi_cmd_rsp+0x12c>)
    b8d2:	0018      	movs	r0, r3
    b8d4:	4b2f      	ldr	r3, [pc, #188]	; (b994 <spi_cmd_rsp+0x130>)
    b8d6:	4798      	blx	r3
    b8d8:	200d      	movs	r0, #13
    b8da:	4b2f      	ldr	r3, [pc, #188]	; (b998 <spi_cmd_rsp+0x134>)
    b8dc:	4798      	blx	r3
			result = N_FAIL;
    b8de:	230f      	movs	r3, #15
    b8e0:	18fb      	adds	r3, r7, r3
    b8e2:	2200      	movs	r2, #0
    b8e4:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    b8e6:	e042      	b.n	b96e <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    b8e8:	230d      	movs	r3, #13
    b8ea:	18fb      	adds	r3, r7, r3
    b8ec:	781b      	ldrb	r3, [r3, #0]
    b8ee:	1dfa      	adds	r2, r7, #7
    b8f0:	7812      	ldrb	r2, [r2, #0]
    b8f2:	429a      	cmp	r2, r3
    b8f4:	d00b      	beq.n	b90e <spi_cmd_rsp+0xaa>
    b8f6:	230e      	movs	r3, #14
    b8f8:	18fb      	adds	r3, r7, r3
    b8fa:	781b      	ldrb	r3, [r3, #0]
    b8fc:	b25b      	sxtb	r3, r3
    b8fe:	b2da      	uxtb	r2, r3
    b900:	3a01      	subs	r2, #1
    b902:	b2d1      	uxtb	r1, r2
    b904:	220e      	movs	r2, #14
    b906:	18ba      	adds	r2, r7, r2
    b908:	7011      	strb	r1, [r2, #0]
    b90a:	2b00      	cmp	r3, #0
    b90c:	dcd1      	bgt.n	b8b2 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    b90e:	230e      	movs	r3, #14
    b910:	18fb      	adds	r3, r7, r3
    b912:	220a      	movs	r2, #10
    b914:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b916:	230d      	movs	r3, #13
    b918:	18fb      	adds	r3, r7, r3
    b91a:	2101      	movs	r1, #1
    b91c:	0018      	movs	r0, r3
    b91e:	4b18      	ldr	r3, [pc, #96]	; (b980 <spi_cmd_rsp+0x11c>)
    b920:	4798      	blx	r3
    b922:	1e03      	subs	r3, r0, #0
    b924:	d012      	beq.n	b94c <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    b926:	23b8      	movs	r3, #184	; 0xb8
    b928:	005a      	lsls	r2, r3, #1
    b92a:	4916      	ldr	r1, [pc, #88]	; (b984 <spi_cmd_rsp+0x120>)
    b92c:	4b16      	ldr	r3, [pc, #88]	; (b988 <spi_cmd_rsp+0x124>)
    b92e:	0018      	movs	r0, r3
    b930:	4b16      	ldr	r3, [pc, #88]	; (b98c <spi_cmd_rsp+0x128>)
    b932:	4798      	blx	r3
    b934:	4b16      	ldr	r3, [pc, #88]	; (b990 <spi_cmd_rsp+0x12c>)
    b936:	0018      	movs	r0, r3
    b938:	4b16      	ldr	r3, [pc, #88]	; (b994 <spi_cmd_rsp+0x130>)
    b93a:	4798      	blx	r3
    b93c:	200d      	movs	r0, #13
    b93e:	4b16      	ldr	r3, [pc, #88]	; (b998 <spi_cmd_rsp+0x134>)
    b940:	4798      	blx	r3
			result = N_FAIL;
    b942:	230f      	movs	r3, #15
    b944:	18fb      	adds	r3, r7, r3
    b946:	2200      	movs	r2, #0
    b948:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    b94a:	e010      	b.n	b96e <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    b94c:	230d      	movs	r3, #13
    b94e:	18fb      	adds	r3, r7, r3
    b950:	781b      	ldrb	r3, [r3, #0]
    b952:	2b00      	cmp	r3, #0
    b954:	d00b      	beq.n	b96e <spi_cmd_rsp+0x10a>
    b956:	230e      	movs	r3, #14
    b958:	18fb      	adds	r3, r7, r3
    b95a:	781b      	ldrb	r3, [r3, #0]
    b95c:	b25b      	sxtb	r3, r3
    b95e:	b2da      	uxtb	r2, r3
    b960:	3a01      	subs	r2, #1
    b962:	b2d1      	uxtb	r1, r2
    b964:	220e      	movs	r2, #14
    b966:	18ba      	adds	r2, r7, r2
    b968:	7011      	strb	r1, [r2, #0]
    b96a:	2b00      	cmp	r3, #0
    b96c:	dcd3      	bgt.n	b916 <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    b96e:	230f      	movs	r3, #15
    b970:	18fb      	adds	r3, r7, r3
    b972:	781b      	ldrb	r3, [r3, #0]
    b974:	b25b      	sxtb	r3, r3
}
    b976:	0018      	movs	r0, r3
    b978:	46bd      	mov	sp, r7
    b97a:	b004      	add	sp, #16
    b97c:	bd80      	pop	{r7, pc}
    b97e:	46c0      	nop			; (mov r8, r8)
    b980:	0000b319 	.word	0x0000b319
    b984:	00019284 	.word	0x00019284
    b988:	00018cd8 	.word	0x00018cd8
    b98c:	00016d69 	.word	0x00016d69
    b990:	00018d68 	.word	0x00018d68
    b994:	00016e85 	.word	0x00016e85
    b998:	00016d9d 	.word	0x00016d9d

0000b99c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    b99c:	b580      	push	{r7, lr}
    b99e:	b086      	sub	sp, #24
    b9a0:	af00      	add	r7, sp, #0
    b9a2:	6078      	str	r0, [r7, #4]
    b9a4:	0008      	movs	r0, r1
    b9a6:	0011      	movs	r1, r2
    b9a8:	1cbb      	adds	r3, r7, #2
    b9aa:	1c02      	adds	r2, r0, #0
    b9ac:	801a      	strh	r2, [r3, #0]
    b9ae:	1c7b      	adds	r3, r7, #1
    b9b0:	1c0a      	adds	r2, r1, #0
    b9b2:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    b9b4:	2311      	movs	r3, #17
    b9b6:	18fb      	adds	r3, r7, r3
    b9b8:	2201      	movs	r2, #1
    b9ba:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    b9bc:	2314      	movs	r3, #20
    b9be:	18fb      	adds	r3, r7, r3
    b9c0:	2200      	movs	r2, #0
    b9c2:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    b9c4:	1cbb      	adds	r3, r7, #2
    b9c6:	881a      	ldrh	r2, [r3, #0]
    b9c8:	2380      	movs	r3, #128	; 0x80
    b9ca:	019b      	lsls	r3, r3, #6
    b9cc:	429a      	cmp	r2, r3
    b9ce:	d805      	bhi.n	b9dc <spi_data_read+0x40>
			nbytes = sz;
    b9d0:	2312      	movs	r3, #18
    b9d2:	18fb      	adds	r3, r7, r3
    b9d4:	1cba      	adds	r2, r7, #2
    b9d6:	8812      	ldrh	r2, [r2, #0]
    b9d8:	801a      	strh	r2, [r3, #0]
    b9da:	e004      	b.n	b9e6 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    b9dc:	2312      	movs	r3, #18
    b9de:	18fb      	adds	r3, r7, r3
    b9e0:	2280      	movs	r2, #128	; 0x80
    b9e2:	0192      	lsls	r2, r2, #6
    b9e4:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    b9e6:	2316      	movs	r3, #22
    b9e8:	18fb      	adds	r3, r7, r3
    b9ea:	220a      	movs	r2, #10
    b9ec:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b9ee:	230b      	movs	r3, #11
    b9f0:	18fb      	adds	r3, r7, r3
    b9f2:	2101      	movs	r1, #1
    b9f4:	0018      	movs	r0, r3
    b9f6:	4b5c      	ldr	r3, [pc, #368]	; (bb68 <spi_data_read+0x1cc>)
    b9f8:	4798      	blx	r3
    b9fa:	1e03      	subs	r3, r0, #0
    b9fc:	d011      	beq.n	ba22 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    b9fe:	4a5b      	ldr	r2, [pc, #364]	; (bb6c <spi_data_read+0x1d0>)
    ba00:	495b      	ldr	r1, [pc, #364]	; (bb70 <spi_data_read+0x1d4>)
    ba02:	4b5c      	ldr	r3, [pc, #368]	; (bb74 <spi_data_read+0x1d8>)
    ba04:	0018      	movs	r0, r3
    ba06:	4b5c      	ldr	r3, [pc, #368]	; (bb78 <spi_data_read+0x1dc>)
    ba08:	4798      	blx	r3
    ba0a:	4b5c      	ldr	r3, [pc, #368]	; (bb7c <spi_data_read+0x1e0>)
    ba0c:	0018      	movs	r0, r3
    ba0e:	4b5c      	ldr	r3, [pc, #368]	; (bb80 <spi_data_read+0x1e4>)
    ba10:	4798      	blx	r3
    ba12:	200d      	movs	r0, #13
    ba14:	4b5b      	ldr	r3, [pc, #364]	; (bb84 <spi_data_read+0x1e8>)
    ba16:	4798      	blx	r3
				result = N_FAIL;
    ba18:	2311      	movs	r3, #17
    ba1a:	18fb      	adds	r3, r7, r3
    ba1c:	2200      	movs	r2, #0
    ba1e:	701a      	strb	r2, [r3, #0]
				break;
    ba20:	e017      	b.n	ba52 <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    ba22:	230b      	movs	r3, #11
    ba24:	18fb      	adds	r3, r7, r3
    ba26:	781b      	ldrb	r3, [r3, #0]
    ba28:	091b      	lsrs	r3, r3, #4
    ba2a:	b2db      	uxtb	r3, r3
    ba2c:	001a      	movs	r2, r3
    ba2e:	230f      	movs	r3, #15
    ba30:	4013      	ands	r3, r2
    ba32:	2b0f      	cmp	r3, #15
    ba34:	d00c      	beq.n	ba50 <spi_data_read+0xb4>
				break;
		} while (retry--);
    ba36:	2316      	movs	r3, #22
    ba38:	18fb      	adds	r3, r7, r3
    ba3a:	2200      	movs	r2, #0
    ba3c:	5e9b      	ldrsh	r3, [r3, r2]
    ba3e:	b29a      	uxth	r2, r3
    ba40:	3a01      	subs	r2, #1
    ba42:	b291      	uxth	r1, r2
    ba44:	2216      	movs	r2, #22
    ba46:	18ba      	adds	r2, r7, r2
    ba48:	8011      	strh	r1, [r2, #0]
    ba4a:	2b00      	cmp	r3, #0
    ba4c:	d1cf      	bne.n	b9ee <spi_data_read+0x52>
    ba4e:	e000      	b.n	ba52 <spi_data_read+0xb6>
				break;
    ba50:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    ba52:	2311      	movs	r3, #17
    ba54:	18fb      	adds	r3, r7, r3
    ba56:	781b      	ldrb	r3, [r3, #0]
    ba58:	b25b      	sxtb	r3, r3
    ba5a:	2b00      	cmp	r3, #0
    ba5c:	d100      	bne.n	ba60 <spi_data_read+0xc4>
    ba5e:	e079      	b.n	bb54 <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    ba60:	2316      	movs	r3, #22
    ba62:	18fb      	adds	r3, r7, r3
    ba64:	2200      	movs	r2, #0
    ba66:	5e9b      	ldrsh	r3, [r3, r2]
    ba68:	2b00      	cmp	r3, #0
    ba6a:	dc16      	bgt.n	ba9a <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    ba6c:	4a46      	ldr	r2, [pc, #280]	; (bb88 <spi_data_read+0x1ec>)
    ba6e:	4940      	ldr	r1, [pc, #256]	; (bb70 <spi_data_read+0x1d4>)
    ba70:	4b40      	ldr	r3, [pc, #256]	; (bb74 <spi_data_read+0x1d8>)
    ba72:	0018      	movs	r0, r3
    ba74:	4b40      	ldr	r3, [pc, #256]	; (bb78 <spi_data_read+0x1dc>)
    ba76:	4798      	blx	r3
    ba78:	230b      	movs	r3, #11
    ba7a:	18fb      	adds	r3, r7, r3
    ba7c:	781b      	ldrb	r3, [r3, #0]
    ba7e:	001a      	movs	r2, r3
    ba80:	4b42      	ldr	r3, [pc, #264]	; (bb8c <spi_data_read+0x1f0>)
    ba82:	0011      	movs	r1, r2
    ba84:	0018      	movs	r0, r3
    ba86:	4b3c      	ldr	r3, [pc, #240]	; (bb78 <spi_data_read+0x1dc>)
    ba88:	4798      	blx	r3
    ba8a:	200d      	movs	r0, #13
    ba8c:	4b3d      	ldr	r3, [pc, #244]	; (bb84 <spi_data_read+0x1e8>)
    ba8e:	4798      	blx	r3
			result = N_FAIL;
    ba90:	2311      	movs	r3, #17
    ba92:	18fb      	adds	r3, r7, r3
    ba94:	2200      	movs	r2, #0
    ba96:	701a      	strb	r2, [r3, #0]
			break;
    ba98:	e05d      	b.n	bb56 <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    ba9a:	2314      	movs	r3, #20
    ba9c:	18fb      	adds	r3, r7, r3
    ba9e:	2200      	movs	r2, #0
    baa0:	5e9b      	ldrsh	r3, [r3, r2]
    baa2:	687a      	ldr	r2, [r7, #4]
    baa4:	18d2      	adds	r2, r2, r3
    baa6:	2312      	movs	r3, #18
    baa8:	18fb      	adds	r3, r7, r3
    baaa:	881b      	ldrh	r3, [r3, #0]
    baac:	0019      	movs	r1, r3
    baae:	0010      	movs	r0, r2
    bab0:	4b2d      	ldr	r3, [pc, #180]	; (bb68 <spi_data_read+0x1cc>)
    bab2:	4798      	blx	r3
    bab4:	1e03      	subs	r3, r0, #0
    bab6:	d012      	beq.n	bade <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    bab8:	23c5      	movs	r3, #197	; 0xc5
    baba:	009a      	lsls	r2, r3, #2
    babc:	492c      	ldr	r1, [pc, #176]	; (bb70 <spi_data_read+0x1d4>)
    babe:	4b2d      	ldr	r3, [pc, #180]	; (bb74 <spi_data_read+0x1d8>)
    bac0:	0018      	movs	r0, r3
    bac2:	4b2d      	ldr	r3, [pc, #180]	; (bb78 <spi_data_read+0x1dc>)
    bac4:	4798      	blx	r3
    bac6:	4b32      	ldr	r3, [pc, #200]	; (bb90 <spi_data_read+0x1f4>)
    bac8:	0018      	movs	r0, r3
    baca:	4b2d      	ldr	r3, [pc, #180]	; (bb80 <spi_data_read+0x1e4>)
    bacc:	4798      	blx	r3
    bace:	200d      	movs	r0, #13
    bad0:	4b2c      	ldr	r3, [pc, #176]	; (bb84 <spi_data_read+0x1e8>)
    bad2:	4798      	blx	r3
			result = N_FAIL;
    bad4:	2311      	movs	r3, #17
    bad6:	18fb      	adds	r3, r7, r3
    bad8:	2200      	movs	r2, #0
    bada:	701a      	strb	r2, [r3, #0]
			break;
    badc:	e03b      	b.n	bb56 <spi_data_read+0x1ba>
		}
		if(!clockless)
    bade:	1c7b      	adds	r3, r7, #1
    bae0:	781b      	ldrb	r3, [r3, #0]
    bae2:	2b00      	cmp	r3, #0
    bae4:	d11d      	bne.n	bb22 <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    bae6:	4b2b      	ldr	r3, [pc, #172]	; (bb94 <spi_data_read+0x1f8>)
    bae8:	781b      	ldrb	r3, [r3, #0]
    baea:	2b00      	cmp	r3, #0
    baec:	d119      	bne.n	bb22 <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    baee:	230c      	movs	r3, #12
    baf0:	18fb      	adds	r3, r7, r3
    baf2:	2102      	movs	r1, #2
    baf4:	0018      	movs	r0, r3
    baf6:	4b1c      	ldr	r3, [pc, #112]	; (bb68 <spi_data_read+0x1cc>)
    baf8:	4798      	blx	r3
    bafa:	1e03      	subs	r3, r0, #0
    bafc:	d011      	beq.n	bb22 <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    bafe:	4a26      	ldr	r2, [pc, #152]	; (bb98 <spi_data_read+0x1fc>)
    bb00:	491b      	ldr	r1, [pc, #108]	; (bb70 <spi_data_read+0x1d4>)
    bb02:	4b1c      	ldr	r3, [pc, #112]	; (bb74 <spi_data_read+0x1d8>)
    bb04:	0018      	movs	r0, r3
    bb06:	4b1c      	ldr	r3, [pc, #112]	; (bb78 <spi_data_read+0x1dc>)
    bb08:	4798      	blx	r3
    bb0a:	4b24      	ldr	r3, [pc, #144]	; (bb9c <spi_data_read+0x200>)
    bb0c:	0018      	movs	r0, r3
    bb0e:	4b1c      	ldr	r3, [pc, #112]	; (bb80 <spi_data_read+0x1e4>)
    bb10:	4798      	blx	r3
    bb12:	200d      	movs	r0, #13
    bb14:	4b1b      	ldr	r3, [pc, #108]	; (bb84 <spi_data_read+0x1e8>)
    bb16:	4798      	blx	r3
					result = N_FAIL;
    bb18:	2311      	movs	r3, #17
    bb1a:	18fb      	adds	r3, r7, r3
    bb1c:	2200      	movs	r2, #0
    bb1e:	701a      	strb	r2, [r3, #0]
					break;
    bb20:	e019      	b.n	bb56 <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    bb22:	2314      	movs	r3, #20
    bb24:	18fb      	adds	r3, r7, r3
    bb26:	881a      	ldrh	r2, [r3, #0]
    bb28:	2312      	movs	r3, #18
    bb2a:	18fb      	adds	r3, r7, r3
    bb2c:	881b      	ldrh	r3, [r3, #0]
    bb2e:	18d3      	adds	r3, r2, r3
    bb30:	b29a      	uxth	r2, r3
    bb32:	2314      	movs	r3, #20
    bb34:	18fb      	adds	r3, r7, r3
    bb36:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    bb38:	2312      	movs	r3, #18
    bb3a:	18fb      	adds	r3, r7, r3
    bb3c:	881a      	ldrh	r2, [r3, #0]
    bb3e:	1cbb      	adds	r3, r7, #2
    bb40:	1cb9      	adds	r1, r7, #2
    bb42:	8809      	ldrh	r1, [r1, #0]
    bb44:	1a8a      	subs	r2, r1, r2
    bb46:	801a      	strh	r2, [r3, #0]

	} while (sz);
    bb48:	1cbb      	adds	r3, r7, #2
    bb4a:	881b      	ldrh	r3, [r3, #0]
    bb4c:	2b00      	cmp	r3, #0
    bb4e:	d000      	beq.n	bb52 <spi_data_read+0x1b6>
    bb50:	e738      	b.n	b9c4 <spi_data_read+0x28>
    bb52:	e000      	b.n	bb56 <spi_data_read+0x1ba>
			break;
    bb54:	46c0      	nop			; (mov r8, r8)

	return result;
    bb56:	2311      	movs	r3, #17
    bb58:	18fb      	adds	r3, r7, r3
    bb5a:	781b      	ldrb	r3, [r3, #0]
    bb5c:	b25b      	sxtb	r3, r3
}
    bb5e:	0018      	movs	r0, r3
    bb60:	46bd      	mov	sp, r7
    bb62:	b006      	add	sp, #24
    bb64:	bd80      	pop	{r7, pc}
    bb66:	46c0      	nop			; (mov r8, r8)
    bb68:	0000b319 	.word	0x0000b319
    bb6c:	000002ff 	.word	0x000002ff
    bb70:	00019290 	.word	0x00019290
    bb74:	00018cd8 	.word	0x00018cd8
    bb78:	00016d69 	.word	0x00016d69
    bb7c:	00018d9c 	.word	0x00018d9c
    bb80:	00016e85 	.word	0x00016e85
    bb84:	00016d9d 	.word	0x00016d9d
    bb88:	0000030b 	.word	0x0000030b
    bb8c:	00018dd0 	.word	0x00018dd0
    bb90:	00018e00 	.word	0x00018e00
    bb94:	20000218 	.word	0x20000218
    bb98:	0000031f 	.word	0x0000031f
    bb9c:	00018e30 	.word	0x00018e30

0000bba0 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    bba0:	b580      	push	{r7, lr}
    bba2:	b086      	sub	sp, #24
    bba4:	af00      	add	r7, sp, #0
    bba6:	6078      	str	r0, [r7, #4]
    bba8:	000a      	movs	r2, r1
    bbaa:	1cbb      	adds	r3, r7, #2
    bbac:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    bbae:	2313      	movs	r3, #19
    bbb0:	18fb      	adds	r3, r7, r3
    bbb2:	2201      	movs	r2, #1
    bbb4:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    bbb6:	230c      	movs	r3, #12
    bbb8:	18fb      	adds	r3, r7, r3
    bbba:	2200      	movs	r2, #0
    bbbc:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    bbbe:	2316      	movs	r3, #22
    bbc0:	18fb      	adds	r3, r7, r3
    bbc2:	2200      	movs	r2, #0
    bbc4:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    bbc6:	1cbb      	adds	r3, r7, #2
    bbc8:	881a      	ldrh	r2, [r3, #0]
    bbca:	2380      	movs	r3, #128	; 0x80
    bbcc:	019b      	lsls	r3, r3, #6
    bbce:	429a      	cmp	r2, r3
    bbd0:	d805      	bhi.n	bbde <spi_data_write+0x3e>
			nbytes = sz;
    bbd2:	2314      	movs	r3, #20
    bbd4:	18fb      	adds	r3, r7, r3
    bbd6:	1cba      	adds	r2, r7, #2
    bbd8:	8812      	ldrh	r2, [r2, #0]
    bbda:	801a      	strh	r2, [r3, #0]
    bbdc:	e004      	b.n	bbe8 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    bbde:	2314      	movs	r3, #20
    bbe0:	18fb      	adds	r3, r7, r3
    bbe2:	2280      	movs	r2, #128	; 0x80
    bbe4:	0192      	lsls	r2, r2, #6
    bbe6:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    bbe8:	2311      	movs	r3, #17
    bbea:	18fb      	adds	r3, r7, r3
    bbec:	22f0      	movs	r2, #240	; 0xf0
    bbee:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    bbf0:	2316      	movs	r3, #22
    bbf2:	18fb      	adds	r3, r7, r3
    bbf4:	2200      	movs	r2, #0
    bbf6:	5e9b      	ldrsh	r3, [r3, r2]
    bbf8:	2b00      	cmp	r3, #0
    bbfa:	d10f      	bne.n	bc1c <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    bbfc:	1cbb      	adds	r3, r7, #2
    bbfe:	881a      	ldrh	r2, [r3, #0]
    bc00:	2380      	movs	r3, #128	; 0x80
    bc02:	019b      	lsls	r3, r3, #6
    bc04:	429a      	cmp	r2, r3
    bc06:	d804      	bhi.n	bc12 <spi_data_write+0x72>
				order = 0x3;
    bc08:	2312      	movs	r3, #18
    bc0a:	18fb      	adds	r3, r7, r3
    bc0c:	2203      	movs	r2, #3
    bc0e:	701a      	strb	r2, [r3, #0]
    bc10:	e013      	b.n	bc3a <spi_data_write+0x9a>
			else
				order = 0x1;
    bc12:	2312      	movs	r3, #18
    bc14:	18fb      	adds	r3, r7, r3
    bc16:	2201      	movs	r2, #1
    bc18:	701a      	strb	r2, [r3, #0]
    bc1a:	e00e      	b.n	bc3a <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    bc1c:	1cbb      	adds	r3, r7, #2
    bc1e:	881a      	ldrh	r2, [r3, #0]
    bc20:	2380      	movs	r3, #128	; 0x80
    bc22:	019b      	lsls	r3, r3, #6
    bc24:	429a      	cmp	r2, r3
    bc26:	d804      	bhi.n	bc32 <spi_data_write+0x92>
				order = 0x3;
    bc28:	2312      	movs	r3, #18
    bc2a:	18fb      	adds	r3, r7, r3
    bc2c:	2203      	movs	r2, #3
    bc2e:	701a      	strb	r2, [r3, #0]
    bc30:	e003      	b.n	bc3a <spi_data_write+0x9a>
			else
				order = 0x2;
    bc32:	2312      	movs	r3, #18
    bc34:	18fb      	adds	r3, r7, r3
    bc36:	2202      	movs	r2, #2
    bc38:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    bc3a:	2311      	movs	r3, #17
    bc3c:	18fb      	adds	r3, r7, r3
    bc3e:	781a      	ldrb	r2, [r3, #0]
    bc40:	2312      	movs	r3, #18
    bc42:	18fb      	adds	r3, r7, r3
    bc44:	781b      	ldrb	r3, [r3, #0]
    bc46:	4313      	orrs	r3, r2
    bc48:	b2da      	uxtb	r2, r3
    bc4a:	2311      	movs	r3, #17
    bc4c:	18fb      	adds	r3, r7, r3
    bc4e:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    bc50:	2311      	movs	r3, #17
    bc52:	18fb      	adds	r3, r7, r3
    bc54:	2101      	movs	r1, #1
    bc56:	0018      	movs	r0, r3
    bc58:	4b3a      	ldr	r3, [pc, #232]	; (bd44 <spi_data_write+0x1a4>)
    bc5a:	4798      	blx	r3
    bc5c:	1e03      	subs	r3, r0, #0
    bc5e:	d012      	beq.n	bc86 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    bc60:	23d4      	movs	r3, #212	; 0xd4
    bc62:	009a      	lsls	r2, r3, #2
    bc64:	4938      	ldr	r1, [pc, #224]	; (bd48 <spi_data_write+0x1a8>)
    bc66:	4b39      	ldr	r3, [pc, #228]	; (bd4c <spi_data_write+0x1ac>)
    bc68:	0018      	movs	r0, r3
    bc6a:	4b39      	ldr	r3, [pc, #228]	; (bd50 <spi_data_write+0x1b0>)
    bc6c:	4798      	blx	r3
    bc6e:	4b39      	ldr	r3, [pc, #228]	; (bd54 <spi_data_write+0x1b4>)
    bc70:	0018      	movs	r0, r3
    bc72:	4b39      	ldr	r3, [pc, #228]	; (bd58 <spi_data_write+0x1b8>)
    bc74:	4798      	blx	r3
    bc76:	200d      	movs	r0, #13
    bc78:	4b38      	ldr	r3, [pc, #224]	; (bd5c <spi_data_write+0x1bc>)
    bc7a:	4798      	blx	r3
			result = N_FAIL;
    bc7c:	2313      	movs	r3, #19
    bc7e:	18fb      	adds	r3, r7, r3
    bc80:	2200      	movs	r2, #0
    bc82:	701a      	strb	r2, [r3, #0]
			break;
    bc84:	e056      	b.n	bd34 <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    bc86:	2316      	movs	r3, #22
    bc88:	18fb      	adds	r3, r7, r3
    bc8a:	2200      	movs	r2, #0
    bc8c:	5e9b      	ldrsh	r3, [r3, r2]
    bc8e:	687a      	ldr	r2, [r7, #4]
    bc90:	18d2      	adds	r2, r2, r3
    bc92:	2314      	movs	r3, #20
    bc94:	18fb      	adds	r3, r7, r3
    bc96:	881b      	ldrh	r3, [r3, #0]
    bc98:	0019      	movs	r1, r3
    bc9a:	0010      	movs	r0, r2
    bc9c:	4b29      	ldr	r3, [pc, #164]	; (bd44 <spi_data_write+0x1a4>)
    bc9e:	4798      	blx	r3
    bca0:	1e03      	subs	r3, r0, #0
    bca2:	d011      	beq.n	bcc8 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    bca4:	4a2e      	ldr	r2, [pc, #184]	; (bd60 <spi_data_write+0x1c0>)
    bca6:	4928      	ldr	r1, [pc, #160]	; (bd48 <spi_data_write+0x1a8>)
    bca8:	4b28      	ldr	r3, [pc, #160]	; (bd4c <spi_data_write+0x1ac>)
    bcaa:	0018      	movs	r0, r3
    bcac:	4b28      	ldr	r3, [pc, #160]	; (bd50 <spi_data_write+0x1b0>)
    bcae:	4798      	blx	r3
    bcb0:	4b2c      	ldr	r3, [pc, #176]	; (bd64 <spi_data_write+0x1c4>)
    bcb2:	0018      	movs	r0, r3
    bcb4:	4b28      	ldr	r3, [pc, #160]	; (bd58 <spi_data_write+0x1b8>)
    bcb6:	4798      	blx	r3
    bcb8:	200d      	movs	r0, #13
    bcba:	4b28      	ldr	r3, [pc, #160]	; (bd5c <spi_data_write+0x1bc>)
    bcbc:	4798      	blx	r3
			result = N_FAIL;
    bcbe:	2313      	movs	r3, #19
    bcc0:	18fb      	adds	r3, r7, r3
    bcc2:	2200      	movs	r2, #0
    bcc4:	701a      	strb	r2, [r3, #0]
			break;
    bcc6:	e035      	b.n	bd34 <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    bcc8:	4b27      	ldr	r3, [pc, #156]	; (bd68 <spi_data_write+0x1c8>)
    bcca:	781b      	ldrb	r3, [r3, #0]
    bccc:	2b00      	cmp	r3, #0
    bcce:	d119      	bne.n	bd04 <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    bcd0:	230c      	movs	r3, #12
    bcd2:	18fb      	adds	r3, r7, r3
    bcd4:	2102      	movs	r1, #2
    bcd6:	0018      	movs	r0, r3
    bcd8:	4b1a      	ldr	r3, [pc, #104]	; (bd44 <spi_data_write+0x1a4>)
    bcda:	4798      	blx	r3
    bcdc:	1e03      	subs	r3, r0, #0
    bcde:	d011      	beq.n	bd04 <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    bce0:	4a22      	ldr	r2, [pc, #136]	; (bd6c <spi_data_write+0x1cc>)
    bce2:	4919      	ldr	r1, [pc, #100]	; (bd48 <spi_data_write+0x1a8>)
    bce4:	4b19      	ldr	r3, [pc, #100]	; (bd4c <spi_data_write+0x1ac>)
    bce6:	0018      	movs	r0, r3
    bce8:	4b19      	ldr	r3, [pc, #100]	; (bd50 <spi_data_write+0x1b0>)
    bcea:	4798      	blx	r3
    bcec:	4b20      	ldr	r3, [pc, #128]	; (bd70 <spi_data_write+0x1d0>)
    bcee:	0018      	movs	r0, r3
    bcf0:	4b19      	ldr	r3, [pc, #100]	; (bd58 <spi_data_write+0x1b8>)
    bcf2:	4798      	blx	r3
    bcf4:	200d      	movs	r0, #13
    bcf6:	4b19      	ldr	r3, [pc, #100]	; (bd5c <spi_data_write+0x1bc>)
    bcf8:	4798      	blx	r3
				result = N_FAIL;
    bcfa:	2313      	movs	r3, #19
    bcfc:	18fb      	adds	r3, r7, r3
    bcfe:	2200      	movs	r2, #0
    bd00:	701a      	strb	r2, [r3, #0]
				break;
    bd02:	e017      	b.n	bd34 <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    bd04:	2316      	movs	r3, #22
    bd06:	18fb      	adds	r3, r7, r3
    bd08:	881a      	ldrh	r2, [r3, #0]
    bd0a:	2314      	movs	r3, #20
    bd0c:	18fb      	adds	r3, r7, r3
    bd0e:	881b      	ldrh	r3, [r3, #0]
    bd10:	18d3      	adds	r3, r2, r3
    bd12:	b29a      	uxth	r2, r3
    bd14:	2316      	movs	r3, #22
    bd16:	18fb      	adds	r3, r7, r3
    bd18:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    bd1a:	1cbb      	adds	r3, r7, #2
    bd1c:	1cb9      	adds	r1, r7, #2
    bd1e:	2214      	movs	r2, #20
    bd20:	18ba      	adds	r2, r7, r2
    bd22:	8809      	ldrh	r1, [r1, #0]
    bd24:	8812      	ldrh	r2, [r2, #0]
    bd26:	1a8a      	subs	r2, r1, r2
    bd28:	801a      	strh	r2, [r3, #0]
	} while (sz);
    bd2a:	1cbb      	adds	r3, r7, #2
    bd2c:	881b      	ldrh	r3, [r3, #0]
    bd2e:	2b00      	cmp	r3, #0
    bd30:	d000      	beq.n	bd34 <spi_data_write+0x194>
    bd32:	e748      	b.n	bbc6 <spi_data_write+0x26>


	return result;
    bd34:	2313      	movs	r3, #19
    bd36:	18fb      	adds	r3, r7, r3
    bd38:	781b      	ldrb	r3, [r3, #0]
    bd3a:	b25b      	sxtb	r3, r3
}
    bd3c:	0018      	movs	r0, r3
    bd3e:	46bd      	mov	sp, r7
    bd40:	b006      	add	sp, #24
    bd42:	bd80      	pop	{r7, pc}
    bd44:	0000b35d 	.word	0x0000b35d
    bd48:	000192a0 	.word	0x000192a0
    bd4c:	00018cd8 	.word	0x00018cd8
    bd50:	00016d69 	.word	0x00016d69
    bd54:	00018e64 	.word	0x00018e64
    bd58:	00016e85 	.word	0x00016e85
    bd5c:	00016d9d 	.word	0x00016d9d
    bd60:	00000359 	.word	0x00000359
    bd64:	00018e9c 	.word	0x00018e9c
    bd68:	20000218 	.word	0x20000218
    bd6c:	00000363 	.word	0x00000363
    bd70:	00018ed0 	.word	0x00018ed0

0000bd74 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    bd74:	b5b0      	push	{r4, r5, r7, lr}
    bd76:	b086      	sub	sp, #24
    bd78:	af02      	add	r7, sp, #8
    bd7a:	6078      	str	r0, [r7, #4]
    bd7c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    bd7e:	230f      	movs	r3, #15
    bd80:	18fb      	adds	r3, r7, r3
    bd82:	220a      	movs	r2, #10
    bd84:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    bd86:	230e      	movs	r3, #14
    bd88:	18fb      	adds	r3, r7, r3
    bd8a:	2201      	movs	r2, #1
    bd8c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    bd8e:	230d      	movs	r3, #13
    bd90:	18fb      	adds	r3, r7, r3
    bd92:	22c9      	movs	r2, #201	; 0xc9
    bd94:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    bd96:	230c      	movs	r3, #12
    bd98:	18fb      	adds	r3, r7, r3
    bd9a:	2200      	movs	r2, #0
    bd9c:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    bd9e:	687b      	ldr	r3, [r7, #4]
    bda0:	2b30      	cmp	r3, #48	; 0x30
    bda2:	d808      	bhi.n	bdb6 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    bda4:	230d      	movs	r3, #13
    bda6:	18fb      	adds	r3, r7, r3
    bda8:	22c3      	movs	r2, #195	; 0xc3
    bdaa:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    bdac:	230c      	movs	r3, #12
    bdae:	18fb      	adds	r3, r7, r3
    bdb0:	2201      	movs	r2, #1
    bdb2:	701a      	strb	r2, [r3, #0]
    bdb4:	e007      	b.n	bdc6 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    bdb6:	230d      	movs	r3, #13
    bdb8:	18fb      	adds	r3, r7, r3
    bdba:	22c9      	movs	r2, #201	; 0xc9
    bdbc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    bdbe:	230c      	movs	r3, #12
    bdc0:	18fb      	adds	r3, r7, r3
    bdc2:	2200      	movs	r2, #0
    bdc4:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    bdc6:	230e      	movs	r3, #14
    bdc8:	18fc      	adds	r4, r7, r3
    bdca:	683a      	ldr	r2, [r7, #0]
    bdcc:	6879      	ldr	r1, [r7, #4]
    bdce:	230d      	movs	r3, #13
    bdd0:	18fb      	adds	r3, r7, r3
    bdd2:	7818      	ldrb	r0, [r3, #0]
    bdd4:	230c      	movs	r3, #12
    bdd6:	18fb      	adds	r3, r7, r3
    bdd8:	781b      	ldrb	r3, [r3, #0]
    bdda:	9300      	str	r3, [sp, #0]
    bddc:	2304      	movs	r3, #4
    bdde:	4d3c      	ldr	r5, [pc, #240]	; (bed0 <spi_write_reg+0x15c>)
    bde0:	47a8      	blx	r5
    bde2:	0003      	movs	r3, r0
    bde4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    bde6:	230e      	movs	r3, #14
    bde8:	18fb      	adds	r3, r7, r3
    bdea:	781b      	ldrb	r3, [r3, #0]
    bdec:	b25b      	sxtb	r3, r3
    bdee:	2b01      	cmp	r3, #1
    bdf0:	d00f      	beq.n	be12 <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    bdf2:	4a38      	ldr	r2, [pc, #224]	; (bed4 <spi_write_reg+0x160>)
    bdf4:	4938      	ldr	r1, [pc, #224]	; (bed8 <spi_write_reg+0x164>)
    bdf6:	4b39      	ldr	r3, [pc, #228]	; (bedc <spi_write_reg+0x168>)
    bdf8:	0018      	movs	r0, r3
    bdfa:	4b39      	ldr	r3, [pc, #228]	; (bee0 <spi_write_reg+0x16c>)
    bdfc:	4798      	blx	r3
    bdfe:	687a      	ldr	r2, [r7, #4]
    be00:	4b38      	ldr	r3, [pc, #224]	; (bee4 <spi_write_reg+0x170>)
    be02:	0011      	movs	r1, r2
    be04:	0018      	movs	r0, r3
    be06:	4b36      	ldr	r3, [pc, #216]	; (bee0 <spi_write_reg+0x16c>)
    be08:	4798      	blx	r3
    be0a:	200d      	movs	r0, #13
    be0c:	4b36      	ldr	r3, [pc, #216]	; (bee8 <spi_write_reg+0x174>)
    be0e:	4798      	blx	r3
		goto _FAIL_;
    be10:	e020      	b.n	be54 <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    be12:	230e      	movs	r3, #14
    be14:	18fc      	adds	r4, r7, r3
    be16:	230d      	movs	r3, #13
    be18:	18fb      	adds	r3, r7, r3
    be1a:	781b      	ldrb	r3, [r3, #0]
    be1c:	0018      	movs	r0, r3
    be1e:	4b33      	ldr	r3, [pc, #204]	; (beec <spi_write_reg+0x178>)
    be20:	4798      	blx	r3
    be22:	0003      	movs	r3, r0
    be24:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    be26:	230e      	movs	r3, #14
    be28:	18fb      	adds	r3, r7, r3
    be2a:	781b      	ldrb	r3, [r3, #0]
    be2c:	b25b      	sxtb	r3, r3
    be2e:	2b01      	cmp	r3, #1
    be30:	d010      	beq.n	be54 <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    be32:	23e7      	movs	r3, #231	; 0xe7
    be34:	009a      	lsls	r2, r3, #2
    be36:	4928      	ldr	r1, [pc, #160]	; (bed8 <spi_write_reg+0x164>)
    be38:	4b28      	ldr	r3, [pc, #160]	; (bedc <spi_write_reg+0x168>)
    be3a:	0018      	movs	r0, r3
    be3c:	4b28      	ldr	r3, [pc, #160]	; (bee0 <spi_write_reg+0x16c>)
    be3e:	4798      	blx	r3
    be40:	687a      	ldr	r2, [r7, #4]
    be42:	4b2b      	ldr	r3, [pc, #172]	; (bef0 <spi_write_reg+0x17c>)
    be44:	0011      	movs	r1, r2
    be46:	0018      	movs	r0, r3
    be48:	4b25      	ldr	r3, [pc, #148]	; (bee0 <spi_write_reg+0x16c>)
    be4a:	4798      	blx	r3
    be4c:	200d      	movs	r0, #13
    be4e:	4b26      	ldr	r3, [pc, #152]	; (bee8 <spi_write_reg+0x174>)
    be50:	4798      	blx	r3
		goto _FAIL_;
    be52:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    be54:	230e      	movs	r3, #14
    be56:	18fb      	adds	r3, r7, r3
    be58:	781b      	ldrb	r3, [r3, #0]
    be5a:	b25b      	sxtb	r3, r3
    be5c:	2b01      	cmp	r3, #1
    be5e:	d02e      	beq.n	bebe <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    be60:	2001      	movs	r0, #1
    be62:	4b24      	ldr	r3, [pc, #144]	; (bef4 <spi_write_reg+0x180>)
    be64:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    be66:	2300      	movs	r3, #0
    be68:	9300      	str	r3, [sp, #0]
    be6a:	2300      	movs	r3, #0
    be6c:	2200      	movs	r2, #0
    be6e:	2100      	movs	r1, #0
    be70:	20cf      	movs	r0, #207	; 0xcf
    be72:	4c17      	ldr	r4, [pc, #92]	; (bed0 <spi_write_reg+0x15c>)
    be74:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    be76:	20cf      	movs	r0, #207	; 0xcf
    be78:	4b1c      	ldr	r3, [pc, #112]	; (beec <spi_write_reg+0x178>)
    be7a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    be7c:	4a1e      	ldr	r2, [pc, #120]	; (bef8 <spi_write_reg+0x184>)
    be7e:	4916      	ldr	r1, [pc, #88]	; (bed8 <spi_write_reg+0x164>)
    be80:	4b16      	ldr	r3, [pc, #88]	; (bedc <spi_write_reg+0x168>)
    be82:	0018      	movs	r0, r3
    be84:	4b16      	ldr	r3, [pc, #88]	; (bee0 <spi_write_reg+0x16c>)
    be86:	4798      	blx	r3
    be88:	230f      	movs	r3, #15
    be8a:	18fb      	adds	r3, r7, r3
    be8c:	7819      	ldrb	r1, [r3, #0]
    be8e:	683b      	ldr	r3, [r7, #0]
    be90:	687a      	ldr	r2, [r7, #4]
    be92:	481a      	ldr	r0, [pc, #104]	; (befc <spi_write_reg+0x188>)
    be94:	4c12      	ldr	r4, [pc, #72]	; (bee0 <spi_write_reg+0x16c>)
    be96:	47a0      	blx	r4
    be98:	200d      	movs	r0, #13
    be9a:	4b13      	ldr	r3, [pc, #76]	; (bee8 <spi_write_reg+0x174>)
    be9c:	4798      	blx	r3
		nm_bsp_sleep(1);
    be9e:	2001      	movs	r0, #1
    bea0:	4b14      	ldr	r3, [pc, #80]	; (bef4 <spi_write_reg+0x180>)
    bea2:	4798      	blx	r3
		retry--;
    bea4:	230f      	movs	r3, #15
    bea6:	18fb      	adds	r3, r7, r3
    bea8:	781a      	ldrb	r2, [r3, #0]
    beaa:	230f      	movs	r3, #15
    beac:	18fb      	adds	r3, r7, r3
    beae:	3a01      	subs	r2, #1
    beb0:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    beb2:	230f      	movs	r3, #15
    beb4:	18fb      	adds	r3, r7, r3
    beb6:	781b      	ldrb	r3, [r3, #0]
    beb8:	2b00      	cmp	r3, #0
    beba:	d000      	beq.n	bebe <spi_write_reg+0x14a>
    bebc:	e76f      	b.n	bd9e <spi_write_reg+0x2a>
	}

	return result;
    bebe:	230e      	movs	r3, #14
    bec0:	18fb      	adds	r3, r7, r3
    bec2:	781b      	ldrb	r3, [r3, #0]
    bec4:	b25b      	sxtb	r3, r3
}
    bec6:	0018      	movs	r0, r3
    bec8:	46bd      	mov	sp, r7
    beca:	b004      	add	sp, #16
    becc:	bdb0      	pop	{r4, r5, r7, pc}
    bece:	46c0      	nop			; (mov r8, r8)
    bed0:	0000b421 	.word	0x0000b421
    bed4:	00000396 	.word	0x00000396
    bed8:	000192b0 	.word	0x000192b0
    bedc:	00018cd8 	.word	0x00018cd8
    bee0:	00016d69 	.word	0x00016d69
    bee4:	00018f08 	.word	0x00018f08
    bee8:	00016d9d 	.word	0x00016d9d
    beec:	0000b865 	.word	0x0000b865
    bef0:	00018f34 	.word	0x00018f34
    bef4:	00008335 	.word	0x00008335
    bef8:	000003af 	.word	0x000003af
    befc:	00018f6c 	.word	0x00018f6c

0000bf00 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    bf00:	b5b0      	push	{r4, r5, r7, lr}
    bf02:	b088      	sub	sp, #32
    bf04:	af02      	add	r7, sp, #8
    bf06:	60f8      	str	r0, [r7, #12]
    bf08:	60b9      	str	r1, [r7, #8]
    bf0a:	1dbb      	adds	r3, r7, #6
    bf0c:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    bf0e:	2316      	movs	r3, #22
    bf10:	18fb      	adds	r3, r7, r3
    bf12:	220a      	movs	r2, #10
    bf14:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    bf16:	2315      	movs	r3, #21
    bf18:	18fb      	adds	r3, r7, r3
    bf1a:	22c7      	movs	r2, #199	; 0xc7
    bf1c:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    bf1e:	1dbb      	adds	r3, r7, #6
    bf20:	881b      	ldrh	r3, [r3, #0]
    bf22:	2b01      	cmp	r3, #1
    bf24:	d102      	bne.n	bf2c <nm_spi_write+0x2c>
		size = 2;
    bf26:	1dbb      	adds	r3, r7, #6
    bf28:	2202      	movs	r2, #2
    bf2a:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    bf2c:	1dbb      	adds	r3, r7, #6
    bf2e:	881a      	ldrh	r2, [r3, #0]
    bf30:	2317      	movs	r3, #23
    bf32:	18fc      	adds	r4, r7, r3
    bf34:	68f9      	ldr	r1, [r7, #12]
    bf36:	2315      	movs	r3, #21
    bf38:	18fb      	adds	r3, r7, r3
    bf3a:	7818      	ldrb	r0, [r3, #0]
    bf3c:	2300      	movs	r3, #0
    bf3e:	9300      	str	r3, [sp, #0]
    bf40:	0013      	movs	r3, r2
    bf42:	2200      	movs	r2, #0
    bf44:	4d5b      	ldr	r5, [pc, #364]	; (c0b4 <nm_spi_write+0x1b4>)
    bf46:	47a8      	blx	r5
    bf48:	0003      	movs	r3, r0
    bf4a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    bf4c:	2317      	movs	r3, #23
    bf4e:	18fb      	adds	r3, r7, r3
    bf50:	781b      	ldrb	r3, [r3, #0]
    bf52:	b25b      	sxtb	r3, r3
    bf54:	2b01      	cmp	r3, #1
    bf56:	d00f      	beq.n	bf78 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    bf58:	4a57      	ldr	r2, [pc, #348]	; (c0b8 <nm_spi_write+0x1b8>)
    bf5a:	4958      	ldr	r1, [pc, #352]	; (c0bc <nm_spi_write+0x1bc>)
    bf5c:	4b58      	ldr	r3, [pc, #352]	; (c0c0 <nm_spi_write+0x1c0>)
    bf5e:	0018      	movs	r0, r3
    bf60:	4b58      	ldr	r3, [pc, #352]	; (c0c4 <nm_spi_write+0x1c4>)
    bf62:	4798      	blx	r3
    bf64:	68fa      	ldr	r2, [r7, #12]
    bf66:	4b58      	ldr	r3, [pc, #352]	; (c0c8 <nm_spi_write+0x1c8>)
    bf68:	0011      	movs	r1, r2
    bf6a:	0018      	movs	r0, r3
    bf6c:	4b55      	ldr	r3, [pc, #340]	; (c0c4 <nm_spi_write+0x1c4>)
    bf6e:	4798      	blx	r3
    bf70:	200d      	movs	r0, #13
    bf72:	4b56      	ldr	r3, [pc, #344]	; (c0cc <nm_spi_write+0x1cc>)
    bf74:	4798      	blx	r3
		goto _FAIL_;
    bf76:	e05f      	b.n	c038 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    bf78:	2317      	movs	r3, #23
    bf7a:	18fc      	adds	r4, r7, r3
    bf7c:	2315      	movs	r3, #21
    bf7e:	18fb      	adds	r3, r7, r3
    bf80:	781b      	ldrb	r3, [r3, #0]
    bf82:	0018      	movs	r0, r3
    bf84:	4b52      	ldr	r3, [pc, #328]	; (c0d0 <nm_spi_write+0x1d0>)
    bf86:	4798      	blx	r3
    bf88:	0003      	movs	r3, r0
    bf8a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    bf8c:	2317      	movs	r3, #23
    bf8e:	18fb      	adds	r3, r7, r3
    bf90:	781b      	ldrb	r3, [r3, #0]
    bf92:	b25b      	sxtb	r3, r3
    bf94:	2b01      	cmp	r3, #1
    bf96:	d010      	beq.n	bfba <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    bf98:	23f4      	movs	r3, #244	; 0xf4
    bf9a:	009a      	lsls	r2, r3, #2
    bf9c:	4947      	ldr	r1, [pc, #284]	; (c0bc <nm_spi_write+0x1bc>)
    bf9e:	4b48      	ldr	r3, [pc, #288]	; (c0c0 <nm_spi_write+0x1c0>)
    bfa0:	0018      	movs	r0, r3
    bfa2:	4b48      	ldr	r3, [pc, #288]	; (c0c4 <nm_spi_write+0x1c4>)
    bfa4:	4798      	blx	r3
    bfa6:	68fa      	ldr	r2, [r7, #12]
    bfa8:	4b4a      	ldr	r3, [pc, #296]	; (c0d4 <nm_spi_write+0x1d4>)
    bfaa:	0011      	movs	r1, r2
    bfac:	0018      	movs	r0, r3
    bfae:	4b45      	ldr	r3, [pc, #276]	; (c0c4 <nm_spi_write+0x1c4>)
    bfb0:	4798      	blx	r3
    bfb2:	200d      	movs	r0, #13
    bfb4:	4b45      	ldr	r3, [pc, #276]	; (c0cc <nm_spi_write+0x1cc>)
    bfb6:	4798      	blx	r3
		goto _FAIL_;
    bfb8:	e03e      	b.n	c038 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    bfba:	2317      	movs	r3, #23
    bfbc:	18fc      	adds	r4, r7, r3
    bfbe:	1dbb      	adds	r3, r7, #6
    bfc0:	881a      	ldrh	r2, [r3, #0]
    bfc2:	68bb      	ldr	r3, [r7, #8]
    bfc4:	0011      	movs	r1, r2
    bfc6:	0018      	movs	r0, r3
    bfc8:	4b43      	ldr	r3, [pc, #268]	; (c0d8 <nm_spi_write+0x1d8>)
    bfca:	4798      	blx	r3
    bfcc:	0003      	movs	r3, r0
    bfce:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    bfd0:	2317      	movs	r3, #23
    bfd2:	18fb      	adds	r3, r7, r3
    bfd4:	781b      	ldrb	r3, [r3, #0]
    bfd6:	b25b      	sxtb	r3, r3
    bfd8:	2b01      	cmp	r3, #1
    bfda:	d00e      	beq.n	bffa <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    bfdc:	23f8      	movs	r3, #248	; 0xf8
    bfde:	009a      	lsls	r2, r3, #2
    bfe0:	4936      	ldr	r1, [pc, #216]	; (c0bc <nm_spi_write+0x1bc>)
    bfe2:	4b37      	ldr	r3, [pc, #220]	; (c0c0 <nm_spi_write+0x1c0>)
    bfe4:	0018      	movs	r0, r3
    bfe6:	4b37      	ldr	r3, [pc, #220]	; (c0c4 <nm_spi_write+0x1c4>)
    bfe8:	4798      	blx	r3
    bfea:	4b3c      	ldr	r3, [pc, #240]	; (c0dc <nm_spi_write+0x1dc>)
    bfec:	0018      	movs	r0, r3
    bfee:	4b3c      	ldr	r3, [pc, #240]	; (c0e0 <nm_spi_write+0x1e0>)
    bff0:	4798      	blx	r3
    bff2:	200d      	movs	r0, #13
    bff4:	4b35      	ldr	r3, [pc, #212]	; (c0cc <nm_spi_write+0x1cc>)
    bff6:	4798      	blx	r3
		goto _FAIL_;
    bff8:	e01e      	b.n	c038 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    bffa:	2317      	movs	r3, #23
    bffc:	18fc      	adds	r4, r7, r3
    bffe:	2315      	movs	r3, #21
    c000:	18fb      	adds	r3, r7, r3
    c002:	781b      	ldrb	r3, [r3, #0]
    c004:	0018      	movs	r0, r3
    c006:	4b37      	ldr	r3, [pc, #220]	; (c0e4 <nm_spi_write+0x1e4>)
    c008:	4798      	blx	r3
    c00a:	0003      	movs	r3, r0
    c00c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c00e:	2317      	movs	r3, #23
    c010:	18fb      	adds	r3, r7, r3
    c012:	781b      	ldrb	r3, [r3, #0]
    c014:	b25b      	sxtb	r3, r3
    c016:	2b01      	cmp	r3, #1
    c018:	d00e      	beq.n	c038 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    c01a:	23fa      	movs	r3, #250	; 0xfa
    c01c:	009a      	lsls	r2, r3, #2
    c01e:	4927      	ldr	r1, [pc, #156]	; (c0bc <nm_spi_write+0x1bc>)
    c020:	4b27      	ldr	r3, [pc, #156]	; (c0c0 <nm_spi_write+0x1c0>)
    c022:	0018      	movs	r0, r3
    c024:	4b27      	ldr	r3, [pc, #156]	; (c0c4 <nm_spi_write+0x1c4>)
    c026:	4798      	blx	r3
    c028:	4b2c      	ldr	r3, [pc, #176]	; (c0dc <nm_spi_write+0x1dc>)
    c02a:	0018      	movs	r0, r3
    c02c:	4b2c      	ldr	r3, [pc, #176]	; (c0e0 <nm_spi_write+0x1e0>)
    c02e:	4798      	blx	r3
    c030:	200d      	movs	r0, #13
    c032:	4b26      	ldr	r3, [pc, #152]	; (c0cc <nm_spi_write+0x1cc>)
    c034:	4798      	blx	r3
		goto _FAIL_;
    c036:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    c038:	2317      	movs	r3, #23
    c03a:	18fb      	adds	r3, r7, r3
    c03c:	781b      	ldrb	r3, [r3, #0]
    c03e:	b25b      	sxtb	r3, r3
    c040:	2b01      	cmp	r3, #1
    c042:	d02f      	beq.n	c0a4 <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    c044:	2001      	movs	r0, #1
    c046:	4b28      	ldr	r3, [pc, #160]	; (c0e8 <nm_spi_write+0x1e8>)
    c048:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c04a:	2300      	movs	r3, #0
    c04c:	9300      	str	r3, [sp, #0]
    c04e:	2300      	movs	r3, #0
    c050:	2200      	movs	r2, #0
    c052:	2100      	movs	r1, #0
    c054:	20cf      	movs	r0, #207	; 0xcf
    c056:	4c17      	ldr	r4, [pc, #92]	; (c0b4 <nm_spi_write+0x1b4>)
    c058:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    c05a:	20cf      	movs	r0, #207	; 0xcf
    c05c:	4b1c      	ldr	r3, [pc, #112]	; (c0d0 <nm_spi_write+0x1d0>)
    c05e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    c060:	4a22      	ldr	r2, [pc, #136]	; (c0ec <nm_spi_write+0x1ec>)
    c062:	4916      	ldr	r1, [pc, #88]	; (c0bc <nm_spi_write+0x1bc>)
    c064:	4b16      	ldr	r3, [pc, #88]	; (c0c0 <nm_spi_write+0x1c0>)
    c066:	0018      	movs	r0, r3
    c068:	4b16      	ldr	r3, [pc, #88]	; (c0c4 <nm_spi_write+0x1c4>)
    c06a:	4798      	blx	r3
    c06c:	2316      	movs	r3, #22
    c06e:	18fb      	adds	r3, r7, r3
    c070:	7819      	ldrb	r1, [r3, #0]
    c072:	1dbb      	adds	r3, r7, #6
    c074:	881b      	ldrh	r3, [r3, #0]
    c076:	68fa      	ldr	r2, [r7, #12]
    c078:	481d      	ldr	r0, [pc, #116]	; (c0f0 <nm_spi_write+0x1f0>)
    c07a:	4c12      	ldr	r4, [pc, #72]	; (c0c4 <nm_spi_write+0x1c4>)
    c07c:	47a0      	blx	r4
    c07e:	200d      	movs	r0, #13
    c080:	4b12      	ldr	r3, [pc, #72]	; (c0cc <nm_spi_write+0x1cc>)
    c082:	4798      	blx	r3
		nm_bsp_sleep(1);
    c084:	2001      	movs	r0, #1
    c086:	4b18      	ldr	r3, [pc, #96]	; (c0e8 <nm_spi_write+0x1e8>)
    c088:	4798      	blx	r3
		retry--;
    c08a:	2316      	movs	r3, #22
    c08c:	18fb      	adds	r3, r7, r3
    c08e:	781a      	ldrb	r2, [r3, #0]
    c090:	2316      	movs	r3, #22
    c092:	18fb      	adds	r3, r7, r3
    c094:	3a01      	subs	r2, #1
    c096:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    c098:	2316      	movs	r3, #22
    c09a:	18fb      	adds	r3, r7, r3
    c09c:	781b      	ldrb	r3, [r3, #0]
    c09e:	2b00      	cmp	r3, #0
    c0a0:	d000      	beq.n	c0a4 <nm_spi_write+0x1a4>
    c0a2:	e73c      	b.n	bf1e <nm_spi_write+0x1e>
	}


	return result;
    c0a4:	2317      	movs	r3, #23
    c0a6:	18fb      	adds	r3, r7, r3
    c0a8:	781b      	ldrb	r3, [r3, #0]
    c0aa:	b25b      	sxtb	r3, r3
}
    c0ac:	0018      	movs	r0, r3
    c0ae:	46bd      	mov	sp, r7
    c0b0:	b006      	add	sp, #24
    c0b2:	bdb0      	pop	{r4, r5, r7, pc}
    c0b4:	0000b421 	.word	0x0000b421
    c0b8:	000003ca 	.word	0x000003ca
    c0bc:	000192c0 	.word	0x000192c0
    c0c0:	00018cd8 	.word	0x00018cd8
    c0c4:	00016d69 	.word	0x00016d69
    c0c8:	00018f88 	.word	0x00018f88
    c0cc:	00016d9d 	.word	0x00016d9d
    c0d0:	0000b865 	.word	0x0000b865
    c0d4:	00018fb8 	.word	0x00018fb8
    c0d8:	0000bba1 	.word	0x0000bba1
    c0dc:	00018ff0 	.word	0x00018ff0
    c0e0:	00016e85 	.word	0x00016e85
    c0e4:	0000b765 	.word	0x0000b765
    c0e8:	00008335 	.word	0x00008335
    c0ec:	000003f2 	.word	0x000003f2
    c0f0:	00019018 	.word	0x00019018

0000c0f4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    c0f4:	b5b0      	push	{r4, r5, r7, lr}
    c0f6:	b086      	sub	sp, #24
    c0f8:	af02      	add	r7, sp, #8
    c0fa:	6078      	str	r0, [r7, #4]
    c0fc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    c0fe:	230f      	movs	r3, #15
    c100:	18fb      	adds	r3, r7, r3
    c102:	220a      	movs	r2, #10
    c104:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    c106:	230e      	movs	r3, #14
    c108:	18fb      	adds	r3, r7, r3
    c10a:	2201      	movs	r2, #1
    c10c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    c10e:	230d      	movs	r3, #13
    c110:	18fb      	adds	r3, r7, r3
    c112:	22ca      	movs	r2, #202	; 0xca
    c114:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    c116:	230c      	movs	r3, #12
    c118:	18fb      	adds	r3, r7, r3
    c11a:	2200      	movs	r2, #0
    c11c:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    c11e:	687b      	ldr	r3, [r7, #4]
    c120:	2bff      	cmp	r3, #255	; 0xff
    c122:	d808      	bhi.n	c136 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    c124:	230d      	movs	r3, #13
    c126:	18fb      	adds	r3, r7, r3
    c128:	22c4      	movs	r2, #196	; 0xc4
    c12a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    c12c:	230c      	movs	r3, #12
    c12e:	18fb      	adds	r3, r7, r3
    c130:	2201      	movs	r2, #1
    c132:	701a      	strb	r2, [r3, #0]
    c134:	e007      	b.n	c146 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    c136:	230d      	movs	r3, #13
    c138:	18fb      	adds	r3, r7, r3
    c13a:	22ca      	movs	r2, #202	; 0xca
    c13c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    c13e:	230c      	movs	r3, #12
    c140:	18fb      	adds	r3, r7, r3
    c142:	2200      	movs	r2, #0
    c144:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    c146:	230e      	movs	r3, #14
    c148:	18fc      	adds	r4, r7, r3
    c14a:	6879      	ldr	r1, [r7, #4]
    c14c:	230d      	movs	r3, #13
    c14e:	18fb      	adds	r3, r7, r3
    c150:	7818      	ldrb	r0, [r3, #0]
    c152:	230c      	movs	r3, #12
    c154:	18fb      	adds	r3, r7, r3
    c156:	781b      	ldrb	r3, [r3, #0]
    c158:	9300      	str	r3, [sp, #0]
    c15a:	2304      	movs	r3, #4
    c15c:	2200      	movs	r2, #0
    c15e:	4d56      	ldr	r5, [pc, #344]	; (c2b8 <spi_read_reg+0x1c4>)
    c160:	47a8      	blx	r5
    c162:	0003      	movs	r3, r0
    c164:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c166:	230e      	movs	r3, #14
    c168:	18fb      	adds	r3, r7, r3
    c16a:	781b      	ldrb	r3, [r3, #0]
    c16c:	b25b      	sxtb	r3, r3
    c16e:	2b01      	cmp	r3, #1
    c170:	d00f      	beq.n	c192 <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    c172:	4a52      	ldr	r2, [pc, #328]	; (c2bc <spi_read_reg+0x1c8>)
    c174:	4952      	ldr	r1, [pc, #328]	; (c2c0 <spi_read_reg+0x1cc>)
    c176:	4b53      	ldr	r3, [pc, #332]	; (c2c4 <spi_read_reg+0x1d0>)
    c178:	0018      	movs	r0, r3
    c17a:	4b53      	ldr	r3, [pc, #332]	; (c2c8 <spi_read_reg+0x1d4>)
    c17c:	4798      	blx	r3
    c17e:	687a      	ldr	r2, [r7, #4]
    c180:	4b52      	ldr	r3, [pc, #328]	; (c2cc <spi_read_reg+0x1d8>)
    c182:	0011      	movs	r1, r2
    c184:	0018      	movs	r0, r3
    c186:	4b50      	ldr	r3, [pc, #320]	; (c2c8 <spi_read_reg+0x1d4>)
    c188:	4798      	blx	r3
    c18a:	200d      	movs	r0, #13
    c18c:	4b50      	ldr	r3, [pc, #320]	; (c2d0 <spi_read_reg+0x1dc>)
    c18e:	4798      	blx	r3
		goto _FAIL_;
    c190:	e055      	b.n	c23e <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    c192:	230e      	movs	r3, #14
    c194:	18fc      	adds	r4, r7, r3
    c196:	230d      	movs	r3, #13
    c198:	18fb      	adds	r3, r7, r3
    c19a:	781b      	ldrb	r3, [r3, #0]
    c19c:	0018      	movs	r0, r3
    c19e:	4b4d      	ldr	r3, [pc, #308]	; (c2d4 <spi_read_reg+0x1e0>)
    c1a0:	4798      	blx	r3
    c1a2:	0003      	movs	r3, r0
    c1a4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c1a6:	230e      	movs	r3, #14
    c1a8:	18fb      	adds	r3, r7, r3
    c1aa:	781b      	ldrb	r3, [r3, #0]
    c1ac:	b25b      	sxtb	r3, r3
    c1ae:	2b01      	cmp	r3, #1
    c1b0:	d00f      	beq.n	c1d2 <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    c1b2:	4a49      	ldr	r2, [pc, #292]	; (c2d8 <spi_read_reg+0x1e4>)
    c1b4:	4942      	ldr	r1, [pc, #264]	; (c2c0 <spi_read_reg+0x1cc>)
    c1b6:	4b43      	ldr	r3, [pc, #268]	; (c2c4 <spi_read_reg+0x1d0>)
    c1b8:	0018      	movs	r0, r3
    c1ba:	4b43      	ldr	r3, [pc, #268]	; (c2c8 <spi_read_reg+0x1d4>)
    c1bc:	4798      	blx	r3
    c1be:	687a      	ldr	r2, [r7, #4]
    c1c0:	4b46      	ldr	r3, [pc, #280]	; (c2dc <spi_read_reg+0x1e8>)
    c1c2:	0011      	movs	r1, r2
    c1c4:	0018      	movs	r0, r3
    c1c6:	4b40      	ldr	r3, [pc, #256]	; (c2c8 <spi_read_reg+0x1d4>)
    c1c8:	4798      	blx	r3
    c1ca:	200d      	movs	r0, #13
    c1cc:	4b40      	ldr	r3, [pc, #256]	; (c2d0 <spi_read_reg+0x1dc>)
    c1ce:	4798      	blx	r3
		goto _FAIL_;
    c1d0:	e035      	b.n	c23e <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    c1d2:	230e      	movs	r3, #14
    c1d4:	18fc      	adds	r4, r7, r3
    c1d6:	230c      	movs	r3, #12
    c1d8:	18fb      	adds	r3, r7, r3
    c1da:	781a      	ldrb	r2, [r3, #0]
    c1dc:	2308      	movs	r3, #8
    c1de:	18fb      	adds	r3, r7, r3
    c1e0:	2104      	movs	r1, #4
    c1e2:	0018      	movs	r0, r3
    c1e4:	4b3e      	ldr	r3, [pc, #248]	; (c2e0 <spi_read_reg+0x1ec>)
    c1e6:	4798      	blx	r3
    c1e8:	0003      	movs	r3, r0
    c1ea:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c1ec:	230e      	movs	r3, #14
    c1ee:	18fb      	adds	r3, r7, r3
    c1f0:	781b      	ldrb	r3, [r3, #0]
    c1f2:	b25b      	sxtb	r3, r3
    c1f4:	2b01      	cmp	r3, #1
    c1f6:	d00d      	beq.n	c214 <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    c1f8:	4a3a      	ldr	r2, [pc, #232]	; (c2e4 <spi_read_reg+0x1f0>)
    c1fa:	4931      	ldr	r1, [pc, #196]	; (c2c0 <spi_read_reg+0x1cc>)
    c1fc:	4b31      	ldr	r3, [pc, #196]	; (c2c4 <spi_read_reg+0x1d0>)
    c1fe:	0018      	movs	r0, r3
    c200:	4b31      	ldr	r3, [pc, #196]	; (c2c8 <spi_read_reg+0x1d4>)
    c202:	4798      	blx	r3
    c204:	4b38      	ldr	r3, [pc, #224]	; (c2e8 <spi_read_reg+0x1f4>)
    c206:	0018      	movs	r0, r3
    c208:	4b38      	ldr	r3, [pc, #224]	; (c2ec <spi_read_reg+0x1f8>)
    c20a:	4798      	blx	r3
    c20c:	200d      	movs	r0, #13
    c20e:	4b30      	ldr	r3, [pc, #192]	; (c2d0 <spi_read_reg+0x1dc>)
    c210:	4798      	blx	r3
		goto _FAIL_;
    c212:	e014      	b.n	c23e <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    c214:	2308      	movs	r3, #8
    c216:	18fb      	adds	r3, r7, r3
    c218:	781b      	ldrb	r3, [r3, #0]
    c21a:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    c21c:	2308      	movs	r3, #8
    c21e:	18fb      	adds	r3, r7, r3
    c220:	785b      	ldrb	r3, [r3, #1]
    c222:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    c224:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    c226:	2308      	movs	r3, #8
    c228:	18fb      	adds	r3, r7, r3
    c22a:	789b      	ldrb	r3, [r3, #2]
    c22c:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    c22e:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    c230:	2308      	movs	r3, #8
    c232:	18fb      	adds	r3, r7, r3
    c234:	78db      	ldrb	r3, [r3, #3]
    c236:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    c238:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    c23a:	683b      	ldr	r3, [r7, #0]
    c23c:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    c23e:	230e      	movs	r3, #14
    c240:	18fb      	adds	r3, r7, r3
    c242:	781b      	ldrb	r3, [r3, #0]
    c244:	b25b      	sxtb	r3, r3
    c246:	2b01      	cmp	r3, #1
    c248:	d02e      	beq.n	c2a8 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    c24a:	2001      	movs	r0, #1
    c24c:	4b28      	ldr	r3, [pc, #160]	; (c2f0 <spi_read_reg+0x1fc>)
    c24e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c250:	2300      	movs	r3, #0
    c252:	9300      	str	r3, [sp, #0]
    c254:	2300      	movs	r3, #0
    c256:	2200      	movs	r2, #0
    c258:	2100      	movs	r1, #0
    c25a:	20cf      	movs	r0, #207	; 0xcf
    c25c:	4c16      	ldr	r4, [pc, #88]	; (c2b8 <spi_read_reg+0x1c4>)
    c25e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    c260:	20cf      	movs	r0, #207	; 0xcf
    c262:	4b1c      	ldr	r3, [pc, #112]	; (c2d4 <spi_read_reg+0x1e0>)
    c264:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    c266:	4a23      	ldr	r2, [pc, #140]	; (c2f4 <spi_read_reg+0x200>)
    c268:	4915      	ldr	r1, [pc, #84]	; (c2c0 <spi_read_reg+0x1cc>)
    c26a:	4b16      	ldr	r3, [pc, #88]	; (c2c4 <spi_read_reg+0x1d0>)
    c26c:	0018      	movs	r0, r3
    c26e:	4b16      	ldr	r3, [pc, #88]	; (c2c8 <spi_read_reg+0x1d4>)
    c270:	4798      	blx	r3
    c272:	230f      	movs	r3, #15
    c274:	18fb      	adds	r3, r7, r3
    c276:	7819      	ldrb	r1, [r3, #0]
    c278:	687a      	ldr	r2, [r7, #4]
    c27a:	4b1f      	ldr	r3, [pc, #124]	; (c2f8 <spi_read_reg+0x204>)
    c27c:	0018      	movs	r0, r3
    c27e:	4b12      	ldr	r3, [pc, #72]	; (c2c8 <spi_read_reg+0x1d4>)
    c280:	4798      	blx	r3
    c282:	200d      	movs	r0, #13
    c284:	4b12      	ldr	r3, [pc, #72]	; (c2d0 <spi_read_reg+0x1dc>)
    c286:	4798      	blx	r3
		nm_bsp_sleep(1);
    c288:	2001      	movs	r0, #1
    c28a:	4b19      	ldr	r3, [pc, #100]	; (c2f0 <spi_read_reg+0x1fc>)
    c28c:	4798      	blx	r3
		retry--;
    c28e:	230f      	movs	r3, #15
    c290:	18fb      	adds	r3, r7, r3
    c292:	781a      	ldrb	r2, [r3, #0]
    c294:	230f      	movs	r3, #15
    c296:	18fb      	adds	r3, r7, r3
    c298:	3a01      	subs	r2, #1
    c29a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    c29c:	230f      	movs	r3, #15
    c29e:	18fb      	adds	r3, r7, r3
    c2a0:	781b      	ldrb	r3, [r3, #0]
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	d000      	beq.n	c2a8 <spi_read_reg+0x1b4>
    c2a6:	e73a      	b.n	c11e <spi_read_reg+0x2a>
	}
		
	return result;
    c2a8:	230e      	movs	r3, #14
    c2aa:	18fb      	adds	r3, r7, r3
    c2ac:	781b      	ldrb	r3, [r3, #0]
    c2ae:	b25b      	sxtb	r3, r3
}
    c2b0:	0018      	movs	r0, r3
    c2b2:	46bd      	mov	sp, r7
    c2b4:	b004      	add	sp, #16
    c2b6:	bdb0      	pop	{r4, r5, r7, pc}
    c2b8:	0000b421 	.word	0x0000b421
    c2bc:	00000417 	.word	0x00000417
    c2c0:	000192d0 	.word	0x000192d0
    c2c4:	00018cd8 	.word	0x00018cd8
    c2c8:	00016d69 	.word	0x00016d69
    c2cc:	00019034 	.word	0x00019034
    c2d0:	00016d9d 	.word	0x00016d9d
    c2d4:	0000b865 	.word	0x0000b865
    c2d8:	0000041d 	.word	0x0000041d
    c2dc:	00019060 	.word	0x00019060
    c2e0:	0000b99d 	.word	0x0000b99d
    c2e4:	00000424 	.word	0x00000424
    c2e8:	00019094 	.word	0x00019094
    c2ec:	00016e85 	.word	0x00016e85
    c2f0:	00008335 	.word	0x00008335
    c2f4:	0000043c 	.word	0x0000043c
    c2f8:	000190b4 	.word	0x000190b4

0000c2fc <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    c2fc:	b5b0      	push	{r4, r5, r7, lr}
    c2fe:	b088      	sub	sp, #32
    c300:	af02      	add	r7, sp, #8
    c302:	60f8      	str	r0, [r7, #12]
    c304:	60b9      	str	r1, [r7, #8]
    c306:	1dbb      	adds	r3, r7, #6
    c308:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    c30a:	2314      	movs	r3, #20
    c30c:	18fb      	adds	r3, r7, r3
    c30e:	22c8      	movs	r2, #200	; 0xc8
    c310:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    c312:	2316      	movs	r3, #22
    c314:	18fb      	adds	r3, r7, r3
    c316:	220a      	movs	r2, #10
    c318:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    c31a:	2315      	movs	r3, #21
    c31c:	18fb      	adds	r3, r7, r3
    c31e:	2200      	movs	r2, #0
    c320:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    c322:	1dbb      	adds	r3, r7, #6
    c324:	881b      	ldrh	r3, [r3, #0]
    c326:	2b01      	cmp	r3, #1
    c328:	d106      	bne.n	c338 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    c32a:	1dbb      	adds	r3, r7, #6
    c32c:	2202      	movs	r2, #2
    c32e:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    c330:	2315      	movs	r3, #21
    c332:	18fb      	adds	r3, r7, r3
    c334:	2201      	movs	r2, #1
    c336:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    c338:	1dbb      	adds	r3, r7, #6
    c33a:	881a      	ldrh	r2, [r3, #0]
    c33c:	2317      	movs	r3, #23
    c33e:	18fc      	adds	r4, r7, r3
    c340:	68f9      	ldr	r1, [r7, #12]
    c342:	2314      	movs	r3, #20
    c344:	18fb      	adds	r3, r7, r3
    c346:	7818      	ldrb	r0, [r3, #0]
    c348:	2300      	movs	r3, #0
    c34a:	9300      	str	r3, [sp, #0]
    c34c:	0013      	movs	r3, r2
    c34e:	2200      	movs	r2, #0
    c350:	4d56      	ldr	r5, [pc, #344]	; (c4ac <nm_spi_read+0x1b0>)
    c352:	47a8      	blx	r5
    c354:	0003      	movs	r3, r0
    c356:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c358:	2317      	movs	r3, #23
    c35a:	18fb      	adds	r3, r7, r3
    c35c:	781b      	ldrb	r3, [r3, #0]
    c35e:	b25b      	sxtb	r3, r3
    c360:	2b01      	cmp	r3, #1
    c362:	d00f      	beq.n	c384 <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    c364:	4a52      	ldr	r2, [pc, #328]	; (c4b0 <nm_spi_read+0x1b4>)
    c366:	4953      	ldr	r1, [pc, #332]	; (c4b4 <nm_spi_read+0x1b8>)
    c368:	4b53      	ldr	r3, [pc, #332]	; (c4b8 <nm_spi_read+0x1bc>)
    c36a:	0018      	movs	r0, r3
    c36c:	4b53      	ldr	r3, [pc, #332]	; (c4bc <nm_spi_read+0x1c0>)
    c36e:	4798      	blx	r3
    c370:	68fa      	ldr	r2, [r7, #12]
    c372:	4b53      	ldr	r3, [pc, #332]	; (c4c0 <nm_spi_read+0x1c4>)
    c374:	0011      	movs	r1, r2
    c376:	0018      	movs	r0, r3
    c378:	4b50      	ldr	r3, [pc, #320]	; (c4bc <nm_spi_read+0x1c0>)
    c37a:	4798      	blx	r3
    c37c:	200d      	movs	r0, #13
    c37e:	4b51      	ldr	r3, [pc, #324]	; (c4c4 <nm_spi_read+0x1c8>)
    c380:	4798      	blx	r3
		goto _FAIL_;
    c382:	e055      	b.n	c430 <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    c384:	2317      	movs	r3, #23
    c386:	18fc      	adds	r4, r7, r3
    c388:	2314      	movs	r3, #20
    c38a:	18fb      	adds	r3, r7, r3
    c38c:	781b      	ldrb	r3, [r3, #0]
    c38e:	0018      	movs	r0, r3
    c390:	4b4d      	ldr	r3, [pc, #308]	; (c4c8 <nm_spi_read+0x1cc>)
    c392:	4798      	blx	r3
    c394:	0003      	movs	r3, r0
    c396:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c398:	2317      	movs	r3, #23
    c39a:	18fb      	adds	r3, r7, r3
    c39c:	781b      	ldrb	r3, [r3, #0]
    c39e:	b25b      	sxtb	r3, r3
    c3a0:	2b01      	cmp	r3, #1
    c3a2:	d00f      	beq.n	c3c4 <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    c3a4:	4a49      	ldr	r2, [pc, #292]	; (c4cc <nm_spi_read+0x1d0>)
    c3a6:	4943      	ldr	r1, [pc, #268]	; (c4b4 <nm_spi_read+0x1b8>)
    c3a8:	4b43      	ldr	r3, [pc, #268]	; (c4b8 <nm_spi_read+0x1bc>)
    c3aa:	0018      	movs	r0, r3
    c3ac:	4b43      	ldr	r3, [pc, #268]	; (c4bc <nm_spi_read+0x1c0>)
    c3ae:	4798      	blx	r3
    c3b0:	68fa      	ldr	r2, [r7, #12]
    c3b2:	4b47      	ldr	r3, [pc, #284]	; (c4d0 <nm_spi_read+0x1d4>)
    c3b4:	0011      	movs	r1, r2
    c3b6:	0018      	movs	r0, r3
    c3b8:	4b40      	ldr	r3, [pc, #256]	; (c4bc <nm_spi_read+0x1c0>)
    c3ba:	4798      	blx	r3
    c3bc:	200d      	movs	r0, #13
    c3be:	4b41      	ldr	r3, [pc, #260]	; (c4c4 <nm_spi_read+0x1c8>)
    c3c0:	4798      	blx	r3
		goto _FAIL_;
    c3c2:	e035      	b.n	c430 <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    c3c4:	2315      	movs	r3, #21
    c3c6:	18fb      	adds	r3, r7, r3
    c3c8:	781b      	ldrb	r3, [r3, #0]
    c3ca:	2b00      	cmp	r3, #0
    c3cc:	d011      	beq.n	c3f2 <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    c3ce:	2317      	movs	r3, #23
    c3d0:	18fc      	adds	r4, r7, r3
    c3d2:	1dbb      	adds	r3, r7, #6
    c3d4:	8819      	ldrh	r1, [r3, #0]
    c3d6:	2310      	movs	r3, #16
    c3d8:	18fb      	adds	r3, r7, r3
    c3da:	2200      	movs	r2, #0
    c3dc:	0018      	movs	r0, r3
    c3de:	4b3d      	ldr	r3, [pc, #244]	; (c4d4 <nm_spi_read+0x1d8>)
    c3e0:	4798      	blx	r3
    c3e2:	0003      	movs	r3, r0
    c3e4:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    c3e6:	2310      	movs	r3, #16
    c3e8:	18fb      	adds	r3, r7, r3
    c3ea:	781a      	ldrb	r2, [r3, #0]
    c3ec:	68bb      	ldr	r3, [r7, #8]
    c3ee:	701a      	strb	r2, [r3, #0]
    c3f0:	e00a      	b.n	c408 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    c3f2:	2317      	movs	r3, #23
    c3f4:	18fc      	adds	r4, r7, r3
    c3f6:	1dbb      	adds	r3, r7, #6
    c3f8:	8819      	ldrh	r1, [r3, #0]
    c3fa:	68bb      	ldr	r3, [r7, #8]
    c3fc:	2200      	movs	r2, #0
    c3fe:	0018      	movs	r0, r3
    c400:	4b34      	ldr	r3, [pc, #208]	; (c4d4 <nm_spi_read+0x1d8>)
    c402:	4798      	blx	r3
    c404:	0003      	movs	r3, r0
    c406:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    c408:	2317      	movs	r3, #23
    c40a:	18fb      	adds	r3, r7, r3
    c40c:	781b      	ldrb	r3, [r3, #0]
    c40e:	b25b      	sxtb	r3, r3
    c410:	2b01      	cmp	r3, #1
    c412:	d00d      	beq.n	c430 <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    c414:	4a30      	ldr	r2, [pc, #192]	; (c4d8 <nm_spi_read+0x1dc>)
    c416:	4927      	ldr	r1, [pc, #156]	; (c4b4 <nm_spi_read+0x1b8>)
    c418:	4b27      	ldr	r3, [pc, #156]	; (c4b8 <nm_spi_read+0x1bc>)
    c41a:	0018      	movs	r0, r3
    c41c:	4b27      	ldr	r3, [pc, #156]	; (c4bc <nm_spi_read+0x1c0>)
    c41e:	4798      	blx	r3
    c420:	4b2e      	ldr	r3, [pc, #184]	; (c4dc <nm_spi_read+0x1e0>)
    c422:	0018      	movs	r0, r3
    c424:	4b2e      	ldr	r3, [pc, #184]	; (c4e0 <nm_spi_read+0x1e4>)
    c426:	4798      	blx	r3
    c428:	200d      	movs	r0, #13
    c42a:	4b26      	ldr	r3, [pc, #152]	; (c4c4 <nm_spi_read+0x1c8>)
    c42c:	4798      	blx	r3
		goto _FAIL_;
    c42e:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    c430:	2317      	movs	r3, #23
    c432:	18fb      	adds	r3, r7, r3
    c434:	781b      	ldrb	r3, [r3, #0]
    c436:	b25b      	sxtb	r3, r3
    c438:	2b01      	cmp	r3, #1
    c43a:	d02f      	beq.n	c49c <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    c43c:	2001      	movs	r0, #1
    c43e:	4b29      	ldr	r3, [pc, #164]	; (c4e4 <nm_spi_read+0x1e8>)
    c440:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c442:	2300      	movs	r3, #0
    c444:	9300      	str	r3, [sp, #0]
    c446:	2300      	movs	r3, #0
    c448:	2200      	movs	r2, #0
    c44a:	2100      	movs	r1, #0
    c44c:	20cf      	movs	r0, #207	; 0xcf
    c44e:	4c17      	ldr	r4, [pc, #92]	; (c4ac <nm_spi_read+0x1b0>)
    c450:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    c452:	20cf      	movs	r0, #207	; 0xcf
    c454:	4b1c      	ldr	r3, [pc, #112]	; (c4c8 <nm_spi_read+0x1cc>)
    c456:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    c458:	4a23      	ldr	r2, [pc, #140]	; (c4e8 <nm_spi_read+0x1ec>)
    c45a:	4916      	ldr	r1, [pc, #88]	; (c4b4 <nm_spi_read+0x1b8>)
    c45c:	4b16      	ldr	r3, [pc, #88]	; (c4b8 <nm_spi_read+0x1bc>)
    c45e:	0018      	movs	r0, r3
    c460:	4b16      	ldr	r3, [pc, #88]	; (c4bc <nm_spi_read+0x1c0>)
    c462:	4798      	blx	r3
    c464:	2316      	movs	r3, #22
    c466:	18fb      	adds	r3, r7, r3
    c468:	7819      	ldrb	r1, [r3, #0]
    c46a:	1dbb      	adds	r3, r7, #6
    c46c:	881b      	ldrh	r3, [r3, #0]
    c46e:	68fa      	ldr	r2, [r7, #12]
    c470:	481e      	ldr	r0, [pc, #120]	; (c4ec <nm_spi_read+0x1f0>)
    c472:	4c12      	ldr	r4, [pc, #72]	; (c4bc <nm_spi_read+0x1c0>)
    c474:	47a0      	blx	r4
    c476:	200d      	movs	r0, #13
    c478:	4b12      	ldr	r3, [pc, #72]	; (c4c4 <nm_spi_read+0x1c8>)
    c47a:	4798      	blx	r3
		nm_bsp_sleep(1);
    c47c:	2001      	movs	r0, #1
    c47e:	4b19      	ldr	r3, [pc, #100]	; (c4e4 <nm_spi_read+0x1e8>)
    c480:	4798      	blx	r3
		retry--;
    c482:	2316      	movs	r3, #22
    c484:	18fb      	adds	r3, r7, r3
    c486:	781a      	ldrb	r2, [r3, #0]
    c488:	2316      	movs	r3, #22
    c48a:	18fb      	adds	r3, r7, r3
    c48c:	3a01      	subs	r2, #1
    c48e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    c490:	2316      	movs	r3, #22
    c492:	18fb      	adds	r3, r7, r3
    c494:	781b      	ldrb	r3, [r3, #0]
    c496:	2b00      	cmp	r3, #0
    c498:	d000      	beq.n	c49c <nm_spi_read+0x1a0>
    c49a:	e742      	b.n	c322 <nm_spi_read+0x26>
	}

	return result;
    c49c:	2317      	movs	r3, #23
    c49e:	18fb      	adds	r3, r7, r3
    c4a0:	781b      	ldrb	r3, [r3, #0]
    c4a2:	b25b      	sxtb	r3, r3
}
    c4a4:	0018      	movs	r0, r3
    c4a6:	46bd      	mov	sp, r7
    c4a8:	b006      	add	sp, #24
    c4aa:	bdb0      	pop	{r4, r5, r7, pc}
    c4ac:	0000b421 	.word	0x0000b421
    c4b0:	0000045d 	.word	0x0000045d
    c4b4:	000192e0 	.word	0x000192e0
    c4b8:	00018cd8 	.word	0x00018cd8
    c4bc:	00016d69 	.word	0x00016d69
    c4c0:	000190cc 	.word	0x000190cc
    c4c4:	00016d9d 	.word	0x00016d9d
    c4c8:	0000b865 	.word	0x0000b865
    c4cc:	00000463 	.word	0x00000463
    c4d0:	000190fc 	.word	0x000190fc
    c4d4:	0000b99d 	.word	0x0000b99d
    c4d8:	00000473 	.word	0x00000473
    c4dc:	00019134 	.word	0x00019134
    c4e0:	00016e85 	.word	0x00016e85
    c4e4:	00008335 	.word	0x00008335
    c4e8:	00000484 	.word	0x00000484
    c4ec:	00019018 	.word	0x00019018

0000c4f0 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    c4f0:	b580      	push	{r7, lr}
    c4f2:	b082      	sub	sp, #8
    c4f4:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    c4f6:	4b0c      	ldr	r3, [pc, #48]	; (c528 <spi_init_pkt_sz+0x38>)
    c4f8:	0018      	movs	r0, r3
    c4fa:	4b0c      	ldr	r3, [pc, #48]	; (c52c <spi_init_pkt_sz+0x3c>)
    c4fc:	4798      	blx	r3
    c4fe:	0003      	movs	r3, r0
    c500:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    c502:	687b      	ldr	r3, [r7, #4]
    c504:	2270      	movs	r2, #112	; 0x70
    c506:	4393      	bics	r3, r2
    c508:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    c50a:	687b      	ldr	r3, [r7, #4]
    c50c:	2250      	movs	r2, #80	; 0x50
    c50e:	4313      	orrs	r3, r2
    c510:	607b      	str	r3, [r7, #4]
    c512:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    c514:	687b      	ldr	r3, [r7, #4]
    c516:	4a04      	ldr	r2, [pc, #16]	; (c528 <spi_init_pkt_sz+0x38>)
    c518:	0019      	movs	r1, r3
    c51a:	0010      	movs	r0, r2
    c51c:	4b04      	ldr	r3, [pc, #16]	; (c530 <spi_init_pkt_sz+0x40>)
    c51e:	4798      	blx	r3
}
    c520:	46c0      	nop			; (mov r8, r8)
    c522:	46bd      	mov	sp, r7
    c524:	b002      	add	sp, #8
    c526:	bd80      	pop	{r7, pc}
    c528:	0000e824 	.word	0x0000e824
    c52c:	0000c6c9 	.word	0x0000c6c9
    c530:	0000c73d 	.word	0x0000c73d

0000c534 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    c534:	b590      	push	{r4, r7, lr}
    c536:	b083      	sub	sp, #12
    c538:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c53a:	2300      	movs	r3, #0
    c53c:	9300      	str	r3, [sp, #0]
    c53e:	2300      	movs	r3, #0
    c540:	2200      	movs	r2, #0
    c542:	2100      	movs	r1, #0
    c544:	20cf      	movs	r0, #207	; 0xcf
    c546:	4c05      	ldr	r4, [pc, #20]	; (c55c <nm_spi_reset+0x28>)
    c548:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    c54a:	20cf      	movs	r0, #207	; 0xcf
    c54c:	4b04      	ldr	r3, [pc, #16]	; (c560 <nm_spi_reset+0x2c>)
    c54e:	4798      	blx	r3
	return M2M_SUCCESS;
    c550:	2300      	movs	r3, #0
}
    c552:	0018      	movs	r0, r3
    c554:	46bd      	mov	sp, r7
    c556:	b001      	add	sp, #4
    c558:	bd90      	pop	{r4, r7, pc}
    c55a:	46c0      	nop			; (mov r8, r8)
    c55c:	0000b421 	.word	0x0000b421
    c560:	0000b865 	.word	0x0000b865

0000c564 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    c564:	b580      	push	{r7, lr}
    c566:	b082      	sub	sp, #8
    c568:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    c56a:	2300      	movs	r3, #0
    c56c:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    c56e:	4b3e      	ldr	r3, [pc, #248]	; (c668 <nm_spi_init+0x104>)
    c570:	2200      	movs	r2, #0
    c572:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    c574:	003b      	movs	r3, r7
    c576:	4a3d      	ldr	r2, [pc, #244]	; (c66c <nm_spi_init+0x108>)
    c578:	0019      	movs	r1, r3
    c57a:	0010      	movs	r0, r2
    c57c:	4b3c      	ldr	r3, [pc, #240]	; (c670 <nm_spi_init+0x10c>)
    c57e:	4798      	blx	r3
    c580:	1e03      	subs	r3, r0, #0
    c582:	d126      	bne.n	c5d2 <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    c584:	4b38      	ldr	r3, [pc, #224]	; (c668 <nm_spi_init+0x104>)
    c586:	2201      	movs	r2, #1
    c588:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    c58a:	4a3a      	ldr	r2, [pc, #232]	; (c674 <nm_spi_init+0x110>)
    c58c:	493a      	ldr	r1, [pc, #232]	; (c678 <nm_spi_init+0x114>)
    c58e:	4b3b      	ldr	r3, [pc, #236]	; (c67c <nm_spi_init+0x118>)
    c590:	0018      	movs	r0, r3
    c592:	4b3b      	ldr	r3, [pc, #236]	; (c680 <nm_spi_init+0x11c>)
    c594:	4798      	blx	r3
    c596:	4b3b      	ldr	r3, [pc, #236]	; (c684 <nm_spi_init+0x120>)
    c598:	0018      	movs	r0, r3
    c59a:	4b3b      	ldr	r3, [pc, #236]	; (c688 <nm_spi_init+0x124>)
    c59c:	4798      	blx	r3
    c59e:	200d      	movs	r0, #13
    c5a0:	4b3a      	ldr	r3, [pc, #232]	; (c68c <nm_spi_init+0x128>)
    c5a2:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    c5a4:	003b      	movs	r3, r7
    c5a6:	4a31      	ldr	r2, [pc, #196]	; (c66c <nm_spi_init+0x108>)
    c5a8:	0019      	movs	r1, r3
    c5aa:	0010      	movs	r0, r2
    c5ac:	4b30      	ldr	r3, [pc, #192]	; (c670 <nm_spi_init+0x10c>)
    c5ae:	4798      	blx	r3
    c5b0:	1e03      	subs	r3, r0, #0
    c5b2:	d10e      	bne.n	c5d2 <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    c5b4:	4a36      	ldr	r2, [pc, #216]	; (c690 <nm_spi_init+0x12c>)
    c5b6:	4930      	ldr	r1, [pc, #192]	; (c678 <nm_spi_init+0x114>)
    c5b8:	4b30      	ldr	r3, [pc, #192]	; (c67c <nm_spi_init+0x118>)
    c5ba:	0018      	movs	r0, r3
    c5bc:	4b30      	ldr	r3, [pc, #192]	; (c680 <nm_spi_init+0x11c>)
    c5be:	4798      	blx	r3
    c5c0:	4b34      	ldr	r3, [pc, #208]	; (c694 <nm_spi_init+0x130>)
    c5c2:	0018      	movs	r0, r3
    c5c4:	4b30      	ldr	r3, [pc, #192]	; (c688 <nm_spi_init+0x124>)
    c5c6:	4798      	blx	r3
    c5c8:	200d      	movs	r0, #13
    c5ca:	4b30      	ldr	r3, [pc, #192]	; (c68c <nm_spi_init+0x128>)
    c5cc:	4798      	blx	r3
			return 0;
    c5ce:	2300      	movs	r3, #0
    c5d0:	e045      	b.n	c65e <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    c5d2:	4b25      	ldr	r3, [pc, #148]	; (c668 <nm_spi_init+0x104>)
    c5d4:	781b      	ldrb	r3, [r3, #0]
    c5d6:	2b00      	cmp	r3, #0
    c5d8:	d125      	bne.n	c626 <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    c5da:	683b      	ldr	r3, [r7, #0]
    c5dc:	220c      	movs	r2, #12
    c5de:	4393      	bics	r3, r2
    c5e0:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    c5e2:	683b      	ldr	r3, [r7, #0]
    c5e4:	2270      	movs	r2, #112	; 0x70
    c5e6:	4393      	bics	r3, r2
    c5e8:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    c5ea:	683b      	ldr	r3, [r7, #0]
    c5ec:	2250      	movs	r2, #80	; 0x50
    c5ee:	4313      	orrs	r3, r2
    c5f0:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    c5f2:	683b      	ldr	r3, [r7, #0]
    c5f4:	4a1d      	ldr	r2, [pc, #116]	; (c66c <nm_spi_init+0x108>)
    c5f6:	0019      	movs	r1, r3
    c5f8:	0010      	movs	r0, r2
    c5fa:	4b27      	ldr	r3, [pc, #156]	; (c698 <nm_spi_init+0x134>)
    c5fc:	4798      	blx	r3
    c5fe:	1e03      	subs	r3, r0, #0
    c600:	d10e      	bne.n	c620 <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    c602:	4a26      	ldr	r2, [pc, #152]	; (c69c <nm_spi_init+0x138>)
    c604:	491c      	ldr	r1, [pc, #112]	; (c678 <nm_spi_init+0x114>)
    c606:	4b1d      	ldr	r3, [pc, #116]	; (c67c <nm_spi_init+0x118>)
    c608:	0018      	movs	r0, r3
    c60a:	4b1d      	ldr	r3, [pc, #116]	; (c680 <nm_spi_init+0x11c>)
    c60c:	4798      	blx	r3
    c60e:	4b24      	ldr	r3, [pc, #144]	; (c6a0 <nm_spi_init+0x13c>)
    c610:	0018      	movs	r0, r3
    c612:	4b1d      	ldr	r3, [pc, #116]	; (c688 <nm_spi_init+0x124>)
    c614:	4798      	blx	r3
    c616:	200d      	movs	r0, #13
    c618:	4b1c      	ldr	r3, [pc, #112]	; (c68c <nm_spi_init+0x128>)
    c61a:	4798      	blx	r3
			return 0;
    c61c:	2300      	movs	r3, #0
    c61e:	e01e      	b.n	c65e <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    c620:	4b11      	ldr	r3, [pc, #68]	; (c668 <nm_spi_init+0x104>)
    c622:	2201      	movs	r2, #1
    c624:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    c626:	1d3a      	adds	r2, r7, #4
    c628:	2380      	movs	r3, #128	; 0x80
    c62a:	015b      	lsls	r3, r3, #5
    c62c:	0011      	movs	r1, r2
    c62e:	0018      	movs	r0, r3
    c630:	4b0f      	ldr	r3, [pc, #60]	; (c670 <nm_spi_init+0x10c>)
    c632:	4798      	blx	r3
    c634:	1e03      	subs	r3, r0, #0
    c636:	d10f      	bne.n	c658 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    c638:	4a1a      	ldr	r2, [pc, #104]	; (c6a4 <nm_spi_init+0x140>)
    c63a:	490f      	ldr	r1, [pc, #60]	; (c678 <nm_spi_init+0x114>)
    c63c:	4b0f      	ldr	r3, [pc, #60]	; (c67c <nm_spi_init+0x118>)
    c63e:	0018      	movs	r0, r3
    c640:	4b0f      	ldr	r3, [pc, #60]	; (c680 <nm_spi_init+0x11c>)
    c642:	4798      	blx	r3
    c644:	4b18      	ldr	r3, [pc, #96]	; (c6a8 <nm_spi_init+0x144>)
    c646:	0018      	movs	r0, r3
    c648:	4b0f      	ldr	r3, [pc, #60]	; (c688 <nm_spi_init+0x124>)
    c64a:	4798      	blx	r3
    c64c:	200d      	movs	r0, #13
    c64e:	4b0f      	ldr	r3, [pc, #60]	; (c68c <nm_spi_init+0x128>)
    c650:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    c652:	2306      	movs	r3, #6
    c654:	425b      	negs	r3, r3
    c656:	e002      	b.n	c65e <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    c658:	4b14      	ldr	r3, [pc, #80]	; (c6ac <nm_spi_init+0x148>)
    c65a:	4798      	blx	r3


	return M2M_SUCCESS;
    c65c:	2300      	movs	r3, #0
}
    c65e:	0018      	movs	r0, r3
    c660:	46bd      	mov	sp, r7
    c662:	b002      	add	sp, #8
    c664:	bd80      	pop	{r7, pc}
    c666:	46c0      	nop			; (mov r8, r8)
    c668:	20000218 	.word	0x20000218
    c66c:	0000e824 	.word	0x0000e824
    c670:	0000c0f5 	.word	0x0000c0f5
    c674:	000004c7 	.word	0x000004c7
    c678:	000192ec 	.word	0x000192ec
    c67c:	00018cd8 	.word	0x00018cd8
    c680:	00016d69 	.word	0x00016d69
    c684:	0001915c 	.word	0x0001915c
    c688:	00016e85 	.word	0x00016e85
    c68c:	00016d9d 	.word	0x00016d9d
    c690:	000004ca 	.word	0x000004ca
    c694:	000191ac 	.word	0x000191ac
    c698:	0000bd75 	.word	0x0000bd75
    c69c:	000004d4 	.word	0x000004d4
    c6a0:	000191d8 	.word	0x000191d8
    c6a4:	000004de 	.word	0x000004de
    c6a8:	0001920c 	.word	0x0001920c
    c6ac:	0000c4f1 	.word	0x0000c4f1

0000c6b0 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    c6b0:	b580      	push	{r7, lr}
    c6b2:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    c6b4:	4b03      	ldr	r3, [pc, #12]	; (c6c4 <nm_spi_deinit+0x14>)
    c6b6:	2200      	movs	r2, #0
    c6b8:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    c6ba:	2300      	movs	r3, #0
}
    c6bc:	0018      	movs	r0, r3
    c6be:	46bd      	mov	sp, r7
    c6c0:	bd80      	pop	{r7, pc}
    c6c2:	46c0      	nop			; (mov r8, r8)
    c6c4:	20000218 	.word	0x20000218

0000c6c8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    c6c8:	b580      	push	{r7, lr}
    c6ca:	b084      	sub	sp, #16
    c6cc:	af00      	add	r7, sp, #0
    c6ce:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    c6d0:	230c      	movs	r3, #12
    c6d2:	18fa      	adds	r2, r7, r3
    c6d4:	687b      	ldr	r3, [r7, #4]
    c6d6:	0011      	movs	r1, r2
    c6d8:	0018      	movs	r0, r3
    c6da:	4b03      	ldr	r3, [pc, #12]	; (c6e8 <nm_spi_read_reg+0x20>)
    c6dc:	4798      	blx	r3

	return u32Val;
    c6de:	68fb      	ldr	r3, [r7, #12]
}
    c6e0:	0018      	movs	r0, r3
    c6e2:	46bd      	mov	sp, r7
    c6e4:	b004      	add	sp, #16
    c6e6:	bd80      	pop	{r7, pc}
    c6e8:	0000c0f5 	.word	0x0000c0f5

0000c6ec <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    c6ec:	b590      	push	{r4, r7, lr}
    c6ee:	b085      	sub	sp, #20
    c6f0:	af00      	add	r7, sp, #0
    c6f2:	6078      	str	r0, [r7, #4]
    c6f4:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    c6f6:	230f      	movs	r3, #15
    c6f8:	18fc      	adds	r4, r7, r3
    c6fa:	683a      	ldr	r2, [r7, #0]
    c6fc:	687b      	ldr	r3, [r7, #4]
    c6fe:	0011      	movs	r1, r2
    c700:	0018      	movs	r0, r3
    c702:	4b0d      	ldr	r3, [pc, #52]	; (c738 <nm_spi_read_reg_with_ret+0x4c>)
    c704:	4798      	blx	r3
    c706:	0003      	movs	r3, r0
    c708:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c70a:	230f      	movs	r3, #15
    c70c:	18fb      	adds	r3, r7, r3
    c70e:	781b      	ldrb	r3, [r3, #0]
    c710:	b25b      	sxtb	r3, r3
    c712:	2b01      	cmp	r3, #1
    c714:	d104      	bne.n	c720 <nm_spi_read_reg_with_ret+0x34>
    c716:	230f      	movs	r3, #15
    c718:	18fb      	adds	r3, r7, r3
    c71a:	2200      	movs	r2, #0
    c71c:	701a      	strb	r2, [r3, #0]
    c71e:	e003      	b.n	c728 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c720:	230f      	movs	r3, #15
    c722:	18fb      	adds	r3, r7, r3
    c724:	22fa      	movs	r2, #250	; 0xfa
    c726:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    c728:	230f      	movs	r3, #15
    c72a:	18fb      	adds	r3, r7, r3
    c72c:	781b      	ldrb	r3, [r3, #0]
    c72e:	b25b      	sxtb	r3, r3
}
    c730:	0018      	movs	r0, r3
    c732:	46bd      	mov	sp, r7
    c734:	b005      	add	sp, #20
    c736:	bd90      	pop	{r4, r7, pc}
    c738:	0000c0f5 	.word	0x0000c0f5

0000c73c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    c73c:	b590      	push	{r4, r7, lr}
    c73e:	b085      	sub	sp, #20
    c740:	af00      	add	r7, sp, #0
    c742:	6078      	str	r0, [r7, #4]
    c744:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    c746:	230f      	movs	r3, #15
    c748:	18fc      	adds	r4, r7, r3
    c74a:	683a      	ldr	r2, [r7, #0]
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	0011      	movs	r1, r2
    c750:	0018      	movs	r0, r3
    c752:	4b0d      	ldr	r3, [pc, #52]	; (c788 <nm_spi_write_reg+0x4c>)
    c754:	4798      	blx	r3
    c756:	0003      	movs	r3, r0
    c758:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c75a:	230f      	movs	r3, #15
    c75c:	18fb      	adds	r3, r7, r3
    c75e:	781b      	ldrb	r3, [r3, #0]
    c760:	b25b      	sxtb	r3, r3
    c762:	2b01      	cmp	r3, #1
    c764:	d104      	bne.n	c770 <nm_spi_write_reg+0x34>
    c766:	230f      	movs	r3, #15
    c768:	18fb      	adds	r3, r7, r3
    c76a:	2200      	movs	r2, #0
    c76c:	701a      	strb	r2, [r3, #0]
    c76e:	e003      	b.n	c778 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c770:	230f      	movs	r3, #15
    c772:	18fb      	adds	r3, r7, r3
    c774:	22fa      	movs	r2, #250	; 0xfa
    c776:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    c778:	230f      	movs	r3, #15
    c77a:	18fb      	adds	r3, r7, r3
    c77c:	781b      	ldrb	r3, [r3, #0]
    c77e:	b25b      	sxtb	r3, r3
}
    c780:	0018      	movs	r0, r3
    c782:	46bd      	mov	sp, r7
    c784:	b005      	add	sp, #20
    c786:	bd90      	pop	{r4, r7, pc}
    c788:	0000bd75 	.word	0x0000bd75

0000c78c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    c78c:	b590      	push	{r4, r7, lr}
    c78e:	b087      	sub	sp, #28
    c790:	af00      	add	r7, sp, #0
    c792:	60f8      	str	r0, [r7, #12]
    c794:	60b9      	str	r1, [r7, #8]
    c796:	1dbb      	adds	r3, r7, #6
    c798:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    c79a:	2317      	movs	r3, #23
    c79c:	18fc      	adds	r4, r7, r3
    c79e:	1dbb      	adds	r3, r7, #6
    c7a0:	881a      	ldrh	r2, [r3, #0]
    c7a2:	68b9      	ldr	r1, [r7, #8]
    c7a4:	68fb      	ldr	r3, [r7, #12]
    c7a6:	0018      	movs	r0, r3
    c7a8:	4b0d      	ldr	r3, [pc, #52]	; (c7e0 <nm_spi_read_block+0x54>)
    c7aa:	4798      	blx	r3
    c7ac:	0003      	movs	r3, r0
    c7ae:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c7b0:	2317      	movs	r3, #23
    c7b2:	18fb      	adds	r3, r7, r3
    c7b4:	781b      	ldrb	r3, [r3, #0]
    c7b6:	b25b      	sxtb	r3, r3
    c7b8:	2b01      	cmp	r3, #1
    c7ba:	d104      	bne.n	c7c6 <nm_spi_read_block+0x3a>
    c7bc:	2317      	movs	r3, #23
    c7be:	18fb      	adds	r3, r7, r3
    c7c0:	2200      	movs	r2, #0
    c7c2:	701a      	strb	r2, [r3, #0]
    c7c4:	e003      	b.n	c7ce <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c7c6:	2317      	movs	r3, #23
    c7c8:	18fb      	adds	r3, r7, r3
    c7ca:	22fa      	movs	r2, #250	; 0xfa
    c7cc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    c7ce:	2317      	movs	r3, #23
    c7d0:	18fb      	adds	r3, r7, r3
    c7d2:	781b      	ldrb	r3, [r3, #0]
    c7d4:	b25b      	sxtb	r3, r3
}
    c7d6:	0018      	movs	r0, r3
    c7d8:	46bd      	mov	sp, r7
    c7da:	b007      	add	sp, #28
    c7dc:	bd90      	pop	{r4, r7, pc}
    c7de:	46c0      	nop			; (mov r8, r8)
    c7e0:	0000c2fd 	.word	0x0000c2fd

0000c7e4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    c7e4:	b590      	push	{r4, r7, lr}
    c7e6:	b087      	sub	sp, #28
    c7e8:	af00      	add	r7, sp, #0
    c7ea:	60f8      	str	r0, [r7, #12]
    c7ec:	60b9      	str	r1, [r7, #8]
    c7ee:	1dbb      	adds	r3, r7, #6
    c7f0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    c7f2:	2317      	movs	r3, #23
    c7f4:	18fc      	adds	r4, r7, r3
    c7f6:	1dbb      	adds	r3, r7, #6
    c7f8:	881a      	ldrh	r2, [r3, #0]
    c7fa:	68b9      	ldr	r1, [r7, #8]
    c7fc:	68fb      	ldr	r3, [r7, #12]
    c7fe:	0018      	movs	r0, r3
    c800:	4b0d      	ldr	r3, [pc, #52]	; (c838 <nm_spi_write_block+0x54>)
    c802:	4798      	blx	r3
    c804:	0003      	movs	r3, r0
    c806:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c808:	2317      	movs	r3, #23
    c80a:	18fb      	adds	r3, r7, r3
    c80c:	781b      	ldrb	r3, [r3, #0]
    c80e:	b25b      	sxtb	r3, r3
    c810:	2b01      	cmp	r3, #1
    c812:	d104      	bne.n	c81e <nm_spi_write_block+0x3a>
    c814:	2317      	movs	r3, #23
    c816:	18fb      	adds	r3, r7, r3
    c818:	2200      	movs	r2, #0
    c81a:	701a      	strb	r2, [r3, #0]
    c81c:	e003      	b.n	c826 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c81e:	2317      	movs	r3, #23
    c820:	18fb      	adds	r3, r7, r3
    c822:	22fa      	movs	r2, #250	; 0xfa
    c824:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    c826:	2317      	movs	r3, #23
    c828:	18fb      	adds	r3, r7, r3
    c82a:	781b      	ldrb	r3, [r3, #0]
    c82c:	b25b      	sxtb	r3, r3
}
    c82e:	0018      	movs	r0, r3
    c830:	46bd      	mov	sp, r7
    c832:	b007      	add	sp, #28
    c834:	bd90      	pop	{r4, r7, pc}
    c836:	46c0      	nop			; (mov r8, r8)
    c838:	0000bf01 	.word	0x0000bf01

0000c83c <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    c83c:	b590      	push	{r4, r7, lr}
    c83e:	b089      	sub	sp, #36	; 0x24
    c840:	af00      	add	r7, sp, #0
    c842:	60b9      	str	r1, [r7, #8]
    c844:	0011      	movs	r1, r2
    c846:	607b      	str	r3, [r7, #4]
    c848:	230f      	movs	r3, #15
    c84a:	18fb      	adds	r3, r7, r3
    c84c:	1c02      	adds	r2, r0, #0
    c84e:	701a      	strb	r2, [r3, #0]
    c850:	230e      	movs	r3, #14
    c852:	18fb      	adds	r3, r7, r3
    c854:	1c0a      	adds	r2, r1, #0
    c856:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    c858:	2330      	movs	r3, #48	; 0x30
    c85a:	18fb      	adds	r3, r7, r3
    c85c:	881b      	ldrh	r3, [r3, #0]
    c85e:	2b00      	cmp	r3, #0
    c860:	d100      	bne.n	c864 <Socket_ReadSocketData+0x28>
    c862:	e0d6      	b.n	ca12 <Socket_ReadSocketData+0x1d6>
    c864:	230f      	movs	r3, #15
    c866:	18fb      	adds	r3, r7, r3
    c868:	2200      	movs	r2, #0
    c86a:	569a      	ldrsb	r2, [r3, r2]
    c86c:	4b6b      	ldr	r3, [pc, #428]	; (ca1c <Socket_ReadSocketData+0x1e0>)
    c86e:	0112      	lsls	r2, r2, #4
    c870:	58d3      	ldr	r3, [r2, r3]
    c872:	2b00      	cmp	r3, #0
    c874:	d100      	bne.n	c878 <Socket_ReadSocketData+0x3c>
    c876:	e0cc      	b.n	ca12 <Socket_ReadSocketData+0x1d6>
    c878:	230f      	movs	r3, #15
    c87a:	18fb      	adds	r3, r7, r3
    c87c:	781b      	ldrb	r3, [r3, #0]
    c87e:	b25b      	sxtb	r3, r3
    c880:	4a66      	ldr	r2, [pc, #408]	; (ca1c <Socket_ReadSocketData+0x1e0>)
    c882:	011b      	lsls	r3, r3, #4
    c884:	18d3      	adds	r3, r2, r3
    c886:	3304      	adds	r3, #4
    c888:	881b      	ldrh	r3, [r3, #0]
    c88a:	b29b      	uxth	r3, r3
    c88c:	2b00      	cmp	r3, #0
    c88e:	d100      	bne.n	c892 <Socket_ReadSocketData+0x56>
    c890:	e0bf      	b.n	ca12 <Socket_ReadSocketData+0x1d6>
    c892:	230f      	movs	r3, #15
    c894:	18fb      	adds	r3, r7, r3
    c896:	781b      	ldrb	r3, [r3, #0]
    c898:	b25b      	sxtb	r3, r3
    c89a:	4a60      	ldr	r2, [pc, #384]	; (ca1c <Socket_ReadSocketData+0x1e0>)
    c89c:	011b      	lsls	r3, r3, #4
    c89e:	18d3      	adds	r3, r2, r3
    c8a0:	330a      	adds	r3, #10
    c8a2:	781b      	ldrb	r3, [r3, #0]
    c8a4:	b2db      	uxtb	r3, r3
    c8a6:	2b01      	cmp	r3, #1
    c8a8:	d000      	beq.n	c8ac <Socket_ReadSocketData+0x70>
    c8aa:	e0b2      	b.n	ca12 <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    c8ac:	687b      	ldr	r3, [r7, #4]
    c8ae:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    c8b0:	68bb      	ldr	r3, [r7, #8]
    c8b2:	2230      	movs	r2, #48	; 0x30
    c8b4:	18ba      	adds	r2, r7, r2
    c8b6:	8812      	ldrh	r2, [r2, #0]
    c8b8:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    c8ba:	2319      	movs	r3, #25
    c8bc:	18fb      	adds	r3, r7, r3
    c8be:	2201      	movs	r2, #1
    c8c0:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    c8c2:	231a      	movs	r3, #26
    c8c4:	18fb      	adds	r3, r7, r3
    c8c6:	2230      	movs	r2, #48	; 0x30
    c8c8:	18ba      	adds	r2, r7, r2
    c8ca:	8812      	ldrh	r2, [r2, #0]
    c8cc:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    c8ce:	230f      	movs	r3, #15
    c8d0:	18fb      	adds	r3, r7, r3
    c8d2:	781b      	ldrb	r3, [r3, #0]
    c8d4:	b25b      	sxtb	r3, r3
    c8d6:	4a51      	ldr	r2, [pc, #324]	; (ca1c <Socket_ReadSocketData+0x1e0>)
    c8d8:	011b      	lsls	r3, r3, #4
    c8da:	18d3      	adds	r3, r2, r3
    c8dc:	3304      	adds	r3, #4
    c8de:	881b      	ldrh	r3, [r3, #0]
    c8e0:	b29b      	uxth	r3, r3
    c8e2:	221a      	movs	r2, #26
    c8e4:	18ba      	adds	r2, r7, r2
    c8e6:	8812      	ldrh	r2, [r2, #0]
    c8e8:	1ad3      	subs	r3, r2, r3
    c8ea:	b29a      	uxth	r2, r3
    c8ec:	2316      	movs	r3, #22
    c8ee:	18fb      	adds	r3, r7, r3
    c8f0:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    c8f2:	2316      	movs	r3, #22
    c8f4:	18fb      	adds	r3, r7, r3
    c8f6:	2200      	movs	r2, #0
    c8f8:	5e9b      	ldrsh	r3, [r3, r2]
    c8fa:	2b00      	cmp	r3, #0
    c8fc:	dd0f      	ble.n	c91e <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    c8fe:	2319      	movs	r3, #25
    c900:	18fb      	adds	r3, r7, r3
    c902:	2200      	movs	r2, #0
    c904:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    c906:	230f      	movs	r3, #15
    c908:	18fb      	adds	r3, r7, r3
    c90a:	2200      	movs	r2, #0
    c90c:	569a      	ldrsb	r2, [r3, r2]
    c90e:	231a      	movs	r3, #26
    c910:	18fb      	adds	r3, r7, r3
    c912:	4942      	ldr	r1, [pc, #264]	; (ca1c <Socket_ReadSocketData+0x1e0>)
    c914:	0112      	lsls	r2, r2, #4
    c916:	188a      	adds	r2, r1, r2
    c918:	3204      	adds	r2, #4
    c91a:	8812      	ldrh	r2, [r2, #0]
    c91c:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    c91e:	230f      	movs	r3, #15
    c920:	18fb      	adds	r3, r7, r3
    c922:	2200      	movs	r2, #0
    c924:	569a      	ldrsb	r2, [r3, r2]
    c926:	4b3d      	ldr	r3, [pc, #244]	; (ca1c <Socket_ReadSocketData+0x1e0>)
    c928:	0112      	lsls	r2, r2, #4
    c92a:	58d1      	ldr	r1, [r2, r3]
    c92c:	2319      	movs	r3, #25
    c92e:	18fb      	adds	r3, r7, r3
    c930:	781c      	ldrb	r4, [r3, #0]
    c932:	231a      	movs	r3, #26
    c934:	18fb      	adds	r3, r7, r3
    c936:	881a      	ldrh	r2, [r3, #0]
    c938:	69f8      	ldr	r0, [r7, #28]
    c93a:	0023      	movs	r3, r4
    c93c:	4c38      	ldr	r4, [pc, #224]	; (ca20 <Socket_ReadSocketData+0x1e4>)
    c93e:	47a0      	blx	r4
    c940:	1e03      	subs	r3, r0, #0
    c942:	d14f      	bne.n	c9e4 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    c944:	230f      	movs	r3, #15
    c946:	18fb      	adds	r3, r7, r3
    c948:	2200      	movs	r2, #0
    c94a:	569a      	ldrsb	r2, [r3, r2]
    c94c:	4b33      	ldr	r3, [pc, #204]	; (ca1c <Socket_ReadSocketData+0x1e0>)
    c94e:	0112      	lsls	r2, r2, #4
    c950:	58d2      	ldr	r2, [r2, r3]
    c952:	68bb      	ldr	r3, [r7, #8]
    c954:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    c956:	231a      	movs	r3, #26
    c958:	18fb      	adds	r3, r7, r3
    c95a:	2200      	movs	r2, #0
    c95c:	5e9a      	ldrsh	r2, [r3, r2]
    c95e:	68bb      	ldr	r3, [r7, #8]
    c960:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    c962:	68bb      	ldr	r3, [r7, #8]
    c964:	88da      	ldrh	r2, [r3, #6]
    c966:	231a      	movs	r3, #26
    c968:	18fb      	adds	r3, r7, r3
    c96a:	881b      	ldrh	r3, [r3, #0]
    c96c:	1ad3      	subs	r3, r2, r3
    c96e:	b29a      	uxth	r2, r3
    c970:	68bb      	ldr	r3, [r7, #8]
    c972:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    c974:	4b2b      	ldr	r3, [pc, #172]	; (ca24 <Socket_ReadSocketData+0x1e8>)
    c976:	681b      	ldr	r3, [r3, #0]
    c978:	2b00      	cmp	r3, #0
    c97a:	d00b      	beq.n	c994 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    c97c:	4b29      	ldr	r3, [pc, #164]	; (ca24 <Socket_ReadSocketData+0x1e8>)
    c97e:	681b      	ldr	r3, [r3, #0]
    c980:	68bc      	ldr	r4, [r7, #8]
    c982:	220e      	movs	r2, #14
    c984:	18ba      	adds	r2, r7, r2
    c986:	7811      	ldrb	r1, [r2, #0]
    c988:	220f      	movs	r2, #15
    c98a:	18ba      	adds	r2, r7, r2
    c98c:	2000      	movs	r0, #0
    c98e:	5610      	ldrsb	r0, [r2, r0]
    c990:	0022      	movs	r2, r4
    c992:	4798      	blx	r3

				u16ReadCount -= u16Read;
    c994:	2330      	movs	r3, #48	; 0x30
    c996:	18f9      	adds	r1, r7, r3
    c998:	2330      	movs	r3, #48	; 0x30
    c99a:	18fa      	adds	r2, r7, r3
    c99c:	231a      	movs	r3, #26
    c99e:	18fb      	adds	r3, r7, r3
    c9a0:	8812      	ldrh	r2, [r2, #0]
    c9a2:	881b      	ldrh	r3, [r3, #0]
    c9a4:	1ad3      	subs	r3, r2, r3
    c9a6:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    c9a8:	231a      	movs	r3, #26
    c9aa:	18fb      	adds	r3, r7, r3
    c9ac:	881b      	ldrh	r3, [r3, #0]
    c9ae:	69fa      	ldr	r2, [r7, #28]
    c9b0:	18d3      	adds	r3, r2, r3
    c9b2:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    c9b4:	230f      	movs	r3, #15
    c9b6:	18fb      	adds	r3, r7, r3
    c9b8:	781b      	ldrb	r3, [r3, #0]
    c9ba:	b25b      	sxtb	r3, r3
    c9bc:	4a17      	ldr	r2, [pc, #92]	; (ca1c <Socket_ReadSocketData+0x1e0>)
    c9be:	011b      	lsls	r3, r3, #4
    c9c0:	18d3      	adds	r3, r2, r3
    c9c2:	330a      	adds	r3, #10
    c9c4:	781b      	ldrb	r3, [r3, #0]
    c9c6:	b2db      	uxtb	r3, r3
    c9c8:	2b00      	cmp	r3, #0
    c9ca:	d11b      	bne.n	ca04 <Socket_ReadSocketData+0x1c8>
    c9cc:	2330      	movs	r3, #48	; 0x30
    c9ce:	18fb      	adds	r3, r7, r3
    c9d0:	881b      	ldrh	r3, [r3, #0]
    c9d2:	2b00      	cmp	r3, #0
    c9d4:	d016      	beq.n	ca04 <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    c9d6:	2301      	movs	r3, #1
    c9d8:	2200      	movs	r2, #0
    c9da:	2100      	movs	r1, #0
    c9dc:	2000      	movs	r0, #0
    c9de:	4c10      	ldr	r4, [pc, #64]	; (ca20 <Socket_ReadSocketData+0x1e4>)
    c9e0:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    c9e2:	e016      	b.n	ca12 <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    c9e4:	4b10      	ldr	r3, [pc, #64]	; (ca28 <Socket_ReadSocketData+0x1ec>)
    c9e6:	0018      	movs	r0, r3
    c9e8:	4b10      	ldr	r3, [pc, #64]	; (ca2c <Socket_ReadSocketData+0x1f0>)
    c9ea:	4798      	blx	r3
    c9ec:	2330      	movs	r3, #48	; 0x30
    c9ee:	18fb      	adds	r3, r7, r3
    c9f0:	881a      	ldrh	r2, [r3, #0]
    c9f2:	4b0f      	ldr	r3, [pc, #60]	; (ca30 <Socket_ReadSocketData+0x1f4>)
    c9f4:	0011      	movs	r1, r2
    c9f6:	0018      	movs	r0, r3
    c9f8:	4b0c      	ldr	r3, [pc, #48]	; (ca2c <Socket_ReadSocketData+0x1f0>)
    c9fa:	4798      	blx	r3
    c9fc:	200d      	movs	r0, #13
    c9fe:	4b0d      	ldr	r3, [pc, #52]	; (ca34 <Socket_ReadSocketData+0x1f8>)
    ca00:	4798      	blx	r3
				break;
    ca02:	e006      	b.n	ca12 <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    ca04:	2330      	movs	r3, #48	; 0x30
    ca06:	18fb      	adds	r3, r7, r3
    ca08:	881b      	ldrh	r3, [r3, #0]
    ca0a:	2b00      	cmp	r3, #0
    ca0c:	d000      	beq.n	ca10 <Socket_ReadSocketData+0x1d4>
    ca0e:	e754      	b.n	c8ba <Socket_ReadSocketData+0x7e>
	}
}
    ca10:	e7ff      	b.n	ca12 <Socket_ReadSocketData+0x1d6>
    ca12:	46c0      	nop			; (mov r8, r8)
    ca14:	46bd      	mov	sp, r7
    ca16:	b009      	add	sp, #36	; 0x24
    ca18:	bd90      	pop	{r4, r7, pc}
    ca1a:	46c0      	nop			; (mov r8, r8)
    ca1c:	2000030c 	.word	0x2000030c
    ca20:	00009779 	.word	0x00009779
    ca24:	200003bc 	.word	0x200003bc
    ca28:	000192f8 	.word	0x000192f8
    ca2c:	00016d69 	.word	0x00016d69
    ca30:	00019304 	.word	0x00019304
    ca34:	00016d9d 	.word	0x00016d9d

0000ca38 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    ca38:	b590      	push	{r4, r7, lr}
    ca3a:	b0bb      	sub	sp, #236	; 0xec
    ca3c:	af02      	add	r7, sp, #8
    ca3e:	603a      	str	r2, [r7, #0]
    ca40:	1dfb      	adds	r3, r7, #7
    ca42:	1c02      	adds	r2, r0, #0
    ca44:	701a      	strb	r2, [r3, #0]
    ca46:	1d3b      	adds	r3, r7, #4
    ca48:	1c0a      	adds	r2, r1, #0
    ca4a:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    ca4c:	1dfb      	adds	r3, r7, #7
    ca4e:	781b      	ldrb	r3, [r3, #0]
    ca50:	2b41      	cmp	r3, #65	; 0x41
    ca52:	d003      	beq.n	ca5c <m2m_ip_cb+0x24>
    ca54:	1dfb      	adds	r3, r7, #7
    ca56:	781b      	ldrb	r3, [r3, #0]
    ca58:	2b54      	cmp	r3, #84	; 0x54
    ca5a:	d120      	bne.n	ca9e <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    ca5c:	23cc      	movs	r3, #204	; 0xcc
    ca5e:	18f9      	adds	r1, r7, r3
    ca60:	6838      	ldr	r0, [r7, #0]
    ca62:	2300      	movs	r3, #0
    ca64:	2204      	movs	r2, #4
    ca66:	4c98      	ldr	r4, [pc, #608]	; (ccc8 <m2m_ip_cb+0x290>)
    ca68:	47a0      	blx	r4
    ca6a:	1e03      	subs	r3, r0, #0
    ca6c:	d000      	beq.n	ca70 <m2m_ip_cb+0x38>
    ca6e:	e275      	b.n	cf5c <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    ca70:	23cc      	movs	r3, #204	; 0xcc
    ca72:	18fb      	adds	r3, r7, r3
    ca74:	2201      	movs	r2, #1
    ca76:	569a      	ldrsb	r2, [r3, r2]
    ca78:	23c8      	movs	r3, #200	; 0xc8
    ca7a:	18fb      	adds	r3, r7, r3
    ca7c:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    ca7e:	4b93      	ldr	r3, [pc, #588]	; (cccc <m2m_ip_cb+0x294>)
    ca80:	681b      	ldr	r3, [r3, #0]
    ca82:	2b00      	cmp	r3, #0
    ca84:	d100      	bne.n	ca88 <m2m_ip_cb+0x50>
    ca86:	e269      	b.n	cf5c <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    ca88:	4b90      	ldr	r3, [pc, #576]	; (cccc <m2m_ip_cb+0x294>)
    ca8a:	681b      	ldr	r3, [r3, #0]
    ca8c:	22cc      	movs	r2, #204	; 0xcc
    ca8e:	18ba      	adds	r2, r7, r2
    ca90:	2000      	movs	r0, #0
    ca92:	5610      	ldrsb	r0, [r2, r0]
    ca94:	22c8      	movs	r2, #200	; 0xc8
    ca96:	18ba      	adds	r2, r7, r2
    ca98:	2101      	movs	r1, #1
    ca9a:	4798      	blx	r3
	{
    ca9c:	e25e      	b.n	cf5c <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    ca9e:	1dfb      	adds	r3, r7, #7
    caa0:	781b      	ldrb	r3, [r3, #0]
    caa2:	2b42      	cmp	r3, #66	; 0x42
    caa4:	d120      	bne.n	cae8 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    caa6:	23c4      	movs	r3, #196	; 0xc4
    caa8:	18f9      	adds	r1, r7, r3
    caaa:	6838      	ldr	r0, [r7, #0]
    caac:	2300      	movs	r3, #0
    caae:	2204      	movs	r2, #4
    cab0:	4c85      	ldr	r4, [pc, #532]	; (ccc8 <m2m_ip_cb+0x290>)
    cab2:	47a0      	blx	r4
    cab4:	1e03      	subs	r3, r0, #0
    cab6:	d000      	beq.n	caba <m2m_ip_cb+0x82>
    cab8:	e257      	b.n	cf6a <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    caba:	23c4      	movs	r3, #196	; 0xc4
    cabc:	18fb      	adds	r3, r7, r3
    cabe:	2201      	movs	r2, #1
    cac0:	569a      	ldrsb	r2, [r3, r2]
    cac2:	23c0      	movs	r3, #192	; 0xc0
    cac4:	18fb      	adds	r3, r7, r3
    cac6:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    cac8:	4b80      	ldr	r3, [pc, #512]	; (cccc <m2m_ip_cb+0x294>)
    caca:	681b      	ldr	r3, [r3, #0]
    cacc:	2b00      	cmp	r3, #0
    cace:	d100      	bne.n	cad2 <m2m_ip_cb+0x9a>
    cad0:	e24b      	b.n	cf6a <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    cad2:	4b7e      	ldr	r3, [pc, #504]	; (cccc <m2m_ip_cb+0x294>)
    cad4:	681b      	ldr	r3, [r3, #0]
    cad6:	22c4      	movs	r2, #196	; 0xc4
    cad8:	18ba      	adds	r2, r7, r2
    cada:	2000      	movs	r0, #0
    cadc:	5610      	ldrsb	r0, [r2, r0]
    cade:	22c0      	movs	r2, #192	; 0xc0
    cae0:	18ba      	adds	r2, r7, r2
    cae2:	2102      	movs	r1, #2
    cae4:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    cae6:	e240      	b.n	cf6a <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    cae8:	1dfb      	adds	r3, r7, #7
    caea:	781b      	ldrb	r3, [r3, #0]
    caec:	2b43      	cmp	r3, #67	; 0x43
    caee:	d000      	beq.n	caf2 <m2m_ip_cb+0xba>
    caf0:	e086      	b.n	cc00 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    caf2:	23b4      	movs	r3, #180	; 0xb4
    caf4:	18f9      	adds	r1, r7, r3
    caf6:	6838      	ldr	r0, [r7, #0]
    caf8:	2300      	movs	r3, #0
    cafa:	220c      	movs	r2, #12
    cafc:	4c72      	ldr	r4, [pc, #456]	; (ccc8 <m2m_ip_cb+0x290>)
    cafe:	47a0      	blx	r4
    cb00:	1e03      	subs	r3, r0, #0
    cb02:	d000      	beq.n	cb06 <m2m_ip_cb+0xce>
    cb04:	e231      	b.n	cf6a <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
    cb06:	23b4      	movs	r3, #180	; 0xb4
    cb08:	18fb      	adds	r3, r7, r3
    cb0a:	7a5b      	ldrb	r3, [r3, #9]
    cb0c:	b25b      	sxtb	r3, r3
    cb0e:	2b00      	cmp	r3, #0
    cb10:	db4f      	blt.n	cbb2 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    cb12:	23b4      	movs	r3, #180	; 0xb4
    cb14:	18fb      	adds	r3, r7, r3
    cb16:	7a5b      	ldrb	r3, [r3, #9]
    cb18:	b25b      	sxtb	r3, r3
    cb1a:	0018      	movs	r0, r3
    cb1c:	23b4      	movs	r3, #180	; 0xb4
    cb1e:	18fb      	adds	r3, r7, r3
    cb20:	7a1b      	ldrb	r3, [r3, #8]
    cb22:	b25b      	sxtb	r3, r3
    cb24:	4a6a      	ldr	r2, [pc, #424]	; (ccd0 <m2m_ip_cb+0x298>)
    cb26:	011b      	lsls	r3, r3, #4
    cb28:	18d3      	adds	r3, r2, r3
    cb2a:	330b      	adds	r3, #11
    cb2c:	781b      	ldrb	r3, [r3, #0]
    cb2e:	b2d9      	uxtb	r1, r3
    cb30:	4a67      	ldr	r2, [pc, #412]	; (ccd0 <m2m_ip_cb+0x298>)
    cb32:	0103      	lsls	r3, r0, #4
    cb34:	18d3      	adds	r3, r2, r3
    cb36:	330b      	adds	r3, #11
    cb38:	1c0a      	adds	r2, r1, #0
    cb3a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    cb3c:	23b4      	movs	r3, #180	; 0xb4
    cb3e:	18fb      	adds	r3, r7, r3
    cb40:	7a5b      	ldrb	r3, [r3, #9]
    cb42:	b25b      	sxtb	r3, r3
    cb44:	4a62      	ldr	r2, [pc, #392]	; (ccd0 <m2m_ip_cb+0x298>)
    cb46:	011b      	lsls	r3, r3, #4
    cb48:	18d3      	adds	r3, r2, r3
    cb4a:	330a      	adds	r3, #10
    cb4c:	2201      	movs	r2, #1
    cb4e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    cb50:	23b4      	movs	r3, #180	; 0xb4
    cb52:	18fb      	adds	r3, r7, r3
    cb54:	7a5b      	ldrb	r3, [r3, #9]
    cb56:	b25b      	sxtb	r3, r3
    cb58:	0018      	movs	r0, r3
    cb5a:	23b4      	movs	r3, #180	; 0xb4
    cb5c:	18fb      	adds	r3, r7, r3
    cb5e:	895b      	ldrh	r3, [r3, #10]
    cb60:	3b08      	subs	r3, #8
    cb62:	b299      	uxth	r1, r3
    cb64:	4a5a      	ldr	r2, [pc, #360]	; (ccd0 <m2m_ip_cb+0x298>)
    cb66:	0103      	lsls	r3, r0, #4
    cb68:	18d3      	adds	r3, r2, r3
    cb6a:	3308      	adds	r3, #8
    cb6c:	1c0a      	adds	r2, r1, #0
    cb6e:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
    cb70:	4b58      	ldr	r3, [pc, #352]	; (ccd4 <m2m_ip_cb+0x29c>)
    cb72:	881b      	ldrh	r3, [r3, #0]
    cb74:	b29b      	uxth	r3, r3
    cb76:	3301      	adds	r3, #1
    cb78:	b29a      	uxth	r2, r3
    cb7a:	4b56      	ldr	r3, [pc, #344]	; (ccd4 <m2m_ip_cb+0x29c>)
    cb7c:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    cb7e:	4b55      	ldr	r3, [pc, #340]	; (ccd4 <m2m_ip_cb+0x29c>)
    cb80:	881b      	ldrh	r3, [r3, #0]
    cb82:	b29b      	uxth	r3, r3
    cb84:	2b00      	cmp	r3, #0
    cb86:	d106      	bne.n	cb96 <m2m_ip_cb+0x15e>
					++gu16SessionID;
    cb88:	4b52      	ldr	r3, [pc, #328]	; (ccd4 <m2m_ip_cb+0x29c>)
    cb8a:	881b      	ldrh	r3, [r3, #0]
    cb8c:	b29b      	uxth	r3, r3
    cb8e:	3301      	adds	r3, #1
    cb90:	b29a      	uxth	r2, r3
    cb92:	4b50      	ldr	r3, [pc, #320]	; (ccd4 <m2m_ip_cb+0x29c>)
    cb94:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    cb96:	23b4      	movs	r3, #180	; 0xb4
    cb98:	18fb      	adds	r3, r7, r3
    cb9a:	7a5b      	ldrb	r3, [r3, #9]
    cb9c:	b25b      	sxtb	r3, r3
    cb9e:	0018      	movs	r0, r3
    cba0:	4b4c      	ldr	r3, [pc, #304]	; (ccd4 <m2m_ip_cb+0x29c>)
    cba2:	881b      	ldrh	r3, [r3, #0]
    cba4:	b299      	uxth	r1, r3
    cba6:	4a4a      	ldr	r2, [pc, #296]	; (ccd0 <m2m_ip_cb+0x298>)
    cba8:	0103      	lsls	r3, r0, #4
    cbaa:	18d3      	adds	r3, r2, r3
    cbac:	3306      	adds	r3, #6
    cbae:	1c0a      	adds	r2, r1, #0
    cbb0:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    cbb2:	23b4      	movs	r3, #180	; 0xb4
    cbb4:	18fb      	adds	r3, r7, r3
    cbb6:	2209      	movs	r2, #9
    cbb8:	569a      	ldrsb	r2, [r3, r2]
    cbba:	23a0      	movs	r3, #160	; 0xa0
    cbbc:	18fb      	adds	r3, r7, r3
    cbbe:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    cbc0:	23a0      	movs	r3, #160	; 0xa0
    cbc2:	18fb      	adds	r3, r7, r3
    cbc4:	2202      	movs	r2, #2
    cbc6:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    cbc8:	23b4      	movs	r3, #180	; 0xb4
    cbca:	18fb      	adds	r3, r7, r3
    cbcc:	885a      	ldrh	r2, [r3, #2]
    cbce:	23a0      	movs	r3, #160	; 0xa0
    cbd0:	18fb      	adds	r3, r7, r3
    cbd2:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    cbd4:	23b4      	movs	r3, #180	; 0xb4
    cbd6:	18fb      	adds	r3, r7, r3
    cbd8:	685a      	ldr	r2, [r3, #4]
    cbda:	23a0      	movs	r3, #160	; 0xa0
    cbdc:	18fb      	adds	r3, r7, r3
    cbde:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    cbe0:	4b3a      	ldr	r3, [pc, #232]	; (cccc <m2m_ip_cb+0x294>)
    cbe2:	681b      	ldr	r3, [r3, #0]
    cbe4:	2b00      	cmp	r3, #0
    cbe6:	d100      	bne.n	cbea <m2m_ip_cb+0x1b2>
    cbe8:	e1bf      	b.n	cf6a <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    cbea:	4b38      	ldr	r3, [pc, #224]	; (cccc <m2m_ip_cb+0x294>)
    cbec:	681b      	ldr	r3, [r3, #0]
    cbee:	22b4      	movs	r2, #180	; 0xb4
    cbf0:	18ba      	adds	r2, r7, r2
    cbf2:	2008      	movs	r0, #8
    cbf4:	5610      	ldrsb	r0, [r2, r0]
    cbf6:	22a0      	movs	r2, #160	; 0xa0
    cbf8:	18ba      	adds	r2, r7, r2
    cbfa:	2104      	movs	r1, #4
    cbfc:	4798      	blx	r3
}
    cbfe:	e1b4      	b.n	cf6a <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    cc00:	1dfb      	adds	r3, r7, #7
    cc02:	781b      	ldrb	r3, [r3, #0]
    cc04:	2b44      	cmp	r3, #68	; 0x44
    cc06:	d003      	beq.n	cc10 <m2m_ip_cb+0x1d8>
    cc08:	1dfb      	adds	r3, r7, #7
    cc0a:	781b      	ldrb	r3, [r3, #0]
    cc0c:	2b4b      	cmp	r3, #75	; 0x4b
    cc0e:	d13d      	bne.n	cc8c <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    cc10:	239c      	movs	r3, #156	; 0x9c
    cc12:	18f9      	adds	r1, r7, r3
    cc14:	6838      	ldr	r0, [r7, #0]
    cc16:	2300      	movs	r3, #0
    cc18:	2204      	movs	r2, #4
    cc1a:	4c2b      	ldr	r4, [pc, #172]	; (ccc8 <m2m_ip_cb+0x290>)
    cc1c:	47a0      	blx	r4
    cc1e:	1e03      	subs	r3, r0, #0
    cc20:	d000      	beq.n	cc24 <m2m_ip_cb+0x1ec>
    cc22:	e19d      	b.n	cf60 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
    cc24:	239c      	movs	r3, #156	; 0x9c
    cc26:	18fb      	adds	r3, r7, r3
    cc28:	2200      	movs	r2, #0
    cc2a:	569a      	ldrsb	r2, [r3, r2]
    cc2c:	2398      	movs	r3, #152	; 0x98
    cc2e:	18fb      	adds	r3, r7, r3
    cc30:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    cc32:	239c      	movs	r3, #156	; 0x9c
    cc34:	18fb      	adds	r3, r7, r3
    cc36:	2201      	movs	r2, #1
    cc38:	569a      	ldrsb	r2, [r3, r2]
    cc3a:	2398      	movs	r3, #152	; 0x98
    cc3c:	18fb      	adds	r3, r7, r3
    cc3e:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    cc40:	239c      	movs	r3, #156	; 0x9c
    cc42:	18fb      	adds	r3, r7, r3
    cc44:	785b      	ldrb	r3, [r3, #1]
    cc46:	b25b      	sxtb	r3, r3
    cc48:	2b00      	cmp	r3, #0
    cc4a:	d10f      	bne.n	cc6c <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    cc4c:	239c      	movs	r3, #156	; 0x9c
    cc4e:	18fb      	adds	r3, r7, r3
    cc50:	781b      	ldrb	r3, [r3, #0]
    cc52:	b25b      	sxtb	r3, r3
    cc54:	0018      	movs	r0, r3
    cc56:	239c      	movs	r3, #156	; 0x9c
    cc58:	18fb      	adds	r3, r7, r3
    cc5a:	885b      	ldrh	r3, [r3, #2]
    cc5c:	3b08      	subs	r3, #8
    cc5e:	b299      	uxth	r1, r3
    cc60:	4a1b      	ldr	r2, [pc, #108]	; (ccd0 <m2m_ip_cb+0x298>)
    cc62:	0103      	lsls	r3, r0, #4
    cc64:	18d3      	adds	r3, r2, r3
    cc66:	3308      	adds	r3, #8
    cc68:	1c0a      	adds	r2, r1, #0
    cc6a:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    cc6c:	4b17      	ldr	r3, [pc, #92]	; (cccc <m2m_ip_cb+0x294>)
    cc6e:	681b      	ldr	r3, [r3, #0]
    cc70:	2b00      	cmp	r3, #0
    cc72:	d100      	bne.n	cc76 <m2m_ip_cb+0x23e>
    cc74:	e174      	b.n	cf60 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    cc76:	4b15      	ldr	r3, [pc, #84]	; (cccc <m2m_ip_cb+0x294>)
    cc78:	681b      	ldr	r3, [r3, #0]
    cc7a:	229c      	movs	r2, #156	; 0x9c
    cc7c:	18ba      	adds	r2, r7, r2
    cc7e:	2000      	movs	r0, #0
    cc80:	5610      	ldrsb	r0, [r2, r0]
    cc82:	2298      	movs	r2, #152	; 0x98
    cc84:	18ba      	adds	r2, r7, r2
    cc86:	2105      	movs	r1, #5
    cc88:	4798      	blx	r3
	{
    cc8a:	e169      	b.n	cf60 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    cc8c:	1dfb      	adds	r3, r7, #7
    cc8e:	781b      	ldrb	r3, [r3, #0]
    cc90:	2b4a      	cmp	r3, #74	; 0x4a
    cc92:	d123      	bne.n	ccdc <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    cc94:	230c      	movs	r3, #12
    cc96:	18f9      	adds	r1, r7, r3
    cc98:	6838      	ldr	r0, [r7, #0]
    cc9a:	2300      	movs	r3, #0
    cc9c:	2244      	movs	r2, #68	; 0x44
    cc9e:	4c0a      	ldr	r4, [pc, #40]	; (ccc8 <m2m_ip_cb+0x290>)
    cca0:	47a0      	blx	r4
    cca2:	1e03      	subs	r3, r0, #0
    cca4:	d000      	beq.n	cca8 <m2m_ip_cb+0x270>
    cca6:	e160      	b.n	cf6a <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
    cca8:	4b0b      	ldr	r3, [pc, #44]	; (ccd8 <m2m_ip_cb+0x2a0>)
    ccaa:	681b      	ldr	r3, [r3, #0]
    ccac:	2b00      	cmp	r3, #0
    ccae:	d100      	bne.n	ccb2 <m2m_ip_cb+0x27a>
    ccb0:	e15b      	b.n	cf6a <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    ccb2:	4b09      	ldr	r3, [pc, #36]	; (ccd8 <m2m_ip_cb+0x2a0>)
    ccb4:	681a      	ldr	r2, [r3, #0]
    ccb6:	230c      	movs	r3, #12
    ccb8:	18fb      	adds	r3, r7, r3
    ccba:	6c19      	ldr	r1, [r3, #64]	; 0x40
    ccbc:	230c      	movs	r3, #12
    ccbe:	18fb      	adds	r3, r7, r3
    ccc0:	0018      	movs	r0, r3
    ccc2:	4790      	blx	r2
}
    ccc4:	e151      	b.n	cf6a <m2m_ip_cb+0x532>
    ccc6:	46c0      	nop			; (mov r8, r8)
    ccc8:	00009779 	.word	0x00009779
    cccc:	200003bc 	.word	0x200003bc
    ccd0:	2000030c 	.word	0x2000030c
    ccd4:	2000021a 	.word	0x2000021a
    ccd8:	200003c4 	.word	0x200003c4
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    ccdc:	1dfb      	adds	r3, r7, #7
    ccde:	781b      	ldrb	r3, [r3, #0]
    cce0:	2b46      	cmp	r3, #70	; 0x46
    cce2:	d008      	beq.n	ccf6 <m2m_ip_cb+0x2be>
    cce4:	1dfb      	adds	r3, r7, #7
    cce6:	781b      	ldrb	r3, [r3, #0]
    cce8:	2b48      	cmp	r3, #72	; 0x48
    ccea:	d004      	beq.n	ccf6 <m2m_ip_cb+0x2be>
    ccec:	1dfb      	adds	r3, r7, #7
    ccee:	781b      	ldrb	r3, [r3, #0]
    ccf0:	2b4d      	cmp	r3, #77	; 0x4d
    ccf2:	d000      	beq.n	ccf6 <m2m_ip_cb+0x2be>
    ccf4:	e0b4      	b.n	ce60 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    ccf6:	23df      	movs	r3, #223	; 0xdf
    ccf8:	18fb      	adds	r3, r7, r3
    ccfa:	2206      	movs	r2, #6
    ccfc:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    ccfe:	1dfb      	adds	r3, r7, #7
    cd00:	781b      	ldrb	r3, [r3, #0]
    cd02:	2b48      	cmp	r3, #72	; 0x48
    cd04:	d103      	bne.n	cd0e <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    cd06:	23df      	movs	r3, #223	; 0xdf
    cd08:	18fb      	adds	r3, r7, r3
    cd0a:	2209      	movs	r2, #9
    cd0c:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    cd0e:	23d8      	movs	r3, #216	; 0xd8
    cd10:	18fb      	adds	r3, r7, r3
    cd12:	2210      	movs	r2, #16
    cd14:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    cd16:	23d8      	movs	r3, #216	; 0xd8
    cd18:	18fb      	adds	r3, r7, r3
    cd1a:	881a      	ldrh	r2, [r3, #0]
    cd1c:	2388      	movs	r3, #136	; 0x88
    cd1e:	18f9      	adds	r1, r7, r3
    cd20:	6838      	ldr	r0, [r7, #0]
    cd22:	2300      	movs	r3, #0
    cd24:	4c93      	ldr	r4, [pc, #588]	; (cf74 <m2m_ip_cb+0x53c>)
    cd26:	47a0      	blx	r4
    cd28:	1e03      	subs	r3, r0, #0
    cd2a:	d000      	beq.n	cd2e <m2m_ip_cb+0x2f6>
    cd2c:	e11a      	b.n	cf64 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
    cd2e:	23d6      	movs	r3, #214	; 0xd6
    cd30:	18fb      	adds	r3, r7, r3
    cd32:	2200      	movs	r2, #0
    cd34:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    cd36:	23d5      	movs	r3, #213	; 0xd5
    cd38:	18fb      	adds	r3, r7, r3
    cd3a:	2288      	movs	r2, #136	; 0x88
    cd3c:	18ba      	adds	r2, r7, r2
    cd3e:	7b12      	ldrb	r2, [r2, #12]
    cd40:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    cd42:	23d6      	movs	r3, #214	; 0xd6
    cd44:	18fb      	adds	r3, r7, r3
    cd46:	2288      	movs	r2, #136	; 0x88
    cd48:	18ba      	adds	r2, r7, r2
    cd4a:	89d2      	ldrh	r2, [r2, #14]
    cd4c:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    cd4e:	23d5      	movs	r3, #213	; 0xd5
    cd50:	18fb      	adds	r3, r7, r3
    cd52:	781b      	ldrb	r3, [r3, #0]
    cd54:	b25b      	sxtb	r3, r3
    cd56:	4a88      	ldr	r2, [pc, #544]	; (cf78 <m2m_ip_cb+0x540>)
    cd58:	011b      	lsls	r3, r3, #4
    cd5a:	18d3      	adds	r3, r2, r3
    cd5c:	330c      	adds	r3, #12
    cd5e:	2200      	movs	r2, #0
    cd60:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    cd62:	23d2      	movs	r3, #210	; 0xd2
    cd64:	18fb      	adds	r3, r7, r3
    cd66:	2288      	movs	r2, #136	; 0x88
    cd68:	18ba      	adds	r2, r7, r2
    cd6a:	8912      	ldrh	r2, [r2, #8]
    cd6c:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    cd6e:	23d0      	movs	r3, #208	; 0xd0
    cd70:	18fb      	adds	r3, r7, r3
    cd72:	2288      	movs	r2, #136	; 0x88
    cd74:	18ba      	adds	r2, r7, r2
    cd76:	8952      	ldrh	r2, [r2, #10]
    cd78:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    cd7a:	2388      	movs	r3, #136	; 0x88
    cd7c:	18fb      	adds	r3, r7, r3
    cd7e:	885a      	ldrh	r2, [r3, #2]
    cd80:	2370      	movs	r3, #112	; 0x70
    cd82:	18fb      	adds	r3, r7, r3
    cd84:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    cd86:	2388      	movs	r3, #136	; 0x88
    cd88:	18fb      	adds	r3, r7, r3
    cd8a:	685a      	ldr	r2, [r3, #4]
    cd8c:	2370      	movs	r3, #112	; 0x70
    cd8e:	18fb      	adds	r3, r7, r3
    cd90:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    cd92:	23d5      	movs	r3, #213	; 0xd5
    cd94:	18fb      	adds	r3, r7, r3
    cd96:	781b      	ldrb	r3, [r3, #0]
    cd98:	b25b      	sxtb	r3, r3
    cd9a:	4a77      	ldr	r2, [pc, #476]	; (cf78 <m2m_ip_cb+0x540>)
    cd9c:	011b      	lsls	r3, r3, #4
    cd9e:	18d3      	adds	r3, r2, r3
    cda0:	3306      	adds	r3, #6
    cda2:	881b      	ldrh	r3, [r3, #0]
    cda4:	b29b      	uxth	r3, r3
    cda6:	22d6      	movs	r2, #214	; 0xd6
    cda8:	18ba      	adds	r2, r7, r2
    cdaa:	8812      	ldrh	r2, [r2, #0]
    cdac:	429a      	cmp	r2, r3
    cdae:	d148      	bne.n	ce42 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    cdb0:	23d2      	movs	r3, #210	; 0xd2
    cdb2:	18fb      	adds	r3, r7, r3
    cdb4:	2200      	movs	r2, #0
    cdb6:	5e9b      	ldrsh	r3, [r3, r2]
    cdb8:	2b00      	cmp	r3, #0
    cdba:	dd25      	ble.n	ce08 <m2m_ip_cb+0x3d0>
    cdbc:	23d2      	movs	r3, #210	; 0xd2
    cdbe:	18fb      	adds	r3, r7, r3
    cdc0:	2200      	movs	r2, #0
    cdc2:	5e9a      	ldrsh	r2, [r3, r2]
    cdc4:	1d3b      	adds	r3, r7, #4
    cdc6:	881b      	ldrh	r3, [r3, #0]
    cdc8:	429a      	cmp	r2, r3
    cdca:	da1d      	bge.n	ce08 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
    cdcc:	23d0      	movs	r3, #208	; 0xd0
    cdce:	18fb      	adds	r3, r7, r3
    cdd0:	881b      	ldrh	r3, [r3, #0]
    cdd2:	683a      	ldr	r2, [r7, #0]
    cdd4:	18d3      	adds	r3, r2, r3
    cdd6:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    cdd8:	23d8      	movs	r3, #216	; 0xd8
    cdda:	18fb      	adds	r3, r7, r3
    cddc:	22d2      	movs	r2, #210	; 0xd2
    cdde:	18ba      	adds	r2, r7, r2
    cde0:	8812      	ldrh	r2, [r2, #0]
    cde2:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    cde4:	683c      	ldr	r4, [r7, #0]
    cde6:	23df      	movs	r3, #223	; 0xdf
    cde8:	18fb      	adds	r3, r7, r3
    cdea:	781a      	ldrb	r2, [r3, #0]
    cdec:	2370      	movs	r3, #112	; 0x70
    cdee:	18f9      	adds	r1, r7, r3
    cdf0:	23d5      	movs	r3, #213	; 0xd5
    cdf2:	18fb      	adds	r3, r7, r3
    cdf4:	2000      	movs	r0, #0
    cdf6:	5618      	ldrsb	r0, [r3, r0]
    cdf8:	23d8      	movs	r3, #216	; 0xd8
    cdfa:	18fb      	adds	r3, r7, r3
    cdfc:	881b      	ldrh	r3, [r3, #0]
    cdfe:	9300      	str	r3, [sp, #0]
    ce00:	0023      	movs	r3, r4
    ce02:	4c5e      	ldr	r4, [pc, #376]	; (cf7c <m2m_ip_cb+0x544>)
    ce04:	47a0      	blx	r4
	{
    ce06:	e0ad      	b.n	cf64 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    ce08:	2370      	movs	r3, #112	; 0x70
    ce0a:	18fb      	adds	r3, r7, r3
    ce0c:	22d2      	movs	r2, #210	; 0xd2
    ce0e:	18ba      	adds	r2, r7, r2
    ce10:	8812      	ldrh	r2, [r2, #0]
    ce12:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    ce14:	2370      	movs	r3, #112	; 0x70
    ce16:	18fb      	adds	r3, r7, r3
    ce18:	2200      	movs	r2, #0
    ce1a:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    ce1c:	4b58      	ldr	r3, [pc, #352]	; (cf80 <m2m_ip_cb+0x548>)
    ce1e:	681b      	ldr	r3, [r3, #0]
    ce20:	2b00      	cmp	r3, #0
    ce22:	d100      	bne.n	ce26 <m2m_ip_cb+0x3ee>
    ce24:	e09e      	b.n	cf64 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    ce26:	4b56      	ldr	r3, [pc, #344]	; (cf80 <m2m_ip_cb+0x548>)
    ce28:	681b      	ldr	r3, [r3, #0]
    ce2a:	2270      	movs	r2, #112	; 0x70
    ce2c:	18bc      	adds	r4, r7, r2
    ce2e:	22df      	movs	r2, #223	; 0xdf
    ce30:	18ba      	adds	r2, r7, r2
    ce32:	7811      	ldrb	r1, [r2, #0]
    ce34:	22d5      	movs	r2, #213	; 0xd5
    ce36:	18ba      	adds	r2, r7, r2
    ce38:	2000      	movs	r0, #0
    ce3a:	5610      	ldrsb	r0, [r2, r0]
    ce3c:	0022      	movs	r2, r4
    ce3e:	4798      	blx	r3
	{
    ce40:	e090      	b.n	cf64 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
    ce42:	23d8      	movs	r3, #216	; 0xd8
    ce44:	18fa      	adds	r2, r7, r3
    ce46:	1d3b      	adds	r3, r7, #4
    ce48:	8812      	ldrh	r2, [r2, #0]
    ce4a:	881b      	ldrh	r3, [r3, #0]
    ce4c:	429a      	cmp	r2, r3
    ce4e:	d300      	bcc.n	ce52 <m2m_ip_cb+0x41a>
    ce50:	e088      	b.n	cf64 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    ce52:	2301      	movs	r3, #1
    ce54:	2200      	movs	r2, #0
    ce56:	2100      	movs	r1, #0
    ce58:	2000      	movs	r0, #0
    ce5a:	4c46      	ldr	r4, [pc, #280]	; (cf74 <m2m_ip_cb+0x53c>)
    ce5c:	47a0      	blx	r4
	{
    ce5e:	e081      	b.n	cf64 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    ce60:	1dfb      	adds	r3, r7, #7
    ce62:	781b      	ldrb	r3, [r3, #0]
    ce64:	2b45      	cmp	r3, #69	; 0x45
    ce66:	d007      	beq.n	ce78 <m2m_ip_cb+0x440>
    ce68:	1dfb      	adds	r3, r7, #7
    ce6a:	781b      	ldrb	r3, [r3, #0]
    ce6c:	2b47      	cmp	r3, #71	; 0x47
    ce6e:	d003      	beq.n	ce78 <m2m_ip_cb+0x440>
    ce70:	1dfb      	adds	r3, r7, #7
    ce72:	781b      	ldrb	r3, [r3, #0]
    ce74:	2b4c      	cmp	r3, #76	; 0x4c
    ce76:	d14c      	bne.n	cf12 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    ce78:	23de      	movs	r3, #222	; 0xde
    ce7a:	18fb      	adds	r3, r7, r3
    ce7c:	2207      	movs	r2, #7
    ce7e:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    ce80:	1dfb      	adds	r3, r7, #7
    ce82:	781b      	ldrb	r3, [r3, #0]
    ce84:	2b47      	cmp	r3, #71	; 0x47
    ce86:	d103      	bne.n	ce90 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    ce88:	23de      	movs	r3, #222	; 0xde
    ce8a:	18fb      	adds	r3, r7, r3
    ce8c:	2208      	movs	r2, #8
    ce8e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    ce90:	2364      	movs	r3, #100	; 0x64
    ce92:	18f9      	adds	r1, r7, r3
    ce94:	6838      	ldr	r0, [r7, #0]
    ce96:	2300      	movs	r3, #0
    ce98:	2208      	movs	r2, #8
    ce9a:	4c36      	ldr	r4, [pc, #216]	; (cf74 <m2m_ip_cb+0x53c>)
    ce9c:	47a0      	blx	r4
    ce9e:	1e03      	subs	r3, r0, #0
    cea0:	d162      	bne.n	cf68 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
    cea2:	23dc      	movs	r3, #220	; 0xdc
    cea4:	18fb      	adds	r3, r7, r3
    cea6:	2200      	movs	r2, #0
    cea8:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    ceaa:	23db      	movs	r3, #219	; 0xdb
    ceac:	18fb      	adds	r3, r7, r3
    ceae:	2264      	movs	r2, #100	; 0x64
    ceb0:	18ba      	adds	r2, r7, r2
    ceb2:	7812      	ldrb	r2, [r2, #0]
    ceb4:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    ceb6:	23dc      	movs	r3, #220	; 0xdc
    ceb8:	18fb      	adds	r3, r7, r3
    ceba:	2264      	movs	r2, #100	; 0x64
    cebc:	18ba      	adds	r2, r7, r2
    cebe:	8892      	ldrh	r2, [r2, #4]
    cec0:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    cec2:	2364      	movs	r3, #100	; 0x64
    cec4:	18fb      	adds	r3, r7, r3
    cec6:	2202      	movs	r2, #2
    cec8:	5e9a      	ldrsh	r2, [r3, r2]
    ceca:	236e      	movs	r3, #110	; 0x6e
    cecc:	18fb      	adds	r3, r7, r3
    cece:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    ced0:	23db      	movs	r3, #219	; 0xdb
    ced2:	18fb      	adds	r3, r7, r3
    ced4:	781b      	ldrb	r3, [r3, #0]
    ced6:	b25b      	sxtb	r3, r3
    ced8:	4a27      	ldr	r2, [pc, #156]	; (cf78 <m2m_ip_cb+0x540>)
    ceda:	011b      	lsls	r3, r3, #4
    cedc:	18d3      	adds	r3, r2, r3
    cede:	3306      	adds	r3, #6
    cee0:	881b      	ldrh	r3, [r3, #0]
    cee2:	b29b      	uxth	r3, r3
    cee4:	22dc      	movs	r2, #220	; 0xdc
    cee6:	18ba      	adds	r2, r7, r2
    cee8:	8812      	ldrh	r2, [r2, #0]
    ceea:	429a      	cmp	r2, r3
    ceec:	d13c      	bne.n	cf68 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
    ceee:	4b24      	ldr	r3, [pc, #144]	; (cf80 <m2m_ip_cb+0x548>)
    cef0:	681b      	ldr	r3, [r3, #0]
    cef2:	2b00      	cmp	r3, #0
    cef4:	d038      	beq.n	cf68 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    cef6:	4b22      	ldr	r3, [pc, #136]	; (cf80 <m2m_ip_cb+0x548>)
    cef8:	681b      	ldr	r3, [r3, #0]
    cefa:	226e      	movs	r2, #110	; 0x6e
    cefc:	18bc      	adds	r4, r7, r2
    cefe:	22de      	movs	r2, #222	; 0xde
    cf00:	18ba      	adds	r2, r7, r2
    cf02:	7811      	ldrb	r1, [r2, #0]
    cf04:	22db      	movs	r2, #219	; 0xdb
    cf06:	18ba      	adds	r2, r7, r2
    cf08:	2000      	movs	r0, #0
    cf0a:	5610      	ldrsb	r0, [r2, r0]
    cf0c:	0022      	movs	r2, r4
    cf0e:	4798      	blx	r3
	{
    cf10:	e02a      	b.n	cf68 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
    cf12:	1dfb      	adds	r3, r7, #7
    cf14:	781b      	ldrb	r3, [r3, #0]
    cf16:	2b52      	cmp	r3, #82	; 0x52
    cf18:	d127      	bne.n	cf6a <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    cf1a:	2350      	movs	r3, #80	; 0x50
    cf1c:	18f9      	adds	r1, r7, r3
    cf1e:	6838      	ldr	r0, [r7, #0]
    cf20:	2301      	movs	r3, #1
    cf22:	2214      	movs	r2, #20
    cf24:	4c13      	ldr	r4, [pc, #76]	; (cf74 <m2m_ip_cb+0x53c>)
    cf26:	47a0      	blx	r4
    cf28:	1e03      	subs	r3, r0, #0
    cf2a:	d11e      	bne.n	cf6a <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    cf2c:	2350      	movs	r3, #80	; 0x50
    cf2e:	18fb      	adds	r3, r7, r3
    cf30:	685b      	ldr	r3, [r3, #4]
    cf32:	001a      	movs	r2, r3
    cf34:	4b13      	ldr	r3, [pc, #76]	; (cf84 <m2m_ip_cb+0x54c>)
    cf36:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    cf38:	4b12      	ldr	r3, [pc, #72]	; (cf84 <m2m_ip_cb+0x54c>)
    cf3a:	681b      	ldr	r3, [r3, #0]
    cf3c:	2b00      	cmp	r3, #0
    cf3e:	d014      	beq.n	cf6a <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    cf40:	4b10      	ldr	r3, [pc, #64]	; (cf84 <m2m_ip_cb+0x54c>)
    cf42:	681c      	ldr	r4, [r3, #0]
    cf44:	2350      	movs	r3, #80	; 0x50
    cf46:	18fb      	adds	r3, r7, r3
    cf48:	6818      	ldr	r0, [r3, #0]
    cf4a:	2350      	movs	r3, #80	; 0x50
    cf4c:	18fb      	adds	r3, r7, r3
    cf4e:	6899      	ldr	r1, [r3, #8]
    cf50:	2350      	movs	r3, #80	; 0x50
    cf52:	18fb      	adds	r3, r7, r3
    cf54:	7c1b      	ldrb	r3, [r3, #16]
    cf56:	001a      	movs	r2, r3
    cf58:	47a0      	blx	r4
}
    cf5a:	e006      	b.n	cf6a <m2m_ip_cb+0x532>
	{
    cf5c:	46c0      	nop			; (mov r8, r8)
    cf5e:	e004      	b.n	cf6a <m2m_ip_cb+0x532>
	{
    cf60:	46c0      	nop			; (mov r8, r8)
    cf62:	e002      	b.n	cf6a <m2m_ip_cb+0x532>
	{
    cf64:	46c0      	nop			; (mov r8, r8)
    cf66:	e000      	b.n	cf6a <m2m_ip_cb+0x532>
	{
    cf68:	46c0      	nop			; (mov r8, r8)
}
    cf6a:	46c0      	nop			; (mov r8, r8)
    cf6c:	46bd      	mov	sp, r7
    cf6e:	b039      	add	sp, #228	; 0xe4
    cf70:	bd90      	pop	{r4, r7, pc}
    cf72:	46c0      	nop			; (mov r8, r8)
    cf74:	00009779 	.word	0x00009779
    cf78:	2000030c 	.word	0x2000030c
    cf7c:	0000c83d 	.word	0x0000c83d
    cf80:	200003bc 	.word	0x200003bc
    cf84:	200003c0 	.word	0x200003c0

0000cf88 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    cf88:	b580      	push	{r7, lr}
    cf8a:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    cf8c:	4b0c      	ldr	r3, [pc, #48]	; (cfc0 <socketInit+0x38>)
    cf8e:	781b      	ldrb	r3, [r3, #0]
    cf90:	b2db      	uxtb	r3, r3
    cf92:	2b00      	cmp	r3, #0
    cf94:	d110      	bne.n	cfb8 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    cf96:	4b0b      	ldr	r3, [pc, #44]	; (cfc4 <socketInit+0x3c>)
    cf98:	22b0      	movs	r2, #176	; 0xb0
    cf9a:	2100      	movs	r1, #0
    cf9c:	0018      	movs	r0, r3
    cf9e:	4b0a      	ldr	r3, [pc, #40]	; (cfc8 <socketInit+0x40>)
    cfa0:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    cfa2:	4b0a      	ldr	r3, [pc, #40]	; (cfcc <socketInit+0x44>)
    cfa4:	0019      	movs	r1, r3
    cfa6:	2002      	movs	r0, #2
    cfa8:	4b09      	ldr	r3, [pc, #36]	; (cfd0 <socketInit+0x48>)
    cfaa:	4798      	blx	r3
		gbSocketInit	= 1;
    cfac:	4b04      	ldr	r3, [pc, #16]	; (cfc0 <socketInit+0x38>)
    cfae:	2201      	movs	r2, #1
    cfb0:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    cfb2:	4b08      	ldr	r3, [pc, #32]	; (cfd4 <socketInit+0x4c>)
    cfb4:	2200      	movs	r2, #0
    cfb6:	801a      	strh	r2, [r3, #0]
	}
}
    cfb8:	46c0      	nop			; (mov r8, r8)
    cfba:	46bd      	mov	sp, r7
    cfbc:	bd80      	pop	{r7, pc}
    cfbe:	46c0      	nop			; (mov r8, r8)
    cfc0:	2000021c 	.word	0x2000021c
    cfc4:	2000030c 	.word	0x2000030c
    cfc8:	00008c25 	.word	0x00008c25
    cfcc:	0000ca39 	.word	0x0000ca39
    cfd0:	000098f9 	.word	0x000098f9
    cfd4:	2000021a 	.word	0x2000021a

0000cfd8 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    cfd8:	b580      	push	{r7, lr}
    cfda:	b082      	sub	sp, #8
    cfdc:	af00      	add	r7, sp, #0
    cfde:	6078      	str	r0, [r7, #4]
    cfe0:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    cfe2:	4b05      	ldr	r3, [pc, #20]	; (cff8 <registerSocketCallback+0x20>)
    cfe4:	687a      	ldr	r2, [r7, #4]
    cfe6:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    cfe8:	4b04      	ldr	r3, [pc, #16]	; (cffc <registerSocketCallback+0x24>)
    cfea:	683a      	ldr	r2, [r7, #0]
    cfec:	601a      	str	r2, [r3, #0]
}
    cfee:	46c0      	nop			; (mov r8, r8)
    cff0:	46bd      	mov	sp, r7
    cff2:	b002      	add	sp, #8
    cff4:	bd80      	pop	{r7, pc}
    cff6:	46c0      	nop			; (mov r8, r8)
    cff8:	200003bc 	.word	0x200003bc
    cffc:	200003c4 	.word	0x200003c4

0000d000 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    d000:	b590      	push	{r4, r7, lr}
    d002:	b08d      	sub	sp, #52	; 0x34
    d004:	af04      	add	r7, sp, #16
    d006:	0004      	movs	r4, r0
    d008:	0008      	movs	r0, r1
    d00a:	0011      	movs	r1, r2
    d00c:	1dbb      	adds	r3, r7, #6
    d00e:	1c22      	adds	r2, r4, #0
    d010:	801a      	strh	r2, [r3, #0]
    d012:	1d7b      	adds	r3, r7, #5
    d014:	1c02      	adds	r2, r0, #0
    d016:	701a      	strb	r2, [r3, #0]
    d018:	1d3b      	adds	r3, r7, #4
    d01a:	1c0a      	adds	r2, r1, #0
    d01c:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    d01e:	231f      	movs	r3, #31
    d020:	18fb      	adds	r3, r7, r3
    d022:	22ff      	movs	r2, #255	; 0xff
    d024:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    d026:	1dbb      	adds	r3, r7, #6
    d028:	881b      	ldrh	r3, [r3, #0]
    d02a:	2b02      	cmp	r3, #2
    d02c:	d000      	beq.n	d030 <socket+0x30>
    d02e:	e0cd      	b.n	d1cc <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    d030:	1d7b      	adds	r3, r7, #5
    d032:	781b      	ldrb	r3, [r3, #0]
    d034:	2b01      	cmp	r3, #1
    d036:	d135      	bne.n	d0a4 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    d038:	231e      	movs	r3, #30
    d03a:	18fb      	adds	r3, r7, r3
    d03c:	2200      	movs	r2, #0
    d03e:	701a      	strb	r2, [r3, #0]
    d040:	e02a      	b.n	d098 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    d042:	2317      	movs	r3, #23
    d044:	18fb      	adds	r3, r7, r3
    d046:	4a65      	ldr	r2, [pc, #404]	; (d1dc <socket+0x1dc>)
    d048:	7812      	ldrb	r2, [r2, #0]
    d04a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    d04c:	4b63      	ldr	r3, [pc, #396]	; (d1dc <socket+0x1dc>)
    d04e:	781b      	ldrb	r3, [r3, #0]
    d050:	b2db      	uxtb	r3, r3
    d052:	011a      	lsls	r2, r3, #4
    d054:	4b62      	ldr	r3, [pc, #392]	; (d1e0 <socket+0x1e0>)
    d056:	18d3      	adds	r3, r2, r3
    d058:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    d05a:	4b60      	ldr	r3, [pc, #384]	; (d1dc <socket+0x1dc>)
    d05c:	781b      	ldrb	r3, [r3, #0]
    d05e:	b2db      	uxtb	r3, r3
    d060:	1c5a      	adds	r2, r3, #1
    d062:	4b60      	ldr	r3, [pc, #384]	; (d1e4 <socket+0x1e4>)
    d064:	2107      	movs	r1, #7
    d066:	0010      	movs	r0, r2
    d068:	4798      	blx	r3
    d06a:	000b      	movs	r3, r1
    d06c:	b2da      	uxtb	r2, r3
    d06e:	4b5b      	ldr	r3, [pc, #364]	; (d1dc <socket+0x1dc>)
    d070:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    d072:	69bb      	ldr	r3, [r7, #24]
    d074:	7a9b      	ldrb	r3, [r3, #10]
    d076:	b2db      	uxtb	r3, r3
    d078:	2b00      	cmp	r3, #0
    d07a:	d106      	bne.n	d08a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    d07c:	231f      	movs	r3, #31
    d07e:	18fb      	adds	r3, r7, r3
    d080:	2217      	movs	r2, #23
    d082:	18ba      	adds	r2, r7, r2
    d084:	7812      	ldrb	r2, [r2, #0]
    d086:	701a      	strb	r2, [r3, #0]
					break;
    d088:	e04c      	b.n	d124 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    d08a:	231e      	movs	r3, #30
    d08c:	18fb      	adds	r3, r7, r3
    d08e:	781a      	ldrb	r2, [r3, #0]
    d090:	231e      	movs	r3, #30
    d092:	18fb      	adds	r3, r7, r3
    d094:	3201      	adds	r2, #1
    d096:	701a      	strb	r2, [r3, #0]
    d098:	231e      	movs	r3, #30
    d09a:	18fb      	adds	r3, r7, r3
    d09c:	781b      	ldrb	r3, [r3, #0]
    d09e:	2b06      	cmp	r3, #6
    d0a0:	d9cf      	bls.n	d042 <socket+0x42>
    d0a2:	e03f      	b.n	d124 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    d0a4:	1d7b      	adds	r3, r7, #5
    d0a6:	781b      	ldrb	r3, [r3, #0]
    d0a8:	2b02      	cmp	r3, #2
    d0aa:	d13b      	bne.n	d124 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    d0ac:	4b4e      	ldr	r3, [pc, #312]	; (d1e8 <socket+0x1e8>)
    d0ae:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    d0b0:	231e      	movs	r3, #30
    d0b2:	18fb      	adds	r3, r7, r3
    d0b4:	2200      	movs	r2, #0
    d0b6:	701a      	strb	r2, [r3, #0]
    d0b8:	e02f      	b.n	d11a <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    d0ba:	2317      	movs	r3, #23
    d0bc:	18fb      	adds	r3, r7, r3
    d0be:	4a4b      	ldr	r2, [pc, #300]	; (d1ec <socket+0x1ec>)
    d0c0:	7812      	ldrb	r2, [r2, #0]
    d0c2:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    d0c4:	4b49      	ldr	r3, [pc, #292]	; (d1ec <socket+0x1ec>)
    d0c6:	781b      	ldrb	r3, [r3, #0]
    d0c8:	b2db      	uxtb	r3, r3
    d0ca:	011b      	lsls	r3, r3, #4
    d0cc:	693a      	ldr	r2, [r7, #16]
    d0ce:	18d3      	adds	r3, r2, r3
    d0d0:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    d0d2:	4b46      	ldr	r3, [pc, #280]	; (d1ec <socket+0x1ec>)
    d0d4:	781b      	ldrb	r3, [r3, #0]
    d0d6:	b2db      	uxtb	r3, r3
    d0d8:	3301      	adds	r3, #1
    d0da:	4a45      	ldr	r2, [pc, #276]	; (d1f0 <socket+0x1f0>)
    d0dc:	4013      	ands	r3, r2
    d0de:	d504      	bpl.n	d0ea <socket+0xea>
    d0e0:	3b01      	subs	r3, #1
    d0e2:	2204      	movs	r2, #4
    d0e4:	4252      	negs	r2, r2
    d0e6:	4313      	orrs	r3, r2
    d0e8:	3301      	adds	r3, #1
    d0ea:	b2da      	uxtb	r2, r3
    d0ec:	4b3f      	ldr	r3, [pc, #252]	; (d1ec <socket+0x1ec>)
    d0ee:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    d0f0:	69bb      	ldr	r3, [r7, #24]
    d0f2:	7a9b      	ldrb	r3, [r3, #10]
    d0f4:	b2db      	uxtb	r3, r3
    d0f6:	2b00      	cmp	r3, #0
    d0f8:	d108      	bne.n	d10c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    d0fa:	2317      	movs	r3, #23
    d0fc:	18fb      	adds	r3, r7, r3
    d0fe:	781b      	ldrb	r3, [r3, #0]
    d100:	3307      	adds	r3, #7
    d102:	b2da      	uxtb	r2, r3
    d104:	231f      	movs	r3, #31
    d106:	18fb      	adds	r3, r7, r3
    d108:	701a      	strb	r2, [r3, #0]
					break;
    d10a:	e00b      	b.n	d124 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    d10c:	231e      	movs	r3, #30
    d10e:	18fb      	adds	r3, r7, r3
    d110:	781a      	ldrb	r2, [r3, #0]
    d112:	231e      	movs	r3, #30
    d114:	18fb      	adds	r3, r7, r3
    d116:	3201      	adds	r2, #1
    d118:	701a      	strb	r2, [r3, #0]
    d11a:	231e      	movs	r3, #30
    d11c:	18fb      	adds	r3, r7, r3
    d11e:	781b      	ldrb	r3, [r3, #0]
    d120:	2b03      	cmp	r3, #3
    d122:	d9ca      	bls.n	d0ba <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    d124:	231f      	movs	r3, #31
    d126:	18fb      	adds	r3, r7, r3
    d128:	781b      	ldrb	r3, [r3, #0]
    d12a:	2b7f      	cmp	r3, #127	; 0x7f
    d12c:	d84e      	bhi.n	d1cc <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    d12e:	69bb      	ldr	r3, [r7, #24]
    d130:	2210      	movs	r2, #16
    d132:	2100      	movs	r1, #0
    d134:	0018      	movs	r0, r3
    d136:	4b2f      	ldr	r3, [pc, #188]	; (d1f4 <socket+0x1f4>)
    d138:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    d13a:	69bb      	ldr	r3, [r7, #24]
    d13c:	2201      	movs	r2, #1
    d13e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    d140:	4b2d      	ldr	r3, [pc, #180]	; (d1f8 <socket+0x1f8>)
    d142:	881b      	ldrh	r3, [r3, #0]
    d144:	b29b      	uxth	r3, r3
    d146:	3301      	adds	r3, #1
    d148:	b29a      	uxth	r2, r3
    d14a:	4b2b      	ldr	r3, [pc, #172]	; (d1f8 <socket+0x1f8>)
    d14c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    d14e:	4b2a      	ldr	r3, [pc, #168]	; (d1f8 <socket+0x1f8>)
    d150:	881b      	ldrh	r3, [r3, #0]
    d152:	b29b      	uxth	r3, r3
    d154:	2b00      	cmp	r3, #0
    d156:	d106      	bne.n	d166 <socket+0x166>
				++gu16SessionID;
    d158:	4b27      	ldr	r3, [pc, #156]	; (d1f8 <socket+0x1f8>)
    d15a:	881b      	ldrh	r3, [r3, #0]
    d15c:	b29b      	uxth	r3, r3
    d15e:	3301      	adds	r3, #1
    d160:	b29a      	uxth	r2, r3
    d162:	4b25      	ldr	r3, [pc, #148]	; (d1f8 <socket+0x1f8>)
    d164:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    d166:	4b24      	ldr	r3, [pc, #144]	; (d1f8 <socket+0x1f8>)
    d168:	881b      	ldrh	r3, [r3, #0]
    d16a:	b29a      	uxth	r2, r3
    d16c:	69bb      	ldr	r3, [r7, #24]
    d16e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    d170:	4b22      	ldr	r3, [pc, #136]	; (d1fc <socket+0x1fc>)
    d172:	0018      	movs	r0, r3
    d174:	4b22      	ldr	r3, [pc, #136]	; (d200 <socket+0x200>)
    d176:	4798      	blx	r3
    d178:	231f      	movs	r3, #31
    d17a:	18fb      	adds	r3, r7, r3
    d17c:	2100      	movs	r1, #0
    d17e:	5659      	ldrsb	r1, [r3, r1]
    d180:	4b1d      	ldr	r3, [pc, #116]	; (d1f8 <socket+0x1f8>)
    d182:	881b      	ldrh	r3, [r3, #0]
    d184:	b29b      	uxth	r3, r3
    d186:	001a      	movs	r2, r3
    d188:	4b1e      	ldr	r3, [pc, #120]	; (d204 <socket+0x204>)
    d18a:	0018      	movs	r0, r3
    d18c:	4b1c      	ldr	r3, [pc, #112]	; (d200 <socket+0x200>)
    d18e:	4798      	blx	r3
    d190:	200d      	movs	r0, #13
    d192:	4b1d      	ldr	r3, [pc, #116]	; (d208 <socket+0x208>)
    d194:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    d196:	1d3b      	adds	r3, r7, #4
    d198:	781b      	ldrb	r3, [r3, #0]
    d19a:	2201      	movs	r2, #1
    d19c:	4013      	ands	r3, r2
    d19e:	d015      	beq.n	d1cc <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    d1a0:	230c      	movs	r3, #12
    d1a2:	18fb      	adds	r3, r7, r3
    d1a4:	221f      	movs	r2, #31
    d1a6:	18ba      	adds	r2, r7, r2
    d1a8:	7812      	ldrb	r2, [r2, #0]
    d1aa:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    d1ac:	69bb      	ldr	r3, [r7, #24]
    d1ae:	2221      	movs	r2, #33	; 0x21
    d1b0:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    d1b2:	230c      	movs	r3, #12
    d1b4:	18fa      	adds	r2, r7, r3
    d1b6:	2300      	movs	r3, #0
    d1b8:	9302      	str	r3, [sp, #8]
    d1ba:	2300      	movs	r3, #0
    d1bc:	9301      	str	r3, [sp, #4]
    d1be:	2300      	movs	r3, #0
    d1c0:	9300      	str	r3, [sp, #0]
    d1c2:	2304      	movs	r3, #4
    d1c4:	2150      	movs	r1, #80	; 0x50
    d1c6:	2002      	movs	r0, #2
    d1c8:	4c10      	ldr	r4, [pc, #64]	; (d20c <socket+0x20c>)
    d1ca:	47a0      	blx	r4
			}
		}
	}
	return sock;
    d1cc:	231f      	movs	r3, #31
    d1ce:	18fb      	adds	r3, r7, r3
    d1d0:	781b      	ldrb	r3, [r3, #0]
    d1d2:	b25b      	sxtb	r3, r3
}
    d1d4:	0018      	movs	r0, r3
    d1d6:	46bd      	mov	sp, r7
    d1d8:	b009      	add	sp, #36	; 0x24
    d1da:	bd90      	pop	{r4, r7, pc}
    d1dc:	2000021d 	.word	0x2000021d
    d1e0:	2000030c 	.word	0x2000030c
    d1e4:	00016af5 	.word	0x00016af5
    d1e8:	2000037c 	.word	0x2000037c
    d1ec:	2000021e 	.word	0x2000021e
    d1f0:	80000003 	.word	0x80000003
    d1f4:	00008c25 	.word	0x00008c25
    d1f8:	2000021a 	.word	0x2000021a
    d1fc:	000192f8 	.word	0x000192f8
    d200:	00016d69 	.word	0x00016d69
    d204:	00019318 	.word	0x00019318
    d208:	00016d9d 	.word	0x00016d9d
    d20c:	00008e85 	.word	0x00008e85

0000d210 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    d210:	b5b0      	push	{r4, r5, r7, lr}
    d212:	b08a      	sub	sp, #40	; 0x28
    d214:	af04      	add	r7, sp, #16
    d216:	6039      	str	r1, [r7, #0]
    d218:	0011      	movs	r1, r2
    d21a:	1dfb      	adds	r3, r7, #7
    d21c:	1c02      	adds	r2, r0, #0
    d21e:	701a      	strb	r2, [r3, #0]
    d220:	1dbb      	adds	r3, r7, #6
    d222:	1c0a      	adds	r2, r1, #0
    d224:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d226:	2317      	movs	r3, #23
    d228:	18fb      	adds	r3, r7, r3
    d22a:	22fa      	movs	r2, #250	; 0xfa
    d22c:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    d22e:	1dfb      	adds	r3, r7, #7
    d230:	781b      	ldrb	r3, [r3, #0]
    d232:	2b7f      	cmp	r3, #127	; 0x7f
    d234:	d867      	bhi.n	d306 <connect+0xf6>
    d236:	683b      	ldr	r3, [r7, #0]
    d238:	2b00      	cmp	r3, #0
    d23a:	d064      	beq.n	d306 <connect+0xf6>
    d23c:	1dfb      	adds	r3, r7, #7
    d23e:	781b      	ldrb	r3, [r3, #0]
    d240:	b25b      	sxtb	r3, r3
    d242:	4a35      	ldr	r2, [pc, #212]	; (d318 <connect+0x108>)
    d244:	011b      	lsls	r3, r3, #4
    d246:	18d3      	adds	r3, r2, r3
    d248:	330a      	adds	r3, #10
    d24a:	781b      	ldrb	r3, [r3, #0]
    d24c:	b2db      	uxtb	r3, r3
    d24e:	2b01      	cmp	r3, #1
    d250:	d159      	bne.n	d306 <connect+0xf6>
    d252:	1dbb      	adds	r3, r7, #6
    d254:	781b      	ldrb	r3, [r3, #0]
    d256:	2b00      	cmp	r3, #0
    d258:	d055      	beq.n	d306 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    d25a:	2316      	movs	r3, #22
    d25c:	18fb      	adds	r3, r7, r3
    d25e:	2244      	movs	r2, #68	; 0x44
    d260:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    d262:	1dfb      	adds	r3, r7, #7
    d264:	781b      	ldrb	r3, [r3, #0]
    d266:	b25b      	sxtb	r3, r3
    d268:	4a2b      	ldr	r2, [pc, #172]	; (d318 <connect+0x108>)
    d26a:	011b      	lsls	r3, r3, #4
    d26c:	18d3      	adds	r3, r2, r3
    d26e:	330b      	adds	r3, #11
    d270:	781b      	ldrb	r3, [r3, #0]
    d272:	b2db      	uxtb	r3, r3
    d274:	001a      	movs	r2, r3
    d276:	2301      	movs	r3, #1
    d278:	4013      	ands	r3, r2
    d27a:	d00f      	beq.n	d29c <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    d27c:	2316      	movs	r3, #22
    d27e:	18fb      	adds	r3, r7, r3
    d280:	224b      	movs	r2, #75	; 0x4b
    d282:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    d284:	1dfb      	adds	r3, r7, #7
    d286:	781b      	ldrb	r3, [r3, #0]
    d288:	b25b      	sxtb	r3, r3
    d28a:	4a23      	ldr	r2, [pc, #140]	; (d318 <connect+0x108>)
    d28c:	011b      	lsls	r3, r3, #4
    d28e:	18d3      	adds	r3, r2, r3
    d290:	330b      	adds	r3, #11
    d292:	781b      	ldrb	r3, [r3, #0]
    d294:	b2da      	uxtb	r2, r3
    d296:	2308      	movs	r3, #8
    d298:	18fb      	adds	r3, r7, r3
    d29a:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    d29c:	2308      	movs	r3, #8
    d29e:	18fb      	adds	r3, r7, r3
    d2a0:	1dfa      	adds	r2, r7, #7
    d2a2:	7812      	ldrb	r2, [r2, #0]
    d2a4:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    d2a6:	6839      	ldr	r1, [r7, #0]
    d2a8:	2308      	movs	r3, #8
    d2aa:	18fb      	adds	r3, r7, r3
    d2ac:	2208      	movs	r2, #8
    d2ae:	0018      	movs	r0, r3
    d2b0:	4b1a      	ldr	r3, [pc, #104]	; (d31c <connect+0x10c>)
    d2b2:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    d2b4:	1dfb      	adds	r3, r7, #7
    d2b6:	781b      	ldrb	r3, [r3, #0]
    d2b8:	b25b      	sxtb	r3, r3
    d2ba:	4a17      	ldr	r2, [pc, #92]	; (d318 <connect+0x108>)
    d2bc:	011b      	lsls	r3, r3, #4
    d2be:	18d3      	adds	r3, r2, r3
    d2c0:	3306      	adds	r3, #6
    d2c2:	881b      	ldrh	r3, [r3, #0]
    d2c4:	b29a      	uxth	r2, r3
    d2c6:	2308      	movs	r3, #8
    d2c8:	18fb      	adds	r3, r7, r3
    d2ca:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    d2cc:	2317      	movs	r3, #23
    d2ce:	18fc      	adds	r4, r7, r3
    d2d0:	2308      	movs	r3, #8
    d2d2:	18fa      	adds	r2, r7, r3
    d2d4:	2316      	movs	r3, #22
    d2d6:	18fb      	adds	r3, r7, r3
    d2d8:	7819      	ldrb	r1, [r3, #0]
    d2da:	2300      	movs	r3, #0
    d2dc:	9302      	str	r3, [sp, #8]
    d2de:	2300      	movs	r3, #0
    d2e0:	9301      	str	r3, [sp, #4]
    d2e2:	2300      	movs	r3, #0
    d2e4:	9300      	str	r3, [sp, #0]
    d2e6:	230c      	movs	r3, #12
    d2e8:	2002      	movs	r0, #2
    d2ea:	4d0d      	ldr	r5, [pc, #52]	; (d320 <connect+0x110>)
    d2ec:	47a8      	blx	r5
    d2ee:	0003      	movs	r3, r0
    d2f0:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    d2f2:	2317      	movs	r3, #23
    d2f4:	18fb      	adds	r3, r7, r3
    d2f6:	781b      	ldrb	r3, [r3, #0]
    d2f8:	b25b      	sxtb	r3, r3
    d2fa:	2b00      	cmp	r3, #0
    d2fc:	d003      	beq.n	d306 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    d2fe:	2317      	movs	r3, #23
    d300:	18fb      	adds	r3, r7, r3
    d302:	22f7      	movs	r2, #247	; 0xf7
    d304:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    d306:	2317      	movs	r3, #23
    d308:	18fb      	adds	r3, r7, r3
    d30a:	781b      	ldrb	r3, [r3, #0]
    d30c:	b25b      	sxtb	r3, r3
}
    d30e:	0018      	movs	r0, r3
    d310:	46bd      	mov	sp, r7
    d312:	b006      	add	sp, #24
    d314:	bdb0      	pop	{r4, r5, r7, pc}
    d316:	46c0      	nop			; (mov r8, r8)
    d318:	2000030c 	.word	0x2000030c
    d31c:	00008be9 	.word	0x00008be9
    d320:	00008e85 	.word	0x00008e85

0000d324 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    d324:	b590      	push	{r4, r7, lr}
    d326:	b08f      	sub	sp, #60	; 0x3c
    d328:	af04      	add	r7, sp, #16
    d32a:	0004      	movs	r4, r0
    d32c:	60b9      	str	r1, [r7, #8]
    d32e:	0010      	movs	r0, r2
    d330:	0019      	movs	r1, r3
    d332:	230f      	movs	r3, #15
    d334:	18fb      	adds	r3, r7, r3
    d336:	1c22      	adds	r2, r4, #0
    d338:	701a      	strb	r2, [r3, #0]
    d33a:	230c      	movs	r3, #12
    d33c:	18fb      	adds	r3, r7, r3
    d33e:	1c02      	adds	r2, r0, #0
    d340:	801a      	strh	r2, [r3, #0]
    d342:	1dbb      	adds	r3, r7, #6
    d344:	1c0a      	adds	r2, r1, #0
    d346:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    d348:	2326      	movs	r3, #38	; 0x26
    d34a:	18fb      	adds	r3, r7, r3
    d34c:	2206      	movs	r2, #6
    d34e:	4252      	negs	r2, r2
    d350:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    d352:	230f      	movs	r3, #15
    d354:	18fb      	adds	r3, r7, r3
    d356:	781b      	ldrb	r3, [r3, #0]
    d358:	2b7f      	cmp	r3, #127	; 0x7f
    d35a:	d900      	bls.n	d35e <send+0x3a>
    d35c:	e087      	b.n	d46e <send+0x14a>
    d35e:	68bb      	ldr	r3, [r7, #8]
    d360:	2b00      	cmp	r3, #0
    d362:	d100      	bne.n	d366 <send+0x42>
    d364:	e083      	b.n	d46e <send+0x14a>
    d366:	230c      	movs	r3, #12
    d368:	18fb      	adds	r3, r7, r3
    d36a:	881a      	ldrh	r2, [r3, #0]
    d36c:	23af      	movs	r3, #175	; 0xaf
    d36e:	00db      	lsls	r3, r3, #3
    d370:	429a      	cmp	r2, r3
    d372:	d900      	bls.n	d376 <send+0x52>
    d374:	e07b      	b.n	d46e <send+0x14a>
    d376:	230f      	movs	r3, #15
    d378:	18fb      	adds	r3, r7, r3
    d37a:	781b      	ldrb	r3, [r3, #0]
    d37c:	b25b      	sxtb	r3, r3
    d37e:	4a40      	ldr	r2, [pc, #256]	; (d480 <send+0x15c>)
    d380:	011b      	lsls	r3, r3, #4
    d382:	18d3      	adds	r3, r2, r3
    d384:	330a      	adds	r3, #10
    d386:	781b      	ldrb	r3, [r3, #0]
    d388:	b2db      	uxtb	r3, r3
    d38a:	2b01      	cmp	r3, #1
    d38c:	d16f      	bne.n	d46e <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    d38e:	2323      	movs	r3, #35	; 0x23
    d390:	18fb      	adds	r3, r7, r3
    d392:	2245      	movs	r2, #69	; 0x45
    d394:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    d396:	2324      	movs	r3, #36	; 0x24
    d398:	18fb      	adds	r3, r7, r3
    d39a:	2250      	movs	r2, #80	; 0x50
    d39c:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    d39e:	2310      	movs	r3, #16
    d3a0:	18fb      	adds	r3, r7, r3
    d3a2:	220f      	movs	r2, #15
    d3a4:	18ba      	adds	r2, r7, r2
    d3a6:	7812      	ldrb	r2, [r2, #0]
    d3a8:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    d3aa:	2310      	movs	r3, #16
    d3ac:	18fb      	adds	r3, r7, r3
    d3ae:	220c      	movs	r2, #12
    d3b0:	18ba      	adds	r2, r7, r2
    d3b2:	8812      	ldrh	r2, [r2, #0]
    d3b4:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    d3b6:	230f      	movs	r3, #15
    d3b8:	18fb      	adds	r3, r7, r3
    d3ba:	781b      	ldrb	r3, [r3, #0]
    d3bc:	b25b      	sxtb	r3, r3
    d3be:	4a30      	ldr	r2, [pc, #192]	; (d480 <send+0x15c>)
    d3c0:	011b      	lsls	r3, r3, #4
    d3c2:	18d3      	adds	r3, r2, r3
    d3c4:	3306      	adds	r3, #6
    d3c6:	881b      	ldrh	r3, [r3, #0]
    d3c8:	b29a      	uxth	r2, r3
    d3ca:	2310      	movs	r3, #16
    d3cc:	18fb      	adds	r3, r7, r3
    d3ce:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    d3d0:	230f      	movs	r3, #15
    d3d2:	18fb      	adds	r3, r7, r3
    d3d4:	781b      	ldrb	r3, [r3, #0]
    d3d6:	b25b      	sxtb	r3, r3
    d3d8:	2b06      	cmp	r3, #6
    d3da:	dd03      	ble.n	d3e4 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    d3dc:	2324      	movs	r3, #36	; 0x24
    d3de:	18fb      	adds	r3, r7, r3
    d3e0:	2244      	movs	r2, #68	; 0x44
    d3e2:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d3e4:	230f      	movs	r3, #15
    d3e6:	18fb      	adds	r3, r7, r3
    d3e8:	781b      	ldrb	r3, [r3, #0]
    d3ea:	b25b      	sxtb	r3, r3
    d3ec:	4a24      	ldr	r2, [pc, #144]	; (d480 <send+0x15c>)
    d3ee:	011b      	lsls	r3, r3, #4
    d3f0:	18d3      	adds	r3, r2, r3
    d3f2:	330b      	adds	r3, #11
    d3f4:	781b      	ldrb	r3, [r3, #0]
    d3f6:	b2db      	uxtb	r3, r3
    d3f8:	001a      	movs	r2, r3
    d3fa:	2301      	movs	r3, #1
    d3fc:	4013      	ands	r3, r2
    d3fe:	d00f      	beq.n	d420 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    d400:	2323      	movs	r3, #35	; 0x23
    d402:	18fb      	adds	r3, r7, r3
    d404:	224c      	movs	r2, #76	; 0x4c
    d406:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    d408:	230f      	movs	r3, #15
    d40a:	18fb      	adds	r3, r7, r3
    d40c:	2200      	movs	r2, #0
    d40e:	569a      	ldrsb	r2, [r3, r2]
    d410:	2324      	movs	r3, #36	; 0x24
    d412:	18fb      	adds	r3, r7, r3
    d414:	491a      	ldr	r1, [pc, #104]	; (d480 <send+0x15c>)
    d416:	0112      	lsls	r2, r2, #4
    d418:	188a      	adds	r2, r1, r2
    d41a:	3208      	adds	r2, #8
    d41c:	8812      	ldrh	r2, [r2, #0]
    d41e:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    d420:	2323      	movs	r3, #35	; 0x23
    d422:	18fb      	adds	r3, r7, r3
    d424:	781b      	ldrb	r3, [r3, #0]
    d426:	2280      	movs	r2, #128	; 0x80
    d428:	4252      	negs	r2, r2
    d42a:	4313      	orrs	r3, r2
    d42c:	b2d9      	uxtb	r1, r3
    d42e:	2310      	movs	r3, #16
    d430:	18fa      	adds	r2, r7, r3
    d432:	2324      	movs	r3, #36	; 0x24
    d434:	18fb      	adds	r3, r7, r3
    d436:	881b      	ldrh	r3, [r3, #0]
    d438:	9302      	str	r3, [sp, #8]
    d43a:	230c      	movs	r3, #12
    d43c:	18fb      	adds	r3, r7, r3
    d43e:	881b      	ldrh	r3, [r3, #0]
    d440:	9301      	str	r3, [sp, #4]
    d442:	68bb      	ldr	r3, [r7, #8]
    d444:	9300      	str	r3, [sp, #0]
    d446:	2310      	movs	r3, #16
    d448:	2002      	movs	r0, #2
    d44a:	4c0e      	ldr	r4, [pc, #56]	; (d484 <send+0x160>)
    d44c:	47a0      	blx	r4
    d44e:	0003      	movs	r3, r0
    d450:	001a      	movs	r2, r3
    d452:	2326      	movs	r3, #38	; 0x26
    d454:	18fb      	adds	r3, r7, r3
    d456:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    d458:	2326      	movs	r3, #38	; 0x26
    d45a:	18fb      	adds	r3, r7, r3
    d45c:	2200      	movs	r2, #0
    d45e:	5e9b      	ldrsh	r3, [r3, r2]
    d460:	2b00      	cmp	r3, #0
    d462:	d004      	beq.n	d46e <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    d464:	2326      	movs	r3, #38	; 0x26
    d466:	18fb      	adds	r3, r7, r3
    d468:	220e      	movs	r2, #14
    d46a:	4252      	negs	r2, r2
    d46c:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    d46e:	2326      	movs	r3, #38	; 0x26
    d470:	18fb      	adds	r3, r7, r3
    d472:	2200      	movs	r2, #0
    d474:	5e9b      	ldrsh	r3, [r3, r2]
}
    d476:	0018      	movs	r0, r3
    d478:	46bd      	mov	sp, r7
    d47a:	b00b      	add	sp, #44	; 0x2c
    d47c:	bd90      	pop	{r4, r7, pc}
    d47e:	46c0      	nop			; (mov r8, r8)
    d480:	2000030c 	.word	0x2000030c
    d484:	00008e85 	.word	0x00008e85

0000d488 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    d488:	b590      	push	{r4, r7, lr}
    d48a:	b08d      	sub	sp, #52	; 0x34
    d48c:	af04      	add	r7, sp, #16
    d48e:	60b9      	str	r1, [r7, #8]
    d490:	0011      	movs	r1, r2
    d492:	607b      	str	r3, [r7, #4]
    d494:	230f      	movs	r3, #15
    d496:	18fb      	adds	r3, r7, r3
    d498:	1c02      	adds	r2, r0, #0
    d49a:	701a      	strb	r2, [r3, #0]
    d49c:	230c      	movs	r3, #12
    d49e:	18fb      	adds	r3, r7, r3
    d4a0:	1c0a      	adds	r2, r1, #0
    d4a2:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    d4a4:	231e      	movs	r3, #30
    d4a6:	18fb      	adds	r3, r7, r3
    d4a8:	2206      	movs	r2, #6
    d4aa:	4252      	negs	r2, r2
    d4ac:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    d4ae:	230f      	movs	r3, #15
    d4b0:	18fb      	adds	r3, r7, r3
    d4b2:	781b      	ldrb	r3, [r3, #0]
    d4b4:	2b7f      	cmp	r3, #127	; 0x7f
    d4b6:	d900      	bls.n	d4ba <recv+0x32>
    d4b8:	e099      	b.n	d5ee <recv+0x166>
    d4ba:	68bb      	ldr	r3, [r7, #8]
    d4bc:	2b00      	cmp	r3, #0
    d4be:	d100      	bne.n	d4c2 <recv+0x3a>
    d4c0:	e095      	b.n	d5ee <recv+0x166>
    d4c2:	230c      	movs	r3, #12
    d4c4:	18fb      	adds	r3, r7, r3
    d4c6:	881b      	ldrh	r3, [r3, #0]
    d4c8:	2b00      	cmp	r3, #0
    d4ca:	d100      	bne.n	d4ce <recv+0x46>
    d4cc:	e08f      	b.n	d5ee <recv+0x166>
    d4ce:	230f      	movs	r3, #15
    d4d0:	18fb      	adds	r3, r7, r3
    d4d2:	781b      	ldrb	r3, [r3, #0]
    d4d4:	b25b      	sxtb	r3, r3
    d4d6:	4a4a      	ldr	r2, [pc, #296]	; (d600 <recv+0x178>)
    d4d8:	011b      	lsls	r3, r3, #4
    d4da:	18d3      	adds	r3, r2, r3
    d4dc:	330a      	adds	r3, #10
    d4de:	781b      	ldrb	r3, [r3, #0]
    d4e0:	b2db      	uxtb	r3, r3
    d4e2:	2b01      	cmp	r3, #1
    d4e4:	d000      	beq.n	d4e8 <recv+0x60>
    d4e6:	e082      	b.n	d5ee <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    d4e8:	231e      	movs	r3, #30
    d4ea:	18fb      	adds	r3, r7, r3
    d4ec:	2200      	movs	r2, #0
    d4ee:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    d4f0:	230f      	movs	r3, #15
    d4f2:	18fb      	adds	r3, r7, r3
    d4f4:	2200      	movs	r2, #0
    d4f6:	569a      	ldrsb	r2, [r3, r2]
    d4f8:	4b41      	ldr	r3, [pc, #260]	; (d600 <recv+0x178>)
    d4fa:	0112      	lsls	r2, r2, #4
    d4fc:	68b9      	ldr	r1, [r7, #8]
    d4fe:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    d500:	230f      	movs	r3, #15
    d502:	18fb      	adds	r3, r7, r3
    d504:	781b      	ldrb	r3, [r3, #0]
    d506:	b25b      	sxtb	r3, r3
    d508:	4a3d      	ldr	r2, [pc, #244]	; (d600 <recv+0x178>)
    d50a:	011b      	lsls	r3, r3, #4
    d50c:	18d3      	adds	r3, r2, r3
    d50e:	3304      	adds	r3, #4
    d510:	220c      	movs	r2, #12
    d512:	18ba      	adds	r2, r7, r2
    d514:	8812      	ldrh	r2, [r2, #0]
    d516:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    d518:	230f      	movs	r3, #15
    d51a:	18fb      	adds	r3, r7, r3
    d51c:	781b      	ldrb	r3, [r3, #0]
    d51e:	b25b      	sxtb	r3, r3
    d520:	4a37      	ldr	r2, [pc, #220]	; (d600 <recv+0x178>)
    d522:	011b      	lsls	r3, r3, #4
    d524:	18d3      	adds	r3, r2, r3
    d526:	330c      	adds	r3, #12
    d528:	781b      	ldrb	r3, [r3, #0]
    d52a:	b2db      	uxtb	r3, r3
    d52c:	2b00      	cmp	r3, #0
    d52e:	d15e      	bne.n	d5ee <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    d530:	231d      	movs	r3, #29
    d532:	18fb      	adds	r3, r7, r3
    d534:	2246      	movs	r2, #70	; 0x46
    d536:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    d538:	230f      	movs	r3, #15
    d53a:	18fb      	adds	r3, r7, r3
    d53c:	781b      	ldrb	r3, [r3, #0]
    d53e:	b25b      	sxtb	r3, r3
    d540:	4a2f      	ldr	r2, [pc, #188]	; (d600 <recv+0x178>)
    d542:	011b      	lsls	r3, r3, #4
    d544:	18d3      	adds	r3, r2, r3
    d546:	330c      	adds	r3, #12
    d548:	2201      	movs	r2, #1
    d54a:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d54c:	230f      	movs	r3, #15
    d54e:	18fb      	adds	r3, r7, r3
    d550:	781b      	ldrb	r3, [r3, #0]
    d552:	b25b      	sxtb	r3, r3
    d554:	4a2a      	ldr	r2, [pc, #168]	; (d600 <recv+0x178>)
    d556:	011b      	lsls	r3, r3, #4
    d558:	18d3      	adds	r3, r2, r3
    d55a:	330b      	adds	r3, #11
    d55c:	781b      	ldrb	r3, [r3, #0]
    d55e:	b2db      	uxtb	r3, r3
    d560:	001a      	movs	r2, r3
    d562:	2301      	movs	r3, #1
    d564:	4013      	ands	r3, r2
    d566:	d003      	beq.n	d570 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    d568:	231d      	movs	r3, #29
    d56a:	18fb      	adds	r3, r7, r3
    d56c:	224d      	movs	r2, #77	; 0x4d
    d56e:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    d570:	687b      	ldr	r3, [r7, #4]
    d572:	2b00      	cmp	r3, #0
    d574:	d105      	bne.n	d582 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    d576:	2314      	movs	r3, #20
    d578:	18fb      	adds	r3, r7, r3
    d57a:	2201      	movs	r2, #1
    d57c:	4252      	negs	r2, r2
    d57e:	601a      	str	r2, [r3, #0]
    d580:	e003      	b.n	d58a <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    d582:	2314      	movs	r3, #20
    d584:	18fb      	adds	r3, r7, r3
    d586:	687a      	ldr	r2, [r7, #4]
    d588:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    d58a:	2314      	movs	r3, #20
    d58c:	18fb      	adds	r3, r7, r3
    d58e:	220f      	movs	r2, #15
    d590:	18ba      	adds	r2, r7, r2
    d592:	7812      	ldrb	r2, [r2, #0]
    d594:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    d596:	230f      	movs	r3, #15
    d598:	18fb      	adds	r3, r7, r3
    d59a:	781b      	ldrb	r3, [r3, #0]
    d59c:	b25b      	sxtb	r3, r3
    d59e:	4a18      	ldr	r2, [pc, #96]	; (d600 <recv+0x178>)
    d5a0:	011b      	lsls	r3, r3, #4
    d5a2:	18d3      	adds	r3, r2, r3
    d5a4:	3306      	adds	r3, #6
    d5a6:	881b      	ldrh	r3, [r3, #0]
    d5a8:	b29a      	uxth	r2, r3
    d5aa:	2314      	movs	r3, #20
    d5ac:	18fb      	adds	r3, r7, r3
    d5ae:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    d5b0:	2314      	movs	r3, #20
    d5b2:	18fa      	adds	r2, r7, r3
    d5b4:	231d      	movs	r3, #29
    d5b6:	18fb      	adds	r3, r7, r3
    d5b8:	7819      	ldrb	r1, [r3, #0]
    d5ba:	2300      	movs	r3, #0
    d5bc:	9302      	str	r3, [sp, #8]
    d5be:	2300      	movs	r3, #0
    d5c0:	9301      	str	r3, [sp, #4]
    d5c2:	2300      	movs	r3, #0
    d5c4:	9300      	str	r3, [sp, #0]
    d5c6:	2308      	movs	r3, #8
    d5c8:	2002      	movs	r0, #2
    d5ca:	4c0e      	ldr	r4, [pc, #56]	; (d604 <recv+0x17c>)
    d5cc:	47a0      	blx	r4
    d5ce:	0003      	movs	r3, r0
    d5d0:	001a      	movs	r2, r3
    d5d2:	231e      	movs	r3, #30
    d5d4:	18fb      	adds	r3, r7, r3
    d5d6:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    d5d8:	231e      	movs	r3, #30
    d5da:	18fb      	adds	r3, r7, r3
    d5dc:	2200      	movs	r2, #0
    d5de:	5e9b      	ldrsh	r3, [r3, r2]
    d5e0:	2b00      	cmp	r3, #0
    d5e2:	d004      	beq.n	d5ee <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    d5e4:	231e      	movs	r3, #30
    d5e6:	18fb      	adds	r3, r7, r3
    d5e8:	220e      	movs	r2, #14
    d5ea:	4252      	negs	r2, r2
    d5ec:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    d5ee:	231e      	movs	r3, #30
    d5f0:	18fb      	adds	r3, r7, r3
    d5f2:	2200      	movs	r2, #0
    d5f4:	5e9b      	ldrsh	r3, [r3, r2]
}
    d5f6:	0018      	movs	r0, r3
    d5f8:	46bd      	mov	sp, r7
    d5fa:	b009      	add	sp, #36	; 0x24
    d5fc:	bd90      	pop	{r4, r7, pc}
    d5fe:	46c0      	nop			; (mov r8, r8)
    d600:	2000030c 	.word	0x2000030c
    d604:	00008e85 	.word	0x00008e85

0000d608 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    d608:	b5b0      	push	{r4, r5, r7, lr}
    d60a:	b088      	sub	sp, #32
    d60c:	af04      	add	r7, sp, #16
    d60e:	0002      	movs	r2, r0
    d610:	1dfb      	adds	r3, r7, #7
    d612:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d614:	230f      	movs	r3, #15
    d616:	18fb      	adds	r3, r7, r3
    d618:	22fa      	movs	r2, #250	; 0xfa
    d61a:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    d61c:	4b42      	ldr	r3, [pc, #264]	; (d728 <close+0x120>)
    d61e:	0018      	movs	r0, r3
    d620:	4b42      	ldr	r3, [pc, #264]	; (d72c <close+0x124>)
    d622:	4798      	blx	r3
    d624:	1dfb      	adds	r3, r7, #7
    d626:	2200      	movs	r2, #0
    d628:	569a      	ldrsb	r2, [r3, r2]
    d62a:	4b41      	ldr	r3, [pc, #260]	; (d730 <close+0x128>)
    d62c:	0011      	movs	r1, r2
    d62e:	0018      	movs	r0, r3
    d630:	4b3e      	ldr	r3, [pc, #248]	; (d72c <close+0x124>)
    d632:	4798      	blx	r3
    d634:	200d      	movs	r0, #13
    d636:	4b3f      	ldr	r3, [pc, #252]	; (d734 <close+0x12c>)
    d638:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    d63a:	1dfb      	adds	r3, r7, #7
    d63c:	781b      	ldrb	r3, [r3, #0]
    d63e:	2b7f      	cmp	r3, #127	; 0x7f
    d640:	d86a      	bhi.n	d718 <close+0x110>
    d642:	1dfb      	adds	r3, r7, #7
    d644:	781b      	ldrb	r3, [r3, #0]
    d646:	b25b      	sxtb	r3, r3
    d648:	4a3b      	ldr	r2, [pc, #236]	; (d738 <close+0x130>)
    d64a:	011b      	lsls	r3, r3, #4
    d64c:	18d3      	adds	r3, r2, r3
    d64e:	330a      	adds	r3, #10
    d650:	781b      	ldrb	r3, [r3, #0]
    d652:	b2db      	uxtb	r3, r3
    d654:	2b01      	cmp	r3, #1
    d656:	d15f      	bne.n	d718 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    d658:	230e      	movs	r3, #14
    d65a:	18fb      	adds	r3, r7, r3
    d65c:	2249      	movs	r2, #73	; 0x49
    d65e:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    d660:	2308      	movs	r3, #8
    d662:	18fb      	adds	r3, r7, r3
    d664:	1dfa      	adds	r2, r7, #7
    d666:	7812      	ldrb	r2, [r2, #0]
    d668:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    d66a:	1dfb      	adds	r3, r7, #7
    d66c:	781b      	ldrb	r3, [r3, #0]
    d66e:	b25b      	sxtb	r3, r3
    d670:	4a31      	ldr	r2, [pc, #196]	; (d738 <close+0x130>)
    d672:	011b      	lsls	r3, r3, #4
    d674:	18d3      	adds	r3, r2, r3
    d676:	3306      	adds	r3, #6
    d678:	881b      	ldrh	r3, [r3, #0]
    d67a:	b29a      	uxth	r2, r3
    d67c:	2308      	movs	r3, #8
    d67e:	18fb      	adds	r3, r7, r3
    d680:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    d682:	1dfb      	adds	r3, r7, #7
    d684:	781b      	ldrb	r3, [r3, #0]
    d686:	b25b      	sxtb	r3, r3
    d688:	4a2b      	ldr	r2, [pc, #172]	; (d738 <close+0x130>)
    d68a:	011b      	lsls	r3, r3, #4
    d68c:	18d3      	adds	r3, r2, r3
    d68e:	330a      	adds	r3, #10
    d690:	2200      	movs	r2, #0
    d692:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    d694:	1dfb      	adds	r3, r7, #7
    d696:	781b      	ldrb	r3, [r3, #0]
    d698:	b25b      	sxtb	r3, r3
    d69a:	4a27      	ldr	r2, [pc, #156]	; (d738 <close+0x130>)
    d69c:	011b      	lsls	r3, r3, #4
    d69e:	18d3      	adds	r3, r2, r3
    d6a0:	3306      	adds	r3, #6
    d6a2:	2200      	movs	r2, #0
    d6a4:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d6a6:	1dfb      	adds	r3, r7, #7
    d6a8:	781b      	ldrb	r3, [r3, #0]
    d6aa:	b25b      	sxtb	r3, r3
    d6ac:	4a22      	ldr	r2, [pc, #136]	; (d738 <close+0x130>)
    d6ae:	011b      	lsls	r3, r3, #4
    d6b0:	18d3      	adds	r3, r2, r3
    d6b2:	330b      	adds	r3, #11
    d6b4:	781b      	ldrb	r3, [r3, #0]
    d6b6:	b2db      	uxtb	r3, r3
    d6b8:	001a      	movs	r2, r3
    d6ba:	2301      	movs	r3, #1
    d6bc:	4013      	ands	r3, r2
    d6be:	d003      	beq.n	d6c8 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    d6c0:	230e      	movs	r3, #14
    d6c2:	18fb      	adds	r3, r7, r3
    d6c4:	224e      	movs	r2, #78	; 0x4e
    d6c6:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    d6c8:	230f      	movs	r3, #15
    d6ca:	18fc      	adds	r4, r7, r3
    d6cc:	2308      	movs	r3, #8
    d6ce:	18fa      	adds	r2, r7, r3
    d6d0:	230e      	movs	r3, #14
    d6d2:	18fb      	adds	r3, r7, r3
    d6d4:	7819      	ldrb	r1, [r3, #0]
    d6d6:	2300      	movs	r3, #0
    d6d8:	9302      	str	r3, [sp, #8]
    d6da:	2300      	movs	r3, #0
    d6dc:	9301      	str	r3, [sp, #4]
    d6de:	2300      	movs	r3, #0
    d6e0:	9300      	str	r3, [sp, #0]
    d6e2:	2304      	movs	r3, #4
    d6e4:	2002      	movs	r0, #2
    d6e6:	4d15      	ldr	r5, [pc, #84]	; (d73c <close+0x134>)
    d6e8:	47a8      	blx	r5
    d6ea:	0003      	movs	r3, r0
    d6ec:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    d6ee:	230f      	movs	r3, #15
    d6f0:	18fb      	adds	r3, r7, r3
    d6f2:	781b      	ldrb	r3, [r3, #0]
    d6f4:	b25b      	sxtb	r3, r3
    d6f6:	2b00      	cmp	r3, #0
    d6f8:	d003      	beq.n	d702 <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    d6fa:	230f      	movs	r3, #15
    d6fc:	18fb      	adds	r3, r7, r3
    d6fe:	22f7      	movs	r2, #247	; 0xf7
    d700:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    d702:	1dfb      	adds	r3, r7, #7
    d704:	781b      	ldrb	r3, [r3, #0]
    d706:	b25b      	sxtb	r3, r3
    d708:	011a      	lsls	r2, r3, #4
    d70a:	4b0b      	ldr	r3, [pc, #44]	; (d738 <close+0x130>)
    d70c:	18d3      	adds	r3, r2, r3
    d70e:	2210      	movs	r2, #16
    d710:	2100      	movs	r1, #0
    d712:	0018      	movs	r0, r3
    d714:	4b0a      	ldr	r3, [pc, #40]	; (d740 <close+0x138>)
    d716:	4798      	blx	r3
	}
	return s8Ret;
    d718:	230f      	movs	r3, #15
    d71a:	18fb      	adds	r3, r7, r3
    d71c:	781b      	ldrb	r3, [r3, #0]
    d71e:	b25b      	sxtb	r3, r3
}
    d720:	0018      	movs	r0, r3
    d722:	46bd      	mov	sp, r7
    d724:	b004      	add	sp, #16
    d726:	bdb0      	pop	{r4, r5, r7, pc}
    d728:	000192f8 	.word	0x000192f8
    d72c:	00016d69 	.word	0x00016d69
    d730:	00019334 	.word	0x00019334
    d734:	00016d9d 	.word	0x00016d9d
    d738:	2000030c 	.word	0x2000030c
    d73c:	00008e85 	.word	0x00008e85
    d740:	00008c25 	.word	0x00008c25

0000d744 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    d744:	b580      	push	{r7, lr}
    d746:	b086      	sub	sp, #24
    d748:	af00      	add	r7, sp, #0
    d74a:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    d74c:	2300      	movs	r3, #0
    d74e:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    d750:	2317      	movs	r3, #23
    d752:	18fb      	adds	r3, r7, r3
    d754:	2200      	movs	r2, #0
    d756:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    d758:	2316      	movs	r3, #22
    d75a:	18fb      	adds	r3, r7, r3
    d75c:	2200      	movs	r2, #0
    d75e:	701a      	strb	r2, [r3, #0]
    d760:	e060      	b.n	d824 <nmi_inet_addr+0xe0>
	{
		j = 0;
    d762:	2315      	movs	r3, #21
    d764:	18fb      	adds	r3, r7, r3
    d766:	2200      	movs	r2, #0
    d768:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    d76a:	2314      	movs	r3, #20
    d76c:	18fb      	adds	r3, r7, r3
    d76e:	687a      	ldr	r2, [r7, #4]
    d770:	7812      	ldrb	r2, [r2, #0]
    d772:	701a      	strb	r2, [r3, #0]
			++j;
    d774:	2315      	movs	r3, #21
    d776:	18fb      	adds	r3, r7, r3
    d778:	2215      	movs	r2, #21
    d77a:	18ba      	adds	r2, r7, r2
    d77c:	7812      	ldrb	r2, [r2, #0]
    d77e:	3201      	adds	r2, #1
    d780:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    d782:	2315      	movs	r3, #21
    d784:	18fb      	adds	r3, r7, r3
    d786:	781b      	ldrb	r3, [r3, #0]
    d788:	2b04      	cmp	r3, #4
    d78a:	d901      	bls.n	d790 <nmi_inet_addr+0x4c>
			{
				return 0;
    d78c:	2300      	movs	r3, #0
    d78e:	e057      	b.n	d840 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    d790:	2314      	movs	r3, #20
    d792:	18fb      	adds	r3, r7, r3
    d794:	781b      	ldrb	r3, [r3, #0]
    d796:	2b2e      	cmp	r3, #46	; 0x2e
    d798:	d004      	beq.n	d7a4 <nmi_inet_addr+0x60>
    d79a:	2314      	movs	r3, #20
    d79c:	18fb      	adds	r3, r7, r3
    d79e:	781b      	ldrb	r3, [r3, #0]
    d7a0:	2b00      	cmp	r3, #0
    d7a2:	d10d      	bne.n	d7c0 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    d7a4:	2316      	movs	r3, #22
    d7a6:	18fb      	adds	r3, r7, r3
    d7a8:	781b      	ldrb	r3, [r3, #0]
    d7aa:	220c      	movs	r2, #12
    d7ac:	18ba      	adds	r2, r7, r2
    d7ae:	2117      	movs	r1, #23
    d7b0:	1879      	adds	r1, r7, r1
    d7b2:	7809      	ldrb	r1, [r1, #0]
    d7b4:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    d7b6:	2317      	movs	r3, #23
    d7b8:	18fb      	adds	r3, r7, r3
    d7ba:	2200      	movs	r2, #0
    d7bc:	701a      	strb	r2, [r3, #0]
    d7be:	e01d      	b.n	d7fc <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    d7c0:	2314      	movs	r3, #20
    d7c2:	18fb      	adds	r3, r7, r3
    d7c4:	781b      	ldrb	r3, [r3, #0]
    d7c6:	2b2f      	cmp	r3, #47	; 0x2f
    d7c8:	d916      	bls.n	d7f8 <nmi_inet_addr+0xb4>
    d7ca:	2314      	movs	r3, #20
    d7cc:	18fb      	adds	r3, r7, r3
    d7ce:	781b      	ldrb	r3, [r3, #0]
    d7d0:	2b39      	cmp	r3, #57	; 0x39
    d7d2:	d811      	bhi.n	d7f8 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    d7d4:	2317      	movs	r3, #23
    d7d6:	18fb      	adds	r3, r7, r3
    d7d8:	781b      	ldrb	r3, [r3, #0]
    d7da:	1c1a      	adds	r2, r3, #0
    d7dc:	0092      	lsls	r2, r2, #2
    d7de:	18d3      	adds	r3, r2, r3
    d7e0:	18db      	adds	r3, r3, r3
    d7e2:	b2da      	uxtb	r2, r3
    d7e4:	2314      	movs	r3, #20
    d7e6:	18fb      	adds	r3, r7, r3
    d7e8:	781b      	ldrb	r3, [r3, #0]
    d7ea:	18d3      	adds	r3, r2, r3
    d7ec:	b2da      	uxtb	r2, r3
    d7ee:	2317      	movs	r3, #23
    d7f0:	18fb      	adds	r3, r7, r3
    d7f2:	3a30      	subs	r2, #48	; 0x30
    d7f4:	701a      	strb	r2, [r3, #0]
    d7f6:	e001      	b.n	d7fc <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    d7f8:	2300      	movs	r3, #0
    d7fa:	e021      	b.n	d840 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    d7fc:	687b      	ldr	r3, [r7, #4]
    d7fe:	3301      	adds	r3, #1
    d800:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    d802:	2314      	movs	r3, #20
    d804:	18fb      	adds	r3, r7, r3
    d806:	781b      	ldrb	r3, [r3, #0]
    d808:	2b2e      	cmp	r3, #46	; 0x2e
    d80a:	d004      	beq.n	d816 <nmi_inet_addr+0xd2>
    d80c:	2314      	movs	r3, #20
    d80e:	18fb      	adds	r3, r7, r3
    d810:	781b      	ldrb	r3, [r3, #0]
    d812:	2b00      	cmp	r3, #0
    d814:	d1a9      	bne.n	d76a <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
    d816:	2316      	movs	r3, #22
    d818:	18fb      	adds	r3, r7, r3
    d81a:	2216      	movs	r2, #22
    d81c:	18ba      	adds	r2, r7, r2
    d81e:	7812      	ldrb	r2, [r2, #0]
    d820:	3201      	adds	r2, #1
    d822:	701a      	strb	r2, [r3, #0]
    d824:	2316      	movs	r3, #22
    d826:	18fb      	adds	r3, r7, r3
    d828:	781b      	ldrb	r3, [r3, #0]
    d82a:	2b03      	cmp	r3, #3
    d82c:	d999      	bls.n	d762 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    d82e:	230c      	movs	r3, #12
    d830:	18f9      	adds	r1, r7, r3
    d832:	2310      	movs	r3, #16
    d834:	18fb      	adds	r3, r7, r3
    d836:	2204      	movs	r2, #4
    d838:	0018      	movs	r0, r3
    d83a:	4b03      	ldr	r3, [pc, #12]	; (d848 <nmi_inet_addr+0x104>)
    d83c:	4798      	blx	r3
	return u32IP;
    d83e:	693b      	ldr	r3, [r7, #16]
}
    d840:	0018      	movs	r0, r3
    d842:	46bd      	mov	sp, r7
    d844:	b006      	add	sp, #24
    d846:	bd80      	pop	{r7, pc}
    d848:	00008be9 	.word	0x00008be9

0000d84c <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    d84c:	b5b0      	push	{r4, r5, r7, lr}
    d84e:	b088      	sub	sp, #32
    d850:	af04      	add	r7, sp, #16
    d852:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    d854:	230f      	movs	r3, #15
    d856:	18fb      	adds	r3, r7, r3
    d858:	22fa      	movs	r2, #250	; 0xfa
    d85a:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    d85c:	687b      	ldr	r3, [r7, #4]
    d85e:	0018      	movs	r0, r3
    d860:	4b14      	ldr	r3, [pc, #80]	; (d8b4 <gethostbyname+0x68>)
    d862:	4798      	blx	r3
    d864:	0003      	movs	r3, r0
    d866:	001a      	movs	r2, r3
    d868:	230e      	movs	r3, #14
    d86a:	18fb      	adds	r3, r7, r3
    d86c:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    d86e:	230e      	movs	r3, #14
    d870:	18fb      	adds	r3, r7, r3
    d872:	781b      	ldrb	r3, [r3, #0]
    d874:	2b40      	cmp	r3, #64	; 0x40
    d876:	d815      	bhi.n	d8a4 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    d878:	230e      	movs	r3, #14
    d87a:	18fb      	adds	r3, r7, r3
    d87c:	781b      	ldrb	r3, [r3, #0]
    d87e:	b29b      	uxth	r3, r3
    d880:	3301      	adds	r3, #1
    d882:	b299      	uxth	r1, r3
    d884:	230f      	movs	r3, #15
    d886:	18fc      	adds	r4, r7, r3
    d888:	687a      	ldr	r2, [r7, #4]
    d88a:	2300      	movs	r3, #0
    d88c:	9302      	str	r3, [sp, #8]
    d88e:	2300      	movs	r3, #0
    d890:	9301      	str	r3, [sp, #4]
    d892:	2300      	movs	r3, #0
    d894:	9300      	str	r3, [sp, #0]
    d896:	000b      	movs	r3, r1
    d898:	214a      	movs	r1, #74	; 0x4a
    d89a:	2002      	movs	r0, #2
    d89c:	4d06      	ldr	r5, [pc, #24]	; (d8b8 <gethostbyname+0x6c>)
    d89e:	47a8      	blx	r5
    d8a0:	0003      	movs	r3, r0
    d8a2:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    d8a4:	230f      	movs	r3, #15
    d8a6:	18fb      	adds	r3, r7, r3
    d8a8:	781b      	ldrb	r3, [r3, #0]
    d8aa:	b25b      	sxtb	r3, r3
}
    d8ac:	0018      	movs	r0, r3
    d8ae:	46bd      	mov	sp, r7
    d8b0:	b004      	add	sp, #16
    d8b2:	bdb0      	pop	{r4, r5, r7, pc}
    d8b4:	00008c63 	.word	0x00008c63
    d8b8:	00008e85 	.word	0x00008e85

0000d8bc <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    d8bc:	b580      	push	{r7, lr}
    d8be:	b082      	sub	sp, #8
    d8c0:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    d8c2:	003b      	movs	r3, r7
    d8c4:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    d8c6:	687b      	ldr	r3, [r7, #4]
    d8c8:	22b9      	movs	r2, #185	; 0xb9
    d8ca:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    d8cc:	4b13      	ldr	r3, [pc, #76]	; (d91c <spi_flash_enter_low_power_mode+0x60>)
    d8ce:	2100      	movs	r1, #0
    d8d0:	0018      	movs	r0, r3
    d8d2:	4b13      	ldr	r3, [pc, #76]	; (d920 <spi_flash_enter_low_power_mode+0x64>)
    d8d4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    d8d6:	687b      	ldr	r3, [r7, #4]
    d8d8:	781b      	ldrb	r3, [r3, #0]
    d8da:	001a      	movs	r2, r3
    d8dc:	4b11      	ldr	r3, [pc, #68]	; (d924 <spi_flash_enter_low_power_mode+0x68>)
    d8de:	0011      	movs	r1, r2
    d8e0:	0018      	movs	r0, r3
    d8e2:	4b0f      	ldr	r3, [pc, #60]	; (d920 <spi_flash_enter_low_power_mode+0x64>)
    d8e4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    d8e6:	4b10      	ldr	r3, [pc, #64]	; (d928 <spi_flash_enter_low_power_mode+0x6c>)
    d8e8:	2101      	movs	r1, #1
    d8ea:	0018      	movs	r0, r3
    d8ec:	4b0c      	ldr	r3, [pc, #48]	; (d920 <spi_flash_enter_low_power_mode+0x64>)
    d8ee:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    d8f0:	4b0e      	ldr	r3, [pc, #56]	; (d92c <spi_flash_enter_low_power_mode+0x70>)
    d8f2:	2100      	movs	r1, #0
    d8f4:	0018      	movs	r0, r3
    d8f6:	4b0a      	ldr	r3, [pc, #40]	; (d920 <spi_flash_enter_low_power_mode+0x64>)
    d8f8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    d8fa:	4b0d      	ldr	r3, [pc, #52]	; (d930 <spi_flash_enter_low_power_mode+0x74>)
    d8fc:	2181      	movs	r1, #129	; 0x81
    d8fe:	0018      	movs	r0, r3
    d900:	4b07      	ldr	r3, [pc, #28]	; (d920 <spi_flash_enter_low_power_mode+0x64>)
    d902:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    d904:	46c0      	nop			; (mov r8, r8)
    d906:	4b0b      	ldr	r3, [pc, #44]	; (d934 <spi_flash_enter_low_power_mode+0x78>)
    d908:	0018      	movs	r0, r3
    d90a:	4b0b      	ldr	r3, [pc, #44]	; (d938 <spi_flash_enter_low_power_mode+0x7c>)
    d90c:	4798      	blx	r3
    d90e:	0003      	movs	r3, r0
    d910:	2b01      	cmp	r3, #1
    d912:	d1f8      	bne.n	d906 <spi_flash_enter_low_power_mode+0x4a>
}
    d914:	46c0      	nop			; (mov r8, r8)
    d916:	46bd      	mov	sp, r7
    d918:	b002      	add	sp, #8
    d91a:	bd80      	pop	{r7, pc}
    d91c:	00010208 	.word	0x00010208
    d920:	0000acb1 	.word	0x0000acb1
    d924:	0001020c 	.word	0x0001020c
    d928:	00010214 	.word	0x00010214
    d92c:	0001021c 	.word	0x0001021c
    d930:	00010204 	.word	0x00010204
    d934:	00010218 	.word	0x00010218
    d938:	0000ac6d 	.word	0x0000ac6d

0000d93c <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    d93c:	b580      	push	{r7, lr}
    d93e:	b082      	sub	sp, #8
    d940:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    d942:	003b      	movs	r3, r7
    d944:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    d946:	687b      	ldr	r3, [r7, #4]
    d948:	22ab      	movs	r2, #171	; 0xab
    d94a:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    d94c:	4b13      	ldr	r3, [pc, #76]	; (d99c <spi_flash_leave_low_power_mode+0x60>)
    d94e:	2100      	movs	r1, #0
    d950:	0018      	movs	r0, r3
    d952:	4b13      	ldr	r3, [pc, #76]	; (d9a0 <spi_flash_leave_low_power_mode+0x64>)
    d954:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    d956:	687b      	ldr	r3, [r7, #4]
    d958:	781b      	ldrb	r3, [r3, #0]
    d95a:	001a      	movs	r2, r3
    d95c:	4b11      	ldr	r3, [pc, #68]	; (d9a4 <spi_flash_leave_low_power_mode+0x68>)
    d95e:	0011      	movs	r1, r2
    d960:	0018      	movs	r0, r3
    d962:	4b0f      	ldr	r3, [pc, #60]	; (d9a0 <spi_flash_leave_low_power_mode+0x64>)
    d964:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    d966:	4b10      	ldr	r3, [pc, #64]	; (d9a8 <spi_flash_leave_low_power_mode+0x6c>)
    d968:	2101      	movs	r1, #1
    d96a:	0018      	movs	r0, r3
    d96c:	4b0c      	ldr	r3, [pc, #48]	; (d9a0 <spi_flash_leave_low_power_mode+0x64>)
    d96e:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    d970:	4b0e      	ldr	r3, [pc, #56]	; (d9ac <spi_flash_leave_low_power_mode+0x70>)
    d972:	2100      	movs	r1, #0
    d974:	0018      	movs	r0, r3
    d976:	4b0a      	ldr	r3, [pc, #40]	; (d9a0 <spi_flash_leave_low_power_mode+0x64>)
    d978:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    d97a:	4b0d      	ldr	r3, [pc, #52]	; (d9b0 <spi_flash_leave_low_power_mode+0x74>)
    d97c:	2181      	movs	r1, #129	; 0x81
    d97e:	0018      	movs	r0, r3
    d980:	4b07      	ldr	r3, [pc, #28]	; (d9a0 <spi_flash_leave_low_power_mode+0x64>)
    d982:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    d984:	46c0      	nop			; (mov r8, r8)
    d986:	4b0b      	ldr	r3, [pc, #44]	; (d9b4 <spi_flash_leave_low_power_mode+0x78>)
    d988:	0018      	movs	r0, r3
    d98a:	4b0b      	ldr	r3, [pc, #44]	; (d9b8 <spi_flash_leave_low_power_mode+0x7c>)
    d98c:	4798      	blx	r3
    d98e:	0003      	movs	r3, r0
    d990:	2b01      	cmp	r3, #1
    d992:	d1f8      	bne.n	d986 <spi_flash_leave_low_power_mode+0x4a>
}
    d994:	46c0      	nop			; (mov r8, r8)
    d996:	46bd      	mov	sp, r7
    d998:	b002      	add	sp, #8
    d99a:	bd80      	pop	{r7, pc}
    d99c:	00010208 	.word	0x00010208
    d9a0:	0000acb1 	.word	0x0000acb1
    d9a4:	0001020c 	.word	0x0001020c
    d9a8:	00010214 	.word	0x00010214
    d9ac:	0001021c 	.word	0x0001021c
    d9b0:	00010204 	.word	0x00010204
    d9b4:	00010218 	.word	0x00010218
    d9b8:	0000ac6d 	.word	0x0000ac6d

0000d9bc <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    d9bc:	b590      	push	{r4, r7, lr}
    d9be:	b085      	sub	sp, #20
    d9c0:	af00      	add	r7, sp, #0
    d9c2:	0002      	movs	r2, r0
    d9c4:	1dfb      	adds	r3, r7, #7
    d9c6:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    d9c8:	230f      	movs	r3, #15
    d9ca:	18fb      	adds	r3, r7, r3
    d9cc:	2200      	movs	r2, #0
    d9ce:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    d9d0:	4b24      	ldr	r3, [pc, #144]	; (da64 <spi_flash_enable+0xa8>)
    d9d2:	4798      	blx	r3
    d9d4:	0003      	movs	r3, r0
    d9d6:	051b      	lsls	r3, r3, #20
    d9d8:	0d1b      	lsrs	r3, r3, #20
    d9da:	4a23      	ldr	r2, [pc, #140]	; (da68 <spi_flash_enable+0xac>)
    d9dc:	4293      	cmp	r3, r2
    d9de:	d938      	bls.n	da52 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    d9e0:	230f      	movs	r3, #15
    d9e2:	18fc      	adds	r4, r7, r3
    d9e4:	2308      	movs	r3, #8
    d9e6:	18fb      	adds	r3, r7, r3
    d9e8:	4a20      	ldr	r2, [pc, #128]	; (da6c <spi_flash_enable+0xb0>)
    d9ea:	0019      	movs	r1, r3
    d9ec:	0010      	movs	r0, r2
    d9ee:	4b20      	ldr	r3, [pc, #128]	; (da70 <spi_flash_enable+0xb4>)
    d9f0:	4798      	blx	r3
    d9f2:	0003      	movs	r3, r0
    d9f4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    d9f6:	230f      	movs	r3, #15
    d9f8:	18fb      	adds	r3, r7, r3
    d9fa:	781b      	ldrb	r3, [r3, #0]
    d9fc:	b25b      	sxtb	r3, r3
    d9fe:	2b00      	cmp	r3, #0
    da00:	d126      	bne.n	da50 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    da02:	68bb      	ldr	r3, [r7, #8]
    da04:	4a1b      	ldr	r2, [pc, #108]	; (da74 <spi_flash_enable+0xb8>)
    da06:	4013      	ands	r3, r2
    da08:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    da0a:	68bb      	ldr	r3, [r7, #8]
    da0c:	4a1a      	ldr	r2, [pc, #104]	; (da78 <spi_flash_enable+0xbc>)
    da0e:	4313      	orrs	r3, r2
    da10:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    da12:	68bb      	ldr	r3, [r7, #8]
    da14:	4a15      	ldr	r2, [pc, #84]	; (da6c <spi_flash_enable+0xb0>)
    da16:	0019      	movs	r1, r3
    da18:	0010      	movs	r0, r2
    da1a:	4b18      	ldr	r3, [pc, #96]	; (da7c <spi_flash_enable+0xc0>)
    da1c:	4798      	blx	r3
		if(enable) {
    da1e:	1dfb      	adds	r3, r7, #7
    da20:	781b      	ldrb	r3, [r3, #0]
    da22:	2b00      	cmp	r3, #0
    da24:	d002      	beq.n	da2c <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    da26:	4b16      	ldr	r3, [pc, #88]	; (da80 <spi_flash_enable+0xc4>)
    da28:	4798      	blx	r3
    da2a:	e001      	b.n	da30 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    da2c:	4b15      	ldr	r3, [pc, #84]	; (da84 <spi_flash_enable+0xc8>)
    da2e:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    da30:	68bb      	ldr	r3, [r7, #8]
    da32:	4a10      	ldr	r2, [pc, #64]	; (da74 <spi_flash_enable+0xb8>)
    da34:	4013      	ands	r3, r2
    da36:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    da38:	68bb      	ldr	r3, [r7, #8]
    da3a:	2280      	movs	r2, #128	; 0x80
    da3c:	0252      	lsls	r2, r2, #9
    da3e:	4313      	orrs	r3, r2
    da40:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    da42:	68bb      	ldr	r3, [r7, #8]
    da44:	4a09      	ldr	r2, [pc, #36]	; (da6c <spi_flash_enable+0xb0>)
    da46:	0019      	movs	r1, r3
    da48:	0010      	movs	r0, r2
    da4a:	4b0c      	ldr	r3, [pc, #48]	; (da7c <spi_flash_enable+0xc0>)
    da4c:	4798      	blx	r3
    da4e:	e000      	b.n	da52 <spi_flash_enable+0x96>
			goto ERR1;
    da50:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    da52:	230f      	movs	r3, #15
    da54:	18fb      	adds	r3, r7, r3
    da56:	781b      	ldrb	r3, [r3, #0]
    da58:	b25b      	sxtb	r3, r3
}
    da5a:	0018      	movs	r0, r3
    da5c:	46bd      	mov	sp, r7
    da5e:	b005      	add	sp, #20
    da60:	bd90      	pop	{r4, r7, pc}
    da62:	46c0      	nop			; (mov r8, r8)
    da64:	0000a591 	.word	0x0000a591
    da68:	0000039f 	.word	0x0000039f
    da6c:	00001410 	.word	0x00001410
    da70:	0000ac8d 	.word	0x0000ac8d
    da74:	f8888fff 	.word	0xf8888fff
    da78:	01111000 	.word	0x01111000
    da7c:	0000acb1 	.word	0x0000acb1
    da80:	0000d93d 	.word	0x0000d93d
    da84:	0000d8bd 	.word	0x0000d8bd

0000da88 <_crc32_recalculate_bytes_helper>:
 *
 * \attention This implementation assumes a little-endian architecture.
 */
static inline crc32_t _crc32_recalculate_bytes_helper(word_t data,
		crc32_t crc, uint_fast8_t bytes)
{
    da88:	b580      	push	{r7, lr}
    da8a:	b086      	sub	sp, #24
    da8c:	af00      	add	r7, sp, #0
    da8e:	60f8      	str	r0, [r7, #12]
    da90:	60b9      	str	r1, [r7, #8]
    da92:	607a      	str	r2, [r7, #4]
	uint_fast8_t bit;

	crc ^= data;
    da94:	68ba      	ldr	r2, [r7, #8]
    da96:	68fb      	ldr	r3, [r7, #12]
    da98:	4053      	eors	r3, r2
    da9a:	60bb      	str	r3, [r7, #8]

	for (bit = 8 * bytes; bit > 0; bit--) {
    da9c:	687b      	ldr	r3, [r7, #4]
    da9e:	00db      	lsls	r3, r3, #3
    daa0:	617b      	str	r3, [r7, #20]
    daa2:	e00f      	b.n	dac4 <_crc32_recalculate_bytes_helper+0x3c>
		if (crc & 1) {
    daa4:	68bb      	ldr	r3, [r7, #8]
    daa6:	2201      	movs	r2, #1
    daa8:	4013      	ands	r3, r2
    daaa:	d005      	beq.n	dab8 <_crc32_recalculate_bytes_helper+0x30>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    daac:	68bb      	ldr	r3, [r7, #8]
    daae:	085b      	lsrs	r3, r3, #1
    dab0:	4a08      	ldr	r2, [pc, #32]	; (dad4 <_crc32_recalculate_bytes_helper+0x4c>)
    dab2:	4053      	eors	r3, r2
    dab4:	60bb      	str	r3, [r7, #8]
    dab6:	e002      	b.n	dabe <_crc32_recalculate_bytes_helper+0x36>
		} else {
			crc >>= 1;
    dab8:	68bb      	ldr	r3, [r7, #8]
    daba:	085b      	lsrs	r3, r3, #1
    dabc:	60bb      	str	r3, [r7, #8]
	for (bit = 8 * bytes; bit > 0; bit--) {
    dabe:	697b      	ldr	r3, [r7, #20]
    dac0:	3b01      	subs	r3, #1
    dac2:	617b      	str	r3, [r7, #20]
    dac4:	697b      	ldr	r3, [r7, #20]
    dac6:	2b00      	cmp	r3, #0
    dac8:	d1ec      	bne.n	daa4 <_crc32_recalculate_bytes_helper+0x1c>
		}
	}

	return crc;
    daca:	68bb      	ldr	r3, [r7, #8]
}
    dacc:	0018      	movs	r0, r3
    dace:	46bd      	mov	sp, r7
    dad0:	b006      	add	sp, #24
    dad2:	bd80      	pop	{r7, pc}
    dad4:	edb88320 	.word	0xedb88320

0000dad8 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    dad8:	b580      	push	{r7, lr}
    dada:	b088      	sub	sp, #32
    dadc:	af00      	add	r7, sp, #0
    dade:	60f8      	str	r0, [r7, #12]
    dae0:	60b9      	str	r1, [r7, #8]
    dae2:	607a      	str	r2, [r7, #4]
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    dae4:	68fb      	ldr	r3, [r7, #12]
    dae6:	2203      	movs	r2, #3
    dae8:	4393      	bics	r3, r2
	const word_t *word_ptr =
    daea:	61fb      	str	r3, [r7, #28]
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    daec:	687b      	ldr	r3, [r7, #4]
    daee:	681b      	ldr	r3, [r3, #0]
    daf0:	43db      	mvns	r3, r3
    daf2:	617b      	str	r3, [r7, #20]
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
    daf4:	68bb      	ldr	r3, [r7, #8]
    daf6:	2b03      	cmp	r3, #3
    daf8:	d802      	bhi.n	db00 <crc32_recalculate+0x28>
		temp_length = length;
    dafa:	68bb      	ldr	r3, [r7, #8]
    dafc:	61bb      	str	r3, [r7, #24]
    dafe:	e004      	b.n	db0a <crc32_recalculate+0x32>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    db00:	68fb      	ldr	r3, [r7, #12]
    db02:	425b      	negs	r3, r3
    db04:	2203      	movs	r2, #3
    db06:	4013      	ands	r3, r2
    db08:	61bb      	str	r3, [r7, #24]
	}

	if (temp_length) {
    db0a:	69bb      	ldr	r3, [r7, #24]
    db0c:	2b00      	cmp	r3, #0
    db0e:	d01a      	beq.n	db46 <crc32_recalculate+0x6e>
		length -= temp_length;
    db10:	68ba      	ldr	r2, [r7, #8]
    db12:	69bb      	ldr	r3, [r7, #24]
    db14:	1ad3      	subs	r3, r2, r3
    db16:	60bb      	str	r3, [r7, #8]

		word = *(word_ptr++);
    db18:	69fb      	ldr	r3, [r7, #28]
    db1a:	1d1a      	adds	r2, r3, #4
    db1c:	61fa      	str	r2, [r7, #28]
    db1e:	681b      	ldr	r3, [r3, #0]
    db20:	613b      	str	r3, [r7, #16]
		word >>= 8 * (WORD_SIZE - temp_length);
    db22:	69ba      	ldr	r2, [r7, #24]
    db24:	0013      	movs	r3, r2
    db26:	075b      	lsls	r3, r3, #29
    db28:	1a9b      	subs	r3, r3, r2
    db2a:	00db      	lsls	r3, r3, #3
    db2c:	3320      	adds	r3, #32
    db2e:	693a      	ldr	r2, [r7, #16]
    db30:	40da      	lsrs	r2, r3
    db32:	0013      	movs	r3, r2
    db34:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
    db36:	69ba      	ldr	r2, [r7, #24]
    db38:	6979      	ldr	r1, [r7, #20]
    db3a:	693b      	ldr	r3, [r7, #16]
    db3c:	0018      	movs	r0, r3
    db3e:	4b24      	ldr	r3, [pc, #144]	; (dbd0 <crc32_recalculate+0xf8>)
    db40:	4798      	blx	r3
    db42:	0003      	movs	r3, r0
    db44:	617b      	str	r3, [r7, #20]
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    db46:	68bb      	ldr	r3, [r7, #8]
    db48:	2203      	movs	r2, #3
    db4a:	4393      	bics	r3, r2
    db4c:	61bb      	str	r3, [r7, #24]

	if (temp_length) {
    db4e:	69bb      	ldr	r3, [r7, #24]
    db50:	2b00      	cmp	r3, #0
    db52:	d019      	beq.n	db88 <crc32_recalculate+0xb0>
		length -= temp_length;
    db54:	68ba      	ldr	r2, [r7, #8]
    db56:	69bb      	ldr	r3, [r7, #24]
    db58:	1ad3      	subs	r3, r2, r3
    db5a:	60bb      	str	r3, [r7, #8]
		temp_length /= WORD_SIZE;
    db5c:	69bb      	ldr	r3, [r7, #24]
    db5e:	089b      	lsrs	r3, r3, #2
    db60:	61bb      	str	r3, [r7, #24]

		while (temp_length--) {
    db62:	e00c      	b.n	db7e <crc32_recalculate+0xa6>
			word = *(word_ptr++);
    db64:	69fb      	ldr	r3, [r7, #28]
    db66:	1d1a      	adds	r2, r3, #4
    db68:	61fa      	str	r2, [r7, #28]
    db6a:	681b      	ldr	r3, [r3, #0]
    db6c:	613b      	str	r3, [r7, #16]
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
    db6e:	6979      	ldr	r1, [r7, #20]
    db70:	693b      	ldr	r3, [r7, #16]
    db72:	2204      	movs	r2, #4
    db74:	0018      	movs	r0, r3
    db76:	4b16      	ldr	r3, [pc, #88]	; (dbd0 <crc32_recalculate+0xf8>)
    db78:	4798      	blx	r3
    db7a:	0003      	movs	r3, r0
    db7c:	617b      	str	r3, [r7, #20]
		while (temp_length--) {
    db7e:	69bb      	ldr	r3, [r7, #24]
    db80:	1e5a      	subs	r2, r3, #1
    db82:	61ba      	str	r2, [r7, #24]
    db84:	2b00      	cmp	r3, #0
    db86:	d1ed      	bne.n	db64 <crc32_recalculate+0x8c>
		}
	}

	// Calculate for tailing bytes
	if (length) {
    db88:	68bb      	ldr	r3, [r7, #8]
    db8a:	2b00      	cmp	r3, #0
    db8c:	d016      	beq.n	dbbc <crc32_recalculate+0xe4>
		word = *word_ptr;
    db8e:	69fb      	ldr	r3, [r7, #28]
    db90:	681b      	ldr	r3, [r3, #0]
    db92:	613b      	str	r3, [r7, #16]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    db94:	68ba      	ldr	r2, [r7, #8]
    db96:	0013      	movs	r3, r2
    db98:	075b      	lsls	r3, r3, #29
    db9a:	1a9b      	subs	r3, r3, r2
    db9c:	00db      	lsls	r3, r3, #3
    db9e:	3320      	adds	r3, #32
    dba0:	2201      	movs	r2, #1
    dba2:	4252      	negs	r2, r2
    dba4:	40da      	lsrs	r2, r3
    dba6:	693b      	ldr	r3, [r7, #16]
    dba8:	4013      	ands	r3, r2
    dbaa:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
    dbac:	68ba      	ldr	r2, [r7, #8]
    dbae:	6979      	ldr	r1, [r7, #20]
    dbb0:	693b      	ldr	r3, [r7, #16]
    dbb2:	0018      	movs	r0, r3
    dbb4:	4b06      	ldr	r3, [pc, #24]	; (dbd0 <crc32_recalculate+0xf8>)
    dbb6:	4798      	blx	r3
    dbb8:	0003      	movs	r3, r0
    dbba:	617b      	str	r3, [r7, #20]
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    dbbc:	697b      	ldr	r3, [r7, #20]
    dbbe:	43da      	mvns	r2, r3
    dbc0:	687b      	ldr	r3, [r7, #4]
    dbc2:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    dbc4:	2300      	movs	r3, #0
    dbc6:	0018      	movs	r0, r3
    dbc8:	46bd      	mov	sp, r7
    dbca:	b008      	add	sp, #32
    dbcc:	bd80      	pop	{r7, pc}
    dbce:	46c0      	nop			; (mov r8, r8)
    dbd0:	0000da89 	.word	0x0000da89

0000dbd4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    dbd4:	b580      	push	{r7, lr}
    dbd6:	b084      	sub	sp, #16
    dbd8:	af00      	add	r7, sp, #0
    dbda:	0002      	movs	r2, r0
    dbdc:	1dfb      	adds	r3, r7, #7
    dbde:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    dbe0:	230f      	movs	r3, #15
    dbe2:	18fb      	adds	r3, r7, r3
    dbe4:	1dfa      	adds	r2, r7, #7
    dbe6:	7812      	ldrb	r2, [r2, #0]
    dbe8:	0952      	lsrs	r2, r2, #5
    dbea:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    dbec:	230f      	movs	r3, #15
    dbee:	18fb      	adds	r3, r7, r3
    dbf0:	781b      	ldrb	r3, [r3, #0]
    dbf2:	2b00      	cmp	r3, #0
    dbf4:	d10c      	bne.n	dc10 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    dbf6:	4b09      	ldr	r3, [pc, #36]	; (dc1c <_extint_get_eic_from_channel+0x48>)
    dbf8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    dbfa:	230f      	movs	r3, #15
    dbfc:	18fb      	adds	r3, r7, r3
    dbfe:	781b      	ldrb	r3, [r3, #0]
    dc00:	009b      	lsls	r3, r3, #2
    dc02:	2210      	movs	r2, #16
    dc04:	4694      	mov	ip, r2
    dc06:	44bc      	add	ip, r7
    dc08:	4463      	add	r3, ip
    dc0a:	3b08      	subs	r3, #8
    dc0c:	681b      	ldr	r3, [r3, #0]
    dc0e:	e000      	b.n	dc12 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    dc10:	2300      	movs	r3, #0
	}
}
    dc12:	0018      	movs	r0, r3
    dc14:	46bd      	mov	sp, r7
    dc16:	b004      	add	sp, #16
    dc18:	bd80      	pop	{r7, pc}
    dc1a:	46c0      	nop			; (mov r8, r8)
    dc1c:	40001800 	.word	0x40001800

0000dc20 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    dc20:	b580      	push	{r7, lr}
    dc22:	b084      	sub	sp, #16
    dc24:	af00      	add	r7, sp, #0
    dc26:	0002      	movs	r2, r0
    dc28:	1dfb      	adds	r3, r7, #7
    dc2a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    dc2c:	1dfb      	adds	r3, r7, #7
    dc2e:	781b      	ldrb	r3, [r3, #0]
    dc30:	0018      	movs	r0, r3
    dc32:	4b0b      	ldr	r3, [pc, #44]	; (dc60 <extint_chan_is_detected+0x40>)
    dc34:	4798      	blx	r3
    dc36:	0003      	movs	r3, r0
    dc38:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    dc3a:	1dfb      	adds	r3, r7, #7
    dc3c:	781b      	ldrb	r3, [r3, #0]
    dc3e:	221f      	movs	r2, #31
    dc40:	4013      	ands	r3, r2
    dc42:	2201      	movs	r2, #1
    dc44:	409a      	lsls	r2, r3
    dc46:	0013      	movs	r3, r2
    dc48:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    dc4a:	68fb      	ldr	r3, [r7, #12]
    dc4c:	691b      	ldr	r3, [r3, #16]
    dc4e:	68ba      	ldr	r2, [r7, #8]
    dc50:	4013      	ands	r3, r2
    dc52:	1e5a      	subs	r2, r3, #1
    dc54:	4193      	sbcs	r3, r2
    dc56:	b2db      	uxtb	r3, r3
}
    dc58:	0018      	movs	r0, r3
    dc5a:	46bd      	mov	sp, r7
    dc5c:	b004      	add	sp, #16
    dc5e:	bd80      	pop	{r7, pc}
    dc60:	0000dbd5 	.word	0x0000dbd5

0000dc64 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    dc64:	b580      	push	{r7, lr}
    dc66:	b084      	sub	sp, #16
    dc68:	af00      	add	r7, sp, #0
    dc6a:	0002      	movs	r2, r0
    dc6c:	1dfb      	adds	r3, r7, #7
    dc6e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    dc70:	1dfb      	adds	r3, r7, #7
    dc72:	781b      	ldrb	r3, [r3, #0]
    dc74:	0018      	movs	r0, r3
    dc76:	4b09      	ldr	r3, [pc, #36]	; (dc9c <extint_chan_clear_detected+0x38>)
    dc78:	4798      	blx	r3
    dc7a:	0003      	movs	r3, r0
    dc7c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    dc7e:	1dfb      	adds	r3, r7, #7
    dc80:	781b      	ldrb	r3, [r3, #0]
    dc82:	221f      	movs	r2, #31
    dc84:	4013      	ands	r3, r2
    dc86:	2201      	movs	r2, #1
    dc88:	409a      	lsls	r2, r3
    dc8a:	0013      	movs	r3, r2
    dc8c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    dc8e:	68fb      	ldr	r3, [r7, #12]
    dc90:	68ba      	ldr	r2, [r7, #8]
    dc92:	611a      	str	r2, [r3, #16]
}
    dc94:	46c0      	nop			; (mov r8, r8)
    dc96:	46bd      	mov	sp, r7
    dc98:	b004      	add	sp, #16
    dc9a:	bd80      	pop	{r7, pc}
    dc9c:	0000dbd5 	.word	0x0000dbd5

0000dca0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    dca0:	b580      	push	{r7, lr}
    dca2:	b082      	sub	sp, #8
    dca4:	af00      	add	r7, sp, #0
    dca6:	6078      	str	r0, [r7, #4]
    dca8:	0008      	movs	r0, r1
    dcaa:	0011      	movs	r1, r2
    dcac:	1cfb      	adds	r3, r7, #3
    dcae:	1c02      	adds	r2, r0, #0
    dcb0:	701a      	strb	r2, [r3, #0]
    dcb2:	1cbb      	adds	r3, r7, #2
    dcb4:	1c0a      	adds	r2, r1, #0
    dcb6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    dcb8:	1cbb      	adds	r3, r7, #2
    dcba:	781b      	ldrb	r3, [r3, #0]
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	d001      	beq.n	dcc4 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    dcc0:	2317      	movs	r3, #23
    dcc2:	e019      	b.n	dcf8 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    dcc4:	1cfb      	adds	r3, r7, #3
    dcc6:	781a      	ldrb	r2, [r3, #0]
    dcc8:	4b0d      	ldr	r3, [pc, #52]	; (dd00 <extint_register_callback+0x60>)
    dcca:	0092      	lsls	r2, r2, #2
    dccc:	58d3      	ldr	r3, [r2, r3]
    dcce:	2b00      	cmp	r3, #0
    dcd0:	d107      	bne.n	dce2 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    dcd2:	1cfb      	adds	r3, r7, #3
    dcd4:	781a      	ldrb	r2, [r3, #0]
    dcd6:	4b0a      	ldr	r3, [pc, #40]	; (dd00 <extint_register_callback+0x60>)
    dcd8:	0092      	lsls	r2, r2, #2
    dcda:	6879      	ldr	r1, [r7, #4]
    dcdc:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    dcde:	2300      	movs	r3, #0
    dce0:	e00a      	b.n	dcf8 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    dce2:	1cfb      	adds	r3, r7, #3
    dce4:	781a      	ldrb	r2, [r3, #0]
    dce6:	4b06      	ldr	r3, [pc, #24]	; (dd00 <extint_register_callback+0x60>)
    dce8:	0092      	lsls	r2, r2, #2
    dcea:	58d2      	ldr	r2, [r2, r3]
    dcec:	687b      	ldr	r3, [r7, #4]
    dcee:	429a      	cmp	r2, r3
    dcf0:	d101      	bne.n	dcf6 <extint_register_callback+0x56>
		return STATUS_OK;
    dcf2:	2300      	movs	r3, #0
    dcf4:	e000      	b.n	dcf8 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    dcf6:	231d      	movs	r3, #29
}
    dcf8:	0018      	movs	r0, r3
    dcfa:	46bd      	mov	sp, r7
    dcfc:	b002      	add	sp, #8
    dcfe:	bd80      	pop	{r7, pc}
    dd00:	200003cc 	.word	0x200003cc

0000dd04 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    dd04:	b580      	push	{r7, lr}
    dd06:	b084      	sub	sp, #16
    dd08:	af00      	add	r7, sp, #0
    dd0a:	0002      	movs	r2, r0
    dd0c:	1dfb      	adds	r3, r7, #7
    dd0e:	701a      	strb	r2, [r3, #0]
    dd10:	1dbb      	adds	r3, r7, #6
    dd12:	1c0a      	adds	r2, r1, #0
    dd14:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    dd16:	1dbb      	adds	r3, r7, #6
    dd18:	781b      	ldrb	r3, [r3, #0]
    dd1a:	2b00      	cmp	r3, #0
    dd1c:	d10e      	bne.n	dd3c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    dd1e:	1dfb      	adds	r3, r7, #7
    dd20:	781b      	ldrb	r3, [r3, #0]
    dd22:	0018      	movs	r0, r3
    dd24:	4b08      	ldr	r3, [pc, #32]	; (dd48 <extint_chan_enable_callback+0x44>)
    dd26:	4798      	blx	r3
    dd28:	0003      	movs	r3, r0
    dd2a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    dd2c:	1dfb      	adds	r3, r7, #7
    dd2e:	781b      	ldrb	r3, [r3, #0]
    dd30:	2201      	movs	r2, #1
    dd32:	409a      	lsls	r2, r3
    dd34:	68fb      	ldr	r3, [r7, #12]
    dd36:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    dd38:	2300      	movs	r3, #0
    dd3a:	e000      	b.n	dd3e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    dd3c:	2317      	movs	r3, #23
}
    dd3e:	0018      	movs	r0, r3
    dd40:	46bd      	mov	sp, r7
    dd42:	b004      	add	sp, #16
    dd44:	bd80      	pop	{r7, pc}
    dd46:	46c0      	nop			; (mov r8, r8)
    dd48:	0000dbd5 	.word	0x0000dbd5

0000dd4c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    dd4c:	b580      	push	{r7, lr}
    dd4e:	b084      	sub	sp, #16
    dd50:	af00      	add	r7, sp, #0
    dd52:	0002      	movs	r2, r0
    dd54:	1dfb      	adds	r3, r7, #7
    dd56:	701a      	strb	r2, [r3, #0]
    dd58:	1dbb      	adds	r3, r7, #6
    dd5a:	1c0a      	adds	r2, r1, #0
    dd5c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    dd5e:	1dbb      	adds	r3, r7, #6
    dd60:	781b      	ldrb	r3, [r3, #0]
    dd62:	2b00      	cmp	r3, #0
    dd64:	d10e      	bne.n	dd84 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    dd66:	1dfb      	adds	r3, r7, #7
    dd68:	781b      	ldrb	r3, [r3, #0]
    dd6a:	0018      	movs	r0, r3
    dd6c:	4b08      	ldr	r3, [pc, #32]	; (dd90 <extint_chan_disable_callback+0x44>)
    dd6e:	4798      	blx	r3
    dd70:	0003      	movs	r3, r0
    dd72:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    dd74:	1dfb      	adds	r3, r7, #7
    dd76:	781b      	ldrb	r3, [r3, #0]
    dd78:	2201      	movs	r2, #1
    dd7a:	409a      	lsls	r2, r3
    dd7c:	68fb      	ldr	r3, [r7, #12]
    dd7e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    dd80:	2300      	movs	r3, #0
    dd82:	e000      	b.n	dd86 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    dd84:	2317      	movs	r3, #23
}
    dd86:	0018      	movs	r0, r3
    dd88:	46bd      	mov	sp, r7
    dd8a:	b004      	add	sp, #16
    dd8c:	bd80      	pop	{r7, pc}
    dd8e:	46c0      	nop			; (mov r8, r8)
    dd90:	0000dbd5 	.word	0x0000dbd5

0000dd94 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    dd94:	b580      	push	{r7, lr}
    dd96:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    dd98:	4b15      	ldr	r3, [pc, #84]	; (ddf0 <EIC_Handler+0x5c>)
    dd9a:	2200      	movs	r2, #0
    dd9c:	701a      	strb	r2, [r3, #0]
    dd9e:	e020      	b.n	dde2 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    dda0:	4b13      	ldr	r3, [pc, #76]	; (ddf0 <EIC_Handler+0x5c>)
    dda2:	781b      	ldrb	r3, [r3, #0]
    dda4:	0018      	movs	r0, r3
    dda6:	4b13      	ldr	r3, [pc, #76]	; (ddf4 <EIC_Handler+0x60>)
    dda8:	4798      	blx	r3
    ddaa:	1e03      	subs	r3, r0, #0
    ddac:	d013      	beq.n	ddd6 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    ddae:	4b10      	ldr	r3, [pc, #64]	; (ddf0 <EIC_Handler+0x5c>)
    ddb0:	781b      	ldrb	r3, [r3, #0]
    ddb2:	0018      	movs	r0, r3
    ddb4:	4b10      	ldr	r3, [pc, #64]	; (ddf8 <EIC_Handler+0x64>)
    ddb6:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    ddb8:	4b0d      	ldr	r3, [pc, #52]	; (ddf0 <EIC_Handler+0x5c>)
    ddba:	781b      	ldrb	r3, [r3, #0]
    ddbc:	001a      	movs	r2, r3
    ddbe:	4b0f      	ldr	r3, [pc, #60]	; (ddfc <EIC_Handler+0x68>)
    ddc0:	0092      	lsls	r2, r2, #2
    ddc2:	58d3      	ldr	r3, [r2, r3]
    ddc4:	2b00      	cmp	r3, #0
    ddc6:	d006      	beq.n	ddd6 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    ddc8:	4b09      	ldr	r3, [pc, #36]	; (ddf0 <EIC_Handler+0x5c>)
    ddca:	781b      	ldrb	r3, [r3, #0]
    ddcc:	001a      	movs	r2, r3
    ddce:	4b0b      	ldr	r3, [pc, #44]	; (ddfc <EIC_Handler+0x68>)
    ddd0:	0092      	lsls	r2, r2, #2
    ddd2:	58d3      	ldr	r3, [r2, r3]
    ddd4:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    ddd6:	4b06      	ldr	r3, [pc, #24]	; (ddf0 <EIC_Handler+0x5c>)
    ddd8:	781b      	ldrb	r3, [r3, #0]
    ddda:	3301      	adds	r3, #1
    dddc:	b2da      	uxtb	r2, r3
    ddde:	4b04      	ldr	r3, [pc, #16]	; (ddf0 <EIC_Handler+0x5c>)
    dde0:	701a      	strb	r2, [r3, #0]
    dde2:	4b03      	ldr	r3, [pc, #12]	; (ddf0 <EIC_Handler+0x5c>)
    dde4:	781b      	ldrb	r3, [r3, #0]
    dde6:	2b0f      	cmp	r3, #15
    dde8:	d9da      	bls.n	dda0 <EIC_Handler+0xc>
			}
		}
	}
}
    ddea:	46c0      	nop			; (mov r8, r8)
    ddec:	46bd      	mov	sp, r7
    ddee:	bd80      	pop	{r7, pc}
    ddf0:	200003c8 	.word	0x200003c8
    ddf4:	0000dc21 	.word	0x0000dc21
    ddf8:	0000dc65 	.word	0x0000dc65
    ddfc:	200003cc 	.word	0x200003cc

0000de00 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    de00:	b580      	push	{r7, lr}
    de02:	b082      	sub	sp, #8
    de04:	af00      	add	r7, sp, #0
    de06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    de08:	687b      	ldr	r3, [r7, #4]
    de0a:	2200      	movs	r2, #0
    de0c:	701a      	strb	r2, [r3, #0]
}
    de0e:	46c0      	nop			; (mov r8, r8)
    de10:	46bd      	mov	sp, r7
    de12:	b002      	add	sp, #8
    de14:	bd80      	pop	{r7, pc}
	...

0000de18 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    de18:	b580      	push	{r7, lr}
    de1a:	b082      	sub	sp, #8
    de1c:	af00      	add	r7, sp, #0
    de1e:	0002      	movs	r2, r0
    de20:	6039      	str	r1, [r7, #0]
    de22:	1dfb      	adds	r3, r7, #7
    de24:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    de26:	1dfb      	adds	r3, r7, #7
    de28:	781b      	ldrb	r3, [r3, #0]
    de2a:	2b01      	cmp	r3, #1
    de2c:	d00a      	beq.n	de44 <system_apb_clock_set_mask+0x2c>
    de2e:	2b02      	cmp	r3, #2
    de30:	d00f      	beq.n	de52 <system_apb_clock_set_mask+0x3a>
    de32:	2b00      	cmp	r3, #0
    de34:	d114      	bne.n	de60 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    de36:	4b0e      	ldr	r3, [pc, #56]	; (de70 <system_apb_clock_set_mask+0x58>)
    de38:	4a0d      	ldr	r2, [pc, #52]	; (de70 <system_apb_clock_set_mask+0x58>)
    de3a:	6991      	ldr	r1, [r2, #24]
    de3c:	683a      	ldr	r2, [r7, #0]
    de3e:	430a      	orrs	r2, r1
    de40:	619a      	str	r2, [r3, #24]
			break;
    de42:	e00f      	b.n	de64 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    de44:	4b0a      	ldr	r3, [pc, #40]	; (de70 <system_apb_clock_set_mask+0x58>)
    de46:	4a0a      	ldr	r2, [pc, #40]	; (de70 <system_apb_clock_set_mask+0x58>)
    de48:	69d1      	ldr	r1, [r2, #28]
    de4a:	683a      	ldr	r2, [r7, #0]
    de4c:	430a      	orrs	r2, r1
    de4e:	61da      	str	r2, [r3, #28]
			break;
    de50:	e008      	b.n	de64 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    de52:	4b07      	ldr	r3, [pc, #28]	; (de70 <system_apb_clock_set_mask+0x58>)
    de54:	4a06      	ldr	r2, [pc, #24]	; (de70 <system_apb_clock_set_mask+0x58>)
    de56:	6a11      	ldr	r1, [r2, #32]
    de58:	683a      	ldr	r2, [r7, #0]
    de5a:	430a      	orrs	r2, r1
    de5c:	621a      	str	r2, [r3, #32]
			break;
    de5e:	e001      	b.n	de64 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    de60:	2317      	movs	r3, #23
    de62:	e000      	b.n	de66 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    de64:	2300      	movs	r3, #0
}
    de66:	0018      	movs	r0, r3
    de68:	46bd      	mov	sp, r7
    de6a:	b002      	add	sp, #8
    de6c:	bd80      	pop	{r7, pc}
    de6e:	46c0      	nop			; (mov r8, r8)
    de70:	40000400 	.word	0x40000400

0000de74 <system_pinmux_get_config_defaults>:
{
    de74:	b580      	push	{r7, lr}
    de76:	b082      	sub	sp, #8
    de78:	af00      	add	r7, sp, #0
    de7a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    de7c:	687b      	ldr	r3, [r7, #4]
    de7e:	2280      	movs	r2, #128	; 0x80
    de80:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    de82:	687b      	ldr	r3, [r7, #4]
    de84:	2200      	movs	r2, #0
    de86:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    de88:	687b      	ldr	r3, [r7, #4]
    de8a:	2201      	movs	r2, #1
    de8c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    de8e:	687b      	ldr	r3, [r7, #4]
    de90:	2200      	movs	r2, #0
    de92:	70da      	strb	r2, [r3, #3]
}
    de94:	46c0      	nop			; (mov r8, r8)
    de96:	46bd      	mov	sp, r7
    de98:	b002      	add	sp, #8
    de9a:	bd80      	pop	{r7, pc}

0000de9c <system_interrupt_enable>:
{
    de9c:	b580      	push	{r7, lr}
    de9e:	b082      	sub	sp, #8
    dea0:	af00      	add	r7, sp, #0
    dea2:	0002      	movs	r2, r0
    dea4:	1dfb      	adds	r3, r7, #7
    dea6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    dea8:	4b06      	ldr	r3, [pc, #24]	; (dec4 <system_interrupt_enable+0x28>)
    deaa:	1dfa      	adds	r2, r7, #7
    deac:	7812      	ldrb	r2, [r2, #0]
    deae:	0011      	movs	r1, r2
    deb0:	221f      	movs	r2, #31
    deb2:	400a      	ands	r2, r1
    deb4:	2101      	movs	r1, #1
    deb6:	4091      	lsls	r1, r2
    deb8:	000a      	movs	r2, r1
    deba:	601a      	str	r2, [r3, #0]
}
    debc:	46c0      	nop			; (mov r8, r8)
    debe:	46bd      	mov	sp, r7
    dec0:	b002      	add	sp, #8
    dec2:	bd80      	pop	{r7, pc}
    dec4:	e000e100 	.word	0xe000e100

0000dec8 <_extint_get_eic_from_channel>:
{
    dec8:	b580      	push	{r7, lr}
    deca:	b084      	sub	sp, #16
    decc:	af00      	add	r7, sp, #0
    dece:	0002      	movs	r2, r0
    ded0:	1dfb      	adds	r3, r7, #7
    ded2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    ded4:	230f      	movs	r3, #15
    ded6:	18fb      	adds	r3, r7, r3
    ded8:	1dfa      	adds	r2, r7, #7
    deda:	7812      	ldrb	r2, [r2, #0]
    dedc:	0952      	lsrs	r2, r2, #5
    dede:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    dee0:	230f      	movs	r3, #15
    dee2:	18fb      	adds	r3, r7, r3
    dee4:	781b      	ldrb	r3, [r3, #0]
    dee6:	2b00      	cmp	r3, #0
    dee8:	d10c      	bne.n	df04 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    deea:	4b09      	ldr	r3, [pc, #36]	; (df10 <_extint_get_eic_from_channel+0x48>)
    deec:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    deee:	230f      	movs	r3, #15
    def0:	18fb      	adds	r3, r7, r3
    def2:	781b      	ldrb	r3, [r3, #0]
    def4:	009b      	lsls	r3, r3, #2
    def6:	2210      	movs	r2, #16
    def8:	4694      	mov	ip, r2
    defa:	44bc      	add	ip, r7
    defc:	4463      	add	r3, ip
    defe:	3b08      	subs	r3, #8
    df00:	681b      	ldr	r3, [r3, #0]
    df02:	e000      	b.n	df06 <_extint_get_eic_from_channel+0x3e>
		return NULL;
    df04:	2300      	movs	r3, #0
}
    df06:	0018      	movs	r0, r3
    df08:	46bd      	mov	sp, r7
    df0a:	b004      	add	sp, #16
    df0c:	bd80      	pop	{r7, pc}
    df0e:	46c0      	nop			; (mov r8, r8)
    df10:	40001800 	.word	0x40001800

0000df14 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    df14:	b580      	push	{r7, lr}
    df16:	b082      	sub	sp, #8
    df18:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    df1a:	4b0f      	ldr	r3, [pc, #60]	; (df58 <extint_is_syncing+0x44>)
    df1c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    df1e:	2300      	movs	r3, #0
    df20:	607b      	str	r3, [r7, #4]
    df22:	e011      	b.n	df48 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    df24:	687b      	ldr	r3, [r7, #4]
    df26:	009b      	lsls	r3, r3, #2
    df28:	2208      	movs	r2, #8
    df2a:	4694      	mov	ip, r2
    df2c:	44bc      	add	ip, r7
    df2e:	4463      	add	r3, ip
    df30:	3b08      	subs	r3, #8
    df32:	681b      	ldr	r3, [r3, #0]
    df34:	785b      	ldrb	r3, [r3, #1]
    df36:	b2db      	uxtb	r3, r3
    df38:	b25b      	sxtb	r3, r3
    df3a:	2b00      	cmp	r3, #0
    df3c:	da01      	bge.n	df42 <extint_is_syncing+0x2e>
			return true;
    df3e:	2301      	movs	r3, #1
    df40:	e006      	b.n	df50 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    df42:	687b      	ldr	r3, [r7, #4]
    df44:	3301      	adds	r3, #1
    df46:	607b      	str	r3, [r7, #4]
    df48:	687b      	ldr	r3, [r7, #4]
    df4a:	2b00      	cmp	r3, #0
    df4c:	d0ea      	beq.n	df24 <extint_is_syncing+0x10>
		}
	}
	return false;
    df4e:	2300      	movs	r3, #0
}
    df50:	0018      	movs	r0, r3
    df52:	46bd      	mov	sp, r7
    df54:	b002      	add	sp, #8
    df56:	bd80      	pop	{r7, pc}
    df58:	40001800 	.word	0x40001800

0000df5c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    df5c:	b580      	push	{r7, lr}
    df5e:	b084      	sub	sp, #16
    df60:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    df62:	4b2d      	ldr	r3, [pc, #180]	; (e018 <_system_extint_init+0xbc>)
    df64:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    df66:	2140      	movs	r1, #64	; 0x40
    df68:	2000      	movs	r0, #0
    df6a:	4b2c      	ldr	r3, [pc, #176]	; (e01c <_system_extint_init+0xc0>)
    df6c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    df6e:	003b      	movs	r3, r7
    df70:	0018      	movs	r0, r3
    df72:	4b2b      	ldr	r3, [pc, #172]	; (e020 <_system_extint_init+0xc4>)
    df74:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    df76:	003b      	movs	r3, r7
    df78:	2200      	movs	r2, #0
    df7a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    df7c:	003b      	movs	r3, r7
    df7e:	0019      	movs	r1, r3
    df80:	2005      	movs	r0, #5
    df82:	4b28      	ldr	r3, [pc, #160]	; (e024 <_system_extint_init+0xc8>)
    df84:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    df86:	2005      	movs	r0, #5
    df88:	4b27      	ldr	r3, [pc, #156]	; (e028 <_system_extint_init+0xcc>)
    df8a:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    df8c:	2300      	movs	r3, #0
    df8e:	60fb      	str	r3, [r7, #12]
    df90:	e018      	b.n	dfc4 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    df92:	68fb      	ldr	r3, [r7, #12]
    df94:	009b      	lsls	r3, r3, #2
    df96:	2210      	movs	r2, #16
    df98:	4694      	mov	ip, r2
    df9a:	44bc      	add	ip, r7
    df9c:	4463      	add	r3, ip
    df9e:	3b0c      	subs	r3, #12
    dfa0:	681a      	ldr	r2, [r3, #0]
    dfa2:	68fb      	ldr	r3, [r7, #12]
    dfa4:	009b      	lsls	r3, r3, #2
    dfa6:	2110      	movs	r1, #16
    dfa8:	468c      	mov	ip, r1
    dfaa:	44bc      	add	ip, r7
    dfac:	4463      	add	r3, ip
    dfae:	3b0c      	subs	r3, #12
    dfb0:	681b      	ldr	r3, [r3, #0]
    dfb2:	781b      	ldrb	r3, [r3, #0]
    dfb4:	b2db      	uxtb	r3, r3
    dfb6:	2101      	movs	r1, #1
    dfb8:	430b      	orrs	r3, r1
    dfba:	b2db      	uxtb	r3, r3
    dfbc:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    dfbe:	68fb      	ldr	r3, [r7, #12]
    dfc0:	3301      	adds	r3, #1
    dfc2:	60fb      	str	r3, [r7, #12]
    dfc4:	68fb      	ldr	r3, [r7, #12]
    dfc6:	2b00      	cmp	r3, #0
    dfc8:	d0e3      	beq.n	df92 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    dfca:	46c0      	nop			; (mov r8, r8)
    dfcc:	4b17      	ldr	r3, [pc, #92]	; (e02c <_system_extint_init+0xd0>)
    dfce:	4798      	blx	r3
    dfd0:	1e03      	subs	r3, r0, #0
    dfd2:	d1fb      	bne.n	dfcc <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    dfd4:	230b      	movs	r3, #11
    dfd6:	18fb      	adds	r3, r7, r3
    dfd8:	2200      	movs	r2, #0
    dfda:	701a      	strb	r2, [r3, #0]
    dfdc:	e00d      	b.n	dffa <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    dfde:	230b      	movs	r3, #11
    dfe0:	18fb      	adds	r3, r7, r3
    dfe2:	781a      	ldrb	r2, [r3, #0]
    dfe4:	4b12      	ldr	r3, [pc, #72]	; (e030 <_system_extint_init+0xd4>)
    dfe6:	0092      	lsls	r2, r2, #2
    dfe8:	2100      	movs	r1, #0
    dfea:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    dfec:	230b      	movs	r3, #11
    dfee:	18fb      	adds	r3, r7, r3
    dff0:	781a      	ldrb	r2, [r3, #0]
    dff2:	230b      	movs	r3, #11
    dff4:	18fb      	adds	r3, r7, r3
    dff6:	3201      	adds	r2, #1
    dff8:	701a      	strb	r2, [r3, #0]
    dffa:	230b      	movs	r3, #11
    dffc:	18fb      	adds	r3, r7, r3
    dffe:	781b      	ldrb	r3, [r3, #0]
    e000:	2b0f      	cmp	r3, #15
    e002:	d9ec      	bls.n	dfde <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    e004:	2004      	movs	r0, #4
    e006:	4b0b      	ldr	r3, [pc, #44]	; (e034 <_system_extint_init+0xd8>)
    e008:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    e00a:	4b0b      	ldr	r3, [pc, #44]	; (e038 <_system_extint_init+0xdc>)
    e00c:	4798      	blx	r3
}
    e00e:	46c0      	nop			; (mov r8, r8)
    e010:	46bd      	mov	sp, r7
    e012:	b004      	add	sp, #16
    e014:	bd80      	pop	{r7, pc}
    e016:	46c0      	nop			; (mov r8, r8)
    e018:	40001800 	.word	0x40001800
    e01c:	0000de19 	.word	0x0000de19
    e020:	0000de01 	.word	0x0000de01
    e024:	00015055 	.word	0x00015055
    e028:	00015099 	.word	0x00015099
    e02c:	0000df15 	.word	0x0000df15
    e030:	200003cc 	.word	0x200003cc
    e034:	0000de9d 	.word	0x0000de9d
    e038:	0000e03d 	.word	0x0000e03d

0000e03c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    e03c:	b580      	push	{r7, lr}
    e03e:	b082      	sub	sp, #8
    e040:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    e042:	4b15      	ldr	r3, [pc, #84]	; (e098 <_extint_enable+0x5c>)
    e044:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    e046:	2300      	movs	r3, #0
    e048:	607b      	str	r3, [r7, #4]
    e04a:	e018      	b.n	e07e <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    e04c:	687b      	ldr	r3, [r7, #4]
    e04e:	009b      	lsls	r3, r3, #2
    e050:	2208      	movs	r2, #8
    e052:	4694      	mov	ip, r2
    e054:	44bc      	add	ip, r7
    e056:	4463      	add	r3, ip
    e058:	3b08      	subs	r3, #8
    e05a:	681a      	ldr	r2, [r3, #0]
    e05c:	687b      	ldr	r3, [r7, #4]
    e05e:	009b      	lsls	r3, r3, #2
    e060:	2108      	movs	r1, #8
    e062:	468c      	mov	ip, r1
    e064:	44bc      	add	ip, r7
    e066:	4463      	add	r3, ip
    e068:	3b08      	subs	r3, #8
    e06a:	681b      	ldr	r3, [r3, #0]
    e06c:	781b      	ldrb	r3, [r3, #0]
    e06e:	b2db      	uxtb	r3, r3
    e070:	2102      	movs	r1, #2
    e072:	430b      	orrs	r3, r1
    e074:	b2db      	uxtb	r3, r3
    e076:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    e078:	687b      	ldr	r3, [r7, #4]
    e07a:	3301      	adds	r3, #1
    e07c:	607b      	str	r3, [r7, #4]
    e07e:	687b      	ldr	r3, [r7, #4]
    e080:	2b00      	cmp	r3, #0
    e082:	d0e3      	beq.n	e04c <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    e084:	46c0      	nop			; (mov r8, r8)
    e086:	4b05      	ldr	r3, [pc, #20]	; (e09c <_extint_enable+0x60>)
    e088:	4798      	blx	r3
    e08a:	1e03      	subs	r3, r0, #0
    e08c:	d1fb      	bne.n	e086 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    e08e:	46c0      	nop			; (mov r8, r8)
    e090:	46bd      	mov	sp, r7
    e092:	b002      	add	sp, #8
    e094:	bd80      	pop	{r7, pc}
    e096:	46c0      	nop			; (mov r8, r8)
    e098:	40001800 	.word	0x40001800
    e09c:	0000df15 	.word	0x0000df15

0000e0a0 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    e0a0:	b580      	push	{r7, lr}
    e0a2:	b082      	sub	sp, #8
    e0a4:	af00      	add	r7, sp, #0
    e0a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    e0a8:	687b      	ldr	r3, [r7, #4]
    e0aa:	2200      	movs	r2, #0
    e0ac:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    e0ae:	687b      	ldr	r3, [r7, #4]
    e0b0:	2200      	movs	r2, #0
    e0b2:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    e0b4:	687b      	ldr	r3, [r7, #4]
    e0b6:	2201      	movs	r2, #1
    e0b8:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    e0ba:	687b      	ldr	r3, [r7, #4]
    e0bc:	2201      	movs	r2, #1
    e0be:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    e0c0:	687b      	ldr	r3, [r7, #4]
    e0c2:	2200      	movs	r2, #0
    e0c4:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    e0c6:	687b      	ldr	r3, [r7, #4]
    e0c8:	2202      	movs	r2, #2
    e0ca:	72da      	strb	r2, [r3, #11]
}
    e0cc:	46c0      	nop			; (mov r8, r8)
    e0ce:	46bd      	mov	sp, r7
    e0d0:	b002      	add	sp, #8
    e0d2:	bd80      	pop	{r7, pc}

0000e0d4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    e0d4:	b580      	push	{r7, lr}
    e0d6:	b086      	sub	sp, #24
    e0d8:	af00      	add	r7, sp, #0
    e0da:	0002      	movs	r2, r0
    e0dc:	6039      	str	r1, [r7, #0]
    e0de:	1dfb      	adds	r3, r7, #7
    e0e0:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    e0e2:	2308      	movs	r3, #8
    e0e4:	18fb      	adds	r3, r7, r3
    e0e6:	0018      	movs	r0, r3
    e0e8:	4b36      	ldr	r3, [pc, #216]	; (e1c4 <extint_chan_set_config+0xf0>)
    e0ea:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    e0ec:	683b      	ldr	r3, [r7, #0]
    e0ee:	685b      	ldr	r3, [r3, #4]
    e0f0:	b2da      	uxtb	r2, r3
    e0f2:	2308      	movs	r3, #8
    e0f4:	18fb      	adds	r3, r7, r3
    e0f6:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    e0f8:	2308      	movs	r3, #8
    e0fa:	18fb      	adds	r3, r7, r3
    e0fc:	2200      	movs	r2, #0
    e0fe:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    e100:	683b      	ldr	r3, [r7, #0]
    e102:	7a1a      	ldrb	r2, [r3, #8]
    e104:	2308      	movs	r3, #8
    e106:	18fb      	adds	r3, r7, r3
    e108:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    e10a:	683b      	ldr	r3, [r7, #0]
    e10c:	681b      	ldr	r3, [r3, #0]
    e10e:	b2db      	uxtb	r3, r3
    e110:	2208      	movs	r2, #8
    e112:	18ba      	adds	r2, r7, r2
    e114:	0011      	movs	r1, r2
    e116:	0018      	movs	r0, r3
    e118:	4b2b      	ldr	r3, [pc, #172]	; (e1c8 <extint_chan_set_config+0xf4>)
    e11a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    e11c:	1dfb      	adds	r3, r7, #7
    e11e:	781b      	ldrb	r3, [r3, #0]
    e120:	0018      	movs	r0, r3
    e122:	4b2a      	ldr	r3, [pc, #168]	; (e1cc <extint_chan_set_config+0xf8>)
    e124:	4798      	blx	r3
    e126:	0003      	movs	r3, r0
    e128:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    e12a:	1dfb      	adds	r3, r7, #7
    e12c:	781b      	ldrb	r3, [r3, #0]
    e12e:	2207      	movs	r2, #7
    e130:	4013      	ands	r3, r2
    e132:	009b      	lsls	r3, r3, #2
    e134:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    e136:	683b      	ldr	r3, [r7, #0]
    e138:	7adb      	ldrb	r3, [r3, #11]
    e13a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    e13c:	683b      	ldr	r3, [r7, #0]
    e13e:	7a9b      	ldrb	r3, [r3, #10]
    e140:	2b00      	cmp	r3, #0
    e142:	d003      	beq.n	e14c <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    e144:	697b      	ldr	r3, [r7, #20]
    e146:	2208      	movs	r2, #8
    e148:	4313      	orrs	r3, r2
    e14a:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    e14c:	1dfb      	adds	r3, r7, #7
    e14e:	781b      	ldrb	r3, [r3, #0]
    e150:	08db      	lsrs	r3, r3, #3
    e152:	b2db      	uxtb	r3, r3
    e154:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    e156:	1dfb      	adds	r3, r7, #7
    e158:	781b      	ldrb	r3, [r3, #0]
    e15a:	08db      	lsrs	r3, r3, #3
    e15c:	b2db      	uxtb	r3, r3
    e15e:	001a      	movs	r2, r3
    e160:	693b      	ldr	r3, [r7, #16]
    e162:	3206      	adds	r2, #6
    e164:	0092      	lsls	r2, r2, #2
    e166:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    e168:	210f      	movs	r1, #15
    e16a:	68fa      	ldr	r2, [r7, #12]
    e16c:	4091      	lsls	r1, r2
    e16e:	000a      	movs	r2, r1
    e170:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    e172:	401a      	ands	r2, r3
			(new_config << config_pos);
    e174:	6979      	ldr	r1, [r7, #20]
    e176:	68fb      	ldr	r3, [r7, #12]
    e178:	4099      	lsls	r1, r3
    e17a:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    e17c:	431a      	orrs	r2, r3
    e17e:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    e180:	693b      	ldr	r3, [r7, #16]
    e182:	1d82      	adds	r2, r0, #6
    e184:	0092      	lsls	r2, r2, #2
    e186:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    e188:	683b      	ldr	r3, [r7, #0]
    e18a:	7a5b      	ldrb	r3, [r3, #9]
    e18c:	2b00      	cmp	r3, #0
    e18e:	d00a      	beq.n	e1a6 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    e190:	693b      	ldr	r3, [r7, #16]
    e192:	695a      	ldr	r2, [r3, #20]
    e194:	1dfb      	adds	r3, r7, #7
    e196:	781b      	ldrb	r3, [r3, #0]
    e198:	2101      	movs	r1, #1
    e19a:	4099      	lsls	r1, r3
    e19c:	000b      	movs	r3, r1
    e19e:	431a      	orrs	r2, r3
    e1a0:	693b      	ldr	r3, [r7, #16]
    e1a2:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    e1a4:	e00a      	b.n	e1bc <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    e1a6:	693b      	ldr	r3, [r7, #16]
    e1a8:	695b      	ldr	r3, [r3, #20]
    e1aa:	1dfa      	adds	r2, r7, #7
    e1ac:	7812      	ldrb	r2, [r2, #0]
    e1ae:	2101      	movs	r1, #1
    e1b0:	4091      	lsls	r1, r2
    e1b2:	000a      	movs	r2, r1
    e1b4:	43d2      	mvns	r2, r2
    e1b6:	401a      	ands	r2, r3
    e1b8:	693b      	ldr	r3, [r7, #16]
    e1ba:	615a      	str	r2, [r3, #20]
}
    e1bc:	46c0      	nop			; (mov r8, r8)
    e1be:	46bd      	mov	sp, r7
    e1c0:	b006      	add	sp, #24
    e1c2:	bd80      	pop	{r7, pc}
    e1c4:	0000de75 	.word	0x0000de75
    e1c8:	00015341 	.word	0x00015341
    e1cc:	0000dec9 	.word	0x0000dec9

0000e1d0 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    e1d0:	b580      	push	{r7, lr}
    e1d2:	b086      	sub	sp, #24
    e1d4:	af00      	add	r7, sp, #0
    e1d6:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    e1d8:	4b28      	ldr	r3, [pc, #160]	; (e27c <_rtc_interrupt_handler+0xac>)
    e1da:	687a      	ldr	r2, [r7, #4]
    e1dc:	0092      	lsls	r2, r2, #2
    e1de:	58d3      	ldr	r3, [r2, r3]
    e1e0:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    e1e2:	697b      	ldr	r3, [r7, #20]
    e1e4:	681b      	ldr	r3, [r3, #0]
    e1e6:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    e1e8:	230e      	movs	r3, #14
    e1ea:	18fb      	adds	r3, r7, r3
    e1ec:	697a      	ldr	r2, [r7, #20]
    e1ee:	8a52      	ldrh	r2, [r2, #18]
    e1f0:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    e1f2:	697b      	ldr	r3, [r7, #20]
    e1f4:	8a1b      	ldrh	r3, [r3, #16]
    e1f6:	b29a      	uxth	r2, r3
    e1f8:	230e      	movs	r3, #14
    e1fa:	18fb      	adds	r3, r7, r3
    e1fc:	210e      	movs	r1, #14
    e1fe:	1879      	adds	r1, r7, r1
    e200:	8809      	ldrh	r1, [r1, #0]
    e202:	400a      	ands	r2, r1
    e204:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    e206:	693b      	ldr	r3, [r7, #16]
    e208:	7a1b      	ldrb	r3, [r3, #8]
    e20a:	b2da      	uxtb	r2, r3
    e20c:	230c      	movs	r3, #12
    e20e:	18fb      	adds	r3, r7, r3
    e210:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    e212:	693b      	ldr	r3, [r7, #16]
    e214:	79db      	ldrb	r3, [r3, #7]
    e216:	b2db      	uxtb	r3, r3
    e218:	b29a      	uxth	r2, r3
    e21a:	230c      	movs	r3, #12
    e21c:	18fb      	adds	r3, r7, r3
    e21e:	210c      	movs	r1, #12
    e220:	1879      	adds	r1, r7, r1
    e222:	8809      	ldrh	r1, [r1, #0]
    e224:	400a      	ands	r2, r1
    e226:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    e228:	230c      	movs	r3, #12
    e22a:	18fb      	adds	r3, r7, r3
    e22c:	881b      	ldrh	r3, [r3, #0]
    e22e:	2280      	movs	r2, #128	; 0x80
    e230:	4013      	ands	r3, r2
    e232:	d00c      	beq.n	e24e <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    e234:	230e      	movs	r3, #14
    e236:	18fb      	adds	r3, r7, r3
    e238:	881b      	ldrh	r3, [r3, #0]
    e23a:	2202      	movs	r2, #2
    e23c:	4013      	ands	r3, r2
    e23e:	d002      	beq.n	e246 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    e240:	697b      	ldr	r3, [r7, #20]
    e242:	68db      	ldr	r3, [r3, #12]
    e244:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    e246:	693b      	ldr	r3, [r7, #16]
    e248:	2280      	movs	r2, #128	; 0x80
    e24a:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    e24c:	e011      	b.n	e272 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    e24e:	230c      	movs	r3, #12
    e250:	18fb      	adds	r3, r7, r3
    e252:	881b      	ldrh	r3, [r3, #0]
    e254:	2201      	movs	r2, #1
    e256:	4013      	ands	r3, r2
    e258:	d00b      	beq.n	e272 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    e25a:	230e      	movs	r3, #14
    e25c:	18fb      	adds	r3, r7, r3
    e25e:	881b      	ldrh	r3, [r3, #0]
    e260:	2201      	movs	r2, #1
    e262:	4013      	ands	r3, r2
    e264:	d002      	beq.n	e26c <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    e266:	697b      	ldr	r3, [r7, #20]
    e268:	689b      	ldr	r3, [r3, #8]
    e26a:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    e26c:	693b      	ldr	r3, [r7, #16]
    e26e:	2201      	movs	r2, #1
    e270:	721a      	strb	r2, [r3, #8]
}
    e272:	46c0      	nop			; (mov r8, r8)
    e274:	46bd      	mov	sp, r7
    e276:	b006      	add	sp, #24
    e278:	bd80      	pop	{r7, pc}
    e27a:	46c0      	nop			; (mov r8, r8)
    e27c:	2000040c 	.word	0x2000040c

0000e280 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    e280:	b580      	push	{r7, lr}
    e282:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    e284:	2000      	movs	r0, #0
    e286:	4b02      	ldr	r3, [pc, #8]	; (e290 <RTC_Handler+0x10>)
    e288:	4798      	blx	r3
}
    e28a:	46c0      	nop			; (mov r8, r8)
    e28c:	46bd      	mov	sp, r7
    e28e:	bd80      	pop	{r7, pc}
    e290:	0000e1d1 	.word	0x0000e1d1

0000e294 <system_gclk_chan_get_config_defaults>:
{
    e294:	b580      	push	{r7, lr}
    e296:	b082      	sub	sp, #8
    e298:	af00      	add	r7, sp, #0
    e29a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    e29c:	687b      	ldr	r3, [r7, #4]
    e29e:	2200      	movs	r2, #0
    e2a0:	701a      	strb	r2, [r3, #0]
}
    e2a2:	46c0      	nop			; (mov r8, r8)
    e2a4:	46bd      	mov	sp, r7
    e2a6:	b002      	add	sp, #8
    e2a8:	bd80      	pop	{r7, pc}
	...

0000e2ac <system_apb_clock_set_mask>:
{
    e2ac:	b580      	push	{r7, lr}
    e2ae:	b082      	sub	sp, #8
    e2b0:	af00      	add	r7, sp, #0
    e2b2:	0002      	movs	r2, r0
    e2b4:	6039      	str	r1, [r7, #0]
    e2b6:	1dfb      	adds	r3, r7, #7
    e2b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    e2ba:	1dfb      	adds	r3, r7, #7
    e2bc:	781b      	ldrb	r3, [r3, #0]
    e2be:	2b01      	cmp	r3, #1
    e2c0:	d00a      	beq.n	e2d8 <system_apb_clock_set_mask+0x2c>
    e2c2:	2b02      	cmp	r3, #2
    e2c4:	d00f      	beq.n	e2e6 <system_apb_clock_set_mask+0x3a>
    e2c6:	2b00      	cmp	r3, #0
    e2c8:	d114      	bne.n	e2f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    e2ca:	4b0e      	ldr	r3, [pc, #56]	; (e304 <system_apb_clock_set_mask+0x58>)
    e2cc:	4a0d      	ldr	r2, [pc, #52]	; (e304 <system_apb_clock_set_mask+0x58>)
    e2ce:	6991      	ldr	r1, [r2, #24]
    e2d0:	683a      	ldr	r2, [r7, #0]
    e2d2:	430a      	orrs	r2, r1
    e2d4:	619a      	str	r2, [r3, #24]
			break;
    e2d6:	e00f      	b.n	e2f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    e2d8:	4b0a      	ldr	r3, [pc, #40]	; (e304 <system_apb_clock_set_mask+0x58>)
    e2da:	4a0a      	ldr	r2, [pc, #40]	; (e304 <system_apb_clock_set_mask+0x58>)
    e2dc:	69d1      	ldr	r1, [r2, #28]
    e2de:	683a      	ldr	r2, [r7, #0]
    e2e0:	430a      	orrs	r2, r1
    e2e2:	61da      	str	r2, [r3, #28]
			break;
    e2e4:	e008      	b.n	e2f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    e2e6:	4b07      	ldr	r3, [pc, #28]	; (e304 <system_apb_clock_set_mask+0x58>)
    e2e8:	4a06      	ldr	r2, [pc, #24]	; (e304 <system_apb_clock_set_mask+0x58>)
    e2ea:	6a11      	ldr	r1, [r2, #32]
    e2ec:	683a      	ldr	r2, [r7, #0]
    e2ee:	430a      	orrs	r2, r1
    e2f0:	621a      	str	r2, [r3, #32]
			break;
    e2f2:	e001      	b.n	e2f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    e2f4:	2317      	movs	r3, #23
    e2f6:	e000      	b.n	e2fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    e2f8:	2300      	movs	r3, #0
}
    e2fa:	0018      	movs	r0, r3
    e2fc:	46bd      	mov	sp, r7
    e2fe:	b002      	add	sp, #8
    e300:	bd80      	pop	{r7, pc}
    e302:	46c0      	nop			; (mov r8, r8)
    e304:	40000400 	.word	0x40000400

0000e308 <system_pinmux_get_config_defaults>:
{
    e308:	b580      	push	{r7, lr}
    e30a:	b082      	sub	sp, #8
    e30c:	af00      	add	r7, sp, #0
    e30e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    e310:	687b      	ldr	r3, [r7, #4]
    e312:	2280      	movs	r2, #128	; 0x80
    e314:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    e316:	687b      	ldr	r3, [r7, #4]
    e318:	2200      	movs	r2, #0
    e31a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    e31c:	687b      	ldr	r3, [r7, #4]
    e31e:	2201      	movs	r2, #1
    e320:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    e322:	687b      	ldr	r3, [r7, #4]
    e324:	2200      	movs	r2, #0
    e326:	70da      	strb	r2, [r3, #3]
}
    e328:	46c0      	nop			; (mov r8, r8)
    e32a:	46bd      	mov	sp, r7
    e32c:	b002      	add	sp, #8
    e32e:	bd80      	pop	{r7, pc}

0000e330 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    e330:	b580      	push	{r7, lr}
    e332:	b084      	sub	sp, #16
    e334:	af00      	add	r7, sp, #0
    e336:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    e338:	2300      	movs	r3, #0
    e33a:	60fb      	str	r3, [r7, #12]
    e33c:	e00c      	b.n	e358 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    e33e:	4b0a      	ldr	r3, [pc, #40]	; (e368 <_tcc_get_inst_index+0x38>)
    e340:	68fa      	ldr	r2, [r7, #12]
    e342:	0092      	lsls	r2, r2, #2
    e344:	58d2      	ldr	r2, [r2, r3]
    e346:	687b      	ldr	r3, [r7, #4]
    e348:	429a      	cmp	r2, r3
    e34a:	d102      	bne.n	e352 <_tcc_get_inst_index+0x22>
			return i;
    e34c:	68fb      	ldr	r3, [r7, #12]
    e34e:	b2db      	uxtb	r3, r3
    e350:	e006      	b.n	e360 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    e352:	68fb      	ldr	r3, [r7, #12]
    e354:	3301      	adds	r3, #1
    e356:	60fb      	str	r3, [r7, #12]
    e358:	68fb      	ldr	r3, [r7, #12]
    e35a:	2b02      	cmp	r3, #2
    e35c:	d9ef      	bls.n	e33e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    e35e:	2300      	movs	r3, #0
}
    e360:	0018      	movs	r0, r3
    e362:	46bd      	mov	sp, r7
    e364:	b004      	add	sp, #16
    e366:	bd80      	pop	{r7, pc}
    e368:	000193a8 	.word	0x000193a8

0000e36c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    e36c:	b590      	push	{r4, r7, lr}
    e36e:	b085      	sub	sp, #20
    e370:	af00      	add	r7, sp, #0
    e372:	6078      	str	r0, [r7, #4]
    e374:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    e376:	230f      	movs	r3, #15
    e378:	18fc      	adds	r4, r7, r3
    e37a:	683b      	ldr	r3, [r7, #0]
    e37c:	0018      	movs	r0, r3
    e37e:	4bad      	ldr	r3, [pc, #692]	; (e634 <tcc_get_config_defaults+0x2c8>)
    e380:	4798      	blx	r3
    e382:	0003      	movs	r3, r0
    e384:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    e386:	687b      	ldr	r3, [r7, #4]
    e388:	2200      	movs	r2, #0
    e38a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    e38c:	230f      	movs	r3, #15
    e38e:	18fb      	adds	r3, r7, r3
    e390:	781a      	ldrb	r2, [r3, #0]
    e392:	4ba9      	ldr	r3, [pc, #676]	; (e638 <tcc_get_config_defaults+0x2cc>)
    e394:	0092      	lsls	r2, r2, #2
    e396:	58d2      	ldr	r2, [r2, r3]
    e398:	687b      	ldr	r3, [r7, #4]
    e39a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    e39c:	687b      	ldr	r3, [r7, #4]
    e39e:	2200      	movs	r2, #0
    e3a0:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    e3a2:	687b      	ldr	r3, [r7, #4]
    e3a4:	2200      	movs	r2, #0
    e3a6:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    e3a8:	687b      	ldr	r3, [r7, #4]
    e3aa:	2200      	movs	r2, #0
    e3ac:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    e3ae:	687b      	ldr	r3, [r7, #4]
    e3b0:	2200      	movs	r2, #0
    e3b2:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    e3b4:	687b      	ldr	r3, [r7, #4]
    e3b6:	2200      	movs	r2, #0
    e3b8:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    e3ba:	687b      	ldr	r3, [r7, #4]
    e3bc:	2200      	movs	r2, #0
    e3be:	61da      	str	r2, [r3, #28]
    e3c0:	687b      	ldr	r3, [r7, #4]
    e3c2:	2200      	movs	r2, #0
    e3c4:	621a      	str	r2, [r3, #32]
    e3c6:	687b      	ldr	r3, [r7, #4]
    e3c8:	2200      	movs	r2, #0
    e3ca:	625a      	str	r2, [r3, #36]	; 0x24
    e3cc:	687b      	ldr	r3, [r7, #4]
    e3ce:	2200      	movs	r2, #0
    e3d0:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    e3d2:	687b      	ldr	r3, [r7, #4]
    e3d4:	2200      	movs	r2, #0
    e3d6:	751a      	strb	r2, [r3, #20]
    e3d8:	687b      	ldr	r3, [r7, #4]
    e3da:	2200      	movs	r2, #0
    e3dc:	755a      	strb	r2, [r3, #21]
    e3de:	687b      	ldr	r3, [r7, #4]
    e3e0:	2200      	movs	r2, #0
    e3e2:	759a      	strb	r2, [r3, #22]
    e3e4:	687b      	ldr	r3, [r7, #4]
    e3e6:	2200      	movs	r2, #0
    e3e8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    e3ea:	687b      	ldr	r3, [r7, #4]
    e3ec:	2200      	movs	r2, #0
    e3ee:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    e3f0:	687b      	ldr	r3, [r7, #4]
    e3f2:	2200      	movs	r2, #0
    e3f4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    e3f6:	687b      	ldr	r3, [r7, #4]
    e3f8:	2200      	movs	r2, #0
    e3fa:	741a      	strb	r2, [r3, #16]
    e3fc:	687b      	ldr	r3, [r7, #4]
    e3fe:	2200      	movs	r2, #0
    e400:	745a      	strb	r2, [r3, #17]
    e402:	687b      	ldr	r3, [r7, #4]
    e404:	2200      	movs	r2, #0
    e406:	749a      	strb	r2, [r3, #18]
    e408:	687b      	ldr	r3, [r7, #4]
    e40a:	2200      	movs	r2, #0
    e40c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    e40e:	687b      	ldr	r3, [r7, #4]
    e410:	222c      	movs	r2, #44	; 0x2c
    e412:	2100      	movs	r1, #0
    e414:	5499      	strb	r1, [r3, r2]
    e416:	687b      	ldr	r3, [r7, #4]
    e418:	222d      	movs	r2, #45	; 0x2d
    e41a:	2100      	movs	r1, #0
    e41c:	5499      	strb	r1, [r3, r2]
    e41e:	687b      	ldr	r3, [r7, #4]
    e420:	222e      	movs	r2, #46	; 0x2e
    e422:	2100      	movs	r1, #0
    e424:	5499      	strb	r1, [r3, r2]
    e426:	687b      	ldr	r3, [r7, #4]
    e428:	222f      	movs	r2, #47	; 0x2f
    e42a:	2100      	movs	r1, #0
    e42c:	5499      	strb	r1, [r3, r2]
    e42e:	687b      	ldr	r3, [r7, #4]
    e430:	2230      	movs	r2, #48	; 0x30
    e432:	2100      	movs	r1, #0
    e434:	5499      	strb	r1, [r3, r2]
    e436:	687b      	ldr	r3, [r7, #4]
    e438:	2231      	movs	r2, #49	; 0x31
    e43a:	2100      	movs	r1, #0
    e43c:	5499      	strb	r1, [r3, r2]
    e43e:	687b      	ldr	r3, [r7, #4]
    e440:	2232      	movs	r2, #50	; 0x32
    e442:	2100      	movs	r1, #0
    e444:	5499      	strb	r1, [r3, r2]
    e446:	687b      	ldr	r3, [r7, #4]
    e448:	2233      	movs	r2, #51	; 0x33
    e44a:	2100      	movs	r1, #0
    e44c:	5499      	strb	r1, [r3, r2]
    e44e:	687b      	ldr	r3, [r7, #4]
    e450:	2234      	movs	r2, #52	; 0x34
    e452:	2100      	movs	r1, #0
    e454:	5499      	strb	r1, [r3, r2]
    e456:	687b      	ldr	r3, [r7, #4]
    e458:	2235      	movs	r2, #53	; 0x35
    e45a:	2100      	movs	r1, #0
    e45c:	5499      	strb	r1, [r3, r2]
    e45e:	687b      	ldr	r3, [r7, #4]
    e460:	2236      	movs	r2, #54	; 0x36
    e462:	2100      	movs	r1, #0
    e464:	5499      	strb	r1, [r3, r2]
    e466:	687b      	ldr	r3, [r7, #4]
    e468:	2237      	movs	r2, #55	; 0x37
    e46a:	2100      	movs	r1, #0
    e46c:	5499      	strb	r1, [r3, r2]
    e46e:	687b      	ldr	r3, [r7, #4]
    e470:	2238      	movs	r2, #56	; 0x38
    e472:	2100      	movs	r1, #0
    e474:	5499      	strb	r1, [r3, r2]
    e476:	687b      	ldr	r3, [r7, #4]
    e478:	2239      	movs	r2, #57	; 0x39
    e47a:	2100      	movs	r1, #0
    e47c:	5499      	strb	r1, [r3, r2]
    e47e:	687b      	ldr	r3, [r7, #4]
    e480:	223a      	movs	r2, #58	; 0x3a
    e482:	2100      	movs	r1, #0
    e484:	5499      	strb	r1, [r3, r2]
    e486:	687b      	ldr	r3, [r7, #4]
    e488:	223b      	movs	r2, #59	; 0x3b
    e48a:	2100      	movs	r1, #0
    e48c:	5499      	strb	r1, [r3, r2]
    e48e:	687b      	ldr	r3, [r7, #4]
    e490:	223c      	movs	r2, #60	; 0x3c
    e492:	2100      	movs	r1, #0
    e494:	5499      	strb	r1, [r3, r2]
    e496:	687b      	ldr	r3, [r7, #4]
    e498:	223d      	movs	r2, #61	; 0x3d
    e49a:	2100      	movs	r1, #0
    e49c:	5499      	strb	r1, [r3, r2]
    e49e:	687b      	ldr	r3, [r7, #4]
    e4a0:	223e      	movs	r2, #62	; 0x3e
    e4a2:	2100      	movs	r1, #0
    e4a4:	5499      	strb	r1, [r3, r2]
    e4a6:	687b      	ldr	r3, [r7, #4]
    e4a8:	223f      	movs	r2, #63	; 0x3f
    e4aa:	2100      	movs	r1, #0
    e4ac:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    e4ae:	687b      	ldr	r3, [r7, #4]
    e4b0:	2240      	movs	r2, #64	; 0x40
    e4b2:	2100      	movs	r1, #0
    e4b4:	5499      	strb	r1, [r3, r2]
    e4b6:	687b      	ldr	r3, [r7, #4]
    e4b8:	2241      	movs	r2, #65	; 0x41
    e4ba:	2100      	movs	r1, #0
    e4bc:	5499      	strb	r1, [r3, r2]
    e4be:	687b      	ldr	r3, [r7, #4]
    e4c0:	2242      	movs	r2, #66	; 0x42
    e4c2:	2100      	movs	r1, #0
    e4c4:	5499      	strb	r1, [r3, r2]
    e4c6:	687b      	ldr	r3, [r7, #4]
    e4c8:	2243      	movs	r2, #67	; 0x43
    e4ca:	2100      	movs	r1, #0
    e4cc:	5499      	strb	r1, [r3, r2]
    e4ce:	687b      	ldr	r3, [r7, #4]
    e4d0:	2244      	movs	r2, #68	; 0x44
    e4d2:	2100      	movs	r1, #0
    e4d4:	5499      	strb	r1, [r3, r2]
    e4d6:	687b      	ldr	r3, [r7, #4]
    e4d8:	2245      	movs	r2, #69	; 0x45
    e4da:	2100      	movs	r1, #0
    e4dc:	5499      	strb	r1, [r3, r2]
    e4de:	687b      	ldr	r3, [r7, #4]
    e4e0:	2246      	movs	r2, #70	; 0x46
    e4e2:	2100      	movs	r1, #0
    e4e4:	5499      	strb	r1, [r3, r2]
    e4e6:	687b      	ldr	r3, [r7, #4]
    e4e8:	2247      	movs	r2, #71	; 0x47
    e4ea:	2100      	movs	r1, #0
    e4ec:	5499      	strb	r1, [r3, r2]
    e4ee:	687b      	ldr	r3, [r7, #4]
    e4f0:	2248      	movs	r2, #72	; 0x48
    e4f2:	2100      	movs	r1, #0
    e4f4:	5499      	strb	r1, [r3, r2]
    e4f6:	687b      	ldr	r3, [r7, #4]
    e4f8:	2249      	movs	r2, #73	; 0x49
    e4fa:	2100      	movs	r1, #0
    e4fc:	5499      	strb	r1, [r3, r2]
    e4fe:	687b      	ldr	r3, [r7, #4]
    e500:	224a      	movs	r2, #74	; 0x4a
    e502:	2100      	movs	r1, #0
    e504:	5499      	strb	r1, [r3, r2]
    e506:	687b      	ldr	r3, [r7, #4]
    e508:	224b      	movs	r2, #75	; 0x4b
    e50a:	2100      	movs	r1, #0
    e50c:	5499      	strb	r1, [r3, r2]
    e50e:	687b      	ldr	r3, [r7, #4]
    e510:	224c      	movs	r2, #76	; 0x4c
    e512:	2100      	movs	r1, #0
    e514:	5499      	strb	r1, [r3, r2]
    e516:	687b      	ldr	r3, [r7, #4]
    e518:	224d      	movs	r2, #77	; 0x4d
    e51a:	2100      	movs	r1, #0
    e51c:	5499      	strb	r1, [r3, r2]
    e51e:	687b      	ldr	r3, [r7, #4]
    e520:	224e      	movs	r2, #78	; 0x4e
    e522:	2100      	movs	r1, #0
    e524:	5499      	strb	r1, [r3, r2]
    e526:	687b      	ldr	r3, [r7, #4]
    e528:	224f      	movs	r2, #79	; 0x4f
    e52a:	2100      	movs	r1, #0
    e52c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    e52e:	687b      	ldr	r3, [r7, #4]
    e530:	2250      	movs	r2, #80	; 0x50
    e532:	2100      	movs	r1, #0
    e534:	5499      	strb	r1, [r3, r2]
    e536:	687b      	ldr	r3, [r7, #4]
    e538:	2251      	movs	r2, #81	; 0x51
    e53a:	2100      	movs	r1, #0
    e53c:	5499      	strb	r1, [r3, r2]
    e53e:	687b      	ldr	r3, [r7, #4]
    e540:	2252      	movs	r2, #82	; 0x52
    e542:	2100      	movs	r1, #0
    e544:	5499      	strb	r1, [r3, r2]
    e546:	687b      	ldr	r3, [r7, #4]
    e548:	2253      	movs	r2, #83	; 0x53
    e54a:	2100      	movs	r1, #0
    e54c:	5499      	strb	r1, [r3, r2]
    e54e:	687b      	ldr	r3, [r7, #4]
    e550:	2254      	movs	r2, #84	; 0x54
    e552:	2100      	movs	r1, #0
    e554:	5499      	strb	r1, [r3, r2]
    e556:	687b      	ldr	r3, [r7, #4]
    e558:	2255      	movs	r2, #85	; 0x55
    e55a:	2100      	movs	r1, #0
    e55c:	5499      	strb	r1, [r3, r2]
    e55e:	687b      	ldr	r3, [r7, #4]
    e560:	2256      	movs	r2, #86	; 0x56
    e562:	2100      	movs	r1, #0
    e564:	5499      	strb	r1, [r3, r2]
    e566:	687b      	ldr	r3, [r7, #4]
    e568:	2257      	movs	r2, #87	; 0x57
    e56a:	2100      	movs	r1, #0
    e56c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    e56e:	687b      	ldr	r3, [r7, #4]
    e570:	2298      	movs	r2, #152	; 0x98
    e572:	2100      	movs	r1, #0
    e574:	5499      	strb	r1, [r3, r2]
    e576:	687b      	ldr	r3, [r7, #4]
    e578:	2200      	movs	r2, #0
    e57a:	659a      	str	r2, [r3, #88]	; 0x58
    e57c:	687b      	ldr	r3, [r7, #4]
    e57e:	2200      	movs	r2, #0
    e580:	679a      	str	r2, [r3, #120]	; 0x78
    e582:	687b      	ldr	r3, [r7, #4]
    e584:	2299      	movs	r2, #153	; 0x99
    e586:	2100      	movs	r1, #0
    e588:	5499      	strb	r1, [r3, r2]
    e58a:	687b      	ldr	r3, [r7, #4]
    e58c:	2200      	movs	r2, #0
    e58e:	65da      	str	r2, [r3, #92]	; 0x5c
    e590:	687b      	ldr	r3, [r7, #4]
    e592:	2200      	movs	r2, #0
    e594:	67da      	str	r2, [r3, #124]	; 0x7c
    e596:	687b      	ldr	r3, [r7, #4]
    e598:	229a      	movs	r2, #154	; 0x9a
    e59a:	2100      	movs	r1, #0
    e59c:	5499      	strb	r1, [r3, r2]
    e59e:	687b      	ldr	r3, [r7, #4]
    e5a0:	2200      	movs	r2, #0
    e5a2:	661a      	str	r2, [r3, #96]	; 0x60
    e5a4:	687b      	ldr	r3, [r7, #4]
    e5a6:	2280      	movs	r2, #128	; 0x80
    e5a8:	2100      	movs	r1, #0
    e5aa:	5099      	str	r1, [r3, r2]
    e5ac:	687b      	ldr	r3, [r7, #4]
    e5ae:	229b      	movs	r2, #155	; 0x9b
    e5b0:	2100      	movs	r1, #0
    e5b2:	5499      	strb	r1, [r3, r2]
    e5b4:	687b      	ldr	r3, [r7, #4]
    e5b6:	2200      	movs	r2, #0
    e5b8:	665a      	str	r2, [r3, #100]	; 0x64
    e5ba:	687b      	ldr	r3, [r7, #4]
    e5bc:	2284      	movs	r2, #132	; 0x84
    e5be:	2100      	movs	r1, #0
    e5c0:	5099      	str	r1, [r3, r2]
    e5c2:	687b      	ldr	r3, [r7, #4]
    e5c4:	229c      	movs	r2, #156	; 0x9c
    e5c6:	2100      	movs	r1, #0
    e5c8:	5499      	strb	r1, [r3, r2]
    e5ca:	687b      	ldr	r3, [r7, #4]
    e5cc:	2200      	movs	r2, #0
    e5ce:	669a      	str	r2, [r3, #104]	; 0x68
    e5d0:	687b      	ldr	r3, [r7, #4]
    e5d2:	2288      	movs	r2, #136	; 0x88
    e5d4:	2100      	movs	r1, #0
    e5d6:	5099      	str	r1, [r3, r2]
    e5d8:	687b      	ldr	r3, [r7, #4]
    e5da:	229d      	movs	r2, #157	; 0x9d
    e5dc:	2100      	movs	r1, #0
    e5de:	5499      	strb	r1, [r3, r2]
    e5e0:	687b      	ldr	r3, [r7, #4]
    e5e2:	2200      	movs	r2, #0
    e5e4:	66da      	str	r2, [r3, #108]	; 0x6c
    e5e6:	687b      	ldr	r3, [r7, #4]
    e5e8:	228c      	movs	r2, #140	; 0x8c
    e5ea:	2100      	movs	r1, #0
    e5ec:	5099      	str	r1, [r3, r2]
    e5ee:	687b      	ldr	r3, [r7, #4]
    e5f0:	229e      	movs	r2, #158	; 0x9e
    e5f2:	2100      	movs	r1, #0
    e5f4:	5499      	strb	r1, [r3, r2]
    e5f6:	687b      	ldr	r3, [r7, #4]
    e5f8:	2200      	movs	r2, #0
    e5fa:	671a      	str	r2, [r3, #112]	; 0x70
    e5fc:	687b      	ldr	r3, [r7, #4]
    e5fe:	2290      	movs	r2, #144	; 0x90
    e600:	2100      	movs	r1, #0
    e602:	5099      	str	r1, [r3, r2]
    e604:	687b      	ldr	r3, [r7, #4]
    e606:	229f      	movs	r2, #159	; 0x9f
    e608:	2100      	movs	r1, #0
    e60a:	5499      	strb	r1, [r3, r2]
    e60c:	687b      	ldr	r3, [r7, #4]
    e60e:	2200      	movs	r2, #0
    e610:	675a      	str	r2, [r3, #116]	; 0x74
    e612:	687b      	ldr	r3, [r7, #4]
    e614:	2294      	movs	r2, #148	; 0x94
    e616:	2100      	movs	r1, #0
    e618:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    e61a:	687b      	ldr	r3, [r7, #4]
    e61c:	22a0      	movs	r2, #160	; 0xa0
    e61e:	2101      	movs	r1, #1
    e620:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    e622:	687b      	ldr	r3, [r7, #4]
    e624:	22a1      	movs	r2, #161	; 0xa1
    e626:	2100      	movs	r1, #0
    e628:	5499      	strb	r1, [r3, r2]
}
    e62a:	46c0      	nop			; (mov r8, r8)
    e62c:	46bd      	mov	sp, r7
    e62e:	b005      	add	sp, #20
    e630:	bd90      	pop	{r4, r7, pc}
    e632:	46c0      	nop			; (mov r8, r8)
    e634:	0000e331 	.word	0x0000e331
    e638:	000193c4 	.word	0x000193c4

0000e63c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    e63c:	b580      	push	{r7, lr}
    e63e:	b086      	sub	sp, #24
    e640:	af00      	add	r7, sp, #0
    e642:	60b9      	str	r1, [r7, #8]
    e644:	607a      	str	r2, [r7, #4]
    e646:	230f      	movs	r3, #15
    e648:	18fb      	adds	r3, r7, r3
    e64a:	1c02      	adds	r2, r0, #0
    e64c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    e64e:	2300      	movs	r3, #0
    e650:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    e652:	2300      	movs	r3, #0
    e654:	613b      	str	r3, [r7, #16]
    e656:	e01d      	b.n	e694 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    e658:	68ba      	ldr	r2, [r7, #8]
    e65a:	693b      	ldr	r3, [r7, #16]
    e65c:	18d3      	adds	r3, r2, r3
    e65e:	3310      	adds	r3, #16
    e660:	781b      	ldrb	r3, [r3, #0]
    e662:	2b01      	cmp	r3, #1
    e664:	d113      	bne.n	e68e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    e666:	230f      	movs	r3, #15
    e668:	18fb      	adds	r3, r7, r3
    e66a:	781b      	ldrb	r3, [r3, #0]
    e66c:	4a1b      	ldr	r2, [pc, #108]	; (e6dc <_tcc_build_ctrla+0xa0>)
    e66e:	5cd3      	ldrb	r3, [r2, r3]
    e670:	001a      	movs	r2, r3
    e672:	693b      	ldr	r3, [r7, #16]
    e674:	429a      	cmp	r2, r3
    e676:	da01      	bge.n	e67c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    e678:	2317      	movs	r3, #23
    e67a:	e02a      	b.n	e6d2 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    e67c:	2380      	movs	r3, #128	; 0x80
    e67e:	045a      	lsls	r2, r3, #17
    e680:	693b      	ldr	r3, [r7, #16]
    e682:	409a      	lsls	r2, r3
    e684:	0013      	movs	r3, r2
    e686:	001a      	movs	r2, r3
    e688:	697b      	ldr	r3, [r7, #20]
    e68a:	4313      	orrs	r3, r2
    e68c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    e68e:	693b      	ldr	r3, [r7, #16]
    e690:	3301      	adds	r3, #1
    e692:	613b      	str	r3, [r7, #16]
    e694:	693b      	ldr	r3, [r7, #16]
    e696:	2b03      	cmp	r3, #3
    e698:	ddde      	ble.n	e658 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
    e69a:	68bb      	ldr	r3, [r7, #8]
    e69c:	22a1      	movs	r2, #161	; 0xa1
    e69e:	5c9b      	ldrb	r3, [r3, r2]
    e6a0:	2b00      	cmp	r3, #0
    e6a2:	d004      	beq.n	e6ae <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    e6a4:	697b      	ldr	r3, [r7, #20]
    e6a6:	2280      	movs	r2, #128	; 0x80
    e6a8:	0112      	lsls	r2, r2, #4
    e6aa:	4313      	orrs	r3, r2
    e6ac:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    e6ae:	68bb      	ldr	r3, [r7, #8]
    e6b0:	7b1b      	ldrb	r3, [r3, #12]
    e6b2:	031b      	lsls	r3, r3, #12
    e6b4:	001a      	movs	r2, r3
    e6b6:	697b      	ldr	r3, [r7, #20]
    e6b8:	4313      	orrs	r3, r2
    e6ba:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    e6bc:	68bb      	ldr	r3, [r7, #8]
    e6be:	7adb      	ldrb	r3, [r3, #11]
    e6c0:	021b      	lsls	r3, r3, #8
    e6c2:	001a      	movs	r2, r3
    e6c4:	697b      	ldr	r3, [r7, #20]
    e6c6:	4313      	orrs	r3, r2
    e6c8:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    e6ca:	687b      	ldr	r3, [r7, #4]
    e6cc:	697a      	ldr	r2, [r7, #20]
    e6ce:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    e6d0:	2300      	movs	r3, #0
}
    e6d2:	0018      	movs	r0, r3
    e6d4:	46bd      	mov	sp, r7
    e6d6:	b006      	add	sp, #24
    e6d8:	bd80      	pop	{r7, pc}
    e6da:	46c0      	nop			; (mov r8, r8)
    e6dc:	000193d0 	.word	0x000193d0

0000e6e0 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    e6e0:	b580      	push	{r7, lr}
    e6e2:	b086      	sub	sp, #24
    e6e4:	af00      	add	r7, sp, #0
    e6e6:	60b9      	str	r1, [r7, #8]
    e6e8:	607a      	str	r2, [r7, #4]
    e6ea:	230f      	movs	r3, #15
    e6ec:	18fb      	adds	r3, r7, r3
    e6ee:	1c02      	adds	r2, r0, #0
    e6f0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    e6f2:	2317      	movs	r3, #23
    e6f4:	18fb      	adds	r3, r7, r3
    e6f6:	2200      	movs	r2, #0
    e6f8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    e6fa:	68bb      	ldr	r3, [r7, #8]
    e6fc:	7a1b      	ldrb	r3, [r3, #8]
    e6fe:	2b00      	cmp	r3, #0
    e700:	d007      	beq.n	e712 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    e702:	2317      	movs	r3, #23
    e704:	18fb      	adds	r3, r7, r3
    e706:	2217      	movs	r2, #23
    e708:	18ba      	adds	r2, r7, r2
    e70a:	7812      	ldrb	r2, [r2, #0]
    e70c:	2104      	movs	r1, #4
    e70e:	430a      	orrs	r2, r1
    e710:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    e712:	68bb      	ldr	r3, [r7, #8]
    e714:	7a5b      	ldrb	r3, [r3, #9]
    e716:	2b01      	cmp	r3, #1
    e718:	d107      	bne.n	e72a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    e71a:	2317      	movs	r3, #23
    e71c:	18fb      	adds	r3, r7, r3
    e71e:	2217      	movs	r2, #23
    e720:	18ba      	adds	r2, r7, r2
    e722:	7812      	ldrb	r2, [r2, #0]
    e724:	2101      	movs	r1, #1
    e726:	430a      	orrs	r2, r1
    e728:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    e72a:	687b      	ldr	r3, [r7, #4]
    e72c:	2217      	movs	r2, #23
    e72e:	18ba      	adds	r2, r7, r2
    e730:	7812      	ldrb	r2, [r2, #0]
    e732:	701a      	strb	r2, [r3, #0]
}
    e734:	46c0      	nop			; (mov r8, r8)
    e736:	46bd      	mov	sp, r7
    e738:	b006      	add	sp, #24
    e73a:	bd80      	pop	{r7, pc}

0000e73c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    e73c:	b580      	push	{r7, lr}
    e73e:	b088      	sub	sp, #32
    e740:	af00      	add	r7, sp, #0
    e742:	60b9      	str	r1, [r7, #8]
    e744:	607a      	str	r2, [r7, #4]
    e746:	230f      	movs	r3, #15
    e748:	18fb      	adds	r3, r7, r3
    e74a:	1c02      	adds	r2, r0, #0
    e74c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    e74e:	230f      	movs	r3, #15
    e750:	18fb      	adds	r3, r7, r3
    e752:	781a      	ldrb	r2, [r3, #0]
    e754:	231b      	movs	r3, #27
    e756:	18fb      	adds	r3, r7, r3
    e758:	493e      	ldr	r1, [pc, #248]	; (e854 <_tcc_build_faults+0x118>)
    e75a:	5c8a      	ldrb	r2, [r1, r2]
    e75c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    e75e:	2300      	movs	r3, #0
    e760:	61fb      	str	r3, [r7, #28]
    e762:	e06e      	b.n	e842 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    e764:	69fa      	ldr	r2, [r7, #28]
    e766:	0013      	movs	r3, r2
    e768:	009b      	lsls	r3, r3, #2
    e76a:	189b      	adds	r3, r3, r2
    e76c:	005b      	lsls	r3, r3, #1
    e76e:	3328      	adds	r3, #40	; 0x28
    e770:	68ba      	ldr	r2, [r7, #8]
    e772:	18d3      	adds	r3, r2, r3
    e774:	3304      	adds	r3, #4
    e776:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    e778:	697b      	ldr	r3, [r7, #20]
    e77a:	7a5b      	ldrb	r3, [r3, #9]
    e77c:	221b      	movs	r2, #27
    e77e:	18ba      	adds	r2, r7, r2
    e780:	7812      	ldrb	r2, [r2, #0]
    e782:	429a      	cmp	r2, r3
    e784:	d801      	bhi.n	e78a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    e786:	2317      	movs	r3, #23
    e788:	e05f      	b.n	e84a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    e78a:	697b      	ldr	r3, [r7, #20]
    e78c:	781b      	ldrb	r3, [r3, #0]
    e78e:	2b0f      	cmp	r3, #15
    e790:	d901      	bls.n	e796 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    e792:	2317      	movs	r3, #23
    e794:	e059      	b.n	e84a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    e796:	697b      	ldr	r3, [r7, #20]
    e798:	781b      	ldrb	r3, [r3, #0]
    e79a:	061b      	lsls	r3, r3, #24
    e79c:	001a      	movs	r2, r3
    e79e:	23f0      	movs	r3, #240	; 0xf0
    e7a0:	051b      	lsls	r3, r3, #20
    e7a2:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    e7a4:	697b      	ldr	r3, [r7, #20]
    e7a6:	785b      	ldrb	r3, [r3, #1]
    e7a8:	041b      	lsls	r3, r3, #16
    e7aa:	0019      	movs	r1, r3
    e7ac:	23ff      	movs	r3, #255	; 0xff
    e7ae:	041b      	lsls	r3, r3, #16
    e7b0:	400b      	ands	r3, r1
    e7b2:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    e7b4:	697b      	ldr	r3, [r7, #20]
    e7b6:	789b      	ldrb	r3, [r3, #2]
    e7b8:	2b00      	cmp	r3, #0
    e7ba:	d001      	beq.n	e7c0 <_tcc_build_faults+0x84>
    e7bc:	2380      	movs	r3, #128	; 0x80
    e7be:	e000      	b.n	e7c2 <_tcc_build_faults+0x86>
    e7c0:	2300      	movs	r3, #0
    e7c2:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    e7c4:	697b      	ldr	r3, [r7, #20]
    e7c6:	78db      	ldrb	r3, [r3, #3]
    e7c8:	2b00      	cmp	r3, #0
    e7ca:	d001      	beq.n	e7d0 <_tcc_build_faults+0x94>
    e7cc:	2308      	movs	r3, #8
    e7ce:	e000      	b.n	e7d2 <_tcc_build_faults+0x96>
    e7d0:	2300      	movs	r3, #0
    e7d2:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    e7d4:	697b      	ldr	r3, [r7, #20]
    e7d6:	791b      	ldrb	r3, [r3, #4]
    e7d8:	2b00      	cmp	r3, #0
    e7da:	d001      	beq.n	e7e0 <_tcc_build_faults+0xa4>
    e7dc:	2310      	movs	r3, #16
    e7de:	e000      	b.n	e7e2 <_tcc_build_faults+0xa6>
    e7e0:	2300      	movs	r3, #0
    e7e2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    e7e4:	697b      	ldr	r3, [r7, #20]
    e7e6:	795b      	ldrb	r3, [r3, #5]
    e7e8:	0019      	movs	r1, r3
    e7ea:	2303      	movs	r3, #3
    e7ec:	400b      	ands	r3, r1
    e7ee:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    e7f0:	697b      	ldr	r3, [r7, #20]
    e7f2:	799b      	ldrb	r3, [r3, #6]
    e7f4:	015b      	lsls	r3, r3, #5
    e7f6:	0019      	movs	r1, r3
    e7f8:	2360      	movs	r3, #96	; 0x60
    e7fa:	400b      	ands	r3, r1
    e7fc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    e7fe:	697b      	ldr	r3, [r7, #20]
    e800:	79db      	ldrb	r3, [r3, #7]
    e802:	021b      	lsls	r3, r3, #8
    e804:	0019      	movs	r1, r3
    e806:	23c0      	movs	r3, #192	; 0xc0
    e808:	009b      	lsls	r3, r3, #2
    e80a:	400b      	ands	r3, r1
    e80c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    e80e:	697b      	ldr	r3, [r7, #20]
    e810:	7a1b      	ldrb	r3, [r3, #8]
    e812:	031b      	lsls	r3, r3, #12
    e814:	0019      	movs	r1, r3
    e816:	23e0      	movs	r3, #224	; 0xe0
    e818:	01db      	lsls	r3, r3, #7
    e81a:	400b      	ands	r3, r1
    e81c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    e81e:	697b      	ldr	r3, [r7, #20]
    e820:	7a5b      	ldrb	r3, [r3, #9]
    e822:	029b      	lsls	r3, r3, #10
    e824:	0019      	movs	r1, r3
    e826:	23c0      	movs	r3, #192	; 0xc0
    e828:	011b      	lsls	r3, r3, #4
    e82a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    e82c:	4313      	orrs	r3, r2
    e82e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
    e830:	69fb      	ldr	r3, [r7, #28]
    e832:	009b      	lsls	r3, r3, #2
    e834:	687a      	ldr	r2, [r7, #4]
    e836:	18d3      	adds	r3, r2, r3
    e838:	693a      	ldr	r2, [r7, #16]
    e83a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    e83c:	69fb      	ldr	r3, [r7, #28]
    e83e:	3301      	adds	r3, #1
    e840:	61fb      	str	r3, [r7, #28]
    e842:	69fb      	ldr	r3, [r7, #28]
    e844:	2b01      	cmp	r3, #1
    e846:	dd8d      	ble.n	e764 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
    e848:	2300      	movs	r3, #0
}
    e84a:	0018      	movs	r0, r3
    e84c:	46bd      	mov	sp, r7
    e84e:	b008      	add	sp, #32
    e850:	bd80      	pop	{r7, pc}
    e852:	46c0      	nop			; (mov r8, r8)
    e854:	000193d0 	.word	0x000193d0

0000e858 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    e858:	b580      	push	{r7, lr}
    e85a:	b088      	sub	sp, #32
    e85c:	af00      	add	r7, sp, #0
    e85e:	60b9      	str	r1, [r7, #8]
    e860:	607a      	str	r2, [r7, #4]
    e862:	230f      	movs	r3, #15
    e864:	18fb      	adds	r3, r7, r3
    e866:	1c02      	adds	r2, r0, #0
    e868:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    e86a:	230f      	movs	r3, #15
    e86c:	18fb      	adds	r3, r7, r3
    e86e:	781a      	ldrb	r2, [r3, #0]
    e870:	2317      	movs	r3, #23
    e872:	18fb      	adds	r3, r7, r3
    e874:	492d      	ldr	r1, [pc, #180]	; (e92c <_tcc_build_drvctrl+0xd4>)
    e876:	5c8a      	ldrb	r2, [r1, r2]
    e878:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    e87a:	2300      	movs	r3, #0
    e87c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    e87e:	2300      	movs	r3, #0
    e880:	61fb      	str	r3, [r7, #28]
    e882:	e048      	b.n	e916 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    e884:	68ba      	ldr	r2, [r7, #8]
    e886:	2150      	movs	r1, #80	; 0x50
    e888:	69fb      	ldr	r3, [r7, #28]
    e88a:	18d3      	adds	r3, r2, r3
    e88c:	185b      	adds	r3, r3, r1
    e88e:	781b      	ldrb	r3, [r3, #0]
    e890:	2b00      	cmp	r3, #0
    e892:	d010      	beq.n	e8b6 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    e894:	2317      	movs	r3, #23
    e896:	18fb      	adds	r3, r7, r3
    e898:	781a      	ldrb	r2, [r3, #0]
    e89a:	69fb      	ldr	r3, [r7, #28]
    e89c:	429a      	cmp	r2, r3
    e89e:	d801      	bhi.n	e8a4 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    e8a0:	2317      	movs	r3, #23
    e8a2:	e03f      	b.n	e924 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    e8a4:	2380      	movs	r3, #128	; 0x80
    e8a6:	025a      	lsls	r2, r3, #9
    e8a8:	69fb      	ldr	r3, [r7, #28]
    e8aa:	409a      	lsls	r2, r3
    e8ac:	0013      	movs	r3, r2
    e8ae:	001a      	movs	r2, r3
    e8b0:	69bb      	ldr	r3, [r7, #24]
    e8b2:	4313      	orrs	r3, r2
    e8b4:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    e8b6:	68ba      	ldr	r2, [r7, #8]
    e8b8:	69fb      	ldr	r3, [r7, #28]
    e8ba:	331c      	adds	r3, #28
    e8bc:	005b      	lsls	r3, r3, #1
    e8be:	18d3      	adds	r3, r2, r3
    e8c0:	3309      	adds	r3, #9
    e8c2:	781b      	ldrb	r3, [r3, #0]
    e8c4:	2b00      	cmp	r3, #0
    e8c6:	d023      	beq.n	e910 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    e8c8:	2317      	movs	r3, #23
    e8ca:	18fb      	adds	r3, r7, r3
    e8cc:	781a      	ldrb	r2, [r3, #0]
    e8ce:	69fb      	ldr	r3, [r7, #28]
    e8d0:	429a      	cmp	r2, r3
    e8d2:	d801      	bhi.n	e8d8 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    e8d4:	2317      	movs	r3, #23
    e8d6:	e025      	b.n	e924 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    e8d8:	68ba      	ldr	r2, [r7, #8]
    e8da:	69fb      	ldr	r3, [r7, #28]
    e8dc:	331c      	adds	r3, #28
    e8de:	005b      	lsls	r3, r3, #1
    e8e0:	18d3      	adds	r3, r2, r3
    e8e2:	3309      	adds	r3, #9
    e8e4:	781b      	ldrb	r3, [r3, #0]
    e8e6:	2b02      	cmp	r3, #2
    e8e8:	d10a      	bne.n	e900 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    e8ea:	2302      	movs	r3, #2
    e8ec:	33ff      	adds	r3, #255	; 0xff
    e8ee:	001a      	movs	r2, r3
    e8f0:	69fb      	ldr	r3, [r7, #28]
    e8f2:	409a      	lsls	r2, r3
    e8f4:	0013      	movs	r3, r2
    e8f6:	001a      	movs	r2, r3
    e8f8:	69bb      	ldr	r3, [r7, #24]
    e8fa:	4313      	orrs	r3, r2
    e8fc:	61bb      	str	r3, [r7, #24]
    e8fe:	e007      	b.n	e910 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    e900:	2201      	movs	r2, #1
    e902:	69fb      	ldr	r3, [r7, #28]
    e904:	409a      	lsls	r2, r3
    e906:	0013      	movs	r3, r2
    e908:	001a      	movs	r2, r3
    e90a:	69bb      	ldr	r3, [r7, #24]
    e90c:	4313      	orrs	r3, r2
    e90e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    e910:	69fb      	ldr	r3, [r7, #28]
    e912:	3301      	adds	r3, #1
    e914:	61fb      	str	r3, [r7, #28]
    e916:	69fb      	ldr	r3, [r7, #28]
    e918:	2b07      	cmp	r3, #7
    e91a:	d9b3      	bls.n	e884 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
    e91c:	687b      	ldr	r3, [r7, #4]
    e91e:	69ba      	ldr	r2, [r7, #24]
    e920:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    e922:	2300      	movs	r3, #0
}
    e924:	0018      	movs	r0, r3
    e926:	46bd      	mov	sp, r7
    e928:	b008      	add	sp, #32
    e92a:	bd80      	pop	{r7, pc}
    e92c:	000193d4 	.word	0x000193d4

0000e930 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    e930:	b580      	push	{r7, lr}
    e932:	b088      	sub	sp, #32
    e934:	af00      	add	r7, sp, #0
    e936:	60b9      	str	r1, [r7, #8]
    e938:	607a      	str	r2, [r7, #4]
    e93a:	230f      	movs	r3, #15
    e93c:	18fb      	adds	r3, r7, r3
    e93e:	1c02      	adds	r2, r0, #0
    e940:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    e942:	230f      	movs	r3, #15
    e944:	18fb      	adds	r3, r7, r3
    e946:	781a      	ldrb	r2, [r3, #0]
    e948:	2317      	movs	r3, #23
    e94a:	18fb      	adds	r3, r7, r3
    e94c:	491d      	ldr	r1, [pc, #116]	; (e9c4 <_tcc_build_waves+0x94>)
    e94e:	5c8a      	ldrb	r2, [r1, r2]
    e950:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    e952:	68bb      	ldr	r3, [r7, #8]
    e954:	3310      	adds	r3, #16
    e956:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    e958:	693b      	ldr	r3, [r7, #16]
    e95a:	7a5b      	ldrb	r3, [r3, #9]
    e95c:	011b      	lsls	r3, r3, #4
    e95e:	001a      	movs	r2, r3
    e960:	2330      	movs	r3, #48	; 0x30
    e962:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    e964:	693b      	ldr	r3, [r7, #16]
    e966:	7a1b      	ldrb	r3, [r3, #8]
    e968:	0019      	movs	r1, r3
    e96a:	2307      	movs	r3, #7
    e96c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    e96e:	4313      	orrs	r3, r2
    e970:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    e972:	2300      	movs	r3, #0
    e974:	61fb      	str	r3, [r7, #28]
    e976:	e01a      	b.n	e9ae <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    e978:	693a      	ldr	r2, [r7, #16]
    e97a:	69fb      	ldr	r3, [r7, #28]
    e97c:	18d3      	adds	r3, r2, r3
    e97e:	3304      	adds	r3, #4
    e980:	781b      	ldrb	r3, [r3, #0]
    e982:	2b00      	cmp	r3, #0
    e984:	d010      	beq.n	e9a8 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    e986:	2317      	movs	r3, #23
    e988:	18fb      	adds	r3, r7, r3
    e98a:	781a      	ldrb	r2, [r3, #0]
    e98c:	69fb      	ldr	r3, [r7, #28]
    e98e:	429a      	cmp	r2, r3
    e990:	dc01      	bgt.n	e996 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    e992:	2317      	movs	r3, #23
    e994:	e012      	b.n	e9bc <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    e996:	2380      	movs	r3, #128	; 0x80
    e998:	025a      	lsls	r2, r3, #9
    e99a:	69fb      	ldr	r3, [r7, #28]
    e99c:	409a      	lsls	r2, r3
    e99e:	0013      	movs	r3, r2
    e9a0:	001a      	movs	r2, r3
    e9a2:	69bb      	ldr	r3, [r7, #24]
    e9a4:	4313      	orrs	r3, r2
    e9a6:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    e9a8:	69fb      	ldr	r3, [r7, #28]
    e9aa:	3301      	adds	r3, #1
    e9ac:	61fb      	str	r3, [r7, #28]
    e9ae:	69fb      	ldr	r3, [r7, #28]
    e9b0:	2b03      	cmp	r3, #3
    e9b2:	dde1      	ble.n	e978 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
    e9b4:	687b      	ldr	r3, [r7, #4]
    e9b6:	69ba      	ldr	r2, [r7, #24]
    e9b8:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    e9ba:	2300      	movs	r3, #0
}
    e9bc:	0018      	movs	r0, r3
    e9be:	46bd      	mov	sp, r7
    e9c0:	b008      	add	sp, #32
    e9c2:	bd80      	pop	{r7, pc}
    e9c4:	000193d0 	.word	0x000193d0

0000e9c8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    e9c8:	b590      	push	{r4, r7, lr}
    e9ca:	b091      	sub	sp, #68	; 0x44
    e9cc:	af00      	add	r7, sp, #0
    e9ce:	60f8      	str	r0, [r7, #12]
    e9d0:	60b9      	str	r1, [r7, #8]
    e9d2:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    e9d4:	233b      	movs	r3, #59	; 0x3b
    e9d6:	18fc      	adds	r4, r7, r3
    e9d8:	68bb      	ldr	r3, [r7, #8]
    e9da:	0018      	movs	r0, r3
    e9dc:	4bc4      	ldr	r3, [pc, #784]	; (ecf0 <tcc_init+0x328>)
    e9de:	4798      	blx	r3
    e9e0:	0003      	movs	r3, r0
    e9e2:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    e9e4:	233b      	movs	r3, #59	; 0x3b
    e9e6:	18fb      	adds	r3, r7, r3
    e9e8:	781a      	ldrb	r2, [r3, #0]
    e9ea:	4bc2      	ldr	r3, [pc, #776]	; (ecf4 <tcc_init+0x32c>)
    e9ec:	0092      	lsls	r2, r2, #2
    e9ee:	58d3      	ldr	r3, [r2, r3]
    e9f0:	0019      	movs	r1, r3
    e9f2:	2002      	movs	r0, #2
    e9f4:	4bc0      	ldr	r3, [pc, #768]	; (ecf8 <tcc_init+0x330>)
    e9f6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    e9f8:	68bb      	ldr	r3, [r7, #8]
    e9fa:	681b      	ldr	r3, [r3, #0]
    e9fc:	2202      	movs	r2, #2
    e9fe:	4013      	ands	r3, r2
    ea00:	d001      	beq.n	ea06 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    ea02:	231c      	movs	r3, #28
    ea04:	e1be      	b.n	ed84 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    ea06:	68bb      	ldr	r3, [r7, #8]
    ea08:	681b      	ldr	r3, [r3, #0]
    ea0a:	2201      	movs	r2, #1
    ea0c:	4013      	ands	r3, r2
    ea0e:	d001      	beq.n	ea14 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    ea10:	231c      	movs	r3, #28
    ea12:	e1b7      	b.n	ed84 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    ea14:	233b      	movs	r3, #59	; 0x3b
    ea16:	18fb      	adds	r3, r7, r3
    ea18:	781a      	ldrb	r2, [r3, #0]
    ea1a:	4bb8      	ldr	r3, [pc, #736]	; (ecfc <tcc_init+0x334>)
    ea1c:	0092      	lsls	r2, r2, #2
    ea1e:	58d3      	ldr	r3, [r2, r3]
    ea20:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    ea22:	687b      	ldr	r3, [r7, #4]
    ea24:	681a      	ldr	r2, [r3, #0]
    ea26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ea28:	429a      	cmp	r2, r3
    ea2a:	d804      	bhi.n	ea36 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    ea2c:	687b      	ldr	r3, [r7, #4]
    ea2e:	685a      	ldr	r2, [r3, #4]
    ea30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ea32:	429a      	cmp	r2, r3
    ea34:	d901      	bls.n	ea3a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    ea36:	2317      	movs	r3, #23
    ea38:	e1a4      	b.n	ed84 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    ea3a:	2300      	movs	r3, #0
    ea3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    ea3e:	e00e      	b.n	ea5e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    ea40:	687a      	ldr	r2, [r7, #4]
    ea42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea44:	3306      	adds	r3, #6
    ea46:	009b      	lsls	r3, r3, #2
    ea48:	18d3      	adds	r3, r2, r3
    ea4a:	3304      	adds	r3, #4
    ea4c:	681a      	ldr	r2, [r3, #0]
    ea4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ea50:	429a      	cmp	r2, r3
    ea52:	d901      	bls.n	ea58 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    ea54:	2317      	movs	r3, #23
    ea56:	e195      	b.n	ed84 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    ea58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea5a:	3301      	adds	r3, #1
    ea5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    ea5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea60:	2b03      	cmp	r3, #3
    ea62:	dded      	ble.n	ea40 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    ea64:	2300      	movs	r3, #0
    ea66:	63fb      	str	r3, [r7, #60]	; 0x3c
    ea68:	e019      	b.n	ea9e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    ea6a:	687a      	ldr	r2, [r7, #4]
    ea6c:	2198      	movs	r1, #152	; 0x98
    ea6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea70:	18d3      	adds	r3, r2, r3
    ea72:	185b      	adds	r3, r3, r1
    ea74:	781b      	ldrb	r3, [r3, #0]
    ea76:	2201      	movs	r2, #1
    ea78:	4053      	eors	r3, r2
    ea7a:	b2db      	uxtb	r3, r3
    ea7c:	2b00      	cmp	r3, #0
    ea7e:	d10a      	bne.n	ea96 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    ea80:	233b      	movs	r3, #59	; 0x3b
    ea82:	18fb      	adds	r3, r7, r3
    ea84:	781b      	ldrb	r3, [r3, #0]
    ea86:	4a9e      	ldr	r2, [pc, #632]	; (ed00 <tcc_init+0x338>)
    ea88:	5cd3      	ldrb	r3, [r2, r3]
    ea8a:	001a      	movs	r2, r3
    ea8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea8e:	429a      	cmp	r2, r3
    ea90:	dc02      	bgt.n	ea98 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    ea92:	2317      	movs	r3, #23
    ea94:	e176      	b.n	ed84 <tcc_init+0x3bc>
			continue;
    ea96:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    ea98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea9a:	3301      	adds	r3, #1
    ea9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    ea9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eaa0:	2b07      	cmp	r3, #7
    eaa2:	dde2      	ble.n	ea6a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    eaa4:	2300      	movs	r3, #0
    eaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    eaa8:	2333      	movs	r3, #51	; 0x33
    eaaa:	18fc      	adds	r4, r7, r3
    eaac:	232c      	movs	r3, #44	; 0x2c
    eaae:	18fa      	adds	r2, r7, r3
    eab0:	6879      	ldr	r1, [r7, #4]
    eab2:	233b      	movs	r3, #59	; 0x3b
    eab4:	18fb      	adds	r3, r7, r3
    eab6:	781b      	ldrb	r3, [r3, #0]
    eab8:	0018      	movs	r0, r3
    eaba:	4b92      	ldr	r3, [pc, #584]	; (ed04 <tcc_init+0x33c>)
    eabc:	4798      	blx	r3
    eabe:	0003      	movs	r3, r0
    eac0:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    eac2:	2333      	movs	r3, #51	; 0x33
    eac4:	18fb      	adds	r3, r7, r3
    eac6:	781b      	ldrb	r3, [r3, #0]
    eac8:	2b00      	cmp	r3, #0
    eaca:	d003      	beq.n	ead4 <tcc_init+0x10c>
		return status;
    eacc:	2333      	movs	r3, #51	; 0x33
    eace:	18fb      	adds	r3, r7, r3
    ead0:	781b      	ldrb	r3, [r3, #0]
    ead2:	e157      	b.n	ed84 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    ead4:	232b      	movs	r3, #43	; 0x2b
    ead6:	18fa      	adds	r2, r7, r3
    ead8:	6879      	ldr	r1, [r7, #4]
    eada:	233b      	movs	r3, #59	; 0x3b
    eadc:	18fb      	adds	r3, r7, r3
    eade:	781b      	ldrb	r3, [r3, #0]
    eae0:	0018      	movs	r0, r3
    eae2:	4b89      	ldr	r3, [pc, #548]	; (ed08 <tcc_init+0x340>)
    eae4:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    eae6:	2333      	movs	r3, #51	; 0x33
    eae8:	18fc      	adds	r4, r7, r3
    eaea:	2320      	movs	r3, #32
    eaec:	18fa      	adds	r2, r7, r3
    eaee:	6879      	ldr	r1, [r7, #4]
    eaf0:	233b      	movs	r3, #59	; 0x3b
    eaf2:	18fb      	adds	r3, r7, r3
    eaf4:	781b      	ldrb	r3, [r3, #0]
    eaf6:	0018      	movs	r0, r3
    eaf8:	4b84      	ldr	r3, [pc, #528]	; (ed0c <tcc_init+0x344>)
    eafa:	4798      	blx	r3
    eafc:	0003      	movs	r3, r0
    eafe:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    eb00:	2333      	movs	r3, #51	; 0x33
    eb02:	18fb      	adds	r3, r7, r3
    eb04:	781b      	ldrb	r3, [r3, #0]
    eb06:	2b00      	cmp	r3, #0
    eb08:	d003      	beq.n	eb12 <tcc_init+0x14a>
		return status;
    eb0a:	2333      	movs	r3, #51	; 0x33
    eb0c:	18fb      	adds	r3, r7, r3
    eb0e:	781b      	ldrb	r3, [r3, #0]
    eb10:	e138      	b.n	ed84 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    eb12:	2300      	movs	r3, #0
    eb14:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    eb16:	2333      	movs	r3, #51	; 0x33
    eb18:	18fc      	adds	r4, r7, r3
    eb1a:	231c      	movs	r3, #28
    eb1c:	18fa      	adds	r2, r7, r3
    eb1e:	6879      	ldr	r1, [r7, #4]
    eb20:	233b      	movs	r3, #59	; 0x3b
    eb22:	18fb      	adds	r3, r7, r3
    eb24:	781b      	ldrb	r3, [r3, #0]
    eb26:	0018      	movs	r0, r3
    eb28:	4b79      	ldr	r3, [pc, #484]	; (ed10 <tcc_init+0x348>)
    eb2a:	4798      	blx	r3
    eb2c:	0003      	movs	r3, r0
    eb2e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    eb30:	2333      	movs	r3, #51	; 0x33
    eb32:	18fb      	adds	r3, r7, r3
    eb34:	781b      	ldrb	r3, [r3, #0]
    eb36:	2b00      	cmp	r3, #0
    eb38:	d003      	beq.n	eb42 <tcc_init+0x17a>
		return status;
    eb3a:	2333      	movs	r3, #51	; 0x33
    eb3c:	18fb      	adds	r3, r7, r3
    eb3e:	781b      	ldrb	r3, [r3, #0]
    eb40:	e120      	b.n	ed84 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    eb42:	2333      	movs	r3, #51	; 0x33
    eb44:	18fc      	adds	r4, r7, r3
    eb46:	2318      	movs	r3, #24
    eb48:	18fa      	adds	r2, r7, r3
    eb4a:	6879      	ldr	r1, [r7, #4]
    eb4c:	233b      	movs	r3, #59	; 0x3b
    eb4e:	18fb      	adds	r3, r7, r3
    eb50:	781b      	ldrb	r3, [r3, #0]
    eb52:	0018      	movs	r0, r3
    eb54:	4b6f      	ldr	r3, [pc, #444]	; (ed14 <tcc_init+0x34c>)
    eb56:	4798      	blx	r3
    eb58:	0003      	movs	r3, r0
    eb5a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    eb5c:	2333      	movs	r3, #51	; 0x33
    eb5e:	18fb      	adds	r3, r7, r3
    eb60:	781b      	ldrb	r3, [r3, #0]
    eb62:	2b00      	cmp	r3, #0
    eb64:	d003      	beq.n	eb6e <tcc_init+0x1a6>
		return status;
    eb66:	2333      	movs	r3, #51	; 0x33
    eb68:	18fb      	adds	r3, r7, r3
    eb6a:	781b      	ldrb	r3, [r3, #0]
    eb6c:	e10a      	b.n	ed84 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    eb6e:	2300      	movs	r3, #0
    eb70:	63fb      	str	r3, [r7, #60]	; 0x3c
    eb72:	e009      	b.n	eb88 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    eb74:	68fa      	ldr	r2, [r7, #12]
    eb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eb78:	009b      	lsls	r3, r3, #2
    eb7a:	18d3      	adds	r3, r2, r3
    eb7c:	3304      	adds	r3, #4
    eb7e:	2200      	movs	r2, #0
    eb80:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    eb82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eb84:	3301      	adds	r3, #1
    eb86:	63fb      	str	r3, [r7, #60]	; 0x3c
    eb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eb8a:	2b0b      	cmp	r3, #11
    eb8c:	ddf2      	ble.n	eb74 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
    eb8e:	68fb      	ldr	r3, [r7, #12]
    eb90:	2200      	movs	r2, #0
    eb92:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    eb94:	68fb      	ldr	r3, [r7, #12]
    eb96:	2200      	movs	r2, #0
    eb98:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    eb9a:	233b      	movs	r3, #59	; 0x3b
    eb9c:	18fb      	adds	r3, r7, r3
    eb9e:	781a      	ldrb	r2, [r3, #0]
    eba0:	4b5d      	ldr	r3, [pc, #372]	; (ed18 <tcc_init+0x350>)
    eba2:	0092      	lsls	r2, r2, #2
    eba4:	68f9      	ldr	r1, [r7, #12]
    eba6:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    eba8:	68fb      	ldr	r3, [r7, #12]
    ebaa:	68ba      	ldr	r2, [r7, #8]
    ebac:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    ebae:	687b      	ldr	r3, [r7, #4]
    ebb0:	22a0      	movs	r2, #160	; 0xa0
    ebb2:	5c99      	ldrb	r1, [r3, r2]
    ebb4:	68fb      	ldr	r3, [r7, #12]
    ebb6:	223c      	movs	r2, #60	; 0x3c
    ebb8:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    ebba:	2314      	movs	r3, #20
    ebbc:	18fb      	adds	r3, r7, r3
    ebbe:	0018      	movs	r0, r3
    ebc0:	4b56      	ldr	r3, [pc, #344]	; (ed1c <tcc_init+0x354>)
    ebc2:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    ebc4:	687b      	ldr	r3, [r7, #4]
    ebc6:	7a9a      	ldrb	r2, [r3, #10]
    ebc8:	2314      	movs	r3, #20
    ebca:	18fb      	adds	r3, r7, r3
    ebcc:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    ebce:	233b      	movs	r3, #59	; 0x3b
    ebd0:	18fb      	adds	r3, r7, r3
    ebd2:	781b      	ldrb	r3, [r3, #0]
    ebd4:	4a52      	ldr	r2, [pc, #328]	; (ed20 <tcc_init+0x358>)
    ebd6:	5cd3      	ldrb	r3, [r2, r3]
    ebd8:	2214      	movs	r2, #20
    ebda:	18ba      	adds	r2, r7, r2
    ebdc:	0011      	movs	r1, r2
    ebde:	0018      	movs	r0, r3
    ebe0:	4b50      	ldr	r3, [pc, #320]	; (ed24 <tcc_init+0x35c>)
    ebe2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    ebe4:	233b      	movs	r3, #59	; 0x3b
    ebe6:	18fb      	adds	r3, r7, r3
    ebe8:	781b      	ldrb	r3, [r3, #0]
    ebea:	4a4d      	ldr	r2, [pc, #308]	; (ed20 <tcc_init+0x358>)
    ebec:	5cd3      	ldrb	r3, [r2, r3]
    ebee:	0018      	movs	r0, r3
    ebf0:	4b4d      	ldr	r3, [pc, #308]	; (ed28 <tcc_init+0x360>)
    ebf2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    ebf4:	2300      	movs	r3, #0
    ebf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    ebf8:	e02d      	b.n	ec56 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    ebfa:	687a      	ldr	r2, [r7, #4]
    ebfc:	2198      	movs	r1, #152	; 0x98
    ebfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec00:	18d3      	adds	r3, r2, r3
    ec02:	185b      	adds	r3, r3, r1
    ec04:	781b      	ldrb	r3, [r3, #0]
    ec06:	2201      	movs	r2, #1
    ec08:	4053      	eors	r3, r2
    ec0a:	b2db      	uxtb	r3, r3
    ec0c:	2b00      	cmp	r3, #0
    ec0e:	d11e      	bne.n	ec4e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    ec10:	2310      	movs	r3, #16
    ec12:	18fb      	adds	r3, r7, r3
    ec14:	0018      	movs	r0, r3
    ec16:	4b45      	ldr	r3, [pc, #276]	; (ed2c <tcc_init+0x364>)
    ec18:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    ec1a:	687b      	ldr	r3, [r7, #4]
    ec1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ec1e:	321e      	adds	r2, #30
    ec20:	0092      	lsls	r2, r2, #2
    ec22:	58d3      	ldr	r3, [r2, r3]
    ec24:	b2da      	uxtb	r2, r3
    ec26:	2310      	movs	r3, #16
    ec28:	18fb      	adds	r3, r7, r3
    ec2a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    ec2c:	2310      	movs	r3, #16
    ec2e:	18fb      	adds	r3, r7, r3
    ec30:	2201      	movs	r2, #1
    ec32:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    ec34:	687b      	ldr	r3, [r7, #4]
    ec36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ec38:	3216      	adds	r2, #22
    ec3a:	0092      	lsls	r2, r2, #2
    ec3c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
    ec3e:	b2db      	uxtb	r3, r3
    ec40:	2210      	movs	r2, #16
    ec42:	18ba      	adds	r2, r7, r2
    ec44:	0011      	movs	r1, r2
    ec46:	0018      	movs	r0, r3
    ec48:	4b39      	ldr	r3, [pc, #228]	; (ed30 <tcc_init+0x368>)
    ec4a:	4798      	blx	r3
    ec4c:	e000      	b.n	ec50 <tcc_init+0x288>
			continue;
    ec4e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    ec50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec52:	3301      	adds	r3, #1
    ec54:	63fb      	str	r3, [r7, #60]	; 0x3c
    ec56:	233b      	movs	r3, #59	; 0x3b
    ec58:	18fb      	adds	r3, r7, r3
    ec5a:	781b      	ldrb	r3, [r3, #0]
    ec5c:	4a28      	ldr	r2, [pc, #160]	; (ed00 <tcc_init+0x338>)
    ec5e:	5cd3      	ldrb	r3, [r2, r3]
    ec60:	001a      	movs	r2, r3
    ec62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec64:	429a      	cmp	r2, r3
    ec66:	dcc8      	bgt.n	ebfa <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    ec68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ec6a:	68bb      	ldr	r3, [r7, #8]
    ec6c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    ec6e:	46c0      	nop			; (mov r8, r8)
    ec70:	68bb      	ldr	r3, [r7, #8]
    ec72:	689b      	ldr	r3, [r3, #8]
    ec74:	2204      	movs	r2, #4
    ec76:	4013      	ands	r3, r2
    ec78:	d1fa      	bne.n	ec70 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    ec7a:	68bb      	ldr	r3, [r7, #8]
    ec7c:	22ff      	movs	r2, #255	; 0xff
    ec7e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    ec80:	46c0      	nop			; (mov r8, r8)
    ec82:	68bb      	ldr	r3, [r7, #8]
    ec84:	689b      	ldr	r3, [r3, #8]
    ec86:	2204      	movs	r2, #4
    ec88:	4013      	ands	r3, r2
    ec8a:	d1fa      	bne.n	ec82 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    ec8c:	232b      	movs	r3, #43	; 0x2b
    ec8e:	18fb      	adds	r3, r7, r3
    ec90:	781a      	ldrb	r2, [r3, #0]
    ec92:	68bb      	ldr	r3, [r7, #8]
    ec94:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    ec96:	2320      	movs	r3, #32
    ec98:	18fb      	adds	r3, r7, r3
    ec9a:	681a      	ldr	r2, [r3, #0]
    ec9c:	68bb      	ldr	r3, [r7, #8]
    ec9e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    eca0:	2320      	movs	r3, #32
    eca2:	18fb      	adds	r3, r7, r3
    eca4:	685a      	ldr	r2, [r3, #4]
    eca6:	68bb      	ldr	r3, [r7, #8]
    eca8:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    ecaa:	69fa      	ldr	r2, [r7, #28]
    ecac:	68bb      	ldr	r3, [r7, #8]
    ecae:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    ecb0:	46c0      	nop			; (mov r8, r8)
    ecb2:	68bb      	ldr	r3, [r7, #8]
    ecb4:	689b      	ldr	r3, [r3, #8]
    ecb6:	4a1f      	ldr	r2, [pc, #124]	; (ed34 <tcc_init+0x36c>)
    ecb8:	4013      	ands	r3, r2
    ecba:	d1fa      	bne.n	ecb2 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    ecbc:	69ba      	ldr	r2, [r7, #24]
    ecbe:	68bb      	ldr	r3, [r7, #8]
    ecc0:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    ecc2:	46c0      	nop			; (mov r8, r8)
    ecc4:	68bb      	ldr	r3, [r7, #8]
    ecc6:	689b      	ldr	r3, [r3, #8]
    ecc8:	2210      	movs	r2, #16
    ecca:	4013      	ands	r3, r2
    eccc:	d1fa      	bne.n	ecc4 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    ecce:	687b      	ldr	r3, [r7, #4]
    ecd0:	681a      	ldr	r2, [r3, #0]
    ecd2:	68bb      	ldr	r3, [r7, #8]
    ecd4:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    ecd6:	46c0      	nop			; (mov r8, r8)
    ecd8:	68bb      	ldr	r3, [r7, #8]
    ecda:	689b      	ldr	r3, [r3, #8]
    ecdc:	4a16      	ldr	r2, [pc, #88]	; (ed38 <tcc_init+0x370>)
    ecde:	4013      	ands	r3, r2
    ece0:	d1fa      	bne.n	ecd8 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    ece2:	687b      	ldr	r3, [r7, #4]
    ece4:	685a      	ldr	r2, [r3, #4]
    ece6:	68bb      	ldr	r3, [r7, #8]
    ece8:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    ecea:	2300      	movs	r3, #0
    ecec:	63fb      	str	r3, [r7, #60]	; 0x3c
    ecee:	e03f      	b.n	ed70 <tcc_init+0x3a8>
    ecf0:	0000e331 	.word	0x0000e331
    ecf4:	000193b8 	.word	0x000193b8
    ecf8:	0000e2ad 	.word	0x0000e2ad
    ecfc:	000193c4 	.word	0x000193c4
    ed00:	000193d4 	.word	0x000193d4
    ed04:	0000e63d 	.word	0x0000e63d
    ed08:	0000e6e1 	.word	0x0000e6e1
    ed0c:	0000e73d 	.word	0x0000e73d
    ed10:	0000e859 	.word	0x0000e859
    ed14:	0000e931 	.word	0x0000e931
    ed18:	20000410 	.word	0x20000410
    ed1c:	0000e295 	.word	0x0000e295
    ed20:	000193b4 	.word	0x000193b4
    ed24:	00015055 	.word	0x00015055
    ed28:	00015099 	.word	0x00015099
    ed2c:	0000e309 	.word	0x0000e309
    ed30:	00015341 	.word	0x00015341
    ed34:	00020040 	.word	0x00020040
    ed38:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    ed3c:	46c0      	nop			; (mov r8, r8)
    ed3e:	68bb      	ldr	r3, [r7, #8]
    ed40:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    ed42:	4912      	ldr	r1, [pc, #72]	; (ed8c <tcc_init+0x3c4>)
    ed44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ed46:	4091      	lsls	r1, r2
    ed48:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
    ed4a:	4013      	ands	r3, r2
    ed4c:	d1f7      	bne.n	ed3e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    ed4e:	687a      	ldr	r2, [r7, #4]
    ed50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ed52:	3306      	adds	r3, #6
    ed54:	009b      	lsls	r3, r3, #2
    ed56:	18d3      	adds	r3, r2, r3
    ed58:	3304      	adds	r3, #4
    ed5a:	681a      	ldr	r2, [r3, #0]
    ed5c:	68b9      	ldr	r1, [r7, #8]
    ed5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ed60:	3310      	adds	r3, #16
    ed62:	009b      	lsls	r3, r3, #2
    ed64:	18cb      	adds	r3, r1, r3
    ed66:	3304      	adds	r3, #4
    ed68:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    ed6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ed6c:	3301      	adds	r3, #1
    ed6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    ed70:	233b      	movs	r3, #59	; 0x3b
    ed72:	18fb      	adds	r3, r7, r3
    ed74:	781b      	ldrb	r3, [r3, #0]
    ed76:	4a06      	ldr	r2, [pc, #24]	; (ed90 <tcc_init+0x3c8>)
    ed78:	5cd3      	ldrb	r3, [r2, r3]
    ed7a:	001a      	movs	r2, r3
    ed7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ed7e:	429a      	cmp	r2, r3
    ed80:	dcdc      	bgt.n	ed3c <tcc_init+0x374>
	}

	return STATUS_OK;
    ed82:	2300      	movs	r3, #0
}
    ed84:	0018      	movs	r0, r3
    ed86:	46bd      	mov	sp, r7
    ed88:	b011      	add	sp, #68	; 0x44
    ed8a:	bd90      	pop	{r4, r7, pc}
    ed8c:	00080100 	.word	0x00080100
    ed90:	000193d0 	.word	0x000193d0

0000ed94 <system_interrupt_enable>:
{
    ed94:	b580      	push	{r7, lr}
    ed96:	b082      	sub	sp, #8
    ed98:	af00      	add	r7, sp, #0
    ed9a:	0002      	movs	r2, r0
    ed9c:	1dfb      	adds	r3, r7, #7
    ed9e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    eda0:	4b06      	ldr	r3, [pc, #24]	; (edbc <system_interrupt_enable+0x28>)
    eda2:	1dfa      	adds	r2, r7, #7
    eda4:	7812      	ldrb	r2, [r2, #0]
    eda6:	0011      	movs	r1, r2
    eda8:	221f      	movs	r2, #31
    edaa:	400a      	ands	r2, r1
    edac:	2101      	movs	r1, #1
    edae:	4091      	lsls	r1, r2
    edb0:	000a      	movs	r2, r1
    edb2:	601a      	str	r2, [r3, #0]
}
    edb4:	46c0      	nop			; (mov r8, r8)
    edb6:	46bd      	mov	sp, r7
    edb8:	b002      	add	sp, #8
    edba:	bd80      	pop	{r7, pc}
    edbc:	e000e100 	.word	0xe000e100

0000edc0 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    edc0:	b580      	push	{r7, lr}
    edc2:	b082      	sub	sp, #8
    edc4:	af00      	add	r7, sp, #0
    edc6:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    edc8:	4a04      	ldr	r2, [pc, #16]	; (eddc <_tcc_interrupt_get_interrupt_vector+0x1c>)
    edca:	687b      	ldr	r3, [r7, #4]
    edcc:	18d3      	adds	r3, r2, r3
    edce:	781b      	ldrb	r3, [r3, #0]
    edd0:	b25b      	sxtb	r3, r3
}
    edd2:	0018      	movs	r0, r3
    edd4:	46bd      	mov	sp, r7
    edd6:	b002      	add	sp, #8
    edd8:	bd80      	pop	{r7, pc}
    edda:	46c0      	nop			; (mov r8, r8)
    eddc:	20000004 	.word	0x20000004

0000ede0 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    ede0:	b580      	push	{r7, lr}
    ede2:	b084      	sub	sp, #16
    ede4:	af00      	add	r7, sp, #0
    ede6:	60f8      	str	r0, [r7, #12]
    ede8:	60b9      	str	r1, [r7, #8]
    edea:	1dfb      	adds	r3, r7, #7
    edec:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    edee:	1dfb      	adds	r3, r7, #7
    edf0:	781b      	ldrb	r3, [r3, #0]
    edf2:	68fa      	ldr	r2, [r7, #12]
    edf4:	009b      	lsls	r3, r3, #2
    edf6:	18d3      	adds	r3, r2, r3
    edf8:	3304      	adds	r3, #4
    edfa:	68ba      	ldr	r2, [r7, #8]
    edfc:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    edfe:	68fb      	ldr	r3, [r7, #12]
    ee00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    ee02:	1dfb      	adds	r3, r7, #7
    ee04:	7819      	ldrb	r1, [r3, #0]
    ee06:	4b05      	ldr	r3, [pc, #20]	; (ee1c <tcc_register_callback+0x3c>)
    ee08:	0089      	lsls	r1, r1, #2
    ee0a:	58cb      	ldr	r3, [r1, r3]
    ee0c:	431a      	orrs	r2, r3
    ee0e:	68fb      	ldr	r3, [r7, #12]
    ee10:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    ee12:	2300      	movs	r3, #0
}
    ee14:	0018      	movs	r0, r3
    ee16:	46bd      	mov	sp, r7
    ee18:	b004      	add	sp, #16
    ee1a:	bd80      	pop	{r7, pc}
    ee1c:	000193d8 	.word	0x000193d8

0000ee20 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    ee20:	b580      	push	{r7, lr}
    ee22:	b082      	sub	sp, #8
    ee24:	af00      	add	r7, sp, #0
    ee26:	6078      	str	r0, [r7, #4]
    ee28:	000a      	movs	r2, r1
    ee2a:	1cfb      	adds	r3, r7, #3
    ee2c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    ee2e:	687b      	ldr	r3, [r7, #4]
    ee30:	681b      	ldr	r3, [r3, #0]
    ee32:	0018      	movs	r0, r3
    ee34:	4b0f      	ldr	r3, [pc, #60]	; (ee74 <tcc_enable_callback+0x54>)
    ee36:	4798      	blx	r3
    ee38:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    ee3a:	0018      	movs	r0, r3
    ee3c:	4b0e      	ldr	r3, [pc, #56]	; (ee78 <tcc_enable_callback+0x58>)
    ee3e:	4798      	blx	r3
    ee40:	0003      	movs	r3, r0
    ee42:	0018      	movs	r0, r3
    ee44:	4b0d      	ldr	r3, [pc, #52]	; (ee7c <tcc_enable_callback+0x5c>)
    ee46:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    ee48:	687b      	ldr	r3, [r7, #4]
    ee4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ee4c:	1cfb      	adds	r3, r7, #3
    ee4e:	7819      	ldrb	r1, [r3, #0]
    ee50:	4b0b      	ldr	r3, [pc, #44]	; (ee80 <tcc_enable_callback+0x60>)
    ee52:	0089      	lsls	r1, r1, #2
    ee54:	58cb      	ldr	r3, [r1, r3]
    ee56:	431a      	orrs	r2, r3
    ee58:	687b      	ldr	r3, [r7, #4]
    ee5a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    ee5c:	687b      	ldr	r3, [r7, #4]
    ee5e:	681b      	ldr	r3, [r3, #0]
    ee60:	1cfa      	adds	r2, r7, #3
    ee62:	7811      	ldrb	r1, [r2, #0]
    ee64:	4a06      	ldr	r2, [pc, #24]	; (ee80 <tcc_enable_callback+0x60>)
    ee66:	0089      	lsls	r1, r1, #2
    ee68:	588a      	ldr	r2, [r1, r2]
    ee6a:	629a      	str	r2, [r3, #40]	; 0x28
}
    ee6c:	46c0      	nop			; (mov r8, r8)
    ee6e:	46bd      	mov	sp, r7
    ee70:	b002      	add	sp, #8
    ee72:	bd80      	pop	{r7, pc}
    ee74:	0000e331 	.word	0x0000e331
    ee78:	0000edc1 	.word	0x0000edc1
    ee7c:	0000ed95 	.word	0x0000ed95
    ee80:	000193d8 	.word	0x000193d8

0000ee84 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    ee84:	b580      	push	{r7, lr}
    ee86:	af00      	add	r7, sp, #0
    ee88:	2000      	movs	r0, #0
    ee8a:	4b02      	ldr	r3, [pc, #8]	; (ee94 <TCC0_Handler+0x10>)
    ee8c:	4798      	blx	r3
    ee8e:	46c0      	nop			; (mov r8, r8)
    ee90:	46bd      	mov	sp, r7
    ee92:	bd80      	pop	{r7, pc}
    ee94:	0000eec1 	.word	0x0000eec1

0000ee98 <TCC1_Handler>:
    ee98:	b580      	push	{r7, lr}
    ee9a:	af00      	add	r7, sp, #0
    ee9c:	2001      	movs	r0, #1
    ee9e:	4b02      	ldr	r3, [pc, #8]	; (eea8 <TCC1_Handler+0x10>)
    eea0:	4798      	blx	r3
    eea2:	46c0      	nop			; (mov r8, r8)
    eea4:	46bd      	mov	sp, r7
    eea6:	bd80      	pop	{r7, pc}
    eea8:	0000eec1 	.word	0x0000eec1

0000eeac <TCC2_Handler>:
    eeac:	b580      	push	{r7, lr}
    eeae:	af00      	add	r7, sp, #0
    eeb0:	2002      	movs	r0, #2
    eeb2:	4b02      	ldr	r3, [pc, #8]	; (eebc <TCC2_Handler+0x10>)
    eeb4:	4798      	blx	r3
    eeb6:	46c0      	nop			; (mov r8, r8)
    eeb8:	46bd      	mov	sp, r7
    eeba:	bd80      	pop	{r7, pc}
    eebc:	0000eec1 	.word	0x0000eec1

0000eec0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    eec0:	b580      	push	{r7, lr}
    eec2:	b086      	sub	sp, #24
    eec4:	af00      	add	r7, sp, #0
    eec6:	0002      	movs	r2, r0
    eec8:	1dfb      	adds	r3, r7, #7
    eeca:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    eecc:	1dfb      	adds	r3, r7, #7
    eece:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    eed0:	4b18      	ldr	r3, [pc, #96]	; (ef34 <_tcc_interrupt_handler+0x74>)
    eed2:	0092      	lsls	r2, r2, #2
    eed4:	58d3      	ldr	r3, [r2, r3]
    eed6:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    eed8:	693b      	ldr	r3, [r7, #16]
    eeda:	681b      	ldr	r3, [r3, #0]
    eedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    eede:	693b      	ldr	r3, [r7, #16]
    eee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    eee2:	401a      	ands	r2, r3
			module->enable_callback_mask);
    eee4:	693b      	ldr	r3, [r7, #16]
    eee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    eee8:	4013      	ands	r3, r2
    eeea:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    eeec:	2300      	movs	r3, #0
    eeee:	617b      	str	r3, [r7, #20]
    eef0:	e019      	b.n	ef26 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    eef2:	4b11      	ldr	r3, [pc, #68]	; (ef38 <_tcc_interrupt_handler+0x78>)
    eef4:	697a      	ldr	r2, [r7, #20]
    eef6:	0092      	lsls	r2, r2, #2
    eef8:	58d3      	ldr	r3, [r2, r3]
    eefa:	68fa      	ldr	r2, [r7, #12]
    eefc:	4013      	ands	r3, r2
    eefe:	d00f      	beq.n	ef20 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    ef00:	693a      	ldr	r2, [r7, #16]
    ef02:	697b      	ldr	r3, [r7, #20]
    ef04:	009b      	lsls	r3, r3, #2
    ef06:	18d3      	adds	r3, r2, r3
    ef08:	3304      	adds	r3, #4
    ef0a:	681b      	ldr	r3, [r3, #0]
    ef0c:	693a      	ldr	r2, [r7, #16]
    ef0e:	0010      	movs	r0, r2
    ef10:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    ef12:	693b      	ldr	r3, [r7, #16]
    ef14:	681b      	ldr	r3, [r3, #0]
    ef16:	4a08      	ldr	r2, [pc, #32]	; (ef38 <_tcc_interrupt_handler+0x78>)
    ef18:	6979      	ldr	r1, [r7, #20]
    ef1a:	0089      	lsls	r1, r1, #2
    ef1c:	588a      	ldr	r2, [r1, r2]
    ef1e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    ef20:	697b      	ldr	r3, [r7, #20]
    ef22:	3301      	adds	r3, #1
    ef24:	617b      	str	r3, [r7, #20]
    ef26:	697b      	ldr	r3, [r7, #20]
    ef28:	2b0b      	cmp	r3, #11
    ef2a:	dde2      	ble.n	eef2 <_tcc_interrupt_handler+0x32>
		}
	}
}
    ef2c:	46c0      	nop			; (mov r8, r8)
    ef2e:	46bd      	mov	sp, r7
    ef30:	b006      	add	sp, #24
    ef32:	bd80      	pop	{r7, pc}
    ef34:	20000410 	.word	0x20000410
    ef38:	000193d8 	.word	0x000193d8

0000ef3c <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
    ef3c:	b580      	push	{r7, lr}
    ef3e:	b082      	sub	sp, #8
    ef40:	af00      	add	r7, sp, #0
    ef42:	6078      	str	r0, [r7, #4]
	config->port = 80;
    ef44:	687b      	ldr	r3, [r7, #4]
    ef46:	2250      	movs	r2, #80	; 0x50
    ef48:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
    ef4a:	687b      	ldr	r3, [r7, #4]
    ef4c:	2200      	movs	r2, #0
    ef4e:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
    ef50:	687b      	ldr	r3, [r7, #4]
    ef52:	4a0b      	ldr	r2, [pc, #44]	; (ef80 <http_client_get_config_defaults+0x44>)
    ef54:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
    ef56:	687b      	ldr	r3, [r7, #4]
    ef58:	2200      	movs	r2, #0
    ef5a:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
    ef5c:	687b      	ldr	r3, [r7, #4]
    ef5e:	2200      	movs	r2, #0
    ef60:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
    ef62:	687b      	ldr	r3, [r7, #4]
    ef64:	2280      	movs	r2, #128	; 0x80
    ef66:	0052      	lsls	r2, r2, #1
    ef68:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    ef6a:	687b      	ldr	r3, [r7, #4]
    ef6c:	2252      	movs	r2, #82	; 0x52
    ef6e:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    ef70:	687b      	ldr	r3, [r7, #4]
    ef72:	4a04      	ldr	r2, [pc, #16]	; (ef84 <http_client_get_config_defaults+0x48>)
    ef74:	619a      	str	r2, [r3, #24]
}
    ef76:	46c0      	nop			; (mov r8, r8)
    ef78:	46bd      	mov	sp, r7
    ef7a:	b002      	add	sp, #8
    ef7c:	bd80      	pop	{r7, pc}
    ef7e:	46c0      	nop			; (mov r8, r8)
    ef80:	00004e20 	.word	0x00004e20
    ef84:	00019408 	.word	0x00019408

0000ef88 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
    ef88:	b590      	push	{r4, r7, lr}
    ef8a:	b083      	sub	sp, #12
    ef8c:	af00      	add	r7, sp, #0
    ef8e:	6078      	str	r0, [r7, #4]
    ef90:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
    ef92:	687b      	ldr	r3, [r7, #4]
    ef94:	2b00      	cmp	r3, #0
    ef96:	d002      	beq.n	ef9e <http_client_init+0x16>
    ef98:	683b      	ldr	r3, [r7, #0]
    ef9a:	2b00      	cmp	r3, #0
    ef9c:	d102      	bne.n	efa4 <http_client_init+0x1c>
		return -EINVAL;
    ef9e:	2316      	movs	r3, #22
    efa0:	425b      	negs	r3, r3
    efa2:	e058      	b.n	f056 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
    efa4:	683b      	ldr	r3, [r7, #0]
    efa6:	691b      	ldr	r3, [r3, #16]
    efa8:	2b00      	cmp	r3, #0
    efaa:	d102      	bne.n	efb2 <http_client_init+0x2a>
		return -EINVAL;
    efac:	2316      	movs	r3, #22
    efae:	425b      	negs	r3, r3
    efb0:	e051      	b.n	f056 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
    efb2:	683b      	ldr	r3, [r7, #0]
    efb4:	685b      	ldr	r3, [r3, #4]
    efb6:	2b00      	cmp	r3, #0
    efb8:	d102      	bne.n	efc0 <http_client_init+0x38>
		return -EINVAL;
    efba:	2316      	movs	r3, #22
    efbc:	425b      	negs	r3, r3
    efbe:	e04a      	b.n	f056 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    efc0:	683b      	ldr	r3, [r7, #0]
    efc2:	695b      	ldr	r3, [r3, #20]
    efc4:	2b51      	cmp	r3, #81	; 0x51
    efc6:	d802      	bhi.n	efce <http_client_init+0x46>
		return -EINVAL;
    efc8:	2316      	movs	r3, #22
    efca:	425b      	negs	r3, r3
    efcc:	e043      	b.n	f056 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
    efce:	687b      	ldr	r3, [r7, #4]
    efd0:	22e8      	movs	r2, #232	; 0xe8
    efd2:	2100      	movs	r1, #0
    efd4:	0018      	movs	r0, r3
    efd6:	4b22      	ldr	r3, [pc, #136]	; (f060 <http_client_init+0xd8>)
    efd8:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    efda:	687b      	ldr	r3, [r7, #4]
    efdc:	3350      	adds	r3, #80	; 0x50
    efde:	6839      	ldr	r1, [r7, #0]
    efe0:	221c      	movs	r2, #28
    efe2:	0018      	movs	r0, r3
    efe4:	4b1f      	ldr	r3, [pc, #124]	; (f064 <http_client_init+0xdc>)
    efe6:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
    efe8:	687b      	ldr	r3, [r7, #4]
    efea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    efec:	2b00      	cmp	r3, #0
    efee:	d115      	bne.n	f01c <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    eff0:	683b      	ldr	r3, [r7, #0]
    eff2:	691b      	ldr	r3, [r3, #16]
    eff4:	0018      	movs	r0, r3
    eff6:	4b1c      	ldr	r3, [pc, #112]	; (f068 <http_client_init+0xe0>)
    eff8:	4798      	blx	r3
    effa:	0003      	movs	r3, r0
    effc:	001a      	movs	r2, r3
    effe:	687b      	ldr	r3, [r7, #4]
    f000:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    f002:	687b      	ldr	r3, [r7, #4]
    f004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    f006:	2b00      	cmp	r3, #0
    f008:	d102      	bne.n	f010 <http_client_init+0x88>
			return -ENOMEM;
    f00a:	230c      	movs	r3, #12
    f00c:	425b      	negs	r3, r3
    f00e:	e022      	b.n	f056 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
    f010:	687b      	ldr	r3, [r7, #4]
    f012:	2241      	movs	r2, #65	; 0x41
    f014:	5c99      	ldrb	r1, [r3, r2]
    f016:	2004      	movs	r0, #4
    f018:	4301      	orrs	r1, r0
    f01a:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
    f01c:	683b      	ldr	r3, [r7, #0]
    f01e:	891b      	ldrh	r3, [r3, #8]
    f020:	2b00      	cmp	r3, #0
    f022:	d010      	beq.n	f046 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    f024:	683b      	ldr	r3, [r7, #0]
    f026:	6858      	ldr	r0, [r3, #4]
    f028:	687a      	ldr	r2, [r7, #4]
    f02a:	4910      	ldr	r1, [pc, #64]	; (f06c <http_client_init+0xe4>)
    f02c:	2300      	movs	r3, #0
    f02e:	4c10      	ldr	r4, [pc, #64]	; (f070 <http_client_init+0xe8>)
    f030:	47a0      	blx	r4
    f032:	0002      	movs	r2, r0
    f034:	687b      	ldr	r3, [r7, #4]
    f036:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
    f038:	687b      	ldr	r3, [r7, #4]
    f03a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f03c:	2b00      	cmp	r3, #0
    f03e:	da02      	bge.n	f046 <http_client_init+0xbe>
			return -ENOSPC;
    f040:	231c      	movs	r3, #28
    f042:	425b      	negs	r3, r3
    f044:	e007      	b.n	f056 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
    f046:	687b      	ldr	r3, [r7, #4]
    f048:	2200      	movs	r2, #0
    f04a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    f04c:	687b      	ldr	r3, [r7, #4]
    f04e:	22d8      	movs	r2, #216	; 0xd8
    f050:	2100      	movs	r1, #0
    f052:	5099      	str	r1, [r3, r2]

	return 0;
    f054:	2300      	movs	r3, #0
}
    f056:	0018      	movs	r0, r3
    f058:	46bd      	mov	sp, r7
    f05a:	b003      	add	sp, #12
    f05c:	bd90      	pop	{r4, r7, pc}
    f05e:	46c0      	nop			; (mov r8, r8)
    f060:	00016c07 	.word	0x00016c07
    f064:	00016bd1 	.word	0x00016bd1
    f068:	00016ba9 	.word	0x00016ba9
    f06c:	0000f339 	.word	0x0000f339
    f070:	000109c9 	.word	0x000109c9

0000f074 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
    f074:	b580      	push	{r7, lr}
    f076:	b082      	sub	sp, #8
    f078:	af00      	add	r7, sp, #0
    f07a:	6078      	str	r0, [r7, #4]
    f07c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
    f07e:	687b      	ldr	r3, [r7, #4]
    f080:	2b00      	cmp	r3, #0
    f082:	d102      	bne.n	f08a <http_client_register_callback+0x16>
		return -EINVAL;
    f084:	2316      	movs	r3, #22
    f086:	425b      	negs	r3, r3
    f088:	e003      	b.n	f092 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
    f08a:	687b      	ldr	r3, [r7, #4]
    f08c:	683a      	ldr	r2, [r7, #0]
    f08e:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
    f090:	2300      	movs	r3, #0
}
    f092:	0018      	movs	r0, r3
    f094:	46bd      	mov	sp, r7
    f096:	b002      	add	sp, #8
    f098:	bd80      	pop	{r7, pc}
	...

0000f09c <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
    f09c:	b580      	push	{r7, lr}
    f09e:	b082      	sub	sp, #8
    f0a0:	af00      	add	r7, sp, #0
    f0a2:	6078      	str	r0, [r7, #4]
	switch (err) {
    f0a4:	687b      	ldr	r3, [r7, #4]
    f0a6:	330e      	adds	r3, #14
    f0a8:	2b0e      	cmp	r3, #14
    f0aa:	d825      	bhi.n	f0f8 <_hwerr_to_stderr+0x5c>
    f0ac:	009a      	lsls	r2, r3, #2
    f0ae:	4b18      	ldr	r3, [pc, #96]	; (f110 <_hwerr_to_stderr+0x74>)
    f0b0:	18d3      	adds	r3, r2, r3
    f0b2:	681b      	ldr	r3, [r3, #0]
    f0b4:	469f      	mov	pc, r3
		case 0:
			return -EIO;
    f0b6:	2305      	movs	r3, #5
    f0b8:	425b      	negs	r3, r3
    f0ba:	e024      	b.n	f106 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
    f0bc:	2302      	movs	r3, #2
    f0be:	425b      	negs	r3, r3
    f0c0:	e021      	b.n	f106 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
    f0c2:	2370      	movs	r3, #112	; 0x70
    f0c4:	425b      	negs	r3, r3
    f0c6:	e01e      	b.n	f106 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
    f0c8:	230c      	movs	r3, #12
    f0ca:	425b      	negs	r3, r3
    f0cc:	e01b      	b.n	f106 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
    f0ce:	2316      	movs	r3, #22
    f0d0:	425b      	negs	r3, r3
    f0d2:	e018      	b.n	f106 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
    f0d4:	230c      	movs	r3, #12
    f0d6:	425b      	negs	r3, r3
    f0d8:	e015      	b.n	f106 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
    f0da:	2305      	movs	r3, #5
    f0dc:	425b      	negs	r3, r3
    f0de:	e012      	b.n	f106 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
    f0e0:	2379      	movs	r3, #121	; 0x79
    f0e2:	425b      	negs	r3, r3
    f0e4:	e00f      	b.n	f106 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
    f0e6:	2368      	movs	r3, #104	; 0x68
    f0e8:	425b      	negs	r3, r3
    f0ea:	e00c      	b.n	f106 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
    f0ec:	230b      	movs	r3, #11
    f0ee:	425b      	negs	r3, r3
    f0f0:	e009      	b.n	f106 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
    f0f2:	2310      	movs	r3, #16
    f0f4:	425b      	negs	r3, r3
    f0f6:	e006      	b.n	f106 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
    f0f8:	687b      	ldr	r3, [r7, #4]
    f0fa:	2b00      	cmp	r3, #0
    f0fc:	da02      	bge.n	f104 <_hwerr_to_stderr+0x68>
				return -EIO;
    f0fe:	2305      	movs	r3, #5
    f100:	425b      	negs	r3, r3
    f102:	e000      	b.n	f106 <_hwerr_to_stderr+0x6a>
			}
			return 0;
    f104:	2300      	movs	r3, #0
	}
}
    f106:	0018      	movs	r0, r3
    f108:	46bd      	mov	sp, r7
    f10a:	b002      	add	sp, #8
    f10c:	bd80      	pop	{r7, pc}
    f10e:	46c0      	nop			; (mov r8, r8)
    f110:	00019544 	.word	0x00019544

0000f114 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    f114:	b580      	push	{r7, lr}
    f116:	b08a      	sub	sp, #40	; 0x28
    f118:	af00      	add	r7, sp, #0
    f11a:	603a      	str	r2, [r7, #0]
    f11c:	1dfb      	adds	r3, r7, #7
    f11e:	1c02      	adds	r2, r0, #0
    f120:	701a      	strb	r2, [r3, #0]
    f122:	1dbb      	adds	r3, r7, #6
    f124:	1c0a      	adds	r2, r1, #0
    f126:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
    f128:	1dfb      	adds	r3, r7, #7
    f12a:	2200      	movs	r2, #0
    f12c:	569a      	ldrsb	r2, [r3, r2]
    f12e:	4b4b      	ldr	r3, [pc, #300]	; (f25c <http_client_socket_event_handler+0x148>)
    f130:	0092      	lsls	r2, r2, #2
    f132:	58d3      	ldr	r3, [r2, r3]
    f134:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
    f136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f138:	2b00      	cmp	r3, #0
    f13a:	d100      	bne.n	f13e <http_client_socket_event_handler+0x2a>
    f13c:	e08a      	b.n	f254 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
    f13e:	1dbb      	adds	r3, r7, #6
    f140:	781b      	ldrb	r3, [r3, #0]
    f142:	2b06      	cmp	r3, #6
    f144:	d040      	beq.n	f1c8 <http_client_socket_event_handler+0xb4>
    f146:	2b07      	cmp	r3, #7
    f148:	d060      	beq.n	f20c <http_client_socket_event_handler+0xf8>
    f14a:	2b05      	cmp	r3, #5
    f14c:	d000      	beq.n	f150 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
    f14e:	e082      	b.n	f256 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
    f150:	683b      	ldr	r3, [r7, #0]
    f152:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
    f154:	6a3b      	ldr	r3, [r7, #32]
    f156:	785b      	ldrb	r3, [r3, #1]
    f158:	b25b      	sxtb	r3, r3
    f15a:	001a      	movs	r2, r3
    f15c:	230c      	movs	r3, #12
    f15e:	18fb      	adds	r3, r7, r3
    f160:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
    f162:	6a3b      	ldr	r3, [r7, #32]
    f164:	785b      	ldrb	r3, [r3, #1]
    f166:	b25b      	sxtb	r3, r3
    f168:	2b00      	cmp	r3, #0
    f16a:	da0c      	bge.n	f186 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    f16c:	6a3b      	ldr	r3, [r7, #32]
    f16e:	785b      	ldrb	r3, [r3, #1]
    f170:	b25b      	sxtb	r3, r3
    f172:	0018      	movs	r0, r3
    f174:	4b3a      	ldr	r3, [pc, #232]	; (f260 <http_client_socket_event_handler+0x14c>)
    f176:	4798      	blx	r3
    f178:	0002      	movs	r2, r0
    f17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f17c:	0011      	movs	r1, r2
    f17e:	0018      	movs	r0, r3
    f180:	4b38      	ldr	r3, [pc, #224]	; (f264 <http_client_socket_event_handler+0x150>)
    f182:	4798      	blx	r3
    	break;
    f184:	e067      	b.n	f256 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
    f186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f18a:	2b00      	cmp	r3, #0
    f18c:	d006      	beq.n	f19c <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    f18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f192:	220c      	movs	r2, #12
    f194:	18ba      	adds	r2, r7, r2
    f196:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f198:	2100      	movs	r1, #0
    f19a:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    f19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f19e:	2203      	movs	r2, #3
    f1a0:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    f1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f1a4:	6d58      	ldr	r0, [r3, #84]	; 0x54
    f1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f1a8:	6c99      	ldr	r1, [r3, #72]	; 0x48
    f1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f1ac:	2258      	movs	r2, #88	; 0x58
    f1ae:	5a9b      	ldrh	r3, [r3, r2]
    f1b0:	001a      	movs	r2, r3
    f1b2:	4b2d      	ldr	r3, [pc, #180]	; (f268 <http_client_socket_event_handler+0x154>)
    f1b4:	4798      	blx	r3
    		_http_client_recv_packet(module);
    f1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f1b8:	0018      	movs	r0, r3
    f1ba:	4b2c      	ldr	r3, [pc, #176]	; (f26c <http_client_socket_event_handler+0x158>)
    f1bc:	4798      	blx	r3
			_http_client_request(module);
    f1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f1c0:	0018      	movs	r0, r3
    f1c2:	4b2b      	ldr	r3, [pc, #172]	; (f270 <http_client_socket_event_handler+0x15c>)
    f1c4:	4798      	blx	r3
    	break;
    f1c6:	e046      	b.n	f256 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
    f1c8:	683b      	ldr	r3, [r7, #0]
    f1ca:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
    f1cc:	69fb      	ldr	r3, [r7, #28]
    f1ce:	2204      	movs	r2, #4
    f1d0:	5e9b      	ldrsh	r3, [r3, r2]
    f1d2:	2b00      	cmp	r3, #0
    f1d4:	dd09      	ble.n	f1ea <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    f1d6:	69fb      	ldr	r3, [r7, #28]
    f1d8:	2204      	movs	r2, #4
    f1da:	5e9b      	ldrsh	r3, [r3, r2]
    f1dc:	001a      	movs	r2, r3
    f1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f1e0:	0011      	movs	r1, r2
    f1e2:	0018      	movs	r0, r3
    f1e4:	4b23      	ldr	r3, [pc, #140]	; (f274 <http_client_socket_event_handler+0x160>)
    f1e6:	4798      	blx	r3
    f1e8:	e00b      	b.n	f202 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    f1ea:	69fb      	ldr	r3, [r7, #28]
    f1ec:	2204      	movs	r2, #4
    f1ee:	5e9b      	ldrsh	r3, [r3, r2]
    f1f0:	0018      	movs	r0, r3
    f1f2:	4b1b      	ldr	r3, [pc, #108]	; (f260 <http_client_socket_event_handler+0x14c>)
    f1f4:	4798      	blx	r3
    f1f6:	0002      	movs	r2, r0
    f1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f1fa:	0011      	movs	r1, r2
    f1fc:	0018      	movs	r0, r3
    f1fe:	4b19      	ldr	r3, [pc, #100]	; (f264 <http_client_socket_event_handler+0x150>)
    f200:	4798      	blx	r3
		_http_client_recv_packet(module);
    f202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f204:	0018      	movs	r0, r3
    f206:	4b19      	ldr	r3, [pc, #100]	; (f26c <http_client_socket_event_handler+0x158>)
    f208:	4798      	blx	r3
		break;
    f20a:	e024      	b.n	f256 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
    f20c:	231a      	movs	r3, #26
    f20e:	18fb      	adds	r3, r7, r3
    f210:	683a      	ldr	r2, [r7, #0]
    f212:	8812      	ldrh	r2, [r2, #0]
    f214:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
    f216:	231a      	movs	r3, #26
    f218:	18fb      	adds	r3, r7, r3
    f21a:	2200      	movs	r2, #0
    f21c:	5e9b      	ldrsh	r3, [r3, r2]
    f21e:	2b00      	cmp	r3, #0
    f220:	da0d      	bge.n	f23e <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    f222:	231a      	movs	r3, #26
    f224:	18fb      	adds	r3, r7, r3
    f226:	2200      	movs	r2, #0
    f228:	5e9b      	ldrsh	r3, [r3, r2]
    f22a:	0018      	movs	r0, r3
    f22c:	4b0c      	ldr	r3, [pc, #48]	; (f260 <http_client_socket_event_handler+0x14c>)
    f22e:	4798      	blx	r3
    f230:	0002      	movs	r2, r0
    f232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f234:	0011      	movs	r1, r2
    f236:	0018      	movs	r0, r3
    f238:	4b0a      	ldr	r3, [pc, #40]	; (f264 <http_client_socket_event_handler+0x150>)
    f23a:	4798      	blx	r3
    f23c:	e003      	b.n	f246 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
    f23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f240:	0018      	movs	r0, r3
    f242:	4b0b      	ldr	r3, [pc, #44]	; (f270 <http_client_socket_event_handler+0x15c>)
    f244:	4798      	blx	r3
		module->sending = 0;
    f246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f248:	2241      	movs	r2, #65	; 0x41
    f24a:	5c99      	ldrb	r1, [r3, r2]
    f24c:	2001      	movs	r0, #1
    f24e:	4381      	bics	r1, r0
    f250:	5499      	strb	r1, [r3, r2]
    	break;
    f252:	e000      	b.n	f256 <http_client_socket_event_handler+0x142>
		return;
    f254:	46c0      	nop			; (mov r8, r8)
	}

}
    f256:	46bd      	mov	sp, r7
    f258:	b00a      	add	sp, #40	; 0x28
    f25a:	bd80      	pop	{r7, pc}
    f25c:	20000220 	.word	0x20000220
    f260:	0000f09d 	.word	0x0000f09d
    f264:	0000f711 	.word	0x0000f711
    f268:	00010a59 	.word	0x00010a59
    f26c:	0000ff89 	.word	0x0000ff89
    f270:	0000f865 	.word	0x0000f865
    f274:	0000ffed 	.word	0x0000ffed

0000f278 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    f278:	b580      	push	{r7, lr}
    f27a:	b088      	sub	sp, #32
    f27c:	af00      	add	r7, sp, #0
    f27e:	6078      	str	r0, [r7, #4]
    f280:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
    f282:	2300      	movs	r3, #0
    f284:	61fb      	str	r3, [r7, #28]
    f286:	e048      	b.n	f31a <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
    f288:	4b27      	ldr	r3, [pc, #156]	; (f328 <http_client_socket_resolve_handler+0xb0>)
    f28a:	69fa      	ldr	r2, [r7, #28]
    f28c:	0092      	lsls	r2, r2, #2
    f28e:	58d3      	ldr	r3, [r2, r3]
    f290:	2b00      	cmp	r3, #0
    f292:	d03f      	beq.n	f314 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
    f294:	4b24      	ldr	r3, [pc, #144]	; (f328 <http_client_socket_resolve_handler+0xb0>)
    f296:	69fa      	ldr	r2, [r7, #28]
    f298:	0092      	lsls	r2, r2, #2
    f29a:	58d3      	ldr	r3, [r2, r3]
    f29c:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    f29e:	69bb      	ldr	r3, [r7, #24]
    f2a0:	1c5a      	adds	r2, r3, #1
    f2a2:	687b      	ldr	r3, [r7, #4]
    f2a4:	0011      	movs	r1, r2
    f2a6:	0018      	movs	r0, r3
    f2a8:	4b20      	ldr	r3, [pc, #128]	; (f32c <http_client_socket_resolve_handler+0xb4>)
    f2aa:	4798      	blx	r3
    f2ac:	1e03      	subs	r3, r0, #0
    f2ae:	d131      	bne.n	f314 <http_client_socket_resolve_handler+0x9c>
    f2b0:	69bb      	ldr	r3, [r7, #24]
    f2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f2b4:	2b01      	cmp	r3, #1
    f2b6:	d12d      	bne.n	f314 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    f2b8:	683b      	ldr	r3, [r7, #0]
    f2ba:	2b00      	cmp	r3, #0
    f2bc:	d107      	bne.n	f2ce <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    f2be:	2376      	movs	r3, #118	; 0x76
    f2c0:	425a      	negs	r2, r3
    f2c2:	69bb      	ldr	r3, [r7, #24]
    f2c4:	0011      	movs	r1, r2
    f2c6:	0018      	movs	r0, r3
    f2c8:	4b19      	ldr	r3, [pc, #100]	; (f330 <http_client_socket_resolve_handler+0xb8>)
    f2ca:	4798      	blx	r3
					return;
    f2cc:	e028      	b.n	f320 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
    f2ce:	2308      	movs	r3, #8
    f2d0:	18fb      	adds	r3, r7, r3
    f2d2:	2202      	movs	r2, #2
    f2d4:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    f2d6:	69bb      	ldr	r3, [r7, #24]
    f2d8:	2250      	movs	r2, #80	; 0x50
    f2da:	5a9b      	ldrh	r3, [r3, r2]
    f2dc:	021b      	lsls	r3, r3, #8
    f2de:	b21a      	sxth	r2, r3
    f2e0:	69bb      	ldr	r3, [r7, #24]
    f2e2:	2150      	movs	r1, #80	; 0x50
    f2e4:	5a5b      	ldrh	r3, [r3, r1]
    f2e6:	0a1b      	lsrs	r3, r3, #8
    f2e8:	b29b      	uxth	r3, r3
    f2ea:	b21b      	sxth	r3, r3
    f2ec:	4313      	orrs	r3, r2
    f2ee:	b21b      	sxth	r3, r3
    f2f0:	b29a      	uxth	r2, r3
    f2f2:	2308      	movs	r3, #8
    f2f4:	18fb      	adds	r3, r7, r3
    f2f6:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
    f2f8:	2308      	movs	r3, #8
    f2fa:	18fb      	adds	r3, r7, r3
    f2fc:	683a      	ldr	r2, [r7, #0]
    f2fe:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    f300:	69bb      	ldr	r3, [r7, #24]
    f302:	781b      	ldrb	r3, [r3, #0]
    f304:	b25b      	sxtb	r3, r3
    f306:	2208      	movs	r2, #8
    f308:	18b9      	adds	r1, r7, r2
    f30a:	2210      	movs	r2, #16
    f30c:	0018      	movs	r0, r3
    f30e:	4b09      	ldr	r3, [pc, #36]	; (f334 <http_client_socket_resolve_handler+0xbc>)
    f310:	4798      	blx	r3
				return;
    f312:	e005      	b.n	f320 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    f314:	69fb      	ldr	r3, [r7, #28]
    f316:	3301      	adds	r3, #1
    f318:	61fb      	str	r3, [r7, #28]
    f31a:	69fb      	ldr	r3, [r7, #28]
    f31c:	2b06      	cmp	r3, #6
    f31e:	ddb3      	ble.n	f288 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
    f320:	46bd      	mov	sp, r7
    f322:	b008      	add	sp, #32
    f324:	bd80      	pop	{r7, pc}
    f326:	46c0      	nop			; (mov r8, r8)
    f328:	20000220 	.word	0x20000220
    f32c:	0001706d 	.word	0x0001706d
    f330:	0000f711 	.word	0x0000f711
    f334:	0000d211 	.word	0x0000d211

0000f338 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
    f338:	b580      	push	{r7, lr}
    f33a:	b086      	sub	sp, #24
    f33c:	af00      	add	r7, sp, #0
    f33e:	60f8      	str	r0, [r7, #12]
    f340:	60b9      	str	r1, [r7, #8]
    f342:	607a      	str	r2, [r7, #4]
    f344:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
    f346:	687b      	ldr	r3, [r7, #4]
    f348:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
    f34a:	697b      	ldr	r3, [r7, #20]
    f34c:	2b00      	cmp	r3, #0
    f34e:	d007      	beq.n	f360 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
    f350:	233e      	movs	r3, #62	; 0x3e
    f352:	425a      	negs	r2, r3
    f354:	697b      	ldr	r3, [r7, #20]
    f356:	0011      	movs	r1, r2
    f358:	0018      	movs	r0, r3
    f35a:	4b03      	ldr	r3, [pc, #12]	; (f368 <http_client_timer_callback+0x30>)
    f35c:	4798      	blx	r3
    f35e:	e000      	b.n	f362 <http_client_timer_callback+0x2a>
		return;
    f360:	46c0      	nop			; (mov r8, r8)
}
    f362:	46bd      	mov	sp, r7
    f364:	b006      	add	sp, #24
    f366:	bd80      	pop	{r7, pc}
    f368:	0000f711 	.word	0x0000f711

0000f36c <_is_ip>:

static int _is_ip(const char *host)
{
    f36c:	b580      	push	{r7, lr}
    f36e:	b084      	sub	sp, #16
    f370:	af00      	add	r7, sp, #0
    f372:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
    f374:	2300      	movs	r3, #0
    f376:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
    f378:	e03a      	b.n	f3f0 <_is_ip+0x84>
		ch = *host++;
    f37a:	687b      	ldr	r3, [r7, #4]
    f37c:	1c5a      	adds	r2, r3, #1
    f37e:	607a      	str	r2, [r7, #4]
    f380:	220b      	movs	r2, #11
    f382:	18ba      	adds	r2, r7, r2
    f384:	781b      	ldrb	r3, [r3, #0]
    f386:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    f388:	230b      	movs	r3, #11
    f38a:	18fb      	adds	r3, r7, r3
    f38c:	781b      	ldrb	r3, [r3, #0]
    f38e:	2b60      	cmp	r3, #96	; 0x60
    f390:	d904      	bls.n	f39c <_is_ip+0x30>
    f392:	230b      	movs	r3, #11
    f394:	18fb      	adds	r3, r7, r3
    f396:	781b      	ldrb	r3, [r3, #0]
    f398:	2b66      	cmp	r3, #102	; 0x66
    f39a:	d913      	bls.n	f3c4 <_is_ip+0x58>
    f39c:	230b      	movs	r3, #11
    f39e:	18fb      	adds	r3, r7, r3
    f3a0:	781b      	ldrb	r3, [r3, #0]
    f3a2:	2b40      	cmp	r3, #64	; 0x40
    f3a4:	d904      	bls.n	f3b0 <_is_ip+0x44>
    f3a6:	230b      	movs	r3, #11
    f3a8:	18fb      	adds	r3, r7, r3
    f3aa:	781b      	ldrb	r3, [r3, #0]
    f3ac:	2b46      	cmp	r3, #70	; 0x46
    f3ae:	d909      	bls.n	f3c4 <_is_ip+0x58>
    f3b0:	230b      	movs	r3, #11
    f3b2:	18fb      	adds	r3, r7, r3
    f3b4:	781b      	ldrb	r3, [r3, #0]
    f3b6:	2b3a      	cmp	r3, #58	; 0x3a
    f3b8:	d004      	beq.n	f3c4 <_is_ip+0x58>
    f3ba:	230b      	movs	r3, #11
    f3bc:	18fb      	adds	r3, r7, r3
    f3be:	781b      	ldrb	r3, [r3, #0]
    f3c0:	2b2f      	cmp	r3, #47	; 0x2f
    f3c2:	d102      	bne.n	f3ca <_is_ip+0x5e>
			isv6 = 1;
    f3c4:	2301      	movs	r3, #1
    f3c6:	60fb      	str	r3, [r7, #12]
    f3c8:	e012      	b.n	f3f0 <_is_ip+0x84>
		} else if (ch == '.') {
    f3ca:	230b      	movs	r3, #11
    f3cc:	18fb      	adds	r3, r7, r3
    f3ce:	781b      	ldrb	r3, [r3, #0]
    f3d0:	2b2e      	cmp	r3, #46	; 0x2e
    f3d2:	d104      	bne.n	f3de <_is_ip+0x72>
			if (isv6) {
    f3d4:	68fb      	ldr	r3, [r7, #12]
    f3d6:	2b00      	cmp	r3, #0
    f3d8:	d00a      	beq.n	f3f0 <_is_ip+0x84>
				return 0;
    f3da:	2300      	movs	r3, #0
    f3dc:	e00d      	b.n	f3fa <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
    f3de:	230b      	movs	r3, #11
    f3e0:	18fb      	adds	r3, r7, r3
    f3e2:	781b      	ldrb	r3, [r3, #0]
    f3e4:	2230      	movs	r2, #48	; 0x30
    f3e6:	4013      	ands	r3, r2
    f3e8:	2b30      	cmp	r3, #48	; 0x30
    f3ea:	d001      	beq.n	f3f0 <_is_ip+0x84>
			return 0;
    f3ec:	2300      	movs	r3, #0
    f3ee:	e004      	b.n	f3fa <_is_ip+0x8e>
	while (*host != '\0') {
    f3f0:	687b      	ldr	r3, [r7, #4]
    f3f2:	781b      	ldrb	r3, [r3, #0]
    f3f4:	2b00      	cmp	r3, #0
    f3f6:	d1c0      	bne.n	f37a <_is_ip+0xe>
		}
	}
	return 1;
    f3f8:	2301      	movs	r3, #1
}
    f3fa:	0018      	movs	r0, r3
    f3fc:	46bd      	mov	sp, r7
    f3fe:	b004      	add	sp, #16
    f400:	bd80      	pop	{r7, pc}
	...

0000f404 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
    f404:	b5b0      	push	{r4, r5, r7, lr}
    f406:	b08e      	sub	sp, #56	; 0x38
    f408:	af00      	add	r7, sp, #0
    f40a:	60f8      	str	r0, [r7, #12]
    f40c:	60b9      	str	r1, [r7, #8]
    f40e:	603b      	str	r3, [r7, #0]
    f410:	1dfb      	adds	r3, r7, #7
    f412:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
    f414:	2337      	movs	r3, #55	; 0x37
    f416:	18fb      	adds	r3, r7, r3
    f418:	2200      	movs	r2, #0
    f41a:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
    f41c:	2300      	movs	r3, #0
    f41e:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
    f420:	2300      	movs	r3, #0
    f422:	633b      	str	r3, [r7, #48]	; 0x30
    f424:	2300      	movs	r3, #0
    f426:	62fb      	str	r3, [r7, #44]	; 0x2c
    f428:	2300      	movs	r3, #0
    f42a:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
    f42c:	68fb      	ldr	r3, [r7, #12]
    f42e:	2b00      	cmp	r3, #0
    f430:	d102      	bne.n	f438 <http_client_send_request+0x34>
		return -EINVAL;
    f432:	2316      	movs	r3, #22
    f434:	425b      	negs	r3, r3
    f436:	e145      	b.n	f6c4 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
    f438:	68fb      	ldr	r3, [r7, #12]
    f43a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f43c:	2b02      	cmp	r3, #2
    f43e:	d902      	bls.n	f446 <http_client_send_request+0x42>
		return -EBUSY;
    f440:	2310      	movs	r3, #16
    f442:	425b      	negs	r3, r3
    f444:	e13e      	b.n	f6c4 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
    f446:	49a1      	ldr	r1, [pc, #644]	; (f6cc <http_client_send_request+0x2c8>)
    f448:	68bb      	ldr	r3, [r7, #8]
    f44a:	2207      	movs	r2, #7
    f44c:	0018      	movs	r0, r3
    f44e:	4ba0      	ldr	r3, [pc, #640]	; (f6d0 <http_client_send_request+0x2cc>)
    f450:	4798      	blx	r3
    f452:	1e03      	subs	r3, r0, #0
    f454:	d102      	bne.n	f45c <http_client_send_request+0x58>
		i = 7;
    f456:	2307      	movs	r3, #7
    f458:	633b      	str	r3, [r7, #48]	; 0x30
    f45a:	e009      	b.n	f470 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
    f45c:	499d      	ldr	r1, [pc, #628]	; (f6d4 <http_client_send_request+0x2d0>)
    f45e:	68bb      	ldr	r3, [r7, #8]
    f460:	2208      	movs	r2, #8
    f462:	0018      	movs	r0, r3
    f464:	4b9a      	ldr	r3, [pc, #616]	; (f6d0 <http_client_send_request+0x2cc>)
    f466:	4798      	blx	r3
    f468:	1e03      	subs	r3, r0, #0
    f46a:	d101      	bne.n	f470 <http_client_send_request+0x6c>
		i = 8;
    f46c:	2308      	movs	r3, #8
    f46e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    f470:	68fb      	ldr	r3, [r7, #12]
    f472:	1c5c      	adds	r4, r3, #1
    f474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f476:	68ba      	ldr	r2, [r7, #8]
    f478:	18d5      	adds	r5, r2, r3
    f47a:	68fb      	ldr	r3, [r7, #12]
    f47c:	3301      	adds	r3, #1
    f47e:	0018      	movs	r0, r3
    f480:	4b95      	ldr	r3, [pc, #596]	; (f6d8 <http_client_send_request+0x2d4>)
    f482:	4798      	blx	r3
    f484:	0003      	movs	r3, r0
    f486:	001a      	movs	r2, r3
    f488:	0029      	movs	r1, r5
    f48a:	0020      	movs	r0, r4
    f48c:	4b90      	ldr	r3, [pc, #576]	; (f6d0 <http_client_send_request+0x2cc>)
    f48e:	4798      	blx	r3
    f490:	0003      	movs	r3, r0
    f492:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    f494:	e00d      	b.n	f4b2 <http_client_send_request+0xae>
		module->host[j++] = url[i];
    f496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f498:	1c5a      	adds	r2, r3, #1
    f49a:	62fa      	str	r2, [r7, #44]	; 0x2c
    f49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    f49e:	68b9      	ldr	r1, [r7, #8]
    f4a0:	188a      	adds	r2, r1, r2
    f4a2:	7811      	ldrb	r1, [r2, #0]
    f4a4:	68fa      	ldr	r2, [r7, #12]
    f4a6:	18d3      	adds	r3, r2, r3
    f4a8:	1c0a      	adds	r2, r1, #0
    f4aa:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    f4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f4ae:	3301      	adds	r3, #1
    f4b0:	633b      	str	r3, [r7, #48]	; 0x30
    f4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f4b4:	68ba      	ldr	r2, [r7, #8]
    f4b6:	18d3      	adds	r3, r2, r3
    f4b8:	781b      	ldrb	r3, [r3, #0]
    f4ba:	2b00      	cmp	r3, #0
    f4bc:	d005      	beq.n	f4ca <http_client_send_request+0xc6>
    f4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f4c0:	68ba      	ldr	r2, [r7, #8]
    f4c2:	18d3      	adds	r3, r2, r3
    f4c4:	781b      	ldrb	r3, [r3, #0]
    f4c6:	2b2f      	cmp	r3, #47	; 0x2f
    f4c8:	d1e5      	bne.n	f496 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
    f4ca:	68fa      	ldr	r2, [r7, #12]
    f4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f4ce:	18d3      	adds	r3, r2, r3
    f4d0:	3301      	adds	r3, #1
    f4d2:	2200      	movs	r2, #0
    f4d4:	701a      	strb	r2, [r3, #0]
	uri = url + i;
    f4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f4d8:	68ba      	ldr	r2, [r7, #8]
    f4da:	18d3      	adds	r3, r2, r3
    f4dc:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
    f4de:	68fb      	ldr	r3, [r7, #12]
    f4e0:	3301      	adds	r3, #1
    f4e2:	781b      	ldrb	r3, [r3, #0]
    f4e4:	2b00      	cmp	r3, #0
    f4e6:	d102      	bne.n	f4ee <http_client_send_request+0xea>
		return -EINVAL;
    f4e8:	2316      	movs	r3, #22
    f4ea:	425b      	negs	r3, r3
    f4ec:	e0ea      	b.n	f6c4 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    f4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f4f0:	0018      	movs	r0, r3
    f4f2:	4b79      	ldr	r3, [pc, #484]	; (f6d8 <http_client_send_request+0x2d4>)
    f4f4:	4798      	blx	r3
    f4f6:	0003      	movs	r3, r0
    f4f8:	2b3f      	cmp	r3, #63	; 0x3f
    f4fa:	d902      	bls.n	f502 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
    f4fc:	235b      	movs	r3, #91	; 0x5b
    f4fe:	425b      	negs	r3, r3
    f500:	e0e0      	b.n	f6c4 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
    f502:	68fb      	ldr	r3, [r7, #12]
    f504:	22d4      	movs	r2, #212	; 0xd4
    f506:	589b      	ldr	r3, [r3, r2]
    f508:	2b00      	cmp	r3, #0
    f50a:	d005      	beq.n	f518 <http_client_send_request+0x114>
		free(module->req.ext_header);
    f50c:	68fb      	ldr	r3, [r7, #12]
    f50e:	22d4      	movs	r2, #212	; 0xd4
    f510:	589b      	ldr	r3, [r3, r2]
    f512:	0018      	movs	r0, r3
    f514:	4b71      	ldr	r3, [pc, #452]	; (f6dc <http_client_send_request+0x2d8>)
    f516:	4798      	blx	r3
	}
	if (ext_header != NULL) {
    f518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f51a:	2b00      	cmp	r3, #0
    f51c:	d010      	beq.n	f540 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
    f51e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f520:	0018      	movs	r0, r3
    f522:	4b6f      	ldr	r3, [pc, #444]	; (f6e0 <http_client_send_request+0x2dc>)
    f524:	4798      	blx	r3
    f526:	0003      	movs	r3, r0
    f528:	0019      	movs	r1, r3
    f52a:	68fb      	ldr	r3, [r7, #12]
    f52c:	22d4      	movs	r2, #212	; 0xd4
    f52e:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
    f530:	68fb      	ldr	r3, [r7, #12]
    f532:	22d4      	movs	r2, #212	; 0xd4
    f534:	589b      	ldr	r3, [r3, r2]
    f536:	2b00      	cmp	r3, #0
    f538:	d106      	bne.n	f548 <http_client_send_request+0x144>
			return -ENOMEM;
    f53a:	230c      	movs	r3, #12
    f53c:	425b      	negs	r3, r3
    f53e:	e0c1      	b.n	f6c4 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
    f540:	68fb      	ldr	r3, [r7, #12]
    f542:	22d4      	movs	r2, #212	; 0xd4
    f544:	2100      	movs	r1, #0
    f546:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
    f548:	68fb      	ldr	r3, [r7, #12]
    f54a:	2241      	movs	r2, #65	; 0x41
    f54c:	5c99      	ldrb	r1, [r3, r2]
    f54e:	2001      	movs	r0, #1
    f550:	4381      	bics	r1, r0
    f552:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
    f554:	68fb      	ldr	r3, [r7, #12]
    f556:	2200      	movs	r2, #0
    f558:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
    f55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f55c:	781b      	ldrb	r3, [r3, #0]
    f55e:	2b2f      	cmp	r3, #47	; 0x2f
    f560:	d107      	bne.n	f572 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
    f562:	68fb      	ldr	r3, [r7, #12]
    f564:	3370      	adds	r3, #112	; 0x70
    f566:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f568:	0011      	movs	r1, r2
    f56a:	0018      	movs	r0, r3
    f56c:	4b5d      	ldr	r3, [pc, #372]	; (f6e4 <http_client_send_request+0x2e0>)
    f56e:	4798      	blx	r3
    f570:	e00f      	b.n	f592 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
    f572:	68fb      	ldr	r3, [r7, #12]
    f574:	2270      	movs	r2, #112	; 0x70
    f576:	212f      	movs	r1, #47	; 0x2f
    f578:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
    f57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f57c:	781b      	ldrb	r3, [r3, #0]
    f57e:	2b00      	cmp	r3, #0
    f580:	d007      	beq.n	f592 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
    f582:	68fb      	ldr	r3, [r7, #12]
    f584:	3370      	adds	r3, #112	; 0x70
    f586:	3301      	adds	r3, #1
    f588:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f58a:	0011      	movs	r1, r2
    f58c:	0018      	movs	r0, r3
    f58e:	4b55      	ldr	r3, [pc, #340]	; (f6e4 <http_client_send_request+0x2e0>)
    f590:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
    f592:	683b      	ldr	r3, [r7, #0]
    f594:	2b00      	cmp	r3, #0
    f596:	d007      	beq.n	f5a8 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    f598:	68fb      	ldr	r3, [r7, #12]
    f59a:	33b0      	adds	r3, #176	; 0xb0
    f59c:	6839      	ldr	r1, [r7, #0]
    f59e:	2218      	movs	r2, #24
    f5a0:	0018      	movs	r0, r3
    f5a2:	4b51      	ldr	r3, [pc, #324]	; (f6e8 <http_client_send_request+0x2e4>)
    f5a4:	4798      	blx	r3
    f5a6:	e006      	b.n	f5b6 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    f5a8:	68fb      	ldr	r3, [r7, #12]
    f5aa:	33b0      	adds	r3, #176	; 0xb0
    f5ac:	2218      	movs	r2, #24
    f5ae:	2100      	movs	r1, #0
    f5b0:	0018      	movs	r0, r3
    f5b2:	4b4e      	ldr	r3, [pc, #312]	; (f6ec <http_client_send_request+0x2e8>)
    f5b4:	4798      	blx	r3
	}

	module->req.method = method;
    f5b6:	68fb      	ldr	r3, [r7, #12]
    f5b8:	1dfa      	adds	r2, r7, #7
    f5ba:	21c8      	movs	r1, #200	; 0xc8
    f5bc:	7812      	ldrb	r2, [r2, #0]
    f5be:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
    f5c0:	68fb      	ldr	r3, [r7, #12]
    f5c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f5c4:	2b01      	cmp	r3, #1
    f5c6:	d003      	beq.n	f5d0 <http_client_send_request+0x1cc>
    f5c8:	d316      	bcc.n	f5f8 <http_client_send_request+0x1f4>
    f5ca:	2b02      	cmp	r3, #2
    f5cc:	d004      	beq.n	f5d8 <http_client_send_request+0x1d4>
    f5ce:	e074      	b.n	f6ba <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
    f5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f5d2:	2b00      	cmp	r3, #0
    f5d4:	d100      	bne.n	f5d8 <http_client_send_request+0x1d4>
    f5d6:	e073      	b.n	f6c0 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
    f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f5da:	2b00      	cmp	r3, #0
    f5dc:	d107      	bne.n	f5ee <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
    f5de:	68fb      	ldr	r3, [r7, #12]
    f5e0:	2203      	movs	r2, #3
    f5e2:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
    f5e4:	68fb      	ldr	r3, [r7, #12]
    f5e6:	0018      	movs	r0, r3
    f5e8:	4b41      	ldr	r3, [pc, #260]	; (f6f0 <http_client_send_request+0x2ec>)
    f5ea:	4798      	blx	r3
			break;
    f5ec:	e069      	b.n	f6c2 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
    f5ee:	68fb      	ldr	r3, [r7, #12]
    f5f0:	2100      	movs	r1, #0
    f5f2:	0018      	movs	r0, r3
    f5f4:	4b3f      	ldr	r3, [pc, #252]	; (f6f4 <http_client_send_request+0x2f0>)
    f5f6:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
    f5f8:	68fb      	ldr	r3, [r7, #12]
    f5fa:	2252      	movs	r2, #82	; 0x52
    f5fc:	5c9b      	ldrb	r3, [r3, r2]
    f5fe:	2b00      	cmp	r3, #0
    f600:	d007      	beq.n	f612 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
    f602:	2337      	movs	r3, #55	; 0x37
    f604:	18fb      	adds	r3, r7, r3
    f606:	2237      	movs	r2, #55	; 0x37
    f608:	18ba      	adds	r2, r7, r2
    f60a:	7812      	ldrb	r2, [r2, #0]
    f60c:	2101      	movs	r1, #1
    f60e:	430a      	orrs	r2, r1
    f610:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    f612:	2337      	movs	r3, #55	; 0x37
    f614:	18fb      	adds	r3, r7, r3
    f616:	781b      	ldrb	r3, [r3, #0]
    f618:	001a      	movs	r2, r3
    f61a:	2101      	movs	r1, #1
    f61c:	2002      	movs	r0, #2
    f61e:	4b36      	ldr	r3, [pc, #216]	; (f6f8 <http_client_send_request+0x2f4>)
    f620:	4798      	blx	r3
    f622:	0003      	movs	r3, r0
    f624:	001a      	movs	r2, r3
    f626:	68fb      	ldr	r3, [r7, #12]
    f628:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
    f62a:	68fb      	ldr	r3, [r7, #12]
    f62c:	781b      	ldrb	r3, [r3, #0]
    f62e:	b25b      	sxtb	r3, r3
    f630:	2b00      	cmp	r3, #0
    f632:	db3f      	blt.n	f6b4 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
    f634:	68fb      	ldr	r3, [r7, #12]
    f636:	781b      	ldrb	r3, [r3, #0]
    f638:	b25b      	sxtb	r3, r3
    f63a:	001a      	movs	r2, r3
    f63c:	4b2f      	ldr	r3, [pc, #188]	; (f6fc <http_client_send_request+0x2f8>)
    f63e:	0092      	lsls	r2, r2, #2
    f640:	68f9      	ldr	r1, [r7, #12]
    f642:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
    f644:	68fb      	ldr	r3, [r7, #12]
    f646:	3301      	adds	r3, #1
    f648:	0018      	movs	r0, r3
    f64a:	4b2d      	ldr	r3, [pc, #180]	; (f700 <http_client_send_request+0x2fc>)
    f64c:	4798      	blx	r3
    f64e:	1e03      	subs	r3, r0, #0
    f650:	d027      	beq.n	f6a2 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
    f652:	2314      	movs	r3, #20
    f654:	18fb      	adds	r3, r7, r3
    f656:	2202      	movs	r2, #2
    f658:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    f65a:	68fb      	ldr	r3, [r7, #12]
    f65c:	2250      	movs	r2, #80	; 0x50
    f65e:	5a9b      	ldrh	r3, [r3, r2]
    f660:	021b      	lsls	r3, r3, #8
    f662:	b21a      	sxth	r2, r3
    f664:	68fb      	ldr	r3, [r7, #12]
    f666:	2150      	movs	r1, #80	; 0x50
    f668:	5a5b      	ldrh	r3, [r3, r1]
    f66a:	0a1b      	lsrs	r3, r3, #8
    f66c:	b29b      	uxth	r3, r3
    f66e:	b21b      	sxth	r3, r3
    f670:	4313      	orrs	r3, r2
    f672:	b21b      	sxth	r3, r3
    f674:	b29a      	uxth	r2, r3
    f676:	2314      	movs	r3, #20
    f678:	18fb      	adds	r3, r7, r3
    f67a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    f67c:	68fb      	ldr	r3, [r7, #12]
    f67e:	3301      	adds	r3, #1
    f680:	0018      	movs	r0, r3
    f682:	4b20      	ldr	r3, [pc, #128]	; (f704 <http_client_send_request+0x300>)
    f684:	4798      	blx	r3
    f686:	0002      	movs	r2, r0
    f688:	2314      	movs	r3, #20
    f68a:	18fb      	adds	r3, r7, r3
    f68c:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    f68e:	68fb      	ldr	r3, [r7, #12]
    f690:	781b      	ldrb	r3, [r3, #0]
    f692:	b25b      	sxtb	r3, r3
    f694:	2214      	movs	r2, #20
    f696:	18b9      	adds	r1, r7, r2
    f698:	2210      	movs	r2, #16
    f69a:	0018      	movs	r0, r3
    f69c:	4b1a      	ldr	r3, [pc, #104]	; (f708 <http_client_send_request+0x304>)
    f69e:	4798      	blx	r3
    f6a0:	e004      	b.n	f6ac <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
    f6a2:	68fb      	ldr	r3, [r7, #12]
    f6a4:	3301      	adds	r3, #1
    f6a6:	0018      	movs	r0, r3
    f6a8:	4b18      	ldr	r3, [pc, #96]	; (f70c <http_client_send_request+0x308>)
    f6aa:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
    f6ac:	68fb      	ldr	r3, [r7, #12]
    f6ae:	2201      	movs	r2, #1
    f6b0:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
    f6b2:	e006      	b.n	f6c2 <http_client_send_request+0x2be>
			return -ENOSPC;
    f6b4:	231c      	movs	r3, #28
    f6b6:	425b      	negs	r3, r3
    f6b8:	e004      	b.n	f6c4 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
    f6ba:	230b      	movs	r3, #11
    f6bc:	425b      	negs	r3, r3
    f6be:	e001      	b.n	f6c4 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
    f6c0:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
    f6c2:	2300      	movs	r3, #0
}
    f6c4:	0018      	movs	r0, r3
    f6c6:	46bd      	mov	sp, r7
    f6c8:	b00e      	add	sp, #56	; 0x38
    f6ca:	bdb0      	pop	{r4, r5, r7, pc}
    f6cc:	00019414 	.word	0x00019414
    f6d0:	000170d9 	.word	0x000170d9
    f6d4:	0001941c 	.word	0x0001941c
    f6d8:	000170cb 	.word	0x000170cb
    f6dc:	00016bbd 	.word	0x00016bbd
    f6e0:	00017091 	.word	0x00017091
    f6e4:	00017081 	.word	0x00017081
    f6e8:	00016bd1 	.word	0x00016bd1
    f6ec:	00016c07 	.word	0x00016c07
    f6f0:	0000f865 	.word	0x0000f865
    f6f4:	0000f711 	.word	0x0000f711
    f6f8:	0000d001 	.word	0x0000d001
    f6fc:	20000220 	.word	0x20000220
    f700:	0000f36d 	.word	0x0000f36d
    f704:	0000d745 	.word	0x0000d745
    f708:	0000d211 	.word	0x0000d211
    f70c:	0000d84d 	.word	0x0000d84d

0000f710 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
    f710:	b580      	push	{r7, lr}
    f712:	b086      	sub	sp, #24
    f714:	af00      	add	r7, sp, #0
    f716:	6078      	str	r0, [r7, #4]
    f718:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
    f71a:	687b      	ldr	r3, [r7, #4]
    f71c:	22c0      	movs	r2, #192	; 0xc0
    f71e:	589b      	ldr	r3, [r3, r2]
    f720:	2b00      	cmp	r3, #0
    f722:	d007      	beq.n	f734 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
    f724:	687b      	ldr	r3, [r7, #4]
    f726:	22c0      	movs	r2, #192	; 0xc0
    f728:	589b      	ldr	r3, [r3, r2]
    f72a:	687a      	ldr	r2, [r7, #4]
    f72c:	21c4      	movs	r1, #196	; 0xc4
    f72e:	5852      	ldr	r2, [r2, r1]
    f730:	0010      	movs	r0, r2
    f732:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
    f734:	687b      	ldr	r3, [r7, #4]
    f736:	33b0      	adds	r3, #176	; 0xb0
    f738:	2218      	movs	r2, #24
    f73a:	2100      	movs	r1, #0
    f73c:	0018      	movs	r0, r3
    f73e:	4b24      	ldr	r3, [pc, #144]	; (f7d0 <_http_client_clear_conn+0xc0>)
    f740:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    f742:	687b      	ldr	r3, [r7, #4]
    f744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f746:	2b00      	cmp	r3, #0
    f748:	d005      	beq.n	f756 <_http_client_clear_conn+0x46>
		close(module->sock);
    f74a:	687b      	ldr	r3, [r7, #4]
    f74c:	781b      	ldrb	r3, [r3, #0]
    f74e:	b25b      	sxtb	r3, r3
    f750:	0018      	movs	r0, r3
    f752:	4b20      	ldr	r3, [pc, #128]	; (f7d4 <_http_client_clear_conn+0xc4>)
    f754:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
    f756:	687b      	ldr	r3, [r7, #4]
    f758:	781b      	ldrb	r3, [r3, #0]
    f75a:	b25b      	sxtb	r3, r3
    f75c:	001a      	movs	r2, r3
    f75e:	4b1e      	ldr	r3, [pc, #120]	; (f7d8 <_http_client_clear_conn+0xc8>)
    f760:	0092      	lsls	r2, r2, #2
    f762:	2100      	movs	r1, #0
    f764:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
    f766:	687b      	ldr	r3, [r7, #4]
    f768:	336c      	adds	r3, #108	; 0x6c
    f76a:	226c      	movs	r2, #108	; 0x6c
    f76c:	2100      	movs	r1, #0
    f76e:	0018      	movs	r0, r3
    f770:	4b17      	ldr	r3, [pc, #92]	; (f7d0 <_http_client_clear_conn+0xc0>)
    f772:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    f774:	687b      	ldr	r3, [r7, #4]
    f776:	33d8      	adds	r3, #216	; 0xd8
    f778:	2210      	movs	r2, #16
    f77a:	2100      	movs	r1, #0
    f77c:	0018      	movs	r0, r3
    f77e:	4b14      	ldr	r3, [pc, #80]	; (f7d0 <_http_client_clear_conn+0xc0>)
    f780:	4798      	blx	r3
	module->req.state = STATE_INIT;
    f782:	687b      	ldr	r3, [r7, #4]
    f784:	2200      	movs	r2, #0
    f786:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    f788:	687b      	ldr	r3, [r7, #4]
    f78a:	22d8      	movs	r2, #216	; 0xd8
    f78c:	2100      	movs	r1, #0
    f78e:	5099      	str	r1, [r3, r2]

	module->sending = 0;
    f790:	687b      	ldr	r3, [r7, #4]
    f792:	2241      	movs	r2, #65	; 0x41
    f794:	5c99      	ldrb	r1, [r3, r2]
    f796:	2001      	movs	r0, #1
    f798:	4381      	bics	r1, r0
    f79a:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
    f79c:	687b      	ldr	r3, [r7, #4]
    f79e:	2241      	movs	r2, #65	; 0x41
    f7a0:	5c99      	ldrb	r1, [r3, r2]
    f7a2:	2002      	movs	r0, #2
    f7a4:	4381      	bics	r1, r0
    f7a6:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
    f7a8:	230c      	movs	r3, #12
    f7aa:	18fb      	adds	r3, r7, r3
    f7ac:	683a      	ldr	r2, [r7, #0]
    f7ae:	601a      	str	r2, [r3, #0]
	if (module->cb) {
    f7b0:	687b      	ldr	r3, [r7, #4]
    f7b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f7b4:	2b00      	cmp	r3, #0
    f7b6:	d006      	beq.n	f7c6 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    f7b8:	687b      	ldr	r3, [r7, #4]
    f7ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f7bc:	220c      	movs	r2, #12
    f7be:	18ba      	adds	r2, r7, r2
    f7c0:	6878      	ldr	r0, [r7, #4]
    f7c2:	2104      	movs	r1, #4
    f7c4:	4798      	blx	r3
	}
}
    f7c6:	46c0      	nop			; (mov r8, r8)
    f7c8:	46bd      	mov	sp, r7
    f7ca:	b006      	add	sp, #24
    f7cc:	bd80      	pop	{r7, pc}
    f7ce:	46c0      	nop			; (mov r8, r8)
    f7d0:	00016c07 	.word	0x00016c07
    f7d4:	0000d609 	.word	0x0000d609
    f7d8:	20000220 	.word	0x20000220

0000f7dc <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    f7dc:	b590      	push	{r4, r7, lr}
    f7de:	b087      	sub	sp, #28
    f7e0:	af00      	add	r7, sp, #0
    f7e2:	60f8      	str	r0, [r7, #12]
    f7e4:	60b9      	str	r1, [r7, #8]
    f7e6:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
    f7e8:	68fb      	ldr	r3, [r7, #12]
    f7ea:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
    f7ec:	697b      	ldr	r3, [r7, #20]
    f7ee:	2241      	movs	r2, #65	; 0x41
    f7f0:	5c99      	ldrb	r1, [r3, r2]
    f7f2:	2001      	movs	r0, #1
    f7f4:	4301      	orrs	r1, r0
    f7f6:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    f7f8:	697b      	ldr	r3, [r7, #20]
    f7fa:	2000      	movs	r0, #0
    f7fc:	5618      	ldrsb	r0, [r3, r0]
    f7fe:	687b      	ldr	r3, [r7, #4]
    f800:	b29a      	uxth	r2, r3
    f802:	68b9      	ldr	r1, [r7, #8]
    f804:	2300      	movs	r3, #0
    f806:	4c14      	ldr	r4, [pc, #80]	; (f858 <_http_client_send_wait+0x7c>)
    f808:	47a0      	blx	r4
    f80a:	0003      	movs	r3, r0
    f80c:	613b      	str	r3, [r7, #16]
    f80e:	693b      	ldr	r3, [r7, #16]
    f810:	2b00      	cmp	r3, #0
    f812:	da0f      	bge.n	f834 <_http_client_send_wait+0x58>
		module->sending = 0;
    f814:	697b      	ldr	r3, [r7, #20]
    f816:	2241      	movs	r2, #65	; 0x41
    f818:	5c99      	ldrb	r1, [r3, r2]
    f81a:	2001      	movs	r0, #1
    f81c:	4381      	bics	r1, r0
    f81e:	5499      	strb	r1, [r3, r2]
		return result;
    f820:	693b      	ldr	r3, [r7, #16]
    f822:	e014      	b.n	f84e <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
    f824:	2000      	movs	r0, #0
    f826:	4b0d      	ldr	r3, [pc, #52]	; (f85c <_http_client_send_wait+0x80>)
    f828:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
    f82a:	697b      	ldr	r3, [r7, #20]
    f82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f82e:	0018      	movs	r0, r3
    f830:	4b0b      	ldr	r3, [pc, #44]	; (f860 <_http_client_send_wait+0x84>)
    f832:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    f834:	697b      	ldr	r3, [r7, #20]
    f836:	2241      	movs	r2, #65	; 0x41
    f838:	5c9b      	ldrb	r3, [r3, r2]
    f83a:	2201      	movs	r2, #1
    f83c:	4013      	ands	r3, r2
    f83e:	b2db      	uxtb	r3, r3
    f840:	2b00      	cmp	r3, #0
    f842:	d003      	beq.n	f84c <_http_client_send_wait+0x70>
    f844:	697b      	ldr	r3, [r7, #20]
    f846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f848:	2b02      	cmp	r3, #2
    f84a:	d8eb      	bhi.n	f824 <_http_client_send_wait+0x48>
	}

	return 0;
    f84c:	2300      	movs	r3, #0
}
    f84e:	0018      	movs	r0, r3
    f850:	46bd      	mov	sp, r7
    f852:	b007      	add	sp, #28
    f854:	bd90      	pop	{r4, r7, pc}
    f856:	46c0      	nop			; (mov r8, r8)
    f858:	0000d325 	.word	0x0000d325
    f85c:	00009f45 	.word	0x00009f45
    f860:	00010ad5 	.word	0x00010ad5

0000f864 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    f864:	b5f0      	push	{r4, r5, r6, r7, lr}
    f866:	b0a1      	sub	sp, #132	; 0x84
    f868:	af02      	add	r7, sp, #8
    f86a:	61f8      	str	r0, [r7, #28]
    f86c:	466b      	mov	r3, sp
    f86e:	001e      	movs	r6, r3
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    f870:	2318      	movs	r3, #24
    f872:	2218      	movs	r2, #24
    f874:	18ba      	adds	r2, r7, r2
    f876:	18d2      	adds	r2, r2, r3
    f878:	4bba      	ldr	r3, [pc, #744]	; (fb64 <_http_client_request+0x300>)
    f87a:	0010      	movs	r0, r2
    f87c:	0019      	movs	r1, r3
    f87e:	2310      	movs	r3, #16
    f880:	001a      	movs	r2, r3
    f882:	4bb9      	ldr	r3, [pc, #740]	; (fb68 <_http_client_request+0x304>)
    f884:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    f886:	69fb      	ldr	r3, [r7, #28]
    f888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f88a:	001a      	movs	r2, r3
    f88c:	3a01      	subs	r2, #1
    f88e:	66fa      	str	r2, [r7, #108]	; 0x6c
    f890:	001c      	movs	r4, r3
    f892:	2200      	movs	r2, #0
    f894:	0015      	movs	r5, r2
    f896:	0020      	movs	r0, r4
    f898:	0029      	movs	r1, r5
    f89a:	0002      	movs	r2, r0
    f89c:	0f52      	lsrs	r2, r2, #29
    f89e:	000c      	movs	r4, r1
    f8a0:	00e4      	lsls	r4, r4, #3
    f8a2:	617c      	str	r4, [r7, #20]
    f8a4:	697c      	ldr	r4, [r7, #20]
    f8a6:	4314      	orrs	r4, r2
    f8a8:	617c      	str	r4, [r7, #20]
    f8aa:	0002      	movs	r2, r0
    f8ac:	00d2      	lsls	r2, r2, #3
    f8ae:	613a      	str	r2, [r7, #16]
    f8b0:	603b      	str	r3, [r7, #0]
    f8b2:	2200      	movs	r2, #0
    f8b4:	607a      	str	r2, [r7, #4]
    f8b6:	6838      	ldr	r0, [r7, #0]
    f8b8:	6879      	ldr	r1, [r7, #4]
    f8ba:	0002      	movs	r2, r0
    f8bc:	0f52      	lsrs	r2, r2, #29
    f8be:	000c      	movs	r4, r1
    f8c0:	00e4      	lsls	r4, r4, #3
    f8c2:	60fc      	str	r4, [r7, #12]
    f8c4:	68fc      	ldr	r4, [r7, #12]
    f8c6:	4314      	orrs	r4, r2
    f8c8:	60fc      	str	r4, [r7, #12]
    f8ca:	0002      	movs	r2, r0
    f8cc:	00d2      	lsls	r2, r2, #3
    f8ce:	60ba      	str	r2, [r7, #8]
    f8d0:	3307      	adds	r3, #7
    f8d2:	08db      	lsrs	r3, r3, #3
    f8d4:	00db      	lsls	r3, r3, #3
    f8d6:	466a      	mov	r2, sp
    f8d8:	1ad3      	subs	r3, r2, r3
    f8da:	469d      	mov	sp, r3
    f8dc:	ab02      	add	r3, sp, #8
    f8de:	3300      	adds	r3, #0
    f8e0:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
    f8e2:	69fb      	ldr	r3, [r7, #28]
    f8e4:	2b00      	cmp	r3, #0
    f8e6:	d100      	bne.n	f8ea <_http_client_request+0x86>
    f8e8:	e346      	b.n	ff78 <_http_client_request+0x714>
		return;
	}

	if (module->sending != 0) {
    f8ea:	69fb      	ldr	r3, [r7, #28]
    f8ec:	2241      	movs	r2, #65	; 0x41
    f8ee:	5c9b      	ldrb	r3, [r3, r2]
    f8f0:	2201      	movs	r2, #1
    f8f2:	4013      	ands	r3, r2
    f8f4:	b2db      	uxtb	r3, r3
    f8f6:	2b00      	cmp	r3, #0
    f8f8:	d000      	beq.n	f8fc <_http_client_request+0x98>
    f8fa:	e33f      	b.n	ff7c <_http_client_request+0x718>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
    f8fc:	69fb      	ldr	r3, [r7, #28]
    f8fe:	33b0      	adds	r3, #176	; 0xb0
    f900:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
    f902:	69fb      	ldr	r3, [r7, #28]
    f904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f906:	2b03      	cmp	r3, #3
    f908:	d003      	beq.n	f912 <_http_client_request+0xae>
    f90a:	2b04      	cmp	r3, #4
    f90c:	d100      	bne.n	f910 <_http_client_request+0xac>
    f90e:	e1b4      	b.n	fc7a <_http_client_request+0x416>
		}

		break;
	default:
		/* Invalid status. */
		break;
    f910:	e330      	b.n	ff74 <_http_client_request+0x710>
		module->req.content_length = 0;
    f912:	69fb      	ldr	r3, [r7, #28]
    f914:	22cc      	movs	r2, #204	; 0xcc
    f916:	2100      	movs	r1, #0
    f918:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
    f91a:	69fb      	ldr	r3, [r7, #28]
    f91c:	22d0      	movs	r2, #208	; 0xd0
    f91e:	2100      	movs	r1, #0
    f920:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    f922:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    f924:	69fb      	ldr	r3, [r7, #28]
    f926:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    f928:	4c90      	ldr	r4, [pc, #576]	; (fb6c <_http_client_request+0x308>)
    f92a:	2334      	movs	r3, #52	; 0x34
    f92c:	2018      	movs	r0, #24
    f92e:	1838      	adds	r0, r7, r0
    f930:	18c0      	adds	r0, r0, r3
    f932:	69fb      	ldr	r3, [r7, #28]
    f934:	9300      	str	r3, [sp, #0]
    f936:	0023      	movs	r3, r4
    f938:	4c8d      	ldr	r4, [pc, #564]	; (fb70 <_http_client_request+0x30c>)
    f93a:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
    f93c:	69fb      	ldr	r3, [r7, #28]
    f93e:	22c8      	movs	r2, #200	; 0xc8
    f940:	5c9b      	ldrb	r3, [r3, r2]
    f942:	2b01      	cmp	r3, #1
    f944:	d10a      	bne.n	f95c <_http_client_request+0xf8>
			stream_writer_send_buffer(&writer, "GET ", 4);
    f946:	498b      	ldr	r1, [pc, #556]	; (fb74 <_http_client_request+0x310>)
    f948:	2334      	movs	r3, #52	; 0x34
    f94a:	2218      	movs	r2, #24
    f94c:	4694      	mov	ip, r2
    f94e:	44bc      	add	ip, r7
    f950:	4463      	add	r3, ip
    f952:	2204      	movs	r2, #4
    f954:	0018      	movs	r0, r3
    f956:	4b88      	ldr	r3, [pc, #544]	; (fb78 <_http_client_request+0x314>)
    f958:	4798      	blx	r3
    f95a:	e04e      	b.n	f9fa <_http_client_request+0x196>
		} else if (module->req.method == HTTP_METHOD_POST) {
    f95c:	69fb      	ldr	r3, [r7, #28]
    f95e:	22c8      	movs	r2, #200	; 0xc8
    f960:	5c9b      	ldrb	r3, [r3, r2]
    f962:	2b02      	cmp	r3, #2
    f964:	d10a      	bne.n	f97c <_http_client_request+0x118>
			stream_writer_send_buffer(&writer, "POST ", 5);
    f966:	4985      	ldr	r1, [pc, #532]	; (fb7c <_http_client_request+0x318>)
    f968:	2334      	movs	r3, #52	; 0x34
    f96a:	2218      	movs	r2, #24
    f96c:	4694      	mov	ip, r2
    f96e:	44bc      	add	ip, r7
    f970:	4463      	add	r3, ip
    f972:	2205      	movs	r2, #5
    f974:	0018      	movs	r0, r3
    f976:	4b80      	ldr	r3, [pc, #512]	; (fb78 <_http_client_request+0x314>)
    f978:	4798      	blx	r3
    f97a:	e03e      	b.n	f9fa <_http_client_request+0x196>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    f97c:	69fb      	ldr	r3, [r7, #28]
    f97e:	22c8      	movs	r2, #200	; 0xc8
    f980:	5c9b      	ldrb	r3, [r3, r2]
    f982:	2b03      	cmp	r3, #3
    f984:	d10a      	bne.n	f99c <_http_client_request+0x138>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    f986:	497e      	ldr	r1, [pc, #504]	; (fb80 <_http_client_request+0x31c>)
    f988:	2334      	movs	r3, #52	; 0x34
    f98a:	2218      	movs	r2, #24
    f98c:	4694      	mov	ip, r2
    f98e:	44bc      	add	ip, r7
    f990:	4463      	add	r3, ip
    f992:	2207      	movs	r2, #7
    f994:	0018      	movs	r0, r3
    f996:	4b78      	ldr	r3, [pc, #480]	; (fb78 <_http_client_request+0x314>)
    f998:	4798      	blx	r3
    f99a:	e02e      	b.n	f9fa <_http_client_request+0x196>
		} else if (module->req.method == HTTP_METHOD_PUT) {
    f99c:	69fb      	ldr	r3, [r7, #28]
    f99e:	22c8      	movs	r2, #200	; 0xc8
    f9a0:	5c9b      	ldrb	r3, [r3, r2]
    f9a2:	2b04      	cmp	r3, #4
    f9a4:	d10a      	bne.n	f9bc <_http_client_request+0x158>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    f9a6:	4977      	ldr	r1, [pc, #476]	; (fb84 <_http_client_request+0x320>)
    f9a8:	2334      	movs	r3, #52	; 0x34
    f9aa:	2218      	movs	r2, #24
    f9ac:	4694      	mov	ip, r2
    f9ae:	44bc      	add	ip, r7
    f9b0:	4463      	add	r3, ip
    f9b2:	2204      	movs	r2, #4
    f9b4:	0018      	movs	r0, r3
    f9b6:	4b70      	ldr	r3, [pc, #448]	; (fb78 <_http_client_request+0x314>)
    f9b8:	4798      	blx	r3
    f9ba:	e01e      	b.n	f9fa <_http_client_request+0x196>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    f9bc:	69fb      	ldr	r3, [r7, #28]
    f9be:	22c8      	movs	r2, #200	; 0xc8
    f9c0:	5c9b      	ldrb	r3, [r3, r2]
    f9c2:	2b05      	cmp	r3, #5
    f9c4:	d10a      	bne.n	f9dc <_http_client_request+0x178>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    f9c6:	4970      	ldr	r1, [pc, #448]	; (fb88 <_http_client_request+0x324>)
    f9c8:	2334      	movs	r3, #52	; 0x34
    f9ca:	2218      	movs	r2, #24
    f9cc:	4694      	mov	ip, r2
    f9ce:	44bc      	add	ip, r7
    f9d0:	4463      	add	r3, ip
    f9d2:	2208      	movs	r2, #8
    f9d4:	0018      	movs	r0, r3
    f9d6:	4b68      	ldr	r3, [pc, #416]	; (fb78 <_http_client_request+0x314>)
    f9d8:	4798      	blx	r3
    f9da:	e00e      	b.n	f9fa <_http_client_request+0x196>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    f9dc:	69fb      	ldr	r3, [r7, #28]
    f9de:	22c8      	movs	r2, #200	; 0xc8
    f9e0:	5c9b      	ldrb	r3, [r3, r2]
    f9e2:	2b06      	cmp	r3, #6
    f9e4:	d109      	bne.n	f9fa <_http_client_request+0x196>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    f9e6:	4969      	ldr	r1, [pc, #420]	; (fb8c <_http_client_request+0x328>)
    f9e8:	2334      	movs	r3, #52	; 0x34
    f9ea:	2218      	movs	r2, #24
    f9ec:	4694      	mov	ip, r2
    f9ee:	44bc      	add	ip, r7
    f9f0:	4463      	add	r3, ip
    f9f2:	2205      	movs	r2, #5
    f9f4:	0018      	movs	r0, r3
    f9f6:	4b60      	ldr	r3, [pc, #384]	; (fb78 <_http_client_request+0x314>)
    f9f8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    f9fa:	69fb      	ldr	r3, [r7, #28]
    f9fc:	3370      	adds	r3, #112	; 0x70
    f9fe:	001c      	movs	r4, r3
    fa00:	69fb      	ldr	r3, [r7, #28]
    fa02:	3370      	adds	r3, #112	; 0x70
    fa04:	0018      	movs	r0, r3
    fa06:	4b62      	ldr	r3, [pc, #392]	; (fb90 <_http_client_request+0x32c>)
    fa08:	4798      	blx	r3
    fa0a:	0002      	movs	r2, r0
    fa0c:	2334      	movs	r3, #52	; 0x34
    fa0e:	2118      	movs	r1, #24
    fa10:	468c      	mov	ip, r1
    fa12:	44bc      	add	ip, r7
    fa14:	4463      	add	r3, ip
    fa16:	0021      	movs	r1, r4
    fa18:	0018      	movs	r0, r3
    fa1a:	4b57      	ldr	r3, [pc, #348]	; (fb78 <_http_client_request+0x314>)
    fa1c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    fa1e:	495d      	ldr	r1, [pc, #372]	; (fb94 <_http_client_request+0x330>)
    fa20:	2334      	movs	r3, #52	; 0x34
    fa22:	2218      	movs	r2, #24
    fa24:	4694      	mov	ip, r2
    fa26:	44bc      	add	ip, r7
    fa28:	4463      	add	r3, ip
    fa2a:	220b      	movs	r2, #11
    fa2c:	0018      	movs	r0, r3
    fa2e:	4b52      	ldr	r3, [pc, #328]	; (fb78 <_http_client_request+0x314>)
    fa30:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    fa32:	4959      	ldr	r1, [pc, #356]	; (fb98 <_http_client_request+0x334>)
    fa34:	2334      	movs	r3, #52	; 0x34
    fa36:	2218      	movs	r2, #24
    fa38:	4694      	mov	ip, r2
    fa3a:	44bc      	add	ip, r7
    fa3c:	4463      	add	r3, ip
    fa3e:	220c      	movs	r2, #12
    fa40:	0018      	movs	r0, r3
    fa42:	4b4d      	ldr	r3, [pc, #308]	; (fb78 <_http_client_request+0x314>)
    fa44:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    fa46:	69fb      	ldr	r3, [r7, #28]
    fa48:	6e9c      	ldr	r4, [r3, #104]	; 0x68
    fa4a:	69fb      	ldr	r3, [r7, #28]
    fa4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    fa4e:	0018      	movs	r0, r3
    fa50:	4b4f      	ldr	r3, [pc, #316]	; (fb90 <_http_client_request+0x32c>)
    fa52:	4798      	blx	r3
    fa54:	0002      	movs	r2, r0
    fa56:	2334      	movs	r3, #52	; 0x34
    fa58:	2118      	movs	r1, #24
    fa5a:	468c      	mov	ip, r1
    fa5c:	44bc      	add	ip, r7
    fa5e:	4463      	add	r3, ip
    fa60:	0021      	movs	r1, r4
    fa62:	0018      	movs	r0, r3
    fa64:	4b44      	ldr	r3, [pc, #272]	; (fb78 <_http_client_request+0x314>)
    fa66:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    fa68:	494c      	ldr	r1, [pc, #304]	; (fb9c <_http_client_request+0x338>)
    fa6a:	2334      	movs	r3, #52	; 0x34
    fa6c:	2218      	movs	r2, #24
    fa6e:	4694      	mov	ip, r2
    fa70:	44bc      	add	ip, r7
    fa72:	4463      	add	r3, ip
    fa74:	2202      	movs	r2, #2
    fa76:	0018      	movs	r0, r3
    fa78:	4b3f      	ldr	r3, [pc, #252]	; (fb78 <_http_client_request+0x314>)
    fa7a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    fa7c:	4948      	ldr	r1, [pc, #288]	; (fba0 <_http_client_request+0x33c>)
    fa7e:	2334      	movs	r3, #52	; 0x34
    fa80:	2218      	movs	r2, #24
    fa82:	4694      	mov	ip, r2
    fa84:	44bc      	add	ip, r7
    fa86:	4463      	add	r3, ip
    fa88:	2206      	movs	r2, #6
    fa8a:	0018      	movs	r0, r3
    fa8c:	4b3a      	ldr	r3, [pc, #232]	; (fb78 <_http_client_request+0x314>)
    fa8e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    fa90:	69fb      	ldr	r3, [r7, #28]
    fa92:	1c5c      	adds	r4, r3, #1
    fa94:	69fb      	ldr	r3, [r7, #28]
    fa96:	3301      	adds	r3, #1
    fa98:	0018      	movs	r0, r3
    fa9a:	4b3d      	ldr	r3, [pc, #244]	; (fb90 <_http_client_request+0x32c>)
    fa9c:	4798      	blx	r3
    fa9e:	0002      	movs	r2, r0
    faa0:	2334      	movs	r3, #52	; 0x34
    faa2:	2118      	movs	r1, #24
    faa4:	468c      	mov	ip, r1
    faa6:	44bc      	add	ip, r7
    faa8:	4463      	add	r3, ip
    faaa:	0021      	movs	r1, r4
    faac:	0018      	movs	r0, r3
    faae:	4b32      	ldr	r3, [pc, #200]	; (fb78 <_http_client_request+0x314>)
    fab0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    fab2:	493a      	ldr	r1, [pc, #232]	; (fb9c <_http_client_request+0x338>)
    fab4:	2334      	movs	r3, #52	; 0x34
    fab6:	2218      	movs	r2, #24
    fab8:	4694      	mov	ip, r2
    faba:	44bc      	add	ip, r7
    fabc:	4463      	add	r3, ip
    fabe:	2202      	movs	r2, #2
    fac0:	0018      	movs	r0, r3
    fac2:	4b2d      	ldr	r3, [pc, #180]	; (fb78 <_http_client_request+0x314>)
    fac4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    fac6:	4937      	ldr	r1, [pc, #220]	; (fba4 <_http_client_request+0x340>)
    fac8:	2334      	movs	r3, #52	; 0x34
    faca:	2218      	movs	r2, #24
    facc:	4694      	mov	ip, r2
    face:	44bc      	add	ip, r7
    fad0:	4463      	add	r3, ip
    fad2:	2218      	movs	r2, #24
    fad4:	0018      	movs	r0, r3
    fad6:	4b28      	ldr	r3, [pc, #160]	; (fb78 <_http_client_request+0x314>)
    fad8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    fada:	4933      	ldr	r1, [pc, #204]	; (fba8 <_http_client_request+0x344>)
    fadc:	2334      	movs	r3, #52	; 0x34
    fade:	2218      	movs	r2, #24
    fae0:	4694      	mov	ip, r2
    fae2:	44bc      	add	ip, r7
    fae4:	4463      	add	r3, ip
    fae6:	2213      	movs	r2, #19
    fae8:	0018      	movs	r0, r3
    faea:	4b23      	ldr	r3, [pc, #140]	; (fb78 <_http_client_request+0x314>)
    faec:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    faee:	492f      	ldr	r1, [pc, #188]	; (fbac <_http_client_request+0x348>)
    faf0:	2334      	movs	r3, #52	; 0x34
    faf2:	2218      	movs	r2, #24
    faf4:	4694      	mov	ip, r2
    faf6:	44bc      	add	ip, r7
    faf8:	4463      	add	r3, ip
    fafa:	2217      	movs	r2, #23
    fafc:	0018      	movs	r0, r3
    fafe:	4b1e      	ldr	r3, [pc, #120]	; (fb78 <_http_client_request+0x314>)
    fb00:	4798      	blx	r3
		if (entity->read != NULL) {
    fb02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fb04:	68db      	ldr	r3, [r3, #12]
    fb06:	2b00      	cmp	r3, #0
    fb08:	d100      	bne.n	fb0c <_http_client_request+0x2a8>
    fb0a:	e089      	b.n	fc20 <_http_client_request+0x3bc>
			if (entity->is_chunked) {
    fb0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fb0e:	781b      	ldrb	r3, [r3, #0]
    fb10:	2b00      	cmp	r3, #0
    fb12:	d00f      	beq.n	fb34 <_http_client_request+0x2d0>
				module->req.content_length = -1;
    fb14:	69fb      	ldr	r3, [r7, #28]
    fb16:	21cc      	movs	r1, #204	; 0xcc
    fb18:	2201      	movs	r2, #1
    fb1a:	4252      	negs	r2, r2
    fb1c:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    fb1e:	4924      	ldr	r1, [pc, #144]	; (fbb0 <_http_client_request+0x34c>)
    fb20:	2334      	movs	r3, #52	; 0x34
    fb22:	2218      	movs	r2, #24
    fb24:	4694      	mov	ip, r2
    fb26:	44bc      	add	ip, r7
    fb28:	4463      	add	r3, ip
    fb2a:	221c      	movs	r2, #28
    fb2c:	0018      	movs	r0, r3
    fb2e:	4b12      	ldr	r3, [pc, #72]	; (fb78 <_http_client_request+0x314>)
    fb30:	4798      	blx	r3
    fb32:	e075      	b.n	fc20 <_http_client_request+0x3bc>
			} else if(entity->get_contents_length) {
    fb34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fb36:	689b      	ldr	r3, [r3, #8]
    fb38:	2b00      	cmp	r3, #0
    fb3a:	d071      	beq.n	fc20 <_http_client_request+0x3bc>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    fb3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fb3e:	689a      	ldr	r2, [r3, #8]
    fb40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fb42:	695b      	ldr	r3, [r3, #20]
    fb44:	0018      	movs	r0, r3
    fb46:	4790      	blx	r2
    fb48:	0001      	movs	r1, r0
    fb4a:	69fb      	ldr	r3, [r7, #28]
    fb4c:	22cc      	movs	r2, #204	; 0xcc
    fb4e:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
    fb50:	69fb      	ldr	r3, [r7, #28]
    fb52:	22cc      	movs	r2, #204	; 0xcc
    fb54:	589b      	ldr	r3, [r3, r2]
    fb56:	2b00      	cmp	r3, #0
    fb58:	da2c      	bge.n	fbb4 <_http_client_request+0x350>
					module->req.content_length = 0;
    fb5a:	69fb      	ldr	r3, [r7, #28]
    fb5c:	22cc      	movs	r2, #204	; 0xcc
    fb5e:	2100      	movs	r1, #0
    fb60:	5099      	str	r1, [r3, r2]
    fb62:	e05d      	b.n	fc20 <_http_client_request+0x3bc>
    fb64:	00019504 	.word	0x00019504
    fb68:	00016bd1 	.word	0x00016bd1
    fb6c:	0000f7dd 	.word	0x0000f7dd
    fb70:	00010731 	.word	0x00010731
    fb74:	00019428 	.word	0x00019428
    fb78:	000107b1 	.word	0x000107b1
    fb7c:	00019430 	.word	0x00019430
    fb80:	00019438 	.word	0x00019438
    fb84:	00019440 	.word	0x00019440
    fb88:	00019448 	.word	0x00019448
    fb8c:	00019454 	.word	0x00019454
    fb90:	000170cb 	.word	0x000170cb
    fb94:	0001945c 	.word	0x0001945c
    fb98:	00019468 	.word	0x00019468
    fb9c:	00019478 	.word	0x00019478
    fba0:	0001947c 	.word	0x0001947c
    fba4:	00019484 	.word	0x00019484
    fba8:	000194a0 	.word	0x000194a0
    fbac:	000194b4 	.word	0x000194b4
    fbb0:	000194cc 	.word	0x000194cc
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    fbb4:	69fb      	ldr	r3, [r7, #28]
    fbb6:	22cc      	movs	r2, #204	; 0xcc
    fbb8:	589b      	ldr	r3, [r3, r2]
    fbba:	001a      	movs	r2, r3
    fbbc:	49e0      	ldr	r1, [pc, #896]	; (ff40 <_http_client_request+0x6dc>)
    fbbe:	2328      	movs	r3, #40	; 0x28
    fbc0:	2018      	movs	r0, #24
    fbc2:	4684      	mov	ip, r0
    fbc4:	44bc      	add	ip, r7
    fbc6:	4463      	add	r3, ip
    fbc8:	0018      	movs	r0, r3
    fbca:	4bde      	ldr	r3, [pc, #888]	; (ff44 <_http_client_request+0x6e0>)
    fbcc:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    fbce:	49de      	ldr	r1, [pc, #888]	; (ff48 <_http_client_request+0x6e4>)
    fbd0:	2334      	movs	r3, #52	; 0x34
    fbd2:	2218      	movs	r2, #24
    fbd4:	4694      	mov	ip, r2
    fbd6:	44bc      	add	ip, r7
    fbd8:	4463      	add	r3, ip
    fbda:	2210      	movs	r2, #16
    fbdc:	0018      	movs	r0, r3
    fbde:	4bdb      	ldr	r3, [pc, #876]	; (ff4c <_http_client_request+0x6e8>)
    fbe0:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
    fbe2:	2328      	movs	r3, #40	; 0x28
    fbe4:	2218      	movs	r2, #24
    fbe6:	4694      	mov	ip, r2
    fbe8:	44bc      	add	ip, r7
    fbea:	4463      	add	r3, ip
    fbec:	0018      	movs	r0, r3
    fbee:	4bd8      	ldr	r3, [pc, #864]	; (ff50 <_http_client_request+0x6ec>)
    fbf0:	4798      	blx	r3
    fbf2:	0002      	movs	r2, r0
    fbf4:	2328      	movs	r3, #40	; 0x28
    fbf6:	2118      	movs	r1, #24
    fbf8:	1879      	adds	r1, r7, r1
    fbfa:	18c9      	adds	r1, r1, r3
    fbfc:	2334      	movs	r3, #52	; 0x34
    fbfe:	2018      	movs	r0, #24
    fc00:	4684      	mov	ip, r0
    fc02:	44bc      	add	ip, r7
    fc04:	4463      	add	r3, ip
    fc06:	0018      	movs	r0, r3
    fc08:	4bd0      	ldr	r3, [pc, #832]	; (ff4c <_http_client_request+0x6e8>)
    fc0a:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    fc0c:	49d1      	ldr	r1, [pc, #836]	; (ff54 <_http_client_request+0x6f0>)
    fc0e:	2334      	movs	r3, #52	; 0x34
    fc10:	2218      	movs	r2, #24
    fc12:	4694      	mov	ip, r2
    fc14:	44bc      	add	ip, r7
    fc16:	4463      	add	r3, ip
    fc18:	2202      	movs	r2, #2
    fc1a:	0018      	movs	r0, r3
    fc1c:	4bcb      	ldr	r3, [pc, #812]	; (ff4c <_http_client_request+0x6e8>)
    fc1e:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
    fc20:	69fb      	ldr	r3, [r7, #28]
    fc22:	22d4      	movs	r2, #212	; 0xd4
    fc24:	589b      	ldr	r3, [r3, r2]
    fc26:	2b00      	cmp	r3, #0
    fc28:	d012      	beq.n	fc50 <_http_client_request+0x3ec>
				module->req.ext_header,
    fc2a:	69fb      	ldr	r3, [r7, #28]
    fc2c:	22d4      	movs	r2, #212	; 0xd4
    fc2e:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
    fc30:	69fb      	ldr	r3, [r7, #28]
    fc32:	22d4      	movs	r2, #212	; 0xd4
    fc34:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
    fc36:	0018      	movs	r0, r3
    fc38:	4bc5      	ldr	r3, [pc, #788]	; (ff50 <_http_client_request+0x6ec>)
    fc3a:	4798      	blx	r3
    fc3c:	0002      	movs	r2, r0
    fc3e:	2334      	movs	r3, #52	; 0x34
    fc40:	2118      	movs	r1, #24
    fc42:	468c      	mov	ip, r1
    fc44:	44bc      	add	ip, r7
    fc46:	4463      	add	r3, ip
    fc48:	0021      	movs	r1, r4
    fc4a:	0018      	movs	r0, r3
    fc4c:	4bbf      	ldr	r3, [pc, #764]	; (ff4c <_http_client_request+0x6e8>)
    fc4e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    fc50:	49c0      	ldr	r1, [pc, #768]	; (ff54 <_http_client_request+0x6f0>)
    fc52:	2334      	movs	r3, #52	; 0x34
    fc54:	2218      	movs	r2, #24
    fc56:	4694      	mov	ip, r2
    fc58:	44bc      	add	ip, r7
    fc5a:	4463      	add	r3, ip
    fc5c:	2202      	movs	r2, #2
    fc5e:	0018      	movs	r0, r3
    fc60:	4bba      	ldr	r3, [pc, #744]	; (ff4c <_http_client_request+0x6e8>)
    fc62:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    fc64:	2334      	movs	r3, #52	; 0x34
    fc66:	2218      	movs	r2, #24
    fc68:	4694      	mov	ip, r2
    fc6a:	44bc      	add	ip, r7
    fc6c:	4463      	add	r3, ip
    fc6e:	0018      	movs	r0, r3
    fc70:	4bb9      	ldr	r3, [pc, #740]	; (ff58 <_http_client_request+0x6f4>)
    fc72:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
    fc74:	69fb      	ldr	r3, [r7, #28]
    fc76:	2204      	movs	r2, #4
    fc78:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
    fc7a:	69fb      	ldr	r3, [r7, #28]
    fc7c:	22cc      	movs	r2, #204	; 0xcc
    fc7e:	589b      	ldr	r3, [r3, r2]
    fc80:	2b00      	cmp	r3, #0
    fc82:	db00      	blt.n	fc86 <_http_client_request+0x422>
    fc84:	e0c6      	b.n	fe14 <_http_client_request+0x5b0>
    fc86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fc88:	68db      	ldr	r3, [r3, #12]
    fc8a:	2b00      	cmp	r3, #0
    fc8c:	d100      	bne.n	fc90 <_http_client_request+0x42c>
    fc8e:	e0c1      	b.n	fe14 <_http_client_request+0x5b0>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    fc90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fc92:	68dc      	ldr	r4, [r3, #12]
    fc94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fc96:	6958      	ldr	r0, [r3, #20]
    fc98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fc9a:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    fc9c:	69fb      	ldr	r3, [r7, #28]
    fc9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    fca0:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    fca2:	69fb      	ldr	r3, [r7, #28]
    fca4:	22d0      	movs	r2, #208	; 0xd0
    fca6:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    fca8:	002a      	movs	r2, r5
    fcaa:	47a0      	blx	r4
    fcac:	0003      	movs	r3, r0
    fcae:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
    fcb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fcb2:	2b00      	cmp	r3, #0
    fcb4:	da01      	bge.n	fcba <_http_client_request+0x456>
				size = 0;
    fcb6:	2300      	movs	r3, #0
    fcb8:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    fcba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fcbc:	220a      	movs	r2, #10
    fcbe:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    fcc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fcc2:	220d      	movs	r2, #13
    fcc4:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    fcc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fcc8:	3305      	adds	r3, #5
    fcca:	6eba      	ldr	r2, [r7, #104]	; 0x68
    fccc:	210d      	movs	r1, #13
    fcce:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    fcd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fcd2:	3306      	adds	r3, #6
    fcd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
    fcd6:	210a      	movs	r1, #10
    fcd8:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
    fcda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fcdc:	2b00      	cmp	r3, #0
    fcde:	db14      	blt.n	fd0a <_http_client_request+0x4a6>
				ptr = buffer + 2;
    fce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fce2:	3302      	adds	r3, #2
    fce4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
    fce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fce8:	4a9c      	ldr	r2, [pc, #624]	; (ff5c <_http_client_request+0x6f8>)
    fcea:	4013      	ands	r3, r2
    fcec:	d504      	bpl.n	fcf8 <_http_client_request+0x494>
    fcee:	3b01      	subs	r3, #1
    fcf0:	2210      	movs	r2, #16
    fcf2:	4252      	negs	r2, r2
    fcf4:	4313      	orrs	r3, r2
    fcf6:	3301      	adds	r3, #1
    fcf8:	001a      	movs	r2, r3
    fcfa:	2318      	movs	r3, #24
    fcfc:	2118      	movs	r1, #24
    fcfe:	468c      	mov	ip, r1
    fd00:	44bc      	add	ip, r7
    fd02:	4463      	add	r3, ip
    fd04:	5c9a      	ldrb	r2, [r3, r2]
    fd06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fd08:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
    fd0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd0c:	2b0f      	cmp	r3, #15
    fd0e:	dd19      	ble.n	fd44 <_http_client_request+0x4e0>
				ptr = buffer + 1;
    fd10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fd12:	3301      	adds	r3, #1
    fd14:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
    fd16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd18:	2b00      	cmp	r3, #0
    fd1a:	da00      	bge.n	fd1e <_http_client_request+0x4ba>
    fd1c:	330f      	adds	r3, #15
    fd1e:	111b      	asrs	r3, r3, #4
    fd20:	001a      	movs	r2, r3
    fd22:	4b8e      	ldr	r3, [pc, #568]	; (ff5c <_http_client_request+0x6f8>)
    fd24:	4013      	ands	r3, r2
    fd26:	d504      	bpl.n	fd32 <_http_client_request+0x4ce>
    fd28:	3b01      	subs	r3, #1
    fd2a:	2210      	movs	r2, #16
    fd2c:	4252      	negs	r2, r2
    fd2e:	4313      	orrs	r3, r2
    fd30:	3301      	adds	r3, #1
    fd32:	001a      	movs	r2, r3
    fd34:	2318      	movs	r3, #24
    fd36:	2118      	movs	r1, #24
    fd38:	468c      	mov	ip, r1
    fd3a:	44bc      	add	ip, r7
    fd3c:	4463      	add	r3, ip
    fd3e:	5c9a      	ldrb	r2, [r3, r2]
    fd40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fd42:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
    fd44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd46:	2bff      	cmp	r3, #255	; 0xff
    fd48:	dd18      	ble.n	fd7c <_http_client_request+0x518>
				ptr = buffer;
    fd4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fd4c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
    fd4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd50:	2b00      	cmp	r3, #0
    fd52:	da00      	bge.n	fd56 <_http_client_request+0x4f2>
    fd54:	33ff      	adds	r3, #255	; 0xff
    fd56:	121b      	asrs	r3, r3, #8
    fd58:	001a      	movs	r2, r3
    fd5a:	4b80      	ldr	r3, [pc, #512]	; (ff5c <_http_client_request+0x6f8>)
    fd5c:	4013      	ands	r3, r2
    fd5e:	d504      	bpl.n	fd6a <_http_client_request+0x506>
    fd60:	3b01      	subs	r3, #1
    fd62:	2210      	movs	r2, #16
    fd64:	4252      	negs	r2, r2
    fd66:	4313      	orrs	r3, r2
    fd68:	3301      	adds	r3, #1
    fd6a:	001a      	movs	r2, r3
    fd6c:	2318      	movs	r3, #24
    fd6e:	2118      	movs	r1, #24
    fd70:	468c      	mov	ip, r1
    fd72:	44bc      	add	ip, r7
    fd74:	4463      	add	r3, ip
    fd76:	5c9a      	ldrb	r2, [r3, r2]
    fd78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fd7a:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    fd7c:	69fb      	ldr	r3, [r7, #28]
    fd7e:	2000      	movs	r0, #0
    fd80:	5618      	ldrsb	r0, [r3, r0]
    fd82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fd84:	3303      	adds	r3, #3
    fd86:	001a      	movs	r2, r3
    fd88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fd8a:	1ad3      	subs	r3, r2, r3
    fd8c:	b29a      	uxth	r2, r3
    fd8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd90:	b29b      	uxth	r3, r3
    fd92:	18d3      	adds	r3, r2, r3
    fd94:	b29b      	uxth	r3, r3
    fd96:	3304      	adds	r3, #4
    fd98:	b29a      	uxth	r2, r3
    fd9a:	6f39      	ldr	r1, [r7, #112]	; 0x70
    fd9c:	2300      	movs	r3, #0
    fd9e:	4c70      	ldr	r4, [pc, #448]	; (ff60 <_http_client_request+0x6fc>)
    fda0:	47a0      	blx	r4
    fda2:	0003      	movs	r3, r0
    fda4:	663b      	str	r3, [r7, #96]	; 0x60
    fda6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fda8:	2b00      	cmp	r3, #0
    fdaa:	da07      	bge.n	fdbc <_http_client_request+0x558>
				_http_client_clear_conn(module, -EIO);
    fdac:	2305      	movs	r3, #5
    fdae:	425a      	negs	r2, r3
    fdb0:	69fb      	ldr	r3, [r7, #28]
    fdb2:	0011      	movs	r1, r2
    fdb4:	0018      	movs	r0, r3
    fdb6:	4b6b      	ldr	r3, [pc, #428]	; (ff64 <_http_client_request+0x700>)
    fdb8:	4798      	blx	r3
				return;
    fdba:	e0e0      	b.n	ff7e <_http_client_request+0x71a>
			module->req.sent_length += size;
    fdbc:	69fb      	ldr	r3, [r7, #28]
    fdbe:	22d0      	movs	r2, #208	; 0xd0
    fdc0:	589a      	ldr	r2, [r3, r2]
    fdc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fdc4:	18d2      	adds	r2, r2, r3
    fdc6:	69fb      	ldr	r3, [r7, #28]
    fdc8:	21d0      	movs	r1, #208	; 0xd0
    fdca:	505a      	str	r2, [r3, r1]
			if(size == 0) {
    fdcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fdce:	2b00      	cmp	r3, #0
    fdd0:	d000      	beq.n	fdd4 <_http_client_request+0x570>
    fdd2:	e0c9      	b.n	ff68 <_http_client_request+0x704>
				if (module->req.entity.close) {
    fdd4:	69fb      	ldr	r3, [r7, #28]
    fdd6:	22c0      	movs	r2, #192	; 0xc0
    fdd8:	589b      	ldr	r3, [r3, r2]
    fdda:	2b00      	cmp	r3, #0
    fddc:	d007      	beq.n	fdee <_http_client_request+0x58a>
					module->req.entity.close(module->req.entity.priv_data);
    fdde:	69fb      	ldr	r3, [r7, #28]
    fde0:	22c0      	movs	r2, #192	; 0xc0
    fde2:	589b      	ldr	r3, [r3, r2]
    fde4:	69fa      	ldr	r2, [r7, #28]
    fde6:	21c4      	movs	r1, #196	; 0xc4
    fde8:	5852      	ldr	r2, [r2, r1]
    fdea:	0010      	movs	r0, r2
    fdec:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    fdee:	69fb      	ldr	r3, [r7, #28]
    fdf0:	2202      	movs	r2, #2
    fdf2:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    fdf4:	69fb      	ldr	r3, [r7, #28]
    fdf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fdf8:	2b00      	cmp	r3, #0
    fdfa:	d100      	bne.n	fdfe <_http_client_request+0x59a>
    fdfc:	e0b5      	b.n	ff6a <_http_client_request+0x706>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    fdfe:	69fb      	ldr	r3, [r7, #28]
    fe00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fe02:	220c      	movs	r2, #12
    fe04:	2118      	movs	r1, #24
    fe06:	468c      	mov	ip, r1
    fe08:	44bc      	add	ip, r7
    fe0a:	4462      	add	r2, ip
    fe0c:	69f8      	ldr	r0, [r7, #28]
    fe0e:	2101      	movs	r1, #1
    fe10:	4798      	blx	r3
				break;
    fe12:	e0aa      	b.n	ff6a <_http_client_request+0x706>
		} else if (module->req.content_length > 0 && entity->read) {
    fe14:	69fb      	ldr	r3, [r7, #28]
    fe16:	22cc      	movs	r2, #204	; 0xcc
    fe18:	589b      	ldr	r3, [r3, r2]
    fe1a:	2b00      	cmp	r3, #0
    fe1c:	dc00      	bgt.n	fe20 <_http_client_request+0x5bc>
    fe1e:	e07c      	b.n	ff1a <_http_client_request+0x6b6>
    fe20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fe22:	68db      	ldr	r3, [r3, #12]
    fe24:	2b00      	cmp	r3, #0
    fe26:	d100      	bne.n	fe2a <_http_client_request+0x5c6>
    fe28:	e077      	b.n	ff1a <_http_client_request+0x6b6>
			if (module->req.sent_length >= module->req.content_length) {
    fe2a:	69fb      	ldr	r3, [r7, #28]
    fe2c:	22d0      	movs	r2, #208	; 0xd0
    fe2e:	589a      	ldr	r2, [r3, r2]
    fe30:	69fb      	ldr	r3, [r7, #28]
    fe32:	21cc      	movs	r1, #204	; 0xcc
    fe34:	585b      	ldr	r3, [r3, r1]
    fe36:	429a      	cmp	r2, r3
    fe38:	db1f      	blt.n	fe7a <_http_client_request+0x616>
				if (module->req.entity.close) {
    fe3a:	69fb      	ldr	r3, [r7, #28]
    fe3c:	22c0      	movs	r2, #192	; 0xc0
    fe3e:	589b      	ldr	r3, [r3, r2]
    fe40:	2b00      	cmp	r3, #0
    fe42:	d007      	beq.n	fe54 <_http_client_request+0x5f0>
					module->req.entity.close(module->req.entity.priv_data);
    fe44:	69fb      	ldr	r3, [r7, #28]
    fe46:	22c0      	movs	r2, #192	; 0xc0
    fe48:	589b      	ldr	r3, [r3, r2]
    fe4a:	69fa      	ldr	r2, [r7, #28]
    fe4c:	21c4      	movs	r1, #196	; 0xc4
    fe4e:	5852      	ldr	r2, [r2, r1]
    fe50:	0010      	movs	r0, r2
    fe52:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    fe54:	69fb      	ldr	r3, [r7, #28]
    fe56:	2202      	movs	r2, #2
    fe58:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    fe5a:	69fb      	ldr	r3, [r7, #28]
    fe5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fe5e:	2b00      	cmp	r3, #0
    fe60:	d100      	bne.n	fe64 <_http_client_request+0x600>
    fe62:	e084      	b.n	ff6e <_http_client_request+0x70a>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    fe64:	69fb      	ldr	r3, [r7, #28]
    fe66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fe68:	220c      	movs	r2, #12
    fe6a:	2118      	movs	r1, #24
    fe6c:	468c      	mov	ip, r1
    fe6e:	44bc      	add	ip, r7
    fe70:	4462      	add	r2, ip
    fe72:	69f8      	ldr	r0, [r7, #28]
    fe74:	2101      	movs	r1, #1
    fe76:	4798      	blx	r3
				break;
    fe78:	e079      	b.n	ff6e <_http_client_request+0x70a>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    fe7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fe7c:	68dc      	ldr	r4, [r3, #12]
    fe7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fe80:	6958      	ldr	r0, [r3, #20]
    fe82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    fe84:	69fb      	ldr	r3, [r7, #28]
    fe86:	6e5d      	ldr	r5, [r3, #100]	; 0x64
    fe88:	69fb      	ldr	r3, [r7, #28]
    fe8a:	22d0      	movs	r2, #208	; 0xd0
    fe8c:	589b      	ldr	r3, [r3, r2]
    fe8e:	002a      	movs	r2, r5
    fe90:	47a0      	blx	r4
    fe92:	0003      	movs	r3, r0
    fe94:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
    fe96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fe98:	2b00      	cmp	r3, #0
    fe9a:	da0d      	bge.n	feb8 <_http_client_request+0x654>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    fe9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fe9e:	2b00      	cmp	r3, #0
    fea0:	d102      	bne.n	fea8 <_http_client_request+0x644>
    fea2:	234d      	movs	r3, #77	; 0x4d
    fea4:	425b      	negs	r3, r3
    fea6:	e001      	b.n	feac <_http_client_request+0x648>
    fea8:	2305      	movs	r3, #5
    feaa:	425b      	negs	r3, r3
    feac:	69fa      	ldr	r2, [r7, #28]
    feae:	0019      	movs	r1, r3
    feb0:	0010      	movs	r0, r2
    feb2:	4b2c      	ldr	r3, [pc, #176]	; (ff64 <_http_client_request+0x700>)
    feb4:	4798      	blx	r3
			if (size < 0) {
    feb6:	e057      	b.n	ff68 <_http_client_request+0x704>
				if (size > module->req.content_length - module->req.sent_length) {
    feb8:	69fb      	ldr	r3, [r7, #28]
    feba:	22cc      	movs	r2, #204	; 0xcc
    febc:	589a      	ldr	r2, [r3, r2]
    febe:	69fb      	ldr	r3, [r7, #28]
    fec0:	21d0      	movs	r1, #208	; 0xd0
    fec2:	585b      	ldr	r3, [r3, r1]
    fec4:	1ad2      	subs	r2, r2, r3
    fec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fec8:	429a      	cmp	r2, r3
    feca:	da07      	bge.n	fedc <_http_client_request+0x678>
					size = module->req.content_length - module->req.sent_length;
    fecc:	69fb      	ldr	r3, [r7, #28]
    fece:	22cc      	movs	r2, #204	; 0xcc
    fed0:	589a      	ldr	r2, [r3, r2]
    fed2:	69fb      	ldr	r3, [r7, #28]
    fed4:	21d0      	movs	r1, #208	; 0xd0
    fed6:	585b      	ldr	r3, [r3, r1]
    fed8:	1ad3      	subs	r3, r2, r3
    feda:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    fedc:	69fb      	ldr	r3, [r7, #28]
    fede:	2000      	movs	r0, #0
    fee0:	5618      	ldrsb	r0, [r3, r0]
    fee2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    fee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fee6:	b29a      	uxth	r2, r3
    fee8:	2300      	movs	r3, #0
    feea:	4c1d      	ldr	r4, [pc, #116]	; (ff60 <_http_client_request+0x6fc>)
    feec:	47a0      	blx	r4
    feee:	0003      	movs	r3, r0
    fef0:	663b      	str	r3, [r7, #96]	; 0x60
    fef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fef4:	2b00      	cmp	r3, #0
    fef6:	da07      	bge.n	ff08 <_http_client_request+0x6a4>
					_http_client_clear_conn(module, -EIO);
    fef8:	2305      	movs	r3, #5
    fefa:	425a      	negs	r2, r3
    fefc:	69fb      	ldr	r3, [r7, #28]
    fefe:	0011      	movs	r1, r2
    ff00:	0018      	movs	r0, r3
    ff02:	4b18      	ldr	r3, [pc, #96]	; (ff64 <_http_client_request+0x700>)
    ff04:	4798      	blx	r3
					return;
    ff06:	e03a      	b.n	ff7e <_http_client_request+0x71a>
				module->req.sent_length += size;
    ff08:	69fb      	ldr	r3, [r7, #28]
    ff0a:	22d0      	movs	r2, #208	; 0xd0
    ff0c:	589a      	ldr	r2, [r3, r2]
    ff0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    ff10:	18d2      	adds	r2, r2, r3
    ff12:	69fb      	ldr	r3, [r7, #28]
    ff14:	21d0      	movs	r1, #208	; 0xd0
    ff16:	505a      	str	r2, [r3, r1]
			if (size < 0) {
    ff18:	e026      	b.n	ff68 <_http_client_request+0x704>
			module->req.state = STATE_SOCK_CONNECTED;
    ff1a:	69fb      	ldr	r3, [r7, #28]
    ff1c:	2202      	movs	r2, #2
    ff1e:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
    ff20:	69fb      	ldr	r3, [r7, #28]
    ff22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ff24:	2b00      	cmp	r3, #0
    ff26:	d024      	beq.n	ff72 <_http_client_request+0x70e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    ff28:	69fb      	ldr	r3, [r7, #28]
    ff2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ff2c:	220c      	movs	r2, #12
    ff2e:	2118      	movs	r1, #24
    ff30:	468c      	mov	ip, r1
    ff32:	44bc      	add	ip, r7
    ff34:	4462      	add	r2, ip
    ff36:	69f8      	ldr	r0, [r7, #28]
    ff38:	2101      	movs	r1, #1
    ff3a:	4798      	blx	r3
			break;
    ff3c:	e019      	b.n	ff72 <_http_client_request+0x70e>
    ff3e:	46c0      	nop			; (mov r8, r8)
    ff40:	000194ec 	.word	0x000194ec
    ff44:	00017029 	.word	0x00017029
    ff48:	000194f0 	.word	0x000194f0
    ff4c:	000107b1 	.word	0x000107b1
    ff50:	000170cb 	.word	0x000170cb
    ff54:	00019478 	.word	0x00019478
    ff58:	000107ed 	.word	0x000107ed
    ff5c:	8000000f 	.word	0x8000000f
    ff60:	0000d325 	.word	0x0000d325
    ff64:	0000f711 	.word	0x0000f711
		break;
    ff68:	e004      	b.n	ff74 <_http_client_request+0x710>
				break;
    ff6a:	46c0      	nop			; (mov r8, r8)
    ff6c:	e002      	b.n	ff74 <_http_client_request+0x710>
				break;
    ff6e:	46c0      	nop			; (mov r8, r8)
    ff70:	e000      	b.n	ff74 <_http_client_request+0x710>
			break;
    ff72:	46c0      	nop			; (mov r8, r8)
    ff74:	46b5      	mov	sp, r6
    ff76:	e003      	b.n	ff80 <_http_client_request+0x71c>
		return;
    ff78:	46c0      	nop			; (mov r8, r8)
    ff7a:	e000      	b.n	ff7e <_http_client_request+0x71a>
		return;
    ff7c:	46c0      	nop			; (mov r8, r8)
    ff7e:	46b5      	mov	sp, r6
	}
}
    ff80:	46bd      	mov	sp, r7
    ff82:	b01f      	add	sp, #124	; 0x7c
    ff84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff86:	46c0      	nop			; (mov r8, r8)

0000ff88 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    ff88:	b590      	push	{r4, r7, lr}
    ff8a:	b083      	sub	sp, #12
    ff8c:	af00      	add	r7, sp, #0
    ff8e:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
    ff90:	687b      	ldr	r3, [r7, #4]
    ff92:	2b00      	cmp	r3, #0
    ff94:	d021      	beq.n	ffda <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    ff96:	687b      	ldr	r3, [r7, #4]
    ff98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    ff9a:	687b      	ldr	r3, [r7, #4]
    ff9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    ff9e:	429a      	cmp	r2, r3
    ffa0:	d307      	bcc.n	ffb2 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
    ffa2:	238b      	movs	r3, #139	; 0x8b
    ffa4:	425a      	negs	r2, r3
    ffa6:	687b      	ldr	r3, [r7, #4]
    ffa8:	0011      	movs	r1, r2
    ffaa:	0018      	movs	r0, r3
    ffac:	4b0d      	ldr	r3, [pc, #52]	; (ffe4 <_http_client_recv_packet+0x5c>)
    ffae:	4798      	blx	r3
		return;
    ffb0:	e014      	b.n	ffdc <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    ffb2:	687b      	ldr	r3, [r7, #4]
    ffb4:	2000      	movs	r0, #0
    ffb6:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
    ffb8:	687b      	ldr	r3, [r7, #4]
    ffba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    ffbc:	687b      	ldr	r3, [r7, #4]
    ffbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ffc0:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
    ffc2:	687b      	ldr	r3, [r7, #4]
    ffc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
    ffc6:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
    ffc8:	687b      	ldr	r3, [r7, #4]
    ffca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
    ffcc:	b29b      	uxth	r3, r3
    ffce:	1ad3      	subs	r3, r2, r3
    ffd0:	b29a      	uxth	r2, r3
    ffd2:	2300      	movs	r3, #0
    ffd4:	4c04      	ldr	r4, [pc, #16]	; (ffe8 <_http_client_recv_packet+0x60>)
    ffd6:	47a0      	blx	r4
    ffd8:	e000      	b.n	ffdc <_http_client_recv_packet+0x54>
		return;
    ffda:	46c0      	nop			; (mov r8, r8)
}
    ffdc:	46bd      	mov	sp, r7
    ffde:	b003      	add	sp, #12
    ffe0:	bd90      	pop	{r4, r7, pc}
    ffe2:	46c0      	nop			; (mov r8, r8)
    ffe4:	0000f711 	.word	0x0000f711
    ffe8:	0000d489 	.word	0x0000d489

0000ffec <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
    ffec:	b580      	push	{r7, lr}
    ffee:	b082      	sub	sp, #8
    fff0:	af00      	add	r7, sp, #0
    fff2:	6078      	str	r0, [r7, #4]
    fff4:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
    fff6:	687b      	ldr	r3, [r7, #4]
    fff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    fffa:	683b      	ldr	r3, [r7, #0]
    fffc:	18d2      	adds	r2, r2, r3
    fffe:	687b      	ldr	r3, [r7, #4]
   10000:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   10002:	687b      	ldr	r3, [r7, #4]
   10004:	2258      	movs	r2, #88	; 0x58
   10006:	5a9b      	ldrh	r3, [r3, r2]
   10008:	2b00      	cmp	r3, #0
   1000a:	d007      	beq.n	1001c <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   1000c:	687b      	ldr	r3, [r7, #4]
   1000e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   10010:	687b      	ldr	r3, [r7, #4]
   10012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   10014:	0019      	movs	r1, r3
   10016:	0010      	movs	r0, r2
   10018:	4b06      	ldr	r3, [pc, #24]	; (10034 <_http_client_recved_packet+0x48>)
   1001a:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   1001c:	46c0      	nop			; (mov r8, r8)
   1001e:	687b      	ldr	r3, [r7, #4]
   10020:	0018      	movs	r0, r3
   10022:	4b05      	ldr	r3, [pc, #20]	; (10038 <_http_client_recved_packet+0x4c>)
   10024:	4798      	blx	r3
   10026:	1e03      	subs	r3, r0, #0
   10028:	d1f9      	bne.n	1001e <_http_client_recved_packet+0x32>
}
   1002a:	46c0      	nop			; (mov r8, r8)
   1002c:	46bd      	mov	sp, r7
   1002e:	b002      	add	sp, #8
   10030:	bd80      	pop	{r7, pc}
   10032:	46c0      	nop			; (mov r8, r8)
   10034:	00010aa9 	.word	0x00010aa9
   10038:	0001003d 	.word	0x0001003d

0001003c <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   1003c:	b580      	push	{r7, lr}
   1003e:	b082      	sub	sp, #8
   10040:	af00      	add	r7, sp, #0
   10042:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   10044:	687b      	ldr	r3, [r7, #4]
   10046:	22d8      	movs	r2, #216	; 0xd8
   10048:	589b      	ldr	r3, [r3, r2]
   1004a:	2b00      	cmp	r3, #0
   1004c:	d002      	beq.n	10054 <_http_client_handle_response+0x18>
   1004e:	2b01      	cmp	r3, #1
   10050:	d006      	beq.n	10060 <_http_client_handle_response+0x24>
   10052:	e00b      	b.n	1006c <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   10054:	687b      	ldr	r3, [r7, #4]
   10056:	0018      	movs	r0, r3
   10058:	4b07      	ldr	r3, [pc, #28]	; (10078 <_http_client_handle_response+0x3c>)
   1005a:	4798      	blx	r3
   1005c:	0003      	movs	r3, r0
   1005e:	e006      	b.n	1006e <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   10060:	687b      	ldr	r3, [r7, #4]
   10062:	0018      	movs	r0, r3
   10064:	4b05      	ldr	r3, [pc, #20]	; (1007c <_http_client_handle_response+0x40>)
   10066:	4798      	blx	r3
   10068:	0003      	movs	r3, r0
   1006a:	e000      	b.n	1006e <_http_client_handle_response+0x32>
	}
	return 0;
   1006c:	2300      	movs	r3, #0
}
   1006e:	0018      	movs	r0, r3
   10070:	46bd      	mov	sp, r7
   10072:	b002      	add	sp, #8
   10074:	bd80      	pop	{r7, pc}
   10076:	46c0      	nop			; (mov r8, r8)
   10078:	00010081 	.word	0x00010081
   1007c:	00010539 	.word	0x00010539

00010080 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   10080:	b590      	push	{r4, r7, lr}
   10082:	b08b      	sub	sp, #44	; 0x2c
   10084:	af00      	add	r7, sp, #0
   10086:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   10088:	687b      	ldr	r3, [r7, #4]
   1008a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1008c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   1008e:	4b9a      	ldr	r3, [pc, #616]	; (102f8 <_http_client_handle_header+0x278>)
   10090:	681a      	ldr	r2, [r3, #0]
   10092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10094:	0011      	movs	r1, r2
   10096:	0018      	movs	r0, r3
   10098:	4b98      	ldr	r3, [pc, #608]	; (102fc <_http_client_handle_header+0x27c>)
   1009a:	4798      	blx	r3
   1009c:	0003      	movs	r3, r0
   1009e:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   100a0:	69bb      	ldr	r3, [r7, #24]
   100a2:	2b00      	cmp	r3, #0
   100a4:	d007      	beq.n	100b6 <_http_client_handle_header+0x36>
   100a6:	687b      	ldr	r3, [r7, #4]
   100a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   100aa:	687b      	ldr	r3, [r7, #4]
   100ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   100ae:	18d2      	adds	r2, r2, r3
   100b0:	69bb      	ldr	r3, [r7, #24]
   100b2:	429a      	cmp	r2, r3
   100b4:	d807      	bhi.n	100c6 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   100b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   100b8:	687b      	ldr	r3, [r7, #4]
   100ba:	0011      	movs	r1, r2
   100bc:	0018      	movs	r0, r3
   100be:	4b90      	ldr	r3, [pc, #576]	; (10300 <_http_client_handle_header+0x280>)
   100c0:	4798      	blx	r3
			return 0;
   100c2:	2300      	movs	r3, #0
   100c4:	e114      	b.n	102f0 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   100c6:	4b8c      	ldr	r3, [pc, #560]	; (102f8 <_http_client_handle_header+0x278>)
   100c8:	681c      	ldr	r4, [r3, #0]
   100ca:	4b8b      	ldr	r3, [pc, #556]	; (102f8 <_http_client_handle_header+0x278>)
   100cc:	681b      	ldr	r3, [r3, #0]
   100ce:	0018      	movs	r0, r3
   100d0:	4b8c      	ldr	r3, [pc, #560]	; (10304 <_http_client_handle_header+0x284>)
   100d2:	4798      	blx	r3
   100d4:	0002      	movs	r2, r0
   100d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   100d8:	0021      	movs	r1, r4
   100da:	0018      	movs	r0, r3
   100dc:	4b8a      	ldr	r3, [pc, #552]	; (10308 <_http_client_handle_header+0x288>)
   100de:	4798      	blx	r3
   100e0:	1e03      	subs	r3, r0, #0
   100e2:	d15d      	bne.n	101a0 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   100e4:	4b84      	ldr	r3, [pc, #528]	; (102f8 <_http_client_handle_header+0x278>)
   100e6:	681b      	ldr	r3, [r3, #0]
   100e8:	0018      	movs	r0, r3
   100ea:	4b86      	ldr	r3, [pc, #536]	; (10304 <_http_client_handle_header+0x284>)
   100ec:	4798      	blx	r3
   100ee:	0002      	movs	r2, r0
   100f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   100f2:	189a      	adds	r2, r3, r2
   100f4:	687b      	ldr	r3, [r7, #4]
   100f6:	0011      	movs	r1, r2
   100f8:	0018      	movs	r0, r3
   100fa:	4b81      	ldr	r3, [pc, #516]	; (10300 <_http_client_handle_header+0x280>)
   100fc:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   100fe:	687b      	ldr	r3, [r7, #4]
   10100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10102:	2b00      	cmp	r3, #0
   10104:	d046      	beq.n	10194 <_http_client_handle_header+0x114>
   10106:	687b      	ldr	r3, [r7, #4]
   10108:	22e4      	movs	r2, #228	; 0xe4
   1010a:	5a9b      	ldrh	r3, [r3, r2]
   1010c:	2b00      	cmp	r3, #0
   1010e:	d041      	beq.n	10194 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   10110:	687b      	ldr	r3, [r7, #4]
   10112:	22dc      	movs	r2, #220	; 0xdc
   10114:	589b      	ldr	r3, [r3, r2]
   10116:	2b00      	cmp	r3, #0
   10118:	da19      	bge.n	1014e <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   1011a:	687b      	ldr	r3, [r7, #4]
   1011c:	22e4      	movs	r2, #228	; 0xe4
   1011e:	5a9a      	ldrh	r2, [r3, r2]
   10120:	230c      	movs	r3, #12
   10122:	18fb      	adds	r3, r7, r3
   10124:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   10126:	230c      	movs	r3, #12
   10128:	18fb      	adds	r3, r7, r3
   1012a:	2201      	movs	r2, #1
   1012c:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   1012e:	687b      	ldr	r3, [r7, #4]
   10130:	22e0      	movs	r2, #224	; 0xe0
   10132:	2100      	movs	r1, #0
   10134:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   10136:	230c      	movs	r3, #12
   10138:	18fb      	adds	r3, r7, r3
   1013a:	2200      	movs	r2, #0
   1013c:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1013e:	687b      	ldr	r3, [r7, #4]
   10140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10142:	220c      	movs	r2, #12
   10144:	18ba      	adds	r2, r7, r2
   10146:	6878      	ldr	r0, [r7, #4]
   10148:	2102      	movs	r1, #2
   1014a:	4798      	blx	r3
   1014c:	e022      	b.n	10194 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   1014e:	687b      	ldr	r3, [r7, #4]
   10150:	22dc      	movs	r2, #220	; 0xdc
   10152:	589a      	ldr	r2, [r3, r2]
   10154:	687b      	ldr	r3, [r7, #4]
   10156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   10158:	429a      	cmp	r2, r3
   1015a:	dd1b      	ble.n	10194 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   1015c:	687b      	ldr	r3, [r7, #4]
   1015e:	22e4      	movs	r2, #228	; 0xe4
   10160:	5a9a      	ldrh	r2, [r3, r2]
   10162:	230c      	movs	r3, #12
   10164:	18fb      	adds	r3, r7, r3
   10166:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   10168:	687b      	ldr	r3, [r7, #4]
   1016a:	22dc      	movs	r2, #220	; 0xdc
   1016c:	589b      	ldr	r3, [r3, r2]
   1016e:	001a      	movs	r2, r3
   10170:	230c      	movs	r3, #12
   10172:	18fb      	adds	r3, r7, r3
   10174:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   10176:	230c      	movs	r3, #12
   10178:	18fb      	adds	r3, r7, r3
   1017a:	2200      	movs	r2, #0
   1017c:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   1017e:	687b      	ldr	r3, [r7, #4]
   10180:	22e0      	movs	r2, #224	; 0xe0
   10182:	2100      	movs	r1, #0
   10184:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   10186:	687b      	ldr	r3, [r7, #4]
   10188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1018a:	220c      	movs	r2, #12
   1018c:	18ba      	adds	r2, r7, r2
   1018e:	6878      	ldr	r0, [r7, #4]
   10190:	2102      	movs	r1, #2
   10192:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   10194:	687b      	ldr	r3, [r7, #4]
   10196:	22d8      	movs	r2, #216	; 0xd8
   10198:	2101      	movs	r1, #1
   1019a:	5099      	str	r1, [r3, r2]
			return 1;
   1019c:	2301      	movs	r3, #1
   1019e:	e0a7      	b.n	102f0 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   101a0:	495a      	ldr	r1, [pc, #360]	; (1030c <_http_client_handle_header+0x28c>)
   101a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101a4:	2210      	movs	r2, #16
   101a6:	0018      	movs	r0, r3
   101a8:	4b57      	ldr	r3, [pc, #348]	; (10308 <_http_client_handle_header+0x288>)
   101aa:	4798      	blx	r3
   101ac:	1e03      	subs	r3, r0, #0
   101ae:	d109      	bne.n	101c4 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101b2:	3310      	adds	r3, #16
   101b4:	0018      	movs	r0, r3
   101b6:	4b56      	ldr	r3, [pc, #344]	; (10310 <_http_client_handle_header+0x290>)
   101b8:	4798      	blx	r3
   101ba:	0001      	movs	r1, r0
   101bc:	687b      	ldr	r3, [r7, #4]
   101be:	22dc      	movs	r2, #220	; 0xdc
   101c0:	5099      	str	r1, [r3, r2]
   101c2:	e08b      	b.n	102dc <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   101c4:	4953      	ldr	r1, [pc, #332]	; (10314 <_http_client_handle_header+0x294>)
   101c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101c8:	2213      	movs	r2, #19
   101ca:	0018      	movs	r0, r3
   101cc:	4b4e      	ldr	r3, [pc, #312]	; (10308 <_http_client_handle_header+0x288>)
   101ce:	4798      	blx	r3
   101d0:	1e03      	subs	r3, r0, #0
   101d2:	d127      	bne.n	10224 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   101d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101d6:	3313      	adds	r3, #19
   101d8:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   101da:	e01e      	b.n	1021a <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   101dc:	6a3b      	ldr	r3, [r7, #32]
   101de:	781b      	ldrb	r3, [r3, #0]
   101e0:	2b20      	cmp	r3, #32
   101e2:	d103      	bne.n	101ec <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   101e4:	6a3b      	ldr	r3, [r7, #32]
   101e6:	3301      	adds	r3, #1
   101e8:	623b      	str	r3, [r7, #32]
   101ea:	e016      	b.n	1021a <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   101ec:	6a3b      	ldr	r3, [r7, #32]
   101ee:	781b      	ldrb	r3, [r3, #0]
   101f0:	2b43      	cmp	r3, #67	; 0x43
   101f2:	d003      	beq.n	101fc <_http_client_handle_header+0x17c>
   101f4:	6a3b      	ldr	r3, [r7, #32]
   101f6:	781b      	ldrb	r3, [r3, #0]
   101f8:	2b63      	cmp	r3, #99	; 0x63
   101fa:	d105      	bne.n	10208 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   101fc:	687b      	ldr	r3, [r7, #4]
   101fe:	21cc      	movs	r1, #204	; 0xcc
   10200:	2201      	movs	r2, #1
   10202:	4252      	negs	r2, r2
   10204:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   10206:	e069      	b.n	102dc <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   10208:	2386      	movs	r3, #134	; 0x86
   1020a:	425a      	negs	r2, r3
   1020c:	687b      	ldr	r3, [r7, #4]
   1020e:	0011      	movs	r1, r2
   10210:	0018      	movs	r0, r3
   10212:	4b41      	ldr	r3, [pc, #260]	; (10318 <_http_client_handle_header+0x298>)
   10214:	4798      	blx	r3
					return 0;
   10216:	2300      	movs	r3, #0
   10218:	e06a      	b.n	102f0 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1021a:	69ba      	ldr	r2, [r7, #24]
   1021c:	6a3b      	ldr	r3, [r7, #32]
   1021e:	429a      	cmp	r2, r3
   10220:	d8dc      	bhi.n	101dc <_http_client_handle_header+0x15c>
   10222:	e05b      	b.n	102dc <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   10224:	493d      	ldr	r1, [pc, #244]	; (1031c <_http_client_handle_header+0x29c>)
   10226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10228:	220c      	movs	r2, #12
   1022a:	0018      	movs	r0, r3
   1022c:	4b36      	ldr	r3, [pc, #216]	; (10308 <_http_client_handle_header+0x288>)
   1022e:	4798      	blx	r3
   10230:	1e03      	subs	r3, r0, #0
   10232:	d126      	bne.n	10282 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   10234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10236:	330c      	adds	r3, #12
   10238:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1023a:	e01d      	b.n	10278 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   1023c:	69fb      	ldr	r3, [r7, #28]
   1023e:	781b      	ldrb	r3, [r3, #0]
   10240:	2b20      	cmp	r3, #32
   10242:	d103      	bne.n	1024c <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   10244:	69fb      	ldr	r3, [r7, #28]
   10246:	3301      	adds	r3, #1
   10248:	61fb      	str	r3, [r7, #28]
   1024a:	e015      	b.n	10278 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   1024c:	69fb      	ldr	r3, [r7, #28]
   1024e:	781b      	ldrb	r3, [r3, #0]
   10250:	2b4b      	cmp	r3, #75	; 0x4b
   10252:	d003      	beq.n	1025c <_http_client_handle_header+0x1dc>
   10254:	69fb      	ldr	r3, [r7, #28]
   10256:	781b      	ldrb	r3, [r3, #0]
   10258:	2b6b      	cmp	r3, #107	; 0x6b
   1025a:	d106      	bne.n	1026a <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   1025c:	687b      	ldr	r3, [r7, #4]
   1025e:	2241      	movs	r2, #65	; 0x41
   10260:	5c99      	ldrb	r1, [r3, r2]
   10262:	2002      	movs	r0, #2
   10264:	4301      	orrs	r1, r0
   10266:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   10268:	e038      	b.n	102dc <_http_client_handle_header+0x25c>
					module->permanent = 0;
   1026a:	687b      	ldr	r3, [r7, #4]
   1026c:	2241      	movs	r2, #65	; 0x41
   1026e:	5c99      	ldrb	r1, [r3, r2]
   10270:	2002      	movs	r0, #2
   10272:	4381      	bics	r1, r0
   10274:	5499      	strb	r1, [r3, r2]
				break;
   10276:	e031      	b.n	102dc <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   10278:	69ba      	ldr	r2, [r7, #24]
   1027a:	69fb      	ldr	r3, [r7, #28]
   1027c:	429a      	cmp	r2, r3
   1027e:	d8dd      	bhi.n	1023c <_http_client_handle_header+0x1bc>
   10280:	e02c      	b.n	102dc <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   10282:	4927      	ldr	r1, [pc, #156]	; (10320 <_http_client_handle_header+0x2a0>)
   10284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10286:	2205      	movs	r2, #5
   10288:	0018      	movs	r0, r3
   1028a:	4b1f      	ldr	r3, [pc, #124]	; (10308 <_http_client_handle_header+0x288>)
   1028c:	4798      	blx	r3
   1028e:	1e03      	subs	r3, r0, #0
   10290:	d124      	bne.n	102dc <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   10292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10294:	3309      	adds	r3, #9
   10296:	0018      	movs	r0, r3
   10298:	4b1d      	ldr	r3, [pc, #116]	; (10310 <_http_client_handle_header+0x290>)
   1029a:	4798      	blx	r3
   1029c:	0003      	movs	r3, r0
   1029e:	b299      	uxth	r1, r3
   102a0:	687b      	ldr	r3, [r7, #4]
   102a2:	22e4      	movs	r2, #228	; 0xe4
   102a4:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   102a6:	687b      	ldr	r3, [r7, #4]
   102a8:	22dc      	movs	r2, #220	; 0xdc
   102aa:	2100      	movs	r1, #0
   102ac:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   102ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   102b0:	3305      	adds	r3, #5
   102b2:	781b      	ldrb	r3, [r3, #0]
   102b4:	2b31      	cmp	r3, #49	; 0x31
   102b6:	d804      	bhi.n	102c2 <_http_client_handle_header+0x242>
   102b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   102ba:	3307      	adds	r3, #7
   102bc:	781b      	ldrb	r3, [r3, #0]
   102be:	2b30      	cmp	r3, #48	; 0x30
   102c0:	d906      	bls.n	102d0 <_http_client_handle_header+0x250>
				module->permanent = 1;
   102c2:	687b      	ldr	r3, [r7, #4]
   102c4:	2241      	movs	r2, #65	; 0x41
   102c6:	5c99      	ldrb	r1, [r3, r2]
   102c8:	2002      	movs	r0, #2
   102ca:	4301      	orrs	r1, r0
   102cc:	5499      	strb	r1, [r3, r2]
   102ce:	e005      	b.n	102dc <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   102d0:	687b      	ldr	r3, [r7, #4]
   102d2:	2241      	movs	r2, #65	; 0x41
   102d4:	5c99      	ldrb	r1, [r3, r2]
   102d6:	2002      	movs	r0, #2
   102d8:	4381      	bics	r1, r0
   102da:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   102dc:	4b06      	ldr	r3, [pc, #24]	; (102f8 <_http_client_handle_header+0x278>)
   102de:	681b      	ldr	r3, [r3, #0]
   102e0:	0018      	movs	r0, r3
   102e2:	4b08      	ldr	r3, [pc, #32]	; (10304 <_http_client_handle_header+0x284>)
   102e4:	4798      	blx	r3
   102e6:	0002      	movs	r2, r0
   102e8:	69bb      	ldr	r3, [r7, #24]
   102ea:	189b      	adds	r3, r3, r2
   102ec:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   102ee:	e6ce      	b.n	1008e <_http_client_handle_header+0xe>
	}
}
   102f0:	0018      	movs	r0, r3
   102f2:	46bd      	mov	sp, r7
   102f4:	b00b      	add	sp, #44	; 0x2c
   102f6:	bd90      	pop	{r4, r7, pc}
   102f8:	20000008 	.word	0x20000008
   102fc:	000170fb 	.word	0x000170fb
   10300:	000106e5 	.word	0x000106e5
   10304:	000170cb 	.word	0x000170cb
   10308:	000170d9 	.word	0x000170d9
   1030c:	000194f0 	.word	0x000194f0
   10310:	00016b55 	.word	0x00016b55
   10314:	00019514 	.word	0x00019514
   10318:	0000f711 	.word	0x0000f711
   1031c:	00019528 	.word	0x00019528
   10320:	00019538 	.word	0x00019538

00010324 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   10324:	b580      	push	{r7, lr}
   10326:	b088      	sub	sp, #32
   10328:	af00      	add	r7, sp, #0
   1032a:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   1032c:	687b      	ldr	r3, [r7, #4]
   1032e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10330:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   10332:	2300      	movs	r3, #0
   10334:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   10336:	687b      	ldr	r3, [r7, #4]
   10338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1033a:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   1033c:	687b      	ldr	r3, [r7, #4]
   1033e:	22e0      	movs	r2, #224	; 0xe0
   10340:	589b      	ldr	r3, [r3, r2]
   10342:	2b00      	cmp	r3, #0
   10344:	db71      	blt.n	1042a <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   10346:	687b      	ldr	r3, [r7, #4]
   10348:	22e0      	movs	r2, #224	; 0xe0
   1034a:	589b      	ldr	r3, [r3, r2]
   1034c:	2b00      	cmp	r3, #0
   1034e:	d134      	bne.n	103ba <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   10350:	687b      	ldr	r3, [r7, #4]
   10352:	22d8      	movs	r2, #216	; 0xd8
   10354:	2100      	movs	r1, #0
   10356:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   10358:	687b      	ldr	r3, [r7, #4]
   1035a:	22e4      	movs	r2, #228	; 0xe4
   1035c:	2100      	movs	r1, #0
   1035e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   10360:	2308      	movs	r3, #8
   10362:	18fb      	adds	r3, r7, r3
   10364:	2201      	movs	r2, #1
   10366:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   10368:	2308      	movs	r3, #8
   1036a:	18fb      	adds	r3, r7, r3
   1036c:	2200      	movs	r2, #0
   1036e:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   10370:	2308      	movs	r3, #8
   10372:	18fb      	adds	r3, r7, r3
   10374:	2200      	movs	r2, #0
   10376:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   10378:	687b      	ldr	r3, [r7, #4]
   1037a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1037c:	2b00      	cmp	r3, #0
   1037e:	d006      	beq.n	1038e <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   10380:	687b      	ldr	r3, [r7, #4]
   10382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10384:	2208      	movs	r2, #8
   10386:	18ba      	adds	r2, r7, r2
   10388:	6878      	ldr	r0, [r7, #4]
   1038a:	2103      	movs	r1, #3
   1038c:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   1038e:	687b      	ldr	r3, [r7, #4]
   10390:	2241      	movs	r2, #65	; 0x41
   10392:	5c9b      	ldrb	r3, [r3, r2]
   10394:	2202      	movs	r2, #2
   10396:	4013      	ands	r3, r2
   10398:	b2db      	uxtb	r3, r3
   1039a:	2b00      	cmp	r3, #0
   1039c:	d105      	bne.n	103aa <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   1039e:	687b      	ldr	r3, [r7, #4]
   103a0:	2100      	movs	r1, #0
   103a2:	0018      	movs	r0, r3
   103a4:	4b62      	ldr	r3, [pc, #392]	; (10530 <_http_client_read_chuked_entity+0x20c>)
   103a6:	4798      	blx	r3
					return;
   103a8:	e0bf      	b.n	1052a <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   103aa:	697b      	ldr	r3, [r7, #20]
   103ac:	1c9a      	adds	r2, r3, #2
   103ae:	687b      	ldr	r3, [r7, #4]
   103b0:	0011      	movs	r1, r2
   103b2:	0018      	movs	r0, r3
   103b4:	4b5f      	ldr	r3, [pc, #380]	; (10534 <_http_client_read_chuked_entity+0x210>)
   103b6:	4798      	blx	r3
   103b8:	e0b2      	b.n	10520 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   103ba:	687b      	ldr	r3, [r7, #4]
   103bc:	22e0      	movs	r2, #224	; 0xe0
   103be:	589a      	ldr	r2, [r3, r2]
   103c0:	69fb      	ldr	r3, [r7, #28]
   103c2:	429a      	cmp	r2, r3
   103c4:	dd00      	ble.n	103c8 <_http_client_read_chuked_entity+0xa4>
   103c6:	e0ab      	b.n	10520 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   103c8:	687b      	ldr	r3, [r7, #4]
   103ca:	22e0      	movs	r2, #224	; 0xe0
   103cc:	589b      	ldr	r3, [r3, r2]
   103ce:	001a      	movs	r2, r3
   103d0:	2308      	movs	r3, #8
   103d2:	18fb      	adds	r3, r7, r3
   103d4:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   103d6:	2308      	movs	r3, #8
   103d8:	18fb      	adds	r3, r7, r3
   103da:	697a      	ldr	r2, [r7, #20]
   103dc:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   103de:	2308      	movs	r3, #8
   103e0:	18fb      	adds	r3, r7, r3
   103e2:	2200      	movs	r2, #0
   103e4:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   103e6:	687b      	ldr	r3, [r7, #4]
   103e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   103ea:	2b00      	cmp	r3, #0
   103ec:	d006      	beq.n	103fc <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   103ee:	687b      	ldr	r3, [r7, #4]
   103f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   103f2:	2208      	movs	r2, #8
   103f4:	18ba      	adds	r2, r7, r2
   103f6:	6878      	ldr	r0, [r7, #4]
   103f8:	2103      	movs	r1, #3
   103fa:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   103fc:	687b      	ldr	r3, [r7, #4]
   103fe:	22e0      	movs	r2, #224	; 0xe0
   10400:	589b      	ldr	r3, [r3, r2]
   10402:	3302      	adds	r3, #2
   10404:	697a      	ldr	r2, [r7, #20]
   10406:	18d2      	adds	r2, r2, r3
   10408:	687b      	ldr	r3, [r7, #4]
   1040a:	0011      	movs	r1, r2
   1040c:	0018      	movs	r0, r3
   1040e:	4b49      	ldr	r3, [pc, #292]	; (10534 <_http_client_read_chuked_entity+0x210>)
   10410:	4798      	blx	r3
				length = (int)module->recved_size;
   10412:	687b      	ldr	r3, [r7, #4]
   10414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10416:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   10418:	687b      	ldr	r3, [r7, #4]
   1041a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1041c:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   1041e:	687b      	ldr	r3, [r7, #4]
   10420:	21e0      	movs	r1, #224	; 0xe0
   10422:	2201      	movs	r2, #1
   10424:	4252      	negs	r2, r2
   10426:	505a      	str	r2, [r3, r1]
   10428:	e07a      	b.n	10520 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   1042a:	687b      	ldr	r3, [r7, #4]
   1042c:	22e0      	movs	r2, #224	; 0xe0
   1042e:	2100      	movs	r1, #0
   10430:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   10432:	e05a      	b.n	104ea <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   10434:	697b      	ldr	r3, [r7, #20]
   10436:	781b      	ldrb	r3, [r3, #0]
   10438:	2b0a      	cmp	r3, #10
   1043a:	d106      	bne.n	1044a <_http_client_read_chuked_entity+0x126>
					buffer++;
   1043c:	697b      	ldr	r3, [r7, #20]
   1043e:	3301      	adds	r3, #1
   10440:	617b      	str	r3, [r7, #20]
					length--;
   10442:	69fb      	ldr	r3, [r7, #28]
   10444:	3b01      	subs	r3, #1
   10446:	61fb      	str	r3, [r7, #28]
					break;
   10448:	e052      	b.n	104f0 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   1044a:	69bb      	ldr	r3, [r7, #24]
   1044c:	2b00      	cmp	r3, #0
   1044e:	d145      	bne.n	104dc <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   10450:	697b      	ldr	r3, [r7, #20]
   10452:	781b      	ldrb	r3, [r3, #0]
   10454:	2b2f      	cmp	r3, #47	; 0x2f
   10456:	d910      	bls.n	1047a <_http_client_read_chuked_entity+0x156>
   10458:	697b      	ldr	r3, [r7, #20]
   1045a:	781b      	ldrb	r3, [r3, #0]
   1045c:	2b39      	cmp	r3, #57	; 0x39
   1045e:	d80c      	bhi.n	1047a <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   10460:	687b      	ldr	r3, [r7, #4]
   10462:	22e0      	movs	r2, #224	; 0xe0
   10464:	589b      	ldr	r3, [r3, r2]
   10466:	011b      	lsls	r3, r3, #4
   10468:	697a      	ldr	r2, [r7, #20]
   1046a:	7812      	ldrb	r2, [r2, #0]
   1046c:	189b      	adds	r3, r3, r2
   1046e:	3b30      	subs	r3, #48	; 0x30
   10470:	001a      	movs	r2, r3
   10472:	687b      	ldr	r3, [r7, #4]
   10474:	21e0      	movs	r1, #224	; 0xe0
   10476:	505a      	str	r2, [r3, r1]
   10478:	e031      	b.n	104de <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   1047a:	697b      	ldr	r3, [r7, #20]
   1047c:	781b      	ldrb	r3, [r3, #0]
   1047e:	2b60      	cmp	r3, #96	; 0x60
   10480:	d910      	bls.n	104a4 <_http_client_read_chuked_entity+0x180>
   10482:	697b      	ldr	r3, [r7, #20]
   10484:	781b      	ldrb	r3, [r3, #0]
   10486:	2b66      	cmp	r3, #102	; 0x66
   10488:	d80c      	bhi.n	104a4 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   1048a:	687b      	ldr	r3, [r7, #4]
   1048c:	22e0      	movs	r2, #224	; 0xe0
   1048e:	589b      	ldr	r3, [r3, r2]
   10490:	011b      	lsls	r3, r3, #4
   10492:	697a      	ldr	r2, [r7, #20]
   10494:	7812      	ldrb	r2, [r2, #0]
   10496:	189b      	adds	r3, r3, r2
   10498:	3b61      	subs	r3, #97	; 0x61
   1049a:	001a      	movs	r2, r3
   1049c:	687b      	ldr	r3, [r7, #4]
   1049e:	21e0      	movs	r1, #224	; 0xe0
   104a0:	505a      	str	r2, [r3, r1]
   104a2:	e01c      	b.n	104de <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   104a4:	697b      	ldr	r3, [r7, #20]
   104a6:	781b      	ldrb	r3, [r3, #0]
   104a8:	2b40      	cmp	r3, #64	; 0x40
   104aa:	d910      	bls.n	104ce <_http_client_read_chuked_entity+0x1aa>
   104ac:	697b      	ldr	r3, [r7, #20]
   104ae:	781b      	ldrb	r3, [r3, #0]
   104b0:	2b46      	cmp	r3, #70	; 0x46
   104b2:	d80c      	bhi.n	104ce <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   104b4:	687b      	ldr	r3, [r7, #4]
   104b6:	22e0      	movs	r2, #224	; 0xe0
   104b8:	589b      	ldr	r3, [r3, r2]
   104ba:	011b      	lsls	r3, r3, #4
   104bc:	697a      	ldr	r2, [r7, #20]
   104be:	7812      	ldrb	r2, [r2, #0]
   104c0:	189b      	adds	r3, r3, r2
   104c2:	3b41      	subs	r3, #65	; 0x41
   104c4:	001a      	movs	r2, r3
   104c6:	687b      	ldr	r3, [r7, #4]
   104c8:	21e0      	movs	r1, #224	; 0xe0
   104ca:	505a      	str	r2, [r3, r1]
   104cc:	e007      	b.n	104de <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   104ce:	697b      	ldr	r3, [r7, #20]
   104d0:	781b      	ldrb	r3, [r3, #0]
   104d2:	2b3b      	cmp	r3, #59	; 0x3b
   104d4:	d103      	bne.n	104de <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   104d6:	2301      	movs	r3, #1
   104d8:	61bb      	str	r3, [r7, #24]
   104da:	e000      	b.n	104de <_http_client_read_chuked_entity+0x1ba>
					continue;
   104dc:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   104de:	697b      	ldr	r3, [r7, #20]
   104e0:	3301      	adds	r3, #1
   104e2:	617b      	str	r3, [r7, #20]
   104e4:	69fb      	ldr	r3, [r7, #28]
   104e6:	3b01      	subs	r3, #1
   104e8:	61fb      	str	r3, [r7, #28]
   104ea:	69fb      	ldr	r3, [r7, #28]
   104ec:	2b00      	cmp	r3, #0
   104ee:	dca1      	bgt.n	10434 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   104f0:	687b      	ldr	r3, [r7, #4]
   104f2:	22e0      	movs	r2, #224	; 0xe0
   104f4:	589a      	ldr	r2, [r3, r2]
   104f6:	687b      	ldr	r3, [r7, #4]
   104f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   104fa:	429a      	cmp	r2, r3
   104fc:	dd07      	ble.n	1050e <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   104fe:	238b      	movs	r3, #139	; 0x8b
   10500:	425a      	negs	r2, r3
   10502:	687b      	ldr	r3, [r7, #4]
   10504:	0011      	movs	r1, r2
   10506:	0018      	movs	r0, r3
   10508:	4b09      	ldr	r3, [pc, #36]	; (10530 <_http_client_read_chuked_entity+0x20c>)
   1050a:	4798      	blx	r3
				return;
   1050c:	e00d      	b.n	1052a <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   1050e:	69fb      	ldr	r3, [r7, #28]
   10510:	2b00      	cmp	r3, #0
   10512:	d105      	bne.n	10520 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   10514:	687b      	ldr	r3, [r7, #4]
   10516:	21e0      	movs	r1, #224	; 0xe0
   10518:	2201      	movs	r2, #1
   1051a:	4252      	negs	r2, r2
   1051c:	505a      	str	r2, [r3, r1]
				return;
   1051e:	e004      	b.n	1052a <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   10520:	687b      	ldr	r3, [r7, #4]
   10522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10524:	2b00      	cmp	r3, #0
   10526:	d000      	beq.n	1052a <_http_client_read_chuked_entity+0x206>
   10528:	e708      	b.n	1033c <_http_client_read_chuked_entity+0x18>
}
   1052a:	46bd      	mov	sp, r7
   1052c:	b008      	add	sp, #32
   1052e:	bd80      	pop	{r7, pc}
   10530:	0000f711 	.word	0x0000f711
   10534:	000106e5 	.word	0x000106e5

00010538 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   10538:	b580      	push	{r7, lr}
   1053a:	b086      	sub	sp, #24
   1053c:	af00      	add	r7, sp, #0
   1053e:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   10540:	687b      	ldr	r3, [r7, #4]
   10542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10544:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   10546:	687b      	ldr	r3, [r7, #4]
   10548:	22dc      	movs	r2, #220	; 0xdc
   1054a:	589b      	ldr	r3, [r3, r2]
   1054c:	2b00      	cmp	r3, #0
   1054e:	db58      	blt.n	10602 <_http_client_handle_entity+0xca>
   10550:	687b      	ldr	r3, [r7, #4]
   10552:	22dc      	movs	r2, #220	; 0xdc
   10554:	589a      	ldr	r2, [r3, r2]
   10556:	687b      	ldr	r3, [r7, #4]
   10558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1055a:	429a      	cmp	r2, r3
   1055c:	dc51      	bgt.n	10602 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   1055e:	687b      	ldr	r3, [r7, #4]
   10560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10562:	0019      	movs	r1, r3
   10564:	687b      	ldr	r3, [r7, #4]
   10566:	22dc      	movs	r2, #220	; 0xdc
   10568:	589b      	ldr	r3, [r3, r2]
   1056a:	4299      	cmp	r1, r3
   1056c:	da00      	bge.n	10570 <_http_client_handle_entity+0x38>
   1056e:	e0a9      	b.n	106c4 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   10570:	687b      	ldr	r3, [r7, #4]
   10572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10574:	2b00      	cmp	r3, #0
   10576:	d020      	beq.n	105ba <_http_client_handle_entity+0x82>
   10578:	687b      	ldr	r3, [r7, #4]
   1057a:	22e4      	movs	r2, #228	; 0xe4
   1057c:	5a9b      	ldrh	r3, [r3, r2]
   1057e:	2b00      	cmp	r3, #0
   10580:	d01b      	beq.n	105ba <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   10582:	687b      	ldr	r3, [r7, #4]
   10584:	22e4      	movs	r2, #228	; 0xe4
   10586:	5a9a      	ldrh	r2, [r3, r2]
   10588:	2308      	movs	r3, #8
   1058a:	18fb      	adds	r3, r7, r3
   1058c:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   1058e:	2308      	movs	r3, #8
   10590:	18fb      	adds	r3, r7, r3
   10592:	2200      	movs	r2, #0
   10594:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   10596:	687b      	ldr	r3, [r7, #4]
   10598:	22dc      	movs	r2, #220	; 0xdc
   1059a:	589b      	ldr	r3, [r3, r2]
   1059c:	001a      	movs	r2, r3
   1059e:	2308      	movs	r3, #8
   105a0:	18fb      	adds	r3, r7, r3
   105a2:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   105a4:	2308      	movs	r3, #8
   105a6:	18fb      	adds	r3, r7, r3
   105a8:	697a      	ldr	r2, [r7, #20]
   105aa:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   105ac:	687b      	ldr	r3, [r7, #4]
   105ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   105b0:	2208      	movs	r2, #8
   105b2:	18ba      	adds	r2, r7, r2
   105b4:	6878      	ldr	r0, [r7, #4]
   105b6:	2102      	movs	r1, #2
   105b8:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   105ba:	687b      	ldr	r3, [r7, #4]
   105bc:	22d8      	movs	r2, #216	; 0xd8
   105be:	2100      	movs	r1, #0
   105c0:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   105c2:	687b      	ldr	r3, [r7, #4]
   105c4:	22e4      	movs	r2, #228	; 0xe4
   105c6:	2100      	movs	r1, #0
   105c8:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   105ca:	687b      	ldr	r3, [r7, #4]
   105cc:	2241      	movs	r2, #65	; 0x41
   105ce:	5c9b      	ldrb	r3, [r3, r2]
   105d0:	2202      	movs	r2, #2
   105d2:	4013      	ands	r3, r2
   105d4:	b2db      	uxtb	r3, r3
   105d6:	2b00      	cmp	r3, #0
   105d8:	d105      	bne.n	105e6 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   105da:	687b      	ldr	r3, [r7, #4]
   105dc:	2100      	movs	r1, #0
   105de:	0018      	movs	r0, r3
   105e0:	4b3b      	ldr	r3, [pc, #236]	; (106d0 <_http_client_handle_entity+0x198>)
   105e2:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   105e4:	e06e      	b.n	106c4 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   105e6:	687b      	ldr	r3, [r7, #4]
   105e8:	22dc      	movs	r2, #220	; 0xdc
   105ea:	589b      	ldr	r3, [r3, r2]
   105ec:	001a      	movs	r2, r3
   105ee:	697b      	ldr	r3, [r7, #20]
   105f0:	189a      	adds	r2, r3, r2
   105f2:	687b      	ldr	r3, [r7, #4]
   105f4:	0011      	movs	r1, r2
   105f6:	0018      	movs	r0, r3
   105f8:	4b36      	ldr	r3, [pc, #216]	; (106d4 <_http_client_handle_entity+0x19c>)
   105fa:	4798      	blx	r3
				return module->recved_size;
   105fc:	687b      	ldr	r3, [r7, #4]
   105fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10600:	e061      	b.n	106c6 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   10602:	687b      	ldr	r3, [r7, #4]
   10604:	22dc      	movs	r2, #220	; 0xdc
   10606:	589b      	ldr	r3, [r3, r2]
   10608:	2b00      	cmp	r3, #0
   1060a:	db57      	blt.n	106bc <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   1060c:	687b      	ldr	r3, [r7, #4]
   1060e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   10610:	2308      	movs	r3, #8
   10612:	18fb      	adds	r3, r7, r3
   10614:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   10616:	2308      	movs	r3, #8
   10618:	18fb      	adds	r3, r7, r3
   1061a:	697a      	ldr	r2, [r7, #20]
   1061c:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   1061e:	687b      	ldr	r3, [r7, #4]
   10620:	22e0      	movs	r2, #224	; 0xe0
   10622:	589a      	ldr	r2, [r3, r2]
   10624:	687b      	ldr	r3, [r7, #4]
   10626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10628:	18d2      	adds	r2, r2, r3
   1062a:	687b      	ldr	r3, [r7, #4]
   1062c:	21e0      	movs	r1, #224	; 0xe0
   1062e:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   10630:	687b      	ldr	r3, [r7, #4]
   10632:	22dc      	movs	r2, #220	; 0xdc
   10634:	589a      	ldr	r2, [r3, r2]
   10636:	687b      	ldr	r3, [r7, #4]
   10638:	21e0      	movs	r1, #224	; 0xe0
   1063a:	585b      	ldr	r3, [r3, r1]
   1063c:	429a      	cmp	r2, r3
   1063e:	dc0c      	bgt.n	1065a <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   10640:	687b      	ldr	r3, [r7, #4]
   10642:	22d8      	movs	r2, #216	; 0xd8
   10644:	2100      	movs	r1, #0
   10646:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   10648:	687b      	ldr	r3, [r7, #4]
   1064a:	22e4      	movs	r2, #228	; 0xe4
   1064c:	2100      	movs	r1, #0
   1064e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   10650:	2308      	movs	r3, #8
   10652:	18fb      	adds	r3, r7, r3
   10654:	2201      	movs	r2, #1
   10656:	721a      	strb	r2, [r3, #8]
   10658:	e003      	b.n	10662 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   1065a:	2308      	movs	r3, #8
   1065c:	18fb      	adds	r3, r7, r3
   1065e:	2200      	movs	r2, #0
   10660:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   10662:	687b      	ldr	r3, [r7, #4]
   10664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10666:	2b00      	cmp	r3, #0
   10668:	d006      	beq.n	10678 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1066a:	687b      	ldr	r3, [r7, #4]
   1066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1066e:	2208      	movs	r2, #8
   10670:	18ba      	adds	r2, r7, r2
   10672:	6878      	ldr	r0, [r7, #4]
   10674:	2103      	movs	r1, #3
   10676:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   10678:	2308      	movs	r3, #8
   1067a:	18fb      	adds	r3, r7, r3
   1067c:	7a1b      	ldrb	r3, [r3, #8]
   1067e:	2b01      	cmp	r3, #1
   10680:	d112      	bne.n	106a8 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   10682:	687b      	ldr	r3, [r7, #4]
   10684:	2241      	movs	r2, #65	; 0x41
   10686:	5c9b      	ldrb	r3, [r3, r2]
   10688:	2202      	movs	r2, #2
   1068a:	4013      	ands	r3, r2
   1068c:	b2db      	uxtb	r3, r3
   1068e:	2b00      	cmp	r3, #0
   10690:	d10a      	bne.n	106a8 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   10692:	4b11      	ldr	r3, [pc, #68]	; (106d8 <_http_client_handle_entity+0x1a0>)
   10694:	0018      	movs	r0, r3
   10696:	4b11      	ldr	r3, [pc, #68]	; (106dc <_http_client_handle_entity+0x1a4>)
   10698:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   1069a:	687b      	ldr	r3, [r7, #4]
   1069c:	2100      	movs	r1, #0
   1069e:	0018      	movs	r0, r3
   106a0:	4b0b      	ldr	r3, [pc, #44]	; (106d0 <_http_client_handle_entity+0x198>)
   106a2:	4798      	blx	r3
					return 0;
   106a4:	2300      	movs	r3, #0
   106a6:	e00e      	b.n	106c6 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   106a8:	687b      	ldr	r3, [r7, #4]
   106aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   106ac:	697a      	ldr	r2, [r7, #20]
   106ae:	18d2      	adds	r2, r2, r3
   106b0:	687b      	ldr	r3, [r7, #4]
   106b2:	0011      	movs	r1, r2
   106b4:	0018      	movs	r0, r3
   106b6:	4b07      	ldr	r3, [pc, #28]	; (106d4 <_http_client_handle_entity+0x19c>)
   106b8:	4798      	blx	r3
   106ba:	e003      	b.n	106c4 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   106bc:	687b      	ldr	r3, [r7, #4]
   106be:	0018      	movs	r0, r3
   106c0:	4b07      	ldr	r3, [pc, #28]	; (106e0 <_http_client_handle_entity+0x1a8>)
   106c2:	4798      	blx	r3
		}
	}

	return 0;
   106c4:	2300      	movs	r3, #0
}
   106c6:	0018      	movs	r0, r3
   106c8:	46bd      	mov	sp, r7
   106ca:	b006      	add	sp, #24
   106cc:	bd80      	pop	{r7, pc}
   106ce:	46c0      	nop			; (mov r8, r8)
   106d0:	0000f711 	.word	0x0000f711
   106d4:	000106e5 	.word	0x000106e5
   106d8:	00019540 	.word	0x00019540
   106dc:	00016e85 	.word	0x00016e85
   106e0:	00010325 	.word	0x00010325

000106e4 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   106e4:	b580      	push	{r7, lr}
   106e6:	b084      	sub	sp, #16
   106e8:	af00      	add	r7, sp, #0
   106ea:	6078      	str	r0, [r7, #4]
   106ec:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   106ee:	687b      	ldr	r3, [r7, #4]
   106f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   106f2:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   106f4:	687b      	ldr	r3, [r7, #4]
   106f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   106f8:	001a      	movs	r2, r3
   106fa:	683b      	ldr	r3, [r7, #0]
   106fc:	1ad2      	subs	r2, r2, r3
   106fe:	68fb      	ldr	r3, [r7, #12]
   10700:	18d3      	adds	r3, r2, r3
   10702:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   10704:	68bb      	ldr	r3, [r7, #8]
   10706:	2b00      	cmp	r3, #0
   10708:	dd09      	ble.n	1071e <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   1070a:	68ba      	ldr	r2, [r7, #8]
   1070c:	6839      	ldr	r1, [r7, #0]
   1070e:	68fb      	ldr	r3, [r7, #12]
   10710:	0018      	movs	r0, r3
   10712:	4b06      	ldr	r3, [pc, #24]	; (1072c <_http_client_move_buffer+0x48>)
   10714:	4798      	blx	r3
		module->recved_size = remain;
   10716:	68ba      	ldr	r2, [r7, #8]
   10718:	687b      	ldr	r3, [r7, #4]
   1071a:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   1071c:	e002      	b.n	10724 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   1071e:	687b      	ldr	r3, [r7, #4]
   10720:	2200      	movs	r2, #0
   10722:	645a      	str	r2, [r3, #68]	; 0x44
}
   10724:	46c0      	nop			; (mov r8, r8)
   10726:	46bd      	mov	sp, r7
   10728:	b004      	add	sp, #16
   1072a:	bd80      	pop	{r7, pc}
   1072c:	00016be3 	.word	0x00016be3

00010730 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   10730:	b580      	push	{r7, lr}
   10732:	b084      	sub	sp, #16
   10734:	af00      	add	r7, sp, #0
   10736:	60f8      	str	r0, [r7, #12]
   10738:	60b9      	str	r1, [r7, #8]
   1073a:	607a      	str	r2, [r7, #4]
   1073c:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   1073e:	68fb      	ldr	r3, [r7, #12]
   10740:	687a      	ldr	r2, [r7, #4]
   10742:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   10744:	68fb      	ldr	r3, [r7, #12]
   10746:	68ba      	ldr	r2, [r7, #8]
   10748:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   1074a:	68fb      	ldr	r3, [r7, #12]
   1074c:	2200      	movs	r2, #0
   1074e:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   10750:	68fb      	ldr	r3, [r7, #12]
   10752:	683a      	ldr	r2, [r7, #0]
   10754:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   10756:	68fb      	ldr	r3, [r7, #12]
   10758:	69ba      	ldr	r2, [r7, #24]
   1075a:	60da      	str	r2, [r3, #12]
}
   1075c:	46c0      	nop			; (mov r8, r8)
   1075e:	46bd      	mov	sp, r7
   10760:	b004      	add	sp, #16
   10762:	bd80      	pop	{r7, pc}

00010764 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   10764:	b580      	push	{r7, lr}
   10766:	b084      	sub	sp, #16
   10768:	af00      	add	r7, sp, #0
   1076a:	6078      	str	r0, [r7, #4]
   1076c:	000a      	movs	r2, r1
   1076e:	1cfb      	adds	r3, r7, #3
   10770:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   10772:	687b      	ldr	r3, [r7, #4]
   10774:	681a      	ldr	r2, [r3, #0]
   10776:	687b      	ldr	r3, [r7, #4]
   10778:	685b      	ldr	r3, [r3, #4]
   1077a:	1ad3      	subs	r3, r2, r3
   1077c:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   1077e:	68fb      	ldr	r3, [r7, #12]
   10780:	2b00      	cmp	r3, #0
   10782:	dc03      	bgt.n	1078c <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   10784:	687b      	ldr	r3, [r7, #4]
   10786:	0018      	movs	r0, r3
   10788:	4b08      	ldr	r3, [pc, #32]	; (107ac <stream_writer_send_8+0x48>)
   1078a:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   1078c:	687b      	ldr	r3, [r7, #4]
   1078e:	6919      	ldr	r1, [r3, #16]
   10790:	687b      	ldr	r3, [r7, #4]
   10792:	685b      	ldr	r3, [r3, #4]
   10794:	1c58      	adds	r0, r3, #1
   10796:	687a      	ldr	r2, [r7, #4]
   10798:	6050      	str	r0, [r2, #4]
   1079a:	18cb      	adds	r3, r1, r3
   1079c:	1cfa      	adds	r2, r7, #3
   1079e:	7812      	ldrb	r2, [r2, #0]
   107a0:	701a      	strb	r2, [r3, #0]
}
   107a2:	46c0      	nop			; (mov r8, r8)
   107a4:	46bd      	mov	sp, r7
   107a6:	b004      	add	sp, #16
   107a8:	bd80      	pop	{r7, pc}
   107aa:	46c0      	nop			; (mov r8, r8)
   107ac:	000107ed 	.word	0x000107ed

000107b0 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   107b0:	b580      	push	{r7, lr}
   107b2:	b084      	sub	sp, #16
   107b4:	af00      	add	r7, sp, #0
   107b6:	60f8      	str	r0, [r7, #12]
   107b8:	60b9      	str	r1, [r7, #8]
   107ba:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   107bc:	e00d      	b.n	107da <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   107be:	68bb      	ldr	r3, [r7, #8]
   107c0:	781b      	ldrb	r3, [r3, #0]
   107c2:	b25a      	sxtb	r2, r3
   107c4:	68fb      	ldr	r3, [r7, #12]
   107c6:	0011      	movs	r1, r2
   107c8:	0018      	movs	r0, r3
   107ca:	4b07      	ldr	r3, [pc, #28]	; (107e8 <stream_writer_send_buffer+0x38>)
   107cc:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   107ce:	687b      	ldr	r3, [r7, #4]
   107d0:	3b01      	subs	r3, #1
   107d2:	607b      	str	r3, [r7, #4]
   107d4:	68bb      	ldr	r3, [r7, #8]
   107d6:	3301      	adds	r3, #1
   107d8:	60bb      	str	r3, [r7, #8]
   107da:	687b      	ldr	r3, [r7, #4]
   107dc:	2b00      	cmp	r3, #0
   107de:	d1ee      	bne.n	107be <stream_writer_send_buffer+0xe>
	}
}
   107e0:	46c0      	nop			; (mov r8, r8)
   107e2:	46bd      	mov	sp, r7
   107e4:	b004      	add	sp, #16
   107e6:	bd80      	pop	{r7, pc}
   107e8:	00010765 	.word	0x00010765

000107ec <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   107ec:	b590      	push	{r4, r7, lr}
   107ee:	b083      	sub	sp, #12
   107f0:	af00      	add	r7, sp, #0
   107f2:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   107f4:	687b      	ldr	r3, [r7, #4]
   107f6:	685b      	ldr	r3, [r3, #4]
   107f8:	2b00      	cmp	r3, #0
   107fa:	d00c      	beq.n	10816 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   107fc:	687b      	ldr	r3, [r7, #4]
   107fe:	689c      	ldr	r4, [r3, #8]
   10800:	687b      	ldr	r3, [r7, #4]
   10802:	68d8      	ldr	r0, [r3, #12]
   10804:	687b      	ldr	r3, [r7, #4]
   10806:	6919      	ldr	r1, [r3, #16]
   10808:	687b      	ldr	r3, [r7, #4]
   1080a:	685b      	ldr	r3, [r3, #4]
   1080c:	001a      	movs	r2, r3
   1080e:	47a0      	blx	r4
		writer->written = 0;
   10810:	687b      	ldr	r3, [r7, #4]
   10812:	2200      	movs	r2, #0
   10814:	605a      	str	r2, [r3, #4]
	}
}
   10816:	46c0      	nop			; (mov r8, r8)
   10818:	46bd      	mov	sp, r7
   1081a:	b003      	add	sp, #12
   1081c:	bd90      	pop	{r4, r7, pc}
	...

00010820 <system_cpu_clock_get_hz>:
{
   10820:	b580      	push	{r7, lr}
   10822:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   10824:	2000      	movs	r0, #0
   10826:	4b05      	ldr	r3, [pc, #20]	; (1083c <system_cpu_clock_get_hz+0x1c>)
   10828:	4798      	blx	r3
   1082a:	0002      	movs	r2, r0
   1082c:	4b04      	ldr	r3, [pc, #16]	; (10840 <system_cpu_clock_get_hz+0x20>)
   1082e:	7a1b      	ldrb	r3, [r3, #8]
   10830:	b2db      	uxtb	r3, r3
   10832:	40da      	lsrs	r2, r3
   10834:	0013      	movs	r3, r2
}
   10836:	0018      	movs	r0, r3
   10838:	46bd      	mov	sp, r7
   1083a:	bd80      	pop	{r7, pc}
   1083c:	00014f7d 	.word	0x00014f7d
   10840:	40000400 	.word	0x40000400

00010844 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   10844:	b580      	push	{r7, lr}
   10846:	b084      	sub	sp, #16
   10848:	af00      	add	r7, sp, #0
   1084a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   1084c:	687b      	ldr	r3, [r7, #4]
   1084e:	681b      	ldr	r3, [r3, #0]
   10850:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   10852:	46c0      	nop			; (mov r8, r8)
   10854:	68fb      	ldr	r3, [r7, #12]
   10856:	689b      	ldr	r3, [r3, #8]
   10858:	2202      	movs	r2, #2
   1085a:	4013      	ands	r3, r2
   1085c:	d1fa      	bne.n	10854 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   1085e:	68fb      	ldr	r3, [r7, #12]
   10860:	681b      	ldr	r3, [r3, #0]
   10862:	2202      	movs	r2, #2
   10864:	431a      	orrs	r2, r3
   10866:	68fb      	ldr	r3, [r7, #12]
   10868:	601a      	str	r2, [r3, #0]
}
   1086a:	46c0      	nop			; (mov r8, r8)
   1086c:	46bd      	mov	sp, r7
   1086e:	b004      	add	sp, #16
   10870:	bd80      	pop	{r7, pc}
	...

00010874 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   10874:	b580      	push	{r7, lr}
   10876:	b082      	sub	sp, #8
   10878:	af00      	add	r7, sp, #0
   1087a:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   1087c:	4b04      	ldr	r3, [pc, #16]	; (10890 <sw_timer_tcc_callback+0x1c>)
   1087e:	681b      	ldr	r3, [r3, #0]
   10880:	1c5a      	adds	r2, r3, #1
   10882:	4b03      	ldr	r3, [pc, #12]	; (10890 <sw_timer_tcc_callback+0x1c>)
   10884:	601a      	str	r2, [r3, #0]
}
   10886:	46c0      	nop			; (mov r8, r8)
   10888:	46bd      	mov	sp, r7
   1088a:	b002      	add	sp, #8
   1088c:	bd80      	pop	{r7, pc}
   1088e:	46c0      	nop			; (mov r8, r8)
   10890:	2000023c 	.word	0x2000023c

00010894 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   10894:	b580      	push	{r7, lr}
   10896:	b082      	sub	sp, #8
   10898:	af00      	add	r7, sp, #0
   1089a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   1089c:	687b      	ldr	r3, [r7, #4]
   1089e:	2264      	movs	r2, #100	; 0x64
   108a0:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   108a2:	687b      	ldr	r3, [r7, #4]
   108a4:	2200      	movs	r2, #0
   108a6:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   108a8:	687b      	ldr	r3, [r7, #4]
   108aa:	2200      	movs	r2, #0
   108ac:	705a      	strb	r2, [r3, #1]
}
   108ae:	46c0      	nop			; (mov r8, r8)
   108b0:	46bd      	mov	sp, r7
   108b2:	b002      	add	sp, #8
   108b4:	bd80      	pop	{r7, pc}
	...

000108b8 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   108b8:	b590      	push	{r4, r7, lr}
   108ba:	b0b1      	sub	sp, #196	; 0xc4
   108bc:	af00      	add	r7, sp, #0
   108be:	6078      	str	r0, [r7, #4]
   108c0:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   108c2:	230c      	movs	r3, #12
   108c4:	18fb      	adds	r3, r7, r3
   108c6:	4a2e      	ldr	r2, [pc, #184]	; (10980 <sw_timer_init+0xc8>)
   108c8:	ca13      	ldmia	r2!, {r0, r1, r4}
   108ca:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   108cc:	683b      	ldr	r3, [r7, #0]
   108ce:	885b      	ldrh	r3, [r3, #2]
   108d0:	001a      	movs	r2, r3
   108d2:	687b      	ldr	r3, [r7, #4]
   108d4:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   108d6:	687b      	ldr	r3, [r7, #4]
   108d8:	3314      	adds	r3, #20
   108da:	22bc      	movs	r2, #188	; 0xbc
   108dc:	18ba      	adds	r2, r7, r2
   108de:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   108e0:	683b      	ldr	r3, [r7, #0]
   108e2:	781b      	ldrb	r3, [r3, #0]
   108e4:	001a      	movs	r2, r3
   108e6:	230c      	movs	r3, #12
   108e8:	18fb      	adds	r3, r7, r3
   108ea:	0092      	lsls	r2, r2, #2
   108ec:	58d2      	ldr	r2, [r2, r3]
   108ee:	2318      	movs	r3, #24
   108f0:	18fb      	adds	r3, r7, r3
   108f2:	0011      	movs	r1, r2
   108f4:	0018      	movs	r0, r3
   108f6:	4b23      	ldr	r3, [pc, #140]	; (10984 <sw_timer_init+0xcc>)
   108f8:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   108fa:	4b23      	ldr	r3, [pc, #140]	; (10988 <sw_timer_init+0xd0>)
   108fc:	4798      	blx	r3
   108fe:	0004      	movs	r4, r0
   10900:	683b      	ldr	r3, [r7, #0]
   10902:	885b      	ldrh	r3, [r3, #2]
   10904:	001a      	movs	r2, r3
   10906:	4b21      	ldr	r3, [pc, #132]	; (1098c <sw_timer_init+0xd4>)
   10908:	0011      	movs	r1, r2
   1090a:	22fa      	movs	r2, #250	; 0xfa
   1090c:	0210      	lsls	r0, r2, #8
   1090e:	4798      	blx	r3
   10910:	0003      	movs	r3, r0
   10912:	001a      	movs	r2, r3
   10914:	4b1e      	ldr	r3, [pc, #120]	; (10990 <sw_timer_init+0xd8>)
   10916:	0011      	movs	r1, r2
   10918:	0020      	movs	r0, r4
   1091a:	4798      	blx	r3
   1091c:	0003      	movs	r3, r0
   1091e:	001a      	movs	r2, r3
   10920:	2318      	movs	r3, #24
   10922:	18fb      	adds	r3, r7, r3
   10924:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   10926:	2318      	movs	r3, #24
   10928:	18fb      	adds	r3, r7, r3
   1092a:	2205      	movs	r2, #5
   1092c:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   1092e:	683b      	ldr	r3, [r7, #0]
   10930:	781b      	ldrb	r3, [r3, #0]
   10932:	001a      	movs	r2, r3
   10934:	230c      	movs	r3, #12
   10936:	18fb      	adds	r3, r7, r3
   10938:	0092      	lsls	r2, r2, #2
   1093a:	58d1      	ldr	r1, [r2, r3]
   1093c:	2318      	movs	r3, #24
   1093e:	18fa      	adds	r2, r7, r3
   10940:	23bc      	movs	r3, #188	; 0xbc
   10942:	18fb      	adds	r3, r7, r3
   10944:	681b      	ldr	r3, [r3, #0]
   10946:	0018      	movs	r0, r3
   10948:	4b12      	ldr	r3, [pc, #72]	; (10994 <sw_timer_init+0xdc>)
   1094a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   1094c:	683b      	ldr	r3, [r7, #0]
   1094e:	785b      	ldrb	r3, [r3, #1]
   10950:	3308      	adds	r3, #8
   10952:	b2da      	uxtb	r2, r3
   10954:	4910      	ldr	r1, [pc, #64]	; (10998 <sw_timer_init+0xe0>)
   10956:	23bc      	movs	r3, #188	; 0xbc
   10958:	18fb      	adds	r3, r7, r3
   1095a:	681b      	ldr	r3, [r3, #0]
   1095c:	0018      	movs	r0, r3
   1095e:	4b0f      	ldr	r3, [pc, #60]	; (1099c <sw_timer_init+0xe4>)
   10960:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   10962:	683b      	ldr	r3, [r7, #0]
   10964:	785b      	ldrb	r3, [r3, #1]
   10966:	3308      	adds	r3, #8
   10968:	b2da      	uxtb	r2, r3
   1096a:	23bc      	movs	r3, #188	; 0xbc
   1096c:	18fb      	adds	r3, r7, r3
   1096e:	681b      	ldr	r3, [r3, #0]
   10970:	0011      	movs	r1, r2
   10972:	0018      	movs	r0, r3
   10974:	4b0a      	ldr	r3, [pc, #40]	; (109a0 <sw_timer_init+0xe8>)
   10976:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   10978:	46c0      	nop			; (mov r8, r8)
   1097a:	46bd      	mov	sp, r7
   1097c:	b031      	add	sp, #196	; 0xc4
   1097e:	bd90      	pop	{r4, r7, pc}
   10980:	00019580 	.word	0x00019580
   10984:	0000e36d 	.word	0x0000e36d
   10988:	00010821 	.word	0x00010821
   1098c:	00016929 	.word	0x00016929
   10990:	00016815 	.word	0x00016815
   10994:	0000e9c9 	.word	0x0000e9c9
   10998:	00010875 	.word	0x00010875
   1099c:	0000ede1 	.word	0x0000ede1
   109a0:	0000ee21 	.word	0x0000ee21

000109a4 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   109a4:	b580      	push	{r7, lr}
   109a6:	b084      	sub	sp, #16
   109a8:	af00      	add	r7, sp, #0
   109aa:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   109ac:	687b      	ldr	r3, [r7, #4]
   109ae:	3314      	adds	r3, #20
   109b0:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   109b2:	68fb      	ldr	r3, [r7, #12]
   109b4:	0018      	movs	r0, r3
   109b6:	4b03      	ldr	r3, [pc, #12]	; (109c4 <sw_timer_enable+0x20>)
   109b8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   109ba:	46c0      	nop			; (mov r8, r8)
   109bc:	46bd      	mov	sp, r7
   109be:	b004      	add	sp, #16
   109c0:	bd80      	pop	{r7, pc}
   109c2:	46c0      	nop			; (mov r8, r8)
   109c4:	00010845 	.word	0x00010845

000109c8 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   109c8:	b580      	push	{r7, lr}
   109ca:	b086      	sub	sp, #24
   109cc:	af00      	add	r7, sp, #0
   109ce:	60f8      	str	r0, [r7, #12]
   109d0:	60b9      	str	r1, [r7, #8]
   109d2:	607a      	str	r2, [r7, #4]
   109d4:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   109d6:	2300      	movs	r3, #0
   109d8:	617b      	str	r3, [r7, #20]
   109da:	e032      	b.n	10a42 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   109dc:	68f9      	ldr	r1, [r7, #12]
   109de:	697a      	ldr	r2, [r7, #20]
   109e0:	0013      	movs	r3, r2
   109e2:	009b      	lsls	r3, r3, #2
   109e4:	189b      	adds	r3, r3, r2
   109e6:	009b      	lsls	r3, r3, #2
   109e8:	5c5b      	ldrb	r3, [r3, r1]
   109ea:	07db      	lsls	r3, r3, #31
   109ec:	0fdb      	lsrs	r3, r3, #31
   109ee:	b2db      	uxtb	r3, r3
   109f0:	2b00      	cmp	r3, #0
   109f2:	d123      	bne.n	10a3c <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   109f4:	697a      	ldr	r2, [r7, #20]
   109f6:	0013      	movs	r3, r2
   109f8:	009b      	lsls	r3, r3, #2
   109fa:	189b      	adds	r3, r3, r2
   109fc:	009b      	lsls	r3, r3, #2
   109fe:	68fa      	ldr	r2, [r7, #12]
   10a00:	18d3      	adds	r3, r2, r3
   10a02:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   10a04:	693b      	ldr	r3, [r7, #16]
   10a06:	68ba      	ldr	r2, [r7, #8]
   10a08:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   10a0a:	693b      	ldr	r3, [r7, #16]
   10a0c:	781a      	ldrb	r2, [r3, #0]
   10a0e:	2102      	movs	r1, #2
   10a10:	438a      	bics	r2, r1
   10a12:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   10a14:	693b      	ldr	r3, [r7, #16]
   10a16:	687a      	ldr	r2, [r7, #4]
   10a18:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   10a1a:	68fb      	ldr	r3, [r7, #12]
   10a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   10a1e:	4b0d      	ldr	r3, [pc, #52]	; (10a54 <sw_timer_register_callback+0x8c>)
   10a20:	0011      	movs	r1, r2
   10a22:	6838      	ldr	r0, [r7, #0]
   10a24:	4798      	blx	r3
   10a26:	0003      	movs	r3, r0
   10a28:	001a      	movs	r2, r3
   10a2a:	693b      	ldr	r3, [r7, #16]
   10a2c:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   10a2e:	693b      	ldr	r3, [r7, #16]
   10a30:	781a      	ldrb	r2, [r3, #0]
   10a32:	2101      	movs	r1, #1
   10a34:	430a      	orrs	r2, r1
   10a36:	701a      	strb	r2, [r3, #0]
			return index;
   10a38:	697b      	ldr	r3, [r7, #20]
   10a3a:	e007      	b.n	10a4c <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   10a3c:	697b      	ldr	r3, [r7, #20]
   10a3e:	3301      	adds	r3, #1
   10a40:	617b      	str	r3, [r7, #20]
   10a42:	697b      	ldr	r3, [r7, #20]
   10a44:	2b00      	cmp	r3, #0
   10a46:	ddc9      	ble.n	109dc <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   10a48:	2301      	movs	r3, #1
   10a4a:	425b      	negs	r3, r3
}
   10a4c:	0018      	movs	r0, r3
   10a4e:	46bd      	mov	sp, r7
   10a50:	b006      	add	sp, #24
   10a52:	bd80      	pop	{r7, pc}
   10a54:	00016815 	.word	0x00016815

00010a58 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   10a58:	b580      	push	{r7, lr}
   10a5a:	b086      	sub	sp, #24
   10a5c:	af00      	add	r7, sp, #0
   10a5e:	60f8      	str	r0, [r7, #12]
   10a60:	60b9      	str	r1, [r7, #8]
   10a62:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   10a64:	68ba      	ldr	r2, [r7, #8]
   10a66:	0013      	movs	r3, r2
   10a68:	009b      	lsls	r3, r3, #2
   10a6a:	189b      	adds	r3, r3, r2
   10a6c:	009b      	lsls	r3, r3, #2
   10a6e:	68fa      	ldr	r2, [r7, #12]
   10a70:	18d3      	adds	r3, r2, r3
   10a72:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   10a74:	697b      	ldr	r3, [r7, #20]
   10a76:	781a      	ldrb	r2, [r3, #0]
   10a78:	2102      	movs	r1, #2
   10a7a:	430a      	orrs	r2, r1
   10a7c:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   10a7e:	68fb      	ldr	r3, [r7, #12]
   10a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   10a82:	4b07      	ldr	r3, [pc, #28]	; (10aa0 <sw_timer_enable_callback+0x48>)
   10a84:	0011      	movs	r1, r2
   10a86:	6878      	ldr	r0, [r7, #4]
   10a88:	4798      	blx	r3
   10a8a:	0003      	movs	r3, r0
   10a8c:	001a      	movs	r2, r3
   10a8e:	4b05      	ldr	r3, [pc, #20]	; (10aa4 <sw_timer_enable_callback+0x4c>)
   10a90:	681b      	ldr	r3, [r3, #0]
   10a92:	18d2      	adds	r2, r2, r3
   10a94:	697b      	ldr	r3, [r7, #20]
   10a96:	611a      	str	r2, [r3, #16]
}
   10a98:	46c0      	nop			; (mov r8, r8)
   10a9a:	46bd      	mov	sp, r7
   10a9c:	b006      	add	sp, #24
   10a9e:	bd80      	pop	{r7, pc}
   10aa0:	00016815 	.word	0x00016815
   10aa4:	2000023c 	.word	0x2000023c

00010aa8 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   10aa8:	b580      	push	{r7, lr}
   10aaa:	b084      	sub	sp, #16
   10aac:	af00      	add	r7, sp, #0
   10aae:	6078      	str	r0, [r7, #4]
   10ab0:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   10ab2:	683a      	ldr	r2, [r7, #0]
   10ab4:	0013      	movs	r3, r2
   10ab6:	009b      	lsls	r3, r3, #2
   10ab8:	189b      	adds	r3, r3, r2
   10aba:	009b      	lsls	r3, r3, #2
   10abc:	687a      	ldr	r2, [r7, #4]
   10abe:	18d3      	adds	r3, r2, r3
   10ac0:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   10ac2:	68fb      	ldr	r3, [r7, #12]
   10ac4:	781a      	ldrb	r2, [r3, #0]
   10ac6:	2102      	movs	r1, #2
   10ac8:	438a      	bics	r2, r1
   10aca:	701a      	strb	r2, [r3, #0]
}
   10acc:	46c0      	nop			; (mov r8, r8)
   10ace:	46bd      	mov	sp, r7
   10ad0:	b004      	add	sp, #16
   10ad2:	bd80      	pop	{r7, pc}

00010ad4 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   10ad4:	b590      	push	{r4, r7, lr}
   10ad6:	b085      	sub	sp, #20
   10ad8:	af00      	add	r7, sp, #0
   10ada:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   10adc:	2300      	movs	r3, #0
   10ade:	60fb      	str	r3, [r7, #12]
   10ae0:	e053      	b.n	10b8a <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   10ae2:	6879      	ldr	r1, [r7, #4]
   10ae4:	68fa      	ldr	r2, [r7, #12]
   10ae6:	0013      	movs	r3, r2
   10ae8:	009b      	lsls	r3, r3, #2
   10aea:	189b      	adds	r3, r3, r2
   10aec:	009b      	lsls	r3, r3, #2
   10aee:	5c5b      	ldrb	r3, [r3, r1]
   10af0:	07db      	lsls	r3, r3, #31
   10af2:	0fdb      	lsrs	r3, r3, #31
   10af4:	b2db      	uxtb	r3, r3
   10af6:	2b00      	cmp	r3, #0
   10af8:	d044      	beq.n	10b84 <sw_timer_task+0xb0>
   10afa:	6879      	ldr	r1, [r7, #4]
   10afc:	68fa      	ldr	r2, [r7, #12]
   10afe:	0013      	movs	r3, r2
   10b00:	009b      	lsls	r3, r3, #2
   10b02:	189b      	adds	r3, r3, r2
   10b04:	009b      	lsls	r3, r3, #2
   10b06:	5c5b      	ldrb	r3, [r3, r1]
   10b08:	079b      	lsls	r3, r3, #30
   10b0a:	0fdb      	lsrs	r3, r3, #31
   10b0c:	b2db      	uxtb	r3, r3
   10b0e:	2b00      	cmp	r3, #0
   10b10:	d038      	beq.n	10b84 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   10b12:	68fa      	ldr	r2, [r7, #12]
   10b14:	0013      	movs	r3, r2
   10b16:	009b      	lsls	r3, r3, #2
   10b18:	189b      	adds	r3, r3, r2
   10b1a:	009b      	lsls	r3, r3, #2
   10b1c:	687a      	ldr	r2, [r7, #4]
   10b1e:	18d3      	adds	r3, r2, r3
   10b20:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   10b22:	68bb      	ldr	r3, [r7, #8]
   10b24:	691a      	ldr	r2, [r3, #16]
   10b26:	4b1c      	ldr	r3, [pc, #112]	; (10b98 <sw_timer_task+0xc4>)
   10b28:	681b      	ldr	r3, [r3, #0]
   10b2a:	1ad3      	subs	r3, r2, r3
   10b2c:	d52a      	bpl.n	10b84 <sw_timer_task+0xb0>
   10b2e:	68bb      	ldr	r3, [r7, #8]
   10b30:	781b      	ldrb	r3, [r3, #0]
   10b32:	2204      	movs	r2, #4
   10b34:	4013      	ands	r3, r2
   10b36:	b2db      	uxtb	r3, r3
   10b38:	2b00      	cmp	r3, #0
   10b3a:	d123      	bne.n	10b84 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   10b3c:	68bb      	ldr	r3, [r7, #8]
   10b3e:	781a      	ldrb	r2, [r3, #0]
   10b40:	2104      	movs	r1, #4
   10b42:	430a      	orrs	r2, r1
   10b44:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   10b46:	68bb      	ldr	r3, [r7, #8]
   10b48:	68db      	ldr	r3, [r3, #12]
   10b4a:	2b00      	cmp	r3, #0
   10b4c:	d007      	beq.n	10b5e <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   10b4e:	68bb      	ldr	r3, [r7, #8]
   10b50:	68da      	ldr	r2, [r3, #12]
   10b52:	4b11      	ldr	r3, [pc, #68]	; (10b98 <sw_timer_task+0xc4>)
   10b54:	681b      	ldr	r3, [r3, #0]
   10b56:	18d2      	adds	r2, r2, r3
   10b58:	68bb      	ldr	r3, [r7, #8]
   10b5a:	611a      	str	r2, [r3, #16]
   10b5c:	e004      	b.n	10b68 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   10b5e:	68bb      	ldr	r3, [r7, #8]
   10b60:	781a      	ldrb	r2, [r3, #0]
   10b62:	2102      	movs	r1, #2
   10b64:	438a      	bics	r2, r1
   10b66:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   10b68:	68bb      	ldr	r3, [r7, #8]
   10b6a:	685c      	ldr	r4, [r3, #4]
   10b6c:	68bb      	ldr	r3, [r7, #8]
   10b6e:	689a      	ldr	r2, [r3, #8]
   10b70:	68bb      	ldr	r3, [r7, #8]
   10b72:	68db      	ldr	r3, [r3, #12]
   10b74:	68f9      	ldr	r1, [r7, #12]
   10b76:	6878      	ldr	r0, [r7, #4]
   10b78:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   10b7a:	68bb      	ldr	r3, [r7, #8]
   10b7c:	781a      	ldrb	r2, [r3, #0]
   10b7e:	2104      	movs	r1, #4
   10b80:	438a      	bics	r2, r1
   10b82:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   10b84:	68fb      	ldr	r3, [r7, #12]
   10b86:	3301      	adds	r3, #1
   10b88:	60fb      	str	r3, [r7, #12]
   10b8a:	68fb      	ldr	r3, [r7, #12]
   10b8c:	2b00      	cmp	r3, #0
   10b8e:	dda8      	ble.n	10ae2 <sw_timer_task+0xe>
			}
		}
	}
}
   10b90:	46c0      	nop			; (mov r8, r8)
   10b92:	46bd      	mov	sp, r7
   10b94:	b005      	add	sp, #20
   10b96:	bd90      	pop	{r4, r7, pc}
   10b98:	2000023c 	.word	0x2000023c

00010b9c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   10b9c:	b580      	push	{r7, lr}
   10b9e:	b082      	sub	sp, #8
   10ba0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   10ba2:	4b10      	ldr	r3, [pc, #64]	; (10be4 <cpu_irq_enter_critical+0x48>)
   10ba4:	681b      	ldr	r3, [r3, #0]
   10ba6:	2b00      	cmp	r3, #0
   10ba8:	d112      	bne.n	10bd0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10baa:	f3ef 8310 	mrs	r3, PRIMASK
   10bae:	607b      	str	r3, [r7, #4]
  return(result);
   10bb0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   10bb2:	2b00      	cmp	r3, #0
   10bb4:	d109      	bne.n	10bca <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   10bb6:	b672      	cpsid	i
   10bb8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   10bbc:	4b0a      	ldr	r3, [pc, #40]	; (10be8 <cpu_irq_enter_critical+0x4c>)
   10bbe:	2200      	movs	r2, #0
   10bc0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   10bc2:	4b0a      	ldr	r3, [pc, #40]	; (10bec <cpu_irq_enter_critical+0x50>)
   10bc4:	2201      	movs	r2, #1
   10bc6:	701a      	strb	r2, [r3, #0]
   10bc8:	e002      	b.n	10bd0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   10bca:	4b08      	ldr	r3, [pc, #32]	; (10bec <cpu_irq_enter_critical+0x50>)
   10bcc:	2200      	movs	r2, #0
   10bce:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   10bd0:	4b04      	ldr	r3, [pc, #16]	; (10be4 <cpu_irq_enter_critical+0x48>)
   10bd2:	681b      	ldr	r3, [r3, #0]
   10bd4:	1c5a      	adds	r2, r3, #1
   10bd6:	4b03      	ldr	r3, [pc, #12]	; (10be4 <cpu_irq_enter_critical+0x48>)
   10bd8:	601a      	str	r2, [r3, #0]
}
   10bda:	46c0      	nop			; (mov r8, r8)
   10bdc:	46bd      	mov	sp, r7
   10bde:	b002      	add	sp, #8
   10be0:	bd80      	pop	{r7, pc}
   10be2:	46c0      	nop			; (mov r8, r8)
   10be4:	20000240 	.word	0x20000240
   10be8:	2000000c 	.word	0x2000000c
   10bec:	20000244 	.word	0x20000244

00010bf0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   10bf0:	b580      	push	{r7, lr}
   10bf2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   10bf4:	4b0b      	ldr	r3, [pc, #44]	; (10c24 <cpu_irq_leave_critical+0x34>)
   10bf6:	681b      	ldr	r3, [r3, #0]
   10bf8:	1e5a      	subs	r2, r3, #1
   10bfa:	4b0a      	ldr	r3, [pc, #40]	; (10c24 <cpu_irq_leave_critical+0x34>)
   10bfc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   10bfe:	4b09      	ldr	r3, [pc, #36]	; (10c24 <cpu_irq_leave_critical+0x34>)
   10c00:	681b      	ldr	r3, [r3, #0]
   10c02:	2b00      	cmp	r3, #0
   10c04:	d10a      	bne.n	10c1c <cpu_irq_leave_critical+0x2c>
   10c06:	4b08      	ldr	r3, [pc, #32]	; (10c28 <cpu_irq_leave_critical+0x38>)
   10c08:	781b      	ldrb	r3, [r3, #0]
   10c0a:	b2db      	uxtb	r3, r3
   10c0c:	2b00      	cmp	r3, #0
   10c0e:	d005      	beq.n	10c1c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   10c10:	4b06      	ldr	r3, [pc, #24]	; (10c2c <cpu_irq_leave_critical+0x3c>)
   10c12:	2201      	movs	r2, #1
   10c14:	701a      	strb	r2, [r3, #0]
   10c16:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   10c1a:	b662      	cpsie	i
	}
}
   10c1c:	46c0      	nop			; (mov r8, r8)
   10c1e:	46bd      	mov	sp, r7
   10c20:	bd80      	pop	{r7, pc}
   10c22:	46c0      	nop			; (mov r8, r8)
   10c24:	20000240 	.word	0x20000240
   10c28:	20000244 	.word	0x20000244
   10c2c:	2000000c 	.word	0x2000000c

00010c30 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   10c30:	b580      	push	{r7, lr}
   10c32:	b082      	sub	sp, #8
   10c34:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   10c36:	4b2f      	ldr	r3, [pc, #188]	; (10cf4 <Reset_Handler+0xc4>)
   10c38:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   10c3a:	4b2f      	ldr	r3, [pc, #188]	; (10cf8 <Reset_Handler+0xc8>)
   10c3c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   10c3e:	687a      	ldr	r2, [r7, #4]
   10c40:	683b      	ldr	r3, [r7, #0]
   10c42:	429a      	cmp	r2, r3
   10c44:	d00c      	beq.n	10c60 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   10c46:	e007      	b.n	10c58 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   10c48:	683b      	ldr	r3, [r7, #0]
   10c4a:	1d1a      	adds	r2, r3, #4
   10c4c:	603a      	str	r2, [r7, #0]
   10c4e:	687a      	ldr	r2, [r7, #4]
   10c50:	1d11      	adds	r1, r2, #4
   10c52:	6079      	str	r1, [r7, #4]
   10c54:	6812      	ldr	r2, [r2, #0]
   10c56:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   10c58:	683a      	ldr	r2, [r7, #0]
   10c5a:	4b28      	ldr	r3, [pc, #160]	; (10cfc <Reset_Handler+0xcc>)
   10c5c:	429a      	cmp	r2, r3
   10c5e:	d3f3      	bcc.n	10c48 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   10c60:	4b27      	ldr	r3, [pc, #156]	; (10d00 <Reset_Handler+0xd0>)
   10c62:	603b      	str	r3, [r7, #0]
   10c64:	e004      	b.n	10c70 <Reset_Handler+0x40>
                *pDest++ = 0;
   10c66:	683b      	ldr	r3, [r7, #0]
   10c68:	1d1a      	adds	r2, r3, #4
   10c6a:	603a      	str	r2, [r7, #0]
   10c6c:	2200      	movs	r2, #0
   10c6e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   10c70:	683a      	ldr	r2, [r7, #0]
   10c72:	4b24      	ldr	r3, [pc, #144]	; (10d04 <Reset_Handler+0xd4>)
   10c74:	429a      	cmp	r2, r3
   10c76:	d3f6      	bcc.n	10c66 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   10c78:	4b23      	ldr	r3, [pc, #140]	; (10d08 <Reset_Handler+0xd8>)
   10c7a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   10c7c:	4b23      	ldr	r3, [pc, #140]	; (10d0c <Reset_Handler+0xdc>)
   10c7e:	687a      	ldr	r2, [r7, #4]
   10c80:	21ff      	movs	r1, #255	; 0xff
   10c82:	438a      	bics	r2, r1
   10c84:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   10c86:	4a22      	ldr	r2, [pc, #136]	; (10d10 <Reset_Handler+0xe0>)
   10c88:	2390      	movs	r3, #144	; 0x90
   10c8a:	005b      	lsls	r3, r3, #1
   10c8c:	2102      	movs	r1, #2
   10c8e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   10c90:	4a20      	ldr	r2, [pc, #128]	; (10d14 <Reset_Handler+0xe4>)
   10c92:	78d3      	ldrb	r3, [r2, #3]
   10c94:	2103      	movs	r1, #3
   10c96:	438b      	bics	r3, r1
   10c98:	1c19      	adds	r1, r3, #0
   10c9a:	2302      	movs	r3, #2
   10c9c:	430b      	orrs	r3, r1
   10c9e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   10ca0:	4a1c      	ldr	r2, [pc, #112]	; (10d14 <Reset_Handler+0xe4>)
   10ca2:	78d3      	ldrb	r3, [r2, #3]
   10ca4:	210c      	movs	r1, #12
   10ca6:	438b      	bics	r3, r1
   10ca8:	1c19      	adds	r1, r3, #0
   10caa:	2308      	movs	r3, #8
   10cac:	430b      	orrs	r3, r1
   10cae:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   10cb0:	4a19      	ldr	r2, [pc, #100]	; (10d18 <Reset_Handler+0xe8>)
   10cb2:	7b93      	ldrb	r3, [r2, #14]
   10cb4:	2130      	movs	r1, #48	; 0x30
   10cb6:	438b      	bics	r3, r1
   10cb8:	1c19      	adds	r1, r3, #0
   10cba:	2320      	movs	r3, #32
   10cbc:	430b      	orrs	r3, r1
   10cbe:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   10cc0:	4a15      	ldr	r2, [pc, #84]	; (10d18 <Reset_Handler+0xe8>)
   10cc2:	7b93      	ldrb	r3, [r2, #14]
   10cc4:	210c      	movs	r1, #12
   10cc6:	438b      	bics	r3, r1
   10cc8:	1c19      	adds	r1, r3, #0
   10cca:	2308      	movs	r3, #8
   10ccc:	430b      	orrs	r3, r1
   10cce:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   10cd0:	4a11      	ldr	r2, [pc, #68]	; (10d18 <Reset_Handler+0xe8>)
   10cd2:	7b93      	ldrb	r3, [r2, #14]
   10cd4:	2103      	movs	r1, #3
   10cd6:	438b      	bics	r3, r1
   10cd8:	1c19      	adds	r1, r3, #0
   10cda:	2302      	movs	r3, #2
   10cdc:	430b      	orrs	r3, r1
   10cde:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   10ce0:	4a0e      	ldr	r2, [pc, #56]	; (10d1c <Reset_Handler+0xec>)
   10ce2:	6853      	ldr	r3, [r2, #4]
   10ce4:	2180      	movs	r1, #128	; 0x80
   10ce6:	430b      	orrs	r3, r1
   10ce8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   10cea:	4b0d      	ldr	r3, [pc, #52]	; (10d20 <Reset_Handler+0xf0>)
   10cec:	4798      	blx	r3

        /* Branch to main function */
        main();
   10cee:	4b0d      	ldr	r3, [pc, #52]	; (10d24 <Reset_Handler+0xf4>)
   10cf0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   10cf2:	e7fe      	b.n	10cf2 <Reset_Handler+0xc2>
   10cf4:	00019e18 	.word	0x00019e18
   10cf8:	20000000 	.word	0x20000000
   10cfc:	200001ec 	.word	0x200001ec
   10d00:	200001ec 	.word	0x200001ec
   10d04:	20000e0c 	.word	0x20000e0c
   10d08:	00008000 	.word	0x00008000
   10d0c:	e000ed00 	.word	0xe000ed00
   10d10:	41007000 	.word	0x41007000
   10d14:	41005000 	.word	0x41005000
   10d18:	41004800 	.word	0x41004800
   10d1c:	41004000 	.word	0x41004000
   10d20:	00016b61 	.word	0x00016b61
   10d24:	00016689 	.word	0x00016689

00010d28 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   10d28:	b580      	push	{r7, lr}
   10d2a:	af00      	add	r7, sp, #0
        while (1) {
   10d2c:	e7fe      	b.n	10d2c <Dummy_Handler+0x4>
	...

00010d30 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   10d30:	b580      	push	{r7, lr}
   10d32:	b084      	sub	sp, #16
   10d34:	af00      	add	r7, sp, #0
   10d36:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   10d38:	4b0a      	ldr	r3, [pc, #40]	; (10d64 <_sbrk+0x34>)
   10d3a:	681b      	ldr	r3, [r3, #0]
   10d3c:	2b00      	cmp	r3, #0
   10d3e:	d102      	bne.n	10d46 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   10d40:	4b08      	ldr	r3, [pc, #32]	; (10d64 <_sbrk+0x34>)
   10d42:	4a09      	ldr	r2, [pc, #36]	; (10d68 <_sbrk+0x38>)
   10d44:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   10d46:	4b07      	ldr	r3, [pc, #28]	; (10d64 <_sbrk+0x34>)
   10d48:	681b      	ldr	r3, [r3, #0]
   10d4a:	60fb      	str	r3, [r7, #12]

	heap += incr;
   10d4c:	4b05      	ldr	r3, [pc, #20]	; (10d64 <_sbrk+0x34>)
   10d4e:	681a      	ldr	r2, [r3, #0]
   10d50:	687b      	ldr	r3, [r7, #4]
   10d52:	18d2      	adds	r2, r2, r3
   10d54:	4b03      	ldr	r3, [pc, #12]	; (10d64 <_sbrk+0x34>)
   10d56:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   10d58:	68fb      	ldr	r3, [r7, #12]
}
   10d5a:	0018      	movs	r0, r3
   10d5c:	46bd      	mov	sp, r7
   10d5e:	b004      	add	sp, #16
   10d60:	bd80      	pop	{r7, pc}
   10d62:	46c0      	nop			; (mov r8, r8)
   10d64:	20000248 	.word	0x20000248
   10d68:	20002e10 	.word	0x20002e10

00010d6c <_close>:
{
	return -1;
}

extern int _close(int file)
{
   10d6c:	b580      	push	{r7, lr}
   10d6e:	b082      	sub	sp, #8
   10d70:	af00      	add	r7, sp, #0
   10d72:	6078      	str	r0, [r7, #4]
	return -1;
   10d74:	2301      	movs	r3, #1
   10d76:	425b      	negs	r3, r3
}
   10d78:	0018      	movs	r0, r3
   10d7a:	46bd      	mov	sp, r7
   10d7c:	b002      	add	sp, #8
   10d7e:	bd80      	pop	{r7, pc}

00010d80 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   10d80:	b580      	push	{r7, lr}
   10d82:	b082      	sub	sp, #8
   10d84:	af00      	add	r7, sp, #0
   10d86:	6078      	str	r0, [r7, #4]
   10d88:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   10d8a:	683b      	ldr	r3, [r7, #0]
   10d8c:	2280      	movs	r2, #128	; 0x80
   10d8e:	0192      	lsls	r2, r2, #6
   10d90:	605a      	str	r2, [r3, #4]

	return 0;
   10d92:	2300      	movs	r3, #0
}
   10d94:	0018      	movs	r0, r3
   10d96:	46bd      	mov	sp, r7
   10d98:	b002      	add	sp, #8
   10d9a:	bd80      	pop	{r7, pc}

00010d9c <_isatty>:

extern int _isatty(int file)
{
   10d9c:	b580      	push	{r7, lr}
   10d9e:	b082      	sub	sp, #8
   10da0:	af00      	add	r7, sp, #0
   10da2:	6078      	str	r0, [r7, #4]
	return 1;
   10da4:	2301      	movs	r3, #1
}
   10da6:	0018      	movs	r0, r3
   10da8:	46bd      	mov	sp, r7
   10daa:	b002      	add	sp, #8
   10dac:	bd80      	pop	{r7, pc}

00010dae <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   10dae:	b580      	push	{r7, lr}
   10db0:	b084      	sub	sp, #16
   10db2:	af00      	add	r7, sp, #0
   10db4:	60f8      	str	r0, [r7, #12]
   10db6:	60b9      	str	r1, [r7, #8]
   10db8:	607a      	str	r2, [r7, #4]
	return 0;
   10dba:	2300      	movs	r3, #0
}
   10dbc:	0018      	movs	r0, r3
   10dbe:	46bd      	mov	sp, r7
   10dc0:	b004      	add	sp, #16
   10dc2:	bd80      	pop	{r7, pc}

00010dc4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   10dc4:	b580      	push	{r7, lr}
   10dc6:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   10dc8:	46c0      	nop			; (mov r8, r8)
   10dca:	46bd      	mov	sp, r7
   10dcc:	bd80      	pop	{r7, pc}
	...

00010dd0 <system_pinmux_get_group_from_gpio_pin>:
{
   10dd0:	b580      	push	{r7, lr}
   10dd2:	b084      	sub	sp, #16
   10dd4:	af00      	add	r7, sp, #0
   10dd6:	0002      	movs	r2, r0
   10dd8:	1dfb      	adds	r3, r7, #7
   10dda:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   10ddc:	230f      	movs	r3, #15
   10dde:	18fb      	adds	r3, r7, r3
   10de0:	1dfa      	adds	r2, r7, #7
   10de2:	7812      	ldrb	r2, [r2, #0]
   10de4:	09d2      	lsrs	r2, r2, #7
   10de6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   10de8:	230e      	movs	r3, #14
   10dea:	18fb      	adds	r3, r7, r3
   10dec:	1dfa      	adds	r2, r7, #7
   10dee:	7812      	ldrb	r2, [r2, #0]
   10df0:	0952      	lsrs	r2, r2, #5
   10df2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   10df4:	4b0d      	ldr	r3, [pc, #52]	; (10e2c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   10df6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   10df8:	230f      	movs	r3, #15
   10dfa:	18fb      	adds	r3, r7, r3
   10dfc:	781b      	ldrb	r3, [r3, #0]
   10dfe:	2b00      	cmp	r3, #0
   10e00:	d10f      	bne.n	10e22 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   10e02:	230f      	movs	r3, #15
   10e04:	18fb      	adds	r3, r7, r3
   10e06:	781b      	ldrb	r3, [r3, #0]
   10e08:	009b      	lsls	r3, r3, #2
   10e0a:	2210      	movs	r2, #16
   10e0c:	4694      	mov	ip, r2
   10e0e:	44bc      	add	ip, r7
   10e10:	4463      	add	r3, ip
   10e12:	3b08      	subs	r3, #8
   10e14:	681a      	ldr	r2, [r3, #0]
   10e16:	230e      	movs	r3, #14
   10e18:	18fb      	adds	r3, r7, r3
   10e1a:	781b      	ldrb	r3, [r3, #0]
   10e1c:	01db      	lsls	r3, r3, #7
   10e1e:	18d3      	adds	r3, r2, r3
   10e20:	e000      	b.n	10e24 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   10e22:	2300      	movs	r3, #0
}
   10e24:	0018      	movs	r0, r3
   10e26:	46bd      	mov	sp, r7
   10e28:	b004      	add	sp, #16
   10e2a:	bd80      	pop	{r7, pc}
   10e2c:	41004400 	.word	0x41004400

00010e30 <port_get_group_from_gpio_pin>:
{
   10e30:	b580      	push	{r7, lr}
   10e32:	b082      	sub	sp, #8
   10e34:	af00      	add	r7, sp, #0
   10e36:	0002      	movs	r2, r0
   10e38:	1dfb      	adds	r3, r7, #7
   10e3a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   10e3c:	1dfb      	adds	r3, r7, #7
   10e3e:	781b      	ldrb	r3, [r3, #0]
   10e40:	0018      	movs	r0, r3
   10e42:	4b03      	ldr	r3, [pc, #12]	; (10e50 <port_get_group_from_gpio_pin+0x20>)
   10e44:	4798      	blx	r3
   10e46:	0003      	movs	r3, r0
}
   10e48:	0018      	movs	r0, r3
   10e4a:	46bd      	mov	sp, r7
   10e4c:	b002      	add	sp, #8
   10e4e:	bd80      	pop	{r7, pc}
   10e50:	00010dd1 	.word	0x00010dd1

00010e54 <port_pin_set_output_level>:
{
   10e54:	b580      	push	{r7, lr}
   10e56:	b084      	sub	sp, #16
   10e58:	af00      	add	r7, sp, #0
   10e5a:	0002      	movs	r2, r0
   10e5c:	1dfb      	adds	r3, r7, #7
   10e5e:	701a      	strb	r2, [r3, #0]
   10e60:	1dbb      	adds	r3, r7, #6
   10e62:	1c0a      	adds	r2, r1, #0
   10e64:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   10e66:	1dfb      	adds	r3, r7, #7
   10e68:	781b      	ldrb	r3, [r3, #0]
   10e6a:	0018      	movs	r0, r3
   10e6c:	4b0d      	ldr	r3, [pc, #52]	; (10ea4 <port_pin_set_output_level+0x50>)
   10e6e:	4798      	blx	r3
   10e70:	0003      	movs	r3, r0
   10e72:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   10e74:	1dfb      	adds	r3, r7, #7
   10e76:	781b      	ldrb	r3, [r3, #0]
   10e78:	221f      	movs	r2, #31
   10e7a:	4013      	ands	r3, r2
   10e7c:	2201      	movs	r2, #1
   10e7e:	409a      	lsls	r2, r3
   10e80:	0013      	movs	r3, r2
   10e82:	60bb      	str	r3, [r7, #8]
	if (level) {
   10e84:	1dbb      	adds	r3, r7, #6
   10e86:	781b      	ldrb	r3, [r3, #0]
   10e88:	2b00      	cmp	r3, #0
   10e8a:	d003      	beq.n	10e94 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   10e8c:	68fb      	ldr	r3, [r7, #12]
   10e8e:	68ba      	ldr	r2, [r7, #8]
   10e90:	619a      	str	r2, [r3, #24]
}
   10e92:	e002      	b.n	10e9a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   10e94:	68fb      	ldr	r3, [r7, #12]
   10e96:	68ba      	ldr	r2, [r7, #8]
   10e98:	615a      	str	r2, [r3, #20]
}
   10e9a:	46c0      	nop			; (mov r8, r8)
   10e9c:	46bd      	mov	sp, r7
   10e9e:	b004      	add	sp, #16
   10ea0:	bd80      	pop	{r7, pc}
   10ea2:	46c0      	nop			; (mov r8, r8)
   10ea4:	00010e31 	.word	0x00010e31

00010ea8 <system_interrupt_enter_critical_section>:
{
   10ea8:	b580      	push	{r7, lr}
   10eaa:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   10eac:	4b02      	ldr	r3, [pc, #8]	; (10eb8 <system_interrupt_enter_critical_section+0x10>)
   10eae:	4798      	blx	r3
}
   10eb0:	46c0      	nop			; (mov r8, r8)
   10eb2:	46bd      	mov	sp, r7
   10eb4:	bd80      	pop	{r7, pc}
   10eb6:	46c0      	nop			; (mov r8, r8)
   10eb8:	00010b9d 	.word	0x00010b9d

00010ebc <system_interrupt_leave_critical_section>:
{
   10ebc:	b580      	push	{r7, lr}
   10ebe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   10ec0:	4b02      	ldr	r3, [pc, #8]	; (10ecc <system_interrupt_leave_critical_section+0x10>)
   10ec2:	4798      	blx	r3
}
   10ec4:	46c0      	nop			; (mov r8, r8)
   10ec6:	46bd      	mov	sp, r7
   10ec8:	bd80      	pop	{r7, pc}
   10eca:	46c0      	nop			; (mov r8, r8)
   10ecc:	00010bf1 	.word	0x00010bf1

00010ed0 <spi_lock>:
{
   10ed0:	b580      	push	{r7, lr}
   10ed2:	b084      	sub	sp, #16
   10ed4:	af00      	add	r7, sp, #0
   10ed6:	6078      	str	r0, [r7, #4]
	system_interrupt_enter_critical_section();
   10ed8:	4b0d      	ldr	r3, [pc, #52]	; (10f10 <spi_lock+0x40>)
   10eda:	4798      	blx	r3
	if (module->locked) {
   10edc:	687b      	ldr	r3, [r7, #4]
   10ede:	791b      	ldrb	r3, [r3, #4]
   10ee0:	b2db      	uxtb	r3, r3
   10ee2:	2b00      	cmp	r3, #0
   10ee4:	d004      	beq.n	10ef0 <spi_lock+0x20>
		status = STATUS_BUSY;
   10ee6:	230f      	movs	r3, #15
   10ee8:	18fb      	adds	r3, r7, r3
   10eea:	2205      	movs	r2, #5
   10eec:	701a      	strb	r2, [r3, #0]
   10eee:	e006      	b.n	10efe <spi_lock+0x2e>
		module->locked = true;
   10ef0:	687b      	ldr	r3, [r7, #4]
   10ef2:	2201      	movs	r2, #1
   10ef4:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
   10ef6:	230f      	movs	r3, #15
   10ef8:	18fb      	adds	r3, r7, r3
   10efa:	2200      	movs	r2, #0
   10efc:	701a      	strb	r2, [r3, #0]
	system_interrupt_leave_critical_section();
   10efe:	4b05      	ldr	r3, [pc, #20]	; (10f14 <spi_lock+0x44>)
   10f00:	4798      	blx	r3
	return status;
   10f02:	230f      	movs	r3, #15
   10f04:	18fb      	adds	r3, r7, r3
   10f06:	781b      	ldrb	r3, [r3, #0]
}
   10f08:	0018      	movs	r0, r3
   10f0a:	46bd      	mov	sp, r7
   10f0c:	b004      	add	sp, #16
   10f0e:	bd80      	pop	{r7, pc}
   10f10:	00010ea9 	.word	0x00010ea9
   10f14:	00010ebd 	.word	0x00010ebd

00010f18 <spi_unlock>:
{
   10f18:	b580      	push	{r7, lr}
   10f1a:	b082      	sub	sp, #8
   10f1c:	af00      	add	r7, sp, #0
   10f1e:	6078      	str	r0, [r7, #4]
	module->locked = false;
   10f20:	687b      	ldr	r3, [r7, #4]
   10f22:	2200      	movs	r2, #0
   10f24:	711a      	strb	r2, [r3, #4]
}
   10f26:	46c0      	nop			; (mov r8, r8)
   10f28:	46bd      	mov	sp, r7
   10f2a:	b002      	add	sp, #8
   10f2c:	bd80      	pop	{r7, pc}

00010f2e <spi_is_ready_to_write>:
{
   10f2e:	b580      	push	{r7, lr}
   10f30:	b084      	sub	sp, #16
   10f32:	af00      	add	r7, sp, #0
   10f34:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10f36:	687b      	ldr	r3, [r7, #4]
   10f38:	681b      	ldr	r3, [r3, #0]
   10f3a:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   10f3c:	68fb      	ldr	r3, [r7, #12]
   10f3e:	7e1b      	ldrb	r3, [r3, #24]
   10f40:	b2db      	uxtb	r3, r3
   10f42:	001a      	movs	r2, r3
   10f44:	2301      	movs	r3, #1
   10f46:	4013      	ands	r3, r2
   10f48:	1e5a      	subs	r2, r3, #1
   10f4a:	4193      	sbcs	r3, r2
   10f4c:	b2db      	uxtb	r3, r3
}
   10f4e:	0018      	movs	r0, r3
   10f50:	46bd      	mov	sp, r7
   10f52:	b004      	add	sp, #16
   10f54:	bd80      	pop	{r7, pc}

00010f56 <spi_is_ready_to_read>:
{
   10f56:	b580      	push	{r7, lr}
   10f58:	b084      	sub	sp, #16
   10f5a:	af00      	add	r7, sp, #0
   10f5c:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10f5e:	687b      	ldr	r3, [r7, #4]
   10f60:	681b      	ldr	r3, [r3, #0]
   10f62:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   10f64:	68fb      	ldr	r3, [r7, #12]
   10f66:	7e1b      	ldrb	r3, [r3, #24]
   10f68:	b2db      	uxtb	r3, r3
   10f6a:	001a      	movs	r2, r3
   10f6c:	2304      	movs	r3, #4
   10f6e:	4013      	ands	r3, r2
   10f70:	1e5a      	subs	r2, r3, #1
   10f72:	4193      	sbcs	r3, r2
   10f74:	b2db      	uxtb	r3, r3
}
   10f76:	0018      	movs	r0, r3
   10f78:	46bd      	mov	sp, r7
   10f7a:	b004      	add	sp, #16
   10f7c:	bd80      	pop	{r7, pc}
	...

00010f80 <spi_write>:
{
   10f80:	b580      	push	{r7, lr}
   10f82:	b084      	sub	sp, #16
   10f84:	af00      	add	r7, sp, #0
   10f86:	6078      	str	r0, [r7, #4]
   10f88:	000a      	movs	r2, r1
   10f8a:	1cbb      	adds	r3, r7, #2
   10f8c:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10f8e:	687b      	ldr	r3, [r7, #4]
   10f90:	681b      	ldr	r3, [r3, #0]
   10f92:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   10f94:	687b      	ldr	r3, [r7, #4]
   10f96:	0018      	movs	r0, r3
   10f98:	4b0a      	ldr	r3, [pc, #40]	; (10fc4 <spi_write+0x44>)
   10f9a:	4798      	blx	r3
   10f9c:	0003      	movs	r3, r0
   10f9e:	001a      	movs	r2, r3
   10fa0:	2301      	movs	r3, #1
   10fa2:	4053      	eors	r3, r2
   10fa4:	b2db      	uxtb	r3, r3
   10fa6:	2b00      	cmp	r3, #0
   10fa8:	d001      	beq.n	10fae <spi_write+0x2e>
		return STATUS_BUSY;
   10faa:	2305      	movs	r3, #5
   10fac:	e006      	b.n	10fbc <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   10fae:	1cbb      	adds	r3, r7, #2
   10fb0:	881b      	ldrh	r3, [r3, #0]
   10fb2:	05db      	lsls	r3, r3, #23
   10fb4:	0dda      	lsrs	r2, r3, #23
   10fb6:	68fb      	ldr	r3, [r7, #12]
   10fb8:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   10fba:	2300      	movs	r3, #0
}
   10fbc:	0018      	movs	r0, r3
   10fbe:	46bd      	mov	sp, r7
   10fc0:	b004      	add	sp, #16
   10fc2:	bd80      	pop	{r7, pc}
   10fc4:	00010f2f 	.word	0x00010f2f

00010fc8 <spi_read>:
{
   10fc8:	b580      	push	{r7, lr}
   10fca:	b084      	sub	sp, #16
   10fcc:	af00      	add	r7, sp, #0
   10fce:	6078      	str	r0, [r7, #4]
   10fd0:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   10fd2:	687b      	ldr	r3, [r7, #4]
   10fd4:	681b      	ldr	r3, [r3, #0]
   10fd6:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   10fd8:	687b      	ldr	r3, [r7, #4]
   10fda:	0018      	movs	r0, r3
   10fdc:	4b1b      	ldr	r3, [pc, #108]	; (1104c <spi_read+0x84>)
   10fde:	4798      	blx	r3
   10fe0:	0003      	movs	r3, r0
   10fe2:	001a      	movs	r2, r3
   10fe4:	2301      	movs	r3, #1
   10fe6:	4053      	eors	r3, r2
   10fe8:	b2db      	uxtb	r3, r3
   10fea:	2b00      	cmp	r3, #0
   10fec:	d001      	beq.n	10ff2 <spi_read+0x2a>
		return STATUS_ERR_IO;
   10fee:	2310      	movs	r3, #16
   10ff0:	e027      	b.n	11042 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   10ff2:	230f      	movs	r3, #15
   10ff4:	18fb      	adds	r3, r7, r3
   10ff6:	2200      	movs	r2, #0
   10ff8:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10ffa:	68bb      	ldr	r3, [r7, #8]
   10ffc:	8b5b      	ldrh	r3, [r3, #26]
   10ffe:	b29b      	uxth	r3, r3
   11000:	001a      	movs	r2, r3
   11002:	2304      	movs	r3, #4
   11004:	4013      	ands	r3, r2
   11006:	d006      	beq.n	11016 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   11008:	230f      	movs	r3, #15
   1100a:	18fb      	adds	r3, r7, r3
   1100c:	221e      	movs	r2, #30
   1100e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   11010:	68bb      	ldr	r3, [r7, #8]
   11012:	2204      	movs	r2, #4
   11014:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   11016:	687b      	ldr	r3, [r7, #4]
   11018:	799b      	ldrb	r3, [r3, #6]
   1101a:	2b01      	cmp	r3, #1
   1101c:	d108      	bne.n	11030 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1101e:	68bb      	ldr	r3, [r7, #8]
   11020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11022:	b29b      	uxth	r3, r3
   11024:	05db      	lsls	r3, r3, #23
   11026:	0ddb      	lsrs	r3, r3, #23
   11028:	b29a      	uxth	r2, r3
   1102a:	683b      	ldr	r3, [r7, #0]
   1102c:	801a      	strh	r2, [r3, #0]
   1102e:	e005      	b.n	1103c <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   11030:	68bb      	ldr	r3, [r7, #8]
   11032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11034:	b2db      	uxtb	r3, r3
   11036:	b29a      	uxth	r2, r3
   11038:	683b      	ldr	r3, [r7, #0]
   1103a:	801a      	strh	r2, [r3, #0]
	return retval;
   1103c:	230f      	movs	r3, #15
   1103e:	18fb      	adds	r3, r7, r3
   11040:	781b      	ldrb	r3, [r3, #0]
}
   11042:	0018      	movs	r0, r3
   11044:	46bd      	mov	sp, r7
   11046:	b004      	add	sp, #16
   11048:	bd80      	pop	{r7, pc}
   1104a:	46c0      	nop			; (mov r8, r8)
   1104c:	00010f57 	.word	0x00010f57

00011050 <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
   11050:	b580      	push	{r7, lr}
   11052:	b082      	sub	sp, #8
   11054:	af00      	add	r7, sp, #0
   11056:	0002      	movs	r2, r0
   11058:	1dfb      	adds	r3, r7, #7
   1105a:	701a      	strb	r2, [r3, #0]
	switch (type) {
   1105c:	1dfb      	adds	r3, r7, #7
   1105e:	781b      	ldrb	r3, [r3, #0]
   11060:	2b09      	cmp	r3, #9
   11062:	d818      	bhi.n	11096 <_at25dfx_get_device_id+0x46>
   11064:	009a      	lsls	r2, r3, #2
   11066:	4b0e      	ldr	r3, [pc, #56]	; (110a0 <_at25dfx_get_device_id+0x50>)
   11068:	18d3      	adds	r3, r2, r3
   1106a:	681b      	ldr	r3, [r3, #0]
   1106c:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
   1106e:	4b0d      	ldr	r3, [pc, #52]	; (110a4 <_at25dfx_get_device_id+0x54>)
   11070:	e012      	b.n	11098 <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
   11072:	4b0d      	ldr	r3, [pc, #52]	; (110a8 <_at25dfx_get_device_id+0x58>)
   11074:	e010      	b.n	11098 <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
   11076:	4b0d      	ldr	r3, [pc, #52]	; (110ac <_at25dfx_get_device_id+0x5c>)
   11078:	e00e      	b.n	11098 <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
   1107a:	4b0d      	ldr	r3, [pc, #52]	; (110b0 <_at25dfx_get_device_id+0x60>)
   1107c:	e00c      	b.n	11098 <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
   1107e:	4b0d      	ldr	r3, [pc, #52]	; (110b4 <_at25dfx_get_device_id+0x64>)
   11080:	e00a      	b.n	11098 <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
   11082:	4b0d      	ldr	r3, [pc, #52]	; (110b8 <_at25dfx_get_device_id+0x68>)
   11084:	e008      	b.n	11098 <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
   11086:	4b0d      	ldr	r3, [pc, #52]	; (110bc <_at25dfx_get_device_id+0x6c>)
   11088:	e006      	b.n	11098 <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
   1108a:	4b0d      	ldr	r3, [pc, #52]	; (110c0 <_at25dfx_get_device_id+0x70>)
   1108c:	e004      	b.n	11098 <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
   1108e:	4b0d      	ldr	r3, [pc, #52]	; (110c4 <_at25dfx_get_device_id+0x74>)
   11090:	e002      	b.n	11098 <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
   11092:	4b0d      	ldr	r3, [pc, #52]	; (110c8 <_at25dfx_get_device_id+0x78>)
   11094:	e000      	b.n	11098 <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
   11096:	2300      	movs	r3, #0
	}
}
   11098:	0018      	movs	r0, r3
   1109a:	46bd      	mov	sp, r7
   1109c:	b002      	add	sp, #8
   1109e:	bd80      	pop	{r7, pc}
   110a0:	0001958c 	.word	0x0001958c
   110a4:	0000651f 	.word	0x0000651f
   110a8:	0000431f 	.word	0x0000431f
   110ac:	0001441f 	.word	0x0001441f
   110b0:	0002451f 	.word	0x0002451f
   110b4:	0001451f 	.word	0x0001451f
   110b8:	0002461f 	.word	0x0002461f
   110bc:	0003461f 	.word	0x0003461f
   110c0:	0000861f 	.word	0x0000861f
   110c4:	0001471f 	.word	0x0001471f
   110c8:	0000481f 	.word	0x0000481f

000110cc <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
   110cc:	b580      	push	{r7, lr}
   110ce:	b082      	sub	sp, #8
   110d0:	af00      	add	r7, sp, #0
   110d2:	0002      	movs	r2, r0
   110d4:	1dfb      	adds	r3, r7, #7
   110d6:	701a      	strb	r2, [r3, #0]
	switch (type) {
   110d8:	1dfb      	adds	r3, r7, #7
   110da:	781b      	ldrb	r3, [r3, #0]
   110dc:	2b09      	cmp	r3, #9
   110de:	d819      	bhi.n	11114 <_at25dfx_get_device_size+0x48>
   110e0:	009a      	lsls	r2, r3, #2
   110e2:	4b0f      	ldr	r3, [pc, #60]	; (11120 <_at25dfx_get_device_size+0x54>)
   110e4:	18d3      	adds	r3, r2, r3
   110e6:	681b      	ldr	r3, [r3, #0]
   110e8:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
   110ea:	2380      	movs	r3, #128	; 0x80
   110ec:	025b      	lsls	r3, r3, #9
   110ee:	e012      	b.n	11116 <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
   110f0:	2380      	movs	r3, #128	; 0x80
   110f2:	02db      	lsls	r3, r3, #11
   110f4:	e00f      	b.n	11116 <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
   110f6:	2380      	movs	r3, #128	; 0x80
   110f8:	031b      	lsls	r3, r3, #12
   110fa:	e00c      	b.n	11116 <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
   110fc:	2380      	movs	r3, #128	; 0x80
   110fe:	035b      	lsls	r3, r3, #13
   11100:	e009      	b.n	11116 <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
   11102:	2380      	movs	r3, #128	; 0x80
   11104:	039b      	lsls	r3, r3, #14
   11106:	e006      	b.n	11116 <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
   11108:	2380      	movs	r3, #128	; 0x80
   1110a:	03db      	lsls	r3, r3, #15
   1110c:	e003      	b.n	11116 <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
   1110e:	2380      	movs	r3, #128	; 0x80
   11110:	041b      	lsls	r3, r3, #16
   11112:	e000      	b.n	11116 <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
   11114:	2300      	movs	r3, #0
	}
}
   11116:	0018      	movs	r0, r3
   11118:	46bd      	mov	sp, r7
   1111a:	b002      	add	sp, #8
   1111c:	bd80      	pop	{r7, pc}
   1111e:	46c0      	nop			; (mov r8, r8)
   11120:	000195b4 	.word	0x000195b4

00011124 <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
   11124:	b580      	push	{r7, lr}
   11126:	b082      	sub	sp, #8
   11128:	af00      	add	r7, sp, #0
   1112a:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
   1112c:	687b      	ldr	r3, [r7, #4]
   1112e:	795b      	ldrb	r3, [r3, #5]
   11130:	2100      	movs	r1, #0
   11132:	0018      	movs	r0, r3
   11134:	4b02      	ldr	r3, [pc, #8]	; (11140 <_at25dfx_chip_select+0x1c>)
   11136:	4798      	blx	r3
}
   11138:	46c0      	nop			; (mov r8, r8)
   1113a:	46bd      	mov	sp, r7
   1113c:	b002      	add	sp, #8
   1113e:	bd80      	pop	{r7, pc}
   11140:	00010e55 	.word	0x00010e55

00011144 <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
   11144:	b580      	push	{r7, lr}
   11146:	b082      	sub	sp, #8
   11148:	af00      	add	r7, sp, #0
   1114a:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
   1114c:	687b      	ldr	r3, [r7, #4]
   1114e:	795b      	ldrb	r3, [r3, #5]
   11150:	2101      	movs	r1, #1
   11152:	0018      	movs	r0, r3
   11154:	4b02      	ldr	r3, [pc, #8]	; (11160 <_at25dfx_chip_deselect+0x1c>)
   11156:	4798      	blx	r3
}
   11158:	46c0      	nop			; (mov r8, r8)
   1115a:	46bd      	mov	sp, r7
   1115c:	b002      	add	sp, #8
   1115e:	bd80      	pop	{r7, pc}
   11160:	00010e55 	.word	0x00010e55

00011164 <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
   11164:	b084      	sub	sp, #16
   11166:	b5b0      	push	{r4, r5, r7, lr}
   11168:	b084      	sub	sp, #16
   1116a:	af00      	add	r7, sp, #0
   1116c:	6078      	str	r0, [r7, #4]
   1116e:	2004      	movs	r0, #4
   11170:	2420      	movs	r4, #32
   11172:	46a4      	mov	ip, r4
   11174:	44bc      	add	ip, r7
   11176:	4460      	add	r0, ip
   11178:	6001      	str	r1, [r0, #0]
   1117a:	6042      	str	r2, [r0, #4]
   1117c:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
   1117e:	2304      	movs	r3, #4
   11180:	2220      	movs	r2, #32
   11182:	4694      	mov	ip, r2
   11184:	44bc      	add	ip, r7
   11186:	4463      	add	r3, ip
   11188:	781a      	ldrb	r2, [r3, #0]
   1118a:	2308      	movs	r3, #8
   1118c:	18fb      	adds	r3, r7, r3
   1118e:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
   11190:	2304      	movs	r3, #4
   11192:	2220      	movs	r2, #32
   11194:	4694      	mov	ip, r2
   11196:	44bc      	add	ip, r7
   11198:	4463      	add	r3, ip
   1119a:	785b      	ldrb	r3, [r3, #1]
   1119c:	2b01      	cmp	r3, #1
   1119e:	d91f      	bls.n	111e0 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
   111a0:	2304      	movs	r3, #4
   111a2:	2220      	movs	r2, #32
   111a4:	4694      	mov	ip, r2
   111a6:	44bc      	add	ip, r7
   111a8:	4463      	add	r3, ip
   111aa:	685b      	ldr	r3, [r3, #4]
   111ac:	b2da      	uxtb	r2, r3
   111ae:	2308      	movs	r3, #8
   111b0:	18fb      	adds	r3, r7, r3
   111b2:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
   111b4:	2304      	movs	r3, #4
   111b6:	2220      	movs	r2, #32
   111b8:	4694      	mov	ip, r2
   111ba:	44bc      	add	ip, r7
   111bc:	4463      	add	r3, ip
   111be:	685b      	ldr	r3, [r3, #4]
   111c0:	0a1b      	lsrs	r3, r3, #8
   111c2:	b2da      	uxtb	r2, r3
   111c4:	2308      	movs	r3, #8
   111c6:	18fb      	adds	r3, r7, r3
   111c8:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
   111ca:	2304      	movs	r3, #4
   111cc:	2220      	movs	r2, #32
   111ce:	4694      	mov	ip, r2
   111d0:	44bc      	add	ip, r7
   111d2:	4463      	add	r3, ip
   111d4:	685b      	ldr	r3, [r3, #4]
   111d6:	0c1b      	lsrs	r3, r3, #16
   111d8:	b2da      	uxtb	r2, r3
   111da:	2308      	movs	r3, #8
   111dc:	18fb      	adds	r3, r7, r3
   111de:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
   111e0:	687b      	ldr	r3, [r7, #4]
   111e2:	0018      	movs	r0, r3
   111e4:	4b1d      	ldr	r3, [pc, #116]	; (1125c <_at25dfx_chip_issue_read_command_wait+0xf8>)
   111e6:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
   111e8:	687b      	ldr	r3, [r7, #4]
   111ea:	6818      	ldr	r0, [r3, #0]
   111ec:	2304      	movs	r3, #4
   111ee:	2220      	movs	r2, #32
   111f0:	4694      	mov	ip, r2
   111f2:	44bc      	add	ip, r7
   111f4:	4463      	add	r3, ip
   111f6:	785b      	ldrb	r3, [r3, #1]
   111f8:	b29a      	uxth	r2, r3
   111fa:	230f      	movs	r3, #15
   111fc:	18fc      	adds	r4, r7, r3
   111fe:	2308      	movs	r3, #8
   11200:	18fb      	adds	r3, r7, r3
   11202:	0019      	movs	r1, r3
   11204:	4b16      	ldr	r3, [pc, #88]	; (11260 <_at25dfx_chip_issue_read_command_wait+0xfc>)
   11206:	4798      	blx	r3
   11208:	0003      	movs	r3, r0
   1120a:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
   1120c:	2304      	movs	r3, #4
   1120e:	2220      	movs	r2, #32
   11210:	4694      	mov	ip, r2
   11212:	44bc      	add	ip, r7
   11214:	4463      	add	r3, ip
   11216:	899b      	ldrh	r3, [r3, #12]
   11218:	2b00      	cmp	r3, #0
   1121a:	d014      	beq.n	11246 <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
   1121c:	687b      	ldr	r3, [r7, #4]
   1121e:	6818      	ldr	r0, [r3, #0]
   11220:	2304      	movs	r3, #4
   11222:	2220      	movs	r2, #32
   11224:	4694      	mov	ip, r2
   11226:	44bc      	add	ip, r7
   11228:	4463      	add	r3, ip
   1122a:	6899      	ldr	r1, [r3, #8]
   1122c:	2304      	movs	r3, #4
   1122e:	2220      	movs	r2, #32
   11230:	4694      	mov	ip, r2
   11232:	44bc      	add	ip, r7
   11234:	4463      	add	r3, ip
   11236:	899a      	ldrh	r2, [r3, #12]
   11238:	230f      	movs	r3, #15
   1123a:	18fc      	adds	r4, r7, r3
   1123c:	2300      	movs	r3, #0
   1123e:	4d09      	ldr	r5, [pc, #36]	; (11264 <_at25dfx_chip_issue_read_command_wait+0x100>)
   11240:	47a8      	blx	r5
   11242:	0003      	movs	r3, r0
   11244:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
   11246:	687b      	ldr	r3, [r7, #4]
   11248:	0018      	movs	r0, r3
   1124a:	4b07      	ldr	r3, [pc, #28]	; (11268 <_at25dfx_chip_issue_read_command_wait+0x104>)
   1124c:	4798      	blx	r3
}
   1124e:	46c0      	nop			; (mov r8, r8)
   11250:	46bd      	mov	sp, r7
   11252:	b004      	add	sp, #16
   11254:	bcb0      	pop	{r4, r5, r7}
   11256:	bc08      	pop	{r3}
   11258:	b004      	add	sp, #16
   1125a:	4718      	bx	r3
   1125c:	00011125 	.word	0x00011125
   11260:	0001316d 	.word	0x0001316d
   11264:	00012ec1 	.word	0x00012ec1
   11268:	00011145 	.word	0x00011145

0001126c <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
   1126c:	b084      	sub	sp, #16
   1126e:	b590      	push	{r4, r7, lr}
   11270:	b085      	sub	sp, #20
   11272:	af00      	add	r7, sp, #0
   11274:	6078      	str	r0, [r7, #4]
   11276:	2004      	movs	r0, #4
   11278:	2420      	movs	r4, #32
   1127a:	46a4      	mov	ip, r4
   1127c:	44bc      	add	ip, r7
   1127e:	4460      	add	r0, ip
   11280:	6001      	str	r1, [r0, #0]
   11282:	6042      	str	r2, [r0, #4]
   11284:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
   11286:	2304      	movs	r3, #4
   11288:	2220      	movs	r2, #32
   1128a:	4694      	mov	ip, r2
   1128c:	44bc      	add	ip, r7
   1128e:	4463      	add	r3, ip
   11290:	781a      	ldrb	r2, [r3, #0]
   11292:	2308      	movs	r3, #8
   11294:	18fb      	adds	r3, r7, r3
   11296:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
   11298:	2304      	movs	r3, #4
   1129a:	2220      	movs	r2, #32
   1129c:	4694      	mov	ip, r2
   1129e:	44bc      	add	ip, r7
   112a0:	4463      	add	r3, ip
   112a2:	785b      	ldrb	r3, [r3, #1]
   112a4:	2b01      	cmp	r3, #1
   112a6:	d91f      	bls.n	112e8 <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
   112a8:	2304      	movs	r3, #4
   112aa:	2220      	movs	r2, #32
   112ac:	4694      	mov	ip, r2
   112ae:	44bc      	add	ip, r7
   112b0:	4463      	add	r3, ip
   112b2:	685b      	ldr	r3, [r3, #4]
   112b4:	b2da      	uxtb	r2, r3
   112b6:	2308      	movs	r3, #8
   112b8:	18fb      	adds	r3, r7, r3
   112ba:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
   112bc:	2304      	movs	r3, #4
   112be:	2220      	movs	r2, #32
   112c0:	4694      	mov	ip, r2
   112c2:	44bc      	add	ip, r7
   112c4:	4463      	add	r3, ip
   112c6:	685b      	ldr	r3, [r3, #4]
   112c8:	0a1b      	lsrs	r3, r3, #8
   112ca:	b2da      	uxtb	r2, r3
   112cc:	2308      	movs	r3, #8
   112ce:	18fb      	adds	r3, r7, r3
   112d0:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
   112d2:	2304      	movs	r3, #4
   112d4:	2220      	movs	r2, #32
   112d6:	4694      	mov	ip, r2
   112d8:	44bc      	add	ip, r7
   112da:	4463      	add	r3, ip
   112dc:	685b      	ldr	r3, [r3, #4]
   112de:	0c1b      	lsrs	r3, r3, #16
   112e0:	b2da      	uxtb	r2, r3
   112e2:	2308      	movs	r3, #8
   112e4:	18fb      	adds	r3, r7, r3
   112e6:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
   112e8:	687b      	ldr	r3, [r7, #4]
   112ea:	0018      	movs	r0, r3
   112ec:	4b1d      	ldr	r3, [pc, #116]	; (11364 <_at25dfx_chip_issue_write_command_wait+0xf8>)
   112ee:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
   112f0:	687b      	ldr	r3, [r7, #4]
   112f2:	6818      	ldr	r0, [r3, #0]
   112f4:	2304      	movs	r3, #4
   112f6:	2220      	movs	r2, #32
   112f8:	4694      	mov	ip, r2
   112fa:	44bc      	add	ip, r7
   112fc:	4463      	add	r3, ip
   112fe:	785b      	ldrb	r3, [r3, #1]
   11300:	b29a      	uxth	r2, r3
   11302:	230f      	movs	r3, #15
   11304:	18fc      	adds	r4, r7, r3
   11306:	2308      	movs	r3, #8
   11308:	18fb      	adds	r3, r7, r3
   1130a:	0019      	movs	r1, r3
   1130c:	4b16      	ldr	r3, [pc, #88]	; (11368 <_at25dfx_chip_issue_write_command_wait+0xfc>)
   1130e:	4798      	blx	r3
   11310:	0003      	movs	r3, r0
   11312:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
   11314:	2304      	movs	r3, #4
   11316:	2220      	movs	r2, #32
   11318:	4694      	mov	ip, r2
   1131a:	44bc      	add	ip, r7
   1131c:	4463      	add	r3, ip
   1131e:	899b      	ldrh	r3, [r3, #12]
   11320:	2b00      	cmp	r3, #0
   11322:	d014      	beq.n	1134e <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
   11324:	687b      	ldr	r3, [r7, #4]
   11326:	6818      	ldr	r0, [r3, #0]
   11328:	2304      	movs	r3, #4
   1132a:	2220      	movs	r2, #32
   1132c:	4694      	mov	ip, r2
   1132e:	44bc      	add	ip, r7
   11330:	4463      	add	r3, ip
   11332:	6899      	ldr	r1, [r3, #8]
   11334:	2304      	movs	r3, #4
   11336:	2220      	movs	r2, #32
   11338:	4694      	mov	ip, r2
   1133a:	44bc      	add	ip, r7
   1133c:	4463      	add	r3, ip
   1133e:	899b      	ldrh	r3, [r3, #12]
   11340:	220f      	movs	r2, #15
   11342:	18bc      	adds	r4, r7, r2
   11344:	001a      	movs	r2, r3
   11346:	4b08      	ldr	r3, [pc, #32]	; (11368 <_at25dfx_chip_issue_write_command_wait+0xfc>)
   11348:	4798      	blx	r3
   1134a:	0003      	movs	r3, r0
   1134c:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
   1134e:	687b      	ldr	r3, [r7, #4]
   11350:	0018      	movs	r0, r3
   11352:	4b06      	ldr	r3, [pc, #24]	; (1136c <_at25dfx_chip_issue_write_command_wait+0x100>)
   11354:	4798      	blx	r3
}
   11356:	46c0      	nop			; (mov r8, r8)
   11358:	46bd      	mov	sp, r7
   1135a:	b005      	add	sp, #20
   1135c:	bc90      	pop	{r4, r7}
   1135e:	bc08      	pop	{r3}
   11360:	b004      	add	sp, #16
   11362:	4718      	bx	r3
   11364:	00011125 	.word	0x00011125
   11368:	0001316d 	.word	0x0001316d
   1136c:	00011145 	.word	0x00011145

00011370 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
   11370:	b590      	push	{r4, r7, lr}
   11372:	b085      	sub	sp, #20
   11374:	af00      	add	r7, sp, #0
   11376:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
   11378:	230c      	movs	r3, #12
   1137a:	18fb      	adds	r3, r7, r3
   1137c:	2200      	movs	r2, #0
   1137e:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
   11380:	46c0      	nop			; (mov r8, r8)
   11382:	687b      	ldr	r3, [r7, #4]
   11384:	681b      	ldr	r3, [r3, #0]
   11386:	0018      	movs	r0, r3
   11388:	4b3c      	ldr	r3, [pc, #240]	; (1147c <_at25dfx_chip_get_nonbusy_status+0x10c>)
   1138a:	4798      	blx	r3
   1138c:	0003      	movs	r3, r0
   1138e:	001a      	movs	r2, r3
   11390:	2301      	movs	r3, #1
   11392:	4053      	eors	r3, r2
   11394:	b2db      	uxtb	r3, r3
   11396:	2b00      	cmp	r3, #0
   11398:	d1f3      	bne.n	11382 <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
   1139a:	687b      	ldr	r3, [r7, #4]
   1139c:	0018      	movs	r0, r3
   1139e:	4b38      	ldr	r3, [pc, #224]	; (11480 <_at25dfx_chip_get_nonbusy_status+0x110>)
   113a0:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
   113a2:	687b      	ldr	r3, [r7, #4]
   113a4:	681b      	ldr	r3, [r3, #0]
   113a6:	220f      	movs	r2, #15
   113a8:	18bc      	adds	r4, r7, r2
   113aa:	2105      	movs	r1, #5
   113ac:	0018      	movs	r0, r3
   113ae:	4b35      	ldr	r3, [pc, #212]	; (11484 <_at25dfx_chip_get_nonbusy_status+0x114>)
   113b0:	4798      	blx	r3
   113b2:	0003      	movs	r3, r0
   113b4:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
   113b6:	46c0      	nop			; (mov r8, r8)
   113b8:	687b      	ldr	r3, [r7, #4]
   113ba:	681b      	ldr	r3, [r3, #0]
   113bc:	0018      	movs	r0, r3
   113be:	4b32      	ldr	r3, [pc, #200]	; (11488 <_at25dfx_chip_get_nonbusy_status+0x118>)
   113c0:	4798      	blx	r3
   113c2:	0003      	movs	r3, r0
   113c4:	001a      	movs	r2, r3
   113c6:	2301      	movs	r3, #1
   113c8:	4053      	eors	r3, r2
   113ca:	b2db      	uxtb	r3, r3
   113cc:	2b00      	cmp	r3, #0
   113ce:	d1f3      	bne.n	113b8 <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
   113d0:	687b      	ldr	r3, [r7, #4]
   113d2:	681b      	ldr	r3, [r3, #0]
   113d4:	220f      	movs	r2, #15
   113d6:	18bc      	adds	r4, r7, r2
   113d8:	220c      	movs	r2, #12
   113da:	18ba      	adds	r2, r7, r2
   113dc:	0011      	movs	r1, r2
   113de:	0018      	movs	r0, r3
   113e0:	4b2a      	ldr	r3, [pc, #168]	; (1148c <_at25dfx_chip_get_nonbusy_status+0x11c>)
   113e2:	4798      	blx	r3
   113e4:	0003      	movs	r3, r0
   113e6:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
   113e8:	46c0      	nop			; (mov r8, r8)
   113ea:	687b      	ldr	r3, [r7, #4]
   113ec:	681b      	ldr	r3, [r3, #0]
   113ee:	0018      	movs	r0, r3
   113f0:	4b22      	ldr	r3, [pc, #136]	; (1147c <_at25dfx_chip_get_nonbusy_status+0x10c>)
   113f2:	4798      	blx	r3
   113f4:	0003      	movs	r3, r0
   113f6:	001a      	movs	r2, r3
   113f8:	2301      	movs	r3, #1
   113fa:	4053      	eors	r3, r2
   113fc:	b2db      	uxtb	r3, r3
   113fe:	2b00      	cmp	r3, #0
   11400:	d1f3      	bne.n	113ea <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
   11402:	687b      	ldr	r3, [r7, #4]
   11404:	681b      	ldr	r3, [r3, #0]
   11406:	220f      	movs	r2, #15
   11408:	18bc      	adds	r4, r7, r2
   1140a:	2100      	movs	r1, #0
   1140c:	0018      	movs	r0, r3
   1140e:	4b1d      	ldr	r3, [pc, #116]	; (11484 <_at25dfx_chip_get_nonbusy_status+0x114>)
   11410:	4798      	blx	r3
   11412:	0003      	movs	r3, r0
   11414:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
   11416:	46c0      	nop			; (mov r8, r8)
   11418:	687b      	ldr	r3, [r7, #4]
   1141a:	681b      	ldr	r3, [r3, #0]
   1141c:	0018      	movs	r0, r3
   1141e:	4b1a      	ldr	r3, [pc, #104]	; (11488 <_at25dfx_chip_get_nonbusy_status+0x118>)
   11420:	4798      	blx	r3
   11422:	0003      	movs	r3, r0
   11424:	001a      	movs	r2, r3
   11426:	2301      	movs	r3, #1
   11428:	4053      	eors	r3, r2
   1142a:	b2db      	uxtb	r3, r3
   1142c:	2b00      	cmp	r3, #0
   1142e:	d1f3      	bne.n	11418 <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
   11430:	687b      	ldr	r3, [r7, #4]
   11432:	681b      	ldr	r3, [r3, #0]
   11434:	220f      	movs	r2, #15
   11436:	18bc      	adds	r4, r7, r2
   11438:	220c      	movs	r2, #12
   1143a:	18ba      	adds	r2, r7, r2
   1143c:	0011      	movs	r1, r2
   1143e:	0018      	movs	r0, r3
   11440:	4b12      	ldr	r3, [pc, #72]	; (1148c <_at25dfx_chip_get_nonbusy_status+0x11c>)
   11442:	4798      	blx	r3
   11444:	0003      	movs	r3, r0
   11446:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
   11448:	230c      	movs	r3, #12
   1144a:	18fb      	adds	r3, r7, r3
   1144c:	881b      	ldrh	r3, [r3, #0]
   1144e:	001a      	movs	r2, r3
   11450:	2301      	movs	r3, #1
   11452:	4013      	ands	r3, r2
   11454:	d1c8      	bne.n	113e8 <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
   11456:	687b      	ldr	r3, [r7, #4]
   11458:	0018      	movs	r0, r3
   1145a:	4b0d      	ldr	r3, [pc, #52]	; (11490 <_at25dfx_chip_get_nonbusy_status+0x120>)
   1145c:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
   1145e:	230c      	movs	r3, #12
   11460:	18fb      	adds	r3, r7, r3
   11462:	881b      	ldrh	r3, [r3, #0]
   11464:	001a      	movs	r2, r3
   11466:	2320      	movs	r3, #32
   11468:	4013      	ands	r3, r2
   1146a:	d001      	beq.n	11470 <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
   1146c:	2310      	movs	r3, #16
   1146e:	e000      	b.n	11472 <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
   11470:	2300      	movs	r3, #0
}
   11472:	0018      	movs	r0, r3
   11474:	46bd      	mov	sp, r7
   11476:	b005      	add	sp, #20
   11478:	bd90      	pop	{r4, r7, pc}
   1147a:	46c0      	nop			; (mov r8, r8)
   1147c:	00010f2f 	.word	0x00010f2f
   11480:	00011125 	.word	0x00011125
   11484:	00010f81 	.word	0x00010f81
   11488:	00010f57 	.word	0x00010f57
   1148c:	00010fc9 	.word	0x00010fc9
   11490:	00011145 	.word	0x00011145

00011494 <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
   11494:	b590      	push	{r4, r7, lr}
   11496:	b089      	sub	sp, #36	; 0x24
   11498:	af02      	add	r7, sp, #8
   1149a:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
   1149c:	2308      	movs	r3, #8
   1149e:	18fb      	adds	r3, r7, r3
   114a0:	2206      	movs	r2, #6
   114a2:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   114a4:	2308      	movs	r3, #8
   114a6:	18fb      	adds	r3, r7, r3
   114a8:	2201      	movs	r2, #1
   114aa:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
   114ac:	2308      	movs	r3, #8
   114ae:	18fb      	adds	r3, r7, r3
   114b0:	2200      	movs	r2, #0
   114b2:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   114b4:	2308      	movs	r3, #8
   114b6:	18fb      	adds	r3, r7, r3
   114b8:	2200      	movs	r2, #0
   114ba:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
   114bc:	2308      	movs	r3, #8
   114be:	18fb      	adds	r3, r7, r3
   114c0:	2200      	movs	r2, #0
   114c2:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   114c4:	2308      	movs	r3, #8
   114c6:	18fb      	adds	r3, r7, r3
   114c8:	6878      	ldr	r0, [r7, #4]
   114ca:	466a      	mov	r2, sp
   114cc:	68d9      	ldr	r1, [r3, #12]
   114ce:	6011      	str	r1, [r2, #0]
   114d0:	6819      	ldr	r1, [r3, #0]
   114d2:	685a      	ldr	r2, [r3, #4]
   114d4:	689b      	ldr	r3, [r3, #8]
   114d6:	4c03      	ldr	r4, [pc, #12]	; (114e4 <_at25dfx_chip_enable_write+0x50>)
   114d8:	47a0      	blx	r4
}
   114da:	46c0      	nop			; (mov r8, r8)
   114dc:	46bd      	mov	sp, r7
   114de:	b007      	add	sp, #28
   114e0:	bd90      	pop	{r4, r7, pc}
   114e2:	46c0      	nop			; (mov r8, r8)
   114e4:	0001126d 	.word	0x0001126d

000114e8 <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
   114e8:	b590      	push	{r4, r7, lr}
   114ea:	b08b      	sub	sp, #44	; 0x2c
   114ec:	af02      	add	r7, sp, #8
   114ee:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
   114f0:	2300      	movs	r3, #0
   114f2:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
   114f4:	687b      	ldr	r3, [r7, #4]
   114f6:	681b      	ldr	r3, [r3, #0]
   114f8:	221f      	movs	r2, #31
   114fa:	18bc      	adds	r4, r7, r2
   114fc:	0018      	movs	r0, r3
   114fe:	4b21      	ldr	r3, [pc, #132]	; (11584 <at25dfx_chip_check_presence+0x9c>)
   11500:	4798      	blx	r3
   11502:	0003      	movs	r3, r0
   11504:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   11506:	231f      	movs	r3, #31
   11508:	18fb      	adds	r3, r7, r3
   1150a:	781b      	ldrb	r3, [r3, #0]
   1150c:	2b05      	cmp	r3, #5
   1150e:	d103      	bne.n	11518 <at25dfx_chip_check_presence+0x30>
		return status;
   11510:	231f      	movs	r3, #31
   11512:	18fb      	adds	r3, r7, r3
   11514:	781b      	ldrb	r3, [r3, #0]
   11516:	e030      	b.n	1157a <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
   11518:	230c      	movs	r3, #12
   1151a:	18fb      	adds	r3, r7, r3
   1151c:	229f      	movs	r2, #159	; 0x9f
   1151e:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   11520:	230c      	movs	r3, #12
   11522:	18fb      	adds	r3, r7, r3
   11524:	2201      	movs	r2, #1
   11526:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
   11528:	230c      	movs	r3, #12
   1152a:	18fb      	adds	r3, r7, r3
   1152c:	2208      	movs	r2, #8
   1152e:	18ba      	adds	r2, r7, r2
   11530:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
   11532:	230c      	movs	r3, #12
   11534:	18fb      	adds	r3, r7, r3
   11536:	2203      	movs	r2, #3
   11538:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   1153a:	230c      	movs	r3, #12
   1153c:	18fb      	adds	r3, r7, r3
   1153e:	2200      	movs	r2, #0
   11540:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
   11542:	230c      	movs	r3, #12
   11544:	18fb      	adds	r3, r7, r3
   11546:	6878      	ldr	r0, [r7, #4]
   11548:	466a      	mov	r2, sp
   1154a:	68d9      	ldr	r1, [r3, #12]
   1154c:	6011      	str	r1, [r2, #0]
   1154e:	6819      	ldr	r1, [r3, #0]
   11550:	685a      	ldr	r2, [r3, #4]
   11552:	689b      	ldr	r3, [r3, #8]
   11554:	4c0c      	ldr	r4, [pc, #48]	; (11588 <at25dfx_chip_check_presence+0xa0>)
   11556:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   11558:	687b      	ldr	r3, [r7, #4]
   1155a:	681b      	ldr	r3, [r3, #0]
   1155c:	0018      	movs	r0, r3
   1155e:	4b0b      	ldr	r3, [pc, #44]	; (1158c <at25dfx_chip_check_presence+0xa4>)
   11560:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
   11562:	687b      	ldr	r3, [r7, #4]
   11564:	791b      	ldrb	r3, [r3, #4]
   11566:	0018      	movs	r0, r3
   11568:	4b09      	ldr	r3, [pc, #36]	; (11590 <at25dfx_chip_check_presence+0xa8>)
   1156a:	4798      	blx	r3
   1156c:	0002      	movs	r2, r0
   1156e:	68bb      	ldr	r3, [r7, #8]
   11570:	429a      	cmp	r2, r3
   11572:	d101      	bne.n	11578 <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
   11574:	2300      	movs	r3, #0
   11576:	e000      	b.n	1157a <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
   11578:	2314      	movs	r3, #20
	}
}
   1157a:	0018      	movs	r0, r3
   1157c:	46bd      	mov	sp, r7
   1157e:	b009      	add	sp, #36	; 0x24
   11580:	bd90      	pop	{r4, r7, pc}
   11582:	46c0      	nop			; (mov r8, r8)
   11584:	00010ed1 	.word	0x00010ed1
   11588:	00011165 	.word	0x00011165
   1158c:	00010f19 	.word	0x00010f19
   11590:	00011051 	.word	0x00011051

00011594 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
   11594:	b590      	push	{r4, r7, lr}
   11596:	b08d      	sub	sp, #52	; 0x34
   11598:	af02      	add	r7, sp, #8
   1159a:	60f8      	str	r0, [r7, #12]
   1159c:	60b9      	str	r1, [r7, #8]
   1159e:	607a      	str	r2, [r7, #4]
   115a0:	001a      	movs	r2, r3
   115a2:	1cbb      	adds	r3, r7, #2
   115a4:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
   115a6:	1cbb      	adds	r3, r7, #2
   115a8:	881a      	ldrh	r2, [r3, #0]
   115aa:	68bb      	ldr	r3, [r7, #8]
   115ac:	18d4      	adds	r4, r2, r3
   115ae:	68fb      	ldr	r3, [r7, #12]
   115b0:	791b      	ldrb	r3, [r3, #4]
   115b2:	0018      	movs	r0, r3
   115b4:	4b5b      	ldr	r3, [pc, #364]	; (11724 <at25dfx_chip_write_buffer+0x190>)
   115b6:	4798      	blx	r3
   115b8:	0003      	movs	r3, r0
   115ba:	429c      	cmp	r4, r3
   115bc:	d901      	bls.n	115c2 <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
   115be:	2317      	movs	r3, #23
   115c0:	e0ab      	b.n	1171a <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
   115c2:	68fb      	ldr	r3, [r7, #12]
   115c4:	681b      	ldr	r3, [r3, #0]
   115c6:	2227      	movs	r2, #39	; 0x27
   115c8:	18bc      	adds	r4, r7, r2
   115ca:	0018      	movs	r0, r3
   115cc:	4b56      	ldr	r3, [pc, #344]	; (11728 <at25dfx_chip_write_buffer+0x194>)
   115ce:	4798      	blx	r3
   115d0:	0003      	movs	r3, r0
   115d2:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   115d4:	2327      	movs	r3, #39	; 0x27
   115d6:	18fb      	adds	r3, r7, r3
   115d8:	781b      	ldrb	r3, [r3, #0]
   115da:	2b05      	cmp	r3, #5
   115dc:	d103      	bne.n	115e6 <at25dfx_chip_write_buffer+0x52>
		return status;
   115de:	2327      	movs	r3, #39	; 0x27
   115e0:	18fb      	adds	r3, r7, r3
   115e2:	781b      	ldrb	r3, [r3, #0]
   115e4:	e099      	b.n	1171a <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
   115e6:	68fb      	ldr	r3, [r7, #12]
   115e8:	0018      	movs	r0, r3
   115ea:	4b50      	ldr	r3, [pc, #320]	; (1172c <at25dfx_chip_write_buffer+0x198>)
   115ec:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
   115ee:	2314      	movs	r3, #20
   115f0:	18fb      	adds	r3, r7, r3
   115f2:	2202      	movs	r2, #2
   115f4:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
   115f6:	2314      	movs	r3, #20
   115f8:	18fb      	adds	r3, r7, r3
   115fa:	2204      	movs	r2, #4
   115fc:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
   115fe:	2314      	movs	r3, #20
   11600:	18fb      	adds	r3, r7, r3
   11602:	68ba      	ldr	r2, [r7, #8]
   11604:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
   11606:	2314      	movs	r3, #20
   11608:	18fb      	adds	r3, r7, r3
   1160a:	687a      	ldr	r2, [r7, #4]
   1160c:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
   1160e:	68bb      	ldr	r3, [r7, #8]
   11610:	b29b      	uxth	r3, r3
   11612:	22ff      	movs	r2, #255	; 0xff
   11614:	4013      	ands	r3, r2
   11616:	b29a      	uxth	r2, r3
   11618:	2324      	movs	r3, #36	; 0x24
   1161a:	18fb      	adds	r3, r7, r3
   1161c:	2180      	movs	r1, #128	; 0x80
   1161e:	0049      	lsls	r1, r1, #1
   11620:	1a8a      	subs	r2, r1, r2
   11622:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
   11624:	1cbb      	adds	r3, r7, #2
   11626:	2224      	movs	r2, #36	; 0x24
   11628:	18ba      	adds	r2, r7, r2
   1162a:	8810      	ldrh	r0, [r2, #0]
   1162c:	881b      	ldrh	r3, [r3, #0]
   1162e:	b299      	uxth	r1, r3
   11630:	b282      	uxth	r2, r0
   11632:	4291      	cmp	r1, r2
   11634:	d900      	bls.n	11638 <at25dfx_chip_write_buffer+0xa4>
   11636:	1c03      	adds	r3, r0, #0
   11638:	b29a      	uxth	r2, r3
   1163a:	2314      	movs	r3, #20
   1163c:	18fb      	adds	r3, r7, r3
   1163e:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   11640:	2314      	movs	r3, #20
   11642:	18fb      	adds	r3, r7, r3
   11644:	68f8      	ldr	r0, [r7, #12]
   11646:	466a      	mov	r2, sp
   11648:	68d9      	ldr	r1, [r3, #12]
   1164a:	6011      	str	r1, [r2, #0]
   1164c:	6819      	ldr	r1, [r3, #0]
   1164e:	685a      	ldr	r2, [r3, #4]
   11650:	689b      	ldr	r3, [r3, #8]
   11652:	4c37      	ldr	r4, [pc, #220]	; (11730 <at25dfx_chip_write_buffer+0x19c>)
   11654:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
   11656:	2327      	movs	r3, #39	; 0x27
   11658:	18fc      	adds	r4, r7, r3
   1165a:	68fb      	ldr	r3, [r7, #12]
   1165c:	0018      	movs	r0, r3
   1165e:	4b35      	ldr	r3, [pc, #212]	; (11734 <at25dfx_chip_write_buffer+0x1a0>)
   11660:	4798      	blx	r3
   11662:	0003      	movs	r3, r0
   11664:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
   11666:	2314      	movs	r3, #20
   11668:	18fb      	adds	r3, r7, r3
   1166a:	899a      	ldrh	r2, [r3, #12]
   1166c:	1cbb      	adds	r3, r7, #2
   1166e:	1cb9      	adds	r1, r7, #2
   11670:	8809      	ldrh	r1, [r1, #0]
   11672:	1a8a      	subs	r2, r1, r2
   11674:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
   11676:	e03f      	b.n	116f8 <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
   11678:	68fb      	ldr	r3, [r7, #12]
   1167a:	0018      	movs	r0, r3
   1167c:	4b2b      	ldr	r3, [pc, #172]	; (1172c <at25dfx_chip_write_buffer+0x198>)
   1167e:	4798      	blx	r3

		cmd.address += cmd.length;
   11680:	2314      	movs	r3, #20
   11682:	18fb      	adds	r3, r7, r3
   11684:	685b      	ldr	r3, [r3, #4]
   11686:	2214      	movs	r2, #20
   11688:	18ba      	adds	r2, r7, r2
   1168a:	8992      	ldrh	r2, [r2, #12]
   1168c:	189a      	adds	r2, r3, r2
   1168e:	2314      	movs	r3, #20
   11690:	18fb      	adds	r3, r7, r3
   11692:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
   11694:	2314      	movs	r3, #20
   11696:	18fb      	adds	r3, r7, r3
   11698:	689b      	ldr	r3, [r3, #8]
   1169a:	2214      	movs	r2, #20
   1169c:	18ba      	adds	r2, r7, r2
   1169e:	8992      	ldrh	r2, [r2, #12]
   116a0:	189a      	adds	r2, r3, r2
   116a2:	2314      	movs	r3, #20
   116a4:	18fb      	adds	r3, r7, r3
   116a6:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
   116a8:	1cbb      	adds	r3, r7, #2
   116aa:	881b      	ldrh	r3, [r3, #0]
   116ac:	b299      	uxth	r1, r3
   116ae:	2280      	movs	r2, #128	; 0x80
   116b0:	0052      	lsls	r2, r2, #1
   116b2:	4291      	cmp	r1, r2
   116b4:	d901      	bls.n	116ba <at25dfx_chip_write_buffer+0x126>
   116b6:	2380      	movs	r3, #128	; 0x80
   116b8:	005b      	lsls	r3, r3, #1
   116ba:	b29a      	uxth	r2, r3
   116bc:	2314      	movs	r3, #20
   116be:	18fb      	adds	r3, r7, r3
   116c0:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
   116c2:	2314      	movs	r3, #20
   116c4:	18fb      	adds	r3, r7, r3
   116c6:	68f8      	ldr	r0, [r7, #12]
   116c8:	466a      	mov	r2, sp
   116ca:	68d9      	ldr	r1, [r3, #12]
   116cc:	6011      	str	r1, [r2, #0]
   116ce:	6819      	ldr	r1, [r3, #0]
   116d0:	685a      	ldr	r2, [r3, #4]
   116d2:	689b      	ldr	r3, [r3, #8]
   116d4:	4c16      	ldr	r4, [pc, #88]	; (11730 <at25dfx_chip_write_buffer+0x19c>)
   116d6:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
   116d8:	2327      	movs	r3, #39	; 0x27
   116da:	18fc      	adds	r4, r7, r3
   116dc:	68fb      	ldr	r3, [r7, #12]
   116de:	0018      	movs	r0, r3
   116e0:	4b14      	ldr	r3, [pc, #80]	; (11734 <at25dfx_chip_write_buffer+0x1a0>)
   116e2:	4798      	blx	r3
   116e4:	0003      	movs	r3, r0
   116e6:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
   116e8:	2314      	movs	r3, #20
   116ea:	18fb      	adds	r3, r7, r3
   116ec:	899a      	ldrh	r2, [r3, #12]
   116ee:	1cbb      	adds	r3, r7, #2
   116f0:	1cb9      	adds	r1, r7, #2
   116f2:	8809      	ldrh	r1, [r1, #0]
   116f4:	1a8a      	subs	r2, r1, r2
   116f6:	801a      	strh	r2, [r3, #0]
	while (length && (status == STATUS_OK)) {
   116f8:	1cbb      	adds	r3, r7, #2
   116fa:	881b      	ldrh	r3, [r3, #0]
   116fc:	2b00      	cmp	r3, #0
   116fe:	d004      	beq.n	1170a <at25dfx_chip_write_buffer+0x176>
   11700:	2327      	movs	r3, #39	; 0x27
   11702:	18fb      	adds	r3, r7, r3
   11704:	781b      	ldrb	r3, [r3, #0]
   11706:	2b00      	cmp	r3, #0
   11708:	d0b6      	beq.n	11678 <at25dfx_chip_write_buffer+0xe4>
	}

	_at25dfx_spi_unlock(chip->spi);
   1170a:	68fb      	ldr	r3, [r7, #12]
   1170c:	681b      	ldr	r3, [r3, #0]
   1170e:	0018      	movs	r0, r3
   11710:	4b09      	ldr	r3, [pc, #36]	; (11738 <at25dfx_chip_write_buffer+0x1a4>)
   11712:	4798      	blx	r3

	return status;
   11714:	2327      	movs	r3, #39	; 0x27
   11716:	18fb      	adds	r3, r7, r3
   11718:	781b      	ldrb	r3, [r3, #0]
}
   1171a:	0018      	movs	r0, r3
   1171c:	46bd      	mov	sp, r7
   1171e:	b00b      	add	sp, #44	; 0x2c
   11720:	bd90      	pop	{r4, r7, pc}
   11722:	46c0      	nop			; (mov r8, r8)
   11724:	000110cd 	.word	0x000110cd
   11728:	00010ed1 	.word	0x00010ed1
   1172c:	00011495 	.word	0x00011495
   11730:	0001126d 	.word	0x0001126d
   11734:	00011371 	.word	0x00011371
   11738:	00010f19 	.word	0x00010f19

0001173c <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
   1173c:	b590      	push	{r4, r7, lr}
   1173e:	b08d      	sub	sp, #52	; 0x34
   11740:	af02      	add	r7, sp, #8
   11742:	60f8      	str	r0, [r7, #12]
   11744:	60b9      	str	r1, [r7, #8]
   11746:	1dfb      	adds	r3, r7, #7
   11748:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
   1174a:	68fb      	ldr	r3, [r7, #12]
   1174c:	791b      	ldrb	r3, [r3, #4]
   1174e:	0018      	movs	r0, r3
   11750:	4b33      	ldr	r3, [pc, #204]	; (11820 <at25dfx_chip_erase_block+0xe4>)
   11752:	4798      	blx	r3
   11754:	0002      	movs	r2, r0
   11756:	68bb      	ldr	r3, [r7, #8]
   11758:	429a      	cmp	r2, r3
   1175a:	d801      	bhi.n	11760 <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
   1175c:	2317      	movs	r3, #23
   1175e:	e05b      	b.n	11818 <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
   11760:	68fb      	ldr	r3, [r7, #12]
   11762:	681b      	ldr	r3, [r3, #0]
   11764:	2227      	movs	r2, #39	; 0x27
   11766:	18bc      	adds	r4, r7, r2
   11768:	0018      	movs	r0, r3
   1176a:	4b2e      	ldr	r3, [pc, #184]	; (11824 <at25dfx_chip_erase_block+0xe8>)
   1176c:	4798      	blx	r3
   1176e:	0003      	movs	r3, r0
   11770:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   11772:	2327      	movs	r3, #39	; 0x27
   11774:	18fb      	adds	r3, r7, r3
   11776:	781b      	ldrb	r3, [r3, #0]
   11778:	2b05      	cmp	r3, #5
   1177a:	d103      	bne.n	11784 <at25dfx_chip_erase_block+0x48>
		return status;
   1177c:	2327      	movs	r3, #39	; 0x27
   1177e:	18fb      	adds	r3, r7, r3
   11780:	781b      	ldrb	r3, [r3, #0]
   11782:	e049      	b.n	11818 <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
   11784:	68fb      	ldr	r3, [r7, #12]
   11786:	0018      	movs	r0, r3
   11788:	4b27      	ldr	r3, [pc, #156]	; (11828 <at25dfx_chip_erase_block+0xec>)
   1178a:	4798      	blx	r3

	switch (block_size) {
   1178c:	1dfb      	adds	r3, r7, #7
   1178e:	781b      	ldrb	r3, [r3, #0]
   11790:	2b01      	cmp	r3, #1
   11792:	d008      	beq.n	117a6 <at25dfx_chip_erase_block+0x6a>
   11794:	2b02      	cmp	r3, #2
   11796:	d00b      	beq.n	117b0 <at25dfx_chip_erase_block+0x74>
   11798:	2b00      	cmp	r3, #0
   1179a:	d10e      	bne.n	117ba <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
   1179c:	2314      	movs	r3, #20
   1179e:	18fb      	adds	r3, r7, r3
   117a0:	2220      	movs	r2, #32
   117a2:	701a      	strb	r2, [r3, #0]
		break;
   117a4:	e00d      	b.n	117c2 <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
   117a6:	2314      	movs	r3, #20
   117a8:	18fb      	adds	r3, r7, r3
   117aa:	2252      	movs	r2, #82	; 0x52
   117ac:	701a      	strb	r2, [r3, #0]
		break;
   117ae:	e008      	b.n	117c2 <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
   117b0:	2314      	movs	r3, #20
   117b2:	18fb      	adds	r3, r7, r3
   117b4:	22d8      	movs	r2, #216	; 0xd8
   117b6:	701a      	strb	r2, [r3, #0]
		break;
   117b8:	e003      	b.n	117c2 <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
   117ba:	2314      	movs	r3, #20
   117bc:	18fb      	adds	r3, r7, r3
   117be:	2200      	movs	r2, #0
   117c0:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
   117c2:	2314      	movs	r3, #20
   117c4:	18fb      	adds	r3, r7, r3
   117c6:	2204      	movs	r2, #4
   117c8:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
   117ca:	2314      	movs	r3, #20
   117cc:	18fb      	adds	r3, r7, r3
   117ce:	68ba      	ldr	r2, [r7, #8]
   117d0:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
   117d2:	2314      	movs	r3, #20
   117d4:	18fb      	adds	r3, r7, r3
   117d6:	2200      	movs	r2, #0
   117d8:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
   117da:	2314      	movs	r3, #20
   117dc:	18fb      	adds	r3, r7, r3
   117de:	2200      	movs	r2, #0
   117e0:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   117e2:	2314      	movs	r3, #20
   117e4:	18fb      	adds	r3, r7, r3
   117e6:	68f8      	ldr	r0, [r7, #12]
   117e8:	466a      	mov	r2, sp
   117ea:	68d9      	ldr	r1, [r3, #12]
   117ec:	6011      	str	r1, [r2, #0]
   117ee:	6819      	ldr	r1, [r3, #0]
   117f0:	685a      	ldr	r2, [r3, #4]
   117f2:	689b      	ldr	r3, [r3, #8]
   117f4:	4c0d      	ldr	r4, [pc, #52]	; (1182c <at25dfx_chip_erase_block+0xf0>)
   117f6:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
   117f8:	2327      	movs	r3, #39	; 0x27
   117fa:	18fc      	adds	r4, r7, r3
   117fc:	68fb      	ldr	r3, [r7, #12]
   117fe:	0018      	movs	r0, r3
   11800:	4b0b      	ldr	r3, [pc, #44]	; (11830 <at25dfx_chip_erase_block+0xf4>)
   11802:	4798      	blx	r3
   11804:	0003      	movs	r3, r0
   11806:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
   11808:	68fb      	ldr	r3, [r7, #12]
   1180a:	681b      	ldr	r3, [r3, #0]
   1180c:	0018      	movs	r0, r3
   1180e:	4b09      	ldr	r3, [pc, #36]	; (11834 <at25dfx_chip_erase_block+0xf8>)
   11810:	4798      	blx	r3

	return status;
   11812:	2327      	movs	r3, #39	; 0x27
   11814:	18fb      	adds	r3, r7, r3
   11816:	781b      	ldrb	r3, [r3, #0]
}
   11818:	0018      	movs	r0, r3
   1181a:	46bd      	mov	sp, r7
   1181c:	b00b      	add	sp, #44	; 0x2c
   1181e:	bd90      	pop	{r4, r7, pc}
   11820:	000110cd 	.word	0x000110cd
   11824:	00010ed1 	.word	0x00010ed1
   11828:	00011495 	.word	0x00011495
   1182c:	0001126d 	.word	0x0001126d
   11830:	00011371 	.word	0x00011371
   11834:	00010f19 	.word	0x00010f19

00011838 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
   11838:	b590      	push	{r4, r7, lr}
   1183a:	b08b      	sub	sp, #44	; 0x2c
   1183c:	af02      	add	r7, sp, #8
   1183e:	6078      	str	r0, [r7, #4]
   11840:	000a      	movs	r2, r1
   11842:	1cfb      	adds	r3, r7, #3
   11844:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
   11846:	687b      	ldr	r3, [r7, #4]
   11848:	681b      	ldr	r3, [r3, #0]
   1184a:	221f      	movs	r2, #31
   1184c:	18bc      	adds	r4, r7, r2
   1184e:	0018      	movs	r0, r3
   11850:	4b22      	ldr	r3, [pc, #136]	; (118dc <at25dfx_chip_set_global_sector_protect+0xa4>)
   11852:	4798      	blx	r3
   11854:	0003      	movs	r3, r0
   11856:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   11858:	231f      	movs	r3, #31
   1185a:	18fb      	adds	r3, r7, r3
   1185c:	781b      	ldrb	r3, [r3, #0]
   1185e:	2b05      	cmp	r3, #5
   11860:	d103      	bne.n	1186a <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
   11862:	231f      	movs	r3, #31
   11864:	18fb      	adds	r3, r7, r3
   11866:	781b      	ldrb	r3, [r3, #0]
   11868:	e033      	b.n	118d2 <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
   1186a:	687b      	ldr	r3, [r7, #4]
   1186c:	0018      	movs	r0, r3
   1186e:	4b1c      	ldr	r3, [pc, #112]	; (118e0 <at25dfx_chip_set_global_sector_protect+0xa8>)
   11870:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
   11872:	1cfb      	adds	r3, r7, #3
   11874:	781b      	ldrb	r3, [r3, #0]
   11876:	2b00      	cmp	r3, #0
   11878:	d001      	beq.n	1187e <at25dfx_chip_set_global_sector_protect+0x46>
   1187a:	223c      	movs	r2, #60	; 0x3c
   1187c:	e000      	b.n	11880 <at25dfx_chip_set_global_sector_protect+0x48>
   1187e:	2200      	movs	r2, #0
   11880:	230b      	movs	r3, #11
   11882:	18fb      	adds	r3, r7, r3
   11884:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
   11886:	230c      	movs	r3, #12
   11888:	18fb      	adds	r3, r7, r3
   1188a:	2201      	movs	r2, #1
   1188c:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   1188e:	230c      	movs	r3, #12
   11890:	18fb      	adds	r3, r7, r3
   11892:	2201      	movs	r2, #1
   11894:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
   11896:	230c      	movs	r3, #12
   11898:	18fb      	adds	r3, r7, r3
   1189a:	2201      	movs	r2, #1
   1189c:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
   1189e:	230c      	movs	r3, #12
   118a0:	18fb      	adds	r3, r7, r3
   118a2:	220b      	movs	r2, #11
   118a4:	18ba      	adds	r2, r7, r2
   118a6:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   118a8:	230c      	movs	r3, #12
   118aa:	18fb      	adds	r3, r7, r3
   118ac:	2200      	movs	r2, #0
   118ae:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   118b0:	230c      	movs	r3, #12
   118b2:	18fb      	adds	r3, r7, r3
   118b4:	6878      	ldr	r0, [r7, #4]
   118b6:	466a      	mov	r2, sp
   118b8:	68d9      	ldr	r1, [r3, #12]
   118ba:	6011      	str	r1, [r2, #0]
   118bc:	6819      	ldr	r1, [r3, #0]
   118be:	685a      	ldr	r2, [r3, #4]
   118c0:	689b      	ldr	r3, [r3, #8]
   118c2:	4c08      	ldr	r4, [pc, #32]	; (118e4 <at25dfx_chip_set_global_sector_protect+0xac>)
   118c4:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   118c6:	687b      	ldr	r3, [r7, #4]
   118c8:	681b      	ldr	r3, [r3, #0]
   118ca:	0018      	movs	r0, r3
   118cc:	4b06      	ldr	r3, [pc, #24]	; (118e8 <at25dfx_chip_set_global_sector_protect+0xb0>)
   118ce:	4798      	blx	r3

	return STATUS_OK;
   118d0:	2300      	movs	r3, #0
}
   118d2:	0018      	movs	r0, r3
   118d4:	46bd      	mov	sp, r7
   118d6:	b009      	add	sp, #36	; 0x24
   118d8:	bd90      	pop	{r4, r7, pc}
   118da:	46c0      	nop			; (mov r8, r8)
   118dc:	00010ed1 	.word	0x00010ed1
   118e0:	00011495 	.word	0x00011495
   118e4:	0001126d 	.word	0x0001126d
   118e8:	00010f19 	.word	0x00010f19

000118ec <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
   118ec:	b590      	push	{r4, r7, lr}
   118ee:	b08b      	sub	sp, #44	; 0x2c
   118f0:	af02      	add	r7, sp, #8
   118f2:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
   118f4:	687b      	ldr	r3, [r7, #4]
   118f6:	681b      	ldr	r3, [r3, #0]
   118f8:	221f      	movs	r2, #31
   118fa:	18bc      	adds	r4, r7, r2
   118fc:	0018      	movs	r0, r3
   118fe:	4b1b      	ldr	r3, [pc, #108]	; (1196c <at25dfx_chip_sleep+0x80>)
   11900:	4798      	blx	r3
   11902:	0003      	movs	r3, r0
   11904:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   11906:	231f      	movs	r3, #31
   11908:	18fb      	adds	r3, r7, r3
   1190a:	781b      	ldrb	r3, [r3, #0]
   1190c:	2b05      	cmp	r3, #5
   1190e:	d103      	bne.n	11918 <at25dfx_chip_sleep+0x2c>
		return status;
   11910:	231f      	movs	r3, #31
   11912:	18fb      	adds	r3, r7, r3
   11914:	781b      	ldrb	r3, [r3, #0]
   11916:	e024      	b.n	11962 <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
   11918:	230c      	movs	r3, #12
   1191a:	18fb      	adds	r3, r7, r3
   1191c:	22b9      	movs	r2, #185	; 0xb9
   1191e:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   11920:	230c      	movs	r3, #12
   11922:	18fb      	adds	r3, r7, r3
   11924:	2201      	movs	r2, #1
   11926:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
   11928:	230c      	movs	r3, #12
   1192a:	18fb      	adds	r3, r7, r3
   1192c:	2200      	movs	r2, #0
   1192e:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   11930:	230c      	movs	r3, #12
   11932:	18fb      	adds	r3, r7, r3
   11934:	2200      	movs	r2, #0
   11936:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
   11938:	230c      	movs	r3, #12
   1193a:	18fb      	adds	r3, r7, r3
   1193c:	2200      	movs	r2, #0
   1193e:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   11940:	230c      	movs	r3, #12
   11942:	18fb      	adds	r3, r7, r3
   11944:	6878      	ldr	r0, [r7, #4]
   11946:	466a      	mov	r2, sp
   11948:	68d9      	ldr	r1, [r3, #12]
   1194a:	6011      	str	r1, [r2, #0]
   1194c:	6819      	ldr	r1, [r3, #0]
   1194e:	685a      	ldr	r2, [r3, #4]
   11950:	689b      	ldr	r3, [r3, #8]
   11952:	4c07      	ldr	r4, [pc, #28]	; (11970 <at25dfx_chip_sleep+0x84>)
   11954:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   11956:	687b      	ldr	r3, [r7, #4]
   11958:	681b      	ldr	r3, [r3, #0]
   1195a:	0018      	movs	r0, r3
   1195c:	4b05      	ldr	r3, [pc, #20]	; (11974 <at25dfx_chip_sleep+0x88>)
   1195e:	4798      	blx	r3

	return STATUS_OK;
   11960:	2300      	movs	r3, #0
}
   11962:	0018      	movs	r0, r3
   11964:	46bd      	mov	sp, r7
   11966:	b009      	add	sp, #36	; 0x24
   11968:	bd90      	pop	{r4, r7, pc}
   1196a:	46c0      	nop			; (mov r8, r8)
   1196c:	00010ed1 	.word	0x00010ed1
   11970:	0001126d 	.word	0x0001126d
   11974:	00010f19 	.word	0x00010f19

00011978 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
   11978:	b590      	push	{r4, r7, lr}
   1197a:	b08b      	sub	sp, #44	; 0x2c
   1197c:	af02      	add	r7, sp, #8
   1197e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
   11980:	687b      	ldr	r3, [r7, #4]
   11982:	681b      	ldr	r3, [r3, #0]
   11984:	221f      	movs	r2, #31
   11986:	18bc      	adds	r4, r7, r2
   11988:	0018      	movs	r0, r3
   1198a:	4b1b      	ldr	r3, [pc, #108]	; (119f8 <at25dfx_chip_wake+0x80>)
   1198c:	4798      	blx	r3
   1198e:	0003      	movs	r3, r0
   11990:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   11992:	231f      	movs	r3, #31
   11994:	18fb      	adds	r3, r7, r3
   11996:	781b      	ldrb	r3, [r3, #0]
   11998:	2b05      	cmp	r3, #5
   1199a:	d103      	bne.n	119a4 <at25dfx_chip_wake+0x2c>
		return status;
   1199c:	231f      	movs	r3, #31
   1199e:	18fb      	adds	r3, r7, r3
   119a0:	781b      	ldrb	r3, [r3, #0]
   119a2:	e024      	b.n	119ee <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
   119a4:	230c      	movs	r3, #12
   119a6:	18fb      	adds	r3, r7, r3
   119a8:	22ab      	movs	r2, #171	; 0xab
   119aa:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   119ac:	230c      	movs	r3, #12
   119ae:	18fb      	adds	r3, r7, r3
   119b0:	2201      	movs	r2, #1
   119b2:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
   119b4:	230c      	movs	r3, #12
   119b6:	18fb      	adds	r3, r7, r3
   119b8:	2200      	movs	r2, #0
   119ba:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   119bc:	230c      	movs	r3, #12
   119be:	18fb      	adds	r3, r7, r3
   119c0:	2200      	movs	r2, #0
   119c2:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
   119c4:	230c      	movs	r3, #12
   119c6:	18fb      	adds	r3, r7, r3
   119c8:	2200      	movs	r2, #0
   119ca:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   119cc:	230c      	movs	r3, #12
   119ce:	18fb      	adds	r3, r7, r3
   119d0:	6878      	ldr	r0, [r7, #4]
   119d2:	466a      	mov	r2, sp
   119d4:	68d9      	ldr	r1, [r3, #12]
   119d6:	6011      	str	r1, [r2, #0]
   119d8:	6819      	ldr	r1, [r3, #0]
   119da:	685a      	ldr	r2, [r3, #4]
   119dc:	689b      	ldr	r3, [r3, #8]
   119de:	4c07      	ldr	r4, [pc, #28]	; (119fc <at25dfx_chip_wake+0x84>)
   119e0:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   119e2:	687b      	ldr	r3, [r7, #4]
   119e4:	681b      	ldr	r3, [r3, #0]
   119e6:	0018      	movs	r0, r3
   119e8:	4b05      	ldr	r3, [pc, #20]	; (11a00 <at25dfx_chip_wake+0x88>)
   119ea:	4798      	blx	r3

	return STATUS_OK;
   119ec:	2300      	movs	r3, #0
   119ee:	0018      	movs	r0, r3
   119f0:	46bd      	mov	sp, r7
   119f2:	b009      	add	sp, #36	; 0x24
   119f4:	bd90      	pop	{r4, r7, pc}
   119f6:	46c0      	nop			; (mov r8, r8)
   119f8:	00010ed1 	.word	0x00010ed1
   119fc:	0001126d 	.word	0x0001126d
   11a00:	00010f19 	.word	0x00010f19

00011a04 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   11a04:	b580      	push	{r7, lr}
   11a06:	b082      	sub	sp, #8
   11a08:	af00      	add	r7, sp, #0
   11a0a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   11a0c:	687b      	ldr	r3, [r7, #4]
   11a0e:	2b00      	cmp	r3, #0
   11a10:	d00c      	beq.n	11a2c <delay_cycles+0x28>
		SysTick->LOAD = n;
   11a12:	4b08      	ldr	r3, [pc, #32]	; (11a34 <delay_cycles+0x30>)
   11a14:	687a      	ldr	r2, [r7, #4]
   11a16:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   11a18:	4b06      	ldr	r3, [pc, #24]	; (11a34 <delay_cycles+0x30>)
   11a1a:	2200      	movs	r2, #0
   11a1c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   11a1e:	46c0      	nop			; (mov r8, r8)
   11a20:	4b04      	ldr	r3, [pc, #16]	; (11a34 <delay_cycles+0x30>)
   11a22:	681a      	ldr	r2, [r3, #0]
   11a24:	2380      	movs	r3, #128	; 0x80
   11a26:	025b      	lsls	r3, r3, #9
   11a28:	4013      	ands	r3, r2
   11a2a:	d0f9      	beq.n	11a20 <delay_cycles+0x1c>
		};
	}
}
   11a2c:	46c0      	nop			; (mov r8, r8)
   11a2e:	46bd      	mov	sp, r7
   11a30:	b002      	add	sp, #8
   11a32:	bd80      	pop	{r7, pc}
   11a34:	e000e010 	.word	0xe000e010

00011a38 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   11a38:	b580      	push	{r7, lr}
   11a3a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   11a3c:	2000      	movs	r0, #0
   11a3e:	4b0f      	ldr	r3, [pc, #60]	; (11a7c <delay_init+0x44>)
   11a40:	4798      	blx	r3
   11a42:	0002      	movs	r2, r0
   11a44:	4b0e      	ldr	r3, [pc, #56]	; (11a80 <delay_init+0x48>)
   11a46:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   11a48:	4b0d      	ldr	r3, [pc, #52]	; (11a80 <delay_init+0x48>)
   11a4a:	6818      	ldr	r0, [r3, #0]
   11a4c:	4b0d      	ldr	r3, [pc, #52]	; (11a84 <delay_init+0x4c>)
   11a4e:	22fa      	movs	r2, #250	; 0xfa
   11a50:	0091      	lsls	r1, r2, #2
   11a52:	4798      	blx	r3
   11a54:	0003      	movs	r3, r0
   11a56:	001a      	movs	r2, r3
   11a58:	4b09      	ldr	r3, [pc, #36]	; (11a80 <delay_init+0x48>)
   11a5a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   11a5c:	4b08      	ldr	r3, [pc, #32]	; (11a80 <delay_init+0x48>)
   11a5e:	6818      	ldr	r0, [r3, #0]
   11a60:	4b08      	ldr	r3, [pc, #32]	; (11a84 <delay_init+0x4c>)
   11a62:	22fa      	movs	r2, #250	; 0xfa
   11a64:	0091      	lsls	r1, r2, #2
   11a66:	4798      	blx	r3
   11a68:	0003      	movs	r3, r0
   11a6a:	001a      	movs	r2, r3
   11a6c:	4b06      	ldr	r3, [pc, #24]	; (11a88 <delay_init+0x50>)
   11a6e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   11a70:	4b06      	ldr	r3, [pc, #24]	; (11a8c <delay_init+0x54>)
   11a72:	2205      	movs	r2, #5
   11a74:	601a      	str	r2, [r3, #0]
}
   11a76:	46c0      	nop			; (mov r8, r8)
   11a78:	46bd      	mov	sp, r7
   11a7a:	bd80      	pop	{r7, pc}
   11a7c:	00014f7d 	.word	0x00014f7d
   11a80:	20000010 	.word	0x20000010
   11a84:	00016815 	.word	0x00016815
   11a88:	20000014 	.word	0x20000014
   11a8c:	e000e010 	.word	0xe000e010

00011a90 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   11a90:	b580      	push	{r7, lr}
   11a92:	b082      	sub	sp, #8
   11a94:	af00      	add	r7, sp, #0
   11a96:	6078      	str	r0, [r7, #4]
	while (n--) {
   11a98:	e004      	b.n	11aa4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   11a9a:	4b07      	ldr	r3, [pc, #28]	; (11ab8 <delay_cycles_ms+0x28>)
   11a9c:	681b      	ldr	r3, [r3, #0]
   11a9e:	0018      	movs	r0, r3
   11aa0:	4b06      	ldr	r3, [pc, #24]	; (11abc <delay_cycles_ms+0x2c>)
   11aa2:	4798      	blx	r3
	while (n--) {
   11aa4:	687b      	ldr	r3, [r7, #4]
   11aa6:	1e5a      	subs	r2, r3, #1
   11aa8:	607a      	str	r2, [r7, #4]
   11aaa:	2b00      	cmp	r3, #0
   11aac:	d1f5      	bne.n	11a9a <delay_cycles_ms+0xa>
	}
}
   11aae:	46c0      	nop			; (mov r8, r8)
   11ab0:	46bd      	mov	sp, r7
   11ab2:	b002      	add	sp, #8
   11ab4:	bd80      	pop	{r7, pc}
   11ab6:	46c0      	nop			; (mov r8, r8)
   11ab8:	20000010 	.word	0x20000010
   11abc:	00011a05 	.word	0x00011a05

00011ac0 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   11ac0:	b580      	push	{r7, lr}
   11ac2:	b082      	sub	sp, #8
   11ac4:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11ac6:	4b07      	ldr	r3, [pc, #28]	; (11ae4 <nvm_is_ready+0x24>)
   11ac8:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   11aca:	687b      	ldr	r3, [r7, #4]
   11acc:	7d1b      	ldrb	r3, [r3, #20]
   11ace:	b2db      	uxtb	r3, r3
   11ad0:	001a      	movs	r2, r3
   11ad2:	2301      	movs	r3, #1
   11ad4:	4013      	ands	r3, r2
   11ad6:	1e5a      	subs	r2, r3, #1
   11ad8:	4193      	sbcs	r3, r2
   11ada:	b2db      	uxtb	r3, r3
}
   11adc:	0018      	movs	r0, r3
   11ade:	46bd      	mov	sp, r7
   11ae0:	b002      	add	sp, #8
   11ae2:	bd80      	pop	{r7, pc}
   11ae4:	41004000 	.word	0x41004000

00011ae8 <system_apb_clock_set_mask>:
{
   11ae8:	b580      	push	{r7, lr}
   11aea:	b082      	sub	sp, #8
   11aec:	af00      	add	r7, sp, #0
   11aee:	0002      	movs	r2, r0
   11af0:	6039      	str	r1, [r7, #0]
   11af2:	1dfb      	adds	r3, r7, #7
   11af4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   11af6:	1dfb      	adds	r3, r7, #7
   11af8:	781b      	ldrb	r3, [r3, #0]
   11afa:	2b01      	cmp	r3, #1
   11afc:	d00a      	beq.n	11b14 <system_apb_clock_set_mask+0x2c>
   11afe:	2b02      	cmp	r3, #2
   11b00:	d00f      	beq.n	11b22 <system_apb_clock_set_mask+0x3a>
   11b02:	2b00      	cmp	r3, #0
   11b04:	d114      	bne.n	11b30 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   11b06:	4b0e      	ldr	r3, [pc, #56]	; (11b40 <system_apb_clock_set_mask+0x58>)
   11b08:	4a0d      	ldr	r2, [pc, #52]	; (11b40 <system_apb_clock_set_mask+0x58>)
   11b0a:	6991      	ldr	r1, [r2, #24]
   11b0c:	683a      	ldr	r2, [r7, #0]
   11b0e:	430a      	orrs	r2, r1
   11b10:	619a      	str	r2, [r3, #24]
			break;
   11b12:	e00f      	b.n	11b34 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   11b14:	4b0a      	ldr	r3, [pc, #40]	; (11b40 <system_apb_clock_set_mask+0x58>)
   11b16:	4a0a      	ldr	r2, [pc, #40]	; (11b40 <system_apb_clock_set_mask+0x58>)
   11b18:	69d1      	ldr	r1, [r2, #28]
   11b1a:	683a      	ldr	r2, [r7, #0]
   11b1c:	430a      	orrs	r2, r1
   11b1e:	61da      	str	r2, [r3, #28]
			break;
   11b20:	e008      	b.n	11b34 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   11b22:	4b07      	ldr	r3, [pc, #28]	; (11b40 <system_apb_clock_set_mask+0x58>)
   11b24:	4a06      	ldr	r2, [pc, #24]	; (11b40 <system_apb_clock_set_mask+0x58>)
   11b26:	6a11      	ldr	r1, [r2, #32]
   11b28:	683a      	ldr	r2, [r7, #0]
   11b2a:	430a      	orrs	r2, r1
   11b2c:	621a      	str	r2, [r3, #32]
			break;
   11b2e:	e001      	b.n	11b34 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   11b30:	2317      	movs	r3, #23
   11b32:	e000      	b.n	11b36 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   11b34:	2300      	movs	r3, #0
}
   11b36:	0018      	movs	r0, r3
   11b38:	46bd      	mov	sp, r7
   11b3a:	b002      	add	sp, #8
   11b3c:	bd80      	pop	{r7, pc}
   11b3e:	46c0      	nop			; (mov r8, r8)
   11b40:	40000400 	.word	0x40000400

00011b44 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   11b44:	b580      	push	{r7, lr}
   11b46:	b084      	sub	sp, #16
   11b48:	af00      	add	r7, sp, #0
   11b4a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11b4c:	4b2f      	ldr	r3, [pc, #188]	; (11c0c <nvm_set_config+0xc8>)
   11b4e:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   11b50:	2104      	movs	r1, #4
   11b52:	2001      	movs	r0, #1
   11b54:	4b2e      	ldr	r3, [pc, #184]	; (11c10 <nvm_set_config+0xcc>)
   11b56:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11b58:	68fb      	ldr	r3, [r7, #12]
   11b5a:	2220      	movs	r2, #32
   11b5c:	32ff      	adds	r2, #255	; 0xff
   11b5e:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11b60:	4b2c      	ldr	r3, [pc, #176]	; (11c14 <nvm_set_config+0xd0>)
   11b62:	4798      	blx	r3
   11b64:	0003      	movs	r3, r0
   11b66:	001a      	movs	r2, r3
   11b68:	2301      	movs	r3, #1
   11b6a:	4053      	eors	r3, r2
   11b6c:	b2db      	uxtb	r3, r3
   11b6e:	2b00      	cmp	r3, #0
   11b70:	d001      	beq.n	11b76 <nvm_set_config+0x32>
		return STATUS_BUSY;
   11b72:	2305      	movs	r3, #5
   11b74:	e045      	b.n	11c02 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   11b76:	687b      	ldr	r3, [r7, #4]
   11b78:	781b      	ldrb	r3, [r3, #0]
   11b7a:	021b      	lsls	r3, r3, #8
   11b7c:	001a      	movs	r2, r3
   11b7e:	23c0      	movs	r3, #192	; 0xc0
   11b80:	009b      	lsls	r3, r3, #2
   11b82:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   11b84:	687b      	ldr	r3, [r7, #4]
   11b86:	785b      	ldrb	r3, [r3, #1]
   11b88:	01db      	lsls	r3, r3, #7
   11b8a:	0019      	movs	r1, r3
   11b8c:	23ff      	movs	r3, #255	; 0xff
   11b8e:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   11b90:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   11b92:	687b      	ldr	r3, [r7, #4]
   11b94:	789b      	ldrb	r3, [r3, #2]
   11b96:	005b      	lsls	r3, r3, #1
   11b98:	0019      	movs	r1, r3
   11b9a:	231e      	movs	r3, #30
   11b9c:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   11b9e:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   11ba0:	687b      	ldr	r3, [r7, #4]
   11ba2:	78db      	ldrb	r3, [r3, #3]
   11ba4:	049b      	lsls	r3, r3, #18
   11ba6:	0019      	movs	r1, r3
   11ba8:	2380      	movs	r3, #128	; 0x80
   11baa:	02db      	lsls	r3, r3, #11
   11bac:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   11bae:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   11bb0:	687b      	ldr	r3, [r7, #4]
   11bb2:	791b      	ldrb	r3, [r3, #4]
   11bb4:	041b      	lsls	r3, r3, #16
   11bb6:	0019      	movs	r1, r3
   11bb8:	23c0      	movs	r3, #192	; 0xc0
   11bba:	029b      	lsls	r3, r3, #10
   11bbc:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   11bbe:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
   11bc0:	68fb      	ldr	r3, [r7, #12]
   11bc2:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   11bc4:	68fb      	ldr	r3, [r7, #12]
   11bc6:	689b      	ldr	r3, [r3, #8]
   11bc8:	035b      	lsls	r3, r3, #13
   11bca:	0f5b      	lsrs	r3, r3, #29
   11bcc:	b2db      	uxtb	r3, r3
   11bce:	001a      	movs	r2, r3
   11bd0:	2308      	movs	r3, #8
   11bd2:	4093      	lsls	r3, r2
   11bd4:	b29a      	uxth	r2, r3
   11bd6:	4b10      	ldr	r3, [pc, #64]	; (11c18 <nvm_set_config+0xd4>)
   11bd8:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   11bda:	68fb      	ldr	r3, [r7, #12]
   11bdc:	689b      	ldr	r3, [r3, #8]
   11bde:	b29a      	uxth	r2, r3
   11be0:	4b0d      	ldr	r3, [pc, #52]	; (11c18 <nvm_set_config+0xd4>)
   11be2:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   11be4:	687b      	ldr	r3, [r7, #4]
   11be6:	785a      	ldrb	r2, [r3, #1]
   11be8:	4b0b      	ldr	r3, [pc, #44]	; (11c18 <nvm_set_config+0xd4>)
   11bea:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11bec:	68fb      	ldr	r3, [r7, #12]
   11bee:	8b1b      	ldrh	r3, [r3, #24]
   11bf0:	b29b      	uxth	r3, r3
   11bf2:	001a      	movs	r2, r3
   11bf4:	2380      	movs	r3, #128	; 0x80
   11bf6:	005b      	lsls	r3, r3, #1
   11bf8:	4013      	ands	r3, r2
   11bfa:	d001      	beq.n	11c00 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   11bfc:	2310      	movs	r3, #16
   11bfe:	e000      	b.n	11c02 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   11c00:	2300      	movs	r3, #0
}
   11c02:	0018      	movs	r0, r3
   11c04:	46bd      	mov	sp, r7
   11c06:	b004      	add	sp, #16
   11c08:	bd80      	pop	{r7, pc}
   11c0a:	46c0      	nop			; (mov r8, r8)
   11c0c:	41004000 	.word	0x41004000
   11c10:	00011ae9 	.word	0x00011ae9
   11c14:	00011ac1 	.word	0x00011ac1
   11c18:	2000024c 	.word	0x2000024c

00011c1c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   11c1c:	b580      	push	{r7, lr}
   11c1e:	b086      	sub	sp, #24
   11c20:	af00      	add	r7, sp, #0
   11c22:	60b9      	str	r1, [r7, #8]
   11c24:	607a      	str	r2, [r7, #4]
   11c26:	230f      	movs	r3, #15
   11c28:	18fb      	adds	r3, r7, r3
   11c2a:	1c02      	adds	r2, r0, #0
   11c2c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   11c2e:	4b3a      	ldr	r3, [pc, #232]	; (11d18 <nvm_execute_command+0xfc>)
   11c30:	881b      	ldrh	r3, [r3, #0]
   11c32:	001a      	movs	r2, r3
   11c34:	4b38      	ldr	r3, [pc, #224]	; (11d18 <nvm_execute_command+0xfc>)
   11c36:	885b      	ldrh	r3, [r3, #2]
   11c38:	435a      	muls	r2, r3
   11c3a:	68bb      	ldr	r3, [r7, #8]
   11c3c:	429a      	cmp	r2, r3
   11c3e:	d209      	bcs.n	11c54 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   11c40:	68bb      	ldr	r3, [r7, #8]
   11c42:	4a36      	ldr	r2, [pc, #216]	; (11d1c <nvm_execute_command+0x100>)
   11c44:	4293      	cmp	r3, r2
   11c46:	d903      	bls.n	11c50 <nvm_execute_command+0x34>
   11c48:	68bb      	ldr	r3, [r7, #8]
   11c4a:	4a35      	ldr	r2, [pc, #212]	; (11d20 <nvm_execute_command+0x104>)
   11c4c:	4293      	cmp	r3, r2
   11c4e:	d901      	bls.n	11c54 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11c50:	2318      	movs	r3, #24
   11c52:	e05c      	b.n	11d0e <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11c54:	4b33      	ldr	r3, [pc, #204]	; (11d24 <nvm_execute_command+0x108>)
   11c56:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   11c58:	697b      	ldr	r3, [r7, #20]
   11c5a:	685b      	ldr	r3, [r3, #4]
   11c5c:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   11c5e:	693b      	ldr	r3, [r7, #16]
   11c60:	2280      	movs	r2, #128	; 0x80
   11c62:	02d2      	lsls	r2, r2, #11
   11c64:	431a      	orrs	r2, r3
   11c66:	697b      	ldr	r3, [r7, #20]
   11c68:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11c6a:	697b      	ldr	r3, [r7, #20]
   11c6c:	2220      	movs	r2, #32
   11c6e:	32ff      	adds	r2, #255	; 0xff
   11c70:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11c72:	4b2d      	ldr	r3, [pc, #180]	; (11d28 <nvm_execute_command+0x10c>)
   11c74:	4798      	blx	r3
   11c76:	0003      	movs	r3, r0
   11c78:	001a      	movs	r2, r3
   11c7a:	2301      	movs	r3, #1
   11c7c:	4053      	eors	r3, r2
   11c7e:	b2db      	uxtb	r3, r3
   11c80:	2b00      	cmp	r3, #0
   11c82:	d004      	beq.n	11c8e <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   11c84:	697b      	ldr	r3, [r7, #20]
   11c86:	693a      	ldr	r2, [r7, #16]
   11c88:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   11c8a:	2305      	movs	r3, #5
   11c8c:	e03f      	b.n	11d0e <nvm_execute_command+0xf2>
	}

	switch (command) {
   11c8e:	230f      	movs	r3, #15
   11c90:	18fb      	adds	r3, r7, r3
   11c92:	781b      	ldrb	r3, [r3, #0]
   11c94:	2b45      	cmp	r3, #69	; 0x45
   11c96:	d81d      	bhi.n	11cd4 <nvm_execute_command+0xb8>
   11c98:	009a      	lsls	r2, r3, #2
   11c9a:	4b24      	ldr	r3, [pc, #144]	; (11d2c <nvm_execute_command+0x110>)
   11c9c:	18d3      	adds	r3, r2, r3
   11c9e:	681b      	ldr	r3, [r3, #0]
   11ca0:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11ca2:	697b      	ldr	r3, [r7, #20]
   11ca4:	8b1b      	ldrh	r3, [r3, #24]
   11ca6:	b29b      	uxth	r3, r3
   11ca8:	001a      	movs	r2, r3
   11caa:	2380      	movs	r3, #128	; 0x80
   11cac:	005b      	lsls	r3, r3, #1
   11cae:	4013      	ands	r3, r2
   11cb0:	d004      	beq.n	11cbc <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   11cb2:	697b      	ldr	r3, [r7, #20]
   11cb4:	693a      	ldr	r2, [r7, #16]
   11cb6:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   11cb8:	2310      	movs	r3, #16
   11cba:	e028      	b.n	11d0e <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11cbc:	68bb      	ldr	r3, [r7, #8]
   11cbe:	089b      	lsrs	r3, r3, #2
   11cc0:	005a      	lsls	r2, r3, #1
   11cc2:	697b      	ldr	r3, [r7, #20]
   11cc4:	61da      	str	r2, [r3, #28]
			break;
   11cc6:	e00b      	b.n	11ce0 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11cc8:	68bb      	ldr	r3, [r7, #8]
   11cca:	089b      	lsrs	r3, r3, #2
   11ccc:	005a      	lsls	r2, r3, #1
   11cce:	697b      	ldr	r3, [r7, #20]
   11cd0:	61da      	str	r2, [r3, #28]
			break;
   11cd2:	e005      	b.n	11ce0 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   11cd4:	697b      	ldr	r3, [r7, #20]
   11cd6:	693a      	ldr	r2, [r7, #16]
   11cd8:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   11cda:	2317      	movs	r3, #23
   11cdc:	e017      	b.n	11d0e <nvm_execute_command+0xf2>
			break;
   11cde:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   11ce0:	230f      	movs	r3, #15
   11ce2:	18fb      	adds	r3, r7, r3
   11ce4:	781b      	ldrb	r3, [r3, #0]
   11ce6:	b29b      	uxth	r3, r3
   11ce8:	4a11      	ldr	r2, [pc, #68]	; (11d30 <nvm_execute_command+0x114>)
   11cea:	4313      	orrs	r3, r2
   11cec:	b29a      	uxth	r2, r3
   11cee:	697b      	ldr	r3, [r7, #20]
   11cf0:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   11cf2:	46c0      	nop			; (mov r8, r8)
   11cf4:	4b0c      	ldr	r3, [pc, #48]	; (11d28 <nvm_execute_command+0x10c>)
   11cf6:	4798      	blx	r3
   11cf8:	0003      	movs	r3, r0
   11cfa:	001a      	movs	r2, r3
   11cfc:	2301      	movs	r3, #1
   11cfe:	4053      	eors	r3, r2
   11d00:	b2db      	uxtb	r3, r3
   11d02:	2b00      	cmp	r3, #0
   11d04:	d1f6      	bne.n	11cf4 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   11d06:	697b      	ldr	r3, [r7, #20]
   11d08:	693a      	ldr	r2, [r7, #16]
   11d0a:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   11d0c:	2300      	movs	r3, #0
}
   11d0e:	0018      	movs	r0, r3
   11d10:	46bd      	mov	sp, r7
   11d12:	b006      	add	sp, #24
   11d14:	bd80      	pop	{r7, pc}
   11d16:	46c0      	nop			; (mov r8, r8)
   11d18:	2000024c 	.word	0x2000024c
   11d1c:	00803fff 	.word	0x00803fff
   11d20:	00806000 	.word	0x00806000
   11d24:	41004000 	.word	0x41004000
   11d28:	00011ac1 	.word	0x00011ac1
   11d2c:	000195dc 	.word	0x000195dc
   11d30:	ffffa500 	.word	0xffffa500

00011d34 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   11d34:	b580      	push	{r7, lr}
   11d36:	b088      	sub	sp, #32
   11d38:	af00      	add	r7, sp, #0
   11d3a:	60f8      	str	r0, [r7, #12]
   11d3c:	60b9      	str	r1, [r7, #8]
   11d3e:	1dbb      	adds	r3, r7, #6
   11d40:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11d42:	4b4a      	ldr	r3, [pc, #296]	; (11e6c <nvm_write_buffer+0x138>)
   11d44:	881b      	ldrh	r3, [r3, #0]
   11d46:	001a      	movs	r2, r3
   11d48:	4b48      	ldr	r3, [pc, #288]	; (11e6c <nvm_write_buffer+0x138>)
   11d4a:	885b      	ldrh	r3, [r3, #2]
   11d4c:	435a      	muls	r2, r3
	if (destination_address >
   11d4e:	68fb      	ldr	r3, [r7, #12]
   11d50:	429a      	cmp	r2, r3
   11d52:	d201      	bcs.n	11d58 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   11d54:	2318      	movs	r3, #24
   11d56:	e084      	b.n	11e62 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   11d58:	4b44      	ldr	r3, [pc, #272]	; (11e6c <nvm_write_buffer+0x138>)
   11d5a:	881b      	ldrh	r3, [r3, #0]
   11d5c:	3b01      	subs	r3, #1
   11d5e:	001a      	movs	r2, r3
   11d60:	68fb      	ldr	r3, [r7, #12]
   11d62:	4013      	ands	r3, r2
   11d64:	d001      	beq.n	11d6a <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11d66:	2318      	movs	r3, #24
   11d68:	e07b      	b.n	11e62 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   11d6a:	4b40      	ldr	r3, [pc, #256]	; (11e6c <nvm_write_buffer+0x138>)
   11d6c:	881b      	ldrh	r3, [r3, #0]
   11d6e:	1dba      	adds	r2, r7, #6
   11d70:	8812      	ldrh	r2, [r2, #0]
   11d72:	429a      	cmp	r2, r3
   11d74:	d901      	bls.n	11d7a <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11d76:	2317      	movs	r3, #23
   11d78:	e073      	b.n	11e62 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11d7a:	4b3d      	ldr	r3, [pc, #244]	; (11e70 <nvm_write_buffer+0x13c>)
   11d7c:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11d7e:	4b3d      	ldr	r3, [pc, #244]	; (11e74 <nvm_write_buffer+0x140>)
   11d80:	4798      	blx	r3
   11d82:	0003      	movs	r3, r0
   11d84:	001a      	movs	r2, r3
   11d86:	2301      	movs	r3, #1
   11d88:	4053      	eors	r3, r2
   11d8a:	b2db      	uxtb	r3, r3
   11d8c:	2b00      	cmp	r3, #0
   11d8e:	d001      	beq.n	11d94 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   11d90:	2305      	movs	r3, #5
   11d92:	e066      	b.n	11e62 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   11d94:	697b      	ldr	r3, [r7, #20]
   11d96:	4a38      	ldr	r2, [pc, #224]	; (11e78 <nvm_write_buffer+0x144>)
   11d98:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   11d9a:	46c0      	nop			; (mov r8, r8)
   11d9c:	4b35      	ldr	r3, [pc, #212]	; (11e74 <nvm_write_buffer+0x140>)
   11d9e:	4798      	blx	r3
   11da0:	0003      	movs	r3, r0
   11da2:	001a      	movs	r2, r3
   11da4:	2301      	movs	r3, #1
   11da6:	4053      	eors	r3, r2
   11da8:	b2db      	uxtb	r3, r3
   11daa:	2b00      	cmp	r3, #0
   11dac:	d1f6      	bne.n	11d9c <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11dae:	697b      	ldr	r3, [r7, #20]
   11db0:	2220      	movs	r2, #32
   11db2:	32ff      	adds	r2, #255	; 0xff
   11db4:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   11db6:	68fb      	ldr	r3, [r7, #12]
   11db8:	085b      	lsrs	r3, r3, #1
   11dba:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11dbc:	231a      	movs	r3, #26
   11dbe:	18fb      	adds	r3, r7, r3
   11dc0:	2200      	movs	r2, #0
   11dc2:	801a      	strh	r2, [r3, #0]
   11dc4:	e032      	b.n	11e2c <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   11dc6:	231a      	movs	r3, #26
   11dc8:	18fb      	adds	r3, r7, r3
   11dca:	881b      	ldrh	r3, [r3, #0]
   11dcc:	68ba      	ldr	r2, [r7, #8]
   11dce:	18d3      	adds	r3, r2, r3
   11dd0:	781a      	ldrb	r2, [r3, #0]
   11dd2:	2318      	movs	r3, #24
   11dd4:	18fb      	adds	r3, r7, r3
   11dd6:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11dd8:	231a      	movs	r3, #26
   11dda:	18fb      	adds	r3, r7, r3
   11ddc:	881a      	ldrh	r2, [r3, #0]
   11dde:	1dbb      	adds	r3, r7, #6
   11de0:	881b      	ldrh	r3, [r3, #0]
   11de2:	3b01      	subs	r3, #1
   11de4:	429a      	cmp	r2, r3
   11de6:	da11      	bge.n	11e0c <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   11de8:	231a      	movs	r3, #26
   11dea:	18fb      	adds	r3, r7, r3
   11dec:	881b      	ldrh	r3, [r3, #0]
   11dee:	3301      	adds	r3, #1
   11df0:	68ba      	ldr	r2, [r7, #8]
   11df2:	18d3      	adds	r3, r2, r3
   11df4:	781b      	ldrb	r3, [r3, #0]
   11df6:	021b      	lsls	r3, r3, #8
   11df8:	b21a      	sxth	r2, r3
   11dfa:	2318      	movs	r3, #24
   11dfc:	18fb      	adds	r3, r7, r3
   11dfe:	2100      	movs	r1, #0
   11e00:	5e5b      	ldrsh	r3, [r3, r1]
   11e02:	4313      	orrs	r3, r2
   11e04:	b21a      	sxth	r2, r3
   11e06:	2318      	movs	r3, #24
   11e08:	18fb      	adds	r3, r7, r3
   11e0a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   11e0c:	69fb      	ldr	r3, [r7, #28]
   11e0e:	1c5a      	adds	r2, r3, #1
   11e10:	61fa      	str	r2, [r7, #28]
   11e12:	005b      	lsls	r3, r3, #1
   11e14:	001a      	movs	r2, r3
   11e16:	2318      	movs	r3, #24
   11e18:	18fb      	adds	r3, r7, r3
   11e1a:	881b      	ldrh	r3, [r3, #0]
   11e1c:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   11e1e:	231a      	movs	r3, #26
   11e20:	18fb      	adds	r3, r7, r3
   11e22:	221a      	movs	r2, #26
   11e24:	18ba      	adds	r2, r7, r2
   11e26:	8812      	ldrh	r2, [r2, #0]
   11e28:	3202      	adds	r2, #2
   11e2a:	801a      	strh	r2, [r3, #0]
   11e2c:	231a      	movs	r3, #26
   11e2e:	18fa      	adds	r2, r7, r3
   11e30:	1dbb      	adds	r3, r7, #6
   11e32:	8812      	ldrh	r2, [r2, #0]
   11e34:	881b      	ldrh	r3, [r3, #0]
   11e36:	429a      	cmp	r2, r3
   11e38:	d3c5      	bcc.n	11dc6 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   11e3a:	4b0c      	ldr	r3, [pc, #48]	; (11e6c <nvm_write_buffer+0x138>)
   11e3c:	791b      	ldrb	r3, [r3, #4]
   11e3e:	2201      	movs	r2, #1
   11e40:	4053      	eors	r3, r2
   11e42:	b2db      	uxtb	r3, r3
   11e44:	2b00      	cmp	r3, #0
   11e46:	d00b      	beq.n	11e60 <nvm_write_buffer+0x12c>
   11e48:	1dbb      	adds	r3, r7, #6
   11e4a:	881b      	ldrh	r3, [r3, #0]
   11e4c:	2b3f      	cmp	r3, #63	; 0x3f
   11e4e:	d807      	bhi.n	11e60 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   11e50:	68fb      	ldr	r3, [r7, #12]
   11e52:	2200      	movs	r2, #0
   11e54:	0019      	movs	r1, r3
   11e56:	2004      	movs	r0, #4
   11e58:	4b08      	ldr	r3, [pc, #32]	; (11e7c <nvm_write_buffer+0x148>)
   11e5a:	4798      	blx	r3
   11e5c:	0003      	movs	r3, r0
   11e5e:	e000      	b.n	11e62 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   11e60:	2300      	movs	r3, #0
}
   11e62:	0018      	movs	r0, r3
   11e64:	46bd      	mov	sp, r7
   11e66:	b008      	add	sp, #32
   11e68:	bd80      	pop	{r7, pc}
   11e6a:	46c0      	nop			; (mov r8, r8)
   11e6c:	2000024c 	.word	0x2000024c
   11e70:	41004000 	.word	0x41004000
   11e74:	00011ac1 	.word	0x00011ac1
   11e78:	ffffa544 	.word	0xffffa544
   11e7c:	00011c1d 	.word	0x00011c1d

00011e80 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   11e80:	b580      	push	{r7, lr}
   11e82:	b088      	sub	sp, #32
   11e84:	af00      	add	r7, sp, #0
   11e86:	60f8      	str	r0, [r7, #12]
   11e88:	60b9      	str	r1, [r7, #8]
   11e8a:	1dbb      	adds	r3, r7, #6
   11e8c:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11e8e:	4b38      	ldr	r3, [pc, #224]	; (11f70 <nvm_read_buffer+0xf0>)
   11e90:	881b      	ldrh	r3, [r3, #0]
   11e92:	001a      	movs	r2, r3
   11e94:	4b36      	ldr	r3, [pc, #216]	; (11f70 <nvm_read_buffer+0xf0>)
   11e96:	885b      	ldrh	r3, [r3, #2]
   11e98:	435a      	muls	r2, r3
	if (source_address >
   11e9a:	68fb      	ldr	r3, [r7, #12]
   11e9c:	429a      	cmp	r2, r3
   11e9e:	d201      	bcs.n	11ea4 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11ea0:	2318      	movs	r3, #24
   11ea2:	e060      	b.n	11f66 <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   11ea4:	4b32      	ldr	r3, [pc, #200]	; (11f70 <nvm_read_buffer+0xf0>)
   11ea6:	881b      	ldrh	r3, [r3, #0]
   11ea8:	3b01      	subs	r3, #1
   11eaa:	001a      	movs	r2, r3
   11eac:	68fb      	ldr	r3, [r7, #12]
   11eae:	4013      	ands	r3, r2
   11eb0:	d001      	beq.n	11eb6 <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11eb2:	2318      	movs	r3, #24
   11eb4:	e057      	b.n	11f66 <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   11eb6:	4b2e      	ldr	r3, [pc, #184]	; (11f70 <nvm_read_buffer+0xf0>)
   11eb8:	881b      	ldrh	r3, [r3, #0]
   11eba:	1dba      	adds	r2, r7, #6
   11ebc:	8812      	ldrh	r2, [r2, #0]
   11ebe:	429a      	cmp	r2, r3
   11ec0:	d901      	bls.n	11ec6 <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11ec2:	2317      	movs	r3, #23
   11ec4:	e04f      	b.n	11f66 <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11ec6:	4b2b      	ldr	r3, [pc, #172]	; (11f74 <nvm_read_buffer+0xf4>)
   11ec8:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11eca:	4b2b      	ldr	r3, [pc, #172]	; (11f78 <nvm_read_buffer+0xf8>)
   11ecc:	4798      	blx	r3
   11ece:	0003      	movs	r3, r0
   11ed0:	001a      	movs	r2, r3
   11ed2:	2301      	movs	r3, #1
   11ed4:	4053      	eors	r3, r2
   11ed6:	b2db      	uxtb	r3, r3
   11ed8:	2b00      	cmp	r3, #0
   11eda:	d001      	beq.n	11ee0 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   11edc:	2305      	movs	r3, #5
   11ede:	e042      	b.n	11f66 <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11ee0:	697b      	ldr	r3, [r7, #20]
   11ee2:	2220      	movs	r2, #32
   11ee4:	32ff      	adds	r2, #255	; 0xff
   11ee6:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   11ee8:	68fb      	ldr	r3, [r7, #12]
   11eea:	085b      	lsrs	r3, r3, #1
   11eec:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11eee:	231a      	movs	r3, #26
   11ef0:	18fb      	adds	r3, r7, r3
   11ef2:	2200      	movs	r2, #0
   11ef4:	801a      	strh	r2, [r3, #0]
   11ef6:	e02e      	b.n	11f56 <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   11ef8:	69fb      	ldr	r3, [r7, #28]
   11efa:	1c5a      	adds	r2, r3, #1
   11efc:	61fa      	str	r2, [r7, #28]
   11efe:	005b      	lsls	r3, r3, #1
   11f00:	001a      	movs	r2, r3
   11f02:	2312      	movs	r3, #18
   11f04:	18fb      	adds	r3, r7, r3
   11f06:	8812      	ldrh	r2, [r2, #0]
   11f08:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   11f0a:	231a      	movs	r3, #26
   11f0c:	18fb      	adds	r3, r7, r3
   11f0e:	881b      	ldrh	r3, [r3, #0]
   11f10:	68ba      	ldr	r2, [r7, #8]
   11f12:	18d3      	adds	r3, r2, r3
   11f14:	2212      	movs	r2, #18
   11f16:	18ba      	adds	r2, r7, r2
   11f18:	8812      	ldrh	r2, [r2, #0]
   11f1a:	b2d2      	uxtb	r2, r2
   11f1c:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11f1e:	231a      	movs	r3, #26
   11f20:	18fb      	adds	r3, r7, r3
   11f22:	881a      	ldrh	r2, [r3, #0]
   11f24:	1dbb      	adds	r3, r7, #6
   11f26:	881b      	ldrh	r3, [r3, #0]
   11f28:	3b01      	subs	r3, #1
   11f2a:	429a      	cmp	r2, r3
   11f2c:	da0c      	bge.n	11f48 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   11f2e:	231a      	movs	r3, #26
   11f30:	18fb      	adds	r3, r7, r3
   11f32:	881b      	ldrh	r3, [r3, #0]
   11f34:	3301      	adds	r3, #1
   11f36:	68ba      	ldr	r2, [r7, #8]
   11f38:	18d3      	adds	r3, r2, r3
   11f3a:	2212      	movs	r2, #18
   11f3c:	18ba      	adds	r2, r7, r2
   11f3e:	8812      	ldrh	r2, [r2, #0]
   11f40:	0a12      	lsrs	r2, r2, #8
   11f42:	b292      	uxth	r2, r2
   11f44:	b2d2      	uxtb	r2, r2
   11f46:	701a      	strb	r2, [r3, #0]
	for (uint16_t i = 0; i < length; i += 2) {
   11f48:	231a      	movs	r3, #26
   11f4a:	18fb      	adds	r3, r7, r3
   11f4c:	221a      	movs	r2, #26
   11f4e:	18ba      	adds	r2, r7, r2
   11f50:	8812      	ldrh	r2, [r2, #0]
   11f52:	3202      	adds	r2, #2
   11f54:	801a      	strh	r2, [r3, #0]
   11f56:	231a      	movs	r3, #26
   11f58:	18fa      	adds	r2, r7, r3
   11f5a:	1dbb      	adds	r3, r7, #6
   11f5c:	8812      	ldrh	r2, [r2, #0]
   11f5e:	881b      	ldrh	r3, [r3, #0]
   11f60:	429a      	cmp	r2, r3
   11f62:	d3c9      	bcc.n	11ef8 <nvm_read_buffer+0x78>
		}
	}

	return STATUS_OK;
   11f64:	2300      	movs	r3, #0
}
   11f66:	0018      	movs	r0, r3
   11f68:	46bd      	mov	sp, r7
   11f6a:	b008      	add	sp, #32
   11f6c:	bd80      	pop	{r7, pc}
   11f6e:	46c0      	nop			; (mov r8, r8)
   11f70:	2000024c 	.word	0x2000024c
   11f74:	41004000 	.word	0x41004000
   11f78:	00011ac1 	.word	0x00011ac1

00011f7c <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   11f7c:	b580      	push	{r7, lr}
   11f7e:	b084      	sub	sp, #16
   11f80:	af00      	add	r7, sp, #0
   11f82:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11f84:	4b23      	ldr	r3, [pc, #140]	; (12014 <nvm_erase_row+0x98>)
   11f86:	881b      	ldrh	r3, [r3, #0]
   11f88:	001a      	movs	r2, r3
   11f8a:	4b22      	ldr	r3, [pc, #136]	; (12014 <nvm_erase_row+0x98>)
   11f8c:	885b      	ldrh	r3, [r3, #2]
   11f8e:	435a      	muls	r2, r3
	if (row_address >
   11f90:	687b      	ldr	r3, [r7, #4]
   11f92:	429a      	cmp	r2, r3
   11f94:	d201      	bcs.n	11f9a <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   11f96:	2318      	movs	r3, #24
   11f98:	e037      	b.n	1200a <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   11f9a:	4b1e      	ldr	r3, [pc, #120]	; (12014 <nvm_erase_row+0x98>)
   11f9c:	881b      	ldrh	r3, [r3, #0]
   11f9e:	009b      	lsls	r3, r3, #2
   11fa0:	3b01      	subs	r3, #1
   11fa2:	001a      	movs	r2, r3
   11fa4:	687b      	ldr	r3, [r7, #4]
   11fa6:	4013      	ands	r3, r2
   11fa8:	d001      	beq.n	11fae <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   11faa:	2318      	movs	r3, #24
   11fac:	e02d      	b.n	1200a <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11fae:	4b1a      	ldr	r3, [pc, #104]	; (12018 <nvm_erase_row+0x9c>)
   11fb0:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11fb2:	4b1a      	ldr	r3, [pc, #104]	; (1201c <nvm_erase_row+0xa0>)
   11fb4:	4798      	blx	r3
   11fb6:	0003      	movs	r3, r0
   11fb8:	001a      	movs	r2, r3
   11fba:	2301      	movs	r3, #1
   11fbc:	4053      	eors	r3, r2
   11fbe:	b2db      	uxtb	r3, r3
   11fc0:	2b00      	cmp	r3, #0
   11fc2:	d001      	beq.n	11fc8 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   11fc4:	2305      	movs	r3, #5
   11fc6:	e020      	b.n	1200a <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11fc8:	68fb      	ldr	r3, [r7, #12]
   11fca:	2220      	movs	r2, #32
   11fcc:	32ff      	adds	r2, #255	; 0xff
   11fce:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   11fd0:	687b      	ldr	r3, [r7, #4]
   11fd2:	089b      	lsrs	r3, r3, #2
   11fd4:	005a      	lsls	r2, r3, #1
   11fd6:	68fb      	ldr	r3, [r7, #12]
   11fd8:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   11fda:	68fb      	ldr	r3, [r7, #12]
   11fdc:	4a10      	ldr	r2, [pc, #64]	; (12020 <nvm_erase_row+0xa4>)
   11fde:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   11fe0:	46c0      	nop			; (mov r8, r8)
   11fe2:	4b0e      	ldr	r3, [pc, #56]	; (1201c <nvm_erase_row+0xa0>)
   11fe4:	4798      	blx	r3
   11fe6:	0003      	movs	r3, r0
   11fe8:	001a      	movs	r2, r3
   11fea:	2301      	movs	r3, #1
   11fec:	4053      	eors	r3, r2
   11fee:	b2db      	uxtb	r3, r3
   11ff0:	2b00      	cmp	r3, #0
   11ff2:	d1f6      	bne.n	11fe2 <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   11ff4:	68fb      	ldr	r3, [r7, #12]
   11ff6:	8b1b      	ldrh	r3, [r3, #24]
   11ff8:	b29b      	uxth	r3, r3
   11ffa:	b2db      	uxtb	r3, r3
   11ffc:	001a      	movs	r2, r3
   11ffe:	231c      	movs	r3, #28
   12000:	4013      	ands	r3, r2
   12002:	d001      	beq.n	12008 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   12004:	2304      	movs	r3, #4
   12006:	e000      	b.n	1200a <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   12008:	2300      	movs	r3, #0
}
   1200a:	0018      	movs	r0, r3
   1200c:	46bd      	mov	sp, r7
   1200e:	b004      	add	sp, #16
   12010:	bd80      	pop	{r7, pc}
   12012:	46c0      	nop			; (mov r8, r8)
   12014:	2000024c 	.word	0x2000024c
   12018:	41004000 	.word	0x41004000
   1201c:	00011ac1 	.word	0x00011ac1
   12020:	ffffa502 	.word	0xffffa502

00012024 <system_pinmux_get_config_defaults>:
{
   12024:	b580      	push	{r7, lr}
   12026:	b082      	sub	sp, #8
   12028:	af00      	add	r7, sp, #0
   1202a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1202c:	687b      	ldr	r3, [r7, #4]
   1202e:	2280      	movs	r2, #128	; 0x80
   12030:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12032:	687b      	ldr	r3, [r7, #4]
   12034:	2200      	movs	r2, #0
   12036:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12038:	687b      	ldr	r3, [r7, #4]
   1203a:	2201      	movs	r2, #1
   1203c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1203e:	687b      	ldr	r3, [r7, #4]
   12040:	2200      	movs	r2, #0
   12042:	70da      	strb	r2, [r3, #3]
}
   12044:	46c0      	nop			; (mov r8, r8)
   12046:	46bd      	mov	sp, r7
   12048:	b002      	add	sp, #8
   1204a:	bd80      	pop	{r7, pc}

0001204c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   1204c:	b580      	push	{r7, lr}
   1204e:	b084      	sub	sp, #16
   12050:	af00      	add	r7, sp, #0
   12052:	0002      	movs	r2, r0
   12054:	6039      	str	r1, [r7, #0]
   12056:	1dfb      	adds	r3, r7, #7
   12058:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   1205a:	230c      	movs	r3, #12
   1205c:	18fb      	adds	r3, r7, r3
   1205e:	0018      	movs	r0, r3
   12060:	4b10      	ldr	r3, [pc, #64]	; (120a4 <port_pin_set_config+0x58>)
   12062:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   12064:	230c      	movs	r3, #12
   12066:	18fb      	adds	r3, r7, r3
   12068:	2280      	movs	r2, #128	; 0x80
   1206a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   1206c:	683b      	ldr	r3, [r7, #0]
   1206e:	781a      	ldrb	r2, [r3, #0]
   12070:	230c      	movs	r3, #12
   12072:	18fb      	adds	r3, r7, r3
   12074:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   12076:	683b      	ldr	r3, [r7, #0]
   12078:	785a      	ldrb	r2, [r3, #1]
   1207a:	230c      	movs	r3, #12
   1207c:	18fb      	adds	r3, r7, r3
   1207e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   12080:	683b      	ldr	r3, [r7, #0]
   12082:	789a      	ldrb	r2, [r3, #2]
   12084:	230c      	movs	r3, #12
   12086:	18fb      	adds	r3, r7, r3
   12088:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1208a:	230c      	movs	r3, #12
   1208c:	18fa      	adds	r2, r7, r3
   1208e:	1dfb      	adds	r3, r7, #7
   12090:	781b      	ldrb	r3, [r3, #0]
   12092:	0011      	movs	r1, r2
   12094:	0018      	movs	r0, r3
   12096:	4b04      	ldr	r3, [pc, #16]	; (120a8 <port_pin_set_config+0x5c>)
   12098:	4798      	blx	r3
}
   1209a:	46c0      	nop			; (mov r8, r8)
   1209c:	46bd      	mov	sp, r7
   1209e:	b004      	add	sp, #16
   120a0:	bd80      	pop	{r7, pc}
   120a2:	46c0      	nop			; (mov r8, r8)
   120a4:	00012025 	.word	0x00012025
   120a8:	00015341 	.word	0x00015341

000120ac <system_gclk_chan_get_config_defaults>:
{
   120ac:	b580      	push	{r7, lr}
   120ae:	b082      	sub	sp, #8
   120b0:	af00      	add	r7, sp, #0
   120b2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   120b4:	687b      	ldr	r3, [r7, #4]
   120b6:	2200      	movs	r2, #0
   120b8:	701a      	strb	r2, [r3, #0]
}
   120ba:	46c0      	nop			; (mov r8, r8)
   120bc:	46bd      	mov	sp, r7
   120be:	b002      	add	sp, #8
   120c0:	bd80      	pop	{r7, pc}

000120c2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   120c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   120c4:	b08d      	sub	sp, #52	; 0x34
   120c6:	af00      	add	r7, sp, #0
   120c8:	60b8      	str	r0, [r7, #8]
   120ca:	60f9      	str	r1, [r7, #12]
   120cc:	603a      	str	r2, [r7, #0]
   120ce:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   120d0:	2300      	movs	r3, #0
   120d2:	2400      	movs	r4, #0
   120d4:	623b      	str	r3, [r7, #32]
   120d6:	627c      	str	r4, [r7, #36]	; 0x24
   120d8:	2300      	movs	r3, #0
   120da:	2400      	movs	r4, #0
   120dc:	61bb      	str	r3, [r7, #24]
   120de:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   120e0:	233f      	movs	r3, #63	; 0x3f
   120e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   120e4:	e053      	b.n	1218e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   120e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   120e8:	3b20      	subs	r3, #32
   120ea:	2b00      	cmp	r3, #0
   120ec:	db04      	blt.n	120f8 <long_division+0x36>
   120ee:	2201      	movs	r2, #1
   120f0:	409a      	lsls	r2, r3
   120f2:	0013      	movs	r3, r2
   120f4:	617b      	str	r3, [r7, #20]
   120f6:	e00b      	b.n	12110 <long_division+0x4e>
   120f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   120fa:	2220      	movs	r2, #32
   120fc:	1ad3      	subs	r3, r2, r3
   120fe:	2201      	movs	r2, #1
   12100:	40da      	lsrs	r2, r3
   12102:	0013      	movs	r3, r2
   12104:	2100      	movs	r1, #0
   12106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   12108:	4091      	lsls	r1, r2
   1210a:	000a      	movs	r2, r1
   1210c:	4313      	orrs	r3, r2
   1210e:	617b      	str	r3, [r7, #20]
   12110:	2201      	movs	r2, #1
   12112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12114:	409a      	lsls	r2, r3
   12116:	0013      	movs	r3, r2
   12118:	613b      	str	r3, [r7, #16]

		r = r << 1;
   1211a:	69bb      	ldr	r3, [r7, #24]
   1211c:	69fc      	ldr	r4, [r7, #28]
   1211e:	18db      	adds	r3, r3, r3
   12120:	4164      	adcs	r4, r4
   12122:	61bb      	str	r3, [r7, #24]
   12124:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   12126:	68bb      	ldr	r3, [r7, #8]
   12128:	693a      	ldr	r2, [r7, #16]
   1212a:	401a      	ands	r2, r3
   1212c:	0015      	movs	r5, r2
   1212e:	68fb      	ldr	r3, [r7, #12]
   12130:	697a      	ldr	r2, [r7, #20]
   12132:	401a      	ands	r2, r3
   12134:	0016      	movs	r6, r2
   12136:	002b      	movs	r3, r5
   12138:	4333      	orrs	r3, r6
   1213a:	d007      	beq.n	1214c <long_division+0x8a>
			r |= 0x01;
   1213c:	69bb      	ldr	r3, [r7, #24]
   1213e:	2201      	movs	r2, #1
   12140:	4313      	orrs	r3, r2
   12142:	61bb      	str	r3, [r7, #24]
   12144:	69fb      	ldr	r3, [r7, #28]
   12146:	2200      	movs	r2, #0
   12148:	4313      	orrs	r3, r2
   1214a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   1214c:	687a      	ldr	r2, [r7, #4]
   1214e:	69fb      	ldr	r3, [r7, #28]
   12150:	429a      	cmp	r2, r3
   12152:	d819      	bhi.n	12188 <long_division+0xc6>
   12154:	687a      	ldr	r2, [r7, #4]
   12156:	69fb      	ldr	r3, [r7, #28]
   12158:	429a      	cmp	r2, r3
   1215a:	d103      	bne.n	12164 <long_division+0xa2>
   1215c:	683a      	ldr	r2, [r7, #0]
   1215e:	69bb      	ldr	r3, [r7, #24]
   12160:	429a      	cmp	r2, r3
   12162:	d811      	bhi.n	12188 <long_division+0xc6>
			r = r - d;
   12164:	69b9      	ldr	r1, [r7, #24]
   12166:	69fa      	ldr	r2, [r7, #28]
   12168:	683b      	ldr	r3, [r7, #0]
   1216a:	687c      	ldr	r4, [r7, #4]
   1216c:	1ac9      	subs	r1, r1, r3
   1216e:	41a2      	sbcs	r2, r4
   12170:	000b      	movs	r3, r1
   12172:	0014      	movs	r4, r2
   12174:	61bb      	str	r3, [r7, #24]
   12176:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   12178:	6a3a      	ldr	r2, [r7, #32]
   1217a:	693b      	ldr	r3, [r7, #16]
   1217c:	4313      	orrs	r3, r2
   1217e:	623b      	str	r3, [r7, #32]
   12180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12182:	697b      	ldr	r3, [r7, #20]
   12184:	4313      	orrs	r3, r2
   12186:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   12188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1218a:	3b01      	subs	r3, #1
   1218c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1218e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12190:	2b00      	cmp	r3, #0
   12192:	daa8      	bge.n	120e6 <long_division+0x24>
		}
	}

	return q;
   12194:	6a3b      	ldr	r3, [r7, #32]
   12196:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   12198:	0018      	movs	r0, r3
   1219a:	0021      	movs	r1, r4
   1219c:	46bd      	mov	sp, r7
   1219e:	b00d      	add	sp, #52	; 0x34
   121a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000121a2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   121a2:	b580      	push	{r7, lr}
   121a4:	b086      	sub	sp, #24
   121a6:	af00      	add	r7, sp, #0
   121a8:	60f8      	str	r0, [r7, #12]
   121aa:	60b9      	str	r1, [r7, #8]
   121ac:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   121ae:	2316      	movs	r3, #22
   121b0:	18fb      	adds	r3, r7, r3
   121b2:	2200      	movs	r2, #0
   121b4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   121b6:	68bb      	ldr	r3, [r7, #8]
   121b8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   121ba:	68bb      	ldr	r3, [r7, #8]
   121bc:	085a      	lsrs	r2, r3, #1
   121be:	68fb      	ldr	r3, [r7, #12]
   121c0:	429a      	cmp	r2, r3
   121c2:	d201      	bcs.n	121c8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   121c4:	2340      	movs	r3, #64	; 0x40
   121c6:	e026      	b.n	12216 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   121c8:	68bb      	ldr	r3, [r7, #8]
   121ca:	085b      	lsrs	r3, r3, #1
   121cc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   121ce:	e00a      	b.n	121e6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   121d0:	693a      	ldr	r2, [r7, #16]
   121d2:	68fb      	ldr	r3, [r7, #12]
   121d4:	1ad3      	subs	r3, r2, r3
   121d6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   121d8:	2316      	movs	r3, #22
   121da:	18fb      	adds	r3, r7, r3
   121dc:	881a      	ldrh	r2, [r3, #0]
   121de:	2316      	movs	r3, #22
   121e0:	18fb      	adds	r3, r7, r3
   121e2:	3201      	adds	r2, #1
   121e4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   121e6:	693a      	ldr	r2, [r7, #16]
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	429a      	cmp	r2, r3
   121ec:	d2f0      	bcs.n	121d0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   121ee:	2316      	movs	r3, #22
   121f0:	18fb      	adds	r3, r7, r3
   121f2:	2216      	movs	r2, #22
   121f4:	18ba      	adds	r2, r7, r2
   121f6:	8812      	ldrh	r2, [r2, #0]
   121f8:	3a01      	subs	r2, #1
   121fa:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   121fc:	2316      	movs	r3, #22
   121fe:	18fb      	adds	r3, r7, r3
   12200:	881b      	ldrh	r3, [r3, #0]
   12202:	2bff      	cmp	r3, #255	; 0xff
   12204:	d901      	bls.n	1220a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12206:	2340      	movs	r3, #64	; 0x40
   12208:	e005      	b.n	12216 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1220a:	687b      	ldr	r3, [r7, #4]
   1220c:	2216      	movs	r2, #22
   1220e:	18ba      	adds	r2, r7, r2
   12210:	8812      	ldrh	r2, [r2, #0]
   12212:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   12214:	2300      	movs	r3, #0
	}
}
   12216:	0018      	movs	r0, r3
   12218:	46bd      	mov	sp, r7
   1221a:	b006      	add	sp, #24
   1221c:	bd80      	pop	{r7, pc}
	...

00012220 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   12220:	b5f0      	push	{r4, r5, r6, r7, lr}
   12222:	b0a1      	sub	sp, #132	; 0x84
   12224:	af00      	add	r7, sp, #0
   12226:	64f8      	str	r0, [r7, #76]	; 0x4c
   12228:	64b9      	str	r1, [r7, #72]	; 0x48
   1222a:	647a      	str	r2, [r7, #68]	; 0x44
   1222c:	2243      	movs	r2, #67	; 0x43
   1222e:	18ba      	adds	r2, r7, r2
   12230:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   12232:	2300      	movs	r3, #0
   12234:	2400      	movs	r4, #0
   12236:	673b      	str	r3, [r7, #112]	; 0x70
   12238:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   1223a:	2300      	movs	r3, #0
   1223c:	2400      	movs	r4, #0
   1223e:	66bb      	str	r3, [r7, #104]	; 0x68
   12240:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   12242:	2300      	movs	r3, #0
   12244:	2400      	movs	r4, #0
   12246:	67bb      	str	r3, [r7, #120]	; 0x78
   12248:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   1224a:	2300      	movs	r3, #0
   1224c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   1224e:	2358      	movs	r3, #88	; 0x58
   12250:	2240      	movs	r2, #64	; 0x40
   12252:	4694      	mov	ip, r2
   12254:	44bc      	add	ip, r7
   12256:	4463      	add	r3, ip
   12258:	781a      	ldrb	r2, [r3, #0]
   1225a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1225c:	435a      	muls	r2, r3
   1225e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12260:	429a      	cmp	r2, r3
   12262:	d901      	bls.n	12268 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12264:	2340      	movs	r3, #64	; 0x40
   12266:	e0b3      	b.n	123d0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   12268:	2343      	movs	r3, #67	; 0x43
   1226a:	18fb      	adds	r3, r7, r3
   1226c:	781b      	ldrb	r3, [r3, #0]
   1226e:	2b00      	cmp	r3, #0
   12270:	d13d      	bne.n	122ee <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   12272:	2358      	movs	r3, #88	; 0x58
   12274:	2240      	movs	r2, #64	; 0x40
   12276:	4694      	mov	ip, r2
   12278:	44bc      	add	ip, r7
   1227a:	4463      	add	r3, ip
   1227c:	781b      	ldrb	r3, [r3, #0]
   1227e:	b2db      	uxtb	r3, r3
   12280:	613b      	str	r3, [r7, #16]
   12282:	2300      	movs	r3, #0
   12284:	617b      	str	r3, [r7, #20]
   12286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12288:	60bb      	str	r3, [r7, #8]
   1228a:	2300      	movs	r3, #0
   1228c:	60fb      	str	r3, [r7, #12]
   1228e:	4c52      	ldr	r4, [pc, #328]	; (123d8 <_sercom_get_async_baud_val+0x1b8>)
   12290:	68ba      	ldr	r2, [r7, #8]
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	6938      	ldr	r0, [r7, #16]
   12296:	6979      	ldr	r1, [r7, #20]
   12298:	47a0      	blx	r4
   1229a:	0003      	movs	r3, r0
   1229c:	000c      	movs	r4, r1
   1229e:	001b      	movs	r3, r3
   122a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   122a2:	2300      	movs	r3, #0
   122a4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   122a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   122a8:	603b      	str	r3, [r7, #0]
   122aa:	2300      	movs	r3, #0
   122ac:	607b      	str	r3, [r7, #4]
   122ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
   122b0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   122b2:	683a      	ldr	r2, [r7, #0]
   122b4:	687b      	ldr	r3, [r7, #4]
   122b6:	4c49      	ldr	r4, [pc, #292]	; (123dc <_sercom_get_async_baud_val+0x1bc>)
   122b8:	47a0      	blx	r4
   122ba:	0003      	movs	r3, r0
   122bc:	000c      	movs	r4, r1
   122be:	673b      	str	r3, [r7, #112]	; 0x70
   122c0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   122c2:	2100      	movs	r1, #0
   122c4:	2201      	movs	r2, #1
   122c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   122c8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   122ca:	1ac9      	subs	r1, r1, r3
   122cc:	41a2      	sbcs	r2, r4
   122ce:	000b      	movs	r3, r1
   122d0:	0014      	movs	r4, r2
   122d2:	66bb      	str	r3, [r7, #104]	; 0x68
   122d4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   122d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   122d8:	0c1b      	lsrs	r3, r3, #16
   122da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   122dc:	0416      	lsls	r6, r2, #16
   122de:	431e      	orrs	r6, r3
   122e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   122e2:	041d      	lsls	r5, r3, #16
   122e4:	0033      	movs	r3, r6
   122e6:	67bb      	str	r3, [r7, #120]	; 0x78
   122e8:	2300      	movs	r3, #0
   122ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   122ec:	e06a      	b.n	123c4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   122ee:	2343      	movs	r3, #67	; 0x43
   122f0:	18fb      	adds	r3, r7, r3
   122f2:	781b      	ldrb	r3, [r3, #0]
   122f4:	2b01      	cmp	r3, #1
   122f6:	d165      	bne.n	123c4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   122f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   122fa:	633b      	str	r3, [r7, #48]	; 0x30
   122fc:	2300      	movs	r3, #0
   122fe:	637b      	str	r3, [r7, #52]	; 0x34
   12300:	2358      	movs	r3, #88	; 0x58
   12302:	2240      	movs	r2, #64	; 0x40
   12304:	4694      	mov	ip, r2
   12306:	44bc      	add	ip, r7
   12308:	4463      	add	r3, ip
   1230a:	781b      	ldrb	r3, [r3, #0]
   1230c:	b2db      	uxtb	r3, r3
   1230e:	62bb      	str	r3, [r7, #40]	; 0x28
   12310:	2300      	movs	r3, #0
   12312:	62fb      	str	r3, [r7, #44]	; 0x2c
   12314:	4c30      	ldr	r4, [pc, #192]	; (123d8 <_sercom_get_async_baud_val+0x1b8>)
   12316:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1231a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1231c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1231e:	47a0      	blx	r4
   12320:	0003      	movs	r3, r0
   12322:	000c      	movs	r4, r1
   12324:	65bb      	str	r3, [r7, #88]	; 0x58
   12326:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   12328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1232a:	623b      	str	r3, [r7, #32]
   1232c:	2300      	movs	r3, #0
   1232e:	627b      	str	r3, [r7, #36]	; 0x24
   12330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12332:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   12334:	001a      	movs	r2, r3
   12336:	0023      	movs	r3, r4
   12338:	6a38      	ldr	r0, [r7, #32]
   1233a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1233c:	4c27      	ldr	r4, [pc, #156]	; (123dc <_sercom_get_async_baud_val+0x1bc>)
   1233e:	47a0      	blx	r4
   12340:	0003      	movs	r3, r0
   12342:	000c      	movs	r4, r1
   12344:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   12346:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   12348:	2380      	movs	r3, #128	; 0x80
   1234a:	019b      	lsls	r3, r3, #6
   1234c:	429a      	cmp	r2, r3
   1234e:	d901      	bls.n	12354 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12350:	2340      	movs	r3, #64	; 0x40
   12352:	e03d      	b.n	123d0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   12354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12356:	61bb      	str	r3, [r7, #24]
   12358:	2300      	movs	r3, #0
   1235a:	61fb      	str	r3, [r7, #28]
   1235c:	69b9      	ldr	r1, [r7, #24]
   1235e:	69fa      	ldr	r2, [r7, #28]
   12360:	000b      	movs	r3, r1
   12362:	0f5b      	lsrs	r3, r3, #29
   12364:	0010      	movs	r0, r2
   12366:	00c0      	lsls	r0, r0, #3
   12368:	63f8      	str	r0, [r7, #60]	; 0x3c
   1236a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1236c:	4318      	orrs	r0, r3
   1236e:	63f8      	str	r0, [r7, #60]	; 0x3c
   12370:	000b      	movs	r3, r1
   12372:	00db      	lsls	r3, r3, #3
   12374:	63bb      	str	r3, [r7, #56]	; 0x38
   12376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12378:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1237a:	001a      	movs	r2, r3
   1237c:	0023      	movs	r3, r4
   1237e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   12380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   12382:	4c16      	ldr	r4, [pc, #88]	; (123dc <_sercom_get_async_baud_val+0x1bc>)
   12384:	47a0      	blx	r4
   12386:	0003      	movs	r3, r0
   12388:	000c      	movs	r4, r1
   1238a:	65bb      	str	r3, [r7, #88]	; 0x58
   1238c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1238e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12390:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   12392:	b2d9      	uxtb	r1, r3
   12394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   12396:	b2db      	uxtb	r3, r3
   12398:	00db      	lsls	r3, r3, #3
   1239a:	b2da      	uxtb	r2, r3
   1239c:	2317      	movs	r3, #23
   1239e:	2040      	movs	r0, #64	; 0x40
   123a0:	4684      	mov	ip, r0
   123a2:	44bc      	add	ip, r7
   123a4:	4463      	add	r3, ip
   123a6:	1a8a      	subs	r2, r1, r2
   123a8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   123aa:	2317      	movs	r3, #23
   123ac:	2240      	movs	r2, #64	; 0x40
   123ae:	4694      	mov	ip, r2
   123b0:	44bc      	add	ip, r7
   123b2:	4463      	add	r3, ip
   123b4:	781b      	ldrb	r3, [r3, #0]
   123b6:	035b      	lsls	r3, r3, #13
   123b8:	001a      	movs	r2, r3
   123ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   123bc:	4313      	orrs	r3, r2
   123be:	67bb      	str	r3, [r7, #120]	; 0x78
   123c0:	2300      	movs	r3, #0
   123c2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   123c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   123c6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   123c8:	b29a      	uxth	r2, r3
   123ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   123cc:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   123ce:	2300      	movs	r3, #0
}
   123d0:	0018      	movs	r0, r3
   123d2:	46bd      	mov	sp, r7
   123d4:	b021      	add	sp, #132	; 0x84
   123d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123d8:	00016b01 	.word	0x00016b01
   123dc:	000120c3 	.word	0x000120c3

000123e0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   123e0:	b580      	push	{r7, lr}
   123e2:	b084      	sub	sp, #16
   123e4:	af00      	add	r7, sp, #0
   123e6:	0002      	movs	r2, r0
   123e8:	1dfb      	adds	r3, r7, #7
   123ea:	701a      	strb	r2, [r3, #0]
   123ec:	1dbb      	adds	r3, r7, #6
   123ee:	1c0a      	adds	r2, r1, #0
   123f0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   123f2:	4b1a      	ldr	r3, [pc, #104]	; (1245c <sercom_set_gclk_generator+0x7c>)
   123f4:	781b      	ldrb	r3, [r3, #0]
   123f6:	2201      	movs	r2, #1
   123f8:	4053      	eors	r3, r2
   123fa:	b2db      	uxtb	r3, r3
   123fc:	2b00      	cmp	r3, #0
   123fe:	d103      	bne.n	12408 <sercom_set_gclk_generator+0x28>
   12400:	1dbb      	adds	r3, r7, #6
   12402:	781b      	ldrb	r3, [r3, #0]
   12404:	2b00      	cmp	r3, #0
   12406:	d01b      	beq.n	12440 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12408:	230c      	movs	r3, #12
   1240a:	18fb      	adds	r3, r7, r3
   1240c:	0018      	movs	r0, r3
   1240e:	4b14      	ldr	r3, [pc, #80]	; (12460 <sercom_set_gclk_generator+0x80>)
   12410:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   12412:	230c      	movs	r3, #12
   12414:	18fb      	adds	r3, r7, r3
   12416:	1dfa      	adds	r2, r7, #7
   12418:	7812      	ldrb	r2, [r2, #0]
   1241a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   1241c:	230c      	movs	r3, #12
   1241e:	18fb      	adds	r3, r7, r3
   12420:	0019      	movs	r1, r3
   12422:	2013      	movs	r0, #19
   12424:	4b0f      	ldr	r3, [pc, #60]	; (12464 <sercom_set_gclk_generator+0x84>)
   12426:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   12428:	2013      	movs	r0, #19
   1242a:	4b0f      	ldr	r3, [pc, #60]	; (12468 <sercom_set_gclk_generator+0x88>)
   1242c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   1242e:	4b0b      	ldr	r3, [pc, #44]	; (1245c <sercom_set_gclk_generator+0x7c>)
   12430:	1dfa      	adds	r2, r7, #7
   12432:	7812      	ldrb	r2, [r2, #0]
   12434:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   12436:	4b09      	ldr	r3, [pc, #36]	; (1245c <sercom_set_gclk_generator+0x7c>)
   12438:	2201      	movs	r2, #1
   1243a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   1243c:	2300      	movs	r3, #0
   1243e:	e008      	b.n	12452 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   12440:	4b06      	ldr	r3, [pc, #24]	; (1245c <sercom_set_gclk_generator+0x7c>)
   12442:	785b      	ldrb	r3, [r3, #1]
   12444:	1dfa      	adds	r2, r7, #7
   12446:	7812      	ldrb	r2, [r2, #0]
   12448:	429a      	cmp	r2, r3
   1244a:	d101      	bne.n	12450 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   1244c:	2300      	movs	r3, #0
   1244e:	e000      	b.n	12452 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   12450:	231d      	movs	r3, #29
}
   12452:	0018      	movs	r0, r3
   12454:	46bd      	mov	sp, r7
   12456:	b004      	add	sp, #16
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	20000254 	.word	0x20000254
   12460:	000120ad 	.word	0x000120ad
   12464:	00015055 	.word	0x00015055
   12468:	00015099 	.word	0x00015099

0001246c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   1246c:	b580      	push	{r7, lr}
   1246e:	b082      	sub	sp, #8
   12470:	af00      	add	r7, sp, #0
   12472:	6078      	str	r0, [r7, #4]
   12474:	000a      	movs	r2, r1
   12476:	1cfb      	adds	r3, r7, #3
   12478:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1247a:	687b      	ldr	r3, [r7, #4]
   1247c:	4a4d      	ldr	r2, [pc, #308]	; (125b4 <_sercom_get_default_pad+0x148>)
   1247e:	4293      	cmp	r3, r2
   12480:	d03f      	beq.n	12502 <_sercom_get_default_pad+0x96>
   12482:	4a4c      	ldr	r2, [pc, #304]	; (125b4 <_sercom_get_default_pad+0x148>)
   12484:	4293      	cmp	r3, r2
   12486:	d806      	bhi.n	12496 <_sercom_get_default_pad+0x2a>
   12488:	4a4b      	ldr	r2, [pc, #300]	; (125b8 <_sercom_get_default_pad+0x14c>)
   1248a:	4293      	cmp	r3, r2
   1248c:	d00f      	beq.n	124ae <_sercom_get_default_pad+0x42>
   1248e:	4a4b      	ldr	r2, [pc, #300]	; (125bc <_sercom_get_default_pad+0x150>)
   12490:	4293      	cmp	r3, r2
   12492:	d021      	beq.n	124d8 <_sercom_get_default_pad+0x6c>
   12494:	e089      	b.n	125aa <_sercom_get_default_pad+0x13e>
   12496:	4a4a      	ldr	r2, [pc, #296]	; (125c0 <_sercom_get_default_pad+0x154>)
   12498:	4293      	cmp	r3, r2
   1249a:	d100      	bne.n	1249e <_sercom_get_default_pad+0x32>
   1249c:	e05b      	b.n	12556 <_sercom_get_default_pad+0xea>
   1249e:	4a49      	ldr	r2, [pc, #292]	; (125c4 <_sercom_get_default_pad+0x158>)
   124a0:	4293      	cmp	r3, r2
   124a2:	d100      	bne.n	124a6 <_sercom_get_default_pad+0x3a>
   124a4:	e06c      	b.n	12580 <_sercom_get_default_pad+0x114>
   124a6:	4a48      	ldr	r2, [pc, #288]	; (125c8 <_sercom_get_default_pad+0x15c>)
   124a8:	4293      	cmp	r3, r2
   124aa:	d03f      	beq.n	1252c <_sercom_get_default_pad+0xc0>
   124ac:	e07d      	b.n	125aa <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   124ae:	1cfb      	adds	r3, r7, #3
   124b0:	781b      	ldrb	r3, [r3, #0]
   124b2:	2b01      	cmp	r3, #1
   124b4:	d00a      	beq.n	124cc <_sercom_get_default_pad+0x60>
   124b6:	dc02      	bgt.n	124be <_sercom_get_default_pad+0x52>
   124b8:	2b00      	cmp	r3, #0
   124ba:	d005      	beq.n	124c8 <_sercom_get_default_pad+0x5c>
   124bc:	e075      	b.n	125aa <_sercom_get_default_pad+0x13e>
   124be:	2b02      	cmp	r3, #2
   124c0:	d006      	beq.n	124d0 <_sercom_get_default_pad+0x64>
   124c2:	2b03      	cmp	r3, #3
   124c4:	d006      	beq.n	124d4 <_sercom_get_default_pad+0x68>
   124c6:	e070      	b.n	125aa <_sercom_get_default_pad+0x13e>
   124c8:	4b40      	ldr	r3, [pc, #256]	; (125cc <_sercom_get_default_pad+0x160>)
   124ca:	e06f      	b.n	125ac <_sercom_get_default_pad+0x140>
   124cc:	4b40      	ldr	r3, [pc, #256]	; (125d0 <_sercom_get_default_pad+0x164>)
   124ce:	e06d      	b.n	125ac <_sercom_get_default_pad+0x140>
   124d0:	4b40      	ldr	r3, [pc, #256]	; (125d4 <_sercom_get_default_pad+0x168>)
   124d2:	e06b      	b.n	125ac <_sercom_get_default_pad+0x140>
   124d4:	4b40      	ldr	r3, [pc, #256]	; (125d8 <_sercom_get_default_pad+0x16c>)
   124d6:	e069      	b.n	125ac <_sercom_get_default_pad+0x140>
   124d8:	1cfb      	adds	r3, r7, #3
   124da:	781b      	ldrb	r3, [r3, #0]
   124dc:	2b01      	cmp	r3, #1
   124de:	d00a      	beq.n	124f6 <_sercom_get_default_pad+0x8a>
   124e0:	dc02      	bgt.n	124e8 <_sercom_get_default_pad+0x7c>
   124e2:	2b00      	cmp	r3, #0
   124e4:	d005      	beq.n	124f2 <_sercom_get_default_pad+0x86>
   124e6:	e060      	b.n	125aa <_sercom_get_default_pad+0x13e>
   124e8:	2b02      	cmp	r3, #2
   124ea:	d006      	beq.n	124fa <_sercom_get_default_pad+0x8e>
   124ec:	2b03      	cmp	r3, #3
   124ee:	d006      	beq.n	124fe <_sercom_get_default_pad+0x92>
   124f0:	e05b      	b.n	125aa <_sercom_get_default_pad+0x13e>
   124f2:	2303      	movs	r3, #3
   124f4:	e05a      	b.n	125ac <_sercom_get_default_pad+0x140>
   124f6:	4b39      	ldr	r3, [pc, #228]	; (125dc <_sercom_get_default_pad+0x170>)
   124f8:	e058      	b.n	125ac <_sercom_get_default_pad+0x140>
   124fa:	4b39      	ldr	r3, [pc, #228]	; (125e0 <_sercom_get_default_pad+0x174>)
   124fc:	e056      	b.n	125ac <_sercom_get_default_pad+0x140>
   124fe:	4b39      	ldr	r3, [pc, #228]	; (125e4 <_sercom_get_default_pad+0x178>)
   12500:	e054      	b.n	125ac <_sercom_get_default_pad+0x140>
   12502:	1cfb      	adds	r3, r7, #3
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b01      	cmp	r3, #1
   12508:	d00a      	beq.n	12520 <_sercom_get_default_pad+0xb4>
   1250a:	dc02      	bgt.n	12512 <_sercom_get_default_pad+0xa6>
   1250c:	2b00      	cmp	r3, #0
   1250e:	d005      	beq.n	1251c <_sercom_get_default_pad+0xb0>
   12510:	e04b      	b.n	125aa <_sercom_get_default_pad+0x13e>
   12512:	2b02      	cmp	r3, #2
   12514:	d006      	beq.n	12524 <_sercom_get_default_pad+0xb8>
   12516:	2b03      	cmp	r3, #3
   12518:	d006      	beq.n	12528 <_sercom_get_default_pad+0xbc>
   1251a:	e046      	b.n	125aa <_sercom_get_default_pad+0x13e>
   1251c:	4b32      	ldr	r3, [pc, #200]	; (125e8 <_sercom_get_default_pad+0x17c>)
   1251e:	e045      	b.n	125ac <_sercom_get_default_pad+0x140>
   12520:	4b32      	ldr	r3, [pc, #200]	; (125ec <_sercom_get_default_pad+0x180>)
   12522:	e043      	b.n	125ac <_sercom_get_default_pad+0x140>
   12524:	4b32      	ldr	r3, [pc, #200]	; (125f0 <_sercom_get_default_pad+0x184>)
   12526:	e041      	b.n	125ac <_sercom_get_default_pad+0x140>
   12528:	4b32      	ldr	r3, [pc, #200]	; (125f4 <_sercom_get_default_pad+0x188>)
   1252a:	e03f      	b.n	125ac <_sercom_get_default_pad+0x140>
   1252c:	1cfb      	adds	r3, r7, #3
   1252e:	781b      	ldrb	r3, [r3, #0]
   12530:	2b01      	cmp	r3, #1
   12532:	d00a      	beq.n	1254a <_sercom_get_default_pad+0xde>
   12534:	dc02      	bgt.n	1253c <_sercom_get_default_pad+0xd0>
   12536:	2b00      	cmp	r3, #0
   12538:	d005      	beq.n	12546 <_sercom_get_default_pad+0xda>
   1253a:	e036      	b.n	125aa <_sercom_get_default_pad+0x13e>
   1253c:	2b02      	cmp	r3, #2
   1253e:	d006      	beq.n	1254e <_sercom_get_default_pad+0xe2>
   12540:	2b03      	cmp	r3, #3
   12542:	d006      	beq.n	12552 <_sercom_get_default_pad+0xe6>
   12544:	e031      	b.n	125aa <_sercom_get_default_pad+0x13e>
   12546:	4b2c      	ldr	r3, [pc, #176]	; (125f8 <_sercom_get_default_pad+0x18c>)
   12548:	e030      	b.n	125ac <_sercom_get_default_pad+0x140>
   1254a:	4b2c      	ldr	r3, [pc, #176]	; (125fc <_sercom_get_default_pad+0x190>)
   1254c:	e02e      	b.n	125ac <_sercom_get_default_pad+0x140>
   1254e:	4b2c      	ldr	r3, [pc, #176]	; (12600 <_sercom_get_default_pad+0x194>)
   12550:	e02c      	b.n	125ac <_sercom_get_default_pad+0x140>
   12552:	4b2c      	ldr	r3, [pc, #176]	; (12604 <_sercom_get_default_pad+0x198>)
   12554:	e02a      	b.n	125ac <_sercom_get_default_pad+0x140>
   12556:	1cfb      	adds	r3, r7, #3
   12558:	781b      	ldrb	r3, [r3, #0]
   1255a:	2b01      	cmp	r3, #1
   1255c:	d00a      	beq.n	12574 <_sercom_get_default_pad+0x108>
   1255e:	dc02      	bgt.n	12566 <_sercom_get_default_pad+0xfa>
   12560:	2b00      	cmp	r3, #0
   12562:	d005      	beq.n	12570 <_sercom_get_default_pad+0x104>
   12564:	e021      	b.n	125aa <_sercom_get_default_pad+0x13e>
   12566:	2b02      	cmp	r3, #2
   12568:	d006      	beq.n	12578 <_sercom_get_default_pad+0x10c>
   1256a:	2b03      	cmp	r3, #3
   1256c:	d006      	beq.n	1257c <_sercom_get_default_pad+0x110>
   1256e:	e01c      	b.n	125aa <_sercom_get_default_pad+0x13e>
   12570:	4b25      	ldr	r3, [pc, #148]	; (12608 <_sercom_get_default_pad+0x19c>)
   12572:	e01b      	b.n	125ac <_sercom_get_default_pad+0x140>
   12574:	4b25      	ldr	r3, [pc, #148]	; (1260c <_sercom_get_default_pad+0x1a0>)
   12576:	e019      	b.n	125ac <_sercom_get_default_pad+0x140>
   12578:	4b25      	ldr	r3, [pc, #148]	; (12610 <_sercom_get_default_pad+0x1a4>)
   1257a:	e017      	b.n	125ac <_sercom_get_default_pad+0x140>
   1257c:	4b25      	ldr	r3, [pc, #148]	; (12614 <_sercom_get_default_pad+0x1a8>)
   1257e:	e015      	b.n	125ac <_sercom_get_default_pad+0x140>
   12580:	1cfb      	adds	r3, r7, #3
   12582:	781b      	ldrb	r3, [r3, #0]
   12584:	2b01      	cmp	r3, #1
   12586:	d00a      	beq.n	1259e <_sercom_get_default_pad+0x132>
   12588:	dc02      	bgt.n	12590 <_sercom_get_default_pad+0x124>
   1258a:	2b00      	cmp	r3, #0
   1258c:	d005      	beq.n	1259a <_sercom_get_default_pad+0x12e>
   1258e:	e00c      	b.n	125aa <_sercom_get_default_pad+0x13e>
   12590:	2b02      	cmp	r3, #2
   12592:	d006      	beq.n	125a2 <_sercom_get_default_pad+0x136>
   12594:	2b03      	cmp	r3, #3
   12596:	d006      	beq.n	125a6 <_sercom_get_default_pad+0x13a>
   12598:	e007      	b.n	125aa <_sercom_get_default_pad+0x13e>
   1259a:	4b1f      	ldr	r3, [pc, #124]	; (12618 <_sercom_get_default_pad+0x1ac>)
   1259c:	e006      	b.n	125ac <_sercom_get_default_pad+0x140>
   1259e:	4b1f      	ldr	r3, [pc, #124]	; (1261c <_sercom_get_default_pad+0x1b0>)
   125a0:	e004      	b.n	125ac <_sercom_get_default_pad+0x140>
   125a2:	4b1f      	ldr	r3, [pc, #124]	; (12620 <_sercom_get_default_pad+0x1b4>)
   125a4:	e002      	b.n	125ac <_sercom_get_default_pad+0x140>
   125a6:	4b1f      	ldr	r3, [pc, #124]	; (12624 <_sercom_get_default_pad+0x1b8>)
   125a8:	e000      	b.n	125ac <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   125aa:	2300      	movs	r3, #0
}
   125ac:	0018      	movs	r0, r3
   125ae:	46bd      	mov	sp, r7
   125b0:	b002      	add	sp, #8
   125b2:	bd80      	pop	{r7, pc}
   125b4:	42001000 	.word	0x42001000
   125b8:	42000800 	.word	0x42000800
   125bc:	42000c00 	.word	0x42000c00
   125c0:	42001800 	.word	0x42001800
   125c4:	42001c00 	.word	0x42001c00
   125c8:	42001400 	.word	0x42001400
   125cc:	00040003 	.word	0x00040003
   125d0:	00050003 	.word	0x00050003
   125d4:	00060003 	.word	0x00060003
   125d8:	00070003 	.word	0x00070003
   125dc:	00010003 	.word	0x00010003
   125e0:	001e0003 	.word	0x001e0003
   125e4:	001f0003 	.word	0x001f0003
   125e8:	00080003 	.word	0x00080003
   125ec:	00090003 	.word	0x00090003
   125f0:	000a0003 	.word	0x000a0003
   125f4:	000b0003 	.word	0x000b0003
   125f8:	00100003 	.word	0x00100003
   125fc:	00110003 	.word	0x00110003
   12600:	00120003 	.word	0x00120003
   12604:	00130003 	.word	0x00130003
   12608:	000c0003 	.word	0x000c0003
   1260c:	000d0003 	.word	0x000d0003
   12610:	000e0003 	.word	0x000e0003
   12614:	000f0003 	.word	0x000f0003
   12618:	00160003 	.word	0x00160003
   1261c:	00170003 	.word	0x00170003
   12620:	00180003 	.word	0x00180003
   12624:	00190003 	.word	0x00190003

00012628 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   12628:	b590      	push	{r4, r7, lr}
   1262a:	b08b      	sub	sp, #44	; 0x2c
   1262c:	af00      	add	r7, sp, #0
   1262e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   12630:	230c      	movs	r3, #12
   12632:	18fb      	adds	r3, r7, r3
   12634:	4a0f      	ldr	r2, [pc, #60]	; (12674 <_sercom_get_sercom_inst_index+0x4c>)
   12636:	ca13      	ldmia	r2!, {r0, r1, r4}
   12638:	c313      	stmia	r3!, {r0, r1, r4}
   1263a:	ca13      	ldmia	r2!, {r0, r1, r4}
   1263c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1263e:	2300      	movs	r3, #0
   12640:	627b      	str	r3, [r7, #36]	; 0x24
   12642:	e00e      	b.n	12662 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   12644:	230c      	movs	r3, #12
   12646:	18fb      	adds	r3, r7, r3
   12648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1264a:	0092      	lsls	r2, r2, #2
   1264c:	58d3      	ldr	r3, [r2, r3]
   1264e:	001a      	movs	r2, r3
   12650:	687b      	ldr	r3, [r7, #4]
   12652:	429a      	cmp	r2, r3
   12654:	d102      	bne.n	1265c <_sercom_get_sercom_inst_index+0x34>
			return i;
   12656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12658:	b2db      	uxtb	r3, r3
   1265a:	e006      	b.n	1266a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   1265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1265e:	3301      	adds	r3, #1
   12660:	627b      	str	r3, [r7, #36]	; 0x24
   12662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12664:	2b05      	cmp	r3, #5
   12666:	d9ed      	bls.n	12644 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   12668:	2300      	movs	r3, #0
}
   1266a:	0018      	movs	r0, r3
   1266c:	46bd      	mov	sp, r7
   1266e:	b00b      	add	sp, #44	; 0x2c
   12670:	bd90      	pop	{r4, r7, pc}
   12672:	46c0      	nop			; (mov r8, r8)
   12674:	000196f4 	.word	0x000196f4

00012678 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   12678:	b580      	push	{r7, lr}
   1267a:	b082      	sub	sp, #8
   1267c:	af00      	add	r7, sp, #0
   1267e:	0002      	movs	r2, r0
   12680:	1dfb      	adds	r3, r7, #7
   12682:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   12684:	46c0      	nop			; (mov r8, r8)
   12686:	46bd      	mov	sp, r7
   12688:	b002      	add	sp, #8
   1268a:	bd80      	pop	{r7, pc}

0001268c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   1268c:	b580      	push	{r7, lr}
   1268e:	b084      	sub	sp, #16
   12690:	af00      	add	r7, sp, #0
   12692:	0002      	movs	r2, r0
   12694:	6039      	str	r1, [r7, #0]
   12696:	1dfb      	adds	r3, r7, #7
   12698:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1269a:	4b13      	ldr	r3, [pc, #76]	; (126e8 <_sercom_set_handler+0x5c>)
   1269c:	781b      	ldrb	r3, [r3, #0]
   1269e:	2201      	movs	r2, #1
   126a0:	4053      	eors	r3, r2
   126a2:	b2db      	uxtb	r3, r3
   126a4:	2b00      	cmp	r3, #0
   126a6:	d015      	beq.n	126d4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   126a8:	2300      	movs	r3, #0
   126aa:	60fb      	str	r3, [r7, #12]
   126ac:	e00c      	b.n	126c8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   126ae:	4b0f      	ldr	r3, [pc, #60]	; (126ec <_sercom_set_handler+0x60>)
   126b0:	68fa      	ldr	r2, [r7, #12]
   126b2:	0092      	lsls	r2, r2, #2
   126b4:	490e      	ldr	r1, [pc, #56]	; (126f0 <_sercom_set_handler+0x64>)
   126b6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   126b8:	4b0e      	ldr	r3, [pc, #56]	; (126f4 <_sercom_set_handler+0x68>)
   126ba:	68fa      	ldr	r2, [r7, #12]
   126bc:	0092      	lsls	r2, r2, #2
   126be:	2100      	movs	r1, #0
   126c0:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   126c2:	68fb      	ldr	r3, [r7, #12]
   126c4:	3301      	adds	r3, #1
   126c6:	60fb      	str	r3, [r7, #12]
   126c8:	68fb      	ldr	r3, [r7, #12]
   126ca:	2b05      	cmp	r3, #5
   126cc:	d9ef      	bls.n	126ae <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   126ce:	4b06      	ldr	r3, [pc, #24]	; (126e8 <_sercom_set_handler+0x5c>)
   126d0:	2201      	movs	r2, #1
   126d2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   126d4:	1dfb      	adds	r3, r7, #7
   126d6:	781a      	ldrb	r2, [r3, #0]
   126d8:	4b04      	ldr	r3, [pc, #16]	; (126ec <_sercom_set_handler+0x60>)
   126da:	0092      	lsls	r2, r2, #2
   126dc:	6839      	ldr	r1, [r7, #0]
   126de:	50d1      	str	r1, [r2, r3]
}
   126e0:	46c0      	nop			; (mov r8, r8)
   126e2:	46bd      	mov	sp, r7
   126e4:	b004      	add	sp, #16
   126e6:	bd80      	pop	{r7, pc}
   126e8:	20000256 	.word	0x20000256
   126ec:	20000258 	.word	0x20000258
   126f0:	00012679 	.word	0x00012679
   126f4:	2000041c 	.word	0x2000041c

000126f8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   126f8:	b590      	push	{r4, r7, lr}
   126fa:	b085      	sub	sp, #20
   126fc:	af00      	add	r7, sp, #0
   126fe:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   12700:	2308      	movs	r3, #8
   12702:	18fa      	adds	r2, r7, r3
   12704:	4b0c      	ldr	r3, [pc, #48]	; (12738 <_sercom_get_interrupt_vector+0x40>)
   12706:	0010      	movs	r0, r2
   12708:	0019      	movs	r1, r3
   1270a:	2306      	movs	r3, #6
   1270c:	001a      	movs	r2, r3
   1270e:	4b0b      	ldr	r3, [pc, #44]	; (1273c <_sercom_get_interrupt_vector+0x44>)
   12710:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   12712:	230f      	movs	r3, #15
   12714:	18fc      	adds	r4, r7, r3
   12716:	687b      	ldr	r3, [r7, #4]
   12718:	0018      	movs	r0, r3
   1271a:	4b09      	ldr	r3, [pc, #36]	; (12740 <_sercom_get_interrupt_vector+0x48>)
   1271c:	4798      	blx	r3
   1271e:	0003      	movs	r3, r0
   12720:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   12722:	230f      	movs	r3, #15
   12724:	18fb      	adds	r3, r7, r3
   12726:	781b      	ldrb	r3, [r3, #0]
   12728:	2208      	movs	r2, #8
   1272a:	18ba      	adds	r2, r7, r2
   1272c:	5cd3      	ldrb	r3, [r2, r3]
   1272e:	b25b      	sxtb	r3, r3
}
   12730:	0018      	movs	r0, r3
   12732:	46bd      	mov	sp, r7
   12734:	b005      	add	sp, #20
   12736:	bd90      	pop	{r4, r7, pc}
   12738:	0001970c 	.word	0x0001970c
   1273c:	00016bd1 	.word	0x00016bd1
   12740:	00012629 	.word	0x00012629

00012744 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   12744:	b580      	push	{r7, lr}
   12746:	af00      	add	r7, sp, #0
   12748:	4b03      	ldr	r3, [pc, #12]	; (12758 <SERCOM0_Handler+0x14>)
   1274a:	681b      	ldr	r3, [r3, #0]
   1274c:	2000      	movs	r0, #0
   1274e:	4798      	blx	r3
   12750:	46c0      	nop			; (mov r8, r8)
   12752:	46bd      	mov	sp, r7
   12754:	bd80      	pop	{r7, pc}
   12756:	46c0      	nop			; (mov r8, r8)
   12758:	20000258 	.word	0x20000258

0001275c <SERCOM1_Handler>:
   1275c:	b580      	push	{r7, lr}
   1275e:	af00      	add	r7, sp, #0
   12760:	4b03      	ldr	r3, [pc, #12]	; (12770 <SERCOM1_Handler+0x14>)
   12762:	685b      	ldr	r3, [r3, #4]
   12764:	2001      	movs	r0, #1
   12766:	4798      	blx	r3
   12768:	46c0      	nop			; (mov r8, r8)
   1276a:	46bd      	mov	sp, r7
   1276c:	bd80      	pop	{r7, pc}
   1276e:	46c0      	nop			; (mov r8, r8)
   12770:	20000258 	.word	0x20000258

00012774 <SERCOM2_Handler>:
   12774:	b580      	push	{r7, lr}
   12776:	af00      	add	r7, sp, #0
   12778:	4b03      	ldr	r3, [pc, #12]	; (12788 <SERCOM2_Handler+0x14>)
   1277a:	689b      	ldr	r3, [r3, #8]
   1277c:	2002      	movs	r0, #2
   1277e:	4798      	blx	r3
   12780:	46c0      	nop			; (mov r8, r8)
   12782:	46bd      	mov	sp, r7
   12784:	bd80      	pop	{r7, pc}
   12786:	46c0      	nop			; (mov r8, r8)
   12788:	20000258 	.word	0x20000258

0001278c <SERCOM3_Handler>:
   1278c:	b580      	push	{r7, lr}
   1278e:	af00      	add	r7, sp, #0
   12790:	4b03      	ldr	r3, [pc, #12]	; (127a0 <SERCOM3_Handler+0x14>)
   12792:	68db      	ldr	r3, [r3, #12]
   12794:	2003      	movs	r0, #3
   12796:	4798      	blx	r3
   12798:	46c0      	nop			; (mov r8, r8)
   1279a:	46bd      	mov	sp, r7
   1279c:	bd80      	pop	{r7, pc}
   1279e:	46c0      	nop			; (mov r8, r8)
   127a0:	20000258 	.word	0x20000258

000127a4 <SERCOM4_Handler>:
   127a4:	b580      	push	{r7, lr}
   127a6:	af00      	add	r7, sp, #0
   127a8:	4b03      	ldr	r3, [pc, #12]	; (127b8 <SERCOM4_Handler+0x14>)
   127aa:	691b      	ldr	r3, [r3, #16]
   127ac:	2004      	movs	r0, #4
   127ae:	4798      	blx	r3
   127b0:	46c0      	nop			; (mov r8, r8)
   127b2:	46bd      	mov	sp, r7
   127b4:	bd80      	pop	{r7, pc}
   127b6:	46c0      	nop			; (mov r8, r8)
   127b8:	20000258 	.word	0x20000258

000127bc <SERCOM5_Handler>:
   127bc:	b580      	push	{r7, lr}
   127be:	af00      	add	r7, sp, #0
   127c0:	4b03      	ldr	r3, [pc, #12]	; (127d0 <SERCOM5_Handler+0x14>)
   127c2:	695b      	ldr	r3, [r3, #20]
   127c4:	2005      	movs	r0, #5
   127c6:	4798      	blx	r3
   127c8:	46c0      	nop			; (mov r8, r8)
   127ca:	46bd      	mov	sp, r7
   127cc:	bd80      	pop	{r7, pc}
   127ce:	46c0      	nop			; (mov r8, r8)
   127d0:	20000258 	.word	0x20000258

000127d4 <system_pinmux_get_config_defaults>:
{
   127d4:	b580      	push	{r7, lr}
   127d6:	b082      	sub	sp, #8
   127d8:	af00      	add	r7, sp, #0
   127da:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   127dc:	687b      	ldr	r3, [r7, #4]
   127de:	2280      	movs	r2, #128	; 0x80
   127e0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   127e2:	687b      	ldr	r3, [r7, #4]
   127e4:	2200      	movs	r2, #0
   127e6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   127e8:	687b      	ldr	r3, [r7, #4]
   127ea:	2201      	movs	r2, #1
   127ec:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   127ee:	687b      	ldr	r3, [r7, #4]
   127f0:	2200      	movs	r2, #0
   127f2:	70da      	strb	r2, [r3, #3]
}
   127f4:	46c0      	nop			; (mov r8, r8)
   127f6:	46bd      	mov	sp, r7
   127f8:	b002      	add	sp, #8
   127fa:	bd80      	pop	{r7, pc}

000127fc <system_pinmux_get_group_from_gpio_pin>:
{
   127fc:	b580      	push	{r7, lr}
   127fe:	b084      	sub	sp, #16
   12800:	af00      	add	r7, sp, #0
   12802:	0002      	movs	r2, r0
   12804:	1dfb      	adds	r3, r7, #7
   12806:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   12808:	230f      	movs	r3, #15
   1280a:	18fb      	adds	r3, r7, r3
   1280c:	1dfa      	adds	r2, r7, #7
   1280e:	7812      	ldrb	r2, [r2, #0]
   12810:	09d2      	lsrs	r2, r2, #7
   12812:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   12814:	230e      	movs	r3, #14
   12816:	18fb      	adds	r3, r7, r3
   12818:	1dfa      	adds	r2, r7, #7
   1281a:	7812      	ldrb	r2, [r2, #0]
   1281c:	0952      	lsrs	r2, r2, #5
   1281e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   12820:	4b0d      	ldr	r3, [pc, #52]	; (12858 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   12822:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   12824:	230f      	movs	r3, #15
   12826:	18fb      	adds	r3, r7, r3
   12828:	781b      	ldrb	r3, [r3, #0]
   1282a:	2b00      	cmp	r3, #0
   1282c:	d10f      	bne.n	1284e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1282e:	230f      	movs	r3, #15
   12830:	18fb      	adds	r3, r7, r3
   12832:	781b      	ldrb	r3, [r3, #0]
   12834:	009b      	lsls	r3, r3, #2
   12836:	2210      	movs	r2, #16
   12838:	4694      	mov	ip, r2
   1283a:	44bc      	add	ip, r7
   1283c:	4463      	add	r3, ip
   1283e:	3b08      	subs	r3, #8
   12840:	681a      	ldr	r2, [r3, #0]
   12842:	230e      	movs	r3, #14
   12844:	18fb      	adds	r3, r7, r3
   12846:	781b      	ldrb	r3, [r3, #0]
   12848:	01db      	lsls	r3, r3, #7
   1284a:	18d3      	adds	r3, r2, r3
   1284c:	e000      	b.n	12850 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1284e:	2300      	movs	r3, #0
}
   12850:	0018      	movs	r0, r3
   12852:	46bd      	mov	sp, r7
   12854:	b004      	add	sp, #16
   12856:	bd80      	pop	{r7, pc}
   12858:	41004400 	.word	0x41004400

0001285c <port_get_group_from_gpio_pin>:
{
   1285c:	b580      	push	{r7, lr}
   1285e:	b082      	sub	sp, #8
   12860:	af00      	add	r7, sp, #0
   12862:	0002      	movs	r2, r0
   12864:	1dfb      	adds	r3, r7, #7
   12866:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   12868:	1dfb      	adds	r3, r7, #7
   1286a:	781b      	ldrb	r3, [r3, #0]
   1286c:	0018      	movs	r0, r3
   1286e:	4b03      	ldr	r3, [pc, #12]	; (1287c <port_get_group_from_gpio_pin+0x20>)
   12870:	4798      	blx	r3
   12872:	0003      	movs	r3, r0
}
   12874:	0018      	movs	r0, r3
   12876:	46bd      	mov	sp, r7
   12878:	b002      	add	sp, #8
   1287a:	bd80      	pop	{r7, pc}
   1287c:	000127fd 	.word	0x000127fd

00012880 <port_pin_set_output_level>:
{
   12880:	b580      	push	{r7, lr}
   12882:	b084      	sub	sp, #16
   12884:	af00      	add	r7, sp, #0
   12886:	0002      	movs	r2, r0
   12888:	1dfb      	adds	r3, r7, #7
   1288a:	701a      	strb	r2, [r3, #0]
   1288c:	1dbb      	adds	r3, r7, #6
   1288e:	1c0a      	adds	r2, r1, #0
   12890:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   12892:	1dfb      	adds	r3, r7, #7
   12894:	781b      	ldrb	r3, [r3, #0]
   12896:	0018      	movs	r0, r3
   12898:	4b0d      	ldr	r3, [pc, #52]	; (128d0 <port_pin_set_output_level+0x50>)
   1289a:	4798      	blx	r3
   1289c:	0003      	movs	r3, r0
   1289e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   128a0:	1dfb      	adds	r3, r7, #7
   128a2:	781b      	ldrb	r3, [r3, #0]
   128a4:	221f      	movs	r2, #31
   128a6:	4013      	ands	r3, r2
   128a8:	2201      	movs	r2, #1
   128aa:	409a      	lsls	r2, r3
   128ac:	0013      	movs	r3, r2
   128ae:	60bb      	str	r3, [r7, #8]
	if (level) {
   128b0:	1dbb      	adds	r3, r7, #6
   128b2:	781b      	ldrb	r3, [r3, #0]
   128b4:	2b00      	cmp	r3, #0
   128b6:	d003      	beq.n	128c0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   128b8:	68fb      	ldr	r3, [r7, #12]
   128ba:	68ba      	ldr	r2, [r7, #8]
   128bc:	619a      	str	r2, [r3, #24]
}
   128be:	e002      	b.n	128c6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   128c0:	68fb      	ldr	r3, [r7, #12]
   128c2:	68ba      	ldr	r2, [r7, #8]
   128c4:	615a      	str	r2, [r3, #20]
}
   128c6:	46c0      	nop			; (mov r8, r8)
   128c8:	46bd      	mov	sp, r7
   128ca:	b004      	add	sp, #16
   128cc:	bd80      	pop	{r7, pc}
   128ce:	46c0      	nop			; (mov r8, r8)
   128d0:	0001285d 	.word	0x0001285d

000128d4 <system_gclk_chan_get_config_defaults>:
{
   128d4:	b580      	push	{r7, lr}
   128d6:	b082      	sub	sp, #8
   128d8:	af00      	add	r7, sp, #0
   128da:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   128dc:	687b      	ldr	r3, [r7, #4]
   128de:	2200      	movs	r2, #0
   128e0:	701a      	strb	r2, [r3, #0]
}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	46bd      	mov	sp, r7
   128e6:	b002      	add	sp, #8
   128e8:	bd80      	pop	{r7, pc}
	...

000128ec <system_apb_clock_set_mask>:
{
   128ec:	b580      	push	{r7, lr}
   128ee:	b082      	sub	sp, #8
   128f0:	af00      	add	r7, sp, #0
   128f2:	0002      	movs	r2, r0
   128f4:	6039      	str	r1, [r7, #0]
   128f6:	1dfb      	adds	r3, r7, #7
   128f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   128fa:	1dfb      	adds	r3, r7, #7
   128fc:	781b      	ldrb	r3, [r3, #0]
   128fe:	2b01      	cmp	r3, #1
   12900:	d00a      	beq.n	12918 <system_apb_clock_set_mask+0x2c>
   12902:	2b02      	cmp	r3, #2
   12904:	d00f      	beq.n	12926 <system_apb_clock_set_mask+0x3a>
   12906:	2b00      	cmp	r3, #0
   12908:	d114      	bne.n	12934 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1290a:	4b0e      	ldr	r3, [pc, #56]	; (12944 <system_apb_clock_set_mask+0x58>)
   1290c:	4a0d      	ldr	r2, [pc, #52]	; (12944 <system_apb_clock_set_mask+0x58>)
   1290e:	6991      	ldr	r1, [r2, #24]
   12910:	683a      	ldr	r2, [r7, #0]
   12912:	430a      	orrs	r2, r1
   12914:	619a      	str	r2, [r3, #24]
			break;
   12916:	e00f      	b.n	12938 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   12918:	4b0a      	ldr	r3, [pc, #40]	; (12944 <system_apb_clock_set_mask+0x58>)
   1291a:	4a0a      	ldr	r2, [pc, #40]	; (12944 <system_apb_clock_set_mask+0x58>)
   1291c:	69d1      	ldr	r1, [r2, #28]
   1291e:	683a      	ldr	r2, [r7, #0]
   12920:	430a      	orrs	r2, r1
   12922:	61da      	str	r2, [r3, #28]
			break;
   12924:	e008      	b.n	12938 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   12926:	4b07      	ldr	r3, [pc, #28]	; (12944 <system_apb_clock_set_mask+0x58>)
   12928:	4a06      	ldr	r2, [pc, #24]	; (12944 <system_apb_clock_set_mask+0x58>)
   1292a:	6a11      	ldr	r1, [r2, #32]
   1292c:	683a      	ldr	r2, [r7, #0]
   1292e:	430a      	orrs	r2, r1
   12930:	621a      	str	r2, [r3, #32]
			break;
   12932:	e001      	b.n	12938 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   12934:	2317      	movs	r3, #23
   12936:	e000      	b.n	1293a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   12938:	2300      	movs	r3, #0
}
   1293a:	0018      	movs	r0, r3
   1293c:	46bd      	mov	sp, r7
   1293e:	b002      	add	sp, #8
   12940:	bd80      	pop	{r7, pc}
   12942:	46c0      	nop			; (mov r8, r8)
   12944:	40000400 	.word	0x40000400

00012948 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   12948:	b580      	push	{r7, lr}
   1294a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   1294c:	4b05      	ldr	r3, [pc, #20]	; (12964 <system_is_debugger_present+0x1c>)
   1294e:	789b      	ldrb	r3, [r3, #2]
   12950:	b2db      	uxtb	r3, r3
   12952:	001a      	movs	r2, r3
   12954:	2302      	movs	r3, #2
   12956:	4013      	ands	r3, r2
   12958:	1e5a      	subs	r2, r3, #1
   1295a:	4193      	sbcs	r3, r2
   1295c:	b2db      	uxtb	r3, r3
}
   1295e:	0018      	movs	r0, r3
   12960:	46bd      	mov	sp, r7
   12962:	bd80      	pop	{r7, pc}
   12964:	41002000 	.word	0x41002000

00012968 <spi_is_write_complete>:
{
   12968:	b580      	push	{r7, lr}
   1296a:	b084      	sub	sp, #16
   1296c:	af00      	add	r7, sp, #0
   1296e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	681b      	ldr	r3, [r3, #0]
   12974:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   12976:	68fb      	ldr	r3, [r7, #12]
   12978:	7e1b      	ldrb	r3, [r3, #24]
   1297a:	b2db      	uxtb	r3, r3
   1297c:	001a      	movs	r2, r3
   1297e:	2302      	movs	r3, #2
   12980:	4013      	ands	r3, r2
   12982:	1e5a      	subs	r2, r3, #1
   12984:	4193      	sbcs	r3, r2
   12986:	b2db      	uxtb	r3, r3
}
   12988:	0018      	movs	r0, r3
   1298a:	46bd      	mov	sp, r7
   1298c:	b004      	add	sp, #16
   1298e:	bd80      	pop	{r7, pc}

00012990 <spi_is_ready_to_write>:
{
   12990:	b580      	push	{r7, lr}
   12992:	b084      	sub	sp, #16
   12994:	af00      	add	r7, sp, #0
   12996:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   12998:	687b      	ldr	r3, [r7, #4]
   1299a:	681b      	ldr	r3, [r3, #0]
   1299c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1299e:	68fb      	ldr	r3, [r7, #12]
   129a0:	7e1b      	ldrb	r3, [r3, #24]
   129a2:	b2db      	uxtb	r3, r3
   129a4:	001a      	movs	r2, r3
   129a6:	2301      	movs	r3, #1
   129a8:	4013      	ands	r3, r2
   129aa:	1e5a      	subs	r2, r3, #1
   129ac:	4193      	sbcs	r3, r2
   129ae:	b2db      	uxtb	r3, r3
}
   129b0:	0018      	movs	r0, r3
   129b2:	46bd      	mov	sp, r7
   129b4:	b004      	add	sp, #16
   129b6:	bd80      	pop	{r7, pc}

000129b8 <spi_is_ready_to_read>:
{
   129b8:	b580      	push	{r7, lr}
   129ba:	b084      	sub	sp, #16
   129bc:	af00      	add	r7, sp, #0
   129be:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   129c0:	687b      	ldr	r3, [r7, #4]
   129c2:	681b      	ldr	r3, [r3, #0]
   129c4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   129c6:	68fb      	ldr	r3, [r7, #12]
   129c8:	7e1b      	ldrb	r3, [r3, #24]
   129ca:	b2db      	uxtb	r3, r3
   129cc:	001a      	movs	r2, r3
   129ce:	2304      	movs	r3, #4
   129d0:	4013      	ands	r3, r2
   129d2:	1e5a      	subs	r2, r3, #1
   129d4:	4193      	sbcs	r3, r2
   129d6:	b2db      	uxtb	r3, r3
}
   129d8:	0018      	movs	r0, r3
   129da:	46bd      	mov	sp, r7
   129dc:	b004      	add	sp, #16
   129de:	bd80      	pop	{r7, pc}

000129e0 <spi_write>:
{
   129e0:	b580      	push	{r7, lr}
   129e2:	b084      	sub	sp, #16
   129e4:	af00      	add	r7, sp, #0
   129e6:	6078      	str	r0, [r7, #4]
   129e8:	000a      	movs	r2, r1
   129ea:	1cbb      	adds	r3, r7, #2
   129ec:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   129ee:	687b      	ldr	r3, [r7, #4]
   129f0:	681b      	ldr	r3, [r3, #0]
   129f2:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   129f4:	687b      	ldr	r3, [r7, #4]
   129f6:	0018      	movs	r0, r3
   129f8:	4b0a      	ldr	r3, [pc, #40]	; (12a24 <spi_write+0x44>)
   129fa:	4798      	blx	r3
   129fc:	0003      	movs	r3, r0
   129fe:	001a      	movs	r2, r3
   12a00:	2301      	movs	r3, #1
   12a02:	4053      	eors	r3, r2
   12a04:	b2db      	uxtb	r3, r3
   12a06:	2b00      	cmp	r3, #0
   12a08:	d001      	beq.n	12a0e <spi_write+0x2e>
		return STATUS_BUSY;
   12a0a:	2305      	movs	r3, #5
   12a0c:	e006      	b.n	12a1c <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   12a0e:	1cbb      	adds	r3, r7, #2
   12a10:	881b      	ldrh	r3, [r3, #0]
   12a12:	05db      	lsls	r3, r3, #23
   12a14:	0dda      	lsrs	r2, r3, #23
   12a16:	68fb      	ldr	r3, [r7, #12]
   12a18:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   12a1a:	2300      	movs	r3, #0
}
   12a1c:	0018      	movs	r0, r3
   12a1e:	46bd      	mov	sp, r7
   12a20:	b004      	add	sp, #16
   12a22:	bd80      	pop	{r7, pc}
   12a24:	00012991 	.word	0x00012991

00012a28 <spi_read>:
{
   12a28:	b580      	push	{r7, lr}
   12a2a:	b084      	sub	sp, #16
   12a2c:	af00      	add	r7, sp, #0
   12a2e:	6078      	str	r0, [r7, #4]
   12a30:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   12a32:	687b      	ldr	r3, [r7, #4]
   12a34:	681b      	ldr	r3, [r3, #0]
   12a36:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   12a38:	687b      	ldr	r3, [r7, #4]
   12a3a:	0018      	movs	r0, r3
   12a3c:	4b1b      	ldr	r3, [pc, #108]	; (12aac <spi_read+0x84>)
   12a3e:	4798      	blx	r3
   12a40:	0003      	movs	r3, r0
   12a42:	001a      	movs	r2, r3
   12a44:	2301      	movs	r3, #1
   12a46:	4053      	eors	r3, r2
   12a48:	b2db      	uxtb	r3, r3
   12a4a:	2b00      	cmp	r3, #0
   12a4c:	d001      	beq.n	12a52 <spi_read+0x2a>
		return STATUS_ERR_IO;
   12a4e:	2310      	movs	r3, #16
   12a50:	e027      	b.n	12aa2 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   12a52:	230f      	movs	r3, #15
   12a54:	18fb      	adds	r3, r7, r3
   12a56:	2200      	movs	r2, #0
   12a58:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   12a5a:	68bb      	ldr	r3, [r7, #8]
   12a5c:	8b5b      	ldrh	r3, [r3, #26]
   12a5e:	b29b      	uxth	r3, r3
   12a60:	001a      	movs	r2, r3
   12a62:	2304      	movs	r3, #4
   12a64:	4013      	ands	r3, r2
   12a66:	d006      	beq.n	12a76 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   12a68:	230f      	movs	r3, #15
   12a6a:	18fb      	adds	r3, r7, r3
   12a6c:	221e      	movs	r2, #30
   12a6e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   12a70:	68bb      	ldr	r3, [r7, #8]
   12a72:	2204      	movs	r2, #4
   12a74:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   12a76:	687b      	ldr	r3, [r7, #4]
   12a78:	799b      	ldrb	r3, [r3, #6]
   12a7a:	2b01      	cmp	r3, #1
   12a7c:	d108      	bne.n	12a90 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   12a7e:	68bb      	ldr	r3, [r7, #8]
   12a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a82:	b29b      	uxth	r3, r3
   12a84:	05db      	lsls	r3, r3, #23
   12a86:	0ddb      	lsrs	r3, r3, #23
   12a88:	b29a      	uxth	r2, r3
   12a8a:	683b      	ldr	r3, [r7, #0]
   12a8c:	801a      	strh	r2, [r3, #0]
   12a8e:	e005      	b.n	12a9c <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   12a90:	68bb      	ldr	r3, [r7, #8]
   12a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a94:	b2db      	uxtb	r3, r3
   12a96:	b29a      	uxth	r2, r3
   12a98:	683b      	ldr	r3, [r7, #0]
   12a9a:	801a      	strh	r2, [r3, #0]
	return retval;
   12a9c:	230f      	movs	r3, #15
   12a9e:	18fb      	adds	r3, r7, r3
   12aa0:	781b      	ldrb	r3, [r3, #0]
}
   12aa2:	0018      	movs	r0, r3
   12aa4:	46bd      	mov	sp, r7
   12aa6:	b004      	add	sp, #16
   12aa8:	bd80      	pop	{r7, pc}
   12aaa:	46c0      	nop			; (mov r8, r8)
   12aac:	000129b9 	.word	0x000129b9

00012ab0 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
   12ab0:	b580      	push	{r7, lr}
   12ab2:	b084      	sub	sp, #16
   12ab4:	af00      	add	r7, sp, #0
   12ab6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12ab8:	687b      	ldr	r3, [r7, #4]
   12aba:	681b      	ldr	r3, [r3, #0]
   12abc:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   12abe:	68fb      	ldr	r3, [r7, #12]
   12ac0:	2202      	movs	r2, #2
   12ac2:	761a      	strb	r2, [r3, #24]
}
   12ac4:	46c0      	nop			; (mov r8, r8)
   12ac6:	46bd      	mov	sp, r7
   12ac8:	b004      	add	sp, #16
   12aca:	bd80      	pop	{r7, pc}

00012acc <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   12acc:	b590      	push	{r4, r7, lr}
   12ace:	b093      	sub	sp, #76	; 0x4c
   12ad0:	af00      	add	r7, sp, #0
   12ad2:	6078      	str	r0, [r7, #4]
   12ad4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12ad6:	687b      	ldr	r3, [r7, #4]
   12ad8:	681b      	ldr	r3, [r3, #0]
   12ada:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   12adc:	687b      	ldr	r3, [r7, #4]
   12ade:	681b      	ldr	r3, [r3, #0]
   12ae0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   12ae2:	231c      	movs	r3, #28
   12ae4:	18fb      	adds	r3, r7, r3
   12ae6:	0018      	movs	r0, r3
   12ae8:	4b85      	ldr	r3, [pc, #532]	; (12d00 <_spi_set_config+0x234>)
   12aea:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12aec:	231c      	movs	r3, #28
   12aee:	18fb      	adds	r3, r7, r3
   12af0:	2200      	movs	r2, #0
   12af2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   12af4:	683b      	ldr	r3, [r7, #0]
   12af6:	781b      	ldrb	r3, [r3, #0]
   12af8:	2b00      	cmp	r3, #0
   12afa:	d103      	bne.n	12b04 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   12afc:	231c      	movs	r3, #28
   12afe:	18fb      	adds	r3, r7, r3
   12b00:	2200      	movs	r2, #0
   12b02:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   12b04:	683b      	ldr	r3, [r7, #0]
   12b06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   12b08:	230c      	movs	r3, #12
   12b0a:	18fb      	adds	r3, r7, r3
   12b0c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   12b0e:	683b      	ldr	r3, [r7, #0]
   12b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   12b12:	230c      	movs	r3, #12
   12b14:	18fb      	adds	r3, r7, r3
   12b16:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   12b18:	683b      	ldr	r3, [r7, #0]
   12b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   12b1c:	230c      	movs	r3, #12
   12b1e:	18fb      	adds	r3, r7, r3
   12b20:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   12b26:	230c      	movs	r3, #12
   12b28:	18fb      	adds	r3, r7, r3
   12b2a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   12b2c:	2347      	movs	r3, #71	; 0x47
   12b2e:	18fb      	adds	r3, r7, r3
   12b30:	2200      	movs	r2, #0
   12b32:	701a      	strb	r2, [r3, #0]
   12b34:	e02c      	b.n	12b90 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   12b36:	2347      	movs	r3, #71	; 0x47
   12b38:	18fb      	adds	r3, r7, r3
   12b3a:	781a      	ldrb	r2, [r3, #0]
   12b3c:	230c      	movs	r3, #12
   12b3e:	18fb      	adds	r3, r7, r3
   12b40:	0092      	lsls	r2, r2, #2
   12b42:	58d3      	ldr	r3, [r2, r3]
   12b44:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   12b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12b48:	2b00      	cmp	r3, #0
   12b4a:	d109      	bne.n	12b60 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   12b4c:	2347      	movs	r3, #71	; 0x47
   12b4e:	18fb      	adds	r3, r7, r3
   12b50:	781a      	ldrb	r2, [r3, #0]
   12b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12b54:	0011      	movs	r1, r2
   12b56:	0018      	movs	r0, r3
   12b58:	4b6a      	ldr	r3, [pc, #424]	; (12d04 <_spi_set_config+0x238>)
   12b5a:	4798      	blx	r3
   12b5c:	0003      	movs	r3, r0
   12b5e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   12b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12b62:	3301      	adds	r3, #1
   12b64:	d00d      	beq.n	12b82 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   12b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12b68:	b2da      	uxtb	r2, r3
   12b6a:	231c      	movs	r3, #28
   12b6c:	18fb      	adds	r3, r7, r3
   12b6e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   12b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12b72:	0c1b      	lsrs	r3, r3, #16
   12b74:	b2db      	uxtb	r3, r3
   12b76:	221c      	movs	r2, #28
   12b78:	18ba      	adds	r2, r7, r2
   12b7a:	0011      	movs	r1, r2
   12b7c:	0018      	movs	r0, r3
   12b7e:	4b62      	ldr	r3, [pc, #392]	; (12d08 <_spi_set_config+0x23c>)
   12b80:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   12b82:	2347      	movs	r3, #71	; 0x47
   12b84:	18fb      	adds	r3, r7, r3
   12b86:	781a      	ldrb	r2, [r3, #0]
   12b88:	2347      	movs	r3, #71	; 0x47
   12b8a:	18fb      	adds	r3, r7, r3
   12b8c:	3201      	adds	r2, #1
   12b8e:	701a      	strb	r2, [r3, #0]
   12b90:	2347      	movs	r3, #71	; 0x47
   12b92:	18fb      	adds	r3, r7, r3
   12b94:	781b      	ldrb	r3, [r3, #0]
   12b96:	2b03      	cmp	r3, #3
   12b98:	d9cd      	bls.n	12b36 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   12b9a:	683b      	ldr	r3, [r7, #0]
   12b9c:	781a      	ldrb	r2, [r3, #0]
   12b9e:	687b      	ldr	r3, [r7, #4]
   12ba0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   12ba2:	683b      	ldr	r3, [r7, #0]
   12ba4:	7c1a      	ldrb	r2, [r3, #16]
   12ba6:	687b      	ldr	r3, [r7, #4]
   12ba8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   12baa:	683b      	ldr	r3, [r7, #0]
   12bac:	7c9a      	ldrb	r2, [r3, #18]
   12bae:	687b      	ldr	r3, [r7, #4]
   12bb0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   12bb2:	683b      	ldr	r3, [r7, #0]
   12bb4:	7d1a      	ldrb	r2, [r3, #20]
   12bb6:	687b      	ldr	r3, [r7, #4]
   12bb8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   12bba:	230a      	movs	r3, #10
   12bbc:	18fb      	adds	r3, r7, r3
   12bbe:	2200      	movs	r2, #0
   12bc0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   12bc2:	2300      	movs	r3, #0
   12bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   12bc6:	2300      	movs	r3, #0
   12bc8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   12bca:	683b      	ldr	r3, [r7, #0]
   12bcc:	781b      	ldrb	r3, [r3, #0]
   12bce:	2b01      	cmp	r3, #1
   12bd0:	d129      	bne.n	12c26 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   12bd2:	687b      	ldr	r3, [r7, #4]
   12bd4:	681b      	ldr	r3, [r3, #0]
   12bd6:	0018      	movs	r0, r3
   12bd8:	4b4c      	ldr	r3, [pc, #304]	; (12d0c <_spi_set_config+0x240>)
   12bda:	4798      	blx	r3
   12bdc:	0003      	movs	r3, r0
   12bde:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   12be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12be2:	3314      	adds	r3, #20
   12be4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   12be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12be8:	b2db      	uxtb	r3, r3
   12bea:	0018      	movs	r0, r3
   12bec:	4b48      	ldr	r3, [pc, #288]	; (12d10 <_spi_set_config+0x244>)
   12bee:	4798      	blx	r3
   12bf0:	0003      	movs	r3, r0
   12bf2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   12bf4:	683b      	ldr	r3, [r7, #0]
   12bf6:	699b      	ldr	r3, [r3, #24]
   12bf8:	2223      	movs	r2, #35	; 0x23
   12bfa:	18bc      	adds	r4, r7, r2
   12bfc:	220a      	movs	r2, #10
   12bfe:	18ba      	adds	r2, r7, r2
   12c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
   12c02:	0018      	movs	r0, r3
   12c04:	4b43      	ldr	r3, [pc, #268]	; (12d14 <_spi_set_config+0x248>)
   12c06:	4798      	blx	r3
   12c08:	0003      	movs	r3, r0
   12c0a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   12c0c:	2323      	movs	r3, #35	; 0x23
   12c0e:	18fb      	adds	r3, r7, r3
   12c10:	781b      	ldrb	r3, [r3, #0]
   12c12:	2b00      	cmp	r3, #0
   12c14:	d001      	beq.n	12c1a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   12c16:	2317      	movs	r3, #23
   12c18:	e06d      	b.n	12cf6 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   12c1a:	230a      	movs	r3, #10
   12c1c:	18fb      	adds	r3, r7, r3
   12c1e:	881b      	ldrh	r3, [r3, #0]
   12c20:	b2da      	uxtb	r2, r3
   12c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c24:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   12c26:	683b      	ldr	r3, [r7, #0]
   12c28:	781b      	ldrb	r3, [r3, #0]
   12c2a:	2b00      	cmp	r3, #0
   12c2c:	d11a      	bne.n	12c64 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
   12c2e:	683b      	ldr	r3, [r7, #0]
   12c30:	699b      	ldr	r3, [r3, #24]
   12c32:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
   12c34:	683b      	ldr	r3, [r7, #0]
   12c36:	8b9b      	ldrh	r3, [r3, #28]
   12c38:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
   12c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   12c3e:	683a      	ldr	r2, [r7, #0]
   12c40:	7f92      	ldrb	r2, [r2, #30]
   12c42:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   12c44:	683a      	ldr	r2, [r7, #0]
   12c46:	7fd2      	ldrb	r2, [r2, #31]
   12c48:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   12c4a:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
   12c4c:	431a      	orrs	r2, r3
   12c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12c50:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
   12c52:	683b      	ldr	r3, [r7, #0]
   12c54:	2220      	movs	r2, #32
   12c56:	5c9b      	ldrb	r3, [r3, r2]
   12c58:	2b00      	cmp	r3, #0
   12c5a:	d003      	beq.n	12c64 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   12c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12c5e:	2240      	movs	r2, #64	; 0x40
   12c60:	4313      	orrs	r3, r2
   12c62:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   12c64:	683b      	ldr	r3, [r7, #0]
   12c66:	685b      	ldr	r3, [r3, #4]
   12c68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12c6a:	4313      	orrs	r3, r2
   12c6c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   12c6e:	683b      	ldr	r3, [r7, #0]
   12c70:	689b      	ldr	r3, [r3, #8]
   12c72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12c74:	4313      	orrs	r3, r2
   12c76:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   12c78:	683b      	ldr	r3, [r7, #0]
   12c7a:	68db      	ldr	r3, [r3, #12]
   12c7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12c7e:	4313      	orrs	r3, r2
   12c80:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   12c82:	683b      	ldr	r3, [r7, #0]
   12c84:	7c1b      	ldrb	r3, [r3, #16]
   12c86:	001a      	movs	r2, r3
   12c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12c8a:	4313      	orrs	r3, r2
   12c8c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   12c8e:	683b      	ldr	r3, [r7, #0]
   12c90:	7c5b      	ldrb	r3, [r3, #17]
   12c92:	2b00      	cmp	r3, #0
   12c94:	d103      	bne.n	12c9e <_spi_set_config+0x1d2>
   12c96:	4b20      	ldr	r3, [pc, #128]	; (12d18 <_spi_set_config+0x24c>)
   12c98:	4798      	blx	r3
   12c9a:	1e03      	subs	r3, r0, #0
   12c9c:	d003      	beq.n	12ca6 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   12c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12ca0:	2280      	movs	r2, #128	; 0x80
   12ca2:	4313      	orrs	r3, r2
   12ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   12ca6:	683b      	ldr	r3, [r7, #0]
   12ca8:	7c9b      	ldrb	r3, [r3, #18]
   12caa:	2b00      	cmp	r3, #0
   12cac:	d004      	beq.n	12cb8 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   12cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12cb0:	2280      	movs	r2, #128	; 0x80
   12cb2:	0292      	lsls	r2, r2, #10
   12cb4:	4313      	orrs	r3, r2
   12cb6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   12cb8:	683b      	ldr	r3, [r7, #0]
   12cba:	7cdb      	ldrb	r3, [r3, #19]
   12cbc:	2b00      	cmp	r3, #0
   12cbe:	d004      	beq.n	12cca <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   12cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12cc2:	2280      	movs	r2, #128	; 0x80
   12cc4:	0092      	lsls	r2, r2, #2
   12cc6:	4313      	orrs	r3, r2
   12cc8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   12cca:	683b      	ldr	r3, [r7, #0]
   12ccc:	7d1b      	ldrb	r3, [r3, #20]
   12cce:	2b00      	cmp	r3, #0
   12cd0:	d004      	beq.n	12cdc <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   12cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12cd4:	2280      	movs	r2, #128	; 0x80
   12cd6:	0192      	lsls	r2, r2, #6
   12cd8:	4313      	orrs	r3, r2
   12cda:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   12cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12cde:	681a      	ldr	r2, [r3, #0]
   12ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12ce2:	431a      	orrs	r2, r3
   12ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12ce6:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   12ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12cea:	685a      	ldr	r2, [r3, #4]
   12cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12cee:	431a      	orrs	r2, r3
   12cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12cf2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   12cf4:	2300      	movs	r3, #0
}
   12cf6:	0018      	movs	r0, r3
   12cf8:	46bd      	mov	sp, r7
   12cfa:	b013      	add	sp, #76	; 0x4c
   12cfc:	bd90      	pop	{r4, r7, pc}
   12cfe:	46c0      	nop			; (mov r8, r8)
   12d00:	000127d5 	.word	0x000127d5
   12d04:	0001246d 	.word	0x0001246d
   12d08:	00015341 	.word	0x00015341
   12d0c:	00012629 	.word	0x00012629
   12d10:	00015179 	.word	0x00015179
   12d14:	000121a3 	.word	0x000121a3
   12d18:	00012949 	.word	0x00012949

00012d1c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   12d1c:	b590      	push	{r4, r7, lr}
   12d1e:	b08b      	sub	sp, #44	; 0x2c
   12d20:	af00      	add	r7, sp, #0
   12d22:	60f8      	str	r0, [r7, #12]
   12d24:	60b9      	str	r1, [r7, #8]
   12d26:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   12d28:	68fb      	ldr	r3, [r7, #12]
   12d2a:	68ba      	ldr	r2, [r7, #8]
   12d2c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   12d2e:	68fb      	ldr	r3, [r7, #12]
   12d30:	681b      	ldr	r3, [r3, #0]
   12d32:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   12d34:	6a3b      	ldr	r3, [r7, #32]
   12d36:	681b      	ldr	r3, [r3, #0]
   12d38:	2202      	movs	r2, #2
   12d3a:	4013      	ands	r3, r2
   12d3c:	d001      	beq.n	12d42 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   12d3e:	231c      	movs	r3, #28
   12d40:	e0a6      	b.n	12e90 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   12d42:	6a3b      	ldr	r3, [r7, #32]
   12d44:	681b      	ldr	r3, [r3, #0]
   12d46:	2201      	movs	r2, #1
   12d48:	4013      	ands	r3, r2
   12d4a:	d001      	beq.n	12d50 <spi_init+0x34>
		return STATUS_BUSY;
   12d4c:	2305      	movs	r3, #5
   12d4e:	e09f      	b.n	12e90 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   12d50:	68fb      	ldr	r3, [r7, #12]
   12d52:	681b      	ldr	r3, [r3, #0]
   12d54:	0018      	movs	r0, r3
   12d56:	4b50      	ldr	r3, [pc, #320]	; (12e98 <spi_init+0x17c>)
   12d58:	4798      	blx	r3
   12d5a:	0003      	movs	r3, r0
   12d5c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   12d5e:	69fb      	ldr	r3, [r7, #28]
   12d60:	3302      	adds	r3, #2
   12d62:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   12d64:	69fb      	ldr	r3, [r7, #28]
   12d66:	3314      	adds	r3, #20
   12d68:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   12d6a:	2201      	movs	r2, #1
   12d6c:	69bb      	ldr	r3, [r7, #24]
   12d6e:	409a      	lsls	r2, r3
   12d70:	0013      	movs	r3, r2
   12d72:	0019      	movs	r1, r3
   12d74:	2002      	movs	r0, #2
   12d76:	4b49      	ldr	r3, [pc, #292]	; (12e9c <spi_init+0x180>)
   12d78:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12d7a:	2310      	movs	r3, #16
   12d7c:	18fb      	adds	r3, r7, r3
   12d7e:	0018      	movs	r0, r3
   12d80:	4b47      	ldr	r3, [pc, #284]	; (12ea0 <spi_init+0x184>)
   12d82:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   12d84:	687b      	ldr	r3, [r7, #4]
   12d86:	2224      	movs	r2, #36	; 0x24
   12d88:	5c9a      	ldrb	r2, [r3, r2]
   12d8a:	2310      	movs	r3, #16
   12d8c:	18fb      	adds	r3, r7, r3
   12d8e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   12d90:	697b      	ldr	r3, [r7, #20]
   12d92:	b2db      	uxtb	r3, r3
   12d94:	2210      	movs	r2, #16
   12d96:	18ba      	adds	r2, r7, r2
   12d98:	0011      	movs	r1, r2
   12d9a:	0018      	movs	r0, r3
   12d9c:	4b41      	ldr	r3, [pc, #260]	; (12ea4 <spi_init+0x188>)
   12d9e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   12da0:	697b      	ldr	r3, [r7, #20]
   12da2:	b2db      	uxtb	r3, r3
   12da4:	0018      	movs	r0, r3
   12da6:	4b40      	ldr	r3, [pc, #256]	; (12ea8 <spi_init+0x18c>)
   12da8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   12daa:	687b      	ldr	r3, [r7, #4]
   12dac:	2224      	movs	r2, #36	; 0x24
   12dae:	5c9b      	ldrb	r3, [r3, r2]
   12db0:	2100      	movs	r1, #0
   12db2:	0018      	movs	r0, r3
   12db4:	4b3d      	ldr	r3, [pc, #244]	; (12eac <spi_init+0x190>)
   12db6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   12db8:	687b      	ldr	r3, [r7, #4]
   12dba:	781b      	ldrb	r3, [r3, #0]
   12dbc:	2b01      	cmp	r3, #1
   12dbe:	d105      	bne.n	12dcc <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   12dc0:	6a3b      	ldr	r3, [r7, #32]
   12dc2:	681b      	ldr	r3, [r3, #0]
   12dc4:	220c      	movs	r2, #12
   12dc6:	431a      	orrs	r2, r3
   12dc8:	6a3b      	ldr	r3, [r7, #32]
   12dca:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   12dcc:	687b      	ldr	r3, [r7, #4]
   12dce:	781b      	ldrb	r3, [r3, #0]
   12dd0:	2b00      	cmp	r3, #0
   12dd2:	d105      	bne.n	12de0 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
   12dd4:	6a3b      	ldr	r3, [r7, #32]
   12dd6:	681b      	ldr	r3, [r3, #0]
   12dd8:	2208      	movs	r2, #8
   12dda:	431a      	orrs	r2, r3
   12ddc:	6a3b      	ldr	r3, [r7, #32]
   12dde:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   12de0:	2327      	movs	r3, #39	; 0x27
   12de2:	18fb      	adds	r3, r7, r3
   12de4:	2200      	movs	r2, #0
   12de6:	701a      	strb	r2, [r3, #0]
   12de8:	e010      	b.n	12e0c <spi_init+0xf0>
		module->callback[i]        = NULL;
   12dea:	2327      	movs	r3, #39	; 0x27
   12dec:	18fb      	adds	r3, r7, r3
   12dee:	781b      	ldrb	r3, [r3, #0]
   12df0:	68fa      	ldr	r2, [r7, #12]
   12df2:	3302      	adds	r3, #2
   12df4:	009b      	lsls	r3, r3, #2
   12df6:	18d3      	adds	r3, r2, r3
   12df8:	3304      	adds	r3, #4
   12dfa:	2200      	movs	r2, #0
   12dfc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   12dfe:	2327      	movs	r3, #39	; 0x27
   12e00:	18fb      	adds	r3, r7, r3
   12e02:	781a      	ldrb	r2, [r3, #0]
   12e04:	2327      	movs	r3, #39	; 0x27
   12e06:	18fb      	adds	r3, r7, r3
   12e08:	3201      	adds	r2, #1
   12e0a:	701a      	strb	r2, [r3, #0]
   12e0c:	2327      	movs	r3, #39	; 0x27
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2b06      	cmp	r3, #6
   12e14:	d9e9      	bls.n	12dea <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
   12e16:	68fb      	ldr	r3, [r7, #12]
   12e18:	2200      	movs	r2, #0
   12e1a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   12e1c:	68fb      	ldr	r3, [r7, #12]
   12e1e:	2200      	movs	r2, #0
   12e20:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   12e22:	68fb      	ldr	r3, [r7, #12]
   12e24:	2200      	movs	r2, #0
   12e26:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   12e28:	68fb      	ldr	r3, [r7, #12]
   12e2a:	2200      	movs	r2, #0
   12e2c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   12e2e:	68fb      	ldr	r3, [r7, #12]
   12e30:	2236      	movs	r2, #54	; 0x36
   12e32:	2100      	movs	r1, #0
   12e34:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   12e36:	68fb      	ldr	r3, [r7, #12]
   12e38:	2237      	movs	r2, #55	; 0x37
   12e3a:	2100      	movs	r1, #0
   12e3c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   12e3e:	68fb      	ldr	r3, [r7, #12]
   12e40:	2238      	movs	r2, #56	; 0x38
   12e42:	2100      	movs	r1, #0
   12e44:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   12e46:	68fb      	ldr	r3, [r7, #12]
   12e48:	2203      	movs	r2, #3
   12e4a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   12e4c:	68fb      	ldr	r3, [r7, #12]
   12e4e:	2200      	movs	r2, #0
   12e50:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   12e52:	68fb      	ldr	r3, [r7, #12]
   12e54:	681b      	ldr	r3, [r3, #0]
   12e56:	2213      	movs	r2, #19
   12e58:	18bc      	adds	r4, r7, r2
   12e5a:	0018      	movs	r0, r3
   12e5c:	4b0e      	ldr	r3, [pc, #56]	; (12e98 <spi_init+0x17c>)
   12e5e:	4798      	blx	r3
   12e60:	0003      	movs	r3, r0
   12e62:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   12e64:	4a12      	ldr	r2, [pc, #72]	; (12eb0 <spi_init+0x194>)
   12e66:	2313      	movs	r3, #19
   12e68:	18fb      	adds	r3, r7, r3
   12e6a:	781b      	ldrb	r3, [r3, #0]
   12e6c:	0011      	movs	r1, r2
   12e6e:	0018      	movs	r0, r3
   12e70:	4b10      	ldr	r3, [pc, #64]	; (12eb4 <spi_init+0x198>)
   12e72:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   12e74:	2313      	movs	r3, #19
   12e76:	18fb      	adds	r3, r7, r3
   12e78:	781a      	ldrb	r2, [r3, #0]
   12e7a:	4b0f      	ldr	r3, [pc, #60]	; (12eb8 <spi_init+0x19c>)
   12e7c:	0092      	lsls	r2, r2, #2
   12e7e:	68f9      	ldr	r1, [r7, #12]
   12e80:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   12e82:	687a      	ldr	r2, [r7, #4]
   12e84:	68fb      	ldr	r3, [r7, #12]
   12e86:	0011      	movs	r1, r2
   12e88:	0018      	movs	r0, r3
   12e8a:	4b0c      	ldr	r3, [pc, #48]	; (12ebc <spi_init+0x1a0>)
   12e8c:	4798      	blx	r3
   12e8e:	0003      	movs	r3, r0
}
   12e90:	0018      	movs	r0, r3
   12e92:	46bd      	mov	sp, r7
   12e94:	b00b      	add	sp, #44	; 0x2c
   12e96:	bd90      	pop	{r4, r7, pc}
   12e98:	00012629 	.word	0x00012629
   12e9c:	000128ed 	.word	0x000128ed
   12ea0:	000128d5 	.word	0x000128d5
   12ea4:	00015055 	.word	0x00015055
   12ea8:	00015099 	.word	0x00015099
   12eac:	000123e1 	.word	0x000123e1
   12eb0:	000135e9 	.word	0x000135e9
   12eb4:	0001268d 	.word	0x0001268d
   12eb8:	2000041c 	.word	0x2000041c
   12ebc:	00012acd 	.word	0x00012acd

00012ec0 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   12ec0:	b590      	push	{r4, r7, lr}
   12ec2:	b089      	sub	sp, #36	; 0x24
   12ec4:	af00      	add	r7, sp, #0
   12ec6:	60f8      	str	r0, [r7, #12]
   12ec8:	60b9      	str	r1, [r7, #8]
   12eca:	0019      	movs	r1, r3
   12ecc:	1dbb      	adds	r3, r7, #6
   12ece:	801a      	strh	r2, [r3, #0]
   12ed0:	1d3b      	adds	r3, r7, #4
   12ed2:	1c0a      	adds	r2, r1, #0
   12ed4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   12ed6:	68fb      	ldr	r3, [r7, #12]
   12ed8:	2238      	movs	r2, #56	; 0x38
   12eda:	5c9b      	ldrb	r3, [r3, r2]
   12edc:	b2db      	uxtb	r3, r3
   12ede:	2b05      	cmp	r3, #5
   12ee0:	d101      	bne.n	12ee6 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   12ee2:	2305      	movs	r3, #5
   12ee4:	e0b8      	b.n	13058 <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   12ee6:	1dbb      	adds	r3, r7, #6
   12ee8:	881b      	ldrh	r3, [r3, #0]
   12eea:	2b00      	cmp	r3, #0
   12eec:	d101      	bne.n	12ef2 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   12eee:	2317      	movs	r3, #23
   12ef0:	e0b2      	b.n	13058 <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
   12ef2:	68fb      	ldr	r3, [r7, #12]
   12ef4:	79db      	ldrb	r3, [r3, #7]
   12ef6:	2201      	movs	r2, #1
   12ef8:	4053      	eors	r3, r2
   12efa:	b2db      	uxtb	r3, r3
   12efc:	2b00      	cmp	r3, #0
   12efe:	d001      	beq.n	12f04 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   12f00:	231c      	movs	r3, #28
   12f02:	e0a9      	b.n	13058 <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   12f04:	68fb      	ldr	r3, [r7, #12]
   12f06:	795b      	ldrb	r3, [r3, #5]
   12f08:	2b00      	cmp	r3, #0
   12f0a:	d109      	bne.n	12f20 <spi_read_buffer_wait+0x60>
   12f0c:	68fb      	ldr	r3, [r7, #12]
   12f0e:	0018      	movs	r0, r3
   12f10:	4b53      	ldr	r3, [pc, #332]	; (13060 <spi_read_buffer_wait+0x1a0>)
   12f12:	4798      	blx	r3
   12f14:	1e03      	subs	r3, r0, #0
   12f16:	d003      	beq.n	12f20 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   12f18:	68fb      	ldr	r3, [r7, #12]
   12f1a:	0018      	movs	r0, r3
   12f1c:	4b51      	ldr	r3, [pc, #324]	; (13064 <spi_read_buffer_wait+0x1a4>)
   12f1e:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
   12f20:	231e      	movs	r3, #30
   12f22:	18fb      	adds	r3, r7, r3
   12f24:	2200      	movs	r2, #0
   12f26:	801a      	strh	r2, [r3, #0]

	while (length--) {
   12f28:	e08d      	b.n	13046 <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   12f2a:	68fb      	ldr	r3, [r7, #12]
   12f2c:	795b      	ldrb	r3, [r3, #5]
   12f2e:	2b01      	cmp	r3, #1
   12f30:	d112      	bne.n	12f58 <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   12f32:	46c0      	nop			; (mov r8, r8)
   12f34:	68fb      	ldr	r3, [r7, #12]
   12f36:	0018      	movs	r0, r3
   12f38:	4b4b      	ldr	r3, [pc, #300]	; (13068 <spi_read_buffer_wait+0x1a8>)
   12f3a:	4798      	blx	r3
   12f3c:	0003      	movs	r3, r0
   12f3e:	001a      	movs	r2, r3
   12f40:	2301      	movs	r3, #1
   12f42:	4053      	eors	r3, r2
   12f44:	b2db      	uxtb	r3, r3
   12f46:	2b00      	cmp	r3, #0
   12f48:	d1f4      	bne.n	12f34 <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   12f4a:	1d3b      	adds	r3, r7, #4
   12f4c:	881a      	ldrh	r2, [r3, #0]
   12f4e:	68fb      	ldr	r3, [r7, #12]
   12f50:	0011      	movs	r1, r2
   12f52:	0018      	movs	r0, r3
   12f54:	4b45      	ldr	r3, [pc, #276]	; (1306c <spi_read_buffer_wait+0x1ac>)
   12f56:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   12f58:	68fb      	ldr	r3, [r7, #12]
   12f5a:	795b      	ldrb	r3, [r3, #5]
   12f5c:	2b00      	cmp	r3, #0
   12f5e:	d12a      	bne.n	12fb6 <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   12f60:	2300      	movs	r3, #0
   12f62:	61bb      	str	r3, [r7, #24]
   12f64:	e008      	b.n	12f78 <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
   12f66:	68fb      	ldr	r3, [r7, #12]
   12f68:	0018      	movs	r0, r3
   12f6a:	4b41      	ldr	r3, [pc, #260]	; (13070 <spi_read_buffer_wait+0x1b0>)
   12f6c:	4798      	blx	r3
   12f6e:	1e03      	subs	r3, r0, #0
   12f70:	d107      	bne.n	12f82 <spi_read_buffer_wait+0xc2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   12f72:	69bb      	ldr	r3, [r7, #24]
   12f74:	3301      	adds	r3, #1
   12f76:	61bb      	str	r3, [r7, #24]
   12f78:	69bb      	ldr	r3, [r7, #24]
   12f7a:	4a3e      	ldr	r2, [pc, #248]	; (13074 <spi_read_buffer_wait+0x1b4>)
   12f7c:	4293      	cmp	r3, r2
   12f7e:	d9f2      	bls.n	12f66 <spi_read_buffer_wait+0xa6>
   12f80:	e000      	b.n	12f84 <spi_read_buffer_wait+0xc4>
					break;
   12f82:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   12f84:	68fb      	ldr	r3, [r7, #12]
   12f86:	0018      	movs	r0, r3
   12f88:	4b35      	ldr	r3, [pc, #212]	; (13060 <spi_read_buffer_wait+0x1a0>)
   12f8a:	4798      	blx	r3
   12f8c:	1e03      	subs	r3, r0, #0
   12f8e:	d005      	beq.n	12f9c <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
   12f90:	68fb      	ldr	r3, [r7, #12]
   12f92:	0018      	movs	r0, r3
   12f94:	4b33      	ldr	r3, [pc, #204]	; (13064 <spi_read_buffer_wait+0x1a4>)
   12f96:	4798      	blx	r3
				return STATUS_ABORTED;
   12f98:	2304      	movs	r3, #4
   12f9a:	e05d      	b.n	13058 <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
   12f9c:	68fb      	ldr	r3, [r7, #12]
   12f9e:	0018      	movs	r0, r3
   12fa0:	4b33      	ldr	r3, [pc, #204]	; (13070 <spi_read_buffer_wait+0x1b0>)
   12fa2:	4798      	blx	r3
   12fa4:	0003      	movs	r3, r0
   12fa6:	001a      	movs	r2, r3
   12fa8:	2301      	movs	r3, #1
   12faa:	4053      	eors	r3, r2
   12fac:	b2db      	uxtb	r3, r3
   12fae:	2b00      	cmp	r3, #0
   12fb0:	d001      	beq.n	12fb6 <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   12fb2:	2312      	movs	r3, #18
   12fb4:	e050      	b.n	13058 <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   12fb6:	46c0      	nop			; (mov r8, r8)
   12fb8:	68fb      	ldr	r3, [r7, #12]
   12fba:	0018      	movs	r0, r3
   12fbc:	4b2c      	ldr	r3, [pc, #176]	; (13070 <spi_read_buffer_wait+0x1b0>)
   12fbe:	4798      	blx	r3
   12fc0:	0003      	movs	r3, r0
   12fc2:	001a      	movs	r2, r3
   12fc4:	2301      	movs	r3, #1
   12fc6:	4053      	eors	r3, r2
   12fc8:	b2db      	uxtb	r3, r3
   12fca:	2b00      	cmp	r3, #0
   12fcc:	d1f4      	bne.n	12fb8 <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
   12fce:	2314      	movs	r3, #20
   12fd0:	18fb      	adds	r3, r7, r3
   12fd2:	2200      	movs	r2, #0
   12fd4:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   12fd6:	2317      	movs	r3, #23
   12fd8:	18fc      	adds	r4, r7, r3
   12fda:	2314      	movs	r3, #20
   12fdc:	18fa      	adds	r2, r7, r3
   12fde:	68fb      	ldr	r3, [r7, #12]
   12fe0:	0011      	movs	r1, r2
   12fe2:	0018      	movs	r0, r3
   12fe4:	4b24      	ldr	r3, [pc, #144]	; (13078 <spi_read_buffer_wait+0x1b8>)
   12fe6:	4798      	blx	r3
   12fe8:	0003      	movs	r3, r0
   12fea:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   12fec:	2317      	movs	r3, #23
   12fee:	18fb      	adds	r3, r7, r3
   12ff0:	781b      	ldrb	r3, [r3, #0]
   12ff2:	2b00      	cmp	r3, #0
   12ff4:	d003      	beq.n	12ffe <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
   12ff6:	2317      	movs	r3, #23
   12ff8:	18fb      	adds	r3, r7, r3
   12ffa:	781b      	ldrb	r3, [r3, #0]
   12ffc:	e02c      	b.n	13058 <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   12ffe:	231e      	movs	r3, #30
   13000:	18fb      	adds	r3, r7, r3
   13002:	881b      	ldrh	r3, [r3, #0]
   13004:	221e      	movs	r2, #30
   13006:	18ba      	adds	r2, r7, r2
   13008:	1c59      	adds	r1, r3, #1
   1300a:	8011      	strh	r1, [r2, #0]
   1300c:	001a      	movs	r2, r3
   1300e:	68bb      	ldr	r3, [r7, #8]
   13010:	189b      	adds	r3, r3, r2
   13012:	2214      	movs	r2, #20
   13014:	18ba      	adds	r2, r7, r2
   13016:	8812      	ldrh	r2, [r2, #0]
   13018:	b2d2      	uxtb	r2, r2
   1301a:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1301c:	68fb      	ldr	r3, [r7, #12]
   1301e:	799b      	ldrb	r3, [r3, #6]
   13020:	2b01      	cmp	r3, #1
   13022:	d110      	bne.n	13046 <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
   13024:	231e      	movs	r3, #30
   13026:	18fb      	adds	r3, r7, r3
   13028:	881b      	ldrh	r3, [r3, #0]
   1302a:	221e      	movs	r2, #30
   1302c:	18ba      	adds	r2, r7, r2
   1302e:	1c59      	adds	r1, r3, #1
   13030:	8011      	strh	r1, [r2, #0]
   13032:	001a      	movs	r2, r3
   13034:	68bb      	ldr	r3, [r7, #8]
   13036:	189b      	adds	r3, r3, r2
   13038:	2214      	movs	r2, #20
   1303a:	18ba      	adds	r2, r7, r2
   1303c:	8812      	ldrh	r2, [r2, #0]
   1303e:	0a12      	lsrs	r2, r2, #8
   13040:	b292      	uxth	r2, r2
   13042:	b2d2      	uxtb	r2, r2
   13044:	701a      	strb	r2, [r3, #0]
	while (length--) {
   13046:	1dbb      	adds	r3, r7, #6
   13048:	881b      	ldrh	r3, [r3, #0]
   1304a:	1dba      	adds	r2, r7, #6
   1304c:	1e59      	subs	r1, r3, #1
   1304e:	8011      	strh	r1, [r2, #0]
   13050:	2b00      	cmp	r3, #0
   13052:	d000      	beq.n	13056 <spi_read_buffer_wait+0x196>
   13054:	e769      	b.n	12f2a <spi_read_buffer_wait+0x6a>
		}
	}

	return STATUS_OK;
   13056:	2300      	movs	r3, #0
}
   13058:	0018      	movs	r0, r3
   1305a:	46bd      	mov	sp, r7
   1305c:	b009      	add	sp, #36	; 0x24
   1305e:	bd90      	pop	{r4, r7, pc}
   13060:	00012969 	.word	0x00012969
   13064:	00012ab1 	.word	0x00012ab1
   13068:	00012991 	.word	0x00012991
   1306c:	000129e1 	.word	0x000129e1
   13070:	000129b9 	.word	0x000129b9
   13074:	00002710 	.word	0x00002710
   13078:	00012a29 	.word	0x00012a29

0001307c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   1307c:	b580      	push	{r7, lr}
   1307e:	b086      	sub	sp, #24
   13080:	af00      	add	r7, sp, #0
   13082:	60f8      	str	r0, [r7, #12]
   13084:	60b9      	str	r1, [r7, #8]
   13086:	1dfb      	adds	r3, r7, #7
   13088:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1308a:	68fb      	ldr	r3, [r7, #12]
   1308c:	795b      	ldrb	r3, [r3, #5]
   1308e:	2b01      	cmp	r3, #1
   13090:	d001      	beq.n	13096 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   13092:	2315      	movs	r3, #21
   13094:	e05c      	b.n	13150 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   13096:	68fb      	ldr	r3, [r7, #12]
   13098:	7a1b      	ldrb	r3, [r3, #8]
   1309a:	2201      	movs	r2, #1
   1309c:	4053      	eors	r3, r2
   1309e:	b2db      	uxtb	r3, r3
   130a0:	2b00      	cmp	r3, #0
   130a2:	d054      	beq.n	1314e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   130a4:	1dfb      	adds	r3, r7, #7
   130a6:	781b      	ldrb	r3, [r3, #0]
   130a8:	2b00      	cmp	r3, #0
   130aa:	d04a      	beq.n	13142 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   130ac:	68bb      	ldr	r3, [r7, #8]
   130ae:	785b      	ldrb	r3, [r3, #1]
   130b0:	2b00      	cmp	r3, #0
   130b2:	d03f      	beq.n	13134 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   130b4:	68fb      	ldr	r3, [r7, #12]
   130b6:	0018      	movs	r0, r3
   130b8:	4b27      	ldr	r3, [pc, #156]	; (13158 <spi_select_slave+0xdc>)
   130ba:	4798      	blx	r3
   130bc:	0003      	movs	r3, r0
   130be:	001a      	movs	r2, r3
   130c0:	2301      	movs	r3, #1
   130c2:	4053      	eors	r3, r2
   130c4:	b2db      	uxtb	r3, r3
   130c6:	2b00      	cmp	r3, #0
   130c8:	d007      	beq.n	130da <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   130ca:	68bb      	ldr	r3, [r7, #8]
   130cc:	781b      	ldrb	r3, [r3, #0]
   130ce:	2101      	movs	r1, #1
   130d0:	0018      	movs	r0, r3
   130d2:	4b22      	ldr	r3, [pc, #136]	; (1315c <spi_select_slave+0xe0>)
   130d4:	4798      	blx	r3
					return STATUS_BUSY;
   130d6:	2305      	movs	r3, #5
   130d8:	e03a      	b.n	13150 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   130da:	68bb      	ldr	r3, [r7, #8]
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2100      	movs	r1, #0
   130e0:	0018      	movs	r0, r3
   130e2:	4b1e      	ldr	r3, [pc, #120]	; (1315c <spi_select_slave+0xe0>)
   130e4:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   130e6:	68bb      	ldr	r3, [r7, #8]
   130e8:	789b      	ldrb	r3, [r3, #2]
   130ea:	b29a      	uxth	r2, r3
   130ec:	68fb      	ldr	r3, [r7, #12]
   130ee:	0011      	movs	r1, r2
   130f0:	0018      	movs	r0, r3
   130f2:	4b1b      	ldr	r3, [pc, #108]	; (13160 <spi_select_slave+0xe4>)
   130f4:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   130f6:	68fb      	ldr	r3, [r7, #12]
   130f8:	79db      	ldrb	r3, [r3, #7]
   130fa:	2201      	movs	r2, #1
   130fc:	4053      	eors	r3, r2
   130fe:	b2db      	uxtb	r3, r3
   13100:	2b00      	cmp	r3, #0
   13102:	d024      	beq.n	1314e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   13104:	46c0      	nop			; (mov r8, r8)
   13106:	68fb      	ldr	r3, [r7, #12]
   13108:	0018      	movs	r0, r3
   1310a:	4b16      	ldr	r3, [pc, #88]	; (13164 <spi_select_slave+0xe8>)
   1310c:	4798      	blx	r3
   1310e:	0003      	movs	r3, r0
   13110:	001a      	movs	r2, r3
   13112:	2301      	movs	r3, #1
   13114:	4053      	eors	r3, r2
   13116:	b2db      	uxtb	r3, r3
   13118:	2b00      	cmp	r3, #0
   1311a:	d1f4      	bne.n	13106 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   1311c:	2316      	movs	r3, #22
   1311e:	18fb      	adds	r3, r7, r3
   13120:	2200      	movs	r2, #0
   13122:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   13124:	2316      	movs	r3, #22
   13126:	18fa      	adds	r2, r7, r3
   13128:	68fb      	ldr	r3, [r7, #12]
   1312a:	0011      	movs	r1, r2
   1312c:	0018      	movs	r0, r3
   1312e:	4b0e      	ldr	r3, [pc, #56]	; (13168 <spi_select_slave+0xec>)
   13130:	4798      	blx	r3
   13132:	e00c      	b.n	1314e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   13134:	68bb      	ldr	r3, [r7, #8]
   13136:	781b      	ldrb	r3, [r3, #0]
   13138:	2100      	movs	r1, #0
   1313a:	0018      	movs	r0, r3
   1313c:	4b07      	ldr	r3, [pc, #28]	; (1315c <spi_select_slave+0xe0>)
   1313e:	4798      	blx	r3
   13140:	e005      	b.n	1314e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   13142:	68bb      	ldr	r3, [r7, #8]
   13144:	781b      	ldrb	r3, [r3, #0]
   13146:	2101      	movs	r1, #1
   13148:	0018      	movs	r0, r3
   1314a:	4b04      	ldr	r3, [pc, #16]	; (1315c <spi_select_slave+0xe0>)
   1314c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   1314e:	2300      	movs	r3, #0
}
   13150:	0018      	movs	r0, r3
   13152:	46bd      	mov	sp, r7
   13154:	b006      	add	sp, #24
   13156:	bd80      	pop	{r7, pc}
   13158:	00012991 	.word	0x00012991
   1315c:	00012881 	.word	0x00012881
   13160:	000129e1 	.word	0x000129e1
   13164:	000129b9 	.word	0x000129b9
   13168:	00012a29 	.word	0x00012a29

0001316c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   1316c:	b580      	push	{r7, lr}
   1316e:	b08a      	sub	sp, #40	; 0x28
   13170:	af00      	add	r7, sp, #0
   13172:	60f8      	str	r0, [r7, #12]
   13174:	60b9      	str	r1, [r7, #8]
   13176:	1dbb      	adds	r3, r7, #6
   13178:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1317a:	68fb      	ldr	r3, [r7, #12]
   1317c:	2238      	movs	r2, #56	; 0x38
   1317e:	5c9b      	ldrb	r3, [r3, r2]
   13180:	b2db      	uxtb	r3, r3
   13182:	2b05      	cmp	r3, #5
   13184:	d101      	bne.n	1318a <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   13186:	2305      	movs	r3, #5
   13188:	e170      	b.n	1346c <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
   1318a:	1dbb      	adds	r3, r7, #6
   1318c:	881b      	ldrh	r3, [r3, #0]
   1318e:	2b00      	cmp	r3, #0
   13190:	d101      	bne.n	13196 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   13192:	2317      	movs	r3, #23
   13194:	e16a      	b.n	1346c <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   13196:	68fb      	ldr	r3, [r7, #12]
   13198:	795b      	ldrb	r3, [r3, #5]
   1319a:	2b00      	cmp	r3, #0
   1319c:	d109      	bne.n	131b2 <spi_write_buffer_wait+0x46>
   1319e:	68fb      	ldr	r3, [r7, #12]
   131a0:	0018      	movs	r0, r3
   131a2:	4bb4      	ldr	r3, [pc, #720]	; (13474 <spi_write_buffer_wait+0x308>)
   131a4:	4798      	blx	r3
   131a6:	1e03      	subs	r3, r0, #0
   131a8:	d003      	beq.n	131b2 <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   131aa:	68fb      	ldr	r3, [r7, #12]
   131ac:	0018      	movs	r0, r3
   131ae:	4bb2      	ldr	r3, [pc, #712]	; (13478 <spi_write_buffer_wait+0x30c>)
   131b0:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
   131b2:	2326      	movs	r3, #38	; 0x26
   131b4:	18fb      	adds	r3, r7, r3
   131b6:	2200      	movs	r2, #0
   131b8:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   131ba:	2324      	movs	r3, #36	; 0x24
   131bc:	18fb      	adds	r3, r7, r3
   131be:	1dba      	adds	r2, r7, #6
   131c0:	8812      	ldrh	r2, [r2, #0]
   131c2:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   131c4:	e0fe      	b.n	133c4 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   131c6:	68fb      	ldr	r3, [r7, #12]
   131c8:	795b      	ldrb	r3, [r3, #5]
   131ca:	2b00      	cmp	r3, #0
   131cc:	d12a      	bne.n	13224 <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   131ce:	2300      	movs	r3, #0
   131d0:	623b      	str	r3, [r7, #32]
   131d2:	e008      	b.n	131e6 <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
   131d4:	68fb      	ldr	r3, [r7, #12]
   131d6:	0018      	movs	r0, r3
   131d8:	4ba8      	ldr	r3, [pc, #672]	; (1347c <spi_write_buffer_wait+0x310>)
   131da:	4798      	blx	r3
   131dc:	1e03      	subs	r3, r0, #0
   131de:	d107      	bne.n	131f0 <spi_write_buffer_wait+0x84>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   131e0:	6a3b      	ldr	r3, [r7, #32]
   131e2:	3301      	adds	r3, #1
   131e4:	623b      	str	r3, [r7, #32]
   131e6:	6a3b      	ldr	r3, [r7, #32]
   131e8:	4aa5      	ldr	r2, [pc, #660]	; (13480 <spi_write_buffer_wait+0x314>)
   131ea:	4293      	cmp	r3, r2
   131ec:	d9f2      	bls.n	131d4 <spi_write_buffer_wait+0x68>
   131ee:	e000      	b.n	131f2 <spi_write_buffer_wait+0x86>
					break;
   131f0:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   131f2:	68fb      	ldr	r3, [r7, #12]
   131f4:	0018      	movs	r0, r3
   131f6:	4b9f      	ldr	r3, [pc, #636]	; (13474 <spi_write_buffer_wait+0x308>)
   131f8:	4798      	blx	r3
   131fa:	1e03      	subs	r3, r0, #0
   131fc:	d005      	beq.n	1320a <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
   131fe:	68fb      	ldr	r3, [r7, #12]
   13200:	0018      	movs	r0, r3
   13202:	4b9d      	ldr	r3, [pc, #628]	; (13478 <spi_write_buffer_wait+0x30c>)
   13204:	4798      	blx	r3
				return STATUS_ABORTED;
   13206:	2304      	movs	r3, #4
   13208:	e130      	b.n	1346c <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
   1320a:	68fb      	ldr	r3, [r7, #12]
   1320c:	0018      	movs	r0, r3
   1320e:	4b9b      	ldr	r3, [pc, #620]	; (1347c <spi_write_buffer_wait+0x310>)
   13210:	4798      	blx	r3
   13212:	0003      	movs	r3, r0
   13214:	001a      	movs	r2, r3
   13216:	2301      	movs	r3, #1
   13218:	4053      	eors	r3, r2
   1321a:	b2db      	uxtb	r3, r3
   1321c:	2b00      	cmp	r3, #0
   1321e:	d001      	beq.n	13224 <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
   13220:	2312      	movs	r3, #18
   13222:	e123      	b.n	1346c <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   13224:	46c0      	nop			; (mov r8, r8)
   13226:	68fb      	ldr	r3, [r7, #12]
   13228:	0018      	movs	r0, r3
   1322a:	4b94      	ldr	r3, [pc, #592]	; (1347c <spi_write_buffer_wait+0x310>)
   1322c:	4798      	blx	r3
   1322e:	0003      	movs	r3, r0
   13230:	001a      	movs	r2, r3
   13232:	2301      	movs	r3, #1
   13234:	4053      	eors	r3, r2
   13236:	b2db      	uxtb	r3, r3
   13238:	2b00      	cmp	r3, #0
   1323a:	d1f4      	bne.n	13226 <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   1323c:	2326      	movs	r3, #38	; 0x26
   1323e:	18fb      	adds	r3, r7, r3
   13240:	881b      	ldrh	r3, [r3, #0]
   13242:	2226      	movs	r2, #38	; 0x26
   13244:	18ba      	adds	r2, r7, r2
   13246:	1c59      	adds	r1, r3, #1
   13248:	8011      	strh	r1, [r2, #0]
   1324a:	001a      	movs	r2, r3
   1324c:	68bb      	ldr	r3, [r7, #8]
   1324e:	189b      	adds	r3, r3, r2
   13250:	781a      	ldrb	r2, [r3, #0]
   13252:	231e      	movs	r3, #30
   13254:	18fb      	adds	r3, r7, r3
   13256:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   13258:	68fb      	ldr	r3, [r7, #12]
   1325a:	799b      	ldrb	r3, [r3, #6]
   1325c:	2b01      	cmp	r3, #1
   1325e:	d115      	bne.n	1328c <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
   13260:	2326      	movs	r3, #38	; 0x26
   13262:	18fb      	adds	r3, r7, r3
   13264:	881b      	ldrh	r3, [r3, #0]
   13266:	2226      	movs	r2, #38	; 0x26
   13268:	18ba      	adds	r2, r7, r2
   1326a:	1c59      	adds	r1, r3, #1
   1326c:	8011      	strh	r1, [r2, #0]
   1326e:	001a      	movs	r2, r3
   13270:	68bb      	ldr	r3, [r7, #8]
   13272:	189b      	adds	r3, r3, r2
   13274:	781b      	ldrb	r3, [r3, #0]
   13276:	021b      	lsls	r3, r3, #8
   13278:	b21a      	sxth	r2, r3
   1327a:	231e      	movs	r3, #30
   1327c:	18fb      	adds	r3, r7, r3
   1327e:	2100      	movs	r1, #0
   13280:	5e5b      	ldrsh	r3, [r3, r1]
   13282:	4313      	orrs	r3, r2
   13284:	b21a      	sxth	r2, r3
   13286:	231e      	movs	r3, #30
   13288:	18fb      	adds	r3, r7, r3
   1328a:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   1328c:	231e      	movs	r3, #30
   1328e:	18fb      	adds	r3, r7, r3
   13290:	881a      	ldrh	r2, [r3, #0]
   13292:	68fb      	ldr	r3, [r7, #12]
   13294:	0011      	movs	r1, r2
   13296:	0018      	movs	r0, r3
   13298:	4b7a      	ldr	r3, [pc, #488]	; (13484 <spi_write_buffer_wait+0x318>)
   1329a:	4798      	blx	r3

		if (module->receiver_enabled) {
   1329c:	68fb      	ldr	r3, [r7, #12]
   1329e:	79db      	ldrb	r3, [r3, #7]
   132a0:	2224      	movs	r2, #36	; 0x24
   132a2:	18ba      	adds	r2, r7, r2
   132a4:	2124      	movs	r1, #36	; 0x24
   132a6:	1879      	adds	r1, r7, r1
   132a8:	8809      	ldrh	r1, [r1, #0]
   132aa:	8011      	strh	r1, [r2, #0]
   132ac:	2b00      	cmp	r3, #0
   132ae:	d100      	bne.n	132b2 <spi_write_buffer_wait+0x146>
   132b0:	e088      	b.n	133c4 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
   132b2:	68fb      	ldr	r3, [r7, #12]
   132b4:	795b      	ldrb	r3, [r3, #5]
   132b6:	2b00      	cmp	r3, #0
   132b8:	d000      	beq.n	132bc <spi_write_buffer_wait+0x150>
   132ba:	e069      	b.n	13390 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   132bc:	2300      	movs	r3, #0
   132be:	61bb      	str	r3, [r7, #24]
   132c0:	e047      	b.n	13352 <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
   132c2:	1dbb      	adds	r3, r7, #6
   132c4:	881b      	ldrh	r3, [r3, #0]
   132c6:	2b00      	cmp	r3, #0
   132c8:	d03a      	beq.n	13340 <spi_write_buffer_wait+0x1d4>
   132ca:	68fb      	ldr	r3, [r7, #12]
   132cc:	0018      	movs	r0, r3
   132ce:	4b6b      	ldr	r3, [pc, #428]	; (1347c <spi_write_buffer_wait+0x310>)
   132d0:	4798      	blx	r3
   132d2:	1e03      	subs	r3, r0, #0
   132d4:	d034      	beq.n	13340 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
   132d6:	2326      	movs	r3, #38	; 0x26
   132d8:	18fb      	adds	r3, r7, r3
   132da:	881b      	ldrh	r3, [r3, #0]
   132dc:	2226      	movs	r2, #38	; 0x26
   132de:	18ba      	adds	r2, r7, r2
   132e0:	1c59      	adds	r1, r3, #1
   132e2:	8011      	strh	r1, [r2, #0]
   132e4:	001a      	movs	r2, r3
   132e6:	68bb      	ldr	r3, [r7, #8]
   132e8:	189b      	adds	r3, r3, r2
   132ea:	781a      	ldrb	r2, [r3, #0]
   132ec:	231e      	movs	r3, #30
   132ee:	18fb      	adds	r3, r7, r3
   132f0:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   132f2:	68fb      	ldr	r3, [r7, #12]
   132f4:	799b      	ldrb	r3, [r3, #6]
   132f6:	2b01      	cmp	r3, #1
   132f8:	d115      	bne.n	13326 <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
   132fa:	2326      	movs	r3, #38	; 0x26
   132fc:	18fb      	adds	r3, r7, r3
   132fe:	881b      	ldrh	r3, [r3, #0]
   13300:	2226      	movs	r2, #38	; 0x26
   13302:	18ba      	adds	r2, r7, r2
   13304:	1c59      	adds	r1, r3, #1
   13306:	8011      	strh	r1, [r2, #0]
   13308:	001a      	movs	r2, r3
   1330a:	68bb      	ldr	r3, [r7, #8]
   1330c:	189b      	adds	r3, r3, r2
   1330e:	781b      	ldrb	r3, [r3, #0]
   13310:	021b      	lsls	r3, r3, #8
   13312:	b21a      	sxth	r2, r3
   13314:	231e      	movs	r3, #30
   13316:	18fb      	adds	r3, r7, r3
   13318:	2100      	movs	r1, #0
   1331a:	5e5b      	ldrsh	r3, [r3, r1]
   1331c:	4313      	orrs	r3, r2
   1331e:	b21a      	sxth	r2, r3
   13320:	231e      	movs	r3, #30
   13322:	18fb      	adds	r3, r7, r3
   13324:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
   13326:	231e      	movs	r3, #30
   13328:	18fb      	adds	r3, r7, r3
   1332a:	881a      	ldrh	r2, [r3, #0]
   1332c:	68fb      	ldr	r3, [r7, #12]
   1332e:	0011      	movs	r1, r2
   13330:	0018      	movs	r0, r3
   13332:	4b54      	ldr	r3, [pc, #336]	; (13484 <spi_write_buffer_wait+0x318>)
   13334:	4798      	blx	r3
						length--;
   13336:	1dbb      	adds	r3, r7, #6
   13338:	881a      	ldrh	r2, [r3, #0]
   1333a:	1dbb      	adds	r3, r7, #6
   1333c:	3a01      	subs	r2, #1
   1333e:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
   13340:	68fb      	ldr	r3, [r7, #12]
   13342:	0018      	movs	r0, r3
   13344:	4b50      	ldr	r3, [pc, #320]	; (13488 <spi_write_buffer_wait+0x31c>)
   13346:	4798      	blx	r3
   13348:	1e03      	subs	r3, r0, #0
   1334a:	d107      	bne.n	1335c <spi_write_buffer_wait+0x1f0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   1334c:	69bb      	ldr	r3, [r7, #24]
   1334e:	3301      	adds	r3, #1
   13350:	61bb      	str	r3, [r7, #24]
   13352:	69bb      	ldr	r3, [r7, #24]
   13354:	4a4a      	ldr	r2, [pc, #296]	; (13480 <spi_write_buffer_wait+0x314>)
   13356:	4293      	cmp	r3, r2
   13358:	d9b3      	bls.n	132c2 <spi_write_buffer_wait+0x156>
   1335a:	e000      	b.n	1335e <spi_write_buffer_wait+0x1f2>
						break;
   1335c:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
   1335e:	68fb      	ldr	r3, [r7, #12]
   13360:	0018      	movs	r0, r3
   13362:	4b44      	ldr	r3, [pc, #272]	; (13474 <spi_write_buffer_wait+0x308>)
   13364:	4798      	blx	r3
   13366:	1e03      	subs	r3, r0, #0
   13368:	d005      	beq.n	13376 <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
   1336a:	68fb      	ldr	r3, [r7, #12]
   1336c:	0018      	movs	r0, r3
   1336e:	4b42      	ldr	r3, [pc, #264]	; (13478 <spi_write_buffer_wait+0x30c>)
   13370:	4798      	blx	r3
					return STATUS_ABORTED;
   13372:	2304      	movs	r3, #4
   13374:	e07a      	b.n	1346c <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
   13376:	68fb      	ldr	r3, [r7, #12]
   13378:	0018      	movs	r0, r3
   1337a:	4b43      	ldr	r3, [pc, #268]	; (13488 <spi_write_buffer_wait+0x31c>)
   1337c:	4798      	blx	r3
   1337e:	0003      	movs	r3, r0
   13380:	001a      	movs	r2, r3
   13382:	2301      	movs	r3, #1
   13384:	4053      	eors	r3, r2
   13386:	b2db      	uxtb	r3, r3
   13388:	2b00      	cmp	r3, #0
   1338a:	d001      	beq.n	13390 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   1338c:	2312      	movs	r3, #18
   1338e:	e06d      	b.n	1346c <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   13390:	46c0      	nop			; (mov r8, r8)
   13392:	68fb      	ldr	r3, [r7, #12]
   13394:	0018      	movs	r0, r3
   13396:	4b3c      	ldr	r3, [pc, #240]	; (13488 <spi_write_buffer_wait+0x31c>)
   13398:	4798      	blx	r3
   1339a:	0003      	movs	r3, r0
   1339c:	001a      	movs	r2, r3
   1339e:	2301      	movs	r3, #1
   133a0:	4053      	eors	r3, r2
   133a2:	b2db      	uxtb	r3, r3
   133a4:	2b00      	cmp	r3, #0
   133a6:	d1f4      	bne.n	13392 <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   133a8:	2312      	movs	r3, #18
   133aa:	18fa      	adds	r2, r7, r3
   133ac:	68fb      	ldr	r3, [r7, #12]
   133ae:	0011      	movs	r1, r2
   133b0:	0018      	movs	r0, r3
   133b2:	4b36      	ldr	r3, [pc, #216]	; (1348c <spi_write_buffer_wait+0x320>)
   133b4:	4798      	blx	r3
			flush_length--;
   133b6:	2324      	movs	r3, #36	; 0x24
   133b8:	18fb      	adds	r3, r7, r3
   133ba:	881a      	ldrh	r2, [r3, #0]
   133bc:	2324      	movs	r3, #36	; 0x24
   133be:	18fb      	adds	r3, r7, r3
   133c0:	3a01      	subs	r2, #1
   133c2:	801a      	strh	r2, [r3, #0]
	while (length--) {
   133c4:	1dbb      	adds	r3, r7, #6
   133c6:	881b      	ldrh	r3, [r3, #0]
   133c8:	1dba      	adds	r2, r7, #6
   133ca:	1e59      	subs	r1, r3, #1
   133cc:	8011      	strh	r1, [r2, #0]
   133ce:	2b00      	cmp	r3, #0
   133d0:	d000      	beq.n	133d4 <spi_write_buffer_wait+0x268>
   133d2:	e6f8      	b.n	131c6 <spi_write_buffer_wait+0x5a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   133d4:	68fb      	ldr	r3, [r7, #12]
   133d6:	795b      	ldrb	r3, [r3, #5]
   133d8:	2b01      	cmp	r3, #1
   133da:	d10b      	bne.n	133f4 <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   133dc:	46c0      	nop			; (mov r8, r8)
   133de:	68fb      	ldr	r3, [r7, #12]
   133e0:	0018      	movs	r0, r3
   133e2:	4b24      	ldr	r3, [pc, #144]	; (13474 <spi_write_buffer_wait+0x308>)
   133e4:	4798      	blx	r3
   133e6:	0003      	movs	r3, r0
   133e8:	001a      	movs	r2, r3
   133ea:	2301      	movs	r3, #1
   133ec:	4053      	eors	r3, r2
   133ee:	b2db      	uxtb	r3, r3
   133f0:	2b00      	cmp	r3, #0
   133f2:	d1f4      	bne.n	133de <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
   133f4:	68fb      	ldr	r3, [r7, #12]
   133f6:	795b      	ldrb	r3, [r3, #5]
   133f8:	2b00      	cmp	r3, #0
   133fa:	d136      	bne.n	1346a <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
   133fc:	68fb      	ldr	r3, [r7, #12]
   133fe:	79db      	ldrb	r3, [r3, #7]
   13400:	2b00      	cmp	r3, #0
   13402:	d032      	beq.n	1346a <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
   13404:	e02c      	b.n	13460 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   13406:	2300      	movs	r3, #0
   13408:	617b      	str	r3, [r7, #20]
   1340a:	e008      	b.n	1341e <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
   1340c:	68fb      	ldr	r3, [r7, #12]
   1340e:	0018      	movs	r0, r3
   13410:	4b1d      	ldr	r3, [pc, #116]	; (13488 <spi_write_buffer_wait+0x31c>)
   13412:	4798      	blx	r3
   13414:	1e03      	subs	r3, r0, #0
   13416:	d107      	bne.n	13428 <spi_write_buffer_wait+0x2bc>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   13418:	697b      	ldr	r3, [r7, #20]
   1341a:	3301      	adds	r3, #1
   1341c:	617b      	str	r3, [r7, #20]
   1341e:	697b      	ldr	r3, [r7, #20]
   13420:	4a17      	ldr	r2, [pc, #92]	; (13480 <spi_write_buffer_wait+0x314>)
   13422:	4293      	cmp	r3, r2
   13424:	d9f2      	bls.n	1340c <spi_write_buffer_wait+0x2a0>
   13426:	e000      	b.n	1342a <spi_write_buffer_wait+0x2be>
						break;
   13428:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
   1342a:	68fb      	ldr	r3, [r7, #12]
   1342c:	0018      	movs	r0, r3
   1342e:	4b16      	ldr	r3, [pc, #88]	; (13488 <spi_write_buffer_wait+0x31c>)
   13430:	4798      	blx	r3
   13432:	0003      	movs	r3, r0
   13434:	001a      	movs	r2, r3
   13436:	2301      	movs	r3, #1
   13438:	4053      	eors	r3, r2
   1343a:	b2db      	uxtb	r3, r3
   1343c:	2b00      	cmp	r3, #0
   1343e:	d001      	beq.n	13444 <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   13440:	2312      	movs	r3, #18
   13442:	e013      	b.n	1346c <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
   13444:	2310      	movs	r3, #16
   13446:	18fa      	adds	r2, r7, r3
   13448:	68fb      	ldr	r3, [r7, #12]
   1344a:	0011      	movs	r1, r2
   1344c:	0018      	movs	r0, r3
   1344e:	4b0f      	ldr	r3, [pc, #60]	; (1348c <spi_write_buffer_wait+0x320>)
   13450:	4798      	blx	r3
				flush_length--;
   13452:	2324      	movs	r3, #36	; 0x24
   13454:	18fb      	adds	r3, r7, r3
   13456:	881a      	ldrh	r2, [r3, #0]
   13458:	2324      	movs	r3, #36	; 0x24
   1345a:	18fb      	adds	r3, r7, r3
   1345c:	3a01      	subs	r2, #1
   1345e:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
   13460:	2324      	movs	r3, #36	; 0x24
   13462:	18fb      	adds	r3, r7, r3
   13464:	881b      	ldrh	r3, [r3, #0]
   13466:	2b00      	cmp	r3, #0
   13468:	d1cd      	bne.n	13406 <spi_write_buffer_wait+0x29a>
			}
		}
	}
#  endif
	return STATUS_OK;
   1346a:	2300      	movs	r3, #0
}
   1346c:	0018      	movs	r0, r3
   1346e:	46bd      	mov	sp, r7
   13470:	b00a      	add	sp, #40	; 0x28
   13472:	bd80      	pop	{r7, pc}
   13474:	00012969 	.word	0x00012969
   13478:	00012ab1 	.word	0x00012ab1
   1347c:	00012991 	.word	0x00012991
   13480:	00002710 	.word	0x00002710
   13484:	000129e1 	.word	0x000129e1
   13488:	000129b9 	.word	0x000129b9
   1348c:	00012a29 	.word	0x00012a29

00013490 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   13490:	b580      	push	{r7, lr}
   13492:	b084      	sub	sp, #16
   13494:	af00      	add	r7, sp, #0
   13496:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13498:	687b      	ldr	r3, [r7, #4]
   1349a:	681b      	ldr	r3, [r3, #0]
   1349c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1349e:	687b      	ldr	r3, [r7, #4]
   134a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   134a2:	781b      	ldrb	r3, [r3, #0]
   134a4:	b2da      	uxtb	r2, r3
   134a6:	230e      	movs	r3, #14
   134a8:	18fb      	adds	r3, r7, r3
   134aa:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   134ac:	687b      	ldr	r3, [r7, #4]
   134ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   134b0:	1c5a      	adds	r2, r3, #1
   134b2:	687b      	ldr	r3, [r7, #4]
   134b4:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   134b6:	687b      	ldr	r3, [r7, #4]
   134b8:	799b      	ldrb	r3, [r3, #6]
   134ba:	2b01      	cmp	r3, #1
   134bc:	d113      	bne.n	134e6 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   134be:	687b      	ldr	r3, [r7, #4]
   134c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   134c2:	781b      	ldrb	r3, [r3, #0]
   134c4:	b2db      	uxtb	r3, r3
   134c6:	021b      	lsls	r3, r3, #8
   134c8:	b21a      	sxth	r2, r3
   134ca:	230e      	movs	r3, #14
   134cc:	18fb      	adds	r3, r7, r3
   134ce:	2100      	movs	r1, #0
   134d0:	5e5b      	ldrsh	r3, [r3, r1]
   134d2:	4313      	orrs	r3, r2
   134d4:	b21a      	sxth	r2, r3
   134d6:	230e      	movs	r3, #14
   134d8:	18fb      	adds	r3, r7, r3
   134da:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   134dc:	687b      	ldr	r3, [r7, #4]
   134de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   134e0:	1c5a      	adds	r2, r3, #1
   134e2:	687b      	ldr	r3, [r7, #4]
   134e4:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   134e6:	230e      	movs	r3, #14
   134e8:	18fb      	adds	r3, r7, r3
   134ea:	881b      	ldrh	r3, [r3, #0]
   134ec:	05db      	lsls	r3, r3, #23
   134ee:	0dda      	lsrs	r2, r3, #23
   134f0:	68bb      	ldr	r3, [r7, #8]
   134f2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   134f4:	687b      	ldr	r3, [r7, #4]
   134f6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   134f8:	b29b      	uxth	r3, r3
   134fa:	3b01      	subs	r3, #1
   134fc:	b29a      	uxth	r2, r3
   134fe:	687b      	ldr	r3, [r7, #4]
   13500:	869a      	strh	r2, [r3, #52]	; 0x34
}
   13502:	46c0      	nop			; (mov r8, r8)
   13504:	46bd      	mov	sp, r7
   13506:	b004      	add	sp, #16
   13508:	bd80      	pop	{r7, pc}
	...

0001350c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   1350c:	b580      	push	{r7, lr}
   1350e:	b084      	sub	sp, #16
   13510:	af00      	add	r7, sp, #0
   13512:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13514:	687b      	ldr	r3, [r7, #4]
   13516:	681b      	ldr	r3, [r3, #0]
   13518:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   1351a:	4b08      	ldr	r3, [pc, #32]	; (1353c <_spi_write_dummy+0x30>)
   1351c:	881b      	ldrh	r3, [r3, #0]
   1351e:	001a      	movs	r2, r3
   13520:	68fb      	ldr	r3, [r7, #12]
   13522:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   13524:	687b      	ldr	r3, [r7, #4]
   13526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   13528:	b29b      	uxth	r3, r3
   1352a:	3b01      	subs	r3, #1
   1352c:	b29a      	uxth	r2, r3
   1352e:	687b      	ldr	r3, [r7, #4]
   13530:	865a      	strh	r2, [r3, #50]	; 0x32
}
   13532:	46c0      	nop			; (mov r8, r8)
   13534:	46bd      	mov	sp, r7
   13536:	b004      	add	sp, #16
   13538:	bd80      	pop	{r7, pc}
   1353a:	46c0      	nop			; (mov r8, r8)
   1353c:	20000434 	.word	0x20000434

00013540 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   13540:	b580      	push	{r7, lr}
   13542:	b084      	sub	sp, #16
   13544:	af00      	add	r7, sp, #0
   13546:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13548:	687b      	ldr	r3, [r7, #4]
   1354a:	681b      	ldr	r3, [r3, #0]
   1354c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   1354e:	230a      	movs	r3, #10
   13550:	18fb      	adds	r3, r7, r3
   13552:	2200      	movs	r2, #0
   13554:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   13556:	68fb      	ldr	r3, [r7, #12]
   13558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1355a:	230a      	movs	r3, #10
   1355c:	18fb      	adds	r3, r7, r3
   1355e:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   13560:	687b      	ldr	r3, [r7, #4]
   13562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   13564:	b29b      	uxth	r3, r3
   13566:	3b01      	subs	r3, #1
   13568:	b29a      	uxth	r2, r3
   1356a:	687b      	ldr	r3, [r7, #4]
   1356c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   1356e:	46c0      	nop			; (mov r8, r8)
   13570:	46bd      	mov	sp, r7
   13572:	b004      	add	sp, #16
   13574:	bd80      	pop	{r7, pc}

00013576 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   13576:	b580      	push	{r7, lr}
   13578:	b084      	sub	sp, #16
   1357a:	af00      	add	r7, sp, #0
   1357c:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   1357e:	687b      	ldr	r3, [r7, #4]
   13580:	681b      	ldr	r3, [r3, #0]
   13582:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   13584:	68fb      	ldr	r3, [r7, #12]
   13586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13588:	b29a      	uxth	r2, r3
   1358a:	230a      	movs	r3, #10
   1358c:	18fb      	adds	r3, r7, r3
   1358e:	05d2      	lsls	r2, r2, #23
   13590:	0dd2      	lsrs	r2, r2, #23
   13592:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   13594:	687b      	ldr	r3, [r7, #4]
   13596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13598:	220a      	movs	r2, #10
   1359a:	18ba      	adds	r2, r7, r2
   1359c:	8812      	ldrh	r2, [r2, #0]
   1359e:	b2d2      	uxtb	r2, r2
   135a0:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   135a2:	687b      	ldr	r3, [r7, #4]
   135a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   135a6:	1c5a      	adds	r2, r3, #1
   135a8:	687b      	ldr	r3, [r7, #4]
   135aa:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   135ac:	687b      	ldr	r3, [r7, #4]
   135ae:	799b      	ldrb	r3, [r3, #6]
   135b0:	2b01      	cmp	r3, #1
   135b2:	d10d      	bne.n	135d0 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   135b4:	687b      	ldr	r3, [r7, #4]
   135b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   135b8:	220a      	movs	r2, #10
   135ba:	18ba      	adds	r2, r7, r2
   135bc:	8812      	ldrh	r2, [r2, #0]
   135be:	0a12      	lsrs	r2, r2, #8
   135c0:	b292      	uxth	r2, r2
   135c2:	b2d2      	uxtb	r2, r2
   135c4:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   135c6:	687b      	ldr	r3, [r7, #4]
   135c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   135ca:	1c5a      	adds	r2, r3, #1
   135cc:	687b      	ldr	r3, [r7, #4]
   135ce:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   135d0:	687b      	ldr	r3, [r7, #4]
   135d2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   135d4:	b29b      	uxth	r3, r3
   135d6:	3b01      	subs	r3, #1
   135d8:	b29a      	uxth	r2, r3
   135da:	687b      	ldr	r3, [r7, #4]
   135dc:	861a      	strh	r2, [r3, #48]	; 0x30
}
   135de:	46c0      	nop			; (mov r8, r8)
   135e0:	46bd      	mov	sp, r7
   135e2:	b004      	add	sp, #16
   135e4:	bd80      	pop	{r7, pc}
	...

000135e8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   135e8:	b580      	push	{r7, lr}
   135ea:	b086      	sub	sp, #24
   135ec:	af00      	add	r7, sp, #0
   135ee:	0002      	movs	r2, r0
   135f0:	1dfb      	adds	r3, r7, #7
   135f2:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   135f4:	1dfb      	adds	r3, r7, #7
   135f6:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   135f8:	4bb9      	ldr	r3, [pc, #740]	; (138e0 <_spi_interrupt_handler+0x2f8>)
   135fa:	0092      	lsls	r2, r2, #2
   135fc:	58d3      	ldr	r3, [r2, r3]
   135fe:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13600:	697b      	ldr	r3, [r7, #20]
   13602:	681b      	ldr	r3, [r3, #0]
   13604:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   13606:	697b      	ldr	r3, [r7, #20]
   13608:	2237      	movs	r2, #55	; 0x37
   1360a:	5c9a      	ldrb	r2, [r3, r2]
   1360c:	697b      	ldr	r3, [r7, #20]
   1360e:	2136      	movs	r1, #54	; 0x36
   13610:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   13612:	230f      	movs	r3, #15
   13614:	18fb      	adds	r3, r7, r3
   13616:	400a      	ands	r2, r1
   13618:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   1361a:	693b      	ldr	r3, [r7, #16]
   1361c:	7e1b      	ldrb	r3, [r3, #24]
   1361e:	b2da      	uxtb	r2, r3
   13620:	230c      	movs	r3, #12
   13622:	18fb      	adds	r3, r7, r3
   13624:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   13626:	693b      	ldr	r3, [r7, #16]
   13628:	7d9b      	ldrb	r3, [r3, #22]
   1362a:	b2db      	uxtb	r3, r3
   1362c:	b29a      	uxth	r2, r3
   1362e:	230c      	movs	r3, #12
   13630:	18fb      	adds	r3, r7, r3
   13632:	210c      	movs	r1, #12
   13634:	1879      	adds	r1, r7, r1
   13636:	8809      	ldrh	r1, [r1, #0]
   13638:	400a      	ands	r2, r1
   1363a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   1363c:	230c      	movs	r3, #12
   1363e:	18fb      	adds	r3, r7, r3
   13640:	881b      	ldrh	r3, [r3, #0]
   13642:	2201      	movs	r2, #1
   13644:	4013      	ands	r3, r2
   13646:	d041      	beq.n	136cc <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   13648:	697b      	ldr	r3, [r7, #20]
   1364a:	795b      	ldrb	r3, [r3, #5]
   1364c:	2b01      	cmp	r3, #1
   1364e:	d110      	bne.n	13672 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   13650:	697b      	ldr	r3, [r7, #20]
   13652:	7a5b      	ldrb	r3, [r3, #9]
   13654:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   13656:	2b00      	cmp	r3, #0
   13658:	d10b      	bne.n	13672 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   1365a:	697b      	ldr	r3, [r7, #20]
   1365c:	0018      	movs	r0, r3
   1365e:	4ba1      	ldr	r3, [pc, #644]	; (138e4 <_spi_interrupt_handler+0x2fc>)
   13660:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   13662:	697b      	ldr	r3, [r7, #20]
   13664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   13666:	b29b      	uxth	r3, r3
   13668:	2b00      	cmp	r3, #0
   1366a:	d102      	bne.n	13672 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   1366c:	693b      	ldr	r3, [r7, #16]
   1366e:	2201      	movs	r2, #1
   13670:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   13672:	697b      	ldr	r3, [r7, #20]
   13674:	795b      	ldrb	r3, [r3, #5]
		if (0
   13676:	2b01      	cmp	r3, #1
   13678:	d104      	bne.n	13684 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
   1367a:	697b      	ldr	r3, [r7, #20]
   1367c:	7a5b      	ldrb	r3, [r3, #9]
   1367e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   13680:	2b00      	cmp	r3, #0
   13682:	d108      	bne.n	13696 <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
   13684:	697b      	ldr	r3, [r7, #20]
   13686:	795b      	ldrb	r3, [r3, #5]
   13688:	2b00      	cmp	r3, #0
   1368a:	d11f      	bne.n	136cc <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
   1368c:	697b      	ldr	r3, [r7, #20]
   1368e:	7a5b      	ldrb	r3, [r3, #9]
   13690:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
   13692:	2b00      	cmp	r3, #0
   13694:	d01a      	beq.n	136cc <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   13696:	697b      	ldr	r3, [r7, #20]
   13698:	0018      	movs	r0, r3
   1369a:	4b93      	ldr	r3, [pc, #588]	; (138e8 <_spi_interrupt_handler+0x300>)
   1369c:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   136a2:	b29b      	uxth	r3, r3
   136a4:	2b00      	cmp	r3, #0
   136a6:	d111      	bne.n	136cc <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   136a8:	693b      	ldr	r3, [r7, #16]
   136aa:	2201      	movs	r2, #1
   136ac:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   136ae:	697b      	ldr	r3, [r7, #20]
   136b0:	7a5b      	ldrb	r3, [r3, #9]
   136b2:	b2db      	uxtb	r3, r3
   136b4:	2b01      	cmp	r3, #1
   136b6:	d109      	bne.n	136cc <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
   136b8:	697b      	ldr	r3, [r7, #20]
   136ba:	79db      	ldrb	r3, [r3, #7]
   136bc:	2201      	movs	r2, #1
   136be:	4053      	eors	r3, r2
   136c0:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   136c2:	2b00      	cmp	r3, #0
   136c4:	d002      	beq.n	136cc <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   136c6:	693b      	ldr	r3, [r7, #16]
   136c8:	2202      	movs	r2, #2
   136ca:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   136cc:	230c      	movs	r3, #12
   136ce:	18fb      	adds	r3, r7, r3
   136d0:	881b      	ldrh	r3, [r3, #0]
   136d2:	2204      	movs	r2, #4
   136d4:	4013      	ands	r3, r2
   136d6:	d100      	bne.n	136da <_spi_interrupt_handler+0xf2>
   136d8:	e07e      	b.n	137d8 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   136da:	693b      	ldr	r3, [r7, #16]
   136dc:	8b5b      	ldrh	r3, [r3, #26]
   136de:	b29b      	uxth	r3, r3
   136e0:	001a      	movs	r2, r3
   136e2:	2304      	movs	r3, #4
   136e4:	4013      	ands	r3, r2
   136e6:	d022      	beq.n	1372e <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
   136e8:	697b      	ldr	r3, [r7, #20]
   136ea:	7a5b      	ldrb	r3, [r3, #9]
   136ec:	b2db      	uxtb	r3, r3
   136ee:	2b01      	cmp	r3, #1
   136f0:	d014      	beq.n	1371c <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   136f2:	697b      	ldr	r3, [r7, #20]
   136f4:	2238      	movs	r2, #56	; 0x38
   136f6:	211e      	movs	r1, #30
   136f8:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   136fa:	697b      	ldr	r3, [r7, #20]
   136fc:	2203      	movs	r2, #3
   136fe:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	2205      	movs	r2, #5
   13704:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   13706:	230f      	movs	r3, #15
   13708:	18fb      	adds	r3, r7, r3
   1370a:	781b      	ldrb	r3, [r3, #0]
   1370c:	2208      	movs	r2, #8
   1370e:	4013      	ands	r3, r2
   13710:	d004      	beq.n	1371c <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   13712:	697b      	ldr	r3, [r7, #20]
   13714:	699b      	ldr	r3, [r3, #24]
   13716:	697a      	ldr	r2, [r7, #20]
   13718:	0010      	movs	r0, r2
   1371a:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   1371c:	693b      	ldr	r3, [r7, #16]
   1371e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13720:	230a      	movs	r3, #10
   13722:	18fb      	adds	r3, r7, r3
   13724:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   13726:	693b      	ldr	r3, [r7, #16]
   13728:	2204      	movs	r2, #4
   1372a:	835a      	strh	r2, [r3, #26]
   1372c:	e054      	b.n	137d8 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   1372e:	697b      	ldr	r3, [r7, #20]
   13730:	7a5b      	ldrb	r3, [r3, #9]
   13732:	b2db      	uxtb	r3, r3
   13734:	2b01      	cmp	r3, #1
   13736:	d11e      	bne.n	13776 <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   13738:	697b      	ldr	r3, [r7, #20]
   1373a:	0018      	movs	r0, r3
   1373c:	4b6b      	ldr	r3, [pc, #428]	; (138ec <_spi_interrupt_handler+0x304>)
   1373e:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   13740:	697b      	ldr	r3, [r7, #20]
   13742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   13744:	b29b      	uxth	r3, r3
   13746:	2b00      	cmp	r3, #0
   13748:	d146      	bne.n	137d8 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   1374a:	693b      	ldr	r3, [r7, #16]
   1374c:	2204      	movs	r2, #4
   1374e:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   13750:	697b      	ldr	r3, [r7, #20]
   13752:	2238      	movs	r2, #56	; 0x38
   13754:	2100      	movs	r1, #0
   13756:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   13758:	697b      	ldr	r3, [r7, #20]
   1375a:	2203      	movs	r2, #3
   1375c:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   1375e:	230f      	movs	r3, #15
   13760:	18fb      	adds	r3, r7, r3
   13762:	781b      	ldrb	r3, [r3, #0]
   13764:	2201      	movs	r2, #1
   13766:	4013      	ands	r3, r2
   13768:	d036      	beq.n	137d8 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   1376a:	697b      	ldr	r3, [r7, #20]
   1376c:	68db      	ldr	r3, [r3, #12]
   1376e:	697a      	ldr	r2, [r7, #20]
   13770:	0010      	movs	r0, r2
   13772:	4798      	blx	r3
   13774:	e030      	b.n	137d8 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   13776:	697b      	ldr	r3, [r7, #20]
   13778:	0018      	movs	r0, r3
   1377a:	4b5d      	ldr	r3, [pc, #372]	; (138f0 <_spi_interrupt_handler+0x308>)
   1377c:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   1377e:	697b      	ldr	r3, [r7, #20]
   13780:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   13782:	b29b      	uxth	r3, r3
   13784:	2b00      	cmp	r3, #0
   13786:	d127      	bne.n	137d8 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
   13788:	697b      	ldr	r3, [r7, #20]
   1378a:	2238      	movs	r2, #56	; 0x38
   1378c:	2100      	movs	r1, #0
   1378e:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   13790:	693b      	ldr	r3, [r7, #16]
   13792:	2204      	movs	r2, #4
   13794:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   13796:	697b      	ldr	r3, [r7, #20]
   13798:	7a5b      	ldrb	r3, [r3, #9]
   1379a:	b2db      	uxtb	r3, r3
   1379c:	2b02      	cmp	r3, #2
   1379e:	d10b      	bne.n	137b8 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   137a0:	230f      	movs	r3, #15
   137a2:	18fb      	adds	r3, r7, r3
   137a4:	781b      	ldrb	r3, [r3, #0]
   137a6:	2204      	movs	r2, #4
   137a8:	4013      	ands	r3, r2
   137aa:	d015      	beq.n	137d8 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   137ac:	697b      	ldr	r3, [r7, #20]
   137ae:	695b      	ldr	r3, [r3, #20]
   137b0:	697a      	ldr	r2, [r7, #20]
   137b2:	0010      	movs	r0, r2
   137b4:	4798      	blx	r3
   137b6:	e00f      	b.n	137d8 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   137b8:	697b      	ldr	r3, [r7, #20]
   137ba:	7a5b      	ldrb	r3, [r3, #9]
   137bc:	b2db      	uxtb	r3, r3
   137be:	2b00      	cmp	r3, #0
   137c0:	d10a      	bne.n	137d8 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   137c2:	230f      	movs	r3, #15
   137c4:	18fb      	adds	r3, r7, r3
   137c6:	781b      	ldrb	r3, [r3, #0]
   137c8:	2202      	movs	r2, #2
   137ca:	4013      	ands	r3, r2
   137cc:	d004      	beq.n	137d8 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   137ce:	697b      	ldr	r3, [r7, #20]
   137d0:	691b      	ldr	r3, [r3, #16]
   137d2:	697a      	ldr	r2, [r7, #20]
   137d4:	0010      	movs	r0, r2
   137d6:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   137d8:	230c      	movs	r3, #12
   137da:	18fb      	adds	r3, r7, r3
   137dc:	881b      	ldrh	r3, [r3, #0]
   137de:	2202      	movs	r2, #2
   137e0:	4013      	ands	r3, r2
   137e2:	d046      	beq.n	13872 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
   137e4:	697b      	ldr	r3, [r7, #20]
   137e6:	795b      	ldrb	r3, [r3, #5]
   137e8:	2b00      	cmp	r3, #0
   137ea:	d11d      	bne.n	13828 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
   137ec:	693b      	ldr	r3, [r7, #16]
   137ee:	2207      	movs	r2, #7
   137f0:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   137f2:	693b      	ldr	r3, [r7, #16]
   137f4:	2202      	movs	r2, #2
   137f6:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
   137f8:	697b      	ldr	r3, [r7, #20]
   137fa:	2203      	movs	r2, #3
   137fc:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
   137fe:	697b      	ldr	r3, [r7, #20]
   13800:	2200      	movs	r2, #0
   13802:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
   13804:	697b      	ldr	r3, [r7, #20]
   13806:	2200      	movs	r2, #0
   13808:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
   1380a:	697b      	ldr	r3, [r7, #20]
   1380c:	2238      	movs	r2, #56	; 0x38
   1380e:	2100      	movs	r1, #0
   13810:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
   13812:	230f      	movs	r3, #15
   13814:	18fb      	adds	r3, r7, r3
   13816:	781b      	ldrb	r3, [r3, #0]
   13818:	2210      	movs	r2, #16
   1381a:	4013      	ands	r3, r2
   1381c:	d004      	beq.n	13828 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
   1381e:	697b      	ldr	r3, [r7, #20]
   13820:	69db      	ldr	r3, [r3, #28]
   13822:	697a      	ldr	r2, [r7, #20]
   13824:	0010      	movs	r0, r2
   13826:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   13828:	697b      	ldr	r3, [r7, #20]
   1382a:	795b      	ldrb	r3, [r3, #5]
   1382c:	2b01      	cmp	r3, #1
   1382e:	d120      	bne.n	13872 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   13830:	697b      	ldr	r3, [r7, #20]
   13832:	7a5b      	ldrb	r3, [r3, #9]
   13834:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   13836:	2b01      	cmp	r3, #1
   13838:	d11b      	bne.n	13872 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   1383a:	697b      	ldr	r3, [r7, #20]
   1383c:	79db      	ldrb	r3, [r3, #7]
   1383e:	2201      	movs	r2, #1
   13840:	4053      	eors	r3, r2
   13842:	b2db      	uxtb	r3, r3
   13844:	2b00      	cmp	r3, #0
   13846:	d014      	beq.n	13872 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   13848:	693b      	ldr	r3, [r7, #16]
   1384a:	2202      	movs	r2, #2
   1384c:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   1384e:	697b      	ldr	r3, [r7, #20]
   13850:	2203      	movs	r2, #3
   13852:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   13854:	697b      	ldr	r3, [r7, #20]
   13856:	2238      	movs	r2, #56	; 0x38
   13858:	2100      	movs	r1, #0
   1385a:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   1385c:	230f      	movs	r3, #15
   1385e:	18fb      	adds	r3, r7, r3
   13860:	781b      	ldrb	r3, [r3, #0]
   13862:	2201      	movs	r2, #1
   13864:	4013      	ands	r3, r2
   13866:	d004      	beq.n	13872 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   13868:	697b      	ldr	r3, [r7, #20]
   1386a:	68db      	ldr	r3, [r3, #12]
   1386c:	697a      	ldr	r2, [r7, #20]
   1386e:	0010      	movs	r0, r2
   13870:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
   13872:	230c      	movs	r3, #12
   13874:	18fb      	adds	r3, r7, r3
   13876:	881b      	ldrh	r3, [r3, #0]
   13878:	2208      	movs	r2, #8
   1387a:	4013      	ands	r3, r2
   1387c:	d014      	beq.n	138a8 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
   1387e:	697b      	ldr	r3, [r7, #20]
   13880:	795b      	ldrb	r3, [r3, #5]
   13882:	2b00      	cmp	r3, #0
   13884:	d110      	bne.n	138a8 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
   13886:	693b      	ldr	r3, [r7, #16]
   13888:	2208      	movs	r2, #8
   1388a:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
   1388c:	693b      	ldr	r3, [r7, #16]
   1388e:	2208      	movs	r2, #8
   13890:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
   13892:	230f      	movs	r3, #15
   13894:	18fb      	adds	r3, r7, r3
   13896:	781b      	ldrb	r3, [r3, #0]
   13898:	2220      	movs	r2, #32
   1389a:	4013      	ands	r3, r2
   1389c:	d004      	beq.n	138a8 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
   1389e:	697b      	ldr	r3, [r7, #20]
   138a0:	6a1b      	ldr	r3, [r3, #32]
   138a2:	697a      	ldr	r2, [r7, #20]
   138a4:	0010      	movs	r0, r2
   138a6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   138a8:	230c      	movs	r3, #12
   138aa:	18fb      	adds	r3, r7, r3
   138ac:	881b      	ldrh	r3, [r3, #0]
   138ae:	2280      	movs	r2, #128	; 0x80
   138b0:	4013      	ands	r3, r2
   138b2:	d010      	beq.n	138d6 <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   138b4:	693b      	ldr	r3, [r7, #16]
   138b6:	2280      	movs	r2, #128	; 0x80
   138b8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   138ba:	693b      	ldr	r3, [r7, #16]
   138bc:	2280      	movs	r2, #128	; 0x80
   138be:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   138c0:	230f      	movs	r3, #15
   138c2:	18fb      	adds	r3, r7, r3
   138c4:	781b      	ldrb	r3, [r3, #0]
   138c6:	2240      	movs	r2, #64	; 0x40
   138c8:	4013      	ands	r3, r2
   138ca:	d004      	beq.n	138d6 <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   138cc:	697b      	ldr	r3, [r7, #20]
   138ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   138d0:	697a      	ldr	r2, [r7, #20]
   138d2:	0010      	movs	r0, r2
   138d4:	4798      	blx	r3
		}
	}
#  endif
}
   138d6:	46c0      	nop			; (mov r8, r8)
   138d8:	46bd      	mov	sp, r7
   138da:	b006      	add	sp, #24
   138dc:	bd80      	pop	{r7, pc}
   138de:	46c0      	nop			; (mov r8, r8)
   138e0:	2000041c 	.word	0x2000041c
   138e4:	0001350d 	.word	0x0001350d
   138e8:	00013491 	.word	0x00013491
   138ec:	00013541 	.word	0x00013541
   138f0:	00013577 	.word	0x00013577

000138f4 <system_gclk_chan_get_config_defaults>:
{
   138f4:	b580      	push	{r7, lr}
   138f6:	b082      	sub	sp, #8
   138f8:	af00      	add	r7, sp, #0
   138fa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   138fc:	687b      	ldr	r3, [r7, #4]
   138fe:	2200      	movs	r2, #0
   13900:	701a      	strb	r2, [r3, #0]
}
   13902:	46c0      	nop			; (mov r8, r8)
   13904:	46bd      	mov	sp, r7
   13906:	b002      	add	sp, #8
   13908:	bd80      	pop	{r7, pc}
	...

0001390c <system_apb_clock_set_mask>:
{
   1390c:	b580      	push	{r7, lr}
   1390e:	b082      	sub	sp, #8
   13910:	af00      	add	r7, sp, #0
   13912:	0002      	movs	r2, r0
   13914:	6039      	str	r1, [r7, #0]
   13916:	1dfb      	adds	r3, r7, #7
   13918:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1391a:	1dfb      	adds	r3, r7, #7
   1391c:	781b      	ldrb	r3, [r3, #0]
   1391e:	2b01      	cmp	r3, #1
   13920:	d00a      	beq.n	13938 <system_apb_clock_set_mask+0x2c>
   13922:	2b02      	cmp	r3, #2
   13924:	d00f      	beq.n	13946 <system_apb_clock_set_mask+0x3a>
   13926:	2b00      	cmp	r3, #0
   13928:	d114      	bne.n	13954 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1392a:	4b0e      	ldr	r3, [pc, #56]	; (13964 <system_apb_clock_set_mask+0x58>)
   1392c:	4a0d      	ldr	r2, [pc, #52]	; (13964 <system_apb_clock_set_mask+0x58>)
   1392e:	6991      	ldr	r1, [r2, #24]
   13930:	683a      	ldr	r2, [r7, #0]
   13932:	430a      	orrs	r2, r1
   13934:	619a      	str	r2, [r3, #24]
			break;
   13936:	e00f      	b.n	13958 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   13938:	4b0a      	ldr	r3, [pc, #40]	; (13964 <system_apb_clock_set_mask+0x58>)
   1393a:	4a0a      	ldr	r2, [pc, #40]	; (13964 <system_apb_clock_set_mask+0x58>)
   1393c:	69d1      	ldr	r1, [r2, #28]
   1393e:	683a      	ldr	r2, [r7, #0]
   13940:	430a      	orrs	r2, r1
   13942:	61da      	str	r2, [r3, #28]
			break;
   13944:	e008      	b.n	13958 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   13946:	4b07      	ldr	r3, [pc, #28]	; (13964 <system_apb_clock_set_mask+0x58>)
   13948:	4a06      	ldr	r2, [pc, #24]	; (13964 <system_apb_clock_set_mask+0x58>)
   1394a:	6a11      	ldr	r1, [r2, #32]
   1394c:	683a      	ldr	r2, [r7, #0]
   1394e:	430a      	orrs	r2, r1
   13950:	621a      	str	r2, [r3, #32]
			break;
   13952:	e001      	b.n	13958 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   13954:	2317      	movs	r3, #23
   13956:	e000      	b.n	1395a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   13958:	2300      	movs	r3, #0
}
   1395a:	0018      	movs	r0, r3
   1395c:	46bd      	mov	sp, r7
   1395e:	b002      	add	sp, #8
   13960:	bd80      	pop	{r7, pc}
   13962:	46c0      	nop			; (mov r8, r8)
   13964:	40000400 	.word	0x40000400

00013968 <system_pinmux_get_config_defaults>:
{
   13968:	b580      	push	{r7, lr}
   1396a:	b082      	sub	sp, #8
   1396c:	af00      	add	r7, sp, #0
   1396e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   13970:	687b      	ldr	r3, [r7, #4]
   13972:	2280      	movs	r2, #128	; 0x80
   13974:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13976:	687b      	ldr	r3, [r7, #4]
   13978:	2200      	movs	r2, #0
   1397a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1397c:	687b      	ldr	r3, [r7, #4]
   1397e:	2201      	movs	r2, #1
   13980:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   13982:	687b      	ldr	r3, [r7, #4]
   13984:	2200      	movs	r2, #0
   13986:	70da      	strb	r2, [r3, #3]
}
   13988:	46c0      	nop			; (mov r8, r8)
   1398a:	46bd      	mov	sp, r7
   1398c:	b002      	add	sp, #8
   1398e:	bd80      	pop	{r7, pc}

00013990 <system_is_debugger_present>:
{
   13990:	b580      	push	{r7, lr}
   13992:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   13994:	4b05      	ldr	r3, [pc, #20]	; (139ac <system_is_debugger_present+0x1c>)
   13996:	789b      	ldrb	r3, [r3, #2]
   13998:	b2db      	uxtb	r3, r3
   1399a:	001a      	movs	r2, r3
   1399c:	2302      	movs	r3, #2
   1399e:	4013      	ands	r3, r2
   139a0:	1e5a      	subs	r2, r3, #1
   139a2:	4193      	sbcs	r3, r2
   139a4:	b2db      	uxtb	r3, r3
}
   139a6:	0018      	movs	r0, r3
   139a8:	46bd      	mov	sp, r7
   139aa:	bd80      	pop	{r7, pc}
   139ac:	41002000 	.word	0x41002000

000139b0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   139b0:	b580      	push	{r7, lr}
   139b2:	b084      	sub	sp, #16
   139b4:	af00      	add	r7, sp, #0
   139b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   139b8:	687b      	ldr	r3, [r7, #4]
   139ba:	681b      	ldr	r3, [r3, #0]
   139bc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   139be:	68fb      	ldr	r3, [r7, #12]
   139c0:	69db      	ldr	r3, [r3, #28]
   139c2:	1e5a      	subs	r2, r3, #1
   139c4:	4193      	sbcs	r3, r2
   139c6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   139c8:	0018      	movs	r0, r3
   139ca:	46bd      	mov	sp, r7
   139cc:	b004      	add	sp, #16
   139ce:	bd80      	pop	{r7, pc}

000139d0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   139d0:	b580      	push	{r7, lr}
   139d2:	b082      	sub	sp, #8
   139d4:	af00      	add	r7, sp, #0
   139d6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   139d8:	46c0      	nop			; (mov r8, r8)
   139da:	687b      	ldr	r3, [r7, #4]
   139dc:	0018      	movs	r0, r3
   139de:	4b04      	ldr	r3, [pc, #16]	; (139f0 <_usart_wait_for_sync+0x20>)
   139e0:	4798      	blx	r3
   139e2:	1e03      	subs	r3, r0, #0
   139e4:	d1f9      	bne.n	139da <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   139e6:	46c0      	nop			; (mov r8, r8)
   139e8:	46bd      	mov	sp, r7
   139ea:	b002      	add	sp, #8
   139ec:	bd80      	pop	{r7, pc}
   139ee:	46c0      	nop			; (mov r8, r8)
   139f0:	000139b1 	.word	0x000139b1

000139f4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   139f4:	b5b0      	push	{r4, r5, r7, lr}
   139f6:	b08c      	sub	sp, #48	; 0x30
   139f8:	af02      	add	r7, sp, #8
   139fa:	6078      	str	r0, [r7, #4]
   139fc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   139fe:	687b      	ldr	r3, [r7, #4]
   13a00:	681b      	ldr	r3, [r3, #0]
   13a02:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13a04:	687b      	ldr	r3, [r7, #4]
   13a06:	681b      	ldr	r3, [r3, #0]
   13a08:	0018      	movs	r0, r3
   13a0a:	4bab      	ldr	r3, [pc, #684]	; (13cb8 <_usart_set_config+0x2c4>)
   13a0c:	4798      	blx	r3
   13a0e:	0003      	movs	r3, r0
   13a10:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13a12:	697b      	ldr	r3, [r7, #20]
   13a14:	3314      	adds	r3, #20
   13a16:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   13a18:	2300      	movs	r3, #0
   13a1a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   13a1c:	2300      	movs	r3, #0
   13a1e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   13a20:	230a      	movs	r3, #10
   13a22:	18fb      	adds	r3, r7, r3
   13a24:	2200      	movs	r2, #0
   13a26:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13a28:	231f      	movs	r3, #31
   13a2a:	18fb      	adds	r3, r7, r3
   13a2c:	2200      	movs	r2, #0
   13a2e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   13a30:	231e      	movs	r3, #30
   13a32:	18fb      	adds	r3, r7, r3
   13a34:	2210      	movs	r2, #16
   13a36:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   13a38:	683b      	ldr	r3, [r7, #0]
   13a3a:	8a1b      	ldrh	r3, [r3, #16]
   13a3c:	2280      	movs	r2, #128	; 0x80
   13a3e:	01d2      	lsls	r2, r2, #7
   13a40:	4293      	cmp	r3, r2
   13a42:	d01c      	beq.n	13a7e <_usart_set_config+0x8a>
   13a44:	2280      	movs	r2, #128	; 0x80
   13a46:	01d2      	lsls	r2, r2, #7
   13a48:	4293      	cmp	r3, r2
   13a4a:	dc06      	bgt.n	13a5a <_usart_set_config+0x66>
   13a4c:	2b00      	cmp	r3, #0
   13a4e:	d00d      	beq.n	13a6c <_usart_set_config+0x78>
   13a50:	2280      	movs	r2, #128	; 0x80
   13a52:	0192      	lsls	r2, r2, #6
   13a54:	4293      	cmp	r3, r2
   13a56:	d024      	beq.n	13aa2 <_usart_set_config+0xae>
   13a58:	e035      	b.n	13ac6 <_usart_set_config+0xd2>
   13a5a:	22c0      	movs	r2, #192	; 0xc0
   13a5c:	01d2      	lsls	r2, r2, #7
   13a5e:	4293      	cmp	r3, r2
   13a60:	d028      	beq.n	13ab4 <_usart_set_config+0xc0>
   13a62:	2280      	movs	r2, #128	; 0x80
   13a64:	0212      	lsls	r2, r2, #8
   13a66:	4293      	cmp	r3, r2
   13a68:	d012      	beq.n	13a90 <_usart_set_config+0x9c>
   13a6a:	e02c      	b.n	13ac6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13a6c:	231f      	movs	r3, #31
   13a6e:	18fb      	adds	r3, r7, r3
   13a70:	2200      	movs	r2, #0
   13a72:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   13a74:	231e      	movs	r3, #30
   13a76:	18fb      	adds	r3, r7, r3
   13a78:	2210      	movs	r2, #16
   13a7a:	701a      	strb	r2, [r3, #0]
			break;
   13a7c:	e023      	b.n	13ac6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13a7e:	231f      	movs	r3, #31
   13a80:	18fb      	adds	r3, r7, r3
   13a82:	2200      	movs	r2, #0
   13a84:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   13a86:	231e      	movs	r3, #30
   13a88:	18fb      	adds	r3, r7, r3
   13a8a:	2208      	movs	r2, #8
   13a8c:	701a      	strb	r2, [r3, #0]
			break;
   13a8e:	e01a      	b.n	13ac6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13a90:	231f      	movs	r3, #31
   13a92:	18fb      	adds	r3, r7, r3
   13a94:	2200      	movs	r2, #0
   13a96:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   13a98:	231e      	movs	r3, #30
   13a9a:	18fb      	adds	r3, r7, r3
   13a9c:	2203      	movs	r2, #3
   13a9e:	701a      	strb	r2, [r3, #0]
			break;
   13aa0:	e011      	b.n	13ac6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   13aa2:	231f      	movs	r3, #31
   13aa4:	18fb      	adds	r3, r7, r3
   13aa6:	2201      	movs	r2, #1
   13aa8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   13aaa:	231e      	movs	r3, #30
   13aac:	18fb      	adds	r3, r7, r3
   13aae:	2210      	movs	r2, #16
   13ab0:	701a      	strb	r2, [r3, #0]
			break;
   13ab2:	e008      	b.n	13ac6 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   13ab4:	231f      	movs	r3, #31
   13ab6:	18fb      	adds	r3, r7, r3
   13ab8:	2201      	movs	r2, #1
   13aba:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   13abc:	231e      	movs	r3, #30
   13abe:	18fb      	adds	r3, r7, r3
   13ac0:	2208      	movs	r2, #8
   13ac2:	701a      	strb	r2, [r3, #0]
			break;
   13ac4:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   13ac6:	683b      	ldr	r3, [r7, #0]
   13ac8:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   13aca:	683b      	ldr	r3, [r7, #0]
   13acc:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   13ace:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   13ad0:	683b      	ldr	r3, [r7, #0]
   13ad2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   13ad4:	4313      	orrs	r3, r2
		config->sample_rate |
   13ad6:	683a      	ldr	r2, [r7, #0]
   13ad8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   13ada:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   13adc:	683a      	ldr	r2, [r7, #0]
   13ade:	7e12      	ldrb	r2, [r2, #24]
   13ae0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   13ae2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   13ae4:	683a      	ldr	r2, [r7, #0]
   13ae6:	2126      	movs	r1, #38	; 0x26
   13ae8:	5c52      	ldrb	r2, [r2, r1]
   13aea:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   13aec:	4313      	orrs	r3, r2
   13aee:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   13af0:	231d      	movs	r3, #29
   13af2:	18fb      	adds	r3, r7, r3
   13af4:	2200      	movs	r2, #0
   13af6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   13af8:	683b      	ldr	r3, [r7, #0]
   13afa:	685b      	ldr	r3, [r3, #4]
   13afc:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   13afe:	68fb      	ldr	r3, [r7, #12]
   13b00:	2b00      	cmp	r3, #0
   13b02:	d01e      	beq.n	13b42 <_usart_set_config+0x14e>
   13b04:	2280      	movs	r2, #128	; 0x80
   13b06:	0552      	lsls	r2, r2, #21
   13b08:	4293      	cmp	r3, r2
   13b0a:	d14f      	bne.n	13bac <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   13b0c:	683b      	ldr	r3, [r7, #0]
   13b0e:	2227      	movs	r2, #39	; 0x27
   13b10:	5c9b      	ldrb	r3, [r3, r2]
   13b12:	2201      	movs	r2, #1
   13b14:	4053      	eors	r3, r2
   13b16:	b2db      	uxtb	r3, r3
   13b18:	2b00      	cmp	r3, #0
   13b1a:	d046      	beq.n	13baa <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   13b1c:	683b      	ldr	r3, [r7, #0]
   13b1e:	6a1d      	ldr	r5, [r3, #32]
   13b20:	693b      	ldr	r3, [r7, #16]
   13b22:	b2db      	uxtb	r3, r3
   13b24:	0018      	movs	r0, r3
   13b26:	4b65      	ldr	r3, [pc, #404]	; (13cbc <_usart_set_config+0x2c8>)
   13b28:	4798      	blx	r3
   13b2a:	0001      	movs	r1, r0
   13b2c:	231d      	movs	r3, #29
   13b2e:	18fc      	adds	r4, r7, r3
   13b30:	230a      	movs	r3, #10
   13b32:	18fb      	adds	r3, r7, r3
   13b34:	001a      	movs	r2, r3
   13b36:	0028      	movs	r0, r5
   13b38:	4b61      	ldr	r3, [pc, #388]	; (13cc0 <_usart_set_config+0x2cc>)
   13b3a:	4798      	blx	r3
   13b3c:	0003      	movs	r3, r0
   13b3e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   13b40:	e033      	b.n	13baa <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   13b42:	683b      	ldr	r3, [r7, #0]
   13b44:	2227      	movs	r2, #39	; 0x27
   13b46:	5c9b      	ldrb	r3, [r3, r2]
   13b48:	2b00      	cmp	r3, #0
   13b4a:	d014      	beq.n	13b76 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   13b4c:	683b      	ldr	r3, [r7, #0]
   13b4e:	6a18      	ldr	r0, [r3, #32]
   13b50:	683b      	ldr	r3, [r7, #0]
   13b52:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   13b54:	231d      	movs	r3, #29
   13b56:	18fc      	adds	r4, r7, r3
   13b58:	231f      	movs	r3, #31
   13b5a:	18fb      	adds	r3, r7, r3
   13b5c:	781d      	ldrb	r5, [r3, #0]
   13b5e:	230a      	movs	r3, #10
   13b60:	18fa      	adds	r2, r7, r3
   13b62:	231e      	movs	r3, #30
   13b64:	18fb      	adds	r3, r7, r3
   13b66:	781b      	ldrb	r3, [r3, #0]
   13b68:	9300      	str	r3, [sp, #0]
   13b6a:	002b      	movs	r3, r5
   13b6c:	4d55      	ldr	r5, [pc, #340]	; (13cc4 <_usart_set_config+0x2d0>)
   13b6e:	47a8      	blx	r5
   13b70:	0003      	movs	r3, r0
   13b72:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   13b74:	e01a      	b.n	13bac <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   13b76:	683b      	ldr	r3, [r7, #0]
   13b78:	6a1d      	ldr	r5, [r3, #32]
   13b7a:	693b      	ldr	r3, [r7, #16]
   13b7c:	b2db      	uxtb	r3, r3
   13b7e:	0018      	movs	r0, r3
   13b80:	4b4e      	ldr	r3, [pc, #312]	; (13cbc <_usart_set_config+0x2c8>)
   13b82:	4798      	blx	r3
				status_code =
   13b84:	231d      	movs	r3, #29
   13b86:	18fc      	adds	r4, r7, r3
   13b88:	231f      	movs	r3, #31
   13b8a:	18fb      	adds	r3, r7, r3
   13b8c:	7819      	ldrb	r1, [r3, #0]
   13b8e:	230a      	movs	r3, #10
   13b90:	18fa      	adds	r2, r7, r3
   13b92:	231e      	movs	r3, #30
   13b94:	18fb      	adds	r3, r7, r3
   13b96:	781b      	ldrb	r3, [r3, #0]
   13b98:	9300      	str	r3, [sp, #0]
   13b9a:	000b      	movs	r3, r1
   13b9c:	0001      	movs	r1, r0
   13b9e:	0028      	movs	r0, r5
   13ba0:	4d48      	ldr	r5, [pc, #288]	; (13cc4 <_usart_set_config+0x2d0>)
   13ba2:	47a8      	blx	r5
   13ba4:	0003      	movs	r3, r0
   13ba6:	7023      	strb	r3, [r4, #0]
			break;
   13ba8:	e000      	b.n	13bac <_usart_set_config+0x1b8>
			break;
   13baa:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   13bac:	231d      	movs	r3, #29
   13bae:	18fb      	adds	r3, r7, r3
   13bb0:	781b      	ldrb	r3, [r3, #0]
   13bb2:	2b00      	cmp	r3, #0
   13bb4:	d003      	beq.n	13bbe <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   13bb6:	231d      	movs	r3, #29
   13bb8:	18fb      	adds	r3, r7, r3
   13bba:	781b      	ldrb	r3, [r3, #0]
   13bbc:	e077      	b.n	13cae <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   13bbe:	683b      	ldr	r3, [r7, #0]
   13bc0:	7e5b      	ldrb	r3, [r3, #25]
   13bc2:	2b00      	cmp	r3, #0
   13bc4:	d003      	beq.n	13bce <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   13bc6:	683b      	ldr	r3, [r7, #0]
   13bc8:	7e9a      	ldrb	r2, [r3, #26]
   13bca:	69bb      	ldr	r3, [r7, #24]
   13bcc:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13bce:	687b      	ldr	r3, [r7, #4]
   13bd0:	0018      	movs	r0, r3
   13bd2:	4b3d      	ldr	r3, [pc, #244]	; (13cc8 <_usart_set_config+0x2d4>)
   13bd4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   13bd6:	230a      	movs	r3, #10
   13bd8:	18fb      	adds	r3, r7, r3
   13bda:	881a      	ldrh	r2, [r3, #0]
   13bdc:	69bb      	ldr	r3, [r7, #24]
   13bde:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   13be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13be2:	68fb      	ldr	r3, [r7, #12]
   13be4:	4313      	orrs	r3, r2
   13be6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   13be8:	683b      	ldr	r3, [r7, #0]
   13bea:	2227      	movs	r2, #39	; 0x27
   13bec:	5c9b      	ldrb	r3, [r3, r2]
   13bee:	2201      	movs	r2, #1
   13bf0:	4053      	eors	r3, r2
   13bf2:	b2db      	uxtb	r3, r3
   13bf4:	2b00      	cmp	r3, #0
   13bf6:	d003      	beq.n	13c00 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   13bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13bfa:	2204      	movs	r2, #4
   13bfc:	4313      	orrs	r3, r2
   13bfe:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   13c00:	683b      	ldr	r3, [r7, #0]
   13c02:	7e5b      	ldrb	r3, [r3, #25]
   13c04:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   13c06:	683b      	ldr	r3, [r7, #0]
   13c08:	7f1b      	ldrb	r3, [r3, #28]
   13c0a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   13c0c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   13c0e:	683b      	ldr	r3, [r7, #0]
   13c10:	7f5b      	ldrb	r3, [r3, #29]
   13c12:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   13c14:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   13c16:	683b      	ldr	r3, [r7, #0]
   13c18:	2124      	movs	r1, #36	; 0x24
   13c1a:	5c5b      	ldrb	r3, [r3, r1]
   13c1c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   13c1e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   13c20:	683b      	ldr	r3, [r7, #0]
   13c22:	2125      	movs	r1, #37	; 0x25
   13c24:	5c5b      	ldrb	r3, [r3, r1]
   13c26:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   13c28:	4313      	orrs	r3, r2
	ctrlb =  
   13c2a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   13c2c:	683b      	ldr	r3, [r7, #0]
   13c2e:	7a9b      	ldrb	r3, [r3, #10]
   13c30:	001a      	movs	r2, r3
   13c32:	6a3b      	ldr	r3, [r7, #32]
   13c34:	4313      	orrs	r3, r2
   13c36:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   13c38:	683b      	ldr	r3, [r7, #0]
   13c3a:	7adb      	ldrb	r3, [r3, #11]
   13c3c:	001a      	movs	r2, r3
   13c3e:	6a3b      	ldr	r3, [r7, #32]
   13c40:	4313      	orrs	r3, r2
   13c42:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   13c44:	683b      	ldr	r3, [r7, #0]
   13c46:	891b      	ldrh	r3, [r3, #8]
   13c48:	2bff      	cmp	r3, #255	; 0xff
   13c4a:	d00b      	beq.n	13c64 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   13c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13c4e:	2280      	movs	r2, #128	; 0x80
   13c50:	0452      	lsls	r2, r2, #17
   13c52:	4313      	orrs	r3, r2
   13c54:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   13c56:	683b      	ldr	r3, [r7, #0]
   13c58:	891b      	ldrh	r3, [r3, #8]
   13c5a:	001a      	movs	r2, r3
   13c5c:	6a3b      	ldr	r3, [r7, #32]
   13c5e:	4313      	orrs	r3, r2
   13c60:	623b      	str	r3, [r7, #32]
   13c62:	e008      	b.n	13c76 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   13c64:	683b      	ldr	r3, [r7, #0]
   13c66:	7edb      	ldrb	r3, [r3, #27]
   13c68:	2b00      	cmp	r3, #0
   13c6a:	d004      	beq.n	13c76 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   13c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13c6e:	2280      	movs	r2, #128	; 0x80
   13c70:	04d2      	lsls	r2, r2, #19
   13c72:	4313      	orrs	r3, r2
   13c74:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   13c76:	683b      	ldr	r3, [r7, #0]
   13c78:	222c      	movs	r2, #44	; 0x2c
   13c7a:	5c9b      	ldrb	r3, [r3, r2]
   13c7c:	2b00      	cmp	r3, #0
   13c7e:	d103      	bne.n	13c88 <_usart_set_config+0x294>
   13c80:	4b12      	ldr	r3, [pc, #72]	; (13ccc <_usart_set_config+0x2d8>)
   13c82:	4798      	blx	r3
   13c84:	1e03      	subs	r3, r0, #0
   13c86:	d003      	beq.n	13c90 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   13c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13c8a:	2280      	movs	r2, #128	; 0x80
   13c8c:	4313      	orrs	r3, r2
   13c8e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13c90:	687b      	ldr	r3, [r7, #4]
   13c92:	0018      	movs	r0, r3
   13c94:	4b0c      	ldr	r3, [pc, #48]	; (13cc8 <_usart_set_config+0x2d4>)
   13c96:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   13c98:	69bb      	ldr	r3, [r7, #24]
   13c9a:	6a3a      	ldr	r2, [r7, #32]
   13c9c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13c9e:	687b      	ldr	r3, [r7, #4]
   13ca0:	0018      	movs	r0, r3
   13ca2:	4b09      	ldr	r3, [pc, #36]	; (13cc8 <_usart_set_config+0x2d4>)
   13ca4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   13ca6:	69bb      	ldr	r3, [r7, #24]
   13ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13caa:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   13cac:	2300      	movs	r3, #0
}
   13cae:	0018      	movs	r0, r3
   13cb0:	46bd      	mov	sp, r7
   13cb2:	b00a      	add	sp, #40	; 0x28
   13cb4:	bdb0      	pop	{r4, r5, r7, pc}
   13cb6:	46c0      	nop			; (mov r8, r8)
   13cb8:	00012629 	.word	0x00012629
   13cbc:	00015179 	.word	0x00015179
   13cc0:	000121a3 	.word	0x000121a3
   13cc4:	00012221 	.word	0x00012221
   13cc8:	000139d1 	.word	0x000139d1
   13ccc:	00013991 	.word	0x00013991

00013cd0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   13cd0:	b590      	push	{r4, r7, lr}
   13cd2:	b093      	sub	sp, #76	; 0x4c
   13cd4:	af00      	add	r7, sp, #0
   13cd6:	60f8      	str	r0, [r7, #12]
   13cd8:	60b9      	str	r1, [r7, #8]
   13cda:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   13cdc:	233b      	movs	r3, #59	; 0x3b
   13cde:	18fb      	adds	r3, r7, r3
   13ce0:	2200      	movs	r2, #0
   13ce2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   13ce4:	68fb      	ldr	r3, [r7, #12]
   13ce6:	68ba      	ldr	r2, [r7, #8]
   13ce8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13cea:	68fb      	ldr	r3, [r7, #12]
   13cec:	681b      	ldr	r3, [r3, #0]
   13cee:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13cf0:	68fb      	ldr	r3, [r7, #12]
   13cf2:	681b      	ldr	r3, [r3, #0]
   13cf4:	0018      	movs	r0, r3
   13cf6:	4b86      	ldr	r3, [pc, #536]	; (13f10 <usart_init+0x240>)
   13cf8:	4798      	blx	r3
   13cfa:	0003      	movs	r3, r0
   13cfc:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   13cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13d00:	3302      	adds	r3, #2
   13d02:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13d06:	3314      	adds	r3, #20
   13d08:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   13d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13d0c:	681b      	ldr	r3, [r3, #0]
   13d0e:	2201      	movs	r2, #1
   13d10:	4013      	ands	r3, r2
   13d12:	d001      	beq.n	13d18 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   13d14:	2305      	movs	r3, #5
   13d16:	e0f6      	b.n	13f06 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   13d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13d1a:	681b      	ldr	r3, [r3, #0]
   13d1c:	2202      	movs	r2, #2
   13d1e:	4013      	ands	r3, r2
   13d20:	d001      	beq.n	13d26 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   13d22:	231c      	movs	r3, #28
   13d24:	e0ef      	b.n	13f06 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   13d26:	2201      	movs	r2, #1
   13d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13d2a:	409a      	lsls	r2, r3
   13d2c:	0013      	movs	r3, r2
   13d2e:	0019      	movs	r1, r3
   13d30:	2002      	movs	r0, #2
   13d32:	4b78      	ldr	r3, [pc, #480]	; (13f14 <usart_init+0x244>)
   13d34:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   13d36:	2324      	movs	r3, #36	; 0x24
   13d38:	18fb      	adds	r3, r7, r3
   13d3a:	0018      	movs	r0, r3
   13d3c:	4b76      	ldr	r3, [pc, #472]	; (13f18 <usart_init+0x248>)
   13d3e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   13d40:	687b      	ldr	r3, [r7, #4]
   13d42:	222d      	movs	r2, #45	; 0x2d
   13d44:	5c9a      	ldrb	r2, [r3, r2]
   13d46:	2324      	movs	r3, #36	; 0x24
   13d48:	18fb      	adds	r3, r7, r3
   13d4a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   13d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13d4e:	b2db      	uxtb	r3, r3
   13d50:	2224      	movs	r2, #36	; 0x24
   13d52:	18ba      	adds	r2, r7, r2
   13d54:	0011      	movs	r1, r2
   13d56:	0018      	movs	r0, r3
   13d58:	4b70      	ldr	r3, [pc, #448]	; (13f1c <usart_init+0x24c>)
   13d5a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   13d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13d5e:	b2db      	uxtb	r3, r3
   13d60:	0018      	movs	r0, r3
   13d62:	4b6f      	ldr	r3, [pc, #444]	; (13f20 <usart_init+0x250>)
   13d64:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   13d66:	687b      	ldr	r3, [r7, #4]
   13d68:	222d      	movs	r2, #45	; 0x2d
   13d6a:	5c9b      	ldrb	r3, [r3, r2]
   13d6c:	2100      	movs	r1, #0
   13d6e:	0018      	movs	r0, r3
   13d70:	4b6c      	ldr	r3, [pc, #432]	; (13f24 <usart_init+0x254>)
   13d72:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   13d74:	687b      	ldr	r3, [r7, #4]
   13d76:	7ada      	ldrb	r2, [r3, #11]
   13d78:	68fb      	ldr	r3, [r7, #12]
   13d7a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   13d7c:	687b      	ldr	r3, [r7, #4]
   13d7e:	2224      	movs	r2, #36	; 0x24
   13d80:	5c9a      	ldrb	r2, [r3, r2]
   13d82:	68fb      	ldr	r3, [r7, #12]
   13d84:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   13d86:	687b      	ldr	r3, [r7, #4]
   13d88:	2225      	movs	r2, #37	; 0x25
   13d8a:	5c9a      	ldrb	r2, [r3, r2]
   13d8c:	68fb      	ldr	r3, [r7, #12]
   13d8e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   13d90:	687b      	ldr	r3, [r7, #4]
   13d92:	7eda      	ldrb	r2, [r3, #27]
   13d94:	68fb      	ldr	r3, [r7, #12]
   13d96:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   13d98:	687b      	ldr	r3, [r7, #4]
   13d9a:	7f1a      	ldrb	r2, [r3, #28]
   13d9c:	68fb      	ldr	r3, [r7, #12]
   13d9e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   13da0:	233b      	movs	r3, #59	; 0x3b
   13da2:	18fc      	adds	r4, r7, r3
   13da4:	687a      	ldr	r2, [r7, #4]
   13da6:	68fb      	ldr	r3, [r7, #12]
   13da8:	0011      	movs	r1, r2
   13daa:	0018      	movs	r0, r3
   13dac:	4b5e      	ldr	r3, [pc, #376]	; (13f28 <usart_init+0x258>)
   13dae:	4798      	blx	r3
   13db0:	0003      	movs	r3, r0
   13db2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   13db4:	233b      	movs	r3, #59	; 0x3b
   13db6:	18fb      	adds	r3, r7, r3
   13db8:	781b      	ldrb	r3, [r3, #0]
   13dba:	2b00      	cmp	r3, #0
   13dbc:	d003      	beq.n	13dc6 <usart_init+0xf6>
		return status_code;
   13dbe:	233b      	movs	r3, #59	; 0x3b
   13dc0:	18fb      	adds	r3, r7, r3
   13dc2:	781b      	ldrb	r3, [r3, #0]
   13dc4:	e09f      	b.n	13f06 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   13dc6:	2320      	movs	r3, #32
   13dc8:	18fb      	adds	r3, r7, r3
   13dca:	0018      	movs	r0, r3
   13dcc:	4b57      	ldr	r3, [pc, #348]	; (13f2c <usart_init+0x25c>)
   13dce:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13dd0:	2320      	movs	r3, #32
   13dd2:	18fb      	adds	r3, r7, r3
   13dd4:	2200      	movs	r2, #0
   13dd6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   13dd8:	2320      	movs	r3, #32
   13dda:	18fb      	adds	r3, r7, r3
   13ddc:	2200      	movs	r2, #0
   13dde:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   13de0:	687b      	ldr	r3, [r7, #4]
   13de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   13de4:	2310      	movs	r3, #16
   13de6:	18fb      	adds	r3, r7, r3
   13de8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   13dea:	687b      	ldr	r3, [r7, #4]
   13dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   13dee:	2310      	movs	r3, #16
   13df0:	18fb      	adds	r3, r7, r3
   13df2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   13df4:	687b      	ldr	r3, [r7, #4]
   13df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   13df8:	2310      	movs	r3, #16
   13dfa:	18fb      	adds	r3, r7, r3
   13dfc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   13dfe:	687b      	ldr	r3, [r7, #4]
   13e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   13e02:	2310      	movs	r3, #16
   13e04:	18fb      	adds	r3, r7, r3
   13e06:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   13e08:	2347      	movs	r3, #71	; 0x47
   13e0a:	18fb      	adds	r3, r7, r3
   13e0c:	2200      	movs	r2, #0
   13e0e:	701a      	strb	r2, [r3, #0]
   13e10:	e02c      	b.n	13e6c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   13e12:	2347      	movs	r3, #71	; 0x47
   13e14:	18fb      	adds	r3, r7, r3
   13e16:	781a      	ldrb	r2, [r3, #0]
   13e18:	2310      	movs	r3, #16
   13e1a:	18fb      	adds	r3, r7, r3
   13e1c:	0092      	lsls	r2, r2, #2
   13e1e:	58d3      	ldr	r3, [r2, r3]
   13e20:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   13e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13e24:	2b00      	cmp	r3, #0
   13e26:	d109      	bne.n	13e3c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   13e28:	2347      	movs	r3, #71	; 0x47
   13e2a:	18fb      	adds	r3, r7, r3
   13e2c:	781a      	ldrb	r2, [r3, #0]
   13e2e:	68bb      	ldr	r3, [r7, #8]
   13e30:	0011      	movs	r1, r2
   13e32:	0018      	movs	r0, r3
   13e34:	4b3e      	ldr	r3, [pc, #248]	; (13f30 <usart_init+0x260>)
   13e36:	4798      	blx	r3
   13e38:	0003      	movs	r3, r0
   13e3a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   13e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13e3e:	3301      	adds	r3, #1
   13e40:	d00d      	beq.n	13e5e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   13e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13e44:	b2da      	uxtb	r2, r3
   13e46:	2320      	movs	r3, #32
   13e48:	18fb      	adds	r3, r7, r3
   13e4a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   13e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13e4e:	0c1b      	lsrs	r3, r3, #16
   13e50:	b2db      	uxtb	r3, r3
   13e52:	2220      	movs	r2, #32
   13e54:	18ba      	adds	r2, r7, r2
   13e56:	0011      	movs	r1, r2
   13e58:	0018      	movs	r0, r3
   13e5a:	4b36      	ldr	r3, [pc, #216]	; (13f34 <usart_init+0x264>)
   13e5c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   13e5e:	2347      	movs	r3, #71	; 0x47
   13e60:	18fb      	adds	r3, r7, r3
   13e62:	781a      	ldrb	r2, [r3, #0]
   13e64:	2347      	movs	r3, #71	; 0x47
   13e66:	18fb      	adds	r3, r7, r3
   13e68:	3201      	adds	r2, #1
   13e6a:	701a      	strb	r2, [r3, #0]
   13e6c:	2347      	movs	r3, #71	; 0x47
   13e6e:	18fb      	adds	r3, r7, r3
   13e70:	781b      	ldrb	r3, [r3, #0]
   13e72:	2b03      	cmp	r3, #3
   13e74:	d9cd      	bls.n	13e12 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   13e76:	2300      	movs	r3, #0
   13e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   13e7a:	e00a      	b.n	13e92 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   13e7c:	68fa      	ldr	r2, [r7, #12]
   13e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13e80:	3302      	adds	r3, #2
   13e82:	009b      	lsls	r3, r3, #2
   13e84:	18d3      	adds	r3, r2, r3
   13e86:	3304      	adds	r3, #4
   13e88:	2200      	movs	r2, #0
   13e8a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   13e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13e8e:	3301      	adds	r3, #1
   13e90:	63fb      	str	r3, [r7, #60]	; 0x3c
   13e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13e94:	2b05      	cmp	r3, #5
   13e96:	d9f1      	bls.n	13e7c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   13e98:	68fb      	ldr	r3, [r7, #12]
   13e9a:	2200      	movs	r2, #0
   13e9c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   13e9e:	68fb      	ldr	r3, [r7, #12]
   13ea0:	2200      	movs	r2, #0
   13ea2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   13ea4:	68fb      	ldr	r3, [r7, #12]
   13ea6:	2200      	movs	r2, #0
   13ea8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   13eaa:	68fb      	ldr	r3, [r7, #12]
   13eac:	2200      	movs	r2, #0
   13eae:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   13eb0:	68fb      	ldr	r3, [r7, #12]
   13eb2:	2230      	movs	r2, #48	; 0x30
   13eb4:	2100      	movs	r1, #0
   13eb6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   13eb8:	68fb      	ldr	r3, [r7, #12]
   13eba:	2231      	movs	r2, #49	; 0x31
   13ebc:	2100      	movs	r1, #0
   13ebe:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   13ec0:	68fb      	ldr	r3, [r7, #12]
   13ec2:	2232      	movs	r2, #50	; 0x32
   13ec4:	2100      	movs	r1, #0
   13ec6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   13ec8:	68fb      	ldr	r3, [r7, #12]
   13eca:	2233      	movs	r2, #51	; 0x33
   13ecc:	2100      	movs	r1, #0
   13ece:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   13ed0:	68fb      	ldr	r3, [r7, #12]
   13ed2:	681b      	ldr	r3, [r3, #0]
   13ed4:	2227      	movs	r2, #39	; 0x27
   13ed6:	18bc      	adds	r4, r7, r2
   13ed8:	0018      	movs	r0, r3
   13eda:	4b0d      	ldr	r3, [pc, #52]	; (13f10 <usart_init+0x240>)
   13edc:	4798      	blx	r3
   13ede:	0003      	movs	r3, r0
   13ee0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   13ee2:	4a15      	ldr	r2, [pc, #84]	; (13f38 <usart_init+0x268>)
   13ee4:	2327      	movs	r3, #39	; 0x27
   13ee6:	18fb      	adds	r3, r7, r3
   13ee8:	781b      	ldrb	r3, [r3, #0]
   13eea:	0011      	movs	r1, r2
   13eec:	0018      	movs	r0, r3
   13eee:	4b13      	ldr	r3, [pc, #76]	; (13f3c <usart_init+0x26c>)
   13ef0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   13ef2:	2327      	movs	r3, #39	; 0x27
   13ef4:	18fb      	adds	r3, r7, r3
   13ef6:	781a      	ldrb	r2, [r3, #0]
   13ef8:	4b11      	ldr	r3, [pc, #68]	; (13f40 <usart_init+0x270>)
   13efa:	0092      	lsls	r2, r2, #2
   13efc:	68f9      	ldr	r1, [r7, #12]
   13efe:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   13f00:	233b      	movs	r3, #59	; 0x3b
   13f02:	18fb      	adds	r3, r7, r3
   13f04:	781b      	ldrb	r3, [r3, #0]
}
   13f06:	0018      	movs	r0, r3
   13f08:	46bd      	mov	sp, r7
   13f0a:	b013      	add	sp, #76	; 0x4c
   13f0c:	bd90      	pop	{r4, r7, pc}
   13f0e:	46c0      	nop			; (mov r8, r8)
   13f10:	00012629 	.word	0x00012629
   13f14:	0001390d 	.word	0x0001390d
   13f18:	000138f5 	.word	0x000138f5
   13f1c:	00015055 	.word	0x00015055
   13f20:	00015099 	.word	0x00015099
   13f24:	000123e1 	.word	0x000123e1
   13f28:	000139f5 	.word	0x000139f5
   13f2c:	00013969 	.word	0x00013969
   13f30:	0001246d 	.word	0x0001246d
   13f34:	00015341 	.word	0x00015341
   13f38:	000140d9 	.word	0x000140d9
   13f3c:	0001268d 	.word	0x0001268d
   13f40:	2000041c 	.word	0x2000041c

00013f44 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   13f44:	b580      	push	{r7, lr}
   13f46:	b084      	sub	sp, #16
   13f48:	af00      	add	r7, sp, #0
   13f4a:	6078      	str	r0, [r7, #4]
   13f4c:	000a      	movs	r2, r1
   13f4e:	1cbb      	adds	r3, r7, #2
   13f50:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13f52:	687b      	ldr	r3, [r7, #4]
   13f54:	681b      	ldr	r3, [r3, #0]
   13f56:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   13f58:	687b      	ldr	r3, [r7, #4]
   13f5a:	79db      	ldrb	r3, [r3, #7]
   13f5c:	2201      	movs	r2, #1
   13f5e:	4053      	eors	r3, r2
   13f60:	b2db      	uxtb	r3, r3
   13f62:	2b00      	cmp	r3, #0
   13f64:	d001      	beq.n	13f6a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   13f66:	231c      	movs	r3, #28
   13f68:	e017      	b.n	13f9a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   13f6a:	687b      	ldr	r3, [r7, #4]
   13f6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   13f6e:	b29b      	uxth	r3, r3
   13f70:	2b00      	cmp	r3, #0
   13f72:	d001      	beq.n	13f78 <usart_write_wait+0x34>
		return STATUS_BUSY;
   13f74:	2305      	movs	r3, #5
   13f76:	e010      	b.n	13f9a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13f78:	687b      	ldr	r3, [r7, #4]
   13f7a:	0018      	movs	r0, r3
   13f7c:	4b09      	ldr	r3, [pc, #36]	; (13fa4 <usart_write_wait+0x60>)
   13f7e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   13f80:	68fb      	ldr	r3, [r7, #12]
   13f82:	1cba      	adds	r2, r7, #2
   13f84:	8812      	ldrh	r2, [r2, #0]
   13f86:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   13f88:	46c0      	nop			; (mov r8, r8)
   13f8a:	68fb      	ldr	r3, [r7, #12]
   13f8c:	7e1b      	ldrb	r3, [r3, #24]
   13f8e:	b2db      	uxtb	r3, r3
   13f90:	001a      	movs	r2, r3
   13f92:	2302      	movs	r3, #2
   13f94:	4013      	ands	r3, r2
   13f96:	d0f8      	beq.n	13f8a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   13f98:	2300      	movs	r3, #0
}
   13f9a:	0018      	movs	r0, r3
   13f9c:	46bd      	mov	sp, r7
   13f9e:	b004      	add	sp, #16
   13fa0:	bd80      	pop	{r7, pc}
   13fa2:	46c0      	nop			; (mov r8, r8)
   13fa4:	000139d1 	.word	0x000139d1

00013fa8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
   13fa8:	b580      	push	{r7, lr}
   13faa:	b084      	sub	sp, #16
   13fac:	af00      	add	r7, sp, #0
   13fae:	6078      	str	r0, [r7, #4]
   13fb0:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13fb2:	687b      	ldr	r3, [r7, #4]
   13fb4:	681b      	ldr	r3, [r3, #0]
   13fb6:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   13fb8:	687b      	ldr	r3, [r7, #4]
   13fba:	799b      	ldrb	r3, [r3, #6]
   13fbc:	2201      	movs	r2, #1
   13fbe:	4053      	eors	r3, r2
   13fc0:	b2db      	uxtb	r3, r3
   13fc2:	2b00      	cmp	r3, #0
   13fc4:	d001      	beq.n	13fca <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
   13fc6:	231c      	movs	r3, #28
   13fc8:	e05e      	b.n	14088 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
   13fca:	687b      	ldr	r3, [r7, #4]
   13fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   13fce:	b29b      	uxth	r3, r3
   13fd0:	2b00      	cmp	r3, #0
   13fd2:	d001      	beq.n	13fd8 <usart_read_wait+0x30>
		return STATUS_BUSY;
   13fd4:	2305      	movs	r3, #5
   13fd6:	e057      	b.n	14088 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
   13fd8:	68fb      	ldr	r3, [r7, #12]
   13fda:	7e1b      	ldrb	r3, [r3, #24]
   13fdc:	b2db      	uxtb	r3, r3
   13fde:	001a      	movs	r2, r3
   13fe0:	2304      	movs	r3, #4
   13fe2:	4013      	ands	r3, r2
   13fe4:	d101      	bne.n	13fea <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
   13fe6:	2305      	movs	r3, #5
   13fe8:	e04e      	b.n	14088 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13fea:	687b      	ldr	r3, [r7, #4]
   13fec:	0018      	movs	r0, r3
   13fee:	4b28      	ldr	r3, [pc, #160]	; (14090 <usart_read_wait+0xe8>)
   13ff0:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   13ff2:	68fb      	ldr	r3, [r7, #12]
   13ff4:	8b5b      	ldrh	r3, [r3, #26]
   13ff6:	b29b      	uxth	r3, r3
   13ff8:	b2da      	uxtb	r2, r3
   13ffa:	230b      	movs	r3, #11
   13ffc:	18fb      	adds	r3, r7, r3
   13ffe:	213f      	movs	r1, #63	; 0x3f
   14000:	400a      	ands	r2, r1
   14002:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
   14004:	230b      	movs	r3, #11
   14006:	18fb      	adds	r3, r7, r3
   14008:	781b      	ldrb	r3, [r3, #0]
   1400a:	2b00      	cmp	r3, #0
   1400c:	d036      	beq.n	1407c <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
   1400e:	230b      	movs	r3, #11
   14010:	18fb      	adds	r3, r7, r3
   14012:	781b      	ldrb	r3, [r3, #0]
   14014:	2202      	movs	r2, #2
   14016:	4013      	ands	r3, r2
   14018:	d004      	beq.n	14024 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1401a:	68fb      	ldr	r3, [r7, #12]
   1401c:	2202      	movs	r2, #2
   1401e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
   14020:	231a      	movs	r3, #26
   14022:	e031      	b.n	14088 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   14024:	230b      	movs	r3, #11
   14026:	18fb      	adds	r3, r7, r3
   14028:	781b      	ldrb	r3, [r3, #0]
   1402a:	2204      	movs	r2, #4
   1402c:	4013      	ands	r3, r2
   1402e:	d004      	beq.n	1403a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   14030:	68fb      	ldr	r3, [r7, #12]
   14032:	2204      	movs	r2, #4
   14034:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
   14036:	231e      	movs	r3, #30
   14038:	e026      	b.n	14088 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   1403a:	230b      	movs	r3, #11
   1403c:	18fb      	adds	r3, r7, r3
   1403e:	781b      	ldrb	r3, [r3, #0]
   14040:	2201      	movs	r2, #1
   14042:	4013      	ands	r3, r2
   14044:	d004      	beq.n	14050 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   14046:	68fb      	ldr	r3, [r7, #12]
   14048:	2201      	movs	r2, #1
   1404a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
   1404c:	2313      	movs	r3, #19
   1404e:	e01b      	b.n	14088 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
   14050:	230b      	movs	r3, #11
   14052:	18fb      	adds	r3, r7, r3
   14054:	781b      	ldrb	r3, [r3, #0]
   14056:	2210      	movs	r2, #16
   14058:	4013      	ands	r3, r2
   1405a:	d004      	beq.n	14066 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   1405c:	68fb      	ldr	r3, [r7, #12]
   1405e:	2210      	movs	r2, #16
   14060:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
   14062:	2342      	movs	r3, #66	; 0x42
   14064:	e010      	b.n	14088 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
   14066:	230b      	movs	r3, #11
   14068:	18fb      	adds	r3, r7, r3
   1406a:	781b      	ldrb	r3, [r3, #0]
   1406c:	2220      	movs	r2, #32
   1406e:	4013      	ands	r3, r2
   14070:	d004      	beq.n	1407c <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   14072:	68fb      	ldr	r3, [r7, #12]
   14074:	2220      	movs	r2, #32
   14076:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
   14078:	2341      	movs	r3, #65	; 0x41
   1407a:	e005      	b.n	14088 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
   1407c:	68fb      	ldr	r3, [r7, #12]
   1407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   14080:	b29a      	uxth	r2, r3
   14082:	683b      	ldr	r3, [r7, #0]
   14084:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
   14086:	2300      	movs	r3, #0
}
   14088:	0018      	movs	r0, r3
   1408a:	46bd      	mov	sp, r7
   1408c:	b004      	add	sp, #16
   1408e:	bd80      	pop	{r7, pc}
   14090:	000139d1 	.word	0x000139d1

00014094 <usart_is_syncing>:
{
   14094:	b580      	push	{r7, lr}
   14096:	b084      	sub	sp, #16
   14098:	af00      	add	r7, sp, #0
   1409a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1409c:	687b      	ldr	r3, [r7, #4]
   1409e:	681b      	ldr	r3, [r3, #0]
   140a0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   140a2:	68fb      	ldr	r3, [r7, #12]
   140a4:	69db      	ldr	r3, [r3, #28]
   140a6:	1e5a      	subs	r2, r3, #1
   140a8:	4193      	sbcs	r3, r2
   140aa:	b2db      	uxtb	r3, r3
}
   140ac:	0018      	movs	r0, r3
   140ae:	46bd      	mov	sp, r7
   140b0:	b004      	add	sp, #16
   140b2:	bd80      	pop	{r7, pc}

000140b4 <_usart_wait_for_sync>:
{
   140b4:	b580      	push	{r7, lr}
   140b6:	b082      	sub	sp, #8
   140b8:	af00      	add	r7, sp, #0
   140ba:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   140bc:	46c0      	nop			; (mov r8, r8)
   140be:	687b      	ldr	r3, [r7, #4]
   140c0:	0018      	movs	r0, r3
   140c2:	4b04      	ldr	r3, [pc, #16]	; (140d4 <_usart_wait_for_sync+0x20>)
   140c4:	4798      	blx	r3
   140c6:	1e03      	subs	r3, r0, #0
   140c8:	d1f9      	bne.n	140be <_usart_wait_for_sync+0xa>
}
   140ca:	46c0      	nop			; (mov r8, r8)
   140cc:	46bd      	mov	sp, r7
   140ce:	b002      	add	sp, #8
   140d0:	bd80      	pop	{r7, pc}
   140d2:	46c0      	nop			; (mov r8, r8)
   140d4:	00014095 	.word	0x00014095

000140d8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   140d8:	b580      	push	{r7, lr}
   140da:	b088      	sub	sp, #32
   140dc:	af00      	add	r7, sp, #0
   140de:	0002      	movs	r2, r0
   140e0:	1dfb      	adds	r3, r7, #7
   140e2:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   140e4:	1dfb      	adds	r3, r7, #7
   140e6:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   140e8:	4ba3      	ldr	r3, [pc, #652]	; (14378 <_usart_interrupt_handler+0x2a0>)
   140ea:	0092      	lsls	r2, r2, #2
   140ec:	58d3      	ldr	r3, [r2, r3]
   140ee:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   140f0:	69bb      	ldr	r3, [r7, #24]
   140f2:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   140f4:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   140f6:	69bb      	ldr	r3, [r7, #24]
   140f8:	0018      	movs	r0, r3
   140fa:	4ba0      	ldr	r3, [pc, #640]	; (1437c <_usart_interrupt_handler+0x2a4>)
   140fc:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   140fe:	697b      	ldr	r3, [r7, #20]
   14100:	7e1b      	ldrb	r3, [r3, #24]
   14102:	b2da      	uxtb	r2, r3
   14104:	2312      	movs	r3, #18
   14106:	18fb      	adds	r3, r7, r3
   14108:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   1410a:	697b      	ldr	r3, [r7, #20]
   1410c:	7d9b      	ldrb	r3, [r3, #22]
   1410e:	b2db      	uxtb	r3, r3
   14110:	b29a      	uxth	r2, r3
   14112:	2312      	movs	r3, #18
   14114:	18fb      	adds	r3, r7, r3
   14116:	2112      	movs	r1, #18
   14118:	1879      	adds	r1, r7, r1
   1411a:	8809      	ldrh	r1, [r1, #0]
   1411c:	400a      	ands	r2, r1
   1411e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   14120:	69bb      	ldr	r3, [r7, #24]
   14122:	2230      	movs	r2, #48	; 0x30
   14124:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   14126:	69ba      	ldr	r2, [r7, #24]
   14128:	2131      	movs	r1, #49	; 0x31
   1412a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   1412c:	4013      	ands	r3, r2
   1412e:	b2da      	uxtb	r2, r3
   14130:	2310      	movs	r3, #16
   14132:	18fb      	adds	r3, r7, r3
   14134:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   14136:	2312      	movs	r3, #18
   14138:	18fb      	adds	r3, r7, r3
   1413a:	881b      	ldrh	r3, [r3, #0]
   1413c:	2201      	movs	r2, #1
   1413e:	4013      	ands	r3, r2
   14140:	d044      	beq.n	141cc <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   14142:	69bb      	ldr	r3, [r7, #24]
   14144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   14146:	b29b      	uxth	r3, r3
   14148:	2b00      	cmp	r3, #0
   1414a:	d03c      	beq.n	141c6 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   1414c:	69bb      	ldr	r3, [r7, #24]
   1414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14150:	781b      	ldrb	r3, [r3, #0]
   14152:	b2da      	uxtb	r2, r3
   14154:	231c      	movs	r3, #28
   14156:	18fb      	adds	r3, r7, r3
   14158:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1415a:	69bb      	ldr	r3, [r7, #24]
   1415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1415e:	1c5a      	adds	r2, r3, #1
   14160:	69bb      	ldr	r3, [r7, #24]
   14162:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   14164:	69bb      	ldr	r3, [r7, #24]
   14166:	795b      	ldrb	r3, [r3, #5]
   14168:	2b01      	cmp	r3, #1
   1416a:	d113      	bne.n	14194 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   1416c:	69bb      	ldr	r3, [r7, #24]
   1416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14170:	781b      	ldrb	r3, [r3, #0]
   14172:	b2db      	uxtb	r3, r3
   14174:	021b      	lsls	r3, r3, #8
   14176:	b21a      	sxth	r2, r3
   14178:	231c      	movs	r3, #28
   1417a:	18fb      	adds	r3, r7, r3
   1417c:	2100      	movs	r1, #0
   1417e:	5e5b      	ldrsh	r3, [r3, r1]
   14180:	4313      	orrs	r3, r2
   14182:	b21a      	sxth	r2, r3
   14184:	231c      	movs	r3, #28
   14186:	18fb      	adds	r3, r7, r3
   14188:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   1418a:	69bb      	ldr	r3, [r7, #24]
   1418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1418e:	1c5a      	adds	r2, r3, #1
   14190:	69bb      	ldr	r3, [r7, #24]
   14192:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   14194:	231c      	movs	r3, #28
   14196:	18fb      	adds	r3, r7, r3
   14198:	881b      	ldrh	r3, [r3, #0]
   1419a:	05db      	lsls	r3, r3, #23
   1419c:	0ddb      	lsrs	r3, r3, #23
   1419e:	b29a      	uxth	r2, r3
   141a0:	697b      	ldr	r3, [r7, #20]
   141a2:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   141a4:	69bb      	ldr	r3, [r7, #24]
   141a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   141a8:	b29b      	uxth	r3, r3
   141aa:	3b01      	subs	r3, #1
   141ac:	b29b      	uxth	r3, r3
   141ae:	69ba      	ldr	r2, [r7, #24]
   141b0:	1c19      	adds	r1, r3, #0
   141b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
   141b4:	2b00      	cmp	r3, #0
   141b6:	d109      	bne.n	141cc <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   141b8:	697b      	ldr	r3, [r7, #20]
   141ba:	2201      	movs	r2, #1
   141bc:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   141be:	697b      	ldr	r3, [r7, #20]
   141c0:	2202      	movs	r2, #2
   141c2:	759a      	strb	r2, [r3, #22]
   141c4:	e002      	b.n	141cc <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   141c6:	697b      	ldr	r3, [r7, #20]
   141c8:	2201      	movs	r2, #1
   141ca:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   141cc:	2312      	movs	r3, #18
   141ce:	18fb      	adds	r3, r7, r3
   141d0:	881b      	ldrh	r3, [r3, #0]
   141d2:	2202      	movs	r2, #2
   141d4:	4013      	ands	r3, r2
   141d6:	d011      	beq.n	141fc <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   141d8:	697b      	ldr	r3, [r7, #20]
   141da:	2202      	movs	r2, #2
   141dc:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   141de:	69bb      	ldr	r3, [r7, #24]
   141e0:	2233      	movs	r2, #51	; 0x33
   141e2:	2100      	movs	r1, #0
   141e4:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   141e6:	2310      	movs	r3, #16
   141e8:	18fb      	adds	r3, r7, r3
   141ea:	881b      	ldrh	r3, [r3, #0]
   141ec:	2201      	movs	r2, #1
   141ee:	4013      	ands	r3, r2
   141f0:	d004      	beq.n	141fc <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   141f2:	69bb      	ldr	r3, [r7, #24]
   141f4:	68db      	ldr	r3, [r3, #12]
   141f6:	69ba      	ldr	r2, [r7, #24]
   141f8:	0010      	movs	r0, r2
   141fa:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   141fc:	2312      	movs	r3, #18
   141fe:	18fb      	adds	r3, r7, r3
   14200:	881b      	ldrh	r3, [r3, #0]
   14202:	2204      	movs	r2, #4
   14204:	4013      	ands	r3, r2
   14206:	d100      	bne.n	1420a <_usart_interrupt_handler+0x132>
   14208:	e0bd      	b.n	14386 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   1420a:	69bb      	ldr	r3, [r7, #24]
   1420c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1420e:	b29b      	uxth	r3, r3
   14210:	2b00      	cmp	r3, #0
   14212:	d100      	bne.n	14216 <_usart_interrupt_handler+0x13e>
   14214:	e0b4      	b.n	14380 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   14216:	697b      	ldr	r3, [r7, #20]
   14218:	8b5b      	ldrh	r3, [r3, #26]
   1421a:	b29b      	uxth	r3, r3
   1421c:	b2da      	uxtb	r2, r3
   1421e:	231f      	movs	r3, #31
   14220:	18fb      	adds	r3, r7, r3
   14222:	213f      	movs	r1, #63	; 0x3f
   14224:	400a      	ands	r2, r1
   14226:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   14228:	231f      	movs	r3, #31
   1422a:	18fb      	adds	r3, r7, r3
   1422c:	781b      	ldrb	r3, [r3, #0]
   1422e:	2208      	movs	r2, #8
   14230:	4013      	ands	r3, r2
   14232:	d007      	beq.n	14244 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   14234:	231f      	movs	r3, #31
   14236:	18fb      	adds	r3, r7, r3
   14238:	221f      	movs	r2, #31
   1423a:	18ba      	adds	r2, r7, r2
   1423c:	7812      	ldrb	r2, [r2, #0]
   1423e:	2108      	movs	r1, #8
   14240:	438a      	bics	r2, r1
   14242:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   14244:	231f      	movs	r3, #31
   14246:	18fb      	adds	r3, r7, r3
   14248:	781b      	ldrb	r3, [r3, #0]
   1424a:	2b00      	cmp	r3, #0
   1424c:	d050      	beq.n	142f0 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   1424e:	231f      	movs	r3, #31
   14250:	18fb      	adds	r3, r7, r3
   14252:	781b      	ldrb	r3, [r3, #0]
   14254:	2202      	movs	r2, #2
   14256:	4013      	ands	r3, r2
   14258:	d007      	beq.n	1426a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   1425a:	69bb      	ldr	r3, [r7, #24]
   1425c:	2232      	movs	r2, #50	; 0x32
   1425e:	211a      	movs	r1, #26
   14260:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   14262:	697b      	ldr	r3, [r7, #20]
   14264:	2202      	movs	r2, #2
   14266:	835a      	strh	r2, [r3, #26]
   14268:	e036      	b.n	142d8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1426a:	231f      	movs	r3, #31
   1426c:	18fb      	adds	r3, r7, r3
   1426e:	781b      	ldrb	r3, [r3, #0]
   14270:	2204      	movs	r2, #4
   14272:	4013      	ands	r3, r2
   14274:	d007      	beq.n	14286 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   14276:	69bb      	ldr	r3, [r7, #24]
   14278:	2232      	movs	r2, #50	; 0x32
   1427a:	211e      	movs	r1, #30
   1427c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1427e:	697b      	ldr	r3, [r7, #20]
   14280:	2204      	movs	r2, #4
   14282:	835a      	strh	r2, [r3, #26]
   14284:	e028      	b.n	142d8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   14286:	231f      	movs	r3, #31
   14288:	18fb      	adds	r3, r7, r3
   1428a:	781b      	ldrb	r3, [r3, #0]
   1428c:	2201      	movs	r2, #1
   1428e:	4013      	ands	r3, r2
   14290:	d007      	beq.n	142a2 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   14292:	69bb      	ldr	r3, [r7, #24]
   14294:	2232      	movs	r2, #50	; 0x32
   14296:	2113      	movs	r1, #19
   14298:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1429a:	697b      	ldr	r3, [r7, #20]
   1429c:	2201      	movs	r2, #1
   1429e:	835a      	strh	r2, [r3, #26]
   142a0:	e01a      	b.n	142d8 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   142a2:	231f      	movs	r3, #31
   142a4:	18fb      	adds	r3, r7, r3
   142a6:	781b      	ldrb	r3, [r3, #0]
   142a8:	2210      	movs	r2, #16
   142aa:	4013      	ands	r3, r2
   142ac:	d007      	beq.n	142be <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   142ae:	69bb      	ldr	r3, [r7, #24]
   142b0:	2232      	movs	r2, #50	; 0x32
   142b2:	2142      	movs	r1, #66	; 0x42
   142b4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   142b6:	697b      	ldr	r3, [r7, #20]
   142b8:	2210      	movs	r2, #16
   142ba:	835a      	strh	r2, [r3, #26]
   142bc:	e00c      	b.n	142d8 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   142be:	231f      	movs	r3, #31
   142c0:	18fb      	adds	r3, r7, r3
   142c2:	781b      	ldrb	r3, [r3, #0]
   142c4:	2220      	movs	r2, #32
   142c6:	4013      	ands	r3, r2
   142c8:	d006      	beq.n	142d8 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   142ca:	69bb      	ldr	r3, [r7, #24]
   142cc:	2232      	movs	r2, #50	; 0x32
   142ce:	2141      	movs	r1, #65	; 0x41
   142d0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   142d2:	697b      	ldr	r3, [r7, #20]
   142d4:	2220      	movs	r2, #32
   142d6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   142d8:	2310      	movs	r3, #16
   142da:	18fb      	adds	r3, r7, r3
   142dc:	881b      	ldrh	r3, [r3, #0]
   142de:	2204      	movs	r2, #4
   142e0:	4013      	ands	r3, r2
				if (callback_status
   142e2:	d050      	beq.n	14386 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   142e4:	69bb      	ldr	r3, [r7, #24]
   142e6:	695b      	ldr	r3, [r3, #20]
   142e8:	69ba      	ldr	r2, [r7, #24]
   142ea:	0010      	movs	r0, r2
   142ec:	4798      	blx	r3
   142ee:	e04a      	b.n	14386 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   142f0:	697b      	ldr	r3, [r7, #20]
   142f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   142f4:	b29a      	uxth	r2, r3
   142f6:	230e      	movs	r3, #14
   142f8:	18fb      	adds	r3, r7, r3
   142fa:	05d2      	lsls	r2, r2, #23
   142fc:	0dd2      	lsrs	r2, r2, #23
   142fe:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   14300:	69bb      	ldr	r3, [r7, #24]
   14302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14304:	220e      	movs	r2, #14
   14306:	18ba      	adds	r2, r7, r2
   14308:	8812      	ldrh	r2, [r2, #0]
   1430a:	b2d2      	uxtb	r2, r2
   1430c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   1430e:	69bb      	ldr	r3, [r7, #24]
   14310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14312:	1c5a      	adds	r2, r3, #1
   14314:	69bb      	ldr	r3, [r7, #24]
   14316:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   14318:	69bb      	ldr	r3, [r7, #24]
   1431a:	795b      	ldrb	r3, [r3, #5]
   1431c:	2b01      	cmp	r3, #1
   1431e:	d10d      	bne.n	1433c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   14320:	69bb      	ldr	r3, [r7, #24]
   14322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14324:	220e      	movs	r2, #14
   14326:	18ba      	adds	r2, r7, r2
   14328:	8812      	ldrh	r2, [r2, #0]
   1432a:	0a12      	lsrs	r2, r2, #8
   1432c:	b292      	uxth	r2, r2
   1432e:	b2d2      	uxtb	r2, r2
   14330:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   14332:	69bb      	ldr	r3, [r7, #24]
   14334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14336:	1c5a      	adds	r2, r3, #1
   14338:	69bb      	ldr	r3, [r7, #24]
   1433a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   1433c:	69bb      	ldr	r3, [r7, #24]
   1433e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   14340:	b29b      	uxth	r3, r3
   14342:	3b01      	subs	r3, #1
   14344:	b29b      	uxth	r3, r3
   14346:	69ba      	ldr	r2, [r7, #24]
   14348:	1c19      	adds	r1, r3, #0
   1434a:	8591      	strh	r1, [r2, #44]	; 0x2c
   1434c:	2b00      	cmp	r3, #0
   1434e:	d11a      	bne.n	14386 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   14350:	697b      	ldr	r3, [r7, #20]
   14352:	2204      	movs	r2, #4
   14354:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   14356:	69bb      	ldr	r3, [r7, #24]
   14358:	2232      	movs	r2, #50	; 0x32
   1435a:	2100      	movs	r1, #0
   1435c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   1435e:	2310      	movs	r3, #16
   14360:	18fb      	adds	r3, r7, r3
   14362:	881b      	ldrh	r3, [r3, #0]
   14364:	2202      	movs	r2, #2
   14366:	4013      	ands	r3, r2
					if (callback_status
   14368:	d00d      	beq.n	14386 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   1436a:	69bb      	ldr	r3, [r7, #24]
   1436c:	691b      	ldr	r3, [r3, #16]
   1436e:	69ba      	ldr	r2, [r7, #24]
   14370:	0010      	movs	r0, r2
   14372:	4798      	blx	r3
   14374:	e007      	b.n	14386 <_usart_interrupt_handler+0x2ae>
   14376:	46c0      	nop			; (mov r8, r8)
   14378:	2000041c 	.word	0x2000041c
   1437c:	000140b5 	.word	0x000140b5
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   14380:	697b      	ldr	r3, [r7, #20]
   14382:	2204      	movs	r2, #4
   14384:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   14386:	2312      	movs	r3, #18
   14388:	18fb      	adds	r3, r7, r3
   1438a:	881b      	ldrh	r3, [r3, #0]
   1438c:	2210      	movs	r2, #16
   1438e:	4013      	ands	r3, r2
   14390:	d010      	beq.n	143b4 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   14392:	697b      	ldr	r3, [r7, #20]
   14394:	2210      	movs	r2, #16
   14396:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   14398:	697b      	ldr	r3, [r7, #20]
   1439a:	2210      	movs	r2, #16
   1439c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   1439e:	2310      	movs	r3, #16
   143a0:	18fb      	adds	r3, r7, r3
   143a2:	881b      	ldrh	r3, [r3, #0]
   143a4:	2210      	movs	r2, #16
   143a6:	4013      	ands	r3, r2
   143a8:	d004      	beq.n	143b4 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   143aa:	69bb      	ldr	r3, [r7, #24]
   143ac:	69db      	ldr	r3, [r3, #28]
   143ae:	69ba      	ldr	r2, [r7, #24]
   143b0:	0010      	movs	r0, r2
   143b2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   143b4:	2312      	movs	r3, #18
   143b6:	18fb      	adds	r3, r7, r3
   143b8:	881b      	ldrh	r3, [r3, #0]
   143ba:	2220      	movs	r2, #32
   143bc:	4013      	ands	r3, r2
   143be:	d010      	beq.n	143e2 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   143c0:	697b      	ldr	r3, [r7, #20]
   143c2:	2220      	movs	r2, #32
   143c4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   143c6:	697b      	ldr	r3, [r7, #20]
   143c8:	2220      	movs	r2, #32
   143ca:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   143cc:	2310      	movs	r3, #16
   143ce:	18fb      	adds	r3, r7, r3
   143d0:	881b      	ldrh	r3, [r3, #0]
   143d2:	2208      	movs	r2, #8
   143d4:	4013      	ands	r3, r2
   143d6:	d004      	beq.n	143e2 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   143d8:	69bb      	ldr	r3, [r7, #24]
   143da:	699b      	ldr	r3, [r3, #24]
   143dc:	69ba      	ldr	r2, [r7, #24]
   143de:	0010      	movs	r0, r2
   143e0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   143e2:	2312      	movs	r3, #18
   143e4:	18fb      	adds	r3, r7, r3
   143e6:	881b      	ldrh	r3, [r3, #0]
   143e8:	2208      	movs	r2, #8
   143ea:	4013      	ands	r3, r2
   143ec:	d010      	beq.n	14410 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   143ee:	697b      	ldr	r3, [r7, #20]
   143f0:	2208      	movs	r2, #8
   143f2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   143f4:	697b      	ldr	r3, [r7, #20]
   143f6:	2208      	movs	r2, #8
   143f8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   143fa:	2310      	movs	r3, #16
   143fc:	18fb      	adds	r3, r7, r3
   143fe:	881b      	ldrh	r3, [r3, #0]
   14400:	2220      	movs	r2, #32
   14402:	4013      	ands	r3, r2
   14404:	d004      	beq.n	14410 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   14406:	69bb      	ldr	r3, [r7, #24]
   14408:	6a1b      	ldr	r3, [r3, #32]
   1440a:	69ba      	ldr	r2, [r7, #24]
   1440c:	0010      	movs	r0, r2
   1440e:	4798      	blx	r3
		}
	}
#endif
}
   14410:	46c0      	nop			; (mov r8, r8)
   14412:	46bd      	mov	sp, r7
   14414:	b008      	add	sp, #32
   14416:	bd80      	pop	{r7, pc}

00014418 <system_gclk_gen_get_config_defaults>:
{
   14418:	b580      	push	{r7, lr}
   1441a:	b082      	sub	sp, #8
   1441c:	af00      	add	r7, sp, #0
   1441e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   14420:	687b      	ldr	r3, [r7, #4]
   14422:	2201      	movs	r2, #1
   14424:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   14426:	687b      	ldr	r3, [r7, #4]
   14428:	2200      	movs	r2, #0
   1442a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   1442c:	687b      	ldr	r3, [r7, #4]
   1442e:	2206      	movs	r2, #6
   14430:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   14432:	687b      	ldr	r3, [r7, #4]
   14434:	2200      	movs	r2, #0
   14436:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   14438:	687b      	ldr	r3, [r7, #4]
   1443a:	2200      	movs	r2, #0
   1443c:	725a      	strb	r2, [r3, #9]
}
   1443e:	46c0      	nop			; (mov r8, r8)
   14440:	46bd      	mov	sp, r7
   14442:	b002      	add	sp, #8
   14444:	bd80      	pop	{r7, pc}

00014446 <system_gclk_chan_get_config_defaults>:
{
   14446:	b580      	push	{r7, lr}
   14448:	b082      	sub	sp, #8
   1444a:	af00      	add	r7, sp, #0
   1444c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   1444e:	687b      	ldr	r3, [r7, #4]
   14450:	2200      	movs	r2, #0
   14452:	701a      	strb	r2, [r3, #0]
}
   14454:	46c0      	nop			; (mov r8, r8)
   14456:	46bd      	mov	sp, r7
   14458:	b002      	add	sp, #8
   1445a:	bd80      	pop	{r7, pc}

0001445c <system_clock_source_xosc32k_get_config_defaults>:
{
   1445c:	b580      	push	{r7, lr}
   1445e:	b082      	sub	sp, #8
   14460:	af00      	add	r7, sp, #0
   14462:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   14464:	687b      	ldr	r3, [r7, #4]
   14466:	2200      	movs	r2, #0
   14468:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   1446a:	687b      	ldr	r3, [r7, #4]
   1446c:	2204      	movs	r2, #4
   1446e:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   14470:	687b      	ldr	r3, [r7, #4]
   14472:	2200      	movs	r2, #0
   14474:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   14476:	687b      	ldr	r3, [r7, #4]
   14478:	2280      	movs	r2, #128	; 0x80
   1447a:	0212      	lsls	r2, r2, #8
   1447c:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   1447e:	687b      	ldr	r3, [r7, #4]
   14480:	2200      	movs	r2, #0
   14482:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   14484:	687b      	ldr	r3, [r7, #4]
   14486:	2201      	movs	r2, #1
   14488:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   1448a:	687b      	ldr	r3, [r7, #4]
   1448c:	2200      	movs	r2, #0
   1448e:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   14490:	687b      	ldr	r3, [r7, #4]
   14492:	2201      	movs	r2, #1
   14494:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   14496:	687b      	ldr	r3, [r7, #4]
   14498:	2200      	movs	r2, #0
   1449a:	739a      	strb	r2, [r3, #14]
}
   1449c:	46c0      	nop			; (mov r8, r8)
   1449e:	46bd      	mov	sp, r7
   144a0:	b002      	add	sp, #8
   144a2:	bd80      	pop	{r7, pc}

000144a4 <system_clock_source_osc8m_get_config_defaults>:
{
   144a4:	b580      	push	{r7, lr}
   144a6:	b082      	sub	sp, #8
   144a8:	af00      	add	r7, sp, #0
   144aa:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   144ac:	687b      	ldr	r3, [r7, #4]
   144ae:	2203      	movs	r2, #3
   144b0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   144b2:	687b      	ldr	r3, [r7, #4]
   144b4:	2200      	movs	r2, #0
   144b6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   144b8:	687b      	ldr	r3, [r7, #4]
   144ba:	2201      	movs	r2, #1
   144bc:	709a      	strb	r2, [r3, #2]
}
   144be:	46c0      	nop			; (mov r8, r8)
   144c0:	46bd      	mov	sp, r7
   144c2:	b002      	add	sp, #8
   144c4:	bd80      	pop	{r7, pc}

000144c6 <system_clock_source_dfll_get_config_defaults>:
{
   144c6:	b580      	push	{r7, lr}
   144c8:	b082      	sub	sp, #8
   144ca:	af00      	add	r7, sp, #0
   144cc:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   144ce:	687b      	ldr	r3, [r7, #4]
   144d0:	2200      	movs	r2, #0
   144d2:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   144d4:	687b      	ldr	r3, [r7, #4]
   144d6:	2200      	movs	r2, #0
   144d8:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   144da:	687b      	ldr	r3, [r7, #4]
   144dc:	2200      	movs	r2, #0
   144de:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   144e0:	687b      	ldr	r3, [r7, #4]
   144e2:	2200      	movs	r2, #0
   144e4:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   144e6:	687b      	ldr	r3, [r7, #4]
   144e8:	2200      	movs	r2, #0
   144ea:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   144ec:	687b      	ldr	r3, [r7, #4]
   144ee:	2201      	movs	r2, #1
   144f0:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   144f2:	687b      	ldr	r3, [r7, #4]
   144f4:	2207      	movs	r2, #7
   144f6:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   144f8:	687b      	ldr	r3, [r7, #4]
   144fa:	223f      	movs	r2, #63	; 0x3f
   144fc:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
   144fe:	687b      	ldr	r3, [r7, #4]
   14500:	2201      	movs	r2, #1
   14502:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   14504:	687b      	ldr	r3, [r7, #4]
   14506:	2201      	movs	r2, #1
   14508:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   1450a:	687b      	ldr	r3, [r7, #4]
   1450c:	2206      	movs	r2, #6
   1450e:	821a      	strh	r2, [r3, #16]
}
   14510:	46c0      	nop			; (mov r8, r8)
   14512:	46bd      	mov	sp, r7
   14514:	b002      	add	sp, #8
   14516:	bd80      	pop	{r7, pc}

00014518 <system_cpu_clock_set_divider>:
{
   14518:	b580      	push	{r7, lr}
   1451a:	b082      	sub	sp, #8
   1451c:	af00      	add	r7, sp, #0
   1451e:	0002      	movs	r2, r0
   14520:	1dfb      	adds	r3, r7, #7
   14522:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   14524:	4a03      	ldr	r2, [pc, #12]	; (14534 <system_cpu_clock_set_divider+0x1c>)
   14526:	1dfb      	adds	r3, r7, #7
   14528:	781b      	ldrb	r3, [r3, #0]
   1452a:	7213      	strb	r3, [r2, #8]
}
   1452c:	46c0      	nop			; (mov r8, r8)
   1452e:	46bd      	mov	sp, r7
   14530:	b002      	add	sp, #8
   14532:	bd80      	pop	{r7, pc}
   14534:	40000400 	.word	0x40000400

00014538 <system_apb_clock_set_divider>:
{
   14538:	b580      	push	{r7, lr}
   1453a:	b082      	sub	sp, #8
   1453c:	af00      	add	r7, sp, #0
   1453e:	0002      	movs	r2, r0
   14540:	1dfb      	adds	r3, r7, #7
   14542:	701a      	strb	r2, [r3, #0]
   14544:	1dbb      	adds	r3, r7, #6
   14546:	1c0a      	adds	r2, r1, #0
   14548:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1454a:	1dfb      	adds	r3, r7, #7
   1454c:	781b      	ldrb	r3, [r3, #0]
   1454e:	2b01      	cmp	r3, #1
   14550:	d008      	beq.n	14564 <system_apb_clock_set_divider+0x2c>
   14552:	2b02      	cmp	r3, #2
   14554:	d00b      	beq.n	1456e <system_apb_clock_set_divider+0x36>
   14556:	2b00      	cmp	r3, #0
   14558:	d10e      	bne.n	14578 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   1455a:	4a0b      	ldr	r2, [pc, #44]	; (14588 <system_apb_clock_set_divider+0x50>)
   1455c:	1dbb      	adds	r3, r7, #6
   1455e:	781b      	ldrb	r3, [r3, #0]
   14560:	7253      	strb	r3, [r2, #9]
			break;
   14562:	e00b      	b.n	1457c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   14564:	4a08      	ldr	r2, [pc, #32]	; (14588 <system_apb_clock_set_divider+0x50>)
   14566:	1dbb      	adds	r3, r7, #6
   14568:	781b      	ldrb	r3, [r3, #0]
   1456a:	7293      	strb	r3, [r2, #10]
			break;
   1456c:	e006      	b.n	1457c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   1456e:	4a06      	ldr	r2, [pc, #24]	; (14588 <system_apb_clock_set_divider+0x50>)
   14570:	1dbb      	adds	r3, r7, #6
   14572:	781b      	ldrb	r3, [r3, #0]
   14574:	72d3      	strb	r3, [r2, #11]
			break;
   14576:	e001      	b.n	1457c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   14578:	2317      	movs	r3, #23
   1457a:	e000      	b.n	1457e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   1457c:	2300      	movs	r3, #0
}
   1457e:	0018      	movs	r0, r3
   14580:	46bd      	mov	sp, r7
   14582:	b002      	add	sp, #8
   14584:	bd80      	pop	{r7, pc}
   14586:	46c0      	nop			; (mov r8, r8)
   14588:	40000400 	.word	0x40000400

0001458c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   1458c:	b580      	push	{r7, lr}
   1458e:	b082      	sub	sp, #8
   14590:	af00      	add	r7, sp, #0
   14592:	0002      	movs	r2, r0
   14594:	1dfb      	adds	r3, r7, #7
   14596:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   14598:	4a08      	ldr	r2, [pc, #32]	; (145bc <system_flash_set_waitstates+0x30>)
   1459a:	1dfb      	adds	r3, r7, #7
   1459c:	781b      	ldrb	r3, [r3, #0]
   1459e:	210f      	movs	r1, #15
   145a0:	400b      	ands	r3, r1
   145a2:	b2d9      	uxtb	r1, r3
   145a4:	6853      	ldr	r3, [r2, #4]
   145a6:	200f      	movs	r0, #15
   145a8:	4001      	ands	r1, r0
   145aa:	0049      	lsls	r1, r1, #1
   145ac:	201e      	movs	r0, #30
   145ae:	4383      	bics	r3, r0
   145b0:	430b      	orrs	r3, r1
   145b2:	6053      	str	r3, [r2, #4]
}
   145b4:	46c0      	nop			; (mov r8, r8)
   145b6:	46bd      	mov	sp, r7
   145b8:	b002      	add	sp, #8
   145ba:	bd80      	pop	{r7, pc}
   145bc:	41004000 	.word	0x41004000

000145c0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   145c0:	b580      	push	{r7, lr}
   145c2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   145c4:	46c0      	nop			; (mov r8, r8)
   145c6:	4b04      	ldr	r3, [pc, #16]	; (145d8 <_system_dfll_wait_for_sync+0x18>)
   145c8:	68db      	ldr	r3, [r3, #12]
   145ca:	2210      	movs	r2, #16
   145cc:	4013      	ands	r3, r2
   145ce:	d0fa      	beq.n	145c6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   145d0:	46c0      	nop			; (mov r8, r8)
   145d2:	46bd      	mov	sp, r7
   145d4:	bd80      	pop	{r7, pc}
   145d6:	46c0      	nop			; (mov r8, r8)
   145d8:	40000800 	.word	0x40000800

000145dc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   145dc:	b580      	push	{r7, lr}
   145de:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   145e0:	4b0c      	ldr	r3, [pc, #48]	; (14614 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   145e2:	2202      	movs	r2, #2
   145e4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   145e6:	4b0c      	ldr	r3, [pc, #48]	; (14618 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   145e8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   145ea:	4a0a      	ldr	r2, [pc, #40]	; (14614 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   145ec:	4b0b      	ldr	r3, [pc, #44]	; (1461c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   145ee:	689b      	ldr	r3, [r3, #8]
   145f0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   145f2:	4a08      	ldr	r2, [pc, #32]	; (14614 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   145f4:	4b09      	ldr	r3, [pc, #36]	; (1461c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   145f6:	685b      	ldr	r3, [r3, #4]
   145f8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   145fa:	4b06      	ldr	r3, [pc, #24]	; (14614 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   145fc:	2200      	movs	r2, #0
   145fe:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   14600:	4b05      	ldr	r3, [pc, #20]	; (14618 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   14602:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   14604:	4a03      	ldr	r2, [pc, #12]	; (14614 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   14606:	4b05      	ldr	r3, [pc, #20]	; (1461c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   14608:	681b      	ldr	r3, [r3, #0]
   1460a:	b29b      	uxth	r3, r3
   1460c:	8493      	strh	r3, [r2, #36]	; 0x24
}
   1460e:	46c0      	nop			; (mov r8, r8)
   14610:	46bd      	mov	sp, r7
   14612:	bd80      	pop	{r7, pc}
   14614:	40000800 	.word	0x40000800
   14618:	000145c1 	.word	0x000145c1
   1461c:	20000270 	.word	0x20000270

00014620 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   14620:	b580      	push	{r7, lr}
   14622:	b082      	sub	sp, #8
   14624:	af00      	add	r7, sp, #0
   14626:	0002      	movs	r2, r0
   14628:	1dfb      	adds	r3, r7, #7
   1462a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   1462c:	1dfb      	adds	r3, r7, #7
   1462e:	781b      	ldrb	r3, [r3, #0]
   14630:	2b08      	cmp	r3, #8
   14632:	d840      	bhi.n	146b6 <system_clock_source_get_hz+0x96>
   14634:	009a      	lsls	r2, r3, #2
   14636:	4b22      	ldr	r3, [pc, #136]	; (146c0 <system_clock_source_get_hz+0xa0>)
   14638:	18d3      	adds	r3, r2, r3
   1463a:	681b      	ldr	r3, [r3, #0]
   1463c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   1463e:	4b21      	ldr	r3, [pc, #132]	; (146c4 <system_clock_source_get_hz+0xa4>)
   14640:	691b      	ldr	r3, [r3, #16]
   14642:	e039      	b.n	146b8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   14644:	4b20      	ldr	r3, [pc, #128]	; (146c8 <system_clock_source_get_hz+0xa8>)
   14646:	6a1b      	ldr	r3, [r3, #32]
   14648:	059b      	lsls	r3, r3, #22
   1464a:	0f9b      	lsrs	r3, r3, #30
   1464c:	b2db      	uxtb	r3, r3
   1464e:	001a      	movs	r2, r3
   14650:	4b1e      	ldr	r3, [pc, #120]	; (146cc <system_clock_source_get_hz+0xac>)
   14652:	40d3      	lsrs	r3, r2
   14654:	e030      	b.n	146b8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   14656:	2380      	movs	r3, #128	; 0x80
   14658:	021b      	lsls	r3, r3, #8
   1465a:	e02d      	b.n	146b8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   1465c:	2380      	movs	r3, #128	; 0x80
   1465e:	021b      	lsls	r3, r3, #8
   14660:	e02a      	b.n	146b8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   14662:	4b18      	ldr	r3, [pc, #96]	; (146c4 <system_clock_source_get_hz+0xa4>)
   14664:	695b      	ldr	r3, [r3, #20]
   14666:	e027      	b.n	146b8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   14668:	4b16      	ldr	r3, [pc, #88]	; (146c4 <system_clock_source_get_hz+0xa4>)
   1466a:	681b      	ldr	r3, [r3, #0]
   1466c:	2202      	movs	r2, #2
   1466e:	4013      	ands	r3, r2
   14670:	d101      	bne.n	14676 <system_clock_source_get_hz+0x56>
			return 0;
   14672:	2300      	movs	r3, #0
   14674:	e020      	b.n	146b8 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   14676:	4b16      	ldr	r3, [pc, #88]	; (146d0 <system_clock_source_get_hz+0xb0>)
   14678:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
   1467a:	4b12      	ldr	r3, [pc, #72]	; (146c4 <system_clock_source_get_hz+0xa4>)
   1467c:	681b      	ldr	r3, [r3, #0]
   1467e:	2204      	movs	r2, #4
   14680:	4013      	ands	r3, r2
   14682:	d009      	beq.n	14698 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   14684:	2000      	movs	r0, #0
   14686:	4b13      	ldr	r3, [pc, #76]	; (146d4 <system_clock_source_get_hz+0xb4>)
   14688:	4798      	blx	r3
   1468a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   1468c:	4b0d      	ldr	r3, [pc, #52]	; (146c4 <system_clock_source_get_hz+0xa4>)
   1468e:	689b      	ldr	r3, [r3, #8]
   14690:	041b      	lsls	r3, r3, #16
   14692:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   14694:	4353      	muls	r3, r2
   14696:	e00f      	b.n	146b8 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
   14698:	4b0f      	ldr	r3, [pc, #60]	; (146d8 <system_clock_source_get_hz+0xb8>)
   1469a:	e00d      	b.n	146b8 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   1469c:	4a0a      	ldr	r2, [pc, #40]	; (146c8 <system_clock_source_get_hz+0xa8>)
   1469e:	2350      	movs	r3, #80	; 0x50
   146a0:	5cd3      	ldrb	r3, [r2, r3]
   146a2:	b2db      	uxtb	r3, r3
   146a4:	001a      	movs	r2, r3
   146a6:	2304      	movs	r3, #4
   146a8:	4013      	ands	r3, r2
   146aa:	d101      	bne.n	146b0 <system_clock_source_get_hz+0x90>
			return 0;
   146ac:	2300      	movs	r3, #0
   146ae:	e003      	b.n	146b8 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
   146b0:	4b04      	ldr	r3, [pc, #16]	; (146c4 <system_clock_source_get_hz+0xa4>)
   146b2:	68db      	ldr	r3, [r3, #12]
   146b4:	e000      	b.n	146b8 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
   146b6:	2300      	movs	r3, #0
	}
}
   146b8:	0018      	movs	r0, r3
   146ba:	46bd      	mov	sp, r7
   146bc:	b002      	add	sp, #8
   146be:	bd80      	pop	{r7, pc}
   146c0:	00019714 	.word	0x00019714
   146c4:	20000270 	.word	0x20000270
   146c8:	40000800 	.word	0x40000800
   146cc:	007a1200 	.word	0x007a1200
   146d0:	000145c1 	.word	0x000145c1
   146d4:	00015179 	.word	0x00015179
   146d8:	02dc6c00 	.word	0x02dc6c00

000146dc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   146dc:	b580      	push	{r7, lr}
   146de:	b084      	sub	sp, #16
   146e0:	af00      	add	r7, sp, #0
   146e2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   146e4:	4b1a      	ldr	r3, [pc, #104]	; (14750 <system_clock_source_osc8m_set_config+0x74>)
   146e6:	6a1b      	ldr	r3, [r3, #32]
   146e8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   146ea:	687b      	ldr	r3, [r7, #4]
   146ec:	781b      	ldrb	r3, [r3, #0]
   146ee:	1c1a      	adds	r2, r3, #0
   146f0:	2303      	movs	r3, #3
   146f2:	4013      	ands	r3, r2
   146f4:	b2da      	uxtb	r2, r3
   146f6:	230d      	movs	r3, #13
   146f8:	18fb      	adds	r3, r7, r3
   146fa:	2103      	movs	r1, #3
   146fc:	400a      	ands	r2, r1
   146fe:	0010      	movs	r0, r2
   14700:	781a      	ldrb	r2, [r3, #0]
   14702:	2103      	movs	r1, #3
   14704:	438a      	bics	r2, r1
   14706:	1c11      	adds	r1, r2, #0
   14708:	1c02      	adds	r2, r0, #0
   1470a:	430a      	orrs	r2, r1
   1470c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   1470e:	687b      	ldr	r3, [r7, #4]
   14710:	789a      	ldrb	r2, [r3, #2]
   14712:	230c      	movs	r3, #12
   14714:	18fb      	adds	r3, r7, r3
   14716:	01d0      	lsls	r0, r2, #7
   14718:	781a      	ldrb	r2, [r3, #0]
   1471a:	217f      	movs	r1, #127	; 0x7f
   1471c:	400a      	ands	r2, r1
   1471e:	1c11      	adds	r1, r2, #0
   14720:	1c02      	adds	r2, r0, #0
   14722:	430a      	orrs	r2, r1
   14724:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   14726:	687b      	ldr	r3, [r7, #4]
   14728:	785a      	ldrb	r2, [r3, #1]
   1472a:	230c      	movs	r3, #12
   1472c:	18fb      	adds	r3, r7, r3
   1472e:	2101      	movs	r1, #1
   14730:	400a      	ands	r2, r1
   14732:	0190      	lsls	r0, r2, #6
   14734:	781a      	ldrb	r2, [r3, #0]
   14736:	2140      	movs	r1, #64	; 0x40
   14738:	438a      	bics	r2, r1
   1473a:	1c11      	adds	r1, r2, #0
   1473c:	1c02      	adds	r2, r0, #0
   1473e:	430a      	orrs	r2, r1
   14740:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   14742:	4b03      	ldr	r3, [pc, #12]	; (14750 <system_clock_source_osc8m_set_config+0x74>)
   14744:	68fa      	ldr	r2, [r7, #12]
   14746:	621a      	str	r2, [r3, #32]
}
   14748:	46c0      	nop			; (mov r8, r8)
   1474a:	46bd      	mov	sp, r7
   1474c:	b004      	add	sp, #16
   1474e:	bd80      	pop	{r7, pc}
   14750:	40000800 	.word	0x40000800

00014754 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   14754:	b580      	push	{r7, lr}
   14756:	b084      	sub	sp, #16
   14758:	af00      	add	r7, sp, #0
   1475a:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   1475c:	4a43      	ldr	r2, [pc, #268]	; (1486c <system_clock_source_xosc32k_set_config+0x118>)
   1475e:	230c      	movs	r3, #12
   14760:	18fb      	adds	r3, r7, r3
   14762:	8a92      	ldrh	r2, [r2, #20]
   14764:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   14766:	687b      	ldr	r3, [r7, #4]
   14768:	785b      	ldrb	r3, [r3, #1]
   1476a:	1c1a      	adds	r2, r3, #0
   1476c:	2307      	movs	r3, #7
   1476e:	4013      	ands	r3, r2
   14770:	b2da      	uxtb	r2, r3
   14772:	230c      	movs	r3, #12
   14774:	18fb      	adds	r3, r7, r3
   14776:	2107      	movs	r1, #7
   14778:	400a      	ands	r2, r1
   1477a:	0010      	movs	r0, r2
   1477c:	785a      	ldrb	r2, [r3, #1]
   1477e:	2107      	movs	r1, #7
   14780:	438a      	bics	r2, r1
   14782:	1c11      	adds	r1, r2, #0
   14784:	1c02      	adds	r2, r0, #0
   14786:	430a      	orrs	r2, r1
   14788:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   1478a:	687b      	ldr	r3, [r7, #4]
   1478c:	781b      	ldrb	r3, [r3, #0]
   1478e:	2b00      	cmp	r3, #0
   14790:	d106      	bne.n	147a0 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   14792:	230c      	movs	r3, #12
   14794:	18fb      	adds	r3, r7, r3
   14796:	781a      	ldrb	r2, [r3, #0]
   14798:	2104      	movs	r1, #4
   1479a:	430a      	orrs	r2, r1
   1479c:	701a      	strb	r2, [r3, #0]
   1479e:	e005      	b.n	147ac <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   147a0:	230c      	movs	r3, #12
   147a2:	18fb      	adds	r3, r7, r3
   147a4:	781a      	ldrb	r2, [r3, #0]
   147a6:	2104      	movs	r1, #4
   147a8:	438a      	bics	r2, r1
   147aa:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   147ac:	687b      	ldr	r3, [r7, #4]
   147ae:	789a      	ldrb	r2, [r3, #2]
   147b0:	230c      	movs	r3, #12
   147b2:	18fb      	adds	r3, r7, r3
   147b4:	2101      	movs	r1, #1
   147b6:	400a      	ands	r2, r1
   147b8:	0150      	lsls	r0, r2, #5
   147ba:	781a      	ldrb	r2, [r3, #0]
   147bc:	2120      	movs	r1, #32
   147be:	438a      	bics	r2, r1
   147c0:	1c11      	adds	r1, r2, #0
   147c2:	1c02      	adds	r2, r0, #0
   147c4:	430a      	orrs	r2, r1
   147c6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   147c8:	687b      	ldr	r3, [r7, #4]
   147ca:	78da      	ldrb	r2, [r3, #3]
   147cc:	230c      	movs	r3, #12
   147ce:	18fb      	adds	r3, r7, r3
   147d0:	2101      	movs	r1, #1
   147d2:	400a      	ands	r2, r1
   147d4:	0110      	lsls	r0, r2, #4
   147d6:	781a      	ldrb	r2, [r3, #0]
   147d8:	2110      	movs	r1, #16
   147da:	438a      	bics	r2, r1
   147dc:	1c11      	adds	r1, r2, #0
   147de:	1c02      	adds	r2, r0, #0
   147e0:	430a      	orrs	r2, r1
   147e2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   147e4:	687b      	ldr	r3, [r7, #4]
   147e6:	791a      	ldrb	r2, [r3, #4]
   147e8:	230c      	movs	r3, #12
   147ea:	18fb      	adds	r3, r7, r3
   147ec:	2101      	movs	r1, #1
   147ee:	400a      	ands	r2, r1
   147f0:	00d0      	lsls	r0, r2, #3
   147f2:	781a      	ldrb	r2, [r3, #0]
   147f4:	2108      	movs	r1, #8
   147f6:	438a      	bics	r2, r1
   147f8:	1c11      	adds	r1, r2, #0
   147fa:	1c02      	adds	r2, r0, #0
   147fc:	430a      	orrs	r2, r1
   147fe:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   14800:	687b      	ldr	r3, [r7, #4]
   14802:	7b5a      	ldrb	r2, [r3, #13]
   14804:	230c      	movs	r3, #12
   14806:	18fb      	adds	r3, r7, r3
   14808:	01d0      	lsls	r0, r2, #7
   1480a:	781a      	ldrb	r2, [r3, #0]
   1480c:	217f      	movs	r1, #127	; 0x7f
   1480e:	400a      	ands	r2, r1
   14810:	1c11      	adds	r1, r2, #0
   14812:	1c02      	adds	r2, r0, #0
   14814:	430a      	orrs	r2, r1
   14816:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   14818:	687b      	ldr	r3, [r7, #4]
   1481a:	7b1a      	ldrb	r2, [r3, #12]
   1481c:	230c      	movs	r3, #12
   1481e:	18fb      	adds	r3, r7, r3
   14820:	2101      	movs	r1, #1
   14822:	400a      	ands	r2, r1
   14824:	0190      	lsls	r0, r2, #6
   14826:	781a      	ldrb	r2, [r3, #0]
   14828:	2140      	movs	r1, #64	; 0x40
   1482a:	438a      	bics	r2, r1
   1482c:	1c11      	adds	r1, r2, #0
   1482e:	1c02      	adds	r2, r0, #0
   14830:	430a      	orrs	r2, r1
   14832:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   14834:	687b      	ldr	r3, [r7, #4]
   14836:	7b9a      	ldrb	r2, [r3, #14]
   14838:	230c      	movs	r3, #12
   1483a:	18fb      	adds	r3, r7, r3
   1483c:	2101      	movs	r1, #1
   1483e:	400a      	ands	r2, r1
   14840:	0110      	lsls	r0, r2, #4
   14842:	785a      	ldrb	r2, [r3, #1]
   14844:	2110      	movs	r1, #16
   14846:	438a      	bics	r2, r1
   14848:	1c11      	adds	r1, r2, #0
   1484a:	1c02      	adds	r2, r0, #0
   1484c:	430a      	orrs	r2, r1
   1484e:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   14850:	687b      	ldr	r3, [r7, #4]
   14852:	689a      	ldr	r2, [r3, #8]
   14854:	4b06      	ldr	r3, [pc, #24]	; (14870 <system_clock_source_xosc32k_set_config+0x11c>)
   14856:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   14858:	4a04      	ldr	r2, [pc, #16]	; (1486c <system_clock_source_xosc32k_set_config+0x118>)
   1485a:	230c      	movs	r3, #12
   1485c:	18fb      	adds	r3, r7, r3
   1485e:	881b      	ldrh	r3, [r3, #0]
   14860:	8293      	strh	r3, [r2, #20]
}
   14862:	46c0      	nop			; (mov r8, r8)
   14864:	46bd      	mov	sp, r7
   14866:	b004      	add	sp, #16
   14868:	bd80      	pop	{r7, pc}
   1486a:	46c0      	nop			; (mov r8, r8)
   1486c:	40000800 	.word	0x40000800
   14870:	20000270 	.word	0x20000270

00014874 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   14874:	b580      	push	{r7, lr}
   14876:	b082      	sub	sp, #8
   14878:	af00      	add	r7, sp, #0
   1487a:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1487c:	687b      	ldr	r3, [r7, #4]
   1487e:	7a1b      	ldrb	r3, [r3, #8]
   14880:	029b      	lsls	r3, r3, #10
   14882:	041b      	lsls	r3, r3, #16
   14884:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   14886:	687b      	ldr	r3, [r7, #4]
   14888:	895b      	ldrh	r3, [r3, #10]
   1488a:	059b      	lsls	r3, r3, #22
   1488c:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   1488e:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
   14890:	4b2a      	ldr	r3, [pc, #168]	; (1493c <system_clock_source_dfll_set_config+0xc8>)
   14892:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   14894:	687b      	ldr	r3, [r7, #4]
   14896:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   14898:	687b      	ldr	r3, [r7, #4]
   1489a:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
   1489c:	4313      	orrs	r3, r2
   1489e:	b2db      	uxtb	r3, r3
   148a0:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
   148a2:	687b      	ldr	r3, [r7, #4]
   148a4:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
   148a6:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
   148a8:	687a      	ldr	r2, [r7, #4]
   148aa:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
   148ac:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   148ae:	687b      	ldr	r3, [r7, #4]
   148b0:	785b      	ldrb	r3, [r3, #1]
   148b2:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
   148b4:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
   148b6:	4b21      	ldr	r3, [pc, #132]	; (1493c <system_clock_source_dfll_set_config+0xc8>)
   148b8:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   148ba:	687b      	ldr	r3, [r7, #4]
   148bc:	781b      	ldrb	r3, [r3, #0]
   148be:	2b04      	cmp	r3, #4
   148c0:	d116      	bne.n	148f0 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   148c2:	687b      	ldr	r3, [r7, #4]
   148c4:	7b1b      	ldrb	r3, [r3, #12]
   148c6:	069b      	lsls	r3, r3, #26
   148c8:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   148ca:	687b      	ldr	r3, [r7, #4]
   148cc:	89db      	ldrh	r3, [r3, #14]
   148ce:	041b      	lsls	r3, r3, #16
   148d0:	0019      	movs	r1, r3
   148d2:	4b1b      	ldr	r3, [pc, #108]	; (14940 <system_clock_source_dfll_set_config+0xcc>)
   148d4:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   148d6:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   148d8:	687a      	ldr	r2, [r7, #4]
   148da:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   148dc:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   148de:	4b17      	ldr	r3, [pc, #92]	; (1493c <system_clock_source_dfll_set_config+0xc8>)
   148e0:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   148e2:	4b16      	ldr	r3, [pc, #88]	; (1493c <system_clock_source_dfll_set_config+0xc8>)
   148e4:	681b      	ldr	r3, [r3, #0]
   148e6:	687a      	ldr	r2, [r7, #4]
   148e8:	7812      	ldrb	r2, [r2, #0]
   148ea:	431a      	orrs	r2, r3
   148ec:	4b13      	ldr	r3, [pc, #76]	; (1493c <system_clock_source_dfll_set_config+0xc8>)
   148ee:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   148f0:	687b      	ldr	r3, [r7, #4]
   148f2:	781b      	ldrb	r3, [r3, #0]
   148f4:	2b20      	cmp	r3, #32
   148f6:	d11c      	bne.n	14932 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   148f8:	687b      	ldr	r3, [r7, #4]
   148fa:	7b1b      	ldrb	r3, [r3, #12]
   148fc:	069b      	lsls	r3, r3, #26
   148fe:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   14900:	687b      	ldr	r3, [r7, #4]
   14902:	89db      	ldrh	r3, [r3, #14]
   14904:	041b      	lsls	r3, r3, #16
   14906:	0019      	movs	r1, r3
   14908:	4b0d      	ldr	r3, [pc, #52]	; (14940 <system_clock_source_dfll_set_config+0xcc>)
   1490a:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1490c:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   1490e:	687a      	ldr	r2, [r7, #4]
   14910:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   14912:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
   14914:	4b09      	ldr	r3, [pc, #36]	; (1493c <system_clock_source_dfll_set_config+0xc8>)
   14916:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   14918:	4b08      	ldr	r3, [pc, #32]	; (1493c <system_clock_source_dfll_set_config+0xc8>)
   1491a:	681b      	ldr	r3, [r3, #0]
   1491c:	687a      	ldr	r2, [r7, #4]
   1491e:	7812      	ldrb	r2, [r2, #0]
   14920:	2104      	movs	r1, #4
   14922:	430a      	orrs	r2, r1
   14924:	b2d2      	uxtb	r2, r2
   14926:	4313      	orrs	r3, r2
   14928:	2280      	movs	r2, #128	; 0x80
   1492a:	00d2      	lsls	r2, r2, #3
   1492c:	431a      	orrs	r2, r3
   1492e:	4b03      	ldr	r3, [pc, #12]	; (1493c <system_clock_source_dfll_set_config+0xc8>)
   14930:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   14932:	46c0      	nop			; (mov r8, r8)
   14934:	46bd      	mov	sp, r7
   14936:	b002      	add	sp, #8
   14938:	bd80      	pop	{r7, pc}
   1493a:	46c0      	nop			; (mov r8, r8)
   1493c:	20000270 	.word	0x20000270
   14940:	03ff0000 	.word	0x03ff0000

00014944 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   14944:	b580      	push	{r7, lr}
   14946:	b082      	sub	sp, #8
   14948:	af00      	add	r7, sp, #0
   1494a:	0002      	movs	r2, r0
   1494c:	1dfb      	adds	r3, r7, #7
   1494e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   14950:	1dfb      	adds	r3, r7, #7
   14952:	781b      	ldrb	r3, [r3, #0]
   14954:	2b08      	cmp	r3, #8
   14956:	d83b      	bhi.n	149d0 <system_clock_source_enable+0x8c>
   14958:	009a      	lsls	r2, r3, #2
   1495a:	4b21      	ldr	r3, [pc, #132]	; (149e0 <system_clock_source_enable+0x9c>)
   1495c:	18d3      	adds	r3, r2, r3
   1495e:	681b      	ldr	r3, [r3, #0]
   14960:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   14962:	4b20      	ldr	r3, [pc, #128]	; (149e4 <system_clock_source_enable+0xa0>)
   14964:	4a1f      	ldr	r2, [pc, #124]	; (149e4 <system_clock_source_enable+0xa0>)
   14966:	6a12      	ldr	r2, [r2, #32]
   14968:	2102      	movs	r1, #2
   1496a:	430a      	orrs	r2, r1
   1496c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   1496e:	2300      	movs	r3, #0
   14970:	e031      	b.n	149d6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   14972:	4b1c      	ldr	r3, [pc, #112]	; (149e4 <system_clock_source_enable+0xa0>)
   14974:	4a1b      	ldr	r2, [pc, #108]	; (149e4 <system_clock_source_enable+0xa0>)
   14976:	6992      	ldr	r2, [r2, #24]
   14978:	2102      	movs	r1, #2
   1497a:	430a      	orrs	r2, r1
   1497c:	619a      	str	r2, [r3, #24]
		break;
   1497e:	e029      	b.n	149d4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   14980:	4a18      	ldr	r2, [pc, #96]	; (149e4 <system_clock_source_enable+0xa0>)
   14982:	4b18      	ldr	r3, [pc, #96]	; (149e4 <system_clock_source_enable+0xa0>)
   14984:	8a1b      	ldrh	r3, [r3, #16]
   14986:	b29b      	uxth	r3, r3
   14988:	2102      	movs	r1, #2
   1498a:	430b      	orrs	r3, r1
   1498c:	b29b      	uxth	r3, r3
   1498e:	8213      	strh	r3, [r2, #16]
		break;
   14990:	e020      	b.n	149d4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   14992:	4a14      	ldr	r2, [pc, #80]	; (149e4 <system_clock_source_enable+0xa0>)
   14994:	4b13      	ldr	r3, [pc, #76]	; (149e4 <system_clock_source_enable+0xa0>)
   14996:	8a9b      	ldrh	r3, [r3, #20]
   14998:	b29b      	uxth	r3, r3
   1499a:	2102      	movs	r1, #2
   1499c:	430b      	orrs	r3, r1
   1499e:	b29b      	uxth	r3, r3
   149a0:	8293      	strh	r3, [r2, #20]
		break;
   149a2:	e017      	b.n	149d4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   149a4:	4b10      	ldr	r3, [pc, #64]	; (149e8 <system_clock_source_enable+0xa4>)
   149a6:	681b      	ldr	r3, [r3, #0]
   149a8:	2202      	movs	r2, #2
   149aa:	431a      	orrs	r2, r3
   149ac:	4b0e      	ldr	r3, [pc, #56]	; (149e8 <system_clock_source_enable+0xa4>)
   149ae:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   149b0:	4b0e      	ldr	r3, [pc, #56]	; (149ec <system_clock_source_enable+0xa8>)
   149b2:	4798      	blx	r3
		break;
   149b4:	e00e      	b.n	149d4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   149b6:	4a0b      	ldr	r2, [pc, #44]	; (149e4 <system_clock_source_enable+0xa0>)
   149b8:	490a      	ldr	r1, [pc, #40]	; (149e4 <system_clock_source_enable+0xa0>)
   149ba:	2344      	movs	r3, #68	; 0x44
   149bc:	5ccb      	ldrb	r3, [r1, r3]
   149be:	b2db      	uxtb	r3, r3
   149c0:	2102      	movs	r1, #2
   149c2:	430b      	orrs	r3, r1
   149c4:	b2d9      	uxtb	r1, r3
   149c6:	2344      	movs	r3, #68	; 0x44
   149c8:	54d1      	strb	r1, [r2, r3]
		break;
   149ca:	e003      	b.n	149d4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   149cc:	2300      	movs	r3, #0
   149ce:	e002      	b.n	149d6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   149d0:	2317      	movs	r3, #23
   149d2:	e000      	b.n	149d6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   149d4:	2300      	movs	r3, #0
}
   149d6:	0018      	movs	r0, r3
   149d8:	46bd      	mov	sp, r7
   149da:	b002      	add	sp, #8
   149dc:	bd80      	pop	{r7, pc}
   149de:	46c0      	nop			; (mov r8, r8)
   149e0:	00019738 	.word	0x00019738
   149e4:	40000800 	.word	0x40000800
   149e8:	20000270 	.word	0x20000270
   149ec:	000145dd 	.word	0x000145dd

000149f0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   149f0:	b580      	push	{r7, lr}
   149f2:	b084      	sub	sp, #16
   149f4:	af00      	add	r7, sp, #0
   149f6:	0002      	movs	r2, r0
   149f8:	1dfb      	adds	r3, r7, #7
   149fa:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   149fc:	2300      	movs	r3, #0
   149fe:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   14a00:	1dfb      	adds	r3, r7, #7
   14a02:	781b      	ldrb	r3, [r3, #0]
   14a04:	2b08      	cmp	r3, #8
   14a06:	d821      	bhi.n	14a4c <system_clock_source_is_ready+0x5c>
   14a08:	009a      	lsls	r2, r3, #2
   14a0a:	4b18      	ldr	r3, [pc, #96]	; (14a6c <system_clock_source_is_ready+0x7c>)
   14a0c:	18d3      	adds	r3, r2, r3
   14a0e:	681b      	ldr	r3, [r3, #0]
   14a10:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   14a12:	2308      	movs	r3, #8
   14a14:	60fb      	str	r3, [r7, #12]
		break;
   14a16:	e01b      	b.n	14a50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   14a18:	2304      	movs	r3, #4
   14a1a:	60fb      	str	r3, [r7, #12]
		break;
   14a1c:	e018      	b.n	14a50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   14a1e:	2301      	movs	r3, #1
   14a20:	60fb      	str	r3, [r7, #12]
		break;
   14a22:	e015      	b.n	14a50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   14a24:	2302      	movs	r3, #2
   14a26:	60fb      	str	r3, [r7, #12]
		break;
   14a28:	e012      	b.n	14a50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   14a2a:	23d0      	movs	r3, #208	; 0xd0
   14a2c:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   14a2e:	e00f      	b.n	14a50 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   14a30:	4a0f      	ldr	r2, [pc, #60]	; (14a70 <system_clock_source_is_ready+0x80>)
   14a32:	2350      	movs	r3, #80	; 0x50
   14a34:	5cd3      	ldrb	r3, [r2, r3]
   14a36:	b2db      	uxtb	r3, r3
   14a38:	001a      	movs	r2, r3
   14a3a:	2303      	movs	r3, #3
   14a3c:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   14a3e:	3b03      	subs	r3, #3
   14a40:	425a      	negs	r2, r3
   14a42:	4153      	adcs	r3, r2
   14a44:	b2db      	uxtb	r3, r3
   14a46:	e00c      	b.n	14a62 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   14a48:	2301      	movs	r3, #1
   14a4a:	e00a      	b.n	14a62 <system_clock_source_is_ready+0x72>

	default:
		return false;
   14a4c:	2300      	movs	r3, #0
   14a4e:	e008      	b.n	14a62 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   14a50:	4b07      	ldr	r3, [pc, #28]	; (14a70 <system_clock_source_is_ready+0x80>)
   14a52:	68db      	ldr	r3, [r3, #12]
   14a54:	68fa      	ldr	r2, [r7, #12]
   14a56:	401a      	ands	r2, r3
   14a58:	68fb      	ldr	r3, [r7, #12]
   14a5a:	1ad3      	subs	r3, r2, r3
   14a5c:	425a      	negs	r2, r3
   14a5e:	4153      	adcs	r3, r2
   14a60:	b2db      	uxtb	r3, r3
}
   14a62:	0018      	movs	r0, r3
   14a64:	46bd      	mov	sp, r7
   14a66:	b004      	add	sp, #16
   14a68:	bd80      	pop	{r7, pc}
   14a6a:	46c0      	nop			; (mov r8, r8)
   14a6c:	0001975c 	.word	0x0001975c
   14a70:	40000800 	.word	0x40000800

00014a74 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   14a74:	b580      	push	{r7, lr}
   14a76:	b082      	sub	sp, #8
   14a78:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   14a7a:	003b      	movs	r3, r7
   14a7c:	2202      	movs	r2, #2
   14a7e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   14a80:	2300      	movs	r3, #0
   14a82:	607b      	str	r3, [r7, #4]
   14a84:	e009      	b.n	14a9a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   14a86:	687b      	ldr	r3, [r7, #4]
   14a88:	b2db      	uxtb	r3, r3
   14a8a:	003a      	movs	r2, r7
   14a8c:	0011      	movs	r1, r2
   14a8e:	0018      	movs	r0, r3
   14a90:	4b05      	ldr	r3, [pc, #20]	; (14aa8 <_switch_peripheral_gclk+0x34>)
   14a92:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   14a94:	687b      	ldr	r3, [r7, #4]
   14a96:	3301      	adds	r3, #1
   14a98:	607b      	str	r3, [r7, #4]
   14a9a:	687b      	ldr	r3, [r7, #4]
   14a9c:	2b24      	cmp	r3, #36	; 0x24
   14a9e:	d9f2      	bls.n	14a86 <_switch_peripheral_gclk+0x12>
	}
}
   14aa0:	46c0      	nop			; (mov r8, r8)
   14aa2:	46bd      	mov	sp, r7
   14aa4:	b002      	add	sp, #8
   14aa6:	bd80      	pop	{r7, pc}
   14aa8:	00015055 	.word	0x00015055

00014aac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   14aac:	b580      	push	{r7, lr}
   14aae:	b0aa      	sub	sp, #168	; 0xa8
   14ab0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   14ab2:	4b87      	ldr	r3, [pc, #540]	; (14cd0 <system_clock_init+0x224>)
   14ab4:	22c2      	movs	r2, #194	; 0xc2
   14ab6:	00d2      	lsls	r2, r2, #3
   14ab8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   14aba:	2002      	movs	r0, #2
   14abc:	4b85      	ldr	r3, [pc, #532]	; (14cd4 <system_clock_init+0x228>)
   14abe:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   14ac0:	4b85      	ldr	r3, [pc, #532]	; (14cd8 <system_clock_init+0x22c>)
   14ac2:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   14ac4:	2394      	movs	r3, #148	; 0x94
   14ac6:	18fb      	adds	r3, r7, r3
   14ac8:	0018      	movs	r0, r3
   14aca:	4b84      	ldr	r3, [pc, #528]	; (14cdc <system_clock_init+0x230>)
   14acc:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   14ace:	2394      	movs	r3, #148	; 0x94
   14ad0:	18fb      	adds	r3, r7, r3
   14ad2:	2280      	movs	r2, #128	; 0x80
   14ad4:	0212      	lsls	r2, r2, #8
   14ad6:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   14ad8:	2394      	movs	r3, #148	; 0x94
   14ada:	18fb      	adds	r3, r7, r3
   14adc:	2200      	movs	r2, #0
   14ade:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   14ae0:	2394      	movs	r3, #148	; 0x94
   14ae2:	18fb      	adds	r3, r7, r3
   14ae4:	2203      	movs	r2, #3
   14ae6:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   14ae8:	2394      	movs	r3, #148	; 0x94
   14aea:	18fb      	adds	r3, r7, r3
   14aec:	2200      	movs	r2, #0
   14aee:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   14af0:	2394      	movs	r3, #148	; 0x94
   14af2:	18fb      	adds	r3, r7, r3
   14af4:	2200      	movs	r2, #0
   14af6:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   14af8:	2394      	movs	r3, #148	; 0x94
   14afa:	18fb      	adds	r3, r7, r3
   14afc:	2201      	movs	r2, #1
   14afe:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   14b00:	2394      	movs	r3, #148	; 0x94
   14b02:	18fb      	adds	r3, r7, r3
   14b04:	2200      	movs	r2, #0
   14b06:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   14b08:	2394      	movs	r3, #148	; 0x94
   14b0a:	18fb      	adds	r3, r7, r3
   14b0c:	2200      	movs	r2, #0
   14b0e:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   14b10:	2394      	movs	r3, #148	; 0x94
   14b12:	18fb      	adds	r3, r7, r3
   14b14:	0018      	movs	r0, r3
   14b16:	4b72      	ldr	r3, [pc, #456]	; (14ce0 <system_clock_init+0x234>)
   14b18:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   14b1a:	2005      	movs	r0, #5
   14b1c:	4b71      	ldr	r3, [pc, #452]	; (14ce4 <system_clock_init+0x238>)
   14b1e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   14b20:	46c0      	nop			; (mov r8, r8)
   14b22:	2005      	movs	r0, #5
   14b24:	4b70      	ldr	r3, [pc, #448]	; (14ce8 <system_clock_init+0x23c>)
   14b26:	4798      	blx	r3
   14b28:	0003      	movs	r3, r0
   14b2a:	001a      	movs	r2, r3
   14b2c:	2301      	movs	r3, #1
   14b2e:	4053      	eors	r3, r2
   14b30:	b2db      	uxtb	r3, r3
   14b32:	2b00      	cmp	r3, #0
   14b34:	d1f5      	bne.n	14b22 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
   14b36:	4a66      	ldr	r2, [pc, #408]	; (14cd0 <system_clock_init+0x224>)
   14b38:	8a93      	ldrh	r3, [r2, #20]
   14b3a:	2180      	movs	r1, #128	; 0x80
   14b3c:	430b      	orrs	r3, r1
   14b3e:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   14b40:	2380      	movs	r3, #128	; 0x80
   14b42:	18fb      	adds	r3, r7, r3
   14b44:	0018      	movs	r0, r3
   14b46:	4b69      	ldr	r3, [pc, #420]	; (14cec <system_clock_init+0x240>)
   14b48:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   14b4a:	2380      	movs	r3, #128	; 0x80
   14b4c:	18fb      	adds	r3, r7, r3
   14b4e:	2204      	movs	r2, #4
   14b50:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   14b52:	2380      	movs	r3, #128	; 0x80
   14b54:	18fb      	adds	r3, r7, r3
   14b56:	2200      	movs	r2, #0
   14b58:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   14b5a:	4b65      	ldr	r3, [pc, #404]	; (14cf0 <system_clock_init+0x244>)
   14b5c:	681b      	ldr	r3, [r3, #0]
   14b5e:	0e9b      	lsrs	r3, r3, #26
   14b60:	22a4      	movs	r2, #164	; 0xa4
   14b62:	18ba      	adds	r2, r7, r2
   14b64:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   14b66:	23a4      	movs	r3, #164	; 0xa4
   14b68:	18fb      	adds	r3, r7, r3
   14b6a:	681b      	ldr	r3, [r3, #0]
   14b6c:	2b3f      	cmp	r3, #63	; 0x3f
   14b6e:	d103      	bne.n	14b78 <system_clock_init+0xcc>
		coarse = 0x1f;
   14b70:	231f      	movs	r3, #31
   14b72:	22a4      	movs	r2, #164	; 0xa4
   14b74:	18ba      	adds	r2, r7, r2
   14b76:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   14b78:	23a4      	movs	r3, #164	; 0xa4
   14b7a:	18fb      	adds	r3, r7, r3
   14b7c:	681b      	ldr	r3, [r3, #0]
   14b7e:	b2da      	uxtb	r2, r3
   14b80:	2380      	movs	r3, #128	; 0x80
   14b82:	18fb      	adds	r3, r7, r3
   14b84:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   14b86:	2380      	movs	r3, #128	; 0x80
   14b88:	18fb      	adds	r3, r7, r3
   14b8a:	2200      	movs	r2, #0
   14b8c:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   14b8e:	2380      	movs	r3, #128	; 0x80
   14b90:	18fb      	adds	r3, r7, r3
   14b92:	2200      	movs	r2, #0
   14b94:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   14b96:	2380      	movs	r3, #128	; 0x80
   14b98:	18fb      	adds	r3, r7, r3
   14b9a:	2200      	movs	r2, #0
   14b9c:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   14b9e:	2380      	movs	r3, #128	; 0x80
   14ba0:	18fb      	adds	r3, r7, r3
   14ba2:	2200      	movs	r2, #0
   14ba4:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   14ba6:	2380      	movs	r3, #128	; 0x80
   14ba8:	18fb      	adds	r3, r7, r3
   14baa:	4a52      	ldr	r2, [pc, #328]	; (14cf4 <system_clock_init+0x248>)
   14bac:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   14bae:	2380      	movs	r3, #128	; 0x80
   14bb0:	18fb      	adds	r3, r7, r3
   14bb2:	2207      	movs	r2, #7
   14bb4:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   14bb6:	2380      	movs	r3, #128	; 0x80
   14bb8:	18fb      	adds	r3, r7, r3
   14bba:	223f      	movs	r2, #63	; 0x3f
   14bbc:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   14bbe:	2380      	movs	r3, #128	; 0x80
   14bc0:	18fb      	adds	r3, r7, r3
   14bc2:	0018      	movs	r0, r3
   14bc4:	4b4c      	ldr	r3, [pc, #304]	; (14cf8 <system_clock_init+0x24c>)
   14bc6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   14bc8:	237c      	movs	r3, #124	; 0x7c
   14bca:	18fb      	adds	r3, r7, r3
   14bcc:	0018      	movs	r0, r3
   14bce:	4b4b      	ldr	r3, [pc, #300]	; (14cfc <system_clock_init+0x250>)
   14bd0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   14bd2:	237c      	movs	r3, #124	; 0x7c
   14bd4:	18fb      	adds	r3, r7, r3
   14bd6:	2200      	movs	r2, #0
   14bd8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   14bda:	237c      	movs	r3, #124	; 0x7c
   14bdc:	18fb      	adds	r3, r7, r3
   14bde:	2201      	movs	r2, #1
   14be0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   14be2:	237c      	movs	r3, #124	; 0x7c
   14be4:	18fb      	adds	r3, r7, r3
   14be6:	2200      	movs	r2, #0
   14be8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   14bea:	237c      	movs	r3, #124	; 0x7c
   14bec:	18fb      	adds	r3, r7, r3
   14bee:	0018      	movs	r0, r3
   14bf0:	4b43      	ldr	r3, [pc, #268]	; (14d00 <system_clock_init+0x254>)
   14bf2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   14bf4:	2006      	movs	r0, #6
   14bf6:	4b3b      	ldr	r3, [pc, #236]	; (14ce4 <system_clock_init+0x238>)
   14bf8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   14bfa:	4b42      	ldr	r3, [pc, #264]	; (14d04 <system_clock_init+0x258>)
   14bfc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   14bfe:	2364      	movs	r3, #100	; 0x64
   14c00:	18fb      	adds	r3, r7, r3
   14c02:	0018      	movs	r0, r3
   14c04:	4b40      	ldr	r3, [pc, #256]	; (14d08 <system_clock_init+0x25c>)
   14c06:	4798      	blx	r3
   14c08:	2364      	movs	r3, #100	; 0x64
   14c0a:	18fb      	adds	r3, r7, r3
   14c0c:	2205      	movs	r2, #5
   14c0e:	701a      	strb	r2, [r3, #0]
   14c10:	2364      	movs	r3, #100	; 0x64
   14c12:	18fb      	adds	r3, r7, r3
   14c14:	2201      	movs	r2, #1
   14c16:	605a      	str	r2, [r3, #4]
   14c18:	2364      	movs	r3, #100	; 0x64
   14c1a:	18fb      	adds	r3, r7, r3
   14c1c:	2200      	movs	r2, #0
   14c1e:	721a      	strb	r2, [r3, #8]
   14c20:	2364      	movs	r3, #100	; 0x64
   14c22:	18fb      	adds	r3, r7, r3
   14c24:	2200      	movs	r2, #0
   14c26:	725a      	strb	r2, [r3, #9]
   14c28:	2364      	movs	r3, #100	; 0x64
   14c2a:	18fb      	adds	r3, r7, r3
   14c2c:	0019      	movs	r1, r3
   14c2e:	2001      	movs	r0, #1
   14c30:	4b36      	ldr	r3, [pc, #216]	; (14d0c <system_clock_init+0x260>)
   14c32:	4798      	blx	r3
   14c34:	2001      	movs	r0, #1
   14c36:	4b36      	ldr	r3, [pc, #216]	; (14d10 <system_clock_init+0x264>)
   14c38:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   14c3a:	230c      	movs	r3, #12
   14c3c:	18fb      	adds	r3, r7, r3
   14c3e:	0018      	movs	r0, r3
   14c40:	4b34      	ldr	r3, [pc, #208]	; (14d14 <system_clock_init+0x268>)
   14c42:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   14c44:	230c      	movs	r3, #12
   14c46:	18fb      	adds	r3, r7, r3
   14c48:	2201      	movs	r2, #1
   14c4a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   14c4c:	230c      	movs	r3, #12
   14c4e:	18fb      	adds	r3, r7, r3
   14c50:	0019      	movs	r1, r3
   14c52:	2000      	movs	r0, #0
   14c54:	4b30      	ldr	r3, [pc, #192]	; (14d18 <system_clock_init+0x26c>)
   14c56:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   14c58:	2000      	movs	r0, #0
   14c5a:	4b30      	ldr	r3, [pc, #192]	; (14d1c <system_clock_init+0x270>)
   14c5c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   14c5e:	2007      	movs	r0, #7
   14c60:	4b20      	ldr	r3, [pc, #128]	; (14ce4 <system_clock_init+0x238>)
   14c62:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   14c64:	46c0      	nop			; (mov r8, r8)
   14c66:	2007      	movs	r0, #7
   14c68:	4b1f      	ldr	r3, [pc, #124]	; (14ce8 <system_clock_init+0x23c>)
   14c6a:	4798      	blx	r3
   14c6c:	0003      	movs	r3, r0
   14c6e:	001a      	movs	r2, r3
   14c70:	2301      	movs	r3, #1
   14c72:	4053      	eors	r3, r2
   14c74:	b2db      	uxtb	r3, r3
   14c76:	2b00      	cmp	r3, #0
   14c78:	d1f5      	bne.n	14c66 <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   14c7a:	2000      	movs	r0, #0
   14c7c:	4b28      	ldr	r3, [pc, #160]	; (14d20 <system_clock_init+0x274>)
   14c7e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   14c80:	2100      	movs	r1, #0
   14c82:	2000      	movs	r0, #0
   14c84:	4b27      	ldr	r3, [pc, #156]	; (14d24 <system_clock_init+0x278>)
   14c86:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   14c88:	2100      	movs	r1, #0
   14c8a:	2001      	movs	r0, #1
   14c8c:	4b25      	ldr	r3, [pc, #148]	; (14d24 <system_clock_init+0x278>)
   14c8e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   14c90:	2100      	movs	r1, #0
   14c92:	2002      	movs	r0, #2
   14c94:	4b23      	ldr	r3, [pc, #140]	; (14d24 <system_clock_init+0x278>)
   14c96:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   14c98:	003b      	movs	r3, r7
   14c9a:	0018      	movs	r0, r3
   14c9c:	4b1a      	ldr	r3, [pc, #104]	; (14d08 <system_clock_init+0x25c>)
   14c9e:	4798      	blx	r3
   14ca0:	003b      	movs	r3, r7
   14ca2:	2207      	movs	r2, #7
   14ca4:	701a      	strb	r2, [r3, #0]
   14ca6:	003b      	movs	r3, r7
   14ca8:	2201      	movs	r2, #1
   14caa:	605a      	str	r2, [r3, #4]
   14cac:	003b      	movs	r3, r7
   14cae:	2200      	movs	r2, #0
   14cb0:	721a      	strb	r2, [r3, #8]
   14cb2:	003b      	movs	r3, r7
   14cb4:	2200      	movs	r2, #0
   14cb6:	725a      	strb	r2, [r3, #9]
   14cb8:	003b      	movs	r3, r7
   14cba:	0019      	movs	r1, r3
   14cbc:	2000      	movs	r0, #0
   14cbe:	4b13      	ldr	r3, [pc, #76]	; (14d0c <system_clock_init+0x260>)
   14cc0:	4798      	blx	r3
   14cc2:	2000      	movs	r0, #0
   14cc4:	4b12      	ldr	r3, [pc, #72]	; (14d10 <system_clock_init+0x264>)
   14cc6:	4798      	blx	r3
#endif
}
   14cc8:	46c0      	nop			; (mov r8, r8)
   14cca:	46bd      	mov	sp, r7
   14ccc:	b02a      	add	sp, #168	; 0xa8
   14cce:	bd80      	pop	{r7, pc}
   14cd0:	40000800 	.word	0x40000800
   14cd4:	0001458d 	.word	0x0001458d
   14cd8:	00014a75 	.word	0x00014a75
   14cdc:	0001445d 	.word	0x0001445d
   14ce0:	00014755 	.word	0x00014755
   14ce4:	00014945 	.word	0x00014945
   14ce8:	000149f1 	.word	0x000149f1
   14cec:	000144c7 	.word	0x000144c7
   14cf0:	00806024 	.word	0x00806024
   14cf4:	000005b9 	.word	0x000005b9
   14cf8:	00014875 	.word	0x00014875
   14cfc:	000144a5 	.word	0x000144a5
   14d00:	000146dd 	.word	0x000146dd
   14d04:	00014dcd 	.word	0x00014dcd
   14d08:	00014419 	.word	0x00014419
   14d0c:	00014dfd 	.word	0x00014dfd
   14d10:	00014f21 	.word	0x00014f21
   14d14:	00014447 	.word	0x00014447
   14d18:	00015055 	.word	0x00015055
   14d1c:	00015099 	.word	0x00015099
   14d20:	00014519 	.word	0x00014519
   14d24:	00014539 	.word	0x00014539

00014d28 <system_apb_clock_set_mask>:
{
   14d28:	b580      	push	{r7, lr}
   14d2a:	b082      	sub	sp, #8
   14d2c:	af00      	add	r7, sp, #0
   14d2e:	0002      	movs	r2, r0
   14d30:	6039      	str	r1, [r7, #0]
   14d32:	1dfb      	adds	r3, r7, #7
   14d34:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   14d36:	1dfb      	adds	r3, r7, #7
   14d38:	781b      	ldrb	r3, [r3, #0]
   14d3a:	2b01      	cmp	r3, #1
   14d3c:	d00a      	beq.n	14d54 <system_apb_clock_set_mask+0x2c>
   14d3e:	2b02      	cmp	r3, #2
   14d40:	d00f      	beq.n	14d62 <system_apb_clock_set_mask+0x3a>
   14d42:	2b00      	cmp	r3, #0
   14d44:	d114      	bne.n	14d70 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   14d46:	4b0e      	ldr	r3, [pc, #56]	; (14d80 <system_apb_clock_set_mask+0x58>)
   14d48:	4a0d      	ldr	r2, [pc, #52]	; (14d80 <system_apb_clock_set_mask+0x58>)
   14d4a:	6991      	ldr	r1, [r2, #24]
   14d4c:	683a      	ldr	r2, [r7, #0]
   14d4e:	430a      	orrs	r2, r1
   14d50:	619a      	str	r2, [r3, #24]
			break;
   14d52:	e00f      	b.n	14d74 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   14d54:	4b0a      	ldr	r3, [pc, #40]	; (14d80 <system_apb_clock_set_mask+0x58>)
   14d56:	4a0a      	ldr	r2, [pc, #40]	; (14d80 <system_apb_clock_set_mask+0x58>)
   14d58:	69d1      	ldr	r1, [r2, #28]
   14d5a:	683a      	ldr	r2, [r7, #0]
   14d5c:	430a      	orrs	r2, r1
   14d5e:	61da      	str	r2, [r3, #28]
			break;
   14d60:	e008      	b.n	14d74 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   14d62:	4b07      	ldr	r3, [pc, #28]	; (14d80 <system_apb_clock_set_mask+0x58>)
   14d64:	4a06      	ldr	r2, [pc, #24]	; (14d80 <system_apb_clock_set_mask+0x58>)
   14d66:	6a11      	ldr	r1, [r2, #32]
   14d68:	683a      	ldr	r2, [r7, #0]
   14d6a:	430a      	orrs	r2, r1
   14d6c:	621a      	str	r2, [r3, #32]
			break;
   14d6e:	e001      	b.n	14d74 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   14d70:	2317      	movs	r3, #23
   14d72:	e000      	b.n	14d76 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   14d74:	2300      	movs	r3, #0
}
   14d76:	0018      	movs	r0, r3
   14d78:	46bd      	mov	sp, r7
   14d7a:	b002      	add	sp, #8
   14d7c:	bd80      	pop	{r7, pc}
   14d7e:	46c0      	nop			; (mov r8, r8)
   14d80:	40000400 	.word	0x40000400

00014d84 <system_interrupt_enter_critical_section>:
{
   14d84:	b580      	push	{r7, lr}
   14d86:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   14d88:	4b02      	ldr	r3, [pc, #8]	; (14d94 <system_interrupt_enter_critical_section+0x10>)
   14d8a:	4798      	blx	r3
}
   14d8c:	46c0      	nop			; (mov r8, r8)
   14d8e:	46bd      	mov	sp, r7
   14d90:	bd80      	pop	{r7, pc}
   14d92:	46c0      	nop			; (mov r8, r8)
   14d94:	00010b9d 	.word	0x00010b9d

00014d98 <system_interrupt_leave_critical_section>:
{
   14d98:	b580      	push	{r7, lr}
   14d9a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   14d9c:	4b02      	ldr	r3, [pc, #8]	; (14da8 <system_interrupt_leave_critical_section+0x10>)
   14d9e:	4798      	blx	r3
}
   14da0:	46c0      	nop			; (mov r8, r8)
   14da2:	46bd      	mov	sp, r7
   14da4:	bd80      	pop	{r7, pc}
   14da6:	46c0      	nop			; (mov r8, r8)
   14da8:	00010bf1 	.word	0x00010bf1

00014dac <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   14dac:	b580      	push	{r7, lr}
   14dae:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   14db0:	4b05      	ldr	r3, [pc, #20]	; (14dc8 <system_gclk_is_syncing+0x1c>)
   14db2:	785b      	ldrb	r3, [r3, #1]
   14db4:	b2db      	uxtb	r3, r3
   14db6:	b25b      	sxtb	r3, r3
   14db8:	2b00      	cmp	r3, #0
   14dba:	da01      	bge.n	14dc0 <system_gclk_is_syncing+0x14>
		return true;
   14dbc:	2301      	movs	r3, #1
   14dbe:	e000      	b.n	14dc2 <system_gclk_is_syncing+0x16>
	}

	return false;
   14dc0:	2300      	movs	r3, #0
}
   14dc2:	0018      	movs	r0, r3
   14dc4:	46bd      	mov	sp, r7
   14dc6:	bd80      	pop	{r7, pc}
   14dc8:	40000c00 	.word	0x40000c00

00014dcc <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   14dcc:	b580      	push	{r7, lr}
   14dce:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   14dd0:	2108      	movs	r1, #8
   14dd2:	2000      	movs	r0, #0
   14dd4:	4b07      	ldr	r3, [pc, #28]	; (14df4 <system_gclk_init+0x28>)
   14dd6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   14dd8:	4b07      	ldr	r3, [pc, #28]	; (14df8 <system_gclk_init+0x2c>)
   14dda:	2201      	movs	r2, #1
   14ddc:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   14dde:	46c0      	nop			; (mov r8, r8)
   14de0:	4b05      	ldr	r3, [pc, #20]	; (14df8 <system_gclk_init+0x2c>)
   14de2:	781b      	ldrb	r3, [r3, #0]
   14de4:	b2db      	uxtb	r3, r3
   14de6:	001a      	movs	r2, r3
   14de8:	2301      	movs	r3, #1
   14dea:	4013      	ands	r3, r2
   14dec:	d1f8      	bne.n	14de0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   14dee:	46c0      	nop			; (mov r8, r8)
   14df0:	46bd      	mov	sp, r7
   14df2:	bd80      	pop	{r7, pc}
   14df4:	00014d29 	.word	0x00014d29
   14df8:	40000c00 	.word	0x40000c00

00014dfc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   14dfc:	b580      	push	{r7, lr}
   14dfe:	b086      	sub	sp, #24
   14e00:	af00      	add	r7, sp, #0
   14e02:	0002      	movs	r2, r0
   14e04:	6039      	str	r1, [r7, #0]
   14e06:	1dfb      	adds	r3, r7, #7
   14e08:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   14e0a:	1dfb      	adds	r3, r7, #7
   14e0c:	781b      	ldrb	r3, [r3, #0]
   14e0e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   14e10:	1dfb      	adds	r3, r7, #7
   14e12:	781b      	ldrb	r3, [r3, #0]
   14e14:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   14e16:	683b      	ldr	r3, [r7, #0]
   14e18:	781b      	ldrb	r3, [r3, #0]
   14e1a:	021b      	lsls	r3, r3, #8
   14e1c:	001a      	movs	r2, r3
   14e1e:	697b      	ldr	r3, [r7, #20]
   14e20:	4313      	orrs	r3, r2
   14e22:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   14e24:	683b      	ldr	r3, [r7, #0]
   14e26:	785b      	ldrb	r3, [r3, #1]
   14e28:	2b00      	cmp	r3, #0
   14e2a:	d004      	beq.n	14e36 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   14e2c:	697b      	ldr	r3, [r7, #20]
   14e2e:	2280      	movs	r2, #128	; 0x80
   14e30:	02d2      	lsls	r2, r2, #11
   14e32:	4313      	orrs	r3, r2
   14e34:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   14e36:	683b      	ldr	r3, [r7, #0]
   14e38:	7a5b      	ldrb	r3, [r3, #9]
   14e3a:	2b00      	cmp	r3, #0
   14e3c:	d004      	beq.n	14e48 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   14e3e:	697b      	ldr	r3, [r7, #20]
   14e40:	2280      	movs	r2, #128	; 0x80
   14e42:	0312      	lsls	r2, r2, #12
   14e44:	4313      	orrs	r3, r2
   14e46:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   14e48:	683b      	ldr	r3, [r7, #0]
   14e4a:	685b      	ldr	r3, [r3, #4]
   14e4c:	2b01      	cmp	r3, #1
   14e4e:	d92c      	bls.n	14eaa <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   14e50:	683b      	ldr	r3, [r7, #0]
   14e52:	685a      	ldr	r2, [r3, #4]
   14e54:	683b      	ldr	r3, [r7, #0]
   14e56:	685b      	ldr	r3, [r3, #4]
   14e58:	3b01      	subs	r3, #1
   14e5a:	4013      	ands	r3, r2
   14e5c:	d11a      	bne.n	14e94 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   14e5e:	2300      	movs	r3, #0
   14e60:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   14e62:	2302      	movs	r3, #2
   14e64:	60bb      	str	r3, [r7, #8]
   14e66:	e005      	b.n	14e74 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   14e68:	68fb      	ldr	r3, [r7, #12]
   14e6a:	3301      	adds	r3, #1
   14e6c:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   14e6e:	68bb      	ldr	r3, [r7, #8]
   14e70:	005b      	lsls	r3, r3, #1
   14e72:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   14e74:	683b      	ldr	r3, [r7, #0]
   14e76:	685a      	ldr	r2, [r3, #4]
   14e78:	68bb      	ldr	r3, [r7, #8]
   14e7a:	429a      	cmp	r2, r3
   14e7c:	d8f4      	bhi.n	14e68 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   14e7e:	68fb      	ldr	r3, [r7, #12]
   14e80:	021b      	lsls	r3, r3, #8
   14e82:	693a      	ldr	r2, [r7, #16]
   14e84:	4313      	orrs	r3, r2
   14e86:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   14e88:	697b      	ldr	r3, [r7, #20]
   14e8a:	2280      	movs	r2, #128	; 0x80
   14e8c:	0352      	lsls	r2, r2, #13
   14e8e:	4313      	orrs	r3, r2
   14e90:	617b      	str	r3, [r7, #20]
   14e92:	e00a      	b.n	14eaa <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   14e94:	683b      	ldr	r3, [r7, #0]
   14e96:	685b      	ldr	r3, [r3, #4]
   14e98:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   14e9a:	693a      	ldr	r2, [r7, #16]
   14e9c:	4313      	orrs	r3, r2
   14e9e:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   14ea0:	697b      	ldr	r3, [r7, #20]
   14ea2:	2280      	movs	r2, #128	; 0x80
   14ea4:	0292      	lsls	r2, r2, #10
   14ea6:	4313      	orrs	r3, r2
   14ea8:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   14eaa:	683b      	ldr	r3, [r7, #0]
   14eac:	7a1b      	ldrb	r3, [r3, #8]
   14eae:	2b00      	cmp	r3, #0
   14eb0:	d004      	beq.n	14ebc <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   14eb2:	697b      	ldr	r3, [r7, #20]
   14eb4:	2280      	movs	r2, #128	; 0x80
   14eb6:	0392      	lsls	r2, r2, #14
   14eb8:	4313      	orrs	r3, r2
   14eba:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   14ebc:	46c0      	nop			; (mov r8, r8)
   14ebe:	4b13      	ldr	r3, [pc, #76]	; (14f0c <system_gclk_gen_set_config+0x110>)
   14ec0:	4798      	blx	r3
   14ec2:	1e03      	subs	r3, r0, #0
   14ec4:	d1fb      	bne.n	14ebe <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   14ec6:	4b12      	ldr	r3, [pc, #72]	; (14f10 <system_gclk_gen_set_config+0x114>)
   14ec8:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   14eca:	4a12      	ldr	r2, [pc, #72]	; (14f14 <system_gclk_gen_set_config+0x118>)
   14ecc:	1dfb      	adds	r3, r7, #7
   14ece:	781b      	ldrb	r3, [r3, #0]
   14ed0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   14ed2:	46c0      	nop			; (mov r8, r8)
   14ed4:	4b0d      	ldr	r3, [pc, #52]	; (14f0c <system_gclk_gen_set_config+0x110>)
   14ed6:	4798      	blx	r3
   14ed8:	1e03      	subs	r3, r0, #0
   14eda:	d1fb      	bne.n	14ed4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   14edc:	4b0e      	ldr	r3, [pc, #56]	; (14f18 <system_gclk_gen_set_config+0x11c>)
   14ede:	693a      	ldr	r2, [r7, #16]
   14ee0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   14ee2:	46c0      	nop			; (mov r8, r8)
   14ee4:	4b09      	ldr	r3, [pc, #36]	; (14f0c <system_gclk_gen_set_config+0x110>)
   14ee6:	4798      	blx	r3
   14ee8:	1e03      	subs	r3, r0, #0
   14eea:	d1fb      	bne.n	14ee4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   14eec:	4b0a      	ldr	r3, [pc, #40]	; (14f18 <system_gclk_gen_set_config+0x11c>)
   14eee:	4a0a      	ldr	r2, [pc, #40]	; (14f18 <system_gclk_gen_set_config+0x11c>)
   14ef0:	6851      	ldr	r1, [r2, #4]
   14ef2:	2280      	movs	r2, #128	; 0x80
   14ef4:	0252      	lsls	r2, r2, #9
   14ef6:	4011      	ands	r1, r2
   14ef8:	697a      	ldr	r2, [r7, #20]
   14efa:	430a      	orrs	r2, r1
   14efc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   14efe:	4b07      	ldr	r3, [pc, #28]	; (14f1c <system_gclk_gen_set_config+0x120>)
   14f00:	4798      	blx	r3
}
   14f02:	46c0      	nop			; (mov r8, r8)
   14f04:	46bd      	mov	sp, r7
   14f06:	b006      	add	sp, #24
   14f08:	bd80      	pop	{r7, pc}
   14f0a:	46c0      	nop			; (mov r8, r8)
   14f0c:	00014dad 	.word	0x00014dad
   14f10:	00014d85 	.word	0x00014d85
   14f14:	40000c08 	.word	0x40000c08
   14f18:	40000c00 	.word	0x40000c00
   14f1c:	00014d99 	.word	0x00014d99

00014f20 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   14f20:	b580      	push	{r7, lr}
   14f22:	b082      	sub	sp, #8
   14f24:	af00      	add	r7, sp, #0
   14f26:	0002      	movs	r2, r0
   14f28:	1dfb      	adds	r3, r7, #7
   14f2a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   14f2c:	46c0      	nop			; (mov r8, r8)
   14f2e:	4b0e      	ldr	r3, [pc, #56]	; (14f68 <system_gclk_gen_enable+0x48>)
   14f30:	4798      	blx	r3
   14f32:	1e03      	subs	r3, r0, #0
   14f34:	d1fb      	bne.n	14f2e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   14f36:	4b0d      	ldr	r3, [pc, #52]	; (14f6c <system_gclk_gen_enable+0x4c>)
   14f38:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   14f3a:	4a0d      	ldr	r2, [pc, #52]	; (14f70 <system_gclk_gen_enable+0x50>)
   14f3c:	1dfb      	adds	r3, r7, #7
   14f3e:	781b      	ldrb	r3, [r3, #0]
   14f40:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   14f42:	46c0      	nop			; (mov r8, r8)
   14f44:	4b08      	ldr	r3, [pc, #32]	; (14f68 <system_gclk_gen_enable+0x48>)
   14f46:	4798      	blx	r3
   14f48:	1e03      	subs	r3, r0, #0
   14f4a:	d1fb      	bne.n	14f44 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   14f4c:	4b09      	ldr	r3, [pc, #36]	; (14f74 <system_gclk_gen_enable+0x54>)
   14f4e:	4a09      	ldr	r2, [pc, #36]	; (14f74 <system_gclk_gen_enable+0x54>)
   14f50:	6852      	ldr	r2, [r2, #4]
   14f52:	2180      	movs	r1, #128	; 0x80
   14f54:	0249      	lsls	r1, r1, #9
   14f56:	430a      	orrs	r2, r1
   14f58:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   14f5a:	4b07      	ldr	r3, [pc, #28]	; (14f78 <system_gclk_gen_enable+0x58>)
   14f5c:	4798      	blx	r3
}
   14f5e:	46c0      	nop			; (mov r8, r8)
   14f60:	46bd      	mov	sp, r7
   14f62:	b002      	add	sp, #8
   14f64:	bd80      	pop	{r7, pc}
   14f66:	46c0      	nop			; (mov r8, r8)
   14f68:	00014dad 	.word	0x00014dad
   14f6c:	00014d85 	.word	0x00014d85
   14f70:	40000c04 	.word	0x40000c04
   14f74:	40000c00 	.word	0x40000c00
   14f78:	00014d99 	.word	0x00014d99

00014f7c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   14f7c:	b580      	push	{r7, lr}
   14f7e:	b086      	sub	sp, #24
   14f80:	af00      	add	r7, sp, #0
   14f82:	0002      	movs	r2, r0
   14f84:	1dfb      	adds	r3, r7, #7
   14f86:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   14f88:	46c0      	nop			; (mov r8, r8)
   14f8a:	4b2a      	ldr	r3, [pc, #168]	; (15034 <system_gclk_gen_get_hz+0xb8>)
   14f8c:	4798      	blx	r3
   14f8e:	1e03      	subs	r3, r0, #0
   14f90:	d1fb      	bne.n	14f8a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   14f92:	4b29      	ldr	r3, [pc, #164]	; (15038 <system_gclk_gen_get_hz+0xbc>)
   14f94:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   14f96:	4a29      	ldr	r2, [pc, #164]	; (1503c <system_gclk_gen_get_hz+0xc0>)
   14f98:	1dfb      	adds	r3, r7, #7
   14f9a:	781b      	ldrb	r3, [r3, #0]
   14f9c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   14f9e:	46c0      	nop			; (mov r8, r8)
   14fa0:	4b24      	ldr	r3, [pc, #144]	; (15034 <system_gclk_gen_get_hz+0xb8>)
   14fa2:	4798      	blx	r3
   14fa4:	1e03      	subs	r3, r0, #0
   14fa6:	d1fb      	bne.n	14fa0 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   14fa8:	4b25      	ldr	r3, [pc, #148]	; (15040 <system_gclk_gen_get_hz+0xc4>)
   14faa:	685b      	ldr	r3, [r3, #4]
   14fac:	04db      	lsls	r3, r3, #19
   14fae:	0edb      	lsrs	r3, r3, #27
   14fb0:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   14fb2:	0018      	movs	r0, r3
   14fb4:	4b23      	ldr	r3, [pc, #140]	; (15044 <system_gclk_gen_get_hz+0xc8>)
   14fb6:	4798      	blx	r3
   14fb8:	0003      	movs	r3, r0
   14fba:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   14fbc:	4a1f      	ldr	r2, [pc, #124]	; (1503c <system_gclk_gen_get_hz+0xc0>)
   14fbe:	1dfb      	adds	r3, r7, #7
   14fc0:	781b      	ldrb	r3, [r3, #0]
   14fc2:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   14fc4:	4b1e      	ldr	r3, [pc, #120]	; (15040 <system_gclk_gen_get_hz+0xc4>)
   14fc6:	685b      	ldr	r3, [r3, #4]
   14fc8:	02db      	lsls	r3, r3, #11
   14fca:	0fdb      	lsrs	r3, r3, #31
   14fcc:	b2da      	uxtb	r2, r3
   14fce:	2313      	movs	r3, #19
   14fd0:	18fb      	adds	r3, r7, r3
   14fd2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   14fd4:	4a1c      	ldr	r2, [pc, #112]	; (15048 <system_gclk_gen_get_hz+0xcc>)
   14fd6:	1dfb      	adds	r3, r7, #7
   14fd8:	781b      	ldrb	r3, [r3, #0]
   14fda:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   14fdc:	46c0      	nop			; (mov r8, r8)
   14fde:	4b15      	ldr	r3, [pc, #84]	; (15034 <system_gclk_gen_get_hz+0xb8>)
   14fe0:	4798      	blx	r3
   14fe2:	1e03      	subs	r3, r0, #0
   14fe4:	d1fb      	bne.n	14fde <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   14fe6:	4b16      	ldr	r3, [pc, #88]	; (15040 <system_gclk_gen_get_hz+0xc4>)
   14fe8:	689b      	ldr	r3, [r3, #8]
   14fea:	021b      	lsls	r3, r3, #8
   14fec:	0c1b      	lsrs	r3, r3, #16
   14fee:	b29b      	uxth	r3, r3
   14ff0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   14ff2:	4b16      	ldr	r3, [pc, #88]	; (1504c <system_gclk_gen_get_hz+0xd0>)
   14ff4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   14ff6:	2313      	movs	r3, #19
   14ff8:	18fb      	adds	r3, r7, r3
   14ffa:	781b      	ldrb	r3, [r3, #0]
   14ffc:	2b00      	cmp	r3, #0
   14ffe:	d109      	bne.n	15014 <system_gclk_gen_get_hz+0x98>
   15000:	68fb      	ldr	r3, [r7, #12]
   15002:	2b01      	cmp	r3, #1
   15004:	d906      	bls.n	15014 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   15006:	4b12      	ldr	r3, [pc, #72]	; (15050 <system_gclk_gen_get_hz+0xd4>)
   15008:	68f9      	ldr	r1, [r7, #12]
   1500a:	6978      	ldr	r0, [r7, #20]
   1500c:	4798      	blx	r3
   1500e:	0003      	movs	r3, r0
   15010:	617b      	str	r3, [r7, #20]
   15012:	e00a      	b.n	1502a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   15014:	2313      	movs	r3, #19
   15016:	18fb      	adds	r3, r7, r3
   15018:	781b      	ldrb	r3, [r3, #0]
   1501a:	2b00      	cmp	r3, #0
   1501c:	d005      	beq.n	1502a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   1501e:	68fb      	ldr	r3, [r7, #12]
   15020:	3301      	adds	r3, #1
   15022:	697a      	ldr	r2, [r7, #20]
   15024:	40da      	lsrs	r2, r3
   15026:	0013      	movs	r3, r2
   15028:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   1502a:	697b      	ldr	r3, [r7, #20]
}
   1502c:	0018      	movs	r0, r3
   1502e:	46bd      	mov	sp, r7
   15030:	b006      	add	sp, #24
   15032:	bd80      	pop	{r7, pc}
   15034:	00014dad 	.word	0x00014dad
   15038:	00014d85 	.word	0x00014d85
   1503c:	40000c04 	.word	0x40000c04
   15040:	40000c00 	.word	0x40000c00
   15044:	00014621 	.word	0x00014621
   15048:	40000c08 	.word	0x40000c08
   1504c:	00014d99 	.word	0x00014d99
   15050:	00016815 	.word	0x00016815

00015054 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   15054:	b580      	push	{r7, lr}
   15056:	b084      	sub	sp, #16
   15058:	af00      	add	r7, sp, #0
   1505a:	0002      	movs	r2, r0
   1505c:	6039      	str	r1, [r7, #0]
   1505e:	1dfb      	adds	r3, r7, #7
   15060:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   15062:	1dfb      	adds	r3, r7, #7
   15064:	781b      	ldrb	r3, [r3, #0]
   15066:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   15068:	683b      	ldr	r3, [r7, #0]
   1506a:	781b      	ldrb	r3, [r3, #0]
   1506c:	021b      	lsls	r3, r3, #8
   1506e:	001a      	movs	r2, r3
   15070:	68fb      	ldr	r3, [r7, #12]
   15072:	4313      	orrs	r3, r2
   15074:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   15076:	1dfb      	adds	r3, r7, #7
   15078:	781b      	ldrb	r3, [r3, #0]
   1507a:	0018      	movs	r0, r3
   1507c:	4b04      	ldr	r3, [pc, #16]	; (15090 <system_gclk_chan_set_config+0x3c>)
   1507e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   15080:	4b04      	ldr	r3, [pc, #16]	; (15094 <system_gclk_chan_set_config+0x40>)
   15082:	68fa      	ldr	r2, [r7, #12]
   15084:	b292      	uxth	r2, r2
   15086:	805a      	strh	r2, [r3, #2]
}
   15088:	46c0      	nop			; (mov r8, r8)
   1508a:	46bd      	mov	sp, r7
   1508c:	b004      	add	sp, #16
   1508e:	bd80      	pop	{r7, pc}
   15090:	000150e1 	.word	0x000150e1
   15094:	40000c00 	.word	0x40000c00

00015098 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   15098:	b580      	push	{r7, lr}
   1509a:	b082      	sub	sp, #8
   1509c:	af00      	add	r7, sp, #0
   1509e:	0002      	movs	r2, r0
   150a0:	1dfb      	adds	r3, r7, #7
   150a2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   150a4:	4b0a      	ldr	r3, [pc, #40]	; (150d0 <system_gclk_chan_enable+0x38>)
   150a6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   150a8:	4a0a      	ldr	r2, [pc, #40]	; (150d4 <system_gclk_chan_enable+0x3c>)
   150aa:	1dfb      	adds	r3, r7, #7
   150ac:	781b      	ldrb	r3, [r3, #0]
   150ae:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   150b0:	4909      	ldr	r1, [pc, #36]	; (150d8 <system_gclk_chan_enable+0x40>)
   150b2:	4b09      	ldr	r3, [pc, #36]	; (150d8 <system_gclk_chan_enable+0x40>)
   150b4:	885b      	ldrh	r3, [r3, #2]
   150b6:	b29b      	uxth	r3, r3
   150b8:	2280      	movs	r2, #128	; 0x80
   150ba:	01d2      	lsls	r2, r2, #7
   150bc:	4313      	orrs	r3, r2
   150be:	b29b      	uxth	r3, r3
   150c0:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   150c2:	4b06      	ldr	r3, [pc, #24]	; (150dc <system_gclk_chan_enable+0x44>)
   150c4:	4798      	blx	r3
}
   150c6:	46c0      	nop			; (mov r8, r8)
   150c8:	46bd      	mov	sp, r7
   150ca:	b002      	add	sp, #8
   150cc:	bd80      	pop	{r7, pc}
   150ce:	46c0      	nop			; (mov r8, r8)
   150d0:	00014d85 	.word	0x00014d85
   150d4:	40000c02 	.word	0x40000c02
   150d8:	40000c00 	.word	0x40000c00
   150dc:	00014d99 	.word	0x00014d99

000150e0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   150e0:	b580      	push	{r7, lr}
   150e2:	b084      	sub	sp, #16
   150e4:	af00      	add	r7, sp, #0
   150e6:	0002      	movs	r2, r0
   150e8:	1dfb      	adds	r3, r7, #7
   150ea:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   150ec:	4b1c      	ldr	r3, [pc, #112]	; (15160 <system_gclk_chan_disable+0x80>)
   150ee:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   150f0:	4a1c      	ldr	r2, [pc, #112]	; (15164 <system_gclk_chan_disable+0x84>)
   150f2:	1dfb      	adds	r3, r7, #7
   150f4:	781b      	ldrb	r3, [r3, #0]
   150f6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   150f8:	4b1b      	ldr	r3, [pc, #108]	; (15168 <system_gclk_chan_disable+0x88>)
   150fa:	885b      	ldrh	r3, [r3, #2]
   150fc:	051b      	lsls	r3, r3, #20
   150fe:	0f1b      	lsrs	r3, r3, #28
   15100:	b2db      	uxtb	r3, r3
   15102:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   15104:	4a18      	ldr	r2, [pc, #96]	; (15168 <system_gclk_chan_disable+0x88>)
   15106:	8853      	ldrh	r3, [r2, #2]
   15108:	4918      	ldr	r1, [pc, #96]	; (1516c <system_gclk_chan_disable+0x8c>)
   1510a:	400b      	ands	r3, r1
   1510c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   1510e:	4a16      	ldr	r2, [pc, #88]	; (15168 <system_gclk_chan_disable+0x88>)
   15110:	4b15      	ldr	r3, [pc, #84]	; (15168 <system_gclk_chan_disable+0x88>)
   15112:	885b      	ldrh	r3, [r3, #2]
   15114:	b29b      	uxth	r3, r3
   15116:	4916      	ldr	r1, [pc, #88]	; (15170 <system_gclk_chan_disable+0x90>)
   15118:	400b      	ands	r3, r1
   1511a:	b29b      	uxth	r3, r3
   1511c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   1511e:	46c0      	nop			; (mov r8, r8)
   15120:	4b11      	ldr	r3, [pc, #68]	; (15168 <system_gclk_chan_disable+0x88>)
   15122:	885b      	ldrh	r3, [r3, #2]
   15124:	b29b      	uxth	r3, r3
   15126:	001a      	movs	r2, r3
   15128:	2380      	movs	r3, #128	; 0x80
   1512a:	01db      	lsls	r3, r3, #7
   1512c:	4013      	ands	r3, r2
   1512e:	d1f7      	bne.n	15120 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   15130:	4a0d      	ldr	r2, [pc, #52]	; (15168 <system_gclk_chan_disable+0x88>)
   15132:	68fb      	ldr	r3, [r7, #12]
   15134:	b2db      	uxtb	r3, r3
   15136:	1c19      	adds	r1, r3, #0
   15138:	230f      	movs	r3, #15
   1513a:	400b      	ands	r3, r1
   1513c:	b2d9      	uxtb	r1, r3
   1513e:	8853      	ldrh	r3, [r2, #2]
   15140:	1c08      	adds	r0, r1, #0
   15142:	210f      	movs	r1, #15
   15144:	4001      	ands	r1, r0
   15146:	0208      	lsls	r0, r1, #8
   15148:	4908      	ldr	r1, [pc, #32]	; (1516c <system_gclk_chan_disable+0x8c>)
   1514a:	400b      	ands	r3, r1
   1514c:	1c19      	adds	r1, r3, #0
   1514e:	1c03      	adds	r3, r0, #0
   15150:	430b      	orrs	r3, r1
   15152:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   15154:	4b07      	ldr	r3, [pc, #28]	; (15174 <system_gclk_chan_disable+0x94>)
   15156:	4798      	blx	r3
}
   15158:	46c0      	nop			; (mov r8, r8)
   1515a:	46bd      	mov	sp, r7
   1515c:	b004      	add	sp, #16
   1515e:	bd80      	pop	{r7, pc}
   15160:	00014d85 	.word	0x00014d85
   15164:	40000c02 	.word	0x40000c02
   15168:	40000c00 	.word	0x40000c00
   1516c:	fffff0ff 	.word	0xfffff0ff
   15170:	ffffbfff 	.word	0xffffbfff
   15174:	00014d99 	.word	0x00014d99

00015178 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   15178:	b580      	push	{r7, lr}
   1517a:	b084      	sub	sp, #16
   1517c:	af00      	add	r7, sp, #0
   1517e:	0002      	movs	r2, r0
   15180:	1dfb      	adds	r3, r7, #7
   15182:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   15184:	4b0d      	ldr	r3, [pc, #52]	; (151bc <system_gclk_chan_get_hz+0x44>)
   15186:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   15188:	4a0d      	ldr	r2, [pc, #52]	; (151c0 <system_gclk_chan_get_hz+0x48>)
   1518a:	1dfb      	adds	r3, r7, #7
   1518c:	781b      	ldrb	r3, [r3, #0]
   1518e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   15190:	4b0c      	ldr	r3, [pc, #48]	; (151c4 <system_gclk_chan_get_hz+0x4c>)
   15192:	885b      	ldrh	r3, [r3, #2]
   15194:	051b      	lsls	r3, r3, #20
   15196:	0f1b      	lsrs	r3, r3, #28
   15198:	b2da      	uxtb	r2, r3
   1519a:	230f      	movs	r3, #15
   1519c:	18fb      	adds	r3, r7, r3
   1519e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   151a0:	4b09      	ldr	r3, [pc, #36]	; (151c8 <system_gclk_chan_get_hz+0x50>)
   151a2:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   151a4:	230f      	movs	r3, #15
   151a6:	18fb      	adds	r3, r7, r3
   151a8:	781b      	ldrb	r3, [r3, #0]
   151aa:	0018      	movs	r0, r3
   151ac:	4b07      	ldr	r3, [pc, #28]	; (151cc <system_gclk_chan_get_hz+0x54>)
   151ae:	4798      	blx	r3
   151b0:	0003      	movs	r3, r0
}
   151b2:	0018      	movs	r0, r3
   151b4:	46bd      	mov	sp, r7
   151b6:	b004      	add	sp, #16
   151b8:	bd80      	pop	{r7, pc}
   151ba:	46c0      	nop			; (mov r8, r8)
   151bc:	00014d85 	.word	0x00014d85
   151c0:	40000c02 	.word	0x40000c02
   151c4:	40000c00 	.word	0x40000c00
   151c8:	00014d99 	.word	0x00014d99
   151cc:	00014f7d 	.word	0x00014f7d

000151d0 <system_pinmux_get_group_from_gpio_pin>:
{
   151d0:	b580      	push	{r7, lr}
   151d2:	b084      	sub	sp, #16
   151d4:	af00      	add	r7, sp, #0
   151d6:	0002      	movs	r2, r0
   151d8:	1dfb      	adds	r3, r7, #7
   151da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   151dc:	230f      	movs	r3, #15
   151de:	18fb      	adds	r3, r7, r3
   151e0:	1dfa      	adds	r2, r7, #7
   151e2:	7812      	ldrb	r2, [r2, #0]
   151e4:	09d2      	lsrs	r2, r2, #7
   151e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   151e8:	230e      	movs	r3, #14
   151ea:	18fb      	adds	r3, r7, r3
   151ec:	1dfa      	adds	r2, r7, #7
   151ee:	7812      	ldrb	r2, [r2, #0]
   151f0:	0952      	lsrs	r2, r2, #5
   151f2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   151f4:	4b0d      	ldr	r3, [pc, #52]	; (1522c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   151f6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   151f8:	230f      	movs	r3, #15
   151fa:	18fb      	adds	r3, r7, r3
   151fc:	781b      	ldrb	r3, [r3, #0]
   151fe:	2b00      	cmp	r3, #0
   15200:	d10f      	bne.n	15222 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   15202:	230f      	movs	r3, #15
   15204:	18fb      	adds	r3, r7, r3
   15206:	781b      	ldrb	r3, [r3, #0]
   15208:	009b      	lsls	r3, r3, #2
   1520a:	2210      	movs	r2, #16
   1520c:	4694      	mov	ip, r2
   1520e:	44bc      	add	ip, r7
   15210:	4463      	add	r3, ip
   15212:	3b08      	subs	r3, #8
   15214:	681a      	ldr	r2, [r3, #0]
   15216:	230e      	movs	r3, #14
   15218:	18fb      	adds	r3, r7, r3
   1521a:	781b      	ldrb	r3, [r3, #0]
   1521c:	01db      	lsls	r3, r3, #7
   1521e:	18d3      	adds	r3, r2, r3
   15220:	e000      	b.n	15224 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   15222:	2300      	movs	r3, #0
}
   15224:	0018      	movs	r0, r3
   15226:	46bd      	mov	sp, r7
   15228:	b004      	add	sp, #16
   1522a:	bd80      	pop	{r7, pc}
   1522c:	41004400 	.word	0x41004400

00015230 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   15230:	b580      	push	{r7, lr}
   15232:	b088      	sub	sp, #32
   15234:	af00      	add	r7, sp, #0
   15236:	60f8      	str	r0, [r7, #12]
   15238:	60b9      	str	r1, [r7, #8]
   1523a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   1523c:	2300      	movs	r3, #0
   1523e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   15240:	687b      	ldr	r3, [r7, #4]
   15242:	78db      	ldrb	r3, [r3, #3]
   15244:	2201      	movs	r2, #1
   15246:	4053      	eors	r3, r2
   15248:	b2db      	uxtb	r3, r3
   1524a:	2b00      	cmp	r3, #0
   1524c:	d035      	beq.n	152ba <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   1524e:	687b      	ldr	r3, [r7, #4]
   15250:	781b      	ldrb	r3, [r3, #0]
   15252:	2b80      	cmp	r3, #128	; 0x80
   15254:	d00b      	beq.n	1526e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   15256:	69fb      	ldr	r3, [r7, #28]
   15258:	2280      	movs	r2, #128	; 0x80
   1525a:	0252      	lsls	r2, r2, #9
   1525c:	4313      	orrs	r3, r2
   1525e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   15260:	687b      	ldr	r3, [r7, #4]
   15262:	781b      	ldrb	r3, [r3, #0]
   15264:	061b      	lsls	r3, r3, #24
   15266:	001a      	movs	r2, r3
   15268:	69fb      	ldr	r3, [r7, #28]
   1526a:	4313      	orrs	r3, r2
   1526c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1526e:	687b      	ldr	r3, [r7, #4]
   15270:	785b      	ldrb	r3, [r3, #1]
   15272:	2b00      	cmp	r3, #0
   15274:	d003      	beq.n	1527e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   15276:	687b      	ldr	r3, [r7, #4]
   15278:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   1527a:	2b02      	cmp	r3, #2
   1527c:	d110      	bne.n	152a0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   1527e:	69fb      	ldr	r3, [r7, #28]
   15280:	2280      	movs	r2, #128	; 0x80
   15282:	0292      	lsls	r2, r2, #10
   15284:	4313      	orrs	r3, r2
   15286:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   15288:	687b      	ldr	r3, [r7, #4]
   1528a:	789b      	ldrb	r3, [r3, #2]
   1528c:	2b00      	cmp	r3, #0
   1528e:	d004      	beq.n	1529a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   15290:	69fb      	ldr	r3, [r7, #28]
   15292:	2280      	movs	r2, #128	; 0x80
   15294:	02d2      	lsls	r2, r2, #11
   15296:	4313      	orrs	r3, r2
   15298:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   1529a:	68fb      	ldr	r3, [r7, #12]
   1529c:	68ba      	ldr	r2, [r7, #8]
   1529e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   152a0:	687b      	ldr	r3, [r7, #4]
   152a2:	785b      	ldrb	r3, [r3, #1]
   152a4:	2b01      	cmp	r3, #1
   152a6:	d003      	beq.n	152b0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   152a8:	687b      	ldr	r3, [r7, #4]
   152aa:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   152ac:	2b02      	cmp	r3, #2
   152ae:	d107      	bne.n	152c0 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   152b0:	69fb      	ldr	r3, [r7, #28]
   152b2:	4a22      	ldr	r2, [pc, #136]	; (1533c <_system_pinmux_config+0x10c>)
   152b4:	4013      	ands	r3, r2
   152b6:	61fb      	str	r3, [r7, #28]
   152b8:	e002      	b.n	152c0 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   152ba:	68fb      	ldr	r3, [r7, #12]
   152bc:	68ba      	ldr	r2, [r7, #8]
   152be:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   152c0:	68bb      	ldr	r3, [r7, #8]
   152c2:	041b      	lsls	r3, r3, #16
   152c4:	0c1b      	lsrs	r3, r3, #16
   152c6:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   152c8:	68bb      	ldr	r3, [r7, #8]
   152ca:	0c1b      	lsrs	r3, r3, #16
   152cc:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   152ce:	69ba      	ldr	r2, [r7, #24]
   152d0:	69fb      	ldr	r3, [r7, #28]
   152d2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   152d4:	22a0      	movs	r2, #160	; 0xa0
   152d6:	05d2      	lsls	r2, r2, #23
   152d8:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   152da:	68fb      	ldr	r3, [r7, #12]
   152dc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   152de:	697a      	ldr	r2, [r7, #20]
   152e0:	69fb      	ldr	r3, [r7, #28]
   152e2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   152e4:	22d0      	movs	r2, #208	; 0xd0
   152e6:	0612      	lsls	r2, r2, #24
   152e8:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   152ea:	68fb      	ldr	r3, [r7, #12]
   152ec:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   152ee:	687b      	ldr	r3, [r7, #4]
   152f0:	78db      	ldrb	r3, [r3, #3]
   152f2:	2201      	movs	r2, #1
   152f4:	4053      	eors	r3, r2
   152f6:	b2db      	uxtb	r3, r3
   152f8:	2b00      	cmp	r3, #0
   152fa:	d01a      	beq.n	15332 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   152fc:	69fa      	ldr	r2, [r7, #28]
   152fe:	2380      	movs	r3, #128	; 0x80
   15300:	02db      	lsls	r3, r3, #11
   15302:	4013      	ands	r3, r2
   15304:	d00a      	beq.n	1531c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   15306:	687b      	ldr	r3, [r7, #4]
   15308:	789b      	ldrb	r3, [r3, #2]
   1530a:	2b01      	cmp	r3, #1
   1530c:	d103      	bne.n	15316 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   1530e:	68fb      	ldr	r3, [r7, #12]
   15310:	68ba      	ldr	r2, [r7, #8]
   15312:	619a      	str	r2, [r3, #24]
   15314:	e002      	b.n	1531c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   15316:	68fb      	ldr	r3, [r7, #12]
   15318:	68ba      	ldr	r2, [r7, #8]
   1531a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1531c:	687b      	ldr	r3, [r7, #4]
   1531e:	785b      	ldrb	r3, [r3, #1]
   15320:	2b01      	cmp	r3, #1
   15322:	d003      	beq.n	1532c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   15324:	687b      	ldr	r3, [r7, #4]
   15326:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   15328:	2b02      	cmp	r3, #2
   1532a:	d102      	bne.n	15332 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   1532c:	68fb      	ldr	r3, [r7, #12]
   1532e:	68ba      	ldr	r2, [r7, #8]
   15330:	609a      	str	r2, [r3, #8]
		}
	}
}
   15332:	46c0      	nop			; (mov r8, r8)
   15334:	46bd      	mov	sp, r7
   15336:	b008      	add	sp, #32
   15338:	bd80      	pop	{r7, pc}
   1533a:	46c0      	nop			; (mov r8, r8)
   1533c:	fffbffff 	.word	0xfffbffff

00015340 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   15340:	b580      	push	{r7, lr}
   15342:	b084      	sub	sp, #16
   15344:	af00      	add	r7, sp, #0
   15346:	0002      	movs	r2, r0
   15348:	6039      	str	r1, [r7, #0]
   1534a:	1dfb      	adds	r3, r7, #7
   1534c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1534e:	1dfb      	adds	r3, r7, #7
   15350:	781b      	ldrb	r3, [r3, #0]
   15352:	0018      	movs	r0, r3
   15354:	4b0a      	ldr	r3, [pc, #40]	; (15380 <system_pinmux_pin_set_config+0x40>)
   15356:	4798      	blx	r3
   15358:	0003      	movs	r3, r0
   1535a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   1535c:	1dfb      	adds	r3, r7, #7
   1535e:	781b      	ldrb	r3, [r3, #0]
   15360:	221f      	movs	r2, #31
   15362:	4013      	ands	r3, r2
   15364:	2201      	movs	r2, #1
   15366:	409a      	lsls	r2, r3
   15368:	0013      	movs	r3, r2
   1536a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   1536c:	683a      	ldr	r2, [r7, #0]
   1536e:	68b9      	ldr	r1, [r7, #8]
   15370:	68fb      	ldr	r3, [r7, #12]
   15372:	0018      	movs	r0, r3
   15374:	4b03      	ldr	r3, [pc, #12]	; (15384 <system_pinmux_pin_set_config+0x44>)
   15376:	4798      	blx	r3
}
   15378:	46c0      	nop			; (mov r8, r8)
   1537a:	46bd      	mov	sp, r7
   1537c:	b004      	add	sp, #16
   1537e:	bd80      	pop	{r7, pc}
   15380:	000151d1 	.word	0x000151d1
   15384:	00015231 	.word	0x00015231

00015388 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   15388:	b580      	push	{r7, lr}
   1538a:	af00      	add	r7, sp, #0
	return;
   1538c:	46c0      	nop			; (mov r8, r8)
}
   1538e:	46bd      	mov	sp, r7
   15390:	bd80      	pop	{r7, pc}
	...

00015394 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   15394:	b580      	push	{r7, lr}
   15396:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   15398:	4b06      	ldr	r3, [pc, #24]	; (153b4 <system_init+0x20>)
   1539a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1539c:	4b06      	ldr	r3, [pc, #24]	; (153b8 <system_init+0x24>)
   1539e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   153a0:	4b06      	ldr	r3, [pc, #24]	; (153bc <system_init+0x28>)
   153a2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   153a4:	4b06      	ldr	r3, [pc, #24]	; (153c0 <system_init+0x2c>)
   153a6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   153a8:	4b06      	ldr	r3, [pc, #24]	; (153c4 <system_init+0x30>)
   153aa:	4798      	blx	r3
}
   153ac:	46c0      	nop			; (mov r8, r8)
   153ae:	46bd      	mov	sp, r7
   153b0:	bd80      	pop	{r7, pc}
   153b2:	46c0      	nop			; (mov r8, r8)
   153b4:	00014aad 	.word	0x00014aad
   153b8:	00010dc5 	.word	0x00010dc5
   153bc:	00015389 	.word	0x00015389
   153c0:	0000df5d 	.word	0x0000df5d
   153c4:	00015389 	.word	0x00015389

000153c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   153c8:	b580      	push	{r7, lr}
   153ca:	b086      	sub	sp, #24
   153cc:	af00      	add	r7, sp, #0
   153ce:	60f8      	str	r0, [r7, #12]
   153d0:	60b9      	str	r1, [r7, #8]
   153d2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   153d4:	2300      	movs	r3, #0
   153d6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   153d8:	68fb      	ldr	r3, [r7, #12]
   153da:	2b00      	cmp	r3, #0
   153dc:	d012      	beq.n	15404 <_read+0x3c>
		return -1;
   153de:	2301      	movs	r3, #1
   153e0:	425b      	negs	r3, r3
   153e2:	e013      	b.n	1540c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   153e4:	4b0b      	ldr	r3, [pc, #44]	; (15414 <_read+0x4c>)
   153e6:	681a      	ldr	r2, [r3, #0]
   153e8:	4b0b      	ldr	r3, [pc, #44]	; (15418 <_read+0x50>)
   153ea:	681b      	ldr	r3, [r3, #0]
   153ec:	68b9      	ldr	r1, [r7, #8]
   153ee:	0018      	movs	r0, r3
   153f0:	4790      	blx	r2
		ptr++;
   153f2:	68bb      	ldr	r3, [r7, #8]
   153f4:	3301      	adds	r3, #1
   153f6:	60bb      	str	r3, [r7, #8]
		nChars++;
   153f8:	697b      	ldr	r3, [r7, #20]
   153fa:	3301      	adds	r3, #1
   153fc:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   153fe:	687b      	ldr	r3, [r7, #4]
   15400:	3b01      	subs	r3, #1
   15402:	607b      	str	r3, [r7, #4]
   15404:	687b      	ldr	r3, [r7, #4]
   15406:	2b00      	cmp	r3, #0
   15408:	dcec      	bgt.n	153e4 <_read+0x1c>
	}
	return nChars;
   1540a:	697b      	ldr	r3, [r7, #20]
}
   1540c:	0018      	movs	r0, r3
   1540e:	46bd      	mov	sp, r7
   15410:	b006      	add	sp, #24
   15412:	bd80      	pop	{r7, pc}
   15414:	20000438 	.word	0x20000438
   15418:	20000440 	.word	0x20000440

0001541c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   1541c:	b580      	push	{r7, lr}
   1541e:	b086      	sub	sp, #24
   15420:	af00      	add	r7, sp, #0
   15422:	60f8      	str	r0, [r7, #12]
   15424:	60b9      	str	r1, [r7, #8]
   15426:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   15428:	2300      	movs	r3, #0
   1542a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   1542c:	68fb      	ldr	r3, [r7, #12]
   1542e:	2b01      	cmp	r3, #1
   15430:	d01d      	beq.n	1546e <_write+0x52>
   15432:	68fb      	ldr	r3, [r7, #12]
   15434:	2b02      	cmp	r3, #2
   15436:	d01a      	beq.n	1546e <_write+0x52>
   15438:	68fb      	ldr	r3, [r7, #12]
   1543a:	2b03      	cmp	r3, #3
   1543c:	d017      	beq.n	1546e <_write+0x52>
		return -1;
   1543e:	2301      	movs	r3, #1
   15440:	425b      	negs	r3, r3
   15442:	e018      	b.n	15476 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   15444:	4b0e      	ldr	r3, [pc, #56]	; (15480 <_write+0x64>)
   15446:	681a      	ldr	r2, [r3, #0]
   15448:	4b0e      	ldr	r3, [pc, #56]	; (15484 <_write+0x68>)
   1544a:	6818      	ldr	r0, [r3, #0]
   1544c:	68bb      	ldr	r3, [r7, #8]
   1544e:	1c59      	adds	r1, r3, #1
   15450:	60b9      	str	r1, [r7, #8]
   15452:	781b      	ldrb	r3, [r3, #0]
   15454:	0019      	movs	r1, r3
   15456:	4790      	blx	r2
   15458:	1e03      	subs	r3, r0, #0
   1545a:	da02      	bge.n	15462 <_write+0x46>
			return -1;
   1545c:	2301      	movs	r3, #1
   1545e:	425b      	negs	r3, r3
   15460:	e009      	b.n	15476 <_write+0x5a>
		}
		++nChars;
   15462:	697b      	ldr	r3, [r7, #20]
   15464:	3301      	adds	r3, #1
   15466:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   15468:	687b      	ldr	r3, [r7, #4]
   1546a:	3b01      	subs	r3, #1
   1546c:	607b      	str	r3, [r7, #4]
   1546e:	687b      	ldr	r3, [r7, #4]
   15470:	2b00      	cmp	r3, #0
   15472:	d1e7      	bne.n	15444 <_write+0x28>
	}
	return nChars;
   15474:	697b      	ldr	r3, [r7, #20]
}
   15476:	0018      	movs	r0, r3
   15478:	46bd      	mov	sp, r7
   1547a:	b006      	add	sp, #24
   1547c:	bd80      	pop	{r7, pc}
   1547e:	46c0      	nop			; (mov r8, r8)
   15480:	2000043c 	.word	0x2000043c
   15484:	20000440 	.word	0x20000440

00015488 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   15488:	b580      	push	{r7, lr}
   1548a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
   1548c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   15490:	4b02      	ldr	r3, [pc, #8]	; (1549c <NVIC_SystemReset+0x14>)
   15492:	4a03      	ldr	r2, [pc, #12]	; (154a0 <NVIC_SystemReset+0x18>)
   15494:	60da      	str	r2, [r3, #12]
   15496:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   1549a:	e7fe      	b.n	1549a <NVIC_SystemReset+0x12>
   1549c:	e000ed00 	.word	0xe000ed00
   154a0:	05fa0004 	.word	0x05fa0004

000154a4 <crc32_calculate>:
 * \note To calculate the CRC of multiple blocks, use this function first, then
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
   154a4:	b580      	push	{r7, lr}
   154a6:	b084      	sub	sp, #16
   154a8:	af00      	add	r7, sp, #0
   154aa:	60f8      	str	r0, [r7, #12]
   154ac:	60b9      	str	r1, [r7, #8]
   154ae:	607a      	str	r2, [r7, #4]
	*crc = 0;
   154b0:	687b      	ldr	r3, [r7, #4]
   154b2:	2200      	movs	r2, #0
   154b4:	601a      	str	r2, [r3, #0]

	return crc32_recalculate(data, length, crc);
   154b6:	687a      	ldr	r2, [r7, #4]
   154b8:	68b9      	ldr	r1, [r7, #8]
   154ba:	68fb      	ldr	r3, [r7, #12]
   154bc:	0018      	movs	r0, r3
   154be:	4b03      	ldr	r3, [pc, #12]	; (154cc <crc32_calculate+0x28>)
   154c0:	4798      	blx	r3
   154c2:	0003      	movs	r3, r0
}
   154c4:	0018      	movs	r0, r3
   154c6:	46bd      	mov	sp, r7
   154c8:	b004      	add	sp, #16
   154ca:	bd80      	pop	{r7, pc}
   154cc:	0000dad9 	.word	0x0000dad9

000154d0 <system_pinmux_get_group_from_gpio_pin>:
{
   154d0:	b580      	push	{r7, lr}
   154d2:	b084      	sub	sp, #16
   154d4:	af00      	add	r7, sp, #0
   154d6:	0002      	movs	r2, r0
   154d8:	1dfb      	adds	r3, r7, #7
   154da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   154dc:	230f      	movs	r3, #15
   154de:	18fb      	adds	r3, r7, r3
   154e0:	1dfa      	adds	r2, r7, #7
   154e2:	7812      	ldrb	r2, [r2, #0]
   154e4:	09d2      	lsrs	r2, r2, #7
   154e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   154e8:	230e      	movs	r3, #14
   154ea:	18fb      	adds	r3, r7, r3
   154ec:	1dfa      	adds	r2, r7, #7
   154ee:	7812      	ldrb	r2, [r2, #0]
   154f0:	0952      	lsrs	r2, r2, #5
   154f2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   154f4:	4b0d      	ldr	r3, [pc, #52]	; (1552c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   154f6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   154f8:	230f      	movs	r3, #15
   154fa:	18fb      	adds	r3, r7, r3
   154fc:	781b      	ldrb	r3, [r3, #0]
   154fe:	2b00      	cmp	r3, #0
   15500:	d10f      	bne.n	15522 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   15502:	230f      	movs	r3, #15
   15504:	18fb      	adds	r3, r7, r3
   15506:	781b      	ldrb	r3, [r3, #0]
   15508:	009b      	lsls	r3, r3, #2
   1550a:	2210      	movs	r2, #16
   1550c:	4694      	mov	ip, r2
   1550e:	44bc      	add	ip, r7
   15510:	4463      	add	r3, ip
   15512:	3b08      	subs	r3, #8
   15514:	681a      	ldr	r2, [r3, #0]
   15516:	230e      	movs	r3, #14
   15518:	18fb      	adds	r3, r7, r3
   1551a:	781b      	ldrb	r3, [r3, #0]
   1551c:	01db      	lsls	r3, r3, #7
   1551e:	18d3      	adds	r3, r2, r3
   15520:	e000      	b.n	15524 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   15522:	2300      	movs	r3, #0
}
   15524:	0018      	movs	r0, r3
   15526:	46bd      	mov	sp, r7
   15528:	b004      	add	sp, #16
   1552a:	bd80      	pop	{r7, pc}
   1552c:	41004400 	.word	0x41004400

00015530 <port_get_group_from_gpio_pin>:
{
   15530:	b580      	push	{r7, lr}
   15532:	b082      	sub	sp, #8
   15534:	af00      	add	r7, sp, #0
   15536:	0002      	movs	r2, r0
   15538:	1dfb      	adds	r3, r7, #7
   1553a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1553c:	1dfb      	adds	r3, r7, #7
   1553e:	781b      	ldrb	r3, [r3, #0]
   15540:	0018      	movs	r0, r3
   15542:	4b03      	ldr	r3, [pc, #12]	; (15550 <port_get_group_from_gpio_pin+0x20>)
   15544:	4798      	blx	r3
   15546:	0003      	movs	r3, r0
}
   15548:	0018      	movs	r0, r3
   1554a:	46bd      	mov	sp, r7
   1554c:	b002      	add	sp, #8
   1554e:	bd80      	pop	{r7, pc}
   15550:	000154d1 	.word	0x000154d1

00015554 <port_get_config_defaults>:
{
   15554:	b580      	push	{r7, lr}
   15556:	b082      	sub	sp, #8
   15558:	af00      	add	r7, sp, #0
   1555a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1555c:	687b      	ldr	r3, [r7, #4]
   1555e:	2200      	movs	r2, #0
   15560:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   15562:	687b      	ldr	r3, [r7, #4]
   15564:	2201      	movs	r2, #1
   15566:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   15568:	687b      	ldr	r3, [r7, #4]
   1556a:	2200      	movs	r2, #0
   1556c:	709a      	strb	r2, [r3, #2]
}
   1556e:	46c0      	nop			; (mov r8, r8)
   15570:	46bd      	mov	sp, r7
   15572:	b002      	add	sp, #8
   15574:	bd80      	pop	{r7, pc}
	...

00015578 <port_pin_get_input_level>:
{
   15578:	b580      	push	{r7, lr}
   1557a:	b084      	sub	sp, #16
   1557c:	af00      	add	r7, sp, #0
   1557e:	0002      	movs	r2, r0
   15580:	1dfb      	adds	r3, r7, #7
   15582:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   15584:	1dfb      	adds	r3, r7, #7
   15586:	781b      	ldrb	r3, [r3, #0]
   15588:	0018      	movs	r0, r3
   1558a:	4b0b      	ldr	r3, [pc, #44]	; (155b8 <port_pin_get_input_level+0x40>)
   1558c:	4798      	blx	r3
   1558e:	0003      	movs	r3, r0
   15590:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15592:	1dfb      	adds	r3, r7, #7
   15594:	781b      	ldrb	r3, [r3, #0]
   15596:	221f      	movs	r2, #31
   15598:	4013      	ands	r3, r2
   1559a:	2201      	movs	r2, #1
   1559c:	409a      	lsls	r2, r3
   1559e:	0013      	movs	r3, r2
   155a0:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   155a2:	68fb      	ldr	r3, [r7, #12]
   155a4:	6a1b      	ldr	r3, [r3, #32]
   155a6:	68ba      	ldr	r2, [r7, #8]
   155a8:	4013      	ands	r3, r2
   155aa:	1e5a      	subs	r2, r3, #1
   155ac:	4193      	sbcs	r3, r2
   155ae:	b2db      	uxtb	r3, r3
}
   155b0:	0018      	movs	r0, r3
   155b2:	46bd      	mov	sp, r7
   155b4:	b004      	add	sp, #16
   155b6:	bd80      	pop	{r7, pc}
   155b8:	00015531 	.word	0x00015531

000155bc <port_pin_set_output_level>:
{
   155bc:	b580      	push	{r7, lr}
   155be:	b084      	sub	sp, #16
   155c0:	af00      	add	r7, sp, #0
   155c2:	0002      	movs	r2, r0
   155c4:	1dfb      	adds	r3, r7, #7
   155c6:	701a      	strb	r2, [r3, #0]
   155c8:	1dbb      	adds	r3, r7, #6
   155ca:	1c0a      	adds	r2, r1, #0
   155cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   155ce:	1dfb      	adds	r3, r7, #7
   155d0:	781b      	ldrb	r3, [r3, #0]
   155d2:	0018      	movs	r0, r3
   155d4:	4b0d      	ldr	r3, [pc, #52]	; (1560c <port_pin_set_output_level+0x50>)
   155d6:	4798      	blx	r3
   155d8:	0003      	movs	r3, r0
   155da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   155dc:	1dfb      	adds	r3, r7, #7
   155de:	781b      	ldrb	r3, [r3, #0]
   155e0:	221f      	movs	r2, #31
   155e2:	4013      	ands	r3, r2
   155e4:	2201      	movs	r2, #1
   155e6:	409a      	lsls	r2, r3
   155e8:	0013      	movs	r3, r2
   155ea:	60bb      	str	r3, [r7, #8]
	if (level) {
   155ec:	1dbb      	adds	r3, r7, #6
   155ee:	781b      	ldrb	r3, [r3, #0]
   155f0:	2b00      	cmp	r3, #0
   155f2:	d003      	beq.n	155fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   155f4:	68fb      	ldr	r3, [r7, #12]
   155f6:	68ba      	ldr	r2, [r7, #8]
   155f8:	619a      	str	r2, [r3, #24]
}
   155fa:	e002      	b.n	15602 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   155fc:	68fb      	ldr	r3, [r7, #12]
   155fe:	68ba      	ldr	r2, [r7, #8]
   15600:	615a      	str	r2, [r3, #20]
}
   15602:	46c0      	nop			; (mov r8, r8)
   15604:	46bd      	mov	sp, r7
   15606:	b004      	add	sp, #16
   15608:	bd80      	pop	{r7, pc}
   1560a:	46c0      	nop			; (mov r8, r8)
   1560c:	00015531 	.word	0x00015531

00015610 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   15610:	b580      	push	{r7, lr}
   15612:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   15614:	4b02      	ldr	r3, [pc, #8]	; (15620 <system_reset+0x10>)
   15616:	4798      	blx	r3
}
   15618:	46c0      	nop			; (mov r8, r8)
   1561a:	46bd      	mov	sp, r7
   1561c:	bd80      	pop	{r7, pc}
   1561e:	46c0      	nop			; (mov r8, r8)
   15620:	00015489 	.word	0x00015489

00015624 <system_interrupt_enable>:
{
   15624:	b580      	push	{r7, lr}
   15626:	b082      	sub	sp, #8
   15628:	af00      	add	r7, sp, #0
   1562a:	0002      	movs	r2, r0
   1562c:	1dfb      	adds	r3, r7, #7
   1562e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15630:	4b06      	ldr	r3, [pc, #24]	; (1564c <system_interrupt_enable+0x28>)
   15632:	1dfa      	adds	r2, r7, #7
   15634:	7812      	ldrb	r2, [r2, #0]
   15636:	0011      	movs	r1, r2
   15638:	221f      	movs	r2, #31
   1563a:	400a      	ands	r2, r1
   1563c:	2101      	movs	r1, #1
   1563e:	4091      	lsls	r1, r2
   15640:	000a      	movs	r2, r1
   15642:	601a      	str	r2, [r3, #0]
}
   15644:	46c0      	nop			; (mov r8, r8)
   15646:	46bd      	mov	sp, r7
   15648:	b002      	add	sp, #8
   1564a:	bd80      	pop	{r7, pc}
   1564c:	e000e100 	.word	0xe000e100

00015650 <spi_is_syncing>:
{
   15650:	b580      	push	{r7, lr}
   15652:	b084      	sub	sp, #16
   15654:	af00      	add	r7, sp, #0
   15656:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   15658:	687b      	ldr	r3, [r7, #4]
   1565a:	681b      	ldr	r3, [r3, #0]
   1565c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1565e:	68fb      	ldr	r3, [r7, #12]
   15660:	69db      	ldr	r3, [r3, #28]
   15662:	1e5a      	subs	r2, r3, #1
   15664:	4193      	sbcs	r3, r2
   15666:	b2db      	uxtb	r3, r3
}
   15668:	0018      	movs	r0, r3
   1566a:	46bd      	mov	sp, r7
   1566c:	b004      	add	sp, #16
   1566e:	bd80      	pop	{r7, pc}

00015670 <spi_get_config_defaults>:
{
   15670:	b580      	push	{r7, lr}
   15672:	b082      	sub	sp, #8
   15674:	af00      	add	r7, sp, #0
   15676:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   15678:	687b      	ldr	r3, [r7, #4]
   1567a:	2201      	movs	r2, #1
   1567c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1567e:	687b      	ldr	r3, [r7, #4]
   15680:	2200      	movs	r2, #0
   15682:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   15684:	687b      	ldr	r3, [r7, #4]
   15686:	2200      	movs	r2, #0
   15688:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1568a:	687b      	ldr	r3, [r7, #4]
   1568c:	22c0      	movs	r2, #192	; 0xc0
   1568e:	0392      	lsls	r2, r2, #14
   15690:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   15692:	687b      	ldr	r3, [r7, #4]
   15694:	2200      	movs	r2, #0
   15696:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   15698:	687b      	ldr	r3, [r7, #4]
   1569a:	2200      	movs	r2, #0
   1569c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1569e:	687b      	ldr	r3, [r7, #4]
   156a0:	2201      	movs	r2, #1
   156a2:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   156a4:	687b      	ldr	r3, [r7, #4]
   156a6:	2201      	movs	r2, #1
   156a8:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   156aa:	687b      	ldr	r3, [r7, #4]
   156ac:	2200      	movs	r2, #0
   156ae:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   156b0:	687b      	ldr	r3, [r7, #4]
   156b2:	2224      	movs	r2, #36	; 0x24
   156b4:	2100      	movs	r1, #0
   156b6:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   156b8:	687b      	ldr	r3, [r7, #4]
   156ba:	3318      	adds	r3, #24
   156bc:	220c      	movs	r2, #12
   156be:	2100      	movs	r1, #0
   156c0:	0018      	movs	r0, r3
   156c2:	4b0a      	ldr	r3, [pc, #40]	; (156ec <spi_get_config_defaults+0x7c>)
   156c4:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   156c6:	687b      	ldr	r3, [r7, #4]
   156c8:	4a09      	ldr	r2, [pc, #36]	; (156f0 <spi_get_config_defaults+0x80>)
   156ca:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   156cc:	687b      	ldr	r3, [r7, #4]
   156ce:	2200      	movs	r2, #0
   156d0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   156d2:	687b      	ldr	r3, [r7, #4]
   156d4:	2200      	movs	r2, #0
   156d6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   156d8:	687b      	ldr	r3, [r7, #4]
   156da:	2200      	movs	r2, #0
   156dc:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   156de:	687b      	ldr	r3, [r7, #4]
   156e0:	2200      	movs	r2, #0
   156e2:	635a      	str	r2, [r3, #52]	; 0x34
};
   156e4:	46c0      	nop			; (mov r8, r8)
   156e6:	46bd      	mov	sp, r7
   156e8:	b002      	add	sp, #8
   156ea:	bd80      	pop	{r7, pc}
   156ec:	00016c07 	.word	0x00016c07
   156f0:	000186a0 	.word	0x000186a0

000156f4 <spi_enable>:
{
   156f4:	b580      	push	{r7, lr}
   156f6:	b084      	sub	sp, #16
   156f8:	af00      	add	r7, sp, #0
   156fa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   156fc:	687b      	ldr	r3, [r7, #4]
   156fe:	681b      	ldr	r3, [r3, #0]
   15700:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   15702:	687b      	ldr	r3, [r7, #4]
   15704:	681b      	ldr	r3, [r3, #0]
   15706:	0018      	movs	r0, r3
   15708:	4b0b      	ldr	r3, [pc, #44]	; (15738 <spi_enable+0x44>)
   1570a:	4798      	blx	r3
   1570c:	0003      	movs	r3, r0
   1570e:	0018      	movs	r0, r3
   15710:	4b0a      	ldr	r3, [pc, #40]	; (1573c <spi_enable+0x48>)
   15712:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   15714:	46c0      	nop			; (mov r8, r8)
   15716:	687b      	ldr	r3, [r7, #4]
   15718:	0018      	movs	r0, r3
   1571a:	4b09      	ldr	r3, [pc, #36]	; (15740 <spi_enable+0x4c>)
   1571c:	4798      	blx	r3
   1571e:	1e03      	subs	r3, r0, #0
   15720:	d1f9      	bne.n	15716 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   15722:	68fb      	ldr	r3, [r7, #12]
   15724:	681b      	ldr	r3, [r3, #0]
   15726:	2202      	movs	r2, #2
   15728:	431a      	orrs	r2, r3
   1572a:	68fb      	ldr	r3, [r7, #12]
   1572c:	601a      	str	r2, [r3, #0]
}
   1572e:	46c0      	nop			; (mov r8, r8)
   15730:	46bd      	mov	sp, r7
   15732:	b004      	add	sp, #16
   15734:	bd80      	pop	{r7, pc}
   15736:	46c0      	nop			; (mov r8, r8)
   15738:	000126f9 	.word	0x000126f9
   1573c:	00015625 	.word	0x00015625
   15740:	00015651 	.word	0x00015651

00015744 <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
   15744:	b580      	push	{r7, lr}
   15746:	b086      	sub	sp, #24
   15748:	af00      	add	r7, sp, #0
   1574a:	60f8      	str	r0, [r7, #12]
   1574c:	60b9      	str	r1, [r7, #8]
   1574e:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
   15750:	687b      	ldr	r3, [r7, #4]
   15752:	781a      	ldrb	r2, [r3, #0]
   15754:	68fb      	ldr	r3, [r7, #12]
   15756:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
   15758:	687b      	ldr	r3, [r7, #4]
   1575a:	785a      	ldrb	r2, [r3, #1]
   1575c:	68fb      	ldr	r3, [r7, #12]
   1575e:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
   15760:	68fb      	ldr	r3, [r7, #12]
   15762:	68ba      	ldr	r2, [r7, #8]
   15764:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
   15766:	2314      	movs	r3, #20
   15768:	18fb      	adds	r3, r7, r3
   1576a:	0018      	movs	r0, r3
   1576c:	4b0c      	ldr	r3, [pc, #48]	; (157a0 <at25dfx_chip_init+0x5c>)
   1576e:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
   15770:	2314      	movs	r3, #20
   15772:	18fb      	adds	r3, r7, r3
   15774:	2201      	movs	r2, #1
   15776:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
   15778:	68fb      	ldr	r3, [r7, #12]
   1577a:	795b      	ldrb	r3, [r3, #5]
   1577c:	2214      	movs	r2, #20
   1577e:	18ba      	adds	r2, r7, r2
   15780:	0011      	movs	r1, r2
   15782:	0018      	movs	r0, r3
   15784:	4b07      	ldr	r3, [pc, #28]	; (157a4 <at25dfx_chip_init+0x60>)
   15786:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
   15788:	68fb      	ldr	r3, [r7, #12]
   1578a:	795b      	ldrb	r3, [r3, #5]
   1578c:	2101      	movs	r1, #1
   1578e:	0018      	movs	r0, r3
   15790:	4b05      	ldr	r3, [pc, #20]	; (157a8 <at25dfx_chip_init+0x64>)
   15792:	4798      	blx	r3

	return STATUS_OK;
   15794:	2300      	movs	r3, #0
}
   15796:	0018      	movs	r0, r3
   15798:	46bd      	mov	sp, r7
   1579a:	b006      	add	sp, #24
   1579c:	bd80      	pop	{r7, pc}
   1579e:	46c0      	nop			; (mov r8, r8)
   157a0:	00015555 	.word	0x00015555
   157a4:	0001204d 	.word	0x0001204d
   157a8:	000155bd 	.word	0x000155bd

000157ac <nvm_get_config_defaults>:
{
   157ac:	b580      	push	{r7, lr}
   157ae:	b082      	sub	sp, #8
   157b0:	af00      	add	r7, sp, #0
   157b2:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   157b4:	687b      	ldr	r3, [r7, #4]
   157b6:	2200      	movs	r2, #0
   157b8:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   157ba:	687b      	ldr	r3, [r7, #4]
   157bc:	2201      	movs	r2, #1
   157be:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   157c0:	4b08      	ldr	r3, [pc, #32]	; (157e4 <nvm_get_config_defaults+0x38>)
   157c2:	685b      	ldr	r3, [r3, #4]
   157c4:	06db      	lsls	r3, r3, #27
   157c6:	0f1b      	lsrs	r3, r3, #28
   157c8:	b2db      	uxtb	r3, r3
   157ca:	001a      	movs	r2, r3
   157cc:	687b      	ldr	r3, [r7, #4]
   157ce:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   157d0:	687b      	ldr	r3, [r7, #4]
   157d2:	2200      	movs	r2, #0
   157d4:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   157d6:	687b      	ldr	r3, [r7, #4]
   157d8:	2200      	movs	r2, #0
   157da:	711a      	strb	r2, [r3, #4]
}
   157dc:	46c0      	nop			; (mov r8, r8)
   157de:	46bd      	mov	sp, r7
   157e0:	b002      	add	sp, #8
   157e2:	bd80      	pop	{r7, pc}
   157e4:	41004000 	.word	0x41004000

000157e8 <usart_is_syncing>:
{
   157e8:	b580      	push	{r7, lr}
   157ea:	b084      	sub	sp, #16
   157ec:	af00      	add	r7, sp, #0
   157ee:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   157f0:	687b      	ldr	r3, [r7, #4]
   157f2:	681b      	ldr	r3, [r3, #0]
   157f4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   157f6:	68fb      	ldr	r3, [r7, #12]
   157f8:	69db      	ldr	r3, [r3, #28]
   157fa:	1e5a      	subs	r2, r3, #1
   157fc:	4193      	sbcs	r3, r2
   157fe:	b2db      	uxtb	r3, r3
}
   15800:	0018      	movs	r0, r3
   15802:	46bd      	mov	sp, r7
   15804:	b004      	add	sp, #16
   15806:	bd80      	pop	{r7, pc}

00015808 <_usart_wait_for_sync>:
{
   15808:	b580      	push	{r7, lr}
   1580a:	b082      	sub	sp, #8
   1580c:	af00      	add	r7, sp, #0
   1580e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   15810:	46c0      	nop			; (mov r8, r8)
   15812:	687b      	ldr	r3, [r7, #4]
   15814:	0018      	movs	r0, r3
   15816:	4b04      	ldr	r3, [pc, #16]	; (15828 <_usart_wait_for_sync+0x20>)
   15818:	4798      	blx	r3
   1581a:	1e03      	subs	r3, r0, #0
   1581c:	d1f9      	bne.n	15812 <_usart_wait_for_sync+0xa>
}
   1581e:	46c0      	nop			; (mov r8, r8)
   15820:	46bd      	mov	sp, r7
   15822:	b002      	add	sp, #8
   15824:	bd80      	pop	{r7, pc}
   15826:	46c0      	nop			; (mov r8, r8)
   15828:	000157e9 	.word	0x000157e9

0001582c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1582c:	b580      	push	{r7, lr}
   1582e:	b082      	sub	sp, #8
   15830:	af00      	add	r7, sp, #0
   15832:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   15834:	687b      	ldr	r3, [r7, #4]
   15836:	2280      	movs	r2, #128	; 0x80
   15838:	05d2      	lsls	r2, r2, #23
   1583a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1583c:	687b      	ldr	r3, [r7, #4]
   1583e:	2200      	movs	r2, #0
   15840:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   15842:	687b      	ldr	r3, [r7, #4]
   15844:	22ff      	movs	r2, #255	; 0xff
   15846:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   15848:	687b      	ldr	r3, [r7, #4]
   1584a:	2200      	movs	r2, #0
   1584c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1584e:	687b      	ldr	r3, [r7, #4]
   15850:	2200      	movs	r2, #0
   15852:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   15854:	687b      	ldr	r3, [r7, #4]
   15856:	2296      	movs	r2, #150	; 0x96
   15858:	0192      	lsls	r2, r2, #6
   1585a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1585c:	687b      	ldr	r3, [r7, #4]
   1585e:	2224      	movs	r2, #36	; 0x24
   15860:	2101      	movs	r1, #1
   15862:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   15864:	687b      	ldr	r3, [r7, #4]
   15866:	2225      	movs	r2, #37	; 0x25
   15868:	2101      	movs	r1, #1
   1586a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1586c:	687b      	ldr	r3, [r7, #4]
   1586e:	2226      	movs	r2, #38	; 0x26
   15870:	2100      	movs	r1, #0
   15872:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   15874:	687b      	ldr	r3, [r7, #4]
   15876:	2227      	movs	r2, #39	; 0x27
   15878:	2100      	movs	r1, #0
   1587a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1587c:	687b      	ldr	r3, [r7, #4]
   1587e:	2200      	movs	r2, #0
   15880:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   15882:	687b      	ldr	r3, [r7, #4]
   15884:	2288      	movs	r2, #136	; 0x88
   15886:	0352      	lsls	r2, r2, #13
   15888:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1588a:	687b      	ldr	r3, [r7, #4]
   1588c:	222c      	movs	r2, #44	; 0x2c
   1588e:	2100      	movs	r1, #0
   15890:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   15892:	687b      	ldr	r3, [r7, #4]
   15894:	222d      	movs	r2, #45	; 0x2d
   15896:	2100      	movs	r1, #0
   15898:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1589a:	687b      	ldr	r3, [r7, #4]
   1589c:	2200      	movs	r2, #0
   1589e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   158a0:	687b      	ldr	r3, [r7, #4]
   158a2:	2200      	movs	r2, #0
   158a4:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   158a6:	687b      	ldr	r3, [r7, #4]
   158a8:	2200      	movs	r2, #0
   158aa:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   158ac:	687b      	ldr	r3, [r7, #4]
   158ae:	2200      	movs	r2, #0
   158b0:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   158b2:	687b      	ldr	r3, [r7, #4]
   158b4:	2200      	movs	r2, #0
   158b6:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   158b8:	687b      	ldr	r3, [r7, #4]
   158ba:	2200      	movs	r2, #0
   158bc:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   158be:	687b      	ldr	r3, [r7, #4]
   158c0:	2200      	movs	r2, #0
   158c2:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   158c4:	687b      	ldr	r3, [r7, #4]
   158c6:	2200      	movs	r2, #0
   158c8:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   158ca:	687b      	ldr	r3, [r7, #4]
   158cc:	2200      	movs	r2, #0
   158ce:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   158d0:	687b      	ldr	r3, [r7, #4]
   158d2:	2200      	movs	r2, #0
   158d4:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   158d6:	687b      	ldr	r3, [r7, #4]
   158d8:	2213      	movs	r2, #19
   158da:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   158dc:	687b      	ldr	r3, [r7, #4]
   158de:	2200      	movs	r2, #0
   158e0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   158e2:	46c0      	nop			; (mov r8, r8)
   158e4:	46bd      	mov	sp, r7
   158e6:	b002      	add	sp, #8
   158e8:	bd80      	pop	{r7, pc}
	...

000158ec <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   158ec:	b580      	push	{r7, lr}
   158ee:	b084      	sub	sp, #16
   158f0:	af00      	add	r7, sp, #0
   158f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   158f4:	687b      	ldr	r3, [r7, #4]
   158f6:	681b      	ldr	r3, [r3, #0]
   158f8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   158fa:	687b      	ldr	r3, [r7, #4]
   158fc:	681b      	ldr	r3, [r3, #0]
   158fe:	0018      	movs	r0, r3
   15900:	4b09      	ldr	r3, [pc, #36]	; (15928 <usart_enable+0x3c>)
   15902:	4798      	blx	r3
   15904:	0003      	movs	r3, r0
   15906:	0018      	movs	r0, r3
   15908:	4b08      	ldr	r3, [pc, #32]	; (1592c <usart_enable+0x40>)
   1590a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1590c:	687b      	ldr	r3, [r7, #4]
   1590e:	0018      	movs	r0, r3
   15910:	4b07      	ldr	r3, [pc, #28]	; (15930 <usart_enable+0x44>)
   15912:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   15914:	68fb      	ldr	r3, [r7, #12]
   15916:	681b      	ldr	r3, [r3, #0]
   15918:	2202      	movs	r2, #2
   1591a:	431a      	orrs	r2, r3
   1591c:	68fb      	ldr	r3, [r7, #12]
   1591e:	601a      	str	r2, [r3, #0]
}
   15920:	46c0      	nop			; (mov r8, r8)
   15922:	46bd      	mov	sp, r7
   15924:	b004      	add	sp, #16
   15926:	bd80      	pop	{r7, pc}
   15928:	000126f9 	.word	0x000126f9
   1592c:	00015625 	.word	0x00015625
   15930:	00015809 	.word	0x00015809

00015934 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   15934:	b580      	push	{r7, lr}
   15936:	b084      	sub	sp, #16
   15938:	af00      	add	r7, sp, #0
   1593a:	60f8      	str	r0, [r7, #12]
   1593c:	60b9      	str	r1, [r7, #8]
   1593e:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
   15940:	687a      	ldr	r2, [r7, #4]
   15942:	68b9      	ldr	r1, [r7, #8]
   15944:	68fb      	ldr	r3, [r7, #12]
   15946:	0018      	movs	r0, r3
   15948:	4b05      	ldr	r3, [pc, #20]	; (15960 <usart_serial_init+0x2c>)
   1594a:	4798      	blx	r3
   1594c:	1e03      	subs	r3, r0, #0
   1594e:	d101      	bne.n	15954 <usart_serial_init+0x20>
		return true;
   15950:	2301      	movs	r3, #1
   15952:	e000      	b.n	15956 <usart_serial_init+0x22>
	}
	else {
		return false;
   15954:	2300      	movs	r3, #0
	}
}
   15956:	0018      	movs	r0, r3
   15958:	46bd      	mov	sp, r7
   1595a:	b004      	add	sp, #16
   1595c:	bd80      	pop	{r7, pc}
   1595e:	46c0      	nop			; (mov r8, r8)
   15960:	00013cd1 	.word	0x00013cd1

00015964 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
   15964:	b580      	push	{r7, lr}
   15966:	b082      	sub	sp, #8
   15968:	af00      	add	r7, sp, #0
   1596a:	6078      	str	r0, [r7, #4]
   1596c:	000a      	movs	r2, r1
   1596e:	1cfb      	adds	r3, r7, #3
   15970:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
   15972:	46c0      	nop			; (mov r8, r8)
   15974:	1cfb      	adds	r3, r7, #3
   15976:	781b      	ldrb	r3, [r3, #0]
   15978:	b29a      	uxth	r2, r3
   1597a:	687b      	ldr	r3, [r7, #4]
   1597c:	0011      	movs	r1, r2
   1597e:	0018      	movs	r0, r3
   15980:	4b04      	ldr	r3, [pc, #16]	; (15994 <usart_serial_putchar+0x30>)
   15982:	4798      	blx	r3
   15984:	1e03      	subs	r3, r0, #0
   15986:	d1f5      	bne.n	15974 <usart_serial_putchar+0x10>

	return STATUS_OK;
   15988:	2300      	movs	r3, #0
}
   1598a:	0018      	movs	r0, r3
   1598c:	46bd      	mov	sp, r7
   1598e:	b002      	add	sp, #8
   15990:	bd80      	pop	{r7, pc}
   15992:	46c0      	nop			; (mov r8, r8)
   15994:	00013f45 	.word	0x00013f45

00015998 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   15998:	b580      	push	{r7, lr}
   1599a:	b084      	sub	sp, #16
   1599c:	af00      	add	r7, sp, #0
   1599e:	6078      	str	r0, [r7, #4]
   159a0:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
   159a2:	230e      	movs	r3, #14
   159a4:	18fb      	adds	r3, r7, r3
   159a6:	2200      	movs	r2, #0
   159a8:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
   159aa:	46c0      	nop			; (mov r8, r8)
   159ac:	230e      	movs	r3, #14
   159ae:	18fa      	adds	r2, r7, r3
   159b0:	687b      	ldr	r3, [r7, #4]
   159b2:	0011      	movs	r1, r2
   159b4:	0018      	movs	r0, r3
   159b6:	4b07      	ldr	r3, [pc, #28]	; (159d4 <usart_serial_getchar+0x3c>)
   159b8:	4798      	blx	r3
   159ba:	1e03      	subs	r3, r0, #0
   159bc:	d1f6      	bne.n	159ac <usart_serial_getchar+0x14>

	*c = temp;
   159be:	230e      	movs	r3, #14
   159c0:	18fb      	adds	r3, r7, r3
   159c2:	881b      	ldrh	r3, [r3, #0]
   159c4:	b2da      	uxtb	r2, r3
   159c6:	683b      	ldr	r3, [r7, #0]
   159c8:	701a      	strb	r2, [r3, #0]
}
   159ca:	46c0      	nop			; (mov r8, r8)
   159cc:	46bd      	mov	sp, r7
   159ce:	b004      	add	sp, #16
   159d0:	bd80      	pop	{r7, pc}
   159d2:	46c0      	nop			; (mov r8, r8)
   159d4:	00013fa9 	.word	0x00013fa9

000159d8 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   159d8:	b580      	push	{r7, lr}
   159da:	b084      	sub	sp, #16
   159dc:	af00      	add	r7, sp, #0
   159de:	60f8      	str	r0, [r7, #12]
   159e0:	60b9      	str	r1, [r7, #8]
   159e2:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
   159e4:	4b10      	ldr	r3, [pc, #64]	; (15a28 <stdio_serial_init+0x50>)
   159e6:	68fa      	ldr	r2, [r7, #12]
   159e8:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   159ea:	4b10      	ldr	r3, [pc, #64]	; (15a2c <stdio_serial_init+0x54>)
   159ec:	4a10      	ldr	r2, [pc, #64]	; (15a30 <stdio_serial_init+0x58>)
   159ee:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   159f0:	4b10      	ldr	r3, [pc, #64]	; (15a34 <stdio_serial_init+0x5c>)
   159f2:	4a11      	ldr	r2, [pc, #68]	; (15a38 <stdio_serial_init+0x60>)
   159f4:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
   159f6:	687a      	ldr	r2, [r7, #4]
   159f8:	68b9      	ldr	r1, [r7, #8]
   159fa:	68fb      	ldr	r3, [r7, #12]
   159fc:	0018      	movs	r0, r3
   159fe:	4b0f      	ldr	r3, [pc, #60]	; (15a3c <stdio_serial_init+0x64>)
   15a00:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   15a02:	4b0f      	ldr	r3, [pc, #60]	; (15a40 <stdio_serial_init+0x68>)
   15a04:	681b      	ldr	r3, [r3, #0]
   15a06:	689b      	ldr	r3, [r3, #8]
   15a08:	2100      	movs	r1, #0
   15a0a:	0018      	movs	r0, r3
   15a0c:	4b0d      	ldr	r3, [pc, #52]	; (15a44 <stdio_serial_init+0x6c>)
   15a0e:	4798      	blx	r3
	setbuf(stdin, NULL);
   15a10:	4b0b      	ldr	r3, [pc, #44]	; (15a40 <stdio_serial_init+0x68>)
   15a12:	681b      	ldr	r3, [r3, #0]
   15a14:	685b      	ldr	r3, [r3, #4]
   15a16:	2100      	movs	r1, #0
   15a18:	0018      	movs	r0, r3
   15a1a:	4b0a      	ldr	r3, [pc, #40]	; (15a44 <stdio_serial_init+0x6c>)
   15a1c:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
   15a1e:	46c0      	nop			; (mov r8, r8)
   15a20:	46bd      	mov	sp, r7
   15a22:	b004      	add	sp, #16
   15a24:	bd80      	pop	{r7, pc}
   15a26:	46c0      	nop			; (mov r8, r8)
   15a28:	20000440 	.word	0x20000440
   15a2c:	2000043c 	.word	0x2000043c
   15a30:	00015965 	.word	0x00015965
   15a34:	20000438 	.word	0x20000438
   15a38:	00015999 	.word	0x00015999
   15a3c:	00015935 	.word	0x00015935
   15a40:	2000001c 	.word	0x2000001c
   15a44:	00016ebd 	.word	0x00016ebd

00015a48 <configure_console>:
// begin source code



static void configure_console(void)
{
   15a48:	b580      	push	{r7, lr}
   15a4a:	b090      	sub	sp, #64	; 0x40
   15a4c:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;
	usart_get_config_defaults(&usart_conf);
   15a4e:	003b      	movs	r3, r7
   15a50:	0018      	movs	r0, r3
   15a52:	4b13      	ldr	r3, [pc, #76]	; (15aa0 <configure_console+0x58>)
   15a54:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   15a56:	003b      	movs	r3, r7
   15a58:	22c4      	movs	r2, #196	; 0xc4
   15a5a:	0392      	lsls	r2, r2, #14
   15a5c:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   15a5e:	003b      	movs	r3, r7
   15a60:	2201      	movs	r2, #1
   15a62:	4252      	negs	r2, r2
   15a64:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   15a66:	003b      	movs	r3, r7
   15a68:	2201      	movs	r2, #1
   15a6a:	4252      	negs	r2, r2
   15a6c:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   15a6e:	003b      	movs	r3, r7
   15a70:	4a0c      	ldr	r2, [pc, #48]	; (15aa4 <configure_console+0x5c>)
   15a72:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   15a74:	003b      	movs	r3, r7
   15a76:	4a0c      	ldr	r2, [pc, #48]	; (15aa8 <configure_console+0x60>)
   15a78:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
   15a7a:	003b      	movs	r3, r7
   15a7c:	22e1      	movs	r2, #225	; 0xe1
   15a7e:	0252      	lsls	r2, r2, #9
   15a80:	621a      	str	r2, [r3, #32]
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
   15a82:	003a      	movs	r2, r7
   15a84:	4909      	ldr	r1, [pc, #36]	; (15aac <configure_console+0x64>)
   15a86:	4b0a      	ldr	r3, [pc, #40]	; (15ab0 <configure_console+0x68>)
   15a88:	0018      	movs	r0, r3
   15a8a:	4b0a      	ldr	r3, [pc, #40]	; (15ab4 <configure_console+0x6c>)
   15a8c:	4798      	blx	r3
	usart_enable(&usart_instance);
   15a8e:	4b08      	ldr	r3, [pc, #32]	; (15ab0 <configure_console+0x68>)
   15a90:	0018      	movs	r0, r3
   15a92:	4b09      	ldr	r3, [pc, #36]	; (15ab8 <configure_console+0x70>)
   15a94:	4798      	blx	r3
}
   15a96:	46c0      	nop			; (mov r8, r8)
   15a98:	46bd      	mov	sp, r7
   15a9a:	b010      	add	sp, #64	; 0x40
   15a9c:	bd80      	pop	{r7, pc}
   15a9e:	46c0      	nop			; (mov r8, r8)
   15aa0:	0001582d 	.word	0x0001582d
   15aa4:	002a0003 	.word	0x002a0003
   15aa8:	002b0003 	.word	0x002b0003
   15aac:	42001800 	.word	0x42001800
   15ab0:	20000444 	.word	0x20000444
   15ab4:	000159d9 	.word	0x000159d9
   15ab8:	000158ed 	.word	0x000158ed

00015abc <configure_nvm>:


static void configure_nvm()
{
   15abc:	b580      	push	{r7, lr}
   15abe:	b082      	sub	sp, #8
   15ac0:	af00      	add	r7, sp, #0
	struct nvm_config config;
	nvm_get_config_defaults(&config);
   15ac2:	003b      	movs	r3, r7
   15ac4:	0018      	movs	r0, r3
   15ac6:	4b06      	ldr	r3, [pc, #24]	; (15ae0 <configure_nvm+0x24>)
   15ac8:	4798      	blx	r3
	config.manual_page_write = false;
   15aca:	003b      	movs	r3, r7
   15acc:	2200      	movs	r2, #0
   15ace:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config);
   15ad0:	003b      	movs	r3, r7
   15ad2:	0018      	movs	r0, r3
   15ad4:	4b03      	ldr	r3, [pc, #12]	; (15ae4 <configure_nvm+0x28>)
   15ad6:	4798      	blx	r3
}
   15ad8:	46c0      	nop			; (mov r8, r8)
   15ada:	46bd      	mov	sp, r7
   15adc:	b002      	add	sp, #8
   15ade:	bd80      	pop	{r7, pc}
   15ae0:	000157ad 	.word	0x000157ad
   15ae4:	00011b45 	.word	0x00011b45

00015ae8 <getFWStat>:

static Firmware_Status_t getFWStat()
{
   15ae8:	b590      	push	{r4, r7, lr}
   15aea:	b097      	sub	sp, #92	; 0x5c
   15aec:	af00      	add	r7, sp, #0
   15aee:	6078      	str	r0, [r7, #4]
	status_code_genare_t error_code;
	uint8_t read_buffer[NVMCTRL_PAGE_SIZE]={0};
   15af0:	2314      	movs	r3, #20
   15af2:	18fb      	adds	r3, r7, r3
   15af4:	0018      	movs	r0, r3
   15af6:	2340      	movs	r3, #64	; 0x40
   15af8:	001a      	movs	r2, r3
   15afa:	2100      	movs	r1, #0
   15afc:	4b27      	ldr	r3, [pc, #156]	; (15b9c <getFWStat+0xb4>)
   15afe:	4798      	blx	r3
	do
	{
		error_code = nvm_read_buffer(FW_STAT_ADDRESS, read_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   15b00:	2357      	movs	r3, #87	; 0x57
   15b02:	18fc      	adds	r4, r7, r3
   15b04:	2314      	movs	r3, #20
   15b06:	18f9      	adds	r1, r7, r3
   15b08:	23fe      	movs	r3, #254	; 0xfe
   15b0a:	01db      	lsls	r3, r3, #7
   15b0c:	2240      	movs	r2, #64	; 0x40
   15b0e:	0018      	movs	r0, r3
   15b10:	4b23      	ldr	r3, [pc, #140]	; (15ba0 <getFWStat+0xb8>)
   15b12:	4798      	blx	r3
   15b14:	0003      	movs	r3, r0
   15b16:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   15b18:	2357      	movs	r3, #87	; 0x57
   15b1a:	18fb      	adds	r3, r7, r3
   15b1c:	781b      	ldrb	r3, [r3, #0]
   15b1e:	2b05      	cmp	r3, #5
   15b20:	d0ee      	beq.n	15b00 <getFWStat+0x18>
	Firmware_Status_t thisFW;
	thisFW.signature[0]			= read_buffer[0];
   15b22:	2314      	movs	r3, #20
   15b24:	18fb      	adds	r3, r7, r3
   15b26:	781a      	ldrb	r2, [r3, #0]
   15b28:	230c      	movs	r3, #12
   15b2a:	18fb      	adds	r3, r7, r3
   15b2c:	701a      	strb	r2, [r3, #0]
	thisFW.signature[1]			= read_buffer[1];
   15b2e:	2314      	movs	r3, #20
   15b30:	18fb      	adds	r3, r7, r3
   15b32:	785a      	ldrb	r2, [r3, #1]
   15b34:	230c      	movs	r3, #12
   15b36:	18fb      	adds	r3, r7, r3
   15b38:	705a      	strb	r2, [r3, #1]
	thisFW.signature[2]			= read_buffer[2];
   15b3a:	2314      	movs	r3, #20
   15b3c:	18fb      	adds	r3, r7, r3
   15b3e:	789a      	ldrb	r2, [r3, #2]
   15b40:	230c      	movs	r3, #12
   15b42:	18fb      	adds	r3, r7, r3
   15b44:	709a      	strb	r2, [r3, #2]
	thisFW.signature[3]			= read_buffer[3];
   15b46:	2314      	movs	r3, #20
   15b48:	18fb      	adds	r3, r7, r3
   15b4a:	78da      	ldrb	r2, [r3, #3]
   15b4c:	230c      	movs	r3, #12
   15b4e:	18fb      	adds	r3, r7, r3
   15b50:	70da      	strb	r2, [r3, #3]
	thisFW.executing_image		= read_buffer[4];
   15b52:	2314      	movs	r3, #20
   15b54:	18fb      	adds	r3, r7, r3
   15b56:	791a      	ldrb	r2, [r3, #4]
   15b58:	230c      	movs	r3, #12
   15b5a:	18fb      	adds	r3, r7, r3
   15b5c:	711a      	strb	r2, [r3, #4]
	thisFW.downloaded_image		= read_buffer[5];
   15b5e:	2314      	movs	r3, #20
   15b60:	18fb      	adds	r3, r7, r3
   15b62:	795a      	ldrb	r2, [r3, #5]
   15b64:	230c      	movs	r3, #12
   15b66:	18fb      	adds	r3, r7, r3
   15b68:	715a      	strb	r2, [r3, #5]
	thisFW.writenew_image		= read_buffer[6];
   15b6a:	2314      	movs	r3, #20
   15b6c:	18fb      	adds	r3, r7, r3
   15b6e:	799a      	ldrb	r2, [r3, #6]
   15b70:	230c      	movs	r3, #12
   15b72:	18fb      	adds	r3, r7, r3
   15b74:	719a      	strb	r2, [r3, #6]
	thisFW.reset_count			= read_buffer[7];
   15b76:	2314      	movs	r3, #20
   15b78:	18fb      	adds	r3, r7, r3
   15b7a:	79da      	ldrb	r2, [r3, #7]
   15b7c:	230c      	movs	r3, #12
   15b7e:	18fb      	adds	r3, r7, r3
   15b80:	71da      	strb	r2, [r3, #7]
	return thisFW;
   15b82:	687a      	ldr	r2, [r7, #4]
   15b84:	230c      	movs	r3, #12
   15b86:	18fb      	adds	r3, r7, r3
   15b88:	0010      	movs	r0, r2
   15b8a:	0019      	movs	r1, r3
   15b8c:	2308      	movs	r3, #8
   15b8e:	001a      	movs	r2, r3
   15b90:	4b04      	ldr	r3, [pc, #16]	; (15ba4 <getFWStat+0xbc>)
   15b92:	4798      	blx	r3
	//return *(Firmware_Status_t*)FW_STAT_ADDRESS;	// return the firmware status
}
   15b94:	6878      	ldr	r0, [r7, #4]
   15b96:	46bd      	mov	sp, r7
   15b98:	b017      	add	sp, #92	; 0x5c
   15b9a:	bd90      	pop	{r4, r7, pc}
   15b9c:	00016c07 	.word	0x00016c07
   15ba0:	00011e81 	.word	0x00011e81
   15ba4:	00016bd1 	.word	0x00016bd1

00015ba8 <writeFWStat>:

static void writeFWStat(Firmware_Status_t thisFW)
{
   15ba8:	b590      	push	{r4, r7, lr}
   15baa:	b095      	sub	sp, #84	; 0x54
   15bac:	af00      	add	r7, sp, #0
   15bae:	003b      	movs	r3, r7
   15bb0:	6018      	str	r0, [r3, #0]
   15bb2:	6059      	str	r1, [r3, #4]
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE]={0};
   15bb4:	230c      	movs	r3, #12
   15bb6:	18fb      	adds	r3, r7, r3
   15bb8:	0018      	movs	r0, r3
   15bba:	2340      	movs	r3, #64	; 0x40
   15bbc:	001a      	movs	r2, r3
   15bbe:	2100      	movs	r1, #0
   15bc0:	4b25      	ldr	r3, [pc, #148]	; (15c58 <writeFWStat+0xb0>)
   15bc2:	4798      	blx	r3
	page_buffer[0] = thisFW.signature[0];
   15bc4:	003b      	movs	r3, r7
   15bc6:	781a      	ldrb	r2, [r3, #0]
   15bc8:	230c      	movs	r3, #12
   15bca:	18fb      	adds	r3, r7, r3
   15bcc:	701a      	strb	r2, [r3, #0]
	page_buffer[1] = thisFW.signature[1];
   15bce:	003b      	movs	r3, r7
   15bd0:	785a      	ldrb	r2, [r3, #1]
   15bd2:	230c      	movs	r3, #12
   15bd4:	18fb      	adds	r3, r7, r3
   15bd6:	705a      	strb	r2, [r3, #1]
	page_buffer[2] = thisFW.signature[2];
   15bd8:	003b      	movs	r3, r7
   15bda:	789a      	ldrb	r2, [r3, #2]
   15bdc:	230c      	movs	r3, #12
   15bde:	18fb      	adds	r3, r7, r3
   15be0:	709a      	strb	r2, [r3, #2]
	page_buffer[3] = thisFW.signature[3];
   15be2:	003b      	movs	r3, r7
   15be4:	78da      	ldrb	r2, [r3, #3]
   15be6:	230c      	movs	r3, #12
   15be8:	18fb      	adds	r3, r7, r3
   15bea:	70da      	strb	r2, [r3, #3]
	page_buffer[4] = thisFW.executing_image;
   15bec:	003b      	movs	r3, r7
   15bee:	791a      	ldrb	r2, [r3, #4]
   15bf0:	230c      	movs	r3, #12
   15bf2:	18fb      	adds	r3, r7, r3
   15bf4:	711a      	strb	r2, [r3, #4]
	page_buffer[5] = thisFW.downloaded_image;
   15bf6:	003b      	movs	r3, r7
   15bf8:	795a      	ldrb	r2, [r3, #5]
   15bfa:	230c      	movs	r3, #12
   15bfc:	18fb      	adds	r3, r7, r3
   15bfe:	715a      	strb	r2, [r3, #5]
	page_buffer[6] = thisFW.writenew_image;
   15c00:	003b      	movs	r3, r7
   15c02:	799a      	ldrb	r2, [r3, #6]
   15c04:	230c      	movs	r3, #12
   15c06:	18fb      	adds	r3, r7, r3
   15c08:	719a      	strb	r2, [r3, #6]
	page_buffer[7] = 0;
   15c0a:	230c      	movs	r3, #12
   15c0c:	18fb      	adds	r3, r7, r3
   15c0e:	2200      	movs	r2, #0
   15c10:	71da      	strb	r2, [r3, #7]
	
	status_code_genare_t error_code;
	do
	{
		error_code = nvm_erase_row(FW_STAT_ADDRESS);			// Erase FW stat row
   15c12:	234f      	movs	r3, #79	; 0x4f
   15c14:	18fc      	adds	r4, r7, r3
   15c16:	23fe      	movs	r3, #254	; 0xfe
   15c18:	01db      	lsls	r3, r3, #7
   15c1a:	0018      	movs	r0, r3
   15c1c:	4b0f      	ldr	r3, [pc, #60]	; (15c5c <writeFWStat+0xb4>)
   15c1e:	4798      	blx	r3
   15c20:	0003      	movs	r3, r0
   15c22:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   15c24:	234f      	movs	r3, #79	; 0x4f
   15c26:	18fb      	adds	r3, r7, r3
   15c28:	781b      	ldrb	r3, [r3, #0]
   15c2a:	2b05      	cmp	r3, #5
   15c2c:	d0f1      	beq.n	15c12 <writeFWStat+0x6a>
	
	do
	{
		error_code = nvm_write_buffer(FW_STAT_ADDRESS, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   15c2e:	234f      	movs	r3, #79	; 0x4f
   15c30:	18fc      	adds	r4, r7, r3
   15c32:	230c      	movs	r3, #12
   15c34:	18f9      	adds	r1, r7, r3
   15c36:	23fe      	movs	r3, #254	; 0xfe
   15c38:	01db      	lsls	r3, r3, #7
   15c3a:	2240      	movs	r2, #64	; 0x40
   15c3c:	0018      	movs	r0, r3
   15c3e:	4b08      	ldr	r3, [pc, #32]	; (15c60 <writeFWStat+0xb8>)
   15c40:	4798      	blx	r3
   15c42:	0003      	movs	r3, r0
   15c44:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   15c46:	234f      	movs	r3, #79	; 0x4f
   15c48:	18fb      	adds	r3, r7, r3
   15c4a:	781b      	ldrb	r3, [r3, #0]
   15c4c:	2b05      	cmp	r3, #5
   15c4e:	d0ee      	beq.n	15c2e <writeFWStat+0x86>
	//uint8_t read_buffer[NVMCTRL_PAGE_SIZE]={0};
	//do
	//{
		//error_code = nvm_read_buffer(FW_STAT_ADDRESS, read_buffer, NVMCTRL_PAGE_SIZE);	
	//} while (error_code == STATUS_BUSY);
}
   15c50:	46c0      	nop			; (mov r8, r8)
   15c52:	46bd      	mov	sp, r7
   15c54:	b015      	add	sp, #84	; 0x54
   15c56:	bd90      	pop	{r4, r7, pc}
   15c58:	00016c07 	.word	0x00016c07
   15c5c:	00011f7d 	.word	0x00011f7d
   15c60:	00011d35 	.word	0x00011d35

00015c64 <configure_port_pins>:
void configure_port_pins(void)
{
   15c64:	b580      	push	{r7, lr}
   15c66:	b082      	sub	sp, #8
   15c68:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   15c6a:	1d3b      	adds	r3, r7, #4
   15c6c:	0018      	movs	r0, r3
   15c6e:	4b0b      	ldr	r3, [pc, #44]	; (15c9c <configure_port_pins+0x38>)
   15c70:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   15c72:	1d3b      	adds	r3, r7, #4
   15c74:	2201      	movs	r2, #1
   15c76:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
   15c78:	1d3b      	adds	r3, r7, #4
   15c7a:	0019      	movs	r1, r3
   15c7c:	2017      	movs	r0, #23
   15c7e:	4b08      	ldr	r3, [pc, #32]	; (15ca0 <configure_port_pins+0x3c>)
   15c80:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
   15c82:	1d3b      	adds	r3, r7, #4
   15c84:	2200      	movs	r2, #0
   15c86:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(B1, &config_port_pin);
   15c88:	1d3b      	adds	r3, r7, #4
   15c8a:	0019      	movs	r1, r3
   15c8c:	2037      	movs	r0, #55	; 0x37
   15c8e:	4b04      	ldr	r3, [pc, #16]	; (15ca0 <configure_port_pins+0x3c>)
   15c90:	4798      	blx	r3
}
   15c92:	46c0      	nop			; (mov r8, r8)
   15c94:	46bd      	mov	sp, r7
   15c96:	b002      	add	sp, #8
   15c98:	bd80      	pop	{r7, pc}
   15c9a:	46c0      	nop			; (mov r8, r8)
   15c9c:	00015555 	.word	0x00015555
   15ca0:	0001204d 	.word	0x0001204d

00015ca4 <configure_spi_flash>:

static void configure_spi_flash()
{
   15ca4:	b580      	push	{r7, lr}
   15ca6:	b090      	sub	sp, #64	; 0x40
   15ca8:	af00      	add	r7, sp, #0
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
   15caa:	1d3b      	adds	r3, r7, #4
   15cac:	0018      	movs	r0, r3
   15cae:	4b19      	ldr	r3, [pc, #100]	; (15d14 <configure_spi_flash+0x70>)
   15cb0:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
   15cb2:	1d3b      	adds	r3, r7, #4
   15cb4:	4a18      	ldr	r2, [pc, #96]	; (15d18 <configure_spi_flash+0x74>)
   15cb6:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
   15cb8:	1d3b      	adds	r3, r7, #4
   15cba:	2280      	movs	r2, #128	; 0x80
   15cbc:	0252      	lsls	r2, r2, #9
   15cbe:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
   15cc0:	1d3b      	adds	r3, r7, #4
   15cc2:	4a16      	ldr	r2, [pc, #88]	; (15d1c <configure_spi_flash+0x78>)
   15cc4:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
   15cc6:	1d3b      	adds	r3, r7, #4
   15cc8:	2201      	movs	r2, #1
   15cca:	4252      	negs	r2, r2
   15ccc:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
   15cce:	1d3b      	adds	r3, r7, #4
   15cd0:	4a13      	ldr	r2, [pc, #76]	; (15d20 <configure_spi_flash+0x7c>)
   15cd2:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
   15cd4:	1d3b      	adds	r3, r7, #4
   15cd6:	4a13      	ldr	r2, [pc, #76]	; (15d24 <configure_spi_flash+0x80>)
   15cd8:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
   15cda:	1d3a      	adds	r2, r7, #4
   15cdc:	4912      	ldr	r1, [pc, #72]	; (15d28 <configure_spi_flash+0x84>)
   15cde:	4b13      	ldr	r3, [pc, #76]	; (15d2c <configure_spi_flash+0x88>)
   15ce0:	0018      	movs	r0, r3
   15ce2:	4b13      	ldr	r3, [pc, #76]	; (15d30 <configure_spi_flash+0x8c>)
   15ce4:	4798      	blx	r3
	spi_enable(&at25dfx_spi);
   15ce6:	4b11      	ldr	r3, [pc, #68]	; (15d2c <configure_spi_flash+0x88>)
   15ce8:	0018      	movs	r0, r3
   15cea:	4b12      	ldr	r3, [pc, #72]	; (15d34 <configure_spi_flash+0x90>)
   15cec:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_MEM_TYPE;
   15cee:	233c      	movs	r3, #60	; 0x3c
   15cf0:	18fb      	adds	r3, r7, r3
   15cf2:	2204      	movs	r2, #4
   15cf4:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = AT25DFX_CS;
   15cf6:	233c      	movs	r3, #60	; 0x3c
   15cf8:	18fb      	adds	r3, r7, r3
   15cfa:	2207      	movs	r2, #7
   15cfc:	705a      	strb	r2, [r3, #1]
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
   15cfe:	233c      	movs	r3, #60	; 0x3c
   15d00:	18fa      	adds	r2, r7, r3
   15d02:	490a      	ldr	r1, [pc, #40]	; (15d2c <configure_spi_flash+0x88>)
   15d04:	4b0c      	ldr	r3, [pc, #48]	; (15d38 <configure_spi_flash+0x94>)
   15d06:	0018      	movs	r0, r3
   15d08:	4b0c      	ldr	r3, [pc, #48]	; (15d3c <configure_spi_flash+0x98>)
   15d0a:	4798      	blx	r3
}
   15d0c:	46c0      	nop			; (mov r8, r8)
   15d0e:	46bd      	mov	sp, r7
   15d10:	b010      	add	sp, #64	; 0x40
   15d12:	bd80      	pop	{r7, pc}
   15d14:	00015671 	.word	0x00015671
   15d18:	0001d4c0 	.word	0x0001d4c0
   15d1c:	00100002 	.word	0x00100002
   15d20:	00120002 	.word	0x00120002
   15d24:	00130002 	.word	0x00130002
   15d28:	42000c00 	.word	0x42000c00
   15d2c:	20000dc4 	.word	0x20000dc4
   15d30:	00012d1d 	.word	0x00012d1d
   15d34:	000156f5 	.word	0x000156f5
   15d38:	20000c7c 	.word	0x20000c7c
   15d3c:	00015745 	.word	0x00015745

00015d40 <configure_timer>:

//Http downloader source code

static void configure_timer(void)
{
   15d40:	b580      	push	{r7, lr}
   15d42:	b082      	sub	sp, #8
   15d44:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
   15d46:	1d3b      	adds	r3, r7, #4
   15d48:	0018      	movs	r0, r3
   15d4a:	4b08      	ldr	r3, [pc, #32]	; (15d6c <configure_timer+0x2c>)
   15d4c:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
   15d4e:	1d3a      	adds	r2, r7, #4
   15d50:	4b07      	ldr	r3, [pc, #28]	; (15d70 <configure_timer+0x30>)
   15d52:	0011      	movs	r1, r2
   15d54:	0018      	movs	r0, r3
   15d56:	4b07      	ldr	r3, [pc, #28]	; (15d74 <configure_timer+0x34>)
   15d58:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   15d5a:	4b05      	ldr	r3, [pc, #20]	; (15d70 <configure_timer+0x30>)
   15d5c:	0018      	movs	r0, r3
   15d5e:	4b06      	ldr	r3, [pc, #24]	; (15d78 <configure_timer+0x38>)
   15d60:	4798      	blx	r3
}
   15d62:	46c0      	nop			; (mov r8, r8)
   15d64:	46bd      	mov	sp, r7
   15d66:	b002      	add	sp, #8
   15d68:	bd80      	pop	{r7, pc}
   15d6a:	46c0      	nop			; (mov r8, r8)
   15d6c:	00010895 	.word	0x00010895
   15d70:	20000c84 	.word	0x20000c84
   15d74:	000108b9 	.word	0x000108b9
   15d78:	000109a5 	.word	0x000109a5

00015d7c <init_state>:

static void init_state(void)
{
   15d7c:	b580      	push	{r7, lr}
   15d7e:	af00      	add	r7, sp, #0
	down_state = NOT_READY;
   15d80:	4b02      	ldr	r3, [pc, #8]	; (15d8c <init_state+0x10>)
   15d82:	2200      	movs	r2, #0
   15d84:	701a      	strb	r2, [r3, #0]
}
   15d86:	46c0      	nop			; (mov r8, r8)
   15d88:	46bd      	mov	sp, r7
   15d8a:	bd80      	pop	{r7, pc}
   15d8c:	20000294 	.word	0x20000294

00015d90 <clear_state>:

static void clear_state(download_state mask)
{
   15d90:	b580      	push	{r7, lr}
   15d92:	b082      	sub	sp, #8
   15d94:	af00      	add	r7, sp, #0
   15d96:	0002      	movs	r2, r0
   15d98:	1dfb      	adds	r3, r7, #7
   15d9a:	701a      	strb	r2, [r3, #0]
	down_state &= ~mask;
   15d9c:	1dfb      	adds	r3, r7, #7
   15d9e:	781b      	ldrb	r3, [r3, #0]
   15da0:	b25b      	sxtb	r3, r3
   15da2:	43db      	mvns	r3, r3
   15da4:	b25b      	sxtb	r3, r3
   15da6:	4a06      	ldr	r2, [pc, #24]	; (15dc0 <clear_state+0x30>)
   15da8:	7812      	ldrb	r2, [r2, #0]
   15daa:	b252      	sxtb	r2, r2
   15dac:	4013      	ands	r3, r2
   15dae:	b25b      	sxtb	r3, r3
   15db0:	b2da      	uxtb	r2, r3
   15db2:	4b03      	ldr	r3, [pc, #12]	; (15dc0 <clear_state+0x30>)
   15db4:	701a      	strb	r2, [r3, #0]
}
   15db6:	46c0      	nop			; (mov r8, r8)
   15db8:	46bd      	mov	sp, r7
   15dba:	b002      	add	sp, #8
   15dbc:	bd80      	pop	{r7, pc}
   15dbe:	46c0      	nop			; (mov r8, r8)
   15dc0:	20000294 	.word	0x20000294

00015dc4 <add_state>:

static void add_state(download_state mask)
{
   15dc4:	b580      	push	{r7, lr}
   15dc6:	b082      	sub	sp, #8
   15dc8:	af00      	add	r7, sp, #0
   15dca:	0002      	movs	r2, r0
   15dcc:	1dfb      	adds	r3, r7, #7
   15dce:	701a      	strb	r2, [r3, #0]
	down_state |= mask;
   15dd0:	4b05      	ldr	r3, [pc, #20]	; (15de8 <add_state+0x24>)
   15dd2:	781a      	ldrb	r2, [r3, #0]
   15dd4:	1dfb      	adds	r3, r7, #7
   15dd6:	781b      	ldrb	r3, [r3, #0]
   15dd8:	4313      	orrs	r3, r2
   15dda:	b2da      	uxtb	r2, r3
   15ddc:	4b02      	ldr	r3, [pc, #8]	; (15de8 <add_state+0x24>)
   15dde:	701a      	strb	r2, [r3, #0]
}
   15de0:	46c0      	nop			; (mov r8, r8)
   15de2:	46bd      	mov	sp, r7
   15de4:	b002      	add	sp, #8
   15de6:	bd80      	pop	{r7, pc}
   15de8:	20000294 	.word	0x20000294

00015dec <is_state_set>:

static inline bool is_state_set(download_state mask)
{
   15dec:	b580      	push	{r7, lr}
   15dee:	b082      	sub	sp, #8
   15df0:	af00      	add	r7, sp, #0
   15df2:	0002      	movs	r2, r0
   15df4:	1dfb      	adds	r3, r7, #7
   15df6:	701a      	strb	r2, [r3, #0]
	return ((down_state & mask) != 0);
   15df8:	4b06      	ldr	r3, [pc, #24]	; (15e14 <is_state_set+0x28>)
   15dfa:	781b      	ldrb	r3, [r3, #0]
   15dfc:	1dfa      	adds	r2, r7, #7
   15dfe:	7812      	ldrb	r2, [r2, #0]
   15e00:	4013      	ands	r3, r2
   15e02:	b2db      	uxtb	r3, r3
   15e04:	1e5a      	subs	r2, r3, #1
   15e06:	4193      	sbcs	r3, r2
   15e08:	b2db      	uxtb	r3, r3
}
   15e0a:	0018      	movs	r0, r3
   15e0c:	46bd      	mov	sp, r7
   15e0e:	b002      	add	sp, #8
   15e10:	bd80      	pop	{r7, pc}
   15e12:	46c0      	nop			; (mov r8, r8)
   15e14:	20000294 	.word	0x20000294

00015e18 <write_spi_flash_frm_buf>:

void write_spi_flash_frm_buf(uint32 len){
   15e18:	b590      	push	{r4, r7, lr}
   15e1a:	b083      	sub	sp, #12
   15e1c:	af00      	add	r7, sp, #0
   15e1e:	6078      	str	r0, [r7, #4]
	at25dfx_chip_wake(&at25dfx_chip);
   15e20:	4b13      	ldr	r3, [pc, #76]	; (15e70 <write_spi_flash_frm_buf+0x58>)
   15e22:	0018      	movs	r0, r3
   15e24:	4b13      	ldr	r3, [pc, #76]	; (15e74 <write_spi_flash_frm_buf+0x5c>)
   15e26:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   15e28:	4b11      	ldr	r3, [pc, #68]	; (15e70 <write_spi_flash_frm_buf+0x58>)
   15e2a:	0018      	movs	r0, r3
   15e2c:	4b12      	ldr	r3, [pc, #72]	; (15e78 <write_spi_flash_frm_buf+0x60>)
   15e2e:	4798      	blx	r3
   15e30:	1e03      	subs	r3, r0, #0
   15e32:	d003      	beq.n	15e3c <write_spi_flash_frm_buf+0x24>
		// Handle missing or non-responsive device
		printf("Chip didnt wake \r\n");
   15e34:	4b11      	ldr	r3, [pc, #68]	; (15e7c <write_spi_flash_frm_buf+0x64>)
   15e36:	0018      	movs	r0, r3
   15e38:	4b11      	ldr	r3, [pc, #68]	; (15e80 <write_spi_flash_frm_buf+0x68>)
   15e3a:	4798      	blx	r3
	}
	
	//at25dfx_chip_set_sector_protect(&at25dfx_chip, flash_addr, false);				// unprotect sector
	
	at25dfx_chip_write_buffer(&at25dfx_chip, flash_addr, http_buf + http_buf_read_ptr, len);	// write buffer
   15e3c:	4b11      	ldr	r3, [pc, #68]	; (15e84 <write_spi_flash_frm_buf+0x6c>)
   15e3e:	6819      	ldr	r1, [r3, #0]
   15e40:	4b11      	ldr	r3, [pc, #68]	; (15e88 <write_spi_flash_frm_buf+0x70>)
   15e42:	681a      	ldr	r2, [r3, #0]
   15e44:	4b11      	ldr	r3, [pc, #68]	; (15e8c <write_spi_flash_frm_buf+0x74>)
   15e46:	18d2      	adds	r2, r2, r3
   15e48:	687b      	ldr	r3, [r7, #4]
   15e4a:	b29b      	uxth	r3, r3
   15e4c:	4808      	ldr	r0, [pc, #32]	; (15e70 <write_spi_flash_frm_buf+0x58>)
   15e4e:	4c10      	ldr	r4, [pc, #64]	; (15e90 <write_spi_flash_frm_buf+0x78>)
   15e50:	47a0      	blx	r4
	//at25dfx_chip_read_buffer(&at25dfx_chip, flash_addr, read_buffer, len);		// read same location
	//at25dfx_chip_read_buffer(&at25dfx_chip, (flash_addr+0x0020), read_buffer, AT25DFX_BUFFER_SIZE);		// read same location
	//at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);				// protect sector
	at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
   15e52:	4b07      	ldr	r3, [pc, #28]	; (15e70 <write_spi_flash_frm_buf+0x58>)
   15e54:	0018      	movs	r0, r3
   15e56:	4b0f      	ldr	r3, [pc, #60]	; (15e94 <write_spi_flash_frm_buf+0x7c>)
   15e58:	4798      	blx	r3
	flash_addr = flash_addr + len;
   15e5a:	4b0a      	ldr	r3, [pc, #40]	; (15e84 <write_spi_flash_frm_buf+0x6c>)
   15e5c:	681a      	ldr	r2, [r3, #0]
   15e5e:	687b      	ldr	r3, [r7, #4]
   15e60:	18d2      	adds	r2, r2, r3
   15e62:	4b08      	ldr	r3, [pc, #32]	; (15e84 <write_spi_flash_frm_buf+0x6c>)
   15e64:	601a      	str	r2, [r3, #0]
}
   15e66:	46c0      	nop			; (mov r8, r8)
   15e68:	46bd      	mov	sp, r7
   15e6a:	b003      	add	sp, #12
   15e6c:	bd90      	pop	{r4, r7, pc}
   15e6e:	46c0      	nop			; (mov r8, r8)
   15e70:	20000c7c 	.word	0x20000c7c
   15e74:	00011979 	.word	0x00011979
   15e78:	000114e9 	.word	0x000114e9
   15e7c:	00019780 	.word	0x00019780
   15e80:	00016e85 	.word	0x00016e85
   15e84:	20000478 	.word	0x20000478
   15e88:	20000290 	.word	0x20000290
   15e8c:	2000047c 	.word	0x2000047c
   15e90:	00011595 	.word	0x00011595
   15e94:	000118ed 	.word	0x000118ed

00015e98 <start_download>:

static void start_download(void)
{
   15e98:	b590      	push	{r4, r7, lr}
   15e9a:	b083      	sub	sp, #12
   15e9c:	af02      	add	r7, sp, #8
	if (!is_state_set(STORAGE_READY)) {
		printf("start_download: Flash not initialized.\r\n");
		return;
	}
	*/
	if (!is_state_set(WIFI_CONNECTED)) {
   15e9e:	2002      	movs	r0, #2
   15ea0:	4b22      	ldr	r3, [pc, #136]	; (15f2c <start_download+0x94>)
   15ea2:	4798      	blx	r3
   15ea4:	0003      	movs	r3, r0
   15ea6:	001a      	movs	r2, r3
   15ea8:	2301      	movs	r3, #1
   15eaa:	4053      	eors	r3, r2
   15eac:	b2db      	uxtb	r3, r3
   15eae:	2b00      	cmp	r3, #0
   15eb0:	d004      	beq.n	15ebc <start_download+0x24>
		printf("start_download: Wi-Fi is not connected.\r\n");
   15eb2:	4b1f      	ldr	r3, [pc, #124]	; (15f30 <start_download+0x98>)
   15eb4:	0018      	movs	r0, r3
   15eb6:	4b1f      	ldr	r3, [pc, #124]	; (15f34 <start_download+0x9c>)
   15eb8:	4798      	blx	r3
		return;
   15eba:	e033      	b.n	15f24 <start_download+0x8c>
	}

	if (is_state_set(GET_REQUESTED)) {
   15ebc:	2004      	movs	r0, #4
   15ebe:	4b1b      	ldr	r3, [pc, #108]	; (15f2c <start_download+0x94>)
   15ec0:	4798      	blx	r3
   15ec2:	1e03      	subs	r3, r0, #0
   15ec4:	d004      	beq.n	15ed0 <start_download+0x38>
		printf("start_download: request is sent already.\r\n");
   15ec6:	4b1c      	ldr	r3, [pc, #112]	; (15f38 <start_download+0xa0>)
   15ec8:	0018      	movs	r0, r3
   15eca:	4b1a      	ldr	r3, [pc, #104]	; (15f34 <start_download+0x9c>)
   15ecc:	4798      	blx	r3
		return;
   15ece:	e029      	b.n	15f24 <start_download+0x8c>
	}

	if (is_state_set(DOWNLOADING)) {
   15ed0:	2008      	movs	r0, #8
   15ed2:	4b16      	ldr	r3, [pc, #88]	; (15f2c <start_download+0x94>)
   15ed4:	4798      	blx	r3
   15ed6:	1e03      	subs	r3, r0, #0
   15ed8:	d004      	beq.n	15ee4 <start_download+0x4c>
		printf("start_download: running download already.\r\n");
   15eda:	4b18      	ldr	r3, [pc, #96]	; (15f3c <start_download+0xa4>)
   15edc:	0018      	movs	r0, r3
   15ede:	4b15      	ldr	r3, [pc, #84]	; (15f34 <start_download+0x9c>)
   15ee0:	4798      	blx	r3
		return;
   15ee2:	e01f      	b.n	15f24 <start_download+0x8c>
	}

	/* Send the HTTP request. */
	if(download_CRC == false){
   15ee4:	4b16      	ldr	r3, [pc, #88]	; (15f40 <start_download+0xa8>)
   15ee6:	781b      	ldrb	r3, [r3, #0]
   15ee8:	2201      	movs	r2, #1
   15eea:	4053      	eors	r3, r2
   15eec:	b2db      	uxtb	r3, r3
   15eee:	2b00      	cmp	r3, #0
   15ef0:	d00c      	beq.n	15f0c <start_download+0x74>
		printf("start_download: sending HTTP request...\r\n");
   15ef2:	4b14      	ldr	r3, [pc, #80]	; (15f44 <start_download+0xac>)
   15ef4:	0018      	movs	r0, r3
   15ef6:	4b0f      	ldr	r3, [pc, #60]	; (15f34 <start_download+0x9c>)
   15ef8:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   15efa:	4913      	ldr	r1, [pc, #76]	; (15f48 <start_download+0xb0>)
   15efc:	4813      	ldr	r0, [pc, #76]	; (15f4c <start_download+0xb4>)
   15efe:	2300      	movs	r3, #0
   15f00:	9300      	str	r3, [sp, #0]
   15f02:	2300      	movs	r3, #0
   15f04:	2201      	movs	r2, #1
   15f06:	4c12      	ldr	r4, [pc, #72]	; (15f50 <start_download+0xb8>)
   15f08:	47a0      	blx	r4
   15f0a:	e00b      	b.n	15f24 <start_download+0x8c>
	} else{
		printf("start_download CRC: sending HTTP request...\r\n");
   15f0c:	4b11      	ldr	r3, [pc, #68]	; (15f54 <start_download+0xbc>)
   15f0e:	0018      	movs	r0, r3
   15f10:	4b08      	ldr	r3, [pc, #32]	; (15f34 <start_download+0x9c>)
   15f12:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_CRC_URL, HTTP_METHOD_GET, NULL, NULL);
   15f14:	4910      	ldr	r1, [pc, #64]	; (15f58 <start_download+0xc0>)
   15f16:	480d      	ldr	r0, [pc, #52]	; (15f4c <start_download+0xb4>)
   15f18:	2300      	movs	r3, #0
   15f1a:	9300      	str	r3, [sp, #0]
   15f1c:	2300      	movs	r3, #0
   15f1e:	2201      	movs	r2, #1
   15f20:	4c0b      	ldr	r4, [pc, #44]	; (15f50 <start_download+0xb8>)
   15f22:	47a0      	blx	r4
	}
	
}
   15f24:	46bd      	mov	sp, r7
   15f26:	b001      	add	sp, #4
   15f28:	bd90      	pop	{r4, r7, pc}
   15f2a:	46c0      	nop			; (mov r8, r8)
   15f2c:	00015ded 	.word	0x00015ded
   15f30:	00019794 	.word	0x00019794
   15f34:	00016e85 	.word	0x00016e85
   15f38:	000197c0 	.word	0x000197c0
   15f3c:	000197ec 	.word	0x000197ec
   15f40:	20000289 	.word	0x20000289
   15f44:	00019818 	.word	0x00019818
   15f48:	00019844 	.word	0x00019844
   15f4c:	20000cdc 	.word	0x20000cdc
   15f50:	0000f405 	.word	0x0000f405
   15f54:	00019878 	.word	0x00019878
   15f58:	000198a8 	.word	0x000198a8

00015f5c <http_client_callback>:

static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   15f5c:	b580      	push	{r7, lr}
   15f5e:	b088      	sub	sp, #32
   15f60:	af00      	add	r7, sp, #0
   15f62:	60f8      	str	r0, [r7, #12]
   15f64:	60b9      	str	r1, [r7, #8]
   15f66:	607a      	str	r2, [r7, #4]
	switch (type) {
   15f68:	68bb      	ldr	r3, [r7, #8]
   15f6a:	2b04      	cmp	r3, #4
   15f6c:	d900      	bls.n	15f70 <http_client_callback+0x14>
   15f6e:	e186      	b.n	1627e <http_client_callback+0x322>
   15f70:	68bb      	ldr	r3, [r7, #8]
   15f72:	009a      	lsls	r2, r3, #2
   15f74:	4bc3      	ldr	r3, [pc, #780]	; (16284 <http_client_callback+0x328>)
   15f76:	18d3      	adds	r3, r2, r3
   15f78:	681b      	ldr	r3, [r3, #0]
   15f7a:	469f      	mov	pc, r3
	case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
		printf("http_client_callback: HTTP client socket connected.\r\n");
   15f7c:	4bc2      	ldr	r3, [pc, #776]	; (16288 <http_client_callback+0x32c>)
   15f7e:	0018      	movs	r0, r3
   15f80:	4bc2      	ldr	r3, [pc, #776]	; (1628c <http_client_callback+0x330>)
   15f82:	4798      	blx	r3
		break;
   15f84:	e17b      	b.n	1627e <http_client_callback+0x322>

	case HTTP_CLIENT_CALLBACK_REQUESTED:
		printf("http_client_callback: request completed.\r\n");
   15f86:	4bc2      	ldr	r3, [pc, #776]	; (16290 <http_client_callback+0x334>)
   15f88:	0018      	movs	r0, r3
   15f8a:	4bc0      	ldr	r3, [pc, #768]	; (1628c <http_client_callback+0x330>)
   15f8c:	4798      	blx	r3
		add_state(GET_REQUESTED);
   15f8e:	2004      	movs	r0, #4
   15f90:	4bc0      	ldr	r3, [pc, #768]	; (16294 <http_client_callback+0x338>)
   15f92:	4798      	blx	r3
		break;
   15f94:	e173      	b.n	1627e <http_client_callback+0x322>

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		printf("http_client_callback: received response %u data size %u\r\n",
				(unsigned int)data->recv_response.response_code,
   15f96:	687b      	ldr	r3, [r7, #4]
   15f98:	881b      	ldrh	r3, [r3, #0]
		printf("http_client_callback: received response %u data size %u\r\n",
   15f9a:	0019      	movs	r1, r3
				(unsigned int)data->recv_response.content_length);
   15f9c:	687b      	ldr	r3, [r7, #4]
   15f9e:	685a      	ldr	r2, [r3, #4]
		printf("http_client_callback: received response %u data size %u\r\n",
   15fa0:	4bbd      	ldr	r3, [pc, #756]	; (16298 <http_client_callback+0x33c>)
   15fa2:	0018      	movs	r0, r3
   15fa4:	4bbd      	ldr	r3, [pc, #756]	; (1629c <http_client_callback+0x340>)
   15fa6:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
   15fa8:	687b      	ldr	r3, [r7, #4]
   15faa:	881b      	ldrh	r3, [r3, #0]
   15fac:	2bc8      	cmp	r3, #200	; 0xc8
   15fae:	d003      	beq.n	15fb8 <http_client_callback+0x5c>
		} 
		else {
			add_state(CANCELED);
   15fb0:	2020      	movs	r0, #32
   15fb2:	4bb8      	ldr	r3, [pc, #736]	; (16294 <http_client_callback+0x338>)
   15fb4:	4798      	blx	r3
			return;
   15fb6:	e162      	b.n	1627e <http_client_callback+0x322>
		}
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   15fb8:	687b      	ldr	r3, [r7, #4]
   15fba:	685a      	ldr	r2, [r3, #4]
   15fbc:	2380      	movs	r3, #128	; 0x80
   15fbe:	00db      	lsls	r3, r3, #3
   15fc0:	429a      	cmp	r2, r3
   15fc2:	d900      	bls.n	15fc6 <http_client_callback+0x6a>
   15fc4:	e156      	b.n	16274 <http_client_callback+0x318>
			//***store_file_packet(data->recv_response.content, data->recv_response.content_length);
			
			//This is run only when file size < MAIN_BUFFER_MAX_SIZE which we assume never happens!
			printf("Callback: CRC download......\r\n");
   15fc6:	4bb6      	ldr	r3, [pc, #728]	; (162a0 <http_client_callback+0x344>)
   15fc8:	0018      	movs	r0, r3
   15fca:	4bb0      	ldr	r3, [pc, #704]	; (1628c <http_client_callback+0x330>)
   15fcc:	4798      	blx	r3
			dlCRC = *(uint32_t *)data->recv_response.content;
   15fce:	687b      	ldr	r3, [r7, #4]
   15fd0:	689b      	ldr	r3, [r3, #8]
   15fd2:	681a      	ldr	r2, [r3, #0]
   15fd4:	4bb3      	ldr	r3, [pc, #716]	; (162a4 <http_client_callback+0x348>)
   15fd6:	601a      	str	r2, [r3, #0]
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
   15fd8:	4bb2      	ldr	r3, [pc, #712]	; (162a4 <http_client_callback+0x348>)
   15fda:	681b      	ldr	r3, [r3, #0]
   15fdc:	0e1a      	lsrs	r2, r3, #24
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
   15fde:	4bb1      	ldr	r3, [pc, #708]	; (162a4 <http_client_callback+0x348>)
   15fe0:	681b      	ldr	r3, [r3, #0]
   15fe2:	0219      	lsls	r1, r3, #8
   15fe4:	23ff      	movs	r3, #255	; 0xff
   15fe6:	041b      	lsls	r3, r3, #16
   15fe8:	400b      	ands	r3, r1
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
   15fea:	431a      	orrs	r2, r3
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
   15fec:	4bad      	ldr	r3, [pc, #692]	; (162a4 <http_client_callback+0x348>)
   15fee:	681b      	ldr	r3, [r3, #0]
   15ff0:	0a19      	lsrs	r1, r3, #8
   15ff2:	23ff      	movs	r3, #255	; 0xff
   15ff4:	021b      	lsls	r3, r3, #8
   15ff6:	400b      	ands	r3, r1
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
   15ff8:	431a      	orrs	r2, r3
                    ((dlCRC<<24)&0xff000000); // byte 0 to byte 3
   15ffa:	4baa      	ldr	r3, [pc, #680]	; (162a4 <http_client_callback+0x348>)
   15ffc:	681b      	ldr	r3, [r3, #0]
   15ffe:	061b      	lsls	r3, r3, #24
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
   16000:	431a      	orrs	r2, r3
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
   16002:	4ba8      	ldr	r3, [pc, #672]	; (162a4 <http_client_callback+0x348>)
   16004:	601a      	str	r2, [r3, #0]
			printf("Received %x\r\n", (uint32_t)dlCRC);
   16006:	4ba7      	ldr	r3, [pc, #668]	; (162a4 <http_client_callback+0x348>)
   16008:	681a      	ldr	r2, [r3, #0]
   1600a:	4ba7      	ldr	r3, [pc, #668]	; (162a8 <http_client_callback+0x34c>)
   1600c:	0011      	movs	r1, r2
   1600e:	0018      	movs	r0, r3
   16010:	4ba2      	ldr	r3, [pc, #648]	; (1629c <http_client_callback+0x340>)
   16012:	4798      	blx	r3
			
			add_state(COMPLETED);
   16014:	2010      	movs	r0, #16
   16016:	4b9f      	ldr	r3, [pc, #636]	; (16294 <http_client_callback+0x338>)
   16018:	4798      	blx	r3
		}
		break;
   1601a:	e12b      	b.n	16274 <http_client_callback+0x318>

	case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
				(unsigned int)data->recv_chunked_data.length);
   1601c:	687b      	ldr	r3, [r7, #4]
   1601e:	681a      	ldr	r2, [r3, #0]
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
   16020:	4ba2      	ldr	r3, [pc, #648]	; (162ac <http_client_callback+0x350>)
   16022:	0011      	movs	r1, r2
   16024:	0018      	movs	r0, r3
   16026:	4b9d      	ldr	r3, [pc, #628]	; (1629c <http_client_callback+0x340>)
   16028:	4798      	blx	r3
		// Calc CRC for this chunk
		if (firstCRC) {
   1602a:	4ba1      	ldr	r3, [pc, #644]	; (162b0 <http_client_callback+0x354>)
   1602c:	781b      	ldrb	r3, [r3, #0]
   1602e:	2b00      	cmp	r3, #0
   16030:	d013      	beq.n	1605a <http_client_callback+0xfe>
			crc32_calculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
   16032:	687b      	ldr	r3, [r7, #4]
   16034:	6858      	ldr	r0, [r3, #4]
   16036:	687b      	ldr	r3, [r7, #4]
   16038:	681b      	ldr	r3, [r3, #0]
   1603a:	4a9e      	ldr	r2, [pc, #632]	; (162b4 <http_client_callback+0x358>)
   1603c:	0019      	movs	r1, r3
   1603e:	4b9e      	ldr	r3, [pc, #632]	; (162b8 <http_client_callback+0x35c>)
   16040:	4798      	blx	r3
			printf("First block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
   16042:	687b      	ldr	r3, [r7, #4]
   16044:	6819      	ldr	r1, [r3, #0]
   16046:	4b9b      	ldr	r3, [pc, #620]	; (162b4 <http_client_callback+0x358>)
   16048:	681a      	ldr	r2, [r3, #0]
   1604a:	4b9c      	ldr	r3, [pc, #624]	; (162bc <http_client_callback+0x360>)
   1604c:	0018      	movs	r0, r3
   1604e:	4b93      	ldr	r3, [pc, #588]	; (1629c <http_client_callback+0x340>)
   16050:	4798      	blx	r3
			firstCRC = false;
   16052:	4b97      	ldr	r3, [pc, #604]	; (162b0 <http_client_callback+0x354>)
   16054:	2200      	movs	r2, #0
   16056:	701a      	strb	r2, [r3, #0]
   16058:	e00f      	b.n	1607a <http_client_callback+0x11e>
		}
		else {
			crc32_recalculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
   1605a:	687b      	ldr	r3, [r7, #4]
   1605c:	6858      	ldr	r0, [r3, #4]
   1605e:	687b      	ldr	r3, [r7, #4]
   16060:	681b      	ldr	r3, [r3, #0]
   16062:	4a94      	ldr	r2, [pc, #592]	; (162b4 <http_client_callback+0x358>)
   16064:	0019      	movs	r1, r3
   16066:	4b96      	ldr	r3, [pc, #600]	; (162c0 <http_client_callback+0x364>)
   16068:	4798      	blx	r3
			printf("Block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
   1606a:	687b      	ldr	r3, [r7, #4]
   1606c:	6819      	ldr	r1, [r3, #0]
   1606e:	4b91      	ldr	r3, [pc, #580]	; (162b4 <http_client_callback+0x358>)
   16070:	681a      	ldr	r2, [r3, #0]
   16072:	4b94      	ldr	r3, [pc, #592]	; (162c4 <http_client_callback+0x368>)
   16074:	0018      	movs	r0, r3
   16076:	4b89      	ldr	r3, [pc, #548]	; (1629c <http_client_callback+0x340>)
   16078:	4798      	blx	r3
		}
		
		//***store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
		if (http_buf_write_ptr + data->recv_chunked_data.length > 2048){
   1607a:	687b      	ldr	r3, [r7, #4]
   1607c:	681a      	ldr	r2, [r3, #0]
   1607e:	4b92      	ldr	r3, [pc, #584]	; (162c8 <http_client_callback+0x36c>)
   16080:	681b      	ldr	r3, [r3, #0]
   16082:	18d2      	adds	r2, r2, r3
   16084:	2380      	movs	r3, #128	; 0x80
   16086:	011b      	lsls	r3, r3, #4
   16088:	429a      	cmp	r2, r3
   1608a:	d92a      	bls.n	160e2 <http_client_callback+0x186>
			memcpy_ram2ram(http_buf + http_buf_write_ptr,data->recv_chunked_data.data,(2048-http_buf_write_ptr));
   1608c:	4b8e      	ldr	r3, [pc, #568]	; (162c8 <http_client_callback+0x36c>)
   1608e:	681a      	ldr	r2, [r3, #0]
   16090:	4b8e      	ldr	r3, [pc, #568]	; (162cc <http_client_callback+0x370>)
   16092:	18d0      	adds	r0, r2, r3
   16094:	687b      	ldr	r3, [r7, #4]
   16096:	6859      	ldr	r1, [r3, #4]
   16098:	4b8b      	ldr	r3, [pc, #556]	; (162c8 <http_client_callback+0x36c>)
   1609a:	681b      	ldr	r3, [r3, #0]
   1609c:	2280      	movs	r2, #128	; 0x80
   1609e:	0112      	lsls	r2, r2, #4
   160a0:	1ad3      	subs	r3, r2, r3
   160a2:	001a      	movs	r2, r3
   160a4:	4b8a      	ldr	r3, [pc, #552]	; (162d0 <http_client_callback+0x374>)
   160a6:	4798      	blx	r3
			memcpy_ram2ram(http_buf, data->recv_chunked_data.data + (2048-http_buf_write_ptr), data->recv_chunked_data.length-(2048-http_buf_write_ptr));
   160a8:	687b      	ldr	r3, [r7, #4]
   160aa:	685a      	ldr	r2, [r3, #4]
   160ac:	4b86      	ldr	r3, [pc, #536]	; (162c8 <http_client_callback+0x36c>)
   160ae:	681b      	ldr	r3, [r3, #0]
   160b0:	2180      	movs	r1, #128	; 0x80
   160b2:	0109      	lsls	r1, r1, #4
   160b4:	1acb      	subs	r3, r1, r3
   160b6:	18d1      	adds	r1, r2, r3
   160b8:	687b      	ldr	r3, [r7, #4]
   160ba:	681a      	ldr	r2, [r3, #0]
   160bc:	4b82      	ldr	r3, [pc, #520]	; (162c8 <http_client_callback+0x36c>)
   160be:	681b      	ldr	r3, [r3, #0]
   160c0:	18d3      	adds	r3, r2, r3
   160c2:	4a84      	ldr	r2, [pc, #528]	; (162d4 <http_client_callback+0x378>)
   160c4:	189a      	adds	r2, r3, r2
   160c6:	4b81      	ldr	r3, [pc, #516]	; (162cc <http_client_callback+0x370>)
   160c8:	0018      	movs	r0, r3
   160ca:	4b81      	ldr	r3, [pc, #516]	; (162d0 <http_client_callback+0x374>)
   160cc:	4798      	blx	r3
			http_buf_write_ptr = data->recv_chunked_data.length-(2048-http_buf_write_ptr);
   160ce:	687b      	ldr	r3, [r7, #4]
   160d0:	681a      	ldr	r2, [r3, #0]
   160d2:	4b7d      	ldr	r3, [pc, #500]	; (162c8 <http_client_callback+0x36c>)
   160d4:	681b      	ldr	r3, [r3, #0]
   160d6:	18d3      	adds	r3, r2, r3
   160d8:	4a7e      	ldr	r2, [pc, #504]	; (162d4 <http_client_callback+0x378>)
   160da:	189a      	adds	r2, r3, r2
   160dc:	4b7a      	ldr	r3, [pc, #488]	; (162c8 <http_client_callback+0x36c>)
   160de:	601a      	str	r2, [r3, #0]
   160e0:	e011      	b.n	16106 <http_client_callback+0x1aa>
		}
		else {
			memcpy_ram2ram(http_buf + http_buf_write_ptr, data->recv_chunked_data.data, data->recv_chunked_data.length);
   160e2:	4b79      	ldr	r3, [pc, #484]	; (162c8 <http_client_callback+0x36c>)
   160e4:	681a      	ldr	r2, [r3, #0]
   160e6:	4b79      	ldr	r3, [pc, #484]	; (162cc <http_client_callback+0x370>)
   160e8:	18d0      	adds	r0, r2, r3
   160ea:	687b      	ldr	r3, [r7, #4]
   160ec:	6859      	ldr	r1, [r3, #4]
   160ee:	687b      	ldr	r3, [r7, #4]
   160f0:	681b      	ldr	r3, [r3, #0]
   160f2:	001a      	movs	r2, r3
   160f4:	4b76      	ldr	r3, [pc, #472]	; (162d0 <http_client_callback+0x374>)
   160f6:	4798      	blx	r3
			http_buf_write_ptr = http_buf_write_ptr + data->recv_chunked_data.length;
   160f8:	687b      	ldr	r3, [r7, #4]
   160fa:	681a      	ldr	r2, [r3, #0]
   160fc:	4b72      	ldr	r3, [pc, #456]	; (162c8 <http_client_callback+0x36c>)
   160fe:	681b      	ldr	r3, [r3, #0]
   16100:	18d2      	adds	r2, r2, r3
   16102:	4b71      	ldr	r3, [pc, #452]	; (162c8 <http_client_callback+0x36c>)
   16104:	601a      	str	r2, [r3, #0]
		}
		 
		if  (http_buf_write_ptr > http_buf_read_ptr){
   16106:	4b70      	ldr	r3, [pc, #448]	; (162c8 <http_client_callback+0x36c>)
   16108:	681a      	ldr	r2, [r3, #0]
   1610a:	4b73      	ldr	r3, [pc, #460]	; (162d8 <http_client_callback+0x37c>)
   1610c:	681b      	ldr	r3, [r3, #0]
   1610e:	429a      	cmp	r2, r3
   16110:	d920      	bls.n	16154 <http_client_callback+0x1f8>
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
   16112:	4b6d      	ldr	r3, [pc, #436]	; (162c8 <http_client_callback+0x36c>)
   16114:	681a      	ldr	r2, [r3, #0]
   16116:	4b70      	ldr	r3, [pc, #448]	; (162d8 <http_client_callback+0x37c>)
   16118:	681b      	ldr	r3, [r3, #0]
   1611a:	1ad3      	subs	r3, r2, r3
   1611c:	0a1a      	lsrs	r2, r3, #8
   1611e:	2313      	movs	r3, #19
   16120:	18fb      	adds	r3, r7, r3
   16122:	701a      	strb	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   16124:	2300      	movs	r3, #0
   16126:	61fb      	str	r3, [r7, #28]
   16128:	e00d      	b.n	16146 <http_client_callback+0x1ea>
				write_spi_flash_frm_buf(256);
   1612a:	2380      	movs	r3, #128	; 0x80
   1612c:	005b      	lsls	r3, r3, #1
   1612e:	0018      	movs	r0, r3
   16130:	4b6a      	ldr	r3, [pc, #424]	; (162dc <http_client_callback+0x380>)
   16132:	4798      	blx	r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
   16134:	4b68      	ldr	r3, [pc, #416]	; (162d8 <http_client_callback+0x37c>)
   16136:	681b      	ldr	r3, [r3, #0]
   16138:	1c5a      	adds	r2, r3, #1
   1613a:	32ff      	adds	r2, #255	; 0xff
   1613c:	4b66      	ldr	r3, [pc, #408]	; (162d8 <http_client_callback+0x37c>)
   1613e:	601a      	str	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   16140:	69fb      	ldr	r3, [r7, #28]
   16142:	3301      	adds	r3, #1
   16144:	61fb      	str	r3, [r7, #28]
   16146:	2313      	movs	r3, #19
   16148:	18fb      	adds	r3, r7, r3
   1614a:	781a      	ldrb	r2, [r3, #0]
   1614c:	69fb      	ldr	r3, [r7, #28]
   1614e:	429a      	cmp	r2, r3
   16150:	dceb      	bgt.n	1612a <http_client_callback+0x1ce>
   16152:	e048      	b.n	161e6 <http_client_callback+0x28a>
			}
		}
		else if (http_buf_write_ptr < http_buf_read_ptr){
   16154:	4b5c      	ldr	r3, [pc, #368]	; (162c8 <http_client_callback+0x36c>)
   16156:	681a      	ldr	r2, [r3, #0]
   16158:	4b5f      	ldr	r3, [pc, #380]	; (162d8 <http_client_callback+0x37c>)
   1615a:	681b      	ldr	r3, [r3, #0]
   1615c:	429a      	cmp	r2, r3
   1615e:	d242      	bcs.n	161e6 <http_client_callback+0x28a>
			uint8 n = (2048 - http_buf_read_ptr) / 256;
   16160:	4b5d      	ldr	r3, [pc, #372]	; (162d8 <http_client_callback+0x37c>)
   16162:	681b      	ldr	r3, [r3, #0]
   16164:	2280      	movs	r2, #128	; 0x80
   16166:	0112      	lsls	r2, r2, #4
   16168:	1ad3      	subs	r3, r2, r3
   1616a:	0a1a      	lsrs	r2, r3, #8
   1616c:	2312      	movs	r3, #18
   1616e:	18fb      	adds	r3, r7, r3
   16170:	701a      	strb	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   16172:	2300      	movs	r3, #0
   16174:	61bb      	str	r3, [r7, #24]
   16176:	e00d      	b.n	16194 <http_client_callback+0x238>
				write_spi_flash_frm_buf(256);
   16178:	2380      	movs	r3, #128	; 0x80
   1617a:	005b      	lsls	r3, r3, #1
   1617c:	0018      	movs	r0, r3
   1617e:	4b57      	ldr	r3, [pc, #348]	; (162dc <http_client_callback+0x380>)
   16180:	4798      	blx	r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
   16182:	4b55      	ldr	r3, [pc, #340]	; (162d8 <http_client_callback+0x37c>)
   16184:	681b      	ldr	r3, [r3, #0]
   16186:	1c5a      	adds	r2, r3, #1
   16188:	32ff      	adds	r2, #255	; 0xff
   1618a:	4b53      	ldr	r3, [pc, #332]	; (162d8 <http_client_callback+0x37c>)
   1618c:	601a      	str	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   1618e:	69bb      	ldr	r3, [r7, #24]
   16190:	3301      	adds	r3, #1
   16192:	61bb      	str	r3, [r7, #24]
   16194:	2312      	movs	r3, #18
   16196:	18fb      	adds	r3, r7, r3
   16198:	781a      	ldrb	r2, [r3, #0]
   1619a:	69bb      	ldr	r3, [r7, #24]
   1619c:	429a      	cmp	r2, r3
   1619e:	dceb      	bgt.n	16178 <http_client_callback+0x21c>
			}
			http_buf_read_ptr = 0;
   161a0:	4b4d      	ldr	r3, [pc, #308]	; (162d8 <http_client_callback+0x37c>)
   161a2:	2200      	movs	r2, #0
   161a4:	601a      	str	r2, [r3, #0]
			n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
   161a6:	4b48      	ldr	r3, [pc, #288]	; (162c8 <http_client_callback+0x36c>)
   161a8:	681a      	ldr	r2, [r3, #0]
   161aa:	4b4b      	ldr	r3, [pc, #300]	; (162d8 <http_client_callback+0x37c>)
   161ac:	681b      	ldr	r3, [r3, #0]
   161ae:	1ad3      	subs	r3, r2, r3
   161b0:	0a1a      	lsrs	r2, r3, #8
   161b2:	2312      	movs	r3, #18
   161b4:	18fb      	adds	r3, r7, r3
   161b6:	701a      	strb	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   161b8:	2300      	movs	r3, #0
   161ba:	617b      	str	r3, [r7, #20]
   161bc:	e00d      	b.n	161da <http_client_callback+0x27e>
				write_spi_flash_frm_buf(256);
   161be:	2380      	movs	r3, #128	; 0x80
   161c0:	005b      	lsls	r3, r3, #1
   161c2:	0018      	movs	r0, r3
   161c4:	4b45      	ldr	r3, [pc, #276]	; (162dc <http_client_callback+0x380>)
   161c6:	4798      	blx	r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
   161c8:	4b43      	ldr	r3, [pc, #268]	; (162d8 <http_client_callback+0x37c>)
   161ca:	681b      	ldr	r3, [r3, #0]
   161cc:	1c5a      	adds	r2, r3, #1
   161ce:	32ff      	adds	r2, #255	; 0xff
   161d0:	4b41      	ldr	r3, [pc, #260]	; (162d8 <http_client_callback+0x37c>)
   161d2:	601a      	str	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   161d4:	697b      	ldr	r3, [r7, #20]
   161d6:	3301      	adds	r3, #1
   161d8:	617b      	str	r3, [r7, #20]
   161da:	2312      	movs	r3, #18
   161dc:	18fb      	adds	r3, r7, r3
   161de:	781a      	ldrb	r2, [r3, #0]
   161e0:	697b      	ldr	r3, [r7, #20]
   161e2:	429a      	cmp	r2, r3
   161e4:	dceb      	bgt.n	161be <http_client_callback+0x262>
			}
		}
		
		
		if (data->recv_chunked_data.is_complete) {
   161e6:	687b      	ldr	r3, [r7, #4]
   161e8:	7a1b      	ldrb	r3, [r3, #8]
   161ea:	2b00      	cmp	r3, #0
   161ec:	d044      	beq.n	16278 <http_client_callback+0x31c>
			add_state(COMPLETED);
   161ee:	2010      	movs	r0, #16
   161f0:	4b28      	ldr	r3, [pc, #160]	; (16294 <http_client_callback+0x338>)
   161f2:	4798      	blx	r3
			if  (http_buf_write_ptr < http_buf_read_ptr){
   161f4:	4b34      	ldr	r3, [pc, #208]	; (162c8 <http_client_callback+0x36c>)
   161f6:	681a      	ldr	r2, [r3, #0]
   161f8:	4b37      	ldr	r3, [pc, #220]	; (162d8 <http_client_callback+0x37c>)
   161fa:	681b      	ldr	r3, [r3, #0]
   161fc:	429a      	cmp	r2, r3
   161fe:	d20b      	bcs.n	16218 <http_client_callback+0x2bc>
				http_buf_read_ptr =0;
   16200:	4b35      	ldr	r3, [pc, #212]	; (162d8 <http_client_callback+0x37c>)
   16202:	2200      	movs	r2, #0
   16204:	601a      	str	r2, [r3, #0]
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
   16206:	4b30      	ldr	r3, [pc, #192]	; (162c8 <http_client_callback+0x36c>)
   16208:	681a      	ldr	r2, [r3, #0]
   1620a:	4b33      	ldr	r3, [pc, #204]	; (162d8 <http_client_callback+0x37c>)
   1620c:	681b      	ldr	r3, [r3, #0]
   1620e:	1ad3      	subs	r3, r2, r3
   16210:	0018      	movs	r0, r3
   16212:	4b32      	ldr	r3, [pc, #200]	; (162dc <http_client_callback+0x380>)
   16214:	4798      	blx	r3
			}
			else if(http_buf_write_ptr > http_buf_read_ptr){
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
			}
		}
		break;
   16216:	e02f      	b.n	16278 <http_client_callback+0x31c>
			else if(http_buf_write_ptr > http_buf_read_ptr){
   16218:	4b2b      	ldr	r3, [pc, #172]	; (162c8 <http_client_callback+0x36c>)
   1621a:	681a      	ldr	r2, [r3, #0]
   1621c:	4b2e      	ldr	r3, [pc, #184]	; (162d8 <http_client_callback+0x37c>)
   1621e:	681b      	ldr	r3, [r3, #0]
   16220:	429a      	cmp	r2, r3
   16222:	d929      	bls.n	16278 <http_client_callback+0x31c>
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
   16224:	4b28      	ldr	r3, [pc, #160]	; (162c8 <http_client_callback+0x36c>)
   16226:	681a      	ldr	r2, [r3, #0]
   16228:	4b2b      	ldr	r3, [pc, #172]	; (162d8 <http_client_callback+0x37c>)
   1622a:	681b      	ldr	r3, [r3, #0]
   1622c:	1ad3      	subs	r3, r2, r3
   1622e:	0018      	movs	r0, r3
   16230:	4b2a      	ldr	r3, [pc, #168]	; (162dc <http_client_callback+0x380>)
   16232:	4798      	blx	r3
		break;
   16234:	e020      	b.n	16278 <http_client_callback+0x31c>

	case HTTP_CLIENT_CALLBACK_DISCONNECTED:
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   16236:	687b      	ldr	r3, [r7, #4]
   16238:	681a      	ldr	r2, [r3, #0]
   1623a:	4b29      	ldr	r3, [pc, #164]	; (162e0 <http_client_callback+0x384>)
   1623c:	0011      	movs	r1, r2
   1623e:	0018      	movs	r0, r3
   16240:	4b16      	ldr	r3, [pc, #88]	; (1629c <http_client_callback+0x340>)
   16242:	4798      	blx	r3

		/* If disconnect reason is equal to -ECONNRESET(-104),
		 * It means the server has closed the connection (timeout).
		 * This is normal operation.
		 */
		if (data->disconnected.reason == -EAGAIN) {
   16244:	687b      	ldr	r3, [r7, #4]
   16246:	681b      	ldr	r3, [r3, #0]
   16248:	330b      	adds	r3, #11
   1624a:	d117      	bne.n	1627c <http_client_callback+0x320>
			/* Server has not responded. Retry immediately. */
			if (is_state_set(DOWNLOADING)) {
   1624c:	2008      	movs	r0, #8
   1624e:	4b25      	ldr	r3, [pc, #148]	; (162e4 <http_client_callback+0x388>)
   16250:	4798      	blx	r3
   16252:	1e03      	subs	r3, r0, #0
   16254:	d002      	beq.n	1625c <http_client_callback+0x300>
				//f_close(&file_object);
				clear_state(DOWNLOADING);
   16256:	2008      	movs	r0, #8
   16258:	4b23      	ldr	r3, [pc, #140]	; (162e8 <http_client_callback+0x38c>)
   1625a:	4798      	blx	r3
			}

			if (is_state_set(GET_REQUESTED)) {
   1625c:	2004      	movs	r0, #4
   1625e:	4b21      	ldr	r3, [pc, #132]	; (162e4 <http_client_callback+0x388>)
   16260:	4798      	blx	r3
   16262:	1e03      	subs	r3, r0, #0
   16264:	d002      	beq.n	1626c <http_client_callback+0x310>
				clear_state(GET_REQUESTED);
   16266:	2004      	movs	r0, #4
   16268:	4b1f      	ldr	r3, [pc, #124]	; (162e8 <http_client_callback+0x38c>)
   1626a:	4798      	blx	r3
			}

			start_download();
   1626c:	4b1f      	ldr	r3, [pc, #124]	; (162ec <http_client_callback+0x390>)
   1626e:	4798      	blx	r3
		}

		break;
   16270:	46c0      	nop			; (mov r8, r8)
   16272:	e003      	b.n	1627c <http_client_callback+0x320>
		break;
   16274:	46c0      	nop			; (mov r8, r8)
   16276:	e002      	b.n	1627e <http_client_callback+0x322>
		break;
   16278:	46c0      	nop			; (mov r8, r8)
   1627a:	e000      	b.n	1627e <http_client_callback+0x322>
		break;
   1627c:	46c0      	nop			; (mov r8, r8)
	}
}
   1627e:	46bd      	mov	sp, r7
   16280:	b008      	add	sp, #32
   16282:	bd80      	pop	{r7, pc}
   16284:	00019c40 	.word	0x00019c40
   16288:	000198e0 	.word	0x000198e0
   1628c:	00016e85 	.word	0x00016e85
   16290:	00019918 	.word	0x00019918
   16294:	00015dc5 	.word	0x00015dc5
   16298:	00019944 	.word	0x00019944
   1629c:	00016d69 	.word	0x00016d69
   162a0:	00019980 	.word	0x00019980
   162a4:	20000e04 	.word	0x20000e04
   162a8:	000199a0 	.word	0x000199a0
   162ac:	000199b0 	.word	0x000199b0
   162b0:	20000018 	.word	0x20000018
   162b4:	20000e00 	.word	0x20000e00
   162b8:	000154a5 	.word	0x000154a5
   162bc:	000199f4 	.word	0x000199f4
   162c0:	0000dad9 	.word	0x0000dad9
   162c4:	00019a14 	.word	0x00019a14
   162c8:	2000028c 	.word	0x2000028c
   162cc:	2000047c 	.word	0x2000047c
   162d0:	00016bd1 	.word	0x00016bd1
   162d4:	fffff800 	.word	0xfffff800
   162d8:	20000290 	.word	0x20000290
   162dc:	00015e19 	.word	0x00015e19
   162e0:	00019a30 	.word	0x00019a30
   162e4:	00015ded 	.word	0x00015ded
   162e8:	00015d91 	.word	0x00015d91
   162ec:	00015e99 	.word	0x00015e99

000162f0 <socket_cb>:

static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   162f0:	b580      	push	{r7, lr}
   162f2:	b082      	sub	sp, #8
   162f4:	af00      	add	r7, sp, #0
   162f6:	603a      	str	r2, [r7, #0]
   162f8:	1dfb      	adds	r3, r7, #7
   162fa:	1c02      	adds	r2, r0, #0
   162fc:	701a      	strb	r2, [r3, #0]
   162fe:	1dbb      	adds	r3, r7, #6
   16300:	1c0a      	adds	r2, r1, #0
   16302:	701a      	strb	r2, [r3, #0]
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   16304:	683a      	ldr	r2, [r7, #0]
   16306:	1dbb      	adds	r3, r7, #6
   16308:	7819      	ldrb	r1, [r3, #0]
   1630a:	1dfb      	adds	r3, r7, #7
   1630c:	781b      	ldrb	r3, [r3, #0]
   1630e:	b25b      	sxtb	r3, r3
   16310:	0018      	movs	r0, r3
   16312:	4b03      	ldr	r3, [pc, #12]	; (16320 <socket_cb+0x30>)
   16314:	4798      	blx	r3
}
   16316:	46c0      	nop			; (mov r8, r8)
   16318:	46bd      	mov	sp, r7
   1631a:	b002      	add	sp, #8
   1631c:	bd80      	pop	{r7, pc}
   1631e:	46c0      	nop			; (mov r8, r8)
   16320:	0000f115 	.word	0x0000f115

00016324 <resolve_cb>:

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   16324:	b5b0      	push	{r4, r5, r7, lr}
   16326:	b084      	sub	sp, #16
   16328:	af02      	add	r7, sp, #8
   1632a:	6078      	str	r0, [r7, #4]
   1632c:	6039      	str	r1, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   1632e:	683b      	ldr	r3, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   16330:	22ff      	movs	r2, #255	; 0xff
   16332:	4013      	ands	r3, r2
   16334:	001c      	movs	r4, r3
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   16336:	683b      	ldr	r3, [r7, #0]
   16338:	0a1b      	lsrs	r3, r3, #8
   1633a:	001a      	movs	r2, r3
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   1633c:	23ff      	movs	r3, #255	; 0xff
   1633e:	401a      	ands	r2, r3
   16340:	0015      	movs	r5, r2
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   16342:	683b      	ldr	r3, [r7, #0]
   16344:	0c1b      	lsrs	r3, r3, #16
   16346:	001a      	movs	r2, r3
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   16348:	23ff      	movs	r3, #255	; 0xff
   1634a:	4013      	ands	r3, r2
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   1634c:	683a      	ldr	r2, [r7, #0]
   1634e:	0e12      	lsrs	r2, r2, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   16350:	6879      	ldr	r1, [r7, #4]
   16352:	4808      	ldr	r0, [pc, #32]	; (16374 <resolve_cb+0x50>)
   16354:	9201      	str	r2, [sp, #4]
   16356:	9300      	str	r3, [sp, #0]
   16358:	002b      	movs	r3, r5
   1635a:	0022      	movs	r2, r4
   1635c:	4c06      	ldr	r4, [pc, #24]	; (16378 <resolve_cb+0x54>)
   1635e:	47a0      	blx	r4
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   16360:	683a      	ldr	r2, [r7, #0]
   16362:	687b      	ldr	r3, [r7, #4]
   16364:	0011      	movs	r1, r2
   16366:	0018      	movs	r0, r3
   16368:	4b04      	ldr	r3, [pc, #16]	; (1637c <resolve_cb+0x58>)
   1636a:	4798      	blx	r3
}
   1636c:	46c0      	nop			; (mov r8, r8)
   1636e:	46bd      	mov	sp, r7
   16370:	b002      	add	sp, #8
   16372:	bdb0      	pop	{r4, r5, r7, pc}
   16374:	00019a60 	.word	0x00019a60
   16378:	00016d69 	.word	0x00016d69
   1637c:	0000f279 	.word	0x0000f279

00016380 <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   16380:	b590      	push	{r4, r7, lr}
   16382:	b087      	sub	sp, #28
   16384:	af02      	add	r7, sp, #8
   16386:	0002      	movs	r2, r0
   16388:	6039      	str	r1, [r7, #0]
   1638a:	1dfb      	adds	r3, r7, #7
   1638c:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
   1638e:	1dfb      	adds	r3, r7, #7
   16390:	781b      	ldrb	r3, [r3, #0]
   16392:	2b2c      	cmp	r3, #44	; 0x2c
   16394:	d002      	beq.n	1639c <wifi_cb+0x1c>
   16396:	2b32      	cmp	r3, #50	; 0x32
   16398:	d032      	beq.n	16400 <wifi_cb+0x80>
			start_download();

		}

		default:
		break;
   1639a:	e04d      	b.n	16438 <wifi_cb+0xb8>
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   1639c:	683b      	ldr	r3, [r7, #0]
   1639e:	60fb      	str	r3, [r7, #12]
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   163a0:	68fb      	ldr	r3, [r7, #12]
   163a2:	781b      	ldrb	r3, [r3, #0]
   163a4:	2b01      	cmp	r3, #1
   163a6:	d106      	bne.n	163b6 <wifi_cb+0x36>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
   163a8:	4b25      	ldr	r3, [pc, #148]	; (16440 <wifi_cb+0xc0>)
   163aa:	0018      	movs	r0, r3
   163ac:	4b25      	ldr	r3, [pc, #148]	; (16444 <wifi_cb+0xc4>)
   163ae:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
   163b0:	4b25      	ldr	r3, [pc, #148]	; (16448 <wifi_cb+0xc8>)
   163b2:	4798      	blx	r3
			break;
   163b4:	e03f      	b.n	16436 <wifi_cb+0xb6>
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   163b6:	68fb      	ldr	r3, [r7, #12]
   163b8:	781b      	ldrb	r3, [r3, #0]
   163ba:	2b00      	cmp	r3, #0
   163bc:	d13b      	bne.n	16436 <wifi_cb+0xb6>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   163be:	4b23      	ldr	r3, [pc, #140]	; (1644c <wifi_cb+0xcc>)
   163c0:	0018      	movs	r0, r3
   163c2:	4b20      	ldr	r3, [pc, #128]	; (16444 <wifi_cb+0xc4>)
   163c4:	4798      	blx	r3
				clear_state(WIFI_CONNECTED);
   163c6:	2002      	movs	r0, #2
   163c8:	4b21      	ldr	r3, [pc, #132]	; (16450 <wifi_cb+0xd0>)
   163ca:	4798      	blx	r3
				if (is_state_set(DOWNLOADING)) {
   163cc:	2008      	movs	r0, #8
   163ce:	4b21      	ldr	r3, [pc, #132]	; (16454 <wifi_cb+0xd4>)
   163d0:	4798      	blx	r3
   163d2:	1e03      	subs	r3, r0, #0
   163d4:	d002      	beq.n	163dc <wifi_cb+0x5c>
					clear_state(DOWNLOADING);
   163d6:	2008      	movs	r0, #8
   163d8:	4b1d      	ldr	r3, [pc, #116]	; (16450 <wifi_cb+0xd0>)
   163da:	4798      	blx	r3
				if (is_state_set(GET_REQUESTED)) {
   163dc:	2004      	movs	r0, #4
   163de:	4b1d      	ldr	r3, [pc, #116]	; (16454 <wifi_cb+0xd4>)
   163e0:	4798      	blx	r3
   163e2:	1e03      	subs	r3, r0, #0
   163e4:	d002      	beq.n	163ec <wifi_cb+0x6c>
					clear_state(GET_REQUESTED);
   163e6:	2004      	movs	r0, #4
   163e8:	4b19      	ldr	r3, [pc, #100]	; (16450 <wifi_cb+0xd0>)
   163ea:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   163ec:	4a1a      	ldr	r2, [pc, #104]	; (16458 <wifi_cb+0xd8>)
   163ee:	481b      	ldr	r0, [pc, #108]	; (1645c <wifi_cb+0xdc>)
   163f0:	23ff      	movs	r3, #255	; 0xff
   163f2:	9300      	str	r3, [sp, #0]
   163f4:	0013      	movs	r3, r2
   163f6:	2202      	movs	r2, #2
   163f8:	2111      	movs	r1, #17
   163fa:	4c19      	ldr	r4, [pc, #100]	; (16460 <wifi_cb+0xe0>)
   163fc:	47a0      	blx	r4
			break;
   163fe:	e01a      	b.n	16436 <wifi_cb+0xb6>
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   16400:	683b      	ldr	r3, [r7, #0]
   16402:	60bb      	str	r3, [r7, #8]
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16404:	68bb      	ldr	r3, [r7, #8]
   16406:	781b      	ldrb	r3, [r3, #0]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16408:	0019      	movs	r1, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   1640a:	68bb      	ldr	r3, [r7, #8]
   1640c:	3301      	adds	r3, #1
   1640e:	781b      	ldrb	r3, [r3, #0]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16410:	001a      	movs	r2, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16412:	68bb      	ldr	r3, [r7, #8]
   16414:	3302      	adds	r3, #2
   16416:	781b      	ldrb	r3, [r3, #0]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16418:	001c      	movs	r4, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   1641a:	68bb      	ldr	r3, [r7, #8]
   1641c:	3303      	adds	r3, #3
   1641e:	781b      	ldrb	r3, [r3, #0]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16420:	4810      	ldr	r0, [pc, #64]	; (16464 <wifi_cb+0xe4>)
   16422:	9300      	str	r3, [sp, #0]
   16424:	0023      	movs	r3, r4
   16426:	4c10      	ldr	r4, [pc, #64]	; (16468 <wifi_cb+0xe8>)
   16428:	47a0      	blx	r4
			add_state(WIFI_CONNECTED);
   1642a:	2002      	movs	r0, #2
   1642c:	4b0f      	ldr	r3, [pc, #60]	; (1646c <wifi_cb+0xec>)
   1642e:	4798      	blx	r3
			start_download();
   16430:	4b0f      	ldr	r3, [pc, #60]	; (16470 <wifi_cb+0xf0>)
   16432:	4798      	blx	r3
		break;
   16434:	e000      	b.n	16438 <wifi_cb+0xb8>
			break;
   16436:	46c0      	nop			; (mov r8, r8)
	}
}
   16438:	46c0      	nop			; (mov r8, r8)
   1643a:	46bd      	mov	sp, r7
   1643c:	b005      	add	sp, #20
   1643e:	bd90      	pop	{r4, r7, pc}
   16440:	00019a90 	.word	0x00019a90
   16444:	00016e85 	.word	0x00016e85
   16448:	0000a455 	.word	0x0000a455
   1644c:	00019ab0 	.word	0x00019ab0
   16450:	00015d91 	.word	0x00015d91
   16454:	00015ded 	.word	0x00015ded
   16458:	00019ad0 	.word	0x00019ad0
   1645c:	00019adc 	.word	0x00019adc
   16460:	00009f61 	.word	0x00009f61
   16464:	00019af0 	.word	0x00019af0
   16468:	00016d69 	.word	0x00016d69
   1646c:	00015dc5 	.word	0x00015dc5
   16470:	00015e99 	.word	0x00015e99

00016474 <configure_http_client>:

static void configure_http_client(void)
{
   16474:	b580      	push	{r7, lr}
   16476:	b088      	sub	sp, #32
   16478:	af00      	add	r7, sp, #0
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
   1647a:	003b      	movs	r3, r7
   1647c:	0018      	movs	r0, r3
   1647e:	4b12      	ldr	r3, [pc, #72]	; (164c8 <configure_http_client+0x54>)
   16480:	4798      	blx	r3

	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   16482:	003b      	movs	r3, r7
   16484:	2280      	movs	r2, #128	; 0x80
   16486:	00d2      	lsls	r2, r2, #3
   16488:	611a      	str	r2, [r3, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   1648a:	003b      	movs	r3, r7
   1648c:	4a0f      	ldr	r2, [pc, #60]	; (164cc <configure_http_client+0x58>)
   1648e:	605a      	str	r2, [r3, #4]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   16490:	003a      	movs	r2, r7
   16492:	4b0f      	ldr	r3, [pc, #60]	; (164d0 <configure_http_client+0x5c>)
   16494:	0011      	movs	r1, r2
   16496:	0018      	movs	r0, r3
   16498:	4b0e      	ldr	r3, [pc, #56]	; (164d4 <configure_http_client+0x60>)
   1649a:	4798      	blx	r3
   1649c:	0003      	movs	r3, r0
   1649e:	61fb      	str	r3, [r7, #28]
	if (ret < 0) {
   164a0:	69fb      	ldr	r3, [r7, #28]
   164a2:	2b00      	cmp	r3, #0
   164a4:	da06      	bge.n	164b4 <configure_http_client+0x40>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   164a6:	69fa      	ldr	r2, [r7, #28]
   164a8:	4b0b      	ldr	r3, [pc, #44]	; (164d8 <configure_http_client+0x64>)
   164aa:	0011      	movs	r1, r2
   164ac:	0018      	movs	r0, r3
   164ae:	4b0b      	ldr	r3, [pc, #44]	; (164dc <configure_http_client+0x68>)
   164b0:	4798      	blx	r3
		while (1) {
   164b2:	e7fe      	b.n	164b2 <configure_http_client+0x3e>
			} // Loop forever
		}

		http_client_register_callback(&http_client_module_inst, http_client_callback);
   164b4:	4a0a      	ldr	r2, [pc, #40]	; (164e0 <configure_http_client+0x6c>)
   164b6:	4b06      	ldr	r3, [pc, #24]	; (164d0 <configure_http_client+0x5c>)
   164b8:	0011      	movs	r1, r2
   164ba:	0018      	movs	r0, r3
   164bc:	4b09      	ldr	r3, [pc, #36]	; (164e4 <configure_http_client+0x70>)
   164be:	4798      	blx	r3
}
   164c0:	46c0      	nop			; (mov r8, r8)
   164c2:	46bd      	mov	sp, r7
   164c4:	b008      	add	sp, #32
   164c6:	bd80      	pop	{r7, pc}
   164c8:	0000ef3d 	.word	0x0000ef3d
   164cc:	20000c84 	.word	0x20000c84
   164d0:	20000cdc 	.word	0x20000cdc
   164d4:	0000ef89 	.word	0x0000ef89
   164d8:	00019b18 	.word	0x00019b18
   164dc:	00016d69 	.word	0x00016d69
   164e0:	00015f5d 	.word	0x00015f5d
   164e4:	0000f075 	.word	0x0000f075

000164e8 <download_firmware>:

static void download_firmware(unsigned int slot)
{
   164e8:	b590      	push	{r4, r7, lr}
   164ea:	b085      	sub	sp, #20
   164ec:	af02      	add	r7, sp, #8
   164ee:	6078      	str	r0, [r7, #4]
	flash_addr = 0x40000 * slot; //Starting addr on flash where downloaded file is stored
   164f0:	687b      	ldr	r3, [r7, #4]
   164f2:	049a      	lsls	r2, r3, #18
   164f4:	4b4e      	ldr	r3, [pc, #312]	; (16630 <download_firmware+0x148>)
   164f6:	601a      	str	r2, [r3, #0]
	at25dfx_chip_wake(&at25dfx_chip);
   164f8:	4b4e      	ldr	r3, [pc, #312]	; (16634 <download_firmware+0x14c>)
   164fa:	0018      	movs	r0, r3
   164fc:	4b4e      	ldr	r3, [pc, #312]	; (16638 <download_firmware+0x150>)
   164fe:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   16500:	4b4c      	ldr	r3, [pc, #304]	; (16634 <download_firmware+0x14c>)
   16502:	0018      	movs	r0, r3
   16504:	4b4d      	ldr	r3, [pc, #308]	; (1663c <download_firmware+0x154>)
   16506:	4798      	blx	r3
		// Handle missing or non-responsive device
	}
	
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
   16508:	4b4a      	ldr	r3, [pc, #296]	; (16634 <download_firmware+0x14c>)
   1650a:	2100      	movs	r1, #0
   1650c:	0018      	movs	r0, r3
   1650e:	4b4c      	ldr	r3, [pc, #304]	; (16640 <download_firmware+0x158>)
   16510:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr, AT25DFX_BLOCK_SIZE_64KB);	// erase block
   16512:	4b47      	ldr	r3, [pc, #284]	; (16630 <download_firmware+0x148>)
   16514:	6819      	ldr	r1, [r3, #0]
   16516:	4b47      	ldr	r3, [pc, #284]	; (16634 <download_firmware+0x14c>)
   16518:	2202      	movs	r2, #2
   1651a:	0018      	movs	r0, r3
   1651c:	4b49      	ldr	r3, [pc, #292]	; (16644 <download_firmware+0x15c>)
   1651e:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x10000, AT25DFX_BLOCK_SIZE_64KB);
   16520:	4b43      	ldr	r3, [pc, #268]	; (16630 <download_firmware+0x148>)
   16522:	681b      	ldr	r3, [r3, #0]
   16524:	2280      	movs	r2, #128	; 0x80
   16526:	0252      	lsls	r2, r2, #9
   16528:	1899      	adds	r1, r3, r2
   1652a:	4b42      	ldr	r3, [pc, #264]	; (16634 <download_firmware+0x14c>)
   1652c:	2202      	movs	r2, #2
   1652e:	0018      	movs	r0, r3
   16530:	4b44      	ldr	r3, [pc, #272]	; (16644 <download_firmware+0x15c>)
   16532:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x20000, AT25DFX_BLOCK_SIZE_64KB);
   16534:	4b3e      	ldr	r3, [pc, #248]	; (16630 <download_firmware+0x148>)
   16536:	681b      	ldr	r3, [r3, #0]
   16538:	2280      	movs	r2, #128	; 0x80
   1653a:	0292      	lsls	r2, r2, #10
   1653c:	1899      	adds	r1, r3, r2
   1653e:	4b3d      	ldr	r3, [pc, #244]	; (16634 <download_firmware+0x14c>)
   16540:	2202      	movs	r2, #2
   16542:	0018      	movs	r0, r3
   16544:	4b3f      	ldr	r3, [pc, #252]	; (16644 <download_firmware+0x15c>)
   16546:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x30000, AT25DFX_BLOCK_SIZE_64KB);
   16548:	4b39      	ldr	r3, [pc, #228]	; (16630 <download_firmware+0x148>)
   1654a:	681b      	ldr	r3, [r3, #0]
   1654c:	22c0      	movs	r2, #192	; 0xc0
   1654e:	0292      	lsls	r2, r2, #10
   16550:	1899      	adds	r1, r3, r2
   16552:	4b38      	ldr	r3, [pc, #224]	; (16634 <download_firmware+0x14c>)
   16554:	2202      	movs	r2, #2
   16556:	0018      	movs	r0, r3
   16558:	4b3a      	ldr	r3, [pc, #232]	; (16644 <download_firmware+0x15c>)
   1655a:	4798      	blx	r3
	
	/* Connect to router and download stuff and store it in flash */
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   1655c:	4a3a      	ldr	r2, [pc, #232]	; (16648 <download_firmware+0x160>)
   1655e:	4b3b      	ldr	r3, [pc, #236]	; (1664c <download_firmware+0x164>)
   16560:	0011      	movs	r1, r2
   16562:	0018      	movs	r0, r3
   16564:	4b3a      	ldr	r3, [pc, #232]	; (16650 <download_firmware+0x168>)
   16566:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16568:	4a3a      	ldr	r2, [pc, #232]	; (16654 <download_firmware+0x16c>)
   1656a:	4837      	ldr	r0, [pc, #220]	; (16648 <download_firmware+0x160>)
   1656c:	23ff      	movs	r3, #255	; 0xff
   1656e:	9300      	str	r3, [sp, #0]
   16570:	0013      	movs	r3, r2
   16572:	2202      	movs	r2, #2
   16574:	2111      	movs	r1, #17
   16576:	4c38      	ldr	r4, [pc, #224]	; (16658 <download_firmware+0x170>)
   16578:	47a0      	blx	r4
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1657a:	e006      	b.n	1658a <download_firmware+0xa2>
		m2m_wifi_handle_events(NULL);
   1657c:	2000      	movs	r0, #0
   1657e:	4b37      	ldr	r3, [pc, #220]	; (1665c <download_firmware+0x174>)
   16580:	4798      	blx	r3
		sw_timer_task(&swt_module_inst);
   16582:	4b37      	ldr	r3, [pc, #220]	; (16660 <download_firmware+0x178>)
   16584:	0018      	movs	r0, r3
   16586:	4b37      	ldr	r3, [pc, #220]	; (16664 <download_firmware+0x17c>)
   16588:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1658a:	2010      	movs	r0, #16
   1658c:	4b36      	ldr	r3, [pc, #216]	; (16668 <download_firmware+0x180>)
   1658e:	4798      	blx	r3
   16590:	0003      	movs	r3, r0
   16592:	001a      	movs	r2, r3
   16594:	2301      	movs	r3, #1
   16596:	4053      	eors	r3, r2
   16598:	b2db      	uxtb	r3, r3
   1659a:	2b00      	cmp	r3, #0
   1659c:	d009      	beq.n	165b2 <download_firmware+0xca>
   1659e:	2020      	movs	r0, #32
   165a0:	4b31      	ldr	r3, [pc, #196]	; (16668 <download_firmware+0x180>)
   165a2:	4798      	blx	r3
   165a4:	0003      	movs	r3, r0
   165a6:	001a      	movs	r2, r3
   165a8:	2301      	movs	r3, #1
   165aa:	4053      	eors	r3, r2
   165ac:	b2db      	uxtb	r3, r3
   165ae:	2b00      	cmp	r3, #0
   165b0:	d1e4      	bne.n	1657c <download_firmware+0x94>
	}
	printf("download_firmware: done.\r\n");
   165b2:	4b2e      	ldr	r3, [pc, #184]	; (1666c <download_firmware+0x184>)
   165b4:	0018      	movs	r0, r3
   165b6:	4b2e      	ldr	r3, [pc, #184]	; (16670 <download_firmware+0x188>)
   165b8:	4798      	blx	r3
	printf("Calculated CRC: %x\r\n", (uint32_t)crcChecker);
   165ba:	4b2e      	ldr	r3, [pc, #184]	; (16674 <download_firmware+0x18c>)
   165bc:	681a      	ldr	r2, [r3, #0]
   165be:	4b2e      	ldr	r3, [pc, #184]	; (16678 <download_firmware+0x190>)
   165c0:	0011      	movs	r1, r2
   165c2:	0018      	movs	r0, r3
   165c4:	4b22      	ldr	r3, [pc, #136]	; (16650 <download_firmware+0x168>)
   165c6:	4798      	blx	r3
	
	//clear_state(COMPLETED|DOWNLOADING|GET_REQUESTED|CANCELED);
	m2m_wifi_disconnect();
   165c8:	4b2c      	ldr	r3, [pc, #176]	; (1667c <download_firmware+0x194>)
   165ca:	4798      	blx	r3
	download_CRC = true;
   165cc:	4b2c      	ldr	r3, [pc, #176]	; (16680 <download_firmware+0x198>)
   165ce:	2201      	movs	r2, #1
   165d0:	701a      	strb	r2, [r3, #0]
	init_state();
   165d2:	4b2c      	ldr	r3, [pc, #176]	; (16684 <download_firmware+0x19c>)
   165d4:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   165d6:	4a1f      	ldr	r2, [pc, #124]	; (16654 <download_firmware+0x16c>)
   165d8:	481b      	ldr	r0, [pc, #108]	; (16648 <download_firmware+0x160>)
   165da:	23ff      	movs	r3, #255	; 0xff
   165dc:	9300      	str	r3, [sp, #0]
   165de:	0013      	movs	r3, r2
   165e0:	2202      	movs	r2, #2
   165e2:	2111      	movs	r1, #17
   165e4:	4c1c      	ldr	r4, [pc, #112]	; (16658 <download_firmware+0x170>)
   165e6:	47a0      	blx	r4
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   165e8:	e006      	b.n	165f8 <download_firmware+0x110>
		m2m_wifi_handle_events(NULL);
   165ea:	2000      	movs	r0, #0
   165ec:	4b1b      	ldr	r3, [pc, #108]	; (1665c <download_firmware+0x174>)
   165ee:	4798      	blx	r3
		sw_timer_task(&swt_module_inst);
   165f0:	4b1b      	ldr	r3, [pc, #108]	; (16660 <download_firmware+0x178>)
   165f2:	0018      	movs	r0, r3
   165f4:	4b1b      	ldr	r3, [pc, #108]	; (16664 <download_firmware+0x17c>)
   165f6:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   165f8:	2010      	movs	r0, #16
   165fa:	4b1b      	ldr	r3, [pc, #108]	; (16668 <download_firmware+0x180>)
   165fc:	4798      	blx	r3
   165fe:	0003      	movs	r3, r0
   16600:	001a      	movs	r2, r3
   16602:	2301      	movs	r3, #1
   16604:	4053      	eors	r3, r2
   16606:	b2db      	uxtb	r3, r3
   16608:	2b00      	cmp	r3, #0
   1660a:	d009      	beq.n	16620 <download_firmware+0x138>
   1660c:	2020      	movs	r0, #32
   1660e:	4b16      	ldr	r3, [pc, #88]	; (16668 <download_firmware+0x180>)
   16610:	4798      	blx	r3
   16612:	0003      	movs	r3, r0
   16614:	001a      	movs	r2, r3
   16616:	2301      	movs	r3, #1
   16618:	4053      	eors	r3, r2
   1661a:	b2db      	uxtb	r3, r3
   1661c:	2b00      	cmp	r3, #0
   1661e:	d1e4      	bne.n	165ea <download_firmware+0x102>
	}
	
	download_CRC = false;
   16620:	4b17      	ldr	r3, [pc, #92]	; (16680 <download_firmware+0x198>)
   16622:	2200      	movs	r2, #0
   16624:	701a      	strb	r2, [r3, #0]
	//For debugging this shit
	//flash_addr = 0x00000;

}
   16626:	46c0      	nop			; (mov r8, r8)
   16628:	46bd      	mov	sp, r7
   1662a:	b003      	add	sp, #12
   1662c:	bd90      	pop	{r4, r7, pc}
   1662e:	46c0      	nop			; (mov r8, r8)
   16630:	20000478 	.word	0x20000478
   16634:	20000c7c 	.word	0x20000c7c
   16638:	00011979 	.word	0x00011979
   1663c:	000114e9 	.word	0x000114e9
   16640:	00011839 	.word	0x00011839
   16644:	0001173d 	.word	0x0001173d
   16648:	00019adc 	.word	0x00019adc
   1664c:	00019b60 	.word	0x00019b60
   16650:	00016d69 	.word	0x00016d69
   16654:	00019ad0 	.word	0x00019ad0
   16658:	00009f61 	.word	0x00009f61
   1665c:	00009f45 	.word	0x00009f45
   16660:	20000c84 	.word	0x20000c84
   16664:	00010ad5 	.word	0x00010ad5
   16668:	00015ded 	.word	0x00015ded
   1666c:	00019b94 	.word	0x00019b94
   16670:	00016e85 	.word	0x00016e85
   16674:	20000e00 	.word	0x20000e00
   16678:	00019bb0 	.word	0x00019bb0
   1667c:	0000a429 	.word	0x0000a429
   16680:	20000289 	.word	0x20000289
   16684:	00015d7d 	.word	0x00015d7d

00016688 <main>:


int main (void)
{
   16688:	b590      	push	{r4, r7, lr}
   1668a:	b08b      	sub	sp, #44	; 0x2c
   1668c:	af00      	add	r7, sp, #0
	
	tstrWifiInitParam param;
	int8_t ret;
	
	
	system_init();
   1668e:	4b44      	ldr	r3, [pc, #272]	; (167a0 <main+0x118>)
   16690:	4798      	blx	r3
	init_state();
   16692:	4b44      	ldr	r3, [pc, #272]	; (167a4 <main+0x11c>)
   16694:	4798      	blx	r3
	//system_interrupt_enable_global();
	configure_port_pins();
   16696:	4b44      	ldr	r3, [pc, #272]	; (167a8 <main+0x120>)
   16698:	4798      	blx	r3
	//delay_init();
	configure_console();
   1669a:	4b44      	ldr	r3, [pc, #272]	; (167ac <main+0x124>)
   1669c:	4798      	blx	r3
	configure_nvm();
   1669e:	4b44      	ldr	r3, [pc, #272]	; (167b0 <main+0x128>)
   166a0:	4798      	blx	r3
	configure_spi_flash();
   166a2:	4b44      	ldr	r3, [pc, #272]	; (167b4 <main+0x12c>)
   166a4:	4798      	blx	r3
	configure_timer();
   166a6:	4b44      	ldr	r3, [pc, #272]	; (167b8 <main+0x130>)
   166a8:	4798      	blx	r3
	configure_http_client();
   166aa:	4b44      	ldr	r3, [pc, #272]	; (167bc <main+0x134>)
   166ac:	4798      	blx	r3
	nm_bsp_init();
   166ae:	4b44      	ldr	r3, [pc, #272]	; (167c0 <main+0x138>)
   166b0:	4798      	blx	r3
	
	
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   166b2:	230c      	movs	r3, #12
   166b4:	18fb      	adds	r3, r7, r3
   166b6:	2218      	movs	r2, #24
   166b8:	2100      	movs	r1, #0
   166ba:	0018      	movs	r0, r3
   166bc:	4b41      	ldr	r3, [pc, #260]	; (167c4 <main+0x13c>)
   166be:	4798      	blx	r3
	
	param.pfAppWifiCb = wifi_cb;
   166c0:	230c      	movs	r3, #12
   166c2:	18fb      	adds	r3, r7, r3
   166c4:	4a40      	ldr	r2, [pc, #256]	; (167c8 <main+0x140>)
   166c6:	601a      	str	r2, [r3, #0]
	ret = m2m_wifi_init(&param);
   166c8:	2327      	movs	r3, #39	; 0x27
   166ca:	18fc      	adds	r4, r7, r3
   166cc:	230c      	movs	r3, #12
   166ce:	18fb      	adds	r3, r7, r3
   166d0:	0018      	movs	r0, r3
   166d2:	4b3e      	ldr	r3, [pc, #248]	; (167cc <main+0x144>)
   166d4:	4798      	blx	r3
   166d6:	0003      	movs	r3, r0
   166d8:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   166da:	2327      	movs	r3, #39	; 0x27
   166dc:	18fb      	adds	r3, r7, r3
   166de:	781b      	ldrb	r3, [r3, #0]
   166e0:	b25b      	sxtb	r3, r3
   166e2:	2b00      	cmp	r3, #0
   166e4:	d009      	beq.n	166fa <main+0x72>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   166e6:	2327      	movs	r3, #39	; 0x27
   166e8:	18fb      	adds	r3, r7, r3
   166ea:	2200      	movs	r2, #0
   166ec:	569a      	ldrsb	r2, [r3, r2]
   166ee:	4b38      	ldr	r3, [pc, #224]	; (167d0 <main+0x148>)
   166f0:	0011      	movs	r1, r2
   166f2:	0018      	movs	r0, r3
   166f4:	4b37      	ldr	r3, [pc, #220]	; (167d4 <main+0x14c>)
   166f6:	4798      	blx	r3
		while (1) {
   166f8:	e7fe      	b.n	166f8 <main+0x70>
		}
	}
	
	socketInit();
   166fa:	4b37      	ldr	r3, [pc, #220]	; (167d8 <main+0x150>)
   166fc:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
   166fe:	4a37      	ldr	r2, [pc, #220]	; (167dc <main+0x154>)
   16700:	4b37      	ldr	r3, [pc, #220]	; (167e0 <main+0x158>)
   16702:	0011      	movs	r1, r2
   16704:	0018      	movs	r0, r3
   16706:	4b37      	ldr	r3, [pc, #220]	; (167e4 <main+0x15c>)
   16708:	4798      	blx	r3
	write_firmware = false; 
   1670a:	4b37      	ldr	r3, [pc, #220]	; (167e8 <main+0x160>)
   1670c:	2200      	movs	r2, #0
   1670e:	701a      	strb	r2, [r3, #0]
	while (1) 
	{
		if (port_pin_get_input_level(B1) == true) {
   16710:	2037      	movs	r0, #55	; 0x37
   16712:	4b36      	ldr	r3, [pc, #216]	; (167ec <main+0x164>)
   16714:	4798      	blx	r3
   16716:	1e03      	subs	r3, r0, #0
   16718:	d004      	beq.n	16724 <main+0x9c>
			port_pin_set_output_level(LED_0_PIN, false);
   1671a:	2100      	movs	r1, #0
   1671c:	2017      	movs	r0, #23
   1671e:	4b34      	ldr	r3, [pc, #208]	; (167f0 <main+0x168>)
   16720:	4798      	blx	r3
   16722:	e006      	b.n	16732 <main+0xaa>
		}
		else 
		{
			port_pin_set_output_level(LED_0_PIN, true);
   16724:	2101      	movs	r1, #1
   16726:	2017      	movs	r0, #23
   16728:	4b31      	ldr	r3, [pc, #196]	; (167f0 <main+0x168>)
   1672a:	4798      	blx	r3
			write_firmware = true;
   1672c:	4b2e      	ldr	r3, [pc, #184]	; (167e8 <main+0x160>)
   1672e:	2201      	movs	r2, #1
   16730:	701a      	strb	r2, [r3, #0]
		}
		
		// receive command from IBM BlueMix
		//....................
		//write the updated status
		if(write_firmware)
   16732:	4b2d      	ldr	r3, [pc, #180]	; (167e8 <main+0x160>)
   16734:	781b      	ldrb	r3, [r3, #0]
   16736:	2b00      	cmp	r3, #0
   16738:	d0ea      	beq.n	16710 <main+0x88>
		{
			// download firmware into serial flash and upgrade
			Firmware_Status_t fw_status = getFWStat();
   1673a:	1d3b      	adds	r3, r7, #4
   1673c:	0018      	movs	r0, r3
   1673e:	4b2d      	ldr	r3, [pc, #180]	; (167f4 <main+0x16c>)
   16740:	4798      	blx	r3
			if (fw_status.executing_image == 1) {
   16742:	1d3b      	adds	r3, r7, #4
   16744:	791b      	ldrb	r3, [r3, #4]
   16746:	2b01      	cmp	r3, #1
   16748:	d103      	bne.n	16752 <main+0xca>
				fw_status.downloaded_image = 2;
   1674a:	1d3b      	adds	r3, r7, #4
   1674c:	2202      	movs	r2, #2
   1674e:	715a      	strb	r2, [r3, #5]
   16750:	e002      	b.n	16758 <main+0xd0>
			}
			else {
				fw_status.downloaded_image = 1;
   16752:	1d3b      	adds	r3, r7, #4
   16754:	2201      	movs	r2, #1
   16756:	715a      	strb	r2, [r3, #5]
			}
			printf("Executing image: %d, DL to: %d\r\n", fw_status.executing_image, fw_status.downloaded_image);
   16758:	1d3b      	adds	r3, r7, #4
   1675a:	791b      	ldrb	r3, [r3, #4]
   1675c:	0019      	movs	r1, r3
   1675e:	1d3b      	adds	r3, r7, #4
   16760:	795b      	ldrb	r3, [r3, #5]
   16762:	001a      	movs	r2, r3
   16764:	4b24      	ldr	r3, [pc, #144]	; (167f8 <main+0x170>)
   16766:	0018      	movs	r0, r3
   16768:	4b1a      	ldr	r3, [pc, #104]	; (167d4 <main+0x14c>)
   1676a:	4798      	blx	r3
			firstCRC=true;
   1676c:	4b23      	ldr	r3, [pc, #140]	; (167fc <main+0x174>)
   1676e:	2201      	movs	r2, #1
   16770:	701a      	strb	r2, [r3, #0]
			download_firmware(fw_status.downloaded_image);
   16772:	1d3b      	adds	r3, r7, #4
   16774:	795b      	ldrb	r3, [r3, #5]
   16776:	0018      	movs	r0, r3
   16778:	4b21      	ldr	r3, [pc, #132]	; (16800 <main+0x178>)
   1677a:	4798      	blx	r3
			printf("\n\r Main: Done downloading firmware\n\r");
   1677c:	4b21      	ldr	r3, [pc, #132]	; (16804 <main+0x17c>)
   1677e:	0018      	movs	r0, r3
   16780:	4b14      	ldr	r3, [pc, #80]	; (167d4 <main+0x14c>)
   16782:	4798      	blx	r3
			
			//printf("fw_status.writenew_image = %d\n\r before mod\n\r", fw_status.writenew_image);
			*(uint32_t*)fw_status.signature = 0xEFBEADDE; //replace with checksum of downloaded image
   16784:	1d3b      	adds	r3, r7, #4
   16786:	4a20      	ldr	r2, [pc, #128]	; (16808 <main+0x180>)
   16788:	601a      	str	r2, [r3, #0]
 			fw_status.writenew_image = 1;  // write image flag
   1678a:	1d3b      	adds	r3, r7, #4
   1678c:	2201      	movs	r2, #1
   1678e:	719a      	strb	r2, [r3, #6]
			//printf("fw_status.writenew_image = %d\n\r after mod before write\n\r", fw_status.writenew_image);
			writeFWStat(fw_status);
   16790:	1d3b      	adds	r3, r7, #4
   16792:	6818      	ldr	r0, [r3, #0]
   16794:	6859      	ldr	r1, [r3, #4]
   16796:	4b1d      	ldr	r3, [pc, #116]	; (1680c <main+0x184>)
   16798:	4798      	blx	r3
			// reset to begin writing firmware
			system_reset();
   1679a:	4b1d      	ldr	r3, [pc, #116]	; (16810 <main+0x188>)
   1679c:	4798      	blx	r3
		if (port_pin_get_input_level(B1) == true) {
   1679e:	e7b7      	b.n	16710 <main+0x88>
   167a0:	00015395 	.word	0x00015395
   167a4:	00015d7d 	.word	0x00015d7d
   167a8:	00015c65 	.word	0x00015c65
   167ac:	00015a49 	.word	0x00015a49
   167b0:	00015abd 	.word	0x00015abd
   167b4:	00015ca5 	.word	0x00015ca5
   167b8:	00015d41 	.word	0x00015d41
   167bc:	00016475 	.word	0x00016475
   167c0:	000082a1 	.word	0x000082a1
   167c4:	00016c07 	.word	0x00016c07
   167c8:	00016381 	.word	0x00016381
   167cc:	00009d59 	.word	0x00009d59
   167d0:	00019bc8 	.word	0x00019bc8
   167d4:	00016d69 	.word	0x00016d69
   167d8:	0000cf89 	.word	0x0000cf89
   167dc:	00016325 	.word	0x00016325
   167e0:	000162f1 	.word	0x000162f1
   167e4:	0000cfd9 	.word	0x0000cfd9
   167e8:	20000288 	.word	0x20000288
   167ec:	00015579 	.word	0x00015579
   167f0:	000155bd 	.word	0x000155bd
   167f4:	00015ae9 	.word	0x00015ae9
   167f8:	00019bf4 	.word	0x00019bf4
   167fc:	20000018 	.word	0x20000018
   16800:	000164e9 	.word	0x000164e9
   16804:	00019c18 	.word	0x00019c18
   16808:	efbeadde 	.word	0xefbeadde
   1680c:	00015ba9 	.word	0x00015ba9
   16810:	00015611 	.word	0x00015611

00016814 <__udivsi3>:
   16814:	2200      	movs	r2, #0
   16816:	0843      	lsrs	r3, r0, #1
   16818:	428b      	cmp	r3, r1
   1681a:	d374      	bcc.n	16906 <__udivsi3+0xf2>
   1681c:	0903      	lsrs	r3, r0, #4
   1681e:	428b      	cmp	r3, r1
   16820:	d35f      	bcc.n	168e2 <__udivsi3+0xce>
   16822:	0a03      	lsrs	r3, r0, #8
   16824:	428b      	cmp	r3, r1
   16826:	d344      	bcc.n	168b2 <__udivsi3+0x9e>
   16828:	0b03      	lsrs	r3, r0, #12
   1682a:	428b      	cmp	r3, r1
   1682c:	d328      	bcc.n	16880 <__udivsi3+0x6c>
   1682e:	0c03      	lsrs	r3, r0, #16
   16830:	428b      	cmp	r3, r1
   16832:	d30d      	bcc.n	16850 <__udivsi3+0x3c>
   16834:	22ff      	movs	r2, #255	; 0xff
   16836:	0209      	lsls	r1, r1, #8
   16838:	ba12      	rev	r2, r2
   1683a:	0c03      	lsrs	r3, r0, #16
   1683c:	428b      	cmp	r3, r1
   1683e:	d302      	bcc.n	16846 <__udivsi3+0x32>
   16840:	1212      	asrs	r2, r2, #8
   16842:	0209      	lsls	r1, r1, #8
   16844:	d065      	beq.n	16912 <__udivsi3+0xfe>
   16846:	0b03      	lsrs	r3, r0, #12
   16848:	428b      	cmp	r3, r1
   1684a:	d319      	bcc.n	16880 <__udivsi3+0x6c>
   1684c:	e000      	b.n	16850 <__udivsi3+0x3c>
   1684e:	0a09      	lsrs	r1, r1, #8
   16850:	0bc3      	lsrs	r3, r0, #15
   16852:	428b      	cmp	r3, r1
   16854:	d301      	bcc.n	1685a <__udivsi3+0x46>
   16856:	03cb      	lsls	r3, r1, #15
   16858:	1ac0      	subs	r0, r0, r3
   1685a:	4152      	adcs	r2, r2
   1685c:	0b83      	lsrs	r3, r0, #14
   1685e:	428b      	cmp	r3, r1
   16860:	d301      	bcc.n	16866 <__udivsi3+0x52>
   16862:	038b      	lsls	r3, r1, #14
   16864:	1ac0      	subs	r0, r0, r3
   16866:	4152      	adcs	r2, r2
   16868:	0b43      	lsrs	r3, r0, #13
   1686a:	428b      	cmp	r3, r1
   1686c:	d301      	bcc.n	16872 <__udivsi3+0x5e>
   1686e:	034b      	lsls	r3, r1, #13
   16870:	1ac0      	subs	r0, r0, r3
   16872:	4152      	adcs	r2, r2
   16874:	0b03      	lsrs	r3, r0, #12
   16876:	428b      	cmp	r3, r1
   16878:	d301      	bcc.n	1687e <__udivsi3+0x6a>
   1687a:	030b      	lsls	r3, r1, #12
   1687c:	1ac0      	subs	r0, r0, r3
   1687e:	4152      	adcs	r2, r2
   16880:	0ac3      	lsrs	r3, r0, #11
   16882:	428b      	cmp	r3, r1
   16884:	d301      	bcc.n	1688a <__udivsi3+0x76>
   16886:	02cb      	lsls	r3, r1, #11
   16888:	1ac0      	subs	r0, r0, r3
   1688a:	4152      	adcs	r2, r2
   1688c:	0a83      	lsrs	r3, r0, #10
   1688e:	428b      	cmp	r3, r1
   16890:	d301      	bcc.n	16896 <__udivsi3+0x82>
   16892:	028b      	lsls	r3, r1, #10
   16894:	1ac0      	subs	r0, r0, r3
   16896:	4152      	adcs	r2, r2
   16898:	0a43      	lsrs	r3, r0, #9
   1689a:	428b      	cmp	r3, r1
   1689c:	d301      	bcc.n	168a2 <__udivsi3+0x8e>
   1689e:	024b      	lsls	r3, r1, #9
   168a0:	1ac0      	subs	r0, r0, r3
   168a2:	4152      	adcs	r2, r2
   168a4:	0a03      	lsrs	r3, r0, #8
   168a6:	428b      	cmp	r3, r1
   168a8:	d301      	bcc.n	168ae <__udivsi3+0x9a>
   168aa:	020b      	lsls	r3, r1, #8
   168ac:	1ac0      	subs	r0, r0, r3
   168ae:	4152      	adcs	r2, r2
   168b0:	d2cd      	bcs.n	1684e <__udivsi3+0x3a>
   168b2:	09c3      	lsrs	r3, r0, #7
   168b4:	428b      	cmp	r3, r1
   168b6:	d301      	bcc.n	168bc <__udivsi3+0xa8>
   168b8:	01cb      	lsls	r3, r1, #7
   168ba:	1ac0      	subs	r0, r0, r3
   168bc:	4152      	adcs	r2, r2
   168be:	0983      	lsrs	r3, r0, #6
   168c0:	428b      	cmp	r3, r1
   168c2:	d301      	bcc.n	168c8 <__udivsi3+0xb4>
   168c4:	018b      	lsls	r3, r1, #6
   168c6:	1ac0      	subs	r0, r0, r3
   168c8:	4152      	adcs	r2, r2
   168ca:	0943      	lsrs	r3, r0, #5
   168cc:	428b      	cmp	r3, r1
   168ce:	d301      	bcc.n	168d4 <__udivsi3+0xc0>
   168d0:	014b      	lsls	r3, r1, #5
   168d2:	1ac0      	subs	r0, r0, r3
   168d4:	4152      	adcs	r2, r2
   168d6:	0903      	lsrs	r3, r0, #4
   168d8:	428b      	cmp	r3, r1
   168da:	d301      	bcc.n	168e0 <__udivsi3+0xcc>
   168dc:	010b      	lsls	r3, r1, #4
   168de:	1ac0      	subs	r0, r0, r3
   168e0:	4152      	adcs	r2, r2
   168e2:	08c3      	lsrs	r3, r0, #3
   168e4:	428b      	cmp	r3, r1
   168e6:	d301      	bcc.n	168ec <__udivsi3+0xd8>
   168e8:	00cb      	lsls	r3, r1, #3
   168ea:	1ac0      	subs	r0, r0, r3
   168ec:	4152      	adcs	r2, r2
   168ee:	0883      	lsrs	r3, r0, #2
   168f0:	428b      	cmp	r3, r1
   168f2:	d301      	bcc.n	168f8 <__udivsi3+0xe4>
   168f4:	008b      	lsls	r3, r1, #2
   168f6:	1ac0      	subs	r0, r0, r3
   168f8:	4152      	adcs	r2, r2
   168fa:	0843      	lsrs	r3, r0, #1
   168fc:	428b      	cmp	r3, r1
   168fe:	d301      	bcc.n	16904 <__udivsi3+0xf0>
   16900:	004b      	lsls	r3, r1, #1
   16902:	1ac0      	subs	r0, r0, r3
   16904:	4152      	adcs	r2, r2
   16906:	1a41      	subs	r1, r0, r1
   16908:	d200      	bcs.n	1690c <__udivsi3+0xf8>
   1690a:	4601      	mov	r1, r0
   1690c:	4152      	adcs	r2, r2
   1690e:	4610      	mov	r0, r2
   16910:	4770      	bx	lr
   16912:	e7ff      	b.n	16914 <__udivsi3+0x100>
   16914:	b501      	push	{r0, lr}
   16916:	2000      	movs	r0, #0
   16918:	f000 f8f0 	bl	16afc <__aeabi_idiv0>
   1691c:	bd02      	pop	{r1, pc}
   1691e:	46c0      	nop			; (mov r8, r8)

00016920 <__aeabi_uidivmod>:
   16920:	2900      	cmp	r1, #0
   16922:	d0f7      	beq.n	16914 <__udivsi3+0x100>
   16924:	e776      	b.n	16814 <__udivsi3>
   16926:	4770      	bx	lr

00016928 <__divsi3>:
   16928:	4603      	mov	r3, r0
   1692a:	430b      	orrs	r3, r1
   1692c:	d47f      	bmi.n	16a2e <__divsi3+0x106>
   1692e:	2200      	movs	r2, #0
   16930:	0843      	lsrs	r3, r0, #1
   16932:	428b      	cmp	r3, r1
   16934:	d374      	bcc.n	16a20 <__divsi3+0xf8>
   16936:	0903      	lsrs	r3, r0, #4
   16938:	428b      	cmp	r3, r1
   1693a:	d35f      	bcc.n	169fc <__divsi3+0xd4>
   1693c:	0a03      	lsrs	r3, r0, #8
   1693e:	428b      	cmp	r3, r1
   16940:	d344      	bcc.n	169cc <__divsi3+0xa4>
   16942:	0b03      	lsrs	r3, r0, #12
   16944:	428b      	cmp	r3, r1
   16946:	d328      	bcc.n	1699a <__divsi3+0x72>
   16948:	0c03      	lsrs	r3, r0, #16
   1694a:	428b      	cmp	r3, r1
   1694c:	d30d      	bcc.n	1696a <__divsi3+0x42>
   1694e:	22ff      	movs	r2, #255	; 0xff
   16950:	0209      	lsls	r1, r1, #8
   16952:	ba12      	rev	r2, r2
   16954:	0c03      	lsrs	r3, r0, #16
   16956:	428b      	cmp	r3, r1
   16958:	d302      	bcc.n	16960 <__divsi3+0x38>
   1695a:	1212      	asrs	r2, r2, #8
   1695c:	0209      	lsls	r1, r1, #8
   1695e:	d065      	beq.n	16a2c <__divsi3+0x104>
   16960:	0b03      	lsrs	r3, r0, #12
   16962:	428b      	cmp	r3, r1
   16964:	d319      	bcc.n	1699a <__divsi3+0x72>
   16966:	e000      	b.n	1696a <__divsi3+0x42>
   16968:	0a09      	lsrs	r1, r1, #8
   1696a:	0bc3      	lsrs	r3, r0, #15
   1696c:	428b      	cmp	r3, r1
   1696e:	d301      	bcc.n	16974 <__divsi3+0x4c>
   16970:	03cb      	lsls	r3, r1, #15
   16972:	1ac0      	subs	r0, r0, r3
   16974:	4152      	adcs	r2, r2
   16976:	0b83      	lsrs	r3, r0, #14
   16978:	428b      	cmp	r3, r1
   1697a:	d301      	bcc.n	16980 <__divsi3+0x58>
   1697c:	038b      	lsls	r3, r1, #14
   1697e:	1ac0      	subs	r0, r0, r3
   16980:	4152      	adcs	r2, r2
   16982:	0b43      	lsrs	r3, r0, #13
   16984:	428b      	cmp	r3, r1
   16986:	d301      	bcc.n	1698c <__divsi3+0x64>
   16988:	034b      	lsls	r3, r1, #13
   1698a:	1ac0      	subs	r0, r0, r3
   1698c:	4152      	adcs	r2, r2
   1698e:	0b03      	lsrs	r3, r0, #12
   16990:	428b      	cmp	r3, r1
   16992:	d301      	bcc.n	16998 <__divsi3+0x70>
   16994:	030b      	lsls	r3, r1, #12
   16996:	1ac0      	subs	r0, r0, r3
   16998:	4152      	adcs	r2, r2
   1699a:	0ac3      	lsrs	r3, r0, #11
   1699c:	428b      	cmp	r3, r1
   1699e:	d301      	bcc.n	169a4 <__divsi3+0x7c>
   169a0:	02cb      	lsls	r3, r1, #11
   169a2:	1ac0      	subs	r0, r0, r3
   169a4:	4152      	adcs	r2, r2
   169a6:	0a83      	lsrs	r3, r0, #10
   169a8:	428b      	cmp	r3, r1
   169aa:	d301      	bcc.n	169b0 <__divsi3+0x88>
   169ac:	028b      	lsls	r3, r1, #10
   169ae:	1ac0      	subs	r0, r0, r3
   169b0:	4152      	adcs	r2, r2
   169b2:	0a43      	lsrs	r3, r0, #9
   169b4:	428b      	cmp	r3, r1
   169b6:	d301      	bcc.n	169bc <__divsi3+0x94>
   169b8:	024b      	lsls	r3, r1, #9
   169ba:	1ac0      	subs	r0, r0, r3
   169bc:	4152      	adcs	r2, r2
   169be:	0a03      	lsrs	r3, r0, #8
   169c0:	428b      	cmp	r3, r1
   169c2:	d301      	bcc.n	169c8 <__divsi3+0xa0>
   169c4:	020b      	lsls	r3, r1, #8
   169c6:	1ac0      	subs	r0, r0, r3
   169c8:	4152      	adcs	r2, r2
   169ca:	d2cd      	bcs.n	16968 <__divsi3+0x40>
   169cc:	09c3      	lsrs	r3, r0, #7
   169ce:	428b      	cmp	r3, r1
   169d0:	d301      	bcc.n	169d6 <__divsi3+0xae>
   169d2:	01cb      	lsls	r3, r1, #7
   169d4:	1ac0      	subs	r0, r0, r3
   169d6:	4152      	adcs	r2, r2
   169d8:	0983      	lsrs	r3, r0, #6
   169da:	428b      	cmp	r3, r1
   169dc:	d301      	bcc.n	169e2 <__divsi3+0xba>
   169de:	018b      	lsls	r3, r1, #6
   169e0:	1ac0      	subs	r0, r0, r3
   169e2:	4152      	adcs	r2, r2
   169e4:	0943      	lsrs	r3, r0, #5
   169e6:	428b      	cmp	r3, r1
   169e8:	d301      	bcc.n	169ee <__divsi3+0xc6>
   169ea:	014b      	lsls	r3, r1, #5
   169ec:	1ac0      	subs	r0, r0, r3
   169ee:	4152      	adcs	r2, r2
   169f0:	0903      	lsrs	r3, r0, #4
   169f2:	428b      	cmp	r3, r1
   169f4:	d301      	bcc.n	169fa <__divsi3+0xd2>
   169f6:	010b      	lsls	r3, r1, #4
   169f8:	1ac0      	subs	r0, r0, r3
   169fa:	4152      	adcs	r2, r2
   169fc:	08c3      	lsrs	r3, r0, #3
   169fe:	428b      	cmp	r3, r1
   16a00:	d301      	bcc.n	16a06 <__divsi3+0xde>
   16a02:	00cb      	lsls	r3, r1, #3
   16a04:	1ac0      	subs	r0, r0, r3
   16a06:	4152      	adcs	r2, r2
   16a08:	0883      	lsrs	r3, r0, #2
   16a0a:	428b      	cmp	r3, r1
   16a0c:	d301      	bcc.n	16a12 <__divsi3+0xea>
   16a0e:	008b      	lsls	r3, r1, #2
   16a10:	1ac0      	subs	r0, r0, r3
   16a12:	4152      	adcs	r2, r2
   16a14:	0843      	lsrs	r3, r0, #1
   16a16:	428b      	cmp	r3, r1
   16a18:	d301      	bcc.n	16a1e <__divsi3+0xf6>
   16a1a:	004b      	lsls	r3, r1, #1
   16a1c:	1ac0      	subs	r0, r0, r3
   16a1e:	4152      	adcs	r2, r2
   16a20:	1a41      	subs	r1, r0, r1
   16a22:	d200      	bcs.n	16a26 <__divsi3+0xfe>
   16a24:	4601      	mov	r1, r0
   16a26:	4152      	adcs	r2, r2
   16a28:	4610      	mov	r0, r2
   16a2a:	4770      	bx	lr
   16a2c:	e05d      	b.n	16aea <__divsi3+0x1c2>
   16a2e:	0fca      	lsrs	r2, r1, #31
   16a30:	d000      	beq.n	16a34 <__divsi3+0x10c>
   16a32:	4249      	negs	r1, r1
   16a34:	1003      	asrs	r3, r0, #32
   16a36:	d300      	bcc.n	16a3a <__divsi3+0x112>
   16a38:	4240      	negs	r0, r0
   16a3a:	4053      	eors	r3, r2
   16a3c:	2200      	movs	r2, #0
   16a3e:	469c      	mov	ip, r3
   16a40:	0903      	lsrs	r3, r0, #4
   16a42:	428b      	cmp	r3, r1
   16a44:	d32d      	bcc.n	16aa2 <__divsi3+0x17a>
   16a46:	0a03      	lsrs	r3, r0, #8
   16a48:	428b      	cmp	r3, r1
   16a4a:	d312      	bcc.n	16a72 <__divsi3+0x14a>
   16a4c:	22fc      	movs	r2, #252	; 0xfc
   16a4e:	0189      	lsls	r1, r1, #6
   16a50:	ba12      	rev	r2, r2
   16a52:	0a03      	lsrs	r3, r0, #8
   16a54:	428b      	cmp	r3, r1
   16a56:	d30c      	bcc.n	16a72 <__divsi3+0x14a>
   16a58:	0189      	lsls	r1, r1, #6
   16a5a:	1192      	asrs	r2, r2, #6
   16a5c:	428b      	cmp	r3, r1
   16a5e:	d308      	bcc.n	16a72 <__divsi3+0x14a>
   16a60:	0189      	lsls	r1, r1, #6
   16a62:	1192      	asrs	r2, r2, #6
   16a64:	428b      	cmp	r3, r1
   16a66:	d304      	bcc.n	16a72 <__divsi3+0x14a>
   16a68:	0189      	lsls	r1, r1, #6
   16a6a:	d03a      	beq.n	16ae2 <__divsi3+0x1ba>
   16a6c:	1192      	asrs	r2, r2, #6
   16a6e:	e000      	b.n	16a72 <__divsi3+0x14a>
   16a70:	0989      	lsrs	r1, r1, #6
   16a72:	09c3      	lsrs	r3, r0, #7
   16a74:	428b      	cmp	r3, r1
   16a76:	d301      	bcc.n	16a7c <__divsi3+0x154>
   16a78:	01cb      	lsls	r3, r1, #7
   16a7a:	1ac0      	subs	r0, r0, r3
   16a7c:	4152      	adcs	r2, r2
   16a7e:	0983      	lsrs	r3, r0, #6
   16a80:	428b      	cmp	r3, r1
   16a82:	d301      	bcc.n	16a88 <__divsi3+0x160>
   16a84:	018b      	lsls	r3, r1, #6
   16a86:	1ac0      	subs	r0, r0, r3
   16a88:	4152      	adcs	r2, r2
   16a8a:	0943      	lsrs	r3, r0, #5
   16a8c:	428b      	cmp	r3, r1
   16a8e:	d301      	bcc.n	16a94 <__divsi3+0x16c>
   16a90:	014b      	lsls	r3, r1, #5
   16a92:	1ac0      	subs	r0, r0, r3
   16a94:	4152      	adcs	r2, r2
   16a96:	0903      	lsrs	r3, r0, #4
   16a98:	428b      	cmp	r3, r1
   16a9a:	d301      	bcc.n	16aa0 <__divsi3+0x178>
   16a9c:	010b      	lsls	r3, r1, #4
   16a9e:	1ac0      	subs	r0, r0, r3
   16aa0:	4152      	adcs	r2, r2
   16aa2:	08c3      	lsrs	r3, r0, #3
   16aa4:	428b      	cmp	r3, r1
   16aa6:	d301      	bcc.n	16aac <__divsi3+0x184>
   16aa8:	00cb      	lsls	r3, r1, #3
   16aaa:	1ac0      	subs	r0, r0, r3
   16aac:	4152      	adcs	r2, r2
   16aae:	0883      	lsrs	r3, r0, #2
   16ab0:	428b      	cmp	r3, r1
   16ab2:	d301      	bcc.n	16ab8 <__divsi3+0x190>
   16ab4:	008b      	lsls	r3, r1, #2
   16ab6:	1ac0      	subs	r0, r0, r3
   16ab8:	4152      	adcs	r2, r2
   16aba:	d2d9      	bcs.n	16a70 <__divsi3+0x148>
   16abc:	0843      	lsrs	r3, r0, #1
   16abe:	428b      	cmp	r3, r1
   16ac0:	d301      	bcc.n	16ac6 <__divsi3+0x19e>
   16ac2:	004b      	lsls	r3, r1, #1
   16ac4:	1ac0      	subs	r0, r0, r3
   16ac6:	4152      	adcs	r2, r2
   16ac8:	1a41      	subs	r1, r0, r1
   16aca:	d200      	bcs.n	16ace <__divsi3+0x1a6>
   16acc:	4601      	mov	r1, r0
   16ace:	4663      	mov	r3, ip
   16ad0:	4152      	adcs	r2, r2
   16ad2:	105b      	asrs	r3, r3, #1
   16ad4:	4610      	mov	r0, r2
   16ad6:	d301      	bcc.n	16adc <__divsi3+0x1b4>
   16ad8:	4240      	negs	r0, r0
   16ada:	2b00      	cmp	r3, #0
   16adc:	d500      	bpl.n	16ae0 <__divsi3+0x1b8>
   16ade:	4249      	negs	r1, r1
   16ae0:	4770      	bx	lr
   16ae2:	4663      	mov	r3, ip
   16ae4:	105b      	asrs	r3, r3, #1
   16ae6:	d300      	bcc.n	16aea <__divsi3+0x1c2>
   16ae8:	4240      	negs	r0, r0
   16aea:	b501      	push	{r0, lr}
   16aec:	2000      	movs	r0, #0
   16aee:	f000 f805 	bl	16afc <__aeabi_idiv0>
   16af2:	bd02      	pop	{r1, pc}

00016af4 <__aeabi_idivmod>:
   16af4:	2900      	cmp	r1, #0
   16af6:	d0f8      	beq.n	16aea <__divsi3+0x1c2>
   16af8:	e716      	b.n	16928 <__divsi3>
   16afa:	4770      	bx	lr

00016afc <__aeabi_idiv0>:
   16afc:	4770      	bx	lr
   16afe:	46c0      	nop			; (mov r8, r8)

00016b00 <__aeabi_lmul>:
   16b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b02:	46ce      	mov	lr, r9
   16b04:	4647      	mov	r7, r8
   16b06:	0415      	lsls	r5, r2, #16
   16b08:	0c2d      	lsrs	r5, r5, #16
   16b0a:	002e      	movs	r6, r5
   16b0c:	b580      	push	{r7, lr}
   16b0e:	0407      	lsls	r7, r0, #16
   16b10:	0c14      	lsrs	r4, r2, #16
   16b12:	0c3f      	lsrs	r7, r7, #16
   16b14:	4699      	mov	r9, r3
   16b16:	0c03      	lsrs	r3, r0, #16
   16b18:	437e      	muls	r6, r7
   16b1a:	435d      	muls	r5, r3
   16b1c:	4367      	muls	r7, r4
   16b1e:	4363      	muls	r3, r4
   16b20:	197f      	adds	r7, r7, r5
   16b22:	0c34      	lsrs	r4, r6, #16
   16b24:	19e4      	adds	r4, r4, r7
   16b26:	469c      	mov	ip, r3
   16b28:	42a5      	cmp	r5, r4
   16b2a:	d903      	bls.n	16b34 <__aeabi_lmul+0x34>
   16b2c:	2380      	movs	r3, #128	; 0x80
   16b2e:	025b      	lsls	r3, r3, #9
   16b30:	4698      	mov	r8, r3
   16b32:	44c4      	add	ip, r8
   16b34:	464b      	mov	r3, r9
   16b36:	4351      	muls	r1, r2
   16b38:	4343      	muls	r3, r0
   16b3a:	0436      	lsls	r6, r6, #16
   16b3c:	0c36      	lsrs	r6, r6, #16
   16b3e:	0c25      	lsrs	r5, r4, #16
   16b40:	0424      	lsls	r4, r4, #16
   16b42:	4465      	add	r5, ip
   16b44:	19a4      	adds	r4, r4, r6
   16b46:	1859      	adds	r1, r3, r1
   16b48:	1949      	adds	r1, r1, r5
   16b4a:	0020      	movs	r0, r4
   16b4c:	bc0c      	pop	{r2, r3}
   16b4e:	4690      	mov	r8, r2
   16b50:	4699      	mov	r9, r3
   16b52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00016b54 <atoi>:
   16b54:	b510      	push	{r4, lr}
   16b56:	220a      	movs	r2, #10
   16b58:	2100      	movs	r1, #0
   16b5a:	f000 fb6d 	bl	17238 <strtol>
   16b5e:	bd10      	pop	{r4, pc}

00016b60 <__libc_init_array>:
   16b60:	b570      	push	{r4, r5, r6, lr}
   16b62:	2600      	movs	r6, #0
   16b64:	4d0c      	ldr	r5, [pc, #48]	; (16b98 <__libc_init_array+0x38>)
   16b66:	4c0d      	ldr	r4, [pc, #52]	; (16b9c <__libc_init_array+0x3c>)
   16b68:	1b64      	subs	r4, r4, r5
   16b6a:	10a4      	asrs	r4, r4, #2
   16b6c:	42a6      	cmp	r6, r4
   16b6e:	d109      	bne.n	16b84 <__libc_init_array+0x24>
   16b70:	2600      	movs	r6, #0
   16b72:	f003 f941 	bl	19df8 <_init>
   16b76:	4d0a      	ldr	r5, [pc, #40]	; (16ba0 <__libc_init_array+0x40>)
   16b78:	4c0a      	ldr	r4, [pc, #40]	; (16ba4 <__libc_init_array+0x44>)
   16b7a:	1b64      	subs	r4, r4, r5
   16b7c:	10a4      	asrs	r4, r4, #2
   16b7e:	42a6      	cmp	r6, r4
   16b80:	d105      	bne.n	16b8e <__libc_init_array+0x2e>
   16b82:	bd70      	pop	{r4, r5, r6, pc}
   16b84:	00b3      	lsls	r3, r6, #2
   16b86:	58eb      	ldr	r3, [r5, r3]
   16b88:	4798      	blx	r3
   16b8a:	3601      	adds	r6, #1
   16b8c:	e7ee      	b.n	16b6c <__libc_init_array+0xc>
   16b8e:	00b3      	lsls	r3, r6, #2
   16b90:	58eb      	ldr	r3, [r5, r3]
   16b92:	4798      	blx	r3
   16b94:	3601      	adds	r6, #1
   16b96:	e7f2      	b.n	16b7e <__libc_init_array+0x1e>
   16b98:	00019e04 	.word	0x00019e04
   16b9c:	00019e04 	.word	0x00019e04
   16ba0:	00019e04 	.word	0x00019e04
   16ba4:	00019e08 	.word	0x00019e08

00016ba8 <malloc>:
   16ba8:	b510      	push	{r4, lr}
   16baa:	4b03      	ldr	r3, [pc, #12]	; (16bb8 <malloc+0x10>)
   16bac:	0001      	movs	r1, r0
   16bae:	6818      	ldr	r0, [r3, #0]
   16bb0:	f000 f87c 	bl	16cac <_malloc_r>
   16bb4:	bd10      	pop	{r4, pc}
   16bb6:	46c0      	nop			; (mov r8, r8)
   16bb8:	2000001c 	.word	0x2000001c

00016bbc <free>:
   16bbc:	b510      	push	{r4, lr}
   16bbe:	4b03      	ldr	r3, [pc, #12]	; (16bcc <free+0x10>)
   16bc0:	0001      	movs	r1, r0
   16bc2:	6818      	ldr	r0, [r3, #0]
   16bc4:	f000 f828 	bl	16c18 <_free_r>
   16bc8:	bd10      	pop	{r4, pc}
   16bca:	46c0      	nop			; (mov r8, r8)
   16bcc:	2000001c 	.word	0x2000001c

00016bd0 <memcpy>:
   16bd0:	2300      	movs	r3, #0
   16bd2:	b510      	push	{r4, lr}
   16bd4:	429a      	cmp	r2, r3
   16bd6:	d100      	bne.n	16bda <memcpy+0xa>
   16bd8:	bd10      	pop	{r4, pc}
   16bda:	5ccc      	ldrb	r4, [r1, r3]
   16bdc:	54c4      	strb	r4, [r0, r3]
   16bde:	3301      	adds	r3, #1
   16be0:	e7f8      	b.n	16bd4 <memcpy+0x4>

00016be2 <memmove>:
   16be2:	b510      	push	{r4, lr}
   16be4:	4288      	cmp	r0, r1
   16be6:	d902      	bls.n	16bee <memmove+0xc>
   16be8:	188b      	adds	r3, r1, r2
   16bea:	4298      	cmp	r0, r3
   16bec:	d308      	bcc.n	16c00 <memmove+0x1e>
   16bee:	2300      	movs	r3, #0
   16bf0:	429a      	cmp	r2, r3
   16bf2:	d007      	beq.n	16c04 <memmove+0x22>
   16bf4:	5ccc      	ldrb	r4, [r1, r3]
   16bf6:	54c4      	strb	r4, [r0, r3]
   16bf8:	3301      	adds	r3, #1
   16bfa:	e7f9      	b.n	16bf0 <memmove+0xe>
   16bfc:	5c8b      	ldrb	r3, [r1, r2]
   16bfe:	5483      	strb	r3, [r0, r2]
   16c00:	3a01      	subs	r2, #1
   16c02:	d2fb      	bcs.n	16bfc <memmove+0x1a>
   16c04:	bd10      	pop	{r4, pc}

00016c06 <memset>:
   16c06:	0003      	movs	r3, r0
   16c08:	1882      	adds	r2, r0, r2
   16c0a:	4293      	cmp	r3, r2
   16c0c:	d100      	bne.n	16c10 <memset+0xa>
   16c0e:	4770      	bx	lr
   16c10:	7019      	strb	r1, [r3, #0]
   16c12:	3301      	adds	r3, #1
   16c14:	e7f9      	b.n	16c0a <memset+0x4>
	...

00016c18 <_free_r>:
   16c18:	b570      	push	{r4, r5, r6, lr}
   16c1a:	0005      	movs	r5, r0
   16c1c:	2900      	cmp	r1, #0
   16c1e:	d010      	beq.n	16c42 <_free_r+0x2a>
   16c20:	1f0c      	subs	r4, r1, #4
   16c22:	6823      	ldr	r3, [r4, #0]
   16c24:	2b00      	cmp	r3, #0
   16c26:	da00      	bge.n	16c2a <_free_r+0x12>
   16c28:	18e4      	adds	r4, r4, r3
   16c2a:	0028      	movs	r0, r5
   16c2c:	f000 fdec 	bl	17808 <__malloc_lock>
   16c30:	4a1d      	ldr	r2, [pc, #116]	; (16ca8 <_free_r+0x90>)
   16c32:	6813      	ldr	r3, [r2, #0]
   16c34:	2b00      	cmp	r3, #0
   16c36:	d105      	bne.n	16c44 <_free_r+0x2c>
   16c38:	6063      	str	r3, [r4, #4]
   16c3a:	6014      	str	r4, [r2, #0]
   16c3c:	0028      	movs	r0, r5
   16c3e:	f000 fde4 	bl	1780a <__malloc_unlock>
   16c42:	bd70      	pop	{r4, r5, r6, pc}
   16c44:	42a3      	cmp	r3, r4
   16c46:	d909      	bls.n	16c5c <_free_r+0x44>
   16c48:	6821      	ldr	r1, [r4, #0]
   16c4a:	1860      	adds	r0, r4, r1
   16c4c:	4283      	cmp	r3, r0
   16c4e:	d1f3      	bne.n	16c38 <_free_r+0x20>
   16c50:	6818      	ldr	r0, [r3, #0]
   16c52:	685b      	ldr	r3, [r3, #4]
   16c54:	1841      	adds	r1, r0, r1
   16c56:	6021      	str	r1, [r4, #0]
   16c58:	e7ee      	b.n	16c38 <_free_r+0x20>
   16c5a:	0013      	movs	r3, r2
   16c5c:	685a      	ldr	r2, [r3, #4]
   16c5e:	2a00      	cmp	r2, #0
   16c60:	d001      	beq.n	16c66 <_free_r+0x4e>
   16c62:	42a2      	cmp	r2, r4
   16c64:	d9f9      	bls.n	16c5a <_free_r+0x42>
   16c66:	6819      	ldr	r1, [r3, #0]
   16c68:	1858      	adds	r0, r3, r1
   16c6a:	42a0      	cmp	r0, r4
   16c6c:	d10b      	bne.n	16c86 <_free_r+0x6e>
   16c6e:	6820      	ldr	r0, [r4, #0]
   16c70:	1809      	adds	r1, r1, r0
   16c72:	1858      	adds	r0, r3, r1
   16c74:	6019      	str	r1, [r3, #0]
   16c76:	4282      	cmp	r2, r0
   16c78:	d1e0      	bne.n	16c3c <_free_r+0x24>
   16c7a:	6810      	ldr	r0, [r2, #0]
   16c7c:	6852      	ldr	r2, [r2, #4]
   16c7e:	1841      	adds	r1, r0, r1
   16c80:	6019      	str	r1, [r3, #0]
   16c82:	605a      	str	r2, [r3, #4]
   16c84:	e7da      	b.n	16c3c <_free_r+0x24>
   16c86:	42a0      	cmp	r0, r4
   16c88:	d902      	bls.n	16c90 <_free_r+0x78>
   16c8a:	230c      	movs	r3, #12
   16c8c:	602b      	str	r3, [r5, #0]
   16c8e:	e7d5      	b.n	16c3c <_free_r+0x24>
   16c90:	6821      	ldr	r1, [r4, #0]
   16c92:	1860      	adds	r0, r4, r1
   16c94:	4282      	cmp	r2, r0
   16c96:	d103      	bne.n	16ca0 <_free_r+0x88>
   16c98:	6810      	ldr	r0, [r2, #0]
   16c9a:	6852      	ldr	r2, [r2, #4]
   16c9c:	1841      	adds	r1, r0, r1
   16c9e:	6021      	str	r1, [r4, #0]
   16ca0:	6062      	str	r2, [r4, #4]
   16ca2:	605c      	str	r4, [r3, #4]
   16ca4:	e7ca      	b.n	16c3c <_free_r+0x24>
   16ca6:	46c0      	nop			; (mov r8, r8)
   16ca8:	20000298 	.word	0x20000298

00016cac <_malloc_r>:
   16cac:	2303      	movs	r3, #3
   16cae:	b570      	push	{r4, r5, r6, lr}
   16cb0:	1ccd      	adds	r5, r1, #3
   16cb2:	439d      	bics	r5, r3
   16cb4:	3508      	adds	r5, #8
   16cb6:	0006      	movs	r6, r0
   16cb8:	2d0c      	cmp	r5, #12
   16cba:	d21e      	bcs.n	16cfa <_malloc_r+0x4e>
   16cbc:	250c      	movs	r5, #12
   16cbe:	42a9      	cmp	r1, r5
   16cc0:	d81d      	bhi.n	16cfe <_malloc_r+0x52>
   16cc2:	0030      	movs	r0, r6
   16cc4:	f000 fda0 	bl	17808 <__malloc_lock>
   16cc8:	4a25      	ldr	r2, [pc, #148]	; (16d60 <_malloc_r+0xb4>)
   16cca:	6814      	ldr	r4, [r2, #0]
   16ccc:	0021      	movs	r1, r4
   16cce:	2900      	cmp	r1, #0
   16cd0:	d119      	bne.n	16d06 <_malloc_r+0x5a>
   16cd2:	4c24      	ldr	r4, [pc, #144]	; (16d64 <_malloc_r+0xb8>)
   16cd4:	6823      	ldr	r3, [r4, #0]
   16cd6:	2b00      	cmp	r3, #0
   16cd8:	d103      	bne.n	16ce2 <_malloc_r+0x36>
   16cda:	0030      	movs	r0, r6
   16cdc:	f000 f8dc 	bl	16e98 <_sbrk_r>
   16ce0:	6020      	str	r0, [r4, #0]
   16ce2:	0029      	movs	r1, r5
   16ce4:	0030      	movs	r0, r6
   16ce6:	f000 f8d7 	bl	16e98 <_sbrk_r>
   16cea:	1c43      	adds	r3, r0, #1
   16cec:	d12c      	bne.n	16d48 <_malloc_r+0x9c>
   16cee:	230c      	movs	r3, #12
   16cf0:	0030      	movs	r0, r6
   16cf2:	6033      	str	r3, [r6, #0]
   16cf4:	f000 fd89 	bl	1780a <__malloc_unlock>
   16cf8:	e003      	b.n	16d02 <_malloc_r+0x56>
   16cfa:	2d00      	cmp	r5, #0
   16cfc:	dadf      	bge.n	16cbe <_malloc_r+0x12>
   16cfe:	230c      	movs	r3, #12
   16d00:	6033      	str	r3, [r6, #0]
   16d02:	2000      	movs	r0, #0
   16d04:	bd70      	pop	{r4, r5, r6, pc}
   16d06:	680b      	ldr	r3, [r1, #0]
   16d08:	1b5b      	subs	r3, r3, r5
   16d0a:	d41a      	bmi.n	16d42 <_malloc_r+0x96>
   16d0c:	2b0b      	cmp	r3, #11
   16d0e:	d903      	bls.n	16d18 <_malloc_r+0x6c>
   16d10:	600b      	str	r3, [r1, #0]
   16d12:	18cc      	adds	r4, r1, r3
   16d14:	6025      	str	r5, [r4, #0]
   16d16:	e003      	b.n	16d20 <_malloc_r+0x74>
   16d18:	428c      	cmp	r4, r1
   16d1a:	d10e      	bne.n	16d3a <_malloc_r+0x8e>
   16d1c:	6863      	ldr	r3, [r4, #4]
   16d1e:	6013      	str	r3, [r2, #0]
   16d20:	0030      	movs	r0, r6
   16d22:	f000 fd72 	bl	1780a <__malloc_unlock>
   16d26:	0020      	movs	r0, r4
   16d28:	2207      	movs	r2, #7
   16d2a:	300b      	adds	r0, #11
   16d2c:	1d23      	adds	r3, r4, #4
   16d2e:	4390      	bics	r0, r2
   16d30:	1ac3      	subs	r3, r0, r3
   16d32:	d0e7      	beq.n	16d04 <_malloc_r+0x58>
   16d34:	425a      	negs	r2, r3
   16d36:	50e2      	str	r2, [r4, r3]
   16d38:	e7e4      	b.n	16d04 <_malloc_r+0x58>
   16d3a:	684b      	ldr	r3, [r1, #4]
   16d3c:	6063      	str	r3, [r4, #4]
   16d3e:	000c      	movs	r4, r1
   16d40:	e7ee      	b.n	16d20 <_malloc_r+0x74>
   16d42:	000c      	movs	r4, r1
   16d44:	6849      	ldr	r1, [r1, #4]
   16d46:	e7c2      	b.n	16cce <_malloc_r+0x22>
   16d48:	2303      	movs	r3, #3
   16d4a:	1cc4      	adds	r4, r0, #3
   16d4c:	439c      	bics	r4, r3
   16d4e:	42a0      	cmp	r0, r4
   16d50:	d0e0      	beq.n	16d14 <_malloc_r+0x68>
   16d52:	1a21      	subs	r1, r4, r0
   16d54:	0030      	movs	r0, r6
   16d56:	f000 f89f 	bl	16e98 <_sbrk_r>
   16d5a:	1c43      	adds	r3, r0, #1
   16d5c:	d1da      	bne.n	16d14 <_malloc_r+0x68>
   16d5e:	e7c6      	b.n	16cee <_malloc_r+0x42>
   16d60:	20000298 	.word	0x20000298
   16d64:	2000029c 	.word	0x2000029c

00016d68 <iprintf>:
   16d68:	b40f      	push	{r0, r1, r2, r3}
   16d6a:	4b0b      	ldr	r3, [pc, #44]	; (16d98 <iprintf+0x30>)
   16d6c:	b513      	push	{r0, r1, r4, lr}
   16d6e:	681c      	ldr	r4, [r3, #0]
   16d70:	2c00      	cmp	r4, #0
   16d72:	d005      	beq.n	16d80 <iprintf+0x18>
   16d74:	69a3      	ldr	r3, [r4, #24]
   16d76:	2b00      	cmp	r3, #0
   16d78:	d102      	bne.n	16d80 <iprintf+0x18>
   16d7a:	0020      	movs	r0, r4
   16d7c:	f000 fc34 	bl	175e8 <__sinit>
   16d80:	ab05      	add	r3, sp, #20
   16d82:	9a04      	ldr	r2, [sp, #16]
   16d84:	68a1      	ldr	r1, [r4, #8]
   16d86:	0020      	movs	r0, r4
   16d88:	9301      	str	r3, [sp, #4]
   16d8a:	f000 fecd 	bl	17b28 <_vfiprintf_r>
   16d8e:	bc16      	pop	{r1, r2, r4}
   16d90:	bc08      	pop	{r3}
   16d92:	b004      	add	sp, #16
   16d94:	4718      	bx	r3
   16d96:	46c0      	nop			; (mov r8, r8)
   16d98:	2000001c 	.word	0x2000001c

00016d9c <putchar>:
   16d9c:	4b08      	ldr	r3, [pc, #32]	; (16dc0 <putchar+0x24>)
   16d9e:	b570      	push	{r4, r5, r6, lr}
   16da0:	681c      	ldr	r4, [r3, #0]
   16da2:	0005      	movs	r5, r0
   16da4:	2c00      	cmp	r4, #0
   16da6:	d005      	beq.n	16db4 <putchar+0x18>
   16da8:	69a3      	ldr	r3, [r4, #24]
   16daa:	2b00      	cmp	r3, #0
   16dac:	d102      	bne.n	16db4 <putchar+0x18>
   16dae:	0020      	movs	r0, r4
   16db0:	f000 fc1a 	bl	175e8 <__sinit>
   16db4:	0029      	movs	r1, r5
   16db6:	68a2      	ldr	r2, [r4, #8]
   16db8:	0020      	movs	r0, r4
   16dba:	f001 f959 	bl	18070 <_putc_r>
   16dbe:	bd70      	pop	{r4, r5, r6, pc}
   16dc0:	2000001c 	.word	0x2000001c

00016dc4 <_puts_r>:
   16dc4:	b570      	push	{r4, r5, r6, lr}
   16dc6:	0005      	movs	r5, r0
   16dc8:	000e      	movs	r6, r1
   16dca:	2800      	cmp	r0, #0
   16dcc:	d004      	beq.n	16dd8 <_puts_r+0x14>
   16dce:	6983      	ldr	r3, [r0, #24]
   16dd0:	2b00      	cmp	r3, #0
   16dd2:	d101      	bne.n	16dd8 <_puts_r+0x14>
   16dd4:	f000 fc08 	bl	175e8 <__sinit>
   16dd8:	69ab      	ldr	r3, [r5, #24]
   16dda:	68ac      	ldr	r4, [r5, #8]
   16ddc:	2b00      	cmp	r3, #0
   16dde:	d102      	bne.n	16de6 <_puts_r+0x22>
   16de0:	0028      	movs	r0, r5
   16de2:	f000 fc01 	bl	175e8 <__sinit>
   16de6:	4b24      	ldr	r3, [pc, #144]	; (16e78 <_puts_r+0xb4>)
   16de8:	429c      	cmp	r4, r3
   16dea:	d10f      	bne.n	16e0c <_puts_r+0x48>
   16dec:	686c      	ldr	r4, [r5, #4]
   16dee:	89a3      	ldrh	r3, [r4, #12]
   16df0:	071b      	lsls	r3, r3, #28
   16df2:	d502      	bpl.n	16dfa <_puts_r+0x36>
   16df4:	6923      	ldr	r3, [r4, #16]
   16df6:	2b00      	cmp	r3, #0
   16df8:	d120      	bne.n	16e3c <_puts_r+0x78>
   16dfa:	0021      	movs	r1, r4
   16dfc:	0028      	movs	r0, r5
   16dfe:	f000 fa85 	bl	1730c <__swsetup_r>
   16e02:	2800      	cmp	r0, #0
   16e04:	d01a      	beq.n	16e3c <_puts_r+0x78>
   16e06:	2001      	movs	r0, #1
   16e08:	4240      	negs	r0, r0
   16e0a:	bd70      	pop	{r4, r5, r6, pc}
   16e0c:	4b1b      	ldr	r3, [pc, #108]	; (16e7c <_puts_r+0xb8>)
   16e0e:	429c      	cmp	r4, r3
   16e10:	d101      	bne.n	16e16 <_puts_r+0x52>
   16e12:	68ac      	ldr	r4, [r5, #8]
   16e14:	e7eb      	b.n	16dee <_puts_r+0x2a>
   16e16:	4b1a      	ldr	r3, [pc, #104]	; (16e80 <_puts_r+0xbc>)
   16e18:	429c      	cmp	r4, r3
   16e1a:	d1e8      	bne.n	16dee <_puts_r+0x2a>
   16e1c:	68ec      	ldr	r4, [r5, #12]
   16e1e:	e7e6      	b.n	16dee <_puts_r+0x2a>
   16e20:	3b01      	subs	r3, #1
   16e22:	3601      	adds	r6, #1
   16e24:	60a3      	str	r3, [r4, #8]
   16e26:	2b00      	cmp	r3, #0
   16e28:	da04      	bge.n	16e34 <_puts_r+0x70>
   16e2a:	69a2      	ldr	r2, [r4, #24]
   16e2c:	4293      	cmp	r3, r2
   16e2e:	db16      	blt.n	16e5e <_puts_r+0x9a>
   16e30:	290a      	cmp	r1, #10
   16e32:	d014      	beq.n	16e5e <_puts_r+0x9a>
   16e34:	6823      	ldr	r3, [r4, #0]
   16e36:	1c5a      	adds	r2, r3, #1
   16e38:	6022      	str	r2, [r4, #0]
   16e3a:	7019      	strb	r1, [r3, #0]
   16e3c:	7831      	ldrb	r1, [r6, #0]
   16e3e:	68a3      	ldr	r3, [r4, #8]
   16e40:	2900      	cmp	r1, #0
   16e42:	d1ed      	bne.n	16e20 <_puts_r+0x5c>
   16e44:	3b01      	subs	r3, #1
   16e46:	60a3      	str	r3, [r4, #8]
   16e48:	2b00      	cmp	r3, #0
   16e4a:	da0f      	bge.n	16e6c <_puts_r+0xa8>
   16e4c:	0022      	movs	r2, r4
   16e4e:	310a      	adds	r1, #10
   16e50:	0028      	movs	r0, r5
   16e52:	f000 fa05 	bl	17260 <__swbuf_r>
   16e56:	1c43      	adds	r3, r0, #1
   16e58:	d0d5      	beq.n	16e06 <_puts_r+0x42>
   16e5a:	200a      	movs	r0, #10
   16e5c:	e7d5      	b.n	16e0a <_puts_r+0x46>
   16e5e:	0022      	movs	r2, r4
   16e60:	0028      	movs	r0, r5
   16e62:	f000 f9fd 	bl	17260 <__swbuf_r>
   16e66:	1c43      	adds	r3, r0, #1
   16e68:	d1e8      	bne.n	16e3c <_puts_r+0x78>
   16e6a:	e7cc      	b.n	16e06 <_puts_r+0x42>
   16e6c:	200a      	movs	r0, #10
   16e6e:	6823      	ldr	r3, [r4, #0]
   16e70:	1c5a      	adds	r2, r3, #1
   16e72:	6022      	str	r2, [r4, #0]
   16e74:	7018      	strb	r0, [r3, #0]
   16e76:	e7c8      	b.n	16e0a <_puts_r+0x46>
   16e78:	00019c78 	.word	0x00019c78
   16e7c:	00019c98 	.word	0x00019c98
   16e80:	00019c58 	.word	0x00019c58

00016e84 <puts>:
   16e84:	b510      	push	{r4, lr}
   16e86:	4b03      	ldr	r3, [pc, #12]	; (16e94 <puts+0x10>)
   16e88:	0001      	movs	r1, r0
   16e8a:	6818      	ldr	r0, [r3, #0]
   16e8c:	f7ff ff9a 	bl	16dc4 <_puts_r>
   16e90:	bd10      	pop	{r4, pc}
   16e92:	46c0      	nop			; (mov r8, r8)
   16e94:	2000001c 	.word	0x2000001c

00016e98 <_sbrk_r>:
   16e98:	2300      	movs	r3, #0
   16e9a:	b570      	push	{r4, r5, r6, lr}
   16e9c:	4c06      	ldr	r4, [pc, #24]	; (16eb8 <_sbrk_r+0x20>)
   16e9e:	0005      	movs	r5, r0
   16ea0:	0008      	movs	r0, r1
   16ea2:	6023      	str	r3, [r4, #0]
   16ea4:	f7f9 ff44 	bl	10d30 <_sbrk>
   16ea8:	1c43      	adds	r3, r0, #1
   16eaa:	d103      	bne.n	16eb4 <_sbrk_r+0x1c>
   16eac:	6823      	ldr	r3, [r4, #0]
   16eae:	2b00      	cmp	r3, #0
   16eb0:	d000      	beq.n	16eb4 <_sbrk_r+0x1c>
   16eb2:	602b      	str	r3, [r5, #0]
   16eb4:	bd70      	pop	{r4, r5, r6, pc}
   16eb6:	46c0      	nop			; (mov r8, r8)
   16eb8:	20000e08 	.word	0x20000e08

00016ebc <setbuf>:
   16ebc:	424a      	negs	r2, r1
   16ebe:	414a      	adcs	r2, r1
   16ec0:	2380      	movs	r3, #128	; 0x80
   16ec2:	b510      	push	{r4, lr}
   16ec4:	0052      	lsls	r2, r2, #1
   16ec6:	00db      	lsls	r3, r3, #3
   16ec8:	f000 f802 	bl	16ed0 <setvbuf>
   16ecc:	bd10      	pop	{r4, pc}
	...

00016ed0 <setvbuf>:
   16ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ed2:	001d      	movs	r5, r3
   16ed4:	4b4f      	ldr	r3, [pc, #316]	; (17014 <setvbuf+0x144>)
   16ed6:	b085      	sub	sp, #20
   16ed8:	681e      	ldr	r6, [r3, #0]
   16eda:	0004      	movs	r4, r0
   16edc:	000f      	movs	r7, r1
   16ede:	9200      	str	r2, [sp, #0]
   16ee0:	2e00      	cmp	r6, #0
   16ee2:	d005      	beq.n	16ef0 <setvbuf+0x20>
   16ee4:	69b3      	ldr	r3, [r6, #24]
   16ee6:	2b00      	cmp	r3, #0
   16ee8:	d102      	bne.n	16ef0 <setvbuf+0x20>
   16eea:	0030      	movs	r0, r6
   16eec:	f000 fb7c 	bl	175e8 <__sinit>
   16ef0:	4b49      	ldr	r3, [pc, #292]	; (17018 <setvbuf+0x148>)
   16ef2:	429c      	cmp	r4, r3
   16ef4:	d150      	bne.n	16f98 <setvbuf+0xc8>
   16ef6:	6874      	ldr	r4, [r6, #4]
   16ef8:	9b00      	ldr	r3, [sp, #0]
   16efa:	2b02      	cmp	r3, #2
   16efc:	d005      	beq.n	16f0a <setvbuf+0x3a>
   16efe:	2b01      	cmp	r3, #1
   16f00:	d900      	bls.n	16f04 <setvbuf+0x34>
   16f02:	e084      	b.n	1700e <setvbuf+0x13e>
   16f04:	2d00      	cmp	r5, #0
   16f06:	da00      	bge.n	16f0a <setvbuf+0x3a>
   16f08:	e081      	b.n	1700e <setvbuf+0x13e>
   16f0a:	0021      	movs	r1, r4
   16f0c:	0030      	movs	r0, r6
   16f0e:	f000 fafd 	bl	1750c <_fflush_r>
   16f12:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16f14:	2900      	cmp	r1, #0
   16f16:	d008      	beq.n	16f2a <setvbuf+0x5a>
   16f18:	0023      	movs	r3, r4
   16f1a:	3344      	adds	r3, #68	; 0x44
   16f1c:	4299      	cmp	r1, r3
   16f1e:	d002      	beq.n	16f26 <setvbuf+0x56>
   16f20:	0030      	movs	r0, r6
   16f22:	f7ff fe79 	bl	16c18 <_free_r>
   16f26:	2300      	movs	r3, #0
   16f28:	6363      	str	r3, [r4, #52]	; 0x34
   16f2a:	2300      	movs	r3, #0
   16f2c:	61a3      	str	r3, [r4, #24]
   16f2e:	6063      	str	r3, [r4, #4]
   16f30:	89a3      	ldrh	r3, [r4, #12]
   16f32:	061b      	lsls	r3, r3, #24
   16f34:	d503      	bpl.n	16f3e <setvbuf+0x6e>
   16f36:	6921      	ldr	r1, [r4, #16]
   16f38:	0030      	movs	r0, r6
   16f3a:	f7ff fe6d 	bl	16c18 <_free_r>
   16f3e:	89a3      	ldrh	r3, [r4, #12]
   16f40:	4a36      	ldr	r2, [pc, #216]	; (1701c <setvbuf+0x14c>)
   16f42:	4013      	ands	r3, r2
   16f44:	81a3      	strh	r3, [r4, #12]
   16f46:	9b00      	ldr	r3, [sp, #0]
   16f48:	2b02      	cmp	r3, #2
   16f4a:	d05a      	beq.n	17002 <setvbuf+0x132>
   16f4c:	ab03      	add	r3, sp, #12
   16f4e:	aa02      	add	r2, sp, #8
   16f50:	0021      	movs	r1, r4
   16f52:	0030      	movs	r0, r6
   16f54:	f000 fbe0 	bl	17718 <__swhatbuf_r>
   16f58:	89a3      	ldrh	r3, [r4, #12]
   16f5a:	4318      	orrs	r0, r3
   16f5c:	81a0      	strh	r0, [r4, #12]
   16f5e:	2d00      	cmp	r5, #0
   16f60:	d124      	bne.n	16fac <setvbuf+0xdc>
   16f62:	9d02      	ldr	r5, [sp, #8]
   16f64:	0028      	movs	r0, r5
   16f66:	f7ff fe1f 	bl	16ba8 <malloc>
   16f6a:	9501      	str	r5, [sp, #4]
   16f6c:	1e07      	subs	r7, r0, #0
   16f6e:	d142      	bne.n	16ff6 <setvbuf+0x126>
   16f70:	9b02      	ldr	r3, [sp, #8]
   16f72:	9301      	str	r3, [sp, #4]
   16f74:	42ab      	cmp	r3, r5
   16f76:	d139      	bne.n	16fec <setvbuf+0x11c>
   16f78:	2001      	movs	r0, #1
   16f7a:	4240      	negs	r0, r0
   16f7c:	2302      	movs	r3, #2
   16f7e:	89a2      	ldrh	r2, [r4, #12]
   16f80:	4313      	orrs	r3, r2
   16f82:	81a3      	strh	r3, [r4, #12]
   16f84:	2300      	movs	r3, #0
   16f86:	60a3      	str	r3, [r4, #8]
   16f88:	0023      	movs	r3, r4
   16f8a:	3347      	adds	r3, #71	; 0x47
   16f8c:	6023      	str	r3, [r4, #0]
   16f8e:	6123      	str	r3, [r4, #16]
   16f90:	2301      	movs	r3, #1
   16f92:	6163      	str	r3, [r4, #20]
   16f94:	b005      	add	sp, #20
   16f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16f98:	4b21      	ldr	r3, [pc, #132]	; (17020 <setvbuf+0x150>)
   16f9a:	429c      	cmp	r4, r3
   16f9c:	d101      	bne.n	16fa2 <setvbuf+0xd2>
   16f9e:	68b4      	ldr	r4, [r6, #8]
   16fa0:	e7aa      	b.n	16ef8 <setvbuf+0x28>
   16fa2:	4b20      	ldr	r3, [pc, #128]	; (17024 <setvbuf+0x154>)
   16fa4:	429c      	cmp	r4, r3
   16fa6:	d1a7      	bne.n	16ef8 <setvbuf+0x28>
   16fa8:	68f4      	ldr	r4, [r6, #12]
   16faa:	e7a5      	b.n	16ef8 <setvbuf+0x28>
   16fac:	2f00      	cmp	r7, #0
   16fae:	d0d9      	beq.n	16f64 <setvbuf+0x94>
   16fb0:	69b3      	ldr	r3, [r6, #24]
   16fb2:	2b00      	cmp	r3, #0
   16fb4:	d102      	bne.n	16fbc <setvbuf+0xec>
   16fb6:	0030      	movs	r0, r6
   16fb8:	f000 fb16 	bl	175e8 <__sinit>
   16fbc:	9b00      	ldr	r3, [sp, #0]
   16fbe:	2b01      	cmp	r3, #1
   16fc0:	d103      	bne.n	16fca <setvbuf+0xfa>
   16fc2:	89a3      	ldrh	r3, [r4, #12]
   16fc4:	9a00      	ldr	r2, [sp, #0]
   16fc6:	431a      	orrs	r2, r3
   16fc8:	81a2      	strh	r2, [r4, #12]
   16fca:	2008      	movs	r0, #8
   16fcc:	89a3      	ldrh	r3, [r4, #12]
   16fce:	6027      	str	r7, [r4, #0]
   16fd0:	6127      	str	r7, [r4, #16]
   16fd2:	6165      	str	r5, [r4, #20]
   16fd4:	4018      	ands	r0, r3
   16fd6:	d018      	beq.n	1700a <setvbuf+0x13a>
   16fd8:	2001      	movs	r0, #1
   16fda:	4018      	ands	r0, r3
   16fdc:	2300      	movs	r3, #0
   16fde:	4298      	cmp	r0, r3
   16fe0:	d011      	beq.n	17006 <setvbuf+0x136>
   16fe2:	426d      	negs	r5, r5
   16fe4:	60a3      	str	r3, [r4, #8]
   16fe6:	61a5      	str	r5, [r4, #24]
   16fe8:	0018      	movs	r0, r3
   16fea:	e7d3      	b.n	16f94 <setvbuf+0xc4>
   16fec:	9801      	ldr	r0, [sp, #4]
   16fee:	f7ff fddb 	bl	16ba8 <malloc>
   16ff2:	1e07      	subs	r7, r0, #0
   16ff4:	d0c0      	beq.n	16f78 <setvbuf+0xa8>
   16ff6:	2380      	movs	r3, #128	; 0x80
   16ff8:	89a2      	ldrh	r2, [r4, #12]
   16ffa:	9d01      	ldr	r5, [sp, #4]
   16ffc:	4313      	orrs	r3, r2
   16ffe:	81a3      	strh	r3, [r4, #12]
   17000:	e7d6      	b.n	16fb0 <setvbuf+0xe0>
   17002:	2000      	movs	r0, #0
   17004:	e7ba      	b.n	16f7c <setvbuf+0xac>
   17006:	60a5      	str	r5, [r4, #8]
   17008:	e7c4      	b.n	16f94 <setvbuf+0xc4>
   1700a:	60a0      	str	r0, [r4, #8]
   1700c:	e7c2      	b.n	16f94 <setvbuf+0xc4>
   1700e:	2001      	movs	r0, #1
   17010:	4240      	negs	r0, r0
   17012:	e7bf      	b.n	16f94 <setvbuf+0xc4>
   17014:	2000001c 	.word	0x2000001c
   17018:	00019c78 	.word	0x00019c78
   1701c:	fffff35c 	.word	0xfffff35c
   17020:	00019c98 	.word	0x00019c98
   17024:	00019c58 	.word	0x00019c58

00017028 <siprintf>:
   17028:	b40e      	push	{r1, r2, r3}
   1702a:	b510      	push	{r4, lr}
   1702c:	b09d      	sub	sp, #116	; 0x74
   1702e:	a902      	add	r1, sp, #8
   17030:	9002      	str	r0, [sp, #8]
   17032:	6108      	str	r0, [r1, #16]
   17034:	480b      	ldr	r0, [pc, #44]	; (17064 <siprintf+0x3c>)
   17036:	2482      	movs	r4, #130	; 0x82
   17038:	6088      	str	r0, [r1, #8]
   1703a:	6148      	str	r0, [r1, #20]
   1703c:	2001      	movs	r0, #1
   1703e:	4240      	negs	r0, r0
   17040:	ab1f      	add	r3, sp, #124	; 0x7c
   17042:	81c8      	strh	r0, [r1, #14]
   17044:	4808      	ldr	r0, [pc, #32]	; (17068 <siprintf+0x40>)
   17046:	cb04      	ldmia	r3!, {r2}
   17048:	00a4      	lsls	r4, r4, #2
   1704a:	6800      	ldr	r0, [r0, #0]
   1704c:	9301      	str	r3, [sp, #4]
   1704e:	818c      	strh	r4, [r1, #12]
   17050:	f000 fc3e 	bl	178d0 <_svfiprintf_r>
   17054:	2300      	movs	r3, #0
   17056:	9a02      	ldr	r2, [sp, #8]
   17058:	7013      	strb	r3, [r2, #0]
   1705a:	b01d      	add	sp, #116	; 0x74
   1705c:	bc10      	pop	{r4}
   1705e:	bc08      	pop	{r3}
   17060:	b003      	add	sp, #12
   17062:	4718      	bx	r3
   17064:	7fffffff 	.word	0x7fffffff
   17068:	2000001c 	.word	0x2000001c

0001706c <strcmp>:
   1706c:	7802      	ldrb	r2, [r0, #0]
   1706e:	780b      	ldrb	r3, [r1, #0]
   17070:	2a00      	cmp	r2, #0
   17072:	d003      	beq.n	1707c <strcmp+0x10>
   17074:	3001      	adds	r0, #1
   17076:	3101      	adds	r1, #1
   17078:	429a      	cmp	r2, r3
   1707a:	d0f7      	beq.n	1706c <strcmp>
   1707c:	1ad0      	subs	r0, r2, r3
   1707e:	4770      	bx	lr

00017080 <strcpy>:
   17080:	1c03      	adds	r3, r0, #0
   17082:	780a      	ldrb	r2, [r1, #0]
   17084:	3101      	adds	r1, #1
   17086:	701a      	strb	r2, [r3, #0]
   17088:	3301      	adds	r3, #1
   1708a:	2a00      	cmp	r2, #0
   1708c:	d1f9      	bne.n	17082 <strcpy+0x2>
   1708e:	4770      	bx	lr

00017090 <strdup>:
   17090:	b510      	push	{r4, lr}
   17092:	4b03      	ldr	r3, [pc, #12]	; (170a0 <strdup+0x10>)
   17094:	0001      	movs	r1, r0
   17096:	6818      	ldr	r0, [r3, #0]
   17098:	f000 f804 	bl	170a4 <_strdup_r>
   1709c:	bd10      	pop	{r4, pc}
   1709e:	46c0      	nop			; (mov r8, r8)
   170a0:	2000001c 	.word	0x2000001c

000170a4 <_strdup_r>:
   170a4:	b570      	push	{r4, r5, r6, lr}
   170a6:	0005      	movs	r5, r0
   170a8:	0008      	movs	r0, r1
   170aa:	000e      	movs	r6, r1
   170ac:	f000 f80d 	bl	170ca <strlen>
   170b0:	1c44      	adds	r4, r0, #1
   170b2:	0021      	movs	r1, r4
   170b4:	0028      	movs	r0, r5
   170b6:	f7ff fdf9 	bl	16cac <_malloc_r>
   170ba:	1e05      	subs	r5, r0, #0
   170bc:	d003      	beq.n	170c6 <_strdup_r+0x22>
   170be:	0022      	movs	r2, r4
   170c0:	0031      	movs	r1, r6
   170c2:	f7ff fd85 	bl	16bd0 <memcpy>
   170c6:	0028      	movs	r0, r5
   170c8:	bd70      	pop	{r4, r5, r6, pc}

000170ca <strlen>:
   170ca:	2300      	movs	r3, #0
   170cc:	5cc2      	ldrb	r2, [r0, r3]
   170ce:	3301      	adds	r3, #1
   170d0:	2a00      	cmp	r2, #0
   170d2:	d1fb      	bne.n	170cc <strlen+0x2>
   170d4:	1e58      	subs	r0, r3, #1
   170d6:	4770      	bx	lr

000170d8 <strncmp>:
   170d8:	2300      	movs	r3, #0
   170da:	b530      	push	{r4, r5, lr}
   170dc:	429a      	cmp	r2, r3
   170de:	d00a      	beq.n	170f6 <strncmp+0x1e>
   170e0:	3a01      	subs	r2, #1
   170e2:	5cc4      	ldrb	r4, [r0, r3]
   170e4:	5ccd      	ldrb	r5, [r1, r3]
   170e6:	42ac      	cmp	r4, r5
   170e8:	d104      	bne.n	170f4 <strncmp+0x1c>
   170ea:	429a      	cmp	r2, r3
   170ec:	d002      	beq.n	170f4 <strncmp+0x1c>
   170ee:	3301      	adds	r3, #1
   170f0:	2c00      	cmp	r4, #0
   170f2:	d1f6      	bne.n	170e2 <strncmp+0xa>
   170f4:	1b63      	subs	r3, r4, r5
   170f6:	0018      	movs	r0, r3
   170f8:	bd30      	pop	{r4, r5, pc}

000170fa <strstr>:
   170fa:	b510      	push	{r4, lr}
   170fc:	0002      	movs	r2, r0
   170fe:	7800      	ldrb	r0, [r0, #0]
   17100:	2800      	cmp	r0, #0
   17102:	d104      	bne.n	1710e <strstr+0x14>
   17104:	7809      	ldrb	r1, [r1, #0]
   17106:	2900      	cmp	r1, #0
   17108:	d00d      	beq.n	17126 <strstr+0x2c>
   1710a:	bd10      	pop	{r4, pc}
   1710c:	3201      	adds	r2, #1
   1710e:	7810      	ldrb	r0, [r2, #0]
   17110:	2800      	cmp	r0, #0
   17112:	d0fa      	beq.n	1710a <strstr+0x10>
   17114:	2300      	movs	r3, #0
   17116:	5cc8      	ldrb	r0, [r1, r3]
   17118:	2800      	cmp	r0, #0
   1711a:	d004      	beq.n	17126 <strstr+0x2c>
   1711c:	5cd4      	ldrb	r4, [r2, r3]
   1711e:	4284      	cmp	r4, r0
   17120:	d1f4      	bne.n	1710c <strstr+0x12>
   17122:	3301      	adds	r3, #1
   17124:	e7f7      	b.n	17116 <strstr+0x1c>
   17126:	0010      	movs	r0, r2
   17128:	e7ef      	b.n	1710a <strstr+0x10>
	...

0001712c <_strtol_l.isra.0>:
   1712c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1712e:	001f      	movs	r7, r3
   17130:	000e      	movs	r6, r1
   17132:	b087      	sub	sp, #28
   17134:	9005      	str	r0, [sp, #20]
   17136:	9103      	str	r1, [sp, #12]
   17138:	9202      	str	r2, [sp, #8]
   1713a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1713c:	7834      	ldrb	r4, [r6, #0]
   1713e:	f000 fae8 	bl	17712 <__locale_ctype_ptr_l>
   17142:	2208      	movs	r2, #8
   17144:	1900      	adds	r0, r0, r4
   17146:	7843      	ldrb	r3, [r0, #1]
   17148:	1c75      	adds	r5, r6, #1
   1714a:	4013      	ands	r3, r2
   1714c:	d10c      	bne.n	17168 <_strtol_l.isra.0+0x3c>
   1714e:	2c2d      	cmp	r4, #45	; 0x2d
   17150:	d10c      	bne.n	1716c <_strtol_l.isra.0+0x40>
   17152:	3301      	adds	r3, #1
   17154:	782c      	ldrb	r4, [r5, #0]
   17156:	9301      	str	r3, [sp, #4]
   17158:	1cb5      	adds	r5, r6, #2
   1715a:	2f00      	cmp	r7, #0
   1715c:	d00c      	beq.n	17178 <_strtol_l.isra.0+0x4c>
   1715e:	2f10      	cmp	r7, #16
   17160:	d114      	bne.n	1718c <_strtol_l.isra.0+0x60>
   17162:	2c30      	cmp	r4, #48	; 0x30
   17164:	d00a      	beq.n	1717c <_strtol_l.isra.0+0x50>
   17166:	e011      	b.n	1718c <_strtol_l.isra.0+0x60>
   17168:	002e      	movs	r6, r5
   1716a:	e7e6      	b.n	1713a <_strtol_l.isra.0+0xe>
   1716c:	9301      	str	r3, [sp, #4]
   1716e:	2c2b      	cmp	r4, #43	; 0x2b
   17170:	d1f3      	bne.n	1715a <_strtol_l.isra.0+0x2e>
   17172:	782c      	ldrb	r4, [r5, #0]
   17174:	1cb5      	adds	r5, r6, #2
   17176:	e7f0      	b.n	1715a <_strtol_l.isra.0+0x2e>
   17178:	2c30      	cmp	r4, #48	; 0x30
   1717a:	d12f      	bne.n	171dc <_strtol_l.isra.0+0xb0>
   1717c:	2220      	movs	r2, #32
   1717e:	782b      	ldrb	r3, [r5, #0]
   17180:	4393      	bics	r3, r2
   17182:	2b58      	cmp	r3, #88	; 0x58
   17184:	d151      	bne.n	1722a <_strtol_l.isra.0+0xfe>
   17186:	2710      	movs	r7, #16
   17188:	786c      	ldrb	r4, [r5, #1]
   1718a:	3502      	adds	r5, #2
   1718c:	9b01      	ldr	r3, [sp, #4]
   1718e:	4a29      	ldr	r2, [pc, #164]	; (17234 <_strtol_l.isra.0+0x108>)
   17190:	0039      	movs	r1, r7
   17192:	189e      	adds	r6, r3, r2
   17194:	0030      	movs	r0, r6
   17196:	f7ff fbc3 	bl	16920 <__aeabi_uidivmod>
   1719a:	0030      	movs	r0, r6
   1719c:	9104      	str	r1, [sp, #16]
   1719e:	0039      	movs	r1, r7
   171a0:	f7ff fb38 	bl	16814 <__udivsi3>
   171a4:	2101      	movs	r1, #1
   171a6:	2300      	movs	r3, #0
   171a8:	4249      	negs	r1, r1
   171aa:	0002      	movs	r2, r0
   171ac:	468c      	mov	ip, r1
   171ae:	0018      	movs	r0, r3
   171b0:	0021      	movs	r1, r4
   171b2:	3930      	subs	r1, #48	; 0x30
   171b4:	2909      	cmp	r1, #9
   171b6:	d813      	bhi.n	171e0 <_strtol_l.isra.0+0xb4>
   171b8:	000c      	movs	r4, r1
   171ba:	42a7      	cmp	r7, r4
   171bc:	dd1c      	ble.n	171f8 <_strtol_l.isra.0+0xcc>
   171be:	1c59      	adds	r1, r3, #1
   171c0:	d009      	beq.n	171d6 <_strtol_l.isra.0+0xaa>
   171c2:	4663      	mov	r3, ip
   171c4:	4282      	cmp	r2, r0
   171c6:	d306      	bcc.n	171d6 <_strtol_l.isra.0+0xaa>
   171c8:	d102      	bne.n	171d0 <_strtol_l.isra.0+0xa4>
   171ca:	9904      	ldr	r1, [sp, #16]
   171cc:	42a1      	cmp	r1, r4
   171ce:	db02      	blt.n	171d6 <_strtol_l.isra.0+0xaa>
   171d0:	2301      	movs	r3, #1
   171d2:	4378      	muls	r0, r7
   171d4:	1820      	adds	r0, r4, r0
   171d6:	782c      	ldrb	r4, [r5, #0]
   171d8:	3501      	adds	r5, #1
   171da:	e7e9      	b.n	171b0 <_strtol_l.isra.0+0x84>
   171dc:	270a      	movs	r7, #10
   171de:	e7d5      	b.n	1718c <_strtol_l.isra.0+0x60>
   171e0:	0021      	movs	r1, r4
   171e2:	3941      	subs	r1, #65	; 0x41
   171e4:	2919      	cmp	r1, #25
   171e6:	d801      	bhi.n	171ec <_strtol_l.isra.0+0xc0>
   171e8:	3c37      	subs	r4, #55	; 0x37
   171ea:	e7e6      	b.n	171ba <_strtol_l.isra.0+0x8e>
   171ec:	0021      	movs	r1, r4
   171ee:	3961      	subs	r1, #97	; 0x61
   171f0:	2919      	cmp	r1, #25
   171f2:	d801      	bhi.n	171f8 <_strtol_l.isra.0+0xcc>
   171f4:	3c57      	subs	r4, #87	; 0x57
   171f6:	e7e0      	b.n	171ba <_strtol_l.isra.0+0x8e>
   171f8:	1c5a      	adds	r2, r3, #1
   171fa:	d108      	bne.n	1720e <_strtol_l.isra.0+0xe2>
   171fc:	9a05      	ldr	r2, [sp, #20]
   171fe:	3323      	adds	r3, #35	; 0x23
   17200:	6013      	str	r3, [r2, #0]
   17202:	9b02      	ldr	r3, [sp, #8]
   17204:	0030      	movs	r0, r6
   17206:	2b00      	cmp	r3, #0
   17208:	d10b      	bne.n	17222 <_strtol_l.isra.0+0xf6>
   1720a:	b007      	add	sp, #28
   1720c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1720e:	9a01      	ldr	r2, [sp, #4]
   17210:	2a00      	cmp	r2, #0
   17212:	d000      	beq.n	17216 <_strtol_l.isra.0+0xea>
   17214:	4240      	negs	r0, r0
   17216:	9a02      	ldr	r2, [sp, #8]
   17218:	2a00      	cmp	r2, #0
   1721a:	d0f6      	beq.n	1720a <_strtol_l.isra.0+0xde>
   1721c:	9a03      	ldr	r2, [sp, #12]
   1721e:	2b00      	cmp	r3, #0
   17220:	d000      	beq.n	17224 <_strtol_l.isra.0+0xf8>
   17222:	1e6a      	subs	r2, r5, #1
   17224:	9b02      	ldr	r3, [sp, #8]
   17226:	601a      	str	r2, [r3, #0]
   17228:	e7ef      	b.n	1720a <_strtol_l.isra.0+0xde>
   1722a:	2430      	movs	r4, #48	; 0x30
   1722c:	2f00      	cmp	r7, #0
   1722e:	d1ad      	bne.n	1718c <_strtol_l.isra.0+0x60>
   17230:	3708      	adds	r7, #8
   17232:	e7ab      	b.n	1718c <_strtol_l.isra.0+0x60>
   17234:	7fffffff 	.word	0x7fffffff

00017238 <strtol>:
   17238:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1723a:	0013      	movs	r3, r2
   1723c:	4a06      	ldr	r2, [pc, #24]	; (17258 <strtol+0x20>)
   1723e:	0005      	movs	r5, r0
   17240:	6810      	ldr	r0, [r2, #0]
   17242:	6a04      	ldr	r4, [r0, #32]
   17244:	2c00      	cmp	r4, #0
   17246:	d100      	bne.n	1724a <strtol+0x12>
   17248:	4c04      	ldr	r4, [pc, #16]	; (1725c <strtol+0x24>)
   1724a:	000a      	movs	r2, r1
   1724c:	9400      	str	r4, [sp, #0]
   1724e:	0029      	movs	r1, r5
   17250:	f7ff ff6c 	bl	1712c <_strtol_l.isra.0>
   17254:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   17256:	46c0      	nop			; (mov r8, r8)
   17258:	2000001c 	.word	0x2000001c
   1725c:	20000080 	.word	0x20000080

00017260 <__swbuf_r>:
   17260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17262:	0005      	movs	r5, r0
   17264:	000e      	movs	r6, r1
   17266:	0014      	movs	r4, r2
   17268:	2800      	cmp	r0, #0
   1726a:	d004      	beq.n	17276 <__swbuf_r+0x16>
   1726c:	6983      	ldr	r3, [r0, #24]
   1726e:	2b00      	cmp	r3, #0
   17270:	d101      	bne.n	17276 <__swbuf_r+0x16>
   17272:	f000 f9b9 	bl	175e8 <__sinit>
   17276:	4b22      	ldr	r3, [pc, #136]	; (17300 <__swbuf_r+0xa0>)
   17278:	429c      	cmp	r4, r3
   1727a:	d12d      	bne.n	172d8 <__swbuf_r+0x78>
   1727c:	686c      	ldr	r4, [r5, #4]
   1727e:	69a3      	ldr	r3, [r4, #24]
   17280:	60a3      	str	r3, [r4, #8]
   17282:	89a3      	ldrh	r3, [r4, #12]
   17284:	071b      	lsls	r3, r3, #28
   17286:	d531      	bpl.n	172ec <__swbuf_r+0x8c>
   17288:	6923      	ldr	r3, [r4, #16]
   1728a:	2b00      	cmp	r3, #0
   1728c:	d02e      	beq.n	172ec <__swbuf_r+0x8c>
   1728e:	6823      	ldr	r3, [r4, #0]
   17290:	6922      	ldr	r2, [r4, #16]
   17292:	b2f7      	uxtb	r7, r6
   17294:	1a98      	subs	r0, r3, r2
   17296:	6963      	ldr	r3, [r4, #20]
   17298:	b2f6      	uxtb	r6, r6
   1729a:	4298      	cmp	r0, r3
   1729c:	db05      	blt.n	172aa <__swbuf_r+0x4a>
   1729e:	0021      	movs	r1, r4
   172a0:	0028      	movs	r0, r5
   172a2:	f000 f933 	bl	1750c <_fflush_r>
   172a6:	2800      	cmp	r0, #0
   172a8:	d126      	bne.n	172f8 <__swbuf_r+0x98>
   172aa:	68a3      	ldr	r3, [r4, #8]
   172ac:	3001      	adds	r0, #1
   172ae:	3b01      	subs	r3, #1
   172b0:	60a3      	str	r3, [r4, #8]
   172b2:	6823      	ldr	r3, [r4, #0]
   172b4:	1c5a      	adds	r2, r3, #1
   172b6:	6022      	str	r2, [r4, #0]
   172b8:	701f      	strb	r7, [r3, #0]
   172ba:	6963      	ldr	r3, [r4, #20]
   172bc:	4298      	cmp	r0, r3
   172be:	d004      	beq.n	172ca <__swbuf_r+0x6a>
   172c0:	89a3      	ldrh	r3, [r4, #12]
   172c2:	07db      	lsls	r3, r3, #31
   172c4:	d51a      	bpl.n	172fc <__swbuf_r+0x9c>
   172c6:	2e0a      	cmp	r6, #10
   172c8:	d118      	bne.n	172fc <__swbuf_r+0x9c>
   172ca:	0021      	movs	r1, r4
   172cc:	0028      	movs	r0, r5
   172ce:	f000 f91d 	bl	1750c <_fflush_r>
   172d2:	2800      	cmp	r0, #0
   172d4:	d012      	beq.n	172fc <__swbuf_r+0x9c>
   172d6:	e00f      	b.n	172f8 <__swbuf_r+0x98>
   172d8:	4b0a      	ldr	r3, [pc, #40]	; (17304 <__swbuf_r+0xa4>)
   172da:	429c      	cmp	r4, r3
   172dc:	d101      	bne.n	172e2 <__swbuf_r+0x82>
   172de:	68ac      	ldr	r4, [r5, #8]
   172e0:	e7cd      	b.n	1727e <__swbuf_r+0x1e>
   172e2:	4b09      	ldr	r3, [pc, #36]	; (17308 <__swbuf_r+0xa8>)
   172e4:	429c      	cmp	r4, r3
   172e6:	d1ca      	bne.n	1727e <__swbuf_r+0x1e>
   172e8:	68ec      	ldr	r4, [r5, #12]
   172ea:	e7c8      	b.n	1727e <__swbuf_r+0x1e>
   172ec:	0021      	movs	r1, r4
   172ee:	0028      	movs	r0, r5
   172f0:	f000 f80c 	bl	1730c <__swsetup_r>
   172f4:	2800      	cmp	r0, #0
   172f6:	d0ca      	beq.n	1728e <__swbuf_r+0x2e>
   172f8:	2601      	movs	r6, #1
   172fa:	4276      	negs	r6, r6
   172fc:	0030      	movs	r0, r6
   172fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17300:	00019c78 	.word	0x00019c78
   17304:	00019c98 	.word	0x00019c98
   17308:	00019c58 	.word	0x00019c58

0001730c <__swsetup_r>:
   1730c:	4b36      	ldr	r3, [pc, #216]	; (173e8 <__swsetup_r+0xdc>)
   1730e:	b570      	push	{r4, r5, r6, lr}
   17310:	681d      	ldr	r5, [r3, #0]
   17312:	0006      	movs	r6, r0
   17314:	000c      	movs	r4, r1
   17316:	2d00      	cmp	r5, #0
   17318:	d005      	beq.n	17326 <__swsetup_r+0x1a>
   1731a:	69ab      	ldr	r3, [r5, #24]
   1731c:	2b00      	cmp	r3, #0
   1731e:	d102      	bne.n	17326 <__swsetup_r+0x1a>
   17320:	0028      	movs	r0, r5
   17322:	f000 f961 	bl	175e8 <__sinit>
   17326:	4b31      	ldr	r3, [pc, #196]	; (173ec <__swsetup_r+0xe0>)
   17328:	429c      	cmp	r4, r3
   1732a:	d10f      	bne.n	1734c <__swsetup_r+0x40>
   1732c:	686c      	ldr	r4, [r5, #4]
   1732e:	230c      	movs	r3, #12
   17330:	5ee2      	ldrsh	r2, [r4, r3]
   17332:	b293      	uxth	r3, r2
   17334:	0719      	lsls	r1, r3, #28
   17336:	d42d      	bmi.n	17394 <__swsetup_r+0x88>
   17338:	06d9      	lsls	r1, r3, #27
   1733a:	d411      	bmi.n	17360 <__swsetup_r+0x54>
   1733c:	2309      	movs	r3, #9
   1733e:	2001      	movs	r0, #1
   17340:	6033      	str	r3, [r6, #0]
   17342:	3337      	adds	r3, #55	; 0x37
   17344:	4313      	orrs	r3, r2
   17346:	81a3      	strh	r3, [r4, #12]
   17348:	4240      	negs	r0, r0
   1734a:	bd70      	pop	{r4, r5, r6, pc}
   1734c:	4b28      	ldr	r3, [pc, #160]	; (173f0 <__swsetup_r+0xe4>)
   1734e:	429c      	cmp	r4, r3
   17350:	d101      	bne.n	17356 <__swsetup_r+0x4a>
   17352:	68ac      	ldr	r4, [r5, #8]
   17354:	e7eb      	b.n	1732e <__swsetup_r+0x22>
   17356:	4b27      	ldr	r3, [pc, #156]	; (173f4 <__swsetup_r+0xe8>)
   17358:	429c      	cmp	r4, r3
   1735a:	d1e8      	bne.n	1732e <__swsetup_r+0x22>
   1735c:	68ec      	ldr	r4, [r5, #12]
   1735e:	e7e6      	b.n	1732e <__swsetup_r+0x22>
   17360:	075b      	lsls	r3, r3, #29
   17362:	d513      	bpl.n	1738c <__swsetup_r+0x80>
   17364:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17366:	2900      	cmp	r1, #0
   17368:	d008      	beq.n	1737c <__swsetup_r+0x70>
   1736a:	0023      	movs	r3, r4
   1736c:	3344      	adds	r3, #68	; 0x44
   1736e:	4299      	cmp	r1, r3
   17370:	d002      	beq.n	17378 <__swsetup_r+0x6c>
   17372:	0030      	movs	r0, r6
   17374:	f7ff fc50 	bl	16c18 <_free_r>
   17378:	2300      	movs	r3, #0
   1737a:	6363      	str	r3, [r4, #52]	; 0x34
   1737c:	2224      	movs	r2, #36	; 0x24
   1737e:	89a3      	ldrh	r3, [r4, #12]
   17380:	4393      	bics	r3, r2
   17382:	81a3      	strh	r3, [r4, #12]
   17384:	2300      	movs	r3, #0
   17386:	6063      	str	r3, [r4, #4]
   17388:	6923      	ldr	r3, [r4, #16]
   1738a:	6023      	str	r3, [r4, #0]
   1738c:	2308      	movs	r3, #8
   1738e:	89a2      	ldrh	r2, [r4, #12]
   17390:	4313      	orrs	r3, r2
   17392:	81a3      	strh	r3, [r4, #12]
   17394:	6923      	ldr	r3, [r4, #16]
   17396:	2b00      	cmp	r3, #0
   17398:	d10b      	bne.n	173b2 <__swsetup_r+0xa6>
   1739a:	21a0      	movs	r1, #160	; 0xa0
   1739c:	2280      	movs	r2, #128	; 0x80
   1739e:	89a3      	ldrh	r3, [r4, #12]
   173a0:	0089      	lsls	r1, r1, #2
   173a2:	0092      	lsls	r2, r2, #2
   173a4:	400b      	ands	r3, r1
   173a6:	4293      	cmp	r3, r2
   173a8:	d003      	beq.n	173b2 <__swsetup_r+0xa6>
   173aa:	0021      	movs	r1, r4
   173ac:	0030      	movs	r0, r6
   173ae:	f000 f9db 	bl	17768 <__smakebuf_r>
   173b2:	2301      	movs	r3, #1
   173b4:	89a2      	ldrh	r2, [r4, #12]
   173b6:	4013      	ands	r3, r2
   173b8:	d011      	beq.n	173de <__swsetup_r+0xd2>
   173ba:	2300      	movs	r3, #0
   173bc:	60a3      	str	r3, [r4, #8]
   173be:	6963      	ldr	r3, [r4, #20]
   173c0:	425b      	negs	r3, r3
   173c2:	61a3      	str	r3, [r4, #24]
   173c4:	2000      	movs	r0, #0
   173c6:	6923      	ldr	r3, [r4, #16]
   173c8:	4283      	cmp	r3, r0
   173ca:	d1be      	bne.n	1734a <__swsetup_r+0x3e>
   173cc:	230c      	movs	r3, #12
   173ce:	5ee2      	ldrsh	r2, [r4, r3]
   173d0:	0613      	lsls	r3, r2, #24
   173d2:	d5ba      	bpl.n	1734a <__swsetup_r+0x3e>
   173d4:	2340      	movs	r3, #64	; 0x40
   173d6:	4313      	orrs	r3, r2
   173d8:	81a3      	strh	r3, [r4, #12]
   173da:	3801      	subs	r0, #1
   173dc:	e7b5      	b.n	1734a <__swsetup_r+0x3e>
   173de:	0792      	lsls	r2, r2, #30
   173e0:	d400      	bmi.n	173e4 <__swsetup_r+0xd8>
   173e2:	6963      	ldr	r3, [r4, #20]
   173e4:	60a3      	str	r3, [r4, #8]
   173e6:	e7ed      	b.n	173c4 <__swsetup_r+0xb8>
   173e8:	2000001c 	.word	0x2000001c
   173ec:	00019c78 	.word	0x00019c78
   173f0:	00019c98 	.word	0x00019c98
   173f4:	00019c58 	.word	0x00019c58

000173f8 <__sflush_r>:
   173f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   173fa:	898a      	ldrh	r2, [r1, #12]
   173fc:	0005      	movs	r5, r0
   173fe:	000c      	movs	r4, r1
   17400:	0713      	lsls	r3, r2, #28
   17402:	d460      	bmi.n	174c6 <__sflush_r+0xce>
   17404:	684b      	ldr	r3, [r1, #4]
   17406:	2b00      	cmp	r3, #0
   17408:	dc04      	bgt.n	17414 <__sflush_r+0x1c>
   1740a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1740c:	2b00      	cmp	r3, #0
   1740e:	dc01      	bgt.n	17414 <__sflush_r+0x1c>
   17410:	2000      	movs	r0, #0
   17412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17414:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17416:	2f00      	cmp	r7, #0
   17418:	d0fa      	beq.n	17410 <__sflush_r+0x18>
   1741a:	2300      	movs	r3, #0
   1741c:	682e      	ldr	r6, [r5, #0]
   1741e:	602b      	str	r3, [r5, #0]
   17420:	2380      	movs	r3, #128	; 0x80
   17422:	015b      	lsls	r3, r3, #5
   17424:	401a      	ands	r2, r3
   17426:	d034      	beq.n	17492 <__sflush_r+0x9a>
   17428:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1742a:	89a3      	ldrh	r3, [r4, #12]
   1742c:	075b      	lsls	r3, r3, #29
   1742e:	d506      	bpl.n	1743e <__sflush_r+0x46>
   17430:	6863      	ldr	r3, [r4, #4]
   17432:	1ac0      	subs	r0, r0, r3
   17434:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17436:	2b00      	cmp	r3, #0
   17438:	d001      	beq.n	1743e <__sflush_r+0x46>
   1743a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1743c:	1ac0      	subs	r0, r0, r3
   1743e:	0002      	movs	r2, r0
   17440:	6a21      	ldr	r1, [r4, #32]
   17442:	2300      	movs	r3, #0
   17444:	0028      	movs	r0, r5
   17446:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17448:	47b8      	blx	r7
   1744a:	89a1      	ldrh	r1, [r4, #12]
   1744c:	1c43      	adds	r3, r0, #1
   1744e:	d106      	bne.n	1745e <__sflush_r+0x66>
   17450:	682b      	ldr	r3, [r5, #0]
   17452:	2b1d      	cmp	r3, #29
   17454:	d831      	bhi.n	174ba <__sflush_r+0xc2>
   17456:	4a2c      	ldr	r2, [pc, #176]	; (17508 <__sflush_r+0x110>)
   17458:	40da      	lsrs	r2, r3
   1745a:	07d3      	lsls	r3, r2, #31
   1745c:	d52d      	bpl.n	174ba <__sflush_r+0xc2>
   1745e:	2300      	movs	r3, #0
   17460:	6063      	str	r3, [r4, #4]
   17462:	6923      	ldr	r3, [r4, #16]
   17464:	6023      	str	r3, [r4, #0]
   17466:	04cb      	lsls	r3, r1, #19
   17468:	d505      	bpl.n	17476 <__sflush_r+0x7e>
   1746a:	1c43      	adds	r3, r0, #1
   1746c:	d102      	bne.n	17474 <__sflush_r+0x7c>
   1746e:	682b      	ldr	r3, [r5, #0]
   17470:	2b00      	cmp	r3, #0
   17472:	d100      	bne.n	17476 <__sflush_r+0x7e>
   17474:	6560      	str	r0, [r4, #84]	; 0x54
   17476:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17478:	602e      	str	r6, [r5, #0]
   1747a:	2900      	cmp	r1, #0
   1747c:	d0c8      	beq.n	17410 <__sflush_r+0x18>
   1747e:	0023      	movs	r3, r4
   17480:	3344      	adds	r3, #68	; 0x44
   17482:	4299      	cmp	r1, r3
   17484:	d002      	beq.n	1748c <__sflush_r+0x94>
   17486:	0028      	movs	r0, r5
   17488:	f7ff fbc6 	bl	16c18 <_free_r>
   1748c:	2000      	movs	r0, #0
   1748e:	6360      	str	r0, [r4, #52]	; 0x34
   17490:	e7bf      	b.n	17412 <__sflush_r+0x1a>
   17492:	2301      	movs	r3, #1
   17494:	6a21      	ldr	r1, [r4, #32]
   17496:	0028      	movs	r0, r5
   17498:	47b8      	blx	r7
   1749a:	1c43      	adds	r3, r0, #1
   1749c:	d1c5      	bne.n	1742a <__sflush_r+0x32>
   1749e:	682b      	ldr	r3, [r5, #0]
   174a0:	2b00      	cmp	r3, #0
   174a2:	d0c2      	beq.n	1742a <__sflush_r+0x32>
   174a4:	2b1d      	cmp	r3, #29
   174a6:	d001      	beq.n	174ac <__sflush_r+0xb4>
   174a8:	2b16      	cmp	r3, #22
   174aa:	d101      	bne.n	174b0 <__sflush_r+0xb8>
   174ac:	602e      	str	r6, [r5, #0]
   174ae:	e7af      	b.n	17410 <__sflush_r+0x18>
   174b0:	2340      	movs	r3, #64	; 0x40
   174b2:	89a2      	ldrh	r2, [r4, #12]
   174b4:	4313      	orrs	r3, r2
   174b6:	81a3      	strh	r3, [r4, #12]
   174b8:	e7ab      	b.n	17412 <__sflush_r+0x1a>
   174ba:	2340      	movs	r3, #64	; 0x40
   174bc:	430b      	orrs	r3, r1
   174be:	2001      	movs	r0, #1
   174c0:	81a3      	strh	r3, [r4, #12]
   174c2:	4240      	negs	r0, r0
   174c4:	e7a5      	b.n	17412 <__sflush_r+0x1a>
   174c6:	690f      	ldr	r7, [r1, #16]
   174c8:	2f00      	cmp	r7, #0
   174ca:	d0a1      	beq.n	17410 <__sflush_r+0x18>
   174cc:	680b      	ldr	r3, [r1, #0]
   174ce:	600f      	str	r7, [r1, #0]
   174d0:	1bdb      	subs	r3, r3, r7
   174d2:	9301      	str	r3, [sp, #4]
   174d4:	2300      	movs	r3, #0
   174d6:	0792      	lsls	r2, r2, #30
   174d8:	d100      	bne.n	174dc <__sflush_r+0xe4>
   174da:	694b      	ldr	r3, [r1, #20]
   174dc:	60a3      	str	r3, [r4, #8]
   174de:	9b01      	ldr	r3, [sp, #4]
   174e0:	2b00      	cmp	r3, #0
   174e2:	dc00      	bgt.n	174e6 <__sflush_r+0xee>
   174e4:	e794      	b.n	17410 <__sflush_r+0x18>
   174e6:	9b01      	ldr	r3, [sp, #4]
   174e8:	003a      	movs	r2, r7
   174ea:	6a21      	ldr	r1, [r4, #32]
   174ec:	0028      	movs	r0, r5
   174ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   174f0:	47b0      	blx	r6
   174f2:	2800      	cmp	r0, #0
   174f4:	dc03      	bgt.n	174fe <__sflush_r+0x106>
   174f6:	2340      	movs	r3, #64	; 0x40
   174f8:	89a2      	ldrh	r2, [r4, #12]
   174fa:	4313      	orrs	r3, r2
   174fc:	e7df      	b.n	174be <__sflush_r+0xc6>
   174fe:	9b01      	ldr	r3, [sp, #4]
   17500:	183f      	adds	r7, r7, r0
   17502:	1a1b      	subs	r3, r3, r0
   17504:	9301      	str	r3, [sp, #4]
   17506:	e7ea      	b.n	174de <__sflush_r+0xe6>
   17508:	20400001 	.word	0x20400001

0001750c <_fflush_r>:
   1750c:	690b      	ldr	r3, [r1, #16]
   1750e:	b570      	push	{r4, r5, r6, lr}
   17510:	0005      	movs	r5, r0
   17512:	000c      	movs	r4, r1
   17514:	2b00      	cmp	r3, #0
   17516:	d101      	bne.n	1751c <_fflush_r+0x10>
   17518:	2000      	movs	r0, #0
   1751a:	bd70      	pop	{r4, r5, r6, pc}
   1751c:	2800      	cmp	r0, #0
   1751e:	d004      	beq.n	1752a <_fflush_r+0x1e>
   17520:	6983      	ldr	r3, [r0, #24]
   17522:	2b00      	cmp	r3, #0
   17524:	d101      	bne.n	1752a <_fflush_r+0x1e>
   17526:	f000 f85f 	bl	175e8 <__sinit>
   1752a:	4b0b      	ldr	r3, [pc, #44]	; (17558 <_fflush_r+0x4c>)
   1752c:	429c      	cmp	r4, r3
   1752e:	d109      	bne.n	17544 <_fflush_r+0x38>
   17530:	686c      	ldr	r4, [r5, #4]
   17532:	220c      	movs	r2, #12
   17534:	5ea3      	ldrsh	r3, [r4, r2]
   17536:	2b00      	cmp	r3, #0
   17538:	d0ee      	beq.n	17518 <_fflush_r+0xc>
   1753a:	0021      	movs	r1, r4
   1753c:	0028      	movs	r0, r5
   1753e:	f7ff ff5b 	bl	173f8 <__sflush_r>
   17542:	e7ea      	b.n	1751a <_fflush_r+0xe>
   17544:	4b05      	ldr	r3, [pc, #20]	; (1755c <_fflush_r+0x50>)
   17546:	429c      	cmp	r4, r3
   17548:	d101      	bne.n	1754e <_fflush_r+0x42>
   1754a:	68ac      	ldr	r4, [r5, #8]
   1754c:	e7f1      	b.n	17532 <_fflush_r+0x26>
   1754e:	4b04      	ldr	r3, [pc, #16]	; (17560 <_fflush_r+0x54>)
   17550:	429c      	cmp	r4, r3
   17552:	d1ee      	bne.n	17532 <_fflush_r+0x26>
   17554:	68ec      	ldr	r4, [r5, #12]
   17556:	e7ec      	b.n	17532 <_fflush_r+0x26>
   17558:	00019c78 	.word	0x00019c78
   1755c:	00019c98 	.word	0x00019c98
   17560:	00019c58 	.word	0x00019c58

00017564 <_cleanup_r>:
   17564:	b510      	push	{r4, lr}
   17566:	4902      	ldr	r1, [pc, #8]	; (17570 <_cleanup_r+0xc>)
   17568:	f000 f8b2 	bl	176d0 <_fwalk_reent>
   1756c:	bd10      	pop	{r4, pc}
   1756e:	46c0      	nop			; (mov r8, r8)
   17570:	0001750d 	.word	0x0001750d

00017574 <std.isra.0>:
   17574:	2300      	movs	r3, #0
   17576:	b510      	push	{r4, lr}
   17578:	0004      	movs	r4, r0
   1757a:	6003      	str	r3, [r0, #0]
   1757c:	6043      	str	r3, [r0, #4]
   1757e:	6083      	str	r3, [r0, #8]
   17580:	8181      	strh	r1, [r0, #12]
   17582:	6643      	str	r3, [r0, #100]	; 0x64
   17584:	81c2      	strh	r2, [r0, #14]
   17586:	6103      	str	r3, [r0, #16]
   17588:	6143      	str	r3, [r0, #20]
   1758a:	6183      	str	r3, [r0, #24]
   1758c:	0019      	movs	r1, r3
   1758e:	2208      	movs	r2, #8
   17590:	305c      	adds	r0, #92	; 0x5c
   17592:	f7ff fb38 	bl	16c06 <memset>
   17596:	4b05      	ldr	r3, [pc, #20]	; (175ac <std.isra.0+0x38>)
   17598:	6224      	str	r4, [r4, #32]
   1759a:	6263      	str	r3, [r4, #36]	; 0x24
   1759c:	4b04      	ldr	r3, [pc, #16]	; (175b0 <std.isra.0+0x3c>)
   1759e:	62a3      	str	r3, [r4, #40]	; 0x28
   175a0:	4b04      	ldr	r3, [pc, #16]	; (175b4 <std.isra.0+0x40>)
   175a2:	62e3      	str	r3, [r4, #44]	; 0x2c
   175a4:	4b04      	ldr	r3, [pc, #16]	; (175b8 <std.isra.0+0x44>)
   175a6:	6323      	str	r3, [r4, #48]	; 0x30
   175a8:	bd10      	pop	{r4, pc}
   175aa:	46c0      	nop			; (mov r8, r8)
   175ac:	000180dd 	.word	0x000180dd
   175b0:	00018105 	.word	0x00018105
   175b4:	0001813d 	.word	0x0001813d
   175b8:	00018169 	.word	0x00018169

000175bc <__sfmoreglue>:
   175bc:	b570      	push	{r4, r5, r6, lr}
   175be:	2568      	movs	r5, #104	; 0x68
   175c0:	1e4a      	subs	r2, r1, #1
   175c2:	4355      	muls	r5, r2
   175c4:	000e      	movs	r6, r1
   175c6:	0029      	movs	r1, r5
   175c8:	3174      	adds	r1, #116	; 0x74
   175ca:	f7ff fb6f 	bl	16cac <_malloc_r>
   175ce:	1e04      	subs	r4, r0, #0
   175d0:	d008      	beq.n	175e4 <__sfmoreglue+0x28>
   175d2:	2100      	movs	r1, #0
   175d4:	002a      	movs	r2, r5
   175d6:	6001      	str	r1, [r0, #0]
   175d8:	6046      	str	r6, [r0, #4]
   175da:	300c      	adds	r0, #12
   175dc:	60a0      	str	r0, [r4, #8]
   175de:	3268      	adds	r2, #104	; 0x68
   175e0:	f7ff fb11 	bl	16c06 <memset>
   175e4:	0020      	movs	r0, r4
   175e6:	bd70      	pop	{r4, r5, r6, pc}

000175e8 <__sinit>:
   175e8:	6983      	ldr	r3, [r0, #24]
   175ea:	b513      	push	{r0, r1, r4, lr}
   175ec:	0004      	movs	r4, r0
   175ee:	2b00      	cmp	r3, #0
   175f0:	d128      	bne.n	17644 <__sinit+0x5c>
   175f2:	6483      	str	r3, [r0, #72]	; 0x48
   175f4:	64c3      	str	r3, [r0, #76]	; 0x4c
   175f6:	6503      	str	r3, [r0, #80]	; 0x50
   175f8:	4b13      	ldr	r3, [pc, #76]	; (17648 <__sinit+0x60>)
   175fa:	4a14      	ldr	r2, [pc, #80]	; (1764c <__sinit+0x64>)
   175fc:	681b      	ldr	r3, [r3, #0]
   175fe:	6282      	str	r2, [r0, #40]	; 0x28
   17600:	9301      	str	r3, [sp, #4]
   17602:	4298      	cmp	r0, r3
   17604:	d101      	bne.n	1760a <__sinit+0x22>
   17606:	2301      	movs	r3, #1
   17608:	6183      	str	r3, [r0, #24]
   1760a:	0020      	movs	r0, r4
   1760c:	f000 f820 	bl	17650 <__sfp>
   17610:	6060      	str	r0, [r4, #4]
   17612:	0020      	movs	r0, r4
   17614:	f000 f81c 	bl	17650 <__sfp>
   17618:	60a0      	str	r0, [r4, #8]
   1761a:	0020      	movs	r0, r4
   1761c:	f000 f818 	bl	17650 <__sfp>
   17620:	2200      	movs	r2, #0
   17622:	60e0      	str	r0, [r4, #12]
   17624:	2104      	movs	r1, #4
   17626:	6860      	ldr	r0, [r4, #4]
   17628:	f7ff ffa4 	bl	17574 <std.isra.0>
   1762c:	2201      	movs	r2, #1
   1762e:	2109      	movs	r1, #9
   17630:	68a0      	ldr	r0, [r4, #8]
   17632:	f7ff ff9f 	bl	17574 <std.isra.0>
   17636:	2202      	movs	r2, #2
   17638:	2112      	movs	r1, #18
   1763a:	68e0      	ldr	r0, [r4, #12]
   1763c:	f7ff ff9a 	bl	17574 <std.isra.0>
   17640:	2301      	movs	r3, #1
   17642:	61a3      	str	r3, [r4, #24]
   17644:	bd13      	pop	{r0, r1, r4, pc}
   17646:	46c0      	nop			; (mov r8, r8)
   17648:	00019c54 	.word	0x00019c54
   1764c:	00017565 	.word	0x00017565

00017650 <__sfp>:
   17650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17652:	4b1e      	ldr	r3, [pc, #120]	; (176cc <__sfp+0x7c>)
   17654:	0007      	movs	r7, r0
   17656:	681e      	ldr	r6, [r3, #0]
   17658:	69b3      	ldr	r3, [r6, #24]
   1765a:	2b00      	cmp	r3, #0
   1765c:	d102      	bne.n	17664 <__sfp+0x14>
   1765e:	0030      	movs	r0, r6
   17660:	f7ff ffc2 	bl	175e8 <__sinit>
   17664:	3648      	adds	r6, #72	; 0x48
   17666:	68b4      	ldr	r4, [r6, #8]
   17668:	6873      	ldr	r3, [r6, #4]
   1766a:	3b01      	subs	r3, #1
   1766c:	d504      	bpl.n	17678 <__sfp+0x28>
   1766e:	6833      	ldr	r3, [r6, #0]
   17670:	2b00      	cmp	r3, #0
   17672:	d007      	beq.n	17684 <__sfp+0x34>
   17674:	6836      	ldr	r6, [r6, #0]
   17676:	e7f6      	b.n	17666 <__sfp+0x16>
   17678:	220c      	movs	r2, #12
   1767a:	5ea5      	ldrsh	r5, [r4, r2]
   1767c:	2d00      	cmp	r5, #0
   1767e:	d00d      	beq.n	1769c <__sfp+0x4c>
   17680:	3468      	adds	r4, #104	; 0x68
   17682:	e7f2      	b.n	1766a <__sfp+0x1a>
   17684:	2104      	movs	r1, #4
   17686:	0038      	movs	r0, r7
   17688:	f7ff ff98 	bl	175bc <__sfmoreglue>
   1768c:	6030      	str	r0, [r6, #0]
   1768e:	2800      	cmp	r0, #0
   17690:	d1f0      	bne.n	17674 <__sfp+0x24>
   17692:	230c      	movs	r3, #12
   17694:	0004      	movs	r4, r0
   17696:	603b      	str	r3, [r7, #0]
   17698:	0020      	movs	r0, r4
   1769a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1769c:	2301      	movs	r3, #1
   1769e:	0020      	movs	r0, r4
   176a0:	425b      	negs	r3, r3
   176a2:	81e3      	strh	r3, [r4, #14]
   176a4:	3302      	adds	r3, #2
   176a6:	81a3      	strh	r3, [r4, #12]
   176a8:	6665      	str	r5, [r4, #100]	; 0x64
   176aa:	6025      	str	r5, [r4, #0]
   176ac:	60a5      	str	r5, [r4, #8]
   176ae:	6065      	str	r5, [r4, #4]
   176b0:	6125      	str	r5, [r4, #16]
   176b2:	6165      	str	r5, [r4, #20]
   176b4:	61a5      	str	r5, [r4, #24]
   176b6:	2208      	movs	r2, #8
   176b8:	0029      	movs	r1, r5
   176ba:	305c      	adds	r0, #92	; 0x5c
   176bc:	f7ff faa3 	bl	16c06 <memset>
   176c0:	6365      	str	r5, [r4, #52]	; 0x34
   176c2:	63a5      	str	r5, [r4, #56]	; 0x38
   176c4:	64a5      	str	r5, [r4, #72]	; 0x48
   176c6:	64e5      	str	r5, [r4, #76]	; 0x4c
   176c8:	e7e6      	b.n	17698 <__sfp+0x48>
   176ca:	46c0      	nop			; (mov r8, r8)
   176cc:	00019c54 	.word	0x00019c54

000176d0 <_fwalk_reent>:
   176d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   176d2:	0004      	movs	r4, r0
   176d4:	0007      	movs	r7, r0
   176d6:	2600      	movs	r6, #0
   176d8:	9101      	str	r1, [sp, #4]
   176da:	3448      	adds	r4, #72	; 0x48
   176dc:	2c00      	cmp	r4, #0
   176de:	d101      	bne.n	176e4 <_fwalk_reent+0x14>
   176e0:	0030      	movs	r0, r6
   176e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   176e4:	6863      	ldr	r3, [r4, #4]
   176e6:	68a5      	ldr	r5, [r4, #8]
   176e8:	9300      	str	r3, [sp, #0]
   176ea:	9b00      	ldr	r3, [sp, #0]
   176ec:	3b01      	subs	r3, #1
   176ee:	9300      	str	r3, [sp, #0]
   176f0:	d501      	bpl.n	176f6 <_fwalk_reent+0x26>
   176f2:	6824      	ldr	r4, [r4, #0]
   176f4:	e7f2      	b.n	176dc <_fwalk_reent+0xc>
   176f6:	89ab      	ldrh	r3, [r5, #12]
   176f8:	2b01      	cmp	r3, #1
   176fa:	d908      	bls.n	1770e <_fwalk_reent+0x3e>
   176fc:	220e      	movs	r2, #14
   176fe:	5eab      	ldrsh	r3, [r5, r2]
   17700:	3301      	adds	r3, #1
   17702:	d004      	beq.n	1770e <_fwalk_reent+0x3e>
   17704:	0029      	movs	r1, r5
   17706:	0038      	movs	r0, r7
   17708:	9b01      	ldr	r3, [sp, #4]
   1770a:	4798      	blx	r3
   1770c:	4306      	orrs	r6, r0
   1770e:	3568      	adds	r5, #104	; 0x68
   17710:	e7eb      	b.n	176ea <_fwalk_reent+0x1a>

00017712 <__locale_ctype_ptr_l>:
   17712:	30ec      	adds	r0, #236	; 0xec
   17714:	6800      	ldr	r0, [r0, #0]
   17716:	4770      	bx	lr

00017718 <__swhatbuf_r>:
   17718:	b570      	push	{r4, r5, r6, lr}
   1771a:	000e      	movs	r6, r1
   1771c:	001d      	movs	r5, r3
   1771e:	230e      	movs	r3, #14
   17720:	5ec9      	ldrsh	r1, [r1, r3]
   17722:	b090      	sub	sp, #64	; 0x40
   17724:	0014      	movs	r4, r2
   17726:	2900      	cmp	r1, #0
   17728:	da07      	bge.n	1773a <__swhatbuf_r+0x22>
   1772a:	2300      	movs	r3, #0
   1772c:	602b      	str	r3, [r5, #0]
   1772e:	89b3      	ldrh	r3, [r6, #12]
   17730:	061b      	lsls	r3, r3, #24
   17732:	d411      	bmi.n	17758 <__swhatbuf_r+0x40>
   17734:	2380      	movs	r3, #128	; 0x80
   17736:	00db      	lsls	r3, r3, #3
   17738:	e00f      	b.n	1775a <__swhatbuf_r+0x42>
   1773a:	aa01      	add	r2, sp, #4
   1773c:	f000 fd4c 	bl	181d8 <_fstat_r>
   17740:	2800      	cmp	r0, #0
   17742:	dbf2      	blt.n	1772a <__swhatbuf_r+0x12>
   17744:	22f0      	movs	r2, #240	; 0xf0
   17746:	9b02      	ldr	r3, [sp, #8]
   17748:	0212      	lsls	r2, r2, #8
   1774a:	4013      	ands	r3, r2
   1774c:	4a05      	ldr	r2, [pc, #20]	; (17764 <__swhatbuf_r+0x4c>)
   1774e:	189b      	adds	r3, r3, r2
   17750:	425a      	negs	r2, r3
   17752:	4153      	adcs	r3, r2
   17754:	602b      	str	r3, [r5, #0]
   17756:	e7ed      	b.n	17734 <__swhatbuf_r+0x1c>
   17758:	2340      	movs	r3, #64	; 0x40
   1775a:	2000      	movs	r0, #0
   1775c:	6023      	str	r3, [r4, #0]
   1775e:	b010      	add	sp, #64	; 0x40
   17760:	bd70      	pop	{r4, r5, r6, pc}
   17762:	46c0      	nop			; (mov r8, r8)
   17764:	ffffe000 	.word	0xffffe000

00017768 <__smakebuf_r>:
   17768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1776a:	2602      	movs	r6, #2
   1776c:	898b      	ldrh	r3, [r1, #12]
   1776e:	0005      	movs	r5, r0
   17770:	000c      	movs	r4, r1
   17772:	4233      	tst	r3, r6
   17774:	d006      	beq.n	17784 <__smakebuf_r+0x1c>
   17776:	0023      	movs	r3, r4
   17778:	3347      	adds	r3, #71	; 0x47
   1777a:	6023      	str	r3, [r4, #0]
   1777c:	6123      	str	r3, [r4, #16]
   1777e:	2301      	movs	r3, #1
   17780:	6163      	str	r3, [r4, #20]
   17782:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   17784:	ab01      	add	r3, sp, #4
   17786:	466a      	mov	r2, sp
   17788:	f7ff ffc6 	bl	17718 <__swhatbuf_r>
   1778c:	9900      	ldr	r1, [sp, #0]
   1778e:	0007      	movs	r7, r0
   17790:	0028      	movs	r0, r5
   17792:	f7ff fa8b 	bl	16cac <_malloc_r>
   17796:	2800      	cmp	r0, #0
   17798:	d106      	bne.n	177a8 <__smakebuf_r+0x40>
   1779a:	220c      	movs	r2, #12
   1779c:	5ea3      	ldrsh	r3, [r4, r2]
   1779e:	059a      	lsls	r2, r3, #22
   177a0:	d4ef      	bmi.n	17782 <__smakebuf_r+0x1a>
   177a2:	431e      	orrs	r6, r3
   177a4:	81a6      	strh	r6, [r4, #12]
   177a6:	e7e6      	b.n	17776 <__smakebuf_r+0xe>
   177a8:	4b0d      	ldr	r3, [pc, #52]	; (177e0 <__smakebuf_r+0x78>)
   177aa:	62ab      	str	r3, [r5, #40]	; 0x28
   177ac:	2380      	movs	r3, #128	; 0x80
   177ae:	89a2      	ldrh	r2, [r4, #12]
   177b0:	6020      	str	r0, [r4, #0]
   177b2:	4313      	orrs	r3, r2
   177b4:	81a3      	strh	r3, [r4, #12]
   177b6:	9b00      	ldr	r3, [sp, #0]
   177b8:	6120      	str	r0, [r4, #16]
   177ba:	6163      	str	r3, [r4, #20]
   177bc:	9b01      	ldr	r3, [sp, #4]
   177be:	2b00      	cmp	r3, #0
   177c0:	d00a      	beq.n	177d8 <__smakebuf_r+0x70>
   177c2:	230e      	movs	r3, #14
   177c4:	5ee1      	ldrsh	r1, [r4, r3]
   177c6:	0028      	movs	r0, r5
   177c8:	f000 fd18 	bl	181fc <_isatty_r>
   177cc:	2800      	cmp	r0, #0
   177ce:	d003      	beq.n	177d8 <__smakebuf_r+0x70>
   177d0:	2301      	movs	r3, #1
   177d2:	89a2      	ldrh	r2, [r4, #12]
   177d4:	4313      	orrs	r3, r2
   177d6:	81a3      	strh	r3, [r4, #12]
   177d8:	89a0      	ldrh	r0, [r4, #12]
   177da:	4338      	orrs	r0, r7
   177dc:	81a0      	strh	r0, [r4, #12]
   177de:	e7d0      	b.n	17782 <__smakebuf_r+0x1a>
   177e0:	00017565 	.word	0x00017565

000177e4 <__ascii_mbtowc>:
   177e4:	b082      	sub	sp, #8
   177e6:	2900      	cmp	r1, #0
   177e8:	d100      	bne.n	177ec <__ascii_mbtowc+0x8>
   177ea:	a901      	add	r1, sp, #4
   177ec:	1e10      	subs	r0, r2, #0
   177ee:	d006      	beq.n	177fe <__ascii_mbtowc+0x1a>
   177f0:	2b00      	cmp	r3, #0
   177f2:	d006      	beq.n	17802 <__ascii_mbtowc+0x1e>
   177f4:	7813      	ldrb	r3, [r2, #0]
   177f6:	600b      	str	r3, [r1, #0]
   177f8:	7810      	ldrb	r0, [r2, #0]
   177fa:	1e43      	subs	r3, r0, #1
   177fc:	4198      	sbcs	r0, r3
   177fe:	b002      	add	sp, #8
   17800:	4770      	bx	lr
   17802:	2002      	movs	r0, #2
   17804:	4240      	negs	r0, r0
   17806:	e7fa      	b.n	177fe <__ascii_mbtowc+0x1a>

00017808 <__malloc_lock>:
   17808:	4770      	bx	lr

0001780a <__malloc_unlock>:
   1780a:	4770      	bx	lr

0001780c <__ssputs_r>:
   1780c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1780e:	688e      	ldr	r6, [r1, #8]
   17810:	b085      	sub	sp, #20
   17812:	0007      	movs	r7, r0
   17814:	000c      	movs	r4, r1
   17816:	9203      	str	r2, [sp, #12]
   17818:	9301      	str	r3, [sp, #4]
   1781a:	429e      	cmp	r6, r3
   1781c:	d839      	bhi.n	17892 <__ssputs_r+0x86>
   1781e:	2390      	movs	r3, #144	; 0x90
   17820:	898a      	ldrh	r2, [r1, #12]
   17822:	00db      	lsls	r3, r3, #3
   17824:	421a      	tst	r2, r3
   17826:	d034      	beq.n	17892 <__ssputs_r+0x86>
   17828:	2503      	movs	r5, #3
   1782a:	6909      	ldr	r1, [r1, #16]
   1782c:	6823      	ldr	r3, [r4, #0]
   1782e:	1a5b      	subs	r3, r3, r1
   17830:	9302      	str	r3, [sp, #8]
   17832:	6963      	ldr	r3, [r4, #20]
   17834:	9802      	ldr	r0, [sp, #8]
   17836:	435d      	muls	r5, r3
   17838:	0feb      	lsrs	r3, r5, #31
   1783a:	195d      	adds	r5, r3, r5
   1783c:	9b01      	ldr	r3, [sp, #4]
   1783e:	106d      	asrs	r5, r5, #1
   17840:	3301      	adds	r3, #1
   17842:	181b      	adds	r3, r3, r0
   17844:	42ab      	cmp	r3, r5
   17846:	d900      	bls.n	1784a <__ssputs_r+0x3e>
   17848:	001d      	movs	r5, r3
   1784a:	0553      	lsls	r3, r2, #21
   1784c:	d532      	bpl.n	178b4 <__ssputs_r+0xa8>
   1784e:	0029      	movs	r1, r5
   17850:	0038      	movs	r0, r7
   17852:	f7ff fa2b 	bl	16cac <_malloc_r>
   17856:	1e06      	subs	r6, r0, #0
   17858:	d109      	bne.n	1786e <__ssputs_r+0x62>
   1785a:	230c      	movs	r3, #12
   1785c:	603b      	str	r3, [r7, #0]
   1785e:	2340      	movs	r3, #64	; 0x40
   17860:	2001      	movs	r0, #1
   17862:	89a2      	ldrh	r2, [r4, #12]
   17864:	4240      	negs	r0, r0
   17866:	4313      	orrs	r3, r2
   17868:	81a3      	strh	r3, [r4, #12]
   1786a:	b005      	add	sp, #20
   1786c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1786e:	9a02      	ldr	r2, [sp, #8]
   17870:	6921      	ldr	r1, [r4, #16]
   17872:	f7ff f9ad 	bl	16bd0 <memcpy>
   17876:	89a3      	ldrh	r3, [r4, #12]
   17878:	4a14      	ldr	r2, [pc, #80]	; (178cc <__ssputs_r+0xc0>)
   1787a:	401a      	ands	r2, r3
   1787c:	2380      	movs	r3, #128	; 0x80
   1787e:	4313      	orrs	r3, r2
   17880:	81a3      	strh	r3, [r4, #12]
   17882:	9b02      	ldr	r3, [sp, #8]
   17884:	6126      	str	r6, [r4, #16]
   17886:	18f6      	adds	r6, r6, r3
   17888:	6026      	str	r6, [r4, #0]
   1788a:	6165      	str	r5, [r4, #20]
   1788c:	9e01      	ldr	r6, [sp, #4]
   1788e:	1aed      	subs	r5, r5, r3
   17890:	60a5      	str	r5, [r4, #8]
   17892:	9b01      	ldr	r3, [sp, #4]
   17894:	42b3      	cmp	r3, r6
   17896:	d200      	bcs.n	1789a <__ssputs_r+0x8e>
   17898:	001e      	movs	r6, r3
   1789a:	0032      	movs	r2, r6
   1789c:	9903      	ldr	r1, [sp, #12]
   1789e:	6820      	ldr	r0, [r4, #0]
   178a0:	f7ff f99f 	bl	16be2 <memmove>
   178a4:	68a3      	ldr	r3, [r4, #8]
   178a6:	2000      	movs	r0, #0
   178a8:	1b9b      	subs	r3, r3, r6
   178aa:	60a3      	str	r3, [r4, #8]
   178ac:	6823      	ldr	r3, [r4, #0]
   178ae:	199e      	adds	r6, r3, r6
   178b0:	6026      	str	r6, [r4, #0]
   178b2:	e7da      	b.n	1786a <__ssputs_r+0x5e>
   178b4:	002a      	movs	r2, r5
   178b6:	0038      	movs	r0, r7
   178b8:	f000 fcd1 	bl	1825e <_realloc_r>
   178bc:	1e06      	subs	r6, r0, #0
   178be:	d1e0      	bne.n	17882 <__ssputs_r+0x76>
   178c0:	6921      	ldr	r1, [r4, #16]
   178c2:	0038      	movs	r0, r7
   178c4:	f7ff f9a8 	bl	16c18 <_free_r>
   178c8:	e7c7      	b.n	1785a <__ssputs_r+0x4e>
   178ca:	46c0      	nop			; (mov r8, r8)
   178cc:	fffffb7f 	.word	0xfffffb7f

000178d0 <_svfiprintf_r>:
   178d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   178d2:	b09f      	sub	sp, #124	; 0x7c
   178d4:	9002      	str	r0, [sp, #8]
   178d6:	9305      	str	r3, [sp, #20]
   178d8:	898b      	ldrh	r3, [r1, #12]
   178da:	000f      	movs	r7, r1
   178dc:	0016      	movs	r6, r2
   178de:	061b      	lsls	r3, r3, #24
   178e0:	d511      	bpl.n	17906 <_svfiprintf_r+0x36>
   178e2:	690b      	ldr	r3, [r1, #16]
   178e4:	2b00      	cmp	r3, #0
   178e6:	d10e      	bne.n	17906 <_svfiprintf_r+0x36>
   178e8:	2140      	movs	r1, #64	; 0x40
   178ea:	f7ff f9df 	bl	16cac <_malloc_r>
   178ee:	6038      	str	r0, [r7, #0]
   178f0:	6138      	str	r0, [r7, #16]
   178f2:	2800      	cmp	r0, #0
   178f4:	d105      	bne.n	17902 <_svfiprintf_r+0x32>
   178f6:	230c      	movs	r3, #12
   178f8:	9a02      	ldr	r2, [sp, #8]
   178fa:	3801      	subs	r0, #1
   178fc:	6013      	str	r3, [r2, #0]
   178fe:	b01f      	add	sp, #124	; 0x7c
   17900:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17902:	2340      	movs	r3, #64	; 0x40
   17904:	617b      	str	r3, [r7, #20]
   17906:	2300      	movs	r3, #0
   17908:	ad06      	add	r5, sp, #24
   1790a:	616b      	str	r3, [r5, #20]
   1790c:	3320      	adds	r3, #32
   1790e:	766b      	strb	r3, [r5, #25]
   17910:	3310      	adds	r3, #16
   17912:	76ab      	strb	r3, [r5, #26]
   17914:	0034      	movs	r4, r6
   17916:	7823      	ldrb	r3, [r4, #0]
   17918:	2b00      	cmp	r3, #0
   1791a:	d147      	bne.n	179ac <_svfiprintf_r+0xdc>
   1791c:	1ba3      	subs	r3, r4, r6
   1791e:	9304      	str	r3, [sp, #16]
   17920:	d00d      	beq.n	1793e <_svfiprintf_r+0x6e>
   17922:	1ba3      	subs	r3, r4, r6
   17924:	0032      	movs	r2, r6
   17926:	0039      	movs	r1, r7
   17928:	9802      	ldr	r0, [sp, #8]
   1792a:	f7ff ff6f 	bl	1780c <__ssputs_r>
   1792e:	1c43      	adds	r3, r0, #1
   17930:	d100      	bne.n	17934 <_svfiprintf_r+0x64>
   17932:	e0b5      	b.n	17aa0 <_svfiprintf_r+0x1d0>
   17934:	696a      	ldr	r2, [r5, #20]
   17936:	9b04      	ldr	r3, [sp, #16]
   17938:	4694      	mov	ip, r2
   1793a:	4463      	add	r3, ip
   1793c:	616b      	str	r3, [r5, #20]
   1793e:	7823      	ldrb	r3, [r4, #0]
   17940:	2b00      	cmp	r3, #0
   17942:	d100      	bne.n	17946 <_svfiprintf_r+0x76>
   17944:	e0ac      	b.n	17aa0 <_svfiprintf_r+0x1d0>
   17946:	2201      	movs	r2, #1
   17948:	2300      	movs	r3, #0
   1794a:	4252      	negs	r2, r2
   1794c:	606a      	str	r2, [r5, #4]
   1794e:	a902      	add	r1, sp, #8
   17950:	3254      	adds	r2, #84	; 0x54
   17952:	1852      	adds	r2, r2, r1
   17954:	3401      	adds	r4, #1
   17956:	602b      	str	r3, [r5, #0]
   17958:	60eb      	str	r3, [r5, #12]
   1795a:	60ab      	str	r3, [r5, #8]
   1795c:	7013      	strb	r3, [r2, #0]
   1795e:	65ab      	str	r3, [r5, #88]	; 0x58
   17960:	4e58      	ldr	r6, [pc, #352]	; (17ac4 <_svfiprintf_r+0x1f4>)
   17962:	2205      	movs	r2, #5
   17964:	7821      	ldrb	r1, [r4, #0]
   17966:	0030      	movs	r0, r6
   17968:	f000 fc6e 	bl	18248 <memchr>
   1796c:	1c62      	adds	r2, r4, #1
   1796e:	2800      	cmp	r0, #0
   17970:	d120      	bne.n	179b4 <_svfiprintf_r+0xe4>
   17972:	6829      	ldr	r1, [r5, #0]
   17974:	06cb      	lsls	r3, r1, #27
   17976:	d504      	bpl.n	17982 <_svfiprintf_r+0xb2>
   17978:	2353      	movs	r3, #83	; 0x53
   1797a:	ae02      	add	r6, sp, #8
   1797c:	3020      	adds	r0, #32
   1797e:	199b      	adds	r3, r3, r6
   17980:	7018      	strb	r0, [r3, #0]
   17982:	070b      	lsls	r3, r1, #28
   17984:	d504      	bpl.n	17990 <_svfiprintf_r+0xc0>
   17986:	2353      	movs	r3, #83	; 0x53
   17988:	202b      	movs	r0, #43	; 0x2b
   1798a:	ae02      	add	r6, sp, #8
   1798c:	199b      	adds	r3, r3, r6
   1798e:	7018      	strb	r0, [r3, #0]
   17990:	7823      	ldrb	r3, [r4, #0]
   17992:	2b2a      	cmp	r3, #42	; 0x2a
   17994:	d016      	beq.n	179c4 <_svfiprintf_r+0xf4>
   17996:	2000      	movs	r0, #0
   17998:	210a      	movs	r1, #10
   1799a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1799c:	7822      	ldrb	r2, [r4, #0]
   1799e:	3a30      	subs	r2, #48	; 0x30
   179a0:	2a09      	cmp	r2, #9
   179a2:	d955      	bls.n	17a50 <_svfiprintf_r+0x180>
   179a4:	2800      	cmp	r0, #0
   179a6:	d015      	beq.n	179d4 <_svfiprintf_r+0x104>
   179a8:	9309      	str	r3, [sp, #36]	; 0x24
   179aa:	e013      	b.n	179d4 <_svfiprintf_r+0x104>
   179ac:	2b25      	cmp	r3, #37	; 0x25
   179ae:	d0b5      	beq.n	1791c <_svfiprintf_r+0x4c>
   179b0:	3401      	adds	r4, #1
   179b2:	e7b0      	b.n	17916 <_svfiprintf_r+0x46>
   179b4:	2301      	movs	r3, #1
   179b6:	1b80      	subs	r0, r0, r6
   179b8:	4083      	lsls	r3, r0
   179ba:	6829      	ldr	r1, [r5, #0]
   179bc:	0014      	movs	r4, r2
   179be:	430b      	orrs	r3, r1
   179c0:	602b      	str	r3, [r5, #0]
   179c2:	e7cd      	b.n	17960 <_svfiprintf_r+0x90>
   179c4:	9b05      	ldr	r3, [sp, #20]
   179c6:	1d18      	adds	r0, r3, #4
   179c8:	681b      	ldr	r3, [r3, #0]
   179ca:	9005      	str	r0, [sp, #20]
   179cc:	2b00      	cmp	r3, #0
   179ce:	db39      	blt.n	17a44 <_svfiprintf_r+0x174>
   179d0:	9309      	str	r3, [sp, #36]	; 0x24
   179d2:	0014      	movs	r4, r2
   179d4:	7823      	ldrb	r3, [r4, #0]
   179d6:	2b2e      	cmp	r3, #46	; 0x2e
   179d8:	d10b      	bne.n	179f2 <_svfiprintf_r+0x122>
   179da:	7863      	ldrb	r3, [r4, #1]
   179dc:	1c62      	adds	r2, r4, #1
   179de:	2b2a      	cmp	r3, #42	; 0x2a
   179e0:	d13e      	bne.n	17a60 <_svfiprintf_r+0x190>
   179e2:	9b05      	ldr	r3, [sp, #20]
   179e4:	3402      	adds	r4, #2
   179e6:	1d1a      	adds	r2, r3, #4
   179e8:	681b      	ldr	r3, [r3, #0]
   179ea:	9205      	str	r2, [sp, #20]
   179ec:	2b00      	cmp	r3, #0
   179ee:	db34      	blt.n	17a5a <_svfiprintf_r+0x18a>
   179f0:	9307      	str	r3, [sp, #28]
   179f2:	4e35      	ldr	r6, [pc, #212]	; (17ac8 <_svfiprintf_r+0x1f8>)
   179f4:	7821      	ldrb	r1, [r4, #0]
   179f6:	2203      	movs	r2, #3
   179f8:	0030      	movs	r0, r6
   179fa:	f000 fc25 	bl	18248 <memchr>
   179fe:	2800      	cmp	r0, #0
   17a00:	d006      	beq.n	17a10 <_svfiprintf_r+0x140>
   17a02:	2340      	movs	r3, #64	; 0x40
   17a04:	1b80      	subs	r0, r0, r6
   17a06:	4083      	lsls	r3, r0
   17a08:	682a      	ldr	r2, [r5, #0]
   17a0a:	3401      	adds	r4, #1
   17a0c:	4313      	orrs	r3, r2
   17a0e:	602b      	str	r3, [r5, #0]
   17a10:	7821      	ldrb	r1, [r4, #0]
   17a12:	2206      	movs	r2, #6
   17a14:	482d      	ldr	r0, [pc, #180]	; (17acc <_svfiprintf_r+0x1fc>)
   17a16:	1c66      	adds	r6, r4, #1
   17a18:	7629      	strb	r1, [r5, #24]
   17a1a:	f000 fc15 	bl	18248 <memchr>
   17a1e:	2800      	cmp	r0, #0
   17a20:	d046      	beq.n	17ab0 <_svfiprintf_r+0x1e0>
   17a22:	4b2b      	ldr	r3, [pc, #172]	; (17ad0 <_svfiprintf_r+0x200>)
   17a24:	2b00      	cmp	r3, #0
   17a26:	d12f      	bne.n	17a88 <_svfiprintf_r+0x1b8>
   17a28:	6829      	ldr	r1, [r5, #0]
   17a2a:	9b05      	ldr	r3, [sp, #20]
   17a2c:	2207      	movs	r2, #7
   17a2e:	05c9      	lsls	r1, r1, #23
   17a30:	d528      	bpl.n	17a84 <_svfiprintf_r+0x1b4>
   17a32:	189b      	adds	r3, r3, r2
   17a34:	4393      	bics	r3, r2
   17a36:	3308      	adds	r3, #8
   17a38:	9305      	str	r3, [sp, #20]
   17a3a:	696b      	ldr	r3, [r5, #20]
   17a3c:	9a03      	ldr	r2, [sp, #12]
   17a3e:	189b      	adds	r3, r3, r2
   17a40:	616b      	str	r3, [r5, #20]
   17a42:	e767      	b.n	17914 <_svfiprintf_r+0x44>
   17a44:	425b      	negs	r3, r3
   17a46:	60eb      	str	r3, [r5, #12]
   17a48:	2302      	movs	r3, #2
   17a4a:	430b      	orrs	r3, r1
   17a4c:	602b      	str	r3, [r5, #0]
   17a4e:	e7c0      	b.n	179d2 <_svfiprintf_r+0x102>
   17a50:	434b      	muls	r3, r1
   17a52:	3401      	adds	r4, #1
   17a54:	189b      	adds	r3, r3, r2
   17a56:	2001      	movs	r0, #1
   17a58:	e7a0      	b.n	1799c <_svfiprintf_r+0xcc>
   17a5a:	2301      	movs	r3, #1
   17a5c:	425b      	negs	r3, r3
   17a5e:	e7c7      	b.n	179f0 <_svfiprintf_r+0x120>
   17a60:	2300      	movs	r3, #0
   17a62:	0014      	movs	r4, r2
   17a64:	200a      	movs	r0, #10
   17a66:	001a      	movs	r2, r3
   17a68:	606b      	str	r3, [r5, #4]
   17a6a:	7821      	ldrb	r1, [r4, #0]
   17a6c:	3930      	subs	r1, #48	; 0x30
   17a6e:	2909      	cmp	r1, #9
   17a70:	d903      	bls.n	17a7a <_svfiprintf_r+0x1aa>
   17a72:	2b00      	cmp	r3, #0
   17a74:	d0bd      	beq.n	179f2 <_svfiprintf_r+0x122>
   17a76:	9207      	str	r2, [sp, #28]
   17a78:	e7bb      	b.n	179f2 <_svfiprintf_r+0x122>
   17a7a:	4342      	muls	r2, r0
   17a7c:	3401      	adds	r4, #1
   17a7e:	1852      	adds	r2, r2, r1
   17a80:	2301      	movs	r3, #1
   17a82:	e7f2      	b.n	17a6a <_svfiprintf_r+0x19a>
   17a84:	3307      	adds	r3, #7
   17a86:	e7d5      	b.n	17a34 <_svfiprintf_r+0x164>
   17a88:	ab05      	add	r3, sp, #20
   17a8a:	9300      	str	r3, [sp, #0]
   17a8c:	003a      	movs	r2, r7
   17a8e:	4b11      	ldr	r3, [pc, #68]	; (17ad4 <_svfiprintf_r+0x204>)
   17a90:	0029      	movs	r1, r5
   17a92:	9802      	ldr	r0, [sp, #8]
   17a94:	e000      	b.n	17a98 <_svfiprintf_r+0x1c8>
   17a96:	bf00      	nop
   17a98:	9003      	str	r0, [sp, #12]
   17a9a:	9b03      	ldr	r3, [sp, #12]
   17a9c:	3301      	adds	r3, #1
   17a9e:	d1cc      	bne.n	17a3a <_svfiprintf_r+0x16a>
   17aa0:	89bb      	ldrh	r3, [r7, #12]
   17aa2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17aa4:	065b      	lsls	r3, r3, #25
   17aa6:	d400      	bmi.n	17aaa <_svfiprintf_r+0x1da>
   17aa8:	e729      	b.n	178fe <_svfiprintf_r+0x2e>
   17aaa:	2001      	movs	r0, #1
   17aac:	4240      	negs	r0, r0
   17aae:	e726      	b.n	178fe <_svfiprintf_r+0x2e>
   17ab0:	ab05      	add	r3, sp, #20
   17ab2:	9300      	str	r3, [sp, #0]
   17ab4:	003a      	movs	r2, r7
   17ab6:	4b07      	ldr	r3, [pc, #28]	; (17ad4 <_svfiprintf_r+0x204>)
   17ab8:	0029      	movs	r1, r5
   17aba:	9802      	ldr	r0, [sp, #8]
   17abc:	f000 f9be 	bl	17e3c <_printf_i>
   17ac0:	e7ea      	b.n	17a98 <_svfiprintf_r+0x1c8>
   17ac2:	46c0      	nop			; (mov r8, r8)
   17ac4:	00019cc2 	.word	0x00019cc2
   17ac8:	00019cc8 	.word	0x00019cc8
   17acc:	00019ccc 	.word	0x00019ccc
   17ad0:	00000000 	.word	0x00000000
   17ad4:	0001780d 	.word	0x0001780d

00017ad8 <__sfputc_r>:
   17ad8:	6893      	ldr	r3, [r2, #8]
   17ada:	b510      	push	{r4, lr}
   17adc:	3b01      	subs	r3, #1
   17ade:	6093      	str	r3, [r2, #8]
   17ae0:	2b00      	cmp	r3, #0
   17ae2:	da05      	bge.n	17af0 <__sfputc_r+0x18>
   17ae4:	6994      	ldr	r4, [r2, #24]
   17ae6:	42a3      	cmp	r3, r4
   17ae8:	db08      	blt.n	17afc <__sfputc_r+0x24>
   17aea:	b2cb      	uxtb	r3, r1
   17aec:	2b0a      	cmp	r3, #10
   17aee:	d005      	beq.n	17afc <__sfputc_r+0x24>
   17af0:	6813      	ldr	r3, [r2, #0]
   17af2:	1c58      	adds	r0, r3, #1
   17af4:	6010      	str	r0, [r2, #0]
   17af6:	7019      	strb	r1, [r3, #0]
   17af8:	b2c8      	uxtb	r0, r1
   17afa:	bd10      	pop	{r4, pc}
   17afc:	f7ff fbb0 	bl	17260 <__swbuf_r>
   17b00:	e7fb      	b.n	17afa <__sfputc_r+0x22>

00017b02 <__sfputs_r>:
   17b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b04:	0006      	movs	r6, r0
   17b06:	000f      	movs	r7, r1
   17b08:	0014      	movs	r4, r2
   17b0a:	18d5      	adds	r5, r2, r3
   17b0c:	42ac      	cmp	r4, r5
   17b0e:	d101      	bne.n	17b14 <__sfputs_r+0x12>
   17b10:	2000      	movs	r0, #0
   17b12:	e007      	b.n	17b24 <__sfputs_r+0x22>
   17b14:	7821      	ldrb	r1, [r4, #0]
   17b16:	003a      	movs	r2, r7
   17b18:	0030      	movs	r0, r6
   17b1a:	f7ff ffdd 	bl	17ad8 <__sfputc_r>
   17b1e:	3401      	adds	r4, #1
   17b20:	1c43      	adds	r3, r0, #1
   17b22:	d1f3      	bne.n	17b0c <__sfputs_r+0xa>
   17b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00017b28 <_vfiprintf_r>:
   17b28:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b2a:	b09f      	sub	sp, #124	; 0x7c
   17b2c:	0006      	movs	r6, r0
   17b2e:	000f      	movs	r7, r1
   17b30:	0014      	movs	r4, r2
   17b32:	9305      	str	r3, [sp, #20]
   17b34:	2800      	cmp	r0, #0
   17b36:	d004      	beq.n	17b42 <_vfiprintf_r+0x1a>
   17b38:	6983      	ldr	r3, [r0, #24]
   17b3a:	2b00      	cmp	r3, #0
   17b3c:	d101      	bne.n	17b42 <_vfiprintf_r+0x1a>
   17b3e:	f7ff fd53 	bl	175e8 <__sinit>
   17b42:	4b7f      	ldr	r3, [pc, #508]	; (17d40 <_vfiprintf_r+0x218>)
   17b44:	429f      	cmp	r7, r3
   17b46:	d15c      	bne.n	17c02 <_vfiprintf_r+0xda>
   17b48:	6877      	ldr	r7, [r6, #4]
   17b4a:	89bb      	ldrh	r3, [r7, #12]
   17b4c:	071b      	lsls	r3, r3, #28
   17b4e:	d562      	bpl.n	17c16 <_vfiprintf_r+0xee>
   17b50:	693b      	ldr	r3, [r7, #16]
   17b52:	2b00      	cmp	r3, #0
   17b54:	d05f      	beq.n	17c16 <_vfiprintf_r+0xee>
   17b56:	2300      	movs	r3, #0
   17b58:	ad06      	add	r5, sp, #24
   17b5a:	616b      	str	r3, [r5, #20]
   17b5c:	3320      	adds	r3, #32
   17b5e:	766b      	strb	r3, [r5, #25]
   17b60:	3310      	adds	r3, #16
   17b62:	76ab      	strb	r3, [r5, #26]
   17b64:	9402      	str	r4, [sp, #8]
   17b66:	9c02      	ldr	r4, [sp, #8]
   17b68:	7823      	ldrb	r3, [r4, #0]
   17b6a:	2b00      	cmp	r3, #0
   17b6c:	d15d      	bne.n	17c2a <_vfiprintf_r+0x102>
   17b6e:	9b02      	ldr	r3, [sp, #8]
   17b70:	1ae3      	subs	r3, r4, r3
   17b72:	9304      	str	r3, [sp, #16]
   17b74:	d00d      	beq.n	17b92 <_vfiprintf_r+0x6a>
   17b76:	9b04      	ldr	r3, [sp, #16]
   17b78:	9a02      	ldr	r2, [sp, #8]
   17b7a:	0039      	movs	r1, r7
   17b7c:	0030      	movs	r0, r6
   17b7e:	f7ff ffc0 	bl	17b02 <__sfputs_r>
   17b82:	1c43      	adds	r3, r0, #1
   17b84:	d100      	bne.n	17b88 <_vfiprintf_r+0x60>
   17b86:	e0cc      	b.n	17d22 <_vfiprintf_r+0x1fa>
   17b88:	696a      	ldr	r2, [r5, #20]
   17b8a:	9b04      	ldr	r3, [sp, #16]
   17b8c:	4694      	mov	ip, r2
   17b8e:	4463      	add	r3, ip
   17b90:	616b      	str	r3, [r5, #20]
   17b92:	7823      	ldrb	r3, [r4, #0]
   17b94:	2b00      	cmp	r3, #0
   17b96:	d100      	bne.n	17b9a <_vfiprintf_r+0x72>
   17b98:	e0c3      	b.n	17d22 <_vfiprintf_r+0x1fa>
   17b9a:	2201      	movs	r2, #1
   17b9c:	2300      	movs	r3, #0
   17b9e:	4252      	negs	r2, r2
   17ba0:	606a      	str	r2, [r5, #4]
   17ba2:	a902      	add	r1, sp, #8
   17ba4:	3254      	adds	r2, #84	; 0x54
   17ba6:	1852      	adds	r2, r2, r1
   17ba8:	3401      	adds	r4, #1
   17baa:	602b      	str	r3, [r5, #0]
   17bac:	60eb      	str	r3, [r5, #12]
   17bae:	60ab      	str	r3, [r5, #8]
   17bb0:	7013      	strb	r3, [r2, #0]
   17bb2:	65ab      	str	r3, [r5, #88]	; 0x58
   17bb4:	7821      	ldrb	r1, [r4, #0]
   17bb6:	2205      	movs	r2, #5
   17bb8:	4862      	ldr	r0, [pc, #392]	; (17d44 <_vfiprintf_r+0x21c>)
   17bba:	f000 fb45 	bl	18248 <memchr>
   17bbe:	1c63      	adds	r3, r4, #1
   17bc0:	469c      	mov	ip, r3
   17bc2:	2800      	cmp	r0, #0
   17bc4:	d135      	bne.n	17c32 <_vfiprintf_r+0x10a>
   17bc6:	6829      	ldr	r1, [r5, #0]
   17bc8:	06cb      	lsls	r3, r1, #27
   17bca:	d504      	bpl.n	17bd6 <_vfiprintf_r+0xae>
   17bcc:	2353      	movs	r3, #83	; 0x53
   17bce:	aa02      	add	r2, sp, #8
   17bd0:	3020      	adds	r0, #32
   17bd2:	189b      	adds	r3, r3, r2
   17bd4:	7018      	strb	r0, [r3, #0]
   17bd6:	070b      	lsls	r3, r1, #28
   17bd8:	d504      	bpl.n	17be4 <_vfiprintf_r+0xbc>
   17bda:	2353      	movs	r3, #83	; 0x53
   17bdc:	202b      	movs	r0, #43	; 0x2b
   17bde:	aa02      	add	r2, sp, #8
   17be0:	189b      	adds	r3, r3, r2
   17be2:	7018      	strb	r0, [r3, #0]
   17be4:	7823      	ldrb	r3, [r4, #0]
   17be6:	2b2a      	cmp	r3, #42	; 0x2a
   17be8:	d02c      	beq.n	17c44 <_vfiprintf_r+0x11c>
   17bea:	2000      	movs	r0, #0
   17bec:	210a      	movs	r1, #10
   17bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17bf0:	7822      	ldrb	r2, [r4, #0]
   17bf2:	3a30      	subs	r2, #48	; 0x30
   17bf4:	2a09      	cmp	r2, #9
   17bf6:	d800      	bhi.n	17bfa <_vfiprintf_r+0xd2>
   17bf8:	e06b      	b.n	17cd2 <_vfiprintf_r+0x1aa>
   17bfa:	2800      	cmp	r0, #0
   17bfc:	d02a      	beq.n	17c54 <_vfiprintf_r+0x12c>
   17bfe:	9309      	str	r3, [sp, #36]	; 0x24
   17c00:	e028      	b.n	17c54 <_vfiprintf_r+0x12c>
   17c02:	4b51      	ldr	r3, [pc, #324]	; (17d48 <_vfiprintf_r+0x220>)
   17c04:	429f      	cmp	r7, r3
   17c06:	d101      	bne.n	17c0c <_vfiprintf_r+0xe4>
   17c08:	68b7      	ldr	r7, [r6, #8]
   17c0a:	e79e      	b.n	17b4a <_vfiprintf_r+0x22>
   17c0c:	4b4f      	ldr	r3, [pc, #316]	; (17d4c <_vfiprintf_r+0x224>)
   17c0e:	429f      	cmp	r7, r3
   17c10:	d19b      	bne.n	17b4a <_vfiprintf_r+0x22>
   17c12:	68f7      	ldr	r7, [r6, #12]
   17c14:	e799      	b.n	17b4a <_vfiprintf_r+0x22>
   17c16:	0039      	movs	r1, r7
   17c18:	0030      	movs	r0, r6
   17c1a:	f7ff fb77 	bl	1730c <__swsetup_r>
   17c1e:	2800      	cmp	r0, #0
   17c20:	d099      	beq.n	17b56 <_vfiprintf_r+0x2e>
   17c22:	2001      	movs	r0, #1
   17c24:	4240      	negs	r0, r0
   17c26:	b01f      	add	sp, #124	; 0x7c
   17c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c2a:	2b25      	cmp	r3, #37	; 0x25
   17c2c:	d09f      	beq.n	17b6e <_vfiprintf_r+0x46>
   17c2e:	3401      	adds	r4, #1
   17c30:	e79a      	b.n	17b68 <_vfiprintf_r+0x40>
   17c32:	4b44      	ldr	r3, [pc, #272]	; (17d44 <_vfiprintf_r+0x21c>)
   17c34:	6829      	ldr	r1, [r5, #0]
   17c36:	1ac0      	subs	r0, r0, r3
   17c38:	2301      	movs	r3, #1
   17c3a:	4083      	lsls	r3, r0
   17c3c:	430b      	orrs	r3, r1
   17c3e:	602b      	str	r3, [r5, #0]
   17c40:	4664      	mov	r4, ip
   17c42:	e7b7      	b.n	17bb4 <_vfiprintf_r+0x8c>
   17c44:	9b05      	ldr	r3, [sp, #20]
   17c46:	1d18      	adds	r0, r3, #4
   17c48:	681b      	ldr	r3, [r3, #0]
   17c4a:	9005      	str	r0, [sp, #20]
   17c4c:	2b00      	cmp	r3, #0
   17c4e:	db3a      	blt.n	17cc6 <_vfiprintf_r+0x19e>
   17c50:	9309      	str	r3, [sp, #36]	; 0x24
   17c52:	4664      	mov	r4, ip
   17c54:	7823      	ldrb	r3, [r4, #0]
   17c56:	2b2e      	cmp	r3, #46	; 0x2e
   17c58:	d10b      	bne.n	17c72 <_vfiprintf_r+0x14a>
   17c5a:	7863      	ldrb	r3, [r4, #1]
   17c5c:	1c62      	adds	r2, r4, #1
   17c5e:	2b2a      	cmp	r3, #42	; 0x2a
   17c60:	d13f      	bne.n	17ce2 <_vfiprintf_r+0x1ba>
   17c62:	9b05      	ldr	r3, [sp, #20]
   17c64:	3402      	adds	r4, #2
   17c66:	1d1a      	adds	r2, r3, #4
   17c68:	681b      	ldr	r3, [r3, #0]
   17c6a:	9205      	str	r2, [sp, #20]
   17c6c:	2b00      	cmp	r3, #0
   17c6e:	db35      	blt.n	17cdc <_vfiprintf_r+0x1b4>
   17c70:	9307      	str	r3, [sp, #28]
   17c72:	7821      	ldrb	r1, [r4, #0]
   17c74:	2203      	movs	r2, #3
   17c76:	4836      	ldr	r0, [pc, #216]	; (17d50 <_vfiprintf_r+0x228>)
   17c78:	f000 fae6 	bl	18248 <memchr>
   17c7c:	2800      	cmp	r0, #0
   17c7e:	d007      	beq.n	17c90 <_vfiprintf_r+0x168>
   17c80:	4b33      	ldr	r3, [pc, #204]	; (17d50 <_vfiprintf_r+0x228>)
   17c82:	682a      	ldr	r2, [r5, #0]
   17c84:	1ac0      	subs	r0, r0, r3
   17c86:	2340      	movs	r3, #64	; 0x40
   17c88:	4083      	lsls	r3, r0
   17c8a:	4313      	orrs	r3, r2
   17c8c:	602b      	str	r3, [r5, #0]
   17c8e:	3401      	adds	r4, #1
   17c90:	7821      	ldrb	r1, [r4, #0]
   17c92:	1c63      	adds	r3, r4, #1
   17c94:	2206      	movs	r2, #6
   17c96:	482f      	ldr	r0, [pc, #188]	; (17d54 <_vfiprintf_r+0x22c>)
   17c98:	9302      	str	r3, [sp, #8]
   17c9a:	7629      	strb	r1, [r5, #24]
   17c9c:	f000 fad4 	bl	18248 <memchr>
   17ca0:	2800      	cmp	r0, #0
   17ca2:	d044      	beq.n	17d2e <_vfiprintf_r+0x206>
   17ca4:	4b2c      	ldr	r3, [pc, #176]	; (17d58 <_vfiprintf_r+0x230>)
   17ca6:	2b00      	cmp	r3, #0
   17ca8:	d12f      	bne.n	17d0a <_vfiprintf_r+0x1e2>
   17caa:	6829      	ldr	r1, [r5, #0]
   17cac:	9b05      	ldr	r3, [sp, #20]
   17cae:	2207      	movs	r2, #7
   17cb0:	05c9      	lsls	r1, r1, #23
   17cb2:	d528      	bpl.n	17d06 <_vfiprintf_r+0x1de>
   17cb4:	189b      	adds	r3, r3, r2
   17cb6:	4393      	bics	r3, r2
   17cb8:	3308      	adds	r3, #8
   17cba:	9305      	str	r3, [sp, #20]
   17cbc:	696b      	ldr	r3, [r5, #20]
   17cbe:	9a03      	ldr	r2, [sp, #12]
   17cc0:	189b      	adds	r3, r3, r2
   17cc2:	616b      	str	r3, [r5, #20]
   17cc4:	e74f      	b.n	17b66 <_vfiprintf_r+0x3e>
   17cc6:	425b      	negs	r3, r3
   17cc8:	60eb      	str	r3, [r5, #12]
   17cca:	2302      	movs	r3, #2
   17ccc:	430b      	orrs	r3, r1
   17cce:	602b      	str	r3, [r5, #0]
   17cd0:	e7bf      	b.n	17c52 <_vfiprintf_r+0x12a>
   17cd2:	434b      	muls	r3, r1
   17cd4:	3401      	adds	r4, #1
   17cd6:	189b      	adds	r3, r3, r2
   17cd8:	2001      	movs	r0, #1
   17cda:	e789      	b.n	17bf0 <_vfiprintf_r+0xc8>
   17cdc:	2301      	movs	r3, #1
   17cde:	425b      	negs	r3, r3
   17ce0:	e7c6      	b.n	17c70 <_vfiprintf_r+0x148>
   17ce2:	2300      	movs	r3, #0
   17ce4:	0014      	movs	r4, r2
   17ce6:	200a      	movs	r0, #10
   17ce8:	001a      	movs	r2, r3
   17cea:	606b      	str	r3, [r5, #4]
   17cec:	7821      	ldrb	r1, [r4, #0]
   17cee:	3930      	subs	r1, #48	; 0x30
   17cf0:	2909      	cmp	r1, #9
   17cf2:	d903      	bls.n	17cfc <_vfiprintf_r+0x1d4>
   17cf4:	2b00      	cmp	r3, #0
   17cf6:	d0bc      	beq.n	17c72 <_vfiprintf_r+0x14a>
   17cf8:	9207      	str	r2, [sp, #28]
   17cfa:	e7ba      	b.n	17c72 <_vfiprintf_r+0x14a>
   17cfc:	4342      	muls	r2, r0
   17cfe:	3401      	adds	r4, #1
   17d00:	1852      	adds	r2, r2, r1
   17d02:	2301      	movs	r3, #1
   17d04:	e7f2      	b.n	17cec <_vfiprintf_r+0x1c4>
   17d06:	3307      	adds	r3, #7
   17d08:	e7d5      	b.n	17cb6 <_vfiprintf_r+0x18e>
   17d0a:	ab05      	add	r3, sp, #20
   17d0c:	9300      	str	r3, [sp, #0]
   17d0e:	003a      	movs	r2, r7
   17d10:	4b12      	ldr	r3, [pc, #72]	; (17d5c <_vfiprintf_r+0x234>)
   17d12:	0029      	movs	r1, r5
   17d14:	0030      	movs	r0, r6
   17d16:	e000      	b.n	17d1a <_vfiprintf_r+0x1f2>
   17d18:	bf00      	nop
   17d1a:	9003      	str	r0, [sp, #12]
   17d1c:	9b03      	ldr	r3, [sp, #12]
   17d1e:	3301      	adds	r3, #1
   17d20:	d1cc      	bne.n	17cbc <_vfiprintf_r+0x194>
   17d22:	89bb      	ldrh	r3, [r7, #12]
   17d24:	065b      	lsls	r3, r3, #25
   17d26:	d500      	bpl.n	17d2a <_vfiprintf_r+0x202>
   17d28:	e77b      	b.n	17c22 <_vfiprintf_r+0xfa>
   17d2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17d2c:	e77b      	b.n	17c26 <_vfiprintf_r+0xfe>
   17d2e:	ab05      	add	r3, sp, #20
   17d30:	9300      	str	r3, [sp, #0]
   17d32:	003a      	movs	r2, r7
   17d34:	4b09      	ldr	r3, [pc, #36]	; (17d5c <_vfiprintf_r+0x234>)
   17d36:	0029      	movs	r1, r5
   17d38:	0030      	movs	r0, r6
   17d3a:	f000 f87f 	bl	17e3c <_printf_i>
   17d3e:	e7ec      	b.n	17d1a <_vfiprintf_r+0x1f2>
   17d40:	00019c78 	.word	0x00019c78
   17d44:	00019cc2 	.word	0x00019cc2
   17d48:	00019c98 	.word	0x00019c98
   17d4c:	00019c58 	.word	0x00019c58
   17d50:	00019cc8 	.word	0x00019cc8
   17d54:	00019ccc 	.word	0x00019ccc
   17d58:	00000000 	.word	0x00000000
   17d5c:	00017b03 	.word	0x00017b03

00017d60 <_printf_common>:
   17d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17d62:	0015      	movs	r5, r2
   17d64:	9301      	str	r3, [sp, #4]
   17d66:	688a      	ldr	r2, [r1, #8]
   17d68:	690b      	ldr	r3, [r1, #16]
   17d6a:	9000      	str	r0, [sp, #0]
   17d6c:	000c      	movs	r4, r1
   17d6e:	4293      	cmp	r3, r2
   17d70:	da00      	bge.n	17d74 <_printf_common+0x14>
   17d72:	0013      	movs	r3, r2
   17d74:	0022      	movs	r2, r4
   17d76:	602b      	str	r3, [r5, #0]
   17d78:	3243      	adds	r2, #67	; 0x43
   17d7a:	7812      	ldrb	r2, [r2, #0]
   17d7c:	2a00      	cmp	r2, #0
   17d7e:	d001      	beq.n	17d84 <_printf_common+0x24>
   17d80:	3301      	adds	r3, #1
   17d82:	602b      	str	r3, [r5, #0]
   17d84:	6823      	ldr	r3, [r4, #0]
   17d86:	069b      	lsls	r3, r3, #26
   17d88:	d502      	bpl.n	17d90 <_printf_common+0x30>
   17d8a:	682b      	ldr	r3, [r5, #0]
   17d8c:	3302      	adds	r3, #2
   17d8e:	602b      	str	r3, [r5, #0]
   17d90:	2706      	movs	r7, #6
   17d92:	6823      	ldr	r3, [r4, #0]
   17d94:	401f      	ands	r7, r3
   17d96:	d027      	beq.n	17de8 <_printf_common+0x88>
   17d98:	0023      	movs	r3, r4
   17d9a:	3343      	adds	r3, #67	; 0x43
   17d9c:	781b      	ldrb	r3, [r3, #0]
   17d9e:	1e5a      	subs	r2, r3, #1
   17da0:	4193      	sbcs	r3, r2
   17da2:	6822      	ldr	r2, [r4, #0]
   17da4:	0692      	lsls	r2, r2, #26
   17da6:	d430      	bmi.n	17e0a <_printf_common+0xaa>
   17da8:	0022      	movs	r2, r4
   17daa:	9901      	ldr	r1, [sp, #4]
   17dac:	3243      	adds	r2, #67	; 0x43
   17dae:	9800      	ldr	r0, [sp, #0]
   17db0:	9e08      	ldr	r6, [sp, #32]
   17db2:	47b0      	blx	r6
   17db4:	1c43      	adds	r3, r0, #1
   17db6:	d025      	beq.n	17e04 <_printf_common+0xa4>
   17db8:	2306      	movs	r3, #6
   17dba:	6820      	ldr	r0, [r4, #0]
   17dbc:	682a      	ldr	r2, [r5, #0]
   17dbe:	68e1      	ldr	r1, [r4, #12]
   17dc0:	4003      	ands	r3, r0
   17dc2:	2500      	movs	r5, #0
   17dc4:	2b04      	cmp	r3, #4
   17dc6:	d103      	bne.n	17dd0 <_printf_common+0x70>
   17dc8:	1a8d      	subs	r5, r1, r2
   17dca:	43eb      	mvns	r3, r5
   17dcc:	17db      	asrs	r3, r3, #31
   17dce:	401d      	ands	r5, r3
   17dd0:	68a3      	ldr	r3, [r4, #8]
   17dd2:	6922      	ldr	r2, [r4, #16]
   17dd4:	4293      	cmp	r3, r2
   17dd6:	dd01      	ble.n	17ddc <_printf_common+0x7c>
   17dd8:	1a9b      	subs	r3, r3, r2
   17dda:	18ed      	adds	r5, r5, r3
   17ddc:	2700      	movs	r7, #0
   17dde:	42bd      	cmp	r5, r7
   17de0:	d120      	bne.n	17e24 <_printf_common+0xc4>
   17de2:	2000      	movs	r0, #0
   17de4:	e010      	b.n	17e08 <_printf_common+0xa8>
   17de6:	3701      	adds	r7, #1
   17de8:	68e3      	ldr	r3, [r4, #12]
   17dea:	682a      	ldr	r2, [r5, #0]
   17dec:	1a9b      	subs	r3, r3, r2
   17dee:	429f      	cmp	r7, r3
   17df0:	dad2      	bge.n	17d98 <_printf_common+0x38>
   17df2:	0022      	movs	r2, r4
   17df4:	2301      	movs	r3, #1
   17df6:	3219      	adds	r2, #25
   17df8:	9901      	ldr	r1, [sp, #4]
   17dfa:	9800      	ldr	r0, [sp, #0]
   17dfc:	9e08      	ldr	r6, [sp, #32]
   17dfe:	47b0      	blx	r6
   17e00:	1c43      	adds	r3, r0, #1
   17e02:	d1f0      	bne.n	17de6 <_printf_common+0x86>
   17e04:	2001      	movs	r0, #1
   17e06:	4240      	negs	r0, r0
   17e08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17e0a:	2030      	movs	r0, #48	; 0x30
   17e0c:	18e1      	adds	r1, r4, r3
   17e0e:	3143      	adds	r1, #67	; 0x43
   17e10:	7008      	strb	r0, [r1, #0]
   17e12:	0021      	movs	r1, r4
   17e14:	1c5a      	adds	r2, r3, #1
   17e16:	3145      	adds	r1, #69	; 0x45
   17e18:	7809      	ldrb	r1, [r1, #0]
   17e1a:	18a2      	adds	r2, r4, r2
   17e1c:	3243      	adds	r2, #67	; 0x43
   17e1e:	3302      	adds	r3, #2
   17e20:	7011      	strb	r1, [r2, #0]
   17e22:	e7c1      	b.n	17da8 <_printf_common+0x48>
   17e24:	0022      	movs	r2, r4
   17e26:	2301      	movs	r3, #1
   17e28:	321a      	adds	r2, #26
   17e2a:	9901      	ldr	r1, [sp, #4]
   17e2c:	9800      	ldr	r0, [sp, #0]
   17e2e:	9e08      	ldr	r6, [sp, #32]
   17e30:	47b0      	blx	r6
   17e32:	1c43      	adds	r3, r0, #1
   17e34:	d0e6      	beq.n	17e04 <_printf_common+0xa4>
   17e36:	3701      	adds	r7, #1
   17e38:	e7d1      	b.n	17dde <_printf_common+0x7e>
	...

00017e3c <_printf_i>:
   17e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e3e:	b08b      	sub	sp, #44	; 0x2c
   17e40:	9206      	str	r2, [sp, #24]
   17e42:	000a      	movs	r2, r1
   17e44:	3243      	adds	r2, #67	; 0x43
   17e46:	9307      	str	r3, [sp, #28]
   17e48:	9005      	str	r0, [sp, #20]
   17e4a:	9204      	str	r2, [sp, #16]
   17e4c:	7e0a      	ldrb	r2, [r1, #24]
   17e4e:	000c      	movs	r4, r1
   17e50:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17e52:	2a6e      	cmp	r2, #110	; 0x6e
   17e54:	d100      	bne.n	17e58 <_printf_i+0x1c>
   17e56:	e08f      	b.n	17f78 <_printf_i+0x13c>
   17e58:	d817      	bhi.n	17e8a <_printf_i+0x4e>
   17e5a:	2a63      	cmp	r2, #99	; 0x63
   17e5c:	d02c      	beq.n	17eb8 <_printf_i+0x7c>
   17e5e:	d808      	bhi.n	17e72 <_printf_i+0x36>
   17e60:	2a00      	cmp	r2, #0
   17e62:	d100      	bne.n	17e66 <_printf_i+0x2a>
   17e64:	e099      	b.n	17f9a <_printf_i+0x15e>
   17e66:	2a58      	cmp	r2, #88	; 0x58
   17e68:	d054      	beq.n	17f14 <_printf_i+0xd8>
   17e6a:	0026      	movs	r6, r4
   17e6c:	3642      	adds	r6, #66	; 0x42
   17e6e:	7032      	strb	r2, [r6, #0]
   17e70:	e029      	b.n	17ec6 <_printf_i+0x8a>
   17e72:	2a64      	cmp	r2, #100	; 0x64
   17e74:	d001      	beq.n	17e7a <_printf_i+0x3e>
   17e76:	2a69      	cmp	r2, #105	; 0x69
   17e78:	d1f7      	bne.n	17e6a <_printf_i+0x2e>
   17e7a:	6821      	ldr	r1, [r4, #0]
   17e7c:	681a      	ldr	r2, [r3, #0]
   17e7e:	0608      	lsls	r0, r1, #24
   17e80:	d523      	bpl.n	17eca <_printf_i+0x8e>
   17e82:	1d11      	adds	r1, r2, #4
   17e84:	6019      	str	r1, [r3, #0]
   17e86:	6815      	ldr	r5, [r2, #0]
   17e88:	e025      	b.n	17ed6 <_printf_i+0x9a>
   17e8a:	2a73      	cmp	r2, #115	; 0x73
   17e8c:	d100      	bne.n	17e90 <_printf_i+0x54>
   17e8e:	e088      	b.n	17fa2 <_printf_i+0x166>
   17e90:	d808      	bhi.n	17ea4 <_printf_i+0x68>
   17e92:	2a6f      	cmp	r2, #111	; 0x6f
   17e94:	d029      	beq.n	17eea <_printf_i+0xae>
   17e96:	2a70      	cmp	r2, #112	; 0x70
   17e98:	d1e7      	bne.n	17e6a <_printf_i+0x2e>
   17e9a:	2220      	movs	r2, #32
   17e9c:	6809      	ldr	r1, [r1, #0]
   17e9e:	430a      	orrs	r2, r1
   17ea0:	6022      	str	r2, [r4, #0]
   17ea2:	e003      	b.n	17eac <_printf_i+0x70>
   17ea4:	2a75      	cmp	r2, #117	; 0x75
   17ea6:	d020      	beq.n	17eea <_printf_i+0xae>
   17ea8:	2a78      	cmp	r2, #120	; 0x78
   17eaa:	d1de      	bne.n	17e6a <_printf_i+0x2e>
   17eac:	0022      	movs	r2, r4
   17eae:	2178      	movs	r1, #120	; 0x78
   17eb0:	3245      	adds	r2, #69	; 0x45
   17eb2:	7011      	strb	r1, [r2, #0]
   17eb4:	4a6c      	ldr	r2, [pc, #432]	; (18068 <_printf_i+0x22c>)
   17eb6:	e030      	b.n	17f1a <_printf_i+0xde>
   17eb8:	000e      	movs	r6, r1
   17eba:	681a      	ldr	r2, [r3, #0]
   17ebc:	3642      	adds	r6, #66	; 0x42
   17ebe:	1d11      	adds	r1, r2, #4
   17ec0:	6019      	str	r1, [r3, #0]
   17ec2:	6813      	ldr	r3, [r2, #0]
   17ec4:	7033      	strb	r3, [r6, #0]
   17ec6:	2301      	movs	r3, #1
   17ec8:	e079      	b.n	17fbe <_printf_i+0x182>
   17eca:	0649      	lsls	r1, r1, #25
   17ecc:	d5d9      	bpl.n	17e82 <_printf_i+0x46>
   17ece:	1d11      	adds	r1, r2, #4
   17ed0:	6019      	str	r1, [r3, #0]
   17ed2:	2300      	movs	r3, #0
   17ed4:	5ed5      	ldrsh	r5, [r2, r3]
   17ed6:	2d00      	cmp	r5, #0
   17ed8:	da03      	bge.n	17ee2 <_printf_i+0xa6>
   17eda:	232d      	movs	r3, #45	; 0x2d
   17edc:	9a04      	ldr	r2, [sp, #16]
   17ede:	426d      	negs	r5, r5
   17ee0:	7013      	strb	r3, [r2, #0]
   17ee2:	4b62      	ldr	r3, [pc, #392]	; (1806c <_printf_i+0x230>)
   17ee4:	270a      	movs	r7, #10
   17ee6:	9303      	str	r3, [sp, #12]
   17ee8:	e02f      	b.n	17f4a <_printf_i+0x10e>
   17eea:	6820      	ldr	r0, [r4, #0]
   17eec:	6819      	ldr	r1, [r3, #0]
   17eee:	0605      	lsls	r5, r0, #24
   17ef0:	d503      	bpl.n	17efa <_printf_i+0xbe>
   17ef2:	1d08      	adds	r0, r1, #4
   17ef4:	6018      	str	r0, [r3, #0]
   17ef6:	680d      	ldr	r5, [r1, #0]
   17ef8:	e005      	b.n	17f06 <_printf_i+0xca>
   17efa:	0640      	lsls	r0, r0, #25
   17efc:	d5f9      	bpl.n	17ef2 <_printf_i+0xb6>
   17efe:	680d      	ldr	r5, [r1, #0]
   17f00:	1d08      	adds	r0, r1, #4
   17f02:	6018      	str	r0, [r3, #0]
   17f04:	b2ad      	uxth	r5, r5
   17f06:	4b59      	ldr	r3, [pc, #356]	; (1806c <_printf_i+0x230>)
   17f08:	2708      	movs	r7, #8
   17f0a:	9303      	str	r3, [sp, #12]
   17f0c:	2a6f      	cmp	r2, #111	; 0x6f
   17f0e:	d018      	beq.n	17f42 <_printf_i+0x106>
   17f10:	270a      	movs	r7, #10
   17f12:	e016      	b.n	17f42 <_printf_i+0x106>
   17f14:	3145      	adds	r1, #69	; 0x45
   17f16:	700a      	strb	r2, [r1, #0]
   17f18:	4a54      	ldr	r2, [pc, #336]	; (1806c <_printf_i+0x230>)
   17f1a:	9203      	str	r2, [sp, #12]
   17f1c:	681a      	ldr	r2, [r3, #0]
   17f1e:	6821      	ldr	r1, [r4, #0]
   17f20:	1d10      	adds	r0, r2, #4
   17f22:	6018      	str	r0, [r3, #0]
   17f24:	6815      	ldr	r5, [r2, #0]
   17f26:	0608      	lsls	r0, r1, #24
   17f28:	d522      	bpl.n	17f70 <_printf_i+0x134>
   17f2a:	07cb      	lsls	r3, r1, #31
   17f2c:	d502      	bpl.n	17f34 <_printf_i+0xf8>
   17f2e:	2320      	movs	r3, #32
   17f30:	4319      	orrs	r1, r3
   17f32:	6021      	str	r1, [r4, #0]
   17f34:	2710      	movs	r7, #16
   17f36:	2d00      	cmp	r5, #0
   17f38:	d103      	bne.n	17f42 <_printf_i+0x106>
   17f3a:	2320      	movs	r3, #32
   17f3c:	6822      	ldr	r2, [r4, #0]
   17f3e:	439a      	bics	r2, r3
   17f40:	6022      	str	r2, [r4, #0]
   17f42:	0023      	movs	r3, r4
   17f44:	2200      	movs	r2, #0
   17f46:	3343      	adds	r3, #67	; 0x43
   17f48:	701a      	strb	r2, [r3, #0]
   17f4a:	6863      	ldr	r3, [r4, #4]
   17f4c:	60a3      	str	r3, [r4, #8]
   17f4e:	2b00      	cmp	r3, #0
   17f50:	db5c      	blt.n	1800c <_printf_i+0x1d0>
   17f52:	2204      	movs	r2, #4
   17f54:	6821      	ldr	r1, [r4, #0]
   17f56:	4391      	bics	r1, r2
   17f58:	6021      	str	r1, [r4, #0]
   17f5a:	2d00      	cmp	r5, #0
   17f5c:	d158      	bne.n	18010 <_printf_i+0x1d4>
   17f5e:	9e04      	ldr	r6, [sp, #16]
   17f60:	2b00      	cmp	r3, #0
   17f62:	d064      	beq.n	1802e <_printf_i+0x1f2>
   17f64:	0026      	movs	r6, r4
   17f66:	9b03      	ldr	r3, [sp, #12]
   17f68:	3642      	adds	r6, #66	; 0x42
   17f6a:	781b      	ldrb	r3, [r3, #0]
   17f6c:	7033      	strb	r3, [r6, #0]
   17f6e:	e05e      	b.n	1802e <_printf_i+0x1f2>
   17f70:	0648      	lsls	r0, r1, #25
   17f72:	d5da      	bpl.n	17f2a <_printf_i+0xee>
   17f74:	b2ad      	uxth	r5, r5
   17f76:	e7d8      	b.n	17f2a <_printf_i+0xee>
   17f78:	6809      	ldr	r1, [r1, #0]
   17f7a:	681a      	ldr	r2, [r3, #0]
   17f7c:	0608      	lsls	r0, r1, #24
   17f7e:	d505      	bpl.n	17f8c <_printf_i+0x150>
   17f80:	1d11      	adds	r1, r2, #4
   17f82:	6019      	str	r1, [r3, #0]
   17f84:	6813      	ldr	r3, [r2, #0]
   17f86:	6962      	ldr	r2, [r4, #20]
   17f88:	601a      	str	r2, [r3, #0]
   17f8a:	e006      	b.n	17f9a <_printf_i+0x15e>
   17f8c:	0649      	lsls	r1, r1, #25
   17f8e:	d5f7      	bpl.n	17f80 <_printf_i+0x144>
   17f90:	1d11      	adds	r1, r2, #4
   17f92:	6019      	str	r1, [r3, #0]
   17f94:	6813      	ldr	r3, [r2, #0]
   17f96:	8aa2      	ldrh	r2, [r4, #20]
   17f98:	801a      	strh	r2, [r3, #0]
   17f9a:	2300      	movs	r3, #0
   17f9c:	9e04      	ldr	r6, [sp, #16]
   17f9e:	6123      	str	r3, [r4, #16]
   17fa0:	e054      	b.n	1804c <_printf_i+0x210>
   17fa2:	681a      	ldr	r2, [r3, #0]
   17fa4:	1d11      	adds	r1, r2, #4
   17fa6:	6019      	str	r1, [r3, #0]
   17fa8:	6816      	ldr	r6, [r2, #0]
   17faa:	2100      	movs	r1, #0
   17fac:	6862      	ldr	r2, [r4, #4]
   17fae:	0030      	movs	r0, r6
   17fb0:	f000 f94a 	bl	18248 <memchr>
   17fb4:	2800      	cmp	r0, #0
   17fb6:	d001      	beq.n	17fbc <_printf_i+0x180>
   17fb8:	1b80      	subs	r0, r0, r6
   17fba:	6060      	str	r0, [r4, #4]
   17fbc:	6863      	ldr	r3, [r4, #4]
   17fbe:	6123      	str	r3, [r4, #16]
   17fc0:	2300      	movs	r3, #0
   17fc2:	9a04      	ldr	r2, [sp, #16]
   17fc4:	7013      	strb	r3, [r2, #0]
   17fc6:	e041      	b.n	1804c <_printf_i+0x210>
   17fc8:	6923      	ldr	r3, [r4, #16]
   17fca:	0032      	movs	r2, r6
   17fcc:	9906      	ldr	r1, [sp, #24]
   17fce:	9805      	ldr	r0, [sp, #20]
   17fd0:	9d07      	ldr	r5, [sp, #28]
   17fd2:	47a8      	blx	r5
   17fd4:	1c43      	adds	r3, r0, #1
   17fd6:	d043      	beq.n	18060 <_printf_i+0x224>
   17fd8:	6823      	ldr	r3, [r4, #0]
   17fda:	2500      	movs	r5, #0
   17fdc:	079b      	lsls	r3, r3, #30
   17fde:	d40f      	bmi.n	18000 <_printf_i+0x1c4>
   17fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17fe2:	68e0      	ldr	r0, [r4, #12]
   17fe4:	4298      	cmp	r0, r3
   17fe6:	da3d      	bge.n	18064 <_printf_i+0x228>
   17fe8:	0018      	movs	r0, r3
   17fea:	e03b      	b.n	18064 <_printf_i+0x228>
   17fec:	0022      	movs	r2, r4
   17fee:	2301      	movs	r3, #1
   17ff0:	3219      	adds	r2, #25
   17ff2:	9906      	ldr	r1, [sp, #24]
   17ff4:	9805      	ldr	r0, [sp, #20]
   17ff6:	9e07      	ldr	r6, [sp, #28]
   17ff8:	47b0      	blx	r6
   17ffa:	1c43      	adds	r3, r0, #1
   17ffc:	d030      	beq.n	18060 <_printf_i+0x224>
   17ffe:	3501      	adds	r5, #1
   18000:	68e3      	ldr	r3, [r4, #12]
   18002:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18004:	1a9b      	subs	r3, r3, r2
   18006:	429d      	cmp	r5, r3
   18008:	dbf0      	blt.n	17fec <_printf_i+0x1b0>
   1800a:	e7e9      	b.n	17fe0 <_printf_i+0x1a4>
   1800c:	2d00      	cmp	r5, #0
   1800e:	d0a9      	beq.n	17f64 <_printf_i+0x128>
   18010:	9e04      	ldr	r6, [sp, #16]
   18012:	0028      	movs	r0, r5
   18014:	0039      	movs	r1, r7
   18016:	f7fe fc83 	bl	16920 <__aeabi_uidivmod>
   1801a:	9b03      	ldr	r3, [sp, #12]
   1801c:	3e01      	subs	r6, #1
   1801e:	5c5b      	ldrb	r3, [r3, r1]
   18020:	0028      	movs	r0, r5
   18022:	7033      	strb	r3, [r6, #0]
   18024:	0039      	movs	r1, r7
   18026:	f7fe fbf5 	bl	16814 <__udivsi3>
   1802a:	1e05      	subs	r5, r0, #0
   1802c:	d1f1      	bne.n	18012 <_printf_i+0x1d6>
   1802e:	2f08      	cmp	r7, #8
   18030:	d109      	bne.n	18046 <_printf_i+0x20a>
   18032:	6823      	ldr	r3, [r4, #0]
   18034:	07db      	lsls	r3, r3, #31
   18036:	d506      	bpl.n	18046 <_printf_i+0x20a>
   18038:	6863      	ldr	r3, [r4, #4]
   1803a:	6922      	ldr	r2, [r4, #16]
   1803c:	4293      	cmp	r3, r2
   1803e:	dc02      	bgt.n	18046 <_printf_i+0x20a>
   18040:	2330      	movs	r3, #48	; 0x30
   18042:	3e01      	subs	r6, #1
   18044:	7033      	strb	r3, [r6, #0]
   18046:	9b04      	ldr	r3, [sp, #16]
   18048:	1b9b      	subs	r3, r3, r6
   1804a:	6123      	str	r3, [r4, #16]
   1804c:	9b07      	ldr	r3, [sp, #28]
   1804e:	aa09      	add	r2, sp, #36	; 0x24
   18050:	9300      	str	r3, [sp, #0]
   18052:	0021      	movs	r1, r4
   18054:	9b06      	ldr	r3, [sp, #24]
   18056:	9805      	ldr	r0, [sp, #20]
   18058:	f7ff fe82 	bl	17d60 <_printf_common>
   1805c:	1c43      	adds	r3, r0, #1
   1805e:	d1b3      	bne.n	17fc8 <_printf_i+0x18c>
   18060:	2001      	movs	r0, #1
   18062:	4240      	negs	r0, r0
   18064:	b00b      	add	sp, #44	; 0x2c
   18066:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18068:	00019ce4 	.word	0x00019ce4
   1806c:	00019cd3 	.word	0x00019cd3

00018070 <_putc_r>:
   18070:	b570      	push	{r4, r5, r6, lr}
   18072:	0006      	movs	r6, r0
   18074:	000d      	movs	r5, r1
   18076:	0014      	movs	r4, r2
   18078:	2800      	cmp	r0, #0
   1807a:	d004      	beq.n	18086 <_putc_r+0x16>
   1807c:	6983      	ldr	r3, [r0, #24]
   1807e:	2b00      	cmp	r3, #0
   18080:	d101      	bne.n	18086 <_putc_r+0x16>
   18082:	f7ff fab1 	bl	175e8 <__sinit>
   18086:	4b12      	ldr	r3, [pc, #72]	; (180d0 <_putc_r+0x60>)
   18088:	429c      	cmp	r4, r3
   1808a:	d111      	bne.n	180b0 <_putc_r+0x40>
   1808c:	6874      	ldr	r4, [r6, #4]
   1808e:	68a3      	ldr	r3, [r4, #8]
   18090:	3b01      	subs	r3, #1
   18092:	60a3      	str	r3, [r4, #8]
   18094:	2b00      	cmp	r3, #0
   18096:	da05      	bge.n	180a4 <_putc_r+0x34>
   18098:	69a2      	ldr	r2, [r4, #24]
   1809a:	4293      	cmp	r3, r2
   1809c:	db12      	blt.n	180c4 <_putc_r+0x54>
   1809e:	b2eb      	uxtb	r3, r5
   180a0:	2b0a      	cmp	r3, #10
   180a2:	d00f      	beq.n	180c4 <_putc_r+0x54>
   180a4:	6823      	ldr	r3, [r4, #0]
   180a6:	b2e8      	uxtb	r0, r5
   180a8:	1c5a      	adds	r2, r3, #1
   180aa:	6022      	str	r2, [r4, #0]
   180ac:	701d      	strb	r5, [r3, #0]
   180ae:	bd70      	pop	{r4, r5, r6, pc}
   180b0:	4b08      	ldr	r3, [pc, #32]	; (180d4 <_putc_r+0x64>)
   180b2:	429c      	cmp	r4, r3
   180b4:	d101      	bne.n	180ba <_putc_r+0x4a>
   180b6:	68b4      	ldr	r4, [r6, #8]
   180b8:	e7e9      	b.n	1808e <_putc_r+0x1e>
   180ba:	4b07      	ldr	r3, [pc, #28]	; (180d8 <_putc_r+0x68>)
   180bc:	429c      	cmp	r4, r3
   180be:	d1e6      	bne.n	1808e <_putc_r+0x1e>
   180c0:	68f4      	ldr	r4, [r6, #12]
   180c2:	e7e4      	b.n	1808e <_putc_r+0x1e>
   180c4:	0022      	movs	r2, r4
   180c6:	0029      	movs	r1, r5
   180c8:	0030      	movs	r0, r6
   180ca:	f7ff f8c9 	bl	17260 <__swbuf_r>
   180ce:	e7ee      	b.n	180ae <_putc_r+0x3e>
   180d0:	00019c78 	.word	0x00019c78
   180d4:	00019c98 	.word	0x00019c98
   180d8:	00019c58 	.word	0x00019c58

000180dc <__sread>:
   180dc:	b570      	push	{r4, r5, r6, lr}
   180de:	000c      	movs	r4, r1
   180e0:	250e      	movs	r5, #14
   180e2:	5f49      	ldrsh	r1, [r1, r5]
   180e4:	f000 f8e2 	bl	182ac <_read_r>
   180e8:	2800      	cmp	r0, #0
   180ea:	db03      	blt.n	180f4 <__sread+0x18>
   180ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
   180ee:	181b      	adds	r3, r3, r0
   180f0:	6563      	str	r3, [r4, #84]	; 0x54
   180f2:	bd70      	pop	{r4, r5, r6, pc}
   180f4:	89a3      	ldrh	r3, [r4, #12]
   180f6:	4a02      	ldr	r2, [pc, #8]	; (18100 <__sread+0x24>)
   180f8:	4013      	ands	r3, r2
   180fa:	81a3      	strh	r3, [r4, #12]
   180fc:	e7f9      	b.n	180f2 <__sread+0x16>
   180fe:	46c0      	nop			; (mov r8, r8)
   18100:	ffffefff 	.word	0xffffefff

00018104 <__swrite>:
   18104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18106:	001f      	movs	r7, r3
   18108:	898b      	ldrh	r3, [r1, #12]
   1810a:	0005      	movs	r5, r0
   1810c:	000c      	movs	r4, r1
   1810e:	0016      	movs	r6, r2
   18110:	05db      	lsls	r3, r3, #23
   18112:	d505      	bpl.n	18120 <__swrite+0x1c>
   18114:	230e      	movs	r3, #14
   18116:	5ec9      	ldrsh	r1, [r1, r3]
   18118:	2200      	movs	r2, #0
   1811a:	2302      	movs	r3, #2
   1811c:	f000 f880 	bl	18220 <_lseek_r>
   18120:	89a3      	ldrh	r3, [r4, #12]
   18122:	4a05      	ldr	r2, [pc, #20]	; (18138 <__swrite+0x34>)
   18124:	0028      	movs	r0, r5
   18126:	4013      	ands	r3, r2
   18128:	81a3      	strh	r3, [r4, #12]
   1812a:	0032      	movs	r2, r6
   1812c:	230e      	movs	r3, #14
   1812e:	5ee1      	ldrsh	r1, [r4, r3]
   18130:	003b      	movs	r3, r7
   18132:	f000 f82b 	bl	1818c <_write_r>
   18136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18138:	ffffefff 	.word	0xffffefff

0001813c <__sseek>:
   1813c:	b570      	push	{r4, r5, r6, lr}
   1813e:	000c      	movs	r4, r1
   18140:	250e      	movs	r5, #14
   18142:	5f49      	ldrsh	r1, [r1, r5]
   18144:	f000 f86c 	bl	18220 <_lseek_r>
   18148:	89a3      	ldrh	r3, [r4, #12]
   1814a:	1c42      	adds	r2, r0, #1
   1814c:	d103      	bne.n	18156 <__sseek+0x1a>
   1814e:	4a05      	ldr	r2, [pc, #20]	; (18164 <__sseek+0x28>)
   18150:	4013      	ands	r3, r2
   18152:	81a3      	strh	r3, [r4, #12]
   18154:	bd70      	pop	{r4, r5, r6, pc}
   18156:	2280      	movs	r2, #128	; 0x80
   18158:	0152      	lsls	r2, r2, #5
   1815a:	4313      	orrs	r3, r2
   1815c:	81a3      	strh	r3, [r4, #12]
   1815e:	6560      	str	r0, [r4, #84]	; 0x54
   18160:	e7f8      	b.n	18154 <__sseek+0x18>
   18162:	46c0      	nop			; (mov r8, r8)
   18164:	ffffefff 	.word	0xffffefff

00018168 <__sclose>:
   18168:	b510      	push	{r4, lr}
   1816a:	230e      	movs	r3, #14
   1816c:	5ec9      	ldrsh	r1, [r1, r3]
   1816e:	f000 f821 	bl	181b4 <_close_r>
   18172:	bd10      	pop	{r4, pc}

00018174 <__ascii_wctomb>:
   18174:	1e0b      	subs	r3, r1, #0
   18176:	d004      	beq.n	18182 <__ascii_wctomb+0xe>
   18178:	2aff      	cmp	r2, #255	; 0xff
   1817a:	d904      	bls.n	18186 <__ascii_wctomb+0x12>
   1817c:	238a      	movs	r3, #138	; 0x8a
   1817e:	6003      	str	r3, [r0, #0]
   18180:	3b8b      	subs	r3, #139	; 0x8b
   18182:	0018      	movs	r0, r3
   18184:	4770      	bx	lr
   18186:	700a      	strb	r2, [r1, #0]
   18188:	2301      	movs	r3, #1
   1818a:	e7fa      	b.n	18182 <__ascii_wctomb+0xe>

0001818c <_write_r>:
   1818c:	b570      	push	{r4, r5, r6, lr}
   1818e:	0005      	movs	r5, r0
   18190:	0008      	movs	r0, r1
   18192:	0011      	movs	r1, r2
   18194:	2200      	movs	r2, #0
   18196:	4c06      	ldr	r4, [pc, #24]	; (181b0 <_write_r+0x24>)
   18198:	6022      	str	r2, [r4, #0]
   1819a:	001a      	movs	r2, r3
   1819c:	f7fd f93e 	bl	1541c <_write>
   181a0:	1c43      	adds	r3, r0, #1
   181a2:	d103      	bne.n	181ac <_write_r+0x20>
   181a4:	6823      	ldr	r3, [r4, #0]
   181a6:	2b00      	cmp	r3, #0
   181a8:	d000      	beq.n	181ac <_write_r+0x20>
   181aa:	602b      	str	r3, [r5, #0]
   181ac:	bd70      	pop	{r4, r5, r6, pc}
   181ae:	46c0      	nop			; (mov r8, r8)
   181b0:	20000e08 	.word	0x20000e08

000181b4 <_close_r>:
   181b4:	2300      	movs	r3, #0
   181b6:	b570      	push	{r4, r5, r6, lr}
   181b8:	4c06      	ldr	r4, [pc, #24]	; (181d4 <_close_r+0x20>)
   181ba:	0005      	movs	r5, r0
   181bc:	0008      	movs	r0, r1
   181be:	6023      	str	r3, [r4, #0]
   181c0:	f7f8 fdd4 	bl	10d6c <_close>
   181c4:	1c43      	adds	r3, r0, #1
   181c6:	d103      	bne.n	181d0 <_close_r+0x1c>
   181c8:	6823      	ldr	r3, [r4, #0]
   181ca:	2b00      	cmp	r3, #0
   181cc:	d000      	beq.n	181d0 <_close_r+0x1c>
   181ce:	602b      	str	r3, [r5, #0]
   181d0:	bd70      	pop	{r4, r5, r6, pc}
   181d2:	46c0      	nop			; (mov r8, r8)
   181d4:	20000e08 	.word	0x20000e08

000181d8 <_fstat_r>:
   181d8:	2300      	movs	r3, #0
   181da:	b570      	push	{r4, r5, r6, lr}
   181dc:	4c06      	ldr	r4, [pc, #24]	; (181f8 <_fstat_r+0x20>)
   181de:	0005      	movs	r5, r0
   181e0:	0008      	movs	r0, r1
   181e2:	0011      	movs	r1, r2
   181e4:	6023      	str	r3, [r4, #0]
   181e6:	f7f8 fdcb 	bl	10d80 <_fstat>
   181ea:	1c43      	adds	r3, r0, #1
   181ec:	d103      	bne.n	181f6 <_fstat_r+0x1e>
   181ee:	6823      	ldr	r3, [r4, #0]
   181f0:	2b00      	cmp	r3, #0
   181f2:	d000      	beq.n	181f6 <_fstat_r+0x1e>
   181f4:	602b      	str	r3, [r5, #0]
   181f6:	bd70      	pop	{r4, r5, r6, pc}
   181f8:	20000e08 	.word	0x20000e08

000181fc <_isatty_r>:
   181fc:	2300      	movs	r3, #0
   181fe:	b570      	push	{r4, r5, r6, lr}
   18200:	4c06      	ldr	r4, [pc, #24]	; (1821c <_isatty_r+0x20>)
   18202:	0005      	movs	r5, r0
   18204:	0008      	movs	r0, r1
   18206:	6023      	str	r3, [r4, #0]
   18208:	f7f8 fdc8 	bl	10d9c <_isatty>
   1820c:	1c43      	adds	r3, r0, #1
   1820e:	d103      	bne.n	18218 <_isatty_r+0x1c>
   18210:	6823      	ldr	r3, [r4, #0]
   18212:	2b00      	cmp	r3, #0
   18214:	d000      	beq.n	18218 <_isatty_r+0x1c>
   18216:	602b      	str	r3, [r5, #0]
   18218:	bd70      	pop	{r4, r5, r6, pc}
   1821a:	46c0      	nop			; (mov r8, r8)
   1821c:	20000e08 	.word	0x20000e08

00018220 <_lseek_r>:
   18220:	b570      	push	{r4, r5, r6, lr}
   18222:	0005      	movs	r5, r0
   18224:	0008      	movs	r0, r1
   18226:	0011      	movs	r1, r2
   18228:	2200      	movs	r2, #0
   1822a:	4c06      	ldr	r4, [pc, #24]	; (18244 <_lseek_r+0x24>)
   1822c:	6022      	str	r2, [r4, #0]
   1822e:	001a      	movs	r2, r3
   18230:	f7f8 fdbd 	bl	10dae <_lseek>
   18234:	1c43      	adds	r3, r0, #1
   18236:	d103      	bne.n	18240 <_lseek_r+0x20>
   18238:	6823      	ldr	r3, [r4, #0]
   1823a:	2b00      	cmp	r3, #0
   1823c:	d000      	beq.n	18240 <_lseek_r+0x20>
   1823e:	602b      	str	r3, [r5, #0]
   18240:	bd70      	pop	{r4, r5, r6, pc}
   18242:	46c0      	nop			; (mov r8, r8)
   18244:	20000e08 	.word	0x20000e08

00018248 <memchr>:
   18248:	b2c9      	uxtb	r1, r1
   1824a:	1882      	adds	r2, r0, r2
   1824c:	4290      	cmp	r0, r2
   1824e:	d101      	bne.n	18254 <memchr+0xc>
   18250:	2000      	movs	r0, #0
   18252:	4770      	bx	lr
   18254:	7803      	ldrb	r3, [r0, #0]
   18256:	428b      	cmp	r3, r1
   18258:	d0fb      	beq.n	18252 <memchr+0xa>
   1825a:	3001      	adds	r0, #1
   1825c:	e7f6      	b.n	1824c <memchr+0x4>

0001825e <_realloc_r>:
   1825e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18260:	0007      	movs	r7, r0
   18262:	000d      	movs	r5, r1
   18264:	0016      	movs	r6, r2
   18266:	2900      	cmp	r1, #0
   18268:	d105      	bne.n	18276 <_realloc_r+0x18>
   1826a:	0011      	movs	r1, r2
   1826c:	f7fe fd1e 	bl	16cac <_malloc_r>
   18270:	0004      	movs	r4, r0
   18272:	0020      	movs	r0, r4
   18274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18276:	2a00      	cmp	r2, #0
   18278:	d103      	bne.n	18282 <_realloc_r+0x24>
   1827a:	f7fe fccd 	bl	16c18 <_free_r>
   1827e:	0034      	movs	r4, r6
   18280:	e7f7      	b.n	18272 <_realloc_r+0x14>
   18282:	f000 f827 	bl	182d4 <_malloc_usable_size_r>
   18286:	002c      	movs	r4, r5
   18288:	4286      	cmp	r6, r0
   1828a:	d9f2      	bls.n	18272 <_realloc_r+0x14>
   1828c:	0031      	movs	r1, r6
   1828e:	0038      	movs	r0, r7
   18290:	f7fe fd0c 	bl	16cac <_malloc_r>
   18294:	1e04      	subs	r4, r0, #0
   18296:	d0ec      	beq.n	18272 <_realloc_r+0x14>
   18298:	0029      	movs	r1, r5
   1829a:	0032      	movs	r2, r6
   1829c:	f7fe fc98 	bl	16bd0 <memcpy>
   182a0:	0029      	movs	r1, r5
   182a2:	0038      	movs	r0, r7
   182a4:	f7fe fcb8 	bl	16c18 <_free_r>
   182a8:	e7e3      	b.n	18272 <_realloc_r+0x14>
	...

000182ac <_read_r>:
   182ac:	b570      	push	{r4, r5, r6, lr}
   182ae:	0005      	movs	r5, r0
   182b0:	0008      	movs	r0, r1
   182b2:	0011      	movs	r1, r2
   182b4:	2200      	movs	r2, #0
   182b6:	4c06      	ldr	r4, [pc, #24]	; (182d0 <_read_r+0x24>)
   182b8:	6022      	str	r2, [r4, #0]
   182ba:	001a      	movs	r2, r3
   182bc:	f7fd f884 	bl	153c8 <_read>
   182c0:	1c43      	adds	r3, r0, #1
   182c2:	d103      	bne.n	182cc <_read_r+0x20>
   182c4:	6823      	ldr	r3, [r4, #0]
   182c6:	2b00      	cmp	r3, #0
   182c8:	d000      	beq.n	182cc <_read_r+0x20>
   182ca:	602b      	str	r3, [r5, #0]
   182cc:	bd70      	pop	{r4, r5, r6, pc}
   182ce:	46c0      	nop			; (mov r8, r8)
   182d0:	20000e08 	.word	0x20000e08

000182d4 <_malloc_usable_size_r>:
   182d4:	1f0b      	subs	r3, r1, #4
   182d6:	681b      	ldr	r3, [r3, #0]
   182d8:	1f18      	subs	r0, r3, #4
   182da:	2b00      	cmp	r3, #0
   182dc:	da01      	bge.n	182e2 <_malloc_usable_size_r+0xe>
   182de:	580b      	ldr	r3, [r1, r0]
   182e0:	18c0      	adds	r0, r0, r3
   182e2:	4770      	bx	lr
   182e4:	50504128 	.word	0x50504128
   182e8:	52452829 	.word	0x52452829
   182ec:	255b2952 	.word	0x255b2952
   182f0:	255b5d73 	.word	0x255b5d73
   182f4:	00005d64 	.word	0x00005d64
   182f8:	61766e69 	.word	0x61766e69
   182fc:	6564696c 	.word	0x6564696c
   18300:	636f6920 	.word	0x636f6920
   18304:	6320746c 	.word	0x6320746c
   18308:	0000646d 	.word	0x0000646d

0001830c <__FUNCTION__.14455>:
   1830c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   1831c:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   1832c:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
   1833c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1834c:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   1835c:	74207075 63206568 00706968 66696828     up the chip.(hif
   1836c:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
   1837c:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
   1838c:	66696828 64612029 73657264 75622073     (hif) address bu
   1839c:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
   183ac:	70757272 20646574 6b636170 53207465     rrupted packet S
   183bc:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   183cc:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   183dc:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   183ec:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   183fc:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
   1840c:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   1841c:	73696765 65726574 00000064 2061744f     egistered...Ota 
   1842c:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
   1843c:	69676572 72657473 00006465 70797243     registered..Cryp
   1844c:	63206f74 626c6c61 206b6361 6e207369     to callback is n
   1845c:	7220746f 73696765 65726574 00000064     ot registered...
   1846c:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
   1847c:	6f6e2073 65722074 74736967 64657265     s not registered
   1848c:	00000000 66696828 6e692029 696c6176     ....(hif) invali
   1849c:	72672064 2070756f 00004449 66696828     d group ID..(hif
   184ac:	6f682029 61207473 64207070 276e6469     ) host app didn'
   184bc:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
   184cc:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
   184dc:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   184ec:	61462029 2065736c 65746e69 70757272     ) False interrup
   184fc:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   1850c:	74206c69 6552206f 69206461 7265746e     il to Read inter
   1851c:	74707572 67657220 00000000 46494828     rupt reg....(HIF
   1852c:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   1853c:	746e6920 75727265 25207470 72742064      interrupt %d tr
   1854c:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   1855c:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   1856c:	72612064 656d7567 0000746e 20505041     d argument..APP 
   1857c:	75716552 65747365 69532064 6920657a     Requested Size i
   1858c:	616c2073 72656772 61687420 6874206e     s larger than th
   1859c:	65722065 65766963 75622064 72656666     e recived buffer
   185ac:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
   185bc:	00000000 20505041 75716552 65747365     ....APP Requeste
   185cc:	64412064 73657264 65622073 646e6f79     d Address beyond
   185dc:	65687420 63657220 64657669 66756220      the recived buf
   185ec:	20726566 72646461 20737365 20646e61     fer address and 
   185fc:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
   1860c:	0000000a 00009958 00009928 00009920     ....X...(... ...
   1861c:	00009938 00009930 00009950 00009940     8...0...P...@...
   1862c:	00009948                                H...

00018630 <__FUNCTION__.13058>:
   18630:	5f666968 646e6573 00000000              hif_send....

0001863c <__FUNCTION__.13068>:
   1863c:	5f666968 00727369                       hif_isr.

00018644 <__FUNCTION__.13074>:
   18644:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00018654 <__FUNCTION__.13086>:
   18654:	5f666968 65636572 00657669              hif_receive.

00018660 <__FUNCTION__.13102>:
   18660:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   18670:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   18680:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   18690:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   186a0:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   186b0:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   186c0:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   186d0:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   186e0:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   186f0:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   18700:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   18710:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   18720:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   18730:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   18740:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   18750:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   18760:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   18770:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   18780:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   18790:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   187a0:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   187b0:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   187c0:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   187d0:	73747365 72657020 61637320 6c73206e     ests per scan sl
   187e0:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   187f0:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   18800:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   18810:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   18820:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   18830:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   18840:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   18850:	6e694d20 69726420 20726576 20726576      Min driver ver 
   18860:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   18870:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   18880:	0000000a 313a3232 30333a37 00000000     ....22:17:30....
   18890:	20727041 32203631 00373130 76697244     Apr 16 2017.Driv
   188a0:	62207265 746c6975 20746120 25097325     er built at %s.%
   188b0:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   188c0:	7277616d 65562065 6f697372 0000006e     mawre Version...
   188d0:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   188e0:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
   188f0:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
   18900:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
   18910:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   18920:	65646e69 64252078 0000000a 61766e49     index %d....Inva
   18930:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
   18940:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
   18950:	53502074 656b204b 656c2079 6874676e     t PSK key length
   18960:	00000000 65646e75 656e6966 65732064     ....undefined se
   18970:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
   18980:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
   18990:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
   189a0:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
   189b0:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
   189c0:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
   189d0:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   189e0:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   189f0:	66754220 20726566 65637865 64656465      Buffer exceeded
   18a00:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   18a10:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   18a20:	00000000                                ....

00018a24 <__FUNCTION__.13037>:
   18a24:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00018a30 <__FUNCTION__.13066>:
   18a30:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00018a40 <__FUNCTION__.13094>:
   18a40:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   18a50:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   18a60:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   18a70:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   18a80:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   18a90:	20656874 70696863 00000000 50504128     the chip....(APP
   18aa0:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
   18ab0:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
   18ac0:	6c696166 74206465 6564206f 696e692d     failed to de-ini
   18ad0:	6c616974 00657a69                       tialize.

00018ad8 <__FUNCTION__.12900>:
   18ad8:	70696863 6b61775f 00000065              chip_wake...

00018ae4 <__FUNCTION__.12949>:
   18ae4:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   18af4:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   18b04:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   18b14:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   18b24:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   18b34:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   18b44:	6e65206f 656c6261 746e6920 75727265     o enable interru
   18b54:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   18b64:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   18b74:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   18b84:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   18b94:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   18ba4:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   18bb4:	75622074 00000073                       t bus...

00018bbc <__FUNCTION__.12947>:
   18bbc:	645f6d6e 695f7672 0074696e              nm_drv_init.

00018bc8 <__FUNCTION__.12954>:
   18bc8:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00018bd8 <crc7_syndrome_table>:
   18bd8:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   18be8:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   18bf8:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   18c08:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   18c18:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   18c28:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   18c38:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   18c48:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   18c58:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   18c68:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   18c78:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   18c88:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   18c98:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   18ca8:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   18cb8:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   18cc8:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   18cd8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   18ce8:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   18cf8:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   18d08:	73756220 72726520 2e2e726f 0000002e      bus error......
   18d18:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18d28:	75622064 72652073 2e726f72 00002e2e     d bus error.....
   18d38:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18d48:	61642064 72206174 6f707365 2065736e     d data response 
   18d58:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
   18d68:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18d78:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   18d88:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   18d98:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   18da8:	656c6961 61642064 72206174 6f707365     ailed data respo
   18db8:	2065736e 64616572 7562202c 72652073     nse read, bus er
   18dc8:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   18dd8:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   18de8:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   18df8:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   18e08:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   18e18:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   18e28:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   18e38:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   18e48:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   18e58:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   18e68:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   18e78:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   18e88:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   18e98:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   18ea8:	656c6961 61642064 62206174 6b636f6c     ailed data block
   18eb8:	69727720 202c6574 20737562 6f727265      write, bus erro
   18ec8:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   18ed8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   18ee8:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   18ef8:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   18f08:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18f18:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   18f28:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   18f38:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   18f48:	65722064 6e6f7073 202c6573 74697277     d response, writ
   18f58:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   18f68:	00000000 65736552 6e612074 65722064     ....Reset and re
   18f78:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   18f88:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18f98:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   18fa8:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   18fb8:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   18fc8:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   18fd8:	69727720 62206574 6b636f6c 30252820      write block (%0
   18fe8:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   18ff8:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   19008:	61746164 69727720 2e2e6574 0000002e     data write......
   19018:	65736552 6e612074 65722064 20797274     Reset and retry 
   19028:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   19038:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   19048:	72202c64 20646165 20676572 38302528     d, read reg (%08
   19058:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   19068:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   19078:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   19088:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   19098:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   190a8:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   190b8:	6e612074 65722064 20797274 25206425     t and retry %d %
   190c8:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   190d8:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   190e8:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   190f8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19108:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   19118:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   19128:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   19138:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   19148:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   19158:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19168:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   19178:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   19188:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   19198:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   191a8:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   191b8:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   191c8:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   191d8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   191e8:	6e692064 6e726574 77206c61 65746972     d internal write
   191f8:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   19208:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19218:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   19228:	64692070 002e2e2e 0000b540 0000b540     p id....@...@...
   19238:	0000b5d0 0000b494 0000b4da 0000b4fc     ................
   19248:	0000b582 0000b582 0000b63c 0000b468     ........<...h...
   19258:	0000b696 0000b696 0000b696 0000b696     ................
   19268:	0000b51e                                ....

0001926c <__FUNCTION__.12253>:
   1926c:	5f697073 00646d63                       spi_cmd.

00019274 <__FUNCTION__.12260>:
   19274:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00019284 <__FUNCTION__.12269>:
   19284:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00019290 <__FUNCTION__.12285>:
   19290:	5f697073 61746164 6165725f 00000064     spi_data_read...

000192a0 <__FUNCTION__.12300>:
   192a0:	5f697073 61746164 6972775f 00006574     spi_data_write..

000192b0 <__FUNCTION__.12312>:
   192b0:	5f697073 74697277 65725f65 00000067     spi_write_reg...

000192c0 <__FUNCTION__.12323>:
   192c0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

000192d0 <__FUNCTION__.12335>:
   192d0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

000192e0 <__FUNCTION__.12348>:
   192e0:	735f6d6e 725f6970 00646165              nm_spi_read.

000192ec <__FUNCTION__.12369>:
   192ec:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   192fc:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   1930c:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   1931c:	25207465 65732064 6f697373 4449206e     et %d session ID
   1932c:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   1933c:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   1934c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1935c:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   1936c:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   1937c:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   1938c:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   1939c:	204c5353 6b636f53 00007465              SSL Socket..

000193a8 <tcc_modules>:
   193a8:	42002000 42002400 42002800              . .B.$.B.(.B

000193b4 <_tcc_gclk_ids>:
   193b4:	001b1a1a                                ....

000193b8 <_tcc_apbcmasks>:
   193b8:	00000100 00000200 00000400              ............

000193c4 <_tcc_maxs>:
   193c4:	00ffffff 00ffffff 0000ffff              ............

000193d0 <_tcc_cc_nums>:
   193d0:	00020204                                ....

000193d4 <_tcc_ow_nums>:
   193d4:	00020408                                ....

000193d8 <_tcc_intflag>:
   193d8:	00000001 00000002 00000004 00000008     ................
   193e8:	00001000 00002000 00004000 00008000     ..... ...@......
   193f8:	00010000 00020000 00040000 00080000     ................
   19408:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   19418:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   19428:	20544547 00000000 54534f50 00000020     GET ....POST ...
   19438:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   19448:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   19458:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   19468:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   19478:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   19488:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   19498:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   194a8:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   194b8:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   194c8:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   194d8:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   194e8:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   194f8:	676e654c 203a6874 00000000 33323130     Length: ....0123
   19508:	37363534 62613938 66656463 6e617254     456789abcdefTran
   19518:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   19528:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   19538:	50545448 0000002f 00000d31 0000f0f2     HTTP/...1.......
   19548:	0000f0ec 0000f0e6 0000f0e0 0000f0f8     ................
   19558:	0000f0da 0000f0f8 0000f0d4 0000f0ce     ................
   19568:	0000f0f8 0000f0c8 0000f0c8 0000f0c2     ................
   19578:	0000f0bc 0000f0b6 42002000 42002400     ......... .B.$.B
   19588:	42002800 0001106e 00011072 00011076     .(.Bn...r...v...
   19598:	0001107a 0001107e 00011082 00011086     z...~...........
   195a8:	0001108a 0001108e 00011092 000110ea     ................
   195b8:	000110f0 000110f6 000110fc 000110fc     ................
   195c8:	00011102 00011102 00011102 00011108     ................
   195d8:	0001110e 00011cd4 00011cd4 00011cc8     ................
   195e8:	00011cd4 00011cc8 00011ca2 00011ca2     ................
   195f8:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   19608:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   19618:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   19628:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   19638:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   19648:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   19658:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   19668:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   19678:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   19688:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   19698:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   196a8:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   196b8:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   196c8:	00011cd4 00011cd4 00011cd4 00011cd4     ................
   196d8:	00011cd4 00011cc8 00011cc8 00011cde     ................
   196e8:	00011cde 00011cde 00011cde 42000800     ...............B
   196f8:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   19708:	42001c00 0c0b0a09 00000e0d 0001463e     ...B........>F..
   19718:	000146b6 000146b6 0001465c 00014656     .F...F..\F..VF..
   19728:	00014662 00014644 00014668 0001469c     bF..DF..hF...F..
   19738:	00014980 000149d0 000149d0 000149cc     .I...I...I...I..
   19748:	00014972 00014992 00014962 000149a4     rI...I..bI...I..
   19758:	000149b6 00014a1e 00014a4c 00014a4c     .I...J..LJ..LJ..
   19768:	00014a48 00014a18 00014a24 00014a12     HJ...J..$J...J..
   19778:	00014a2a 00014a30 70696843 64696420     *J..0J..Chip did
   19788:	7720746e 20656b61 0000000d 72617473     nt wake ....star
   19798:	6f645f74 6f6c6e77 203a6461 462d6957     t_download: Wi-F
   197a8:	73692069 746f6e20 6e6f6320 7463656e     i is not connect
   197b8:	0d2e6465 00000000 72617473 6f645f74     ed......start_do
   197c8:	6f6c6e77 203a6461 75716572 20747365     wnload: request 
   197d8:	73207369 20746e65 65726c61 2e796461     is sent already.
   197e8:	0000000d 72617473 6f645f74 6f6c6e77     ....start_downlo
   197f8:	203a6461 6e6e7572 20676e69 6e776f64     ad: running down
   19808:	64616f6c 726c6120 79646165 00000d2e     load already....
   19818:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   19828:	646e6573 20676e69 50545448 71657220     sending HTTP req
   19838:	74736575 0d2e2e2e 00000000 70747468     uest........http
   19848:	2f2f3a73 2e777777 73616573 6570752e     s://www.seas.upe
   19858:	652e6e6e 7e2f7564 6863696e 2f736e69     nn.edu/~nichins/
   19868:	74747562 6c5f6e6f 2e326465 006e6962     button_led2.bin.
   19878:	72617473 6f645f74 6f6c6e77 43206461     start_download C
   19888:	203a4352 646e6573 20676e69 50545448     RC: sending HTTP
   19898:	71657220 74736575 0d2e2e2e 00000000      request........
   198a8:	70747468 2f2f3a73 2e777777 73616573     https://www.seas
   198b8:	6570752e 652e6e6e 7e2f7564 6863696e     .upenn.edu/~nich
   198c8:	2f736e69 74747562 6c5f6e6f 5f326465     ins/button_led2_
   198d8:	2e637263 006e6962 70747468 696c635f     crc.bin.http_cli
   198e8:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   198f8:	63205054 6e65696c 6f732074 74656b63     TP client socket
   19908:	6e6f6320 7463656e 0d2e6465 00000000      connected......
   19918:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   19928:	6b636162 6572203a 73657571 6f632074     back: request co
   19938:	656c706d 2e646574 0000000d 70747468     mpleted.....http
   19948:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   19958:	6572203a 76696563 72206465 6f707365     : received respo
   19968:	2065736e 64207525 20617461 657a6973     nse %u data size
   19978:	0d752520 0000000a 6c6c6143 6b636162      %u.....Callback
   19988:	5243203a 6f642043 6f6c6e77 2e2e6461     : CRC download..
   19998:	2e2e2e2e 0000000d 65636552 64657669     ........Received
   199a8:	0d782520 0000000a 70747468 696c635f      %x.....http_cli
   199b8:	5f746e65 6c6c6163 6b636162 5548435f     ent_callback_CHU
   199c8:	44454b4e 54414420 72203a41 69656365     NKED DATA: recei
   199d8:	20646576 70736572 65736e6f 74616420     ved response dat
   199e8:	69732061 2520657a 000a0d75 73726946     a size %u...Firs
   199f8:	6c622074 206b636f 676e656c 25206874     t block length %
   19a08:	52432064 25203a43 000a0d75 636f6c42     d CRC: %u...Bloc
   19a18:	656c206b 6874676e 20642520 3a435243     k length %d CRC:
   19a28:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   19a38:	5f746e65 6c6c6163 6b636162 6964203a     ent_callback: di
   19a48:	6e6f6373 7463656e 206e6f69 73616572     sconnection reas
   19a58:	253a6e6f 000a0d64 6f736572 5f65766c     on:%d...resolve_
   19a68:	203a6263 49207325 64612050 73657264     cb: %s IP addres
   19a78:	73692073 2e642520 252e6425 64252e64     s is %d.%d.%d.%d
   19a88:	0a0d0a0d 00000000 69666977 3a62635f     ........wifi_cb:
   19a98:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   19aa8:	0d444554 00000000 69666977 3a62635f     TED.....wifi_cb:
   19ab8:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   19ac8:	5443454e 000d4445 636d6f63 31747361     NECTED..comcast1
   19ad8:	00213332 636d6f43 2d747361 62616c78     23!.Comcast-xlab
   19ae8:	342e322d 00000000 69666977 3a62635f     -2.4....wifi_cb:
   19af8:	20504920 72646461 20737365 25207369      IP address is %
   19b08:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
   19b18:	666e6f63 72756769 74685f65 635f7074     configure_http_c
   19b28:	6e65696c 48203a74 20505454 65696c63     lient: HTTP clie
   19b38:	6920746e 6974696e 7a696c61 6f697461     nt initializatio
   19b48:	6166206e 64656c69 72282021 25207365     n failed! (res %
   19b58:	0a0d2964 00000000 6e776f64 64616f6c     d)......download
   19b68:	7269665f 7261776d 63203a65 656e6e6f     _firmware: conne
   19b78:	6e697463 6f742067 46695720 50412069     cting to WiFi AP
   19b88:	2e732520 0a0d2e2e 00000000 6e776f64      %s.........down
   19b98:	64616f6c 7269665f 7261776d 64203a65     load_firmware: d
   19ba8:	2e656e6f 0000000d 636c6143 74616c75     one.....Calculat
   19bb8:	43206465 203a4352 0a0d7825 00000000     ed CRC: %x......
   19bc8:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   19bd8:	2074696e 6c6c6163 72726520 2021726f     nit call error! 
   19be8:	73657228 29642520 00000a0d 63657845     (res %d)....Exec
   19bf8:	6e697475 6d692067 3a656761 2c642520     uting image: %d,
   19c08:	204c4420 203a6f74 0a0d6425 00000000      DL to: %d......
   19c18:	4d200d0a 3a6e6961 6e6f4420 6f642065     .. Main: Done do
   19c28:	6f6c6e77 6e696461 69662067 61776d72     wnloading firmwa
   19c38:	0d0a6572 00000000 00015f7c 00015f86     re......|_..._..
   19c48:	00015f96 0001601c 00016236              ._...`..6b..

00019c54 <_global_impure_ptr>:
   19c54:	20000020                                 .. 

00019c58 <__sf_fake_stderr>:
	...

00019c78 <__sf_fake_stdin>:
	...

00019c98 <__sf_fake_stdout>:
	...
   19cb8:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   19cc8:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   19cd8:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   19ce8:	37363534 62613938 66656463 20200000              456789abcdef.

00019cf5 <_ctype_>:
   19cf5:	20202000 20202020 28282020 20282828     .         ((((( 
   19d05:	20202020 20202020 20202020 20202020                     
   19d15:	10108820 10101010 10101010 10101010      ...............
   19d25:	04040410 04040404 10040404 10101010     ................
   19d35:	41411010 41414141 01010101 01010101     ..AAAAAA........
   19d45:	01010101 01010101 01010101 10101010     ................
   19d55:	42421010 42424242 02020202 02020202     ..BBBBBB........
   19d65:	02020202 02020202 02020202 10101010     ................
   19d75:	00000020 00000000 00000000 00000000      ...............
	...

00019df8 <_init>:
   19df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19dfa:	46c0      	nop			; (mov r8, r8)
   19dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19dfe:	bc08      	pop	{r3}
   19e00:	469e      	mov	lr, r3
   19e02:	4770      	bx	lr

00019e04 <__init_array_start>:
   19e04:	000080dd 	.word	0x000080dd

00019e08 <_fini>:
   19e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e0a:	46c0      	nop			; (mov r8, r8)
   19e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19e0e:	bc08      	pop	{r3}
   19e10:	469e      	mov	lr, r3
   19e12:	4770      	bx	lr

00019e14 <__fini_array_start>:
   19e14:	000080b5 	.word	0x000080b5
