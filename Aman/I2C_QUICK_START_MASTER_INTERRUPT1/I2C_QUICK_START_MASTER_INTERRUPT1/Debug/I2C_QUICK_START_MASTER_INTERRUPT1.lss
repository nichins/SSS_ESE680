
I2C_QUICK_START_MASTER_INTERRUPT1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a20  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000078  20000000  00004a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000108  20000078  00004a98  00020078  2**2
                  ALLOC
  3 .stack        00002000  20000180  00004ba0  00020078  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
  6 .debug_info   00029f84  00000000  00000000  000200f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c99  00000000  00000000  0004a07d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000594e  00000000  00000000  0004dd16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000598  00000000  00000000  00053664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000608  00000000  00000000  00053bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a789  00000000  00000000  00054204  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c84c  00000000  00000000  0006e98d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008903f  00000000  00000000  0007b1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016a8  00000000  00000000  00104218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 21 00 20 f1 18 00 00 ed 18 00 00 ed 18 00 00     .!. ............
	...
      2c:	ed 18 00 00 00 00 00 00 00 00 00 00 ed 18 00 00     ................
      3c:	ed 18 00 00 ed 18 00 00 ed 18 00 00 ed 18 00 00     ................
      4c:	ed 18 00 00 ed 18 00 00 ed 18 00 00 ed 18 00 00     ................
      5c:	ed 18 00 00 ed 18 00 00 65 0d 00 00 75 0d 00 00     ........e...u...
      6c:	85 0d 00 00 95 0d 00 00 a5 0d 00 00 b5 0d 00 00     ................
      7c:	ed 18 00 00 ed 18 00 00 ed 18 00 00 ed 18 00 00     ................
      8c:	ed 18 00 00 ed 18 00 00 00 00 00 00 00 00 00 00     ................
      9c:	ed 18 00 00 ed 18 00 00 ed 18 00 00 ed 18 00 00     ................
      ac:	ed 18 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000078 	.word	0x20000078
      d4:	00000000 	.word	0x00000000
      d8:	00004a20 	.word	0x00004a20

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000007c 	.word	0x2000007c
     108:	00004a20 	.word	0x00004a20
     10c:	00004a20 	.word	0x00004a20
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	0000167d 	.word	0x0000167d
     140:	00001d31 	.word	0x00001d31
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     180:	4b0c      	ldr	r3, [pc, #48]	; (1b4 <cpu_irq_enter_critical+0x34>)
     182:	681b      	ldr	r3, [r3, #0]
     184:	2b00      	cmp	r3, #0
     186:	d106      	bne.n	196 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     188:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     18c:	2b00      	cmp	r3, #0
     18e:	d007      	beq.n	1a0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     190:	2200      	movs	r2, #0
     192:	4b09      	ldr	r3, [pc, #36]	; (1b8 <cpu_irq_enter_critical+0x38>)
     194:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     196:	4a07      	ldr	r2, [pc, #28]	; (1b4 <cpu_irq_enter_critical+0x34>)
     198:	6813      	ldr	r3, [r2, #0]
     19a:	3301      	adds	r3, #1
     19c:	6013      	str	r3, [r2, #0]
}
     19e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1a0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1a2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1a6:	2200      	movs	r2, #0
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <cpu_irq_enter_critical+0x3c>)
     1aa:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1ac:	3201      	adds	r2, #1
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <cpu_irq_enter_critical+0x38>)
     1b0:	701a      	strb	r2, [r3, #0]
     1b2:	e7f0      	b.n	196 <cpu_irq_enter_critical+0x16>
     1b4:	20000094 	.word	0x20000094
     1b8:	20000098 	.word	0x20000098
     1bc:	20000008 	.word	0x20000008

000001c0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <cpu_irq_leave_critical+0x24>)
     1c2:	681a      	ldr	r2, [r3, #0]
     1c4:	3a01      	subs	r2, #1
     1c6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1c8:	681b      	ldr	r3, [r3, #0]
     1ca:	2b00      	cmp	r3, #0
     1cc:	d109      	bne.n	1e2 <cpu_irq_leave_critical+0x22>
     1ce:	4b06      	ldr	r3, [pc, #24]	; (1e8 <cpu_irq_leave_critical+0x28>)
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2b00      	cmp	r3, #0
     1d4:	d005      	beq.n	1e2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     1d6:	2201      	movs	r2, #1
     1d8:	4b04      	ldr	r3, [pc, #16]	; (1ec <cpu_irq_leave_critical+0x2c>)
     1da:	701a      	strb	r2, [r3, #0]
     1dc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1e0:	b662      	cpsie	i
	}
}
     1e2:	4770      	bx	lr
     1e4:	20000094 	.word	0x20000094
     1e8:	20000098 	.word	0x20000098
     1ec:	20000008 	.word	0x20000008

000001f0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1f2:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1f4:	ac01      	add	r4, sp, #4
     1f6:	2501      	movs	r5, #1
     1f8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1fa:	2700      	movs	r7, #0
     1fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1fe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     200:	0021      	movs	r1, r4
     202:	2017      	movs	r0, #23
     204:	4e06      	ldr	r6, [pc, #24]	; (220 <system_board_init+0x30>)
     206:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     208:	2280      	movs	r2, #128	; 0x80
     20a:	0412      	lsls	r2, r2, #16
     20c:	4b05      	ldr	r3, [pc, #20]	; (224 <system_board_init+0x34>)
     20e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     210:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     212:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     214:	0021      	movs	r1, r4
     216:	2037      	movs	r0, #55	; 0x37
     218:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     21a:	b003      	add	sp, #12
     21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	00000229 	.word	0x00000229
     224:	41004400 	.word	0x41004400

00000228 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     228:	b500      	push	{lr}
     22a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     22c:	ab01      	add	r3, sp, #4
     22e:	2280      	movs	r2, #128	; 0x80
     230:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     232:	780a      	ldrb	r2, [r1, #0]
     234:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     236:	784a      	ldrb	r2, [r1, #1]
     238:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     23a:	788a      	ldrb	r2, [r1, #2]
     23c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     23e:	0019      	movs	r1, r3
     240:	4b01      	ldr	r3, [pc, #4]	; (248 <port_pin_set_config+0x20>)
     242:	4798      	blx	r3
}
     244:	b003      	add	sp, #12
     246:	bd00      	pop	{pc}
     248:	0000188d 	.word	0x0000188d

0000024c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     24c:	b5f0      	push	{r4, r5, r6, r7, lr}
     24e:	46d6      	mov	lr, sl
     250:	464f      	mov	r7, r9
     252:	4646      	mov	r6, r8
     254:	b5c0      	push	{r6, r7, lr}
     256:	b08a      	sub	sp, #40	; 0x28
     258:	0006      	movs	r6, r0
     25a:	000f      	movs	r7, r1
     25c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     25e:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     260:	0008      	movs	r0, r1
     262:	4ba0      	ldr	r3, [pc, #640]	; (4e4 <i2c_master_init+0x298>)
     264:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     266:	4aa0      	ldr	r2, [pc, #640]	; (4e8 <i2c_master_init+0x29c>)
     268:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     26a:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     26c:	2301      	movs	r3, #1
     26e:	40ab      	lsls	r3, r5
     270:	430b      	orrs	r3, r1
     272:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     274:	a909      	add	r1, sp, #36	; 0x24
     276:	7b23      	ldrb	r3, [r4, #12]
     278:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     27a:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     27c:	b2c5      	uxtb	r5, r0
     27e:	0028      	movs	r0, r5
     280:	4b9a      	ldr	r3, [pc, #616]	; (4ec <i2c_master_init+0x2a0>)
     282:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     284:	0028      	movs	r0, r5
     286:	4b9a      	ldr	r3, [pc, #616]	; (4f0 <i2c_master_init+0x2a4>)
     288:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     28a:	7b20      	ldrb	r0, [r4, #12]
     28c:	2100      	movs	r1, #0
     28e:	4b99      	ldr	r3, [pc, #612]	; (4f4 <i2c_master_init+0x2a8>)
     290:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     292:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
     294:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     296:	079b      	lsls	r3, r3, #30
     298:	d505      	bpl.n	2a6 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     29a:	b00a      	add	sp, #40	; 0x28
     29c:	bc1c      	pop	{r2, r3, r4}
     29e:	4690      	mov	r8, r2
     2a0:	4699      	mov	r9, r3
     2a2:	46a2      	mov	sl, r4
     2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     2a6:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     2a8:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     2aa:	07db      	lsls	r3, r3, #31
     2ac:	d4f5      	bmi.n	29a <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     2ae:	6830      	ldr	r0, [r6, #0]
     2b0:	4b8c      	ldr	r3, [pc, #560]	; (4e4 <i2c_master_init+0x298>)
     2b2:	4699      	mov	r9, r3
     2b4:	4798      	blx	r3
     2b6:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     2b8:	498f      	ldr	r1, [pc, #572]	; (4f8 <i2c_master_init+0x2ac>)
     2ba:	4b90      	ldr	r3, [pc, #576]	; (4fc <i2c_master_init+0x2b0>)
     2bc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     2be:	00ad      	lsls	r5, r5, #2
     2c0:	4b8f      	ldr	r3, [pc, #572]	; (500 <i2c_master_init+0x2b4>)
     2c2:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     2c4:	2300      	movs	r3, #0
     2c6:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     2c8:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     2ca:	2500      	movs	r5, #0
     2cc:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     2ce:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     2d0:	2225      	movs	r2, #37	; 0x25
     2d2:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     2d4:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     2d6:	3314      	adds	r3, #20
     2d8:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2da:	6833      	ldr	r3, [r6, #0]
     2dc:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     2de:	0018      	movs	r0, r3
     2e0:	47c8      	blx	r9
     2e2:	4681      	mov	r9, r0
     2e4:	2380      	movs	r3, #128	; 0x80
     2e6:	aa08      	add	r2, sp, #32
     2e8:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2ea:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     2ec:	2301      	movs	r3, #1
     2ee:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     2f0:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     2f2:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     2f4:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     2f6:	2800      	cmp	r0, #0
     2f8:	d100      	bne.n	2fc <i2c_master_init+0xb0>
     2fa:	e0af      	b.n	45c <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     2fc:	ab08      	add	r3, sp, #32
     2fe:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     300:	2302      	movs	r3, #2
     302:	aa08      	add	r2, sp, #32
     304:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     306:	0c00      	lsrs	r0, r0, #16
     308:	b2c0      	uxtb	r0, r0
     30a:	0011      	movs	r1, r2
     30c:	4b7d      	ldr	r3, [pc, #500]	; (504 <i2c_master_init+0x2b8>)
     30e:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     310:	2f00      	cmp	r7, #0
     312:	d100      	bne.n	316 <i2c_master_init+0xca>
     314:	e0a7      	b.n	466 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     316:	ab08      	add	r3, sp, #32
     318:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     31a:	2302      	movs	r3, #2
     31c:	aa08      	add	r2, sp, #32
     31e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     320:	0c3f      	lsrs	r7, r7, #16
     322:	b2f8      	uxtb	r0, r7
     324:	0011      	movs	r1, r2
     326:	4b77      	ldr	r3, [pc, #476]	; (504 <i2c_master_init+0x2b8>)
     328:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     32a:	8aa3      	ldrh	r3, [r4, #20]
     32c:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     32e:	8ae3      	ldrh	r3, [r4, #22]
     330:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     332:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     334:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     336:	2b00      	cmp	r3, #0
     338:	d104      	bne.n	344 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     33a:	4b73      	ldr	r3, [pc, #460]	; (508 <i2c_master_init+0x2bc>)
     33c:	789b      	ldrb	r3, [r3, #2]
     33e:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     340:	0fdb      	lsrs	r3, r3, #31
     342:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     344:	68a1      	ldr	r1, [r4, #8]
     346:	6923      	ldr	r3, [r4, #16]
     348:	430b      	orrs	r3, r1
     34a:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     34c:	2224      	movs	r2, #36	; 0x24
     34e:	5ca2      	ldrb	r2, [r4, r2]
     350:	2a00      	cmp	r2, #0
     352:	d002      	beq.n	35a <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     354:	2280      	movs	r2, #128	; 0x80
     356:	05d2      	lsls	r2, r2, #23
     358:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     35a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     35c:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     35e:	222c      	movs	r2, #44	; 0x2c
     360:	5ca2      	ldrb	r2, [r4, r2]
     362:	2a00      	cmp	r2, #0
     364:	d103      	bne.n	36e <i2c_master_init+0x122>
     366:	2280      	movs	r2, #128	; 0x80
     368:	0492      	lsls	r2, r2, #18
     36a:	4291      	cmp	r1, r2
     36c:	d102      	bne.n	374 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     36e:	2280      	movs	r2, #128	; 0x80
     370:	0512      	lsls	r2, r2, #20
     372:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     374:	222d      	movs	r2, #45	; 0x2d
     376:	5ca2      	ldrb	r2, [r4, r2]
     378:	2a00      	cmp	r2, #0
     37a:	d002      	beq.n	382 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     37c:	2280      	movs	r2, #128	; 0x80
     37e:	0412      	lsls	r2, r2, #16
     380:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     382:	222e      	movs	r2, #46	; 0x2e
     384:	5ca2      	ldrb	r2, [r4, r2]
     386:	2a00      	cmp	r2, #0
     388:	d002      	beq.n	390 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     38a:	2280      	movs	r2, #128	; 0x80
     38c:	03d2      	lsls	r2, r2, #15
     38e:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     390:	4642      	mov	r2, r8
     392:	6812      	ldr	r2, [r2, #0]
     394:	4313      	orrs	r3, r2
     396:	4642      	mov	r2, r8
     398:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	005b      	lsls	r3, r3, #1
     39e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     3a0:	4648      	mov	r0, r9
     3a2:	3014      	adds	r0, #20
     3a4:	b2c0      	uxtb	r0, r0
     3a6:	4b59      	ldr	r3, [pc, #356]	; (50c <i2c_master_init+0x2c0>)
     3a8:	4798      	blx	r3
     3aa:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     3ac:	23fa      	movs	r3, #250	; 0xfa
     3ae:	009b      	lsls	r3, r3, #2
     3b0:	6822      	ldr	r2, [r4, #0]
     3b2:	435a      	muls	r2, r3
     3b4:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     3b6:	6863      	ldr	r3, [r4, #4]
     3b8:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     3ba:	4d55      	ldr	r5, [pc, #340]	; (510 <i2c_master_init+0x2c4>)
     3bc:	47a8      	blx	r5
     3be:	9000      	str	r0, [sp, #0]
     3c0:	9101      	str	r1, [sp, #4]
     3c2:	464b      	mov	r3, r9
     3c4:	0058      	lsls	r0, r3, #1
     3c6:	47a8      	blx	r5
     3c8:	9002      	str	r0, [sp, #8]
     3ca:	9103      	str	r1, [sp, #12]
     3cc:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     3ce:	47a8      	blx	r5
     3d0:	9004      	str	r0, [sp, #16]
     3d2:	9105      	str	r1, [sp, #20]
     3d4:	4f4f      	ldr	r7, [pc, #316]	; (514 <i2c_master_init+0x2c8>)
     3d6:	4a50      	ldr	r2, [pc, #320]	; (518 <i2c_master_init+0x2cc>)
     3d8:	4b50      	ldr	r3, [pc, #320]	; (51c <i2c_master_init+0x2d0>)
     3da:	9800      	ldr	r0, [sp, #0]
     3dc:	9901      	ldr	r1, [sp, #4]
     3de:	47b8      	blx	r7
     3e0:	0002      	movs	r2, r0
     3e2:	000b      	movs	r3, r1
     3e4:	9804      	ldr	r0, [sp, #16]
     3e6:	9905      	ldr	r1, [sp, #20]
     3e8:	47b8      	blx	r7
     3ea:	4e4d      	ldr	r6, [pc, #308]	; (520 <i2c_master_init+0x2d4>)
     3ec:	2200      	movs	r2, #0
     3ee:	4b4d      	ldr	r3, [pc, #308]	; (524 <i2c_master_init+0x2d8>)
     3f0:	47b0      	blx	r6
     3f2:	9004      	str	r0, [sp, #16]
     3f4:	9105      	str	r1, [sp, #20]
     3f6:	4648      	mov	r0, r9
     3f8:	47a8      	blx	r5
     3fa:	0002      	movs	r2, r0
     3fc:	000b      	movs	r3, r1
     3fe:	9804      	ldr	r0, [sp, #16]
     400:	9905      	ldr	r1, [sp, #20]
     402:	47b8      	blx	r7
     404:	0002      	movs	r2, r0
     406:	000b      	movs	r3, r1
     408:	4d47      	ldr	r5, [pc, #284]	; (528 <i2c_master_init+0x2dc>)
     40a:	9800      	ldr	r0, [sp, #0]
     40c:	9901      	ldr	r1, [sp, #4]
     40e:	47a8      	blx	r5
     410:	9a02      	ldr	r2, [sp, #8]
     412:	9b03      	ldr	r3, [sp, #12]
     414:	47b0      	blx	r6
     416:	2200      	movs	r2, #0
     418:	4b44      	ldr	r3, [pc, #272]	; (52c <i2c_master_init+0x2e0>)
     41a:	47a8      	blx	r5
     41c:	9a02      	ldr	r2, [sp, #8]
     41e:	9b03      	ldr	r3, [sp, #12]
     420:	4d43      	ldr	r5, [pc, #268]	; (530 <i2c_master_init+0x2e4>)
     422:	47a8      	blx	r5
     424:	4b43      	ldr	r3, [pc, #268]	; (534 <i2c_master_init+0x2e8>)
     426:	4798      	blx	r3
     428:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     42a:	2380      	movs	r3, #128	; 0x80
     42c:	049b      	lsls	r3, r3, #18
     42e:	68a2      	ldr	r2, [r4, #8]
     430:	429a      	cmp	r2, r3
     432:	d01e      	beq.n	472 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     434:	0003      	movs	r3, r0
     436:	2040      	movs	r0, #64	; 0x40
     438:	2dff      	cmp	r5, #255	; 0xff
     43a:	d900      	bls.n	43e <i2c_master_init+0x1f2>
     43c:	e72d      	b.n	29a <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     43e:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     440:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     442:	25ff      	movs	r5, #255	; 0xff
     444:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     446:	0624      	lsls	r4, r4, #24
     448:	4325      	orrs	r5, r4
     44a:	0400      	lsls	r0, r0, #16
     44c:	23ff      	movs	r3, #255	; 0xff
     44e:	041b      	lsls	r3, r3, #16
     450:	4018      	ands	r0, r3
     452:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     454:	4643      	mov	r3, r8
     456:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     458:	2000      	movs	r0, #0
     45a:	e71e      	b.n	29a <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     45c:	2100      	movs	r1, #0
     45e:	4640      	mov	r0, r8
     460:	4b35      	ldr	r3, [pc, #212]	; (538 <i2c_master_init+0x2ec>)
     462:	4798      	blx	r3
     464:	e74a      	b.n	2fc <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     466:	2101      	movs	r1, #1
     468:	4640      	mov	r0, r8
     46a:	4b33      	ldr	r3, [pc, #204]	; (538 <i2c_master_init+0x2ec>)
     46c:	4798      	blx	r3
     46e:	0007      	movs	r7, r0
     470:	e751      	b.n	316 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     472:	26fa      	movs	r6, #250	; 0xfa
     474:	00b6      	lsls	r6, r6, #2
     476:	4653      	mov	r3, sl
     478:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     47a:	9800      	ldr	r0, [sp, #0]
     47c:	9901      	ldr	r1, [sp, #4]
     47e:	0002      	movs	r2, r0
     480:	000b      	movs	r3, r1
     482:	4c27      	ldr	r4, [pc, #156]	; (520 <i2c_master_init+0x2d4>)
     484:	47a0      	blx	r4
     486:	9000      	str	r0, [sp, #0]
     488:	9101      	str	r1, [sp, #4]
     48a:	0030      	movs	r0, r6
     48c:	4b20      	ldr	r3, [pc, #128]	; (510 <i2c_master_init+0x2c4>)
     48e:	4798      	blx	r3
     490:	2200      	movs	r2, #0
     492:	4b2a      	ldr	r3, [pc, #168]	; (53c <i2c_master_init+0x2f0>)
     494:	47b8      	blx	r7
     496:	0002      	movs	r2, r0
     498:	000b      	movs	r3, r1
     49a:	9800      	ldr	r0, [sp, #0]
     49c:	9901      	ldr	r1, [sp, #4]
     49e:	4c24      	ldr	r4, [pc, #144]	; (530 <i2c_master_init+0x2e4>)
     4a0:	47a0      	blx	r4
     4a2:	2200      	movs	r2, #0
     4a4:	4b21      	ldr	r3, [pc, #132]	; (52c <i2c_master_init+0x2e0>)
     4a6:	4c20      	ldr	r4, [pc, #128]	; (528 <i2c_master_init+0x2dc>)
     4a8:	47a0      	blx	r4
     4aa:	4b22      	ldr	r3, [pc, #136]	; (534 <i2c_master_init+0x2e8>)
     4ac:	4798      	blx	r3
     4ae:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     4b0:	d00c      	beq.n	4cc <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     4b2:	0031      	movs	r1, r6
     4b4:	9807      	ldr	r0, [sp, #28]
     4b6:	4b22      	ldr	r3, [pc, #136]	; (540 <i2c_master_init+0x2f4>)
     4b8:	4798      	blx	r3
     4ba:	3802      	subs	r0, #2
     4bc:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4be:	002b      	movs	r3, r5
     4c0:	2dff      	cmp	r5, #255	; 0xff
     4c2:	d80c      	bhi.n	4de <i2c_master_init+0x292>
     4c4:	28ff      	cmp	r0, #255	; 0xff
     4c6:	d9bc      	bls.n	442 <i2c_master_init+0x1f6>
     4c8:	2040      	movs	r0, #64	; 0x40
     4ca:	e6e6      	b.n	29a <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     4cc:	0071      	lsls	r1, r6, #1
     4ce:	1e48      	subs	r0, r1, #1
     4d0:	9b07      	ldr	r3, [sp, #28]
     4d2:	469c      	mov	ip, r3
     4d4:	4460      	add	r0, ip
     4d6:	4b1a      	ldr	r3, [pc, #104]	; (540 <i2c_master_init+0x2f4>)
     4d8:	4798      	blx	r3
     4da:	3801      	subs	r0, #1
     4dc:	e7ef      	b.n	4be <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     4de:	2040      	movs	r0, #64	; 0x40
     4e0:	e6db      	b.n	29a <i2c_master_init+0x4e>
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	00000cbd 	.word	0x00000cbd
     4e8:	40000400 	.word	0x40000400
     4ec:	00001795 	.word	0x00001795
     4f0:	00001709 	.word	0x00001709
     4f4:	00000af9 	.word	0x00000af9
     4f8:	00000795 	.word	0x00000795
     4fc:	00000cf9 	.word	0x00000cf9
     500:	20000118 	.word	0x20000118
     504:	0000188d 	.word	0x0000188d
     508:	41002000 	.word	0x41002000
     50c:	000017b1 	.word	0x000017b1
     510:	000036b9 	.word	0x000036b9
     514:	00002b25 	.word	0x00002b25
     518:	e826d695 	.word	0xe826d695
     51c:	3e112e0b 	.word	0x3e112e0b
     520:	00001e9d 	.word	0x00001e9d
     524:	40240000 	.word	0x40240000
     528:	00003025 	.word	0x00003025
     52c:	3ff00000 	.word	0x3ff00000
     530:	000024bd 	.word	0x000024bd
     534:	00003651 	.word	0x00003651
     538:	00000b45 	.word	0x00000b45
     53c:	40080000 	.word	0x40080000
     540:	00001d31 	.word	0x00001d31

00000544 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     544:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     546:	7e1a      	ldrb	r2, [r3, #24]
     548:	0792      	lsls	r2, r2, #30
     54a:	d507      	bpl.n	55c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     54c:	2202      	movs	r2, #2
     54e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     550:	8b5b      	ldrh	r3, [r3, #26]
     552:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     554:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
     556:	17db      	asrs	r3, r3, #31
     558:	4018      	ands	r0, r3
}
     55a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     55c:	8b5a      	ldrh	r2, [r3, #26]
     55e:	0752      	lsls	r2, r2, #29
     560:	d506      	bpl.n	570 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     562:	6859      	ldr	r1, [r3, #4]
     564:	22c0      	movs	r2, #192	; 0xc0
     566:	0292      	lsls	r2, r2, #10
     568:	430a      	orrs	r2, r1
     56a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     56c:	2018      	movs	r0, #24
     56e:	e7f4      	b.n	55a <_i2c_master_address_response+0x16>
	return STATUS_OK;
     570:	2000      	movs	r0, #0
     572:	e7f2      	b.n	55a <_i2c_master_address_response+0x16>

00000574 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
     574:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     576:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
     578:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     57a:	2401      	movs	r4, #1
     57c:	2502      	movs	r5, #2
     57e:	7e11      	ldrb	r1, [r2, #24]
     580:	4221      	tst	r1, r4
     582:	d10b      	bne.n	59c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     584:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     586:	4229      	tst	r1, r5
     588:	d106      	bne.n	598 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
     58a:	3301      	adds	r3, #1
     58c:	b29b      	uxth	r3, r3
     58e:	8901      	ldrh	r1, [r0, #8]
     590:	4299      	cmp	r1, r3
     592:	d8f4      	bhi.n	57e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     594:	2012      	movs	r0, #18
     596:	e002      	b.n	59e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
     598:	2000      	movs	r0, #0
     59a:	e000      	b.n	59e <_i2c_master_wait_for_bus+0x2a>
     59c:	2000      	movs	r0, #0
}
     59e:	bd30      	pop	{r4, r5, pc}

000005a0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
     5a0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5a2:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5a4:	6862      	ldr	r2, [r4, #4]
     5a6:	2380      	movs	r3, #128	; 0x80
     5a8:	02db      	lsls	r3, r3, #11
     5aa:	4313      	orrs	r3, r2
     5ac:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
     5ae:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
     5b0:	4b02      	ldr	r3, [pc, #8]	; (5bc <_i2c_master_send_hs_master_code+0x1c>)
     5b2:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     5b4:	2301      	movs	r3, #1
     5b6:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
     5b8:	bd10      	pop	{r4, pc}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	00000575 	.word	0x00000575

000005c0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     5c0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     5c2:	2207      	movs	r2, #7
     5c4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     5c6:	421a      	tst	r2, r3
     5c8:	d1fc      	bne.n	5c4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     5ca:	4770      	bx	lr

000005cc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     5cc:	b570      	push	{r4, r5, r6, lr}
     5ce:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     5d0:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     5d2:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     5d4:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     5d6:	8b83      	ldrh	r3, [r0, #28]
     5d8:	1aed      	subs	r5, r5, r3
     5da:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     5dc:	8b83      	ldrh	r3, [r0, #28]
     5de:	3b01      	subs	r3, #1
     5e0:	b29b      	uxth	r3, r3
     5e2:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     5e4:	0113      	lsls	r3, r2, #4
     5e6:	d51d      	bpl.n	624 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     5e8:	7ac3      	ldrb	r3, [r0, #11]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d003      	beq.n	5f6 <_i2c_master_read+0x2a>
     5ee:	8b83      	ldrh	r3, [r0, #28]
     5f0:	b29b      	uxth	r3, r3
     5f2:	2b01      	cmp	r3, #1
     5f4:	d010      	beq.n	618 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     5f6:	8ba3      	ldrh	r3, [r4, #28]
     5f8:	b29b      	uxth	r3, r3
     5fa:	2b00      	cmp	r3, #0
     5fc:	d102      	bne.n	604 <_i2c_master_read+0x38>
		if (module->send_stop) {
     5fe:	7aa3      	ldrb	r3, [r4, #10]
     600:	2b00      	cmp	r3, #0
     602:	d11c      	bne.n	63e <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     604:	0020      	movs	r0, r4
     606:	4b12      	ldr	r3, [pc, #72]	; (650 <_i2c_master_read+0x84>)
     608:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     60a:	6a23      	ldr	r3, [r4, #32]
     60c:	195d      	adds	r5, r3, r5
     60e:	2328      	movs	r3, #40	; 0x28
     610:	5cf3      	ldrb	r3, [r6, r3]
     612:	b2db      	uxtb	r3, r3
     614:	702b      	strb	r3, [r5, #0]
}
     616:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     618:	6872      	ldr	r2, [r6, #4]
     61a:	2380      	movs	r3, #128	; 0x80
     61c:	02db      	lsls	r3, r3, #11
     61e:	4313      	orrs	r3, r2
     620:	6073      	str	r3, [r6, #4]
     622:	e7e8      	b.n	5f6 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     624:	7ac3      	ldrb	r3, [r0, #11]
     626:	2b00      	cmp	r3, #0
     628:	d0e5      	beq.n	5f6 <_i2c_master_read+0x2a>
     62a:	8b83      	ldrh	r3, [r0, #28]
     62c:	b29b      	uxth	r3, r3
     62e:	2b00      	cmp	r3, #0
     630:	d1e1      	bne.n	5f6 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     632:	6872      	ldr	r2, [r6, #4]
     634:	2380      	movs	r3, #128	; 0x80
     636:	02db      	lsls	r3, r3, #11
     638:	4313      	orrs	r3, r2
     63a:	6073      	str	r3, [r6, #4]
     63c:	e7db      	b.n	5f6 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     63e:	0020      	movs	r0, r4
     640:	4b03      	ldr	r3, [pc, #12]	; (650 <_i2c_master_read+0x84>)
     642:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     644:	6872      	ldr	r2, [r6, #4]
     646:	23c0      	movs	r3, #192	; 0xc0
     648:	029b      	lsls	r3, r3, #10
     64a:	4313      	orrs	r3, r2
     64c:	6073      	str	r3, [r6, #4]
     64e:	e7d9      	b.n	604 <_i2c_master_read+0x38>
     650:	000005c1 	.word	0x000005c1

00000654 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     654:	b570      	push	{r4, r5, r6, lr}
     656:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     658:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     65a:	8b6b      	ldrh	r3, [r5, #26]
     65c:	075b      	lsls	r3, r3, #29
     65e:	d503      	bpl.n	668 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     660:	221e      	movs	r2, #30
     662:	2325      	movs	r3, #37	; 0x25
     664:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     666:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     668:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     66a:	8b83      	ldrh	r3, [r0, #28]
     66c:	1af6      	subs	r6, r6, r3
     66e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     670:	8b83      	ldrh	r3, [r0, #28]
     672:	3b01      	subs	r3, #1
     674:	b29b      	uxth	r3, r3
     676:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     678:	4b04      	ldr	r3, [pc, #16]	; (68c <_i2c_master_write+0x38>)
     67a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     67c:	6a23      	ldr	r3, [r4, #32]
     67e:	199e      	adds	r6, r3, r6
     680:	7833      	ldrb	r3, [r6, #0]
     682:	b2db      	uxtb	r3, r3
     684:	2228      	movs	r2, #40	; 0x28
     686:	54ab      	strb	r3, [r5, r2]
     688:	e7ed      	b.n	666 <_i2c_master_write+0x12>
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	000005c1 	.word	0x000005c1

00000690 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     692:	0005      	movs	r5, r0
     694:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     696:	6806      	ldr	r6, [r0, #0]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
     698:	684b      	ldr	r3, [r1, #4]
     69a:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     69c:	884b      	ldrh	r3, [r1, #2]
     69e:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     6a0:	2201      	movs	r2, #1
     6a2:	2324      	movs	r3, #36	; 0x24
     6a4:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     6a6:	3204      	adds	r2, #4
     6a8:	3301      	adds	r3, #1
     6aa:	54c2      	strb	r2, [r0, r3]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     6ac:	6837      	ldr	r7, [r6, #0]
     6ae:	013f      	lsls	r7, r7, #4
     6b0:	0fff      	lsrs	r7, r7, #31

	/* Switch to high speed mode */
	if (packet->high_speed) {
     6b2:	7a4b      	ldrb	r3, [r1, #9]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d117      	bne.n	6e8 <_i2c_master_read_packet+0x58>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     6b8:	2f00      	cmp	r7, #0
     6ba:	d002      	beq.n	6c2 <_i2c_master_read_packet+0x32>
     6bc:	8863      	ldrh	r3, [r4, #2]
     6be:	2b01      	cmp	r3, #1
     6c0:	d016      	beq.n	6f0 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     6c2:	6873      	ldr	r3, [r6, #4]
     6c4:	4a20      	ldr	r2, [pc, #128]	; (748 <_i2c_master_read_packet+0xb8>)
     6c6:	4013      	ands	r3, r2
     6c8:	6073      	str	r3, [r6, #4]
	}

	if (packet->ten_bit_address) {
     6ca:	7a23      	ldrb	r3, [r4, #8]
     6cc:	2b00      	cmp	r3, #0
     6ce:	d115      	bne.n	6fc <_i2c_master_read_packet+0x6c>
		} else {
			return tmp_status;
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
     6d0:	2303      	movs	r3, #3
     6d2:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     6d4:	8823      	ldrh	r3, [r4, #0]
     6d6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     6d8:	7a62      	ldrb	r2, [r4, #9]
     6da:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     6dc:	4313      	orrs	r3, r2
     6de:	2201      	movs	r2, #1
     6e0:	4313      	orrs	r3, r2
     6e2:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
     6e4:	2000      	movs	r0, #0
}
     6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     6e8:	7a89      	ldrb	r1, [r1, #10]
     6ea:	4b18      	ldr	r3, [pc, #96]	; (74c <_i2c_master_read_packet+0xbc>)
     6ec:	4798      	blx	r3
     6ee:	e7e3      	b.n	6b8 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     6f0:	6872      	ldr	r2, [r6, #4]
     6f2:	2380      	movs	r3, #128	; 0x80
     6f4:	02db      	lsls	r3, r3, #11
     6f6:	4313      	orrs	r3, r2
     6f8:	6073      	str	r3, [r6, #4]
     6fa:	e7e6      	b.n	6ca <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     6fc:	8823      	ldrh	r3, [r4, #0]
     6fe:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     700:	7a62      	ldrb	r2, [r4, #9]
     702:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     704:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     706:	2280      	movs	r2, #128	; 0x80
     708:	0212      	lsls	r2, r2, #8
     70a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     70c:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     70e:	0028      	movs	r0, r5
     710:	4b0f      	ldr	r3, [pc, #60]	; (750 <_i2c_master_read_packet+0xc0>)
     712:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     714:	6873      	ldr	r3, [r6, #4]
     716:	4a0c      	ldr	r2, [pc, #48]	; (748 <_i2c_master_read_packet+0xb8>)
     718:	4013      	ands	r3, r2
     71a:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     71c:	2800      	cmp	r0, #0
     71e:	d1e2      	bne.n	6e6 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     720:	0028      	movs	r0, r5
     722:	4b0c      	ldr	r3, [pc, #48]	; (754 <_i2c_master_read_packet+0xc4>)
     724:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     726:	2800      	cmp	r0, #0
     728:	d1dd      	bne.n	6e6 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     72a:	2303      	movs	r3, #3
     72c:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     72e:	8823      	ldrh	r3, [r4, #0]
     730:	0a1b      	lsrs	r3, r3, #8
     732:	2278      	movs	r2, #120	; 0x78
     734:	4313      	orrs	r3, r2
     736:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     738:	7a62      	ldrb	r2, [r4, #9]
     73a:	0392      	lsls	r2, r2, #14
     73c:	2101      	movs	r1, #1
     73e:	430a      	orrs	r2, r1
     740:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     742:	6273      	str	r3, [r6, #36]	; 0x24
     744:	e7cf      	b.n	6e6 <_i2c_master_read_packet+0x56>
     746:	46c0      	nop			; (mov r8, r8)
     748:	fffbffff 	.word	0xfffbffff
     74c:	000005a1 	.word	0x000005a1
     750:	00000575 	.word	0x00000575
     754:	00000545 	.word	0x00000545

00000758 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     758:	1c93      	adds	r3, r2, #2
     75a:	009b      	lsls	r3, r3, #2
     75c:	18c3      	adds	r3, r0, r3
     75e:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     760:	7e03      	ldrb	r3, [r0, #24]
     762:	2101      	movs	r1, #1
     764:	4091      	lsls	r1, r2
     766:	430b      	orrs	r3, r1
     768:	b2db      	uxtb	r3, r3
     76a:	7603      	strb	r3, [r0, #24]
}
     76c:	4770      	bx	lr
	...

00000770 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     770:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     772:	8b83      	ldrh	r3, [r0, #28]
     774:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     776:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     778:	2b00      	cmp	r3, #0
     77a:	d001      	beq.n	780 <i2c_master_read_packet_job+0x10>
	/* Make sure we send STOP */
	module->send_stop = true;
	module->send_nack = true;
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
}
     77c:	0010      	movs	r0, r2
     77e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     780:	3301      	adds	r3, #1
     782:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     784:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     786:	4b02      	ldr	r3, [pc, #8]	; (790 <i2c_master_read_packet_job+0x20>)
     788:	4798      	blx	r3
     78a:	0002      	movs	r2, r0
     78c:	e7f6      	b.n	77c <i2c_master_read_packet_job+0xc>
     78e:	46c0      	nop			; (mov r8, r8)
     790:	00000691 	.word	0x00000691

00000794 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     794:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     796:	0080      	lsls	r0, r0, #2
     798:	4b75      	ldr	r3, [pc, #468]	; (970 <_i2c_master_interrupt_handler+0x1dc>)
     79a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     79c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     79e:	682b      	ldr	r3, [r5, #0]
     7a0:	011b      	lsls	r3, r3, #4
     7a2:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     7a4:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     7a6:	7e26      	ldrb	r6, [r4, #24]
     7a8:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     7aa:	8b63      	ldrh	r3, [r4, #26]
     7ac:	b29b      	uxth	r3, r3
     7ae:	2b00      	cmp	r3, #0
     7b0:	d103      	bne.n	7ba <_i2c_master_interrupt_handler+0x26>
     7b2:	8ba3      	ldrh	r3, [r4, #28]
     7b4:	b29b      	uxth	r3, r3
     7b6:	2b00      	cmp	r3, #0
     7b8:	d123      	bne.n	802 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     7ba:	8b63      	ldrh	r3, [r4, #26]
     7bc:	b29b      	uxth	r3, r3
     7be:	2b00      	cmp	r3, #0
     7c0:	d008      	beq.n	7d4 <_i2c_master_interrupt_handler+0x40>
     7c2:	8ba3      	ldrh	r3, [r4, #28]
     7c4:	b29b      	uxth	r3, r3
     7c6:	2b00      	cmp	r3, #0
     7c8:	d104      	bne.n	7d4 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     7ca:	3325      	adds	r3, #37	; 0x25
     7cc:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     7ce:	2b05      	cmp	r3, #5
     7d0:	d100      	bne.n	7d4 <_i2c_master_interrupt_handler+0x40>
     7d2:	e06d      	b.n	8b0 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     7d4:	8b63      	ldrh	r3, [r4, #26]
     7d6:	b29b      	uxth	r3, r3
     7d8:	2b00      	cmp	r3, #0
     7da:	d024      	beq.n	826 <_i2c_master_interrupt_handler+0x92>
     7dc:	8ba3      	ldrh	r3, [r4, #28]
     7de:	b29b      	uxth	r3, r3
     7e0:	2b00      	cmp	r3, #0
     7e2:	d020      	beq.n	826 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     7e4:	8b6b      	ldrh	r3, [r5, #26]
     7e6:	069b      	lsls	r3, r3, #26
     7e8:	d500      	bpl.n	7ec <_i2c_master_interrupt_handler+0x58>
     7ea:	e081      	b.n	8f0 <_i2c_master_interrupt_handler+0x15c>
     7ec:	2a00      	cmp	r2, #0
     7ee:	d004      	beq.n	7fa <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     7f0:	8ba3      	ldrh	r3, [r4, #28]
     7f2:	b29b      	uxth	r3, r3
     7f4:	2b01      	cmp	r3, #1
     7f6:	d100      	bne.n	7fa <_i2c_master_interrupt_handler+0x66>
     7f8:	e07a      	b.n	8f0 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     7fa:	2241      	movs	r2, #65	; 0x41
     7fc:	2325      	movs	r3, #37	; 0x25
     7fe:	54e2      	strb	r2, [r4, r3]
     800:	e011      	b.n	826 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     802:	7e2b      	ldrb	r3, [r5, #24]
     804:	07db      	lsls	r3, r3, #31
     806:	d507      	bpl.n	818 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     808:	2301      	movs	r3, #1
     80a:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     80c:	8b6b      	ldrh	r3, [r5, #26]
     80e:	079b      	lsls	r3, r3, #30
     810:	d52e      	bpl.n	870 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     812:	2241      	movs	r2, #65	; 0x41
     814:	2325      	movs	r3, #37	; 0x25
     816:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     818:	8ba3      	ldrh	r3, [r4, #28]
     81a:	b29b      	uxth	r3, r3
     81c:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     81e:	2325      	movs	r3, #37	; 0x25
     820:	5ce3      	ldrb	r3, [r4, r3]
     822:	2b05      	cmp	r3, #5
     824:	d038      	beq.n	898 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     826:	8b63      	ldrh	r3, [r4, #26]
     828:	b29b      	uxth	r3, r3
     82a:	2b00      	cmp	r3, #0
     82c:	d007      	beq.n	83e <_i2c_master_interrupt_handler+0xaa>
     82e:	8ba3      	ldrh	r3, [r4, #28]
     830:	b29b      	uxth	r3, r3
     832:	2b00      	cmp	r3, #0
     834:	d103      	bne.n	83e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     836:	3325      	adds	r3, #37	; 0x25
     838:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     83a:	2b05      	cmp	r3, #5
     83c:	d064      	beq.n	908 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     83e:	2325      	movs	r3, #37	; 0x25
     840:	5ce3      	ldrb	r3, [r4, r3]
     842:	2b05      	cmp	r3, #5
     844:	d013      	beq.n	86e <_i2c_master_interrupt_handler+0xda>
     846:	2325      	movs	r3, #37	; 0x25
     848:	5ce3      	ldrb	r3, [r4, r3]
     84a:	2b00      	cmp	r3, #0
     84c:	d00f      	beq.n	86e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     84e:	2303      	movs	r3, #3
     850:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     852:	2300      	movs	r3, #0
     854:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     856:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     858:	3325      	adds	r3, #37	; 0x25
     85a:	5ce3      	ldrb	r3, [r4, r3]
     85c:	2b41      	cmp	r3, #65	; 0x41
     85e:	d003      	beq.n	868 <_i2c_master_interrupt_handler+0xd4>
     860:	7aa3      	ldrb	r3, [r4, #10]
     862:	2b00      	cmp	r3, #0
     864:	d000      	beq.n	868 <_i2c_master_interrupt_handler+0xd4>
     866:	e075      	b.n	954 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     868:	0773      	lsls	r3, r6, #29
     86a:	d500      	bpl.n	86e <_i2c_master_interrupt_handler+0xda>
     86c:	e07b      	b.n	966 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     86e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     870:	8b6b      	ldrh	r3, [r5, #26]
     872:	075b      	lsls	r3, r3, #29
     874:	d5d0      	bpl.n	818 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     876:	2218      	movs	r2, #24
     878:	2325      	movs	r3, #37	; 0x25
     87a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     87c:	2300      	movs	r3, #0
     87e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     880:	7aa3      	ldrb	r3, [r4, #10]
     882:	2b00      	cmp	r3, #0
     884:	d0c8      	beq.n	818 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     886:	0020      	movs	r0, r4
     888:	4b3a      	ldr	r3, [pc, #232]	; (974 <_i2c_master_interrupt_handler+0x1e0>)
     88a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     88c:	686a      	ldr	r2, [r5, #4]
     88e:	23c0      	movs	r3, #192	; 0xc0
     890:	029b      	lsls	r3, r3, #10
     892:	4313      	orrs	r3, r2
     894:	606b      	str	r3, [r5, #4]
     896:	e7bf      	b.n	818 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     898:	331f      	adds	r3, #31
     89a:	5ce3      	ldrb	r3, [r4, r3]
     89c:	2b00      	cmp	r3, #0
     89e:	d003      	beq.n	8a8 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     8a0:	0020      	movs	r0, r4
     8a2:	4b35      	ldr	r3, [pc, #212]	; (978 <_i2c_master_interrupt_handler+0x1e4>)
     8a4:	4798      	blx	r3
     8a6:	e7be      	b.n	826 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     8a8:	0020      	movs	r0, r4
     8aa:	4b34      	ldr	r3, [pc, #208]	; (97c <_i2c_master_interrupt_handler+0x1e8>)
     8ac:	4798      	blx	r3
     8ae:	e7ba      	b.n	826 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     8b0:	331f      	adds	r3, #31
     8b2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     8b4:	2b00      	cmp	r3, #0
     8b6:	d000      	beq.n	8ba <_i2c_master_interrupt_handler+0x126>
     8b8:	e78c      	b.n	7d4 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     8ba:	3303      	adds	r3, #3
     8bc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     8be:	2300      	movs	r3, #0
     8c0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     8c2:	3325      	adds	r3, #37	; 0x25
     8c4:	2200      	movs	r2, #0
     8c6:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     8c8:	7aa3      	ldrb	r3, [r4, #10]
     8ca:	2b00      	cmp	r3, #0
     8cc:	d107      	bne.n	8de <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     8ce:	2301      	movs	r3, #1
     8d0:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     8d2:	07f3      	lsls	r3, r6, #31
     8d4:	d5a7      	bpl.n	826 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     8d6:	68e3      	ldr	r3, [r4, #12]
     8d8:	0020      	movs	r0, r4
     8da:	4798      	blx	r3
     8dc:	e7a3      	b.n	826 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     8de:	0020      	movs	r0, r4
     8e0:	4b24      	ldr	r3, [pc, #144]	; (974 <_i2c_master_interrupt_handler+0x1e0>)
     8e2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     8e4:	686a      	ldr	r2, [r5, #4]
     8e6:	23c0      	movs	r3, #192	; 0xc0
     8e8:	029b      	lsls	r3, r3, #10
     8ea:	4313      	orrs	r3, r2
     8ec:	606b      	str	r3, [r5, #4]
     8ee:	e7f0      	b.n	8d2 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     8f0:	2324      	movs	r3, #36	; 0x24
     8f2:	5ce3      	ldrb	r3, [r4, r3]
     8f4:	2b00      	cmp	r3, #0
     8f6:	d103      	bne.n	900 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     8f8:	0020      	movs	r0, r4
     8fa:	4b20      	ldr	r3, [pc, #128]	; (97c <_i2c_master_interrupt_handler+0x1e8>)
     8fc:	4798      	blx	r3
     8fe:	e792      	b.n	826 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     900:	0020      	movs	r0, r4
     902:	4b1d      	ldr	r3, [pc, #116]	; (978 <_i2c_master_interrupt_handler+0x1e4>)
     904:	4798      	blx	r3
     906:	e78e      	b.n	826 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     908:	331f      	adds	r3, #31
     90a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     90c:	2b01      	cmp	r3, #1
     90e:	d196      	bne.n	83e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     910:	7e2b      	ldrb	r3, [r5, #24]
     912:	079b      	lsls	r3, r3, #30
     914:	d501      	bpl.n	91a <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     916:	2302      	movs	r3, #2
     918:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     91a:	2303      	movs	r3, #3
     91c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     91e:	2300      	movs	r3, #0
     920:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     922:	3325      	adds	r3, #37	; 0x25
     924:	2200      	movs	r2, #0
     926:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     928:	07b3      	lsls	r3, r6, #30
     92a:	d503      	bpl.n	934 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     92c:	2324      	movs	r3, #36	; 0x24
     92e:	5ce3      	ldrb	r3, [r4, r3]
     930:	2b01      	cmp	r3, #1
     932:	d00b      	beq.n	94c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     934:	07f3      	lsls	r3, r6, #31
     936:	d400      	bmi.n	93a <_i2c_master_interrupt_handler+0x1a6>
     938:	e781      	b.n	83e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     93a:	2324      	movs	r3, #36	; 0x24
     93c:	5ce3      	ldrb	r3, [r4, r3]
     93e:	2b00      	cmp	r3, #0
     940:	d000      	beq.n	944 <_i2c_master_interrupt_handler+0x1b0>
     942:	e77c      	b.n	83e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     944:	68e3      	ldr	r3, [r4, #12]
     946:	0020      	movs	r0, r4
     948:	4798      	blx	r3
     94a:	e778      	b.n	83e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     94c:	6923      	ldr	r3, [r4, #16]
     94e:	0020      	movs	r0, r4
     950:	4798      	blx	r3
     952:	e774      	b.n	83e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     954:	0020      	movs	r0, r4
     956:	4b07      	ldr	r3, [pc, #28]	; (974 <_i2c_master_interrupt_handler+0x1e0>)
     958:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     95a:	686a      	ldr	r2, [r5, #4]
     95c:	23e0      	movs	r3, #224	; 0xe0
     95e:	02db      	lsls	r3, r3, #11
     960:	4313      	orrs	r3, r2
     962:	606b      	str	r3, [r5, #4]
     964:	e780      	b.n	868 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     966:	6963      	ldr	r3, [r4, #20]
     968:	0020      	movs	r0, r4
     96a:	4798      	blx	r3
}
     96c:	e77f      	b.n	86e <_i2c_master_interrupt_handler+0xda>
     96e:	46c0      	nop			; (mov r8, r8)
     970:	20000118 	.word	0x20000118
     974:	000005c1 	.word	0x000005c1
     978:	000005cd 	.word	0x000005cd
     97c:	00000655 	.word	0x00000655

00000980 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     980:	b5f0      	push	{r4, r5, r6, r7, lr}
     982:	46de      	mov	lr, fp
     984:	4657      	mov	r7, sl
     986:	464e      	mov	r6, r9
     988:	4645      	mov	r5, r8
     98a:	b5e0      	push	{r5, r6, r7, lr}
     98c:	b087      	sub	sp, #28
     98e:	4680      	mov	r8, r0
     990:	9104      	str	r1, [sp, #16]
     992:	0016      	movs	r6, r2
     994:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     996:	2200      	movs	r2, #0
     998:	2300      	movs	r3, #0
     99a:	2100      	movs	r1, #0
     99c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     99e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     9a0:	2001      	movs	r0, #1
     9a2:	0021      	movs	r1, r4
     9a4:	9600      	str	r6, [sp, #0]
     9a6:	9701      	str	r7, [sp, #4]
     9a8:	465c      	mov	r4, fp
     9aa:	9403      	str	r4, [sp, #12]
     9ac:	4644      	mov	r4, r8
     9ae:	9405      	str	r4, [sp, #20]
     9b0:	e013      	b.n	9da <long_division+0x5a>
     9b2:	2420      	movs	r4, #32
     9b4:	1a64      	subs	r4, r4, r1
     9b6:	0005      	movs	r5, r0
     9b8:	40e5      	lsrs	r5, r4
     9ba:	46a8      	mov	r8, r5
     9bc:	e014      	b.n	9e8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     9be:	9c00      	ldr	r4, [sp, #0]
     9c0:	9d01      	ldr	r5, [sp, #4]
     9c2:	1b12      	subs	r2, r2, r4
     9c4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     9c6:	465c      	mov	r4, fp
     9c8:	464d      	mov	r5, r9
     9ca:	432c      	orrs	r4, r5
     9cc:	46a3      	mov	fp, r4
     9ce:	9c03      	ldr	r4, [sp, #12]
     9d0:	4645      	mov	r5, r8
     9d2:	432c      	orrs	r4, r5
     9d4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     9d6:	3901      	subs	r1, #1
     9d8:	d325      	bcc.n	a26 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     9da:	2420      	movs	r4, #32
     9dc:	4264      	negs	r4, r4
     9de:	190c      	adds	r4, r1, r4
     9e0:	d4e7      	bmi.n	9b2 <long_division+0x32>
     9e2:	0005      	movs	r5, r0
     9e4:	40a5      	lsls	r5, r4
     9e6:	46a8      	mov	r8, r5
     9e8:	0004      	movs	r4, r0
     9ea:	408c      	lsls	r4, r1
     9ec:	46a1      	mov	r9, r4
		r = r << 1;
     9ee:	1892      	adds	r2, r2, r2
     9f0:	415b      	adcs	r3, r3
     9f2:	0014      	movs	r4, r2
     9f4:	001d      	movs	r5, r3
		if (n & bit_shift) {
     9f6:	9e05      	ldr	r6, [sp, #20]
     9f8:	464f      	mov	r7, r9
     9fa:	403e      	ands	r6, r7
     9fc:	46b4      	mov	ip, r6
     9fe:	9e04      	ldr	r6, [sp, #16]
     a00:	4647      	mov	r7, r8
     a02:	403e      	ands	r6, r7
     a04:	46b2      	mov	sl, r6
     a06:	4666      	mov	r6, ip
     a08:	4657      	mov	r7, sl
     a0a:	433e      	orrs	r6, r7
     a0c:	d003      	beq.n	a16 <long_division+0x96>
			r |= 0x01;
     a0e:	0006      	movs	r6, r0
     a10:	4326      	orrs	r6, r4
     a12:	0032      	movs	r2, r6
     a14:	002b      	movs	r3, r5
		if (r >= d) {
     a16:	9c00      	ldr	r4, [sp, #0]
     a18:	9d01      	ldr	r5, [sp, #4]
     a1a:	429d      	cmp	r5, r3
     a1c:	d8db      	bhi.n	9d6 <long_division+0x56>
     a1e:	d1ce      	bne.n	9be <long_division+0x3e>
     a20:	4294      	cmp	r4, r2
     a22:	d8d8      	bhi.n	9d6 <long_division+0x56>
     a24:	e7cb      	b.n	9be <long_division+0x3e>
     a26:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     a28:	4658      	mov	r0, fp
     a2a:	0019      	movs	r1, r3
     a2c:	b007      	add	sp, #28
     a2e:	bc3c      	pop	{r2, r3, r4, r5}
     a30:	4690      	mov	r8, r2
     a32:	4699      	mov	r9, r3
     a34:	46a2      	mov	sl, r4
     a36:	46ab      	mov	fp, r5
     a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000a3a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a3a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     a3c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a3e:	2340      	movs	r3, #64	; 0x40
     a40:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     a42:	4281      	cmp	r1, r0
     a44:	d202      	bcs.n	a4c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     a46:	0018      	movs	r0, r3
     a48:	bd10      	pop	{r4, pc}
		baud_calculated++;
     a4a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     a4c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     a4e:	1c63      	adds	r3, r4, #1
     a50:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     a52:	4288      	cmp	r0, r1
     a54:	d9f9      	bls.n	a4a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a56:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     a58:	2cff      	cmp	r4, #255	; 0xff
     a5a:	d8f4      	bhi.n	a46 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     a5c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     a5e:	2300      	movs	r3, #0
     a60:	e7f1      	b.n	a46 <_sercom_get_sync_baud_val+0xc>
	...

00000a64 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a64:	b5f0      	push	{r4, r5, r6, r7, lr}
     a66:	b083      	sub	sp, #12
     a68:	000f      	movs	r7, r1
     a6a:	0016      	movs	r6, r2
     a6c:	aa08      	add	r2, sp, #32
     a6e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a70:	0004      	movs	r4, r0
     a72:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a74:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     a76:	42bc      	cmp	r4, r7
     a78:	d902      	bls.n	a80 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     a7a:	0010      	movs	r0, r2
     a7c:	b003      	add	sp, #12
     a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     a80:	2b00      	cmp	r3, #0
     a82:	d114      	bne.n	aae <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     a84:	0002      	movs	r2, r0
     a86:	0008      	movs	r0, r1
     a88:	2100      	movs	r1, #0
     a8a:	4c19      	ldr	r4, [pc, #100]	; (af0 <_sercom_get_async_baud_val+0x8c>)
     a8c:	47a0      	blx	r4
     a8e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     a90:	003a      	movs	r2, r7
     a92:	2300      	movs	r3, #0
     a94:	2000      	movs	r0, #0
     a96:	4c17      	ldr	r4, [pc, #92]	; (af4 <_sercom_get_async_baud_val+0x90>)
     a98:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     a9a:	2200      	movs	r2, #0
     a9c:	2301      	movs	r3, #1
     a9e:	1a12      	subs	r2, r2, r0
     aa0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     aa2:	0c12      	lsrs	r2, r2, #16
     aa4:	041b      	lsls	r3, r3, #16
     aa6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     aa8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     aaa:	2200      	movs	r2, #0
     aac:	e7e5      	b.n	a7a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     aae:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     ab0:	2b01      	cmp	r3, #1
     ab2:	d1f9      	bne.n	aa8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     ab4:	000a      	movs	r2, r1
     ab6:	2300      	movs	r3, #0
     ab8:	2100      	movs	r1, #0
     aba:	4c0d      	ldr	r4, [pc, #52]	; (af0 <_sercom_get_async_baud_val+0x8c>)
     abc:	47a0      	blx	r4
     abe:	0002      	movs	r2, r0
     ac0:	000b      	movs	r3, r1
     ac2:	9200      	str	r2, [sp, #0]
     ac4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     ac6:	0038      	movs	r0, r7
     ac8:	2100      	movs	r1, #0
     aca:	4c0a      	ldr	r4, [pc, #40]	; (af4 <_sercom_get_async_baud_val+0x90>)
     acc:	47a0      	blx	r4
     ace:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     ad0:	2380      	movs	r3, #128	; 0x80
     ad2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ad4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     ad6:	4298      	cmp	r0, r3
     ad8:	d8cf      	bhi.n	a7a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     ada:	0f79      	lsrs	r1, r7, #29
     adc:	00f8      	lsls	r0, r7, #3
     ade:	9a00      	ldr	r2, [sp, #0]
     ae0:	9b01      	ldr	r3, [sp, #4]
     ae2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     ae4:	00ea      	lsls	r2, r5, #3
     ae6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     ae8:	b2d2      	uxtb	r2, r2
     aea:	0352      	lsls	r2, r2, #13
     aec:	432a      	orrs	r2, r5
     aee:	e7db      	b.n	aa8 <_sercom_get_async_baud_val+0x44>
     af0:	00001e49 	.word	0x00001e49
     af4:	00000981 	.word	0x00000981

00000af8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     af8:	b510      	push	{r4, lr}
     afa:	b082      	sub	sp, #8
     afc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     afe:	4b0e      	ldr	r3, [pc, #56]	; (b38 <sercom_set_gclk_generator+0x40>)
     b00:	781b      	ldrb	r3, [r3, #0]
     b02:	2b00      	cmp	r3, #0
     b04:	d007      	beq.n	b16 <sercom_set_gclk_generator+0x1e>
     b06:	2900      	cmp	r1, #0
     b08:	d105      	bne.n	b16 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     b0a:	4b0b      	ldr	r3, [pc, #44]	; (b38 <sercom_set_gclk_generator+0x40>)
     b0c:	785b      	ldrb	r3, [r3, #1]
     b0e:	4283      	cmp	r3, r0
     b10:	d010      	beq.n	b34 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     b12:	201d      	movs	r0, #29
     b14:	e00c      	b.n	b30 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     b16:	a901      	add	r1, sp, #4
     b18:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     b1a:	2013      	movs	r0, #19
     b1c:	4b07      	ldr	r3, [pc, #28]	; (b3c <sercom_set_gclk_generator+0x44>)
     b1e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     b20:	2013      	movs	r0, #19
     b22:	4b07      	ldr	r3, [pc, #28]	; (b40 <sercom_set_gclk_generator+0x48>)
     b24:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     b26:	4b04      	ldr	r3, [pc, #16]	; (b38 <sercom_set_gclk_generator+0x40>)
     b28:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     b2a:	2201      	movs	r2, #1
     b2c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     b2e:	2000      	movs	r0, #0
}
     b30:	b002      	add	sp, #8
     b32:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     b34:	2000      	movs	r0, #0
     b36:	e7fb      	b.n	b30 <sercom_set_gclk_generator+0x38>
     b38:	2000009c 	.word	0x2000009c
     b3c:	00001795 	.word	0x00001795
     b40:	00001709 	.word	0x00001709

00000b44 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     b44:	4b40      	ldr	r3, [pc, #256]	; (c48 <_sercom_get_default_pad+0x104>)
     b46:	4298      	cmp	r0, r3
     b48:	d031      	beq.n	bae <_sercom_get_default_pad+0x6a>
     b4a:	d90a      	bls.n	b62 <_sercom_get_default_pad+0x1e>
     b4c:	4b3f      	ldr	r3, [pc, #252]	; (c4c <_sercom_get_default_pad+0x108>)
     b4e:	4298      	cmp	r0, r3
     b50:	d04d      	beq.n	bee <_sercom_get_default_pad+0xaa>
     b52:	4b3f      	ldr	r3, [pc, #252]	; (c50 <_sercom_get_default_pad+0x10c>)
     b54:	4298      	cmp	r0, r3
     b56:	d05a      	beq.n	c0e <_sercom_get_default_pad+0xca>
     b58:	4b3e      	ldr	r3, [pc, #248]	; (c54 <_sercom_get_default_pad+0x110>)
     b5a:	4298      	cmp	r0, r3
     b5c:	d037      	beq.n	bce <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     b5e:	2000      	movs	r0, #0
}
     b60:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     b62:	4b3d      	ldr	r3, [pc, #244]	; (c58 <_sercom_get_default_pad+0x114>)
     b64:	4298      	cmp	r0, r3
     b66:	d00c      	beq.n	b82 <_sercom_get_default_pad+0x3e>
     b68:	4b3c      	ldr	r3, [pc, #240]	; (c5c <_sercom_get_default_pad+0x118>)
     b6a:	4298      	cmp	r0, r3
     b6c:	d1f7      	bne.n	b5e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b6e:	2901      	cmp	r1, #1
     b70:	d017      	beq.n	ba2 <_sercom_get_default_pad+0x5e>
     b72:	2900      	cmp	r1, #0
     b74:	d05d      	beq.n	c32 <_sercom_get_default_pad+0xee>
     b76:	2902      	cmp	r1, #2
     b78:	d015      	beq.n	ba6 <_sercom_get_default_pad+0x62>
     b7a:	2903      	cmp	r1, #3
     b7c:	d015      	beq.n	baa <_sercom_get_default_pad+0x66>
	return 0;
     b7e:	2000      	movs	r0, #0
     b80:	e7ee      	b.n	b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b82:	2901      	cmp	r1, #1
     b84:	d007      	beq.n	b96 <_sercom_get_default_pad+0x52>
     b86:	2900      	cmp	r1, #0
     b88:	d051      	beq.n	c2e <_sercom_get_default_pad+0xea>
     b8a:	2902      	cmp	r1, #2
     b8c:	d005      	beq.n	b9a <_sercom_get_default_pad+0x56>
     b8e:	2903      	cmp	r1, #3
     b90:	d005      	beq.n	b9e <_sercom_get_default_pad+0x5a>
	return 0;
     b92:	2000      	movs	r0, #0
     b94:	e7e4      	b.n	b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     b96:	4832      	ldr	r0, [pc, #200]	; (c60 <_sercom_get_default_pad+0x11c>)
     b98:	e7e2      	b.n	b60 <_sercom_get_default_pad+0x1c>
     b9a:	4832      	ldr	r0, [pc, #200]	; (c64 <_sercom_get_default_pad+0x120>)
     b9c:	e7e0      	b.n	b60 <_sercom_get_default_pad+0x1c>
     b9e:	4832      	ldr	r0, [pc, #200]	; (c68 <_sercom_get_default_pad+0x124>)
     ba0:	e7de      	b.n	b60 <_sercom_get_default_pad+0x1c>
     ba2:	4832      	ldr	r0, [pc, #200]	; (c6c <_sercom_get_default_pad+0x128>)
     ba4:	e7dc      	b.n	b60 <_sercom_get_default_pad+0x1c>
     ba6:	4832      	ldr	r0, [pc, #200]	; (c70 <_sercom_get_default_pad+0x12c>)
     ba8:	e7da      	b.n	b60 <_sercom_get_default_pad+0x1c>
     baa:	4832      	ldr	r0, [pc, #200]	; (c74 <_sercom_get_default_pad+0x130>)
     bac:	e7d8      	b.n	b60 <_sercom_get_default_pad+0x1c>
     bae:	2901      	cmp	r1, #1
     bb0:	d007      	beq.n	bc2 <_sercom_get_default_pad+0x7e>
     bb2:	2900      	cmp	r1, #0
     bb4:	d03f      	beq.n	c36 <_sercom_get_default_pad+0xf2>
     bb6:	2902      	cmp	r1, #2
     bb8:	d005      	beq.n	bc6 <_sercom_get_default_pad+0x82>
     bba:	2903      	cmp	r1, #3
     bbc:	d005      	beq.n	bca <_sercom_get_default_pad+0x86>
	return 0;
     bbe:	2000      	movs	r0, #0
     bc0:	e7ce      	b.n	b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     bc2:	482d      	ldr	r0, [pc, #180]	; (c78 <_sercom_get_default_pad+0x134>)
     bc4:	e7cc      	b.n	b60 <_sercom_get_default_pad+0x1c>
     bc6:	482d      	ldr	r0, [pc, #180]	; (c7c <_sercom_get_default_pad+0x138>)
     bc8:	e7ca      	b.n	b60 <_sercom_get_default_pad+0x1c>
     bca:	482d      	ldr	r0, [pc, #180]	; (c80 <_sercom_get_default_pad+0x13c>)
     bcc:	e7c8      	b.n	b60 <_sercom_get_default_pad+0x1c>
     bce:	2901      	cmp	r1, #1
     bd0:	d007      	beq.n	be2 <_sercom_get_default_pad+0x9e>
     bd2:	2900      	cmp	r1, #0
     bd4:	d031      	beq.n	c3a <_sercom_get_default_pad+0xf6>
     bd6:	2902      	cmp	r1, #2
     bd8:	d005      	beq.n	be6 <_sercom_get_default_pad+0xa2>
     bda:	2903      	cmp	r1, #3
     bdc:	d005      	beq.n	bea <_sercom_get_default_pad+0xa6>
	return 0;
     bde:	2000      	movs	r0, #0
     be0:	e7be      	b.n	b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     be2:	4828      	ldr	r0, [pc, #160]	; (c84 <_sercom_get_default_pad+0x140>)
     be4:	e7bc      	b.n	b60 <_sercom_get_default_pad+0x1c>
     be6:	4828      	ldr	r0, [pc, #160]	; (c88 <_sercom_get_default_pad+0x144>)
     be8:	e7ba      	b.n	b60 <_sercom_get_default_pad+0x1c>
     bea:	4828      	ldr	r0, [pc, #160]	; (c8c <_sercom_get_default_pad+0x148>)
     bec:	e7b8      	b.n	b60 <_sercom_get_default_pad+0x1c>
     bee:	2901      	cmp	r1, #1
     bf0:	d007      	beq.n	c02 <_sercom_get_default_pad+0xbe>
     bf2:	2900      	cmp	r1, #0
     bf4:	d023      	beq.n	c3e <_sercom_get_default_pad+0xfa>
     bf6:	2902      	cmp	r1, #2
     bf8:	d005      	beq.n	c06 <_sercom_get_default_pad+0xc2>
     bfa:	2903      	cmp	r1, #3
     bfc:	d005      	beq.n	c0a <_sercom_get_default_pad+0xc6>
	return 0;
     bfe:	2000      	movs	r0, #0
     c00:	e7ae      	b.n	b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c02:	4823      	ldr	r0, [pc, #140]	; (c90 <_sercom_get_default_pad+0x14c>)
     c04:	e7ac      	b.n	b60 <_sercom_get_default_pad+0x1c>
     c06:	4823      	ldr	r0, [pc, #140]	; (c94 <_sercom_get_default_pad+0x150>)
     c08:	e7aa      	b.n	b60 <_sercom_get_default_pad+0x1c>
     c0a:	4823      	ldr	r0, [pc, #140]	; (c98 <_sercom_get_default_pad+0x154>)
     c0c:	e7a8      	b.n	b60 <_sercom_get_default_pad+0x1c>
     c0e:	2901      	cmp	r1, #1
     c10:	d007      	beq.n	c22 <_sercom_get_default_pad+0xde>
     c12:	2900      	cmp	r1, #0
     c14:	d015      	beq.n	c42 <_sercom_get_default_pad+0xfe>
     c16:	2902      	cmp	r1, #2
     c18:	d005      	beq.n	c26 <_sercom_get_default_pad+0xe2>
     c1a:	2903      	cmp	r1, #3
     c1c:	d005      	beq.n	c2a <_sercom_get_default_pad+0xe6>
	return 0;
     c1e:	2000      	movs	r0, #0
     c20:	e79e      	b.n	b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c22:	481e      	ldr	r0, [pc, #120]	; (c9c <_sercom_get_default_pad+0x158>)
     c24:	e79c      	b.n	b60 <_sercom_get_default_pad+0x1c>
     c26:	481e      	ldr	r0, [pc, #120]	; (ca0 <_sercom_get_default_pad+0x15c>)
     c28:	e79a      	b.n	b60 <_sercom_get_default_pad+0x1c>
     c2a:	481e      	ldr	r0, [pc, #120]	; (ca4 <_sercom_get_default_pad+0x160>)
     c2c:	e798      	b.n	b60 <_sercom_get_default_pad+0x1c>
     c2e:	481e      	ldr	r0, [pc, #120]	; (ca8 <_sercom_get_default_pad+0x164>)
     c30:	e796      	b.n	b60 <_sercom_get_default_pad+0x1c>
     c32:	2003      	movs	r0, #3
     c34:	e794      	b.n	b60 <_sercom_get_default_pad+0x1c>
     c36:	481d      	ldr	r0, [pc, #116]	; (cac <_sercom_get_default_pad+0x168>)
     c38:	e792      	b.n	b60 <_sercom_get_default_pad+0x1c>
     c3a:	481d      	ldr	r0, [pc, #116]	; (cb0 <_sercom_get_default_pad+0x16c>)
     c3c:	e790      	b.n	b60 <_sercom_get_default_pad+0x1c>
     c3e:	481d      	ldr	r0, [pc, #116]	; (cb4 <_sercom_get_default_pad+0x170>)
     c40:	e78e      	b.n	b60 <_sercom_get_default_pad+0x1c>
     c42:	481d      	ldr	r0, [pc, #116]	; (cb8 <_sercom_get_default_pad+0x174>)
     c44:	e78c      	b.n	b60 <_sercom_get_default_pad+0x1c>
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	42001000 	.word	0x42001000
     c4c:	42001800 	.word	0x42001800
     c50:	42001c00 	.word	0x42001c00
     c54:	42001400 	.word	0x42001400
     c58:	42000800 	.word	0x42000800
     c5c:	42000c00 	.word	0x42000c00
     c60:	00050003 	.word	0x00050003
     c64:	00060003 	.word	0x00060003
     c68:	00070003 	.word	0x00070003
     c6c:	00010003 	.word	0x00010003
     c70:	001e0003 	.word	0x001e0003
     c74:	001f0003 	.word	0x001f0003
     c78:	00090003 	.word	0x00090003
     c7c:	000a0003 	.word	0x000a0003
     c80:	000b0003 	.word	0x000b0003
     c84:	00110003 	.word	0x00110003
     c88:	00120003 	.word	0x00120003
     c8c:	00130003 	.word	0x00130003
     c90:	000d0003 	.word	0x000d0003
     c94:	000e0003 	.word	0x000e0003
     c98:	000f0003 	.word	0x000f0003
     c9c:	00170003 	.word	0x00170003
     ca0:	00180003 	.word	0x00180003
     ca4:	00190003 	.word	0x00190003
     ca8:	00040003 	.word	0x00040003
     cac:	00080003 	.word	0x00080003
     cb0:	00100003 	.word	0x00100003
     cb4:	000c0003 	.word	0x000c0003
     cb8:	00160003 	.word	0x00160003

00000cbc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     cbc:	b530      	push	{r4, r5, lr}
     cbe:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     cc0:	4b0b      	ldr	r3, [pc, #44]	; (cf0 <_sercom_get_sercom_inst_index+0x34>)
     cc2:	466a      	mov	r2, sp
     cc4:	cb32      	ldmia	r3!, {r1, r4, r5}
     cc6:	c232      	stmia	r2!, {r1, r4, r5}
     cc8:	cb32      	ldmia	r3!, {r1, r4, r5}
     cca:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     ccc:	9b00      	ldr	r3, [sp, #0]
     cce:	4283      	cmp	r3, r0
     cd0:	d00b      	beq.n	cea <_sercom_get_sercom_inst_index+0x2e>
     cd2:	2301      	movs	r3, #1
     cd4:	009a      	lsls	r2, r3, #2
     cd6:	4669      	mov	r1, sp
     cd8:	5852      	ldr	r2, [r2, r1]
     cda:	4282      	cmp	r2, r0
     cdc:	d006      	beq.n	cec <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     cde:	3301      	adds	r3, #1
     ce0:	2b06      	cmp	r3, #6
     ce2:	d1f7      	bne.n	cd4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     ce4:	2000      	movs	r0, #0
}
     ce6:	b007      	add	sp, #28
     ce8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     cea:	2300      	movs	r3, #0
			return i;
     cec:	b2d8      	uxtb	r0, r3
     cee:	e7fa      	b.n	ce6 <_sercom_get_sercom_inst_index+0x2a>
     cf0:	00004868 	.word	0x00004868

00000cf4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     cf4:	4770      	bx	lr
	...

00000cf8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     cfa:	4b0a      	ldr	r3, [pc, #40]	; (d24 <_sercom_set_handler+0x2c>)
     cfc:	781b      	ldrb	r3, [r3, #0]
     cfe:	2b00      	cmp	r3, #0
     d00:	d10c      	bne.n	d1c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d02:	4f09      	ldr	r7, [pc, #36]	; (d28 <_sercom_set_handler+0x30>)
     d04:	4e09      	ldr	r6, [pc, #36]	; (d2c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     d06:	4d0a      	ldr	r5, [pc, #40]	; (d30 <_sercom_set_handler+0x38>)
     d08:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d0a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     d0c:	195a      	adds	r2, r3, r5
     d0e:	6014      	str	r4, [r2, #0]
     d10:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d12:	2b18      	cmp	r3, #24
     d14:	d1f9      	bne.n	d0a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     d16:	2201      	movs	r2, #1
     d18:	4b02      	ldr	r3, [pc, #8]	; (d24 <_sercom_set_handler+0x2c>)
     d1a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     d1c:	0080      	lsls	r0, r0, #2
     d1e:	4b02      	ldr	r3, [pc, #8]	; (d28 <_sercom_set_handler+0x30>)
     d20:	50c1      	str	r1, [r0, r3]
}
     d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d24:	2000009e 	.word	0x2000009e
     d28:	200000a0 	.word	0x200000a0
     d2c:	00000cf5 	.word	0x00000cf5
     d30:	20000118 	.word	0x20000118

00000d34 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     d34:	b500      	push	{lr}
     d36:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     d38:	2309      	movs	r3, #9
     d3a:	466a      	mov	r2, sp
     d3c:	7013      	strb	r3, [r2, #0]
     d3e:	3301      	adds	r3, #1
     d40:	7053      	strb	r3, [r2, #1]
     d42:	3301      	adds	r3, #1
     d44:	7093      	strb	r3, [r2, #2]
     d46:	3301      	adds	r3, #1
     d48:	70d3      	strb	r3, [r2, #3]
     d4a:	3301      	adds	r3, #1
     d4c:	7113      	strb	r3, [r2, #4]
     d4e:	3301      	adds	r3, #1
     d50:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     d52:	4b03      	ldr	r3, [pc, #12]	; (d60 <_sercom_get_interrupt_vector+0x2c>)
     d54:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     d56:	466b      	mov	r3, sp
     d58:	5618      	ldrsb	r0, [r3, r0]
}
     d5a:	b003      	add	sp, #12
     d5c:	bd00      	pop	{pc}
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	00000cbd 	.word	0x00000cbd

00000d64 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     d64:	b510      	push	{r4, lr}
     d66:	4b02      	ldr	r3, [pc, #8]	; (d70 <SERCOM0_Handler+0xc>)
     d68:	681b      	ldr	r3, [r3, #0]
     d6a:	2000      	movs	r0, #0
     d6c:	4798      	blx	r3
     d6e:	bd10      	pop	{r4, pc}
     d70:	200000a0 	.word	0x200000a0

00000d74 <SERCOM1_Handler>:
     d74:	b510      	push	{r4, lr}
     d76:	4b02      	ldr	r3, [pc, #8]	; (d80 <SERCOM1_Handler+0xc>)
     d78:	685b      	ldr	r3, [r3, #4]
     d7a:	2001      	movs	r0, #1
     d7c:	4798      	blx	r3
     d7e:	bd10      	pop	{r4, pc}
     d80:	200000a0 	.word	0x200000a0

00000d84 <SERCOM2_Handler>:
     d84:	b510      	push	{r4, lr}
     d86:	4b02      	ldr	r3, [pc, #8]	; (d90 <SERCOM2_Handler+0xc>)
     d88:	689b      	ldr	r3, [r3, #8]
     d8a:	2002      	movs	r0, #2
     d8c:	4798      	blx	r3
     d8e:	bd10      	pop	{r4, pc}
     d90:	200000a0 	.word	0x200000a0

00000d94 <SERCOM3_Handler>:
     d94:	b510      	push	{r4, lr}
     d96:	4b02      	ldr	r3, [pc, #8]	; (da0 <SERCOM3_Handler+0xc>)
     d98:	68db      	ldr	r3, [r3, #12]
     d9a:	2003      	movs	r0, #3
     d9c:	4798      	blx	r3
     d9e:	bd10      	pop	{r4, pc}
     da0:	200000a0 	.word	0x200000a0

00000da4 <SERCOM4_Handler>:
     da4:	b510      	push	{r4, lr}
     da6:	4b02      	ldr	r3, [pc, #8]	; (db0 <SERCOM4_Handler+0xc>)
     da8:	691b      	ldr	r3, [r3, #16]
     daa:	2004      	movs	r0, #4
     dac:	4798      	blx	r3
     dae:	bd10      	pop	{r4, pc}
     db0:	200000a0 	.word	0x200000a0

00000db4 <SERCOM5_Handler>:
     db4:	b510      	push	{r4, lr}
     db6:	4b02      	ldr	r3, [pc, #8]	; (dc0 <SERCOM5_Handler+0xc>)
     db8:	695b      	ldr	r3, [r3, #20]
     dba:	2005      	movs	r0, #5
     dbc:	4798      	blx	r3
     dbe:	bd10      	pop	{r4, pc}
     dc0:	200000a0 	.word	0x200000a0

00000dc4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     dc6:	46de      	mov	lr, fp
     dc8:	4657      	mov	r7, sl
     dca:	464e      	mov	r6, r9
     dcc:	4645      	mov	r5, r8
     dce:	b5e0      	push	{r5, r6, r7, lr}
     dd0:	b091      	sub	sp, #68	; 0x44
     dd2:	0005      	movs	r5, r0
     dd4:	000c      	movs	r4, r1
     dd6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     dd8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     dda:	0008      	movs	r0, r1
     ddc:	4bbc      	ldr	r3, [pc, #752]	; (10d0 <usart_init+0x30c>)
     dde:	4798      	blx	r3
     de0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     de2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     de4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     de6:	07db      	lsls	r3, r3, #31
     de8:	d506      	bpl.n	df8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     dea:	b011      	add	sp, #68	; 0x44
     dec:	bc3c      	pop	{r2, r3, r4, r5}
     dee:	4690      	mov	r8, r2
     df0:	4699      	mov	r9, r3
     df2:	46a2      	mov	sl, r4
     df4:	46ab      	mov	fp, r5
     df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     df8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     dfa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     dfc:	079b      	lsls	r3, r3, #30
     dfe:	d4f4      	bmi.n	dea <usart_init+0x26>
     e00:	49b4      	ldr	r1, [pc, #720]	; (10d4 <usart_init+0x310>)
     e02:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     e04:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     e06:	2301      	movs	r3, #1
     e08:	40bb      	lsls	r3, r7
     e0a:	4303      	orrs	r3, r0
     e0c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     e0e:	a90f      	add	r1, sp, #60	; 0x3c
     e10:	272d      	movs	r7, #45	; 0x2d
     e12:	5df3      	ldrb	r3, [r6, r7]
     e14:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e16:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     e18:	b2d3      	uxtb	r3, r2
     e1a:	9302      	str	r3, [sp, #8]
     e1c:	0018      	movs	r0, r3
     e1e:	4bae      	ldr	r3, [pc, #696]	; (10d8 <usart_init+0x314>)
     e20:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     e22:	9802      	ldr	r0, [sp, #8]
     e24:	4bad      	ldr	r3, [pc, #692]	; (10dc <usart_init+0x318>)
     e26:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     e28:	5df0      	ldrb	r0, [r6, r7]
     e2a:	2100      	movs	r1, #0
     e2c:	4bac      	ldr	r3, [pc, #688]	; (10e0 <usart_init+0x31c>)
     e2e:	4798      	blx	r3
	module->character_size = config->character_size;
     e30:	7af3      	ldrb	r3, [r6, #11]
     e32:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     e34:	2324      	movs	r3, #36	; 0x24
     e36:	5cf3      	ldrb	r3, [r6, r3]
     e38:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     e3a:	2325      	movs	r3, #37	; 0x25
     e3c:	5cf3      	ldrb	r3, [r6, r3]
     e3e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     e40:	7ef3      	ldrb	r3, [r6, #27]
     e42:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     e44:	7f33      	ldrb	r3, [r6, #28]
     e46:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     e48:	682b      	ldr	r3, [r5, #0]
     e4a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     e4c:	0018      	movs	r0, r3
     e4e:	4ba0      	ldr	r3, [pc, #640]	; (10d0 <usart_init+0x30c>)
     e50:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     e52:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     e54:	2200      	movs	r2, #0
     e56:	230e      	movs	r3, #14
     e58:	a906      	add	r1, sp, #24
     e5a:	468c      	mov	ip, r1
     e5c:	4463      	add	r3, ip
     e5e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     e60:	8a32      	ldrh	r2, [r6, #16]
     e62:	9202      	str	r2, [sp, #8]
     e64:	2380      	movs	r3, #128	; 0x80
     e66:	01db      	lsls	r3, r3, #7
     e68:	429a      	cmp	r2, r3
     e6a:	d100      	bne.n	e6e <usart_init+0xaa>
     e6c:	e09e      	b.n	fac <usart_init+0x1e8>
     e6e:	d90f      	bls.n	e90 <usart_init+0xcc>
     e70:	23c0      	movs	r3, #192	; 0xc0
     e72:	01db      	lsls	r3, r3, #7
     e74:	9a02      	ldr	r2, [sp, #8]
     e76:	429a      	cmp	r2, r3
     e78:	d100      	bne.n	e7c <usart_init+0xb8>
     e7a:	e092      	b.n	fa2 <usart_init+0x1de>
     e7c:	2380      	movs	r3, #128	; 0x80
     e7e:	021b      	lsls	r3, r3, #8
     e80:	429a      	cmp	r2, r3
     e82:	d000      	beq.n	e86 <usart_init+0xc2>
     e84:	e11f      	b.n	10c6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     e86:	2303      	movs	r3, #3
     e88:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e8a:	2300      	movs	r3, #0
     e8c:	9307      	str	r3, [sp, #28]
     e8e:	e008      	b.n	ea2 <usart_init+0xde>
	switch (config->sample_rate) {
     e90:	2380      	movs	r3, #128	; 0x80
     e92:	019b      	lsls	r3, r3, #6
     e94:	429a      	cmp	r2, r3
     e96:	d000      	beq.n	e9a <usart_init+0xd6>
     e98:	e115      	b.n	10c6 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e9a:	2310      	movs	r3, #16
     e9c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     e9e:	3b0f      	subs	r3, #15
     ea0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     ea2:	6833      	ldr	r3, [r6, #0]
     ea4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     ea6:	68f3      	ldr	r3, [r6, #12]
     ea8:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     eaa:	6973      	ldr	r3, [r6, #20]
     eac:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     eae:	7e33      	ldrb	r3, [r6, #24]
     eb0:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     eb2:	2326      	movs	r3, #38	; 0x26
     eb4:	5cf3      	ldrb	r3, [r6, r3]
     eb6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     eb8:	6873      	ldr	r3, [r6, #4]
     eba:	4699      	mov	r9, r3
	switch (transfer_mode)
     ebc:	2b00      	cmp	r3, #0
     ebe:	d100      	bne.n	ec2 <usart_init+0xfe>
     ec0:	e0a0      	b.n	1004 <usart_init+0x240>
     ec2:	2380      	movs	r3, #128	; 0x80
     ec4:	055b      	lsls	r3, r3, #21
     ec6:	4599      	cmp	r9, r3
     ec8:	d100      	bne.n	ecc <usart_init+0x108>
     eca:	e084      	b.n	fd6 <usart_init+0x212>
	if(config->encoding_format_enable) {
     ecc:	7e73      	ldrb	r3, [r6, #25]
     ece:	2b00      	cmp	r3, #0
     ed0:	d002      	beq.n	ed8 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     ed2:	7eb3      	ldrb	r3, [r6, #26]
     ed4:	4642      	mov	r2, r8
     ed6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     ed8:	682a      	ldr	r2, [r5, #0]
     eda:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     edc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     ede:	2b00      	cmp	r3, #0
     ee0:	d1fc      	bne.n	edc <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     ee2:	330e      	adds	r3, #14
     ee4:	aa06      	add	r2, sp, #24
     ee6:	4694      	mov	ip, r2
     ee8:	4463      	add	r3, ip
     eea:	881b      	ldrh	r3, [r3, #0]
     eec:	4642      	mov	r2, r8
     eee:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     ef0:	9b05      	ldr	r3, [sp, #20]
     ef2:	9a03      	ldr	r2, [sp, #12]
     ef4:	4313      	orrs	r3, r2
     ef6:	9a04      	ldr	r2, [sp, #16]
     ef8:	4313      	orrs	r3, r2
     efa:	464a      	mov	r2, r9
     efc:	4313      	orrs	r3, r2
     efe:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     f00:	465b      	mov	r3, fp
     f02:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     f04:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     f06:	4653      	mov	r3, sl
     f08:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     f0a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     f0c:	2327      	movs	r3, #39	; 0x27
     f0e:	5cf3      	ldrb	r3, [r6, r3]
     f10:	2b00      	cmp	r3, #0
     f12:	d101      	bne.n	f18 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     f14:	3304      	adds	r3, #4
     f16:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f18:	7e73      	ldrb	r3, [r6, #25]
     f1a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f1c:	7f32      	ldrb	r2, [r6, #28]
     f1e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     f20:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f22:	7f72      	ldrb	r2, [r6, #29]
     f24:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     f26:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     f28:	2224      	movs	r2, #36	; 0x24
     f2a:	5cb2      	ldrb	r2, [r6, r2]
     f2c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     f2e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     f30:	2225      	movs	r2, #37	; 0x25
     f32:	5cb2      	ldrb	r2, [r6, r2]
     f34:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     f36:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     f38:	7ab1      	ldrb	r1, [r6, #10]
     f3a:	7af2      	ldrb	r2, [r6, #11]
     f3c:	4311      	orrs	r1, r2
     f3e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     f40:	8933      	ldrh	r3, [r6, #8]
     f42:	2bff      	cmp	r3, #255	; 0xff
     f44:	d100      	bne.n	f48 <usart_init+0x184>
     f46:	e081      	b.n	104c <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     f48:	2280      	movs	r2, #128	; 0x80
     f4a:	0452      	lsls	r2, r2, #17
     f4c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     f4e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     f50:	232c      	movs	r3, #44	; 0x2c
     f52:	5cf3      	ldrb	r3, [r6, r3]
     f54:	2b00      	cmp	r3, #0
     f56:	d103      	bne.n	f60 <usart_init+0x19c>
     f58:	4b62      	ldr	r3, [pc, #392]	; (10e4 <usart_init+0x320>)
     f5a:	789b      	ldrb	r3, [r3, #2]
     f5c:	079b      	lsls	r3, r3, #30
     f5e:	d501      	bpl.n	f64 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     f60:	2380      	movs	r3, #128	; 0x80
     f62:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     f64:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     f66:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     f68:	2b00      	cmp	r3, #0
     f6a:	d1fc      	bne.n	f66 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     f6c:	4643      	mov	r3, r8
     f6e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     f70:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     f72:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     f74:	2b00      	cmp	r3, #0
     f76:	d1fc      	bne.n	f72 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     f78:	4643      	mov	r3, r8
     f7a:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f7c:	ab0e      	add	r3, sp, #56	; 0x38
     f7e:	2280      	movs	r2, #128	; 0x80
     f80:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     f82:	2200      	movs	r2, #0
     f84:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     f86:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     f88:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     f8a:	6b33      	ldr	r3, [r6, #48]	; 0x30
     f8c:	930a      	str	r3, [sp, #40]	; 0x28
     f8e:	6b73      	ldr	r3, [r6, #52]	; 0x34
     f90:	930b      	str	r3, [sp, #44]	; 0x2c
     f92:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     f94:	930c      	str	r3, [sp, #48]	; 0x30
     f96:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     f98:	9302      	str	r3, [sp, #8]
     f9a:	930d      	str	r3, [sp, #52]	; 0x34
     f9c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     f9e:	ae0a      	add	r6, sp, #40	; 0x28
     fa0:	e063      	b.n	106a <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     fa2:	2308      	movs	r3, #8
     fa4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     fa6:	3b07      	subs	r3, #7
     fa8:	9307      	str	r3, [sp, #28]
     faa:	e77a      	b.n	ea2 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     fac:	6833      	ldr	r3, [r6, #0]
     fae:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     fb0:	68f3      	ldr	r3, [r6, #12]
     fb2:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     fb4:	6973      	ldr	r3, [r6, #20]
     fb6:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     fb8:	7e33      	ldrb	r3, [r6, #24]
     fba:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     fbc:	2326      	movs	r3, #38	; 0x26
     fbe:	5cf3      	ldrb	r3, [r6, r3]
     fc0:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     fc2:	6873      	ldr	r3, [r6, #4]
     fc4:	4699      	mov	r9, r3
	switch (transfer_mode)
     fc6:	2b00      	cmp	r3, #0
     fc8:	d018      	beq.n	ffc <usart_init+0x238>
     fca:	2380      	movs	r3, #128	; 0x80
     fcc:	055b      	lsls	r3, r3, #21
     fce:	4599      	cmp	r9, r3
     fd0:	d001      	beq.n	fd6 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     fd2:	2000      	movs	r0, #0
     fd4:	e025      	b.n	1022 <usart_init+0x25e>
			if (!config->use_external_clock) {
     fd6:	2327      	movs	r3, #39	; 0x27
     fd8:	5cf3      	ldrb	r3, [r6, r3]
     fda:	2b00      	cmp	r3, #0
     fdc:	d000      	beq.n	fe0 <usart_init+0x21c>
     fde:	e775      	b.n	ecc <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     fe0:	6a33      	ldr	r3, [r6, #32]
     fe2:	001f      	movs	r7, r3
     fe4:	b2c0      	uxtb	r0, r0
     fe6:	4b40      	ldr	r3, [pc, #256]	; (10e8 <usart_init+0x324>)
     fe8:	4798      	blx	r3
     fea:	0001      	movs	r1, r0
     fec:	220e      	movs	r2, #14
     fee:	ab06      	add	r3, sp, #24
     ff0:	469c      	mov	ip, r3
     ff2:	4462      	add	r2, ip
     ff4:	0038      	movs	r0, r7
     ff6:	4b3d      	ldr	r3, [pc, #244]	; (10ec <usart_init+0x328>)
     ff8:	4798      	blx	r3
     ffa:	e012      	b.n	1022 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ffc:	2308      	movs	r3, #8
     ffe:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1000:	2300      	movs	r3, #0
    1002:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1004:	2327      	movs	r3, #39	; 0x27
    1006:	5cf3      	ldrb	r3, [r6, r3]
    1008:	2b00      	cmp	r3, #0
    100a:	d00e      	beq.n	102a <usart_init+0x266>
				status_code =
    100c:	9b06      	ldr	r3, [sp, #24]
    100e:	9300      	str	r3, [sp, #0]
    1010:	9b07      	ldr	r3, [sp, #28]
    1012:	220e      	movs	r2, #14
    1014:	a906      	add	r1, sp, #24
    1016:	468c      	mov	ip, r1
    1018:	4462      	add	r2, ip
    101a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    101c:	6a30      	ldr	r0, [r6, #32]
    101e:	4f34      	ldr	r7, [pc, #208]	; (10f0 <usart_init+0x32c>)
    1020:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1022:	2800      	cmp	r0, #0
    1024:	d000      	beq.n	1028 <usart_init+0x264>
    1026:	e6e0      	b.n	dea <usart_init+0x26>
    1028:	e750      	b.n	ecc <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    102a:	6a33      	ldr	r3, [r6, #32]
    102c:	001f      	movs	r7, r3
    102e:	b2c0      	uxtb	r0, r0
    1030:	4b2d      	ldr	r3, [pc, #180]	; (10e8 <usart_init+0x324>)
    1032:	4798      	blx	r3
    1034:	0001      	movs	r1, r0
				status_code =
    1036:	9b06      	ldr	r3, [sp, #24]
    1038:	9300      	str	r3, [sp, #0]
    103a:	9b07      	ldr	r3, [sp, #28]
    103c:	220e      	movs	r2, #14
    103e:	a806      	add	r0, sp, #24
    1040:	4684      	mov	ip, r0
    1042:	4462      	add	r2, ip
    1044:	0038      	movs	r0, r7
    1046:	4f2a      	ldr	r7, [pc, #168]	; (10f0 <usart_init+0x32c>)
    1048:	47b8      	blx	r7
    104a:	e7ea      	b.n	1022 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    104c:	7ef3      	ldrb	r3, [r6, #27]
    104e:	2b00      	cmp	r3, #0
    1050:	d100      	bne.n	1054 <usart_init+0x290>
    1052:	e77d      	b.n	f50 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1054:	2380      	movs	r3, #128	; 0x80
    1056:	04db      	lsls	r3, r3, #19
    1058:	431f      	orrs	r7, r3
    105a:	e779      	b.n	f50 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    105c:	0020      	movs	r0, r4
    105e:	4b25      	ldr	r3, [pc, #148]	; (10f4 <usart_init+0x330>)
    1060:	4798      	blx	r3
    1062:	e007      	b.n	1074 <usart_init+0x2b0>
    1064:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1066:	2f04      	cmp	r7, #4
    1068:	d00d      	beq.n	1086 <usart_init+0x2c2>
    106a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    106c:	00bb      	lsls	r3, r7, #2
    106e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1070:	2800      	cmp	r0, #0
    1072:	d0f3      	beq.n	105c <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1074:	1c43      	adds	r3, r0, #1
    1076:	d0f5      	beq.n	1064 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1078:	a90e      	add	r1, sp, #56	; 0x38
    107a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    107c:	0c00      	lsrs	r0, r0, #16
    107e:	b2c0      	uxtb	r0, r0
    1080:	4b1d      	ldr	r3, [pc, #116]	; (10f8 <usart_init+0x334>)
    1082:	4798      	blx	r3
    1084:	e7ee      	b.n	1064 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1086:	2300      	movs	r3, #0
    1088:	60eb      	str	r3, [r5, #12]
    108a:	612b      	str	r3, [r5, #16]
    108c:	616b      	str	r3, [r5, #20]
    108e:	61ab      	str	r3, [r5, #24]
    1090:	61eb      	str	r3, [r5, #28]
    1092:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1094:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1096:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1098:	2200      	movs	r2, #0
    109a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    109c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    109e:	3330      	adds	r3, #48	; 0x30
    10a0:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    10a2:	3301      	adds	r3, #1
    10a4:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    10a6:	3301      	adds	r3, #1
    10a8:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    10aa:	3301      	adds	r3, #1
    10ac:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    10ae:	6828      	ldr	r0, [r5, #0]
    10b0:	4b07      	ldr	r3, [pc, #28]	; (10d0 <usart_init+0x30c>)
    10b2:	4798      	blx	r3
    10b4:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    10b6:	4911      	ldr	r1, [pc, #68]	; (10fc <usart_init+0x338>)
    10b8:	4b11      	ldr	r3, [pc, #68]	; (1100 <usart_init+0x33c>)
    10ba:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    10bc:	00a4      	lsls	r4, r4, #2
    10be:	4b11      	ldr	r3, [pc, #68]	; (1104 <usart_init+0x340>)
    10c0:	50e5      	str	r5, [r4, r3]
	return status_code;
    10c2:	2000      	movs	r0, #0
    10c4:	e691      	b.n	dea <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    10c6:	2310      	movs	r3, #16
    10c8:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10ca:	2300      	movs	r3, #0
    10cc:	9307      	str	r3, [sp, #28]
    10ce:	e6e8      	b.n	ea2 <usart_init+0xde>
    10d0:	00000cbd 	.word	0x00000cbd
    10d4:	40000400 	.word	0x40000400
    10d8:	00001795 	.word	0x00001795
    10dc:	00001709 	.word	0x00001709
    10e0:	00000af9 	.word	0x00000af9
    10e4:	41002000 	.word	0x41002000
    10e8:	000017b1 	.word	0x000017b1
    10ec:	00000a3b 	.word	0x00000a3b
    10f0:	00000a65 	.word	0x00000a65
    10f4:	00000b45 	.word	0x00000b45
    10f8:	0000188d 	.word	0x0000188d
    10fc:	000011a5 	.word	0x000011a5
    1100:	00000cf9 	.word	0x00000cf9
    1104:	20000118 	.word	0x20000118

00001108 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1108:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    110a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    110c:	2a00      	cmp	r2, #0
    110e:	d101      	bne.n	1114 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1110:	0018      	movs	r0, r3
    1112:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1114:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1116:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1118:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    111a:	2a00      	cmp	r2, #0
    111c:	d1f8      	bne.n	1110 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    111e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1120:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1122:	2a00      	cmp	r2, #0
    1124:	d1fc      	bne.n	1120 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1126:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1128:	2102      	movs	r1, #2
    112a:	7e1a      	ldrb	r2, [r3, #24]
    112c:	420a      	tst	r2, r1
    112e:	d0fc      	beq.n	112a <usart_write_wait+0x22>
	return STATUS_OK;
    1130:	2300      	movs	r3, #0
    1132:	e7ed      	b.n	1110 <usart_write_wait+0x8>

00001134 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1134:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1136:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1138:	2a00      	cmp	r2, #0
    113a:	d101      	bne.n	1140 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    113c:	0018      	movs	r0, r3
    113e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1140:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1142:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1144:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1146:	2a00      	cmp	r2, #0
    1148:	d1f8      	bne.n	113c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    114a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    114c:	7e10      	ldrb	r0, [r2, #24]
    114e:	0740      	lsls	r0, r0, #29
    1150:	d5f4      	bpl.n	113c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1152:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1154:	2b00      	cmp	r3, #0
    1156:	d1fc      	bne.n	1152 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1158:	8b53      	ldrh	r3, [r2, #26]
    115a:	b2db      	uxtb	r3, r3
	if (error_code) {
    115c:	0698      	lsls	r0, r3, #26
    115e:	d01d      	beq.n	119c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1160:	0798      	lsls	r0, r3, #30
    1162:	d503      	bpl.n	116c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1164:	2302      	movs	r3, #2
    1166:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1168:	3318      	adds	r3, #24
    116a:	e7e7      	b.n	113c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    116c:	0758      	lsls	r0, r3, #29
    116e:	d503      	bpl.n	1178 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1170:	2304      	movs	r3, #4
    1172:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1174:	331a      	adds	r3, #26
    1176:	e7e1      	b.n	113c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1178:	07d8      	lsls	r0, r3, #31
    117a:	d503      	bpl.n	1184 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    117c:	2301      	movs	r3, #1
    117e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1180:	3312      	adds	r3, #18
    1182:	e7db      	b.n	113c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1184:	06d8      	lsls	r0, r3, #27
    1186:	d503      	bpl.n	1190 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1188:	2310      	movs	r3, #16
    118a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    118c:	3332      	adds	r3, #50	; 0x32
    118e:	e7d5      	b.n	113c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1190:	069b      	lsls	r3, r3, #26
    1192:	d503      	bpl.n	119c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1194:	2320      	movs	r3, #32
    1196:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1198:	3321      	adds	r3, #33	; 0x21
    119a:	e7cf      	b.n	113c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    119c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    119e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    11a0:	2300      	movs	r3, #0
    11a2:	e7cb      	b.n	113c <usart_read_wait+0x8>

000011a4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    11a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    11a6:	0080      	lsls	r0, r0, #2
    11a8:	4b62      	ldr	r3, [pc, #392]	; (1334 <_usart_interrupt_handler+0x190>)
    11aa:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    11ac:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    11ae:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    11b0:	2b00      	cmp	r3, #0
    11b2:	d1fc      	bne.n	11ae <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    11b4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    11b6:	7da6      	ldrb	r6, [r4, #22]
    11b8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    11ba:	2330      	movs	r3, #48	; 0x30
    11bc:	5ceb      	ldrb	r3, [r5, r3]
    11be:	2231      	movs	r2, #49	; 0x31
    11c0:	5caf      	ldrb	r7, [r5, r2]
    11c2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    11c4:	07f3      	lsls	r3, r6, #31
    11c6:	d522      	bpl.n	120e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    11c8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    11ca:	b29b      	uxth	r3, r3
    11cc:	2b00      	cmp	r3, #0
    11ce:	d01c      	beq.n	120a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    11d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    11d2:	7813      	ldrb	r3, [r2, #0]
    11d4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    11d6:	1c51      	adds	r1, r2, #1
    11d8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    11da:	7969      	ldrb	r1, [r5, #5]
    11dc:	2901      	cmp	r1, #1
    11de:	d00e      	beq.n	11fe <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    11e0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    11e2:	05db      	lsls	r3, r3, #23
    11e4:	0ddb      	lsrs	r3, r3, #23
    11e6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    11e8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    11ea:	3b01      	subs	r3, #1
    11ec:	b29b      	uxth	r3, r3
    11ee:	85eb      	strh	r3, [r5, #46]	; 0x2e
    11f0:	2b00      	cmp	r3, #0
    11f2:	d10c      	bne.n	120e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    11f4:	3301      	adds	r3, #1
    11f6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    11f8:	3301      	adds	r3, #1
    11fa:	75a3      	strb	r3, [r4, #22]
    11fc:	e007      	b.n	120e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    11fe:	7851      	ldrb	r1, [r2, #1]
    1200:	0209      	lsls	r1, r1, #8
    1202:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1204:	3202      	adds	r2, #2
    1206:	62aa      	str	r2, [r5, #40]	; 0x28
    1208:	e7eb      	b.n	11e2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    120a:	2301      	movs	r3, #1
    120c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    120e:	07b3      	lsls	r3, r6, #30
    1210:	d506      	bpl.n	1220 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1212:	2302      	movs	r3, #2
    1214:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1216:	2200      	movs	r2, #0
    1218:	3331      	adds	r3, #49	; 0x31
    121a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    121c:	07fb      	lsls	r3, r7, #31
    121e:	d41a      	bmi.n	1256 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1220:	0773      	lsls	r3, r6, #29
    1222:	d565      	bpl.n	12f0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    1224:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1226:	b29b      	uxth	r3, r3
    1228:	2b00      	cmp	r3, #0
    122a:	d05f      	beq.n	12ec <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    122c:	8b63      	ldrh	r3, [r4, #26]
    122e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1230:	071a      	lsls	r2, r3, #28
    1232:	d414      	bmi.n	125e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1234:	223f      	movs	r2, #63	; 0x3f
    1236:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1238:	2b00      	cmp	r3, #0
    123a:	d034      	beq.n	12a6 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    123c:	079a      	lsls	r2, r3, #30
    123e:	d511      	bpl.n	1264 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1240:	221a      	movs	r2, #26
    1242:	2332      	movs	r3, #50	; 0x32
    1244:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1246:	3b30      	subs	r3, #48	; 0x30
    1248:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    124a:	077b      	lsls	r3, r7, #29
    124c:	d550      	bpl.n	12f0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    124e:	0028      	movs	r0, r5
    1250:	696b      	ldr	r3, [r5, #20]
    1252:	4798      	blx	r3
    1254:	e04c      	b.n	12f0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1256:	0028      	movs	r0, r5
    1258:	68eb      	ldr	r3, [r5, #12]
    125a:	4798      	blx	r3
    125c:	e7e0      	b.n	1220 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    125e:	2237      	movs	r2, #55	; 0x37
    1260:	4013      	ands	r3, r2
    1262:	e7e9      	b.n	1238 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1264:	075a      	lsls	r2, r3, #29
    1266:	d505      	bpl.n	1274 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1268:	221e      	movs	r2, #30
    126a:	2332      	movs	r3, #50	; 0x32
    126c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    126e:	3b2e      	subs	r3, #46	; 0x2e
    1270:	8363      	strh	r3, [r4, #26]
    1272:	e7ea      	b.n	124a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1274:	07da      	lsls	r2, r3, #31
    1276:	d505      	bpl.n	1284 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1278:	2213      	movs	r2, #19
    127a:	2332      	movs	r3, #50	; 0x32
    127c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    127e:	3b31      	subs	r3, #49	; 0x31
    1280:	8363      	strh	r3, [r4, #26]
    1282:	e7e2      	b.n	124a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1284:	06da      	lsls	r2, r3, #27
    1286:	d505      	bpl.n	1294 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1288:	2242      	movs	r2, #66	; 0x42
    128a:	2332      	movs	r3, #50	; 0x32
    128c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    128e:	3b22      	subs	r3, #34	; 0x22
    1290:	8363      	strh	r3, [r4, #26]
    1292:	e7da      	b.n	124a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1294:	2220      	movs	r2, #32
    1296:	421a      	tst	r2, r3
    1298:	d0d7      	beq.n	124a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    129a:	3221      	adds	r2, #33	; 0x21
    129c:	2332      	movs	r3, #50	; 0x32
    129e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    12a0:	3b12      	subs	r3, #18
    12a2:	8363      	strh	r3, [r4, #26]
    12a4:	e7d1      	b.n	124a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    12a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    12a8:	05db      	lsls	r3, r3, #23
    12aa:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    12ac:	b2da      	uxtb	r2, r3
    12ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
    12b0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    12b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    12b4:	1c51      	adds	r1, r2, #1
    12b6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    12b8:	7969      	ldrb	r1, [r5, #5]
    12ba:	2901      	cmp	r1, #1
    12bc:	d010      	beq.n	12e0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    12be:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    12c0:	3b01      	subs	r3, #1
    12c2:	b29b      	uxth	r3, r3
    12c4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    12c6:	2b00      	cmp	r3, #0
    12c8:	d112      	bne.n	12f0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    12ca:	3304      	adds	r3, #4
    12cc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    12ce:	2200      	movs	r2, #0
    12d0:	332e      	adds	r3, #46	; 0x2e
    12d2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    12d4:	07bb      	lsls	r3, r7, #30
    12d6:	d50b      	bpl.n	12f0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    12d8:	0028      	movs	r0, r5
    12da:	692b      	ldr	r3, [r5, #16]
    12dc:	4798      	blx	r3
    12de:	e007      	b.n	12f0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    12e0:	0a1b      	lsrs	r3, r3, #8
    12e2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    12e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    12e6:	3301      	adds	r3, #1
    12e8:	626b      	str	r3, [r5, #36]	; 0x24
    12ea:	e7e8      	b.n	12be <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    12ec:	2304      	movs	r3, #4
    12ee:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    12f0:	06f3      	lsls	r3, r6, #27
    12f2:	d504      	bpl.n	12fe <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    12f4:	2310      	movs	r3, #16
    12f6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    12f8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    12fa:	06fb      	lsls	r3, r7, #27
    12fc:	d40e      	bmi.n	131c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    12fe:	06b3      	lsls	r3, r6, #26
    1300:	d504      	bpl.n	130c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1302:	2320      	movs	r3, #32
    1304:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1306:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1308:	073b      	lsls	r3, r7, #28
    130a:	d40b      	bmi.n	1324 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    130c:	0733      	lsls	r3, r6, #28
    130e:	d504      	bpl.n	131a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1310:	2308      	movs	r3, #8
    1312:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1314:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1316:	06bb      	lsls	r3, r7, #26
    1318:	d408      	bmi.n	132c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    131c:	0028      	movs	r0, r5
    131e:	69eb      	ldr	r3, [r5, #28]
    1320:	4798      	blx	r3
    1322:	e7ec      	b.n	12fe <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1324:	0028      	movs	r0, r5
    1326:	69ab      	ldr	r3, [r5, #24]
    1328:	4798      	blx	r3
    132a:	e7ef      	b.n	130c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    132c:	6a2b      	ldr	r3, [r5, #32]
    132e:	0028      	movs	r0, r5
    1330:	4798      	blx	r3
}
    1332:	e7f2      	b.n	131a <_usart_interrupt_handler+0x176>
    1334:	20000118 	.word	0x20000118

00001338 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1338:	b510      	push	{r4, lr}
	switch (clock_source) {
    133a:	2808      	cmp	r0, #8
    133c:	d803      	bhi.n	1346 <system_clock_source_get_hz+0xe>
    133e:	0080      	lsls	r0, r0, #2
    1340:	4b1b      	ldr	r3, [pc, #108]	; (13b0 <system_clock_source_get_hz+0x78>)
    1342:	581b      	ldr	r3, [r3, r0]
    1344:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1346:	2000      	movs	r0, #0
    1348:	e030      	b.n	13ac <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    134a:	4b1a      	ldr	r3, [pc, #104]	; (13b4 <system_clock_source_get_hz+0x7c>)
    134c:	6918      	ldr	r0, [r3, #16]
    134e:	e02d      	b.n	13ac <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1350:	4b19      	ldr	r3, [pc, #100]	; (13b8 <system_clock_source_get_hz+0x80>)
    1352:	6a1b      	ldr	r3, [r3, #32]
    1354:	059b      	lsls	r3, r3, #22
    1356:	0f9b      	lsrs	r3, r3, #30
    1358:	4818      	ldr	r0, [pc, #96]	; (13bc <system_clock_source_get_hz+0x84>)
    135a:	40d8      	lsrs	r0, r3
    135c:	e026      	b.n	13ac <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    135e:	4b15      	ldr	r3, [pc, #84]	; (13b4 <system_clock_source_get_hz+0x7c>)
    1360:	6958      	ldr	r0, [r3, #20]
    1362:	e023      	b.n	13ac <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1364:	4b13      	ldr	r3, [pc, #76]	; (13b4 <system_clock_source_get_hz+0x7c>)
    1366:	681b      	ldr	r3, [r3, #0]
			return 0;
    1368:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    136a:	079b      	lsls	r3, r3, #30
    136c:	d51e      	bpl.n	13ac <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    136e:	4912      	ldr	r1, [pc, #72]	; (13b8 <system_clock_source_get_hz+0x80>)
    1370:	2210      	movs	r2, #16
    1372:	68cb      	ldr	r3, [r1, #12]
    1374:	421a      	tst	r2, r3
    1376:	d0fc      	beq.n	1372 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1378:	4b0e      	ldr	r3, [pc, #56]	; (13b4 <system_clock_source_get_hz+0x7c>)
    137a:	681b      	ldr	r3, [r3, #0]
    137c:	075b      	lsls	r3, r3, #29
    137e:	d401      	bmi.n	1384 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1380:	480f      	ldr	r0, [pc, #60]	; (13c0 <system_clock_source_get_hz+0x88>)
    1382:	e013      	b.n	13ac <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1384:	2000      	movs	r0, #0
    1386:	4b0f      	ldr	r3, [pc, #60]	; (13c4 <system_clock_source_get_hz+0x8c>)
    1388:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    138a:	4b0a      	ldr	r3, [pc, #40]	; (13b4 <system_clock_source_get_hz+0x7c>)
    138c:	689b      	ldr	r3, [r3, #8]
    138e:	041b      	lsls	r3, r3, #16
    1390:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1392:	4358      	muls	r0, r3
    1394:	e00a      	b.n	13ac <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1396:	2350      	movs	r3, #80	; 0x50
    1398:	4a07      	ldr	r2, [pc, #28]	; (13b8 <system_clock_source_get_hz+0x80>)
    139a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    139c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    139e:	075b      	lsls	r3, r3, #29
    13a0:	d504      	bpl.n	13ac <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    13a2:	4b04      	ldr	r3, [pc, #16]	; (13b4 <system_clock_source_get_hz+0x7c>)
    13a4:	68d8      	ldr	r0, [r3, #12]
    13a6:	e001      	b.n	13ac <system_clock_source_get_hz+0x74>
		return 32768UL;
    13a8:	2080      	movs	r0, #128	; 0x80
    13aa:	0200      	lsls	r0, r0, #8
	}
}
    13ac:	bd10      	pop	{r4, pc}
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	00004880 	.word	0x00004880
    13b4:	200000b8 	.word	0x200000b8
    13b8:	40000800 	.word	0x40000800
    13bc:	007a1200 	.word	0x007a1200
    13c0:	02dc6c00 	.word	0x02dc6c00
    13c4:	000017b1 	.word	0x000017b1

000013c8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    13c8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    13ca:	490c      	ldr	r1, [pc, #48]	; (13fc <system_clock_source_osc8m_set_config+0x34>)
    13cc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    13ce:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    13d0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    13d2:	7840      	ldrb	r0, [r0, #1]
    13d4:	2201      	movs	r2, #1
    13d6:	4010      	ands	r0, r2
    13d8:	0180      	lsls	r0, r0, #6
    13da:	2640      	movs	r6, #64	; 0x40
    13dc:	43b3      	bics	r3, r6
    13de:	4303      	orrs	r3, r0
    13e0:	402a      	ands	r2, r5
    13e2:	01d2      	lsls	r2, r2, #7
    13e4:	2080      	movs	r0, #128	; 0x80
    13e6:	4383      	bics	r3, r0
    13e8:	4313      	orrs	r3, r2
    13ea:	2203      	movs	r2, #3
    13ec:	4022      	ands	r2, r4
    13ee:	0212      	lsls	r2, r2, #8
    13f0:	4803      	ldr	r0, [pc, #12]	; (1400 <system_clock_source_osc8m_set_config+0x38>)
    13f2:	4003      	ands	r3, r0
    13f4:	4313      	orrs	r3, r2
    13f6:	620b      	str	r3, [r1, #32]
}
    13f8:	bd70      	pop	{r4, r5, r6, pc}
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	40000800 	.word	0x40000800
    1400:	fffffcff 	.word	0xfffffcff

00001404 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1404:	2808      	cmp	r0, #8
    1406:	d803      	bhi.n	1410 <system_clock_source_enable+0xc>
    1408:	0080      	lsls	r0, r0, #2
    140a:	4b25      	ldr	r3, [pc, #148]	; (14a0 <system_clock_source_enable+0x9c>)
    140c:	581b      	ldr	r3, [r3, r0]
    140e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1410:	2017      	movs	r0, #23
    1412:	e044      	b.n	149e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1414:	4a23      	ldr	r2, [pc, #140]	; (14a4 <system_clock_source_enable+0xa0>)
    1416:	6a13      	ldr	r3, [r2, #32]
    1418:	2102      	movs	r1, #2
    141a:	430b      	orrs	r3, r1
    141c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    141e:	2000      	movs	r0, #0
    1420:	e03d      	b.n	149e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1422:	4a20      	ldr	r2, [pc, #128]	; (14a4 <system_clock_source_enable+0xa0>)
    1424:	6993      	ldr	r3, [r2, #24]
    1426:	2102      	movs	r1, #2
    1428:	430b      	orrs	r3, r1
    142a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    142c:	2000      	movs	r0, #0
		break;
    142e:	e036      	b.n	149e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1430:	4a1c      	ldr	r2, [pc, #112]	; (14a4 <system_clock_source_enable+0xa0>)
    1432:	8a13      	ldrh	r3, [r2, #16]
    1434:	2102      	movs	r1, #2
    1436:	430b      	orrs	r3, r1
    1438:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    143a:	2000      	movs	r0, #0
		break;
    143c:	e02f      	b.n	149e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    143e:	4a19      	ldr	r2, [pc, #100]	; (14a4 <system_clock_source_enable+0xa0>)
    1440:	8a93      	ldrh	r3, [r2, #20]
    1442:	2102      	movs	r1, #2
    1444:	430b      	orrs	r3, r1
    1446:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1448:	2000      	movs	r0, #0
		break;
    144a:	e028      	b.n	149e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    144c:	4916      	ldr	r1, [pc, #88]	; (14a8 <system_clock_source_enable+0xa4>)
    144e:	680b      	ldr	r3, [r1, #0]
    1450:	2202      	movs	r2, #2
    1452:	4313      	orrs	r3, r2
    1454:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1456:	4b13      	ldr	r3, [pc, #76]	; (14a4 <system_clock_source_enable+0xa0>)
    1458:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    145a:	0019      	movs	r1, r3
    145c:	320e      	adds	r2, #14
    145e:	68cb      	ldr	r3, [r1, #12]
    1460:	421a      	tst	r2, r3
    1462:	d0fc      	beq.n	145e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1464:	4a10      	ldr	r2, [pc, #64]	; (14a8 <system_clock_source_enable+0xa4>)
    1466:	6891      	ldr	r1, [r2, #8]
    1468:	4b0e      	ldr	r3, [pc, #56]	; (14a4 <system_clock_source_enable+0xa0>)
    146a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    146c:	6852      	ldr	r2, [r2, #4]
    146e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1470:	2200      	movs	r2, #0
    1472:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1474:	0019      	movs	r1, r3
    1476:	3210      	adds	r2, #16
    1478:	68cb      	ldr	r3, [r1, #12]
    147a:	421a      	tst	r2, r3
    147c:	d0fc      	beq.n	1478 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    147e:	4b0a      	ldr	r3, [pc, #40]	; (14a8 <system_clock_source_enable+0xa4>)
    1480:	681b      	ldr	r3, [r3, #0]
    1482:	b29b      	uxth	r3, r3
    1484:	4a07      	ldr	r2, [pc, #28]	; (14a4 <system_clock_source_enable+0xa0>)
    1486:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1488:	2000      	movs	r0, #0
    148a:	e008      	b.n	149e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    148c:	4905      	ldr	r1, [pc, #20]	; (14a4 <system_clock_source_enable+0xa0>)
    148e:	2244      	movs	r2, #68	; 0x44
    1490:	5c8b      	ldrb	r3, [r1, r2]
    1492:	2002      	movs	r0, #2
    1494:	4303      	orrs	r3, r0
    1496:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1498:	2000      	movs	r0, #0
		break;
    149a:	e000      	b.n	149e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    149c:	2000      	movs	r0, #0
}
    149e:	4770      	bx	lr
    14a0:	000048a4 	.word	0x000048a4
    14a4:	40000800 	.word	0x40000800
    14a8:	200000b8 	.word	0x200000b8

000014ac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    14ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ae:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    14b0:	22c2      	movs	r2, #194	; 0xc2
    14b2:	00d2      	lsls	r2, r2, #3
    14b4:	4b20      	ldr	r3, [pc, #128]	; (1538 <system_clock_init+0x8c>)
    14b6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    14b8:	4a20      	ldr	r2, [pc, #128]	; (153c <system_clock_init+0x90>)
    14ba:	6853      	ldr	r3, [r2, #4]
    14bc:	211e      	movs	r1, #30
    14be:	438b      	bics	r3, r1
    14c0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    14c2:	2302      	movs	r3, #2
    14c4:	466a      	mov	r2, sp
    14c6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    14c8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    14ca:	4d1d      	ldr	r5, [pc, #116]	; (1540 <system_clock_init+0x94>)
    14cc:	b2e0      	uxtb	r0, r4
    14ce:	4669      	mov	r1, sp
    14d0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    14d2:	3401      	adds	r4, #1
    14d4:	2c25      	cmp	r4, #37	; 0x25
    14d6:	d1f9      	bne.n	14cc <system_clock_init+0x20>
	config->run_in_standby  = false;
    14d8:	a803      	add	r0, sp, #12
    14da:	2400      	movs	r4, #0
    14dc:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    14de:	2501      	movs	r5, #1
    14e0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    14e2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    14e4:	4b17      	ldr	r3, [pc, #92]	; (1544 <system_clock_init+0x98>)
    14e6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    14e8:	2006      	movs	r0, #6
    14ea:	4b17      	ldr	r3, [pc, #92]	; (1548 <system_clock_init+0x9c>)
    14ec:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    14ee:	4b17      	ldr	r3, [pc, #92]	; (154c <system_clock_init+0xa0>)
    14f0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    14f2:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    14f4:	466b      	mov	r3, sp
    14f6:	705c      	strb	r4, [r3, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    14f8:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    14fa:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    14fc:	2304      	movs	r3, #4
    14fe:	466a      	mov	r2, sp
    1500:	7013      	strb	r3, [r2, #0]
    1502:	4669      	mov	r1, sp
    1504:	2001      	movs	r0, #1
    1506:	4f12      	ldr	r7, [pc, #72]	; (1550 <system_clock_init+0xa4>)
    1508:	47b8      	blx	r7
    150a:	2001      	movs	r0, #1
    150c:	4e11      	ldr	r6, [pc, #68]	; (1554 <system_clock_init+0xa8>)
    150e:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
    1510:	4b11      	ldr	r3, [pc, #68]	; (1558 <system_clock_init+0xac>)
    1512:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1514:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1516:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1518:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    151a:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    151c:	466b      	mov	r3, sp
    151e:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1520:	2306      	movs	r3, #6
    1522:	466a      	mov	r2, sp
    1524:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    1526:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1528:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    152a:	4669      	mov	r1, sp
    152c:	2000      	movs	r0, #0
    152e:	47b8      	blx	r7
    1530:	2000      	movs	r0, #0
    1532:	47b0      	blx	r6
#endif
}
    1534:	b005      	add	sp, #20
    1536:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1538:	40000800 	.word	0x40000800
    153c:	41004000 	.word	0x41004000
    1540:	00001795 	.word	0x00001795
    1544:	000013c9 	.word	0x000013c9
    1548:	00001405 	.word	0x00001405
    154c:	0000155d 	.word	0x0000155d
    1550:	00001581 	.word	0x00001581
    1554:	00001639 	.word	0x00001639
    1558:	40000400 	.word	0x40000400

0000155c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    155c:	4a06      	ldr	r2, [pc, #24]	; (1578 <system_gclk_init+0x1c>)
    155e:	6993      	ldr	r3, [r2, #24]
    1560:	2108      	movs	r1, #8
    1562:	430b      	orrs	r3, r1
    1564:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1566:	2201      	movs	r2, #1
    1568:	4b04      	ldr	r3, [pc, #16]	; (157c <system_gclk_init+0x20>)
    156a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    156c:	0019      	movs	r1, r3
    156e:	780b      	ldrb	r3, [r1, #0]
    1570:	4213      	tst	r3, r2
    1572:	d1fc      	bne.n	156e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1574:	4770      	bx	lr
    1576:	46c0      	nop			; (mov r8, r8)
    1578:	40000400 	.word	0x40000400
    157c:	40000c00 	.word	0x40000c00

00001580 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1580:	b570      	push	{r4, r5, r6, lr}
    1582:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1584:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1586:	780d      	ldrb	r5, [r1, #0]
    1588:	022d      	lsls	r5, r5, #8
    158a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    158c:	784b      	ldrb	r3, [r1, #1]
    158e:	2b00      	cmp	r3, #0
    1590:	d002      	beq.n	1598 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1592:	2380      	movs	r3, #128	; 0x80
    1594:	02db      	lsls	r3, r3, #11
    1596:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1598:	7a4b      	ldrb	r3, [r1, #9]
    159a:	2b00      	cmp	r3, #0
    159c:	d002      	beq.n	15a4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    159e:	2380      	movs	r3, #128	; 0x80
    15a0:	031b      	lsls	r3, r3, #12
    15a2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    15a4:	6848      	ldr	r0, [r1, #4]
    15a6:	2801      	cmp	r0, #1
    15a8:	d910      	bls.n	15cc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    15aa:	1e43      	subs	r3, r0, #1
    15ac:	4218      	tst	r0, r3
    15ae:	d134      	bne.n	161a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    15b0:	2802      	cmp	r0, #2
    15b2:	d930      	bls.n	1616 <system_gclk_gen_set_config+0x96>
    15b4:	2302      	movs	r3, #2
    15b6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    15b8:	3201      	adds	r2, #1
						mask <<= 1) {
    15ba:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    15bc:	4298      	cmp	r0, r3
    15be:	d8fb      	bhi.n	15b8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    15c0:	0212      	lsls	r2, r2, #8
    15c2:	4332      	orrs	r2, r6
    15c4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    15c6:	2380      	movs	r3, #128	; 0x80
    15c8:	035b      	lsls	r3, r3, #13
    15ca:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    15cc:	7a0b      	ldrb	r3, [r1, #8]
    15ce:	2b00      	cmp	r3, #0
    15d0:	d002      	beq.n	15d8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    15d2:	2380      	movs	r3, #128	; 0x80
    15d4:	039b      	lsls	r3, r3, #14
    15d6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15d8:	4a13      	ldr	r2, [pc, #76]	; (1628 <system_gclk_gen_set_config+0xa8>)
    15da:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    15dc:	b25b      	sxtb	r3, r3
    15de:	2b00      	cmp	r3, #0
    15e0:	dbfb      	blt.n	15da <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    15e2:	4b12      	ldr	r3, [pc, #72]	; (162c <system_gclk_gen_set_config+0xac>)
    15e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    15e6:	4b12      	ldr	r3, [pc, #72]	; (1630 <system_gclk_gen_set_config+0xb0>)
    15e8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15ea:	4a0f      	ldr	r2, [pc, #60]	; (1628 <system_gclk_gen_set_config+0xa8>)
    15ec:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    15ee:	b25b      	sxtb	r3, r3
    15f0:	2b00      	cmp	r3, #0
    15f2:	dbfb      	blt.n	15ec <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    15f4:	4b0c      	ldr	r3, [pc, #48]	; (1628 <system_gclk_gen_set_config+0xa8>)
    15f6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    15f8:	001a      	movs	r2, r3
    15fa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    15fc:	b25b      	sxtb	r3, r3
    15fe:	2b00      	cmp	r3, #0
    1600:	dbfb      	blt.n	15fa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1602:	4a09      	ldr	r2, [pc, #36]	; (1628 <system_gclk_gen_set_config+0xa8>)
    1604:	6853      	ldr	r3, [r2, #4]
    1606:	2180      	movs	r1, #128	; 0x80
    1608:	0249      	lsls	r1, r1, #9
    160a:	400b      	ands	r3, r1
    160c:	431d      	orrs	r5, r3
    160e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1610:	4b08      	ldr	r3, [pc, #32]	; (1634 <system_gclk_gen_set_config+0xb4>)
    1612:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1614:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1616:	2200      	movs	r2, #0
    1618:	e7d2      	b.n	15c0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    161a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    161c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    161e:	2380      	movs	r3, #128	; 0x80
    1620:	029b      	lsls	r3, r3, #10
    1622:	431d      	orrs	r5, r3
    1624:	e7d2      	b.n	15cc <system_gclk_gen_set_config+0x4c>
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	40000c00 	.word	0x40000c00
    162c:	00000181 	.word	0x00000181
    1630:	40000c08 	.word	0x40000c08
    1634:	000001c1 	.word	0x000001c1

00001638 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1638:	b510      	push	{r4, lr}
    163a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    163c:	4a0b      	ldr	r2, [pc, #44]	; (166c <system_gclk_gen_enable+0x34>)
    163e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1640:	b25b      	sxtb	r3, r3
    1642:	2b00      	cmp	r3, #0
    1644:	dbfb      	blt.n	163e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1646:	4b0a      	ldr	r3, [pc, #40]	; (1670 <system_gclk_gen_enable+0x38>)
    1648:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    164a:	4b0a      	ldr	r3, [pc, #40]	; (1674 <system_gclk_gen_enable+0x3c>)
    164c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    164e:	4a07      	ldr	r2, [pc, #28]	; (166c <system_gclk_gen_enable+0x34>)
    1650:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1652:	b25b      	sxtb	r3, r3
    1654:	2b00      	cmp	r3, #0
    1656:	dbfb      	blt.n	1650 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1658:	4a04      	ldr	r2, [pc, #16]	; (166c <system_gclk_gen_enable+0x34>)
    165a:	6851      	ldr	r1, [r2, #4]
    165c:	2380      	movs	r3, #128	; 0x80
    165e:	025b      	lsls	r3, r3, #9
    1660:	430b      	orrs	r3, r1
    1662:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1664:	4b04      	ldr	r3, [pc, #16]	; (1678 <system_gclk_gen_enable+0x40>)
    1666:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1668:	bd10      	pop	{r4, pc}
    166a:	46c0      	nop			; (mov r8, r8)
    166c:	40000c00 	.word	0x40000c00
    1670:	00000181 	.word	0x00000181
    1674:	40000c04 	.word	0x40000c04
    1678:	000001c1 	.word	0x000001c1

0000167c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    167c:	b570      	push	{r4, r5, r6, lr}
    167e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1680:	4a1a      	ldr	r2, [pc, #104]	; (16ec <system_gclk_gen_get_hz+0x70>)
    1682:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1684:	b25b      	sxtb	r3, r3
    1686:	2b00      	cmp	r3, #0
    1688:	dbfb      	blt.n	1682 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    168a:	4b19      	ldr	r3, [pc, #100]	; (16f0 <system_gclk_gen_get_hz+0x74>)
    168c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    168e:	4b19      	ldr	r3, [pc, #100]	; (16f4 <system_gclk_gen_get_hz+0x78>)
    1690:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1692:	4a16      	ldr	r2, [pc, #88]	; (16ec <system_gclk_gen_get_hz+0x70>)
    1694:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1696:	b25b      	sxtb	r3, r3
    1698:	2b00      	cmp	r3, #0
    169a:	dbfb      	blt.n	1694 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    169c:	4e13      	ldr	r6, [pc, #76]	; (16ec <system_gclk_gen_get_hz+0x70>)
    169e:	6870      	ldr	r0, [r6, #4]
    16a0:	04c0      	lsls	r0, r0, #19
    16a2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    16a4:	4b14      	ldr	r3, [pc, #80]	; (16f8 <system_gclk_gen_get_hz+0x7c>)
    16a6:	4798      	blx	r3
    16a8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    16aa:	4b12      	ldr	r3, [pc, #72]	; (16f4 <system_gclk_gen_get_hz+0x78>)
    16ac:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    16ae:	6876      	ldr	r6, [r6, #4]
    16b0:	02f6      	lsls	r6, r6, #11
    16b2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    16b4:	4b11      	ldr	r3, [pc, #68]	; (16fc <system_gclk_gen_get_hz+0x80>)
    16b6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16b8:	4a0c      	ldr	r2, [pc, #48]	; (16ec <system_gclk_gen_get_hz+0x70>)
    16ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    16bc:	b25b      	sxtb	r3, r3
    16be:	2b00      	cmp	r3, #0
    16c0:	dbfb      	blt.n	16ba <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    16c2:	4b0a      	ldr	r3, [pc, #40]	; (16ec <system_gclk_gen_get_hz+0x70>)
    16c4:	689c      	ldr	r4, [r3, #8]
    16c6:	0224      	lsls	r4, r4, #8
    16c8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    16ca:	4b0d      	ldr	r3, [pc, #52]	; (1700 <system_gclk_gen_get_hz+0x84>)
    16cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    16ce:	2e00      	cmp	r6, #0
    16d0:	d107      	bne.n	16e2 <system_gclk_gen_get_hz+0x66>
    16d2:	2c01      	cmp	r4, #1
    16d4:	d907      	bls.n	16e6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    16d6:	0021      	movs	r1, r4
    16d8:	0028      	movs	r0, r5
    16da:	4b0a      	ldr	r3, [pc, #40]	; (1704 <system_gclk_gen_get_hz+0x88>)
    16dc:	4798      	blx	r3
    16de:	0005      	movs	r5, r0
    16e0:	e001      	b.n	16e6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    16e2:	3401      	adds	r4, #1
    16e4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    16e6:	0028      	movs	r0, r5
    16e8:	bd70      	pop	{r4, r5, r6, pc}
    16ea:	46c0      	nop			; (mov r8, r8)
    16ec:	40000c00 	.word	0x40000c00
    16f0:	00000181 	.word	0x00000181
    16f4:	40000c04 	.word	0x40000c04
    16f8:	00001339 	.word	0x00001339
    16fc:	40000c08 	.word	0x40000c08
    1700:	000001c1 	.word	0x000001c1
    1704:	00001d31 	.word	0x00001d31

00001708 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1708:	b510      	push	{r4, lr}
    170a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    170c:	4b06      	ldr	r3, [pc, #24]	; (1728 <system_gclk_chan_enable+0x20>)
    170e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1710:	4b06      	ldr	r3, [pc, #24]	; (172c <system_gclk_chan_enable+0x24>)
    1712:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1714:	4a06      	ldr	r2, [pc, #24]	; (1730 <system_gclk_chan_enable+0x28>)
    1716:	8853      	ldrh	r3, [r2, #2]
    1718:	2180      	movs	r1, #128	; 0x80
    171a:	01c9      	lsls	r1, r1, #7
    171c:	430b      	orrs	r3, r1
    171e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1720:	4b04      	ldr	r3, [pc, #16]	; (1734 <system_gclk_chan_enable+0x2c>)
    1722:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1724:	bd10      	pop	{r4, pc}
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	00000181 	.word	0x00000181
    172c:	40000c02 	.word	0x40000c02
    1730:	40000c00 	.word	0x40000c00
    1734:	000001c1 	.word	0x000001c1

00001738 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1738:	b510      	push	{r4, lr}
    173a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    173c:	4b0f      	ldr	r3, [pc, #60]	; (177c <system_gclk_chan_disable+0x44>)
    173e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1740:	4b0f      	ldr	r3, [pc, #60]	; (1780 <system_gclk_chan_disable+0x48>)
    1742:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1744:	4a0f      	ldr	r2, [pc, #60]	; (1784 <system_gclk_chan_disable+0x4c>)
    1746:	8853      	ldrh	r3, [r2, #2]
    1748:	051b      	lsls	r3, r3, #20
    174a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    174c:	8853      	ldrh	r3, [r2, #2]
    174e:	490e      	ldr	r1, [pc, #56]	; (1788 <system_gclk_chan_disable+0x50>)
    1750:	400b      	ands	r3, r1
    1752:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1754:	8853      	ldrh	r3, [r2, #2]
    1756:	490d      	ldr	r1, [pc, #52]	; (178c <system_gclk_chan_disable+0x54>)
    1758:	400b      	ands	r3, r1
    175a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    175c:	0011      	movs	r1, r2
    175e:	2280      	movs	r2, #128	; 0x80
    1760:	01d2      	lsls	r2, r2, #7
    1762:	884b      	ldrh	r3, [r1, #2]
    1764:	4213      	tst	r3, r2
    1766:	d1fc      	bne.n	1762 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1768:	4906      	ldr	r1, [pc, #24]	; (1784 <system_gclk_chan_disable+0x4c>)
    176a:	884a      	ldrh	r2, [r1, #2]
    176c:	0203      	lsls	r3, r0, #8
    176e:	4806      	ldr	r0, [pc, #24]	; (1788 <system_gclk_chan_disable+0x50>)
    1770:	4002      	ands	r2, r0
    1772:	4313      	orrs	r3, r2
    1774:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1776:	4b06      	ldr	r3, [pc, #24]	; (1790 <system_gclk_chan_disable+0x58>)
    1778:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    177a:	bd10      	pop	{r4, pc}
    177c:	00000181 	.word	0x00000181
    1780:	40000c02 	.word	0x40000c02
    1784:	40000c00 	.word	0x40000c00
    1788:	fffff0ff 	.word	0xfffff0ff
    178c:	ffffbfff 	.word	0xffffbfff
    1790:	000001c1 	.word	0x000001c1

00001794 <system_gclk_chan_set_config>:
{
    1794:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1796:	780c      	ldrb	r4, [r1, #0]
    1798:	0224      	lsls	r4, r4, #8
    179a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    179c:	4b02      	ldr	r3, [pc, #8]	; (17a8 <system_gclk_chan_set_config+0x14>)
    179e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    17a0:	b2a4      	uxth	r4, r4
    17a2:	4b02      	ldr	r3, [pc, #8]	; (17ac <system_gclk_chan_set_config+0x18>)
    17a4:	805c      	strh	r4, [r3, #2]
}
    17a6:	bd10      	pop	{r4, pc}
    17a8:	00001739 	.word	0x00001739
    17ac:	40000c00 	.word	0x40000c00

000017b0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    17b0:	b510      	push	{r4, lr}
    17b2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    17b4:	4b06      	ldr	r3, [pc, #24]	; (17d0 <system_gclk_chan_get_hz+0x20>)
    17b6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    17b8:	4b06      	ldr	r3, [pc, #24]	; (17d4 <system_gclk_chan_get_hz+0x24>)
    17ba:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    17bc:	4b06      	ldr	r3, [pc, #24]	; (17d8 <system_gclk_chan_get_hz+0x28>)
    17be:	885c      	ldrh	r4, [r3, #2]
    17c0:	0524      	lsls	r4, r4, #20
    17c2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    17c4:	4b05      	ldr	r3, [pc, #20]	; (17dc <system_gclk_chan_get_hz+0x2c>)
    17c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    17c8:	0020      	movs	r0, r4
    17ca:	4b05      	ldr	r3, [pc, #20]	; (17e0 <system_gclk_chan_get_hz+0x30>)
    17cc:	4798      	blx	r3
}
    17ce:	bd10      	pop	{r4, pc}
    17d0:	00000181 	.word	0x00000181
    17d4:	40000c02 	.word	0x40000c02
    17d8:	40000c00 	.word	0x40000c00
    17dc:	000001c1 	.word	0x000001c1
    17e0:	0000167d 	.word	0x0000167d

000017e4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    17e4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    17e6:	78d3      	ldrb	r3, [r2, #3]
    17e8:	2b00      	cmp	r3, #0
    17ea:	d135      	bne.n	1858 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    17ec:	7813      	ldrb	r3, [r2, #0]
    17ee:	2b80      	cmp	r3, #128	; 0x80
    17f0:	d029      	beq.n	1846 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    17f2:	061b      	lsls	r3, r3, #24
    17f4:	2480      	movs	r4, #128	; 0x80
    17f6:	0264      	lsls	r4, r4, #9
    17f8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    17fa:	7854      	ldrb	r4, [r2, #1]
    17fc:	2502      	movs	r5, #2
    17fe:	43ac      	bics	r4, r5
    1800:	d106      	bne.n	1810 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1802:	7894      	ldrb	r4, [r2, #2]
    1804:	2c00      	cmp	r4, #0
    1806:	d120      	bne.n	184a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1808:	2480      	movs	r4, #128	; 0x80
    180a:	02a4      	lsls	r4, r4, #10
    180c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    180e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1810:	7854      	ldrb	r4, [r2, #1]
    1812:	3c01      	subs	r4, #1
    1814:	2c01      	cmp	r4, #1
    1816:	d91c      	bls.n	1852 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1818:	040d      	lsls	r5, r1, #16
    181a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    181c:	24a0      	movs	r4, #160	; 0xa0
    181e:	05e4      	lsls	r4, r4, #23
    1820:	432c      	orrs	r4, r5
    1822:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1824:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1826:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1828:	24d0      	movs	r4, #208	; 0xd0
    182a:	0624      	lsls	r4, r4, #24
    182c:	432c      	orrs	r4, r5
    182e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1830:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1832:	78d4      	ldrb	r4, [r2, #3]
    1834:	2c00      	cmp	r4, #0
    1836:	d122      	bne.n	187e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1838:	035b      	lsls	r3, r3, #13
    183a:	d51c      	bpl.n	1876 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    183c:	7893      	ldrb	r3, [r2, #2]
    183e:	2b01      	cmp	r3, #1
    1840:	d01e      	beq.n	1880 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1842:	6141      	str	r1, [r0, #20]
    1844:	e017      	b.n	1876 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1846:	2300      	movs	r3, #0
    1848:	e7d7      	b.n	17fa <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    184a:	24c0      	movs	r4, #192	; 0xc0
    184c:	02e4      	lsls	r4, r4, #11
    184e:	4323      	orrs	r3, r4
    1850:	e7dd      	b.n	180e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1852:	4c0d      	ldr	r4, [pc, #52]	; (1888 <_system_pinmux_config+0xa4>)
    1854:	4023      	ands	r3, r4
    1856:	e7df      	b.n	1818 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1858:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    185a:	040c      	lsls	r4, r1, #16
    185c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    185e:	23a0      	movs	r3, #160	; 0xa0
    1860:	05db      	lsls	r3, r3, #23
    1862:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1864:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1866:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1868:	23d0      	movs	r3, #208	; 0xd0
    186a:	061b      	lsls	r3, r3, #24
    186c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    186e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1870:	78d3      	ldrb	r3, [r2, #3]
    1872:	2b00      	cmp	r3, #0
    1874:	d103      	bne.n	187e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1876:	7853      	ldrb	r3, [r2, #1]
    1878:	3b01      	subs	r3, #1
    187a:	2b01      	cmp	r3, #1
    187c:	d902      	bls.n	1884 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    187e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1880:	6181      	str	r1, [r0, #24]
    1882:	e7f8      	b.n	1876 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1884:	6081      	str	r1, [r0, #8]
}
    1886:	e7fa      	b.n	187e <_system_pinmux_config+0x9a>
    1888:	fffbffff 	.word	0xfffbffff

0000188c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    188c:	b510      	push	{r4, lr}
    188e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1890:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1892:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1894:	2900      	cmp	r1, #0
    1896:	d104      	bne.n	18a2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1898:	0943      	lsrs	r3, r0, #5
    189a:	01db      	lsls	r3, r3, #7
    189c:	4905      	ldr	r1, [pc, #20]	; (18b4 <system_pinmux_pin_set_config+0x28>)
    189e:	468c      	mov	ip, r1
    18a0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    18a2:	241f      	movs	r4, #31
    18a4:	4020      	ands	r0, r4
    18a6:	2101      	movs	r1, #1
    18a8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    18aa:	0018      	movs	r0, r3
    18ac:	4b02      	ldr	r3, [pc, #8]	; (18b8 <system_pinmux_pin_set_config+0x2c>)
    18ae:	4798      	blx	r3
}
    18b0:	bd10      	pop	{r4, pc}
    18b2:	46c0      	nop			; (mov r8, r8)
    18b4:	41004400 	.word	0x41004400
    18b8:	000017e5 	.word	0x000017e5

000018bc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    18bc:	4770      	bx	lr
	...

000018c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    18c0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    18c2:	4b05      	ldr	r3, [pc, #20]	; (18d8 <system_init+0x18>)
    18c4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    18c6:	4b05      	ldr	r3, [pc, #20]	; (18dc <system_init+0x1c>)
    18c8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    18ca:	4b05      	ldr	r3, [pc, #20]	; (18e0 <system_init+0x20>)
    18cc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    18ce:	4b05      	ldr	r3, [pc, #20]	; (18e4 <system_init+0x24>)
    18d0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    18d2:	4b05      	ldr	r3, [pc, #20]	; (18e8 <system_init+0x28>)
    18d4:	4798      	blx	r3
}
    18d6:	bd10      	pop	{r4, pc}
    18d8:	000014ad 	.word	0x000014ad
    18dc:	000001f1 	.word	0x000001f1
    18e0:	000018bd 	.word	0x000018bd
    18e4:	000018bd 	.word	0x000018bd
    18e8:	000018bd 	.word	0x000018bd

000018ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    18ec:	e7fe      	b.n	18ec <Dummy_Handler>
	...

000018f0 <Reset_Handler>:
{
    18f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    18f2:	4a2a      	ldr	r2, [pc, #168]	; (199c <Reset_Handler+0xac>)
    18f4:	4b2a      	ldr	r3, [pc, #168]	; (19a0 <Reset_Handler+0xb0>)
    18f6:	429a      	cmp	r2, r3
    18f8:	d011      	beq.n	191e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    18fa:	001a      	movs	r2, r3
    18fc:	4b29      	ldr	r3, [pc, #164]	; (19a4 <Reset_Handler+0xb4>)
    18fe:	429a      	cmp	r2, r3
    1900:	d20d      	bcs.n	191e <Reset_Handler+0x2e>
    1902:	4a29      	ldr	r2, [pc, #164]	; (19a8 <Reset_Handler+0xb8>)
    1904:	3303      	adds	r3, #3
    1906:	1a9b      	subs	r3, r3, r2
    1908:	089b      	lsrs	r3, r3, #2
    190a:	3301      	adds	r3, #1
    190c:	009b      	lsls	r3, r3, #2
    190e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1910:	4823      	ldr	r0, [pc, #140]	; (19a0 <Reset_Handler+0xb0>)
    1912:	4922      	ldr	r1, [pc, #136]	; (199c <Reset_Handler+0xac>)
    1914:	588c      	ldr	r4, [r1, r2]
    1916:	5084      	str	r4, [r0, r2]
    1918:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    191a:	429a      	cmp	r2, r3
    191c:	d1fa      	bne.n	1914 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    191e:	4a23      	ldr	r2, [pc, #140]	; (19ac <Reset_Handler+0xbc>)
    1920:	4b23      	ldr	r3, [pc, #140]	; (19b0 <Reset_Handler+0xc0>)
    1922:	429a      	cmp	r2, r3
    1924:	d20a      	bcs.n	193c <Reset_Handler+0x4c>
    1926:	43d3      	mvns	r3, r2
    1928:	4921      	ldr	r1, [pc, #132]	; (19b0 <Reset_Handler+0xc0>)
    192a:	185b      	adds	r3, r3, r1
    192c:	2103      	movs	r1, #3
    192e:	438b      	bics	r3, r1
    1930:	3304      	adds	r3, #4
    1932:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1934:	2100      	movs	r1, #0
    1936:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1938:	4293      	cmp	r3, r2
    193a:	d1fc      	bne.n	1936 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    193c:	4a1d      	ldr	r2, [pc, #116]	; (19b4 <Reset_Handler+0xc4>)
    193e:	21ff      	movs	r1, #255	; 0xff
    1940:	4b1d      	ldr	r3, [pc, #116]	; (19b8 <Reset_Handler+0xc8>)
    1942:	438b      	bics	r3, r1
    1944:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1946:	39fd      	subs	r1, #253	; 0xfd
    1948:	2390      	movs	r3, #144	; 0x90
    194a:	005b      	lsls	r3, r3, #1
    194c:	4a1b      	ldr	r2, [pc, #108]	; (19bc <Reset_Handler+0xcc>)
    194e:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1950:	4a1b      	ldr	r2, [pc, #108]	; (19c0 <Reset_Handler+0xd0>)
    1952:	78d3      	ldrb	r3, [r2, #3]
    1954:	2503      	movs	r5, #3
    1956:	43ab      	bics	r3, r5
    1958:	2402      	movs	r4, #2
    195a:	4323      	orrs	r3, r4
    195c:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    195e:	78d3      	ldrb	r3, [r2, #3]
    1960:	270c      	movs	r7, #12
    1962:	43bb      	bics	r3, r7
    1964:	2608      	movs	r6, #8
    1966:	4333      	orrs	r3, r6
    1968:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    196a:	4b16      	ldr	r3, [pc, #88]	; (19c4 <Reset_Handler+0xd4>)
    196c:	7b98      	ldrb	r0, [r3, #14]
    196e:	2230      	movs	r2, #48	; 0x30
    1970:	4390      	bics	r0, r2
    1972:	2220      	movs	r2, #32
    1974:	4310      	orrs	r0, r2
    1976:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1978:	7b99      	ldrb	r1, [r3, #14]
    197a:	43b9      	bics	r1, r7
    197c:	4331      	orrs	r1, r6
    197e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1980:	7b9a      	ldrb	r2, [r3, #14]
    1982:	43aa      	bics	r2, r5
    1984:	4322      	orrs	r2, r4
    1986:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1988:	4a0f      	ldr	r2, [pc, #60]	; (19c8 <Reset_Handler+0xd8>)
    198a:	6853      	ldr	r3, [r2, #4]
    198c:	2180      	movs	r1, #128	; 0x80
    198e:	430b      	orrs	r3, r1
    1990:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1992:	4b0e      	ldr	r3, [pc, #56]	; (19cc <Reset_Handler+0xdc>)
    1994:	4798      	blx	r3
        main();
    1996:	4b0e      	ldr	r3, [pc, #56]	; (19d0 <Reset_Handler+0xe0>)
    1998:	4798      	blx	r3
    199a:	e7fe      	b.n	199a <Reset_Handler+0xaa>
    199c:	00004a20 	.word	0x00004a20
    19a0:	20000000 	.word	0x20000000
    19a4:	20000078 	.word	0x20000078
    19a8:	20000004 	.word	0x20000004
    19ac:	20000078 	.word	0x20000078
    19b0:	20000180 	.word	0x20000180
    19b4:	e000ed00 	.word	0xe000ed00
    19b8:	00000000 	.word	0x00000000
    19bc:	41007000 	.word	0x41007000
    19c0:	41005000 	.word	0x41005000
    19c4:	41004800 	.word	0x41004800
    19c8:	41004000 	.word	0x41004000
    19cc:	00003765 	.word	0x00003765
    19d0:	00001bcd 	.word	0x00001bcd

000019d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    19d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19d6:	46c6      	mov	lr, r8
    19d8:	b500      	push	{lr}
    19da:	000c      	movs	r4, r1
    19dc:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    19de:	2800      	cmp	r0, #0
    19e0:	d10f      	bne.n	1a02 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    19e2:	2a00      	cmp	r2, #0
    19e4:	dd11      	ble.n	1a0a <_read+0x36>
    19e6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    19e8:	4e09      	ldr	r6, [pc, #36]	; (1a10 <_read+0x3c>)
    19ea:	4d0a      	ldr	r5, [pc, #40]	; (1a14 <_read+0x40>)
    19ec:	6830      	ldr	r0, [r6, #0]
    19ee:	0021      	movs	r1, r4
    19f0:	682b      	ldr	r3, [r5, #0]
    19f2:	4798      	blx	r3
		ptr++;
    19f4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    19f6:	42bc      	cmp	r4, r7
    19f8:	d1f8      	bne.n	19ec <_read+0x18>
		nChars++;
	}
	return nChars;
}
    19fa:	4640      	mov	r0, r8
    19fc:	bc04      	pop	{r2}
    19fe:	4690      	mov	r8, r2
    1a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1a02:	2301      	movs	r3, #1
    1a04:	425b      	negs	r3, r3
    1a06:	4698      	mov	r8, r3
    1a08:	e7f7      	b.n	19fa <_read+0x26>
	for (; len > 0; --len) {
    1a0a:	4680      	mov	r8, r0
    1a0c:	e7f5      	b.n	19fa <_read+0x26>
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	20000138 	.word	0x20000138
    1a14:	20000130 	.word	0x20000130

00001a18 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a1a:	46c6      	mov	lr, r8
    1a1c:	b500      	push	{lr}
    1a1e:	000e      	movs	r6, r1
    1a20:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1a22:	3801      	subs	r0, #1
    1a24:	2802      	cmp	r0, #2
    1a26:	d810      	bhi.n	1a4a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1a28:	2a00      	cmp	r2, #0
    1a2a:	d011      	beq.n	1a50 <_write+0x38>
    1a2c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1a2e:	4b0c      	ldr	r3, [pc, #48]	; (1a60 <_write+0x48>)
    1a30:	4698      	mov	r8, r3
    1a32:	4f0c      	ldr	r7, [pc, #48]	; (1a64 <_write+0x4c>)
    1a34:	4643      	mov	r3, r8
    1a36:	6818      	ldr	r0, [r3, #0]
    1a38:	5d31      	ldrb	r1, [r6, r4]
    1a3a:	683b      	ldr	r3, [r7, #0]
    1a3c:	4798      	blx	r3
    1a3e:	2800      	cmp	r0, #0
    1a40:	db08      	blt.n	1a54 <_write+0x3c>
			return -1;
		}
		++nChars;
    1a42:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1a44:	42a5      	cmp	r5, r4
    1a46:	d1f5      	bne.n	1a34 <_write+0x1c>
    1a48:	e006      	b.n	1a58 <_write+0x40>
		return -1;
    1a4a:	2401      	movs	r4, #1
    1a4c:	4264      	negs	r4, r4
    1a4e:	e003      	b.n	1a58 <_write+0x40>
	for (; len != 0; --len) {
    1a50:	0014      	movs	r4, r2
    1a52:	e001      	b.n	1a58 <_write+0x40>
			return -1;
    1a54:	2401      	movs	r4, #1
    1a56:	4264      	negs	r4, r4
	}
	return nChars;
}
    1a58:	0020      	movs	r0, r4
    1a5a:	bc04      	pop	{r2}
    1a5c:	4690      	mov	r8, r2
    1a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a60:	20000138 	.word	0x20000138
    1a64:	20000134 	.word	0x20000134

00001a68 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1a68:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1a6a:	4a06      	ldr	r2, [pc, #24]	; (1a84 <_sbrk+0x1c>)
    1a6c:	6812      	ldr	r2, [r2, #0]
    1a6e:	2a00      	cmp	r2, #0
    1a70:	d004      	beq.n	1a7c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1a72:	4a04      	ldr	r2, [pc, #16]	; (1a84 <_sbrk+0x1c>)
    1a74:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1a76:	18c3      	adds	r3, r0, r3
    1a78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1a7a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1a7c:	4902      	ldr	r1, [pc, #8]	; (1a88 <_sbrk+0x20>)
    1a7e:	4a01      	ldr	r2, [pc, #4]	; (1a84 <_sbrk+0x1c>)
    1a80:	6011      	str	r1, [r2, #0]
    1a82:	e7f6      	b.n	1a72 <_sbrk+0xa>
    1a84:	200000d0 	.word	0x200000d0
    1a88:	20002180 	.word	0x20002180

00001a8c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1a8c:	2001      	movs	r0, #1
    1a8e:	4240      	negs	r0, r0
    1a90:	4770      	bx	lr

00001a92 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1a92:	2380      	movs	r3, #128	; 0x80
    1a94:	019b      	lsls	r3, r3, #6
    1a96:	604b      	str	r3, [r1, #4]

	return 0;
}
    1a98:	2000      	movs	r0, #0
    1a9a:	4770      	bx	lr

00001a9c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1a9c:	2001      	movs	r0, #1
    1a9e:	4770      	bx	lr

00001aa0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1aa0:	2000      	movs	r0, #0
    1aa2:	4770      	bx	lr

00001aa4 <i2c_write_complete_callback>:
//! [dev_inst]

//! [callback_func]
void i2c_write_complete_callback(
		struct i2c_master_module *const module)
{
    1aa4:	b510      	push	{r4, lr}
	/* Initiate new packet read */
	//! [read_next]
	i2c_master_read_packet_job(&i2c_master_instance,&rd_packet);
    1aa6:	4902      	ldr	r1, [pc, #8]	; (1ab0 <i2c_write_complete_callback+0xc>)
    1aa8:	4802      	ldr	r0, [pc, #8]	; (1ab4 <i2c_write_complete_callback+0x10>)
    1aaa:	4b03      	ldr	r3, [pc, #12]	; (1ab8 <i2c_write_complete_callback+0x14>)
    1aac:	4798      	blx	r3
	//! [read_next]
}
    1aae:	bd10      	pop	{r4, pc}
    1ab0:	20000170 	.word	0x20000170
    1ab4:	20000148 	.word	0x20000148
    1ab8:	00000771 	.word	0x00000771

00001abc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1abc:	b570      	push	{r4, r5, r6, lr}
    1abe:	b082      	sub	sp, #8
    1ac0:	0005      	movs	r5, r0
    1ac2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1ac4:	2200      	movs	r2, #0
    1ac6:	466b      	mov	r3, sp
    1ac8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1aca:	4c06      	ldr	r4, [pc, #24]	; (1ae4 <usart_serial_getchar+0x28>)
    1acc:	466b      	mov	r3, sp
    1ace:	1d99      	adds	r1, r3, #6
    1ad0:	0028      	movs	r0, r5
    1ad2:	47a0      	blx	r4
    1ad4:	2800      	cmp	r0, #0
    1ad6:	d1f9      	bne.n	1acc <usart_serial_getchar+0x10>

	*c = temp;
    1ad8:	466b      	mov	r3, sp
    1ada:	3306      	adds	r3, #6
    1adc:	881b      	ldrh	r3, [r3, #0]
    1ade:	7033      	strb	r3, [r6, #0]
}
    1ae0:	b002      	add	sp, #8
    1ae2:	bd70      	pop	{r4, r5, r6, pc}
    1ae4:	00001135 	.word	0x00001135

00001ae8 <usart_serial_putchar>:
{
    1ae8:	b570      	push	{r4, r5, r6, lr}
    1aea:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1aec:	b28c      	uxth	r4, r1
    1aee:	4e03      	ldr	r6, [pc, #12]	; (1afc <usart_serial_putchar+0x14>)
    1af0:	0021      	movs	r1, r4
    1af2:	0028      	movs	r0, r5
    1af4:	47b0      	blx	r6
    1af6:	2800      	cmp	r0, #0
    1af8:	d1fa      	bne.n	1af0 <usart_serial_putchar+0x8>
}
    1afa:	bd70      	pop	{r4, r5, r6, pc}
    1afc:	00001109 	.word	0x00001109

00001b00 <configure_i2c>:
//! [callback_func]

//! [initialize_i2c]
void configure_i2c(void)
{
    1b00:	b530      	push	{r4, r5, lr}
    1b02:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1b04:	ab01      	add	r3, sp, #4
    1b06:	2264      	movs	r2, #100	; 0x64
    1b08:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1b0a:	4a21      	ldr	r2, [pc, #132]	; (1b90 <configure_i2c+0x90>)
    1b0c:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1b0e:	2200      	movs	r2, #0
    1b10:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1b12:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1b14:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1b16:	2180      	movs	r1, #128	; 0x80
    1b18:	0389      	lsls	r1, r1, #14
    1b1a:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    1b1c:	2101      	movs	r1, #1
    1b1e:	4249      	negs	r1, r1
    1b20:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    1b22:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1b24:	9208      	str	r2, [sp, #32]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1b26:	9209      	str	r2, [sp, #36]	; 0x24
	config->scl_low_timeout  = false;
    1b28:	3125      	adds	r1, #37	; 0x25
    1b2a:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1b2c:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1b2e:	3108      	adds	r1, #8
    1b30:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1b32:	3101      	adds	r1, #1
    1b34:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    1b36:	3101      	adds	r1, #1
    1b38:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1b3a:	32d7      	adds	r2, #215	; 0xd7
    1b3c:	861a      	strh	r2, [r3, #48]	; 0x30
#endif
	//! [conf_change]

	/* Initialize and enable device with config */
	//! [init_module]
	while(i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master)     \
    1b3e:	4d15      	ldr	r5, [pc, #84]	; (1b94 <configure_i2c+0x94>)
    1b40:	4c15      	ldr	r4, [pc, #84]	; (1b98 <configure_i2c+0x98>)
    1b42:	aa01      	add	r2, sp, #4
    1b44:	4915      	ldr	r1, [pc, #84]	; (1b9c <configure_i2c+0x9c>)
    1b46:	0028      	movs	r0, r5
    1b48:	47a0      	blx	r4
    1b4a:	2800      	cmp	r0, #0
    1b4c:	d1f9      	bne.n	1b42 <configure_i2c+0x42>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b4e:	4b11      	ldr	r3, [pc, #68]	; (1b94 <configure_i2c+0x94>)
    1b50:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1b52:	2207      	movs	r2, #7
    1b54:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    1b56:	421a      	tst	r2, r3
    1b58:	d1fc      	bne.n	1b54 <configure_i2c+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1b5a:	6823      	ldr	r3, [r4, #0]
    1b5c:	2202      	movs	r2, #2
    1b5e:	4313      	orrs	r3, r2
    1b60:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1b62:	4d0c      	ldr	r5, [pc, #48]	; (1b94 <configure_i2c+0x94>)
    1b64:	6828      	ldr	r0, [r5, #0]
    1b66:	4b0e      	ldr	r3, [pc, #56]	; (1ba0 <configure_i2c+0xa0>)
    1b68:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b6a:	231f      	movs	r3, #31
    1b6c:	4018      	ands	r0, r3
    1b6e:	3b1e      	subs	r3, #30
    1b70:	4083      	lsls	r3, r0
    1b72:	4a0c      	ldr	r2, [pc, #48]	; (1ba4 <configure_i2c+0xa4>)
    1b74:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1b76:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1b78:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1b7a:	2110      	movs	r1, #16
    1b7c:	8b62      	ldrh	r2, [r4, #26]
    1b7e:	420a      	tst	r2, r1
    1b80:	d104      	bne.n	1b8c <configure_i2c+0x8c>
		timeout_counter++;
    1b82:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1b84:	4283      	cmp	r3, r0
    1b86:	d3f9      	bcc.n	1b7c <configure_i2c+0x7c>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1b88:	2310      	movs	r3, #16
    1b8a:	8363      	strh	r3, [r4, #26]
	//! [init_module]

	//! [enable_module]
	i2c_master_enable(&i2c_master_instance);
	//! [enable_module]
}
    1b8c:	b00f      	add	sp, #60	; 0x3c
    1b8e:	bd30      	pop	{r4, r5, pc}
    1b90:	00000d48 	.word	0x00000d48
    1b94:	20000148 	.word	0x20000148
    1b98:	0000024d 	.word	0x0000024d
    1b9c:	42001000 	.word	0x42001000
    1ba0:	00000d35 	.word	0x00000d35
    1ba4:	e000e100 	.word	0xe000e100

00001ba8 <configure_i2c_callbacks>:
//! [initialize_i2c]

//! [setup_callback]
void configure_i2c_callbacks(void)
{
    1ba8:	b510      	push	{r4, lr}
	/* Register callback function. */
	//! [callback_reg]
	i2c_master_register_callback(&i2c_master_instance, i2c_write_complete_callback,
    1baa:	4c05      	ldr	r4, [pc, #20]	; (1bc0 <configure_i2c_callbacks+0x18>)
    1bac:	2200      	movs	r2, #0
    1bae:	4905      	ldr	r1, [pc, #20]	; (1bc4 <configure_i2c_callbacks+0x1c>)
    1bb0:	0020      	movs	r0, r4
    1bb2:	4b05      	ldr	r3, [pc, #20]	; (1bc8 <configure_i2c_callbacks+0x20>)
    1bb4:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1bb6:	7e63      	ldrb	r3, [r4, #25]
    1bb8:	2201      	movs	r2, #1
    1bba:	4313      	orrs	r3, r2
    1bbc:	7663      	strb	r3, [r4, #25]
	//! [callback_reg]
	//! [callback_en]
	i2c_master_enable_callback(&i2c_master_instance,
			I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	//! [callback_en]
}
    1bbe:	bd10      	pop	{r4, pc}
    1bc0:	20000148 	.word	0x20000148
    1bc4:	00001aa5 	.word	0x00001aa5
    1bc8:	00000759 	.word	0x00000759

00001bcc <main>:
//! [setup_callback]

int main(void)
{
    1bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bce:	b091      	sub	sp, #68	; 0x44
	system_init();
    1bd0:	4b3c      	ldr	r3, [pc, #240]	; (1cc4 <main+0xf8>)
    1bd2:	4798      	blx	r3

	//! [run_initialize_i2c]
	/* Configure device and enable. */
	//! [config]
	configure_i2c();
    1bd4:	4b3c      	ldr	r3, [pc, #240]	; (1cc8 <main+0xfc>)
    1bd6:	4798      	blx	r3
	//! [config]
	/* Configure callbacks and enable. */
	//! [config_callback]
	configure_i2c_callbacks();
    1bd8:	4b3c      	ldr	r3, [pc, #240]	; (1ccc <main+0x100>)
    1bda:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1bdc:	2380      	movs	r3, #128	; 0x80
    1bde:	05db      	lsls	r3, r3, #23
    1be0:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1be2:	2300      	movs	r3, #0
    1be4:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1be6:	22ff      	movs	r2, #255	; 0xff
    1be8:	4669      	mov	r1, sp
    1bea:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1bec:	2200      	movs	r2, #0
    1bee:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1bf0:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1bf2:	2401      	movs	r4, #1
    1bf4:	2124      	movs	r1, #36	; 0x24
    1bf6:	4668      	mov	r0, sp
    1bf8:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    1bfa:	3101      	adds	r1, #1
    1bfc:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    1bfe:	3101      	adds	r1, #1
    1c00:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    1c02:	3101      	adds	r1, #1
    1c04:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    1c06:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1c08:	2188      	movs	r1, #136	; 0x88
    1c0a:	0349      	lsls	r1, r1, #13
    1c0c:	9103      	str	r1, [sp, #12]
	config->run_in_standby   = false;
    1c0e:	212c      	movs	r1, #44	; 0x2c
    1c10:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1c12:	3101      	adds	r1, #1
    1c14:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1c16:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1c18:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1c1a:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1c1c:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1c1e:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1c20:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    1c22:	2313      	movs	r3, #19
    1c24:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1c26:	7742      	strb	r2, [r0, #29]
	usart_conf.pinmux_pad0      = EDBG_CDC_SERCOM_PINMUX_PAD0; 
    1c28:	2301      	movs	r3, #1
    1c2a:	425b      	negs	r3, r3
    1c2c:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1      = EDBG_CDC_SERCOM_PINMUX_PAD1; 
    1c2e:	4a28      	ldr	r2, [pc, #160]	; (1cd0 <main+0x104>)
    1c30:	920d      	str	r2, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2      = EDBG_CDC_SERCOM_PINMUX_PAD2; 
    1c32:	4a28      	ldr	r2, [pc, #160]	; (1cd4 <main+0x108>)
    1c34:	920e      	str	r2, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3      = EDBG_CDC_SERCOM_PINMUX_PAD3; 
    1c36:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate         = 115200;
    1c38:	23e1      	movs	r3, #225	; 0xe1
    1c3a:	025b      	lsls	r3, r3, #9
    1c3c:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1c3e:	4d26      	ldr	r5, [pc, #152]	; (1cd8 <main+0x10c>)
    1c40:	4b26      	ldr	r3, [pc, #152]	; (1cdc <main+0x110>)
    1c42:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1c44:	4a26      	ldr	r2, [pc, #152]	; (1ce0 <main+0x114>)
    1c46:	4b27      	ldr	r3, [pc, #156]	; (1ce4 <main+0x118>)
    1c48:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1c4a:	4a27      	ldr	r2, [pc, #156]	; (1ce8 <main+0x11c>)
    1c4c:	4b27      	ldr	r3, [pc, #156]	; (1cec <main+0x120>)
    1c4e:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1c50:	466a      	mov	r2, sp
    1c52:	4927      	ldr	r1, [pc, #156]	; (1cf0 <main+0x124>)
    1c54:	0028      	movs	r0, r5
    1c56:	4b27      	ldr	r3, [pc, #156]	; (1cf4 <main+0x128>)
    1c58:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1c5a:	4f27      	ldr	r7, [pc, #156]	; (1cf8 <main+0x12c>)
    1c5c:	683b      	ldr	r3, [r7, #0]
    1c5e:	6898      	ldr	r0, [r3, #8]
    1c60:	2100      	movs	r1, #0
    1c62:	4e26      	ldr	r6, [pc, #152]	; (1cfc <main+0x130>)
    1c64:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1c66:	683b      	ldr	r3, [r7, #0]
    1c68:	6858      	ldr	r0, [r3, #4]
    1c6a:	2100      	movs	r1, #0
    1c6c:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c6e:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1c70:	0030      	movs	r0, r6
    1c72:	4b23      	ldr	r3, [pc, #140]	; (1d00 <main+0x134>)
    1c74:	4798      	blx	r3
    1c76:	231f      	movs	r3, #31
    1c78:	4018      	ands	r0, r3
    1c7a:	4084      	lsls	r4, r0
    1c7c:	4b21      	ldr	r3, [pc, #132]	; (1d04 <main+0x138>)
    1c7e:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c80:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1c82:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1c84:	2a00      	cmp	r2, #0
    1c86:	d1fc      	bne.n	1c82 <main+0xb6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1c88:	6833      	ldr	r3, [r6, #0]
    1c8a:	3202      	adds	r2, #2
    1c8c:	4313      	orrs	r3, r2
    1c8e:	6033      	str	r3, [r6, #0]
	//! [config_callback]
	//! [run_initialize_i2c]
	configure_console();
	delay_init();
    1c90:	4b1d      	ldr	r3, [pc, #116]	; (1d08 <main+0x13c>)
    1c92:	4798      	blx	r3
	/* Init i2c packet. */
	//! [write_packet]
	wr_packet.address     = SLAVE_ADDRESS;
    1c94:	4b1d      	ldr	r3, [pc, #116]	; (1d0c <main+0x140>)
    1c96:	2112      	movs	r1, #18
    1c98:	8019      	strh	r1, [r3, #0]
	wr_packet.data_length = DATA_LENGTH;
    1c9a:	2208      	movs	r2, #8
    1c9c:	805a      	strh	r2, [r3, #2]
	wr_packet.data        = wr_buffer;
    1c9e:	481c      	ldr	r0, [pc, #112]	; (1d10 <main+0x144>)
    1ca0:	6058      	str	r0, [r3, #4]
	//! [write_packet]
	//! [read_packet]
	rd_packet.address     = SLAVE_ADDRESS;
    1ca2:	4b1c      	ldr	r3, [pc, #112]	; (1d14 <main+0x148>)
    1ca4:	8019      	strh	r1, [r3, #0]
	rd_packet.data_length = DATA_LENGTH;
    1ca6:	805a      	strh	r2, [r3, #2]
	rd_packet.data        = rd_buffer;
    1ca8:	4a1b      	ldr	r2, [pc, #108]	; (1d18 <main+0x14c>)
    1caa:	605a      	str	r2, [r3, #4]
	//! [read_packet]
	printf("setup complete \n\r");
    1cac:	481b      	ldr	r0, [pc, #108]	; (1d1c <main+0x150>)
    1cae:	4b1c      	ldr	r3, [pc, #112]	; (1d20 <main+0x154>)
    1cb0:	4798      	blx	r3
	//! [while]
	while (true)
	{
		 delay_ms(1000);
    1cb2:	4e1c      	ldr	r6, [pc, #112]	; (1d24 <main+0x158>)
		 printf("heart-beat\r\n");
    1cb4:	4d1c      	ldr	r5, [pc, #112]	; (1d28 <main+0x15c>)
    1cb6:	4c1d      	ldr	r4, [pc, #116]	; (1d2c <main+0x160>)
		 delay_ms(1000);
    1cb8:	20fa      	movs	r0, #250	; 0xfa
    1cba:	0080      	lsls	r0, r0, #2
    1cbc:	47b0      	blx	r6
		 printf("heart-beat\r\n");
    1cbe:	0028      	movs	r0, r5
    1cc0:	47a0      	blx	r4
    1cc2:	e7f9      	b.n	1cb8 <main+0xec>
    1cc4:	000018c1 	.word	0x000018c1
    1cc8:	00001b01 	.word	0x00001b01
    1ccc:	00001ba9 	.word	0x00001ba9
    1cd0:	00110003 	.word	0x00110003
    1cd4:	00140003 	.word	0x00140003
    1cd8:	200000dc 	.word	0x200000dc
    1cdc:	20000138 	.word	0x20000138
    1ce0:	00001ae9 	.word	0x00001ae9
    1ce4:	20000134 	.word	0x20000134
    1ce8:	00001abd 	.word	0x00001abd
    1cec:	20000130 	.word	0x20000130
    1cf0:	42001400 	.word	0x42001400
    1cf4:	00000dc5 	.word	0x00000dc5
    1cf8:	20000014 	.word	0x20000014
    1cfc:	000038c5 	.word	0x000038c5
    1d00:	00000d35 	.word	0x00000d35
    1d04:	e000e100 	.word	0xe000e100
    1d08:	00000115 	.word	0x00000115
    1d0c:	2000013c 	.word	0x2000013c
    1d10:	2000000c 	.word	0x2000000c
    1d14:	20000170 	.word	0x20000170
    1d18:	200000d4 	.word	0x200000d4
    1d1c:	000048c8 	.word	0x000048c8
    1d20:	000037bd 	.word	0x000037bd
    1d24:	00000155 	.word	0x00000155
    1d28:	000048dc 	.word	0x000048dc
    1d2c:	000038b1 	.word	0x000038b1

00001d30 <__udivsi3>:
    1d30:	2200      	movs	r2, #0
    1d32:	0843      	lsrs	r3, r0, #1
    1d34:	428b      	cmp	r3, r1
    1d36:	d374      	bcc.n	1e22 <__udivsi3+0xf2>
    1d38:	0903      	lsrs	r3, r0, #4
    1d3a:	428b      	cmp	r3, r1
    1d3c:	d35f      	bcc.n	1dfe <__udivsi3+0xce>
    1d3e:	0a03      	lsrs	r3, r0, #8
    1d40:	428b      	cmp	r3, r1
    1d42:	d344      	bcc.n	1dce <__udivsi3+0x9e>
    1d44:	0b03      	lsrs	r3, r0, #12
    1d46:	428b      	cmp	r3, r1
    1d48:	d328      	bcc.n	1d9c <__udivsi3+0x6c>
    1d4a:	0c03      	lsrs	r3, r0, #16
    1d4c:	428b      	cmp	r3, r1
    1d4e:	d30d      	bcc.n	1d6c <__udivsi3+0x3c>
    1d50:	22ff      	movs	r2, #255	; 0xff
    1d52:	0209      	lsls	r1, r1, #8
    1d54:	ba12      	rev	r2, r2
    1d56:	0c03      	lsrs	r3, r0, #16
    1d58:	428b      	cmp	r3, r1
    1d5a:	d302      	bcc.n	1d62 <__udivsi3+0x32>
    1d5c:	1212      	asrs	r2, r2, #8
    1d5e:	0209      	lsls	r1, r1, #8
    1d60:	d065      	beq.n	1e2e <__udivsi3+0xfe>
    1d62:	0b03      	lsrs	r3, r0, #12
    1d64:	428b      	cmp	r3, r1
    1d66:	d319      	bcc.n	1d9c <__udivsi3+0x6c>
    1d68:	e000      	b.n	1d6c <__udivsi3+0x3c>
    1d6a:	0a09      	lsrs	r1, r1, #8
    1d6c:	0bc3      	lsrs	r3, r0, #15
    1d6e:	428b      	cmp	r3, r1
    1d70:	d301      	bcc.n	1d76 <__udivsi3+0x46>
    1d72:	03cb      	lsls	r3, r1, #15
    1d74:	1ac0      	subs	r0, r0, r3
    1d76:	4152      	adcs	r2, r2
    1d78:	0b83      	lsrs	r3, r0, #14
    1d7a:	428b      	cmp	r3, r1
    1d7c:	d301      	bcc.n	1d82 <__udivsi3+0x52>
    1d7e:	038b      	lsls	r3, r1, #14
    1d80:	1ac0      	subs	r0, r0, r3
    1d82:	4152      	adcs	r2, r2
    1d84:	0b43      	lsrs	r3, r0, #13
    1d86:	428b      	cmp	r3, r1
    1d88:	d301      	bcc.n	1d8e <__udivsi3+0x5e>
    1d8a:	034b      	lsls	r3, r1, #13
    1d8c:	1ac0      	subs	r0, r0, r3
    1d8e:	4152      	adcs	r2, r2
    1d90:	0b03      	lsrs	r3, r0, #12
    1d92:	428b      	cmp	r3, r1
    1d94:	d301      	bcc.n	1d9a <__udivsi3+0x6a>
    1d96:	030b      	lsls	r3, r1, #12
    1d98:	1ac0      	subs	r0, r0, r3
    1d9a:	4152      	adcs	r2, r2
    1d9c:	0ac3      	lsrs	r3, r0, #11
    1d9e:	428b      	cmp	r3, r1
    1da0:	d301      	bcc.n	1da6 <__udivsi3+0x76>
    1da2:	02cb      	lsls	r3, r1, #11
    1da4:	1ac0      	subs	r0, r0, r3
    1da6:	4152      	adcs	r2, r2
    1da8:	0a83      	lsrs	r3, r0, #10
    1daa:	428b      	cmp	r3, r1
    1dac:	d301      	bcc.n	1db2 <__udivsi3+0x82>
    1dae:	028b      	lsls	r3, r1, #10
    1db0:	1ac0      	subs	r0, r0, r3
    1db2:	4152      	adcs	r2, r2
    1db4:	0a43      	lsrs	r3, r0, #9
    1db6:	428b      	cmp	r3, r1
    1db8:	d301      	bcc.n	1dbe <__udivsi3+0x8e>
    1dba:	024b      	lsls	r3, r1, #9
    1dbc:	1ac0      	subs	r0, r0, r3
    1dbe:	4152      	adcs	r2, r2
    1dc0:	0a03      	lsrs	r3, r0, #8
    1dc2:	428b      	cmp	r3, r1
    1dc4:	d301      	bcc.n	1dca <__udivsi3+0x9a>
    1dc6:	020b      	lsls	r3, r1, #8
    1dc8:	1ac0      	subs	r0, r0, r3
    1dca:	4152      	adcs	r2, r2
    1dcc:	d2cd      	bcs.n	1d6a <__udivsi3+0x3a>
    1dce:	09c3      	lsrs	r3, r0, #7
    1dd0:	428b      	cmp	r3, r1
    1dd2:	d301      	bcc.n	1dd8 <__udivsi3+0xa8>
    1dd4:	01cb      	lsls	r3, r1, #7
    1dd6:	1ac0      	subs	r0, r0, r3
    1dd8:	4152      	adcs	r2, r2
    1dda:	0983      	lsrs	r3, r0, #6
    1ddc:	428b      	cmp	r3, r1
    1dde:	d301      	bcc.n	1de4 <__udivsi3+0xb4>
    1de0:	018b      	lsls	r3, r1, #6
    1de2:	1ac0      	subs	r0, r0, r3
    1de4:	4152      	adcs	r2, r2
    1de6:	0943      	lsrs	r3, r0, #5
    1de8:	428b      	cmp	r3, r1
    1dea:	d301      	bcc.n	1df0 <__udivsi3+0xc0>
    1dec:	014b      	lsls	r3, r1, #5
    1dee:	1ac0      	subs	r0, r0, r3
    1df0:	4152      	adcs	r2, r2
    1df2:	0903      	lsrs	r3, r0, #4
    1df4:	428b      	cmp	r3, r1
    1df6:	d301      	bcc.n	1dfc <__udivsi3+0xcc>
    1df8:	010b      	lsls	r3, r1, #4
    1dfa:	1ac0      	subs	r0, r0, r3
    1dfc:	4152      	adcs	r2, r2
    1dfe:	08c3      	lsrs	r3, r0, #3
    1e00:	428b      	cmp	r3, r1
    1e02:	d301      	bcc.n	1e08 <__udivsi3+0xd8>
    1e04:	00cb      	lsls	r3, r1, #3
    1e06:	1ac0      	subs	r0, r0, r3
    1e08:	4152      	adcs	r2, r2
    1e0a:	0883      	lsrs	r3, r0, #2
    1e0c:	428b      	cmp	r3, r1
    1e0e:	d301      	bcc.n	1e14 <__udivsi3+0xe4>
    1e10:	008b      	lsls	r3, r1, #2
    1e12:	1ac0      	subs	r0, r0, r3
    1e14:	4152      	adcs	r2, r2
    1e16:	0843      	lsrs	r3, r0, #1
    1e18:	428b      	cmp	r3, r1
    1e1a:	d301      	bcc.n	1e20 <__udivsi3+0xf0>
    1e1c:	004b      	lsls	r3, r1, #1
    1e1e:	1ac0      	subs	r0, r0, r3
    1e20:	4152      	adcs	r2, r2
    1e22:	1a41      	subs	r1, r0, r1
    1e24:	d200      	bcs.n	1e28 <__udivsi3+0xf8>
    1e26:	4601      	mov	r1, r0
    1e28:	4152      	adcs	r2, r2
    1e2a:	4610      	mov	r0, r2
    1e2c:	4770      	bx	lr
    1e2e:	e7ff      	b.n	1e30 <__udivsi3+0x100>
    1e30:	b501      	push	{r0, lr}
    1e32:	2000      	movs	r0, #0
    1e34:	f000 f806 	bl	1e44 <__aeabi_idiv0>
    1e38:	bd02      	pop	{r1, pc}
    1e3a:	46c0      	nop			; (mov r8, r8)

00001e3c <__aeabi_uidivmod>:
    1e3c:	2900      	cmp	r1, #0
    1e3e:	d0f7      	beq.n	1e30 <__udivsi3+0x100>
    1e40:	e776      	b.n	1d30 <__udivsi3>
    1e42:	4770      	bx	lr

00001e44 <__aeabi_idiv0>:
    1e44:	4770      	bx	lr
    1e46:	46c0      	nop			; (mov r8, r8)

00001e48 <__aeabi_lmul>:
    1e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e4a:	46ce      	mov	lr, r9
    1e4c:	4647      	mov	r7, r8
    1e4e:	0415      	lsls	r5, r2, #16
    1e50:	0c2d      	lsrs	r5, r5, #16
    1e52:	002e      	movs	r6, r5
    1e54:	b580      	push	{r7, lr}
    1e56:	0407      	lsls	r7, r0, #16
    1e58:	0c14      	lsrs	r4, r2, #16
    1e5a:	0c3f      	lsrs	r7, r7, #16
    1e5c:	4699      	mov	r9, r3
    1e5e:	0c03      	lsrs	r3, r0, #16
    1e60:	437e      	muls	r6, r7
    1e62:	435d      	muls	r5, r3
    1e64:	4367      	muls	r7, r4
    1e66:	4363      	muls	r3, r4
    1e68:	197f      	adds	r7, r7, r5
    1e6a:	0c34      	lsrs	r4, r6, #16
    1e6c:	19e4      	adds	r4, r4, r7
    1e6e:	469c      	mov	ip, r3
    1e70:	42a5      	cmp	r5, r4
    1e72:	d903      	bls.n	1e7c <__aeabi_lmul+0x34>
    1e74:	2380      	movs	r3, #128	; 0x80
    1e76:	025b      	lsls	r3, r3, #9
    1e78:	4698      	mov	r8, r3
    1e7a:	44c4      	add	ip, r8
    1e7c:	464b      	mov	r3, r9
    1e7e:	4351      	muls	r1, r2
    1e80:	4343      	muls	r3, r0
    1e82:	0436      	lsls	r6, r6, #16
    1e84:	0c36      	lsrs	r6, r6, #16
    1e86:	0c25      	lsrs	r5, r4, #16
    1e88:	0424      	lsls	r4, r4, #16
    1e8a:	4465      	add	r5, ip
    1e8c:	19a4      	adds	r4, r4, r6
    1e8e:	1859      	adds	r1, r3, r1
    1e90:	1949      	adds	r1, r1, r5
    1e92:	0020      	movs	r0, r4
    1e94:	bc0c      	pop	{r2, r3}
    1e96:	4690      	mov	r8, r2
    1e98:	4699      	mov	r9, r3
    1e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e9c <__aeabi_dadd>:
    1e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e9e:	4645      	mov	r5, r8
    1ea0:	46de      	mov	lr, fp
    1ea2:	4657      	mov	r7, sl
    1ea4:	464e      	mov	r6, r9
    1ea6:	030c      	lsls	r4, r1, #12
    1ea8:	b5e0      	push	{r5, r6, r7, lr}
    1eaa:	004e      	lsls	r6, r1, #1
    1eac:	0fc9      	lsrs	r1, r1, #31
    1eae:	4688      	mov	r8, r1
    1eb0:	000d      	movs	r5, r1
    1eb2:	0a61      	lsrs	r1, r4, #9
    1eb4:	0f44      	lsrs	r4, r0, #29
    1eb6:	430c      	orrs	r4, r1
    1eb8:	00c7      	lsls	r7, r0, #3
    1eba:	0319      	lsls	r1, r3, #12
    1ebc:	0058      	lsls	r0, r3, #1
    1ebe:	0fdb      	lsrs	r3, r3, #31
    1ec0:	469b      	mov	fp, r3
    1ec2:	0a4b      	lsrs	r3, r1, #9
    1ec4:	0f51      	lsrs	r1, r2, #29
    1ec6:	430b      	orrs	r3, r1
    1ec8:	0d76      	lsrs	r6, r6, #21
    1eca:	0d40      	lsrs	r0, r0, #21
    1ecc:	0019      	movs	r1, r3
    1ece:	00d2      	lsls	r2, r2, #3
    1ed0:	45d8      	cmp	r8, fp
    1ed2:	d100      	bne.n	1ed6 <__aeabi_dadd+0x3a>
    1ed4:	e0ae      	b.n	2034 <STACK_SIZE+0x34>
    1ed6:	1a35      	subs	r5, r6, r0
    1ed8:	2d00      	cmp	r5, #0
    1eda:	dc00      	bgt.n	1ede <__aeabi_dadd+0x42>
    1edc:	e0f6      	b.n	20cc <STACK_SIZE+0xcc>
    1ede:	2800      	cmp	r0, #0
    1ee0:	d10f      	bne.n	1f02 <__aeabi_dadd+0x66>
    1ee2:	4313      	orrs	r3, r2
    1ee4:	d100      	bne.n	1ee8 <__aeabi_dadd+0x4c>
    1ee6:	e0db      	b.n	20a0 <STACK_SIZE+0xa0>
    1ee8:	1e6b      	subs	r3, r5, #1
    1eea:	2b00      	cmp	r3, #0
    1eec:	d000      	beq.n	1ef0 <__aeabi_dadd+0x54>
    1eee:	e137      	b.n	2160 <STACK_SIZE+0x160>
    1ef0:	1aba      	subs	r2, r7, r2
    1ef2:	4297      	cmp	r7, r2
    1ef4:	41bf      	sbcs	r7, r7
    1ef6:	1a64      	subs	r4, r4, r1
    1ef8:	427f      	negs	r7, r7
    1efa:	1be4      	subs	r4, r4, r7
    1efc:	2601      	movs	r6, #1
    1efe:	0017      	movs	r7, r2
    1f00:	e024      	b.n	1f4c <__aeabi_dadd+0xb0>
    1f02:	4bc6      	ldr	r3, [pc, #792]	; (221c <STACK_SIZE+0x21c>)
    1f04:	429e      	cmp	r6, r3
    1f06:	d04d      	beq.n	1fa4 <__aeabi_dadd+0x108>
    1f08:	2380      	movs	r3, #128	; 0x80
    1f0a:	041b      	lsls	r3, r3, #16
    1f0c:	4319      	orrs	r1, r3
    1f0e:	2d38      	cmp	r5, #56	; 0x38
    1f10:	dd00      	ble.n	1f14 <__aeabi_dadd+0x78>
    1f12:	e107      	b.n	2124 <STACK_SIZE+0x124>
    1f14:	2d1f      	cmp	r5, #31
    1f16:	dd00      	ble.n	1f1a <__aeabi_dadd+0x7e>
    1f18:	e138      	b.n	218c <STACK_SIZE+0x18c>
    1f1a:	2020      	movs	r0, #32
    1f1c:	1b43      	subs	r3, r0, r5
    1f1e:	469a      	mov	sl, r3
    1f20:	000b      	movs	r3, r1
    1f22:	4650      	mov	r0, sl
    1f24:	4083      	lsls	r3, r0
    1f26:	4699      	mov	r9, r3
    1f28:	0013      	movs	r3, r2
    1f2a:	4648      	mov	r0, r9
    1f2c:	40eb      	lsrs	r3, r5
    1f2e:	4318      	orrs	r0, r3
    1f30:	0003      	movs	r3, r0
    1f32:	4650      	mov	r0, sl
    1f34:	4082      	lsls	r2, r0
    1f36:	1e50      	subs	r0, r2, #1
    1f38:	4182      	sbcs	r2, r0
    1f3a:	40e9      	lsrs	r1, r5
    1f3c:	431a      	orrs	r2, r3
    1f3e:	1aba      	subs	r2, r7, r2
    1f40:	1a61      	subs	r1, r4, r1
    1f42:	4297      	cmp	r7, r2
    1f44:	41a4      	sbcs	r4, r4
    1f46:	0017      	movs	r7, r2
    1f48:	4264      	negs	r4, r4
    1f4a:	1b0c      	subs	r4, r1, r4
    1f4c:	0223      	lsls	r3, r4, #8
    1f4e:	d562      	bpl.n	2016 <STACK_SIZE+0x16>
    1f50:	0264      	lsls	r4, r4, #9
    1f52:	0a65      	lsrs	r5, r4, #9
    1f54:	2d00      	cmp	r5, #0
    1f56:	d100      	bne.n	1f5a <__aeabi_dadd+0xbe>
    1f58:	e0df      	b.n	211a <STACK_SIZE+0x11a>
    1f5a:	0028      	movs	r0, r5
    1f5c:	f001 fbe4 	bl	3728 <__clzsi2>
    1f60:	0003      	movs	r3, r0
    1f62:	3b08      	subs	r3, #8
    1f64:	2b1f      	cmp	r3, #31
    1f66:	dd00      	ble.n	1f6a <__aeabi_dadd+0xce>
    1f68:	e0d2      	b.n	2110 <STACK_SIZE+0x110>
    1f6a:	2220      	movs	r2, #32
    1f6c:	003c      	movs	r4, r7
    1f6e:	1ad2      	subs	r2, r2, r3
    1f70:	409d      	lsls	r5, r3
    1f72:	40d4      	lsrs	r4, r2
    1f74:	409f      	lsls	r7, r3
    1f76:	4325      	orrs	r5, r4
    1f78:	429e      	cmp	r6, r3
    1f7a:	dd00      	ble.n	1f7e <__aeabi_dadd+0xe2>
    1f7c:	e0c4      	b.n	2108 <STACK_SIZE+0x108>
    1f7e:	1b9e      	subs	r6, r3, r6
    1f80:	1c73      	adds	r3, r6, #1
    1f82:	2b1f      	cmp	r3, #31
    1f84:	dd00      	ble.n	1f88 <__aeabi_dadd+0xec>
    1f86:	e0f1      	b.n	216c <STACK_SIZE+0x16c>
    1f88:	2220      	movs	r2, #32
    1f8a:	0038      	movs	r0, r7
    1f8c:	0029      	movs	r1, r5
    1f8e:	1ad2      	subs	r2, r2, r3
    1f90:	40d8      	lsrs	r0, r3
    1f92:	4091      	lsls	r1, r2
    1f94:	4097      	lsls	r7, r2
    1f96:	002c      	movs	r4, r5
    1f98:	4301      	orrs	r1, r0
    1f9a:	1e78      	subs	r0, r7, #1
    1f9c:	4187      	sbcs	r7, r0
    1f9e:	40dc      	lsrs	r4, r3
    1fa0:	2600      	movs	r6, #0
    1fa2:	430f      	orrs	r7, r1
    1fa4:	077b      	lsls	r3, r7, #29
    1fa6:	d009      	beq.n	1fbc <__aeabi_dadd+0x120>
    1fa8:	230f      	movs	r3, #15
    1faa:	403b      	ands	r3, r7
    1fac:	2b04      	cmp	r3, #4
    1fae:	d005      	beq.n	1fbc <__aeabi_dadd+0x120>
    1fb0:	1d3b      	adds	r3, r7, #4
    1fb2:	42bb      	cmp	r3, r7
    1fb4:	41bf      	sbcs	r7, r7
    1fb6:	427f      	negs	r7, r7
    1fb8:	19e4      	adds	r4, r4, r7
    1fba:	001f      	movs	r7, r3
    1fbc:	0223      	lsls	r3, r4, #8
    1fbe:	d52c      	bpl.n	201a <STACK_SIZE+0x1a>
    1fc0:	4b96      	ldr	r3, [pc, #600]	; (221c <STACK_SIZE+0x21c>)
    1fc2:	3601      	adds	r6, #1
    1fc4:	429e      	cmp	r6, r3
    1fc6:	d100      	bne.n	1fca <__aeabi_dadd+0x12e>
    1fc8:	e09a      	b.n	2100 <STACK_SIZE+0x100>
    1fca:	4645      	mov	r5, r8
    1fcc:	4b94      	ldr	r3, [pc, #592]	; (2220 <STACK_SIZE+0x220>)
    1fce:	08ff      	lsrs	r7, r7, #3
    1fd0:	401c      	ands	r4, r3
    1fd2:	0760      	lsls	r0, r4, #29
    1fd4:	0576      	lsls	r6, r6, #21
    1fd6:	0264      	lsls	r4, r4, #9
    1fd8:	4307      	orrs	r7, r0
    1fda:	0b24      	lsrs	r4, r4, #12
    1fdc:	0d76      	lsrs	r6, r6, #21
    1fde:	2100      	movs	r1, #0
    1fe0:	0324      	lsls	r4, r4, #12
    1fe2:	0b23      	lsrs	r3, r4, #12
    1fe4:	0d0c      	lsrs	r4, r1, #20
    1fe6:	4a8f      	ldr	r2, [pc, #572]	; (2224 <STACK_SIZE+0x224>)
    1fe8:	0524      	lsls	r4, r4, #20
    1fea:	431c      	orrs	r4, r3
    1fec:	4014      	ands	r4, r2
    1fee:	0533      	lsls	r3, r6, #20
    1ff0:	4323      	orrs	r3, r4
    1ff2:	005b      	lsls	r3, r3, #1
    1ff4:	07ed      	lsls	r5, r5, #31
    1ff6:	085b      	lsrs	r3, r3, #1
    1ff8:	432b      	orrs	r3, r5
    1ffa:	0038      	movs	r0, r7
    1ffc:	0019      	movs	r1, r3
    1ffe:	bc3c      	pop	{r2, r3, r4, r5}
    2000:	4690      	mov	r8, r2
    2002:	4699      	mov	r9, r3
    2004:	46a2      	mov	sl, r4
    2006:	46ab      	mov	fp, r5
    2008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    200a:	4664      	mov	r4, ip
    200c:	4304      	orrs	r4, r0
    200e:	d100      	bne.n	2012 <STACK_SIZE+0x12>
    2010:	e211      	b.n	2436 <STACK_SIZE+0x436>
    2012:	0004      	movs	r4, r0
    2014:	4667      	mov	r7, ip
    2016:	077b      	lsls	r3, r7, #29
    2018:	d1c6      	bne.n	1fa8 <__aeabi_dadd+0x10c>
    201a:	4645      	mov	r5, r8
    201c:	0760      	lsls	r0, r4, #29
    201e:	08ff      	lsrs	r7, r7, #3
    2020:	4307      	orrs	r7, r0
    2022:	08e4      	lsrs	r4, r4, #3
    2024:	4b7d      	ldr	r3, [pc, #500]	; (221c <STACK_SIZE+0x21c>)
    2026:	429e      	cmp	r6, r3
    2028:	d030      	beq.n	208c <STACK_SIZE+0x8c>
    202a:	0324      	lsls	r4, r4, #12
    202c:	0576      	lsls	r6, r6, #21
    202e:	0b24      	lsrs	r4, r4, #12
    2030:	0d76      	lsrs	r6, r6, #21
    2032:	e7d4      	b.n	1fde <__aeabi_dadd+0x142>
    2034:	1a33      	subs	r3, r6, r0
    2036:	469a      	mov	sl, r3
    2038:	2b00      	cmp	r3, #0
    203a:	dd78      	ble.n	212e <STACK_SIZE+0x12e>
    203c:	2800      	cmp	r0, #0
    203e:	d031      	beq.n	20a4 <STACK_SIZE+0xa4>
    2040:	4876      	ldr	r0, [pc, #472]	; (221c <STACK_SIZE+0x21c>)
    2042:	4286      	cmp	r6, r0
    2044:	d0ae      	beq.n	1fa4 <__aeabi_dadd+0x108>
    2046:	2080      	movs	r0, #128	; 0x80
    2048:	0400      	lsls	r0, r0, #16
    204a:	4301      	orrs	r1, r0
    204c:	4653      	mov	r3, sl
    204e:	2b38      	cmp	r3, #56	; 0x38
    2050:	dc00      	bgt.n	2054 <STACK_SIZE+0x54>
    2052:	e0e9      	b.n	2228 <STACK_SIZE+0x228>
    2054:	430a      	orrs	r2, r1
    2056:	1e51      	subs	r1, r2, #1
    2058:	418a      	sbcs	r2, r1
    205a:	2100      	movs	r1, #0
    205c:	19d2      	adds	r2, r2, r7
    205e:	42ba      	cmp	r2, r7
    2060:	41bf      	sbcs	r7, r7
    2062:	1909      	adds	r1, r1, r4
    2064:	427c      	negs	r4, r7
    2066:	0017      	movs	r7, r2
    2068:	190c      	adds	r4, r1, r4
    206a:	0223      	lsls	r3, r4, #8
    206c:	d5d3      	bpl.n	2016 <STACK_SIZE+0x16>
    206e:	4b6b      	ldr	r3, [pc, #428]	; (221c <STACK_SIZE+0x21c>)
    2070:	3601      	adds	r6, #1
    2072:	429e      	cmp	r6, r3
    2074:	d100      	bne.n	2078 <STACK_SIZE+0x78>
    2076:	e13a      	b.n	22ee <STACK_SIZE+0x2ee>
    2078:	2001      	movs	r0, #1
    207a:	4b69      	ldr	r3, [pc, #420]	; (2220 <STACK_SIZE+0x220>)
    207c:	401c      	ands	r4, r3
    207e:	087b      	lsrs	r3, r7, #1
    2080:	4007      	ands	r7, r0
    2082:	431f      	orrs	r7, r3
    2084:	07e0      	lsls	r0, r4, #31
    2086:	4307      	orrs	r7, r0
    2088:	0864      	lsrs	r4, r4, #1
    208a:	e78b      	b.n	1fa4 <__aeabi_dadd+0x108>
    208c:	0023      	movs	r3, r4
    208e:	433b      	orrs	r3, r7
    2090:	d100      	bne.n	2094 <STACK_SIZE+0x94>
    2092:	e1cb      	b.n	242c <STACK_SIZE+0x42c>
    2094:	2280      	movs	r2, #128	; 0x80
    2096:	0312      	lsls	r2, r2, #12
    2098:	4314      	orrs	r4, r2
    209a:	0324      	lsls	r4, r4, #12
    209c:	0b24      	lsrs	r4, r4, #12
    209e:	e79e      	b.n	1fde <__aeabi_dadd+0x142>
    20a0:	002e      	movs	r6, r5
    20a2:	e77f      	b.n	1fa4 <__aeabi_dadd+0x108>
    20a4:	0008      	movs	r0, r1
    20a6:	4310      	orrs	r0, r2
    20a8:	d100      	bne.n	20ac <STACK_SIZE+0xac>
    20aa:	e0b4      	b.n	2216 <STACK_SIZE+0x216>
    20ac:	1e58      	subs	r0, r3, #1
    20ae:	2800      	cmp	r0, #0
    20b0:	d000      	beq.n	20b4 <STACK_SIZE+0xb4>
    20b2:	e0de      	b.n	2272 <STACK_SIZE+0x272>
    20b4:	18ba      	adds	r2, r7, r2
    20b6:	42ba      	cmp	r2, r7
    20b8:	419b      	sbcs	r3, r3
    20ba:	1864      	adds	r4, r4, r1
    20bc:	425b      	negs	r3, r3
    20be:	18e4      	adds	r4, r4, r3
    20c0:	0017      	movs	r7, r2
    20c2:	2601      	movs	r6, #1
    20c4:	0223      	lsls	r3, r4, #8
    20c6:	d5a6      	bpl.n	2016 <STACK_SIZE+0x16>
    20c8:	2602      	movs	r6, #2
    20ca:	e7d5      	b.n	2078 <STACK_SIZE+0x78>
    20cc:	2d00      	cmp	r5, #0
    20ce:	d16e      	bne.n	21ae <STACK_SIZE+0x1ae>
    20d0:	1c70      	adds	r0, r6, #1
    20d2:	0540      	lsls	r0, r0, #21
    20d4:	0d40      	lsrs	r0, r0, #21
    20d6:	2801      	cmp	r0, #1
    20d8:	dc00      	bgt.n	20dc <STACK_SIZE+0xdc>
    20da:	e0f9      	b.n	22d0 <STACK_SIZE+0x2d0>
    20dc:	1ab8      	subs	r0, r7, r2
    20de:	4684      	mov	ip, r0
    20e0:	4287      	cmp	r7, r0
    20e2:	4180      	sbcs	r0, r0
    20e4:	1ae5      	subs	r5, r4, r3
    20e6:	4240      	negs	r0, r0
    20e8:	1a2d      	subs	r5, r5, r0
    20ea:	0228      	lsls	r0, r5, #8
    20ec:	d400      	bmi.n	20f0 <STACK_SIZE+0xf0>
    20ee:	e089      	b.n	2204 <STACK_SIZE+0x204>
    20f0:	1bd7      	subs	r7, r2, r7
    20f2:	42ba      	cmp	r2, r7
    20f4:	4192      	sbcs	r2, r2
    20f6:	1b1c      	subs	r4, r3, r4
    20f8:	4252      	negs	r2, r2
    20fa:	1aa5      	subs	r5, r4, r2
    20fc:	46d8      	mov	r8, fp
    20fe:	e729      	b.n	1f54 <__aeabi_dadd+0xb8>
    2100:	4645      	mov	r5, r8
    2102:	2400      	movs	r4, #0
    2104:	2700      	movs	r7, #0
    2106:	e76a      	b.n	1fde <__aeabi_dadd+0x142>
    2108:	4c45      	ldr	r4, [pc, #276]	; (2220 <STACK_SIZE+0x220>)
    210a:	1af6      	subs	r6, r6, r3
    210c:	402c      	ands	r4, r5
    210e:	e749      	b.n	1fa4 <__aeabi_dadd+0x108>
    2110:	003d      	movs	r5, r7
    2112:	3828      	subs	r0, #40	; 0x28
    2114:	4085      	lsls	r5, r0
    2116:	2700      	movs	r7, #0
    2118:	e72e      	b.n	1f78 <__aeabi_dadd+0xdc>
    211a:	0038      	movs	r0, r7
    211c:	f001 fb04 	bl	3728 <__clzsi2>
    2120:	3020      	adds	r0, #32
    2122:	e71d      	b.n	1f60 <__aeabi_dadd+0xc4>
    2124:	430a      	orrs	r2, r1
    2126:	1e51      	subs	r1, r2, #1
    2128:	418a      	sbcs	r2, r1
    212a:	2100      	movs	r1, #0
    212c:	e707      	b.n	1f3e <__aeabi_dadd+0xa2>
    212e:	2b00      	cmp	r3, #0
    2130:	d000      	beq.n	2134 <STACK_SIZE+0x134>
    2132:	e0f3      	b.n	231c <STACK_SIZE+0x31c>
    2134:	1c70      	adds	r0, r6, #1
    2136:	0543      	lsls	r3, r0, #21
    2138:	0d5b      	lsrs	r3, r3, #21
    213a:	2b01      	cmp	r3, #1
    213c:	dc00      	bgt.n	2140 <STACK_SIZE+0x140>
    213e:	e0ad      	b.n	229c <STACK_SIZE+0x29c>
    2140:	4b36      	ldr	r3, [pc, #216]	; (221c <STACK_SIZE+0x21c>)
    2142:	4298      	cmp	r0, r3
    2144:	d100      	bne.n	2148 <STACK_SIZE+0x148>
    2146:	e0d1      	b.n	22ec <STACK_SIZE+0x2ec>
    2148:	18ba      	adds	r2, r7, r2
    214a:	42ba      	cmp	r2, r7
    214c:	41bf      	sbcs	r7, r7
    214e:	1864      	adds	r4, r4, r1
    2150:	427f      	negs	r7, r7
    2152:	19e4      	adds	r4, r4, r7
    2154:	07e7      	lsls	r7, r4, #31
    2156:	0852      	lsrs	r2, r2, #1
    2158:	4317      	orrs	r7, r2
    215a:	0864      	lsrs	r4, r4, #1
    215c:	0006      	movs	r6, r0
    215e:	e721      	b.n	1fa4 <__aeabi_dadd+0x108>
    2160:	482e      	ldr	r0, [pc, #184]	; (221c <STACK_SIZE+0x21c>)
    2162:	4285      	cmp	r5, r0
    2164:	d100      	bne.n	2168 <STACK_SIZE+0x168>
    2166:	e093      	b.n	2290 <STACK_SIZE+0x290>
    2168:	001d      	movs	r5, r3
    216a:	e6d0      	b.n	1f0e <__aeabi_dadd+0x72>
    216c:	0029      	movs	r1, r5
    216e:	3e1f      	subs	r6, #31
    2170:	40f1      	lsrs	r1, r6
    2172:	2b20      	cmp	r3, #32
    2174:	d100      	bne.n	2178 <STACK_SIZE+0x178>
    2176:	e08d      	b.n	2294 <STACK_SIZE+0x294>
    2178:	2240      	movs	r2, #64	; 0x40
    217a:	1ad3      	subs	r3, r2, r3
    217c:	409d      	lsls	r5, r3
    217e:	432f      	orrs	r7, r5
    2180:	1e7d      	subs	r5, r7, #1
    2182:	41af      	sbcs	r7, r5
    2184:	2400      	movs	r4, #0
    2186:	430f      	orrs	r7, r1
    2188:	2600      	movs	r6, #0
    218a:	e744      	b.n	2016 <STACK_SIZE+0x16>
    218c:	002b      	movs	r3, r5
    218e:	0008      	movs	r0, r1
    2190:	3b20      	subs	r3, #32
    2192:	40d8      	lsrs	r0, r3
    2194:	0003      	movs	r3, r0
    2196:	2d20      	cmp	r5, #32
    2198:	d100      	bne.n	219c <STACK_SIZE+0x19c>
    219a:	e07d      	b.n	2298 <STACK_SIZE+0x298>
    219c:	2040      	movs	r0, #64	; 0x40
    219e:	1b45      	subs	r5, r0, r5
    21a0:	40a9      	lsls	r1, r5
    21a2:	430a      	orrs	r2, r1
    21a4:	1e51      	subs	r1, r2, #1
    21a6:	418a      	sbcs	r2, r1
    21a8:	2100      	movs	r1, #0
    21aa:	431a      	orrs	r2, r3
    21ac:	e6c7      	b.n	1f3e <__aeabi_dadd+0xa2>
    21ae:	2e00      	cmp	r6, #0
    21b0:	d050      	beq.n	2254 <STACK_SIZE+0x254>
    21b2:	4e1a      	ldr	r6, [pc, #104]	; (221c <STACK_SIZE+0x21c>)
    21b4:	42b0      	cmp	r0, r6
    21b6:	d057      	beq.n	2268 <STACK_SIZE+0x268>
    21b8:	2680      	movs	r6, #128	; 0x80
    21ba:	426b      	negs	r3, r5
    21bc:	4699      	mov	r9, r3
    21be:	0436      	lsls	r6, r6, #16
    21c0:	4334      	orrs	r4, r6
    21c2:	464b      	mov	r3, r9
    21c4:	2b38      	cmp	r3, #56	; 0x38
    21c6:	dd00      	ble.n	21ca <STACK_SIZE+0x1ca>
    21c8:	e0d6      	b.n	2378 <STACK_SIZE+0x378>
    21ca:	2b1f      	cmp	r3, #31
    21cc:	dd00      	ble.n	21d0 <STACK_SIZE+0x1d0>
    21ce:	e135      	b.n	243c <STACK_SIZE+0x43c>
    21d0:	2620      	movs	r6, #32
    21d2:	1af5      	subs	r5, r6, r3
    21d4:	0026      	movs	r6, r4
    21d6:	40ae      	lsls	r6, r5
    21d8:	46b2      	mov	sl, r6
    21da:	003e      	movs	r6, r7
    21dc:	40de      	lsrs	r6, r3
    21de:	46ac      	mov	ip, r5
    21e0:	0035      	movs	r5, r6
    21e2:	4656      	mov	r6, sl
    21e4:	432e      	orrs	r6, r5
    21e6:	4665      	mov	r5, ip
    21e8:	40af      	lsls	r7, r5
    21ea:	1e7d      	subs	r5, r7, #1
    21ec:	41af      	sbcs	r7, r5
    21ee:	40dc      	lsrs	r4, r3
    21f0:	4337      	orrs	r7, r6
    21f2:	1bd7      	subs	r7, r2, r7
    21f4:	42ba      	cmp	r2, r7
    21f6:	4192      	sbcs	r2, r2
    21f8:	1b0c      	subs	r4, r1, r4
    21fa:	4252      	negs	r2, r2
    21fc:	1aa4      	subs	r4, r4, r2
    21fe:	0006      	movs	r6, r0
    2200:	46d8      	mov	r8, fp
    2202:	e6a3      	b.n	1f4c <__aeabi_dadd+0xb0>
    2204:	4664      	mov	r4, ip
    2206:	4667      	mov	r7, ip
    2208:	432c      	orrs	r4, r5
    220a:	d000      	beq.n	220e <STACK_SIZE+0x20e>
    220c:	e6a2      	b.n	1f54 <__aeabi_dadd+0xb8>
    220e:	2500      	movs	r5, #0
    2210:	2600      	movs	r6, #0
    2212:	2700      	movs	r7, #0
    2214:	e706      	b.n	2024 <STACK_SIZE+0x24>
    2216:	001e      	movs	r6, r3
    2218:	e6c4      	b.n	1fa4 <__aeabi_dadd+0x108>
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	000007ff 	.word	0x000007ff
    2220:	ff7fffff 	.word	0xff7fffff
    2224:	800fffff 	.word	0x800fffff
    2228:	2b1f      	cmp	r3, #31
    222a:	dc63      	bgt.n	22f4 <STACK_SIZE+0x2f4>
    222c:	2020      	movs	r0, #32
    222e:	1ac3      	subs	r3, r0, r3
    2230:	0008      	movs	r0, r1
    2232:	4098      	lsls	r0, r3
    2234:	469c      	mov	ip, r3
    2236:	4683      	mov	fp, r0
    2238:	4653      	mov	r3, sl
    223a:	0010      	movs	r0, r2
    223c:	40d8      	lsrs	r0, r3
    223e:	0003      	movs	r3, r0
    2240:	4658      	mov	r0, fp
    2242:	4318      	orrs	r0, r3
    2244:	4663      	mov	r3, ip
    2246:	409a      	lsls	r2, r3
    2248:	1e53      	subs	r3, r2, #1
    224a:	419a      	sbcs	r2, r3
    224c:	4653      	mov	r3, sl
    224e:	4302      	orrs	r2, r0
    2250:	40d9      	lsrs	r1, r3
    2252:	e703      	b.n	205c <STACK_SIZE+0x5c>
    2254:	0026      	movs	r6, r4
    2256:	433e      	orrs	r6, r7
    2258:	d006      	beq.n	2268 <STACK_SIZE+0x268>
    225a:	43eb      	mvns	r3, r5
    225c:	4699      	mov	r9, r3
    225e:	2b00      	cmp	r3, #0
    2260:	d0c7      	beq.n	21f2 <STACK_SIZE+0x1f2>
    2262:	4e94      	ldr	r6, [pc, #592]	; (24b4 <STACK_SIZE+0x4b4>)
    2264:	42b0      	cmp	r0, r6
    2266:	d1ac      	bne.n	21c2 <STACK_SIZE+0x1c2>
    2268:	000c      	movs	r4, r1
    226a:	0017      	movs	r7, r2
    226c:	0006      	movs	r6, r0
    226e:	46d8      	mov	r8, fp
    2270:	e698      	b.n	1fa4 <__aeabi_dadd+0x108>
    2272:	4b90      	ldr	r3, [pc, #576]	; (24b4 <STACK_SIZE+0x4b4>)
    2274:	459a      	cmp	sl, r3
    2276:	d00b      	beq.n	2290 <STACK_SIZE+0x290>
    2278:	4682      	mov	sl, r0
    227a:	e6e7      	b.n	204c <STACK_SIZE+0x4c>
    227c:	2800      	cmp	r0, #0
    227e:	d000      	beq.n	2282 <STACK_SIZE+0x282>
    2280:	e09e      	b.n	23c0 <STACK_SIZE+0x3c0>
    2282:	0018      	movs	r0, r3
    2284:	4310      	orrs	r0, r2
    2286:	d100      	bne.n	228a <STACK_SIZE+0x28a>
    2288:	e0e9      	b.n	245e <STACK_SIZE+0x45e>
    228a:	001c      	movs	r4, r3
    228c:	0017      	movs	r7, r2
    228e:	46d8      	mov	r8, fp
    2290:	4e88      	ldr	r6, [pc, #544]	; (24b4 <STACK_SIZE+0x4b4>)
    2292:	e687      	b.n	1fa4 <__aeabi_dadd+0x108>
    2294:	2500      	movs	r5, #0
    2296:	e772      	b.n	217e <STACK_SIZE+0x17e>
    2298:	2100      	movs	r1, #0
    229a:	e782      	b.n	21a2 <STACK_SIZE+0x1a2>
    229c:	0023      	movs	r3, r4
    229e:	433b      	orrs	r3, r7
    22a0:	2e00      	cmp	r6, #0
    22a2:	d000      	beq.n	22a6 <STACK_SIZE+0x2a6>
    22a4:	e0ab      	b.n	23fe <STACK_SIZE+0x3fe>
    22a6:	2b00      	cmp	r3, #0
    22a8:	d100      	bne.n	22ac <STACK_SIZE+0x2ac>
    22aa:	e0e7      	b.n	247c <STACK_SIZE+0x47c>
    22ac:	000b      	movs	r3, r1
    22ae:	4313      	orrs	r3, r2
    22b0:	d100      	bne.n	22b4 <STACK_SIZE+0x2b4>
    22b2:	e677      	b.n	1fa4 <__aeabi_dadd+0x108>
    22b4:	18ba      	adds	r2, r7, r2
    22b6:	42ba      	cmp	r2, r7
    22b8:	41bf      	sbcs	r7, r7
    22ba:	1864      	adds	r4, r4, r1
    22bc:	427f      	negs	r7, r7
    22be:	19e4      	adds	r4, r4, r7
    22c0:	0223      	lsls	r3, r4, #8
    22c2:	d400      	bmi.n	22c6 <STACK_SIZE+0x2c6>
    22c4:	e0f2      	b.n	24ac <STACK_SIZE+0x4ac>
    22c6:	4b7c      	ldr	r3, [pc, #496]	; (24b8 <STACK_SIZE+0x4b8>)
    22c8:	0017      	movs	r7, r2
    22ca:	401c      	ands	r4, r3
    22cc:	0006      	movs	r6, r0
    22ce:	e669      	b.n	1fa4 <__aeabi_dadd+0x108>
    22d0:	0020      	movs	r0, r4
    22d2:	4338      	orrs	r0, r7
    22d4:	2e00      	cmp	r6, #0
    22d6:	d1d1      	bne.n	227c <STACK_SIZE+0x27c>
    22d8:	2800      	cmp	r0, #0
    22da:	d15b      	bne.n	2394 <STACK_SIZE+0x394>
    22dc:	001c      	movs	r4, r3
    22de:	4314      	orrs	r4, r2
    22e0:	d100      	bne.n	22e4 <STACK_SIZE+0x2e4>
    22e2:	e0a8      	b.n	2436 <STACK_SIZE+0x436>
    22e4:	001c      	movs	r4, r3
    22e6:	0017      	movs	r7, r2
    22e8:	46d8      	mov	r8, fp
    22ea:	e65b      	b.n	1fa4 <__aeabi_dadd+0x108>
    22ec:	0006      	movs	r6, r0
    22ee:	2400      	movs	r4, #0
    22f0:	2700      	movs	r7, #0
    22f2:	e697      	b.n	2024 <STACK_SIZE+0x24>
    22f4:	4650      	mov	r0, sl
    22f6:	000b      	movs	r3, r1
    22f8:	3820      	subs	r0, #32
    22fa:	40c3      	lsrs	r3, r0
    22fc:	4699      	mov	r9, r3
    22fe:	4653      	mov	r3, sl
    2300:	2b20      	cmp	r3, #32
    2302:	d100      	bne.n	2306 <STACK_SIZE+0x306>
    2304:	e095      	b.n	2432 <STACK_SIZE+0x432>
    2306:	2340      	movs	r3, #64	; 0x40
    2308:	4650      	mov	r0, sl
    230a:	1a1b      	subs	r3, r3, r0
    230c:	4099      	lsls	r1, r3
    230e:	430a      	orrs	r2, r1
    2310:	1e51      	subs	r1, r2, #1
    2312:	418a      	sbcs	r2, r1
    2314:	464b      	mov	r3, r9
    2316:	2100      	movs	r1, #0
    2318:	431a      	orrs	r2, r3
    231a:	e69f      	b.n	205c <STACK_SIZE+0x5c>
    231c:	2e00      	cmp	r6, #0
    231e:	d130      	bne.n	2382 <STACK_SIZE+0x382>
    2320:	0026      	movs	r6, r4
    2322:	433e      	orrs	r6, r7
    2324:	d067      	beq.n	23f6 <STACK_SIZE+0x3f6>
    2326:	43db      	mvns	r3, r3
    2328:	469a      	mov	sl, r3
    232a:	2b00      	cmp	r3, #0
    232c:	d01c      	beq.n	2368 <STACK_SIZE+0x368>
    232e:	4e61      	ldr	r6, [pc, #388]	; (24b4 <STACK_SIZE+0x4b4>)
    2330:	42b0      	cmp	r0, r6
    2332:	d060      	beq.n	23f6 <STACK_SIZE+0x3f6>
    2334:	4653      	mov	r3, sl
    2336:	2b38      	cmp	r3, #56	; 0x38
    2338:	dd00      	ble.n	233c <STACK_SIZE+0x33c>
    233a:	e096      	b.n	246a <STACK_SIZE+0x46a>
    233c:	2b1f      	cmp	r3, #31
    233e:	dd00      	ble.n	2342 <STACK_SIZE+0x342>
    2340:	e09f      	b.n	2482 <STACK_SIZE+0x482>
    2342:	2620      	movs	r6, #32
    2344:	1af3      	subs	r3, r6, r3
    2346:	0026      	movs	r6, r4
    2348:	409e      	lsls	r6, r3
    234a:	469c      	mov	ip, r3
    234c:	46b3      	mov	fp, r6
    234e:	4653      	mov	r3, sl
    2350:	003e      	movs	r6, r7
    2352:	40de      	lsrs	r6, r3
    2354:	0033      	movs	r3, r6
    2356:	465e      	mov	r6, fp
    2358:	431e      	orrs	r6, r3
    235a:	4663      	mov	r3, ip
    235c:	409f      	lsls	r7, r3
    235e:	1e7b      	subs	r3, r7, #1
    2360:	419f      	sbcs	r7, r3
    2362:	4653      	mov	r3, sl
    2364:	40dc      	lsrs	r4, r3
    2366:	4337      	orrs	r7, r6
    2368:	18bf      	adds	r7, r7, r2
    236a:	4297      	cmp	r7, r2
    236c:	4192      	sbcs	r2, r2
    236e:	1864      	adds	r4, r4, r1
    2370:	4252      	negs	r2, r2
    2372:	18a4      	adds	r4, r4, r2
    2374:	0006      	movs	r6, r0
    2376:	e678      	b.n	206a <STACK_SIZE+0x6a>
    2378:	4327      	orrs	r7, r4
    237a:	1e7c      	subs	r4, r7, #1
    237c:	41a7      	sbcs	r7, r4
    237e:	2400      	movs	r4, #0
    2380:	e737      	b.n	21f2 <STACK_SIZE+0x1f2>
    2382:	4e4c      	ldr	r6, [pc, #304]	; (24b4 <STACK_SIZE+0x4b4>)
    2384:	42b0      	cmp	r0, r6
    2386:	d036      	beq.n	23f6 <STACK_SIZE+0x3f6>
    2388:	2680      	movs	r6, #128	; 0x80
    238a:	425b      	negs	r3, r3
    238c:	0436      	lsls	r6, r6, #16
    238e:	469a      	mov	sl, r3
    2390:	4334      	orrs	r4, r6
    2392:	e7cf      	b.n	2334 <STACK_SIZE+0x334>
    2394:	0018      	movs	r0, r3
    2396:	4310      	orrs	r0, r2
    2398:	d100      	bne.n	239c <STACK_SIZE+0x39c>
    239a:	e603      	b.n	1fa4 <__aeabi_dadd+0x108>
    239c:	1ab8      	subs	r0, r7, r2
    239e:	4684      	mov	ip, r0
    23a0:	4567      	cmp	r7, ip
    23a2:	41ad      	sbcs	r5, r5
    23a4:	1ae0      	subs	r0, r4, r3
    23a6:	426d      	negs	r5, r5
    23a8:	1b40      	subs	r0, r0, r5
    23aa:	0205      	lsls	r5, r0, #8
    23ac:	d400      	bmi.n	23b0 <STACK_SIZE+0x3b0>
    23ae:	e62c      	b.n	200a <STACK_SIZE+0xa>
    23b0:	1bd7      	subs	r7, r2, r7
    23b2:	42ba      	cmp	r2, r7
    23b4:	4192      	sbcs	r2, r2
    23b6:	1b1c      	subs	r4, r3, r4
    23b8:	4252      	negs	r2, r2
    23ba:	1aa4      	subs	r4, r4, r2
    23bc:	46d8      	mov	r8, fp
    23be:	e5f1      	b.n	1fa4 <__aeabi_dadd+0x108>
    23c0:	0018      	movs	r0, r3
    23c2:	4310      	orrs	r0, r2
    23c4:	d100      	bne.n	23c8 <STACK_SIZE+0x3c8>
    23c6:	e763      	b.n	2290 <STACK_SIZE+0x290>
    23c8:	08f8      	lsrs	r0, r7, #3
    23ca:	0767      	lsls	r7, r4, #29
    23cc:	4307      	orrs	r7, r0
    23ce:	2080      	movs	r0, #128	; 0x80
    23d0:	08e4      	lsrs	r4, r4, #3
    23d2:	0300      	lsls	r0, r0, #12
    23d4:	4204      	tst	r4, r0
    23d6:	d008      	beq.n	23ea <STACK_SIZE+0x3ea>
    23d8:	08dd      	lsrs	r5, r3, #3
    23da:	4205      	tst	r5, r0
    23dc:	d105      	bne.n	23ea <STACK_SIZE+0x3ea>
    23de:	08d2      	lsrs	r2, r2, #3
    23e0:	0759      	lsls	r1, r3, #29
    23e2:	4311      	orrs	r1, r2
    23e4:	000f      	movs	r7, r1
    23e6:	002c      	movs	r4, r5
    23e8:	46d8      	mov	r8, fp
    23ea:	0f7b      	lsrs	r3, r7, #29
    23ec:	00e4      	lsls	r4, r4, #3
    23ee:	431c      	orrs	r4, r3
    23f0:	00ff      	lsls	r7, r7, #3
    23f2:	4e30      	ldr	r6, [pc, #192]	; (24b4 <STACK_SIZE+0x4b4>)
    23f4:	e5d6      	b.n	1fa4 <__aeabi_dadd+0x108>
    23f6:	000c      	movs	r4, r1
    23f8:	0017      	movs	r7, r2
    23fa:	0006      	movs	r6, r0
    23fc:	e5d2      	b.n	1fa4 <__aeabi_dadd+0x108>
    23fe:	2b00      	cmp	r3, #0
    2400:	d038      	beq.n	2474 <STACK_SIZE+0x474>
    2402:	000b      	movs	r3, r1
    2404:	4313      	orrs	r3, r2
    2406:	d100      	bne.n	240a <STACK_SIZE+0x40a>
    2408:	e742      	b.n	2290 <STACK_SIZE+0x290>
    240a:	08f8      	lsrs	r0, r7, #3
    240c:	0767      	lsls	r7, r4, #29
    240e:	4307      	orrs	r7, r0
    2410:	2080      	movs	r0, #128	; 0x80
    2412:	08e4      	lsrs	r4, r4, #3
    2414:	0300      	lsls	r0, r0, #12
    2416:	4204      	tst	r4, r0
    2418:	d0e7      	beq.n	23ea <STACK_SIZE+0x3ea>
    241a:	08cb      	lsrs	r3, r1, #3
    241c:	4203      	tst	r3, r0
    241e:	d1e4      	bne.n	23ea <STACK_SIZE+0x3ea>
    2420:	08d2      	lsrs	r2, r2, #3
    2422:	0749      	lsls	r1, r1, #29
    2424:	4311      	orrs	r1, r2
    2426:	000f      	movs	r7, r1
    2428:	001c      	movs	r4, r3
    242a:	e7de      	b.n	23ea <STACK_SIZE+0x3ea>
    242c:	2700      	movs	r7, #0
    242e:	2400      	movs	r4, #0
    2430:	e5d5      	b.n	1fde <__aeabi_dadd+0x142>
    2432:	2100      	movs	r1, #0
    2434:	e76b      	b.n	230e <STACK_SIZE+0x30e>
    2436:	2500      	movs	r5, #0
    2438:	2700      	movs	r7, #0
    243a:	e5f3      	b.n	2024 <STACK_SIZE+0x24>
    243c:	464e      	mov	r6, r9
    243e:	0025      	movs	r5, r4
    2440:	3e20      	subs	r6, #32
    2442:	40f5      	lsrs	r5, r6
    2444:	464b      	mov	r3, r9
    2446:	002e      	movs	r6, r5
    2448:	2b20      	cmp	r3, #32
    244a:	d02d      	beq.n	24a8 <STACK_SIZE+0x4a8>
    244c:	2540      	movs	r5, #64	; 0x40
    244e:	1aed      	subs	r5, r5, r3
    2450:	40ac      	lsls	r4, r5
    2452:	4327      	orrs	r7, r4
    2454:	1e7c      	subs	r4, r7, #1
    2456:	41a7      	sbcs	r7, r4
    2458:	2400      	movs	r4, #0
    245a:	4337      	orrs	r7, r6
    245c:	e6c9      	b.n	21f2 <STACK_SIZE+0x1f2>
    245e:	2480      	movs	r4, #128	; 0x80
    2460:	2500      	movs	r5, #0
    2462:	0324      	lsls	r4, r4, #12
    2464:	4e13      	ldr	r6, [pc, #76]	; (24b4 <STACK_SIZE+0x4b4>)
    2466:	2700      	movs	r7, #0
    2468:	e5dc      	b.n	2024 <STACK_SIZE+0x24>
    246a:	4327      	orrs	r7, r4
    246c:	1e7c      	subs	r4, r7, #1
    246e:	41a7      	sbcs	r7, r4
    2470:	2400      	movs	r4, #0
    2472:	e779      	b.n	2368 <STACK_SIZE+0x368>
    2474:	000c      	movs	r4, r1
    2476:	0017      	movs	r7, r2
    2478:	4e0e      	ldr	r6, [pc, #56]	; (24b4 <STACK_SIZE+0x4b4>)
    247a:	e593      	b.n	1fa4 <__aeabi_dadd+0x108>
    247c:	000c      	movs	r4, r1
    247e:	0017      	movs	r7, r2
    2480:	e590      	b.n	1fa4 <__aeabi_dadd+0x108>
    2482:	4656      	mov	r6, sl
    2484:	0023      	movs	r3, r4
    2486:	3e20      	subs	r6, #32
    2488:	40f3      	lsrs	r3, r6
    248a:	4699      	mov	r9, r3
    248c:	4653      	mov	r3, sl
    248e:	2b20      	cmp	r3, #32
    2490:	d00e      	beq.n	24b0 <STACK_SIZE+0x4b0>
    2492:	2340      	movs	r3, #64	; 0x40
    2494:	4656      	mov	r6, sl
    2496:	1b9b      	subs	r3, r3, r6
    2498:	409c      	lsls	r4, r3
    249a:	4327      	orrs	r7, r4
    249c:	1e7c      	subs	r4, r7, #1
    249e:	41a7      	sbcs	r7, r4
    24a0:	464b      	mov	r3, r9
    24a2:	2400      	movs	r4, #0
    24a4:	431f      	orrs	r7, r3
    24a6:	e75f      	b.n	2368 <STACK_SIZE+0x368>
    24a8:	2400      	movs	r4, #0
    24aa:	e7d2      	b.n	2452 <STACK_SIZE+0x452>
    24ac:	0017      	movs	r7, r2
    24ae:	e5b2      	b.n	2016 <STACK_SIZE+0x16>
    24b0:	2400      	movs	r4, #0
    24b2:	e7f2      	b.n	249a <STACK_SIZE+0x49a>
    24b4:	000007ff 	.word	0x000007ff
    24b8:	ff7fffff 	.word	0xff7fffff

000024bc <__aeabi_ddiv>:
    24bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    24be:	4657      	mov	r7, sl
    24c0:	4645      	mov	r5, r8
    24c2:	46de      	mov	lr, fp
    24c4:	464e      	mov	r6, r9
    24c6:	b5e0      	push	{r5, r6, r7, lr}
    24c8:	004c      	lsls	r4, r1, #1
    24ca:	030e      	lsls	r6, r1, #12
    24cc:	b087      	sub	sp, #28
    24ce:	4683      	mov	fp, r0
    24d0:	4692      	mov	sl, r2
    24d2:	001d      	movs	r5, r3
    24d4:	4680      	mov	r8, r0
    24d6:	0b36      	lsrs	r6, r6, #12
    24d8:	0d64      	lsrs	r4, r4, #21
    24da:	0fcf      	lsrs	r7, r1, #31
    24dc:	2c00      	cmp	r4, #0
    24de:	d04f      	beq.n	2580 <__aeabi_ddiv+0xc4>
    24e0:	4b6f      	ldr	r3, [pc, #444]	; (26a0 <__aeabi_ddiv+0x1e4>)
    24e2:	429c      	cmp	r4, r3
    24e4:	d035      	beq.n	2552 <__aeabi_ddiv+0x96>
    24e6:	2380      	movs	r3, #128	; 0x80
    24e8:	0f42      	lsrs	r2, r0, #29
    24ea:	041b      	lsls	r3, r3, #16
    24ec:	00f6      	lsls	r6, r6, #3
    24ee:	4313      	orrs	r3, r2
    24f0:	4333      	orrs	r3, r6
    24f2:	4699      	mov	r9, r3
    24f4:	00c3      	lsls	r3, r0, #3
    24f6:	4698      	mov	r8, r3
    24f8:	4b6a      	ldr	r3, [pc, #424]	; (26a4 <__aeabi_ddiv+0x1e8>)
    24fa:	2600      	movs	r6, #0
    24fc:	469c      	mov	ip, r3
    24fe:	2300      	movs	r3, #0
    2500:	4464      	add	r4, ip
    2502:	9303      	str	r3, [sp, #12]
    2504:	032b      	lsls	r3, r5, #12
    2506:	0b1b      	lsrs	r3, r3, #12
    2508:	469b      	mov	fp, r3
    250a:	006b      	lsls	r3, r5, #1
    250c:	0fed      	lsrs	r5, r5, #31
    250e:	4650      	mov	r0, sl
    2510:	0d5b      	lsrs	r3, r3, #21
    2512:	9501      	str	r5, [sp, #4]
    2514:	d05e      	beq.n	25d4 <__aeabi_ddiv+0x118>
    2516:	4a62      	ldr	r2, [pc, #392]	; (26a0 <__aeabi_ddiv+0x1e4>)
    2518:	4293      	cmp	r3, r2
    251a:	d053      	beq.n	25c4 <__aeabi_ddiv+0x108>
    251c:	465a      	mov	r2, fp
    251e:	00d1      	lsls	r1, r2, #3
    2520:	2280      	movs	r2, #128	; 0x80
    2522:	0f40      	lsrs	r0, r0, #29
    2524:	0412      	lsls	r2, r2, #16
    2526:	4302      	orrs	r2, r0
    2528:	430a      	orrs	r2, r1
    252a:	4693      	mov	fp, r2
    252c:	4652      	mov	r2, sl
    252e:	00d1      	lsls	r1, r2, #3
    2530:	4a5c      	ldr	r2, [pc, #368]	; (26a4 <__aeabi_ddiv+0x1e8>)
    2532:	4694      	mov	ip, r2
    2534:	2200      	movs	r2, #0
    2536:	4463      	add	r3, ip
    2538:	0038      	movs	r0, r7
    253a:	4068      	eors	r0, r5
    253c:	4684      	mov	ip, r0
    253e:	9002      	str	r0, [sp, #8]
    2540:	1ae4      	subs	r4, r4, r3
    2542:	4316      	orrs	r6, r2
    2544:	2e0f      	cmp	r6, #15
    2546:	d900      	bls.n	254a <__aeabi_ddiv+0x8e>
    2548:	e0b4      	b.n	26b4 <__aeabi_ddiv+0x1f8>
    254a:	4b57      	ldr	r3, [pc, #348]	; (26a8 <__aeabi_ddiv+0x1ec>)
    254c:	00b6      	lsls	r6, r6, #2
    254e:	599b      	ldr	r3, [r3, r6]
    2550:	469f      	mov	pc, r3
    2552:	0003      	movs	r3, r0
    2554:	4333      	orrs	r3, r6
    2556:	4699      	mov	r9, r3
    2558:	d16c      	bne.n	2634 <__aeabi_ddiv+0x178>
    255a:	2300      	movs	r3, #0
    255c:	4698      	mov	r8, r3
    255e:	3302      	adds	r3, #2
    2560:	2608      	movs	r6, #8
    2562:	9303      	str	r3, [sp, #12]
    2564:	e7ce      	b.n	2504 <__aeabi_ddiv+0x48>
    2566:	46cb      	mov	fp, r9
    2568:	4641      	mov	r1, r8
    256a:	9a03      	ldr	r2, [sp, #12]
    256c:	9701      	str	r7, [sp, #4]
    256e:	2a02      	cmp	r2, #2
    2570:	d165      	bne.n	263e <__aeabi_ddiv+0x182>
    2572:	9b01      	ldr	r3, [sp, #4]
    2574:	4c4a      	ldr	r4, [pc, #296]	; (26a0 <__aeabi_ddiv+0x1e4>)
    2576:	469c      	mov	ip, r3
    2578:	2300      	movs	r3, #0
    257a:	2200      	movs	r2, #0
    257c:	4698      	mov	r8, r3
    257e:	e06b      	b.n	2658 <__aeabi_ddiv+0x19c>
    2580:	0003      	movs	r3, r0
    2582:	4333      	orrs	r3, r6
    2584:	4699      	mov	r9, r3
    2586:	d04e      	beq.n	2626 <__aeabi_ddiv+0x16a>
    2588:	2e00      	cmp	r6, #0
    258a:	d100      	bne.n	258e <__aeabi_ddiv+0xd2>
    258c:	e1bc      	b.n	2908 <__aeabi_ddiv+0x44c>
    258e:	0030      	movs	r0, r6
    2590:	f001 f8ca 	bl	3728 <__clzsi2>
    2594:	0003      	movs	r3, r0
    2596:	3b0b      	subs	r3, #11
    2598:	2b1c      	cmp	r3, #28
    259a:	dd00      	ble.n	259e <__aeabi_ddiv+0xe2>
    259c:	e1ac      	b.n	28f8 <__aeabi_ddiv+0x43c>
    259e:	221d      	movs	r2, #29
    25a0:	1ad3      	subs	r3, r2, r3
    25a2:	465a      	mov	r2, fp
    25a4:	0001      	movs	r1, r0
    25a6:	40da      	lsrs	r2, r3
    25a8:	3908      	subs	r1, #8
    25aa:	408e      	lsls	r6, r1
    25ac:	0013      	movs	r3, r2
    25ae:	4333      	orrs	r3, r6
    25b0:	4699      	mov	r9, r3
    25b2:	465b      	mov	r3, fp
    25b4:	408b      	lsls	r3, r1
    25b6:	4698      	mov	r8, r3
    25b8:	2300      	movs	r3, #0
    25ba:	4c3c      	ldr	r4, [pc, #240]	; (26ac <__aeabi_ddiv+0x1f0>)
    25bc:	2600      	movs	r6, #0
    25be:	1a24      	subs	r4, r4, r0
    25c0:	9303      	str	r3, [sp, #12]
    25c2:	e79f      	b.n	2504 <__aeabi_ddiv+0x48>
    25c4:	4651      	mov	r1, sl
    25c6:	465a      	mov	r2, fp
    25c8:	4311      	orrs	r1, r2
    25ca:	d129      	bne.n	2620 <__aeabi_ddiv+0x164>
    25cc:	2200      	movs	r2, #0
    25ce:	4693      	mov	fp, r2
    25d0:	3202      	adds	r2, #2
    25d2:	e7b1      	b.n	2538 <__aeabi_ddiv+0x7c>
    25d4:	4659      	mov	r1, fp
    25d6:	4301      	orrs	r1, r0
    25d8:	d01e      	beq.n	2618 <__aeabi_ddiv+0x15c>
    25da:	465b      	mov	r3, fp
    25dc:	2b00      	cmp	r3, #0
    25de:	d100      	bne.n	25e2 <__aeabi_ddiv+0x126>
    25e0:	e19e      	b.n	2920 <__aeabi_ddiv+0x464>
    25e2:	4658      	mov	r0, fp
    25e4:	f001 f8a0 	bl	3728 <__clzsi2>
    25e8:	0003      	movs	r3, r0
    25ea:	3b0b      	subs	r3, #11
    25ec:	2b1c      	cmp	r3, #28
    25ee:	dd00      	ble.n	25f2 <__aeabi_ddiv+0x136>
    25f0:	e18f      	b.n	2912 <__aeabi_ddiv+0x456>
    25f2:	0002      	movs	r2, r0
    25f4:	4659      	mov	r1, fp
    25f6:	3a08      	subs	r2, #8
    25f8:	4091      	lsls	r1, r2
    25fa:	468b      	mov	fp, r1
    25fc:	211d      	movs	r1, #29
    25fe:	1acb      	subs	r3, r1, r3
    2600:	4651      	mov	r1, sl
    2602:	40d9      	lsrs	r1, r3
    2604:	000b      	movs	r3, r1
    2606:	4659      	mov	r1, fp
    2608:	430b      	orrs	r3, r1
    260a:	4651      	mov	r1, sl
    260c:	469b      	mov	fp, r3
    260e:	4091      	lsls	r1, r2
    2610:	4b26      	ldr	r3, [pc, #152]	; (26ac <__aeabi_ddiv+0x1f0>)
    2612:	2200      	movs	r2, #0
    2614:	1a1b      	subs	r3, r3, r0
    2616:	e78f      	b.n	2538 <__aeabi_ddiv+0x7c>
    2618:	2300      	movs	r3, #0
    261a:	2201      	movs	r2, #1
    261c:	469b      	mov	fp, r3
    261e:	e78b      	b.n	2538 <__aeabi_ddiv+0x7c>
    2620:	4651      	mov	r1, sl
    2622:	2203      	movs	r2, #3
    2624:	e788      	b.n	2538 <__aeabi_ddiv+0x7c>
    2626:	2300      	movs	r3, #0
    2628:	4698      	mov	r8, r3
    262a:	3301      	adds	r3, #1
    262c:	2604      	movs	r6, #4
    262e:	2400      	movs	r4, #0
    2630:	9303      	str	r3, [sp, #12]
    2632:	e767      	b.n	2504 <__aeabi_ddiv+0x48>
    2634:	2303      	movs	r3, #3
    2636:	46b1      	mov	r9, r6
    2638:	9303      	str	r3, [sp, #12]
    263a:	260c      	movs	r6, #12
    263c:	e762      	b.n	2504 <__aeabi_ddiv+0x48>
    263e:	2a03      	cmp	r2, #3
    2640:	d100      	bne.n	2644 <__aeabi_ddiv+0x188>
    2642:	e25c      	b.n	2afe <__aeabi_ddiv+0x642>
    2644:	9b01      	ldr	r3, [sp, #4]
    2646:	2a01      	cmp	r2, #1
    2648:	d000      	beq.n	264c <__aeabi_ddiv+0x190>
    264a:	e1e4      	b.n	2a16 <__aeabi_ddiv+0x55a>
    264c:	4013      	ands	r3, r2
    264e:	469c      	mov	ip, r3
    2650:	2300      	movs	r3, #0
    2652:	2400      	movs	r4, #0
    2654:	2200      	movs	r2, #0
    2656:	4698      	mov	r8, r3
    2658:	2100      	movs	r1, #0
    265a:	0312      	lsls	r2, r2, #12
    265c:	0b13      	lsrs	r3, r2, #12
    265e:	0d0a      	lsrs	r2, r1, #20
    2660:	0512      	lsls	r2, r2, #20
    2662:	431a      	orrs	r2, r3
    2664:	0523      	lsls	r3, r4, #20
    2666:	4c12      	ldr	r4, [pc, #72]	; (26b0 <__aeabi_ddiv+0x1f4>)
    2668:	4640      	mov	r0, r8
    266a:	4022      	ands	r2, r4
    266c:	4313      	orrs	r3, r2
    266e:	4662      	mov	r2, ip
    2670:	005b      	lsls	r3, r3, #1
    2672:	07d2      	lsls	r2, r2, #31
    2674:	085b      	lsrs	r3, r3, #1
    2676:	4313      	orrs	r3, r2
    2678:	0019      	movs	r1, r3
    267a:	b007      	add	sp, #28
    267c:	bc3c      	pop	{r2, r3, r4, r5}
    267e:	4690      	mov	r8, r2
    2680:	4699      	mov	r9, r3
    2682:	46a2      	mov	sl, r4
    2684:	46ab      	mov	fp, r5
    2686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2688:	2300      	movs	r3, #0
    268a:	2280      	movs	r2, #128	; 0x80
    268c:	469c      	mov	ip, r3
    268e:	0312      	lsls	r2, r2, #12
    2690:	4698      	mov	r8, r3
    2692:	4c03      	ldr	r4, [pc, #12]	; (26a0 <__aeabi_ddiv+0x1e4>)
    2694:	e7e0      	b.n	2658 <__aeabi_ddiv+0x19c>
    2696:	2300      	movs	r3, #0
    2698:	4c01      	ldr	r4, [pc, #4]	; (26a0 <__aeabi_ddiv+0x1e4>)
    269a:	2200      	movs	r2, #0
    269c:	4698      	mov	r8, r3
    269e:	e7db      	b.n	2658 <__aeabi_ddiv+0x19c>
    26a0:	000007ff 	.word	0x000007ff
    26a4:	fffffc01 	.word	0xfffffc01
    26a8:	000048e8 	.word	0x000048e8
    26ac:	fffffc0d 	.word	0xfffffc0d
    26b0:	800fffff 	.word	0x800fffff
    26b4:	45d9      	cmp	r9, fp
    26b6:	d900      	bls.n	26ba <__aeabi_ddiv+0x1fe>
    26b8:	e139      	b.n	292e <__aeabi_ddiv+0x472>
    26ba:	d100      	bne.n	26be <__aeabi_ddiv+0x202>
    26bc:	e134      	b.n	2928 <__aeabi_ddiv+0x46c>
    26be:	2300      	movs	r3, #0
    26c0:	4646      	mov	r6, r8
    26c2:	464d      	mov	r5, r9
    26c4:	469a      	mov	sl, r3
    26c6:	3c01      	subs	r4, #1
    26c8:	465b      	mov	r3, fp
    26ca:	0e0a      	lsrs	r2, r1, #24
    26cc:	021b      	lsls	r3, r3, #8
    26ce:	431a      	orrs	r2, r3
    26d0:	020b      	lsls	r3, r1, #8
    26d2:	0c17      	lsrs	r7, r2, #16
    26d4:	9303      	str	r3, [sp, #12]
    26d6:	0413      	lsls	r3, r2, #16
    26d8:	0c1b      	lsrs	r3, r3, #16
    26da:	0039      	movs	r1, r7
    26dc:	0028      	movs	r0, r5
    26de:	4690      	mov	r8, r2
    26e0:	9301      	str	r3, [sp, #4]
    26e2:	f7ff fb25 	bl	1d30 <__udivsi3>
    26e6:	0002      	movs	r2, r0
    26e8:	9b01      	ldr	r3, [sp, #4]
    26ea:	4683      	mov	fp, r0
    26ec:	435a      	muls	r2, r3
    26ee:	0028      	movs	r0, r5
    26f0:	0039      	movs	r1, r7
    26f2:	4691      	mov	r9, r2
    26f4:	f7ff fba2 	bl	1e3c <__aeabi_uidivmod>
    26f8:	0c35      	lsrs	r5, r6, #16
    26fa:	0409      	lsls	r1, r1, #16
    26fc:	430d      	orrs	r5, r1
    26fe:	45a9      	cmp	r9, r5
    2700:	d90d      	bls.n	271e <__aeabi_ddiv+0x262>
    2702:	465b      	mov	r3, fp
    2704:	4445      	add	r5, r8
    2706:	3b01      	subs	r3, #1
    2708:	45a8      	cmp	r8, r5
    270a:	d900      	bls.n	270e <__aeabi_ddiv+0x252>
    270c:	e13a      	b.n	2984 <__aeabi_ddiv+0x4c8>
    270e:	45a9      	cmp	r9, r5
    2710:	d800      	bhi.n	2714 <__aeabi_ddiv+0x258>
    2712:	e137      	b.n	2984 <__aeabi_ddiv+0x4c8>
    2714:	2302      	movs	r3, #2
    2716:	425b      	negs	r3, r3
    2718:	469c      	mov	ip, r3
    271a:	4445      	add	r5, r8
    271c:	44e3      	add	fp, ip
    271e:	464b      	mov	r3, r9
    2720:	1aeb      	subs	r3, r5, r3
    2722:	0039      	movs	r1, r7
    2724:	0018      	movs	r0, r3
    2726:	9304      	str	r3, [sp, #16]
    2728:	f7ff fb02 	bl	1d30 <__udivsi3>
    272c:	9b01      	ldr	r3, [sp, #4]
    272e:	0005      	movs	r5, r0
    2730:	4343      	muls	r3, r0
    2732:	0039      	movs	r1, r7
    2734:	9804      	ldr	r0, [sp, #16]
    2736:	4699      	mov	r9, r3
    2738:	f7ff fb80 	bl	1e3c <__aeabi_uidivmod>
    273c:	0433      	lsls	r3, r6, #16
    273e:	0409      	lsls	r1, r1, #16
    2740:	0c1b      	lsrs	r3, r3, #16
    2742:	430b      	orrs	r3, r1
    2744:	4599      	cmp	r9, r3
    2746:	d909      	bls.n	275c <__aeabi_ddiv+0x2a0>
    2748:	4443      	add	r3, r8
    274a:	1e6a      	subs	r2, r5, #1
    274c:	4598      	cmp	r8, r3
    274e:	d900      	bls.n	2752 <__aeabi_ddiv+0x296>
    2750:	e11a      	b.n	2988 <__aeabi_ddiv+0x4cc>
    2752:	4599      	cmp	r9, r3
    2754:	d800      	bhi.n	2758 <__aeabi_ddiv+0x29c>
    2756:	e117      	b.n	2988 <__aeabi_ddiv+0x4cc>
    2758:	3d02      	subs	r5, #2
    275a:	4443      	add	r3, r8
    275c:	464a      	mov	r2, r9
    275e:	1a9b      	subs	r3, r3, r2
    2760:	465a      	mov	r2, fp
    2762:	0412      	lsls	r2, r2, #16
    2764:	432a      	orrs	r2, r5
    2766:	9903      	ldr	r1, [sp, #12]
    2768:	4693      	mov	fp, r2
    276a:	0c10      	lsrs	r0, r2, #16
    276c:	0c0a      	lsrs	r2, r1, #16
    276e:	4691      	mov	r9, r2
    2770:	0409      	lsls	r1, r1, #16
    2772:	465a      	mov	r2, fp
    2774:	0c09      	lsrs	r1, r1, #16
    2776:	464e      	mov	r6, r9
    2778:	000d      	movs	r5, r1
    277a:	0412      	lsls	r2, r2, #16
    277c:	0c12      	lsrs	r2, r2, #16
    277e:	4345      	muls	r5, r0
    2780:	9105      	str	r1, [sp, #20]
    2782:	4351      	muls	r1, r2
    2784:	4372      	muls	r2, r6
    2786:	4370      	muls	r0, r6
    2788:	1952      	adds	r2, r2, r5
    278a:	0c0e      	lsrs	r6, r1, #16
    278c:	18b2      	adds	r2, r6, r2
    278e:	4295      	cmp	r5, r2
    2790:	d903      	bls.n	279a <__aeabi_ddiv+0x2de>
    2792:	2580      	movs	r5, #128	; 0x80
    2794:	026d      	lsls	r5, r5, #9
    2796:	46ac      	mov	ip, r5
    2798:	4460      	add	r0, ip
    279a:	0c15      	lsrs	r5, r2, #16
    279c:	0409      	lsls	r1, r1, #16
    279e:	0412      	lsls	r2, r2, #16
    27a0:	0c09      	lsrs	r1, r1, #16
    27a2:	1828      	adds	r0, r5, r0
    27a4:	1852      	adds	r2, r2, r1
    27a6:	4283      	cmp	r3, r0
    27a8:	d200      	bcs.n	27ac <__aeabi_ddiv+0x2f0>
    27aa:	e0ce      	b.n	294a <__aeabi_ddiv+0x48e>
    27ac:	d100      	bne.n	27b0 <__aeabi_ddiv+0x2f4>
    27ae:	e0c8      	b.n	2942 <__aeabi_ddiv+0x486>
    27b0:	1a1d      	subs	r5, r3, r0
    27b2:	4653      	mov	r3, sl
    27b4:	1a9e      	subs	r6, r3, r2
    27b6:	45b2      	cmp	sl, r6
    27b8:	4192      	sbcs	r2, r2
    27ba:	4252      	negs	r2, r2
    27bc:	1aab      	subs	r3, r5, r2
    27be:	469a      	mov	sl, r3
    27c0:	4598      	cmp	r8, r3
    27c2:	d100      	bne.n	27c6 <__aeabi_ddiv+0x30a>
    27c4:	e117      	b.n	29f6 <__aeabi_ddiv+0x53a>
    27c6:	0039      	movs	r1, r7
    27c8:	0018      	movs	r0, r3
    27ca:	f7ff fab1 	bl	1d30 <__udivsi3>
    27ce:	9b01      	ldr	r3, [sp, #4]
    27d0:	0005      	movs	r5, r0
    27d2:	4343      	muls	r3, r0
    27d4:	0039      	movs	r1, r7
    27d6:	4650      	mov	r0, sl
    27d8:	9304      	str	r3, [sp, #16]
    27da:	f7ff fb2f 	bl	1e3c <__aeabi_uidivmod>
    27de:	9804      	ldr	r0, [sp, #16]
    27e0:	040b      	lsls	r3, r1, #16
    27e2:	0c31      	lsrs	r1, r6, #16
    27e4:	4319      	orrs	r1, r3
    27e6:	4288      	cmp	r0, r1
    27e8:	d909      	bls.n	27fe <__aeabi_ddiv+0x342>
    27ea:	4441      	add	r1, r8
    27ec:	1e6b      	subs	r3, r5, #1
    27ee:	4588      	cmp	r8, r1
    27f0:	d900      	bls.n	27f4 <__aeabi_ddiv+0x338>
    27f2:	e107      	b.n	2a04 <__aeabi_ddiv+0x548>
    27f4:	4288      	cmp	r0, r1
    27f6:	d800      	bhi.n	27fa <__aeabi_ddiv+0x33e>
    27f8:	e104      	b.n	2a04 <__aeabi_ddiv+0x548>
    27fa:	3d02      	subs	r5, #2
    27fc:	4441      	add	r1, r8
    27fe:	9b04      	ldr	r3, [sp, #16]
    2800:	1acb      	subs	r3, r1, r3
    2802:	0018      	movs	r0, r3
    2804:	0039      	movs	r1, r7
    2806:	9304      	str	r3, [sp, #16]
    2808:	f7ff fa92 	bl	1d30 <__udivsi3>
    280c:	9b01      	ldr	r3, [sp, #4]
    280e:	4682      	mov	sl, r0
    2810:	4343      	muls	r3, r0
    2812:	0039      	movs	r1, r7
    2814:	9804      	ldr	r0, [sp, #16]
    2816:	9301      	str	r3, [sp, #4]
    2818:	f7ff fb10 	bl	1e3c <__aeabi_uidivmod>
    281c:	9801      	ldr	r0, [sp, #4]
    281e:	040b      	lsls	r3, r1, #16
    2820:	0431      	lsls	r1, r6, #16
    2822:	0c09      	lsrs	r1, r1, #16
    2824:	4319      	orrs	r1, r3
    2826:	4288      	cmp	r0, r1
    2828:	d90d      	bls.n	2846 <__aeabi_ddiv+0x38a>
    282a:	4653      	mov	r3, sl
    282c:	4441      	add	r1, r8
    282e:	3b01      	subs	r3, #1
    2830:	4588      	cmp	r8, r1
    2832:	d900      	bls.n	2836 <__aeabi_ddiv+0x37a>
    2834:	e0e8      	b.n	2a08 <__aeabi_ddiv+0x54c>
    2836:	4288      	cmp	r0, r1
    2838:	d800      	bhi.n	283c <__aeabi_ddiv+0x380>
    283a:	e0e5      	b.n	2a08 <__aeabi_ddiv+0x54c>
    283c:	2302      	movs	r3, #2
    283e:	425b      	negs	r3, r3
    2840:	469c      	mov	ip, r3
    2842:	4441      	add	r1, r8
    2844:	44e2      	add	sl, ip
    2846:	9b01      	ldr	r3, [sp, #4]
    2848:	042d      	lsls	r5, r5, #16
    284a:	1ace      	subs	r6, r1, r3
    284c:	4651      	mov	r1, sl
    284e:	4329      	orrs	r1, r5
    2850:	9d05      	ldr	r5, [sp, #20]
    2852:	464f      	mov	r7, r9
    2854:	002a      	movs	r2, r5
    2856:	040b      	lsls	r3, r1, #16
    2858:	0c08      	lsrs	r0, r1, #16
    285a:	0c1b      	lsrs	r3, r3, #16
    285c:	435a      	muls	r2, r3
    285e:	4345      	muls	r5, r0
    2860:	437b      	muls	r3, r7
    2862:	4378      	muls	r0, r7
    2864:	195b      	adds	r3, r3, r5
    2866:	0c17      	lsrs	r7, r2, #16
    2868:	18fb      	adds	r3, r7, r3
    286a:	429d      	cmp	r5, r3
    286c:	d903      	bls.n	2876 <__aeabi_ddiv+0x3ba>
    286e:	2580      	movs	r5, #128	; 0x80
    2870:	026d      	lsls	r5, r5, #9
    2872:	46ac      	mov	ip, r5
    2874:	4460      	add	r0, ip
    2876:	0c1d      	lsrs	r5, r3, #16
    2878:	0412      	lsls	r2, r2, #16
    287a:	041b      	lsls	r3, r3, #16
    287c:	0c12      	lsrs	r2, r2, #16
    287e:	1828      	adds	r0, r5, r0
    2880:	189b      	adds	r3, r3, r2
    2882:	4286      	cmp	r6, r0
    2884:	d200      	bcs.n	2888 <__aeabi_ddiv+0x3cc>
    2886:	e093      	b.n	29b0 <__aeabi_ddiv+0x4f4>
    2888:	d100      	bne.n	288c <__aeabi_ddiv+0x3d0>
    288a:	e08e      	b.n	29aa <__aeabi_ddiv+0x4ee>
    288c:	2301      	movs	r3, #1
    288e:	4319      	orrs	r1, r3
    2890:	4ba0      	ldr	r3, [pc, #640]	; (2b14 <__aeabi_ddiv+0x658>)
    2892:	18e3      	adds	r3, r4, r3
    2894:	2b00      	cmp	r3, #0
    2896:	dc00      	bgt.n	289a <__aeabi_ddiv+0x3de>
    2898:	e099      	b.n	29ce <__aeabi_ddiv+0x512>
    289a:	074a      	lsls	r2, r1, #29
    289c:	d000      	beq.n	28a0 <__aeabi_ddiv+0x3e4>
    289e:	e09e      	b.n	29de <__aeabi_ddiv+0x522>
    28a0:	465a      	mov	r2, fp
    28a2:	01d2      	lsls	r2, r2, #7
    28a4:	d506      	bpl.n	28b4 <__aeabi_ddiv+0x3f8>
    28a6:	465a      	mov	r2, fp
    28a8:	4b9b      	ldr	r3, [pc, #620]	; (2b18 <__aeabi_ddiv+0x65c>)
    28aa:	401a      	ands	r2, r3
    28ac:	2380      	movs	r3, #128	; 0x80
    28ae:	4693      	mov	fp, r2
    28b0:	00db      	lsls	r3, r3, #3
    28b2:	18e3      	adds	r3, r4, r3
    28b4:	4a99      	ldr	r2, [pc, #612]	; (2b1c <__aeabi_ddiv+0x660>)
    28b6:	4293      	cmp	r3, r2
    28b8:	dd68      	ble.n	298c <__aeabi_ddiv+0x4d0>
    28ba:	2301      	movs	r3, #1
    28bc:	9a02      	ldr	r2, [sp, #8]
    28be:	4c98      	ldr	r4, [pc, #608]	; (2b20 <__aeabi_ddiv+0x664>)
    28c0:	401a      	ands	r2, r3
    28c2:	2300      	movs	r3, #0
    28c4:	4694      	mov	ip, r2
    28c6:	4698      	mov	r8, r3
    28c8:	2200      	movs	r2, #0
    28ca:	e6c5      	b.n	2658 <__aeabi_ddiv+0x19c>
    28cc:	2280      	movs	r2, #128	; 0x80
    28ce:	464b      	mov	r3, r9
    28d0:	0312      	lsls	r2, r2, #12
    28d2:	4213      	tst	r3, r2
    28d4:	d00a      	beq.n	28ec <__aeabi_ddiv+0x430>
    28d6:	465b      	mov	r3, fp
    28d8:	4213      	tst	r3, r2
    28da:	d106      	bne.n	28ea <__aeabi_ddiv+0x42e>
    28dc:	431a      	orrs	r2, r3
    28de:	0312      	lsls	r2, r2, #12
    28e0:	0b12      	lsrs	r2, r2, #12
    28e2:	46ac      	mov	ip, r5
    28e4:	4688      	mov	r8, r1
    28e6:	4c8e      	ldr	r4, [pc, #568]	; (2b20 <__aeabi_ddiv+0x664>)
    28e8:	e6b6      	b.n	2658 <__aeabi_ddiv+0x19c>
    28ea:	464b      	mov	r3, r9
    28ec:	431a      	orrs	r2, r3
    28ee:	0312      	lsls	r2, r2, #12
    28f0:	0b12      	lsrs	r2, r2, #12
    28f2:	46bc      	mov	ip, r7
    28f4:	4c8a      	ldr	r4, [pc, #552]	; (2b20 <__aeabi_ddiv+0x664>)
    28f6:	e6af      	b.n	2658 <__aeabi_ddiv+0x19c>
    28f8:	0003      	movs	r3, r0
    28fa:	465a      	mov	r2, fp
    28fc:	3b28      	subs	r3, #40	; 0x28
    28fe:	409a      	lsls	r2, r3
    2900:	2300      	movs	r3, #0
    2902:	4691      	mov	r9, r2
    2904:	4698      	mov	r8, r3
    2906:	e657      	b.n	25b8 <__aeabi_ddiv+0xfc>
    2908:	4658      	mov	r0, fp
    290a:	f000 ff0d 	bl	3728 <__clzsi2>
    290e:	3020      	adds	r0, #32
    2910:	e640      	b.n	2594 <__aeabi_ddiv+0xd8>
    2912:	0003      	movs	r3, r0
    2914:	4652      	mov	r2, sl
    2916:	3b28      	subs	r3, #40	; 0x28
    2918:	409a      	lsls	r2, r3
    291a:	2100      	movs	r1, #0
    291c:	4693      	mov	fp, r2
    291e:	e677      	b.n	2610 <__aeabi_ddiv+0x154>
    2920:	f000 ff02 	bl	3728 <__clzsi2>
    2924:	3020      	adds	r0, #32
    2926:	e65f      	b.n	25e8 <__aeabi_ddiv+0x12c>
    2928:	4588      	cmp	r8, r1
    292a:	d200      	bcs.n	292e <__aeabi_ddiv+0x472>
    292c:	e6c7      	b.n	26be <__aeabi_ddiv+0x202>
    292e:	464b      	mov	r3, r9
    2930:	07de      	lsls	r6, r3, #31
    2932:	085d      	lsrs	r5, r3, #1
    2934:	4643      	mov	r3, r8
    2936:	085b      	lsrs	r3, r3, #1
    2938:	431e      	orrs	r6, r3
    293a:	4643      	mov	r3, r8
    293c:	07db      	lsls	r3, r3, #31
    293e:	469a      	mov	sl, r3
    2940:	e6c2      	b.n	26c8 <__aeabi_ddiv+0x20c>
    2942:	2500      	movs	r5, #0
    2944:	4592      	cmp	sl, r2
    2946:	d300      	bcc.n	294a <__aeabi_ddiv+0x48e>
    2948:	e733      	b.n	27b2 <__aeabi_ddiv+0x2f6>
    294a:	9e03      	ldr	r6, [sp, #12]
    294c:	4659      	mov	r1, fp
    294e:	46b4      	mov	ip, r6
    2950:	44e2      	add	sl, ip
    2952:	45b2      	cmp	sl, r6
    2954:	41ad      	sbcs	r5, r5
    2956:	426d      	negs	r5, r5
    2958:	4445      	add	r5, r8
    295a:	18eb      	adds	r3, r5, r3
    295c:	3901      	subs	r1, #1
    295e:	4598      	cmp	r8, r3
    2960:	d207      	bcs.n	2972 <__aeabi_ddiv+0x4b6>
    2962:	4298      	cmp	r0, r3
    2964:	d900      	bls.n	2968 <__aeabi_ddiv+0x4ac>
    2966:	e07f      	b.n	2a68 <__aeabi_ddiv+0x5ac>
    2968:	d100      	bne.n	296c <__aeabi_ddiv+0x4b0>
    296a:	e0bc      	b.n	2ae6 <__aeabi_ddiv+0x62a>
    296c:	1a1d      	subs	r5, r3, r0
    296e:	468b      	mov	fp, r1
    2970:	e71f      	b.n	27b2 <__aeabi_ddiv+0x2f6>
    2972:	4598      	cmp	r8, r3
    2974:	d1fa      	bne.n	296c <__aeabi_ddiv+0x4b0>
    2976:	9d03      	ldr	r5, [sp, #12]
    2978:	4555      	cmp	r5, sl
    297a:	d9f2      	bls.n	2962 <__aeabi_ddiv+0x4a6>
    297c:	4643      	mov	r3, r8
    297e:	468b      	mov	fp, r1
    2980:	1a1d      	subs	r5, r3, r0
    2982:	e716      	b.n	27b2 <__aeabi_ddiv+0x2f6>
    2984:	469b      	mov	fp, r3
    2986:	e6ca      	b.n	271e <__aeabi_ddiv+0x262>
    2988:	0015      	movs	r5, r2
    298a:	e6e7      	b.n	275c <__aeabi_ddiv+0x2a0>
    298c:	465a      	mov	r2, fp
    298e:	08c9      	lsrs	r1, r1, #3
    2990:	0752      	lsls	r2, r2, #29
    2992:	430a      	orrs	r2, r1
    2994:	055b      	lsls	r3, r3, #21
    2996:	4690      	mov	r8, r2
    2998:	0d5c      	lsrs	r4, r3, #21
    299a:	465a      	mov	r2, fp
    299c:	2301      	movs	r3, #1
    299e:	9902      	ldr	r1, [sp, #8]
    29a0:	0252      	lsls	r2, r2, #9
    29a2:	4019      	ands	r1, r3
    29a4:	0b12      	lsrs	r2, r2, #12
    29a6:	468c      	mov	ip, r1
    29a8:	e656      	b.n	2658 <__aeabi_ddiv+0x19c>
    29aa:	2b00      	cmp	r3, #0
    29ac:	d100      	bne.n	29b0 <__aeabi_ddiv+0x4f4>
    29ae:	e76f      	b.n	2890 <__aeabi_ddiv+0x3d4>
    29b0:	4446      	add	r6, r8
    29b2:	1e4a      	subs	r2, r1, #1
    29b4:	45b0      	cmp	r8, r6
    29b6:	d929      	bls.n	2a0c <__aeabi_ddiv+0x550>
    29b8:	0011      	movs	r1, r2
    29ba:	4286      	cmp	r6, r0
    29bc:	d000      	beq.n	29c0 <__aeabi_ddiv+0x504>
    29be:	e765      	b.n	288c <__aeabi_ddiv+0x3d0>
    29c0:	9a03      	ldr	r2, [sp, #12]
    29c2:	4293      	cmp	r3, r2
    29c4:	d000      	beq.n	29c8 <__aeabi_ddiv+0x50c>
    29c6:	e761      	b.n	288c <__aeabi_ddiv+0x3d0>
    29c8:	e762      	b.n	2890 <__aeabi_ddiv+0x3d4>
    29ca:	2101      	movs	r1, #1
    29cc:	4249      	negs	r1, r1
    29ce:	2001      	movs	r0, #1
    29d0:	1ac2      	subs	r2, r0, r3
    29d2:	2a38      	cmp	r2, #56	; 0x38
    29d4:	dd21      	ble.n	2a1a <__aeabi_ddiv+0x55e>
    29d6:	9b02      	ldr	r3, [sp, #8]
    29d8:	4003      	ands	r3, r0
    29da:	469c      	mov	ip, r3
    29dc:	e638      	b.n	2650 <__aeabi_ddiv+0x194>
    29de:	220f      	movs	r2, #15
    29e0:	400a      	ands	r2, r1
    29e2:	2a04      	cmp	r2, #4
    29e4:	d100      	bne.n	29e8 <__aeabi_ddiv+0x52c>
    29e6:	e75b      	b.n	28a0 <__aeabi_ddiv+0x3e4>
    29e8:	000a      	movs	r2, r1
    29ea:	1d11      	adds	r1, r2, #4
    29ec:	4291      	cmp	r1, r2
    29ee:	4192      	sbcs	r2, r2
    29f0:	4252      	negs	r2, r2
    29f2:	4493      	add	fp, r2
    29f4:	e754      	b.n	28a0 <__aeabi_ddiv+0x3e4>
    29f6:	4b47      	ldr	r3, [pc, #284]	; (2b14 <__aeabi_ddiv+0x658>)
    29f8:	18e3      	adds	r3, r4, r3
    29fa:	2b00      	cmp	r3, #0
    29fc:	dde5      	ble.n	29ca <__aeabi_ddiv+0x50e>
    29fe:	2201      	movs	r2, #1
    2a00:	4252      	negs	r2, r2
    2a02:	e7f2      	b.n	29ea <__aeabi_ddiv+0x52e>
    2a04:	001d      	movs	r5, r3
    2a06:	e6fa      	b.n	27fe <__aeabi_ddiv+0x342>
    2a08:	469a      	mov	sl, r3
    2a0a:	e71c      	b.n	2846 <__aeabi_ddiv+0x38a>
    2a0c:	42b0      	cmp	r0, r6
    2a0e:	d839      	bhi.n	2a84 <__aeabi_ddiv+0x5c8>
    2a10:	d06e      	beq.n	2af0 <__aeabi_ddiv+0x634>
    2a12:	0011      	movs	r1, r2
    2a14:	e73a      	b.n	288c <__aeabi_ddiv+0x3d0>
    2a16:	9302      	str	r3, [sp, #8]
    2a18:	e73a      	b.n	2890 <__aeabi_ddiv+0x3d4>
    2a1a:	2a1f      	cmp	r2, #31
    2a1c:	dc3c      	bgt.n	2a98 <__aeabi_ddiv+0x5dc>
    2a1e:	2320      	movs	r3, #32
    2a20:	1a9b      	subs	r3, r3, r2
    2a22:	000c      	movs	r4, r1
    2a24:	4658      	mov	r0, fp
    2a26:	4099      	lsls	r1, r3
    2a28:	4098      	lsls	r0, r3
    2a2a:	1e4b      	subs	r3, r1, #1
    2a2c:	4199      	sbcs	r1, r3
    2a2e:	465b      	mov	r3, fp
    2a30:	40d4      	lsrs	r4, r2
    2a32:	40d3      	lsrs	r3, r2
    2a34:	4320      	orrs	r0, r4
    2a36:	4308      	orrs	r0, r1
    2a38:	001a      	movs	r2, r3
    2a3a:	0743      	lsls	r3, r0, #29
    2a3c:	d009      	beq.n	2a52 <__aeabi_ddiv+0x596>
    2a3e:	230f      	movs	r3, #15
    2a40:	4003      	ands	r3, r0
    2a42:	2b04      	cmp	r3, #4
    2a44:	d005      	beq.n	2a52 <__aeabi_ddiv+0x596>
    2a46:	0001      	movs	r1, r0
    2a48:	1d08      	adds	r0, r1, #4
    2a4a:	4288      	cmp	r0, r1
    2a4c:	419b      	sbcs	r3, r3
    2a4e:	425b      	negs	r3, r3
    2a50:	18d2      	adds	r2, r2, r3
    2a52:	0213      	lsls	r3, r2, #8
    2a54:	d53a      	bpl.n	2acc <__aeabi_ddiv+0x610>
    2a56:	2301      	movs	r3, #1
    2a58:	9a02      	ldr	r2, [sp, #8]
    2a5a:	2401      	movs	r4, #1
    2a5c:	401a      	ands	r2, r3
    2a5e:	2300      	movs	r3, #0
    2a60:	4694      	mov	ip, r2
    2a62:	4698      	mov	r8, r3
    2a64:	2200      	movs	r2, #0
    2a66:	e5f7      	b.n	2658 <__aeabi_ddiv+0x19c>
    2a68:	2102      	movs	r1, #2
    2a6a:	4249      	negs	r1, r1
    2a6c:	468c      	mov	ip, r1
    2a6e:	9d03      	ldr	r5, [sp, #12]
    2a70:	44e3      	add	fp, ip
    2a72:	46ac      	mov	ip, r5
    2a74:	44e2      	add	sl, ip
    2a76:	45aa      	cmp	sl, r5
    2a78:	41ad      	sbcs	r5, r5
    2a7a:	426d      	negs	r5, r5
    2a7c:	4445      	add	r5, r8
    2a7e:	18ed      	adds	r5, r5, r3
    2a80:	1a2d      	subs	r5, r5, r0
    2a82:	e696      	b.n	27b2 <__aeabi_ddiv+0x2f6>
    2a84:	1e8a      	subs	r2, r1, #2
    2a86:	9903      	ldr	r1, [sp, #12]
    2a88:	004d      	lsls	r5, r1, #1
    2a8a:	428d      	cmp	r5, r1
    2a8c:	4189      	sbcs	r1, r1
    2a8e:	4249      	negs	r1, r1
    2a90:	4441      	add	r1, r8
    2a92:	1876      	adds	r6, r6, r1
    2a94:	9503      	str	r5, [sp, #12]
    2a96:	e78f      	b.n	29b8 <__aeabi_ddiv+0x4fc>
    2a98:	201f      	movs	r0, #31
    2a9a:	4240      	negs	r0, r0
    2a9c:	1ac3      	subs	r3, r0, r3
    2a9e:	4658      	mov	r0, fp
    2aa0:	40d8      	lsrs	r0, r3
    2aa2:	0003      	movs	r3, r0
    2aa4:	2a20      	cmp	r2, #32
    2aa6:	d028      	beq.n	2afa <__aeabi_ddiv+0x63e>
    2aa8:	2040      	movs	r0, #64	; 0x40
    2aaa:	465d      	mov	r5, fp
    2aac:	1a82      	subs	r2, r0, r2
    2aae:	4095      	lsls	r5, r2
    2ab0:	4329      	orrs	r1, r5
    2ab2:	1e4a      	subs	r2, r1, #1
    2ab4:	4191      	sbcs	r1, r2
    2ab6:	4319      	orrs	r1, r3
    2ab8:	2307      	movs	r3, #7
    2aba:	2200      	movs	r2, #0
    2abc:	400b      	ands	r3, r1
    2abe:	d009      	beq.n	2ad4 <__aeabi_ddiv+0x618>
    2ac0:	230f      	movs	r3, #15
    2ac2:	2200      	movs	r2, #0
    2ac4:	400b      	ands	r3, r1
    2ac6:	0008      	movs	r0, r1
    2ac8:	2b04      	cmp	r3, #4
    2aca:	d1bd      	bne.n	2a48 <__aeabi_ddiv+0x58c>
    2acc:	0001      	movs	r1, r0
    2ace:	0753      	lsls	r3, r2, #29
    2ad0:	0252      	lsls	r2, r2, #9
    2ad2:	0b12      	lsrs	r2, r2, #12
    2ad4:	08c9      	lsrs	r1, r1, #3
    2ad6:	4319      	orrs	r1, r3
    2ad8:	2301      	movs	r3, #1
    2ada:	4688      	mov	r8, r1
    2adc:	9902      	ldr	r1, [sp, #8]
    2ade:	2400      	movs	r4, #0
    2ae0:	4019      	ands	r1, r3
    2ae2:	468c      	mov	ip, r1
    2ae4:	e5b8      	b.n	2658 <__aeabi_ddiv+0x19c>
    2ae6:	4552      	cmp	r2, sl
    2ae8:	d8be      	bhi.n	2a68 <__aeabi_ddiv+0x5ac>
    2aea:	468b      	mov	fp, r1
    2aec:	2500      	movs	r5, #0
    2aee:	e660      	b.n	27b2 <__aeabi_ddiv+0x2f6>
    2af0:	9d03      	ldr	r5, [sp, #12]
    2af2:	429d      	cmp	r5, r3
    2af4:	d3c6      	bcc.n	2a84 <__aeabi_ddiv+0x5c8>
    2af6:	0011      	movs	r1, r2
    2af8:	e762      	b.n	29c0 <__aeabi_ddiv+0x504>
    2afa:	2500      	movs	r5, #0
    2afc:	e7d8      	b.n	2ab0 <__aeabi_ddiv+0x5f4>
    2afe:	2280      	movs	r2, #128	; 0x80
    2b00:	465b      	mov	r3, fp
    2b02:	0312      	lsls	r2, r2, #12
    2b04:	431a      	orrs	r2, r3
    2b06:	9b01      	ldr	r3, [sp, #4]
    2b08:	0312      	lsls	r2, r2, #12
    2b0a:	0b12      	lsrs	r2, r2, #12
    2b0c:	469c      	mov	ip, r3
    2b0e:	4688      	mov	r8, r1
    2b10:	4c03      	ldr	r4, [pc, #12]	; (2b20 <__aeabi_ddiv+0x664>)
    2b12:	e5a1      	b.n	2658 <__aeabi_ddiv+0x19c>
    2b14:	000003ff 	.word	0x000003ff
    2b18:	feffffff 	.word	0xfeffffff
    2b1c:	000007fe 	.word	0x000007fe
    2b20:	000007ff 	.word	0x000007ff

00002b24 <__aeabi_dmul>:
    2b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b26:	4657      	mov	r7, sl
    2b28:	4645      	mov	r5, r8
    2b2a:	46de      	mov	lr, fp
    2b2c:	464e      	mov	r6, r9
    2b2e:	b5e0      	push	{r5, r6, r7, lr}
    2b30:	030c      	lsls	r4, r1, #12
    2b32:	4698      	mov	r8, r3
    2b34:	004e      	lsls	r6, r1, #1
    2b36:	0b23      	lsrs	r3, r4, #12
    2b38:	b087      	sub	sp, #28
    2b3a:	0007      	movs	r7, r0
    2b3c:	4692      	mov	sl, r2
    2b3e:	469b      	mov	fp, r3
    2b40:	0d76      	lsrs	r6, r6, #21
    2b42:	0fcd      	lsrs	r5, r1, #31
    2b44:	2e00      	cmp	r6, #0
    2b46:	d06b      	beq.n	2c20 <__aeabi_dmul+0xfc>
    2b48:	4b6d      	ldr	r3, [pc, #436]	; (2d00 <__aeabi_dmul+0x1dc>)
    2b4a:	429e      	cmp	r6, r3
    2b4c:	d035      	beq.n	2bba <__aeabi_dmul+0x96>
    2b4e:	2480      	movs	r4, #128	; 0x80
    2b50:	465b      	mov	r3, fp
    2b52:	0f42      	lsrs	r2, r0, #29
    2b54:	0424      	lsls	r4, r4, #16
    2b56:	00db      	lsls	r3, r3, #3
    2b58:	4314      	orrs	r4, r2
    2b5a:	431c      	orrs	r4, r3
    2b5c:	00c3      	lsls	r3, r0, #3
    2b5e:	4699      	mov	r9, r3
    2b60:	4b68      	ldr	r3, [pc, #416]	; (2d04 <__aeabi_dmul+0x1e0>)
    2b62:	46a3      	mov	fp, r4
    2b64:	469c      	mov	ip, r3
    2b66:	2300      	movs	r3, #0
    2b68:	2700      	movs	r7, #0
    2b6a:	4466      	add	r6, ip
    2b6c:	9302      	str	r3, [sp, #8]
    2b6e:	4643      	mov	r3, r8
    2b70:	031c      	lsls	r4, r3, #12
    2b72:	005a      	lsls	r2, r3, #1
    2b74:	0fdb      	lsrs	r3, r3, #31
    2b76:	4650      	mov	r0, sl
    2b78:	0b24      	lsrs	r4, r4, #12
    2b7a:	0d52      	lsrs	r2, r2, #21
    2b7c:	4698      	mov	r8, r3
    2b7e:	d100      	bne.n	2b82 <__aeabi_dmul+0x5e>
    2b80:	e076      	b.n	2c70 <__aeabi_dmul+0x14c>
    2b82:	4b5f      	ldr	r3, [pc, #380]	; (2d00 <__aeabi_dmul+0x1dc>)
    2b84:	429a      	cmp	r2, r3
    2b86:	d06d      	beq.n	2c64 <__aeabi_dmul+0x140>
    2b88:	2380      	movs	r3, #128	; 0x80
    2b8a:	0f41      	lsrs	r1, r0, #29
    2b8c:	041b      	lsls	r3, r3, #16
    2b8e:	430b      	orrs	r3, r1
    2b90:	495c      	ldr	r1, [pc, #368]	; (2d04 <__aeabi_dmul+0x1e0>)
    2b92:	00e4      	lsls	r4, r4, #3
    2b94:	468c      	mov	ip, r1
    2b96:	431c      	orrs	r4, r3
    2b98:	00c3      	lsls	r3, r0, #3
    2b9a:	2000      	movs	r0, #0
    2b9c:	4462      	add	r2, ip
    2b9e:	4641      	mov	r1, r8
    2ba0:	18b6      	adds	r6, r6, r2
    2ba2:	4069      	eors	r1, r5
    2ba4:	1c72      	adds	r2, r6, #1
    2ba6:	9101      	str	r1, [sp, #4]
    2ba8:	4694      	mov	ip, r2
    2baa:	4307      	orrs	r7, r0
    2bac:	2f0f      	cmp	r7, #15
    2bae:	d900      	bls.n	2bb2 <__aeabi_dmul+0x8e>
    2bb0:	e0b0      	b.n	2d14 <__aeabi_dmul+0x1f0>
    2bb2:	4a55      	ldr	r2, [pc, #340]	; (2d08 <__aeabi_dmul+0x1e4>)
    2bb4:	00bf      	lsls	r7, r7, #2
    2bb6:	59d2      	ldr	r2, [r2, r7]
    2bb8:	4697      	mov	pc, r2
    2bba:	465b      	mov	r3, fp
    2bbc:	4303      	orrs	r3, r0
    2bbe:	4699      	mov	r9, r3
    2bc0:	d000      	beq.n	2bc4 <__aeabi_dmul+0xa0>
    2bc2:	e087      	b.n	2cd4 <__aeabi_dmul+0x1b0>
    2bc4:	2300      	movs	r3, #0
    2bc6:	469b      	mov	fp, r3
    2bc8:	3302      	adds	r3, #2
    2bca:	2708      	movs	r7, #8
    2bcc:	9302      	str	r3, [sp, #8]
    2bce:	e7ce      	b.n	2b6e <__aeabi_dmul+0x4a>
    2bd0:	4642      	mov	r2, r8
    2bd2:	9201      	str	r2, [sp, #4]
    2bd4:	2802      	cmp	r0, #2
    2bd6:	d067      	beq.n	2ca8 <__aeabi_dmul+0x184>
    2bd8:	2803      	cmp	r0, #3
    2bda:	d100      	bne.n	2bde <__aeabi_dmul+0xba>
    2bdc:	e20e      	b.n	2ffc <__aeabi_dmul+0x4d8>
    2bde:	2801      	cmp	r0, #1
    2be0:	d000      	beq.n	2be4 <__aeabi_dmul+0xc0>
    2be2:	e162      	b.n	2eaa <__aeabi_dmul+0x386>
    2be4:	2300      	movs	r3, #0
    2be6:	2400      	movs	r4, #0
    2be8:	2200      	movs	r2, #0
    2bea:	4699      	mov	r9, r3
    2bec:	9901      	ldr	r1, [sp, #4]
    2bee:	4001      	ands	r1, r0
    2bf0:	b2cd      	uxtb	r5, r1
    2bf2:	2100      	movs	r1, #0
    2bf4:	0312      	lsls	r2, r2, #12
    2bf6:	0d0b      	lsrs	r3, r1, #20
    2bf8:	0b12      	lsrs	r2, r2, #12
    2bfa:	051b      	lsls	r3, r3, #20
    2bfc:	4313      	orrs	r3, r2
    2bfe:	4a43      	ldr	r2, [pc, #268]	; (2d0c <__aeabi_dmul+0x1e8>)
    2c00:	0524      	lsls	r4, r4, #20
    2c02:	4013      	ands	r3, r2
    2c04:	431c      	orrs	r4, r3
    2c06:	0064      	lsls	r4, r4, #1
    2c08:	07ed      	lsls	r5, r5, #31
    2c0a:	0864      	lsrs	r4, r4, #1
    2c0c:	432c      	orrs	r4, r5
    2c0e:	4648      	mov	r0, r9
    2c10:	0021      	movs	r1, r4
    2c12:	b007      	add	sp, #28
    2c14:	bc3c      	pop	{r2, r3, r4, r5}
    2c16:	4690      	mov	r8, r2
    2c18:	4699      	mov	r9, r3
    2c1a:	46a2      	mov	sl, r4
    2c1c:	46ab      	mov	fp, r5
    2c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c20:	4303      	orrs	r3, r0
    2c22:	4699      	mov	r9, r3
    2c24:	d04f      	beq.n	2cc6 <__aeabi_dmul+0x1a2>
    2c26:	465b      	mov	r3, fp
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d100      	bne.n	2c2e <__aeabi_dmul+0x10a>
    2c2c:	e189      	b.n	2f42 <__aeabi_dmul+0x41e>
    2c2e:	4658      	mov	r0, fp
    2c30:	f000 fd7a 	bl	3728 <__clzsi2>
    2c34:	0003      	movs	r3, r0
    2c36:	3b0b      	subs	r3, #11
    2c38:	2b1c      	cmp	r3, #28
    2c3a:	dd00      	ble.n	2c3e <__aeabi_dmul+0x11a>
    2c3c:	e17a      	b.n	2f34 <__aeabi_dmul+0x410>
    2c3e:	221d      	movs	r2, #29
    2c40:	1ad3      	subs	r3, r2, r3
    2c42:	003a      	movs	r2, r7
    2c44:	0001      	movs	r1, r0
    2c46:	465c      	mov	r4, fp
    2c48:	40da      	lsrs	r2, r3
    2c4a:	3908      	subs	r1, #8
    2c4c:	408c      	lsls	r4, r1
    2c4e:	0013      	movs	r3, r2
    2c50:	408f      	lsls	r7, r1
    2c52:	4323      	orrs	r3, r4
    2c54:	469b      	mov	fp, r3
    2c56:	46b9      	mov	r9, r7
    2c58:	2300      	movs	r3, #0
    2c5a:	4e2d      	ldr	r6, [pc, #180]	; (2d10 <__aeabi_dmul+0x1ec>)
    2c5c:	2700      	movs	r7, #0
    2c5e:	1a36      	subs	r6, r6, r0
    2c60:	9302      	str	r3, [sp, #8]
    2c62:	e784      	b.n	2b6e <__aeabi_dmul+0x4a>
    2c64:	4653      	mov	r3, sl
    2c66:	4323      	orrs	r3, r4
    2c68:	d12a      	bne.n	2cc0 <__aeabi_dmul+0x19c>
    2c6a:	2400      	movs	r4, #0
    2c6c:	2002      	movs	r0, #2
    2c6e:	e796      	b.n	2b9e <__aeabi_dmul+0x7a>
    2c70:	4653      	mov	r3, sl
    2c72:	4323      	orrs	r3, r4
    2c74:	d020      	beq.n	2cb8 <__aeabi_dmul+0x194>
    2c76:	2c00      	cmp	r4, #0
    2c78:	d100      	bne.n	2c7c <__aeabi_dmul+0x158>
    2c7a:	e157      	b.n	2f2c <__aeabi_dmul+0x408>
    2c7c:	0020      	movs	r0, r4
    2c7e:	f000 fd53 	bl	3728 <__clzsi2>
    2c82:	0003      	movs	r3, r0
    2c84:	3b0b      	subs	r3, #11
    2c86:	2b1c      	cmp	r3, #28
    2c88:	dd00      	ble.n	2c8c <__aeabi_dmul+0x168>
    2c8a:	e149      	b.n	2f20 <__aeabi_dmul+0x3fc>
    2c8c:	211d      	movs	r1, #29
    2c8e:	1acb      	subs	r3, r1, r3
    2c90:	4651      	mov	r1, sl
    2c92:	0002      	movs	r2, r0
    2c94:	40d9      	lsrs	r1, r3
    2c96:	4653      	mov	r3, sl
    2c98:	3a08      	subs	r2, #8
    2c9a:	4094      	lsls	r4, r2
    2c9c:	4093      	lsls	r3, r2
    2c9e:	430c      	orrs	r4, r1
    2ca0:	4a1b      	ldr	r2, [pc, #108]	; (2d10 <__aeabi_dmul+0x1ec>)
    2ca2:	1a12      	subs	r2, r2, r0
    2ca4:	2000      	movs	r0, #0
    2ca6:	e77a      	b.n	2b9e <__aeabi_dmul+0x7a>
    2ca8:	2501      	movs	r5, #1
    2caa:	9b01      	ldr	r3, [sp, #4]
    2cac:	4c14      	ldr	r4, [pc, #80]	; (2d00 <__aeabi_dmul+0x1dc>)
    2cae:	401d      	ands	r5, r3
    2cb0:	2300      	movs	r3, #0
    2cb2:	2200      	movs	r2, #0
    2cb4:	4699      	mov	r9, r3
    2cb6:	e79c      	b.n	2bf2 <__aeabi_dmul+0xce>
    2cb8:	2400      	movs	r4, #0
    2cba:	2200      	movs	r2, #0
    2cbc:	2001      	movs	r0, #1
    2cbe:	e76e      	b.n	2b9e <__aeabi_dmul+0x7a>
    2cc0:	4653      	mov	r3, sl
    2cc2:	2003      	movs	r0, #3
    2cc4:	e76b      	b.n	2b9e <__aeabi_dmul+0x7a>
    2cc6:	2300      	movs	r3, #0
    2cc8:	469b      	mov	fp, r3
    2cca:	3301      	adds	r3, #1
    2ccc:	2704      	movs	r7, #4
    2cce:	2600      	movs	r6, #0
    2cd0:	9302      	str	r3, [sp, #8]
    2cd2:	e74c      	b.n	2b6e <__aeabi_dmul+0x4a>
    2cd4:	2303      	movs	r3, #3
    2cd6:	4681      	mov	r9, r0
    2cd8:	270c      	movs	r7, #12
    2cda:	9302      	str	r3, [sp, #8]
    2cdc:	e747      	b.n	2b6e <__aeabi_dmul+0x4a>
    2cde:	2280      	movs	r2, #128	; 0x80
    2ce0:	2300      	movs	r3, #0
    2ce2:	2500      	movs	r5, #0
    2ce4:	0312      	lsls	r2, r2, #12
    2ce6:	4699      	mov	r9, r3
    2ce8:	4c05      	ldr	r4, [pc, #20]	; (2d00 <__aeabi_dmul+0x1dc>)
    2cea:	e782      	b.n	2bf2 <__aeabi_dmul+0xce>
    2cec:	465c      	mov	r4, fp
    2cee:	464b      	mov	r3, r9
    2cf0:	9802      	ldr	r0, [sp, #8]
    2cf2:	e76f      	b.n	2bd4 <__aeabi_dmul+0xb0>
    2cf4:	465c      	mov	r4, fp
    2cf6:	464b      	mov	r3, r9
    2cf8:	9501      	str	r5, [sp, #4]
    2cfa:	9802      	ldr	r0, [sp, #8]
    2cfc:	e76a      	b.n	2bd4 <__aeabi_dmul+0xb0>
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	000007ff 	.word	0x000007ff
    2d04:	fffffc01 	.word	0xfffffc01
    2d08:	00004928 	.word	0x00004928
    2d0c:	800fffff 	.word	0x800fffff
    2d10:	fffffc0d 	.word	0xfffffc0d
    2d14:	464a      	mov	r2, r9
    2d16:	4649      	mov	r1, r9
    2d18:	0c17      	lsrs	r7, r2, #16
    2d1a:	0c1a      	lsrs	r2, r3, #16
    2d1c:	041b      	lsls	r3, r3, #16
    2d1e:	0c1b      	lsrs	r3, r3, #16
    2d20:	0408      	lsls	r0, r1, #16
    2d22:	0019      	movs	r1, r3
    2d24:	0c00      	lsrs	r0, r0, #16
    2d26:	4341      	muls	r1, r0
    2d28:	0015      	movs	r5, r2
    2d2a:	4688      	mov	r8, r1
    2d2c:	0019      	movs	r1, r3
    2d2e:	437d      	muls	r5, r7
    2d30:	4379      	muls	r1, r7
    2d32:	9503      	str	r5, [sp, #12]
    2d34:	4689      	mov	r9, r1
    2d36:	0029      	movs	r1, r5
    2d38:	0015      	movs	r5, r2
    2d3a:	4345      	muls	r5, r0
    2d3c:	444d      	add	r5, r9
    2d3e:	9502      	str	r5, [sp, #8]
    2d40:	4645      	mov	r5, r8
    2d42:	0c2d      	lsrs	r5, r5, #16
    2d44:	46aa      	mov	sl, r5
    2d46:	9d02      	ldr	r5, [sp, #8]
    2d48:	4455      	add	r5, sl
    2d4a:	45a9      	cmp	r9, r5
    2d4c:	d906      	bls.n	2d5c <__aeabi_dmul+0x238>
    2d4e:	468a      	mov	sl, r1
    2d50:	2180      	movs	r1, #128	; 0x80
    2d52:	0249      	lsls	r1, r1, #9
    2d54:	4689      	mov	r9, r1
    2d56:	44ca      	add	sl, r9
    2d58:	4651      	mov	r1, sl
    2d5a:	9103      	str	r1, [sp, #12]
    2d5c:	0c29      	lsrs	r1, r5, #16
    2d5e:	9104      	str	r1, [sp, #16]
    2d60:	4641      	mov	r1, r8
    2d62:	0409      	lsls	r1, r1, #16
    2d64:	042d      	lsls	r5, r5, #16
    2d66:	0c09      	lsrs	r1, r1, #16
    2d68:	4688      	mov	r8, r1
    2d6a:	0029      	movs	r1, r5
    2d6c:	0c25      	lsrs	r5, r4, #16
    2d6e:	0424      	lsls	r4, r4, #16
    2d70:	4441      	add	r1, r8
    2d72:	0c24      	lsrs	r4, r4, #16
    2d74:	9105      	str	r1, [sp, #20]
    2d76:	0021      	movs	r1, r4
    2d78:	4341      	muls	r1, r0
    2d7a:	4688      	mov	r8, r1
    2d7c:	0021      	movs	r1, r4
    2d7e:	4379      	muls	r1, r7
    2d80:	468a      	mov	sl, r1
    2d82:	4368      	muls	r0, r5
    2d84:	4641      	mov	r1, r8
    2d86:	4450      	add	r0, sl
    2d88:	4681      	mov	r9, r0
    2d8a:	0c08      	lsrs	r0, r1, #16
    2d8c:	4448      	add	r0, r9
    2d8e:	436f      	muls	r7, r5
    2d90:	4582      	cmp	sl, r0
    2d92:	d903      	bls.n	2d9c <__aeabi_dmul+0x278>
    2d94:	2180      	movs	r1, #128	; 0x80
    2d96:	0249      	lsls	r1, r1, #9
    2d98:	4689      	mov	r9, r1
    2d9a:	444f      	add	r7, r9
    2d9c:	0c01      	lsrs	r1, r0, #16
    2d9e:	4689      	mov	r9, r1
    2da0:	0039      	movs	r1, r7
    2da2:	4449      	add	r1, r9
    2da4:	9102      	str	r1, [sp, #8]
    2da6:	4641      	mov	r1, r8
    2da8:	040f      	lsls	r7, r1, #16
    2daa:	9904      	ldr	r1, [sp, #16]
    2dac:	0c3f      	lsrs	r7, r7, #16
    2dae:	4688      	mov	r8, r1
    2db0:	0400      	lsls	r0, r0, #16
    2db2:	19c0      	adds	r0, r0, r7
    2db4:	4480      	add	r8, r0
    2db6:	4641      	mov	r1, r8
    2db8:	9104      	str	r1, [sp, #16]
    2dba:	4659      	mov	r1, fp
    2dbc:	0c0f      	lsrs	r7, r1, #16
    2dbe:	0409      	lsls	r1, r1, #16
    2dc0:	0c09      	lsrs	r1, r1, #16
    2dc2:	4688      	mov	r8, r1
    2dc4:	4359      	muls	r1, r3
    2dc6:	468a      	mov	sl, r1
    2dc8:	0039      	movs	r1, r7
    2dca:	4351      	muls	r1, r2
    2dcc:	4689      	mov	r9, r1
    2dce:	4641      	mov	r1, r8
    2dd0:	434a      	muls	r2, r1
    2dd2:	4651      	mov	r1, sl
    2dd4:	0c09      	lsrs	r1, r1, #16
    2dd6:	468b      	mov	fp, r1
    2dd8:	437b      	muls	r3, r7
    2dda:	18d2      	adds	r2, r2, r3
    2ddc:	445a      	add	r2, fp
    2dde:	4293      	cmp	r3, r2
    2de0:	d903      	bls.n	2dea <__aeabi_dmul+0x2c6>
    2de2:	2380      	movs	r3, #128	; 0x80
    2de4:	025b      	lsls	r3, r3, #9
    2de6:	469b      	mov	fp, r3
    2de8:	44d9      	add	r9, fp
    2dea:	4651      	mov	r1, sl
    2dec:	0409      	lsls	r1, r1, #16
    2dee:	0c09      	lsrs	r1, r1, #16
    2df0:	468a      	mov	sl, r1
    2df2:	4641      	mov	r1, r8
    2df4:	4361      	muls	r1, r4
    2df6:	437c      	muls	r4, r7
    2df8:	0c13      	lsrs	r3, r2, #16
    2dfa:	0412      	lsls	r2, r2, #16
    2dfc:	444b      	add	r3, r9
    2dfe:	4452      	add	r2, sl
    2e00:	46a1      	mov	r9, r4
    2e02:	468a      	mov	sl, r1
    2e04:	003c      	movs	r4, r7
    2e06:	4641      	mov	r1, r8
    2e08:	436c      	muls	r4, r5
    2e0a:	434d      	muls	r5, r1
    2e0c:	4651      	mov	r1, sl
    2e0e:	444d      	add	r5, r9
    2e10:	0c0f      	lsrs	r7, r1, #16
    2e12:	197d      	adds	r5, r7, r5
    2e14:	45a9      	cmp	r9, r5
    2e16:	d903      	bls.n	2e20 <__aeabi_dmul+0x2fc>
    2e18:	2180      	movs	r1, #128	; 0x80
    2e1a:	0249      	lsls	r1, r1, #9
    2e1c:	4688      	mov	r8, r1
    2e1e:	4444      	add	r4, r8
    2e20:	9f04      	ldr	r7, [sp, #16]
    2e22:	9903      	ldr	r1, [sp, #12]
    2e24:	46b8      	mov	r8, r7
    2e26:	4441      	add	r1, r8
    2e28:	468b      	mov	fp, r1
    2e2a:	4583      	cmp	fp, r0
    2e2c:	4180      	sbcs	r0, r0
    2e2e:	4241      	negs	r1, r0
    2e30:	4688      	mov	r8, r1
    2e32:	4651      	mov	r1, sl
    2e34:	0408      	lsls	r0, r1, #16
    2e36:	042f      	lsls	r7, r5, #16
    2e38:	0c00      	lsrs	r0, r0, #16
    2e3a:	183f      	adds	r7, r7, r0
    2e3c:	4658      	mov	r0, fp
    2e3e:	9902      	ldr	r1, [sp, #8]
    2e40:	1810      	adds	r0, r2, r0
    2e42:	4689      	mov	r9, r1
    2e44:	4290      	cmp	r0, r2
    2e46:	4192      	sbcs	r2, r2
    2e48:	444f      	add	r7, r9
    2e4a:	46ba      	mov	sl, r7
    2e4c:	4252      	negs	r2, r2
    2e4e:	4699      	mov	r9, r3
    2e50:	4693      	mov	fp, r2
    2e52:	44c2      	add	sl, r8
    2e54:	44d1      	add	r9, sl
    2e56:	44cb      	add	fp, r9
    2e58:	428f      	cmp	r7, r1
    2e5a:	41bf      	sbcs	r7, r7
    2e5c:	45c2      	cmp	sl, r8
    2e5e:	4189      	sbcs	r1, r1
    2e60:	4599      	cmp	r9, r3
    2e62:	419b      	sbcs	r3, r3
    2e64:	4593      	cmp	fp, r2
    2e66:	4192      	sbcs	r2, r2
    2e68:	427f      	negs	r7, r7
    2e6a:	4249      	negs	r1, r1
    2e6c:	0c2d      	lsrs	r5, r5, #16
    2e6e:	4252      	negs	r2, r2
    2e70:	430f      	orrs	r7, r1
    2e72:	425b      	negs	r3, r3
    2e74:	4313      	orrs	r3, r2
    2e76:	197f      	adds	r7, r7, r5
    2e78:	18ff      	adds	r7, r7, r3
    2e7a:	465b      	mov	r3, fp
    2e7c:	193c      	adds	r4, r7, r4
    2e7e:	0ddb      	lsrs	r3, r3, #23
    2e80:	9a05      	ldr	r2, [sp, #20]
    2e82:	0264      	lsls	r4, r4, #9
    2e84:	431c      	orrs	r4, r3
    2e86:	0243      	lsls	r3, r0, #9
    2e88:	4313      	orrs	r3, r2
    2e8a:	1e5d      	subs	r5, r3, #1
    2e8c:	41ab      	sbcs	r3, r5
    2e8e:	465a      	mov	r2, fp
    2e90:	0dc0      	lsrs	r0, r0, #23
    2e92:	4303      	orrs	r3, r0
    2e94:	0252      	lsls	r2, r2, #9
    2e96:	4313      	orrs	r3, r2
    2e98:	01e2      	lsls	r2, r4, #7
    2e9a:	d556      	bpl.n	2f4a <__aeabi_dmul+0x426>
    2e9c:	2001      	movs	r0, #1
    2e9e:	085a      	lsrs	r2, r3, #1
    2ea0:	4003      	ands	r3, r0
    2ea2:	4313      	orrs	r3, r2
    2ea4:	07e2      	lsls	r2, r4, #31
    2ea6:	4313      	orrs	r3, r2
    2ea8:	0864      	lsrs	r4, r4, #1
    2eaa:	485a      	ldr	r0, [pc, #360]	; (3014 <__aeabi_dmul+0x4f0>)
    2eac:	4460      	add	r0, ip
    2eae:	2800      	cmp	r0, #0
    2eb0:	dd4d      	ble.n	2f4e <__aeabi_dmul+0x42a>
    2eb2:	075a      	lsls	r2, r3, #29
    2eb4:	d009      	beq.n	2eca <__aeabi_dmul+0x3a6>
    2eb6:	220f      	movs	r2, #15
    2eb8:	401a      	ands	r2, r3
    2eba:	2a04      	cmp	r2, #4
    2ebc:	d005      	beq.n	2eca <__aeabi_dmul+0x3a6>
    2ebe:	1d1a      	adds	r2, r3, #4
    2ec0:	429a      	cmp	r2, r3
    2ec2:	419b      	sbcs	r3, r3
    2ec4:	425b      	negs	r3, r3
    2ec6:	18e4      	adds	r4, r4, r3
    2ec8:	0013      	movs	r3, r2
    2eca:	01e2      	lsls	r2, r4, #7
    2ecc:	d504      	bpl.n	2ed8 <__aeabi_dmul+0x3b4>
    2ece:	2080      	movs	r0, #128	; 0x80
    2ed0:	4a51      	ldr	r2, [pc, #324]	; (3018 <__aeabi_dmul+0x4f4>)
    2ed2:	00c0      	lsls	r0, r0, #3
    2ed4:	4014      	ands	r4, r2
    2ed6:	4460      	add	r0, ip
    2ed8:	4a50      	ldr	r2, [pc, #320]	; (301c <__aeabi_dmul+0x4f8>)
    2eda:	4290      	cmp	r0, r2
    2edc:	dd00      	ble.n	2ee0 <__aeabi_dmul+0x3bc>
    2ede:	e6e3      	b.n	2ca8 <__aeabi_dmul+0x184>
    2ee0:	2501      	movs	r5, #1
    2ee2:	08db      	lsrs	r3, r3, #3
    2ee4:	0762      	lsls	r2, r4, #29
    2ee6:	431a      	orrs	r2, r3
    2ee8:	0264      	lsls	r4, r4, #9
    2eea:	9b01      	ldr	r3, [sp, #4]
    2eec:	4691      	mov	r9, r2
    2eee:	0b22      	lsrs	r2, r4, #12
    2ef0:	0544      	lsls	r4, r0, #21
    2ef2:	0d64      	lsrs	r4, r4, #21
    2ef4:	401d      	ands	r5, r3
    2ef6:	e67c      	b.n	2bf2 <__aeabi_dmul+0xce>
    2ef8:	2280      	movs	r2, #128	; 0x80
    2efa:	4659      	mov	r1, fp
    2efc:	0312      	lsls	r2, r2, #12
    2efe:	4211      	tst	r1, r2
    2f00:	d008      	beq.n	2f14 <__aeabi_dmul+0x3f0>
    2f02:	4214      	tst	r4, r2
    2f04:	d106      	bne.n	2f14 <__aeabi_dmul+0x3f0>
    2f06:	4322      	orrs	r2, r4
    2f08:	0312      	lsls	r2, r2, #12
    2f0a:	0b12      	lsrs	r2, r2, #12
    2f0c:	4645      	mov	r5, r8
    2f0e:	4699      	mov	r9, r3
    2f10:	4c43      	ldr	r4, [pc, #268]	; (3020 <__aeabi_dmul+0x4fc>)
    2f12:	e66e      	b.n	2bf2 <__aeabi_dmul+0xce>
    2f14:	465b      	mov	r3, fp
    2f16:	431a      	orrs	r2, r3
    2f18:	0312      	lsls	r2, r2, #12
    2f1a:	0b12      	lsrs	r2, r2, #12
    2f1c:	4c40      	ldr	r4, [pc, #256]	; (3020 <__aeabi_dmul+0x4fc>)
    2f1e:	e668      	b.n	2bf2 <__aeabi_dmul+0xce>
    2f20:	0003      	movs	r3, r0
    2f22:	4654      	mov	r4, sl
    2f24:	3b28      	subs	r3, #40	; 0x28
    2f26:	409c      	lsls	r4, r3
    2f28:	2300      	movs	r3, #0
    2f2a:	e6b9      	b.n	2ca0 <__aeabi_dmul+0x17c>
    2f2c:	f000 fbfc 	bl	3728 <__clzsi2>
    2f30:	3020      	adds	r0, #32
    2f32:	e6a6      	b.n	2c82 <__aeabi_dmul+0x15e>
    2f34:	0003      	movs	r3, r0
    2f36:	3b28      	subs	r3, #40	; 0x28
    2f38:	409f      	lsls	r7, r3
    2f3a:	2300      	movs	r3, #0
    2f3c:	46bb      	mov	fp, r7
    2f3e:	4699      	mov	r9, r3
    2f40:	e68a      	b.n	2c58 <__aeabi_dmul+0x134>
    2f42:	f000 fbf1 	bl	3728 <__clzsi2>
    2f46:	3020      	adds	r0, #32
    2f48:	e674      	b.n	2c34 <__aeabi_dmul+0x110>
    2f4a:	46b4      	mov	ip, r6
    2f4c:	e7ad      	b.n	2eaa <__aeabi_dmul+0x386>
    2f4e:	2501      	movs	r5, #1
    2f50:	1a2a      	subs	r2, r5, r0
    2f52:	2a38      	cmp	r2, #56	; 0x38
    2f54:	dd06      	ble.n	2f64 <__aeabi_dmul+0x440>
    2f56:	9b01      	ldr	r3, [sp, #4]
    2f58:	2400      	movs	r4, #0
    2f5a:	401d      	ands	r5, r3
    2f5c:	2300      	movs	r3, #0
    2f5e:	2200      	movs	r2, #0
    2f60:	4699      	mov	r9, r3
    2f62:	e646      	b.n	2bf2 <__aeabi_dmul+0xce>
    2f64:	2a1f      	cmp	r2, #31
    2f66:	dc21      	bgt.n	2fac <__aeabi_dmul+0x488>
    2f68:	2520      	movs	r5, #32
    2f6a:	0020      	movs	r0, r4
    2f6c:	1aad      	subs	r5, r5, r2
    2f6e:	001e      	movs	r6, r3
    2f70:	40ab      	lsls	r3, r5
    2f72:	40a8      	lsls	r0, r5
    2f74:	40d6      	lsrs	r6, r2
    2f76:	1e5d      	subs	r5, r3, #1
    2f78:	41ab      	sbcs	r3, r5
    2f7a:	4330      	orrs	r0, r6
    2f7c:	4318      	orrs	r0, r3
    2f7e:	40d4      	lsrs	r4, r2
    2f80:	0743      	lsls	r3, r0, #29
    2f82:	d009      	beq.n	2f98 <__aeabi_dmul+0x474>
    2f84:	230f      	movs	r3, #15
    2f86:	4003      	ands	r3, r0
    2f88:	2b04      	cmp	r3, #4
    2f8a:	d005      	beq.n	2f98 <__aeabi_dmul+0x474>
    2f8c:	0003      	movs	r3, r0
    2f8e:	1d18      	adds	r0, r3, #4
    2f90:	4298      	cmp	r0, r3
    2f92:	419b      	sbcs	r3, r3
    2f94:	425b      	negs	r3, r3
    2f96:	18e4      	adds	r4, r4, r3
    2f98:	0223      	lsls	r3, r4, #8
    2f9a:	d521      	bpl.n	2fe0 <__aeabi_dmul+0x4bc>
    2f9c:	2501      	movs	r5, #1
    2f9e:	9b01      	ldr	r3, [sp, #4]
    2fa0:	2401      	movs	r4, #1
    2fa2:	401d      	ands	r5, r3
    2fa4:	2300      	movs	r3, #0
    2fa6:	2200      	movs	r2, #0
    2fa8:	4699      	mov	r9, r3
    2faa:	e622      	b.n	2bf2 <__aeabi_dmul+0xce>
    2fac:	251f      	movs	r5, #31
    2fae:	0021      	movs	r1, r4
    2fb0:	426d      	negs	r5, r5
    2fb2:	1a28      	subs	r0, r5, r0
    2fb4:	40c1      	lsrs	r1, r0
    2fb6:	0008      	movs	r0, r1
    2fb8:	2a20      	cmp	r2, #32
    2fba:	d01d      	beq.n	2ff8 <__aeabi_dmul+0x4d4>
    2fbc:	355f      	adds	r5, #95	; 0x5f
    2fbe:	1aaa      	subs	r2, r5, r2
    2fc0:	4094      	lsls	r4, r2
    2fc2:	4323      	orrs	r3, r4
    2fc4:	1e5c      	subs	r4, r3, #1
    2fc6:	41a3      	sbcs	r3, r4
    2fc8:	2507      	movs	r5, #7
    2fca:	4303      	orrs	r3, r0
    2fcc:	401d      	ands	r5, r3
    2fce:	2200      	movs	r2, #0
    2fd0:	2d00      	cmp	r5, #0
    2fd2:	d009      	beq.n	2fe8 <__aeabi_dmul+0x4c4>
    2fd4:	220f      	movs	r2, #15
    2fd6:	2400      	movs	r4, #0
    2fd8:	401a      	ands	r2, r3
    2fda:	0018      	movs	r0, r3
    2fdc:	2a04      	cmp	r2, #4
    2fde:	d1d6      	bne.n	2f8e <__aeabi_dmul+0x46a>
    2fe0:	0003      	movs	r3, r0
    2fe2:	0765      	lsls	r5, r4, #29
    2fe4:	0264      	lsls	r4, r4, #9
    2fe6:	0b22      	lsrs	r2, r4, #12
    2fe8:	08db      	lsrs	r3, r3, #3
    2fea:	432b      	orrs	r3, r5
    2fec:	2501      	movs	r5, #1
    2fee:	4699      	mov	r9, r3
    2ff0:	9b01      	ldr	r3, [sp, #4]
    2ff2:	2400      	movs	r4, #0
    2ff4:	401d      	ands	r5, r3
    2ff6:	e5fc      	b.n	2bf2 <__aeabi_dmul+0xce>
    2ff8:	2400      	movs	r4, #0
    2ffa:	e7e2      	b.n	2fc2 <__aeabi_dmul+0x49e>
    2ffc:	2280      	movs	r2, #128	; 0x80
    2ffe:	2501      	movs	r5, #1
    3000:	0312      	lsls	r2, r2, #12
    3002:	4322      	orrs	r2, r4
    3004:	9901      	ldr	r1, [sp, #4]
    3006:	0312      	lsls	r2, r2, #12
    3008:	0b12      	lsrs	r2, r2, #12
    300a:	400d      	ands	r5, r1
    300c:	4699      	mov	r9, r3
    300e:	4c04      	ldr	r4, [pc, #16]	; (3020 <__aeabi_dmul+0x4fc>)
    3010:	e5ef      	b.n	2bf2 <__aeabi_dmul+0xce>
    3012:	46c0      	nop			; (mov r8, r8)
    3014:	000003ff 	.word	0x000003ff
    3018:	feffffff 	.word	0xfeffffff
    301c:	000007fe 	.word	0x000007fe
    3020:	000007ff 	.word	0x000007ff

00003024 <__aeabi_dsub>:
    3024:	b5f0      	push	{r4, r5, r6, r7, lr}
    3026:	4646      	mov	r6, r8
    3028:	46d6      	mov	lr, sl
    302a:	464f      	mov	r7, r9
    302c:	030c      	lsls	r4, r1, #12
    302e:	b5c0      	push	{r6, r7, lr}
    3030:	0fcd      	lsrs	r5, r1, #31
    3032:	004e      	lsls	r6, r1, #1
    3034:	0a61      	lsrs	r1, r4, #9
    3036:	0f44      	lsrs	r4, r0, #29
    3038:	430c      	orrs	r4, r1
    303a:	00c1      	lsls	r1, r0, #3
    303c:	0058      	lsls	r0, r3, #1
    303e:	0d40      	lsrs	r0, r0, #21
    3040:	4684      	mov	ip, r0
    3042:	468a      	mov	sl, r1
    3044:	000f      	movs	r7, r1
    3046:	0319      	lsls	r1, r3, #12
    3048:	0f50      	lsrs	r0, r2, #29
    304a:	0a49      	lsrs	r1, r1, #9
    304c:	4301      	orrs	r1, r0
    304e:	48c6      	ldr	r0, [pc, #792]	; (3368 <__aeabi_dsub+0x344>)
    3050:	0d76      	lsrs	r6, r6, #21
    3052:	46a8      	mov	r8, r5
    3054:	0fdb      	lsrs	r3, r3, #31
    3056:	00d2      	lsls	r2, r2, #3
    3058:	4584      	cmp	ip, r0
    305a:	d100      	bne.n	305e <__aeabi_dsub+0x3a>
    305c:	e0d8      	b.n	3210 <__aeabi_dsub+0x1ec>
    305e:	2001      	movs	r0, #1
    3060:	4043      	eors	r3, r0
    3062:	42ab      	cmp	r3, r5
    3064:	d100      	bne.n	3068 <__aeabi_dsub+0x44>
    3066:	e0a6      	b.n	31b6 <__aeabi_dsub+0x192>
    3068:	4660      	mov	r0, ip
    306a:	1a35      	subs	r5, r6, r0
    306c:	2d00      	cmp	r5, #0
    306e:	dc00      	bgt.n	3072 <__aeabi_dsub+0x4e>
    3070:	e105      	b.n	327e <__aeabi_dsub+0x25a>
    3072:	2800      	cmp	r0, #0
    3074:	d110      	bne.n	3098 <__aeabi_dsub+0x74>
    3076:	000b      	movs	r3, r1
    3078:	4313      	orrs	r3, r2
    307a:	d100      	bne.n	307e <__aeabi_dsub+0x5a>
    307c:	e0d7      	b.n	322e <__aeabi_dsub+0x20a>
    307e:	1e6b      	subs	r3, r5, #1
    3080:	2b00      	cmp	r3, #0
    3082:	d000      	beq.n	3086 <__aeabi_dsub+0x62>
    3084:	e14b      	b.n	331e <__aeabi_dsub+0x2fa>
    3086:	4653      	mov	r3, sl
    3088:	1a9f      	subs	r7, r3, r2
    308a:	45ba      	cmp	sl, r7
    308c:	4180      	sbcs	r0, r0
    308e:	1a64      	subs	r4, r4, r1
    3090:	4240      	negs	r0, r0
    3092:	1a24      	subs	r4, r4, r0
    3094:	2601      	movs	r6, #1
    3096:	e01e      	b.n	30d6 <__aeabi_dsub+0xb2>
    3098:	4bb3      	ldr	r3, [pc, #716]	; (3368 <__aeabi_dsub+0x344>)
    309a:	429e      	cmp	r6, r3
    309c:	d048      	beq.n	3130 <__aeabi_dsub+0x10c>
    309e:	2380      	movs	r3, #128	; 0x80
    30a0:	041b      	lsls	r3, r3, #16
    30a2:	4319      	orrs	r1, r3
    30a4:	2d38      	cmp	r5, #56	; 0x38
    30a6:	dd00      	ble.n	30aa <__aeabi_dsub+0x86>
    30a8:	e119      	b.n	32de <__aeabi_dsub+0x2ba>
    30aa:	2d1f      	cmp	r5, #31
    30ac:	dd00      	ble.n	30b0 <__aeabi_dsub+0x8c>
    30ae:	e14c      	b.n	334a <__aeabi_dsub+0x326>
    30b0:	2320      	movs	r3, #32
    30b2:	000f      	movs	r7, r1
    30b4:	1b5b      	subs	r3, r3, r5
    30b6:	0010      	movs	r0, r2
    30b8:	409a      	lsls	r2, r3
    30ba:	409f      	lsls	r7, r3
    30bc:	40e8      	lsrs	r0, r5
    30be:	1e53      	subs	r3, r2, #1
    30c0:	419a      	sbcs	r2, r3
    30c2:	40e9      	lsrs	r1, r5
    30c4:	4307      	orrs	r7, r0
    30c6:	4317      	orrs	r7, r2
    30c8:	4653      	mov	r3, sl
    30ca:	1bdf      	subs	r7, r3, r7
    30cc:	1a61      	subs	r1, r4, r1
    30ce:	45ba      	cmp	sl, r7
    30d0:	41a4      	sbcs	r4, r4
    30d2:	4264      	negs	r4, r4
    30d4:	1b0c      	subs	r4, r1, r4
    30d6:	0223      	lsls	r3, r4, #8
    30d8:	d400      	bmi.n	30dc <__aeabi_dsub+0xb8>
    30da:	e0c5      	b.n	3268 <__aeabi_dsub+0x244>
    30dc:	0264      	lsls	r4, r4, #9
    30de:	0a65      	lsrs	r5, r4, #9
    30e0:	2d00      	cmp	r5, #0
    30e2:	d100      	bne.n	30e6 <__aeabi_dsub+0xc2>
    30e4:	e0f6      	b.n	32d4 <__aeabi_dsub+0x2b0>
    30e6:	0028      	movs	r0, r5
    30e8:	f000 fb1e 	bl	3728 <__clzsi2>
    30ec:	0003      	movs	r3, r0
    30ee:	3b08      	subs	r3, #8
    30f0:	2b1f      	cmp	r3, #31
    30f2:	dd00      	ble.n	30f6 <__aeabi_dsub+0xd2>
    30f4:	e0e9      	b.n	32ca <__aeabi_dsub+0x2a6>
    30f6:	2220      	movs	r2, #32
    30f8:	003c      	movs	r4, r7
    30fa:	1ad2      	subs	r2, r2, r3
    30fc:	409d      	lsls	r5, r3
    30fe:	40d4      	lsrs	r4, r2
    3100:	409f      	lsls	r7, r3
    3102:	4325      	orrs	r5, r4
    3104:	429e      	cmp	r6, r3
    3106:	dd00      	ble.n	310a <__aeabi_dsub+0xe6>
    3108:	e0db      	b.n	32c2 <__aeabi_dsub+0x29e>
    310a:	1b9e      	subs	r6, r3, r6
    310c:	1c73      	adds	r3, r6, #1
    310e:	2b1f      	cmp	r3, #31
    3110:	dd00      	ble.n	3114 <__aeabi_dsub+0xf0>
    3112:	e10a      	b.n	332a <__aeabi_dsub+0x306>
    3114:	2220      	movs	r2, #32
    3116:	0038      	movs	r0, r7
    3118:	1ad2      	subs	r2, r2, r3
    311a:	0029      	movs	r1, r5
    311c:	4097      	lsls	r7, r2
    311e:	002c      	movs	r4, r5
    3120:	4091      	lsls	r1, r2
    3122:	40d8      	lsrs	r0, r3
    3124:	1e7a      	subs	r2, r7, #1
    3126:	4197      	sbcs	r7, r2
    3128:	40dc      	lsrs	r4, r3
    312a:	2600      	movs	r6, #0
    312c:	4301      	orrs	r1, r0
    312e:	430f      	orrs	r7, r1
    3130:	077b      	lsls	r3, r7, #29
    3132:	d009      	beq.n	3148 <__aeabi_dsub+0x124>
    3134:	230f      	movs	r3, #15
    3136:	403b      	ands	r3, r7
    3138:	2b04      	cmp	r3, #4
    313a:	d005      	beq.n	3148 <__aeabi_dsub+0x124>
    313c:	1d3b      	adds	r3, r7, #4
    313e:	42bb      	cmp	r3, r7
    3140:	41bf      	sbcs	r7, r7
    3142:	427f      	negs	r7, r7
    3144:	19e4      	adds	r4, r4, r7
    3146:	001f      	movs	r7, r3
    3148:	0223      	lsls	r3, r4, #8
    314a:	d525      	bpl.n	3198 <__aeabi_dsub+0x174>
    314c:	4b86      	ldr	r3, [pc, #536]	; (3368 <__aeabi_dsub+0x344>)
    314e:	3601      	adds	r6, #1
    3150:	429e      	cmp	r6, r3
    3152:	d100      	bne.n	3156 <__aeabi_dsub+0x132>
    3154:	e0af      	b.n	32b6 <__aeabi_dsub+0x292>
    3156:	4b85      	ldr	r3, [pc, #532]	; (336c <__aeabi_dsub+0x348>)
    3158:	2501      	movs	r5, #1
    315a:	401c      	ands	r4, r3
    315c:	4643      	mov	r3, r8
    315e:	0762      	lsls	r2, r4, #29
    3160:	08ff      	lsrs	r7, r7, #3
    3162:	0264      	lsls	r4, r4, #9
    3164:	0576      	lsls	r6, r6, #21
    3166:	4317      	orrs	r7, r2
    3168:	0b24      	lsrs	r4, r4, #12
    316a:	0d76      	lsrs	r6, r6, #21
    316c:	401d      	ands	r5, r3
    316e:	2100      	movs	r1, #0
    3170:	0324      	lsls	r4, r4, #12
    3172:	0b23      	lsrs	r3, r4, #12
    3174:	0d0c      	lsrs	r4, r1, #20
    3176:	4a7e      	ldr	r2, [pc, #504]	; (3370 <__aeabi_dsub+0x34c>)
    3178:	0524      	lsls	r4, r4, #20
    317a:	431c      	orrs	r4, r3
    317c:	4014      	ands	r4, r2
    317e:	0533      	lsls	r3, r6, #20
    3180:	4323      	orrs	r3, r4
    3182:	005b      	lsls	r3, r3, #1
    3184:	07ed      	lsls	r5, r5, #31
    3186:	085b      	lsrs	r3, r3, #1
    3188:	432b      	orrs	r3, r5
    318a:	0038      	movs	r0, r7
    318c:	0019      	movs	r1, r3
    318e:	bc1c      	pop	{r2, r3, r4}
    3190:	4690      	mov	r8, r2
    3192:	4699      	mov	r9, r3
    3194:	46a2      	mov	sl, r4
    3196:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3198:	2501      	movs	r5, #1
    319a:	4643      	mov	r3, r8
    319c:	0762      	lsls	r2, r4, #29
    319e:	08ff      	lsrs	r7, r7, #3
    31a0:	4317      	orrs	r7, r2
    31a2:	08e4      	lsrs	r4, r4, #3
    31a4:	401d      	ands	r5, r3
    31a6:	4b70      	ldr	r3, [pc, #448]	; (3368 <__aeabi_dsub+0x344>)
    31a8:	429e      	cmp	r6, r3
    31aa:	d036      	beq.n	321a <__aeabi_dsub+0x1f6>
    31ac:	0324      	lsls	r4, r4, #12
    31ae:	0576      	lsls	r6, r6, #21
    31b0:	0b24      	lsrs	r4, r4, #12
    31b2:	0d76      	lsrs	r6, r6, #21
    31b4:	e7db      	b.n	316e <__aeabi_dsub+0x14a>
    31b6:	4663      	mov	r3, ip
    31b8:	1af3      	subs	r3, r6, r3
    31ba:	2b00      	cmp	r3, #0
    31bc:	dc00      	bgt.n	31c0 <__aeabi_dsub+0x19c>
    31be:	e094      	b.n	32ea <__aeabi_dsub+0x2c6>
    31c0:	4660      	mov	r0, ip
    31c2:	2800      	cmp	r0, #0
    31c4:	d035      	beq.n	3232 <__aeabi_dsub+0x20e>
    31c6:	4868      	ldr	r0, [pc, #416]	; (3368 <__aeabi_dsub+0x344>)
    31c8:	4286      	cmp	r6, r0
    31ca:	d0b1      	beq.n	3130 <__aeabi_dsub+0x10c>
    31cc:	2780      	movs	r7, #128	; 0x80
    31ce:	043f      	lsls	r7, r7, #16
    31d0:	4339      	orrs	r1, r7
    31d2:	2b38      	cmp	r3, #56	; 0x38
    31d4:	dc00      	bgt.n	31d8 <__aeabi_dsub+0x1b4>
    31d6:	e0fd      	b.n	33d4 <__aeabi_dsub+0x3b0>
    31d8:	430a      	orrs	r2, r1
    31da:	0017      	movs	r7, r2
    31dc:	2100      	movs	r1, #0
    31de:	1e7a      	subs	r2, r7, #1
    31e0:	4197      	sbcs	r7, r2
    31e2:	4457      	add	r7, sl
    31e4:	4557      	cmp	r7, sl
    31e6:	4180      	sbcs	r0, r0
    31e8:	1909      	adds	r1, r1, r4
    31ea:	4244      	negs	r4, r0
    31ec:	190c      	adds	r4, r1, r4
    31ee:	0223      	lsls	r3, r4, #8
    31f0:	d53a      	bpl.n	3268 <__aeabi_dsub+0x244>
    31f2:	4b5d      	ldr	r3, [pc, #372]	; (3368 <__aeabi_dsub+0x344>)
    31f4:	3601      	adds	r6, #1
    31f6:	429e      	cmp	r6, r3
    31f8:	d100      	bne.n	31fc <__aeabi_dsub+0x1d8>
    31fa:	e14b      	b.n	3494 <__aeabi_dsub+0x470>
    31fc:	2201      	movs	r2, #1
    31fe:	4b5b      	ldr	r3, [pc, #364]	; (336c <__aeabi_dsub+0x348>)
    3200:	401c      	ands	r4, r3
    3202:	087b      	lsrs	r3, r7, #1
    3204:	4017      	ands	r7, r2
    3206:	431f      	orrs	r7, r3
    3208:	07e2      	lsls	r2, r4, #31
    320a:	4317      	orrs	r7, r2
    320c:	0864      	lsrs	r4, r4, #1
    320e:	e78f      	b.n	3130 <__aeabi_dsub+0x10c>
    3210:	0008      	movs	r0, r1
    3212:	4310      	orrs	r0, r2
    3214:	d000      	beq.n	3218 <__aeabi_dsub+0x1f4>
    3216:	e724      	b.n	3062 <__aeabi_dsub+0x3e>
    3218:	e721      	b.n	305e <__aeabi_dsub+0x3a>
    321a:	0023      	movs	r3, r4
    321c:	433b      	orrs	r3, r7
    321e:	d100      	bne.n	3222 <__aeabi_dsub+0x1fe>
    3220:	e1b9      	b.n	3596 <__aeabi_dsub+0x572>
    3222:	2280      	movs	r2, #128	; 0x80
    3224:	0312      	lsls	r2, r2, #12
    3226:	4314      	orrs	r4, r2
    3228:	0324      	lsls	r4, r4, #12
    322a:	0b24      	lsrs	r4, r4, #12
    322c:	e79f      	b.n	316e <__aeabi_dsub+0x14a>
    322e:	002e      	movs	r6, r5
    3230:	e77e      	b.n	3130 <__aeabi_dsub+0x10c>
    3232:	0008      	movs	r0, r1
    3234:	4310      	orrs	r0, r2
    3236:	d100      	bne.n	323a <__aeabi_dsub+0x216>
    3238:	e0ca      	b.n	33d0 <__aeabi_dsub+0x3ac>
    323a:	1e58      	subs	r0, r3, #1
    323c:	4684      	mov	ip, r0
    323e:	2800      	cmp	r0, #0
    3240:	d000      	beq.n	3244 <__aeabi_dsub+0x220>
    3242:	e0e7      	b.n	3414 <__aeabi_dsub+0x3f0>
    3244:	4452      	add	r2, sl
    3246:	4552      	cmp	r2, sl
    3248:	4180      	sbcs	r0, r0
    324a:	1864      	adds	r4, r4, r1
    324c:	4240      	negs	r0, r0
    324e:	1824      	adds	r4, r4, r0
    3250:	0017      	movs	r7, r2
    3252:	2601      	movs	r6, #1
    3254:	0223      	lsls	r3, r4, #8
    3256:	d507      	bpl.n	3268 <__aeabi_dsub+0x244>
    3258:	2602      	movs	r6, #2
    325a:	e7cf      	b.n	31fc <__aeabi_dsub+0x1d8>
    325c:	4664      	mov	r4, ip
    325e:	432c      	orrs	r4, r5
    3260:	d100      	bne.n	3264 <__aeabi_dsub+0x240>
    3262:	e1b3      	b.n	35cc <__aeabi_dsub+0x5a8>
    3264:	002c      	movs	r4, r5
    3266:	4667      	mov	r7, ip
    3268:	077b      	lsls	r3, r7, #29
    326a:	d000      	beq.n	326e <__aeabi_dsub+0x24a>
    326c:	e762      	b.n	3134 <__aeabi_dsub+0x110>
    326e:	0763      	lsls	r3, r4, #29
    3270:	08ff      	lsrs	r7, r7, #3
    3272:	431f      	orrs	r7, r3
    3274:	2501      	movs	r5, #1
    3276:	4643      	mov	r3, r8
    3278:	08e4      	lsrs	r4, r4, #3
    327a:	401d      	ands	r5, r3
    327c:	e793      	b.n	31a6 <__aeabi_dsub+0x182>
    327e:	2d00      	cmp	r5, #0
    3280:	d178      	bne.n	3374 <__aeabi_dsub+0x350>
    3282:	1c75      	adds	r5, r6, #1
    3284:	056d      	lsls	r5, r5, #21
    3286:	0d6d      	lsrs	r5, r5, #21
    3288:	2d01      	cmp	r5, #1
    328a:	dc00      	bgt.n	328e <__aeabi_dsub+0x26a>
    328c:	e0f2      	b.n	3474 <__aeabi_dsub+0x450>
    328e:	4650      	mov	r0, sl
    3290:	1a80      	subs	r0, r0, r2
    3292:	4582      	cmp	sl, r0
    3294:	41bf      	sbcs	r7, r7
    3296:	1a65      	subs	r5, r4, r1
    3298:	427f      	negs	r7, r7
    329a:	1bed      	subs	r5, r5, r7
    329c:	4684      	mov	ip, r0
    329e:	0228      	lsls	r0, r5, #8
    32a0:	d400      	bmi.n	32a4 <__aeabi_dsub+0x280>
    32a2:	e08c      	b.n	33be <__aeabi_dsub+0x39a>
    32a4:	4650      	mov	r0, sl
    32a6:	1a17      	subs	r7, r2, r0
    32a8:	42ba      	cmp	r2, r7
    32aa:	4192      	sbcs	r2, r2
    32ac:	1b0c      	subs	r4, r1, r4
    32ae:	4255      	negs	r5, r2
    32b0:	1b65      	subs	r5, r4, r5
    32b2:	4698      	mov	r8, r3
    32b4:	e714      	b.n	30e0 <__aeabi_dsub+0xbc>
    32b6:	2501      	movs	r5, #1
    32b8:	4643      	mov	r3, r8
    32ba:	2400      	movs	r4, #0
    32bc:	401d      	ands	r5, r3
    32be:	2700      	movs	r7, #0
    32c0:	e755      	b.n	316e <__aeabi_dsub+0x14a>
    32c2:	4c2a      	ldr	r4, [pc, #168]	; (336c <__aeabi_dsub+0x348>)
    32c4:	1af6      	subs	r6, r6, r3
    32c6:	402c      	ands	r4, r5
    32c8:	e732      	b.n	3130 <__aeabi_dsub+0x10c>
    32ca:	003d      	movs	r5, r7
    32cc:	3828      	subs	r0, #40	; 0x28
    32ce:	4085      	lsls	r5, r0
    32d0:	2700      	movs	r7, #0
    32d2:	e717      	b.n	3104 <__aeabi_dsub+0xe0>
    32d4:	0038      	movs	r0, r7
    32d6:	f000 fa27 	bl	3728 <__clzsi2>
    32da:	3020      	adds	r0, #32
    32dc:	e706      	b.n	30ec <__aeabi_dsub+0xc8>
    32de:	430a      	orrs	r2, r1
    32e0:	0017      	movs	r7, r2
    32e2:	2100      	movs	r1, #0
    32e4:	1e7a      	subs	r2, r7, #1
    32e6:	4197      	sbcs	r7, r2
    32e8:	e6ee      	b.n	30c8 <__aeabi_dsub+0xa4>
    32ea:	2b00      	cmp	r3, #0
    32ec:	d000      	beq.n	32f0 <__aeabi_dsub+0x2cc>
    32ee:	e0e5      	b.n	34bc <__aeabi_dsub+0x498>
    32f0:	1c73      	adds	r3, r6, #1
    32f2:	469c      	mov	ip, r3
    32f4:	055b      	lsls	r3, r3, #21
    32f6:	0d5b      	lsrs	r3, r3, #21
    32f8:	2b01      	cmp	r3, #1
    32fa:	dc00      	bgt.n	32fe <__aeabi_dsub+0x2da>
    32fc:	e09f      	b.n	343e <__aeabi_dsub+0x41a>
    32fe:	4b1a      	ldr	r3, [pc, #104]	; (3368 <__aeabi_dsub+0x344>)
    3300:	459c      	cmp	ip, r3
    3302:	d100      	bne.n	3306 <__aeabi_dsub+0x2e2>
    3304:	e0c5      	b.n	3492 <__aeabi_dsub+0x46e>
    3306:	4452      	add	r2, sl
    3308:	4552      	cmp	r2, sl
    330a:	4180      	sbcs	r0, r0
    330c:	1864      	adds	r4, r4, r1
    330e:	4240      	negs	r0, r0
    3310:	1824      	adds	r4, r4, r0
    3312:	07e7      	lsls	r7, r4, #31
    3314:	0852      	lsrs	r2, r2, #1
    3316:	4317      	orrs	r7, r2
    3318:	0864      	lsrs	r4, r4, #1
    331a:	4666      	mov	r6, ip
    331c:	e708      	b.n	3130 <__aeabi_dsub+0x10c>
    331e:	4812      	ldr	r0, [pc, #72]	; (3368 <__aeabi_dsub+0x344>)
    3320:	4285      	cmp	r5, r0
    3322:	d100      	bne.n	3326 <__aeabi_dsub+0x302>
    3324:	e085      	b.n	3432 <__aeabi_dsub+0x40e>
    3326:	001d      	movs	r5, r3
    3328:	e6bc      	b.n	30a4 <__aeabi_dsub+0x80>
    332a:	0029      	movs	r1, r5
    332c:	3e1f      	subs	r6, #31
    332e:	40f1      	lsrs	r1, r6
    3330:	2b20      	cmp	r3, #32
    3332:	d100      	bne.n	3336 <__aeabi_dsub+0x312>
    3334:	e07f      	b.n	3436 <__aeabi_dsub+0x412>
    3336:	2240      	movs	r2, #64	; 0x40
    3338:	1ad3      	subs	r3, r2, r3
    333a:	409d      	lsls	r5, r3
    333c:	432f      	orrs	r7, r5
    333e:	1e7d      	subs	r5, r7, #1
    3340:	41af      	sbcs	r7, r5
    3342:	2400      	movs	r4, #0
    3344:	430f      	orrs	r7, r1
    3346:	2600      	movs	r6, #0
    3348:	e78e      	b.n	3268 <__aeabi_dsub+0x244>
    334a:	002b      	movs	r3, r5
    334c:	000f      	movs	r7, r1
    334e:	3b20      	subs	r3, #32
    3350:	40df      	lsrs	r7, r3
    3352:	2d20      	cmp	r5, #32
    3354:	d071      	beq.n	343a <__aeabi_dsub+0x416>
    3356:	2340      	movs	r3, #64	; 0x40
    3358:	1b5d      	subs	r5, r3, r5
    335a:	40a9      	lsls	r1, r5
    335c:	430a      	orrs	r2, r1
    335e:	1e51      	subs	r1, r2, #1
    3360:	418a      	sbcs	r2, r1
    3362:	2100      	movs	r1, #0
    3364:	4317      	orrs	r7, r2
    3366:	e6af      	b.n	30c8 <__aeabi_dsub+0xa4>
    3368:	000007ff 	.word	0x000007ff
    336c:	ff7fffff 	.word	0xff7fffff
    3370:	800fffff 	.word	0x800fffff
    3374:	2e00      	cmp	r6, #0
    3376:	d03e      	beq.n	33f6 <__aeabi_dsub+0x3d2>
    3378:	4eb3      	ldr	r6, [pc, #716]	; (3648 <__aeabi_dsub+0x624>)
    337a:	45b4      	cmp	ip, r6
    337c:	d045      	beq.n	340a <__aeabi_dsub+0x3e6>
    337e:	2680      	movs	r6, #128	; 0x80
    3380:	0436      	lsls	r6, r6, #16
    3382:	426d      	negs	r5, r5
    3384:	4334      	orrs	r4, r6
    3386:	2d38      	cmp	r5, #56	; 0x38
    3388:	dd00      	ble.n	338c <__aeabi_dsub+0x368>
    338a:	e0a8      	b.n	34de <__aeabi_dsub+0x4ba>
    338c:	2d1f      	cmp	r5, #31
    338e:	dd00      	ble.n	3392 <__aeabi_dsub+0x36e>
    3390:	e11f      	b.n	35d2 <__aeabi_dsub+0x5ae>
    3392:	2620      	movs	r6, #32
    3394:	0027      	movs	r7, r4
    3396:	4650      	mov	r0, sl
    3398:	1b76      	subs	r6, r6, r5
    339a:	40b7      	lsls	r7, r6
    339c:	40e8      	lsrs	r0, r5
    339e:	4307      	orrs	r7, r0
    33a0:	4650      	mov	r0, sl
    33a2:	40b0      	lsls	r0, r6
    33a4:	1e46      	subs	r6, r0, #1
    33a6:	41b0      	sbcs	r0, r6
    33a8:	40ec      	lsrs	r4, r5
    33aa:	4338      	orrs	r0, r7
    33ac:	1a17      	subs	r7, r2, r0
    33ae:	42ba      	cmp	r2, r7
    33b0:	4192      	sbcs	r2, r2
    33b2:	1b0c      	subs	r4, r1, r4
    33b4:	4252      	negs	r2, r2
    33b6:	1aa4      	subs	r4, r4, r2
    33b8:	4666      	mov	r6, ip
    33ba:	4698      	mov	r8, r3
    33bc:	e68b      	b.n	30d6 <__aeabi_dsub+0xb2>
    33be:	4664      	mov	r4, ip
    33c0:	4667      	mov	r7, ip
    33c2:	432c      	orrs	r4, r5
    33c4:	d000      	beq.n	33c8 <__aeabi_dsub+0x3a4>
    33c6:	e68b      	b.n	30e0 <__aeabi_dsub+0xbc>
    33c8:	2500      	movs	r5, #0
    33ca:	2600      	movs	r6, #0
    33cc:	2700      	movs	r7, #0
    33ce:	e6ea      	b.n	31a6 <__aeabi_dsub+0x182>
    33d0:	001e      	movs	r6, r3
    33d2:	e6ad      	b.n	3130 <__aeabi_dsub+0x10c>
    33d4:	2b1f      	cmp	r3, #31
    33d6:	dc60      	bgt.n	349a <__aeabi_dsub+0x476>
    33d8:	2720      	movs	r7, #32
    33da:	1af8      	subs	r0, r7, r3
    33dc:	000f      	movs	r7, r1
    33de:	4684      	mov	ip, r0
    33e0:	4087      	lsls	r7, r0
    33e2:	0010      	movs	r0, r2
    33e4:	40d8      	lsrs	r0, r3
    33e6:	4307      	orrs	r7, r0
    33e8:	4660      	mov	r0, ip
    33ea:	4082      	lsls	r2, r0
    33ec:	1e50      	subs	r0, r2, #1
    33ee:	4182      	sbcs	r2, r0
    33f0:	40d9      	lsrs	r1, r3
    33f2:	4317      	orrs	r7, r2
    33f4:	e6f5      	b.n	31e2 <__aeabi_dsub+0x1be>
    33f6:	0026      	movs	r6, r4
    33f8:	4650      	mov	r0, sl
    33fa:	4306      	orrs	r6, r0
    33fc:	d005      	beq.n	340a <__aeabi_dsub+0x3e6>
    33fe:	43ed      	mvns	r5, r5
    3400:	2d00      	cmp	r5, #0
    3402:	d0d3      	beq.n	33ac <__aeabi_dsub+0x388>
    3404:	4e90      	ldr	r6, [pc, #576]	; (3648 <__aeabi_dsub+0x624>)
    3406:	45b4      	cmp	ip, r6
    3408:	d1bd      	bne.n	3386 <__aeabi_dsub+0x362>
    340a:	000c      	movs	r4, r1
    340c:	0017      	movs	r7, r2
    340e:	4666      	mov	r6, ip
    3410:	4698      	mov	r8, r3
    3412:	e68d      	b.n	3130 <__aeabi_dsub+0x10c>
    3414:	488c      	ldr	r0, [pc, #560]	; (3648 <__aeabi_dsub+0x624>)
    3416:	4283      	cmp	r3, r0
    3418:	d00b      	beq.n	3432 <__aeabi_dsub+0x40e>
    341a:	4663      	mov	r3, ip
    341c:	e6d9      	b.n	31d2 <__aeabi_dsub+0x1ae>
    341e:	2d00      	cmp	r5, #0
    3420:	d000      	beq.n	3424 <__aeabi_dsub+0x400>
    3422:	e096      	b.n	3552 <__aeabi_dsub+0x52e>
    3424:	0008      	movs	r0, r1
    3426:	4310      	orrs	r0, r2
    3428:	d100      	bne.n	342c <__aeabi_dsub+0x408>
    342a:	e0e2      	b.n	35f2 <__aeabi_dsub+0x5ce>
    342c:	000c      	movs	r4, r1
    342e:	0017      	movs	r7, r2
    3430:	4698      	mov	r8, r3
    3432:	4e85      	ldr	r6, [pc, #532]	; (3648 <__aeabi_dsub+0x624>)
    3434:	e67c      	b.n	3130 <__aeabi_dsub+0x10c>
    3436:	2500      	movs	r5, #0
    3438:	e780      	b.n	333c <__aeabi_dsub+0x318>
    343a:	2100      	movs	r1, #0
    343c:	e78e      	b.n	335c <__aeabi_dsub+0x338>
    343e:	0023      	movs	r3, r4
    3440:	4650      	mov	r0, sl
    3442:	4303      	orrs	r3, r0
    3444:	2e00      	cmp	r6, #0
    3446:	d000      	beq.n	344a <__aeabi_dsub+0x426>
    3448:	e0a8      	b.n	359c <__aeabi_dsub+0x578>
    344a:	2b00      	cmp	r3, #0
    344c:	d100      	bne.n	3450 <__aeabi_dsub+0x42c>
    344e:	e0de      	b.n	360e <__aeabi_dsub+0x5ea>
    3450:	000b      	movs	r3, r1
    3452:	4313      	orrs	r3, r2
    3454:	d100      	bne.n	3458 <__aeabi_dsub+0x434>
    3456:	e66b      	b.n	3130 <__aeabi_dsub+0x10c>
    3458:	4452      	add	r2, sl
    345a:	4552      	cmp	r2, sl
    345c:	4180      	sbcs	r0, r0
    345e:	1864      	adds	r4, r4, r1
    3460:	4240      	negs	r0, r0
    3462:	1824      	adds	r4, r4, r0
    3464:	0017      	movs	r7, r2
    3466:	0223      	lsls	r3, r4, #8
    3468:	d400      	bmi.n	346c <__aeabi_dsub+0x448>
    346a:	e6fd      	b.n	3268 <__aeabi_dsub+0x244>
    346c:	4b77      	ldr	r3, [pc, #476]	; (364c <__aeabi_dsub+0x628>)
    346e:	4666      	mov	r6, ip
    3470:	401c      	ands	r4, r3
    3472:	e65d      	b.n	3130 <__aeabi_dsub+0x10c>
    3474:	0025      	movs	r5, r4
    3476:	4650      	mov	r0, sl
    3478:	4305      	orrs	r5, r0
    347a:	2e00      	cmp	r6, #0
    347c:	d1cf      	bne.n	341e <__aeabi_dsub+0x3fa>
    347e:	2d00      	cmp	r5, #0
    3480:	d14f      	bne.n	3522 <__aeabi_dsub+0x4fe>
    3482:	000c      	movs	r4, r1
    3484:	4314      	orrs	r4, r2
    3486:	d100      	bne.n	348a <__aeabi_dsub+0x466>
    3488:	e0a0      	b.n	35cc <__aeabi_dsub+0x5a8>
    348a:	000c      	movs	r4, r1
    348c:	0017      	movs	r7, r2
    348e:	4698      	mov	r8, r3
    3490:	e64e      	b.n	3130 <__aeabi_dsub+0x10c>
    3492:	4666      	mov	r6, ip
    3494:	2400      	movs	r4, #0
    3496:	2700      	movs	r7, #0
    3498:	e685      	b.n	31a6 <__aeabi_dsub+0x182>
    349a:	001f      	movs	r7, r3
    349c:	0008      	movs	r0, r1
    349e:	3f20      	subs	r7, #32
    34a0:	40f8      	lsrs	r0, r7
    34a2:	0007      	movs	r7, r0
    34a4:	2b20      	cmp	r3, #32
    34a6:	d100      	bne.n	34aa <__aeabi_dsub+0x486>
    34a8:	e08e      	b.n	35c8 <__aeabi_dsub+0x5a4>
    34aa:	2040      	movs	r0, #64	; 0x40
    34ac:	1ac3      	subs	r3, r0, r3
    34ae:	4099      	lsls	r1, r3
    34b0:	430a      	orrs	r2, r1
    34b2:	1e51      	subs	r1, r2, #1
    34b4:	418a      	sbcs	r2, r1
    34b6:	2100      	movs	r1, #0
    34b8:	4317      	orrs	r7, r2
    34ba:	e692      	b.n	31e2 <__aeabi_dsub+0x1be>
    34bc:	2e00      	cmp	r6, #0
    34be:	d114      	bne.n	34ea <__aeabi_dsub+0x4c6>
    34c0:	0026      	movs	r6, r4
    34c2:	4650      	mov	r0, sl
    34c4:	4306      	orrs	r6, r0
    34c6:	d062      	beq.n	358e <__aeabi_dsub+0x56a>
    34c8:	43db      	mvns	r3, r3
    34ca:	2b00      	cmp	r3, #0
    34cc:	d15c      	bne.n	3588 <__aeabi_dsub+0x564>
    34ce:	1887      	adds	r7, r0, r2
    34d0:	4297      	cmp	r7, r2
    34d2:	4192      	sbcs	r2, r2
    34d4:	1864      	adds	r4, r4, r1
    34d6:	4252      	negs	r2, r2
    34d8:	18a4      	adds	r4, r4, r2
    34da:	4666      	mov	r6, ip
    34dc:	e687      	b.n	31ee <__aeabi_dsub+0x1ca>
    34de:	4650      	mov	r0, sl
    34e0:	4320      	orrs	r0, r4
    34e2:	1e44      	subs	r4, r0, #1
    34e4:	41a0      	sbcs	r0, r4
    34e6:	2400      	movs	r4, #0
    34e8:	e760      	b.n	33ac <__aeabi_dsub+0x388>
    34ea:	4e57      	ldr	r6, [pc, #348]	; (3648 <__aeabi_dsub+0x624>)
    34ec:	45b4      	cmp	ip, r6
    34ee:	d04e      	beq.n	358e <__aeabi_dsub+0x56a>
    34f0:	2680      	movs	r6, #128	; 0x80
    34f2:	0436      	lsls	r6, r6, #16
    34f4:	425b      	negs	r3, r3
    34f6:	4334      	orrs	r4, r6
    34f8:	2b38      	cmp	r3, #56	; 0x38
    34fa:	dd00      	ble.n	34fe <__aeabi_dsub+0x4da>
    34fc:	e07f      	b.n	35fe <__aeabi_dsub+0x5da>
    34fe:	2b1f      	cmp	r3, #31
    3500:	dd00      	ble.n	3504 <__aeabi_dsub+0x4e0>
    3502:	e08b      	b.n	361c <__aeabi_dsub+0x5f8>
    3504:	2620      	movs	r6, #32
    3506:	0027      	movs	r7, r4
    3508:	4650      	mov	r0, sl
    350a:	1af6      	subs	r6, r6, r3
    350c:	40b7      	lsls	r7, r6
    350e:	40d8      	lsrs	r0, r3
    3510:	4307      	orrs	r7, r0
    3512:	4650      	mov	r0, sl
    3514:	40b0      	lsls	r0, r6
    3516:	1e46      	subs	r6, r0, #1
    3518:	41b0      	sbcs	r0, r6
    351a:	4307      	orrs	r7, r0
    351c:	40dc      	lsrs	r4, r3
    351e:	18bf      	adds	r7, r7, r2
    3520:	e7d6      	b.n	34d0 <__aeabi_dsub+0x4ac>
    3522:	000d      	movs	r5, r1
    3524:	4315      	orrs	r5, r2
    3526:	d100      	bne.n	352a <__aeabi_dsub+0x506>
    3528:	e602      	b.n	3130 <__aeabi_dsub+0x10c>
    352a:	4650      	mov	r0, sl
    352c:	1a80      	subs	r0, r0, r2
    352e:	4582      	cmp	sl, r0
    3530:	41bf      	sbcs	r7, r7
    3532:	1a65      	subs	r5, r4, r1
    3534:	427f      	negs	r7, r7
    3536:	1bed      	subs	r5, r5, r7
    3538:	4684      	mov	ip, r0
    353a:	0228      	lsls	r0, r5, #8
    353c:	d400      	bmi.n	3540 <__aeabi_dsub+0x51c>
    353e:	e68d      	b.n	325c <__aeabi_dsub+0x238>
    3540:	4650      	mov	r0, sl
    3542:	1a17      	subs	r7, r2, r0
    3544:	42ba      	cmp	r2, r7
    3546:	4192      	sbcs	r2, r2
    3548:	1b0c      	subs	r4, r1, r4
    354a:	4252      	negs	r2, r2
    354c:	1aa4      	subs	r4, r4, r2
    354e:	4698      	mov	r8, r3
    3550:	e5ee      	b.n	3130 <__aeabi_dsub+0x10c>
    3552:	000d      	movs	r5, r1
    3554:	4315      	orrs	r5, r2
    3556:	d100      	bne.n	355a <__aeabi_dsub+0x536>
    3558:	e76b      	b.n	3432 <__aeabi_dsub+0x40e>
    355a:	4650      	mov	r0, sl
    355c:	0767      	lsls	r7, r4, #29
    355e:	08c0      	lsrs	r0, r0, #3
    3560:	4307      	orrs	r7, r0
    3562:	2080      	movs	r0, #128	; 0x80
    3564:	08e4      	lsrs	r4, r4, #3
    3566:	0300      	lsls	r0, r0, #12
    3568:	4204      	tst	r4, r0
    356a:	d007      	beq.n	357c <__aeabi_dsub+0x558>
    356c:	08cd      	lsrs	r5, r1, #3
    356e:	4205      	tst	r5, r0
    3570:	d104      	bne.n	357c <__aeabi_dsub+0x558>
    3572:	002c      	movs	r4, r5
    3574:	4698      	mov	r8, r3
    3576:	08d7      	lsrs	r7, r2, #3
    3578:	0749      	lsls	r1, r1, #29
    357a:	430f      	orrs	r7, r1
    357c:	0f7b      	lsrs	r3, r7, #29
    357e:	00e4      	lsls	r4, r4, #3
    3580:	431c      	orrs	r4, r3
    3582:	00ff      	lsls	r7, r7, #3
    3584:	4e30      	ldr	r6, [pc, #192]	; (3648 <__aeabi_dsub+0x624>)
    3586:	e5d3      	b.n	3130 <__aeabi_dsub+0x10c>
    3588:	4e2f      	ldr	r6, [pc, #188]	; (3648 <__aeabi_dsub+0x624>)
    358a:	45b4      	cmp	ip, r6
    358c:	d1b4      	bne.n	34f8 <__aeabi_dsub+0x4d4>
    358e:	000c      	movs	r4, r1
    3590:	0017      	movs	r7, r2
    3592:	4666      	mov	r6, ip
    3594:	e5cc      	b.n	3130 <__aeabi_dsub+0x10c>
    3596:	2700      	movs	r7, #0
    3598:	2400      	movs	r4, #0
    359a:	e5e8      	b.n	316e <__aeabi_dsub+0x14a>
    359c:	2b00      	cmp	r3, #0
    359e:	d039      	beq.n	3614 <__aeabi_dsub+0x5f0>
    35a0:	000b      	movs	r3, r1
    35a2:	4313      	orrs	r3, r2
    35a4:	d100      	bne.n	35a8 <__aeabi_dsub+0x584>
    35a6:	e744      	b.n	3432 <__aeabi_dsub+0x40e>
    35a8:	08c0      	lsrs	r0, r0, #3
    35aa:	0767      	lsls	r7, r4, #29
    35ac:	4307      	orrs	r7, r0
    35ae:	2080      	movs	r0, #128	; 0x80
    35b0:	08e4      	lsrs	r4, r4, #3
    35b2:	0300      	lsls	r0, r0, #12
    35b4:	4204      	tst	r4, r0
    35b6:	d0e1      	beq.n	357c <__aeabi_dsub+0x558>
    35b8:	08cb      	lsrs	r3, r1, #3
    35ba:	4203      	tst	r3, r0
    35bc:	d1de      	bne.n	357c <__aeabi_dsub+0x558>
    35be:	08d7      	lsrs	r7, r2, #3
    35c0:	0749      	lsls	r1, r1, #29
    35c2:	430f      	orrs	r7, r1
    35c4:	001c      	movs	r4, r3
    35c6:	e7d9      	b.n	357c <__aeabi_dsub+0x558>
    35c8:	2100      	movs	r1, #0
    35ca:	e771      	b.n	34b0 <__aeabi_dsub+0x48c>
    35cc:	2500      	movs	r5, #0
    35ce:	2700      	movs	r7, #0
    35d0:	e5e9      	b.n	31a6 <__aeabi_dsub+0x182>
    35d2:	002e      	movs	r6, r5
    35d4:	0027      	movs	r7, r4
    35d6:	3e20      	subs	r6, #32
    35d8:	40f7      	lsrs	r7, r6
    35da:	2d20      	cmp	r5, #32
    35dc:	d02f      	beq.n	363e <__aeabi_dsub+0x61a>
    35de:	2640      	movs	r6, #64	; 0x40
    35e0:	1b75      	subs	r5, r6, r5
    35e2:	40ac      	lsls	r4, r5
    35e4:	4650      	mov	r0, sl
    35e6:	4320      	orrs	r0, r4
    35e8:	1e44      	subs	r4, r0, #1
    35ea:	41a0      	sbcs	r0, r4
    35ec:	2400      	movs	r4, #0
    35ee:	4338      	orrs	r0, r7
    35f0:	e6dc      	b.n	33ac <__aeabi_dsub+0x388>
    35f2:	2480      	movs	r4, #128	; 0x80
    35f4:	2500      	movs	r5, #0
    35f6:	0324      	lsls	r4, r4, #12
    35f8:	4e13      	ldr	r6, [pc, #76]	; (3648 <__aeabi_dsub+0x624>)
    35fa:	2700      	movs	r7, #0
    35fc:	e5d3      	b.n	31a6 <__aeabi_dsub+0x182>
    35fe:	4650      	mov	r0, sl
    3600:	4320      	orrs	r0, r4
    3602:	0007      	movs	r7, r0
    3604:	1e78      	subs	r0, r7, #1
    3606:	4187      	sbcs	r7, r0
    3608:	2400      	movs	r4, #0
    360a:	18bf      	adds	r7, r7, r2
    360c:	e760      	b.n	34d0 <__aeabi_dsub+0x4ac>
    360e:	000c      	movs	r4, r1
    3610:	0017      	movs	r7, r2
    3612:	e58d      	b.n	3130 <__aeabi_dsub+0x10c>
    3614:	000c      	movs	r4, r1
    3616:	0017      	movs	r7, r2
    3618:	4e0b      	ldr	r6, [pc, #44]	; (3648 <__aeabi_dsub+0x624>)
    361a:	e589      	b.n	3130 <__aeabi_dsub+0x10c>
    361c:	001e      	movs	r6, r3
    361e:	0027      	movs	r7, r4
    3620:	3e20      	subs	r6, #32
    3622:	40f7      	lsrs	r7, r6
    3624:	2b20      	cmp	r3, #32
    3626:	d00c      	beq.n	3642 <__aeabi_dsub+0x61e>
    3628:	2640      	movs	r6, #64	; 0x40
    362a:	1af3      	subs	r3, r6, r3
    362c:	409c      	lsls	r4, r3
    362e:	4650      	mov	r0, sl
    3630:	4320      	orrs	r0, r4
    3632:	1e44      	subs	r4, r0, #1
    3634:	41a0      	sbcs	r0, r4
    3636:	4307      	orrs	r7, r0
    3638:	2400      	movs	r4, #0
    363a:	18bf      	adds	r7, r7, r2
    363c:	e748      	b.n	34d0 <__aeabi_dsub+0x4ac>
    363e:	2400      	movs	r4, #0
    3640:	e7d0      	b.n	35e4 <__aeabi_dsub+0x5c0>
    3642:	2400      	movs	r4, #0
    3644:	e7f3      	b.n	362e <__aeabi_dsub+0x60a>
    3646:	46c0      	nop			; (mov r8, r8)
    3648:	000007ff 	.word	0x000007ff
    364c:	ff7fffff 	.word	0xff7fffff

00003650 <__aeabi_d2iz>:
    3650:	b530      	push	{r4, r5, lr}
    3652:	4d13      	ldr	r5, [pc, #76]	; (36a0 <__aeabi_d2iz+0x50>)
    3654:	030a      	lsls	r2, r1, #12
    3656:	004b      	lsls	r3, r1, #1
    3658:	0b12      	lsrs	r2, r2, #12
    365a:	0d5b      	lsrs	r3, r3, #21
    365c:	0fc9      	lsrs	r1, r1, #31
    365e:	2400      	movs	r4, #0
    3660:	42ab      	cmp	r3, r5
    3662:	dd10      	ble.n	3686 <__aeabi_d2iz+0x36>
    3664:	4c0f      	ldr	r4, [pc, #60]	; (36a4 <__aeabi_d2iz+0x54>)
    3666:	42a3      	cmp	r3, r4
    3668:	dc0f      	bgt.n	368a <__aeabi_d2iz+0x3a>
    366a:	2480      	movs	r4, #128	; 0x80
    366c:	4d0e      	ldr	r5, [pc, #56]	; (36a8 <__aeabi_d2iz+0x58>)
    366e:	0364      	lsls	r4, r4, #13
    3670:	4322      	orrs	r2, r4
    3672:	1aed      	subs	r5, r5, r3
    3674:	2d1f      	cmp	r5, #31
    3676:	dd0b      	ble.n	3690 <__aeabi_d2iz+0x40>
    3678:	480c      	ldr	r0, [pc, #48]	; (36ac <__aeabi_d2iz+0x5c>)
    367a:	1ac3      	subs	r3, r0, r3
    367c:	40da      	lsrs	r2, r3
    367e:	4254      	negs	r4, r2
    3680:	2900      	cmp	r1, #0
    3682:	d100      	bne.n	3686 <__aeabi_d2iz+0x36>
    3684:	0014      	movs	r4, r2
    3686:	0020      	movs	r0, r4
    3688:	bd30      	pop	{r4, r5, pc}
    368a:	4b09      	ldr	r3, [pc, #36]	; (36b0 <__aeabi_d2iz+0x60>)
    368c:	18cc      	adds	r4, r1, r3
    368e:	e7fa      	b.n	3686 <__aeabi_d2iz+0x36>
    3690:	4c08      	ldr	r4, [pc, #32]	; (36b4 <__aeabi_d2iz+0x64>)
    3692:	40e8      	lsrs	r0, r5
    3694:	46a4      	mov	ip, r4
    3696:	4463      	add	r3, ip
    3698:	409a      	lsls	r2, r3
    369a:	4302      	orrs	r2, r0
    369c:	e7ef      	b.n	367e <__aeabi_d2iz+0x2e>
    369e:	46c0      	nop			; (mov r8, r8)
    36a0:	000003fe 	.word	0x000003fe
    36a4:	0000041d 	.word	0x0000041d
    36a8:	00000433 	.word	0x00000433
    36ac:	00000413 	.word	0x00000413
    36b0:	7fffffff 	.word	0x7fffffff
    36b4:	fffffbed 	.word	0xfffffbed

000036b8 <__aeabi_ui2d>:
    36b8:	b510      	push	{r4, lr}
    36ba:	1e04      	subs	r4, r0, #0
    36bc:	d028      	beq.n	3710 <__aeabi_ui2d+0x58>
    36be:	f000 f833 	bl	3728 <__clzsi2>
    36c2:	4b15      	ldr	r3, [pc, #84]	; (3718 <__aeabi_ui2d+0x60>)
    36c4:	4a15      	ldr	r2, [pc, #84]	; (371c <__aeabi_ui2d+0x64>)
    36c6:	1a1b      	subs	r3, r3, r0
    36c8:	1ad2      	subs	r2, r2, r3
    36ca:	2a1f      	cmp	r2, #31
    36cc:	dd15      	ble.n	36fa <__aeabi_ui2d+0x42>
    36ce:	4a14      	ldr	r2, [pc, #80]	; (3720 <__aeabi_ui2d+0x68>)
    36d0:	1ad2      	subs	r2, r2, r3
    36d2:	4094      	lsls	r4, r2
    36d4:	2200      	movs	r2, #0
    36d6:	0324      	lsls	r4, r4, #12
    36d8:	055b      	lsls	r3, r3, #21
    36da:	0b24      	lsrs	r4, r4, #12
    36dc:	0d5b      	lsrs	r3, r3, #21
    36de:	2100      	movs	r1, #0
    36e0:	0010      	movs	r0, r2
    36e2:	0324      	lsls	r4, r4, #12
    36e4:	0d0a      	lsrs	r2, r1, #20
    36e6:	0b24      	lsrs	r4, r4, #12
    36e8:	0512      	lsls	r2, r2, #20
    36ea:	4322      	orrs	r2, r4
    36ec:	4c0d      	ldr	r4, [pc, #52]	; (3724 <__aeabi_ui2d+0x6c>)
    36ee:	051b      	lsls	r3, r3, #20
    36f0:	4022      	ands	r2, r4
    36f2:	4313      	orrs	r3, r2
    36f4:	005b      	lsls	r3, r3, #1
    36f6:	0859      	lsrs	r1, r3, #1
    36f8:	bd10      	pop	{r4, pc}
    36fa:	0021      	movs	r1, r4
    36fc:	4091      	lsls	r1, r2
    36fe:	000a      	movs	r2, r1
    3700:	210b      	movs	r1, #11
    3702:	1a08      	subs	r0, r1, r0
    3704:	40c4      	lsrs	r4, r0
    3706:	055b      	lsls	r3, r3, #21
    3708:	0324      	lsls	r4, r4, #12
    370a:	0b24      	lsrs	r4, r4, #12
    370c:	0d5b      	lsrs	r3, r3, #21
    370e:	e7e6      	b.n	36de <__aeabi_ui2d+0x26>
    3710:	2300      	movs	r3, #0
    3712:	2400      	movs	r4, #0
    3714:	2200      	movs	r2, #0
    3716:	e7e2      	b.n	36de <__aeabi_ui2d+0x26>
    3718:	0000041e 	.word	0x0000041e
    371c:	00000433 	.word	0x00000433
    3720:	00000413 	.word	0x00000413
    3724:	800fffff 	.word	0x800fffff

00003728 <__clzsi2>:
    3728:	211c      	movs	r1, #28
    372a:	2301      	movs	r3, #1
    372c:	041b      	lsls	r3, r3, #16
    372e:	4298      	cmp	r0, r3
    3730:	d301      	bcc.n	3736 <__clzsi2+0xe>
    3732:	0c00      	lsrs	r0, r0, #16
    3734:	3910      	subs	r1, #16
    3736:	0a1b      	lsrs	r3, r3, #8
    3738:	4298      	cmp	r0, r3
    373a:	d301      	bcc.n	3740 <__clzsi2+0x18>
    373c:	0a00      	lsrs	r0, r0, #8
    373e:	3908      	subs	r1, #8
    3740:	091b      	lsrs	r3, r3, #4
    3742:	4298      	cmp	r0, r3
    3744:	d301      	bcc.n	374a <__clzsi2+0x22>
    3746:	0900      	lsrs	r0, r0, #4
    3748:	3904      	subs	r1, #4
    374a:	a202      	add	r2, pc, #8	; (adr r2, 3754 <__clzsi2+0x2c>)
    374c:	5c10      	ldrb	r0, [r2, r0]
    374e:	1840      	adds	r0, r0, r1
    3750:	4770      	bx	lr
    3752:	46c0      	nop			; (mov r8, r8)
    3754:	02020304 	.word	0x02020304
    3758:	01010101 	.word	0x01010101
	...

00003764 <__libc_init_array>:
    3764:	b570      	push	{r4, r5, r6, lr}
    3766:	2600      	movs	r6, #0
    3768:	4d0c      	ldr	r5, [pc, #48]	; (379c <__libc_init_array+0x38>)
    376a:	4c0d      	ldr	r4, [pc, #52]	; (37a0 <__libc_init_array+0x3c>)
    376c:	1b64      	subs	r4, r4, r5
    376e:	10a4      	asrs	r4, r4, #2
    3770:	42a6      	cmp	r6, r4
    3772:	d109      	bne.n	3788 <__libc_init_array+0x24>
    3774:	2600      	movs	r6, #0
    3776:	f001 f943 	bl	4a00 <_init>
    377a:	4d0a      	ldr	r5, [pc, #40]	; (37a4 <__libc_init_array+0x40>)
    377c:	4c0a      	ldr	r4, [pc, #40]	; (37a8 <__libc_init_array+0x44>)
    377e:	1b64      	subs	r4, r4, r5
    3780:	10a4      	asrs	r4, r4, #2
    3782:	42a6      	cmp	r6, r4
    3784:	d105      	bne.n	3792 <__libc_init_array+0x2e>
    3786:	bd70      	pop	{r4, r5, r6, pc}
    3788:	00b3      	lsls	r3, r6, #2
    378a:	58eb      	ldr	r3, [r5, r3]
    378c:	4798      	blx	r3
    378e:	3601      	adds	r6, #1
    3790:	e7ee      	b.n	3770 <__libc_init_array+0xc>
    3792:	00b3      	lsls	r3, r6, #2
    3794:	58eb      	ldr	r3, [r5, r3]
    3796:	4798      	blx	r3
    3798:	3601      	adds	r6, #1
    379a:	e7f2      	b.n	3782 <__libc_init_array+0x1e>
    379c:	00004a0c 	.word	0x00004a0c
    37a0:	00004a0c 	.word	0x00004a0c
    37a4:	00004a0c 	.word	0x00004a0c
    37a8:	00004a10 	.word	0x00004a10

000037ac <memset>:
    37ac:	0003      	movs	r3, r0
    37ae:	1882      	adds	r2, r0, r2
    37b0:	4293      	cmp	r3, r2
    37b2:	d100      	bne.n	37b6 <memset+0xa>
    37b4:	4770      	bx	lr
    37b6:	7019      	strb	r1, [r3, #0]
    37b8:	3301      	adds	r3, #1
    37ba:	e7f9      	b.n	37b0 <memset+0x4>

000037bc <iprintf>:
    37bc:	b40f      	push	{r0, r1, r2, r3}
    37be:	4b0b      	ldr	r3, [pc, #44]	; (37ec <iprintf+0x30>)
    37c0:	b513      	push	{r0, r1, r4, lr}
    37c2:	681c      	ldr	r4, [r3, #0]
    37c4:	2c00      	cmp	r4, #0
    37c6:	d005      	beq.n	37d4 <iprintf+0x18>
    37c8:	69a3      	ldr	r3, [r4, #24]
    37ca:	2b00      	cmp	r3, #0
    37cc:	d102      	bne.n	37d4 <iprintf+0x18>
    37ce:	0020      	movs	r0, r4
    37d0:	f000 faf2 	bl	3db8 <__sinit>
    37d4:	ab05      	add	r3, sp, #20
    37d6:	9a04      	ldr	r2, [sp, #16]
    37d8:	68a1      	ldr	r1, [r4, #8]
    37da:	0020      	movs	r0, r4
    37dc:	9301      	str	r3, [sp, #4]
    37de:	f000 fcc1 	bl	4164 <_vfiprintf_r>
    37e2:	bc16      	pop	{r1, r2, r4}
    37e4:	bc08      	pop	{r3}
    37e6:	b004      	add	sp, #16
    37e8:	4718      	bx	r3
    37ea:	46c0      	nop			; (mov r8, r8)
    37ec:	20000014 	.word	0x20000014

000037f0 <_puts_r>:
    37f0:	b570      	push	{r4, r5, r6, lr}
    37f2:	0005      	movs	r5, r0
    37f4:	000e      	movs	r6, r1
    37f6:	2800      	cmp	r0, #0
    37f8:	d004      	beq.n	3804 <_puts_r+0x14>
    37fa:	6983      	ldr	r3, [r0, #24]
    37fc:	2b00      	cmp	r3, #0
    37fe:	d101      	bne.n	3804 <_puts_r+0x14>
    3800:	f000 fada 	bl	3db8 <__sinit>
    3804:	69ab      	ldr	r3, [r5, #24]
    3806:	68ac      	ldr	r4, [r5, #8]
    3808:	2b00      	cmp	r3, #0
    380a:	d102      	bne.n	3812 <_puts_r+0x22>
    380c:	0028      	movs	r0, r5
    380e:	f000 fad3 	bl	3db8 <__sinit>
    3812:	4b24      	ldr	r3, [pc, #144]	; (38a4 <_puts_r+0xb4>)
    3814:	429c      	cmp	r4, r3
    3816:	d10f      	bne.n	3838 <_puts_r+0x48>
    3818:	686c      	ldr	r4, [r5, #4]
    381a:	89a3      	ldrh	r3, [r4, #12]
    381c:	071b      	lsls	r3, r3, #28
    381e:	d502      	bpl.n	3826 <_puts_r+0x36>
    3820:	6923      	ldr	r3, [r4, #16]
    3822:	2b00      	cmp	r3, #0
    3824:	d120      	bne.n	3868 <_puts_r+0x78>
    3826:	0021      	movs	r1, r4
    3828:	0028      	movs	r0, r5
    382a:	f000 f957 	bl	3adc <__swsetup_r>
    382e:	2800      	cmp	r0, #0
    3830:	d01a      	beq.n	3868 <_puts_r+0x78>
    3832:	2001      	movs	r0, #1
    3834:	4240      	negs	r0, r0
    3836:	bd70      	pop	{r4, r5, r6, pc}
    3838:	4b1b      	ldr	r3, [pc, #108]	; (38a8 <_puts_r+0xb8>)
    383a:	429c      	cmp	r4, r3
    383c:	d101      	bne.n	3842 <_puts_r+0x52>
    383e:	68ac      	ldr	r4, [r5, #8]
    3840:	e7eb      	b.n	381a <_puts_r+0x2a>
    3842:	4b1a      	ldr	r3, [pc, #104]	; (38ac <_puts_r+0xbc>)
    3844:	429c      	cmp	r4, r3
    3846:	d1e8      	bne.n	381a <_puts_r+0x2a>
    3848:	68ec      	ldr	r4, [r5, #12]
    384a:	e7e6      	b.n	381a <_puts_r+0x2a>
    384c:	3b01      	subs	r3, #1
    384e:	3601      	adds	r6, #1
    3850:	60a3      	str	r3, [r4, #8]
    3852:	2b00      	cmp	r3, #0
    3854:	da04      	bge.n	3860 <_puts_r+0x70>
    3856:	69a2      	ldr	r2, [r4, #24]
    3858:	4293      	cmp	r3, r2
    385a:	db16      	blt.n	388a <_puts_r+0x9a>
    385c:	290a      	cmp	r1, #10
    385e:	d014      	beq.n	388a <_puts_r+0x9a>
    3860:	6823      	ldr	r3, [r4, #0]
    3862:	1c5a      	adds	r2, r3, #1
    3864:	6022      	str	r2, [r4, #0]
    3866:	7019      	strb	r1, [r3, #0]
    3868:	7831      	ldrb	r1, [r6, #0]
    386a:	68a3      	ldr	r3, [r4, #8]
    386c:	2900      	cmp	r1, #0
    386e:	d1ed      	bne.n	384c <_puts_r+0x5c>
    3870:	3b01      	subs	r3, #1
    3872:	60a3      	str	r3, [r4, #8]
    3874:	2b00      	cmp	r3, #0
    3876:	da0f      	bge.n	3898 <_puts_r+0xa8>
    3878:	0022      	movs	r2, r4
    387a:	310a      	adds	r1, #10
    387c:	0028      	movs	r0, r5
    387e:	f000 f8d7 	bl	3a30 <__swbuf_r>
    3882:	1c43      	adds	r3, r0, #1
    3884:	d0d5      	beq.n	3832 <_puts_r+0x42>
    3886:	200a      	movs	r0, #10
    3888:	e7d5      	b.n	3836 <_puts_r+0x46>
    388a:	0022      	movs	r2, r4
    388c:	0028      	movs	r0, r5
    388e:	f000 f8cf 	bl	3a30 <__swbuf_r>
    3892:	1c43      	adds	r3, r0, #1
    3894:	d1e8      	bne.n	3868 <_puts_r+0x78>
    3896:	e7cc      	b.n	3832 <_puts_r+0x42>
    3898:	200a      	movs	r0, #10
    389a:	6823      	ldr	r3, [r4, #0]
    389c:	1c5a      	adds	r2, r3, #1
    389e:	6022      	str	r2, [r4, #0]
    38a0:	7018      	strb	r0, [r3, #0]
    38a2:	e7c8      	b.n	3836 <_puts_r+0x46>
    38a4:	0000498c 	.word	0x0000498c
    38a8:	000049ac 	.word	0x000049ac
    38ac:	0000496c 	.word	0x0000496c

000038b0 <puts>:
    38b0:	b510      	push	{r4, lr}
    38b2:	4b03      	ldr	r3, [pc, #12]	; (38c0 <puts+0x10>)
    38b4:	0001      	movs	r1, r0
    38b6:	6818      	ldr	r0, [r3, #0]
    38b8:	f7ff ff9a 	bl	37f0 <_puts_r>
    38bc:	bd10      	pop	{r4, pc}
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	20000014 	.word	0x20000014

000038c4 <setbuf>:
    38c4:	424a      	negs	r2, r1
    38c6:	414a      	adcs	r2, r1
    38c8:	2380      	movs	r3, #128	; 0x80
    38ca:	b510      	push	{r4, lr}
    38cc:	0052      	lsls	r2, r2, #1
    38ce:	00db      	lsls	r3, r3, #3
    38d0:	f000 f802 	bl	38d8 <setvbuf>
    38d4:	bd10      	pop	{r4, pc}
	...

000038d8 <setvbuf>:
    38d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38da:	001d      	movs	r5, r3
    38dc:	4b4f      	ldr	r3, [pc, #316]	; (3a1c <setvbuf+0x144>)
    38de:	b085      	sub	sp, #20
    38e0:	681e      	ldr	r6, [r3, #0]
    38e2:	0004      	movs	r4, r0
    38e4:	000f      	movs	r7, r1
    38e6:	9200      	str	r2, [sp, #0]
    38e8:	2e00      	cmp	r6, #0
    38ea:	d005      	beq.n	38f8 <setvbuf+0x20>
    38ec:	69b3      	ldr	r3, [r6, #24]
    38ee:	2b00      	cmp	r3, #0
    38f0:	d102      	bne.n	38f8 <setvbuf+0x20>
    38f2:	0030      	movs	r0, r6
    38f4:	f000 fa60 	bl	3db8 <__sinit>
    38f8:	4b49      	ldr	r3, [pc, #292]	; (3a20 <setvbuf+0x148>)
    38fa:	429c      	cmp	r4, r3
    38fc:	d150      	bne.n	39a0 <setvbuf+0xc8>
    38fe:	6874      	ldr	r4, [r6, #4]
    3900:	9b00      	ldr	r3, [sp, #0]
    3902:	2b02      	cmp	r3, #2
    3904:	d005      	beq.n	3912 <setvbuf+0x3a>
    3906:	2b01      	cmp	r3, #1
    3908:	d900      	bls.n	390c <setvbuf+0x34>
    390a:	e084      	b.n	3a16 <setvbuf+0x13e>
    390c:	2d00      	cmp	r5, #0
    390e:	da00      	bge.n	3912 <setvbuf+0x3a>
    3910:	e081      	b.n	3a16 <setvbuf+0x13e>
    3912:	0021      	movs	r1, r4
    3914:	0030      	movs	r0, r6
    3916:	f000 f9e1 	bl	3cdc <_fflush_r>
    391a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    391c:	2900      	cmp	r1, #0
    391e:	d008      	beq.n	3932 <setvbuf+0x5a>
    3920:	0023      	movs	r3, r4
    3922:	3344      	adds	r3, #68	; 0x44
    3924:	4299      	cmp	r1, r3
    3926:	d002      	beq.n	392e <setvbuf+0x56>
    3928:	0030      	movs	r0, r6
    392a:	f000 fb4b 	bl	3fc4 <_free_r>
    392e:	2300      	movs	r3, #0
    3930:	6363      	str	r3, [r4, #52]	; 0x34
    3932:	2300      	movs	r3, #0
    3934:	61a3      	str	r3, [r4, #24]
    3936:	6063      	str	r3, [r4, #4]
    3938:	89a3      	ldrh	r3, [r4, #12]
    393a:	061b      	lsls	r3, r3, #24
    393c:	d503      	bpl.n	3946 <setvbuf+0x6e>
    393e:	6921      	ldr	r1, [r4, #16]
    3940:	0030      	movs	r0, r6
    3942:	f000 fb3f 	bl	3fc4 <_free_r>
    3946:	89a3      	ldrh	r3, [r4, #12]
    3948:	4a36      	ldr	r2, [pc, #216]	; (3a24 <setvbuf+0x14c>)
    394a:	4013      	ands	r3, r2
    394c:	81a3      	strh	r3, [r4, #12]
    394e:	9b00      	ldr	r3, [sp, #0]
    3950:	2b02      	cmp	r3, #2
    3952:	d05a      	beq.n	3a0a <setvbuf+0x132>
    3954:	ab03      	add	r3, sp, #12
    3956:	aa02      	add	r2, sp, #8
    3958:	0021      	movs	r1, r4
    395a:	0030      	movs	r0, r6
    395c:	f000 fac2 	bl	3ee4 <__swhatbuf_r>
    3960:	89a3      	ldrh	r3, [r4, #12]
    3962:	4318      	orrs	r0, r3
    3964:	81a0      	strh	r0, [r4, #12]
    3966:	2d00      	cmp	r5, #0
    3968:	d124      	bne.n	39b4 <setvbuf+0xdc>
    396a:	9d02      	ldr	r5, [sp, #8]
    396c:	0028      	movs	r0, r5
    396e:	f000 fb1f 	bl	3fb0 <malloc>
    3972:	9501      	str	r5, [sp, #4]
    3974:	1e07      	subs	r7, r0, #0
    3976:	d142      	bne.n	39fe <setvbuf+0x126>
    3978:	9b02      	ldr	r3, [sp, #8]
    397a:	9301      	str	r3, [sp, #4]
    397c:	42ab      	cmp	r3, r5
    397e:	d139      	bne.n	39f4 <setvbuf+0x11c>
    3980:	2001      	movs	r0, #1
    3982:	4240      	negs	r0, r0
    3984:	2302      	movs	r3, #2
    3986:	89a2      	ldrh	r2, [r4, #12]
    3988:	4313      	orrs	r3, r2
    398a:	81a3      	strh	r3, [r4, #12]
    398c:	2300      	movs	r3, #0
    398e:	60a3      	str	r3, [r4, #8]
    3990:	0023      	movs	r3, r4
    3992:	3347      	adds	r3, #71	; 0x47
    3994:	6023      	str	r3, [r4, #0]
    3996:	6123      	str	r3, [r4, #16]
    3998:	2301      	movs	r3, #1
    399a:	6163      	str	r3, [r4, #20]
    399c:	b005      	add	sp, #20
    399e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39a0:	4b21      	ldr	r3, [pc, #132]	; (3a28 <setvbuf+0x150>)
    39a2:	429c      	cmp	r4, r3
    39a4:	d101      	bne.n	39aa <setvbuf+0xd2>
    39a6:	68b4      	ldr	r4, [r6, #8]
    39a8:	e7aa      	b.n	3900 <setvbuf+0x28>
    39aa:	4b20      	ldr	r3, [pc, #128]	; (3a2c <setvbuf+0x154>)
    39ac:	429c      	cmp	r4, r3
    39ae:	d1a7      	bne.n	3900 <setvbuf+0x28>
    39b0:	68f4      	ldr	r4, [r6, #12]
    39b2:	e7a5      	b.n	3900 <setvbuf+0x28>
    39b4:	2f00      	cmp	r7, #0
    39b6:	d0d9      	beq.n	396c <setvbuf+0x94>
    39b8:	69b3      	ldr	r3, [r6, #24]
    39ba:	2b00      	cmp	r3, #0
    39bc:	d102      	bne.n	39c4 <setvbuf+0xec>
    39be:	0030      	movs	r0, r6
    39c0:	f000 f9fa 	bl	3db8 <__sinit>
    39c4:	9b00      	ldr	r3, [sp, #0]
    39c6:	2b01      	cmp	r3, #1
    39c8:	d103      	bne.n	39d2 <setvbuf+0xfa>
    39ca:	89a3      	ldrh	r3, [r4, #12]
    39cc:	9a00      	ldr	r2, [sp, #0]
    39ce:	431a      	orrs	r2, r3
    39d0:	81a2      	strh	r2, [r4, #12]
    39d2:	2008      	movs	r0, #8
    39d4:	89a3      	ldrh	r3, [r4, #12]
    39d6:	6027      	str	r7, [r4, #0]
    39d8:	6127      	str	r7, [r4, #16]
    39da:	6165      	str	r5, [r4, #20]
    39dc:	4018      	ands	r0, r3
    39de:	d018      	beq.n	3a12 <setvbuf+0x13a>
    39e0:	2001      	movs	r0, #1
    39e2:	4018      	ands	r0, r3
    39e4:	2300      	movs	r3, #0
    39e6:	4298      	cmp	r0, r3
    39e8:	d011      	beq.n	3a0e <setvbuf+0x136>
    39ea:	426d      	negs	r5, r5
    39ec:	60a3      	str	r3, [r4, #8]
    39ee:	61a5      	str	r5, [r4, #24]
    39f0:	0018      	movs	r0, r3
    39f2:	e7d3      	b.n	399c <setvbuf+0xc4>
    39f4:	9801      	ldr	r0, [sp, #4]
    39f6:	f000 fadb 	bl	3fb0 <malloc>
    39fa:	1e07      	subs	r7, r0, #0
    39fc:	d0c0      	beq.n	3980 <setvbuf+0xa8>
    39fe:	2380      	movs	r3, #128	; 0x80
    3a00:	89a2      	ldrh	r2, [r4, #12]
    3a02:	9d01      	ldr	r5, [sp, #4]
    3a04:	4313      	orrs	r3, r2
    3a06:	81a3      	strh	r3, [r4, #12]
    3a08:	e7d6      	b.n	39b8 <setvbuf+0xe0>
    3a0a:	2000      	movs	r0, #0
    3a0c:	e7ba      	b.n	3984 <setvbuf+0xac>
    3a0e:	60a5      	str	r5, [r4, #8]
    3a10:	e7c4      	b.n	399c <setvbuf+0xc4>
    3a12:	60a0      	str	r0, [r4, #8]
    3a14:	e7c2      	b.n	399c <setvbuf+0xc4>
    3a16:	2001      	movs	r0, #1
    3a18:	4240      	negs	r0, r0
    3a1a:	e7bf      	b.n	399c <setvbuf+0xc4>
    3a1c:	20000014 	.word	0x20000014
    3a20:	0000498c 	.word	0x0000498c
    3a24:	fffff35c 	.word	0xfffff35c
    3a28:	000049ac 	.word	0x000049ac
    3a2c:	0000496c 	.word	0x0000496c

00003a30 <__swbuf_r>:
    3a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a32:	0005      	movs	r5, r0
    3a34:	000e      	movs	r6, r1
    3a36:	0014      	movs	r4, r2
    3a38:	2800      	cmp	r0, #0
    3a3a:	d004      	beq.n	3a46 <__swbuf_r+0x16>
    3a3c:	6983      	ldr	r3, [r0, #24]
    3a3e:	2b00      	cmp	r3, #0
    3a40:	d101      	bne.n	3a46 <__swbuf_r+0x16>
    3a42:	f000 f9b9 	bl	3db8 <__sinit>
    3a46:	4b22      	ldr	r3, [pc, #136]	; (3ad0 <__swbuf_r+0xa0>)
    3a48:	429c      	cmp	r4, r3
    3a4a:	d12d      	bne.n	3aa8 <__swbuf_r+0x78>
    3a4c:	686c      	ldr	r4, [r5, #4]
    3a4e:	69a3      	ldr	r3, [r4, #24]
    3a50:	60a3      	str	r3, [r4, #8]
    3a52:	89a3      	ldrh	r3, [r4, #12]
    3a54:	071b      	lsls	r3, r3, #28
    3a56:	d531      	bpl.n	3abc <__swbuf_r+0x8c>
    3a58:	6923      	ldr	r3, [r4, #16]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d02e      	beq.n	3abc <__swbuf_r+0x8c>
    3a5e:	6823      	ldr	r3, [r4, #0]
    3a60:	6922      	ldr	r2, [r4, #16]
    3a62:	b2f7      	uxtb	r7, r6
    3a64:	1a98      	subs	r0, r3, r2
    3a66:	6963      	ldr	r3, [r4, #20]
    3a68:	b2f6      	uxtb	r6, r6
    3a6a:	4298      	cmp	r0, r3
    3a6c:	db05      	blt.n	3a7a <__swbuf_r+0x4a>
    3a6e:	0021      	movs	r1, r4
    3a70:	0028      	movs	r0, r5
    3a72:	f000 f933 	bl	3cdc <_fflush_r>
    3a76:	2800      	cmp	r0, #0
    3a78:	d126      	bne.n	3ac8 <__swbuf_r+0x98>
    3a7a:	68a3      	ldr	r3, [r4, #8]
    3a7c:	3001      	adds	r0, #1
    3a7e:	3b01      	subs	r3, #1
    3a80:	60a3      	str	r3, [r4, #8]
    3a82:	6823      	ldr	r3, [r4, #0]
    3a84:	1c5a      	adds	r2, r3, #1
    3a86:	6022      	str	r2, [r4, #0]
    3a88:	701f      	strb	r7, [r3, #0]
    3a8a:	6963      	ldr	r3, [r4, #20]
    3a8c:	4298      	cmp	r0, r3
    3a8e:	d004      	beq.n	3a9a <__swbuf_r+0x6a>
    3a90:	89a3      	ldrh	r3, [r4, #12]
    3a92:	07db      	lsls	r3, r3, #31
    3a94:	d51a      	bpl.n	3acc <__swbuf_r+0x9c>
    3a96:	2e0a      	cmp	r6, #10
    3a98:	d118      	bne.n	3acc <__swbuf_r+0x9c>
    3a9a:	0021      	movs	r1, r4
    3a9c:	0028      	movs	r0, r5
    3a9e:	f000 f91d 	bl	3cdc <_fflush_r>
    3aa2:	2800      	cmp	r0, #0
    3aa4:	d012      	beq.n	3acc <__swbuf_r+0x9c>
    3aa6:	e00f      	b.n	3ac8 <__swbuf_r+0x98>
    3aa8:	4b0a      	ldr	r3, [pc, #40]	; (3ad4 <__swbuf_r+0xa4>)
    3aaa:	429c      	cmp	r4, r3
    3aac:	d101      	bne.n	3ab2 <__swbuf_r+0x82>
    3aae:	68ac      	ldr	r4, [r5, #8]
    3ab0:	e7cd      	b.n	3a4e <__swbuf_r+0x1e>
    3ab2:	4b09      	ldr	r3, [pc, #36]	; (3ad8 <__swbuf_r+0xa8>)
    3ab4:	429c      	cmp	r4, r3
    3ab6:	d1ca      	bne.n	3a4e <__swbuf_r+0x1e>
    3ab8:	68ec      	ldr	r4, [r5, #12]
    3aba:	e7c8      	b.n	3a4e <__swbuf_r+0x1e>
    3abc:	0021      	movs	r1, r4
    3abe:	0028      	movs	r0, r5
    3ac0:	f000 f80c 	bl	3adc <__swsetup_r>
    3ac4:	2800      	cmp	r0, #0
    3ac6:	d0ca      	beq.n	3a5e <__swbuf_r+0x2e>
    3ac8:	2601      	movs	r6, #1
    3aca:	4276      	negs	r6, r6
    3acc:	0030      	movs	r0, r6
    3ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ad0:	0000498c 	.word	0x0000498c
    3ad4:	000049ac 	.word	0x000049ac
    3ad8:	0000496c 	.word	0x0000496c

00003adc <__swsetup_r>:
    3adc:	4b36      	ldr	r3, [pc, #216]	; (3bb8 <__swsetup_r+0xdc>)
    3ade:	b570      	push	{r4, r5, r6, lr}
    3ae0:	681d      	ldr	r5, [r3, #0]
    3ae2:	0006      	movs	r6, r0
    3ae4:	000c      	movs	r4, r1
    3ae6:	2d00      	cmp	r5, #0
    3ae8:	d005      	beq.n	3af6 <__swsetup_r+0x1a>
    3aea:	69ab      	ldr	r3, [r5, #24]
    3aec:	2b00      	cmp	r3, #0
    3aee:	d102      	bne.n	3af6 <__swsetup_r+0x1a>
    3af0:	0028      	movs	r0, r5
    3af2:	f000 f961 	bl	3db8 <__sinit>
    3af6:	4b31      	ldr	r3, [pc, #196]	; (3bbc <__swsetup_r+0xe0>)
    3af8:	429c      	cmp	r4, r3
    3afa:	d10f      	bne.n	3b1c <__swsetup_r+0x40>
    3afc:	686c      	ldr	r4, [r5, #4]
    3afe:	230c      	movs	r3, #12
    3b00:	5ee2      	ldrsh	r2, [r4, r3]
    3b02:	b293      	uxth	r3, r2
    3b04:	0719      	lsls	r1, r3, #28
    3b06:	d42d      	bmi.n	3b64 <__swsetup_r+0x88>
    3b08:	06d9      	lsls	r1, r3, #27
    3b0a:	d411      	bmi.n	3b30 <__swsetup_r+0x54>
    3b0c:	2309      	movs	r3, #9
    3b0e:	2001      	movs	r0, #1
    3b10:	6033      	str	r3, [r6, #0]
    3b12:	3337      	adds	r3, #55	; 0x37
    3b14:	4313      	orrs	r3, r2
    3b16:	81a3      	strh	r3, [r4, #12]
    3b18:	4240      	negs	r0, r0
    3b1a:	bd70      	pop	{r4, r5, r6, pc}
    3b1c:	4b28      	ldr	r3, [pc, #160]	; (3bc0 <__swsetup_r+0xe4>)
    3b1e:	429c      	cmp	r4, r3
    3b20:	d101      	bne.n	3b26 <__swsetup_r+0x4a>
    3b22:	68ac      	ldr	r4, [r5, #8]
    3b24:	e7eb      	b.n	3afe <__swsetup_r+0x22>
    3b26:	4b27      	ldr	r3, [pc, #156]	; (3bc4 <__swsetup_r+0xe8>)
    3b28:	429c      	cmp	r4, r3
    3b2a:	d1e8      	bne.n	3afe <__swsetup_r+0x22>
    3b2c:	68ec      	ldr	r4, [r5, #12]
    3b2e:	e7e6      	b.n	3afe <__swsetup_r+0x22>
    3b30:	075b      	lsls	r3, r3, #29
    3b32:	d513      	bpl.n	3b5c <__swsetup_r+0x80>
    3b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3b36:	2900      	cmp	r1, #0
    3b38:	d008      	beq.n	3b4c <__swsetup_r+0x70>
    3b3a:	0023      	movs	r3, r4
    3b3c:	3344      	adds	r3, #68	; 0x44
    3b3e:	4299      	cmp	r1, r3
    3b40:	d002      	beq.n	3b48 <__swsetup_r+0x6c>
    3b42:	0030      	movs	r0, r6
    3b44:	f000 fa3e 	bl	3fc4 <_free_r>
    3b48:	2300      	movs	r3, #0
    3b4a:	6363      	str	r3, [r4, #52]	; 0x34
    3b4c:	2224      	movs	r2, #36	; 0x24
    3b4e:	89a3      	ldrh	r3, [r4, #12]
    3b50:	4393      	bics	r3, r2
    3b52:	81a3      	strh	r3, [r4, #12]
    3b54:	2300      	movs	r3, #0
    3b56:	6063      	str	r3, [r4, #4]
    3b58:	6923      	ldr	r3, [r4, #16]
    3b5a:	6023      	str	r3, [r4, #0]
    3b5c:	2308      	movs	r3, #8
    3b5e:	89a2      	ldrh	r2, [r4, #12]
    3b60:	4313      	orrs	r3, r2
    3b62:	81a3      	strh	r3, [r4, #12]
    3b64:	6923      	ldr	r3, [r4, #16]
    3b66:	2b00      	cmp	r3, #0
    3b68:	d10b      	bne.n	3b82 <__swsetup_r+0xa6>
    3b6a:	21a0      	movs	r1, #160	; 0xa0
    3b6c:	2280      	movs	r2, #128	; 0x80
    3b6e:	89a3      	ldrh	r3, [r4, #12]
    3b70:	0089      	lsls	r1, r1, #2
    3b72:	0092      	lsls	r2, r2, #2
    3b74:	400b      	ands	r3, r1
    3b76:	4293      	cmp	r3, r2
    3b78:	d003      	beq.n	3b82 <__swsetup_r+0xa6>
    3b7a:	0021      	movs	r1, r4
    3b7c:	0030      	movs	r0, r6
    3b7e:	f000 f9d9 	bl	3f34 <__smakebuf_r>
    3b82:	2301      	movs	r3, #1
    3b84:	89a2      	ldrh	r2, [r4, #12]
    3b86:	4013      	ands	r3, r2
    3b88:	d011      	beq.n	3bae <__swsetup_r+0xd2>
    3b8a:	2300      	movs	r3, #0
    3b8c:	60a3      	str	r3, [r4, #8]
    3b8e:	6963      	ldr	r3, [r4, #20]
    3b90:	425b      	negs	r3, r3
    3b92:	61a3      	str	r3, [r4, #24]
    3b94:	2000      	movs	r0, #0
    3b96:	6923      	ldr	r3, [r4, #16]
    3b98:	4283      	cmp	r3, r0
    3b9a:	d1be      	bne.n	3b1a <__swsetup_r+0x3e>
    3b9c:	230c      	movs	r3, #12
    3b9e:	5ee2      	ldrsh	r2, [r4, r3]
    3ba0:	0613      	lsls	r3, r2, #24
    3ba2:	d5ba      	bpl.n	3b1a <__swsetup_r+0x3e>
    3ba4:	2340      	movs	r3, #64	; 0x40
    3ba6:	4313      	orrs	r3, r2
    3ba8:	81a3      	strh	r3, [r4, #12]
    3baa:	3801      	subs	r0, #1
    3bac:	e7b5      	b.n	3b1a <__swsetup_r+0x3e>
    3bae:	0792      	lsls	r2, r2, #30
    3bb0:	d400      	bmi.n	3bb4 <__swsetup_r+0xd8>
    3bb2:	6963      	ldr	r3, [r4, #20]
    3bb4:	60a3      	str	r3, [r4, #8]
    3bb6:	e7ed      	b.n	3b94 <__swsetup_r+0xb8>
    3bb8:	20000014 	.word	0x20000014
    3bbc:	0000498c 	.word	0x0000498c
    3bc0:	000049ac 	.word	0x000049ac
    3bc4:	0000496c 	.word	0x0000496c

00003bc8 <__sflush_r>:
    3bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3bca:	898a      	ldrh	r2, [r1, #12]
    3bcc:	0005      	movs	r5, r0
    3bce:	000c      	movs	r4, r1
    3bd0:	0713      	lsls	r3, r2, #28
    3bd2:	d460      	bmi.n	3c96 <__sflush_r+0xce>
    3bd4:	684b      	ldr	r3, [r1, #4]
    3bd6:	2b00      	cmp	r3, #0
    3bd8:	dc04      	bgt.n	3be4 <__sflush_r+0x1c>
    3bda:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3bdc:	2b00      	cmp	r3, #0
    3bde:	dc01      	bgt.n	3be4 <__sflush_r+0x1c>
    3be0:	2000      	movs	r0, #0
    3be2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3be4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3be6:	2f00      	cmp	r7, #0
    3be8:	d0fa      	beq.n	3be0 <__sflush_r+0x18>
    3bea:	2300      	movs	r3, #0
    3bec:	682e      	ldr	r6, [r5, #0]
    3bee:	602b      	str	r3, [r5, #0]
    3bf0:	2380      	movs	r3, #128	; 0x80
    3bf2:	015b      	lsls	r3, r3, #5
    3bf4:	401a      	ands	r2, r3
    3bf6:	d034      	beq.n	3c62 <__sflush_r+0x9a>
    3bf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3bfa:	89a3      	ldrh	r3, [r4, #12]
    3bfc:	075b      	lsls	r3, r3, #29
    3bfe:	d506      	bpl.n	3c0e <__sflush_r+0x46>
    3c00:	6863      	ldr	r3, [r4, #4]
    3c02:	1ac0      	subs	r0, r0, r3
    3c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3c06:	2b00      	cmp	r3, #0
    3c08:	d001      	beq.n	3c0e <__sflush_r+0x46>
    3c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3c0c:	1ac0      	subs	r0, r0, r3
    3c0e:	0002      	movs	r2, r0
    3c10:	6a21      	ldr	r1, [r4, #32]
    3c12:	2300      	movs	r3, #0
    3c14:	0028      	movs	r0, r5
    3c16:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3c18:	47b8      	blx	r7
    3c1a:	89a1      	ldrh	r1, [r4, #12]
    3c1c:	1c43      	adds	r3, r0, #1
    3c1e:	d106      	bne.n	3c2e <__sflush_r+0x66>
    3c20:	682b      	ldr	r3, [r5, #0]
    3c22:	2b1d      	cmp	r3, #29
    3c24:	d831      	bhi.n	3c8a <__sflush_r+0xc2>
    3c26:	4a2c      	ldr	r2, [pc, #176]	; (3cd8 <__sflush_r+0x110>)
    3c28:	40da      	lsrs	r2, r3
    3c2a:	07d3      	lsls	r3, r2, #31
    3c2c:	d52d      	bpl.n	3c8a <__sflush_r+0xc2>
    3c2e:	2300      	movs	r3, #0
    3c30:	6063      	str	r3, [r4, #4]
    3c32:	6923      	ldr	r3, [r4, #16]
    3c34:	6023      	str	r3, [r4, #0]
    3c36:	04cb      	lsls	r3, r1, #19
    3c38:	d505      	bpl.n	3c46 <__sflush_r+0x7e>
    3c3a:	1c43      	adds	r3, r0, #1
    3c3c:	d102      	bne.n	3c44 <__sflush_r+0x7c>
    3c3e:	682b      	ldr	r3, [r5, #0]
    3c40:	2b00      	cmp	r3, #0
    3c42:	d100      	bne.n	3c46 <__sflush_r+0x7e>
    3c44:	6560      	str	r0, [r4, #84]	; 0x54
    3c46:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3c48:	602e      	str	r6, [r5, #0]
    3c4a:	2900      	cmp	r1, #0
    3c4c:	d0c8      	beq.n	3be0 <__sflush_r+0x18>
    3c4e:	0023      	movs	r3, r4
    3c50:	3344      	adds	r3, #68	; 0x44
    3c52:	4299      	cmp	r1, r3
    3c54:	d002      	beq.n	3c5c <__sflush_r+0x94>
    3c56:	0028      	movs	r0, r5
    3c58:	f000 f9b4 	bl	3fc4 <_free_r>
    3c5c:	2000      	movs	r0, #0
    3c5e:	6360      	str	r0, [r4, #52]	; 0x34
    3c60:	e7bf      	b.n	3be2 <__sflush_r+0x1a>
    3c62:	2301      	movs	r3, #1
    3c64:	6a21      	ldr	r1, [r4, #32]
    3c66:	0028      	movs	r0, r5
    3c68:	47b8      	blx	r7
    3c6a:	1c43      	adds	r3, r0, #1
    3c6c:	d1c5      	bne.n	3bfa <__sflush_r+0x32>
    3c6e:	682b      	ldr	r3, [r5, #0]
    3c70:	2b00      	cmp	r3, #0
    3c72:	d0c2      	beq.n	3bfa <__sflush_r+0x32>
    3c74:	2b1d      	cmp	r3, #29
    3c76:	d001      	beq.n	3c7c <__sflush_r+0xb4>
    3c78:	2b16      	cmp	r3, #22
    3c7a:	d101      	bne.n	3c80 <__sflush_r+0xb8>
    3c7c:	602e      	str	r6, [r5, #0]
    3c7e:	e7af      	b.n	3be0 <__sflush_r+0x18>
    3c80:	2340      	movs	r3, #64	; 0x40
    3c82:	89a2      	ldrh	r2, [r4, #12]
    3c84:	4313      	orrs	r3, r2
    3c86:	81a3      	strh	r3, [r4, #12]
    3c88:	e7ab      	b.n	3be2 <__sflush_r+0x1a>
    3c8a:	2340      	movs	r3, #64	; 0x40
    3c8c:	430b      	orrs	r3, r1
    3c8e:	2001      	movs	r0, #1
    3c90:	81a3      	strh	r3, [r4, #12]
    3c92:	4240      	negs	r0, r0
    3c94:	e7a5      	b.n	3be2 <__sflush_r+0x1a>
    3c96:	690f      	ldr	r7, [r1, #16]
    3c98:	2f00      	cmp	r7, #0
    3c9a:	d0a1      	beq.n	3be0 <__sflush_r+0x18>
    3c9c:	680b      	ldr	r3, [r1, #0]
    3c9e:	600f      	str	r7, [r1, #0]
    3ca0:	1bdb      	subs	r3, r3, r7
    3ca2:	9301      	str	r3, [sp, #4]
    3ca4:	2300      	movs	r3, #0
    3ca6:	0792      	lsls	r2, r2, #30
    3ca8:	d100      	bne.n	3cac <__sflush_r+0xe4>
    3caa:	694b      	ldr	r3, [r1, #20]
    3cac:	60a3      	str	r3, [r4, #8]
    3cae:	9b01      	ldr	r3, [sp, #4]
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	dc00      	bgt.n	3cb6 <__sflush_r+0xee>
    3cb4:	e794      	b.n	3be0 <__sflush_r+0x18>
    3cb6:	9b01      	ldr	r3, [sp, #4]
    3cb8:	003a      	movs	r2, r7
    3cba:	6a21      	ldr	r1, [r4, #32]
    3cbc:	0028      	movs	r0, r5
    3cbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3cc0:	47b0      	blx	r6
    3cc2:	2800      	cmp	r0, #0
    3cc4:	dc03      	bgt.n	3cce <__sflush_r+0x106>
    3cc6:	2340      	movs	r3, #64	; 0x40
    3cc8:	89a2      	ldrh	r2, [r4, #12]
    3cca:	4313      	orrs	r3, r2
    3ccc:	e7df      	b.n	3c8e <__sflush_r+0xc6>
    3cce:	9b01      	ldr	r3, [sp, #4]
    3cd0:	183f      	adds	r7, r7, r0
    3cd2:	1a1b      	subs	r3, r3, r0
    3cd4:	9301      	str	r3, [sp, #4]
    3cd6:	e7ea      	b.n	3cae <__sflush_r+0xe6>
    3cd8:	20400001 	.word	0x20400001

00003cdc <_fflush_r>:
    3cdc:	690b      	ldr	r3, [r1, #16]
    3cde:	b570      	push	{r4, r5, r6, lr}
    3ce0:	0005      	movs	r5, r0
    3ce2:	000c      	movs	r4, r1
    3ce4:	2b00      	cmp	r3, #0
    3ce6:	d101      	bne.n	3cec <_fflush_r+0x10>
    3ce8:	2000      	movs	r0, #0
    3cea:	bd70      	pop	{r4, r5, r6, pc}
    3cec:	2800      	cmp	r0, #0
    3cee:	d004      	beq.n	3cfa <_fflush_r+0x1e>
    3cf0:	6983      	ldr	r3, [r0, #24]
    3cf2:	2b00      	cmp	r3, #0
    3cf4:	d101      	bne.n	3cfa <_fflush_r+0x1e>
    3cf6:	f000 f85f 	bl	3db8 <__sinit>
    3cfa:	4b0b      	ldr	r3, [pc, #44]	; (3d28 <_fflush_r+0x4c>)
    3cfc:	429c      	cmp	r4, r3
    3cfe:	d109      	bne.n	3d14 <_fflush_r+0x38>
    3d00:	686c      	ldr	r4, [r5, #4]
    3d02:	220c      	movs	r2, #12
    3d04:	5ea3      	ldrsh	r3, [r4, r2]
    3d06:	2b00      	cmp	r3, #0
    3d08:	d0ee      	beq.n	3ce8 <_fflush_r+0xc>
    3d0a:	0021      	movs	r1, r4
    3d0c:	0028      	movs	r0, r5
    3d0e:	f7ff ff5b 	bl	3bc8 <__sflush_r>
    3d12:	e7ea      	b.n	3cea <_fflush_r+0xe>
    3d14:	4b05      	ldr	r3, [pc, #20]	; (3d2c <_fflush_r+0x50>)
    3d16:	429c      	cmp	r4, r3
    3d18:	d101      	bne.n	3d1e <_fflush_r+0x42>
    3d1a:	68ac      	ldr	r4, [r5, #8]
    3d1c:	e7f1      	b.n	3d02 <_fflush_r+0x26>
    3d1e:	4b04      	ldr	r3, [pc, #16]	; (3d30 <_fflush_r+0x54>)
    3d20:	429c      	cmp	r4, r3
    3d22:	d1ee      	bne.n	3d02 <_fflush_r+0x26>
    3d24:	68ec      	ldr	r4, [r5, #12]
    3d26:	e7ec      	b.n	3d02 <_fflush_r+0x26>
    3d28:	0000498c 	.word	0x0000498c
    3d2c:	000049ac 	.word	0x000049ac
    3d30:	0000496c 	.word	0x0000496c

00003d34 <_cleanup_r>:
    3d34:	b510      	push	{r4, lr}
    3d36:	4902      	ldr	r1, [pc, #8]	; (3d40 <_cleanup_r+0xc>)
    3d38:	f000 f8b2 	bl	3ea0 <_fwalk_reent>
    3d3c:	bd10      	pop	{r4, pc}
    3d3e:	46c0      	nop			; (mov r8, r8)
    3d40:	00003cdd 	.word	0x00003cdd

00003d44 <std.isra.0>:
    3d44:	2300      	movs	r3, #0
    3d46:	b510      	push	{r4, lr}
    3d48:	0004      	movs	r4, r0
    3d4a:	6003      	str	r3, [r0, #0]
    3d4c:	6043      	str	r3, [r0, #4]
    3d4e:	6083      	str	r3, [r0, #8]
    3d50:	8181      	strh	r1, [r0, #12]
    3d52:	6643      	str	r3, [r0, #100]	; 0x64
    3d54:	81c2      	strh	r2, [r0, #14]
    3d56:	6103      	str	r3, [r0, #16]
    3d58:	6143      	str	r3, [r0, #20]
    3d5a:	6183      	str	r3, [r0, #24]
    3d5c:	0019      	movs	r1, r3
    3d5e:	2208      	movs	r2, #8
    3d60:	305c      	adds	r0, #92	; 0x5c
    3d62:	f7ff fd23 	bl	37ac <memset>
    3d66:	4b05      	ldr	r3, [pc, #20]	; (3d7c <std.isra.0+0x38>)
    3d68:	6224      	str	r4, [r4, #32]
    3d6a:	6263      	str	r3, [r4, #36]	; 0x24
    3d6c:	4b04      	ldr	r3, [pc, #16]	; (3d80 <std.isra.0+0x3c>)
    3d6e:	62a3      	str	r3, [r4, #40]	; 0x28
    3d70:	4b04      	ldr	r3, [pc, #16]	; (3d84 <std.isra.0+0x40>)
    3d72:	62e3      	str	r3, [r4, #44]	; 0x2c
    3d74:	4b04      	ldr	r3, [pc, #16]	; (3d88 <std.isra.0+0x44>)
    3d76:	6323      	str	r3, [r4, #48]	; 0x30
    3d78:	bd10      	pop	{r4, pc}
    3d7a:	46c0      	nop			; (mov r8, r8)
    3d7c:	000046d1 	.word	0x000046d1
    3d80:	000046f9 	.word	0x000046f9
    3d84:	00004731 	.word	0x00004731
    3d88:	0000475d 	.word	0x0000475d

00003d8c <__sfmoreglue>:
    3d8c:	b570      	push	{r4, r5, r6, lr}
    3d8e:	2568      	movs	r5, #104	; 0x68
    3d90:	1e4a      	subs	r2, r1, #1
    3d92:	4355      	muls	r5, r2
    3d94:	000e      	movs	r6, r1
    3d96:	0029      	movs	r1, r5
    3d98:	3174      	adds	r1, #116	; 0x74
    3d9a:	f000 f95d 	bl	4058 <_malloc_r>
    3d9e:	1e04      	subs	r4, r0, #0
    3da0:	d008      	beq.n	3db4 <__sfmoreglue+0x28>
    3da2:	2100      	movs	r1, #0
    3da4:	002a      	movs	r2, r5
    3da6:	6001      	str	r1, [r0, #0]
    3da8:	6046      	str	r6, [r0, #4]
    3daa:	300c      	adds	r0, #12
    3dac:	60a0      	str	r0, [r4, #8]
    3dae:	3268      	adds	r2, #104	; 0x68
    3db0:	f7ff fcfc 	bl	37ac <memset>
    3db4:	0020      	movs	r0, r4
    3db6:	bd70      	pop	{r4, r5, r6, pc}

00003db8 <__sinit>:
    3db8:	6983      	ldr	r3, [r0, #24]
    3dba:	b513      	push	{r0, r1, r4, lr}
    3dbc:	0004      	movs	r4, r0
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d128      	bne.n	3e14 <__sinit+0x5c>
    3dc2:	6483      	str	r3, [r0, #72]	; 0x48
    3dc4:	64c3      	str	r3, [r0, #76]	; 0x4c
    3dc6:	6503      	str	r3, [r0, #80]	; 0x50
    3dc8:	4b13      	ldr	r3, [pc, #76]	; (3e18 <__sinit+0x60>)
    3dca:	4a14      	ldr	r2, [pc, #80]	; (3e1c <__sinit+0x64>)
    3dcc:	681b      	ldr	r3, [r3, #0]
    3dce:	6282      	str	r2, [r0, #40]	; 0x28
    3dd0:	9301      	str	r3, [sp, #4]
    3dd2:	4298      	cmp	r0, r3
    3dd4:	d101      	bne.n	3dda <__sinit+0x22>
    3dd6:	2301      	movs	r3, #1
    3dd8:	6183      	str	r3, [r0, #24]
    3dda:	0020      	movs	r0, r4
    3ddc:	f000 f820 	bl	3e20 <__sfp>
    3de0:	6060      	str	r0, [r4, #4]
    3de2:	0020      	movs	r0, r4
    3de4:	f000 f81c 	bl	3e20 <__sfp>
    3de8:	60a0      	str	r0, [r4, #8]
    3dea:	0020      	movs	r0, r4
    3dec:	f000 f818 	bl	3e20 <__sfp>
    3df0:	2200      	movs	r2, #0
    3df2:	60e0      	str	r0, [r4, #12]
    3df4:	2104      	movs	r1, #4
    3df6:	6860      	ldr	r0, [r4, #4]
    3df8:	f7ff ffa4 	bl	3d44 <std.isra.0>
    3dfc:	2201      	movs	r2, #1
    3dfe:	2109      	movs	r1, #9
    3e00:	68a0      	ldr	r0, [r4, #8]
    3e02:	f7ff ff9f 	bl	3d44 <std.isra.0>
    3e06:	2202      	movs	r2, #2
    3e08:	2112      	movs	r1, #18
    3e0a:	68e0      	ldr	r0, [r4, #12]
    3e0c:	f7ff ff9a 	bl	3d44 <std.isra.0>
    3e10:	2301      	movs	r3, #1
    3e12:	61a3      	str	r3, [r4, #24]
    3e14:	bd13      	pop	{r0, r1, r4, pc}
    3e16:	46c0      	nop			; (mov r8, r8)
    3e18:	00004968 	.word	0x00004968
    3e1c:	00003d35 	.word	0x00003d35

00003e20 <__sfp>:
    3e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e22:	4b1e      	ldr	r3, [pc, #120]	; (3e9c <__sfp+0x7c>)
    3e24:	0007      	movs	r7, r0
    3e26:	681e      	ldr	r6, [r3, #0]
    3e28:	69b3      	ldr	r3, [r6, #24]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d102      	bne.n	3e34 <__sfp+0x14>
    3e2e:	0030      	movs	r0, r6
    3e30:	f7ff ffc2 	bl	3db8 <__sinit>
    3e34:	3648      	adds	r6, #72	; 0x48
    3e36:	68b4      	ldr	r4, [r6, #8]
    3e38:	6873      	ldr	r3, [r6, #4]
    3e3a:	3b01      	subs	r3, #1
    3e3c:	d504      	bpl.n	3e48 <__sfp+0x28>
    3e3e:	6833      	ldr	r3, [r6, #0]
    3e40:	2b00      	cmp	r3, #0
    3e42:	d007      	beq.n	3e54 <__sfp+0x34>
    3e44:	6836      	ldr	r6, [r6, #0]
    3e46:	e7f6      	b.n	3e36 <__sfp+0x16>
    3e48:	220c      	movs	r2, #12
    3e4a:	5ea5      	ldrsh	r5, [r4, r2]
    3e4c:	2d00      	cmp	r5, #0
    3e4e:	d00d      	beq.n	3e6c <__sfp+0x4c>
    3e50:	3468      	adds	r4, #104	; 0x68
    3e52:	e7f2      	b.n	3e3a <__sfp+0x1a>
    3e54:	2104      	movs	r1, #4
    3e56:	0038      	movs	r0, r7
    3e58:	f7ff ff98 	bl	3d8c <__sfmoreglue>
    3e5c:	6030      	str	r0, [r6, #0]
    3e5e:	2800      	cmp	r0, #0
    3e60:	d1f0      	bne.n	3e44 <__sfp+0x24>
    3e62:	230c      	movs	r3, #12
    3e64:	0004      	movs	r4, r0
    3e66:	603b      	str	r3, [r7, #0]
    3e68:	0020      	movs	r0, r4
    3e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e6c:	2301      	movs	r3, #1
    3e6e:	0020      	movs	r0, r4
    3e70:	425b      	negs	r3, r3
    3e72:	81e3      	strh	r3, [r4, #14]
    3e74:	3302      	adds	r3, #2
    3e76:	81a3      	strh	r3, [r4, #12]
    3e78:	6665      	str	r5, [r4, #100]	; 0x64
    3e7a:	6025      	str	r5, [r4, #0]
    3e7c:	60a5      	str	r5, [r4, #8]
    3e7e:	6065      	str	r5, [r4, #4]
    3e80:	6125      	str	r5, [r4, #16]
    3e82:	6165      	str	r5, [r4, #20]
    3e84:	61a5      	str	r5, [r4, #24]
    3e86:	2208      	movs	r2, #8
    3e88:	0029      	movs	r1, r5
    3e8a:	305c      	adds	r0, #92	; 0x5c
    3e8c:	f7ff fc8e 	bl	37ac <memset>
    3e90:	6365      	str	r5, [r4, #52]	; 0x34
    3e92:	63a5      	str	r5, [r4, #56]	; 0x38
    3e94:	64a5      	str	r5, [r4, #72]	; 0x48
    3e96:	64e5      	str	r5, [r4, #76]	; 0x4c
    3e98:	e7e6      	b.n	3e68 <__sfp+0x48>
    3e9a:	46c0      	nop			; (mov r8, r8)
    3e9c:	00004968 	.word	0x00004968

00003ea0 <_fwalk_reent>:
    3ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ea2:	0004      	movs	r4, r0
    3ea4:	0007      	movs	r7, r0
    3ea6:	2600      	movs	r6, #0
    3ea8:	9101      	str	r1, [sp, #4]
    3eaa:	3448      	adds	r4, #72	; 0x48
    3eac:	2c00      	cmp	r4, #0
    3eae:	d101      	bne.n	3eb4 <_fwalk_reent+0x14>
    3eb0:	0030      	movs	r0, r6
    3eb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3eb4:	6863      	ldr	r3, [r4, #4]
    3eb6:	68a5      	ldr	r5, [r4, #8]
    3eb8:	9300      	str	r3, [sp, #0]
    3eba:	9b00      	ldr	r3, [sp, #0]
    3ebc:	3b01      	subs	r3, #1
    3ebe:	9300      	str	r3, [sp, #0]
    3ec0:	d501      	bpl.n	3ec6 <_fwalk_reent+0x26>
    3ec2:	6824      	ldr	r4, [r4, #0]
    3ec4:	e7f2      	b.n	3eac <_fwalk_reent+0xc>
    3ec6:	89ab      	ldrh	r3, [r5, #12]
    3ec8:	2b01      	cmp	r3, #1
    3eca:	d908      	bls.n	3ede <_fwalk_reent+0x3e>
    3ecc:	220e      	movs	r2, #14
    3ece:	5eab      	ldrsh	r3, [r5, r2]
    3ed0:	3301      	adds	r3, #1
    3ed2:	d004      	beq.n	3ede <_fwalk_reent+0x3e>
    3ed4:	0029      	movs	r1, r5
    3ed6:	0038      	movs	r0, r7
    3ed8:	9b01      	ldr	r3, [sp, #4]
    3eda:	4798      	blx	r3
    3edc:	4306      	orrs	r6, r0
    3ede:	3568      	adds	r5, #104	; 0x68
    3ee0:	e7eb      	b.n	3eba <_fwalk_reent+0x1a>
	...

00003ee4 <__swhatbuf_r>:
    3ee4:	b570      	push	{r4, r5, r6, lr}
    3ee6:	000e      	movs	r6, r1
    3ee8:	001d      	movs	r5, r3
    3eea:	230e      	movs	r3, #14
    3eec:	5ec9      	ldrsh	r1, [r1, r3]
    3eee:	b090      	sub	sp, #64	; 0x40
    3ef0:	0014      	movs	r4, r2
    3ef2:	2900      	cmp	r1, #0
    3ef4:	da07      	bge.n	3f06 <__swhatbuf_r+0x22>
    3ef6:	2300      	movs	r3, #0
    3ef8:	602b      	str	r3, [r5, #0]
    3efa:	89b3      	ldrh	r3, [r6, #12]
    3efc:	061b      	lsls	r3, r3, #24
    3efe:	d411      	bmi.n	3f24 <__swhatbuf_r+0x40>
    3f00:	2380      	movs	r3, #128	; 0x80
    3f02:	00db      	lsls	r3, r3, #3
    3f04:	e00f      	b.n	3f26 <__swhatbuf_r+0x42>
    3f06:	aa01      	add	r2, sp, #4
    3f08:	f000 fc54 	bl	47b4 <_fstat_r>
    3f0c:	2800      	cmp	r0, #0
    3f0e:	dbf2      	blt.n	3ef6 <__swhatbuf_r+0x12>
    3f10:	22f0      	movs	r2, #240	; 0xf0
    3f12:	9b02      	ldr	r3, [sp, #8]
    3f14:	0212      	lsls	r2, r2, #8
    3f16:	4013      	ands	r3, r2
    3f18:	4a05      	ldr	r2, [pc, #20]	; (3f30 <__swhatbuf_r+0x4c>)
    3f1a:	189b      	adds	r3, r3, r2
    3f1c:	425a      	negs	r2, r3
    3f1e:	4153      	adcs	r3, r2
    3f20:	602b      	str	r3, [r5, #0]
    3f22:	e7ed      	b.n	3f00 <__swhatbuf_r+0x1c>
    3f24:	2340      	movs	r3, #64	; 0x40
    3f26:	2000      	movs	r0, #0
    3f28:	6023      	str	r3, [r4, #0]
    3f2a:	b010      	add	sp, #64	; 0x40
    3f2c:	bd70      	pop	{r4, r5, r6, pc}
    3f2e:	46c0      	nop			; (mov r8, r8)
    3f30:	ffffe000 	.word	0xffffe000

00003f34 <__smakebuf_r>:
    3f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3f36:	2602      	movs	r6, #2
    3f38:	898b      	ldrh	r3, [r1, #12]
    3f3a:	0005      	movs	r5, r0
    3f3c:	000c      	movs	r4, r1
    3f3e:	4233      	tst	r3, r6
    3f40:	d006      	beq.n	3f50 <__smakebuf_r+0x1c>
    3f42:	0023      	movs	r3, r4
    3f44:	3347      	adds	r3, #71	; 0x47
    3f46:	6023      	str	r3, [r4, #0]
    3f48:	6123      	str	r3, [r4, #16]
    3f4a:	2301      	movs	r3, #1
    3f4c:	6163      	str	r3, [r4, #20]
    3f4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3f50:	ab01      	add	r3, sp, #4
    3f52:	466a      	mov	r2, sp
    3f54:	f7ff ffc6 	bl	3ee4 <__swhatbuf_r>
    3f58:	9900      	ldr	r1, [sp, #0]
    3f5a:	0007      	movs	r7, r0
    3f5c:	0028      	movs	r0, r5
    3f5e:	f000 f87b 	bl	4058 <_malloc_r>
    3f62:	2800      	cmp	r0, #0
    3f64:	d106      	bne.n	3f74 <__smakebuf_r+0x40>
    3f66:	220c      	movs	r2, #12
    3f68:	5ea3      	ldrsh	r3, [r4, r2]
    3f6a:	059a      	lsls	r2, r3, #22
    3f6c:	d4ef      	bmi.n	3f4e <__smakebuf_r+0x1a>
    3f6e:	431e      	orrs	r6, r3
    3f70:	81a6      	strh	r6, [r4, #12]
    3f72:	e7e6      	b.n	3f42 <__smakebuf_r+0xe>
    3f74:	4b0d      	ldr	r3, [pc, #52]	; (3fac <__smakebuf_r+0x78>)
    3f76:	62ab      	str	r3, [r5, #40]	; 0x28
    3f78:	2380      	movs	r3, #128	; 0x80
    3f7a:	89a2      	ldrh	r2, [r4, #12]
    3f7c:	6020      	str	r0, [r4, #0]
    3f7e:	4313      	orrs	r3, r2
    3f80:	81a3      	strh	r3, [r4, #12]
    3f82:	9b00      	ldr	r3, [sp, #0]
    3f84:	6120      	str	r0, [r4, #16]
    3f86:	6163      	str	r3, [r4, #20]
    3f88:	9b01      	ldr	r3, [sp, #4]
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d00a      	beq.n	3fa4 <__smakebuf_r+0x70>
    3f8e:	230e      	movs	r3, #14
    3f90:	5ee1      	ldrsh	r1, [r4, r3]
    3f92:	0028      	movs	r0, r5
    3f94:	f000 fc20 	bl	47d8 <_isatty_r>
    3f98:	2800      	cmp	r0, #0
    3f9a:	d003      	beq.n	3fa4 <__smakebuf_r+0x70>
    3f9c:	2301      	movs	r3, #1
    3f9e:	89a2      	ldrh	r2, [r4, #12]
    3fa0:	4313      	orrs	r3, r2
    3fa2:	81a3      	strh	r3, [r4, #12]
    3fa4:	89a0      	ldrh	r0, [r4, #12]
    3fa6:	4338      	orrs	r0, r7
    3fa8:	81a0      	strh	r0, [r4, #12]
    3faa:	e7d0      	b.n	3f4e <__smakebuf_r+0x1a>
    3fac:	00003d35 	.word	0x00003d35

00003fb0 <malloc>:
    3fb0:	b510      	push	{r4, lr}
    3fb2:	4b03      	ldr	r3, [pc, #12]	; (3fc0 <malloc+0x10>)
    3fb4:	0001      	movs	r1, r0
    3fb6:	6818      	ldr	r0, [r3, #0]
    3fb8:	f000 f84e 	bl	4058 <_malloc_r>
    3fbc:	bd10      	pop	{r4, pc}
    3fbe:	46c0      	nop			; (mov r8, r8)
    3fc0:	20000014 	.word	0x20000014

00003fc4 <_free_r>:
    3fc4:	b570      	push	{r4, r5, r6, lr}
    3fc6:	0005      	movs	r5, r0
    3fc8:	2900      	cmp	r1, #0
    3fca:	d010      	beq.n	3fee <_free_r+0x2a>
    3fcc:	1f0c      	subs	r4, r1, #4
    3fce:	6823      	ldr	r3, [r4, #0]
    3fd0:	2b00      	cmp	r3, #0
    3fd2:	da00      	bge.n	3fd6 <_free_r+0x12>
    3fd4:	18e4      	adds	r4, r4, r3
    3fd6:	0028      	movs	r0, r5
    3fd8:	f000 fc2f 	bl	483a <__malloc_lock>
    3fdc:	4a1d      	ldr	r2, [pc, #116]	; (4054 <_free_r+0x90>)
    3fde:	6813      	ldr	r3, [r2, #0]
    3fe0:	2b00      	cmp	r3, #0
    3fe2:	d105      	bne.n	3ff0 <_free_r+0x2c>
    3fe4:	6063      	str	r3, [r4, #4]
    3fe6:	6014      	str	r4, [r2, #0]
    3fe8:	0028      	movs	r0, r5
    3fea:	f000 fc27 	bl	483c <__malloc_unlock>
    3fee:	bd70      	pop	{r4, r5, r6, pc}
    3ff0:	42a3      	cmp	r3, r4
    3ff2:	d909      	bls.n	4008 <_free_r+0x44>
    3ff4:	6821      	ldr	r1, [r4, #0]
    3ff6:	1860      	adds	r0, r4, r1
    3ff8:	4283      	cmp	r3, r0
    3ffa:	d1f3      	bne.n	3fe4 <_free_r+0x20>
    3ffc:	6818      	ldr	r0, [r3, #0]
    3ffe:	685b      	ldr	r3, [r3, #4]
    4000:	1841      	adds	r1, r0, r1
    4002:	6021      	str	r1, [r4, #0]
    4004:	e7ee      	b.n	3fe4 <_free_r+0x20>
    4006:	0013      	movs	r3, r2
    4008:	685a      	ldr	r2, [r3, #4]
    400a:	2a00      	cmp	r2, #0
    400c:	d001      	beq.n	4012 <_free_r+0x4e>
    400e:	42a2      	cmp	r2, r4
    4010:	d9f9      	bls.n	4006 <_free_r+0x42>
    4012:	6819      	ldr	r1, [r3, #0]
    4014:	1858      	adds	r0, r3, r1
    4016:	42a0      	cmp	r0, r4
    4018:	d10b      	bne.n	4032 <_free_r+0x6e>
    401a:	6820      	ldr	r0, [r4, #0]
    401c:	1809      	adds	r1, r1, r0
    401e:	1858      	adds	r0, r3, r1
    4020:	6019      	str	r1, [r3, #0]
    4022:	4282      	cmp	r2, r0
    4024:	d1e0      	bne.n	3fe8 <_free_r+0x24>
    4026:	6810      	ldr	r0, [r2, #0]
    4028:	6852      	ldr	r2, [r2, #4]
    402a:	1841      	adds	r1, r0, r1
    402c:	6019      	str	r1, [r3, #0]
    402e:	605a      	str	r2, [r3, #4]
    4030:	e7da      	b.n	3fe8 <_free_r+0x24>
    4032:	42a0      	cmp	r0, r4
    4034:	d902      	bls.n	403c <_free_r+0x78>
    4036:	230c      	movs	r3, #12
    4038:	602b      	str	r3, [r5, #0]
    403a:	e7d5      	b.n	3fe8 <_free_r+0x24>
    403c:	6821      	ldr	r1, [r4, #0]
    403e:	1860      	adds	r0, r4, r1
    4040:	4282      	cmp	r2, r0
    4042:	d103      	bne.n	404c <_free_r+0x88>
    4044:	6810      	ldr	r0, [r2, #0]
    4046:	6852      	ldr	r2, [r2, #4]
    4048:	1841      	adds	r1, r0, r1
    404a:	6021      	str	r1, [r4, #0]
    404c:	6062      	str	r2, [r4, #4]
    404e:	605c      	str	r4, [r3, #4]
    4050:	e7ca      	b.n	3fe8 <_free_r+0x24>
    4052:	46c0      	nop			; (mov r8, r8)
    4054:	20000110 	.word	0x20000110

00004058 <_malloc_r>:
    4058:	2303      	movs	r3, #3
    405a:	b570      	push	{r4, r5, r6, lr}
    405c:	1ccd      	adds	r5, r1, #3
    405e:	439d      	bics	r5, r3
    4060:	3508      	adds	r5, #8
    4062:	0006      	movs	r6, r0
    4064:	2d0c      	cmp	r5, #12
    4066:	d21e      	bcs.n	40a6 <_malloc_r+0x4e>
    4068:	250c      	movs	r5, #12
    406a:	42a9      	cmp	r1, r5
    406c:	d81d      	bhi.n	40aa <_malloc_r+0x52>
    406e:	0030      	movs	r0, r6
    4070:	f000 fbe3 	bl	483a <__malloc_lock>
    4074:	4a25      	ldr	r2, [pc, #148]	; (410c <_malloc_r+0xb4>)
    4076:	6814      	ldr	r4, [r2, #0]
    4078:	0021      	movs	r1, r4
    407a:	2900      	cmp	r1, #0
    407c:	d119      	bne.n	40b2 <_malloc_r+0x5a>
    407e:	4c24      	ldr	r4, [pc, #144]	; (4110 <_malloc_r+0xb8>)
    4080:	6823      	ldr	r3, [r4, #0]
    4082:	2b00      	cmp	r3, #0
    4084:	d103      	bne.n	408e <_malloc_r+0x36>
    4086:	0030      	movs	r0, r6
    4088:	f000 fb10 	bl	46ac <_sbrk_r>
    408c:	6020      	str	r0, [r4, #0]
    408e:	0029      	movs	r1, r5
    4090:	0030      	movs	r0, r6
    4092:	f000 fb0b 	bl	46ac <_sbrk_r>
    4096:	1c43      	adds	r3, r0, #1
    4098:	d12c      	bne.n	40f4 <_malloc_r+0x9c>
    409a:	230c      	movs	r3, #12
    409c:	0030      	movs	r0, r6
    409e:	6033      	str	r3, [r6, #0]
    40a0:	f000 fbcc 	bl	483c <__malloc_unlock>
    40a4:	e003      	b.n	40ae <_malloc_r+0x56>
    40a6:	2d00      	cmp	r5, #0
    40a8:	dadf      	bge.n	406a <_malloc_r+0x12>
    40aa:	230c      	movs	r3, #12
    40ac:	6033      	str	r3, [r6, #0]
    40ae:	2000      	movs	r0, #0
    40b0:	bd70      	pop	{r4, r5, r6, pc}
    40b2:	680b      	ldr	r3, [r1, #0]
    40b4:	1b5b      	subs	r3, r3, r5
    40b6:	d41a      	bmi.n	40ee <_malloc_r+0x96>
    40b8:	2b0b      	cmp	r3, #11
    40ba:	d903      	bls.n	40c4 <_malloc_r+0x6c>
    40bc:	600b      	str	r3, [r1, #0]
    40be:	18cc      	adds	r4, r1, r3
    40c0:	6025      	str	r5, [r4, #0]
    40c2:	e003      	b.n	40cc <_malloc_r+0x74>
    40c4:	428c      	cmp	r4, r1
    40c6:	d10e      	bne.n	40e6 <_malloc_r+0x8e>
    40c8:	6863      	ldr	r3, [r4, #4]
    40ca:	6013      	str	r3, [r2, #0]
    40cc:	0030      	movs	r0, r6
    40ce:	f000 fbb5 	bl	483c <__malloc_unlock>
    40d2:	0020      	movs	r0, r4
    40d4:	2207      	movs	r2, #7
    40d6:	300b      	adds	r0, #11
    40d8:	1d23      	adds	r3, r4, #4
    40da:	4390      	bics	r0, r2
    40dc:	1ac3      	subs	r3, r0, r3
    40de:	d0e7      	beq.n	40b0 <_malloc_r+0x58>
    40e0:	425a      	negs	r2, r3
    40e2:	50e2      	str	r2, [r4, r3]
    40e4:	e7e4      	b.n	40b0 <_malloc_r+0x58>
    40e6:	684b      	ldr	r3, [r1, #4]
    40e8:	6063      	str	r3, [r4, #4]
    40ea:	000c      	movs	r4, r1
    40ec:	e7ee      	b.n	40cc <_malloc_r+0x74>
    40ee:	000c      	movs	r4, r1
    40f0:	6849      	ldr	r1, [r1, #4]
    40f2:	e7c2      	b.n	407a <_malloc_r+0x22>
    40f4:	2303      	movs	r3, #3
    40f6:	1cc4      	adds	r4, r0, #3
    40f8:	439c      	bics	r4, r3
    40fa:	42a0      	cmp	r0, r4
    40fc:	d0e0      	beq.n	40c0 <_malloc_r+0x68>
    40fe:	1a21      	subs	r1, r4, r0
    4100:	0030      	movs	r0, r6
    4102:	f000 fad3 	bl	46ac <_sbrk_r>
    4106:	1c43      	adds	r3, r0, #1
    4108:	d1da      	bne.n	40c0 <_malloc_r+0x68>
    410a:	e7c6      	b.n	409a <_malloc_r+0x42>
    410c:	20000110 	.word	0x20000110
    4110:	20000114 	.word	0x20000114

00004114 <__sfputc_r>:
    4114:	6893      	ldr	r3, [r2, #8]
    4116:	b510      	push	{r4, lr}
    4118:	3b01      	subs	r3, #1
    411a:	6093      	str	r3, [r2, #8]
    411c:	2b00      	cmp	r3, #0
    411e:	da05      	bge.n	412c <__sfputc_r+0x18>
    4120:	6994      	ldr	r4, [r2, #24]
    4122:	42a3      	cmp	r3, r4
    4124:	db08      	blt.n	4138 <__sfputc_r+0x24>
    4126:	b2cb      	uxtb	r3, r1
    4128:	2b0a      	cmp	r3, #10
    412a:	d005      	beq.n	4138 <__sfputc_r+0x24>
    412c:	6813      	ldr	r3, [r2, #0]
    412e:	1c58      	adds	r0, r3, #1
    4130:	6010      	str	r0, [r2, #0]
    4132:	7019      	strb	r1, [r3, #0]
    4134:	b2c8      	uxtb	r0, r1
    4136:	bd10      	pop	{r4, pc}
    4138:	f7ff fc7a 	bl	3a30 <__swbuf_r>
    413c:	e7fb      	b.n	4136 <__sfputc_r+0x22>

0000413e <__sfputs_r>:
    413e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4140:	0006      	movs	r6, r0
    4142:	000f      	movs	r7, r1
    4144:	0014      	movs	r4, r2
    4146:	18d5      	adds	r5, r2, r3
    4148:	42ac      	cmp	r4, r5
    414a:	d101      	bne.n	4150 <__sfputs_r+0x12>
    414c:	2000      	movs	r0, #0
    414e:	e007      	b.n	4160 <__sfputs_r+0x22>
    4150:	7821      	ldrb	r1, [r4, #0]
    4152:	003a      	movs	r2, r7
    4154:	0030      	movs	r0, r6
    4156:	f7ff ffdd 	bl	4114 <__sfputc_r>
    415a:	3401      	adds	r4, #1
    415c:	1c43      	adds	r3, r0, #1
    415e:	d1f3      	bne.n	4148 <__sfputs_r+0xa>
    4160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004164 <_vfiprintf_r>:
    4164:	b5f0      	push	{r4, r5, r6, r7, lr}
    4166:	b09f      	sub	sp, #124	; 0x7c
    4168:	0006      	movs	r6, r0
    416a:	000f      	movs	r7, r1
    416c:	0014      	movs	r4, r2
    416e:	9305      	str	r3, [sp, #20]
    4170:	2800      	cmp	r0, #0
    4172:	d004      	beq.n	417e <_vfiprintf_r+0x1a>
    4174:	6983      	ldr	r3, [r0, #24]
    4176:	2b00      	cmp	r3, #0
    4178:	d101      	bne.n	417e <_vfiprintf_r+0x1a>
    417a:	f7ff fe1d 	bl	3db8 <__sinit>
    417e:	4b7f      	ldr	r3, [pc, #508]	; (437c <_vfiprintf_r+0x218>)
    4180:	429f      	cmp	r7, r3
    4182:	d15c      	bne.n	423e <_vfiprintf_r+0xda>
    4184:	6877      	ldr	r7, [r6, #4]
    4186:	89bb      	ldrh	r3, [r7, #12]
    4188:	071b      	lsls	r3, r3, #28
    418a:	d562      	bpl.n	4252 <_vfiprintf_r+0xee>
    418c:	693b      	ldr	r3, [r7, #16]
    418e:	2b00      	cmp	r3, #0
    4190:	d05f      	beq.n	4252 <_vfiprintf_r+0xee>
    4192:	2300      	movs	r3, #0
    4194:	ad06      	add	r5, sp, #24
    4196:	616b      	str	r3, [r5, #20]
    4198:	3320      	adds	r3, #32
    419a:	766b      	strb	r3, [r5, #25]
    419c:	3310      	adds	r3, #16
    419e:	76ab      	strb	r3, [r5, #26]
    41a0:	9402      	str	r4, [sp, #8]
    41a2:	9c02      	ldr	r4, [sp, #8]
    41a4:	7823      	ldrb	r3, [r4, #0]
    41a6:	2b00      	cmp	r3, #0
    41a8:	d15d      	bne.n	4266 <_vfiprintf_r+0x102>
    41aa:	9b02      	ldr	r3, [sp, #8]
    41ac:	1ae3      	subs	r3, r4, r3
    41ae:	9304      	str	r3, [sp, #16]
    41b0:	d00d      	beq.n	41ce <_vfiprintf_r+0x6a>
    41b2:	9b04      	ldr	r3, [sp, #16]
    41b4:	9a02      	ldr	r2, [sp, #8]
    41b6:	0039      	movs	r1, r7
    41b8:	0030      	movs	r0, r6
    41ba:	f7ff ffc0 	bl	413e <__sfputs_r>
    41be:	1c43      	adds	r3, r0, #1
    41c0:	d100      	bne.n	41c4 <_vfiprintf_r+0x60>
    41c2:	e0cc      	b.n	435e <_vfiprintf_r+0x1fa>
    41c4:	696a      	ldr	r2, [r5, #20]
    41c6:	9b04      	ldr	r3, [sp, #16]
    41c8:	4694      	mov	ip, r2
    41ca:	4463      	add	r3, ip
    41cc:	616b      	str	r3, [r5, #20]
    41ce:	7823      	ldrb	r3, [r4, #0]
    41d0:	2b00      	cmp	r3, #0
    41d2:	d100      	bne.n	41d6 <_vfiprintf_r+0x72>
    41d4:	e0c3      	b.n	435e <_vfiprintf_r+0x1fa>
    41d6:	2201      	movs	r2, #1
    41d8:	2300      	movs	r3, #0
    41da:	4252      	negs	r2, r2
    41dc:	606a      	str	r2, [r5, #4]
    41de:	a902      	add	r1, sp, #8
    41e0:	3254      	adds	r2, #84	; 0x54
    41e2:	1852      	adds	r2, r2, r1
    41e4:	3401      	adds	r4, #1
    41e6:	602b      	str	r3, [r5, #0]
    41e8:	60eb      	str	r3, [r5, #12]
    41ea:	60ab      	str	r3, [r5, #8]
    41ec:	7013      	strb	r3, [r2, #0]
    41ee:	65ab      	str	r3, [r5, #88]	; 0x58
    41f0:	7821      	ldrb	r1, [r4, #0]
    41f2:	2205      	movs	r2, #5
    41f4:	4862      	ldr	r0, [pc, #392]	; (4380 <_vfiprintf_r+0x21c>)
    41f6:	f000 fb15 	bl	4824 <memchr>
    41fa:	1c63      	adds	r3, r4, #1
    41fc:	469c      	mov	ip, r3
    41fe:	2800      	cmp	r0, #0
    4200:	d135      	bne.n	426e <_vfiprintf_r+0x10a>
    4202:	6829      	ldr	r1, [r5, #0]
    4204:	06cb      	lsls	r3, r1, #27
    4206:	d504      	bpl.n	4212 <_vfiprintf_r+0xae>
    4208:	2353      	movs	r3, #83	; 0x53
    420a:	aa02      	add	r2, sp, #8
    420c:	3020      	adds	r0, #32
    420e:	189b      	adds	r3, r3, r2
    4210:	7018      	strb	r0, [r3, #0]
    4212:	070b      	lsls	r3, r1, #28
    4214:	d504      	bpl.n	4220 <_vfiprintf_r+0xbc>
    4216:	2353      	movs	r3, #83	; 0x53
    4218:	202b      	movs	r0, #43	; 0x2b
    421a:	aa02      	add	r2, sp, #8
    421c:	189b      	adds	r3, r3, r2
    421e:	7018      	strb	r0, [r3, #0]
    4220:	7823      	ldrb	r3, [r4, #0]
    4222:	2b2a      	cmp	r3, #42	; 0x2a
    4224:	d02c      	beq.n	4280 <_vfiprintf_r+0x11c>
    4226:	2000      	movs	r0, #0
    4228:	210a      	movs	r1, #10
    422a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    422c:	7822      	ldrb	r2, [r4, #0]
    422e:	3a30      	subs	r2, #48	; 0x30
    4230:	2a09      	cmp	r2, #9
    4232:	d800      	bhi.n	4236 <_vfiprintf_r+0xd2>
    4234:	e06b      	b.n	430e <_vfiprintf_r+0x1aa>
    4236:	2800      	cmp	r0, #0
    4238:	d02a      	beq.n	4290 <_vfiprintf_r+0x12c>
    423a:	9309      	str	r3, [sp, #36]	; 0x24
    423c:	e028      	b.n	4290 <_vfiprintf_r+0x12c>
    423e:	4b51      	ldr	r3, [pc, #324]	; (4384 <_vfiprintf_r+0x220>)
    4240:	429f      	cmp	r7, r3
    4242:	d101      	bne.n	4248 <_vfiprintf_r+0xe4>
    4244:	68b7      	ldr	r7, [r6, #8]
    4246:	e79e      	b.n	4186 <_vfiprintf_r+0x22>
    4248:	4b4f      	ldr	r3, [pc, #316]	; (4388 <_vfiprintf_r+0x224>)
    424a:	429f      	cmp	r7, r3
    424c:	d19b      	bne.n	4186 <_vfiprintf_r+0x22>
    424e:	68f7      	ldr	r7, [r6, #12]
    4250:	e799      	b.n	4186 <_vfiprintf_r+0x22>
    4252:	0039      	movs	r1, r7
    4254:	0030      	movs	r0, r6
    4256:	f7ff fc41 	bl	3adc <__swsetup_r>
    425a:	2800      	cmp	r0, #0
    425c:	d099      	beq.n	4192 <_vfiprintf_r+0x2e>
    425e:	2001      	movs	r0, #1
    4260:	4240      	negs	r0, r0
    4262:	b01f      	add	sp, #124	; 0x7c
    4264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4266:	2b25      	cmp	r3, #37	; 0x25
    4268:	d09f      	beq.n	41aa <_vfiprintf_r+0x46>
    426a:	3401      	adds	r4, #1
    426c:	e79a      	b.n	41a4 <_vfiprintf_r+0x40>
    426e:	4b44      	ldr	r3, [pc, #272]	; (4380 <_vfiprintf_r+0x21c>)
    4270:	6829      	ldr	r1, [r5, #0]
    4272:	1ac0      	subs	r0, r0, r3
    4274:	2301      	movs	r3, #1
    4276:	4083      	lsls	r3, r0
    4278:	430b      	orrs	r3, r1
    427a:	602b      	str	r3, [r5, #0]
    427c:	4664      	mov	r4, ip
    427e:	e7b7      	b.n	41f0 <_vfiprintf_r+0x8c>
    4280:	9b05      	ldr	r3, [sp, #20]
    4282:	1d18      	adds	r0, r3, #4
    4284:	681b      	ldr	r3, [r3, #0]
    4286:	9005      	str	r0, [sp, #20]
    4288:	2b00      	cmp	r3, #0
    428a:	db3a      	blt.n	4302 <_vfiprintf_r+0x19e>
    428c:	9309      	str	r3, [sp, #36]	; 0x24
    428e:	4664      	mov	r4, ip
    4290:	7823      	ldrb	r3, [r4, #0]
    4292:	2b2e      	cmp	r3, #46	; 0x2e
    4294:	d10b      	bne.n	42ae <_vfiprintf_r+0x14a>
    4296:	7863      	ldrb	r3, [r4, #1]
    4298:	1c62      	adds	r2, r4, #1
    429a:	2b2a      	cmp	r3, #42	; 0x2a
    429c:	d13f      	bne.n	431e <_vfiprintf_r+0x1ba>
    429e:	9b05      	ldr	r3, [sp, #20]
    42a0:	3402      	adds	r4, #2
    42a2:	1d1a      	adds	r2, r3, #4
    42a4:	681b      	ldr	r3, [r3, #0]
    42a6:	9205      	str	r2, [sp, #20]
    42a8:	2b00      	cmp	r3, #0
    42aa:	db35      	blt.n	4318 <_vfiprintf_r+0x1b4>
    42ac:	9307      	str	r3, [sp, #28]
    42ae:	7821      	ldrb	r1, [r4, #0]
    42b0:	2203      	movs	r2, #3
    42b2:	4836      	ldr	r0, [pc, #216]	; (438c <_vfiprintf_r+0x228>)
    42b4:	f000 fab6 	bl	4824 <memchr>
    42b8:	2800      	cmp	r0, #0
    42ba:	d007      	beq.n	42cc <_vfiprintf_r+0x168>
    42bc:	4b33      	ldr	r3, [pc, #204]	; (438c <_vfiprintf_r+0x228>)
    42be:	682a      	ldr	r2, [r5, #0]
    42c0:	1ac0      	subs	r0, r0, r3
    42c2:	2340      	movs	r3, #64	; 0x40
    42c4:	4083      	lsls	r3, r0
    42c6:	4313      	orrs	r3, r2
    42c8:	602b      	str	r3, [r5, #0]
    42ca:	3401      	adds	r4, #1
    42cc:	7821      	ldrb	r1, [r4, #0]
    42ce:	1c63      	adds	r3, r4, #1
    42d0:	2206      	movs	r2, #6
    42d2:	482f      	ldr	r0, [pc, #188]	; (4390 <_vfiprintf_r+0x22c>)
    42d4:	9302      	str	r3, [sp, #8]
    42d6:	7629      	strb	r1, [r5, #24]
    42d8:	f000 faa4 	bl	4824 <memchr>
    42dc:	2800      	cmp	r0, #0
    42de:	d044      	beq.n	436a <_vfiprintf_r+0x206>
    42e0:	4b2c      	ldr	r3, [pc, #176]	; (4394 <_vfiprintf_r+0x230>)
    42e2:	2b00      	cmp	r3, #0
    42e4:	d12f      	bne.n	4346 <_vfiprintf_r+0x1e2>
    42e6:	6829      	ldr	r1, [r5, #0]
    42e8:	9b05      	ldr	r3, [sp, #20]
    42ea:	2207      	movs	r2, #7
    42ec:	05c9      	lsls	r1, r1, #23
    42ee:	d528      	bpl.n	4342 <_vfiprintf_r+0x1de>
    42f0:	189b      	adds	r3, r3, r2
    42f2:	4393      	bics	r3, r2
    42f4:	3308      	adds	r3, #8
    42f6:	9305      	str	r3, [sp, #20]
    42f8:	696b      	ldr	r3, [r5, #20]
    42fa:	9a03      	ldr	r2, [sp, #12]
    42fc:	189b      	adds	r3, r3, r2
    42fe:	616b      	str	r3, [r5, #20]
    4300:	e74f      	b.n	41a2 <_vfiprintf_r+0x3e>
    4302:	425b      	negs	r3, r3
    4304:	60eb      	str	r3, [r5, #12]
    4306:	2302      	movs	r3, #2
    4308:	430b      	orrs	r3, r1
    430a:	602b      	str	r3, [r5, #0]
    430c:	e7bf      	b.n	428e <_vfiprintf_r+0x12a>
    430e:	434b      	muls	r3, r1
    4310:	3401      	adds	r4, #1
    4312:	189b      	adds	r3, r3, r2
    4314:	2001      	movs	r0, #1
    4316:	e789      	b.n	422c <_vfiprintf_r+0xc8>
    4318:	2301      	movs	r3, #1
    431a:	425b      	negs	r3, r3
    431c:	e7c6      	b.n	42ac <_vfiprintf_r+0x148>
    431e:	2300      	movs	r3, #0
    4320:	0014      	movs	r4, r2
    4322:	200a      	movs	r0, #10
    4324:	001a      	movs	r2, r3
    4326:	606b      	str	r3, [r5, #4]
    4328:	7821      	ldrb	r1, [r4, #0]
    432a:	3930      	subs	r1, #48	; 0x30
    432c:	2909      	cmp	r1, #9
    432e:	d903      	bls.n	4338 <_vfiprintf_r+0x1d4>
    4330:	2b00      	cmp	r3, #0
    4332:	d0bc      	beq.n	42ae <_vfiprintf_r+0x14a>
    4334:	9207      	str	r2, [sp, #28]
    4336:	e7ba      	b.n	42ae <_vfiprintf_r+0x14a>
    4338:	4342      	muls	r2, r0
    433a:	3401      	adds	r4, #1
    433c:	1852      	adds	r2, r2, r1
    433e:	2301      	movs	r3, #1
    4340:	e7f2      	b.n	4328 <_vfiprintf_r+0x1c4>
    4342:	3307      	adds	r3, #7
    4344:	e7d5      	b.n	42f2 <_vfiprintf_r+0x18e>
    4346:	ab05      	add	r3, sp, #20
    4348:	9300      	str	r3, [sp, #0]
    434a:	003a      	movs	r2, r7
    434c:	4b12      	ldr	r3, [pc, #72]	; (4398 <_vfiprintf_r+0x234>)
    434e:	0029      	movs	r1, r5
    4350:	0030      	movs	r0, r6
    4352:	e000      	b.n	4356 <_vfiprintf_r+0x1f2>
    4354:	bf00      	nop
    4356:	9003      	str	r0, [sp, #12]
    4358:	9b03      	ldr	r3, [sp, #12]
    435a:	3301      	adds	r3, #1
    435c:	d1cc      	bne.n	42f8 <_vfiprintf_r+0x194>
    435e:	89bb      	ldrh	r3, [r7, #12]
    4360:	065b      	lsls	r3, r3, #25
    4362:	d500      	bpl.n	4366 <_vfiprintf_r+0x202>
    4364:	e77b      	b.n	425e <_vfiprintf_r+0xfa>
    4366:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4368:	e77b      	b.n	4262 <_vfiprintf_r+0xfe>
    436a:	ab05      	add	r3, sp, #20
    436c:	9300      	str	r3, [sp, #0]
    436e:	003a      	movs	r2, r7
    4370:	4b09      	ldr	r3, [pc, #36]	; (4398 <_vfiprintf_r+0x234>)
    4372:	0029      	movs	r1, r5
    4374:	0030      	movs	r0, r6
    4376:	f000 f87f 	bl	4478 <_printf_i>
    437a:	e7ec      	b.n	4356 <_vfiprintf_r+0x1f2>
    437c:	0000498c 	.word	0x0000498c
    4380:	000049cc 	.word	0x000049cc
    4384:	000049ac 	.word	0x000049ac
    4388:	0000496c 	.word	0x0000496c
    438c:	000049d2 	.word	0x000049d2
    4390:	000049d6 	.word	0x000049d6
    4394:	00000000 	.word	0x00000000
    4398:	0000413f 	.word	0x0000413f

0000439c <_printf_common>:
    439c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    439e:	0015      	movs	r5, r2
    43a0:	9301      	str	r3, [sp, #4]
    43a2:	688a      	ldr	r2, [r1, #8]
    43a4:	690b      	ldr	r3, [r1, #16]
    43a6:	9000      	str	r0, [sp, #0]
    43a8:	000c      	movs	r4, r1
    43aa:	4293      	cmp	r3, r2
    43ac:	da00      	bge.n	43b0 <_printf_common+0x14>
    43ae:	0013      	movs	r3, r2
    43b0:	0022      	movs	r2, r4
    43b2:	602b      	str	r3, [r5, #0]
    43b4:	3243      	adds	r2, #67	; 0x43
    43b6:	7812      	ldrb	r2, [r2, #0]
    43b8:	2a00      	cmp	r2, #0
    43ba:	d001      	beq.n	43c0 <_printf_common+0x24>
    43bc:	3301      	adds	r3, #1
    43be:	602b      	str	r3, [r5, #0]
    43c0:	6823      	ldr	r3, [r4, #0]
    43c2:	069b      	lsls	r3, r3, #26
    43c4:	d502      	bpl.n	43cc <_printf_common+0x30>
    43c6:	682b      	ldr	r3, [r5, #0]
    43c8:	3302      	adds	r3, #2
    43ca:	602b      	str	r3, [r5, #0]
    43cc:	2706      	movs	r7, #6
    43ce:	6823      	ldr	r3, [r4, #0]
    43d0:	401f      	ands	r7, r3
    43d2:	d027      	beq.n	4424 <_printf_common+0x88>
    43d4:	0023      	movs	r3, r4
    43d6:	3343      	adds	r3, #67	; 0x43
    43d8:	781b      	ldrb	r3, [r3, #0]
    43da:	1e5a      	subs	r2, r3, #1
    43dc:	4193      	sbcs	r3, r2
    43de:	6822      	ldr	r2, [r4, #0]
    43e0:	0692      	lsls	r2, r2, #26
    43e2:	d430      	bmi.n	4446 <_printf_common+0xaa>
    43e4:	0022      	movs	r2, r4
    43e6:	9901      	ldr	r1, [sp, #4]
    43e8:	3243      	adds	r2, #67	; 0x43
    43ea:	9800      	ldr	r0, [sp, #0]
    43ec:	9e08      	ldr	r6, [sp, #32]
    43ee:	47b0      	blx	r6
    43f0:	1c43      	adds	r3, r0, #1
    43f2:	d025      	beq.n	4440 <_printf_common+0xa4>
    43f4:	2306      	movs	r3, #6
    43f6:	6820      	ldr	r0, [r4, #0]
    43f8:	682a      	ldr	r2, [r5, #0]
    43fa:	68e1      	ldr	r1, [r4, #12]
    43fc:	4003      	ands	r3, r0
    43fe:	2500      	movs	r5, #0
    4400:	2b04      	cmp	r3, #4
    4402:	d103      	bne.n	440c <_printf_common+0x70>
    4404:	1a8d      	subs	r5, r1, r2
    4406:	43eb      	mvns	r3, r5
    4408:	17db      	asrs	r3, r3, #31
    440a:	401d      	ands	r5, r3
    440c:	68a3      	ldr	r3, [r4, #8]
    440e:	6922      	ldr	r2, [r4, #16]
    4410:	4293      	cmp	r3, r2
    4412:	dd01      	ble.n	4418 <_printf_common+0x7c>
    4414:	1a9b      	subs	r3, r3, r2
    4416:	18ed      	adds	r5, r5, r3
    4418:	2700      	movs	r7, #0
    441a:	42bd      	cmp	r5, r7
    441c:	d120      	bne.n	4460 <_printf_common+0xc4>
    441e:	2000      	movs	r0, #0
    4420:	e010      	b.n	4444 <_printf_common+0xa8>
    4422:	3701      	adds	r7, #1
    4424:	68e3      	ldr	r3, [r4, #12]
    4426:	682a      	ldr	r2, [r5, #0]
    4428:	1a9b      	subs	r3, r3, r2
    442a:	429f      	cmp	r7, r3
    442c:	dad2      	bge.n	43d4 <_printf_common+0x38>
    442e:	0022      	movs	r2, r4
    4430:	2301      	movs	r3, #1
    4432:	3219      	adds	r2, #25
    4434:	9901      	ldr	r1, [sp, #4]
    4436:	9800      	ldr	r0, [sp, #0]
    4438:	9e08      	ldr	r6, [sp, #32]
    443a:	47b0      	blx	r6
    443c:	1c43      	adds	r3, r0, #1
    443e:	d1f0      	bne.n	4422 <_printf_common+0x86>
    4440:	2001      	movs	r0, #1
    4442:	4240      	negs	r0, r0
    4444:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4446:	2030      	movs	r0, #48	; 0x30
    4448:	18e1      	adds	r1, r4, r3
    444a:	3143      	adds	r1, #67	; 0x43
    444c:	7008      	strb	r0, [r1, #0]
    444e:	0021      	movs	r1, r4
    4450:	1c5a      	adds	r2, r3, #1
    4452:	3145      	adds	r1, #69	; 0x45
    4454:	7809      	ldrb	r1, [r1, #0]
    4456:	18a2      	adds	r2, r4, r2
    4458:	3243      	adds	r2, #67	; 0x43
    445a:	3302      	adds	r3, #2
    445c:	7011      	strb	r1, [r2, #0]
    445e:	e7c1      	b.n	43e4 <_printf_common+0x48>
    4460:	0022      	movs	r2, r4
    4462:	2301      	movs	r3, #1
    4464:	321a      	adds	r2, #26
    4466:	9901      	ldr	r1, [sp, #4]
    4468:	9800      	ldr	r0, [sp, #0]
    446a:	9e08      	ldr	r6, [sp, #32]
    446c:	47b0      	blx	r6
    446e:	1c43      	adds	r3, r0, #1
    4470:	d0e6      	beq.n	4440 <_printf_common+0xa4>
    4472:	3701      	adds	r7, #1
    4474:	e7d1      	b.n	441a <_printf_common+0x7e>
	...

00004478 <_printf_i>:
    4478:	b5f0      	push	{r4, r5, r6, r7, lr}
    447a:	b08b      	sub	sp, #44	; 0x2c
    447c:	9206      	str	r2, [sp, #24]
    447e:	000a      	movs	r2, r1
    4480:	3243      	adds	r2, #67	; 0x43
    4482:	9307      	str	r3, [sp, #28]
    4484:	9005      	str	r0, [sp, #20]
    4486:	9204      	str	r2, [sp, #16]
    4488:	7e0a      	ldrb	r2, [r1, #24]
    448a:	000c      	movs	r4, r1
    448c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    448e:	2a6e      	cmp	r2, #110	; 0x6e
    4490:	d100      	bne.n	4494 <_printf_i+0x1c>
    4492:	e08f      	b.n	45b4 <_printf_i+0x13c>
    4494:	d817      	bhi.n	44c6 <_printf_i+0x4e>
    4496:	2a63      	cmp	r2, #99	; 0x63
    4498:	d02c      	beq.n	44f4 <_printf_i+0x7c>
    449a:	d808      	bhi.n	44ae <_printf_i+0x36>
    449c:	2a00      	cmp	r2, #0
    449e:	d100      	bne.n	44a2 <_printf_i+0x2a>
    44a0:	e099      	b.n	45d6 <_printf_i+0x15e>
    44a2:	2a58      	cmp	r2, #88	; 0x58
    44a4:	d054      	beq.n	4550 <_printf_i+0xd8>
    44a6:	0026      	movs	r6, r4
    44a8:	3642      	adds	r6, #66	; 0x42
    44aa:	7032      	strb	r2, [r6, #0]
    44ac:	e029      	b.n	4502 <_printf_i+0x8a>
    44ae:	2a64      	cmp	r2, #100	; 0x64
    44b0:	d001      	beq.n	44b6 <_printf_i+0x3e>
    44b2:	2a69      	cmp	r2, #105	; 0x69
    44b4:	d1f7      	bne.n	44a6 <_printf_i+0x2e>
    44b6:	6821      	ldr	r1, [r4, #0]
    44b8:	681a      	ldr	r2, [r3, #0]
    44ba:	0608      	lsls	r0, r1, #24
    44bc:	d523      	bpl.n	4506 <_printf_i+0x8e>
    44be:	1d11      	adds	r1, r2, #4
    44c0:	6019      	str	r1, [r3, #0]
    44c2:	6815      	ldr	r5, [r2, #0]
    44c4:	e025      	b.n	4512 <_printf_i+0x9a>
    44c6:	2a73      	cmp	r2, #115	; 0x73
    44c8:	d100      	bne.n	44cc <_printf_i+0x54>
    44ca:	e088      	b.n	45de <_printf_i+0x166>
    44cc:	d808      	bhi.n	44e0 <_printf_i+0x68>
    44ce:	2a6f      	cmp	r2, #111	; 0x6f
    44d0:	d029      	beq.n	4526 <_printf_i+0xae>
    44d2:	2a70      	cmp	r2, #112	; 0x70
    44d4:	d1e7      	bne.n	44a6 <_printf_i+0x2e>
    44d6:	2220      	movs	r2, #32
    44d8:	6809      	ldr	r1, [r1, #0]
    44da:	430a      	orrs	r2, r1
    44dc:	6022      	str	r2, [r4, #0]
    44de:	e003      	b.n	44e8 <_printf_i+0x70>
    44e0:	2a75      	cmp	r2, #117	; 0x75
    44e2:	d020      	beq.n	4526 <_printf_i+0xae>
    44e4:	2a78      	cmp	r2, #120	; 0x78
    44e6:	d1de      	bne.n	44a6 <_printf_i+0x2e>
    44e8:	0022      	movs	r2, r4
    44ea:	2178      	movs	r1, #120	; 0x78
    44ec:	3245      	adds	r2, #69	; 0x45
    44ee:	7011      	strb	r1, [r2, #0]
    44f0:	4a6c      	ldr	r2, [pc, #432]	; (46a4 <_printf_i+0x22c>)
    44f2:	e030      	b.n	4556 <_printf_i+0xde>
    44f4:	000e      	movs	r6, r1
    44f6:	681a      	ldr	r2, [r3, #0]
    44f8:	3642      	adds	r6, #66	; 0x42
    44fa:	1d11      	adds	r1, r2, #4
    44fc:	6019      	str	r1, [r3, #0]
    44fe:	6813      	ldr	r3, [r2, #0]
    4500:	7033      	strb	r3, [r6, #0]
    4502:	2301      	movs	r3, #1
    4504:	e079      	b.n	45fa <_printf_i+0x182>
    4506:	0649      	lsls	r1, r1, #25
    4508:	d5d9      	bpl.n	44be <_printf_i+0x46>
    450a:	1d11      	adds	r1, r2, #4
    450c:	6019      	str	r1, [r3, #0]
    450e:	2300      	movs	r3, #0
    4510:	5ed5      	ldrsh	r5, [r2, r3]
    4512:	2d00      	cmp	r5, #0
    4514:	da03      	bge.n	451e <_printf_i+0xa6>
    4516:	232d      	movs	r3, #45	; 0x2d
    4518:	9a04      	ldr	r2, [sp, #16]
    451a:	426d      	negs	r5, r5
    451c:	7013      	strb	r3, [r2, #0]
    451e:	4b62      	ldr	r3, [pc, #392]	; (46a8 <_printf_i+0x230>)
    4520:	270a      	movs	r7, #10
    4522:	9303      	str	r3, [sp, #12]
    4524:	e02f      	b.n	4586 <_printf_i+0x10e>
    4526:	6820      	ldr	r0, [r4, #0]
    4528:	6819      	ldr	r1, [r3, #0]
    452a:	0605      	lsls	r5, r0, #24
    452c:	d503      	bpl.n	4536 <_printf_i+0xbe>
    452e:	1d08      	adds	r0, r1, #4
    4530:	6018      	str	r0, [r3, #0]
    4532:	680d      	ldr	r5, [r1, #0]
    4534:	e005      	b.n	4542 <_printf_i+0xca>
    4536:	0640      	lsls	r0, r0, #25
    4538:	d5f9      	bpl.n	452e <_printf_i+0xb6>
    453a:	680d      	ldr	r5, [r1, #0]
    453c:	1d08      	adds	r0, r1, #4
    453e:	6018      	str	r0, [r3, #0]
    4540:	b2ad      	uxth	r5, r5
    4542:	4b59      	ldr	r3, [pc, #356]	; (46a8 <_printf_i+0x230>)
    4544:	2708      	movs	r7, #8
    4546:	9303      	str	r3, [sp, #12]
    4548:	2a6f      	cmp	r2, #111	; 0x6f
    454a:	d018      	beq.n	457e <_printf_i+0x106>
    454c:	270a      	movs	r7, #10
    454e:	e016      	b.n	457e <_printf_i+0x106>
    4550:	3145      	adds	r1, #69	; 0x45
    4552:	700a      	strb	r2, [r1, #0]
    4554:	4a54      	ldr	r2, [pc, #336]	; (46a8 <_printf_i+0x230>)
    4556:	9203      	str	r2, [sp, #12]
    4558:	681a      	ldr	r2, [r3, #0]
    455a:	6821      	ldr	r1, [r4, #0]
    455c:	1d10      	adds	r0, r2, #4
    455e:	6018      	str	r0, [r3, #0]
    4560:	6815      	ldr	r5, [r2, #0]
    4562:	0608      	lsls	r0, r1, #24
    4564:	d522      	bpl.n	45ac <_printf_i+0x134>
    4566:	07cb      	lsls	r3, r1, #31
    4568:	d502      	bpl.n	4570 <_printf_i+0xf8>
    456a:	2320      	movs	r3, #32
    456c:	4319      	orrs	r1, r3
    456e:	6021      	str	r1, [r4, #0]
    4570:	2710      	movs	r7, #16
    4572:	2d00      	cmp	r5, #0
    4574:	d103      	bne.n	457e <_printf_i+0x106>
    4576:	2320      	movs	r3, #32
    4578:	6822      	ldr	r2, [r4, #0]
    457a:	439a      	bics	r2, r3
    457c:	6022      	str	r2, [r4, #0]
    457e:	0023      	movs	r3, r4
    4580:	2200      	movs	r2, #0
    4582:	3343      	adds	r3, #67	; 0x43
    4584:	701a      	strb	r2, [r3, #0]
    4586:	6863      	ldr	r3, [r4, #4]
    4588:	60a3      	str	r3, [r4, #8]
    458a:	2b00      	cmp	r3, #0
    458c:	db5c      	blt.n	4648 <_printf_i+0x1d0>
    458e:	2204      	movs	r2, #4
    4590:	6821      	ldr	r1, [r4, #0]
    4592:	4391      	bics	r1, r2
    4594:	6021      	str	r1, [r4, #0]
    4596:	2d00      	cmp	r5, #0
    4598:	d158      	bne.n	464c <_printf_i+0x1d4>
    459a:	9e04      	ldr	r6, [sp, #16]
    459c:	2b00      	cmp	r3, #0
    459e:	d064      	beq.n	466a <_printf_i+0x1f2>
    45a0:	0026      	movs	r6, r4
    45a2:	9b03      	ldr	r3, [sp, #12]
    45a4:	3642      	adds	r6, #66	; 0x42
    45a6:	781b      	ldrb	r3, [r3, #0]
    45a8:	7033      	strb	r3, [r6, #0]
    45aa:	e05e      	b.n	466a <_printf_i+0x1f2>
    45ac:	0648      	lsls	r0, r1, #25
    45ae:	d5da      	bpl.n	4566 <_printf_i+0xee>
    45b0:	b2ad      	uxth	r5, r5
    45b2:	e7d8      	b.n	4566 <_printf_i+0xee>
    45b4:	6809      	ldr	r1, [r1, #0]
    45b6:	681a      	ldr	r2, [r3, #0]
    45b8:	0608      	lsls	r0, r1, #24
    45ba:	d505      	bpl.n	45c8 <_printf_i+0x150>
    45bc:	1d11      	adds	r1, r2, #4
    45be:	6019      	str	r1, [r3, #0]
    45c0:	6813      	ldr	r3, [r2, #0]
    45c2:	6962      	ldr	r2, [r4, #20]
    45c4:	601a      	str	r2, [r3, #0]
    45c6:	e006      	b.n	45d6 <_printf_i+0x15e>
    45c8:	0649      	lsls	r1, r1, #25
    45ca:	d5f7      	bpl.n	45bc <_printf_i+0x144>
    45cc:	1d11      	adds	r1, r2, #4
    45ce:	6019      	str	r1, [r3, #0]
    45d0:	6813      	ldr	r3, [r2, #0]
    45d2:	8aa2      	ldrh	r2, [r4, #20]
    45d4:	801a      	strh	r2, [r3, #0]
    45d6:	2300      	movs	r3, #0
    45d8:	9e04      	ldr	r6, [sp, #16]
    45da:	6123      	str	r3, [r4, #16]
    45dc:	e054      	b.n	4688 <_printf_i+0x210>
    45de:	681a      	ldr	r2, [r3, #0]
    45e0:	1d11      	adds	r1, r2, #4
    45e2:	6019      	str	r1, [r3, #0]
    45e4:	6816      	ldr	r6, [r2, #0]
    45e6:	2100      	movs	r1, #0
    45e8:	6862      	ldr	r2, [r4, #4]
    45ea:	0030      	movs	r0, r6
    45ec:	f000 f91a 	bl	4824 <memchr>
    45f0:	2800      	cmp	r0, #0
    45f2:	d001      	beq.n	45f8 <_printf_i+0x180>
    45f4:	1b80      	subs	r0, r0, r6
    45f6:	6060      	str	r0, [r4, #4]
    45f8:	6863      	ldr	r3, [r4, #4]
    45fa:	6123      	str	r3, [r4, #16]
    45fc:	2300      	movs	r3, #0
    45fe:	9a04      	ldr	r2, [sp, #16]
    4600:	7013      	strb	r3, [r2, #0]
    4602:	e041      	b.n	4688 <_printf_i+0x210>
    4604:	6923      	ldr	r3, [r4, #16]
    4606:	0032      	movs	r2, r6
    4608:	9906      	ldr	r1, [sp, #24]
    460a:	9805      	ldr	r0, [sp, #20]
    460c:	9d07      	ldr	r5, [sp, #28]
    460e:	47a8      	blx	r5
    4610:	1c43      	adds	r3, r0, #1
    4612:	d043      	beq.n	469c <_printf_i+0x224>
    4614:	6823      	ldr	r3, [r4, #0]
    4616:	2500      	movs	r5, #0
    4618:	079b      	lsls	r3, r3, #30
    461a:	d40f      	bmi.n	463c <_printf_i+0x1c4>
    461c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    461e:	68e0      	ldr	r0, [r4, #12]
    4620:	4298      	cmp	r0, r3
    4622:	da3d      	bge.n	46a0 <_printf_i+0x228>
    4624:	0018      	movs	r0, r3
    4626:	e03b      	b.n	46a0 <_printf_i+0x228>
    4628:	0022      	movs	r2, r4
    462a:	2301      	movs	r3, #1
    462c:	3219      	adds	r2, #25
    462e:	9906      	ldr	r1, [sp, #24]
    4630:	9805      	ldr	r0, [sp, #20]
    4632:	9e07      	ldr	r6, [sp, #28]
    4634:	47b0      	blx	r6
    4636:	1c43      	adds	r3, r0, #1
    4638:	d030      	beq.n	469c <_printf_i+0x224>
    463a:	3501      	adds	r5, #1
    463c:	68e3      	ldr	r3, [r4, #12]
    463e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4640:	1a9b      	subs	r3, r3, r2
    4642:	429d      	cmp	r5, r3
    4644:	dbf0      	blt.n	4628 <_printf_i+0x1b0>
    4646:	e7e9      	b.n	461c <_printf_i+0x1a4>
    4648:	2d00      	cmp	r5, #0
    464a:	d0a9      	beq.n	45a0 <_printf_i+0x128>
    464c:	9e04      	ldr	r6, [sp, #16]
    464e:	0028      	movs	r0, r5
    4650:	0039      	movs	r1, r7
    4652:	f7fd fbf3 	bl	1e3c <__aeabi_uidivmod>
    4656:	9b03      	ldr	r3, [sp, #12]
    4658:	3e01      	subs	r6, #1
    465a:	5c5b      	ldrb	r3, [r3, r1]
    465c:	0028      	movs	r0, r5
    465e:	7033      	strb	r3, [r6, #0]
    4660:	0039      	movs	r1, r7
    4662:	f7fd fb65 	bl	1d30 <__udivsi3>
    4666:	1e05      	subs	r5, r0, #0
    4668:	d1f1      	bne.n	464e <_printf_i+0x1d6>
    466a:	2f08      	cmp	r7, #8
    466c:	d109      	bne.n	4682 <_printf_i+0x20a>
    466e:	6823      	ldr	r3, [r4, #0]
    4670:	07db      	lsls	r3, r3, #31
    4672:	d506      	bpl.n	4682 <_printf_i+0x20a>
    4674:	6863      	ldr	r3, [r4, #4]
    4676:	6922      	ldr	r2, [r4, #16]
    4678:	4293      	cmp	r3, r2
    467a:	dc02      	bgt.n	4682 <_printf_i+0x20a>
    467c:	2330      	movs	r3, #48	; 0x30
    467e:	3e01      	subs	r6, #1
    4680:	7033      	strb	r3, [r6, #0]
    4682:	9b04      	ldr	r3, [sp, #16]
    4684:	1b9b      	subs	r3, r3, r6
    4686:	6123      	str	r3, [r4, #16]
    4688:	9b07      	ldr	r3, [sp, #28]
    468a:	aa09      	add	r2, sp, #36	; 0x24
    468c:	9300      	str	r3, [sp, #0]
    468e:	0021      	movs	r1, r4
    4690:	9b06      	ldr	r3, [sp, #24]
    4692:	9805      	ldr	r0, [sp, #20]
    4694:	f7ff fe82 	bl	439c <_printf_common>
    4698:	1c43      	adds	r3, r0, #1
    469a:	d1b3      	bne.n	4604 <_printf_i+0x18c>
    469c:	2001      	movs	r0, #1
    469e:	4240      	negs	r0, r0
    46a0:	b00b      	add	sp, #44	; 0x2c
    46a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46a4:	000049ee 	.word	0x000049ee
    46a8:	000049dd 	.word	0x000049dd

000046ac <_sbrk_r>:
    46ac:	2300      	movs	r3, #0
    46ae:	b570      	push	{r4, r5, r6, lr}
    46b0:	4c06      	ldr	r4, [pc, #24]	; (46cc <_sbrk_r+0x20>)
    46b2:	0005      	movs	r5, r0
    46b4:	0008      	movs	r0, r1
    46b6:	6023      	str	r3, [r4, #0]
    46b8:	f7fd f9d6 	bl	1a68 <_sbrk>
    46bc:	1c43      	adds	r3, r0, #1
    46be:	d103      	bne.n	46c8 <_sbrk_r+0x1c>
    46c0:	6823      	ldr	r3, [r4, #0]
    46c2:	2b00      	cmp	r3, #0
    46c4:	d000      	beq.n	46c8 <_sbrk_r+0x1c>
    46c6:	602b      	str	r3, [r5, #0]
    46c8:	bd70      	pop	{r4, r5, r6, pc}
    46ca:	46c0      	nop			; (mov r8, r8)
    46cc:	2000017c 	.word	0x2000017c

000046d0 <__sread>:
    46d0:	b570      	push	{r4, r5, r6, lr}
    46d2:	000c      	movs	r4, r1
    46d4:	250e      	movs	r5, #14
    46d6:	5f49      	ldrsh	r1, [r1, r5]
    46d8:	f000 f8b2 	bl	4840 <_read_r>
    46dc:	2800      	cmp	r0, #0
    46de:	db03      	blt.n	46e8 <__sread+0x18>
    46e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    46e2:	181b      	adds	r3, r3, r0
    46e4:	6563      	str	r3, [r4, #84]	; 0x54
    46e6:	bd70      	pop	{r4, r5, r6, pc}
    46e8:	89a3      	ldrh	r3, [r4, #12]
    46ea:	4a02      	ldr	r2, [pc, #8]	; (46f4 <__sread+0x24>)
    46ec:	4013      	ands	r3, r2
    46ee:	81a3      	strh	r3, [r4, #12]
    46f0:	e7f9      	b.n	46e6 <__sread+0x16>
    46f2:	46c0      	nop			; (mov r8, r8)
    46f4:	ffffefff 	.word	0xffffefff

000046f8 <__swrite>:
    46f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46fa:	001f      	movs	r7, r3
    46fc:	898b      	ldrh	r3, [r1, #12]
    46fe:	0005      	movs	r5, r0
    4700:	000c      	movs	r4, r1
    4702:	0016      	movs	r6, r2
    4704:	05db      	lsls	r3, r3, #23
    4706:	d505      	bpl.n	4714 <__swrite+0x1c>
    4708:	230e      	movs	r3, #14
    470a:	5ec9      	ldrsh	r1, [r1, r3]
    470c:	2200      	movs	r2, #0
    470e:	2302      	movs	r3, #2
    4710:	f000 f874 	bl	47fc <_lseek_r>
    4714:	89a3      	ldrh	r3, [r4, #12]
    4716:	4a05      	ldr	r2, [pc, #20]	; (472c <__swrite+0x34>)
    4718:	0028      	movs	r0, r5
    471a:	4013      	ands	r3, r2
    471c:	81a3      	strh	r3, [r4, #12]
    471e:	0032      	movs	r2, r6
    4720:	230e      	movs	r3, #14
    4722:	5ee1      	ldrsh	r1, [r4, r3]
    4724:	003b      	movs	r3, r7
    4726:	f000 f81f 	bl	4768 <_write_r>
    472a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    472c:	ffffefff 	.word	0xffffefff

00004730 <__sseek>:
    4730:	b570      	push	{r4, r5, r6, lr}
    4732:	000c      	movs	r4, r1
    4734:	250e      	movs	r5, #14
    4736:	5f49      	ldrsh	r1, [r1, r5]
    4738:	f000 f860 	bl	47fc <_lseek_r>
    473c:	89a3      	ldrh	r3, [r4, #12]
    473e:	1c42      	adds	r2, r0, #1
    4740:	d103      	bne.n	474a <__sseek+0x1a>
    4742:	4a05      	ldr	r2, [pc, #20]	; (4758 <__sseek+0x28>)
    4744:	4013      	ands	r3, r2
    4746:	81a3      	strh	r3, [r4, #12]
    4748:	bd70      	pop	{r4, r5, r6, pc}
    474a:	2280      	movs	r2, #128	; 0x80
    474c:	0152      	lsls	r2, r2, #5
    474e:	4313      	orrs	r3, r2
    4750:	81a3      	strh	r3, [r4, #12]
    4752:	6560      	str	r0, [r4, #84]	; 0x54
    4754:	e7f8      	b.n	4748 <__sseek+0x18>
    4756:	46c0      	nop			; (mov r8, r8)
    4758:	ffffefff 	.word	0xffffefff

0000475c <__sclose>:
    475c:	b510      	push	{r4, lr}
    475e:	230e      	movs	r3, #14
    4760:	5ec9      	ldrsh	r1, [r1, r3]
    4762:	f000 f815 	bl	4790 <_close_r>
    4766:	bd10      	pop	{r4, pc}

00004768 <_write_r>:
    4768:	b570      	push	{r4, r5, r6, lr}
    476a:	0005      	movs	r5, r0
    476c:	0008      	movs	r0, r1
    476e:	0011      	movs	r1, r2
    4770:	2200      	movs	r2, #0
    4772:	4c06      	ldr	r4, [pc, #24]	; (478c <_write_r+0x24>)
    4774:	6022      	str	r2, [r4, #0]
    4776:	001a      	movs	r2, r3
    4778:	f7fd f94e 	bl	1a18 <_write>
    477c:	1c43      	adds	r3, r0, #1
    477e:	d103      	bne.n	4788 <_write_r+0x20>
    4780:	6823      	ldr	r3, [r4, #0]
    4782:	2b00      	cmp	r3, #0
    4784:	d000      	beq.n	4788 <_write_r+0x20>
    4786:	602b      	str	r3, [r5, #0]
    4788:	bd70      	pop	{r4, r5, r6, pc}
    478a:	46c0      	nop			; (mov r8, r8)
    478c:	2000017c 	.word	0x2000017c

00004790 <_close_r>:
    4790:	2300      	movs	r3, #0
    4792:	b570      	push	{r4, r5, r6, lr}
    4794:	4c06      	ldr	r4, [pc, #24]	; (47b0 <_close_r+0x20>)
    4796:	0005      	movs	r5, r0
    4798:	0008      	movs	r0, r1
    479a:	6023      	str	r3, [r4, #0]
    479c:	f7fd f976 	bl	1a8c <_close>
    47a0:	1c43      	adds	r3, r0, #1
    47a2:	d103      	bne.n	47ac <_close_r+0x1c>
    47a4:	6823      	ldr	r3, [r4, #0]
    47a6:	2b00      	cmp	r3, #0
    47a8:	d000      	beq.n	47ac <_close_r+0x1c>
    47aa:	602b      	str	r3, [r5, #0]
    47ac:	bd70      	pop	{r4, r5, r6, pc}
    47ae:	46c0      	nop			; (mov r8, r8)
    47b0:	2000017c 	.word	0x2000017c

000047b4 <_fstat_r>:
    47b4:	2300      	movs	r3, #0
    47b6:	b570      	push	{r4, r5, r6, lr}
    47b8:	4c06      	ldr	r4, [pc, #24]	; (47d4 <_fstat_r+0x20>)
    47ba:	0005      	movs	r5, r0
    47bc:	0008      	movs	r0, r1
    47be:	0011      	movs	r1, r2
    47c0:	6023      	str	r3, [r4, #0]
    47c2:	f7fd f966 	bl	1a92 <_fstat>
    47c6:	1c43      	adds	r3, r0, #1
    47c8:	d103      	bne.n	47d2 <_fstat_r+0x1e>
    47ca:	6823      	ldr	r3, [r4, #0]
    47cc:	2b00      	cmp	r3, #0
    47ce:	d000      	beq.n	47d2 <_fstat_r+0x1e>
    47d0:	602b      	str	r3, [r5, #0]
    47d2:	bd70      	pop	{r4, r5, r6, pc}
    47d4:	2000017c 	.word	0x2000017c

000047d8 <_isatty_r>:
    47d8:	2300      	movs	r3, #0
    47da:	b570      	push	{r4, r5, r6, lr}
    47dc:	4c06      	ldr	r4, [pc, #24]	; (47f8 <_isatty_r+0x20>)
    47de:	0005      	movs	r5, r0
    47e0:	0008      	movs	r0, r1
    47e2:	6023      	str	r3, [r4, #0]
    47e4:	f7fd f95a 	bl	1a9c <_isatty>
    47e8:	1c43      	adds	r3, r0, #1
    47ea:	d103      	bne.n	47f4 <_isatty_r+0x1c>
    47ec:	6823      	ldr	r3, [r4, #0]
    47ee:	2b00      	cmp	r3, #0
    47f0:	d000      	beq.n	47f4 <_isatty_r+0x1c>
    47f2:	602b      	str	r3, [r5, #0]
    47f4:	bd70      	pop	{r4, r5, r6, pc}
    47f6:	46c0      	nop			; (mov r8, r8)
    47f8:	2000017c 	.word	0x2000017c

000047fc <_lseek_r>:
    47fc:	b570      	push	{r4, r5, r6, lr}
    47fe:	0005      	movs	r5, r0
    4800:	0008      	movs	r0, r1
    4802:	0011      	movs	r1, r2
    4804:	2200      	movs	r2, #0
    4806:	4c06      	ldr	r4, [pc, #24]	; (4820 <_lseek_r+0x24>)
    4808:	6022      	str	r2, [r4, #0]
    480a:	001a      	movs	r2, r3
    480c:	f7fd f948 	bl	1aa0 <_lseek>
    4810:	1c43      	adds	r3, r0, #1
    4812:	d103      	bne.n	481c <_lseek_r+0x20>
    4814:	6823      	ldr	r3, [r4, #0]
    4816:	2b00      	cmp	r3, #0
    4818:	d000      	beq.n	481c <_lseek_r+0x20>
    481a:	602b      	str	r3, [r5, #0]
    481c:	bd70      	pop	{r4, r5, r6, pc}
    481e:	46c0      	nop			; (mov r8, r8)
    4820:	2000017c 	.word	0x2000017c

00004824 <memchr>:
    4824:	b2c9      	uxtb	r1, r1
    4826:	1882      	adds	r2, r0, r2
    4828:	4290      	cmp	r0, r2
    482a:	d101      	bne.n	4830 <memchr+0xc>
    482c:	2000      	movs	r0, #0
    482e:	4770      	bx	lr
    4830:	7803      	ldrb	r3, [r0, #0]
    4832:	428b      	cmp	r3, r1
    4834:	d0fb      	beq.n	482e <memchr+0xa>
    4836:	3001      	adds	r0, #1
    4838:	e7f6      	b.n	4828 <memchr+0x4>

0000483a <__malloc_lock>:
    483a:	4770      	bx	lr

0000483c <__malloc_unlock>:
    483c:	4770      	bx	lr
	...

00004840 <_read_r>:
    4840:	b570      	push	{r4, r5, r6, lr}
    4842:	0005      	movs	r5, r0
    4844:	0008      	movs	r0, r1
    4846:	0011      	movs	r1, r2
    4848:	2200      	movs	r2, #0
    484a:	4c06      	ldr	r4, [pc, #24]	; (4864 <_read_r+0x24>)
    484c:	6022      	str	r2, [r4, #0]
    484e:	001a      	movs	r2, r3
    4850:	f7fd f8c0 	bl	19d4 <_read>
    4854:	1c43      	adds	r3, r0, #1
    4856:	d103      	bne.n	4860 <_read_r+0x20>
    4858:	6823      	ldr	r3, [r4, #0]
    485a:	2b00      	cmp	r3, #0
    485c:	d000      	beq.n	4860 <_read_r+0x20>
    485e:	602b      	str	r3, [r5, #0]
    4860:	bd70      	pop	{r4, r5, r6, pc}
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	2000017c 	.word	0x2000017c
    4868:	42000800 	.word	0x42000800
    486c:	42000c00 	.word	0x42000c00
    4870:	42001000 	.word	0x42001000
    4874:	42001400 	.word	0x42001400
    4878:	42001800 	.word	0x42001800
    487c:	42001c00 	.word	0x42001c00
    4880:	0000134a 	.word	0x0000134a
    4884:	00001346 	.word	0x00001346
    4888:	00001346 	.word	0x00001346
    488c:	000013a8 	.word	0x000013a8
    4890:	000013a8 	.word	0x000013a8
    4894:	0000135e 	.word	0x0000135e
    4898:	00001350 	.word	0x00001350
    489c:	00001364 	.word	0x00001364
    48a0:	00001396 	.word	0x00001396
    48a4:	00001430 	.word	0x00001430
    48a8:	00001410 	.word	0x00001410
    48ac:	00001410 	.word	0x00001410
    48b0:	0000149c 	.word	0x0000149c
    48b4:	00001422 	.word	0x00001422
    48b8:	0000143e 	.word	0x0000143e
    48bc:	00001414 	.word	0x00001414
    48c0:	0000144c 	.word	0x0000144c
    48c4:	0000148c 	.word	0x0000148c
    48c8:	75746573 	.word	0x75746573
    48cc:	6f632070 	.word	0x6f632070
    48d0:	656c706d 	.word	0x656c706d
    48d4:	0a206574 	.word	0x0a206574
    48d8:	0000000d 	.word	0x0000000d
    48dc:	72616568 	.word	0x72616568
    48e0:	65622d74 	.word	0x65622d74
    48e4:	000d7461 	.word	0x000d7461
    48e8:	000026b4 	.word	0x000026b4
    48ec:	00002696 	.word	0x00002696
    48f0:	00002650 	.word	0x00002650
    48f4:	0000256e 	.word	0x0000256e
    48f8:	00002650 	.word	0x00002650
    48fc:	00002688 	.word	0x00002688
    4900:	00002650 	.word	0x00002650
    4904:	0000256e 	.word	0x0000256e
    4908:	00002696 	.word	0x00002696
    490c:	00002696 	.word	0x00002696
    4910:	00002688 	.word	0x00002688
    4914:	0000256e 	.word	0x0000256e
    4918:	00002566 	.word	0x00002566
    491c:	00002566 	.word	0x00002566
    4920:	00002566 	.word	0x00002566
    4924:	000028cc 	.word	0x000028cc
    4928:	00002d14 	.word	0x00002d14
    492c:	00002bd4 	.word	0x00002bd4
    4930:	00002bd4 	.word	0x00002bd4
    4934:	00002bd0 	.word	0x00002bd0
    4938:	00002cec 	.word	0x00002cec
    493c:	00002cec 	.word	0x00002cec
    4940:	00002cde 	.word	0x00002cde
    4944:	00002bd0 	.word	0x00002bd0
    4948:	00002cec 	.word	0x00002cec
    494c:	00002cde 	.word	0x00002cde
    4950:	00002cec 	.word	0x00002cec
    4954:	00002bd0 	.word	0x00002bd0
    4958:	00002cf4 	.word	0x00002cf4
    495c:	00002cf4 	.word	0x00002cf4
    4960:	00002cf4 	.word	0x00002cf4
    4964:	00002ef8 	.word	0x00002ef8

00004968 <_global_impure_ptr>:
    4968:	20000018                                ... 

0000496c <__sf_fake_stderr>:
	...

0000498c <__sf_fake_stdin>:
	...

000049ac <__sf_fake_stdout>:
	...
    49cc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    49dc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    49ec:	31300046 35343332 39383736 64636261     F.0123456789abcd
    49fc:	00006665                                ef..

00004a00 <_init>:
    4a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a02:	46c0      	nop			; (mov r8, r8)
    4a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4a06:	bc08      	pop	{r3}
    4a08:	469e      	mov	lr, r3
    4a0a:	4770      	bx	lr

00004a0c <__init_array_start>:
    4a0c:	000000dd 	.word	0x000000dd

00004a10 <_fini>:
    4a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4a16:	bc08      	pop	{r3}
    4a18:	469e      	mov	lr, r3
    4a1a:	4770      	bx	lr

00004a1c <__fini_array_start>:
    4a1c:	000000b5 	.word	0x000000b5
