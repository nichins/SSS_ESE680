
ESE680A_ApplicationCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021d8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  000021d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c0  20000068  00002240  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000128  00002300  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   00019638  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000254c  00000000  00000000  00039721  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000420  00000000  00000000  0003bc6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000003e8  00000000  00000000  0003c08d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00018cdf  00000000  00000000  0003c475  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a159  00000000  00000000  00055154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00086463  00000000  00000000  0005f2ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000fe8  00000000  00000000  000e5710  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003baf  00000000  00000000  000e66f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002128 	.word	0x20002128
       4:	00001109 	.word	0x00001109
       8:	00001105 	.word	0x00001105
       c:	00001105 	.word	0x00001105
	...
      2c:	00001105 	.word	0x00001105
	...
      38:	00001105 	.word	0x00001105
      3c:	00001105 	.word	0x00001105
      40:	00001105 	.word	0x00001105
      44:	00001105 	.word	0x00001105
      48:	00001105 	.word	0x00001105
      4c:	00001105 	.word	0x00001105
      50:	00001105 	.word	0x00001105
      54:	00001105 	.word	0x00001105
      58:	00001105 	.word	0x00001105
      5c:	00001105 	.word	0x00001105
      60:	00001105 	.word	0x00001105
      64:	000005a1 	.word	0x000005a1
      68:	000005b1 	.word	0x000005b1
      6c:	000005c1 	.word	0x000005c1
      70:	000005d1 	.word	0x000005d1
      74:	000005e1 	.word	0x000005e1
      78:	000005f1 	.word	0x000005f1
      7c:	00001105 	.word	0x00001105
      80:	00001105 	.word	0x00001105
      84:	00001105 	.word	0x00001105
      88:	00001105 	.word	0x00001105
      8c:	00001105 	.word	0x00001105
      90:	00001105 	.word	0x00001105
	...
      9c:	00001105 	.word	0x00001105
      a0:	00001105 	.word	0x00001105
      a4:	00001105 	.word	0x00001105
      a8:	00001105 	.word	0x00001105
      ac:	00001105 	.word	0x00001105
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	000021d8 	.word	0x000021d8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	000021d8 	.word	0x000021d8
     10c:	000021d8 	.word	0x000021d8
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     114:	4770      	bx	lr
     116:	46c0      	nop			; (mov r8, r8)

00000118 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     118:	4b0c      	ldr	r3, [pc, #48]	; (14c <cpu_irq_enter_critical+0x34>)
     11a:	681b      	ldr	r3, [r3, #0]
     11c:	2b00      	cmp	r3, #0
     11e:	d110      	bne.n	142 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     120:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     124:	2b00      	cmp	r3, #0
     126:	d109      	bne.n	13c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     128:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     12a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     12e:	2200      	movs	r2, #0
     130:	4b07      	ldr	r3, [pc, #28]	; (150 <cpu_irq_enter_critical+0x38>)
     132:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     134:	3201      	adds	r2, #1
     136:	4b07      	ldr	r3, [pc, #28]	; (154 <cpu_irq_enter_critical+0x3c>)
     138:	701a      	strb	r2, [r3, #0]
     13a:	e002      	b.n	142 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     13c:	2200      	movs	r2, #0
     13e:	4b05      	ldr	r3, [pc, #20]	; (154 <cpu_irq_enter_critical+0x3c>)
     140:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     142:	4a02      	ldr	r2, [pc, #8]	; (14c <cpu_irq_enter_critical+0x34>)
     144:	6813      	ldr	r3, [r2, #0]
     146:	3301      	adds	r3, #1
     148:	6013      	str	r3, [r2, #0]
}
     14a:	4770      	bx	lr
     14c:	20000084 	.word	0x20000084
     150:	20000000 	.word	0x20000000
     154:	20000088 	.word	0x20000088

00000158 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     158:	4b08      	ldr	r3, [pc, #32]	; (17c <cpu_irq_leave_critical+0x24>)
     15a:	681a      	ldr	r2, [r3, #0]
     15c:	3a01      	subs	r2, #1
     15e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     160:	681b      	ldr	r3, [r3, #0]
     162:	2b00      	cmp	r3, #0
     164:	d109      	bne.n	17a <cpu_irq_leave_critical+0x22>
     166:	4b06      	ldr	r3, [pc, #24]	; (180 <cpu_irq_leave_critical+0x28>)
     168:	781b      	ldrb	r3, [r3, #0]
     16a:	2b00      	cmp	r3, #0
     16c:	d005      	beq.n	17a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     16e:	2201      	movs	r2, #1
     170:	4b04      	ldr	r3, [pc, #16]	; (184 <cpu_irq_leave_critical+0x2c>)
     172:	701a      	strb	r2, [r3, #0]
     174:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     178:	b662      	cpsie	i
	}
}
     17a:	4770      	bx	lr
     17c:	20000084 	.word	0x20000084
     180:	20000088 	.word	0x20000088
     184:	20000000 	.word	0x20000000

00000188 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     188:	b500      	push	{lr}
     18a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     18c:	ab01      	add	r3, sp, #4
     18e:	2280      	movs	r2, #128	; 0x80
     190:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     192:	780a      	ldrb	r2, [r1, #0]
     194:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     196:	784a      	ldrb	r2, [r1, #1]
     198:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     19a:	788a      	ldrb	r2, [r1, #2]
     19c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     19e:	0019      	movs	r1, r3
     1a0:	4b01      	ldr	r3, [pc, #4]	; (1a8 <port_pin_set_config+0x20>)
     1a2:	4798      	blx	r3
}
     1a4:	b003      	add	sp, #12
     1a6:	bd00      	pop	{pc}
     1a8:	000010a5 	.word	0x000010a5

000001ac <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ae:	465f      	mov	r7, fp
     1b0:	4656      	mov	r6, sl
     1b2:	464d      	mov	r5, r9
     1b4:	4644      	mov	r4, r8
     1b6:	b4f0      	push	{r4, r5, r6, r7}
     1b8:	b087      	sub	sp, #28
     1ba:	4680      	mov	r8, r0
     1bc:	9104      	str	r1, [sp, #16]
     1be:	0016      	movs	r6, r2
     1c0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     1c2:	2200      	movs	r2, #0
     1c4:	2300      	movs	r3, #0
     1c6:	2100      	movs	r1, #0
     1c8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     1ca:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     1cc:	2001      	movs	r0, #1
     1ce:	0021      	movs	r1, r4
     1d0:	9600      	str	r6, [sp, #0]
     1d2:	9701      	str	r7, [sp, #4]
     1d4:	465c      	mov	r4, fp
     1d6:	9403      	str	r4, [sp, #12]
     1d8:	4644      	mov	r4, r8
     1da:	9405      	str	r4, [sp, #20]
     1dc:	2420      	movs	r4, #32
     1de:	4264      	negs	r4, r4
     1e0:	190c      	adds	r4, r1, r4
     1e2:	d403      	bmi.n	1ec <long_division+0x40>
     1e4:	0005      	movs	r5, r0
     1e6:	40a5      	lsls	r5, r4
     1e8:	46a8      	mov	r8, r5
     1ea:	e004      	b.n	1f6 <long_division+0x4a>
     1ec:	2420      	movs	r4, #32
     1ee:	1a64      	subs	r4, r4, r1
     1f0:	0005      	movs	r5, r0
     1f2:	40e5      	lsrs	r5, r4
     1f4:	46a8      	mov	r8, r5
     1f6:	0004      	movs	r4, r0
     1f8:	408c      	lsls	r4, r1
     1fa:	46a1      	mov	r9, r4

		r = r << 1;
     1fc:	0014      	movs	r4, r2
     1fe:	001d      	movs	r5, r3
     200:	18a4      	adds	r4, r4, r2
     202:	415d      	adcs	r5, r3
     204:	0022      	movs	r2, r4
     206:	002b      	movs	r3, r5

		if (n & bit_shift) {
     208:	9e05      	ldr	r6, [sp, #20]
     20a:	464f      	mov	r7, r9
     20c:	403e      	ands	r6, r7
     20e:	46b2      	mov	sl, r6
     210:	9e04      	ldr	r6, [sp, #16]
     212:	4647      	mov	r7, r8
     214:	403e      	ands	r6, r7
     216:	46b4      	mov	ip, r6
     218:	4656      	mov	r6, sl
     21a:	4667      	mov	r7, ip
     21c:	433e      	orrs	r6, r7
     21e:	d003      	beq.n	228 <long_division+0x7c>
			r |= 0x01;
     220:	0006      	movs	r6, r0
     222:	4326      	orrs	r6, r4
     224:	0032      	movs	r2, r6
     226:	002b      	movs	r3, r5
		}

		if (r >= d) {
     228:	9c00      	ldr	r4, [sp, #0]
     22a:	9d01      	ldr	r5, [sp, #4]
     22c:	429d      	cmp	r5, r3
     22e:	d80e      	bhi.n	24e <long_division+0xa2>
     230:	d101      	bne.n	236 <long_division+0x8a>
     232:	4294      	cmp	r4, r2
     234:	d80b      	bhi.n	24e <long_division+0xa2>
			r = r - d;
     236:	9c00      	ldr	r4, [sp, #0]
     238:	9d01      	ldr	r5, [sp, #4]
     23a:	1b12      	subs	r2, r2, r4
     23c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     23e:	465c      	mov	r4, fp
     240:	464d      	mov	r5, r9
     242:	432c      	orrs	r4, r5
     244:	46a3      	mov	fp, r4
     246:	9c03      	ldr	r4, [sp, #12]
     248:	4645      	mov	r5, r8
     24a:	432c      	orrs	r4, r5
     24c:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     24e:	3901      	subs	r1, #1
     250:	d2c4      	bcs.n	1dc <long_division+0x30>
     252:	9b03      	ldr	r3, [sp, #12]
			q |= bit_shift;
		}
	}

	return q;
}
     254:	4658      	mov	r0, fp
     256:	0019      	movs	r1, r3
     258:	b007      	add	sp, #28
     25a:	bc3c      	pop	{r2, r3, r4, r5}
     25c:	4690      	mov	r8, r2
     25e:	4699      	mov	r9, r3
     260:	46a2      	mov	sl, r4
     262:	46ab      	mov	fp, r5
     264:	bdf0      	pop	{r4, r5, r6, r7, pc}
     266:	46c0      	nop			; (mov r8, r8)

00000268 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     268:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     26a:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     26c:	2340      	movs	r3, #64	; 0x40
     26e:	2400      	movs	r4, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     270:	4281      	cmp	r1, r0
     272:	d201      	bcs.n	278 <_sercom_get_sync_baud_val+0x10>
     274:	e00a      	b.n	28c <_sercom_get_sync_baud_val+0x24>

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
		baud_calculated++;
     276:	001c      	movs	r4, r3
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     278:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     27a:	1c63      	adds	r3, r4, #1
     27c:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     27e:	4288      	cmp	r0, r1
     280:	d9f9      	bls.n	276 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     282:	2340      	movs	r3, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     284:	2cff      	cmp	r4, #255	; 0xff
     286:	d801      	bhi.n	28c <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     288:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     28a:	2300      	movs	r3, #0
	}
}
     28c:	0018      	movs	r0, r3
     28e:	bd10      	pop	{r4, pc}

00000290 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     290:	b5f0      	push	{r4, r5, r6, r7, lr}
     292:	b083      	sub	sp, #12
     294:	000f      	movs	r7, r1
     296:	0016      	movs	r6, r2
     298:	aa08      	add	r2, sp, #32
     29a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     29c:	0004      	movs	r4, r0
     29e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2a0:	2240      	movs	r2, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     2a2:	42bc      	cmp	r4, r7
     2a4:	d836      	bhi.n	314 <_sercom_get_async_baud_val+0x84>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     2a6:	2b00      	cmp	r3, #0
     2a8:	d112      	bne.n	2d0 <_sercom_get_async_baud_val+0x40>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
     2aa:	0002      	movs	r2, r0
     2ac:	0008      	movs	r0, r1
     2ae:	2100      	movs	r1, #0
     2b0:	4c1a      	ldr	r4, [pc, #104]	; (31c <_sercom_get_async_baud_val+0x8c>)
     2b2:	47a0      	blx	r4
     2b4:	0001      	movs	r1, r0
     2b6:	003a      	movs	r2, r7
     2b8:	2300      	movs	r3, #0
     2ba:	2000      	movs	r0, #0
     2bc:	4c18      	ldr	r4, [pc, #96]	; (320 <_sercom_get_async_baud_val+0x90>)
     2be:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
     2c0:	2200      	movs	r2, #0
     2c2:	2301      	movs	r3, #1
     2c4:	1a12      	subs	r2, r2, r0
     2c6:	418b      	sbcs	r3, r1
     2c8:	0c12      	lsrs	r2, r2, #16
     2ca:	041b      	lsls	r3, r3, #16
     2cc:	431a      	orrs	r2, r3
     2ce:	e01f      	b.n	310 <_sercom_get_async_baud_val+0x80>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     2d0:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     2d2:	2b01      	cmp	r3, #1
     2d4:	d11c      	bne.n	310 <_sercom_get_async_baud_val+0x80>
		temp1 = ((uint64_t)baudrate * sample_num);
     2d6:	000a      	movs	r2, r1
     2d8:	2300      	movs	r3, #0
     2da:	2100      	movs	r1, #0
     2dc:	4c0f      	ldr	r4, [pc, #60]	; (31c <_sercom_get_async_baud_val+0x8c>)
     2de:	47a0      	blx	r4
     2e0:	0002      	movs	r2, r0
     2e2:	000b      	movs	r3, r1
     2e4:	9200      	str	r2, [sp, #0]
     2e6:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     2e8:	0038      	movs	r0, r7
     2ea:	2100      	movs	r1, #0
     2ec:	4c0c      	ldr	r4, [pc, #48]	; (320 <_sercom_get_async_baud_val+0x90>)
     2ee:	47a0      	blx	r4
     2f0:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2f2:	2240      	movs	r2, #64	; 0x40
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		temp1 = ((uint64_t)baudrate * sample_num);
		baud_int = long_division( peripheral_clock, temp1);
		if(baud_int > BAUD_INT_MAX) {
     2f4:	2380      	movs	r3, #128	; 0x80
     2f6:	019b      	lsls	r3, r3, #6
     2f8:	4298      	cmp	r0, r3
     2fa:	d80b      	bhi.n	314 <_sercom_get_async_baud_val+0x84>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     2fc:	0f79      	lsrs	r1, r7, #29
     2fe:	00f8      	lsls	r0, r7, #3
     300:	9a00      	ldr	r2, [sp, #0]
     302:	9b01      	ldr	r3, [sp, #4]
     304:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
     306:	00ea      	lsls	r2, r5, #3
     308:	1a82      	subs	r2, r0, r2
     30a:	b2d2      	uxtb	r2, r2
     30c:	0352      	lsls	r2, r2, #13
     30e:	432a      	orrs	r2, r5
	}

	*baudval = baud_calculated;
     310:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     312:	2200      	movs	r2, #0
}
     314:	0010      	movs	r0, r2
     316:	b003      	add	sp, #12
     318:	bdf0      	pop	{r4, r5, r6, r7, pc}
     31a:	46c0      	nop			; (mov r8, r8)
     31c:	00001569 	.word	0x00001569
     320:	000001ad 	.word	0x000001ad

00000324 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     324:	b510      	push	{r4, lr}
     326:	b082      	sub	sp, #8
     328:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     32a:	4b0e      	ldr	r3, [pc, #56]	; (364 <sercom_set_gclk_generator+0x40>)
     32c:	781b      	ldrb	r3, [r3, #0]
     32e:	2b00      	cmp	r3, #0
     330:	d001      	beq.n	336 <sercom_set_gclk_generator+0x12>
     332:	2900      	cmp	r1, #0
     334:	d00d      	beq.n	352 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     336:	a901      	add	r1, sp, #4
     338:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     33a:	2013      	movs	r0, #19
     33c:	4b0a      	ldr	r3, [pc, #40]	; (368 <sercom_set_gclk_generator+0x44>)
     33e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     340:	2013      	movs	r0, #19
     342:	4b0a      	ldr	r3, [pc, #40]	; (36c <sercom_set_gclk_generator+0x48>)
     344:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
     346:	4b07      	ldr	r3, [pc, #28]	; (364 <sercom_set_gclk_generator+0x40>)
     348:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     34a:	2201      	movs	r2, #1
     34c:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     34e:	2000      	movs	r0, #0
     350:	e006      	b.n	360 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
     352:	4b04      	ldr	r3, [pc, #16]	; (364 <sercom_set_gclk_generator+0x40>)
     354:	785b      	ldrb	r3, [r3, #1]
     356:	4283      	cmp	r3, r0
     358:	d001      	beq.n	35e <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     35a:	201d      	movs	r0, #29
     35c:	e000      	b.n	360 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config */
		return STATUS_OK;
     35e:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     360:	b002      	add	sp, #8
     362:	bd10      	pop	{r4, pc}
     364:	2000008c 	.word	0x2000008c
     368:	00000fad 	.word	0x00000fad
     36c:	00000f21 	.word	0x00000f21

00000370 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     370:	4b44      	ldr	r3, [pc, #272]	; (484 <_sercom_get_default_pad+0x114>)
     372:	4298      	cmp	r0, r3
     374:	d033      	beq.n	3de <_sercom_get_default_pad+0x6e>
     376:	d806      	bhi.n	386 <_sercom_get_default_pad+0x16>
     378:	4b43      	ldr	r3, [pc, #268]	; (488 <_sercom_get_default_pad+0x118>)
     37a:	4298      	cmp	r0, r3
     37c:	d00d      	beq.n	39a <_sercom_get_default_pad+0x2a>
     37e:	4b43      	ldr	r3, [pc, #268]	; (48c <_sercom_get_default_pad+0x11c>)
     380:	4298      	cmp	r0, r3
     382:	d01b      	beq.n	3bc <_sercom_get_default_pad+0x4c>
     384:	e06f      	b.n	466 <_sercom_get_default_pad+0xf6>
     386:	4b42      	ldr	r3, [pc, #264]	; (490 <_sercom_get_default_pad+0x120>)
     388:	4298      	cmp	r0, r3
     38a:	d04a      	beq.n	422 <_sercom_get_default_pad+0xb2>
     38c:	4b41      	ldr	r3, [pc, #260]	; (494 <_sercom_get_default_pad+0x124>)
     38e:	4298      	cmp	r0, r3
     390:	d058      	beq.n	444 <_sercom_get_default_pad+0xd4>
     392:	4b41      	ldr	r3, [pc, #260]	; (498 <_sercom_get_default_pad+0x128>)
     394:	4298      	cmp	r0, r3
     396:	d166      	bne.n	466 <_sercom_get_default_pad+0xf6>
     398:	e032      	b.n	400 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     39a:	2901      	cmp	r1, #1
     39c:	d006      	beq.n	3ac <_sercom_get_default_pad+0x3c>
     39e:	2900      	cmp	r1, #0
     3a0:	d063      	beq.n	46a <_sercom_get_default_pad+0xfa>
     3a2:	2902      	cmp	r1, #2
     3a4:	d006      	beq.n	3b4 <_sercom_get_default_pad+0x44>
     3a6:	2903      	cmp	r1, #3
     3a8:	d006      	beq.n	3b8 <_sercom_get_default_pad+0x48>
     3aa:	e001      	b.n	3b0 <_sercom_get_default_pad+0x40>
     3ac:	483b      	ldr	r0, [pc, #236]	; (49c <_sercom_get_default_pad+0x12c>)
     3ae:	e067      	b.n	480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3b0:	2000      	movs	r0, #0
     3b2:	e065      	b.n	480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b4:	483a      	ldr	r0, [pc, #232]	; (4a0 <_sercom_get_default_pad+0x130>)
     3b6:	e063      	b.n	480 <_sercom_get_default_pad+0x110>
     3b8:	483a      	ldr	r0, [pc, #232]	; (4a4 <_sercom_get_default_pad+0x134>)
     3ba:	e061      	b.n	480 <_sercom_get_default_pad+0x110>
     3bc:	2901      	cmp	r1, #1
     3be:	d006      	beq.n	3ce <_sercom_get_default_pad+0x5e>
     3c0:	2900      	cmp	r1, #0
     3c2:	d054      	beq.n	46e <_sercom_get_default_pad+0xfe>
     3c4:	2902      	cmp	r1, #2
     3c6:	d006      	beq.n	3d6 <_sercom_get_default_pad+0x66>
     3c8:	2903      	cmp	r1, #3
     3ca:	d006      	beq.n	3da <_sercom_get_default_pad+0x6a>
     3cc:	e001      	b.n	3d2 <_sercom_get_default_pad+0x62>
     3ce:	4836      	ldr	r0, [pc, #216]	; (4a8 <_sercom_get_default_pad+0x138>)
     3d0:	e056      	b.n	480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3d2:	2000      	movs	r0, #0
     3d4:	e054      	b.n	480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3d6:	4835      	ldr	r0, [pc, #212]	; (4ac <_sercom_get_default_pad+0x13c>)
     3d8:	e052      	b.n	480 <_sercom_get_default_pad+0x110>
     3da:	4835      	ldr	r0, [pc, #212]	; (4b0 <_sercom_get_default_pad+0x140>)
     3dc:	e050      	b.n	480 <_sercom_get_default_pad+0x110>
     3de:	2901      	cmp	r1, #1
     3e0:	d006      	beq.n	3f0 <_sercom_get_default_pad+0x80>
     3e2:	2900      	cmp	r1, #0
     3e4:	d045      	beq.n	472 <_sercom_get_default_pad+0x102>
     3e6:	2902      	cmp	r1, #2
     3e8:	d006      	beq.n	3f8 <_sercom_get_default_pad+0x88>
     3ea:	2903      	cmp	r1, #3
     3ec:	d006      	beq.n	3fc <_sercom_get_default_pad+0x8c>
     3ee:	e001      	b.n	3f4 <_sercom_get_default_pad+0x84>
     3f0:	4830      	ldr	r0, [pc, #192]	; (4b4 <_sercom_get_default_pad+0x144>)
     3f2:	e045      	b.n	480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3f4:	2000      	movs	r0, #0
     3f6:	e043      	b.n	480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3f8:	482f      	ldr	r0, [pc, #188]	; (4b8 <_sercom_get_default_pad+0x148>)
     3fa:	e041      	b.n	480 <_sercom_get_default_pad+0x110>
     3fc:	482f      	ldr	r0, [pc, #188]	; (4bc <_sercom_get_default_pad+0x14c>)
     3fe:	e03f      	b.n	480 <_sercom_get_default_pad+0x110>
     400:	2901      	cmp	r1, #1
     402:	d006      	beq.n	412 <_sercom_get_default_pad+0xa2>
     404:	2900      	cmp	r1, #0
     406:	d036      	beq.n	476 <_sercom_get_default_pad+0x106>
     408:	2902      	cmp	r1, #2
     40a:	d006      	beq.n	41a <_sercom_get_default_pad+0xaa>
     40c:	2903      	cmp	r1, #3
     40e:	d006      	beq.n	41e <_sercom_get_default_pad+0xae>
     410:	e001      	b.n	416 <_sercom_get_default_pad+0xa6>
     412:	482b      	ldr	r0, [pc, #172]	; (4c0 <_sercom_get_default_pad+0x150>)
     414:	e034      	b.n	480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     416:	2000      	movs	r0, #0
     418:	e032      	b.n	480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     41a:	482a      	ldr	r0, [pc, #168]	; (4c4 <_sercom_get_default_pad+0x154>)
     41c:	e030      	b.n	480 <_sercom_get_default_pad+0x110>
     41e:	482a      	ldr	r0, [pc, #168]	; (4c8 <_sercom_get_default_pad+0x158>)
     420:	e02e      	b.n	480 <_sercom_get_default_pad+0x110>
     422:	2901      	cmp	r1, #1
     424:	d006      	beq.n	434 <_sercom_get_default_pad+0xc4>
     426:	2900      	cmp	r1, #0
     428:	d027      	beq.n	47a <_sercom_get_default_pad+0x10a>
     42a:	2902      	cmp	r1, #2
     42c:	d006      	beq.n	43c <_sercom_get_default_pad+0xcc>
     42e:	2903      	cmp	r1, #3
     430:	d006      	beq.n	440 <_sercom_get_default_pad+0xd0>
     432:	e001      	b.n	438 <_sercom_get_default_pad+0xc8>
     434:	4825      	ldr	r0, [pc, #148]	; (4cc <_sercom_get_default_pad+0x15c>)
     436:	e023      	b.n	480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     438:	2000      	movs	r0, #0
     43a:	e021      	b.n	480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     43c:	4824      	ldr	r0, [pc, #144]	; (4d0 <_sercom_get_default_pad+0x160>)
     43e:	e01f      	b.n	480 <_sercom_get_default_pad+0x110>
     440:	4824      	ldr	r0, [pc, #144]	; (4d4 <_sercom_get_default_pad+0x164>)
     442:	e01d      	b.n	480 <_sercom_get_default_pad+0x110>
     444:	2901      	cmp	r1, #1
     446:	d006      	beq.n	456 <_sercom_get_default_pad+0xe6>
     448:	2900      	cmp	r1, #0
     44a:	d018      	beq.n	47e <_sercom_get_default_pad+0x10e>
     44c:	2902      	cmp	r1, #2
     44e:	d006      	beq.n	45e <_sercom_get_default_pad+0xee>
     450:	2903      	cmp	r1, #3
     452:	d006      	beq.n	462 <_sercom_get_default_pad+0xf2>
     454:	e001      	b.n	45a <_sercom_get_default_pad+0xea>
     456:	4820      	ldr	r0, [pc, #128]	; (4d8 <_sercom_get_default_pad+0x168>)
     458:	e012      	b.n	480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     45a:	2000      	movs	r0, #0
     45c:	e010      	b.n	480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     45e:	481f      	ldr	r0, [pc, #124]	; (4dc <_sercom_get_default_pad+0x16c>)
     460:	e00e      	b.n	480 <_sercom_get_default_pad+0x110>
     462:	481f      	ldr	r0, [pc, #124]	; (4e0 <_sercom_get_default_pad+0x170>)
     464:	e00c      	b.n	480 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     466:	2000      	movs	r0, #0
     468:	e00a      	b.n	480 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     46a:	481e      	ldr	r0, [pc, #120]	; (4e4 <_sercom_get_default_pad+0x174>)
     46c:	e008      	b.n	480 <_sercom_get_default_pad+0x110>
     46e:	2003      	movs	r0, #3
     470:	e006      	b.n	480 <_sercom_get_default_pad+0x110>
     472:	481d      	ldr	r0, [pc, #116]	; (4e8 <_sercom_get_default_pad+0x178>)
     474:	e004      	b.n	480 <_sercom_get_default_pad+0x110>
     476:	481d      	ldr	r0, [pc, #116]	; (4ec <_sercom_get_default_pad+0x17c>)
     478:	e002      	b.n	480 <_sercom_get_default_pad+0x110>
     47a:	481d      	ldr	r0, [pc, #116]	; (4f0 <_sercom_get_default_pad+0x180>)
     47c:	e000      	b.n	480 <_sercom_get_default_pad+0x110>
     47e:	481d      	ldr	r0, [pc, #116]	; (4f4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     480:	4770      	bx	lr
     482:	46c0      	nop			; (mov r8, r8)
     484:	42001000 	.word	0x42001000
     488:	42000800 	.word	0x42000800
     48c:	42000c00 	.word	0x42000c00
     490:	42001800 	.word	0x42001800
     494:	42001c00 	.word	0x42001c00
     498:	42001400 	.word	0x42001400
     49c:	00050003 	.word	0x00050003
     4a0:	00060003 	.word	0x00060003
     4a4:	00070003 	.word	0x00070003
     4a8:	00010003 	.word	0x00010003
     4ac:	001e0003 	.word	0x001e0003
     4b0:	001f0003 	.word	0x001f0003
     4b4:	00090003 	.word	0x00090003
     4b8:	000a0003 	.word	0x000a0003
     4bc:	000b0003 	.word	0x000b0003
     4c0:	00110003 	.word	0x00110003
     4c4:	00120003 	.word	0x00120003
     4c8:	00130003 	.word	0x00130003
     4cc:	000d0003 	.word	0x000d0003
     4d0:	000e0003 	.word	0x000e0003
     4d4:	000f0003 	.word	0x000f0003
     4d8:	00170003 	.word	0x00170003
     4dc:	00180003 	.word	0x00180003
     4e0:	00190003 	.word	0x00190003
     4e4:	00040003 	.word	0x00040003
     4e8:	00080003 	.word	0x00080003
     4ec:	00100003 	.word	0x00100003
     4f0:	000c0003 	.word	0x000c0003
     4f4:	00160003 	.word	0x00160003

000004f8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     4f8:	b530      	push	{r4, r5, lr}
     4fa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     4fc:	4b0c      	ldr	r3, [pc, #48]	; (530 <_sercom_get_sercom_inst_index+0x38>)
     4fe:	466a      	mov	r2, sp
     500:	cb32      	ldmia	r3!, {r1, r4, r5}
     502:	c232      	stmia	r2!, {r1, r4, r5}
     504:	cb32      	ldmia	r3!, {r1, r4, r5}
     506:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     508:	9b00      	ldr	r3, [sp, #0]
     50a:	4283      	cmp	r3, r0
     50c:	d006      	beq.n	51c <_sercom_get_sercom_inst_index+0x24>
     50e:	2301      	movs	r3, #1
     510:	009a      	lsls	r2, r3, #2
     512:	4669      	mov	r1, sp
     514:	5852      	ldr	r2, [r2, r1]
     516:	4282      	cmp	r2, r0
     518:	d103      	bne.n	522 <_sercom_get_sercom_inst_index+0x2a>
     51a:	e000      	b.n	51e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     51c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     51e:	b2d8      	uxtb	r0, r3
     520:	e003      	b.n	52a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     522:	3301      	adds	r3, #1
     524:	2b06      	cmp	r3, #6
     526:	d1f3      	bne.n	510 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     528:	2000      	movs	r0, #0
}
     52a:	b007      	add	sp, #28
     52c:	bd30      	pop	{r4, r5, pc}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	000020dc 	.word	0x000020dc

00000534 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     534:	4770      	bx	lr
     536:	46c0      	nop			; (mov r8, r8)

00000538 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     538:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     53a:	4b0a      	ldr	r3, [pc, #40]	; (564 <_sercom_set_handler+0x2c>)
     53c:	781b      	ldrb	r3, [r3, #0]
     53e:	2b00      	cmp	r3, #0
     540:	d10c      	bne.n	55c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     542:	4f09      	ldr	r7, [pc, #36]	; (568 <_sercom_set_handler+0x30>)
     544:	4e09      	ldr	r6, [pc, #36]	; (56c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     546:	4d0a      	ldr	r5, [pc, #40]	; (570 <_sercom_set_handler+0x38>)
     548:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     54a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     54c:	195a      	adds	r2, r3, r5
     54e:	6014      	str	r4, [r2, #0]
     550:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     552:	2b18      	cmp	r3, #24
     554:	d1f9      	bne.n	54a <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     556:	2201      	movs	r2, #1
     558:	4b02      	ldr	r3, [pc, #8]	; (564 <_sercom_set_handler+0x2c>)
     55a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     55c:	0080      	lsls	r0, r0, #2
     55e:	4b02      	ldr	r3, [pc, #8]	; (568 <_sercom_set_handler+0x30>)
     560:	50c1      	str	r1, [r0, r3]
}
     562:	bdf0      	pop	{r4, r5, r6, r7, pc}
     564:	2000008e 	.word	0x2000008e
     568:	20000090 	.word	0x20000090
     56c:	00000535 	.word	0x00000535
     570:	20000100 	.word	0x20000100

00000574 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     574:	b510      	push	{r4, lr}
     576:	b082      	sub	sp, #8
     578:	0004      	movs	r4, r0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     57a:	2206      	movs	r2, #6
     57c:	4905      	ldr	r1, [pc, #20]	; (594 <_sercom_get_interrupt_vector+0x20>)
     57e:	4668      	mov	r0, sp
     580:	4b05      	ldr	r3, [pc, #20]	; (598 <_sercom_get_interrupt_vector+0x24>)
     582:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     584:	0020      	movs	r0, r4
     586:	4b05      	ldr	r3, [pc, #20]	; (59c <_sercom_get_interrupt_vector+0x28>)
     588:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     58a:	466b      	mov	r3, sp
     58c:	5618      	ldrsb	r0, [r3, r0]
}
     58e:	b002      	add	sp, #8
     590:	bd10      	pop	{r4, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	000020f4 	.word	0x000020f4
     598:	0000160d 	.word	0x0000160d
     59c:	000004f9 	.word	0x000004f9

000005a0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     5a0:	b510      	push	{r4, lr}
     5a2:	4b02      	ldr	r3, [pc, #8]	; (5ac <SERCOM0_Handler+0xc>)
     5a4:	681b      	ldr	r3, [r3, #0]
     5a6:	2000      	movs	r0, #0
     5a8:	4798      	blx	r3
     5aa:	bd10      	pop	{r4, pc}
     5ac:	20000090 	.word	0x20000090

000005b0 <SERCOM1_Handler>:
     5b0:	b510      	push	{r4, lr}
     5b2:	4b02      	ldr	r3, [pc, #8]	; (5bc <SERCOM1_Handler+0xc>)
     5b4:	685b      	ldr	r3, [r3, #4]
     5b6:	2001      	movs	r0, #1
     5b8:	4798      	blx	r3
     5ba:	bd10      	pop	{r4, pc}
     5bc:	20000090 	.word	0x20000090

000005c0 <SERCOM2_Handler>:
     5c0:	b510      	push	{r4, lr}
     5c2:	4b02      	ldr	r3, [pc, #8]	; (5cc <SERCOM2_Handler+0xc>)
     5c4:	689b      	ldr	r3, [r3, #8]
     5c6:	2002      	movs	r0, #2
     5c8:	4798      	blx	r3
     5ca:	bd10      	pop	{r4, pc}
     5cc:	20000090 	.word	0x20000090

000005d0 <SERCOM3_Handler>:
     5d0:	b510      	push	{r4, lr}
     5d2:	4b02      	ldr	r3, [pc, #8]	; (5dc <SERCOM3_Handler+0xc>)
     5d4:	68db      	ldr	r3, [r3, #12]
     5d6:	2003      	movs	r0, #3
     5d8:	4798      	blx	r3
     5da:	bd10      	pop	{r4, pc}
     5dc:	20000090 	.word	0x20000090

000005e0 <SERCOM4_Handler>:
     5e0:	b510      	push	{r4, lr}
     5e2:	4b02      	ldr	r3, [pc, #8]	; (5ec <SERCOM4_Handler+0xc>)
     5e4:	691b      	ldr	r3, [r3, #16]
     5e6:	2004      	movs	r0, #4
     5e8:	4798      	blx	r3
     5ea:	bd10      	pop	{r4, pc}
     5ec:	20000090 	.word	0x20000090

000005f0 <SERCOM5_Handler>:
     5f0:	b510      	push	{r4, lr}
     5f2:	4b02      	ldr	r3, [pc, #8]	; (5fc <SERCOM5_Handler+0xc>)
     5f4:	695b      	ldr	r3, [r3, #20]
     5f6:	2005      	movs	r0, #5
     5f8:	4798      	blx	r3
     5fa:	bd10      	pop	{r4, pc}
     5fc:	20000090 	.word	0x20000090

00000600 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     600:	b5f0      	push	{r4, r5, r6, r7, lr}
     602:	465f      	mov	r7, fp
     604:	4656      	mov	r6, sl
     606:	464d      	mov	r5, r9
     608:	4644      	mov	r4, r8
     60a:	b4f0      	push	{r4, r5, r6, r7}
     60c:	b091      	sub	sp, #68	; 0x44
     60e:	0005      	movs	r5, r0
     610:	000c      	movs	r4, r1
     612:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     614:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     616:	0008      	movs	r0, r1
     618:	4bbb      	ldr	r3, [pc, #748]	; (908 <usart_init+0x308>)
     61a:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     61c:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     61e:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     620:	07d2      	lsls	r2, r2, #31
     622:	d500      	bpl.n	626 <usart_init+0x26>
     624:	e167      	b.n	8f6 <usart_init+0x2f6>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     626:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     628:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     62a:	0792      	lsls	r2, r2, #30
     62c:	d500      	bpl.n	630 <usart_init+0x30>
     62e:	e162      	b.n	8f6 <usart_init+0x2f6>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     630:	49b6      	ldr	r1, [pc, #728]	; (90c <usart_init+0x30c>)
     632:	6a0a      	ldr	r2, [r1, #32]
     634:	1c87      	adds	r7, r0, #2
     636:	3b1b      	subs	r3, #27
     638:	40bb      	lsls	r3, r7
     63a:	4313      	orrs	r3, r2
     63c:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     63e:	a90f      	add	r1, sp, #60	; 0x3c
     640:	272d      	movs	r7, #45	; 0x2d
     642:	5df3      	ldrb	r3, [r6, r7]
     644:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     646:	3014      	adds	r0, #20
     648:	b2c3      	uxtb	r3, r0
     64a:	9302      	str	r3, [sp, #8]
     64c:	0018      	movs	r0, r3
     64e:	4bb0      	ldr	r3, [pc, #704]	; (910 <usart_init+0x310>)
     650:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     652:	9802      	ldr	r0, [sp, #8]
     654:	4baf      	ldr	r3, [pc, #700]	; (914 <usart_init+0x314>)
     656:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     658:	5df0      	ldrb	r0, [r6, r7]
     65a:	2100      	movs	r1, #0
     65c:	4bae      	ldr	r3, [pc, #696]	; (918 <usart_init+0x318>)
     65e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     660:	7af3      	ldrb	r3, [r6, #11]
     662:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     664:	2324      	movs	r3, #36	; 0x24
     666:	5cf3      	ldrb	r3, [r6, r3]
     668:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     66a:	2325      	movs	r3, #37	; 0x25
     66c:	5cf3      	ldrb	r3, [r6, r3]
     66e:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     670:	7ef3      	ldrb	r3, [r6, #27]
     672:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     674:	7f33      	ldrb	r3, [r6, #28]
     676:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     678:	682b      	ldr	r3, [r5, #0]
     67a:	4699      	mov	r9, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     67c:	0018      	movs	r0, r3
     67e:	4ba2      	ldr	r3, [pc, #648]	; (908 <usart_init+0x308>)
     680:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     682:	3014      	adds	r0, #20
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
     684:	2200      	movs	r2, #0
     686:	230e      	movs	r3, #14
     688:	a906      	add	r1, sp, #24
     68a:	468c      	mov	ip, r1
     68c:	4463      	add	r3, ip
     68e:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     690:	8a32      	ldrh	r2, [r6, #16]
     692:	9202      	str	r2, [sp, #8]
     694:	2380      	movs	r3, #128	; 0x80
     696:	01db      	lsls	r3, r3, #7
     698:	429a      	cmp	r2, r3
     69a:	d01a      	beq.n	6d2 <usart_init+0xd2>
     69c:	d804      	bhi.n	6a8 <usart_init+0xa8>
     69e:	2380      	movs	r3, #128	; 0x80
     6a0:	019b      	lsls	r3, r3, #6
     6a2:	429a      	cmp	r2, r3
     6a4:	d00b      	beq.n	6be <usart_init+0xbe>
     6a6:	e107      	b.n	8b8 <usart_init+0x2b8>
     6a8:	23c0      	movs	r3, #192	; 0xc0
     6aa:	01db      	lsls	r3, r3, #7
     6ac:	9a02      	ldr	r2, [sp, #8]
     6ae:	429a      	cmp	r2, r3
     6b0:	d00a      	beq.n	6c8 <usart_init+0xc8>
     6b2:	2380      	movs	r3, #128	; 0x80
     6b4:	021b      	lsls	r3, r3, #8
     6b6:	429a      	cmp	r2, r3
     6b8:	d100      	bne.n	6bc <usart_init+0xbc>
     6ba:	e102      	b.n	8c2 <usart_init+0x2c2>
     6bc:	e0fc      	b.n	8b8 <usart_init+0x2b8>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     6be:	2310      	movs	r3, #16
     6c0:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     6c2:	3b0f      	subs	r3, #15
     6c4:	9307      	str	r3, [sp, #28]
     6c6:	e100      	b.n	8ca <usart_init+0x2ca>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     6c8:	2308      	movs	r3, #8
     6ca:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     6cc:	3b07      	subs	r3, #7
     6ce:	9307      	str	r3, [sp, #28]
     6d0:	e0fb      	b.n	8ca <usart_init+0x2ca>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     6d2:	6833      	ldr	r3, [r6, #0]
     6d4:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     6d6:	68f3      	ldr	r3, [r6, #12]
     6d8:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     6da:	6973      	ldr	r3, [r6, #20]
     6dc:	4698      	mov	r8, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     6de:	7e33      	ldrb	r3, [r6, #24]
     6e0:	469b      	mov	fp, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     6e2:	2326      	movs	r3, #38	; 0x26
     6e4:	5cf3      	ldrb	r3, [r6, r3]
     6e6:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     6e8:	6873      	ldr	r3, [r6, #4]
     6ea:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     6ec:	2b00      	cmp	r3, #0
     6ee:	d015      	beq.n	71c <usart_init+0x11c>
     6f0:	2380      	movs	r3, #128	; 0x80
     6f2:	055b      	lsls	r3, r3, #21
     6f4:	459a      	cmp	sl, r3
     6f6:	d136      	bne.n	766 <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     6f8:	2327      	movs	r3, #39	; 0x27
     6fa:	5cf3      	ldrb	r3, [r6, r3]
     6fc:	2b00      	cmp	r3, #0
     6fe:	d136      	bne.n	76e <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     700:	6a33      	ldr	r3, [r6, #32]
     702:	001f      	movs	r7, r3
     704:	b2c0      	uxtb	r0, r0
     706:	4b85      	ldr	r3, [pc, #532]	; (91c <usart_init+0x31c>)
     708:	4798      	blx	r3
     70a:	0001      	movs	r1, r0
     70c:	220e      	movs	r2, #14
     70e:	ab06      	add	r3, sp, #24
     710:	469c      	mov	ip, r3
     712:	4462      	add	r2, ip
     714:	0038      	movs	r0, r7
     716:	4b82      	ldr	r3, [pc, #520]	; (920 <usart_init+0x320>)
     718:	4798      	blx	r3
     71a:	e025      	b.n	768 <usart_init+0x168>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     71c:	2308      	movs	r3, #8
     71e:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     720:	2300      	movs	r3, #0
     722:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     724:	2327      	movs	r3, #39	; 0x27
     726:	5cf3      	ldrb	r3, [r6, r3]
     728:	2b00      	cmp	r3, #0
     72a:	d00b      	beq.n	744 <usart_init+0x144>
				status_code =
     72c:	9b06      	ldr	r3, [sp, #24]
     72e:	9300      	str	r3, [sp, #0]
     730:	9b07      	ldr	r3, [sp, #28]
     732:	220e      	movs	r2, #14
     734:	a906      	add	r1, sp, #24
     736:	468c      	mov	ip, r1
     738:	4462      	add	r2, ip
     73a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     73c:	6a30      	ldr	r0, [r6, #32]
     73e:	4f79      	ldr	r7, [pc, #484]	; (924 <usart_init+0x324>)
     740:	47b8      	blx	r7
     742:	e011      	b.n	768 <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     744:	6a33      	ldr	r3, [r6, #32]
     746:	001f      	movs	r7, r3
     748:	b2c0      	uxtb	r0, r0
     74a:	4b74      	ldr	r3, [pc, #464]	; (91c <usart_init+0x31c>)
     74c:	4798      	blx	r3
     74e:	0001      	movs	r1, r0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     750:	9b06      	ldr	r3, [sp, #24]
     752:	9300      	str	r3, [sp, #0]
     754:	9b07      	ldr	r3, [sp, #28]
     756:	220e      	movs	r2, #14
     758:	a806      	add	r0, sp, #24
     75a:	4684      	mov	ip, r0
     75c:	4462      	add	r2, ip
     75e:	0038      	movs	r0, r7
     760:	4f70      	ldr	r7, [pc, #448]	; (924 <usart_init+0x324>)
     762:	47b8      	blx	r7
     764:	e000      	b.n	768 <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     766:	2000      	movs	r0, #0
     768:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     76a:	d000      	beq.n	76e <usart_init+0x16e>
     76c:	e0c3      	b.n	8f6 <usart_init+0x2f6>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     76e:	7e73      	ldrb	r3, [r6, #25]
     770:	2b00      	cmp	r3, #0
     772:	d002      	beq.n	77a <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     774:	7eb3      	ldrb	r3, [r6, #26]
     776:	464a      	mov	r2, r9
     778:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     77a:	682a      	ldr	r2, [r5, #0]
     77c:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     77e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     780:	2b00      	cmp	r3, #0
     782:	d1fc      	bne.n	77e <usart_init+0x17e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     784:	330e      	adds	r3, #14
     786:	aa06      	add	r2, sp, #24
     788:	4694      	mov	ip, r2
     78a:	4463      	add	r3, ip
     78c:	881b      	ldrh	r3, [r3, #0]
     78e:	464a      	mov	r2, r9
     790:	8193      	strh	r3, [r2, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
     792:	9b04      	ldr	r3, [sp, #16]
     794:	9a03      	ldr	r2, [sp, #12]
     796:	4313      	orrs	r3, r2
     798:	4642      	mov	r2, r8
     79a:	4313      	orrs	r3, r2
     79c:	4652      	mov	r2, sl
     79e:	4313      	orrs	r3, r2
     7a0:	433b      	orrs	r3, r7
     7a2:	465a      	mov	r2, fp
     7a4:	0212      	lsls	r2, r2, #8
     7a6:	4313      	orrs	r3, r2
     7a8:	9a05      	ldr	r2, [sp, #20]
     7aa:	0757      	lsls	r7, r2, #29
     7ac:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
     7ae:	2327      	movs	r3, #39	; 0x27
     7b0:	5cf3      	ldrb	r3, [r6, r3]
     7b2:	2b00      	cmp	r3, #0
     7b4:	d101      	bne.n	7ba <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     7b6:	3304      	adds	r3, #4
     7b8:	431f      	orrs	r7, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     7ba:	7e71      	ldrb	r1, [r6, #25]
     7bc:	0289      	lsls	r1, r1, #10
     7be:	7f33      	ldrb	r3, [r6, #28]
     7c0:	025b      	lsls	r3, r3, #9
     7c2:	4319      	orrs	r1, r3
     7c4:	7f73      	ldrb	r3, [r6, #29]
     7c6:	021b      	lsls	r3, r3, #8
     7c8:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     7ca:	2324      	movs	r3, #36	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     7cc:	5cf3      	ldrb	r3, [r6, r3]
     7ce:	045b      	lsls	r3, r3, #17
     7d0:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     7d2:	2325      	movs	r3, #37	; 0x25
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
     7d4:	5cf0      	ldrb	r0, [r6, r3]
     7d6:	0400      	lsls	r0, r0, #16
     7d8:	000a      	movs	r2, r1
     7da:	4302      	orrs	r2, r0
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
	ctrlb |= (uint32_t)config->character_size;
     7dc:	7ab1      	ldrb	r1, [r6, #10]
     7de:	7af3      	ldrb	r3, [r6, #11]
     7e0:	4319      	orrs	r1, r3
     7e2:	4311      	orrs	r1, r2
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     7e4:	8933      	ldrh	r3, [r6, #8]
     7e6:	2bff      	cmp	r3, #255	; 0xff
     7e8:	d004      	beq.n	7f4 <usart_init+0x1f4>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     7ea:	2280      	movs	r2, #128	; 0x80
     7ec:	0452      	lsls	r2, r2, #17
     7ee:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     7f0:	4319      	orrs	r1, r3
     7f2:	e005      	b.n	800 <usart_init+0x200>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     7f4:	7ef3      	ldrb	r3, [r6, #27]
     7f6:	2b00      	cmp	r3, #0
     7f8:	d002      	beq.n	800 <usart_init+0x200>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     7fa:	2380      	movs	r3, #128	; 0x80
     7fc:	04db      	lsls	r3, r3, #19
     7fe:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     800:	232c      	movs	r3, #44	; 0x2c
     802:	5cf3      	ldrb	r3, [r6, r3]
     804:	2b00      	cmp	r3, #0
     806:	d103      	bne.n	810 <usart_init+0x210>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     808:	4b47      	ldr	r3, [pc, #284]	; (928 <usart_init+0x328>)
     80a:	789b      	ldrb	r3, [r3, #2]
     80c:	079b      	lsls	r3, r3, #30
     80e:	d501      	bpl.n	814 <usart_init+0x214>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     810:	2380      	movs	r3, #128	; 0x80
     812:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     814:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     816:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     818:	2b00      	cmp	r3, #0
     81a:	d1fc      	bne.n	816 <usart_init+0x216>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     81c:	464b      	mov	r3, r9
     81e:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     820:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     822:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     824:	2b00      	cmp	r3, #0
     826:	d1fc      	bne.n	822 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     828:	464b      	mov	r3, r9
     82a:	601f      	str	r7, [r3, #0]
     82c:	ab0e      	add	r3, sp, #56	; 0x38
     82e:	2280      	movs	r2, #128	; 0x80
     830:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     832:	2200      	movs	r2, #0
     834:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     836:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     838:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     83a:	6b33      	ldr	r3, [r6, #48]	; 0x30
     83c:	930a      	str	r3, [sp, #40]	; 0x28
     83e:	6b73      	ldr	r3, [r6, #52]	; 0x34
     840:	930b      	str	r3, [sp, #44]	; 0x2c
     842:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     844:	930c      	str	r3, [sp, #48]	; 0x30
     846:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     848:	9302      	str	r3, [sp, #8]
     84a:	930d      	str	r3, [sp, #52]	; 0x34
     84c:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     84e:	ae0e      	add	r6, sp, #56	; 0x38
     850:	b2f9      	uxtb	r1, r7
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     852:	00bb      	lsls	r3, r7, #2
     854:	aa0a      	add	r2, sp, #40	; 0x28
     856:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     858:	2800      	cmp	r0, #0
     85a:	d102      	bne.n	862 <usart_init+0x262>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     85c:	0020      	movs	r0, r4
     85e:	4b33      	ldr	r3, [pc, #204]	; (92c <usart_init+0x32c>)
     860:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     862:	1c43      	adds	r3, r0, #1
     864:	d005      	beq.n	872 <usart_init+0x272>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     866:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     868:	0c00      	lsrs	r0, r0, #16
     86a:	b2c0      	uxtb	r0, r0
     86c:	0031      	movs	r1, r6
     86e:	4b30      	ldr	r3, [pc, #192]	; (930 <usart_init+0x330>)
     870:	4798      	blx	r3
     872:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     874:	2f04      	cmp	r7, #4
     876:	d1eb      	bne.n	850 <usart_init+0x250>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     878:	2300      	movs	r3, #0
     87a:	60eb      	str	r3, [r5, #12]
     87c:	612b      	str	r3, [r5, #16]
     87e:	616b      	str	r3, [r5, #20]
     880:	61ab      	str	r3, [r5, #24]
     882:	61eb      	str	r3, [r5, #28]
     884:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
     886:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     888:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     88a:	2200      	movs	r2, #0
     88c:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     88e:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     890:	3330      	adds	r3, #48	; 0x30
     892:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     894:	3301      	adds	r3, #1
     896:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     898:	3301      	adds	r3, #1
     89a:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     89c:	3301      	adds	r3, #1
     89e:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     8a0:	6828      	ldr	r0, [r5, #0]
     8a2:	4b19      	ldr	r3, [pc, #100]	; (908 <usart_init+0x308>)
     8a4:	4798      	blx	r3
     8a6:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     8a8:	4922      	ldr	r1, [pc, #136]	; (934 <usart_init+0x334>)
     8aa:	4b23      	ldr	r3, [pc, #140]	; (938 <usart_init+0x338>)
     8ac:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     8ae:	00a4      	lsls	r4, r4, #2
     8b0:	4b22      	ldr	r3, [pc, #136]	; (93c <usart_init+0x33c>)
     8b2:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     8b4:	2300      	movs	r3, #0
     8b6:	e01e      	b.n	8f6 <usart_init+0x2f6>
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     8b8:	2310      	movs	r3, #16
     8ba:	9306      	str	r3, [sp, #24]
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8bc:	2300      	movs	r3, #0
     8be:	9307      	str	r3, [sp, #28]
     8c0:	e003      	b.n	8ca <usart_init+0x2ca>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     8c2:	2303      	movs	r3, #3
     8c4:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     8c6:	2300      	movs	r3, #0
     8c8:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     8ca:	6833      	ldr	r3, [r6, #0]
     8cc:	9304      	str	r3, [sp, #16]
		(uint32_t)config->mux_setting |
     8ce:	68f3      	ldr	r3, [r6, #12]
     8d0:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     8d2:	6973      	ldr	r3, [r6, #20]
     8d4:	4698      	mov	r8, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     8d6:	7e33      	ldrb	r3, [r6, #24]
     8d8:	469b      	mov	fp, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8da:	2326      	movs	r3, #38	; 0x26
     8dc:	5cf3      	ldrb	r3, [r6, r3]
     8de:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	transfer_mode = (uint32_t)config->transfer_mode;
     8e0:	6873      	ldr	r3, [r6, #4]
     8e2:	469a      	mov	sl, r3
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
     8e4:	2b00      	cmp	r3, #0
     8e6:	d100      	bne.n	8ea <usart_init+0x2ea>
     8e8:	e71c      	b.n	724 <usart_init+0x124>
     8ea:	2380      	movs	r3, #128	; 0x80
     8ec:	055b      	lsls	r3, r3, #21
     8ee:	459a      	cmp	sl, r3
     8f0:	d100      	bne.n	8f4 <usart_init+0x2f4>
     8f2:	e701      	b.n	6f8 <usart_init+0xf8>
     8f4:	e73b      	b.n	76e <usart_init+0x16e>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     8f6:	0018      	movs	r0, r3
     8f8:	b011      	add	sp, #68	; 0x44
     8fa:	bc3c      	pop	{r2, r3, r4, r5}
     8fc:	4690      	mov	r8, r2
     8fe:	4699      	mov	r9, r3
     900:	46a2      	mov	sl, r4
     902:	46ab      	mov	fp, r5
     904:	bdf0      	pop	{r4, r5, r6, r7, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	000004f9 	.word	0x000004f9
     90c:	40000400 	.word	0x40000400
     910:	00000fad 	.word	0x00000fad
     914:	00000f21 	.word	0x00000f21
     918:	00000325 	.word	0x00000325
     91c:	00000fc9 	.word	0x00000fc9
     920:	00000269 	.word	0x00000269
     924:	00000291 	.word	0x00000291
     928:	41002000 	.word	0x41002000
     92c:	00000371 	.word	0x00000371
     930:	000010a5 	.word	0x000010a5
     934:	000009dd 	.word	0x000009dd
     938:	00000539 	.word	0x00000539
     93c:	20000100 	.word	0x20000100

00000940 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     940:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     942:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     944:	2a00      	cmp	r2, #0
     946:	d00e      	beq.n	966 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     948:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     94a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     94c:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     94e:	2a00      	cmp	r2, #0
     950:	d109      	bne.n	966 <usart_write_wait+0x26>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     952:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     954:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     956:	2a00      	cmp	r2, #0
     958:	d1fc      	bne.n	954 <usart_write_wait+0x14>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     95a:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     95c:	2102      	movs	r1, #2
     95e:	7e1a      	ldrb	r2, [r3, #24]
     960:	420a      	tst	r2, r1
     962:	d0fc      	beq.n	95e <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     964:	2300      	movs	r3, #0
}
     966:	0018      	movs	r0, r3
     968:	4770      	bx	lr
     96a:	46c0      	nop			; (mov r8, r8)

0000096c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     96c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     96e:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     970:	2a00      	cmp	r2, #0
     972:	d030      	beq.n	9d6 <usart_read_wait+0x6a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     974:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     976:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     978:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     97a:	2a00      	cmp	r2, #0
     97c:	d12b      	bne.n	9d6 <usart_read_wait+0x6a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     97e:	6802      	ldr	r2, [r0, #0]
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     980:	7e10      	ldrb	r0, [r2, #24]
     982:	0740      	lsls	r0, r0, #29
     984:	d527      	bpl.n	9d6 <usart_read_wait+0x6a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     986:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     988:	2b00      	cmp	r3, #0
     98a:	d1fc      	bne.n	986 <usart_read_wait+0x1a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     98c:	8b53      	ldrh	r3, [r2, #26]
     98e:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     990:	0698      	lsls	r0, r3, #26
     992:	d01d      	beq.n	9d0 <usart_read_wait+0x64>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     994:	0798      	lsls	r0, r3, #30
     996:	d503      	bpl.n	9a0 <usart_read_wait+0x34>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     998:	2302      	movs	r3, #2
     99a:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_FORMAT;
     99c:	3318      	adds	r3, #24
     99e:	e01a      	b.n	9d6 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     9a0:	0758      	lsls	r0, r3, #29
     9a2:	d503      	bpl.n	9ac <usart_read_wait+0x40>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     9a4:	2304      	movs	r3, #4
     9a6:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_OVERFLOW;
     9a8:	331a      	adds	r3, #26
     9aa:	e014      	b.n	9d6 <usart_read_wait+0x6a>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     9ac:	07d8      	lsls	r0, r3, #31
     9ae:	d503      	bpl.n	9b8 <usart_read_wait+0x4c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     9b0:	2301      	movs	r3, #1
     9b2:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_BAD_DATA;
     9b4:	3312      	adds	r3, #18
     9b6:	e00e      	b.n	9d6 <usart_read_wait+0x6a>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     9b8:	06d8      	lsls	r0, r3, #27
     9ba:	d503      	bpl.n	9c4 <usart_read_wait+0x58>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     9bc:	2310      	movs	r3, #16
     9be:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PROTOCOL;
     9c0:	3332      	adds	r3, #50	; 0x32
     9c2:	e008      	b.n	9d6 <usart_read_wait+0x6a>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     9c4:	069b      	lsls	r3, r3, #26
     9c6:	d503      	bpl.n	9d0 <usart_read_wait+0x64>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     9c8:	2320      	movs	r3, #32
     9ca:	8353      	strh	r3, [r2, #26]

			return STATUS_ERR_PACKET_COLLISION;
     9cc:	3321      	adds	r3, #33	; 0x21
     9ce:	e002      	b.n	9d6 <usart_read_wait+0x6a>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     9d0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     9d2:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     9d4:	2300      	movs	r3, #0
}
     9d6:	0018      	movs	r0, r3
     9d8:	4770      	bx	lr
     9da:	46c0      	nop			; (mov r8, r8)

000009dc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     9de:	0080      	lsls	r0, r0, #2
     9e0:	4b60      	ldr	r3, [pc, #384]	; (b64 <_usart_interrupt_handler+0x188>)
     9e2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     9e4:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9e6:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9e8:	2b00      	cmp	r3, #0
     9ea:	d1fc      	bne.n	9e6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     9ec:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     9ee:	7da6      	ldrb	r6, [r4, #22]
     9f0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     9f2:	2330      	movs	r3, #48	; 0x30
     9f4:	5ceb      	ldrb	r3, [r5, r3]
     9f6:	2231      	movs	r2, #49	; 0x31
     9f8:	5caf      	ldrb	r7, [r5, r2]
     9fa:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     9fc:	07f3      	lsls	r3, r6, #31
     9fe:	d522      	bpl.n	a46 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     a00:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a02:	b29b      	uxth	r3, r3
     a04:	2b00      	cmp	r3, #0
     a06:	d01c      	beq.n	a42 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a08:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     a0a:	7813      	ldrb	r3, [r2, #0]
     a0c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     a0e:	1c51      	adds	r1, r2, #1
     a10:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a12:	7969      	ldrb	r1, [r5, #5]
     a14:	2901      	cmp	r1, #1
     a16:	d001      	beq.n	a1c <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     a18:	b29b      	uxth	r3, r3
     a1a:	e004      	b.n	a26 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     a1c:	7851      	ldrb	r1, [r2, #1]
     a1e:	0209      	lsls	r1, r1, #8
     a20:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     a22:	3202      	adds	r2, #2
     a24:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     a26:	05db      	lsls	r3, r3, #23
     a28:	0ddb      	lsrs	r3, r3, #23
     a2a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     a2c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     a2e:	3b01      	subs	r3, #1
     a30:	b29b      	uxth	r3, r3
     a32:	85eb      	strh	r3, [r5, #46]	; 0x2e
     a34:	2b00      	cmp	r3, #0
     a36:	d106      	bne.n	a46 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a38:	3301      	adds	r3, #1
     a3a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     a3c:	3301      	adds	r3, #1
     a3e:	75a3      	strb	r3, [r4, #22]
     a40:	e001      	b.n	a46 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     a42:	2301      	movs	r3, #1
     a44:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     a46:	07b3      	lsls	r3, r6, #30
     a48:	d509      	bpl.n	a5e <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     a4a:	2302      	movs	r3, #2
     a4c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     a4e:	2200      	movs	r2, #0
     a50:	3331      	adds	r3, #49	; 0x31
     a52:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     a54:	07fb      	lsls	r3, r7, #31
     a56:	d502      	bpl.n	a5e <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a58:	0028      	movs	r0, r5
     a5a:	68eb      	ldr	r3, [r5, #12]
     a5c:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     a5e:	0773      	lsls	r3, r6, #29
     a60:	d560      	bpl.n	b24 <_usart_interrupt_handler+0x148>

		if (module->remaining_rx_buffer_length) {
     a62:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a64:	b29b      	uxth	r3, r3
     a66:	2b00      	cmp	r3, #0
     a68:	d05a      	beq.n	b20 <_usart_interrupt_handler+0x144>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a6a:	8b63      	ldrh	r3, [r4, #26]
     a6c:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     a6e:	071a      	lsls	r2, r3, #28
     a70:	d402      	bmi.n	a78 <_usart_interrupt_handler+0x9c>
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a72:	223f      	movs	r2, #63	; 0x3f
     a74:	4013      	ands	r3, r2
     a76:	e001      	b.n	a7c <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
     a78:	2237      	movs	r2, #55	; 0x37
     a7a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a7c:	2b00      	cmp	r3, #0
     a7e:	d02d      	beq.n	adc <_usart_interrupt_handler+0x100>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a80:	079a      	lsls	r2, r3, #30
     a82:	d505      	bpl.n	a90 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     a84:	221a      	movs	r2, #26
     a86:	2332      	movs	r3, #50	; 0x32
     a88:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a8a:	3b30      	subs	r3, #48	; 0x30
     a8c:	8363      	strh	r3, [r4, #26]
     a8e:	e01f      	b.n	ad0 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a90:	075a      	lsls	r2, r3, #29
     a92:	d505      	bpl.n	aa0 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     a94:	221e      	movs	r2, #30
     a96:	2332      	movs	r3, #50	; 0x32
     a98:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a9a:	3b2e      	subs	r3, #46	; 0x2e
     a9c:	8363      	strh	r3, [r4, #26]
     a9e:	e017      	b.n	ad0 <_usart_interrupt_handler+0xf4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     aa0:	07da      	lsls	r2, r3, #31
     aa2:	d505      	bpl.n	ab0 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     aa4:	2213      	movs	r2, #19
     aa6:	2332      	movs	r3, #50	; 0x32
     aa8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     aaa:	3b31      	subs	r3, #49	; 0x31
     aac:	8363      	strh	r3, [r4, #26]
     aae:	e00f      	b.n	ad0 <_usart_interrupt_handler+0xf4>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     ab0:	06da      	lsls	r2, r3, #27
     ab2:	d505      	bpl.n	ac0 <_usart_interrupt_handler+0xe4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
     ab4:	2242      	movs	r2, #66	; 0x42
     ab6:	2332      	movs	r3, #50	; 0x32
     ab8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     aba:	3b22      	subs	r3, #34	; 0x22
     abc:	8363      	strh	r3, [r4, #26]
     abe:	e007      	b.n	ad0 <_usart_interrupt_handler+0xf4>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     ac0:	2220      	movs	r2, #32
     ac2:	421a      	tst	r2, r3
     ac4:	d004      	beq.n	ad0 <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     ac6:	3221      	adds	r2, #33	; 0x21
     ac8:	2332      	movs	r3, #50	; 0x32
     aca:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     acc:	3b12      	subs	r3, #18
     ace:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     ad0:	077b      	lsls	r3, r7, #29
     ad2:	d527      	bpl.n	b24 <_usart_interrupt_handler+0x148>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     ad4:	0028      	movs	r0, r5
     ad6:	696b      	ldr	r3, [r5, #20]
     ad8:	4798      	blx	r3
     ada:	e023      	b.n	b24 <_usart_interrupt_handler+0x148>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     adc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     ade:	05db      	lsls	r3, r3, #23
     ae0:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     ae2:	b2da      	uxtb	r2, r3
     ae4:	6a69      	ldr	r1, [r5, #36]	; 0x24
     ae6:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     ae8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     aea:	1c51      	adds	r1, r2, #1
     aec:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     aee:	7969      	ldrb	r1, [r5, #5]
     af0:	2901      	cmp	r1, #1
     af2:	d104      	bne.n	afe <_usart_interrupt_handler+0x122>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     af4:	0a1b      	lsrs	r3, r3, #8
     af6:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     af8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     afa:	3301      	adds	r3, #1
     afc:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     afe:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     b00:	3b01      	subs	r3, #1
     b02:	b29b      	uxth	r3, r3
     b04:	85ab      	strh	r3, [r5, #44]	; 0x2c
     b06:	2b00      	cmp	r3, #0
     b08:	d10c      	bne.n	b24 <_usart_interrupt_handler+0x148>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b0a:	3304      	adds	r3, #4
     b0c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     b0e:	2200      	movs	r2, #0
     b10:	332e      	adds	r3, #46	; 0x2e
     b12:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     b14:	07bb      	lsls	r3, r7, #30
     b16:	d505      	bpl.n	b24 <_usart_interrupt_handler+0x148>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     b18:	0028      	movs	r0, r5
     b1a:	692b      	ldr	r3, [r5, #16]
     b1c:	4798      	blx	r3
     b1e:	e001      	b.n	b24 <_usart_interrupt_handler+0x148>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     b20:	2304      	movs	r3, #4
     b22:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     b24:	06f3      	lsls	r3, r6, #27
     b26:	d507      	bpl.n	b38 <_usart_interrupt_handler+0x15c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     b28:	2310      	movs	r3, #16
     b2a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     b2c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     b2e:	06fb      	lsls	r3, r7, #27
     b30:	d502      	bpl.n	b38 <_usart_interrupt_handler+0x15c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     b32:	0028      	movs	r0, r5
     b34:	69eb      	ldr	r3, [r5, #28]
     b36:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     b38:	06b3      	lsls	r3, r6, #26
     b3a:	d507      	bpl.n	b4c <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     b3c:	2320      	movs	r3, #32
     b3e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     b40:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     b42:	073b      	lsls	r3, r7, #28
     b44:	d502      	bpl.n	b4c <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     b46:	0028      	movs	r0, r5
     b48:	69ab      	ldr	r3, [r5, #24]
     b4a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     b4c:	0733      	lsls	r3, r6, #28
     b4e:	d507      	bpl.n	b60 <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     b50:	2308      	movs	r3, #8
     b52:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     b54:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     b56:	06bb      	lsls	r3, r7, #26
     b58:	d502      	bpl.n	b60 <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     b5a:	6a2b      	ldr	r3, [r5, #32]
     b5c:	0028      	movs	r0, r5
     b5e:	4798      	blx	r3
		}
	}
#endif
}
     b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	20000100 	.word	0x20000100

00000b68 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     b68:	b510      	push	{r4, lr}
	switch (clock_source) {
     b6a:	2808      	cmp	r0, #8
     b6c:	d803      	bhi.n	b76 <system_clock_source_get_hz+0xe>
     b6e:	0080      	lsls	r0, r0, #2
     b70:	4b1b      	ldr	r3, [pc, #108]	; (be0 <system_clock_source_get_hz+0x78>)
     b72:	581b      	ldr	r3, [r3, r0]
     b74:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     b76:	2000      	movs	r0, #0
     b78:	e030      	b.n	bdc <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     b7a:	4b1a      	ldr	r3, [pc, #104]	; (be4 <system_clock_source_get_hz+0x7c>)
     b7c:	6918      	ldr	r0, [r3, #16]
     b7e:	e02d      	b.n	bdc <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     b80:	4b19      	ldr	r3, [pc, #100]	; (be8 <system_clock_source_get_hz+0x80>)
     b82:	6a1b      	ldr	r3, [r3, #32]
     b84:	059b      	lsls	r3, r3, #22
     b86:	0f9b      	lsrs	r3, r3, #30
     b88:	4818      	ldr	r0, [pc, #96]	; (bec <system_clock_source_get_hz+0x84>)
     b8a:	40d8      	lsrs	r0, r3
     b8c:	e026      	b.n	bdc <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     b8e:	4b15      	ldr	r3, [pc, #84]	; (be4 <system_clock_source_get_hz+0x7c>)
     b90:	6958      	ldr	r0, [r3, #20]
     b92:	e023      	b.n	bdc <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     b94:	4b13      	ldr	r3, [pc, #76]	; (be4 <system_clock_source_get_hz+0x7c>)
     b96:	681b      	ldr	r3, [r3, #0]
     b98:	2002      	movs	r0, #2
     b9a:	4018      	ands	r0, r3
     b9c:	d01e      	beq.n	bdc <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     b9e:	4912      	ldr	r1, [pc, #72]	; (be8 <system_clock_source_get_hz+0x80>)
     ba0:	2210      	movs	r2, #16
     ba2:	68cb      	ldr	r3, [r1, #12]
     ba4:	421a      	tst	r2, r3
     ba6:	d0fc      	beq.n	ba2 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     ba8:	4b0e      	ldr	r3, [pc, #56]	; (be4 <system_clock_source_get_hz+0x7c>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	075b      	lsls	r3, r3, #29
     bae:	d514      	bpl.n	bda <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     bb0:	2000      	movs	r0, #0
     bb2:	4b0f      	ldr	r3, [pc, #60]	; (bf0 <system_clock_source_get_hz+0x88>)
     bb4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     bb6:	4b0b      	ldr	r3, [pc, #44]	; (be4 <system_clock_source_get_hz+0x7c>)
     bb8:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     bba:	041b      	lsls	r3, r3, #16
     bbc:	0c1b      	lsrs	r3, r3, #16
     bbe:	4358      	muls	r0, r3
     bc0:	e00c      	b.n	bdc <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     bc2:	2350      	movs	r3, #80	; 0x50
     bc4:	4a08      	ldr	r2, [pc, #32]	; (be8 <system_clock_source_get_hz+0x80>)
     bc6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     bc8:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     bca:	075b      	lsls	r3, r3, #29
     bcc:	d506      	bpl.n	bdc <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
     bce:	4b05      	ldr	r3, [pc, #20]	; (be4 <system_clock_source_get_hz+0x7c>)
     bd0:	68d8      	ldr	r0, [r3, #12]
     bd2:	e003      	b.n	bdc <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     bd4:	2080      	movs	r0, #128	; 0x80
     bd6:	0200      	lsls	r0, r0, #8
     bd8:	e000      	b.n	bdc <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     bda:	4806      	ldr	r0, [pc, #24]	; (bf4 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
     bdc:	bd10      	pop	{r4, pc}
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	000020fc 	.word	0x000020fc
     be4:	200000a8 	.word	0x200000a8
     be8:	40000800 	.word	0x40000800
     bec:	007a1200 	.word	0x007a1200
     bf0:	00000fc9 	.word	0x00000fc9
     bf4:	02dc6c00 	.word	0x02dc6c00

00000bf8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     bf8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     bfa:	4c0c      	ldr	r4, [pc, #48]	; (c2c <system_clock_source_osc8m_set_config+0x34>)
     bfc:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     bfe:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     c00:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     c02:	7842      	ldrb	r2, [r0, #1]
     c04:	2001      	movs	r0, #1
     c06:	4002      	ands	r2, r0
     c08:	0192      	lsls	r2, r2, #6
     c0a:	2640      	movs	r6, #64	; 0x40
     c0c:	43b3      	bics	r3, r6
     c0e:	4313      	orrs	r3, r2
     c10:	0002      	movs	r2, r0
     c12:	402a      	ands	r2, r5
     c14:	01d2      	lsls	r2, r2, #7
     c16:	307f      	adds	r0, #127	; 0x7f
     c18:	4383      	bics	r3, r0
     c1a:	4313      	orrs	r3, r2
     c1c:	2203      	movs	r2, #3
     c1e:	400a      	ands	r2, r1
     c20:	0212      	lsls	r2, r2, #8
     c22:	4903      	ldr	r1, [pc, #12]	; (c30 <system_clock_source_osc8m_set_config+0x38>)
     c24:	400b      	ands	r3, r1
     c26:	4313      	orrs	r3, r2
     c28:	6223      	str	r3, [r4, #32]
}
     c2a:	bd70      	pop	{r4, r5, r6, pc}
     c2c:	40000800 	.word	0x40000800
     c30:	fffffcff 	.word	0xfffffcff

00000c34 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     c34:	2808      	cmp	r0, #8
     c36:	d803      	bhi.n	c40 <system_clock_source_enable+0xc>
     c38:	0080      	lsls	r0, r0, #2
     c3a:	4b25      	ldr	r3, [pc, #148]	; (cd0 <system_clock_source_enable+0x9c>)
     c3c:	581b      	ldr	r3, [r3, r0]
     c3e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     c40:	2017      	movs	r0, #23
     c42:	e044      	b.n	cce <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c44:	4a23      	ldr	r2, [pc, #140]	; (cd4 <system_clock_source_enable+0xa0>)
     c46:	6a11      	ldr	r1, [r2, #32]
     c48:	2302      	movs	r3, #2
     c4a:	430b      	orrs	r3, r1
     c4c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     c4e:	2000      	movs	r0, #0
     c50:	e03d      	b.n	cce <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c52:	4a20      	ldr	r2, [pc, #128]	; (cd4 <system_clock_source_enable+0xa0>)
     c54:	6991      	ldr	r1, [r2, #24]
     c56:	2302      	movs	r3, #2
     c58:	430b      	orrs	r3, r1
     c5a:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c5c:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     c5e:	e036      	b.n	cce <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c60:	4a1c      	ldr	r2, [pc, #112]	; (cd4 <system_clock_source_enable+0xa0>)
     c62:	8a11      	ldrh	r1, [r2, #16]
     c64:	2302      	movs	r3, #2
     c66:	430b      	orrs	r3, r1
     c68:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c6a:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     c6c:	e02f      	b.n	cce <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c6e:	4a19      	ldr	r2, [pc, #100]	; (cd4 <system_clock_source_enable+0xa0>)
     c70:	8a91      	ldrh	r1, [r2, #20]
     c72:	2302      	movs	r3, #2
     c74:	430b      	orrs	r3, r1
     c76:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c78:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     c7a:	e028      	b.n	cce <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     c7c:	4916      	ldr	r1, [pc, #88]	; (cd8 <system_clock_source_enable+0xa4>)
     c7e:	680b      	ldr	r3, [r1, #0]
     c80:	2202      	movs	r2, #2
     c82:	4313      	orrs	r3, r2
     c84:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     c86:	4b13      	ldr	r3, [pc, #76]	; (cd4 <system_clock_source_enable+0xa0>)
     c88:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c8a:	0019      	movs	r1, r3
     c8c:	320e      	adds	r2, #14
     c8e:	68cb      	ldr	r3, [r1, #12]
     c90:	421a      	tst	r2, r3
     c92:	d0fc      	beq.n	c8e <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     c94:	4a10      	ldr	r2, [pc, #64]	; (cd8 <system_clock_source_enable+0xa4>)
     c96:	6891      	ldr	r1, [r2, #8]
     c98:	4b0e      	ldr	r3, [pc, #56]	; (cd4 <system_clock_source_enable+0xa0>)
     c9a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     c9c:	6852      	ldr	r2, [r2, #4]
     c9e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
     ca0:	2200      	movs	r2, #0
     ca2:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     ca4:	0019      	movs	r1, r3
     ca6:	3210      	adds	r2, #16
     ca8:	68cb      	ldr	r3, [r1, #12]
     caa:	421a      	tst	r2, r3
     cac:	d0fc      	beq.n	ca8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     cae:	4b0a      	ldr	r3, [pc, #40]	; (cd8 <system_clock_source_enable+0xa4>)
     cb0:	681b      	ldr	r3, [r3, #0]
     cb2:	b29b      	uxth	r3, r3
     cb4:	4a07      	ldr	r2, [pc, #28]	; (cd4 <system_clock_source_enable+0xa0>)
     cb6:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     cb8:	2000      	movs	r0, #0
     cba:	e008      	b.n	cce <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     cbc:	4905      	ldr	r1, [pc, #20]	; (cd4 <system_clock_source_enable+0xa0>)
     cbe:	2244      	movs	r2, #68	; 0x44
     cc0:	5c88      	ldrb	r0, [r1, r2]
     cc2:	2302      	movs	r3, #2
     cc4:	4303      	orrs	r3, r0
     cc6:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     cc8:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
     cca:	e000      	b.n	cce <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     ccc:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     cce:	4770      	bx	lr
     cd0:	00002120 	.word	0x00002120
     cd4:	40000800 	.word	0x40000800
     cd8:	200000a8 	.word	0x200000a8

00000cdc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     cdc:	b530      	push	{r4, r5, lr}
     cde:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ce0:	22c2      	movs	r2, #194	; 0xc2
     ce2:	00d2      	lsls	r2, r2, #3
     ce4:	4b1a      	ldr	r3, [pc, #104]	; (d50 <system_clock_init+0x74>)
     ce6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     ce8:	4a1a      	ldr	r2, [pc, #104]	; (d54 <system_clock_init+0x78>)
     cea:	6853      	ldr	r3, [r2, #4]
     cec:	211e      	movs	r1, #30
     cee:	438b      	bics	r3, r1
     cf0:	6053      	str	r3, [r2, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     cf2:	2301      	movs	r3, #1
     cf4:	466a      	mov	r2, sp
     cf6:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cf8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     cfa:	4d17      	ldr	r5, [pc, #92]	; (d58 <system_clock_init+0x7c>)
     cfc:	b2e0      	uxtb	r0, r4
     cfe:	4669      	mov	r1, sp
     d00:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     d02:	3401      	adds	r4, #1
     d04:	2c25      	cmp	r4, #37	; 0x25
     d06:	d1f9      	bne.n	cfc <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
     d08:	a803      	add	r0, sp, #12
     d0a:	2400      	movs	r4, #0
     d0c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     d0e:	2501      	movs	r5, #1
     d10:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     d12:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     d14:	4b11      	ldr	r3, [pc, #68]	; (d5c <system_clock_init+0x80>)
     d16:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     d18:	2006      	movs	r0, #6
     d1a:	4b11      	ldr	r3, [pc, #68]	; (d60 <system_clock_init+0x84>)
     d1c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     d1e:	4b11      	ldr	r3, [pc, #68]	; (d64 <system_clock_init+0x88>)
     d20:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     d22:	4b11      	ldr	r3, [pc, #68]	; (d68 <system_clock_init+0x8c>)
     d24:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     d26:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     d28:	729c      	strb	r4, [r3, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
     d2a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     d2c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     d2e:	466b      	mov	r3, sp
     d30:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     d32:	2306      	movs	r3, #6
     d34:	466a      	mov	r2, sp
     d36:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     d38:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     d3a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     d3c:	4669      	mov	r1, sp
     d3e:	2000      	movs	r0, #0
     d40:	4b0a      	ldr	r3, [pc, #40]	; (d6c <system_clock_init+0x90>)
     d42:	4798      	blx	r3
     d44:	2000      	movs	r0, #0
     d46:	4b0a      	ldr	r3, [pc, #40]	; (d70 <system_clock_init+0x94>)
     d48:	4798      	blx	r3
#endif
}
     d4a:	b005      	add	sp, #20
     d4c:	bd30      	pop	{r4, r5, pc}
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	40000800 	.word	0x40000800
     d54:	41004000 	.word	0x41004000
     d58:	00000fad 	.word	0x00000fad
     d5c:	00000bf9 	.word	0x00000bf9
     d60:	00000c35 	.word	0x00000c35
     d64:	00000d75 	.word	0x00000d75
     d68:	40000400 	.word	0x40000400
     d6c:	00000d99 	.word	0x00000d99
     d70:	00000e51 	.word	0x00000e51

00000d74 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     d74:	4a06      	ldr	r2, [pc, #24]	; (d90 <system_gclk_init+0x1c>)
     d76:	6991      	ldr	r1, [r2, #24]
     d78:	2308      	movs	r3, #8
     d7a:	430b      	orrs	r3, r1
     d7c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     d7e:	2201      	movs	r2, #1
     d80:	4b04      	ldr	r3, [pc, #16]	; (d94 <system_gclk_init+0x20>)
     d82:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     d84:	0019      	movs	r1, r3
     d86:	780b      	ldrb	r3, [r1, #0]
     d88:	4213      	tst	r3, r2
     d8a:	d1fc      	bne.n	d86 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     d8c:	4770      	bx	lr
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	40000400 	.word	0x40000400
     d94:	40000c00 	.word	0x40000c00

00000d98 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     d98:	b570      	push	{r4, r5, r6, lr}
     d9a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     d9c:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     d9e:	780c      	ldrb	r4, [r1, #0]
     da0:	0224      	lsls	r4, r4, #8
     da2:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     da4:	784b      	ldrb	r3, [r1, #1]
     da6:	2b00      	cmp	r3, #0
     da8:	d002      	beq.n	db0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     daa:	2380      	movs	r3, #128	; 0x80
     dac:	02db      	lsls	r3, r3, #11
     dae:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     db0:	7a4b      	ldrb	r3, [r1, #9]
     db2:	2b00      	cmp	r3, #0
     db4:	d002      	beq.n	dbc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     db6:	2380      	movs	r3, #128	; 0x80
     db8:	031b      	lsls	r3, r3, #12
     dba:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     dbc:	6848      	ldr	r0, [r1, #4]
     dbe:	2801      	cmp	r0, #1
     dc0:	d918      	bls.n	df4 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     dc2:	1e43      	subs	r3, r0, #1
     dc4:	4218      	tst	r0, r3
     dc6:	d110      	bne.n	dea <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     dc8:	2802      	cmp	r0, #2
     dca:	d906      	bls.n	dda <system_gclk_gen_set_config+0x42>
     dcc:	2302      	movs	r3, #2
     dce:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     dd0:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     dd2:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     dd4:	4298      	cmp	r0, r3
     dd6:	d8fb      	bhi.n	dd0 <system_gclk_gen_set_config+0x38>
     dd8:	e000      	b.n	ddc <system_gclk_gen_set_config+0x44>
     dda:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     ddc:	0212      	lsls	r2, r2, #8
     dde:	4332      	orrs	r2, r6
     de0:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     de2:	2380      	movs	r3, #128	; 0x80
     de4:	035b      	lsls	r3, r3, #13
     de6:	431c      	orrs	r4, r3
     de8:	e004      	b.n	df4 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
     dea:	0205      	lsls	r5, r0, #8
     dec:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     dee:	2380      	movs	r3, #128	; 0x80
     df0:	029b      	lsls	r3, r3, #10
     df2:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     df4:	7a0b      	ldrb	r3, [r1, #8]
     df6:	2b00      	cmp	r3, #0
     df8:	d002      	beq.n	e00 <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     dfa:	2380      	movs	r3, #128	; 0x80
     dfc:	039b      	lsls	r3, r3, #14
     dfe:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e00:	4a0f      	ldr	r2, [pc, #60]	; (e40 <system_gclk_gen_set_config+0xa8>)
     e02:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
     e04:	b25b      	sxtb	r3, r3
     e06:	2b00      	cmp	r3, #0
     e08:	dbfb      	blt.n	e02 <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e0a:	4b0e      	ldr	r3, [pc, #56]	; (e44 <system_gclk_gen_set_config+0xac>)
     e0c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     e0e:	4b0e      	ldr	r3, [pc, #56]	; (e48 <system_gclk_gen_set_config+0xb0>)
     e10:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e12:	4a0b      	ldr	r2, [pc, #44]	; (e40 <system_gclk_gen_set_config+0xa8>)
     e14:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     e16:	b25b      	sxtb	r3, r3
     e18:	2b00      	cmp	r3, #0
     e1a:	dbfb      	blt.n	e14 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     e1c:	4b08      	ldr	r3, [pc, #32]	; (e40 <system_gclk_gen_set_config+0xa8>)
     e1e:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e20:	001a      	movs	r2, r3
     e22:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
     e24:	b25b      	sxtb	r3, r3
     e26:	2b00      	cmp	r3, #0
     e28:	dbfb      	blt.n	e22 <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     e2a:	4a05      	ldr	r2, [pc, #20]	; (e40 <system_gclk_gen_set_config+0xa8>)
     e2c:	6851      	ldr	r1, [r2, #4]
     e2e:	2380      	movs	r3, #128	; 0x80
     e30:	025b      	lsls	r3, r3, #9
     e32:	400b      	ands	r3, r1
     e34:	431c      	orrs	r4, r3
     e36:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e38:	4b04      	ldr	r3, [pc, #16]	; (e4c <system_gclk_gen_set_config+0xb4>)
     e3a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e3c:	bd70      	pop	{r4, r5, r6, pc}
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	40000c00 	.word	0x40000c00
     e44:	00000119 	.word	0x00000119
     e48:	40000c08 	.word	0x40000c08
     e4c:	00000159 	.word	0x00000159

00000e50 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     e50:	b510      	push	{r4, lr}
     e52:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e54:	4a0b      	ldr	r2, [pc, #44]	; (e84 <system_gclk_gen_enable+0x34>)
     e56:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     e58:	b25b      	sxtb	r3, r3
     e5a:	2b00      	cmp	r3, #0
     e5c:	dbfb      	blt.n	e56 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e5e:	4b0a      	ldr	r3, [pc, #40]	; (e88 <system_gclk_gen_enable+0x38>)
     e60:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     e62:	4b0a      	ldr	r3, [pc, #40]	; (e8c <system_gclk_gen_enable+0x3c>)
     e64:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e66:	4a07      	ldr	r2, [pc, #28]	; (e84 <system_gclk_gen_enable+0x34>)
     e68:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     e6a:	b25b      	sxtb	r3, r3
     e6c:	2b00      	cmp	r3, #0
     e6e:	dbfb      	blt.n	e68 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     e70:	4a04      	ldr	r2, [pc, #16]	; (e84 <system_gclk_gen_enable+0x34>)
     e72:	6853      	ldr	r3, [r2, #4]
     e74:	2180      	movs	r1, #128	; 0x80
     e76:	0249      	lsls	r1, r1, #9
     e78:	430b      	orrs	r3, r1
     e7a:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     e7c:	4b04      	ldr	r3, [pc, #16]	; (e90 <system_gclk_gen_enable+0x40>)
     e7e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     e80:	bd10      	pop	{r4, pc}
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	40000c00 	.word	0x40000c00
     e88:	00000119 	.word	0x00000119
     e8c:	40000c04 	.word	0x40000c04
     e90:	00000159 	.word	0x00000159

00000e94 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     e94:	b570      	push	{r4, r5, r6, lr}
     e96:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     e98:	4a1a      	ldr	r2, [pc, #104]	; (f04 <system_gclk_gen_get_hz+0x70>)
     e9a:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     e9c:	b25b      	sxtb	r3, r3
     e9e:	2b00      	cmp	r3, #0
     ea0:	dbfb      	blt.n	e9a <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     ea2:	4b19      	ldr	r3, [pc, #100]	; (f08 <system_gclk_gen_get_hz+0x74>)
     ea4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ea6:	4b19      	ldr	r3, [pc, #100]	; (f0c <system_gclk_gen_get_hz+0x78>)
     ea8:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     eaa:	4a16      	ldr	r2, [pc, #88]	; (f04 <system_gclk_gen_get_hz+0x70>)
     eac:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     eae:	b25b      	sxtb	r3, r3
     eb0:	2b00      	cmp	r3, #0
     eb2:	dbfb      	blt.n	eac <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     eb4:	4e13      	ldr	r6, [pc, #76]	; (f04 <system_gclk_gen_get_hz+0x70>)
     eb6:	6870      	ldr	r0, [r6, #4]
     eb8:	04c0      	lsls	r0, r0, #19
     eba:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
     ebc:	4b14      	ldr	r3, [pc, #80]	; (f10 <system_gclk_gen_get_hz+0x7c>)
     ebe:	4798      	blx	r3
     ec0:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ec2:	4b12      	ldr	r3, [pc, #72]	; (f0c <system_gclk_gen_get_hz+0x78>)
     ec4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     ec6:	6876      	ldr	r6, [r6, #4]
     ec8:	02f6      	lsls	r6, r6, #11
     eca:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ecc:	4b11      	ldr	r3, [pc, #68]	; (f14 <system_gclk_gen_get_hz+0x80>)
     ece:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ed0:	4a0c      	ldr	r2, [pc, #48]	; (f04 <system_gclk_gen_get_hz+0x70>)
     ed2:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
     ed4:	b25b      	sxtb	r3, r3
     ed6:	2b00      	cmp	r3, #0
     ed8:	dbfb      	blt.n	ed2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     eda:	4b0a      	ldr	r3, [pc, #40]	; (f04 <system_gclk_gen_get_hz+0x70>)
     edc:	689c      	ldr	r4, [r3, #8]
     ede:	0224      	lsls	r4, r4, #8
     ee0:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     ee2:	4b0d      	ldr	r3, [pc, #52]	; (f18 <system_gclk_gen_get_hz+0x84>)
     ee4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     ee6:	2e00      	cmp	r6, #0
     ee8:	d107      	bne.n	efa <system_gclk_gen_get_hz+0x66>
     eea:	2c01      	cmp	r4, #1
     eec:	d907      	bls.n	efe <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     eee:	0021      	movs	r1, r4
     ef0:	0028      	movs	r0, r5
     ef2:	4b0a      	ldr	r3, [pc, #40]	; (f1c <system_gclk_gen_get_hz+0x88>)
     ef4:	4798      	blx	r3
     ef6:	0005      	movs	r5, r0
     ef8:	e001      	b.n	efe <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     efa:	3401      	adds	r4, #1
     efc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     efe:	0028      	movs	r0, r5
     f00:	bd70      	pop	{r4, r5, r6, pc}
     f02:	46c0      	nop			; (mov r8, r8)
     f04:	40000c00 	.word	0x40000c00
     f08:	00000119 	.word	0x00000119
     f0c:	40000c04 	.word	0x40000c04
     f10:	00000b69 	.word	0x00000b69
     f14:	40000c08 	.word	0x40000c08
     f18:	00000159 	.word	0x00000159
     f1c:	00001451 	.word	0x00001451

00000f20 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     f20:	b510      	push	{r4, lr}
     f22:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f24:	4b06      	ldr	r3, [pc, #24]	; (f40 <system_gclk_chan_enable+0x20>)
     f26:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f28:	4b06      	ldr	r3, [pc, #24]	; (f44 <system_gclk_chan_enable+0x24>)
     f2a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f2c:	4a06      	ldr	r2, [pc, #24]	; (f48 <system_gclk_chan_enable+0x28>)
     f2e:	8851      	ldrh	r1, [r2, #2]
     f30:	2380      	movs	r3, #128	; 0x80
     f32:	01db      	lsls	r3, r3, #7
     f34:	430b      	orrs	r3, r1
     f36:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f38:	4b04      	ldr	r3, [pc, #16]	; (f4c <system_gclk_chan_enable+0x2c>)
     f3a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f3c:	bd10      	pop	{r4, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	00000119 	.word	0x00000119
     f44:	40000c02 	.word	0x40000c02
     f48:	40000c00 	.word	0x40000c00
     f4c:	00000159 	.word	0x00000159

00000f50 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f50:	b510      	push	{r4, lr}
     f52:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f54:	4b0f      	ldr	r3, [pc, #60]	; (f94 <system_gclk_chan_disable+0x44>)
     f56:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f58:	4b0f      	ldr	r3, [pc, #60]	; (f98 <system_gclk_chan_disable+0x48>)
     f5a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f5c:	4b0f      	ldr	r3, [pc, #60]	; (f9c <system_gclk_chan_disable+0x4c>)
     f5e:	885a      	ldrh	r2, [r3, #2]
     f60:	0512      	lsls	r2, r2, #20
     f62:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     f64:	8859      	ldrh	r1, [r3, #2]
     f66:	4a0e      	ldr	r2, [pc, #56]	; (fa0 <system_gclk_chan_disable+0x50>)
     f68:	400a      	ands	r2, r1
     f6a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f6c:	8859      	ldrh	r1, [r3, #2]
     f6e:	4a0d      	ldr	r2, [pc, #52]	; (fa4 <system_gclk_chan_disable+0x54>)
     f70:	400a      	ands	r2, r1
     f72:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     f74:	0019      	movs	r1, r3
     f76:	2280      	movs	r2, #128	; 0x80
     f78:	01d2      	lsls	r2, r2, #7
     f7a:	884b      	ldrh	r3, [r1, #2]
     f7c:	4213      	tst	r3, r2
     f7e:	d1fc      	bne.n	f7a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     f80:	4906      	ldr	r1, [pc, #24]	; (f9c <system_gclk_chan_disable+0x4c>)
     f82:	884c      	ldrh	r4, [r1, #2]
     f84:	0202      	lsls	r2, r0, #8
     f86:	4b06      	ldr	r3, [pc, #24]	; (fa0 <system_gclk_chan_disable+0x50>)
     f88:	4023      	ands	r3, r4
     f8a:	4313      	orrs	r3, r2
     f8c:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f8e:	4b06      	ldr	r3, [pc, #24]	; (fa8 <system_gclk_chan_disable+0x58>)
     f90:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f92:	bd10      	pop	{r4, pc}
     f94:	00000119 	.word	0x00000119
     f98:	40000c02 	.word	0x40000c02
     f9c:	40000c00 	.word	0x40000c00
     fa0:	fffff0ff 	.word	0xfffff0ff
     fa4:	ffffbfff 	.word	0xffffbfff
     fa8:	00000159 	.word	0x00000159

00000fac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
     fac:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     fae:	780c      	ldrb	r4, [r1, #0]
     fb0:	0224      	lsls	r4, r4, #8
     fb2:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     fb4:	4b02      	ldr	r3, [pc, #8]	; (fc0 <system_gclk_chan_set_config+0x14>)
     fb6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     fb8:	b2a4      	uxth	r4, r4
     fba:	4b02      	ldr	r3, [pc, #8]	; (fc4 <system_gclk_chan_set_config+0x18>)
     fbc:	805c      	strh	r4, [r3, #2]
}
     fbe:	bd10      	pop	{r4, pc}
     fc0:	00000f51 	.word	0x00000f51
     fc4:	40000c00 	.word	0x40000c00

00000fc8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     fc8:	b510      	push	{r4, lr}
     fca:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     fcc:	4b06      	ldr	r3, [pc, #24]	; (fe8 <system_gclk_chan_get_hz+0x20>)
     fce:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     fd0:	4b06      	ldr	r3, [pc, #24]	; (fec <system_gclk_chan_get_hz+0x24>)
     fd2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     fd4:	4b06      	ldr	r3, [pc, #24]	; (ff0 <system_gclk_chan_get_hz+0x28>)
     fd6:	885c      	ldrh	r4, [r3, #2]
     fd8:	0524      	lsls	r4, r4, #20
     fda:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     fdc:	4b05      	ldr	r3, [pc, #20]	; (ff4 <system_gclk_chan_get_hz+0x2c>)
     fde:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     fe0:	0020      	movs	r0, r4
     fe2:	4b05      	ldr	r3, [pc, #20]	; (ff8 <system_gclk_chan_get_hz+0x30>)
     fe4:	4798      	blx	r3
}
     fe6:	bd10      	pop	{r4, pc}
     fe8:	00000119 	.word	0x00000119
     fec:	40000c02 	.word	0x40000c02
     ff0:	40000c00 	.word	0x40000c00
     ff4:	00000159 	.word	0x00000159
     ff8:	00000e95 	.word	0x00000e95

00000ffc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     ffc:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     ffe:	78d3      	ldrb	r3, [r2, #3]
    1000:	2b00      	cmp	r3, #0
    1002:	d11e      	bne.n	1042 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1004:	7813      	ldrb	r3, [r2, #0]
    1006:	2b80      	cmp	r3, #128	; 0x80
    1008:	d004      	beq.n	1014 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    100a:	061b      	lsls	r3, r3, #24
    100c:	2480      	movs	r4, #128	; 0x80
    100e:	0264      	lsls	r4, r4, #9
    1010:	4323      	orrs	r3, r4
    1012:	e000      	b.n	1016 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1014:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1016:	7854      	ldrb	r4, [r2, #1]
    1018:	2502      	movs	r5, #2
    101a:	43ac      	bics	r4, r5
    101c:	d10a      	bne.n	1034 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    101e:	7894      	ldrb	r4, [r2, #2]
    1020:	2c00      	cmp	r4, #0
    1022:	d103      	bne.n	102c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1024:	2480      	movs	r4, #128	; 0x80
    1026:	02a4      	lsls	r4, r4, #10
    1028:	4323      	orrs	r3, r4
    102a:	e002      	b.n	1032 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    102c:	24c0      	movs	r4, #192	; 0xc0
    102e:	02e4      	lsls	r4, r4, #11
    1030:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1032:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1034:	7854      	ldrb	r4, [r2, #1]
    1036:	3c01      	subs	r4, #1
    1038:	2c01      	cmp	r4, #1
    103a:	d812      	bhi.n	1062 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    103c:	4c18      	ldr	r4, [pc, #96]	; (10a0 <_system_pinmux_config+0xa4>)
    103e:	4023      	ands	r3, r4
    1040:	e00f      	b.n	1062 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1042:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1044:	040b      	lsls	r3, r1, #16
    1046:	0c1b      	lsrs	r3, r3, #16
    1048:	24a0      	movs	r4, #160	; 0xa0
    104a:	05e4      	lsls	r4, r4, #23
    104c:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    104e:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1050:	0c0b      	lsrs	r3, r1, #16
    1052:	24d0      	movs	r4, #208	; 0xd0
    1054:	0624      	lsls	r4, r4, #24
    1056:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1058:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    105a:	78d3      	ldrb	r3, [r2, #3]
    105c:	2b00      	cmp	r3, #0
    105e:	d018      	beq.n	1092 <_system_pinmux_config+0x96>
    1060:	e01c      	b.n	109c <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1062:	040c      	lsls	r4, r1, #16
    1064:	0c24      	lsrs	r4, r4, #16
    1066:	25a0      	movs	r5, #160	; 0xa0
    1068:	05ed      	lsls	r5, r5, #23
    106a:	432c      	orrs	r4, r5
    106c:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    106e:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1070:	0c0c      	lsrs	r4, r1, #16
    1072:	25d0      	movs	r5, #208	; 0xd0
    1074:	062d      	lsls	r5, r5, #24
    1076:	432c      	orrs	r4, r5
    1078:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    107a:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    107c:	78d4      	ldrb	r4, [r2, #3]
    107e:	2c00      	cmp	r4, #0
    1080:	d10c      	bne.n	109c <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1082:	035b      	lsls	r3, r3, #13
    1084:	d505      	bpl.n	1092 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1086:	7893      	ldrb	r3, [r2, #2]
    1088:	2b01      	cmp	r3, #1
    108a:	d101      	bne.n	1090 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    108c:	6181      	str	r1, [r0, #24]
    108e:	e000      	b.n	1092 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    1090:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1092:	7853      	ldrb	r3, [r2, #1]
    1094:	3b01      	subs	r3, #1
    1096:	2b01      	cmp	r3, #1
    1098:	d800      	bhi.n	109c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    109a:	6081      	str	r1, [r0, #8]
		}
	}
}
    109c:	bd30      	pop	{r4, r5, pc}
    109e:	46c0      	nop			; (mov r8, r8)
    10a0:	fffbffff 	.word	0xfffbffff

000010a4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    10a4:	b510      	push	{r4, lr}
    10a6:	0003      	movs	r3, r0
    10a8:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    10aa:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    10ac:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    10ae:	2900      	cmp	r1, #0
    10b0:	d104      	bne.n	10bc <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    10b2:	0958      	lsrs	r0, r3, #5
    10b4:	01c0      	lsls	r0, r0, #7
    10b6:	4905      	ldr	r1, [pc, #20]	; (10cc <system_pinmux_pin_set_config+0x28>)
    10b8:	468c      	mov	ip, r1
    10ba:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    10bc:	211f      	movs	r1, #31
    10be:	400b      	ands	r3, r1
    10c0:	391e      	subs	r1, #30
    10c2:	4099      	lsls	r1, r3
    10c4:	4b02      	ldr	r3, [pc, #8]	; (10d0 <system_pinmux_pin_set_config+0x2c>)
    10c6:	4798      	blx	r3
}
    10c8:	bd10      	pop	{r4, pc}
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	41004400 	.word	0x41004400
    10d0:	00000ffd 	.word	0x00000ffd

000010d4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    10d4:	4770      	bx	lr
    10d6:	46c0      	nop			; (mov r8, r8)

000010d8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    10d8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    10da:	4b05      	ldr	r3, [pc, #20]	; (10f0 <system_init+0x18>)
    10dc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    10de:	4b05      	ldr	r3, [pc, #20]	; (10f4 <system_init+0x1c>)
    10e0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    10e2:	4b05      	ldr	r3, [pc, #20]	; (10f8 <system_init+0x20>)
    10e4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    10e6:	4b05      	ldr	r3, [pc, #20]	; (10fc <system_init+0x24>)
    10e8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    10ea:	4b05      	ldr	r3, [pc, #20]	; (1100 <system_init+0x28>)
    10ec:	4798      	blx	r3
}
    10ee:	bd10      	pop	{r4, pc}
    10f0:	00000cdd 	.word	0x00000cdd
    10f4:	00000115 	.word	0x00000115
    10f8:	000010d5 	.word	0x000010d5
    10fc:	000010d5 	.word	0x000010d5
    1100:	000010d5 	.word	0x000010d5

00001104 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1104:	e7fe      	b.n	1104 <Dummy_Handler>
    1106:	46c0      	nop			; (mov r8, r8)

00001108 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1108:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    110a:	4b2e      	ldr	r3, [pc, #184]	; (11c4 <Reset_Handler+0xbc>)
    110c:	4a2e      	ldr	r2, [pc, #184]	; (11c8 <Reset_Handler+0xc0>)
    110e:	429a      	cmp	r2, r3
    1110:	d003      	beq.n	111a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1112:	4b2e      	ldr	r3, [pc, #184]	; (11cc <Reset_Handler+0xc4>)
    1114:	4a2b      	ldr	r2, [pc, #172]	; (11c4 <Reset_Handler+0xbc>)
    1116:	429a      	cmp	r2, r3
    1118:	d304      	bcc.n	1124 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    111a:	4b2d      	ldr	r3, [pc, #180]	; (11d0 <Reset_Handler+0xc8>)
    111c:	4a2d      	ldr	r2, [pc, #180]	; (11d4 <Reset_Handler+0xcc>)
    111e:	429a      	cmp	r2, r3
    1120:	d310      	bcc.n	1144 <Reset_Handler+0x3c>
    1122:	e01e      	b.n	1162 <Reset_Handler+0x5a>
    1124:	4a2c      	ldr	r2, [pc, #176]	; (11d8 <Reset_Handler+0xd0>)
    1126:	4b29      	ldr	r3, [pc, #164]	; (11cc <Reset_Handler+0xc4>)
    1128:	3303      	adds	r3, #3
    112a:	1a9b      	subs	r3, r3, r2
    112c:	089b      	lsrs	r3, r3, #2
    112e:	3301      	adds	r3, #1
    1130:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1132:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1134:	4823      	ldr	r0, [pc, #140]	; (11c4 <Reset_Handler+0xbc>)
    1136:	4924      	ldr	r1, [pc, #144]	; (11c8 <Reset_Handler+0xc0>)
    1138:	588c      	ldr	r4, [r1, r2]
    113a:	5084      	str	r4, [r0, r2]
    113c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    113e:	429a      	cmp	r2, r3
    1140:	d1fa      	bne.n	1138 <Reset_Handler+0x30>
    1142:	e7ea      	b.n	111a <Reset_Handler+0x12>
    1144:	4a25      	ldr	r2, [pc, #148]	; (11dc <Reset_Handler+0xd4>)
    1146:	4b22      	ldr	r3, [pc, #136]	; (11d0 <Reset_Handler+0xc8>)
    1148:	3303      	adds	r3, #3
    114a:	1a9b      	subs	r3, r3, r2
    114c:	089b      	lsrs	r3, r3, #2
    114e:	3301      	adds	r3, #1
    1150:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1152:	2200      	movs	r2, #0
                *pDest++ = 0;
    1154:	481f      	ldr	r0, [pc, #124]	; (11d4 <Reset_Handler+0xcc>)
    1156:	2100      	movs	r1, #0
    1158:	1814      	adds	r4, r2, r0
    115a:	6021      	str	r1, [r4, #0]
    115c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    115e:	429a      	cmp	r2, r3
    1160:	d1fa      	bne.n	1158 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1162:	4a1f      	ldr	r2, [pc, #124]	; (11e0 <Reset_Handler+0xd8>)
    1164:	21ff      	movs	r1, #255	; 0xff
    1166:	4b1f      	ldr	r3, [pc, #124]	; (11e4 <Reset_Handler+0xdc>)
    1168:	438b      	bics	r3, r1
    116a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    116c:	39fd      	subs	r1, #253	; 0xfd
    116e:	2390      	movs	r3, #144	; 0x90
    1170:	005b      	lsls	r3, r3, #1
    1172:	4a1d      	ldr	r2, [pc, #116]	; (11e8 <Reset_Handler+0xe0>)
    1174:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1176:	481d      	ldr	r0, [pc, #116]	; (11ec <Reset_Handler+0xe4>)
    1178:	78c3      	ldrb	r3, [r0, #3]
    117a:	2403      	movs	r4, #3
    117c:	43a3      	bics	r3, r4
    117e:	2202      	movs	r2, #2
    1180:	4313      	orrs	r3, r2
    1182:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1184:	78c3      	ldrb	r3, [r0, #3]
    1186:	260c      	movs	r6, #12
    1188:	43b3      	bics	r3, r6
    118a:	2108      	movs	r1, #8
    118c:	430b      	orrs	r3, r1
    118e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    1190:	4b17      	ldr	r3, [pc, #92]	; (11f0 <Reset_Handler+0xe8>)
    1192:	7b98      	ldrb	r0, [r3, #14]
    1194:	2530      	movs	r5, #48	; 0x30
    1196:	43a8      	bics	r0, r5
    1198:	0005      	movs	r5, r0
    119a:	2020      	movs	r0, #32
    119c:	4328      	orrs	r0, r5
    119e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    11a0:	7b98      	ldrb	r0, [r3, #14]
    11a2:	43b0      	bics	r0, r6
    11a4:	4301      	orrs	r1, r0
    11a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    11a8:	7b99      	ldrb	r1, [r3, #14]
    11aa:	43a1      	bics	r1, r4
    11ac:	430a      	orrs	r2, r1
    11ae:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    11b0:	4a10      	ldr	r2, [pc, #64]	; (11f4 <Reset_Handler+0xec>)
    11b2:	6851      	ldr	r1, [r2, #4]
    11b4:	2380      	movs	r3, #128	; 0x80
    11b6:	430b      	orrs	r3, r1
    11b8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    11ba:	4b0f      	ldr	r3, [pc, #60]	; (11f8 <Reset_Handler+0xf0>)
    11bc:	4798      	blx	r3

        /* Branch to main function */
        main();
    11be:	4b0f      	ldr	r3, [pc, #60]	; (11fc <Reset_Handler+0xf4>)
    11c0:	4798      	blx	r3
    11c2:	e7fe      	b.n	11c2 <Reset_Handler+0xba>
    11c4:	20000000 	.word	0x20000000
    11c8:	000021d8 	.word	0x000021d8
    11cc:	20000068 	.word	0x20000068
    11d0:	20000128 	.word	0x20000128
    11d4:	20000068 	.word	0x20000068
    11d8:	20000004 	.word	0x20000004
    11dc:	2000006c 	.word	0x2000006c
    11e0:	e000ed00 	.word	0xe000ed00
    11e4:	00000000 	.word	0x00000000
    11e8:	41007000 	.word	0x41007000
    11ec:	41005000 	.word	0x41005000
    11f0:	41004800 	.word	0x41004800
    11f4:	41004000 	.word	0x41004000
    11f8:	000015c1 	.word	0x000015c1
    11fc:	00001315 	.word	0x00001315

00001200 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1200:	b5f0      	push	{r4, r5, r6, r7, lr}
    1202:	4647      	mov	r7, r8
    1204:	b480      	push	{r7}
    1206:	000c      	movs	r4, r1
    1208:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    120a:	2800      	cmp	r0, #0
    120c:	d10d      	bne.n	122a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
    120e:	2a00      	cmp	r2, #0
    1210:	dd0e      	ble.n	1230 <_read+0x30>
    1212:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1214:	4e08      	ldr	r6, [pc, #32]	; (1238 <_read+0x38>)
    1216:	4d09      	ldr	r5, [pc, #36]	; (123c <_read+0x3c>)
    1218:	6830      	ldr	r0, [r6, #0]
    121a:	0021      	movs	r1, r4
    121c:	682b      	ldr	r3, [r5, #0]
    121e:	4798      	blx	r3
		ptr++;
    1220:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    1222:	42a7      	cmp	r7, r4
    1224:	d1f8      	bne.n	1218 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    1226:	4640      	mov	r0, r8
    1228:	e003      	b.n	1232 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    122a:	2001      	movs	r0, #1
    122c:	4240      	negs	r0, r0
    122e:	e000      	b.n	1232 <_read+0x32>
	}

	for (; len > 0; --len) {
    1230:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    1232:	bc04      	pop	{r2}
    1234:	4690      	mov	r8, r2
    1236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1238:	20000120 	.word	0x20000120
    123c:	20000118 	.word	0x20000118

00001240 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1240:	b5f0      	push	{r4, r5, r6, r7, lr}
    1242:	4647      	mov	r7, r8
    1244:	b480      	push	{r7}
    1246:	000e      	movs	r6, r1
    1248:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    124a:	3801      	subs	r0, #1
    124c:	2802      	cmp	r0, #2
    124e:	d811      	bhi.n	1274 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
    1250:	2a00      	cmp	r2, #0
    1252:	d012      	beq.n	127a <_write+0x3a>
    1254:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1256:	4b0c      	ldr	r3, [pc, #48]	; (1288 <_write+0x48>)
    1258:	4698      	mov	r8, r3
    125a:	4f0c      	ldr	r7, [pc, #48]	; (128c <_write+0x4c>)
    125c:	4643      	mov	r3, r8
    125e:	6818      	ldr	r0, [r3, #0]
    1260:	5d31      	ldrb	r1, [r6, r4]
    1262:	683b      	ldr	r3, [r7, #0]
    1264:	4798      	blx	r3
    1266:	2800      	cmp	r0, #0
    1268:	db09      	blt.n	127e <_write+0x3e>
			return -1;
		}
		++nChars;
    126a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    126c:	42a5      	cmp	r5, r4
    126e:	d1f5      	bne.n	125c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
    1270:	0020      	movs	r0, r4
    1272:	e006      	b.n	1282 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    1274:	2001      	movs	r0, #1
    1276:	4240      	negs	r0, r0
    1278:	e003      	b.n	1282 <_write+0x42>
	}

	for (; len != 0; --len) {
    127a:	2000      	movs	r0, #0
    127c:	e001      	b.n	1282 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    127e:	2001      	movs	r0, #1
    1280:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    1282:	bc04      	pop	{r2}
    1284:	4690      	mov	r8, r2
    1286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1288:	20000120 	.word	0x20000120
    128c:	2000011c 	.word	0x2000011c

00001290 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1290:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1292:	4a06      	ldr	r2, [pc, #24]	; (12ac <_sbrk+0x1c>)
    1294:	6812      	ldr	r2, [r2, #0]
    1296:	2a00      	cmp	r2, #0
    1298:	d102      	bne.n	12a0 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    129a:	4905      	ldr	r1, [pc, #20]	; (12b0 <_sbrk+0x20>)
    129c:	4a03      	ldr	r2, [pc, #12]	; (12ac <_sbrk+0x1c>)
    129e:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    12a0:	4a02      	ldr	r2, [pc, #8]	; (12ac <_sbrk+0x1c>)
    12a2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    12a4:	18c3      	adds	r3, r0, r3
    12a6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    12a8:	4770      	bx	lr
    12aa:	46c0      	nop			; (mov r8, r8)
    12ac:	200000c0 	.word	0x200000c0
    12b0:	20002128 	.word	0x20002128

000012b4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    12b4:	2001      	movs	r0, #1
    12b6:	4240      	negs	r0, r0
    12b8:	4770      	bx	lr
    12ba:	46c0      	nop			; (mov r8, r8)

000012bc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    12bc:	2380      	movs	r3, #128	; 0x80
    12be:	019b      	lsls	r3, r3, #6
    12c0:	604b      	str	r3, [r1, #4]

	return 0;
}
    12c2:	2000      	movs	r0, #0
    12c4:	4770      	bx	lr
    12c6:	46c0      	nop			; (mov r8, r8)

000012c8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    12c8:	2001      	movs	r0, #1
    12ca:	4770      	bx	lr

000012cc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    12cc:	2000      	movs	r0, #0
    12ce:	4770      	bx	lr

000012d0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    12d0:	b570      	push	{r4, r5, r6, lr}
    12d2:	b082      	sub	sp, #8
    12d4:	0005      	movs	r5, r0
    12d6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    12d8:	2200      	movs	r2, #0
    12da:	466b      	mov	r3, sp
    12dc:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    12de:	4c06      	ldr	r4, [pc, #24]	; (12f8 <usart_serial_getchar+0x28>)
    12e0:	466b      	mov	r3, sp
    12e2:	1d99      	adds	r1, r3, #6
    12e4:	0028      	movs	r0, r5
    12e6:	47a0      	blx	r4
    12e8:	2800      	cmp	r0, #0
    12ea:	d1f9      	bne.n	12e0 <usart_serial_getchar+0x10>

	*c = temp;
    12ec:	466b      	mov	r3, sp
    12ee:	3306      	adds	r3, #6
    12f0:	881b      	ldrh	r3, [r3, #0]
    12f2:	7033      	strb	r3, [r6, #0]
}
    12f4:	b002      	add	sp, #8
    12f6:	bd70      	pop	{r4, r5, r6, pc}
    12f8:	0000096d 	.word	0x0000096d

000012fc <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    12fc:	b570      	push	{r4, r5, r6, lr}
    12fe:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1300:	b28c      	uxth	r4, r1
    1302:	4e03      	ldr	r6, [pc, #12]	; (1310 <usart_serial_putchar+0x14>)
    1304:	0021      	movs	r1, r4
    1306:	0028      	movs	r0, r5
    1308:	47b0      	blx	r6
    130a:	2800      	cmp	r0, #0
    130c:	d1fa      	bne.n	1304 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    130e:	bd70      	pop	{r4, r5, r6, pc}
    1310:	00000941 	.word	0x00000941

00001314 <main>:
	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
	usart_enable(&cdc_uart_module);
}

int main (void)
{
    1314:	b5f0      	push	{r4, r5, r6, r7, lr}
    1316:	b093      	sub	sp, #76	; 0x4c
	system_init();
    1318:	4b39      	ldr	r3, [pc, #228]	; (1400 <main+0xec>)
    131a:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    131c:	2501      	movs	r5, #1
    131e:	4b39      	ldr	r3, [pc, #228]	; (1404 <main+0xf0>)
    1320:	701d      	strb	r5, [r3, #0]
    1322:	f3bf 8f5f 	dmb	sy
    1326:	b662      	cpsie	i
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1328:	a911      	add	r1, sp, #68	; 0x44
    132a:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    132c:	2400      	movs	r4, #0
    132e:	2600      	movs	r6, #0
    1330:	708c      	strb	r4, [r1, #2]
	//configure_usart_callbacks();
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1332:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(LED0_PIN, &pin_conf);
    1334:	2017      	movs	r0, #23
    1336:	4b34      	ldr	r3, [pc, #208]	; (1408 <main+0xf4>)
    1338:	4798      	blx	r3
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    133a:	2280      	movs	r2, #128	; 0x80
    133c:	0412      	lsls	r2, r2, #16
    133e:	4b33      	ldr	r3, [pc, #204]	; (140c <main+0xf8>)
    1340:	619a      	str	r2, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1342:	aa01      	add	r2, sp, #4
    1344:	2380      	movs	r3, #128	; 0x80
    1346:	05db      	lsls	r3, r3, #23
    1348:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    134a:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    134c:	23ff      	movs	r3, #255	; 0xff
    134e:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    1350:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1352:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1354:	3bdb      	subs	r3, #219	; 0xdb
    1356:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    1358:	3301      	adds	r3, #1
    135a:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    135c:	3301      	adds	r3, #1
    135e:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    1360:	3301      	adds	r3, #1
    1362:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    1364:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1366:	3305      	adds	r3, #5
    1368:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    136a:	3301      	adds	r3, #1
    136c:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    136e:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1370:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1372:	2300      	movs	r3, #0
    1374:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1376:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1378:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    137a:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    137c:	2313      	movs	r3, #19
    137e:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1380:	7756      	strb	r6, [r2, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1382:	23c4      	movs	r3, #196	; 0xc4
    1384:	039b      	lsls	r3, r3, #14
    1386:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1388:	2301      	movs	r3, #1
    138a:	425b      	negs	r3, r3
    138c:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    138e:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1390:	4b1f      	ldr	r3, [pc, #124]	; (1410 <main+0xfc>)
    1392:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1394:	4b1f      	ldr	r3, [pc, #124]	; (1414 <main+0x100>)
    1396:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    1398:	23e1      	movs	r3, #225	; 0xe1
    139a:	025b      	lsls	r3, r3, #9
    139c:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    139e:	4c1e      	ldr	r4, [pc, #120]	; (1418 <main+0x104>)
    13a0:	4b1e      	ldr	r3, [pc, #120]	; (141c <main+0x108>)
    13a2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    13a4:	491e      	ldr	r1, [pc, #120]	; (1420 <main+0x10c>)
    13a6:	4b1f      	ldr	r3, [pc, #124]	; (1424 <main+0x110>)
    13a8:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    13aa:	491f      	ldr	r1, [pc, #124]	; (1428 <main+0x114>)
    13ac:	4b1f      	ldr	r3, [pc, #124]	; (142c <main+0x118>)
    13ae:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    13b0:	491f      	ldr	r1, [pc, #124]	; (1430 <main+0x11c>)
    13b2:	0020      	movs	r0, r4
    13b4:	4b1f      	ldr	r3, [pc, #124]	; (1434 <main+0x120>)
    13b6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    13b8:	4f1f      	ldr	r7, [pc, #124]	; (1438 <main+0x124>)
    13ba:	683b      	ldr	r3, [r7, #0]
    13bc:	6898      	ldr	r0, [r3, #8]
    13be:	2100      	movs	r1, #0
    13c0:	4e1e      	ldr	r6, [pc, #120]	; (143c <main+0x128>)
    13c2:	47b0      	blx	r6
	setbuf(stdin, NULL);
    13c4:	683b      	ldr	r3, [r7, #0]
    13c6:	6858      	ldr	r0, [r3, #4]
    13c8:	2100      	movs	r1, #0
    13ca:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    13cc:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    13ce:	0030      	movs	r0, r6
    13d0:	4b1b      	ldr	r3, [pc, #108]	; (1440 <main+0x12c>)
    13d2:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    13d4:	231f      	movs	r3, #31
    13d6:	4018      	ands	r0, r3
    13d8:	4085      	lsls	r5, r0
    13da:	4b1a      	ldr	r3, [pc, #104]	; (1444 <main+0x130>)
    13dc:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    13de:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    13e0:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    13e2:	2a00      	cmp	r2, #0
    13e4:	d1fc      	bne.n	13e0 <main+0xcc>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    13e6:	6832      	ldr	r2, [r6, #0]
    13e8:	2302      	movs	r3, #2
    13ea:	4313      	orrs	r3, r2
    13ec:	6033      	str	r3, [r6, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    13ee:	4f07      	ldr	r7, [pc, #28]	; (140c <main+0xf8>)
    13f0:	2680      	movs	r6, #128	; 0x80
    13f2:	0436      	lsls	r6, r6, #16
	port_pin_set_config(LED0_PIN, &pin_conf);
	port_pin_set_output_level(LED0_PIN, true);
	configure_console();
	while(1) {
		port_pin_toggle_output_level(LED0_PIN);
		printf("I'M ALIVE\n");
    13f4:	4d14      	ldr	r5, [pc, #80]	; (1448 <main+0x134>)
    13f6:	4c15      	ldr	r4, [pc, #84]	; (144c <main+0x138>)
    13f8:	61fe      	str	r6, [r7, #28]
    13fa:	0028      	movs	r0, r5
    13fc:	47a0      	blx	r4
    13fe:	e7fb      	b.n	13f8 <main+0xe4>
    1400:	000010d9 	.word	0x000010d9
    1404:	20000000 	.word	0x20000000
    1408:	00000189 	.word	0x00000189
    140c:	41004400 	.word	0x41004400
    1410:	002a0003 	.word	0x002a0003
    1414:	002b0003 	.word	0x002b0003
    1418:	200000c4 	.word	0x200000c4
    141c:	20000120 	.word	0x20000120
    1420:	000012fd 	.word	0x000012fd
    1424:	2000011c 	.word	0x2000011c
    1428:	000012d1 	.word	0x000012d1
    142c:	20000118 	.word	0x20000118
    1430:	42001800 	.word	0x42001800
    1434:	00000601 	.word	0x00000601
    1438:	20000064 	.word	0x20000064
    143c:	00001709 	.word	0x00001709
    1440:	00000575 	.word	0x00000575
    1444:	e000e100 	.word	0xe000e100
    1448:	00002144 	.word	0x00002144
    144c:	000016f5 	.word	0x000016f5

00001450 <__aeabi_uidiv>:
    1450:	2200      	movs	r2, #0
    1452:	0843      	lsrs	r3, r0, #1
    1454:	428b      	cmp	r3, r1
    1456:	d374      	bcc.n	1542 <__aeabi_uidiv+0xf2>
    1458:	0903      	lsrs	r3, r0, #4
    145a:	428b      	cmp	r3, r1
    145c:	d35f      	bcc.n	151e <__aeabi_uidiv+0xce>
    145e:	0a03      	lsrs	r3, r0, #8
    1460:	428b      	cmp	r3, r1
    1462:	d344      	bcc.n	14ee <__aeabi_uidiv+0x9e>
    1464:	0b03      	lsrs	r3, r0, #12
    1466:	428b      	cmp	r3, r1
    1468:	d328      	bcc.n	14bc <__aeabi_uidiv+0x6c>
    146a:	0c03      	lsrs	r3, r0, #16
    146c:	428b      	cmp	r3, r1
    146e:	d30d      	bcc.n	148c <__aeabi_uidiv+0x3c>
    1470:	22ff      	movs	r2, #255	; 0xff
    1472:	0209      	lsls	r1, r1, #8
    1474:	ba12      	rev	r2, r2
    1476:	0c03      	lsrs	r3, r0, #16
    1478:	428b      	cmp	r3, r1
    147a:	d302      	bcc.n	1482 <__aeabi_uidiv+0x32>
    147c:	1212      	asrs	r2, r2, #8
    147e:	0209      	lsls	r1, r1, #8
    1480:	d065      	beq.n	154e <__aeabi_uidiv+0xfe>
    1482:	0b03      	lsrs	r3, r0, #12
    1484:	428b      	cmp	r3, r1
    1486:	d319      	bcc.n	14bc <__aeabi_uidiv+0x6c>
    1488:	e000      	b.n	148c <__aeabi_uidiv+0x3c>
    148a:	0a09      	lsrs	r1, r1, #8
    148c:	0bc3      	lsrs	r3, r0, #15
    148e:	428b      	cmp	r3, r1
    1490:	d301      	bcc.n	1496 <__aeabi_uidiv+0x46>
    1492:	03cb      	lsls	r3, r1, #15
    1494:	1ac0      	subs	r0, r0, r3
    1496:	4152      	adcs	r2, r2
    1498:	0b83      	lsrs	r3, r0, #14
    149a:	428b      	cmp	r3, r1
    149c:	d301      	bcc.n	14a2 <__aeabi_uidiv+0x52>
    149e:	038b      	lsls	r3, r1, #14
    14a0:	1ac0      	subs	r0, r0, r3
    14a2:	4152      	adcs	r2, r2
    14a4:	0b43      	lsrs	r3, r0, #13
    14a6:	428b      	cmp	r3, r1
    14a8:	d301      	bcc.n	14ae <__aeabi_uidiv+0x5e>
    14aa:	034b      	lsls	r3, r1, #13
    14ac:	1ac0      	subs	r0, r0, r3
    14ae:	4152      	adcs	r2, r2
    14b0:	0b03      	lsrs	r3, r0, #12
    14b2:	428b      	cmp	r3, r1
    14b4:	d301      	bcc.n	14ba <__aeabi_uidiv+0x6a>
    14b6:	030b      	lsls	r3, r1, #12
    14b8:	1ac0      	subs	r0, r0, r3
    14ba:	4152      	adcs	r2, r2
    14bc:	0ac3      	lsrs	r3, r0, #11
    14be:	428b      	cmp	r3, r1
    14c0:	d301      	bcc.n	14c6 <__aeabi_uidiv+0x76>
    14c2:	02cb      	lsls	r3, r1, #11
    14c4:	1ac0      	subs	r0, r0, r3
    14c6:	4152      	adcs	r2, r2
    14c8:	0a83      	lsrs	r3, r0, #10
    14ca:	428b      	cmp	r3, r1
    14cc:	d301      	bcc.n	14d2 <__aeabi_uidiv+0x82>
    14ce:	028b      	lsls	r3, r1, #10
    14d0:	1ac0      	subs	r0, r0, r3
    14d2:	4152      	adcs	r2, r2
    14d4:	0a43      	lsrs	r3, r0, #9
    14d6:	428b      	cmp	r3, r1
    14d8:	d301      	bcc.n	14de <__aeabi_uidiv+0x8e>
    14da:	024b      	lsls	r3, r1, #9
    14dc:	1ac0      	subs	r0, r0, r3
    14de:	4152      	adcs	r2, r2
    14e0:	0a03      	lsrs	r3, r0, #8
    14e2:	428b      	cmp	r3, r1
    14e4:	d301      	bcc.n	14ea <__aeabi_uidiv+0x9a>
    14e6:	020b      	lsls	r3, r1, #8
    14e8:	1ac0      	subs	r0, r0, r3
    14ea:	4152      	adcs	r2, r2
    14ec:	d2cd      	bcs.n	148a <__aeabi_uidiv+0x3a>
    14ee:	09c3      	lsrs	r3, r0, #7
    14f0:	428b      	cmp	r3, r1
    14f2:	d301      	bcc.n	14f8 <__aeabi_uidiv+0xa8>
    14f4:	01cb      	lsls	r3, r1, #7
    14f6:	1ac0      	subs	r0, r0, r3
    14f8:	4152      	adcs	r2, r2
    14fa:	0983      	lsrs	r3, r0, #6
    14fc:	428b      	cmp	r3, r1
    14fe:	d301      	bcc.n	1504 <__aeabi_uidiv+0xb4>
    1500:	018b      	lsls	r3, r1, #6
    1502:	1ac0      	subs	r0, r0, r3
    1504:	4152      	adcs	r2, r2
    1506:	0943      	lsrs	r3, r0, #5
    1508:	428b      	cmp	r3, r1
    150a:	d301      	bcc.n	1510 <__aeabi_uidiv+0xc0>
    150c:	014b      	lsls	r3, r1, #5
    150e:	1ac0      	subs	r0, r0, r3
    1510:	4152      	adcs	r2, r2
    1512:	0903      	lsrs	r3, r0, #4
    1514:	428b      	cmp	r3, r1
    1516:	d301      	bcc.n	151c <__aeabi_uidiv+0xcc>
    1518:	010b      	lsls	r3, r1, #4
    151a:	1ac0      	subs	r0, r0, r3
    151c:	4152      	adcs	r2, r2
    151e:	08c3      	lsrs	r3, r0, #3
    1520:	428b      	cmp	r3, r1
    1522:	d301      	bcc.n	1528 <__aeabi_uidiv+0xd8>
    1524:	00cb      	lsls	r3, r1, #3
    1526:	1ac0      	subs	r0, r0, r3
    1528:	4152      	adcs	r2, r2
    152a:	0883      	lsrs	r3, r0, #2
    152c:	428b      	cmp	r3, r1
    152e:	d301      	bcc.n	1534 <__aeabi_uidiv+0xe4>
    1530:	008b      	lsls	r3, r1, #2
    1532:	1ac0      	subs	r0, r0, r3
    1534:	4152      	adcs	r2, r2
    1536:	0843      	lsrs	r3, r0, #1
    1538:	428b      	cmp	r3, r1
    153a:	d301      	bcc.n	1540 <__aeabi_uidiv+0xf0>
    153c:	004b      	lsls	r3, r1, #1
    153e:	1ac0      	subs	r0, r0, r3
    1540:	4152      	adcs	r2, r2
    1542:	1a41      	subs	r1, r0, r1
    1544:	d200      	bcs.n	1548 <__aeabi_uidiv+0xf8>
    1546:	4601      	mov	r1, r0
    1548:	4152      	adcs	r2, r2
    154a:	4610      	mov	r0, r2
    154c:	4770      	bx	lr
    154e:	e7ff      	b.n	1550 <__aeabi_uidiv+0x100>
    1550:	b501      	push	{r0, lr}
    1552:	2000      	movs	r0, #0
    1554:	f000 f806 	bl	1564 <__aeabi_idiv0>
    1558:	bd02      	pop	{r1, pc}
    155a:	46c0      	nop			; (mov r8, r8)

0000155c <__aeabi_uidivmod>:
    155c:	2900      	cmp	r1, #0
    155e:	d0f7      	beq.n	1550 <__aeabi_uidiv+0x100>
    1560:	e776      	b.n	1450 <__aeabi_uidiv>
    1562:	4770      	bx	lr

00001564 <__aeabi_idiv0>:
    1564:	4770      	bx	lr
    1566:	46c0      	nop			; (mov r8, r8)

00001568 <__aeabi_lmul>:
    1568:	b5f0      	push	{r4, r5, r6, r7, lr}
    156a:	464f      	mov	r7, r9
    156c:	4646      	mov	r6, r8
    156e:	b4c0      	push	{r6, r7}
    1570:	0416      	lsls	r6, r2, #16
    1572:	0c36      	lsrs	r6, r6, #16
    1574:	4699      	mov	r9, r3
    1576:	0033      	movs	r3, r6
    1578:	0405      	lsls	r5, r0, #16
    157a:	0c2c      	lsrs	r4, r5, #16
    157c:	0c07      	lsrs	r7, r0, #16
    157e:	0c15      	lsrs	r5, r2, #16
    1580:	4363      	muls	r3, r4
    1582:	437e      	muls	r6, r7
    1584:	436f      	muls	r7, r5
    1586:	4365      	muls	r5, r4
    1588:	0c1c      	lsrs	r4, r3, #16
    158a:	19ad      	adds	r5, r5, r6
    158c:	1964      	adds	r4, r4, r5
    158e:	469c      	mov	ip, r3
    1590:	42a6      	cmp	r6, r4
    1592:	d903      	bls.n	159c <__aeabi_lmul+0x34>
    1594:	2380      	movs	r3, #128	; 0x80
    1596:	025b      	lsls	r3, r3, #9
    1598:	4698      	mov	r8, r3
    159a:	4447      	add	r7, r8
    159c:	4663      	mov	r3, ip
    159e:	0c25      	lsrs	r5, r4, #16
    15a0:	19ef      	adds	r7, r5, r7
    15a2:	041d      	lsls	r5, r3, #16
    15a4:	464b      	mov	r3, r9
    15a6:	434a      	muls	r2, r1
    15a8:	4343      	muls	r3, r0
    15aa:	0c2d      	lsrs	r5, r5, #16
    15ac:	0424      	lsls	r4, r4, #16
    15ae:	1964      	adds	r4, r4, r5
    15b0:	1899      	adds	r1, r3, r2
    15b2:	19c9      	adds	r1, r1, r7
    15b4:	0020      	movs	r0, r4
    15b6:	bc0c      	pop	{r2, r3}
    15b8:	4690      	mov	r8, r2
    15ba:	4699      	mov	r9, r3
    15bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15be:	46c0      	nop			; (mov r8, r8)

000015c0 <__libc_init_array>:
    15c0:	4b0e      	ldr	r3, [pc, #56]	; (15fc <__libc_init_array+0x3c>)
    15c2:	b570      	push	{r4, r5, r6, lr}
    15c4:	2500      	movs	r5, #0
    15c6:	001e      	movs	r6, r3
    15c8:	4c0d      	ldr	r4, [pc, #52]	; (1600 <__libc_init_array+0x40>)
    15ca:	1ae4      	subs	r4, r4, r3
    15cc:	10a4      	asrs	r4, r4, #2
    15ce:	42a5      	cmp	r5, r4
    15d0:	d004      	beq.n	15dc <__libc_init_array+0x1c>
    15d2:	00ab      	lsls	r3, r5, #2
    15d4:	58f3      	ldr	r3, [r6, r3]
    15d6:	4798      	blx	r3
    15d8:	3501      	adds	r5, #1
    15da:	e7f8      	b.n	15ce <__libc_init_array+0xe>
    15dc:	f000 fdec 	bl	21b8 <_init>
    15e0:	4b08      	ldr	r3, [pc, #32]	; (1604 <__libc_init_array+0x44>)
    15e2:	2500      	movs	r5, #0
    15e4:	001e      	movs	r6, r3
    15e6:	4c08      	ldr	r4, [pc, #32]	; (1608 <__libc_init_array+0x48>)
    15e8:	1ae4      	subs	r4, r4, r3
    15ea:	10a4      	asrs	r4, r4, #2
    15ec:	42a5      	cmp	r5, r4
    15ee:	d004      	beq.n	15fa <__libc_init_array+0x3a>
    15f0:	00ab      	lsls	r3, r5, #2
    15f2:	58f3      	ldr	r3, [r6, r3]
    15f4:	4798      	blx	r3
    15f6:	3501      	adds	r5, #1
    15f8:	e7f8      	b.n	15ec <__libc_init_array+0x2c>
    15fa:	bd70      	pop	{r4, r5, r6, pc}
    15fc:	000021c4 	.word	0x000021c4
    1600:	000021c4 	.word	0x000021c4
    1604:	000021c4 	.word	0x000021c4
    1608:	000021c8 	.word	0x000021c8

0000160c <memcpy>:
    160c:	2300      	movs	r3, #0
    160e:	b510      	push	{r4, lr}
    1610:	429a      	cmp	r2, r3
    1612:	d003      	beq.n	161c <memcpy+0x10>
    1614:	5ccc      	ldrb	r4, [r1, r3]
    1616:	54c4      	strb	r4, [r0, r3]
    1618:	3301      	adds	r3, #1
    161a:	e7f9      	b.n	1610 <memcpy+0x4>
    161c:	bd10      	pop	{r4, pc}

0000161e <memset>:
    161e:	0003      	movs	r3, r0
    1620:	1882      	adds	r2, r0, r2
    1622:	4293      	cmp	r3, r2
    1624:	d002      	beq.n	162c <memset+0xe>
    1626:	7019      	strb	r1, [r3, #0]
    1628:	3301      	adds	r3, #1
    162a:	e7fa      	b.n	1622 <memset+0x4>
    162c:	4770      	bx	lr
	...

00001630 <_puts_r>:
    1630:	b570      	push	{r4, r5, r6, lr}
    1632:	0005      	movs	r5, r0
    1634:	000e      	movs	r6, r1
    1636:	2800      	cmp	r0, #0
    1638:	d004      	beq.n	1644 <_puts_r+0x14>
    163a:	6983      	ldr	r3, [r0, #24]
    163c:	2b00      	cmp	r3, #0
    163e:	d101      	bne.n	1644 <_puts_r+0x14>
    1640:	f000 fade 	bl	1c00 <__sinit>
    1644:	69ab      	ldr	r3, [r5, #24]
    1646:	68ac      	ldr	r4, [r5, #8]
    1648:	2b00      	cmp	r3, #0
    164a:	d102      	bne.n	1652 <_puts_r+0x22>
    164c:	0028      	movs	r0, r5
    164e:	f000 fad7 	bl	1c00 <__sinit>
    1652:	4b25      	ldr	r3, [pc, #148]	; (16e8 <_puts_r+0xb8>)
    1654:	429c      	cmp	r4, r3
    1656:	d101      	bne.n	165c <_puts_r+0x2c>
    1658:	686c      	ldr	r4, [r5, #4]
    165a:	e008      	b.n	166e <_puts_r+0x3e>
    165c:	4b23      	ldr	r3, [pc, #140]	; (16ec <_puts_r+0xbc>)
    165e:	429c      	cmp	r4, r3
    1660:	d101      	bne.n	1666 <_puts_r+0x36>
    1662:	68ac      	ldr	r4, [r5, #8]
    1664:	e003      	b.n	166e <_puts_r+0x3e>
    1666:	4b22      	ldr	r3, [pc, #136]	; (16f0 <_puts_r+0xc0>)
    1668:	429c      	cmp	r4, r3
    166a:	d100      	bne.n	166e <_puts_r+0x3e>
    166c:	68ec      	ldr	r4, [r5, #12]
    166e:	89a3      	ldrh	r3, [r4, #12]
    1670:	071b      	lsls	r3, r3, #28
    1672:	d502      	bpl.n	167a <_puts_r+0x4a>
    1674:	6923      	ldr	r3, [r4, #16]
    1676:	2b00      	cmp	r3, #0
    1678:	d111      	bne.n	169e <_puts_r+0x6e>
    167a:	0021      	movs	r1, r4
    167c:	0028      	movs	r0, r5
    167e:	f000 f955 	bl	192c <__swsetup_r>
    1682:	2800      	cmp	r0, #0
    1684:	d00b      	beq.n	169e <_puts_r+0x6e>
    1686:	2001      	movs	r0, #1
    1688:	4240      	negs	r0, r0
    168a:	e02b      	b.n	16e4 <_puts_r+0xb4>
    168c:	3b01      	subs	r3, #1
    168e:	3601      	adds	r6, #1
    1690:	60a3      	str	r3, [r4, #8]
    1692:	2b00      	cmp	r3, #0
    1694:	db08      	blt.n	16a8 <_puts_r+0x78>
    1696:	6823      	ldr	r3, [r4, #0]
    1698:	1c5a      	adds	r2, r3, #1
    169a:	6022      	str	r2, [r4, #0]
    169c:	7019      	strb	r1, [r3, #0]
    169e:	7831      	ldrb	r1, [r6, #0]
    16a0:	68a3      	ldr	r3, [r4, #8]
    16a2:	2900      	cmp	r1, #0
    16a4:	d1f2      	bne.n	168c <_puts_r+0x5c>
    16a6:	e00b      	b.n	16c0 <_puts_r+0x90>
    16a8:	69a2      	ldr	r2, [r4, #24]
    16aa:	4293      	cmp	r3, r2
    16ac:	db01      	blt.n	16b2 <_puts_r+0x82>
    16ae:	290a      	cmp	r1, #10
    16b0:	d1f1      	bne.n	1696 <_puts_r+0x66>
    16b2:	0022      	movs	r2, r4
    16b4:	0028      	movs	r0, r5
    16b6:	f000 f8e1 	bl	187c <__swbuf_r>
    16ba:	1c43      	adds	r3, r0, #1
    16bc:	d1ef      	bne.n	169e <_puts_r+0x6e>
    16be:	e7e2      	b.n	1686 <_puts_r+0x56>
    16c0:	3b01      	subs	r3, #1
    16c2:	60a3      	str	r3, [r4, #8]
    16c4:	2b00      	cmp	r3, #0
    16c6:	da08      	bge.n	16da <_puts_r+0xaa>
    16c8:	0022      	movs	r2, r4
    16ca:	310a      	adds	r1, #10
    16cc:	0028      	movs	r0, r5
    16ce:	f000 f8d5 	bl	187c <__swbuf_r>
    16d2:	1c43      	adds	r3, r0, #1
    16d4:	d0d7      	beq.n	1686 <_puts_r+0x56>
    16d6:	200a      	movs	r0, #10
    16d8:	e004      	b.n	16e4 <_puts_r+0xb4>
    16da:	200a      	movs	r0, #10
    16dc:	6823      	ldr	r3, [r4, #0]
    16de:	1c5a      	adds	r2, r3, #1
    16e0:	6022      	str	r2, [r4, #0]
    16e2:	7018      	strb	r0, [r3, #0]
    16e4:	bd70      	pop	{r4, r5, r6, pc}
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	00002158 	.word	0x00002158
    16ec:	00002178 	.word	0x00002178
    16f0:	00002198 	.word	0x00002198

000016f4 <puts>:
    16f4:	b510      	push	{r4, lr}
    16f6:	4b03      	ldr	r3, [pc, #12]	; (1704 <puts+0x10>)
    16f8:	0001      	movs	r1, r0
    16fa:	6818      	ldr	r0, [r3, #0]
    16fc:	f7ff ff98 	bl	1630 <_puts_r>
    1700:	bd10      	pop	{r4, pc}
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	20000064 	.word	0x20000064

00001708 <setbuf>:
    1708:	424a      	negs	r2, r1
    170a:	414a      	adcs	r2, r1
    170c:	2380      	movs	r3, #128	; 0x80
    170e:	b510      	push	{r4, lr}
    1710:	0052      	lsls	r2, r2, #1
    1712:	00db      	lsls	r3, r3, #3
    1714:	f000 f802 	bl	171c <setvbuf>
    1718:	bd10      	pop	{r4, pc}
	...

0000171c <setvbuf>:
    171c:	b5f0      	push	{r4, r5, r6, r7, lr}
    171e:	001d      	movs	r5, r3
    1720:	4b51      	ldr	r3, [pc, #324]	; (1868 <setvbuf+0x14c>)
    1722:	b085      	sub	sp, #20
    1724:	681e      	ldr	r6, [r3, #0]
    1726:	0004      	movs	r4, r0
    1728:	000f      	movs	r7, r1
    172a:	9200      	str	r2, [sp, #0]
    172c:	2e00      	cmp	r6, #0
    172e:	d005      	beq.n	173c <setvbuf+0x20>
    1730:	69b3      	ldr	r3, [r6, #24]
    1732:	2b00      	cmp	r3, #0
    1734:	d102      	bne.n	173c <setvbuf+0x20>
    1736:	0030      	movs	r0, r6
    1738:	f000 fa62 	bl	1c00 <__sinit>
    173c:	4b4b      	ldr	r3, [pc, #300]	; (186c <setvbuf+0x150>)
    173e:	429c      	cmp	r4, r3
    1740:	d101      	bne.n	1746 <setvbuf+0x2a>
    1742:	6874      	ldr	r4, [r6, #4]
    1744:	e008      	b.n	1758 <setvbuf+0x3c>
    1746:	4b4a      	ldr	r3, [pc, #296]	; (1870 <setvbuf+0x154>)
    1748:	429c      	cmp	r4, r3
    174a:	d101      	bne.n	1750 <setvbuf+0x34>
    174c:	68b4      	ldr	r4, [r6, #8]
    174e:	e003      	b.n	1758 <setvbuf+0x3c>
    1750:	4b48      	ldr	r3, [pc, #288]	; (1874 <setvbuf+0x158>)
    1752:	429c      	cmp	r4, r3
    1754:	d100      	bne.n	1758 <setvbuf+0x3c>
    1756:	68f4      	ldr	r4, [r6, #12]
    1758:	9b00      	ldr	r3, [sp, #0]
    175a:	2b02      	cmp	r3, #2
    175c:	d005      	beq.n	176a <setvbuf+0x4e>
    175e:	2b01      	cmp	r3, #1
    1760:	d900      	bls.n	1764 <setvbuf+0x48>
    1762:	e07c      	b.n	185e <setvbuf+0x142>
    1764:	2d00      	cmp	r5, #0
    1766:	da00      	bge.n	176a <setvbuf+0x4e>
    1768:	e079      	b.n	185e <setvbuf+0x142>
    176a:	0021      	movs	r1, r4
    176c:	0030      	movs	r0, r6
    176e:	f000 f9d9 	bl	1b24 <_fflush_r>
    1772:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1774:	2900      	cmp	r1, #0
    1776:	d008      	beq.n	178a <setvbuf+0x6e>
    1778:	0023      	movs	r3, r4
    177a:	3344      	adds	r3, #68	; 0x44
    177c:	4299      	cmp	r1, r3
    177e:	d002      	beq.n	1786 <setvbuf+0x6a>
    1780:	0030      	movs	r0, r6
    1782:	f000 fb3f 	bl	1e04 <_free_r>
    1786:	2300      	movs	r3, #0
    1788:	6363      	str	r3, [r4, #52]	; 0x34
    178a:	2300      	movs	r3, #0
    178c:	61a3      	str	r3, [r4, #24]
    178e:	6063      	str	r3, [r4, #4]
    1790:	89a3      	ldrh	r3, [r4, #12]
    1792:	061b      	lsls	r3, r3, #24
    1794:	d503      	bpl.n	179e <setvbuf+0x82>
    1796:	6921      	ldr	r1, [r4, #16]
    1798:	0030      	movs	r0, r6
    179a:	f000 fb33 	bl	1e04 <_free_r>
    179e:	89a2      	ldrh	r2, [r4, #12]
    17a0:	4b35      	ldr	r3, [pc, #212]	; (1878 <setvbuf+0x15c>)
    17a2:	4013      	ands	r3, r2
    17a4:	81a3      	strh	r3, [r4, #12]
    17a6:	9b00      	ldr	r3, [sp, #0]
    17a8:	2b02      	cmp	r3, #2
    17aa:	d021      	beq.n	17f0 <setvbuf+0xd4>
    17ac:	ab03      	add	r3, sp, #12
    17ae:	aa02      	add	r2, sp, #8
    17b0:	0021      	movs	r1, r4
    17b2:	0030      	movs	r0, r6
    17b4:	f000 fab8 	bl	1d28 <__swhatbuf_r>
    17b8:	89a3      	ldrh	r3, [r4, #12]
    17ba:	4318      	orrs	r0, r3
    17bc:	81a0      	strh	r0, [r4, #12]
    17be:	2d00      	cmp	r5, #0
    17c0:	d101      	bne.n	17c6 <setvbuf+0xaa>
    17c2:	9d02      	ldr	r5, [sp, #8]
    17c4:	e001      	b.n	17ca <setvbuf+0xae>
    17c6:	2f00      	cmp	r7, #0
    17c8:	d125      	bne.n	1816 <setvbuf+0xfa>
    17ca:	0028      	movs	r0, r5
    17cc:	f000 fb10 	bl	1df0 <malloc>
    17d0:	9501      	str	r5, [sp, #4]
    17d2:	1e07      	subs	r7, r0, #0
    17d4:	d11a      	bne.n	180c <setvbuf+0xf0>
    17d6:	9b02      	ldr	r3, [sp, #8]
    17d8:	9301      	str	r3, [sp, #4]
    17da:	42ab      	cmp	r3, r5
    17dc:	d102      	bne.n	17e4 <setvbuf+0xc8>
    17de:	2001      	movs	r0, #1
    17e0:	4240      	negs	r0, r0
    17e2:	e006      	b.n	17f2 <setvbuf+0xd6>
    17e4:	9801      	ldr	r0, [sp, #4]
    17e6:	f000 fb03 	bl	1df0 <malloc>
    17ea:	1e07      	subs	r7, r0, #0
    17ec:	d10e      	bne.n	180c <setvbuf+0xf0>
    17ee:	e7f6      	b.n	17de <setvbuf+0xc2>
    17f0:	2000      	movs	r0, #0
    17f2:	2202      	movs	r2, #2
    17f4:	89a3      	ldrh	r3, [r4, #12]
    17f6:	4313      	orrs	r3, r2
    17f8:	81a3      	strh	r3, [r4, #12]
    17fa:	2300      	movs	r3, #0
    17fc:	60a3      	str	r3, [r4, #8]
    17fe:	0023      	movs	r3, r4
    1800:	3347      	adds	r3, #71	; 0x47
    1802:	6023      	str	r3, [r4, #0]
    1804:	6123      	str	r3, [r4, #16]
    1806:	2301      	movs	r3, #1
    1808:	6163      	str	r3, [r4, #20]
    180a:	e02a      	b.n	1862 <setvbuf+0x146>
    180c:	2280      	movs	r2, #128	; 0x80
    180e:	89a3      	ldrh	r3, [r4, #12]
    1810:	9d01      	ldr	r5, [sp, #4]
    1812:	4313      	orrs	r3, r2
    1814:	81a3      	strh	r3, [r4, #12]
    1816:	69b3      	ldr	r3, [r6, #24]
    1818:	2b00      	cmp	r3, #0
    181a:	d102      	bne.n	1822 <setvbuf+0x106>
    181c:	0030      	movs	r0, r6
    181e:	f000 f9ef 	bl	1c00 <__sinit>
    1822:	9b00      	ldr	r3, [sp, #0]
    1824:	2b01      	cmp	r3, #1
    1826:	d103      	bne.n	1830 <setvbuf+0x114>
    1828:	89a3      	ldrh	r3, [r4, #12]
    182a:	9a00      	ldr	r2, [sp, #0]
    182c:	431a      	orrs	r2, r3
    182e:	81a2      	strh	r2, [r4, #12]
    1830:	2308      	movs	r3, #8
    1832:	89a2      	ldrh	r2, [r4, #12]
    1834:	6027      	str	r7, [r4, #0]
    1836:	4013      	ands	r3, r2
    1838:	6127      	str	r7, [r4, #16]
    183a:	6165      	str	r5, [r4, #20]
    183c:	1e18      	subs	r0, r3, #0
    183e:	d00c      	beq.n	185a <setvbuf+0x13e>
    1840:	2301      	movs	r3, #1
    1842:	401a      	ands	r2, r3
    1844:	2300      	movs	r3, #0
    1846:	1e10      	subs	r0, r2, #0
    1848:	4298      	cmp	r0, r3
    184a:	d004      	beq.n	1856 <setvbuf+0x13a>
    184c:	426d      	negs	r5, r5
    184e:	60a3      	str	r3, [r4, #8]
    1850:	61a5      	str	r5, [r4, #24]
    1852:	0018      	movs	r0, r3
    1854:	e005      	b.n	1862 <setvbuf+0x146>
    1856:	60a5      	str	r5, [r4, #8]
    1858:	e003      	b.n	1862 <setvbuf+0x146>
    185a:	60a3      	str	r3, [r4, #8]
    185c:	e001      	b.n	1862 <setvbuf+0x146>
    185e:	2001      	movs	r0, #1
    1860:	4240      	negs	r0, r0
    1862:	b005      	add	sp, #20
    1864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1866:	46c0      	nop			; (mov r8, r8)
    1868:	20000064 	.word	0x20000064
    186c:	00002158 	.word	0x00002158
    1870:	00002178 	.word	0x00002178
    1874:	00002198 	.word	0x00002198
    1878:	fffff35c 	.word	0xfffff35c

0000187c <__swbuf_r>:
    187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    187e:	0005      	movs	r5, r0
    1880:	000f      	movs	r7, r1
    1882:	0014      	movs	r4, r2
    1884:	2800      	cmp	r0, #0
    1886:	d004      	beq.n	1892 <__swbuf_r+0x16>
    1888:	6983      	ldr	r3, [r0, #24]
    188a:	2b00      	cmp	r3, #0
    188c:	d101      	bne.n	1892 <__swbuf_r+0x16>
    188e:	f000 f9b7 	bl	1c00 <__sinit>
    1892:	4b23      	ldr	r3, [pc, #140]	; (1920 <__swbuf_r+0xa4>)
    1894:	429c      	cmp	r4, r3
    1896:	d101      	bne.n	189c <__swbuf_r+0x20>
    1898:	686c      	ldr	r4, [r5, #4]
    189a:	e008      	b.n	18ae <__swbuf_r+0x32>
    189c:	4b21      	ldr	r3, [pc, #132]	; (1924 <__swbuf_r+0xa8>)
    189e:	429c      	cmp	r4, r3
    18a0:	d101      	bne.n	18a6 <__swbuf_r+0x2a>
    18a2:	68ac      	ldr	r4, [r5, #8]
    18a4:	e003      	b.n	18ae <__swbuf_r+0x32>
    18a6:	4b20      	ldr	r3, [pc, #128]	; (1928 <__swbuf_r+0xac>)
    18a8:	429c      	cmp	r4, r3
    18aa:	d100      	bne.n	18ae <__swbuf_r+0x32>
    18ac:	68ec      	ldr	r4, [r5, #12]
    18ae:	69a3      	ldr	r3, [r4, #24]
    18b0:	60a3      	str	r3, [r4, #8]
    18b2:	89a3      	ldrh	r3, [r4, #12]
    18b4:	071b      	lsls	r3, r3, #28
    18b6:	d50a      	bpl.n	18ce <__swbuf_r+0x52>
    18b8:	6923      	ldr	r3, [r4, #16]
    18ba:	2b00      	cmp	r3, #0
    18bc:	d007      	beq.n	18ce <__swbuf_r+0x52>
    18be:	6823      	ldr	r3, [r4, #0]
    18c0:	6922      	ldr	r2, [r4, #16]
    18c2:	b2fe      	uxtb	r6, r7
    18c4:	1a98      	subs	r0, r3, r2
    18c6:	6963      	ldr	r3, [r4, #20]
    18c8:	4298      	cmp	r0, r3
    18ca:	db0f      	blt.n	18ec <__swbuf_r+0x70>
    18cc:	e008      	b.n	18e0 <__swbuf_r+0x64>
    18ce:	0021      	movs	r1, r4
    18d0:	0028      	movs	r0, r5
    18d2:	f000 f82b 	bl	192c <__swsetup_r>
    18d6:	2800      	cmp	r0, #0
    18d8:	d0f1      	beq.n	18be <__swbuf_r+0x42>
    18da:	2001      	movs	r0, #1
    18dc:	4240      	negs	r0, r0
    18de:	e01d      	b.n	191c <__swbuf_r+0xa0>
    18e0:	0021      	movs	r1, r4
    18e2:	0028      	movs	r0, r5
    18e4:	f000 f91e 	bl	1b24 <_fflush_r>
    18e8:	2800      	cmp	r0, #0
    18ea:	d1f6      	bne.n	18da <__swbuf_r+0x5e>
    18ec:	68a3      	ldr	r3, [r4, #8]
    18ee:	3001      	adds	r0, #1
    18f0:	3b01      	subs	r3, #1
    18f2:	60a3      	str	r3, [r4, #8]
    18f4:	6823      	ldr	r3, [r4, #0]
    18f6:	1c5a      	adds	r2, r3, #1
    18f8:	6022      	str	r2, [r4, #0]
    18fa:	701f      	strb	r7, [r3, #0]
    18fc:	6963      	ldr	r3, [r4, #20]
    18fe:	4298      	cmp	r0, r3
    1900:	d005      	beq.n	190e <__swbuf_r+0x92>
    1902:	89a3      	ldrh	r3, [r4, #12]
    1904:	0030      	movs	r0, r6
    1906:	07db      	lsls	r3, r3, #31
    1908:	d508      	bpl.n	191c <__swbuf_r+0xa0>
    190a:	2e0a      	cmp	r6, #10
    190c:	d106      	bne.n	191c <__swbuf_r+0xa0>
    190e:	0021      	movs	r1, r4
    1910:	0028      	movs	r0, r5
    1912:	f000 f907 	bl	1b24 <_fflush_r>
    1916:	2800      	cmp	r0, #0
    1918:	d1df      	bne.n	18da <__swbuf_r+0x5e>
    191a:	0030      	movs	r0, r6
    191c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	00002158 	.word	0x00002158
    1924:	00002178 	.word	0x00002178
    1928:	00002198 	.word	0x00002198

0000192c <__swsetup_r>:
    192c:	4b36      	ldr	r3, [pc, #216]	; (1a08 <__swsetup_r+0xdc>)
    192e:	b570      	push	{r4, r5, r6, lr}
    1930:	681d      	ldr	r5, [r3, #0]
    1932:	0006      	movs	r6, r0
    1934:	000c      	movs	r4, r1
    1936:	2d00      	cmp	r5, #0
    1938:	d005      	beq.n	1946 <__swsetup_r+0x1a>
    193a:	69ab      	ldr	r3, [r5, #24]
    193c:	2b00      	cmp	r3, #0
    193e:	d102      	bne.n	1946 <__swsetup_r+0x1a>
    1940:	0028      	movs	r0, r5
    1942:	f000 f95d 	bl	1c00 <__sinit>
    1946:	4b31      	ldr	r3, [pc, #196]	; (1a0c <__swsetup_r+0xe0>)
    1948:	429c      	cmp	r4, r3
    194a:	d101      	bne.n	1950 <__swsetup_r+0x24>
    194c:	686c      	ldr	r4, [r5, #4]
    194e:	e008      	b.n	1962 <__swsetup_r+0x36>
    1950:	4b2f      	ldr	r3, [pc, #188]	; (1a10 <__swsetup_r+0xe4>)
    1952:	429c      	cmp	r4, r3
    1954:	d101      	bne.n	195a <__swsetup_r+0x2e>
    1956:	68ac      	ldr	r4, [r5, #8]
    1958:	e003      	b.n	1962 <__swsetup_r+0x36>
    195a:	4b2e      	ldr	r3, [pc, #184]	; (1a14 <__swsetup_r+0xe8>)
    195c:	429c      	cmp	r4, r3
    195e:	d100      	bne.n	1962 <__swsetup_r+0x36>
    1960:	68ec      	ldr	r4, [r5, #12]
    1962:	220c      	movs	r2, #12
    1964:	5ea3      	ldrsh	r3, [r4, r2]
    1966:	b29a      	uxth	r2, r3
    1968:	0711      	lsls	r1, r2, #28
    196a:	d423      	bmi.n	19b4 <__swsetup_r+0x88>
    196c:	06d1      	lsls	r1, r2, #27
    196e:	d407      	bmi.n	1980 <__swsetup_r+0x54>
    1970:	2209      	movs	r2, #9
    1972:	2001      	movs	r0, #1
    1974:	6032      	str	r2, [r6, #0]
    1976:	3237      	adds	r2, #55	; 0x37
    1978:	4313      	orrs	r3, r2
    197a:	81a3      	strh	r3, [r4, #12]
    197c:	4240      	negs	r0, r0
    197e:	e042      	b.n	1a06 <__swsetup_r+0xda>
    1980:	0753      	lsls	r3, r2, #29
    1982:	d513      	bpl.n	19ac <__swsetup_r+0x80>
    1984:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1986:	2900      	cmp	r1, #0
    1988:	d008      	beq.n	199c <__swsetup_r+0x70>
    198a:	0023      	movs	r3, r4
    198c:	3344      	adds	r3, #68	; 0x44
    198e:	4299      	cmp	r1, r3
    1990:	d002      	beq.n	1998 <__swsetup_r+0x6c>
    1992:	0030      	movs	r0, r6
    1994:	f000 fa36 	bl	1e04 <_free_r>
    1998:	2300      	movs	r3, #0
    199a:	6363      	str	r3, [r4, #52]	; 0x34
    199c:	2224      	movs	r2, #36	; 0x24
    199e:	89a3      	ldrh	r3, [r4, #12]
    19a0:	4393      	bics	r3, r2
    19a2:	81a3      	strh	r3, [r4, #12]
    19a4:	2300      	movs	r3, #0
    19a6:	6063      	str	r3, [r4, #4]
    19a8:	6923      	ldr	r3, [r4, #16]
    19aa:	6023      	str	r3, [r4, #0]
    19ac:	2208      	movs	r2, #8
    19ae:	89a3      	ldrh	r3, [r4, #12]
    19b0:	4313      	orrs	r3, r2
    19b2:	81a3      	strh	r3, [r4, #12]
    19b4:	6923      	ldr	r3, [r4, #16]
    19b6:	2b00      	cmp	r3, #0
    19b8:	d10b      	bne.n	19d2 <__swsetup_r+0xa6>
    19ba:	23a0      	movs	r3, #160	; 0xa0
    19bc:	89a2      	ldrh	r2, [r4, #12]
    19be:	009b      	lsls	r3, r3, #2
    19c0:	4013      	ands	r3, r2
    19c2:	2280      	movs	r2, #128	; 0x80
    19c4:	0092      	lsls	r2, r2, #2
    19c6:	4293      	cmp	r3, r2
    19c8:	d003      	beq.n	19d2 <__swsetup_r+0xa6>
    19ca:	0021      	movs	r1, r4
    19cc:	0030      	movs	r0, r6
    19ce:	f000 f9d1 	bl	1d74 <__smakebuf_r>
    19d2:	2301      	movs	r3, #1
    19d4:	89a2      	ldrh	r2, [r4, #12]
    19d6:	4013      	ands	r3, r2
    19d8:	d005      	beq.n	19e6 <__swsetup_r+0xba>
    19da:	2300      	movs	r3, #0
    19dc:	60a3      	str	r3, [r4, #8]
    19de:	6963      	ldr	r3, [r4, #20]
    19e0:	425b      	negs	r3, r3
    19e2:	61a3      	str	r3, [r4, #24]
    19e4:	e003      	b.n	19ee <__swsetup_r+0xc2>
    19e6:	0792      	lsls	r2, r2, #30
    19e8:	d400      	bmi.n	19ec <__swsetup_r+0xc0>
    19ea:	6963      	ldr	r3, [r4, #20]
    19ec:	60a3      	str	r3, [r4, #8]
    19ee:	2000      	movs	r0, #0
    19f0:	6923      	ldr	r3, [r4, #16]
    19f2:	4283      	cmp	r3, r0
    19f4:	d107      	bne.n	1a06 <__swsetup_r+0xda>
    19f6:	220c      	movs	r2, #12
    19f8:	5ea3      	ldrsh	r3, [r4, r2]
    19fa:	061a      	lsls	r2, r3, #24
    19fc:	d503      	bpl.n	1a06 <__swsetup_r+0xda>
    19fe:	2240      	movs	r2, #64	; 0x40
    1a00:	4313      	orrs	r3, r2
    1a02:	81a3      	strh	r3, [r4, #12]
    1a04:	3801      	subs	r0, #1
    1a06:	bd70      	pop	{r4, r5, r6, pc}
    1a08:	20000064 	.word	0x20000064
    1a0c:	00002158 	.word	0x00002158
    1a10:	00002178 	.word	0x00002178
    1a14:	00002198 	.word	0x00002198

00001a18 <__sflush_r>:
    1a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a1a:	898a      	ldrh	r2, [r1, #12]
    1a1c:	0005      	movs	r5, r0
    1a1e:	000c      	movs	r4, r1
    1a20:	0713      	lsls	r3, r2, #28
    1a22:	d45a      	bmi.n	1ada <__sflush_r+0xc2>
    1a24:	684b      	ldr	r3, [r1, #4]
    1a26:	2b00      	cmp	r3, #0
    1a28:	dc02      	bgt.n	1a30 <__sflush_r+0x18>
    1a2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1a2c:	2b00      	cmp	r3, #0
    1a2e:	dd19      	ble.n	1a64 <__sflush_r+0x4c>
    1a30:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1a32:	2f00      	cmp	r7, #0
    1a34:	d016      	beq.n	1a64 <__sflush_r+0x4c>
    1a36:	2300      	movs	r3, #0
    1a38:	682e      	ldr	r6, [r5, #0]
    1a3a:	602b      	str	r3, [r5, #0]
    1a3c:	2380      	movs	r3, #128	; 0x80
    1a3e:	015b      	lsls	r3, r3, #5
    1a40:	401a      	ands	r2, r3
    1a42:	d001      	beq.n	1a48 <__sflush_r+0x30>
    1a44:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1a46:	e014      	b.n	1a72 <__sflush_r+0x5a>
    1a48:	2301      	movs	r3, #1
    1a4a:	6a21      	ldr	r1, [r4, #32]
    1a4c:	0028      	movs	r0, r5
    1a4e:	47b8      	blx	r7
    1a50:	1c43      	adds	r3, r0, #1
    1a52:	d10e      	bne.n	1a72 <__sflush_r+0x5a>
    1a54:	682b      	ldr	r3, [r5, #0]
    1a56:	2b00      	cmp	r3, #0
    1a58:	d00b      	beq.n	1a72 <__sflush_r+0x5a>
    1a5a:	2b1d      	cmp	r3, #29
    1a5c:	d001      	beq.n	1a62 <__sflush_r+0x4a>
    1a5e:	2b16      	cmp	r3, #22
    1a60:	d102      	bne.n	1a68 <__sflush_r+0x50>
    1a62:	602e      	str	r6, [r5, #0]
    1a64:	2000      	movs	r0, #0
    1a66:	e05a      	b.n	1b1e <__sflush_r+0x106>
    1a68:	2240      	movs	r2, #64	; 0x40
    1a6a:	89a3      	ldrh	r3, [r4, #12]
    1a6c:	4313      	orrs	r3, r2
    1a6e:	81a3      	strh	r3, [r4, #12]
    1a70:	e055      	b.n	1b1e <__sflush_r+0x106>
    1a72:	89a3      	ldrh	r3, [r4, #12]
    1a74:	075b      	lsls	r3, r3, #29
    1a76:	d506      	bpl.n	1a86 <__sflush_r+0x6e>
    1a78:	6863      	ldr	r3, [r4, #4]
    1a7a:	1ac0      	subs	r0, r0, r3
    1a7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d001      	beq.n	1a86 <__sflush_r+0x6e>
    1a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1a84:	1ac0      	subs	r0, r0, r3
    1a86:	2300      	movs	r3, #0
    1a88:	0002      	movs	r2, r0
    1a8a:	6a21      	ldr	r1, [r4, #32]
    1a8c:	0028      	movs	r0, r5
    1a8e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1a90:	47b8      	blx	r7
    1a92:	89a3      	ldrh	r3, [r4, #12]
    1a94:	1c42      	adds	r2, r0, #1
    1a96:	d106      	bne.n	1aa6 <__sflush_r+0x8e>
    1a98:	6829      	ldr	r1, [r5, #0]
    1a9a:	291d      	cmp	r1, #29
    1a9c:	d83a      	bhi.n	1b14 <__sflush_r+0xfc>
    1a9e:	4a20      	ldr	r2, [pc, #128]	; (1b20 <__sflush_r+0x108>)
    1aa0:	40ca      	lsrs	r2, r1
    1aa2:	07d2      	lsls	r2, r2, #31
    1aa4:	d536      	bpl.n	1b14 <__sflush_r+0xfc>
    1aa6:	2200      	movs	r2, #0
    1aa8:	6062      	str	r2, [r4, #4]
    1aaa:	6922      	ldr	r2, [r4, #16]
    1aac:	6022      	str	r2, [r4, #0]
    1aae:	04db      	lsls	r3, r3, #19
    1ab0:	d505      	bpl.n	1abe <__sflush_r+0xa6>
    1ab2:	1c43      	adds	r3, r0, #1
    1ab4:	d102      	bne.n	1abc <__sflush_r+0xa4>
    1ab6:	682b      	ldr	r3, [r5, #0]
    1ab8:	2b00      	cmp	r3, #0
    1aba:	d100      	bne.n	1abe <__sflush_r+0xa6>
    1abc:	6560      	str	r0, [r4, #84]	; 0x54
    1abe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1ac0:	602e      	str	r6, [r5, #0]
    1ac2:	2900      	cmp	r1, #0
    1ac4:	d0ce      	beq.n	1a64 <__sflush_r+0x4c>
    1ac6:	0023      	movs	r3, r4
    1ac8:	3344      	adds	r3, #68	; 0x44
    1aca:	4299      	cmp	r1, r3
    1acc:	d002      	beq.n	1ad4 <__sflush_r+0xbc>
    1ace:	0028      	movs	r0, r5
    1ad0:	f000 f998 	bl	1e04 <_free_r>
    1ad4:	2000      	movs	r0, #0
    1ad6:	6360      	str	r0, [r4, #52]	; 0x34
    1ad8:	e021      	b.n	1b1e <__sflush_r+0x106>
    1ada:	690f      	ldr	r7, [r1, #16]
    1adc:	2f00      	cmp	r7, #0
    1ade:	d0c1      	beq.n	1a64 <__sflush_r+0x4c>
    1ae0:	680b      	ldr	r3, [r1, #0]
    1ae2:	600f      	str	r7, [r1, #0]
    1ae4:	1bdb      	subs	r3, r3, r7
    1ae6:	9301      	str	r3, [sp, #4]
    1ae8:	2300      	movs	r3, #0
    1aea:	0792      	lsls	r2, r2, #30
    1aec:	d100      	bne.n	1af0 <__sflush_r+0xd8>
    1aee:	694b      	ldr	r3, [r1, #20]
    1af0:	60a3      	str	r3, [r4, #8]
    1af2:	e003      	b.n	1afc <__sflush_r+0xe4>
    1af4:	9b01      	ldr	r3, [sp, #4]
    1af6:	183f      	adds	r7, r7, r0
    1af8:	1a1b      	subs	r3, r3, r0
    1afa:	9301      	str	r3, [sp, #4]
    1afc:	9b01      	ldr	r3, [sp, #4]
    1afe:	2b00      	cmp	r3, #0
    1b00:	ddb0      	ble.n	1a64 <__sflush_r+0x4c>
    1b02:	9b01      	ldr	r3, [sp, #4]
    1b04:	003a      	movs	r2, r7
    1b06:	6a21      	ldr	r1, [r4, #32]
    1b08:	0028      	movs	r0, r5
    1b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1b0c:	47b0      	blx	r6
    1b0e:	2800      	cmp	r0, #0
    1b10:	dcf0      	bgt.n	1af4 <__sflush_r+0xdc>
    1b12:	89a3      	ldrh	r3, [r4, #12]
    1b14:	2240      	movs	r2, #64	; 0x40
    1b16:	2001      	movs	r0, #1
    1b18:	4313      	orrs	r3, r2
    1b1a:	81a3      	strh	r3, [r4, #12]
    1b1c:	4240      	negs	r0, r0
    1b1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1b20:	20400001 	.word	0x20400001

00001b24 <_fflush_r>:
    1b24:	690b      	ldr	r3, [r1, #16]
    1b26:	b570      	push	{r4, r5, r6, lr}
    1b28:	0005      	movs	r5, r0
    1b2a:	000c      	movs	r4, r1
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d101      	bne.n	1b34 <_fflush_r+0x10>
    1b30:	2000      	movs	r0, #0
    1b32:	e01c      	b.n	1b6e <_fflush_r+0x4a>
    1b34:	2800      	cmp	r0, #0
    1b36:	d004      	beq.n	1b42 <_fflush_r+0x1e>
    1b38:	6983      	ldr	r3, [r0, #24]
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d101      	bne.n	1b42 <_fflush_r+0x1e>
    1b3e:	f000 f85f 	bl	1c00 <__sinit>
    1b42:	4b0b      	ldr	r3, [pc, #44]	; (1b70 <_fflush_r+0x4c>)
    1b44:	429c      	cmp	r4, r3
    1b46:	d101      	bne.n	1b4c <_fflush_r+0x28>
    1b48:	686c      	ldr	r4, [r5, #4]
    1b4a:	e008      	b.n	1b5e <_fflush_r+0x3a>
    1b4c:	4b09      	ldr	r3, [pc, #36]	; (1b74 <_fflush_r+0x50>)
    1b4e:	429c      	cmp	r4, r3
    1b50:	d101      	bne.n	1b56 <_fflush_r+0x32>
    1b52:	68ac      	ldr	r4, [r5, #8]
    1b54:	e003      	b.n	1b5e <_fflush_r+0x3a>
    1b56:	4b08      	ldr	r3, [pc, #32]	; (1b78 <_fflush_r+0x54>)
    1b58:	429c      	cmp	r4, r3
    1b5a:	d100      	bne.n	1b5e <_fflush_r+0x3a>
    1b5c:	68ec      	ldr	r4, [r5, #12]
    1b5e:	220c      	movs	r2, #12
    1b60:	5ea3      	ldrsh	r3, [r4, r2]
    1b62:	2b00      	cmp	r3, #0
    1b64:	d0e4      	beq.n	1b30 <_fflush_r+0xc>
    1b66:	0021      	movs	r1, r4
    1b68:	0028      	movs	r0, r5
    1b6a:	f7ff ff55 	bl	1a18 <__sflush_r>
    1b6e:	bd70      	pop	{r4, r5, r6, pc}
    1b70:	00002158 	.word	0x00002158
    1b74:	00002178 	.word	0x00002178
    1b78:	00002198 	.word	0x00002198

00001b7c <_cleanup_r>:
    1b7c:	b510      	push	{r4, lr}
    1b7e:	4902      	ldr	r1, [pc, #8]	; (1b88 <_cleanup_r+0xc>)
    1b80:	f000 f8b0 	bl	1ce4 <_fwalk_reent>
    1b84:	bd10      	pop	{r4, pc}
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	00001b25 	.word	0x00001b25

00001b8c <std.isra.0>:
    1b8c:	2300      	movs	r3, #0
    1b8e:	b510      	push	{r4, lr}
    1b90:	0004      	movs	r4, r0
    1b92:	6003      	str	r3, [r0, #0]
    1b94:	6043      	str	r3, [r0, #4]
    1b96:	6083      	str	r3, [r0, #8]
    1b98:	8181      	strh	r1, [r0, #12]
    1b9a:	6643      	str	r3, [r0, #100]	; 0x64
    1b9c:	81c2      	strh	r2, [r0, #14]
    1b9e:	6103      	str	r3, [r0, #16]
    1ba0:	6143      	str	r3, [r0, #20]
    1ba2:	6183      	str	r3, [r0, #24]
    1ba4:	0019      	movs	r1, r3
    1ba6:	2208      	movs	r2, #8
    1ba8:	305c      	adds	r0, #92	; 0x5c
    1baa:	f7ff fd38 	bl	161e <memset>
    1bae:	4b05      	ldr	r3, [pc, #20]	; (1bc4 <std.isra.0+0x38>)
    1bb0:	6224      	str	r4, [r4, #32]
    1bb2:	6263      	str	r3, [r4, #36]	; 0x24
    1bb4:	4b04      	ldr	r3, [pc, #16]	; (1bc8 <std.isra.0+0x3c>)
    1bb6:	62a3      	str	r3, [r4, #40]	; 0x28
    1bb8:	4b04      	ldr	r3, [pc, #16]	; (1bcc <std.isra.0+0x40>)
    1bba:	62e3      	str	r3, [r4, #44]	; 0x2c
    1bbc:	4b04      	ldr	r3, [pc, #16]	; (1bd0 <std.isra.0+0x44>)
    1bbe:	6323      	str	r3, [r4, #48]	; 0x30
    1bc0:	bd10      	pop	{r4, pc}
    1bc2:	46c0      	nop			; (mov r8, r8)
    1bc4:	00001f61 	.word	0x00001f61
    1bc8:	00001f89 	.word	0x00001f89
    1bcc:	00001fc1 	.word	0x00001fc1
    1bd0:	00001fed 	.word	0x00001fed

00001bd4 <__sfmoreglue>:
    1bd4:	b570      	push	{r4, r5, r6, lr}
    1bd6:	2568      	movs	r5, #104	; 0x68
    1bd8:	1e4b      	subs	r3, r1, #1
    1bda:	435d      	muls	r5, r3
    1bdc:	000e      	movs	r6, r1
    1bde:	0029      	movs	r1, r5
    1be0:	3174      	adds	r1, #116	; 0x74
    1be2:	f000 f955 	bl	1e90 <_malloc_r>
    1be6:	1e04      	subs	r4, r0, #0
    1be8:	d008      	beq.n	1bfc <__sfmoreglue+0x28>
    1bea:	2100      	movs	r1, #0
    1bec:	002a      	movs	r2, r5
    1bee:	6001      	str	r1, [r0, #0]
    1bf0:	6046      	str	r6, [r0, #4]
    1bf2:	300c      	adds	r0, #12
    1bf4:	60a0      	str	r0, [r4, #8]
    1bf6:	3268      	adds	r2, #104	; 0x68
    1bf8:	f7ff fd11 	bl	161e <memset>
    1bfc:	0020      	movs	r0, r4
    1bfe:	bd70      	pop	{r4, r5, r6, pc}

00001c00 <__sinit>:
    1c00:	6983      	ldr	r3, [r0, #24]
    1c02:	b513      	push	{r0, r1, r4, lr}
    1c04:	0004      	movs	r4, r0
    1c06:	2b00      	cmp	r3, #0
    1c08:	d128      	bne.n	1c5c <__sinit+0x5c>
    1c0a:	6483      	str	r3, [r0, #72]	; 0x48
    1c0c:	64c3      	str	r3, [r0, #76]	; 0x4c
    1c0e:	6503      	str	r3, [r0, #80]	; 0x50
    1c10:	4b13      	ldr	r3, [pc, #76]	; (1c60 <__sinit+0x60>)
    1c12:	4a14      	ldr	r2, [pc, #80]	; (1c64 <__sinit+0x64>)
    1c14:	681b      	ldr	r3, [r3, #0]
    1c16:	6282      	str	r2, [r0, #40]	; 0x28
    1c18:	9301      	str	r3, [sp, #4]
    1c1a:	4298      	cmp	r0, r3
    1c1c:	d101      	bne.n	1c22 <__sinit+0x22>
    1c1e:	2301      	movs	r3, #1
    1c20:	6183      	str	r3, [r0, #24]
    1c22:	0020      	movs	r0, r4
    1c24:	f000 f820 	bl	1c68 <__sfp>
    1c28:	6060      	str	r0, [r4, #4]
    1c2a:	0020      	movs	r0, r4
    1c2c:	f000 f81c 	bl	1c68 <__sfp>
    1c30:	60a0      	str	r0, [r4, #8]
    1c32:	0020      	movs	r0, r4
    1c34:	f000 f818 	bl	1c68 <__sfp>
    1c38:	2200      	movs	r2, #0
    1c3a:	60e0      	str	r0, [r4, #12]
    1c3c:	2104      	movs	r1, #4
    1c3e:	6860      	ldr	r0, [r4, #4]
    1c40:	f7ff ffa4 	bl	1b8c <std.isra.0>
    1c44:	2201      	movs	r2, #1
    1c46:	2109      	movs	r1, #9
    1c48:	68a0      	ldr	r0, [r4, #8]
    1c4a:	f7ff ff9f 	bl	1b8c <std.isra.0>
    1c4e:	2202      	movs	r2, #2
    1c50:	2112      	movs	r1, #18
    1c52:	68e0      	ldr	r0, [r4, #12]
    1c54:	f7ff ff9a 	bl	1b8c <std.isra.0>
    1c58:	2301      	movs	r3, #1
    1c5a:	61a3      	str	r3, [r4, #24]
    1c5c:	bd13      	pop	{r0, r1, r4, pc}
    1c5e:	46c0      	nop			; (mov r8, r8)
    1c60:	00002154 	.word	0x00002154
    1c64:	00001b7d 	.word	0x00001b7d

00001c68 <__sfp>:
    1c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c6a:	4b1d      	ldr	r3, [pc, #116]	; (1ce0 <__sfp+0x78>)
    1c6c:	0006      	movs	r6, r0
    1c6e:	681d      	ldr	r5, [r3, #0]
    1c70:	69ab      	ldr	r3, [r5, #24]
    1c72:	2b00      	cmp	r3, #0
    1c74:	d102      	bne.n	1c7c <__sfp+0x14>
    1c76:	0028      	movs	r0, r5
    1c78:	f7ff ffc2 	bl	1c00 <__sinit>
    1c7c:	3548      	adds	r5, #72	; 0x48
    1c7e:	68ac      	ldr	r4, [r5, #8]
    1c80:	686b      	ldr	r3, [r5, #4]
    1c82:	3b01      	subs	r3, #1
    1c84:	d405      	bmi.n	1c92 <__sfp+0x2a>
    1c86:	220c      	movs	r2, #12
    1c88:	5ea7      	ldrsh	r7, [r4, r2]
    1c8a:	2f00      	cmp	r7, #0
    1c8c:	d010      	beq.n	1cb0 <__sfp+0x48>
    1c8e:	3468      	adds	r4, #104	; 0x68
    1c90:	e7f7      	b.n	1c82 <__sfp+0x1a>
    1c92:	682b      	ldr	r3, [r5, #0]
    1c94:	2b00      	cmp	r3, #0
    1c96:	d001      	beq.n	1c9c <__sfp+0x34>
    1c98:	682d      	ldr	r5, [r5, #0]
    1c9a:	e7f0      	b.n	1c7e <__sfp+0x16>
    1c9c:	2104      	movs	r1, #4
    1c9e:	0030      	movs	r0, r6
    1ca0:	f7ff ff98 	bl	1bd4 <__sfmoreglue>
    1ca4:	6028      	str	r0, [r5, #0]
    1ca6:	2800      	cmp	r0, #0
    1ca8:	d1f6      	bne.n	1c98 <__sfp+0x30>
    1caa:	230c      	movs	r3, #12
    1cac:	6033      	str	r3, [r6, #0]
    1cae:	e016      	b.n	1cde <__sfp+0x76>
    1cb0:	2301      	movs	r3, #1
    1cb2:	0020      	movs	r0, r4
    1cb4:	425b      	negs	r3, r3
    1cb6:	81e3      	strh	r3, [r4, #14]
    1cb8:	3302      	adds	r3, #2
    1cba:	81a3      	strh	r3, [r4, #12]
    1cbc:	6667      	str	r7, [r4, #100]	; 0x64
    1cbe:	6027      	str	r7, [r4, #0]
    1cc0:	60a7      	str	r7, [r4, #8]
    1cc2:	6067      	str	r7, [r4, #4]
    1cc4:	6127      	str	r7, [r4, #16]
    1cc6:	6167      	str	r7, [r4, #20]
    1cc8:	61a7      	str	r7, [r4, #24]
    1cca:	305c      	adds	r0, #92	; 0x5c
    1ccc:	2208      	movs	r2, #8
    1cce:	0039      	movs	r1, r7
    1cd0:	f7ff fca5 	bl	161e <memset>
    1cd4:	0020      	movs	r0, r4
    1cd6:	6367      	str	r7, [r4, #52]	; 0x34
    1cd8:	63a7      	str	r7, [r4, #56]	; 0x38
    1cda:	64a7      	str	r7, [r4, #72]	; 0x48
    1cdc:	64e7      	str	r7, [r4, #76]	; 0x4c
    1cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ce0:	00002154 	.word	0x00002154

00001ce4 <_fwalk_reent>:
    1ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1ce6:	0004      	movs	r4, r0
    1ce8:	0007      	movs	r7, r0
    1cea:	2600      	movs	r6, #0
    1cec:	9101      	str	r1, [sp, #4]
    1cee:	3448      	adds	r4, #72	; 0x48
    1cf0:	2c00      	cmp	r4, #0
    1cf2:	d016      	beq.n	1d22 <_fwalk_reent+0x3e>
    1cf4:	6863      	ldr	r3, [r4, #4]
    1cf6:	68a5      	ldr	r5, [r4, #8]
    1cf8:	9300      	str	r3, [sp, #0]
    1cfa:	9b00      	ldr	r3, [sp, #0]
    1cfc:	3b01      	subs	r3, #1
    1cfe:	9300      	str	r3, [sp, #0]
    1d00:	d40d      	bmi.n	1d1e <_fwalk_reent+0x3a>
    1d02:	89ab      	ldrh	r3, [r5, #12]
    1d04:	2b01      	cmp	r3, #1
    1d06:	d908      	bls.n	1d1a <_fwalk_reent+0x36>
    1d08:	220e      	movs	r2, #14
    1d0a:	5eab      	ldrsh	r3, [r5, r2]
    1d0c:	3301      	adds	r3, #1
    1d0e:	d004      	beq.n	1d1a <_fwalk_reent+0x36>
    1d10:	0029      	movs	r1, r5
    1d12:	0038      	movs	r0, r7
    1d14:	9b01      	ldr	r3, [sp, #4]
    1d16:	4798      	blx	r3
    1d18:	4306      	orrs	r6, r0
    1d1a:	3568      	adds	r5, #104	; 0x68
    1d1c:	e7ed      	b.n	1cfa <_fwalk_reent+0x16>
    1d1e:	6824      	ldr	r4, [r4, #0]
    1d20:	e7e6      	b.n	1cf0 <_fwalk_reent+0xc>
    1d22:	0030      	movs	r0, r6
    1d24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00001d28 <__swhatbuf_r>:
    1d28:	b570      	push	{r4, r5, r6, lr}
    1d2a:	000e      	movs	r6, r1
    1d2c:	001d      	movs	r5, r3
    1d2e:	230e      	movs	r3, #14
    1d30:	5ec9      	ldrsh	r1, [r1, r3]
    1d32:	b090      	sub	sp, #64	; 0x40
    1d34:	0014      	movs	r4, r2
    1d36:	2900      	cmp	r1, #0
    1d38:	da06      	bge.n	1d48 <__swhatbuf_r+0x20>
    1d3a:	2300      	movs	r3, #0
    1d3c:	602b      	str	r3, [r5, #0]
    1d3e:	89b3      	ldrh	r3, [r6, #12]
    1d40:	061b      	lsls	r3, r3, #24
    1d42:	d50f      	bpl.n	1d64 <__swhatbuf_r+0x3c>
    1d44:	2340      	movs	r3, #64	; 0x40
    1d46:	e00f      	b.n	1d68 <__swhatbuf_r+0x40>
    1d48:	aa01      	add	r2, sp, #4
    1d4a:	f000 f97b 	bl	2044 <_fstat_r>
    1d4e:	2800      	cmp	r0, #0
    1d50:	dbf3      	blt.n	1d3a <__swhatbuf_r+0x12>
    1d52:	23f0      	movs	r3, #240	; 0xf0
    1d54:	9a02      	ldr	r2, [sp, #8]
    1d56:	021b      	lsls	r3, r3, #8
    1d58:	4013      	ands	r3, r2
    1d5a:	4a05      	ldr	r2, [pc, #20]	; (1d70 <__swhatbuf_r+0x48>)
    1d5c:	189b      	adds	r3, r3, r2
    1d5e:	425a      	negs	r2, r3
    1d60:	4153      	adcs	r3, r2
    1d62:	602b      	str	r3, [r5, #0]
    1d64:	2380      	movs	r3, #128	; 0x80
    1d66:	00db      	lsls	r3, r3, #3
    1d68:	2000      	movs	r0, #0
    1d6a:	6023      	str	r3, [r4, #0]
    1d6c:	b010      	add	sp, #64	; 0x40
    1d6e:	bd70      	pop	{r4, r5, r6, pc}
    1d70:	ffffe000 	.word	0xffffe000

00001d74 <__smakebuf_r>:
    1d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d76:	2602      	movs	r6, #2
    1d78:	898b      	ldrh	r3, [r1, #12]
    1d7a:	0005      	movs	r5, r0
    1d7c:	000c      	movs	r4, r1
    1d7e:	4233      	tst	r3, r6
    1d80:	d110      	bne.n	1da4 <__smakebuf_r+0x30>
    1d82:	ab01      	add	r3, sp, #4
    1d84:	466a      	mov	r2, sp
    1d86:	f7ff ffcf 	bl	1d28 <__swhatbuf_r>
    1d8a:	9900      	ldr	r1, [sp, #0]
    1d8c:	0007      	movs	r7, r0
    1d8e:	0028      	movs	r0, r5
    1d90:	f000 f87e 	bl	1e90 <_malloc_r>
    1d94:	2800      	cmp	r0, #0
    1d96:	d10c      	bne.n	1db2 <__smakebuf_r+0x3e>
    1d98:	220c      	movs	r2, #12
    1d9a:	5ea3      	ldrsh	r3, [r4, r2]
    1d9c:	059a      	lsls	r2, r3, #22
    1d9e:	d423      	bmi.n	1de8 <__smakebuf_r+0x74>
    1da0:	4333      	orrs	r3, r6
    1da2:	81a3      	strh	r3, [r4, #12]
    1da4:	0023      	movs	r3, r4
    1da6:	3347      	adds	r3, #71	; 0x47
    1da8:	6023      	str	r3, [r4, #0]
    1daa:	6123      	str	r3, [r4, #16]
    1dac:	2301      	movs	r3, #1
    1dae:	6163      	str	r3, [r4, #20]
    1db0:	e01a      	b.n	1de8 <__smakebuf_r+0x74>
    1db2:	2280      	movs	r2, #128	; 0x80
    1db4:	4b0d      	ldr	r3, [pc, #52]	; (1dec <__smakebuf_r+0x78>)
    1db6:	62ab      	str	r3, [r5, #40]	; 0x28
    1db8:	89a3      	ldrh	r3, [r4, #12]
    1dba:	6020      	str	r0, [r4, #0]
    1dbc:	4313      	orrs	r3, r2
    1dbe:	81a3      	strh	r3, [r4, #12]
    1dc0:	9b00      	ldr	r3, [sp, #0]
    1dc2:	6120      	str	r0, [r4, #16]
    1dc4:	6163      	str	r3, [r4, #20]
    1dc6:	9b01      	ldr	r3, [sp, #4]
    1dc8:	2b00      	cmp	r3, #0
    1dca:	d00a      	beq.n	1de2 <__smakebuf_r+0x6e>
    1dcc:	230e      	movs	r3, #14
    1dce:	5ee1      	ldrsh	r1, [r4, r3]
    1dd0:	0028      	movs	r0, r5
    1dd2:	f000 f949 	bl	2068 <_isatty_r>
    1dd6:	2800      	cmp	r0, #0
    1dd8:	d003      	beq.n	1de2 <__smakebuf_r+0x6e>
    1dda:	2201      	movs	r2, #1
    1ddc:	89a3      	ldrh	r3, [r4, #12]
    1dde:	4313      	orrs	r3, r2
    1de0:	81a3      	strh	r3, [r4, #12]
    1de2:	89a3      	ldrh	r3, [r4, #12]
    1de4:	431f      	orrs	r7, r3
    1de6:	81a7      	strh	r7, [r4, #12]
    1de8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	00001b7d 	.word	0x00001b7d

00001df0 <malloc>:
    1df0:	b510      	push	{r4, lr}
    1df2:	4b03      	ldr	r3, [pc, #12]	; (1e00 <malloc+0x10>)
    1df4:	0001      	movs	r1, r0
    1df6:	6818      	ldr	r0, [r3, #0]
    1df8:	f000 f84a 	bl	1e90 <_malloc_r>
    1dfc:	bd10      	pop	{r4, pc}
    1dfe:	46c0      	nop			; (mov r8, r8)
    1e00:	20000064 	.word	0x20000064

00001e04 <_free_r>:
    1e04:	b530      	push	{r4, r5, lr}
    1e06:	2900      	cmp	r1, #0
    1e08:	d03e      	beq.n	1e88 <_free_r+0x84>
    1e0a:	3904      	subs	r1, #4
    1e0c:	680b      	ldr	r3, [r1, #0]
    1e0e:	2b00      	cmp	r3, #0
    1e10:	da00      	bge.n	1e14 <_free_r+0x10>
    1e12:	18c9      	adds	r1, r1, r3
    1e14:	4a1d      	ldr	r2, [pc, #116]	; (1e8c <_free_r+0x88>)
    1e16:	6813      	ldr	r3, [r2, #0]
    1e18:	0014      	movs	r4, r2
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d102      	bne.n	1e24 <_free_r+0x20>
    1e1e:	604b      	str	r3, [r1, #4]
    1e20:	6011      	str	r1, [r2, #0]
    1e22:	e031      	b.n	1e88 <_free_r+0x84>
    1e24:	428b      	cmp	r3, r1
    1e26:	d90d      	bls.n	1e44 <_free_r+0x40>
    1e28:	680a      	ldr	r2, [r1, #0]
    1e2a:	1888      	adds	r0, r1, r2
    1e2c:	4283      	cmp	r3, r0
    1e2e:	d103      	bne.n	1e38 <_free_r+0x34>
    1e30:	6818      	ldr	r0, [r3, #0]
    1e32:	685b      	ldr	r3, [r3, #4]
    1e34:	1882      	adds	r2, r0, r2
    1e36:	600a      	str	r2, [r1, #0]
    1e38:	604b      	str	r3, [r1, #4]
    1e3a:	6021      	str	r1, [r4, #0]
    1e3c:	e024      	b.n	1e88 <_free_r+0x84>
    1e3e:	428a      	cmp	r2, r1
    1e40:	d803      	bhi.n	1e4a <_free_r+0x46>
    1e42:	0013      	movs	r3, r2
    1e44:	685a      	ldr	r2, [r3, #4]
    1e46:	2a00      	cmp	r2, #0
    1e48:	d1f9      	bne.n	1e3e <_free_r+0x3a>
    1e4a:	681d      	ldr	r5, [r3, #0]
    1e4c:	195c      	adds	r4, r3, r5
    1e4e:	428c      	cmp	r4, r1
    1e50:	d10b      	bne.n	1e6a <_free_r+0x66>
    1e52:	6809      	ldr	r1, [r1, #0]
    1e54:	1869      	adds	r1, r5, r1
    1e56:	1858      	adds	r0, r3, r1
    1e58:	6019      	str	r1, [r3, #0]
    1e5a:	4282      	cmp	r2, r0
    1e5c:	d114      	bne.n	1e88 <_free_r+0x84>
    1e5e:	6810      	ldr	r0, [r2, #0]
    1e60:	6852      	ldr	r2, [r2, #4]
    1e62:	1841      	adds	r1, r0, r1
    1e64:	6019      	str	r1, [r3, #0]
    1e66:	605a      	str	r2, [r3, #4]
    1e68:	e00e      	b.n	1e88 <_free_r+0x84>
    1e6a:	428c      	cmp	r4, r1
    1e6c:	d902      	bls.n	1e74 <_free_r+0x70>
    1e6e:	230c      	movs	r3, #12
    1e70:	6003      	str	r3, [r0, #0]
    1e72:	e009      	b.n	1e88 <_free_r+0x84>
    1e74:	6808      	ldr	r0, [r1, #0]
    1e76:	180c      	adds	r4, r1, r0
    1e78:	42a2      	cmp	r2, r4
    1e7a:	d103      	bne.n	1e84 <_free_r+0x80>
    1e7c:	6814      	ldr	r4, [r2, #0]
    1e7e:	6852      	ldr	r2, [r2, #4]
    1e80:	1820      	adds	r0, r4, r0
    1e82:	6008      	str	r0, [r1, #0]
    1e84:	604a      	str	r2, [r1, #4]
    1e86:	6059      	str	r1, [r3, #4]
    1e88:	bd30      	pop	{r4, r5, pc}
    1e8a:	46c0      	nop			; (mov r8, r8)
    1e8c:	200000fc 	.word	0x200000fc

00001e90 <_malloc_r>:
    1e90:	2303      	movs	r3, #3
    1e92:	b570      	push	{r4, r5, r6, lr}
    1e94:	1ccd      	adds	r5, r1, #3
    1e96:	439d      	bics	r5, r3
    1e98:	3508      	adds	r5, #8
    1e9a:	0006      	movs	r6, r0
    1e9c:	2d0c      	cmp	r5, #12
    1e9e:	d201      	bcs.n	1ea4 <_malloc_r+0x14>
    1ea0:	250c      	movs	r5, #12
    1ea2:	e005      	b.n	1eb0 <_malloc_r+0x20>
    1ea4:	2d00      	cmp	r5, #0
    1ea6:	da03      	bge.n	1eb0 <_malloc_r+0x20>
    1ea8:	230c      	movs	r3, #12
    1eaa:	2000      	movs	r0, #0
    1eac:	6033      	str	r3, [r6, #0]
    1eae:	e040      	b.n	1f32 <_malloc_r+0xa2>
    1eb0:	42a9      	cmp	r1, r5
    1eb2:	d8f9      	bhi.n	1ea8 <_malloc_r+0x18>
    1eb4:	4b1f      	ldr	r3, [pc, #124]	; (1f34 <_malloc_r+0xa4>)
    1eb6:	681c      	ldr	r4, [r3, #0]
    1eb8:	001a      	movs	r2, r3
    1eba:	0021      	movs	r1, r4
    1ebc:	2900      	cmp	r1, #0
    1ebe:	d013      	beq.n	1ee8 <_malloc_r+0x58>
    1ec0:	680b      	ldr	r3, [r1, #0]
    1ec2:	1b5b      	subs	r3, r3, r5
    1ec4:	d40d      	bmi.n	1ee2 <_malloc_r+0x52>
    1ec6:	2b0b      	cmp	r3, #11
    1ec8:	d902      	bls.n	1ed0 <_malloc_r+0x40>
    1eca:	600b      	str	r3, [r1, #0]
    1ecc:	18cc      	adds	r4, r1, r3
    1ece:	e01e      	b.n	1f0e <_malloc_r+0x7e>
    1ed0:	428c      	cmp	r4, r1
    1ed2:	d102      	bne.n	1eda <_malloc_r+0x4a>
    1ed4:	6863      	ldr	r3, [r4, #4]
    1ed6:	6013      	str	r3, [r2, #0]
    1ed8:	e01a      	b.n	1f10 <_malloc_r+0x80>
    1eda:	684b      	ldr	r3, [r1, #4]
    1edc:	6063      	str	r3, [r4, #4]
    1ede:	000c      	movs	r4, r1
    1ee0:	e016      	b.n	1f10 <_malloc_r+0x80>
    1ee2:	000c      	movs	r4, r1
    1ee4:	6849      	ldr	r1, [r1, #4]
    1ee6:	e7e9      	b.n	1ebc <_malloc_r+0x2c>
    1ee8:	4c13      	ldr	r4, [pc, #76]	; (1f38 <_malloc_r+0xa8>)
    1eea:	6823      	ldr	r3, [r4, #0]
    1eec:	2b00      	cmp	r3, #0
    1eee:	d103      	bne.n	1ef8 <_malloc_r+0x68>
    1ef0:	0030      	movs	r0, r6
    1ef2:	f000 f823 	bl	1f3c <_sbrk_r>
    1ef6:	6020      	str	r0, [r4, #0]
    1ef8:	0029      	movs	r1, r5
    1efa:	0030      	movs	r0, r6
    1efc:	f000 f81e 	bl	1f3c <_sbrk_r>
    1f00:	1c43      	adds	r3, r0, #1
    1f02:	d0d1      	beq.n	1ea8 <_malloc_r+0x18>
    1f04:	2303      	movs	r3, #3
    1f06:	1cc4      	adds	r4, r0, #3
    1f08:	439c      	bics	r4, r3
    1f0a:	42a0      	cmp	r0, r4
    1f0c:	d10a      	bne.n	1f24 <_malloc_r+0x94>
    1f0e:	6025      	str	r5, [r4, #0]
    1f10:	0020      	movs	r0, r4
    1f12:	2207      	movs	r2, #7
    1f14:	300b      	adds	r0, #11
    1f16:	1d23      	adds	r3, r4, #4
    1f18:	4390      	bics	r0, r2
    1f1a:	1ac3      	subs	r3, r0, r3
    1f1c:	d009      	beq.n	1f32 <_malloc_r+0xa2>
    1f1e:	425a      	negs	r2, r3
    1f20:	50e2      	str	r2, [r4, r3]
    1f22:	e006      	b.n	1f32 <_malloc_r+0xa2>
    1f24:	1a21      	subs	r1, r4, r0
    1f26:	0030      	movs	r0, r6
    1f28:	f000 f808 	bl	1f3c <_sbrk_r>
    1f2c:	1c43      	adds	r3, r0, #1
    1f2e:	d1ee      	bne.n	1f0e <_malloc_r+0x7e>
    1f30:	e7ba      	b.n	1ea8 <_malloc_r+0x18>
    1f32:	bd70      	pop	{r4, r5, r6, pc}
    1f34:	200000fc 	.word	0x200000fc
    1f38:	200000f8 	.word	0x200000f8

00001f3c <_sbrk_r>:
    1f3c:	2300      	movs	r3, #0
    1f3e:	b570      	push	{r4, r5, r6, lr}
    1f40:	4c06      	ldr	r4, [pc, #24]	; (1f5c <_sbrk_r+0x20>)
    1f42:	0005      	movs	r5, r0
    1f44:	0008      	movs	r0, r1
    1f46:	6023      	str	r3, [r4, #0]
    1f48:	f7ff f9a2 	bl	1290 <_sbrk>
    1f4c:	1c43      	adds	r3, r0, #1
    1f4e:	d103      	bne.n	1f58 <_sbrk_r+0x1c>
    1f50:	6823      	ldr	r3, [r4, #0]
    1f52:	2b00      	cmp	r3, #0
    1f54:	d000      	beq.n	1f58 <_sbrk_r+0x1c>
    1f56:	602b      	str	r3, [r5, #0]
    1f58:	bd70      	pop	{r4, r5, r6, pc}
    1f5a:	46c0      	nop			; (mov r8, r8)
    1f5c:	20000124 	.word	0x20000124

00001f60 <__sread>:
    1f60:	b570      	push	{r4, r5, r6, lr}
    1f62:	000c      	movs	r4, r1
    1f64:	250e      	movs	r5, #14
    1f66:	5f49      	ldrsh	r1, [r1, r5]
    1f68:	f000 f8a4 	bl	20b4 <_read_r>
    1f6c:	2800      	cmp	r0, #0
    1f6e:	db03      	blt.n	1f78 <__sread+0x18>
    1f70:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1f72:	181b      	adds	r3, r3, r0
    1f74:	6563      	str	r3, [r4, #84]	; 0x54
    1f76:	e003      	b.n	1f80 <__sread+0x20>
    1f78:	89a2      	ldrh	r2, [r4, #12]
    1f7a:	4b02      	ldr	r3, [pc, #8]	; (1f84 <__sread+0x24>)
    1f7c:	4013      	ands	r3, r2
    1f7e:	81a3      	strh	r3, [r4, #12]
    1f80:	bd70      	pop	{r4, r5, r6, pc}
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	ffffefff 	.word	0xffffefff

00001f88 <__swrite>:
    1f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f8a:	001f      	movs	r7, r3
    1f8c:	898b      	ldrh	r3, [r1, #12]
    1f8e:	0005      	movs	r5, r0
    1f90:	000c      	movs	r4, r1
    1f92:	0016      	movs	r6, r2
    1f94:	05db      	lsls	r3, r3, #23
    1f96:	d505      	bpl.n	1fa4 <__swrite+0x1c>
    1f98:	230e      	movs	r3, #14
    1f9a:	5ec9      	ldrsh	r1, [r1, r3]
    1f9c:	2200      	movs	r2, #0
    1f9e:	2302      	movs	r3, #2
    1fa0:	f000 f874 	bl	208c <_lseek_r>
    1fa4:	89a2      	ldrh	r2, [r4, #12]
    1fa6:	4b05      	ldr	r3, [pc, #20]	; (1fbc <__swrite+0x34>)
    1fa8:	0028      	movs	r0, r5
    1faa:	4013      	ands	r3, r2
    1fac:	81a3      	strh	r3, [r4, #12]
    1fae:	0032      	movs	r2, r6
    1fb0:	230e      	movs	r3, #14
    1fb2:	5ee1      	ldrsh	r1, [r4, r3]
    1fb4:	003b      	movs	r3, r7
    1fb6:	f000 f81f 	bl	1ff8 <_write_r>
    1fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fbc:	ffffefff 	.word	0xffffefff

00001fc0 <__sseek>:
    1fc0:	b570      	push	{r4, r5, r6, lr}
    1fc2:	000c      	movs	r4, r1
    1fc4:	250e      	movs	r5, #14
    1fc6:	5f49      	ldrsh	r1, [r1, r5]
    1fc8:	f000 f860 	bl	208c <_lseek_r>
    1fcc:	89a3      	ldrh	r3, [r4, #12]
    1fce:	1c42      	adds	r2, r0, #1
    1fd0:	d103      	bne.n	1fda <__sseek+0x1a>
    1fd2:	4a05      	ldr	r2, [pc, #20]	; (1fe8 <__sseek+0x28>)
    1fd4:	4013      	ands	r3, r2
    1fd6:	81a3      	strh	r3, [r4, #12]
    1fd8:	e004      	b.n	1fe4 <__sseek+0x24>
    1fda:	2280      	movs	r2, #128	; 0x80
    1fdc:	0152      	lsls	r2, r2, #5
    1fde:	4313      	orrs	r3, r2
    1fe0:	81a3      	strh	r3, [r4, #12]
    1fe2:	6560      	str	r0, [r4, #84]	; 0x54
    1fe4:	bd70      	pop	{r4, r5, r6, pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	ffffefff 	.word	0xffffefff

00001fec <__sclose>:
    1fec:	b510      	push	{r4, lr}
    1fee:	230e      	movs	r3, #14
    1ff0:	5ec9      	ldrsh	r1, [r1, r3]
    1ff2:	f000 f815 	bl	2020 <_close_r>
    1ff6:	bd10      	pop	{r4, pc}

00001ff8 <_write_r>:
    1ff8:	b570      	push	{r4, r5, r6, lr}
    1ffa:	0005      	movs	r5, r0
    1ffc:	0008      	movs	r0, r1
    1ffe:	0011      	movs	r1, r2
    2000:	2200      	movs	r2, #0
    2002:	4c06      	ldr	r4, [pc, #24]	; (201c <STACK_SIZE+0x1c>)
    2004:	6022      	str	r2, [r4, #0]
    2006:	001a      	movs	r2, r3
    2008:	f7ff f91a 	bl	1240 <_write>
    200c:	1c43      	adds	r3, r0, #1
    200e:	d103      	bne.n	2018 <STACK_SIZE+0x18>
    2010:	6823      	ldr	r3, [r4, #0]
    2012:	2b00      	cmp	r3, #0
    2014:	d000      	beq.n	2018 <STACK_SIZE+0x18>
    2016:	602b      	str	r3, [r5, #0]
    2018:	bd70      	pop	{r4, r5, r6, pc}
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	20000124 	.word	0x20000124

00002020 <_close_r>:
    2020:	2300      	movs	r3, #0
    2022:	b570      	push	{r4, r5, r6, lr}
    2024:	4c06      	ldr	r4, [pc, #24]	; (2040 <_close_r+0x20>)
    2026:	0005      	movs	r5, r0
    2028:	0008      	movs	r0, r1
    202a:	6023      	str	r3, [r4, #0]
    202c:	f7ff f942 	bl	12b4 <_close>
    2030:	1c43      	adds	r3, r0, #1
    2032:	d103      	bne.n	203c <_close_r+0x1c>
    2034:	6823      	ldr	r3, [r4, #0]
    2036:	2b00      	cmp	r3, #0
    2038:	d000      	beq.n	203c <_close_r+0x1c>
    203a:	602b      	str	r3, [r5, #0]
    203c:	bd70      	pop	{r4, r5, r6, pc}
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	20000124 	.word	0x20000124

00002044 <_fstat_r>:
    2044:	2300      	movs	r3, #0
    2046:	b570      	push	{r4, r5, r6, lr}
    2048:	4c06      	ldr	r4, [pc, #24]	; (2064 <_fstat_r+0x20>)
    204a:	0005      	movs	r5, r0
    204c:	0008      	movs	r0, r1
    204e:	0011      	movs	r1, r2
    2050:	6023      	str	r3, [r4, #0]
    2052:	f7ff f933 	bl	12bc <_fstat>
    2056:	1c43      	adds	r3, r0, #1
    2058:	d103      	bne.n	2062 <_fstat_r+0x1e>
    205a:	6823      	ldr	r3, [r4, #0]
    205c:	2b00      	cmp	r3, #0
    205e:	d000      	beq.n	2062 <_fstat_r+0x1e>
    2060:	602b      	str	r3, [r5, #0]
    2062:	bd70      	pop	{r4, r5, r6, pc}
    2064:	20000124 	.word	0x20000124

00002068 <_isatty_r>:
    2068:	2300      	movs	r3, #0
    206a:	b570      	push	{r4, r5, r6, lr}
    206c:	4c06      	ldr	r4, [pc, #24]	; (2088 <_isatty_r+0x20>)
    206e:	0005      	movs	r5, r0
    2070:	0008      	movs	r0, r1
    2072:	6023      	str	r3, [r4, #0]
    2074:	f7ff f928 	bl	12c8 <_isatty>
    2078:	1c43      	adds	r3, r0, #1
    207a:	d103      	bne.n	2084 <_isatty_r+0x1c>
    207c:	6823      	ldr	r3, [r4, #0]
    207e:	2b00      	cmp	r3, #0
    2080:	d000      	beq.n	2084 <_isatty_r+0x1c>
    2082:	602b      	str	r3, [r5, #0]
    2084:	bd70      	pop	{r4, r5, r6, pc}
    2086:	46c0      	nop			; (mov r8, r8)
    2088:	20000124 	.word	0x20000124

0000208c <_lseek_r>:
    208c:	b570      	push	{r4, r5, r6, lr}
    208e:	0005      	movs	r5, r0
    2090:	0008      	movs	r0, r1
    2092:	0011      	movs	r1, r2
    2094:	2200      	movs	r2, #0
    2096:	4c06      	ldr	r4, [pc, #24]	; (20b0 <_lseek_r+0x24>)
    2098:	6022      	str	r2, [r4, #0]
    209a:	001a      	movs	r2, r3
    209c:	f7ff f916 	bl	12cc <_lseek>
    20a0:	1c43      	adds	r3, r0, #1
    20a2:	d103      	bne.n	20ac <_lseek_r+0x20>
    20a4:	6823      	ldr	r3, [r4, #0]
    20a6:	2b00      	cmp	r3, #0
    20a8:	d000      	beq.n	20ac <_lseek_r+0x20>
    20aa:	602b      	str	r3, [r5, #0]
    20ac:	bd70      	pop	{r4, r5, r6, pc}
    20ae:	46c0      	nop			; (mov r8, r8)
    20b0:	20000124 	.word	0x20000124

000020b4 <_read_r>:
    20b4:	b570      	push	{r4, r5, r6, lr}
    20b6:	0005      	movs	r5, r0
    20b8:	0008      	movs	r0, r1
    20ba:	0011      	movs	r1, r2
    20bc:	2200      	movs	r2, #0
    20be:	4c06      	ldr	r4, [pc, #24]	; (20d8 <_read_r+0x24>)
    20c0:	6022      	str	r2, [r4, #0]
    20c2:	001a      	movs	r2, r3
    20c4:	f7ff f89c 	bl	1200 <_read>
    20c8:	1c43      	adds	r3, r0, #1
    20ca:	d103      	bne.n	20d4 <_read_r+0x20>
    20cc:	6823      	ldr	r3, [r4, #0]
    20ce:	2b00      	cmp	r3, #0
    20d0:	d000      	beq.n	20d4 <_read_r+0x20>
    20d2:	602b      	str	r3, [r5, #0]
    20d4:	bd70      	pop	{r4, r5, r6, pc}
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	20000124 	.word	0x20000124
    20dc:	42000800 	.word	0x42000800
    20e0:	42000c00 	.word	0x42000c00
    20e4:	42001000 	.word	0x42001000
    20e8:	42001400 	.word	0x42001400
    20ec:	42001800 	.word	0x42001800
    20f0:	42001c00 	.word	0x42001c00
    20f4:	0c0b0a09 	.word	0x0c0b0a09
    20f8:	00000e0d 	.word	0x00000e0d
    20fc:	00000b7a 	.word	0x00000b7a
    2100:	00000b76 	.word	0x00000b76
    2104:	00000b76 	.word	0x00000b76
    2108:	00000bd4 	.word	0x00000bd4
    210c:	00000bd4 	.word	0x00000bd4
    2110:	00000b8e 	.word	0x00000b8e
    2114:	00000b80 	.word	0x00000b80
    2118:	00000b94 	.word	0x00000b94
    211c:	00000bc2 	.word	0x00000bc2
    2120:	00000c60 	.word	0x00000c60
    2124:	00000c40 	.word	0x00000c40
    2128:	00000c40 	.word	0x00000c40
    212c:	00000ccc 	.word	0x00000ccc
    2130:	00000c52 	.word	0x00000c52
    2134:	00000c6e 	.word	0x00000c6e
    2138:	00000c44 	.word	0x00000c44
    213c:	00000c7c 	.word	0x00000c7c
    2140:	00000cbc 	.word	0x00000cbc
    2144:	204d2749 	.word	0x204d2749
    2148:	56494c41 	.word	0x56494c41
    214c:	00000045 	.word	0x00000045
    2150:	00000043 	.word	0x00000043

00002154 <_global_impure_ptr>:
    2154:	20000004                                ... 

00002158 <__sf_fake_stdin>:
	...

00002178 <__sf_fake_stdout>:
	...

00002198 <__sf_fake_stderr>:
	...

000021b8 <_init>:
    21b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21be:	bc08      	pop	{r3}
    21c0:	469e      	mov	lr, r3
    21c2:	4770      	bx	lr

000021c4 <__init_array_start>:
    21c4:	000000dd 	.word	0x000000dd

000021c8 <_fini>:
    21c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21ce:	bc08      	pop	{r3}
    21d0:	469e      	mov	lr, r3
    21d2:	4770      	bx	lr

000021d4 <__fini_array_start>:
    21d4:	000000b5 	.word	0x000000b5
