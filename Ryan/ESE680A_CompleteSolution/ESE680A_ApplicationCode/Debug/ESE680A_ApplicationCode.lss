
ESE680A_ApplicationCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c48  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00008c48  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  2000000c  00008c54  0001000c  2**2
                  ALLOC
  3 .stack        00002000  20000060  00008ca8  0001000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000fb6b  00000000  00000000  0001008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018a6  00000000  00000000  0001fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000002b8  00000000  00000000  0002149e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000268  00000000  00000000  00021756  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000171ac  00000000  00000000  000219be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000071aa  00000000  00000000  00038b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00084f30  00000000  00000000  0003fd14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000638  00000000  00000000  000c4c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001c43  00000000  00000000  000c527c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <_sfixed>:
    8000:	20002060 	.word	0x20002060
    8004:	00008915 	.word	0x00008915
    8008:	00008911 	.word	0x00008911
    800c:	00008911 	.word	0x00008911
	...
    802c:	00008911 	.word	0x00008911
	...
    8038:	00008911 	.word	0x00008911
    803c:	00008911 	.word	0x00008911
    8040:	00008911 	.word	0x00008911
    8044:	00008911 	.word	0x00008911
    8048:	00008911 	.word	0x00008911
    804c:	00008911 	.word	0x00008911
    8050:	00008911 	.word	0x00008911
    8054:	00008911 	.word	0x00008911
    8058:	00008911 	.word	0x00008911
    805c:	00008911 	.word	0x00008911
    8060:	00008911 	.word	0x00008911
    8064:	000081ed 	.word	0x000081ed
    8068:	000081fd 	.word	0x000081fd
    806c:	0000820d 	.word	0x0000820d
    8070:	0000821d 	.word	0x0000821d
    8074:	0000822d 	.word	0x0000822d
    8078:	0000823d 	.word	0x0000823d
    807c:	00008911 	.word	0x00008911
    8080:	00008911 	.word	0x00008911
    8084:	00008911 	.word	0x00008911
    8088:	00008911 	.word	0x00008911
    808c:	00008911 	.word	0x00008911
    8090:	00008911 	.word	0x00008911
	...
    809c:	00008911 	.word	0x00008911
    80a0:	00008911 	.word	0x00008911
    80a4:	00008911 	.word	0x00008911
    80a8:	00008911 	.word	0x00008911
    80ac:	00008911 	.word	0x00008911
    80b0:	00000000 	.word	0x00000000

000080b4 <__do_global_dtors_aux>:
    80b4:	b510      	push	{r4, lr}
    80b6:	4c06      	ldr	r4, [pc, #24]	; (80d0 <__do_global_dtors_aux+0x1c>)
    80b8:	7823      	ldrb	r3, [r4, #0]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d107      	bne.n	80ce <__do_global_dtors_aux+0x1a>
    80be:	4b05      	ldr	r3, [pc, #20]	; (80d4 <__do_global_dtors_aux+0x20>)
    80c0:	2b00      	cmp	r3, #0
    80c2:	d002      	beq.n	80ca <__do_global_dtors_aux+0x16>
    80c4:	4804      	ldr	r0, [pc, #16]	; (80d8 <__do_global_dtors_aux+0x24>)
    80c6:	e000      	b.n	80ca <__do_global_dtors_aux+0x16>
    80c8:	bf00      	nop
    80ca:	2301      	movs	r3, #1
    80cc:	7023      	strb	r3, [r4, #0]
    80ce:	bd10      	pop	{r4, pc}
    80d0:	2000000c 	.word	0x2000000c
    80d4:	00000000 	.word	0x00000000
    80d8:	00008c48 	.word	0x00008c48

000080dc <frame_dummy>:
    80dc:	4b08      	ldr	r3, [pc, #32]	; (8100 <frame_dummy+0x24>)
    80de:	b510      	push	{r4, lr}
    80e0:	2b00      	cmp	r3, #0
    80e2:	d003      	beq.n	80ec <frame_dummy+0x10>
    80e4:	4907      	ldr	r1, [pc, #28]	; (8104 <frame_dummy+0x28>)
    80e6:	4808      	ldr	r0, [pc, #32]	; (8108 <frame_dummy+0x2c>)
    80e8:	e000      	b.n	80ec <frame_dummy+0x10>
    80ea:	bf00      	nop
    80ec:	4807      	ldr	r0, [pc, #28]	; (810c <frame_dummy+0x30>)
    80ee:	6803      	ldr	r3, [r0, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d100      	bne.n	80f6 <frame_dummy+0x1a>
    80f4:	bd10      	pop	{r4, pc}
    80f6:	4b06      	ldr	r3, [pc, #24]	; (8110 <frame_dummy+0x34>)
    80f8:	2b00      	cmp	r3, #0
    80fa:	d0fb      	beq.n	80f4 <frame_dummy+0x18>
    80fc:	4798      	blx	r3
    80fe:	e7f9      	b.n	80f4 <frame_dummy+0x18>
    8100:	00000000 	.word	0x00000000
    8104:	20000010 	.word	0x20000010
    8108:	00008c48 	.word	0x00008c48
    810c:	00008c48 	.word	0x00008c48
    8110:	00000000 	.word	0x00000000

00008114 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    8114:	4770      	bx	lr
    8116:	46c0      	nop			; (mov r8, r8)

00008118 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    8118:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    811a:	2000      	movs	r0, #0
    811c:	4b08      	ldr	r3, [pc, #32]	; (8140 <delay_init+0x28>)
    811e:	4798      	blx	r3
    8120:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    8122:	4c08      	ldr	r4, [pc, #32]	; (8144 <delay_init+0x2c>)
    8124:	21fa      	movs	r1, #250	; 0xfa
    8126:	0089      	lsls	r1, r1, #2
    8128:	47a0      	blx	r4
    812a:	4b07      	ldr	r3, [pc, #28]	; (8148 <delay_init+0x30>)
    812c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    812e:	4907      	ldr	r1, [pc, #28]	; (814c <delay_init+0x34>)
    8130:	0028      	movs	r0, r5
    8132:	47a0      	blx	r4
    8134:	4b06      	ldr	r3, [pc, #24]	; (8150 <delay_init+0x38>)
    8136:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    8138:	2205      	movs	r2, #5
    813a:	4b06      	ldr	r3, [pc, #24]	; (8154 <delay_init+0x3c>)
    813c:	601a      	str	r2, [r3, #0]
}
    813e:	bd70      	pop	{r4, r5, r6, pc}
    8140:	000086a1 	.word	0x000086a1
    8144:	00008a7d 	.word	0x00008a7d
    8148:	20000004 	.word	0x20000004
    814c:	000f4240 	.word	0x000f4240
    8150:	20000000 	.word	0x20000000
    8154:	e000e010 	.word	0xe000e010

00008158 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    8158:	4b0c      	ldr	r3, [pc, #48]	; (818c <cpu_irq_enter_critical+0x34>)
    815a:	681b      	ldr	r3, [r3, #0]
    815c:	2b00      	cmp	r3, #0
    815e:	d110      	bne.n	8182 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8160:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    8164:	2b00      	cmp	r3, #0
    8166:	d109      	bne.n	817c <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    8168:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    816a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    816e:	2200      	movs	r2, #0
    8170:	4b07      	ldr	r3, [pc, #28]	; (8190 <cpu_irq_enter_critical+0x38>)
    8172:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    8174:	3201      	adds	r2, #1
    8176:	4b07      	ldr	r3, [pc, #28]	; (8194 <cpu_irq_enter_critical+0x3c>)
    8178:	701a      	strb	r2, [r3, #0]
    817a:	e002      	b.n	8182 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    817c:	2200      	movs	r2, #0
    817e:	4b05      	ldr	r3, [pc, #20]	; (8194 <cpu_irq_enter_critical+0x3c>)
    8180:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    8182:	4a02      	ldr	r2, [pc, #8]	; (818c <cpu_irq_enter_critical+0x34>)
    8184:	6813      	ldr	r3, [r2, #0]
    8186:	3301      	adds	r3, #1
    8188:	6013      	str	r3, [r2, #0]
}
    818a:	4770      	bx	lr
    818c:	20000028 	.word	0x20000028
    8190:	20000008 	.word	0x20000008
    8194:	2000002c 	.word	0x2000002c

00008198 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    8198:	4b08      	ldr	r3, [pc, #32]	; (81bc <cpu_irq_leave_critical+0x24>)
    819a:	681a      	ldr	r2, [r3, #0]
    819c:	3a01      	subs	r2, #1
    819e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    81a0:	681b      	ldr	r3, [r3, #0]
    81a2:	2b00      	cmp	r3, #0
    81a4:	d109      	bne.n	81ba <cpu_irq_leave_critical+0x22>
    81a6:	4b06      	ldr	r3, [pc, #24]	; (81c0 <cpu_irq_leave_critical+0x28>)
    81a8:	781b      	ldrb	r3, [r3, #0]
    81aa:	2b00      	cmp	r3, #0
    81ac:	d005      	beq.n	81ba <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    81ae:	2201      	movs	r2, #1
    81b0:	4b04      	ldr	r3, [pc, #16]	; (81c4 <cpu_irq_leave_critical+0x2c>)
    81b2:	701a      	strb	r2, [r3, #0]
    81b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    81b8:	b662      	cpsie	i
	}
}
    81ba:	4770      	bx	lr
    81bc:	20000028 	.word	0x20000028
    81c0:	2000002c 	.word	0x2000002c
    81c4:	20000008 	.word	0x20000008

000081c8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    81c8:	b500      	push	{lr}
    81ca:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    81cc:	ab01      	add	r3, sp, #4
    81ce:	2280      	movs	r2, #128	; 0x80
    81d0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    81d2:	780a      	ldrb	r2, [r1, #0]
    81d4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    81d6:	784a      	ldrb	r2, [r1, #1]
    81d8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    81da:	788a      	ldrb	r2, [r1, #2]
    81dc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    81de:	0019      	movs	r1, r3
    81e0:	4b01      	ldr	r3, [pc, #4]	; (81e8 <port_pin_set_config+0x20>)
    81e2:	4798      	blx	r3
}
    81e4:	b003      	add	sp, #12
    81e6:	bd00      	pop	{pc}
    81e8:	000088b1 	.word	0x000088b1

000081ec <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    81ec:	b510      	push	{r4, lr}
    81ee:	4b02      	ldr	r3, [pc, #8]	; (81f8 <SERCOM0_Handler+0xc>)
    81f0:	681b      	ldr	r3, [r3, #0]
    81f2:	2000      	movs	r0, #0
    81f4:	4798      	blx	r3
    81f6:	bd10      	pop	{r4, pc}
    81f8:	20000030 	.word	0x20000030

000081fc <SERCOM1_Handler>:
    81fc:	b510      	push	{r4, lr}
    81fe:	4b02      	ldr	r3, [pc, #8]	; (8208 <SERCOM1_Handler+0xc>)
    8200:	685b      	ldr	r3, [r3, #4]
    8202:	2001      	movs	r0, #1
    8204:	4798      	blx	r3
    8206:	bd10      	pop	{r4, pc}
    8208:	20000030 	.word	0x20000030

0000820c <SERCOM2_Handler>:
    820c:	b510      	push	{r4, lr}
    820e:	4b02      	ldr	r3, [pc, #8]	; (8218 <SERCOM2_Handler+0xc>)
    8210:	689b      	ldr	r3, [r3, #8]
    8212:	2002      	movs	r0, #2
    8214:	4798      	blx	r3
    8216:	bd10      	pop	{r4, pc}
    8218:	20000030 	.word	0x20000030

0000821c <SERCOM3_Handler>:
    821c:	b510      	push	{r4, lr}
    821e:	4b02      	ldr	r3, [pc, #8]	; (8228 <SERCOM3_Handler+0xc>)
    8220:	68db      	ldr	r3, [r3, #12]
    8222:	2003      	movs	r0, #3
    8224:	4798      	blx	r3
    8226:	bd10      	pop	{r4, pc}
    8228:	20000030 	.word	0x20000030

0000822c <SERCOM4_Handler>:
    822c:	b510      	push	{r4, lr}
    822e:	4b02      	ldr	r3, [pc, #8]	; (8238 <SERCOM4_Handler+0xc>)
    8230:	691b      	ldr	r3, [r3, #16]
    8232:	2004      	movs	r0, #4
    8234:	4798      	blx	r3
    8236:	bd10      	pop	{r4, pc}
    8238:	20000030 	.word	0x20000030

0000823c <SERCOM5_Handler>:
    823c:	b510      	push	{r4, lr}
    823e:	4b02      	ldr	r3, [pc, #8]	; (8248 <SERCOM5_Handler+0xc>)
    8240:	695b      	ldr	r3, [r3, #20]
    8242:	2005      	movs	r0, #5
    8244:	4798      	blx	r3
    8246:	bd10      	pop	{r4, pc}
    8248:	20000030 	.word	0x20000030

0000824c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    824c:	b510      	push	{r4, lr}
	switch (clock_source) {
    824e:	2808      	cmp	r0, #8
    8250:	d803      	bhi.n	825a <system_clock_source_get_hz+0xe>
    8252:	0080      	lsls	r0, r0, #2
    8254:	4b1b      	ldr	r3, [pc, #108]	; (82c4 <system_clock_source_get_hz+0x78>)
    8256:	581b      	ldr	r3, [r3, r0]
    8258:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    825a:	2000      	movs	r0, #0
    825c:	e030      	b.n	82c0 <system_clock_source_get_hz+0x74>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    825e:	4b1a      	ldr	r3, [pc, #104]	; (82c8 <system_clock_source_get_hz+0x7c>)
    8260:	6918      	ldr	r0, [r3, #16]
    8262:	e02d      	b.n	82c0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    8264:	4b19      	ldr	r3, [pc, #100]	; (82cc <system_clock_source_get_hz+0x80>)
    8266:	6a1b      	ldr	r3, [r3, #32]
    8268:	059b      	lsls	r3, r3, #22
    826a:	0f9b      	lsrs	r3, r3, #30
    826c:	4818      	ldr	r0, [pc, #96]	; (82d0 <system_clock_source_get_hz+0x84>)
    826e:	40d8      	lsrs	r0, r3
    8270:	e026      	b.n	82c0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    8272:	4b15      	ldr	r3, [pc, #84]	; (82c8 <system_clock_source_get_hz+0x7c>)
    8274:	6958      	ldr	r0, [r3, #20]
    8276:	e023      	b.n	82c0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    8278:	4b13      	ldr	r3, [pc, #76]	; (82c8 <system_clock_source_get_hz+0x7c>)
    827a:	681b      	ldr	r3, [r3, #0]
    827c:	2002      	movs	r0, #2
    827e:	4018      	ands	r0, r3
    8280:	d01e      	beq.n	82c0 <system_clock_source_get_hz+0x74>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    8282:	4912      	ldr	r1, [pc, #72]	; (82cc <system_clock_source_get_hz+0x80>)
    8284:	2210      	movs	r2, #16
    8286:	68cb      	ldr	r3, [r1, #12]
    8288:	421a      	tst	r2, r3
    828a:	d0fc      	beq.n	8286 <system_clock_source_get_hz+0x3a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    828c:	4b0e      	ldr	r3, [pc, #56]	; (82c8 <system_clock_source_get_hz+0x7c>)
    828e:	681b      	ldr	r3, [r3, #0]
    8290:	075b      	lsls	r3, r3, #29
    8292:	d514      	bpl.n	82be <system_clock_source_get_hz+0x72>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    8294:	2000      	movs	r0, #0
    8296:	4b0f      	ldr	r3, [pc, #60]	; (82d4 <system_clock_source_get_hz+0x88>)
    8298:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    829a:	4b0b      	ldr	r3, [pc, #44]	; (82c8 <system_clock_source_get_hz+0x7c>)
    829c:	689b      	ldr	r3, [r3, #8]
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    829e:	041b      	lsls	r3, r3, #16
    82a0:	0c1b      	lsrs	r3, r3, #16
    82a2:	4358      	muls	r0, r3
    82a4:	e00c      	b.n	82c0 <system_clock_source_get_hz+0x74>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    82a6:	2350      	movs	r3, #80	; 0x50
    82a8:	4a08      	ldr	r2, [pc, #32]	; (82cc <system_clock_source_get_hz+0x80>)
    82aa:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    82ac:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    82ae:	075b      	lsls	r3, r3, #29
    82b0:	d506      	bpl.n	82c0 <system_clock_source_get_hz+0x74>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    82b2:	4b05      	ldr	r3, [pc, #20]	; (82c8 <system_clock_source_get_hz+0x7c>)
    82b4:	68d8      	ldr	r0, [r3, #12]
    82b6:	e003      	b.n	82c0 <system_clock_source_get_hz+0x74>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    82b8:	2080      	movs	r0, #128	; 0x80
    82ba:	0200      	lsls	r0, r0, #8
    82bc:	e000      	b.n	82c0 <system_clock_source_get_hz+0x74>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    82be:	4806      	ldr	r0, [pc, #24]	; (82d8 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    82c0:	bd10      	pop	{r4, pc}
    82c2:	46c0      	nop			; (mov r8, r8)
    82c4:	00008be0 	.word	0x00008be0
    82c8:	20000048 	.word	0x20000048
    82cc:	40000800 	.word	0x40000800
    82d0:	007a1200 	.word	0x007a1200
    82d4:	000087d5 	.word	0x000087d5
    82d8:	02dc6c00 	.word	0x02dc6c00

000082dc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    82dc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    82de:	4c0c      	ldr	r4, [pc, #48]	; (8310 <system_clock_source_osc8m_set_config+0x34>)
    82e0:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    82e2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    82e4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    82e6:	7842      	ldrb	r2, [r0, #1]
    82e8:	2001      	movs	r0, #1
    82ea:	4002      	ands	r2, r0
    82ec:	0192      	lsls	r2, r2, #6
    82ee:	2640      	movs	r6, #64	; 0x40
    82f0:	43b3      	bics	r3, r6
    82f2:	4313      	orrs	r3, r2
    82f4:	0002      	movs	r2, r0
    82f6:	402a      	ands	r2, r5
    82f8:	01d2      	lsls	r2, r2, #7
    82fa:	307f      	adds	r0, #127	; 0x7f
    82fc:	4383      	bics	r3, r0
    82fe:	4313      	orrs	r3, r2
    8300:	2203      	movs	r2, #3
    8302:	400a      	ands	r2, r1
    8304:	0212      	lsls	r2, r2, #8
    8306:	4903      	ldr	r1, [pc, #12]	; (8314 <system_clock_source_osc8m_set_config+0x38>)
    8308:	400b      	ands	r3, r1
    830a:	4313      	orrs	r3, r2
    830c:	6223      	str	r3, [r4, #32]
}
    830e:	bd70      	pop	{r4, r5, r6, pc}
    8310:	40000800 	.word	0x40000800
    8314:	fffffcff 	.word	0xfffffcff

00008318 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    8318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    831a:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    831c:	68c5      	ldr	r5, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    831e:	7d03      	ldrb	r3, [r0, #20]
    8320:	2b01      	cmp	r3, #1
    8322:	d106      	bne.n	8332 <system_clock_source_dpll_set_config+0x1a>
		refclk = refclk / (2 * (config->reference_divider + 1));
    8324:	8a01      	ldrh	r1, [r0, #16]
    8326:	3101      	adds	r1, #1
    8328:	0049      	lsls	r1, r1, #1
    832a:	0028      	movs	r0, r5
    832c:	4b20      	ldr	r3, [pc, #128]	; (83b0 <system_clock_source_dpll_set_config+0x98>)
    832e:	4798      	blx	r3
    8330:	0005      	movs	r5, r0
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    8332:	68a3      	ldr	r3, [r4, #8]
    8334:	0118      	lsls	r0, r3, #4
    8336:	0029      	movs	r1, r5
    8338:	4b1d      	ldr	r3, [pc, #116]	; (83b0 <system_clock_source_dpll_set_config+0x98>)
    833a:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    833c:	210f      	movs	r1, #15
    833e:	4001      	ands	r1, r0
	tmpldr = (tmpldr >> 4) - 1;
    8340:	0900      	lsrs	r0, r0, #4

	SYSCTRL->DPLLCTRLA.reg =
    8342:	7823      	ldrb	r3, [r4, #0]
    8344:	01da      	lsls	r2, r3, #7
    8346:	7863      	ldrb	r3, [r4, #1]
    8348:	019b      	lsls	r3, r3, #6
    834a:	4313      	orrs	r3, r2
    834c:	b2db      	uxtb	r3, r3
    834e:	4e19      	ldr	r6, [pc, #100]	; (83b4 <system_clock_source_dpll_set_config+0x9c>)
    8350:	2244      	movs	r2, #68	; 0x44
    8352:	54b3      	strb	r3, [r6, r2]
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    8354:	040a      	lsls	r2, r1, #16
    8356:	1e43      	subs	r3, r0, #1
    8358:	051b      	lsls	r3, r3, #20
    835a:	0d1b      	lsrs	r3, r3, #20
    835c:	4313      	orrs	r3, r2

	SYSCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);

	SYSCTRL->DPLLRATIO.reg =
    835e:	64b3      	str	r3, [r6, #72]	; 0x48
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
    8360:	78a3      	ldrb	r3, [r4, #2]
    8362:	031f      	lsls	r7, r3, #12
    8364:	78e3      	ldrb	r3, [r4, #3]
    8366:	00db      	lsls	r3, r3, #3
    8368:	433b      	orrs	r3, r7
    836a:	7922      	ldrb	r2, [r4, #4]
    836c:	0092      	lsls	r2, r2, #2
    836e:	4313      	orrs	r3, r2
    8370:	7ca2      	ldrb	r2, [r4, #18]
    8372:	2703      	movs	r7, #3
    8374:	403a      	ands	r2, r7
    8376:	4313      	orrs	r3, r2
    8378:	001f      	movs	r7, r3
    837a:	8a23      	ldrh	r3, [r4, #16]
    837c:	041b      	lsls	r3, r3, #16
    837e:	4a0e      	ldr	r2, [pc, #56]	; (83b8 <system_clock_source_dpll_set_config+0xa0>)
    8380:	401a      	ands	r2, r3
    8382:	003b      	movs	r3, r7
    8384:	4313      	orrs	r3, r2
    8386:	7ce7      	ldrb	r7, [r4, #19]
    8388:	023f      	lsls	r7, r7, #8
    838a:	22e0      	movs	r2, #224	; 0xe0
    838c:	00d2      	lsls	r2, r2, #3
    838e:	403a      	ands	r2, r7
    8390:	4313      	orrs	r3, r2
    8392:	001f      	movs	r7, r3
    8394:	7d22      	ldrb	r2, [r4, #20]
    8396:	0112      	lsls	r2, r2, #4
    8398:	2330      	movs	r3, #48	; 0x30
    839a:	401a      	ands	r2, r3
    839c:	003b      	movs	r3, r7
    839e:	4313      	orrs	r3, r2

	SYSCTRL->DPLLRATIO.reg =
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
			SYSCTRL_DPLLRATIO_LDR(tmpldr);

	SYSCTRL->DPLLCTRLB.reg =
    83a0:	64f3      	str	r3, [r6, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
    83a2:	0100      	lsls	r0, r0, #4
    83a4:	1841      	adds	r1, r0, r1
    83a6:	434d      	muls	r5, r1
    83a8:	092d      	lsrs	r5, r5, #4
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
    83aa:	4b04      	ldr	r3, [pc, #16]	; (83bc <system_clock_source_dpll_set_config+0xa4>)
    83ac:	60dd      	str	r5, [r3, #12]
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
}
    83ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83b0:	00008a7d 	.word	0x00008a7d
    83b4:	40000800 	.word	0x40000800
    83b8:	07ff0000 	.word	0x07ff0000
    83bc:	20000048 	.word	0x20000048

000083c0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    83c0:	2808      	cmp	r0, #8
    83c2:	d803      	bhi.n	83cc <system_clock_source_enable+0xc>
    83c4:	0080      	lsls	r0, r0, #2
    83c6:	4b25      	ldr	r3, [pc, #148]	; (845c <system_clock_source_enable+0x9c>)
    83c8:	581b      	ldr	r3, [r3, r0]
    83ca:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    83cc:	2017      	movs	r0, #23
    83ce:	e044      	b.n	845a <system_clock_source_enable+0x9a>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    83d0:	4a23      	ldr	r2, [pc, #140]	; (8460 <system_clock_source_enable+0xa0>)
    83d2:	6a11      	ldr	r1, [r2, #32]
    83d4:	2302      	movs	r3, #2
    83d6:	430b      	orrs	r3, r1
    83d8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    83da:	2000      	movs	r0, #0
    83dc:	e03d      	b.n	845a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    83de:	4a20      	ldr	r2, [pc, #128]	; (8460 <system_clock_source_enable+0xa0>)
    83e0:	6991      	ldr	r1, [r2, #24]
    83e2:	2302      	movs	r3, #2
    83e4:	430b      	orrs	r3, r1
    83e6:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    83e8:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    83ea:	e036      	b.n	845a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    83ec:	4a1c      	ldr	r2, [pc, #112]	; (8460 <system_clock_source_enable+0xa0>)
    83ee:	8a11      	ldrh	r1, [r2, #16]
    83f0:	2302      	movs	r3, #2
    83f2:	430b      	orrs	r3, r1
    83f4:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    83f6:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    83f8:	e02f      	b.n	845a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    83fa:	4a19      	ldr	r2, [pc, #100]	; (8460 <system_clock_source_enable+0xa0>)
    83fc:	8a91      	ldrh	r1, [r2, #20]
    83fe:	2302      	movs	r3, #2
    8400:	430b      	orrs	r3, r1
    8402:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    8404:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    8406:	e028      	b.n	845a <system_clock_source_enable+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    8408:	4916      	ldr	r1, [pc, #88]	; (8464 <system_clock_source_enable+0xa4>)
    840a:	680b      	ldr	r3, [r1, #0]
    840c:	2202      	movs	r2, #2
    840e:	4313      	orrs	r3, r2
    8410:	600b      	str	r3, [r1, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    8412:	4b13      	ldr	r3, [pc, #76]	; (8460 <system_clock_source_enable+0xa0>)
    8414:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    8416:	0019      	movs	r1, r3
    8418:	320e      	adds	r2, #14
    841a:	68cb      	ldr	r3, [r1, #12]
    841c:	421a      	tst	r2, r3
    841e:	d0fc      	beq.n	841a <system_clock_source_enable+0x5a>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    8420:	4a10      	ldr	r2, [pc, #64]	; (8464 <system_clock_source_enable+0xa4>)
    8422:	6891      	ldr	r1, [r2, #8]
    8424:	4b0e      	ldr	r3, [pc, #56]	; (8460 <system_clock_source_enable+0xa0>)
    8426:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    8428:	6852      	ldr	r2, [r2, #4]
    842a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    842c:	2200      	movs	r2, #0
    842e:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    8430:	0019      	movs	r1, r3
    8432:	3210      	adds	r2, #16
    8434:	68cb      	ldr	r3, [r1, #12]
    8436:	421a      	tst	r2, r3
    8438:	d0fc      	beq.n	8434 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
	_system_dfll_wait_for_sync();
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    843a:	4b0a      	ldr	r3, [pc, #40]	; (8464 <system_clock_source_enable+0xa4>)
    843c:	681b      	ldr	r3, [r3, #0]
    843e:	b29b      	uxth	r3, r3
    8440:	4a07      	ldr	r2, [pc, #28]	; (8460 <system_clock_source_enable+0xa0>)
    8442:	8493      	strh	r3, [r2, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    8444:	2000      	movs	r0, #0
    8446:	e008      	b.n	845a <system_clock_source_enable+0x9a>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    8448:	4905      	ldr	r1, [pc, #20]	; (8460 <system_clock_source_enable+0xa0>)
    844a:	2244      	movs	r2, #68	; 0x44
    844c:	5c88      	ldrb	r0, [r1, r2]
    844e:	2302      	movs	r3, #2
    8450:	4303      	orrs	r3, r0
    8452:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    8454:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    8456:	e000      	b.n	845a <system_clock_source_enable+0x9a>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    8458:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    845a:	4770      	bx	lr
    845c:	00008c04 	.word	0x00008c04
    8460:	40000800 	.word	0x40000800
    8464:	20000048 	.word	0x20000048

00008468 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    8468:	b570      	push	{r4, r5, r6, lr}
    846a:	b08c      	sub	sp, #48	; 0x30
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    846c:	22c2      	movs	r2, #194	; 0xc2
    846e:	00d2      	lsls	r2, r2, #3
    8470:	4b36      	ldr	r3, [pc, #216]	; (854c <system_clock_init+0xe4>)
    8472:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    8474:	4936      	ldr	r1, [pc, #216]	; (8550 <system_clock_init+0xe8>)
    8476:	684b      	ldr	r3, [r1, #4]
    8478:	221e      	movs	r2, #30
    847a:	4393      	bics	r3, r2
    847c:	3a1c      	subs	r2, #28
    847e:	4313      	orrs	r3, r2
    8480:	604b      	str	r3, [r1, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    8482:	ab01      	add	r3, sp, #4
    8484:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8486:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    8488:	4d32      	ldr	r5, [pc, #200]	; (8554 <system_clock_init+0xec>)
    848a:	b2e0      	uxtb	r0, r4
    848c:	a901      	add	r1, sp, #4
    848e:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8490:	3401      	adds	r4, #1
    8492:	2c25      	cmp	r4, #37	; 0x25
    8494:	d1f9      	bne.n	848a <system_clock_init+0x22>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    8496:	a80b      	add	r0, sp, #44	; 0x2c
    8498:	2400      	movs	r4, #0
    849a:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    849c:	2501      	movs	r5, #1
    849e:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    84a0:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    84a2:	4b2d      	ldr	r3, [pc, #180]	; (8558 <system_clock_init+0xf0>)
    84a4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    84a6:	2006      	movs	r0, #6
    84a8:	4e2c      	ldr	r6, [pc, #176]	; (855c <system_clock_init+0xf4>)
    84aa:	47b0      	blx	r6


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    84ac:	4b2c      	ldr	r3, [pc, #176]	; (8560 <system_clock_init+0xf8>)
    84ae:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    84b0:	a901      	add	r1, sp, #4
    84b2:	704c      	strb	r4, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    84b4:	2306      	movs	r3, #6
    84b6:	700b      	strb	r3, [r1, #0]
#endif
	config->run_in_standby     = false;
    84b8:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    84ba:	724c      	strb	r4, [r1, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    84bc:	3302      	adds	r3, #2
    84be:	604b      	str	r3, [r1, #4]
    84c0:	2001      	movs	r0, #1
    84c2:	4b28      	ldr	r3, [pc, #160]	; (8564 <system_clock_init+0xfc>)
    84c4:	4798      	blx	r3
    84c6:	2001      	movs	r0, #1
    84c8:	4b27      	ldr	r3, [pc, #156]	; (8568 <system_clock_init+0x100>)
    84ca:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
    84cc:	a90a      	add	r1, sp, #40	; 0x28
    84ce:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
    84d0:	2001      	movs	r0, #1
    84d2:	4b20      	ldr	r3, [pc, #128]	; (8554 <system_clock_init+0xec>)
    84d4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
    84d6:	2001      	movs	r0, #1
    84d8:	4b24      	ldr	r3, [pc, #144]	; (856c <system_clock_init+0x104>)
    84da:	4798      	blx	r3
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
	config->on_demand           = true;
	config->run_in_standby      = false;
    84dc:	a804      	add	r0, sp, #16
    84de:	7044      	strb	r4, [r0, #1]
	config->lock_bypass         = false;
    84e0:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    84e2:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    84e4:	7104      	strb	r4, [r0, #4]

	config->output_frequency    = 48000000;
    84e6:	4b22      	ldr	r3, [pc, #136]	; (8570 <system_clock_init+0x108>)
    84e8:	6083      	str	r3, [r0, #8]
	config->reference_frequency = 32768;
	config->reference_divider   = 1;
    84ea:	8205      	strh	r5, [r0, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    84ec:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    84ee:	7484      	strb	r4, [r0, #18]
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    84f0:	7004      	strb	r4, [r0, #0]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    84f2:	2302      	movs	r3, #2
    84f4:	7503      	strb	r3, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    84f6:	4b1f      	ldr	r3, [pc, #124]	; (8574 <system_clock_init+0x10c>)
    84f8:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
    84fa:	4b1f      	ldr	r3, [pc, #124]	; (8578 <system_clock_init+0x110>)
    84fc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    84fe:	2008      	movs	r0, #8
    8500:	47b0      	blx	r6
		}
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    8502:	4812      	ldr	r0, [pc, #72]	; (854c <system_clock_init+0xe4>)
    8504:	2150      	movs	r1, #80	; 0x50
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    8506:	2203      	movs	r2, #3
		}
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    8508:	5c43      	ldrb	r3, [r0, r1]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;

	system_clock_source_dpll_set_config(&dpll_config);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    850a:	4013      	ands	r3, r2
    850c:	2b03      	cmp	r3, #3
    850e:	d1fb      	bne.n	8508 <system_clock_init+0xa0>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
    8510:	490e      	ldr	r1, [pc, #56]	; (854c <system_clock_init+0xe4>)
    8512:	2244      	movs	r2, #68	; 0x44
    8514:	5c8b      	ldrb	r3, [r1, r2]
    8516:	2080      	movs	r0, #128	; 0x80
    8518:	4240      	negs	r0, r0
    851a:	4303      	orrs	r3, r0
    851c:	548b      	strb	r3, [r1, r2]
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    851e:	4a17      	ldr	r2, [pc, #92]	; (857c <system_clock_init+0x114>)
    8520:	2300      	movs	r3, #0
    8522:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    8524:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    8526:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    8528:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    852a:	a901      	add	r1, sp, #4
    852c:	2201      	movs	r2, #1
    852e:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    8530:	704b      	strb	r3, [r1, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    8532:	3205      	adds	r2, #5
    8534:	700a      	strb	r2, [r1, #0]
#endif
	config->run_in_standby     = false;
    8536:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    8538:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    853a:	2000      	movs	r0, #0
    853c:	4b09      	ldr	r3, [pc, #36]	; (8564 <system_clock_init+0xfc>)
    853e:	4798      	blx	r3
    8540:	2000      	movs	r0, #0
    8542:	4b09      	ldr	r3, [pc, #36]	; (8568 <system_clock_init+0x100>)
    8544:	4798      	blx	r3
#endif
}
    8546:	b00c      	add	sp, #48	; 0x30
    8548:	bd70      	pop	{r4, r5, r6, pc}
    854a:	46c0      	nop			; (mov r8, r8)
    854c:	40000800 	.word	0x40000800
    8550:	41004000 	.word	0x41004000
    8554:	000087b9 	.word	0x000087b9
    8558:	000082dd 	.word	0x000082dd
    855c:	000083c1 	.word	0x000083c1
    8560:	00008581 	.word	0x00008581
    8564:	000085a5 	.word	0x000085a5
    8568:	0000865d 	.word	0x0000865d
    856c:	0000872d 	.word	0x0000872d
    8570:	02dc6c00 	.word	0x02dc6c00
    8574:	000f4240 	.word	0x000f4240
    8578:	00008319 	.word	0x00008319
    857c:	40000400 	.word	0x40000400

00008580 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    8580:	4a06      	ldr	r2, [pc, #24]	; (859c <system_gclk_init+0x1c>)
    8582:	6991      	ldr	r1, [r2, #24]
    8584:	2308      	movs	r3, #8
    8586:	430b      	orrs	r3, r1
    8588:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    858a:	2201      	movs	r2, #1
    858c:	4b04      	ldr	r3, [pc, #16]	; (85a0 <system_gclk_init+0x20>)
    858e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    8590:	0019      	movs	r1, r3
    8592:	780b      	ldrb	r3, [r1, #0]
    8594:	4213      	tst	r3, r2
    8596:	d1fc      	bne.n	8592 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    8598:	4770      	bx	lr
    859a:	46c0      	nop			; (mov r8, r8)
    859c:	40000400 	.word	0x40000400
    85a0:	40000c00 	.word	0x40000c00

000085a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    85a4:	b570      	push	{r4, r5, r6, lr}
    85a6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    85a8:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    85aa:	780c      	ldrb	r4, [r1, #0]
    85ac:	0224      	lsls	r4, r4, #8
    85ae:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    85b0:	784b      	ldrb	r3, [r1, #1]
    85b2:	2b00      	cmp	r3, #0
    85b4:	d002      	beq.n	85bc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    85b6:	2380      	movs	r3, #128	; 0x80
    85b8:	02db      	lsls	r3, r3, #11
    85ba:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    85bc:	7a4b      	ldrb	r3, [r1, #9]
    85be:	2b00      	cmp	r3, #0
    85c0:	d002      	beq.n	85c8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    85c2:	2380      	movs	r3, #128	; 0x80
    85c4:	031b      	lsls	r3, r3, #12
    85c6:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    85c8:	6848      	ldr	r0, [r1, #4]
    85ca:	2801      	cmp	r0, #1
    85cc:	d918      	bls.n	8600 <system_gclk_gen_set_config+0x5c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    85ce:	1e43      	subs	r3, r0, #1
    85d0:	4218      	tst	r0, r3
    85d2:	d110      	bne.n	85f6 <system_gclk_gen_set_config+0x52>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    85d4:	2802      	cmp	r0, #2
    85d6:	d906      	bls.n	85e6 <system_gclk_gen_set_config+0x42>
    85d8:	2302      	movs	r3, #2
    85da:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    85dc:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    85de:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    85e0:	4298      	cmp	r0, r3
    85e2:	d8fb      	bhi.n	85dc <system_gclk_gen_set_config+0x38>
    85e4:	e000      	b.n	85e8 <system_gclk_gen_set_config+0x44>
    85e6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    85e8:	0212      	lsls	r2, r2, #8
    85ea:	4332      	orrs	r2, r6
    85ec:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    85ee:	2380      	movs	r3, #128	; 0x80
    85f0:	035b      	lsls	r3, r3, #13
    85f2:	431c      	orrs	r4, r3
    85f4:	e004      	b.n	8600 <system_gclk_gen_set_config+0x5c>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    85f6:	0205      	lsls	r5, r0, #8
    85f8:	4335      	orrs	r5, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    85fa:	2380      	movs	r3, #128	; 0x80
    85fc:	029b      	lsls	r3, r3, #10
    85fe:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    8600:	7a0b      	ldrb	r3, [r1, #8]
    8602:	2b00      	cmp	r3, #0
    8604:	d002      	beq.n	860c <system_gclk_gen_set_config+0x68>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    8606:	2380      	movs	r3, #128	; 0x80
    8608:	039b      	lsls	r3, r3, #14
    860a:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    860c:	4a0f      	ldr	r2, [pc, #60]	; (864c <system_gclk_gen_set_config+0xa8>)
    860e:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    8610:	b25b      	sxtb	r3, r3
    8612:	2b00      	cmp	r3, #0
    8614:	dbfb      	blt.n	860e <system_gclk_gen_set_config+0x6a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    8616:	4b0e      	ldr	r3, [pc, #56]	; (8650 <system_gclk_gen_set_config+0xac>)
    8618:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    861a:	4b0e      	ldr	r3, [pc, #56]	; (8654 <system_gclk_gen_set_config+0xb0>)
    861c:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    861e:	4a0b      	ldr	r2, [pc, #44]	; (864c <system_gclk_gen_set_config+0xa8>)
    8620:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    8622:	b25b      	sxtb	r3, r3
    8624:	2b00      	cmp	r3, #0
    8626:	dbfb      	blt.n	8620 <system_gclk_gen_set_config+0x7c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    8628:	4b08      	ldr	r3, [pc, #32]	; (864c <system_gclk_gen_set_config+0xa8>)
    862a:	609d      	str	r5, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    862c:	001a      	movs	r2, r3
    862e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    8630:	b25b      	sxtb	r3, r3
    8632:	2b00      	cmp	r3, #0
    8634:	dbfb      	blt.n	862e <system_gclk_gen_set_config+0x8a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    8636:	4a05      	ldr	r2, [pc, #20]	; (864c <system_gclk_gen_set_config+0xa8>)
    8638:	6851      	ldr	r1, [r2, #4]
    863a:	2380      	movs	r3, #128	; 0x80
    863c:	025b      	lsls	r3, r3, #9
    863e:	400b      	ands	r3, r1
    8640:	431c      	orrs	r4, r3
    8642:	6054      	str	r4, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    8644:	4b04      	ldr	r3, [pc, #16]	; (8658 <system_gclk_gen_set_config+0xb4>)
    8646:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8648:	bd70      	pop	{r4, r5, r6, pc}
    864a:	46c0      	nop			; (mov r8, r8)
    864c:	40000c00 	.word	0x40000c00
    8650:	00008159 	.word	0x00008159
    8654:	40000c08 	.word	0x40000c08
    8658:	00008199 	.word	0x00008199

0000865c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    865c:	b510      	push	{r4, lr}
    865e:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8660:	4a0b      	ldr	r2, [pc, #44]	; (8690 <system_gclk_gen_enable+0x34>)
    8662:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    8664:	b25b      	sxtb	r3, r3
    8666:	2b00      	cmp	r3, #0
    8668:	dbfb      	blt.n	8662 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    866a:	4b0a      	ldr	r3, [pc, #40]	; (8694 <system_gclk_gen_enable+0x38>)
    866c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    866e:	4b0a      	ldr	r3, [pc, #40]	; (8698 <system_gclk_gen_enable+0x3c>)
    8670:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    8672:	4a07      	ldr	r2, [pc, #28]	; (8690 <system_gclk_gen_enable+0x34>)
    8674:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    8676:	b25b      	sxtb	r3, r3
    8678:	2b00      	cmp	r3, #0
    867a:	dbfb      	blt.n	8674 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    867c:	4a04      	ldr	r2, [pc, #16]	; (8690 <system_gclk_gen_enable+0x34>)
    867e:	6853      	ldr	r3, [r2, #4]
    8680:	2180      	movs	r1, #128	; 0x80
    8682:	0249      	lsls	r1, r1, #9
    8684:	430b      	orrs	r3, r1
    8686:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    8688:	4b04      	ldr	r3, [pc, #16]	; (869c <system_gclk_gen_enable+0x40>)
    868a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    868c:	bd10      	pop	{r4, pc}
    868e:	46c0      	nop			; (mov r8, r8)
    8690:	40000c00 	.word	0x40000c00
    8694:	00008159 	.word	0x00008159
    8698:	40000c04 	.word	0x40000c04
    869c:	00008199 	.word	0x00008199

000086a0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    86a0:	b570      	push	{r4, r5, r6, lr}
    86a2:	0004      	movs	r4, r0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    86a4:	4a1a      	ldr	r2, [pc, #104]	; (8710 <system_gclk_gen_get_hz+0x70>)
    86a6:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    86a8:	b25b      	sxtb	r3, r3
    86aa:	2b00      	cmp	r3, #0
    86ac:	dbfb      	blt.n	86a6 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    86ae:	4b19      	ldr	r3, [pc, #100]	; (8714 <system_gclk_gen_get_hz+0x74>)
    86b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    86b2:	4b19      	ldr	r3, [pc, #100]	; (8718 <system_gclk_gen_get_hz+0x78>)
    86b4:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    86b6:	4a16      	ldr	r2, [pc, #88]	; (8710 <system_gclk_gen_get_hz+0x70>)
    86b8:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    86ba:	b25b      	sxtb	r3, r3
    86bc:	2b00      	cmp	r3, #0
    86be:	dbfb      	blt.n	86b8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    86c0:	4e13      	ldr	r6, [pc, #76]	; (8710 <system_gclk_gen_get_hz+0x70>)
    86c2:	6870      	ldr	r0, [r6, #4]
    86c4:	04c0      	lsls	r0, r0, #19
    86c6:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    86c8:	4b14      	ldr	r3, [pc, #80]	; (871c <system_gclk_gen_get_hz+0x7c>)
    86ca:	4798      	blx	r3
    86cc:	0005      	movs	r5, r0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    86ce:	4b12      	ldr	r3, [pc, #72]	; (8718 <system_gclk_gen_get_hz+0x78>)
    86d0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    86d2:	6876      	ldr	r6, [r6, #4]
    86d4:	02f6      	lsls	r6, r6, #11
    86d6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    86d8:	4b11      	ldr	r3, [pc, #68]	; (8720 <system_gclk_gen_get_hz+0x80>)
    86da:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    86dc:	4a0c      	ldr	r2, [pc, #48]	; (8710 <system_gclk_gen_get_hz+0x70>)
    86de:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    86e0:	b25b      	sxtb	r3, r3
    86e2:	2b00      	cmp	r3, #0
    86e4:	dbfb      	blt.n	86de <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    86e6:	4b0a      	ldr	r3, [pc, #40]	; (8710 <system_gclk_gen_get_hz+0x70>)
    86e8:	689c      	ldr	r4, [r3, #8]
    86ea:	0224      	lsls	r4, r4, #8
    86ec:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    86ee:	4b0d      	ldr	r3, [pc, #52]	; (8724 <system_gclk_gen_get_hz+0x84>)
    86f0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    86f2:	2e00      	cmp	r6, #0
    86f4:	d107      	bne.n	8706 <system_gclk_gen_get_hz+0x66>
    86f6:	2c01      	cmp	r4, #1
    86f8:	d907      	bls.n	870a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    86fa:	0021      	movs	r1, r4
    86fc:	0028      	movs	r0, r5
    86fe:	4b0a      	ldr	r3, [pc, #40]	; (8728 <system_gclk_gen_get_hz+0x88>)
    8700:	4798      	blx	r3
    8702:	0005      	movs	r5, r0
    8704:	e001      	b.n	870a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    8706:	3401      	adds	r4, #1
    8708:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    870a:	0028      	movs	r0, r5
    870c:	bd70      	pop	{r4, r5, r6, pc}
    870e:	46c0      	nop			; (mov r8, r8)
    8710:	40000c00 	.word	0x40000c00
    8714:	00008159 	.word	0x00008159
    8718:	40000c04 	.word	0x40000c04
    871c:	0000824d 	.word	0x0000824d
    8720:	40000c08 	.word	0x40000c08
    8724:	00008199 	.word	0x00008199
    8728:	00008a7d 	.word	0x00008a7d

0000872c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    872c:	b510      	push	{r4, lr}
    872e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    8730:	4b06      	ldr	r3, [pc, #24]	; (874c <system_gclk_chan_enable+0x20>)
    8732:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8734:	4b06      	ldr	r3, [pc, #24]	; (8750 <system_gclk_chan_enable+0x24>)
    8736:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    8738:	4a06      	ldr	r2, [pc, #24]	; (8754 <system_gclk_chan_enable+0x28>)
    873a:	8851      	ldrh	r1, [r2, #2]
    873c:	2380      	movs	r3, #128	; 0x80
    873e:	01db      	lsls	r3, r3, #7
    8740:	430b      	orrs	r3, r1
    8742:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    8744:	4b04      	ldr	r3, [pc, #16]	; (8758 <system_gclk_chan_enable+0x2c>)
    8746:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    8748:	bd10      	pop	{r4, pc}
    874a:	46c0      	nop			; (mov r8, r8)
    874c:	00008159 	.word	0x00008159
    8750:	40000c02 	.word	0x40000c02
    8754:	40000c00 	.word	0x40000c00
    8758:	00008199 	.word	0x00008199

0000875c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    875c:	b510      	push	{r4, lr}
    875e:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    8760:	4b0f      	ldr	r3, [pc, #60]	; (87a0 <system_gclk_chan_disable+0x44>)
    8762:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    8764:	4b0f      	ldr	r3, [pc, #60]	; (87a4 <system_gclk_chan_disable+0x48>)
    8766:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    8768:	4b0f      	ldr	r3, [pc, #60]	; (87a8 <system_gclk_chan_disable+0x4c>)
    876a:	885a      	ldrh	r2, [r3, #2]
    876c:	0512      	lsls	r2, r2, #20
    876e:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    8770:	8859      	ldrh	r1, [r3, #2]
    8772:	4a0e      	ldr	r2, [pc, #56]	; (87ac <system_gclk_chan_disable+0x50>)
    8774:	400a      	ands	r2, r1
    8776:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    8778:	8859      	ldrh	r1, [r3, #2]
    877a:	4a0d      	ldr	r2, [pc, #52]	; (87b0 <system_gclk_chan_disable+0x54>)
    877c:	400a      	ands	r2, r1
    877e:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    8780:	0019      	movs	r1, r3
    8782:	2280      	movs	r2, #128	; 0x80
    8784:	01d2      	lsls	r2, r2, #7
    8786:	884b      	ldrh	r3, [r1, #2]
    8788:	4213      	tst	r3, r2
    878a:	d1fc      	bne.n	8786 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    878c:	4906      	ldr	r1, [pc, #24]	; (87a8 <system_gclk_chan_disable+0x4c>)
    878e:	884c      	ldrh	r4, [r1, #2]
    8790:	0202      	lsls	r2, r0, #8
    8792:	4b06      	ldr	r3, [pc, #24]	; (87ac <system_gclk_chan_disable+0x50>)
    8794:	4023      	ands	r3, r4
    8796:	4313      	orrs	r3, r2
    8798:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    879a:	4b06      	ldr	r3, [pc, #24]	; (87b4 <system_gclk_chan_disable+0x58>)
    879c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    879e:	bd10      	pop	{r4, pc}
    87a0:	00008159 	.word	0x00008159
    87a4:	40000c02 	.word	0x40000c02
    87a8:	40000c00 	.word	0x40000c00
    87ac:	fffff0ff 	.word	0xfffff0ff
    87b0:	ffffbfff 	.word	0xffffbfff
    87b4:	00008199 	.word	0x00008199

000087b8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    87b8:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    87ba:	780c      	ldrb	r4, [r1, #0]
    87bc:	0224      	lsls	r4, r4, #8
    87be:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    87c0:	4b02      	ldr	r3, [pc, #8]	; (87cc <system_gclk_chan_set_config+0x14>)
    87c2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    87c4:	b2a4      	uxth	r4, r4
    87c6:	4b02      	ldr	r3, [pc, #8]	; (87d0 <system_gclk_chan_set_config+0x18>)
    87c8:	805c      	strh	r4, [r3, #2]
}
    87ca:	bd10      	pop	{r4, pc}
    87cc:	0000875d 	.word	0x0000875d
    87d0:	40000c00 	.word	0x40000c00

000087d4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    87d4:	b510      	push	{r4, lr}
    87d6:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    87d8:	4b06      	ldr	r3, [pc, #24]	; (87f4 <system_gclk_chan_get_hz+0x20>)
    87da:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    87dc:	4b06      	ldr	r3, [pc, #24]	; (87f8 <system_gclk_chan_get_hz+0x24>)
    87de:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    87e0:	4b06      	ldr	r3, [pc, #24]	; (87fc <system_gclk_chan_get_hz+0x28>)
    87e2:	885c      	ldrh	r4, [r3, #2]
    87e4:	0524      	lsls	r4, r4, #20
    87e6:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    87e8:	4b05      	ldr	r3, [pc, #20]	; (8800 <system_gclk_chan_get_hz+0x2c>)
    87ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    87ec:	0020      	movs	r0, r4
    87ee:	4b05      	ldr	r3, [pc, #20]	; (8804 <system_gclk_chan_get_hz+0x30>)
    87f0:	4798      	blx	r3
}
    87f2:	bd10      	pop	{r4, pc}
    87f4:	00008159 	.word	0x00008159
    87f8:	40000c02 	.word	0x40000c02
    87fc:	40000c00 	.word	0x40000c00
    8800:	00008199 	.word	0x00008199
    8804:	000086a1 	.word	0x000086a1

00008808 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    8808:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    880a:	78d3      	ldrb	r3, [r2, #3]
    880c:	2b00      	cmp	r3, #0
    880e:	d11e      	bne.n	884e <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    8810:	7813      	ldrb	r3, [r2, #0]
    8812:	2b80      	cmp	r3, #128	; 0x80
    8814:	d004      	beq.n	8820 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    8816:	061b      	lsls	r3, r3, #24
    8818:	2480      	movs	r4, #128	; 0x80
    881a:	0264      	lsls	r4, r4, #9
    881c:	4323      	orrs	r3, r4
    881e:	e000      	b.n	8822 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    8820:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    8822:	7854      	ldrb	r4, [r2, #1]
    8824:	2502      	movs	r5, #2
    8826:	43ac      	bics	r4, r5
    8828:	d10a      	bne.n	8840 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    882a:	7894      	ldrb	r4, [r2, #2]
    882c:	2c00      	cmp	r4, #0
    882e:	d103      	bne.n	8838 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    8830:	2480      	movs	r4, #128	; 0x80
    8832:	02a4      	lsls	r4, r4, #10
    8834:	4323      	orrs	r3, r4
    8836:	e002      	b.n	883e <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8838:	24c0      	movs	r4, #192	; 0xc0
    883a:	02e4      	lsls	r4, r4, #11
    883c:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    883e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    8840:	7854      	ldrb	r4, [r2, #1]
    8842:	3c01      	subs	r4, #1
    8844:	2c01      	cmp	r4, #1
    8846:	d812      	bhi.n	886e <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    8848:	4c18      	ldr	r4, [pc, #96]	; (88ac <_system_pinmux_config+0xa4>)
    884a:	4023      	ands	r3, r4
    884c:	e00f      	b.n	886e <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    884e:	6041      	str	r1, [r0, #4]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8850:	040b      	lsls	r3, r1, #16
    8852:	0c1b      	lsrs	r3, r3, #16
    8854:	24a0      	movs	r4, #160	; 0xa0
    8856:	05e4      	lsls	r4, r4, #23
    8858:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    885a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    885c:	0c0b      	lsrs	r3, r1, #16
    885e:	24d0      	movs	r4, #208	; 0xd0
    8860:	0624      	lsls	r4, r4, #24
    8862:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8864:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8866:	78d3      	ldrb	r3, [r2, #3]
    8868:	2b00      	cmp	r3, #0
    886a:	d018      	beq.n	889e <_system_pinmux_config+0x96>
    886c:	e01c      	b.n	88a8 <_system_pinmux_config+0xa0>

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    886e:	040c      	lsls	r4, r1, #16
    8870:	0c24      	lsrs	r4, r4, #16
    8872:	25a0      	movs	r5, #160	; 0xa0
    8874:	05ed      	lsls	r5, r5, #23
    8876:	432c      	orrs	r4, r5
    8878:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    887a:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    887c:	0c0c      	lsrs	r4, r1, #16
    887e:	25d0      	movs	r5, #208	; 0xd0
    8880:	062d      	lsls	r5, r5, #24
    8882:	432c      	orrs	r4, r5
    8884:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8886:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    8888:	78d4      	ldrb	r4, [r2, #3]
    888a:	2c00      	cmp	r4, #0
    888c:	d10c      	bne.n	88a8 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    888e:	035b      	lsls	r3, r3, #13
    8890:	d505      	bpl.n	889e <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    8892:	7893      	ldrb	r3, [r2, #2]
    8894:	2b01      	cmp	r3, #1
    8896:	d101      	bne.n	889c <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    8898:	6181      	str	r1, [r0, #24]
    889a:	e000      	b.n	889e <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    889c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    889e:	7853      	ldrb	r3, [r2, #1]
    88a0:	3b01      	subs	r3, #1
    88a2:	2b01      	cmp	r3, #1
    88a4:	d800      	bhi.n	88a8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    88a6:	6081      	str	r1, [r0, #8]
		}
	}
}
    88a8:	bd30      	pop	{r4, r5, pc}
    88aa:	46c0      	nop			; (mov r8, r8)
    88ac:	fffbffff 	.word	0xfffbffff

000088b0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    88b0:	b510      	push	{r4, lr}
    88b2:	0003      	movs	r3, r0
    88b4:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    88b6:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    88b8:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    88ba:	2900      	cmp	r1, #0
    88bc:	d104      	bne.n	88c8 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    88be:	0958      	lsrs	r0, r3, #5
    88c0:	01c0      	lsls	r0, r0, #7
    88c2:	4905      	ldr	r1, [pc, #20]	; (88d8 <system_pinmux_pin_set_config+0x28>)
    88c4:	468c      	mov	ip, r1
    88c6:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));

	_system_pinmux_config(port, pin_mask, config);
    88c8:	211f      	movs	r1, #31
    88ca:	400b      	ands	r3, r1
    88cc:	391e      	subs	r1, #30
    88ce:	4099      	lsls	r1, r3
    88d0:	4b02      	ldr	r3, [pc, #8]	; (88dc <system_pinmux_pin_set_config+0x2c>)
    88d2:	4798      	blx	r3
}
    88d4:	bd10      	pop	{r4, pc}
    88d6:	46c0      	nop			; (mov r8, r8)
    88d8:	41004400 	.word	0x41004400
    88dc:	00008809 	.word	0x00008809

000088e0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    88e0:	4770      	bx	lr
    88e2:	46c0      	nop			; (mov r8, r8)

000088e4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    88e4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    88e6:	4b05      	ldr	r3, [pc, #20]	; (88fc <system_init+0x18>)
    88e8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    88ea:	4b05      	ldr	r3, [pc, #20]	; (8900 <system_init+0x1c>)
    88ec:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    88ee:	4b05      	ldr	r3, [pc, #20]	; (8904 <system_init+0x20>)
    88f0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    88f2:	4b05      	ldr	r3, [pc, #20]	; (8908 <system_init+0x24>)
    88f4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    88f6:	4b05      	ldr	r3, [pc, #20]	; (890c <system_init+0x28>)
    88f8:	4798      	blx	r3
}
    88fa:	bd10      	pop	{r4, pc}
    88fc:	00008469 	.word	0x00008469
    8900:	00008115 	.word	0x00008115
    8904:	000088e1 	.word	0x000088e1
    8908:	000088e1 	.word	0x000088e1
    890c:	000088e1 	.word	0x000088e1

00008910 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8910:	e7fe      	b.n	8910 <Dummy_Handler>
    8912:	46c0      	nop			; (mov r8, r8)

00008914 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    8914:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    8916:	4b2e      	ldr	r3, [pc, #184]	; (89d0 <Reset_Handler+0xbc>)
    8918:	4a2e      	ldr	r2, [pc, #184]	; (89d4 <Reset_Handler+0xc0>)
    891a:	429a      	cmp	r2, r3
    891c:	d003      	beq.n	8926 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    891e:	4b2e      	ldr	r3, [pc, #184]	; (89d8 <Reset_Handler+0xc4>)
    8920:	4a2b      	ldr	r2, [pc, #172]	; (89d0 <Reset_Handler+0xbc>)
    8922:	429a      	cmp	r2, r3
    8924:	d304      	bcc.n	8930 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    8926:	4b2d      	ldr	r3, [pc, #180]	; (89dc <Reset_Handler+0xc8>)
    8928:	4a2d      	ldr	r2, [pc, #180]	; (89e0 <Reset_Handler+0xcc>)
    892a:	429a      	cmp	r2, r3
    892c:	d310      	bcc.n	8950 <Reset_Handler+0x3c>
    892e:	e01e      	b.n	896e <Reset_Handler+0x5a>
    8930:	4a2c      	ldr	r2, [pc, #176]	; (89e4 <Reset_Handler+0xd0>)
    8932:	4b29      	ldr	r3, [pc, #164]	; (89d8 <Reset_Handler+0xc4>)
    8934:	3303      	adds	r3, #3
    8936:	1a9b      	subs	r3, r3, r2
    8938:	089b      	lsrs	r3, r3, #2
    893a:	3301      	adds	r3, #1
    893c:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    893e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8940:	4823      	ldr	r0, [pc, #140]	; (89d0 <Reset_Handler+0xbc>)
    8942:	4924      	ldr	r1, [pc, #144]	; (89d4 <Reset_Handler+0xc0>)
    8944:	588c      	ldr	r4, [r1, r2]
    8946:	5084      	str	r4, [r0, r2]
    8948:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    894a:	429a      	cmp	r2, r3
    894c:	d1fa      	bne.n	8944 <Reset_Handler+0x30>
    894e:	e7ea      	b.n	8926 <Reset_Handler+0x12>
    8950:	4a25      	ldr	r2, [pc, #148]	; (89e8 <Reset_Handler+0xd4>)
    8952:	4b22      	ldr	r3, [pc, #136]	; (89dc <Reset_Handler+0xc8>)
    8954:	3303      	adds	r3, #3
    8956:	1a9b      	subs	r3, r3, r2
    8958:	089b      	lsrs	r3, r3, #2
    895a:	3301      	adds	r3, #1
    895c:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    895e:	2200      	movs	r2, #0
                *pDest++ = 0;
    8960:	481f      	ldr	r0, [pc, #124]	; (89e0 <Reset_Handler+0xcc>)
    8962:	2100      	movs	r1, #0
    8964:	1814      	adds	r4, r2, r0
    8966:	6021      	str	r1, [r4, #0]
    8968:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    896a:	429a      	cmp	r2, r3
    896c:	d1fa      	bne.n	8964 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    896e:	4a1f      	ldr	r2, [pc, #124]	; (89ec <Reset_Handler+0xd8>)
    8970:	21ff      	movs	r1, #255	; 0xff
    8972:	4b1f      	ldr	r3, [pc, #124]	; (89f0 <Reset_Handler+0xdc>)
    8974:	438b      	bics	r3, r1
    8976:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    8978:	39fd      	subs	r1, #253	; 0xfd
    897a:	2390      	movs	r3, #144	; 0x90
    897c:	005b      	lsls	r3, r3, #1
    897e:	4a1d      	ldr	r2, [pc, #116]	; (89f4 <Reset_Handler+0xe0>)
    8980:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    8982:	481d      	ldr	r0, [pc, #116]	; (89f8 <Reset_Handler+0xe4>)
    8984:	78c3      	ldrb	r3, [r0, #3]
    8986:	2403      	movs	r4, #3
    8988:	43a3      	bics	r3, r4
    898a:	2202      	movs	r2, #2
    898c:	4313      	orrs	r3, r2
    898e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    8990:	78c3      	ldrb	r3, [r0, #3]
    8992:	260c      	movs	r6, #12
    8994:	43b3      	bics	r3, r6
    8996:	2108      	movs	r1, #8
    8998:	430b      	orrs	r3, r1
    899a:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    899c:	4b17      	ldr	r3, [pc, #92]	; (89fc <Reset_Handler+0xe8>)
    899e:	7b98      	ldrb	r0, [r3, #14]
    89a0:	2530      	movs	r5, #48	; 0x30
    89a2:	43a8      	bics	r0, r5
    89a4:	0005      	movs	r5, r0
    89a6:	2020      	movs	r0, #32
    89a8:	4328      	orrs	r0, r5
    89aa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    89ac:	7b98      	ldrb	r0, [r3, #14]
    89ae:	43b0      	bics	r0, r6
    89b0:	4301      	orrs	r1, r0
    89b2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    89b4:	7b99      	ldrb	r1, [r3, #14]
    89b6:	43a1      	bics	r1, r4
    89b8:	430a      	orrs	r2, r1
    89ba:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    89bc:	4a10      	ldr	r2, [pc, #64]	; (8a00 <Reset_Handler+0xec>)
    89be:	6851      	ldr	r1, [r2, #4]
    89c0:	2380      	movs	r3, #128	; 0x80
    89c2:	430b      	orrs	r3, r1
    89c4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    89c6:	4b0f      	ldr	r3, [pc, #60]	; (8a04 <Reset_Handler+0xf0>)
    89c8:	4798      	blx	r3

        /* Branch to main function */
        main();
    89ca:	4b0f      	ldr	r3, [pc, #60]	; (8a08 <Reset_Handler+0xf4>)
    89cc:	4798      	blx	r3
    89ce:	e7fe      	b.n	89ce <Reset_Handler+0xba>
    89d0:	20000000 	.word	0x20000000
    89d4:	00008c48 	.word	0x00008c48
    89d8:	2000000c 	.word	0x2000000c
    89dc:	20000060 	.word	0x20000060
    89e0:	2000000c 	.word	0x2000000c
    89e4:	20000004 	.word	0x20000004
    89e8:	20000010 	.word	0x20000010
    89ec:	e000ed00 	.word	0xe000ed00
    89f0:	00008000 	.word	0x00008000
    89f4:	41007000 	.word	0x41007000
    89f8:	41005000 	.word	0x41005000
    89fc:	41004800 	.word	0x41004800
    8a00:	41004000 	.word	0x41004000
    8a04:	00008b95 	.word	0x00008b95
    8a08:	00008a35 	.word	0x00008a35

00008a0c <configure_port_pins>:
	//write status bits to NVMEM

}

void configure_port_pins(void)
{
    8a0c:	b570      	push	{r4, r5, r6, lr}
    8a0e:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    8a10:	ac01      	add	r4, sp, #4
    8a12:	2301      	movs	r3, #1
    8a14:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    8a16:	2600      	movs	r6, #0
    8a18:	70a6      	strb	r6, [r4, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    8a1a:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    8a1c:	0021      	movs	r1, r4
    8a1e:	2017      	movs	r0, #23
    8a20:	4d03      	ldr	r5, [pc, #12]	; (8a30 <configure_port_pins+0x24>)
    8a22:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    8a24:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(B1, &config_port_pin);
    8a26:	0021      	movs	r1, r4
    8a28:	2037      	movs	r0, #55	; 0x37
    8a2a:	47a8      	blx	r5
}
    8a2c:	b002      	add	sp, #8
    8a2e:	bd70      	pop	{r4, r5, r6, pc}
    8a30:	000081c9 	.word	0x000081c9

00008a34 <main>:

int main (void)
{
    8a34:	b510      	push	{r4, lr}
	system_init();
    8a36:	4b0c      	ldr	r3, [pc, #48]	; (8a68 <main+0x34>)
    8a38:	4798      	blx	r3
	configure_port_pins();
    8a3a:	4b0c      	ldr	r3, [pc, #48]	; (8a6c <main+0x38>)
    8a3c:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    8a3e:	2201      	movs	r2, #1
    8a40:	4b0b      	ldr	r3, [pc, #44]	; (8a70 <main+0x3c>)
    8a42:	701a      	strb	r2, [r3, #0]
    8a44:	f3bf 8f5f 	dmb	sy
    8a48:	b662      	cpsie	i
	system_interrupt_enable_global();
	delay_init();
    8a4a:	4b0a      	ldr	r3, [pc, #40]	; (8a74 <main+0x40>)
    8a4c:	4798      	blx	r3
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
    8a4e:	490a      	ldr	r1, [pc, #40]	; (8a78 <main+0x44>)
    8a50:	0008      	movs	r0, r1
    8a52:	3080      	adds	r0, #128	; 0x80
//	configure_console();
//	printf("App started\n");
	while (1) {
		if (port_pin_get_input_level(B1) == false) {
    8a54:	2380      	movs	r3, #128	; 0x80
    8a56:	041b      	lsls	r3, r3, #16
    8a58:	6a02      	ldr	r2, [r0, #32]
    8a5a:	421a      	tst	r2, r3
    8a5c:	d101      	bne.n	8a62 <main+0x2e>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8a5e:	614b      	str	r3, [r1, #20]
    8a60:	e7fa      	b.n	8a58 <main+0x24>
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    8a62:	618b      	str	r3, [r1, #24]
    8a64:	e7f8      	b.n	8a58 <main+0x24>
    8a66:	46c0      	nop			; (mov r8, r8)
    8a68:	000088e5 	.word	0x000088e5
    8a6c:	00008a0d 	.word	0x00008a0d
    8a70:	20000008 	.word	0x20000008
    8a74:	00008119 	.word	0x00008119
    8a78:	41004400 	.word	0x41004400

00008a7c <__aeabi_uidiv>:
    8a7c:	2200      	movs	r2, #0
    8a7e:	0843      	lsrs	r3, r0, #1
    8a80:	428b      	cmp	r3, r1
    8a82:	d374      	bcc.n	8b6e <__aeabi_uidiv+0xf2>
    8a84:	0903      	lsrs	r3, r0, #4
    8a86:	428b      	cmp	r3, r1
    8a88:	d35f      	bcc.n	8b4a <__aeabi_uidiv+0xce>
    8a8a:	0a03      	lsrs	r3, r0, #8
    8a8c:	428b      	cmp	r3, r1
    8a8e:	d344      	bcc.n	8b1a <__aeabi_uidiv+0x9e>
    8a90:	0b03      	lsrs	r3, r0, #12
    8a92:	428b      	cmp	r3, r1
    8a94:	d328      	bcc.n	8ae8 <__aeabi_uidiv+0x6c>
    8a96:	0c03      	lsrs	r3, r0, #16
    8a98:	428b      	cmp	r3, r1
    8a9a:	d30d      	bcc.n	8ab8 <__aeabi_uidiv+0x3c>
    8a9c:	22ff      	movs	r2, #255	; 0xff
    8a9e:	0209      	lsls	r1, r1, #8
    8aa0:	ba12      	rev	r2, r2
    8aa2:	0c03      	lsrs	r3, r0, #16
    8aa4:	428b      	cmp	r3, r1
    8aa6:	d302      	bcc.n	8aae <__aeabi_uidiv+0x32>
    8aa8:	1212      	asrs	r2, r2, #8
    8aaa:	0209      	lsls	r1, r1, #8
    8aac:	d065      	beq.n	8b7a <__aeabi_uidiv+0xfe>
    8aae:	0b03      	lsrs	r3, r0, #12
    8ab0:	428b      	cmp	r3, r1
    8ab2:	d319      	bcc.n	8ae8 <__aeabi_uidiv+0x6c>
    8ab4:	e000      	b.n	8ab8 <__aeabi_uidiv+0x3c>
    8ab6:	0a09      	lsrs	r1, r1, #8
    8ab8:	0bc3      	lsrs	r3, r0, #15
    8aba:	428b      	cmp	r3, r1
    8abc:	d301      	bcc.n	8ac2 <__aeabi_uidiv+0x46>
    8abe:	03cb      	lsls	r3, r1, #15
    8ac0:	1ac0      	subs	r0, r0, r3
    8ac2:	4152      	adcs	r2, r2
    8ac4:	0b83      	lsrs	r3, r0, #14
    8ac6:	428b      	cmp	r3, r1
    8ac8:	d301      	bcc.n	8ace <__aeabi_uidiv+0x52>
    8aca:	038b      	lsls	r3, r1, #14
    8acc:	1ac0      	subs	r0, r0, r3
    8ace:	4152      	adcs	r2, r2
    8ad0:	0b43      	lsrs	r3, r0, #13
    8ad2:	428b      	cmp	r3, r1
    8ad4:	d301      	bcc.n	8ada <__aeabi_uidiv+0x5e>
    8ad6:	034b      	lsls	r3, r1, #13
    8ad8:	1ac0      	subs	r0, r0, r3
    8ada:	4152      	adcs	r2, r2
    8adc:	0b03      	lsrs	r3, r0, #12
    8ade:	428b      	cmp	r3, r1
    8ae0:	d301      	bcc.n	8ae6 <__aeabi_uidiv+0x6a>
    8ae2:	030b      	lsls	r3, r1, #12
    8ae4:	1ac0      	subs	r0, r0, r3
    8ae6:	4152      	adcs	r2, r2
    8ae8:	0ac3      	lsrs	r3, r0, #11
    8aea:	428b      	cmp	r3, r1
    8aec:	d301      	bcc.n	8af2 <__aeabi_uidiv+0x76>
    8aee:	02cb      	lsls	r3, r1, #11
    8af0:	1ac0      	subs	r0, r0, r3
    8af2:	4152      	adcs	r2, r2
    8af4:	0a83      	lsrs	r3, r0, #10
    8af6:	428b      	cmp	r3, r1
    8af8:	d301      	bcc.n	8afe <__aeabi_uidiv+0x82>
    8afa:	028b      	lsls	r3, r1, #10
    8afc:	1ac0      	subs	r0, r0, r3
    8afe:	4152      	adcs	r2, r2
    8b00:	0a43      	lsrs	r3, r0, #9
    8b02:	428b      	cmp	r3, r1
    8b04:	d301      	bcc.n	8b0a <__aeabi_uidiv+0x8e>
    8b06:	024b      	lsls	r3, r1, #9
    8b08:	1ac0      	subs	r0, r0, r3
    8b0a:	4152      	adcs	r2, r2
    8b0c:	0a03      	lsrs	r3, r0, #8
    8b0e:	428b      	cmp	r3, r1
    8b10:	d301      	bcc.n	8b16 <__aeabi_uidiv+0x9a>
    8b12:	020b      	lsls	r3, r1, #8
    8b14:	1ac0      	subs	r0, r0, r3
    8b16:	4152      	adcs	r2, r2
    8b18:	d2cd      	bcs.n	8ab6 <__aeabi_uidiv+0x3a>
    8b1a:	09c3      	lsrs	r3, r0, #7
    8b1c:	428b      	cmp	r3, r1
    8b1e:	d301      	bcc.n	8b24 <__aeabi_uidiv+0xa8>
    8b20:	01cb      	lsls	r3, r1, #7
    8b22:	1ac0      	subs	r0, r0, r3
    8b24:	4152      	adcs	r2, r2
    8b26:	0983      	lsrs	r3, r0, #6
    8b28:	428b      	cmp	r3, r1
    8b2a:	d301      	bcc.n	8b30 <__aeabi_uidiv+0xb4>
    8b2c:	018b      	lsls	r3, r1, #6
    8b2e:	1ac0      	subs	r0, r0, r3
    8b30:	4152      	adcs	r2, r2
    8b32:	0943      	lsrs	r3, r0, #5
    8b34:	428b      	cmp	r3, r1
    8b36:	d301      	bcc.n	8b3c <__aeabi_uidiv+0xc0>
    8b38:	014b      	lsls	r3, r1, #5
    8b3a:	1ac0      	subs	r0, r0, r3
    8b3c:	4152      	adcs	r2, r2
    8b3e:	0903      	lsrs	r3, r0, #4
    8b40:	428b      	cmp	r3, r1
    8b42:	d301      	bcc.n	8b48 <__aeabi_uidiv+0xcc>
    8b44:	010b      	lsls	r3, r1, #4
    8b46:	1ac0      	subs	r0, r0, r3
    8b48:	4152      	adcs	r2, r2
    8b4a:	08c3      	lsrs	r3, r0, #3
    8b4c:	428b      	cmp	r3, r1
    8b4e:	d301      	bcc.n	8b54 <__aeabi_uidiv+0xd8>
    8b50:	00cb      	lsls	r3, r1, #3
    8b52:	1ac0      	subs	r0, r0, r3
    8b54:	4152      	adcs	r2, r2
    8b56:	0883      	lsrs	r3, r0, #2
    8b58:	428b      	cmp	r3, r1
    8b5a:	d301      	bcc.n	8b60 <__aeabi_uidiv+0xe4>
    8b5c:	008b      	lsls	r3, r1, #2
    8b5e:	1ac0      	subs	r0, r0, r3
    8b60:	4152      	adcs	r2, r2
    8b62:	0843      	lsrs	r3, r0, #1
    8b64:	428b      	cmp	r3, r1
    8b66:	d301      	bcc.n	8b6c <__aeabi_uidiv+0xf0>
    8b68:	004b      	lsls	r3, r1, #1
    8b6a:	1ac0      	subs	r0, r0, r3
    8b6c:	4152      	adcs	r2, r2
    8b6e:	1a41      	subs	r1, r0, r1
    8b70:	d200      	bcs.n	8b74 <__aeabi_uidiv+0xf8>
    8b72:	4601      	mov	r1, r0
    8b74:	4152      	adcs	r2, r2
    8b76:	4610      	mov	r0, r2
    8b78:	4770      	bx	lr
    8b7a:	e7ff      	b.n	8b7c <__aeabi_uidiv+0x100>
    8b7c:	b501      	push	{r0, lr}
    8b7e:	2000      	movs	r0, #0
    8b80:	f000 f806 	bl	8b90 <__aeabi_idiv0>
    8b84:	bd02      	pop	{r1, pc}
    8b86:	46c0      	nop			; (mov r8, r8)

00008b88 <__aeabi_uidivmod>:
    8b88:	2900      	cmp	r1, #0
    8b8a:	d0f7      	beq.n	8b7c <__aeabi_uidiv+0x100>
    8b8c:	e776      	b.n	8a7c <__aeabi_uidiv>
    8b8e:	4770      	bx	lr

00008b90 <__aeabi_idiv0>:
    8b90:	4770      	bx	lr
    8b92:	46c0      	nop			; (mov r8, r8)

00008b94 <__libc_init_array>:
    8b94:	4b0e      	ldr	r3, [pc, #56]	; (8bd0 <__libc_init_array+0x3c>)
    8b96:	b570      	push	{r4, r5, r6, lr}
    8b98:	2500      	movs	r5, #0
    8b9a:	001e      	movs	r6, r3
    8b9c:	4c0d      	ldr	r4, [pc, #52]	; (8bd4 <__libc_init_array+0x40>)
    8b9e:	1ae4      	subs	r4, r4, r3
    8ba0:	10a4      	asrs	r4, r4, #2
    8ba2:	42a5      	cmp	r5, r4
    8ba4:	d004      	beq.n	8bb0 <__libc_init_array+0x1c>
    8ba6:	00ab      	lsls	r3, r5, #2
    8ba8:	58f3      	ldr	r3, [r6, r3]
    8baa:	4798      	blx	r3
    8bac:	3501      	adds	r5, #1
    8bae:	e7f8      	b.n	8ba2 <__libc_init_array+0xe>
    8bb0:	f000 f83a 	bl	8c28 <_init>
    8bb4:	4b08      	ldr	r3, [pc, #32]	; (8bd8 <__libc_init_array+0x44>)
    8bb6:	2500      	movs	r5, #0
    8bb8:	001e      	movs	r6, r3
    8bba:	4c08      	ldr	r4, [pc, #32]	; (8bdc <__libc_init_array+0x48>)
    8bbc:	1ae4      	subs	r4, r4, r3
    8bbe:	10a4      	asrs	r4, r4, #2
    8bc0:	42a5      	cmp	r5, r4
    8bc2:	d004      	beq.n	8bce <__libc_init_array+0x3a>
    8bc4:	00ab      	lsls	r3, r5, #2
    8bc6:	58f3      	ldr	r3, [r6, r3]
    8bc8:	4798      	blx	r3
    8bca:	3501      	adds	r5, #1
    8bcc:	e7f8      	b.n	8bc0 <__libc_init_array+0x2c>
    8bce:	bd70      	pop	{r4, r5, r6, pc}
    8bd0:	00008c34 	.word	0x00008c34
    8bd4:	00008c34 	.word	0x00008c34
    8bd8:	00008c34 	.word	0x00008c34
    8bdc:	00008c38 	.word	0x00008c38
    8be0:	0000825e 	.word	0x0000825e
    8be4:	0000825a 	.word	0x0000825a
    8be8:	0000825a 	.word	0x0000825a
    8bec:	000082b8 	.word	0x000082b8
    8bf0:	000082b8 	.word	0x000082b8
    8bf4:	00008272 	.word	0x00008272
    8bf8:	00008264 	.word	0x00008264
    8bfc:	00008278 	.word	0x00008278
    8c00:	000082a6 	.word	0x000082a6
    8c04:	000083ec 	.word	0x000083ec
    8c08:	000083cc 	.word	0x000083cc
    8c0c:	000083cc 	.word	0x000083cc
    8c10:	00008458 	.word	0x00008458
    8c14:	000083de 	.word	0x000083de
    8c18:	000083fa 	.word	0x000083fa
    8c1c:	000083d0 	.word	0x000083d0
    8c20:	00008408 	.word	0x00008408
    8c24:	00008448 	.word	0x00008448

00008c28 <_init>:
    8c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c2a:	46c0      	nop			; (mov r8, r8)
    8c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8c2e:	bc08      	pop	{r3}
    8c30:	469e      	mov	lr, r3
    8c32:	4770      	bx	lr

00008c34 <__init_array_start>:
    8c34:	000080dd 	.word	0x000080dd

00008c38 <_fini>:
    8c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c3a:	46c0      	nop			; (mov r8, r8)
    8c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8c3e:	bc08      	pop	{r3}
    8c40:	469e      	mov	lr, r3
    8c42:	4770      	bx	lr

00008c44 <__fini_array_start>:
    8c44:	000080b5 	.word	0x000080b5
