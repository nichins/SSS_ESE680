
ESE680A_ApplicationCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011e10  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000084  20000000  00019e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000d20  20000084  00019e94  00020084  2**2
                  ALLOC
  3 .stack        00002004  20000da4  0001abb4  00020084  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004baab  00000000  00000000  00020105  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005fe2  00000000  00000000  0006bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007cfa  00000000  00000000  00071b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001618  00000000  00000000  0007988c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001448  00000000  00000000  0007aea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000238c0  00000000  00000000  0007c2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002146a  00000000  00000000  0009fbac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00094f37  00000000  00000000  000c1016  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000056bc  00000000  00000000  00155f50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <_sfixed>:
    8000:	20002da8 	.word	0x20002da8
    8004:	00010c05 	.word	0x00010c05
    8008:	00010cfd 	.word	0x00010cfd
    800c:	00010cfd 	.word	0x00010cfd
	...
    802c:	00010cfd 	.word	0x00010cfd
	...
    8038:	00010cfd 	.word	0x00010cfd
    803c:	00010cfd 	.word	0x00010cfd
    8040:	00010cfd 	.word	0x00010cfd
    8044:	00010cfd 	.word	0x00010cfd
    8048:	00010cfd 	.word	0x00010cfd
    804c:	0000e25d 	.word	0x0000e25d
    8050:	0000dd71 	.word	0x0000dd71
    8054:	00010cfd 	.word	0x00010cfd
    8058:	00010cfd 	.word	0x00010cfd
    805c:	00010cfd 	.word	0x00010cfd
    8060:	00010cfd 	.word	0x00010cfd
    8064:	000127d5 	.word	0x000127d5
    8068:	000127ed 	.word	0x000127ed
    806c:	00012805 	.word	0x00012805
    8070:	0001281d 	.word	0x0001281d
    8074:	00012835 	.word	0x00012835
    8078:	0001284d 	.word	0x0001284d
    807c:	0000ee61 	.word	0x0000ee61
    8080:	0000ee75 	.word	0x0000ee75
    8084:	0000ee89 	.word	0x0000ee89
    8088:	00010cfd 	.word	0x00010cfd
    808c:	00010cfd 	.word	0x00010cfd
    8090:	00010cfd 	.word	0x00010cfd
	...
    809c:	00010cfd 	.word	0x00010cfd
    80a0:	00010cfd 	.word	0x00010cfd
    80a4:	00010cfd 	.word	0x00010cfd
    80a8:	00010cfd 	.word	0x00010cfd
    80ac:	00010cfd 	.word	0x00010cfd
    80b0:	00000000 	.word	0x00000000

000080b4 <__do_global_dtors_aux>:
    80b4:	b510      	push	{r4, lr}
    80b6:	4c06      	ldr	r4, [pc, #24]	; (80d0 <__do_global_dtors_aux+0x1c>)
    80b8:	7823      	ldrb	r3, [r4, #0]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d107      	bne.n	80ce <__do_global_dtors_aux+0x1a>
    80be:	4b05      	ldr	r3, [pc, #20]	; (80d4 <__do_global_dtors_aux+0x20>)
    80c0:	2b00      	cmp	r3, #0
    80c2:	d002      	beq.n	80ca <__do_global_dtors_aux+0x16>
    80c4:	4804      	ldr	r0, [pc, #16]	; (80d8 <__do_global_dtors_aux+0x24>)
    80c6:	e000      	b.n	80ca <__do_global_dtors_aux+0x16>
    80c8:	bf00      	nop
    80ca:	2301      	movs	r3, #1
    80cc:	7023      	strb	r3, [r4, #0]
    80ce:	bd10      	pop	{r4, pc}
    80d0:	20000084 	.word	0x20000084
    80d4:	00000000 	.word	0x00000000
    80d8:	00019e10 	.word	0x00019e10

000080dc <frame_dummy>:
    80dc:	4b08      	ldr	r3, [pc, #32]	; (8100 <frame_dummy+0x24>)
    80de:	b510      	push	{r4, lr}
    80e0:	2b00      	cmp	r3, #0
    80e2:	d003      	beq.n	80ec <frame_dummy+0x10>
    80e4:	4907      	ldr	r1, [pc, #28]	; (8104 <frame_dummy+0x28>)
    80e6:	4808      	ldr	r0, [pc, #32]	; (8108 <frame_dummy+0x2c>)
    80e8:	e000      	b.n	80ec <frame_dummy+0x10>
    80ea:	bf00      	nop
    80ec:	4807      	ldr	r0, [pc, #28]	; (810c <frame_dummy+0x30>)
    80ee:	6803      	ldr	r3, [r0, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d100      	bne.n	80f6 <frame_dummy+0x1a>
    80f4:	bd10      	pop	{r4, pc}
    80f6:	4b06      	ldr	r3, [pc, #24]	; (8110 <frame_dummy+0x34>)
    80f8:	2b00      	cmp	r3, #0
    80fa:	d0fb      	beq.n	80f4 <frame_dummy+0x18>
    80fc:	4798      	blx	r3
    80fe:	e7f9      	b.n	80f4 <frame_dummy+0x18>
    8100:	00000000 	.word	0x00000000
    8104:	20000088 	.word	0x20000088
    8108:	00019e10 	.word	0x00019e10
    810c:	00019e10 	.word	0x00019e10
    8110:	00000000 	.word	0x00000000

00008114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8114:	b580      	push	{r7, lr}
    8116:	b084      	sub	sp, #16
    8118:	af00      	add	r7, sp, #0
    811a:	0002      	movs	r2, r0
    811c:	1dfb      	adds	r3, r7, #7
    811e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8120:	230f      	movs	r3, #15
    8122:	18fb      	adds	r3, r7, r3
    8124:	1dfa      	adds	r2, r7, #7
    8126:	7812      	ldrb	r2, [r2, #0]
    8128:	09d2      	lsrs	r2, r2, #7
    812a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    812c:	230e      	movs	r3, #14
    812e:	18fb      	adds	r3, r7, r3
    8130:	1dfa      	adds	r2, r7, #7
    8132:	7812      	ldrb	r2, [r2, #0]
    8134:	0952      	lsrs	r2, r2, #5
    8136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8138:	4b0d      	ldr	r3, [pc, #52]	; (8170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    813a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    813c:	230f      	movs	r3, #15
    813e:	18fb      	adds	r3, r7, r3
    8140:	781b      	ldrb	r3, [r3, #0]
    8142:	2b00      	cmp	r3, #0
    8144:	d10f      	bne.n	8166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8146:	230f      	movs	r3, #15
    8148:	18fb      	adds	r3, r7, r3
    814a:	781b      	ldrb	r3, [r3, #0]
    814c:	009b      	lsls	r3, r3, #2
    814e:	2210      	movs	r2, #16
    8150:	4694      	mov	ip, r2
    8152:	44bc      	add	ip, r7
    8154:	4463      	add	r3, ip
    8156:	3b08      	subs	r3, #8
    8158:	681a      	ldr	r2, [r3, #0]
    815a:	230e      	movs	r3, #14
    815c:	18fb      	adds	r3, r7, r3
    815e:	781b      	ldrb	r3, [r3, #0]
    8160:	01db      	lsls	r3, r3, #7
    8162:	18d3      	adds	r3, r2, r3
    8164:	e000      	b.n	8168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    8166:	2300      	movs	r3, #0
	}
}
    8168:	0018      	movs	r0, r3
    816a:	46bd      	mov	sp, r7
    816c:	b004      	add	sp, #16
    816e:	bd80      	pop	{r7, pc}
    8170:	41004400 	.word	0x41004400

00008174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8174:	b580      	push	{r7, lr}
    8176:	b082      	sub	sp, #8
    8178:	af00      	add	r7, sp, #0
    817a:	0002      	movs	r2, r0
    817c:	1dfb      	adds	r3, r7, #7
    817e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8180:	1dfb      	adds	r3, r7, #7
    8182:	781b      	ldrb	r3, [r3, #0]
    8184:	0018      	movs	r0, r3
    8186:	4b03      	ldr	r3, [pc, #12]	; (8194 <port_get_group_from_gpio_pin+0x20>)
    8188:	4798      	blx	r3
    818a:	0003      	movs	r3, r0
}
    818c:	0018      	movs	r0, r3
    818e:	46bd      	mov	sp, r7
    8190:	b002      	add	sp, #8
    8192:	bd80      	pop	{r7, pc}
    8194:	00008115 	.word	0x00008115

00008198 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    8198:	b580      	push	{r7, lr}
    819a:	b082      	sub	sp, #8
    819c:	af00      	add	r7, sp, #0
    819e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    81a0:	687b      	ldr	r3, [r7, #4]
    81a2:	2200      	movs	r2, #0
    81a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    81a6:	687b      	ldr	r3, [r7, #4]
    81a8:	2201      	movs	r2, #1
    81aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    81ac:	687b      	ldr	r3, [r7, #4]
    81ae:	2200      	movs	r2, #0
    81b0:	709a      	strb	r2, [r3, #2]
}
    81b2:	46c0      	nop			; (mov r8, r8)
    81b4:	46bd      	mov	sp, r7
    81b6:	b002      	add	sp, #8
    81b8:	bd80      	pop	{r7, pc}
    81ba:	46c0      	nop			; (mov r8, r8)

000081bc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    81bc:	b580      	push	{r7, lr}
    81be:	b084      	sub	sp, #16
    81c0:	af00      	add	r7, sp, #0
    81c2:	0002      	movs	r2, r0
    81c4:	1dfb      	adds	r3, r7, #7
    81c6:	701a      	strb	r2, [r3, #0]
    81c8:	1dbb      	adds	r3, r7, #6
    81ca:	1c0a      	adds	r2, r1, #0
    81cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    81ce:	1dfb      	adds	r3, r7, #7
    81d0:	781b      	ldrb	r3, [r3, #0]
    81d2:	0018      	movs	r0, r3
    81d4:	4b0d      	ldr	r3, [pc, #52]	; (820c <port_pin_set_output_level+0x50>)
    81d6:	4798      	blx	r3
    81d8:	0003      	movs	r3, r0
    81da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    81dc:	1dfb      	adds	r3, r7, #7
    81de:	781b      	ldrb	r3, [r3, #0]
    81e0:	221f      	movs	r2, #31
    81e2:	4013      	ands	r3, r2
    81e4:	2201      	movs	r2, #1
    81e6:	409a      	lsls	r2, r3
    81e8:	0013      	movs	r3, r2
    81ea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    81ec:	1dbb      	adds	r3, r7, #6
    81ee:	781b      	ldrb	r3, [r3, #0]
    81f0:	2b00      	cmp	r3, #0
    81f2:	d003      	beq.n	81fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    81f4:	68fb      	ldr	r3, [r7, #12]
    81f6:	68ba      	ldr	r2, [r7, #8]
    81f8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    81fa:	e002      	b.n	8202 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    81fc:	68fb      	ldr	r3, [r7, #12]
    81fe:	68ba      	ldr	r2, [r7, #8]
    8200:	615a      	str	r2, [r3, #20]
	}
}
    8202:	46c0      	nop			; (mov r8, r8)
    8204:	46bd      	mov	sp, r7
    8206:	b004      	add	sp, #16
    8208:	bd80      	pop	{r7, pc}
    820a:	46c0      	nop			; (mov r8, r8)
    820c:	00008175 	.word	0x00008175

00008210 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    8210:	b580      	push	{r7, lr}
    8212:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    8214:	4b04      	ldr	r3, [pc, #16]	; (8228 <system_interrupt_enable_global+0x18>)
    8216:	2201      	movs	r2, #1
    8218:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    821a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    821e:	b662      	cpsie	i
}
    8220:	46c0      	nop			; (mov r8, r8)
    8222:	46bd      	mov	sp, r7
    8224:	bd80      	pop	{r7, pc}
    8226:	46c0      	nop			; (mov r8, r8)
    8228:	2000000c 	.word	0x2000000c

0000822c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    822c:	b580      	push	{r7, lr}
    822e:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    8230:	4b04      	ldr	r3, [pc, #16]	; (8244 <chip_isr+0x18>)
    8232:	681b      	ldr	r3, [r3, #0]
    8234:	2b00      	cmp	r3, #0
    8236:	d002      	beq.n	823e <chip_isr+0x12>
		gpfIsr();
    8238:	4b02      	ldr	r3, [pc, #8]	; (8244 <chip_isr+0x18>)
    823a:	681b      	ldr	r3, [r3, #0]
    823c:	4798      	blx	r3
	}
}
    823e:	46c0      	nop			; (mov r8, r8)
    8240:	46bd      	mov	sp, r7
    8242:	bd80      	pop	{r7, pc}
    8244:	200000a0 	.word	0x200000a0

00008248 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    8248:	b580      	push	{r7, lr}
    824a:	b082      	sub	sp, #8
    824c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    824e:	1d3b      	adds	r3, r7, #4
    8250:	0018      	movs	r0, r3
    8252:	4b10      	ldr	r3, [pc, #64]	; (8294 <init_chip_pins+0x4c>)
    8254:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8256:	1d3b      	adds	r3, r7, #4
    8258:	2201      	movs	r2, #1
    825a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    825c:	1d3b      	adds	r3, r7, #4
    825e:	0019      	movs	r1, r3
    8260:	201b      	movs	r0, #27
    8262:	4b0d      	ldr	r3, [pc, #52]	; (8298 <init_chip_pins+0x50>)
    8264:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    8266:	1d3b      	adds	r3, r7, #4
    8268:	0019      	movs	r1, r3
    826a:	201c      	movs	r0, #28
    826c:	4b0a      	ldr	r3, [pc, #40]	; (8298 <init_chip_pins+0x50>)
    826e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    8270:	1d3b      	adds	r3, r7, #4
    8272:	0019      	movs	r1, r3
    8274:	2028      	movs	r0, #40	; 0x28
    8276:	4b08      	ldr	r3, [pc, #32]	; (8298 <init_chip_pins+0x50>)
    8278:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    827a:	2100      	movs	r1, #0
    827c:	201c      	movs	r0, #28
    827e:	4b07      	ldr	r3, [pc, #28]	; (829c <init_chip_pins+0x54>)
    8280:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    8282:	2100      	movs	r1, #0
    8284:	201b      	movs	r0, #27
    8286:	4b05      	ldr	r3, [pc, #20]	; (829c <init_chip_pins+0x54>)
    8288:	4798      	blx	r3
}
    828a:	46c0      	nop			; (mov r8, r8)
    828c:	46bd      	mov	sp, r7
    828e:	b002      	add	sp, #8
    8290:	bd80      	pop	{r7, pc}
    8292:	46c0      	nop			; (mov r8, r8)
    8294:	00008199 	.word	0x00008199
    8298:	000120dd 	.word	0x000120dd
    829c:	000081bd 	.word	0x000081bd

000082a0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    82a0:	b580      	push	{r7, lr}
    82a2:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    82a4:	4b0c      	ldr	r3, [pc, #48]	; (82d8 <nm_bsp_init+0x38>)
    82a6:	2200      	movs	r2, #0
    82a8:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    82aa:	4b0c      	ldr	r3, [pc, #48]	; (82dc <nm_bsp_init+0x3c>)
    82ac:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    82ae:	4b0c      	ldr	r3, [pc, #48]	; (82e0 <nm_bsp_init+0x40>)
    82b0:	681b      	ldr	r3, [r3, #0]
    82b2:	2201      	movs	r2, #1
    82b4:	4013      	ands	r3, r2
    82b6:	d004      	beq.n	82c2 <nm_bsp_init+0x22>
    82b8:	4b09      	ldr	r3, [pc, #36]	; (82e0 <nm_bsp_init+0x40>)
    82ba:	681b      	ldr	r3, [r3, #0]
    82bc:	2202      	movs	r2, #2
    82be:	4013      	ands	r3, r2
    82c0:	d101      	bne.n	82c6 <nm_bsp_init+0x26>
	    delay_init();
    82c2:	4b08      	ldr	r3, [pc, #32]	; (82e4 <nm_bsp_init+0x44>)
    82c4:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    82c6:	4b08      	ldr	r3, [pc, #32]	; (82e8 <nm_bsp_init+0x48>)
    82c8:	4798      	blx	r3

	system_interrupt_enable_global();
    82ca:	4b08      	ldr	r3, [pc, #32]	; (82ec <nm_bsp_init+0x4c>)
    82cc:	4798      	blx	r3

	return M2M_SUCCESS;
    82ce:	2300      	movs	r3, #0
}
    82d0:	0018      	movs	r0, r3
    82d2:	46bd      	mov	sp, r7
    82d4:	bd80      	pop	{r7, pc}
    82d6:	46c0      	nop			; (mov r8, r8)
    82d8:	200000a0 	.word	0x200000a0
    82dc:	00008249 	.word	0x00008249
    82e0:	e000e010 	.word	0xe000e010
    82e4:	00011ac9 	.word	0x00011ac9
    82e8:	000082f1 	.word	0x000082f1
    82ec:	00008211 	.word	0x00008211

000082f0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    82f0:	b580      	push	{r7, lr}
    82f2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    82f4:	2100      	movs	r1, #0
    82f6:	201c      	movs	r0, #28
    82f8:	4b0c      	ldr	r3, [pc, #48]	; (832c <nm_bsp_reset+0x3c>)
    82fa:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    82fc:	2100      	movs	r1, #0
    82fe:	201b      	movs	r0, #27
    8300:	4b0a      	ldr	r3, [pc, #40]	; (832c <nm_bsp_reset+0x3c>)
    8302:	4798      	blx	r3
	nm_bsp_sleep(100);
    8304:	2064      	movs	r0, #100	; 0x64
    8306:	4b0a      	ldr	r3, [pc, #40]	; (8330 <nm_bsp_reset+0x40>)
    8308:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    830a:	2101      	movs	r1, #1
    830c:	201c      	movs	r0, #28
    830e:	4b07      	ldr	r3, [pc, #28]	; (832c <nm_bsp_reset+0x3c>)
    8310:	4798      	blx	r3
	nm_bsp_sleep(100);
    8312:	2064      	movs	r0, #100	; 0x64
    8314:	4b06      	ldr	r3, [pc, #24]	; (8330 <nm_bsp_reset+0x40>)
    8316:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    8318:	2101      	movs	r1, #1
    831a:	201b      	movs	r0, #27
    831c:	4b03      	ldr	r3, [pc, #12]	; (832c <nm_bsp_reset+0x3c>)
    831e:	4798      	blx	r3
	nm_bsp_sleep(100);
    8320:	2064      	movs	r0, #100	; 0x64
    8322:	4b03      	ldr	r3, [pc, #12]	; (8330 <nm_bsp_reset+0x40>)
    8324:	4798      	blx	r3
}
    8326:	46c0      	nop			; (mov r8, r8)
    8328:	46bd      	mov	sp, r7
    832a:	bd80      	pop	{r7, pc}
    832c:	000081bd 	.word	0x000081bd
    8330:	00008335 	.word	0x00008335

00008334 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    8334:	b580      	push	{r7, lr}
    8336:	b082      	sub	sp, #8
    8338:	af00      	add	r7, sp, #0
    833a:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    833c:	e002      	b.n	8344 <nm_bsp_sleep+0x10>
		delay_ms(1);
    833e:	2001      	movs	r0, #1
    8340:	4b05      	ldr	r3, [pc, #20]	; (8358 <nm_bsp_sleep+0x24>)
    8342:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    8344:	687b      	ldr	r3, [r7, #4]
    8346:	1e5a      	subs	r2, r3, #1
    8348:	607a      	str	r2, [r7, #4]
    834a:	2b00      	cmp	r3, #0
    834c:	d1f7      	bne.n	833e <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
    834e:	46c0      	nop			; (mov r8, r8)
    8350:	46bd      	mov	sp, r7
    8352:	b002      	add	sp, #8
    8354:	bd80      	pop	{r7, pc}
    8356:	46c0      	nop			; (mov r8, r8)
    8358:	00011b21 	.word	0x00011b21

0000835c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    835c:	b580      	push	{r7, lr}
    835e:	b086      	sub	sp, #24
    8360:	af00      	add	r7, sp, #0
    8362:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    8364:	4b15      	ldr	r3, [pc, #84]	; (83bc <nm_bsp_register_isr+0x60>)
    8366:	687a      	ldr	r2, [r7, #4]
    8368:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    836a:	230c      	movs	r3, #12
    836c:	18fb      	adds	r3, r7, r3
    836e:	0018      	movs	r0, r3
    8370:	4b13      	ldr	r3, [pc, #76]	; (83c0 <nm_bsp_register_isr+0x64>)
    8372:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    8374:	230c      	movs	r3, #12
    8376:	18fb      	adds	r3, r7, r3
    8378:	2229      	movs	r2, #41	; 0x29
    837a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    837c:	230c      	movs	r3, #12
    837e:	18fb      	adds	r3, r7, r3
    8380:	2200      	movs	r2, #0
    8382:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    8384:	230c      	movs	r3, #12
    8386:	18fb      	adds	r3, r7, r3
    8388:	2201      	movs	r2, #1
    838a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    838c:	230c      	movs	r3, #12
    838e:	18fb      	adds	r3, r7, r3
    8390:	2202      	movs	r2, #2
    8392:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    8394:	230c      	movs	r3, #12
    8396:	18fb      	adds	r3, r7, r3
    8398:	0019      	movs	r1, r3
    839a:	2009      	movs	r0, #9
    839c:	4b09      	ldr	r3, [pc, #36]	; (83c4 <nm_bsp_register_isr+0x68>)
    839e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <nm_bsp_register_isr+0x6c>)
    83a2:	2200      	movs	r2, #0
    83a4:	2109      	movs	r1, #9
    83a6:	0018      	movs	r0, r3
    83a8:	4b08      	ldr	r3, [pc, #32]	; (83cc <nm_bsp_register_isr+0x70>)
    83aa:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    83ac:	2100      	movs	r1, #0
    83ae:	2009      	movs	r0, #9
    83b0:	4b07      	ldr	r3, [pc, #28]	; (83d0 <nm_bsp_register_isr+0x74>)
    83b2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    83b4:	46c0      	nop			; (mov r8, r8)
    83b6:	46bd      	mov	sp, r7
    83b8:	b006      	add	sp, #24
    83ba:	bd80      	pop	{r7, pc}
    83bc:	200000a0 	.word	0x200000a0
    83c0:	0000e07d 	.word	0x0000e07d
    83c4:	0000e0b1 	.word	0x0000e0b1
    83c8:	0000822d 	.word	0x0000822d
    83cc:	0000dc7d 	.word	0x0000dc7d
    83d0:	0000dce1 	.word	0x0000dce1

000083d4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    83d4:	b580      	push	{r7, lr}
    83d6:	b082      	sub	sp, #8
    83d8:	af00      	add	r7, sp, #0
    83da:	0002      	movs	r2, r0
    83dc:	1dfb      	adds	r3, r7, #7
    83de:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    83e0:	1dfb      	adds	r3, r7, #7
    83e2:	781b      	ldrb	r3, [r3, #0]
    83e4:	2b00      	cmp	r3, #0
    83e6:	d004      	beq.n	83f2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    83e8:	2100      	movs	r1, #0
    83ea:	2009      	movs	r0, #9
    83ec:	4b05      	ldr	r3, [pc, #20]	; (8404 <nm_bsp_interrupt_ctrl+0x30>)
    83ee:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    83f0:	e003      	b.n	83fa <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    83f2:	2100      	movs	r1, #0
    83f4:	2009      	movs	r0, #9
    83f6:	4b04      	ldr	r3, [pc, #16]	; (8408 <nm_bsp_interrupt_ctrl+0x34>)
    83f8:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    83fa:	46c0      	nop			; (mov r8, r8)
    83fc:	46bd      	mov	sp, r7
    83fe:	b002      	add	sp, #8
    8400:	bd80      	pop	{r7, pc}
    8402:	46c0      	nop			; (mov r8, r8)
    8404:	0000dce1 	.word	0x0000dce1
    8408:	0000dd29 	.word	0x0000dd29

0000840c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    840c:	b580      	push	{r7, lr}
    840e:	b084      	sub	sp, #16
    8410:	af00      	add	r7, sp, #0
    8412:	0002      	movs	r2, r0
    8414:	1dfb      	adds	r3, r7, #7
    8416:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8418:	230f      	movs	r3, #15
    841a:	18fb      	adds	r3, r7, r3
    841c:	1dfa      	adds	r2, r7, #7
    841e:	7812      	ldrb	r2, [r2, #0]
    8420:	09d2      	lsrs	r2, r2, #7
    8422:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8424:	230e      	movs	r3, #14
    8426:	18fb      	adds	r3, r7, r3
    8428:	1dfa      	adds	r2, r7, #7
    842a:	7812      	ldrb	r2, [r2, #0]
    842c:	0952      	lsrs	r2, r2, #5
    842e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8430:	4b0d      	ldr	r3, [pc, #52]	; (8468 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8432:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8434:	230f      	movs	r3, #15
    8436:	18fb      	adds	r3, r7, r3
    8438:	781b      	ldrb	r3, [r3, #0]
    843a:	2b00      	cmp	r3, #0
    843c:	d10f      	bne.n	845e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    843e:	230f      	movs	r3, #15
    8440:	18fb      	adds	r3, r7, r3
    8442:	781b      	ldrb	r3, [r3, #0]
    8444:	009b      	lsls	r3, r3, #2
    8446:	2210      	movs	r2, #16
    8448:	4694      	mov	ip, r2
    844a:	44bc      	add	ip, r7
    844c:	4463      	add	r3, ip
    844e:	3b08      	subs	r3, #8
    8450:	681a      	ldr	r2, [r3, #0]
    8452:	230e      	movs	r3, #14
    8454:	18fb      	adds	r3, r7, r3
    8456:	781b      	ldrb	r3, [r3, #0]
    8458:	01db      	lsls	r3, r3, #7
    845a:	18d3      	adds	r3, r2, r3
    845c:	e000      	b.n	8460 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    845e:	2300      	movs	r3, #0
	}
}
    8460:	0018      	movs	r0, r3
    8462:	46bd      	mov	sp, r7
    8464:	b004      	add	sp, #16
    8466:	bd80      	pop	{r7, pc}
    8468:	41004400 	.word	0x41004400

0000846c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    846c:	b580      	push	{r7, lr}
    846e:	b082      	sub	sp, #8
    8470:	af00      	add	r7, sp, #0
    8472:	0002      	movs	r2, r0
    8474:	1dfb      	adds	r3, r7, #7
    8476:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8478:	1dfb      	adds	r3, r7, #7
    847a:	781b      	ldrb	r3, [r3, #0]
    847c:	0018      	movs	r0, r3
    847e:	4b03      	ldr	r3, [pc, #12]	; (848c <port_get_group_from_gpio_pin+0x20>)
    8480:	4798      	blx	r3
    8482:	0003      	movs	r3, r0
}
    8484:	0018      	movs	r0, r3
    8486:	46bd      	mov	sp, r7
    8488:	b002      	add	sp, #8
    848a:	bd80      	pop	{r7, pc}
    848c:	0000840d 	.word	0x0000840d

00008490 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    8490:	b580      	push	{r7, lr}
    8492:	b082      	sub	sp, #8
    8494:	af00      	add	r7, sp, #0
    8496:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    8498:	687b      	ldr	r3, [r7, #4]
    849a:	2200      	movs	r2, #0
    849c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    849e:	687b      	ldr	r3, [r7, #4]
    84a0:	2201      	movs	r2, #1
    84a2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    84a4:	687b      	ldr	r3, [r7, #4]
    84a6:	2200      	movs	r2, #0
    84a8:	709a      	strb	r2, [r3, #2]
}
    84aa:	46c0      	nop			; (mov r8, r8)
    84ac:	46bd      	mov	sp, r7
    84ae:	b002      	add	sp, #8
    84b0:	bd80      	pop	{r7, pc}
    84b2:	46c0      	nop			; (mov r8, r8)

000084b4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    84b4:	b580      	push	{r7, lr}
    84b6:	b084      	sub	sp, #16
    84b8:	af00      	add	r7, sp, #0
    84ba:	0002      	movs	r2, r0
    84bc:	1dfb      	adds	r3, r7, #7
    84be:	701a      	strb	r2, [r3, #0]
    84c0:	1dbb      	adds	r3, r7, #6
    84c2:	1c0a      	adds	r2, r1, #0
    84c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    84c6:	1dfb      	adds	r3, r7, #7
    84c8:	781b      	ldrb	r3, [r3, #0]
    84ca:	0018      	movs	r0, r3
    84cc:	4b0d      	ldr	r3, [pc, #52]	; (8504 <port_pin_set_output_level+0x50>)
    84ce:	4798      	blx	r3
    84d0:	0003      	movs	r3, r0
    84d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    84d4:	1dfb      	adds	r3, r7, #7
    84d6:	781b      	ldrb	r3, [r3, #0]
    84d8:	221f      	movs	r2, #31
    84da:	4013      	ands	r3, r2
    84dc:	2201      	movs	r2, #1
    84de:	409a      	lsls	r2, r3
    84e0:	0013      	movs	r3, r2
    84e2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    84e4:	1dbb      	adds	r3, r7, #6
    84e6:	781b      	ldrb	r3, [r3, #0]
    84e8:	2b00      	cmp	r3, #0
    84ea:	d003      	beq.n	84f4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    84ec:	68fb      	ldr	r3, [r7, #12]
    84ee:	68ba      	ldr	r2, [r7, #8]
    84f0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    84f2:	e002      	b.n	84fa <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    84f4:	68fb      	ldr	r3, [r7, #12]
    84f6:	68ba      	ldr	r2, [r7, #8]
    84f8:	615a      	str	r2, [r3, #20]
	}
}
    84fa:	46c0      	nop			; (mov r8, r8)
    84fc:	46bd      	mov	sp, r7
    84fe:	b004      	add	sp, #16
    8500:	bd80      	pop	{r7, pc}
    8502:	46c0      	nop			; (mov r8, r8)
    8504:	0000846d 	.word	0x0000846d

00008508 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    8508:	b580      	push	{r7, lr}
    850a:	b082      	sub	sp, #8
    850c:	af00      	add	r7, sp, #0
    850e:	0002      	movs	r2, r0
    8510:	1dfb      	adds	r3, r7, #7
    8512:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8514:	4b06      	ldr	r3, [pc, #24]	; (8530 <system_interrupt_enable+0x28>)
    8516:	1dfa      	adds	r2, r7, #7
    8518:	7812      	ldrb	r2, [r2, #0]
    851a:	0011      	movs	r1, r2
    851c:	221f      	movs	r2, #31
    851e:	400a      	ands	r2, r1
    8520:	2101      	movs	r1, #1
    8522:	4091      	lsls	r1, r2
    8524:	000a      	movs	r2, r1
    8526:	601a      	str	r2, [r3, #0]
}
    8528:	46c0      	nop			; (mov r8, r8)
    852a:	46bd      	mov	sp, r7
    852c:	b002      	add	sp, #8
    852e:	bd80      	pop	{r7, pc}
    8530:	e000e100 	.word	0xe000e100

00008534 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    8534:	b580      	push	{r7, lr}
    8536:	b082      	sub	sp, #8
    8538:	af00      	add	r7, sp, #0
    853a:	0002      	movs	r2, r0
    853c:	1dfb      	adds	r3, r7, #7
    853e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8540:	4a07      	ldr	r2, [pc, #28]	; (8560 <system_interrupt_disable+0x2c>)
    8542:	1dfb      	adds	r3, r7, #7
    8544:	781b      	ldrb	r3, [r3, #0]
    8546:	0019      	movs	r1, r3
    8548:	231f      	movs	r3, #31
    854a:	400b      	ands	r3, r1
    854c:	2101      	movs	r1, #1
    854e:	4099      	lsls	r1, r3
    8550:	000b      	movs	r3, r1
    8552:	0019      	movs	r1, r3
    8554:	2380      	movs	r3, #128	; 0x80
    8556:	50d1      	str	r1, [r2, r3]
}
    8558:	46c0      	nop			; (mov r8, r8)
    855a:	46bd      	mov	sp, r7
    855c:	b002      	add	sp, #8
    855e:	bd80      	pop	{r7, pc}
    8560:	e000e100 	.word	0xe000e100

00008564 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    8564:	b580      	push	{r7, lr}
    8566:	b084      	sub	sp, #16
    8568:	af00      	add	r7, sp, #0
    856a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	681b      	ldr	r3, [r3, #0]
    8570:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    8572:	68fb      	ldr	r3, [r7, #12]
    8574:	69db      	ldr	r3, [r3, #28]
    8576:	1e5a      	subs	r2, r3, #1
    8578:	4193      	sbcs	r3, r2
    857a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    857c:	0018      	movs	r0, r3
    857e:	46bd      	mov	sp, r7
    8580:	b004      	add	sp, #16
    8582:	bd80      	pop	{r7, pc}

00008584 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    8584:	b580      	push	{r7, lr}
    8586:	b082      	sub	sp, #8
    8588:	af00      	add	r7, sp, #0
    858a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    858c:	687b      	ldr	r3, [r7, #4]
    858e:	2201      	movs	r2, #1
    8590:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    8592:	687b      	ldr	r3, [r7, #4]
    8594:	2200      	movs	r2, #0
    8596:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    8598:	687b      	ldr	r3, [r7, #4]
    859a:	2200      	movs	r2, #0
    859c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    859e:	687b      	ldr	r3, [r7, #4]
    85a0:	22c0      	movs	r2, #192	; 0xc0
    85a2:	0392      	lsls	r2, r2, #14
    85a4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    85a6:	687b      	ldr	r3, [r7, #4]
    85a8:	2200      	movs	r2, #0
    85aa:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    85ac:	687b      	ldr	r3, [r7, #4]
    85ae:	2200      	movs	r2, #0
    85b0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    85b2:	687b      	ldr	r3, [r7, #4]
    85b4:	2201      	movs	r2, #1
    85b6:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	2201      	movs	r2, #1
    85bc:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    85be:	687b      	ldr	r3, [r7, #4]
    85c0:	2200      	movs	r2, #0
    85c2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    85c4:	687b      	ldr	r3, [r7, #4]
    85c6:	2224      	movs	r2, #36	; 0x24
    85c8:	2100      	movs	r1, #0
    85ca:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    85cc:	687b      	ldr	r3, [r7, #4]
    85ce:	3318      	adds	r3, #24
    85d0:	220c      	movs	r2, #12
    85d2:	2100      	movs	r1, #0
    85d4:	0018      	movs	r0, r3
    85d6:	4b0a      	ldr	r3, [pc, #40]	; (8600 <spi_get_config_defaults+0x7c>)
    85d8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    85da:	687b      	ldr	r3, [r7, #4]
    85dc:	4a09      	ldr	r2, [pc, #36]	; (8604 <spi_get_config_defaults+0x80>)
    85de:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    85e0:	687b      	ldr	r3, [r7, #4]
    85e2:	2200      	movs	r2, #0
    85e4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    85e6:	687b      	ldr	r3, [r7, #4]
    85e8:	2200      	movs	r2, #0
    85ea:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    85ec:	687b      	ldr	r3, [r7, #4]
    85ee:	2200      	movs	r2, #0
    85f0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    85f2:	687b      	ldr	r3, [r7, #4]
    85f4:	2200      	movs	r2, #0
    85f6:	635a      	str	r2, [r3, #52]	; 0x34

};
    85f8:	46c0      	nop			; (mov r8, r8)
    85fa:	46bd      	mov	sp, r7
    85fc:	b002      	add	sp, #8
    85fe:	bd80      	pop	{r7, pc}
    8600:	00016c69 	.word	0x00016c69
    8604:	000186a0 	.word	0x000186a0

00008608 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    8608:	b580      	push	{r7, lr}
    860a:	b082      	sub	sp, #8
    860c:	af00      	add	r7, sp, #0
    860e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    8610:	687b      	ldr	r3, [r7, #4]
    8612:	220a      	movs	r2, #10
    8614:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    8616:	687b      	ldr	r3, [r7, #4]
    8618:	2200      	movs	r2, #0
    861a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    861c:	687b      	ldr	r3, [r7, #4]
    861e:	2200      	movs	r2, #0
    8620:	709a      	strb	r2, [r3, #2]
}
    8622:	46c0      	nop			; (mov r8, r8)
    8624:	46bd      	mov	sp, r7
    8626:	b002      	add	sp, #8
    8628:	bd80      	pop	{r7, pc}
    862a:	46c0      	nop			; (mov r8, r8)

0000862c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    862c:	b580      	push	{r7, lr}
    862e:	b084      	sub	sp, #16
    8630:	af00      	add	r7, sp, #0
    8632:	6078      	str	r0, [r7, #4]
    8634:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    8636:	683b      	ldr	r3, [r7, #0]
    8638:	781a      	ldrb	r2, [r3, #0]
    863a:	687b      	ldr	r3, [r7, #4]
    863c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    863e:	683b      	ldr	r3, [r7, #0]
    8640:	785a      	ldrb	r2, [r3, #1]
    8642:	687b      	ldr	r3, [r7, #4]
    8644:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    8646:	683b      	ldr	r3, [r7, #0]
    8648:	789a      	ldrb	r2, [r3, #2]
    864a:	687b      	ldr	r3, [r7, #4]
    864c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    864e:	230c      	movs	r3, #12
    8650:	18fb      	adds	r3, r7, r3
    8652:	0018      	movs	r0, r3
    8654:	4b0b      	ldr	r3, [pc, #44]	; (8684 <spi_attach_slave+0x58>)
    8656:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    8658:	230c      	movs	r3, #12
    865a:	18fb      	adds	r3, r7, r3
    865c:	2201      	movs	r2, #1
    865e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    8660:	687b      	ldr	r3, [r7, #4]
    8662:	781b      	ldrb	r3, [r3, #0]
    8664:	220c      	movs	r2, #12
    8666:	18ba      	adds	r2, r7, r2
    8668:	0011      	movs	r1, r2
    866a:	0018      	movs	r0, r3
    866c:	4b06      	ldr	r3, [pc, #24]	; (8688 <spi_attach_slave+0x5c>)
    866e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8670:	687b      	ldr	r3, [r7, #4]
    8672:	781b      	ldrb	r3, [r3, #0]
    8674:	2101      	movs	r1, #1
    8676:	0018      	movs	r0, r3
    8678:	4b04      	ldr	r3, [pc, #16]	; (868c <spi_attach_slave+0x60>)
    867a:	4798      	blx	r3
}
    867c:	46c0      	nop			; (mov r8, r8)
    867e:	46bd      	mov	sp, r7
    8680:	b004      	add	sp, #16
    8682:	bd80      	pop	{r7, pc}
    8684:	00008491 	.word	0x00008491
    8688:	000120dd 	.word	0x000120dd
    868c:	000084b5 	.word	0x000084b5

00008690 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    8690:	b580      	push	{r7, lr}
    8692:	b084      	sub	sp, #16
    8694:	af00      	add	r7, sp, #0
    8696:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8698:	687b      	ldr	r3, [r7, #4]
    869a:	681b      	ldr	r3, [r3, #0]
    869c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    869e:	687b      	ldr	r3, [r7, #4]
    86a0:	681b      	ldr	r3, [r3, #0]
    86a2:	0018      	movs	r0, r3
    86a4:	4b0b      	ldr	r3, [pc, #44]	; (86d4 <spi_enable+0x44>)
    86a6:	4798      	blx	r3
    86a8:	0003      	movs	r3, r0
    86aa:	0018      	movs	r0, r3
    86ac:	4b0a      	ldr	r3, [pc, #40]	; (86d8 <spi_enable+0x48>)
    86ae:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    86b0:	46c0      	nop			; (mov r8, r8)
    86b2:	687b      	ldr	r3, [r7, #4]
    86b4:	0018      	movs	r0, r3
    86b6:	4b09      	ldr	r3, [pc, #36]	; (86dc <spi_enable+0x4c>)
    86b8:	4798      	blx	r3
    86ba:	1e03      	subs	r3, r0, #0
    86bc:	d1f9      	bne.n	86b2 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    86be:	68fb      	ldr	r3, [r7, #12]
    86c0:	681b      	ldr	r3, [r3, #0]
    86c2:	2202      	movs	r2, #2
    86c4:	431a      	orrs	r2, r3
    86c6:	68fb      	ldr	r3, [r7, #12]
    86c8:	601a      	str	r2, [r3, #0]
}
    86ca:	46c0      	nop			; (mov r8, r8)
    86cc:	46bd      	mov	sp, r7
    86ce:	b004      	add	sp, #16
    86d0:	bd80      	pop	{r7, pc}
    86d2:	46c0      	nop			; (mov r8, r8)
    86d4:	00012789 	.word	0x00012789
    86d8:	00008509 	.word	0x00008509
    86dc:	00008565 	.word	0x00008565

000086e0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    86e0:	b580      	push	{r7, lr}
    86e2:	b084      	sub	sp, #16
    86e4:	af00      	add	r7, sp, #0
    86e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    86e8:	687b      	ldr	r3, [r7, #4]
    86ea:	681b      	ldr	r3, [r3, #0]
    86ec:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    86ee:	687b      	ldr	r3, [r7, #4]
    86f0:	681b      	ldr	r3, [r3, #0]
    86f2:	0018      	movs	r0, r3
    86f4:	4b0e      	ldr	r3, [pc, #56]	; (8730 <spi_disable+0x50>)
    86f6:	4798      	blx	r3
    86f8:	0003      	movs	r3, r0
    86fa:	0018      	movs	r0, r3
    86fc:	4b0d      	ldr	r3, [pc, #52]	; (8734 <spi_disable+0x54>)
    86fe:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    8700:	46c0      	nop			; (mov r8, r8)
    8702:	687b      	ldr	r3, [r7, #4]
    8704:	0018      	movs	r0, r3
    8706:	4b0c      	ldr	r3, [pc, #48]	; (8738 <spi_disable+0x58>)
    8708:	4798      	blx	r3
    870a:	1e03      	subs	r3, r0, #0
    870c:	d1f9      	bne.n	8702 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    870e:	68fb      	ldr	r3, [r7, #12]
    8710:	228f      	movs	r2, #143	; 0x8f
    8712:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    8714:	68fb      	ldr	r3, [r7, #12]
    8716:	228f      	movs	r2, #143	; 0x8f
    8718:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    871a:	68fb      	ldr	r3, [r7, #12]
    871c:	681b      	ldr	r3, [r3, #0]
    871e:	2202      	movs	r2, #2
    8720:	4393      	bics	r3, r2
    8722:	001a      	movs	r2, r3
    8724:	68fb      	ldr	r3, [r7, #12]
    8726:	601a      	str	r2, [r3, #0]
}
    8728:	46c0      	nop			; (mov r8, r8)
    872a:	46bd      	mov	sp, r7
    872c:	b004      	add	sp, #16
    872e:	bd80      	pop	{r7, pc}
    8730:	00012789 	.word	0x00012789
    8734:	00008535 	.word	0x00008535
    8738:	00008565 	.word	0x00008565

0000873c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    873c:	b580      	push	{r7, lr}
    873e:	b084      	sub	sp, #16
    8740:	af00      	add	r7, sp, #0
    8742:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8744:	687b      	ldr	r3, [r7, #4]
    8746:	681b      	ldr	r3, [r3, #0]
    8748:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    874a:	68fb      	ldr	r3, [r7, #12]
    874c:	7e1b      	ldrb	r3, [r3, #24]
    874e:	b2db      	uxtb	r3, r3
    8750:	001a      	movs	r2, r3
    8752:	2302      	movs	r3, #2
    8754:	4013      	ands	r3, r2
    8756:	1e5a      	subs	r2, r3, #1
    8758:	4193      	sbcs	r3, r2
    875a:	b2db      	uxtb	r3, r3
}
    875c:	0018      	movs	r0, r3
    875e:	46bd      	mov	sp, r7
    8760:	b004      	add	sp, #16
    8762:	bd80      	pop	{r7, pc}

00008764 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    8764:	b580      	push	{r7, lr}
    8766:	b084      	sub	sp, #16
    8768:	af00      	add	r7, sp, #0
    876a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    876c:	687b      	ldr	r3, [r7, #4]
    876e:	681b      	ldr	r3, [r3, #0]
    8770:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    8772:	68fb      	ldr	r3, [r7, #12]
    8774:	7e1b      	ldrb	r3, [r3, #24]
    8776:	b2db      	uxtb	r3, r3
    8778:	001a      	movs	r2, r3
    877a:	2301      	movs	r3, #1
    877c:	4013      	ands	r3, r2
    877e:	1e5a      	subs	r2, r3, #1
    8780:	4193      	sbcs	r3, r2
    8782:	b2db      	uxtb	r3, r3
}
    8784:	0018      	movs	r0, r3
    8786:	46bd      	mov	sp, r7
    8788:	b004      	add	sp, #16
    878a:	bd80      	pop	{r7, pc}

0000878c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    878c:	b580      	push	{r7, lr}
    878e:	b084      	sub	sp, #16
    8790:	af00      	add	r7, sp, #0
    8792:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8794:	687b      	ldr	r3, [r7, #4]
    8796:	681b      	ldr	r3, [r3, #0]
    8798:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    879a:	68fb      	ldr	r3, [r7, #12]
    879c:	7e1b      	ldrb	r3, [r3, #24]
    879e:	b2db      	uxtb	r3, r3
    87a0:	001a      	movs	r2, r3
    87a2:	2304      	movs	r3, #4
    87a4:	4013      	ands	r3, r2
    87a6:	1e5a      	subs	r2, r3, #1
    87a8:	4193      	sbcs	r3, r2
    87aa:	b2db      	uxtb	r3, r3
}
    87ac:	0018      	movs	r0, r3
    87ae:	46bd      	mov	sp, r7
    87b0:	b004      	add	sp, #16
    87b2:	bd80      	pop	{r7, pc}

000087b4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    87b4:	b580      	push	{r7, lr}
    87b6:	b084      	sub	sp, #16
    87b8:	af00      	add	r7, sp, #0
    87ba:	6078      	str	r0, [r7, #4]
    87bc:	000a      	movs	r2, r1
    87be:	1cbb      	adds	r3, r7, #2
    87c0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    87c2:	687b      	ldr	r3, [r7, #4]
    87c4:	681b      	ldr	r3, [r3, #0]
    87c6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    87c8:	687b      	ldr	r3, [r7, #4]
    87ca:	0018      	movs	r0, r3
    87cc:	4b0a      	ldr	r3, [pc, #40]	; (87f8 <spi_write+0x44>)
    87ce:	4798      	blx	r3
    87d0:	0003      	movs	r3, r0
    87d2:	001a      	movs	r2, r3
    87d4:	2301      	movs	r3, #1
    87d6:	4053      	eors	r3, r2
    87d8:	b2db      	uxtb	r3, r3
    87da:	2b00      	cmp	r3, #0
    87dc:	d001      	beq.n	87e2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    87de:	2305      	movs	r3, #5
    87e0:	e006      	b.n	87f0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    87e2:	1cbb      	adds	r3, r7, #2
    87e4:	881b      	ldrh	r3, [r3, #0]
    87e6:	05db      	lsls	r3, r3, #23
    87e8:	0dda      	lsrs	r2, r3, #23
    87ea:	68fb      	ldr	r3, [r7, #12]
    87ec:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    87ee:	2300      	movs	r3, #0
}
    87f0:	0018      	movs	r0, r3
    87f2:	46bd      	mov	sp, r7
    87f4:	b004      	add	sp, #16
    87f6:	bd80      	pop	{r7, pc}
    87f8:	00008765 	.word	0x00008765

000087fc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    87fc:	b580      	push	{r7, lr}
    87fe:	b084      	sub	sp, #16
    8800:	af00      	add	r7, sp, #0
    8802:	6078      	str	r0, [r7, #4]
    8804:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8806:	687b      	ldr	r3, [r7, #4]
    8808:	681b      	ldr	r3, [r3, #0]
    880a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    880c:	687b      	ldr	r3, [r7, #4]
    880e:	0018      	movs	r0, r3
    8810:	4b1b      	ldr	r3, [pc, #108]	; (8880 <spi_read+0x84>)
    8812:	4798      	blx	r3
    8814:	0003      	movs	r3, r0
    8816:	001a      	movs	r2, r3
    8818:	2301      	movs	r3, #1
    881a:	4053      	eors	r3, r2
    881c:	b2db      	uxtb	r3, r3
    881e:	2b00      	cmp	r3, #0
    8820:	d001      	beq.n	8826 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    8822:	2310      	movs	r3, #16
    8824:	e027      	b.n	8876 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    8826:	230f      	movs	r3, #15
    8828:	18fb      	adds	r3, r7, r3
    882a:	2200      	movs	r2, #0
    882c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    882e:	68bb      	ldr	r3, [r7, #8]
    8830:	8b5b      	ldrh	r3, [r3, #26]
    8832:	b29b      	uxth	r3, r3
    8834:	001a      	movs	r2, r3
    8836:	2304      	movs	r3, #4
    8838:	4013      	ands	r3, r2
    883a:	d006      	beq.n	884a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    883c:	230f      	movs	r3, #15
    883e:	18fb      	adds	r3, r7, r3
    8840:	221e      	movs	r2, #30
    8842:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8844:	68bb      	ldr	r3, [r7, #8]
    8846:	2204      	movs	r2, #4
    8848:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    884a:	687b      	ldr	r3, [r7, #4]
    884c:	799b      	ldrb	r3, [r3, #6]
    884e:	2b01      	cmp	r3, #1
    8850:	d108      	bne.n	8864 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8852:	68bb      	ldr	r3, [r7, #8]
    8854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8856:	b29b      	uxth	r3, r3
    8858:	05db      	lsls	r3, r3, #23
    885a:	0ddb      	lsrs	r3, r3, #23
    885c:	b29a      	uxth	r2, r3
    885e:	683b      	ldr	r3, [r7, #0]
    8860:	801a      	strh	r2, [r3, #0]
    8862:	e005      	b.n	8870 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    8864:	68bb      	ldr	r3, [r7, #8]
    8866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8868:	b2db      	uxtb	r3, r3
    886a:	b29a      	uxth	r2, r3
    886c:	683b      	ldr	r3, [r7, #0]
    886e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    8870:	230f      	movs	r3, #15
    8872:	18fb      	adds	r3, r7, r3
    8874:	781b      	ldrb	r3, [r3, #0]
}
    8876:	0018      	movs	r0, r3
    8878:	46bd      	mov	sp, r7
    887a:	b004      	add	sp, #16
    887c:	bd80      	pop	{r7, pc}
    887e:	46c0      	nop			; (mov r8, r8)
    8880:	0000878d 	.word	0x0000878d

00008884 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    8884:	b580      	push	{r7, lr}
    8886:	b086      	sub	sp, #24
    8888:	af00      	add	r7, sp, #0
    888a:	60f8      	str	r0, [r7, #12]
    888c:	60b9      	str	r1, [r7, #8]
    888e:	1dbb      	adds	r3, r7, #6
    8890:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    8892:	2313      	movs	r3, #19
    8894:	18fb      	adds	r3, r7, r3
    8896:	2200      	movs	r2, #0
    8898:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    889a:	2317      	movs	r3, #23
    889c:	18fb      	adds	r3, r7, r3
    889e:	2200      	movs	r2, #0
    88a0:	701a      	strb	r2, [r3, #0]
    88a2:	2316      	movs	r3, #22
    88a4:	18fb      	adds	r3, r7, r3
    88a6:	2200      	movs	r2, #0
    88a8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    88aa:	2314      	movs	r3, #20
    88ac:	18fb      	adds	r3, r7, r3
    88ae:	2200      	movs	r2, #0
    88b0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    88b2:	2310      	movs	r3, #16
    88b4:	18fb      	adds	r3, r7, r3
    88b6:	2200      	movs	r2, #0
    88b8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    88ba:	68bb      	ldr	r3, [r7, #8]
    88bc:	2b00      	cmp	r3, #0
    88be:	d102      	bne.n	88c6 <spi_rw+0x42>
    88c0:	68fb      	ldr	r3, [r7, #12]
    88c2:	2b00      	cmp	r3, #0
    88c4:	d003      	beq.n	88ce <spi_rw+0x4a>
    88c6:	1dbb      	adds	r3, r7, #6
    88c8:	881b      	ldrh	r3, [r3, #0]
    88ca:	2b00      	cmp	r3, #0
    88cc:	d102      	bne.n	88d4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    88ce:	230f      	movs	r3, #15
    88d0:	425b      	negs	r3, r3
    88d2:	e07e      	b.n	89d2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    88d4:	68fb      	ldr	r3, [r7, #12]
    88d6:	2b00      	cmp	r3, #0
    88d8:	d106      	bne.n	88e8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    88da:	2313      	movs	r3, #19
    88dc:	18fb      	adds	r3, r7, r3
    88de:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    88e0:	2317      	movs	r3, #23
    88e2:	18fb      	adds	r3, r7, r3
    88e4:	2201      	movs	r2, #1
    88e6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    88e8:	68bb      	ldr	r3, [r7, #8]
    88ea:	2b00      	cmp	r3, #0
    88ec:	d106      	bne.n	88fc <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    88ee:	2313      	movs	r3, #19
    88f0:	18fb      	adds	r3, r7, r3
    88f2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    88f4:	2316      	movs	r3, #22
    88f6:	18fb      	adds	r3, r7, r3
    88f8:	2201      	movs	r2, #1
    88fa:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    88fc:	4937      	ldr	r1, [pc, #220]	; (89dc <spi_rw+0x158>)
    88fe:	4b38      	ldr	r3, [pc, #224]	; (89e0 <spi_rw+0x15c>)
    8900:	2201      	movs	r2, #1
    8902:	0018      	movs	r0, r3
    8904:	4b37      	ldr	r3, [pc, #220]	; (89e4 <spi_rw+0x160>)
    8906:	4798      	blx	r3

	while (u16Sz) {
    8908:	e04c      	b.n	89a4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    890a:	68fb      	ldr	r3, [r7, #12]
    890c:	781a      	ldrb	r2, [r3, #0]
    890e:	2314      	movs	r3, #20
    8910:	18fb      	adds	r3, r7, r3
    8912:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    8914:	46c0      	nop			; (mov r8, r8)
    8916:	4b32      	ldr	r3, [pc, #200]	; (89e0 <spi_rw+0x15c>)
    8918:	0018      	movs	r0, r3
    891a:	4b33      	ldr	r3, [pc, #204]	; (89e8 <spi_rw+0x164>)
    891c:	4798      	blx	r3
    891e:	0003      	movs	r3, r0
    8920:	001a      	movs	r2, r3
    8922:	2301      	movs	r3, #1
    8924:	4053      	eors	r3, r2
    8926:	b2db      	uxtb	r3, r3
    8928:	2b00      	cmp	r3, #0
    892a:	d1f4      	bne.n	8916 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    892c:	46c0      	nop			; (mov r8, r8)
    892e:	2314      	movs	r3, #20
    8930:	18fb      	adds	r3, r7, r3
    8932:	881a      	ldrh	r2, [r3, #0]
    8934:	4b2a      	ldr	r3, [pc, #168]	; (89e0 <spi_rw+0x15c>)
    8936:	0011      	movs	r1, r2
    8938:	0018      	movs	r0, r3
    893a:	4b2c      	ldr	r3, [pc, #176]	; (89ec <spi_rw+0x168>)
    893c:	4798      	blx	r3
    893e:	1e03      	subs	r3, r0, #0
    8940:	d1f5      	bne.n	892e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    8942:	46c0      	nop			; (mov r8, r8)
    8944:	4b26      	ldr	r3, [pc, #152]	; (89e0 <spi_rw+0x15c>)
    8946:	0018      	movs	r0, r3
    8948:	4b29      	ldr	r3, [pc, #164]	; (89f0 <spi_rw+0x16c>)
    894a:	4798      	blx	r3
    894c:	0003      	movs	r3, r0
    894e:	001a      	movs	r2, r3
    8950:	2301      	movs	r3, #1
    8952:	4053      	eors	r3, r2
    8954:	b2db      	uxtb	r3, r3
    8956:	2b00      	cmp	r3, #0
    8958:	d1f4      	bne.n	8944 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    895a:	46c0      	nop			; (mov r8, r8)
    895c:	2310      	movs	r3, #16
    895e:	18fa      	adds	r2, r7, r3
    8960:	4b1f      	ldr	r3, [pc, #124]	; (89e0 <spi_rw+0x15c>)
    8962:	0011      	movs	r1, r2
    8964:	0018      	movs	r0, r3
    8966:	4b23      	ldr	r3, [pc, #140]	; (89f4 <spi_rw+0x170>)
    8968:	4798      	blx	r3
    896a:	1e03      	subs	r3, r0, #0
    896c:	d1f6      	bne.n	895c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    896e:	2310      	movs	r3, #16
    8970:	18fb      	adds	r3, r7, r3
    8972:	881b      	ldrh	r3, [r3, #0]
    8974:	b2da      	uxtb	r2, r3
    8976:	68bb      	ldr	r3, [r7, #8]
    8978:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    897a:	1dbb      	adds	r3, r7, #6
    897c:	881a      	ldrh	r2, [r3, #0]
    897e:	1dbb      	adds	r3, r7, #6
    8980:	3a01      	subs	r2, #1
    8982:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    8984:	2316      	movs	r3, #22
    8986:	18fb      	adds	r3, r7, r3
    8988:	781b      	ldrb	r3, [r3, #0]
    898a:	2b00      	cmp	r3, #0
    898c:	d102      	bne.n	8994 <spi_rw+0x110>
			pu8Miso++;
    898e:	68bb      	ldr	r3, [r7, #8]
    8990:	3301      	adds	r3, #1
    8992:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    8994:	2317      	movs	r3, #23
    8996:	18fb      	adds	r3, r7, r3
    8998:	781b      	ldrb	r3, [r3, #0]
    899a:	2b00      	cmp	r3, #0
    899c:	d102      	bne.n	89a4 <spi_rw+0x120>
			pu8Mosi++;
    899e:	68fb      	ldr	r3, [r7, #12]
    89a0:	3301      	adds	r3, #1
    89a2:	60fb      	str	r3, [r7, #12]
		u8SkipMiso = 1;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    89a4:	1dbb      	adds	r3, r7, #6
    89a6:	881b      	ldrh	r3, [r3, #0]
    89a8:	2b00      	cmp	r3, #0
    89aa:	d1ae      	bne.n	890a <spi_rw+0x86>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    89ac:	46c0      	nop			; (mov r8, r8)
    89ae:	4b0c      	ldr	r3, [pc, #48]	; (89e0 <spi_rw+0x15c>)
    89b0:	0018      	movs	r0, r3
    89b2:	4b11      	ldr	r3, [pc, #68]	; (89f8 <spi_rw+0x174>)
    89b4:	4798      	blx	r3
    89b6:	0003      	movs	r3, r0
    89b8:	001a      	movs	r2, r3
    89ba:	2301      	movs	r3, #1
    89bc:	4053      	eors	r3, r2
    89be:	b2db      	uxtb	r3, r3
    89c0:	2b00      	cmp	r3, #0
    89c2:	d1f4      	bne.n	89ae <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    89c4:	4905      	ldr	r1, [pc, #20]	; (89dc <spi_rw+0x158>)
    89c6:	4b06      	ldr	r3, [pc, #24]	; (89e0 <spi_rw+0x15c>)
    89c8:	2200      	movs	r2, #0
    89ca:	0018      	movs	r0, r3
    89cc:	4b05      	ldr	r3, [pc, #20]	; (89e4 <spi_rw+0x160>)
    89ce:	4798      	blx	r3

	return M2M_SUCCESS;
    89d0:	2300      	movs	r3, #0
}
    89d2:	0018      	movs	r0, r3
    89d4:	46bd      	mov	sp, r7
    89d6:	b006      	add	sp, #24
    89d8:	bd80      	pop	{r7, pc}
    89da:	46c0      	nop			; (mov r8, r8)
    89dc:	20000238 	.word	0x20000238
    89e0:	2000023c 	.word	0x2000023c
    89e4:	0001310d 	.word	0x0001310d
    89e8:	00008765 	.word	0x00008765
    89ec:	000087b5 	.word	0x000087b5
    89f0:	0000878d 	.word	0x0000878d
    89f4:	000087fd 	.word	0x000087fd
    89f8:	0000873d 	.word	0x0000873d

000089fc <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    89fc:	b580      	push	{r7, lr}
    89fe:	b092      	sub	sp, #72	; 0x48
    8a00:	af00      	add	r7, sp, #0
    8a02:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    8a04:	2347      	movs	r3, #71	; 0x47
    8a06:	18fb      	adds	r3, r7, r3
    8a08:	2200      	movs	r2, #0
    8a0a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    8a0c:	2308      	movs	r3, #8
    8a0e:	18fb      	adds	r3, r7, r3
    8a10:	0018      	movs	r0, r3
    8a12:	4b26      	ldr	r3, [pc, #152]	; (8aac <nm_bus_init+0xb0>)
    8a14:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    8a16:	2308      	movs	r3, #8
    8a18:	18fb      	adds	r3, r7, r3
    8a1a:	220e      	movs	r2, #14
    8a1c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    8a1e:	2308      	movs	r3, #8
    8a20:	18fa      	adds	r2, r7, r3
    8a22:	4b23      	ldr	r3, [pc, #140]	; (8ab0 <nm_bus_init+0xb4>)
    8a24:	0011      	movs	r1, r2
    8a26:	0018      	movs	r0, r3
    8a28:	4b22      	ldr	r3, [pc, #136]	; (8ab4 <nm_bus_init+0xb8>)
    8a2a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    8a2c:	230c      	movs	r3, #12
    8a2e:	18fb      	adds	r3, r7, r3
    8a30:	0018      	movs	r0, r3
    8a32:	4b21      	ldr	r3, [pc, #132]	; (8ab8 <nm_bus_init+0xbc>)
    8a34:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    8a36:	230c      	movs	r3, #12
    8a38:	18fb      	adds	r3, r7, r3
    8a3a:	22c0      	movs	r2, #192	; 0xc0
    8a3c:	0392      	lsls	r2, r2, #14
    8a3e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    8a40:	230c      	movs	r3, #12
    8a42:	18fb      	adds	r3, r7, r3
    8a44:	4a1d      	ldr	r2, [pc, #116]	; (8abc <nm_bus_init+0xc0>)
    8a46:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    8a48:	230c      	movs	r3, #12
    8a4a:	18fb      	adds	r3, r7, r3
    8a4c:	4a1c      	ldr	r2, [pc, #112]	; (8ac0 <nm_bus_init+0xc4>)
    8a4e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    8a50:	230c      	movs	r3, #12
    8a52:	18fb      	adds	r3, r7, r3
    8a54:	2201      	movs	r2, #1
    8a56:	4252      	negs	r2, r2
    8a58:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    8a5a:	230c      	movs	r3, #12
    8a5c:	18fb      	adds	r3, r7, r3
    8a5e:	4a19      	ldr	r2, [pc, #100]	; (8ac4 <nm_bus_init+0xc8>)
    8a60:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    8a62:	230c      	movs	r3, #12
    8a64:	18fb      	adds	r3, r7, r3
    8a66:	2200      	movs	r2, #0
    8a68:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    8a6a:	230c      	movs	r3, #12
    8a6c:	18fb      	adds	r3, r7, r3
    8a6e:	4a16      	ldr	r2, [pc, #88]	; (8ac8 <nm_bus_init+0xcc>)
    8a70:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    8a72:	230c      	movs	r3, #12
    8a74:	18fa      	adds	r2, r7, r3
    8a76:	4915      	ldr	r1, [pc, #84]	; (8acc <nm_bus_init+0xd0>)
    8a78:	4b15      	ldr	r3, [pc, #84]	; (8ad0 <nm_bus_init+0xd4>)
    8a7a:	0018      	movs	r0, r3
    8a7c:	4b15      	ldr	r3, [pc, #84]	; (8ad4 <nm_bus_init+0xd8>)
    8a7e:	4798      	blx	r3
    8a80:	1e03      	subs	r3, r0, #0
    8a82:	d002      	beq.n	8a8a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    8a84:	2306      	movs	r3, #6
    8a86:	425b      	negs	r3, r3
    8a88:	e00c      	b.n	8aa4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    8a8a:	4b11      	ldr	r3, [pc, #68]	; (8ad0 <nm_bus_init+0xd4>)
    8a8c:	0018      	movs	r0, r3
    8a8e:	4b12      	ldr	r3, [pc, #72]	; (8ad8 <nm_bus_init+0xdc>)
    8a90:	4798      	blx	r3

	nm_bsp_reset();
    8a92:	4b12      	ldr	r3, [pc, #72]	; (8adc <nm_bus_init+0xe0>)
    8a94:	4798      	blx	r3
	nm_bsp_sleep(1);
    8a96:	2001      	movs	r0, #1
    8a98:	4b11      	ldr	r3, [pc, #68]	; (8ae0 <nm_bus_init+0xe4>)
    8a9a:	4798      	blx	r3
#endif
	return result;
    8a9c:	2347      	movs	r3, #71	; 0x47
    8a9e:	18fb      	adds	r3, r7, r3
    8aa0:	781b      	ldrb	r3, [r3, #0]
    8aa2:	b25b      	sxtb	r3, r3
}
    8aa4:	0018      	movs	r0, r3
    8aa6:	46bd      	mov	sp, r7
    8aa8:	b012      	add	sp, #72	; 0x48
    8aaa:	bd80      	pop	{r7, pc}
    8aac:	00008609 	.word	0x00008609
    8ab0:	20000238 	.word	0x20000238
    8ab4:	0000862d 	.word	0x0000862d
    8ab8:	00008585 	.word	0x00008585
    8abc:	000c0002 	.word	0x000c0002
    8ac0:	000d0002 	.word	0x000d0002
    8ac4:	000f0002 	.word	0x000f0002
    8ac8:	00b71b00 	.word	0x00b71b00
    8acc:	42001000 	.word	0x42001000
    8ad0:	2000023c 	.word	0x2000023c
    8ad4:	00012dad 	.word	0x00012dad
    8ad8:	00008691 	.word	0x00008691
    8adc:	000082f1 	.word	0x000082f1
    8ae0:	00008335 	.word	0x00008335

00008ae4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    8ae4:	b590      	push	{r4, r7, lr}
    8ae6:	b085      	sub	sp, #20
    8ae8:	af00      	add	r7, sp, #0
    8aea:	0002      	movs	r2, r0
    8aec:	6039      	str	r1, [r7, #0]
    8aee:	1dfb      	adds	r3, r7, #7
    8af0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    8af2:	230f      	movs	r3, #15
    8af4:	18fb      	adds	r3, r7, r3
    8af6:	2200      	movs	r2, #0
    8af8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    8afa:	1dfb      	adds	r3, r7, #7
    8afc:	781b      	ldrb	r3, [r3, #0]
    8afe:	2b03      	cmp	r3, #3
    8b00:	d10f      	bne.n	8b22 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    8b02:	683b      	ldr	r3, [r7, #0]
    8b04:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    8b06:	68bb      	ldr	r3, [r7, #8]
    8b08:	6818      	ldr	r0, [r3, #0]
    8b0a:	68bb      	ldr	r3, [r7, #8]
    8b0c:	6859      	ldr	r1, [r3, #4]
    8b0e:	68bb      	ldr	r3, [r7, #8]
    8b10:	891b      	ldrh	r3, [r3, #8]
    8b12:	220f      	movs	r2, #15
    8b14:	18bc      	adds	r4, r7, r2
    8b16:	001a      	movs	r2, r3
    8b18:	4b10      	ldr	r3, [pc, #64]	; (8b5c <nm_bus_ioctl+0x78>)
    8b1a:	4798      	blx	r3
    8b1c:	0003      	movs	r3, r0
    8b1e:	7023      	strb	r3, [r4, #0]
		}
		break;
    8b20:	e013      	b.n	8b4a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    8b22:	230f      	movs	r3, #15
    8b24:	18fb      	adds	r3, r7, r3
    8b26:	22ff      	movs	r2, #255	; 0xff
    8b28:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    8b2a:	230e      	movs	r3, #14
    8b2c:	33ff      	adds	r3, #255	; 0xff
    8b2e:	001a      	movs	r2, r3
    8b30:	490b      	ldr	r1, [pc, #44]	; (8b60 <nm_bus_ioctl+0x7c>)
    8b32:	4b0c      	ldr	r3, [pc, #48]	; (8b64 <nm_bus_ioctl+0x80>)
    8b34:	0018      	movs	r0, r3
    8b36:	4b0c      	ldr	r3, [pc, #48]	; (8b68 <nm_bus_ioctl+0x84>)
    8b38:	4798      	blx	r3
    8b3a:	4b0c      	ldr	r3, [pc, #48]	; (8b6c <nm_bus_ioctl+0x88>)
    8b3c:	0018      	movs	r0, r3
    8b3e:	4b0c      	ldr	r3, [pc, #48]	; (8b70 <nm_bus_ioctl+0x8c>)
    8b40:	4798      	blx	r3
    8b42:	200d      	movs	r0, #13
    8b44:	4b0b      	ldr	r3, [pc, #44]	; (8b74 <nm_bus_ioctl+0x90>)
    8b46:	4798      	blx	r3
			break;
    8b48:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    8b4a:	230f      	movs	r3, #15
    8b4c:	18fb      	adds	r3, r7, r3
    8b4e:	781b      	ldrb	r3, [r3, #0]
    8b50:	b25b      	sxtb	r3, r3
}
    8b52:	0018      	movs	r0, r3
    8b54:	46bd      	mov	sp, r7
    8b56:	b005      	add	sp, #20
    8b58:	bd90      	pop	{r4, r7, pc}
    8b5a:	46c0      	nop			; (mov r8, r8)
    8b5c:	00008885 	.word	0x00008885
    8b60:	0001832c 	.word	0x0001832c
    8b64:	00018304 	.word	0x00018304
    8b68:	00016db1 	.word	0x00016db1
    8b6c:	00018318 	.word	0x00018318
    8b70:	00016ed1 	.word	0x00016ed1
    8b74:	00016de5 	.word	0x00016de5

00008b78 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    8b78:	b580      	push	{r7, lr}
    8b7a:	b082      	sub	sp, #8
    8b7c:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    8b7e:	1dfb      	adds	r3, r7, #7
    8b80:	2200      	movs	r2, #0
    8b82:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    8b84:	1d3b      	adds	r3, r7, #4
    8b86:	0018      	movs	r0, r3
    8b88:	4b13      	ldr	r3, [pc, #76]	; (8bd8 <nm_bus_deinit+0x60>)
    8b8a:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8b8c:	1d3b      	adds	r3, r7, #4
    8b8e:	2200      	movs	r2, #0
    8b90:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    8b92:	1d3b      	adds	r3, r7, #4
    8b94:	2200      	movs	r2, #0
    8b96:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    8b98:	4b10      	ldr	r3, [pc, #64]	; (8bdc <nm_bus_deinit+0x64>)
    8b9a:	0018      	movs	r0, r3
    8b9c:	4b10      	ldr	r3, [pc, #64]	; (8be0 <nm_bus_deinit+0x68>)
    8b9e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    8ba0:	1d3b      	adds	r3, r7, #4
    8ba2:	0019      	movs	r1, r3
    8ba4:	200c      	movs	r0, #12
    8ba6:	4b0f      	ldr	r3, [pc, #60]	; (8be4 <nm_bus_deinit+0x6c>)
    8ba8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    8baa:	1d3b      	adds	r3, r7, #4
    8bac:	0019      	movs	r1, r3
    8bae:	200f      	movs	r0, #15
    8bb0:	4b0c      	ldr	r3, [pc, #48]	; (8be4 <nm_bus_deinit+0x6c>)
    8bb2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    8bb4:	1d3b      	adds	r3, r7, #4
    8bb6:	0019      	movs	r1, r3
    8bb8:	200d      	movs	r0, #13
    8bba:	4b0a      	ldr	r3, [pc, #40]	; (8be4 <nm_bus_deinit+0x6c>)
    8bbc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    8bbe:	1d3b      	adds	r3, r7, #4
    8bc0:	0019      	movs	r1, r3
    8bc2:	200e      	movs	r0, #14
    8bc4:	4b07      	ldr	r3, [pc, #28]	; (8be4 <nm_bus_deinit+0x6c>)
    8bc6:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    8bc8:	1dfb      	adds	r3, r7, #7
    8bca:	781b      	ldrb	r3, [r3, #0]
    8bcc:	b25b      	sxtb	r3, r3
}
    8bce:	0018      	movs	r0, r3
    8bd0:	46bd      	mov	sp, r7
    8bd2:	b002      	add	sp, #8
    8bd4:	bd80      	pop	{r7, pc}
    8bd6:	46c0      	nop			; (mov r8, r8)
    8bd8:	00008491 	.word	0x00008491
    8bdc:	2000023c 	.word	0x2000023c
    8be0:	000086e1 	.word	0x000086e1
    8be4:	000120dd 	.word	0x000120dd

00008be8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    8be8:	b580      	push	{r7, lr}
    8bea:	b084      	sub	sp, #16
    8bec:	af00      	add	r7, sp, #0
    8bee:	60f8      	str	r0, [r7, #12]
    8bf0:	60b9      	str	r1, [r7, #8]
    8bf2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	2b00      	cmp	r3, #0
    8bf8:	d010      	beq.n	8c1c <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    8bfa:	68bb      	ldr	r3, [r7, #8]
    8bfc:	781a      	ldrb	r2, [r3, #0]
    8bfe:	68fb      	ldr	r3, [r7, #12]
    8c00:	701a      	strb	r2, [r3, #0]
		pDst++;
    8c02:	68fb      	ldr	r3, [r7, #12]
    8c04:	3301      	adds	r3, #1
    8c06:	60fb      	str	r3, [r7, #12]
		pSrc++;
    8c08:	68bb      	ldr	r3, [r7, #8]
    8c0a:	3301      	adds	r3, #1
    8c0c:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    8c0e:	687b      	ldr	r3, [r7, #4]
    8c10:	3b01      	subs	r3, #1
    8c12:	607b      	str	r3, [r7, #4]
    8c14:	687b      	ldr	r3, [r7, #4]
    8c16:	2b00      	cmp	r3, #0
    8c18:	d1ef      	bne.n	8bfa <m2m_memcpy+0x12>
    8c1a:	e000      	b.n	8c1e <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    8c1c:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
    8c1e:	46bd      	mov	sp, r7
    8c20:	b004      	add	sp, #16
    8c22:	bd80      	pop	{r7, pc}

00008c24 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    8c24:	b580      	push	{r7, lr}
    8c26:	b084      	sub	sp, #16
    8c28:	af00      	add	r7, sp, #0
    8c2a:	60f8      	str	r0, [r7, #12]
    8c2c:	607a      	str	r2, [r7, #4]
    8c2e:	230b      	movs	r3, #11
    8c30:	18fb      	adds	r3, r7, r3
    8c32:	1c0a      	adds	r2, r1, #0
    8c34:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    8c36:	687b      	ldr	r3, [r7, #4]
    8c38:	2b00      	cmp	r3, #0
    8c3a:	d00e      	beq.n	8c5a <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    8c3c:	68fb      	ldr	r3, [r7, #12]
    8c3e:	220b      	movs	r2, #11
    8c40:	18ba      	adds	r2, r7, r2
    8c42:	7812      	ldrb	r2, [r2, #0]
    8c44:	701a      	strb	r2, [r3, #0]
		pBuf++;
    8c46:	68fb      	ldr	r3, [r7, #12]
    8c48:	3301      	adds	r3, #1
    8c4a:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    8c4c:	687b      	ldr	r3, [r7, #4]
    8c4e:	3b01      	subs	r3, #1
    8c50:	607b      	str	r3, [r7, #4]
    8c52:	687b      	ldr	r3, [r7, #4]
    8c54:	2b00      	cmp	r3, #0
    8c56:	d1f1      	bne.n	8c3c <m2m_memset+0x18>
    8c58:	e000      	b.n	8c5c <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    8c5a:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    8c5c:	46bd      	mov	sp, r7
    8c5e:	b004      	add	sp, #16
    8c60:	bd80      	pop	{r7, pc}
    8c62:	46c0      	nop			; (mov r8, r8)

00008c64 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    8c64:	b580      	push	{r7, lr}
    8c66:	b084      	sub	sp, #16
    8c68:	af00      	add	r7, sp, #0
    8c6a:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    8c6c:	230e      	movs	r3, #14
    8c6e:	18fb      	adds	r3, r7, r3
    8c70:	2200      	movs	r2, #0
    8c72:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    8c74:	e009      	b.n	8c8a <m2m_strlen+0x26>
	{
		u16StrLen ++;
    8c76:	230e      	movs	r3, #14
    8c78:	18fb      	adds	r3, r7, r3
    8c7a:	881a      	ldrh	r2, [r3, #0]
    8c7c:	230e      	movs	r3, #14
    8c7e:	18fb      	adds	r3, r7, r3
    8c80:	3201      	adds	r2, #1
    8c82:	801a      	strh	r2, [r3, #0]
		pcStr++;
    8c84:	687b      	ldr	r3, [r7, #4]
    8c86:	3301      	adds	r3, #1
    8c88:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    8c8a:	687b      	ldr	r3, [r7, #4]
    8c8c:	781b      	ldrb	r3, [r3, #0]
    8c8e:	2b00      	cmp	r3, #0
    8c90:	d1f1      	bne.n	8c76 <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    8c92:	230e      	movs	r3, #14
    8c94:	18fb      	adds	r3, r7, r3
    8c96:	881b      	ldrh	r3, [r3, #0]
}
    8c98:	0018      	movs	r0, r3
    8c9a:	46bd      	mov	sp, r7
    8c9c:	b004      	add	sp, #16
    8c9e:	bd80      	pop	{r7, pc}

00008ca0 <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
    8ca0:	b580      	push	{r7, lr}
    8ca2:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    8ca4:	4b04      	ldr	r3, [pc, #16]	; (8cb8 <isr+0x18>)
    8ca6:	78db      	ldrb	r3, [r3, #3]
    8ca8:	b2db      	uxtb	r3, r3
    8caa:	3301      	adds	r3, #1
    8cac:	b2da      	uxtb	r2, r3
    8cae:	4b02      	ldr	r3, [pc, #8]	; (8cb8 <isr+0x18>)
    8cb0:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    8cb2:	46c0      	nop			; (mov r8, r8)
    8cb4:	46bd      	mov	sp, r7
    8cb6:	bd80      	pop	{r7, pc}
    8cb8:	20000278 	.word	0x20000278

00008cbc <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    8cbc:	b590      	push	{r4, r7, lr}
    8cbe:	b083      	sub	sp, #12
    8cc0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    8cc2:	1dfb      	adds	r3, r7, #7
    8cc4:	2200      	movs	r2, #0
    8cc6:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    8cc8:	4b14      	ldr	r3, [pc, #80]	; (8d1c <hif_set_rx_done+0x60>)
    8cca:	2200      	movs	r2, #0
    8ccc:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    8cce:	2001      	movs	r0, #1
    8cd0:	4b13      	ldr	r3, [pc, #76]	; (8d20 <hif_set_rx_done+0x64>)
    8cd2:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    8cd4:	1dfc      	adds	r4, r7, #7
    8cd6:	003b      	movs	r3, r7
    8cd8:	4a12      	ldr	r2, [pc, #72]	; (8d24 <hif_set_rx_done+0x68>)
    8cda:	0019      	movs	r1, r3
    8cdc:	0010      	movs	r0, r2
    8cde:	4b12      	ldr	r3, [pc, #72]	; (8d28 <hif_set_rx_done+0x6c>)
    8ce0:	4798      	blx	r3
    8ce2:	0003      	movs	r3, r0
    8ce4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    8ce6:	1dfb      	adds	r3, r7, #7
    8ce8:	781b      	ldrb	r3, [r3, #0]
    8cea:	b25b      	sxtb	r3, r3
    8cec:	2b00      	cmp	r3, #0
    8cee:	d10d      	bne.n	8d0c <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    8cf0:	683b      	ldr	r3, [r7, #0]
    8cf2:	2202      	movs	r2, #2
    8cf4:	4313      	orrs	r3, r2
    8cf6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    8cf8:	683b      	ldr	r3, [r7, #0]
    8cfa:	1dfc      	adds	r4, r7, #7
    8cfc:	4a09      	ldr	r2, [pc, #36]	; (8d24 <hif_set_rx_done+0x68>)
    8cfe:	0019      	movs	r1, r3
    8d00:	0010      	movs	r0, r2
    8d02:	4b0a      	ldr	r3, [pc, #40]	; (8d2c <hif_set_rx_done+0x70>)
    8d04:	4798      	blx	r3
    8d06:	0003      	movs	r3, r0
    8d08:	7023      	strb	r3, [r4, #0]
    8d0a:	e000      	b.n	8d0e <hif_set_rx_done+0x52>
	gstrHifCxt.u8HifRXDone = 0;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    8d0c:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    8d0e:	1dfb      	adds	r3, r7, #7
    8d10:	781b      	ldrb	r3, [r3, #0]
    8d12:	b25b      	sxtb	r3, r3

}
    8d14:	0018      	movs	r0, r3
    8d16:	46bd      	mov	sp, r7
    8d18:	b003      	add	sp, #12
    8d1a:	bd90      	pop	{r4, r7, pc}
    8d1c:	20000278 	.word	0x20000278
    8d20:	000083d5 	.word	0x000083d5
    8d24:	00001070 	.word	0x00001070
    8d28:	0000ac69 	.word	0x0000ac69
    8d2c:	0000ac8d 	.word	0x0000ac8d

00008d30 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    8d30:	b580      	push	{r7, lr}
    8d32:	b082      	sub	sp, #8
    8d34:	af00      	add	r7, sp, #0
    8d36:	603a      	str	r2, [r7, #0]
    8d38:	1dfb      	adds	r3, r7, #7
    8d3a:	1c02      	adds	r2, r0, #0
    8d3c:	701a      	strb	r2, [r3, #0]
    8d3e:	1d3b      	adds	r3, r7, #4
    8d40:	1c0a      	adds	r2, r1, #0
    8d42:	801a      	strh	r2, [r3, #0]


}
    8d44:	46c0      	nop			; (mov r8, r8)
    8d46:	46bd      	mov	sp, r7
    8d48:	b002      	add	sp, #8
    8d4a:	bd80      	pop	{r7, pc}

00008d4c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    8d4c:	b590      	push	{r4, r7, lr}
    8d4e:	b083      	sub	sp, #12
    8d50:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    8d52:	1dfb      	adds	r3, r7, #7
    8d54:	2200      	movs	r2, #0
    8d56:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    8d58:	4b16      	ldr	r3, [pc, #88]	; (8db4 <hif_chip_wake+0x68>)
    8d5a:	789b      	ldrb	r3, [r3, #2]
    8d5c:	b2db      	uxtb	r3, r3
    8d5e:	2b00      	cmp	r3, #0
    8d60:	d003      	beq.n	8d6a <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    8d62:	1dfb      	adds	r3, r7, #7
    8d64:	781b      	ldrb	r3, [r3, #0]
    8d66:	b25b      	sxtb	r3, r3
    8d68:	e01f      	b.n	8daa <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    8d6a:	4b12      	ldr	r3, [pc, #72]	; (8db4 <hif_chip_wake+0x68>)
    8d6c:	785b      	ldrb	r3, [r3, #1]
    8d6e:	b2db      	uxtb	r3, r3
    8d70:	2b00      	cmp	r3, #0
    8d72:	d10e      	bne.n	8d92 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    8d74:	4b0f      	ldr	r3, [pc, #60]	; (8db4 <hif_chip_wake+0x68>)
    8d76:	781b      	ldrb	r3, [r3, #0]
    8d78:	b2db      	uxtb	r3, r3
    8d7a:	2b00      	cmp	r3, #0
    8d7c:	d009      	beq.n	8d92 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    8d7e:	1dfc      	adds	r4, r7, #7
    8d80:	4b0d      	ldr	r3, [pc, #52]	; (8db8 <hif_chip_wake+0x6c>)
    8d82:	4798      	blx	r3
    8d84:	0003      	movs	r3, r0
    8d86:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    8d88:	1dfb      	adds	r3, r7, #7
    8d8a:	781b      	ldrb	r3, [r3, #0]
    8d8c:	b25b      	sxtb	r3, r3
    8d8e:	2b00      	cmp	r3, #0
    8d90:	d107      	bne.n	8da2 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    8d92:	4b08      	ldr	r3, [pc, #32]	; (8db4 <hif_chip_wake+0x68>)
    8d94:	785b      	ldrb	r3, [r3, #1]
    8d96:	b2db      	uxtb	r3, r3
    8d98:	3301      	adds	r3, #1
    8d9a:	b2da      	uxtb	r2, r3
    8d9c:	4b05      	ldr	r3, [pc, #20]	; (8db4 <hif_chip_wake+0x68>)
    8d9e:	705a      	strb	r2, [r3, #1]
    8da0:	e000      	b.n	8da4 <hif_chip_wake+0x58>
	if(gstrHifCxt.u8ChipSleep == 0)
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
		{
			ret = chip_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
    8da2:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
ERR1:
	return ret;
    8da4:	1dfb      	adds	r3, r7, #7
    8da6:	781b      	ldrb	r3, [r3, #0]
    8da8:	b25b      	sxtb	r3, r3
}
    8daa:	0018      	movs	r0, r3
    8dac:	46bd      	mov	sp, r7
    8dae:	b003      	add	sp, #12
    8db0:	bd90      	pop	{r4, r7, pc}
    8db2:	46c0      	nop			; (mov r8, r8)
    8db4:	20000278 	.word	0x20000278
    8db8:	0000a73d 	.word	0x0000a73d

00008dbc <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    8dbc:	b580      	push	{r7, lr}
    8dbe:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    8dc0:	4b07      	ldr	r3, [pc, #28]	; (8de0 <hif_chip_sleep_sc+0x24>)
    8dc2:	785b      	ldrb	r3, [r3, #1]
    8dc4:	b2db      	uxtb	r3, r3
    8dc6:	2b00      	cmp	r3, #0
    8dc8:	d006      	beq.n	8dd8 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    8dca:	4b05      	ldr	r3, [pc, #20]	; (8de0 <hif_chip_sleep_sc+0x24>)
    8dcc:	785b      	ldrb	r3, [r3, #1]
    8dce:	b2db      	uxtb	r3, r3
    8dd0:	3b01      	subs	r3, #1
    8dd2:	b2da      	uxtb	r2, r3
    8dd4:	4b02      	ldr	r3, [pc, #8]	; (8de0 <hif_chip_sleep_sc+0x24>)
    8dd6:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    8dd8:	2300      	movs	r3, #0
}
    8dda:	0018      	movs	r0, r3
    8ddc:	46bd      	mov	sp, r7
    8dde:	bd80      	pop	{r7, pc}
    8de0:	20000278 	.word	0x20000278

00008de4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    8de4:	b590      	push	{r4, r7, lr}
    8de6:	b083      	sub	sp, #12
    8de8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    8dea:	1dfb      	adds	r3, r7, #7
    8dec:	2200      	movs	r2, #0
    8dee:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    8df0:	4b10      	ldr	r3, [pc, #64]	; (8e34 <hif_chip_sleep+0x50>)
    8df2:	785b      	ldrb	r3, [r3, #1]
    8df4:	b2db      	uxtb	r3, r3
    8df6:	2b00      	cmp	r3, #0
    8df8:	d006      	beq.n	8e08 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    8dfa:	4b0e      	ldr	r3, [pc, #56]	; (8e34 <hif_chip_sleep+0x50>)
    8dfc:	785b      	ldrb	r3, [r3, #1]
    8dfe:	b2db      	uxtb	r3, r3
    8e00:	3b01      	subs	r3, #1
    8e02:	b2da      	uxtb	r2, r3
    8e04:	4b0b      	ldr	r3, [pc, #44]	; (8e34 <hif_chip_sleep+0x50>)
    8e06:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    8e08:	4b0a      	ldr	r3, [pc, #40]	; (8e34 <hif_chip_sleep+0x50>)
    8e0a:	785b      	ldrb	r3, [r3, #1]
    8e0c:	b2db      	uxtb	r3, r3
    8e0e:	2b00      	cmp	r3, #0
    8e10:	d109      	bne.n	8e26 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    8e12:	4b08      	ldr	r3, [pc, #32]	; (8e34 <hif_chip_sleep+0x50>)
    8e14:	781b      	ldrb	r3, [r3, #0]
    8e16:	b2db      	uxtb	r3, r3
    8e18:	2b00      	cmp	r3, #0
    8e1a:	d004      	beq.n	8e26 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    8e1c:	1dfc      	adds	r4, r7, #7
    8e1e:	4b06      	ldr	r3, [pc, #24]	; (8e38 <hif_chip_sleep+0x54>)
    8e20:	4798      	blx	r3
    8e22:	0003      	movs	r3, r0
    8e24:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    8e26:	1dfb      	adds	r3, r7, #7
    8e28:	781b      	ldrb	r3, [r3, #0]
    8e2a:	b25b      	sxtb	r3, r3
}
    8e2c:	0018      	movs	r0, r3
    8e2e:	46bd      	mov	sp, r7
    8e30:	b003      	add	sp, #12
    8e32:	bd90      	pop	{r4, r7, pc}
    8e34:	20000278 	.word	0x20000278
    8e38:	0000a665 	.word	0x0000a665

00008e3c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    8e3c:	b580      	push	{r7, lr}
    8e3e:	b082      	sub	sp, #8
    8e40:	af00      	add	r7, sp, #0
    8e42:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    8e44:	4b09      	ldr	r3, [pc, #36]	; (8e6c <hif_init+0x30>)
    8e46:	2228      	movs	r2, #40	; 0x28
    8e48:	2100      	movs	r1, #0
    8e4a:	0018      	movs	r0, r3
    8e4c:	4b08      	ldr	r3, [pc, #32]	; (8e70 <hif_init+0x34>)
    8e4e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    8e50:	4b08      	ldr	r3, [pc, #32]	; (8e74 <hif_init+0x38>)
    8e52:	0018      	movs	r0, r3
    8e54:	4b08      	ldr	r3, [pc, #32]	; (8e78 <hif_init+0x3c>)
    8e56:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    8e58:	4b08      	ldr	r3, [pc, #32]	; (8e7c <hif_init+0x40>)
    8e5a:	0019      	movs	r1, r3
    8e5c:	2003      	movs	r0, #3
    8e5e:	4b08      	ldr	r3, [pc, #32]	; (8e80 <hif_init+0x44>)
    8e60:	4798      	blx	r3
	return M2M_SUCCESS;
    8e62:	2300      	movs	r3, #0
}
    8e64:	0018      	movs	r0, r3
    8e66:	46bd      	mov	sp, r7
    8e68:	b002      	add	sp, #8
    8e6a:	bd80      	pop	{r7, pc}
    8e6c:	20000278 	.word	0x20000278
    8e70:	00008c25 	.word	0x00008c25
    8e74:	00008ca1 	.word	0x00008ca1
    8e78:	0000835d 	.word	0x0000835d
    8e7c:	00008d31 	.word	0x00008d31
    8e80:	000098f9 	.word	0x000098f9

00008e84 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    8e84:	b590      	push	{r4, r7, lr}
    8e86:	b089      	sub	sp, #36	; 0x24
    8e88:	af00      	add	r7, sp, #0
    8e8a:	0004      	movs	r4, r0
    8e8c:	0008      	movs	r0, r1
    8e8e:	603a      	str	r2, [r7, #0]
    8e90:	0019      	movs	r1, r3
    8e92:	1dfb      	adds	r3, r7, #7
    8e94:	1c22      	adds	r2, r4, #0
    8e96:	701a      	strb	r2, [r3, #0]
    8e98:	1dbb      	adds	r3, r7, #6
    8e9a:	1c02      	adds	r2, r0, #0
    8e9c:	701a      	strb	r2, [r3, #0]
    8e9e:	1d3b      	adds	r3, r7, #4
    8ea0:	1c0a      	adds	r2, r1, #0
    8ea2:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    8ea4:	231f      	movs	r3, #31
    8ea6:	18fb      	adds	r3, r7, r3
    8ea8:	22ff      	movs	r2, #255	; 0xff
    8eaa:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    8eac:	1dbb      	adds	r3, r7, #6
    8eae:	781b      	ldrb	r3, [r3, #0]
    8eb0:	227f      	movs	r2, #127	; 0x7f
    8eb2:	4013      	ands	r3, r2
    8eb4:	b2da      	uxtb	r2, r3
    8eb6:	2318      	movs	r3, #24
    8eb8:	18fb      	adds	r3, r7, r3
    8eba:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    8ebc:	2318      	movs	r3, #24
    8ebe:	18fb      	adds	r3, r7, r3
    8ec0:	1dfa      	adds	r2, r7, #7
    8ec2:	7812      	ldrb	r2, [r2, #0]
    8ec4:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    8ec6:	2318      	movs	r3, #24
    8ec8:	18fb      	adds	r3, r7, r3
    8eca:	2208      	movs	r2, #8
    8ecc:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    8ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	d011      	beq.n	8ef8 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    8ed4:	2318      	movs	r3, #24
    8ed6:	18fb      	adds	r3, r7, r3
    8ed8:	885b      	ldrh	r3, [r3, #2]
    8eda:	b29a      	uxth	r2, r3
    8edc:	2338      	movs	r3, #56	; 0x38
    8ede:	18f9      	adds	r1, r7, r3
    8ee0:	2334      	movs	r3, #52	; 0x34
    8ee2:	18fb      	adds	r3, r7, r3
    8ee4:	8809      	ldrh	r1, [r1, #0]
    8ee6:	881b      	ldrh	r3, [r3, #0]
    8ee8:	18cb      	adds	r3, r1, r3
    8eea:	b29b      	uxth	r3, r3
    8eec:	18d3      	adds	r3, r2, r3
    8eee:	b29a      	uxth	r2, r3
    8ef0:	2318      	movs	r3, #24
    8ef2:	18fb      	adds	r3, r7, r3
    8ef4:	805a      	strh	r2, [r3, #2]
    8ef6:	e00a      	b.n	8f0e <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    8ef8:	2318      	movs	r3, #24
    8efa:	18fb      	adds	r3, r7, r3
    8efc:	885b      	ldrh	r3, [r3, #2]
    8efe:	b29a      	uxth	r2, r3
    8f00:	1d3b      	adds	r3, r7, #4
    8f02:	881b      	ldrh	r3, [r3, #0]
    8f04:	18d3      	adds	r3, r2, r3
    8f06:	b29a      	uxth	r2, r3
    8f08:	2318      	movs	r3, #24
    8f0a:	18fb      	adds	r3, r7, r3
    8f0c:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    8f0e:	231f      	movs	r3, #31
    8f10:	18fc      	adds	r4, r7, r3
    8f12:	4bb0      	ldr	r3, [pc, #704]	; (91d4 <hif_send+0x350>)
    8f14:	4798      	blx	r3
    8f16:	0003      	movs	r3, r0
    8f18:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    8f1a:	231f      	movs	r3, #31
    8f1c:	18fb      	adds	r3, r7, r3
    8f1e:	781b      	ldrb	r3, [r3, #0]
    8f20:	b25b      	sxtb	r3, r3
    8f22:	2b00      	cmp	r3, #0
    8f24:	d000      	beq.n	8f28 <hif_send+0xa4>
    8f26:	e127      	b.n	9178 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
    8f28:	2300      	movs	r3, #0
    8f2a:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    8f2c:	230e      	movs	r3, #14
    8f2e:	18fb      	adds	r3, r7, r3
    8f30:	2200      	movs	r2, #0
    8f32:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    8f34:	2300      	movs	r3, #0
    8f36:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    8f38:	1dfb      	adds	r3, r7, #7
    8f3a:	781a      	ldrb	r2, [r3, #0]
    8f3c:	697b      	ldr	r3, [r7, #20]
    8f3e:	4313      	orrs	r3, r2
    8f40:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    8f42:	1dbb      	adds	r3, r7, #6
    8f44:	781b      	ldrb	r3, [r3, #0]
    8f46:	021a      	lsls	r2, r3, #8
    8f48:	697b      	ldr	r3, [r7, #20]
    8f4a:	4313      	orrs	r3, r2
    8f4c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    8f4e:	2318      	movs	r3, #24
    8f50:	18fb      	adds	r3, r7, r3
    8f52:	885b      	ldrh	r3, [r3, #2]
    8f54:	b29b      	uxth	r3, r3
    8f56:	041a      	lsls	r2, r3, #16
    8f58:	697b      	ldr	r3, [r7, #20]
    8f5a:	4313      	orrs	r3, r2
    8f5c:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    8f5e:	697b      	ldr	r3, [r7, #20]
    8f60:	221f      	movs	r2, #31
    8f62:	18bc      	adds	r4, r7, r2
    8f64:	4a9c      	ldr	r2, [pc, #624]	; (91d8 <hif_send+0x354>)
    8f66:	0019      	movs	r1, r3
    8f68:	0010      	movs	r0, r2
    8f6a:	4b9c      	ldr	r3, [pc, #624]	; (91dc <hif_send+0x358>)
    8f6c:	4798      	blx	r3
    8f6e:	0003      	movs	r3, r0
    8f70:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    8f72:	231f      	movs	r3, #31
    8f74:	18fb      	adds	r3, r7, r3
    8f76:	781b      	ldrb	r3, [r3, #0]
    8f78:	b25b      	sxtb	r3, r3
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	d000      	beq.n	8f80 <hif_send+0xfc>
    8f7e:	e115      	b.n	91ac <hif_send+0x328>

		reg = 0UL;
    8f80:	2300      	movs	r3, #0
    8f82:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    8f84:	697b      	ldr	r3, [r7, #20]
    8f86:	2202      	movs	r2, #2
    8f88:	4313      	orrs	r3, r2
    8f8a:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    8f8c:	697b      	ldr	r3, [r7, #20]
    8f8e:	221f      	movs	r2, #31
    8f90:	18bc      	adds	r4, r7, r2
    8f92:	4a93      	ldr	r2, [pc, #588]	; (91e0 <hif_send+0x35c>)
    8f94:	0019      	movs	r1, r3
    8f96:	0010      	movs	r0, r2
    8f98:	4b90      	ldr	r3, [pc, #576]	; (91dc <hif_send+0x358>)
    8f9a:	4798      	blx	r3
    8f9c:	0003      	movs	r3, r0
    8f9e:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    8fa0:	231f      	movs	r3, #31
    8fa2:	18fb      	adds	r3, r7, r3
    8fa4:	781b      	ldrb	r3, [r3, #0]
    8fa6:	b25b      	sxtb	r3, r3
    8fa8:	2b00      	cmp	r3, #0
    8faa:	d000      	beq.n	8fae <hif_send+0x12a>
    8fac:	e100      	b.n	91b0 <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    8fae:	2300      	movs	r3, #0
    8fb0:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    8fb2:	230e      	movs	r3, #14
    8fb4:	18fb      	adds	r3, r7, r3
    8fb6:	2200      	movs	r2, #0
    8fb8:	801a      	strh	r2, [r3, #0]
    8fba:	e04f      	b.n	905c <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    8fbc:	231f      	movs	r3, #31
    8fbe:	18fc      	adds	r4, r7, r3
    8fc0:	2314      	movs	r3, #20
    8fc2:	18fb      	adds	r3, r7, r3
    8fc4:	4a86      	ldr	r2, [pc, #536]	; (91e0 <hif_send+0x35c>)
    8fc6:	0019      	movs	r1, r3
    8fc8:	0010      	movs	r0, r2
    8fca:	4b86      	ldr	r3, [pc, #536]	; (91e4 <hif_send+0x360>)
    8fcc:	4798      	blx	r3
    8fce:	0003      	movs	r3, r0
    8fd0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    8fd2:	231f      	movs	r3, #31
    8fd4:	18fb      	adds	r3, r7, r3
    8fd6:	781b      	ldrb	r3, [r3, #0]
    8fd8:	b25b      	sxtb	r3, r3
    8fda:	2b00      	cmp	r3, #0
    8fdc:	d146      	bne.n	906c <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    8fde:	230e      	movs	r3, #14
    8fe0:	18fb      	adds	r3, r7, r3
    8fe2:	881b      	ldrh	r3, [r3, #0]
    8fe4:	b29a      	uxth	r2, r3
    8fe6:	23f4      	movs	r3, #244	; 0xf4
    8fe8:	33ff      	adds	r3, #255	; 0xff
    8fea:	429a      	cmp	r2, r3
    8fec:	d915      	bls.n	901a <hif_send+0x196>
				if(cnt < 501) {
    8fee:	230e      	movs	r3, #14
    8ff0:	18fb      	adds	r3, r7, r3
    8ff2:	881b      	ldrh	r3, [r3, #0]
    8ff4:	b29a      	uxth	r2, r3
    8ff6:	23fa      	movs	r3, #250	; 0xfa
    8ff8:	005b      	lsls	r3, r3, #1
    8ffa:	429a      	cmp	r2, r3
    8ffc:	d80a      	bhi.n	9014 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
    8ffe:	4b7a      	ldr	r3, [pc, #488]	; (91e8 <hif_send+0x364>)
    9000:	0018      	movs	r0, r3
    9002:	4b7a      	ldr	r3, [pc, #488]	; (91ec <hif_send+0x368>)
    9004:	4798      	blx	r3
    9006:	4b7a      	ldr	r3, [pc, #488]	; (91f0 <hif_send+0x36c>)
    9008:	0018      	movs	r0, r3
    900a:	4b7a      	ldr	r3, [pc, #488]	; (91f4 <hif_send+0x370>)
    900c:	4798      	blx	r3
    900e:	200d      	movs	r0, #13
    9010:	4b79      	ldr	r3, [pc, #484]	; (91f8 <hif_send+0x374>)
    9012:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    9014:	2001      	movs	r0, #1
    9016:	4b79      	ldr	r3, [pc, #484]	; (91fc <hif_send+0x378>)
    9018:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    901a:	697b      	ldr	r3, [r7, #20]
    901c:	2202      	movs	r2, #2
    901e:	4013      	ands	r3, r2
    9020:	d113      	bne.n	904a <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    9022:	231f      	movs	r3, #31
    9024:	18fc      	adds	r4, r7, r3
    9026:	2310      	movs	r3, #16
    9028:	18fb      	adds	r3, r7, r3
    902a:	4a75      	ldr	r2, [pc, #468]	; (9200 <hif_send+0x37c>)
    902c:	0019      	movs	r1, r3
    902e:	0010      	movs	r0, r2
    9030:	4b6c      	ldr	r3, [pc, #432]	; (91e4 <hif_send+0x360>)
    9032:	4798      	blx	r3
    9034:	0003      	movs	r3, r0
    9036:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    9038:	231f      	movs	r3, #31
    903a:	18fb      	adds	r3, r7, r3
    903c:	781b      	ldrb	r3, [r3, #0]
    903e:	b25b      	sxtb	r3, r3
    9040:	2b00      	cmp	r3, #0
    9042:	d015      	beq.n	9070 <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    9044:	2300      	movs	r3, #0
    9046:	613b      	str	r3, [r7, #16]
					goto ERR1;
    9048:	e0b9      	b.n	91be <hif_send+0x33a>
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
		
		for(cnt = 0; cnt < 1000; cnt ++)
    904a:	230e      	movs	r3, #14
    904c:	18fb      	adds	r3, r7, r3
    904e:	881b      	ldrh	r3, [r3, #0]
    9050:	b29b      	uxth	r3, r3
    9052:	3301      	adds	r3, #1
    9054:	b29a      	uxth	r2, r3
    9056:	230e      	movs	r3, #14
    9058:	18fb      	adds	r3, r7, r3
    905a:	801a      	strh	r2, [r3, #0]
    905c:	230e      	movs	r3, #14
    905e:	18fb      	adds	r3, r7, r3
    9060:	881b      	ldrh	r3, [r3, #0]
    9062:	b29b      	uxth	r3, r3
    9064:	4a67      	ldr	r2, [pc, #412]	; (9204 <hif_send+0x380>)
    9066:	4293      	cmp	r3, r2
    9068:	d9a8      	bls.n	8fbc <hif_send+0x138>
    906a:	e002      	b.n	9072 <hif_send+0x1ee>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    906c:	46c0      	nop			; (mov r8, r8)
    906e:	e000      	b.n	9072 <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
					goto ERR1;
				}
				/*in case of success break */
				break;
    9070:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    9072:	693b      	ldr	r3, [r7, #16]
    9074:	2b00      	cmp	r3, #0
    9076:	d100      	bne.n	907a <hif_send+0x1f6>
    9078:	e073      	b.n	9162 <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    907a:	693b      	ldr	r3, [r7, #16]
    907c:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    907e:	2318      	movs	r3, #24
    9080:	18fb      	adds	r3, r7, r3
    9082:	885b      	ldrh	r3, [r3, #2]
    9084:	b29a      	uxth	r2, r3
    9086:	2318      	movs	r3, #24
    9088:	18fb      	adds	r3, r7, r3
    908a:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    908c:	68bb      	ldr	r3, [r7, #8]
    908e:	221f      	movs	r2, #31
    9090:	18bc      	adds	r4, r7, r2
    9092:	2218      	movs	r2, #24
    9094:	18b9      	adds	r1, r7, r2
    9096:	2208      	movs	r2, #8
    9098:	0018      	movs	r0, r3
    909a:	4b5b      	ldr	r3, [pc, #364]	; (9208 <hif_send+0x384>)
    909c:	4798      	blx	r3
    909e:	0003      	movs	r3, r0
    90a0:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    90a2:	231f      	movs	r3, #31
    90a4:	18fb      	adds	r3, r7, r3
    90a6:	781b      	ldrb	r3, [r3, #0]
    90a8:	b25b      	sxtb	r3, r3
    90aa:	2b00      	cmp	r3, #0
    90ac:	d000      	beq.n	90b0 <hif_send+0x22c>
    90ae:	e081      	b.n	91b4 <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    90b0:	68bb      	ldr	r3, [r7, #8]
    90b2:	3308      	adds	r3, #8
    90b4:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    90b6:	683b      	ldr	r3, [r7, #0]
    90b8:	2b00      	cmp	r3, #0
    90ba:	d015      	beq.n	90e8 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    90bc:	68b8      	ldr	r0, [r7, #8]
    90be:	1d3b      	adds	r3, r7, #4
    90c0:	881a      	ldrh	r2, [r3, #0]
    90c2:	231f      	movs	r3, #31
    90c4:	18fc      	adds	r4, r7, r3
    90c6:	683b      	ldr	r3, [r7, #0]
    90c8:	0019      	movs	r1, r3
    90ca:	4b4f      	ldr	r3, [pc, #316]	; (9208 <hif_send+0x384>)
    90cc:	4798      	blx	r3
    90ce:	0003      	movs	r3, r0
    90d0:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    90d2:	231f      	movs	r3, #31
    90d4:	18fb      	adds	r3, r7, r3
    90d6:	781b      	ldrb	r3, [r3, #0]
    90d8:	b25b      	sxtb	r3, r3
    90da:	2b00      	cmp	r3, #0
    90dc:	d16c      	bne.n	91b8 <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    90de:	1d3b      	adds	r3, r7, #4
    90e0:	881a      	ldrh	r2, [r3, #0]
    90e2:	68bb      	ldr	r3, [r7, #8]
    90e4:	18d3      	adds	r3, r2, r3
    90e6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    90e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    90ea:	2b00      	cmp	r3, #0
    90ec:	d021      	beq.n	9132 <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    90ee:	2338      	movs	r3, #56	; 0x38
    90f0:	18fb      	adds	r3, r7, r3
    90f2:	881a      	ldrh	r2, [r3, #0]
    90f4:	1d3b      	adds	r3, r7, #4
    90f6:	881b      	ldrh	r3, [r3, #0]
    90f8:	1ad3      	subs	r3, r2, r3
    90fa:	001a      	movs	r2, r3
    90fc:	68bb      	ldr	r3, [r7, #8]
    90fe:	18d3      	adds	r3, r2, r3
    9100:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    9102:	68b8      	ldr	r0, [r7, #8]
    9104:	2334      	movs	r3, #52	; 0x34
    9106:	18fb      	adds	r3, r7, r3
    9108:	881a      	ldrh	r2, [r3, #0]
    910a:	231f      	movs	r3, #31
    910c:	18fc      	adds	r4, r7, r3
    910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9110:	0019      	movs	r1, r3
    9112:	4b3d      	ldr	r3, [pc, #244]	; (9208 <hif_send+0x384>)
    9114:	4798      	blx	r3
    9116:	0003      	movs	r3, r0
    9118:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    911a:	231f      	movs	r3, #31
    911c:	18fb      	adds	r3, r7, r3
    911e:	781b      	ldrb	r3, [r3, #0]
    9120:	b25b      	sxtb	r3, r3
    9122:	2b00      	cmp	r3, #0
    9124:	d14a      	bne.n	91bc <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    9126:	2334      	movs	r3, #52	; 0x34
    9128:	18fb      	adds	r3, r7, r3
    912a:	881a      	ldrh	r2, [r3, #0]
    912c:	68bb      	ldr	r3, [r7, #8]
    912e:	18d3      	adds	r3, r2, r3
    9130:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    9132:	693b      	ldr	r3, [r7, #16]
    9134:	009b      	lsls	r3, r3, #2
    9136:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    9138:	697b      	ldr	r3, [r7, #20]
    913a:	2202      	movs	r2, #2
    913c:	4313      	orrs	r3, r2
    913e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    9140:	697b      	ldr	r3, [r7, #20]
    9142:	221f      	movs	r2, #31
    9144:	18bc      	adds	r4, r7, r2
    9146:	4a31      	ldr	r2, [pc, #196]	; (920c <hif_send+0x388>)
    9148:	0019      	movs	r1, r3
    914a:	0010      	movs	r0, r2
    914c:	4b23      	ldr	r3, [pc, #140]	; (91dc <hif_send+0x358>)
    914e:	4798      	blx	r3
    9150:	0003      	movs	r3, r0
    9152:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    9154:	231f      	movs	r3, #31
    9156:	18fb      	adds	r3, r7, r3
    9158:	781b      	ldrb	r3, [r3, #0]
    915a:	b25b      	sxtb	r3, r3
    915c:	2b00      	cmp	r3, #0
    915e:	d01a      	beq.n	9196 <hif_send+0x312>
    9160:	e02d      	b.n	91be <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    9162:	231f      	movs	r3, #31
    9164:	18fc      	adds	r4, r7, r3
    9166:	4b2a      	ldr	r3, [pc, #168]	; (9210 <hif_send+0x38c>)
    9168:	4798      	blx	r3
    916a:	0003      	movs	r3, r0
    916c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    916e:	231f      	movs	r3, #31
    9170:	18fb      	adds	r3, r7, r3
    9172:	22fd      	movs	r2, #253	; 0xfd
    9174:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    9176:	e024      	b.n	91c2 <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    9178:	23cb      	movs	r3, #203	; 0xcb
    917a:	005a      	lsls	r2, r3, #1
    917c:	4925      	ldr	r1, [pc, #148]	; (9214 <hif_send+0x390>)
    917e:	4b26      	ldr	r3, [pc, #152]	; (9218 <hif_send+0x394>)
    9180:	0018      	movs	r0, r3
    9182:	4b1a      	ldr	r3, [pc, #104]	; (91ec <hif_send+0x368>)
    9184:	4798      	blx	r3
    9186:	4b25      	ldr	r3, [pc, #148]	; (921c <hif_send+0x398>)
    9188:	0018      	movs	r0, r3
    918a:	4b1a      	ldr	r3, [pc, #104]	; (91f4 <hif_send+0x370>)
    918c:	4798      	blx	r3
    918e:	200d      	movs	r0, #13
    9190:	4b19      	ldr	r3, [pc, #100]	; (91f8 <hif_send+0x374>)
    9192:	4798      	blx	r3
		goto ERR2;
    9194:	e015      	b.n	91c2 <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    9196:	231f      	movs	r3, #31
    9198:	18fc      	adds	r4, r7, r3
    919a:	4b1d      	ldr	r3, [pc, #116]	; (9210 <hif_send+0x38c>)
    919c:	4798      	blx	r3
    919e:	0003      	movs	r3, r0
    91a0:	7023      	strb	r3, [r4, #0]
	return ret;
    91a2:	231f      	movs	r3, #31
    91a4:	18fb      	adds	r3, r7, r3
    91a6:	781b      	ldrb	r3, [r3, #0]
    91a8:	b25b      	sxtb	r3, r3
    91aa:	e00e      	b.n	91ca <hif_send+0x346>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    91ac:	46c0      	nop			; (mov r8, r8)
    91ae:	e006      	b.n	91be <hif_send+0x33a>

		reg = 0UL;
		reg |= NBIT1;
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    91b0:	46c0      	nop			; (mov r8, r8)
    91b2:	e004      	b.n	91be <hif_send+0x33a>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
			if(M2M_SUCCESS != ret) goto ERR1;
    91b4:	46c0      	nop			; (mov r8, r8)
    91b6:	e002      	b.n	91be <hif_send+0x33a>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
			if(pu8CtrlBuf != NULL)
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    91b8:	46c0      	nop			; (mov r8, r8)
    91ba:	e000      	b.n	91be <hif_send+0x33a>
			}
			if(pu8DataBuf != NULL)
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
				if(M2M_SUCCESS != ret) goto ERR1;
    91bc:	46c0      	nop			; (mov r8, r8)
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    91be:	4b18      	ldr	r3, [pc, #96]	; (9220 <hif_send+0x39c>)
    91c0:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    91c2:	231f      	movs	r3, #31
    91c4:	18fb      	adds	r3, r7, r3
    91c6:	781b      	ldrb	r3, [r3, #0]
    91c8:	b25b      	sxtb	r3, r3
}
    91ca:	0018      	movs	r0, r3
    91cc:	46bd      	mov	sp, r7
    91ce:	b009      	add	sp, #36	; 0x24
    91d0:	bd90      	pop	{r4, r7, pc}
    91d2:	46c0      	nop			; (mov r8, r8)
    91d4:	00008d4d 	.word	0x00008d4d
    91d8:	0000108c 	.word	0x0000108c
    91dc:	0000ac8d 	.word	0x0000ac8d
    91e0:	00001078 	.word	0x00001078
    91e4:	0000ac69 	.word	0x0000ac69
    91e8:	0001833c 	.word	0x0001833c
    91ec:	00016db1 	.word	0x00016db1
    91f0:	00018348 	.word	0x00018348
    91f4:	00016ed1 	.word	0x00016ed1
    91f8:	00016de5 	.word	0x00016de5
    91fc:	00008335 	.word	0x00008335
    9200:	00150400 	.word	0x00150400
    9204:	000003e7 	.word	0x000003e7
    9208:	0000add5 	.word	0x0000add5
    920c:	0000106c 	.word	0x0000106c
    9210:	00008de5 	.word	0x00008de5
    9214:	00018650 	.word	0x00018650
    9218:	00018358 	.word	0x00018358
    921c:	0001836c 	.word	0x0001836c
    9220:	00008dbd 	.word	0x00008dbd

00009224 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    9224:	b590      	push	{r4, r7, lr}
    9226:	b087      	sub	sp, #28
    9228:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    922a:	230f      	movs	r3, #15
    922c:	18fb      	adds	r3, r7, r3
    922e:	2200      	movs	r2, #0
    9230:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    9232:	230f      	movs	r3, #15
    9234:	18fc      	adds	r4, r7, r3
    9236:	2308      	movs	r3, #8
    9238:	18fb      	adds	r3, r7, r3
    923a:	4ad6      	ldr	r2, [pc, #856]	; (9594 <hif_isr+0x370>)
    923c:	0019      	movs	r1, r3
    923e:	0010      	movs	r0, r2
    9240:	4bd5      	ldr	r3, [pc, #852]	; (9598 <hif_isr+0x374>)
    9242:	4798      	blx	r3
    9244:	0003      	movs	r3, r0
    9246:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    9248:	230f      	movs	r3, #15
    924a:	18fb      	adds	r3, r7, r3
    924c:	781b      	ldrb	r3, [r3, #0]
    924e:	b25b      	sxtb	r3, r3
    9250:	2b00      	cmp	r3, #0
    9252:	d000      	beq.n	9256 <hif_isr+0x32>
    9254:	e217      	b.n	9686 <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    9256:	68bb      	ldr	r3, [r7, #8]
    9258:	2201      	movs	r2, #1
    925a:	4013      	ands	r3, r2
    925c:	d100      	bne.n	9260 <hif_isr+0x3c>
    925e:	e1fd      	b.n	965c <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    9260:	2000      	movs	r0, #0
    9262:	4bce      	ldr	r3, [pc, #824]	; (959c <hif_isr+0x378>)
    9264:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    9266:	68bb      	ldr	r3, [r7, #8]
    9268:	2201      	movs	r2, #1
    926a:	4393      	bics	r3, r2
    926c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    926e:	68bb      	ldr	r3, [r7, #8]
    9270:	220f      	movs	r2, #15
    9272:	18bc      	adds	r4, r7, r2
    9274:	4ac7      	ldr	r2, [pc, #796]	; (9594 <hif_isr+0x370>)
    9276:	0019      	movs	r1, r3
    9278:	0010      	movs	r0, r2
    927a:	4bc9      	ldr	r3, [pc, #804]	; (95a0 <hif_isr+0x37c>)
    927c:	4798      	blx	r3
    927e:	0003      	movs	r3, r0
    9280:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    9282:	230f      	movs	r3, #15
    9284:	18fb      	adds	r3, r7, r3
    9286:	781b      	ldrb	r3, [r3, #0]
    9288:	b25b      	sxtb	r3, r3
    928a:	2b00      	cmp	r3, #0
    928c:	d000      	beq.n	9290 <hif_isr+0x6c>
    928e:	e208      	b.n	96a2 <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    9290:	4bc4      	ldr	r3, [pc, #784]	; (95a4 <hif_isr+0x380>)
    9292:	2201      	movs	r2, #1
    9294:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    9296:	68bb      	ldr	r3, [r7, #8]
    9298:	089b      	lsrs	r3, r3, #2
    929a:	b29a      	uxth	r2, r3
    929c:	230c      	movs	r3, #12
    929e:	18fb      	adds	r3, r7, r3
    92a0:	0512      	lsls	r2, r2, #20
    92a2:	0d12      	lsrs	r2, r2, #20
    92a4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    92a6:	230c      	movs	r3, #12
    92a8:	18fb      	adds	r3, r7, r3
    92aa:	881b      	ldrh	r3, [r3, #0]
    92ac:	2b00      	cmp	r3, #0
    92ae:	d100      	bne.n	92b2 <hif_isr+0x8e>
    92b0:	e1c1      	b.n	9636 <hif_isr+0x412>
				uint32 address = 0;
    92b2:	2300      	movs	r3, #0
    92b4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    92b6:	230f      	movs	r3, #15
    92b8:	18fc      	adds	r4, r7, r3
    92ba:	003b      	movs	r3, r7
    92bc:	4aba      	ldr	r2, [pc, #744]	; (95a8 <hif_isr+0x384>)
    92be:	0019      	movs	r1, r3
    92c0:	0010      	movs	r0, r2
    92c2:	4bb5      	ldr	r3, [pc, #724]	; (9598 <hif_isr+0x374>)
    92c4:	4798      	blx	r3
    92c6:	0003      	movs	r3, r0
    92c8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    92ca:	230f      	movs	r3, #15
    92cc:	18fb      	adds	r3, r7, r3
    92ce:	781b      	ldrb	r3, [r3, #0]
    92d0:	b25b      	sxtb	r3, r3
    92d2:	2b00      	cmp	r3, #0
    92d4:	d012      	beq.n	92fc <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    92d6:	23c8      	movs	r3, #200	; 0xc8
    92d8:	33ff      	adds	r3, #255	; 0xff
    92da:	001a      	movs	r2, r3
    92dc:	49b3      	ldr	r1, [pc, #716]	; (95ac <hif_isr+0x388>)
    92de:	4bb4      	ldr	r3, [pc, #720]	; (95b0 <hif_isr+0x38c>)
    92e0:	0018      	movs	r0, r3
    92e2:	4bb4      	ldr	r3, [pc, #720]	; (95b4 <hif_isr+0x390>)
    92e4:	4798      	blx	r3
    92e6:	4bb4      	ldr	r3, [pc, #720]	; (95b8 <hif_isr+0x394>)
    92e8:	0018      	movs	r0, r3
    92ea:	4bb4      	ldr	r3, [pc, #720]	; (95bc <hif_isr+0x398>)
    92ec:	4798      	blx	r3
    92ee:	200d      	movs	r0, #13
    92f0:	4bb3      	ldr	r3, [pc, #716]	; (95c0 <hif_isr+0x39c>)
    92f2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    92f4:	2001      	movs	r0, #1
    92f6:	4ba9      	ldr	r3, [pc, #676]	; (959c <hif_isr+0x378>)
    92f8:	4798      	blx	r3
					goto ERR1;
    92fa:	e1d3      	b.n	96a4 <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    92fc:	683a      	ldr	r2, [r7, #0]
    92fe:	4ba9      	ldr	r3, [pc, #676]	; (95a4 <hif_isr+0x380>)
    9300:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    9302:	230c      	movs	r3, #12
    9304:	18fb      	adds	r3, r7, r3
    9306:	881a      	ldrh	r2, [r3, #0]
    9308:	4ba6      	ldr	r3, [pc, #664]	; (95a4 <hif_isr+0x380>)
    930a:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    930c:	683b      	ldr	r3, [r7, #0]
    930e:	220f      	movs	r2, #15
    9310:	18bc      	adds	r4, r7, r2
    9312:	1d39      	adds	r1, r7, #4
    9314:	2204      	movs	r2, #4
    9316:	0018      	movs	r0, r3
    9318:	4baa      	ldr	r3, [pc, #680]	; (95c4 <hif_isr+0x3a0>)
    931a:	4798      	blx	r3
    931c:	0003      	movs	r3, r0
    931e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    9320:	1d3b      	adds	r3, r7, #4
    9322:	885b      	ldrh	r3, [r3, #2]
    9324:	b29a      	uxth	r2, r3
    9326:	1d3b      	adds	r3, r7, #4
    9328:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    932a:	230f      	movs	r3, #15
    932c:	18fb      	adds	r3, r7, r3
    932e:	781b      	ldrb	r3, [r3, #0]
    9330:	b25b      	sxtb	r3, r3
    9332:	2b00      	cmp	r3, #0
    9334:	d012      	beq.n	935c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    9336:	23d2      	movs	r3, #210	; 0xd2
    9338:	33ff      	adds	r3, #255	; 0xff
    933a:	001a      	movs	r2, r3
    933c:	499b      	ldr	r1, [pc, #620]	; (95ac <hif_isr+0x388>)
    933e:	4b9c      	ldr	r3, [pc, #624]	; (95b0 <hif_isr+0x38c>)
    9340:	0018      	movs	r0, r3
    9342:	4b9c      	ldr	r3, [pc, #624]	; (95b4 <hif_isr+0x390>)
    9344:	4798      	blx	r3
    9346:	4ba0      	ldr	r3, [pc, #640]	; (95c8 <hif_isr+0x3a4>)
    9348:	0018      	movs	r0, r3
    934a:	4b9c      	ldr	r3, [pc, #624]	; (95bc <hif_isr+0x398>)
    934c:	4798      	blx	r3
    934e:	200d      	movs	r0, #13
    9350:	4b9b      	ldr	r3, [pc, #620]	; (95c0 <hif_isr+0x39c>)
    9352:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    9354:	2001      	movs	r0, #1
    9356:	4b91      	ldr	r3, [pc, #580]	; (959c <hif_isr+0x378>)
    9358:	4798      	blx	r3
					goto ERR1;
    935a:	e1a3      	b.n	96a4 <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    935c:	1d3b      	adds	r3, r7, #4
    935e:	885b      	ldrh	r3, [r3, #2]
    9360:	b29b      	uxth	r3, r3
    9362:	220c      	movs	r2, #12
    9364:	18ba      	adds	r2, r7, r2
    9366:	8812      	ldrh	r2, [r2, #0]
    9368:	429a      	cmp	r2, r3
    936a:	d02d      	beq.n	93c8 <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    936c:	230c      	movs	r3, #12
    936e:	18fb      	adds	r3, r7, r3
    9370:	881b      	ldrh	r3, [r3, #0]
    9372:	1d3a      	adds	r2, r7, #4
    9374:	8852      	ldrh	r2, [r2, #2]
    9376:	b292      	uxth	r2, r2
    9378:	1a9b      	subs	r3, r3, r2
    937a:	2b04      	cmp	r3, #4
    937c:	dd24      	ble.n	93c8 <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    937e:	23ed      	movs	r3, #237	; 0xed
    9380:	005a      	lsls	r2, r3, #1
    9382:	498a      	ldr	r1, [pc, #552]	; (95ac <hif_isr+0x388>)
    9384:	4b8a      	ldr	r3, [pc, #552]	; (95b0 <hif_isr+0x38c>)
    9386:	0018      	movs	r0, r3
    9388:	4b8a      	ldr	r3, [pc, #552]	; (95b4 <hif_isr+0x390>)
    938a:	4798      	blx	r3
    938c:	230c      	movs	r3, #12
    938e:	18fb      	adds	r3, r7, r3
    9390:	8819      	ldrh	r1, [r3, #0]
    9392:	1d3b      	adds	r3, r7, #4
    9394:	885b      	ldrh	r3, [r3, #2]
    9396:	b29b      	uxth	r3, r3
    9398:	001a      	movs	r2, r3
    939a:	1d3b      	adds	r3, r7, #4
    939c:	781b      	ldrb	r3, [r3, #0]
    939e:	b2db      	uxtb	r3, r3
    93a0:	001c      	movs	r4, r3
    93a2:	1d3b      	adds	r3, r7, #4
    93a4:	785b      	ldrb	r3, [r3, #1]
    93a6:	b2db      	uxtb	r3, r3
    93a8:	4888      	ldr	r0, [pc, #544]	; (95cc <hif_isr+0x3a8>)
    93aa:	9300      	str	r3, [sp, #0]
    93ac:	0023      	movs	r3, r4
    93ae:	4c81      	ldr	r4, [pc, #516]	; (95b4 <hif_isr+0x390>)
    93b0:	47a0      	blx	r4
    93b2:	200d      	movs	r0, #13
    93b4:	4b82      	ldr	r3, [pc, #520]	; (95c0 <hif_isr+0x39c>)
    93b6:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    93b8:	2001      	movs	r0, #1
    93ba:	4b78      	ldr	r3, [pc, #480]	; (959c <hif_isr+0x378>)
    93bc:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    93be:	230f      	movs	r3, #15
    93c0:	18fb      	adds	r3, r7, r3
    93c2:	22fa      	movs	r2, #250	; 0xfa
    93c4:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    93c6:	e16d      	b.n	96a4 <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    93c8:	1d3b      	adds	r3, r7, #4
    93ca:	781b      	ldrb	r3, [r3, #0]
    93cc:	b2db      	uxtb	r3, r3
    93ce:	2b01      	cmp	r3, #1
    93d0:	d120      	bne.n	9414 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    93d2:	4b74      	ldr	r3, [pc, #464]	; (95a4 <hif_isr+0x380>)
    93d4:	68db      	ldr	r3, [r3, #12]
    93d6:	2b00      	cmp	r3, #0
    93d8:	d00d      	beq.n	93f6 <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    93da:	4b72      	ldr	r3, [pc, #456]	; (95a4 <hif_isr+0x380>)
    93dc:	68db      	ldr	r3, [r3, #12]
    93de:	1d3a      	adds	r2, r7, #4
    93e0:	7852      	ldrb	r2, [r2, #1]
    93e2:	b2d0      	uxtb	r0, r2
    93e4:	1d3a      	adds	r2, r7, #4
    93e6:	8852      	ldrh	r2, [r2, #2]
    93e8:	b292      	uxth	r2, r2
    93ea:	3a08      	subs	r2, #8
    93ec:	b291      	uxth	r1, r2
    93ee:	683a      	ldr	r2, [r7, #0]
    93f0:	3208      	adds	r2, #8
    93f2:	4798      	blx	r3
    93f4:	e0fe      	b.n	95f4 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    93f6:	23f3      	movs	r3, #243	; 0xf3
    93f8:	005a      	lsls	r2, r3, #1
    93fa:	496c      	ldr	r1, [pc, #432]	; (95ac <hif_isr+0x388>)
    93fc:	4b6c      	ldr	r3, [pc, #432]	; (95b0 <hif_isr+0x38c>)
    93fe:	0018      	movs	r0, r3
    9400:	4b6c      	ldr	r3, [pc, #432]	; (95b4 <hif_isr+0x390>)
    9402:	4798      	blx	r3
    9404:	4b72      	ldr	r3, [pc, #456]	; (95d0 <hif_isr+0x3ac>)
    9406:	0018      	movs	r0, r3
    9408:	4b6c      	ldr	r3, [pc, #432]	; (95bc <hif_isr+0x398>)
    940a:	4798      	blx	r3
    940c:	200d      	movs	r0, #13
    940e:	4b6c      	ldr	r3, [pc, #432]	; (95c0 <hif_isr+0x39c>)
    9410:	4798      	blx	r3
    9412:	e0ef      	b.n	95f4 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    9414:	1d3b      	adds	r3, r7, #4
    9416:	781b      	ldrb	r3, [r3, #0]
    9418:	b2db      	uxtb	r3, r3
    941a:	2b02      	cmp	r3, #2
    941c:	d120      	bne.n	9460 <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    941e:	4b61      	ldr	r3, [pc, #388]	; (95a4 <hif_isr+0x380>)
    9420:	691b      	ldr	r3, [r3, #16]
    9422:	2b00      	cmp	r3, #0
    9424:	d00d      	beq.n	9442 <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9426:	4b5f      	ldr	r3, [pc, #380]	; (95a4 <hif_isr+0x380>)
    9428:	691b      	ldr	r3, [r3, #16]
    942a:	1d3a      	adds	r2, r7, #4
    942c:	7852      	ldrb	r2, [r2, #1]
    942e:	b2d0      	uxtb	r0, r2
    9430:	1d3a      	adds	r2, r7, #4
    9432:	8852      	ldrh	r2, [r2, #2]
    9434:	b292      	uxth	r2, r2
    9436:	3a08      	subs	r2, #8
    9438:	b291      	uxth	r1, r2
    943a:	683a      	ldr	r2, [r7, #0]
    943c:	3208      	adds	r2, #8
    943e:	4798      	blx	r3
    9440:	e0d8      	b.n	95f4 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    9442:	23f7      	movs	r3, #247	; 0xf7
    9444:	005a      	lsls	r2, r3, #1
    9446:	4959      	ldr	r1, [pc, #356]	; (95ac <hif_isr+0x388>)
    9448:	4b59      	ldr	r3, [pc, #356]	; (95b0 <hif_isr+0x38c>)
    944a:	0018      	movs	r0, r3
    944c:	4b59      	ldr	r3, [pc, #356]	; (95b4 <hif_isr+0x390>)
    944e:	4798      	blx	r3
    9450:	4b60      	ldr	r3, [pc, #384]	; (95d4 <hif_isr+0x3b0>)
    9452:	0018      	movs	r0, r3
    9454:	4b59      	ldr	r3, [pc, #356]	; (95bc <hif_isr+0x398>)
    9456:	4798      	blx	r3
    9458:	200d      	movs	r0, #13
    945a:	4b59      	ldr	r3, [pc, #356]	; (95c0 <hif_isr+0x39c>)
    945c:	4798      	blx	r3
    945e:	e0c9      	b.n	95f4 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    9460:	1d3b      	adds	r3, r7, #4
    9462:	781b      	ldrb	r3, [r3, #0]
    9464:	b2db      	uxtb	r3, r3
    9466:	2b04      	cmp	r3, #4
    9468:	d120      	bne.n	94ac <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    946a:	4b4e      	ldr	r3, [pc, #312]	; (95a4 <hif_isr+0x380>)
    946c:	695b      	ldr	r3, [r3, #20]
    946e:	2b00      	cmp	r3, #0
    9470:	d00d      	beq.n	948e <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9472:	4b4c      	ldr	r3, [pc, #304]	; (95a4 <hif_isr+0x380>)
    9474:	695b      	ldr	r3, [r3, #20]
    9476:	1d3a      	adds	r2, r7, #4
    9478:	7852      	ldrb	r2, [r2, #1]
    947a:	b2d0      	uxtb	r0, r2
    947c:	1d3a      	adds	r2, r7, #4
    947e:	8852      	ldrh	r2, [r2, #2]
    9480:	b292      	uxth	r2, r2
    9482:	3a08      	subs	r2, #8
    9484:	b291      	uxth	r1, r2
    9486:	683a      	ldr	r2, [r7, #0]
    9488:	3208      	adds	r2, #8
    948a:	4798      	blx	r3
    948c:	e0b2      	b.n	95f4 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    948e:	23fb      	movs	r3, #251	; 0xfb
    9490:	005a      	lsls	r2, r3, #1
    9492:	4946      	ldr	r1, [pc, #280]	; (95ac <hif_isr+0x388>)
    9494:	4b46      	ldr	r3, [pc, #280]	; (95b0 <hif_isr+0x38c>)
    9496:	0018      	movs	r0, r3
    9498:	4b46      	ldr	r3, [pc, #280]	; (95b4 <hif_isr+0x390>)
    949a:	4798      	blx	r3
    949c:	4b4e      	ldr	r3, [pc, #312]	; (95d8 <hif_isr+0x3b4>)
    949e:	0018      	movs	r0, r3
    94a0:	4b46      	ldr	r3, [pc, #280]	; (95bc <hif_isr+0x398>)
    94a2:	4798      	blx	r3
    94a4:	200d      	movs	r0, #13
    94a6:	4b46      	ldr	r3, [pc, #280]	; (95c0 <hif_isr+0x39c>)
    94a8:	4798      	blx	r3
    94aa:	e0a3      	b.n	95f4 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    94ac:	1d3b      	adds	r3, r7, #4
    94ae:	781b      	ldrb	r3, [r3, #0]
    94b0:	b2db      	uxtb	r3, r3
    94b2:	2b06      	cmp	r3, #6
    94b4:	d11f      	bne.n	94f6 <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    94b6:	4b3b      	ldr	r3, [pc, #236]	; (95a4 <hif_isr+0x380>)
    94b8:	6a1b      	ldr	r3, [r3, #32]
    94ba:	2b00      	cmp	r3, #0
    94bc:	d00d      	beq.n	94da <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    94be:	4b39      	ldr	r3, [pc, #228]	; (95a4 <hif_isr+0x380>)
    94c0:	6a1b      	ldr	r3, [r3, #32]
    94c2:	1d3a      	adds	r2, r7, #4
    94c4:	7852      	ldrb	r2, [r2, #1]
    94c6:	b2d0      	uxtb	r0, r2
    94c8:	1d3a      	adds	r2, r7, #4
    94ca:	8852      	ldrh	r2, [r2, #2]
    94cc:	b292      	uxth	r2, r2
    94ce:	3a08      	subs	r2, #8
    94d0:	b291      	uxth	r1, r2
    94d2:	683a      	ldr	r2, [r7, #0]
    94d4:	3208      	adds	r2, #8
    94d6:	4798      	blx	r3
    94d8:	e08c      	b.n	95f4 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    94da:	4a40      	ldr	r2, [pc, #256]	; (95dc <hif_isr+0x3b8>)
    94dc:	4933      	ldr	r1, [pc, #204]	; (95ac <hif_isr+0x388>)
    94de:	4b34      	ldr	r3, [pc, #208]	; (95b0 <hif_isr+0x38c>)
    94e0:	0018      	movs	r0, r3
    94e2:	4b34      	ldr	r3, [pc, #208]	; (95b4 <hif_isr+0x390>)
    94e4:	4798      	blx	r3
    94e6:	4b3e      	ldr	r3, [pc, #248]	; (95e0 <hif_isr+0x3bc>)
    94e8:	0018      	movs	r0, r3
    94ea:	4b34      	ldr	r3, [pc, #208]	; (95bc <hif_isr+0x398>)
    94ec:	4798      	blx	r3
    94ee:	200d      	movs	r0, #13
    94f0:	4b33      	ldr	r3, [pc, #204]	; (95c0 <hif_isr+0x39c>)
    94f2:	4798      	blx	r3
    94f4:	e07e      	b.n	95f4 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    94f6:	1d3b      	adds	r3, r7, #4
    94f8:	781b      	ldrb	r3, [r3, #0]
    94fa:	b2db      	uxtb	r3, r3
    94fc:	2b07      	cmp	r3, #7
    94fe:	d11f      	bne.n	9540 <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    9500:	4b28      	ldr	r3, [pc, #160]	; (95a4 <hif_isr+0x380>)
    9502:	699b      	ldr	r3, [r3, #24]
    9504:	2b00      	cmp	r3, #0
    9506:	d00d      	beq.n	9524 <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9508:	4b26      	ldr	r3, [pc, #152]	; (95a4 <hif_isr+0x380>)
    950a:	699b      	ldr	r3, [r3, #24]
    950c:	1d3a      	adds	r2, r7, #4
    950e:	7852      	ldrb	r2, [r2, #1]
    9510:	b2d0      	uxtb	r0, r2
    9512:	1d3a      	adds	r2, r7, #4
    9514:	8852      	ldrh	r2, [r2, #2]
    9516:	b292      	uxth	r2, r2
    9518:	3a08      	subs	r2, #8
    951a:	b291      	uxth	r1, r2
    951c:	683a      	ldr	r2, [r7, #0]
    951e:	3208      	adds	r2, #8
    9520:	4798      	blx	r3
    9522:	e067      	b.n	95f4 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    9524:	4a2f      	ldr	r2, [pc, #188]	; (95e4 <hif_isr+0x3c0>)
    9526:	4921      	ldr	r1, [pc, #132]	; (95ac <hif_isr+0x388>)
    9528:	4b21      	ldr	r3, [pc, #132]	; (95b0 <hif_isr+0x38c>)
    952a:	0018      	movs	r0, r3
    952c:	4b21      	ldr	r3, [pc, #132]	; (95b4 <hif_isr+0x390>)
    952e:	4798      	blx	r3
    9530:	4b2d      	ldr	r3, [pc, #180]	; (95e8 <hif_isr+0x3c4>)
    9532:	0018      	movs	r0, r3
    9534:	4b21      	ldr	r3, [pc, #132]	; (95bc <hif_isr+0x398>)
    9536:	4798      	blx	r3
    9538:	200d      	movs	r0, #13
    953a:	4b21      	ldr	r3, [pc, #132]	; (95c0 <hif_isr+0x39c>)
    953c:	4798      	blx	r3
    953e:	e059      	b.n	95f4 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    9540:	1d3b      	adds	r3, r7, #4
    9542:	781b      	ldrb	r3, [r3, #0]
    9544:	b2db      	uxtb	r3, r3
    9546:	2b05      	cmp	r3, #5
    9548:	d111      	bne.n	956e <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    954a:	4b16      	ldr	r3, [pc, #88]	; (95a4 <hif_isr+0x380>)
    954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    954e:	2b00      	cmp	r3, #0
    9550:	d050      	beq.n	95f4 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9552:	4b14      	ldr	r3, [pc, #80]	; (95a4 <hif_isr+0x380>)
    9554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9556:	1d3a      	adds	r2, r7, #4
    9558:	7852      	ldrb	r2, [r2, #1]
    955a:	b2d0      	uxtb	r0, r2
    955c:	1d3a      	adds	r2, r7, #4
    955e:	8852      	ldrh	r2, [r2, #2]
    9560:	b292      	uxth	r2, r2
    9562:	3a08      	subs	r2, #8
    9564:	b291      	uxth	r1, r2
    9566:	683a      	ldr	r2, [r7, #0]
    9568:	3208      	adds	r2, #8
    956a:	4798      	blx	r3
    956c:	e042      	b.n	95f4 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    956e:	4a1f      	ldr	r2, [pc, #124]	; (95ec <hif_isr+0x3c8>)
    9570:	490e      	ldr	r1, [pc, #56]	; (95ac <hif_isr+0x388>)
    9572:	4b0f      	ldr	r3, [pc, #60]	; (95b0 <hif_isr+0x38c>)
    9574:	0018      	movs	r0, r3
    9576:	4b0f      	ldr	r3, [pc, #60]	; (95b4 <hif_isr+0x390>)
    9578:	4798      	blx	r3
    957a:	4b1d      	ldr	r3, [pc, #116]	; (95f0 <hif_isr+0x3cc>)
    957c:	0018      	movs	r0, r3
    957e:	4b0f      	ldr	r3, [pc, #60]	; (95bc <hif_isr+0x398>)
    9580:	4798      	blx	r3
    9582:	200d      	movs	r0, #13
    9584:	4b0e      	ldr	r3, [pc, #56]	; (95c0 <hif_isr+0x39c>)
    9586:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    9588:	230f      	movs	r3, #15
    958a:	18fb      	adds	r3, r7, r3
    958c:	22fa      	movs	r2, #250	; 0xfa
    958e:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    9590:	e088      	b.n	96a4 <hif_isr+0x480>
    9592:	46c0      	nop			; (mov r8, r8)
    9594:	00001070 	.word	0x00001070
    9598:	0000ac69 	.word	0x0000ac69
    959c:	000083d5 	.word	0x000083d5
    95a0:	0000ac8d 	.word	0x0000ac8d
    95a4:	20000278 	.word	0x20000278
    95a8:	00001084 	.word	0x00001084
    95ac:	0001865c 	.word	0x0001865c
    95b0:	00018358 	.word	0x00018358
    95b4:	00016db1 	.word	0x00016db1
    95b8:	00018388 	.word	0x00018388
    95bc:	00016ed1 	.word	0x00016ed1
    95c0:	00016de5 	.word	0x00016de5
    95c4:	0000acdd 	.word	0x0000acdd
    95c8:	000183ac 	.word	0x000183ac
    95cc:	000183c4 	.word	0x000183c4
    95d0:	00018404 	.word	0x00018404
    95d4:	00018424 	.word	0x00018424
    95d8:	00018448 	.word	0x00018448
    95dc:	000001ff 	.word	0x000001ff
    95e0:	00018468 	.word	0x00018468
    95e4:	00000206 	.word	0x00000206
    95e8:	0001848c 	.word	0x0001848c
    95ec:	0000020f 	.word	0x0000020f
    95f0:	000184b0 	.word	0x000184b0
				}
				if(gstrHifCxt.u8HifRXDone)
    95f4:	4b2f      	ldr	r3, [pc, #188]	; (96b4 <hif_isr+0x490>)
    95f6:	789b      	ldrb	r3, [r3, #2]
    95f8:	b2db      	uxtb	r3, r3
    95fa:	2b00      	cmp	r3, #0
    95fc:	d052      	beq.n	96a4 <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    95fe:	4a2e      	ldr	r2, [pc, #184]	; (96b8 <hif_isr+0x494>)
    9600:	492e      	ldr	r1, [pc, #184]	; (96bc <hif_isr+0x498>)
    9602:	4b2f      	ldr	r3, [pc, #188]	; (96c0 <hif_isr+0x49c>)
    9604:	0018      	movs	r0, r3
    9606:	4b2f      	ldr	r3, [pc, #188]	; (96c4 <hif_isr+0x4a0>)
    9608:	4798      	blx	r3
    960a:	1d3b      	adds	r3, r7, #4
    960c:	781b      	ldrb	r3, [r3, #0]
    960e:	b2db      	uxtb	r3, r3
    9610:	0019      	movs	r1, r3
    9612:	1d3b      	adds	r3, r7, #4
    9614:	785b      	ldrb	r3, [r3, #1]
    9616:	b2db      	uxtb	r3, r3
    9618:	001a      	movs	r2, r3
    961a:	4b2b      	ldr	r3, [pc, #172]	; (96c8 <hif_isr+0x4a4>)
    961c:	0018      	movs	r0, r3
    961e:	4b29      	ldr	r3, [pc, #164]	; (96c4 <hif_isr+0x4a0>)
    9620:	4798      	blx	r3
    9622:	200d      	movs	r0, #13
    9624:	4b29      	ldr	r3, [pc, #164]	; (96cc <hif_isr+0x4a8>)
    9626:	4798      	blx	r3
					ret = hif_set_rx_done();
    9628:	230f      	movs	r3, #15
    962a:	18fc      	adds	r4, r7, r3
    962c:	4b28      	ldr	r3, [pc, #160]	; (96d0 <hif_isr+0x4ac>)
    962e:	4798      	blx	r3
    9630:	0003      	movs	r3, r0
    9632:	7023      	strb	r3, [r4, #0]
    9634:	e036      	b.n	96a4 <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    9636:	2387      	movs	r3, #135	; 0x87
    9638:	009a      	lsls	r2, r3, #2
    963a:	4920      	ldr	r1, [pc, #128]	; (96bc <hif_isr+0x498>)
    963c:	4b20      	ldr	r3, [pc, #128]	; (96c0 <hif_isr+0x49c>)
    963e:	0018      	movs	r0, r3
    9640:	4b20      	ldr	r3, [pc, #128]	; (96c4 <hif_isr+0x4a0>)
    9642:	4798      	blx	r3
    9644:	4b23      	ldr	r3, [pc, #140]	; (96d4 <hif_isr+0x4b0>)
    9646:	0018      	movs	r0, r3
    9648:	4b23      	ldr	r3, [pc, #140]	; (96d8 <hif_isr+0x4b4>)
    964a:	4798      	blx	r3
    964c:	200d      	movs	r0, #13
    964e:	4b1f      	ldr	r3, [pc, #124]	; (96cc <hif_isr+0x4a8>)
    9650:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    9652:	230f      	movs	r3, #15
    9654:	18fb      	adds	r3, r7, r3
    9656:	22fe      	movs	r2, #254	; 0xfe
    9658:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    965a:	e023      	b.n	96a4 <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    965c:	2389      	movs	r3, #137	; 0x89
    965e:	009a      	lsls	r2, r3, #2
    9660:	4916      	ldr	r1, [pc, #88]	; (96bc <hif_isr+0x498>)
    9662:	4b17      	ldr	r3, [pc, #92]	; (96c0 <hif_isr+0x49c>)
    9664:	0018      	movs	r0, r3
    9666:	4b17      	ldr	r3, [pc, #92]	; (96c4 <hif_isr+0x4a0>)
    9668:	4798      	blx	r3
    966a:	68ba      	ldr	r2, [r7, #8]
    966c:	4b1b      	ldr	r3, [pc, #108]	; (96dc <hif_isr+0x4b8>)
    966e:	0011      	movs	r1, r2
    9670:	0018      	movs	r0, r3
    9672:	4b14      	ldr	r3, [pc, #80]	; (96c4 <hif_isr+0x4a0>)
    9674:	4798      	blx	r3
    9676:	200d      	movs	r0, #13
    9678:	4b14      	ldr	r3, [pc, #80]	; (96cc <hif_isr+0x4a8>)
    967a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    967c:	230f      	movs	r3, #15
    967e:	18fb      	adds	r3, r7, r3
    9680:	22f4      	movs	r2, #244	; 0xf4
    9682:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    9684:	e00e      	b.n	96a4 <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    9686:	4a16      	ldr	r2, [pc, #88]	; (96e0 <hif_isr+0x4bc>)
    9688:	490c      	ldr	r1, [pc, #48]	; (96bc <hif_isr+0x498>)
    968a:	4b0d      	ldr	r3, [pc, #52]	; (96c0 <hif_isr+0x49c>)
    968c:	0018      	movs	r0, r3
    968e:	4b0d      	ldr	r3, [pc, #52]	; (96c4 <hif_isr+0x4a0>)
    9690:	4798      	blx	r3
    9692:	4b14      	ldr	r3, [pc, #80]	; (96e4 <hif_isr+0x4c0>)
    9694:	0018      	movs	r0, r3
    9696:	4b10      	ldr	r3, [pc, #64]	; (96d8 <hif_isr+0x4b4>)
    9698:	4798      	blx	r3
    969a:	200d      	movs	r0, #13
    969c:	4b0b      	ldr	r3, [pc, #44]	; (96cc <hif_isr+0x4a8>)
    969e:	4798      	blx	r3
		goto ERR1;
    96a0:	e000      	b.n	96a4 <hif_isr+0x480>

			nm_bsp_interrupt_ctrl(0);
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    96a2:	46c0      	nop			; (mov r8, r8)
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
		goto ERR1;
	}

ERR1:
	return ret;
    96a4:	230f      	movs	r3, #15
    96a6:	18fb      	adds	r3, r7, r3
    96a8:	781b      	ldrb	r3, [r3, #0]
    96aa:	b25b      	sxtb	r3, r3
}
    96ac:	0018      	movs	r0, r3
    96ae:	46bd      	mov	sp, r7
    96b0:	b005      	add	sp, #20
    96b2:	bd90      	pop	{r4, r7, pc}
    96b4:	20000278 	.word	0x20000278
    96b8:	00000215 	.word	0x00000215
    96bc:	0001865c 	.word	0x0001865c
    96c0:	00018358 	.word	0x00018358
    96c4:	00016db1 	.word	0x00016db1
    96c8:	000184c8 	.word	0x000184c8
    96cc:	00016de5 	.word	0x00016de5
    96d0:	00008cbd 	.word	0x00008cbd
    96d4:	000184f4 	.word	0x000184f4
    96d8:	00016ed1 	.word	0x00016ed1
    96dc:	00018508 	.word	0x00018508
    96e0:	0000022d 	.word	0x0000022d
    96e4:	00018524 	.word	0x00018524

000096e8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    96e8:	b590      	push	{r4, r7, lr}
    96ea:	b083      	sub	sp, #12
    96ec:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    96ee:	1dfb      	adds	r3, r7, #7
    96f0:	2200      	movs	r2, #0
    96f2:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    96f4:	e023      	b.n	973e <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    96f6:	4b18      	ldr	r3, [pc, #96]	; (9758 <hif_handle_isr+0x70>)
    96f8:	78db      	ldrb	r3, [r3, #3]
    96fa:	b2db      	uxtb	r3, r3
    96fc:	3b01      	subs	r3, #1
    96fe:	b2da      	uxtb	r2, r3
    9700:	4b15      	ldr	r3, [pc, #84]	; (9758 <hif_handle_isr+0x70>)
    9702:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    9704:	1dfc      	adds	r4, r7, #7
    9706:	4b15      	ldr	r3, [pc, #84]	; (975c <hif_handle_isr+0x74>)
    9708:	4798      	blx	r3
    970a:	0003      	movs	r3, r0
    970c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    970e:	1dfb      	adds	r3, r7, #7
    9710:	781b      	ldrb	r3, [r3, #0]
    9712:	b25b      	sxtb	r3, r3
    9714:	2b00      	cmp	r3, #0
    9716:	d100      	bne.n	971a <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    9718:	e011      	b.n	973e <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    971a:	4a11      	ldr	r2, [pc, #68]	; (9760 <hif_handle_isr+0x78>)
    971c:	4911      	ldr	r1, [pc, #68]	; (9764 <hif_handle_isr+0x7c>)
    971e:	4b12      	ldr	r3, [pc, #72]	; (9768 <hif_handle_isr+0x80>)
    9720:	0018      	movs	r0, r3
    9722:	4b12      	ldr	r3, [pc, #72]	; (976c <hif_handle_isr+0x84>)
    9724:	4798      	blx	r3
    9726:	1dfb      	adds	r3, r7, #7
    9728:	2200      	movs	r2, #0
    972a:	569a      	ldrsb	r2, [r3, r2]
    972c:	4b10      	ldr	r3, [pc, #64]	; (9770 <hif_handle_isr+0x88>)
    972e:	0011      	movs	r1, r2
    9730:	0018      	movs	r0, r3
    9732:	4b0e      	ldr	r3, [pc, #56]	; (976c <hif_handle_isr+0x84>)
    9734:	4798      	blx	r3
    9736:	200d      	movs	r0, #13
    9738:	4b0e      	ldr	r3, [pc, #56]	; (9774 <hif_handle_isr+0x8c>)
    973a:	4798      	blx	r3
			}
		}
    973c:	e7e2      	b.n	9704 <hif_handle_isr+0x1c>
*/

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    973e:	4b06      	ldr	r3, [pc, #24]	; (9758 <hif_handle_isr+0x70>)
    9740:	78db      	ldrb	r3, [r3, #3]
    9742:	b2db      	uxtb	r3, r3
    9744:	2b00      	cmp	r3, #0
    9746:	d1d6      	bne.n	96f6 <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    9748:	1dfb      	adds	r3, r7, #7
    974a:	781b      	ldrb	r3, [r3, #0]
    974c:	b25b      	sxtb	r3, r3
}
    974e:	0018      	movs	r0, r3
    9750:	46bd      	mov	sp, r7
    9752:	b003      	add	sp, #12
    9754:	bd90      	pop	{r4, r7, pc}
    9756:	46c0      	nop			; (mov r8, r8)
    9758:	20000278 	.word	0x20000278
    975c:	00009225 	.word	0x00009225
    9760:	0000024a 	.word	0x0000024a
    9764:	00018664 	.word	0x00018664
    9768:	00018358 	.word	0x00018358
    976c:	00016db1 	.word	0x00016db1
    9770:	00018548 	.word	0x00018548
    9774:	00016de5 	.word	0x00016de5

00009778 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    9778:	b590      	push	{r4, r7, lr}
    977a:	b087      	sub	sp, #28
    977c:	af00      	add	r7, sp, #0
    977e:	60f8      	str	r0, [r7, #12]
    9780:	60b9      	str	r1, [r7, #8]
    9782:	0019      	movs	r1, r3
    9784:	1dbb      	adds	r3, r7, #6
    9786:	801a      	strh	r2, [r3, #0]
    9788:	1d7b      	adds	r3, r7, #5
    978a:	1c0a      	adds	r2, r1, #0
    978c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    978e:	2317      	movs	r3, #23
    9790:	18fb      	adds	r3, r7, r3
    9792:	2200      	movs	r2, #0
    9794:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    9796:	68fb      	ldr	r3, [r7, #12]
    9798:	2b00      	cmp	r3, #0
    979a:	d006      	beq.n	97aa <hif_receive+0x32>
    979c:	68bb      	ldr	r3, [r7, #8]
    979e:	2b00      	cmp	r3, #0
    97a0:	d003      	beq.n	97aa <hif_receive+0x32>
    97a2:	1dbb      	adds	r3, r7, #6
    97a4:	881b      	ldrh	r3, [r3, #0]
    97a6:	2b00      	cmp	r3, #0
    97a8:	d11c      	bne.n	97e4 <hif_receive+0x6c>
	{
		if(isDone)
    97aa:	1d7b      	adds	r3, r7, #5
    97ac:	781b      	ldrb	r3, [r3, #0]
    97ae:	2b00      	cmp	r3, #0
    97b0:	d006      	beq.n	97c0 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    97b2:	2317      	movs	r3, #23
    97b4:	18fc      	adds	r4, r7, r3
    97b6:	4b42      	ldr	r3, [pc, #264]	; (98c0 <hif_receive+0x148>)
    97b8:	4798      	blx	r3
    97ba:	0003      	movs	r3, r0
    97bc:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    97be:	e077      	b.n	98b0 <hif_receive+0x138>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    97c0:	2317      	movs	r3, #23
    97c2:	18fb      	adds	r3, r7, r3
    97c4:	22f4      	movs	r2, #244	; 0xf4
    97c6:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    97c8:	4a3e      	ldr	r2, [pc, #248]	; (98c4 <hif_receive+0x14c>)
    97ca:	493f      	ldr	r1, [pc, #252]	; (98c8 <hif_receive+0x150>)
    97cc:	4b3f      	ldr	r3, [pc, #252]	; (98cc <hif_receive+0x154>)
    97ce:	0018      	movs	r0, r3
    97d0:	4b3f      	ldr	r3, [pc, #252]	; (98d0 <hif_receive+0x158>)
    97d2:	4798      	blx	r3
    97d4:	4b3f      	ldr	r3, [pc, #252]	; (98d4 <hif_receive+0x15c>)
    97d6:	0018      	movs	r0, r3
    97d8:	4b3f      	ldr	r3, [pc, #252]	; (98d8 <hif_receive+0x160>)
    97da:	4798      	blx	r3
    97dc:	200d      	movs	r0, #13
    97de:	4b3f      	ldr	r3, [pc, #252]	; (98dc <hif_receive+0x164>)
    97e0:	4798      	blx	r3
		}
		goto ERR1;
    97e2:	e065      	b.n	98b0 <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    97e4:	1dbb      	adds	r3, r7, #6
    97e6:	881a      	ldrh	r2, [r3, #0]
    97e8:	4b3d      	ldr	r3, [pc, #244]	; (98e0 <hif_receive+0x168>)
    97ea:	689b      	ldr	r3, [r3, #8]
    97ec:	429a      	cmp	r2, r3
    97ee:	d915      	bls.n	981c <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    97f0:	2317      	movs	r3, #23
    97f2:	18fb      	adds	r3, r7, r3
    97f4:	22f4      	movs	r2, #244	; 0xf4
    97f6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    97f8:	4a3a      	ldr	r2, [pc, #232]	; (98e4 <hif_receive+0x16c>)
    97fa:	4933      	ldr	r1, [pc, #204]	; (98c8 <hif_receive+0x150>)
    97fc:	4b33      	ldr	r3, [pc, #204]	; (98cc <hif_receive+0x154>)
    97fe:	0018      	movs	r0, r3
    9800:	4b33      	ldr	r3, [pc, #204]	; (98d0 <hif_receive+0x158>)
    9802:	4798      	blx	r3
    9804:	1dbb      	adds	r3, r7, #6
    9806:	8819      	ldrh	r1, [r3, #0]
    9808:	4b35      	ldr	r3, [pc, #212]	; (98e0 <hif_receive+0x168>)
    980a:	689a      	ldr	r2, [r3, #8]
    980c:	4b36      	ldr	r3, [pc, #216]	; (98e8 <hif_receive+0x170>)
    980e:	0018      	movs	r0, r3
    9810:	4b2f      	ldr	r3, [pc, #188]	; (98d0 <hif_receive+0x158>)
    9812:	4798      	blx	r3
    9814:	200d      	movs	r0, #13
    9816:	4b31      	ldr	r3, [pc, #196]	; (98dc <hif_receive+0x164>)
    9818:	4798      	blx	r3
		goto ERR1;
    981a:	e049      	b.n	98b0 <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    981c:	4b30      	ldr	r3, [pc, #192]	; (98e0 <hif_receive+0x168>)
    981e:	685a      	ldr	r2, [r3, #4]
    9820:	68fb      	ldr	r3, [r7, #12]
    9822:	429a      	cmp	r2, r3
    9824:	d80a      	bhi.n	983c <hif_receive+0xc4>
    9826:	1dbb      	adds	r3, r7, #6
    9828:	881a      	ldrh	r2, [r3, #0]
    982a:	68fb      	ldr	r3, [r7, #12]
    982c:	18d2      	adds	r2, r2, r3
    982e:	4b2c      	ldr	r3, [pc, #176]	; (98e0 <hif_receive+0x168>)
    9830:	6859      	ldr	r1, [r3, #4]
    9832:	4b2b      	ldr	r3, [pc, #172]	; (98e0 <hif_receive+0x168>)
    9834:	689b      	ldr	r3, [r3, #8]
    9836:	18cb      	adds	r3, r1, r3
    9838:	429a      	cmp	r2, r3
    983a:	d911      	bls.n	9860 <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    983c:	2317      	movs	r3, #23
    983e:	18fb      	adds	r3, r7, r3
    9840:	22f4      	movs	r2, #244	; 0xf4
    9842:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    9844:	4a29      	ldr	r2, [pc, #164]	; (98ec <hif_receive+0x174>)
    9846:	4920      	ldr	r1, [pc, #128]	; (98c8 <hif_receive+0x150>)
    9848:	4b20      	ldr	r3, [pc, #128]	; (98cc <hif_receive+0x154>)
    984a:	0018      	movs	r0, r3
    984c:	4b20      	ldr	r3, [pc, #128]	; (98d0 <hif_receive+0x158>)
    984e:	4798      	blx	r3
    9850:	4b27      	ldr	r3, [pc, #156]	; (98f0 <hif_receive+0x178>)
    9852:	0018      	movs	r0, r3
    9854:	4b20      	ldr	r3, [pc, #128]	; (98d8 <hif_receive+0x160>)
    9856:	4798      	blx	r3
    9858:	200d      	movs	r0, #13
    985a:	4b20      	ldr	r3, [pc, #128]	; (98dc <hif_receive+0x164>)
    985c:	4798      	blx	r3
		goto ERR1;
    985e:	e027      	b.n	98b0 <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    9860:	1dbb      	adds	r3, r7, #6
    9862:	881a      	ldrh	r2, [r3, #0]
    9864:	2317      	movs	r3, #23
    9866:	18fc      	adds	r4, r7, r3
    9868:	68b9      	ldr	r1, [r7, #8]
    986a:	68fb      	ldr	r3, [r7, #12]
    986c:	0018      	movs	r0, r3
    986e:	4b21      	ldr	r3, [pc, #132]	; (98f4 <hif_receive+0x17c>)
    9870:	4798      	blx	r3
    9872:	0003      	movs	r3, r0
    9874:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    9876:	2317      	movs	r3, #23
    9878:	18fb      	adds	r3, r7, r3
    987a:	781b      	ldrb	r3, [r3, #0]
    987c:	b25b      	sxtb	r3, r3
    987e:	2b00      	cmp	r3, #0
    9880:	d115      	bne.n	98ae <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    9882:	4b17      	ldr	r3, [pc, #92]	; (98e0 <hif_receive+0x168>)
    9884:	685a      	ldr	r2, [r3, #4]
    9886:	4b16      	ldr	r3, [pc, #88]	; (98e0 <hif_receive+0x168>)
    9888:	689b      	ldr	r3, [r3, #8]
    988a:	18d2      	adds	r2, r2, r3
    988c:	1dbb      	adds	r3, r7, #6
    988e:	8819      	ldrh	r1, [r3, #0]
    9890:	68fb      	ldr	r3, [r7, #12]
    9892:	18cb      	adds	r3, r1, r3
    9894:	429a      	cmp	r2, r3
    9896:	d003      	beq.n	98a0 <hif_receive+0x128>
    9898:	1d7b      	adds	r3, r7, #5
    989a:	781b      	ldrb	r3, [r3, #0]
    989c:	2b00      	cmp	r3, #0
    989e:	d007      	beq.n	98b0 <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    98a0:	2317      	movs	r3, #23
    98a2:	18fc      	adds	r4, r7, r3
    98a4:	4b06      	ldr	r3, [pc, #24]	; (98c0 <hif_receive+0x148>)
    98a6:	4798      	blx	r3
    98a8:	0003      	movs	r3, r0
    98aa:	7023      	strb	r3, [r4, #0]
    98ac:	e000      	b.n	98b0 <hif_receive+0x138>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    98ae:	46c0      	nop			; (mov r8, r8)
		/* set RX done */
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
    98b0:	2317      	movs	r3, #23
    98b2:	18fb      	adds	r3, r7, r3
    98b4:	781b      	ldrb	r3, [r3, #0]
    98b6:	b25b      	sxtb	r3, r3
}
    98b8:	0018      	movs	r0, r3
    98ba:	46bd      	mov	sp, r7
    98bc:	b007      	add	sp, #28
    98be:	bd90      	pop	{r4, r7, pc}
    98c0:	00008cbd 	.word	0x00008cbd
    98c4:	0000026b 	.word	0x0000026b
    98c8:	00018674 	.word	0x00018674
    98cc:	00018358 	.word	0x00018358
    98d0:	00016db1 	.word	0x00016db1
    98d4:	00018578 	.word	0x00018578
    98d8:	00016ed1 	.word	0x00016ed1
    98dc:	00016de5 	.word	0x00016de5
    98e0:	20000278 	.word	0x20000278
    98e4:	00000273 	.word	0x00000273
    98e8:	00018598 	.word	0x00018598
    98ec:	00000279 	.word	0x00000279
    98f0:	000185e0 	.word	0x000185e0
    98f4:	0000acdd 	.word	0x0000acdd

000098f8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    98f8:	b580      	push	{r7, lr}
    98fa:	b084      	sub	sp, #16
    98fc:	af00      	add	r7, sp, #0
    98fe:	0002      	movs	r2, r0
    9900:	6039      	str	r1, [r7, #0]
    9902:	1dfb      	adds	r3, r7, #7
    9904:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    9906:	230f      	movs	r3, #15
    9908:	18fb      	adds	r3, r7, r3
    990a:	2200      	movs	r2, #0
    990c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    990e:	1dfb      	adds	r3, r7, #7
    9910:	781b      	ldrb	r3, [r3, #0]
    9912:	2b07      	cmp	r3, #7
    9914:	d820      	bhi.n	9958 <hif_register_cb+0x60>
    9916:	009a      	lsls	r2, r3, #2
    9918:	4b1e      	ldr	r3, [pc, #120]	; (9994 <hif_register_cb+0x9c>)
    991a:	18d3      	adds	r3, r2, r3
    991c:	681b      	ldr	r3, [r3, #0]
    991e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    9920:	4b1d      	ldr	r3, [pc, #116]	; (9998 <hif_register_cb+0xa0>)
    9922:	683a      	ldr	r2, [r7, #0]
    9924:	611a      	str	r2, [r3, #16]
			break;
    9926:	e02c      	b.n	9982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    9928:	4b1b      	ldr	r3, [pc, #108]	; (9998 <hif_register_cb+0xa0>)
    992a:	683a      	ldr	r2, [r7, #0]
    992c:	60da      	str	r2, [r3, #12]
			break;
    992e:	e028      	b.n	9982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    9930:	4b19      	ldr	r3, [pc, #100]	; (9998 <hif_register_cb+0xa0>)
    9932:	683a      	ldr	r2, [r7, #0]
    9934:	615a      	str	r2, [r3, #20]
			break;
    9936:	e024      	b.n	9982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    9938:	4b17      	ldr	r3, [pc, #92]	; (9998 <hif_register_cb+0xa0>)
    993a:	683a      	ldr	r2, [r7, #0]
    993c:	61da      	str	r2, [r3, #28]
			break;
    993e:	e020      	b.n	9982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    9940:	4b15      	ldr	r3, [pc, #84]	; (9998 <hif_register_cb+0xa0>)
    9942:	683a      	ldr	r2, [r7, #0]
    9944:	621a      	str	r2, [r3, #32]
			break;
    9946:	e01c      	b.n	9982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    9948:	4b13      	ldr	r3, [pc, #76]	; (9998 <hif_register_cb+0xa0>)
    994a:	683a      	ldr	r2, [r7, #0]
    994c:	619a      	str	r2, [r3, #24]
			break;
    994e:	e018      	b.n	9982 <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    9950:	4b11      	ldr	r3, [pc, #68]	; (9998 <hif_register_cb+0xa0>)
    9952:	683a      	ldr	r2, [r7, #0]
    9954:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    9956:	e014      	b.n	9982 <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    9958:	4a10      	ldr	r2, [pc, #64]	; (999c <hif_register_cb+0xa4>)
    995a:	4911      	ldr	r1, [pc, #68]	; (99a0 <hif_register_cb+0xa8>)
    995c:	4b11      	ldr	r3, [pc, #68]	; (99a4 <hif_register_cb+0xac>)
    995e:	0018      	movs	r0, r3
    9960:	4b11      	ldr	r3, [pc, #68]	; (99a8 <hif_register_cb+0xb0>)
    9962:	4798      	blx	r3
    9964:	1dfb      	adds	r3, r7, #7
    9966:	781a      	ldrb	r2, [r3, #0]
    9968:	4b10      	ldr	r3, [pc, #64]	; (99ac <hif_register_cb+0xb4>)
    996a:	0011      	movs	r1, r2
    996c:	0018      	movs	r0, r3
    996e:	4b0e      	ldr	r3, [pc, #56]	; (99a8 <hif_register_cb+0xb0>)
    9970:	4798      	blx	r3
    9972:	200d      	movs	r0, #13
    9974:	4b0e      	ldr	r3, [pc, #56]	; (99b0 <hif_register_cb+0xb8>)
    9976:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9978:	230f      	movs	r3, #15
    997a:	18fb      	adds	r3, r7, r3
    997c:	22f4      	movs	r2, #244	; 0xf4
    997e:	701a      	strb	r2, [r3, #0]
			break;
    9980:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    9982:	230f      	movs	r3, #15
    9984:	18fb      	adds	r3, r7, r3
    9986:	781b      	ldrb	r3, [r3, #0]
    9988:	b25b      	sxtb	r3, r3
}
    998a:	0018      	movs	r0, r3
    998c:	46bd      	mov	sp, r7
    998e:	b004      	add	sp, #16
    9990:	bd80      	pop	{r7, pc}
    9992:	46c0      	nop			; (mov r8, r8)
    9994:	00018630 	.word	0x00018630
    9998:	20000278 	.word	0x20000278
    999c:	000002b1 	.word	0x000002b1
    99a0:	00018680 	.word	0x00018680
    99a4:	00018358 	.word	0x00018358
    99a8:	00016db1 	.word	0x00016db1
    99ac:	00018624 	.word	0x00018624
    99b0:	00016de5 	.word	0x00016de5

000099b4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    99b4:	b590      	push	{r4, r7, lr}
    99b6:	b0ad      	sub	sp, #180	; 0xb4
    99b8:	af02      	add	r7, sp, #8
    99ba:	603a      	str	r2, [r7, #0]
    99bc:	1dfb      	adds	r3, r7, #7
    99be:	1c02      	adds	r2, r0, #0
    99c0:	701a      	strb	r2, [r3, #0]
    99c2:	1d3b      	adds	r3, r7, #4
    99c4:	1c0a      	adds	r2, r1, #0
    99c6:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    99c8:	1dfb      	adds	r3, r7, #7
    99ca:	781b      	ldrb	r3, [r3, #0]
    99cc:	2b2c      	cmp	r3, #44	; 0x2c
    99ce:	d116      	bne.n	99fe <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    99d0:	239c      	movs	r3, #156	; 0x9c
    99d2:	18f9      	adds	r1, r7, r3
    99d4:	6838      	ldr	r0, [r7, #0]
    99d6:	2300      	movs	r3, #0
    99d8:	2204      	movs	r2, #4
    99da:	4cc8      	ldr	r4, [pc, #800]	; (9cfc <m2m_wifi_cb+0x348>)
    99dc:	47a0      	blx	r4
    99de:	1e03      	subs	r3, r0, #0
    99e0:	d000      	beq.n	99e4 <m2m_wifi_cb+0x30>
    99e2:	e1ae      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    99e4:	4bc6      	ldr	r3, [pc, #792]	; (9d00 <m2m_wifi_cb+0x34c>)
    99e6:	681b      	ldr	r3, [r3, #0]
    99e8:	2b00      	cmp	r3, #0
    99ea:	d100      	bne.n	99ee <m2m_wifi_cb+0x3a>
    99ec:	e1a9      	b.n	9d42 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    99ee:	4bc4      	ldr	r3, [pc, #784]	; (9d00 <m2m_wifi_cb+0x34c>)
    99f0:	681b      	ldr	r3, [r3, #0]
    99f2:	229c      	movs	r2, #156	; 0x9c
    99f4:	18ba      	adds	r2, r7, r2
    99f6:	0011      	movs	r1, r2
    99f8:	202c      	movs	r0, #44	; 0x2c
    99fa:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    99fc:	e1a1      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    99fe:	1dfb      	adds	r3, r7, #7
    9a00:	781b      	ldrb	r3, [r3, #0]
    9a02:	2b1b      	cmp	r3, #27
    9a04:	d116      	bne.n	9a34 <m2m_wifi_cb+0x80>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    9a06:	2394      	movs	r3, #148	; 0x94
    9a08:	18f9      	adds	r1, r7, r3
    9a0a:	6838      	ldr	r0, [r7, #0]
    9a0c:	2300      	movs	r3, #0
    9a0e:	2208      	movs	r2, #8
    9a10:	4cba      	ldr	r4, [pc, #744]	; (9cfc <m2m_wifi_cb+0x348>)
    9a12:	47a0      	blx	r4
    9a14:	1e03      	subs	r3, r0, #0
    9a16:	d000      	beq.n	9a1a <m2m_wifi_cb+0x66>
    9a18:	e193      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9a1a:	4bb9      	ldr	r3, [pc, #740]	; (9d00 <m2m_wifi_cb+0x34c>)
    9a1c:	681b      	ldr	r3, [r3, #0]
    9a1e:	2b00      	cmp	r3, #0
    9a20:	d100      	bne.n	9a24 <m2m_wifi_cb+0x70>
    9a22:	e18e      	b.n	9d42 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    9a24:	4bb6      	ldr	r3, [pc, #728]	; (9d00 <m2m_wifi_cb+0x34c>)
    9a26:	681b      	ldr	r3, [r3, #0]
    9a28:	2294      	movs	r2, #148	; 0x94
    9a2a:	18ba      	adds	r2, r7, r2
    9a2c:	0011      	movs	r1, r2
    9a2e:	201b      	movs	r0, #27
    9a30:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9a32:	e186      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    9a34:	1dfb      	adds	r3, r7, #7
    9a36:	781b      	ldrb	r3, [r3, #0]
    9a38:	2b06      	cmp	r3, #6
    9a3a:	d116      	bne.n	9a6a <m2m_wifi_cb+0xb6>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    9a3c:	2308      	movs	r3, #8
    9a3e:	18f9      	adds	r1, r7, r3
    9a40:	6838      	ldr	r0, [r7, #0]
    9a42:	2301      	movs	r3, #1
    9a44:	2230      	movs	r2, #48	; 0x30
    9a46:	4cad      	ldr	r4, [pc, #692]	; (9cfc <m2m_wifi_cb+0x348>)
    9a48:	47a0      	blx	r4
    9a4a:	1e03      	subs	r3, r0, #0
    9a4c:	d000      	beq.n	9a50 <m2m_wifi_cb+0x9c>
    9a4e:	e178      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
    9a50:	4bab      	ldr	r3, [pc, #684]	; (9d00 <m2m_wifi_cb+0x34c>)
    9a52:	681b      	ldr	r3, [r3, #0]
    9a54:	2b00      	cmp	r3, #0
    9a56:	d100      	bne.n	9a5a <m2m_wifi_cb+0xa6>
    9a58:	e173      	b.n	9d42 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    9a5a:	4ba9      	ldr	r3, [pc, #676]	; (9d00 <m2m_wifi_cb+0x34c>)
    9a5c:	681b      	ldr	r3, [r3, #0]
    9a5e:	2208      	movs	r2, #8
    9a60:	18ba      	adds	r2, r7, r2
    9a62:	0011      	movs	r1, r2
    9a64:	2006      	movs	r0, #6
    9a66:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9a68:	e16b      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    9a6a:	1dfb      	adds	r3, r7, #7
    9a6c:	781b      	ldrb	r3, [r3, #0]
    9a6e:	2b0e      	cmp	r3, #14
    9a70:	d100      	bne.n	9a74 <m2m_wifi_cb+0xc0>
    9a72:	e166      	b.n	9d42 <m2m_wifi_cb+0x38e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    9a74:	1dfb      	adds	r3, r7, #7
    9a76:	781b      	ldrb	r3, [r3, #0]
    9a78:	2b32      	cmp	r3, #50	; 0x32
    9a7a:	d116      	bne.n	9aaa <m2m_wifi_cb+0xf6>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    9a7c:	2380      	movs	r3, #128	; 0x80
    9a7e:	18f9      	adds	r1, r7, r3
    9a80:	6838      	ldr	r0, [r7, #0]
    9a82:	2300      	movs	r3, #0
    9a84:	2214      	movs	r2, #20
    9a86:	4c9d      	ldr	r4, [pc, #628]	; (9cfc <m2m_wifi_cb+0x348>)
    9a88:	47a0      	blx	r4
    9a8a:	1e03      	subs	r3, r0, #0
    9a8c:	d000      	beq.n	9a90 <m2m_wifi_cb+0xdc>
    9a8e:	e158      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9a90:	4b9b      	ldr	r3, [pc, #620]	; (9d00 <m2m_wifi_cb+0x34c>)
    9a92:	681b      	ldr	r3, [r3, #0]
    9a94:	2b00      	cmp	r3, #0
    9a96:	d100      	bne.n	9a9a <m2m_wifi_cb+0xe6>
    9a98:	e153      	b.n	9d42 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    9a9a:	4b99      	ldr	r3, [pc, #612]	; (9d00 <m2m_wifi_cb+0x34c>)
    9a9c:	681b      	ldr	r3, [r3, #0]
    9a9e:	2280      	movs	r2, #128	; 0x80
    9aa0:	18ba      	adds	r2, r7, r2
    9aa2:	0011      	movs	r1, r2
    9aa4:	2032      	movs	r0, #50	; 0x32
    9aa6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9aa8:	e14b      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    9aaa:	1dfb      	adds	r3, r7, #7
    9aac:	781b      	ldrb	r3, [r3, #0]
    9aae:	2b2f      	cmp	r3, #47	; 0x2f
    9ab0:	d11d      	bne.n	9aee <m2m_wifi_cb+0x13a>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    9ab2:	2308      	movs	r3, #8
    9ab4:	18fb      	adds	r3, r7, r3
    9ab6:	2264      	movs	r2, #100	; 0x64
    9ab8:	2100      	movs	r1, #0
    9aba:	0018      	movs	r0, r3
    9abc:	4b91      	ldr	r3, [pc, #580]	; (9d04 <m2m_wifi_cb+0x350>)
    9abe:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    9ac0:	2308      	movs	r3, #8
    9ac2:	18f9      	adds	r1, r7, r3
    9ac4:	6838      	ldr	r0, [r7, #0]
    9ac6:	2300      	movs	r3, #0
    9ac8:	2264      	movs	r2, #100	; 0x64
    9aca:	4c8c      	ldr	r4, [pc, #560]	; (9cfc <m2m_wifi_cb+0x348>)
    9acc:	47a0      	blx	r4
    9ace:	1e03      	subs	r3, r0, #0
    9ad0:	d000      	beq.n	9ad4 <m2m_wifi_cb+0x120>
    9ad2:	e136      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9ad4:	4b8a      	ldr	r3, [pc, #552]	; (9d00 <m2m_wifi_cb+0x34c>)
    9ad6:	681b      	ldr	r3, [r3, #0]
    9ad8:	2b00      	cmp	r3, #0
    9ada:	d100      	bne.n	9ade <m2m_wifi_cb+0x12a>
    9adc:	e131      	b.n	9d42 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    9ade:	4b88      	ldr	r3, [pc, #544]	; (9d00 <m2m_wifi_cb+0x34c>)
    9ae0:	681b      	ldr	r3, [r3, #0]
    9ae2:	2208      	movs	r2, #8
    9ae4:	18ba      	adds	r2, r7, r2
    9ae6:	0011      	movs	r1, r2
    9ae8:	202f      	movs	r0, #47	; 0x2f
    9aea:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9aec:	e129      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    9aee:	1dfb      	adds	r3, r7, #7
    9af0:	781b      	ldrb	r3, [r3, #0]
    9af2:	2b34      	cmp	r3, #52	; 0x34
    9af4:	d132      	bne.n	9b5c <m2m_wifi_cb+0x1a8>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    9af6:	237c      	movs	r3, #124	; 0x7c
    9af8:	18f9      	adds	r1, r7, r3
    9afa:	6838      	ldr	r0, [r7, #0]
    9afc:	2300      	movs	r3, #0
    9afe:	2204      	movs	r2, #4
    9b00:	4c7e      	ldr	r4, [pc, #504]	; (9cfc <m2m_wifi_cb+0x348>)
    9b02:	47a0      	blx	r4
    9b04:	1e03      	subs	r3, r0, #0
    9b06:	d000      	beq.n	9b0a <m2m_wifi_cb+0x156>
    9b08:	e11b      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    9b0a:	4b7f      	ldr	r3, [pc, #508]	; (9d08 <m2m_wifi_cb+0x354>)
    9b0c:	0018      	movs	r0, r3
    9b0e:	4b7f      	ldr	r3, [pc, #508]	; (9d0c <m2m_wifi_cb+0x358>)
    9b10:	4798      	blx	r3
    9b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9b14:	001a      	movs	r2, r3
    9b16:	23ff      	movs	r3, #255	; 0xff
    9b18:	401a      	ands	r2, r3
    9b1a:	0011      	movs	r1, r2
    9b1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9b1e:	0a1b      	lsrs	r3, r3, #8
    9b20:	001a      	movs	r2, r3
    9b22:	23ff      	movs	r3, #255	; 0xff
    9b24:	401a      	ands	r2, r3
    9b26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9b28:	0c1b      	lsrs	r3, r3, #16
    9b2a:	0018      	movs	r0, r3
    9b2c:	23ff      	movs	r3, #255	; 0xff
    9b2e:	4018      	ands	r0, r3
    9b30:	0004      	movs	r4, r0
    9b32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9b34:	0e1b      	lsrs	r3, r3, #24
    9b36:	4876      	ldr	r0, [pc, #472]	; (9d10 <m2m_wifi_cb+0x35c>)
    9b38:	9300      	str	r3, [sp, #0]
    9b3a:	0023      	movs	r3, r4
    9b3c:	4c73      	ldr	r4, [pc, #460]	; (9d0c <m2m_wifi_cb+0x358>)
    9b3e:	47a0      	blx	r4
    9b40:	200d      	movs	r0, #13
    9b42:	4b74      	ldr	r3, [pc, #464]	; (9d14 <m2m_wifi_cb+0x360>)
    9b44:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    9b46:	4b6e      	ldr	r3, [pc, #440]	; (9d00 <m2m_wifi_cb+0x34c>)
    9b48:	681b      	ldr	r3, [r3, #0]
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	d100      	bne.n	9b50 <m2m_wifi_cb+0x19c>
    9b4e:	e0f8      	b.n	9d42 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    9b50:	4b6b      	ldr	r3, [pc, #428]	; (9d00 <m2m_wifi_cb+0x34c>)
    9b52:	681b      	ldr	r3, [r3, #0]
    9b54:	2100      	movs	r1, #0
    9b56:	2034      	movs	r0, #52	; 0x34
    9b58:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9b5a:	e0f2      	b.n	9d42 <m2m_wifi_cb+0x38e>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    9b5c:	1dfb      	adds	r3, r7, #7
    9b5e:	781b      	ldrb	r3, [r3, #0]
    9b60:	2b11      	cmp	r3, #17
    9b62:	d11e      	bne.n	9ba2 <m2m_wifi_cb+0x1ee>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    9b64:	4b6c      	ldr	r3, [pc, #432]	; (9d18 <m2m_wifi_cb+0x364>)
    9b66:	2200      	movs	r2, #0
    9b68:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    9b6a:	2378      	movs	r3, #120	; 0x78
    9b6c:	18f9      	adds	r1, r7, r3
    9b6e:	6838      	ldr	r0, [r7, #0]
    9b70:	2300      	movs	r3, #0
    9b72:	2204      	movs	r2, #4
    9b74:	4c61      	ldr	r4, [pc, #388]	; (9cfc <m2m_wifi_cb+0x348>)
    9b76:	47a0      	blx	r4
    9b78:	1e03      	subs	r3, r0, #0
    9b7a:	d000      	beq.n	9b7e <m2m_wifi_cb+0x1ca>
    9b7c:	e0e1      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			gu8ChNum = strState.u8NumofCh;
    9b7e:	2378      	movs	r3, #120	; 0x78
    9b80:	18fb      	adds	r3, r7, r3
    9b82:	781a      	ldrb	r2, [r3, #0]
    9b84:	4b65      	ldr	r3, [pc, #404]	; (9d1c <m2m_wifi_cb+0x368>)
    9b86:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    9b88:	4b5d      	ldr	r3, [pc, #372]	; (9d00 <m2m_wifi_cb+0x34c>)
    9b8a:	681b      	ldr	r3, [r3, #0]
    9b8c:	2b00      	cmp	r3, #0
    9b8e:	d100      	bne.n	9b92 <m2m_wifi_cb+0x1de>
    9b90:	e0d7      	b.n	9d42 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    9b92:	4b5b      	ldr	r3, [pc, #364]	; (9d00 <m2m_wifi_cb+0x34c>)
    9b94:	681b      	ldr	r3, [r3, #0]
    9b96:	2278      	movs	r2, #120	; 0x78
    9b98:	18ba      	adds	r2, r7, r2
    9b9a:	0011      	movs	r1, r2
    9b9c:	2011      	movs	r0, #17
    9b9e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9ba0:	e0cf      	b.n	9d42 <m2m_wifi_cb+0x38e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    9ba2:	1dfb      	adds	r3, r7, #7
    9ba4:	781b      	ldrb	r3, [r3, #0]
    9ba6:	2b13      	cmp	r3, #19
    9ba8:	d116      	bne.n	9bd8 <m2m_wifi_cb+0x224>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    9baa:	2308      	movs	r3, #8
    9bac:	18f9      	adds	r1, r7, r3
    9bae:	6838      	ldr	r0, [r7, #0]
    9bb0:	2300      	movs	r3, #0
    9bb2:	222c      	movs	r2, #44	; 0x2c
    9bb4:	4c51      	ldr	r4, [pc, #324]	; (9cfc <m2m_wifi_cb+0x348>)
    9bb6:	47a0      	blx	r4
    9bb8:	1e03      	subs	r3, r0, #0
    9bba:	d000      	beq.n	9bbe <m2m_wifi_cb+0x20a>
    9bbc:	e0c1      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9bbe:	4b50      	ldr	r3, [pc, #320]	; (9d00 <m2m_wifi_cb+0x34c>)
    9bc0:	681b      	ldr	r3, [r3, #0]
    9bc2:	2b00      	cmp	r3, #0
    9bc4:	d100      	bne.n	9bc8 <m2m_wifi_cb+0x214>
    9bc6:	e0bc      	b.n	9d42 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    9bc8:	4b4d      	ldr	r3, [pc, #308]	; (9d00 <m2m_wifi_cb+0x34c>)
    9bca:	681b      	ldr	r3, [r3, #0]
    9bcc:	2208      	movs	r2, #8
    9bce:	18ba      	adds	r2, r7, r2
    9bd0:	0011      	movs	r1, r2
    9bd2:	2013      	movs	r0, #19
    9bd4:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9bd6:	e0b4      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    9bd8:	1dfb      	adds	r3, r7, #7
    9bda:	781b      	ldrb	r3, [r3, #0]
    9bdc:	2b04      	cmp	r3, #4
    9bde:	d116      	bne.n	9c0e <m2m_wifi_cb+0x25a>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    9be0:	23a0      	movs	r3, #160	; 0xa0
    9be2:	18f9      	adds	r1, r7, r3
    9be4:	6838      	ldr	r0, [r7, #0]
    9be6:	2300      	movs	r3, #0
    9be8:	2204      	movs	r2, #4
    9bea:	4c44      	ldr	r4, [pc, #272]	; (9cfc <m2m_wifi_cb+0x348>)
    9bec:	47a0      	blx	r4
    9bee:	1e03      	subs	r3, r0, #0
    9bf0:	d000      	beq.n	9bf4 <m2m_wifi_cb+0x240>
    9bf2:	e0a6      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9bf4:	4b42      	ldr	r3, [pc, #264]	; (9d00 <m2m_wifi_cb+0x34c>)
    9bf6:	681b      	ldr	r3, [r3, #0]
    9bf8:	2b00      	cmp	r3, #0
    9bfa:	d100      	bne.n	9bfe <m2m_wifi_cb+0x24a>
    9bfc:	e0a1      	b.n	9d42 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    9bfe:	4b40      	ldr	r3, [pc, #256]	; (9d00 <m2m_wifi_cb+0x34c>)
    9c00:	681b      	ldr	r3, [r3, #0]
    9c02:	22a0      	movs	r2, #160	; 0xa0
    9c04:	18ba      	adds	r2, r7, r2
    9c06:	0011      	movs	r1, r2
    9c08:	2004      	movs	r0, #4
    9c0a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9c0c:	e099      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    9c0e:	1dfb      	adds	r3, r7, #7
    9c10:	781b      	ldrb	r3, [r3, #0]
    9c12:	2b65      	cmp	r3, #101	; 0x65
    9c14:	d116      	bne.n	9c44 <m2m_wifi_cb+0x290>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    9c16:	23a0      	movs	r3, #160	; 0xa0
    9c18:	18f9      	adds	r1, r7, r3
    9c1a:	6838      	ldr	r0, [r7, #0]
    9c1c:	2300      	movs	r3, #0
    9c1e:	2204      	movs	r2, #4
    9c20:	4c36      	ldr	r4, [pc, #216]	; (9cfc <m2m_wifi_cb+0x348>)
    9c22:	47a0      	blx	r4
    9c24:	1e03      	subs	r3, r0, #0
    9c26:	d000      	beq.n	9c2a <m2m_wifi_cb+0x276>
    9c28:	e08b      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
    9c2a:	4b35      	ldr	r3, [pc, #212]	; (9d00 <m2m_wifi_cb+0x34c>)
    9c2c:	681b      	ldr	r3, [r3, #0]
    9c2e:	2b00      	cmp	r3, #0
    9c30:	d100      	bne.n	9c34 <m2m_wifi_cb+0x280>
    9c32:	e086      	b.n	9d42 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    9c34:	4b32      	ldr	r3, [pc, #200]	; (9d00 <m2m_wifi_cb+0x34c>)
    9c36:	681b      	ldr	r3, [r3, #0]
    9c38:	22a0      	movs	r2, #160	; 0xa0
    9c3a:	18ba      	adds	r2, r7, r2
    9c3c:	0011      	movs	r1, r2
    9c3e:	2065      	movs	r0, #101	; 0x65
    9c40:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9c42:	e07e      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    9c44:	1dfb      	adds	r3, r7, #7
    9c46:	781b      	ldrb	r3, [r3, #0]
    9c48:	2b09      	cmp	r3, #9
    9c4a:	d116      	bne.n	9c7a <m2m_wifi_cb+0x2c6>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    9c4c:	2308      	movs	r3, #8
    9c4e:	18f9      	adds	r1, r7, r3
    9c50:	6838      	ldr	r0, [r7, #0]
    9c52:	2301      	movs	r3, #1
    9c54:	2264      	movs	r2, #100	; 0x64
    9c56:	4c29      	ldr	r4, [pc, #164]	; (9cfc <m2m_wifi_cb+0x348>)
    9c58:	47a0      	blx	r4
    9c5a:	1e03      	subs	r3, r0, #0
    9c5c:	d000      	beq.n	9c60 <m2m_wifi_cb+0x2ac>
    9c5e:	e070      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
    9c60:	4b27      	ldr	r3, [pc, #156]	; (9d00 <m2m_wifi_cb+0x34c>)
    9c62:	681b      	ldr	r3, [r3, #0]
    9c64:	2b00      	cmp	r3, #0
    9c66:	d100      	bne.n	9c6a <m2m_wifi_cb+0x2b6>
    9c68:	e06b      	b.n	9d42 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    9c6a:	4b25      	ldr	r3, [pc, #148]	; (9d00 <m2m_wifi_cb+0x34c>)
    9c6c:	681b      	ldr	r3, [r3, #0]
    9c6e:	2208      	movs	r2, #8
    9c70:	18ba      	adds	r2, r7, r2
    9c72:	0011      	movs	r1, r2
    9c74:	2009      	movs	r0, #9
    9c76:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9c78:	e063      	b.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    9c7a:	1dfb      	adds	r3, r7, #7
    9c7c:	781b      	ldrb	r3, [r3, #0]
    9c7e:	2b2a      	cmp	r3, #42	; 0x2a
    9c80:	d114      	bne.n	9cac <m2m_wifi_cb+0x2f8>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    9c82:	2374      	movs	r3, #116	; 0x74
    9c84:	18f9      	adds	r1, r7, r3
    9c86:	6838      	ldr	r0, [r7, #0]
    9c88:	2301      	movs	r3, #1
    9c8a:	2204      	movs	r2, #4
    9c8c:	4c1b      	ldr	r4, [pc, #108]	; (9cfc <m2m_wifi_cb+0x348>)
    9c8e:	47a0      	blx	r4
    9c90:	1e03      	subs	r3, r0, #0
    9c92:	d156      	bne.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if(gpfAppWifiCb)
    9c94:	4b1a      	ldr	r3, [pc, #104]	; (9d00 <m2m_wifi_cb+0x34c>)
    9c96:	681b      	ldr	r3, [r3, #0]
    9c98:	2b00      	cmp	r3, #0
    9c9a:	d052      	beq.n	9d42 <m2m_wifi_cb+0x38e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    9c9c:	4b18      	ldr	r3, [pc, #96]	; (9d00 <m2m_wifi_cb+0x34c>)
    9c9e:	681b      	ldr	r3, [r3, #0]
    9ca0:	2274      	movs	r2, #116	; 0x74
    9ca2:	18ba      	adds	r2, r7, r2
    9ca4:	0011      	movs	r1, r2
    9ca6:	202a      	movs	r0, #42	; 0x2a
    9ca8:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9caa:	e04a      	b.n	9d42 <m2m_wifi_cb+0x38e>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    9cac:	1dfb      	adds	r3, r7, #7
    9cae:	781b      	ldrb	r3, [r3, #0]
    9cb0:	2b20      	cmp	r3, #32
    9cb2:	d135      	bne.n	9d20 <m2m_wifi_cb+0x36c>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    9cb4:	236c      	movs	r3, #108	; 0x6c
    9cb6:	18f9      	adds	r1, r7, r3
    9cb8:	6838      	ldr	r0, [r7, #0]
    9cba:	2300      	movs	r3, #0
    9cbc:	2208      	movs	r2, #8
    9cbe:	4c0f      	ldr	r4, [pc, #60]	; (9cfc <m2m_wifi_cb+0x348>)
    9cc0:	47a0      	blx	r4
    9cc2:	1e03      	subs	r3, r0, #0
    9cc4:	d13d      	bne.n	9d42 <m2m_wifi_cb+0x38e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    9cc6:	683b      	ldr	r3, [r7, #0]
    9cc8:	3308      	adds	r3, #8
    9cca:	0018      	movs	r0, r3
    9ccc:	236c      	movs	r3, #108	; 0x6c
    9cce:	18fb      	adds	r3, r7, r3
    9cd0:	6819      	ldr	r1, [r3, #0]
    9cd2:	236c      	movs	r3, #108	; 0x6c
    9cd4:	18fb      	adds	r3, r7, r3
    9cd6:	889a      	ldrh	r2, [r3, #4]
    9cd8:	2301      	movs	r3, #1
    9cda:	4c08      	ldr	r4, [pc, #32]	; (9cfc <m2m_wifi_cb+0x348>)
    9cdc:	47a0      	blx	r4
    9cde:	1e03      	subs	r3, r0, #0
    9ce0:	d12f      	bne.n	9d42 <m2m_wifi_cb+0x38e>
			{
				if(gpfAppWifiCb)
    9ce2:	4b07      	ldr	r3, [pc, #28]	; (9d00 <m2m_wifi_cb+0x34c>)
    9ce4:	681b      	ldr	r3, [r3, #0]
    9ce6:	2b00      	cmp	r3, #0
    9ce8:	d02b      	beq.n	9d42 <m2m_wifi_cb+0x38e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    9cea:	4b05      	ldr	r3, [pc, #20]	; (9d00 <m2m_wifi_cb+0x34c>)
    9cec:	681b      	ldr	r3, [r3, #0]
    9cee:	226c      	movs	r2, #108	; 0x6c
    9cf0:	18ba      	adds	r2, r7, r2
    9cf2:	0011      	movs	r1, r2
    9cf4:	2020      	movs	r0, #32
    9cf6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    9cf8:	e023      	b.n	9d42 <m2m_wifi_cb+0x38e>
    9cfa:	46c0      	nop			; (mov r8, r8)
    9cfc:	00009779 	.word	0x00009779
    9d00:	200000a8 	.word	0x200000a8
    9d04:	00008c25 	.word	0x00008c25
    9d08:	00018690 	.word	0x00018690
    9d0c:	00016db1 	.word	0x00016db1
    9d10:	0001869c 	.word	0x0001869c
    9d14:	00016de5 	.word	0x00016de5
    9d18:	200000a5 	.word	0x200000a5
    9d1c:	200000a4 	.word	0x200000a4
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    9d20:	2392      	movs	r3, #146	; 0x92
    9d22:	005a      	lsls	r2, r3, #1
    9d24:	4909      	ldr	r1, [pc, #36]	; (9d4c <m2m_wifi_cb+0x398>)
    9d26:	4b0a      	ldr	r3, [pc, #40]	; (9d50 <m2m_wifi_cb+0x39c>)
    9d28:	0018      	movs	r0, r3
    9d2a:	4b0a      	ldr	r3, [pc, #40]	; (9d54 <m2m_wifi_cb+0x3a0>)
    9d2c:	4798      	blx	r3
    9d2e:	1dfb      	adds	r3, r7, #7
    9d30:	781a      	ldrb	r2, [r3, #0]
    9d32:	4b09      	ldr	r3, [pc, #36]	; (9d58 <m2m_wifi_cb+0x3a4>)
    9d34:	0011      	movs	r1, r2
    9d36:	0018      	movs	r0, r3
    9d38:	4b06      	ldr	r3, [pc, #24]	; (9d54 <m2m_wifi_cb+0x3a0>)
    9d3a:	4798      	blx	r3
    9d3c:	200d      	movs	r0, #13
    9d3e:	4b07      	ldr	r3, [pc, #28]	; (9d5c <m2m_wifi_cb+0x3a8>)
    9d40:	4798      	blx	r3
	}
}
    9d42:	46c0      	nop			; (mov r8, r8)
    9d44:	46bd      	mov	sp, r7
    9d46:	b02b      	add	sp, #172	; 0xac
    9d48:	bd90      	pop	{r4, r7, pc}
    9d4a:	46c0      	nop			; (mov r8, r8)
    9d4c:	00018a44 	.word	0x00018a44
    9d50:	000186bc 	.word	0x000186bc
    9d54:	00016db1 	.word	0x00016db1
    9d58:	000186d0 	.word	0x000186d0
    9d5c:	00016de5 	.word	0x00016de5

00009d60 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    9d60:	b590      	push	{r4, r7, lr}
    9d62:	b091      	sub	sp, #68	; 0x44
    9d64:	af02      	add	r7, sp, #8
    9d66:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    9d68:	2337      	movs	r3, #55	; 0x37
    9d6a:	18fb      	adds	r3, r7, r3
    9d6c:	2200      	movs	r2, #0
    9d6e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    9d70:	230b      	movs	r3, #11
    9d72:	18fb      	adds	r3, r7, r3
    9d74:	2201      	movs	r2, #1
    9d76:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    9d78:	687b      	ldr	r3, [r7, #4]
    9d7a:	2b00      	cmp	r3, #0
    9d7c:	d104      	bne.n	9d88 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    9d7e:	2337      	movs	r3, #55	; 0x37
    9d80:	18fb      	adds	r3, r7, r3
    9d82:	22f4      	movs	r2, #244	; 0xf4
    9d84:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    9d86:	e0ad      	b.n	9ee4 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    9d88:	687b      	ldr	r3, [r7, #4]
    9d8a:	681a      	ldr	r2, [r3, #0]
    9d8c:	4b59      	ldr	r3, [pc, #356]	; (9ef4 <m2m_wifi_init+0x194>)
    9d8e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    9d90:	4b59      	ldr	r3, [pc, #356]	; (9ef8 <m2m_wifi_init+0x198>)
    9d92:	2200      	movs	r2, #0
    9d94:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    9d96:	2337      	movs	r3, #55	; 0x37
    9d98:	18fc      	adds	r4, r7, r3
    9d9a:	230b      	movs	r3, #11
    9d9c:	18fb      	adds	r3, r7, r3
    9d9e:	0018      	movs	r0, r3
    9da0:	4b56      	ldr	r3, [pc, #344]	; (9efc <m2m_wifi_init+0x19c>)
    9da2:	4798      	blx	r3
    9da4:	0003      	movs	r3, r0
    9da6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    9da8:	2337      	movs	r3, #55	; 0x37
    9daa:	18fb      	adds	r3, r7, r3
    9dac:	781b      	ldrb	r3, [r3, #0]
    9dae:	b25b      	sxtb	r3, r3
    9db0:	2b00      	cmp	r3, #0
    9db2:	d000      	beq.n	9db6 <m2m_wifi_init+0x56>
    9db4:	e093      	b.n	9ede <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    9db6:	2337      	movs	r3, #55	; 0x37
    9db8:	18fc      	adds	r4, r7, r3
    9dba:	2000      	movs	r0, #0
    9dbc:	4b50      	ldr	r3, [pc, #320]	; (9f00 <m2m_wifi_init+0x1a0>)
    9dbe:	4798      	blx	r3
    9dc0:	0003      	movs	r3, r0
    9dc2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    9dc4:	2337      	movs	r3, #55	; 0x37
    9dc6:	18fb      	adds	r3, r7, r3
    9dc8:	781b      	ldrb	r3, [r3, #0]
    9dca:	b25b      	sxtb	r3, r3
    9dcc:	2b00      	cmp	r3, #0
    9dce:	d000      	beq.n	9dd2 <m2m_wifi_init+0x72>
    9dd0:	e080      	b.n	9ed4 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    9dd2:	4b4c      	ldr	r3, [pc, #304]	; (9f04 <m2m_wifi_init+0x1a4>)
    9dd4:	0019      	movs	r1, r3
    9dd6:	2001      	movs	r0, #1
    9dd8:	4b4b      	ldr	r3, [pc, #300]	; (9f08 <m2m_wifi_init+0x1a8>)
    9dda:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    9ddc:	2337      	movs	r3, #55	; 0x37
    9dde:	18fc      	adds	r4, r7, r3
    9de0:	230c      	movs	r3, #12
    9de2:	18fb      	adds	r3, r7, r3
    9de4:	0018      	movs	r0, r3
    9de6:	4b49      	ldr	r3, [pc, #292]	; (9f0c <m2m_wifi_init+0x1ac>)
    9de8:	4798      	blx	r3
    9dea:	0003      	movs	r3, r0
    9dec:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    9dee:	4b48      	ldr	r3, [pc, #288]	; (9f10 <m2m_wifi_init+0x1b0>)
    9df0:	0018      	movs	r0, r3
    9df2:	4b48      	ldr	r3, [pc, #288]	; (9f14 <m2m_wifi_init+0x1b4>)
    9df4:	4798      	blx	r3
    9df6:	230c      	movs	r3, #12
    9df8:	18fb      	adds	r3, r7, r3
    9dfa:	791b      	ldrb	r3, [r3, #4]
    9dfc:	0019      	movs	r1, r3
    9dfe:	230c      	movs	r3, #12
    9e00:	18fb      	adds	r3, r7, r3
    9e02:	795b      	ldrb	r3, [r3, #5]
    9e04:	001a      	movs	r2, r3
    9e06:	230c      	movs	r3, #12
    9e08:	18fb      	adds	r3, r7, r3
    9e0a:	799b      	ldrb	r3, [r3, #6]
    9e0c:	001c      	movs	r4, r3
    9e0e:	230c      	movs	r3, #12
    9e10:	18fb      	adds	r3, r7, r3
    9e12:	8c1b      	ldrh	r3, [r3, #32]
    9e14:	4840      	ldr	r0, [pc, #256]	; (9f18 <m2m_wifi_init+0x1b8>)
    9e16:	9300      	str	r3, [sp, #0]
    9e18:	0023      	movs	r3, r4
    9e1a:	4c3e      	ldr	r4, [pc, #248]	; (9f14 <m2m_wifi_init+0x1b4>)
    9e1c:	47a0      	blx	r4
    9e1e:	200d      	movs	r0, #13
    9e20:	4b3e      	ldr	r3, [pc, #248]	; (9f1c <m2m_wifi_init+0x1bc>)
    9e22:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    9e24:	4b3a      	ldr	r3, [pc, #232]	; (9f10 <m2m_wifi_init+0x1b0>)
    9e26:	0018      	movs	r0, r3
    9e28:	4b3a      	ldr	r3, [pc, #232]	; (9f14 <m2m_wifi_init+0x1b4>)
    9e2a:	4798      	blx	r3
    9e2c:	230c      	movs	r3, #12
    9e2e:	18fb      	adds	r3, r7, r3
    9e30:	3316      	adds	r3, #22
    9e32:	001a      	movs	r2, r3
    9e34:	230c      	movs	r3, #12
    9e36:	18fb      	adds	r3, r7, r3
    9e38:	330a      	adds	r3, #10
    9e3a:	0019      	movs	r1, r3
    9e3c:	4b38      	ldr	r3, [pc, #224]	; (9f20 <m2m_wifi_init+0x1c0>)
    9e3e:	0018      	movs	r0, r3
    9e40:	4b34      	ldr	r3, [pc, #208]	; (9f14 <m2m_wifi_init+0x1b4>)
    9e42:	4798      	blx	r3
    9e44:	200d      	movs	r0, #13
    9e46:	4b35      	ldr	r3, [pc, #212]	; (9f1c <m2m_wifi_init+0x1bc>)
    9e48:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    9e4a:	4b31      	ldr	r3, [pc, #196]	; (9f10 <m2m_wifi_init+0x1b0>)
    9e4c:	0018      	movs	r0, r3
    9e4e:	4b31      	ldr	r3, [pc, #196]	; (9f14 <m2m_wifi_init+0x1b4>)
    9e50:	4798      	blx	r3
    9e52:	230c      	movs	r3, #12
    9e54:	18fb      	adds	r3, r7, r3
    9e56:	79db      	ldrb	r3, [r3, #7]
    9e58:	0019      	movs	r1, r3
    9e5a:	230c      	movs	r3, #12
    9e5c:	18fb      	adds	r3, r7, r3
    9e5e:	7a1b      	ldrb	r3, [r3, #8]
    9e60:	001a      	movs	r2, r3
    9e62:	230c      	movs	r3, #12
    9e64:	18fb      	adds	r3, r7, r3
    9e66:	7a5b      	ldrb	r3, [r3, #9]
    9e68:	482e      	ldr	r0, [pc, #184]	; (9f24 <m2m_wifi_init+0x1c4>)
    9e6a:	4c2a      	ldr	r4, [pc, #168]	; (9f14 <m2m_wifi_init+0x1b4>)
    9e6c:	47a0      	blx	r4
    9e6e:	200d      	movs	r0, #13
    9e70:	4b2a      	ldr	r3, [pc, #168]	; (9f1c <m2m_wifi_init+0x1bc>)
    9e72:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    9e74:	4b26      	ldr	r3, [pc, #152]	; (9f10 <m2m_wifi_init+0x1b0>)
    9e76:	0018      	movs	r0, r3
    9e78:	4b26      	ldr	r3, [pc, #152]	; (9f14 <m2m_wifi_init+0x1b4>)
    9e7a:	4798      	blx	r3
    9e7c:	482a      	ldr	r0, [pc, #168]	; (9f28 <m2m_wifi_init+0x1c8>)
    9e7e:	2302      	movs	r3, #2
    9e80:	2205      	movs	r2, #5
    9e82:	2113      	movs	r1, #19
    9e84:	4c23      	ldr	r4, [pc, #140]	; (9f14 <m2m_wifi_init+0x1b4>)
    9e86:	47a0      	blx	r4
    9e88:	200d      	movs	r0, #13
    9e8a:	4b24      	ldr	r3, [pc, #144]	; (9f1c <m2m_wifi_init+0x1bc>)
    9e8c:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    9e8e:	4b20      	ldr	r3, [pc, #128]	; (9f10 <m2m_wifi_init+0x1b0>)
    9e90:	0018      	movs	r0, r3
    9e92:	4b20      	ldr	r3, [pc, #128]	; (9f14 <m2m_wifi_init+0x1b4>)
    9e94:	4798      	blx	r3
    9e96:	4a25      	ldr	r2, [pc, #148]	; (9f2c <m2m_wifi_init+0x1cc>)
    9e98:	4925      	ldr	r1, [pc, #148]	; (9f30 <m2m_wifi_init+0x1d0>)
    9e9a:	4b26      	ldr	r3, [pc, #152]	; (9f34 <m2m_wifi_init+0x1d4>)
    9e9c:	0018      	movs	r0, r3
    9e9e:	4b1d      	ldr	r3, [pc, #116]	; (9f14 <m2m_wifi_init+0x1b4>)
    9ea0:	4798      	blx	r3
    9ea2:	200d      	movs	r0, #13
    9ea4:	4b1d      	ldr	r3, [pc, #116]	; (9f1c <m2m_wifi_init+0x1bc>)
    9ea6:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    9ea8:	2337      	movs	r3, #55	; 0x37
    9eaa:	18fb      	adds	r3, r7, r3
    9eac:	781b      	ldrb	r3, [r3, #0]
    9eae:	b25b      	sxtb	r3, r3
    9eb0:	330d      	adds	r3, #13
    9eb2:	d116      	bne.n	9ee2 <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    9eb4:	23e8      	movs	r3, #232	; 0xe8
    9eb6:	33ff      	adds	r3, #255	; 0xff
    9eb8:	001a      	movs	r2, r3
    9eba:	491f      	ldr	r1, [pc, #124]	; (9f38 <m2m_wifi_init+0x1d8>)
    9ebc:	4b1f      	ldr	r3, [pc, #124]	; (9f3c <m2m_wifi_init+0x1dc>)
    9ebe:	0018      	movs	r0, r3
    9ec0:	4b14      	ldr	r3, [pc, #80]	; (9f14 <m2m_wifi_init+0x1b4>)
    9ec2:	4798      	blx	r3
    9ec4:	4b1e      	ldr	r3, [pc, #120]	; (9f40 <m2m_wifi_init+0x1e0>)
    9ec6:	0018      	movs	r0, r3
    9ec8:	4b1e      	ldr	r3, [pc, #120]	; (9f44 <m2m_wifi_init+0x1e4>)
    9eca:	4798      	blx	r3
    9ecc:	200d      	movs	r0, #13
    9ece:	4b13      	ldr	r3, [pc, #76]	; (9f1c <m2m_wifi_init+0x1bc>)
    9ed0:	4798      	blx	r3
	}

	goto _EXIT0;
    9ed2:	e006      	b.n	9ee2 <m2m_wifi_init+0x182>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    9ed4:	46c0      	nop			; (mov r8, r8)
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
    9ed6:	2000      	movs	r0, #0
    9ed8:	4b1b      	ldr	r3, [pc, #108]	; (9f48 <m2m_wifi_init+0x1e8>)
    9eda:	4798      	blx	r3
    9edc:	e002      	b.n	9ee4 <m2m_wifi_init+0x184>
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    9ede:	46c0      	nop			; (mov r8, r8)
    9ee0:	e000      	b.n	9ee4 <m2m_wifi_init+0x184>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
    9ee2:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
    9ee4:	2337      	movs	r3, #55	; 0x37
    9ee6:	18fb      	adds	r3, r7, r3
    9ee8:	781b      	ldrb	r3, [r3, #0]
    9eea:	b25b      	sxtb	r3, r3
}
    9eec:	0018      	movs	r0, r3
    9eee:	46bd      	mov	sp, r7
    9ef0:	b00f      	add	sp, #60	; 0x3c
    9ef2:	bd90      	pop	{r4, r7, pc}
    9ef4:	200000a8 	.word	0x200000a8
    9ef8:	200000a5 	.word	0x200000a5
    9efc:	0000b06d 	.word	0x0000b06d
    9f00:	00008e3d 	.word	0x00008e3d
    9f04:	000099b5 	.word	0x000099b5
    9f08:	000098f9 	.word	0x000098f9
    9f0c:	0000aea1 	.word	0x0000aea1
    9f10:	00018690 	.word	0x00018690
    9f14:	00016db1 	.word	0x00016db1
    9f18:	00018824 	.word	0x00018824
    9f1c:	00016de5 	.word	0x00016de5
    9f20:	0001884c 	.word	0x0001884c
    9f24:	00018868 	.word	0x00018868
    9f28:	0001888c 	.word	0x0001888c
    9f2c:	000188a4 	.word	0x000188a4
    9f30:	000188b0 	.word	0x000188b0
    9f34:	000188bc 	.word	0x000188bc
    9f38:	00018a50 	.word	0x00018a50
    9f3c:	000186bc 	.word	0x000186bc
    9f40:	000188d4 	.word	0x000188d4
    9f44:	00016ed1 	.word	0x00016ed1
    9f48:	0000b201 	.word	0x0000b201

00009f4c <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    9f4c:	b580      	push	{r7, lr}
    9f4e:	b082      	sub	sp, #8
    9f50:	af00      	add	r7, sp, #0
    9f52:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    9f54:	4b03      	ldr	r3, [pc, #12]	; (9f64 <m2m_wifi_handle_events+0x18>)
    9f56:	4798      	blx	r3
    9f58:	0003      	movs	r3, r0
}
    9f5a:	0018      	movs	r0, r3
    9f5c:	46bd      	mov	sp, r7
    9f5e:	b002      	add	sp, #8
    9f60:	bd80      	pop	{r7, pc}
    9f62:	46c0      	nop			; (mov r8, r8)
    9f64:	000096e9 	.word	0x000096e9

00009f68 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    9f68:	b590      	push	{r4, r7, lr}
    9f6a:	b087      	sub	sp, #28
    9f6c:	af02      	add	r7, sp, #8
    9f6e:	60f8      	str	r0, [r7, #12]
    9f70:	0008      	movs	r0, r1
    9f72:	0011      	movs	r1, r2
    9f74:	607b      	str	r3, [r7, #4]
    9f76:	230b      	movs	r3, #11
    9f78:	18fb      	adds	r3, r7, r3
    9f7a:	1c02      	adds	r2, r0, #0
    9f7c:	701a      	strb	r2, [r3, #0]
    9f7e:	230a      	movs	r3, #10
    9f80:	18fb      	adds	r3, r7, r3
    9f82:	1c0a      	adds	r2, r1, #0
    9f84:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    9f86:	687c      	ldr	r4, [r7, #4]
    9f88:	230a      	movs	r3, #10
    9f8a:	18fb      	adds	r3, r7, r3
    9f8c:	781a      	ldrb	r2, [r3, #0]
    9f8e:	230b      	movs	r3, #11
    9f90:	18fb      	adds	r3, r7, r3
    9f92:	7819      	ldrb	r1, [r3, #0]
    9f94:	68f8      	ldr	r0, [r7, #12]
    9f96:	2300      	movs	r3, #0
    9f98:	9301      	str	r3, [sp, #4]
    9f9a:	2320      	movs	r3, #32
    9f9c:	18fb      	adds	r3, r7, r3
    9f9e:	881b      	ldrh	r3, [r3, #0]
    9fa0:	9300      	str	r3, [sp, #0]
    9fa2:	0023      	movs	r3, r4
    9fa4:	4c03      	ldr	r4, [pc, #12]	; (9fb4 <m2m_wifi_connect+0x4c>)
    9fa6:	47a0      	blx	r4
    9fa8:	0003      	movs	r3, r0
}
    9faa:	0018      	movs	r0, r3
    9fac:	46bd      	mov	sp, r7
    9fae:	b005      	add	sp, #20
    9fb0:	bd90      	pop	{r4, r7, pc}
    9fb2:	46c0      	nop			; (mov r8, r8)
    9fb4:	00009fb9 	.word	0x00009fb9

00009fb8 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    9fb8:	b5b0      	push	{r4, r5, r7, lr}
    9fba:	b0aa      	sub	sp, #168	; 0xa8
    9fbc:	af04      	add	r7, sp, #16
    9fbe:	60f8      	str	r0, [r7, #12]
    9fc0:	0008      	movs	r0, r1
    9fc2:	0011      	movs	r1, r2
    9fc4:	607b      	str	r3, [r7, #4]
    9fc6:	230b      	movs	r3, #11
    9fc8:	18fb      	adds	r3, r7, r3
    9fca:	1c02      	adds	r2, r0, #0
    9fcc:	701a      	strb	r2, [r3, #0]
    9fce:	230a      	movs	r3, #10
    9fd0:	18fb      	adds	r3, r7, r3
    9fd2:	1c0a      	adds	r2, r1, #0
    9fd4:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    9fd6:	2397      	movs	r3, #151	; 0x97
    9fd8:	18fb      	adds	r3, r7, r3
    9fda:	2200      	movs	r2, #0
    9fdc:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    9fde:	230a      	movs	r3, #10
    9fe0:	18fb      	adds	r3, r7, r3
    9fe2:	781b      	ldrb	r3, [r3, #0]
    9fe4:	2b01      	cmp	r3, #1
    9fe6:	d100      	bne.n	9fea <m2m_wifi_connect_sc+0x32>
    9fe8:	e083      	b.n	a0f2 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    9fea:	687b      	ldr	r3, [r7, #4]
    9fec:	2b00      	cmp	r3, #0
    9fee:	d111      	bne.n	a014 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    9ff0:	4adb      	ldr	r2, [pc, #876]	; (a360 <m2m_wifi_connect_sc+0x3a8>)
    9ff2:	49dc      	ldr	r1, [pc, #880]	; (a364 <m2m_wifi_connect_sc+0x3ac>)
    9ff4:	4bdc      	ldr	r3, [pc, #880]	; (a368 <m2m_wifi_connect_sc+0x3b0>)
    9ff6:	0018      	movs	r0, r3
    9ff8:	4bdc      	ldr	r3, [pc, #880]	; (a36c <m2m_wifi_connect_sc+0x3b4>)
    9ffa:	4798      	blx	r3
    9ffc:	4bdc      	ldr	r3, [pc, #880]	; (a370 <m2m_wifi_connect_sc+0x3b8>)
    9ffe:	0018      	movs	r0, r3
    a000:	4bdc      	ldr	r3, [pc, #880]	; (a374 <m2m_wifi_connect_sc+0x3bc>)
    a002:	4798      	blx	r3
    a004:	200d      	movs	r0, #13
    a006:	4bdc      	ldr	r3, [pc, #880]	; (a378 <m2m_wifi_connect_sc+0x3c0>)
    a008:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a00a:	2397      	movs	r3, #151	; 0x97
    a00c:	18fb      	adds	r3, r7, r3
    a00e:	22f4      	movs	r2, #244	; 0xf4
    a010:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a012:	e1f5      	b.n	a400 <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    a014:	230a      	movs	r3, #10
    a016:	18fb      	adds	r3, r7, r3
    a018:	781b      	ldrb	r3, [r3, #0]
    a01a:	2b02      	cmp	r3, #2
    a01c:	d169      	bne.n	a0f2 <m2m_wifi_connect_sc+0x13a>
    a01e:	687b      	ldr	r3, [r7, #4]
    a020:	0018      	movs	r0, r3
    a022:	4bd6      	ldr	r3, [pc, #856]	; (a37c <m2m_wifi_connect_sc+0x3c4>)
    a024:	4798      	blx	r3
    a026:	1e03      	subs	r3, r0, #0
    a028:	2b40      	cmp	r3, #64	; 0x40
    a02a:	d162      	bne.n	a0f2 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    a02c:	2396      	movs	r3, #150	; 0x96
    a02e:	18fb      	adds	r3, r7, r3
    a030:	2200      	movs	r2, #0
    a032:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    a034:	687b      	ldr	r3, [r7, #4]
    a036:	2290      	movs	r2, #144	; 0x90
    a038:	18ba      	adds	r2, r7, r2
    a03a:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    a03c:	e054      	b.n	a0e8 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    a03e:	2396      	movs	r3, #150	; 0x96
    a040:	18fb      	adds	r3, r7, r3
    a042:	781b      	ldrb	r3, [r3, #0]
    a044:	2290      	movs	r2, #144	; 0x90
    a046:	18ba      	adds	r2, r7, r2
    a048:	6812      	ldr	r2, [r2, #0]
    a04a:	18d3      	adds	r3, r2, r3
    a04c:	781b      	ldrb	r3, [r3, #0]
    a04e:	2b2f      	cmp	r3, #47	; 0x2f
    a050:	d931      	bls.n	a0b6 <m2m_wifi_connect_sc+0xfe>
    a052:	2396      	movs	r3, #150	; 0x96
    a054:	18fb      	adds	r3, r7, r3
    a056:	781b      	ldrb	r3, [r3, #0]
    a058:	2290      	movs	r2, #144	; 0x90
    a05a:	18ba      	adds	r2, r7, r2
    a05c:	6812      	ldr	r2, [r2, #0]
    a05e:	18d3      	adds	r3, r2, r3
    a060:	781b      	ldrb	r3, [r3, #0]
    a062:	2b39      	cmp	r3, #57	; 0x39
    a064:	d909      	bls.n	a07a <m2m_wifi_connect_sc+0xc2>
    a066:	2396      	movs	r3, #150	; 0x96
    a068:	18fb      	adds	r3, r7, r3
    a06a:	781b      	ldrb	r3, [r3, #0]
    a06c:	2290      	movs	r2, #144	; 0x90
    a06e:	18ba      	adds	r2, r7, r2
    a070:	6812      	ldr	r2, [r2, #0]
    a072:	18d3      	adds	r3, r2, r3
    a074:	781b      	ldrb	r3, [r3, #0]
    a076:	2b40      	cmp	r3, #64	; 0x40
    a078:	d91d      	bls.n	a0b6 <m2m_wifi_connect_sc+0xfe>
    a07a:	2396      	movs	r3, #150	; 0x96
    a07c:	18fb      	adds	r3, r7, r3
    a07e:	781b      	ldrb	r3, [r3, #0]
    a080:	2290      	movs	r2, #144	; 0x90
    a082:	18ba      	adds	r2, r7, r2
    a084:	6812      	ldr	r2, [r2, #0]
    a086:	18d3      	adds	r3, r2, r3
    a088:	781b      	ldrb	r3, [r3, #0]
    a08a:	2b46      	cmp	r3, #70	; 0x46
    a08c:	d909      	bls.n	a0a2 <m2m_wifi_connect_sc+0xea>
    a08e:	2396      	movs	r3, #150	; 0x96
    a090:	18fb      	adds	r3, r7, r3
    a092:	781b      	ldrb	r3, [r3, #0]
    a094:	2290      	movs	r2, #144	; 0x90
    a096:	18ba      	adds	r2, r7, r2
    a098:	6812      	ldr	r2, [r2, #0]
    a09a:	18d3      	adds	r3, r2, r3
    a09c:	781b      	ldrb	r3, [r3, #0]
    a09e:	2b60      	cmp	r3, #96	; 0x60
    a0a0:	d909      	bls.n	a0b6 <m2m_wifi_connect_sc+0xfe>
    a0a2:	2396      	movs	r3, #150	; 0x96
    a0a4:	18fb      	adds	r3, r7, r3
    a0a6:	781b      	ldrb	r3, [r3, #0]
    a0a8:	2290      	movs	r2, #144	; 0x90
    a0aa:	18ba      	adds	r2, r7, r2
    a0ac:	6812      	ldr	r2, [r2, #0]
    a0ae:	18d3      	adds	r3, r2, r3
    a0b0:	781b      	ldrb	r3, [r3, #0]
    a0b2:	2b66      	cmp	r3, #102	; 0x66
    a0b4:	d911      	bls.n	a0da <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    a0b6:	4ab2      	ldr	r2, [pc, #712]	; (a380 <m2m_wifi_connect_sc+0x3c8>)
    a0b8:	49aa      	ldr	r1, [pc, #680]	; (a364 <m2m_wifi_connect_sc+0x3ac>)
    a0ba:	4bab      	ldr	r3, [pc, #684]	; (a368 <m2m_wifi_connect_sc+0x3b0>)
    a0bc:	0018      	movs	r0, r3
    a0be:	4bab      	ldr	r3, [pc, #684]	; (a36c <m2m_wifi_connect_sc+0x3b4>)
    a0c0:	4798      	blx	r3
    a0c2:	4bb0      	ldr	r3, [pc, #704]	; (a384 <m2m_wifi_connect_sc+0x3cc>)
    a0c4:	0018      	movs	r0, r3
    a0c6:	4bab      	ldr	r3, [pc, #684]	; (a374 <m2m_wifi_connect_sc+0x3bc>)
    a0c8:	4798      	blx	r3
    a0ca:	200d      	movs	r0, #13
    a0cc:	4baa      	ldr	r3, [pc, #680]	; (a378 <m2m_wifi_connect_sc+0x3c0>)
    a0ce:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    a0d0:	2397      	movs	r3, #151	; 0x97
    a0d2:	18fb      	adds	r3, r7, r3
    a0d4:	22f4      	movs	r2, #244	; 0xf4
    a0d6:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    a0d8:	e192      	b.n	a400 <m2m_wifi_connect_sc+0x448>
				}
				i++;
    a0da:	2396      	movs	r3, #150	; 0x96
    a0dc:	18fb      	adds	r3, r7, r3
    a0de:	781a      	ldrb	r2, [r3, #0]
    a0e0:	2396      	movs	r3, #150	; 0x96
    a0e2:	18fb      	adds	r3, r7, r3
    a0e4:	3201      	adds	r2, #1
    a0e6:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    a0e8:	2396      	movs	r3, #150	; 0x96
    a0ea:	18fb      	adds	r3, r7, r3
    a0ec:	781b      	ldrb	r3, [r3, #0]
    a0ee:	2b3f      	cmp	r3, #63	; 0x3f
    a0f0:	d9a5      	bls.n	a03e <m2m_wifi_connect_sc+0x86>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    a0f2:	230b      	movs	r3, #11
    a0f4:	18fb      	adds	r3, r7, r3
    a0f6:	781b      	ldrb	r3, [r3, #0]
    a0f8:	2b00      	cmp	r3, #0
    a0fa:	d004      	beq.n	a106 <m2m_wifi_connect_sc+0x14e>
    a0fc:	230b      	movs	r3, #11
    a0fe:	18fb      	adds	r3, r7, r3
    a100:	781b      	ldrb	r3, [r3, #0]
    a102:	2b20      	cmp	r3, #32
    a104:	d911      	bls.n	a12a <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    a106:	4aa0      	ldr	r2, [pc, #640]	; (a388 <m2m_wifi_connect_sc+0x3d0>)
    a108:	4996      	ldr	r1, [pc, #600]	; (a364 <m2m_wifi_connect_sc+0x3ac>)
    a10a:	4b97      	ldr	r3, [pc, #604]	; (a368 <m2m_wifi_connect_sc+0x3b0>)
    a10c:	0018      	movs	r0, r3
    a10e:	4b97      	ldr	r3, [pc, #604]	; (a36c <m2m_wifi_connect_sc+0x3b4>)
    a110:	4798      	blx	r3
    a112:	4b9e      	ldr	r3, [pc, #632]	; (a38c <m2m_wifi_connect_sc+0x3d4>)
    a114:	0018      	movs	r0, r3
    a116:	4b97      	ldr	r3, [pc, #604]	; (a374 <m2m_wifi_connect_sc+0x3bc>)
    a118:	4798      	blx	r3
    a11a:	200d      	movs	r0, #13
    a11c:	4b96      	ldr	r3, [pc, #600]	; (a378 <m2m_wifi_connect_sc+0x3c0>)
    a11e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    a120:	2397      	movs	r3, #151	; 0x97
    a122:	18fb      	adds	r3, r7, r3
    a124:	22f4      	movs	r2, #244	; 0xf4
    a126:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    a128:	e16a      	b.n	a400 <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    a12a:	23a8      	movs	r3, #168	; 0xa8
    a12c:	18fb      	adds	r3, r7, r3
    a12e:	881b      	ldrh	r3, [r3, #0]
    a130:	2b00      	cmp	r3, #0
    a132:	d004      	beq.n	a13e <m2m_wifi_connect_sc+0x186>
    a134:	23a8      	movs	r3, #168	; 0xa8
    a136:	18fb      	adds	r3, r7, r3
    a138:	881b      	ldrh	r3, [r3, #0]
    a13a:	2b0e      	cmp	r3, #14
    a13c:	d917      	bls.n	a16e <m2m_wifi_connect_sc+0x1b6>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    a13e:	23a8      	movs	r3, #168	; 0xa8
    a140:	18fb      	adds	r3, r7, r3
    a142:	881b      	ldrh	r3, [r3, #0]
    a144:	2bff      	cmp	r3, #255	; 0xff
    a146:	d012      	beq.n	a16e <m2m_wifi_connect_sc+0x1b6>
		{
			M2M_ERR("CH INVALID\n");
    a148:	238d      	movs	r3, #141	; 0x8d
    a14a:	009a      	lsls	r2, r3, #2
    a14c:	4985      	ldr	r1, [pc, #532]	; (a364 <m2m_wifi_connect_sc+0x3ac>)
    a14e:	4b86      	ldr	r3, [pc, #536]	; (a368 <m2m_wifi_connect_sc+0x3b0>)
    a150:	0018      	movs	r0, r3
    a152:	4b86      	ldr	r3, [pc, #536]	; (a36c <m2m_wifi_connect_sc+0x3b4>)
    a154:	4798      	blx	r3
    a156:	4b8e      	ldr	r3, [pc, #568]	; (a390 <m2m_wifi_connect_sc+0x3d8>)
    a158:	0018      	movs	r0, r3
    a15a:	4b86      	ldr	r3, [pc, #536]	; (a374 <m2m_wifi_connect_sc+0x3bc>)
    a15c:	4798      	blx	r3
    a15e:	200d      	movs	r0, #13
    a160:	4b85      	ldr	r3, [pc, #532]	; (a378 <m2m_wifi_connect_sc+0x3c0>)
    a162:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a164:	2397      	movs	r3, #151	; 0x97
    a166:	18fb      	adds	r3, r7, r3
    a168:	22f4      	movs	r2, #244	; 0xf4
    a16a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a16c:	e148      	b.n	a400 <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    a16e:	230b      	movs	r3, #11
    a170:	18fb      	adds	r3, r7, r3
    a172:	781a      	ldrb	r2, [r3, #0]
    a174:	68f9      	ldr	r1, [r7, #12]
    a176:	2314      	movs	r3, #20
    a178:	18fb      	adds	r3, r7, r3
    a17a:	3346      	adds	r3, #70	; 0x46
    a17c:	0018      	movs	r0, r3
    a17e:	4b85      	ldr	r3, [pc, #532]	; (a394 <m2m_wifi_connect_sc+0x3dc>)
    a180:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    a182:	230b      	movs	r3, #11
    a184:	18fb      	adds	r3, r7, r3
    a186:	781b      	ldrb	r3, [r3, #0]
    a188:	2214      	movs	r2, #20
    a18a:	18ba      	adds	r2, r7, r2
    a18c:	2146      	movs	r1, #70	; 0x46
    a18e:	18d3      	adds	r3, r2, r3
    a190:	185b      	adds	r3, r3, r1
    a192:	2200      	movs	r2, #0
    a194:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    a196:	2314      	movs	r3, #20
    a198:	18fb      	adds	r3, r7, r3
    a19a:	22a8      	movs	r2, #168	; 0xa8
    a19c:	18ba      	adds	r2, r7, r2
    a19e:	2144      	movs	r1, #68	; 0x44
    a1a0:	8812      	ldrh	r2, [r2, #0]
    a1a2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    a1a4:	23ac      	movs	r3, #172	; 0xac
    a1a6:	18fb      	adds	r3, r7, r3
    a1a8:	781b      	ldrb	r3, [r3, #0]
    a1aa:	1e5a      	subs	r2, r3, #1
    a1ac:	4193      	sbcs	r3, r2
    a1ae:	b2db      	uxtb	r3, r3
    a1b0:	0019      	movs	r1, r3
    a1b2:	2314      	movs	r3, #20
    a1b4:	18fb      	adds	r3, r7, r3
    a1b6:	2267      	movs	r2, #103	; 0x67
    a1b8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    a1ba:	2314      	movs	r3, #20
    a1bc:	18fb      	adds	r3, r7, r3
    a1be:	228c      	movs	r2, #140	; 0x8c
    a1c0:	18ba      	adds	r2, r7, r2
    a1c2:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    a1c4:	238c      	movs	r3, #140	; 0x8c
    a1c6:	18fb      	adds	r3, r7, r3
    a1c8:	681b      	ldr	r3, [r3, #0]
    a1ca:	220a      	movs	r2, #10
    a1cc:	18ba      	adds	r2, r7, r2
    a1ce:	2141      	movs	r1, #65	; 0x41
    a1d0:	7812      	ldrb	r2, [r2, #0]
    a1d2:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    a1d4:	230a      	movs	r3, #10
    a1d6:	18fb      	adds	r3, r7, r3
    a1d8:	781b      	ldrb	r3, [r3, #0]
    a1da:	2b03      	cmp	r3, #3
    a1dc:	d000      	beq.n	a1e0 <m2m_wifi_connect_sc+0x228>
    a1de:	e07a      	b.n	a2d6 <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    a1e0:	687b      	ldr	r3, [r7, #4]
    a1e2:	2288      	movs	r2, #136	; 0x88
    a1e4:	18ba      	adds	r2, r7, r2
    a1e6:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    a1e8:	238c      	movs	r3, #140	; 0x8c
    a1ea:	18fb      	adds	r3, r7, r3
    a1ec:	681b      	ldr	r3, [r3, #0]
    a1ee:	2284      	movs	r2, #132	; 0x84
    a1f0:	18ba      	adds	r2, r7, r2
    a1f2:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    a1f4:	2388      	movs	r3, #136	; 0x88
    a1f6:	18fb      	adds	r3, r7, r3
    a1f8:	681b      	ldr	r3, [r3, #0]
    a1fa:	781b      	ldrb	r3, [r3, #0]
    a1fc:	3b01      	subs	r3, #1
    a1fe:	b2da      	uxtb	r2, r3
    a200:	2384      	movs	r3, #132	; 0x84
    a202:	18fb      	adds	r3, r7, r3
    a204:	681b      	ldr	r3, [r3, #0]
    a206:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    a208:	2384      	movs	r3, #132	; 0x84
    a20a:	18fb      	adds	r3, r7, r3
    a20c:	681b      	ldr	r3, [r3, #0]
    a20e:	781b      	ldrb	r3, [r3, #0]
    a210:	2b03      	cmp	r3, #3
    a212:	d917      	bls.n	a244 <m2m_wifi_connect_sc+0x28c>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    a214:	4a60      	ldr	r2, [pc, #384]	; (a398 <m2m_wifi_connect_sc+0x3e0>)
    a216:	4953      	ldr	r1, [pc, #332]	; (a364 <m2m_wifi_connect_sc+0x3ac>)
    a218:	4b53      	ldr	r3, [pc, #332]	; (a368 <m2m_wifi_connect_sc+0x3b0>)
    a21a:	0018      	movs	r0, r3
    a21c:	4b53      	ldr	r3, [pc, #332]	; (a36c <m2m_wifi_connect_sc+0x3b4>)
    a21e:	4798      	blx	r3
    a220:	2384      	movs	r3, #132	; 0x84
    a222:	18fb      	adds	r3, r7, r3
    a224:	681b      	ldr	r3, [r3, #0]
    a226:	781b      	ldrb	r3, [r3, #0]
    a228:	001a      	movs	r2, r3
    a22a:	4b5c      	ldr	r3, [pc, #368]	; (a39c <m2m_wifi_connect_sc+0x3e4>)
    a22c:	0011      	movs	r1, r2
    a22e:	0018      	movs	r0, r3
    a230:	4b4e      	ldr	r3, [pc, #312]	; (a36c <m2m_wifi_connect_sc+0x3b4>)
    a232:	4798      	blx	r3
    a234:	200d      	movs	r0, #13
    a236:	4b50      	ldr	r3, [pc, #320]	; (a378 <m2m_wifi_connect_sc+0x3c0>)
    a238:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a23a:	2397      	movs	r3, #151	; 0x97
    a23c:	18fb      	adds	r3, r7, r3
    a23e:	22f4      	movs	r2, #244	; 0xf4
    a240:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a242:	e0dd      	b.n	a400 <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    a244:	2388      	movs	r3, #136	; 0x88
    a246:	18fb      	adds	r3, r7, r3
    a248:	681b      	ldr	r3, [r3, #0]
    a24a:	785b      	ldrb	r3, [r3, #1]
    a24c:	3b01      	subs	r3, #1
    a24e:	b2da      	uxtb	r2, r3
    a250:	2384      	movs	r3, #132	; 0x84
    a252:	18fb      	adds	r3, r7, r3
    a254:	681b      	ldr	r3, [r3, #0]
    a256:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    a258:	2384      	movs	r3, #132	; 0x84
    a25a:	18fb      	adds	r3, r7, r3
    a25c:	681b      	ldr	r3, [r3, #0]
    a25e:	785b      	ldrb	r3, [r3, #1]
    a260:	2b0a      	cmp	r3, #10
    a262:	d01d      	beq.n	a2a0 <m2m_wifi_connect_sc+0x2e8>
    a264:	2384      	movs	r3, #132	; 0x84
    a266:	18fb      	adds	r3, r7, r3
    a268:	681b      	ldr	r3, [r3, #0]
    a26a:	785b      	ldrb	r3, [r3, #1]
    a26c:	2b1a      	cmp	r3, #26
    a26e:	d017      	beq.n	a2a0 <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    a270:	4a4b      	ldr	r2, [pc, #300]	; (a3a0 <m2m_wifi_connect_sc+0x3e8>)
    a272:	493c      	ldr	r1, [pc, #240]	; (a364 <m2m_wifi_connect_sc+0x3ac>)
    a274:	4b3c      	ldr	r3, [pc, #240]	; (a368 <m2m_wifi_connect_sc+0x3b0>)
    a276:	0018      	movs	r0, r3
    a278:	4b3c      	ldr	r3, [pc, #240]	; (a36c <m2m_wifi_connect_sc+0x3b4>)
    a27a:	4798      	blx	r3
    a27c:	2384      	movs	r3, #132	; 0x84
    a27e:	18fb      	adds	r3, r7, r3
    a280:	681b      	ldr	r3, [r3, #0]
    a282:	785b      	ldrb	r3, [r3, #1]
    a284:	001a      	movs	r2, r3
    a286:	4b47      	ldr	r3, [pc, #284]	; (a3a4 <m2m_wifi_connect_sc+0x3ec>)
    a288:	0011      	movs	r1, r2
    a28a:	0018      	movs	r0, r3
    a28c:	4b37      	ldr	r3, [pc, #220]	; (a36c <m2m_wifi_connect_sc+0x3b4>)
    a28e:	4798      	blx	r3
    a290:	200d      	movs	r0, #13
    a292:	4b39      	ldr	r3, [pc, #228]	; (a378 <m2m_wifi_connect_sc+0x3c0>)
    a294:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a296:	2397      	movs	r3, #151	; 0x97
    a298:	18fb      	adds	r3, r7, r3
    a29a:	22f4      	movs	r2, #244	; 0xf4
    a29c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a29e:	e0af      	b.n	a400 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    a2a0:	2384      	movs	r3, #132	; 0x84
    a2a2:	18fb      	adds	r3, r7, r3
    a2a4:	681b      	ldr	r3, [r3, #0]
    a2a6:	1c98      	adds	r0, r3, #2
    a2a8:	2388      	movs	r3, #136	; 0x88
    a2aa:	18fb      	adds	r3, r7, r3
    a2ac:	681b      	ldr	r3, [r3, #0]
    a2ae:	1c99      	adds	r1, r3, #2
    a2b0:	2388      	movs	r3, #136	; 0x88
    a2b2:	18fb      	adds	r3, r7, r3
    a2b4:	681b      	ldr	r3, [r3, #0]
    a2b6:	785b      	ldrb	r3, [r3, #1]
    a2b8:	001a      	movs	r2, r3
    a2ba:	4b36      	ldr	r3, [pc, #216]	; (a394 <m2m_wifi_connect_sc+0x3dc>)
    a2bc:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    a2be:	2388      	movs	r3, #136	; 0x88
    a2c0:	18fb      	adds	r3, r7, r3
    a2c2:	681b      	ldr	r3, [r3, #0]
    a2c4:	785b      	ldrb	r3, [r3, #1]
    a2c6:	001a      	movs	r2, r3
    a2c8:	2384      	movs	r3, #132	; 0x84
    a2ca:	18fb      	adds	r3, r7, r3
    a2cc:	681b      	ldr	r3, [r3, #0]
    a2ce:	189b      	adds	r3, r3, r2
    a2d0:	2200      	movs	r2, #0
    a2d2:	709a      	strb	r2, [r3, #2]
    a2d4:	e083      	b.n	a3de <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    a2d6:	230a      	movs	r3, #10
    a2d8:	18fb      	adds	r3, r7, r3
    a2da:	781b      	ldrb	r3, [r3, #0]
    a2dc:	2b02      	cmp	r3, #2
    a2de:	d130      	bne.n	a342 <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    a2e0:	2382      	movs	r3, #130	; 0x82
    a2e2:	18fc      	adds	r4, r7, r3
    a2e4:	687b      	ldr	r3, [r7, #4]
    a2e6:	0018      	movs	r0, r3
    a2e8:	4b24      	ldr	r3, [pc, #144]	; (a37c <m2m_wifi_connect_sc+0x3c4>)
    a2ea:	4798      	blx	r3
    a2ec:	0003      	movs	r3, r0
    a2ee:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    a2f0:	2382      	movs	r3, #130	; 0x82
    a2f2:	18fb      	adds	r3, r7, r3
    a2f4:	881b      	ldrh	r3, [r3, #0]
    a2f6:	2b00      	cmp	r3, #0
    a2f8:	d004      	beq.n	a304 <m2m_wifi_connect_sc+0x34c>
    a2fa:	2382      	movs	r3, #130	; 0x82
    a2fc:	18fb      	adds	r3, r7, r3
    a2fe:	881b      	ldrh	r3, [r3, #0]
    a300:	2b40      	cmp	r3, #64	; 0x40
    a302:	d911      	bls.n	a328 <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    a304:	4a28      	ldr	r2, [pc, #160]	; (a3a8 <m2m_wifi_connect_sc+0x3f0>)
    a306:	4917      	ldr	r1, [pc, #92]	; (a364 <m2m_wifi_connect_sc+0x3ac>)
    a308:	4b17      	ldr	r3, [pc, #92]	; (a368 <m2m_wifi_connect_sc+0x3b0>)
    a30a:	0018      	movs	r0, r3
    a30c:	4b17      	ldr	r3, [pc, #92]	; (a36c <m2m_wifi_connect_sc+0x3b4>)
    a30e:	4798      	blx	r3
    a310:	4b26      	ldr	r3, [pc, #152]	; (a3ac <m2m_wifi_connect_sc+0x3f4>)
    a312:	0018      	movs	r0, r3
    a314:	4b17      	ldr	r3, [pc, #92]	; (a374 <m2m_wifi_connect_sc+0x3bc>)
    a316:	4798      	blx	r3
    a318:	200d      	movs	r0, #13
    a31a:	4b17      	ldr	r3, [pc, #92]	; (a378 <m2m_wifi_connect_sc+0x3c0>)
    a31c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    a31e:	2397      	movs	r3, #151	; 0x97
    a320:	18fb      	adds	r3, r7, r3
    a322:	22f4      	movs	r2, #244	; 0xf4
    a324:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    a326:	e06b      	b.n	a400 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    a328:	238c      	movs	r3, #140	; 0x8c
    a32a:	18fb      	adds	r3, r7, r3
    a32c:	6818      	ldr	r0, [r3, #0]
    a32e:	2382      	movs	r3, #130	; 0x82
    a330:	18fb      	adds	r3, r7, r3
    a332:	881b      	ldrh	r3, [r3, #0]
    a334:	3301      	adds	r3, #1
    a336:	001a      	movs	r2, r3
    a338:	687b      	ldr	r3, [r7, #4]
    a33a:	0019      	movs	r1, r3
    a33c:	4b15      	ldr	r3, [pc, #84]	; (a394 <m2m_wifi_connect_sc+0x3dc>)
    a33e:	4798      	blx	r3
    a340:	e04d      	b.n	a3de <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    a342:	230a      	movs	r3, #10
    a344:	18fb      	adds	r3, r7, r3
    a346:	781b      	ldrb	r3, [r3, #0]
    a348:	2b04      	cmp	r3, #4
    a34a:	d131      	bne.n	a3b0 <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    a34c:	238c      	movs	r3, #140	; 0x8c
    a34e:	18fb      	adds	r3, r7, r3
    a350:	681b      	ldr	r3, [r3, #0]
    a352:	6879      	ldr	r1, [r7, #4]
    a354:	223e      	movs	r2, #62	; 0x3e
    a356:	0018      	movs	r0, r3
    a358:	4b0e      	ldr	r3, [pc, #56]	; (a394 <m2m_wifi_connect_sc+0x3dc>)
    a35a:	4798      	blx	r3
    a35c:	e03f      	b.n	a3de <m2m_wifi_connect_sc+0x426>
    a35e:	46c0      	nop			; (mov r8, r8)
    a360:	00000215 	.word	0x00000215
    a364:	00018a60 	.word	0x00018a60
    a368:	000186bc 	.word	0x000186bc
    a36c:	00016db1 	.word	0x00016db1
    a370:	000188f0 	.word	0x000188f0
    a374:	00016ed1 	.word	0x00016ed1
    a378:	00016de5 	.word	0x00016de5
    a37c:	00008c65 	.word	0x00008c65
    a380:	00000221 	.word	0x00000221
    a384:	00018904 	.word	0x00018904
    a388:	0000022b 	.word	0x0000022b
    a38c:	00018910 	.word	0x00018910
    a390:	00018924 	.word	0x00018924
    a394:	00008be9 	.word	0x00008be9
    a398:	0000024b 	.word	0x0000024b
    a39c:	00018930 	.word	0x00018930
    a3a0:	00000252 	.word	0x00000252
    a3a4:	0001894c 	.word	0x0001894c
    a3a8:	00000261 	.word	0x00000261
    a3ac:	00018968 	.word	0x00018968
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    a3b0:	230a      	movs	r3, #10
    a3b2:	18fb      	adds	r3, r7, r3
    a3b4:	781b      	ldrb	r3, [r3, #0]
    a3b6:	2b01      	cmp	r3, #1
    a3b8:	d011      	beq.n	a3de <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    a3ba:	4a15      	ldr	r2, [pc, #84]	; (a410 <m2m_wifi_connect_sc+0x458>)
    a3bc:	4915      	ldr	r1, [pc, #84]	; (a414 <m2m_wifi_connect_sc+0x45c>)
    a3be:	4b16      	ldr	r3, [pc, #88]	; (a418 <m2m_wifi_connect_sc+0x460>)
    a3c0:	0018      	movs	r0, r3
    a3c2:	4b16      	ldr	r3, [pc, #88]	; (a41c <m2m_wifi_connect_sc+0x464>)
    a3c4:	4798      	blx	r3
    a3c6:	4b16      	ldr	r3, [pc, #88]	; (a420 <m2m_wifi_connect_sc+0x468>)
    a3c8:	0018      	movs	r0, r3
    a3ca:	4b16      	ldr	r3, [pc, #88]	; (a424 <m2m_wifi_connect_sc+0x46c>)
    a3cc:	4798      	blx	r3
    a3ce:	200d      	movs	r0, #13
    a3d0:	4b15      	ldr	r3, [pc, #84]	; (a428 <m2m_wifi_connect_sc+0x470>)
    a3d2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    a3d4:	2397      	movs	r3, #151	; 0x97
    a3d6:	18fb      	adds	r3, r7, r3
    a3d8:	22f4      	movs	r2, #244	; 0xf4
    a3da:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    a3dc:	e010      	b.n	a400 <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    a3de:	2397      	movs	r3, #151	; 0x97
    a3e0:	18fc      	adds	r4, r7, r3
    a3e2:	2314      	movs	r3, #20
    a3e4:	18fa      	adds	r2, r7, r3
    a3e6:	2300      	movs	r3, #0
    a3e8:	9302      	str	r3, [sp, #8]
    a3ea:	2300      	movs	r3, #0
    a3ec:	9301      	str	r3, [sp, #4]
    a3ee:	2300      	movs	r3, #0
    a3f0:	9300      	str	r3, [sp, #0]
    a3f2:	236c      	movs	r3, #108	; 0x6c
    a3f4:	2128      	movs	r1, #40	; 0x28
    a3f6:	2001      	movs	r0, #1
    a3f8:	4d0c      	ldr	r5, [pc, #48]	; (a42c <m2m_wifi_connect_sc+0x474>)
    a3fa:	47a8      	blx	r5
    a3fc:	0003      	movs	r3, r0
    a3fe:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    a400:	2397      	movs	r3, #151	; 0x97
    a402:	18fb      	adds	r3, r7, r3
    a404:	781b      	ldrb	r3, [r3, #0]
    a406:	b25b      	sxtb	r3, r3
}
    a408:	0018      	movs	r0, r3
    a40a:	46bd      	mov	sp, r7
    a40c:	b026      	add	sp, #152	; 0x98
    a40e:	bdb0      	pop	{r4, r5, r7, pc}
    a410:	00000271 	.word	0x00000271
    a414:	00018a60 	.word	0x00018a60
    a418:	000186bc 	.word	0x000186bc
    a41c:	00016db1 	.word	0x00016db1
    a420:	00018984 	.word	0x00018984
    a424:	00016ed1 	.word	0x00016ed1
    a428:	00016de5 	.word	0x00016de5
    a42c:	00008e85 	.word	0x00008e85

0000a430 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
    a430:	b580      	push	{r7, lr}
    a432:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
    a434:	2300      	movs	r3, #0
}
    a436:	0018      	movs	r0, r3
    a438:	46bd      	mov	sp, r7
    a43a:	bd80      	pop	{r7, pc}

0000a43c <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    a43c:	b590      	push	{r4, r7, lr}
    a43e:	b087      	sub	sp, #28
    a440:	af00      	add	r7, sp, #0
    a442:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    a444:	2317      	movs	r3, #23
    a446:	18fb      	adds	r3, r7, r3
    a448:	2200      	movs	r2, #0
    a44a:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    a44c:	687b      	ldr	r3, [r7, #4]
    a44e:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    a450:	693b      	ldr	r3, [r7, #16]
    a452:	2280      	movs	r2, #128	; 0x80
    a454:	0052      	lsls	r2, r2, #1
    a456:	4313      	orrs	r3, r2
    a458:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    a45a:	693a      	ldr	r2, [r7, #16]
    a45c:	23a5      	movs	r3, #165	; 0xa5
    a45e:	015b      	lsls	r3, r3, #5
    a460:	0011      	movs	r1, r2
    a462:	0018      	movs	r0, r3
    a464:	4b12      	ldr	r3, [pc, #72]	; (a4b0 <chip_apply_conf+0x74>)
    a466:	4798      	blx	r3
		if(val32 != 0) {		
    a468:	693b      	ldr	r3, [r7, #16]
    a46a:	2b00      	cmp	r3, #0
    a46c:	d018      	beq.n	a4a0 <chip_apply_conf+0x64>
			uint32 reg = 0;
    a46e:	2300      	movs	r3, #0
    a470:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    a472:	2317      	movs	r3, #23
    a474:	18fc      	adds	r4, r7, r3
    a476:	230c      	movs	r3, #12
    a478:	18fa      	adds	r2, r7, r3
    a47a:	23a5      	movs	r3, #165	; 0xa5
    a47c:	015b      	lsls	r3, r3, #5
    a47e:	0011      	movs	r1, r2
    a480:	0018      	movs	r0, r3
    a482:	4b0c      	ldr	r3, [pc, #48]	; (a4b4 <chip_apply_conf+0x78>)
    a484:	4798      	blx	r3
    a486:	0003      	movs	r3, r0
    a488:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    a48a:	2317      	movs	r3, #23
    a48c:	18fb      	adds	r3, r7, r3
    a48e:	781b      	ldrb	r3, [r3, #0]
    a490:	b25b      	sxtb	r3, r3
    a492:	2b00      	cmp	r3, #0
    a494:	d1e1      	bne.n	a45a <chip_apply_conf+0x1e>
				if(reg == val32)
    a496:	68fa      	ldr	r2, [r7, #12]
    a498:	693b      	ldr	r3, [r7, #16]
    a49a:	429a      	cmp	r2, r3
    a49c:	d002      	beq.n	a4a4 <chip_apply_conf+0x68>
					break;
			}
		} else {
			break;
		}
	} while(1);
    a49e:	e7dc      	b.n	a45a <chip_apply_conf+0x1e>
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
			}
		} else {
			break;
    a4a0:	46c0      	nop			; (mov r8, r8)
    a4a2:	e000      	b.n	a4a6 <chip_apply_conf+0x6a>
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
    a4a4:	46c0      	nop			; (mov r8, r8)
		} else {
			break;
		}
	} while(1);

	return M2M_SUCCESS;
    a4a6:	2300      	movs	r3, #0
}
    a4a8:	0018      	movs	r0, r3
    a4aa:	46bd      	mov	sp, r7
    a4ac:	b007      	add	sp, #28
    a4ae:	bd90      	pop	{r4, r7, pc}
    a4b0:	0000ac8d 	.word	0x0000ac8d
    a4b4:	0000ac69 	.word	0x0000ac69

0000a4b8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    a4b8:	b590      	push	{r4, r7, lr}
    a4ba:	b083      	sub	sp, #12
    a4bc:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    a4be:	2300      	movs	r3, #0
    a4c0:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    a4c2:	1dfb      	adds	r3, r7, #7
    a4c4:	2200      	movs	r2, #0
    a4c6:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    a4c8:	1dfc      	adds	r4, r7, #7
    a4ca:	003b      	movs	r3, r7
    a4cc:	4a24      	ldr	r2, [pc, #144]	; (a560 <enable_interrupts+0xa8>)
    a4ce:	0019      	movs	r1, r3
    a4d0:	0010      	movs	r0, r2
    a4d2:	4b24      	ldr	r3, [pc, #144]	; (a564 <enable_interrupts+0xac>)
    a4d4:	4798      	blx	r3
    a4d6:	0003      	movs	r3, r0
    a4d8:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    a4da:	1dfb      	adds	r3, r7, #7
    a4dc:	781b      	ldrb	r3, [r3, #0]
    a4de:	b25b      	sxtb	r3, r3
    a4e0:	2b00      	cmp	r3, #0
    a4e2:	d131      	bne.n	a548 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    a4e4:	683b      	ldr	r3, [r7, #0]
    a4e6:	2280      	movs	r2, #128	; 0x80
    a4e8:	0052      	lsls	r2, r2, #1
    a4ea:	4313      	orrs	r3, r2
    a4ec:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    a4ee:	683b      	ldr	r3, [r7, #0]
    a4f0:	1dfc      	adds	r4, r7, #7
    a4f2:	4a1b      	ldr	r2, [pc, #108]	; (a560 <enable_interrupts+0xa8>)
    a4f4:	0019      	movs	r1, r3
    a4f6:	0010      	movs	r0, r2
    a4f8:	4b1b      	ldr	r3, [pc, #108]	; (a568 <enable_interrupts+0xb0>)
    a4fa:	4798      	blx	r3
    a4fc:	0003      	movs	r3, r0
    a4fe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    a500:	1dfb      	adds	r3, r7, #7
    a502:	781b      	ldrb	r3, [r3, #0]
    a504:	b25b      	sxtb	r3, r3
    a506:	2b00      	cmp	r3, #0
    a508:	d120      	bne.n	a54c <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    a50a:	1dfc      	adds	r4, r7, #7
    a50c:	003a      	movs	r2, r7
    a50e:	23d0      	movs	r3, #208	; 0xd0
    a510:	015b      	lsls	r3, r3, #5
    a512:	0011      	movs	r1, r2
    a514:	0018      	movs	r0, r3
    a516:	4b13      	ldr	r3, [pc, #76]	; (a564 <enable_interrupts+0xac>)
    a518:	4798      	blx	r3
    a51a:	0003      	movs	r3, r0
    a51c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    a51e:	1dfb      	adds	r3, r7, #7
    a520:	781b      	ldrb	r3, [r3, #0]
    a522:	b25b      	sxtb	r3, r3
    a524:	2b00      	cmp	r3, #0
    a526:	d113      	bne.n	a550 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    a528:	683b      	ldr	r3, [r7, #0]
    a52a:	2280      	movs	r2, #128	; 0x80
    a52c:	0252      	lsls	r2, r2, #9
    a52e:	4313      	orrs	r3, r2
    a530:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    a532:	683a      	ldr	r2, [r7, #0]
    a534:	1dfc      	adds	r4, r7, #7
    a536:	23d0      	movs	r3, #208	; 0xd0
    a538:	015b      	lsls	r3, r3, #5
    a53a:	0011      	movs	r1, r2
    a53c:	0018      	movs	r0, r3
    a53e:	4b0a      	ldr	r3, [pc, #40]	; (a568 <enable_interrupts+0xb0>)
    a540:	4798      	blx	r3
    a542:	0003      	movs	r3, r0
    a544:	7023      	strb	r3, [r4, #0]
    a546:	e004      	b.n	a552 <enable_interrupts+0x9a>
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) goto ERR1;
    a548:	46c0      	nop			; (mov r8, r8)
    a54a:	e002      	b.n	a552 <enable_interrupts+0x9a>
	
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
    a54c:	46c0      	nop			; (mov r8, r8)
    a54e:	e000      	b.n	a552 <enable_interrupts+0x9a>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) goto ERR1;
    a550:	46c0      	nop			; (mov r8, r8)
	
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    a552:	1dfb      	adds	r3, r7, #7
    a554:	781b      	ldrb	r3, [r3, #0]
    a556:	b25b      	sxtb	r3, r3
}
    a558:	0018      	movs	r0, r3
    a55a:	46bd      	mov	sp, r7
    a55c:	b003      	add	sp, #12
    a55e:	bd90      	pop	{r4, r7, pc}
    a560:	00001408 	.word	0x00001408
    a564:	0000ac69 	.word	0x0000ac69
    a568:	0000ac8d 	.word	0x0000ac8d

0000a56c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    a56c:	b580      	push	{r7, lr}
    a56e:	b082      	sub	sp, #8
    a570:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    a572:	4b32      	ldr	r3, [pc, #200]	; (a63c <nmi_get_chipid+0xd0>)
    a574:	681b      	ldr	r3, [r3, #0]
    a576:	2b00      	cmp	r3, #0
    a578:	d159      	bne.n	a62e <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    a57a:	4a30      	ldr	r2, [pc, #192]	; (a63c <nmi_get_chipid+0xd0>)
    a57c:	2380      	movs	r3, #128	; 0x80
    a57e:	015b      	lsls	r3, r3, #5
    a580:	0011      	movs	r1, r2
    a582:	0018      	movs	r0, r3
    a584:	4b2e      	ldr	r3, [pc, #184]	; (a640 <nmi_get_chipid+0xd4>)
    a586:	4798      	blx	r3
    a588:	1e03      	subs	r3, r0, #0
    a58a:	d004      	beq.n	a596 <nmi_get_chipid+0x2a>
			chipid = 0;
    a58c:	4b2b      	ldr	r3, [pc, #172]	; (a63c <nmi_get_chipid+0xd0>)
    a58e:	2200      	movs	r2, #0
    a590:	601a      	str	r2, [r3, #0]
			return 0;
    a592:	2300      	movs	r3, #0
    a594:	e04d      	b.n	a632 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    a596:	1d3b      	adds	r3, r7, #4
    a598:	4a2a      	ldr	r2, [pc, #168]	; (a644 <nmi_get_chipid+0xd8>)
    a59a:	0019      	movs	r1, r3
    a59c:	0010      	movs	r0, r2
    a59e:	4b28      	ldr	r3, [pc, #160]	; (a640 <nmi_get_chipid+0xd4>)
    a5a0:	4798      	blx	r3
    a5a2:	1e03      	subs	r3, r0, #0
    a5a4:	d004      	beq.n	a5b0 <nmi_get_chipid+0x44>
			chipid = 0;
    a5a6:	4b25      	ldr	r3, [pc, #148]	; (a63c <nmi_get_chipid+0xd0>)
    a5a8:	2200      	movs	r2, #0
    a5aa:	601a      	str	r2, [r3, #0]
			return 0;
    a5ac:	2300      	movs	r3, #0
    a5ae:	e040      	b.n	a632 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    a5b0:	4b22      	ldr	r3, [pc, #136]	; (a63c <nmi_get_chipid+0xd0>)
    a5b2:	681b      	ldr	r3, [r3, #0]
    a5b4:	4a24      	ldr	r2, [pc, #144]	; (a648 <nmi_get_chipid+0xdc>)
    a5b6:	4293      	cmp	r3, r2
    a5b8:	d106      	bne.n	a5c8 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    a5ba:	687b      	ldr	r3, [r7, #4]
    a5bc:	2b01      	cmp	r3, #1
    a5be:	d029      	beq.n	a614 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    a5c0:	4b1e      	ldr	r3, [pc, #120]	; (a63c <nmi_get_chipid+0xd0>)
    a5c2:	4a22      	ldr	r2, [pc, #136]	; (a64c <nmi_get_chipid+0xe0>)
    a5c4:	601a      	str	r2, [r3, #0]
    a5c6:	e025      	b.n	a614 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    a5c8:	4b1c      	ldr	r3, [pc, #112]	; (a63c <nmi_get_chipid+0xd0>)
    a5ca:	681b      	ldr	r3, [r3, #0]
    a5cc:	4a20      	ldr	r2, [pc, #128]	; (a650 <nmi_get_chipid+0xe4>)
    a5ce:	4293      	cmp	r3, r2
    a5d0:	d10d      	bne.n	a5ee <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    a5d2:	687b      	ldr	r3, [r7, #4]
    a5d4:	2b03      	cmp	r3, #3
    a5d6:	d01d      	beq.n	a614 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    a5d8:	687b      	ldr	r3, [r7, #4]
    a5da:	2b04      	cmp	r3, #4
    a5dc:	d103      	bne.n	a5e6 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    a5de:	4b17      	ldr	r3, [pc, #92]	; (a63c <nmi_get_chipid+0xd0>)
    a5e0:	4a1c      	ldr	r2, [pc, #112]	; (a654 <nmi_get_chipid+0xe8>)
    a5e2:	601a      	str	r2, [r3, #0]
    a5e4:	e016      	b.n	a614 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    a5e6:	4b15      	ldr	r3, [pc, #84]	; (a63c <nmi_get_chipid+0xd0>)
    a5e8:	4a1b      	ldr	r2, [pc, #108]	; (a658 <nmi_get_chipid+0xec>)
    a5ea:	601a      	str	r2, [r3, #0]
    a5ec:	e012      	b.n	a614 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    a5ee:	4b13      	ldr	r3, [pc, #76]	; (a63c <nmi_get_chipid+0xd0>)
    a5f0:	681b      	ldr	r3, [r3, #0]
    a5f2:	4a1a      	ldr	r2, [pc, #104]	; (a65c <nmi_get_chipid+0xf0>)
    a5f4:	4293      	cmp	r3, r2
    a5f6:	d10d      	bne.n	a614 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    a5f8:	4a10      	ldr	r2, [pc, #64]	; (a63c <nmi_get_chipid+0xd0>)
    a5fa:	23ec      	movs	r3, #236	; 0xec
    a5fc:	039b      	lsls	r3, r3, #14
    a5fe:	0011      	movs	r1, r2
    a600:	0018      	movs	r0, r3
    a602:	4b0f      	ldr	r3, [pc, #60]	; (a640 <nmi_get_chipid+0xd4>)
    a604:	4798      	blx	r3
    a606:	1e03      	subs	r3, r0, #0
    a608:	d004      	beq.n	a614 <nmi_get_chipid+0xa8>
			chipid = 0;
    a60a:	4b0c      	ldr	r3, [pc, #48]	; (a63c <nmi_get_chipid+0xd0>)
    a60c:	2200      	movs	r2, #0
    a60e:	601a      	str	r2, [r3, #0]
			return 0;
    a610:	2300      	movs	r3, #0
    a612:	e00e      	b.n	a632 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    a614:	4b09      	ldr	r3, [pc, #36]	; (a63c <nmi_get_chipid+0xd0>)
    a616:	681b      	ldr	r3, [r3, #0]
    a618:	4a11      	ldr	r2, [pc, #68]	; (a660 <nmi_get_chipid+0xf4>)
    a61a:	401a      	ands	r2, r3
    a61c:	4b07      	ldr	r3, [pc, #28]	; (a63c <nmi_get_chipid+0xd0>)
    a61e:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    a620:	4b06      	ldr	r3, [pc, #24]	; (a63c <nmi_get_chipid+0xd0>)
    a622:	681b      	ldr	r3, [r3, #0]
    a624:	22a0      	movs	r2, #160	; 0xa0
    a626:	02d2      	lsls	r2, r2, #11
    a628:	431a      	orrs	r2, r3
    a62a:	4b04      	ldr	r3, [pc, #16]	; (a63c <nmi_get_chipid+0xd0>)
    a62c:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    a62e:	4b03      	ldr	r3, [pc, #12]	; (a63c <nmi_get_chipid+0xd0>)
    a630:	681b      	ldr	r3, [r3, #0]
}
    a632:	0018      	movs	r0, r3
    a634:	46bd      	mov	sp, r7
    a636:	b002      	add	sp, #8
    a638:	bd80      	pop	{r7, pc}
    a63a:	46c0      	nop			; (mov r8, r8)
    a63c:	200000ac 	.word	0x200000ac
    a640:	0000ac69 	.word	0x0000ac69
    a644:	000013f4 	.word	0x000013f4
    a648:	001002a0 	.word	0x001002a0
    a64c:	001002a1 	.word	0x001002a1
    a650:	001002b0 	.word	0x001002b0
    a654:	001002b1 	.word	0x001002b1
    a658:	001002b2 	.word	0x001002b2
    a65c:	001000f0 	.word	0x001000f0
    a660:	fff0ffff 	.word	0xfff0ffff

0000a664 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    a664:	b590      	push	{r4, r7, lr}
    a666:	b083      	sub	sp, #12
    a668:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    a66a:	1dfb      	adds	r3, r7, #7
    a66c:	2200      	movs	r2, #0
    a66e:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    a670:	1dfc      	adds	r4, r7, #7
    a672:	003b      	movs	r3, r7
    a674:	0019      	movs	r1, r3
    a676:	2010      	movs	r0, #16
    a678:	4b2e      	ldr	r3, [pc, #184]	; (a734 <chip_sleep+0xd0>)
    a67a:	4798      	blx	r3
    a67c:	0003      	movs	r3, r0
    a67e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    a680:	1dfb      	adds	r3, r7, #7
    a682:	781b      	ldrb	r3, [r3, #0]
    a684:	b25b      	sxtb	r3, r3
    a686:	2b00      	cmp	r3, #0
    a688:	d145      	bne.n	a716 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    a68a:	683b      	ldr	r3, [r7, #0]
    a68c:	2201      	movs	r2, #1
    a68e:	4013      	ands	r3, r2
    a690:	d000      	beq.n	a694 <chip_sleep+0x30>
	}
    a692:	e7ed      	b.n	a670 <chip_sleep+0xc>
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    a694:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    a696:	1dfc      	adds	r4, r7, #7
    a698:	003b      	movs	r3, r7
    a69a:	0019      	movs	r1, r3
    a69c:	2001      	movs	r0, #1
    a69e:	4b25      	ldr	r3, [pc, #148]	; (a734 <chip_sleep+0xd0>)
    a6a0:	4798      	blx	r3
    a6a2:	0003      	movs	r3, r0
    a6a4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    a6a6:	1dfb      	adds	r3, r7, #7
    a6a8:	781b      	ldrb	r3, [r3, #0]
    a6aa:	b25b      	sxtb	r3, r3
    a6ac:	2b00      	cmp	r3, #0
    a6ae:	d134      	bne.n	a71a <chip_sleep+0xb6>
	if(reg & NBIT1)
    a6b0:	683b      	ldr	r3, [r7, #0]
    a6b2:	2202      	movs	r2, #2
    a6b4:	4013      	ands	r3, r2
    a6b6:	d010      	beq.n	a6da <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    a6b8:	683b      	ldr	r3, [r7, #0]
    a6ba:	2202      	movs	r2, #2
    a6bc:	4393      	bics	r3, r2
    a6be:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    a6c0:	683b      	ldr	r3, [r7, #0]
    a6c2:	1dfc      	adds	r4, r7, #7
    a6c4:	0019      	movs	r1, r3
    a6c6:	2001      	movs	r0, #1
    a6c8:	4b1b      	ldr	r3, [pc, #108]	; (a738 <chip_sleep+0xd4>)
    a6ca:	4798      	blx	r3
    a6cc:	0003      	movs	r3, r0
    a6ce:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    a6d0:	1dfb      	adds	r3, r7, #7
    a6d2:	781b      	ldrb	r3, [r3, #0]
    a6d4:	b25b      	sxtb	r3, r3
    a6d6:	2b00      	cmp	r3, #0
    a6d8:	d121      	bne.n	a71e <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    a6da:	1dfc      	adds	r4, r7, #7
    a6dc:	003b      	movs	r3, r7
    a6de:	0019      	movs	r1, r3
    a6e0:	200b      	movs	r0, #11
    a6e2:	4b14      	ldr	r3, [pc, #80]	; (a734 <chip_sleep+0xd0>)
    a6e4:	4798      	blx	r3
    a6e6:	0003      	movs	r3, r0
    a6e8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    a6ea:	1dfb      	adds	r3, r7, #7
    a6ec:	781b      	ldrb	r3, [r3, #0]
    a6ee:	b25b      	sxtb	r3, r3
    a6f0:	2b00      	cmp	r3, #0
    a6f2:	d116      	bne.n	a722 <chip_sleep+0xbe>
	if(reg & NBIT0)
    a6f4:	683b      	ldr	r3, [r7, #0]
    a6f6:	2201      	movs	r2, #1
    a6f8:	4013      	ands	r3, r2
    a6fa:	d013      	beq.n	a724 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    a6fc:	683b      	ldr	r3, [r7, #0]
    a6fe:	2201      	movs	r2, #1
    a700:	4393      	bics	r3, r2
    a702:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    a704:	683b      	ldr	r3, [r7, #0]
    a706:	1dfc      	adds	r4, r7, #7
    a708:	0019      	movs	r1, r3
    a70a:	200b      	movs	r0, #11
    a70c:	4b0a      	ldr	r3, [pc, #40]	; (a738 <chip_sleep+0xd4>)
    a70e:	4798      	blx	r3
    a710:	0003      	movs	r3, r0
    a712:	7023      	strb	r3, [r4, #0]
    a714:	e006      	b.n	a724 <chip_sleep+0xc0>
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
		if(ret != M2M_SUCCESS) goto ERR1;
    a716:	46c0      	nop			; (mov r8, r8)
    a718:	e004      	b.n	a724 <chip_sleep+0xc0>
		if((reg & NBIT0) == 0) break;
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    a71a:	46c0      	nop			; (mov r8, r8)
    a71c:	e002      	b.n	a724 <chip_sleep+0xc0>
	if(reg & NBIT1)
	{
		reg &=~NBIT1;
		ret = nm_write_reg(WAKE_CLK_REG, reg);
		if(ret != M2M_SUCCESS)goto ERR1;
    a71e:	46c0      	nop			; (mov r8, r8)
    a720:	e000      	b.n	a724 <chip_sleep+0xc0>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    a722:	46c0      	nop			; (mov r8, r8)
		ret = nm_write_reg(HOST_CORT_COMM, reg);
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    a724:	1dfb      	adds	r3, r7, #7
    a726:	781b      	ldrb	r3, [r3, #0]
    a728:	b25b      	sxtb	r3, r3
}
    a72a:	0018      	movs	r0, r3
    a72c:	46bd      	mov	sp, r7
    a72e:	b003      	add	sp, #12
    a730:	bd90      	pop	{r4, r7, pc}
    a732:	46c0      	nop			; (mov r8, r8)
    a734:	0000ac69 	.word	0x0000ac69
    a738:	0000ac8d 	.word	0x0000ac8d

0000a73c <chip_wake>:
sint8 chip_wake(void)
{
    a73c:	b590      	push	{r4, r7, lr}
    a73e:	b085      	sub	sp, #20
    a740:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    a742:	230f      	movs	r3, #15
    a744:	18fb      	adds	r3, r7, r3
    a746:	2200      	movs	r2, #0
    a748:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    a74a:	2300      	movs	r3, #0
    a74c:	607b      	str	r3, [r7, #4]
    a74e:	2300      	movs	r3, #0
    a750:	603b      	str	r3, [r7, #0]
    a752:	2300      	movs	r3, #0
    a754:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    a756:	230f      	movs	r3, #15
    a758:	18fc      	adds	r4, r7, r3
    a75a:	1d3b      	adds	r3, r7, #4
    a75c:	0019      	movs	r1, r3
    a75e:	200b      	movs	r0, #11
    a760:	4b4c      	ldr	r3, [pc, #304]	; (a894 <chip_wake+0x158>)
    a762:	4798      	blx	r3
    a764:	0003      	movs	r3, r0
    a766:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a768:	230f      	movs	r3, #15
    a76a:	18fb      	adds	r3, r7, r3
    a76c:	781b      	ldrb	r3, [r3, #0]
    a76e:	b25b      	sxtb	r3, r3
    a770:	2b00      	cmp	r3, #0
    a772:	d000      	beq.n	a776 <chip_wake+0x3a>
    a774:	e07f      	b.n	a876 <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    a776:	687b      	ldr	r3, [r7, #4]
    a778:	2201      	movs	r2, #1
    a77a:	4013      	ands	r3, r2
    a77c:	d110      	bne.n	a7a0 <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    a77e:	687b      	ldr	r3, [r7, #4]
    a780:	2201      	movs	r2, #1
    a782:	4313      	orrs	r3, r2
    a784:	220f      	movs	r2, #15
    a786:	18bc      	adds	r4, r7, r2
    a788:	0019      	movs	r1, r3
    a78a:	200b      	movs	r0, #11
    a78c:	4b42      	ldr	r3, [pc, #264]	; (a898 <chip_wake+0x15c>)
    a78e:	4798      	blx	r3
    a790:	0003      	movs	r3, r0
    a792:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a794:	230f      	movs	r3, #15
    a796:	18fb      	adds	r3, r7, r3
    a798:	781b      	ldrb	r3, [r3, #0]
    a79a:	b25b      	sxtb	r3, r3
    a79c:	2b00      	cmp	r3, #0
    a79e:	d16c      	bne.n	a87a <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    a7a0:	230f      	movs	r3, #15
    a7a2:	18fc      	adds	r4, r7, r3
    a7a4:	1d3b      	adds	r3, r7, #4
    a7a6:	0019      	movs	r1, r3
    a7a8:	2001      	movs	r0, #1
    a7aa:	4b3a      	ldr	r3, [pc, #232]	; (a894 <chip_wake+0x158>)
    a7ac:	4798      	blx	r3
    a7ae:	0003      	movs	r3, r0
    a7b0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a7b2:	230f      	movs	r3, #15
    a7b4:	18fb      	adds	r3, r7, r3
    a7b6:	781b      	ldrb	r3, [r3, #0]
    a7b8:	b25b      	sxtb	r3, r3
    a7ba:	2b00      	cmp	r3, #0
    a7bc:	d15f      	bne.n	a87e <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    a7be:	687b      	ldr	r3, [r7, #4]
    a7c0:	2202      	movs	r2, #2
    a7c2:	4013      	ands	r3, r2
    a7c4:	d110      	bne.n	a7e8 <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    a7c6:	687b      	ldr	r3, [r7, #4]
    a7c8:	2202      	movs	r2, #2
    a7ca:	4313      	orrs	r3, r2
    a7cc:	220f      	movs	r2, #15
    a7ce:	18bc      	adds	r4, r7, r2
    a7d0:	0019      	movs	r1, r3
    a7d2:	2001      	movs	r0, #1
    a7d4:	4b30      	ldr	r3, [pc, #192]	; (a898 <chip_wake+0x15c>)
    a7d6:	4798      	blx	r3
    a7d8:	0003      	movs	r3, r0
    a7da:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    a7dc:	230f      	movs	r3, #15
    a7de:	18fb      	adds	r3, r7, r3
    a7e0:	781b      	ldrb	r3, [r3, #0]
    a7e2:	b25b      	sxtb	r3, r3
    a7e4:	2b00      	cmp	r3, #0
    a7e6:	d14c      	bne.n	a882 <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    a7e8:	230f      	movs	r3, #15
    a7ea:	18fc      	adds	r4, r7, r3
    a7ec:	003b      	movs	r3, r7
    a7ee:	0019      	movs	r1, r3
    a7f0:	200f      	movs	r0, #15
    a7f2:	4b28      	ldr	r3, [pc, #160]	; (a894 <chip_wake+0x158>)
    a7f4:	4798      	blx	r3
    a7f6:	0003      	movs	r3, r0
    a7f8:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    a7fa:	230f      	movs	r3, #15
    a7fc:	18fb      	adds	r3, r7, r3
    a7fe:	781b      	ldrb	r3, [r3, #0]
    a800:	b25b      	sxtb	r3, r3
    a802:	2b00      	cmp	r3, #0
    a804:	d013      	beq.n	a82e <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    a806:	23aa      	movs	r3, #170	; 0xaa
    a808:	005a      	lsls	r2, r3, #1
    a80a:	4924      	ldr	r1, [pc, #144]	; (a89c <chip_wake+0x160>)
    a80c:	4b24      	ldr	r3, [pc, #144]	; (a8a0 <chip_wake+0x164>)
    a80e:	0018      	movs	r0, r3
    a810:	4b24      	ldr	r3, [pc, #144]	; (a8a4 <chip_wake+0x168>)
    a812:	4798      	blx	r3
    a814:	230f      	movs	r3, #15
    a816:	18fb      	adds	r3, r7, r3
    a818:	2100      	movs	r1, #0
    a81a:	5659      	ldrsb	r1, [r3, r1]
    a81c:	683a      	ldr	r2, [r7, #0]
    a81e:	4b22      	ldr	r3, [pc, #136]	; (a8a8 <chip_wake+0x16c>)
    a820:	0018      	movs	r0, r3
    a822:	4b20      	ldr	r3, [pc, #128]	; (a8a4 <chip_wake+0x168>)
    a824:	4798      	blx	r3
    a826:	200d      	movs	r0, #13
    a828:	4b20      	ldr	r3, [pc, #128]	; (a8ac <chip_wake+0x170>)
    a82a:	4798      	blx	r3
			goto _WAKE_EXIT;
    a82c:	e02a      	b.n	a884 <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    a82e:	683b      	ldr	r3, [r7, #0]
    a830:	2204      	movs	r2, #4
    a832:	4013      	ands	r3, r2
    a834:	d11b      	bne.n	a86e <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    a836:	2002      	movs	r0, #2
    a838:	4b1d      	ldr	r3, [pc, #116]	; (a8b0 <chip_wake+0x174>)
    a83a:	4798      	blx	r3
		trials++;
    a83c:	68bb      	ldr	r3, [r7, #8]
    a83e:	3301      	adds	r3, #1
    a840:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    a842:	68bb      	ldr	r3, [r7, #8]
    a844:	2b04      	cmp	r3, #4
    a846:	d9cf      	bls.n	a7e8 <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    a848:	23af      	movs	r3, #175	; 0xaf
    a84a:	005a      	lsls	r2, r3, #1
    a84c:	4913      	ldr	r1, [pc, #76]	; (a89c <chip_wake+0x160>)
    a84e:	4b14      	ldr	r3, [pc, #80]	; (a8a0 <chip_wake+0x164>)
    a850:	0018      	movs	r0, r3
    a852:	4b14      	ldr	r3, [pc, #80]	; (a8a4 <chip_wake+0x168>)
    a854:	4798      	blx	r3
    a856:	4b17      	ldr	r3, [pc, #92]	; (a8b4 <chip_wake+0x178>)
    a858:	0018      	movs	r0, r3
    a85a:	4b17      	ldr	r3, [pc, #92]	; (a8b8 <chip_wake+0x17c>)
    a85c:	4798      	blx	r3
    a85e:	200d      	movs	r0, #13
    a860:	4b12      	ldr	r3, [pc, #72]	; (a8ac <chip_wake+0x170>)
    a862:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    a864:	230f      	movs	r3, #15
    a866:	18fb      	adds	r3, r7, r3
    a868:	22fc      	movs	r2, #252	; 0xfc
    a86a:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    a86c:	e00a      	b.n	a884 <chip_wake+0x148>
		if(ret != M2M_SUCCESS) {
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
    a86e:	46c0      	nop			; (mov r8, r8)
			goto _WAKE_EXIT;
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    a870:	4b12      	ldr	r3, [pc, #72]	; (a8bc <chip_wake+0x180>)
    a872:	4798      	blx	r3
    a874:	e006      	b.n	a884 <chip_wake+0x148>
{
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a876:	46c0      	nop			; (mov r8, r8)
    a878:	e004      	b.n	a884 <chip_wake+0x148>
	
	if(!(reg & NBIT0))
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a87a:	46c0      	nop			; (mov r8, r8)
    a87c:	e002      	b.n	a884 <chip_wake+0x148>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a87e:	46c0      	nop			; (mov r8, r8)
    a880:	e000      	b.n	a884 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    a882:	46c0      	nop			; (mov r8, r8)
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
    a884:	230f      	movs	r3, #15
    a886:	18fb      	adds	r3, r7, r3
    a888:	781b      	ldrb	r3, [r3, #0]
    a88a:	b25b      	sxtb	r3, r3
}
    a88c:	0018      	movs	r0, r3
    a88e:	46bd      	mov	sp, r7
    a890:	b005      	add	sp, #20
    a892:	bd90      	pop	{r4, r7, pc}
    a894:	0000ac69 	.word	0x0000ac69
    a898:	0000ac8d 	.word	0x0000ac8d
    a89c:	00018af8 	.word	0x00018af8
    a8a0:	00018a74 	.word	0x00018a74
    a8a4:	00016db1 	.word	0x00016db1
    a8a8:	00018a88 	.word	0x00018a88
    a8ac:	00016de5 	.word	0x00016de5
    a8b0:	00008335 	.word	0x00008335
    a8b4:	00018aa0 	.word	0x00018aa0
    a8b8:	00016ed1 	.word	0x00016ed1
    a8bc:	0000ac29 	.word	0x0000ac29

0000a8c0 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    a8c0:	b580      	push	{r7, lr}
    a8c2:	b088      	sub	sp, #32
    a8c4:	af00      	add	r7, sp, #0
    a8c6:	0002      	movs	r2, r0
    a8c8:	1dfb      	adds	r3, r7, #7
    a8ca:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    a8cc:	2313      	movs	r3, #19
    a8ce:	18fb      	adds	r3, r7, r3
    a8d0:	2200      	movs	r2, #0
    a8d2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    a8d4:	2300      	movs	r3, #0
    a8d6:	61fb      	str	r3, [r7, #28]
    a8d8:	2300      	movs	r3, #0
    a8da:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    a8dc:	2300      	movs	r3, #0
    a8de:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    a8e0:	4b4a      	ldr	r3, [pc, #296]	; (aa0c <wait_for_bootrom+0x14c>)
    a8e2:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    a8e4:	2300      	movs	r3, #0
    a8e6:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    a8e8:	4b49      	ldr	r3, [pc, #292]	; (aa10 <wait_for_bootrom+0x150>)
    a8ea:	0018      	movs	r0, r3
    a8ec:	4b49      	ldr	r3, [pc, #292]	; (aa14 <wait_for_bootrom+0x154>)
    a8ee:	4798      	blx	r3
    a8f0:	0003      	movs	r3, r0
    a8f2:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    a8f4:	69fb      	ldr	r3, [r7, #28]
    a8f6:	2b00      	cmp	r3, #0
    a8f8:	db03      	blt.n	a902 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    a8fa:	2001      	movs	r0, #1
    a8fc:	4b46      	ldr	r3, [pc, #280]	; (aa18 <wait_for_bootrom+0x158>)
    a8fe:	4798      	blx	r3
	}
    a900:	e7f2      	b.n	a8e8 <wait_for_bootrom+0x28>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    a902:	46c0      	nop			; (mov r8, r8)
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    a904:	4b45      	ldr	r3, [pc, #276]	; (aa1c <wait_for_bootrom+0x15c>)
    a906:	0018      	movs	r0, r3
    a908:	4b42      	ldr	r3, [pc, #264]	; (aa14 <wait_for_bootrom+0x154>)
    a90a:	4798      	blx	r3
    a90c:	0003      	movs	r3, r0
    a90e:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    a910:	69fb      	ldr	r3, [r7, #28]
    a912:	2201      	movs	r2, #1
    a914:	4013      	ands	r3, r2
    a916:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    a918:	69fb      	ldr	r3, [r7, #28]
    a91a:	2b00      	cmp	r3, #0
    a91c:	d112      	bne.n	a944 <wait_for_bootrom+0x84>
	{
		reg = 0;
    a91e:	2300      	movs	r3, #0
    a920:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    a922:	e00b      	b.n	a93c <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    a924:	2001      	movs	r0, #1
    a926:	4b3c      	ldr	r3, [pc, #240]	; (aa18 <wait_for_bootrom+0x158>)
    a928:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    a92a:	4b3d      	ldr	r3, [pc, #244]	; (aa20 <wait_for_bootrom+0x160>)
    a92c:	0018      	movs	r0, r3
    a92e:	4b39      	ldr	r3, [pc, #228]	; (aa14 <wait_for_bootrom+0x154>)
    a930:	4798      	blx	r3
    a932:	0003      	movs	r3, r0
    a934:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    a936:	69bb      	ldr	r3, [r7, #24]
    a938:	3301      	adds	r3, #1
    a93a:	61bb      	str	r3, [r7, #24]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    a93c:	69fb      	ldr	r3, [r7, #28]
    a93e:	4a39      	ldr	r2, [pc, #228]	; (aa24 <wait_for_bootrom+0x164>)
    a940:	4293      	cmp	r3, r2
    a942:	d1ef      	bne.n	a924 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    a944:	1dfb      	adds	r3, r7, #7
    a946:	781b      	ldrb	r3, [r3, #0]
    a948:	2b02      	cmp	r3, #2
    a94a:	d10d      	bne.n	a968 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    a94c:	4a36      	ldr	r2, [pc, #216]	; (aa28 <wait_for_bootrom+0x168>)
    a94e:	4b37      	ldr	r3, [pc, #220]	; (aa2c <wait_for_bootrom+0x16c>)
    a950:	0011      	movs	r1, r2
    a952:	0018      	movs	r0, r3
    a954:	4b36      	ldr	r3, [pc, #216]	; (aa30 <wait_for_bootrom+0x170>)
    a956:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    a958:	2380      	movs	r3, #128	; 0x80
    a95a:	035b      	lsls	r3, r3, #13
    a95c:	4a35      	ldr	r2, [pc, #212]	; (aa34 <wait_for_bootrom+0x174>)
    a95e:	0019      	movs	r1, r3
    a960:	0010      	movs	r0, r2
    a962:	4b33      	ldr	r3, [pc, #204]	; (aa30 <wait_for_bootrom+0x170>)
    a964:	4798      	blx	r3
    a966:	e022      	b.n	a9ae <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    a968:	1dfb      	adds	r3, r7, #7
    a96a:	781b      	ldrb	r3, [r3, #0]
    a96c:	2b03      	cmp	r3, #3
    a96e:	d10b      	bne.n	a988 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    a970:	4a2d      	ldr	r2, [pc, #180]	; (aa28 <wait_for_bootrom+0x168>)
    a972:	4b2e      	ldr	r3, [pc, #184]	; (aa2c <wait_for_bootrom+0x16c>)
    a974:	0011      	movs	r1, r2
    a976:	0018      	movs	r0, r3
    a978:	4b2d      	ldr	r3, [pc, #180]	; (aa30 <wait_for_bootrom+0x170>)
    a97a:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    a97c:	4b2d      	ldr	r3, [pc, #180]	; (aa34 <wait_for_bootrom+0x174>)
    a97e:	2100      	movs	r1, #0
    a980:	0018      	movs	r0, r3
    a982:	4b2b      	ldr	r3, [pc, #172]	; (aa30 <wait_for_bootrom+0x170>)
    a984:	4798      	blx	r3
    a986:	e012      	b.n	a9ae <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    a988:	1dfb      	adds	r3, r7, #7
    a98a:	781b      	ldrb	r3, [r3, #0]
    a98c:	2b04      	cmp	r3, #4
    a98e:	d108      	bne.n	a9a2 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    a990:	2380      	movs	r3, #128	; 0x80
    a992:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    a994:	68fb      	ldr	r3, [r7, #12]
    a996:	4a27      	ldr	r2, [pc, #156]	; (aa34 <wait_for_bootrom+0x174>)
    a998:	0019      	movs	r1, r3
    a99a:	0010      	movs	r0, r2
    a99c:	4b24      	ldr	r3, [pc, #144]	; (aa30 <wait_for_bootrom+0x170>)
    a99e:	4798      	blx	r3
    a9a0:	e005      	b.n	a9ae <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    a9a2:	68fb      	ldr	r3, [r7, #12]
    a9a4:	4a23      	ldr	r2, [pc, #140]	; (aa34 <wait_for_bootrom+0x174>)
    a9a6:	0019      	movs	r1, r3
    a9a8:	0010      	movs	r0, r2
    a9aa:	4b21      	ldr	r3, [pc, #132]	; (aa30 <wait_for_bootrom+0x170>)
    a9ac:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    a9ae:	4b22      	ldr	r3, [pc, #136]	; (aa38 <wait_for_bootrom+0x178>)
    a9b0:	4798      	blx	r3
    a9b2:	0003      	movs	r3, r0
    a9b4:	051b      	lsls	r3, r3, #20
    a9b6:	0d1b      	lsrs	r3, r3, #20
    a9b8:	4a20      	ldr	r2, [pc, #128]	; (aa3c <wait_for_bootrom+0x17c>)
    a9ba:	4293      	cmp	r3, r2
    a9bc:	d906      	bls.n	a9cc <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    a9be:	697b      	ldr	r3, [r7, #20]
    a9c0:	2202      	movs	r2, #2
    a9c2:	4313      	orrs	r3, r2
    a9c4:	0018      	movs	r0, r3
    a9c6:	4b1e      	ldr	r3, [pc, #120]	; (aa40 <wait_for_bootrom+0x180>)
    a9c8:	4798      	blx	r3
    a9ca:	e003      	b.n	a9d4 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    a9cc:	697b      	ldr	r3, [r7, #20]
    a9ce:	0018      	movs	r0, r3
    a9d0:	4b1b      	ldr	r3, [pc, #108]	; (aa40 <wait_for_bootrom+0x180>)
    a9d2:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    a9d4:	4b1b      	ldr	r3, [pc, #108]	; (aa44 <wait_for_bootrom+0x184>)
    a9d6:	0018      	movs	r0, r3
    a9d8:	4b1b      	ldr	r3, [pc, #108]	; (aa48 <wait_for_bootrom+0x188>)
    a9da:	4798      	blx	r3
    a9dc:	68fa      	ldr	r2, [r7, #12]
    a9de:	4b1b      	ldr	r3, [pc, #108]	; (aa4c <wait_for_bootrom+0x18c>)
    a9e0:	0011      	movs	r1, r2
    a9e2:	0018      	movs	r0, r3
    a9e4:	4b18      	ldr	r3, [pc, #96]	; (aa48 <wait_for_bootrom+0x188>)
    a9e6:	4798      	blx	r3
    a9e8:	200d      	movs	r0, #13
    a9ea:	4b19      	ldr	r3, [pc, #100]	; (aa50 <wait_for_bootrom+0x190>)
    a9ec:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    a9ee:	4a19      	ldr	r2, [pc, #100]	; (aa54 <wait_for_bootrom+0x194>)
    a9f0:	4b0b      	ldr	r3, [pc, #44]	; (aa20 <wait_for_bootrom+0x160>)
    a9f2:	0011      	movs	r1, r2
    a9f4:	0018      	movs	r0, r3
    a9f6:	4b0e      	ldr	r3, [pc, #56]	; (aa30 <wait_for_bootrom+0x170>)
    a9f8:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    a9fa:	2313      	movs	r3, #19
    a9fc:	18fb      	adds	r3, r7, r3
    a9fe:	781b      	ldrb	r3, [r3, #0]
    aa00:	b25b      	sxtb	r3, r3
}
    aa02:	0018      	movs	r0, r3
    aa04:	46bd      	mov	sp, r7
    aa06:	b008      	add	sp, #32
    aa08:	bd80      	pop	{r7, pc}
    aa0a:	46c0      	nop			; (mov r8, r8)
    aa0c:	13521352 	.word	0x13521352
    aa10:	00001014 	.word	0x00001014
    aa14:	0000ac49 	.word	0x0000ac49
    aa18:	00008335 	.word	0x00008335
    aa1c:	000207bc 	.word	0x000207bc
    aa20:	000c000c 	.word	0x000c000c
    aa24:	10add09e 	.word	0x10add09e
    aa28:	3c1cd57d 	.word	0x3c1cd57d
    aa2c:	000207ac 	.word	0x000207ac
    aa30:	0000ac8d 	.word	0x0000ac8d
    aa34:	0000108c 	.word	0x0000108c
    aa38:	0000a56d 	.word	0x0000a56d
    aa3c:	0000039f 	.word	0x0000039f
    aa40:	0000a43d 	.word	0x0000a43d
    aa44:	00018abc 	.word	0x00018abc
    aa48:	00016db1 	.word	0x00016db1
    aa4c:	00018ac8 	.word	0x00018ac8
    aa50:	00016de5 	.word	0x00016de5
    aa54:	ef522f61 	.word	0xef522f61

0000aa58 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    aa58:	b580      	push	{r7, lr}
    aa5a:	b088      	sub	sp, #32
    aa5c:	af00      	add	r7, sp, #0
    aa5e:	0002      	movs	r2, r0
    aa60:	1dfb      	adds	r3, r7, #7
    aa62:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    aa64:	231f      	movs	r3, #31
    aa66:	18fb      	adds	r3, r7, r3
    aa68:	2200      	movs	r2, #0
    aa6a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    aa6c:	2300      	movs	r3, #0
    aa6e:	61bb      	str	r3, [r7, #24]
    aa70:	2300      	movs	r3, #0
    aa72:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    aa74:	2301      	movs	r3, #1
    aa76:	425b      	negs	r3, r3
    aa78:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    aa7a:	4b1d      	ldr	r3, [pc, #116]	; (aaf0 <wait_for_firmware_start+0x98>)
    aa7c:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    aa7e:	4b1d      	ldr	r3, [pc, #116]	; (aaf4 <wait_for_firmware_start+0x9c>)
    aa80:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    aa82:	1dfb      	adds	r3, r7, #7
    aa84:	781b      	ldrb	r3, [r3, #0]
    aa86:	2b02      	cmp	r3, #2
    aa88:	d003      	beq.n	aa92 <wait_for_firmware_start+0x3a>
    aa8a:	1dfb      	adds	r3, r7, #7
    aa8c:	781b      	ldrb	r3, [r3, #0]
    aa8e:	2b03      	cmp	r3, #3
    aa90:	d119      	bne.n	aac6 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    aa92:	4b19      	ldr	r3, [pc, #100]	; (aaf8 <wait_for_firmware_start+0xa0>)
    aa94:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    aa96:	4b19      	ldr	r3, [pc, #100]	; (aafc <wait_for_firmware_start+0xa4>)
    aa98:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    aa9a:	e014      	b.n	aac6 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    aa9c:	2002      	movs	r0, #2
    aa9e:	4b18      	ldr	r3, [pc, #96]	; (ab00 <wait_for_firmware_start+0xa8>)
    aaa0:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    aaa2:	68fb      	ldr	r3, [r7, #12]
    aaa4:	0018      	movs	r0, r3
    aaa6:	4b17      	ldr	r3, [pc, #92]	; (ab04 <wait_for_firmware_start+0xac>)
    aaa8:	4798      	blx	r3
    aaaa:	0003      	movs	r3, r0
    aaac:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    aaae:	697b      	ldr	r3, [r7, #20]
    aab0:	3301      	adds	r3, #1
    aab2:	617b      	str	r3, [r7, #20]
    aab4:	697a      	ldr	r2, [r7, #20]
    aab6:	693b      	ldr	r3, [r7, #16]
    aab8:	429a      	cmp	r2, r3
    aaba:	d304      	bcc.n	aac6 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    aabc:	231f      	movs	r3, #31
    aabe:	18fb      	adds	r3, r7, r3
    aac0:	22fb      	movs	r2, #251	; 0xfb
    aac2:	701a      	strb	r2, [r3, #0]
			goto ERR;
    aac4:	e00c      	b.n	aae0 <wait_for_firmware_start+0x88>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    aac6:	68ba      	ldr	r2, [r7, #8]
    aac8:	69bb      	ldr	r3, [r7, #24]
    aaca:	429a      	cmp	r2, r3
    aacc:	d1e6      	bne.n	aa9c <wait_for_firmware_start+0x44>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    aace:	68bb      	ldr	r3, [r7, #8]
    aad0:	4a08      	ldr	r2, [pc, #32]	; (aaf4 <wait_for_firmware_start+0x9c>)
    aad2:	4293      	cmp	r3, r2
    aad4:	d104      	bne.n	aae0 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    aad6:	4b06      	ldr	r3, [pc, #24]	; (aaf0 <wait_for_firmware_start+0x98>)
    aad8:	2100      	movs	r1, #0
    aada:	0018      	movs	r0, r3
    aadc:	4b0a      	ldr	r3, [pc, #40]	; (ab08 <wait_for_firmware_start+0xb0>)
    aade:	4798      	blx	r3
	}
ERR:
	return ret;
    aae0:	231f      	movs	r3, #31
    aae2:	18fb      	adds	r3, r7, r3
    aae4:	781b      	ldrb	r3, [r3, #0]
    aae6:	b25b      	sxtb	r3, r3
}
    aae8:	0018      	movs	r0, r3
    aaea:	46bd      	mov	sp, r7
    aaec:	b008      	add	sp, #32
    aaee:	bd80      	pop	{r7, pc}
    aaf0:	0000108c 	.word	0x0000108c
    aaf4:	02532636 	.word	0x02532636
    aaf8:	000207ac 	.word	0x000207ac
    aafc:	d75dc1c3 	.word	0xd75dc1c3
    ab00:	00008335 	.word	0x00008335
    ab04:	0000ac49 	.word	0x0000ac49
    ab08:	0000ac8d 	.word	0x0000ac8d

0000ab0c <chip_deinit>:

sint8 chip_deinit(void)
{
    ab0c:	b590      	push	{r4, r7, lr}
    ab0e:	b083      	sub	sp, #12
    ab10:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    ab12:	2300      	movs	r3, #0
    ab14:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    ab16:	1dfc      	adds	r4, r7, #7
    ab18:	003a      	movs	r2, r7
    ab1a:	23a0      	movs	r3, #160	; 0xa0
    ab1c:	015b      	lsls	r3, r3, #5
    ab1e:	0011      	movs	r1, r2
    ab20:	0018      	movs	r0, r3
    ab22:	4b1f      	ldr	r3, [pc, #124]	; (aba0 <chip_deinit+0x94>)
    ab24:	4798      	blx	r3
    ab26:	0003      	movs	r3, r0
    ab28:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    ab2a:	1dfb      	adds	r3, r7, #7
    ab2c:	781b      	ldrb	r3, [r3, #0]
    ab2e:	b25b      	sxtb	r3, r3
    ab30:	2b00      	cmp	r3, #0
    ab32:	d00d      	beq.n	ab50 <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    ab34:	4a1b      	ldr	r2, [pc, #108]	; (aba4 <chip_deinit+0x98>)
    ab36:	491c      	ldr	r1, [pc, #112]	; (aba8 <chip_deinit+0x9c>)
    ab38:	4b1c      	ldr	r3, [pc, #112]	; (abac <chip_deinit+0xa0>)
    ab3a:	0018      	movs	r0, r3
    ab3c:	4b1c      	ldr	r3, [pc, #112]	; (abb0 <chip_deinit+0xa4>)
    ab3e:	4798      	blx	r3
    ab40:	4b1c      	ldr	r3, [pc, #112]	; (abb4 <chip_deinit+0xa8>)
    ab42:	0018      	movs	r0, r3
    ab44:	4b1c      	ldr	r3, [pc, #112]	; (abb8 <chip_deinit+0xac>)
    ab46:	4798      	blx	r3
    ab48:	200d      	movs	r0, #13
    ab4a:	4b1c      	ldr	r3, [pc, #112]	; (abbc <chip_deinit+0xb0>)
    ab4c:	4798      	blx	r3
		goto ERR1;
    ab4e:	e020      	b.n	ab92 <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    ab50:	683b      	ldr	r3, [r7, #0]
    ab52:	4a1b      	ldr	r2, [pc, #108]	; (abc0 <chip_deinit+0xb4>)
    ab54:	4013      	ands	r3, r2
    ab56:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    ab58:	683a      	ldr	r2, [r7, #0]
    ab5a:	1dfc      	adds	r4, r7, #7
    ab5c:	23a0      	movs	r3, #160	; 0xa0
    ab5e:	015b      	lsls	r3, r3, #5
    ab60:	0011      	movs	r1, r2
    ab62:	0018      	movs	r0, r3
    ab64:	4b17      	ldr	r3, [pc, #92]	; (abc4 <chip_deinit+0xb8>)
    ab66:	4798      	blx	r3
    ab68:	0003      	movs	r3, r0
    ab6a:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    ab6c:	1dfb      	adds	r3, r7, #7
    ab6e:	781b      	ldrb	r3, [r3, #0]
    ab70:	b25b      	sxtb	r3, r3
    ab72:	2b00      	cmp	r3, #0
    ab74:	d00d      	beq.n	ab92 <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    ab76:	4a14      	ldr	r2, [pc, #80]	; (abc8 <chip_deinit+0xbc>)
    ab78:	490b      	ldr	r1, [pc, #44]	; (aba8 <chip_deinit+0x9c>)
    ab7a:	4b0c      	ldr	r3, [pc, #48]	; (abac <chip_deinit+0xa0>)
    ab7c:	0018      	movs	r0, r3
    ab7e:	4b0c      	ldr	r3, [pc, #48]	; (abb0 <chip_deinit+0xa4>)
    ab80:	4798      	blx	r3
    ab82:	4b0c      	ldr	r3, [pc, #48]	; (abb4 <chip_deinit+0xa8>)
    ab84:	0018      	movs	r0, r3
    ab86:	4b0c      	ldr	r3, [pc, #48]	; (abb8 <chip_deinit+0xac>)
    ab88:	4798      	blx	r3
    ab8a:	200d      	movs	r0, #13
    ab8c:	4b0b      	ldr	r3, [pc, #44]	; (abbc <chip_deinit+0xb0>)
    ab8e:	4798      	blx	r3
		goto ERR1;
    ab90:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    ab92:	1dfb      	adds	r3, r7, #7
    ab94:	781b      	ldrb	r3, [r3, #0]
    ab96:	b25b      	sxtb	r3, r3
}
    ab98:	0018      	movs	r0, r3
    ab9a:	46bd      	mov	sp, r7
    ab9c:	b003      	add	sp, #12
    ab9e:	bd90      	pop	{r4, r7, pc}
    aba0:	0000ac69 	.word	0x0000ac69
    aba4:	00000205 	.word	0x00000205
    aba8:	00018b04 	.word	0x00018b04
    abac:	00018a74 	.word	0x00018a74
    abb0:	00016db1 	.word	0x00016db1
    abb4:	00018ae0 	.word	0x00018ae0
    abb8:	00016ed1 	.word	0x00016ed1
    abbc:	00016de5 	.word	0x00016de5
    abc0:	fffffbff 	.word	0xfffffbff
    abc4:	0000ac8d 	.word	0x0000ac8d
    abc8:	0000020b 	.word	0x0000020b

0000abcc <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    abcc:	b590      	push	{r4, r7, lr}
    abce:	b085      	sub	sp, #20
    abd0:	af00      	add	r7, sp, #0
    abd2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    abd4:	230f      	movs	r3, #15
    abd6:	18fb      	adds	r3, r7, r3
    abd8:	2200      	movs	r2, #0
    abda:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    abdc:	230f      	movs	r3, #15
    abde:	18fc      	adds	r4, r7, r3
    abe0:	687b      	ldr	r3, [r7, #4]
    abe2:	0018      	movs	r0, r3
    abe4:	4b05      	ldr	r3, [pc, #20]	; (abfc <nm_bus_iface_init+0x30>)
    abe6:	4798      	blx	r3
    abe8:	0003      	movs	r3, r0
    abea:	7023      	strb	r3, [r4, #0]
	return ret;
    abec:	230f      	movs	r3, #15
    abee:	18fb      	adds	r3, r7, r3
    abf0:	781b      	ldrb	r3, [r3, #0]
    abf2:	b25b      	sxtb	r3, r3
}
    abf4:	0018      	movs	r0, r3
    abf6:	46bd      	mov	sp, r7
    abf8:	b005      	add	sp, #20
    abfa:	bd90      	pop	{r4, r7, pc}
    abfc:	000089fd 	.word	0x000089fd

0000ac00 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    ac00:	b590      	push	{r4, r7, lr}
    ac02:	b083      	sub	sp, #12
    ac04:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    ac06:	1dfb      	adds	r3, r7, #7
    ac08:	2200      	movs	r2, #0
    ac0a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    ac0c:	1dfc      	adds	r4, r7, #7
    ac0e:	4b05      	ldr	r3, [pc, #20]	; (ac24 <nm_bus_iface_deinit+0x24>)
    ac10:	4798      	blx	r3
    ac12:	0003      	movs	r3, r0
    ac14:	7023      	strb	r3, [r4, #0]

	return ret;
    ac16:	1dfb      	adds	r3, r7, #7
    ac18:	781b      	ldrb	r3, [r3, #0]
    ac1a:	b25b      	sxtb	r3, r3
}
    ac1c:	0018      	movs	r0, r3
    ac1e:	46bd      	mov	sp, r7
    ac20:	b003      	add	sp, #12
    ac22:	bd90      	pop	{r4, r7, pc}
    ac24:	00008b79 	.word	0x00008b79

0000ac28 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    ac28:	b580      	push	{r7, lr}
    ac2a:	b082      	sub	sp, #8
    ac2c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    ac2e:	1dfb      	adds	r3, r7, #7
    ac30:	2200      	movs	r2, #0
    ac32:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    ac34:	4b03      	ldr	r3, [pc, #12]	; (ac44 <nm_bus_reset+0x1c>)
    ac36:	4798      	blx	r3
    ac38:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    ac3a:	0018      	movs	r0, r3
    ac3c:	46bd      	mov	sp, r7
    ac3e:	b002      	add	sp, #8
    ac40:	bd80      	pop	{r7, pc}
    ac42:	46c0      	nop			; (mov r8, r8)
    ac44:	0000c511 	.word	0x0000c511

0000ac48 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    ac48:	b580      	push	{r7, lr}
    ac4a:	b082      	sub	sp, #8
    ac4c:	af00      	add	r7, sp, #0
    ac4e:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    ac50:	687b      	ldr	r3, [r7, #4]
    ac52:	0018      	movs	r0, r3
    ac54:	4b03      	ldr	r3, [pc, #12]	; (ac64 <nm_read_reg+0x1c>)
    ac56:	4798      	blx	r3
    ac58:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    ac5a:	0018      	movs	r0, r3
    ac5c:	46bd      	mov	sp, r7
    ac5e:	b002      	add	sp, #8
    ac60:	bd80      	pop	{r7, pc}
    ac62:	46c0      	nop			; (mov r8, r8)
    ac64:	0000c6a5 	.word	0x0000c6a5

0000ac68 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    ac68:	b580      	push	{r7, lr}
    ac6a:	b082      	sub	sp, #8
    ac6c:	af00      	add	r7, sp, #0
    ac6e:	6078      	str	r0, [r7, #4]
    ac70:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    ac72:	683a      	ldr	r2, [r7, #0]
    ac74:	687b      	ldr	r3, [r7, #4]
    ac76:	0011      	movs	r1, r2
    ac78:	0018      	movs	r0, r3
    ac7a:	4b03      	ldr	r3, [pc, #12]	; (ac88 <nm_read_reg_with_ret+0x20>)
    ac7c:	4798      	blx	r3
    ac7e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    ac80:	0018      	movs	r0, r3
    ac82:	46bd      	mov	sp, r7
    ac84:	b002      	add	sp, #8
    ac86:	bd80      	pop	{r7, pc}
    ac88:	0000c6c9 	.word	0x0000c6c9

0000ac8c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    ac8c:	b580      	push	{r7, lr}
    ac8e:	b082      	sub	sp, #8
    ac90:	af00      	add	r7, sp, #0
    ac92:	6078      	str	r0, [r7, #4]
    ac94:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    ac96:	683a      	ldr	r2, [r7, #0]
    ac98:	687b      	ldr	r3, [r7, #4]
    ac9a:	0011      	movs	r1, r2
    ac9c:	0018      	movs	r0, r3
    ac9e:	4b03      	ldr	r3, [pc, #12]	; (acac <nm_write_reg+0x20>)
    aca0:	4798      	blx	r3
    aca2:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    aca4:	0018      	movs	r0, r3
    aca6:	46bd      	mov	sp, r7
    aca8:	b002      	add	sp, #8
    acaa:	bd80      	pop	{r7, pc}
    acac:	0000c719 	.word	0x0000c719

0000acb0 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    acb0:	b580      	push	{r7, lr}
    acb2:	b084      	sub	sp, #16
    acb4:	af00      	add	r7, sp, #0
    acb6:	60f8      	str	r0, [r7, #12]
    acb8:	60b9      	str	r1, [r7, #8]
    acba:	1dbb      	adds	r3, r7, #6
    acbc:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    acbe:	1dbb      	adds	r3, r7, #6
    acc0:	881a      	ldrh	r2, [r3, #0]
    acc2:	68b9      	ldr	r1, [r7, #8]
    acc4:	68fb      	ldr	r3, [r7, #12]
    acc6:	0018      	movs	r0, r3
    acc8:	4b03      	ldr	r3, [pc, #12]	; (acd8 <p_nm_read_block+0x28>)
    acca:	4798      	blx	r3
    accc:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    acce:	0018      	movs	r0, r3
    acd0:	46bd      	mov	sp, r7
    acd2:	b004      	add	sp, #16
    acd4:	bd80      	pop	{r7, pc}
    acd6:	46c0      	nop			; (mov r8, r8)
    acd8:	0000c769 	.word	0x0000c769

0000acdc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    acdc:	b580      	push	{r7, lr}
    acde:	b086      	sub	sp, #24
    ace0:	af00      	add	r7, sp, #0
    ace2:	60f8      	str	r0, [r7, #12]
    ace4:	60b9      	str	r1, [r7, #8]
    ace6:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    ace8:	4b2d      	ldr	r3, [pc, #180]	; (ada0 <nm_read_block+0xc4>)
    acea:	881a      	ldrh	r2, [r3, #0]
    acec:	2310      	movs	r3, #16
    acee:	18fb      	adds	r3, r7, r3
    acf0:	3a08      	subs	r2, #8
    acf2:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    acf4:	2300      	movs	r3, #0
    acf6:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    acf8:	2313      	movs	r3, #19
    acfa:	18fb      	adds	r3, r7, r3
    acfc:	2200      	movs	r2, #0
    acfe:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    ad00:	2310      	movs	r3, #16
    ad02:	18fb      	adds	r3, r7, r3
    ad04:	881a      	ldrh	r2, [r3, #0]
    ad06:	687b      	ldr	r3, [r7, #4]
    ad08:	429a      	cmp	r2, r3
    ad0a:	d313      	bcc.n	ad34 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    ad0c:	68ba      	ldr	r2, [r7, #8]
    ad0e:	697b      	ldr	r3, [r7, #20]
    ad10:	18d1      	adds	r1, r2, r3
    ad12:	687b      	ldr	r3, [r7, #4]
    ad14:	b29a      	uxth	r2, r3
    ad16:	68fb      	ldr	r3, [r7, #12]
    ad18:	0018      	movs	r0, r3
    ad1a:	4b22      	ldr	r3, [pc, #136]	; (ada4 <nm_read_block+0xc8>)
    ad1c:	4798      	blx	r3
    ad1e:	0003      	movs	r3, r0
    ad20:	b2da      	uxtb	r2, r3
    ad22:	2313      	movs	r3, #19
    ad24:	18fb      	adds	r3, r7, r3
    ad26:	781b      	ldrb	r3, [r3, #0]
    ad28:	18d3      	adds	r3, r2, r3
    ad2a:	b2da      	uxtb	r2, r3
    ad2c:	2313      	movs	r3, #19
    ad2e:	18fb      	adds	r3, r7, r3
    ad30:	701a      	strb	r2, [r3, #0]
			break;
    ad32:	e02d      	b.n	ad90 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    ad34:	68ba      	ldr	r2, [r7, #8]
    ad36:	697b      	ldr	r3, [r7, #20]
    ad38:	18d1      	adds	r1, r2, r3
    ad3a:	2310      	movs	r3, #16
    ad3c:	18fb      	adds	r3, r7, r3
    ad3e:	881a      	ldrh	r2, [r3, #0]
    ad40:	68fb      	ldr	r3, [r7, #12]
    ad42:	0018      	movs	r0, r3
    ad44:	4b17      	ldr	r3, [pc, #92]	; (ada4 <nm_read_block+0xc8>)
    ad46:	4798      	blx	r3
    ad48:	0003      	movs	r3, r0
    ad4a:	b2da      	uxtb	r2, r3
    ad4c:	2313      	movs	r3, #19
    ad4e:	18fb      	adds	r3, r7, r3
    ad50:	781b      	ldrb	r3, [r3, #0]
    ad52:	18d3      	adds	r3, r2, r3
    ad54:	b2da      	uxtb	r2, r3
    ad56:	2313      	movs	r3, #19
    ad58:	18fb      	adds	r3, r7, r3
    ad5a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    ad5c:	2313      	movs	r3, #19
    ad5e:	18fb      	adds	r3, r7, r3
    ad60:	781b      	ldrb	r3, [r3, #0]
    ad62:	b25b      	sxtb	r3, r3
    ad64:	2b00      	cmp	r3, #0
    ad66:	d112      	bne.n	ad8e <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    ad68:	2310      	movs	r3, #16
    ad6a:	18fb      	adds	r3, r7, r3
    ad6c:	881b      	ldrh	r3, [r3, #0]
    ad6e:	687a      	ldr	r2, [r7, #4]
    ad70:	1ad3      	subs	r3, r2, r3
    ad72:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    ad74:	2310      	movs	r3, #16
    ad76:	18fb      	adds	r3, r7, r3
    ad78:	881b      	ldrh	r3, [r3, #0]
    ad7a:	697a      	ldr	r2, [r7, #20]
    ad7c:	18d3      	adds	r3, r2, r3
    ad7e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    ad80:	2310      	movs	r3, #16
    ad82:	18fb      	adds	r3, r7, r3
    ad84:	881b      	ldrh	r3, [r3, #0]
    ad86:	68fa      	ldr	r2, [r7, #12]
    ad88:	18d3      	adds	r3, r2, r3
    ad8a:	60fb      	str	r3, [r7, #12]
		}
	}
    ad8c:	e7b8      	b.n	ad00 <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    ad8e:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    ad90:	2313      	movs	r3, #19
    ad92:	18fb      	adds	r3, r7, r3
    ad94:	781b      	ldrb	r3, [r3, #0]
    ad96:	b25b      	sxtb	r3, r3
}
    ad98:	0018      	movs	r0, r3
    ad9a:	46bd      	mov	sp, r7
    ad9c:	b006      	add	sp, #24
    ad9e:	bd80      	pop	{r7, pc}
    ada0:	20000000 	.word	0x20000000
    ada4:	0000acb1 	.word	0x0000acb1

0000ada8 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ada8:	b580      	push	{r7, lr}
    adaa:	b084      	sub	sp, #16
    adac:	af00      	add	r7, sp, #0
    adae:	60f8      	str	r0, [r7, #12]
    adb0:	60b9      	str	r1, [r7, #8]
    adb2:	1dbb      	adds	r3, r7, #6
    adb4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    adb6:	1dbb      	adds	r3, r7, #6
    adb8:	881a      	ldrh	r2, [r3, #0]
    adba:	68b9      	ldr	r1, [r7, #8]
    adbc:	68fb      	ldr	r3, [r7, #12]
    adbe:	0018      	movs	r0, r3
    adc0:	4b03      	ldr	r3, [pc, #12]	; (add0 <p_nm_write_block+0x28>)
    adc2:	4798      	blx	r3
    adc4:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    adc6:	0018      	movs	r0, r3
    adc8:	46bd      	mov	sp, r7
    adca:	b004      	add	sp, #16
    adcc:	bd80      	pop	{r7, pc}
    adce:	46c0      	nop			; (mov r8, r8)
    add0:	0000c7c1 	.word	0x0000c7c1

0000add4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    add4:	b580      	push	{r7, lr}
    add6:	b086      	sub	sp, #24
    add8:	af00      	add	r7, sp, #0
    adda:	60f8      	str	r0, [r7, #12]
    addc:	60b9      	str	r1, [r7, #8]
    adde:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    ade0:	4b2d      	ldr	r3, [pc, #180]	; (ae98 <nm_write_block+0xc4>)
    ade2:	881a      	ldrh	r2, [r3, #0]
    ade4:	2310      	movs	r3, #16
    ade6:	18fb      	adds	r3, r7, r3
    ade8:	3a08      	subs	r2, #8
    adea:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    adec:	2300      	movs	r3, #0
    adee:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    adf0:	2313      	movs	r3, #19
    adf2:	18fb      	adds	r3, r7, r3
    adf4:	2200      	movs	r2, #0
    adf6:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    adf8:	2310      	movs	r3, #16
    adfa:	18fb      	adds	r3, r7, r3
    adfc:	881a      	ldrh	r2, [r3, #0]
    adfe:	687b      	ldr	r3, [r7, #4]
    ae00:	429a      	cmp	r2, r3
    ae02:	d313      	bcc.n	ae2c <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    ae04:	68ba      	ldr	r2, [r7, #8]
    ae06:	697b      	ldr	r3, [r7, #20]
    ae08:	18d1      	adds	r1, r2, r3
    ae0a:	687b      	ldr	r3, [r7, #4]
    ae0c:	b29a      	uxth	r2, r3
    ae0e:	68fb      	ldr	r3, [r7, #12]
    ae10:	0018      	movs	r0, r3
    ae12:	4b22      	ldr	r3, [pc, #136]	; (ae9c <nm_write_block+0xc8>)
    ae14:	4798      	blx	r3
    ae16:	0003      	movs	r3, r0
    ae18:	b2da      	uxtb	r2, r3
    ae1a:	2313      	movs	r3, #19
    ae1c:	18fb      	adds	r3, r7, r3
    ae1e:	781b      	ldrb	r3, [r3, #0]
    ae20:	18d3      	adds	r3, r2, r3
    ae22:	b2da      	uxtb	r2, r3
    ae24:	2313      	movs	r3, #19
    ae26:	18fb      	adds	r3, r7, r3
    ae28:	701a      	strb	r2, [r3, #0]
			break;
    ae2a:	e02d      	b.n	ae88 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    ae2c:	68ba      	ldr	r2, [r7, #8]
    ae2e:	697b      	ldr	r3, [r7, #20]
    ae30:	18d1      	adds	r1, r2, r3
    ae32:	2310      	movs	r3, #16
    ae34:	18fb      	adds	r3, r7, r3
    ae36:	881a      	ldrh	r2, [r3, #0]
    ae38:	68fb      	ldr	r3, [r7, #12]
    ae3a:	0018      	movs	r0, r3
    ae3c:	4b17      	ldr	r3, [pc, #92]	; (ae9c <nm_write_block+0xc8>)
    ae3e:	4798      	blx	r3
    ae40:	0003      	movs	r3, r0
    ae42:	b2da      	uxtb	r2, r3
    ae44:	2313      	movs	r3, #19
    ae46:	18fb      	adds	r3, r7, r3
    ae48:	781b      	ldrb	r3, [r3, #0]
    ae4a:	18d3      	adds	r3, r2, r3
    ae4c:	b2da      	uxtb	r2, r3
    ae4e:	2313      	movs	r3, #19
    ae50:	18fb      	adds	r3, r7, r3
    ae52:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    ae54:	2313      	movs	r3, #19
    ae56:	18fb      	adds	r3, r7, r3
    ae58:	781b      	ldrb	r3, [r3, #0]
    ae5a:	b25b      	sxtb	r3, r3
    ae5c:	2b00      	cmp	r3, #0
    ae5e:	d112      	bne.n	ae86 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    ae60:	2310      	movs	r3, #16
    ae62:	18fb      	adds	r3, r7, r3
    ae64:	881b      	ldrh	r3, [r3, #0]
    ae66:	687a      	ldr	r2, [r7, #4]
    ae68:	1ad3      	subs	r3, r2, r3
    ae6a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    ae6c:	2310      	movs	r3, #16
    ae6e:	18fb      	adds	r3, r7, r3
    ae70:	881b      	ldrh	r3, [r3, #0]
    ae72:	697a      	ldr	r2, [r7, #20]
    ae74:	18d3      	adds	r3, r2, r3
    ae76:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    ae78:	2310      	movs	r3, #16
    ae7a:	18fb      	adds	r3, r7, r3
    ae7c:	881b      	ldrh	r3, [r3, #0]
    ae7e:	68fa      	ldr	r2, [r7, #12]
    ae80:	18d3      	adds	r3, r2, r3
    ae82:	60fb      	str	r3, [r7, #12]
		}
	}
    ae84:	e7b8      	b.n	adf8 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    ae86:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    ae88:	2313      	movs	r3, #19
    ae8a:	18fb      	adds	r3, r7, r3
    ae8c:	781b      	ldrb	r3, [r3, #0]
    ae8e:	b25b      	sxtb	r3, r3
}
    ae90:	0018      	movs	r0, r3
    ae92:	46bd      	mov	sp, r7
    ae94:	b006      	add	sp, #24
    ae96:	bd80      	pop	{r7, pc}
    ae98:	20000000 	.word	0x20000000
    ae9c:	0000ada9 	.word	0x0000ada9

0000aea0 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    aea0:	b590      	push	{r4, r7, lr}
    aea2:	b089      	sub	sp, #36	; 0x24
    aea4:	af00      	add	r7, sp, #0
    aea6:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    aea8:	2300      	movs	r3, #0
    aeaa:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    aeac:	231f      	movs	r3, #31
    aeae:	18fb      	adds	r3, r7, r3
    aeb0:	2200      	movs	r2, #0
    aeb2:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    aeb4:	230c      	movs	r3, #12
    aeb6:	18fb      	adds	r3, r7, r3
    aeb8:	0018      	movs	r0, r3
    aeba:	2308      	movs	r3, #8
    aebc:	001a      	movs	r2, r3
    aebe:	2100      	movs	r1, #0
    aec0:	4b64      	ldr	r3, [pc, #400]	; (b054 <nm_get_firmware_full_info+0x1b4>)
    aec2:	4798      	blx	r3
	if (pstrRev != NULL)
    aec4:	687b      	ldr	r3, [r7, #4]
    aec6:	2b00      	cmp	r3, #0
    aec8:	d100      	bne.n	aecc <nm_get_firmware_full_info+0x2c>
    aeca:	e0ba      	b.n	b042 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    aecc:	687b      	ldr	r3, [r7, #4]
    aece:	2228      	movs	r2, #40	; 0x28
    aed0:	2100      	movs	r1, #0
    aed2:	0018      	movs	r0, r3
    aed4:	4b60      	ldr	r3, [pc, #384]	; (b058 <nm_get_firmware_full_info+0x1b8>)
    aed6:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    aed8:	231f      	movs	r3, #31
    aeda:	18fc      	adds	r4, r7, r3
    aedc:	2314      	movs	r3, #20
    aede:	18fb      	adds	r3, r7, r3
    aee0:	4a5e      	ldr	r2, [pc, #376]	; (b05c <nm_get_firmware_full_info+0x1bc>)
    aee2:	0019      	movs	r1, r3
    aee4:	0010      	movs	r0, r2
    aee6:	4b5e      	ldr	r3, [pc, #376]	; (b060 <nm_get_firmware_full_info+0x1c0>)
    aee8:	4798      	blx	r3
    aeea:	0003      	movs	r3, r0
    aeec:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    aeee:	231f      	movs	r3, #31
    aef0:	18fb      	adds	r3, r7, r3
    aef2:	781b      	ldrb	r3, [r3, #0]
    aef4:	b25b      	sxtb	r3, r3
    aef6:	2b00      	cmp	r3, #0
    aef8:	d000      	beq.n	aefc <nm_get_firmware_full_info+0x5c>
    aefa:	e0a2      	b.n	b042 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    aefc:	697b      	ldr	r3, [r7, #20]
    aefe:	2b00      	cmp	r3, #0
    af00:	d100      	bne.n	af04 <nm_get_firmware_full_info+0x64>
    af02:	e09a      	b.n	b03a <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    af04:	697b      	ldr	r3, [r7, #20]
    af06:	22c0      	movs	r2, #192	; 0xc0
    af08:	0292      	lsls	r2, r2, #10
    af0a:	4313      	orrs	r3, r2
    af0c:	221f      	movs	r2, #31
    af0e:	18bc      	adds	r4, r7, r2
    af10:	220c      	movs	r2, #12
    af12:	18b9      	adds	r1, r7, r2
    af14:	2208      	movs	r2, #8
    af16:	0018      	movs	r0, r3
    af18:	4b52      	ldr	r3, [pc, #328]	; (b064 <nm_get_firmware_full_info+0x1c4>)
    af1a:	4798      	blx	r3
    af1c:	0003      	movs	r3, r0
    af1e:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    af20:	231f      	movs	r3, #31
    af22:	18fb      	adds	r3, r7, r3
    af24:	781b      	ldrb	r3, [r3, #0]
    af26:	b25b      	sxtb	r3, r3
    af28:	2b00      	cmp	r3, #0
    af2a:	d000      	beq.n	af2e <nm_get_firmware_full_info+0x8e>
    af2c:	e089      	b.n	b042 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    af2e:	230c      	movs	r3, #12
    af30:	18fb      	adds	r3, r7, r3
    af32:	685b      	ldr	r3, [r3, #4]
    af34:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    af36:	697b      	ldr	r3, [r7, #20]
    af38:	041b      	lsls	r3, r3, #16
    af3a:	0c1b      	lsrs	r3, r3, #16
    af3c:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    af3e:	697b      	ldr	r3, [r7, #20]
    af40:	2b00      	cmp	r3, #0
    af42:	d100      	bne.n	af46 <nm_get_firmware_full_info+0xa6>
    af44:	e074      	b.n	b030 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    af46:	697b      	ldr	r3, [r7, #20]
    af48:	22c0      	movs	r2, #192	; 0xc0
    af4a:	0292      	lsls	r2, r2, #10
    af4c:	4313      	orrs	r3, r2
    af4e:	221f      	movs	r2, #31
    af50:	18bc      	adds	r4, r7, r2
    af52:	6879      	ldr	r1, [r7, #4]
    af54:	2228      	movs	r2, #40	; 0x28
    af56:	0018      	movs	r0, r3
    af58:	4b42      	ldr	r3, [pc, #264]	; (b064 <nm_get_firmware_full_info+0x1c4>)
    af5a:	4798      	blx	r3
    af5c:	0003      	movs	r3, r0
    af5e:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    af60:	231f      	movs	r3, #31
    af62:	18fb      	adds	r3, r7, r3
    af64:	781b      	ldrb	r3, [r3, #0]
    af66:	b25b      	sxtb	r3, r3
    af68:	2b00      	cmp	r3, #0
    af6a:	d16a      	bne.n	b042 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    af6c:	687b      	ldr	r3, [r7, #4]
    af6e:	791b      	ldrb	r3, [r3, #4]
    af70:	021b      	lsls	r3, r3, #8
    af72:	b21a      	sxth	r2, r3
    af74:	687b      	ldr	r3, [r7, #4]
    af76:	795b      	ldrb	r3, [r3, #5]
    af78:	011b      	lsls	r3, r3, #4
    af7a:	b21b      	sxth	r3, r3
    af7c:	21ff      	movs	r1, #255	; 0xff
    af7e:	400b      	ands	r3, r1
    af80:	b21b      	sxth	r3, r3
    af82:	4313      	orrs	r3, r2
    af84:	b21a      	sxth	r2, r3
    af86:	687b      	ldr	r3, [r7, #4]
    af88:	799b      	ldrb	r3, [r3, #6]
    af8a:	b21b      	sxth	r3, r3
    af8c:	210f      	movs	r1, #15
    af8e:	400b      	ands	r3, r1
    af90:	b21b      	sxth	r3, r3
    af92:	4313      	orrs	r3, r2
    af94:	b21a      	sxth	r2, r3
    af96:	231c      	movs	r3, #28
    af98:	18fb      	adds	r3, r7, r3
    af9a:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    af9c:	231a      	movs	r3, #26
    af9e:	18fb      	adds	r3, r7, r3
    afa0:	4a31      	ldr	r2, [pc, #196]	; (b068 <nm_get_firmware_full_info+0x1c8>)
    afa2:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    afa4:	687b      	ldr	r3, [r7, #4]
    afa6:	79db      	ldrb	r3, [r3, #7]
    afa8:	021b      	lsls	r3, r3, #8
    afaa:	b21a      	sxth	r2, r3
    afac:	687b      	ldr	r3, [r7, #4]
    afae:	7a1b      	ldrb	r3, [r3, #8]
    afb0:	011b      	lsls	r3, r3, #4
    afb2:	b21b      	sxth	r3, r3
    afb4:	21ff      	movs	r1, #255	; 0xff
    afb6:	400b      	ands	r3, r1
    afb8:	b21b      	sxth	r3, r3
    afba:	4313      	orrs	r3, r2
    afbc:	b21a      	sxth	r2, r3
    afbe:	687b      	ldr	r3, [r7, #4]
    afc0:	7a5b      	ldrb	r3, [r3, #9]
    afc2:	b21b      	sxth	r3, r3
    afc4:	210f      	movs	r1, #15
    afc6:	400b      	ands	r3, r1
    afc8:	b21b      	sxth	r3, r3
    afca:	4313      	orrs	r3, r2
    afcc:	b21a      	sxth	r2, r3
    afce:	2318      	movs	r3, #24
    afd0:	18fb      	adds	r3, r7, r3
    afd2:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    afd4:	231c      	movs	r3, #28
    afd6:	18fb      	adds	r3, r7, r3
    afd8:	881b      	ldrh	r3, [r3, #0]
    afda:	2b00      	cmp	r3, #0
    afdc:	d009      	beq.n	aff2 <nm_get_firmware_full_info+0x152>
    afde:	2318      	movs	r3, #24
    afe0:	18fb      	adds	r3, r7, r3
    afe2:	881b      	ldrh	r3, [r3, #0]
    afe4:	2b00      	cmp	r3, #0
    afe6:	d004      	beq.n	aff2 <nm_get_firmware_full_info+0x152>
    afe8:	2318      	movs	r3, #24
    afea:	18fb      	adds	r3, r7, r3
    afec:	881b      	ldrh	r3, [r3, #0]
    afee:	2b00      	cmp	r3, #0
    aff0:	d104      	bne.n	affc <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    aff2:	231f      	movs	r3, #31
    aff4:	18fb      	adds	r3, r7, r3
    aff6:	22f4      	movs	r2, #244	; 0xf4
    aff8:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    affa:	e022      	b.n	b042 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    affc:	231a      	movs	r3, #26
    affe:	18fa      	adds	r2, r7, r3
    b000:	2318      	movs	r3, #24
    b002:	18fb      	adds	r3, r7, r3
    b004:	8812      	ldrh	r2, [r2, #0]
    b006:	881b      	ldrh	r3, [r3, #0]
    b008:	429a      	cmp	r2, r3
    b00a:	d204      	bcs.n	b016 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    b00c:	231f      	movs	r3, #31
    b00e:	18fb      	adds	r3, r7, r3
    b010:	22f3      	movs	r2, #243	; 0xf3
    b012:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    b014:	e015      	b.n	b042 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    b016:	231a      	movs	r3, #26
    b018:	18fa      	adds	r2, r7, r3
    b01a:	231c      	movs	r3, #28
    b01c:	18fb      	adds	r3, r7, r3
    b01e:	8812      	ldrh	r2, [r2, #0]
    b020:	881b      	ldrh	r3, [r3, #0]
    b022:	429a      	cmp	r2, r3
    b024:	d90d      	bls.n	b042 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    b026:	231f      	movs	r3, #31
    b028:	18fb      	adds	r3, r7, r3
    b02a:	22f3      	movs	r2, #243	; 0xf3
    b02c:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    b02e:	e008      	b.n	b042 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    b030:	231f      	movs	r3, #31
    b032:	18fb      	adds	r3, r7, r3
    b034:	22f4      	movs	r2, #244	; 0xf4
    b036:	701a      	strb	r2, [r3, #0]
    b038:	e003      	b.n	b042 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    b03a:	231f      	movs	r3, #31
    b03c:	18fb      	adds	r3, r7, r3
    b03e:	22f4      	movs	r2, #244	; 0xf4
    b040:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    b042:	231f      	movs	r3, #31
    b044:	18fb      	adds	r3, r7, r3
    b046:	781b      	ldrb	r3, [r3, #0]
    b048:	b25b      	sxtb	r3, r3
}
    b04a:	0018      	movs	r0, r3
    b04c:	46bd      	mov	sp, r7
    b04e:	b009      	add	sp, #36	; 0x24
    b050:	bd90      	pop	{r4, r7, pc}
    b052:	46c0      	nop			; (mov r8, r8)
    b054:	00016c69 	.word	0x00016c69
    b058:	00008c25 	.word	0x00008c25
    b05c:	000c0008 	.word	0x000c0008
    b060:	0000ac69 	.word	0x0000ac69
    b064:	0000acdd 	.word	0x0000acdd
    b068:	00001352 	.word	0x00001352

0000b06c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    b06c:	b590      	push	{r4, r7, lr}
    b06e:	b085      	sub	sp, #20
    b070:	af00      	add	r7, sp, #0
    b072:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    b074:	230f      	movs	r3, #15
    b076:	18fb      	adds	r3, r7, r3
    b078:	2200      	movs	r2, #0
    b07a:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    b07c:	687b      	ldr	r3, [r7, #4]
    b07e:	2b00      	cmp	r3, #0
    b080:	d013      	beq.n	b0aa <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    b082:	230e      	movs	r3, #14
    b084:	18fb      	adds	r3, r7, r3
    b086:	687a      	ldr	r2, [r7, #4]
    b088:	7812      	ldrb	r2, [r2, #0]
    b08a:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    b08c:	230e      	movs	r3, #14
    b08e:	18fb      	adds	r3, r7, r3
    b090:	781b      	ldrb	r3, [r3, #0]
    b092:	2b00      	cmp	r3, #0
    b094:	d004      	beq.n	b0a0 <nm_drv_init+0x34>
    b096:	230e      	movs	r3, #14
    b098:	18fb      	adds	r3, r7, r3
    b09a:	781b      	ldrb	r3, [r3, #0]
    b09c:	2b04      	cmp	r3, #4
    b09e:	d908      	bls.n	b0b2 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    b0a0:	230e      	movs	r3, #14
    b0a2:	18fb      	adds	r3, r7, r3
    b0a4:	2201      	movs	r2, #1
    b0a6:	701a      	strb	r2, [r3, #0]
    b0a8:	e003      	b.n	b0b2 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    b0aa:	230e      	movs	r3, #14
    b0ac:	18fb      	adds	r3, r7, r3
    b0ae:	2201      	movs	r2, #1
    b0b0:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    b0b2:	230f      	movs	r3, #15
    b0b4:	18fc      	adds	r4, r7, r3
    b0b6:	2000      	movs	r0, #0
    b0b8:	4b41      	ldr	r3, [pc, #260]	; (b1c0 <nm_drv_init+0x154>)
    b0ba:	4798      	blx	r3
    b0bc:	0003      	movs	r3, r0
    b0be:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b0c0:	230f      	movs	r3, #15
    b0c2:	18fb      	adds	r3, r7, r3
    b0c4:	781b      	ldrb	r3, [r3, #0]
    b0c6:	b25b      	sxtb	r3, r3
    b0c8:	2b00      	cmp	r3, #0
    b0ca:	d00f      	beq.n	b0ec <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
    b0cc:	2328      	movs	r3, #40	; 0x28
    b0ce:	33ff      	adds	r3, #255	; 0xff
    b0d0:	001a      	movs	r2, r3
    b0d2:	493c      	ldr	r1, [pc, #240]	; (b1c4 <nm_drv_init+0x158>)
    b0d4:	4b3c      	ldr	r3, [pc, #240]	; (b1c8 <nm_drv_init+0x15c>)
    b0d6:	0018      	movs	r0, r3
    b0d8:	4b3c      	ldr	r3, [pc, #240]	; (b1cc <nm_drv_init+0x160>)
    b0da:	4798      	blx	r3
    b0dc:	4b3c      	ldr	r3, [pc, #240]	; (b1d0 <nm_drv_init+0x164>)
    b0de:	0018      	movs	r0, r3
    b0e0:	4b3c      	ldr	r3, [pc, #240]	; (b1d4 <nm_drv_init+0x168>)
    b0e2:	4798      	blx	r3
    b0e4:	200d      	movs	r0, #13
    b0e6:	4b3c      	ldr	r3, [pc, #240]	; (b1d8 <nm_drv_init+0x16c>)
    b0e8:	4798      	blx	r3
		goto ERR1;
    b0ea:	e060      	b.n	b1ae <nm_drv_init+0x142>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    b0ec:	4b3b      	ldr	r3, [pc, #236]	; (b1dc <nm_drv_init+0x170>)
    b0ee:	0018      	movs	r0, r3
    b0f0:	4b36      	ldr	r3, [pc, #216]	; (b1cc <nm_drv_init+0x160>)
    b0f2:	4798      	blx	r3
    b0f4:	4b3a      	ldr	r3, [pc, #232]	; (b1e0 <nm_drv_init+0x174>)
    b0f6:	4798      	blx	r3
    b0f8:	0002      	movs	r2, r0
    b0fa:	4b3a      	ldr	r3, [pc, #232]	; (b1e4 <nm_drv_init+0x178>)
    b0fc:	0011      	movs	r1, r2
    b0fe:	0018      	movs	r0, r3
    b100:	4b32      	ldr	r3, [pc, #200]	; (b1cc <nm_drv_init+0x160>)
    b102:	4798      	blx	r3
    b104:	200d      	movs	r0, #13
    b106:	4b34      	ldr	r3, [pc, #208]	; (b1d8 <nm_drv_init+0x16c>)
    b108:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    b10a:	4b37      	ldr	r3, [pc, #220]	; (b1e8 <nm_drv_init+0x17c>)
    b10c:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    b10e:	230f      	movs	r3, #15
    b110:	18fc      	adds	r4, r7, r3
    b112:	230e      	movs	r3, #14
    b114:	18fb      	adds	r3, r7, r3
    b116:	781b      	ldrb	r3, [r3, #0]
    b118:	0018      	movs	r0, r3
    b11a:	4b34      	ldr	r3, [pc, #208]	; (b1ec <nm_drv_init+0x180>)
    b11c:	4798      	blx	r3
    b11e:	0003      	movs	r3, r0
    b120:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b122:	230f      	movs	r3, #15
    b124:	18fb      	adds	r3, r7, r3
    b126:	781b      	ldrb	r3, [r3, #0]
    b128:	b25b      	sxtb	r3, r3
    b12a:	2b00      	cmp	r3, #0
    b12c:	d13a      	bne.n	b1a4 <nm_drv_init+0x138>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    b12e:	230f      	movs	r3, #15
    b130:	18fc      	adds	r4, r7, r3
    b132:	230e      	movs	r3, #14
    b134:	18fb      	adds	r3, r7, r3
    b136:	781b      	ldrb	r3, [r3, #0]
    b138:	0018      	movs	r0, r3
    b13a:	4b2d      	ldr	r3, [pc, #180]	; (b1f0 <nm_drv_init+0x184>)
    b13c:	4798      	blx	r3
    b13e:	0003      	movs	r3, r0
    b140:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b142:	230f      	movs	r3, #15
    b144:	18fb      	adds	r3, r7, r3
    b146:	781b      	ldrb	r3, [r3, #0]
    b148:	b25b      	sxtb	r3, r3
    b14a:	2b00      	cmp	r3, #0
    b14c:	d12c      	bne.n	b1a8 <nm_drv_init+0x13c>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    b14e:	230e      	movs	r3, #14
    b150:	18fb      	adds	r3, r7, r3
    b152:	781b      	ldrb	r3, [r3, #0]
    b154:	2b02      	cmp	r3, #2
    b156:	d02a      	beq.n	b1ae <nm_drv_init+0x142>
    b158:	230e      	movs	r3, #14
    b15a:	18fb      	adds	r3, r7, r3
    b15c:	781b      	ldrb	r3, [r3, #0]
    b15e:	2b03      	cmp	r3, #3
    b160:	d025      	beq.n	b1ae <nm_drv_init+0x142>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    b162:	230f      	movs	r3, #15
    b164:	18fc      	adds	r4, r7, r3
    b166:	4b23      	ldr	r3, [pc, #140]	; (b1f4 <nm_drv_init+0x188>)
    b168:	4798      	blx	r3
    b16a:	0003      	movs	r3, r0
    b16c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b16e:	230f      	movs	r3, #15
    b170:	18fb      	adds	r3, r7, r3
    b172:	781b      	ldrb	r3, [r3, #0]
    b174:	b25b      	sxtb	r3, r3
    b176:	2b00      	cmp	r3, #0
    b178:	d00f      	beq.n	b19a <nm_drv_init+0x12e>
		M2M_ERR("failed to enable interrupts..\n");
    b17a:	2356      	movs	r3, #86	; 0x56
    b17c:	33ff      	adds	r3, #255	; 0xff
    b17e:	001a      	movs	r2, r3
    b180:	4910      	ldr	r1, [pc, #64]	; (b1c4 <nm_drv_init+0x158>)
    b182:	4b11      	ldr	r3, [pc, #68]	; (b1c8 <nm_drv_init+0x15c>)
    b184:	0018      	movs	r0, r3
    b186:	4b11      	ldr	r3, [pc, #68]	; (b1cc <nm_drv_init+0x160>)
    b188:	4798      	blx	r3
    b18a:	4b1b      	ldr	r3, [pc, #108]	; (b1f8 <nm_drv_init+0x18c>)
    b18c:	0018      	movs	r0, r3
    b18e:	4b11      	ldr	r3, [pc, #68]	; (b1d4 <nm_drv_init+0x168>)
    b190:	4798      	blx	r3
    b192:	200d      	movs	r0, #13
    b194:	4b10      	ldr	r3, [pc, #64]	; (b1d8 <nm_drv_init+0x16c>)
    b196:	4798      	blx	r3
		goto ERR2;
    b198:	e007      	b.n	b1aa <nm_drv_init+0x13e>
	}
	return ret;
    b19a:	230f      	movs	r3, #15
    b19c:	18fb      	adds	r3, r7, r3
    b19e:	781b      	ldrb	r3, [r3, #0]
    b1a0:	b25b      	sxtb	r3, r3
    b1a2:	e008      	b.n	b1b6 <nm_drv_init+0x14a>
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    b1a4:	46c0      	nop			; (mov r8, r8)
    b1a6:	e000      	b.n	b1aa <nm_drv_init+0x13e>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    b1a8:	46c0      	nop			; (mov r8, r8)
		M2M_ERR("failed to enable interrupts..\n");
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    b1aa:	4b14      	ldr	r3, [pc, #80]	; (b1fc <nm_drv_init+0x190>)
    b1ac:	4798      	blx	r3
ERR1:
	return ret;
    b1ae:	230f      	movs	r3, #15
    b1b0:	18fb      	adds	r3, r7, r3
    b1b2:	781b      	ldrb	r3, [r3, #0]
    b1b4:	b25b      	sxtb	r3, r3
}
    b1b6:	0018      	movs	r0, r3
    b1b8:	46bd      	mov	sp, r7
    b1ba:	b005      	add	sp, #20
    b1bc:	bd90      	pop	{r4, r7, pc}
    b1be:	46c0      	nop			; (mov r8, r8)
    b1c0:	0000abcd 	.word	0x0000abcd
    b1c4:	00018bdc 	.word	0x00018bdc
    b1c8:	00018b10 	.word	0x00018b10
    b1cc:	00016db1 	.word	0x00016db1
    b1d0:	00018b24 	.word	0x00018b24
    b1d4:	00016ed1 	.word	0x00016ed1
    b1d8:	00016de5 	.word	0x00016de5
    b1dc:	00018b40 	.word	0x00018b40
    b1e0:	0000a56d 	.word	0x0000a56d
    b1e4:	00018b4c 	.word	0x00018b4c
    b1e8:	0000c541 	.word	0x0000c541
    b1ec:	0000a8c1 	.word	0x0000a8c1
    b1f0:	0000aa59 	.word	0x0000aa59
    b1f4:	0000a4b9 	.word	0x0000a4b9
    b1f8:	00018b5c 	.word	0x00018b5c
    b1fc:	0000ac01 	.word	0x0000ac01

0000b200 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    b200:	b590      	push	{r4, r7, lr}
    b202:	b085      	sub	sp, #20
    b204:	af00      	add	r7, sp, #0
    b206:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    b208:	230f      	movs	r3, #15
    b20a:	18fc      	adds	r4, r7, r3
    b20c:	4b2d      	ldr	r3, [pc, #180]	; (b2c4 <nm_drv_deinit+0xc4>)
    b20e:	4798      	blx	r3
    b210:	0003      	movs	r3, r0
    b212:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b214:	230f      	movs	r3, #15
    b216:	18fb      	adds	r3, r7, r3
    b218:	781b      	ldrb	r3, [r3, #0]
    b21a:	b25b      	sxtb	r3, r3
    b21c:	2b00      	cmp	r3, #0
    b21e:	d00e      	beq.n	b23e <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    b220:	23b6      	movs	r3, #182	; 0xb6
    b222:	005a      	lsls	r2, r3, #1
    b224:	4928      	ldr	r1, [pc, #160]	; (b2c8 <nm_drv_deinit+0xc8>)
    b226:	4b29      	ldr	r3, [pc, #164]	; (b2cc <nm_drv_deinit+0xcc>)
    b228:	0018      	movs	r0, r3
    b22a:	4b29      	ldr	r3, [pc, #164]	; (b2d0 <nm_drv_deinit+0xd0>)
    b22c:	4798      	blx	r3
    b22e:	4b29      	ldr	r3, [pc, #164]	; (b2d4 <nm_drv_deinit+0xd4>)
    b230:	0018      	movs	r0, r3
    b232:	4b29      	ldr	r3, [pc, #164]	; (b2d8 <nm_drv_deinit+0xd8>)
    b234:	4798      	blx	r3
    b236:	200d      	movs	r0, #13
    b238:	4b28      	ldr	r3, [pc, #160]	; (b2dc <nm_drv_deinit+0xdc>)
    b23a:	4798      	blx	r3
		goto ERR1;
    b23c:	e03a      	b.n	b2b4 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    b23e:	230f      	movs	r3, #15
    b240:	18fc      	adds	r4, r7, r3
    b242:	2000      	movs	r0, #0
    b244:	4b26      	ldr	r3, [pc, #152]	; (b2e0 <nm_drv_deinit+0xe0>)
    b246:	4798      	blx	r3
    b248:	0003      	movs	r3, r0
    b24a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b24c:	230f      	movs	r3, #15
    b24e:	18fb      	adds	r3, r7, r3
    b250:	781b      	ldrb	r3, [r3, #0]
    b252:	b25b      	sxtb	r3, r3
    b254:	2b00      	cmp	r3, #0
    b256:	d00f      	beq.n	b278 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    b258:	2374      	movs	r3, #116	; 0x74
    b25a:	33ff      	adds	r3, #255	; 0xff
    b25c:	001a      	movs	r2, r3
    b25e:	491a      	ldr	r1, [pc, #104]	; (b2c8 <nm_drv_deinit+0xc8>)
    b260:	4b1a      	ldr	r3, [pc, #104]	; (b2cc <nm_drv_deinit+0xcc>)
    b262:	0018      	movs	r0, r3
    b264:	4b1a      	ldr	r3, [pc, #104]	; (b2d0 <nm_drv_deinit+0xd0>)
    b266:	4798      	blx	r3
    b268:	4b1e      	ldr	r3, [pc, #120]	; (b2e4 <nm_drv_deinit+0xe4>)
    b26a:	0018      	movs	r0, r3
    b26c:	4b1a      	ldr	r3, [pc, #104]	; (b2d8 <nm_drv_deinit+0xd8>)
    b26e:	4798      	blx	r3
    b270:	200d      	movs	r0, #13
    b272:	4b1a      	ldr	r3, [pc, #104]	; (b2dc <nm_drv_deinit+0xdc>)
    b274:	4798      	blx	r3
		goto ERR1;
    b276:	e01d      	b.n	b2b4 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    b278:	230f      	movs	r3, #15
    b27a:	18fc      	adds	r4, r7, r3
    b27c:	4b1a      	ldr	r3, [pc, #104]	; (b2e8 <nm_drv_deinit+0xe8>)
    b27e:	4798      	blx	r3
    b280:	0003      	movs	r3, r0
    b282:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    b284:	230f      	movs	r3, #15
    b286:	18fb      	adds	r3, r7, r3
    b288:	781b      	ldrb	r3, [r3, #0]
    b28a:	b25b      	sxtb	r3, r3
    b28c:	2b00      	cmp	r3, #0
    b28e:	d00f      	beq.n	b2b0 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    b290:	237a      	movs	r3, #122	; 0x7a
    b292:	33ff      	adds	r3, #255	; 0xff
    b294:	001a      	movs	r2, r3
    b296:	490c      	ldr	r1, [pc, #48]	; (b2c8 <nm_drv_deinit+0xc8>)
    b298:	4b0c      	ldr	r3, [pc, #48]	; (b2cc <nm_drv_deinit+0xcc>)
    b29a:	0018      	movs	r0, r3
    b29c:	4b0c      	ldr	r3, [pc, #48]	; (b2d0 <nm_drv_deinit+0xd0>)
    b29e:	4798      	blx	r3
    b2a0:	4b12      	ldr	r3, [pc, #72]	; (b2ec <nm_drv_deinit+0xec>)
    b2a2:	0018      	movs	r0, r3
    b2a4:	4b0c      	ldr	r3, [pc, #48]	; (b2d8 <nm_drv_deinit+0xd8>)
    b2a6:	4798      	blx	r3
    b2a8:	200d      	movs	r0, #13
    b2aa:	4b0c      	ldr	r3, [pc, #48]	; (b2dc <nm_drv_deinit+0xdc>)
    b2ac:	4798      	blx	r3
		goto ERR1;
    b2ae:	e001      	b.n	b2b4 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    b2b0:	4b0f      	ldr	r3, [pc, #60]	; (b2f0 <nm_drv_deinit+0xf0>)
    b2b2:	4798      	blx	r3
#endif

ERR1:
	return ret;
    b2b4:	230f      	movs	r3, #15
    b2b6:	18fb      	adds	r3, r7, r3
    b2b8:	781b      	ldrb	r3, [r3, #0]
    b2ba:	b25b      	sxtb	r3, r3
}
    b2bc:	0018      	movs	r0, r3
    b2be:	46bd      	mov	sp, r7
    b2c0:	b005      	add	sp, #20
    b2c2:	bd90      	pop	{r4, r7, pc}
    b2c4:	0000ab0d 	.word	0x0000ab0d
    b2c8:	00018be8 	.word	0x00018be8
    b2cc:	00018b10 	.word	0x00018b10
    b2d0:	00016db1 	.word	0x00016db1
    b2d4:	00018b7c 	.word	0x00018b7c
    b2d8:	00016ed1 	.word	0x00016ed1
    b2dc:	00016de5 	.word	0x00016de5
    b2e0:	0000d999 	.word	0x0000d999
    b2e4:	00018b9c 	.word	0x00018b9c
    b2e8:	0000ac01 	.word	0x0000ac01
    b2ec:	00018bc0 	.word	0x00018bc0
    b2f0:	0000c68d 	.word	0x0000c68d

0000b2f4 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    b2f4:	b580      	push	{r7, lr}
    b2f6:	b086      	sub	sp, #24
    b2f8:	af00      	add	r7, sp, #0
    b2fa:	6078      	str	r0, [r7, #4]
    b2fc:	000a      	movs	r2, r1
    b2fe:	1cbb      	adds	r3, r7, #2
    b300:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    b302:	230c      	movs	r3, #12
    b304:	18fb      	adds	r3, r7, r3
    b306:	2200      	movs	r2, #0
    b308:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    b30a:	230c      	movs	r3, #12
    b30c:	18fb      	adds	r3, r7, r3
    b30e:	687a      	ldr	r2, [r7, #4]
    b310:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    b312:	230c      	movs	r3, #12
    b314:	18fb      	adds	r3, r7, r3
    b316:	1cba      	adds	r2, r7, #2
    b318:	8812      	ldrh	r2, [r2, #0]
    b31a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    b31c:	230c      	movs	r3, #12
    b31e:	18fb      	adds	r3, r7, r3
    b320:	0019      	movs	r1, r3
    b322:	2003      	movs	r0, #3
    b324:	4b03      	ldr	r3, [pc, #12]	; (b334 <nmi_spi_read+0x40>)
    b326:	4798      	blx	r3
    b328:	0003      	movs	r3, r0
}
    b32a:	0018      	movs	r0, r3
    b32c:	46bd      	mov	sp, r7
    b32e:	b006      	add	sp, #24
    b330:	bd80      	pop	{r7, pc}
    b332:	46c0      	nop			; (mov r8, r8)
    b334:	00008ae5 	.word	0x00008ae5

0000b338 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    b338:	b580      	push	{r7, lr}
    b33a:	b086      	sub	sp, #24
    b33c:	af00      	add	r7, sp, #0
    b33e:	6078      	str	r0, [r7, #4]
    b340:	000a      	movs	r2, r1
    b342:	1cbb      	adds	r3, r7, #2
    b344:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    b346:	230c      	movs	r3, #12
    b348:	18fb      	adds	r3, r7, r3
    b34a:	687a      	ldr	r2, [r7, #4]
    b34c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    b34e:	230c      	movs	r3, #12
    b350:	18fb      	adds	r3, r7, r3
    b352:	2200      	movs	r2, #0
    b354:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    b356:	230c      	movs	r3, #12
    b358:	18fb      	adds	r3, r7, r3
    b35a:	1cba      	adds	r2, r7, #2
    b35c:	8812      	ldrh	r2, [r2, #0]
    b35e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    b360:	230c      	movs	r3, #12
    b362:	18fb      	adds	r3, r7, r3
    b364:	0019      	movs	r1, r3
    b366:	2003      	movs	r0, #3
    b368:	4b03      	ldr	r3, [pc, #12]	; (b378 <nmi_spi_write+0x40>)
    b36a:	4798      	blx	r3
    b36c:	0003      	movs	r3, r0
}
    b36e:	0018      	movs	r0, r3
    b370:	46bd      	mov	sp, r7
    b372:	b006      	add	sp, #24
    b374:	bd80      	pop	{r7, pc}
    b376:	46c0      	nop			; (mov r8, r8)
    b378:	00008ae5 	.word	0x00008ae5

0000b37c <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    b37c:	b580      	push	{r7, lr}
    b37e:	b082      	sub	sp, #8
    b380:	af00      	add	r7, sp, #0
    b382:	0002      	movs	r2, r0
    b384:	1dfb      	adds	r3, r7, #7
    b386:	701a      	strb	r2, [r3, #0]
    b388:	1dbb      	adds	r3, r7, #6
    b38a:	1c0a      	adds	r2, r1, #0
    b38c:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    b38e:	1dfb      	adds	r3, r7, #7
    b390:	781b      	ldrb	r3, [r3, #0]
    b392:	005a      	lsls	r2, r3, #1
    b394:	1dbb      	adds	r3, r7, #6
    b396:	781b      	ldrb	r3, [r3, #0]
    b398:	4053      	eors	r3, r2
    b39a:	4a03      	ldr	r2, [pc, #12]	; (b3a8 <crc7_byte+0x2c>)
    b39c:	5cd3      	ldrb	r3, [r2, r3]
}
    b39e:	0018      	movs	r0, r3
    b3a0:	46bd      	mov	sp, r7
    b3a2:	b002      	add	sp, #8
    b3a4:	bd80      	pop	{r7, pc}
    b3a6:	46c0      	nop			; (mov r8, r8)
    b3a8:	00018bf8 	.word	0x00018bf8

0000b3ac <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    b3ac:	b590      	push	{r4, r7, lr}
    b3ae:	b085      	sub	sp, #20
    b3b0:	af00      	add	r7, sp, #0
    b3b2:	60b9      	str	r1, [r7, #8]
    b3b4:	607a      	str	r2, [r7, #4]
    b3b6:	230f      	movs	r3, #15
    b3b8:	18fb      	adds	r3, r7, r3
    b3ba:	1c02      	adds	r2, r0, #0
    b3bc:	701a      	strb	r2, [r3, #0]
	while (len--)
    b3be:	e00e      	b.n	b3de <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    b3c0:	68bb      	ldr	r3, [r7, #8]
    b3c2:	1c5a      	adds	r2, r3, #1
    b3c4:	60ba      	str	r2, [r7, #8]
    b3c6:	781a      	ldrb	r2, [r3, #0]
    b3c8:	230f      	movs	r3, #15
    b3ca:	18fc      	adds	r4, r7, r3
    b3cc:	230f      	movs	r3, #15
    b3ce:	18fb      	adds	r3, r7, r3
    b3d0:	781b      	ldrb	r3, [r3, #0]
    b3d2:	0011      	movs	r1, r2
    b3d4:	0018      	movs	r0, r3
    b3d6:	4b08      	ldr	r3, [pc, #32]	; (b3f8 <crc7+0x4c>)
    b3d8:	4798      	blx	r3
    b3da:	0003      	movs	r3, r0
    b3dc:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    b3de:	687b      	ldr	r3, [r7, #4]
    b3e0:	1e5a      	subs	r2, r3, #1
    b3e2:	607a      	str	r2, [r7, #4]
    b3e4:	2b00      	cmp	r3, #0
    b3e6:	d1eb      	bne.n	b3c0 <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    b3e8:	230f      	movs	r3, #15
    b3ea:	18fb      	adds	r3, r7, r3
    b3ec:	781b      	ldrb	r3, [r3, #0]
}
    b3ee:	0018      	movs	r0, r3
    b3f0:	46bd      	mov	sp, r7
    b3f2:	b005      	add	sp, #20
    b3f4:	bd90      	pop	{r4, r7, pc}
    b3f6:	46c0      	nop			; (mov r8, r8)
    b3f8:	0000b37d 	.word	0x0000b37d

0000b3fc <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    b3fc:	b590      	push	{r4, r7, lr}
    b3fe:	b089      	sub	sp, #36	; 0x24
    b400:	af00      	add	r7, sp, #0
    b402:	60b9      	str	r1, [r7, #8]
    b404:	607a      	str	r2, [r7, #4]
    b406:	603b      	str	r3, [r7, #0]
    b408:	230f      	movs	r3, #15
    b40a:	18fb      	adds	r3, r7, r3
    b40c:	1c02      	adds	r2, r0, #0
    b40e:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    b410:	231f      	movs	r3, #31
    b412:	18fb      	adds	r3, r7, r3
    b414:	2205      	movs	r2, #5
    b416:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    b418:	231e      	movs	r3, #30
    b41a:	18fb      	adds	r3, r7, r3
    b41c:	2201      	movs	r2, #1
    b41e:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    b420:	2314      	movs	r3, #20
    b422:	18fb      	adds	r3, r7, r3
    b424:	220f      	movs	r2, #15
    b426:	18ba      	adds	r2, r7, r2
    b428:	7812      	ldrb	r2, [r2, #0]
    b42a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    b42c:	230f      	movs	r3, #15
    b42e:	18fb      	adds	r3, r7, r3
    b430:	781b      	ldrb	r3, [r3, #0]
    b432:	3bc1      	subs	r3, #193	; 0xc1
    b434:	2b0e      	cmp	r3, #14
    b436:	d900      	bls.n	b43a <spi_cmd+0x3e>
    b438:	e11b      	b.n	b672 <spi_cmd+0x276>
    b43a:	009a      	lsls	r2, r3, #2
    b43c:	4bb6      	ldr	r3, [pc, #728]	; (b718 <spi_cmd+0x31c>)
    b43e:	18d3      	adds	r3, r2, r3
    b440:	681b      	ldr	r3, [r3, #0]
    b442:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    b444:	68bb      	ldr	r3, [r7, #8]
    b446:	0c1b      	lsrs	r3, r3, #16
    b448:	b2da      	uxtb	r2, r3
    b44a:	2314      	movs	r3, #20
    b44c:	18fb      	adds	r3, r7, r3
    b44e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b450:	68bb      	ldr	r3, [r7, #8]
    b452:	0a1b      	lsrs	r3, r3, #8
    b454:	b2da      	uxtb	r2, r3
    b456:	2314      	movs	r3, #20
    b458:	18fb      	adds	r3, r7, r3
    b45a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    b45c:	68bb      	ldr	r3, [r7, #8]
    b45e:	b2da      	uxtb	r2, r3
    b460:	2314      	movs	r3, #20
    b462:	18fb      	adds	r3, r7, r3
    b464:	70da      	strb	r2, [r3, #3]
		len = 5;
    b466:	231f      	movs	r3, #31
    b468:	18fb      	adds	r3, r7, r3
    b46a:	2205      	movs	r2, #5
    b46c:	701a      	strb	r2, [r3, #0]
		break;
    b46e:	e105      	b.n	b67c <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    b470:	68bb      	ldr	r3, [r7, #8]
    b472:	0a1b      	lsrs	r3, r3, #8
    b474:	b2da      	uxtb	r2, r3
    b476:	2314      	movs	r3, #20
    b478:	18fb      	adds	r3, r7, r3
    b47a:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    b47c:	2330      	movs	r3, #48	; 0x30
    b47e:	18fb      	adds	r3, r7, r3
    b480:	781b      	ldrb	r3, [r3, #0]
    b482:	2b00      	cmp	r3, #0
    b484:	d009      	beq.n	b49a <spi_cmd+0x9e>
    b486:	2314      	movs	r3, #20
    b488:	18fb      	adds	r3, r7, r3
    b48a:	785b      	ldrb	r3, [r3, #1]
    b48c:	2280      	movs	r2, #128	; 0x80
    b48e:	4252      	negs	r2, r2
    b490:	4313      	orrs	r3, r2
    b492:	b2da      	uxtb	r2, r3
    b494:	2314      	movs	r3, #20
    b496:	18fb      	adds	r3, r7, r3
    b498:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    b49a:	68bb      	ldr	r3, [r7, #8]
    b49c:	b2da      	uxtb	r2, r3
    b49e:	2314      	movs	r3, #20
    b4a0:	18fb      	adds	r3, r7, r3
    b4a2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b4a4:	2314      	movs	r3, #20
    b4a6:	18fb      	adds	r3, r7, r3
    b4a8:	2200      	movs	r2, #0
    b4aa:	70da      	strb	r2, [r3, #3]
		len = 5;
    b4ac:	231f      	movs	r3, #31
    b4ae:	18fb      	adds	r3, r7, r3
    b4b0:	2205      	movs	r2, #5
    b4b2:	701a      	strb	r2, [r3, #0]
		break;
    b4b4:	e0e2      	b.n	b67c <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    b4b6:	2314      	movs	r3, #20
    b4b8:	18fb      	adds	r3, r7, r3
    b4ba:	2200      	movs	r2, #0
    b4bc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    b4be:	2314      	movs	r3, #20
    b4c0:	18fb      	adds	r3, r7, r3
    b4c2:	2200      	movs	r2, #0
    b4c4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b4c6:	2314      	movs	r3, #20
    b4c8:	18fb      	adds	r3, r7, r3
    b4ca:	2200      	movs	r2, #0
    b4cc:	70da      	strb	r2, [r3, #3]
		len = 5;
    b4ce:	231f      	movs	r3, #31
    b4d0:	18fb      	adds	r3, r7, r3
    b4d2:	2205      	movs	r2, #5
    b4d4:	701a      	strb	r2, [r3, #0]
		break;
    b4d6:	e0d1      	b.n	b67c <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    b4d8:	2314      	movs	r3, #20
    b4da:	18fb      	adds	r3, r7, r3
    b4dc:	2200      	movs	r2, #0
    b4de:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    b4e0:	2314      	movs	r3, #20
    b4e2:	18fb      	adds	r3, r7, r3
    b4e4:	2200      	movs	r2, #0
    b4e6:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    b4e8:	2314      	movs	r3, #20
    b4ea:	18fb      	adds	r3, r7, r3
    b4ec:	2200      	movs	r2, #0
    b4ee:	70da      	strb	r2, [r3, #3]
		len = 5;
    b4f0:	231f      	movs	r3, #31
    b4f2:	18fb      	adds	r3, r7, r3
    b4f4:	2205      	movs	r2, #5
    b4f6:	701a      	strb	r2, [r3, #0]
		break;
    b4f8:	e0c0      	b.n	b67c <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    b4fa:	2314      	movs	r3, #20
    b4fc:	18fb      	adds	r3, r7, r3
    b4fe:	22ff      	movs	r2, #255	; 0xff
    b500:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    b502:	2314      	movs	r3, #20
    b504:	18fb      	adds	r3, r7, r3
    b506:	22ff      	movs	r2, #255	; 0xff
    b508:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    b50a:	2314      	movs	r3, #20
    b50c:	18fb      	adds	r3, r7, r3
    b50e:	22ff      	movs	r2, #255	; 0xff
    b510:	70da      	strb	r2, [r3, #3]
		len = 5;
    b512:	231f      	movs	r3, #31
    b514:	18fb      	adds	r3, r7, r3
    b516:	2205      	movs	r2, #5
    b518:	701a      	strb	r2, [r3, #0]
		break;
    b51a:	e0af      	b.n	b67c <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    b51c:	68bb      	ldr	r3, [r7, #8]
    b51e:	0c1b      	lsrs	r3, r3, #16
    b520:	b2da      	uxtb	r2, r3
    b522:	2314      	movs	r3, #20
    b524:	18fb      	adds	r3, r7, r3
    b526:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b528:	68bb      	ldr	r3, [r7, #8]
    b52a:	0a1b      	lsrs	r3, r3, #8
    b52c:	b2da      	uxtb	r2, r3
    b52e:	2314      	movs	r3, #20
    b530:	18fb      	adds	r3, r7, r3
    b532:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    b534:	68bb      	ldr	r3, [r7, #8]
    b536:	b2da      	uxtb	r2, r3
    b538:	2314      	movs	r3, #20
    b53a:	18fb      	adds	r3, r7, r3
    b53c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    b53e:	683b      	ldr	r3, [r7, #0]
    b540:	0a1b      	lsrs	r3, r3, #8
    b542:	b2da      	uxtb	r2, r3
    b544:	2314      	movs	r3, #20
    b546:	18fb      	adds	r3, r7, r3
    b548:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    b54a:	683b      	ldr	r3, [r7, #0]
    b54c:	b2da      	uxtb	r2, r3
    b54e:	2314      	movs	r3, #20
    b550:	18fb      	adds	r3, r7, r3
    b552:	715a      	strb	r2, [r3, #5]
		len = 7;
    b554:	231f      	movs	r3, #31
    b556:	18fb      	adds	r3, r7, r3
    b558:	2207      	movs	r2, #7
    b55a:	701a      	strb	r2, [r3, #0]
		break;
    b55c:	e08e      	b.n	b67c <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    b55e:	68bb      	ldr	r3, [r7, #8]
    b560:	0c1b      	lsrs	r3, r3, #16
    b562:	b2da      	uxtb	r2, r3
    b564:	2314      	movs	r3, #20
    b566:	18fb      	adds	r3, r7, r3
    b568:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b56a:	68bb      	ldr	r3, [r7, #8]
    b56c:	0a1b      	lsrs	r3, r3, #8
    b56e:	b2da      	uxtb	r2, r3
    b570:	2314      	movs	r3, #20
    b572:	18fb      	adds	r3, r7, r3
    b574:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    b576:	68bb      	ldr	r3, [r7, #8]
    b578:	b2da      	uxtb	r2, r3
    b57a:	2314      	movs	r3, #20
    b57c:	18fb      	adds	r3, r7, r3
    b57e:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    b580:	683b      	ldr	r3, [r7, #0]
    b582:	0c1b      	lsrs	r3, r3, #16
    b584:	b2da      	uxtb	r2, r3
    b586:	2314      	movs	r3, #20
    b588:	18fb      	adds	r3, r7, r3
    b58a:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    b58c:	683b      	ldr	r3, [r7, #0]
    b58e:	0a1b      	lsrs	r3, r3, #8
    b590:	b2da      	uxtb	r2, r3
    b592:	2314      	movs	r3, #20
    b594:	18fb      	adds	r3, r7, r3
    b596:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    b598:	683b      	ldr	r3, [r7, #0]
    b59a:	b2da      	uxtb	r2, r3
    b59c:	2314      	movs	r3, #20
    b59e:	18fb      	adds	r3, r7, r3
    b5a0:	719a      	strb	r2, [r3, #6]
		len = 8;
    b5a2:	231f      	movs	r3, #31
    b5a4:	18fb      	adds	r3, r7, r3
    b5a6:	2208      	movs	r2, #8
    b5a8:	701a      	strb	r2, [r3, #0]
		break;
    b5aa:	e067      	b.n	b67c <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    b5ac:	68bb      	ldr	r3, [r7, #8]
    b5ae:	0a1b      	lsrs	r3, r3, #8
    b5b0:	b2da      	uxtb	r2, r3
    b5b2:	2314      	movs	r3, #20
    b5b4:	18fb      	adds	r3, r7, r3
    b5b6:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    b5b8:	2330      	movs	r3, #48	; 0x30
    b5ba:	18fb      	adds	r3, r7, r3
    b5bc:	781b      	ldrb	r3, [r3, #0]
    b5be:	2b00      	cmp	r3, #0
    b5c0:	d009      	beq.n	b5d6 <spi_cmd+0x1da>
    b5c2:	2314      	movs	r3, #20
    b5c4:	18fb      	adds	r3, r7, r3
    b5c6:	785b      	ldrb	r3, [r3, #1]
    b5c8:	2280      	movs	r2, #128	; 0x80
    b5ca:	4252      	negs	r2, r2
    b5cc:	4313      	orrs	r3, r2
    b5ce:	b2da      	uxtb	r2, r3
    b5d0:	2314      	movs	r3, #20
    b5d2:	18fb      	adds	r3, r7, r3
    b5d4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    b5d6:	68bb      	ldr	r3, [r7, #8]
    b5d8:	b2da      	uxtb	r2, r3
    b5da:	2314      	movs	r3, #20
    b5dc:	18fb      	adds	r3, r7, r3
    b5de:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    b5e0:	687b      	ldr	r3, [r7, #4]
    b5e2:	0e1b      	lsrs	r3, r3, #24
    b5e4:	b2da      	uxtb	r2, r3
    b5e6:	2314      	movs	r3, #20
    b5e8:	18fb      	adds	r3, r7, r3
    b5ea:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    b5ec:	687b      	ldr	r3, [r7, #4]
    b5ee:	0c1b      	lsrs	r3, r3, #16
    b5f0:	b2da      	uxtb	r2, r3
    b5f2:	2314      	movs	r3, #20
    b5f4:	18fb      	adds	r3, r7, r3
    b5f6:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    b5f8:	687b      	ldr	r3, [r7, #4]
    b5fa:	0a1b      	lsrs	r3, r3, #8
    b5fc:	b2da      	uxtb	r2, r3
    b5fe:	2314      	movs	r3, #20
    b600:	18fb      	adds	r3, r7, r3
    b602:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    b604:	687b      	ldr	r3, [r7, #4]
    b606:	b2da      	uxtb	r2, r3
    b608:	2314      	movs	r3, #20
    b60a:	18fb      	adds	r3, r7, r3
    b60c:	719a      	strb	r2, [r3, #6]
		len = 8;
    b60e:	231f      	movs	r3, #31
    b610:	18fb      	adds	r3, r7, r3
    b612:	2208      	movs	r2, #8
    b614:	701a      	strb	r2, [r3, #0]
		break;
    b616:	e031      	b.n	b67c <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    b618:	68bb      	ldr	r3, [r7, #8]
    b61a:	0c1b      	lsrs	r3, r3, #16
    b61c:	b2da      	uxtb	r2, r3
    b61e:	2314      	movs	r3, #20
    b620:	18fb      	adds	r3, r7, r3
    b622:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    b624:	68bb      	ldr	r3, [r7, #8]
    b626:	0a1b      	lsrs	r3, r3, #8
    b628:	b2da      	uxtb	r2, r3
    b62a:	2314      	movs	r3, #20
    b62c:	18fb      	adds	r3, r7, r3
    b62e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    b630:	68bb      	ldr	r3, [r7, #8]
    b632:	b2da      	uxtb	r2, r3
    b634:	2314      	movs	r3, #20
    b636:	18fb      	adds	r3, r7, r3
    b638:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    b63a:	687b      	ldr	r3, [r7, #4]
    b63c:	0e1b      	lsrs	r3, r3, #24
    b63e:	b2da      	uxtb	r2, r3
    b640:	2314      	movs	r3, #20
    b642:	18fb      	adds	r3, r7, r3
    b644:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    b646:	687b      	ldr	r3, [r7, #4]
    b648:	0c1b      	lsrs	r3, r3, #16
    b64a:	b2da      	uxtb	r2, r3
    b64c:	2314      	movs	r3, #20
    b64e:	18fb      	adds	r3, r7, r3
    b650:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    b652:	687b      	ldr	r3, [r7, #4]
    b654:	0a1b      	lsrs	r3, r3, #8
    b656:	b2da      	uxtb	r2, r3
    b658:	2314      	movs	r3, #20
    b65a:	18fb      	adds	r3, r7, r3
    b65c:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    b65e:	687b      	ldr	r3, [r7, #4]
    b660:	b2da      	uxtb	r2, r3
    b662:	2314      	movs	r3, #20
    b664:	18fb      	adds	r3, r7, r3
    b666:	71da      	strb	r2, [r3, #7]
		len = 9;
    b668:	231f      	movs	r3, #31
    b66a:	18fb      	adds	r3, r7, r3
    b66c:	2209      	movs	r2, #9
    b66e:	701a      	strb	r2, [r3, #0]
		break;
    b670:	e004      	b.n	b67c <spi_cmd+0x280>
	default:
		result = N_FAIL;
    b672:	231e      	movs	r3, #30
    b674:	18fb      	adds	r3, r7, r3
    b676:	2200      	movs	r2, #0
    b678:	701a      	strb	r2, [r3, #0]
		break;
    b67a:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    b67c:	231e      	movs	r3, #30
    b67e:	18fb      	adds	r3, r7, r3
    b680:	781b      	ldrb	r3, [r3, #0]
    b682:	b25b      	sxtb	r3, r3
    b684:	2b00      	cmp	r3, #0
    b686:	d03f      	beq.n	b708 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    b688:	4b24      	ldr	r3, [pc, #144]	; (b71c <spi_cmd+0x320>)
    b68a:	781b      	ldrb	r3, [r3, #0]
    b68c:	2b00      	cmp	r3, #0
    b68e:	d115      	bne.n	b6bc <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    b690:	231f      	movs	r3, #31
    b692:	18fb      	adds	r3, r7, r3
    b694:	781b      	ldrb	r3, [r3, #0]
    b696:	1e5c      	subs	r4, r3, #1
    b698:	231f      	movs	r3, #31
    b69a:	18fb      	adds	r3, r7, r3
    b69c:	781b      	ldrb	r3, [r3, #0]
    b69e:	3b01      	subs	r3, #1
    b6a0:	001a      	movs	r2, r3
    b6a2:	2314      	movs	r3, #20
    b6a4:	18fb      	adds	r3, r7, r3
    b6a6:	0019      	movs	r1, r3
    b6a8:	207f      	movs	r0, #127	; 0x7f
    b6aa:	4b1d      	ldr	r3, [pc, #116]	; (b720 <spi_cmd+0x324>)
    b6ac:	4798      	blx	r3
    b6ae:	0003      	movs	r3, r0
    b6b0:	18db      	adds	r3, r3, r3
    b6b2:	b2da      	uxtb	r2, r3
    b6b4:	2314      	movs	r3, #20
    b6b6:	18fb      	adds	r3, r7, r3
    b6b8:	551a      	strb	r2, [r3, r4]
    b6ba:	e006      	b.n	b6ca <spi_cmd+0x2ce>
		else
			len-=1;
    b6bc:	231f      	movs	r3, #31
    b6be:	18fb      	adds	r3, r7, r3
    b6c0:	221f      	movs	r2, #31
    b6c2:	18ba      	adds	r2, r7, r2
    b6c4:	7812      	ldrb	r2, [r2, #0]
    b6c6:	3a01      	subs	r2, #1
    b6c8:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    b6ca:	231f      	movs	r3, #31
    b6cc:	18fb      	adds	r3, r7, r3
    b6ce:	781b      	ldrb	r3, [r3, #0]
    b6d0:	b29a      	uxth	r2, r3
    b6d2:	2314      	movs	r3, #20
    b6d4:	18fb      	adds	r3, r7, r3
    b6d6:	0011      	movs	r1, r2
    b6d8:	0018      	movs	r0, r3
    b6da:	4b12      	ldr	r3, [pc, #72]	; (b724 <spi_cmd+0x328>)
    b6dc:	4798      	blx	r3
    b6de:	1e03      	subs	r3, r0, #0
    b6e0:	d012      	beq.n	b708 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    b6e2:	2328      	movs	r3, #40	; 0x28
    b6e4:	33ff      	adds	r3, #255	; 0xff
    b6e6:	001a      	movs	r2, r3
    b6e8:	490f      	ldr	r1, [pc, #60]	; (b728 <spi_cmd+0x32c>)
    b6ea:	4b10      	ldr	r3, [pc, #64]	; (b72c <spi_cmd+0x330>)
    b6ec:	0018      	movs	r0, r3
    b6ee:	4b10      	ldr	r3, [pc, #64]	; (b730 <spi_cmd+0x334>)
    b6f0:	4798      	blx	r3
    b6f2:	4b10      	ldr	r3, [pc, #64]	; (b734 <spi_cmd+0x338>)
    b6f4:	0018      	movs	r0, r3
    b6f6:	4b10      	ldr	r3, [pc, #64]	; (b738 <spi_cmd+0x33c>)
    b6f8:	4798      	blx	r3
    b6fa:	200d      	movs	r0, #13
    b6fc:	4b0f      	ldr	r3, [pc, #60]	; (b73c <spi_cmd+0x340>)
    b6fe:	4798      	blx	r3
			result = N_FAIL;
    b700:	231e      	movs	r3, #30
    b702:	18fb      	adds	r3, r7, r3
    b704:	2200      	movs	r2, #0
    b706:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    b708:	231e      	movs	r3, #30
    b70a:	18fb      	adds	r3, r7, r3
    b70c:	781b      	ldrb	r3, [r3, #0]
    b70e:	b25b      	sxtb	r3, r3
}
    b710:	0018      	movs	r0, r3
    b712:	46bd      	mov	sp, r7
    b714:	b009      	add	sp, #36	; 0x24
    b716:	bd90      	pop	{r4, r7, pc}
    b718:	00019250 	.word	0x00019250
    b71c:	200000b0 	.word	0x200000b0
    b720:	0000b3ad 	.word	0x0000b3ad
    b724:	0000b339 	.word	0x0000b339
    b728:	0001928c 	.word	0x0001928c
    b72c:	00018cf8 	.word	0x00018cf8
    b730:	00016db1 	.word	0x00016db1
    b734:	00018d0c 	.word	0x00018d0c
    b738:	00016ed1 	.word	0x00016ed1
    b73c:	00016de5 	.word	0x00016de5

0000b740 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    b740:	b590      	push	{r4, r7, lr}
    b742:	b085      	sub	sp, #20
    b744:	af00      	add	r7, sp, #0
    b746:	0002      	movs	r2, r0
    b748:	1dfb      	adds	r3, r7, #7
    b74a:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    b74c:	230e      	movs	r3, #14
    b74e:	18fb      	adds	r3, r7, r3
    b750:	2201      	movs	r2, #1
    b752:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    b754:	4b31      	ldr	r3, [pc, #196]	; (b81c <spi_data_rsp+0xdc>)
    b756:	781b      	ldrb	r3, [r3, #0]
    b758:	2b00      	cmp	r3, #0
    b75a:	d104      	bne.n	b766 <spi_data_rsp+0x26>
		len = 2;
    b75c:	230f      	movs	r3, #15
    b75e:	18fb      	adds	r3, r7, r3
    b760:	2202      	movs	r2, #2
    b762:	701a      	strb	r2, [r3, #0]
    b764:	e003      	b.n	b76e <spi_data_rsp+0x2e>
	else
		len = 3;
    b766:	230f      	movs	r3, #15
    b768:	18fb      	adds	r3, r7, r3
    b76a:	2203      	movs	r2, #3
    b76c:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    b76e:	230f      	movs	r3, #15
    b770:	18fb      	adds	r3, r7, r3
    b772:	781b      	ldrb	r3, [r3, #0]
    b774:	b29a      	uxth	r2, r3
    b776:	2308      	movs	r3, #8
    b778:	18fb      	adds	r3, r7, r3
    b77a:	0011      	movs	r1, r2
    b77c:	0018      	movs	r0, r3
    b77e:	4b28      	ldr	r3, [pc, #160]	; (b820 <spi_data_rsp+0xe0>)
    b780:	4798      	blx	r3
    b782:	1e03      	subs	r3, r0, #0
    b784:	d013      	beq.n	b7ae <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    b786:	233c      	movs	r3, #60	; 0x3c
    b788:	33ff      	adds	r3, #255	; 0xff
    b78a:	001a      	movs	r2, r3
    b78c:	4925      	ldr	r1, [pc, #148]	; (b824 <spi_data_rsp+0xe4>)
    b78e:	4b26      	ldr	r3, [pc, #152]	; (b828 <spi_data_rsp+0xe8>)
    b790:	0018      	movs	r0, r3
    b792:	4b26      	ldr	r3, [pc, #152]	; (b82c <spi_data_rsp+0xec>)
    b794:	4798      	blx	r3
    b796:	4b26      	ldr	r3, [pc, #152]	; (b830 <spi_data_rsp+0xf0>)
    b798:	0018      	movs	r0, r3
    b79a:	4b26      	ldr	r3, [pc, #152]	; (b834 <spi_data_rsp+0xf4>)
    b79c:	4798      	blx	r3
    b79e:	200d      	movs	r0, #13
    b7a0:	4b25      	ldr	r3, [pc, #148]	; (b838 <spi_data_rsp+0xf8>)
    b7a2:	4798      	blx	r3
		result = N_FAIL;
    b7a4:	230e      	movs	r3, #14
    b7a6:	18fb      	adds	r3, r7, r3
    b7a8:	2200      	movs	r2, #0
    b7aa:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    b7ac:	e02e      	b.n	b80c <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    b7ae:	230f      	movs	r3, #15
    b7b0:	18fb      	adds	r3, r7, r3
    b7b2:	781b      	ldrb	r3, [r3, #0]
    b7b4:	3b01      	subs	r3, #1
    b7b6:	2208      	movs	r2, #8
    b7b8:	18ba      	adds	r2, r7, r2
    b7ba:	5cd3      	ldrb	r3, [r2, r3]
    b7bc:	2b00      	cmp	r3, #0
    b7be:	d108      	bne.n	b7d2 <spi_data_rsp+0x92>
    b7c0:	230f      	movs	r3, #15
    b7c2:	18fb      	adds	r3, r7, r3
    b7c4:	781b      	ldrb	r3, [r3, #0]
    b7c6:	3b02      	subs	r3, #2
    b7c8:	2208      	movs	r2, #8
    b7ca:	18ba      	adds	r2, r7, r2
    b7cc:	5cd3      	ldrb	r3, [r2, r3]
    b7ce:	2bc3      	cmp	r3, #195	; 0xc3
    b7d0:	d01c      	beq.n	b80c <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    b7d2:	23a1      	movs	r3, #161	; 0xa1
    b7d4:	005a      	lsls	r2, r3, #1
    b7d6:	4913      	ldr	r1, [pc, #76]	; (b824 <spi_data_rsp+0xe4>)
    b7d8:	4b13      	ldr	r3, [pc, #76]	; (b828 <spi_data_rsp+0xe8>)
    b7da:	0018      	movs	r0, r3
    b7dc:	4b13      	ldr	r3, [pc, #76]	; (b82c <spi_data_rsp+0xec>)
    b7de:	4798      	blx	r3
    b7e0:	2308      	movs	r3, #8
    b7e2:	18fb      	adds	r3, r7, r3
    b7e4:	781b      	ldrb	r3, [r3, #0]
    b7e6:	0019      	movs	r1, r3
    b7e8:	2308      	movs	r3, #8
    b7ea:	18fb      	adds	r3, r7, r3
    b7ec:	785b      	ldrb	r3, [r3, #1]
    b7ee:	001a      	movs	r2, r3
    b7f0:	2308      	movs	r3, #8
    b7f2:	18fb      	adds	r3, r7, r3
    b7f4:	789b      	ldrb	r3, [r3, #2]
    b7f6:	4811      	ldr	r0, [pc, #68]	; (b83c <spi_data_rsp+0xfc>)
    b7f8:	4c0c      	ldr	r4, [pc, #48]	; (b82c <spi_data_rsp+0xec>)
    b7fa:	47a0      	blx	r4
    b7fc:	200d      	movs	r0, #13
    b7fe:	4b0e      	ldr	r3, [pc, #56]	; (b838 <spi_data_rsp+0xf8>)
    b800:	4798      	blx	r3
		result = N_FAIL;
    b802:	230e      	movs	r3, #14
    b804:	18fb      	adds	r3, r7, r3
    b806:	2200      	movs	r2, #0
    b808:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    b80a:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    b80c:	230e      	movs	r3, #14
    b80e:	18fb      	adds	r3, r7, r3
    b810:	781b      	ldrb	r3, [r3, #0]
    b812:	b25b      	sxtb	r3, r3
}
    b814:	0018      	movs	r0, r3
    b816:	46bd      	mov	sp, r7
    b818:	b005      	add	sp, #20
    b81a:	bd90      	pop	{r4, r7, pc}
    b81c:	200000b0 	.word	0x200000b0
    b820:	0000b2f5 	.word	0x0000b2f5
    b824:	00019294 	.word	0x00019294
    b828:	00018cf8 	.word	0x00018cf8
    b82c:	00016db1 	.word	0x00016db1
    b830:	00018d38 	.word	0x00018d38
    b834:	00016ed1 	.word	0x00016ed1
    b838:	00016de5 	.word	0x00016de5
    b83c:	00018d58 	.word	0x00018d58

0000b840 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    b840:	b580      	push	{r7, lr}
    b842:	b084      	sub	sp, #16
    b844:	af00      	add	r7, sp, #0
    b846:	0002      	movs	r2, r0
    b848:	1dfb      	adds	r3, r7, #7
    b84a:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    b84c:	230f      	movs	r3, #15
    b84e:	18fb      	adds	r3, r7, r3
    b850:	2201      	movs	r2, #1
    b852:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    b854:	1dfb      	adds	r3, r7, #7
    b856:	781b      	ldrb	r3, [r3, #0]
    b858:	2bcf      	cmp	r3, #207	; 0xcf
    b85a:	d007      	beq.n	b86c <spi_cmd_rsp+0x2c>
    b85c:	1dfb      	adds	r3, r7, #7
    b85e:	781b      	ldrb	r3, [r3, #0]
    b860:	2bc5      	cmp	r3, #197	; 0xc5
    b862:	d003      	beq.n	b86c <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    b864:	1dfb      	adds	r3, r7, #7
    b866:	781b      	ldrb	r3, [r3, #0]
    b868:	2bc6      	cmp	r3, #198	; 0xc6
    b86a:	d10c      	bne.n	b886 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b86c:	230d      	movs	r3, #13
    b86e:	18fb      	adds	r3, r7, r3
    b870:	2101      	movs	r1, #1
    b872:	0018      	movs	r0, r3
    b874:	4b39      	ldr	r3, [pc, #228]	; (b95c <spi_cmd_rsp+0x11c>)
    b876:	4798      	blx	r3
    b878:	1e03      	subs	r3, r0, #0
    b87a:	d004      	beq.n	b886 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    b87c:	230f      	movs	r3, #15
    b87e:	18fb      	adds	r3, r7, r3
    b880:	2200      	movs	r2, #0
    b882:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    b884:	e061      	b.n	b94a <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    b886:	230e      	movs	r3, #14
    b888:	18fb      	adds	r3, r7, r3
    b88a:	220a      	movs	r2, #10
    b88c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b88e:	230d      	movs	r3, #13
    b890:	18fb      	adds	r3, r7, r3
    b892:	2101      	movs	r1, #1
    b894:	0018      	movs	r0, r3
    b896:	4b31      	ldr	r3, [pc, #196]	; (b95c <spi_cmd_rsp+0x11c>)
    b898:	4798      	blx	r3
    b89a:	1e03      	subs	r3, r0, #0
    b89c:	d012      	beq.n	b8c4 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    b89e:	23b1      	movs	r3, #177	; 0xb1
    b8a0:	005a      	lsls	r2, r3, #1
    b8a2:	492f      	ldr	r1, [pc, #188]	; (b960 <spi_cmd_rsp+0x120>)
    b8a4:	4b2f      	ldr	r3, [pc, #188]	; (b964 <spi_cmd_rsp+0x124>)
    b8a6:	0018      	movs	r0, r3
    b8a8:	4b2f      	ldr	r3, [pc, #188]	; (b968 <spi_cmd_rsp+0x128>)
    b8aa:	4798      	blx	r3
    b8ac:	4b2f      	ldr	r3, [pc, #188]	; (b96c <spi_cmd_rsp+0x12c>)
    b8ae:	0018      	movs	r0, r3
    b8b0:	4b2f      	ldr	r3, [pc, #188]	; (b970 <spi_cmd_rsp+0x130>)
    b8b2:	4798      	blx	r3
    b8b4:	200d      	movs	r0, #13
    b8b6:	4b2f      	ldr	r3, [pc, #188]	; (b974 <spi_cmd_rsp+0x134>)
    b8b8:	4798      	blx	r3
			result = N_FAIL;
    b8ba:	230f      	movs	r3, #15
    b8bc:	18fb      	adds	r3, r7, r3
    b8be:	2200      	movs	r2, #0
    b8c0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    b8c2:	e042      	b.n	b94a <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    b8c4:	230d      	movs	r3, #13
    b8c6:	18fb      	adds	r3, r7, r3
    b8c8:	781b      	ldrb	r3, [r3, #0]
    b8ca:	1dfa      	adds	r2, r7, #7
    b8cc:	7812      	ldrb	r2, [r2, #0]
    b8ce:	429a      	cmp	r2, r3
    b8d0:	d00b      	beq.n	b8ea <spi_cmd_rsp+0xaa>
    b8d2:	230e      	movs	r3, #14
    b8d4:	18fb      	adds	r3, r7, r3
    b8d6:	781b      	ldrb	r3, [r3, #0]
    b8d8:	b25b      	sxtb	r3, r3
    b8da:	b2da      	uxtb	r2, r3
    b8dc:	3a01      	subs	r2, #1
    b8de:	b2d1      	uxtb	r1, r2
    b8e0:	220e      	movs	r2, #14
    b8e2:	18ba      	adds	r2, r7, r2
    b8e4:	7011      	strb	r1, [r2, #0]
    b8e6:	2b00      	cmp	r3, #0
    b8e8:	dcd1      	bgt.n	b88e <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    b8ea:	230e      	movs	r3, #14
    b8ec:	18fb      	adds	r3, r7, r3
    b8ee:	220a      	movs	r2, #10
    b8f0:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b8f2:	230d      	movs	r3, #13
    b8f4:	18fb      	adds	r3, r7, r3
    b8f6:	2101      	movs	r1, #1
    b8f8:	0018      	movs	r0, r3
    b8fa:	4b18      	ldr	r3, [pc, #96]	; (b95c <spi_cmd_rsp+0x11c>)
    b8fc:	4798      	blx	r3
    b8fe:	1e03      	subs	r3, r0, #0
    b900:	d012      	beq.n	b928 <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    b902:	23b8      	movs	r3, #184	; 0xb8
    b904:	005a      	lsls	r2, r3, #1
    b906:	4916      	ldr	r1, [pc, #88]	; (b960 <spi_cmd_rsp+0x120>)
    b908:	4b16      	ldr	r3, [pc, #88]	; (b964 <spi_cmd_rsp+0x124>)
    b90a:	0018      	movs	r0, r3
    b90c:	4b16      	ldr	r3, [pc, #88]	; (b968 <spi_cmd_rsp+0x128>)
    b90e:	4798      	blx	r3
    b910:	4b16      	ldr	r3, [pc, #88]	; (b96c <spi_cmd_rsp+0x12c>)
    b912:	0018      	movs	r0, r3
    b914:	4b16      	ldr	r3, [pc, #88]	; (b970 <spi_cmd_rsp+0x130>)
    b916:	4798      	blx	r3
    b918:	200d      	movs	r0, #13
    b91a:	4b16      	ldr	r3, [pc, #88]	; (b974 <spi_cmd_rsp+0x134>)
    b91c:	4798      	blx	r3
			result = N_FAIL;
    b91e:	230f      	movs	r3, #15
    b920:	18fb      	adds	r3, r7, r3
    b922:	2200      	movs	r2, #0
    b924:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    b926:	e010      	b.n	b94a <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    b928:	230d      	movs	r3, #13
    b92a:	18fb      	adds	r3, r7, r3
    b92c:	781b      	ldrb	r3, [r3, #0]
    b92e:	2b00      	cmp	r3, #0
    b930:	d00b      	beq.n	b94a <spi_cmd_rsp+0x10a>
    b932:	230e      	movs	r3, #14
    b934:	18fb      	adds	r3, r7, r3
    b936:	781b      	ldrb	r3, [r3, #0]
    b938:	b25b      	sxtb	r3, r3
    b93a:	b2da      	uxtb	r2, r3
    b93c:	3a01      	subs	r2, #1
    b93e:	b2d1      	uxtb	r1, r2
    b940:	220e      	movs	r2, #14
    b942:	18ba      	adds	r2, r7, r2
    b944:	7011      	strb	r1, [r2, #0]
    b946:	2b00      	cmp	r3, #0
    b948:	dcd3      	bgt.n	b8f2 <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    b94a:	230f      	movs	r3, #15
    b94c:	18fb      	adds	r3, r7, r3
    b94e:	781b      	ldrb	r3, [r3, #0]
    b950:	b25b      	sxtb	r3, r3
}
    b952:	0018      	movs	r0, r3
    b954:	46bd      	mov	sp, r7
    b956:	b004      	add	sp, #16
    b958:	bd80      	pop	{r7, pc}
    b95a:	46c0      	nop			; (mov r8, r8)
    b95c:	0000b2f5 	.word	0x0000b2f5
    b960:	000192a4 	.word	0x000192a4
    b964:	00018cf8 	.word	0x00018cf8
    b968:	00016db1 	.word	0x00016db1
    b96c:	00018d88 	.word	0x00018d88
    b970:	00016ed1 	.word	0x00016ed1
    b974:	00016de5 	.word	0x00016de5

0000b978 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    b978:	b580      	push	{r7, lr}
    b97a:	b086      	sub	sp, #24
    b97c:	af00      	add	r7, sp, #0
    b97e:	6078      	str	r0, [r7, #4]
    b980:	0008      	movs	r0, r1
    b982:	0011      	movs	r1, r2
    b984:	1cbb      	adds	r3, r7, #2
    b986:	1c02      	adds	r2, r0, #0
    b988:	801a      	strh	r2, [r3, #0]
    b98a:	1c7b      	adds	r3, r7, #1
    b98c:	1c0a      	adds	r2, r1, #0
    b98e:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    b990:	2311      	movs	r3, #17
    b992:	18fb      	adds	r3, r7, r3
    b994:	2201      	movs	r2, #1
    b996:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    b998:	2314      	movs	r3, #20
    b99a:	18fb      	adds	r3, r7, r3
    b99c:	2200      	movs	r2, #0
    b99e:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    b9a0:	1cbb      	adds	r3, r7, #2
    b9a2:	881a      	ldrh	r2, [r3, #0]
    b9a4:	2380      	movs	r3, #128	; 0x80
    b9a6:	019b      	lsls	r3, r3, #6
    b9a8:	429a      	cmp	r2, r3
    b9aa:	d805      	bhi.n	b9b8 <spi_data_read+0x40>
			nbytes = sz;
    b9ac:	2312      	movs	r3, #18
    b9ae:	18fb      	adds	r3, r7, r3
    b9b0:	1cba      	adds	r2, r7, #2
    b9b2:	8812      	ldrh	r2, [r2, #0]
    b9b4:	801a      	strh	r2, [r3, #0]
    b9b6:	e004      	b.n	b9c2 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    b9b8:	2312      	movs	r3, #18
    b9ba:	18fb      	adds	r3, r7, r3
    b9bc:	2280      	movs	r2, #128	; 0x80
    b9be:	0192      	lsls	r2, r2, #6
    b9c0:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    b9c2:	2316      	movs	r3, #22
    b9c4:	18fb      	adds	r3, r7, r3
    b9c6:	220a      	movs	r2, #10
    b9c8:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    b9ca:	230b      	movs	r3, #11
    b9cc:	18fb      	adds	r3, r7, r3
    b9ce:	2101      	movs	r1, #1
    b9d0:	0018      	movs	r0, r3
    b9d2:	4b5c      	ldr	r3, [pc, #368]	; (bb44 <spi_data_read+0x1cc>)
    b9d4:	4798      	blx	r3
    b9d6:	1e03      	subs	r3, r0, #0
    b9d8:	d011      	beq.n	b9fe <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    b9da:	4a5b      	ldr	r2, [pc, #364]	; (bb48 <spi_data_read+0x1d0>)
    b9dc:	495b      	ldr	r1, [pc, #364]	; (bb4c <spi_data_read+0x1d4>)
    b9de:	4b5c      	ldr	r3, [pc, #368]	; (bb50 <spi_data_read+0x1d8>)
    b9e0:	0018      	movs	r0, r3
    b9e2:	4b5c      	ldr	r3, [pc, #368]	; (bb54 <spi_data_read+0x1dc>)
    b9e4:	4798      	blx	r3
    b9e6:	4b5c      	ldr	r3, [pc, #368]	; (bb58 <spi_data_read+0x1e0>)
    b9e8:	0018      	movs	r0, r3
    b9ea:	4b5c      	ldr	r3, [pc, #368]	; (bb5c <spi_data_read+0x1e4>)
    b9ec:	4798      	blx	r3
    b9ee:	200d      	movs	r0, #13
    b9f0:	4b5b      	ldr	r3, [pc, #364]	; (bb60 <spi_data_read+0x1e8>)
    b9f2:	4798      	blx	r3
				result = N_FAIL;
    b9f4:	2311      	movs	r3, #17
    b9f6:	18fb      	adds	r3, r7, r3
    b9f8:	2200      	movs	r2, #0
    b9fa:	701a      	strb	r2, [r3, #0]
				break;
    b9fc:	e017      	b.n	ba2e <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    b9fe:	230b      	movs	r3, #11
    ba00:	18fb      	adds	r3, r7, r3
    ba02:	781b      	ldrb	r3, [r3, #0]
    ba04:	091b      	lsrs	r3, r3, #4
    ba06:	b2db      	uxtb	r3, r3
    ba08:	001a      	movs	r2, r3
    ba0a:	230f      	movs	r3, #15
    ba0c:	4013      	ands	r3, r2
    ba0e:	2b0f      	cmp	r3, #15
    ba10:	d00c      	beq.n	ba2c <spi_data_read+0xb4>
				break;
		} while (retry--);
    ba12:	2316      	movs	r3, #22
    ba14:	18fb      	adds	r3, r7, r3
    ba16:	2200      	movs	r2, #0
    ba18:	5e9b      	ldrsh	r3, [r3, r2]
    ba1a:	b29a      	uxth	r2, r3
    ba1c:	3a01      	subs	r2, #1
    ba1e:	b291      	uxth	r1, r2
    ba20:	2216      	movs	r2, #22
    ba22:	18ba      	adds	r2, r7, r2
    ba24:	8011      	strh	r1, [r2, #0]
    ba26:	2b00      	cmp	r3, #0
    ba28:	d1cf      	bne.n	b9ca <spi_data_read+0x52>
    ba2a:	e000      	b.n	ba2e <spi_data_read+0xb6>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    ba2c:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    ba2e:	2311      	movs	r3, #17
    ba30:	18fb      	adds	r3, r7, r3
    ba32:	781b      	ldrb	r3, [r3, #0]
    ba34:	b25b      	sxtb	r3, r3
    ba36:	2b00      	cmp	r3, #0
    ba38:	d100      	bne.n	ba3c <spi_data_read+0xc4>
    ba3a:	e079      	b.n	bb30 <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    ba3c:	2316      	movs	r3, #22
    ba3e:	18fb      	adds	r3, r7, r3
    ba40:	2200      	movs	r2, #0
    ba42:	5e9b      	ldrsh	r3, [r3, r2]
    ba44:	2b00      	cmp	r3, #0
    ba46:	dc16      	bgt.n	ba76 <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    ba48:	4a46      	ldr	r2, [pc, #280]	; (bb64 <spi_data_read+0x1ec>)
    ba4a:	4940      	ldr	r1, [pc, #256]	; (bb4c <spi_data_read+0x1d4>)
    ba4c:	4b40      	ldr	r3, [pc, #256]	; (bb50 <spi_data_read+0x1d8>)
    ba4e:	0018      	movs	r0, r3
    ba50:	4b40      	ldr	r3, [pc, #256]	; (bb54 <spi_data_read+0x1dc>)
    ba52:	4798      	blx	r3
    ba54:	230b      	movs	r3, #11
    ba56:	18fb      	adds	r3, r7, r3
    ba58:	781b      	ldrb	r3, [r3, #0]
    ba5a:	001a      	movs	r2, r3
    ba5c:	4b42      	ldr	r3, [pc, #264]	; (bb68 <spi_data_read+0x1f0>)
    ba5e:	0011      	movs	r1, r2
    ba60:	0018      	movs	r0, r3
    ba62:	4b3c      	ldr	r3, [pc, #240]	; (bb54 <spi_data_read+0x1dc>)
    ba64:	4798      	blx	r3
    ba66:	200d      	movs	r0, #13
    ba68:	4b3d      	ldr	r3, [pc, #244]	; (bb60 <spi_data_read+0x1e8>)
    ba6a:	4798      	blx	r3
			result = N_FAIL;
    ba6c:	2311      	movs	r3, #17
    ba6e:	18fb      	adds	r3, r7, r3
    ba70:	2200      	movs	r2, #0
    ba72:	701a      	strb	r2, [r3, #0]
			break;
    ba74:	e05d      	b.n	bb32 <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    ba76:	2314      	movs	r3, #20
    ba78:	18fb      	adds	r3, r7, r3
    ba7a:	2200      	movs	r2, #0
    ba7c:	5e9b      	ldrsh	r3, [r3, r2]
    ba7e:	687a      	ldr	r2, [r7, #4]
    ba80:	18d2      	adds	r2, r2, r3
    ba82:	2312      	movs	r3, #18
    ba84:	18fb      	adds	r3, r7, r3
    ba86:	881b      	ldrh	r3, [r3, #0]
    ba88:	0019      	movs	r1, r3
    ba8a:	0010      	movs	r0, r2
    ba8c:	4b2d      	ldr	r3, [pc, #180]	; (bb44 <spi_data_read+0x1cc>)
    ba8e:	4798      	blx	r3
    ba90:	1e03      	subs	r3, r0, #0
    ba92:	d012      	beq.n	baba <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    ba94:	23c5      	movs	r3, #197	; 0xc5
    ba96:	009a      	lsls	r2, r3, #2
    ba98:	492c      	ldr	r1, [pc, #176]	; (bb4c <spi_data_read+0x1d4>)
    ba9a:	4b2d      	ldr	r3, [pc, #180]	; (bb50 <spi_data_read+0x1d8>)
    ba9c:	0018      	movs	r0, r3
    ba9e:	4b2d      	ldr	r3, [pc, #180]	; (bb54 <spi_data_read+0x1dc>)
    baa0:	4798      	blx	r3
    baa2:	4b32      	ldr	r3, [pc, #200]	; (bb6c <spi_data_read+0x1f4>)
    baa4:	0018      	movs	r0, r3
    baa6:	4b2d      	ldr	r3, [pc, #180]	; (bb5c <spi_data_read+0x1e4>)
    baa8:	4798      	blx	r3
    baaa:	200d      	movs	r0, #13
    baac:	4b2c      	ldr	r3, [pc, #176]	; (bb60 <spi_data_read+0x1e8>)
    baae:	4798      	blx	r3
			result = N_FAIL;
    bab0:	2311      	movs	r3, #17
    bab2:	18fb      	adds	r3, r7, r3
    bab4:	2200      	movs	r2, #0
    bab6:	701a      	strb	r2, [r3, #0]
			break;
    bab8:	e03b      	b.n	bb32 <spi_data_read+0x1ba>
		}
		if(!clockless)
    baba:	1c7b      	adds	r3, r7, #1
    babc:	781b      	ldrb	r3, [r3, #0]
    babe:	2b00      	cmp	r3, #0
    bac0:	d11d      	bne.n	bafe <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    bac2:	4b2b      	ldr	r3, [pc, #172]	; (bb70 <spi_data_read+0x1f8>)
    bac4:	781b      	ldrb	r3, [r3, #0]
    bac6:	2b00      	cmp	r3, #0
    bac8:	d119      	bne.n	bafe <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    baca:	230c      	movs	r3, #12
    bacc:	18fb      	adds	r3, r7, r3
    bace:	2102      	movs	r1, #2
    bad0:	0018      	movs	r0, r3
    bad2:	4b1c      	ldr	r3, [pc, #112]	; (bb44 <spi_data_read+0x1cc>)
    bad4:	4798      	blx	r3
    bad6:	1e03      	subs	r3, r0, #0
    bad8:	d011      	beq.n	bafe <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    bada:	4a26      	ldr	r2, [pc, #152]	; (bb74 <spi_data_read+0x1fc>)
    badc:	491b      	ldr	r1, [pc, #108]	; (bb4c <spi_data_read+0x1d4>)
    bade:	4b1c      	ldr	r3, [pc, #112]	; (bb50 <spi_data_read+0x1d8>)
    bae0:	0018      	movs	r0, r3
    bae2:	4b1c      	ldr	r3, [pc, #112]	; (bb54 <spi_data_read+0x1dc>)
    bae4:	4798      	blx	r3
    bae6:	4b24      	ldr	r3, [pc, #144]	; (bb78 <spi_data_read+0x200>)
    bae8:	0018      	movs	r0, r3
    baea:	4b1c      	ldr	r3, [pc, #112]	; (bb5c <spi_data_read+0x1e4>)
    baec:	4798      	blx	r3
    baee:	200d      	movs	r0, #13
    baf0:	4b1b      	ldr	r3, [pc, #108]	; (bb60 <spi_data_read+0x1e8>)
    baf2:	4798      	blx	r3
					result = N_FAIL;
    baf4:	2311      	movs	r3, #17
    baf6:	18fb      	adds	r3, r7, r3
    baf8:	2200      	movs	r2, #0
    bafa:	701a      	strb	r2, [r3, #0]
					break;
    bafc:	e019      	b.n	bb32 <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    bafe:	2314      	movs	r3, #20
    bb00:	18fb      	adds	r3, r7, r3
    bb02:	881a      	ldrh	r2, [r3, #0]
    bb04:	2312      	movs	r3, #18
    bb06:	18fb      	adds	r3, r7, r3
    bb08:	881b      	ldrh	r3, [r3, #0]
    bb0a:	18d3      	adds	r3, r2, r3
    bb0c:	b29a      	uxth	r2, r3
    bb0e:	2314      	movs	r3, #20
    bb10:	18fb      	adds	r3, r7, r3
    bb12:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    bb14:	2312      	movs	r3, #18
    bb16:	18fb      	adds	r3, r7, r3
    bb18:	881a      	ldrh	r2, [r3, #0]
    bb1a:	1cbb      	adds	r3, r7, #2
    bb1c:	1cb9      	adds	r1, r7, #2
    bb1e:	8809      	ldrh	r1, [r1, #0]
    bb20:	1a8a      	subs	r2, r1, r2
    bb22:	801a      	strh	r2, [r3, #0]

	} while (sz);
    bb24:	1cbb      	adds	r3, r7, #2
    bb26:	881b      	ldrh	r3, [r3, #0]
    bb28:	2b00      	cmp	r3, #0
    bb2a:	d000      	beq.n	bb2e <spi_data_read+0x1b6>
    bb2c:	e738      	b.n	b9a0 <spi_data_read+0x28>
    bb2e:	e000      	b.n	bb32 <spi_data_read+0x1ba>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    bb30:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    bb32:	2311      	movs	r3, #17
    bb34:	18fb      	adds	r3, r7, r3
    bb36:	781b      	ldrb	r3, [r3, #0]
    bb38:	b25b      	sxtb	r3, r3
}
    bb3a:	0018      	movs	r0, r3
    bb3c:	46bd      	mov	sp, r7
    bb3e:	b006      	add	sp, #24
    bb40:	bd80      	pop	{r7, pc}
    bb42:	46c0      	nop			; (mov r8, r8)
    bb44:	0000b2f5 	.word	0x0000b2f5
    bb48:	000002ff 	.word	0x000002ff
    bb4c:	000192b0 	.word	0x000192b0
    bb50:	00018cf8 	.word	0x00018cf8
    bb54:	00016db1 	.word	0x00016db1
    bb58:	00018dbc 	.word	0x00018dbc
    bb5c:	00016ed1 	.word	0x00016ed1
    bb60:	00016de5 	.word	0x00016de5
    bb64:	0000030b 	.word	0x0000030b
    bb68:	00018df0 	.word	0x00018df0
    bb6c:	00018e20 	.word	0x00018e20
    bb70:	200000b0 	.word	0x200000b0
    bb74:	0000031f 	.word	0x0000031f
    bb78:	00018e50 	.word	0x00018e50

0000bb7c <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    bb7c:	b580      	push	{r7, lr}
    bb7e:	b086      	sub	sp, #24
    bb80:	af00      	add	r7, sp, #0
    bb82:	6078      	str	r0, [r7, #4]
    bb84:	000a      	movs	r2, r1
    bb86:	1cbb      	adds	r3, r7, #2
    bb88:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    bb8a:	2313      	movs	r3, #19
    bb8c:	18fb      	adds	r3, r7, r3
    bb8e:	2201      	movs	r2, #1
    bb90:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    bb92:	230c      	movs	r3, #12
    bb94:	18fb      	adds	r3, r7, r3
    bb96:	2200      	movs	r2, #0
    bb98:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    bb9a:	2316      	movs	r3, #22
    bb9c:	18fb      	adds	r3, r7, r3
    bb9e:	2200      	movs	r2, #0
    bba0:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    bba2:	1cbb      	adds	r3, r7, #2
    bba4:	881a      	ldrh	r2, [r3, #0]
    bba6:	2380      	movs	r3, #128	; 0x80
    bba8:	019b      	lsls	r3, r3, #6
    bbaa:	429a      	cmp	r2, r3
    bbac:	d805      	bhi.n	bbba <spi_data_write+0x3e>
			nbytes = sz;
    bbae:	2314      	movs	r3, #20
    bbb0:	18fb      	adds	r3, r7, r3
    bbb2:	1cba      	adds	r2, r7, #2
    bbb4:	8812      	ldrh	r2, [r2, #0]
    bbb6:	801a      	strh	r2, [r3, #0]
    bbb8:	e004      	b.n	bbc4 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    bbba:	2314      	movs	r3, #20
    bbbc:	18fb      	adds	r3, r7, r3
    bbbe:	2280      	movs	r2, #128	; 0x80
    bbc0:	0192      	lsls	r2, r2, #6
    bbc2:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    bbc4:	2311      	movs	r3, #17
    bbc6:	18fb      	adds	r3, r7, r3
    bbc8:	22f0      	movs	r2, #240	; 0xf0
    bbca:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    bbcc:	2316      	movs	r3, #22
    bbce:	18fb      	adds	r3, r7, r3
    bbd0:	2200      	movs	r2, #0
    bbd2:	5e9b      	ldrsh	r3, [r3, r2]
    bbd4:	2b00      	cmp	r3, #0
    bbd6:	d10f      	bne.n	bbf8 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    bbd8:	1cbb      	adds	r3, r7, #2
    bbda:	881a      	ldrh	r2, [r3, #0]
    bbdc:	2380      	movs	r3, #128	; 0x80
    bbde:	019b      	lsls	r3, r3, #6
    bbe0:	429a      	cmp	r2, r3
    bbe2:	d804      	bhi.n	bbee <spi_data_write+0x72>
				order = 0x3;
    bbe4:	2312      	movs	r3, #18
    bbe6:	18fb      	adds	r3, r7, r3
    bbe8:	2203      	movs	r2, #3
    bbea:	701a      	strb	r2, [r3, #0]
    bbec:	e013      	b.n	bc16 <spi_data_write+0x9a>
			else
				order = 0x1;
    bbee:	2312      	movs	r3, #18
    bbf0:	18fb      	adds	r3, r7, r3
    bbf2:	2201      	movs	r2, #1
    bbf4:	701a      	strb	r2, [r3, #0]
    bbf6:	e00e      	b.n	bc16 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    bbf8:	1cbb      	adds	r3, r7, #2
    bbfa:	881a      	ldrh	r2, [r3, #0]
    bbfc:	2380      	movs	r3, #128	; 0x80
    bbfe:	019b      	lsls	r3, r3, #6
    bc00:	429a      	cmp	r2, r3
    bc02:	d804      	bhi.n	bc0e <spi_data_write+0x92>
				order = 0x3;
    bc04:	2312      	movs	r3, #18
    bc06:	18fb      	adds	r3, r7, r3
    bc08:	2203      	movs	r2, #3
    bc0a:	701a      	strb	r2, [r3, #0]
    bc0c:	e003      	b.n	bc16 <spi_data_write+0x9a>
			else
				order = 0x2;
    bc0e:	2312      	movs	r3, #18
    bc10:	18fb      	adds	r3, r7, r3
    bc12:	2202      	movs	r2, #2
    bc14:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    bc16:	2311      	movs	r3, #17
    bc18:	18fb      	adds	r3, r7, r3
    bc1a:	781a      	ldrb	r2, [r3, #0]
    bc1c:	2312      	movs	r3, #18
    bc1e:	18fb      	adds	r3, r7, r3
    bc20:	781b      	ldrb	r3, [r3, #0]
    bc22:	4313      	orrs	r3, r2
    bc24:	b2da      	uxtb	r2, r3
    bc26:	2311      	movs	r3, #17
    bc28:	18fb      	adds	r3, r7, r3
    bc2a:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    bc2c:	2311      	movs	r3, #17
    bc2e:	18fb      	adds	r3, r7, r3
    bc30:	2101      	movs	r1, #1
    bc32:	0018      	movs	r0, r3
    bc34:	4b3a      	ldr	r3, [pc, #232]	; (bd20 <spi_data_write+0x1a4>)
    bc36:	4798      	blx	r3
    bc38:	1e03      	subs	r3, r0, #0
    bc3a:	d012      	beq.n	bc62 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    bc3c:	23d4      	movs	r3, #212	; 0xd4
    bc3e:	009a      	lsls	r2, r3, #2
    bc40:	4938      	ldr	r1, [pc, #224]	; (bd24 <spi_data_write+0x1a8>)
    bc42:	4b39      	ldr	r3, [pc, #228]	; (bd28 <spi_data_write+0x1ac>)
    bc44:	0018      	movs	r0, r3
    bc46:	4b39      	ldr	r3, [pc, #228]	; (bd2c <spi_data_write+0x1b0>)
    bc48:	4798      	blx	r3
    bc4a:	4b39      	ldr	r3, [pc, #228]	; (bd30 <spi_data_write+0x1b4>)
    bc4c:	0018      	movs	r0, r3
    bc4e:	4b39      	ldr	r3, [pc, #228]	; (bd34 <spi_data_write+0x1b8>)
    bc50:	4798      	blx	r3
    bc52:	200d      	movs	r0, #13
    bc54:	4b38      	ldr	r3, [pc, #224]	; (bd38 <spi_data_write+0x1bc>)
    bc56:	4798      	blx	r3
			result = N_FAIL;
    bc58:	2313      	movs	r3, #19
    bc5a:	18fb      	adds	r3, r7, r3
    bc5c:	2200      	movs	r2, #0
    bc5e:	701a      	strb	r2, [r3, #0]
			break;
    bc60:	e056      	b.n	bd10 <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    bc62:	2316      	movs	r3, #22
    bc64:	18fb      	adds	r3, r7, r3
    bc66:	2200      	movs	r2, #0
    bc68:	5e9b      	ldrsh	r3, [r3, r2]
    bc6a:	687a      	ldr	r2, [r7, #4]
    bc6c:	18d2      	adds	r2, r2, r3
    bc6e:	2314      	movs	r3, #20
    bc70:	18fb      	adds	r3, r7, r3
    bc72:	881b      	ldrh	r3, [r3, #0]
    bc74:	0019      	movs	r1, r3
    bc76:	0010      	movs	r0, r2
    bc78:	4b29      	ldr	r3, [pc, #164]	; (bd20 <spi_data_write+0x1a4>)
    bc7a:	4798      	blx	r3
    bc7c:	1e03      	subs	r3, r0, #0
    bc7e:	d011      	beq.n	bca4 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    bc80:	4a2e      	ldr	r2, [pc, #184]	; (bd3c <spi_data_write+0x1c0>)
    bc82:	4928      	ldr	r1, [pc, #160]	; (bd24 <spi_data_write+0x1a8>)
    bc84:	4b28      	ldr	r3, [pc, #160]	; (bd28 <spi_data_write+0x1ac>)
    bc86:	0018      	movs	r0, r3
    bc88:	4b28      	ldr	r3, [pc, #160]	; (bd2c <spi_data_write+0x1b0>)
    bc8a:	4798      	blx	r3
    bc8c:	4b2c      	ldr	r3, [pc, #176]	; (bd40 <spi_data_write+0x1c4>)
    bc8e:	0018      	movs	r0, r3
    bc90:	4b28      	ldr	r3, [pc, #160]	; (bd34 <spi_data_write+0x1b8>)
    bc92:	4798      	blx	r3
    bc94:	200d      	movs	r0, #13
    bc96:	4b28      	ldr	r3, [pc, #160]	; (bd38 <spi_data_write+0x1bc>)
    bc98:	4798      	blx	r3
			result = N_FAIL;
    bc9a:	2313      	movs	r3, #19
    bc9c:	18fb      	adds	r3, r7, r3
    bc9e:	2200      	movs	r2, #0
    bca0:	701a      	strb	r2, [r3, #0]
			break;
    bca2:	e035      	b.n	bd10 <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    bca4:	4b27      	ldr	r3, [pc, #156]	; (bd44 <spi_data_write+0x1c8>)
    bca6:	781b      	ldrb	r3, [r3, #0]
    bca8:	2b00      	cmp	r3, #0
    bcaa:	d119      	bne.n	bce0 <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    bcac:	230c      	movs	r3, #12
    bcae:	18fb      	adds	r3, r7, r3
    bcb0:	2102      	movs	r1, #2
    bcb2:	0018      	movs	r0, r3
    bcb4:	4b1a      	ldr	r3, [pc, #104]	; (bd20 <spi_data_write+0x1a4>)
    bcb6:	4798      	blx	r3
    bcb8:	1e03      	subs	r3, r0, #0
    bcba:	d011      	beq.n	bce0 <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    bcbc:	4a22      	ldr	r2, [pc, #136]	; (bd48 <spi_data_write+0x1cc>)
    bcbe:	4919      	ldr	r1, [pc, #100]	; (bd24 <spi_data_write+0x1a8>)
    bcc0:	4b19      	ldr	r3, [pc, #100]	; (bd28 <spi_data_write+0x1ac>)
    bcc2:	0018      	movs	r0, r3
    bcc4:	4b19      	ldr	r3, [pc, #100]	; (bd2c <spi_data_write+0x1b0>)
    bcc6:	4798      	blx	r3
    bcc8:	4b20      	ldr	r3, [pc, #128]	; (bd4c <spi_data_write+0x1d0>)
    bcca:	0018      	movs	r0, r3
    bccc:	4b19      	ldr	r3, [pc, #100]	; (bd34 <spi_data_write+0x1b8>)
    bcce:	4798      	blx	r3
    bcd0:	200d      	movs	r0, #13
    bcd2:	4b19      	ldr	r3, [pc, #100]	; (bd38 <spi_data_write+0x1bc>)
    bcd4:	4798      	blx	r3
				result = N_FAIL;
    bcd6:	2313      	movs	r3, #19
    bcd8:	18fb      	adds	r3, r7, r3
    bcda:	2200      	movs	r2, #0
    bcdc:	701a      	strb	r2, [r3, #0]
				break;
    bcde:	e017      	b.n	bd10 <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    bce0:	2316      	movs	r3, #22
    bce2:	18fb      	adds	r3, r7, r3
    bce4:	881a      	ldrh	r2, [r3, #0]
    bce6:	2314      	movs	r3, #20
    bce8:	18fb      	adds	r3, r7, r3
    bcea:	881b      	ldrh	r3, [r3, #0]
    bcec:	18d3      	adds	r3, r2, r3
    bcee:	b29a      	uxth	r2, r3
    bcf0:	2316      	movs	r3, #22
    bcf2:	18fb      	adds	r3, r7, r3
    bcf4:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    bcf6:	1cbb      	adds	r3, r7, #2
    bcf8:	1cb9      	adds	r1, r7, #2
    bcfa:	2214      	movs	r2, #20
    bcfc:	18ba      	adds	r2, r7, r2
    bcfe:	8809      	ldrh	r1, [r1, #0]
    bd00:	8812      	ldrh	r2, [r2, #0]
    bd02:	1a8a      	subs	r2, r1, r2
    bd04:	801a      	strh	r2, [r3, #0]
	} while (sz);
    bd06:	1cbb      	adds	r3, r7, #2
    bd08:	881b      	ldrh	r3, [r3, #0]
    bd0a:	2b00      	cmp	r3, #0
    bd0c:	d000      	beq.n	bd10 <spi_data_write+0x194>
    bd0e:	e748      	b.n	bba2 <spi_data_write+0x26>


	return result;
    bd10:	2313      	movs	r3, #19
    bd12:	18fb      	adds	r3, r7, r3
    bd14:	781b      	ldrb	r3, [r3, #0]
    bd16:	b25b      	sxtb	r3, r3
}
    bd18:	0018      	movs	r0, r3
    bd1a:	46bd      	mov	sp, r7
    bd1c:	b006      	add	sp, #24
    bd1e:	bd80      	pop	{r7, pc}
    bd20:	0000b339 	.word	0x0000b339
    bd24:	000192c0 	.word	0x000192c0
    bd28:	00018cf8 	.word	0x00018cf8
    bd2c:	00016db1 	.word	0x00016db1
    bd30:	00018e84 	.word	0x00018e84
    bd34:	00016ed1 	.word	0x00016ed1
    bd38:	00016de5 	.word	0x00016de5
    bd3c:	00000359 	.word	0x00000359
    bd40:	00018ebc 	.word	0x00018ebc
    bd44:	200000b0 	.word	0x200000b0
    bd48:	00000363 	.word	0x00000363
    bd4c:	00018ef0 	.word	0x00018ef0

0000bd50 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    bd50:	b5b0      	push	{r4, r5, r7, lr}
    bd52:	b086      	sub	sp, #24
    bd54:	af02      	add	r7, sp, #8
    bd56:	6078      	str	r0, [r7, #4]
    bd58:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    bd5a:	230f      	movs	r3, #15
    bd5c:	18fb      	adds	r3, r7, r3
    bd5e:	220a      	movs	r2, #10
    bd60:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    bd62:	230e      	movs	r3, #14
    bd64:	18fb      	adds	r3, r7, r3
    bd66:	2201      	movs	r2, #1
    bd68:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    bd6a:	230d      	movs	r3, #13
    bd6c:	18fb      	adds	r3, r7, r3
    bd6e:	22c9      	movs	r2, #201	; 0xc9
    bd70:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    bd72:	230c      	movs	r3, #12
    bd74:	18fb      	adds	r3, r7, r3
    bd76:	2200      	movs	r2, #0
    bd78:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    bd7a:	687b      	ldr	r3, [r7, #4]
    bd7c:	2b30      	cmp	r3, #48	; 0x30
    bd7e:	d808      	bhi.n	bd92 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    bd80:	230d      	movs	r3, #13
    bd82:	18fb      	adds	r3, r7, r3
    bd84:	22c3      	movs	r2, #195	; 0xc3
    bd86:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    bd88:	230c      	movs	r3, #12
    bd8a:	18fb      	adds	r3, r7, r3
    bd8c:	2201      	movs	r2, #1
    bd8e:	701a      	strb	r2, [r3, #0]
    bd90:	e007      	b.n	bda2 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    bd92:	230d      	movs	r3, #13
    bd94:	18fb      	adds	r3, r7, r3
    bd96:	22c9      	movs	r2, #201	; 0xc9
    bd98:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    bd9a:	230c      	movs	r3, #12
    bd9c:	18fb      	adds	r3, r7, r3
    bd9e:	2200      	movs	r2, #0
    bda0:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    bda2:	230e      	movs	r3, #14
    bda4:	18fc      	adds	r4, r7, r3
    bda6:	683a      	ldr	r2, [r7, #0]
    bda8:	6879      	ldr	r1, [r7, #4]
    bdaa:	230d      	movs	r3, #13
    bdac:	18fb      	adds	r3, r7, r3
    bdae:	7818      	ldrb	r0, [r3, #0]
    bdb0:	230c      	movs	r3, #12
    bdb2:	18fb      	adds	r3, r7, r3
    bdb4:	781b      	ldrb	r3, [r3, #0]
    bdb6:	9300      	str	r3, [sp, #0]
    bdb8:	2304      	movs	r3, #4
    bdba:	4d3c      	ldr	r5, [pc, #240]	; (beac <spi_write_reg+0x15c>)
    bdbc:	47a8      	blx	r5
    bdbe:	0003      	movs	r3, r0
    bdc0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    bdc2:	230e      	movs	r3, #14
    bdc4:	18fb      	adds	r3, r7, r3
    bdc6:	781b      	ldrb	r3, [r3, #0]
    bdc8:	b25b      	sxtb	r3, r3
    bdca:	2b01      	cmp	r3, #1
    bdcc:	d00f      	beq.n	bdee <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    bdce:	4a38      	ldr	r2, [pc, #224]	; (beb0 <spi_write_reg+0x160>)
    bdd0:	4938      	ldr	r1, [pc, #224]	; (beb4 <spi_write_reg+0x164>)
    bdd2:	4b39      	ldr	r3, [pc, #228]	; (beb8 <spi_write_reg+0x168>)
    bdd4:	0018      	movs	r0, r3
    bdd6:	4b39      	ldr	r3, [pc, #228]	; (bebc <spi_write_reg+0x16c>)
    bdd8:	4798      	blx	r3
    bdda:	687a      	ldr	r2, [r7, #4]
    bddc:	4b38      	ldr	r3, [pc, #224]	; (bec0 <spi_write_reg+0x170>)
    bdde:	0011      	movs	r1, r2
    bde0:	0018      	movs	r0, r3
    bde2:	4b36      	ldr	r3, [pc, #216]	; (bebc <spi_write_reg+0x16c>)
    bde4:	4798      	blx	r3
    bde6:	200d      	movs	r0, #13
    bde8:	4b36      	ldr	r3, [pc, #216]	; (bec4 <spi_write_reg+0x174>)
    bdea:	4798      	blx	r3
		goto _FAIL_;
    bdec:	e020      	b.n	be30 <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    bdee:	230e      	movs	r3, #14
    bdf0:	18fc      	adds	r4, r7, r3
    bdf2:	230d      	movs	r3, #13
    bdf4:	18fb      	adds	r3, r7, r3
    bdf6:	781b      	ldrb	r3, [r3, #0]
    bdf8:	0018      	movs	r0, r3
    bdfa:	4b33      	ldr	r3, [pc, #204]	; (bec8 <spi_write_reg+0x178>)
    bdfc:	4798      	blx	r3
    bdfe:	0003      	movs	r3, r0
    be00:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    be02:	230e      	movs	r3, #14
    be04:	18fb      	adds	r3, r7, r3
    be06:	781b      	ldrb	r3, [r3, #0]
    be08:	b25b      	sxtb	r3, r3
    be0a:	2b01      	cmp	r3, #1
    be0c:	d010      	beq.n	be30 <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    be0e:	23e7      	movs	r3, #231	; 0xe7
    be10:	009a      	lsls	r2, r3, #2
    be12:	4928      	ldr	r1, [pc, #160]	; (beb4 <spi_write_reg+0x164>)
    be14:	4b28      	ldr	r3, [pc, #160]	; (beb8 <spi_write_reg+0x168>)
    be16:	0018      	movs	r0, r3
    be18:	4b28      	ldr	r3, [pc, #160]	; (bebc <spi_write_reg+0x16c>)
    be1a:	4798      	blx	r3
    be1c:	687a      	ldr	r2, [r7, #4]
    be1e:	4b2b      	ldr	r3, [pc, #172]	; (becc <spi_write_reg+0x17c>)
    be20:	0011      	movs	r1, r2
    be22:	0018      	movs	r0, r3
    be24:	4b25      	ldr	r3, [pc, #148]	; (bebc <spi_write_reg+0x16c>)
    be26:	4798      	blx	r3
    be28:	200d      	movs	r0, #13
    be2a:	4b26      	ldr	r3, [pc, #152]	; (bec4 <spi_write_reg+0x174>)
    be2c:	4798      	blx	r3
		goto _FAIL_;
    be2e:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    be30:	230e      	movs	r3, #14
    be32:	18fb      	adds	r3, r7, r3
    be34:	781b      	ldrb	r3, [r3, #0]
    be36:	b25b      	sxtb	r3, r3
    be38:	2b01      	cmp	r3, #1
    be3a:	d02e      	beq.n	be9a <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    be3c:	2001      	movs	r0, #1
    be3e:	4b24      	ldr	r3, [pc, #144]	; (bed0 <spi_write_reg+0x180>)
    be40:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    be42:	2300      	movs	r3, #0
    be44:	9300      	str	r3, [sp, #0]
    be46:	2300      	movs	r3, #0
    be48:	2200      	movs	r2, #0
    be4a:	2100      	movs	r1, #0
    be4c:	20cf      	movs	r0, #207	; 0xcf
    be4e:	4c17      	ldr	r4, [pc, #92]	; (beac <spi_write_reg+0x15c>)
    be50:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    be52:	20cf      	movs	r0, #207	; 0xcf
    be54:	4b1c      	ldr	r3, [pc, #112]	; (bec8 <spi_write_reg+0x178>)
    be56:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    be58:	4a1e      	ldr	r2, [pc, #120]	; (bed4 <spi_write_reg+0x184>)
    be5a:	4916      	ldr	r1, [pc, #88]	; (beb4 <spi_write_reg+0x164>)
    be5c:	4b16      	ldr	r3, [pc, #88]	; (beb8 <spi_write_reg+0x168>)
    be5e:	0018      	movs	r0, r3
    be60:	4b16      	ldr	r3, [pc, #88]	; (bebc <spi_write_reg+0x16c>)
    be62:	4798      	blx	r3
    be64:	230f      	movs	r3, #15
    be66:	18fb      	adds	r3, r7, r3
    be68:	7819      	ldrb	r1, [r3, #0]
    be6a:	683b      	ldr	r3, [r7, #0]
    be6c:	687a      	ldr	r2, [r7, #4]
    be6e:	481a      	ldr	r0, [pc, #104]	; (bed8 <spi_write_reg+0x188>)
    be70:	4c12      	ldr	r4, [pc, #72]	; (bebc <spi_write_reg+0x16c>)
    be72:	47a0      	blx	r4
    be74:	200d      	movs	r0, #13
    be76:	4b13      	ldr	r3, [pc, #76]	; (bec4 <spi_write_reg+0x174>)
    be78:	4798      	blx	r3
		nm_bsp_sleep(1);
    be7a:	2001      	movs	r0, #1
    be7c:	4b14      	ldr	r3, [pc, #80]	; (bed0 <spi_write_reg+0x180>)
    be7e:	4798      	blx	r3
		retry--;
    be80:	230f      	movs	r3, #15
    be82:	18fb      	adds	r3, r7, r3
    be84:	781a      	ldrb	r2, [r3, #0]
    be86:	230f      	movs	r3, #15
    be88:	18fb      	adds	r3, r7, r3
    be8a:	3a01      	subs	r2, #1
    be8c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    be8e:	230f      	movs	r3, #15
    be90:	18fb      	adds	r3, r7, r3
    be92:	781b      	ldrb	r3, [r3, #0]
    be94:	2b00      	cmp	r3, #0
    be96:	d000      	beq.n	be9a <spi_write_reg+0x14a>
    be98:	e76f      	b.n	bd7a <spi_write_reg+0x2a>
	}

	return result;
    be9a:	230e      	movs	r3, #14
    be9c:	18fb      	adds	r3, r7, r3
    be9e:	781b      	ldrb	r3, [r3, #0]
    bea0:	b25b      	sxtb	r3, r3
}
    bea2:	0018      	movs	r0, r3
    bea4:	46bd      	mov	sp, r7
    bea6:	b004      	add	sp, #16
    bea8:	bdb0      	pop	{r4, r5, r7, pc}
    beaa:	46c0      	nop			; (mov r8, r8)
    beac:	0000b3fd 	.word	0x0000b3fd
    beb0:	00000396 	.word	0x00000396
    beb4:	000192d0 	.word	0x000192d0
    beb8:	00018cf8 	.word	0x00018cf8
    bebc:	00016db1 	.word	0x00016db1
    bec0:	00018f28 	.word	0x00018f28
    bec4:	00016de5 	.word	0x00016de5
    bec8:	0000b841 	.word	0x0000b841
    becc:	00018f54 	.word	0x00018f54
    bed0:	00008335 	.word	0x00008335
    bed4:	000003af 	.word	0x000003af
    bed8:	00018f8c 	.word	0x00018f8c

0000bedc <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    bedc:	b5b0      	push	{r4, r5, r7, lr}
    bede:	b088      	sub	sp, #32
    bee0:	af02      	add	r7, sp, #8
    bee2:	60f8      	str	r0, [r7, #12]
    bee4:	60b9      	str	r1, [r7, #8]
    bee6:	1dbb      	adds	r3, r7, #6
    bee8:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    beea:	2316      	movs	r3, #22
    beec:	18fb      	adds	r3, r7, r3
    beee:	220a      	movs	r2, #10
    bef0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    bef2:	2315      	movs	r3, #21
    bef4:	18fb      	adds	r3, r7, r3
    bef6:	22c7      	movs	r2, #199	; 0xc7
    bef8:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    befa:	1dbb      	adds	r3, r7, #6
    befc:	881b      	ldrh	r3, [r3, #0]
    befe:	2b01      	cmp	r3, #1
    bf00:	d102      	bne.n	bf08 <nm_spi_write+0x2c>
		size = 2;
    bf02:	1dbb      	adds	r3, r7, #6
    bf04:	2202      	movs	r2, #2
    bf06:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    bf08:	1dbb      	adds	r3, r7, #6
    bf0a:	881a      	ldrh	r2, [r3, #0]
    bf0c:	2317      	movs	r3, #23
    bf0e:	18fc      	adds	r4, r7, r3
    bf10:	68f9      	ldr	r1, [r7, #12]
    bf12:	2315      	movs	r3, #21
    bf14:	18fb      	adds	r3, r7, r3
    bf16:	7818      	ldrb	r0, [r3, #0]
    bf18:	2300      	movs	r3, #0
    bf1a:	9300      	str	r3, [sp, #0]
    bf1c:	0013      	movs	r3, r2
    bf1e:	2200      	movs	r2, #0
    bf20:	4d5b      	ldr	r5, [pc, #364]	; (c090 <nm_spi_write+0x1b4>)
    bf22:	47a8      	blx	r5
    bf24:	0003      	movs	r3, r0
    bf26:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    bf28:	2317      	movs	r3, #23
    bf2a:	18fb      	adds	r3, r7, r3
    bf2c:	781b      	ldrb	r3, [r3, #0]
    bf2e:	b25b      	sxtb	r3, r3
    bf30:	2b01      	cmp	r3, #1
    bf32:	d00f      	beq.n	bf54 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    bf34:	4a57      	ldr	r2, [pc, #348]	; (c094 <nm_spi_write+0x1b8>)
    bf36:	4958      	ldr	r1, [pc, #352]	; (c098 <nm_spi_write+0x1bc>)
    bf38:	4b58      	ldr	r3, [pc, #352]	; (c09c <nm_spi_write+0x1c0>)
    bf3a:	0018      	movs	r0, r3
    bf3c:	4b58      	ldr	r3, [pc, #352]	; (c0a0 <nm_spi_write+0x1c4>)
    bf3e:	4798      	blx	r3
    bf40:	68fa      	ldr	r2, [r7, #12]
    bf42:	4b58      	ldr	r3, [pc, #352]	; (c0a4 <nm_spi_write+0x1c8>)
    bf44:	0011      	movs	r1, r2
    bf46:	0018      	movs	r0, r3
    bf48:	4b55      	ldr	r3, [pc, #340]	; (c0a0 <nm_spi_write+0x1c4>)
    bf4a:	4798      	blx	r3
    bf4c:	200d      	movs	r0, #13
    bf4e:	4b56      	ldr	r3, [pc, #344]	; (c0a8 <nm_spi_write+0x1cc>)
    bf50:	4798      	blx	r3
		goto _FAIL_;
    bf52:	e05f      	b.n	c014 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    bf54:	2317      	movs	r3, #23
    bf56:	18fc      	adds	r4, r7, r3
    bf58:	2315      	movs	r3, #21
    bf5a:	18fb      	adds	r3, r7, r3
    bf5c:	781b      	ldrb	r3, [r3, #0]
    bf5e:	0018      	movs	r0, r3
    bf60:	4b52      	ldr	r3, [pc, #328]	; (c0ac <nm_spi_write+0x1d0>)
    bf62:	4798      	blx	r3
    bf64:	0003      	movs	r3, r0
    bf66:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    bf68:	2317      	movs	r3, #23
    bf6a:	18fb      	adds	r3, r7, r3
    bf6c:	781b      	ldrb	r3, [r3, #0]
    bf6e:	b25b      	sxtb	r3, r3
    bf70:	2b01      	cmp	r3, #1
    bf72:	d010      	beq.n	bf96 <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    bf74:	23f4      	movs	r3, #244	; 0xf4
    bf76:	009a      	lsls	r2, r3, #2
    bf78:	4947      	ldr	r1, [pc, #284]	; (c098 <nm_spi_write+0x1bc>)
    bf7a:	4b48      	ldr	r3, [pc, #288]	; (c09c <nm_spi_write+0x1c0>)
    bf7c:	0018      	movs	r0, r3
    bf7e:	4b48      	ldr	r3, [pc, #288]	; (c0a0 <nm_spi_write+0x1c4>)
    bf80:	4798      	blx	r3
    bf82:	68fa      	ldr	r2, [r7, #12]
    bf84:	4b4a      	ldr	r3, [pc, #296]	; (c0b0 <nm_spi_write+0x1d4>)
    bf86:	0011      	movs	r1, r2
    bf88:	0018      	movs	r0, r3
    bf8a:	4b45      	ldr	r3, [pc, #276]	; (c0a0 <nm_spi_write+0x1c4>)
    bf8c:	4798      	blx	r3
    bf8e:	200d      	movs	r0, #13
    bf90:	4b45      	ldr	r3, [pc, #276]	; (c0a8 <nm_spi_write+0x1cc>)
    bf92:	4798      	blx	r3
		goto _FAIL_;
    bf94:	e03e      	b.n	c014 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    bf96:	2317      	movs	r3, #23
    bf98:	18fc      	adds	r4, r7, r3
    bf9a:	1dbb      	adds	r3, r7, #6
    bf9c:	881a      	ldrh	r2, [r3, #0]
    bf9e:	68bb      	ldr	r3, [r7, #8]
    bfa0:	0011      	movs	r1, r2
    bfa2:	0018      	movs	r0, r3
    bfa4:	4b43      	ldr	r3, [pc, #268]	; (c0b4 <nm_spi_write+0x1d8>)
    bfa6:	4798      	blx	r3
    bfa8:	0003      	movs	r3, r0
    bfaa:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    bfac:	2317      	movs	r3, #23
    bfae:	18fb      	adds	r3, r7, r3
    bfb0:	781b      	ldrb	r3, [r3, #0]
    bfb2:	b25b      	sxtb	r3, r3
    bfb4:	2b01      	cmp	r3, #1
    bfb6:	d00e      	beq.n	bfd6 <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    bfb8:	23f8      	movs	r3, #248	; 0xf8
    bfba:	009a      	lsls	r2, r3, #2
    bfbc:	4936      	ldr	r1, [pc, #216]	; (c098 <nm_spi_write+0x1bc>)
    bfbe:	4b37      	ldr	r3, [pc, #220]	; (c09c <nm_spi_write+0x1c0>)
    bfc0:	0018      	movs	r0, r3
    bfc2:	4b37      	ldr	r3, [pc, #220]	; (c0a0 <nm_spi_write+0x1c4>)
    bfc4:	4798      	blx	r3
    bfc6:	4b3c      	ldr	r3, [pc, #240]	; (c0b8 <nm_spi_write+0x1dc>)
    bfc8:	0018      	movs	r0, r3
    bfca:	4b3c      	ldr	r3, [pc, #240]	; (c0bc <nm_spi_write+0x1e0>)
    bfcc:	4798      	blx	r3
    bfce:	200d      	movs	r0, #13
    bfd0:	4b35      	ldr	r3, [pc, #212]	; (c0a8 <nm_spi_write+0x1cc>)
    bfd2:	4798      	blx	r3
		goto _FAIL_;
    bfd4:	e01e      	b.n	c014 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    bfd6:	2317      	movs	r3, #23
    bfd8:	18fc      	adds	r4, r7, r3
    bfda:	2315      	movs	r3, #21
    bfdc:	18fb      	adds	r3, r7, r3
    bfde:	781b      	ldrb	r3, [r3, #0]
    bfe0:	0018      	movs	r0, r3
    bfe2:	4b37      	ldr	r3, [pc, #220]	; (c0c0 <nm_spi_write+0x1e4>)
    bfe4:	4798      	blx	r3
    bfe6:	0003      	movs	r3, r0
    bfe8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    bfea:	2317      	movs	r3, #23
    bfec:	18fb      	adds	r3, r7, r3
    bfee:	781b      	ldrb	r3, [r3, #0]
    bff0:	b25b      	sxtb	r3, r3
    bff2:	2b01      	cmp	r3, #1
    bff4:	d00e      	beq.n	c014 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    bff6:	23fa      	movs	r3, #250	; 0xfa
    bff8:	009a      	lsls	r2, r3, #2
    bffa:	4927      	ldr	r1, [pc, #156]	; (c098 <nm_spi_write+0x1bc>)
    bffc:	4b27      	ldr	r3, [pc, #156]	; (c09c <nm_spi_write+0x1c0>)
    bffe:	0018      	movs	r0, r3
    c000:	4b27      	ldr	r3, [pc, #156]	; (c0a0 <nm_spi_write+0x1c4>)
    c002:	4798      	blx	r3
    c004:	4b2c      	ldr	r3, [pc, #176]	; (c0b8 <nm_spi_write+0x1dc>)
    c006:	0018      	movs	r0, r3
    c008:	4b2c      	ldr	r3, [pc, #176]	; (c0bc <nm_spi_write+0x1e0>)
    c00a:	4798      	blx	r3
    c00c:	200d      	movs	r0, #13
    c00e:	4b26      	ldr	r3, [pc, #152]	; (c0a8 <nm_spi_write+0x1cc>)
    c010:	4798      	blx	r3
		goto _FAIL_;
    c012:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    c014:	2317      	movs	r3, #23
    c016:	18fb      	adds	r3, r7, r3
    c018:	781b      	ldrb	r3, [r3, #0]
    c01a:	b25b      	sxtb	r3, r3
    c01c:	2b01      	cmp	r3, #1
    c01e:	d02f      	beq.n	c080 <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    c020:	2001      	movs	r0, #1
    c022:	4b28      	ldr	r3, [pc, #160]	; (c0c4 <nm_spi_write+0x1e8>)
    c024:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c026:	2300      	movs	r3, #0
    c028:	9300      	str	r3, [sp, #0]
    c02a:	2300      	movs	r3, #0
    c02c:	2200      	movs	r2, #0
    c02e:	2100      	movs	r1, #0
    c030:	20cf      	movs	r0, #207	; 0xcf
    c032:	4c17      	ldr	r4, [pc, #92]	; (c090 <nm_spi_write+0x1b4>)
    c034:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    c036:	20cf      	movs	r0, #207	; 0xcf
    c038:	4b1c      	ldr	r3, [pc, #112]	; (c0ac <nm_spi_write+0x1d0>)
    c03a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    c03c:	4a22      	ldr	r2, [pc, #136]	; (c0c8 <nm_spi_write+0x1ec>)
    c03e:	4916      	ldr	r1, [pc, #88]	; (c098 <nm_spi_write+0x1bc>)
    c040:	4b16      	ldr	r3, [pc, #88]	; (c09c <nm_spi_write+0x1c0>)
    c042:	0018      	movs	r0, r3
    c044:	4b16      	ldr	r3, [pc, #88]	; (c0a0 <nm_spi_write+0x1c4>)
    c046:	4798      	blx	r3
    c048:	2316      	movs	r3, #22
    c04a:	18fb      	adds	r3, r7, r3
    c04c:	7819      	ldrb	r1, [r3, #0]
    c04e:	1dbb      	adds	r3, r7, #6
    c050:	881b      	ldrh	r3, [r3, #0]
    c052:	68fa      	ldr	r2, [r7, #12]
    c054:	481d      	ldr	r0, [pc, #116]	; (c0cc <nm_spi_write+0x1f0>)
    c056:	4c12      	ldr	r4, [pc, #72]	; (c0a0 <nm_spi_write+0x1c4>)
    c058:	47a0      	blx	r4
    c05a:	200d      	movs	r0, #13
    c05c:	4b12      	ldr	r3, [pc, #72]	; (c0a8 <nm_spi_write+0x1cc>)
    c05e:	4798      	blx	r3
		nm_bsp_sleep(1);
    c060:	2001      	movs	r0, #1
    c062:	4b18      	ldr	r3, [pc, #96]	; (c0c4 <nm_spi_write+0x1e8>)
    c064:	4798      	blx	r3
		retry--;
    c066:	2316      	movs	r3, #22
    c068:	18fb      	adds	r3, r7, r3
    c06a:	781a      	ldrb	r2, [r3, #0]
    c06c:	2316      	movs	r3, #22
    c06e:	18fb      	adds	r3, r7, r3
    c070:	3a01      	subs	r2, #1
    c072:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    c074:	2316      	movs	r3, #22
    c076:	18fb      	adds	r3, r7, r3
    c078:	781b      	ldrb	r3, [r3, #0]
    c07a:	2b00      	cmp	r3, #0
    c07c:	d000      	beq.n	c080 <nm_spi_write+0x1a4>
    c07e:	e73c      	b.n	befa <nm_spi_write+0x1e>
	}


	return result;
    c080:	2317      	movs	r3, #23
    c082:	18fb      	adds	r3, r7, r3
    c084:	781b      	ldrb	r3, [r3, #0]
    c086:	b25b      	sxtb	r3, r3
}
    c088:	0018      	movs	r0, r3
    c08a:	46bd      	mov	sp, r7
    c08c:	b006      	add	sp, #24
    c08e:	bdb0      	pop	{r4, r5, r7, pc}
    c090:	0000b3fd 	.word	0x0000b3fd
    c094:	000003ca 	.word	0x000003ca
    c098:	000192e0 	.word	0x000192e0
    c09c:	00018cf8 	.word	0x00018cf8
    c0a0:	00016db1 	.word	0x00016db1
    c0a4:	00018fa8 	.word	0x00018fa8
    c0a8:	00016de5 	.word	0x00016de5
    c0ac:	0000b841 	.word	0x0000b841
    c0b0:	00018fd8 	.word	0x00018fd8
    c0b4:	0000bb7d 	.word	0x0000bb7d
    c0b8:	00019010 	.word	0x00019010
    c0bc:	00016ed1 	.word	0x00016ed1
    c0c0:	0000b741 	.word	0x0000b741
    c0c4:	00008335 	.word	0x00008335
    c0c8:	000003f2 	.word	0x000003f2
    c0cc:	00019038 	.word	0x00019038

0000c0d0 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    c0d0:	b5b0      	push	{r4, r5, r7, lr}
    c0d2:	b086      	sub	sp, #24
    c0d4:	af02      	add	r7, sp, #8
    c0d6:	6078      	str	r0, [r7, #4]
    c0d8:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    c0da:	230f      	movs	r3, #15
    c0dc:	18fb      	adds	r3, r7, r3
    c0de:	220a      	movs	r2, #10
    c0e0:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    c0e2:	230e      	movs	r3, #14
    c0e4:	18fb      	adds	r3, r7, r3
    c0e6:	2201      	movs	r2, #1
    c0e8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    c0ea:	230d      	movs	r3, #13
    c0ec:	18fb      	adds	r3, r7, r3
    c0ee:	22ca      	movs	r2, #202	; 0xca
    c0f0:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    c0f2:	230c      	movs	r3, #12
    c0f4:	18fb      	adds	r3, r7, r3
    c0f6:	2200      	movs	r2, #0
    c0f8:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    c0fa:	687b      	ldr	r3, [r7, #4]
    c0fc:	2bff      	cmp	r3, #255	; 0xff
    c0fe:	d808      	bhi.n	c112 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    c100:	230d      	movs	r3, #13
    c102:	18fb      	adds	r3, r7, r3
    c104:	22c4      	movs	r2, #196	; 0xc4
    c106:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    c108:	230c      	movs	r3, #12
    c10a:	18fb      	adds	r3, r7, r3
    c10c:	2201      	movs	r2, #1
    c10e:	701a      	strb	r2, [r3, #0]
    c110:	e007      	b.n	c122 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    c112:	230d      	movs	r3, #13
    c114:	18fb      	adds	r3, r7, r3
    c116:	22ca      	movs	r2, #202	; 0xca
    c118:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    c11a:	230c      	movs	r3, #12
    c11c:	18fb      	adds	r3, r7, r3
    c11e:	2200      	movs	r2, #0
    c120:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    c122:	230e      	movs	r3, #14
    c124:	18fc      	adds	r4, r7, r3
    c126:	6879      	ldr	r1, [r7, #4]
    c128:	230d      	movs	r3, #13
    c12a:	18fb      	adds	r3, r7, r3
    c12c:	7818      	ldrb	r0, [r3, #0]
    c12e:	230c      	movs	r3, #12
    c130:	18fb      	adds	r3, r7, r3
    c132:	781b      	ldrb	r3, [r3, #0]
    c134:	9300      	str	r3, [sp, #0]
    c136:	2304      	movs	r3, #4
    c138:	2200      	movs	r2, #0
    c13a:	4d56      	ldr	r5, [pc, #344]	; (c294 <spi_read_reg+0x1c4>)
    c13c:	47a8      	blx	r5
    c13e:	0003      	movs	r3, r0
    c140:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c142:	230e      	movs	r3, #14
    c144:	18fb      	adds	r3, r7, r3
    c146:	781b      	ldrb	r3, [r3, #0]
    c148:	b25b      	sxtb	r3, r3
    c14a:	2b01      	cmp	r3, #1
    c14c:	d00f      	beq.n	c16e <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    c14e:	4a52      	ldr	r2, [pc, #328]	; (c298 <spi_read_reg+0x1c8>)
    c150:	4952      	ldr	r1, [pc, #328]	; (c29c <spi_read_reg+0x1cc>)
    c152:	4b53      	ldr	r3, [pc, #332]	; (c2a0 <spi_read_reg+0x1d0>)
    c154:	0018      	movs	r0, r3
    c156:	4b53      	ldr	r3, [pc, #332]	; (c2a4 <spi_read_reg+0x1d4>)
    c158:	4798      	blx	r3
    c15a:	687a      	ldr	r2, [r7, #4]
    c15c:	4b52      	ldr	r3, [pc, #328]	; (c2a8 <spi_read_reg+0x1d8>)
    c15e:	0011      	movs	r1, r2
    c160:	0018      	movs	r0, r3
    c162:	4b50      	ldr	r3, [pc, #320]	; (c2a4 <spi_read_reg+0x1d4>)
    c164:	4798      	blx	r3
    c166:	200d      	movs	r0, #13
    c168:	4b50      	ldr	r3, [pc, #320]	; (c2ac <spi_read_reg+0x1dc>)
    c16a:	4798      	blx	r3
		goto _FAIL_;
    c16c:	e055      	b.n	c21a <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    c16e:	230e      	movs	r3, #14
    c170:	18fc      	adds	r4, r7, r3
    c172:	230d      	movs	r3, #13
    c174:	18fb      	adds	r3, r7, r3
    c176:	781b      	ldrb	r3, [r3, #0]
    c178:	0018      	movs	r0, r3
    c17a:	4b4d      	ldr	r3, [pc, #308]	; (c2b0 <spi_read_reg+0x1e0>)
    c17c:	4798      	blx	r3
    c17e:	0003      	movs	r3, r0
    c180:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c182:	230e      	movs	r3, #14
    c184:	18fb      	adds	r3, r7, r3
    c186:	781b      	ldrb	r3, [r3, #0]
    c188:	b25b      	sxtb	r3, r3
    c18a:	2b01      	cmp	r3, #1
    c18c:	d00f      	beq.n	c1ae <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    c18e:	4a49      	ldr	r2, [pc, #292]	; (c2b4 <spi_read_reg+0x1e4>)
    c190:	4942      	ldr	r1, [pc, #264]	; (c29c <spi_read_reg+0x1cc>)
    c192:	4b43      	ldr	r3, [pc, #268]	; (c2a0 <spi_read_reg+0x1d0>)
    c194:	0018      	movs	r0, r3
    c196:	4b43      	ldr	r3, [pc, #268]	; (c2a4 <spi_read_reg+0x1d4>)
    c198:	4798      	blx	r3
    c19a:	687a      	ldr	r2, [r7, #4]
    c19c:	4b46      	ldr	r3, [pc, #280]	; (c2b8 <spi_read_reg+0x1e8>)
    c19e:	0011      	movs	r1, r2
    c1a0:	0018      	movs	r0, r3
    c1a2:	4b40      	ldr	r3, [pc, #256]	; (c2a4 <spi_read_reg+0x1d4>)
    c1a4:	4798      	blx	r3
    c1a6:	200d      	movs	r0, #13
    c1a8:	4b40      	ldr	r3, [pc, #256]	; (c2ac <spi_read_reg+0x1dc>)
    c1aa:	4798      	blx	r3
		goto _FAIL_;
    c1ac:	e035      	b.n	c21a <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    c1ae:	230e      	movs	r3, #14
    c1b0:	18fc      	adds	r4, r7, r3
    c1b2:	230c      	movs	r3, #12
    c1b4:	18fb      	adds	r3, r7, r3
    c1b6:	781a      	ldrb	r2, [r3, #0]
    c1b8:	2308      	movs	r3, #8
    c1ba:	18fb      	adds	r3, r7, r3
    c1bc:	2104      	movs	r1, #4
    c1be:	0018      	movs	r0, r3
    c1c0:	4b3e      	ldr	r3, [pc, #248]	; (c2bc <spi_read_reg+0x1ec>)
    c1c2:	4798      	blx	r3
    c1c4:	0003      	movs	r3, r0
    c1c6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c1c8:	230e      	movs	r3, #14
    c1ca:	18fb      	adds	r3, r7, r3
    c1cc:	781b      	ldrb	r3, [r3, #0]
    c1ce:	b25b      	sxtb	r3, r3
    c1d0:	2b01      	cmp	r3, #1
    c1d2:	d00d      	beq.n	c1f0 <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    c1d4:	4a3a      	ldr	r2, [pc, #232]	; (c2c0 <spi_read_reg+0x1f0>)
    c1d6:	4931      	ldr	r1, [pc, #196]	; (c29c <spi_read_reg+0x1cc>)
    c1d8:	4b31      	ldr	r3, [pc, #196]	; (c2a0 <spi_read_reg+0x1d0>)
    c1da:	0018      	movs	r0, r3
    c1dc:	4b31      	ldr	r3, [pc, #196]	; (c2a4 <spi_read_reg+0x1d4>)
    c1de:	4798      	blx	r3
    c1e0:	4b38      	ldr	r3, [pc, #224]	; (c2c4 <spi_read_reg+0x1f4>)
    c1e2:	0018      	movs	r0, r3
    c1e4:	4b38      	ldr	r3, [pc, #224]	; (c2c8 <spi_read_reg+0x1f8>)
    c1e6:	4798      	blx	r3
    c1e8:	200d      	movs	r0, #13
    c1ea:	4b30      	ldr	r3, [pc, #192]	; (c2ac <spi_read_reg+0x1dc>)
    c1ec:	4798      	blx	r3
		goto _FAIL_;
    c1ee:	e014      	b.n	c21a <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    c1f0:	2308      	movs	r3, #8
    c1f2:	18fb      	adds	r3, r7, r3
    c1f4:	781b      	ldrb	r3, [r3, #0]
    c1f6:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    c1f8:	2308      	movs	r3, #8
    c1fa:	18fb      	adds	r3, r7, r3
    c1fc:	785b      	ldrb	r3, [r3, #1]
    c1fe:	021b      	lsls	r3, r3, #8
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    c200:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    c202:	2308      	movs	r3, #8
    c204:	18fb      	adds	r3, r7, r3
    c206:	789b      	ldrb	r3, [r3, #2]
    c208:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    c20a:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    c20c:	2308      	movs	r3, #8
    c20e:	18fb      	adds	r3, r7, r3
    c210:	78db      	ldrb	r3, [r3, #3]
    c212:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    c214:	431a      	orrs	r2, r3
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    c216:	683b      	ldr	r3, [r7, #0]
    c218:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
		
_FAIL_:
	if(result != N_OK)
    c21a:	230e      	movs	r3, #14
    c21c:	18fb      	adds	r3, r7, r3
    c21e:	781b      	ldrb	r3, [r3, #0]
    c220:	b25b      	sxtb	r3, r3
    c222:	2b01      	cmp	r3, #1
    c224:	d02e      	beq.n	c284 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    c226:	2001      	movs	r0, #1
    c228:	4b28      	ldr	r3, [pc, #160]	; (c2cc <spi_read_reg+0x1fc>)
    c22a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c22c:	2300      	movs	r3, #0
    c22e:	9300      	str	r3, [sp, #0]
    c230:	2300      	movs	r3, #0
    c232:	2200      	movs	r2, #0
    c234:	2100      	movs	r1, #0
    c236:	20cf      	movs	r0, #207	; 0xcf
    c238:	4c16      	ldr	r4, [pc, #88]	; (c294 <spi_read_reg+0x1c4>)
    c23a:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    c23c:	20cf      	movs	r0, #207	; 0xcf
    c23e:	4b1c      	ldr	r3, [pc, #112]	; (c2b0 <spi_read_reg+0x1e0>)
    c240:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    c242:	4a23      	ldr	r2, [pc, #140]	; (c2d0 <spi_read_reg+0x200>)
    c244:	4915      	ldr	r1, [pc, #84]	; (c29c <spi_read_reg+0x1cc>)
    c246:	4b16      	ldr	r3, [pc, #88]	; (c2a0 <spi_read_reg+0x1d0>)
    c248:	0018      	movs	r0, r3
    c24a:	4b16      	ldr	r3, [pc, #88]	; (c2a4 <spi_read_reg+0x1d4>)
    c24c:	4798      	blx	r3
    c24e:	230f      	movs	r3, #15
    c250:	18fb      	adds	r3, r7, r3
    c252:	7819      	ldrb	r1, [r3, #0]
    c254:	687a      	ldr	r2, [r7, #4]
    c256:	4b1f      	ldr	r3, [pc, #124]	; (c2d4 <spi_read_reg+0x204>)
    c258:	0018      	movs	r0, r3
    c25a:	4b12      	ldr	r3, [pc, #72]	; (c2a4 <spi_read_reg+0x1d4>)
    c25c:	4798      	blx	r3
    c25e:	200d      	movs	r0, #13
    c260:	4b12      	ldr	r3, [pc, #72]	; (c2ac <spi_read_reg+0x1dc>)
    c262:	4798      	blx	r3
		nm_bsp_sleep(1);
    c264:	2001      	movs	r0, #1
    c266:	4b19      	ldr	r3, [pc, #100]	; (c2cc <spi_read_reg+0x1fc>)
    c268:	4798      	blx	r3
		retry--;
    c26a:	230f      	movs	r3, #15
    c26c:	18fb      	adds	r3, r7, r3
    c26e:	781a      	ldrb	r2, [r3, #0]
    c270:	230f      	movs	r3, #15
    c272:	18fb      	adds	r3, r7, r3
    c274:	3a01      	subs	r2, #1
    c276:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    c278:	230f      	movs	r3, #15
    c27a:	18fb      	adds	r3, r7, r3
    c27c:	781b      	ldrb	r3, [r3, #0]
    c27e:	2b00      	cmp	r3, #0
    c280:	d000      	beq.n	c284 <spi_read_reg+0x1b4>
    c282:	e73a      	b.n	c0fa <spi_read_reg+0x2a>
	}
		
	return result;
    c284:	230e      	movs	r3, #14
    c286:	18fb      	adds	r3, r7, r3
    c288:	781b      	ldrb	r3, [r3, #0]
    c28a:	b25b      	sxtb	r3, r3
}
    c28c:	0018      	movs	r0, r3
    c28e:	46bd      	mov	sp, r7
    c290:	b004      	add	sp, #16
    c292:	bdb0      	pop	{r4, r5, r7, pc}
    c294:	0000b3fd 	.word	0x0000b3fd
    c298:	00000417 	.word	0x00000417
    c29c:	000192f0 	.word	0x000192f0
    c2a0:	00018cf8 	.word	0x00018cf8
    c2a4:	00016db1 	.word	0x00016db1
    c2a8:	00019054 	.word	0x00019054
    c2ac:	00016de5 	.word	0x00016de5
    c2b0:	0000b841 	.word	0x0000b841
    c2b4:	0000041d 	.word	0x0000041d
    c2b8:	00019080 	.word	0x00019080
    c2bc:	0000b979 	.word	0x0000b979
    c2c0:	00000424 	.word	0x00000424
    c2c4:	000190b4 	.word	0x000190b4
    c2c8:	00016ed1 	.word	0x00016ed1
    c2cc:	00008335 	.word	0x00008335
    c2d0:	0000043c 	.word	0x0000043c
    c2d4:	000190d4 	.word	0x000190d4

0000c2d8 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    c2d8:	b5b0      	push	{r4, r5, r7, lr}
    c2da:	b088      	sub	sp, #32
    c2dc:	af02      	add	r7, sp, #8
    c2de:	60f8      	str	r0, [r7, #12]
    c2e0:	60b9      	str	r1, [r7, #8]
    c2e2:	1dbb      	adds	r3, r7, #6
    c2e4:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    c2e6:	2314      	movs	r3, #20
    c2e8:	18fb      	adds	r3, r7, r3
    c2ea:	22c8      	movs	r2, #200	; 0xc8
    c2ec:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    c2ee:	2316      	movs	r3, #22
    c2f0:	18fb      	adds	r3, r7, r3
    c2f2:	220a      	movs	r2, #10
    c2f4:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    c2f6:	2315      	movs	r3, #21
    c2f8:	18fb      	adds	r3, r7, r3
    c2fa:	2200      	movs	r2, #0
    c2fc:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    c2fe:	1dbb      	adds	r3, r7, #6
    c300:	881b      	ldrh	r3, [r3, #0]
    c302:	2b01      	cmp	r3, #1
    c304:	d106      	bne.n	c314 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    c306:	1dbb      	adds	r3, r7, #6
    c308:	2202      	movs	r2, #2
    c30a:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    c30c:	2315      	movs	r3, #21
    c30e:	18fb      	adds	r3, r7, r3
    c310:	2201      	movs	r2, #1
    c312:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    c314:	1dbb      	adds	r3, r7, #6
    c316:	881a      	ldrh	r2, [r3, #0]
    c318:	2317      	movs	r3, #23
    c31a:	18fc      	adds	r4, r7, r3
    c31c:	68f9      	ldr	r1, [r7, #12]
    c31e:	2314      	movs	r3, #20
    c320:	18fb      	adds	r3, r7, r3
    c322:	7818      	ldrb	r0, [r3, #0]
    c324:	2300      	movs	r3, #0
    c326:	9300      	str	r3, [sp, #0]
    c328:	0013      	movs	r3, r2
    c32a:	2200      	movs	r2, #0
    c32c:	4d56      	ldr	r5, [pc, #344]	; (c488 <nm_spi_read+0x1b0>)
    c32e:	47a8      	blx	r5
    c330:	0003      	movs	r3, r0
    c332:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c334:	2317      	movs	r3, #23
    c336:	18fb      	adds	r3, r7, r3
    c338:	781b      	ldrb	r3, [r3, #0]
    c33a:	b25b      	sxtb	r3, r3
    c33c:	2b01      	cmp	r3, #1
    c33e:	d00f      	beq.n	c360 <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    c340:	4a52      	ldr	r2, [pc, #328]	; (c48c <nm_spi_read+0x1b4>)
    c342:	4953      	ldr	r1, [pc, #332]	; (c490 <nm_spi_read+0x1b8>)
    c344:	4b53      	ldr	r3, [pc, #332]	; (c494 <nm_spi_read+0x1bc>)
    c346:	0018      	movs	r0, r3
    c348:	4b53      	ldr	r3, [pc, #332]	; (c498 <nm_spi_read+0x1c0>)
    c34a:	4798      	blx	r3
    c34c:	68fa      	ldr	r2, [r7, #12]
    c34e:	4b53      	ldr	r3, [pc, #332]	; (c49c <nm_spi_read+0x1c4>)
    c350:	0011      	movs	r1, r2
    c352:	0018      	movs	r0, r3
    c354:	4b50      	ldr	r3, [pc, #320]	; (c498 <nm_spi_read+0x1c0>)
    c356:	4798      	blx	r3
    c358:	200d      	movs	r0, #13
    c35a:	4b51      	ldr	r3, [pc, #324]	; (c4a0 <nm_spi_read+0x1c8>)
    c35c:	4798      	blx	r3
		goto _FAIL_;
    c35e:	e055      	b.n	c40c <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    c360:	2317      	movs	r3, #23
    c362:	18fc      	adds	r4, r7, r3
    c364:	2314      	movs	r3, #20
    c366:	18fb      	adds	r3, r7, r3
    c368:	781b      	ldrb	r3, [r3, #0]
    c36a:	0018      	movs	r0, r3
    c36c:	4b4d      	ldr	r3, [pc, #308]	; (c4a4 <nm_spi_read+0x1cc>)
    c36e:	4798      	blx	r3
    c370:	0003      	movs	r3, r0
    c372:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    c374:	2317      	movs	r3, #23
    c376:	18fb      	adds	r3, r7, r3
    c378:	781b      	ldrb	r3, [r3, #0]
    c37a:	b25b      	sxtb	r3, r3
    c37c:	2b01      	cmp	r3, #1
    c37e:	d00f      	beq.n	c3a0 <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    c380:	4a49      	ldr	r2, [pc, #292]	; (c4a8 <nm_spi_read+0x1d0>)
    c382:	4943      	ldr	r1, [pc, #268]	; (c490 <nm_spi_read+0x1b8>)
    c384:	4b43      	ldr	r3, [pc, #268]	; (c494 <nm_spi_read+0x1bc>)
    c386:	0018      	movs	r0, r3
    c388:	4b43      	ldr	r3, [pc, #268]	; (c498 <nm_spi_read+0x1c0>)
    c38a:	4798      	blx	r3
    c38c:	68fa      	ldr	r2, [r7, #12]
    c38e:	4b47      	ldr	r3, [pc, #284]	; (c4ac <nm_spi_read+0x1d4>)
    c390:	0011      	movs	r1, r2
    c392:	0018      	movs	r0, r3
    c394:	4b40      	ldr	r3, [pc, #256]	; (c498 <nm_spi_read+0x1c0>)
    c396:	4798      	blx	r3
    c398:	200d      	movs	r0, #13
    c39a:	4b41      	ldr	r3, [pc, #260]	; (c4a0 <nm_spi_read+0x1c8>)
    c39c:	4798      	blx	r3
		goto _FAIL_;
    c39e:	e035      	b.n	c40c <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    c3a0:	2315      	movs	r3, #21
    c3a2:	18fb      	adds	r3, r7, r3
    c3a4:	781b      	ldrb	r3, [r3, #0]
    c3a6:	2b00      	cmp	r3, #0
    c3a8:	d011      	beq.n	c3ce <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    c3aa:	2317      	movs	r3, #23
    c3ac:	18fc      	adds	r4, r7, r3
    c3ae:	1dbb      	adds	r3, r7, #6
    c3b0:	8819      	ldrh	r1, [r3, #0]
    c3b2:	2310      	movs	r3, #16
    c3b4:	18fb      	adds	r3, r7, r3
    c3b6:	2200      	movs	r2, #0
    c3b8:	0018      	movs	r0, r3
    c3ba:	4b3d      	ldr	r3, [pc, #244]	; (c4b0 <nm_spi_read+0x1d8>)
    c3bc:	4798      	blx	r3
    c3be:	0003      	movs	r3, r0
    c3c0:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    c3c2:	2310      	movs	r3, #16
    c3c4:	18fb      	adds	r3, r7, r3
    c3c6:	781a      	ldrb	r2, [r3, #0]
    c3c8:	68bb      	ldr	r3, [r7, #8]
    c3ca:	701a      	strb	r2, [r3, #0]
    c3cc:	e00a      	b.n	c3e4 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    c3ce:	2317      	movs	r3, #23
    c3d0:	18fc      	adds	r4, r7, r3
    c3d2:	1dbb      	adds	r3, r7, #6
    c3d4:	8819      	ldrh	r1, [r3, #0]
    c3d6:	68bb      	ldr	r3, [r7, #8]
    c3d8:	2200      	movs	r2, #0
    c3da:	0018      	movs	r0, r3
    c3dc:	4b34      	ldr	r3, [pc, #208]	; (c4b0 <nm_spi_read+0x1d8>)
    c3de:	4798      	blx	r3
    c3e0:	0003      	movs	r3, r0
    c3e2:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    c3e4:	2317      	movs	r3, #23
    c3e6:	18fb      	adds	r3, r7, r3
    c3e8:	781b      	ldrb	r3, [r3, #0]
    c3ea:	b25b      	sxtb	r3, r3
    c3ec:	2b01      	cmp	r3, #1
    c3ee:	d00d      	beq.n	c40c <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    c3f0:	4a30      	ldr	r2, [pc, #192]	; (c4b4 <nm_spi_read+0x1dc>)
    c3f2:	4927      	ldr	r1, [pc, #156]	; (c490 <nm_spi_read+0x1b8>)
    c3f4:	4b27      	ldr	r3, [pc, #156]	; (c494 <nm_spi_read+0x1bc>)
    c3f6:	0018      	movs	r0, r3
    c3f8:	4b27      	ldr	r3, [pc, #156]	; (c498 <nm_spi_read+0x1c0>)
    c3fa:	4798      	blx	r3
    c3fc:	4b2e      	ldr	r3, [pc, #184]	; (c4b8 <nm_spi_read+0x1e0>)
    c3fe:	0018      	movs	r0, r3
    c400:	4b2e      	ldr	r3, [pc, #184]	; (c4bc <nm_spi_read+0x1e4>)
    c402:	4798      	blx	r3
    c404:	200d      	movs	r0, #13
    c406:	4b26      	ldr	r3, [pc, #152]	; (c4a0 <nm_spi_read+0x1c8>)
    c408:	4798      	blx	r3
		goto _FAIL_;
    c40a:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    c40c:	2317      	movs	r3, #23
    c40e:	18fb      	adds	r3, r7, r3
    c410:	781b      	ldrb	r3, [r3, #0]
    c412:	b25b      	sxtb	r3, r3
    c414:	2b01      	cmp	r3, #1
    c416:	d02f      	beq.n	c478 <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    c418:	2001      	movs	r0, #1
    c41a:	4b29      	ldr	r3, [pc, #164]	; (c4c0 <nm_spi_read+0x1e8>)
    c41c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c41e:	2300      	movs	r3, #0
    c420:	9300      	str	r3, [sp, #0]
    c422:	2300      	movs	r3, #0
    c424:	2200      	movs	r2, #0
    c426:	2100      	movs	r1, #0
    c428:	20cf      	movs	r0, #207	; 0xcf
    c42a:	4c17      	ldr	r4, [pc, #92]	; (c488 <nm_spi_read+0x1b0>)
    c42c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    c42e:	20cf      	movs	r0, #207	; 0xcf
    c430:	4b1c      	ldr	r3, [pc, #112]	; (c4a4 <nm_spi_read+0x1cc>)
    c432:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    c434:	4a23      	ldr	r2, [pc, #140]	; (c4c4 <nm_spi_read+0x1ec>)
    c436:	4916      	ldr	r1, [pc, #88]	; (c490 <nm_spi_read+0x1b8>)
    c438:	4b16      	ldr	r3, [pc, #88]	; (c494 <nm_spi_read+0x1bc>)
    c43a:	0018      	movs	r0, r3
    c43c:	4b16      	ldr	r3, [pc, #88]	; (c498 <nm_spi_read+0x1c0>)
    c43e:	4798      	blx	r3
    c440:	2316      	movs	r3, #22
    c442:	18fb      	adds	r3, r7, r3
    c444:	7819      	ldrb	r1, [r3, #0]
    c446:	1dbb      	adds	r3, r7, #6
    c448:	881b      	ldrh	r3, [r3, #0]
    c44a:	68fa      	ldr	r2, [r7, #12]
    c44c:	481e      	ldr	r0, [pc, #120]	; (c4c8 <nm_spi_read+0x1f0>)
    c44e:	4c12      	ldr	r4, [pc, #72]	; (c498 <nm_spi_read+0x1c0>)
    c450:	47a0      	blx	r4
    c452:	200d      	movs	r0, #13
    c454:	4b12      	ldr	r3, [pc, #72]	; (c4a0 <nm_spi_read+0x1c8>)
    c456:	4798      	blx	r3
		nm_bsp_sleep(1);
    c458:	2001      	movs	r0, #1
    c45a:	4b19      	ldr	r3, [pc, #100]	; (c4c0 <nm_spi_read+0x1e8>)
    c45c:	4798      	blx	r3
		retry--;
    c45e:	2316      	movs	r3, #22
    c460:	18fb      	adds	r3, r7, r3
    c462:	781a      	ldrb	r2, [r3, #0]
    c464:	2316      	movs	r3, #22
    c466:	18fb      	adds	r3, r7, r3
    c468:	3a01      	subs	r2, #1
    c46a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    c46c:	2316      	movs	r3, #22
    c46e:	18fb      	adds	r3, r7, r3
    c470:	781b      	ldrb	r3, [r3, #0]
    c472:	2b00      	cmp	r3, #0
    c474:	d000      	beq.n	c478 <nm_spi_read+0x1a0>
    c476:	e742      	b.n	c2fe <nm_spi_read+0x26>
	}

	return result;
    c478:	2317      	movs	r3, #23
    c47a:	18fb      	adds	r3, r7, r3
    c47c:	781b      	ldrb	r3, [r3, #0]
    c47e:	b25b      	sxtb	r3, r3
}
    c480:	0018      	movs	r0, r3
    c482:	46bd      	mov	sp, r7
    c484:	b006      	add	sp, #24
    c486:	bdb0      	pop	{r4, r5, r7, pc}
    c488:	0000b3fd 	.word	0x0000b3fd
    c48c:	0000045d 	.word	0x0000045d
    c490:	00019300 	.word	0x00019300
    c494:	00018cf8 	.word	0x00018cf8
    c498:	00016db1 	.word	0x00016db1
    c49c:	000190ec 	.word	0x000190ec
    c4a0:	00016de5 	.word	0x00016de5
    c4a4:	0000b841 	.word	0x0000b841
    c4a8:	00000463 	.word	0x00000463
    c4ac:	0001911c 	.word	0x0001911c
    c4b0:	0000b979 	.word	0x0000b979
    c4b4:	00000473 	.word	0x00000473
    c4b8:	00019154 	.word	0x00019154
    c4bc:	00016ed1 	.word	0x00016ed1
    c4c0:	00008335 	.word	0x00008335
    c4c4:	00000484 	.word	0x00000484
    c4c8:	00019038 	.word	0x00019038

0000c4cc <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    c4cc:	b580      	push	{r7, lr}
    c4ce:	b082      	sub	sp, #8
    c4d0:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    c4d2:	4b0c      	ldr	r3, [pc, #48]	; (c504 <spi_init_pkt_sz+0x38>)
    c4d4:	0018      	movs	r0, r3
    c4d6:	4b0c      	ldr	r3, [pc, #48]	; (c508 <spi_init_pkt_sz+0x3c>)
    c4d8:	4798      	blx	r3
    c4da:	0003      	movs	r3, r0
    c4dc:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    c4de:	687b      	ldr	r3, [r7, #4]
    c4e0:	2270      	movs	r2, #112	; 0x70
    c4e2:	4393      	bics	r3, r2
    c4e4:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    c4e6:	687b      	ldr	r3, [r7, #4]
    c4e8:	2250      	movs	r2, #80	; 0x50
    c4ea:	4313      	orrs	r3, r2
    c4ec:	607b      	str	r3, [r7, #4]
    c4ee:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    c4f0:	687b      	ldr	r3, [r7, #4]
    c4f2:	4a04      	ldr	r2, [pc, #16]	; (c504 <spi_init_pkt_sz+0x38>)
    c4f4:	0019      	movs	r1, r3
    c4f6:	0010      	movs	r0, r2
    c4f8:	4b04      	ldr	r3, [pc, #16]	; (c50c <spi_init_pkt_sz+0x40>)
    c4fa:	4798      	blx	r3
}
    c4fc:	46c0      	nop			; (mov r8, r8)
    c4fe:	46bd      	mov	sp, r7
    c500:	b002      	add	sp, #8
    c502:	bd80      	pop	{r7, pc}
    c504:	0000e824 	.word	0x0000e824
    c508:	0000c6a5 	.word	0x0000c6a5
    c50c:	0000c719 	.word	0x0000c719

0000c510 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    c510:	b590      	push	{r4, r7, lr}
    c512:	b083      	sub	sp, #12
    c514:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    c516:	2300      	movs	r3, #0
    c518:	9300      	str	r3, [sp, #0]
    c51a:	2300      	movs	r3, #0
    c51c:	2200      	movs	r2, #0
    c51e:	2100      	movs	r1, #0
    c520:	20cf      	movs	r0, #207	; 0xcf
    c522:	4c05      	ldr	r4, [pc, #20]	; (c538 <nm_spi_reset+0x28>)
    c524:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    c526:	20cf      	movs	r0, #207	; 0xcf
    c528:	4b04      	ldr	r3, [pc, #16]	; (c53c <nm_spi_reset+0x2c>)
    c52a:	4798      	blx	r3
	return M2M_SUCCESS;
    c52c:	2300      	movs	r3, #0
}
    c52e:	0018      	movs	r0, r3
    c530:	46bd      	mov	sp, r7
    c532:	b001      	add	sp, #4
    c534:	bd90      	pop	{r4, r7, pc}
    c536:	46c0      	nop			; (mov r8, r8)
    c538:	0000b3fd 	.word	0x0000b3fd
    c53c:	0000b841 	.word	0x0000b841

0000c540 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    c540:	b580      	push	{r7, lr}
    c542:	b082      	sub	sp, #8
    c544:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    c546:	2300      	movs	r3, #0
    c548:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    c54a:	4b3e      	ldr	r3, [pc, #248]	; (c644 <nm_spi_init+0x104>)
    c54c:	2200      	movs	r2, #0
    c54e:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    c550:	003b      	movs	r3, r7
    c552:	4a3d      	ldr	r2, [pc, #244]	; (c648 <nm_spi_init+0x108>)
    c554:	0019      	movs	r1, r3
    c556:	0010      	movs	r0, r2
    c558:	4b3c      	ldr	r3, [pc, #240]	; (c64c <nm_spi_init+0x10c>)
    c55a:	4798      	blx	r3
    c55c:	1e03      	subs	r3, r0, #0
    c55e:	d126      	bne.n	c5ae <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    c560:	4b38      	ldr	r3, [pc, #224]	; (c644 <nm_spi_init+0x104>)
    c562:	2201      	movs	r2, #1
    c564:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    c566:	4a3a      	ldr	r2, [pc, #232]	; (c650 <nm_spi_init+0x110>)
    c568:	493a      	ldr	r1, [pc, #232]	; (c654 <nm_spi_init+0x114>)
    c56a:	4b3b      	ldr	r3, [pc, #236]	; (c658 <nm_spi_init+0x118>)
    c56c:	0018      	movs	r0, r3
    c56e:	4b3b      	ldr	r3, [pc, #236]	; (c65c <nm_spi_init+0x11c>)
    c570:	4798      	blx	r3
    c572:	4b3b      	ldr	r3, [pc, #236]	; (c660 <nm_spi_init+0x120>)
    c574:	0018      	movs	r0, r3
    c576:	4b3b      	ldr	r3, [pc, #236]	; (c664 <nm_spi_init+0x124>)
    c578:	4798      	blx	r3
    c57a:	200d      	movs	r0, #13
    c57c:	4b3a      	ldr	r3, [pc, #232]	; (c668 <nm_spi_init+0x128>)
    c57e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    c580:	003b      	movs	r3, r7
    c582:	4a31      	ldr	r2, [pc, #196]	; (c648 <nm_spi_init+0x108>)
    c584:	0019      	movs	r1, r3
    c586:	0010      	movs	r0, r2
    c588:	4b30      	ldr	r3, [pc, #192]	; (c64c <nm_spi_init+0x10c>)
    c58a:	4798      	blx	r3
    c58c:	1e03      	subs	r3, r0, #0
    c58e:	d10e      	bne.n	c5ae <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    c590:	4a36      	ldr	r2, [pc, #216]	; (c66c <nm_spi_init+0x12c>)
    c592:	4930      	ldr	r1, [pc, #192]	; (c654 <nm_spi_init+0x114>)
    c594:	4b30      	ldr	r3, [pc, #192]	; (c658 <nm_spi_init+0x118>)
    c596:	0018      	movs	r0, r3
    c598:	4b30      	ldr	r3, [pc, #192]	; (c65c <nm_spi_init+0x11c>)
    c59a:	4798      	blx	r3
    c59c:	4b34      	ldr	r3, [pc, #208]	; (c670 <nm_spi_init+0x130>)
    c59e:	0018      	movs	r0, r3
    c5a0:	4b30      	ldr	r3, [pc, #192]	; (c664 <nm_spi_init+0x124>)
    c5a2:	4798      	blx	r3
    c5a4:	200d      	movs	r0, #13
    c5a6:	4b30      	ldr	r3, [pc, #192]	; (c668 <nm_spi_init+0x128>)
    c5a8:	4798      	blx	r3
			return 0;
    c5aa:	2300      	movs	r3, #0
    c5ac:	e045      	b.n	c63a <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    c5ae:	4b25      	ldr	r3, [pc, #148]	; (c644 <nm_spi_init+0x104>)
    c5b0:	781b      	ldrb	r3, [r3, #0]
    c5b2:	2b00      	cmp	r3, #0
    c5b4:	d125      	bne.n	c602 <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    c5b6:	683b      	ldr	r3, [r7, #0]
    c5b8:	220c      	movs	r2, #12
    c5ba:	4393      	bics	r3, r2
    c5bc:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    c5be:	683b      	ldr	r3, [r7, #0]
    c5c0:	2270      	movs	r2, #112	; 0x70
    c5c2:	4393      	bics	r3, r2
    c5c4:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    c5c6:	683b      	ldr	r3, [r7, #0]
    c5c8:	2250      	movs	r2, #80	; 0x50
    c5ca:	4313      	orrs	r3, r2
    c5cc:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    c5ce:	683b      	ldr	r3, [r7, #0]
    c5d0:	4a1d      	ldr	r2, [pc, #116]	; (c648 <nm_spi_init+0x108>)
    c5d2:	0019      	movs	r1, r3
    c5d4:	0010      	movs	r0, r2
    c5d6:	4b27      	ldr	r3, [pc, #156]	; (c674 <nm_spi_init+0x134>)
    c5d8:	4798      	blx	r3
    c5da:	1e03      	subs	r3, r0, #0
    c5dc:	d10e      	bne.n	c5fc <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    c5de:	4a26      	ldr	r2, [pc, #152]	; (c678 <nm_spi_init+0x138>)
    c5e0:	491c      	ldr	r1, [pc, #112]	; (c654 <nm_spi_init+0x114>)
    c5e2:	4b1d      	ldr	r3, [pc, #116]	; (c658 <nm_spi_init+0x118>)
    c5e4:	0018      	movs	r0, r3
    c5e6:	4b1d      	ldr	r3, [pc, #116]	; (c65c <nm_spi_init+0x11c>)
    c5e8:	4798      	blx	r3
    c5ea:	4b24      	ldr	r3, [pc, #144]	; (c67c <nm_spi_init+0x13c>)
    c5ec:	0018      	movs	r0, r3
    c5ee:	4b1d      	ldr	r3, [pc, #116]	; (c664 <nm_spi_init+0x124>)
    c5f0:	4798      	blx	r3
    c5f2:	200d      	movs	r0, #13
    c5f4:	4b1c      	ldr	r3, [pc, #112]	; (c668 <nm_spi_init+0x128>)
    c5f6:	4798      	blx	r3
			return 0;
    c5f8:	2300      	movs	r3, #0
    c5fa:	e01e      	b.n	c63a <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    c5fc:	4b11      	ldr	r3, [pc, #68]	; (c644 <nm_spi_init+0x104>)
    c5fe:	2201      	movs	r2, #1
    c600:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    c602:	1d3a      	adds	r2, r7, #4
    c604:	2380      	movs	r3, #128	; 0x80
    c606:	015b      	lsls	r3, r3, #5
    c608:	0011      	movs	r1, r2
    c60a:	0018      	movs	r0, r3
    c60c:	4b0f      	ldr	r3, [pc, #60]	; (c64c <nm_spi_init+0x10c>)
    c60e:	4798      	blx	r3
    c610:	1e03      	subs	r3, r0, #0
    c612:	d10f      	bne.n	c634 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    c614:	4a1a      	ldr	r2, [pc, #104]	; (c680 <nm_spi_init+0x140>)
    c616:	490f      	ldr	r1, [pc, #60]	; (c654 <nm_spi_init+0x114>)
    c618:	4b0f      	ldr	r3, [pc, #60]	; (c658 <nm_spi_init+0x118>)
    c61a:	0018      	movs	r0, r3
    c61c:	4b0f      	ldr	r3, [pc, #60]	; (c65c <nm_spi_init+0x11c>)
    c61e:	4798      	blx	r3
    c620:	4b18      	ldr	r3, [pc, #96]	; (c684 <nm_spi_init+0x144>)
    c622:	0018      	movs	r0, r3
    c624:	4b0f      	ldr	r3, [pc, #60]	; (c664 <nm_spi_init+0x124>)
    c626:	4798      	blx	r3
    c628:	200d      	movs	r0, #13
    c62a:	4b0f      	ldr	r3, [pc, #60]	; (c668 <nm_spi_init+0x128>)
    c62c:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    c62e:	2306      	movs	r3, #6
    c630:	425b      	negs	r3, r3
    c632:	e002      	b.n	c63a <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    c634:	4b14      	ldr	r3, [pc, #80]	; (c688 <nm_spi_init+0x148>)
    c636:	4798      	blx	r3


	return M2M_SUCCESS;
    c638:	2300      	movs	r3, #0
}
    c63a:	0018      	movs	r0, r3
    c63c:	46bd      	mov	sp, r7
    c63e:	b002      	add	sp, #8
    c640:	bd80      	pop	{r7, pc}
    c642:	46c0      	nop			; (mov r8, r8)
    c644:	200000b0 	.word	0x200000b0
    c648:	0000e824 	.word	0x0000e824
    c64c:	0000c0d1 	.word	0x0000c0d1
    c650:	000004c7 	.word	0x000004c7
    c654:	0001930c 	.word	0x0001930c
    c658:	00018cf8 	.word	0x00018cf8
    c65c:	00016db1 	.word	0x00016db1
    c660:	0001917c 	.word	0x0001917c
    c664:	00016ed1 	.word	0x00016ed1
    c668:	00016de5 	.word	0x00016de5
    c66c:	000004ca 	.word	0x000004ca
    c670:	000191cc 	.word	0x000191cc
    c674:	0000bd51 	.word	0x0000bd51
    c678:	000004d4 	.word	0x000004d4
    c67c:	000191f8 	.word	0x000191f8
    c680:	000004de 	.word	0x000004de
    c684:	0001922c 	.word	0x0001922c
    c688:	0000c4cd 	.word	0x0000c4cd

0000c68c <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    c68c:	b580      	push	{r7, lr}
    c68e:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    c690:	4b03      	ldr	r3, [pc, #12]	; (c6a0 <nm_spi_deinit+0x14>)
    c692:	2200      	movs	r2, #0
    c694:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    c696:	2300      	movs	r3, #0
}
    c698:	0018      	movs	r0, r3
    c69a:	46bd      	mov	sp, r7
    c69c:	bd80      	pop	{r7, pc}
    c69e:	46c0      	nop			; (mov r8, r8)
    c6a0:	200000b0 	.word	0x200000b0

0000c6a4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    c6a4:	b580      	push	{r7, lr}
    c6a6:	b084      	sub	sp, #16
    c6a8:	af00      	add	r7, sp, #0
    c6aa:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    c6ac:	230c      	movs	r3, #12
    c6ae:	18fa      	adds	r2, r7, r3
    c6b0:	687b      	ldr	r3, [r7, #4]
    c6b2:	0011      	movs	r1, r2
    c6b4:	0018      	movs	r0, r3
    c6b6:	4b03      	ldr	r3, [pc, #12]	; (c6c4 <nm_spi_read_reg+0x20>)
    c6b8:	4798      	blx	r3

	return u32Val;
    c6ba:	68fb      	ldr	r3, [r7, #12]
}
    c6bc:	0018      	movs	r0, r3
    c6be:	46bd      	mov	sp, r7
    c6c0:	b004      	add	sp, #16
    c6c2:	bd80      	pop	{r7, pc}
    c6c4:	0000c0d1 	.word	0x0000c0d1

0000c6c8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    c6c8:	b590      	push	{r4, r7, lr}
    c6ca:	b085      	sub	sp, #20
    c6cc:	af00      	add	r7, sp, #0
    c6ce:	6078      	str	r0, [r7, #4]
    c6d0:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    c6d2:	230f      	movs	r3, #15
    c6d4:	18fc      	adds	r4, r7, r3
    c6d6:	683a      	ldr	r2, [r7, #0]
    c6d8:	687b      	ldr	r3, [r7, #4]
    c6da:	0011      	movs	r1, r2
    c6dc:	0018      	movs	r0, r3
    c6de:	4b0d      	ldr	r3, [pc, #52]	; (c714 <nm_spi_read_reg_with_ret+0x4c>)
    c6e0:	4798      	blx	r3
    c6e2:	0003      	movs	r3, r0
    c6e4:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c6e6:	230f      	movs	r3, #15
    c6e8:	18fb      	adds	r3, r7, r3
    c6ea:	781b      	ldrb	r3, [r3, #0]
    c6ec:	b25b      	sxtb	r3, r3
    c6ee:	2b01      	cmp	r3, #1
    c6f0:	d104      	bne.n	c6fc <nm_spi_read_reg_with_ret+0x34>
    c6f2:	230f      	movs	r3, #15
    c6f4:	18fb      	adds	r3, r7, r3
    c6f6:	2200      	movs	r2, #0
    c6f8:	701a      	strb	r2, [r3, #0]
    c6fa:	e003      	b.n	c704 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c6fc:	230f      	movs	r3, #15
    c6fe:	18fb      	adds	r3, r7, r3
    c700:	22fa      	movs	r2, #250	; 0xfa
    c702:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    c704:	230f      	movs	r3, #15
    c706:	18fb      	adds	r3, r7, r3
    c708:	781b      	ldrb	r3, [r3, #0]
    c70a:	b25b      	sxtb	r3, r3
}
    c70c:	0018      	movs	r0, r3
    c70e:	46bd      	mov	sp, r7
    c710:	b005      	add	sp, #20
    c712:	bd90      	pop	{r4, r7, pc}
    c714:	0000c0d1 	.word	0x0000c0d1

0000c718 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    c718:	b590      	push	{r4, r7, lr}
    c71a:	b085      	sub	sp, #20
    c71c:	af00      	add	r7, sp, #0
    c71e:	6078      	str	r0, [r7, #4]
    c720:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    c722:	230f      	movs	r3, #15
    c724:	18fc      	adds	r4, r7, r3
    c726:	683a      	ldr	r2, [r7, #0]
    c728:	687b      	ldr	r3, [r7, #4]
    c72a:	0011      	movs	r1, r2
    c72c:	0018      	movs	r0, r3
    c72e:	4b0d      	ldr	r3, [pc, #52]	; (c764 <nm_spi_write_reg+0x4c>)
    c730:	4798      	blx	r3
    c732:	0003      	movs	r3, r0
    c734:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c736:	230f      	movs	r3, #15
    c738:	18fb      	adds	r3, r7, r3
    c73a:	781b      	ldrb	r3, [r3, #0]
    c73c:	b25b      	sxtb	r3, r3
    c73e:	2b01      	cmp	r3, #1
    c740:	d104      	bne.n	c74c <nm_spi_write_reg+0x34>
    c742:	230f      	movs	r3, #15
    c744:	18fb      	adds	r3, r7, r3
    c746:	2200      	movs	r2, #0
    c748:	701a      	strb	r2, [r3, #0]
    c74a:	e003      	b.n	c754 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c74c:	230f      	movs	r3, #15
    c74e:	18fb      	adds	r3, r7, r3
    c750:	22fa      	movs	r2, #250	; 0xfa
    c752:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    c754:	230f      	movs	r3, #15
    c756:	18fb      	adds	r3, r7, r3
    c758:	781b      	ldrb	r3, [r3, #0]
    c75a:	b25b      	sxtb	r3, r3
}
    c75c:	0018      	movs	r0, r3
    c75e:	46bd      	mov	sp, r7
    c760:	b005      	add	sp, #20
    c762:	bd90      	pop	{r4, r7, pc}
    c764:	0000bd51 	.word	0x0000bd51

0000c768 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    c768:	b590      	push	{r4, r7, lr}
    c76a:	b087      	sub	sp, #28
    c76c:	af00      	add	r7, sp, #0
    c76e:	60f8      	str	r0, [r7, #12]
    c770:	60b9      	str	r1, [r7, #8]
    c772:	1dbb      	adds	r3, r7, #6
    c774:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    c776:	2317      	movs	r3, #23
    c778:	18fc      	adds	r4, r7, r3
    c77a:	1dbb      	adds	r3, r7, #6
    c77c:	881a      	ldrh	r2, [r3, #0]
    c77e:	68b9      	ldr	r1, [r7, #8]
    c780:	68fb      	ldr	r3, [r7, #12]
    c782:	0018      	movs	r0, r3
    c784:	4b0d      	ldr	r3, [pc, #52]	; (c7bc <nm_spi_read_block+0x54>)
    c786:	4798      	blx	r3
    c788:	0003      	movs	r3, r0
    c78a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c78c:	2317      	movs	r3, #23
    c78e:	18fb      	adds	r3, r7, r3
    c790:	781b      	ldrb	r3, [r3, #0]
    c792:	b25b      	sxtb	r3, r3
    c794:	2b01      	cmp	r3, #1
    c796:	d104      	bne.n	c7a2 <nm_spi_read_block+0x3a>
    c798:	2317      	movs	r3, #23
    c79a:	18fb      	adds	r3, r7, r3
    c79c:	2200      	movs	r2, #0
    c79e:	701a      	strb	r2, [r3, #0]
    c7a0:	e003      	b.n	c7aa <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c7a2:	2317      	movs	r3, #23
    c7a4:	18fb      	adds	r3, r7, r3
    c7a6:	22fa      	movs	r2, #250	; 0xfa
    c7a8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    c7aa:	2317      	movs	r3, #23
    c7ac:	18fb      	adds	r3, r7, r3
    c7ae:	781b      	ldrb	r3, [r3, #0]
    c7b0:	b25b      	sxtb	r3, r3
}
    c7b2:	0018      	movs	r0, r3
    c7b4:	46bd      	mov	sp, r7
    c7b6:	b007      	add	sp, #28
    c7b8:	bd90      	pop	{r4, r7, pc}
    c7ba:	46c0      	nop			; (mov r8, r8)
    c7bc:	0000c2d9 	.word	0x0000c2d9

0000c7c0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    c7c0:	b590      	push	{r4, r7, lr}
    c7c2:	b087      	sub	sp, #28
    c7c4:	af00      	add	r7, sp, #0
    c7c6:	60f8      	str	r0, [r7, #12]
    c7c8:	60b9      	str	r1, [r7, #8]
    c7ca:	1dbb      	adds	r3, r7, #6
    c7cc:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    c7ce:	2317      	movs	r3, #23
    c7d0:	18fc      	adds	r4, r7, r3
    c7d2:	1dbb      	adds	r3, r7, #6
    c7d4:	881a      	ldrh	r2, [r3, #0]
    c7d6:	68b9      	ldr	r1, [r7, #8]
    c7d8:	68fb      	ldr	r3, [r7, #12]
    c7da:	0018      	movs	r0, r3
    c7dc:	4b0d      	ldr	r3, [pc, #52]	; (c814 <nm_spi_write_block+0x54>)
    c7de:	4798      	blx	r3
    c7e0:	0003      	movs	r3, r0
    c7e2:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    c7e4:	2317      	movs	r3, #23
    c7e6:	18fb      	adds	r3, r7, r3
    c7e8:	781b      	ldrb	r3, [r3, #0]
    c7ea:	b25b      	sxtb	r3, r3
    c7ec:	2b01      	cmp	r3, #1
    c7ee:	d104      	bne.n	c7fa <nm_spi_write_block+0x3a>
    c7f0:	2317      	movs	r3, #23
    c7f2:	18fb      	adds	r3, r7, r3
    c7f4:	2200      	movs	r2, #0
    c7f6:	701a      	strb	r2, [r3, #0]
    c7f8:	e003      	b.n	c802 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    c7fa:	2317      	movs	r3, #23
    c7fc:	18fb      	adds	r3, r7, r3
    c7fe:	22fa      	movs	r2, #250	; 0xfa
    c800:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    c802:	2317      	movs	r3, #23
    c804:	18fb      	adds	r3, r7, r3
    c806:	781b      	ldrb	r3, [r3, #0]
    c808:	b25b      	sxtb	r3, r3
}
    c80a:	0018      	movs	r0, r3
    c80c:	46bd      	mov	sp, r7
    c80e:	b007      	add	sp, #28
    c810:	bd90      	pop	{r4, r7, pc}
    c812:	46c0      	nop			; (mov r8, r8)
    c814:	0000bedd 	.word	0x0000bedd

0000c818 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    c818:	b590      	push	{r4, r7, lr}
    c81a:	b089      	sub	sp, #36	; 0x24
    c81c:	af00      	add	r7, sp, #0
    c81e:	60b9      	str	r1, [r7, #8]
    c820:	0011      	movs	r1, r2
    c822:	607b      	str	r3, [r7, #4]
    c824:	230f      	movs	r3, #15
    c826:	18fb      	adds	r3, r7, r3
    c828:	1c02      	adds	r2, r0, #0
    c82a:	701a      	strb	r2, [r3, #0]
    c82c:	230e      	movs	r3, #14
    c82e:	18fb      	adds	r3, r7, r3
    c830:	1c0a      	adds	r2, r1, #0
    c832:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    c834:	2330      	movs	r3, #48	; 0x30
    c836:	18fb      	adds	r3, r7, r3
    c838:	881b      	ldrh	r3, [r3, #0]
    c83a:	2b00      	cmp	r3, #0
    c83c:	d100      	bne.n	c840 <Socket_ReadSocketData+0x28>
    c83e:	e0d6      	b.n	c9ee <Socket_ReadSocketData+0x1d6>
    c840:	230f      	movs	r3, #15
    c842:	18fb      	adds	r3, r7, r3
    c844:	2200      	movs	r2, #0
    c846:	569a      	ldrsb	r2, [r3, r2]
    c848:	4b6b      	ldr	r3, [pc, #428]	; (c9f8 <Socket_ReadSocketData+0x1e0>)
    c84a:	0112      	lsls	r2, r2, #4
    c84c:	58d3      	ldr	r3, [r2, r3]
    c84e:	2b00      	cmp	r3, #0
    c850:	d100      	bne.n	c854 <Socket_ReadSocketData+0x3c>
    c852:	e0cc      	b.n	c9ee <Socket_ReadSocketData+0x1d6>
    c854:	230f      	movs	r3, #15
    c856:	18fb      	adds	r3, r7, r3
    c858:	781b      	ldrb	r3, [r3, #0]
    c85a:	b25b      	sxtb	r3, r3
    c85c:	4a66      	ldr	r2, [pc, #408]	; (c9f8 <Socket_ReadSocketData+0x1e0>)
    c85e:	011b      	lsls	r3, r3, #4
    c860:	18d3      	adds	r3, r2, r3
    c862:	3304      	adds	r3, #4
    c864:	881b      	ldrh	r3, [r3, #0]
    c866:	b29b      	uxth	r3, r3
    c868:	2b00      	cmp	r3, #0
    c86a:	d100      	bne.n	c86e <Socket_ReadSocketData+0x56>
    c86c:	e0bf      	b.n	c9ee <Socket_ReadSocketData+0x1d6>
    c86e:	230f      	movs	r3, #15
    c870:	18fb      	adds	r3, r7, r3
    c872:	781b      	ldrb	r3, [r3, #0]
    c874:	b25b      	sxtb	r3, r3
    c876:	4a60      	ldr	r2, [pc, #384]	; (c9f8 <Socket_ReadSocketData+0x1e0>)
    c878:	011b      	lsls	r3, r3, #4
    c87a:	18d3      	adds	r3, r2, r3
    c87c:	330a      	adds	r3, #10
    c87e:	781b      	ldrb	r3, [r3, #0]
    c880:	b2db      	uxtb	r3, r3
    c882:	2b01      	cmp	r3, #1
    c884:	d000      	beq.n	c888 <Socket_ReadSocketData+0x70>
    c886:	e0b2      	b.n	c9ee <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    c888:	687b      	ldr	r3, [r7, #4]
    c88a:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    c88c:	68bb      	ldr	r3, [r7, #8]
    c88e:	2230      	movs	r2, #48	; 0x30
    c890:	18ba      	adds	r2, r7, r2
    c892:	8812      	ldrh	r2, [r2, #0]
    c894:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    c896:	2319      	movs	r3, #25
    c898:	18fb      	adds	r3, r7, r3
    c89a:	2201      	movs	r2, #1
    c89c:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    c89e:	231a      	movs	r3, #26
    c8a0:	18fb      	adds	r3, r7, r3
    c8a2:	2230      	movs	r2, #48	; 0x30
    c8a4:	18ba      	adds	r2, r7, r2
    c8a6:	8812      	ldrh	r2, [r2, #0]
    c8a8:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    c8aa:	230f      	movs	r3, #15
    c8ac:	18fb      	adds	r3, r7, r3
    c8ae:	781b      	ldrb	r3, [r3, #0]
    c8b0:	b25b      	sxtb	r3, r3
    c8b2:	4a51      	ldr	r2, [pc, #324]	; (c9f8 <Socket_ReadSocketData+0x1e0>)
    c8b4:	011b      	lsls	r3, r3, #4
    c8b6:	18d3      	adds	r3, r2, r3
    c8b8:	3304      	adds	r3, #4
    c8ba:	881b      	ldrh	r3, [r3, #0]
    c8bc:	b29b      	uxth	r3, r3
    c8be:	221a      	movs	r2, #26
    c8c0:	18ba      	adds	r2, r7, r2
    c8c2:	8812      	ldrh	r2, [r2, #0]
    c8c4:	1ad3      	subs	r3, r2, r3
    c8c6:	b29a      	uxth	r2, r3
    c8c8:	2316      	movs	r3, #22
    c8ca:	18fb      	adds	r3, r7, r3
    c8cc:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    c8ce:	2316      	movs	r3, #22
    c8d0:	18fb      	adds	r3, r7, r3
    c8d2:	2200      	movs	r2, #0
    c8d4:	5e9b      	ldrsh	r3, [r3, r2]
    c8d6:	2b00      	cmp	r3, #0
    c8d8:	dd0f      	ble.n	c8fa <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    c8da:	2319      	movs	r3, #25
    c8dc:	18fb      	adds	r3, r7, r3
    c8de:	2200      	movs	r2, #0
    c8e0:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    c8e2:	230f      	movs	r3, #15
    c8e4:	18fb      	adds	r3, r7, r3
    c8e6:	2200      	movs	r2, #0
    c8e8:	569a      	ldrsb	r2, [r3, r2]
    c8ea:	231a      	movs	r3, #26
    c8ec:	18fb      	adds	r3, r7, r3
    c8ee:	4942      	ldr	r1, [pc, #264]	; (c9f8 <Socket_ReadSocketData+0x1e0>)
    c8f0:	0112      	lsls	r2, r2, #4
    c8f2:	188a      	adds	r2, r1, r2
    c8f4:	3204      	adds	r2, #4
    c8f6:	8812      	ldrh	r2, [r2, #0]
    c8f8:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    c8fa:	230f      	movs	r3, #15
    c8fc:	18fb      	adds	r3, r7, r3
    c8fe:	2200      	movs	r2, #0
    c900:	569a      	ldrsb	r2, [r3, r2]
    c902:	4b3d      	ldr	r3, [pc, #244]	; (c9f8 <Socket_ReadSocketData+0x1e0>)
    c904:	0112      	lsls	r2, r2, #4
    c906:	58d1      	ldr	r1, [r2, r3]
    c908:	2319      	movs	r3, #25
    c90a:	18fb      	adds	r3, r7, r3
    c90c:	781c      	ldrb	r4, [r3, #0]
    c90e:	231a      	movs	r3, #26
    c910:	18fb      	adds	r3, r7, r3
    c912:	881a      	ldrh	r2, [r3, #0]
    c914:	69f8      	ldr	r0, [r7, #28]
    c916:	0023      	movs	r3, r4
    c918:	4c38      	ldr	r4, [pc, #224]	; (c9fc <Socket_ReadSocketData+0x1e4>)
    c91a:	47a0      	blx	r4
    c91c:	1e03      	subs	r3, r0, #0
    c91e:	d14f      	bne.n	c9c0 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    c920:	230f      	movs	r3, #15
    c922:	18fb      	adds	r3, r7, r3
    c924:	2200      	movs	r2, #0
    c926:	569a      	ldrsb	r2, [r3, r2]
    c928:	4b33      	ldr	r3, [pc, #204]	; (c9f8 <Socket_ReadSocketData+0x1e0>)
    c92a:	0112      	lsls	r2, r2, #4
    c92c:	58d2      	ldr	r2, [r2, r3]
    c92e:	68bb      	ldr	r3, [r7, #8]
    c930:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    c932:	231a      	movs	r3, #26
    c934:	18fb      	adds	r3, r7, r3
    c936:	2200      	movs	r2, #0
    c938:	5e9a      	ldrsh	r2, [r3, r2]
    c93a:	68bb      	ldr	r3, [r7, #8]
    c93c:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    c93e:	68bb      	ldr	r3, [r7, #8]
    c940:	88da      	ldrh	r2, [r3, #6]
    c942:	231a      	movs	r3, #26
    c944:	18fb      	adds	r3, r7, r3
    c946:	881b      	ldrh	r3, [r3, #0]
    c948:	1ad3      	subs	r3, r2, r3
    c94a:	b29a      	uxth	r2, r3
    c94c:	68bb      	ldr	r3, [r7, #8]
    c94e:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    c950:	4b2b      	ldr	r3, [pc, #172]	; (ca00 <Socket_ReadSocketData+0x1e8>)
    c952:	681b      	ldr	r3, [r3, #0]
    c954:	2b00      	cmp	r3, #0
    c956:	d00b      	beq.n	c970 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    c958:	4b29      	ldr	r3, [pc, #164]	; (ca00 <Socket_ReadSocketData+0x1e8>)
    c95a:	681b      	ldr	r3, [r3, #0]
    c95c:	68bc      	ldr	r4, [r7, #8]
    c95e:	220e      	movs	r2, #14
    c960:	18ba      	adds	r2, r7, r2
    c962:	7811      	ldrb	r1, [r2, #0]
    c964:	220f      	movs	r2, #15
    c966:	18ba      	adds	r2, r7, r2
    c968:	2000      	movs	r0, #0
    c96a:	5610      	ldrsb	r0, [r2, r0]
    c96c:	0022      	movs	r2, r4
    c96e:	4798      	blx	r3

				u16ReadCount -= u16Read;
    c970:	2330      	movs	r3, #48	; 0x30
    c972:	18f9      	adds	r1, r7, r3
    c974:	2330      	movs	r3, #48	; 0x30
    c976:	18fa      	adds	r2, r7, r3
    c978:	231a      	movs	r3, #26
    c97a:	18fb      	adds	r3, r7, r3
    c97c:	8812      	ldrh	r2, [r2, #0]
    c97e:	881b      	ldrh	r3, [r3, #0]
    c980:	1ad3      	subs	r3, r2, r3
    c982:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    c984:	231a      	movs	r3, #26
    c986:	18fb      	adds	r3, r7, r3
    c988:	881b      	ldrh	r3, [r3, #0]
    c98a:	69fa      	ldr	r2, [r7, #28]
    c98c:	18d3      	adds	r3, r2, r3
    c98e:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    c990:	230f      	movs	r3, #15
    c992:	18fb      	adds	r3, r7, r3
    c994:	781b      	ldrb	r3, [r3, #0]
    c996:	b25b      	sxtb	r3, r3
    c998:	4a17      	ldr	r2, [pc, #92]	; (c9f8 <Socket_ReadSocketData+0x1e0>)
    c99a:	011b      	lsls	r3, r3, #4
    c99c:	18d3      	adds	r3, r2, r3
    c99e:	330a      	adds	r3, #10
    c9a0:	781b      	ldrb	r3, [r3, #0]
    c9a2:	b2db      	uxtb	r3, r3
    c9a4:	2b00      	cmp	r3, #0
    c9a6:	d11b      	bne.n	c9e0 <Socket_ReadSocketData+0x1c8>
    c9a8:	2330      	movs	r3, #48	; 0x30
    c9aa:	18fb      	adds	r3, r7, r3
    c9ac:	881b      	ldrh	r3, [r3, #0]
    c9ae:	2b00      	cmp	r3, #0
    c9b0:	d016      	beq.n	c9e0 <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    c9b2:	2301      	movs	r3, #1
    c9b4:	2200      	movs	r2, #0
    c9b6:	2100      	movs	r1, #0
    c9b8:	2000      	movs	r0, #0
    c9ba:	4c10      	ldr	r4, [pc, #64]	; (c9fc <Socket_ReadSocketData+0x1e4>)
    c9bc:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    c9be:	e016      	b.n	c9ee <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    c9c0:	4b10      	ldr	r3, [pc, #64]	; (ca04 <Socket_ReadSocketData+0x1ec>)
    c9c2:	0018      	movs	r0, r3
    c9c4:	4b10      	ldr	r3, [pc, #64]	; (ca08 <Socket_ReadSocketData+0x1f0>)
    c9c6:	4798      	blx	r3
    c9c8:	2330      	movs	r3, #48	; 0x30
    c9ca:	18fb      	adds	r3, r7, r3
    c9cc:	881a      	ldrh	r2, [r3, #0]
    c9ce:	4b0f      	ldr	r3, [pc, #60]	; (ca0c <Socket_ReadSocketData+0x1f4>)
    c9d0:	0011      	movs	r1, r2
    c9d2:	0018      	movs	r0, r3
    c9d4:	4b0c      	ldr	r3, [pc, #48]	; (ca08 <Socket_ReadSocketData+0x1f0>)
    c9d6:	4798      	blx	r3
    c9d8:	200d      	movs	r0, #13
    c9da:	4b0d      	ldr	r3, [pc, #52]	; (ca10 <Socket_ReadSocketData+0x1f8>)
    c9dc:	4798      	blx	r3
				break;
    c9de:	e006      	b.n	c9ee <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    c9e0:	2330      	movs	r3, #48	; 0x30
    c9e2:	18fb      	adds	r3, r7, r3
    c9e4:	881b      	ldrh	r3, [r3, #0]
    c9e6:	2b00      	cmp	r3, #0
    c9e8:	d000      	beq.n	c9ec <Socket_ReadSocketData+0x1d4>
    c9ea:	e754      	b.n	c896 <Socket_ReadSocketData+0x7e>
	}
}
    c9ec:	e7ff      	b.n	c9ee <Socket_ReadSocketData+0x1d6>
    c9ee:	46c0      	nop			; (mov r8, r8)
    c9f0:	46bd      	mov	sp, r7
    c9f2:	b009      	add	sp, #36	; 0x24
    c9f4:	bd90      	pop	{r4, r7, pc}
    c9f6:	46c0      	nop			; (mov r8, r8)
    c9f8:	200002a4 	.word	0x200002a4
    c9fc:	00009779 	.word	0x00009779
    ca00:	20000354 	.word	0x20000354
    ca04:	00019318 	.word	0x00019318
    ca08:	00016db1 	.word	0x00016db1
    ca0c:	00019324 	.word	0x00019324
    ca10:	00016de5 	.word	0x00016de5

0000ca14 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    ca14:	b590      	push	{r4, r7, lr}
    ca16:	b0bb      	sub	sp, #236	; 0xec
    ca18:	af02      	add	r7, sp, #8
    ca1a:	603a      	str	r2, [r7, #0]
    ca1c:	1dfb      	adds	r3, r7, #7
    ca1e:	1c02      	adds	r2, r0, #0
    ca20:	701a      	strb	r2, [r3, #0]
    ca22:	1d3b      	adds	r3, r7, #4
    ca24:	1c0a      	adds	r2, r1, #0
    ca26:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    ca28:	1dfb      	adds	r3, r7, #7
    ca2a:	781b      	ldrb	r3, [r3, #0]
    ca2c:	2b41      	cmp	r3, #65	; 0x41
    ca2e:	d003      	beq.n	ca38 <m2m_ip_cb+0x24>
    ca30:	1dfb      	adds	r3, r7, #7
    ca32:	781b      	ldrb	r3, [r3, #0]
    ca34:	2b54      	cmp	r3, #84	; 0x54
    ca36:	d120      	bne.n	ca7a <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    ca38:	23cc      	movs	r3, #204	; 0xcc
    ca3a:	18f9      	adds	r1, r7, r3
    ca3c:	6838      	ldr	r0, [r7, #0]
    ca3e:	2300      	movs	r3, #0
    ca40:	2204      	movs	r2, #4
    ca42:	4c98      	ldr	r4, [pc, #608]	; (cca4 <m2m_ip_cb+0x290>)
    ca44:	47a0      	blx	r4
    ca46:	1e03      	subs	r3, r0, #0
    ca48:	d000      	beq.n	ca4c <m2m_ip_cb+0x38>
    ca4a:	e275      	b.n	cf38 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    ca4c:	23cc      	movs	r3, #204	; 0xcc
    ca4e:	18fb      	adds	r3, r7, r3
    ca50:	2201      	movs	r2, #1
    ca52:	569a      	ldrsb	r2, [r3, r2]
    ca54:	23c8      	movs	r3, #200	; 0xc8
    ca56:	18fb      	adds	r3, r7, r3
    ca58:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    ca5a:	4b93      	ldr	r3, [pc, #588]	; (cca8 <m2m_ip_cb+0x294>)
    ca5c:	681b      	ldr	r3, [r3, #0]
    ca5e:	2b00      	cmp	r3, #0
    ca60:	d100      	bne.n	ca64 <m2m_ip_cb+0x50>
    ca62:	e269      	b.n	cf38 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    ca64:	4b90      	ldr	r3, [pc, #576]	; (cca8 <m2m_ip_cb+0x294>)
    ca66:	681b      	ldr	r3, [r3, #0]
    ca68:	22cc      	movs	r2, #204	; 0xcc
    ca6a:	18ba      	adds	r2, r7, r2
    ca6c:	2000      	movs	r0, #0
    ca6e:	5610      	ldrsb	r0, [r2, r0]
    ca70:	22c8      	movs	r2, #200	; 0xc8
    ca72:	18ba      	adds	r2, r7, r2
    ca74:	2101      	movs	r1, #1
    ca76:	4798      	blx	r3
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
	{
    ca78:	e25e      	b.n	cf38 <m2m_ip_cb+0x524>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    ca7a:	1dfb      	adds	r3, r7, #7
    ca7c:	781b      	ldrb	r3, [r3, #0]
    ca7e:	2b42      	cmp	r3, #66	; 0x42
    ca80:	d120      	bne.n	cac4 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    ca82:	23c4      	movs	r3, #196	; 0xc4
    ca84:	18f9      	adds	r1, r7, r3
    ca86:	6838      	ldr	r0, [r7, #0]
    ca88:	2300      	movs	r3, #0
    ca8a:	2204      	movs	r2, #4
    ca8c:	4c85      	ldr	r4, [pc, #532]	; (cca4 <m2m_ip_cb+0x290>)
    ca8e:	47a0      	blx	r4
    ca90:	1e03      	subs	r3, r0, #0
    ca92:	d000      	beq.n	ca96 <m2m_ip_cb+0x82>
    ca94:	e257      	b.n	cf46 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    ca96:	23c4      	movs	r3, #196	; 0xc4
    ca98:	18fb      	adds	r3, r7, r3
    ca9a:	2201      	movs	r2, #1
    ca9c:	569a      	ldrsb	r2, [r3, r2]
    ca9e:	23c0      	movs	r3, #192	; 0xc0
    caa0:	18fb      	adds	r3, r7, r3
    caa2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    caa4:	4b80      	ldr	r3, [pc, #512]	; (cca8 <m2m_ip_cb+0x294>)
    caa6:	681b      	ldr	r3, [r3, #0]
    caa8:	2b00      	cmp	r3, #0
    caaa:	d100      	bne.n	caae <m2m_ip_cb+0x9a>
    caac:	e24b      	b.n	cf46 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    caae:	4b7e      	ldr	r3, [pc, #504]	; (cca8 <m2m_ip_cb+0x294>)
    cab0:	681b      	ldr	r3, [r3, #0]
    cab2:	22c4      	movs	r2, #196	; 0xc4
    cab4:	18ba      	adds	r2, r7, r2
    cab6:	2000      	movs	r0, #0
    cab8:	5610      	ldrsb	r0, [r2, r0]
    caba:	22c0      	movs	r2, #192	; 0xc0
    cabc:	18ba      	adds	r2, r7, r2
    cabe:	2102      	movs	r1, #2
    cac0:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    cac2:	e240      	b.n	cf46 <m2m_ip_cb+0x532>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    cac4:	1dfb      	adds	r3, r7, #7
    cac6:	781b      	ldrb	r3, [r3, #0]
    cac8:	2b43      	cmp	r3, #67	; 0x43
    caca:	d000      	beq.n	cace <m2m_ip_cb+0xba>
    cacc:	e086      	b.n	cbdc <m2m_ip_cb+0x1c8>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    cace:	23b4      	movs	r3, #180	; 0xb4
    cad0:	18f9      	adds	r1, r7, r3
    cad2:	6838      	ldr	r0, [r7, #0]
    cad4:	2300      	movs	r3, #0
    cad6:	220c      	movs	r2, #12
    cad8:	4c72      	ldr	r4, [pc, #456]	; (cca4 <m2m_ip_cb+0x290>)
    cada:	47a0      	blx	r4
    cadc:	1e03      	subs	r3, r0, #0
    cade:	d000      	beq.n	cae2 <m2m_ip_cb+0xce>
    cae0:	e231      	b.n	cf46 <m2m_ip_cb+0x532>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    cae2:	23b4      	movs	r3, #180	; 0xb4
    cae4:	18fb      	adds	r3, r7, r3
    cae6:	7a5b      	ldrb	r3, [r3, #9]
    cae8:	b25b      	sxtb	r3, r3
    caea:	2b00      	cmp	r3, #0
    caec:	db4f      	blt.n	cb8e <m2m_ip_cb+0x17a>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    caee:	23b4      	movs	r3, #180	; 0xb4
    caf0:	18fb      	adds	r3, r7, r3
    caf2:	7a5b      	ldrb	r3, [r3, #9]
    caf4:	b25b      	sxtb	r3, r3
    caf6:	0018      	movs	r0, r3
    caf8:	23b4      	movs	r3, #180	; 0xb4
    cafa:	18fb      	adds	r3, r7, r3
    cafc:	7a1b      	ldrb	r3, [r3, #8]
    cafe:	b25b      	sxtb	r3, r3
    cb00:	4a6a      	ldr	r2, [pc, #424]	; (ccac <m2m_ip_cb+0x298>)
    cb02:	011b      	lsls	r3, r3, #4
    cb04:	18d3      	adds	r3, r2, r3
    cb06:	330b      	adds	r3, #11
    cb08:	781b      	ldrb	r3, [r3, #0]
    cb0a:	b2d9      	uxtb	r1, r3
    cb0c:	4a67      	ldr	r2, [pc, #412]	; (ccac <m2m_ip_cb+0x298>)
    cb0e:	0103      	lsls	r3, r0, #4
    cb10:	18d3      	adds	r3, r2, r3
    cb12:	330b      	adds	r3, #11
    cb14:	1c0a      	adds	r2, r1, #0
    cb16:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    cb18:	23b4      	movs	r3, #180	; 0xb4
    cb1a:	18fb      	adds	r3, r7, r3
    cb1c:	7a5b      	ldrb	r3, [r3, #9]
    cb1e:	b25b      	sxtb	r3, r3
    cb20:	4a62      	ldr	r2, [pc, #392]	; (ccac <m2m_ip_cb+0x298>)
    cb22:	011b      	lsls	r3, r3, #4
    cb24:	18d3      	adds	r3, r2, r3
    cb26:	330a      	adds	r3, #10
    cb28:	2201      	movs	r2, #1
    cb2a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    cb2c:	23b4      	movs	r3, #180	; 0xb4
    cb2e:	18fb      	adds	r3, r7, r3
    cb30:	7a5b      	ldrb	r3, [r3, #9]
    cb32:	b25b      	sxtb	r3, r3
    cb34:	0018      	movs	r0, r3
    cb36:	23b4      	movs	r3, #180	; 0xb4
    cb38:	18fb      	adds	r3, r7, r3
    cb3a:	895b      	ldrh	r3, [r3, #10]
    cb3c:	3b08      	subs	r3, #8
    cb3e:	b299      	uxth	r1, r3
    cb40:	4a5a      	ldr	r2, [pc, #360]	; (ccac <m2m_ip_cb+0x298>)
    cb42:	0103      	lsls	r3, r0, #4
    cb44:	18d3      	adds	r3, r2, r3
    cb46:	3308      	adds	r3, #8
    cb48:	1c0a      	adds	r2, r1, #0
    cb4a:	801a      	strh	r2, [r3, #0]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    cb4c:	4b58      	ldr	r3, [pc, #352]	; (ccb0 <m2m_ip_cb+0x29c>)
    cb4e:	881b      	ldrh	r3, [r3, #0]
    cb50:	b29b      	uxth	r3, r3
    cb52:	3301      	adds	r3, #1
    cb54:	b29a      	uxth	r2, r3
    cb56:	4b56      	ldr	r3, [pc, #344]	; (ccb0 <m2m_ip_cb+0x29c>)
    cb58:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    cb5a:	4b55      	ldr	r3, [pc, #340]	; (ccb0 <m2m_ip_cb+0x29c>)
    cb5c:	881b      	ldrh	r3, [r3, #0]
    cb5e:	b29b      	uxth	r3, r3
    cb60:	2b00      	cmp	r3, #0
    cb62:	d106      	bne.n	cb72 <m2m_ip_cb+0x15e>
					++gu16SessionID;
    cb64:	4b52      	ldr	r3, [pc, #328]	; (ccb0 <m2m_ip_cb+0x29c>)
    cb66:	881b      	ldrh	r3, [r3, #0]
    cb68:	b29b      	uxth	r3, r3
    cb6a:	3301      	adds	r3, #1
    cb6c:	b29a      	uxth	r2, r3
    cb6e:	4b50      	ldr	r3, [pc, #320]	; (ccb0 <m2m_ip_cb+0x29c>)
    cb70:	801a      	strh	r2, [r3, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    cb72:	23b4      	movs	r3, #180	; 0xb4
    cb74:	18fb      	adds	r3, r7, r3
    cb76:	7a5b      	ldrb	r3, [r3, #9]
    cb78:	b25b      	sxtb	r3, r3
    cb7a:	0018      	movs	r0, r3
    cb7c:	4b4c      	ldr	r3, [pc, #304]	; (ccb0 <m2m_ip_cb+0x29c>)
    cb7e:	881b      	ldrh	r3, [r3, #0]
    cb80:	b299      	uxth	r1, r3
    cb82:	4a4a      	ldr	r2, [pc, #296]	; (ccac <m2m_ip_cb+0x298>)
    cb84:	0103      	lsls	r3, r0, #4
    cb86:	18d3      	adds	r3, r2, r3
    cb88:	3306      	adds	r3, #6
    cb8a:	1c0a      	adds	r2, r1, #0
    cb8c:	801a      	strh	r2, [r3, #0]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    cb8e:	23b4      	movs	r3, #180	; 0xb4
    cb90:	18fb      	adds	r3, r7, r3
    cb92:	2209      	movs	r2, #9
    cb94:	569a      	ldrsb	r2, [r3, r2]
    cb96:	23a0      	movs	r3, #160	; 0xa0
    cb98:	18fb      	adds	r3, r7, r3
    cb9a:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    cb9c:	23a0      	movs	r3, #160	; 0xa0
    cb9e:	18fb      	adds	r3, r7, r3
    cba0:	2202      	movs	r2, #2
    cba2:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    cba4:	23b4      	movs	r3, #180	; 0xb4
    cba6:	18fb      	adds	r3, r7, r3
    cba8:	885a      	ldrh	r2, [r3, #2]
    cbaa:	23a0      	movs	r3, #160	; 0xa0
    cbac:	18fb      	adds	r3, r7, r3
    cbae:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    cbb0:	23b4      	movs	r3, #180	; 0xb4
    cbb2:	18fb      	adds	r3, r7, r3
    cbb4:	685a      	ldr	r2, [r3, #4]
    cbb6:	23a0      	movs	r3, #160	; 0xa0
    cbb8:	18fb      	adds	r3, r7, r3
    cbba:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    cbbc:	4b3a      	ldr	r3, [pc, #232]	; (cca8 <m2m_ip_cb+0x294>)
    cbbe:	681b      	ldr	r3, [r3, #0]
    cbc0:	2b00      	cmp	r3, #0
    cbc2:	d100      	bne.n	cbc6 <m2m_ip_cb+0x1b2>
    cbc4:	e1bf      	b.n	cf46 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    cbc6:	4b38      	ldr	r3, [pc, #224]	; (cca8 <m2m_ip_cb+0x294>)
    cbc8:	681b      	ldr	r3, [r3, #0]
    cbca:	22b4      	movs	r2, #180	; 0xb4
    cbcc:	18ba      	adds	r2, r7, r2
    cbce:	2008      	movs	r0, #8
    cbd0:	5610      	ldrsb	r0, [r2, r0]
    cbd2:	22a0      	movs	r2, #160	; 0xa0
    cbd4:	18ba      	adds	r2, r7, r2
    cbd6:	2104      	movs	r1, #4
    cbd8:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    cbda:	e1b4      	b.n	cf46 <m2m_ip_cb+0x532>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    cbdc:	1dfb      	adds	r3, r7, #7
    cbde:	781b      	ldrb	r3, [r3, #0]
    cbe0:	2b44      	cmp	r3, #68	; 0x44
    cbe2:	d003      	beq.n	cbec <m2m_ip_cb+0x1d8>
    cbe4:	1dfb      	adds	r3, r7, #7
    cbe6:	781b      	ldrb	r3, [r3, #0]
    cbe8:	2b4b      	cmp	r3, #75	; 0x4b
    cbea:	d13d      	bne.n	cc68 <m2m_ip_cb+0x254>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    cbec:	239c      	movs	r3, #156	; 0x9c
    cbee:	18f9      	adds	r1, r7, r3
    cbf0:	6838      	ldr	r0, [r7, #0]
    cbf2:	2300      	movs	r3, #0
    cbf4:	2204      	movs	r2, #4
    cbf6:	4c2b      	ldr	r4, [pc, #172]	; (cca4 <m2m_ip_cb+0x290>)
    cbf8:	47a0      	blx	r4
    cbfa:	1e03      	subs	r3, r0, #0
    cbfc:	d000      	beq.n	cc00 <m2m_ip_cb+0x1ec>
    cbfe:	e19d      	b.n	cf3c <m2m_ip_cb+0x528>
		{
			strConnMsg.sock		= strConnectReply.sock;
    cc00:	239c      	movs	r3, #156	; 0x9c
    cc02:	18fb      	adds	r3, r7, r3
    cc04:	2200      	movs	r2, #0
    cc06:	569a      	ldrsb	r2, [r3, r2]
    cc08:	2398      	movs	r3, #152	; 0x98
    cc0a:	18fb      	adds	r3, r7, r3
    cc0c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    cc0e:	239c      	movs	r3, #156	; 0x9c
    cc10:	18fb      	adds	r3, r7, r3
    cc12:	2201      	movs	r2, #1
    cc14:	569a      	ldrsb	r2, [r3, r2]
    cc16:	2398      	movs	r3, #152	; 0x98
    cc18:	18fb      	adds	r3, r7, r3
    cc1a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    cc1c:	239c      	movs	r3, #156	; 0x9c
    cc1e:	18fb      	adds	r3, r7, r3
    cc20:	785b      	ldrb	r3, [r3, #1]
    cc22:	b25b      	sxtb	r3, r3
    cc24:	2b00      	cmp	r3, #0
    cc26:	d10f      	bne.n	cc48 <m2m_ip_cb+0x234>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    cc28:	239c      	movs	r3, #156	; 0x9c
    cc2a:	18fb      	adds	r3, r7, r3
    cc2c:	781b      	ldrb	r3, [r3, #0]
    cc2e:	b25b      	sxtb	r3, r3
    cc30:	0018      	movs	r0, r3
    cc32:	239c      	movs	r3, #156	; 0x9c
    cc34:	18fb      	adds	r3, r7, r3
    cc36:	885b      	ldrh	r3, [r3, #2]
    cc38:	3b08      	subs	r3, #8
    cc3a:	b299      	uxth	r1, r3
    cc3c:	4a1b      	ldr	r2, [pc, #108]	; (ccac <m2m_ip_cb+0x298>)
    cc3e:	0103      	lsls	r3, r0, #4
    cc40:	18d3      	adds	r3, r2, r3
    cc42:	3308      	adds	r3, #8
    cc44:	1c0a      	adds	r2, r1, #0
    cc46:	801a      	strh	r2, [r3, #0]
			}
			if(gpfAppSocketCb)
    cc48:	4b17      	ldr	r3, [pc, #92]	; (cca8 <m2m_ip_cb+0x294>)
    cc4a:	681b      	ldr	r3, [r3, #0]
    cc4c:	2b00      	cmp	r3, #0
    cc4e:	d100      	bne.n	cc52 <m2m_ip_cb+0x23e>
    cc50:	e174      	b.n	cf3c <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    cc52:	4b15      	ldr	r3, [pc, #84]	; (cca8 <m2m_ip_cb+0x294>)
    cc54:	681b      	ldr	r3, [r3, #0]
    cc56:	229c      	movs	r2, #156	; 0x9c
    cc58:	18ba      	adds	r2, r7, r2
    cc5a:	2000      	movs	r0, #0
    cc5c:	5610      	ldrsb	r0, [r2, r0]
    cc5e:	2298      	movs	r2, #152	; 0x98
    cc60:	18ba      	adds	r2, r7, r2
    cc62:	2105      	movs	r1, #5
    cc64:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    cc66:	e169      	b.n	cf3c <m2m_ip_cb+0x528>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    cc68:	1dfb      	adds	r3, r7, #7
    cc6a:	781b      	ldrb	r3, [r3, #0]
    cc6c:	2b4a      	cmp	r3, #74	; 0x4a
    cc6e:	d123      	bne.n	ccb8 <m2m_ip_cb+0x2a4>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    cc70:	230c      	movs	r3, #12
    cc72:	18f9      	adds	r1, r7, r3
    cc74:	6838      	ldr	r0, [r7, #0]
    cc76:	2300      	movs	r3, #0
    cc78:	2244      	movs	r2, #68	; 0x44
    cc7a:	4c0a      	ldr	r4, [pc, #40]	; (cca4 <m2m_ip_cb+0x290>)
    cc7c:	47a0      	blx	r4
    cc7e:	1e03      	subs	r3, r0, #0
    cc80:	d000      	beq.n	cc84 <m2m_ip_cb+0x270>
    cc82:	e160      	b.n	cf46 <m2m_ip_cb+0x532>
		{
			if(gpfAppResolveCb)
    cc84:	4b0b      	ldr	r3, [pc, #44]	; (ccb4 <m2m_ip_cb+0x2a0>)
    cc86:	681b      	ldr	r3, [r3, #0]
    cc88:	2b00      	cmp	r3, #0
    cc8a:	d100      	bne.n	cc8e <m2m_ip_cb+0x27a>
    cc8c:	e15b      	b.n	cf46 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    cc8e:	4b09      	ldr	r3, [pc, #36]	; (ccb4 <m2m_ip_cb+0x2a0>)
    cc90:	681a      	ldr	r2, [r3, #0]
    cc92:	230c      	movs	r3, #12
    cc94:	18fb      	adds	r3, r7, r3
    cc96:	6c19      	ldr	r1, [r3, #64]	; 0x40
    cc98:	230c      	movs	r3, #12
    cc9a:	18fb      	adds	r3, r7, r3
    cc9c:	0018      	movs	r0, r3
    cc9e:	4790      	blx	r2
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    cca0:	e151      	b.n	cf46 <m2m_ip_cb+0x532>
    cca2:	46c0      	nop			; (mov r8, r8)
    cca4:	00009779 	.word	0x00009779
    cca8:	20000354 	.word	0x20000354
    ccac:	200002a4 	.word	0x200002a4
    ccb0:	200000b2 	.word	0x200000b2
    ccb4:	2000035c 	.word	0x2000035c
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    ccb8:	1dfb      	adds	r3, r7, #7
    ccba:	781b      	ldrb	r3, [r3, #0]
    ccbc:	2b46      	cmp	r3, #70	; 0x46
    ccbe:	d008      	beq.n	ccd2 <m2m_ip_cb+0x2be>
    ccc0:	1dfb      	adds	r3, r7, #7
    ccc2:	781b      	ldrb	r3, [r3, #0]
    ccc4:	2b48      	cmp	r3, #72	; 0x48
    ccc6:	d004      	beq.n	ccd2 <m2m_ip_cb+0x2be>
    ccc8:	1dfb      	adds	r3, r7, #7
    ccca:	781b      	ldrb	r3, [r3, #0]
    cccc:	2b4d      	cmp	r3, #77	; 0x4d
    ccce:	d000      	beq.n	ccd2 <m2m_ip_cb+0x2be>
    ccd0:	e0b4      	b.n	ce3c <m2m_ip_cb+0x428>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    ccd2:	23df      	movs	r3, #223	; 0xdf
    ccd4:	18fb      	adds	r3, r7, r3
    ccd6:	2206      	movs	r2, #6
    ccd8:	701a      	strb	r2, [r3, #0]
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
    ccda:	1dfb      	adds	r3, r7, #7
    ccdc:	781b      	ldrb	r3, [r3, #0]
    ccde:	2b48      	cmp	r3, #72	; 0x48
    cce0:	d103      	bne.n	ccea <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    cce2:	23df      	movs	r3, #223	; 0xdf
    cce4:	18fb      	adds	r3, r7, r3
    cce6:	2209      	movs	r2, #9
    cce8:	701a      	strb	r2, [r3, #0]

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
    ccea:	23d8      	movs	r3, #216	; 0xd8
    ccec:	18fb      	adds	r3, r7, r3
    ccee:	2210      	movs	r2, #16
    ccf0:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    ccf2:	23d8      	movs	r3, #216	; 0xd8
    ccf4:	18fb      	adds	r3, r7, r3
    ccf6:	881a      	ldrh	r2, [r3, #0]
    ccf8:	2388      	movs	r3, #136	; 0x88
    ccfa:	18f9      	adds	r1, r7, r3
    ccfc:	6838      	ldr	r0, [r7, #0]
    ccfe:	2300      	movs	r3, #0
    cd00:	4c93      	ldr	r4, [pc, #588]	; (cf50 <m2m_ip_cb+0x53c>)
    cd02:	47a0      	blx	r4
    cd04:	1e03      	subs	r3, r0, #0
    cd06:	d000      	beq.n	cd0a <m2m_ip_cb+0x2f6>
    cd08:	e11a      	b.n	cf40 <m2m_ip_cb+0x52c>
		{
			uint16 u16SessionID = 0;
    cd0a:	23d6      	movs	r3, #214	; 0xd6
    cd0c:	18fb      	adds	r3, r7, r3
    cd0e:	2200      	movs	r2, #0
    cd10:	801a      	strh	r2, [r3, #0]

			sock			= strRecvReply.sock;
    cd12:	23d5      	movs	r3, #213	; 0xd5
    cd14:	18fb      	adds	r3, r7, r3
    cd16:	2288      	movs	r2, #136	; 0x88
    cd18:	18ba      	adds	r2, r7, r2
    cd1a:	7b12      	ldrb	r2, [r2, #12]
    cd1c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    cd1e:	23d6      	movs	r3, #214	; 0xd6
    cd20:	18fb      	adds	r3, r7, r3
    cd22:	2288      	movs	r2, #136	; 0x88
    cd24:	18ba      	adds	r2, r7, r2
    cd26:	89d2      	ldrh	r2, [r2, #14]
    cd28:	801a      	strh	r2, [r3, #0]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    cd2a:	23d5      	movs	r3, #213	; 0xd5
    cd2c:	18fb      	adds	r3, r7, r3
    cd2e:	781b      	ldrb	r3, [r3, #0]
    cd30:	b25b      	sxtb	r3, r3
    cd32:	4a88      	ldr	r2, [pc, #544]	; (cf54 <m2m_ip_cb+0x540>)
    cd34:	011b      	lsls	r3, r3, #4
    cd36:	18d3      	adds	r3, r2, r3
    cd38:	330c      	adds	r3, #12
    cd3a:	2200      	movs	r2, #0
    cd3c:	701a      	strb	r2, [r3, #0]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    cd3e:	23d2      	movs	r3, #210	; 0xd2
    cd40:	18fb      	adds	r3, r7, r3
    cd42:	2288      	movs	r2, #136	; 0x88
    cd44:	18ba      	adds	r2, r7, r2
    cd46:	8912      	ldrh	r2, [r2, #8]
    cd48:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    cd4a:	23d0      	movs	r3, #208	; 0xd0
    cd4c:	18fb      	adds	r3, r7, r3
    cd4e:	2288      	movs	r2, #136	; 0x88
    cd50:	18ba      	adds	r2, r7, r2
    cd52:	8952      	ldrh	r2, [r2, #10]
    cd54:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    cd56:	2388      	movs	r3, #136	; 0x88
    cd58:	18fb      	adds	r3, r7, r3
    cd5a:	885a      	ldrh	r2, [r3, #2]
    cd5c:	2370      	movs	r3, #112	; 0x70
    cd5e:	18fb      	adds	r3, r7, r3
    cd60:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    cd62:	2388      	movs	r3, #136	; 0x88
    cd64:	18fb      	adds	r3, r7, r3
    cd66:	685a      	ldr	r2, [r3, #4]
    cd68:	2370      	movs	r3, #112	; 0x70
    cd6a:	18fb      	adds	r3, r7, r3
    cd6c:	60da      	str	r2, [r3, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    cd6e:	23d5      	movs	r3, #213	; 0xd5
    cd70:	18fb      	adds	r3, r7, r3
    cd72:	781b      	ldrb	r3, [r3, #0]
    cd74:	b25b      	sxtb	r3, r3
    cd76:	4a77      	ldr	r2, [pc, #476]	; (cf54 <m2m_ip_cb+0x540>)
    cd78:	011b      	lsls	r3, r3, #4
    cd7a:	18d3      	adds	r3, r2, r3
    cd7c:	3306      	adds	r3, #6
    cd7e:	881b      	ldrh	r3, [r3, #0]
    cd80:	b29b      	uxth	r3, r3
    cd82:	22d6      	movs	r2, #214	; 0xd6
    cd84:	18ba      	adds	r2, r7, r2
    cd86:	8812      	ldrh	r2, [r2, #0]
    cd88:	429a      	cmp	r2, r3
    cd8a:	d148      	bne.n	ce1e <m2m_ip_cb+0x40a>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    cd8c:	23d2      	movs	r3, #210	; 0xd2
    cd8e:	18fb      	adds	r3, r7, r3
    cd90:	2200      	movs	r2, #0
    cd92:	5e9b      	ldrsh	r3, [r3, r2]
    cd94:	2b00      	cmp	r3, #0
    cd96:	dd25      	ble.n	cde4 <m2m_ip_cb+0x3d0>
    cd98:	23d2      	movs	r3, #210	; 0xd2
    cd9a:	18fb      	adds	r3, r7, r3
    cd9c:	2200      	movs	r2, #0
    cd9e:	5e9a      	ldrsh	r2, [r3, r2]
    cda0:	1d3b      	adds	r3, r7, #4
    cda2:	881b      	ldrh	r3, [r3, #0]
    cda4:	429a      	cmp	r2, r3
    cda6:	da1d      	bge.n	cde4 <m2m_ip_cb+0x3d0>
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
    cda8:	23d0      	movs	r3, #208	; 0xd0
    cdaa:	18fb      	adds	r3, r7, r3
    cdac:	881b      	ldrh	r3, [r3, #0]
    cdae:	683a      	ldr	r2, [r7, #0]
    cdb0:	18d3      	adds	r3, r2, r3
    cdb2:	603b      	str	r3, [r7, #0]

					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
    cdb4:	23d8      	movs	r3, #216	; 0xd8
    cdb6:	18fb      	adds	r3, r7, r3
    cdb8:	22d2      	movs	r2, #210	; 0xd2
    cdba:	18ba      	adds	r2, r7, r2
    cdbc:	8812      	ldrh	r2, [r2, #0]
    cdbe:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    cdc0:	683c      	ldr	r4, [r7, #0]
    cdc2:	23df      	movs	r3, #223	; 0xdf
    cdc4:	18fb      	adds	r3, r7, r3
    cdc6:	781a      	ldrb	r2, [r3, #0]
    cdc8:	2370      	movs	r3, #112	; 0x70
    cdca:	18f9      	adds	r1, r7, r3
    cdcc:	23d5      	movs	r3, #213	; 0xd5
    cdce:	18fb      	adds	r3, r7, r3
    cdd0:	2000      	movs	r0, #0
    cdd2:	5618      	ldrsb	r0, [r3, r0]
    cdd4:	23d8      	movs	r3, #216	; 0xd8
    cdd6:	18fb      	adds	r3, r7, r3
    cdd8:	881b      	ldrh	r3, [r3, #0]
    cdda:	9300      	str	r3, [sp, #0]
    cddc:	0023      	movs	r3, r4
    cdde:	4c5e      	ldr	r4, [pc, #376]	; (cf58 <m2m_ip_cb+0x544>)
    cde0:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    cde2:	e0ad      	b.n	cf40 <m2m_ip_cb+0x52c>
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    cde4:	2370      	movs	r3, #112	; 0x70
    cde6:	18fb      	adds	r3, r7, r3
    cde8:	22d2      	movs	r2, #210	; 0xd2
    cdea:	18ba      	adds	r2, r7, r2
    cdec:	8812      	ldrh	r2, [r2, #0]
    cdee:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    cdf0:	2370      	movs	r3, #112	; 0x70
    cdf2:	18fb      	adds	r3, r7, r3
    cdf4:	2200      	movs	r2, #0
    cdf6:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    cdf8:	4b58      	ldr	r3, [pc, #352]	; (cf5c <m2m_ip_cb+0x548>)
    cdfa:	681b      	ldr	r3, [r3, #0]
    cdfc:	2b00      	cmp	r3, #0
    cdfe:	d100      	bne.n	ce02 <m2m_ip_cb+0x3ee>
    ce00:	e09e      	b.n	cf40 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    ce02:	4b56      	ldr	r3, [pc, #344]	; (cf5c <m2m_ip_cb+0x548>)
    ce04:	681b      	ldr	r3, [r3, #0]
    ce06:	2270      	movs	r2, #112	; 0x70
    ce08:	18bc      	adds	r4, r7, r2
    ce0a:	22df      	movs	r2, #223	; 0xdf
    ce0c:	18ba      	adds	r2, r7, r2
    ce0e:	7811      	ldrb	r1, [r2, #0]
    ce10:	22d5      	movs	r2, #213	; 0xd5
    ce12:	18ba      	adds	r2, r7, r2
    ce14:	2000      	movs	r0, #0
    ce16:	5610      	ldrsb	r0, [r2, r0]
    ce18:	0022      	movs	r2, r4
    ce1a:	4798      	blx	r3
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    ce1c:	e090      	b.n	cf40 <m2m_ip_cb+0x52c>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    ce1e:	23d8      	movs	r3, #216	; 0xd8
    ce20:	18fa      	adds	r2, r7, r3
    ce22:	1d3b      	adds	r3, r7, #4
    ce24:	8812      	ldrh	r2, [r2, #0]
    ce26:	881b      	ldrh	r3, [r3, #0]
    ce28:	429a      	cmp	r2, r3
    ce2a:	d300      	bcc.n	ce2e <m2m_ip_cb+0x41a>
    ce2c:	e088      	b.n	cf40 <m2m_ip_cb+0x52c>
				{
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    ce2e:	2301      	movs	r3, #1
    ce30:	2200      	movs	r2, #0
    ce32:	2100      	movs	r1, #0
    ce34:	2000      	movs	r0, #0
    ce36:	4c46      	ldr	r4, [pc, #280]	; (cf50 <m2m_ip_cb+0x53c>)
    ce38:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    ce3a:	e081      	b.n	cf40 <m2m_ip_cb+0x52c>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    ce3c:	1dfb      	adds	r3, r7, #7
    ce3e:	781b      	ldrb	r3, [r3, #0]
    ce40:	2b45      	cmp	r3, #69	; 0x45
    ce42:	d007      	beq.n	ce54 <m2m_ip_cb+0x440>
    ce44:	1dfb      	adds	r3, r7, #7
    ce46:	781b      	ldrb	r3, [r3, #0]
    ce48:	2b47      	cmp	r3, #71	; 0x47
    ce4a:	d003      	beq.n	ce54 <m2m_ip_cb+0x440>
    ce4c:	1dfb      	adds	r3, r7, #7
    ce4e:	781b      	ldrb	r3, [r3, #0]
    ce50:	2b4c      	cmp	r3, #76	; 0x4c
    ce52:	d14c      	bne.n	ceee <m2m_ip_cb+0x4da>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    ce54:	23de      	movs	r3, #222	; 0xde
    ce56:	18fb      	adds	r3, r7, r3
    ce58:	2207      	movs	r2, #7
    ce5a:	701a      	strb	r2, [r3, #0]

		if(u8OpCode == SOCKET_CMD_SENDTO)
    ce5c:	1dfb      	adds	r3, r7, #7
    ce5e:	781b      	ldrb	r3, [r3, #0]
    ce60:	2b47      	cmp	r3, #71	; 0x47
    ce62:	d103      	bne.n	ce6c <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    ce64:	23de      	movs	r3, #222	; 0xde
    ce66:	18fb      	adds	r3, r7, r3
    ce68:	2208      	movs	r2, #8
    ce6a:	701a      	strb	r2, [r3, #0]

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    ce6c:	2364      	movs	r3, #100	; 0x64
    ce6e:	18f9      	adds	r1, r7, r3
    ce70:	6838      	ldr	r0, [r7, #0]
    ce72:	2300      	movs	r3, #0
    ce74:	2208      	movs	r2, #8
    ce76:	4c36      	ldr	r4, [pc, #216]	; (cf50 <m2m_ip_cb+0x53c>)
    ce78:	47a0      	blx	r4
    ce7a:	1e03      	subs	r3, r0, #0
    ce7c:	d162      	bne.n	cf44 <m2m_ip_cb+0x530>
		{
			uint16 u16SessionID = 0;
    ce7e:	23dc      	movs	r3, #220	; 0xdc
    ce80:	18fb      	adds	r3, r7, r3
    ce82:	2200      	movs	r2, #0
    ce84:	801a      	strh	r2, [r3, #0]
			
			sock = strReply.sock;
    ce86:	23db      	movs	r3, #219	; 0xdb
    ce88:	18fb      	adds	r3, r7, r3
    ce8a:	2264      	movs	r2, #100	; 0x64
    ce8c:	18ba      	adds	r2, r7, r2
    ce8e:	7812      	ldrb	r2, [r2, #0]
    ce90:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    ce92:	23dc      	movs	r3, #220	; 0xdc
    ce94:	18fb      	adds	r3, r7, r3
    ce96:	2264      	movs	r2, #100	; 0x64
    ce98:	18ba      	adds	r2, r7, r2
    ce9a:	8892      	ldrh	r2, [r2, #4]
    ce9c:	801a      	strh	r2, [r3, #0]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    ce9e:	2364      	movs	r3, #100	; 0x64
    cea0:	18fb      	adds	r3, r7, r3
    cea2:	2202      	movs	r2, #2
    cea4:	5e9a      	ldrsh	r2, [r3, r2]
    cea6:	236e      	movs	r3, #110	; 0x6e
    cea8:	18fb      	adds	r3, r7, r3
    ceaa:	801a      	strh	r2, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    ceac:	23db      	movs	r3, #219	; 0xdb
    ceae:	18fb      	adds	r3, r7, r3
    ceb0:	781b      	ldrb	r3, [r3, #0]
    ceb2:	b25b      	sxtb	r3, r3
    ceb4:	4a27      	ldr	r2, [pc, #156]	; (cf54 <m2m_ip_cb+0x540>)
    ceb6:	011b      	lsls	r3, r3, #4
    ceb8:	18d3      	adds	r3, r2, r3
    ceba:	3306      	adds	r3, #6
    cebc:	881b      	ldrh	r3, [r3, #0]
    cebe:	b29b      	uxth	r3, r3
    cec0:	22dc      	movs	r2, #220	; 0xdc
    cec2:	18ba      	adds	r2, r7, r2
    cec4:	8812      	ldrh	r2, [r2, #0]
    cec6:	429a      	cmp	r2, r3
    cec8:	d13c      	bne.n	cf44 <m2m_ip_cb+0x530>
			{
				if(gpfAppSocketCb)
    ceca:	4b24      	ldr	r3, [pc, #144]	; (cf5c <m2m_ip_cb+0x548>)
    cecc:	681b      	ldr	r3, [r3, #0]
    cece:	2b00      	cmp	r3, #0
    ced0:	d038      	beq.n	cf44 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    ced2:	4b22      	ldr	r3, [pc, #136]	; (cf5c <m2m_ip_cb+0x548>)
    ced4:	681b      	ldr	r3, [r3, #0]
    ced6:	226e      	movs	r2, #110	; 0x6e
    ced8:	18bc      	adds	r4, r7, r2
    ceda:	22de      	movs	r2, #222	; 0xde
    cedc:	18ba      	adds	r2, r7, r2
    cede:	7811      	ldrb	r1, [r2, #0]
    cee0:	22db      	movs	r2, #219	; 0xdb
    cee2:	18ba      	adds	r2, r7, r2
    cee4:	2000      	movs	r0, #0
    cee6:	5610      	ldrsb	r0, [r2, r0]
    cee8:	0022      	movs	r2, r4
    ceea:	4798      	blx	r3
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    ceec:	e02a      	b.n	cf44 <m2m_ip_cb+0x530>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    ceee:	1dfb      	adds	r3, r7, #7
    cef0:	781b      	ldrb	r3, [r3, #0]
    cef2:	2b52      	cmp	r3, #82	; 0x52
    cef4:	d127      	bne.n	cf46 <m2m_ip_cb+0x532>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    cef6:	2350      	movs	r3, #80	; 0x50
    cef8:	18f9      	adds	r1, r7, r3
    cefa:	6838      	ldr	r0, [r7, #0]
    cefc:	2301      	movs	r3, #1
    cefe:	2214      	movs	r2, #20
    cf00:	4c13      	ldr	r4, [pc, #76]	; (cf50 <m2m_ip_cb+0x53c>)
    cf02:	47a0      	blx	r4
    cf04:	1e03      	subs	r3, r0, #0
    cf06:	d11e      	bne.n	cf46 <m2m_ip_cb+0x532>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    cf08:	2350      	movs	r3, #80	; 0x50
    cf0a:	18fb      	adds	r3, r7, r3
    cf0c:	685b      	ldr	r3, [r3, #4]
    cf0e:	001a      	movs	r2, r3
    cf10:	4b13      	ldr	r3, [pc, #76]	; (cf60 <m2m_ip_cb+0x54c>)
    cf12:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    cf14:	4b12      	ldr	r3, [pc, #72]	; (cf60 <m2m_ip_cb+0x54c>)
    cf16:	681b      	ldr	r3, [r3, #0]
    cf18:	2b00      	cmp	r3, #0
    cf1a:	d014      	beq.n	cf46 <m2m_ip_cb+0x532>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    cf1c:	4b10      	ldr	r3, [pc, #64]	; (cf60 <m2m_ip_cb+0x54c>)
    cf1e:	681c      	ldr	r4, [r3, #0]
    cf20:	2350      	movs	r3, #80	; 0x50
    cf22:	18fb      	adds	r3, r7, r3
    cf24:	6818      	ldr	r0, [r3, #0]
    cf26:	2350      	movs	r3, #80	; 0x50
    cf28:	18fb      	adds	r3, r7, r3
    cf2a:	6899      	ldr	r1, [r3, #8]
    cf2c:	2350      	movs	r3, #80	; 0x50
    cf2e:	18fb      	adds	r3, r7, r3
    cf30:	7c1b      	ldrb	r3, [r3, #16]
    cf32:	001a      	movs	r2, r3
    cf34:	47a0      	blx	r4
			}
		}
	}
}
    cf36:	e006      	b.n	cf46 <m2m_ip_cb+0x532>
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
	{
    cf38:	46c0      	nop			; (mov r8, r8)
    cf3a:	e004      	b.n	cf46 <m2m_ip_cb+0x532>
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    cf3c:	46c0      	nop			; (mov r8, r8)
    cf3e:	e002      	b.n	cf46 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    cf40:	46c0      	nop			; (mov r8, r8)
    cf42:	e000      	b.n	cf46 <m2m_ip_cb+0x532>
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    cf44:	46c0      	nop			; (mov r8, r8)
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    cf46:	46c0      	nop			; (mov r8, r8)
    cf48:	46bd      	mov	sp, r7
    cf4a:	b039      	add	sp, #228	; 0xe4
    cf4c:	bd90      	pop	{r4, r7, pc}
    cf4e:	46c0      	nop			; (mov r8, r8)
    cf50:	00009779 	.word	0x00009779
    cf54:	200002a4 	.word	0x200002a4
    cf58:	0000c819 	.word	0x0000c819
    cf5c:	20000354 	.word	0x20000354
    cf60:	20000358 	.word	0x20000358

0000cf64 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    cf64:	b580      	push	{r7, lr}
    cf66:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    cf68:	4b0c      	ldr	r3, [pc, #48]	; (cf9c <socketInit+0x38>)
    cf6a:	781b      	ldrb	r3, [r3, #0]
    cf6c:	b2db      	uxtb	r3, r3
    cf6e:	2b00      	cmp	r3, #0
    cf70:	d110      	bne.n	cf94 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    cf72:	4b0b      	ldr	r3, [pc, #44]	; (cfa0 <socketInit+0x3c>)
    cf74:	22b0      	movs	r2, #176	; 0xb0
    cf76:	2100      	movs	r1, #0
    cf78:	0018      	movs	r0, r3
    cf7a:	4b0a      	ldr	r3, [pc, #40]	; (cfa4 <socketInit+0x40>)
    cf7c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    cf7e:	4b0a      	ldr	r3, [pc, #40]	; (cfa8 <socketInit+0x44>)
    cf80:	0019      	movs	r1, r3
    cf82:	2002      	movs	r0, #2
    cf84:	4b09      	ldr	r3, [pc, #36]	; (cfac <socketInit+0x48>)
    cf86:	4798      	blx	r3
		gbSocketInit	= 1;
    cf88:	4b04      	ldr	r3, [pc, #16]	; (cf9c <socketInit+0x38>)
    cf8a:	2201      	movs	r2, #1
    cf8c:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    cf8e:	4b08      	ldr	r3, [pc, #32]	; (cfb0 <socketInit+0x4c>)
    cf90:	2200      	movs	r2, #0
    cf92:	801a      	strh	r2, [r3, #0]
	}
}
    cf94:	46c0      	nop			; (mov r8, r8)
    cf96:	46bd      	mov	sp, r7
    cf98:	bd80      	pop	{r7, pc}
    cf9a:	46c0      	nop			; (mov r8, r8)
    cf9c:	200000b4 	.word	0x200000b4
    cfa0:	200002a4 	.word	0x200002a4
    cfa4:	00008c25 	.word	0x00008c25
    cfa8:	0000ca15 	.word	0x0000ca15
    cfac:	000098f9 	.word	0x000098f9
    cfb0:	200000b2 	.word	0x200000b2

0000cfb4 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    cfb4:	b580      	push	{r7, lr}
    cfb6:	b082      	sub	sp, #8
    cfb8:	af00      	add	r7, sp, #0
    cfba:	6078      	str	r0, [r7, #4]
    cfbc:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    cfbe:	4b05      	ldr	r3, [pc, #20]	; (cfd4 <registerSocketCallback+0x20>)
    cfc0:	687a      	ldr	r2, [r7, #4]
    cfc2:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    cfc4:	4b04      	ldr	r3, [pc, #16]	; (cfd8 <registerSocketCallback+0x24>)
    cfc6:	683a      	ldr	r2, [r7, #0]
    cfc8:	601a      	str	r2, [r3, #0]
}
    cfca:	46c0      	nop			; (mov r8, r8)
    cfcc:	46bd      	mov	sp, r7
    cfce:	b002      	add	sp, #8
    cfd0:	bd80      	pop	{r7, pc}
    cfd2:	46c0      	nop			; (mov r8, r8)
    cfd4:	20000354 	.word	0x20000354
    cfd8:	2000035c 	.word	0x2000035c

0000cfdc <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    cfdc:	b590      	push	{r4, r7, lr}
    cfde:	b08d      	sub	sp, #52	; 0x34
    cfe0:	af04      	add	r7, sp, #16
    cfe2:	0004      	movs	r4, r0
    cfe4:	0008      	movs	r0, r1
    cfe6:	0011      	movs	r1, r2
    cfe8:	1dbb      	adds	r3, r7, #6
    cfea:	1c22      	adds	r2, r4, #0
    cfec:	801a      	strh	r2, [r3, #0]
    cfee:	1d7b      	adds	r3, r7, #5
    cff0:	1c02      	adds	r2, r0, #0
    cff2:	701a      	strb	r2, [r3, #0]
    cff4:	1d3b      	adds	r3, r7, #4
    cff6:	1c0a      	adds	r2, r1, #0
    cff8:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    cffa:	231f      	movs	r3, #31
    cffc:	18fb      	adds	r3, r7, r3
    cffe:	22ff      	movs	r2, #255	; 0xff
    d000:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    d002:	1dbb      	adds	r3, r7, #6
    d004:	881b      	ldrh	r3, [r3, #0]
    d006:	2b02      	cmp	r3, #2
    d008:	d000      	beq.n	d00c <socket+0x30>
    d00a:	e0cd      	b.n	d1a8 <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    d00c:	1d7b      	adds	r3, r7, #5
    d00e:	781b      	ldrb	r3, [r3, #0]
    d010:	2b01      	cmp	r3, #1
    d012:	d135      	bne.n	d080 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    d014:	231e      	movs	r3, #30
    d016:	18fb      	adds	r3, r7, r3
    d018:	2200      	movs	r2, #0
    d01a:	701a      	strb	r2, [r3, #0]
    d01c:	e02a      	b.n	d074 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    d01e:	2317      	movs	r3, #23
    d020:	18fb      	adds	r3, r7, r3
    d022:	4a65      	ldr	r2, [pc, #404]	; (d1b8 <socket+0x1dc>)
    d024:	7812      	ldrb	r2, [r2, #0]
    d026:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    d028:	4b63      	ldr	r3, [pc, #396]	; (d1b8 <socket+0x1dc>)
    d02a:	781b      	ldrb	r3, [r3, #0]
    d02c:	b2db      	uxtb	r3, r3
    d02e:	011a      	lsls	r2, r3, #4
    d030:	4b62      	ldr	r3, [pc, #392]	; (d1bc <socket+0x1e0>)
    d032:	18d3      	adds	r3, r2, r3
    d034:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    d036:	4b60      	ldr	r3, [pc, #384]	; (d1b8 <socket+0x1dc>)
    d038:	781b      	ldrb	r3, [r3, #0]
    d03a:	b2db      	uxtb	r3, r3
    d03c:	1c5a      	adds	r2, r3, #1
    d03e:	4b60      	ldr	r3, [pc, #384]	; (d1c0 <socket+0x1e4>)
    d040:	2107      	movs	r1, #7
    d042:	0010      	movs	r0, r2
    d044:	4798      	blx	r3
    d046:	000b      	movs	r3, r1
    d048:	b2da      	uxtb	r2, r3
    d04a:	4b5b      	ldr	r3, [pc, #364]	; (d1b8 <socket+0x1dc>)
    d04c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    d04e:	69bb      	ldr	r3, [r7, #24]
    d050:	7a9b      	ldrb	r3, [r3, #10]
    d052:	b2db      	uxtb	r3, r3
    d054:	2b00      	cmp	r3, #0
    d056:	d106      	bne.n	d066 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    d058:	231f      	movs	r3, #31
    d05a:	18fb      	adds	r3, r7, r3
    d05c:	2217      	movs	r2, #23
    d05e:	18ba      	adds	r2, r7, r2
    d060:	7812      	ldrb	r2, [r2, #0]
    d062:	701a      	strb	r2, [r3, #0]
					break;
    d064:	e04c      	b.n	d100 <socket+0x124>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    d066:	231e      	movs	r3, #30
    d068:	18fb      	adds	r3, r7, r3
    d06a:	781a      	ldrb	r2, [r3, #0]
    d06c:	231e      	movs	r3, #30
    d06e:	18fb      	adds	r3, r7, r3
    d070:	3201      	adds	r2, #1
    d072:	701a      	strb	r2, [r3, #0]
    d074:	231e      	movs	r3, #30
    d076:	18fb      	adds	r3, r7, r3
    d078:	781b      	ldrb	r3, [r3, #0]
    d07a:	2b06      	cmp	r3, #6
    d07c:	d9cf      	bls.n	d01e <socket+0x42>
    d07e:	e03f      	b.n	d100 <socket+0x124>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    d080:	1d7b      	adds	r3, r7, #5
    d082:	781b      	ldrb	r3, [r3, #0]
    d084:	2b02      	cmp	r3, #2
    d086:	d13b      	bne.n	d100 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    d088:	4b4e      	ldr	r3, [pc, #312]	; (d1c4 <socket+0x1e8>)
    d08a:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    d08c:	231e      	movs	r3, #30
    d08e:	18fb      	adds	r3, r7, r3
    d090:	2200      	movs	r2, #0
    d092:	701a      	strb	r2, [r3, #0]
    d094:	e02f      	b.n	d0f6 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    d096:	2317      	movs	r3, #23
    d098:	18fb      	adds	r3, r7, r3
    d09a:	4a4b      	ldr	r2, [pc, #300]	; (d1c8 <socket+0x1ec>)
    d09c:	7812      	ldrb	r2, [r2, #0]
    d09e:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    d0a0:	4b49      	ldr	r3, [pc, #292]	; (d1c8 <socket+0x1ec>)
    d0a2:	781b      	ldrb	r3, [r3, #0]
    d0a4:	b2db      	uxtb	r3, r3
    d0a6:	011b      	lsls	r3, r3, #4
    d0a8:	693a      	ldr	r2, [r7, #16]
    d0aa:	18d3      	adds	r3, r2, r3
    d0ac:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    d0ae:	4b46      	ldr	r3, [pc, #280]	; (d1c8 <socket+0x1ec>)
    d0b0:	781b      	ldrb	r3, [r3, #0]
    d0b2:	b2db      	uxtb	r3, r3
    d0b4:	3301      	adds	r3, #1
    d0b6:	4a45      	ldr	r2, [pc, #276]	; (d1cc <socket+0x1f0>)
    d0b8:	4013      	ands	r3, r2
    d0ba:	d504      	bpl.n	d0c6 <socket+0xea>
    d0bc:	3b01      	subs	r3, #1
    d0be:	2204      	movs	r2, #4
    d0c0:	4252      	negs	r2, r2
    d0c2:	4313      	orrs	r3, r2
    d0c4:	3301      	adds	r3, #1
    d0c6:	b2da      	uxtb	r2, r3
    d0c8:	4b3f      	ldr	r3, [pc, #252]	; (d1c8 <socket+0x1ec>)
    d0ca:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    d0cc:	69bb      	ldr	r3, [r7, #24]
    d0ce:	7a9b      	ldrb	r3, [r3, #10]
    d0d0:	b2db      	uxtb	r3, r3
    d0d2:	2b00      	cmp	r3, #0
    d0d4:	d108      	bne.n	d0e8 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    d0d6:	2317      	movs	r3, #23
    d0d8:	18fb      	adds	r3, r7, r3
    d0da:	781b      	ldrb	r3, [r3, #0]
    d0dc:	3307      	adds	r3, #7
    d0de:	b2da      	uxtb	r2, r3
    d0e0:	231f      	movs	r3, #31
    d0e2:	18fb      	adds	r3, r7, r3
    d0e4:	701a      	strb	r2, [r3, #0]
					break;
    d0e6:	e00b      	b.n	d100 <socket+0x124>
			}
		}
		else if(u8Type == SOCK_DGRAM)
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    d0e8:	231e      	movs	r3, #30
    d0ea:	18fb      	adds	r3, r7, r3
    d0ec:	781a      	ldrb	r2, [r3, #0]
    d0ee:	231e      	movs	r3, #30
    d0f0:	18fb      	adds	r3, r7, r3
    d0f2:	3201      	adds	r2, #1
    d0f4:	701a      	strb	r2, [r3, #0]
    d0f6:	231e      	movs	r3, #30
    d0f8:	18fb      	adds	r3, r7, r3
    d0fa:	781b      	ldrb	r3, [r3, #0]
    d0fc:	2b03      	cmp	r3, #3
    d0fe:	d9ca      	bls.n	d096 <socket+0xba>
					break;
				}
			}
		}

		if(sock >= 0)
    d100:	231f      	movs	r3, #31
    d102:	18fb      	adds	r3, r7, r3
    d104:	781b      	ldrb	r3, [r3, #0]
    d106:	2b7f      	cmp	r3, #127	; 0x7f
    d108:	d84e      	bhi.n	d1a8 <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    d10a:	69bb      	ldr	r3, [r7, #24]
    d10c:	2210      	movs	r2, #16
    d10e:	2100      	movs	r1, #0
    d110:	0018      	movs	r0, r3
    d112:	4b2f      	ldr	r3, [pc, #188]	; (d1d0 <socket+0x1f4>)
    d114:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    d116:	69bb      	ldr	r3, [r7, #24]
    d118:	2201      	movs	r2, #1
    d11a:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    d11c:	4b2d      	ldr	r3, [pc, #180]	; (d1d4 <socket+0x1f8>)
    d11e:	881b      	ldrh	r3, [r3, #0]
    d120:	b29b      	uxth	r3, r3
    d122:	3301      	adds	r3, #1
    d124:	b29a      	uxth	r2, r3
    d126:	4b2b      	ldr	r3, [pc, #172]	; (d1d4 <socket+0x1f8>)
    d128:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    d12a:	4b2a      	ldr	r3, [pc, #168]	; (d1d4 <socket+0x1f8>)
    d12c:	881b      	ldrh	r3, [r3, #0]
    d12e:	b29b      	uxth	r3, r3
    d130:	2b00      	cmp	r3, #0
    d132:	d106      	bne.n	d142 <socket+0x166>
				++gu16SessionID;
    d134:	4b27      	ldr	r3, [pc, #156]	; (d1d4 <socket+0x1f8>)
    d136:	881b      	ldrh	r3, [r3, #0]
    d138:	b29b      	uxth	r3, r3
    d13a:	3301      	adds	r3, #1
    d13c:	b29a      	uxth	r2, r3
    d13e:	4b25      	ldr	r3, [pc, #148]	; (d1d4 <socket+0x1f8>)
    d140:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    d142:	4b24      	ldr	r3, [pc, #144]	; (d1d4 <socket+0x1f8>)
    d144:	881b      	ldrh	r3, [r3, #0]
    d146:	b29a      	uxth	r2, r3
    d148:	69bb      	ldr	r3, [r7, #24]
    d14a:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    d14c:	4b22      	ldr	r3, [pc, #136]	; (d1d8 <socket+0x1fc>)
    d14e:	0018      	movs	r0, r3
    d150:	4b22      	ldr	r3, [pc, #136]	; (d1dc <socket+0x200>)
    d152:	4798      	blx	r3
    d154:	231f      	movs	r3, #31
    d156:	18fb      	adds	r3, r7, r3
    d158:	2100      	movs	r1, #0
    d15a:	5659      	ldrsb	r1, [r3, r1]
    d15c:	4b1d      	ldr	r3, [pc, #116]	; (d1d4 <socket+0x1f8>)
    d15e:	881b      	ldrh	r3, [r3, #0]
    d160:	b29b      	uxth	r3, r3
    d162:	001a      	movs	r2, r3
    d164:	4b1e      	ldr	r3, [pc, #120]	; (d1e0 <socket+0x204>)
    d166:	0018      	movs	r0, r3
    d168:	4b1c      	ldr	r3, [pc, #112]	; (d1dc <socket+0x200>)
    d16a:	4798      	blx	r3
    d16c:	200d      	movs	r0, #13
    d16e:	4b1d      	ldr	r3, [pc, #116]	; (d1e4 <socket+0x208>)
    d170:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    d172:	1d3b      	adds	r3, r7, #4
    d174:	781b      	ldrb	r3, [r3, #0]
    d176:	2201      	movs	r2, #1
    d178:	4013      	ands	r3, r2
    d17a:	d015      	beq.n	d1a8 <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    d17c:	230c      	movs	r3, #12
    d17e:	18fb      	adds	r3, r7, r3
    d180:	221f      	movs	r2, #31
    d182:	18ba      	adds	r2, r7, r2
    d184:	7812      	ldrb	r2, [r2, #0]
    d186:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    d188:	69bb      	ldr	r3, [r7, #24]
    d18a:	2221      	movs	r2, #33	; 0x21
    d18c:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    d18e:	230c      	movs	r3, #12
    d190:	18fa      	adds	r2, r7, r3
    d192:	2300      	movs	r3, #0
    d194:	9302      	str	r3, [sp, #8]
    d196:	2300      	movs	r3, #0
    d198:	9301      	str	r3, [sp, #4]
    d19a:	2300      	movs	r3, #0
    d19c:	9300      	str	r3, [sp, #0]
    d19e:	2304      	movs	r3, #4
    d1a0:	2150      	movs	r1, #80	; 0x50
    d1a2:	2002      	movs	r0, #2
    d1a4:	4c10      	ldr	r4, [pc, #64]	; (d1e8 <socket+0x20c>)
    d1a6:	47a0      	blx	r4
			}
		}
	}
	return sock;
    d1a8:	231f      	movs	r3, #31
    d1aa:	18fb      	adds	r3, r7, r3
    d1ac:	781b      	ldrb	r3, [r3, #0]
    d1ae:	b25b      	sxtb	r3, r3
}
    d1b0:	0018      	movs	r0, r3
    d1b2:	46bd      	mov	sp, r7
    d1b4:	b009      	add	sp, #36	; 0x24
    d1b6:	bd90      	pop	{r4, r7, pc}
    d1b8:	200000b5 	.word	0x200000b5
    d1bc:	200002a4 	.word	0x200002a4
    d1c0:	00016b49 	.word	0x00016b49
    d1c4:	20000314 	.word	0x20000314
    d1c8:	200000b6 	.word	0x200000b6
    d1cc:	80000003 	.word	0x80000003
    d1d0:	00008c25 	.word	0x00008c25
    d1d4:	200000b2 	.word	0x200000b2
    d1d8:	00019318 	.word	0x00019318
    d1dc:	00016db1 	.word	0x00016db1
    d1e0:	00019338 	.word	0x00019338
    d1e4:	00016de5 	.word	0x00016de5
    d1e8:	00008e85 	.word	0x00008e85

0000d1ec <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    d1ec:	b5b0      	push	{r4, r5, r7, lr}
    d1ee:	b08a      	sub	sp, #40	; 0x28
    d1f0:	af04      	add	r7, sp, #16
    d1f2:	6039      	str	r1, [r7, #0]
    d1f4:	0011      	movs	r1, r2
    d1f6:	1dfb      	adds	r3, r7, #7
    d1f8:	1c02      	adds	r2, r0, #0
    d1fa:	701a      	strb	r2, [r3, #0]
    d1fc:	1dbb      	adds	r3, r7, #6
    d1fe:	1c0a      	adds	r2, r1, #0
    d200:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d202:	2317      	movs	r3, #23
    d204:	18fb      	adds	r3, r7, r3
    d206:	22fa      	movs	r2, #250	; 0xfa
    d208:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    d20a:	1dfb      	adds	r3, r7, #7
    d20c:	781b      	ldrb	r3, [r3, #0]
    d20e:	2b7f      	cmp	r3, #127	; 0x7f
    d210:	d867      	bhi.n	d2e2 <connect+0xf6>
    d212:	683b      	ldr	r3, [r7, #0]
    d214:	2b00      	cmp	r3, #0
    d216:	d064      	beq.n	d2e2 <connect+0xf6>
    d218:	1dfb      	adds	r3, r7, #7
    d21a:	781b      	ldrb	r3, [r3, #0]
    d21c:	b25b      	sxtb	r3, r3
    d21e:	4a35      	ldr	r2, [pc, #212]	; (d2f4 <connect+0x108>)
    d220:	011b      	lsls	r3, r3, #4
    d222:	18d3      	adds	r3, r2, r3
    d224:	330a      	adds	r3, #10
    d226:	781b      	ldrb	r3, [r3, #0]
    d228:	b2db      	uxtb	r3, r3
    d22a:	2b01      	cmp	r3, #1
    d22c:	d159      	bne.n	d2e2 <connect+0xf6>
    d22e:	1dbb      	adds	r3, r7, #6
    d230:	781b      	ldrb	r3, [r3, #0]
    d232:	2b00      	cmp	r3, #0
    d234:	d055      	beq.n	d2e2 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    d236:	2316      	movs	r3, #22
    d238:	18fb      	adds	r3, r7, r3
    d23a:	2244      	movs	r2, #68	; 0x44
    d23c:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    d23e:	1dfb      	adds	r3, r7, #7
    d240:	781b      	ldrb	r3, [r3, #0]
    d242:	b25b      	sxtb	r3, r3
    d244:	4a2b      	ldr	r2, [pc, #172]	; (d2f4 <connect+0x108>)
    d246:	011b      	lsls	r3, r3, #4
    d248:	18d3      	adds	r3, r2, r3
    d24a:	330b      	adds	r3, #11
    d24c:	781b      	ldrb	r3, [r3, #0]
    d24e:	b2db      	uxtb	r3, r3
    d250:	001a      	movs	r2, r3
    d252:	2301      	movs	r3, #1
    d254:	4013      	ands	r3, r2
    d256:	d00f      	beq.n	d278 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    d258:	2316      	movs	r3, #22
    d25a:	18fb      	adds	r3, r7, r3
    d25c:	224b      	movs	r2, #75	; 0x4b
    d25e:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    d260:	1dfb      	adds	r3, r7, #7
    d262:	781b      	ldrb	r3, [r3, #0]
    d264:	b25b      	sxtb	r3, r3
    d266:	4a23      	ldr	r2, [pc, #140]	; (d2f4 <connect+0x108>)
    d268:	011b      	lsls	r3, r3, #4
    d26a:	18d3      	adds	r3, r2, r3
    d26c:	330b      	adds	r3, #11
    d26e:	781b      	ldrb	r3, [r3, #0]
    d270:	b2da      	uxtb	r2, r3
    d272:	2308      	movs	r3, #8
    d274:	18fb      	adds	r3, r7, r3
    d276:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    d278:	2308      	movs	r3, #8
    d27a:	18fb      	adds	r3, r7, r3
    d27c:	1dfa      	adds	r2, r7, #7
    d27e:	7812      	ldrb	r2, [r2, #0]
    d280:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    d282:	6839      	ldr	r1, [r7, #0]
    d284:	2308      	movs	r3, #8
    d286:	18fb      	adds	r3, r7, r3
    d288:	2208      	movs	r2, #8
    d28a:	0018      	movs	r0, r3
    d28c:	4b1a      	ldr	r3, [pc, #104]	; (d2f8 <connect+0x10c>)
    d28e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    d290:	1dfb      	adds	r3, r7, #7
    d292:	781b      	ldrb	r3, [r3, #0]
    d294:	b25b      	sxtb	r3, r3
    d296:	4a17      	ldr	r2, [pc, #92]	; (d2f4 <connect+0x108>)
    d298:	011b      	lsls	r3, r3, #4
    d29a:	18d3      	adds	r3, r2, r3
    d29c:	3306      	adds	r3, #6
    d29e:	881b      	ldrh	r3, [r3, #0]
    d2a0:	b29a      	uxth	r2, r3
    d2a2:	2308      	movs	r3, #8
    d2a4:	18fb      	adds	r3, r7, r3
    d2a6:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    d2a8:	2317      	movs	r3, #23
    d2aa:	18fc      	adds	r4, r7, r3
    d2ac:	2308      	movs	r3, #8
    d2ae:	18fa      	adds	r2, r7, r3
    d2b0:	2316      	movs	r3, #22
    d2b2:	18fb      	adds	r3, r7, r3
    d2b4:	7819      	ldrb	r1, [r3, #0]
    d2b6:	2300      	movs	r3, #0
    d2b8:	9302      	str	r3, [sp, #8]
    d2ba:	2300      	movs	r3, #0
    d2bc:	9301      	str	r3, [sp, #4]
    d2be:	2300      	movs	r3, #0
    d2c0:	9300      	str	r3, [sp, #0]
    d2c2:	230c      	movs	r3, #12
    d2c4:	2002      	movs	r0, #2
    d2c6:	4d0d      	ldr	r5, [pc, #52]	; (d2fc <connect+0x110>)
    d2c8:	47a8      	blx	r5
    d2ca:	0003      	movs	r3, r0
    d2cc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    d2ce:	2317      	movs	r3, #23
    d2d0:	18fb      	adds	r3, r7, r3
    d2d2:	781b      	ldrb	r3, [r3, #0]
    d2d4:	b25b      	sxtb	r3, r3
    d2d6:	2b00      	cmp	r3, #0
    d2d8:	d003      	beq.n	d2e2 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    d2da:	2317      	movs	r3, #23
    d2dc:	18fb      	adds	r3, r7, r3
    d2de:	22f7      	movs	r2, #247	; 0xf7
    d2e0:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    d2e2:	2317      	movs	r3, #23
    d2e4:	18fb      	adds	r3, r7, r3
    d2e6:	781b      	ldrb	r3, [r3, #0]
    d2e8:	b25b      	sxtb	r3, r3
}
    d2ea:	0018      	movs	r0, r3
    d2ec:	46bd      	mov	sp, r7
    d2ee:	b006      	add	sp, #24
    d2f0:	bdb0      	pop	{r4, r5, r7, pc}
    d2f2:	46c0      	nop			; (mov r8, r8)
    d2f4:	200002a4 	.word	0x200002a4
    d2f8:	00008be9 	.word	0x00008be9
    d2fc:	00008e85 	.word	0x00008e85

0000d300 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    d300:	b590      	push	{r4, r7, lr}
    d302:	b08f      	sub	sp, #60	; 0x3c
    d304:	af04      	add	r7, sp, #16
    d306:	0004      	movs	r4, r0
    d308:	60b9      	str	r1, [r7, #8]
    d30a:	0010      	movs	r0, r2
    d30c:	0019      	movs	r1, r3
    d30e:	230f      	movs	r3, #15
    d310:	18fb      	adds	r3, r7, r3
    d312:	1c22      	adds	r2, r4, #0
    d314:	701a      	strb	r2, [r3, #0]
    d316:	230c      	movs	r3, #12
    d318:	18fb      	adds	r3, r7, r3
    d31a:	1c02      	adds	r2, r0, #0
    d31c:	801a      	strh	r2, [r3, #0]
    d31e:	1dbb      	adds	r3, r7, #6
    d320:	1c0a      	adds	r2, r1, #0
    d322:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    d324:	2326      	movs	r3, #38	; 0x26
    d326:	18fb      	adds	r3, r7, r3
    d328:	2206      	movs	r2, #6
    d32a:	4252      	negs	r2, r2
    d32c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    d32e:	230f      	movs	r3, #15
    d330:	18fb      	adds	r3, r7, r3
    d332:	781b      	ldrb	r3, [r3, #0]
    d334:	2b7f      	cmp	r3, #127	; 0x7f
    d336:	d900      	bls.n	d33a <send+0x3a>
    d338:	e087      	b.n	d44a <send+0x14a>
    d33a:	68bb      	ldr	r3, [r7, #8]
    d33c:	2b00      	cmp	r3, #0
    d33e:	d100      	bne.n	d342 <send+0x42>
    d340:	e083      	b.n	d44a <send+0x14a>
    d342:	230c      	movs	r3, #12
    d344:	18fb      	adds	r3, r7, r3
    d346:	881a      	ldrh	r2, [r3, #0]
    d348:	23af      	movs	r3, #175	; 0xaf
    d34a:	00db      	lsls	r3, r3, #3
    d34c:	429a      	cmp	r2, r3
    d34e:	d900      	bls.n	d352 <send+0x52>
    d350:	e07b      	b.n	d44a <send+0x14a>
    d352:	230f      	movs	r3, #15
    d354:	18fb      	adds	r3, r7, r3
    d356:	781b      	ldrb	r3, [r3, #0]
    d358:	b25b      	sxtb	r3, r3
    d35a:	4a40      	ldr	r2, [pc, #256]	; (d45c <send+0x15c>)
    d35c:	011b      	lsls	r3, r3, #4
    d35e:	18d3      	adds	r3, r2, r3
    d360:	330a      	adds	r3, #10
    d362:	781b      	ldrb	r3, [r3, #0]
    d364:	b2db      	uxtb	r3, r3
    d366:	2b01      	cmp	r3, #1
    d368:	d16f      	bne.n	d44a <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    d36a:	2323      	movs	r3, #35	; 0x23
    d36c:	18fb      	adds	r3, r7, r3
    d36e:	2245      	movs	r2, #69	; 0x45
    d370:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    d372:	2324      	movs	r3, #36	; 0x24
    d374:	18fb      	adds	r3, r7, r3
    d376:	2250      	movs	r2, #80	; 0x50
    d378:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    d37a:	2310      	movs	r3, #16
    d37c:	18fb      	adds	r3, r7, r3
    d37e:	220f      	movs	r2, #15
    d380:	18ba      	adds	r2, r7, r2
    d382:	7812      	ldrb	r2, [r2, #0]
    d384:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    d386:	2310      	movs	r3, #16
    d388:	18fb      	adds	r3, r7, r3
    d38a:	220c      	movs	r2, #12
    d38c:	18ba      	adds	r2, r7, r2
    d38e:	8812      	ldrh	r2, [r2, #0]
    d390:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    d392:	230f      	movs	r3, #15
    d394:	18fb      	adds	r3, r7, r3
    d396:	781b      	ldrb	r3, [r3, #0]
    d398:	b25b      	sxtb	r3, r3
    d39a:	4a30      	ldr	r2, [pc, #192]	; (d45c <send+0x15c>)
    d39c:	011b      	lsls	r3, r3, #4
    d39e:	18d3      	adds	r3, r2, r3
    d3a0:	3306      	adds	r3, #6
    d3a2:	881b      	ldrh	r3, [r3, #0]
    d3a4:	b29a      	uxth	r2, r3
    d3a6:	2310      	movs	r3, #16
    d3a8:	18fb      	adds	r3, r7, r3
    d3aa:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    d3ac:	230f      	movs	r3, #15
    d3ae:	18fb      	adds	r3, r7, r3
    d3b0:	781b      	ldrb	r3, [r3, #0]
    d3b2:	b25b      	sxtb	r3, r3
    d3b4:	2b06      	cmp	r3, #6
    d3b6:	dd03      	ble.n	d3c0 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    d3b8:	2324      	movs	r3, #36	; 0x24
    d3ba:	18fb      	adds	r3, r7, r3
    d3bc:	2244      	movs	r2, #68	; 0x44
    d3be:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d3c0:	230f      	movs	r3, #15
    d3c2:	18fb      	adds	r3, r7, r3
    d3c4:	781b      	ldrb	r3, [r3, #0]
    d3c6:	b25b      	sxtb	r3, r3
    d3c8:	4a24      	ldr	r2, [pc, #144]	; (d45c <send+0x15c>)
    d3ca:	011b      	lsls	r3, r3, #4
    d3cc:	18d3      	adds	r3, r2, r3
    d3ce:	330b      	adds	r3, #11
    d3d0:	781b      	ldrb	r3, [r3, #0]
    d3d2:	b2db      	uxtb	r3, r3
    d3d4:	001a      	movs	r2, r3
    d3d6:	2301      	movs	r3, #1
    d3d8:	4013      	ands	r3, r2
    d3da:	d00f      	beq.n	d3fc <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    d3dc:	2323      	movs	r3, #35	; 0x23
    d3de:	18fb      	adds	r3, r7, r3
    d3e0:	224c      	movs	r2, #76	; 0x4c
    d3e2:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    d3e4:	230f      	movs	r3, #15
    d3e6:	18fb      	adds	r3, r7, r3
    d3e8:	2200      	movs	r2, #0
    d3ea:	569a      	ldrsb	r2, [r3, r2]
    d3ec:	2324      	movs	r3, #36	; 0x24
    d3ee:	18fb      	adds	r3, r7, r3
    d3f0:	491a      	ldr	r1, [pc, #104]	; (d45c <send+0x15c>)
    d3f2:	0112      	lsls	r2, r2, #4
    d3f4:	188a      	adds	r2, r1, r2
    d3f6:	3208      	adds	r2, #8
    d3f8:	8812      	ldrh	r2, [r2, #0]
    d3fa:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    d3fc:	2323      	movs	r3, #35	; 0x23
    d3fe:	18fb      	adds	r3, r7, r3
    d400:	781b      	ldrb	r3, [r3, #0]
    d402:	2280      	movs	r2, #128	; 0x80
    d404:	4252      	negs	r2, r2
    d406:	4313      	orrs	r3, r2
    d408:	b2d9      	uxtb	r1, r3
    d40a:	2310      	movs	r3, #16
    d40c:	18fa      	adds	r2, r7, r3
    d40e:	2324      	movs	r3, #36	; 0x24
    d410:	18fb      	adds	r3, r7, r3
    d412:	881b      	ldrh	r3, [r3, #0]
    d414:	9302      	str	r3, [sp, #8]
    d416:	230c      	movs	r3, #12
    d418:	18fb      	adds	r3, r7, r3
    d41a:	881b      	ldrh	r3, [r3, #0]
    d41c:	9301      	str	r3, [sp, #4]
    d41e:	68bb      	ldr	r3, [r7, #8]
    d420:	9300      	str	r3, [sp, #0]
    d422:	2310      	movs	r3, #16
    d424:	2002      	movs	r0, #2
    d426:	4c0e      	ldr	r4, [pc, #56]	; (d460 <send+0x160>)
    d428:	47a0      	blx	r4
    d42a:	0003      	movs	r3, r0
    d42c:	001a      	movs	r2, r3
    d42e:	2326      	movs	r3, #38	; 0x26
    d430:	18fb      	adds	r3, r7, r3
    d432:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    d434:	2326      	movs	r3, #38	; 0x26
    d436:	18fb      	adds	r3, r7, r3
    d438:	2200      	movs	r2, #0
    d43a:	5e9b      	ldrsh	r3, [r3, r2]
    d43c:	2b00      	cmp	r3, #0
    d43e:	d004      	beq.n	d44a <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    d440:	2326      	movs	r3, #38	; 0x26
    d442:	18fb      	adds	r3, r7, r3
    d444:	220e      	movs	r2, #14
    d446:	4252      	negs	r2, r2
    d448:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    d44a:	2326      	movs	r3, #38	; 0x26
    d44c:	18fb      	adds	r3, r7, r3
    d44e:	2200      	movs	r2, #0
    d450:	5e9b      	ldrsh	r3, [r3, r2]
}
    d452:	0018      	movs	r0, r3
    d454:	46bd      	mov	sp, r7
    d456:	b00b      	add	sp, #44	; 0x2c
    d458:	bd90      	pop	{r4, r7, pc}
    d45a:	46c0      	nop			; (mov r8, r8)
    d45c:	200002a4 	.word	0x200002a4
    d460:	00008e85 	.word	0x00008e85

0000d464 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    d464:	b590      	push	{r4, r7, lr}
    d466:	b08d      	sub	sp, #52	; 0x34
    d468:	af04      	add	r7, sp, #16
    d46a:	60b9      	str	r1, [r7, #8]
    d46c:	0011      	movs	r1, r2
    d46e:	607b      	str	r3, [r7, #4]
    d470:	230f      	movs	r3, #15
    d472:	18fb      	adds	r3, r7, r3
    d474:	1c02      	adds	r2, r0, #0
    d476:	701a      	strb	r2, [r3, #0]
    d478:	230c      	movs	r3, #12
    d47a:	18fb      	adds	r3, r7, r3
    d47c:	1c0a      	adds	r2, r1, #0
    d47e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    d480:	231e      	movs	r3, #30
    d482:	18fb      	adds	r3, r7, r3
    d484:	2206      	movs	r2, #6
    d486:	4252      	negs	r2, r2
    d488:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    d48a:	230f      	movs	r3, #15
    d48c:	18fb      	adds	r3, r7, r3
    d48e:	781b      	ldrb	r3, [r3, #0]
    d490:	2b7f      	cmp	r3, #127	; 0x7f
    d492:	d900      	bls.n	d496 <recv+0x32>
    d494:	e099      	b.n	d5ca <recv+0x166>
    d496:	68bb      	ldr	r3, [r7, #8]
    d498:	2b00      	cmp	r3, #0
    d49a:	d100      	bne.n	d49e <recv+0x3a>
    d49c:	e095      	b.n	d5ca <recv+0x166>
    d49e:	230c      	movs	r3, #12
    d4a0:	18fb      	adds	r3, r7, r3
    d4a2:	881b      	ldrh	r3, [r3, #0]
    d4a4:	2b00      	cmp	r3, #0
    d4a6:	d100      	bne.n	d4aa <recv+0x46>
    d4a8:	e08f      	b.n	d5ca <recv+0x166>
    d4aa:	230f      	movs	r3, #15
    d4ac:	18fb      	adds	r3, r7, r3
    d4ae:	781b      	ldrb	r3, [r3, #0]
    d4b0:	b25b      	sxtb	r3, r3
    d4b2:	4a4a      	ldr	r2, [pc, #296]	; (d5dc <recv+0x178>)
    d4b4:	011b      	lsls	r3, r3, #4
    d4b6:	18d3      	adds	r3, r2, r3
    d4b8:	330a      	adds	r3, #10
    d4ba:	781b      	ldrb	r3, [r3, #0]
    d4bc:	b2db      	uxtb	r3, r3
    d4be:	2b01      	cmp	r3, #1
    d4c0:	d000      	beq.n	d4c4 <recv+0x60>
    d4c2:	e082      	b.n	d5ca <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    d4c4:	231e      	movs	r3, #30
    d4c6:	18fb      	adds	r3, r7, r3
    d4c8:	2200      	movs	r2, #0
    d4ca:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    d4cc:	230f      	movs	r3, #15
    d4ce:	18fb      	adds	r3, r7, r3
    d4d0:	2200      	movs	r2, #0
    d4d2:	569a      	ldrsb	r2, [r3, r2]
    d4d4:	4b41      	ldr	r3, [pc, #260]	; (d5dc <recv+0x178>)
    d4d6:	0112      	lsls	r2, r2, #4
    d4d8:	68b9      	ldr	r1, [r7, #8]
    d4da:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    d4dc:	230f      	movs	r3, #15
    d4de:	18fb      	adds	r3, r7, r3
    d4e0:	781b      	ldrb	r3, [r3, #0]
    d4e2:	b25b      	sxtb	r3, r3
    d4e4:	4a3d      	ldr	r2, [pc, #244]	; (d5dc <recv+0x178>)
    d4e6:	011b      	lsls	r3, r3, #4
    d4e8:	18d3      	adds	r3, r2, r3
    d4ea:	3304      	adds	r3, #4
    d4ec:	220c      	movs	r2, #12
    d4ee:	18ba      	adds	r2, r7, r2
    d4f0:	8812      	ldrh	r2, [r2, #0]
    d4f2:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    d4f4:	230f      	movs	r3, #15
    d4f6:	18fb      	adds	r3, r7, r3
    d4f8:	781b      	ldrb	r3, [r3, #0]
    d4fa:	b25b      	sxtb	r3, r3
    d4fc:	4a37      	ldr	r2, [pc, #220]	; (d5dc <recv+0x178>)
    d4fe:	011b      	lsls	r3, r3, #4
    d500:	18d3      	adds	r3, r2, r3
    d502:	330c      	adds	r3, #12
    d504:	781b      	ldrb	r3, [r3, #0]
    d506:	b2db      	uxtb	r3, r3
    d508:	2b00      	cmp	r3, #0
    d50a:	d15e      	bne.n	d5ca <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    d50c:	231d      	movs	r3, #29
    d50e:	18fb      	adds	r3, r7, r3
    d510:	2246      	movs	r2, #70	; 0x46
    d512:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    d514:	230f      	movs	r3, #15
    d516:	18fb      	adds	r3, r7, r3
    d518:	781b      	ldrb	r3, [r3, #0]
    d51a:	b25b      	sxtb	r3, r3
    d51c:	4a2f      	ldr	r2, [pc, #188]	; (d5dc <recv+0x178>)
    d51e:	011b      	lsls	r3, r3, #4
    d520:	18d3      	adds	r3, r2, r3
    d522:	330c      	adds	r3, #12
    d524:	2201      	movs	r2, #1
    d526:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d528:	230f      	movs	r3, #15
    d52a:	18fb      	adds	r3, r7, r3
    d52c:	781b      	ldrb	r3, [r3, #0]
    d52e:	b25b      	sxtb	r3, r3
    d530:	4a2a      	ldr	r2, [pc, #168]	; (d5dc <recv+0x178>)
    d532:	011b      	lsls	r3, r3, #4
    d534:	18d3      	adds	r3, r2, r3
    d536:	330b      	adds	r3, #11
    d538:	781b      	ldrb	r3, [r3, #0]
    d53a:	b2db      	uxtb	r3, r3
    d53c:	001a      	movs	r2, r3
    d53e:	2301      	movs	r3, #1
    d540:	4013      	ands	r3, r2
    d542:	d003      	beq.n	d54c <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    d544:	231d      	movs	r3, #29
    d546:	18fb      	adds	r3, r7, r3
    d548:	224d      	movs	r2, #77	; 0x4d
    d54a:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    d54c:	687b      	ldr	r3, [r7, #4]
    d54e:	2b00      	cmp	r3, #0
    d550:	d105      	bne.n	d55e <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    d552:	2314      	movs	r3, #20
    d554:	18fb      	adds	r3, r7, r3
    d556:	2201      	movs	r2, #1
    d558:	4252      	negs	r2, r2
    d55a:	601a      	str	r2, [r3, #0]
    d55c:	e003      	b.n	d566 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    d55e:	2314      	movs	r3, #20
    d560:	18fb      	adds	r3, r7, r3
    d562:	687a      	ldr	r2, [r7, #4]
    d564:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    d566:	2314      	movs	r3, #20
    d568:	18fb      	adds	r3, r7, r3
    d56a:	220f      	movs	r2, #15
    d56c:	18ba      	adds	r2, r7, r2
    d56e:	7812      	ldrb	r2, [r2, #0]
    d570:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    d572:	230f      	movs	r3, #15
    d574:	18fb      	adds	r3, r7, r3
    d576:	781b      	ldrb	r3, [r3, #0]
    d578:	b25b      	sxtb	r3, r3
    d57a:	4a18      	ldr	r2, [pc, #96]	; (d5dc <recv+0x178>)
    d57c:	011b      	lsls	r3, r3, #4
    d57e:	18d3      	adds	r3, r2, r3
    d580:	3306      	adds	r3, #6
    d582:	881b      	ldrh	r3, [r3, #0]
    d584:	b29a      	uxth	r2, r3
    d586:	2314      	movs	r3, #20
    d588:	18fb      	adds	r3, r7, r3
    d58a:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    d58c:	2314      	movs	r3, #20
    d58e:	18fa      	adds	r2, r7, r3
    d590:	231d      	movs	r3, #29
    d592:	18fb      	adds	r3, r7, r3
    d594:	7819      	ldrb	r1, [r3, #0]
    d596:	2300      	movs	r3, #0
    d598:	9302      	str	r3, [sp, #8]
    d59a:	2300      	movs	r3, #0
    d59c:	9301      	str	r3, [sp, #4]
    d59e:	2300      	movs	r3, #0
    d5a0:	9300      	str	r3, [sp, #0]
    d5a2:	2308      	movs	r3, #8
    d5a4:	2002      	movs	r0, #2
    d5a6:	4c0e      	ldr	r4, [pc, #56]	; (d5e0 <recv+0x17c>)
    d5a8:	47a0      	blx	r4
    d5aa:	0003      	movs	r3, r0
    d5ac:	001a      	movs	r2, r3
    d5ae:	231e      	movs	r3, #30
    d5b0:	18fb      	adds	r3, r7, r3
    d5b2:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    d5b4:	231e      	movs	r3, #30
    d5b6:	18fb      	adds	r3, r7, r3
    d5b8:	2200      	movs	r2, #0
    d5ba:	5e9b      	ldrsh	r3, [r3, r2]
    d5bc:	2b00      	cmp	r3, #0
    d5be:	d004      	beq.n	d5ca <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    d5c0:	231e      	movs	r3, #30
    d5c2:	18fb      	adds	r3, r7, r3
    d5c4:	220e      	movs	r2, #14
    d5c6:	4252      	negs	r2, r2
    d5c8:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    d5ca:	231e      	movs	r3, #30
    d5cc:	18fb      	adds	r3, r7, r3
    d5ce:	2200      	movs	r2, #0
    d5d0:	5e9b      	ldrsh	r3, [r3, r2]
}
    d5d2:	0018      	movs	r0, r3
    d5d4:	46bd      	mov	sp, r7
    d5d6:	b009      	add	sp, #36	; 0x24
    d5d8:	bd90      	pop	{r4, r7, pc}
    d5da:	46c0      	nop			; (mov r8, r8)
    d5dc:	200002a4 	.word	0x200002a4
    d5e0:	00008e85 	.word	0x00008e85

0000d5e4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    d5e4:	b5b0      	push	{r4, r5, r7, lr}
    d5e6:	b088      	sub	sp, #32
    d5e8:	af04      	add	r7, sp, #16
    d5ea:	0002      	movs	r2, r0
    d5ec:	1dfb      	adds	r3, r7, #7
    d5ee:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    d5f0:	230f      	movs	r3, #15
    d5f2:	18fb      	adds	r3, r7, r3
    d5f4:	22fa      	movs	r2, #250	; 0xfa
    d5f6:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    d5f8:	4b42      	ldr	r3, [pc, #264]	; (d704 <close+0x120>)
    d5fa:	0018      	movs	r0, r3
    d5fc:	4b42      	ldr	r3, [pc, #264]	; (d708 <close+0x124>)
    d5fe:	4798      	blx	r3
    d600:	1dfb      	adds	r3, r7, #7
    d602:	2200      	movs	r2, #0
    d604:	569a      	ldrsb	r2, [r3, r2]
    d606:	4b41      	ldr	r3, [pc, #260]	; (d70c <close+0x128>)
    d608:	0011      	movs	r1, r2
    d60a:	0018      	movs	r0, r3
    d60c:	4b3e      	ldr	r3, [pc, #248]	; (d708 <close+0x124>)
    d60e:	4798      	blx	r3
    d610:	200d      	movs	r0, #13
    d612:	4b3f      	ldr	r3, [pc, #252]	; (d710 <close+0x12c>)
    d614:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    d616:	1dfb      	adds	r3, r7, #7
    d618:	781b      	ldrb	r3, [r3, #0]
    d61a:	2b7f      	cmp	r3, #127	; 0x7f
    d61c:	d86a      	bhi.n	d6f4 <close+0x110>
    d61e:	1dfb      	adds	r3, r7, #7
    d620:	781b      	ldrb	r3, [r3, #0]
    d622:	b25b      	sxtb	r3, r3
    d624:	4a3b      	ldr	r2, [pc, #236]	; (d714 <close+0x130>)
    d626:	011b      	lsls	r3, r3, #4
    d628:	18d3      	adds	r3, r2, r3
    d62a:	330a      	adds	r3, #10
    d62c:	781b      	ldrb	r3, [r3, #0]
    d62e:	b2db      	uxtb	r3, r3
    d630:	2b01      	cmp	r3, #1
    d632:	d15f      	bne.n	d6f4 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    d634:	230e      	movs	r3, #14
    d636:	18fb      	adds	r3, r7, r3
    d638:	2249      	movs	r2, #73	; 0x49
    d63a:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    d63c:	2308      	movs	r3, #8
    d63e:	18fb      	adds	r3, r7, r3
    d640:	1dfa      	adds	r2, r7, #7
    d642:	7812      	ldrb	r2, [r2, #0]
    d644:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    d646:	1dfb      	adds	r3, r7, #7
    d648:	781b      	ldrb	r3, [r3, #0]
    d64a:	b25b      	sxtb	r3, r3
    d64c:	4a31      	ldr	r2, [pc, #196]	; (d714 <close+0x130>)
    d64e:	011b      	lsls	r3, r3, #4
    d650:	18d3      	adds	r3, r2, r3
    d652:	3306      	adds	r3, #6
    d654:	881b      	ldrh	r3, [r3, #0]
    d656:	b29a      	uxth	r2, r3
    d658:	2308      	movs	r3, #8
    d65a:	18fb      	adds	r3, r7, r3
    d65c:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    d65e:	1dfb      	adds	r3, r7, #7
    d660:	781b      	ldrb	r3, [r3, #0]
    d662:	b25b      	sxtb	r3, r3
    d664:	4a2b      	ldr	r2, [pc, #172]	; (d714 <close+0x130>)
    d666:	011b      	lsls	r3, r3, #4
    d668:	18d3      	adds	r3, r2, r3
    d66a:	330a      	adds	r3, #10
    d66c:	2200      	movs	r2, #0
    d66e:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    d670:	1dfb      	adds	r3, r7, #7
    d672:	781b      	ldrb	r3, [r3, #0]
    d674:	b25b      	sxtb	r3, r3
    d676:	4a27      	ldr	r2, [pc, #156]	; (d714 <close+0x130>)
    d678:	011b      	lsls	r3, r3, #4
    d67a:	18d3      	adds	r3, r2, r3
    d67c:	3306      	adds	r3, #6
    d67e:	2200      	movs	r2, #0
    d680:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    d682:	1dfb      	adds	r3, r7, #7
    d684:	781b      	ldrb	r3, [r3, #0]
    d686:	b25b      	sxtb	r3, r3
    d688:	4a22      	ldr	r2, [pc, #136]	; (d714 <close+0x130>)
    d68a:	011b      	lsls	r3, r3, #4
    d68c:	18d3      	adds	r3, r2, r3
    d68e:	330b      	adds	r3, #11
    d690:	781b      	ldrb	r3, [r3, #0]
    d692:	b2db      	uxtb	r3, r3
    d694:	001a      	movs	r2, r3
    d696:	2301      	movs	r3, #1
    d698:	4013      	ands	r3, r2
    d69a:	d003      	beq.n	d6a4 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    d69c:	230e      	movs	r3, #14
    d69e:	18fb      	adds	r3, r7, r3
    d6a0:	224e      	movs	r2, #78	; 0x4e
    d6a2:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    d6a4:	230f      	movs	r3, #15
    d6a6:	18fc      	adds	r4, r7, r3
    d6a8:	2308      	movs	r3, #8
    d6aa:	18fa      	adds	r2, r7, r3
    d6ac:	230e      	movs	r3, #14
    d6ae:	18fb      	adds	r3, r7, r3
    d6b0:	7819      	ldrb	r1, [r3, #0]
    d6b2:	2300      	movs	r3, #0
    d6b4:	9302      	str	r3, [sp, #8]
    d6b6:	2300      	movs	r3, #0
    d6b8:	9301      	str	r3, [sp, #4]
    d6ba:	2300      	movs	r3, #0
    d6bc:	9300      	str	r3, [sp, #0]
    d6be:	2304      	movs	r3, #4
    d6c0:	2002      	movs	r0, #2
    d6c2:	4d15      	ldr	r5, [pc, #84]	; (d718 <close+0x134>)
    d6c4:	47a8      	blx	r5
    d6c6:	0003      	movs	r3, r0
    d6c8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    d6ca:	230f      	movs	r3, #15
    d6cc:	18fb      	adds	r3, r7, r3
    d6ce:	781b      	ldrb	r3, [r3, #0]
    d6d0:	b25b      	sxtb	r3, r3
    d6d2:	2b00      	cmp	r3, #0
    d6d4:	d003      	beq.n	d6de <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    d6d6:	230f      	movs	r3, #15
    d6d8:	18fb      	adds	r3, r7, r3
    d6da:	22f7      	movs	r2, #247	; 0xf7
    d6dc:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    d6de:	1dfb      	adds	r3, r7, #7
    d6e0:	781b      	ldrb	r3, [r3, #0]
    d6e2:	b25b      	sxtb	r3, r3
    d6e4:	011a      	lsls	r2, r3, #4
    d6e6:	4b0b      	ldr	r3, [pc, #44]	; (d714 <close+0x130>)
    d6e8:	18d3      	adds	r3, r2, r3
    d6ea:	2210      	movs	r2, #16
    d6ec:	2100      	movs	r1, #0
    d6ee:	0018      	movs	r0, r3
    d6f0:	4b0a      	ldr	r3, [pc, #40]	; (d71c <close+0x138>)
    d6f2:	4798      	blx	r3
	}
	return s8Ret;
    d6f4:	230f      	movs	r3, #15
    d6f6:	18fb      	adds	r3, r7, r3
    d6f8:	781b      	ldrb	r3, [r3, #0]
    d6fa:	b25b      	sxtb	r3, r3
}
    d6fc:	0018      	movs	r0, r3
    d6fe:	46bd      	mov	sp, r7
    d700:	b004      	add	sp, #16
    d702:	bdb0      	pop	{r4, r5, r7, pc}
    d704:	00019318 	.word	0x00019318
    d708:	00016db1 	.word	0x00016db1
    d70c:	00019354 	.word	0x00019354
    d710:	00016de5 	.word	0x00016de5
    d714:	200002a4 	.word	0x200002a4
    d718:	00008e85 	.word	0x00008e85
    d71c:	00008c25 	.word	0x00008c25

0000d720 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    d720:	b580      	push	{r7, lr}
    d722:	b086      	sub	sp, #24
    d724:	af00      	add	r7, sp, #0
    d726:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
    d728:	2300      	movs	r3, #0
    d72a:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
    d72c:	2317      	movs	r3, #23
    d72e:	18fb      	adds	r3, r7, r3
    d730:	2200      	movs	r2, #0
    d732:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
    d734:	2316      	movs	r3, #22
    d736:	18fb      	adds	r3, r7, r3
    d738:	2200      	movs	r2, #0
    d73a:	701a      	strb	r2, [r3, #0]
    d73c:	e060      	b.n	d800 <nmi_inet_addr+0xe0>
	{
		j = 0;
    d73e:	2315      	movs	r3, #21
    d740:	18fb      	adds	r3, r7, r3
    d742:	2200      	movs	r2, #0
    d744:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
    d746:	2314      	movs	r3, #20
    d748:	18fb      	adds	r3, r7, r3
    d74a:	687a      	ldr	r2, [r7, #4]
    d74c:	7812      	ldrb	r2, [r2, #0]
    d74e:	701a      	strb	r2, [r3, #0]
			++j;
    d750:	2315      	movs	r3, #21
    d752:	18fb      	adds	r3, r7, r3
    d754:	2215      	movs	r2, #21
    d756:	18ba      	adds	r2, r7, r2
    d758:	7812      	ldrb	r2, [r2, #0]
    d75a:	3201      	adds	r2, #1
    d75c:	701a      	strb	r2, [r3, #0]
			if(j > 4)
    d75e:	2315      	movs	r3, #21
    d760:	18fb      	adds	r3, r7, r3
    d762:	781b      	ldrb	r3, [r3, #0]
    d764:	2b04      	cmp	r3, #4
    d766:	d901      	bls.n	d76c <nmi_inet_addr+0x4c>
			{
				return 0;
    d768:	2300      	movs	r3, #0
    d76a:	e057      	b.n	d81c <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
    d76c:	2314      	movs	r3, #20
    d76e:	18fb      	adds	r3, r7, r3
    d770:	781b      	ldrb	r3, [r3, #0]
    d772:	2b2e      	cmp	r3, #46	; 0x2e
    d774:	d004      	beq.n	d780 <nmi_inet_addr+0x60>
    d776:	2314      	movs	r3, #20
    d778:	18fb      	adds	r3, r7, r3
    d77a:	781b      	ldrb	r3, [r3, #0]
    d77c:	2b00      	cmp	r3, #0
    d77e:	d10d      	bne.n	d79c <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
    d780:	2316      	movs	r3, #22
    d782:	18fb      	adds	r3, r7, r3
    d784:	781b      	ldrb	r3, [r3, #0]
    d786:	220c      	movs	r2, #12
    d788:	18ba      	adds	r2, r7, r2
    d78a:	2117      	movs	r1, #23
    d78c:	1879      	adds	r1, r7, r1
    d78e:	7809      	ldrb	r1, [r1, #0]
    d790:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
    d792:	2317      	movs	r3, #23
    d794:	18fb      	adds	r3, r7, r3
    d796:	2200      	movs	r2, #0
    d798:	701a      	strb	r2, [r3, #0]
    d79a:	e01d      	b.n	d7d8 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
    d79c:	2314      	movs	r3, #20
    d79e:	18fb      	adds	r3, r7, r3
    d7a0:	781b      	ldrb	r3, [r3, #0]
    d7a2:	2b2f      	cmp	r3, #47	; 0x2f
    d7a4:	d916      	bls.n	d7d4 <nmi_inet_addr+0xb4>
    d7a6:	2314      	movs	r3, #20
    d7a8:	18fb      	adds	r3, r7, r3
    d7aa:	781b      	ldrb	r3, [r3, #0]
    d7ac:	2b39      	cmp	r3, #57	; 0x39
    d7ae:	d811      	bhi.n	d7d4 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
    d7b0:	2317      	movs	r3, #23
    d7b2:	18fb      	adds	r3, r7, r3
    d7b4:	781b      	ldrb	r3, [r3, #0]
    d7b6:	1c1a      	adds	r2, r3, #0
    d7b8:	0092      	lsls	r2, r2, #2
    d7ba:	18d3      	adds	r3, r2, r3
    d7bc:	18db      	adds	r3, r3, r3
    d7be:	b2da      	uxtb	r2, r3
    d7c0:	2314      	movs	r3, #20
    d7c2:	18fb      	adds	r3, r7, r3
    d7c4:	781b      	ldrb	r3, [r3, #0]
    d7c6:	18d3      	adds	r3, r2, r3
    d7c8:	b2da      	uxtb	r2, r3
    d7ca:	2317      	movs	r3, #23
    d7cc:	18fb      	adds	r3, r7, r3
    d7ce:	3a30      	subs	r2, #48	; 0x30
    d7d0:	701a      	strb	r2, [r3, #0]
    d7d2:	e001      	b.n	d7d8 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
    d7d4:	2300      	movs	r3, #0
    d7d6:	e021      	b.n	d81c <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
    d7d8:	687b      	ldr	r3, [r7, #4]
    d7da:	3301      	adds	r3, #1
    d7dc:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
    d7de:	2314      	movs	r3, #20
    d7e0:	18fb      	adds	r3, r7, r3
    d7e2:	781b      	ldrb	r3, [r3, #0]
    d7e4:	2b2e      	cmp	r3, #46	; 0x2e
    d7e6:	d004      	beq.n	d7f2 <nmi_inet_addr+0xd2>
    d7e8:	2314      	movs	r3, #20
    d7ea:	18fb      	adds	r3, r7, r3
    d7ec:	781b      	ldrb	r3, [r3, #0]
    d7ee:	2b00      	cmp	r3, #0
    d7f0:	d1a9      	bne.n	d746 <nmi_inet_addr+0x26>
	uint8 	c;
	uint8	i, j;

	tmp = 0;

	for(i = 0; i < 4; ++i)
    d7f2:	2316      	movs	r3, #22
    d7f4:	18fb      	adds	r3, r7, r3
    d7f6:	2216      	movs	r2, #22
    d7f8:	18ba      	adds	r2, r7, r2
    d7fa:	7812      	ldrb	r2, [r2, #0]
    d7fc:	3201      	adds	r2, #1
    d7fe:	701a      	strb	r2, [r3, #0]
    d800:	2316      	movs	r3, #22
    d802:	18fb      	adds	r3, r7, r3
    d804:	781b      	ldrb	r3, [r3, #0]
    d806:	2b03      	cmp	r3, #3
    d808:	d999      	bls.n	d73e <nmi_inet_addr+0x1e>
				return 0;
			}
			++pcIpAddr;
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    d80a:	230c      	movs	r3, #12
    d80c:	18f9      	adds	r1, r7, r3
    d80e:	2310      	movs	r3, #16
    d810:	18fb      	adds	r3, r7, r3
    d812:	2204      	movs	r2, #4
    d814:	0018      	movs	r0, r3
    d816:	4b03      	ldr	r3, [pc, #12]	; (d824 <nmi_inet_addr+0x104>)
    d818:	4798      	blx	r3
	return u32IP;
    d81a:	693b      	ldr	r3, [r7, #16]
}
    d81c:	0018      	movs	r0, r3
    d81e:	46bd      	mov	sp, r7
    d820:	b006      	add	sp, #24
    d822:	bd80      	pop	{r7, pc}
    d824:	00008be9 	.word	0x00008be9

0000d828 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    d828:	b5b0      	push	{r4, r5, r7, lr}
    d82a:	b088      	sub	sp, #32
    d82c:	af04      	add	r7, sp, #16
    d82e:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    d830:	230f      	movs	r3, #15
    d832:	18fb      	adds	r3, r7, r3
    d834:	22fa      	movs	r2, #250	; 0xfa
    d836:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    d838:	687b      	ldr	r3, [r7, #4]
    d83a:	0018      	movs	r0, r3
    d83c:	4b14      	ldr	r3, [pc, #80]	; (d890 <gethostbyname+0x68>)
    d83e:	4798      	blx	r3
    d840:	0003      	movs	r3, r0
    d842:	001a      	movs	r2, r3
    d844:	230e      	movs	r3, #14
    d846:	18fb      	adds	r3, r7, r3
    d848:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    d84a:	230e      	movs	r3, #14
    d84c:	18fb      	adds	r3, r7, r3
    d84e:	781b      	ldrb	r3, [r3, #0]
    d850:	2b40      	cmp	r3, #64	; 0x40
    d852:	d815      	bhi.n	d880 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    d854:	230e      	movs	r3, #14
    d856:	18fb      	adds	r3, r7, r3
    d858:	781b      	ldrb	r3, [r3, #0]
    d85a:	b29b      	uxth	r3, r3
    d85c:	3301      	adds	r3, #1
    d85e:	b299      	uxth	r1, r3
    d860:	230f      	movs	r3, #15
    d862:	18fc      	adds	r4, r7, r3
    d864:	687a      	ldr	r2, [r7, #4]
    d866:	2300      	movs	r3, #0
    d868:	9302      	str	r3, [sp, #8]
    d86a:	2300      	movs	r3, #0
    d86c:	9301      	str	r3, [sp, #4]
    d86e:	2300      	movs	r3, #0
    d870:	9300      	str	r3, [sp, #0]
    d872:	000b      	movs	r3, r1
    d874:	214a      	movs	r1, #74	; 0x4a
    d876:	2002      	movs	r0, #2
    d878:	4d06      	ldr	r5, [pc, #24]	; (d894 <gethostbyname+0x6c>)
    d87a:	47a8      	blx	r5
    d87c:	0003      	movs	r3, r0
    d87e:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    d880:	230f      	movs	r3, #15
    d882:	18fb      	adds	r3, r7, r3
    d884:	781b      	ldrb	r3, [r3, #0]
    d886:	b25b      	sxtb	r3, r3
}
    d888:	0018      	movs	r0, r3
    d88a:	46bd      	mov	sp, r7
    d88c:	b004      	add	sp, #16
    d88e:	bdb0      	pop	{r4, r5, r7, pc}
    d890:	00008c65 	.word	0x00008c65
    d894:	00008e85 	.word	0x00008e85

0000d898 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    d898:	b580      	push	{r7, lr}
    d89a:	b082      	sub	sp, #8
    d89c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    d89e:	003b      	movs	r3, r7
    d8a0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    d8a2:	687b      	ldr	r3, [r7, #4]
    d8a4:	22b9      	movs	r2, #185	; 0xb9
    d8a6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    d8a8:	4b13      	ldr	r3, [pc, #76]	; (d8f8 <spi_flash_enter_low_power_mode+0x60>)
    d8aa:	2100      	movs	r1, #0
    d8ac:	0018      	movs	r0, r3
    d8ae:	4b13      	ldr	r3, [pc, #76]	; (d8fc <spi_flash_enter_low_power_mode+0x64>)
    d8b0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    d8b2:	687b      	ldr	r3, [r7, #4]
    d8b4:	781b      	ldrb	r3, [r3, #0]
    d8b6:	001a      	movs	r2, r3
    d8b8:	4b11      	ldr	r3, [pc, #68]	; (d900 <spi_flash_enter_low_power_mode+0x68>)
    d8ba:	0011      	movs	r1, r2
    d8bc:	0018      	movs	r0, r3
    d8be:	4b0f      	ldr	r3, [pc, #60]	; (d8fc <spi_flash_enter_low_power_mode+0x64>)
    d8c0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    d8c2:	4b10      	ldr	r3, [pc, #64]	; (d904 <spi_flash_enter_low_power_mode+0x6c>)
    d8c4:	2101      	movs	r1, #1
    d8c6:	0018      	movs	r0, r3
    d8c8:	4b0c      	ldr	r3, [pc, #48]	; (d8fc <spi_flash_enter_low_power_mode+0x64>)
    d8ca:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    d8cc:	4b0e      	ldr	r3, [pc, #56]	; (d908 <spi_flash_enter_low_power_mode+0x70>)
    d8ce:	2100      	movs	r1, #0
    d8d0:	0018      	movs	r0, r3
    d8d2:	4b0a      	ldr	r3, [pc, #40]	; (d8fc <spi_flash_enter_low_power_mode+0x64>)
    d8d4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    d8d6:	4b0d      	ldr	r3, [pc, #52]	; (d90c <spi_flash_enter_low_power_mode+0x74>)
    d8d8:	2181      	movs	r1, #129	; 0x81
    d8da:	0018      	movs	r0, r3
    d8dc:	4b07      	ldr	r3, [pc, #28]	; (d8fc <spi_flash_enter_low_power_mode+0x64>)
    d8de:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    d8e0:	46c0      	nop			; (mov r8, r8)
    d8e2:	4b0b      	ldr	r3, [pc, #44]	; (d910 <spi_flash_enter_low_power_mode+0x78>)
    d8e4:	0018      	movs	r0, r3
    d8e6:	4b0b      	ldr	r3, [pc, #44]	; (d914 <spi_flash_enter_low_power_mode+0x7c>)
    d8e8:	4798      	blx	r3
    d8ea:	1e03      	subs	r3, r0, #0
    d8ec:	2b01      	cmp	r3, #1
    d8ee:	d1f8      	bne.n	d8e2 <spi_flash_enter_low_power_mode+0x4a>
}
    d8f0:	46c0      	nop			; (mov r8, r8)
    d8f2:	46bd      	mov	sp, r7
    d8f4:	b002      	add	sp, #8
    d8f6:	bd80      	pop	{r7, pc}
    d8f8:	00010208 	.word	0x00010208
    d8fc:	0000ac8d 	.word	0x0000ac8d
    d900:	0001020c 	.word	0x0001020c
    d904:	00010214 	.word	0x00010214
    d908:	0001021c 	.word	0x0001021c
    d90c:	00010204 	.word	0x00010204
    d910:	00010218 	.word	0x00010218
    d914:	0000ac49 	.word	0x0000ac49

0000d918 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    d918:	b580      	push	{r7, lr}
    d91a:	b082      	sub	sp, #8
    d91c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    d91e:	003b      	movs	r3, r7
    d920:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    d922:	687b      	ldr	r3, [r7, #4]
    d924:	22ab      	movs	r2, #171	; 0xab
    d926:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    d928:	4b13      	ldr	r3, [pc, #76]	; (d978 <spi_flash_leave_low_power_mode+0x60>)
    d92a:	2100      	movs	r1, #0
    d92c:	0018      	movs	r0, r3
    d92e:	4b13      	ldr	r3, [pc, #76]	; (d97c <spi_flash_leave_low_power_mode+0x64>)
    d930:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    d932:	687b      	ldr	r3, [r7, #4]
    d934:	781b      	ldrb	r3, [r3, #0]
    d936:	001a      	movs	r2, r3
    d938:	4b11      	ldr	r3, [pc, #68]	; (d980 <spi_flash_leave_low_power_mode+0x68>)
    d93a:	0011      	movs	r1, r2
    d93c:	0018      	movs	r0, r3
    d93e:	4b0f      	ldr	r3, [pc, #60]	; (d97c <spi_flash_leave_low_power_mode+0x64>)
    d940:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    d942:	4b10      	ldr	r3, [pc, #64]	; (d984 <spi_flash_leave_low_power_mode+0x6c>)
    d944:	2101      	movs	r1, #1
    d946:	0018      	movs	r0, r3
    d948:	4b0c      	ldr	r3, [pc, #48]	; (d97c <spi_flash_leave_low_power_mode+0x64>)
    d94a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    d94c:	4b0e      	ldr	r3, [pc, #56]	; (d988 <spi_flash_leave_low_power_mode+0x70>)
    d94e:	2100      	movs	r1, #0
    d950:	0018      	movs	r0, r3
    d952:	4b0a      	ldr	r3, [pc, #40]	; (d97c <spi_flash_leave_low_power_mode+0x64>)
    d954:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    d956:	4b0d      	ldr	r3, [pc, #52]	; (d98c <spi_flash_leave_low_power_mode+0x74>)
    d958:	2181      	movs	r1, #129	; 0x81
    d95a:	0018      	movs	r0, r3
    d95c:	4b07      	ldr	r3, [pc, #28]	; (d97c <spi_flash_leave_low_power_mode+0x64>)
    d95e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    d960:	46c0      	nop			; (mov r8, r8)
    d962:	4b0b      	ldr	r3, [pc, #44]	; (d990 <spi_flash_leave_low_power_mode+0x78>)
    d964:	0018      	movs	r0, r3
    d966:	4b0b      	ldr	r3, [pc, #44]	; (d994 <spi_flash_leave_low_power_mode+0x7c>)
    d968:	4798      	blx	r3
    d96a:	1e03      	subs	r3, r0, #0
    d96c:	2b01      	cmp	r3, #1
    d96e:	d1f8      	bne.n	d962 <spi_flash_leave_low_power_mode+0x4a>
}
    d970:	46c0      	nop			; (mov r8, r8)
    d972:	46bd      	mov	sp, r7
    d974:	b002      	add	sp, #8
    d976:	bd80      	pop	{r7, pc}
    d978:	00010208 	.word	0x00010208
    d97c:	0000ac8d 	.word	0x0000ac8d
    d980:	0001020c 	.word	0x0001020c
    d984:	00010214 	.word	0x00010214
    d988:	0001021c 	.word	0x0001021c
    d98c:	00010204 	.word	0x00010204
    d990:	00010218 	.word	0x00010218
    d994:	0000ac49 	.word	0x0000ac49

0000d998 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    d998:	b590      	push	{r4, r7, lr}
    d99a:	b085      	sub	sp, #20
    d99c:	af00      	add	r7, sp, #0
    d99e:	0002      	movs	r2, r0
    d9a0:	1dfb      	adds	r3, r7, #7
    d9a2:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    d9a4:	230f      	movs	r3, #15
    d9a6:	18fb      	adds	r3, r7, r3
    d9a8:	2200      	movs	r2, #0
    d9aa:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    d9ac:	4b24      	ldr	r3, [pc, #144]	; (da40 <spi_flash_enable+0xa8>)
    d9ae:	4798      	blx	r3
    d9b0:	0003      	movs	r3, r0
    d9b2:	051b      	lsls	r3, r3, #20
    d9b4:	0d1b      	lsrs	r3, r3, #20
    d9b6:	4a23      	ldr	r2, [pc, #140]	; (da44 <spi_flash_enable+0xac>)
    d9b8:	4293      	cmp	r3, r2
    d9ba:	d938      	bls.n	da2e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    d9bc:	230f      	movs	r3, #15
    d9be:	18fc      	adds	r4, r7, r3
    d9c0:	2308      	movs	r3, #8
    d9c2:	18fb      	adds	r3, r7, r3
    d9c4:	4a20      	ldr	r2, [pc, #128]	; (da48 <spi_flash_enable+0xb0>)
    d9c6:	0019      	movs	r1, r3
    d9c8:	0010      	movs	r0, r2
    d9ca:	4b20      	ldr	r3, [pc, #128]	; (da4c <spi_flash_enable+0xb4>)
    d9cc:	4798      	blx	r3
    d9ce:	0003      	movs	r3, r0
    d9d0:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    d9d2:	230f      	movs	r3, #15
    d9d4:	18fb      	adds	r3, r7, r3
    d9d6:	781b      	ldrb	r3, [r3, #0]
    d9d8:	b25b      	sxtb	r3, r3
    d9da:	2b00      	cmp	r3, #0
    d9dc:	d126      	bne.n	da2c <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    d9de:	68bb      	ldr	r3, [r7, #8]
    d9e0:	4a1b      	ldr	r2, [pc, #108]	; (da50 <spi_flash_enable+0xb8>)
    d9e2:	4013      	ands	r3, r2
    d9e4:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    d9e6:	68bb      	ldr	r3, [r7, #8]
    d9e8:	4a1a      	ldr	r2, [pc, #104]	; (da54 <spi_flash_enable+0xbc>)
    d9ea:	4313      	orrs	r3, r2
    d9ec:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    d9ee:	68bb      	ldr	r3, [r7, #8]
    d9f0:	4a15      	ldr	r2, [pc, #84]	; (da48 <spi_flash_enable+0xb0>)
    d9f2:	0019      	movs	r1, r3
    d9f4:	0010      	movs	r0, r2
    d9f6:	4b18      	ldr	r3, [pc, #96]	; (da58 <spi_flash_enable+0xc0>)
    d9f8:	4798      	blx	r3
		if(enable) {
    d9fa:	1dfb      	adds	r3, r7, #7
    d9fc:	781b      	ldrb	r3, [r3, #0]
    d9fe:	2b00      	cmp	r3, #0
    da00:	d002      	beq.n	da08 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    da02:	4b16      	ldr	r3, [pc, #88]	; (da5c <spi_flash_enable+0xc4>)
    da04:	4798      	blx	r3
    da06:	e001      	b.n	da0c <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    da08:	4b15      	ldr	r3, [pc, #84]	; (da60 <spi_flash_enable+0xc8>)
    da0a:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    da0c:	68bb      	ldr	r3, [r7, #8]
    da0e:	4a10      	ldr	r2, [pc, #64]	; (da50 <spi_flash_enable+0xb8>)
    da10:	4013      	ands	r3, r2
    da12:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    da14:	68bb      	ldr	r3, [r7, #8]
    da16:	2280      	movs	r2, #128	; 0x80
    da18:	0252      	lsls	r2, r2, #9
    da1a:	4313      	orrs	r3, r2
    da1c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    da1e:	68bb      	ldr	r3, [r7, #8]
    da20:	4a09      	ldr	r2, [pc, #36]	; (da48 <spi_flash_enable+0xb0>)
    da22:	0019      	movs	r1, r3
    da24:	0010      	movs	r0, r2
    da26:	4b0c      	ldr	r3, [pc, #48]	; (da58 <spi_flash_enable+0xc0>)
    da28:	4798      	blx	r3
    da2a:	e000      	b.n	da2e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    da2c:	46c0      	nop			; (mov r8, r8)
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    da2e:	230f      	movs	r3, #15
    da30:	18fb      	adds	r3, r7, r3
    da32:	781b      	ldrb	r3, [r3, #0]
    da34:	b25b      	sxtb	r3, r3
}
    da36:	0018      	movs	r0, r3
    da38:	46bd      	mov	sp, r7
    da3a:	b005      	add	sp, #20
    da3c:	bd90      	pop	{r4, r7, pc}
    da3e:	46c0      	nop			; (mov r8, r8)
    da40:	0000a56d 	.word	0x0000a56d
    da44:	0000039f 	.word	0x0000039f
    da48:	00001410 	.word	0x00001410
    da4c:	0000ac69 	.word	0x0000ac69
    da50:	f8888fff 	.word	0xf8888fff
    da54:	01111000 	.word	0x01111000
    da58:	0000ac8d 	.word	0x0000ac8d
    da5c:	0000d919 	.word	0x0000d919
    da60:	0000d899 	.word	0x0000d899

0000da64 <_crc32_recalculate_bytes_helper>:
 *
 * \attention This implementation assumes a little-endian architecture.
 */
static inline crc32_t _crc32_recalculate_bytes_helper(word_t data,
		crc32_t crc, uint_fast8_t bytes)
{
    da64:	b580      	push	{r7, lr}
    da66:	b086      	sub	sp, #24
    da68:	af00      	add	r7, sp, #0
    da6a:	60f8      	str	r0, [r7, #12]
    da6c:	60b9      	str	r1, [r7, #8]
    da6e:	607a      	str	r2, [r7, #4]
	uint_fast8_t bit;

	crc ^= data;
    da70:	68ba      	ldr	r2, [r7, #8]
    da72:	68fb      	ldr	r3, [r7, #12]
    da74:	4053      	eors	r3, r2
    da76:	60bb      	str	r3, [r7, #8]

	for (bit = 8 * bytes; bit > 0; bit--) {
    da78:	687b      	ldr	r3, [r7, #4]
    da7a:	00db      	lsls	r3, r3, #3
    da7c:	617b      	str	r3, [r7, #20]
    da7e:	e00f      	b.n	daa0 <_crc32_recalculate_bytes_helper+0x3c>
		if (crc & 1) {
    da80:	68bb      	ldr	r3, [r7, #8]
    da82:	2201      	movs	r2, #1
    da84:	4013      	ands	r3, r2
    da86:	d005      	beq.n	da94 <_crc32_recalculate_bytes_helper+0x30>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    da88:	68bb      	ldr	r3, [r7, #8]
    da8a:	085b      	lsrs	r3, r3, #1
    da8c:	4a08      	ldr	r2, [pc, #32]	; (dab0 <_crc32_recalculate_bytes_helper+0x4c>)
    da8e:	4053      	eors	r3, r2
    da90:	60bb      	str	r3, [r7, #8]
    da92:	e002      	b.n	da9a <_crc32_recalculate_bytes_helper+0x36>
		} else {
			crc >>= 1;
    da94:	68bb      	ldr	r3, [r7, #8]
    da96:	085b      	lsrs	r3, r3, #1
    da98:	60bb      	str	r3, [r7, #8]
{
	uint_fast8_t bit;

	crc ^= data;

	for (bit = 8 * bytes; bit > 0; bit--) {
    da9a:	697b      	ldr	r3, [r7, #20]
    da9c:	3b01      	subs	r3, #1
    da9e:	617b      	str	r3, [r7, #20]
    daa0:	697b      	ldr	r3, [r7, #20]
    daa2:	2b00      	cmp	r3, #0
    daa4:	d1ec      	bne.n	da80 <_crc32_recalculate_bytes_helper+0x1c>
		} else {
			crc >>= 1;
		}
	}

	return crc;
    daa6:	68bb      	ldr	r3, [r7, #8]
}
    daa8:	0018      	movs	r0, r3
    daaa:	46bd      	mov	sp, r7
    daac:	b006      	add	sp, #24
    daae:	bd80      	pop	{r7, pc}
    dab0:	edb88320 	.word	0xedb88320

0000dab4 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    dab4:	b580      	push	{r7, lr}
    dab6:	b088      	sub	sp, #32
    dab8:	af00      	add	r7, sp, #0
    daba:	60f8      	str	r0, [r7, #12]
    dabc:	60b9      	str	r1, [r7, #8]
    dabe:	607a      	str	r2, [r7, #4]
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    dac0:	68fb      	ldr	r3, [r7, #12]
    dac2:	2203      	movs	r2, #3
    dac4:	4393      	bics	r3, r2
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
	const word_t *word_ptr =
    dac6:	61fb      	str	r3, [r7, #28]
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    dac8:	687b      	ldr	r3, [r7, #4]
    daca:	681b      	ldr	r3, [r3, #0]
    dacc:	43db      	mvns	r3, r3
    dace:	617b      	str	r3, [r7, #20]
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
    dad0:	68bb      	ldr	r3, [r7, #8]
    dad2:	2b03      	cmp	r3, #3
    dad4:	d802      	bhi.n	dadc <crc32_recalculate+0x28>
		temp_length = length;
    dad6:	68bb      	ldr	r3, [r7, #8]
    dad8:	61bb      	str	r3, [r7, #24]
    dada:	e004      	b.n	dae6 <crc32_recalculate+0x32>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    dadc:	68fb      	ldr	r3, [r7, #12]
    dade:	425b      	negs	r3, r3
    dae0:	2203      	movs	r2, #3
    dae2:	4013      	ands	r3, r2
    dae4:	61bb      	str	r3, [r7, #24]
	}

	if (temp_length) {
    dae6:	69bb      	ldr	r3, [r7, #24]
    dae8:	2b00      	cmp	r3, #0
    daea:	d01a      	beq.n	db22 <crc32_recalculate+0x6e>
		length -= temp_length;
    daec:	68ba      	ldr	r2, [r7, #8]
    daee:	69bb      	ldr	r3, [r7, #24]
    daf0:	1ad3      	subs	r3, r2, r3
    daf2:	60bb      	str	r3, [r7, #8]

		word = *(word_ptr++);
    daf4:	69fb      	ldr	r3, [r7, #28]
    daf6:	1d1a      	adds	r2, r3, #4
    daf8:	61fa      	str	r2, [r7, #28]
    dafa:	681b      	ldr	r3, [r3, #0]
    dafc:	613b      	str	r3, [r7, #16]
		word >>= 8 * (WORD_SIZE - temp_length);
    dafe:	69ba      	ldr	r2, [r7, #24]
    db00:	0013      	movs	r3, r2
    db02:	075b      	lsls	r3, r3, #29
    db04:	1a9b      	subs	r3, r3, r2
    db06:	00db      	lsls	r3, r3, #3
    db08:	3320      	adds	r3, #32
    db0a:	693a      	ldr	r2, [r7, #16]
    db0c:	40da      	lsrs	r2, r3
    db0e:	0013      	movs	r3, r2
    db10:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
    db12:	69ba      	ldr	r2, [r7, #24]
    db14:	6979      	ldr	r1, [r7, #20]
    db16:	693b      	ldr	r3, [r7, #16]
    db18:	0018      	movs	r0, r3
    db1a:	4b24      	ldr	r3, [pc, #144]	; (dbac <crc32_recalculate+0xf8>)
    db1c:	4798      	blx	r3
    db1e:	0003      	movs	r3, r0
    db20:	617b      	str	r3, [r7, #20]
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    db22:	68bb      	ldr	r3, [r7, #8]
    db24:	2203      	movs	r2, #3
    db26:	4393      	bics	r3, r2
    db28:	61bb      	str	r3, [r7, #24]

	if (temp_length) {
    db2a:	69bb      	ldr	r3, [r7, #24]
    db2c:	2b00      	cmp	r3, #0
    db2e:	d019      	beq.n	db64 <crc32_recalculate+0xb0>
		length -= temp_length;
    db30:	68ba      	ldr	r2, [r7, #8]
    db32:	69bb      	ldr	r3, [r7, #24]
    db34:	1ad3      	subs	r3, r2, r3
    db36:	60bb      	str	r3, [r7, #8]
		temp_length /= WORD_SIZE;
    db38:	69bb      	ldr	r3, [r7, #24]
    db3a:	089b      	lsrs	r3, r3, #2
    db3c:	61bb      	str	r3, [r7, #24]

		while (temp_length--) {
    db3e:	e00c      	b.n	db5a <crc32_recalculate+0xa6>
			word = *(word_ptr++);
    db40:	69fb      	ldr	r3, [r7, #28]
    db42:	1d1a      	adds	r2, r3, #4
    db44:	61fa      	str	r2, [r7, #28]
    db46:	681b      	ldr	r3, [r3, #0]
    db48:	613b      	str	r3, [r7, #16]
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
    db4a:	6979      	ldr	r1, [r7, #20]
    db4c:	693b      	ldr	r3, [r7, #16]
    db4e:	2204      	movs	r2, #4
    db50:	0018      	movs	r0, r3
    db52:	4b16      	ldr	r3, [pc, #88]	; (dbac <crc32_recalculate+0xf8>)
    db54:	4798      	blx	r3
    db56:	0003      	movs	r3, r0
    db58:	617b      	str	r3, [r7, #20]

	if (temp_length) {
		length -= temp_length;
		temp_length /= WORD_SIZE;

		while (temp_length--) {
    db5a:	69bb      	ldr	r3, [r7, #24]
    db5c:	1e5a      	subs	r2, r3, #1
    db5e:	61ba      	str	r2, [r7, #24]
    db60:	2b00      	cmp	r3, #0
    db62:	d1ed      	bne.n	db40 <crc32_recalculate+0x8c>
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    db64:	68bb      	ldr	r3, [r7, #8]
    db66:	2b00      	cmp	r3, #0
    db68:	d016      	beq.n	db98 <crc32_recalculate+0xe4>
		word = *word_ptr;
    db6a:	69fb      	ldr	r3, [r7, #28]
    db6c:	681b      	ldr	r3, [r3, #0]
    db6e:	613b      	str	r3, [r7, #16]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    db70:	68ba      	ldr	r2, [r7, #8]
    db72:	0013      	movs	r3, r2
    db74:	075b      	lsls	r3, r3, #29
    db76:	1a9b      	subs	r3, r3, r2
    db78:	00db      	lsls	r3, r3, #3
    db7a:	3320      	adds	r3, #32
    db7c:	2201      	movs	r2, #1
    db7e:	4252      	negs	r2, r2
    db80:	40da      	lsrs	r2, r3
    db82:	693b      	ldr	r3, [r7, #16]
    db84:	4013      	ands	r3, r2
    db86:	613b      	str	r3, [r7, #16]
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
    db88:	68ba      	ldr	r2, [r7, #8]
    db8a:	6979      	ldr	r1, [r7, #20]
    db8c:	693b      	ldr	r3, [r7, #16]
    db8e:	0018      	movs	r0, r3
    db90:	4b06      	ldr	r3, [pc, #24]	; (dbac <crc32_recalculate+0xf8>)
    db92:	4798      	blx	r3
    db94:	0003      	movs	r3, r0
    db96:	617b      	str	r3, [r7, #20]
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    db98:	697b      	ldr	r3, [r7, #20]
    db9a:	43da      	mvns	r2, r3
    db9c:	687b      	ldr	r3, [r7, #4]
    db9e:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    dba0:	2300      	movs	r3, #0
    dba2:	0018      	movs	r0, r3
    dba4:	46bd      	mov	sp, r7
    dba6:	b008      	add	sp, #32
    dba8:	bd80      	pop	{r7, pc}
    dbaa:	46c0      	nop			; (mov r8, r8)
    dbac:	0000da65 	.word	0x0000da65

0000dbb0 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    dbb0:	b580      	push	{r7, lr}
    dbb2:	b084      	sub	sp, #16
    dbb4:	af00      	add	r7, sp, #0
    dbb6:	0002      	movs	r2, r0
    dbb8:	1dfb      	adds	r3, r7, #7
    dbba:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    dbbc:	230f      	movs	r3, #15
    dbbe:	18fb      	adds	r3, r7, r3
    dbc0:	1dfa      	adds	r2, r7, #7
    dbc2:	7812      	ldrb	r2, [r2, #0]
    dbc4:	0952      	lsrs	r2, r2, #5
    dbc6:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    dbc8:	230f      	movs	r3, #15
    dbca:	18fb      	adds	r3, r7, r3
    dbcc:	781b      	ldrb	r3, [r3, #0]
    dbce:	2b00      	cmp	r3, #0
    dbd0:	d10c      	bne.n	dbec <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    dbd2:	4b09      	ldr	r3, [pc, #36]	; (dbf8 <_extint_get_eic_from_channel+0x48>)
    dbd4:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    dbd6:	230f      	movs	r3, #15
    dbd8:	18fb      	adds	r3, r7, r3
    dbda:	781b      	ldrb	r3, [r3, #0]
    dbdc:	009b      	lsls	r3, r3, #2
    dbde:	2210      	movs	r2, #16
    dbe0:	4694      	mov	ip, r2
    dbe2:	44bc      	add	ip, r7
    dbe4:	4463      	add	r3, ip
    dbe6:	3b08      	subs	r3, #8
    dbe8:	681b      	ldr	r3, [r3, #0]
    dbea:	e000      	b.n	dbee <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    dbec:	2300      	movs	r3, #0
	}
}
    dbee:	0018      	movs	r0, r3
    dbf0:	46bd      	mov	sp, r7
    dbf2:	b004      	add	sp, #16
    dbf4:	bd80      	pop	{r7, pc}
    dbf6:	46c0      	nop			; (mov r8, r8)
    dbf8:	40001800 	.word	0x40001800

0000dbfc <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    dbfc:	b580      	push	{r7, lr}
    dbfe:	b084      	sub	sp, #16
    dc00:	af00      	add	r7, sp, #0
    dc02:	0002      	movs	r2, r0
    dc04:	1dfb      	adds	r3, r7, #7
    dc06:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    dc08:	1dfb      	adds	r3, r7, #7
    dc0a:	781b      	ldrb	r3, [r3, #0]
    dc0c:	0018      	movs	r0, r3
    dc0e:	4b0b      	ldr	r3, [pc, #44]	; (dc3c <extint_chan_is_detected+0x40>)
    dc10:	4798      	blx	r3
    dc12:	0003      	movs	r3, r0
    dc14:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    dc16:	1dfb      	adds	r3, r7, #7
    dc18:	781b      	ldrb	r3, [r3, #0]
    dc1a:	221f      	movs	r2, #31
    dc1c:	4013      	ands	r3, r2
    dc1e:	2201      	movs	r2, #1
    dc20:	409a      	lsls	r2, r3
    dc22:	0013      	movs	r3, r2
    dc24:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    dc26:	68fb      	ldr	r3, [r7, #12]
    dc28:	691b      	ldr	r3, [r3, #16]
    dc2a:	68ba      	ldr	r2, [r7, #8]
    dc2c:	4013      	ands	r3, r2
    dc2e:	1e5a      	subs	r2, r3, #1
    dc30:	4193      	sbcs	r3, r2
    dc32:	b2db      	uxtb	r3, r3
}
    dc34:	0018      	movs	r0, r3
    dc36:	46bd      	mov	sp, r7
    dc38:	b004      	add	sp, #16
    dc3a:	bd80      	pop	{r7, pc}
    dc3c:	0000dbb1 	.word	0x0000dbb1

0000dc40 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    dc40:	b580      	push	{r7, lr}
    dc42:	b084      	sub	sp, #16
    dc44:	af00      	add	r7, sp, #0
    dc46:	0002      	movs	r2, r0
    dc48:	1dfb      	adds	r3, r7, #7
    dc4a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    dc4c:	1dfb      	adds	r3, r7, #7
    dc4e:	781b      	ldrb	r3, [r3, #0]
    dc50:	0018      	movs	r0, r3
    dc52:	4b09      	ldr	r3, [pc, #36]	; (dc78 <extint_chan_clear_detected+0x38>)
    dc54:	4798      	blx	r3
    dc56:	0003      	movs	r3, r0
    dc58:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    dc5a:	1dfb      	adds	r3, r7, #7
    dc5c:	781b      	ldrb	r3, [r3, #0]
    dc5e:	221f      	movs	r2, #31
    dc60:	4013      	ands	r3, r2
    dc62:	2201      	movs	r2, #1
    dc64:	409a      	lsls	r2, r3
    dc66:	0013      	movs	r3, r2
    dc68:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    dc6a:	68fb      	ldr	r3, [r7, #12]
    dc6c:	68ba      	ldr	r2, [r7, #8]
    dc6e:	611a      	str	r2, [r3, #16]
}
    dc70:	46c0      	nop			; (mov r8, r8)
    dc72:	46bd      	mov	sp, r7
    dc74:	b004      	add	sp, #16
    dc76:	bd80      	pop	{r7, pc}
    dc78:	0000dbb1 	.word	0x0000dbb1

0000dc7c <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    dc7c:	b580      	push	{r7, lr}
    dc7e:	b082      	sub	sp, #8
    dc80:	af00      	add	r7, sp, #0
    dc82:	6078      	str	r0, [r7, #4]
    dc84:	0008      	movs	r0, r1
    dc86:	0011      	movs	r1, r2
    dc88:	1cfb      	adds	r3, r7, #3
    dc8a:	1c02      	adds	r2, r0, #0
    dc8c:	701a      	strb	r2, [r3, #0]
    dc8e:	1cbb      	adds	r3, r7, #2
    dc90:	1c0a      	adds	r2, r1, #0
    dc92:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    dc94:	1cbb      	adds	r3, r7, #2
    dc96:	781b      	ldrb	r3, [r3, #0]
    dc98:	2b00      	cmp	r3, #0
    dc9a:	d001      	beq.n	dca0 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    dc9c:	2317      	movs	r3, #23
    dc9e:	e019      	b.n	dcd4 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    dca0:	1cfb      	adds	r3, r7, #3
    dca2:	781a      	ldrb	r2, [r3, #0]
    dca4:	4b0d      	ldr	r3, [pc, #52]	; (dcdc <extint_register_callback+0x60>)
    dca6:	0092      	lsls	r2, r2, #2
    dca8:	58d3      	ldr	r3, [r2, r3]
    dcaa:	2b00      	cmp	r3, #0
    dcac:	d107      	bne.n	dcbe <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    dcae:	1cfb      	adds	r3, r7, #3
    dcb0:	781a      	ldrb	r2, [r3, #0]
    dcb2:	4b0a      	ldr	r3, [pc, #40]	; (dcdc <extint_register_callback+0x60>)
    dcb4:	0092      	lsls	r2, r2, #2
    dcb6:	6879      	ldr	r1, [r7, #4]
    dcb8:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    dcba:	2300      	movs	r3, #0
    dcbc:	e00a      	b.n	dcd4 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    dcbe:	1cfb      	adds	r3, r7, #3
    dcc0:	781a      	ldrb	r2, [r3, #0]
    dcc2:	4b06      	ldr	r3, [pc, #24]	; (dcdc <extint_register_callback+0x60>)
    dcc4:	0092      	lsls	r2, r2, #2
    dcc6:	58d2      	ldr	r2, [r2, r3]
    dcc8:	687b      	ldr	r3, [r7, #4]
    dcca:	429a      	cmp	r2, r3
    dccc:	d101      	bne.n	dcd2 <extint_register_callback+0x56>
		return STATUS_OK;
    dcce:	2300      	movs	r3, #0
    dcd0:	e000      	b.n	dcd4 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    dcd2:	231d      	movs	r3, #29
}
    dcd4:	0018      	movs	r0, r3
    dcd6:	46bd      	mov	sp, r7
    dcd8:	b002      	add	sp, #8
    dcda:	bd80      	pop	{r7, pc}
    dcdc:	20000364 	.word	0x20000364

0000dce0 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    dce0:	b580      	push	{r7, lr}
    dce2:	b084      	sub	sp, #16
    dce4:	af00      	add	r7, sp, #0
    dce6:	0002      	movs	r2, r0
    dce8:	1dfb      	adds	r3, r7, #7
    dcea:	701a      	strb	r2, [r3, #0]
    dcec:	1dbb      	adds	r3, r7, #6
    dcee:	1c0a      	adds	r2, r1, #0
    dcf0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    dcf2:	1dbb      	adds	r3, r7, #6
    dcf4:	781b      	ldrb	r3, [r3, #0]
    dcf6:	2b00      	cmp	r3, #0
    dcf8:	d10e      	bne.n	dd18 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    dcfa:	1dfb      	adds	r3, r7, #7
    dcfc:	781b      	ldrb	r3, [r3, #0]
    dcfe:	0018      	movs	r0, r3
    dd00:	4b08      	ldr	r3, [pc, #32]	; (dd24 <extint_chan_enable_callback+0x44>)
    dd02:	4798      	blx	r3
    dd04:	0003      	movs	r3, r0
    dd06:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    dd08:	1dfb      	adds	r3, r7, #7
    dd0a:	781b      	ldrb	r3, [r3, #0]
    dd0c:	2201      	movs	r2, #1
    dd0e:	409a      	lsls	r2, r3
    dd10:	68fb      	ldr	r3, [r7, #12]
    dd12:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    dd14:	2300      	movs	r3, #0
    dd16:	e000      	b.n	dd1a <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    dd18:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    dd1a:	0018      	movs	r0, r3
    dd1c:	46bd      	mov	sp, r7
    dd1e:	b004      	add	sp, #16
    dd20:	bd80      	pop	{r7, pc}
    dd22:	46c0      	nop			; (mov r8, r8)
    dd24:	0000dbb1 	.word	0x0000dbb1

0000dd28 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    dd28:	b580      	push	{r7, lr}
    dd2a:	b084      	sub	sp, #16
    dd2c:	af00      	add	r7, sp, #0
    dd2e:	0002      	movs	r2, r0
    dd30:	1dfb      	adds	r3, r7, #7
    dd32:	701a      	strb	r2, [r3, #0]
    dd34:	1dbb      	adds	r3, r7, #6
    dd36:	1c0a      	adds	r2, r1, #0
    dd38:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    dd3a:	1dbb      	adds	r3, r7, #6
    dd3c:	781b      	ldrb	r3, [r3, #0]
    dd3e:	2b00      	cmp	r3, #0
    dd40:	d10e      	bne.n	dd60 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    dd42:	1dfb      	adds	r3, r7, #7
    dd44:	781b      	ldrb	r3, [r3, #0]
    dd46:	0018      	movs	r0, r3
    dd48:	4b08      	ldr	r3, [pc, #32]	; (dd6c <extint_chan_disable_callback+0x44>)
    dd4a:	4798      	blx	r3
    dd4c:	0003      	movs	r3, r0
    dd4e:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    dd50:	1dfb      	adds	r3, r7, #7
    dd52:	781b      	ldrb	r3, [r3, #0]
    dd54:	2201      	movs	r2, #1
    dd56:	409a      	lsls	r2, r3
    dd58:	68fb      	ldr	r3, [r7, #12]
    dd5a:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    dd5c:	2300      	movs	r3, #0
    dd5e:	e000      	b.n	dd62 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    dd60:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    dd62:	0018      	movs	r0, r3
    dd64:	46bd      	mov	sp, r7
    dd66:	b004      	add	sp, #16
    dd68:	bd80      	pop	{r7, pc}
    dd6a:	46c0      	nop			; (mov r8, r8)
    dd6c:	0000dbb1 	.word	0x0000dbb1

0000dd70 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    dd70:	b580      	push	{r7, lr}
    dd72:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    dd74:	4b15      	ldr	r3, [pc, #84]	; (ddcc <EIC_Handler+0x5c>)
    dd76:	2200      	movs	r2, #0
    dd78:	701a      	strb	r2, [r3, #0]
    dd7a:	e020      	b.n	ddbe <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    dd7c:	4b13      	ldr	r3, [pc, #76]	; (ddcc <EIC_Handler+0x5c>)
    dd7e:	781b      	ldrb	r3, [r3, #0]
    dd80:	0018      	movs	r0, r3
    dd82:	4b13      	ldr	r3, [pc, #76]	; (ddd0 <EIC_Handler+0x60>)
    dd84:	4798      	blx	r3
    dd86:	1e03      	subs	r3, r0, #0
    dd88:	d013      	beq.n	ddb2 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    dd8a:	4b10      	ldr	r3, [pc, #64]	; (ddcc <EIC_Handler+0x5c>)
    dd8c:	781b      	ldrb	r3, [r3, #0]
    dd8e:	0018      	movs	r0, r3
    dd90:	4b10      	ldr	r3, [pc, #64]	; (ddd4 <EIC_Handler+0x64>)
    dd92:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    dd94:	4b0d      	ldr	r3, [pc, #52]	; (ddcc <EIC_Handler+0x5c>)
    dd96:	781b      	ldrb	r3, [r3, #0]
    dd98:	001a      	movs	r2, r3
    dd9a:	4b0f      	ldr	r3, [pc, #60]	; (ddd8 <EIC_Handler+0x68>)
    dd9c:	0092      	lsls	r2, r2, #2
    dd9e:	58d3      	ldr	r3, [r2, r3]
    dda0:	2b00      	cmp	r3, #0
    dda2:	d006      	beq.n	ddb2 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    dda4:	4b09      	ldr	r3, [pc, #36]	; (ddcc <EIC_Handler+0x5c>)
    dda6:	781b      	ldrb	r3, [r3, #0]
    dda8:	001a      	movs	r2, r3
    ddaa:	4b0b      	ldr	r3, [pc, #44]	; (ddd8 <EIC_Handler+0x68>)
    ddac:	0092      	lsls	r2, r2, #2
    ddae:	58d3      	ldr	r3, [r2, r3]
    ddb0:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    ddb2:	4b06      	ldr	r3, [pc, #24]	; (ddcc <EIC_Handler+0x5c>)
    ddb4:	781b      	ldrb	r3, [r3, #0]
    ddb6:	3301      	adds	r3, #1
    ddb8:	b2da      	uxtb	r2, r3
    ddba:	4b04      	ldr	r3, [pc, #16]	; (ddcc <EIC_Handler+0x5c>)
    ddbc:	701a      	strb	r2, [r3, #0]
    ddbe:	4b03      	ldr	r3, [pc, #12]	; (ddcc <EIC_Handler+0x5c>)
    ddc0:	781b      	ldrb	r3, [r3, #0]
    ddc2:	2b0f      	cmp	r3, #15
    ddc4:	d9da      	bls.n	dd7c <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    ddc6:	46c0      	nop			; (mov r8, r8)
    ddc8:	46bd      	mov	sp, r7
    ddca:	bd80      	pop	{r7, pc}
    ddcc:	20000360 	.word	0x20000360
    ddd0:	0000dbfd 	.word	0x0000dbfd
    ddd4:	0000dc41 	.word	0x0000dc41
    ddd8:	20000364 	.word	0x20000364

0000dddc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    dddc:	b580      	push	{r7, lr}
    ddde:	b082      	sub	sp, #8
    dde0:	af00      	add	r7, sp, #0
    dde2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    dde4:	687b      	ldr	r3, [r7, #4]
    dde6:	2200      	movs	r2, #0
    dde8:	701a      	strb	r2, [r3, #0]
}
    ddea:	46c0      	nop			; (mov r8, r8)
    ddec:	46bd      	mov	sp, r7
    ddee:	b002      	add	sp, #8
    ddf0:	bd80      	pop	{r7, pc}
    ddf2:	46c0      	nop			; (mov r8, r8)

0000ddf4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    ddf4:	b580      	push	{r7, lr}
    ddf6:	b082      	sub	sp, #8
    ddf8:	af00      	add	r7, sp, #0
    ddfa:	0002      	movs	r2, r0
    ddfc:	6039      	str	r1, [r7, #0]
    ddfe:	1dfb      	adds	r3, r7, #7
    de00:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    de02:	1dfb      	adds	r3, r7, #7
    de04:	781b      	ldrb	r3, [r3, #0]
    de06:	2b01      	cmp	r3, #1
    de08:	d00a      	beq.n	de20 <system_apb_clock_set_mask+0x2c>
    de0a:	2b02      	cmp	r3, #2
    de0c:	d00f      	beq.n	de2e <system_apb_clock_set_mask+0x3a>
    de0e:	2b00      	cmp	r3, #0
    de10:	d114      	bne.n	de3c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    de12:	4b0e      	ldr	r3, [pc, #56]	; (de4c <system_apb_clock_set_mask+0x58>)
    de14:	4a0d      	ldr	r2, [pc, #52]	; (de4c <system_apb_clock_set_mask+0x58>)
    de16:	6991      	ldr	r1, [r2, #24]
    de18:	683a      	ldr	r2, [r7, #0]
    de1a:	430a      	orrs	r2, r1
    de1c:	619a      	str	r2, [r3, #24]
			break;
    de1e:	e00f      	b.n	de40 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    de20:	4b0a      	ldr	r3, [pc, #40]	; (de4c <system_apb_clock_set_mask+0x58>)
    de22:	4a0a      	ldr	r2, [pc, #40]	; (de4c <system_apb_clock_set_mask+0x58>)
    de24:	69d1      	ldr	r1, [r2, #28]
    de26:	683a      	ldr	r2, [r7, #0]
    de28:	430a      	orrs	r2, r1
    de2a:	61da      	str	r2, [r3, #28]
			break;
    de2c:	e008      	b.n	de40 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    de2e:	4b07      	ldr	r3, [pc, #28]	; (de4c <system_apb_clock_set_mask+0x58>)
    de30:	4a06      	ldr	r2, [pc, #24]	; (de4c <system_apb_clock_set_mask+0x58>)
    de32:	6a11      	ldr	r1, [r2, #32]
    de34:	683a      	ldr	r2, [r7, #0]
    de36:	430a      	orrs	r2, r1
    de38:	621a      	str	r2, [r3, #32]
			break;
    de3a:	e001      	b.n	de40 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    de3c:	2317      	movs	r3, #23
    de3e:	e000      	b.n	de42 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    de40:	2300      	movs	r3, #0
}
    de42:	0018      	movs	r0, r3
    de44:	46bd      	mov	sp, r7
    de46:	b002      	add	sp, #8
    de48:	bd80      	pop	{r7, pc}
    de4a:	46c0      	nop			; (mov r8, r8)
    de4c:	40000400 	.word	0x40000400

0000de50 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    de50:	b580      	push	{r7, lr}
    de52:	b082      	sub	sp, #8
    de54:	af00      	add	r7, sp, #0
    de56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    de58:	687b      	ldr	r3, [r7, #4]
    de5a:	2280      	movs	r2, #128	; 0x80
    de5c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    de5e:	687b      	ldr	r3, [r7, #4]
    de60:	2200      	movs	r2, #0
    de62:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    de64:	687b      	ldr	r3, [r7, #4]
    de66:	2201      	movs	r2, #1
    de68:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    de6a:	687b      	ldr	r3, [r7, #4]
    de6c:	2200      	movs	r2, #0
    de6e:	70da      	strb	r2, [r3, #3]
}
    de70:	46c0      	nop			; (mov r8, r8)
    de72:	46bd      	mov	sp, r7
    de74:	b002      	add	sp, #8
    de76:	bd80      	pop	{r7, pc}

0000de78 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    de78:	b580      	push	{r7, lr}
    de7a:	b082      	sub	sp, #8
    de7c:	af00      	add	r7, sp, #0
    de7e:	0002      	movs	r2, r0
    de80:	1dfb      	adds	r3, r7, #7
    de82:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    de84:	4b06      	ldr	r3, [pc, #24]	; (dea0 <system_interrupt_enable+0x28>)
    de86:	1dfa      	adds	r2, r7, #7
    de88:	7812      	ldrb	r2, [r2, #0]
    de8a:	0011      	movs	r1, r2
    de8c:	221f      	movs	r2, #31
    de8e:	400a      	ands	r2, r1
    de90:	2101      	movs	r1, #1
    de92:	4091      	lsls	r1, r2
    de94:	000a      	movs	r2, r1
    de96:	601a      	str	r2, [r3, #0]
}
    de98:	46c0      	nop			; (mov r8, r8)
    de9a:	46bd      	mov	sp, r7
    de9c:	b002      	add	sp, #8
    de9e:	bd80      	pop	{r7, pc}
    dea0:	e000e100 	.word	0xe000e100

0000dea4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    dea4:	b580      	push	{r7, lr}
    dea6:	b084      	sub	sp, #16
    dea8:	af00      	add	r7, sp, #0
    deaa:	0002      	movs	r2, r0
    deac:	1dfb      	adds	r3, r7, #7
    deae:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    deb0:	230f      	movs	r3, #15
    deb2:	18fb      	adds	r3, r7, r3
    deb4:	1dfa      	adds	r2, r7, #7
    deb6:	7812      	ldrb	r2, [r2, #0]
    deb8:	0952      	lsrs	r2, r2, #5
    deba:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    debc:	230f      	movs	r3, #15
    debe:	18fb      	adds	r3, r7, r3
    dec0:	781b      	ldrb	r3, [r3, #0]
    dec2:	2b00      	cmp	r3, #0
    dec4:	d10c      	bne.n	dee0 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    dec6:	4b09      	ldr	r3, [pc, #36]	; (deec <_extint_get_eic_from_channel+0x48>)
    dec8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    deca:	230f      	movs	r3, #15
    decc:	18fb      	adds	r3, r7, r3
    dece:	781b      	ldrb	r3, [r3, #0]
    ded0:	009b      	lsls	r3, r3, #2
    ded2:	2210      	movs	r2, #16
    ded4:	4694      	mov	ip, r2
    ded6:	44bc      	add	ip, r7
    ded8:	4463      	add	r3, ip
    deda:	3b08      	subs	r3, #8
    dedc:	681b      	ldr	r3, [r3, #0]
    dede:	e000      	b.n	dee2 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    dee0:	2300      	movs	r3, #0
	}
}
    dee2:	0018      	movs	r0, r3
    dee4:	46bd      	mov	sp, r7
    dee6:	b004      	add	sp, #16
    dee8:	bd80      	pop	{r7, pc}
    deea:	46c0      	nop			; (mov r8, r8)
    deec:	40001800 	.word	0x40001800

0000def0 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    def0:	b580      	push	{r7, lr}
    def2:	b082      	sub	sp, #8
    def4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    def6:	4b0f      	ldr	r3, [pc, #60]	; (df34 <extint_is_syncing+0x44>)
    def8:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    defa:	2300      	movs	r3, #0
    defc:	607b      	str	r3, [r7, #4]
    defe:	e011      	b.n	df24 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    df00:	687b      	ldr	r3, [r7, #4]
    df02:	009b      	lsls	r3, r3, #2
    df04:	2208      	movs	r2, #8
    df06:	4694      	mov	ip, r2
    df08:	44bc      	add	ip, r7
    df0a:	4463      	add	r3, ip
    df0c:	3b08      	subs	r3, #8
    df0e:	681b      	ldr	r3, [r3, #0]
    df10:	785b      	ldrb	r3, [r3, #1]
    df12:	b2db      	uxtb	r3, r3
    df14:	b25b      	sxtb	r3, r3
    df16:	2b00      	cmp	r3, #0
    df18:	da01      	bge.n	df1e <extint_is_syncing+0x2e>
			return true;
    df1a:	2301      	movs	r3, #1
    df1c:	e006      	b.n	df2c <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    df1e:	687b      	ldr	r3, [r7, #4]
    df20:	3301      	adds	r3, #1
    df22:	607b      	str	r3, [r7, #4]
    df24:	687b      	ldr	r3, [r7, #4]
    df26:	2b00      	cmp	r3, #0
    df28:	d0ea      	beq.n	df00 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    df2a:	2300      	movs	r3, #0
}
    df2c:	0018      	movs	r0, r3
    df2e:	46bd      	mov	sp, r7
    df30:	b002      	add	sp, #8
    df32:	bd80      	pop	{r7, pc}
    df34:	40001800 	.word	0x40001800

0000df38 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    df38:	b580      	push	{r7, lr}
    df3a:	b084      	sub	sp, #16
    df3c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    df3e:	4b2d      	ldr	r3, [pc, #180]	; (dff4 <_system_extint_init+0xbc>)
    df40:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    df42:	2140      	movs	r1, #64	; 0x40
    df44:	2000      	movs	r0, #0
    df46:	4b2c      	ldr	r3, [pc, #176]	; (dff8 <_system_extint_init+0xc0>)
    df48:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    df4a:	003b      	movs	r3, r7
    df4c:	0018      	movs	r0, r3
    df4e:	4b2b      	ldr	r3, [pc, #172]	; (dffc <_system_extint_init+0xc4>)
    df50:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    df52:	003b      	movs	r3, r7
    df54:	2200      	movs	r2, #0
    df56:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    df58:	003b      	movs	r3, r7
    df5a:	0019      	movs	r1, r3
    df5c:	2005      	movs	r0, #5
    df5e:	4b28      	ldr	r3, [pc, #160]	; (e000 <_system_extint_init+0xc8>)
    df60:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    df62:	2005      	movs	r0, #5
    df64:	4b27      	ldr	r3, [pc, #156]	; (e004 <_system_extint_init+0xcc>)
    df66:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    df68:	2300      	movs	r3, #0
    df6a:	60fb      	str	r3, [r7, #12]
    df6c:	e018      	b.n	dfa0 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    df6e:	68fb      	ldr	r3, [r7, #12]
    df70:	009b      	lsls	r3, r3, #2
    df72:	2210      	movs	r2, #16
    df74:	4694      	mov	ip, r2
    df76:	44bc      	add	ip, r7
    df78:	4463      	add	r3, ip
    df7a:	3b0c      	subs	r3, #12
    df7c:	681a      	ldr	r2, [r3, #0]
    df7e:	68fb      	ldr	r3, [r7, #12]
    df80:	009b      	lsls	r3, r3, #2
    df82:	2110      	movs	r1, #16
    df84:	468c      	mov	ip, r1
    df86:	44bc      	add	ip, r7
    df88:	4463      	add	r3, ip
    df8a:	3b0c      	subs	r3, #12
    df8c:	681b      	ldr	r3, [r3, #0]
    df8e:	781b      	ldrb	r3, [r3, #0]
    df90:	b2db      	uxtb	r3, r3
    df92:	2101      	movs	r1, #1
    df94:	430b      	orrs	r3, r1
    df96:	b2db      	uxtb	r3, r3
    df98:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    df9a:	68fb      	ldr	r3, [r7, #12]
    df9c:	3301      	adds	r3, #1
    df9e:	60fb      	str	r3, [r7, #12]
    dfa0:	68fb      	ldr	r3, [r7, #12]
    dfa2:	2b00      	cmp	r3, #0
    dfa4:	d0e3      	beq.n	df6e <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    dfa6:	46c0      	nop			; (mov r8, r8)
    dfa8:	4b17      	ldr	r3, [pc, #92]	; (e008 <_system_extint_init+0xd0>)
    dfaa:	4798      	blx	r3
    dfac:	1e03      	subs	r3, r0, #0
    dfae:	d1fb      	bne.n	dfa8 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    dfb0:	230b      	movs	r3, #11
    dfb2:	18fb      	adds	r3, r7, r3
    dfb4:	2200      	movs	r2, #0
    dfb6:	701a      	strb	r2, [r3, #0]
    dfb8:	e00d      	b.n	dfd6 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    dfba:	230b      	movs	r3, #11
    dfbc:	18fb      	adds	r3, r7, r3
    dfbe:	781a      	ldrb	r2, [r3, #0]
    dfc0:	4b12      	ldr	r3, [pc, #72]	; (e00c <_system_extint_init+0xd4>)
    dfc2:	0092      	lsls	r2, r2, #2
    dfc4:	2100      	movs	r1, #0
    dfc6:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    dfc8:	230b      	movs	r3, #11
    dfca:	18fb      	adds	r3, r7, r3
    dfcc:	781a      	ldrb	r2, [r3, #0]
    dfce:	230b      	movs	r3, #11
    dfd0:	18fb      	adds	r3, r7, r3
    dfd2:	3201      	adds	r2, #1
    dfd4:	701a      	strb	r2, [r3, #0]
    dfd6:	230b      	movs	r3, #11
    dfd8:	18fb      	adds	r3, r7, r3
    dfda:	781b      	ldrb	r3, [r3, #0]
    dfdc:	2b0f      	cmp	r3, #15
    dfde:	d9ec      	bls.n	dfba <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    dfe0:	2004      	movs	r0, #4
    dfe2:	4b0b      	ldr	r3, [pc, #44]	; (e010 <_system_extint_init+0xd8>)
    dfe4:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    dfe6:	4b0b      	ldr	r3, [pc, #44]	; (e014 <_system_extint_init+0xdc>)
    dfe8:	4798      	blx	r3
}
    dfea:	46c0      	nop			; (mov r8, r8)
    dfec:	46bd      	mov	sp, r7
    dfee:	b004      	add	sp, #16
    dff0:	bd80      	pop	{r7, pc}
    dff2:	46c0      	nop			; (mov r8, r8)
    dff4:	40001800 	.word	0x40001800
    dff8:	0000ddf5 	.word	0x0000ddf5
    dffc:	0000dddd 	.word	0x0000dddd
    e000:	000150ed 	.word	0x000150ed
    e004:	00015131 	.word	0x00015131
    e008:	0000def1 	.word	0x0000def1
    e00c:	20000364 	.word	0x20000364
    e010:	0000de79 	.word	0x0000de79
    e014:	0000e019 	.word	0x0000e019

0000e018 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    e018:	b580      	push	{r7, lr}
    e01a:	b082      	sub	sp, #8
    e01c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    e01e:	4b15      	ldr	r3, [pc, #84]	; (e074 <_extint_enable+0x5c>)
    e020:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    e022:	2300      	movs	r3, #0
    e024:	607b      	str	r3, [r7, #4]
    e026:	e018      	b.n	e05a <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    e028:	687b      	ldr	r3, [r7, #4]
    e02a:	009b      	lsls	r3, r3, #2
    e02c:	2208      	movs	r2, #8
    e02e:	4694      	mov	ip, r2
    e030:	44bc      	add	ip, r7
    e032:	4463      	add	r3, ip
    e034:	3b08      	subs	r3, #8
    e036:	681a      	ldr	r2, [r3, #0]
    e038:	687b      	ldr	r3, [r7, #4]
    e03a:	009b      	lsls	r3, r3, #2
    e03c:	2108      	movs	r1, #8
    e03e:	468c      	mov	ip, r1
    e040:	44bc      	add	ip, r7
    e042:	4463      	add	r3, ip
    e044:	3b08      	subs	r3, #8
    e046:	681b      	ldr	r3, [r3, #0]
    e048:	781b      	ldrb	r3, [r3, #0]
    e04a:	b2db      	uxtb	r3, r3
    e04c:	2102      	movs	r1, #2
    e04e:	430b      	orrs	r3, r1
    e050:	b2db      	uxtb	r3, r3
    e052:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    e054:	687b      	ldr	r3, [r7, #4]
    e056:	3301      	adds	r3, #1
    e058:	607b      	str	r3, [r7, #4]
    e05a:	687b      	ldr	r3, [r7, #4]
    e05c:	2b00      	cmp	r3, #0
    e05e:	d0e3      	beq.n	e028 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    e060:	46c0      	nop			; (mov r8, r8)
    e062:	4b05      	ldr	r3, [pc, #20]	; (e078 <_extint_enable+0x60>)
    e064:	4798      	blx	r3
    e066:	1e03      	subs	r3, r0, #0
    e068:	d1fb      	bne.n	e062 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    e06a:	46c0      	nop			; (mov r8, r8)
    e06c:	46bd      	mov	sp, r7
    e06e:	b002      	add	sp, #8
    e070:	bd80      	pop	{r7, pc}
    e072:	46c0      	nop			; (mov r8, r8)
    e074:	40001800 	.word	0x40001800
    e078:	0000def1 	.word	0x0000def1

0000e07c <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    e07c:	b580      	push	{r7, lr}
    e07e:	b082      	sub	sp, #8
    e080:	af00      	add	r7, sp, #0
    e082:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    e084:	687b      	ldr	r3, [r7, #4]
    e086:	2200      	movs	r2, #0
    e088:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    e08a:	687b      	ldr	r3, [r7, #4]
    e08c:	2200      	movs	r2, #0
    e08e:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    e090:	687b      	ldr	r3, [r7, #4]
    e092:	2201      	movs	r2, #1
    e094:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    e096:	687b      	ldr	r3, [r7, #4]
    e098:	2201      	movs	r2, #1
    e09a:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    e09c:	687b      	ldr	r3, [r7, #4]
    e09e:	2200      	movs	r2, #0
    e0a0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    e0a2:	687b      	ldr	r3, [r7, #4]
    e0a4:	2202      	movs	r2, #2
    e0a6:	72da      	strb	r2, [r3, #11]
}
    e0a8:	46c0      	nop			; (mov r8, r8)
    e0aa:	46bd      	mov	sp, r7
    e0ac:	b002      	add	sp, #8
    e0ae:	bd80      	pop	{r7, pc}

0000e0b0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    e0b0:	b580      	push	{r7, lr}
    e0b2:	b086      	sub	sp, #24
    e0b4:	af00      	add	r7, sp, #0
    e0b6:	0002      	movs	r2, r0
    e0b8:	6039      	str	r1, [r7, #0]
    e0ba:	1dfb      	adds	r3, r7, #7
    e0bc:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    e0be:	2308      	movs	r3, #8
    e0c0:	18fb      	adds	r3, r7, r3
    e0c2:	0018      	movs	r0, r3
    e0c4:	4b36      	ldr	r3, [pc, #216]	; (e1a0 <extint_chan_set_config+0xf0>)
    e0c6:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    e0c8:	683b      	ldr	r3, [r7, #0]
    e0ca:	685b      	ldr	r3, [r3, #4]
    e0cc:	b2da      	uxtb	r2, r3
    e0ce:	2308      	movs	r3, #8
    e0d0:	18fb      	adds	r3, r7, r3
    e0d2:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    e0d4:	2308      	movs	r3, #8
    e0d6:	18fb      	adds	r3, r7, r3
    e0d8:	2200      	movs	r2, #0
    e0da:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    e0dc:	683b      	ldr	r3, [r7, #0]
    e0de:	7a1a      	ldrb	r2, [r3, #8]
    e0e0:	2308      	movs	r3, #8
    e0e2:	18fb      	adds	r3, r7, r3
    e0e4:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    e0e6:	683b      	ldr	r3, [r7, #0]
    e0e8:	681b      	ldr	r3, [r3, #0]
    e0ea:	b2db      	uxtb	r3, r3
    e0ec:	2208      	movs	r2, #8
    e0ee:	18ba      	adds	r2, r7, r2
    e0f0:	0011      	movs	r1, r2
    e0f2:	0018      	movs	r0, r3
    e0f4:	4b2b      	ldr	r3, [pc, #172]	; (e1a4 <extint_chan_set_config+0xf4>)
    e0f6:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    e0f8:	1dfb      	adds	r3, r7, #7
    e0fa:	781b      	ldrb	r3, [r3, #0]
    e0fc:	0018      	movs	r0, r3
    e0fe:	4b2a      	ldr	r3, [pc, #168]	; (e1a8 <extint_chan_set_config+0xf8>)
    e100:	4798      	blx	r3
    e102:	0003      	movs	r3, r0
    e104:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    e106:	1dfb      	adds	r3, r7, #7
    e108:	781b      	ldrb	r3, [r3, #0]
    e10a:	2207      	movs	r2, #7
    e10c:	4013      	ands	r3, r2
    e10e:	009b      	lsls	r3, r3, #2
    e110:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    e112:	683b      	ldr	r3, [r7, #0]
    e114:	7adb      	ldrb	r3, [r3, #11]
    e116:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    e118:	683b      	ldr	r3, [r7, #0]
    e11a:	7a9b      	ldrb	r3, [r3, #10]
    e11c:	2b00      	cmp	r3, #0
    e11e:	d003      	beq.n	e128 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    e120:	697b      	ldr	r3, [r7, #20]
    e122:	2208      	movs	r2, #8
    e124:	4313      	orrs	r3, r2
    e126:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    e128:	1dfb      	adds	r3, r7, #7
    e12a:	781b      	ldrb	r3, [r3, #0]
    e12c:	08db      	lsrs	r3, r3, #3
    e12e:	b2db      	uxtb	r3, r3
    e130:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    e132:	1dfb      	adds	r3, r7, #7
    e134:	781b      	ldrb	r3, [r3, #0]
    e136:	08db      	lsrs	r3, r3, #3
    e138:	b2db      	uxtb	r3, r3
    e13a:	001a      	movs	r2, r3
    e13c:	693b      	ldr	r3, [r7, #16]
    e13e:	3206      	adds	r2, #6
    e140:	0092      	lsls	r2, r2, #2
    e142:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    e144:	210f      	movs	r1, #15
    e146:	68fa      	ldr	r2, [r7, #12]
    e148:	4091      	lsls	r1, r2
    e14a:	000a      	movs	r2, r1
    e14c:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    e14e:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    e150:	6979      	ldr	r1, [r7, #20]
    e152:	68fb      	ldr	r3, [r7, #12]
    e154:	4099      	lsls	r1, r3
    e156:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    e158:	431a      	orrs	r2, r3
    e15a:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    e15c:	693b      	ldr	r3, [r7, #16]
    e15e:	1d82      	adds	r2, r0, #6
    e160:	0092      	lsls	r2, r2, #2
    e162:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    e164:	683b      	ldr	r3, [r7, #0]
    e166:	7a5b      	ldrb	r3, [r3, #9]
    e168:	2b00      	cmp	r3, #0
    e16a:	d00a      	beq.n	e182 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    e16c:	693b      	ldr	r3, [r7, #16]
    e16e:	695a      	ldr	r2, [r3, #20]
    e170:	1dfb      	adds	r3, r7, #7
    e172:	781b      	ldrb	r3, [r3, #0]
    e174:	2101      	movs	r1, #1
    e176:	4099      	lsls	r1, r3
    e178:	000b      	movs	r3, r1
    e17a:	431a      	orrs	r2, r3
    e17c:	693b      	ldr	r3, [r7, #16]
    e17e:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    e180:	e00a      	b.n	e198 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    e182:	693b      	ldr	r3, [r7, #16]
    e184:	695b      	ldr	r3, [r3, #20]
    e186:	1dfa      	adds	r2, r7, #7
    e188:	7812      	ldrb	r2, [r2, #0]
    e18a:	2101      	movs	r1, #1
    e18c:	4091      	lsls	r1, r2
    e18e:	000a      	movs	r2, r1
    e190:	43d2      	mvns	r2, r2
    e192:	401a      	ands	r2, r3
    e194:	693b      	ldr	r3, [r7, #16]
    e196:	615a      	str	r2, [r3, #20]
	}
}
    e198:	46c0      	nop			; (mov r8, r8)
    e19a:	46bd      	mov	sp, r7
    e19c:	b006      	add	sp, #24
    e19e:	bd80      	pop	{r7, pc}
    e1a0:	0000de51 	.word	0x0000de51
    e1a4:	000153d9 	.word	0x000153d9
    e1a8:	0000dea5 	.word	0x0000dea5

0000e1ac <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    e1ac:	b580      	push	{r7, lr}
    e1ae:	b086      	sub	sp, #24
    e1b0:	af00      	add	r7, sp, #0
    e1b2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    e1b4:	4b28      	ldr	r3, [pc, #160]	; (e258 <_rtc_interrupt_handler+0xac>)
    e1b6:	687a      	ldr	r2, [r7, #4]
    e1b8:	0092      	lsls	r2, r2, #2
    e1ba:	58d3      	ldr	r3, [r2, r3]
    e1bc:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    e1be:	697b      	ldr	r3, [r7, #20]
    e1c0:	681b      	ldr	r3, [r3, #0]
    e1c2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    e1c4:	230e      	movs	r3, #14
    e1c6:	18fb      	adds	r3, r7, r3
    e1c8:	697a      	ldr	r2, [r7, #20]
    e1ca:	8a52      	ldrh	r2, [r2, #18]
    e1cc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    e1ce:	697b      	ldr	r3, [r7, #20]
    e1d0:	8a1b      	ldrh	r3, [r3, #16]
    e1d2:	b29a      	uxth	r2, r3
    e1d4:	230e      	movs	r3, #14
    e1d6:	18fb      	adds	r3, r7, r3
    e1d8:	210e      	movs	r1, #14
    e1da:	1879      	adds	r1, r7, r1
    e1dc:	8809      	ldrh	r1, [r1, #0]
    e1de:	400a      	ands	r2, r1
    e1e0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    e1e2:	693b      	ldr	r3, [r7, #16]
    e1e4:	7a1b      	ldrb	r3, [r3, #8]
    e1e6:	b2da      	uxtb	r2, r3
    e1e8:	230c      	movs	r3, #12
    e1ea:	18fb      	adds	r3, r7, r3
    e1ec:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    e1ee:	693b      	ldr	r3, [r7, #16]
    e1f0:	79db      	ldrb	r3, [r3, #7]
    e1f2:	b2db      	uxtb	r3, r3
    e1f4:	b29a      	uxth	r2, r3
    e1f6:	230c      	movs	r3, #12
    e1f8:	18fb      	adds	r3, r7, r3
    e1fa:	210c      	movs	r1, #12
    e1fc:	1879      	adds	r1, r7, r1
    e1fe:	8809      	ldrh	r1, [r1, #0]
    e200:	400a      	ands	r2, r1
    e202:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    e204:	230c      	movs	r3, #12
    e206:	18fb      	adds	r3, r7, r3
    e208:	881b      	ldrh	r3, [r3, #0]
    e20a:	2280      	movs	r2, #128	; 0x80
    e20c:	4013      	ands	r3, r2
    e20e:	d00c      	beq.n	e22a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    e210:	230e      	movs	r3, #14
    e212:	18fb      	adds	r3, r7, r3
    e214:	881b      	ldrh	r3, [r3, #0]
    e216:	2202      	movs	r2, #2
    e218:	4013      	ands	r3, r2
    e21a:	d002      	beq.n	e222 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    e21c:	697b      	ldr	r3, [r7, #20]
    e21e:	68db      	ldr	r3, [r3, #12]
    e220:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    e222:	693b      	ldr	r3, [r7, #16]
    e224:	2280      	movs	r2, #128	; 0x80
    e226:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    e228:	e011      	b.n	e24e <_rtc_interrupt_handler+0xa2>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    e22a:	230c      	movs	r3, #12
    e22c:	18fb      	adds	r3, r7, r3
    e22e:	881b      	ldrh	r3, [r3, #0]
    e230:	2201      	movs	r2, #1
    e232:	4013      	ands	r3, r2
    e234:	d00b      	beq.n	e24e <_rtc_interrupt_handler+0xa2>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    e236:	230e      	movs	r3, #14
    e238:	18fb      	adds	r3, r7, r3
    e23a:	881b      	ldrh	r3, [r3, #0]
    e23c:	2201      	movs	r2, #1
    e23e:	4013      	ands	r3, r2
    e240:	d002      	beq.n	e248 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    e242:	697b      	ldr	r3, [r7, #20]
    e244:	689b      	ldr	r3, [r3, #8]
    e246:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    e248:	693b      	ldr	r3, [r7, #16]
    e24a:	2201      	movs	r2, #1
    e24c:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    e24e:	46c0      	nop			; (mov r8, r8)
    e250:	46bd      	mov	sp, r7
    e252:	b006      	add	sp, #24
    e254:	bd80      	pop	{r7, pc}
    e256:	46c0      	nop			; (mov r8, r8)
    e258:	200003a4 	.word	0x200003a4

0000e25c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    e25c:	b580      	push	{r7, lr}
    e25e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    e260:	2000      	movs	r0, #0
    e262:	4b02      	ldr	r3, [pc, #8]	; (e26c <RTC_Handler+0x10>)
    e264:	4798      	blx	r3
}
    e266:	46c0      	nop			; (mov r8, r8)
    e268:	46bd      	mov	sp, r7
    e26a:	bd80      	pop	{r7, pc}
    e26c:	0000e1ad 	.word	0x0000e1ad

0000e270 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    e270:	b580      	push	{r7, lr}
    e272:	b082      	sub	sp, #8
    e274:	af00      	add	r7, sp, #0
    e276:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    e278:	687b      	ldr	r3, [r7, #4]
    e27a:	2200      	movs	r2, #0
    e27c:	701a      	strb	r2, [r3, #0]
}
    e27e:	46c0      	nop			; (mov r8, r8)
    e280:	46bd      	mov	sp, r7
    e282:	b002      	add	sp, #8
    e284:	bd80      	pop	{r7, pc}
    e286:	46c0      	nop			; (mov r8, r8)

0000e288 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    e288:	b580      	push	{r7, lr}
    e28a:	b082      	sub	sp, #8
    e28c:	af00      	add	r7, sp, #0
    e28e:	0002      	movs	r2, r0
    e290:	6039      	str	r1, [r7, #0]
    e292:	1dfb      	adds	r3, r7, #7
    e294:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    e296:	1dfb      	adds	r3, r7, #7
    e298:	781b      	ldrb	r3, [r3, #0]
    e29a:	2b01      	cmp	r3, #1
    e29c:	d00a      	beq.n	e2b4 <system_apb_clock_set_mask+0x2c>
    e29e:	2b02      	cmp	r3, #2
    e2a0:	d00f      	beq.n	e2c2 <system_apb_clock_set_mask+0x3a>
    e2a2:	2b00      	cmp	r3, #0
    e2a4:	d114      	bne.n	e2d0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    e2a6:	4b0e      	ldr	r3, [pc, #56]	; (e2e0 <system_apb_clock_set_mask+0x58>)
    e2a8:	4a0d      	ldr	r2, [pc, #52]	; (e2e0 <system_apb_clock_set_mask+0x58>)
    e2aa:	6991      	ldr	r1, [r2, #24]
    e2ac:	683a      	ldr	r2, [r7, #0]
    e2ae:	430a      	orrs	r2, r1
    e2b0:	619a      	str	r2, [r3, #24]
			break;
    e2b2:	e00f      	b.n	e2d4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    e2b4:	4b0a      	ldr	r3, [pc, #40]	; (e2e0 <system_apb_clock_set_mask+0x58>)
    e2b6:	4a0a      	ldr	r2, [pc, #40]	; (e2e0 <system_apb_clock_set_mask+0x58>)
    e2b8:	69d1      	ldr	r1, [r2, #28]
    e2ba:	683a      	ldr	r2, [r7, #0]
    e2bc:	430a      	orrs	r2, r1
    e2be:	61da      	str	r2, [r3, #28]
			break;
    e2c0:	e008      	b.n	e2d4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    e2c2:	4b07      	ldr	r3, [pc, #28]	; (e2e0 <system_apb_clock_set_mask+0x58>)
    e2c4:	4a06      	ldr	r2, [pc, #24]	; (e2e0 <system_apb_clock_set_mask+0x58>)
    e2c6:	6a11      	ldr	r1, [r2, #32]
    e2c8:	683a      	ldr	r2, [r7, #0]
    e2ca:	430a      	orrs	r2, r1
    e2cc:	621a      	str	r2, [r3, #32]
			break;
    e2ce:	e001      	b.n	e2d4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    e2d0:	2317      	movs	r3, #23
    e2d2:	e000      	b.n	e2d6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    e2d4:	2300      	movs	r3, #0
}
    e2d6:	0018      	movs	r0, r3
    e2d8:	46bd      	mov	sp, r7
    e2da:	b002      	add	sp, #8
    e2dc:	bd80      	pop	{r7, pc}
    e2de:	46c0      	nop			; (mov r8, r8)
    e2e0:	40000400 	.word	0x40000400

0000e2e4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    e2e4:	b580      	push	{r7, lr}
    e2e6:	b082      	sub	sp, #8
    e2e8:	af00      	add	r7, sp, #0
    e2ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    e2ec:	687b      	ldr	r3, [r7, #4]
    e2ee:	2280      	movs	r2, #128	; 0x80
    e2f0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    e2f2:	687b      	ldr	r3, [r7, #4]
    e2f4:	2200      	movs	r2, #0
    e2f6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    e2f8:	687b      	ldr	r3, [r7, #4]
    e2fa:	2201      	movs	r2, #1
    e2fc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    e2fe:	687b      	ldr	r3, [r7, #4]
    e300:	2200      	movs	r2, #0
    e302:	70da      	strb	r2, [r3, #3]
}
    e304:	46c0      	nop			; (mov r8, r8)
    e306:	46bd      	mov	sp, r7
    e308:	b002      	add	sp, #8
    e30a:	bd80      	pop	{r7, pc}

0000e30c <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
    e30c:	b580      	push	{r7, lr}
    e30e:	b084      	sub	sp, #16
    e310:	af00      	add	r7, sp, #0
    e312:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    e314:	2300      	movs	r3, #0
    e316:	60fb      	str	r3, [r7, #12]
    e318:	e00c      	b.n	e334 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
    e31a:	4b0a      	ldr	r3, [pc, #40]	; (e344 <_tcc_get_inst_index+0x38>)
    e31c:	68fa      	ldr	r2, [r7, #12]
    e31e:	0092      	lsls	r2, r2, #2
    e320:	58d2      	ldr	r2, [r2, r3]
    e322:	687b      	ldr	r3, [r7, #4]
    e324:	429a      	cmp	r2, r3
    e326:	d102      	bne.n	e32e <_tcc_get_inst_index+0x22>
			return i;
    e328:	68fb      	ldr	r3, [r7, #12]
    e32a:	b2db      	uxtb	r3, r3
    e32c:	e006      	b.n	e33c <_tcc_get_inst_index+0x30>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    e32e:	68fb      	ldr	r3, [r7, #12]
    e330:	3301      	adds	r3, #1
    e332:	60fb      	str	r3, [r7, #12]
    e334:	68fb      	ldr	r3, [r7, #12]
    e336:	2b02      	cmp	r3, #2
    e338:	d9ef      	bls.n	e31a <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    e33a:	2300      	movs	r3, #0
}
    e33c:	0018      	movs	r0, r3
    e33e:	46bd      	mov	sp, r7
    e340:	b004      	add	sp, #16
    e342:	bd80      	pop	{r7, pc}
    e344:	000193c8 	.word	0x000193c8

0000e348 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    e348:	b590      	push	{r4, r7, lr}
    e34a:	b085      	sub	sp, #20
    e34c:	af00      	add	r7, sp, #0
    e34e:	6078      	str	r0, [r7, #4]
    e350:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    e352:	230f      	movs	r3, #15
    e354:	18fc      	adds	r4, r7, r3
    e356:	683b      	ldr	r3, [r7, #0]
    e358:	0018      	movs	r0, r3
    e35a:	4bad      	ldr	r3, [pc, #692]	; (e610 <tcc_get_config_defaults+0x2c8>)
    e35c:	4798      	blx	r3
    e35e:	0003      	movs	r3, r0
    e360:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
    e362:	687b      	ldr	r3, [r7, #4]
    e364:	2200      	movs	r2, #0
    e366:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    e368:	230f      	movs	r3, #15
    e36a:	18fb      	adds	r3, r7, r3
    e36c:	781a      	ldrb	r2, [r3, #0]
    e36e:	4ba9      	ldr	r3, [pc, #676]	; (e614 <tcc_get_config_defaults+0x2cc>)
    e370:	0092      	lsls	r2, r2, #2
    e372:	58d2      	ldr	r2, [r2, r3]
    e374:	687b      	ldr	r3, [r7, #4]
    e376:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    e378:	687b      	ldr	r3, [r7, #4]
    e37a:	2200      	movs	r2, #0
    e37c:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    e37e:	687b      	ldr	r3, [r7, #4]
    e380:	2200      	movs	r2, #0
    e382:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    e384:	687b      	ldr	r3, [r7, #4]
    e386:	2200      	movs	r2, #0
    e388:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    e38a:	687b      	ldr	r3, [r7, #4]
    e38c:	2200      	movs	r2, #0
    e38e:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
    e390:	687b      	ldr	r3, [r7, #4]
    e392:	2200      	movs	r2, #0
    e394:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    e396:	687b      	ldr	r3, [r7, #4]
    e398:	2200      	movs	r2, #0
    e39a:	61da      	str	r2, [r3, #28]
    e39c:	687b      	ldr	r3, [r7, #4]
    e39e:	2200      	movs	r2, #0
    e3a0:	621a      	str	r2, [r3, #32]
    e3a2:	687b      	ldr	r3, [r7, #4]
    e3a4:	2200      	movs	r2, #0
    e3a6:	625a      	str	r2, [r3, #36]	; 0x24
    e3a8:	687b      	ldr	r3, [r7, #4]
    e3aa:	2200      	movs	r2, #0
    e3ac:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    e3ae:	687b      	ldr	r3, [r7, #4]
    e3b0:	2200      	movs	r2, #0
    e3b2:	751a      	strb	r2, [r3, #20]
    e3b4:	687b      	ldr	r3, [r7, #4]
    e3b6:	2200      	movs	r2, #0
    e3b8:	755a      	strb	r2, [r3, #21]
    e3ba:	687b      	ldr	r3, [r7, #4]
    e3bc:	2200      	movs	r2, #0
    e3be:	759a      	strb	r2, [r3, #22]
    e3c0:	687b      	ldr	r3, [r7, #4]
    e3c2:	2200      	movs	r2, #0
    e3c4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    e3c6:	687b      	ldr	r3, [r7, #4]
    e3c8:	2200      	movs	r2, #0
    e3ca:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    e3cc:	687b      	ldr	r3, [r7, #4]
    e3ce:	2200      	movs	r2, #0
    e3d0:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    e3d2:	687b      	ldr	r3, [r7, #4]
    e3d4:	2200      	movs	r2, #0
    e3d6:	741a      	strb	r2, [r3, #16]
    e3d8:	687b      	ldr	r3, [r7, #4]
    e3da:	2200      	movs	r2, #0
    e3dc:	745a      	strb	r2, [r3, #17]
    e3de:	687b      	ldr	r3, [r7, #4]
    e3e0:	2200      	movs	r2, #0
    e3e2:	749a      	strb	r2, [r3, #18]
    e3e4:	687b      	ldr	r3, [r7, #4]
    e3e6:	2200      	movs	r2, #0
    e3e8:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    e3ea:	687b      	ldr	r3, [r7, #4]
    e3ec:	222c      	movs	r2, #44	; 0x2c
    e3ee:	2100      	movs	r1, #0
    e3f0:	5499      	strb	r1, [r3, r2]
    e3f2:	687b      	ldr	r3, [r7, #4]
    e3f4:	222d      	movs	r2, #45	; 0x2d
    e3f6:	2100      	movs	r1, #0
    e3f8:	5499      	strb	r1, [r3, r2]
    e3fa:	687b      	ldr	r3, [r7, #4]
    e3fc:	222e      	movs	r2, #46	; 0x2e
    e3fe:	2100      	movs	r1, #0
    e400:	5499      	strb	r1, [r3, r2]
    e402:	687b      	ldr	r3, [r7, #4]
    e404:	222f      	movs	r2, #47	; 0x2f
    e406:	2100      	movs	r1, #0
    e408:	5499      	strb	r1, [r3, r2]
    e40a:	687b      	ldr	r3, [r7, #4]
    e40c:	2230      	movs	r2, #48	; 0x30
    e40e:	2100      	movs	r1, #0
    e410:	5499      	strb	r1, [r3, r2]
    e412:	687b      	ldr	r3, [r7, #4]
    e414:	2231      	movs	r2, #49	; 0x31
    e416:	2100      	movs	r1, #0
    e418:	5499      	strb	r1, [r3, r2]
    e41a:	687b      	ldr	r3, [r7, #4]
    e41c:	2232      	movs	r2, #50	; 0x32
    e41e:	2100      	movs	r1, #0
    e420:	5499      	strb	r1, [r3, r2]
    e422:	687b      	ldr	r3, [r7, #4]
    e424:	2233      	movs	r2, #51	; 0x33
    e426:	2100      	movs	r1, #0
    e428:	5499      	strb	r1, [r3, r2]
    e42a:	687b      	ldr	r3, [r7, #4]
    e42c:	2234      	movs	r2, #52	; 0x34
    e42e:	2100      	movs	r1, #0
    e430:	5499      	strb	r1, [r3, r2]
    e432:	687b      	ldr	r3, [r7, #4]
    e434:	2235      	movs	r2, #53	; 0x35
    e436:	2100      	movs	r1, #0
    e438:	5499      	strb	r1, [r3, r2]
    e43a:	687b      	ldr	r3, [r7, #4]
    e43c:	2236      	movs	r2, #54	; 0x36
    e43e:	2100      	movs	r1, #0
    e440:	5499      	strb	r1, [r3, r2]
    e442:	687b      	ldr	r3, [r7, #4]
    e444:	2237      	movs	r2, #55	; 0x37
    e446:	2100      	movs	r1, #0
    e448:	5499      	strb	r1, [r3, r2]
    e44a:	687b      	ldr	r3, [r7, #4]
    e44c:	2238      	movs	r2, #56	; 0x38
    e44e:	2100      	movs	r1, #0
    e450:	5499      	strb	r1, [r3, r2]
    e452:	687b      	ldr	r3, [r7, #4]
    e454:	2239      	movs	r2, #57	; 0x39
    e456:	2100      	movs	r1, #0
    e458:	5499      	strb	r1, [r3, r2]
    e45a:	687b      	ldr	r3, [r7, #4]
    e45c:	223a      	movs	r2, #58	; 0x3a
    e45e:	2100      	movs	r1, #0
    e460:	5499      	strb	r1, [r3, r2]
    e462:	687b      	ldr	r3, [r7, #4]
    e464:	223b      	movs	r2, #59	; 0x3b
    e466:	2100      	movs	r1, #0
    e468:	5499      	strb	r1, [r3, r2]
    e46a:	687b      	ldr	r3, [r7, #4]
    e46c:	223c      	movs	r2, #60	; 0x3c
    e46e:	2100      	movs	r1, #0
    e470:	5499      	strb	r1, [r3, r2]
    e472:	687b      	ldr	r3, [r7, #4]
    e474:	223d      	movs	r2, #61	; 0x3d
    e476:	2100      	movs	r1, #0
    e478:	5499      	strb	r1, [r3, r2]
    e47a:	687b      	ldr	r3, [r7, #4]
    e47c:	223e      	movs	r2, #62	; 0x3e
    e47e:	2100      	movs	r1, #0
    e480:	5499      	strb	r1, [r3, r2]
    e482:	687b      	ldr	r3, [r7, #4]
    e484:	223f      	movs	r2, #63	; 0x3f
    e486:	2100      	movs	r1, #0
    e488:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    e48a:	687b      	ldr	r3, [r7, #4]
    e48c:	2240      	movs	r2, #64	; 0x40
    e48e:	2100      	movs	r1, #0
    e490:	5499      	strb	r1, [r3, r2]
    e492:	687b      	ldr	r3, [r7, #4]
    e494:	2241      	movs	r2, #65	; 0x41
    e496:	2100      	movs	r1, #0
    e498:	5499      	strb	r1, [r3, r2]
    e49a:	687b      	ldr	r3, [r7, #4]
    e49c:	2242      	movs	r2, #66	; 0x42
    e49e:	2100      	movs	r1, #0
    e4a0:	5499      	strb	r1, [r3, r2]
    e4a2:	687b      	ldr	r3, [r7, #4]
    e4a4:	2243      	movs	r2, #67	; 0x43
    e4a6:	2100      	movs	r1, #0
    e4a8:	5499      	strb	r1, [r3, r2]
    e4aa:	687b      	ldr	r3, [r7, #4]
    e4ac:	2244      	movs	r2, #68	; 0x44
    e4ae:	2100      	movs	r1, #0
    e4b0:	5499      	strb	r1, [r3, r2]
    e4b2:	687b      	ldr	r3, [r7, #4]
    e4b4:	2245      	movs	r2, #69	; 0x45
    e4b6:	2100      	movs	r1, #0
    e4b8:	5499      	strb	r1, [r3, r2]
    e4ba:	687b      	ldr	r3, [r7, #4]
    e4bc:	2246      	movs	r2, #70	; 0x46
    e4be:	2100      	movs	r1, #0
    e4c0:	5499      	strb	r1, [r3, r2]
    e4c2:	687b      	ldr	r3, [r7, #4]
    e4c4:	2247      	movs	r2, #71	; 0x47
    e4c6:	2100      	movs	r1, #0
    e4c8:	5499      	strb	r1, [r3, r2]
    e4ca:	687b      	ldr	r3, [r7, #4]
    e4cc:	2248      	movs	r2, #72	; 0x48
    e4ce:	2100      	movs	r1, #0
    e4d0:	5499      	strb	r1, [r3, r2]
    e4d2:	687b      	ldr	r3, [r7, #4]
    e4d4:	2249      	movs	r2, #73	; 0x49
    e4d6:	2100      	movs	r1, #0
    e4d8:	5499      	strb	r1, [r3, r2]
    e4da:	687b      	ldr	r3, [r7, #4]
    e4dc:	224a      	movs	r2, #74	; 0x4a
    e4de:	2100      	movs	r1, #0
    e4e0:	5499      	strb	r1, [r3, r2]
    e4e2:	687b      	ldr	r3, [r7, #4]
    e4e4:	224b      	movs	r2, #75	; 0x4b
    e4e6:	2100      	movs	r1, #0
    e4e8:	5499      	strb	r1, [r3, r2]
    e4ea:	687b      	ldr	r3, [r7, #4]
    e4ec:	224c      	movs	r2, #76	; 0x4c
    e4ee:	2100      	movs	r1, #0
    e4f0:	5499      	strb	r1, [r3, r2]
    e4f2:	687b      	ldr	r3, [r7, #4]
    e4f4:	224d      	movs	r2, #77	; 0x4d
    e4f6:	2100      	movs	r1, #0
    e4f8:	5499      	strb	r1, [r3, r2]
    e4fa:	687b      	ldr	r3, [r7, #4]
    e4fc:	224e      	movs	r2, #78	; 0x4e
    e4fe:	2100      	movs	r1, #0
    e500:	5499      	strb	r1, [r3, r2]
    e502:	687b      	ldr	r3, [r7, #4]
    e504:	224f      	movs	r2, #79	; 0x4f
    e506:	2100      	movs	r1, #0
    e508:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    e50a:	687b      	ldr	r3, [r7, #4]
    e50c:	2250      	movs	r2, #80	; 0x50
    e50e:	2100      	movs	r1, #0
    e510:	5499      	strb	r1, [r3, r2]
    e512:	687b      	ldr	r3, [r7, #4]
    e514:	2251      	movs	r2, #81	; 0x51
    e516:	2100      	movs	r1, #0
    e518:	5499      	strb	r1, [r3, r2]
    e51a:	687b      	ldr	r3, [r7, #4]
    e51c:	2252      	movs	r2, #82	; 0x52
    e51e:	2100      	movs	r1, #0
    e520:	5499      	strb	r1, [r3, r2]
    e522:	687b      	ldr	r3, [r7, #4]
    e524:	2253      	movs	r2, #83	; 0x53
    e526:	2100      	movs	r1, #0
    e528:	5499      	strb	r1, [r3, r2]
    e52a:	687b      	ldr	r3, [r7, #4]
    e52c:	2254      	movs	r2, #84	; 0x54
    e52e:	2100      	movs	r1, #0
    e530:	5499      	strb	r1, [r3, r2]
    e532:	687b      	ldr	r3, [r7, #4]
    e534:	2255      	movs	r2, #85	; 0x55
    e536:	2100      	movs	r1, #0
    e538:	5499      	strb	r1, [r3, r2]
    e53a:	687b      	ldr	r3, [r7, #4]
    e53c:	2256      	movs	r2, #86	; 0x56
    e53e:	2100      	movs	r1, #0
    e540:	5499      	strb	r1, [r3, r2]
    e542:	687b      	ldr	r3, [r7, #4]
    e544:	2257      	movs	r2, #87	; 0x57
    e546:	2100      	movs	r1, #0
    e548:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    e54a:	687b      	ldr	r3, [r7, #4]
    e54c:	2298      	movs	r2, #152	; 0x98
    e54e:	2100      	movs	r1, #0
    e550:	5499      	strb	r1, [r3, r2]
    e552:	687b      	ldr	r3, [r7, #4]
    e554:	2200      	movs	r2, #0
    e556:	659a      	str	r2, [r3, #88]	; 0x58
    e558:	687b      	ldr	r3, [r7, #4]
    e55a:	2200      	movs	r2, #0
    e55c:	679a      	str	r2, [r3, #120]	; 0x78
    e55e:	687b      	ldr	r3, [r7, #4]
    e560:	2299      	movs	r2, #153	; 0x99
    e562:	2100      	movs	r1, #0
    e564:	5499      	strb	r1, [r3, r2]
    e566:	687b      	ldr	r3, [r7, #4]
    e568:	2200      	movs	r2, #0
    e56a:	65da      	str	r2, [r3, #92]	; 0x5c
    e56c:	687b      	ldr	r3, [r7, #4]
    e56e:	2200      	movs	r2, #0
    e570:	67da      	str	r2, [r3, #124]	; 0x7c
    e572:	687b      	ldr	r3, [r7, #4]
    e574:	229a      	movs	r2, #154	; 0x9a
    e576:	2100      	movs	r1, #0
    e578:	5499      	strb	r1, [r3, r2]
    e57a:	687b      	ldr	r3, [r7, #4]
    e57c:	2200      	movs	r2, #0
    e57e:	661a      	str	r2, [r3, #96]	; 0x60
    e580:	687b      	ldr	r3, [r7, #4]
    e582:	2280      	movs	r2, #128	; 0x80
    e584:	2100      	movs	r1, #0
    e586:	5099      	str	r1, [r3, r2]
    e588:	687b      	ldr	r3, [r7, #4]
    e58a:	229b      	movs	r2, #155	; 0x9b
    e58c:	2100      	movs	r1, #0
    e58e:	5499      	strb	r1, [r3, r2]
    e590:	687b      	ldr	r3, [r7, #4]
    e592:	2200      	movs	r2, #0
    e594:	665a      	str	r2, [r3, #100]	; 0x64
    e596:	687b      	ldr	r3, [r7, #4]
    e598:	2284      	movs	r2, #132	; 0x84
    e59a:	2100      	movs	r1, #0
    e59c:	5099      	str	r1, [r3, r2]
    e59e:	687b      	ldr	r3, [r7, #4]
    e5a0:	229c      	movs	r2, #156	; 0x9c
    e5a2:	2100      	movs	r1, #0
    e5a4:	5499      	strb	r1, [r3, r2]
    e5a6:	687b      	ldr	r3, [r7, #4]
    e5a8:	2200      	movs	r2, #0
    e5aa:	669a      	str	r2, [r3, #104]	; 0x68
    e5ac:	687b      	ldr	r3, [r7, #4]
    e5ae:	2288      	movs	r2, #136	; 0x88
    e5b0:	2100      	movs	r1, #0
    e5b2:	5099      	str	r1, [r3, r2]
    e5b4:	687b      	ldr	r3, [r7, #4]
    e5b6:	229d      	movs	r2, #157	; 0x9d
    e5b8:	2100      	movs	r1, #0
    e5ba:	5499      	strb	r1, [r3, r2]
    e5bc:	687b      	ldr	r3, [r7, #4]
    e5be:	2200      	movs	r2, #0
    e5c0:	66da      	str	r2, [r3, #108]	; 0x6c
    e5c2:	687b      	ldr	r3, [r7, #4]
    e5c4:	228c      	movs	r2, #140	; 0x8c
    e5c6:	2100      	movs	r1, #0
    e5c8:	5099      	str	r1, [r3, r2]
    e5ca:	687b      	ldr	r3, [r7, #4]
    e5cc:	229e      	movs	r2, #158	; 0x9e
    e5ce:	2100      	movs	r1, #0
    e5d0:	5499      	strb	r1, [r3, r2]
    e5d2:	687b      	ldr	r3, [r7, #4]
    e5d4:	2200      	movs	r2, #0
    e5d6:	671a      	str	r2, [r3, #112]	; 0x70
    e5d8:	687b      	ldr	r3, [r7, #4]
    e5da:	2290      	movs	r2, #144	; 0x90
    e5dc:	2100      	movs	r1, #0
    e5de:	5099      	str	r1, [r3, r2]
    e5e0:	687b      	ldr	r3, [r7, #4]
    e5e2:	229f      	movs	r2, #159	; 0x9f
    e5e4:	2100      	movs	r1, #0
    e5e6:	5499      	strb	r1, [r3, r2]
    e5e8:	687b      	ldr	r3, [r7, #4]
    e5ea:	2200      	movs	r2, #0
    e5ec:	675a      	str	r2, [r3, #116]	; 0x74
    e5ee:	687b      	ldr	r3, [r7, #4]
    e5f0:	2294      	movs	r2, #148	; 0x94
    e5f2:	2100      	movs	r1, #0
    e5f4:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    e5f6:	687b      	ldr	r3, [r7, #4]
    e5f8:	22a0      	movs	r2, #160	; 0xa0
    e5fa:	2101      	movs	r1, #1
    e5fc:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
    e5fe:	687b      	ldr	r3, [r7, #4]
    e600:	22a1      	movs	r2, #161	; 0xa1
    e602:	2100      	movs	r1, #0
    e604:	5499      	strb	r1, [r3, r2]
}
    e606:	46c0      	nop			; (mov r8, r8)
    e608:	46bd      	mov	sp, r7
    e60a:	b005      	add	sp, #20
    e60c:	bd90      	pop	{r4, r7, pc}
    e60e:	46c0      	nop			; (mov r8, r8)
    e610:	0000e30d 	.word	0x0000e30d
    e614:	000193e4 	.word	0x000193e4

0000e618 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    e618:	b580      	push	{r7, lr}
    e61a:	b086      	sub	sp, #24
    e61c:	af00      	add	r7, sp, #0
    e61e:	60b9      	str	r1, [r7, #8]
    e620:	607a      	str	r2, [r7, #4]
    e622:	230f      	movs	r3, #15
    e624:	18fb      	adds	r3, r7, r3
    e626:	1c02      	adds	r2, r0, #0
    e628:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
    e62a:	2300      	movs	r3, #0
    e62c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    e62e:	2300      	movs	r3, #0
    e630:	613b      	str	r3, [r7, #16]
    e632:	e01d      	b.n	e670 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
    e634:	68ba      	ldr	r2, [r7, #8]
    e636:	693b      	ldr	r3, [r7, #16]
    e638:	18d3      	adds	r3, r2, r3
    e63a:	3310      	adds	r3, #16
    e63c:	781b      	ldrb	r3, [r3, #0]
    e63e:	2b01      	cmp	r3, #1
    e640:	d113      	bne.n	e66a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    e642:	230f      	movs	r3, #15
    e644:	18fb      	adds	r3, r7, r3
    e646:	781b      	ldrb	r3, [r3, #0]
    e648:	4a1b      	ldr	r2, [pc, #108]	; (e6b8 <_tcc_build_ctrla+0xa0>)
    e64a:	5cd3      	ldrb	r3, [r2, r3]
    e64c:	1e1a      	subs	r2, r3, #0
    e64e:	693b      	ldr	r3, [r7, #16]
    e650:	429a      	cmp	r2, r3
    e652:	da01      	bge.n	e658 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    e654:	2317      	movs	r3, #23
    e656:	e02a      	b.n	e6ae <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    e658:	2380      	movs	r3, #128	; 0x80
    e65a:	045a      	lsls	r2, r3, #17
    e65c:	693b      	ldr	r3, [r7, #16]
    e65e:	409a      	lsls	r2, r3
    e660:	0013      	movs	r3, r2
    e662:	001a      	movs	r2, r3
    e664:	697b      	ldr	r3, [r7, #20]
    e666:	4313      	orrs	r3, r2
    e668:	617b      	str	r3, [r7, #20]
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    e66a:	693b      	ldr	r3, [r7, #16]
    e66c:	3301      	adds	r3, #1
    e66e:	613b      	str	r3, [r7, #16]
    e670:	693b      	ldr	r3, [r7, #16]
    e672:	2b03      	cmp	r3, #3
    e674:	ddde      	ble.n	e634 <_tcc_build_ctrla+0x1c>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    e676:	68bb      	ldr	r3, [r7, #8]
    e678:	22a1      	movs	r2, #161	; 0xa1
    e67a:	5c9b      	ldrb	r3, [r3, r2]
    e67c:	2b00      	cmp	r3, #0
    e67e:	d004      	beq.n	e68a <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    e680:	697b      	ldr	r3, [r7, #20]
    e682:	2280      	movs	r2, #128	; 0x80
    e684:	0112      	lsls	r2, r2, #4
    e686:	4313      	orrs	r3, r2
    e688:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    e68a:	68bb      	ldr	r3, [r7, #8]
    e68c:	7b1b      	ldrb	r3, [r3, #12]
    e68e:	031b      	lsls	r3, r3, #12
    e690:	001a      	movs	r2, r3
    e692:	697b      	ldr	r3, [r7, #20]
    e694:	4313      	orrs	r3, r2
    e696:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    e698:	68bb      	ldr	r3, [r7, #8]
    e69a:	7adb      	ldrb	r3, [r3, #11]
    e69c:	021b      	lsls	r3, r3, #8
    e69e:	001a      	movs	r2, r3
    e6a0:	697b      	ldr	r3, [r7, #20]
    e6a2:	4313      	orrs	r3, r2
    e6a4:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
    e6a6:	687b      	ldr	r3, [r7, #4]
    e6a8:	697a      	ldr	r2, [r7, #20]
    e6aa:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    e6ac:	2300      	movs	r3, #0
}
    e6ae:	0018      	movs	r0, r3
    e6b0:	46bd      	mov	sp, r7
    e6b2:	b006      	add	sp, #24
    e6b4:	bd80      	pop	{r7, pc}
    e6b6:	46c0      	nop			; (mov r8, r8)
    e6b8:	000193f0 	.word	0x000193f0

0000e6bc <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
    e6bc:	b580      	push	{r7, lr}
    e6be:	b086      	sub	sp, #24
    e6c0:	af00      	add	r7, sp, #0
    e6c2:	60b9      	str	r1, [r7, #8]
    e6c4:	607a      	str	r2, [r7, #4]
    e6c6:	230f      	movs	r3, #15
    e6c8:	18fb      	adds	r3, r7, r3
    e6ca:	1c02      	adds	r2, r0, #0
    e6cc:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
    e6ce:	2317      	movs	r3, #23
    e6d0:	18fb      	adds	r3, r7, r3
    e6d2:	2200      	movs	r2, #0
    e6d4:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
    e6d6:	68bb      	ldr	r3, [r7, #8]
    e6d8:	7a1b      	ldrb	r3, [r3, #8]
    e6da:	2b00      	cmp	r3, #0
    e6dc:	d007      	beq.n	e6ee <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    e6de:	2317      	movs	r3, #23
    e6e0:	18fb      	adds	r3, r7, r3
    e6e2:	2217      	movs	r2, #23
    e6e4:	18ba      	adds	r2, r7, r2
    e6e6:	7812      	ldrb	r2, [r2, #0]
    e6e8:	2104      	movs	r1, #4
    e6ea:	430a      	orrs	r2, r1
    e6ec:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    e6ee:	68bb      	ldr	r3, [r7, #8]
    e6f0:	7a5b      	ldrb	r3, [r3, #9]
    e6f2:	2b01      	cmp	r3, #1
    e6f4:	d107      	bne.n	e706 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
    e6f6:	2317      	movs	r3, #23
    e6f8:	18fb      	adds	r3, r7, r3
    e6fa:	2217      	movs	r2, #23
    e6fc:	18ba      	adds	r2, r7, r2
    e6fe:	7812      	ldrb	r2, [r2, #0]
    e700:	2101      	movs	r1, #1
    e702:	430a      	orrs	r2, r1
    e704:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
    e706:	687b      	ldr	r3, [r7, #4]
    e708:	2217      	movs	r2, #23
    e70a:	18ba      	adds	r2, r7, r2
    e70c:	7812      	ldrb	r2, [r2, #0]
    e70e:	701a      	strb	r2, [r3, #0]
}
    e710:	46c0      	nop			; (mov r8, r8)
    e712:	46bd      	mov	sp, r7
    e714:	b006      	add	sp, #24
    e716:	bd80      	pop	{r7, pc}

0000e718 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    e718:	b580      	push	{r7, lr}
    e71a:	b088      	sub	sp, #32
    e71c:	af00      	add	r7, sp, #0
    e71e:	60b9      	str	r1, [r7, #8]
    e720:	607a      	str	r2, [r7, #4]
    e722:	230f      	movs	r3, #15
    e724:	18fb      	adds	r3, r7, r3
    e726:	1c02      	adds	r2, r0, #0
    e728:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    e72a:	230f      	movs	r3, #15
    e72c:	18fb      	adds	r3, r7, r3
    e72e:	781a      	ldrb	r2, [r3, #0]
    e730:	231b      	movs	r3, #27
    e732:	18fb      	adds	r3, r7, r3
    e734:	493e      	ldr	r1, [pc, #248]	; (e830 <_tcc_build_faults+0x118>)
    e736:	5c8a      	ldrb	r2, [r1, r2]
    e738:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    e73a:	2300      	movs	r3, #0
    e73c:	61fb      	str	r3, [r7, #28]
    e73e:	e06e      	b.n	e81e <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
    e740:	69fa      	ldr	r2, [r7, #28]
    e742:	0013      	movs	r3, r2
    e744:	009b      	lsls	r3, r3, #2
    e746:	189b      	adds	r3, r3, r2
    e748:	005b      	lsls	r3, r3, #1
    e74a:	3328      	adds	r3, #40	; 0x28
    e74c:	68ba      	ldr	r2, [r7, #8]
    e74e:	18d3      	adds	r3, r2, r3
    e750:	3304      	adds	r3, #4
    e752:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    e754:	697b      	ldr	r3, [r7, #20]
    e756:	7a5b      	ldrb	r3, [r3, #9]
    e758:	221b      	movs	r2, #27
    e75a:	18ba      	adds	r2, r7, r2
    e75c:	7812      	ldrb	r2, [r2, #0]
    e75e:	429a      	cmp	r2, r3
    e760:	d801      	bhi.n	e766 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
    e762:	2317      	movs	r3, #23
    e764:	e05f      	b.n	e826 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
    e766:	697b      	ldr	r3, [r7, #20]
    e768:	781b      	ldrb	r3, [r3, #0]
    e76a:	2b0f      	cmp	r3, #15
    e76c:	d901      	bls.n	e772 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
    e76e:	2317      	movs	r3, #23
    e770:	e059      	b.n	e826 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    e772:	697b      	ldr	r3, [r7, #20]
    e774:	781b      	ldrb	r3, [r3, #0]
    e776:	061b      	lsls	r3, r3, #24
    e778:	001a      	movs	r2, r3
    e77a:	23f0      	movs	r3, #240	; 0xf0
    e77c:	051b      	lsls	r3, r3, #20
    e77e:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    e780:	697b      	ldr	r3, [r7, #20]
    e782:	785b      	ldrb	r3, [r3, #1]
    e784:	041b      	lsls	r3, r3, #16
    e786:	0019      	movs	r1, r3
    e788:	23ff      	movs	r3, #255	; 0xff
    e78a:	041b      	lsls	r3, r3, #16
    e78c:	400b      	ands	r3, r1
    e78e:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    e790:	697b      	ldr	r3, [r7, #20]
    e792:	789b      	ldrb	r3, [r3, #2]
    e794:	2b00      	cmp	r3, #0
    e796:	d001      	beq.n	e79c <_tcc_build_faults+0x84>
    e798:	2380      	movs	r3, #128	; 0x80
    e79a:	e000      	b.n	e79e <_tcc_build_faults+0x86>
    e79c:	2300      	movs	r3, #0
    e79e:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    e7a0:	697b      	ldr	r3, [r7, #20]
    e7a2:	78db      	ldrb	r3, [r3, #3]
    e7a4:	2b00      	cmp	r3, #0
    e7a6:	d001      	beq.n	e7ac <_tcc_build_faults+0x94>
    e7a8:	2308      	movs	r3, #8
    e7aa:	e000      	b.n	e7ae <_tcc_build_faults+0x96>
    e7ac:	2300      	movs	r3, #0
    e7ae:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    e7b0:	697b      	ldr	r3, [r7, #20]
    e7b2:	791b      	ldrb	r3, [r3, #4]
    e7b4:	2b00      	cmp	r3, #0
    e7b6:	d001      	beq.n	e7bc <_tcc_build_faults+0xa4>
    e7b8:	2310      	movs	r3, #16
    e7ba:	e000      	b.n	e7be <_tcc_build_faults+0xa6>
    e7bc:	2300      	movs	r3, #0
    e7be:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
    e7c0:	697b      	ldr	r3, [r7, #20]
    e7c2:	795b      	ldrb	r3, [r3, #5]
    e7c4:	0019      	movs	r1, r3
    e7c6:	2303      	movs	r3, #3
    e7c8:	400b      	ands	r3, r1
    e7ca:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
    e7cc:	697b      	ldr	r3, [r7, #20]
    e7ce:	799b      	ldrb	r3, [r3, #6]
    e7d0:	015b      	lsls	r3, r3, #5
    e7d2:	0019      	movs	r1, r3
    e7d4:	2360      	movs	r3, #96	; 0x60
    e7d6:	400b      	ands	r3, r1
    e7d8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
    e7da:	697b      	ldr	r3, [r7, #20]
    e7dc:	79db      	ldrb	r3, [r3, #7]
    e7de:	021b      	lsls	r3, r3, #8
    e7e0:	0019      	movs	r1, r3
    e7e2:	23c0      	movs	r3, #192	; 0xc0
    e7e4:	009b      	lsls	r3, r3, #2
    e7e6:	400b      	ands	r3, r1
    e7e8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    e7ea:	697b      	ldr	r3, [r7, #20]
    e7ec:	7a1b      	ldrb	r3, [r3, #8]
    e7ee:	031b      	lsls	r3, r3, #12
    e7f0:	0019      	movs	r1, r3
    e7f2:	23e0      	movs	r3, #224	; 0xe0
    e7f4:	01db      	lsls	r3, r3, #7
    e7f6:	400b      	ands	r3, r1
    e7f8:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    e7fa:	697b      	ldr	r3, [r7, #20]
    e7fc:	7a5b      	ldrb	r3, [r3, #9]
    e7fe:	029b      	lsls	r3, r3, #10
    e800:	0019      	movs	r1, r3
    e802:	23c0      	movs	r3, #192	; 0xc0
    e804:	011b      	lsls	r3, r3, #4
    e806:	400b      	ands	r3, r1
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    e808:	4313      	orrs	r3, r2
    e80a:	613b      	str	r3, [r7, #16]
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    e80c:	69fb      	ldr	r3, [r7, #28]
    e80e:	009b      	lsls	r3, r3, #2
    e810:	687a      	ldr	r2, [r7, #4]
    e812:	18d3      	adds	r3, r2, r3
    e814:	693a      	ldr	r2, [r7, #16]
    e816:	601a      	str	r2, [r3, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    e818:	69fb      	ldr	r3, [r7, #28]
    e81a:	3301      	adds	r3, #1
    e81c:	61fb      	str	r3, [r7, #28]
    e81e:	69fb      	ldr	r3, [r7, #28]
    e820:	2b01      	cmp	r3, #1
    e822:	dd8d      	ble.n	e740 <_tcc_build_faults+0x28>
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
	}
	return STATUS_OK;
    e824:	2300      	movs	r3, #0
}
    e826:	0018      	movs	r0, r3
    e828:	46bd      	mov	sp, r7
    e82a:	b008      	add	sp, #32
    e82c:	bd80      	pop	{r7, pc}
    e82e:	46c0      	nop			; (mov r8, r8)
    e830:	000193f0 	.word	0x000193f0

0000e834 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    e834:	b580      	push	{r7, lr}
    e836:	b088      	sub	sp, #32
    e838:	af00      	add	r7, sp, #0
    e83a:	60b9      	str	r1, [r7, #8]
    e83c:	607a      	str	r2, [r7, #4]
    e83e:	230f      	movs	r3, #15
    e840:	18fb      	adds	r3, r7, r3
    e842:	1c02      	adds	r2, r0, #0
    e844:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    e846:	230f      	movs	r3, #15
    e848:	18fb      	adds	r3, r7, r3
    e84a:	781a      	ldrb	r2, [r3, #0]
    e84c:	2317      	movs	r3, #23
    e84e:	18fb      	adds	r3, r7, r3
    e850:	492d      	ldr	r1, [pc, #180]	; (e908 <_tcc_build_drvctrl+0xd4>)
    e852:	5c8a      	ldrb	r2, [r1, r2]
    e854:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
    e856:	2300      	movs	r3, #0
    e858:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    e85a:	2300      	movs	r3, #0
    e85c:	61fb      	str	r3, [r7, #28]
    e85e:	e048      	b.n	e8f2 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
    e860:	68ba      	ldr	r2, [r7, #8]
    e862:	2150      	movs	r1, #80	; 0x50
    e864:	69fb      	ldr	r3, [r7, #28]
    e866:	18d3      	adds	r3, r2, r3
    e868:	185b      	adds	r3, r3, r1
    e86a:	781b      	ldrb	r3, [r3, #0]
    e86c:	2b00      	cmp	r3, #0
    e86e:	d010      	beq.n	e892 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
    e870:	2317      	movs	r3, #23
    e872:	18fb      	adds	r3, r7, r3
    e874:	781a      	ldrb	r2, [r3, #0]
    e876:	69fb      	ldr	r3, [r7, #28]
    e878:	429a      	cmp	r2, r3
    e87a:	d801      	bhi.n	e880 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
    e87c:	2317      	movs	r3, #23
    e87e:	e03f      	b.n	e900 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    e880:	2380      	movs	r3, #128	; 0x80
    e882:	025a      	lsls	r2, r3, #9
    e884:	69fb      	ldr	r3, [r7, #28]
    e886:	409a      	lsls	r2, r3
    e888:	0013      	movs	r3, r2
    e88a:	001a      	movs	r2, r3
    e88c:	69bb      	ldr	r3, [r7, #24]
    e88e:	4313      	orrs	r3, r2
    e890:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    e892:	68ba      	ldr	r2, [r7, #8]
    e894:	69fb      	ldr	r3, [r7, #28]
    e896:	331c      	adds	r3, #28
    e898:	005b      	lsls	r3, r3, #1
    e89a:	18d3      	adds	r3, r2, r3
    e89c:	3309      	adds	r3, #9
    e89e:	781b      	ldrb	r3, [r3, #0]
    e8a0:	2b00      	cmp	r3, #0
    e8a2:	d023      	beq.n	e8ec <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    e8a4:	2317      	movs	r3, #23
    e8a6:	18fb      	adds	r3, r7, r3
    e8a8:	781a      	ldrb	r2, [r3, #0]
    e8aa:	69fb      	ldr	r3, [r7, #28]
    e8ac:	429a      	cmp	r2, r3
    e8ae:	d801      	bhi.n	e8b4 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
    e8b0:	2317      	movs	r3, #23
    e8b2:	e025      	b.n	e900 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    e8b4:	68ba      	ldr	r2, [r7, #8]
    e8b6:	69fb      	ldr	r3, [r7, #28]
    e8b8:	331c      	adds	r3, #28
    e8ba:	005b      	lsls	r3, r3, #1
    e8bc:	18d3      	adds	r3, r2, r3
    e8be:	3309      	adds	r3, #9
    e8c0:	781b      	ldrb	r3, [r3, #0]
    e8c2:	2b02      	cmp	r3, #2
    e8c4:	d10a      	bne.n	e8dc <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    e8c6:	2302      	movs	r3, #2
    e8c8:	33ff      	adds	r3, #255	; 0xff
    e8ca:	001a      	movs	r2, r3
    e8cc:	69fb      	ldr	r3, [r7, #28]
    e8ce:	409a      	lsls	r2, r3
    e8d0:	0013      	movs	r3, r2
    e8d2:	001a      	movs	r2, r3
    e8d4:	69bb      	ldr	r3, [r7, #24]
    e8d6:	4313      	orrs	r3, r2
    e8d8:	61bb      	str	r3, [r7, #24]
    e8da:	e007      	b.n	e8ec <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    e8dc:	2201      	movs	r2, #1
    e8de:	69fb      	ldr	r3, [r7, #28]
    e8e0:	409a      	lsls	r2, r3
    e8e2:	0013      	movs	r3, r2
    e8e4:	001a      	movs	r2, r3
    e8e6:	69bb      	ldr	r3, [r7, #24]
    e8e8:	4313      	orrs	r3, r2
    e8ea:	61bb      	str	r3, [r7, #24]
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    e8ec:	69fb      	ldr	r3, [r7, #28]
    e8ee:	3301      	adds	r3, #1
    e8f0:	61fb      	str	r3, [r7, #28]
    e8f2:	69fb      	ldr	r3, [r7, #28]
    e8f4:	2b07      	cmp	r3, #7
    e8f6:	d9b3      	bls.n	e860 <_tcc_build_drvctrl+0x2c>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
			}
		}
	}
	*value_buffer = drvctrl;
    e8f8:	687b      	ldr	r3, [r7, #4]
    e8fa:	69ba      	ldr	r2, [r7, #24]
    e8fc:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
    e8fe:	2300      	movs	r3, #0
}
    e900:	0018      	movs	r0, r3
    e902:	46bd      	mov	sp, r7
    e904:	b008      	add	sp, #32
    e906:	bd80      	pop	{r7, pc}
    e908:	000193f4 	.word	0x000193f4

0000e90c <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
    e90c:	b580      	push	{r7, lr}
    e90e:	b088      	sub	sp, #32
    e910:	af00      	add	r7, sp, #0
    e912:	60b9      	str	r1, [r7, #8]
    e914:	607a      	str	r2, [r7, #4]
    e916:	230f      	movs	r3, #15
    e918:	18fb      	adds	r3, r7, r3
    e91a:	1c02      	adds	r2, r0, #0
    e91c:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    e91e:	230f      	movs	r3, #15
    e920:	18fb      	adds	r3, r7, r3
    e922:	781a      	ldrb	r2, [r3, #0]
    e924:	2317      	movs	r3, #23
    e926:	18fb      	adds	r3, r7, r3
    e928:	491d      	ldr	r1, [pc, #116]	; (e9a0 <_tcc_build_waves+0x94>)
    e92a:	5c8a      	ldrb	r2, [r1, r2]
    e92c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
    e92e:	68bb      	ldr	r3, [r7, #8]
    e930:	3310      	adds	r3, #16
    e932:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    e934:	693b      	ldr	r3, [r7, #16]
    e936:	7a5b      	ldrb	r3, [r3, #9]
    e938:	011b      	lsls	r3, r3, #4
    e93a:	001a      	movs	r2, r3
    e93c:	2330      	movs	r3, #48	; 0x30
    e93e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    e940:	693b      	ldr	r3, [r7, #16]
    e942:	7a1b      	ldrb	r3, [r3, #8]
    e944:	0019      	movs	r1, r3
    e946:	2307      	movs	r3, #7
    e948:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    e94a:	4313      	orrs	r3, r2
    e94c:	61bb      	str	r3, [r7, #24]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    e94e:	2300      	movs	r3, #0
    e950:	61fb      	str	r3, [r7, #28]
    e952:	e01a      	b.n	e98a <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
    e954:	693a      	ldr	r2, [r7, #16]
    e956:	69fb      	ldr	r3, [r7, #28]
    e958:	18d3      	adds	r3, r2, r3
    e95a:	3304      	adds	r3, #4
    e95c:	781b      	ldrb	r3, [r3, #0]
    e95e:	2b00      	cmp	r3, #0
    e960:	d010      	beq.n	e984 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
    e962:	2317      	movs	r3, #23
    e964:	18fb      	adds	r3, r7, r3
    e966:	781a      	ldrb	r2, [r3, #0]
    e968:	69fb      	ldr	r3, [r7, #28]
    e96a:	429a      	cmp	r2, r3
    e96c:	dc01      	bgt.n	e972 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
    e96e:	2317      	movs	r3, #23
    e970:	e012      	b.n	e998 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
    e972:	2380      	movs	r3, #128	; 0x80
    e974:	025a      	lsls	r2, r3, #9
    e976:	69fb      	ldr	r3, [r7, #28]
    e978:	409a      	lsls	r2, r3
    e97a:	0013      	movs	r3, r2
    e97c:	001a      	movs	r2, r3
    e97e:	69bb      	ldr	r3, [r7, #24]
    e980:	4313      	orrs	r3, r2
    e982:	61bb      	str	r3, [r7, #24]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    e984:	69fb      	ldr	r3, [r7, #28]
    e986:	3301      	adds	r3, #1
    e988:	61fb      	str	r3, [r7, #28]
    e98a:	69fb      	ldr	r3, [r7, #28]
    e98c:	2b03      	cmp	r3, #3
    e98e:	dde1      	ble.n	e954 <_tcc_build_waves+0x48>
			}
			wave |= (TCC_WAVE_POL0 << n);
		}
	}

	value_buffer[0] = wave;
    e990:	687b      	ldr	r3, [r7, #4]
    e992:	69ba      	ldr	r2, [r7, #24]
    e994:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    e996:	2300      	movs	r3, #0
}
    e998:	0018      	movs	r0, r3
    e99a:	46bd      	mov	sp, r7
    e99c:	b008      	add	sp, #32
    e99e:	bd80      	pop	{r7, pc}
    e9a0:	000193f0 	.word	0x000193f0

0000e9a4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    e9a4:	b590      	push	{r4, r7, lr}
    e9a6:	b091      	sub	sp, #68	; 0x44
    e9a8:	af00      	add	r7, sp, #0
    e9aa:	60f8      	str	r0, [r7, #12]
    e9ac:	60b9      	str	r1, [r7, #8]
    e9ae:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    e9b0:	233b      	movs	r3, #59	; 0x3b
    e9b2:	18fc      	adds	r4, r7, r3
    e9b4:	68bb      	ldr	r3, [r7, #8]
    e9b6:	0018      	movs	r0, r3
    e9b8:	4bc4      	ldr	r3, [pc, #784]	; (eccc <tcc_init+0x328>)
    e9ba:	4798      	blx	r3
    e9bc:	0003      	movs	r3, r0
    e9be:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    e9c0:	233b      	movs	r3, #59	; 0x3b
    e9c2:	18fb      	adds	r3, r7, r3
    e9c4:	781a      	ldrb	r2, [r3, #0]
    e9c6:	4bc2      	ldr	r3, [pc, #776]	; (ecd0 <tcc_init+0x32c>)
    e9c8:	0092      	lsls	r2, r2, #2
    e9ca:	58d3      	ldr	r3, [r2, r3]
    e9cc:	0019      	movs	r1, r3
    e9ce:	2002      	movs	r0, #2
    e9d0:	4bc0      	ldr	r3, [pc, #768]	; (ecd4 <tcc_init+0x330>)
    e9d2:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    e9d4:	68bb      	ldr	r3, [r7, #8]
    e9d6:	681b      	ldr	r3, [r3, #0]
    e9d8:	2202      	movs	r2, #2
    e9da:	4013      	ands	r3, r2
    e9dc:	d001      	beq.n	e9e2 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
    e9de:	231c      	movs	r3, #28
    e9e0:	e1be      	b.n	ed60 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    e9e2:	68bb      	ldr	r3, [r7, #8]
    e9e4:	681b      	ldr	r3, [r3, #0]
    e9e6:	2201      	movs	r2, #1
    e9e8:	4013      	ands	r3, r2
    e9ea:	d001      	beq.n	e9f0 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
    e9ec:	231c      	movs	r3, #28
    e9ee:	e1b7      	b.n	ed60 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    e9f0:	233b      	movs	r3, #59	; 0x3b
    e9f2:	18fb      	adds	r3, r7, r3
    e9f4:	781a      	ldrb	r2, [r3, #0]
    e9f6:	4bb8      	ldr	r3, [pc, #736]	; (ecd8 <tcc_init+0x334>)
    e9f8:	0092      	lsls	r2, r2, #2
    e9fa:	58d3      	ldr	r3, [r2, r3]
    e9fc:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
    e9fe:	687b      	ldr	r3, [r7, #4]
    ea00:	681a      	ldr	r2, [r3, #0]
    ea02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ea04:	429a      	cmp	r2, r3
    ea06:	d804      	bhi.n	ea12 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
    ea08:	687b      	ldr	r3, [r7, #4]
    ea0a:	685a      	ldr	r2, [r3, #4]
    ea0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ea0e:	429a      	cmp	r2, r3
    ea10:	d901      	bls.n	ea16 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
    ea12:	2317      	movs	r3, #23
    ea14:	e1a4      	b.n	ed60 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    ea16:	2300      	movs	r3, #0
    ea18:	63fb      	str	r3, [r7, #60]	; 0x3c
    ea1a:	e00e      	b.n	ea3a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
    ea1c:	687a      	ldr	r2, [r7, #4]
    ea1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea20:	3306      	adds	r3, #6
    ea22:	009b      	lsls	r3, r3, #2
    ea24:	18d3      	adds	r3, r2, r3
    ea26:	3304      	adds	r3, #4
    ea28:	681a      	ldr	r2, [r3, #0]
    ea2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ea2c:	429a      	cmp	r2, r3
    ea2e:	d901      	bls.n	ea34 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
    ea30:	2317      	movs	r3, #23
    ea32:	e195      	b.n	ed60 <tcc_init+0x3bc>
		) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    ea34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea36:	3301      	adds	r3, #1
    ea38:	63fb      	str	r3, [r7, #60]	; 0x3c
    ea3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea3c:	2b03      	cmp	r3, #3
    ea3e:	dded      	ble.n	ea1c <tcc_init+0x78>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    ea40:	2300      	movs	r3, #0
    ea42:	63fb      	str	r3, [r7, #60]	; 0x3c
    ea44:	e019      	b.n	ea7a <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
    ea46:	687a      	ldr	r2, [r7, #4]
    ea48:	2198      	movs	r1, #152	; 0x98
    ea4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea4c:	18d3      	adds	r3, r2, r3
    ea4e:	185b      	adds	r3, r3, r1
    ea50:	781b      	ldrb	r3, [r3, #0]
    ea52:	2201      	movs	r2, #1
    ea54:	4053      	eors	r3, r2
    ea56:	b2db      	uxtb	r3, r3
    ea58:	2b00      	cmp	r3, #0
    ea5a:	d10a      	bne.n	ea72 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    ea5c:	233b      	movs	r3, #59	; 0x3b
    ea5e:	18fb      	adds	r3, r7, r3
    ea60:	781b      	ldrb	r3, [r3, #0]
    ea62:	4a9e      	ldr	r2, [pc, #632]	; (ecdc <tcc_init+0x338>)
    ea64:	5cd3      	ldrb	r3, [r2, r3]
    ea66:	1e1a      	subs	r2, r3, #0
    ea68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea6a:	429a      	cmp	r2, r3
    ea6c:	dc02      	bgt.n	ea74 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
    ea6e:	2317      	movs	r3, #23
    ea70:	e176      	b.n	ed60 <tcc_init+0x3bc>
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    ea72:	46c0      	nop			; (mov r8, r8)
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    ea74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea76:	3301      	adds	r3, #1
    ea78:	63fb      	str	r3, [r7, #60]	; 0x3c
    ea7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ea7c:	2b07      	cmp	r3, #7
    ea7e:	dde2      	ble.n	ea46 <tcc_init+0xa2>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
    ea80:	2300      	movs	r3, #0
    ea82:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
    ea84:	2333      	movs	r3, #51	; 0x33
    ea86:	18fc      	adds	r4, r7, r3
    ea88:	232c      	movs	r3, #44	; 0x2c
    ea8a:	18fa      	adds	r2, r7, r3
    ea8c:	6879      	ldr	r1, [r7, #4]
    ea8e:	233b      	movs	r3, #59	; 0x3b
    ea90:	18fb      	adds	r3, r7, r3
    ea92:	781b      	ldrb	r3, [r3, #0]
    ea94:	0018      	movs	r0, r3
    ea96:	4b92      	ldr	r3, [pc, #584]	; (ece0 <tcc_init+0x33c>)
    ea98:	4798      	blx	r3
    ea9a:	0003      	movs	r3, r0
    ea9c:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    ea9e:	2333      	movs	r3, #51	; 0x33
    eaa0:	18fb      	adds	r3, r7, r3
    eaa2:	781b      	ldrb	r3, [r3, #0]
    eaa4:	2b00      	cmp	r3, #0
    eaa6:	d003      	beq.n	eab0 <tcc_init+0x10c>
		return status;
    eaa8:	2333      	movs	r3, #51	; 0x33
    eaaa:	18fb      	adds	r3, r7, r3
    eaac:	781b      	ldrb	r3, [r3, #0]
    eaae:	e157      	b.n	ed60 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
    eab0:	232b      	movs	r3, #43	; 0x2b
    eab2:	18fa      	adds	r2, r7, r3
    eab4:	6879      	ldr	r1, [r7, #4]
    eab6:	233b      	movs	r3, #59	; 0x3b
    eab8:	18fb      	adds	r3, r7, r3
    eaba:	781b      	ldrb	r3, [r3, #0]
    eabc:	0018      	movs	r0, r3
    eabe:	4b89      	ldr	r3, [pc, #548]	; (ece4 <tcc_init+0x340>)
    eac0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
    eac2:	2333      	movs	r3, #51	; 0x33
    eac4:	18fc      	adds	r4, r7, r3
    eac6:	2320      	movs	r3, #32
    eac8:	18fa      	adds	r2, r7, r3
    eaca:	6879      	ldr	r1, [r7, #4]
    eacc:	233b      	movs	r3, #59	; 0x3b
    eace:	18fb      	adds	r3, r7, r3
    ead0:	781b      	ldrb	r3, [r3, #0]
    ead2:	0018      	movs	r0, r3
    ead4:	4b84      	ldr	r3, [pc, #528]	; (ece8 <tcc_init+0x344>)
    ead6:	4798      	blx	r3
    ead8:	0003      	movs	r3, r0
    eada:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    eadc:	2333      	movs	r3, #51	; 0x33
    eade:	18fb      	adds	r3, r7, r3
    eae0:	781b      	ldrb	r3, [r3, #0]
    eae2:	2b00      	cmp	r3, #0
    eae4:	d003      	beq.n	eaee <tcc_init+0x14a>
		return status;
    eae6:	2333      	movs	r3, #51	; 0x33
    eae8:	18fb      	adds	r3, r7, r3
    eaea:	781b      	ldrb	r3, [r3, #0]
    eaec:	e138      	b.n	ed60 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
    eaee:	2300      	movs	r3, #0
    eaf0:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
    eaf2:	2333      	movs	r3, #51	; 0x33
    eaf4:	18fc      	adds	r4, r7, r3
    eaf6:	231c      	movs	r3, #28
    eaf8:	18fa      	adds	r2, r7, r3
    eafa:	6879      	ldr	r1, [r7, #4]
    eafc:	233b      	movs	r3, #59	; 0x3b
    eafe:	18fb      	adds	r3, r7, r3
    eb00:	781b      	ldrb	r3, [r3, #0]
    eb02:	0018      	movs	r0, r3
    eb04:	4b79      	ldr	r3, [pc, #484]	; (ecec <tcc_init+0x348>)
    eb06:	4798      	blx	r3
    eb08:	0003      	movs	r3, r0
    eb0a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    eb0c:	2333      	movs	r3, #51	; 0x33
    eb0e:	18fb      	adds	r3, r7, r3
    eb10:	781b      	ldrb	r3, [r3, #0]
    eb12:	2b00      	cmp	r3, #0
    eb14:	d003      	beq.n	eb1e <tcc_init+0x17a>
		return status;
    eb16:	2333      	movs	r3, #51	; 0x33
    eb18:	18fb      	adds	r3, r7, r3
    eb1a:	781b      	ldrb	r3, [r3, #0]
    eb1c:	e120      	b.n	ed60 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
    eb1e:	2333      	movs	r3, #51	; 0x33
    eb20:	18fc      	adds	r4, r7, r3
    eb22:	2318      	movs	r3, #24
    eb24:	18fa      	adds	r2, r7, r3
    eb26:	6879      	ldr	r1, [r7, #4]
    eb28:	233b      	movs	r3, #59	; 0x3b
    eb2a:	18fb      	adds	r3, r7, r3
    eb2c:	781b      	ldrb	r3, [r3, #0]
    eb2e:	0018      	movs	r0, r3
    eb30:	4b6f      	ldr	r3, [pc, #444]	; (ecf0 <tcc_init+0x34c>)
    eb32:	4798      	blx	r3
    eb34:	0003      	movs	r3, r0
    eb36:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
    eb38:	2333      	movs	r3, #51	; 0x33
    eb3a:	18fb      	adds	r3, r7, r3
    eb3c:	781b      	ldrb	r3, [r3, #0]
    eb3e:	2b00      	cmp	r3, #0
    eb40:	d003      	beq.n	eb4a <tcc_init+0x1a6>
		return status;
    eb42:	2333      	movs	r3, #51	; 0x33
    eb44:	18fb      	adds	r3, r7, r3
    eb46:	781b      	ldrb	r3, [r3, #0]
    eb48:	e10a      	b.n	ed60 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    eb4a:	2300      	movs	r3, #0
    eb4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    eb4e:	e009      	b.n	eb64 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
    eb50:	68fa      	ldr	r2, [r7, #12]
    eb52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eb54:	009b      	lsls	r3, r3, #2
    eb56:	18d3      	adds	r3, r2, r3
    eb58:	3304      	adds	r3, #4
    eb5a:	2200      	movs	r2, #0
    eb5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    eb5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eb60:	3301      	adds	r3, #1
    eb62:	63fb      	str	r3, [r7, #60]	; 0x3c
    eb64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eb66:	2b0b      	cmp	r3, #11
    eb68:	ddf2      	ble.n	eb50 <tcc_init+0x1ac>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    eb6a:	68fb      	ldr	r3, [r7, #12]
    eb6c:	2200      	movs	r2, #0
    eb6e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    eb70:	68fb      	ldr	r3, [r7, #12]
    eb72:	2200      	movs	r2, #0
    eb74:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    eb76:	233b      	movs	r3, #59	; 0x3b
    eb78:	18fb      	adds	r3, r7, r3
    eb7a:	781a      	ldrb	r2, [r3, #0]
    eb7c:	4b5d      	ldr	r3, [pc, #372]	; (ecf4 <tcc_init+0x350>)
    eb7e:	0092      	lsls	r2, r2, #2
    eb80:	68f9      	ldr	r1, [r7, #12]
    eb82:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    eb84:	68fb      	ldr	r3, [r7, #12]
    eb86:	68ba      	ldr	r2, [r7, #8]
    eb88:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    eb8a:	687b      	ldr	r3, [r7, #4]
    eb8c:	22a0      	movs	r2, #160	; 0xa0
    eb8e:	5c99      	ldrb	r1, [r3, r2]
    eb90:	68fb      	ldr	r3, [r7, #12]
    eb92:	223c      	movs	r2, #60	; 0x3c
    eb94:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    eb96:	2314      	movs	r3, #20
    eb98:	18fb      	adds	r3, r7, r3
    eb9a:	0018      	movs	r0, r3
    eb9c:	4b56      	ldr	r3, [pc, #344]	; (ecf8 <tcc_init+0x354>)
    eb9e:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
    eba0:	687b      	ldr	r3, [r7, #4]
    eba2:	7a9a      	ldrb	r2, [r3, #10]
    eba4:	2314      	movs	r3, #20
    eba6:	18fb      	adds	r3, r7, r3
    eba8:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    ebaa:	233b      	movs	r3, #59	; 0x3b
    ebac:	18fb      	adds	r3, r7, r3
    ebae:	781b      	ldrb	r3, [r3, #0]
    ebb0:	4a52      	ldr	r2, [pc, #328]	; (ecfc <tcc_init+0x358>)
    ebb2:	5cd3      	ldrb	r3, [r2, r3]
    ebb4:	2214      	movs	r2, #20
    ebb6:	18ba      	adds	r2, r7, r2
    ebb8:	0011      	movs	r1, r2
    ebba:	0018      	movs	r0, r3
    ebbc:	4b50      	ldr	r3, [pc, #320]	; (ed00 <tcc_init+0x35c>)
    ebbe:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    ebc0:	233b      	movs	r3, #59	; 0x3b
    ebc2:	18fb      	adds	r3, r7, r3
    ebc4:	781b      	ldrb	r3, [r3, #0]
    ebc6:	4a4d      	ldr	r2, [pc, #308]	; (ecfc <tcc_init+0x358>)
    ebc8:	5cd3      	ldrb	r3, [r2, r3]
    ebca:	0018      	movs	r0, r3
    ebcc:	4b4d      	ldr	r3, [pc, #308]	; (ed04 <tcc_init+0x360>)
    ebce:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    ebd0:	2300      	movs	r3, #0
    ebd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    ebd4:	e02d      	b.n	ec32 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
    ebd6:	687a      	ldr	r2, [r7, #4]
    ebd8:	2198      	movs	r1, #152	; 0x98
    ebda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ebdc:	18d3      	adds	r3, r2, r3
    ebde:	185b      	adds	r3, r3, r1
    ebe0:	781b      	ldrb	r3, [r3, #0]
    ebe2:	2201      	movs	r2, #1
    ebe4:	4053      	eors	r3, r2
    ebe6:	b2db      	uxtb	r3, r3
    ebe8:	2b00      	cmp	r3, #0
    ebea:	d11e      	bne.n	ec2a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
    ebec:	2310      	movs	r3, #16
    ebee:	18fb      	adds	r3, r7, r3
    ebf0:	0018      	movs	r0, r3
    ebf2:	4b45      	ldr	r3, [pc, #276]	; (ed08 <tcc_init+0x364>)
    ebf4:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    ebf6:	687b      	ldr	r3, [r7, #4]
    ebf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ebfa:	321e      	adds	r2, #30
    ebfc:	0092      	lsls	r2, r2, #2
    ebfe:	58d3      	ldr	r3, [r2, r3]
    ec00:	b2da      	uxtb	r2, r3
    ec02:	2310      	movs	r3, #16
    ec04:	18fb      	adds	r3, r7, r3
    ec06:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    ec08:	2310      	movs	r3, #16
    ec0a:	18fb      	adds	r3, r7, r3
    ec0c:	2201      	movs	r2, #1
    ec0e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
    ec10:	687b      	ldr	r3, [r7, #4]
    ec12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ec14:	3216      	adds	r2, #22
    ec16:	0092      	lsls	r2, r2, #2
    ec18:	58d3      	ldr	r3, [r2, r3]
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    ec1a:	b2db      	uxtb	r3, r3
    ec1c:	2210      	movs	r2, #16
    ec1e:	18ba      	adds	r2, r7, r2
    ec20:	0011      	movs	r1, r2
    ec22:	0018      	movs	r0, r3
    ec24:	4b39      	ldr	r3, [pc, #228]	; (ed0c <tcc_init+0x368>)
    ec26:	4798      	blx	r3
    ec28:	e000      	b.n	ec2c <tcc_init+0x288>

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
    ec2a:	46c0      	nop			; (mov r8, r8)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    ec2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec2e:	3301      	adds	r3, #1
    ec30:	63fb      	str	r3, [r7, #60]	; 0x3c
    ec32:	233b      	movs	r3, #59	; 0x3b
    ec34:	18fb      	adds	r3, r7, r3
    ec36:	781b      	ldrb	r3, [r3, #0]
    ec38:	4a28      	ldr	r2, [pc, #160]	; (ecdc <tcc_init+0x338>)
    ec3a:	5cd3      	ldrb	r3, [r2, r3]
    ec3c:	1e1a      	subs	r2, r3, #0
    ec3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ec40:	429a      	cmp	r2, r3
    ec42:	dcc8      	bgt.n	ebd6 <tcc_init+0x232>
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    ec44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    ec46:	68bb      	ldr	r3, [r7, #8]
    ec48:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    ec4a:	46c0      	nop			; (mov r8, r8)
    ec4c:	68bb      	ldr	r3, [r7, #8]
    ec4e:	689b      	ldr	r3, [r3, #8]
    ec50:	2204      	movs	r2, #4
    ec52:	4013      	ands	r3, r2
    ec54:	d1fa      	bne.n	ec4c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    ec56:	68bb      	ldr	r3, [r7, #8]
    ec58:	22ff      	movs	r2, #255	; 0xff
    ec5a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    ec5c:	46c0      	nop			; (mov r8, r8)
    ec5e:	68bb      	ldr	r3, [r7, #8]
    ec60:	689b      	ldr	r3, [r3, #8]
    ec62:	2204      	movs	r2, #4
    ec64:	4013      	ands	r3, r2
    ec66:	d1fa      	bne.n	ec5e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    ec68:	232b      	movs	r3, #43	; 0x2b
    ec6a:	18fb      	adds	r3, r7, r3
    ec6c:	781a      	ldrb	r2, [r3, #0]
    ec6e:	68bb      	ldr	r3, [r7, #8]
    ec70:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
    ec72:	2320      	movs	r3, #32
    ec74:	18fb      	adds	r3, r7, r3
    ec76:	681a      	ldr	r2, [r3, #0]
    ec78:	68bb      	ldr	r3, [r7, #8]
    ec7a:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
    ec7c:	2320      	movs	r3, #32
    ec7e:	18fb      	adds	r3, r7, r3
    ec80:	685a      	ldr	r2, [r3, #4]
    ec82:	68bb      	ldr	r3, [r7, #8]
    ec84:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
    ec86:	69fa      	ldr	r2, [r7, #28]
    ec88:	68bb      	ldr	r3, [r7, #8]
    ec8a:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    ec8c:	46c0      	nop			; (mov r8, r8)
    ec8e:	68bb      	ldr	r3, [r7, #8]
    ec90:	689b      	ldr	r3, [r3, #8]
    ec92:	4a1f      	ldr	r2, [pc, #124]	; (ed10 <tcc_init+0x36c>)
    ec94:	4013      	ands	r3, r2
    ec96:	d1fa      	bne.n	ec8e <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    ec98:	69ba      	ldr	r2, [r7, #24]
    ec9a:	68bb      	ldr	r3, [r7, #8]
    ec9c:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    ec9e:	46c0      	nop			; (mov r8, r8)
    eca0:	68bb      	ldr	r3, [r7, #8]
    eca2:	689b      	ldr	r3, [r3, #8]
    eca4:	2210      	movs	r2, #16
    eca6:	4013      	ands	r3, r2
    eca8:	d1fa      	bne.n	eca0 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    ecaa:	687b      	ldr	r3, [r7, #4]
    ecac:	681a      	ldr	r2, [r3, #0]
    ecae:	68bb      	ldr	r3, [r7, #8]
    ecb0:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    ecb2:	46c0      	nop			; (mov r8, r8)
    ecb4:	68bb      	ldr	r3, [r7, #8]
    ecb6:	689b      	ldr	r3, [r3, #8]
    ecb8:	4a16      	ldr	r2, [pc, #88]	; (ed14 <tcc_init+0x370>)
    ecba:	4013      	ands	r3, r2
    ecbc:	d1fa      	bne.n	ecb4 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    ecbe:	687b      	ldr	r3, [r7, #4]
    ecc0:	685a      	ldr	r2, [r3, #4]
    ecc2:	68bb      	ldr	r3, [r7, #8]
    ecc4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    ecc6:	2300      	movs	r3, #0
    ecc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    ecca:	e03f      	b.n	ed4c <tcc_init+0x3a8>
    eccc:	0000e30d 	.word	0x0000e30d
    ecd0:	000193d8 	.word	0x000193d8
    ecd4:	0000e289 	.word	0x0000e289
    ecd8:	000193e4 	.word	0x000193e4
    ecdc:	000193f4 	.word	0x000193f4
    ece0:	0000e619 	.word	0x0000e619
    ece4:	0000e6bd 	.word	0x0000e6bd
    ece8:	0000e719 	.word	0x0000e719
    ecec:	0000e835 	.word	0x0000e835
    ecf0:	0000e90d 	.word	0x0000e90d
    ecf4:	200003a8 	.word	0x200003a8
    ecf8:	0000e271 	.word	0x0000e271
    ecfc:	000193d4 	.word	0x000193d4
    ed00:	000150ed 	.word	0x000150ed
    ed04:	00015131 	.word	0x00015131
    ed08:	0000e2e5 	.word	0x0000e2e5
    ed0c:	000153d9 	.word	0x000153d9
    ed10:	00020040 	.word	0x00020040
    ed14:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    ed18:	46c0      	nop			; (mov r8, r8)
    ed1a:	68bb      	ldr	r3, [r7, #8]
    ed1c:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    ed1e:	4912      	ldr	r1, [pc, #72]	; (ed68 <tcc_init+0x3c4>)
    ed20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ed22:	4091      	lsls	r1, r2
    ed24:	000a      	movs	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
    ed26:	4013      	ands	r3, r2
    ed28:	d1f7      	bne.n	ed1a <tcc_init+0x376>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    ed2a:	687a      	ldr	r2, [r7, #4]
    ed2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ed2e:	3306      	adds	r3, #6
    ed30:	009b      	lsls	r3, r3, #2
    ed32:	18d3      	adds	r3, r2, r3
    ed34:	3304      	adds	r3, #4
    ed36:	681a      	ldr	r2, [r3, #0]
    ed38:	68b9      	ldr	r1, [r7, #8]
    ed3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ed3c:	3310      	adds	r3, #16
    ed3e:	009b      	lsls	r3, r3, #2
    ed40:	18cb      	adds	r3, r1, r3
    ed42:	3304      	adds	r3, #4
    ed44:	601a      	str	r2, [r3, #0]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    ed46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ed48:	3301      	adds	r3, #1
    ed4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ed4c:	233b      	movs	r3, #59	; 0x3b
    ed4e:	18fb      	adds	r3, r7, r3
    ed50:	781b      	ldrb	r3, [r3, #0]
    ed52:	4a06      	ldr	r2, [pc, #24]	; (ed6c <tcc_init+0x3c8>)
    ed54:	5cd3      	ldrb	r3, [r2, r3]
    ed56:	1e1a      	subs	r2, r3, #0
    ed58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ed5a:	429a      	cmp	r2, r3
    ed5c:	dcdc      	bgt.n	ed18 <tcc_init+0x374>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    ed5e:	2300      	movs	r3, #0
}
    ed60:	0018      	movs	r0, r3
    ed62:	46bd      	mov	sp, r7
    ed64:	b011      	add	sp, #68	; 0x44
    ed66:	bd90      	pop	{r4, r7, pc}
    ed68:	00080100 	.word	0x00080100
    ed6c:	000193f0 	.word	0x000193f0

0000ed70 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    ed70:	b580      	push	{r7, lr}
    ed72:	b082      	sub	sp, #8
    ed74:	af00      	add	r7, sp, #0
    ed76:	0002      	movs	r2, r0
    ed78:	1dfb      	adds	r3, r7, #7
    ed7a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ed7c:	4b06      	ldr	r3, [pc, #24]	; (ed98 <system_interrupt_enable+0x28>)
    ed7e:	1dfa      	adds	r2, r7, #7
    ed80:	7812      	ldrb	r2, [r2, #0]
    ed82:	0011      	movs	r1, r2
    ed84:	221f      	movs	r2, #31
    ed86:	400a      	ands	r2, r1
    ed88:	2101      	movs	r1, #1
    ed8a:	4091      	lsls	r1, r2
    ed8c:	000a      	movs	r2, r1
    ed8e:	601a      	str	r2, [r3, #0]
}
    ed90:	46c0      	nop			; (mov r8, r8)
    ed92:	46bd      	mov	sp, r7
    ed94:	b002      	add	sp, #8
    ed96:	bd80      	pop	{r7, pc}
    ed98:	e000e100 	.word	0xe000e100

0000ed9c <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
    ed9c:	b580      	push	{r7, lr}
    ed9e:	b082      	sub	sp, #8
    eda0:	af00      	add	r7, sp, #0
    eda2:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    eda4:	4a04      	ldr	r2, [pc, #16]	; (edb8 <_tcc_interrupt_get_interrupt_vector+0x1c>)
    eda6:	687b      	ldr	r3, [r7, #4]
    eda8:	18d3      	adds	r3, r2, r3
    edaa:	781b      	ldrb	r3, [r3, #0]
    edac:	b25b      	sxtb	r3, r3
}
    edae:	0018      	movs	r0, r3
    edb0:	46bd      	mov	sp, r7
    edb2:	b002      	add	sp, #8
    edb4:	bd80      	pop	{r7, pc}
    edb6:	46c0      	nop			; (mov r8, r8)
    edb8:	20000004 	.word	0x20000004

0000edbc <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
    edbc:	b580      	push	{r7, lr}
    edbe:	b084      	sub	sp, #16
    edc0:	af00      	add	r7, sp, #0
    edc2:	60f8      	str	r0, [r7, #12]
    edc4:	60b9      	str	r1, [r7, #8]
    edc6:	1dfb      	adds	r3, r7, #7
    edc8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    edca:	1dfb      	adds	r3, r7, #7
    edcc:	781b      	ldrb	r3, [r3, #0]
    edce:	68fa      	ldr	r2, [r7, #12]
    edd0:	009b      	lsls	r3, r3, #2
    edd2:	18d3      	adds	r3, r2, r3
    edd4:	3304      	adds	r3, #4
    edd6:	68ba      	ldr	r2, [r7, #8]
    edd8:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    edda:	68fb      	ldr	r3, [r7, #12]
    eddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    edde:	1dfb      	adds	r3, r7, #7
    ede0:	7819      	ldrb	r1, [r3, #0]
    ede2:	4b05      	ldr	r3, [pc, #20]	; (edf8 <tcc_register_callback+0x3c>)
    ede4:	0089      	lsls	r1, r1, #2
    ede6:	58cb      	ldr	r3, [r1, r3]
    ede8:	431a      	orrs	r2, r3
    edea:	68fb      	ldr	r3, [r7, #12]
    edec:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
    edee:	2300      	movs	r3, #0
}
    edf0:	0018      	movs	r0, r3
    edf2:	46bd      	mov	sp, r7
    edf4:	b004      	add	sp, #16
    edf6:	bd80      	pop	{r7, pc}
    edf8:	000193f8 	.word	0x000193f8

0000edfc <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    edfc:	b580      	push	{r7, lr}
    edfe:	b082      	sub	sp, #8
    ee00:	af00      	add	r7, sp, #0
    ee02:	6078      	str	r0, [r7, #4]
    ee04:	000a      	movs	r2, r1
    ee06:	1cfb      	adds	r3, r7, #3
    ee08:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    ee0a:	687b      	ldr	r3, [r7, #4]
    ee0c:	681b      	ldr	r3, [r3, #0]
    ee0e:	0018      	movs	r0, r3
    ee10:	4b0f      	ldr	r3, [pc, #60]	; (ee50 <tcc_enable_callback+0x54>)
    ee12:	4798      	blx	r3
    ee14:	0003      	movs	r3, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
    ee16:	0018      	movs	r0, r3
    ee18:	4b0e      	ldr	r3, [pc, #56]	; (ee54 <tcc_enable_callback+0x58>)
    ee1a:	4798      	blx	r3
    ee1c:	0003      	movs	r3, r0
    ee1e:	0018      	movs	r0, r3
    ee20:	4b0d      	ldr	r3, [pc, #52]	; (ee58 <tcc_enable_callback+0x5c>)
    ee22:	4798      	blx	r3
			_tcc_get_inst_index(module->hw)));

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    ee24:	687b      	ldr	r3, [r7, #4]
    ee26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ee28:	1cfb      	adds	r3, r7, #3
    ee2a:	7819      	ldrb	r1, [r3, #0]
    ee2c:	4b0b      	ldr	r3, [pc, #44]	; (ee5c <tcc_enable_callback+0x60>)
    ee2e:	0089      	lsls	r1, r1, #2
    ee30:	58cb      	ldr	r3, [r1, r3]
    ee32:	431a      	orrs	r2, r3
    ee34:	687b      	ldr	r3, [r7, #4]
    ee36:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    ee38:	687b      	ldr	r3, [r7, #4]
    ee3a:	681b      	ldr	r3, [r3, #0]
    ee3c:	1cfa      	adds	r2, r7, #3
    ee3e:	7811      	ldrb	r1, [r2, #0]
    ee40:	4a06      	ldr	r2, [pc, #24]	; (ee5c <tcc_enable_callback+0x60>)
    ee42:	0089      	lsls	r1, r1, #2
    ee44:	588a      	ldr	r2, [r1, r2]
    ee46:	629a      	str	r2, [r3, #40]	; 0x28
}
    ee48:	46c0      	nop			; (mov r8, r8)
    ee4a:	46bd      	mov	sp, r7
    ee4c:	b002      	add	sp, #8
    ee4e:	bd80      	pop	{r7, pc}
    ee50:	0000e30d 	.word	0x0000e30d
    ee54:	0000ed9d 	.word	0x0000ed9d
    ee58:	0000ed71 	.word	0x0000ed71
    ee5c:	000193f8 	.word	0x000193f8

0000ee60 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    ee60:	b580      	push	{r7, lr}
    ee62:	af00      	add	r7, sp, #0
    ee64:	2000      	movs	r0, #0
    ee66:	4b02      	ldr	r3, [pc, #8]	; (ee70 <TCC0_Handler+0x10>)
    ee68:	4798      	blx	r3
    ee6a:	46c0      	nop			; (mov r8, r8)
    ee6c:	46bd      	mov	sp, r7
    ee6e:	bd80      	pop	{r7, pc}
    ee70:	0000ee9d 	.word	0x0000ee9d

0000ee74 <TCC1_Handler>:
    ee74:	b580      	push	{r7, lr}
    ee76:	af00      	add	r7, sp, #0
    ee78:	2001      	movs	r0, #1
    ee7a:	4b02      	ldr	r3, [pc, #8]	; (ee84 <TCC1_Handler+0x10>)
    ee7c:	4798      	blx	r3
    ee7e:	46c0      	nop			; (mov r8, r8)
    ee80:	46bd      	mov	sp, r7
    ee82:	bd80      	pop	{r7, pc}
    ee84:	0000ee9d 	.word	0x0000ee9d

0000ee88 <TCC2_Handler>:
    ee88:	b580      	push	{r7, lr}
    ee8a:	af00      	add	r7, sp, #0
    ee8c:	2002      	movs	r0, #2
    ee8e:	4b02      	ldr	r3, [pc, #8]	; (ee98 <TCC2_Handler+0x10>)
    ee90:	4798      	blx	r3
    ee92:	46c0      	nop			; (mov r8, r8)
    ee94:	46bd      	mov	sp, r7
    ee96:	bd80      	pop	{r7, pc}
    ee98:	0000ee9d 	.word	0x0000ee9d

0000ee9c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    ee9c:	b580      	push	{r7, lr}
    ee9e:	b086      	sub	sp, #24
    eea0:	af00      	add	r7, sp, #0
    eea2:	0002      	movs	r2, r0
    eea4:	1dfb      	adds	r3, r7, #7
    eea6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    eea8:	1dfb      	adds	r3, r7, #7
    eeaa:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    eeac:	4b18      	ldr	r3, [pc, #96]	; (ef10 <_tcc_interrupt_handler+0x74>)
    eeae:	0092      	lsls	r2, r2, #2
    eeb0:	58d3      	ldr	r3, [r2, r3]
    eeb2:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    eeb4:	693b      	ldr	r3, [r7, #16]
    eeb6:	681b      	ldr	r3, [r3, #0]
    eeb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    eeba:	693b      	ldr	r3, [r7, #16]
    eebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    eebe:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    eec0:	693b      	ldr	r3, [r7, #16]
    eec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    eec4:	4013      	ands	r3, r2
    eec6:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    eec8:	2300      	movs	r3, #0
    eeca:	617b      	str	r3, [r7, #20]
    eecc:	e019      	b.n	ef02 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    eece:	4b11      	ldr	r3, [pc, #68]	; (ef14 <_tcc_interrupt_handler+0x78>)
    eed0:	697a      	ldr	r2, [r7, #20]
    eed2:	0092      	lsls	r2, r2, #2
    eed4:	58d3      	ldr	r3, [r2, r3]
    eed6:	68fa      	ldr	r2, [r7, #12]
    eed8:	4013      	ands	r3, r2
    eeda:	d00f      	beq.n	eefc <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    eedc:	693a      	ldr	r2, [r7, #16]
    eede:	697b      	ldr	r3, [r7, #20]
    eee0:	009b      	lsls	r3, r3, #2
    eee2:	18d3      	adds	r3, r2, r3
    eee4:	3304      	adds	r3, #4
    eee6:	681b      	ldr	r3, [r3, #0]
    eee8:	693a      	ldr	r2, [r7, #16]
    eeea:	0010      	movs	r0, r2
    eeec:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    eeee:	693b      	ldr	r3, [r7, #16]
    eef0:	681b      	ldr	r3, [r3, #0]
    eef2:	4a08      	ldr	r2, [pc, #32]	; (ef14 <_tcc_interrupt_handler+0x78>)
    eef4:	6979      	ldr	r1, [r7, #20]
    eef6:	0089      	lsls	r1, r1, #2
    eef8:	588a      	ldr	r2, [r1, r2]
    eefa:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    eefc:	697b      	ldr	r3, [r7, #20]
    eefe:	3301      	adds	r3, #1
    ef00:	617b      	str	r3, [r7, #20]
    ef02:	697b      	ldr	r3, [r7, #20]
    ef04:	2b0b      	cmp	r3, #11
    ef06:	dde2      	ble.n	eece <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    ef08:	46c0      	nop			; (mov r8, r8)
    ef0a:	46bd      	mov	sp, r7
    ef0c:	b006      	add	sp, #24
    ef0e:	bd80      	pop	{r7, pc}
    ef10:	200003a8 	.word	0x200003a8
    ef14:	000193f8 	.word	0x000193f8

0000ef18 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
    ef18:	b580      	push	{r7, lr}
    ef1a:	b082      	sub	sp, #8
    ef1c:	af00      	add	r7, sp, #0
    ef1e:	6078      	str	r0, [r7, #4]
	config->port = 80;
    ef20:	687b      	ldr	r3, [r7, #4]
    ef22:	2250      	movs	r2, #80	; 0x50
    ef24:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
    ef26:	687b      	ldr	r3, [r7, #4]
    ef28:	2200      	movs	r2, #0
    ef2a:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
    ef2c:	687b      	ldr	r3, [r7, #4]
    ef2e:	4a0b      	ldr	r2, [pc, #44]	; (ef5c <http_client_get_config_defaults+0x44>)
    ef30:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
    ef32:	687b      	ldr	r3, [r7, #4]
    ef34:	2200      	movs	r2, #0
    ef36:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
    ef38:	687b      	ldr	r3, [r7, #4]
    ef3a:	2200      	movs	r2, #0
    ef3c:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
    ef3e:	687b      	ldr	r3, [r7, #4]
    ef40:	2280      	movs	r2, #128	; 0x80
    ef42:	0052      	lsls	r2, r2, #1
    ef44:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    ef46:	687b      	ldr	r3, [r7, #4]
    ef48:	2252      	movs	r2, #82	; 0x52
    ef4a:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    ef4c:	687b      	ldr	r3, [r7, #4]
    ef4e:	4a04      	ldr	r2, [pc, #16]	; (ef60 <http_client_get_config_defaults+0x48>)
    ef50:	619a      	str	r2, [r3, #24]
}
    ef52:	46c0      	nop			; (mov r8, r8)
    ef54:	46bd      	mov	sp, r7
    ef56:	b002      	add	sp, #8
    ef58:	bd80      	pop	{r7, pc}
    ef5a:	46c0      	nop			; (mov r8, r8)
    ef5c:	00004e20 	.word	0x00004e20
    ef60:	00019428 	.word	0x00019428

0000ef64 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
    ef64:	b590      	push	{r4, r7, lr}
    ef66:	b083      	sub	sp, #12
    ef68:	af00      	add	r7, sp, #0
    ef6a:	6078      	str	r0, [r7, #4]
    ef6c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
    ef6e:	687b      	ldr	r3, [r7, #4]
    ef70:	2b00      	cmp	r3, #0
    ef72:	d002      	beq.n	ef7a <http_client_init+0x16>
    ef74:	683b      	ldr	r3, [r7, #0]
    ef76:	2b00      	cmp	r3, #0
    ef78:	d102      	bne.n	ef80 <http_client_init+0x1c>
		return -EINVAL;
    ef7a:	2316      	movs	r3, #22
    ef7c:	425b      	negs	r3, r3
    ef7e:	e058      	b.n	f032 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
    ef80:	683b      	ldr	r3, [r7, #0]
    ef82:	691b      	ldr	r3, [r3, #16]
    ef84:	2b00      	cmp	r3, #0
    ef86:	d102      	bne.n	ef8e <http_client_init+0x2a>
		return -EINVAL;
    ef88:	2316      	movs	r3, #22
    ef8a:	425b      	negs	r3, r3
    ef8c:	e051      	b.n	f032 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
    ef8e:	683b      	ldr	r3, [r7, #0]
    ef90:	685b      	ldr	r3, [r3, #4]
    ef92:	2b00      	cmp	r3, #0
    ef94:	d102      	bne.n	ef9c <http_client_init+0x38>
		return -EINVAL;
    ef96:	2316      	movs	r3, #22
    ef98:	425b      	negs	r3, r3
    ef9a:	e04a      	b.n	f032 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    ef9c:	683b      	ldr	r3, [r7, #0]
    ef9e:	695b      	ldr	r3, [r3, #20]
    efa0:	2b51      	cmp	r3, #81	; 0x51
    efa2:	d802      	bhi.n	efaa <http_client_init+0x46>
		return -EINVAL;
    efa4:	2316      	movs	r3, #22
    efa6:	425b      	negs	r3, r3
    efa8:	e043      	b.n	f032 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
    efaa:	687b      	ldr	r3, [r7, #4]
    efac:	22e8      	movs	r2, #232	; 0xe8
    efae:	2100      	movs	r1, #0
    efb0:	0018      	movs	r0, r3
    efb2:	4b22      	ldr	r3, [pc, #136]	; (f03c <http_client_init+0xd8>)
    efb4:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    efb6:	687b      	ldr	r3, [r7, #4]
    efb8:	3350      	adds	r3, #80	; 0x50
    efba:	6839      	ldr	r1, [r7, #0]
    efbc:	221c      	movs	r2, #28
    efbe:	0018      	movs	r0, r3
    efc0:	4b1f      	ldr	r3, [pc, #124]	; (f040 <http_client_init+0xdc>)
    efc2:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
    efc4:	687b      	ldr	r3, [r7, #4]
    efc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    efc8:	2b00      	cmp	r3, #0
    efca:	d115      	bne.n	eff8 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    efcc:	683b      	ldr	r3, [r7, #0]
    efce:	691b      	ldr	r3, [r3, #16]
    efd0:	0018      	movs	r0, r3
    efd2:	4b1c      	ldr	r3, [pc, #112]	; (f044 <http_client_init+0xe0>)
    efd4:	4798      	blx	r3
    efd6:	0003      	movs	r3, r0
    efd8:	001a      	movs	r2, r3
    efda:	687b      	ldr	r3, [r7, #4]
    efdc:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    efde:	687b      	ldr	r3, [r7, #4]
    efe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    efe2:	2b00      	cmp	r3, #0
    efe4:	d102      	bne.n	efec <http_client_init+0x88>
			return -ENOMEM;
    efe6:	230c      	movs	r3, #12
    efe8:	425b      	negs	r3, r3
    efea:	e022      	b.n	f032 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
    efec:	687b      	ldr	r3, [r7, #4]
    efee:	2241      	movs	r2, #65	; 0x41
    eff0:	5c99      	ldrb	r1, [r3, r2]
    eff2:	2004      	movs	r0, #4
    eff4:	4301      	orrs	r1, r0
    eff6:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
    eff8:	683b      	ldr	r3, [r7, #0]
    effa:	891b      	ldrh	r3, [r3, #8]
    effc:	2b00      	cmp	r3, #0
    effe:	d010      	beq.n	f022 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    f000:	683b      	ldr	r3, [r7, #0]
    f002:	6858      	ldr	r0, [r3, #4]
    f004:	687a      	ldr	r2, [r7, #4]
    f006:	4910      	ldr	r1, [pc, #64]	; (f048 <http_client_init+0xe4>)
    f008:	2300      	movs	r3, #0
    f00a:	4c10      	ldr	r4, [pc, #64]	; (f04c <http_client_init+0xe8>)
    f00c:	47a0      	blx	r4
    f00e:	0002      	movs	r2, r0
    f010:	687b      	ldr	r3, [r7, #4]
    f012:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
    f014:	687b      	ldr	r3, [r7, #4]
    f016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    f018:	2b00      	cmp	r3, #0
    f01a:	da02      	bge.n	f022 <http_client_init+0xbe>
			return -ENOSPC;
    f01c:	231c      	movs	r3, #28
    f01e:	425b      	negs	r3, r3
    f020:	e007      	b.n	f032 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
    f022:	687b      	ldr	r3, [r7, #4]
    f024:	2200      	movs	r2, #0
    f026:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    f028:	687b      	ldr	r3, [r7, #4]
    f02a:	22d8      	movs	r2, #216	; 0xd8
    f02c:	2100      	movs	r1, #0
    f02e:	5099      	str	r1, [r3, r2]

	return 0;
    f030:	2300      	movs	r3, #0
}
    f032:	0018      	movs	r0, r3
    f034:	46bd      	mov	sp, r7
    f036:	b003      	add	sp, #12
    f038:	bd90      	pop	{r4, r7, pc}
    f03a:	46c0      	nop			; (mov r8, r8)
    f03c:	00016c69 	.word	0x00016c69
    f040:	00016c2d 	.word	0x00016c2d
    f044:	00016c05 	.word	0x00016c05
    f048:	0000f315 	.word	0x0000f315
    f04c:	0001099d 	.word	0x0001099d

0000f050 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
    f050:	b580      	push	{r7, lr}
    f052:	b082      	sub	sp, #8
    f054:	af00      	add	r7, sp, #0
    f056:	6078      	str	r0, [r7, #4]
    f058:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
    f05a:	687b      	ldr	r3, [r7, #4]
    f05c:	2b00      	cmp	r3, #0
    f05e:	d102      	bne.n	f066 <http_client_register_callback+0x16>
		return -EINVAL;
    f060:	2316      	movs	r3, #22
    f062:	425b      	negs	r3, r3
    f064:	e003      	b.n	f06e <http_client_register_callback+0x1e>
	}

	module->cb = callback;
    f066:	687b      	ldr	r3, [r7, #4]
    f068:	683a      	ldr	r2, [r7, #0]
    f06a:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
    f06c:	2300      	movs	r3, #0
}
    f06e:	0018      	movs	r0, r3
    f070:	46bd      	mov	sp, r7
    f072:	b002      	add	sp, #8
    f074:	bd80      	pop	{r7, pc}
    f076:	46c0      	nop			; (mov r8, r8)

0000f078 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
    f078:	b580      	push	{r7, lr}
    f07a:	b082      	sub	sp, #8
    f07c:	af00      	add	r7, sp, #0
    f07e:	6078      	str	r0, [r7, #4]
	switch (err) {
    f080:	687b      	ldr	r3, [r7, #4]
    f082:	330e      	adds	r3, #14
    f084:	2b0e      	cmp	r3, #14
    f086:	d825      	bhi.n	f0d4 <_hwerr_to_stderr+0x5c>
    f088:	009a      	lsls	r2, r3, #2
    f08a:	4b18      	ldr	r3, [pc, #96]	; (f0ec <_hwerr_to_stderr+0x74>)
    f08c:	18d3      	adds	r3, r2, r3
    f08e:	681b      	ldr	r3, [r3, #0]
    f090:	469f      	mov	pc, r3
		case 0:
			return -EIO;
    f092:	2305      	movs	r3, #5
    f094:	425b      	negs	r3, r3
    f096:	e024      	b.n	f0e2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
    f098:	2302      	movs	r3, #2
    f09a:	425b      	negs	r3, r3
    f09c:	e021      	b.n	f0e2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
    f09e:	2370      	movs	r3, #112	; 0x70
    f0a0:	425b      	negs	r3, r3
    f0a2:	e01e      	b.n	f0e2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
    f0a4:	230c      	movs	r3, #12
    f0a6:	425b      	negs	r3, r3
    f0a8:	e01b      	b.n	f0e2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
    f0aa:	2316      	movs	r3, #22
    f0ac:	425b      	negs	r3, r3
    f0ae:	e018      	b.n	f0e2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
    f0b0:	230c      	movs	r3, #12
    f0b2:	425b      	negs	r3, r3
    f0b4:	e015      	b.n	f0e2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
    f0b6:	2305      	movs	r3, #5
    f0b8:	425b      	negs	r3, r3
    f0ba:	e012      	b.n	f0e2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
    f0bc:	2379      	movs	r3, #121	; 0x79
    f0be:	425b      	negs	r3, r3
    f0c0:	e00f      	b.n	f0e2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
    f0c2:	2368      	movs	r3, #104	; 0x68
    f0c4:	425b      	negs	r3, r3
    f0c6:	e00c      	b.n	f0e2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
    f0c8:	230b      	movs	r3, #11
    f0ca:	425b      	negs	r3, r3
    f0cc:	e009      	b.n	f0e2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
    f0ce:	2310      	movs	r3, #16
    f0d0:	425b      	negs	r3, r3
    f0d2:	e006      	b.n	f0e2 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
    f0d4:	687b      	ldr	r3, [r7, #4]
    f0d6:	2b00      	cmp	r3, #0
    f0d8:	da02      	bge.n	f0e0 <_hwerr_to_stderr+0x68>
				return -EIO;
    f0da:	2305      	movs	r3, #5
    f0dc:	425b      	negs	r3, r3
    f0de:	e000      	b.n	f0e2 <_hwerr_to_stderr+0x6a>
			}
			return 0;
    f0e0:	2300      	movs	r3, #0
	}
}
    f0e2:	0018      	movs	r0, r3
    f0e4:	46bd      	mov	sp, r7
    f0e6:	b002      	add	sp, #8
    f0e8:	bd80      	pop	{r7, pc}
    f0ea:	46c0      	nop			; (mov r8, r8)
    f0ec:	00019564 	.word	0x00019564

0000f0f0 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    f0f0:	b580      	push	{r7, lr}
    f0f2:	b08a      	sub	sp, #40	; 0x28
    f0f4:	af00      	add	r7, sp, #0
    f0f6:	603a      	str	r2, [r7, #0]
    f0f8:	1dfb      	adds	r3, r7, #7
    f0fa:	1c02      	adds	r2, r0, #0
    f0fc:	701a      	strb	r2, [r3, #0]
    f0fe:	1dbb      	adds	r3, r7, #6
    f100:	1c0a      	adds	r2, r1, #0
    f102:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
    f104:	1dfb      	adds	r3, r7, #7
    f106:	2200      	movs	r2, #0
    f108:	569a      	ldrsb	r2, [r3, r2]
    f10a:	4b4b      	ldr	r3, [pc, #300]	; (f238 <http_client_socket_event_handler+0x148>)
    f10c:	0092      	lsls	r2, r2, #2
    f10e:	58d3      	ldr	r3, [r2, r3]
    f110:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
    f112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f114:	2b00      	cmp	r3, #0
    f116:	d100      	bne.n	f11a <http_client_socket_event_handler+0x2a>
    f118:	e08a      	b.n	f230 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
    f11a:	1dbb      	adds	r3, r7, #6
    f11c:	781b      	ldrb	r3, [r3, #0]
    f11e:	2b06      	cmp	r3, #6
    f120:	d040      	beq.n	f1a4 <http_client_socket_event_handler+0xb4>
    f122:	2b07      	cmp	r3, #7
    f124:	d060      	beq.n	f1e8 <http_client_socket_event_handler+0xf8>
    f126:	2b05      	cmp	r3, #5
    f128:	d000      	beq.n	f12c <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
    f12a:	e082      	b.n	f232 <http_client_socket_event_handler+0x142>
		return;
	}

	switch (msg_type) {
	case SOCKET_MSG_CONNECT:
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
    f12c:	683b      	ldr	r3, [r7, #0]
    f12e:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
    f130:	6a3b      	ldr	r3, [r7, #32]
    f132:	785b      	ldrb	r3, [r3, #1]
    f134:	b25b      	sxtb	r3, r3
    f136:	001a      	movs	r2, r3
    f138:	230c      	movs	r3, #12
    f13a:	18fb      	adds	r3, r7, r3
    f13c:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
    f13e:	6a3b      	ldr	r3, [r7, #32]
    f140:	785b      	ldrb	r3, [r3, #1]
    f142:	b25b      	sxtb	r3, r3
    f144:	2b00      	cmp	r3, #0
    f146:	da0c      	bge.n	f162 <http_client_socket_event_handler+0x72>
			/* Remove reference. */
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    f148:	6a3b      	ldr	r3, [r7, #32]
    f14a:	785b      	ldrb	r3, [r3, #1]
    f14c:	b25b      	sxtb	r3, r3
    f14e:	0018      	movs	r0, r3
    f150:	4b3a      	ldr	r3, [pc, #232]	; (f23c <http_client_socket_event_handler+0x14c>)
    f152:	4798      	blx	r3
    f154:	0002      	movs	r2, r0
    f156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f158:	0011      	movs	r1, r2
    f15a:	0018      	movs	r0, r3
    f15c:	4b38      	ldr	r3, [pc, #224]	; (f240 <http_client_socket_event_handler+0x150>)
    f15e:	4798      	blx	r3
    		/* Start receive packet. */
    		_http_client_recv_packet(module);
			/* Try to check the FSM. */
			_http_client_request(module);
		}
    	break;
    f160:	e067      	b.n	f232 <http_client_socket_event_handler+0x142>
    	if (msg_connect->s8Error < 0) {
			/* Remove reference. */
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
		} else {
			/* Send event to callback. */
			if (module->cb != NULL) {
    f162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f166:	2b00      	cmp	r3, #0
    f168:	d006      	beq.n	f178 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    f16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f16e:	220c      	movs	r2, #12
    f170:	18ba      	adds	r2, r7, r2
    f172:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f174:	2100      	movs	r1, #0
    f176:	4798      	blx	r3
			}
			module->req.state = STATE_REQ_SEND_HEADER;
    f178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f17a:	2203      	movs	r2, #3
    f17c:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Start timer. */
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    f17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f180:	6d58      	ldr	r0, [r3, #84]	; 0x54
    f182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f184:	6c99      	ldr	r1, [r3, #72]	; 0x48
    f186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f188:	2258      	movs	r2, #88	; 0x58
    f18a:	5a9b      	ldrh	r3, [r3, r2]
    f18c:	001a      	movs	r2, r3
    f18e:	4b2d      	ldr	r3, [pc, #180]	; (f244 <http_client_socket_event_handler+0x154>)
    f190:	4798      	blx	r3
    		/* Start receive packet. */
    		_http_client_recv_packet(module);
    f192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f194:	0018      	movs	r0, r3
    f196:	4b2c      	ldr	r3, [pc, #176]	; (f248 <http_client_socket_event_handler+0x158>)
    f198:	4798      	blx	r3
			/* Try to check the FSM. */
			_http_client_request(module);
    f19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f19c:	0018      	movs	r0, r3
    f19e:	4b2b      	ldr	r3, [pc, #172]	; (f24c <http_client_socket_event_handler+0x15c>)
    f1a0:	4798      	blx	r3
		}
    	break;
    f1a2:	e046      	b.n	f232 <http_client_socket_event_handler+0x142>
	case SOCKET_MSG_RECV:
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
    f1a4:	683b      	ldr	r3, [r7, #0]
    f1a6:	61fb      	str	r3, [r7, #28]
    	/* Start post processing. */
    	if (msg_recv->s16BufferSize > 0) {
    f1a8:	69fb      	ldr	r3, [r7, #28]
    f1aa:	2204      	movs	r2, #4
    f1ac:	5e9b      	ldrsh	r3, [r3, r2]
    f1ae:	2b00      	cmp	r3, #0
    f1b0:	dd09      	ble.n	f1c6 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    f1b2:	69fb      	ldr	r3, [r7, #28]
    f1b4:	2204      	movs	r2, #4
    f1b6:	5e9b      	ldrsh	r3, [r3, r2]
    f1b8:	001a      	movs	r2, r3
    f1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f1bc:	0011      	movs	r1, r2
    f1be:	0018      	movs	r0, r3
    f1c0:	4b23      	ldr	r3, [pc, #140]	; (f250 <http_client_socket_event_handler+0x160>)
    f1c2:	4798      	blx	r3
    f1c4:	e00b      	b.n	f1de <http_client_socket_event_handler+0xee>
		} else {
			/* Socket was occurred errors. Close this session. */
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    f1c6:	69fb      	ldr	r3, [r7, #28]
    f1c8:	2204      	movs	r2, #4
    f1ca:	5e9b      	ldrsh	r3, [r3, r2]
    f1cc:	0018      	movs	r0, r3
    f1ce:	4b1b      	ldr	r3, [pc, #108]	; (f23c <http_client_socket_event_handler+0x14c>)
    f1d0:	4798      	blx	r3
    f1d2:	0002      	movs	r2, r0
    f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f1d6:	0011      	movs	r1, r2
    f1d8:	0018      	movs	r0, r3
    f1da:	4b19      	ldr	r3, [pc, #100]	; (f240 <http_client_socket_event_handler+0x150>)
    f1dc:	4798      	blx	r3
		}
		/* COntinue to receive the packet. */
		_http_client_recv_packet(module);
    f1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f1e0:	0018      	movs	r0, r3
    f1e2:	4b19      	ldr	r3, [pc, #100]	; (f248 <http_client_socket_event_handler+0x158>)
    f1e4:	4798      	blx	r3
		break;
    f1e6:	e024      	b.n	f232 <http_client_socket_event_handler+0x142>
	case SOCKET_MSG_SEND:
		send_ret = *(int16_t*)msg_data;
    f1e8:	231a      	movs	r3, #26
    f1ea:	18fb      	adds	r3, r7, r3
    f1ec:	683a      	ldr	r2, [r7, #0]
    f1ee:	8812      	ldrh	r2, [r2, #0]
    f1f0:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
    f1f2:	231a      	movs	r3, #26
    f1f4:	18fb      	adds	r3, r7, r3
    f1f6:	2200      	movs	r2, #0
    f1f8:	5e9b      	ldrsh	r3, [r3, r2]
    f1fa:	2b00      	cmp	r3, #0
    f1fc:	da0d      	bge.n	f21a <http_client_socket_event_handler+0x12a>
			/* Send failed. */
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    f1fe:	231a      	movs	r3, #26
    f200:	18fb      	adds	r3, r7, r3
    f202:	2200      	movs	r2, #0
    f204:	5e9b      	ldrsh	r3, [r3, r2]
    f206:	0018      	movs	r0, r3
    f208:	4b0c      	ldr	r3, [pc, #48]	; (f23c <http_client_socket_event_handler+0x14c>)
    f20a:	4798      	blx	r3
    f20c:	0002      	movs	r2, r0
    f20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f210:	0011      	movs	r1, r2
    f212:	0018      	movs	r0, r3
    f214:	4b0a      	ldr	r3, [pc, #40]	; (f240 <http_client_socket_event_handler+0x150>)
    f216:	4798      	blx	r3
    f218:	e003      	b.n	f222 <http_client_socket_event_handler+0x132>
		} else {
			/* Try to check the FSM. */
    		_http_client_request(module);
    f21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f21c:	0018      	movs	r0, r3
    f21e:	4b0b      	ldr	r3, [pc, #44]	; (f24c <http_client_socket_event_handler+0x15c>)
    f220:	4798      	blx	r3
		}
		/* Disable sending flag. */
		module->sending = 0;
    f222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f224:	2241      	movs	r2, #65	; 0x41
    f226:	5c99      	ldrb	r1, [r3, r2]
    f228:	2001      	movs	r0, #1
    f22a:	4381      	bics	r1, r0
    f22c:	5499      	strb	r1, [r3, r2]
    	break;
    f22e:	e000      	b.n	f232 <http_client_socket_event_handler+0x142>

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
		return;
    f230:	46c0      	nop			; (mov r8, r8)
    	break;
	default:
		break;
	}

}
    f232:	46bd      	mov	sp, r7
    f234:	b00a      	add	sp, #40	; 0x28
    f236:	bd80      	pop	{r7, pc}
    f238:	200000b8 	.word	0x200000b8
    f23c:	0000f079 	.word	0x0000f079
    f240:	0000f6ed 	.word	0x0000f6ed
    f244:	00010a2d 	.word	0x00010a2d
    f248:	0000ff5d 	.word	0x0000ff5d
    f24c:	0000f841 	.word	0x0000f841
    f250:	0000ffc1 	.word	0x0000ffc1

0000f254 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    f254:	b580      	push	{r7, lr}
    f256:	b088      	sub	sp, #32
    f258:	af00      	add	r7, sp, #0
    f25a:	6078      	str	r0, [r7, #4]
    f25c:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
    f25e:	2300      	movs	r3, #0
    f260:	61fb      	str	r3, [r7, #28]
    f262:	e048      	b.n	f2f6 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
    f264:	4b27      	ldr	r3, [pc, #156]	; (f304 <http_client_socket_resolve_handler+0xb0>)
    f266:	69fa      	ldr	r2, [r7, #28]
    f268:	0092      	lsls	r2, r2, #2
    f26a:	58d3      	ldr	r3, [r2, r3]
    f26c:	2b00      	cmp	r3, #0
    f26e:	d03f      	beq.n	f2f0 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
    f270:	4b24      	ldr	r3, [pc, #144]	; (f304 <http_client_socket_resolve_handler+0xb0>)
    f272:	69fa      	ldr	r2, [r7, #28]
    f274:	0092      	lsls	r2, r2, #2
    f276:	58d3      	ldr	r3, [r2, r3]
    f278:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    f27a:	69bb      	ldr	r3, [r7, #24]
    f27c:	1c5a      	adds	r2, r3, #1
    f27e:	687b      	ldr	r3, [r7, #4]
    f280:	0011      	movs	r1, r2
    f282:	0018      	movs	r0, r3
    f284:	4b20      	ldr	r3, [pc, #128]	; (f308 <http_client_socket_resolve_handler+0xb4>)
    f286:	4798      	blx	r3
    f288:	1e03      	subs	r3, r0, #0
    f28a:	d131      	bne.n	f2f0 <http_client_socket_resolve_handler+0x9c>
    f28c:	69bb      	ldr	r3, [r7, #24]
    f28e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f290:	2b01      	cmp	r3, #1
    f292:	d12d      	bne.n	f2f0 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    f294:	683b      	ldr	r3, [r7, #0]
    f296:	2b00      	cmp	r3, #0
    f298:	d107      	bne.n	f2aa <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    f29a:	2376      	movs	r3, #118	; 0x76
    f29c:	425a      	negs	r2, r3
    f29e:	69bb      	ldr	r3, [r7, #24]
    f2a0:	0011      	movs	r1, r2
    f2a2:	0018      	movs	r0, r3
    f2a4:	4b19      	ldr	r3, [pc, #100]	; (f30c <http_client_socket_resolve_handler+0xb8>)
    f2a6:	4798      	blx	r3
					return;
    f2a8:	e028      	b.n	f2fc <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
    f2aa:	2308      	movs	r3, #8
    f2ac:	18fb      	adds	r3, r7, r3
    f2ae:	2202      	movs	r2, #2
    f2b0:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    f2b2:	69bb      	ldr	r3, [r7, #24]
    f2b4:	2250      	movs	r2, #80	; 0x50
    f2b6:	5a9b      	ldrh	r3, [r3, r2]
    f2b8:	021b      	lsls	r3, r3, #8
    f2ba:	b21a      	sxth	r2, r3
    f2bc:	69bb      	ldr	r3, [r7, #24]
    f2be:	2150      	movs	r1, #80	; 0x50
    f2c0:	5a5b      	ldrh	r3, [r3, r1]
    f2c2:	0a1b      	lsrs	r3, r3, #8
    f2c4:	b29b      	uxth	r3, r3
    f2c6:	b21b      	sxth	r3, r3
    f2c8:	4313      	orrs	r3, r2
    f2ca:	b21b      	sxth	r3, r3
    f2cc:	b29a      	uxth	r2, r3
    f2ce:	2308      	movs	r3, #8
    f2d0:	18fb      	adds	r3, r7, r3
    f2d2:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
    f2d4:	2308      	movs	r3, #8
    f2d6:	18fb      	adds	r3, r7, r3
    f2d8:	683a      	ldr	r2, [r7, #0]
    f2da:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    f2dc:	69bb      	ldr	r3, [r7, #24]
    f2de:	781b      	ldrb	r3, [r3, #0]
    f2e0:	b25b      	sxtb	r3, r3
    f2e2:	2208      	movs	r2, #8
    f2e4:	18b9      	adds	r1, r7, r2
    f2e6:	2210      	movs	r2, #16
    f2e8:	0018      	movs	r0, r3
    f2ea:	4b09      	ldr	r3, [pc, #36]	; (f310 <http_client_socket_resolve_handler+0xbc>)
    f2ec:	4798      	blx	r3
				return;
    f2ee:	e005      	b.n	f2fc <http_client_socket_resolve_handler+0xa8>
{
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
    f2f0:	69fb      	ldr	r3, [r7, #28]
    f2f2:	3301      	adds	r3, #1
    f2f4:	61fb      	str	r3, [r7, #28]
    f2f6:	69fb      	ldr	r3, [r7, #28]
    f2f8:	2b06      	cmp	r3, #6
    f2fa:	ddb3      	ble.n	f264 <http_client_socket_resolve_handler+0x10>
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
				return;
			}
		}
	}
}
    f2fc:	46bd      	mov	sp, r7
    f2fe:	b008      	add	sp, #32
    f300:	bd80      	pop	{r7, pc}
    f302:	46c0      	nop			; (mov r8, r8)
    f304:	200000b8 	.word	0x200000b8
    f308:	000170c1 	.word	0x000170c1
    f30c:	0000f6ed 	.word	0x0000f6ed
    f310:	0000d1ed 	.word	0x0000d1ed

0000f314 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
    f314:	b580      	push	{r7, lr}
    f316:	b086      	sub	sp, #24
    f318:	af00      	add	r7, sp, #0
    f31a:	60f8      	str	r0, [r7, #12]
    f31c:	60b9      	str	r1, [r7, #8]
    f31e:	607a      	str	r2, [r7, #4]
    f320:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
    f322:	687b      	ldr	r3, [r7, #4]
    f324:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
    f326:	697b      	ldr	r3, [r7, #20]
    f328:	2b00      	cmp	r3, #0
    f32a:	d007      	beq.n	f33c <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
    f32c:	233e      	movs	r3, #62	; 0x3e
    f32e:	425a      	negs	r2, r3
    f330:	697b      	ldr	r3, [r7, #20]
    f332:	0011      	movs	r1, r2
    f334:	0018      	movs	r0, r3
    f336:	4b03      	ldr	r3, [pc, #12]	; (f344 <http_client_timer_callback+0x30>)
    f338:	4798      	blx	r3
    f33a:	e000      	b.n	f33e <http_client_timer_callback+0x2a>
{
	struct http_client_module *module_inst = (struct http_client_module *)context;

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
		return;
    f33c:	46c0      	nop			; (mov r8, r8)
	}

	_http_client_clear_conn(module_inst, -ETIME);
}
    f33e:	46bd      	mov	sp, r7
    f340:	b006      	add	sp, #24
    f342:	bd80      	pop	{r7, pc}
    f344:	0000f6ed 	.word	0x0000f6ed

0000f348 <_is_ip>:

static int _is_ip(const char *host)
{
    f348:	b580      	push	{r7, lr}
    f34a:	b084      	sub	sp, #16
    f34c:	af00      	add	r7, sp, #0
    f34e:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
    f350:	2300      	movs	r3, #0
    f352:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
    f354:	e03a      	b.n	f3cc <_is_ip+0x84>
		ch = *host++;
    f356:	687b      	ldr	r3, [r7, #4]
    f358:	1c5a      	adds	r2, r3, #1
    f35a:	607a      	str	r2, [r7, #4]
    f35c:	220b      	movs	r2, #11
    f35e:	18ba      	adds	r2, r7, r2
    f360:	781b      	ldrb	r3, [r3, #0]
    f362:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    f364:	230b      	movs	r3, #11
    f366:	18fb      	adds	r3, r7, r3
    f368:	781b      	ldrb	r3, [r3, #0]
    f36a:	2b60      	cmp	r3, #96	; 0x60
    f36c:	d904      	bls.n	f378 <_is_ip+0x30>
    f36e:	230b      	movs	r3, #11
    f370:	18fb      	adds	r3, r7, r3
    f372:	781b      	ldrb	r3, [r3, #0]
    f374:	2b66      	cmp	r3, #102	; 0x66
    f376:	d913      	bls.n	f3a0 <_is_ip+0x58>
    f378:	230b      	movs	r3, #11
    f37a:	18fb      	adds	r3, r7, r3
    f37c:	781b      	ldrb	r3, [r3, #0]
    f37e:	2b40      	cmp	r3, #64	; 0x40
    f380:	d904      	bls.n	f38c <_is_ip+0x44>
    f382:	230b      	movs	r3, #11
    f384:	18fb      	adds	r3, r7, r3
    f386:	781b      	ldrb	r3, [r3, #0]
    f388:	2b46      	cmp	r3, #70	; 0x46
    f38a:	d909      	bls.n	f3a0 <_is_ip+0x58>
    f38c:	230b      	movs	r3, #11
    f38e:	18fb      	adds	r3, r7, r3
    f390:	781b      	ldrb	r3, [r3, #0]
    f392:	2b3a      	cmp	r3, #58	; 0x3a
    f394:	d004      	beq.n	f3a0 <_is_ip+0x58>
    f396:	230b      	movs	r3, #11
    f398:	18fb      	adds	r3, r7, r3
    f39a:	781b      	ldrb	r3, [r3, #0]
    f39c:	2b2f      	cmp	r3, #47	; 0x2f
    f39e:	d102      	bne.n	f3a6 <_is_ip+0x5e>
			isv6 = 1;
    f3a0:	2301      	movs	r3, #1
    f3a2:	60fb      	str	r3, [r7, #12]
    f3a4:	e012      	b.n	f3cc <_is_ip+0x84>
		} else if (ch == '.') {
    f3a6:	230b      	movs	r3, #11
    f3a8:	18fb      	adds	r3, r7, r3
    f3aa:	781b      	ldrb	r3, [r3, #0]
    f3ac:	2b2e      	cmp	r3, #46	; 0x2e
    f3ae:	d104      	bne.n	f3ba <_is_ip+0x72>
			if (isv6) {
    f3b0:	68fb      	ldr	r3, [r7, #12]
    f3b2:	2b00      	cmp	r3, #0
    f3b4:	d00a      	beq.n	f3cc <_is_ip+0x84>
				return 0;
    f3b6:	2300      	movs	r3, #0
    f3b8:	e00d      	b.n	f3d6 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
    f3ba:	230b      	movs	r3, #11
    f3bc:	18fb      	adds	r3, r7, r3
    f3be:	781b      	ldrb	r3, [r3, #0]
    f3c0:	2230      	movs	r2, #48	; 0x30
    f3c2:	4013      	ands	r3, r2
    f3c4:	2b30      	cmp	r3, #48	; 0x30
    f3c6:	d001      	beq.n	f3cc <_is_ip+0x84>
			return 0;
    f3c8:	2300      	movs	r3, #0
    f3ca:	e004      	b.n	f3d6 <_is_ip+0x8e>
static int _is_ip(const char *host)
{
	uint32_t isv6 = 0;
	char ch;

	while (*host != '\0') {
    f3cc:	687b      	ldr	r3, [r7, #4]
    f3ce:	781b      	ldrb	r3, [r3, #0]
    f3d0:	2b00      	cmp	r3, #0
    f3d2:	d1c0      	bne.n	f356 <_is_ip+0xe>
			}
		} else if ((ch & 0x30) != 0x30) {
			return 0;
		}
	}
	return 1;
    f3d4:	2301      	movs	r3, #1
}
    f3d6:	0018      	movs	r0, r3
    f3d8:	46bd      	mov	sp, r7
    f3da:	b004      	add	sp, #16
    f3dc:	bd80      	pop	{r7, pc}
    f3de:	46c0      	nop			; (mov r8, r8)

0000f3e0 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
    f3e0:	b5b0      	push	{r4, r5, r7, lr}
    f3e2:	b08e      	sub	sp, #56	; 0x38
    f3e4:	af00      	add	r7, sp, #0
    f3e6:	60f8      	str	r0, [r7, #12]
    f3e8:	60b9      	str	r1, [r7, #8]
    f3ea:	603b      	str	r3, [r7, #0]
    f3ec:	1dfb      	adds	r3, r7, #7
    f3ee:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
    f3f0:	2337      	movs	r3, #55	; 0x37
    f3f2:	18fb      	adds	r3, r7, r3
    f3f4:	2200      	movs	r2, #0
    f3f6:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
    f3f8:	2300      	movs	r3, #0
    f3fa:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
    f3fc:	2300      	movs	r3, #0
    f3fe:	633b      	str	r3, [r7, #48]	; 0x30
    f400:	2300      	movs	r3, #0
    f402:	62fb      	str	r3, [r7, #44]	; 0x2c
    f404:	2300      	movs	r3, #0
    f406:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
    f408:	68fb      	ldr	r3, [r7, #12]
    f40a:	2b00      	cmp	r3, #0
    f40c:	d102      	bne.n	f414 <http_client_send_request+0x34>
		return -EINVAL;
    f40e:	2316      	movs	r3, #22
    f410:	425b      	negs	r3, r3
    f412:	e145      	b.n	f6a0 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
    f414:	68fb      	ldr	r3, [r7, #12]
    f416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f418:	2b02      	cmp	r3, #2
    f41a:	d902      	bls.n	f422 <http_client_send_request+0x42>
		return -EBUSY;
    f41c:	2310      	movs	r3, #16
    f41e:	425b      	negs	r3, r3
    f420:	e13e      	b.n	f6a0 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
    f422:	49a1      	ldr	r1, [pc, #644]	; (f6a8 <http_client_send_request+0x2c8>)
    f424:	68bb      	ldr	r3, [r7, #8]
    f426:	2207      	movs	r2, #7
    f428:	0018      	movs	r0, r3
    f42a:	4ba0      	ldr	r3, [pc, #640]	; (f6ac <http_client_send_request+0x2cc>)
    f42c:	4798      	blx	r3
    f42e:	1e03      	subs	r3, r0, #0
    f430:	d102      	bne.n	f438 <http_client_send_request+0x58>
		i = 7;
    f432:	2307      	movs	r3, #7
    f434:	633b      	str	r3, [r7, #48]	; 0x30
    f436:	e009      	b.n	f44c <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
    f438:	499d      	ldr	r1, [pc, #628]	; (f6b0 <http_client_send_request+0x2d0>)
    f43a:	68bb      	ldr	r3, [r7, #8]
    f43c:	2208      	movs	r2, #8
    f43e:	0018      	movs	r0, r3
    f440:	4b9a      	ldr	r3, [pc, #616]	; (f6ac <http_client_send_request+0x2cc>)
    f442:	4798      	blx	r3
    f444:	1e03      	subs	r3, r0, #0
    f446:	d101      	bne.n	f44c <http_client_send_request+0x6c>
		i = 8;
    f448:	2308      	movs	r3, #8
    f44a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    f44c:	68fb      	ldr	r3, [r7, #12]
    f44e:	1c5c      	adds	r4, r3, #1
    f450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f452:	68ba      	ldr	r2, [r7, #8]
    f454:	18d5      	adds	r5, r2, r3
    f456:	68fb      	ldr	r3, [r7, #12]
    f458:	3301      	adds	r3, #1
    f45a:	0018      	movs	r0, r3
    f45c:	4b95      	ldr	r3, [pc, #596]	; (f6b4 <http_client_send_request+0x2d4>)
    f45e:	4798      	blx	r3
    f460:	0003      	movs	r3, r0
    f462:	001a      	movs	r2, r3
    f464:	0029      	movs	r1, r5
    f466:	0020      	movs	r0, r4
    f468:	4b90      	ldr	r3, [pc, #576]	; (f6ac <http_client_send_request+0x2cc>)
    f46a:	4798      	blx	r3
    f46c:	0003      	movs	r3, r0
    f46e:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    f470:	e00d      	b.n	f48e <http_client_send_request+0xae>
		module->host[j++] = url[i];
    f472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f474:	1c5a      	adds	r2, r3, #1
    f476:	62fa      	str	r2, [r7, #44]	; 0x2c
    f478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    f47a:	68b9      	ldr	r1, [r7, #8]
    f47c:	188a      	adds	r2, r1, r2
    f47e:	7811      	ldrb	r1, [r2, #0]
    f480:	68fa      	ldr	r2, [r7, #12]
    f482:	18d3      	adds	r3, r2, r3
    f484:	1c0a      	adds	r2, r1, #0
    f486:	705a      	strb	r2, [r3, #1]
	} else if (!strncmp(url, "https://", 8)) {
		i = 8;
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    f488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f48a:	3301      	adds	r3, #1
    f48c:	633b      	str	r3, [r7, #48]	; 0x30
    f48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f490:	68ba      	ldr	r2, [r7, #8]
    f492:	18d3      	adds	r3, r2, r3
    f494:	781b      	ldrb	r3, [r3, #0]
    f496:	2b00      	cmp	r3, #0
    f498:	d005      	beq.n	f4a6 <http_client_send_request+0xc6>
    f49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f49c:	68ba      	ldr	r2, [r7, #8]
    f49e:	18d3      	adds	r3, r2, r3
    f4a0:	781b      	ldrb	r3, [r3, #0]
    f4a2:	2b2f      	cmp	r3, #47	; 0x2f
    f4a4:	d1e5      	bne.n	f472 <http_client_send_request+0x92>
		module->host[j++] = url[i];
	}
	module->host[j] = '\0';
    f4a6:	68fa      	ldr	r2, [r7, #12]
    f4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f4aa:	18d3      	adds	r3, r2, r3
    f4ac:	3301      	adds	r3, #1
    f4ae:	2200      	movs	r2, #0
    f4b0:	701a      	strb	r2, [r3, #0]
	uri = url + i;
    f4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    f4b4:	68ba      	ldr	r2, [r7, #8]
    f4b6:	18d3      	adds	r3, r2, r3
    f4b8:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
    f4ba:	68fb      	ldr	r3, [r7, #12]
    f4bc:	3301      	adds	r3, #1
    f4be:	781b      	ldrb	r3, [r3, #0]
    f4c0:	2b00      	cmp	r3, #0
    f4c2:	d102      	bne.n	f4ca <http_client_send_request+0xea>
		return -EINVAL;
    f4c4:	2316      	movs	r3, #22
    f4c6:	425b      	negs	r3, r3
    f4c8:	e0ea      	b.n	f6a0 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    f4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f4cc:	0018      	movs	r0, r3
    f4ce:	4b79      	ldr	r3, [pc, #484]	; (f6b4 <http_client_send_request+0x2d4>)
    f4d0:	4798      	blx	r3
    f4d2:	1e03      	subs	r3, r0, #0
    f4d4:	2b3f      	cmp	r3, #63	; 0x3f
    f4d6:	d902      	bls.n	f4de <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
    f4d8:	235b      	movs	r3, #91	; 0x5b
    f4da:	425b      	negs	r3, r3
    f4dc:	e0e0      	b.n	f6a0 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
    f4de:	68fb      	ldr	r3, [r7, #12]
    f4e0:	22d4      	movs	r2, #212	; 0xd4
    f4e2:	589b      	ldr	r3, [r3, r2]
    f4e4:	2b00      	cmp	r3, #0
    f4e6:	d005      	beq.n	f4f4 <http_client_send_request+0x114>
		free(module->req.ext_header);
    f4e8:	68fb      	ldr	r3, [r7, #12]
    f4ea:	22d4      	movs	r2, #212	; 0xd4
    f4ec:	589b      	ldr	r3, [r3, r2]
    f4ee:	0018      	movs	r0, r3
    f4f0:	4b71      	ldr	r3, [pc, #452]	; (f6b8 <http_client_send_request+0x2d8>)
    f4f2:	4798      	blx	r3
	}
	if (ext_header != NULL) {
    f4f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f4f6:	2b00      	cmp	r3, #0
    f4f8:	d010      	beq.n	f51c <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
    f4fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    f4fc:	0018      	movs	r0, r3
    f4fe:	4b6f      	ldr	r3, [pc, #444]	; (f6bc <http_client_send_request+0x2dc>)
    f500:	4798      	blx	r3
    f502:	0003      	movs	r3, r0
    f504:	0019      	movs	r1, r3
    f506:	68fb      	ldr	r3, [r7, #12]
    f508:	22d4      	movs	r2, #212	; 0xd4
    f50a:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
    f50c:	68fb      	ldr	r3, [r7, #12]
    f50e:	22d4      	movs	r2, #212	; 0xd4
    f510:	589b      	ldr	r3, [r3, r2]
    f512:	2b00      	cmp	r3, #0
    f514:	d106      	bne.n	f524 <http_client_send_request+0x144>
			return -ENOMEM;
    f516:	230c      	movs	r3, #12
    f518:	425b      	negs	r3, r3
    f51a:	e0c1      	b.n	f6a0 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
    f51c:	68fb      	ldr	r3, [r7, #12]
    f51e:	22d4      	movs	r2, #212	; 0xd4
    f520:	2100      	movs	r1, #0
    f522:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
    f524:	68fb      	ldr	r3, [r7, #12]
    f526:	2241      	movs	r2, #65	; 0x41
    f528:	5c99      	ldrb	r1, [r3, r2]
    f52a:	2001      	movs	r0, #1
    f52c:	4381      	bics	r1, r0
    f52e:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
    f530:	68fb      	ldr	r3, [r7, #12]
    f532:	2200      	movs	r2, #0
    f534:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
    f536:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f538:	781b      	ldrb	r3, [r3, #0]
    f53a:	2b2f      	cmp	r3, #47	; 0x2f
    f53c:	d107      	bne.n	f54e <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
    f53e:	68fb      	ldr	r3, [r7, #12]
    f540:	3370      	adds	r3, #112	; 0x70
    f542:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f544:	0011      	movs	r1, r2
    f546:	0018      	movs	r0, r3
    f548:	4b5d      	ldr	r3, [pc, #372]	; (f6c0 <http_client_send_request+0x2e0>)
    f54a:	4798      	blx	r3
    f54c:	e00f      	b.n	f56e <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
    f54e:	68fb      	ldr	r3, [r7, #12]
    f550:	2270      	movs	r2, #112	; 0x70
    f552:	212f      	movs	r1, #47	; 0x2f
    f554:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
    f556:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f558:	781b      	ldrb	r3, [r3, #0]
    f55a:	2b00      	cmp	r3, #0
    f55c:	d007      	beq.n	f56e <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
    f55e:	68fb      	ldr	r3, [r7, #12]
    f560:	3370      	adds	r3, #112	; 0x70
    f562:	3301      	adds	r3, #1
    f564:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f566:	0011      	movs	r1, r2
    f568:	0018      	movs	r0, r3
    f56a:	4b55      	ldr	r3, [pc, #340]	; (f6c0 <http_client_send_request+0x2e0>)
    f56c:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
    f56e:	683b      	ldr	r3, [r7, #0]
    f570:	2b00      	cmp	r3, #0
    f572:	d007      	beq.n	f584 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    f574:	68fb      	ldr	r3, [r7, #12]
    f576:	33b0      	adds	r3, #176	; 0xb0
    f578:	6839      	ldr	r1, [r7, #0]
    f57a:	2218      	movs	r2, #24
    f57c:	0018      	movs	r0, r3
    f57e:	4b51      	ldr	r3, [pc, #324]	; (f6c4 <http_client_send_request+0x2e4>)
    f580:	4798      	blx	r3
    f582:	e006      	b.n	f592 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    f584:	68fb      	ldr	r3, [r7, #12]
    f586:	33b0      	adds	r3, #176	; 0xb0
    f588:	2218      	movs	r2, #24
    f58a:	2100      	movs	r1, #0
    f58c:	0018      	movs	r0, r3
    f58e:	4b4e      	ldr	r3, [pc, #312]	; (f6c8 <http_client_send_request+0x2e8>)
    f590:	4798      	blx	r3
	}

	module->req.method = method;
    f592:	68fb      	ldr	r3, [r7, #12]
    f594:	1dfa      	adds	r2, r7, #7
    f596:	21c8      	movs	r1, #200	; 0xc8
    f598:	7812      	ldrb	r2, [r2, #0]
    f59a:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
    f59c:	68fb      	ldr	r3, [r7, #12]
    f59e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f5a0:	2b01      	cmp	r3, #1
    f5a2:	d003      	beq.n	f5ac <http_client_send_request+0x1cc>
    f5a4:	d316      	bcc.n	f5d4 <http_client_send_request+0x1f4>
    f5a6:	2b02      	cmp	r3, #2
    f5a8:	d004      	beq.n	f5b4 <http_client_send_request+0x1d4>
    f5aa:	e074      	b.n	f696 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
    f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f5ae:	2b00      	cmp	r3, #0
    f5b0:	d100      	bne.n	f5b4 <http_client_send_request+0x1d4>
    f5b2:	e073      	b.n	f69c <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
    f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f5b6:	2b00      	cmp	r3, #0
    f5b8:	d107      	bne.n	f5ca <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
    f5ba:	68fb      	ldr	r3, [r7, #12]
    f5bc:	2203      	movs	r2, #3
    f5be:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
    f5c0:	68fb      	ldr	r3, [r7, #12]
    f5c2:	0018      	movs	r0, r3
    f5c4:	4b41      	ldr	r3, [pc, #260]	; (f6cc <http_client_send_request+0x2ec>)
    f5c6:	4798      	blx	r3
			break;
    f5c8:	e069      	b.n	f69e <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
    f5ca:	68fb      	ldr	r3, [r7, #12]
    f5cc:	2100      	movs	r1, #0
    f5ce:	0018      	movs	r0, r3
    f5d0:	4b3f      	ldr	r3, [pc, #252]	; (f6d0 <http_client_send_request+0x2f0>)
    f5d2:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
    f5d4:	68fb      	ldr	r3, [r7, #12]
    f5d6:	2252      	movs	r2, #82	; 0x52
    f5d8:	5c9b      	ldrb	r3, [r3, r2]
    f5da:	2b00      	cmp	r3, #0
    f5dc:	d007      	beq.n	f5ee <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
    f5de:	2337      	movs	r3, #55	; 0x37
    f5e0:	18fb      	adds	r3, r7, r3
    f5e2:	2237      	movs	r2, #55	; 0x37
    f5e4:	18ba      	adds	r2, r7, r2
    f5e6:	7812      	ldrb	r2, [r2, #0]
    f5e8:	2101      	movs	r1, #1
    f5ea:	430a      	orrs	r2, r1
    f5ec:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    f5ee:	2337      	movs	r3, #55	; 0x37
    f5f0:	18fb      	adds	r3, r7, r3
    f5f2:	781b      	ldrb	r3, [r3, #0]
    f5f4:	001a      	movs	r2, r3
    f5f6:	2101      	movs	r1, #1
    f5f8:	2002      	movs	r0, #2
    f5fa:	4b36      	ldr	r3, [pc, #216]	; (f6d4 <http_client_send_request+0x2f4>)
    f5fc:	4798      	blx	r3
    f5fe:	0003      	movs	r3, r0
    f600:	001a      	movs	r2, r3
    f602:	68fb      	ldr	r3, [r7, #12]
    f604:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
    f606:	68fb      	ldr	r3, [r7, #12]
    f608:	781b      	ldrb	r3, [r3, #0]
    f60a:	b25b      	sxtb	r3, r3
    f60c:	2b00      	cmp	r3, #0
    f60e:	db3f      	blt.n	f690 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
    f610:	68fb      	ldr	r3, [r7, #12]
    f612:	781b      	ldrb	r3, [r3, #0]
    f614:	b25b      	sxtb	r3, r3
    f616:	001a      	movs	r2, r3
    f618:	4b2f      	ldr	r3, [pc, #188]	; (f6d8 <http_client_send_request+0x2f8>)
    f61a:	0092      	lsls	r2, r2, #2
    f61c:	68f9      	ldr	r1, [r7, #12]
    f61e:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
    f620:	68fb      	ldr	r3, [r7, #12]
    f622:	3301      	adds	r3, #1
    f624:	0018      	movs	r0, r3
    f626:	4b2d      	ldr	r3, [pc, #180]	; (f6dc <http_client_send_request+0x2fc>)
    f628:	4798      	blx	r3
    f62a:	1e03      	subs	r3, r0, #0
    f62c:	d027      	beq.n	f67e <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
    f62e:	2314      	movs	r3, #20
    f630:	18fb      	adds	r3, r7, r3
    f632:	2202      	movs	r2, #2
    f634:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
    f636:	68fb      	ldr	r3, [r7, #12]
    f638:	2250      	movs	r2, #80	; 0x50
    f63a:	5a9b      	ldrh	r3, [r3, r2]
    f63c:	021b      	lsls	r3, r3, #8
    f63e:	b21a      	sxth	r2, r3
    f640:	68fb      	ldr	r3, [r7, #12]
    f642:	2150      	movs	r1, #80	; 0x50
    f644:	5a5b      	ldrh	r3, [r3, r1]
    f646:	0a1b      	lsrs	r3, r3, #8
    f648:	b29b      	uxth	r3, r3
    f64a:	b21b      	sxth	r3, r3
    f64c:	4313      	orrs	r3, r2
    f64e:	b21b      	sxth	r3, r3
    f650:	b29a      	uxth	r2, r3
    f652:	2314      	movs	r3, #20
    f654:	18fb      	adds	r3, r7, r3
    f656:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    f658:	68fb      	ldr	r3, [r7, #12]
    f65a:	3301      	adds	r3, #1
    f65c:	0018      	movs	r0, r3
    f65e:	4b20      	ldr	r3, [pc, #128]	; (f6e0 <http_client_send_request+0x300>)
    f660:	4798      	blx	r3
    f662:	0002      	movs	r2, r0
    f664:	2314      	movs	r3, #20
    f666:	18fb      	adds	r3, r7, r3
    f668:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    f66a:	68fb      	ldr	r3, [r7, #12]
    f66c:	781b      	ldrb	r3, [r3, #0]
    f66e:	b25b      	sxtb	r3, r3
    f670:	2214      	movs	r2, #20
    f672:	18b9      	adds	r1, r7, r2
    f674:	2210      	movs	r2, #16
    f676:	0018      	movs	r0, r3
    f678:	4b1a      	ldr	r3, [pc, #104]	; (f6e4 <http_client_send_request+0x304>)
    f67a:	4798      	blx	r3
    f67c:	e004      	b.n	f688 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
    f67e:	68fb      	ldr	r3, [r7, #12]
    f680:	3301      	adds	r3, #1
    f682:	0018      	movs	r0, r3
    f684:	4b18      	ldr	r3, [pc, #96]	; (f6e8 <http_client_send_request+0x308>)
    f686:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
    f688:	68fb      	ldr	r3, [r7, #12]
    f68a:	2201      	movs	r2, #1
    f68c:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
    f68e:	e006      	b.n	f69e <http_client_send_request+0x2be>
			} else {
				gethostbyname((uint8*)module->host);
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
		} else {
			return -ENOSPC;
    f690:	231c      	movs	r3, #28
    f692:	425b      	negs	r3, r3
    f694:	e004      	b.n	f6a0 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
    f696:	230b      	movs	r3, #11
    f698:	425b      	negs	r3, r3
    f69a:	e001      	b.n	f6a0 <http_client_send_request+0x2c0>
	module->req.method = method;
	
	switch (module->req.state) {
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
			break; /* Currently try to connect to the same server. */
    f69c:	46c0      	nop			; (mov r8, r8)
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
	}

	return 0;
    f69e:	2300      	movs	r3, #0
}
    f6a0:	0018      	movs	r0, r3
    f6a2:	46bd      	mov	sp, r7
    f6a4:	b00e      	add	sp, #56	; 0x38
    f6a6:	bdb0      	pop	{r4, r5, r7, pc}
    f6a8:	00019434 	.word	0x00019434
    f6ac:	0001712d 	.word	0x0001712d
    f6b0:	0001943c 	.word	0x0001943c
    f6b4:	0001711f 	.word	0x0001711f
    f6b8:	00016c19 	.word	0x00016c19
    f6bc:	000170e5 	.word	0x000170e5
    f6c0:	000170d5 	.word	0x000170d5
    f6c4:	00016c2d 	.word	0x00016c2d
    f6c8:	00016c69 	.word	0x00016c69
    f6cc:	0000f841 	.word	0x0000f841
    f6d0:	0000f6ed 	.word	0x0000f6ed
    f6d4:	0000cfdd 	.word	0x0000cfdd
    f6d8:	200000b8 	.word	0x200000b8
    f6dc:	0000f349 	.word	0x0000f349
    f6e0:	0000d721 	.word	0x0000d721
    f6e4:	0000d1ed 	.word	0x0000d1ed
    f6e8:	0000d829 	.word	0x0000d829

0000f6ec <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
    f6ec:	b580      	push	{r7, lr}
    f6ee:	b086      	sub	sp, #24
    f6f0:	af00      	add	r7, sp, #0
    f6f2:	6078      	str	r0, [r7, #4]
    f6f4:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
    f6f6:	687b      	ldr	r3, [r7, #4]
    f6f8:	22c0      	movs	r2, #192	; 0xc0
    f6fa:	589b      	ldr	r3, [r3, r2]
    f6fc:	2b00      	cmp	r3, #0
    f6fe:	d007      	beq.n	f710 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
    f700:	687b      	ldr	r3, [r7, #4]
    f702:	22c0      	movs	r2, #192	; 0xc0
    f704:	589b      	ldr	r3, [r3, r2]
    f706:	687a      	ldr	r2, [r7, #4]
    f708:	21c4      	movs	r1, #196	; 0xc4
    f70a:	5852      	ldr	r2, [r2, r1]
    f70c:	0010      	movs	r0, r2
    f70e:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
    f710:	687b      	ldr	r3, [r7, #4]
    f712:	33b0      	adds	r3, #176	; 0xb0
    f714:	2218      	movs	r2, #24
    f716:	2100      	movs	r1, #0
    f718:	0018      	movs	r0, r3
    f71a:	4b24      	ldr	r3, [pc, #144]	; (f7ac <_http_client_clear_conn+0xc0>)
    f71c:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    f71e:	687b      	ldr	r3, [r7, #4]
    f720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f722:	2b00      	cmp	r3, #0
    f724:	d005      	beq.n	f732 <_http_client_clear_conn+0x46>
		close(module->sock);
    f726:	687b      	ldr	r3, [r7, #4]
    f728:	781b      	ldrb	r3, [r3, #0]
    f72a:	b25b      	sxtb	r3, r3
    f72c:	0018      	movs	r0, r3
    f72e:	4b20      	ldr	r3, [pc, #128]	; (f7b0 <_http_client_clear_conn+0xc4>)
    f730:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
    f732:	687b      	ldr	r3, [r7, #4]
    f734:	781b      	ldrb	r3, [r3, #0]
    f736:	b25b      	sxtb	r3, r3
    f738:	001a      	movs	r2, r3
    f73a:	4b1e      	ldr	r3, [pc, #120]	; (f7b4 <_http_client_clear_conn+0xc8>)
    f73c:	0092      	lsls	r2, r2, #2
    f73e:	2100      	movs	r1, #0
    f740:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
    f742:	687b      	ldr	r3, [r7, #4]
    f744:	336c      	adds	r3, #108	; 0x6c
    f746:	226c      	movs	r2, #108	; 0x6c
    f748:	2100      	movs	r1, #0
    f74a:	0018      	movs	r0, r3
    f74c:	4b17      	ldr	r3, [pc, #92]	; (f7ac <_http_client_clear_conn+0xc0>)
    f74e:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    f750:	687b      	ldr	r3, [r7, #4]
    f752:	33d8      	adds	r3, #216	; 0xd8
    f754:	2210      	movs	r2, #16
    f756:	2100      	movs	r1, #0
    f758:	0018      	movs	r0, r3
    f75a:	4b14      	ldr	r3, [pc, #80]	; (f7ac <_http_client_clear_conn+0xc0>)
    f75c:	4798      	blx	r3
	module->req.state = STATE_INIT;
    f75e:	687b      	ldr	r3, [r7, #4]
    f760:	2200      	movs	r2, #0
    f762:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    f764:	687b      	ldr	r3, [r7, #4]
    f766:	22d8      	movs	r2, #216	; 0xd8
    f768:	2100      	movs	r1, #0
    f76a:	5099      	str	r1, [r3, r2]

	module->sending = 0;
    f76c:	687b      	ldr	r3, [r7, #4]
    f76e:	2241      	movs	r2, #65	; 0x41
    f770:	5c99      	ldrb	r1, [r3, r2]
    f772:	2001      	movs	r0, #1
    f774:	4381      	bics	r1, r0
    f776:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
    f778:	687b      	ldr	r3, [r7, #4]
    f77a:	2241      	movs	r2, #65	; 0x41
    f77c:	5c99      	ldrb	r1, [r3, r2]
    f77e:	2002      	movs	r0, #2
    f780:	4381      	bics	r1, r0
    f782:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
    f784:	230c      	movs	r3, #12
    f786:	18fb      	adds	r3, r7, r3
    f788:	683a      	ldr	r2, [r7, #0]
    f78a:	601a      	str	r2, [r3, #0]
	if (module->cb) {
    f78c:	687b      	ldr	r3, [r7, #4]
    f78e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f790:	2b00      	cmp	r3, #0
    f792:	d006      	beq.n	f7a2 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    f794:	687b      	ldr	r3, [r7, #4]
    f796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f798:	220c      	movs	r2, #12
    f79a:	18ba      	adds	r2, r7, r2
    f79c:	6878      	ldr	r0, [r7, #4]
    f79e:	2104      	movs	r1, #4
    f7a0:	4798      	blx	r3
	}
}
    f7a2:	46c0      	nop			; (mov r8, r8)
    f7a4:	46bd      	mov	sp, r7
    f7a6:	b006      	add	sp, #24
    f7a8:	bd80      	pop	{r7, pc}
    f7aa:	46c0      	nop			; (mov r8, r8)
    f7ac:	00016c69 	.word	0x00016c69
    f7b0:	0000d5e5 	.word	0x0000d5e5
    f7b4:	200000b8 	.word	0x200000b8

0000f7b8 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    f7b8:	b590      	push	{r4, r7, lr}
    f7ba:	b087      	sub	sp, #28
    f7bc:	af00      	add	r7, sp, #0
    f7be:	60f8      	str	r0, [r7, #12]
    f7c0:	60b9      	str	r1, [r7, #8]
    f7c2:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
    f7c4:	68fb      	ldr	r3, [r7, #12]
    f7c6:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
    f7c8:	697b      	ldr	r3, [r7, #20]
    f7ca:	2241      	movs	r2, #65	; 0x41
    f7cc:	5c99      	ldrb	r1, [r3, r2]
    f7ce:	2001      	movs	r0, #1
    f7d0:	4301      	orrs	r1, r0
    f7d2:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    f7d4:	697b      	ldr	r3, [r7, #20]
    f7d6:	2000      	movs	r0, #0
    f7d8:	5618      	ldrsb	r0, [r3, r0]
    f7da:	687b      	ldr	r3, [r7, #4]
    f7dc:	b29a      	uxth	r2, r3
    f7de:	68b9      	ldr	r1, [r7, #8]
    f7e0:	2300      	movs	r3, #0
    f7e2:	4c14      	ldr	r4, [pc, #80]	; (f834 <_http_client_send_wait+0x7c>)
    f7e4:	47a0      	blx	r4
    f7e6:	0003      	movs	r3, r0
    f7e8:	613b      	str	r3, [r7, #16]
    f7ea:	693b      	ldr	r3, [r7, #16]
    f7ec:	2b00      	cmp	r3, #0
    f7ee:	da0f      	bge.n	f810 <_http_client_send_wait+0x58>
		module->sending = 0;
    f7f0:	697b      	ldr	r3, [r7, #20]
    f7f2:	2241      	movs	r2, #65	; 0x41
    f7f4:	5c99      	ldrb	r1, [r3, r2]
    f7f6:	2001      	movs	r0, #1
    f7f8:	4381      	bics	r1, r0
    f7fa:	5499      	strb	r1, [r3, r2]
		return result;
    f7fc:	693b      	ldr	r3, [r7, #16]
    f7fe:	e014      	b.n	f82a <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
    f800:	2000      	movs	r0, #0
    f802:	4b0d      	ldr	r3, [pc, #52]	; (f838 <_http_client_send_wait+0x80>)
    f804:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
    f806:	697b      	ldr	r3, [r7, #20]
    f808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    f80a:	0018      	movs	r0, r3
    f80c:	4b0b      	ldr	r3, [pc, #44]	; (f83c <_http_client_send_wait+0x84>)
    f80e:	4798      	blx	r3

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    f810:	697b      	ldr	r3, [r7, #20]
    f812:	2241      	movs	r2, #65	; 0x41
    f814:	5c9b      	ldrb	r3, [r3, r2]
    f816:	2201      	movs	r2, #1
    f818:	4013      	ands	r3, r2
    f81a:	b2db      	uxtb	r3, r3
    f81c:	2b00      	cmp	r3, #0
    f81e:	d003      	beq.n	f828 <_http_client_send_wait+0x70>
    f820:	697b      	ldr	r3, [r7, #20]
    f822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f824:	2b02      	cmp	r3, #2
    f826:	d8eb      	bhi.n	f800 <_http_client_send_wait+0x48>
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    f828:	2300      	movs	r3, #0
}
    f82a:	0018      	movs	r0, r3
    f82c:	46bd      	mov	sp, r7
    f82e:	b007      	add	sp, #28
    f830:	bd90      	pop	{r4, r7, pc}
    f832:	46c0      	nop			; (mov r8, r8)
    f834:	0000d301 	.word	0x0000d301
    f838:	00009f4d 	.word	0x00009f4d
    f83c:	00010aa9 	.word	0x00010aa9

0000f840 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    f840:	b5f0      	push	{r4, r5, r6, r7, lr}
    f842:	b0a1      	sub	sp, #132	; 0x84
    f844:	af02      	add	r7, sp, #8
    f846:	61f8      	str	r0, [r7, #28]
    f848:	466b      	mov	r3, sp
    f84a:	61bb      	str	r3, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    f84c:	2318      	movs	r3, #24
    f84e:	2218      	movs	r2, #24
    f850:	18ba      	adds	r2, r7, r2
    f852:	18d2      	adds	r2, r2, r3
    f854:	4bb8      	ldr	r3, [pc, #736]	; (fb38 <_http_client_request+0x2f8>)
    f856:	0010      	movs	r0, r2
    f858:	0019      	movs	r1, r3
    f85a:	2310      	movs	r3, #16
    f85c:	001a      	movs	r2, r3
    f85e:	4bb7      	ldr	r3, [pc, #732]	; (fb3c <_http_client_request+0x2fc>)
    f860:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    f862:	69fb      	ldr	r3, [r7, #28]
    f864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f866:	001a      	movs	r2, r3
    f868:	3a01      	subs	r2, #1
    f86a:	66fa      	str	r2, [r7, #108]	; 0x6c
    f86c:	60bb      	str	r3, [r7, #8]
    f86e:	2200      	movs	r2, #0
    f870:	60fa      	str	r2, [r7, #12]
    f872:	68b8      	ldr	r0, [r7, #8]
    f874:	68f9      	ldr	r1, [r7, #12]
    f876:	0002      	movs	r2, r0
    f878:	0f52      	lsrs	r2, r2, #29
    f87a:	000e      	movs	r6, r1
    f87c:	00f6      	lsls	r6, r6, #3
    f87e:	617e      	str	r6, [r7, #20]
    f880:	697e      	ldr	r6, [r7, #20]
    f882:	4316      	orrs	r6, r2
    f884:	617e      	str	r6, [r7, #20]
    f886:	0002      	movs	r2, r0
    f888:	00d2      	lsls	r2, r2, #3
    f88a:	613a      	str	r2, [r7, #16]
    f88c:	603b      	str	r3, [r7, #0]
    f88e:	2200      	movs	r2, #0
    f890:	607a      	str	r2, [r7, #4]
    f892:	6838      	ldr	r0, [r7, #0]
    f894:	6879      	ldr	r1, [r7, #4]
    f896:	0002      	movs	r2, r0
    f898:	0f52      	lsrs	r2, r2, #29
    f89a:	000e      	movs	r6, r1
    f89c:	00f5      	lsls	r5, r6, #3
    f89e:	4315      	orrs	r5, r2
    f8a0:	0002      	movs	r2, r0
    f8a2:	00d4      	lsls	r4, r2, #3
    f8a4:	3307      	adds	r3, #7
    f8a6:	08db      	lsrs	r3, r3, #3
    f8a8:	00db      	lsls	r3, r3, #3
    f8aa:	466a      	mov	r2, sp
    f8ac:	1ad3      	subs	r3, r2, r3
    f8ae:	469d      	mov	sp, r3
    f8b0:	ab02      	add	r3, sp, #8
    f8b2:	3300      	adds	r3, #0
    f8b4:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
    f8b6:	69fb      	ldr	r3, [r7, #28]
    f8b8:	2b00      	cmp	r3, #0
    f8ba:	d100      	bne.n	f8be <_http_client_request+0x7e>
    f8bc:	e340      	b.n	ff40 <_http_client_request+0x700>
		return;
	}

	if (module->sending != 0) {
    f8be:	69fb      	ldr	r3, [r7, #28]
    f8c0:	2241      	movs	r2, #65	; 0x41
    f8c2:	5c9b      	ldrb	r3, [r3, r2]
    f8c4:	2201      	movs	r2, #1
    f8c6:	4013      	ands	r3, r2
    f8c8:	b2db      	uxtb	r3, r3
    f8ca:	2b00      	cmp	r3, #0
    f8cc:	d000      	beq.n	f8d0 <_http_client_request+0x90>
    f8ce:	e339      	b.n	ff44 <_http_client_request+0x704>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
    f8d0:	69fb      	ldr	r3, [r7, #28]
    f8d2:	33b0      	adds	r3, #176	; 0xb0
    f8d4:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
    f8d6:	69fb      	ldr	r3, [r7, #28]
    f8d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    f8da:	2b03      	cmp	r3, #3
    f8dc:	d003      	beq.n	f8e6 <_http_client_request+0xa6>
    f8de:	2b04      	cmp	r3, #4
    f8e0:	d100      	bne.n	f8e4 <_http_client_request+0xa4>
    f8e2:	e1b4      	b.n	fc4e <_http_client_request+0x40e>
		}

		break;
	default:
		/* Invalid status. */
		break;
    f8e4:	e335      	b.n	ff52 <_http_client_request+0x712>
	entity = &module->req.entity;

	switch (module->req.state) {
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    f8e6:	69fb      	ldr	r3, [r7, #28]
    f8e8:	22cc      	movs	r2, #204	; 0xcc
    f8ea:	2100      	movs	r1, #0
    f8ec:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
    f8ee:	69fb      	ldr	r3, [r7, #28]
    f8f0:	22d0      	movs	r2, #208	; 0xd0
    f8f2:	2100      	movs	r1, #0
    f8f4:	5099      	str	r1, [r3, r2]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    f8f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    f8f8:	69fb      	ldr	r3, [r7, #28]
    f8fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    f8fc:	4c90      	ldr	r4, [pc, #576]	; (fb40 <_http_client_request+0x300>)
    f8fe:	2334      	movs	r3, #52	; 0x34
    f900:	2018      	movs	r0, #24
    f902:	1838      	adds	r0, r7, r0
    f904:	18c0      	adds	r0, r0, r3
    f906:	69fb      	ldr	r3, [r7, #28]
    f908:	9300      	str	r3, [sp, #0]
    f90a:	0023      	movs	r3, r4
    f90c:	4c8d      	ldr	r4, [pc, #564]	; (fb44 <_http_client_request+0x304>)
    f90e:	47a0      	blx	r4
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    f910:	69fb      	ldr	r3, [r7, #28]
    f912:	22c8      	movs	r2, #200	; 0xc8
    f914:	5c9b      	ldrb	r3, [r3, r2]
    f916:	2b01      	cmp	r3, #1
    f918:	d10a      	bne.n	f930 <_http_client_request+0xf0>
			stream_writer_send_buffer(&writer, "GET ", 4);
    f91a:	498b      	ldr	r1, [pc, #556]	; (fb48 <_http_client_request+0x308>)
    f91c:	2334      	movs	r3, #52	; 0x34
    f91e:	2218      	movs	r2, #24
    f920:	4694      	mov	ip, r2
    f922:	44bc      	add	ip, r7
    f924:	4463      	add	r3, ip
    f926:	2204      	movs	r2, #4
    f928:	0018      	movs	r0, r3
    f92a:	4b88      	ldr	r3, [pc, #544]	; (fb4c <_http_client_request+0x30c>)
    f92c:	4798      	blx	r3
    f92e:	e04e      	b.n	f9ce <_http_client_request+0x18e>
		} else if (module->req.method == HTTP_METHOD_POST) {
    f930:	69fb      	ldr	r3, [r7, #28]
    f932:	22c8      	movs	r2, #200	; 0xc8
    f934:	5c9b      	ldrb	r3, [r3, r2]
    f936:	2b02      	cmp	r3, #2
    f938:	d10a      	bne.n	f950 <_http_client_request+0x110>
			stream_writer_send_buffer(&writer, "POST ", 5);
    f93a:	4985      	ldr	r1, [pc, #532]	; (fb50 <_http_client_request+0x310>)
    f93c:	2334      	movs	r3, #52	; 0x34
    f93e:	2218      	movs	r2, #24
    f940:	4694      	mov	ip, r2
    f942:	44bc      	add	ip, r7
    f944:	4463      	add	r3, ip
    f946:	2205      	movs	r2, #5
    f948:	0018      	movs	r0, r3
    f94a:	4b80      	ldr	r3, [pc, #512]	; (fb4c <_http_client_request+0x30c>)
    f94c:	4798      	blx	r3
    f94e:	e03e      	b.n	f9ce <_http_client_request+0x18e>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    f950:	69fb      	ldr	r3, [r7, #28]
    f952:	22c8      	movs	r2, #200	; 0xc8
    f954:	5c9b      	ldrb	r3, [r3, r2]
    f956:	2b03      	cmp	r3, #3
    f958:	d10a      	bne.n	f970 <_http_client_request+0x130>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    f95a:	497e      	ldr	r1, [pc, #504]	; (fb54 <_http_client_request+0x314>)
    f95c:	2334      	movs	r3, #52	; 0x34
    f95e:	2218      	movs	r2, #24
    f960:	4694      	mov	ip, r2
    f962:	44bc      	add	ip, r7
    f964:	4463      	add	r3, ip
    f966:	2207      	movs	r2, #7
    f968:	0018      	movs	r0, r3
    f96a:	4b78      	ldr	r3, [pc, #480]	; (fb4c <_http_client_request+0x30c>)
    f96c:	4798      	blx	r3
    f96e:	e02e      	b.n	f9ce <_http_client_request+0x18e>
		} else if (module->req.method == HTTP_METHOD_PUT) {
    f970:	69fb      	ldr	r3, [r7, #28]
    f972:	22c8      	movs	r2, #200	; 0xc8
    f974:	5c9b      	ldrb	r3, [r3, r2]
    f976:	2b04      	cmp	r3, #4
    f978:	d10a      	bne.n	f990 <_http_client_request+0x150>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    f97a:	4977      	ldr	r1, [pc, #476]	; (fb58 <_http_client_request+0x318>)
    f97c:	2334      	movs	r3, #52	; 0x34
    f97e:	2218      	movs	r2, #24
    f980:	4694      	mov	ip, r2
    f982:	44bc      	add	ip, r7
    f984:	4463      	add	r3, ip
    f986:	2204      	movs	r2, #4
    f988:	0018      	movs	r0, r3
    f98a:	4b70      	ldr	r3, [pc, #448]	; (fb4c <_http_client_request+0x30c>)
    f98c:	4798      	blx	r3
    f98e:	e01e      	b.n	f9ce <_http_client_request+0x18e>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    f990:	69fb      	ldr	r3, [r7, #28]
    f992:	22c8      	movs	r2, #200	; 0xc8
    f994:	5c9b      	ldrb	r3, [r3, r2]
    f996:	2b05      	cmp	r3, #5
    f998:	d10a      	bne.n	f9b0 <_http_client_request+0x170>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    f99a:	4970      	ldr	r1, [pc, #448]	; (fb5c <_http_client_request+0x31c>)
    f99c:	2334      	movs	r3, #52	; 0x34
    f99e:	2218      	movs	r2, #24
    f9a0:	4694      	mov	ip, r2
    f9a2:	44bc      	add	ip, r7
    f9a4:	4463      	add	r3, ip
    f9a6:	2208      	movs	r2, #8
    f9a8:	0018      	movs	r0, r3
    f9aa:	4b68      	ldr	r3, [pc, #416]	; (fb4c <_http_client_request+0x30c>)
    f9ac:	4798      	blx	r3
    f9ae:	e00e      	b.n	f9ce <_http_client_request+0x18e>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    f9b0:	69fb      	ldr	r3, [r7, #28]
    f9b2:	22c8      	movs	r2, #200	; 0xc8
    f9b4:	5c9b      	ldrb	r3, [r3, r2]
    f9b6:	2b06      	cmp	r3, #6
    f9b8:	d109      	bne.n	f9ce <_http_client_request+0x18e>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    f9ba:	4969      	ldr	r1, [pc, #420]	; (fb60 <_http_client_request+0x320>)
    f9bc:	2334      	movs	r3, #52	; 0x34
    f9be:	2218      	movs	r2, #24
    f9c0:	4694      	mov	ip, r2
    f9c2:	44bc      	add	ip, r7
    f9c4:	4463      	add	r3, ip
    f9c6:	2205      	movs	r2, #5
    f9c8:	0018      	movs	r0, r3
    f9ca:	4b60      	ldr	r3, [pc, #384]	; (fb4c <_http_client_request+0x30c>)
    f9cc:	4798      	blx	r3
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    f9ce:	69fb      	ldr	r3, [r7, #28]
    f9d0:	3370      	adds	r3, #112	; 0x70
    f9d2:	001c      	movs	r4, r3
    f9d4:	69fb      	ldr	r3, [r7, #28]
    f9d6:	3370      	adds	r3, #112	; 0x70
    f9d8:	0018      	movs	r0, r3
    f9da:	4b62      	ldr	r3, [pc, #392]	; (fb64 <_http_client_request+0x324>)
    f9dc:	4798      	blx	r3
    f9de:	0002      	movs	r2, r0
    f9e0:	2334      	movs	r3, #52	; 0x34
    f9e2:	2118      	movs	r1, #24
    f9e4:	468c      	mov	ip, r1
    f9e6:	44bc      	add	ip, r7
    f9e8:	4463      	add	r3, ip
    f9ea:	0021      	movs	r1, r4
    f9ec:	0018      	movs	r0, r3
    f9ee:	4b57      	ldr	r3, [pc, #348]	; (fb4c <_http_client_request+0x30c>)
    f9f0:	4798      	blx	r3

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    f9f2:	495d      	ldr	r1, [pc, #372]	; (fb68 <_http_client_request+0x328>)
    f9f4:	2334      	movs	r3, #52	; 0x34
    f9f6:	2218      	movs	r2, #24
    f9f8:	4694      	mov	ip, r2
    f9fa:	44bc      	add	ip, r7
    f9fc:	4463      	add	r3, ip
    f9fe:	220b      	movs	r2, #11
    fa00:	0018      	movs	r0, r3
    fa02:	4b52      	ldr	r3, [pc, #328]	; (fb4c <_http_client_request+0x30c>)
    fa04:	4798      	blx	r3

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    fa06:	4959      	ldr	r1, [pc, #356]	; (fb6c <_http_client_request+0x32c>)
    fa08:	2334      	movs	r3, #52	; 0x34
    fa0a:	2218      	movs	r2, #24
    fa0c:	4694      	mov	ip, r2
    fa0e:	44bc      	add	ip, r7
    fa10:	4463      	add	r3, ip
    fa12:	220c      	movs	r2, #12
    fa14:	0018      	movs	r0, r3
    fa16:	4b4d      	ldr	r3, [pc, #308]	; (fb4c <_http_client_request+0x30c>)
    fa18:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    fa1a:	69fb      	ldr	r3, [r7, #28]
    fa1c:	6e9c      	ldr	r4, [r3, #104]	; 0x68
    fa1e:	69fb      	ldr	r3, [r7, #28]
    fa20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    fa22:	0018      	movs	r0, r3
    fa24:	4b4f      	ldr	r3, [pc, #316]	; (fb64 <_http_client_request+0x324>)
    fa26:	4798      	blx	r3
    fa28:	0002      	movs	r2, r0
    fa2a:	2334      	movs	r3, #52	; 0x34
    fa2c:	2118      	movs	r1, #24
    fa2e:	468c      	mov	ip, r1
    fa30:	44bc      	add	ip, r7
    fa32:	4463      	add	r3, ip
    fa34:	0021      	movs	r1, r4
    fa36:	0018      	movs	r0, r3
    fa38:	4b44      	ldr	r3, [pc, #272]	; (fb4c <_http_client_request+0x30c>)
    fa3a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    fa3c:	494c      	ldr	r1, [pc, #304]	; (fb70 <_http_client_request+0x330>)
    fa3e:	2334      	movs	r3, #52	; 0x34
    fa40:	2218      	movs	r2, #24
    fa42:	4694      	mov	ip, r2
    fa44:	44bc      	add	ip, r7
    fa46:	4463      	add	r3, ip
    fa48:	2202      	movs	r2, #2
    fa4a:	0018      	movs	r0, r3
    fa4c:	4b3f      	ldr	r3, [pc, #252]	; (fb4c <_http_client_request+0x30c>)
    fa4e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    fa50:	4948      	ldr	r1, [pc, #288]	; (fb74 <_http_client_request+0x334>)
    fa52:	2334      	movs	r3, #52	; 0x34
    fa54:	2218      	movs	r2, #24
    fa56:	4694      	mov	ip, r2
    fa58:	44bc      	add	ip, r7
    fa5a:	4463      	add	r3, ip
    fa5c:	2206      	movs	r2, #6
    fa5e:	0018      	movs	r0, r3
    fa60:	4b3a      	ldr	r3, [pc, #232]	; (fb4c <_http_client_request+0x30c>)
    fa62:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    fa64:	69fb      	ldr	r3, [r7, #28]
    fa66:	1c5c      	adds	r4, r3, #1
    fa68:	69fb      	ldr	r3, [r7, #28]
    fa6a:	3301      	adds	r3, #1
    fa6c:	0018      	movs	r0, r3
    fa6e:	4b3d      	ldr	r3, [pc, #244]	; (fb64 <_http_client_request+0x324>)
    fa70:	4798      	blx	r3
    fa72:	0002      	movs	r2, r0
    fa74:	2334      	movs	r3, #52	; 0x34
    fa76:	2118      	movs	r1, #24
    fa78:	468c      	mov	ip, r1
    fa7a:	44bc      	add	ip, r7
    fa7c:	4463      	add	r3, ip
    fa7e:	0021      	movs	r1, r4
    fa80:	0018      	movs	r0, r3
    fa82:	4b32      	ldr	r3, [pc, #200]	; (fb4c <_http_client_request+0x30c>)
    fa84:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    fa86:	493a      	ldr	r1, [pc, #232]	; (fb70 <_http_client_request+0x330>)
    fa88:	2334      	movs	r3, #52	; 0x34
    fa8a:	2218      	movs	r2, #24
    fa8c:	4694      	mov	ip, r2
    fa8e:	44bc      	add	ip, r7
    fa90:	4463      	add	r3, ip
    fa92:	2202      	movs	r2, #2
    fa94:	0018      	movs	r0, r3
    fa96:	4b2d      	ldr	r3, [pc, #180]	; (fb4c <_http_client_request+0x30c>)
    fa98:	4798      	blx	r3
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    fa9a:	4937      	ldr	r1, [pc, #220]	; (fb78 <_http_client_request+0x338>)
    fa9c:	2334      	movs	r3, #52	; 0x34
    fa9e:	2218      	movs	r2, #24
    faa0:	4694      	mov	ip, r2
    faa2:	44bc      	add	ip, r7
    faa4:	4463      	add	r3, ip
    faa6:	2218      	movs	r2, #24
    faa8:	0018      	movs	r0, r3
    faaa:	4b28      	ldr	r3, [pc, #160]	; (fb4c <_http_client_request+0x30c>)
    faac:	4798      	blx	r3
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    faae:	4933      	ldr	r1, [pc, #204]	; (fb7c <_http_client_request+0x33c>)
    fab0:	2334      	movs	r3, #52	; 0x34
    fab2:	2218      	movs	r2, #24
    fab4:	4694      	mov	ip, r2
    fab6:	44bc      	add	ip, r7
    fab8:	4463      	add	r3, ip
    faba:	2213      	movs	r2, #19
    fabc:	0018      	movs	r0, r3
    fabe:	4b23      	ldr	r3, [pc, #140]	; (fb4c <_http_client_request+0x30c>)
    fac0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    fac2:	492f      	ldr	r1, [pc, #188]	; (fb80 <_http_client_request+0x340>)
    fac4:	2334      	movs	r3, #52	; 0x34
    fac6:	2218      	movs	r2, #24
    fac8:	4694      	mov	ip, r2
    faca:	44bc      	add	ip, r7
    facc:	4463      	add	r3, ip
    face:	2217      	movs	r2, #23
    fad0:	0018      	movs	r0, r3
    fad2:	4b1e      	ldr	r3, [pc, #120]	; (fb4c <_http_client_request+0x30c>)
    fad4:	4798      	blx	r3

		if (entity->read != NULL) {
    fad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fad8:	68db      	ldr	r3, [r3, #12]
    fada:	2b00      	cmp	r3, #0
    fadc:	d100      	bne.n	fae0 <_http_client_request+0x2a0>
    fade:	e089      	b.n	fbf4 <_http_client_request+0x3b4>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    fae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fae2:	781b      	ldrb	r3, [r3, #0]
    fae4:	2b00      	cmp	r3, #0
    fae6:	d00f      	beq.n	fb08 <_http_client_request+0x2c8>
				/* Chunked mode. */
				module->req.content_length = -1;
    fae8:	69fb      	ldr	r3, [r7, #28]
    faea:	21cc      	movs	r1, #204	; 0xcc
    faec:	2201      	movs	r2, #1
    faee:	4252      	negs	r2, r2
    faf0:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    faf2:	4924      	ldr	r1, [pc, #144]	; (fb84 <_http_client_request+0x344>)
    faf4:	2334      	movs	r3, #52	; 0x34
    faf6:	2218      	movs	r2, #24
    faf8:	4694      	mov	ip, r2
    fafa:	44bc      	add	ip, r7
    fafc:	4463      	add	r3, ip
    fafe:	221c      	movs	r2, #28
    fb00:	0018      	movs	r0, r3
    fb02:	4b12      	ldr	r3, [pc, #72]	; (fb4c <_http_client_request+0x30c>)
    fb04:	4798      	blx	r3
    fb06:	e075      	b.n	fbf4 <_http_client_request+0x3b4>
			} else if(entity->get_contents_length) {
    fb08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fb0a:	689b      	ldr	r3, [r3, #8]
    fb0c:	2b00      	cmp	r3, #0
    fb0e:	d071      	beq.n	fbf4 <_http_client_request+0x3b4>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    fb10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fb12:	689a      	ldr	r2, [r3, #8]
    fb14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fb16:	695b      	ldr	r3, [r3, #20]
    fb18:	0018      	movs	r0, r3
    fb1a:	4790      	blx	r2
    fb1c:	0001      	movs	r1, r0
    fb1e:	69fb      	ldr	r3, [r7, #28]
    fb20:	22cc      	movs	r2, #204	; 0xcc
    fb22:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
    fb24:	69fb      	ldr	r3, [r7, #28]
    fb26:	22cc      	movs	r2, #204	; 0xcc
    fb28:	589b      	ldr	r3, [r3, r2]
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	da2c      	bge.n	fb88 <_http_client_request+0x348>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
    fb2e:	69fb      	ldr	r3, [r7, #28]
    fb30:	22cc      	movs	r2, #204	; 0xcc
    fb32:	2100      	movs	r1, #0
    fb34:	5099      	str	r1, [r3, r2]
    fb36:	e05d      	b.n	fbf4 <_http_client_request+0x3b4>
    fb38:	00019524 	.word	0x00019524
    fb3c:	00016c2d 	.word	0x00016c2d
    fb40:	0000f7b9 	.word	0x0000f7b9
    fb44:	00010705 	.word	0x00010705
    fb48:	00019448 	.word	0x00019448
    fb4c:	00010785 	.word	0x00010785
    fb50:	00019450 	.word	0x00019450
    fb54:	00019458 	.word	0x00019458
    fb58:	00019460 	.word	0x00019460
    fb5c:	00019468 	.word	0x00019468
    fb60:	00019474 	.word	0x00019474
    fb64:	0001711f 	.word	0x0001711f
    fb68:	0001947c 	.word	0x0001947c
    fb6c:	00019488 	.word	0x00019488
    fb70:	00019498 	.word	0x00019498
    fb74:	0001949c 	.word	0x0001949c
    fb78:	000194a4 	.word	0x000194a4
    fb7c:	000194c0 	.word	0x000194c0
    fb80:	000194d4 	.word	0x000194d4
    fb84:	000194ec 	.word	0x000194ec
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    fb88:	69fb      	ldr	r3, [r7, #28]
    fb8a:	22cc      	movs	r2, #204	; 0xcc
    fb8c:	589b      	ldr	r3, [r3, r2]
    fb8e:	001a      	movs	r2, r3
    fb90:	49e0      	ldr	r1, [pc, #896]	; (ff14 <_http_client_request+0x6d4>)
    fb92:	2328      	movs	r3, #40	; 0x28
    fb94:	2018      	movs	r0, #24
    fb96:	4684      	mov	ip, r0
    fb98:	44bc      	add	ip, r7
    fb9a:	4463      	add	r3, ip
    fb9c:	0018      	movs	r0, r3
    fb9e:	4bde      	ldr	r3, [pc, #888]	; (ff18 <_http_client_request+0x6d8>)
    fba0:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    fba2:	49de      	ldr	r1, [pc, #888]	; (ff1c <_http_client_request+0x6dc>)
    fba4:	2334      	movs	r3, #52	; 0x34
    fba6:	2218      	movs	r2, #24
    fba8:	4694      	mov	ip, r2
    fbaa:	44bc      	add	ip, r7
    fbac:	4463      	add	r3, ip
    fbae:	2210      	movs	r2, #16
    fbb0:	0018      	movs	r0, r3
    fbb2:	4bdb      	ldr	r3, [pc, #876]	; (ff20 <_http_client_request+0x6e0>)
    fbb4:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
    fbb6:	2328      	movs	r3, #40	; 0x28
    fbb8:	2218      	movs	r2, #24
    fbba:	4694      	mov	ip, r2
    fbbc:	44bc      	add	ip, r7
    fbbe:	4463      	add	r3, ip
    fbc0:	0018      	movs	r0, r3
    fbc2:	4bd8      	ldr	r3, [pc, #864]	; (ff24 <_http_client_request+0x6e4>)
    fbc4:	4798      	blx	r3
    fbc6:	0002      	movs	r2, r0
    fbc8:	2328      	movs	r3, #40	; 0x28
    fbca:	2118      	movs	r1, #24
    fbcc:	1879      	adds	r1, r7, r1
    fbce:	18c9      	adds	r1, r1, r3
    fbd0:	2334      	movs	r3, #52	; 0x34
    fbd2:	2018      	movs	r0, #24
    fbd4:	4684      	mov	ip, r0
    fbd6:	44bc      	add	ip, r7
    fbd8:	4463      	add	r3, ip
    fbda:	0018      	movs	r0, r3
    fbdc:	4bd0      	ldr	r3, [pc, #832]	; (ff20 <_http_client_request+0x6e0>)
    fbde:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    fbe0:	49d1      	ldr	r1, [pc, #836]	; (ff28 <_http_client_request+0x6e8>)
    fbe2:	2334      	movs	r3, #52	; 0x34
    fbe4:	2218      	movs	r2, #24
    fbe6:	4694      	mov	ip, r2
    fbe8:	44bc      	add	ip, r7
    fbea:	4463      	add	r3, ip
    fbec:	2202      	movs	r2, #2
    fbee:	0018      	movs	r0, r3
    fbf0:	4bcb      	ldr	r3, [pc, #812]	; (ff20 <_http_client_request+0x6e0>)
    fbf2:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    fbf4:	69fb      	ldr	r3, [r7, #28]
    fbf6:	22d4      	movs	r2, #212	; 0xd4
    fbf8:	589b      	ldr	r3, [r3, r2]
    fbfa:	2b00      	cmp	r3, #0
    fbfc:	d012      	beq.n	fc24 <_http_client_request+0x3e4>
			stream_writer_send_buffer(&writer,
				module->req.ext_header,
    fbfe:	69fb      	ldr	r3, [r7, #28]
    fc00:	22d4      	movs	r2, #212	; 0xd4
    fc02:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
    fc04:	69fb      	ldr	r3, [r7, #28]
    fc06:	22d4      	movs	r2, #212	; 0xd4
    fc08:	589b      	ldr	r3, [r3, r2]
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
				}
			}
		}
		if (module->req.ext_header != NULL ) {
			stream_writer_send_buffer(&writer,
    fc0a:	0018      	movs	r0, r3
    fc0c:	4bc5      	ldr	r3, [pc, #788]	; (ff24 <_http_client_request+0x6e4>)
    fc0e:	4798      	blx	r3
    fc10:	0002      	movs	r2, r0
    fc12:	2334      	movs	r3, #52	; 0x34
    fc14:	2118      	movs	r1, #24
    fc16:	468c      	mov	ip, r1
    fc18:	44bc      	add	ip, r7
    fc1a:	4463      	add	r3, ip
    fc1c:	0021      	movs	r1, r4
    fc1e:	0018      	movs	r0, r3
    fc20:	4bbf      	ldr	r3, [pc, #764]	; (ff20 <_http_client_request+0x6e0>)
    fc22:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    fc24:	49c0      	ldr	r1, [pc, #768]	; (ff28 <_http_client_request+0x6e8>)
    fc26:	2334      	movs	r3, #52	; 0x34
    fc28:	2218      	movs	r2, #24
    fc2a:	4694      	mov	ip, r2
    fc2c:	44bc      	add	ip, r7
    fc2e:	4463      	add	r3, ip
    fc30:	2202      	movs	r2, #2
    fc32:	0018      	movs	r0, r3
    fc34:	4bba      	ldr	r3, [pc, #744]	; (ff20 <_http_client_request+0x6e0>)
    fc36:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    fc38:	2334      	movs	r3, #52	; 0x34
    fc3a:	2218      	movs	r2, #24
    fc3c:	4694      	mov	ip, r2
    fc3e:	44bc      	add	ip, r7
    fc40:	4463      	add	r3, ip
    fc42:	0018      	movs	r0, r3
    fc44:	4bb9      	ldr	r3, [pc, #740]	; (ff2c <_http_client_request+0x6ec>)
    fc46:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    fc48:	69fb      	ldr	r3, [r7, #28]
    fc4a:	2204      	movs	r2, #4
    fc4c:	66da      	str	r2, [r3, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    fc4e:	69fb      	ldr	r3, [r7, #28]
    fc50:	22cc      	movs	r2, #204	; 0xcc
    fc52:	589b      	ldr	r3, [r3, r2]
    fc54:	2b00      	cmp	r3, #0
    fc56:	db00      	blt.n	fc5a <_http_client_request+0x41a>
    fc58:	e0c6      	b.n	fde8 <_http_client_request+0x5a8>
    fc5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fc5c:	68db      	ldr	r3, [r3, #12]
    fc5e:	2b00      	cmp	r3, #0
    fc60:	d100      	bne.n	fc64 <_http_client_request+0x424>
    fc62:	e0c1      	b.n	fde8 <_http_client_request+0x5a8>
			/* Send chunked packet. */
			/*  Chunked header (size + \r\n) tail (\r\n) */
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    fc64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fc66:	68dc      	ldr	r4, [r3, #12]
    fc68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fc6a:	6958      	ldr	r0, [r3, #20]
    fc6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fc6e:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    fc70:	69fb      	ldr	r3, [r7, #28]
    fc72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
			/* Send chunked packet. */
			/*  Chunked header (size + \r\n) tail (\r\n) */
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    fc74:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    fc76:	69fb      	ldr	r3, [r7, #28]
    fc78:	22d0      	movs	r2, #208	; 0xd0
    fc7a:	589b      	ldr	r3, [r3, r2]
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
			/* Send chunked packet. */
			/*  Chunked header (size + \r\n) tail (\r\n) */
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    fc7c:	002a      	movs	r2, r5
    fc7e:	47a0      	blx	r4
    fc80:	0003      	movs	r3, r0
    fc82:	677b      	str	r3, [r7, #116]	; 0x74
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
			if (size < 0) {
    fc84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fc86:	2b00      	cmp	r3, #0
    fc88:	da01      	bge.n	fc8e <_http_client_request+0x44e>
				/* If occurs problem during the operation, Close this socket. */
				size = 0;
    fc8a:	2300      	movs	r3, #0
    fc8c:	677b      	str	r3, [r7, #116]	; 0x74
			}
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    fc8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fc90:	220a      	movs	r2, #10
    fc92:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    fc94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fc96:	220d      	movs	r2, #13
    fc98:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    fc9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fc9c:	3305      	adds	r3, #5
    fc9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
    fca0:	210d      	movs	r1, #13
    fca2:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    fca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fca6:	3306      	adds	r3, #6
    fca8:	6eba      	ldr	r2, [r7, #104]	; 0x68
    fcaa:	210a      	movs	r1, #10
    fcac:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
    fcae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fcb0:	2b00      	cmp	r3, #0
    fcb2:	db14      	blt.n	fcde <_http_client_request+0x49e>
				ptr = buffer + 2;
    fcb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fcb6:	3302      	adds	r3, #2
    fcb8:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
    fcba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fcbc:	4a9c      	ldr	r2, [pc, #624]	; (ff30 <_http_client_request+0x6f0>)
    fcbe:	4013      	ands	r3, r2
    fcc0:	d504      	bpl.n	fccc <_http_client_request+0x48c>
    fcc2:	3b01      	subs	r3, #1
    fcc4:	2210      	movs	r2, #16
    fcc6:	4252      	negs	r2, r2
    fcc8:	4313      	orrs	r3, r2
    fcca:	3301      	adds	r3, #1
    fccc:	001a      	movs	r2, r3
    fcce:	2318      	movs	r3, #24
    fcd0:	2118      	movs	r1, #24
    fcd2:	468c      	mov	ip, r1
    fcd4:	44bc      	add	ip, r7
    fcd6:	4463      	add	r3, ip
    fcd8:	5c9a      	ldrb	r2, [r3, r2]
    fcda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fcdc:	701a      	strb	r2, [r3, #0]
			}
			if (size >= 0x10) {
    fcde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fce0:	2b0f      	cmp	r3, #15
    fce2:	dd19      	ble.n	fd18 <_http_client_request+0x4d8>
				ptr = buffer + 1;
    fce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fce6:	3301      	adds	r3, #1
    fce8:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
    fcea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fcec:	2b00      	cmp	r3, #0
    fcee:	da00      	bge.n	fcf2 <_http_client_request+0x4b2>
    fcf0:	330f      	adds	r3, #15
    fcf2:	111b      	asrs	r3, r3, #4
    fcf4:	001a      	movs	r2, r3
    fcf6:	4b8e      	ldr	r3, [pc, #568]	; (ff30 <_http_client_request+0x6f0>)
    fcf8:	4013      	ands	r3, r2
    fcfa:	d504      	bpl.n	fd06 <_http_client_request+0x4c6>
    fcfc:	3b01      	subs	r3, #1
    fcfe:	2210      	movs	r2, #16
    fd00:	4252      	negs	r2, r2
    fd02:	4313      	orrs	r3, r2
    fd04:	3301      	adds	r3, #1
    fd06:	001a      	movs	r2, r3
    fd08:	2318      	movs	r3, #24
    fd0a:	2118      	movs	r1, #24
    fd0c:	468c      	mov	ip, r1
    fd0e:	44bc      	add	ip, r7
    fd10:	4463      	add	r3, ip
    fd12:	5c9a      	ldrb	r2, [r3, r2]
    fd14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fd16:	701a      	strb	r2, [r3, #0]
			}
			if (size >= 0x100) {
    fd18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd1a:	2bff      	cmp	r3, #255	; 0xff
    fd1c:	dd18      	ble.n	fd50 <_http_client_request+0x510>
				ptr = buffer;
    fd1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fd20:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
    fd22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd24:	2b00      	cmp	r3, #0
    fd26:	da00      	bge.n	fd2a <_http_client_request+0x4ea>
    fd28:	33ff      	adds	r3, #255	; 0xff
    fd2a:	121b      	asrs	r3, r3, #8
    fd2c:	001a      	movs	r2, r3
    fd2e:	4b80      	ldr	r3, [pc, #512]	; (ff30 <_http_client_request+0x6f0>)
    fd30:	4013      	ands	r3, r2
    fd32:	d504      	bpl.n	fd3e <_http_client_request+0x4fe>
    fd34:	3b01      	subs	r3, #1
    fd36:	2210      	movs	r2, #16
    fd38:	4252      	negs	r2, r2
    fd3a:	4313      	orrs	r3, r2
    fd3c:	3301      	adds	r3, #1
    fd3e:	001a      	movs	r2, r3
    fd40:	2318      	movs	r3, #24
    fd42:	2118      	movs	r1, #24
    fd44:	468c      	mov	ip, r1
    fd46:	44bc      	add	ip, r7
    fd48:	4463      	add	r3, ip
    fd4a:	5c9a      	ldrb	r2, [r3, r2]
    fd4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fd4e:	701a      	strb	r2, [r3, #0]
			}		
			//module->sending = 1;
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    fd50:	69fb      	ldr	r3, [r7, #28]
    fd52:	2000      	movs	r0, #0
    fd54:	5618      	ldrsb	r0, [r3, r0]
    fd56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    fd58:	3303      	adds	r3, #3
    fd5a:	001a      	movs	r2, r3
    fd5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    fd5e:	1ad3      	subs	r3, r2, r3
    fd60:	b29a      	uxth	r2, r3
    fd62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd64:	b29b      	uxth	r3, r3
    fd66:	18d3      	adds	r3, r2, r3
    fd68:	b29b      	uxth	r3, r3
    fd6a:	3304      	adds	r3, #4
    fd6c:	b29a      	uxth	r2, r3
    fd6e:	6f39      	ldr	r1, [r7, #112]	; 0x70
    fd70:	2300      	movs	r3, #0
    fd72:	4c70      	ldr	r4, [pc, #448]	; (ff34 <_http_client_request+0x6f4>)
    fd74:	47a0      	blx	r4
    fd76:	0003      	movs	r3, r0
    fd78:	663b      	str	r3, [r7, #96]	; 0x60
    fd7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fd7c:	2b00      	cmp	r3, #0
    fd7e:	da07      	bge.n	fd90 <_http_client_request+0x550>
				_http_client_clear_conn(module, -EIO);
    fd80:	2305      	movs	r3, #5
    fd82:	425a      	negs	r2, r3
    fd84:	69fb      	ldr	r3, [r7, #28]
    fd86:	0011      	movs	r1, r2
    fd88:	0018      	movs	r0, r3
    fd8a:	4b6b      	ldr	r3, [pc, #428]	; (ff38 <_http_client_request+0x6f8>)
    fd8c:	4798      	blx	r3
				return;
    fd8e:	e0e0      	b.n	ff52 <_http_client_request+0x712>
			}

			module->req.sent_length += size;
    fd90:	69fb      	ldr	r3, [r7, #28]
    fd92:	22d0      	movs	r2, #208	; 0xd0
    fd94:	589a      	ldr	r2, [r3, r2]
    fd96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fd98:	18d2      	adds	r2, r2, r3
    fd9a:	69fb      	ldr	r3, [r7, #28]
    fd9c:	21d0      	movs	r1, #208	; 0xd0
    fd9e:	505a      	str	r2, [r3, r1]

			if(size == 0) {
    fda0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fda2:	2b00      	cmp	r3, #0
    fda4:	d000      	beq.n	fda8 <_http_client_request+0x568>
    fda6:	e0c9      	b.n	ff3c <_http_client_request+0x6fc>
				if (module->req.entity.close) {
    fda8:	69fb      	ldr	r3, [r7, #28]
    fdaa:	22c0      	movs	r2, #192	; 0xc0
    fdac:	589b      	ldr	r3, [r3, r2]
    fdae:	2b00      	cmp	r3, #0
    fdb0:	d007      	beq.n	fdc2 <_http_client_request+0x582>
					module->req.entity.close(module->req.entity.priv_data);
    fdb2:	69fb      	ldr	r3, [r7, #28]
    fdb4:	22c0      	movs	r2, #192	; 0xc0
    fdb6:	589b      	ldr	r3, [r3, r2]
    fdb8:	69fa      	ldr	r2, [r7, #28]
    fdba:	21c4      	movs	r1, #196	; 0xc4
    fdbc:	5852      	ldr	r2, [r2, r1]
    fdbe:	0010      	movs	r0, r2
    fdc0:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    fdc2:	69fb      	ldr	r3, [r7, #28]
    fdc4:	2202      	movs	r2, #2
    fdc6:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    fdc8:	69fb      	ldr	r3, [r7, #28]
    fdca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fdcc:	2b00      	cmp	r3, #0
    fdce:	d100      	bne.n	fdd2 <_http_client_request+0x592>
    fdd0:	e0ba      	b.n	ff48 <_http_client_request+0x708>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    fdd2:	69fb      	ldr	r3, [r7, #28]
    fdd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fdd6:	220c      	movs	r2, #12
    fdd8:	2118      	movs	r1, #24
    fdda:	468c      	mov	ip, r1
    fddc:	44bc      	add	ip, r7
    fdde:	4462      	add	r2, ip
    fde0:	69f8      	ldr	r0, [r7, #28]
    fde2:	2101      	movs	r1, #1
    fde4:	4798      	blx	r3
				}
				break;
    fde6:	e0af      	b.n	ff48 <_http_client_request+0x708>
			}
		} else if (module->req.content_length > 0 && entity->read) {
    fde8:	69fb      	ldr	r3, [r7, #28]
    fdea:	22cc      	movs	r2, #204	; 0xcc
    fdec:	589b      	ldr	r3, [r3, r2]
    fdee:	2b00      	cmp	r3, #0
    fdf0:	dc00      	bgt.n	fdf4 <_http_client_request+0x5b4>
    fdf2:	e07c      	b.n	feee <_http_client_request+0x6ae>
    fdf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fdf6:	68db      	ldr	r3, [r3, #12]
    fdf8:	2b00      	cmp	r3, #0
    fdfa:	d100      	bne.n	fdfe <_http_client_request+0x5be>
    fdfc:	e077      	b.n	feee <_http_client_request+0x6ae>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    fdfe:	69fb      	ldr	r3, [r7, #28]
    fe00:	22d0      	movs	r2, #208	; 0xd0
    fe02:	589a      	ldr	r2, [r3, r2]
    fe04:	69fb      	ldr	r3, [r7, #28]
    fe06:	21cc      	movs	r1, #204	; 0xcc
    fe08:	585b      	ldr	r3, [r3, r1]
    fe0a:	429a      	cmp	r2, r3
    fe0c:	db1f      	blt.n	fe4e <_http_client_request+0x60e>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    fe0e:	69fb      	ldr	r3, [r7, #28]
    fe10:	22c0      	movs	r2, #192	; 0xc0
    fe12:	589b      	ldr	r3, [r3, r2]
    fe14:	2b00      	cmp	r3, #0
    fe16:	d007      	beq.n	fe28 <_http_client_request+0x5e8>
					module->req.entity.close(module->req.entity.priv_data);
    fe18:	69fb      	ldr	r3, [r7, #28]
    fe1a:	22c0      	movs	r2, #192	; 0xc0
    fe1c:	589b      	ldr	r3, [r3, r2]
    fe1e:	69fa      	ldr	r2, [r7, #28]
    fe20:	21c4      	movs	r1, #196	; 0xc4
    fe22:	5852      	ldr	r2, [r2, r1]
    fe24:	0010      	movs	r0, r2
    fe26:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    fe28:	69fb      	ldr	r3, [r7, #28]
    fe2a:	2202      	movs	r2, #2
    fe2c:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
    fe2e:	69fb      	ldr	r3, [r7, #28]
    fe30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fe32:	2b00      	cmp	r3, #0
    fe34:	d100      	bne.n	fe38 <_http_client_request+0x5f8>
    fe36:	e089      	b.n	ff4c <_http_client_request+0x70c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    fe38:	69fb      	ldr	r3, [r7, #28]
    fe3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fe3c:	220c      	movs	r2, #12
    fe3e:	2118      	movs	r1, #24
    fe40:	468c      	mov	ip, r1
    fe42:	44bc      	add	ip, r7
    fe44:	4462      	add	r2, ip
    fe46:	69f8      	ldr	r0, [r7, #28]
    fe48:	2101      	movs	r1, #1
    fe4a:	4798      	blx	r3
				}
				break;
    fe4c:	e07e      	b.n	ff4c <_http_client_request+0x70c>
			}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    fe4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fe50:	68dc      	ldr	r4, [r3, #12]
    fe52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    fe54:	6958      	ldr	r0, [r3, #20]
    fe56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    fe58:	69fb      	ldr	r3, [r7, #28]
    fe5a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
    fe5c:	69fb      	ldr	r3, [r7, #28]
    fe5e:	22d0      	movs	r2, #208	; 0xd0
    fe60:	589b      	ldr	r3, [r3, r2]
    fe62:	002a      	movs	r2, r5
    fe64:	47a0      	blx	r4
    fe66:	0003      	movs	r3, r0
    fe68:	677b      	str	r3, [r7, #116]	; 0x74

			if (size < 0) {
    fe6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fe6c:	2b00      	cmp	r3, #0
    fe6e:	da0d      	bge.n	fe8c <_http_client_request+0x64c>
				/* Entity occurs errors or EOS. */
				/* Disconnect it. */
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    fe70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fe72:	2b00      	cmp	r3, #0
    fe74:	d102      	bne.n	fe7c <_http_client_request+0x63c>
    fe76:	234d      	movs	r3, #77	; 0x4d
    fe78:	425b      	negs	r3, r3
    fe7a:	e001      	b.n	fe80 <_http_client_request+0x640>
    fe7c:	2305      	movs	r3, #5
    fe7e:	425b      	negs	r3, r3
    fe80:	69fa      	ldr	r2, [r7, #28]
    fe82:	0019      	movs	r1, r3
    fe84:	0010      	movs	r0, r2
    fe86:	4b2c      	ldr	r3, [pc, #176]	; (ff38 <_http_client_request+0x6f8>)
    fe88:	4798      	blx	r3
				}
				break;
			}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);

			if (size < 0) {
    fe8a:	e057      	b.n	ff3c <_http_client_request+0x6fc>
				/* Entity occurs errors or EOS. */
				/* Disconnect it. */
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
			} else {
				if (size > module->req.content_length - module->req.sent_length) {
    fe8c:	69fb      	ldr	r3, [r7, #28]
    fe8e:	22cc      	movs	r2, #204	; 0xcc
    fe90:	589a      	ldr	r2, [r3, r2]
    fe92:	69fb      	ldr	r3, [r7, #28]
    fe94:	21d0      	movs	r1, #208	; 0xd0
    fe96:	585b      	ldr	r3, [r3, r1]
    fe98:	1ad2      	subs	r2, r2, r3
    fe9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fe9c:	429a      	cmp	r2, r3
    fe9e:	da07      	bge.n	feb0 <_http_client_request+0x670>
					size = module->req.content_length - module->req.sent_length;
    fea0:	69fb      	ldr	r3, [r7, #28]
    fea2:	22cc      	movs	r2, #204	; 0xcc
    fea4:	589a      	ldr	r2, [r3, r2]
    fea6:	69fb      	ldr	r3, [r7, #28]
    fea8:	21d0      	movs	r1, #208	; 0xd0
    feaa:	585b      	ldr	r3, [r3, r1]
    feac:	1ad3      	subs	r3, r2, r3
    feae:	677b      	str	r3, [r7, #116]	; 0x74
				}
				
				//module->sending = 1;
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    feb0:	69fb      	ldr	r3, [r7, #28]
    feb2:	2000      	movs	r0, #0
    feb4:	5618      	ldrsb	r0, [r3, r0]
    feb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    feb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    feba:	b29a      	uxth	r2, r3
    febc:	2300      	movs	r3, #0
    febe:	4c1d      	ldr	r4, [pc, #116]	; (ff34 <_http_client_request+0x6f4>)
    fec0:	47a0      	blx	r4
    fec2:	0003      	movs	r3, r0
    fec4:	663b      	str	r3, [r7, #96]	; 0x60
    fec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    fec8:	2b00      	cmp	r3, #0
    feca:	da07      	bge.n	fedc <_http_client_request+0x69c>
					_http_client_clear_conn(module, -EIO);
    fecc:	2305      	movs	r3, #5
    fece:	425a      	negs	r2, r3
    fed0:	69fb      	ldr	r3, [r7, #28]
    fed2:	0011      	movs	r1, r2
    fed4:	0018      	movs	r0, r3
    fed6:	4b18      	ldr	r3, [pc, #96]	; (ff38 <_http_client_request+0x6f8>)
    fed8:	4798      	blx	r3
					return;
    feda:	e03a      	b.n	ff52 <_http_client_request+0x712>
				}
				module->req.sent_length += size;
    fedc:	69fb      	ldr	r3, [r7, #28]
    fede:	22d0      	movs	r2, #208	; 0xd0
    fee0:	589a      	ldr	r2, [r3, r2]
    fee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    fee4:	18d2      	adds	r2, r2, r3
    fee6:	69fb      	ldr	r3, [r7, #28]
    fee8:	21d0      	movs	r1, #208	; 0xd0
    feea:	505a      	str	r2, [r3, r1]
				}
				break;
			}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);

			if (size < 0) {
    feec:	e026      	b.n	ff3c <_http_client_request+0x6fc>
				}
				module->req.sent_length += size;
			}
		} else {
			/* Has not any entity. */
			module->req.state = STATE_SOCK_CONNECTED;
    feee:	69fb      	ldr	r3, [r7, #28]
    fef0:	2202      	movs	r2, #2
    fef2:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
    fef4:	69fb      	ldr	r3, [r7, #28]
    fef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    fef8:	2b00      	cmp	r3, #0
    fefa:	d029      	beq.n	ff50 <_http_client_request+0x710>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    fefc:	69fb      	ldr	r3, [r7, #28]
    fefe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ff00:	220c      	movs	r2, #12
    ff02:	2118      	movs	r1, #24
    ff04:	468c      	mov	ip, r1
    ff06:	44bc      	add	ip, r7
    ff08:	4462      	add	r2, ip
    ff0a:	69f8      	ldr	r0, [r7, #28]
    ff0c:	2101      	movs	r1, #1
    ff0e:	4798      	blx	r3
			}
			break;
    ff10:	e01e      	b.n	ff50 <_http_client_request+0x710>
    ff12:	46c0      	nop			; (mov r8, r8)
    ff14:	0001950c 	.word	0x0001950c
    ff18:	0001707d 	.word	0x0001707d
    ff1c:	00019510 	.word	0x00019510
    ff20:	00010785 	.word	0x00010785
    ff24:	0001711f 	.word	0x0001711f
    ff28:	00019498 	.word	0x00019498
    ff2c:	000107c1 	.word	0x000107c1
    ff30:	8000000f 	.word	0x8000000f
    ff34:	0000d301 	.word	0x0000d301
    ff38:	0000f6ed 	.word	0x0000f6ed
		}

		break;
    ff3c:	46c0      	nop			; (mov r8, r8)
    ff3e:	e008      	b.n	ff52 <_http_client_request+0x712>
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];

	if (module == NULL) {
		return;
    ff40:	46c0      	nop			; (mov r8, r8)
    ff42:	e006      	b.n	ff52 <_http_client_request+0x712>
	}

	if (module->sending != 0) {
		/* Device is busy. */
		return;
    ff44:	46c0      	nop			; (mov r8, r8)
    ff46:	e004      	b.n	ff52 <_http_client_request+0x712>
				}
				module->req.state = STATE_SOCK_CONNECTED;
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
    ff48:	46c0      	nop			; (mov r8, r8)
    ff4a:	e002      	b.n	ff52 <_http_client_request+0x712>
				}
				module->req.state = STATE_SOCK_CONNECTED;
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
    ff4c:	46c0      	nop			; (mov r8, r8)
    ff4e:	e000      	b.n	ff52 <_http_client_request+0x712>
			/* Has not any entity. */
			module->req.state = STATE_SOCK_CONNECTED;
			if (module->cb) {
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
			}
			break;
    ff50:	46c0      	nop			; (mov r8, r8)
    ff52:	69bb      	ldr	r3, [r7, #24]
    ff54:	469d      	mov	sp, r3
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    ff56:	46bd      	mov	sp, r7
    ff58:	b01f      	add	sp, #124	; 0x7c
    ff5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ff5c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    ff5c:	b590      	push	{r4, r7, lr}
    ff5e:	b083      	sub	sp, #12
    ff60:	af00      	add	r7, sp, #0
    ff62:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
    ff64:	687b      	ldr	r3, [r7, #4]
    ff66:	2b00      	cmp	r3, #0
    ff68:	d021      	beq.n	ffae <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    ff6a:	687b      	ldr	r3, [r7, #4]
    ff6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    ff6e:	687b      	ldr	r3, [r7, #4]
    ff70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    ff72:	429a      	cmp	r2, r3
    ff74:	d307      	bcc.n	ff86 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
    ff76:	238b      	movs	r3, #139	; 0x8b
    ff78:	425a      	negs	r2, r3
    ff7a:	687b      	ldr	r3, [r7, #4]
    ff7c:	0011      	movs	r1, r2
    ff7e:	0018      	movs	r0, r3
    ff80:	4b0d      	ldr	r3, [pc, #52]	; (ffb8 <_http_client_recv_packet+0x5c>)
    ff82:	4798      	blx	r3
		return;
    ff84:	e014      	b.n	ffb0 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    ff86:	687b      	ldr	r3, [r7, #4]
    ff88:	2000      	movs	r0, #0
    ff8a:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
    ff8c:	687b      	ldr	r3, [r7, #4]
    ff8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    ff90:	687b      	ldr	r3, [r7, #4]
    ff92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    ff94:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0);
    ff96:	687b      	ldr	r3, [r7, #4]
    ff98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    ff9a:	b29a      	uxth	r2, r3
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0);
    ff9c:	687b      	ldr	r3, [r7, #4]
    ff9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    ffa0:	b29b      	uxth	r3, r3
    ffa2:	1ad3      	subs	r3, r2, r3
    ffa4:	b29a      	uxth	r2, r3
    ffa6:	2300      	movs	r3, #0
    ffa8:	4c04      	ldr	r4, [pc, #16]	; (ffbc <_http_client_recv_packet+0x60>)
    ffaa:	47a0      	blx	r4
    ffac:	e000      	b.n	ffb0 <_http_client_recv_packet+0x54>
}

void _http_client_recv_packet(struct http_client_module *const module)
{
	if (module == NULL) {
		return;
    ffae:	46c0      	nop			; (mov r8, r8)
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0);
}
    ffb0:	46bd      	mov	sp, r7
    ffb2:	b003      	add	sp, #12
    ffb4:	bd90      	pop	{r4, r7, pc}
    ffb6:	46c0      	nop			; (mov r8, r8)
    ffb8:	0000f6ed 	.word	0x0000f6ed
    ffbc:	0000d465 	.word	0x0000d465

0000ffc0 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
    ffc0:	b580      	push	{r7, lr}
    ffc2:	b082      	sub	sp, #8
    ffc4:	af00      	add	r7, sp, #0
    ffc6:	6078      	str	r0, [r7, #4]
    ffc8:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
    ffca:	687b      	ldr	r3, [r7, #4]
    ffcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    ffce:	683b      	ldr	r3, [r7, #0]
    ffd0:	18d2      	adds	r2, r2, r3
    ffd2:	687b      	ldr	r3, [r7, #4]
    ffd4:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
    ffd6:	687b      	ldr	r3, [r7, #4]
    ffd8:	2258      	movs	r2, #88	; 0x58
    ffda:	5a9b      	ldrh	r3, [r3, r2]
    ffdc:	2b00      	cmp	r3, #0
    ffde:	d007      	beq.n	fff0 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    ffe0:	687b      	ldr	r3, [r7, #4]
    ffe2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    ffe4:	687b      	ldr	r3, [r7, #4]
    ffe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ffe8:	0019      	movs	r1, r3
    ffea:	0010      	movs	r0, r2
    ffec:	4b06      	ldr	r3, [pc, #24]	; (10008 <_http_client_recved_packet+0x48>)
    ffee:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
    fff0:	46c0      	nop			; (mov r8, r8)
    fff2:	687b      	ldr	r3, [r7, #4]
    fff4:	0018      	movs	r0, r3
    fff6:	4b05      	ldr	r3, [pc, #20]	; (1000c <_http_client_recved_packet+0x4c>)
    fff8:	4798      	blx	r3
    fffa:	1e03      	subs	r3, r0, #0
    fffc:	d1f9      	bne.n	fff2 <_http_client_recved_packet+0x32>
}
    fffe:	46c0      	nop			; (mov r8, r8)
   10000:	46bd      	mov	sp, r7
   10002:	b002      	add	sp, #8
   10004:	bd80      	pop	{r7, pc}
   10006:	46c0      	nop			; (mov r8, r8)
   10008:	00010a7d 	.word	0x00010a7d
   1000c:	00010011 	.word	0x00010011

00010010 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   10010:	b580      	push	{r7, lr}
   10012:	b082      	sub	sp, #8
   10014:	af00      	add	r7, sp, #0
   10016:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   10018:	687b      	ldr	r3, [r7, #4]
   1001a:	22d8      	movs	r2, #216	; 0xd8
   1001c:	589b      	ldr	r3, [r3, r2]
   1001e:	2b00      	cmp	r3, #0
   10020:	d002      	beq.n	10028 <_http_client_handle_response+0x18>
   10022:	2b01      	cmp	r3, #1
   10024:	d006      	beq.n	10034 <_http_client_handle_response+0x24>
   10026:	e00b      	b.n	10040 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   10028:	687b      	ldr	r3, [r7, #4]
   1002a:	0018      	movs	r0, r3
   1002c:	4b07      	ldr	r3, [pc, #28]	; (1004c <_http_client_handle_response+0x3c>)
   1002e:	4798      	blx	r3
   10030:	0003      	movs	r3, r0
   10032:	e006      	b.n	10042 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   10034:	687b      	ldr	r3, [r7, #4]
   10036:	0018      	movs	r0, r3
   10038:	4b05      	ldr	r3, [pc, #20]	; (10050 <_http_client_handle_response+0x40>)
   1003a:	4798      	blx	r3
   1003c:	0003      	movs	r3, r0
   1003e:	e000      	b.n	10042 <_http_client_handle_response+0x32>
	}
	return 0;
   10040:	2300      	movs	r3, #0
}
   10042:	0018      	movs	r0, r3
   10044:	46bd      	mov	sp, r7
   10046:	b002      	add	sp, #8
   10048:	bd80      	pop	{r7, pc}
   1004a:	46c0      	nop			; (mov r8, r8)
   1004c:	00010055 	.word	0x00010055
   10050:	0001050d 	.word	0x0001050d

00010054 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   10054:	b590      	push	{r4, r7, lr}
   10056:	b08b      	sub	sp, #44	; 0x2c
   10058:	af00      	add	r7, sp, #0
   1005a:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   1005c:	687b      	ldr	r3, [r7, #4]
   1005e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10060:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   10062:	4b9a      	ldr	r3, [pc, #616]	; (102cc <_http_client_handle_header+0x278>)
   10064:	681a      	ldr	r2, [r3, #0]
   10066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10068:	0011      	movs	r1, r2
   1006a:	0018      	movs	r0, r3
   1006c:	4b98      	ldr	r3, [pc, #608]	; (102d0 <_http_client_handle_header+0x27c>)
   1006e:	4798      	blx	r3
   10070:	0003      	movs	r3, r0
   10072:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   10074:	69bb      	ldr	r3, [r7, #24]
   10076:	2b00      	cmp	r3, #0
   10078:	d007      	beq.n	1008a <_http_client_handle_header+0x36>
   1007a:	687b      	ldr	r3, [r7, #4]
   1007c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1007e:	687b      	ldr	r3, [r7, #4]
   10080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10082:	18d2      	adds	r2, r2, r3
   10084:	69bb      	ldr	r3, [r7, #24]
   10086:	429a      	cmp	r2, r3
   10088:	d807      	bhi.n	1009a <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   1008a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1008c:	687b      	ldr	r3, [r7, #4]
   1008e:	0011      	movs	r1, r2
   10090:	0018      	movs	r0, r3
   10092:	4b90      	ldr	r3, [pc, #576]	; (102d4 <_http_client_handle_header+0x280>)
   10094:	4798      	blx	r3
			return 0;
   10096:	2300      	movs	r3, #0
   10098:	e114      	b.n	102c4 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   1009a:	4b8c      	ldr	r3, [pc, #560]	; (102cc <_http_client_handle_header+0x278>)
   1009c:	681c      	ldr	r4, [r3, #0]
   1009e:	4b8b      	ldr	r3, [pc, #556]	; (102cc <_http_client_handle_header+0x278>)
   100a0:	681b      	ldr	r3, [r3, #0]
   100a2:	0018      	movs	r0, r3
   100a4:	4b8c      	ldr	r3, [pc, #560]	; (102d8 <_http_client_handle_header+0x284>)
   100a6:	4798      	blx	r3
   100a8:	0002      	movs	r2, r0
   100aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   100ac:	0021      	movs	r1, r4
   100ae:	0018      	movs	r0, r3
   100b0:	4b8a      	ldr	r3, [pc, #552]	; (102dc <_http_client_handle_header+0x288>)
   100b2:	4798      	blx	r3
   100b4:	1e03      	subs	r3, r0, #0
   100b6:	d15d      	bne.n	10174 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   100b8:	4b84      	ldr	r3, [pc, #528]	; (102cc <_http_client_handle_header+0x278>)
   100ba:	681b      	ldr	r3, [r3, #0]
   100bc:	0018      	movs	r0, r3
   100be:	4b86      	ldr	r3, [pc, #536]	; (102d8 <_http_client_handle_header+0x284>)
   100c0:	4798      	blx	r3
   100c2:	0002      	movs	r2, r0
   100c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   100c6:	189a      	adds	r2, r3, r2
   100c8:	687b      	ldr	r3, [r7, #4]
   100ca:	0011      	movs	r1, r2
   100cc:	0018      	movs	r0, r3
   100ce:	4b81      	ldr	r3, [pc, #516]	; (102d4 <_http_client_handle_header+0x280>)
   100d0:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   100d2:	687b      	ldr	r3, [r7, #4]
   100d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   100d6:	2b00      	cmp	r3, #0
   100d8:	d046      	beq.n	10168 <_http_client_handle_header+0x114>
   100da:	687b      	ldr	r3, [r7, #4]
   100dc:	22e4      	movs	r2, #228	; 0xe4
   100de:	5a9b      	ldrh	r3, [r3, r2]
   100e0:	2b00      	cmp	r3, #0
   100e2:	d041      	beq.n	10168 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   100e4:	687b      	ldr	r3, [r7, #4]
   100e6:	22dc      	movs	r2, #220	; 0xdc
   100e8:	589b      	ldr	r3, [r3, r2]
   100ea:	2b00      	cmp	r3, #0
   100ec:	da19      	bge.n	10122 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   100ee:	687b      	ldr	r3, [r7, #4]
   100f0:	22e4      	movs	r2, #228	; 0xe4
   100f2:	5a9a      	ldrh	r2, [r3, r2]
   100f4:	230c      	movs	r3, #12
   100f6:	18fb      	adds	r3, r7, r3
   100f8:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   100fa:	230c      	movs	r3, #12
   100fc:	18fb      	adds	r3, r7, r3
   100fe:	2201      	movs	r2, #1
   10100:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   10102:	687b      	ldr	r3, [r7, #4]
   10104:	22e0      	movs	r2, #224	; 0xe0
   10106:	2100      	movs	r1, #0
   10108:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   1010a:	230c      	movs	r3, #12
   1010c:	18fb      	adds	r3, r7, r3
   1010e:	2200      	movs	r2, #0
   10110:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   10112:	687b      	ldr	r3, [r7, #4]
   10114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10116:	220c      	movs	r2, #12
   10118:	18ba      	adds	r2, r7, r2
   1011a:	6878      	ldr	r0, [r7, #4]
   1011c:	2102      	movs	r1, #2
   1011e:	4798      	blx	r3
   10120:	e022      	b.n	10168 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   10122:	687b      	ldr	r3, [r7, #4]
   10124:	22dc      	movs	r2, #220	; 0xdc
   10126:	589a      	ldr	r2, [r3, r2]
   10128:	687b      	ldr	r3, [r7, #4]
   1012a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1012c:	429a      	cmp	r2, r3
   1012e:	dd1b      	ble.n	10168 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   10130:	687b      	ldr	r3, [r7, #4]
   10132:	22e4      	movs	r2, #228	; 0xe4
   10134:	5a9a      	ldrh	r2, [r3, r2]
   10136:	230c      	movs	r3, #12
   10138:	18fb      	adds	r3, r7, r3
   1013a:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   1013c:	687b      	ldr	r3, [r7, #4]
   1013e:	22dc      	movs	r2, #220	; 0xdc
   10140:	589b      	ldr	r3, [r3, r2]
   10142:	001a      	movs	r2, r3
   10144:	230c      	movs	r3, #12
   10146:	18fb      	adds	r3, r7, r3
   10148:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   1014a:	230c      	movs	r3, #12
   1014c:	18fb      	adds	r3, r7, r3
   1014e:	2200      	movs	r2, #0
   10150:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   10152:	687b      	ldr	r3, [r7, #4]
   10154:	22e0      	movs	r2, #224	; 0xe0
   10156:	2100      	movs	r1, #0
   10158:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1015a:	687b      	ldr	r3, [r7, #4]
   1015c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1015e:	220c      	movs	r2, #12
   10160:	18ba      	adds	r2, r7, r2
   10162:	6878      	ldr	r0, [r7, #4]
   10164:	2102      	movs	r1, #2
   10166:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   10168:	687b      	ldr	r3, [r7, #4]
   1016a:	22d8      	movs	r2, #216	; 0xd8
   1016c:	2101      	movs	r1, #1
   1016e:	5099      	str	r1, [r3, r2]
			return 1;
   10170:	2301      	movs	r3, #1
   10172:	e0a7      	b.n	102c4 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   10174:	495a      	ldr	r1, [pc, #360]	; (102e0 <_http_client_handle_header+0x28c>)
   10176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10178:	2210      	movs	r2, #16
   1017a:	0018      	movs	r0, r3
   1017c:	4b57      	ldr	r3, [pc, #348]	; (102dc <_http_client_handle_header+0x288>)
   1017e:	4798      	blx	r3
   10180:	1e03      	subs	r3, r0, #0
   10182:	d109      	bne.n	10198 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   10184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10186:	3310      	adds	r3, #16
   10188:	0018      	movs	r0, r3
   1018a:	4b56      	ldr	r3, [pc, #344]	; (102e4 <_http_client_handle_header+0x290>)
   1018c:	4798      	blx	r3
   1018e:	0001      	movs	r1, r0
   10190:	687b      	ldr	r3, [r7, #4]
   10192:	22dc      	movs	r2, #220	; 0xdc
   10194:	5099      	str	r1, [r3, r2]
   10196:	e08b      	b.n	102b0 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   10198:	4953      	ldr	r1, [pc, #332]	; (102e8 <_http_client_handle_header+0x294>)
   1019a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1019c:	2213      	movs	r2, #19
   1019e:	0018      	movs	r0, r3
   101a0:	4b4e      	ldr	r3, [pc, #312]	; (102dc <_http_client_handle_header+0x288>)
   101a2:	4798      	blx	r3
   101a4:	1e03      	subs	r3, r0, #0
   101a6:	d127      	bne.n	101f8 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   101a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101aa:	3313      	adds	r3, #19
   101ac:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   101ae:	e01e      	b.n	101ee <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   101b0:	6a3b      	ldr	r3, [r7, #32]
   101b2:	781b      	ldrb	r3, [r3, #0]
   101b4:	2b20      	cmp	r3, #32
   101b6:	d103      	bne.n	101c0 <_http_client_handle_header+0x16c>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
			for (; ptr_line_end > type_ptr; type_ptr++) {
   101b8:	6a3b      	ldr	r3, [r7, #32]
   101ba:	3301      	adds	r3, #1
   101bc:	623b      	str	r3, [r7, #32]
   101be:	e016      	b.n	101ee <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   101c0:	6a3b      	ldr	r3, [r7, #32]
   101c2:	781b      	ldrb	r3, [r3, #0]
   101c4:	2b43      	cmp	r3, #67	; 0x43
   101c6:	d003      	beq.n	101d0 <_http_client_handle_header+0x17c>
   101c8:	6a3b      	ldr	r3, [r7, #32]
   101ca:	781b      	ldrb	r3, [r3, #0]
   101cc:	2b63      	cmp	r3, #99	; 0x63
   101ce:	d105      	bne.n	101dc <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   101d0:	687b      	ldr	r3, [r7, #4]
   101d2:	21cc      	movs	r1, #204	; 0xcc
   101d4:	2201      	movs	r2, #1
   101d6:	4252      	negs	r2, r2
   101d8:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   101da:	e069      	b.n	102b0 <_http_client_handle_header+0x25c>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
					/* Chunked transfer */
					module->req.content_length = -1;
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
   101dc:	2386      	movs	r3, #134	; 0x86
   101de:	425a      	negs	r2, r3
   101e0:	687b      	ldr	r3, [r7, #4]
   101e2:	0011      	movs	r1, r2
   101e4:	0018      	movs	r0, r3
   101e6:	4b41      	ldr	r3, [pc, #260]	; (102ec <_http_client_handle_header+0x298>)
   101e8:	4798      	blx	r3
					return 0;
   101ea:	2300      	movs	r3, #0
   101ec:	e06a      	b.n	102c4 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
			for (; ptr_line_end > type_ptr; type_ptr++) {
   101ee:	69ba      	ldr	r2, [r7, #24]
   101f0:	6a3b      	ldr	r3, [r7, #32]
   101f2:	429a      	cmp	r2, r3
   101f4:	d8dc      	bhi.n	101b0 <_http_client_handle_header+0x15c>
   101f6:	e05b      	b.n	102b0 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   101f8:	493d      	ldr	r1, [pc, #244]	; (102f0 <_http_client_handle_header+0x29c>)
   101fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   101fc:	220c      	movs	r2, #12
   101fe:	0018      	movs	r0, r3
   10200:	4b36      	ldr	r3, [pc, #216]	; (102dc <_http_client_handle_header+0x288>)
   10202:	4798      	blx	r3
   10204:	1e03      	subs	r3, r0, #0
   10206:	d126      	bne.n	10256 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   10208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1020a:	330c      	adds	r3, #12
   1020c:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1020e:	e01d      	b.n	1024c <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   10210:	69fb      	ldr	r3, [r7, #28]
   10212:	781b      	ldrb	r3, [r3, #0]
   10214:	2b20      	cmp	r3, #32
   10216:	d103      	bne.n	10220 <_http_client_handle_header+0x1cc>
				}
				break;
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
			char *type_ptr = ptr + strlen("Connection: ");
			for (; ptr_line_end > type_ptr; type_ptr++) {
   10218:	69fb      	ldr	r3, [r7, #28]
   1021a:	3301      	adds	r3, #1
   1021c:	61fb      	str	r3, [r7, #28]
   1021e:	e015      	b.n	1024c <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   10220:	69fb      	ldr	r3, [r7, #28]
   10222:	781b      	ldrb	r3, [r3, #0]
   10224:	2b4b      	cmp	r3, #75	; 0x4b
   10226:	d003      	beq.n	10230 <_http_client_handle_header+0x1dc>
   10228:	69fb      	ldr	r3, [r7, #28]
   1022a:	781b      	ldrb	r3, [r3, #0]
   1022c:	2b6b      	cmp	r3, #107	; 0x6b
   1022e:	d106      	bne.n	1023e <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   10230:	687b      	ldr	r3, [r7, #4]
   10232:	2241      	movs	r2, #65	; 0x41
   10234:	5c99      	ldrb	r1, [r3, r2]
   10236:	2002      	movs	r0, #2
   10238:	4301      	orrs	r1, r0
   1023a:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   1023c:	e038      	b.n	102b0 <_http_client_handle_header+0x25c>
				if (*type_ptr == ' ') {
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
					module->permanent = 1;
				} else {
					module->permanent = 0;
   1023e:	687b      	ldr	r3, [r7, #4]
   10240:	2241      	movs	r2, #65	; 0x41
   10242:	5c99      	ldrb	r1, [r3, r2]
   10244:	2002      	movs	r0, #2
   10246:	4381      	bics	r1, r0
   10248:	5499      	strb	r1, [r3, r2]
				}
				break;
   1024a:	e031      	b.n	102b0 <_http_client_handle_header+0x25c>
				}
				break;
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
			char *type_ptr = ptr + strlen("Connection: ");
			for (; ptr_line_end > type_ptr; type_ptr++) {
   1024c:	69ba      	ldr	r2, [r7, #24]
   1024e:	69fb      	ldr	r3, [r7, #28]
   10250:	429a      	cmp	r2, r3
   10252:	d8dd      	bhi.n	10210 <_http_client_handle_header+0x1bc>
   10254:	e02c      	b.n	102b0 <_http_client_handle_header+0x25c>
				} else {
					module->permanent = 0;
				}
				break;
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   10256:	4927      	ldr	r1, [pc, #156]	; (102f4 <_http_client_handle_header+0x2a0>)
   10258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1025a:	2205      	movs	r2, #5
   1025c:	0018      	movs	r0, r3
   1025e:	4b1f      	ldr	r3, [pc, #124]	; (102dc <_http_client_handle_header+0x288>)
   10260:	4798      	blx	r3
   10262:	1e03      	subs	r3, r0, #0
   10264:	d124      	bne.n	102b0 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   10266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10268:	3309      	adds	r3, #9
   1026a:	0018      	movs	r0, r3
   1026c:	4b1d      	ldr	r3, [pc, #116]	; (102e4 <_http_client_handle_header+0x290>)
   1026e:	4798      	blx	r3
   10270:	0003      	movs	r3, r0
   10272:	b299      	uxth	r1, r3
   10274:	687b      	ldr	r3, [r7, #4]
   10276:	22e4      	movs	r2, #228	; 0xe4
   10278:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   1027a:	687b      	ldr	r3, [r7, #4]
   1027c:	22dc      	movs	r2, #220	; 0xdc
   1027e:	2100      	movs	r1, #0
   10280:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   10282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10284:	3305      	adds	r3, #5
   10286:	781b      	ldrb	r3, [r3, #0]
   10288:	2b31      	cmp	r3, #49	; 0x31
   1028a:	d804      	bhi.n	10296 <_http_client_handle_header+0x242>
   1028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1028e:	3307      	adds	r3, #7
   10290:	781b      	ldrb	r3, [r3, #0]
   10292:	2b30      	cmp	r3, #48	; 0x30
   10294:	d906      	bls.n	102a4 <_http_client_handle_header+0x250>
				module->permanent = 1;
   10296:	687b      	ldr	r3, [r7, #4]
   10298:	2241      	movs	r2, #65	; 0x41
   1029a:	5c99      	ldrb	r1, [r3, r2]
   1029c:	2002      	movs	r0, #2
   1029e:	4301      	orrs	r1, r0
   102a0:	5499      	strb	r1, [r3, r2]
   102a2:	e005      	b.n	102b0 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   102a4:	687b      	ldr	r3, [r7, #4]
   102a6:	2241      	movs	r2, #65	; 0x41
   102a8:	5c99      	ldrb	r1, [r3, r2]
   102aa:	2002      	movs	r0, #2
   102ac:	4381      	bics	r1, r0
   102ae:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   102b0:	4b06      	ldr	r3, [pc, #24]	; (102cc <_http_client_handle_header+0x278>)
   102b2:	681b      	ldr	r3, [r3, #0]
   102b4:	0018      	movs	r0, r3
   102b6:	4b08      	ldr	r3, [pc, #32]	; (102d8 <_http_client_handle_header+0x284>)
   102b8:	4798      	blx	r3
   102ba:	0002      	movs	r2, r0
   102bc:	69bb      	ldr	r3, [r7, #24]
   102be:	189b      	adds	r3, r3, r2
   102c0:	627b      	str	r3, [r7, #36]	; 0x24
	}
   102c2:	e6ce      	b.n	10062 <_http_client_handle_header+0xe>
}
   102c4:	0018      	movs	r0, r3
   102c6:	46bd      	mov	sp, r7
   102c8:	b00b      	add	sp, #44	; 0x2c
   102ca:	bd90      	pop	{r4, r7, pc}
   102cc:	20000008 	.word	0x20000008
   102d0:	00017151 	.word	0x00017151
   102d4:	000106b9 	.word	0x000106b9
   102d8:	0001711f 	.word	0x0001711f
   102dc:	0001712d 	.word	0x0001712d
   102e0:	00019510 	.word	0x00019510
   102e4:	00016bad 	.word	0x00016bad
   102e8:	00019534 	.word	0x00019534
   102ec:	0000f6ed 	.word	0x0000f6ed
   102f0:	00019548 	.word	0x00019548
   102f4:	00019558 	.word	0x00019558

000102f8 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   102f8:	b580      	push	{r7, lr}
   102fa:	b088      	sub	sp, #32
   102fc:	af00      	add	r7, sp, #0
   102fe:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   10300:	687b      	ldr	r3, [r7, #4]
   10302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10304:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   10306:	2300      	movs	r3, #0
   10308:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   1030a:	687b      	ldr	r3, [r7, #4]
   1030c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1030e:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   10310:	687b      	ldr	r3, [r7, #4]
   10312:	22e0      	movs	r2, #224	; 0xe0
   10314:	589b      	ldr	r3, [r3, r2]
   10316:	2b00      	cmp	r3, #0
   10318:	db71      	blt.n	103fe <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   1031a:	687b      	ldr	r3, [r7, #4]
   1031c:	22e0      	movs	r2, #224	; 0xe0
   1031e:	589b      	ldr	r3, [r3, r2]
   10320:	2b00      	cmp	r3, #0
   10322:	d134      	bne.n	1038e <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   10324:	687b      	ldr	r3, [r7, #4]
   10326:	22d8      	movs	r2, #216	; 0xd8
   10328:	2100      	movs	r1, #0
   1032a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   1032c:	687b      	ldr	r3, [r7, #4]
   1032e:	22e4      	movs	r2, #228	; 0xe4
   10330:	2100      	movs	r1, #0
   10332:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   10334:	2308      	movs	r3, #8
   10336:	18fb      	adds	r3, r7, r3
   10338:	2201      	movs	r2, #1
   1033a:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   1033c:	2308      	movs	r3, #8
   1033e:	18fb      	adds	r3, r7, r3
   10340:	2200      	movs	r2, #0
   10342:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   10344:	2308      	movs	r3, #8
   10346:	18fb      	adds	r3, r7, r3
   10348:	2200      	movs	r2, #0
   1034a:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   1034c:	687b      	ldr	r3, [r7, #4]
   1034e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10350:	2b00      	cmp	r3, #0
   10352:	d006      	beq.n	10362 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   10354:	687b      	ldr	r3, [r7, #4]
   10356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10358:	2208      	movs	r2, #8
   1035a:	18ba      	adds	r2, r7, r2
   1035c:	6878      	ldr	r0, [r7, #4]
   1035e:	2103      	movs	r1, #3
   10360:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   10362:	687b      	ldr	r3, [r7, #4]
   10364:	2241      	movs	r2, #65	; 0x41
   10366:	5c9b      	ldrb	r3, [r3, r2]
   10368:	2202      	movs	r2, #2
   1036a:	4013      	ands	r3, r2
   1036c:	b2db      	uxtb	r3, r3
   1036e:	2b00      	cmp	r3, #0
   10370:	d105      	bne.n	1037e <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   10372:	687b      	ldr	r3, [r7, #4]
   10374:	2100      	movs	r1, #0
   10376:	0018      	movs	r0, r3
   10378:	4b62      	ldr	r3, [pc, #392]	; (10504 <_http_client_read_chuked_entity+0x20c>)
   1037a:	4798      	blx	r3
					return;
   1037c:	e0bf      	b.n	104fe <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   1037e:	697b      	ldr	r3, [r7, #20]
   10380:	1c9a      	adds	r2, r3, #2
   10382:	687b      	ldr	r3, [r7, #4]
   10384:	0011      	movs	r1, r2
   10386:	0018      	movs	r0, r3
   10388:	4b5f      	ldr	r3, [pc, #380]	; (10508 <_http_client_read_chuked_entity+0x210>)
   1038a:	4798      	blx	r3
   1038c:	e0b2      	b.n	104f4 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   1038e:	687b      	ldr	r3, [r7, #4]
   10390:	22e0      	movs	r2, #224	; 0xe0
   10392:	589a      	ldr	r2, [r3, r2]
   10394:	69fb      	ldr	r3, [r7, #28]
   10396:	429a      	cmp	r2, r3
   10398:	dd00      	ble.n	1039c <_http_client_read_chuked_entity+0xa4>
   1039a:	e0ab      	b.n	104f4 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   1039c:	687b      	ldr	r3, [r7, #4]
   1039e:	22e0      	movs	r2, #224	; 0xe0
   103a0:	589b      	ldr	r3, [r3, r2]
   103a2:	001a      	movs	r2, r3
   103a4:	2308      	movs	r3, #8
   103a6:	18fb      	adds	r3, r7, r3
   103a8:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   103aa:	2308      	movs	r3, #8
   103ac:	18fb      	adds	r3, r7, r3
   103ae:	697a      	ldr	r2, [r7, #20]
   103b0:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   103b2:	2308      	movs	r3, #8
   103b4:	18fb      	adds	r3, r7, r3
   103b6:	2200      	movs	r2, #0
   103b8:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   103ba:	687b      	ldr	r3, [r7, #4]
   103bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   103be:	2b00      	cmp	r3, #0
   103c0:	d006      	beq.n	103d0 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   103c2:	687b      	ldr	r3, [r7, #4]
   103c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   103c6:	2208      	movs	r2, #8
   103c8:	18ba      	adds	r2, r7, r2
   103ca:	6878      	ldr	r0, [r7, #4]
   103cc:	2103      	movs	r1, #3
   103ce:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   103d0:	687b      	ldr	r3, [r7, #4]
   103d2:	22e0      	movs	r2, #224	; 0xe0
   103d4:	589b      	ldr	r3, [r3, r2]
   103d6:	3302      	adds	r3, #2
   103d8:	697a      	ldr	r2, [r7, #20]
   103da:	18d2      	adds	r2, r2, r3
   103dc:	687b      	ldr	r3, [r7, #4]
   103de:	0011      	movs	r1, r2
   103e0:	0018      	movs	r0, r3
   103e2:	4b49      	ldr	r3, [pc, #292]	; (10508 <_http_client_read_chuked_entity+0x210>)
   103e4:	4798      	blx	r3
				length = (int)module->recved_size;
   103e6:	687b      	ldr	r3, [r7, #4]
   103e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   103ea:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   103ec:	687b      	ldr	r3, [r7, #4]
   103ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   103f0:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   103f2:	687b      	ldr	r3, [r7, #4]
   103f4:	21e0      	movs	r1, #224	; 0xe0
   103f6:	2201      	movs	r2, #1
   103f8:	4252      	negs	r2, r2
   103fa:	505a      	str	r2, [r3, r1]
   103fc:	e07a      	b.n	104f4 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   103fe:	687b      	ldr	r3, [r7, #4]
   10400:	22e0      	movs	r2, #224	; 0xe0
   10402:	2100      	movs	r1, #0
   10404:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   10406:	e05a      	b.n	104be <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   10408:	697b      	ldr	r3, [r7, #20]
   1040a:	781b      	ldrb	r3, [r3, #0]
   1040c:	2b0a      	cmp	r3, #10
   1040e:	d106      	bne.n	1041e <_http_client_read_chuked_entity+0x126>
					buffer++;
   10410:	697b      	ldr	r3, [r7, #20]
   10412:	3301      	adds	r3, #1
   10414:	617b      	str	r3, [r7, #20]
					length--;
   10416:	69fb      	ldr	r3, [r7, #28]
   10418:	3b01      	subs	r3, #1
   1041a:	61fb      	str	r3, [r7, #28]
					break;
   1041c:	e052      	b.n	104c4 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   1041e:	69bb      	ldr	r3, [r7, #24]
   10420:	2b00      	cmp	r3, #0
   10422:	d145      	bne.n	104b0 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   10424:	697b      	ldr	r3, [r7, #20]
   10426:	781b      	ldrb	r3, [r3, #0]
   10428:	2b2f      	cmp	r3, #47	; 0x2f
   1042a:	d910      	bls.n	1044e <_http_client_read_chuked_entity+0x156>
   1042c:	697b      	ldr	r3, [r7, #20]
   1042e:	781b      	ldrb	r3, [r3, #0]
   10430:	2b39      	cmp	r3, #57	; 0x39
   10432:	d80c      	bhi.n	1044e <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   10434:	687b      	ldr	r3, [r7, #4]
   10436:	22e0      	movs	r2, #224	; 0xe0
   10438:	589b      	ldr	r3, [r3, r2]
   1043a:	011b      	lsls	r3, r3, #4
   1043c:	697a      	ldr	r2, [r7, #20]
   1043e:	7812      	ldrb	r2, [r2, #0]
   10440:	189b      	adds	r3, r3, r2
   10442:	3b30      	subs	r3, #48	; 0x30
   10444:	001a      	movs	r2, r3
   10446:	687b      	ldr	r3, [r7, #4]
   10448:	21e0      	movs	r1, #224	; 0xe0
   1044a:	505a      	str	r2, [r3, r1]
   1044c:	e031      	b.n	104b2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   1044e:	697b      	ldr	r3, [r7, #20]
   10450:	781b      	ldrb	r3, [r3, #0]
   10452:	2b60      	cmp	r3, #96	; 0x60
   10454:	d910      	bls.n	10478 <_http_client_read_chuked_entity+0x180>
   10456:	697b      	ldr	r3, [r7, #20]
   10458:	781b      	ldrb	r3, [r3, #0]
   1045a:	2b66      	cmp	r3, #102	; 0x66
   1045c:	d80c      	bhi.n	10478 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   1045e:	687b      	ldr	r3, [r7, #4]
   10460:	22e0      	movs	r2, #224	; 0xe0
   10462:	589b      	ldr	r3, [r3, r2]
   10464:	011b      	lsls	r3, r3, #4
   10466:	697a      	ldr	r2, [r7, #20]
   10468:	7812      	ldrb	r2, [r2, #0]
   1046a:	189b      	adds	r3, r3, r2
   1046c:	3b61      	subs	r3, #97	; 0x61
   1046e:	001a      	movs	r2, r3
   10470:	687b      	ldr	r3, [r7, #4]
   10472:	21e0      	movs	r1, #224	; 0xe0
   10474:	505a      	str	r2, [r3, r1]
   10476:	e01c      	b.n	104b2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   10478:	697b      	ldr	r3, [r7, #20]
   1047a:	781b      	ldrb	r3, [r3, #0]
   1047c:	2b40      	cmp	r3, #64	; 0x40
   1047e:	d910      	bls.n	104a2 <_http_client_read_chuked_entity+0x1aa>
   10480:	697b      	ldr	r3, [r7, #20]
   10482:	781b      	ldrb	r3, [r3, #0]
   10484:	2b46      	cmp	r3, #70	; 0x46
   10486:	d80c      	bhi.n	104a2 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   10488:	687b      	ldr	r3, [r7, #4]
   1048a:	22e0      	movs	r2, #224	; 0xe0
   1048c:	589b      	ldr	r3, [r3, r2]
   1048e:	011b      	lsls	r3, r3, #4
   10490:	697a      	ldr	r2, [r7, #20]
   10492:	7812      	ldrb	r2, [r2, #0]
   10494:	189b      	adds	r3, r3, r2
   10496:	3b41      	subs	r3, #65	; 0x41
   10498:	001a      	movs	r2, r3
   1049a:	687b      	ldr	r3, [r7, #4]
   1049c:	21e0      	movs	r1, #224	; 0xe0
   1049e:	505a      	str	r2, [r3, r1]
   104a0:	e007      	b.n	104b2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   104a2:	697b      	ldr	r3, [r7, #20]
   104a4:	781b      	ldrb	r3, [r3, #0]
   104a6:	2b3b      	cmp	r3, #59	; 0x3b
   104a8:	d103      	bne.n	104b2 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   104aa:	2301      	movs	r3, #1
   104ac:	61bb      	str	r3, [r7, #24]
   104ae:	e000      	b.n	104b2 <_http_client_read_chuked_entity+0x1ba>
					buffer++;
					length--;
					break;
				}
				if (extension != 0) {
					continue;
   104b0:	46c0      	nop			; (mov r8, r8)
				module->resp.read_length = -1;
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
			for (; length > 0; buffer++, length--) {
   104b2:	697b      	ldr	r3, [r7, #20]
   104b4:	3301      	adds	r3, #1
   104b6:	617b      	str	r3, [r7, #20]
   104b8:	69fb      	ldr	r3, [r7, #28]
   104ba:	3b01      	subs	r3, #1
   104bc:	61fb      	str	r3, [r7, #28]
   104be:	69fb      	ldr	r3, [r7, #28]
   104c0:	2b00      	cmp	r3, #0
   104c2:	dca1      	bgt.n	10408 <_http_client_read_chuked_entity+0x110>
				} else if (*buffer == ';') {
					extension = 1;
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   104c4:	687b      	ldr	r3, [r7, #4]
   104c6:	22e0      	movs	r2, #224	; 0xe0
   104c8:	589a      	ldr	r2, [r3, r2]
   104ca:	687b      	ldr	r3, [r7, #4]
   104cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   104ce:	429a      	cmp	r2, r3
   104d0:	dd07      	ble.n	104e2 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   104d2:	238b      	movs	r3, #139	; 0x8b
   104d4:	425a      	negs	r2, r3
   104d6:	687b      	ldr	r3, [r7, #4]
   104d8:	0011      	movs	r1, r2
   104da:	0018      	movs	r0, r3
   104dc:	4b09      	ldr	r3, [pc, #36]	; (10504 <_http_client_read_chuked_entity+0x20c>)
   104de:	4798      	blx	r3
				return;
   104e0:	e00d      	b.n	104fe <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   104e2:	69fb      	ldr	r3, [r7, #28]
   104e4:	2b00      	cmp	r3, #0
   104e6:	d105      	bne.n	104f4 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   104e8:	687b      	ldr	r3, [r7, #4]
   104ea:	21e0      	movs	r1, #224	; 0xe0
   104ec:	2201      	movs	r2, #1
   104ee:	4252      	negs	r2, r2
   104f0:	505a      	str	r2, [r3, r1]
				return;
   104f2:	e004      	b.n	104fe <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   104f4:	687b      	ldr	r3, [r7, #4]
   104f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   104f8:	2b00      	cmp	r3, #0
   104fa:	d000      	beq.n	104fe <_http_client_read_chuked_entity+0x206>
   104fc:	e708      	b.n	10310 <_http_client_read_chuked_entity+0x18>
}
   104fe:	46bd      	mov	sp, r7
   10500:	b008      	add	sp, #32
   10502:	bd80      	pop	{r7, pc}
   10504:	0000f6ed 	.word	0x0000f6ed
   10508:	000106b9 	.word	0x000106b9

0001050c <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   1050c:	b580      	push	{r7, lr}
   1050e:	b086      	sub	sp, #24
   10510:	af00      	add	r7, sp, #0
   10512:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   10514:	687b      	ldr	r3, [r7, #4]
   10516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   10518:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   1051a:	687b      	ldr	r3, [r7, #4]
   1051c:	22dc      	movs	r2, #220	; 0xdc
   1051e:	589b      	ldr	r3, [r3, r2]
   10520:	2b00      	cmp	r3, #0
   10522:	db58      	blt.n	105d6 <_http_client_handle_entity+0xca>
   10524:	687b      	ldr	r3, [r7, #4]
   10526:	22dc      	movs	r2, #220	; 0xdc
   10528:	589a      	ldr	r2, [r3, r2]
   1052a:	687b      	ldr	r3, [r7, #4]
   1052c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1052e:	429a      	cmp	r2, r3
   10530:	dc51      	bgt.n	105d6 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   10532:	687b      	ldr	r3, [r7, #4]
   10534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10536:	0019      	movs	r1, r3
   10538:	687b      	ldr	r3, [r7, #4]
   1053a:	22dc      	movs	r2, #220	; 0xdc
   1053c:	589b      	ldr	r3, [r3, r2]
   1053e:	4299      	cmp	r1, r3
   10540:	da00      	bge.n	10544 <_http_client_handle_entity+0x38>
   10542:	e0a9      	b.n	10698 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   10544:	687b      	ldr	r3, [r7, #4]
   10546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10548:	2b00      	cmp	r3, #0
   1054a:	d020      	beq.n	1058e <_http_client_handle_entity+0x82>
   1054c:	687b      	ldr	r3, [r7, #4]
   1054e:	22e4      	movs	r2, #228	; 0xe4
   10550:	5a9b      	ldrh	r3, [r3, r2]
   10552:	2b00      	cmp	r3, #0
   10554:	d01b      	beq.n	1058e <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   10556:	687b      	ldr	r3, [r7, #4]
   10558:	22e4      	movs	r2, #228	; 0xe4
   1055a:	5a9a      	ldrh	r2, [r3, r2]
   1055c:	2308      	movs	r3, #8
   1055e:	18fb      	adds	r3, r7, r3
   10560:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   10562:	2308      	movs	r3, #8
   10564:	18fb      	adds	r3, r7, r3
   10566:	2200      	movs	r2, #0
   10568:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   1056a:	687b      	ldr	r3, [r7, #4]
   1056c:	22dc      	movs	r2, #220	; 0xdc
   1056e:	589b      	ldr	r3, [r3, r2]
   10570:	001a      	movs	r2, r3
   10572:	2308      	movs	r3, #8
   10574:	18fb      	adds	r3, r7, r3
   10576:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   10578:	2308      	movs	r3, #8
   1057a:	18fb      	adds	r3, r7, r3
   1057c:	697a      	ldr	r2, [r7, #20]
   1057e:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   10580:	687b      	ldr	r3, [r7, #4]
   10582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10584:	2208      	movs	r2, #8
   10586:	18ba      	adds	r2, r7, r2
   10588:	6878      	ldr	r0, [r7, #4]
   1058a:	2102      	movs	r1, #2
   1058c:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   1058e:	687b      	ldr	r3, [r7, #4]
   10590:	22d8      	movs	r2, #216	; 0xd8
   10592:	2100      	movs	r1, #0
   10594:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   10596:	687b      	ldr	r3, [r7, #4]
   10598:	22e4      	movs	r2, #228	; 0xe4
   1059a:	2100      	movs	r1, #0
   1059c:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   1059e:	687b      	ldr	r3, [r7, #4]
   105a0:	2241      	movs	r2, #65	; 0x41
   105a2:	5c9b      	ldrb	r3, [r3, r2]
   105a4:	2202      	movs	r2, #2
   105a6:	4013      	ands	r3, r2
   105a8:	b2db      	uxtb	r3, r3
   105aa:	2b00      	cmp	r3, #0
   105ac:	d105      	bne.n	105ba <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   105ae:	687b      	ldr	r3, [r7, #4]
   105b0:	2100      	movs	r1, #0
   105b2:	0018      	movs	r0, r3
   105b4:	4b3b      	ldr	r3, [pc, #236]	; (106a4 <_http_client_handle_entity+0x198>)
   105b6:	4798      	blx	r3
	union http_client_data data;
	char *buffer = module->config.recv_buffer;

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
		if ((int)module->recved_size >= module->resp.content_length) {
   105b8:	e06e      	b.n	10698 <_http_client_handle_entity+0x18c>
			
			if (module->permanent == 0) {
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   105ba:	687b      	ldr	r3, [r7, #4]
   105bc:	22dc      	movs	r2, #220	; 0xdc
   105be:	589b      	ldr	r3, [r3, r2]
   105c0:	001a      	movs	r2, r3
   105c2:	697b      	ldr	r3, [r7, #20]
   105c4:	189a      	adds	r2, r3, r2
   105c6:	687b      	ldr	r3, [r7, #4]
   105c8:	0011      	movs	r1, r2
   105ca:	0018      	movs	r0, r3
   105cc:	4b36      	ldr	r3, [pc, #216]	; (106a8 <_http_client_handle_entity+0x19c>)
   105ce:	4798      	blx	r3
				return module->recved_size;
   105d0:	687b      	ldr	r3, [r7, #4]
   105d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   105d4:	e061      	b.n	1069a <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   105d6:	687b      	ldr	r3, [r7, #4]
   105d8:	22dc      	movs	r2, #220	; 0xdc
   105da:	589b      	ldr	r3, [r3, r2]
   105dc:	2b00      	cmp	r3, #0
   105de:	db57      	blt.n	10690 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   105e0:	687b      	ldr	r3, [r7, #4]
   105e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   105e4:	2308      	movs	r3, #8
   105e6:	18fb      	adds	r3, r7, r3
   105e8:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   105ea:	2308      	movs	r3, #8
   105ec:	18fb      	adds	r3, r7, r3
   105ee:	697a      	ldr	r2, [r7, #20]
   105f0:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   105f2:	687b      	ldr	r3, [r7, #4]
   105f4:	22e0      	movs	r2, #224	; 0xe0
   105f6:	589a      	ldr	r2, [r3, r2]
   105f8:	687b      	ldr	r3, [r7, #4]
   105fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   105fc:	18d2      	adds	r2, r2, r3
   105fe:	687b      	ldr	r3, [r7, #4]
   10600:	21e0      	movs	r1, #224	; 0xe0
   10602:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   10604:	687b      	ldr	r3, [r7, #4]
   10606:	22dc      	movs	r2, #220	; 0xdc
   10608:	589a      	ldr	r2, [r3, r2]
   1060a:	687b      	ldr	r3, [r7, #4]
   1060c:	21e0      	movs	r1, #224	; 0xe0
   1060e:	585b      	ldr	r3, [r3, r1]
   10610:	429a      	cmp	r2, r3
   10612:	dc0c      	bgt.n	1062e <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   10614:	687b      	ldr	r3, [r7, #4]
   10616:	22d8      	movs	r2, #216	; 0xd8
   10618:	2100      	movs	r1, #0
   1061a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   1061c:	687b      	ldr	r3, [r7, #4]
   1061e:	22e4      	movs	r2, #228	; 0xe4
   10620:	2100      	movs	r1, #0
   10622:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   10624:	2308      	movs	r3, #8
   10626:	18fb      	adds	r3, r7, r3
   10628:	2201      	movs	r2, #1
   1062a:	721a      	strb	r2, [r3, #8]
   1062c:	e003      	b.n	10636 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   1062e:	2308      	movs	r3, #8
   10630:	18fb      	adds	r3, r7, r3
   10632:	2200      	movs	r2, #0
   10634:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   10636:	687b      	ldr	r3, [r7, #4]
   10638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1063a:	2b00      	cmp	r3, #0
   1063c:	d006      	beq.n	1064c <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1063e:	687b      	ldr	r3, [r7, #4]
   10640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   10642:	2208      	movs	r2, #8
   10644:	18ba      	adds	r2, r7, r2
   10646:	6878      	ldr	r0, [r7, #4]
   10648:	2103      	movs	r1, #3
   1064a:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   1064c:	2308      	movs	r3, #8
   1064e:	18fb      	adds	r3, r7, r3
   10650:	7a1b      	ldrb	r3, [r3, #8]
   10652:	2b01      	cmp	r3, #1
   10654:	d112      	bne.n	1067c <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   10656:	687b      	ldr	r3, [r7, #4]
   10658:	2241      	movs	r2, #65	; 0x41
   1065a:	5c9b      	ldrb	r3, [r3, r2]
   1065c:	2202      	movs	r2, #2
   1065e:	4013      	ands	r3, r2
   10660:	b2db      	uxtb	r3, r3
   10662:	2b00      	cmp	r3, #0
   10664:	d10a      	bne.n	1067c <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   10666:	4b11      	ldr	r3, [pc, #68]	; (106ac <_http_client_handle_entity+0x1a0>)
   10668:	0018      	movs	r0, r3
   1066a:	4b11      	ldr	r3, [pc, #68]	; (106b0 <_http_client_handle_entity+0x1a4>)
   1066c:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   1066e:	687b      	ldr	r3, [r7, #4]
   10670:	2100      	movs	r1, #0
   10672:	0018      	movs	r0, r3
   10674:	4b0b      	ldr	r3, [pc, #44]	; (106a4 <_http_client_handle_entity+0x198>)
   10676:	4798      	blx	r3
					return 0;
   10678:	2300      	movs	r3, #0
   1067a:	e00e      	b.n	1069a <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   1067c:	687b      	ldr	r3, [r7, #4]
   1067e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   10680:	697a      	ldr	r2, [r7, #20]
   10682:	18d2      	adds	r2, r2, r3
   10684:	687b      	ldr	r3, [r7, #4]
   10686:	0011      	movs	r1, r2
   10688:	0018      	movs	r0, r3
   1068a:	4b07      	ldr	r3, [pc, #28]	; (106a8 <_http_client_handle_entity+0x19c>)
   1068c:	4798      	blx	r3
   1068e:	e003      	b.n	10698 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   10690:	687b      	ldr	r3, [r7, #4]
   10692:	0018      	movs	r0, r3
   10694:	4b07      	ldr	r3, [pc, #28]	; (106b4 <_http_client_handle_entity+0x1a8>)
   10696:	4798      	blx	r3
		}
	}

	return 0;
   10698:	2300      	movs	r3, #0
}
   1069a:	0018      	movs	r0, r3
   1069c:	46bd      	mov	sp, r7
   1069e:	b006      	add	sp, #24
   106a0:	bd80      	pop	{r7, pc}
   106a2:	46c0      	nop			; (mov r8, r8)
   106a4:	0000f6ed 	.word	0x0000f6ed
   106a8:	000106b9 	.word	0x000106b9
   106ac:	00019560 	.word	0x00019560
   106b0:	00016ed1 	.word	0x00016ed1
   106b4:	000102f9 	.word	0x000102f9

000106b8 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   106b8:	b580      	push	{r7, lr}
   106ba:	b084      	sub	sp, #16
   106bc:	af00      	add	r7, sp, #0
   106be:	6078      	str	r0, [r7, #4]
   106c0:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   106c2:	687b      	ldr	r3, [r7, #4]
   106c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   106c6:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   106c8:	687b      	ldr	r3, [r7, #4]
   106ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   106cc:	001a      	movs	r2, r3
   106ce:	683b      	ldr	r3, [r7, #0]
   106d0:	1ad2      	subs	r2, r2, r3
   106d2:	68fb      	ldr	r3, [r7, #12]
   106d4:	18d3      	adds	r3, r2, r3
   106d6:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   106d8:	68bb      	ldr	r3, [r7, #8]
   106da:	2b00      	cmp	r3, #0
   106dc:	dd09      	ble.n	106f2 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   106de:	68ba      	ldr	r2, [r7, #8]
   106e0:	6839      	ldr	r1, [r7, #0]
   106e2:	68fb      	ldr	r3, [r7, #12]
   106e4:	0018      	movs	r0, r3
   106e6:	4b06      	ldr	r3, [pc, #24]	; (10700 <_http_client_move_buffer+0x48>)
   106e8:	4798      	blx	r3
		module->recved_size = remain;
   106ea:	68ba      	ldr	r2, [r7, #8]
   106ec:	687b      	ldr	r3, [r7, #4]
   106ee:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   106f0:	e002      	b.n	106f8 <_http_client_move_buffer+0x40>

	if (remain > 0) {
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   106f2:	687b      	ldr	r3, [r7, #4]
   106f4:	2200      	movs	r2, #0
   106f6:	645a      	str	r2, [r3, #68]	; 0x44
	}
}
   106f8:	46c0      	nop			; (mov r8, r8)
   106fa:	46bd      	mov	sp, r7
   106fc:	b004      	add	sp, #16
   106fe:	bd80      	pop	{r7, pc}
   10700:	00016c3f 	.word	0x00016c3f

00010704 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   10704:	b580      	push	{r7, lr}
   10706:	b084      	sub	sp, #16
   10708:	af00      	add	r7, sp, #0
   1070a:	60f8      	str	r0, [r7, #12]
   1070c:	60b9      	str	r1, [r7, #8]
   1070e:	607a      	str	r2, [r7, #4]
   10710:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   10712:	68fb      	ldr	r3, [r7, #12]
   10714:	687a      	ldr	r2, [r7, #4]
   10716:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   10718:	68fb      	ldr	r3, [r7, #12]
   1071a:	68ba      	ldr	r2, [r7, #8]
   1071c:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   1071e:	68fb      	ldr	r3, [r7, #12]
   10720:	2200      	movs	r2, #0
   10722:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   10724:	68fb      	ldr	r3, [r7, #12]
   10726:	683a      	ldr	r2, [r7, #0]
   10728:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   1072a:	68fb      	ldr	r3, [r7, #12]
   1072c:	69ba      	ldr	r2, [r7, #24]
   1072e:	60da      	str	r2, [r3, #12]
}
   10730:	46c0      	nop			; (mov r8, r8)
   10732:	46bd      	mov	sp, r7
   10734:	b004      	add	sp, #16
   10736:	bd80      	pop	{r7, pc}

00010738 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   10738:	b580      	push	{r7, lr}
   1073a:	b084      	sub	sp, #16
   1073c:	af00      	add	r7, sp, #0
   1073e:	6078      	str	r0, [r7, #4]
   10740:	000a      	movs	r2, r1
   10742:	1cfb      	adds	r3, r7, #3
   10744:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   10746:	687b      	ldr	r3, [r7, #4]
   10748:	681a      	ldr	r2, [r3, #0]
   1074a:	687b      	ldr	r3, [r7, #4]
   1074c:	685b      	ldr	r3, [r3, #4]
   1074e:	1ad3      	subs	r3, r2, r3
   10750:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   10752:	68fb      	ldr	r3, [r7, #12]
   10754:	2b00      	cmp	r3, #0
   10756:	dc03      	bgt.n	10760 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   10758:	687b      	ldr	r3, [r7, #4]
   1075a:	0018      	movs	r0, r3
   1075c:	4b08      	ldr	r3, [pc, #32]	; (10780 <stream_writer_send_8+0x48>)
   1075e:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   10760:	687b      	ldr	r3, [r7, #4]
   10762:	6919      	ldr	r1, [r3, #16]
   10764:	687b      	ldr	r3, [r7, #4]
   10766:	685b      	ldr	r3, [r3, #4]
   10768:	1c58      	adds	r0, r3, #1
   1076a:	687a      	ldr	r2, [r7, #4]
   1076c:	6050      	str	r0, [r2, #4]
   1076e:	18cb      	adds	r3, r1, r3
   10770:	1cfa      	adds	r2, r7, #3
   10772:	7812      	ldrb	r2, [r2, #0]
   10774:	701a      	strb	r2, [r3, #0]
}
   10776:	46c0      	nop			; (mov r8, r8)
   10778:	46bd      	mov	sp, r7
   1077a:	b004      	add	sp, #16
   1077c:	bd80      	pop	{r7, pc}
   1077e:	46c0      	nop			; (mov r8, r8)
   10780:	000107c1 	.word	0x000107c1

00010784 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   10784:	b580      	push	{r7, lr}
   10786:	b084      	sub	sp, #16
   10788:	af00      	add	r7, sp, #0
   1078a:	60f8      	str	r0, [r7, #12]
   1078c:	60b9      	str	r1, [r7, #8]
   1078e:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   10790:	e00d      	b.n	107ae <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   10792:	68bb      	ldr	r3, [r7, #8]
   10794:	781b      	ldrb	r3, [r3, #0]
   10796:	b25a      	sxtb	r2, r3
   10798:	68fb      	ldr	r3, [r7, #12]
   1079a:	0011      	movs	r1, r2
   1079c:	0018      	movs	r0, r3
   1079e:	4b07      	ldr	r3, [pc, #28]	; (107bc <stream_writer_send_buffer+0x38>)
   107a0:	4798      	blx	r3
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
	for (; length > 0; length--, buffer++) {
   107a2:	687b      	ldr	r3, [r7, #4]
   107a4:	3b01      	subs	r3, #1
   107a6:	607b      	str	r3, [r7, #4]
   107a8:	68bb      	ldr	r3, [r7, #8]
   107aa:	3301      	adds	r3, #1
   107ac:	60bb      	str	r3, [r7, #8]
   107ae:	687b      	ldr	r3, [r7, #4]
   107b0:	2b00      	cmp	r3, #0
   107b2:	d1ee      	bne.n	10792 <stream_writer_send_buffer+0xe>
		stream_writer_send_8(writer, *buffer);
	}
}
   107b4:	46c0      	nop			; (mov r8, r8)
   107b6:	46bd      	mov	sp, r7
   107b8:	b004      	add	sp, #16
   107ba:	bd80      	pop	{r7, pc}
   107bc:	00010739 	.word	0x00010739

000107c0 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   107c0:	b590      	push	{r4, r7, lr}
   107c2:	b083      	sub	sp, #12
   107c4:	af00      	add	r7, sp, #0
   107c6:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   107c8:	687b      	ldr	r3, [r7, #4]
   107ca:	685b      	ldr	r3, [r3, #4]
   107cc:	2b00      	cmp	r3, #0
   107ce:	d00c      	beq.n	107ea <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   107d0:	687b      	ldr	r3, [r7, #4]
   107d2:	689c      	ldr	r4, [r3, #8]
   107d4:	687b      	ldr	r3, [r7, #4]
   107d6:	68d8      	ldr	r0, [r3, #12]
   107d8:	687b      	ldr	r3, [r7, #4]
   107da:	6919      	ldr	r1, [r3, #16]
   107dc:	687b      	ldr	r3, [r7, #4]
   107de:	685b      	ldr	r3, [r3, #4]
   107e0:	001a      	movs	r2, r3
   107e2:	47a0      	blx	r4
		writer->written = 0;
   107e4:	687b      	ldr	r3, [r7, #4]
   107e6:	2200      	movs	r2, #0
   107e8:	605a      	str	r2, [r3, #4]
	}
}
   107ea:	46c0      	nop			; (mov r8, r8)
   107ec:	46bd      	mov	sp, r7
   107ee:	b003      	add	sp, #12
   107f0:	bd90      	pop	{r4, r7, pc}
   107f2:	46c0      	nop			; (mov r8, r8)

000107f4 <system_cpu_clock_get_hz>:
 * generic clock and the set CPU bus divider.
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
   107f4:	b580      	push	{r7, lr}
   107f6:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   107f8:	2000      	movs	r0, #0
   107fa:	4b05      	ldr	r3, [pc, #20]	; (10810 <system_cpu_clock_get_hz+0x1c>)
   107fc:	4798      	blx	r3
   107fe:	0002      	movs	r2, r0
   10800:	4b04      	ldr	r3, [pc, #16]	; (10814 <system_cpu_clock_get_hz+0x20>)
   10802:	7a1b      	ldrb	r3, [r3, #8]
   10804:	b2db      	uxtb	r3, r3
   10806:	40da      	lsrs	r2, r3
   10808:	0013      	movs	r3, r2
}
   1080a:	0018      	movs	r0, r3
   1080c:	46bd      	mov	sp, r7
   1080e:	bd80      	pop	{r7, pc}
   10810:	00015015 	.word	0x00015015
   10814:	40000400 	.word	0x40000400

00010818 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   10818:	b580      	push	{r7, lr}
   1081a:	b084      	sub	sp, #16
   1081c:	af00      	add	r7, sp, #0
   1081e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   10820:	687b      	ldr	r3, [r7, #4]
   10822:	681b      	ldr	r3, [r3, #0]
   10824:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   10826:	46c0      	nop			; (mov r8, r8)
   10828:	68fb      	ldr	r3, [r7, #12]
   1082a:	689b      	ldr	r3, [r3, #8]
   1082c:	2202      	movs	r2, #2
   1082e:	4013      	ands	r3, r2
   10830:	d1fa      	bne.n	10828 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   10832:	68fb      	ldr	r3, [r7, #12]
   10834:	681b      	ldr	r3, [r3, #0]
   10836:	2202      	movs	r2, #2
   10838:	431a      	orrs	r2, r3
   1083a:	68fb      	ldr	r3, [r7, #12]
   1083c:	601a      	str	r2, [r3, #0]
}
   1083e:	46c0      	nop			; (mov r8, r8)
   10840:	46bd      	mov	sp, r7
   10842:	b004      	add	sp, #16
   10844:	bd80      	pop	{r7, pc}
   10846:	46c0      	nop			; (mov r8, r8)

00010848 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   10848:	b580      	push	{r7, lr}
   1084a:	b082      	sub	sp, #8
   1084c:	af00      	add	r7, sp, #0
   1084e:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   10850:	4b04      	ldr	r3, [pc, #16]	; (10864 <sw_timer_tcc_callback+0x1c>)
   10852:	681b      	ldr	r3, [r3, #0]
   10854:	1c5a      	adds	r2, r3, #1
   10856:	4b03      	ldr	r3, [pc, #12]	; (10864 <sw_timer_tcc_callback+0x1c>)
   10858:	601a      	str	r2, [r3, #0]
}
   1085a:	46c0      	nop			; (mov r8, r8)
   1085c:	46bd      	mov	sp, r7
   1085e:	b002      	add	sp, #8
   10860:	bd80      	pop	{r7, pc}
   10862:	46c0      	nop			; (mov r8, r8)
   10864:	200000d4 	.word	0x200000d4

00010868 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   10868:	b580      	push	{r7, lr}
   1086a:	b082      	sub	sp, #8
   1086c:	af00      	add	r7, sp, #0
   1086e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   10870:	687b      	ldr	r3, [r7, #4]
   10872:	2264      	movs	r2, #100	; 0x64
   10874:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   10876:	687b      	ldr	r3, [r7, #4]
   10878:	2200      	movs	r2, #0
   1087a:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   1087c:	687b      	ldr	r3, [r7, #4]
   1087e:	2200      	movs	r2, #0
   10880:	705a      	strb	r2, [r3, #1]
}
   10882:	46c0      	nop			; (mov r8, r8)
   10884:	46bd      	mov	sp, r7
   10886:	b002      	add	sp, #8
   10888:	bd80      	pop	{r7, pc}
   1088a:	46c0      	nop			; (mov r8, r8)

0001088c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   1088c:	b590      	push	{r4, r7, lr}
   1088e:	b0b1      	sub	sp, #196	; 0xc4
   10890:	af00      	add	r7, sp, #0
   10892:	6078      	str	r0, [r7, #4]
   10894:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   10896:	230c      	movs	r3, #12
   10898:	18fb      	adds	r3, r7, r3
   1089a:	4a2e      	ldr	r2, [pc, #184]	; (10954 <sw_timer_init+0xc8>)
   1089c:	ca13      	ldmia	r2!, {r0, r1, r4}
   1089e:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   108a0:	683b      	ldr	r3, [r7, #0]
   108a2:	885b      	ldrh	r3, [r3, #2]
   108a4:	001a      	movs	r2, r3
   108a6:	687b      	ldr	r3, [r7, #4]
   108a8:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   108aa:	687b      	ldr	r3, [r7, #4]
   108ac:	3314      	adds	r3, #20
   108ae:	22bc      	movs	r2, #188	; 0xbc
   108b0:	18ba      	adds	r2, r7, r2
   108b2:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   108b4:	683b      	ldr	r3, [r7, #0]
   108b6:	781b      	ldrb	r3, [r3, #0]
   108b8:	001a      	movs	r2, r3
   108ba:	230c      	movs	r3, #12
   108bc:	18fb      	adds	r3, r7, r3
   108be:	0092      	lsls	r2, r2, #2
   108c0:	58d2      	ldr	r2, [r2, r3]
   108c2:	2318      	movs	r3, #24
   108c4:	18fb      	adds	r3, r7, r3
   108c6:	0011      	movs	r1, r2
   108c8:	0018      	movs	r0, r3
   108ca:	4b23      	ldr	r3, [pc, #140]	; (10958 <sw_timer_init+0xcc>)
   108cc:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   108ce:	4b23      	ldr	r3, [pc, #140]	; (1095c <sw_timer_init+0xd0>)
   108d0:	4798      	blx	r3
   108d2:	0004      	movs	r4, r0
   108d4:	683b      	ldr	r3, [r7, #0]
   108d6:	885b      	ldrh	r3, [r3, #2]
   108d8:	001a      	movs	r2, r3
   108da:	4b21      	ldr	r3, [pc, #132]	; (10960 <sw_timer_init+0xd4>)
   108dc:	0011      	movs	r1, r2
   108de:	22fa      	movs	r2, #250	; 0xfa
   108e0:	0210      	lsls	r0, r2, #8
   108e2:	4798      	blx	r3
   108e4:	0003      	movs	r3, r0
   108e6:	001a      	movs	r2, r3
   108e8:	4b1e      	ldr	r3, [pc, #120]	; (10964 <sw_timer_init+0xd8>)
   108ea:	0011      	movs	r1, r2
   108ec:	0020      	movs	r0, r4
   108ee:	4798      	blx	r3
   108f0:	0003      	movs	r3, r0
   108f2:	001a      	movs	r2, r3
   108f4:	2318      	movs	r3, #24
   108f6:	18fb      	adds	r3, r7, r3
   108f8:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   108fa:	2318      	movs	r3, #24
   108fc:	18fb      	adds	r3, r7, r3
   108fe:	2205      	movs	r2, #5
   10900:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   10902:	683b      	ldr	r3, [r7, #0]
   10904:	781b      	ldrb	r3, [r3, #0]
   10906:	001a      	movs	r2, r3
   10908:	230c      	movs	r3, #12
   1090a:	18fb      	adds	r3, r7, r3
   1090c:	0092      	lsls	r2, r2, #2
   1090e:	58d1      	ldr	r1, [r2, r3]
   10910:	2318      	movs	r3, #24
   10912:	18fa      	adds	r2, r7, r3
   10914:	23bc      	movs	r3, #188	; 0xbc
   10916:	18fb      	adds	r3, r7, r3
   10918:	681b      	ldr	r3, [r3, #0]
   1091a:	0018      	movs	r0, r3
   1091c:	4b12      	ldr	r3, [pc, #72]	; (10968 <sw_timer_init+0xdc>)
   1091e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   10920:	683b      	ldr	r3, [r7, #0]
   10922:	785b      	ldrb	r3, [r3, #1]
   10924:	3308      	adds	r3, #8
   10926:	b2da      	uxtb	r2, r3
   10928:	4910      	ldr	r1, [pc, #64]	; (1096c <sw_timer_init+0xe0>)
   1092a:	23bc      	movs	r3, #188	; 0xbc
   1092c:	18fb      	adds	r3, r7, r3
   1092e:	681b      	ldr	r3, [r3, #0]
   10930:	0018      	movs	r0, r3
   10932:	4b0f      	ldr	r3, [pc, #60]	; (10970 <sw_timer_init+0xe4>)
   10934:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   10936:	683b      	ldr	r3, [r7, #0]
   10938:	785b      	ldrb	r3, [r3, #1]
   1093a:	3308      	adds	r3, #8
   1093c:	b2da      	uxtb	r2, r3
   1093e:	23bc      	movs	r3, #188	; 0xbc
   10940:	18fb      	adds	r3, r7, r3
   10942:	681b      	ldr	r3, [r3, #0]
   10944:	0011      	movs	r1, r2
   10946:	0018      	movs	r0, r3
   10948:	4b0a      	ldr	r3, [pc, #40]	; (10974 <sw_timer_init+0xe8>)
   1094a:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   1094c:	46c0      	nop			; (mov r8, r8)
   1094e:	46bd      	mov	sp, r7
   10950:	b031      	add	sp, #196	; 0xc4
   10952:	bd90      	pop	{r4, r7, pc}
   10954:	000195a0 	.word	0x000195a0
   10958:	0000e349 	.word	0x0000e349
   1095c:	000107f5 	.word	0x000107f5
   10960:	0001697d 	.word	0x0001697d
   10964:	00016869 	.word	0x00016869
   10968:	0000e9a5 	.word	0x0000e9a5
   1096c:	00010849 	.word	0x00010849
   10970:	0000edbd 	.word	0x0000edbd
   10974:	0000edfd 	.word	0x0000edfd

00010978 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   10978:	b580      	push	{r7, lr}
   1097a:	b084      	sub	sp, #16
   1097c:	af00      	add	r7, sp, #0
   1097e:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   10980:	687b      	ldr	r3, [r7, #4]
   10982:	3314      	adds	r3, #20
   10984:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   10986:	68fb      	ldr	r3, [r7, #12]
   10988:	0018      	movs	r0, r3
   1098a:	4b03      	ldr	r3, [pc, #12]	; (10998 <sw_timer_enable+0x20>)
   1098c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   1098e:	46c0      	nop			; (mov r8, r8)
   10990:	46bd      	mov	sp, r7
   10992:	b004      	add	sp, #16
   10994:	bd80      	pop	{r7, pc}
   10996:	46c0      	nop			; (mov r8, r8)
   10998:	00010819 	.word	0x00010819

0001099c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   1099c:	b580      	push	{r7, lr}
   1099e:	b086      	sub	sp, #24
   109a0:	af00      	add	r7, sp, #0
   109a2:	60f8      	str	r0, [r7, #12]
   109a4:	60b9      	str	r1, [r7, #8]
   109a6:	607a      	str	r2, [r7, #4]
   109a8:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   109aa:	2300      	movs	r3, #0
   109ac:	617b      	str	r3, [r7, #20]
   109ae:	e032      	b.n	10a16 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   109b0:	68f9      	ldr	r1, [r7, #12]
   109b2:	697a      	ldr	r2, [r7, #20]
   109b4:	0013      	movs	r3, r2
   109b6:	009b      	lsls	r3, r3, #2
   109b8:	189b      	adds	r3, r3, r2
   109ba:	009b      	lsls	r3, r3, #2
   109bc:	5c5b      	ldrb	r3, [r3, r1]
   109be:	07db      	lsls	r3, r3, #31
   109c0:	0fdb      	lsrs	r3, r3, #31
   109c2:	b2db      	uxtb	r3, r3
   109c4:	2b00      	cmp	r3, #0
   109c6:	d123      	bne.n	10a10 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   109c8:	697a      	ldr	r2, [r7, #20]
   109ca:	0013      	movs	r3, r2
   109cc:	009b      	lsls	r3, r3, #2
   109ce:	189b      	adds	r3, r3, r2
   109d0:	009b      	lsls	r3, r3, #2
   109d2:	68fa      	ldr	r2, [r7, #12]
   109d4:	18d3      	adds	r3, r2, r3
   109d6:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   109d8:	693b      	ldr	r3, [r7, #16]
   109da:	68ba      	ldr	r2, [r7, #8]
   109dc:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   109de:	693b      	ldr	r3, [r7, #16]
   109e0:	781a      	ldrb	r2, [r3, #0]
   109e2:	2102      	movs	r1, #2
   109e4:	438a      	bics	r2, r1
   109e6:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   109e8:	693b      	ldr	r3, [r7, #16]
   109ea:	687a      	ldr	r2, [r7, #4]
   109ec:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   109ee:	68fb      	ldr	r3, [r7, #12]
   109f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   109f2:	4b0d      	ldr	r3, [pc, #52]	; (10a28 <sw_timer_register_callback+0x8c>)
   109f4:	0011      	movs	r1, r2
   109f6:	6838      	ldr	r0, [r7, #0]
   109f8:	4798      	blx	r3
   109fa:	0003      	movs	r3, r0
   109fc:	001a      	movs	r2, r3
   109fe:	693b      	ldr	r3, [r7, #16]
   10a00:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   10a02:	693b      	ldr	r3, [r7, #16]
   10a04:	781a      	ldrb	r2, [r3, #0]
   10a06:	2101      	movs	r1, #1
   10a08:	430a      	orrs	r2, r1
   10a0a:	701a      	strb	r2, [r3, #0]
			return index;
   10a0c:	697b      	ldr	r3, [r7, #20]
   10a0e:	e007      	b.n	10a20 <sw_timer_register_callback+0x84>
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   10a10:	697b      	ldr	r3, [r7, #20]
   10a12:	3301      	adds	r3, #1
   10a14:	617b      	str	r3, [r7, #20]
   10a16:	697b      	ldr	r3, [r7, #20]
   10a18:	2b00      	cmp	r3, #0
   10a1a:	ddc9      	ble.n	109b0 <sw_timer_register_callback+0x14>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   10a1c:	2301      	movs	r3, #1
   10a1e:	425b      	negs	r3, r3
}
   10a20:	0018      	movs	r0, r3
   10a22:	46bd      	mov	sp, r7
   10a24:	b006      	add	sp, #24
   10a26:	bd80      	pop	{r7, pc}
   10a28:	00016869 	.word	0x00016869

00010a2c <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   10a2c:	b580      	push	{r7, lr}
   10a2e:	b086      	sub	sp, #24
   10a30:	af00      	add	r7, sp, #0
   10a32:	60f8      	str	r0, [r7, #12]
   10a34:	60b9      	str	r1, [r7, #8]
   10a36:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   10a38:	68ba      	ldr	r2, [r7, #8]
   10a3a:	0013      	movs	r3, r2
   10a3c:	009b      	lsls	r3, r3, #2
   10a3e:	189b      	adds	r3, r3, r2
   10a40:	009b      	lsls	r3, r3, #2
   10a42:	68fa      	ldr	r2, [r7, #12]
   10a44:	18d3      	adds	r3, r2, r3
   10a46:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   10a48:	697b      	ldr	r3, [r7, #20]
   10a4a:	781a      	ldrb	r2, [r3, #0]
   10a4c:	2102      	movs	r1, #2
   10a4e:	430a      	orrs	r2, r1
   10a50:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   10a52:	68fb      	ldr	r3, [r7, #12]
   10a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   10a56:	4b07      	ldr	r3, [pc, #28]	; (10a74 <sw_timer_enable_callback+0x48>)
   10a58:	0011      	movs	r1, r2
   10a5a:	6878      	ldr	r0, [r7, #4]
   10a5c:	4798      	blx	r3
   10a5e:	0003      	movs	r3, r0
   10a60:	001a      	movs	r2, r3
   10a62:	4b05      	ldr	r3, [pc, #20]	; (10a78 <sw_timer_enable_callback+0x4c>)
   10a64:	681b      	ldr	r3, [r3, #0]
   10a66:	18d2      	adds	r2, r2, r3
   10a68:	697b      	ldr	r3, [r7, #20]
   10a6a:	611a      	str	r2, [r3, #16]
}
   10a6c:	46c0      	nop			; (mov r8, r8)
   10a6e:	46bd      	mov	sp, r7
   10a70:	b006      	add	sp, #24
   10a72:	bd80      	pop	{r7, pc}
   10a74:	00016869 	.word	0x00016869
   10a78:	200000d4 	.word	0x200000d4

00010a7c <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   10a7c:	b580      	push	{r7, lr}
   10a7e:	b084      	sub	sp, #16
   10a80:	af00      	add	r7, sp, #0
   10a82:	6078      	str	r0, [r7, #4]
   10a84:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   10a86:	683a      	ldr	r2, [r7, #0]
   10a88:	0013      	movs	r3, r2
   10a8a:	009b      	lsls	r3, r3, #2
   10a8c:	189b      	adds	r3, r3, r2
   10a8e:	009b      	lsls	r3, r3, #2
   10a90:	687a      	ldr	r2, [r7, #4]
   10a92:	18d3      	adds	r3, r2, r3
   10a94:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   10a96:	68fb      	ldr	r3, [r7, #12]
   10a98:	781a      	ldrb	r2, [r3, #0]
   10a9a:	2102      	movs	r1, #2
   10a9c:	438a      	bics	r2, r1
   10a9e:	701a      	strb	r2, [r3, #0]
}
   10aa0:	46c0      	nop			; (mov r8, r8)
   10aa2:	46bd      	mov	sp, r7
   10aa4:	b004      	add	sp, #16
   10aa6:	bd80      	pop	{r7, pc}

00010aa8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   10aa8:	b590      	push	{r4, r7, lr}
   10aaa:	b085      	sub	sp, #20
   10aac:	af00      	add	r7, sp, #0
   10aae:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   10ab0:	2300      	movs	r3, #0
   10ab2:	60fb      	str	r3, [r7, #12]
   10ab4:	e053      	b.n	10b5e <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   10ab6:	6879      	ldr	r1, [r7, #4]
   10ab8:	68fa      	ldr	r2, [r7, #12]
   10aba:	0013      	movs	r3, r2
   10abc:	009b      	lsls	r3, r3, #2
   10abe:	189b      	adds	r3, r3, r2
   10ac0:	009b      	lsls	r3, r3, #2
   10ac2:	5c5b      	ldrb	r3, [r3, r1]
   10ac4:	07db      	lsls	r3, r3, #31
   10ac6:	0fdb      	lsrs	r3, r3, #31
   10ac8:	b2db      	uxtb	r3, r3
   10aca:	2b00      	cmp	r3, #0
   10acc:	d044      	beq.n	10b58 <sw_timer_task+0xb0>
   10ace:	6879      	ldr	r1, [r7, #4]
   10ad0:	68fa      	ldr	r2, [r7, #12]
   10ad2:	0013      	movs	r3, r2
   10ad4:	009b      	lsls	r3, r3, #2
   10ad6:	189b      	adds	r3, r3, r2
   10ad8:	009b      	lsls	r3, r3, #2
   10ada:	5c5b      	ldrb	r3, [r3, r1]
   10adc:	079b      	lsls	r3, r3, #30
   10ade:	0fdb      	lsrs	r3, r3, #31
   10ae0:	b2db      	uxtb	r3, r3
   10ae2:	2b00      	cmp	r3, #0
   10ae4:	d038      	beq.n	10b58 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   10ae6:	68fa      	ldr	r2, [r7, #12]
   10ae8:	0013      	movs	r3, r2
   10aea:	009b      	lsls	r3, r3, #2
   10aec:	189b      	adds	r3, r3, r2
   10aee:	009b      	lsls	r3, r3, #2
   10af0:	687a      	ldr	r2, [r7, #4]
   10af2:	18d3      	adds	r3, r2, r3
   10af4:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   10af6:	68bb      	ldr	r3, [r7, #8]
   10af8:	691a      	ldr	r2, [r3, #16]
   10afa:	4b1c      	ldr	r3, [pc, #112]	; (10b6c <sw_timer_task+0xc4>)
   10afc:	681b      	ldr	r3, [r3, #0]
   10afe:	1ad3      	subs	r3, r2, r3
   10b00:	d52a      	bpl.n	10b58 <sw_timer_task+0xb0>
   10b02:	68bb      	ldr	r3, [r7, #8]
   10b04:	781b      	ldrb	r3, [r3, #0]
   10b06:	2204      	movs	r2, #4
   10b08:	4013      	ands	r3, r2
   10b0a:	b2db      	uxtb	r3, r3
   10b0c:	2b00      	cmp	r3, #0
   10b0e:	d123      	bne.n	10b58 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   10b10:	68bb      	ldr	r3, [r7, #8]
   10b12:	781a      	ldrb	r2, [r3, #0]
   10b14:	2104      	movs	r1, #4
   10b16:	430a      	orrs	r2, r1
   10b18:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   10b1a:	68bb      	ldr	r3, [r7, #8]
   10b1c:	68db      	ldr	r3, [r3, #12]
   10b1e:	2b00      	cmp	r3, #0
   10b20:	d007      	beq.n	10b32 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   10b22:	68bb      	ldr	r3, [r7, #8]
   10b24:	68da      	ldr	r2, [r3, #12]
   10b26:	4b11      	ldr	r3, [pc, #68]	; (10b6c <sw_timer_task+0xc4>)
   10b28:	681b      	ldr	r3, [r3, #0]
   10b2a:	18d2      	adds	r2, r2, r3
   10b2c:	68bb      	ldr	r3, [r7, #8]
   10b2e:	611a      	str	r2, [r3, #16]
   10b30:	e004      	b.n	10b3c <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   10b32:	68bb      	ldr	r3, [r7, #8]
   10b34:	781a      	ldrb	r2, [r3, #0]
   10b36:	2102      	movs	r1, #2
   10b38:	438a      	bics	r2, r1
   10b3a:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   10b3c:	68bb      	ldr	r3, [r7, #8]
   10b3e:	685c      	ldr	r4, [r3, #4]
   10b40:	68bb      	ldr	r3, [r7, #8]
   10b42:	689a      	ldr	r2, [r3, #8]
   10b44:	68bb      	ldr	r3, [r7, #8]
   10b46:	68db      	ldr	r3, [r3, #12]
   10b48:	68f9      	ldr	r1, [r7, #12]
   10b4a:	6878      	ldr	r0, [r7, #4]
   10b4c:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   10b4e:	68bb      	ldr	r3, [r7, #8]
   10b50:	781a      	ldrb	r2, [r3, #0]
   10b52:	2104      	movs	r1, #4
   10b54:	438a      	bics	r2, r1
   10b56:	701a      	strb	r2, [r3, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   10b58:	68fb      	ldr	r3, [r7, #12]
   10b5a:	3301      	adds	r3, #1
   10b5c:	60fb      	str	r3, [r7, #12]
   10b5e:	68fb      	ldr	r3, [r7, #12]
   10b60:	2b00      	cmp	r3, #0
   10b62:	dda8      	ble.n	10ab6 <sw_timer_task+0xe>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   10b64:	46c0      	nop			; (mov r8, r8)
   10b66:	46bd      	mov	sp, r7
   10b68:	b005      	add	sp, #20
   10b6a:	bd90      	pop	{r4, r7, pc}
   10b6c:	200000d4 	.word	0x200000d4

00010b70 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   10b70:	b580      	push	{r7, lr}
   10b72:	b082      	sub	sp, #8
   10b74:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   10b76:	4b10      	ldr	r3, [pc, #64]	; (10bb8 <cpu_irq_enter_critical+0x48>)
   10b78:	681b      	ldr	r3, [r3, #0]
   10b7a:	2b00      	cmp	r3, #0
   10b7c:	d112      	bne.n	10ba4 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   10b7e:	f3ef 8310 	mrs	r3, PRIMASK
   10b82:	607b      	str	r3, [r7, #4]
  return(result);
   10b84:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   10b86:	2b00      	cmp	r3, #0
   10b88:	d109      	bne.n	10b9e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   10b8a:	b672      	cpsid	i
   10b8c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   10b90:	4b0a      	ldr	r3, [pc, #40]	; (10bbc <cpu_irq_enter_critical+0x4c>)
   10b92:	2200      	movs	r2, #0
   10b94:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   10b96:	4b0a      	ldr	r3, [pc, #40]	; (10bc0 <cpu_irq_enter_critical+0x50>)
   10b98:	2201      	movs	r2, #1
   10b9a:	701a      	strb	r2, [r3, #0]
   10b9c:	e002      	b.n	10ba4 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   10b9e:	4b08      	ldr	r3, [pc, #32]	; (10bc0 <cpu_irq_enter_critical+0x50>)
   10ba0:	2200      	movs	r2, #0
   10ba2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   10ba4:	4b04      	ldr	r3, [pc, #16]	; (10bb8 <cpu_irq_enter_critical+0x48>)
   10ba6:	681b      	ldr	r3, [r3, #0]
   10ba8:	1c5a      	adds	r2, r3, #1
   10baa:	4b03      	ldr	r3, [pc, #12]	; (10bb8 <cpu_irq_enter_critical+0x48>)
   10bac:	601a      	str	r2, [r3, #0]
}
   10bae:	46c0      	nop			; (mov r8, r8)
   10bb0:	46bd      	mov	sp, r7
   10bb2:	b002      	add	sp, #8
   10bb4:	bd80      	pop	{r7, pc}
   10bb6:	46c0      	nop			; (mov r8, r8)
   10bb8:	200000d8 	.word	0x200000d8
   10bbc:	2000000c 	.word	0x2000000c
   10bc0:	200000dc 	.word	0x200000dc

00010bc4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   10bc4:	b580      	push	{r7, lr}
   10bc6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   10bc8:	4b0b      	ldr	r3, [pc, #44]	; (10bf8 <cpu_irq_leave_critical+0x34>)
   10bca:	681b      	ldr	r3, [r3, #0]
   10bcc:	1e5a      	subs	r2, r3, #1
   10bce:	4b0a      	ldr	r3, [pc, #40]	; (10bf8 <cpu_irq_leave_critical+0x34>)
   10bd0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   10bd2:	4b09      	ldr	r3, [pc, #36]	; (10bf8 <cpu_irq_leave_critical+0x34>)
   10bd4:	681b      	ldr	r3, [r3, #0]
   10bd6:	2b00      	cmp	r3, #0
   10bd8:	d10a      	bne.n	10bf0 <cpu_irq_leave_critical+0x2c>
   10bda:	4b08      	ldr	r3, [pc, #32]	; (10bfc <cpu_irq_leave_critical+0x38>)
   10bdc:	781b      	ldrb	r3, [r3, #0]
   10bde:	b2db      	uxtb	r3, r3
   10be0:	2b00      	cmp	r3, #0
   10be2:	d005      	beq.n	10bf0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   10be4:	4b06      	ldr	r3, [pc, #24]	; (10c00 <cpu_irq_leave_critical+0x3c>)
   10be6:	2201      	movs	r2, #1
   10be8:	701a      	strb	r2, [r3, #0]
   10bea:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   10bee:	b662      	cpsie	i
	}
}
   10bf0:	46c0      	nop			; (mov r8, r8)
   10bf2:	46bd      	mov	sp, r7
   10bf4:	bd80      	pop	{r7, pc}
   10bf6:	46c0      	nop			; (mov r8, r8)
   10bf8:	200000d8 	.word	0x200000d8
   10bfc:	200000dc 	.word	0x200000dc
   10c00:	2000000c 	.word	0x2000000c

00010c04 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   10c04:	b580      	push	{r7, lr}
   10c06:	b082      	sub	sp, #8
   10c08:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   10c0a:	4b2f      	ldr	r3, [pc, #188]	; (10cc8 <Reset_Handler+0xc4>)
   10c0c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   10c0e:	4b2f      	ldr	r3, [pc, #188]	; (10ccc <Reset_Handler+0xc8>)
   10c10:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   10c12:	687a      	ldr	r2, [r7, #4]
   10c14:	683b      	ldr	r3, [r7, #0]
   10c16:	429a      	cmp	r2, r3
   10c18:	d00c      	beq.n	10c34 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   10c1a:	e007      	b.n	10c2c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   10c1c:	683b      	ldr	r3, [r7, #0]
   10c1e:	1d1a      	adds	r2, r3, #4
   10c20:	603a      	str	r2, [r7, #0]
   10c22:	687a      	ldr	r2, [r7, #4]
   10c24:	1d11      	adds	r1, r2, #4
   10c26:	6079      	str	r1, [r7, #4]
   10c28:	6812      	ldr	r2, [r2, #0]
   10c2a:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   10c2c:	683a      	ldr	r2, [r7, #0]
   10c2e:	4b28      	ldr	r3, [pc, #160]	; (10cd0 <Reset_Handler+0xcc>)
   10c30:	429a      	cmp	r2, r3
   10c32:	d3f3      	bcc.n	10c1c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   10c34:	4b27      	ldr	r3, [pc, #156]	; (10cd4 <Reset_Handler+0xd0>)
   10c36:	603b      	str	r3, [r7, #0]
   10c38:	e004      	b.n	10c44 <Reset_Handler+0x40>
                *pDest++ = 0;
   10c3a:	683b      	ldr	r3, [r7, #0]
   10c3c:	1d1a      	adds	r2, r3, #4
   10c3e:	603a      	str	r2, [r7, #0]
   10c40:	2200      	movs	r2, #0
   10c42:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   10c44:	683a      	ldr	r2, [r7, #0]
   10c46:	4b24      	ldr	r3, [pc, #144]	; (10cd8 <Reset_Handler+0xd4>)
   10c48:	429a      	cmp	r2, r3
   10c4a:	d3f6      	bcc.n	10c3a <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   10c4c:	4b23      	ldr	r3, [pc, #140]	; (10cdc <Reset_Handler+0xd8>)
   10c4e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   10c50:	4b23      	ldr	r3, [pc, #140]	; (10ce0 <Reset_Handler+0xdc>)
   10c52:	687a      	ldr	r2, [r7, #4]
   10c54:	21ff      	movs	r1, #255	; 0xff
   10c56:	438a      	bics	r2, r1
   10c58:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   10c5a:	4a22      	ldr	r2, [pc, #136]	; (10ce4 <Reset_Handler+0xe0>)
   10c5c:	2390      	movs	r3, #144	; 0x90
   10c5e:	005b      	lsls	r3, r3, #1
   10c60:	2102      	movs	r1, #2
   10c62:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   10c64:	4a20      	ldr	r2, [pc, #128]	; (10ce8 <Reset_Handler+0xe4>)
   10c66:	78d3      	ldrb	r3, [r2, #3]
   10c68:	2103      	movs	r1, #3
   10c6a:	438b      	bics	r3, r1
   10c6c:	1c19      	adds	r1, r3, #0
   10c6e:	2302      	movs	r3, #2
   10c70:	430b      	orrs	r3, r1
   10c72:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   10c74:	4a1c      	ldr	r2, [pc, #112]	; (10ce8 <Reset_Handler+0xe4>)
   10c76:	78d3      	ldrb	r3, [r2, #3]
   10c78:	210c      	movs	r1, #12
   10c7a:	438b      	bics	r3, r1
   10c7c:	1c19      	adds	r1, r3, #0
   10c7e:	2308      	movs	r3, #8
   10c80:	430b      	orrs	r3, r1
   10c82:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   10c84:	4a19      	ldr	r2, [pc, #100]	; (10cec <Reset_Handler+0xe8>)
   10c86:	7b93      	ldrb	r3, [r2, #14]
   10c88:	2130      	movs	r1, #48	; 0x30
   10c8a:	438b      	bics	r3, r1
   10c8c:	1c19      	adds	r1, r3, #0
   10c8e:	2320      	movs	r3, #32
   10c90:	430b      	orrs	r3, r1
   10c92:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   10c94:	4a15      	ldr	r2, [pc, #84]	; (10cec <Reset_Handler+0xe8>)
   10c96:	7b93      	ldrb	r3, [r2, #14]
   10c98:	210c      	movs	r1, #12
   10c9a:	438b      	bics	r3, r1
   10c9c:	1c19      	adds	r1, r3, #0
   10c9e:	2308      	movs	r3, #8
   10ca0:	430b      	orrs	r3, r1
   10ca2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   10ca4:	4a11      	ldr	r2, [pc, #68]	; (10cec <Reset_Handler+0xe8>)
   10ca6:	7b93      	ldrb	r3, [r2, #14]
   10ca8:	2103      	movs	r1, #3
   10caa:	438b      	bics	r3, r1
   10cac:	1c19      	adds	r1, r3, #0
   10cae:	2302      	movs	r3, #2
   10cb0:	430b      	orrs	r3, r1
   10cb2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   10cb4:	4a0e      	ldr	r2, [pc, #56]	; (10cf0 <Reset_Handler+0xec>)
   10cb6:	6853      	ldr	r3, [r2, #4]
   10cb8:	2180      	movs	r1, #128	; 0x80
   10cba:	430b      	orrs	r3, r1
   10cbc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   10cbe:	4b0d      	ldr	r3, [pc, #52]	; (10cf4 <Reset_Handler+0xf0>)
   10cc0:	4798      	blx	r3

        /* Branch to main function */
        main();
   10cc2:	4b0d      	ldr	r3, [pc, #52]	; (10cf8 <Reset_Handler+0xf4>)
   10cc4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   10cc6:	e7fe      	b.n	10cc6 <Reset_Handler+0xc2>
   10cc8:	00019e10 	.word	0x00019e10
   10ccc:	20000000 	.word	0x20000000
   10cd0:	20000084 	.word	0x20000084
   10cd4:	20000084 	.word	0x20000084
   10cd8:	20000da4 	.word	0x20000da4
   10cdc:	00008000 	.word	0x00008000
   10ce0:	e000ed00 	.word	0xe000ed00
   10ce4:	41007000 	.word	0x41007000
   10ce8:	41005000 	.word	0x41005000
   10cec:	41004800 	.word	0x41004800
   10cf0:	41004000 	.word	0x41004000
   10cf4:	00016bb9 	.word	0x00016bb9
   10cf8:	000166e5 	.word	0x000166e5

00010cfc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   10cfc:	b580      	push	{r7, lr}
   10cfe:	af00      	add	r7, sp, #0
        while (1) {
        }
   10d00:	e7fe      	b.n	10d00 <Dummy_Handler+0x4>
   10d02:	46c0      	nop			; (mov r8, r8)

00010d04 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   10d04:	b580      	push	{r7, lr}
   10d06:	b084      	sub	sp, #16
   10d08:	af00      	add	r7, sp, #0
   10d0a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   10d0c:	4b0a      	ldr	r3, [pc, #40]	; (10d38 <_sbrk+0x34>)
   10d0e:	681b      	ldr	r3, [r3, #0]
   10d10:	2b00      	cmp	r3, #0
   10d12:	d102      	bne.n	10d1a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   10d14:	4b08      	ldr	r3, [pc, #32]	; (10d38 <_sbrk+0x34>)
   10d16:	4a09      	ldr	r2, [pc, #36]	; (10d3c <_sbrk+0x38>)
   10d18:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   10d1a:	4b07      	ldr	r3, [pc, #28]	; (10d38 <_sbrk+0x34>)
   10d1c:	681b      	ldr	r3, [r3, #0]
   10d1e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   10d20:	4b05      	ldr	r3, [pc, #20]	; (10d38 <_sbrk+0x34>)
   10d22:	681a      	ldr	r2, [r3, #0]
   10d24:	687b      	ldr	r3, [r7, #4]
   10d26:	18d2      	adds	r2, r2, r3
   10d28:	4b03      	ldr	r3, [pc, #12]	; (10d38 <_sbrk+0x34>)
   10d2a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   10d2c:	68fb      	ldr	r3, [r7, #12]
}
   10d2e:	0018      	movs	r0, r3
   10d30:	46bd      	mov	sp, r7
   10d32:	b004      	add	sp, #16
   10d34:	bd80      	pop	{r7, pc}
   10d36:	46c0      	nop			; (mov r8, r8)
   10d38:	200000e0 	.word	0x200000e0
   10d3c:	20002da8 	.word	0x20002da8

00010d40 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   10d40:	b580      	push	{r7, lr}
   10d42:	b082      	sub	sp, #8
   10d44:	af00      	add	r7, sp, #0
   10d46:	6078      	str	r0, [r7, #4]
	return -1;
   10d48:	2301      	movs	r3, #1
   10d4a:	425b      	negs	r3, r3
}
   10d4c:	0018      	movs	r0, r3
   10d4e:	46bd      	mov	sp, r7
   10d50:	b002      	add	sp, #8
   10d52:	bd80      	pop	{r7, pc}

00010d54 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   10d54:	b580      	push	{r7, lr}
   10d56:	b082      	sub	sp, #8
   10d58:	af00      	add	r7, sp, #0
   10d5a:	6078      	str	r0, [r7, #4]
   10d5c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   10d5e:	683b      	ldr	r3, [r7, #0]
   10d60:	2280      	movs	r2, #128	; 0x80
   10d62:	0192      	lsls	r2, r2, #6
   10d64:	605a      	str	r2, [r3, #4]

	return 0;
   10d66:	2300      	movs	r3, #0
}
   10d68:	0018      	movs	r0, r3
   10d6a:	46bd      	mov	sp, r7
   10d6c:	b002      	add	sp, #8
   10d6e:	bd80      	pop	{r7, pc}

00010d70 <_isatty>:

extern int _isatty(int file)
{
   10d70:	b580      	push	{r7, lr}
   10d72:	b082      	sub	sp, #8
   10d74:	af00      	add	r7, sp, #0
   10d76:	6078      	str	r0, [r7, #4]
	return 1;
   10d78:	2301      	movs	r3, #1
}
   10d7a:	0018      	movs	r0, r3
   10d7c:	46bd      	mov	sp, r7
   10d7e:	b002      	add	sp, #8
   10d80:	bd80      	pop	{r7, pc}
   10d82:	46c0      	nop			; (mov r8, r8)

00010d84 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   10d84:	b580      	push	{r7, lr}
   10d86:	b084      	sub	sp, #16
   10d88:	af00      	add	r7, sp, #0
   10d8a:	60f8      	str	r0, [r7, #12]
   10d8c:	60b9      	str	r1, [r7, #8]
   10d8e:	607a      	str	r2, [r7, #4]
	return 0;
   10d90:	2300      	movs	r3, #0
}
   10d92:	0018      	movs	r0, r3
   10d94:	46bd      	mov	sp, r7
   10d96:	b004      	add	sp, #16
   10d98:	bd80      	pop	{r7, pc}
   10d9a:	46c0      	nop			; (mov r8, r8)

00010d9c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   10d9c:	b580      	push	{r7, lr}
   10d9e:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
   10da0:	46c0      	nop			; (mov r8, r8)
   10da2:	46bd      	mov	sp, r7
   10da4:	bd80      	pop	{r7, pc}
   10da6:	46c0      	nop			; (mov r8, r8)

00010da8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   10da8:	b580      	push	{r7, lr}
   10daa:	b084      	sub	sp, #16
   10dac:	af00      	add	r7, sp, #0
   10dae:	0002      	movs	r2, r0
   10db0:	1dfb      	adds	r3, r7, #7
   10db2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   10db4:	230f      	movs	r3, #15
   10db6:	18fb      	adds	r3, r7, r3
   10db8:	1dfa      	adds	r2, r7, #7
   10dba:	7812      	ldrb	r2, [r2, #0]
   10dbc:	09d2      	lsrs	r2, r2, #7
   10dbe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   10dc0:	230e      	movs	r3, #14
   10dc2:	18fb      	adds	r3, r7, r3
   10dc4:	1dfa      	adds	r2, r7, #7
   10dc6:	7812      	ldrb	r2, [r2, #0]
   10dc8:	0952      	lsrs	r2, r2, #5
   10dca:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   10dcc:	4b0d      	ldr	r3, [pc, #52]	; (10e04 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   10dce:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   10dd0:	230f      	movs	r3, #15
   10dd2:	18fb      	adds	r3, r7, r3
   10dd4:	781b      	ldrb	r3, [r3, #0]
   10dd6:	2b00      	cmp	r3, #0
   10dd8:	d10f      	bne.n	10dfa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   10dda:	230f      	movs	r3, #15
   10ddc:	18fb      	adds	r3, r7, r3
   10dde:	781b      	ldrb	r3, [r3, #0]
   10de0:	009b      	lsls	r3, r3, #2
   10de2:	2210      	movs	r2, #16
   10de4:	4694      	mov	ip, r2
   10de6:	44bc      	add	ip, r7
   10de8:	4463      	add	r3, ip
   10dea:	3b08      	subs	r3, #8
   10dec:	681a      	ldr	r2, [r3, #0]
   10dee:	230e      	movs	r3, #14
   10df0:	18fb      	adds	r3, r7, r3
   10df2:	781b      	ldrb	r3, [r3, #0]
   10df4:	01db      	lsls	r3, r3, #7
   10df6:	18d3      	adds	r3, r2, r3
   10df8:	e000      	b.n	10dfc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   10dfa:	2300      	movs	r3, #0
	}
}
   10dfc:	0018      	movs	r0, r3
   10dfe:	46bd      	mov	sp, r7
   10e00:	b004      	add	sp, #16
   10e02:	bd80      	pop	{r7, pc}
   10e04:	41004400 	.word	0x41004400

00010e08 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   10e08:	b580      	push	{r7, lr}
   10e0a:	b082      	sub	sp, #8
   10e0c:	af00      	add	r7, sp, #0
   10e0e:	0002      	movs	r2, r0
   10e10:	1dfb      	adds	r3, r7, #7
   10e12:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   10e14:	1dfb      	adds	r3, r7, #7
   10e16:	781b      	ldrb	r3, [r3, #0]
   10e18:	0018      	movs	r0, r3
   10e1a:	4b03      	ldr	r3, [pc, #12]	; (10e28 <port_get_group_from_gpio_pin+0x20>)
   10e1c:	4798      	blx	r3
   10e1e:	0003      	movs	r3, r0
}
   10e20:	0018      	movs	r0, r3
   10e22:	46bd      	mov	sp, r7
   10e24:	b002      	add	sp, #8
   10e26:	bd80      	pop	{r7, pc}
   10e28:	00010da9 	.word	0x00010da9

00010e2c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   10e2c:	b580      	push	{r7, lr}
   10e2e:	b084      	sub	sp, #16
   10e30:	af00      	add	r7, sp, #0
   10e32:	0002      	movs	r2, r0
   10e34:	1dfb      	adds	r3, r7, #7
   10e36:	701a      	strb	r2, [r3, #0]
   10e38:	1dbb      	adds	r3, r7, #6
   10e3a:	1c0a      	adds	r2, r1, #0
   10e3c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   10e3e:	1dfb      	adds	r3, r7, #7
   10e40:	781b      	ldrb	r3, [r3, #0]
   10e42:	0018      	movs	r0, r3
   10e44:	4b0d      	ldr	r3, [pc, #52]	; (10e7c <port_pin_set_output_level+0x50>)
   10e46:	4798      	blx	r3
   10e48:	0003      	movs	r3, r0
   10e4a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   10e4c:	1dfb      	adds	r3, r7, #7
   10e4e:	781b      	ldrb	r3, [r3, #0]
   10e50:	221f      	movs	r2, #31
   10e52:	4013      	ands	r3, r2
   10e54:	2201      	movs	r2, #1
   10e56:	409a      	lsls	r2, r3
   10e58:	0013      	movs	r3, r2
   10e5a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   10e5c:	1dbb      	adds	r3, r7, #6
   10e5e:	781b      	ldrb	r3, [r3, #0]
   10e60:	2b00      	cmp	r3, #0
   10e62:	d003      	beq.n	10e6c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   10e64:	68fb      	ldr	r3, [r7, #12]
   10e66:	68ba      	ldr	r2, [r7, #8]
   10e68:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   10e6a:	e002      	b.n	10e72 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
   10e6c:	68fb      	ldr	r3, [r7, #12]
   10e6e:	68ba      	ldr	r2, [r7, #8]
   10e70:	615a      	str	r2, [r3, #20]
	}
}
   10e72:	46c0      	nop			; (mov r8, r8)
   10e74:	46bd      	mov	sp, r7
   10e76:	b004      	add	sp, #16
   10e78:	bd80      	pop	{r7, pc}
   10e7a:	46c0      	nop			; (mov r8, r8)
   10e7c:	00010e09 	.word	0x00010e09

00010e80 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
   10e80:	b580      	push	{r7, lr}
   10e82:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   10e84:	4b02      	ldr	r3, [pc, #8]	; (10e90 <system_interrupt_enter_critical_section+0x10>)
   10e86:	4798      	blx	r3
}
   10e88:	46c0      	nop			; (mov r8, r8)
   10e8a:	46bd      	mov	sp, r7
   10e8c:	bd80      	pop	{r7, pc}
   10e8e:	46c0      	nop			; (mov r8, r8)
   10e90:	00010b71 	.word	0x00010b71

00010e94 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
   10e94:	b580      	push	{r7, lr}
   10e96:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   10e98:	4b02      	ldr	r3, [pc, #8]	; (10ea4 <system_interrupt_leave_critical_section+0x10>)
   10e9a:	4798      	blx	r3
}
   10e9c:	46c0      	nop			; (mov r8, r8)
   10e9e:	46bd      	mov	sp, r7
   10ea0:	bd80      	pop	{r7, pc}
   10ea2:	46c0      	nop			; (mov r8, r8)
   10ea4:	00010bc5 	.word	0x00010bc5

00010ea8 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
   10ea8:	b580      	push	{r7, lr}
   10eaa:	b084      	sub	sp, #16
   10eac:	af00      	add	r7, sp, #0
   10eae:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
   10eb0:	4b0d      	ldr	r3, [pc, #52]	; (10ee8 <spi_lock+0x40>)
   10eb2:	4798      	blx	r3

	if (module->locked) {
   10eb4:	687b      	ldr	r3, [r7, #4]
   10eb6:	791b      	ldrb	r3, [r3, #4]
   10eb8:	b2db      	uxtb	r3, r3
   10eba:	2b00      	cmp	r3, #0
   10ebc:	d004      	beq.n	10ec8 <spi_lock+0x20>
		status = STATUS_BUSY;
   10ebe:	230f      	movs	r3, #15
   10ec0:	18fb      	adds	r3, r7, r3
   10ec2:	2205      	movs	r2, #5
   10ec4:	701a      	strb	r2, [r3, #0]
   10ec6:	e006      	b.n	10ed6 <spi_lock+0x2e>
	} else {
		module->locked = true;
   10ec8:	687b      	ldr	r3, [r7, #4]
   10eca:	2201      	movs	r2, #1
   10ecc:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
   10ece:	230f      	movs	r3, #15
   10ed0:	18fb      	adds	r3, r7, r3
   10ed2:	2200      	movs	r2, #0
   10ed4:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
   10ed6:	4b05      	ldr	r3, [pc, #20]	; (10eec <spi_lock+0x44>)
   10ed8:	4798      	blx	r3

	return status;
   10eda:	230f      	movs	r3, #15
   10edc:	18fb      	adds	r3, r7, r3
   10ede:	781b      	ldrb	r3, [r3, #0]
}
   10ee0:	0018      	movs	r0, r3
   10ee2:	46bd      	mov	sp, r7
   10ee4:	b004      	add	sp, #16
   10ee6:	bd80      	pop	{r7, pc}
   10ee8:	00010e81 	.word	0x00010e81
   10eec:	00010e95 	.word	0x00010e95

00010ef0 <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
   10ef0:	b580      	push	{r7, lr}
   10ef2:	b082      	sub	sp, #8
   10ef4:	af00      	add	r7, sp, #0
   10ef6:	6078      	str	r0, [r7, #4]
	module->locked = false;
   10ef8:	687b      	ldr	r3, [r7, #4]
   10efa:	2200      	movs	r2, #0
   10efc:	711a      	strb	r2, [r3, #4]
}
   10efe:	46c0      	nop			; (mov r8, r8)
   10f00:	46bd      	mov	sp, r7
   10f02:	b002      	add	sp, #8
   10f04:	bd80      	pop	{r7, pc}
   10f06:	46c0      	nop			; (mov r8, r8)

00010f08 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   10f08:	b580      	push	{r7, lr}
   10f0a:	b084      	sub	sp, #16
   10f0c:	af00      	add	r7, sp, #0
   10f0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   10f10:	687b      	ldr	r3, [r7, #4]
   10f12:	681b      	ldr	r3, [r3, #0]
   10f14:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   10f16:	68fb      	ldr	r3, [r7, #12]
   10f18:	7e1b      	ldrb	r3, [r3, #24]
   10f1a:	b2db      	uxtb	r3, r3
   10f1c:	001a      	movs	r2, r3
   10f1e:	2301      	movs	r3, #1
   10f20:	4013      	ands	r3, r2
   10f22:	1e5a      	subs	r2, r3, #1
   10f24:	4193      	sbcs	r3, r2
   10f26:	b2db      	uxtb	r3, r3
}
   10f28:	0018      	movs	r0, r3
   10f2a:	46bd      	mov	sp, r7
   10f2c:	b004      	add	sp, #16
   10f2e:	bd80      	pop	{r7, pc}

00010f30 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   10f30:	b580      	push	{r7, lr}
   10f32:	b084      	sub	sp, #16
   10f34:	af00      	add	r7, sp, #0
   10f36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   10f38:	687b      	ldr	r3, [r7, #4]
   10f3a:	681b      	ldr	r3, [r3, #0]
   10f3c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   10f3e:	68fb      	ldr	r3, [r7, #12]
   10f40:	7e1b      	ldrb	r3, [r3, #24]
   10f42:	b2db      	uxtb	r3, r3
   10f44:	001a      	movs	r2, r3
   10f46:	2304      	movs	r3, #4
   10f48:	4013      	ands	r3, r2
   10f4a:	1e5a      	subs	r2, r3, #1
   10f4c:	4193      	sbcs	r3, r2
   10f4e:	b2db      	uxtb	r3, r3
}
   10f50:	0018      	movs	r0, r3
   10f52:	46bd      	mov	sp, r7
   10f54:	b004      	add	sp, #16
   10f56:	bd80      	pop	{r7, pc}

00010f58 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   10f58:	b580      	push	{r7, lr}
   10f5a:	b084      	sub	sp, #16
   10f5c:	af00      	add	r7, sp, #0
   10f5e:	6078      	str	r0, [r7, #4]
   10f60:	000a      	movs	r2, r1
   10f62:	1cbb      	adds	r3, r7, #2
   10f64:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   10f66:	687b      	ldr	r3, [r7, #4]
   10f68:	681b      	ldr	r3, [r3, #0]
   10f6a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   10f6c:	687b      	ldr	r3, [r7, #4]
   10f6e:	0018      	movs	r0, r3
   10f70:	4b0a      	ldr	r3, [pc, #40]	; (10f9c <spi_write+0x44>)
   10f72:	4798      	blx	r3
   10f74:	0003      	movs	r3, r0
   10f76:	001a      	movs	r2, r3
   10f78:	2301      	movs	r3, #1
   10f7a:	4053      	eors	r3, r2
   10f7c:	b2db      	uxtb	r3, r3
   10f7e:	2b00      	cmp	r3, #0
   10f80:	d001      	beq.n	10f86 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   10f82:	2305      	movs	r3, #5
   10f84:	e006      	b.n	10f94 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   10f86:	1cbb      	adds	r3, r7, #2
   10f88:	881b      	ldrh	r3, [r3, #0]
   10f8a:	05db      	lsls	r3, r3, #23
   10f8c:	0dda      	lsrs	r2, r3, #23
   10f8e:	68fb      	ldr	r3, [r7, #12]
   10f90:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   10f92:	2300      	movs	r3, #0
}
   10f94:	0018      	movs	r0, r3
   10f96:	46bd      	mov	sp, r7
   10f98:	b004      	add	sp, #16
   10f9a:	bd80      	pop	{r7, pc}
   10f9c:	00010f09 	.word	0x00010f09

00010fa0 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   10fa0:	b580      	push	{r7, lr}
   10fa2:	b084      	sub	sp, #16
   10fa4:	af00      	add	r7, sp, #0
   10fa6:	6078      	str	r0, [r7, #4]
   10fa8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   10faa:	687b      	ldr	r3, [r7, #4]
   10fac:	681b      	ldr	r3, [r3, #0]
   10fae:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   10fb0:	687b      	ldr	r3, [r7, #4]
   10fb2:	0018      	movs	r0, r3
   10fb4:	4b1b      	ldr	r3, [pc, #108]	; (11024 <spi_read+0x84>)
   10fb6:	4798      	blx	r3
   10fb8:	0003      	movs	r3, r0
   10fba:	001a      	movs	r2, r3
   10fbc:	2301      	movs	r3, #1
   10fbe:	4053      	eors	r3, r2
   10fc0:	b2db      	uxtb	r3, r3
   10fc2:	2b00      	cmp	r3, #0
   10fc4:	d001      	beq.n	10fca <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   10fc6:	2310      	movs	r3, #16
   10fc8:	e027      	b.n	1101a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   10fca:	230f      	movs	r3, #15
   10fcc:	18fb      	adds	r3, r7, r3
   10fce:	2200      	movs	r2, #0
   10fd0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   10fd2:	68bb      	ldr	r3, [r7, #8]
   10fd4:	8b5b      	ldrh	r3, [r3, #26]
   10fd6:	b29b      	uxth	r3, r3
   10fd8:	001a      	movs	r2, r3
   10fda:	2304      	movs	r3, #4
   10fdc:	4013      	ands	r3, r2
   10fde:	d006      	beq.n	10fee <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   10fe0:	230f      	movs	r3, #15
   10fe2:	18fb      	adds	r3, r7, r3
   10fe4:	221e      	movs	r2, #30
   10fe6:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   10fe8:	68bb      	ldr	r3, [r7, #8]
   10fea:	2204      	movs	r2, #4
   10fec:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   10fee:	687b      	ldr	r3, [r7, #4]
   10ff0:	799b      	ldrb	r3, [r3, #6]
   10ff2:	2b01      	cmp	r3, #1
   10ff4:	d108      	bne.n	11008 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   10ff6:	68bb      	ldr	r3, [r7, #8]
   10ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   10ffa:	b29b      	uxth	r3, r3
   10ffc:	05db      	lsls	r3, r3, #23
   10ffe:	0ddb      	lsrs	r3, r3, #23
   11000:	b29a      	uxth	r2, r3
   11002:	683b      	ldr	r3, [r7, #0]
   11004:	801a      	strh	r2, [r3, #0]
   11006:	e005      	b.n	11014 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   11008:	68bb      	ldr	r3, [r7, #8]
   1100a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1100c:	b2db      	uxtb	r3, r3
   1100e:	b29a      	uxth	r2, r3
   11010:	683b      	ldr	r3, [r7, #0]
   11012:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   11014:	230f      	movs	r3, #15
   11016:	18fb      	adds	r3, r7, r3
   11018:	781b      	ldrb	r3, [r3, #0]
}
   1101a:	0018      	movs	r0, r3
   1101c:	46bd      	mov	sp, r7
   1101e:	b004      	add	sp, #16
   11020:	bd80      	pop	{r7, pc}
   11022:	46c0      	nop			; (mov r8, r8)
   11024:	00010f31 	.word	0x00010f31

00011028 <_at25dfx_get_device_id>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash device ID.
 */
static inline uint32_t _at25dfx_get_device_id(enum at25dfx_type type)
{
   11028:	b580      	push	{r7, lr}
   1102a:	b082      	sub	sp, #8
   1102c:	af00      	add	r7, sp, #0
   1102e:	0002      	movs	r2, r0
   11030:	1dfb      	adds	r3, r7, #7
   11032:	701a      	strb	r2, [r3, #0]
	switch (type) {
   11034:	1dfb      	adds	r3, r7, #7
   11036:	781b      	ldrb	r3, [r3, #0]
   11038:	2b09      	cmp	r3, #9
   1103a:	d818      	bhi.n	1106e <_at25dfx_get_device_id+0x46>
   1103c:	009a      	lsls	r2, r3, #2
   1103e:	4b0e      	ldr	r3, [pc, #56]	; (11078 <_at25dfx_get_device_id+0x50>)
   11040:	18d3      	adds	r3, r2, r3
   11042:	681b      	ldr	r3, [r3, #0]
   11044:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 0x00651f;
   11046:	4b0d      	ldr	r3, [pc, #52]	; (1107c <_at25dfx_get_device_id+0x54>)
   11048:	e012      	b.n	11070 <_at25dfx_get_device_id+0x48>

	case AT25DFX_021:
		return 0x00431f;
   1104a:	4b0d      	ldr	r3, [pc, #52]	; (11080 <_at25dfx_get_device_id+0x58>)
   1104c:	e010      	b.n	11070 <_at25dfx_get_device_id+0x48>

	case AT25DFX_041A:
		return 0x01441f;
   1104e:	4b0d      	ldr	r3, [pc, #52]	; (11084 <_at25dfx_get_device_id+0x5c>)
   11050:	e00e      	b.n	11070 <_at25dfx_get_device_id+0x48>

	case AT25DFX_081:
		return 0x02451f;
   11052:	4b0d      	ldr	r3, [pc, #52]	; (11088 <_at25dfx_get_device_id+0x60>)
   11054:	e00c      	b.n	11070 <_at25dfx_get_device_id+0x48>

	case AT25DFX_081A:
		return 0x01451f;
   11056:	4b0d      	ldr	r3, [pc, #52]	; (1108c <_at25dfx_get_device_id+0x64>)
   11058:	e00a      	b.n	11070 <_at25dfx_get_device_id+0x48>

	case AT25DFX_161:
		return 0x02461f;
   1105a:	4b0d      	ldr	r3, [pc, #52]	; (11090 <_at25dfx_get_device_id+0x68>)
   1105c:	e008      	b.n	11070 <_at25dfx_get_device_id+0x48>

	case AT25DFX_L161:
		return 0x03461f;
   1105e:	4b0d      	ldr	r3, [pc, #52]	; (11094 <_at25dfx_get_device_id+0x6c>)
   11060:	e006      	b.n	11070 <_at25dfx_get_device_id+0x48>

	case AT25DFX_Q161:
		return 0x00861f;
   11062:	4b0d      	ldr	r3, [pc, #52]	; (11098 <_at25dfx_get_device_id+0x70>)
   11064:	e004      	b.n	11070 <_at25dfx_get_device_id+0x48>

	case AT25DFX_321A:
		return 0x01471f;
   11066:	4b0d      	ldr	r3, [pc, #52]	; (1109c <_at25dfx_get_device_id+0x74>)
   11068:	e002      	b.n	11070 <_at25dfx_get_device_id+0x48>

	case AT25DFX_641:
		return 0x00481f;
   1106a:	4b0d      	ldr	r3, [pc, #52]	; (110a0 <_at25dfx_get_device_id+0x78>)
   1106c:	e000      	b.n	11070 <_at25dfx_get_device_id+0x48>

	default:
		Assert(false);
		return 0;
   1106e:	2300      	movs	r3, #0
	}
}
   11070:	0018      	movs	r0, r3
   11072:	46bd      	mov	sp, r7
   11074:	b002      	add	sp, #8
   11076:	bd80      	pop	{r7, pc}
   11078:	000195ac 	.word	0x000195ac
   1107c:	0000651f 	.word	0x0000651f
   11080:	0000431f 	.word	0x0000431f
   11084:	0001441f 	.word	0x0001441f
   11088:	0002451f 	.word	0x0002451f
   1108c:	0001451f 	.word	0x0001451f
   11090:	0002461f 	.word	0x0002461f
   11094:	0003461f 	.word	0x0003461f
   11098:	0000861f 	.word	0x0000861f
   1109c:	0001471f 	.word	0x0001471f
   110a0:	0000481f 	.word	0x0000481f

000110a4 <_at25dfx_get_device_size>:
 * \param[in] type Type of SerialFlash.
 *
 * \return SerialFlash storage size.
 */
static inline uint32_t _at25dfx_get_device_size(enum at25dfx_type type)
{
   110a4:	b580      	push	{r7, lr}
   110a6:	b082      	sub	sp, #8
   110a8:	af00      	add	r7, sp, #0
   110aa:	0002      	movs	r2, r0
   110ac:	1dfb      	adds	r3, r7, #7
   110ae:	701a      	strb	r2, [r3, #0]
	switch (type) {
   110b0:	1dfb      	adds	r3, r7, #7
   110b2:	781b      	ldrb	r3, [r3, #0]
   110b4:	2b09      	cmp	r3, #9
   110b6:	d819      	bhi.n	110ec <_at25dfx_get_device_size+0x48>
   110b8:	009a      	lsls	r2, r3, #2
   110ba:	4b0f      	ldr	r3, [pc, #60]	; (110f8 <_at25dfx_get_device_size+0x54>)
   110bc:	18d3      	adds	r3, r2, r3
   110be:	681b      	ldr	r3, [r3, #0]
   110c0:	469f      	mov	pc, r3
	case AT25DFX_512B:
		return 64 * 1024UL;
   110c2:	2380      	movs	r3, #128	; 0x80
   110c4:	025b      	lsls	r3, r3, #9
   110c6:	e012      	b.n	110ee <_at25dfx_get_device_size+0x4a>

	case AT25DFX_021:
		return 256 * 1024UL;
   110c8:	2380      	movs	r3, #128	; 0x80
   110ca:	02db      	lsls	r3, r3, #11
   110cc:	e00f      	b.n	110ee <_at25dfx_get_device_size+0x4a>

	case AT25DFX_041A:
		return 512 * 1024UL;
   110ce:	2380      	movs	r3, #128	; 0x80
   110d0:	031b      	lsls	r3, r3, #12
   110d2:	e00c      	b.n	110ee <_at25dfx_get_device_size+0x4a>

	case AT25DFX_081:
	case AT25DFX_081A:
		return 1024 * 1024UL;
   110d4:	2380      	movs	r3, #128	; 0x80
   110d6:	035b      	lsls	r3, r3, #13
   110d8:	e009      	b.n	110ee <_at25dfx_get_device_size+0x4a>

	case AT25DFX_161:
	case AT25DFX_L161:
	case AT25DFX_Q161:
		return 2048 * 1024UL;
   110da:	2380      	movs	r3, #128	; 0x80
   110dc:	039b      	lsls	r3, r3, #14
   110de:	e006      	b.n	110ee <_at25dfx_get_device_size+0x4a>

	case AT25DFX_321A:
		return 4096 * 1024UL;
   110e0:	2380      	movs	r3, #128	; 0x80
   110e2:	03db      	lsls	r3, r3, #15
   110e4:	e003      	b.n	110ee <_at25dfx_get_device_size+0x4a>

	case AT25DFX_641:
		return 8192 * 1024UL;
   110e6:	2380      	movs	r3, #128	; 0x80
   110e8:	041b      	lsls	r3, r3, #16
   110ea:	e000      	b.n	110ee <_at25dfx_get_device_size+0x4a>

	default:
		Assert(false);
		return 0;
   110ec:	2300      	movs	r3, #0
	}
}
   110ee:	0018      	movs	r0, r3
   110f0:	46bd      	mov	sp, r7
   110f2:	b002      	add	sp, #8
   110f4:	bd80      	pop	{r7, pc}
   110f6:	46c0      	nop			; (mov r8, r8)
   110f8:	000195d4 	.word	0x000195d4

000110fc <_at25dfx_chip_select>:
 * This function selects the specified chip by driving its CS line low.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_select(struct at25dfx_chip_module *chip)
{
   110fc:	b580      	push	{r7, lr}
   110fe:	b082      	sub	sp, #8
   11100:	af00      	add	r7, sp, #0
   11102:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
   11104:	687b      	ldr	r3, [r7, #4]
   11106:	795b      	ldrb	r3, [r3, #5]
   11108:	2100      	movs	r1, #0
   1110a:	0018      	movs	r0, r3
   1110c:	4b02      	ldr	r3, [pc, #8]	; (11118 <_at25dfx_chip_select+0x1c>)
   1110e:	4798      	blx	r3
}
   11110:	46c0      	nop			; (mov r8, r8)
   11112:	46bd      	mov	sp, r7
   11114:	b002      	add	sp, #8
   11116:	bd80      	pop	{r7, pc}
   11118:	00010e2d 	.word	0x00010e2d

0001111c <_at25dfx_chip_deselect>:
 * This function deselects the specified chip by driving its CS line high.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
   1111c:	b580      	push	{r7, lr}
   1111e:	b082      	sub	sp, #8
   11120:	af00      	add	r7, sp, #0
   11122:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
   11124:	687b      	ldr	r3, [r7, #4]
   11126:	795b      	ldrb	r3, [r3, #5]
   11128:	2101      	movs	r1, #1
   1112a:	0018      	movs	r0, r3
   1112c:	4b02      	ldr	r3, [pc, #8]	; (11138 <_at25dfx_chip_deselect+0x1c>)
   1112e:	4798      	blx	r3
}
   11130:	46c0      	nop			; (mov r8, r8)
   11132:	46bd      	mov	sp, r7
   11134:	b002      	add	sp, #8
   11136:	bd80      	pop	{r7, pc}
   11138:	00010e2d 	.word	0x00010e2d

0001113c <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
   1113c:	b084      	sub	sp, #16
   1113e:	b5b0      	push	{r4, r5, r7, lr}
   11140:	b084      	sub	sp, #16
   11142:	af00      	add	r7, sp, #0
   11144:	6078      	str	r0, [r7, #4]
   11146:	2004      	movs	r0, #4
   11148:	2420      	movs	r4, #32
   1114a:	46a4      	mov	ip, r4
   1114c:	44bc      	add	ip, r7
   1114e:	4460      	add	r0, ip
   11150:	6001      	str	r1, [r0, #0]
   11152:	6042      	str	r2, [r0, #4]
   11154:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
   11156:	2304      	movs	r3, #4
   11158:	2220      	movs	r2, #32
   1115a:	4694      	mov	ip, r2
   1115c:	44bc      	add	ip, r7
   1115e:	4463      	add	r3, ip
   11160:	781a      	ldrb	r2, [r3, #0]
   11162:	2308      	movs	r3, #8
   11164:	18fb      	adds	r3, r7, r3
   11166:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
   11168:	2304      	movs	r3, #4
   1116a:	2220      	movs	r2, #32
   1116c:	4694      	mov	ip, r2
   1116e:	44bc      	add	ip, r7
   11170:	4463      	add	r3, ip
   11172:	785b      	ldrb	r3, [r3, #1]
   11174:	2b01      	cmp	r3, #1
   11176:	d91f      	bls.n	111b8 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
   11178:	2304      	movs	r3, #4
   1117a:	2220      	movs	r2, #32
   1117c:	4694      	mov	ip, r2
   1117e:	44bc      	add	ip, r7
   11180:	4463      	add	r3, ip
   11182:	685b      	ldr	r3, [r3, #4]
   11184:	b2da      	uxtb	r2, r3
   11186:	2308      	movs	r3, #8
   11188:	18fb      	adds	r3, r7, r3
   1118a:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
   1118c:	2304      	movs	r3, #4
   1118e:	2220      	movs	r2, #32
   11190:	4694      	mov	ip, r2
   11192:	44bc      	add	ip, r7
   11194:	4463      	add	r3, ip
   11196:	685b      	ldr	r3, [r3, #4]
   11198:	0a1b      	lsrs	r3, r3, #8
   1119a:	b2da      	uxtb	r2, r3
   1119c:	2308      	movs	r3, #8
   1119e:	18fb      	adds	r3, r7, r3
   111a0:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
   111a2:	2304      	movs	r3, #4
   111a4:	2220      	movs	r2, #32
   111a6:	4694      	mov	ip, r2
   111a8:	44bc      	add	ip, r7
   111aa:	4463      	add	r3, ip
   111ac:	685b      	ldr	r3, [r3, #4]
   111ae:	0c1b      	lsrs	r3, r3, #16
   111b0:	b2da      	uxtb	r2, r3
   111b2:	2308      	movs	r3, #8
   111b4:	18fb      	adds	r3, r7, r3
   111b6:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
   111b8:	687b      	ldr	r3, [r7, #4]
   111ba:	0018      	movs	r0, r3
   111bc:	4b1d      	ldr	r3, [pc, #116]	; (11234 <_at25dfx_chip_issue_read_command_wait+0xf8>)
   111be:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
   111c0:	687b      	ldr	r3, [r7, #4]
   111c2:	6818      	ldr	r0, [r3, #0]
   111c4:	2304      	movs	r3, #4
   111c6:	2220      	movs	r2, #32
   111c8:	4694      	mov	ip, r2
   111ca:	44bc      	add	ip, r7
   111cc:	4463      	add	r3, ip
   111ce:	785b      	ldrb	r3, [r3, #1]
   111d0:	b29a      	uxth	r2, r3
   111d2:	230f      	movs	r3, #15
   111d4:	18fc      	adds	r4, r7, r3
   111d6:	2308      	movs	r3, #8
   111d8:	18fb      	adds	r3, r7, r3
   111da:	0019      	movs	r1, r3
   111dc:	4b16      	ldr	r3, [pc, #88]	; (11238 <_at25dfx_chip_issue_read_command_wait+0xfc>)
   111de:	4798      	blx	r3
   111e0:	0003      	movs	r3, r0
   111e2:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
   111e4:	2304      	movs	r3, #4
   111e6:	2220      	movs	r2, #32
   111e8:	4694      	mov	ip, r2
   111ea:	44bc      	add	ip, r7
   111ec:	4463      	add	r3, ip
   111ee:	899b      	ldrh	r3, [r3, #12]
   111f0:	2b00      	cmp	r3, #0
   111f2:	d014      	beq.n	1121e <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
   111f4:	687b      	ldr	r3, [r7, #4]
   111f6:	6818      	ldr	r0, [r3, #0]
   111f8:	2304      	movs	r3, #4
   111fa:	2220      	movs	r2, #32
   111fc:	4694      	mov	ip, r2
   111fe:	44bc      	add	ip, r7
   11200:	4463      	add	r3, ip
   11202:	6899      	ldr	r1, [r3, #8]
   11204:	2304      	movs	r3, #4
   11206:	2220      	movs	r2, #32
   11208:	4694      	mov	ip, r2
   1120a:	44bc      	add	ip, r7
   1120c:	4463      	add	r3, ip
   1120e:	899a      	ldrh	r2, [r3, #12]
   11210:	230f      	movs	r3, #15
   11212:	18fc      	adds	r4, r7, r3
   11214:	2300      	movs	r3, #0
   11216:	4d09      	ldr	r5, [pc, #36]	; (1123c <_at25dfx_chip_issue_read_command_wait+0x100>)
   11218:	47a8      	blx	r5
   1121a:	0003      	movs	r3, r0
   1121c:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
   1121e:	687b      	ldr	r3, [r7, #4]
   11220:	0018      	movs	r0, r3
   11222:	4b07      	ldr	r3, [pc, #28]	; (11240 <_at25dfx_chip_issue_read_command_wait+0x104>)
   11224:	4798      	blx	r3
}
   11226:	46c0      	nop			; (mov r8, r8)
   11228:	46bd      	mov	sp, r7
   1122a:	b004      	add	sp, #16
   1122c:	bcb0      	pop	{r4, r5, r7}
   1122e:	bc08      	pop	{r3}
   11230:	b004      	add	sp, #16
   11232:	4718      	bx	r3
   11234:	000110fd 	.word	0x000110fd
   11238:	000131fd 	.word	0x000131fd
   1123c:	00012f51 	.word	0x00012f51
   11240:	0001111d 	.word	0x0001111d

00011244 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
   11244:	b084      	sub	sp, #16
   11246:	b590      	push	{r4, r7, lr}
   11248:	b085      	sub	sp, #20
   1124a:	af00      	add	r7, sp, #0
   1124c:	6078      	str	r0, [r7, #4]
   1124e:	2004      	movs	r0, #4
   11250:	2420      	movs	r4, #32
   11252:	46a4      	mov	ip, r4
   11254:	44bc      	add	ip, r7
   11256:	4460      	add	r0, ip
   11258:	6001      	str	r1, [r0, #0]
   1125a:	6042      	str	r2, [r0, #4]
   1125c:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
   1125e:	2304      	movs	r3, #4
   11260:	2220      	movs	r2, #32
   11262:	4694      	mov	ip, r2
   11264:	44bc      	add	ip, r7
   11266:	4463      	add	r3, ip
   11268:	781a      	ldrb	r2, [r3, #0]
   1126a:	2308      	movs	r3, #8
   1126c:	18fb      	adds	r3, r7, r3
   1126e:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
   11270:	2304      	movs	r3, #4
   11272:	2220      	movs	r2, #32
   11274:	4694      	mov	ip, r2
   11276:	44bc      	add	ip, r7
   11278:	4463      	add	r3, ip
   1127a:	785b      	ldrb	r3, [r3, #1]
   1127c:	2b01      	cmp	r3, #1
   1127e:	d91f      	bls.n	112c0 <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
   11280:	2304      	movs	r3, #4
   11282:	2220      	movs	r2, #32
   11284:	4694      	mov	ip, r2
   11286:	44bc      	add	ip, r7
   11288:	4463      	add	r3, ip
   1128a:	685b      	ldr	r3, [r3, #4]
   1128c:	b2da      	uxtb	r2, r3
   1128e:	2308      	movs	r3, #8
   11290:	18fb      	adds	r3, r7, r3
   11292:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
   11294:	2304      	movs	r3, #4
   11296:	2220      	movs	r2, #32
   11298:	4694      	mov	ip, r2
   1129a:	44bc      	add	ip, r7
   1129c:	4463      	add	r3, ip
   1129e:	685b      	ldr	r3, [r3, #4]
   112a0:	0a1b      	lsrs	r3, r3, #8
   112a2:	b2da      	uxtb	r2, r3
   112a4:	2308      	movs	r3, #8
   112a6:	18fb      	adds	r3, r7, r3
   112a8:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
   112aa:	2304      	movs	r3, #4
   112ac:	2220      	movs	r2, #32
   112ae:	4694      	mov	ip, r2
   112b0:	44bc      	add	ip, r7
   112b2:	4463      	add	r3, ip
   112b4:	685b      	ldr	r3, [r3, #4]
   112b6:	0c1b      	lsrs	r3, r3, #16
   112b8:	b2da      	uxtb	r2, r3
   112ba:	2308      	movs	r3, #8
   112bc:	18fb      	adds	r3, r7, r3
   112be:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
   112c0:	687b      	ldr	r3, [r7, #4]
   112c2:	0018      	movs	r0, r3
   112c4:	4b1d      	ldr	r3, [pc, #116]	; (1133c <_at25dfx_chip_issue_write_command_wait+0xf8>)
   112c6:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
   112c8:	687b      	ldr	r3, [r7, #4]
   112ca:	6818      	ldr	r0, [r3, #0]
   112cc:	2304      	movs	r3, #4
   112ce:	2220      	movs	r2, #32
   112d0:	4694      	mov	ip, r2
   112d2:	44bc      	add	ip, r7
   112d4:	4463      	add	r3, ip
   112d6:	785b      	ldrb	r3, [r3, #1]
   112d8:	b29a      	uxth	r2, r3
   112da:	230f      	movs	r3, #15
   112dc:	18fc      	adds	r4, r7, r3
   112de:	2308      	movs	r3, #8
   112e0:	18fb      	adds	r3, r7, r3
   112e2:	0019      	movs	r1, r3
   112e4:	4b16      	ldr	r3, [pc, #88]	; (11340 <_at25dfx_chip_issue_write_command_wait+0xfc>)
   112e6:	4798      	blx	r3
   112e8:	0003      	movs	r3, r0
   112ea:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
   112ec:	2304      	movs	r3, #4
   112ee:	2220      	movs	r2, #32
   112f0:	4694      	mov	ip, r2
   112f2:	44bc      	add	ip, r7
   112f4:	4463      	add	r3, ip
   112f6:	899b      	ldrh	r3, [r3, #12]
   112f8:	2b00      	cmp	r3, #0
   112fa:	d014      	beq.n	11326 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
   112fc:	687b      	ldr	r3, [r7, #4]
   112fe:	6818      	ldr	r0, [r3, #0]
   11300:	2304      	movs	r3, #4
   11302:	2220      	movs	r2, #32
   11304:	4694      	mov	ip, r2
   11306:	44bc      	add	ip, r7
   11308:	4463      	add	r3, ip
   1130a:	6899      	ldr	r1, [r3, #8]
   1130c:	2304      	movs	r3, #4
   1130e:	2220      	movs	r2, #32
   11310:	4694      	mov	ip, r2
   11312:	44bc      	add	ip, r7
   11314:	4463      	add	r3, ip
   11316:	899b      	ldrh	r3, [r3, #12]
   11318:	220f      	movs	r2, #15
   1131a:	18bc      	adds	r4, r7, r2
   1131c:	001a      	movs	r2, r3
   1131e:	4b08      	ldr	r3, [pc, #32]	; (11340 <_at25dfx_chip_issue_write_command_wait+0xfc>)
   11320:	4798      	blx	r3
   11322:	0003      	movs	r3, r0
   11324:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
   11326:	687b      	ldr	r3, [r7, #4]
   11328:	0018      	movs	r0, r3
   1132a:	4b06      	ldr	r3, [pc, #24]	; (11344 <_at25dfx_chip_issue_write_command_wait+0x100>)
   1132c:	4798      	blx	r3
}
   1132e:	46c0      	nop			; (mov r8, r8)
   11330:	46bd      	mov	sp, r7
   11332:	b005      	add	sp, #20
   11334:	bc90      	pop	{r4, r7}
   11336:	bc08      	pop	{r3}
   11338:	b004      	add	sp, #16
   1133a:	4718      	bx	r3
   1133c:	000110fd 	.word	0x000110fd
   11340:	000131fd 	.word	0x000131fd
   11344:	0001111d 	.word	0x0001111d

00011348 <_at25dfx_chip_get_nonbusy_status>:
 * \retval STATUS_OK if operation succeeded.
 * \retval STATUS_ERR_IO if an error occurred.
 */
static inline enum status_code _at25dfx_chip_get_nonbusy_status(
		struct at25dfx_chip_module *chip)
{
   11348:	b590      	push	{r4, r7, lr}
   1134a:	b085      	sub	sp, #20
   1134c:	af00      	add	r7, sp, #0
   1134e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	uint16_t status_reg = 0;
   11350:	230c      	movs	r3, #12
   11352:	18fb      	adds	r3, r7, r3
   11354:	2200      	movs	r2, #0
   11356:	801a      	strh	r2, [r3, #0]

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
   11358:	46c0      	nop			; (mov r8, r8)
   1135a:	687b      	ldr	r3, [r7, #4]
   1135c:	681b      	ldr	r3, [r3, #0]
   1135e:	0018      	movs	r0, r3
   11360:	4b3c      	ldr	r3, [pc, #240]	; (11454 <_at25dfx_chip_get_nonbusy_status+0x10c>)
   11362:	4798      	blx	r3
   11364:	0003      	movs	r3, r0
   11366:	001a      	movs	r2, r3
   11368:	2301      	movs	r3, #1
   1136a:	4053      	eors	r3, r2
   1136c:	b2db      	uxtb	r3, r3
   1136e:	2b00      	cmp	r3, #0
   11370:	d1f3      	bne.n	1135a <_at25dfx_chip_get_nonbusy_status+0x12>
	}

	_at25dfx_chip_select(chip);
   11372:	687b      	ldr	r3, [r7, #4]
   11374:	0018      	movs	r0, r3
   11376:	4b38      	ldr	r3, [pc, #224]	; (11458 <_at25dfx_chip_get_nonbusy_status+0x110>)
   11378:	4798      	blx	r3
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
   1137a:	687b      	ldr	r3, [r7, #4]
   1137c:	681b      	ldr	r3, [r3, #0]
   1137e:	220f      	movs	r2, #15
   11380:	18bc      	adds	r4, r7, r2
   11382:	2105      	movs	r1, #5
   11384:	0018      	movs	r0, r3
   11386:	4b35      	ldr	r3, [pc, #212]	; (1145c <_at25dfx_chip_get_nonbusy_status+0x114>)
   11388:	4798      	blx	r3
   1138a:	0003      	movs	r3, r0
   1138c:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
   1138e:	46c0      	nop			; (mov r8, r8)
   11390:	687b      	ldr	r3, [r7, #4]
   11392:	681b      	ldr	r3, [r3, #0]
   11394:	0018      	movs	r0, r3
   11396:	4b32      	ldr	r3, [pc, #200]	; (11460 <_at25dfx_chip_get_nonbusy_status+0x118>)
   11398:	4798      	blx	r3
   1139a:	0003      	movs	r3, r0
   1139c:	001a      	movs	r2, r3
   1139e:	2301      	movs	r3, #1
   113a0:	4053      	eors	r3, r2
   113a2:	b2db      	uxtb	r3, r3
   113a4:	2b00      	cmp	r3, #0
   113a6:	d1f3      	bne.n	11390 <_at25dfx_chip_get_nonbusy_status+0x48>
	}
	status = spi_read(chip->spi, &status_reg);
   113a8:	687b      	ldr	r3, [r7, #4]
   113aa:	681b      	ldr	r3, [r3, #0]
   113ac:	220f      	movs	r2, #15
   113ae:	18bc      	adds	r4, r7, r2
   113b0:	220c      	movs	r2, #12
   113b2:	18ba      	adds	r2, r7, r2
   113b4:	0011      	movs	r1, r2
   113b6:	0018      	movs	r0, r3
   113b8:	4b2a      	ldr	r3, [pc, #168]	; (11464 <_at25dfx_chip_get_nonbusy_status+0x11c>)
   113ba:	4798      	blx	r3
   113bc:	0003      	movs	r3, r0
   113be:	7023      	strb	r3, [r4, #0]

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
   113c0:	46c0      	nop			; (mov r8, r8)
   113c2:	687b      	ldr	r3, [r7, #4]
   113c4:	681b      	ldr	r3, [r3, #0]
   113c6:	0018      	movs	r0, r3
   113c8:	4b22      	ldr	r3, [pc, #136]	; (11454 <_at25dfx_chip_get_nonbusy_status+0x10c>)
   113ca:	4798      	blx	r3
   113cc:	0003      	movs	r3, r0
   113ce:	001a      	movs	r2, r3
   113d0:	2301      	movs	r3, #1
   113d2:	4053      	eors	r3, r2
   113d4:	b2db      	uxtb	r3, r3
   113d6:	2b00      	cmp	r3, #0
   113d8:	d1f3      	bne.n	113c2 <_at25dfx_chip_get_nonbusy_status+0x7a>
		}
		status = spi_write(chip->spi, 0);
   113da:	687b      	ldr	r3, [r7, #4]
   113dc:	681b      	ldr	r3, [r3, #0]
   113de:	220f      	movs	r2, #15
   113e0:	18bc      	adds	r4, r7, r2
   113e2:	2100      	movs	r1, #0
   113e4:	0018      	movs	r0, r3
   113e6:	4b1d      	ldr	r3, [pc, #116]	; (1145c <_at25dfx_chip_get_nonbusy_status+0x114>)
   113e8:	4798      	blx	r3
   113ea:	0003      	movs	r3, r0
   113ec:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
   113ee:	46c0      	nop			; (mov r8, r8)
   113f0:	687b      	ldr	r3, [r7, #4]
   113f2:	681b      	ldr	r3, [r3, #0]
   113f4:	0018      	movs	r0, r3
   113f6:	4b1a      	ldr	r3, [pc, #104]	; (11460 <_at25dfx_chip_get_nonbusy_status+0x118>)
   113f8:	4798      	blx	r3
   113fa:	0003      	movs	r3, r0
   113fc:	001a      	movs	r2, r3
   113fe:	2301      	movs	r3, #1
   11400:	4053      	eors	r3, r2
   11402:	b2db      	uxtb	r3, r3
   11404:	2b00      	cmp	r3, #0
   11406:	d1f3      	bne.n	113f0 <_at25dfx_chip_get_nonbusy_status+0xa8>
		}
		status = spi_read(chip->spi, &status_reg);
   11408:	687b      	ldr	r3, [r7, #4]
   1140a:	681b      	ldr	r3, [r3, #0]
   1140c:	220f      	movs	r2, #15
   1140e:	18bc      	adds	r4, r7, r2
   11410:	220c      	movs	r2, #12
   11412:	18ba      	adds	r2, r7, r2
   11414:	0011      	movs	r1, r2
   11416:	0018      	movs	r0, r3
   11418:	4b12      	ldr	r3, [pc, #72]	; (11464 <_at25dfx_chip_get_nonbusy_status+0x11c>)
   1141a:	4798      	blx	r3
   1141c:	0003      	movs	r3, r0
   1141e:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
   11420:	230c      	movs	r3, #12
   11422:	18fb      	adds	r3, r7, r3
   11424:	881b      	ldrh	r3, [r3, #0]
   11426:	001a      	movs	r2, r3
   11428:	2301      	movs	r3, #1
   1142a:	4013      	ands	r3, r2
   1142c:	d1c8      	bne.n	113c0 <_at25dfx_chip_get_nonbusy_status+0x78>

	_at25dfx_chip_deselect(chip);
   1142e:	687b      	ldr	r3, [r7, #4]
   11430:	0018      	movs	r0, r3
   11432:	4b0d      	ldr	r3, [pc, #52]	; (11468 <_at25dfx_chip_get_nonbusy_status+0x120>)
   11434:	4798      	blx	r3

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
   11436:	230c      	movs	r3, #12
   11438:	18fb      	adds	r3, r7, r3
   1143a:	881b      	ldrh	r3, [r3, #0]
   1143c:	001a      	movs	r2, r3
   1143e:	2320      	movs	r3, #32
   11440:	4013      	ands	r3, r2
   11442:	d001      	beq.n	11448 <_at25dfx_chip_get_nonbusy_status+0x100>
		return STATUS_ERR_IO;
   11444:	2310      	movs	r3, #16
   11446:	e000      	b.n	1144a <_at25dfx_chip_get_nonbusy_status+0x102>
	}
	return STATUS_OK;
   11448:	2300      	movs	r3, #0
}
   1144a:	0018      	movs	r0, r3
   1144c:	46bd      	mov	sp, r7
   1144e:	b005      	add	sp, #20
   11450:	bd90      	pop	{r4, r7, pc}
   11452:	46c0      	nop			; (mov r8, r8)
   11454:	00010f09 	.word	0x00010f09
   11458:	000110fd 	.word	0x000110fd
   1145c:	00010f59 	.word	0x00010f59
   11460:	00010f31 	.word	0x00010f31
   11464:	00010fa1 	.word	0x00010fa1
   11468:	0001111d 	.word	0x0001111d

0001146c <_at25dfx_chip_enable_write>:
 * or unprotecting sectors.
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_enable_write(struct at25dfx_chip_module *chip)
{
   1146c:	b590      	push	{r4, r7, lr}
   1146e:	b089      	sub	sp, #36	; 0x24
   11470:	af02      	add	r7, sp, #8
   11472:	6078      	str	r0, [r7, #4]
	struct at25dfx_command cmd;

	cmd.opcode = AT25DFX_COMMAND_WRITE_ENABLE;
   11474:	2308      	movs	r3, #8
   11476:	18fb      	adds	r3, r7, r3
   11478:	2206      	movs	r2, #6
   1147a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   1147c:	2308      	movs	r3, #8
   1147e:	18fb      	adds	r3, r7, r3
   11480:	2201      	movs	r2, #1
   11482:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
   11484:	2308      	movs	r3, #8
   11486:	18fb      	adds	r3, r7, r3
   11488:	2200      	movs	r2, #0
   1148a:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   1148c:	2308      	movs	r3, #8
   1148e:	18fb      	adds	r3, r7, r3
   11490:	2200      	movs	r2, #0
   11492:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
   11494:	2308      	movs	r3, #8
   11496:	18fb      	adds	r3, r7, r3
   11498:	2200      	movs	r2, #0
   1149a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   1149c:	2308      	movs	r3, #8
   1149e:	18fb      	adds	r3, r7, r3
   114a0:	6878      	ldr	r0, [r7, #4]
   114a2:	466a      	mov	r2, sp
   114a4:	68d9      	ldr	r1, [r3, #12]
   114a6:	6011      	str	r1, [r2, #0]
   114a8:	6819      	ldr	r1, [r3, #0]
   114aa:	685a      	ldr	r2, [r3, #4]
   114ac:	689b      	ldr	r3, [r3, #8]
   114ae:	4c03      	ldr	r4, [pc, #12]	; (114bc <_at25dfx_chip_enable_write+0x50>)
   114b0:	47a0      	blx	r4
}
   114b2:	46c0      	nop			; (mov r8, r8)
   114b4:	46bd      	mov	sp, r7
   114b6:	b007      	add	sp, #28
   114b8:	bd90      	pop	{r4, r7, pc}
   114ba:	46c0      	nop			; (mov r8, r8)
   114bc:	00011245 	.word	0x00011245

000114c0 <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
   114c0:	b590      	push	{r4, r7, lr}
   114c2:	b08b      	sub	sp, #44	; 0x2c
   114c4:	af02      	add	r7, sp, #8
   114c6:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
   114c8:	2300      	movs	r3, #0
   114ca:	60bb      	str	r3, [r7, #8]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
   114cc:	687b      	ldr	r3, [r7, #4]
   114ce:	681b      	ldr	r3, [r3, #0]
   114d0:	221f      	movs	r2, #31
   114d2:	18bc      	adds	r4, r7, r2
   114d4:	0018      	movs	r0, r3
   114d6:	4b21      	ldr	r3, [pc, #132]	; (1155c <at25dfx_chip_check_presence+0x9c>)
   114d8:	4798      	blx	r3
   114da:	0003      	movs	r3, r0
   114dc:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   114de:	231f      	movs	r3, #31
   114e0:	18fb      	adds	r3, r7, r3
   114e2:	781b      	ldrb	r3, [r3, #0]
   114e4:	2b05      	cmp	r3, #5
   114e6:	d103      	bne.n	114f0 <at25dfx_chip_check_presence+0x30>
		return status;
   114e8:	231f      	movs	r3, #31
   114ea:	18fb      	adds	r3, r7, r3
   114ec:	781b      	ldrb	r3, [r3, #0]
   114ee:	e030      	b.n	11552 <at25dfx_chip_check_presence+0x92>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
   114f0:	230c      	movs	r3, #12
   114f2:	18fb      	adds	r3, r7, r3
   114f4:	229f      	movs	r2, #159	; 0x9f
   114f6:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   114f8:	230c      	movs	r3, #12
   114fa:	18fb      	adds	r3, r7, r3
   114fc:	2201      	movs	r2, #1
   114fe:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
   11500:	230c      	movs	r3, #12
   11502:	18fb      	adds	r3, r7, r3
   11504:	2208      	movs	r2, #8
   11506:	18ba      	adds	r2, r7, r2
   11508:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
   1150a:	230c      	movs	r3, #12
   1150c:	18fb      	adds	r3, r7, r3
   1150e:	2203      	movs	r2, #3
   11510:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   11512:	230c      	movs	r3, #12
   11514:	18fb      	adds	r3, r7, r3
   11516:	2200      	movs	r2, #0
   11518:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_read_command_wait(chip, cmd);
   1151a:	230c      	movs	r3, #12
   1151c:	18fb      	adds	r3, r7, r3
   1151e:	6878      	ldr	r0, [r7, #4]
   11520:	466a      	mov	r2, sp
   11522:	68d9      	ldr	r1, [r3, #12]
   11524:	6011      	str	r1, [r2, #0]
   11526:	6819      	ldr	r1, [r3, #0]
   11528:	685a      	ldr	r2, [r3, #4]
   1152a:	689b      	ldr	r3, [r3, #8]
   1152c:	4c0c      	ldr	r4, [pc, #48]	; (11560 <at25dfx_chip_check_presence+0xa0>)
   1152e:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   11530:	687b      	ldr	r3, [r7, #4]
   11532:	681b      	ldr	r3, [r3, #0]
   11534:	0018      	movs	r0, r3
   11536:	4b0b      	ldr	r3, [pc, #44]	; (11564 <at25dfx_chip_check_presence+0xa4>)
   11538:	4798      	blx	r3

	if (id == _at25dfx_get_device_id(chip->type)) {
   1153a:	687b      	ldr	r3, [r7, #4]
   1153c:	791b      	ldrb	r3, [r3, #4]
   1153e:	0018      	movs	r0, r3
   11540:	4b09      	ldr	r3, [pc, #36]	; (11568 <at25dfx_chip_check_presence+0xa8>)
   11542:	4798      	blx	r3
   11544:	1e02      	subs	r2, r0, #0
   11546:	68bb      	ldr	r3, [r7, #8]
   11548:	429a      	cmp	r2, r3
   1154a:	d101      	bne.n	11550 <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
   1154c:	2300      	movs	r3, #0
   1154e:	e000      	b.n	11552 <at25dfx_chip_check_presence+0x92>
	} else {
		return STATUS_ERR_NOT_FOUND;
   11550:	2314      	movs	r3, #20
	}
}
   11552:	0018      	movs	r0, r3
   11554:	46bd      	mov	sp, r7
   11556:	b009      	add	sp, #36	; 0x24
   11558:	bd90      	pop	{r4, r7, pc}
   1155a:	46c0      	nop			; (mov r8, r8)
   1155c:	00010ea9 	.word	0x00010ea9
   11560:	0001113d 	.word	0x0001113d
   11564:	00010ef1 	.word	0x00010ef1
   11568:	00011029 	.word	0x00011029

0001156c <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
   1156c:	b590      	push	{r4, r7, lr}
   1156e:	b08d      	sub	sp, #52	; 0x34
   11570:	af02      	add	r7, sp, #8
   11572:	60f8      	str	r0, [r7, #12]
   11574:	60b9      	str	r1, [r7, #8]
   11576:	607a      	str	r2, [r7, #4]
   11578:	001a      	movs	r2, r3
   1157a:	1cbb      	adds	r3, r7, #2
   1157c:	801a      	strh	r2, [r3, #0]
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
   1157e:	1cbb      	adds	r3, r7, #2
   11580:	881a      	ldrh	r2, [r3, #0]
   11582:	68bb      	ldr	r3, [r7, #8]
   11584:	18d4      	adds	r4, r2, r3
   11586:	68fb      	ldr	r3, [r7, #12]
   11588:	791b      	ldrb	r3, [r3, #4]
   1158a:	0018      	movs	r0, r3
   1158c:	4b21      	ldr	r3, [pc, #132]	; (11614 <at25dfx_chip_read_buffer+0xa8>)
   1158e:	4798      	blx	r3
   11590:	0003      	movs	r3, r0
   11592:	429c      	cmp	r4, r3
   11594:	d901      	bls.n	1159a <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
   11596:	2317      	movs	r3, #23
   11598:	e037      	b.n	1160a <at25dfx_chip_read_buffer+0x9e>
	}

	status = _at25dfx_spi_lock(chip->spi);
   1159a:	68fb      	ldr	r3, [r7, #12]
   1159c:	681b      	ldr	r3, [r3, #0]
   1159e:	2227      	movs	r2, #39	; 0x27
   115a0:	18bc      	adds	r4, r7, r2
   115a2:	0018      	movs	r0, r3
   115a4:	4b1c      	ldr	r3, [pc, #112]	; (11618 <at25dfx_chip_read_buffer+0xac>)
   115a6:	4798      	blx	r3
   115a8:	0003      	movs	r3, r0
   115aa:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   115ac:	2327      	movs	r3, #39	; 0x27
   115ae:	18fb      	adds	r3, r7, r3
   115b0:	781b      	ldrb	r3, [r3, #0]
   115b2:	2b05      	cmp	r3, #5
   115b4:	d103      	bne.n	115be <at25dfx_chip_read_buffer+0x52>
		return status;
   115b6:	2327      	movs	r3, #39	; 0x27
   115b8:	18fb      	adds	r3, r7, r3
   115ba:	781b      	ldrb	r3, [r3, #0]
   115bc:	e025      	b.n	1160a <at25dfx_chip_read_buffer+0x9e>
	}

	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
   115be:	2314      	movs	r3, #20
   115c0:	18fb      	adds	r3, r7, r3
   115c2:	220b      	movs	r2, #11
   115c4:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
   115c6:	2314      	movs	r3, #20
   115c8:	18fb      	adds	r3, r7, r3
   115ca:	2205      	movs	r2, #5
   115cc:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
   115ce:	2314      	movs	r3, #20
   115d0:	18fb      	adds	r3, r7, r3
   115d2:	68ba      	ldr	r2, [r7, #8]
   115d4:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
   115d6:	2314      	movs	r3, #20
   115d8:	18fb      	adds	r3, r7, r3
   115da:	687a      	ldr	r2, [r7, #4]
   115dc:	609a      	str	r2, [r3, #8]
	cmd.length = length;
   115de:	2314      	movs	r3, #20
   115e0:	18fb      	adds	r3, r7, r3
   115e2:	1cba      	adds	r2, r7, #2
   115e4:	8812      	ldrh	r2, [r2, #0]
   115e6:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
   115e8:	2314      	movs	r3, #20
   115ea:	18fb      	adds	r3, r7, r3
   115ec:	68f8      	ldr	r0, [r7, #12]
   115ee:	466a      	mov	r2, sp
   115f0:	68d9      	ldr	r1, [r3, #12]
   115f2:	6011      	str	r1, [r2, #0]
   115f4:	6819      	ldr	r1, [r3, #0]
   115f6:	685a      	ldr	r2, [r3, #4]
   115f8:	689b      	ldr	r3, [r3, #8]
   115fa:	4c08      	ldr	r4, [pc, #32]	; (1161c <at25dfx_chip_read_buffer+0xb0>)
   115fc:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   115fe:	68fb      	ldr	r3, [r7, #12]
   11600:	681b      	ldr	r3, [r3, #0]
   11602:	0018      	movs	r0, r3
   11604:	4b06      	ldr	r3, [pc, #24]	; (11620 <at25dfx_chip_read_buffer+0xb4>)
   11606:	4798      	blx	r3

	return STATUS_OK;
   11608:	2300      	movs	r3, #0
}
   1160a:	0018      	movs	r0, r3
   1160c:	46bd      	mov	sp, r7
   1160e:	b00b      	add	sp, #44	; 0x2c
   11610:	bd90      	pop	{r4, r7, pc}
   11612:	46c0      	nop			; (mov r8, r8)
   11614:	000110a5 	.word	0x000110a5
   11618:	00010ea9 	.word	0x00010ea9
   1161c:	0001113d 	.word	0x0001113d
   11620:	00010ef1 	.word	0x00010ef1

00011624 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
   11624:	b590      	push	{r4, r7, lr}
   11626:	b08d      	sub	sp, #52	; 0x34
   11628:	af02      	add	r7, sp, #8
   1162a:	60f8      	str	r0, [r7, #12]
   1162c:	60b9      	str	r1, [r7, #8]
   1162e:	607a      	str	r2, [r7, #4]
   11630:	001a      	movs	r2, r3
   11632:	1cbb      	adds	r3, r7, #2
   11634:	801a      	strh	r2, [r3, #0]

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
   11636:	1cbb      	adds	r3, r7, #2
   11638:	881a      	ldrh	r2, [r3, #0]
   1163a:	68bb      	ldr	r3, [r7, #8]
   1163c:	18d4      	adds	r4, r2, r3
   1163e:	68fb      	ldr	r3, [r7, #12]
   11640:	791b      	ldrb	r3, [r3, #4]
   11642:	0018      	movs	r0, r3
   11644:	4b5b      	ldr	r3, [pc, #364]	; (117b4 <at25dfx_chip_write_buffer+0x190>)
   11646:	4798      	blx	r3
   11648:	0003      	movs	r3, r0
   1164a:	429c      	cmp	r4, r3
   1164c:	d901      	bls.n	11652 <at25dfx_chip_write_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
   1164e:	2317      	movs	r3, #23
   11650:	e0ab      	b.n	117aa <at25dfx_chip_write_buffer+0x186>
	}

	status = _at25dfx_spi_lock(chip->spi);
   11652:	68fb      	ldr	r3, [r7, #12]
   11654:	681b      	ldr	r3, [r3, #0]
   11656:	2227      	movs	r2, #39	; 0x27
   11658:	18bc      	adds	r4, r7, r2
   1165a:	0018      	movs	r0, r3
   1165c:	4b56      	ldr	r3, [pc, #344]	; (117b8 <at25dfx_chip_write_buffer+0x194>)
   1165e:	4798      	blx	r3
   11660:	0003      	movs	r3, r0
   11662:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   11664:	2327      	movs	r3, #39	; 0x27
   11666:	18fb      	adds	r3, r7, r3
   11668:	781b      	ldrb	r3, [r3, #0]
   1166a:	2b05      	cmp	r3, #5
   1166c:	d103      	bne.n	11676 <at25dfx_chip_write_buffer+0x52>
		return status;
   1166e:	2327      	movs	r3, #39	; 0x27
   11670:	18fb      	adds	r3, r7, r3
   11672:	781b      	ldrb	r3, [r3, #0]
   11674:	e099      	b.n	117aa <at25dfx_chip_write_buffer+0x186>
	}

	_at25dfx_chip_enable_write(chip);
   11676:	68fb      	ldr	r3, [r7, #12]
   11678:	0018      	movs	r0, r3
   1167a:	4b50      	ldr	r3, [pc, #320]	; (117bc <at25dfx_chip_write_buffer+0x198>)
   1167c:	4798      	blx	r3

	cmd.opcode = AT25DFX_COMMAND_PROGRAM_PAGE;
   1167e:	2314      	movs	r3, #20
   11680:	18fb      	adds	r3, r7, r3
   11682:	2202      	movs	r2, #2
   11684:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 4;
   11686:	2314      	movs	r3, #20
   11688:	18fb      	adds	r3, r7, r3
   1168a:	2204      	movs	r2, #4
   1168c:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
   1168e:	2314      	movs	r3, #20
   11690:	18fb      	adds	r3, r7, r3
   11692:	68ba      	ldr	r2, [r7, #8]
   11694:	605a      	str	r2, [r3, #4]
	cmd.data.tx = (uint8_t *)data;
   11696:	2314      	movs	r3, #20
   11698:	18fb      	adds	r3, r7, r3
   1169a:	687a      	ldr	r2, [r7, #4]
   1169c:	609a      	str	r2, [r3, #8]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
   1169e:	68bb      	ldr	r3, [r7, #8]
   116a0:	b29b      	uxth	r3, r3
   116a2:	22ff      	movs	r2, #255	; 0xff
   116a4:	4013      	ands	r3, r2
   116a6:	b29a      	uxth	r2, r3
   116a8:	2324      	movs	r3, #36	; 0x24
   116aa:	18fb      	adds	r3, r7, r3
   116ac:	2180      	movs	r1, #128	; 0x80
   116ae:	0049      	lsls	r1, r1, #1
   116b0:	1a8a      	subs	r2, r1, r2
   116b2:	801a      	strh	r2, [r3, #0]
	cmd.length = min(page_bytes, length);
   116b4:	1cbb      	adds	r3, r7, #2
   116b6:	2224      	movs	r2, #36	; 0x24
   116b8:	18ba      	adds	r2, r7, r2
   116ba:	8810      	ldrh	r0, [r2, #0]
   116bc:	881b      	ldrh	r3, [r3, #0]
   116be:	b299      	uxth	r1, r3
   116c0:	b282      	uxth	r2, r0
   116c2:	4291      	cmp	r1, r2
   116c4:	d900      	bls.n	116c8 <at25dfx_chip_write_buffer+0xa4>
   116c6:	1c03      	adds	r3, r0, #0
   116c8:	b29a      	uxth	r2, r3
   116ca:	2314      	movs	r3, #20
   116cc:	18fb      	adds	r3, r7, r3
   116ce:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   116d0:	2314      	movs	r3, #20
   116d2:	18fb      	adds	r3, r7, r3
   116d4:	68f8      	ldr	r0, [r7, #12]
   116d6:	466a      	mov	r2, sp
   116d8:	68d9      	ldr	r1, [r3, #12]
   116da:	6011      	str	r1, [r2, #0]
   116dc:	6819      	ldr	r1, [r3, #0]
   116de:	685a      	ldr	r2, [r3, #4]
   116e0:	689b      	ldr	r3, [r3, #8]
   116e2:	4c37      	ldr	r4, [pc, #220]	; (117c0 <at25dfx_chip_write_buffer+0x19c>)
   116e4:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
   116e6:	2327      	movs	r3, #39	; 0x27
   116e8:	18fc      	adds	r4, r7, r3
   116ea:	68fb      	ldr	r3, [r7, #12]
   116ec:	0018      	movs	r0, r3
   116ee:	4b35      	ldr	r3, [pc, #212]	; (117c4 <at25dfx_chip_write_buffer+0x1a0>)
   116f0:	4798      	blx	r3
   116f2:	0003      	movs	r3, r0
   116f4:	7023      	strb	r3, [r4, #0]

	length -= cmd.length;
   116f6:	2314      	movs	r3, #20
   116f8:	18fb      	adds	r3, r7, r3
   116fa:	899a      	ldrh	r2, [r3, #12]
   116fc:	1cbb      	adds	r3, r7, #2
   116fe:	1cb9      	adds	r1, r7, #2
   11700:	8809      	ldrh	r1, [r1, #0]
   11702:	1a8a      	subs	r2, r1, r2
   11704:	801a      	strh	r2, [r3, #0]

	while (length && (status == STATUS_OK)) {
   11706:	e03f      	b.n	11788 <at25dfx_chip_write_buffer+0x164>
		_at25dfx_chip_enable_write(chip);
   11708:	68fb      	ldr	r3, [r7, #12]
   1170a:	0018      	movs	r0, r3
   1170c:	4b2b      	ldr	r3, [pc, #172]	; (117bc <at25dfx_chip_write_buffer+0x198>)
   1170e:	4798      	blx	r3

		cmd.address += cmd.length;
   11710:	2314      	movs	r3, #20
   11712:	18fb      	adds	r3, r7, r3
   11714:	685b      	ldr	r3, [r3, #4]
   11716:	2214      	movs	r2, #20
   11718:	18ba      	adds	r2, r7, r2
   1171a:	8992      	ldrh	r2, [r2, #12]
   1171c:	189a      	adds	r2, r3, r2
   1171e:	2314      	movs	r3, #20
   11720:	18fb      	adds	r3, r7, r3
   11722:	605a      	str	r2, [r3, #4]
		cmd.data.tx += cmd.length;
   11724:	2314      	movs	r3, #20
   11726:	18fb      	adds	r3, r7, r3
   11728:	689b      	ldr	r3, [r3, #8]
   1172a:	2214      	movs	r2, #20
   1172c:	18ba      	adds	r2, r7, r2
   1172e:	8992      	ldrh	r2, [r2, #12]
   11730:	189a      	adds	r2, r3, r2
   11732:	2314      	movs	r3, #20
   11734:	18fb      	adds	r3, r7, r3
   11736:	609a      	str	r2, [r3, #8]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
   11738:	1cbb      	adds	r3, r7, #2
   1173a:	881b      	ldrh	r3, [r3, #0]
   1173c:	b299      	uxth	r1, r3
   1173e:	2280      	movs	r2, #128	; 0x80
   11740:	0052      	lsls	r2, r2, #1
   11742:	4291      	cmp	r1, r2
   11744:	d901      	bls.n	1174a <at25dfx_chip_write_buffer+0x126>
   11746:	2380      	movs	r3, #128	; 0x80
   11748:	005b      	lsls	r3, r3, #1
   1174a:	b29a      	uxth	r2, r3
   1174c:	2314      	movs	r3, #20
   1174e:	18fb      	adds	r3, r7, r3
   11750:	819a      	strh	r2, [r3, #12]

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
   11752:	2314      	movs	r3, #20
   11754:	18fb      	adds	r3, r7, r3
   11756:	68f8      	ldr	r0, [r7, #12]
   11758:	466a      	mov	r2, sp
   1175a:	68d9      	ldr	r1, [r3, #12]
   1175c:	6011      	str	r1, [r2, #0]
   1175e:	6819      	ldr	r1, [r3, #0]
   11760:	685a      	ldr	r2, [r3, #4]
   11762:	689b      	ldr	r3, [r3, #8]
   11764:	4c16      	ldr	r4, [pc, #88]	; (117c0 <at25dfx_chip_write_buffer+0x19c>)
   11766:	47a0      	blx	r4

		status = _at25dfx_chip_get_nonbusy_status(chip);
   11768:	2327      	movs	r3, #39	; 0x27
   1176a:	18fc      	adds	r4, r7, r3
   1176c:	68fb      	ldr	r3, [r7, #12]
   1176e:	0018      	movs	r0, r3
   11770:	4b14      	ldr	r3, [pc, #80]	; (117c4 <at25dfx_chip_write_buffer+0x1a0>)
   11772:	4798      	blx	r3
   11774:	0003      	movs	r3, r0
   11776:	7023      	strb	r3, [r4, #0]

		length -= cmd.length;
   11778:	2314      	movs	r3, #20
   1177a:	18fb      	adds	r3, r7, r3
   1177c:	899a      	ldrh	r2, [r3, #12]
   1177e:	1cbb      	adds	r3, r7, #2
   11780:	1cb9      	adds	r1, r7, #2
   11782:	8809      	ldrh	r1, [r1, #0]
   11784:	1a8a      	subs	r2, r1, r2
   11786:	801a      	strh	r2, [r3, #0]

	status = _at25dfx_chip_get_nonbusy_status(chip);

	length -= cmd.length;

	while (length && (status == STATUS_OK)) {
   11788:	1cbb      	adds	r3, r7, #2
   1178a:	881b      	ldrh	r3, [r3, #0]
   1178c:	2b00      	cmp	r3, #0
   1178e:	d004      	beq.n	1179a <at25dfx_chip_write_buffer+0x176>
   11790:	2327      	movs	r3, #39	; 0x27
   11792:	18fb      	adds	r3, r7, r3
   11794:	781b      	ldrb	r3, [r3, #0]
   11796:	2b00      	cmp	r3, #0
   11798:	d0b6      	beq.n	11708 <at25dfx_chip_write_buffer+0xe4>
		status = _at25dfx_chip_get_nonbusy_status(chip);

		length -= cmd.length;
	}

	_at25dfx_spi_unlock(chip->spi);
   1179a:	68fb      	ldr	r3, [r7, #12]
   1179c:	681b      	ldr	r3, [r3, #0]
   1179e:	0018      	movs	r0, r3
   117a0:	4b09      	ldr	r3, [pc, #36]	; (117c8 <at25dfx_chip_write_buffer+0x1a4>)
   117a2:	4798      	blx	r3

	return status;
   117a4:	2327      	movs	r3, #39	; 0x27
   117a6:	18fb      	adds	r3, r7, r3
   117a8:	781b      	ldrb	r3, [r3, #0]
}
   117aa:	0018      	movs	r0, r3
   117ac:	46bd      	mov	sp, r7
   117ae:	b00b      	add	sp, #44	; 0x2c
   117b0:	bd90      	pop	{r4, r7, pc}
   117b2:	46c0      	nop			; (mov r8, r8)
   117b4:	000110a5 	.word	0x000110a5
   117b8:	00010ea9 	.word	0x00010ea9
   117bc:	0001146d 	.word	0x0001146d
   117c0:	00011245 	.word	0x00011245
   117c4:	00011349 	.word	0x00011349
   117c8:	00010ef1 	.word	0x00010ef1

000117cc <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
   117cc:	b590      	push	{r4, r7, lr}
   117ce:	b08d      	sub	sp, #52	; 0x34
   117d0:	af02      	add	r7, sp, #8
   117d2:	60f8      	str	r0, [r7, #12]
   117d4:	60b9      	str	r1, [r7, #8]
   117d6:	1dfb      	adds	r3, r7, #7
   117d8:	701a      	strb	r2, [r3, #0]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
   117da:	68fb      	ldr	r3, [r7, #12]
   117dc:	791b      	ldrb	r3, [r3, #4]
   117de:	0018      	movs	r0, r3
   117e0:	4b33      	ldr	r3, [pc, #204]	; (118b0 <at25dfx_chip_erase_block+0xe4>)
   117e2:	4798      	blx	r3
   117e4:	1e02      	subs	r2, r0, #0
   117e6:	68bb      	ldr	r3, [r7, #8]
   117e8:	429a      	cmp	r2, r3
   117ea:	d801      	bhi.n	117f0 <at25dfx_chip_erase_block+0x24>
		return STATUS_ERR_INVALID_ARG;
   117ec:	2317      	movs	r3, #23
   117ee:	e05b      	b.n	118a8 <at25dfx_chip_erase_block+0xdc>
	}

	status = _at25dfx_spi_lock(chip->spi);
   117f0:	68fb      	ldr	r3, [r7, #12]
   117f2:	681b      	ldr	r3, [r3, #0]
   117f4:	2227      	movs	r2, #39	; 0x27
   117f6:	18bc      	adds	r4, r7, r2
   117f8:	0018      	movs	r0, r3
   117fa:	4b2e      	ldr	r3, [pc, #184]	; (118b4 <at25dfx_chip_erase_block+0xe8>)
   117fc:	4798      	blx	r3
   117fe:	0003      	movs	r3, r0
   11800:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   11802:	2327      	movs	r3, #39	; 0x27
   11804:	18fb      	adds	r3, r7, r3
   11806:	781b      	ldrb	r3, [r3, #0]
   11808:	2b05      	cmp	r3, #5
   1180a:	d103      	bne.n	11814 <at25dfx_chip_erase_block+0x48>
		return status;
   1180c:	2327      	movs	r3, #39	; 0x27
   1180e:	18fb      	adds	r3, r7, r3
   11810:	781b      	ldrb	r3, [r3, #0]
   11812:	e049      	b.n	118a8 <at25dfx_chip_erase_block+0xdc>
	}

	_at25dfx_chip_enable_write(chip);
   11814:	68fb      	ldr	r3, [r7, #12]
   11816:	0018      	movs	r0, r3
   11818:	4b27      	ldr	r3, [pc, #156]	; (118b8 <at25dfx_chip_erase_block+0xec>)
   1181a:	4798      	blx	r3

	switch (block_size) {
   1181c:	1dfb      	adds	r3, r7, #7
   1181e:	781b      	ldrb	r3, [r3, #0]
   11820:	2b01      	cmp	r3, #1
   11822:	d008      	beq.n	11836 <at25dfx_chip_erase_block+0x6a>
   11824:	2b02      	cmp	r3, #2
   11826:	d00b      	beq.n	11840 <at25dfx_chip_erase_block+0x74>
   11828:	2b00      	cmp	r3, #0
   1182a:	d10e      	bne.n	1184a <at25dfx_chip_erase_block+0x7e>
	case AT25DFX_BLOCK_SIZE_4KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
   1182c:	2314      	movs	r3, #20
   1182e:	18fb      	adds	r3, r7, r3
   11830:	2220      	movs	r2, #32
   11832:	701a      	strb	r2, [r3, #0]
		break;
   11834:	e00d      	b.n	11852 <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_32KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
   11836:	2314      	movs	r3, #20
   11838:	18fb      	adds	r3, r7, r3
   1183a:	2252      	movs	r2, #82	; 0x52
   1183c:	701a      	strb	r2, [r3, #0]
		break;
   1183e:	e008      	b.n	11852 <at25dfx_chip_erase_block+0x86>

	case AT25DFX_BLOCK_SIZE_64KB:
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
   11840:	2314      	movs	r3, #20
   11842:	18fb      	adds	r3, r7, r3
   11844:	22d8      	movs	r2, #216	; 0xd8
   11846:	701a      	strb	r2, [r3, #0]
		break;
   11848:	e003      	b.n	11852 <at25dfx_chip_erase_block+0x86>

	default:
		Assert(false);
		cmd.opcode = (enum at25dfx_command_opcode)0;
   1184a:	2314      	movs	r3, #20
   1184c:	18fb      	adds	r3, r7, r3
   1184e:	2200      	movs	r2, #0
   11850:	701a      	strb	r2, [r3, #0]
	}
	cmd.command_size = 4;
   11852:	2314      	movs	r3, #20
   11854:	18fb      	adds	r3, r7, r3
   11856:	2204      	movs	r2, #4
   11858:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
   1185a:	2314      	movs	r3, #20
   1185c:	18fb      	adds	r3, r7, r3
   1185e:	68ba      	ldr	r2, [r7, #8]
   11860:	605a      	str	r2, [r3, #4]
	cmd.length = 0;
   11862:	2314      	movs	r3, #20
   11864:	18fb      	adds	r3, r7, r3
   11866:	2200      	movs	r2, #0
   11868:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.data.tx = NULL;
   1186a:	2314      	movs	r3, #20
   1186c:	18fb      	adds	r3, r7, r3
   1186e:	2200      	movs	r2, #0
   11870:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   11872:	2314      	movs	r3, #20
   11874:	18fb      	adds	r3, r7, r3
   11876:	68f8      	ldr	r0, [r7, #12]
   11878:	466a      	mov	r2, sp
   1187a:	68d9      	ldr	r1, [r3, #12]
   1187c:	6011      	str	r1, [r2, #0]
   1187e:	6819      	ldr	r1, [r3, #0]
   11880:	685a      	ldr	r2, [r3, #4]
   11882:	689b      	ldr	r3, [r3, #8]
   11884:	4c0d      	ldr	r4, [pc, #52]	; (118bc <at25dfx_chip_erase_block+0xf0>)
   11886:	47a0      	blx	r4

	status = _at25dfx_chip_get_nonbusy_status(chip);
   11888:	2327      	movs	r3, #39	; 0x27
   1188a:	18fc      	adds	r4, r7, r3
   1188c:	68fb      	ldr	r3, [r7, #12]
   1188e:	0018      	movs	r0, r3
   11890:	4b0b      	ldr	r3, [pc, #44]	; (118c0 <at25dfx_chip_erase_block+0xf4>)
   11892:	4798      	blx	r3
   11894:	0003      	movs	r3, r0
   11896:	7023      	strb	r3, [r4, #0]

	_at25dfx_spi_unlock(chip->spi);
   11898:	68fb      	ldr	r3, [r7, #12]
   1189a:	681b      	ldr	r3, [r3, #0]
   1189c:	0018      	movs	r0, r3
   1189e:	4b09      	ldr	r3, [pc, #36]	; (118c4 <at25dfx_chip_erase_block+0xf8>)
   118a0:	4798      	blx	r3

	return status;
   118a2:	2327      	movs	r3, #39	; 0x27
   118a4:	18fb      	adds	r3, r7, r3
   118a6:	781b      	ldrb	r3, [r3, #0]
}
   118a8:	0018      	movs	r0, r3
   118aa:	46bd      	mov	sp, r7
   118ac:	b00b      	add	sp, #44	; 0x2c
   118ae:	bd90      	pop	{r4, r7, pc}
   118b0:	000110a5 	.word	0x000110a5
   118b4:	00010ea9 	.word	0x00010ea9
   118b8:	0001146d 	.word	0x0001146d
   118bc:	00011245 	.word	0x00011245
   118c0:	00011349 	.word	0x00011349
   118c4:	00010ef1 	.word	0x00010ef1

000118c8 <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
   118c8:	b590      	push	{r4, r7, lr}
   118ca:	b08b      	sub	sp, #44	; 0x2c
   118cc:	af02      	add	r7, sp, #8
   118ce:	6078      	str	r0, [r7, #4]
   118d0:	000a      	movs	r2, r1
   118d2:	1cfb      	adds	r3, r7, #3
   118d4:	701a      	strb	r2, [r3, #0]
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
   118d6:	687b      	ldr	r3, [r7, #4]
   118d8:	681b      	ldr	r3, [r3, #0]
   118da:	221f      	movs	r2, #31
   118dc:	18bc      	adds	r4, r7, r2
   118de:	0018      	movs	r0, r3
   118e0:	4b22      	ldr	r3, [pc, #136]	; (1196c <at25dfx_chip_set_global_sector_protect+0xa4>)
   118e2:	4798      	blx	r3
   118e4:	0003      	movs	r3, r0
   118e6:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   118e8:	231f      	movs	r3, #31
   118ea:	18fb      	adds	r3, r7, r3
   118ec:	781b      	ldrb	r3, [r3, #0]
   118ee:	2b05      	cmp	r3, #5
   118f0:	d103      	bne.n	118fa <at25dfx_chip_set_global_sector_protect+0x32>
		return status;
   118f2:	231f      	movs	r3, #31
   118f4:	18fb      	adds	r3, r7, r3
   118f6:	781b      	ldrb	r3, [r3, #0]
   118f8:	e033      	b.n	11962 <at25dfx_chip_set_global_sector_protect+0x9a>
	}

	_at25dfx_chip_enable_write(chip);
   118fa:	687b      	ldr	r3, [r7, #4]
   118fc:	0018      	movs	r0, r3
   118fe:	4b1c      	ldr	r3, [pc, #112]	; (11970 <at25dfx_chip_set_global_sector_protect+0xa8>)
   11900:	4798      	blx	r3

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
   11902:	1cfb      	adds	r3, r7, #3
   11904:	781b      	ldrb	r3, [r3, #0]
   11906:	2b00      	cmp	r3, #0
   11908:	d001      	beq.n	1190e <at25dfx_chip_set_global_sector_protect+0x46>
   1190a:	223c      	movs	r2, #60	; 0x3c
   1190c:	e000      	b.n	11910 <at25dfx_chip_set_global_sector_protect+0x48>
   1190e:	2200      	movs	r2, #0
   11910:	230b      	movs	r3, #11
   11912:	18fb      	adds	r3, r7, r3
   11914:	701a      	strb	r2, [r3, #0]
	cmd.opcode = AT25DFX_COMMAND_WRITE_STATUS;
   11916:	230c      	movs	r3, #12
   11918:	18fb      	adds	r3, r7, r3
   1191a:	2201      	movs	r2, #1
   1191c:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   1191e:	230c      	movs	r3, #12
   11920:	18fb      	adds	r3, r7, r3
   11922:	2201      	movs	r2, #1
   11924:	705a      	strb	r2, [r3, #1]
	cmd.length = 1;
   11926:	230c      	movs	r3, #12
   11928:	18fb      	adds	r3, r7, r3
   1192a:	2201      	movs	r2, #1
   1192c:	819a      	strh	r2, [r3, #12]
	cmd.data.tx = &temp_data;
   1192e:	230c      	movs	r3, #12
   11930:	18fb      	adds	r3, r7, r3
   11932:	220b      	movs	r2, #11
   11934:	18ba      	adds	r2, r7, r2
   11936:	609a      	str	r2, [r3, #8]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   11938:	230c      	movs	r3, #12
   1193a:	18fb      	adds	r3, r7, r3
   1193c:	2200      	movs	r2, #0
   1193e:	605a      	str	r2, [r3, #4]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   11940:	230c      	movs	r3, #12
   11942:	18fb      	adds	r3, r7, r3
   11944:	6878      	ldr	r0, [r7, #4]
   11946:	466a      	mov	r2, sp
   11948:	68d9      	ldr	r1, [r3, #12]
   1194a:	6011      	str	r1, [r2, #0]
   1194c:	6819      	ldr	r1, [r3, #0]
   1194e:	685a      	ldr	r2, [r3, #4]
   11950:	689b      	ldr	r3, [r3, #8]
   11952:	4c08      	ldr	r4, [pc, #32]	; (11974 <at25dfx_chip_set_global_sector_protect+0xac>)
   11954:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   11956:	687b      	ldr	r3, [r7, #4]
   11958:	681b      	ldr	r3, [r3, #0]
   1195a:	0018      	movs	r0, r3
   1195c:	4b06      	ldr	r3, [pc, #24]	; (11978 <at25dfx_chip_set_global_sector_protect+0xb0>)
   1195e:	4798      	blx	r3

	return STATUS_OK;
   11960:	2300      	movs	r3, #0
}
   11962:	0018      	movs	r0, r3
   11964:	46bd      	mov	sp, r7
   11966:	b009      	add	sp, #36	; 0x24
   11968:	bd90      	pop	{r4, r7, pc}
   1196a:	46c0      	nop			; (mov r8, r8)
   1196c:	00010ea9 	.word	0x00010ea9
   11970:	0001146d 	.word	0x0001146d
   11974:	00011245 	.word	0x00011245
   11978:	00010ef1 	.word	0x00010ef1

0001197c <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
   1197c:	b590      	push	{r4, r7, lr}
   1197e:	b08b      	sub	sp, #44	; 0x2c
   11980:	af02      	add	r7, sp, #8
   11982:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
   11984:	687b      	ldr	r3, [r7, #4]
   11986:	681b      	ldr	r3, [r3, #0]
   11988:	221f      	movs	r2, #31
   1198a:	18bc      	adds	r4, r7, r2
   1198c:	0018      	movs	r0, r3
   1198e:	4b1b      	ldr	r3, [pc, #108]	; (119fc <at25dfx_chip_sleep+0x80>)
   11990:	4798      	blx	r3
   11992:	0003      	movs	r3, r0
   11994:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   11996:	231f      	movs	r3, #31
   11998:	18fb      	adds	r3, r7, r3
   1199a:	781b      	ldrb	r3, [r3, #0]
   1199c:	2b05      	cmp	r3, #5
   1199e:	d103      	bne.n	119a8 <at25dfx_chip_sleep+0x2c>
		return status;
   119a0:	231f      	movs	r3, #31
   119a2:	18fb      	adds	r3, r7, r3
   119a4:	781b      	ldrb	r3, [r3, #0]
   119a6:	e024      	b.n	119f2 <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
   119a8:	230c      	movs	r3, #12
   119aa:	18fb      	adds	r3, r7, r3
   119ac:	22b9      	movs	r2, #185	; 0xb9
   119ae:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   119b0:	230c      	movs	r3, #12
   119b2:	18fb      	adds	r3, r7, r3
   119b4:	2201      	movs	r2, #1
   119b6:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
   119b8:	230c      	movs	r3, #12
   119ba:	18fb      	adds	r3, r7, r3
   119bc:	2200      	movs	r2, #0
   119be:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   119c0:	230c      	movs	r3, #12
   119c2:	18fb      	adds	r3, r7, r3
   119c4:	2200      	movs	r2, #0
   119c6:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
   119c8:	230c      	movs	r3, #12
   119ca:	18fb      	adds	r3, r7, r3
   119cc:	2200      	movs	r2, #0
   119ce:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   119d0:	230c      	movs	r3, #12
   119d2:	18fb      	adds	r3, r7, r3
   119d4:	6878      	ldr	r0, [r7, #4]
   119d6:	466a      	mov	r2, sp
   119d8:	68d9      	ldr	r1, [r3, #12]
   119da:	6011      	str	r1, [r2, #0]
   119dc:	6819      	ldr	r1, [r3, #0]
   119de:	685a      	ldr	r2, [r3, #4]
   119e0:	689b      	ldr	r3, [r3, #8]
   119e2:	4c07      	ldr	r4, [pc, #28]	; (11a00 <at25dfx_chip_sleep+0x84>)
   119e4:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   119e6:	687b      	ldr	r3, [r7, #4]
   119e8:	681b      	ldr	r3, [r3, #0]
   119ea:	0018      	movs	r0, r3
   119ec:	4b05      	ldr	r3, [pc, #20]	; (11a04 <at25dfx_chip_sleep+0x88>)
   119ee:	4798      	blx	r3

	return STATUS_OK;
   119f0:	2300      	movs	r3, #0
}
   119f2:	0018      	movs	r0, r3
   119f4:	46bd      	mov	sp, r7
   119f6:	b009      	add	sp, #36	; 0x24
   119f8:	bd90      	pop	{r4, r7, pc}
   119fa:	46c0      	nop			; (mov r8, r8)
   119fc:	00010ea9 	.word	0x00010ea9
   11a00:	00011245 	.word	0x00011245
   11a04:	00010ef1 	.word	0x00010ef1

00011a08 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
   11a08:	b590      	push	{r4, r7, lr}
   11a0a:	b08b      	sub	sp, #44	; 0x2c
   11a0c:	af02      	add	r7, sp, #8
   11a0e:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
   11a10:	687b      	ldr	r3, [r7, #4]
   11a12:	681b      	ldr	r3, [r3, #0]
   11a14:	221f      	movs	r2, #31
   11a16:	18bc      	adds	r4, r7, r2
   11a18:	0018      	movs	r0, r3
   11a1a:	4b1b      	ldr	r3, [pc, #108]	; (11a88 <at25dfx_chip_wake+0x80>)
   11a1c:	4798      	blx	r3
   11a1e:	0003      	movs	r3, r0
   11a20:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
   11a22:	231f      	movs	r3, #31
   11a24:	18fb      	adds	r3, r7, r3
   11a26:	781b      	ldrb	r3, [r3, #0]
   11a28:	2b05      	cmp	r3, #5
   11a2a:	d103      	bne.n	11a34 <at25dfx_chip_wake+0x2c>
		return status;
   11a2c:	231f      	movs	r3, #31
   11a2e:	18fb      	adds	r3, r7, r3
   11a30:	781b      	ldrb	r3, [r3, #0]
   11a32:	e024      	b.n	11a7e <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
   11a34:	230c      	movs	r3, #12
   11a36:	18fb      	adds	r3, r7, r3
   11a38:	22ab      	movs	r2, #171	; 0xab
   11a3a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
   11a3c:	230c      	movs	r3, #12
   11a3e:	18fb      	adds	r3, r7, r3
   11a40:	2201      	movs	r2, #1
   11a42:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
   11a44:	230c      	movs	r3, #12
   11a46:	18fb      	adds	r3, r7, r3
   11a48:	2200      	movs	r2, #0
   11a4a:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
   11a4c:	230c      	movs	r3, #12
   11a4e:	18fb      	adds	r3, r7, r3
   11a50:	2200      	movs	r2, #0
   11a52:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
   11a54:	230c      	movs	r3, #12
   11a56:	18fb      	adds	r3, r7, r3
   11a58:	2200      	movs	r2, #0
   11a5a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
   11a5c:	230c      	movs	r3, #12
   11a5e:	18fb      	adds	r3, r7, r3
   11a60:	6878      	ldr	r0, [r7, #4]
   11a62:	466a      	mov	r2, sp
   11a64:	68d9      	ldr	r1, [r3, #12]
   11a66:	6011      	str	r1, [r2, #0]
   11a68:	6819      	ldr	r1, [r3, #0]
   11a6a:	685a      	ldr	r2, [r3, #4]
   11a6c:	689b      	ldr	r3, [r3, #8]
   11a6e:	4c07      	ldr	r4, [pc, #28]	; (11a8c <at25dfx_chip_wake+0x84>)
   11a70:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
   11a72:	687b      	ldr	r3, [r7, #4]
   11a74:	681b      	ldr	r3, [r3, #0]
   11a76:	0018      	movs	r0, r3
   11a78:	4b05      	ldr	r3, [pc, #20]	; (11a90 <at25dfx_chip_wake+0x88>)
   11a7a:	4798      	blx	r3

	return STATUS_OK;
   11a7c:	2300      	movs	r3, #0
   11a7e:	0018      	movs	r0, r3
   11a80:	46bd      	mov	sp, r7
   11a82:	b009      	add	sp, #36	; 0x24
   11a84:	bd90      	pop	{r4, r7, pc}
   11a86:	46c0      	nop			; (mov r8, r8)
   11a88:	00010ea9 	.word	0x00010ea9
   11a8c:	00011245 	.word	0x00011245
   11a90:	00010ef1 	.word	0x00010ef1

00011a94 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   11a94:	b580      	push	{r7, lr}
   11a96:	b082      	sub	sp, #8
   11a98:	af00      	add	r7, sp, #0
   11a9a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   11a9c:	687b      	ldr	r3, [r7, #4]
   11a9e:	2b00      	cmp	r3, #0
   11aa0:	d00c      	beq.n	11abc <delay_cycles+0x28>
		SysTick->LOAD = n;
   11aa2:	4b08      	ldr	r3, [pc, #32]	; (11ac4 <delay_cycles+0x30>)
   11aa4:	687a      	ldr	r2, [r7, #4]
   11aa6:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   11aa8:	4b06      	ldr	r3, [pc, #24]	; (11ac4 <delay_cycles+0x30>)
   11aaa:	2200      	movs	r2, #0
   11aac:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   11aae:	46c0      	nop			; (mov r8, r8)
   11ab0:	4b04      	ldr	r3, [pc, #16]	; (11ac4 <delay_cycles+0x30>)
   11ab2:	681a      	ldr	r2, [r3, #0]
   11ab4:	2380      	movs	r3, #128	; 0x80
   11ab6:	025b      	lsls	r3, r3, #9
   11ab8:	4013      	ands	r3, r2
   11aba:	d0f9      	beq.n	11ab0 <delay_cycles+0x1c>
		};
	}
}
   11abc:	46c0      	nop			; (mov r8, r8)
   11abe:	46bd      	mov	sp, r7
   11ac0:	b002      	add	sp, #8
   11ac2:	bd80      	pop	{r7, pc}
   11ac4:	e000e010 	.word	0xe000e010

00011ac8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   11ac8:	b580      	push	{r7, lr}
   11aca:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   11acc:	2000      	movs	r0, #0
   11ace:	4b0f      	ldr	r3, [pc, #60]	; (11b0c <delay_init+0x44>)
   11ad0:	4798      	blx	r3
   11ad2:	0002      	movs	r2, r0
   11ad4:	4b0e      	ldr	r3, [pc, #56]	; (11b10 <delay_init+0x48>)
   11ad6:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   11ad8:	4b0d      	ldr	r3, [pc, #52]	; (11b10 <delay_init+0x48>)
   11ada:	6818      	ldr	r0, [r3, #0]
   11adc:	4b0d      	ldr	r3, [pc, #52]	; (11b14 <delay_init+0x4c>)
   11ade:	22fa      	movs	r2, #250	; 0xfa
   11ae0:	0091      	lsls	r1, r2, #2
   11ae2:	4798      	blx	r3
   11ae4:	0003      	movs	r3, r0
   11ae6:	001a      	movs	r2, r3
   11ae8:	4b09      	ldr	r3, [pc, #36]	; (11b10 <delay_init+0x48>)
   11aea:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   11aec:	4b08      	ldr	r3, [pc, #32]	; (11b10 <delay_init+0x48>)
   11aee:	6818      	ldr	r0, [r3, #0]
   11af0:	4b08      	ldr	r3, [pc, #32]	; (11b14 <delay_init+0x4c>)
   11af2:	22fa      	movs	r2, #250	; 0xfa
   11af4:	0091      	lsls	r1, r2, #2
   11af6:	4798      	blx	r3
   11af8:	0003      	movs	r3, r0
   11afa:	001a      	movs	r2, r3
   11afc:	4b06      	ldr	r3, [pc, #24]	; (11b18 <delay_init+0x50>)
   11afe:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   11b00:	4b06      	ldr	r3, [pc, #24]	; (11b1c <delay_init+0x54>)
   11b02:	2205      	movs	r2, #5
   11b04:	601a      	str	r2, [r3, #0]
}
   11b06:	46c0      	nop			; (mov r8, r8)
   11b08:	46bd      	mov	sp, r7
   11b0a:	bd80      	pop	{r7, pc}
   11b0c:	00015015 	.word	0x00015015
   11b10:	20000010 	.word	0x20000010
   11b14:	00016869 	.word	0x00016869
   11b18:	20000014 	.word	0x20000014
   11b1c:	e000e010 	.word	0xe000e010

00011b20 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   11b20:	b580      	push	{r7, lr}
   11b22:	b082      	sub	sp, #8
   11b24:	af00      	add	r7, sp, #0
   11b26:	6078      	str	r0, [r7, #4]
	while (n--) {
   11b28:	e004      	b.n	11b34 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   11b2a:	4b07      	ldr	r3, [pc, #28]	; (11b48 <delay_cycles_ms+0x28>)
   11b2c:	681b      	ldr	r3, [r3, #0]
   11b2e:	0018      	movs	r0, r3
   11b30:	4b06      	ldr	r3, [pc, #24]	; (11b4c <delay_cycles_ms+0x2c>)
   11b32:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
   11b34:	687b      	ldr	r3, [r7, #4]
   11b36:	1e5a      	subs	r2, r3, #1
   11b38:	607a      	str	r2, [r7, #4]
   11b3a:	2b00      	cmp	r3, #0
   11b3c:	d1f5      	bne.n	11b2a <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
   11b3e:	46c0      	nop			; (mov r8, r8)
   11b40:	46bd      	mov	sp, r7
   11b42:	b002      	add	sp, #8
   11b44:	bd80      	pop	{r7, pc}
   11b46:	46c0      	nop			; (mov r8, r8)
   11b48:	20000010 	.word	0x20000010
   11b4c:	00011a95 	.word	0x00011a95

00011b50 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
   11b50:	b580      	push	{r7, lr}
   11b52:	b082      	sub	sp, #8
   11b54:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11b56:	4b07      	ldr	r3, [pc, #28]	; (11b74 <nvm_is_ready+0x24>)
   11b58:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   11b5a:	687b      	ldr	r3, [r7, #4]
   11b5c:	7d1b      	ldrb	r3, [r3, #20]
   11b5e:	b2db      	uxtb	r3, r3
   11b60:	001a      	movs	r2, r3
   11b62:	2301      	movs	r3, #1
   11b64:	4013      	ands	r3, r2
   11b66:	1e5a      	subs	r2, r3, #1
   11b68:	4193      	sbcs	r3, r2
   11b6a:	b2db      	uxtb	r3, r3
}
   11b6c:	0018      	movs	r0, r3
   11b6e:	46bd      	mov	sp, r7
   11b70:	b002      	add	sp, #8
   11b72:	bd80      	pop	{r7, pc}
   11b74:	41004000 	.word	0x41004000

00011b78 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   11b78:	b580      	push	{r7, lr}
   11b7a:	b082      	sub	sp, #8
   11b7c:	af00      	add	r7, sp, #0
   11b7e:	0002      	movs	r2, r0
   11b80:	6039      	str	r1, [r7, #0]
   11b82:	1dfb      	adds	r3, r7, #7
   11b84:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   11b86:	1dfb      	adds	r3, r7, #7
   11b88:	781b      	ldrb	r3, [r3, #0]
   11b8a:	2b01      	cmp	r3, #1
   11b8c:	d00a      	beq.n	11ba4 <system_apb_clock_set_mask+0x2c>
   11b8e:	2b02      	cmp	r3, #2
   11b90:	d00f      	beq.n	11bb2 <system_apb_clock_set_mask+0x3a>
   11b92:	2b00      	cmp	r3, #0
   11b94:	d114      	bne.n	11bc0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   11b96:	4b0e      	ldr	r3, [pc, #56]	; (11bd0 <system_apb_clock_set_mask+0x58>)
   11b98:	4a0d      	ldr	r2, [pc, #52]	; (11bd0 <system_apb_clock_set_mask+0x58>)
   11b9a:	6991      	ldr	r1, [r2, #24]
   11b9c:	683a      	ldr	r2, [r7, #0]
   11b9e:	430a      	orrs	r2, r1
   11ba0:	619a      	str	r2, [r3, #24]
			break;
   11ba2:	e00f      	b.n	11bc4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   11ba4:	4b0a      	ldr	r3, [pc, #40]	; (11bd0 <system_apb_clock_set_mask+0x58>)
   11ba6:	4a0a      	ldr	r2, [pc, #40]	; (11bd0 <system_apb_clock_set_mask+0x58>)
   11ba8:	69d1      	ldr	r1, [r2, #28]
   11baa:	683a      	ldr	r2, [r7, #0]
   11bac:	430a      	orrs	r2, r1
   11bae:	61da      	str	r2, [r3, #28]
			break;
   11bb0:	e008      	b.n	11bc4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   11bb2:	4b07      	ldr	r3, [pc, #28]	; (11bd0 <system_apb_clock_set_mask+0x58>)
   11bb4:	4a06      	ldr	r2, [pc, #24]	; (11bd0 <system_apb_clock_set_mask+0x58>)
   11bb6:	6a11      	ldr	r1, [r2, #32]
   11bb8:	683a      	ldr	r2, [r7, #0]
   11bba:	430a      	orrs	r2, r1
   11bbc:	621a      	str	r2, [r3, #32]
			break;
   11bbe:	e001      	b.n	11bc4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   11bc0:	2317      	movs	r3, #23
   11bc2:	e000      	b.n	11bc6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   11bc4:	2300      	movs	r3, #0
}
   11bc6:	0018      	movs	r0, r3
   11bc8:	46bd      	mov	sp, r7
   11bca:	b002      	add	sp, #8
   11bcc:	bd80      	pop	{r7, pc}
   11bce:	46c0      	nop			; (mov r8, r8)
   11bd0:	40000400 	.word	0x40000400

00011bd4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
   11bd4:	b580      	push	{r7, lr}
   11bd6:	b084      	sub	sp, #16
   11bd8:	af00      	add	r7, sp, #0
   11bda:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11bdc:	4b2f      	ldr	r3, [pc, #188]	; (11c9c <nvm_set_config+0xc8>)
   11bde:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
   11be0:	2104      	movs	r1, #4
   11be2:	2001      	movs	r0, #1
   11be4:	4b2e      	ldr	r3, [pc, #184]	; (11ca0 <nvm_set_config+0xcc>)
   11be6:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11be8:	68fb      	ldr	r3, [r7, #12]
   11bea:	2220      	movs	r2, #32
   11bec:	32ff      	adds	r2, #255	; 0xff
   11bee:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11bf0:	4b2c      	ldr	r3, [pc, #176]	; (11ca4 <nvm_set_config+0xd0>)
   11bf2:	4798      	blx	r3
   11bf4:	0003      	movs	r3, r0
   11bf6:	001a      	movs	r2, r3
   11bf8:	2301      	movs	r3, #1
   11bfa:	4053      	eors	r3, r2
   11bfc:	b2db      	uxtb	r3, r3
   11bfe:	2b00      	cmp	r3, #0
   11c00:	d001      	beq.n	11c06 <nvm_set_config+0x32>
		return STATUS_BUSY;
   11c02:	2305      	movs	r3, #5
   11c04:	e045      	b.n	11c92 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   11c06:	687b      	ldr	r3, [r7, #4]
   11c08:	781b      	ldrb	r3, [r3, #0]
   11c0a:	021b      	lsls	r3, r3, #8
   11c0c:	001a      	movs	r2, r3
   11c0e:	23c0      	movs	r3, #192	; 0xc0
   11c10:	009b      	lsls	r3, r3, #2
   11c12:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   11c14:	687b      	ldr	r3, [r7, #4]
   11c16:	785b      	ldrb	r3, [r3, #1]
   11c18:	01db      	lsls	r3, r3, #7
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
   11c1a:	0019      	movs	r1, r3
   11c1c:	23ff      	movs	r3, #255	; 0xff
   11c1e:	400b      	ands	r3, r1
   11c20:	431a      	orrs	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   11c22:	687b      	ldr	r3, [r7, #4]
   11c24:	789b      	ldrb	r3, [r3, #2]
   11c26:	005b      	lsls	r3, r3, #1
   11c28:	0019      	movs	r1, r3
   11c2a:	231e      	movs	r3, #30
   11c2c:	400b      	ands	r3, r1

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
   11c2e:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   11c30:	687b      	ldr	r3, [r7, #4]
   11c32:	78db      	ldrb	r3, [r3, #3]
   11c34:	049b      	lsls	r3, r3, #18
#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
   11c36:	0019      	movs	r1, r3
   11c38:	2380      	movs	r3, #128	; 0x80
   11c3a:	02db      	lsls	r3, r3, #11
   11c3c:	400b      	ands	r3, r1
   11c3e:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
   11c40:	687b      	ldr	r3, [r7, #4]
   11c42:	791b      	ldrb	r3, [r3, #4]
   11c44:	041b      	lsls	r3, r3, #16
   11c46:	0019      	movs	r1, r3
   11c48:	23c0      	movs	r3, #192	; 0xc0
   11c4a:	029b      	lsls	r3, r3, #10
   11c4c:	400b      	ands	r3, r1
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
   11c4e:	431a      	orrs	r2, r3
		return STATUS_BUSY;
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
   11c50:	68fb      	ldr	r3, [r7, #12]
   11c52:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
   11c54:	68fb      	ldr	r3, [r7, #12]
   11c56:	689b      	ldr	r3, [r3, #8]
   11c58:	035b      	lsls	r3, r3, #13
   11c5a:	0f5b      	lsrs	r3, r3, #29
   11c5c:	b2db      	uxtb	r3, r3
   11c5e:	001a      	movs	r2, r3
   11c60:	2308      	movs	r3, #8
   11c62:	4093      	lsls	r3, r2
   11c64:	b29a      	uxth	r2, r3
   11c66:	4b10      	ldr	r3, [pc, #64]	; (11ca8 <nvm_set_config+0xd4>)
   11c68:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
   11c6a:	68fb      	ldr	r3, [r7, #12]
   11c6c:	689b      	ldr	r3, [r3, #8]
   11c6e:	b29a      	uxth	r2, r3
   11c70:	4b0d      	ldr	r3, [pc, #52]	; (11ca8 <nvm_set_config+0xd4>)
   11c72:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
   11c74:	687b      	ldr	r3, [r7, #4]
   11c76:	785a      	ldrb	r2, [r3, #1]
   11c78:	4b0b      	ldr	r3, [pc, #44]	; (11ca8 <nvm_set_config+0xd4>)
   11c7a:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11c7c:	68fb      	ldr	r3, [r7, #12]
   11c7e:	8b1b      	ldrh	r3, [r3, #24]
   11c80:	b29b      	uxth	r3, r3
   11c82:	001a      	movs	r2, r3
   11c84:	2380      	movs	r3, #128	; 0x80
   11c86:	005b      	lsls	r3, r3, #1
   11c88:	4013      	ands	r3, r2
   11c8a:	d001      	beq.n	11c90 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
   11c8c:	2310      	movs	r3, #16
   11c8e:	e000      	b.n	11c92 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
   11c90:	2300      	movs	r3, #0
}
   11c92:	0018      	movs	r0, r3
   11c94:	46bd      	mov	sp, r7
   11c96:	b004      	add	sp, #16
   11c98:	bd80      	pop	{r7, pc}
   11c9a:	46c0      	nop			; (mov r8, r8)
   11c9c:	41004000 	.word	0x41004000
   11ca0:	00011b79 	.word	0x00011b79
   11ca4:	00011b51 	.word	0x00011b51
   11ca8:	200000e4 	.word	0x200000e4

00011cac <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
   11cac:	b580      	push	{r7, lr}
   11cae:	b086      	sub	sp, #24
   11cb0:	af00      	add	r7, sp, #0
   11cb2:	60b9      	str	r1, [r7, #8]
   11cb4:	607a      	str	r2, [r7, #4]
   11cb6:	230f      	movs	r3, #15
   11cb8:	18fb      	adds	r3, r7, r3
   11cba:	1c02      	adds	r2, r0, #0
   11cbc:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
   11cbe:	4b3a      	ldr	r3, [pc, #232]	; (11da8 <nvm_execute_command+0xfc>)
   11cc0:	881b      	ldrh	r3, [r3, #0]
   11cc2:	001a      	movs	r2, r3
   11cc4:	4b38      	ldr	r3, [pc, #224]	; (11da8 <nvm_execute_command+0xfc>)
   11cc6:	885b      	ldrh	r3, [r3, #2]
   11cc8:	435a      	muls	r2, r3
   11cca:	68bb      	ldr	r3, [r7, #8]
   11ccc:	429a      	cmp	r2, r3
   11cce:	d209      	bcs.n	11ce4 <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
   11cd0:	68bb      	ldr	r3, [r7, #8]
   11cd2:	4a36      	ldr	r2, [pc, #216]	; (11dac <nvm_execute_command+0x100>)
   11cd4:	4293      	cmp	r3, r2
   11cd6:	d903      	bls.n	11ce0 <nvm_execute_command+0x34>
   11cd8:	68bb      	ldr	r3, [r7, #8]
   11cda:	4a35      	ldr	r2, [pc, #212]	; (11db0 <nvm_execute_command+0x104>)
   11cdc:	4293      	cmp	r3, r2
   11cde:	d901      	bls.n	11ce4 <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11ce0:	2318      	movs	r3, #24
   11ce2:	e05c      	b.n	11d9e <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11ce4:	4b33      	ldr	r3, [pc, #204]	; (11db4 <nvm_execute_command+0x108>)
   11ce6:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
   11ce8:	697b      	ldr	r3, [r7, #20]
   11cea:	685b      	ldr	r3, [r3, #4]
   11cec:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
   11cee:	693b      	ldr	r3, [r7, #16]
   11cf0:	2280      	movs	r2, #128	; 0x80
   11cf2:	02d2      	lsls	r2, r2, #11
   11cf4:	431a      	orrs	r2, r3
   11cf6:	697b      	ldr	r3, [r7, #20]
   11cf8:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11cfa:	697b      	ldr	r3, [r7, #20]
   11cfc:	2220      	movs	r2, #32
   11cfe:	32ff      	adds	r2, #255	; 0xff
   11d00:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11d02:	4b2d      	ldr	r3, [pc, #180]	; (11db8 <nvm_execute_command+0x10c>)
   11d04:	4798      	blx	r3
   11d06:	0003      	movs	r3, r0
   11d08:	001a      	movs	r2, r3
   11d0a:	2301      	movs	r3, #1
   11d0c:	4053      	eors	r3, r2
   11d0e:	b2db      	uxtb	r3, r3
   11d10:	2b00      	cmp	r3, #0
   11d12:	d004      	beq.n	11d1e <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
   11d14:	697b      	ldr	r3, [r7, #20]
   11d16:	693a      	ldr	r2, [r7, #16]
   11d18:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
   11d1a:	2305      	movs	r3, #5
   11d1c:	e03f      	b.n	11d9e <nvm_execute_command+0xf2>
	}

	switch (command) {
   11d1e:	230f      	movs	r3, #15
   11d20:	18fb      	adds	r3, r7, r3
   11d22:	781b      	ldrb	r3, [r3, #0]
   11d24:	2b45      	cmp	r3, #69	; 0x45
   11d26:	d81d      	bhi.n	11d64 <nvm_execute_command+0xb8>
   11d28:	009a      	lsls	r2, r3, #2
   11d2a:	4b24      	ldr	r3, [pc, #144]	; (11dbc <nvm_execute_command+0x110>)
   11d2c:	18d3      	adds	r3, r2, r3
   11d2e:	681b      	ldr	r3, [r3, #0]
   11d30:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
   11d32:	697b      	ldr	r3, [r7, #20]
   11d34:	8b1b      	ldrh	r3, [r3, #24]
   11d36:	b29b      	uxth	r3, r3
   11d38:	001a      	movs	r2, r3
   11d3a:	2380      	movs	r3, #128	; 0x80
   11d3c:	005b      	lsls	r3, r3, #1
   11d3e:	4013      	ands	r3, r2
   11d40:	d004      	beq.n	11d4c <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
   11d42:	697b      	ldr	r3, [r7, #20]
   11d44:	693a      	ldr	r2, [r7, #16]
   11d46:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
   11d48:	2310      	movs	r3, #16
   11d4a:	e028      	b.n	11d9e <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11d4c:	68bb      	ldr	r3, [r7, #8]
   11d4e:	089b      	lsrs	r3, r3, #2
   11d50:	005a      	lsls	r2, r3, #1
   11d52:	697b      	ldr	r3, [r7, #20]
   11d54:	61da      	str	r2, [r3, #28]
			break;
   11d56:	e00b      	b.n	11d70 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
   11d58:	68bb      	ldr	r3, [r7, #8]
   11d5a:	089b      	lsrs	r3, r3, #2
   11d5c:	005a      	lsls	r2, r3, #1
   11d5e:	697b      	ldr	r3, [r7, #20]
   11d60:	61da      	str	r2, [r3, #28]
			break;
   11d62:	e005      	b.n	11d70 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
   11d64:	697b      	ldr	r3, [r7, #20]
   11d66:	693a      	ldr	r2, [r7, #16]
   11d68:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
   11d6a:	2317      	movs	r3, #23
   11d6c:	e017      	b.n	11d9e <nvm_execute_command+0xf2>
		/* Commands not requiring address */
		case NVM_COMMAND_PAGE_BUFFER_CLEAR:
		case NVM_COMMAND_SET_SECURITY_BIT:
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;
   11d6e:	46c0      	nop			; (mov r8, r8)
			nvm_module->CTRLB.reg = ctrlb_bak;
			return STATUS_ERR_INVALID_ARG;
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
   11d70:	230f      	movs	r3, #15
   11d72:	18fb      	adds	r3, r7, r3
   11d74:	781b      	ldrb	r3, [r3, #0]
   11d76:	b29b      	uxth	r3, r3
   11d78:	4a11      	ldr	r2, [pc, #68]	; (11dc0 <nvm_execute_command+0x114>)
   11d7a:	4313      	orrs	r3, r2
   11d7c:	b29a      	uxth	r2, r3
   11d7e:	697b      	ldr	r3, [r7, #20]
   11d80:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
   11d82:	46c0      	nop			; (mov r8, r8)
   11d84:	4b0c      	ldr	r3, [pc, #48]	; (11db8 <nvm_execute_command+0x10c>)
   11d86:	4798      	blx	r3
   11d88:	0003      	movs	r3, r0
   11d8a:	001a      	movs	r2, r3
   11d8c:	2301      	movs	r3, #1
   11d8e:	4053      	eors	r3, r2
   11d90:	b2db      	uxtb	r3, r3
   11d92:	2b00      	cmp	r3, #0
   11d94:	d1f6      	bne.n	11d84 <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
   11d96:	697b      	ldr	r3, [r7, #20]
   11d98:	693a      	ldr	r2, [r7, #16]
   11d9a:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   11d9c:	2300      	movs	r3, #0
}
   11d9e:	0018      	movs	r0, r3
   11da0:	46bd      	mov	sp, r7
   11da2:	b006      	add	sp, #24
   11da4:	bd80      	pop	{r7, pc}
   11da6:	46c0      	nop			; (mov r8, r8)
   11da8:	200000e4 	.word	0x200000e4
   11dac:	00803fff 	.word	0x00803fff
   11db0:	00806000 	.word	0x00806000
   11db4:	41004000 	.word	0x41004000
   11db8:	00011b51 	.word	0x00011b51
   11dbc:	000195fc 	.word	0x000195fc
   11dc0:	ffffa500 	.word	0xffffa500

00011dc4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
   11dc4:	b580      	push	{r7, lr}
   11dc6:	b088      	sub	sp, #32
   11dc8:	af00      	add	r7, sp, #0
   11dca:	60f8      	str	r0, [r7, #12]
   11dcc:	60b9      	str	r1, [r7, #8]
   11dce:	1dbb      	adds	r3, r7, #6
   11dd0:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11dd2:	4b4a      	ldr	r3, [pc, #296]	; (11efc <nvm_write_buffer+0x138>)
   11dd4:	881b      	ldrh	r3, [r3, #0]
   11dd6:	001a      	movs	r2, r3
   11dd8:	4b48      	ldr	r3, [pc, #288]	; (11efc <nvm_write_buffer+0x138>)
   11dda:	885b      	ldrh	r3, [r3, #2]
   11ddc:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
   11dde:	68fb      	ldr	r3, [r7, #12]
   11de0:	429a      	cmp	r2, r3
   11de2:	d201      	bcs.n	11de8 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   11de4:	2318      	movs	r3, #24
   11de6:	e084      	b.n	11ef2 <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
   11de8:	4b44      	ldr	r3, [pc, #272]	; (11efc <nvm_write_buffer+0x138>)
   11dea:	881b      	ldrh	r3, [r3, #0]
   11dec:	3b01      	subs	r3, #1
   11dee:	001a      	movs	r2, r3
   11df0:	68fb      	ldr	r3, [r7, #12]
   11df2:	4013      	ands	r3, r2
   11df4:	d001      	beq.n	11dfa <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11df6:	2318      	movs	r3, #24
   11df8:	e07b      	b.n	11ef2 <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   11dfa:	4b40      	ldr	r3, [pc, #256]	; (11efc <nvm_write_buffer+0x138>)
   11dfc:	881b      	ldrh	r3, [r3, #0]
   11dfe:	1dba      	adds	r2, r7, #6
   11e00:	8812      	ldrh	r2, [r2, #0]
   11e02:	429a      	cmp	r2, r3
   11e04:	d901      	bls.n	11e0a <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11e06:	2317      	movs	r3, #23
   11e08:	e073      	b.n	11ef2 <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11e0a:	4b3d      	ldr	r3, [pc, #244]	; (11f00 <nvm_write_buffer+0x13c>)
   11e0c:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11e0e:	4b3d      	ldr	r3, [pc, #244]	; (11f04 <nvm_write_buffer+0x140>)
   11e10:	4798      	blx	r3
   11e12:	0003      	movs	r3, r0
   11e14:	001a      	movs	r2, r3
   11e16:	2301      	movs	r3, #1
   11e18:	4053      	eors	r3, r2
   11e1a:	b2db      	uxtb	r3, r3
   11e1c:	2b00      	cmp	r3, #0
   11e1e:	d001      	beq.n	11e24 <nvm_write_buffer+0x60>
		return STATUS_BUSY;
   11e20:	2305      	movs	r3, #5
   11e22:	e066      	b.n	11ef2 <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
   11e24:	697b      	ldr	r3, [r7, #20]
   11e26:	4a38      	ldr	r2, [pc, #224]	; (11f08 <nvm_write_buffer+0x144>)
   11e28:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
   11e2a:	46c0      	nop			; (mov r8, r8)
   11e2c:	4b35      	ldr	r3, [pc, #212]	; (11f04 <nvm_write_buffer+0x140>)
   11e2e:	4798      	blx	r3
   11e30:	0003      	movs	r3, r0
   11e32:	001a      	movs	r2, r3
   11e34:	2301      	movs	r3, #1
   11e36:	4053      	eors	r3, r2
   11e38:	b2db      	uxtb	r3, r3
   11e3a:	2b00      	cmp	r3, #0
   11e3c:	d1f6      	bne.n	11e2c <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11e3e:	697b      	ldr	r3, [r7, #20]
   11e40:	2220      	movs	r2, #32
   11e42:	32ff      	adds	r2, #255	; 0xff
   11e44:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
   11e46:	68fb      	ldr	r3, [r7, #12]
   11e48:	085b      	lsrs	r3, r3, #1
   11e4a:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11e4c:	231a      	movs	r3, #26
   11e4e:	18fb      	adds	r3, r7, r3
   11e50:	2200      	movs	r2, #0
   11e52:	801a      	strh	r2, [r3, #0]
   11e54:	e032      	b.n	11ebc <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
   11e56:	231a      	movs	r3, #26
   11e58:	18fb      	adds	r3, r7, r3
   11e5a:	881b      	ldrh	r3, [r3, #0]
   11e5c:	68ba      	ldr	r2, [r7, #8]
   11e5e:	18d3      	adds	r3, r2, r3
   11e60:	781a      	ldrb	r2, [r3, #0]
   11e62:	2318      	movs	r3, #24
   11e64:	18fb      	adds	r3, r7, r3
   11e66:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11e68:	231a      	movs	r3, #26
   11e6a:	18fb      	adds	r3, r7, r3
   11e6c:	881a      	ldrh	r2, [r3, #0]
   11e6e:	1dbb      	adds	r3, r7, #6
   11e70:	881b      	ldrh	r3, [r3, #0]
   11e72:	3b01      	subs	r3, #1
   11e74:	429a      	cmp	r2, r3
   11e76:	da11      	bge.n	11e9c <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
   11e78:	231a      	movs	r3, #26
   11e7a:	18fb      	adds	r3, r7, r3
   11e7c:	881b      	ldrh	r3, [r3, #0]
   11e7e:	3301      	adds	r3, #1
   11e80:	68ba      	ldr	r2, [r7, #8]
   11e82:	18d3      	adds	r3, r2, r3
   11e84:	781b      	ldrb	r3, [r3, #0]
   11e86:	021b      	lsls	r3, r3, #8
   11e88:	b21a      	sxth	r2, r3
   11e8a:	2318      	movs	r3, #24
   11e8c:	18fb      	adds	r3, r7, r3
   11e8e:	2100      	movs	r1, #0
   11e90:	5e5b      	ldrsh	r3, [r3, r1]
   11e92:	4313      	orrs	r3, r2
   11e94:	b21a      	sxth	r2, r3
   11e96:	2318      	movs	r3, #24
   11e98:	18fb      	adds	r3, r7, r3
   11e9a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
   11e9c:	69fb      	ldr	r3, [r7, #28]
   11e9e:	1c5a      	adds	r2, r3, #1
   11ea0:	61fa      	str	r2, [r7, #28]
   11ea2:	005b      	lsls	r3, r3, #1
   11ea4:	001a      	movs	r2, r3
   11ea6:	2318      	movs	r3, #24
   11ea8:	18fb      	adds	r3, r7, r3
   11eaa:	881b      	ldrh	r3, [r3, #0]
   11eac:	8013      	strh	r3, [r2, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11eae:	231a      	movs	r3, #26
   11eb0:	18fb      	adds	r3, r7, r3
   11eb2:	221a      	movs	r2, #26
   11eb4:	18ba      	adds	r2, r7, r2
   11eb6:	8812      	ldrh	r2, [r2, #0]
   11eb8:	3202      	adds	r2, #2
   11eba:	801a      	strh	r2, [r3, #0]
   11ebc:	231a      	movs	r3, #26
   11ebe:	18fa      	adds	r2, r7, r3
   11ec0:	1dbb      	adds	r3, r7, #6
   11ec2:	8812      	ldrh	r2, [r2, #0]
   11ec4:	881b      	ldrh	r3, [r3, #0]
   11ec6:	429a      	cmp	r2, r3
   11ec8:	d3c5      	bcc.n	11e56 <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
   11eca:	4b0c      	ldr	r3, [pc, #48]	; (11efc <nvm_write_buffer+0x138>)
   11ecc:	791b      	ldrb	r3, [r3, #4]
   11ece:	2201      	movs	r2, #1
   11ed0:	4053      	eors	r3, r2
   11ed2:	b2db      	uxtb	r3, r3
   11ed4:	2b00      	cmp	r3, #0
   11ed6:	d00b      	beq.n	11ef0 <nvm_write_buffer+0x12c>
   11ed8:	1dbb      	adds	r3, r7, #6
   11eda:	881b      	ldrh	r3, [r3, #0]
   11edc:	2b3f      	cmp	r3, #63	; 0x3f
   11ede:	d807      	bhi.n	11ef0 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
   11ee0:	68fb      	ldr	r3, [r7, #12]
   11ee2:	2200      	movs	r2, #0
   11ee4:	0019      	movs	r1, r3
   11ee6:	2004      	movs	r0, #4
   11ee8:	4b08      	ldr	r3, [pc, #32]	; (11f0c <nvm_write_buffer+0x148>)
   11eea:	4798      	blx	r3
   11eec:	0003      	movs	r3, r0
   11eee:	e000      	b.n	11ef2 <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
   11ef0:	2300      	movs	r3, #0
}
   11ef2:	0018      	movs	r0, r3
   11ef4:	46bd      	mov	sp, r7
   11ef6:	b008      	add	sp, #32
   11ef8:	bd80      	pop	{r7, pc}
   11efa:	46c0      	nop			; (mov r8, r8)
   11efc:	200000e4 	.word	0x200000e4
   11f00:	41004000 	.word	0x41004000
   11f04:	00011b51 	.word	0x00011b51
   11f08:	ffffa544 	.word	0xffffa544
   11f0c:	00011cad 	.word	0x00011cad

00011f10 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
   11f10:	b580      	push	{r7, lr}
   11f12:	b088      	sub	sp, #32
   11f14:	af00      	add	r7, sp, #0
   11f16:	60f8      	str	r0, [r7, #12]
   11f18:	60b9      	str	r1, [r7, #8]
   11f1a:	1dbb      	adds	r3, r7, #6
   11f1c:	801a      	strh	r2, [r3, #0]
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   11f1e:	4b38      	ldr	r3, [pc, #224]	; (12000 <nvm_read_buffer+0xf0>)
   11f20:	881b      	ldrh	r3, [r3, #0]
   11f22:	001a      	movs	r2, r3
   11f24:	4b36      	ldr	r3, [pc, #216]	; (12000 <nvm_read_buffer+0xf0>)
   11f26:	885b      	ldrh	r3, [r3, #2]
   11f28:	435a      	muls	r2, r3
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
	/* Check if the source address is valid */
	if (source_address >
   11f2a:	68fb      	ldr	r3, [r7, #12]
   11f2c:	429a      	cmp	r2, r3
   11f2e:	d201      	bcs.n	11f34 <nvm_read_buffer+0x24>
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
   11f30:	2318      	movs	r3, #24
   11f32:	e060      	b.n	11ff6 <nvm_read_buffer+0xe6>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
   11f34:	4b32      	ldr	r3, [pc, #200]	; (12000 <nvm_read_buffer+0xf0>)
   11f36:	881b      	ldrh	r3, [r3, #0]
   11f38:	3b01      	subs	r3, #1
   11f3a:	001a      	movs	r2, r3
   11f3c:	68fb      	ldr	r3, [r7, #12]
   11f3e:	4013      	ands	r3, r2
   11f40:	d001      	beq.n	11f46 <nvm_read_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
   11f42:	2318      	movs	r3, #24
   11f44:	e057      	b.n	11ff6 <nvm_read_buffer+0xe6>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
   11f46:	4b2e      	ldr	r3, [pc, #184]	; (12000 <nvm_read_buffer+0xf0>)
   11f48:	881b      	ldrh	r3, [r3, #0]
   11f4a:	1dba      	adds	r2, r7, #6
   11f4c:	8812      	ldrh	r2, [r2, #0]
   11f4e:	429a      	cmp	r2, r3
   11f50:	d901      	bls.n	11f56 <nvm_read_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
   11f52:	2317      	movs	r3, #23
   11f54:	e04f      	b.n	11ff6 <nvm_read_buffer+0xe6>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   11f56:	4b2b      	ldr	r3, [pc, #172]	; (12004 <nvm_read_buffer+0xf4>)
   11f58:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   11f5a:	4b2b      	ldr	r3, [pc, #172]	; (12008 <nvm_read_buffer+0xf8>)
   11f5c:	4798      	blx	r3
   11f5e:	0003      	movs	r3, r0
   11f60:	001a      	movs	r2, r3
   11f62:	2301      	movs	r3, #1
   11f64:	4053      	eors	r3, r2
   11f66:	b2db      	uxtb	r3, r3
   11f68:	2b00      	cmp	r3, #0
   11f6a:	d001      	beq.n	11f70 <nvm_read_buffer+0x60>
		return STATUS_BUSY;
   11f6c:	2305      	movs	r3, #5
   11f6e:	e042      	b.n	11ff6 <nvm_read_buffer+0xe6>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   11f70:	697b      	ldr	r3, [r7, #20]
   11f72:	2220      	movs	r2, #32
   11f74:	32ff      	adds	r2, #255	; 0xff
   11f76:	831a      	strh	r2, [r3, #24]

	uint32_t page_address = source_address / 2;
   11f78:	68fb      	ldr	r3, [r7, #12]
   11f7a:	085b      	lsrs	r3, r3, #1
   11f7c:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11f7e:	231a      	movs	r3, #26
   11f80:	18fb      	adds	r3, r7, r3
   11f82:	2200      	movs	r2, #0
   11f84:	801a      	strh	r2, [r3, #0]
   11f86:	e02e      	b.n	11fe6 <nvm_read_buffer+0xd6>
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
   11f88:	69fb      	ldr	r3, [r7, #28]
   11f8a:	1c5a      	adds	r2, r3, #1
   11f8c:	61fa      	str	r2, [r7, #28]
   11f8e:	005b      	lsls	r3, r3, #1
   11f90:	001a      	movs	r2, r3
   11f92:	2312      	movs	r3, #18
   11f94:	18fb      	adds	r3, r7, r3
   11f96:	8812      	ldrh	r2, [r2, #0]
   11f98:	801a      	strh	r2, [r3, #0]

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
   11f9a:	231a      	movs	r3, #26
   11f9c:	18fb      	adds	r3, r7, r3
   11f9e:	881b      	ldrh	r3, [r3, #0]
   11fa0:	68ba      	ldr	r2, [r7, #8]
   11fa2:	18d3      	adds	r3, r2, r3
   11fa4:	2212      	movs	r2, #18
   11fa6:	18ba      	adds	r2, r7, r2
   11fa8:	8812      	ldrh	r2, [r2, #0]
   11faa:	b2d2      	uxtb	r2, r2
   11fac:	701a      	strb	r2, [r3, #0]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
   11fae:	231a      	movs	r3, #26
   11fb0:	18fb      	adds	r3, r7, r3
   11fb2:	881a      	ldrh	r2, [r3, #0]
   11fb4:	1dbb      	adds	r3, r7, #6
   11fb6:	881b      	ldrh	r3, [r3, #0]
   11fb8:	3b01      	subs	r3, #1
   11fba:	429a      	cmp	r2, r3
   11fbc:	da0c      	bge.n	11fd8 <nvm_read_buffer+0xc8>
			buffer[i + 1] = (data >> 8);
   11fbe:	231a      	movs	r3, #26
   11fc0:	18fb      	adds	r3, r7, r3
   11fc2:	881b      	ldrh	r3, [r3, #0]
   11fc4:	3301      	adds	r3, #1
   11fc6:	68ba      	ldr	r2, [r7, #8]
   11fc8:	18d3      	adds	r3, r2, r3
   11fca:	2212      	movs	r2, #18
   11fcc:	18ba      	adds	r2, r7, r2
   11fce:	8812      	ldrh	r2, [r2, #0]
   11fd0:	0a12      	lsrs	r2, r2, #8
   11fd2:	b292      	uxth	r2, r2
   11fd4:	b2d2      	uxtb	r2, r2
   11fd6:	701a      	strb	r2, [r3, #0]

	uint32_t page_address = source_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
   11fd8:	231a      	movs	r3, #26
   11fda:	18fb      	adds	r3, r7, r3
   11fdc:	221a      	movs	r2, #26
   11fde:	18ba      	adds	r2, r7, r2
   11fe0:	8812      	ldrh	r2, [r2, #0]
   11fe2:	3202      	adds	r2, #2
   11fe4:	801a      	strh	r2, [r3, #0]
   11fe6:	231a      	movs	r3, #26
   11fe8:	18fa      	adds	r2, r7, r3
   11fea:	1dbb      	adds	r3, r7, #6
   11fec:	8812      	ldrh	r2, [r2, #0]
   11fee:	881b      	ldrh	r3, [r3, #0]
   11ff0:	429a      	cmp	r2, r3
   11ff2:	d3c9      	bcc.n	11f88 <nvm_read_buffer+0x78>
		if (i < (length - 1)) {
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
   11ff4:	2300      	movs	r3, #0
}
   11ff6:	0018      	movs	r0, r3
   11ff8:	46bd      	mov	sp, r7
   11ffa:	b008      	add	sp, #32
   11ffc:	bd80      	pop	{r7, pc}
   11ffe:	46c0      	nop			; (mov r8, r8)
   12000:	200000e4 	.word	0x200000e4
   12004:	41004000 	.word	0x41004000
   12008:	00011b51 	.word	0x00011b51

0001200c <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
   1200c:	b580      	push	{r7, lr}
   1200e:	b084      	sub	sp, #16
   12010:	af00      	add	r7, sp, #0
   12012:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
   12014:	4b23      	ldr	r3, [pc, #140]	; (120a4 <nvm_erase_row+0x98>)
   12016:	881b      	ldrh	r3, [r3, #0]
   12018:	001a      	movs	r2, r3
   1201a:	4b22      	ldr	r3, [pc, #136]	; (120a4 <nvm_erase_row+0x98>)
   1201c:	885b      	ldrh	r3, [r3, #2]
   1201e:	435a      	muls	r2, r3
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
   12020:	687b      	ldr	r3, [r7, #4]
   12022:	429a      	cmp	r2, r3
   12024:	d201      	bcs.n	1202a <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
   12026:	2318      	movs	r3, #24
   12028:	e037      	b.n	1209a <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
   1202a:	4b1e      	ldr	r3, [pc, #120]	; (120a4 <nvm_erase_row+0x98>)
   1202c:	881b      	ldrh	r3, [r3, #0]
   1202e:	009b      	lsls	r3, r3, #2
   12030:	3b01      	subs	r3, #1
   12032:	001a      	movs	r2, r3
   12034:	687b      	ldr	r3, [r7, #4]
   12036:	4013      	ands	r3, r2
   12038:	d001      	beq.n	1203e <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
   1203a:	2318      	movs	r3, #24
   1203c:	e02d      	b.n	1209a <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
   1203e:	4b1a      	ldr	r3, [pc, #104]	; (120a8 <nvm_erase_row+0x9c>)
   12040:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
   12042:	4b1a      	ldr	r3, [pc, #104]	; (120ac <nvm_erase_row+0xa0>)
   12044:	4798      	blx	r3
   12046:	0003      	movs	r3, r0
   12048:	001a      	movs	r2, r3
   1204a:	2301      	movs	r3, #1
   1204c:	4053      	eors	r3, r2
   1204e:	b2db      	uxtb	r3, r3
   12050:	2b00      	cmp	r3, #0
   12052:	d001      	beq.n	12058 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
   12054:	2305      	movs	r3, #5
   12056:	e020      	b.n	1209a <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
   12058:	68fb      	ldr	r3, [r7, #12]
   1205a:	2220      	movs	r2, #32
   1205c:	32ff      	adds	r2, #255	; 0xff
   1205e:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
   12060:	687b      	ldr	r3, [r7, #4]
   12062:	089b      	lsrs	r3, r3, #2
   12064:	005a      	lsls	r2, r3, #1
   12066:	68fb      	ldr	r3, [r7, #12]
   12068:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
   1206a:	68fb      	ldr	r3, [r7, #12]
   1206c:	4a10      	ldr	r2, [pc, #64]	; (120b0 <nvm_erase_row+0xa4>)
   1206e:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
   12070:	46c0      	nop			; (mov r8, r8)
   12072:	4b0e      	ldr	r3, [pc, #56]	; (120ac <nvm_erase_row+0xa0>)
   12074:	4798      	blx	r3
   12076:	0003      	movs	r3, r0
   12078:	001a      	movs	r2, r3
   1207a:	2301      	movs	r3, #1
   1207c:	4053      	eors	r3, r2
   1207e:	b2db      	uxtb	r3, r3
   12080:	2b00      	cmp	r3, #0
   12082:	d1f6      	bne.n	12072 <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
   12084:	68fb      	ldr	r3, [r7, #12]
   12086:	8b1b      	ldrh	r3, [r3, #24]
   12088:	b29b      	uxth	r3, r3
   1208a:	b2db      	uxtb	r3, r3
   1208c:	001a      	movs	r2, r3
   1208e:	231c      	movs	r3, #28
   12090:	4013      	ands	r3, r2
   12092:	d001      	beq.n	12098 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
   12094:	2304      	movs	r3, #4
   12096:	e000      	b.n	1209a <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
   12098:	2300      	movs	r3, #0
}
   1209a:	0018      	movs	r0, r3
   1209c:	46bd      	mov	sp, r7
   1209e:	b004      	add	sp, #16
   120a0:	bd80      	pop	{r7, pc}
   120a2:	46c0      	nop			; (mov r8, r8)
   120a4:	200000e4 	.word	0x200000e4
   120a8:	41004000 	.word	0x41004000
   120ac:	00011b51 	.word	0x00011b51
   120b0:	ffffa502 	.word	0xffffa502

000120b4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   120b4:	b580      	push	{r7, lr}
   120b6:	b082      	sub	sp, #8
   120b8:	af00      	add	r7, sp, #0
   120ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   120bc:	687b      	ldr	r3, [r7, #4]
   120be:	2280      	movs	r2, #128	; 0x80
   120c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   120c2:	687b      	ldr	r3, [r7, #4]
   120c4:	2200      	movs	r2, #0
   120c6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   120c8:	687b      	ldr	r3, [r7, #4]
   120ca:	2201      	movs	r2, #1
   120cc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   120ce:	687b      	ldr	r3, [r7, #4]
   120d0:	2200      	movs	r2, #0
   120d2:	70da      	strb	r2, [r3, #3]
}
   120d4:	46c0      	nop			; (mov r8, r8)
   120d6:	46bd      	mov	sp, r7
   120d8:	b002      	add	sp, #8
   120da:	bd80      	pop	{r7, pc}

000120dc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   120dc:	b580      	push	{r7, lr}
   120de:	b084      	sub	sp, #16
   120e0:	af00      	add	r7, sp, #0
   120e2:	0002      	movs	r2, r0
   120e4:	6039      	str	r1, [r7, #0]
   120e6:	1dfb      	adds	r3, r7, #7
   120e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   120ea:	230c      	movs	r3, #12
   120ec:	18fb      	adds	r3, r7, r3
   120ee:	0018      	movs	r0, r3
   120f0:	4b10      	ldr	r3, [pc, #64]	; (12134 <port_pin_set_config+0x58>)
   120f2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   120f4:	230c      	movs	r3, #12
   120f6:	18fb      	adds	r3, r7, r3
   120f8:	2280      	movs	r2, #128	; 0x80
   120fa:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   120fc:	683b      	ldr	r3, [r7, #0]
   120fe:	781a      	ldrb	r2, [r3, #0]
   12100:	230c      	movs	r3, #12
   12102:	18fb      	adds	r3, r7, r3
   12104:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   12106:	683b      	ldr	r3, [r7, #0]
   12108:	785a      	ldrb	r2, [r3, #1]
   1210a:	230c      	movs	r3, #12
   1210c:	18fb      	adds	r3, r7, r3
   1210e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   12110:	683b      	ldr	r3, [r7, #0]
   12112:	789a      	ldrb	r2, [r3, #2]
   12114:	230c      	movs	r3, #12
   12116:	18fb      	adds	r3, r7, r3
   12118:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   1211a:	230c      	movs	r3, #12
   1211c:	18fa      	adds	r2, r7, r3
   1211e:	1dfb      	adds	r3, r7, #7
   12120:	781b      	ldrb	r3, [r3, #0]
   12122:	0011      	movs	r1, r2
   12124:	0018      	movs	r0, r3
   12126:	4b04      	ldr	r3, [pc, #16]	; (12138 <port_pin_set_config+0x5c>)
   12128:	4798      	blx	r3
}
   1212a:	46c0      	nop			; (mov r8, r8)
   1212c:	46bd      	mov	sp, r7
   1212e:	b004      	add	sp, #16
   12130:	bd80      	pop	{r7, pc}
   12132:	46c0      	nop			; (mov r8, r8)
   12134:	000120b5 	.word	0x000120b5
   12138:	000153d9 	.word	0x000153d9

0001213c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b082      	sub	sp, #8
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	2200      	movs	r2, #0
   12148:	701a      	strb	r2, [r3, #0]
}
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	46bd      	mov	sp, r7
   1214e:	b002      	add	sp, #8
   12150:	bd80      	pop	{r7, pc}
   12152:	46c0      	nop			; (mov r8, r8)

00012154 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   12154:	b5f0      	push	{r4, r5, r6, r7, lr}
   12156:	b08d      	sub	sp, #52	; 0x34
   12158:	af00      	add	r7, sp, #0
   1215a:	60b8      	str	r0, [r7, #8]
   1215c:	60f9      	str	r1, [r7, #12]
   1215e:	603a      	str	r2, [r7, #0]
   12160:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   12162:	2300      	movs	r3, #0
   12164:	2400      	movs	r4, #0
   12166:	623b      	str	r3, [r7, #32]
   12168:	627c      	str	r4, [r7, #36]	; 0x24
   1216a:	2300      	movs	r3, #0
   1216c:	2400      	movs	r4, #0
   1216e:	61bb      	str	r3, [r7, #24]
   12170:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   12172:	233f      	movs	r3, #63	; 0x3f
   12174:	62fb      	str	r3, [r7, #44]	; 0x2c
   12176:	e053      	b.n	12220 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   12178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1217a:	3b20      	subs	r3, #32
   1217c:	2b00      	cmp	r3, #0
   1217e:	db04      	blt.n	1218a <long_division+0x36>
   12180:	2201      	movs	r2, #1
   12182:	409a      	lsls	r2, r3
   12184:	0013      	movs	r3, r2
   12186:	617b      	str	r3, [r7, #20]
   12188:	e00b      	b.n	121a2 <long_division+0x4e>
   1218a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1218c:	2220      	movs	r2, #32
   1218e:	1ad3      	subs	r3, r2, r3
   12190:	2201      	movs	r2, #1
   12192:	40da      	lsrs	r2, r3
   12194:	0013      	movs	r3, r2
   12196:	2100      	movs	r1, #0
   12198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1219a:	4091      	lsls	r1, r2
   1219c:	000a      	movs	r2, r1
   1219e:	4313      	orrs	r3, r2
   121a0:	617b      	str	r3, [r7, #20]
   121a2:	2201      	movs	r2, #1
   121a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   121a6:	409a      	lsls	r2, r3
   121a8:	0013      	movs	r3, r2
   121aa:	613b      	str	r3, [r7, #16]

		r = r << 1;
   121ac:	69bb      	ldr	r3, [r7, #24]
   121ae:	69fc      	ldr	r4, [r7, #28]
   121b0:	18db      	adds	r3, r3, r3
   121b2:	4164      	adcs	r4, r4
   121b4:	61bb      	str	r3, [r7, #24]
   121b6:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   121b8:	68bb      	ldr	r3, [r7, #8]
   121ba:	693a      	ldr	r2, [r7, #16]
   121bc:	401a      	ands	r2, r3
   121be:	0015      	movs	r5, r2
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	697a      	ldr	r2, [r7, #20]
   121c4:	401a      	ands	r2, r3
   121c6:	0016      	movs	r6, r2
   121c8:	002b      	movs	r3, r5
   121ca:	4333      	orrs	r3, r6
   121cc:	d007      	beq.n	121de <long_division+0x8a>
			r |= 0x01;
   121ce:	69bb      	ldr	r3, [r7, #24]
   121d0:	2201      	movs	r2, #1
   121d2:	4313      	orrs	r3, r2
   121d4:	61bb      	str	r3, [r7, #24]
   121d6:	69fb      	ldr	r3, [r7, #28]
   121d8:	2200      	movs	r2, #0
   121da:	4313      	orrs	r3, r2
   121dc:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   121de:	687a      	ldr	r2, [r7, #4]
   121e0:	69fb      	ldr	r3, [r7, #28]
   121e2:	429a      	cmp	r2, r3
   121e4:	d819      	bhi.n	1221a <long_division+0xc6>
   121e6:	687a      	ldr	r2, [r7, #4]
   121e8:	69fb      	ldr	r3, [r7, #28]
   121ea:	429a      	cmp	r2, r3
   121ec:	d103      	bne.n	121f6 <long_division+0xa2>
   121ee:	683a      	ldr	r2, [r7, #0]
   121f0:	69bb      	ldr	r3, [r7, #24]
   121f2:	429a      	cmp	r2, r3
   121f4:	d811      	bhi.n	1221a <long_division+0xc6>
			r = r - d;
   121f6:	69b9      	ldr	r1, [r7, #24]
   121f8:	69fa      	ldr	r2, [r7, #28]
   121fa:	683b      	ldr	r3, [r7, #0]
   121fc:	687c      	ldr	r4, [r7, #4]
   121fe:	1ac9      	subs	r1, r1, r3
   12200:	41a2      	sbcs	r2, r4
   12202:	000b      	movs	r3, r1
   12204:	0014      	movs	r4, r2
   12206:	61bb      	str	r3, [r7, #24]
   12208:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   1220a:	6a3a      	ldr	r2, [r7, #32]
   1220c:	693b      	ldr	r3, [r7, #16]
   1220e:	4313      	orrs	r3, r2
   12210:	623b      	str	r3, [r7, #32]
   12212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12214:	697b      	ldr	r3, [r7, #20]
   12216:	4313      	orrs	r3, r2
   12218:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
   1221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1221c:	3b01      	subs	r3, #1
   1221e:	62fb      	str	r3, [r7, #44]	; 0x2c
   12220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12222:	2b00      	cmp	r3, #0
   12224:	daa8      	bge.n	12178 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
   12226:	6a3b      	ldr	r3, [r7, #32]
   12228:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   1222a:	0018      	movs	r0, r3
   1222c:	0021      	movs	r1, r4
   1222e:	46bd      	mov	sp, r7
   12230:	b00d      	add	sp, #52	; 0x34
   12232:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012234 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   12234:	b580      	push	{r7, lr}
   12236:	b086      	sub	sp, #24
   12238:	af00      	add	r7, sp, #0
   1223a:	60f8      	str	r0, [r7, #12]
   1223c:	60b9      	str	r1, [r7, #8]
   1223e:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   12240:	2316      	movs	r3, #22
   12242:	18fb      	adds	r3, r7, r3
   12244:	2200      	movs	r2, #0
   12246:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   12248:	68bb      	ldr	r3, [r7, #8]
   1224a:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   1224c:	68bb      	ldr	r3, [r7, #8]
   1224e:	085a      	lsrs	r2, r3, #1
   12250:	68fb      	ldr	r3, [r7, #12]
   12252:	429a      	cmp	r2, r3
   12254:	d201      	bcs.n	1225a <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12256:	2340      	movs	r3, #64	; 0x40
   12258:	e026      	b.n	122a8 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   1225a:	68bb      	ldr	r3, [r7, #8]
   1225c:	085b      	lsrs	r3, r3, #1
   1225e:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   12260:	e00a      	b.n	12278 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   12262:	693a      	ldr	r2, [r7, #16]
   12264:	68fb      	ldr	r3, [r7, #12]
   12266:	1ad3      	subs	r3, r2, r3
   12268:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   1226a:	2316      	movs	r3, #22
   1226c:	18fb      	adds	r3, r7, r3
   1226e:	881a      	ldrh	r2, [r3, #0]
   12270:	2316      	movs	r3, #22
   12272:	18fb      	adds	r3, r7, r3
   12274:	3201      	adds	r2, #1
   12276:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
   12278:	693a      	ldr	r2, [r7, #16]
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	429a      	cmp	r2, r3
   1227e:	d2f0      	bcs.n	12262 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
   12280:	2316      	movs	r3, #22
   12282:	18fb      	adds	r3, r7, r3
   12284:	2216      	movs	r2, #22
   12286:	18ba      	adds	r2, r7, r2
   12288:	8812      	ldrh	r2, [r2, #0]
   1228a:	3a01      	subs	r2, #1
   1228c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   1228e:	2316      	movs	r3, #22
   12290:	18fb      	adds	r3, r7, r3
   12292:	881b      	ldrh	r3, [r3, #0]
   12294:	2bff      	cmp	r3, #255	; 0xff
   12296:	d901      	bls.n	1229c <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   12298:	2340      	movs	r3, #64	; 0x40
   1229a:	e005      	b.n	122a8 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   1229c:	687b      	ldr	r3, [r7, #4]
   1229e:	2216      	movs	r2, #22
   122a0:	18ba      	adds	r2, r7, r2
   122a2:	8812      	ldrh	r2, [r2, #0]
   122a4:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   122a6:	2300      	movs	r3, #0
	}
}
   122a8:	0018      	movs	r0, r3
   122aa:	46bd      	mov	sp, r7
   122ac:	b006      	add	sp, #24
   122ae:	bd80      	pop	{r7, pc}

000122b0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   122b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   122b2:	b0a1      	sub	sp, #132	; 0x84
   122b4:	af00      	add	r7, sp, #0
   122b6:	64f8      	str	r0, [r7, #76]	; 0x4c
   122b8:	64b9      	str	r1, [r7, #72]	; 0x48
   122ba:	647a      	str	r2, [r7, #68]	; 0x44
   122bc:	2243      	movs	r2, #67	; 0x43
   122be:	18ba      	adds	r2, r7, r2
   122c0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   122c2:	2300      	movs	r3, #0
   122c4:	2400      	movs	r4, #0
   122c6:	673b      	str	r3, [r7, #112]	; 0x70
   122c8:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   122ca:	2300      	movs	r3, #0
   122cc:	2400      	movs	r4, #0
   122ce:	66bb      	str	r3, [r7, #104]	; 0x68
   122d0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   122d2:	2300      	movs	r3, #0
   122d4:	2400      	movs	r4, #0
   122d6:	67bb      	str	r3, [r7, #120]	; 0x78
   122d8:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   122da:	2300      	movs	r3, #0
   122dc:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   122de:	2358      	movs	r3, #88	; 0x58
   122e0:	2240      	movs	r2, #64	; 0x40
   122e2:	4694      	mov	ip, r2
   122e4:	44bc      	add	ip, r7
   122e6:	4463      	add	r3, ip
   122e8:	781a      	ldrb	r2, [r3, #0]
   122ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   122ec:	435a      	muls	r2, r3
   122ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   122f0:	429a      	cmp	r2, r3
   122f2:	d901      	bls.n	122f8 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   122f4:	2340      	movs	r3, #64	; 0x40
   122f6:	e0b3      	b.n	12460 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   122f8:	2343      	movs	r3, #67	; 0x43
   122fa:	18fb      	adds	r3, r7, r3
   122fc:	781b      	ldrb	r3, [r3, #0]
   122fe:	2b00      	cmp	r3, #0
   12300:	d13d      	bne.n	1237e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   12302:	2358      	movs	r3, #88	; 0x58
   12304:	2240      	movs	r2, #64	; 0x40
   12306:	4694      	mov	ip, r2
   12308:	44bc      	add	ip, r7
   1230a:	4463      	add	r3, ip
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	b2db      	uxtb	r3, r3
   12310:	613b      	str	r3, [r7, #16]
   12312:	2300      	movs	r3, #0
   12314:	617b      	str	r3, [r7, #20]
   12316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   12318:	60bb      	str	r3, [r7, #8]
   1231a:	2300      	movs	r3, #0
   1231c:	60fb      	str	r3, [r7, #12]
   1231e:	4c52      	ldr	r4, [pc, #328]	; (12468 <_sercom_get_async_baud_val+0x1b8>)
   12320:	68ba      	ldr	r2, [r7, #8]
   12322:	68fb      	ldr	r3, [r7, #12]
   12324:	6938      	ldr	r0, [r7, #16]
   12326:	6979      	ldr	r1, [r7, #20]
   12328:	47a0      	blx	r4
   1232a:	0003      	movs	r3, r0
   1232c:	000c      	movs	r4, r1
   1232e:	001b      	movs	r3, r3
   12330:	65fb      	str	r3, [r7, #92]	; 0x5c
   12332:	2300      	movs	r3, #0
   12334:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   12336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   12338:	603b      	str	r3, [r7, #0]
   1233a:	2300      	movs	r3, #0
   1233c:	607b      	str	r3, [r7, #4]
   1233e:	6db8      	ldr	r0, [r7, #88]	; 0x58
   12340:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   12342:	683a      	ldr	r2, [r7, #0]
   12344:	687b      	ldr	r3, [r7, #4]
   12346:	4c49      	ldr	r4, [pc, #292]	; (1246c <_sercom_get_async_baud_val+0x1bc>)
   12348:	47a0      	blx	r4
   1234a:	0003      	movs	r3, r0
   1234c:	000c      	movs	r4, r1
   1234e:	673b      	str	r3, [r7, #112]	; 0x70
   12350:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   12352:	2100      	movs	r1, #0
   12354:	2201      	movs	r2, #1
   12356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   12358:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   1235a:	1ac9      	subs	r1, r1, r3
   1235c:	41a2      	sbcs	r2, r4
   1235e:	000b      	movs	r3, r1
   12360:	0014      	movs	r4, r2
   12362:	66bb      	str	r3, [r7, #104]	; 0x68
   12364:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   12366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12368:	0c1b      	lsrs	r3, r3, #16
   1236a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   1236c:	0416      	lsls	r6, r2, #16
   1236e:	431e      	orrs	r6, r3
   12370:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12372:	041d      	lsls	r5, r3, #16
   12374:	0033      	movs	r3, r6
   12376:	67bb      	str	r3, [r7, #120]	; 0x78
   12378:	2300      	movs	r3, #0
   1237a:	67fb      	str	r3, [r7, #124]	; 0x7c
   1237c:	e06a      	b.n	12454 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   1237e:	2343      	movs	r3, #67	; 0x43
   12380:	18fb      	adds	r3, r7, r3
   12382:	781b      	ldrb	r3, [r3, #0]
   12384:	2b01      	cmp	r3, #1
   12386:	d165      	bne.n	12454 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   12388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1238a:	633b      	str	r3, [r7, #48]	; 0x30
   1238c:	2300      	movs	r3, #0
   1238e:	637b      	str	r3, [r7, #52]	; 0x34
   12390:	2358      	movs	r3, #88	; 0x58
   12392:	2240      	movs	r2, #64	; 0x40
   12394:	4694      	mov	ip, r2
   12396:	44bc      	add	ip, r7
   12398:	4463      	add	r3, ip
   1239a:	781b      	ldrb	r3, [r3, #0]
   1239c:	b2db      	uxtb	r3, r3
   1239e:	62bb      	str	r3, [r7, #40]	; 0x28
   123a0:	2300      	movs	r3, #0
   123a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   123a4:	4c30      	ldr	r4, [pc, #192]	; (12468 <_sercom_get_async_baud_val+0x1b8>)
   123a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   123a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   123aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
   123ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
   123ae:	47a0      	blx	r4
   123b0:	0003      	movs	r3, r0
   123b2:	000c      	movs	r4, r1
   123b4:	65bb      	str	r3, [r7, #88]	; 0x58
   123b6:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   123b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   123ba:	623b      	str	r3, [r7, #32]
   123bc:	2300      	movs	r3, #0
   123be:	627b      	str	r3, [r7, #36]	; 0x24
   123c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   123c2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   123c4:	001a      	movs	r2, r3
   123c6:	0023      	movs	r3, r4
   123c8:	6a38      	ldr	r0, [r7, #32]
   123ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
   123cc:	4c27      	ldr	r4, [pc, #156]	; (1246c <_sercom_get_async_baud_val+0x1bc>)
   123ce:	47a0      	blx	r4
   123d0:	0003      	movs	r3, r0
   123d2:	000c      	movs	r4, r1
   123d4:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   123d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   123d8:	2380      	movs	r3, #128	; 0x80
   123da:	019b      	lsls	r3, r3, #6
   123dc:	429a      	cmp	r2, r3
   123de:	d901      	bls.n	123e4 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   123e0:	2340      	movs	r3, #64	; 0x40
   123e2:	e03d      	b.n	12460 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   123e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   123e6:	61bb      	str	r3, [r7, #24]
   123e8:	2300      	movs	r3, #0
   123ea:	61fb      	str	r3, [r7, #28]
   123ec:	69b9      	ldr	r1, [r7, #24]
   123ee:	69fa      	ldr	r2, [r7, #28]
   123f0:	000b      	movs	r3, r1
   123f2:	0f5b      	lsrs	r3, r3, #29
   123f4:	0010      	movs	r0, r2
   123f6:	00c0      	lsls	r0, r0, #3
   123f8:	63f8      	str	r0, [r7, #60]	; 0x3c
   123fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   123fc:	4318      	orrs	r0, r3
   123fe:	63f8      	str	r0, [r7, #60]	; 0x3c
   12400:	000b      	movs	r3, r1
   12402:	00db      	lsls	r3, r3, #3
   12404:	63bb      	str	r3, [r7, #56]	; 0x38
   12406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12408:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   1240a:	001a      	movs	r2, r3
   1240c:	0023      	movs	r3, r4
   1240e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   12410:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   12412:	4c16      	ldr	r4, [pc, #88]	; (1246c <_sercom_get_async_baud_val+0x1bc>)
   12414:	47a0      	blx	r4
   12416:	0003      	movs	r3, r0
   12418:	000c      	movs	r4, r1
   1241a:	65bb      	str	r3, [r7, #88]	; 0x58
   1241c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   1241e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12420:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   12422:	b2d9      	uxtb	r1, r3
   12424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   12426:	b2db      	uxtb	r3, r3
   12428:	00db      	lsls	r3, r3, #3
   1242a:	b2da      	uxtb	r2, r3
   1242c:	2317      	movs	r3, #23
   1242e:	2040      	movs	r0, #64	; 0x40
   12430:	4684      	mov	ip, r0
   12432:	44bc      	add	ip, r7
   12434:	4463      	add	r3, ip
   12436:	1a8a      	subs	r2, r1, r2
   12438:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   1243a:	2317      	movs	r3, #23
   1243c:	2240      	movs	r2, #64	; 0x40
   1243e:	4694      	mov	ip, r2
   12440:	44bc      	add	ip, r7
   12442:	4463      	add	r3, ip
   12444:	781b      	ldrb	r3, [r3, #0]
   12446:	035b      	lsls	r3, r3, #13
   12448:	001a      	movs	r2, r3
   1244a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1244c:	4313      	orrs	r3, r2
   1244e:	67bb      	str	r3, [r7, #120]	; 0x78
   12450:	2300      	movs	r3, #0
   12452:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   12454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   12456:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   12458:	b29a      	uxth	r2, r3
   1245a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1245c:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   1245e:	2300      	movs	r3, #0
}
   12460:	0018      	movs	r0, r3
   12462:	46bd      	mov	sp, r7
   12464:	b021      	add	sp, #132	; 0x84
   12466:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12468:	00016b55 	.word	0x00016b55
   1246c:	00012155 	.word	0x00012155

00012470 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   12470:	b580      	push	{r7, lr}
   12472:	b084      	sub	sp, #16
   12474:	af00      	add	r7, sp, #0
   12476:	0002      	movs	r2, r0
   12478:	1dfb      	adds	r3, r7, #7
   1247a:	701a      	strb	r2, [r3, #0]
   1247c:	1dbb      	adds	r3, r7, #6
   1247e:	1c0a      	adds	r2, r1, #0
   12480:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   12482:	4b1a      	ldr	r3, [pc, #104]	; (124ec <sercom_set_gclk_generator+0x7c>)
   12484:	781b      	ldrb	r3, [r3, #0]
   12486:	2201      	movs	r2, #1
   12488:	4053      	eors	r3, r2
   1248a:	b2db      	uxtb	r3, r3
   1248c:	2b00      	cmp	r3, #0
   1248e:	d103      	bne.n	12498 <sercom_set_gclk_generator+0x28>
   12490:	1dbb      	adds	r3, r7, #6
   12492:	781b      	ldrb	r3, [r3, #0]
   12494:	2b00      	cmp	r3, #0
   12496:	d01b      	beq.n	124d0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12498:	230c      	movs	r3, #12
   1249a:	18fb      	adds	r3, r7, r3
   1249c:	0018      	movs	r0, r3
   1249e:	4b14      	ldr	r3, [pc, #80]	; (124f0 <sercom_set_gclk_generator+0x80>)
   124a0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   124a2:	230c      	movs	r3, #12
   124a4:	18fb      	adds	r3, r7, r3
   124a6:	1dfa      	adds	r2, r7, #7
   124a8:	7812      	ldrb	r2, [r2, #0]
   124aa:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   124ac:	230c      	movs	r3, #12
   124ae:	18fb      	adds	r3, r7, r3
   124b0:	0019      	movs	r1, r3
   124b2:	2013      	movs	r0, #19
   124b4:	4b0f      	ldr	r3, [pc, #60]	; (124f4 <sercom_set_gclk_generator+0x84>)
   124b6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   124b8:	2013      	movs	r0, #19
   124ba:	4b0f      	ldr	r3, [pc, #60]	; (124f8 <sercom_set_gclk_generator+0x88>)
   124bc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   124be:	4b0b      	ldr	r3, [pc, #44]	; (124ec <sercom_set_gclk_generator+0x7c>)
   124c0:	1dfa      	adds	r2, r7, #7
   124c2:	7812      	ldrb	r2, [r2, #0]
   124c4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   124c6:	4b09      	ldr	r3, [pc, #36]	; (124ec <sercom_set_gclk_generator+0x7c>)
   124c8:	2201      	movs	r2, #1
   124ca:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   124cc:	2300      	movs	r3, #0
   124ce:	e008      	b.n	124e2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   124d0:	4b06      	ldr	r3, [pc, #24]	; (124ec <sercom_set_gclk_generator+0x7c>)
   124d2:	785b      	ldrb	r3, [r3, #1]
   124d4:	1dfa      	adds	r2, r7, #7
   124d6:	7812      	ldrb	r2, [r2, #0]
   124d8:	429a      	cmp	r2, r3
   124da:	d101      	bne.n	124e0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   124dc:	2300      	movs	r3, #0
   124de:	e000      	b.n	124e2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   124e0:	231d      	movs	r3, #29
}
   124e2:	0018      	movs	r0, r3
   124e4:	46bd      	mov	sp, r7
   124e6:	b004      	add	sp, #16
   124e8:	bd80      	pop	{r7, pc}
   124ea:	46c0      	nop			; (mov r8, r8)
   124ec:	200000ec 	.word	0x200000ec
   124f0:	0001213d 	.word	0x0001213d
   124f4:	000150ed 	.word	0x000150ed
   124f8:	00015131 	.word	0x00015131

000124fc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   124fc:	b580      	push	{r7, lr}
   124fe:	b082      	sub	sp, #8
   12500:	af00      	add	r7, sp, #0
   12502:	6078      	str	r0, [r7, #4]
   12504:	000a      	movs	r2, r1
   12506:	1cfb      	adds	r3, r7, #3
   12508:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   1250a:	687b      	ldr	r3, [r7, #4]
   1250c:	4a4d      	ldr	r2, [pc, #308]	; (12644 <_sercom_get_default_pad+0x148>)
   1250e:	4293      	cmp	r3, r2
   12510:	d03f      	beq.n	12592 <_sercom_get_default_pad+0x96>
   12512:	4a4c      	ldr	r2, [pc, #304]	; (12644 <_sercom_get_default_pad+0x148>)
   12514:	4293      	cmp	r3, r2
   12516:	d806      	bhi.n	12526 <_sercom_get_default_pad+0x2a>
   12518:	4a4b      	ldr	r2, [pc, #300]	; (12648 <_sercom_get_default_pad+0x14c>)
   1251a:	4293      	cmp	r3, r2
   1251c:	d00f      	beq.n	1253e <_sercom_get_default_pad+0x42>
   1251e:	4a4b      	ldr	r2, [pc, #300]	; (1264c <_sercom_get_default_pad+0x150>)
   12520:	4293      	cmp	r3, r2
   12522:	d021      	beq.n	12568 <_sercom_get_default_pad+0x6c>
   12524:	e089      	b.n	1263a <_sercom_get_default_pad+0x13e>
   12526:	4a4a      	ldr	r2, [pc, #296]	; (12650 <_sercom_get_default_pad+0x154>)
   12528:	4293      	cmp	r3, r2
   1252a:	d100      	bne.n	1252e <_sercom_get_default_pad+0x32>
   1252c:	e05b      	b.n	125e6 <_sercom_get_default_pad+0xea>
   1252e:	4a49      	ldr	r2, [pc, #292]	; (12654 <_sercom_get_default_pad+0x158>)
   12530:	4293      	cmp	r3, r2
   12532:	d100      	bne.n	12536 <_sercom_get_default_pad+0x3a>
   12534:	e06c      	b.n	12610 <_sercom_get_default_pad+0x114>
   12536:	4a48      	ldr	r2, [pc, #288]	; (12658 <_sercom_get_default_pad+0x15c>)
   12538:	4293      	cmp	r3, r2
   1253a:	d03f      	beq.n	125bc <_sercom_get_default_pad+0xc0>
   1253c:	e07d      	b.n	1263a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   1253e:	1cfb      	adds	r3, r7, #3
   12540:	781b      	ldrb	r3, [r3, #0]
   12542:	2b01      	cmp	r3, #1
   12544:	d00a      	beq.n	1255c <_sercom_get_default_pad+0x60>
   12546:	dc02      	bgt.n	1254e <_sercom_get_default_pad+0x52>
   12548:	2b00      	cmp	r3, #0
   1254a:	d005      	beq.n	12558 <_sercom_get_default_pad+0x5c>
   1254c:	e075      	b.n	1263a <_sercom_get_default_pad+0x13e>
   1254e:	2b02      	cmp	r3, #2
   12550:	d006      	beq.n	12560 <_sercom_get_default_pad+0x64>
   12552:	2b03      	cmp	r3, #3
   12554:	d006      	beq.n	12564 <_sercom_get_default_pad+0x68>
   12556:	e070      	b.n	1263a <_sercom_get_default_pad+0x13e>
   12558:	4b40      	ldr	r3, [pc, #256]	; (1265c <_sercom_get_default_pad+0x160>)
   1255a:	e06f      	b.n	1263c <_sercom_get_default_pad+0x140>
   1255c:	4b40      	ldr	r3, [pc, #256]	; (12660 <_sercom_get_default_pad+0x164>)
   1255e:	e06d      	b.n	1263c <_sercom_get_default_pad+0x140>
   12560:	4b40      	ldr	r3, [pc, #256]	; (12664 <_sercom_get_default_pad+0x168>)
   12562:	e06b      	b.n	1263c <_sercom_get_default_pad+0x140>
   12564:	4b40      	ldr	r3, [pc, #256]	; (12668 <_sercom_get_default_pad+0x16c>)
   12566:	e069      	b.n	1263c <_sercom_get_default_pad+0x140>
   12568:	1cfb      	adds	r3, r7, #3
   1256a:	781b      	ldrb	r3, [r3, #0]
   1256c:	2b01      	cmp	r3, #1
   1256e:	d00a      	beq.n	12586 <_sercom_get_default_pad+0x8a>
   12570:	dc02      	bgt.n	12578 <_sercom_get_default_pad+0x7c>
   12572:	2b00      	cmp	r3, #0
   12574:	d005      	beq.n	12582 <_sercom_get_default_pad+0x86>
   12576:	e060      	b.n	1263a <_sercom_get_default_pad+0x13e>
   12578:	2b02      	cmp	r3, #2
   1257a:	d006      	beq.n	1258a <_sercom_get_default_pad+0x8e>
   1257c:	2b03      	cmp	r3, #3
   1257e:	d006      	beq.n	1258e <_sercom_get_default_pad+0x92>
   12580:	e05b      	b.n	1263a <_sercom_get_default_pad+0x13e>
   12582:	2303      	movs	r3, #3
   12584:	e05a      	b.n	1263c <_sercom_get_default_pad+0x140>
   12586:	4b39      	ldr	r3, [pc, #228]	; (1266c <_sercom_get_default_pad+0x170>)
   12588:	e058      	b.n	1263c <_sercom_get_default_pad+0x140>
   1258a:	4b39      	ldr	r3, [pc, #228]	; (12670 <_sercom_get_default_pad+0x174>)
   1258c:	e056      	b.n	1263c <_sercom_get_default_pad+0x140>
   1258e:	4b39      	ldr	r3, [pc, #228]	; (12674 <_sercom_get_default_pad+0x178>)
   12590:	e054      	b.n	1263c <_sercom_get_default_pad+0x140>
   12592:	1cfb      	adds	r3, r7, #3
   12594:	781b      	ldrb	r3, [r3, #0]
   12596:	2b01      	cmp	r3, #1
   12598:	d00a      	beq.n	125b0 <_sercom_get_default_pad+0xb4>
   1259a:	dc02      	bgt.n	125a2 <_sercom_get_default_pad+0xa6>
   1259c:	2b00      	cmp	r3, #0
   1259e:	d005      	beq.n	125ac <_sercom_get_default_pad+0xb0>
   125a0:	e04b      	b.n	1263a <_sercom_get_default_pad+0x13e>
   125a2:	2b02      	cmp	r3, #2
   125a4:	d006      	beq.n	125b4 <_sercom_get_default_pad+0xb8>
   125a6:	2b03      	cmp	r3, #3
   125a8:	d006      	beq.n	125b8 <_sercom_get_default_pad+0xbc>
   125aa:	e046      	b.n	1263a <_sercom_get_default_pad+0x13e>
   125ac:	4b32      	ldr	r3, [pc, #200]	; (12678 <_sercom_get_default_pad+0x17c>)
   125ae:	e045      	b.n	1263c <_sercom_get_default_pad+0x140>
   125b0:	4b32      	ldr	r3, [pc, #200]	; (1267c <_sercom_get_default_pad+0x180>)
   125b2:	e043      	b.n	1263c <_sercom_get_default_pad+0x140>
   125b4:	4b32      	ldr	r3, [pc, #200]	; (12680 <_sercom_get_default_pad+0x184>)
   125b6:	e041      	b.n	1263c <_sercom_get_default_pad+0x140>
   125b8:	4b32      	ldr	r3, [pc, #200]	; (12684 <_sercom_get_default_pad+0x188>)
   125ba:	e03f      	b.n	1263c <_sercom_get_default_pad+0x140>
   125bc:	1cfb      	adds	r3, r7, #3
   125be:	781b      	ldrb	r3, [r3, #0]
   125c0:	2b01      	cmp	r3, #1
   125c2:	d00a      	beq.n	125da <_sercom_get_default_pad+0xde>
   125c4:	dc02      	bgt.n	125cc <_sercom_get_default_pad+0xd0>
   125c6:	2b00      	cmp	r3, #0
   125c8:	d005      	beq.n	125d6 <_sercom_get_default_pad+0xda>
   125ca:	e036      	b.n	1263a <_sercom_get_default_pad+0x13e>
   125cc:	2b02      	cmp	r3, #2
   125ce:	d006      	beq.n	125de <_sercom_get_default_pad+0xe2>
   125d0:	2b03      	cmp	r3, #3
   125d2:	d006      	beq.n	125e2 <_sercom_get_default_pad+0xe6>
   125d4:	e031      	b.n	1263a <_sercom_get_default_pad+0x13e>
   125d6:	4b2c      	ldr	r3, [pc, #176]	; (12688 <_sercom_get_default_pad+0x18c>)
   125d8:	e030      	b.n	1263c <_sercom_get_default_pad+0x140>
   125da:	4b2c      	ldr	r3, [pc, #176]	; (1268c <_sercom_get_default_pad+0x190>)
   125dc:	e02e      	b.n	1263c <_sercom_get_default_pad+0x140>
   125de:	4b2c      	ldr	r3, [pc, #176]	; (12690 <_sercom_get_default_pad+0x194>)
   125e0:	e02c      	b.n	1263c <_sercom_get_default_pad+0x140>
   125e2:	4b2c      	ldr	r3, [pc, #176]	; (12694 <_sercom_get_default_pad+0x198>)
   125e4:	e02a      	b.n	1263c <_sercom_get_default_pad+0x140>
   125e6:	1cfb      	adds	r3, r7, #3
   125e8:	781b      	ldrb	r3, [r3, #0]
   125ea:	2b01      	cmp	r3, #1
   125ec:	d00a      	beq.n	12604 <_sercom_get_default_pad+0x108>
   125ee:	dc02      	bgt.n	125f6 <_sercom_get_default_pad+0xfa>
   125f0:	2b00      	cmp	r3, #0
   125f2:	d005      	beq.n	12600 <_sercom_get_default_pad+0x104>
   125f4:	e021      	b.n	1263a <_sercom_get_default_pad+0x13e>
   125f6:	2b02      	cmp	r3, #2
   125f8:	d006      	beq.n	12608 <_sercom_get_default_pad+0x10c>
   125fa:	2b03      	cmp	r3, #3
   125fc:	d006      	beq.n	1260c <_sercom_get_default_pad+0x110>
   125fe:	e01c      	b.n	1263a <_sercom_get_default_pad+0x13e>
   12600:	4b25      	ldr	r3, [pc, #148]	; (12698 <_sercom_get_default_pad+0x19c>)
   12602:	e01b      	b.n	1263c <_sercom_get_default_pad+0x140>
   12604:	4b25      	ldr	r3, [pc, #148]	; (1269c <_sercom_get_default_pad+0x1a0>)
   12606:	e019      	b.n	1263c <_sercom_get_default_pad+0x140>
   12608:	4b25      	ldr	r3, [pc, #148]	; (126a0 <_sercom_get_default_pad+0x1a4>)
   1260a:	e017      	b.n	1263c <_sercom_get_default_pad+0x140>
   1260c:	4b25      	ldr	r3, [pc, #148]	; (126a4 <_sercom_get_default_pad+0x1a8>)
   1260e:	e015      	b.n	1263c <_sercom_get_default_pad+0x140>
   12610:	1cfb      	adds	r3, r7, #3
   12612:	781b      	ldrb	r3, [r3, #0]
   12614:	2b01      	cmp	r3, #1
   12616:	d00a      	beq.n	1262e <_sercom_get_default_pad+0x132>
   12618:	dc02      	bgt.n	12620 <_sercom_get_default_pad+0x124>
   1261a:	2b00      	cmp	r3, #0
   1261c:	d005      	beq.n	1262a <_sercom_get_default_pad+0x12e>
   1261e:	e00c      	b.n	1263a <_sercom_get_default_pad+0x13e>
   12620:	2b02      	cmp	r3, #2
   12622:	d006      	beq.n	12632 <_sercom_get_default_pad+0x136>
   12624:	2b03      	cmp	r3, #3
   12626:	d006      	beq.n	12636 <_sercom_get_default_pad+0x13a>
   12628:	e007      	b.n	1263a <_sercom_get_default_pad+0x13e>
   1262a:	4b1f      	ldr	r3, [pc, #124]	; (126a8 <_sercom_get_default_pad+0x1ac>)
   1262c:	e006      	b.n	1263c <_sercom_get_default_pad+0x140>
   1262e:	4b1f      	ldr	r3, [pc, #124]	; (126ac <_sercom_get_default_pad+0x1b0>)
   12630:	e004      	b.n	1263c <_sercom_get_default_pad+0x140>
   12632:	4b1f      	ldr	r3, [pc, #124]	; (126b0 <_sercom_get_default_pad+0x1b4>)
   12634:	e002      	b.n	1263c <_sercom_get_default_pad+0x140>
   12636:	4b1f      	ldr	r3, [pc, #124]	; (126b4 <_sercom_get_default_pad+0x1b8>)
   12638:	e000      	b.n	1263c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   1263a:	2300      	movs	r3, #0
}
   1263c:	0018      	movs	r0, r3
   1263e:	46bd      	mov	sp, r7
   12640:	b002      	add	sp, #8
   12642:	bd80      	pop	{r7, pc}
   12644:	42001000 	.word	0x42001000
   12648:	42000800 	.word	0x42000800
   1264c:	42000c00 	.word	0x42000c00
   12650:	42001800 	.word	0x42001800
   12654:	42001c00 	.word	0x42001c00
   12658:	42001400 	.word	0x42001400
   1265c:	00040003 	.word	0x00040003
   12660:	00050003 	.word	0x00050003
   12664:	00060003 	.word	0x00060003
   12668:	00070003 	.word	0x00070003
   1266c:	00010003 	.word	0x00010003
   12670:	001e0003 	.word	0x001e0003
   12674:	001f0003 	.word	0x001f0003
   12678:	00080003 	.word	0x00080003
   1267c:	00090003 	.word	0x00090003
   12680:	000a0003 	.word	0x000a0003
   12684:	000b0003 	.word	0x000b0003
   12688:	00100003 	.word	0x00100003
   1268c:	00110003 	.word	0x00110003
   12690:	00120003 	.word	0x00120003
   12694:	00130003 	.word	0x00130003
   12698:	000c0003 	.word	0x000c0003
   1269c:	000d0003 	.word	0x000d0003
   126a0:	000e0003 	.word	0x000e0003
   126a4:	000f0003 	.word	0x000f0003
   126a8:	00160003 	.word	0x00160003
   126ac:	00170003 	.word	0x00170003
   126b0:	00180003 	.word	0x00180003
   126b4:	00190003 	.word	0x00190003

000126b8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   126b8:	b590      	push	{r4, r7, lr}
   126ba:	b08b      	sub	sp, #44	; 0x2c
   126bc:	af00      	add	r7, sp, #0
   126be:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   126c0:	230c      	movs	r3, #12
   126c2:	18fb      	adds	r3, r7, r3
   126c4:	4a0f      	ldr	r2, [pc, #60]	; (12704 <_sercom_get_sercom_inst_index+0x4c>)
   126c6:	ca13      	ldmia	r2!, {r0, r1, r4}
   126c8:	c313      	stmia	r3!, {r0, r1, r4}
   126ca:	ca13      	ldmia	r2!, {r0, r1, r4}
   126cc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   126ce:	2300      	movs	r3, #0
   126d0:	627b      	str	r3, [r7, #36]	; 0x24
   126d2:	e00e      	b.n	126f2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   126d4:	230c      	movs	r3, #12
   126d6:	18fb      	adds	r3, r7, r3
   126d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   126da:	0092      	lsls	r2, r2, #2
   126dc:	58d3      	ldr	r3, [r2, r3]
   126de:	1e1a      	subs	r2, r3, #0
   126e0:	687b      	ldr	r3, [r7, #4]
   126e2:	429a      	cmp	r2, r3
   126e4:	d102      	bne.n	126ec <_sercom_get_sercom_inst_index+0x34>
			return i;
   126e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   126e8:	b2db      	uxtb	r3, r3
   126ea:	e006      	b.n	126fa <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   126ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   126ee:	3301      	adds	r3, #1
   126f0:	627b      	str	r3, [r7, #36]	; 0x24
   126f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   126f4:	2b05      	cmp	r3, #5
   126f6:	d9ed      	bls.n	126d4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   126f8:	2300      	movs	r3, #0
}
   126fa:	0018      	movs	r0, r3
   126fc:	46bd      	mov	sp, r7
   126fe:	b00b      	add	sp, #44	; 0x2c
   12700:	bd90      	pop	{r4, r7, pc}
   12702:	46c0      	nop			; (mov r8, r8)
   12704:	00019714 	.word	0x00019714

00012708 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   12708:	b580      	push	{r7, lr}
   1270a:	b082      	sub	sp, #8
   1270c:	af00      	add	r7, sp, #0
   1270e:	0002      	movs	r2, r0
   12710:	1dfb      	adds	r3, r7, #7
   12712:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   12714:	46c0      	nop			; (mov r8, r8)
   12716:	46bd      	mov	sp, r7
   12718:	b002      	add	sp, #8
   1271a:	bd80      	pop	{r7, pc}

0001271c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   1271c:	b580      	push	{r7, lr}
   1271e:	b084      	sub	sp, #16
   12720:	af00      	add	r7, sp, #0
   12722:	0002      	movs	r2, r0
   12724:	6039      	str	r1, [r7, #0]
   12726:	1dfb      	adds	r3, r7, #7
   12728:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   1272a:	4b13      	ldr	r3, [pc, #76]	; (12778 <_sercom_set_handler+0x5c>)
   1272c:	781b      	ldrb	r3, [r3, #0]
   1272e:	2201      	movs	r2, #1
   12730:	4053      	eors	r3, r2
   12732:	b2db      	uxtb	r3, r3
   12734:	2b00      	cmp	r3, #0
   12736:	d015      	beq.n	12764 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   12738:	2300      	movs	r3, #0
   1273a:	60fb      	str	r3, [r7, #12]
   1273c:	e00c      	b.n	12758 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   1273e:	4b0f      	ldr	r3, [pc, #60]	; (1277c <_sercom_set_handler+0x60>)
   12740:	68fa      	ldr	r2, [r7, #12]
   12742:	0092      	lsls	r2, r2, #2
   12744:	490e      	ldr	r1, [pc, #56]	; (12780 <_sercom_set_handler+0x64>)
   12746:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   12748:	4b0e      	ldr	r3, [pc, #56]	; (12784 <_sercom_set_handler+0x68>)
   1274a:	68fa      	ldr	r2, [r7, #12]
   1274c:	0092      	lsls	r2, r2, #2
   1274e:	2100      	movs	r1, #0
   12750:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   12752:	68fb      	ldr	r3, [r7, #12]
   12754:	3301      	adds	r3, #1
   12756:	60fb      	str	r3, [r7, #12]
   12758:	68fb      	ldr	r3, [r7, #12]
   1275a:	2b05      	cmp	r3, #5
   1275c:	d9ef      	bls.n	1273e <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
   1275e:	4b06      	ldr	r3, [pc, #24]	; (12778 <_sercom_set_handler+0x5c>)
   12760:	2201      	movs	r2, #1
   12762:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   12764:	1dfb      	adds	r3, r7, #7
   12766:	781a      	ldrb	r2, [r3, #0]
   12768:	4b04      	ldr	r3, [pc, #16]	; (1277c <_sercom_set_handler+0x60>)
   1276a:	0092      	lsls	r2, r2, #2
   1276c:	6839      	ldr	r1, [r7, #0]
   1276e:	50d1      	str	r1, [r2, r3]
}
   12770:	46c0      	nop			; (mov r8, r8)
   12772:	46bd      	mov	sp, r7
   12774:	b004      	add	sp, #16
   12776:	bd80      	pop	{r7, pc}
   12778:	200000ee 	.word	0x200000ee
   1277c:	200000f0 	.word	0x200000f0
   12780:	00012709 	.word	0x00012709
   12784:	200003b4 	.word	0x200003b4

00012788 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   12788:	b590      	push	{r4, r7, lr}
   1278a:	b085      	sub	sp, #20
   1278c:	af00      	add	r7, sp, #0
   1278e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   12790:	2308      	movs	r3, #8
   12792:	18fa      	adds	r2, r7, r3
   12794:	4b0c      	ldr	r3, [pc, #48]	; (127c8 <_sercom_get_interrupt_vector+0x40>)
   12796:	0010      	movs	r0, r2
   12798:	0019      	movs	r1, r3
   1279a:	2306      	movs	r3, #6
   1279c:	001a      	movs	r2, r3
   1279e:	4b0b      	ldr	r3, [pc, #44]	; (127cc <_sercom_get_interrupt_vector+0x44>)
   127a0:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   127a2:	230f      	movs	r3, #15
   127a4:	18fc      	adds	r4, r7, r3
   127a6:	687b      	ldr	r3, [r7, #4]
   127a8:	0018      	movs	r0, r3
   127aa:	4b09      	ldr	r3, [pc, #36]	; (127d0 <_sercom_get_interrupt_vector+0x48>)
   127ac:	4798      	blx	r3
   127ae:	0003      	movs	r3, r0
   127b0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   127b2:	230f      	movs	r3, #15
   127b4:	18fb      	adds	r3, r7, r3
   127b6:	781b      	ldrb	r3, [r3, #0]
   127b8:	2208      	movs	r2, #8
   127ba:	18ba      	adds	r2, r7, r2
   127bc:	5cd3      	ldrb	r3, [r2, r3]
   127be:	b25b      	sxtb	r3, r3
}
   127c0:	0018      	movs	r0, r3
   127c2:	46bd      	mov	sp, r7
   127c4:	b005      	add	sp, #20
   127c6:	bd90      	pop	{r4, r7, pc}
   127c8:	0001972c 	.word	0x0001972c
   127cc:	00016c2d 	.word	0x00016c2d
   127d0:	000126b9 	.word	0x000126b9

000127d4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   127d4:	b580      	push	{r7, lr}
   127d6:	af00      	add	r7, sp, #0
   127d8:	4b03      	ldr	r3, [pc, #12]	; (127e8 <SERCOM0_Handler+0x14>)
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	2000      	movs	r0, #0
   127de:	4798      	blx	r3
   127e0:	46c0      	nop			; (mov r8, r8)
   127e2:	46bd      	mov	sp, r7
   127e4:	bd80      	pop	{r7, pc}
   127e6:	46c0      	nop			; (mov r8, r8)
   127e8:	200000f0 	.word	0x200000f0

000127ec <SERCOM1_Handler>:
   127ec:	b580      	push	{r7, lr}
   127ee:	af00      	add	r7, sp, #0
   127f0:	4b03      	ldr	r3, [pc, #12]	; (12800 <SERCOM1_Handler+0x14>)
   127f2:	685b      	ldr	r3, [r3, #4]
   127f4:	2001      	movs	r0, #1
   127f6:	4798      	blx	r3
   127f8:	46c0      	nop			; (mov r8, r8)
   127fa:	46bd      	mov	sp, r7
   127fc:	bd80      	pop	{r7, pc}
   127fe:	46c0      	nop			; (mov r8, r8)
   12800:	200000f0 	.word	0x200000f0

00012804 <SERCOM2_Handler>:
   12804:	b580      	push	{r7, lr}
   12806:	af00      	add	r7, sp, #0
   12808:	4b03      	ldr	r3, [pc, #12]	; (12818 <SERCOM2_Handler+0x14>)
   1280a:	689b      	ldr	r3, [r3, #8]
   1280c:	2002      	movs	r0, #2
   1280e:	4798      	blx	r3
   12810:	46c0      	nop			; (mov r8, r8)
   12812:	46bd      	mov	sp, r7
   12814:	bd80      	pop	{r7, pc}
   12816:	46c0      	nop			; (mov r8, r8)
   12818:	200000f0 	.word	0x200000f0

0001281c <SERCOM3_Handler>:
   1281c:	b580      	push	{r7, lr}
   1281e:	af00      	add	r7, sp, #0
   12820:	4b03      	ldr	r3, [pc, #12]	; (12830 <SERCOM3_Handler+0x14>)
   12822:	68db      	ldr	r3, [r3, #12]
   12824:	2003      	movs	r0, #3
   12826:	4798      	blx	r3
   12828:	46c0      	nop			; (mov r8, r8)
   1282a:	46bd      	mov	sp, r7
   1282c:	bd80      	pop	{r7, pc}
   1282e:	46c0      	nop			; (mov r8, r8)
   12830:	200000f0 	.word	0x200000f0

00012834 <SERCOM4_Handler>:
   12834:	b580      	push	{r7, lr}
   12836:	af00      	add	r7, sp, #0
   12838:	4b03      	ldr	r3, [pc, #12]	; (12848 <SERCOM4_Handler+0x14>)
   1283a:	691b      	ldr	r3, [r3, #16]
   1283c:	2004      	movs	r0, #4
   1283e:	4798      	blx	r3
   12840:	46c0      	nop			; (mov r8, r8)
   12842:	46bd      	mov	sp, r7
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	200000f0 	.word	0x200000f0

0001284c <SERCOM5_Handler>:
   1284c:	b580      	push	{r7, lr}
   1284e:	af00      	add	r7, sp, #0
   12850:	4b03      	ldr	r3, [pc, #12]	; (12860 <SERCOM5_Handler+0x14>)
   12852:	695b      	ldr	r3, [r3, #20]
   12854:	2005      	movs	r0, #5
   12856:	4798      	blx	r3
   12858:	46c0      	nop			; (mov r8, r8)
   1285a:	46bd      	mov	sp, r7
   1285c:	bd80      	pop	{r7, pc}
   1285e:	46c0      	nop			; (mov r8, r8)
   12860:	200000f0 	.word	0x200000f0

00012864 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   12864:	b580      	push	{r7, lr}
   12866:	b082      	sub	sp, #8
   12868:	af00      	add	r7, sp, #0
   1286a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1286c:	687b      	ldr	r3, [r7, #4]
   1286e:	2280      	movs	r2, #128	; 0x80
   12870:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12872:	687b      	ldr	r3, [r7, #4]
   12874:	2200      	movs	r2, #0
   12876:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   12878:	687b      	ldr	r3, [r7, #4]
   1287a:	2201      	movs	r2, #1
   1287c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1287e:	687b      	ldr	r3, [r7, #4]
   12880:	2200      	movs	r2, #0
   12882:	70da      	strb	r2, [r3, #3]
}
   12884:	46c0      	nop			; (mov r8, r8)
   12886:	46bd      	mov	sp, r7
   12888:	b002      	add	sp, #8
   1288a:	bd80      	pop	{r7, pc}

0001288c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   1288c:	b580      	push	{r7, lr}
   1288e:	b084      	sub	sp, #16
   12890:	af00      	add	r7, sp, #0
   12892:	0002      	movs	r2, r0
   12894:	1dfb      	adds	r3, r7, #7
   12896:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   12898:	230f      	movs	r3, #15
   1289a:	18fb      	adds	r3, r7, r3
   1289c:	1dfa      	adds	r2, r7, #7
   1289e:	7812      	ldrb	r2, [r2, #0]
   128a0:	09d2      	lsrs	r2, r2, #7
   128a2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   128a4:	230e      	movs	r3, #14
   128a6:	18fb      	adds	r3, r7, r3
   128a8:	1dfa      	adds	r2, r7, #7
   128aa:	7812      	ldrb	r2, [r2, #0]
   128ac:	0952      	lsrs	r2, r2, #5
   128ae:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   128b0:	4b0d      	ldr	r3, [pc, #52]	; (128e8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   128b2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   128b4:	230f      	movs	r3, #15
   128b6:	18fb      	adds	r3, r7, r3
   128b8:	781b      	ldrb	r3, [r3, #0]
   128ba:	2b00      	cmp	r3, #0
   128bc:	d10f      	bne.n	128de <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   128be:	230f      	movs	r3, #15
   128c0:	18fb      	adds	r3, r7, r3
   128c2:	781b      	ldrb	r3, [r3, #0]
   128c4:	009b      	lsls	r3, r3, #2
   128c6:	2210      	movs	r2, #16
   128c8:	4694      	mov	ip, r2
   128ca:	44bc      	add	ip, r7
   128cc:	4463      	add	r3, ip
   128ce:	3b08      	subs	r3, #8
   128d0:	681a      	ldr	r2, [r3, #0]
   128d2:	230e      	movs	r3, #14
   128d4:	18fb      	adds	r3, r7, r3
   128d6:	781b      	ldrb	r3, [r3, #0]
   128d8:	01db      	lsls	r3, r3, #7
   128da:	18d3      	adds	r3, r2, r3
   128dc:	e000      	b.n	128e0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   128de:	2300      	movs	r3, #0
	}
}
   128e0:	0018      	movs	r0, r3
   128e2:	46bd      	mov	sp, r7
   128e4:	b004      	add	sp, #16
   128e6:	bd80      	pop	{r7, pc}
   128e8:	41004400 	.word	0x41004400

000128ec <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   128ec:	b580      	push	{r7, lr}
   128ee:	b082      	sub	sp, #8
   128f0:	af00      	add	r7, sp, #0
   128f2:	0002      	movs	r2, r0
   128f4:	1dfb      	adds	r3, r7, #7
   128f6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   128f8:	1dfb      	adds	r3, r7, #7
   128fa:	781b      	ldrb	r3, [r3, #0]
   128fc:	0018      	movs	r0, r3
   128fe:	4b03      	ldr	r3, [pc, #12]	; (1290c <port_get_group_from_gpio_pin+0x20>)
   12900:	4798      	blx	r3
   12902:	0003      	movs	r3, r0
}
   12904:	0018      	movs	r0, r3
   12906:	46bd      	mov	sp, r7
   12908:	b002      	add	sp, #8
   1290a:	bd80      	pop	{r7, pc}
   1290c:	0001288d 	.word	0x0001288d

00012910 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   12910:	b580      	push	{r7, lr}
   12912:	b084      	sub	sp, #16
   12914:	af00      	add	r7, sp, #0
   12916:	0002      	movs	r2, r0
   12918:	1dfb      	adds	r3, r7, #7
   1291a:	701a      	strb	r2, [r3, #0]
   1291c:	1dbb      	adds	r3, r7, #6
   1291e:	1c0a      	adds	r2, r1, #0
   12920:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   12922:	1dfb      	adds	r3, r7, #7
   12924:	781b      	ldrb	r3, [r3, #0]
   12926:	0018      	movs	r0, r3
   12928:	4b0d      	ldr	r3, [pc, #52]	; (12960 <port_pin_set_output_level+0x50>)
   1292a:	4798      	blx	r3
   1292c:	0003      	movs	r3, r0
   1292e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	221f      	movs	r2, #31
   12936:	4013      	ands	r3, r2
   12938:	2201      	movs	r2, #1
   1293a:	409a      	lsls	r2, r3
   1293c:	0013      	movs	r3, r2
   1293e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   12940:	1dbb      	adds	r3, r7, #6
   12942:	781b      	ldrb	r3, [r3, #0]
   12944:	2b00      	cmp	r3, #0
   12946:	d003      	beq.n	12950 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   12948:	68fb      	ldr	r3, [r7, #12]
   1294a:	68ba      	ldr	r2, [r7, #8]
   1294c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   1294e:	e002      	b.n	12956 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
   12950:	68fb      	ldr	r3, [r7, #12]
   12952:	68ba      	ldr	r2, [r7, #8]
   12954:	615a      	str	r2, [r3, #20]
	}
}
   12956:	46c0      	nop			; (mov r8, r8)
   12958:	46bd      	mov	sp, r7
   1295a:	b004      	add	sp, #16
   1295c:	bd80      	pop	{r7, pc}
   1295e:	46c0      	nop			; (mov r8, r8)
   12960:	000128ed 	.word	0x000128ed

00012964 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   12964:	b580      	push	{r7, lr}
   12966:	b082      	sub	sp, #8
   12968:	af00      	add	r7, sp, #0
   1296a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	2200      	movs	r2, #0
   12970:	701a      	strb	r2, [r3, #0]
}
   12972:	46c0      	nop			; (mov r8, r8)
   12974:	46bd      	mov	sp, r7
   12976:	b002      	add	sp, #8
   12978:	bd80      	pop	{r7, pc}
   1297a:	46c0      	nop			; (mov r8, r8)

0001297c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1297c:	b580      	push	{r7, lr}
   1297e:	b082      	sub	sp, #8
   12980:	af00      	add	r7, sp, #0
   12982:	0002      	movs	r2, r0
   12984:	6039      	str	r1, [r7, #0]
   12986:	1dfb      	adds	r3, r7, #7
   12988:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1298a:	1dfb      	adds	r3, r7, #7
   1298c:	781b      	ldrb	r3, [r3, #0]
   1298e:	2b01      	cmp	r3, #1
   12990:	d00a      	beq.n	129a8 <system_apb_clock_set_mask+0x2c>
   12992:	2b02      	cmp	r3, #2
   12994:	d00f      	beq.n	129b6 <system_apb_clock_set_mask+0x3a>
   12996:	2b00      	cmp	r3, #0
   12998:	d114      	bne.n	129c4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1299a:	4b0e      	ldr	r3, [pc, #56]	; (129d4 <system_apb_clock_set_mask+0x58>)
   1299c:	4a0d      	ldr	r2, [pc, #52]	; (129d4 <system_apb_clock_set_mask+0x58>)
   1299e:	6991      	ldr	r1, [r2, #24]
   129a0:	683a      	ldr	r2, [r7, #0]
   129a2:	430a      	orrs	r2, r1
   129a4:	619a      	str	r2, [r3, #24]
			break;
   129a6:	e00f      	b.n	129c8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   129a8:	4b0a      	ldr	r3, [pc, #40]	; (129d4 <system_apb_clock_set_mask+0x58>)
   129aa:	4a0a      	ldr	r2, [pc, #40]	; (129d4 <system_apb_clock_set_mask+0x58>)
   129ac:	69d1      	ldr	r1, [r2, #28]
   129ae:	683a      	ldr	r2, [r7, #0]
   129b0:	430a      	orrs	r2, r1
   129b2:	61da      	str	r2, [r3, #28]
			break;
   129b4:	e008      	b.n	129c8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   129b6:	4b07      	ldr	r3, [pc, #28]	; (129d4 <system_apb_clock_set_mask+0x58>)
   129b8:	4a06      	ldr	r2, [pc, #24]	; (129d4 <system_apb_clock_set_mask+0x58>)
   129ba:	6a11      	ldr	r1, [r2, #32]
   129bc:	683a      	ldr	r2, [r7, #0]
   129be:	430a      	orrs	r2, r1
   129c0:	621a      	str	r2, [r3, #32]
			break;
   129c2:	e001      	b.n	129c8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   129c4:	2317      	movs	r3, #23
   129c6:	e000      	b.n	129ca <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   129c8:	2300      	movs	r3, #0
}
   129ca:	0018      	movs	r0, r3
   129cc:	46bd      	mov	sp, r7
   129ce:	b002      	add	sp, #8
   129d0:	bd80      	pop	{r7, pc}
   129d2:	46c0      	nop			; (mov r8, r8)
   129d4:	40000400 	.word	0x40000400

000129d8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   129d8:	b580      	push	{r7, lr}
   129da:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   129dc:	4b05      	ldr	r3, [pc, #20]	; (129f4 <system_is_debugger_present+0x1c>)
   129de:	789b      	ldrb	r3, [r3, #2]
   129e0:	b2db      	uxtb	r3, r3
   129e2:	001a      	movs	r2, r3
   129e4:	2302      	movs	r3, #2
   129e6:	4013      	ands	r3, r2
   129e8:	1e5a      	subs	r2, r3, #1
   129ea:	4193      	sbcs	r3, r2
   129ec:	b2db      	uxtb	r3, r3
}
   129ee:	0018      	movs	r0, r3
   129f0:	46bd      	mov	sp, r7
   129f2:	bd80      	pop	{r7, pc}
   129f4:	41002000 	.word	0x41002000

000129f8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   129f8:	b580      	push	{r7, lr}
   129fa:	b084      	sub	sp, #16
   129fc:	af00      	add	r7, sp, #0
   129fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	681b      	ldr	r3, [r3, #0]
   12a04:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   12a06:	68fb      	ldr	r3, [r7, #12]
   12a08:	7e1b      	ldrb	r3, [r3, #24]
   12a0a:	b2db      	uxtb	r3, r3
   12a0c:	001a      	movs	r2, r3
   12a0e:	2302      	movs	r3, #2
   12a10:	4013      	ands	r3, r2
   12a12:	1e5a      	subs	r2, r3, #1
   12a14:	4193      	sbcs	r3, r2
   12a16:	b2db      	uxtb	r3, r3
}
   12a18:	0018      	movs	r0, r3
   12a1a:	46bd      	mov	sp, r7
   12a1c:	b004      	add	sp, #16
   12a1e:	bd80      	pop	{r7, pc}

00012a20 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   12a20:	b580      	push	{r7, lr}
   12a22:	b084      	sub	sp, #16
   12a24:	af00      	add	r7, sp, #0
   12a26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12a28:	687b      	ldr	r3, [r7, #4]
   12a2a:	681b      	ldr	r3, [r3, #0]
   12a2c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   12a2e:	68fb      	ldr	r3, [r7, #12]
   12a30:	7e1b      	ldrb	r3, [r3, #24]
   12a32:	b2db      	uxtb	r3, r3
   12a34:	001a      	movs	r2, r3
   12a36:	2301      	movs	r3, #1
   12a38:	4013      	ands	r3, r2
   12a3a:	1e5a      	subs	r2, r3, #1
   12a3c:	4193      	sbcs	r3, r2
   12a3e:	b2db      	uxtb	r3, r3
}
   12a40:	0018      	movs	r0, r3
   12a42:	46bd      	mov	sp, r7
   12a44:	b004      	add	sp, #16
   12a46:	bd80      	pop	{r7, pc}

00012a48 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   12a48:	b580      	push	{r7, lr}
   12a4a:	b084      	sub	sp, #16
   12a4c:	af00      	add	r7, sp, #0
   12a4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12a50:	687b      	ldr	r3, [r7, #4]
   12a52:	681b      	ldr	r3, [r3, #0]
   12a54:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   12a56:	68fb      	ldr	r3, [r7, #12]
   12a58:	7e1b      	ldrb	r3, [r3, #24]
   12a5a:	b2db      	uxtb	r3, r3
   12a5c:	001a      	movs	r2, r3
   12a5e:	2304      	movs	r3, #4
   12a60:	4013      	ands	r3, r2
   12a62:	1e5a      	subs	r2, r3, #1
   12a64:	4193      	sbcs	r3, r2
   12a66:	b2db      	uxtb	r3, r3
}
   12a68:	0018      	movs	r0, r3
   12a6a:	46bd      	mov	sp, r7
   12a6c:	b004      	add	sp, #16
   12a6e:	bd80      	pop	{r7, pc}

00012a70 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   12a70:	b580      	push	{r7, lr}
   12a72:	b084      	sub	sp, #16
   12a74:	af00      	add	r7, sp, #0
   12a76:	6078      	str	r0, [r7, #4]
   12a78:	000a      	movs	r2, r1
   12a7a:	1cbb      	adds	r3, r7, #2
   12a7c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12a7e:	687b      	ldr	r3, [r7, #4]
   12a80:	681b      	ldr	r3, [r3, #0]
   12a82:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   12a84:	687b      	ldr	r3, [r7, #4]
   12a86:	0018      	movs	r0, r3
   12a88:	4b0a      	ldr	r3, [pc, #40]	; (12ab4 <spi_write+0x44>)
   12a8a:	4798      	blx	r3
   12a8c:	0003      	movs	r3, r0
   12a8e:	001a      	movs	r2, r3
   12a90:	2301      	movs	r3, #1
   12a92:	4053      	eors	r3, r2
   12a94:	b2db      	uxtb	r3, r3
   12a96:	2b00      	cmp	r3, #0
   12a98:	d001      	beq.n	12a9e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   12a9a:	2305      	movs	r3, #5
   12a9c:	e006      	b.n	12aac <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   12a9e:	1cbb      	adds	r3, r7, #2
   12aa0:	881b      	ldrh	r3, [r3, #0]
   12aa2:	05db      	lsls	r3, r3, #23
   12aa4:	0dda      	lsrs	r2, r3, #23
   12aa6:	68fb      	ldr	r3, [r7, #12]
   12aa8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   12aaa:	2300      	movs	r3, #0
}
   12aac:	0018      	movs	r0, r3
   12aae:	46bd      	mov	sp, r7
   12ab0:	b004      	add	sp, #16
   12ab2:	bd80      	pop	{r7, pc}
   12ab4:	00012a21 	.word	0x00012a21

00012ab8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   12ab8:	b580      	push	{r7, lr}
   12aba:	b084      	sub	sp, #16
   12abc:	af00      	add	r7, sp, #0
   12abe:	6078      	str	r0, [r7, #4]
   12ac0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12ac2:	687b      	ldr	r3, [r7, #4]
   12ac4:	681b      	ldr	r3, [r3, #0]
   12ac6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   12ac8:	687b      	ldr	r3, [r7, #4]
   12aca:	0018      	movs	r0, r3
   12acc:	4b1b      	ldr	r3, [pc, #108]	; (12b3c <spi_read+0x84>)
   12ace:	4798      	blx	r3
   12ad0:	0003      	movs	r3, r0
   12ad2:	001a      	movs	r2, r3
   12ad4:	2301      	movs	r3, #1
   12ad6:	4053      	eors	r3, r2
   12ad8:	b2db      	uxtb	r3, r3
   12ada:	2b00      	cmp	r3, #0
   12adc:	d001      	beq.n	12ae2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   12ade:	2310      	movs	r3, #16
   12ae0:	e027      	b.n	12b32 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   12ae2:	230f      	movs	r3, #15
   12ae4:	18fb      	adds	r3, r7, r3
   12ae6:	2200      	movs	r2, #0
   12ae8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   12aea:	68bb      	ldr	r3, [r7, #8]
   12aec:	8b5b      	ldrh	r3, [r3, #26]
   12aee:	b29b      	uxth	r3, r3
   12af0:	001a      	movs	r2, r3
   12af2:	2304      	movs	r3, #4
   12af4:	4013      	ands	r3, r2
   12af6:	d006      	beq.n	12b06 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   12af8:	230f      	movs	r3, #15
   12afa:	18fb      	adds	r3, r7, r3
   12afc:	221e      	movs	r2, #30
   12afe:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   12b00:	68bb      	ldr	r3, [r7, #8]
   12b02:	2204      	movs	r2, #4
   12b04:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   12b06:	687b      	ldr	r3, [r7, #4]
   12b08:	799b      	ldrb	r3, [r3, #6]
   12b0a:	2b01      	cmp	r3, #1
   12b0c:	d108      	bne.n	12b20 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   12b0e:	68bb      	ldr	r3, [r7, #8]
   12b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b12:	b29b      	uxth	r3, r3
   12b14:	05db      	lsls	r3, r3, #23
   12b16:	0ddb      	lsrs	r3, r3, #23
   12b18:	b29a      	uxth	r2, r3
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	801a      	strh	r2, [r3, #0]
   12b1e:	e005      	b.n	12b2c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   12b20:	68bb      	ldr	r3, [r7, #8]
   12b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b24:	b2db      	uxtb	r3, r3
   12b26:	b29a      	uxth	r2, r3
   12b28:	683b      	ldr	r3, [r7, #0]
   12b2a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   12b2c:	230f      	movs	r3, #15
   12b2e:	18fb      	adds	r3, r7, r3
   12b30:	781b      	ldrb	r3, [r3, #0]
}
   12b32:	0018      	movs	r0, r3
   12b34:	46bd      	mov	sp, r7
   12b36:	b004      	add	sp, #16
   12b38:	bd80      	pop	{r7, pc}
   12b3a:	46c0      	nop			; (mov r8, r8)
   12b3c:	00012a49 	.word	0x00012a49

00012b40 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
   12b40:	b580      	push	{r7, lr}
   12b42:	b084      	sub	sp, #16
   12b44:	af00      	add	r7, sp, #0
   12b46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12b48:	687b      	ldr	r3, [r7, #4]
   12b4a:	681b      	ldr	r3, [r3, #0]
   12b4c:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   12b4e:	68fb      	ldr	r3, [r7, #12]
   12b50:	2202      	movs	r2, #2
   12b52:	761a      	strb	r2, [r3, #24]
}
   12b54:	46c0      	nop			; (mov r8, r8)
   12b56:	46bd      	mov	sp, r7
   12b58:	b004      	add	sp, #16
   12b5a:	bd80      	pop	{r7, pc}

00012b5c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   12b5c:	b590      	push	{r4, r7, lr}
   12b5e:	b093      	sub	sp, #76	; 0x4c
   12b60:	af00      	add	r7, sp, #0
   12b62:	6078      	str	r0, [r7, #4]
   12b64:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12b66:	687b      	ldr	r3, [r7, #4]
   12b68:	681b      	ldr	r3, [r3, #0]
   12b6a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   12b6c:	687b      	ldr	r3, [r7, #4]
   12b6e:	681b      	ldr	r3, [r3, #0]
   12b70:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   12b72:	231c      	movs	r3, #28
   12b74:	18fb      	adds	r3, r7, r3
   12b76:	0018      	movs	r0, r3
   12b78:	4b85      	ldr	r3, [pc, #532]	; (12d90 <_spi_set_config+0x234>)
   12b7a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   12b7c:	231c      	movs	r3, #28
   12b7e:	18fb      	adds	r3, r7, r3
   12b80:	2200      	movs	r2, #0
   12b82:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   12b84:	683b      	ldr	r3, [r7, #0]
   12b86:	781b      	ldrb	r3, [r3, #0]
   12b88:	2b00      	cmp	r3, #0
   12b8a:	d103      	bne.n	12b94 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   12b8c:	231c      	movs	r3, #28
   12b8e:	18fb      	adds	r3, r7, r3
   12b90:	2200      	movs	r2, #0
   12b92:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   12b94:	683b      	ldr	r3, [r7, #0]
   12b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
   12b98:	230c      	movs	r3, #12
   12b9a:	18fb      	adds	r3, r7, r3
   12b9c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   12b9e:	683b      	ldr	r3, [r7, #0]
   12ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
   12ba2:	230c      	movs	r3, #12
   12ba4:	18fb      	adds	r3, r7, r3
   12ba6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   12ba8:	683b      	ldr	r3, [r7, #0]
   12baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
   12bac:	230c      	movs	r3, #12
   12bae:	18fb      	adds	r3, r7, r3
   12bb0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   12bb2:	683b      	ldr	r3, [r7, #0]
   12bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
   12bb6:	230c      	movs	r3, #12
   12bb8:	18fb      	adds	r3, r7, r3
   12bba:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   12bbc:	2347      	movs	r3, #71	; 0x47
   12bbe:	18fb      	adds	r3, r7, r3
   12bc0:	2200      	movs	r2, #0
   12bc2:	701a      	strb	r2, [r3, #0]
   12bc4:	e02c      	b.n	12c20 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   12bc6:	2347      	movs	r3, #71	; 0x47
   12bc8:	18fb      	adds	r3, r7, r3
   12bca:	781a      	ldrb	r2, [r3, #0]
   12bcc:	230c      	movs	r3, #12
   12bce:	18fb      	adds	r3, r7, r3
   12bd0:	0092      	lsls	r2, r2, #2
   12bd2:	58d3      	ldr	r3, [r2, r3]
   12bd4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   12bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12bd8:	2b00      	cmp	r3, #0
   12bda:	d109      	bne.n	12bf0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   12bdc:	2347      	movs	r3, #71	; 0x47
   12bde:	18fb      	adds	r3, r7, r3
   12be0:	781a      	ldrb	r2, [r3, #0]
   12be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12be4:	0011      	movs	r1, r2
   12be6:	0018      	movs	r0, r3
   12be8:	4b6a      	ldr	r3, [pc, #424]	; (12d94 <_spi_set_config+0x238>)
   12bea:	4798      	blx	r3
   12bec:	0003      	movs	r3, r0
   12bee:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   12bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12bf2:	3301      	adds	r3, #1
   12bf4:	d00d      	beq.n	12c12 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   12bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12bf8:	b2da      	uxtb	r2, r3
   12bfa:	231c      	movs	r3, #28
   12bfc:	18fb      	adds	r3, r7, r3
   12bfe:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   12c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   12c02:	0c1b      	lsrs	r3, r3, #16
   12c04:	b2db      	uxtb	r3, r3
   12c06:	221c      	movs	r2, #28
   12c08:	18ba      	adds	r2, r7, r2
   12c0a:	0011      	movs	r1, r2
   12c0c:	0018      	movs	r0, r3
   12c0e:	4b62      	ldr	r3, [pc, #392]	; (12d98 <_spi_set_config+0x23c>)
   12c10:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   12c12:	2347      	movs	r3, #71	; 0x47
   12c14:	18fb      	adds	r3, r7, r3
   12c16:	781a      	ldrb	r2, [r3, #0]
   12c18:	2347      	movs	r3, #71	; 0x47
   12c1a:	18fb      	adds	r3, r7, r3
   12c1c:	3201      	adds	r2, #1
   12c1e:	701a      	strb	r2, [r3, #0]
   12c20:	2347      	movs	r3, #71	; 0x47
   12c22:	18fb      	adds	r3, r7, r3
   12c24:	781b      	ldrb	r3, [r3, #0]
   12c26:	2b03      	cmp	r3, #3
   12c28:	d9cd      	bls.n	12bc6 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
   12c2a:	683b      	ldr	r3, [r7, #0]
   12c2c:	781a      	ldrb	r2, [r3, #0]
   12c2e:	687b      	ldr	r3, [r7, #4]
   12c30:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   12c32:	683b      	ldr	r3, [r7, #0]
   12c34:	7c1a      	ldrb	r2, [r3, #16]
   12c36:	687b      	ldr	r3, [r7, #4]
   12c38:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   12c3a:	683b      	ldr	r3, [r7, #0]
   12c3c:	7c9a      	ldrb	r2, [r3, #18]
   12c3e:	687b      	ldr	r3, [r7, #4]
   12c40:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   12c42:	683b      	ldr	r3, [r7, #0]
   12c44:	7d1a      	ldrb	r2, [r3, #20]
   12c46:	687b      	ldr	r3, [r7, #4]
   12c48:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   12c4a:	230a      	movs	r3, #10
   12c4c:	18fb      	adds	r3, r7, r3
   12c4e:	2200      	movs	r2, #0
   12c50:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   12c52:	2300      	movs	r3, #0
   12c54:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   12c56:	2300      	movs	r3, #0
   12c58:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   12c5a:	683b      	ldr	r3, [r7, #0]
   12c5c:	781b      	ldrb	r3, [r3, #0]
   12c5e:	2b01      	cmp	r3, #1
   12c60:	d129      	bne.n	12cb6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   12c62:	687b      	ldr	r3, [r7, #4]
   12c64:	681b      	ldr	r3, [r3, #0]
   12c66:	0018      	movs	r0, r3
   12c68:	4b4c      	ldr	r3, [pc, #304]	; (12d9c <_spi_set_config+0x240>)
   12c6a:	4798      	blx	r3
   12c6c:	0003      	movs	r3, r0
   12c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   12c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12c72:	3314      	adds	r3, #20
   12c74:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   12c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12c78:	b2db      	uxtb	r3, r3
   12c7a:	0018      	movs	r0, r3
   12c7c:	4b48      	ldr	r3, [pc, #288]	; (12da0 <_spi_set_config+0x244>)
   12c7e:	4798      	blx	r3
   12c80:	0003      	movs	r3, r0
   12c82:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   12c84:	683b      	ldr	r3, [r7, #0]
   12c86:	699b      	ldr	r3, [r3, #24]
   12c88:	2223      	movs	r2, #35	; 0x23
   12c8a:	18bc      	adds	r4, r7, r2
   12c8c:	220a      	movs	r2, #10
   12c8e:	18ba      	adds	r2, r7, r2
   12c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
   12c92:	0018      	movs	r0, r3
   12c94:	4b43      	ldr	r3, [pc, #268]	; (12da4 <_spi_set_config+0x248>)
   12c96:	4798      	blx	r3
   12c98:	0003      	movs	r3, r0
   12c9a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   12c9c:	2323      	movs	r3, #35	; 0x23
   12c9e:	18fb      	adds	r3, r7, r3
   12ca0:	781b      	ldrb	r3, [r3, #0]
   12ca2:	2b00      	cmp	r3, #0
   12ca4:	d001      	beq.n	12caa <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   12ca6:	2317      	movs	r3, #23
   12ca8:	e06d      	b.n	12d86 <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   12caa:	230a      	movs	r3, #10
   12cac:	18fb      	adds	r3, r7, r3
   12cae:	881b      	ldrh	r3, [r3, #0]
   12cb0:	b2da      	uxtb	r2, r3
   12cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12cb4:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   12cb6:	683b      	ldr	r3, [r7, #0]
   12cb8:	781b      	ldrb	r3, [r3, #0]
   12cba:	2b00      	cmp	r3, #0
   12cbc:	d11a      	bne.n	12cf4 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
   12cbe:	683b      	ldr	r3, [r7, #0]
   12cc0:	699b      	ldr	r3, [r3, #24]
   12cc2:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
   12cc4:	683b      	ldr	r3, [r7, #0]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
   12cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   12cce:	683a      	ldr	r2, [r7, #0]
   12cd0:	7f92      	ldrb	r2, [r2, #30]
   12cd2:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
   12cd4:	683a      	ldr	r2, [r7, #0]
   12cd6:	7fd2      	ldrb	r2, [r2, #31]
   12cd8:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
   12cda:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
   12cdc:	431a      	orrs	r2, r3
   12cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12ce0:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
   12ce2:	683b      	ldr	r3, [r7, #0]
   12ce4:	2220      	movs	r2, #32
   12ce6:	5c9b      	ldrb	r3, [r3, r2]
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d003      	beq.n	12cf4 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
   12cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12cee:	2240      	movs	r2, #64	; 0x40
   12cf0:	4313      	orrs	r3, r2
   12cf2:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   12cf4:	683b      	ldr	r3, [r7, #0]
   12cf6:	685b      	ldr	r3, [r3, #4]
   12cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12cfa:	4313      	orrs	r3, r2
   12cfc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   12cfe:	683b      	ldr	r3, [r7, #0]
   12d00:	689b      	ldr	r3, [r3, #8]
   12d02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12d04:	4313      	orrs	r3, r2
   12d06:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   12d08:	683b      	ldr	r3, [r7, #0]
   12d0a:	68db      	ldr	r3, [r3, #12]
   12d0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   12d0e:	4313      	orrs	r3, r2
   12d10:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   12d12:	683b      	ldr	r3, [r7, #0]
   12d14:	7c1b      	ldrb	r3, [r3, #16]
   12d16:	001a      	movs	r2, r3
   12d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12d1a:	4313      	orrs	r3, r2
   12d1c:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   12d1e:	683b      	ldr	r3, [r7, #0]
   12d20:	7c5b      	ldrb	r3, [r3, #17]
   12d22:	2b00      	cmp	r3, #0
   12d24:	d103      	bne.n	12d2e <_spi_set_config+0x1d2>
   12d26:	4b20      	ldr	r3, [pc, #128]	; (12da8 <_spi_set_config+0x24c>)
   12d28:	4798      	blx	r3
   12d2a:	1e03      	subs	r3, r0, #0
   12d2c:	d003      	beq.n	12d36 <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   12d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d30:	2280      	movs	r2, #128	; 0x80
   12d32:	4313      	orrs	r3, r2
   12d34:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   12d36:	683b      	ldr	r3, [r7, #0]
   12d38:	7c9b      	ldrb	r3, [r3, #18]
   12d3a:	2b00      	cmp	r3, #0
   12d3c:	d004      	beq.n	12d48 <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   12d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12d40:	2280      	movs	r2, #128	; 0x80
   12d42:	0292      	lsls	r2, r2, #10
   12d44:	4313      	orrs	r3, r2
   12d46:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   12d48:	683b      	ldr	r3, [r7, #0]
   12d4a:	7cdb      	ldrb	r3, [r3, #19]
   12d4c:	2b00      	cmp	r3, #0
   12d4e:	d004      	beq.n	12d5a <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   12d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12d52:	2280      	movs	r2, #128	; 0x80
   12d54:	0092      	lsls	r2, r2, #2
   12d56:	4313      	orrs	r3, r2
   12d58:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   12d5a:	683b      	ldr	r3, [r7, #0]
   12d5c:	7d1b      	ldrb	r3, [r3, #20]
   12d5e:	2b00      	cmp	r3, #0
   12d60:	d004      	beq.n	12d6c <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   12d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12d64:	2280      	movs	r2, #128	; 0x80
   12d66:	0192      	lsls	r2, r2, #6
   12d68:	4313      	orrs	r3, r2
   12d6a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   12d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12d6e:	681a      	ldr	r2, [r3, #0]
   12d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   12d72:	431a      	orrs	r2, r3
   12d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12d76:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   12d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12d7a:	685a      	ldr	r2, [r3, #4]
   12d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   12d7e:	431a      	orrs	r2, r3
   12d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12d82:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   12d84:	2300      	movs	r3, #0
}
   12d86:	0018      	movs	r0, r3
   12d88:	46bd      	mov	sp, r7
   12d8a:	b013      	add	sp, #76	; 0x4c
   12d8c:	bd90      	pop	{r4, r7, pc}
   12d8e:	46c0      	nop			; (mov r8, r8)
   12d90:	00012865 	.word	0x00012865
   12d94:	000124fd 	.word	0x000124fd
   12d98:	000153d9 	.word	0x000153d9
   12d9c:	000126b9 	.word	0x000126b9
   12da0:	00015211 	.word	0x00015211
   12da4:	00012235 	.word	0x00012235
   12da8:	000129d9 	.word	0x000129d9

00012dac <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   12dac:	b590      	push	{r4, r7, lr}
   12dae:	b08b      	sub	sp, #44	; 0x2c
   12db0:	af00      	add	r7, sp, #0
   12db2:	60f8      	str	r0, [r7, #12]
   12db4:	60b9      	str	r1, [r7, #8]
   12db6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   12db8:	68fb      	ldr	r3, [r7, #12]
   12dba:	68ba      	ldr	r2, [r7, #8]
   12dbc:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   12dbe:	68fb      	ldr	r3, [r7, #12]
   12dc0:	681b      	ldr	r3, [r3, #0]
   12dc2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   12dc4:	6a3b      	ldr	r3, [r7, #32]
   12dc6:	681b      	ldr	r3, [r3, #0]
   12dc8:	2202      	movs	r2, #2
   12dca:	4013      	ands	r3, r2
   12dcc:	d001      	beq.n	12dd2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   12dce:	231c      	movs	r3, #28
   12dd0:	e0a6      	b.n	12f20 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   12dd2:	6a3b      	ldr	r3, [r7, #32]
   12dd4:	681b      	ldr	r3, [r3, #0]
   12dd6:	2201      	movs	r2, #1
   12dd8:	4013      	ands	r3, r2
   12dda:	d001      	beq.n	12de0 <spi_init+0x34>
		return STATUS_BUSY;
   12ddc:	2305      	movs	r3, #5
   12dde:	e09f      	b.n	12f20 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   12de0:	68fb      	ldr	r3, [r7, #12]
   12de2:	681b      	ldr	r3, [r3, #0]
   12de4:	0018      	movs	r0, r3
   12de6:	4b50      	ldr	r3, [pc, #320]	; (12f28 <spi_init+0x17c>)
   12de8:	4798      	blx	r3
   12dea:	0003      	movs	r3, r0
   12dec:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   12dee:	69fb      	ldr	r3, [r7, #28]
   12df0:	3302      	adds	r3, #2
   12df2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   12df4:	69fb      	ldr	r3, [r7, #28]
   12df6:	3314      	adds	r3, #20
   12df8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   12dfa:	2201      	movs	r2, #1
   12dfc:	69bb      	ldr	r3, [r7, #24]
   12dfe:	409a      	lsls	r2, r3
   12e00:	0013      	movs	r3, r2
   12e02:	0019      	movs	r1, r3
   12e04:	2002      	movs	r0, #2
   12e06:	4b49      	ldr	r3, [pc, #292]	; (12f2c <spi_init+0x180>)
   12e08:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   12e0a:	2310      	movs	r3, #16
   12e0c:	18fb      	adds	r3, r7, r3
   12e0e:	0018      	movs	r0, r3
   12e10:	4b47      	ldr	r3, [pc, #284]	; (12f30 <spi_init+0x184>)
   12e12:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   12e14:	687b      	ldr	r3, [r7, #4]
   12e16:	2224      	movs	r2, #36	; 0x24
   12e18:	5c9a      	ldrb	r2, [r3, r2]
   12e1a:	2310      	movs	r3, #16
   12e1c:	18fb      	adds	r3, r7, r3
   12e1e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   12e20:	697b      	ldr	r3, [r7, #20]
   12e22:	b2db      	uxtb	r3, r3
   12e24:	2210      	movs	r2, #16
   12e26:	18ba      	adds	r2, r7, r2
   12e28:	0011      	movs	r1, r2
   12e2a:	0018      	movs	r0, r3
   12e2c:	4b41      	ldr	r3, [pc, #260]	; (12f34 <spi_init+0x188>)
   12e2e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   12e30:	697b      	ldr	r3, [r7, #20]
   12e32:	b2db      	uxtb	r3, r3
   12e34:	0018      	movs	r0, r3
   12e36:	4b40      	ldr	r3, [pc, #256]	; (12f38 <spi_init+0x18c>)
   12e38:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   12e3a:	687b      	ldr	r3, [r7, #4]
   12e3c:	2224      	movs	r2, #36	; 0x24
   12e3e:	5c9b      	ldrb	r3, [r3, r2]
   12e40:	2100      	movs	r1, #0
   12e42:	0018      	movs	r0, r3
   12e44:	4b3d      	ldr	r3, [pc, #244]	; (12f3c <spi_init+0x190>)
   12e46:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   12e48:	687b      	ldr	r3, [r7, #4]
   12e4a:	781b      	ldrb	r3, [r3, #0]
   12e4c:	2b01      	cmp	r3, #1
   12e4e:	d105      	bne.n	12e5c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   12e50:	6a3b      	ldr	r3, [r7, #32]
   12e52:	681b      	ldr	r3, [r3, #0]
   12e54:	220c      	movs	r2, #12
   12e56:	431a      	orrs	r2, r3
   12e58:	6a3b      	ldr	r3, [r7, #32]
   12e5a:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
   12e5c:	687b      	ldr	r3, [r7, #4]
   12e5e:	781b      	ldrb	r3, [r3, #0]
   12e60:	2b00      	cmp	r3, #0
   12e62:	d105      	bne.n	12e70 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
   12e64:	6a3b      	ldr	r3, [r7, #32]
   12e66:	681b      	ldr	r3, [r3, #0]
   12e68:	2208      	movs	r2, #8
   12e6a:	431a      	orrs	r2, r3
   12e6c:	6a3b      	ldr	r3, [r7, #32]
   12e6e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   12e70:	2327      	movs	r3, #39	; 0x27
   12e72:	18fb      	adds	r3, r7, r3
   12e74:	2200      	movs	r2, #0
   12e76:	701a      	strb	r2, [r3, #0]
   12e78:	e010      	b.n	12e9c <spi_init+0xf0>
		module->callback[i]        = NULL;
   12e7a:	2327      	movs	r3, #39	; 0x27
   12e7c:	18fb      	adds	r3, r7, r3
   12e7e:	781b      	ldrb	r3, [r3, #0]
   12e80:	68fa      	ldr	r2, [r7, #12]
   12e82:	3302      	adds	r3, #2
   12e84:	009b      	lsls	r3, r3, #2
   12e86:	18d3      	adds	r3, r2, r3
   12e88:	3304      	adds	r3, #4
   12e8a:	2200      	movs	r2, #0
   12e8c:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   12e8e:	2327      	movs	r3, #39	; 0x27
   12e90:	18fb      	adds	r3, r7, r3
   12e92:	781a      	ldrb	r2, [r3, #0]
   12e94:	2327      	movs	r3, #39	; 0x27
   12e96:	18fb      	adds	r3, r7, r3
   12e98:	3201      	adds	r2, #1
   12e9a:	701a      	strb	r2, [r3, #0]
   12e9c:	2327      	movs	r3, #39	; 0x27
   12e9e:	18fb      	adds	r3, r7, r3
   12ea0:	781b      	ldrb	r3, [r3, #0]
   12ea2:	2b06      	cmp	r3, #6
   12ea4:	d9e9      	bls.n	12e7a <spi_init+0xce>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
   12ea6:	68fb      	ldr	r3, [r7, #12]
   12ea8:	2200      	movs	r2, #0
   12eaa:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   12eac:	68fb      	ldr	r3, [r7, #12]
   12eae:	2200      	movs	r2, #0
   12eb0:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   12eb2:	68fb      	ldr	r3, [r7, #12]
   12eb4:	2200      	movs	r2, #0
   12eb6:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   12eb8:	68fb      	ldr	r3, [r7, #12]
   12eba:	2200      	movs	r2, #0
   12ebc:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   12ebe:	68fb      	ldr	r3, [r7, #12]
   12ec0:	2236      	movs	r2, #54	; 0x36
   12ec2:	2100      	movs	r1, #0
   12ec4:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   12ec6:	68fb      	ldr	r3, [r7, #12]
   12ec8:	2237      	movs	r2, #55	; 0x37
   12eca:	2100      	movs	r1, #0
   12ecc:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   12ece:	68fb      	ldr	r3, [r7, #12]
   12ed0:	2238      	movs	r2, #56	; 0x38
   12ed2:	2100      	movs	r1, #0
   12ed4:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   12ed6:	68fb      	ldr	r3, [r7, #12]
   12ed8:	2203      	movs	r2, #3
   12eda:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   12edc:	68fb      	ldr	r3, [r7, #12]
   12ede:	2200      	movs	r2, #0
   12ee0:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   12ee2:	68fb      	ldr	r3, [r7, #12]
   12ee4:	681b      	ldr	r3, [r3, #0]
   12ee6:	2213      	movs	r2, #19
   12ee8:	18bc      	adds	r4, r7, r2
   12eea:	0018      	movs	r0, r3
   12eec:	4b0e      	ldr	r3, [pc, #56]	; (12f28 <spi_init+0x17c>)
   12eee:	4798      	blx	r3
   12ef0:	0003      	movs	r3, r0
   12ef2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   12ef4:	4a12      	ldr	r2, [pc, #72]	; (12f40 <spi_init+0x194>)
   12ef6:	2313      	movs	r3, #19
   12ef8:	18fb      	adds	r3, r7, r3
   12efa:	781b      	ldrb	r3, [r3, #0]
   12efc:	0011      	movs	r1, r2
   12efe:	0018      	movs	r0, r3
   12f00:	4b10      	ldr	r3, [pc, #64]	; (12f44 <spi_init+0x198>)
   12f02:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   12f04:	2313      	movs	r3, #19
   12f06:	18fb      	adds	r3, r7, r3
   12f08:	781a      	ldrb	r2, [r3, #0]
   12f0a:	4b0f      	ldr	r3, [pc, #60]	; (12f48 <spi_init+0x19c>)
   12f0c:	0092      	lsls	r2, r2, #2
   12f0e:	68f9      	ldr	r1, [r7, #12]
   12f10:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   12f12:	687a      	ldr	r2, [r7, #4]
   12f14:	68fb      	ldr	r3, [r7, #12]
   12f16:	0011      	movs	r1, r2
   12f18:	0018      	movs	r0, r3
   12f1a:	4b0c      	ldr	r3, [pc, #48]	; (12f4c <spi_init+0x1a0>)
   12f1c:	4798      	blx	r3
   12f1e:	0003      	movs	r3, r0
}
   12f20:	0018      	movs	r0, r3
   12f22:	46bd      	mov	sp, r7
   12f24:	b00b      	add	sp, #44	; 0x2c
   12f26:	bd90      	pop	{r4, r7, pc}
   12f28:	000126b9 	.word	0x000126b9
   12f2c:	0001297d 	.word	0x0001297d
   12f30:	00012965 	.word	0x00012965
   12f34:	000150ed 	.word	0x000150ed
   12f38:	00015131 	.word	0x00015131
   12f3c:	00012471 	.word	0x00012471
   12f40:	00013679 	.word	0x00013679
   12f44:	0001271d 	.word	0x0001271d
   12f48:	200003b4 	.word	0x200003b4
   12f4c:	00012b5d 	.word	0x00012b5d

00012f50 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   12f50:	b590      	push	{r4, r7, lr}
   12f52:	b089      	sub	sp, #36	; 0x24
   12f54:	af00      	add	r7, sp, #0
   12f56:	60f8      	str	r0, [r7, #12]
   12f58:	60b9      	str	r1, [r7, #8]
   12f5a:	0019      	movs	r1, r3
   12f5c:	1dbb      	adds	r3, r7, #6
   12f5e:	801a      	strh	r2, [r3, #0]
   12f60:	1d3b      	adds	r3, r7, #4
   12f62:	1c0a      	adds	r2, r1, #0
   12f64:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   12f66:	68fb      	ldr	r3, [r7, #12]
   12f68:	2238      	movs	r2, #56	; 0x38
   12f6a:	5c9b      	ldrb	r3, [r3, r2]
   12f6c:	b2db      	uxtb	r3, r3
   12f6e:	2b05      	cmp	r3, #5
   12f70:	d101      	bne.n	12f76 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   12f72:	2305      	movs	r3, #5
   12f74:	e0b8      	b.n	130e8 <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   12f76:	1dbb      	adds	r3, r7, #6
   12f78:	881b      	ldrh	r3, [r3, #0]
   12f7a:	2b00      	cmp	r3, #0
   12f7c:	d101      	bne.n	12f82 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   12f7e:	2317      	movs	r3, #23
   12f80:	e0b2      	b.n	130e8 <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
   12f82:	68fb      	ldr	r3, [r7, #12]
   12f84:	79db      	ldrb	r3, [r3, #7]
   12f86:	2201      	movs	r2, #1
   12f88:	4053      	eors	r3, r2
   12f8a:	b2db      	uxtb	r3, r3
   12f8c:	2b00      	cmp	r3, #0
   12f8e:	d001      	beq.n	12f94 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   12f90:	231c      	movs	r3, #28
   12f92:	e0a9      	b.n	130e8 <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   12f94:	68fb      	ldr	r3, [r7, #12]
   12f96:	795b      	ldrb	r3, [r3, #5]
   12f98:	2b00      	cmp	r3, #0
   12f9a:	d109      	bne.n	12fb0 <spi_read_buffer_wait+0x60>
   12f9c:	68fb      	ldr	r3, [r7, #12]
   12f9e:	0018      	movs	r0, r3
   12fa0:	4b53      	ldr	r3, [pc, #332]	; (130f0 <spi_read_buffer_wait+0x1a0>)
   12fa2:	4798      	blx	r3
   12fa4:	1e03      	subs	r3, r0, #0
   12fa6:	d003      	beq.n	12fb0 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   12fa8:	68fb      	ldr	r3, [r7, #12]
   12faa:	0018      	movs	r0, r3
   12fac:	4b51      	ldr	r3, [pc, #324]	; (130f4 <spi_read_buffer_wait+0x1a4>)
   12fae:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
   12fb0:	231e      	movs	r3, #30
   12fb2:	18fb      	adds	r3, r7, r3
   12fb4:	2200      	movs	r2, #0
   12fb6:	801a      	strh	r2, [r3, #0]

	while (length--) {
   12fb8:	e08d      	b.n	130d6 <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   12fba:	68fb      	ldr	r3, [r7, #12]
   12fbc:	795b      	ldrb	r3, [r3, #5]
   12fbe:	2b01      	cmp	r3, #1
   12fc0:	d112      	bne.n	12fe8 <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   12fc2:	46c0      	nop			; (mov r8, r8)
   12fc4:	68fb      	ldr	r3, [r7, #12]
   12fc6:	0018      	movs	r0, r3
   12fc8:	4b4b      	ldr	r3, [pc, #300]	; (130f8 <spi_read_buffer_wait+0x1a8>)
   12fca:	4798      	blx	r3
   12fcc:	0003      	movs	r3, r0
   12fce:	001a      	movs	r2, r3
   12fd0:	2301      	movs	r3, #1
   12fd2:	4053      	eors	r3, r2
   12fd4:	b2db      	uxtb	r3, r3
   12fd6:	2b00      	cmp	r3, #0
   12fd8:	d1f4      	bne.n	12fc4 <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   12fda:	1d3b      	adds	r3, r7, #4
   12fdc:	881a      	ldrh	r2, [r3, #0]
   12fde:	68fb      	ldr	r3, [r7, #12]
   12fe0:	0011      	movs	r1, r2
   12fe2:	0018      	movs	r0, r3
   12fe4:	4b45      	ldr	r3, [pc, #276]	; (130fc <spi_read_buffer_wait+0x1ac>)
   12fe6:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   12fe8:	68fb      	ldr	r3, [r7, #12]
   12fea:	795b      	ldrb	r3, [r3, #5]
   12fec:	2b00      	cmp	r3, #0
   12fee:	d12a      	bne.n	13046 <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   12ff0:	2300      	movs	r3, #0
   12ff2:	61bb      	str	r3, [r7, #24]
   12ff4:	e008      	b.n	13008 <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
   12ff6:	68fb      	ldr	r3, [r7, #12]
   12ff8:	0018      	movs	r0, r3
   12ffa:	4b41      	ldr	r3, [pc, #260]	; (13100 <spi_read_buffer_wait+0x1b0>)
   12ffc:	4798      	blx	r3
   12ffe:	1e03      	subs	r3, r0, #0
   13000:	d107      	bne.n	13012 <spi_read_buffer_wait+0xc2>
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   13002:	69bb      	ldr	r3, [r7, #24]
   13004:	3301      	adds	r3, #1
   13006:	61bb      	str	r3, [r7, #24]
   13008:	69bb      	ldr	r3, [r7, #24]
   1300a:	4a3e      	ldr	r2, [pc, #248]	; (13104 <spi_read_buffer_wait+0x1b4>)
   1300c:	4293      	cmp	r3, r2
   1300e:	d9f2      	bls.n	12ff6 <spi_read_buffer_wait+0xa6>
   13010:	e000      	b.n	13014 <spi_read_buffer_wait+0xc4>
				if (spi_is_ready_to_read(module)) {
					break;
   13012:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   13014:	68fb      	ldr	r3, [r7, #12]
   13016:	0018      	movs	r0, r3
   13018:	4b35      	ldr	r3, [pc, #212]	; (130f0 <spi_read_buffer_wait+0x1a0>)
   1301a:	4798      	blx	r3
   1301c:	1e03      	subs	r3, r0, #0
   1301e:	d005      	beq.n	1302c <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
   13020:	68fb      	ldr	r3, [r7, #12]
   13022:	0018      	movs	r0, r3
   13024:	4b33      	ldr	r3, [pc, #204]	; (130f4 <spi_read_buffer_wait+0x1a4>)
   13026:	4798      	blx	r3
				return STATUS_ABORTED;
   13028:	2304      	movs	r3, #4
   1302a:	e05d      	b.n	130e8 <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
   1302c:	68fb      	ldr	r3, [r7, #12]
   1302e:	0018      	movs	r0, r3
   13030:	4b33      	ldr	r3, [pc, #204]	; (13100 <spi_read_buffer_wait+0x1b0>)
   13032:	4798      	blx	r3
   13034:	0003      	movs	r3, r0
   13036:	001a      	movs	r2, r3
   13038:	2301      	movs	r3, #1
   1303a:	4053      	eors	r3, r2
   1303c:	b2db      	uxtb	r3, r3
   1303e:	2b00      	cmp	r3, #0
   13040:	d001      	beq.n	13046 <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
   13042:	2312      	movs	r3, #18
   13044:	e050      	b.n	130e8 <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   13046:	46c0      	nop			; (mov r8, r8)
   13048:	68fb      	ldr	r3, [r7, #12]
   1304a:	0018      	movs	r0, r3
   1304c:	4b2c      	ldr	r3, [pc, #176]	; (13100 <spi_read_buffer_wait+0x1b0>)
   1304e:	4798      	blx	r3
   13050:	0003      	movs	r3, r0
   13052:	001a      	movs	r2, r3
   13054:	2301      	movs	r3, #1
   13056:	4053      	eors	r3, r2
   13058:	b2db      	uxtb	r3, r3
   1305a:	2b00      	cmp	r3, #0
   1305c:	d1f4      	bne.n	13048 <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
   1305e:	2314      	movs	r3, #20
   13060:	18fb      	adds	r3, r7, r3
   13062:	2200      	movs	r2, #0
   13064:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   13066:	2317      	movs	r3, #23
   13068:	18fc      	adds	r4, r7, r3
   1306a:	2314      	movs	r3, #20
   1306c:	18fa      	adds	r2, r7, r3
   1306e:	68fb      	ldr	r3, [r7, #12]
   13070:	0011      	movs	r1, r2
   13072:	0018      	movs	r0, r3
   13074:	4b24      	ldr	r3, [pc, #144]	; (13108 <spi_read_buffer_wait+0x1b8>)
   13076:	4798      	blx	r3
   13078:	0003      	movs	r3, r0
   1307a:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   1307c:	2317      	movs	r3, #23
   1307e:	18fb      	adds	r3, r7, r3
   13080:	781b      	ldrb	r3, [r3, #0]
   13082:	2b00      	cmp	r3, #0
   13084:	d003      	beq.n	1308e <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
   13086:	2317      	movs	r3, #23
   13088:	18fb      	adds	r3, r7, r3
   1308a:	781b      	ldrb	r3, [r3, #0]
   1308c:	e02c      	b.n	130e8 <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   1308e:	231e      	movs	r3, #30
   13090:	18fb      	adds	r3, r7, r3
   13092:	881b      	ldrh	r3, [r3, #0]
   13094:	221e      	movs	r2, #30
   13096:	18ba      	adds	r2, r7, r2
   13098:	1c59      	adds	r1, r3, #1
   1309a:	8011      	strh	r1, [r2, #0]
   1309c:	001a      	movs	r2, r3
   1309e:	68bb      	ldr	r3, [r7, #8]
   130a0:	189b      	adds	r3, r3, r2
   130a2:	2214      	movs	r2, #20
   130a4:	18ba      	adds	r2, r7, r2
   130a6:	8812      	ldrh	r2, [r2, #0]
   130a8:	b2d2      	uxtb	r2, r2
   130aa:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   130ac:	68fb      	ldr	r3, [r7, #12]
   130ae:	799b      	ldrb	r3, [r3, #6]
   130b0:	2b01      	cmp	r3, #1
   130b2:	d110      	bne.n	130d6 <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
   130b4:	231e      	movs	r3, #30
   130b6:	18fb      	adds	r3, r7, r3
   130b8:	881b      	ldrh	r3, [r3, #0]
   130ba:	221e      	movs	r2, #30
   130bc:	18ba      	adds	r2, r7, r2
   130be:	1c59      	adds	r1, r3, #1
   130c0:	8011      	strh	r1, [r2, #0]
   130c2:	001a      	movs	r2, r3
   130c4:	68bb      	ldr	r3, [r7, #8]
   130c6:	189b      	adds	r3, r3, r2
   130c8:	2214      	movs	r2, #20
   130ca:	18ba      	adds	r2, r7, r2
   130cc:	8812      	ldrh	r2, [r2, #0]
   130ce:	0a12      	lsrs	r2, r2, #8
   130d0:	b292      	uxth	r2, r2
   130d2:	b2d2      	uxtb	r2, r2
   130d4:	701a      	strb	r2, [r3, #0]
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
   130d6:	1dbb      	adds	r3, r7, #6
   130d8:	881b      	ldrh	r3, [r3, #0]
   130da:	1dba      	adds	r2, r7, #6
   130dc:	1e59      	subs	r1, r3, #1
   130de:	8011      	strh	r1, [r2, #0]
   130e0:	2b00      	cmp	r3, #0
   130e2:	d000      	beq.n	130e6 <spi_read_buffer_wait+0x196>
   130e4:	e769      	b.n	12fba <spi_read_buffer_wait+0x6a>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
   130e6:	2300      	movs	r3, #0
}
   130e8:	0018      	movs	r0, r3
   130ea:	46bd      	mov	sp, r7
   130ec:	b009      	add	sp, #36	; 0x24
   130ee:	bd90      	pop	{r4, r7, pc}
   130f0:	000129f9 	.word	0x000129f9
   130f4:	00012b41 	.word	0x00012b41
   130f8:	00012a21 	.word	0x00012a21
   130fc:	00012a71 	.word	0x00012a71
   13100:	00012a49 	.word	0x00012a49
   13104:	00002710 	.word	0x00002710
   13108:	00012ab9 	.word	0x00012ab9

0001310c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   1310c:	b580      	push	{r7, lr}
   1310e:	b086      	sub	sp, #24
   13110:	af00      	add	r7, sp, #0
   13112:	60f8      	str	r0, [r7, #12]
   13114:	60b9      	str	r1, [r7, #8]
   13116:	1dfb      	adds	r3, r7, #7
   13118:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   1311a:	68fb      	ldr	r3, [r7, #12]
   1311c:	795b      	ldrb	r3, [r3, #5]
   1311e:	2b01      	cmp	r3, #1
   13120:	d001      	beq.n	13126 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   13122:	2315      	movs	r3, #21
   13124:	e05c      	b.n	131e0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   13126:	68fb      	ldr	r3, [r7, #12]
   13128:	7a1b      	ldrb	r3, [r3, #8]
   1312a:	2201      	movs	r2, #1
   1312c:	4053      	eors	r3, r2
   1312e:	b2db      	uxtb	r3, r3
   13130:	2b00      	cmp	r3, #0
   13132:	d054      	beq.n	131de <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   13134:	1dfb      	adds	r3, r7, #7
   13136:	781b      	ldrb	r3, [r3, #0]
   13138:	2b00      	cmp	r3, #0
   1313a:	d04a      	beq.n	131d2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   1313c:	68bb      	ldr	r3, [r7, #8]
   1313e:	785b      	ldrb	r3, [r3, #1]
   13140:	2b00      	cmp	r3, #0
   13142:	d03f      	beq.n	131c4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   13144:	68fb      	ldr	r3, [r7, #12]
   13146:	0018      	movs	r0, r3
   13148:	4b27      	ldr	r3, [pc, #156]	; (131e8 <spi_select_slave+0xdc>)
   1314a:	4798      	blx	r3
   1314c:	0003      	movs	r3, r0
   1314e:	001a      	movs	r2, r3
   13150:	2301      	movs	r3, #1
   13152:	4053      	eors	r3, r2
   13154:	b2db      	uxtb	r3, r3
   13156:	2b00      	cmp	r3, #0
   13158:	d007      	beq.n	1316a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   1315a:	68bb      	ldr	r3, [r7, #8]
   1315c:	781b      	ldrb	r3, [r3, #0]
   1315e:	2101      	movs	r1, #1
   13160:	0018      	movs	r0, r3
   13162:	4b22      	ldr	r3, [pc, #136]	; (131ec <spi_select_slave+0xe0>)
   13164:	4798      	blx	r3
					return STATUS_BUSY;
   13166:	2305      	movs	r3, #5
   13168:	e03a      	b.n	131e0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   1316a:	68bb      	ldr	r3, [r7, #8]
   1316c:	781b      	ldrb	r3, [r3, #0]
   1316e:	2100      	movs	r1, #0
   13170:	0018      	movs	r0, r3
   13172:	4b1e      	ldr	r3, [pc, #120]	; (131ec <spi_select_slave+0xe0>)
   13174:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   13176:	68bb      	ldr	r3, [r7, #8]
   13178:	789b      	ldrb	r3, [r3, #2]
   1317a:	b29a      	uxth	r2, r3
   1317c:	68fb      	ldr	r3, [r7, #12]
   1317e:	0011      	movs	r1, r2
   13180:	0018      	movs	r0, r3
   13182:	4b1b      	ldr	r3, [pc, #108]	; (131f0 <spi_select_slave+0xe4>)
   13184:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   13186:	68fb      	ldr	r3, [r7, #12]
   13188:	79db      	ldrb	r3, [r3, #7]
   1318a:	2201      	movs	r2, #1
   1318c:	4053      	eors	r3, r2
   1318e:	b2db      	uxtb	r3, r3
   13190:	2b00      	cmp	r3, #0
   13192:	d024      	beq.n	131de <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   13194:	46c0      	nop			; (mov r8, r8)
   13196:	68fb      	ldr	r3, [r7, #12]
   13198:	0018      	movs	r0, r3
   1319a:	4b16      	ldr	r3, [pc, #88]	; (131f4 <spi_select_slave+0xe8>)
   1319c:	4798      	blx	r3
   1319e:	0003      	movs	r3, r0
   131a0:	001a      	movs	r2, r3
   131a2:	2301      	movs	r3, #1
   131a4:	4053      	eors	r3, r2
   131a6:	b2db      	uxtb	r3, r3
   131a8:	2b00      	cmp	r3, #0
   131aa:	d1f4      	bne.n	13196 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   131ac:	2316      	movs	r3, #22
   131ae:	18fb      	adds	r3, r7, r3
   131b0:	2200      	movs	r2, #0
   131b2:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   131b4:	2316      	movs	r3, #22
   131b6:	18fa      	adds	r2, r7, r3
   131b8:	68fb      	ldr	r3, [r7, #12]
   131ba:	0011      	movs	r1, r2
   131bc:	0018      	movs	r0, r3
   131be:	4b0e      	ldr	r3, [pc, #56]	; (131f8 <spi_select_slave+0xec>)
   131c0:	4798      	blx	r3
   131c2:	e00c      	b.n	131de <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   131c4:	68bb      	ldr	r3, [r7, #8]
   131c6:	781b      	ldrb	r3, [r3, #0]
   131c8:	2100      	movs	r1, #0
   131ca:	0018      	movs	r0, r3
   131cc:	4b07      	ldr	r3, [pc, #28]	; (131ec <spi_select_slave+0xe0>)
   131ce:	4798      	blx	r3
   131d0:	e005      	b.n	131de <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   131d2:	68bb      	ldr	r3, [r7, #8]
   131d4:	781b      	ldrb	r3, [r3, #0]
   131d6:	2101      	movs	r1, #1
   131d8:	0018      	movs	r0, r3
   131da:	4b04      	ldr	r3, [pc, #16]	; (131ec <spi_select_slave+0xe0>)
   131dc:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   131de:	2300      	movs	r3, #0
}
   131e0:	0018      	movs	r0, r3
   131e2:	46bd      	mov	sp, r7
   131e4:	b006      	add	sp, #24
   131e6:	bd80      	pop	{r7, pc}
   131e8:	00012a21 	.word	0x00012a21
   131ec:	00012911 	.word	0x00012911
   131f0:	00012a71 	.word	0x00012a71
   131f4:	00012a49 	.word	0x00012a49
   131f8:	00012ab9 	.word	0x00012ab9

000131fc <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   131fc:	b580      	push	{r7, lr}
   131fe:	b08a      	sub	sp, #40	; 0x28
   13200:	af00      	add	r7, sp, #0
   13202:	60f8      	str	r0, [r7, #12]
   13204:	60b9      	str	r1, [r7, #8]
   13206:	1dbb      	adds	r3, r7, #6
   13208:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   1320a:	68fb      	ldr	r3, [r7, #12]
   1320c:	2238      	movs	r2, #56	; 0x38
   1320e:	5c9b      	ldrb	r3, [r3, r2]
   13210:	b2db      	uxtb	r3, r3
   13212:	2b05      	cmp	r3, #5
   13214:	d101      	bne.n	1321a <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   13216:	2305      	movs	r3, #5
   13218:	e170      	b.n	134fc <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
   1321a:	1dbb      	adds	r3, r7, #6
   1321c:	881b      	ldrh	r3, [r3, #0]
   1321e:	2b00      	cmp	r3, #0
   13220:	d101      	bne.n	13226 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   13222:	2317      	movs	r3, #23
   13224:	e16a      	b.n	134fc <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
   13226:	68fb      	ldr	r3, [r7, #12]
   13228:	795b      	ldrb	r3, [r3, #5]
   1322a:	2b00      	cmp	r3, #0
   1322c:	d109      	bne.n	13242 <spi_write_buffer_wait+0x46>
   1322e:	68fb      	ldr	r3, [r7, #12]
   13230:	0018      	movs	r0, r3
   13232:	4bb4      	ldr	r3, [pc, #720]	; (13504 <spi_write_buffer_wait+0x308>)
   13234:	4798      	blx	r3
   13236:	1e03      	subs	r3, r0, #0
   13238:	d003      	beq.n	13242 <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
   1323a:	68fb      	ldr	r3, [r7, #12]
   1323c:	0018      	movs	r0, r3
   1323e:	4bb2      	ldr	r3, [pc, #712]	; (13508 <spi_write_buffer_wait+0x30c>)
   13240:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
   13242:	2326      	movs	r3, #38	; 0x26
   13244:	18fb      	adds	r3, r7, r3
   13246:	2200      	movs	r2, #0
   13248:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   1324a:	2324      	movs	r3, #36	; 0x24
   1324c:	18fb      	adds	r3, r7, r3
   1324e:	1dba      	adds	r2, r7, #6
   13250:	8812      	ldrh	r2, [r2, #0]
   13252:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   13254:	e0fe      	b.n	13454 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
   13256:	68fb      	ldr	r3, [r7, #12]
   13258:	795b      	ldrb	r3, [r3, #5]
   1325a:	2b00      	cmp	r3, #0
   1325c:	d12a      	bne.n	132b4 <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   1325e:	2300      	movs	r3, #0
   13260:	623b      	str	r3, [r7, #32]
   13262:	e008      	b.n	13276 <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	0018      	movs	r0, r3
   13268:	4ba8      	ldr	r3, [pc, #672]	; (1350c <spi_write_buffer_wait+0x310>)
   1326a:	4798      	blx	r3
   1326c:	1e03      	subs	r3, r0, #0
   1326e:	d107      	bne.n	13280 <spi_write_buffer_wait+0x84>
	/* Write block */
	while (length--) {
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   13270:	6a3b      	ldr	r3, [r7, #32]
   13272:	3301      	adds	r3, #1
   13274:	623b      	str	r3, [r7, #32]
   13276:	6a3b      	ldr	r3, [r7, #32]
   13278:	4aa5      	ldr	r2, [pc, #660]	; (13510 <spi_write_buffer_wait+0x314>)
   1327a:	4293      	cmp	r3, r2
   1327c:	d9f2      	bls.n	13264 <spi_write_buffer_wait+0x68>
   1327e:	e000      	b.n	13282 <spi_write_buffer_wait+0x86>
				if (spi_is_ready_to_write(module)) {
					break;
   13280:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
   13282:	68fb      	ldr	r3, [r7, #12]
   13284:	0018      	movs	r0, r3
   13286:	4b9f      	ldr	r3, [pc, #636]	; (13504 <spi_write_buffer_wait+0x308>)
   13288:	4798      	blx	r3
   1328a:	1e03      	subs	r3, r0, #0
   1328c:	d005      	beq.n	1329a <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
   1328e:	68fb      	ldr	r3, [r7, #12]
   13290:	0018      	movs	r0, r3
   13292:	4b9d      	ldr	r3, [pc, #628]	; (13508 <spi_write_buffer_wait+0x30c>)
   13294:	4798      	blx	r3
				return STATUS_ABORTED;
   13296:	2304      	movs	r3, #4
   13298:	e130      	b.n	134fc <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
   1329a:	68fb      	ldr	r3, [r7, #12]
   1329c:	0018      	movs	r0, r3
   1329e:	4b9b      	ldr	r3, [pc, #620]	; (1350c <spi_write_buffer_wait+0x310>)
   132a0:	4798      	blx	r3
   132a2:	0003      	movs	r3, r0
   132a4:	001a      	movs	r2, r3
   132a6:	2301      	movs	r3, #1
   132a8:	4053      	eors	r3, r2
   132aa:	b2db      	uxtb	r3, r3
   132ac:	2b00      	cmp	r3, #0
   132ae:	d001      	beq.n	132b4 <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
   132b0:	2312      	movs	r3, #18
   132b2:	e123      	b.n	134fc <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   132b4:	46c0      	nop			; (mov r8, r8)
   132b6:	68fb      	ldr	r3, [r7, #12]
   132b8:	0018      	movs	r0, r3
   132ba:	4b94      	ldr	r3, [pc, #592]	; (1350c <spi_write_buffer_wait+0x310>)
   132bc:	4798      	blx	r3
   132be:	0003      	movs	r3, r0
   132c0:	001a      	movs	r2, r3
   132c2:	2301      	movs	r3, #1
   132c4:	4053      	eors	r3, r2
   132c6:	b2db      	uxtb	r3, r3
   132c8:	2b00      	cmp	r3, #0
   132ca:	d1f4      	bne.n	132b6 <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   132cc:	2326      	movs	r3, #38	; 0x26
   132ce:	18fb      	adds	r3, r7, r3
   132d0:	881b      	ldrh	r3, [r3, #0]
   132d2:	2226      	movs	r2, #38	; 0x26
   132d4:	18ba      	adds	r2, r7, r2
   132d6:	1c59      	adds	r1, r3, #1
   132d8:	8011      	strh	r1, [r2, #0]
   132da:	001a      	movs	r2, r3
   132dc:	68bb      	ldr	r3, [r7, #8]
   132de:	189b      	adds	r3, r3, r2
   132e0:	781a      	ldrb	r2, [r3, #0]
   132e2:	231e      	movs	r3, #30
   132e4:	18fb      	adds	r3, r7, r3
   132e6:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   132e8:	68fb      	ldr	r3, [r7, #12]
   132ea:	799b      	ldrb	r3, [r3, #6]
   132ec:	2b01      	cmp	r3, #1
   132ee:	d115      	bne.n	1331c <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
   132f0:	2326      	movs	r3, #38	; 0x26
   132f2:	18fb      	adds	r3, r7, r3
   132f4:	881b      	ldrh	r3, [r3, #0]
   132f6:	2226      	movs	r2, #38	; 0x26
   132f8:	18ba      	adds	r2, r7, r2
   132fa:	1c59      	adds	r1, r3, #1
   132fc:	8011      	strh	r1, [r2, #0]
   132fe:	001a      	movs	r2, r3
   13300:	68bb      	ldr	r3, [r7, #8]
   13302:	189b      	adds	r3, r3, r2
   13304:	781b      	ldrb	r3, [r3, #0]
   13306:	021b      	lsls	r3, r3, #8
   13308:	b21a      	sxth	r2, r3
   1330a:	231e      	movs	r3, #30
   1330c:	18fb      	adds	r3, r7, r3
   1330e:	2100      	movs	r1, #0
   13310:	5e5b      	ldrsh	r3, [r3, r1]
   13312:	4313      	orrs	r3, r2
   13314:	b21a      	sxth	r2, r3
   13316:	231e      	movs	r3, #30
   13318:	18fb      	adds	r3, r7, r3
   1331a:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   1331c:	231e      	movs	r3, #30
   1331e:	18fb      	adds	r3, r7, r3
   13320:	881a      	ldrh	r2, [r3, #0]
   13322:	68fb      	ldr	r3, [r7, #12]
   13324:	0011      	movs	r1, r2
   13326:	0018      	movs	r0, r3
   13328:	4b7a      	ldr	r3, [pc, #488]	; (13514 <spi_write_buffer_wait+0x318>)
   1332a:	4798      	blx	r3

		if (module->receiver_enabled) {
   1332c:	68fb      	ldr	r3, [r7, #12]
   1332e:	79db      	ldrb	r3, [r3, #7]
   13330:	2224      	movs	r2, #36	; 0x24
   13332:	18ba      	adds	r2, r7, r2
   13334:	2124      	movs	r1, #36	; 0x24
   13336:	1879      	adds	r1, r7, r1
   13338:	8809      	ldrh	r1, [r1, #0]
   1333a:	8011      	strh	r1, [r2, #0]
   1333c:	2b00      	cmp	r3, #0
   1333e:	d100      	bne.n	13342 <spi_write_buffer_wait+0x146>
   13340:	e088      	b.n	13454 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
   13342:	68fb      	ldr	r3, [r7, #12]
   13344:	795b      	ldrb	r3, [r3, #5]
   13346:	2b00      	cmp	r3, #0
   13348:	d000      	beq.n	1334c <spi_write_buffer_wait+0x150>
   1334a:	e069      	b.n	13420 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   1334c:	2300      	movs	r3, #0
   1334e:	61bb      	str	r3, [r7, #24]
   13350:	e047      	b.n	133e2 <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
   13352:	1dbb      	adds	r3, r7, #6
   13354:	881b      	ldrh	r3, [r3, #0]
   13356:	2b00      	cmp	r3, #0
   13358:	d03a      	beq.n	133d0 <spi_write_buffer_wait+0x1d4>
   1335a:	68fb      	ldr	r3, [r7, #12]
   1335c:	0018      	movs	r0, r3
   1335e:	4b6b      	ldr	r3, [pc, #428]	; (1350c <spi_write_buffer_wait+0x310>)
   13360:	4798      	blx	r3
   13362:	1e03      	subs	r3, r0, #0
   13364:	d034      	beq.n	133d0 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
   13366:	2326      	movs	r3, #38	; 0x26
   13368:	18fb      	adds	r3, r7, r3
   1336a:	881b      	ldrh	r3, [r3, #0]
   1336c:	2226      	movs	r2, #38	; 0x26
   1336e:	18ba      	adds	r2, r7, r2
   13370:	1c59      	adds	r1, r3, #1
   13372:	8011      	strh	r1, [r2, #0]
   13374:	001a      	movs	r2, r3
   13376:	68bb      	ldr	r3, [r7, #8]
   13378:	189b      	adds	r3, r3, r2
   1337a:	781a      	ldrb	r2, [r3, #0]
   1337c:	231e      	movs	r3, #30
   1337e:	18fb      	adds	r3, r7, r3
   13380:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   13382:	68fb      	ldr	r3, [r7, #12]
   13384:	799b      	ldrb	r3, [r3, #6]
   13386:	2b01      	cmp	r3, #1
   13388:	d115      	bne.n	133b6 <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
   1338a:	2326      	movs	r3, #38	; 0x26
   1338c:	18fb      	adds	r3, r7, r3
   1338e:	881b      	ldrh	r3, [r3, #0]
   13390:	2226      	movs	r2, #38	; 0x26
   13392:	18ba      	adds	r2, r7, r2
   13394:	1c59      	adds	r1, r3, #1
   13396:	8011      	strh	r1, [r2, #0]
   13398:	001a      	movs	r2, r3
   1339a:	68bb      	ldr	r3, [r7, #8]
   1339c:	189b      	adds	r3, r3, r2
   1339e:	781b      	ldrb	r3, [r3, #0]
   133a0:	021b      	lsls	r3, r3, #8
   133a2:	b21a      	sxth	r2, r3
   133a4:	231e      	movs	r3, #30
   133a6:	18fb      	adds	r3, r7, r3
   133a8:	2100      	movs	r1, #0
   133aa:	5e5b      	ldrsh	r3, [r3, r1]
   133ac:	4313      	orrs	r3, r2
   133ae:	b21a      	sxth	r2, r3
   133b0:	231e      	movs	r3, #30
   133b2:	18fb      	adds	r3, r7, r3
   133b4:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
   133b6:	231e      	movs	r3, #30
   133b8:	18fb      	adds	r3, r7, r3
   133ba:	881a      	ldrh	r2, [r3, #0]
   133bc:	68fb      	ldr	r3, [r7, #12]
   133be:	0011      	movs	r1, r2
   133c0:	0018      	movs	r0, r3
   133c2:	4b54      	ldr	r3, [pc, #336]	; (13514 <spi_write_buffer_wait+0x318>)
   133c4:	4798      	blx	r3
						length--;
   133c6:	1dbb      	adds	r3, r7, #6
   133c8:	881a      	ldrh	r2, [r3, #0]
   133ca:	1dbb      	adds	r3, r7, #6
   133cc:	3a01      	subs	r2, #1
   133ce:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
   133d0:	68fb      	ldr	r3, [r7, #12]
   133d2:	0018      	movs	r0, r3
   133d4:	4b50      	ldr	r3, [pc, #320]	; (13518 <spi_write_buffer_wait+0x31c>)
   133d6:	4798      	blx	r3
   133d8:	1e03      	subs	r3, r0, #0
   133da:	d107      	bne.n	133ec <spi_write_buffer_wait+0x1f0>

		if (module->receiver_enabled) {
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   133dc:	69bb      	ldr	r3, [r7, #24]
   133de:	3301      	adds	r3, #1
   133e0:	61bb      	str	r3, [r7, #24]
   133e2:	69bb      	ldr	r3, [r7, #24]
   133e4:	4a4a      	ldr	r2, [pc, #296]	; (13510 <spi_write_buffer_wait+0x314>)
   133e6:	4293      	cmp	r3, r2
   133e8:	d9b3      	bls.n	13352 <spi_write_buffer_wait+0x156>
   133ea:	e000      	b.n	133ee <spi_write_buffer_wait+0x1f2>
						/* Write the data to send */
						spi_write(module, data_to_send);
						length--;
					}
					if (spi_is_ready_to_read(module)) {
						break;
   133ec:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
   133ee:	68fb      	ldr	r3, [r7, #12]
   133f0:	0018      	movs	r0, r3
   133f2:	4b44      	ldr	r3, [pc, #272]	; (13504 <spi_write_buffer_wait+0x308>)
   133f4:	4798      	blx	r3
   133f6:	1e03      	subs	r3, r0, #0
   133f8:	d005      	beq.n	13406 <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
   133fa:	68fb      	ldr	r3, [r7, #12]
   133fc:	0018      	movs	r0, r3
   133fe:	4b42      	ldr	r3, [pc, #264]	; (13508 <spi_write_buffer_wait+0x30c>)
   13400:	4798      	blx	r3
					return STATUS_ABORTED;
   13402:	2304      	movs	r3, #4
   13404:	e07a      	b.n	134fc <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
   13406:	68fb      	ldr	r3, [r7, #12]
   13408:	0018      	movs	r0, r3
   1340a:	4b43      	ldr	r3, [pc, #268]	; (13518 <spi_write_buffer_wait+0x31c>)
   1340c:	4798      	blx	r3
   1340e:	0003      	movs	r3, r0
   13410:	001a      	movs	r2, r3
   13412:	2301      	movs	r3, #1
   13414:	4053      	eors	r3, r2
   13416:	b2db      	uxtb	r3, r3
   13418:	2b00      	cmp	r3, #0
   1341a:	d001      	beq.n	13420 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   1341c:	2312      	movs	r3, #18
   1341e:	e06d      	b.n	134fc <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   13420:	46c0      	nop			; (mov r8, r8)
   13422:	68fb      	ldr	r3, [r7, #12]
   13424:	0018      	movs	r0, r3
   13426:	4b3c      	ldr	r3, [pc, #240]	; (13518 <spi_write_buffer_wait+0x31c>)
   13428:	4798      	blx	r3
   1342a:	0003      	movs	r3, r0
   1342c:	001a      	movs	r2, r3
   1342e:	2301      	movs	r3, #1
   13430:	4053      	eors	r3, r2
   13432:	b2db      	uxtb	r3, r3
   13434:	2b00      	cmp	r3, #0
   13436:	d1f4      	bne.n	13422 <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   13438:	2312      	movs	r3, #18
   1343a:	18fa      	adds	r2, r7, r3
   1343c:	68fb      	ldr	r3, [r7, #12]
   1343e:	0011      	movs	r1, r2
   13440:	0018      	movs	r0, r3
   13442:	4b36      	ldr	r3, [pc, #216]	; (1351c <spi_write_buffer_wait+0x320>)
   13444:	4798      	blx	r3
			flush_length--;
   13446:	2324      	movs	r3, #36	; 0x24
   13448:	18fb      	adds	r3, r7, r3
   1344a:	881a      	ldrh	r2, [r3, #0]
   1344c:	2324      	movs	r3, #36	; 0x24
   1344e:	18fb      	adds	r3, r7, r3
   13450:	3a01      	subs	r2, #1
   13452:	801a      	strh	r2, [r3, #0]

	uint16_t tx_pos = 0;
	uint16_t flush_length = length;

	/* Write block */
	while (length--) {
   13454:	1dbb      	adds	r3, r7, #6
   13456:	881b      	ldrh	r3, [r3, #0]
   13458:	1dba      	adds	r2, r7, #6
   1345a:	1e59      	subs	r1, r3, #1
   1345c:	8011      	strh	r1, [r2, #0]
   1345e:	2b00      	cmp	r3, #0
   13460:	d000      	beq.n	13464 <spi_write_buffer_wait+0x268>
   13462:	e6f8      	b.n	13256 <spi_write_buffer_wait+0x5a>
			flush_length--;
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   13464:	68fb      	ldr	r3, [r7, #12]
   13466:	795b      	ldrb	r3, [r3, #5]
   13468:	2b01      	cmp	r3, #1
   1346a:	d10b      	bne.n	13484 <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   1346c:	46c0      	nop			; (mov r8, r8)
   1346e:	68fb      	ldr	r3, [r7, #12]
   13470:	0018      	movs	r0, r3
   13472:	4b24      	ldr	r3, [pc, #144]	; (13504 <spi_write_buffer_wait+0x308>)
   13474:	4798      	blx	r3
   13476:	0003      	movs	r3, r0
   13478:	001a      	movs	r2, r3
   1347a:	2301      	movs	r3, #1
   1347c:	4053      	eors	r3, r2
   1347e:	b2db      	uxtb	r3, r3
   13480:	2b00      	cmp	r3, #0
   13482:	d1f4      	bne.n	1346e <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
   13484:	68fb      	ldr	r3, [r7, #12]
   13486:	795b      	ldrb	r3, [r3, #5]
   13488:	2b00      	cmp	r3, #0
   1348a:	d136      	bne.n	134fa <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
   1348c:	68fb      	ldr	r3, [r7, #12]
   1348e:	79db      	ldrb	r3, [r3, #7]
   13490:	2b00      	cmp	r3, #0
   13492:	d032      	beq.n	134fa <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
   13494:	e02c      	b.n	134f0 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   13496:	2300      	movs	r3, #0
   13498:	617b      	str	r3, [r7, #20]
   1349a:	e008      	b.n	134ae <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
   1349c:	68fb      	ldr	r3, [r7, #12]
   1349e:	0018      	movs	r0, r3
   134a0:	4b1d      	ldr	r3, [pc, #116]	; (13518 <spi_write_buffer_wait+0x31c>)
   134a2:	4798      	blx	r3
   134a4:	1e03      	subs	r3, r0, #0
   134a6:	d107      	bne.n	134b8 <spi_write_buffer_wait+0x2bc>
#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
   134a8:	697b      	ldr	r3, [r7, #20]
   134aa:	3301      	adds	r3, #1
   134ac:	617b      	str	r3, [r7, #20]
   134ae:	697b      	ldr	r3, [r7, #20]
   134b0:	4a17      	ldr	r2, [pc, #92]	; (13510 <spi_write_buffer_wait+0x314>)
   134b2:	4293      	cmp	r3, r2
   134b4:	d9f2      	bls.n	1349c <spi_write_buffer_wait+0x2a0>
   134b6:	e000      	b.n	134ba <spi_write_buffer_wait+0x2be>
					if (spi_is_ready_to_read(module)) {
						break;
   134b8:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
   134ba:	68fb      	ldr	r3, [r7, #12]
   134bc:	0018      	movs	r0, r3
   134be:	4b16      	ldr	r3, [pc, #88]	; (13518 <spi_write_buffer_wait+0x31c>)
   134c0:	4798      	blx	r3
   134c2:	0003      	movs	r3, r0
   134c4:	001a      	movs	r2, r3
   134c6:	2301      	movs	r3, #1
   134c8:	4053      	eors	r3, r2
   134ca:	b2db      	uxtb	r3, r3
   134cc:	2b00      	cmp	r3, #0
   134ce:	d001      	beq.n	134d4 <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
   134d0:	2312      	movs	r3, #18
   134d2:	e013      	b.n	134fc <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
   134d4:	2310      	movs	r3, #16
   134d6:	18fa      	adds	r2, r7, r3
   134d8:	68fb      	ldr	r3, [r7, #12]
   134da:	0011      	movs	r1, r2
   134dc:	0018      	movs	r0, r3
   134de:	4b0f      	ldr	r3, [pc, #60]	; (1351c <spi_write_buffer_wait+0x320>)
   134e0:	4798      	blx	r3
				flush_length--;
   134e2:	2324      	movs	r3, #36	; 0x24
   134e4:	18fb      	adds	r3, r7, r3
   134e6:	881a      	ldrh	r2, [r3, #0]
   134e8:	2324      	movs	r3, #36	; 0x24
   134ea:	18fb      	adds	r3, r7, r3
   134ec:	3a01      	subs	r2, #1
   134ee:	801a      	strh	r2, [r3, #0]
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
		if (module->receiver_enabled) {
			while (flush_length) {
   134f0:	2324      	movs	r3, #36	; 0x24
   134f2:	18fb      	adds	r3, r7, r3
   134f4:	881b      	ldrh	r3, [r3, #0]
   134f6:	2b00      	cmp	r3, #0
   134f8:	d1cd      	bne.n	13496 <spi_write_buffer_wait+0x29a>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   134fa:	2300      	movs	r3, #0
}
   134fc:	0018      	movs	r0, r3
   134fe:	46bd      	mov	sp, r7
   13500:	b00a      	add	sp, #40	; 0x28
   13502:	bd80      	pop	{r7, pc}
   13504:	000129f9 	.word	0x000129f9
   13508:	00012b41 	.word	0x00012b41
   1350c:	00012a21 	.word	0x00012a21
   13510:	00002710 	.word	0x00002710
   13514:	00012a71 	.word	0x00012a71
   13518:	00012a49 	.word	0x00012a49
   1351c:	00012ab9 	.word	0x00012ab9

00013520 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   13520:	b580      	push	{r7, lr}
   13522:	b084      	sub	sp, #16
   13524:	af00      	add	r7, sp, #0
   13526:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13528:	687b      	ldr	r3, [r7, #4]
   1352a:	681b      	ldr	r3, [r3, #0]
   1352c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   1352e:	687b      	ldr	r3, [r7, #4]
   13530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13532:	781b      	ldrb	r3, [r3, #0]
   13534:	b2da      	uxtb	r2, r3
   13536:	230e      	movs	r3, #14
   13538:	18fb      	adds	r3, r7, r3
   1353a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   1353c:	687b      	ldr	r3, [r7, #4]
   1353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13540:	1c5a      	adds	r2, r3, #1
   13542:	687b      	ldr	r3, [r7, #4]
   13544:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   13546:	687b      	ldr	r3, [r7, #4]
   13548:	799b      	ldrb	r3, [r3, #6]
   1354a:	2b01      	cmp	r3, #1
   1354c:	d113      	bne.n	13576 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   1354e:	687b      	ldr	r3, [r7, #4]
   13550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13552:	781b      	ldrb	r3, [r3, #0]
   13554:	b2db      	uxtb	r3, r3
   13556:	021b      	lsls	r3, r3, #8
   13558:	b21a      	sxth	r2, r3
   1355a:	230e      	movs	r3, #14
   1355c:	18fb      	adds	r3, r7, r3
   1355e:	2100      	movs	r1, #0
   13560:	5e5b      	ldrsh	r3, [r3, r1]
   13562:	4313      	orrs	r3, r2
   13564:	b21a      	sxth	r2, r3
   13566:	230e      	movs	r3, #14
   13568:	18fb      	adds	r3, r7, r3
   1356a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   1356c:	687b      	ldr	r3, [r7, #4]
   1356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13570:	1c5a      	adds	r2, r3, #1
   13572:	687b      	ldr	r3, [r7, #4]
   13574:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   13576:	230e      	movs	r3, #14
   13578:	18fb      	adds	r3, r7, r3
   1357a:	881b      	ldrh	r3, [r3, #0]
   1357c:	05db      	lsls	r3, r3, #23
   1357e:	0dda      	lsrs	r2, r3, #23
   13580:	68bb      	ldr	r3, [r7, #8]
   13582:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   13584:	687b      	ldr	r3, [r7, #4]
   13586:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   13588:	b29b      	uxth	r3, r3
   1358a:	3b01      	subs	r3, #1
   1358c:	b29a      	uxth	r2, r3
   1358e:	687b      	ldr	r3, [r7, #4]
   13590:	869a      	strh	r2, [r3, #52]	; 0x34
}
   13592:	46c0      	nop			; (mov r8, r8)
   13594:	46bd      	mov	sp, r7
   13596:	b004      	add	sp, #16
   13598:	bd80      	pop	{r7, pc}
   1359a:	46c0      	nop			; (mov r8, r8)

0001359c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   1359c:	b580      	push	{r7, lr}
   1359e:	b084      	sub	sp, #16
   135a0:	af00      	add	r7, sp, #0
   135a2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   135a4:	687b      	ldr	r3, [r7, #4]
   135a6:	681b      	ldr	r3, [r3, #0]
   135a8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   135aa:	4b08      	ldr	r3, [pc, #32]	; (135cc <_spi_write_dummy+0x30>)
   135ac:	881b      	ldrh	r3, [r3, #0]
   135ae:	001a      	movs	r2, r3
   135b0:	68fb      	ldr	r3, [r7, #12]
   135b2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   135b4:	687b      	ldr	r3, [r7, #4]
   135b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   135b8:	b29b      	uxth	r3, r3
   135ba:	3b01      	subs	r3, #1
   135bc:	b29a      	uxth	r2, r3
   135be:	687b      	ldr	r3, [r7, #4]
   135c0:	865a      	strh	r2, [r3, #50]	; 0x32
}
   135c2:	46c0      	nop			; (mov r8, r8)
   135c4:	46bd      	mov	sp, r7
   135c6:	b004      	add	sp, #16
   135c8:	bd80      	pop	{r7, pc}
   135ca:	46c0      	nop			; (mov r8, r8)
   135cc:	200003cc 	.word	0x200003cc

000135d0 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   135d0:	b580      	push	{r7, lr}
   135d2:	b084      	sub	sp, #16
   135d4:	af00      	add	r7, sp, #0
   135d6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   135d8:	687b      	ldr	r3, [r7, #4]
   135da:	681b      	ldr	r3, [r3, #0]
   135dc:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   135de:	230a      	movs	r3, #10
   135e0:	18fb      	adds	r3, r7, r3
   135e2:	2200      	movs	r2, #0
   135e4:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   135e6:	68fb      	ldr	r3, [r7, #12]
   135e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   135ea:	230a      	movs	r3, #10
   135ec:	18fb      	adds	r3, r7, r3
   135ee:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   135f0:	687b      	ldr	r3, [r7, #4]
   135f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   135f4:	b29b      	uxth	r3, r3
   135f6:	3b01      	subs	r3, #1
   135f8:	b29a      	uxth	r2, r3
   135fa:	687b      	ldr	r3, [r7, #4]
   135fc:	865a      	strh	r2, [r3, #50]	; 0x32
}
   135fe:	46c0      	nop			; (mov r8, r8)
   13600:	46bd      	mov	sp, r7
   13602:	b004      	add	sp, #16
   13604:	bd80      	pop	{r7, pc}
   13606:	46c0      	nop			; (mov r8, r8)

00013608 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   13608:	b580      	push	{r7, lr}
   1360a:	b084      	sub	sp, #16
   1360c:	af00      	add	r7, sp, #0
   1360e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13610:	687b      	ldr	r3, [r7, #4]
   13612:	681b      	ldr	r3, [r3, #0]
   13614:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   13616:	68fb      	ldr	r3, [r7, #12]
   13618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1361a:	b29a      	uxth	r2, r3
   1361c:	230a      	movs	r3, #10
   1361e:	18fb      	adds	r3, r7, r3
   13620:	05d2      	lsls	r2, r2, #23
   13622:	0dd2      	lsrs	r2, r2, #23
   13624:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   13626:	687b      	ldr	r3, [r7, #4]
   13628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1362a:	220a      	movs	r2, #10
   1362c:	18ba      	adds	r2, r7, r2
   1362e:	8812      	ldrh	r2, [r2, #0]
   13630:	b2d2      	uxtb	r2, r2
   13632:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   13634:	687b      	ldr	r3, [r7, #4]
   13636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13638:	1c5a      	adds	r2, r3, #1
   1363a:	687b      	ldr	r3, [r7, #4]
   1363c:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1363e:	687b      	ldr	r3, [r7, #4]
   13640:	799b      	ldrb	r3, [r3, #6]
   13642:	2b01      	cmp	r3, #1
   13644:	d10d      	bne.n	13662 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   13646:	687b      	ldr	r3, [r7, #4]
   13648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1364a:	220a      	movs	r2, #10
   1364c:	18ba      	adds	r2, r7, r2
   1364e:	8812      	ldrh	r2, [r2, #0]
   13650:	0a12      	lsrs	r2, r2, #8
   13652:	b292      	uxth	r2, r2
   13654:	b2d2      	uxtb	r2, r2
   13656:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   13658:	687b      	ldr	r3, [r7, #4]
   1365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1365c:	1c5a      	adds	r2, r3, #1
   1365e:	687b      	ldr	r3, [r7, #4]
   13660:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   13662:	687b      	ldr	r3, [r7, #4]
   13664:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   13666:	b29b      	uxth	r3, r3
   13668:	3b01      	subs	r3, #1
   1366a:	b29a      	uxth	r2, r3
   1366c:	687b      	ldr	r3, [r7, #4]
   1366e:	861a      	strh	r2, [r3, #48]	; 0x30
}
   13670:	46c0      	nop			; (mov r8, r8)
   13672:	46bd      	mov	sp, r7
   13674:	b004      	add	sp, #16
   13676:	bd80      	pop	{r7, pc}

00013678 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   13678:	b580      	push	{r7, lr}
   1367a:	b086      	sub	sp, #24
   1367c:	af00      	add	r7, sp, #0
   1367e:	0002      	movs	r2, r0
   13680:	1dfb      	adds	r3, r7, #7
   13682:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   13684:	1dfb      	adds	r3, r7, #7
   13686:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
   13688:	4bb9      	ldr	r3, [pc, #740]	; (13970 <_spi_interrupt_handler+0x2f8>)
   1368a:	0092      	lsls	r2, r2, #2
   1368c:	58d3      	ldr	r3, [r2, r3]
   1368e:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   13690:	697b      	ldr	r3, [r7, #20]
   13692:	681b      	ldr	r3, [r3, #0]
   13694:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   13696:	697b      	ldr	r3, [r7, #20]
   13698:	2237      	movs	r2, #55	; 0x37
   1369a:	5c9a      	ldrb	r2, [r3, r2]
   1369c:	697b      	ldr	r3, [r7, #20]
   1369e:	2136      	movs	r1, #54	; 0x36
   136a0:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
   136a2:	230f      	movs	r3, #15
   136a4:	18fb      	adds	r3, r7, r3
   136a6:	400a      	ands	r2, r1
   136a8:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   136aa:	693b      	ldr	r3, [r7, #16]
   136ac:	7e1b      	ldrb	r3, [r3, #24]
   136ae:	b2da      	uxtb	r2, r3
   136b0:	230c      	movs	r3, #12
   136b2:	18fb      	adds	r3, r7, r3
   136b4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   136b6:	693b      	ldr	r3, [r7, #16]
   136b8:	7d9b      	ldrb	r3, [r3, #22]
   136ba:	b2db      	uxtb	r3, r3
   136bc:	b29a      	uxth	r2, r3
   136be:	230c      	movs	r3, #12
   136c0:	18fb      	adds	r3, r7, r3
   136c2:	210c      	movs	r1, #12
   136c4:	1879      	adds	r1, r7, r1
   136c6:	8809      	ldrh	r1, [r1, #0]
   136c8:	400a      	ands	r2, r1
   136ca:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   136cc:	230c      	movs	r3, #12
   136ce:	18fb      	adds	r3, r7, r3
   136d0:	881b      	ldrh	r3, [r3, #0]
   136d2:	2201      	movs	r2, #1
   136d4:	4013      	ands	r3, r2
   136d6:	d041      	beq.n	1375c <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   136d8:	697b      	ldr	r3, [r7, #20]
   136da:	795b      	ldrb	r3, [r3, #5]
   136dc:	2b01      	cmp	r3, #1
   136de:	d110      	bne.n	13702 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   136e0:	697b      	ldr	r3, [r7, #20]
   136e2:	7a5b      	ldrb	r3, [r3, #9]
   136e4:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   136e6:	2b00      	cmp	r3, #0
   136e8:	d10b      	bne.n	13702 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   136ea:	697b      	ldr	r3, [r7, #20]
   136ec:	0018      	movs	r0, r3
   136ee:	4ba1      	ldr	r3, [pc, #644]	; (13974 <_spi_interrupt_handler+0x2fc>)
   136f0:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   136f2:	697b      	ldr	r3, [r7, #20]
   136f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   136f6:	b29b      	uxth	r3, r3
   136f8:	2b00      	cmp	r3, #0
   136fa:	d102      	bne.n	13702 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   136fc:	693b      	ldr	r3, [r7, #16]
   136fe:	2201      	movs	r2, #1
   13700:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   13702:	697b      	ldr	r3, [r7, #20]
   13704:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
   13706:	2b01      	cmp	r3, #1
   13708:	d104      	bne.n	13714 <_spi_interrupt_handler+0x9c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
   1370a:	697b      	ldr	r3, [r7, #20]
   1370c:	7a5b      	ldrb	r3, [r3, #9]
   1370e:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   13710:	2b00      	cmp	r3, #0
   13712:	d108      	bne.n	13726 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
   13714:	697b      	ldr	r3, [r7, #20]
   13716:	795b      	ldrb	r3, [r3, #5]
   13718:	2b00      	cmp	r3, #0
   1371a:	d11f      	bne.n	1375c <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
   1371c:	697b      	ldr	r3, [r7, #20]
   1371e:	7a5b      	ldrb	r3, [r3, #9]
   13720:	b2db      	uxtb	r3, r3
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
   13722:	2b00      	cmp	r3, #0
   13724:	d01a      	beq.n	1375c <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   13726:	697b      	ldr	r3, [r7, #20]
   13728:	0018      	movs	r0, r3
   1372a:	4b93      	ldr	r3, [pc, #588]	; (13978 <_spi_interrupt_handler+0x300>)
   1372c:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   1372e:	697b      	ldr	r3, [r7, #20]
   13730:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   13732:	b29b      	uxth	r3, r3
   13734:	2b00      	cmp	r3, #0
   13736:	d111      	bne.n	1375c <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   13738:	693b      	ldr	r3, [r7, #16]
   1373a:	2201      	movs	r2, #1
   1373c:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   1373e:	697b      	ldr	r3, [r7, #20]
   13740:	7a5b      	ldrb	r3, [r3, #9]
   13742:	b2db      	uxtb	r3, r3
   13744:	2b01      	cmp	r3, #1
   13746:	d109      	bne.n	1375c <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
   13748:	697b      	ldr	r3, [r7, #20]
   1374a:	79db      	ldrb	r3, [r3, #7]
   1374c:	2201      	movs	r2, #1
   1374e:	4053      	eors	r3, r2
   13750:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
   13752:	2b00      	cmp	r3, #0
   13754:	d002      	beq.n	1375c <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   13756:	693b      	ldr	r3, [r7, #16]
   13758:	2202      	movs	r2, #2
   1375a:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   1375c:	230c      	movs	r3, #12
   1375e:	18fb      	adds	r3, r7, r3
   13760:	881b      	ldrh	r3, [r3, #0]
   13762:	2204      	movs	r2, #4
   13764:	4013      	ands	r3, r2
   13766:	d100      	bne.n	1376a <_spi_interrupt_handler+0xf2>
   13768:	e07e      	b.n	13868 <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1376a:	693b      	ldr	r3, [r7, #16]
   1376c:	8b5b      	ldrh	r3, [r3, #26]
   1376e:	b29b      	uxth	r3, r3
   13770:	001a      	movs	r2, r3
   13772:	2304      	movs	r3, #4
   13774:	4013      	ands	r3, r2
   13776:	d022      	beq.n	137be <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
   13778:	697b      	ldr	r3, [r7, #20]
   1377a:	7a5b      	ldrb	r3, [r3, #9]
   1377c:	b2db      	uxtb	r3, r3
   1377e:	2b01      	cmp	r3, #1
   13780:	d014      	beq.n	137ac <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   13782:	697b      	ldr	r3, [r7, #20]
   13784:	2238      	movs	r2, #56	; 0x38
   13786:	211e      	movs	r1, #30
   13788:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   1378a:	697b      	ldr	r3, [r7, #20]
   1378c:	2203      	movs	r2, #3
   1378e:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   13790:	693b      	ldr	r3, [r7, #16]
   13792:	2205      	movs	r2, #5
   13794:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   13796:	230f      	movs	r3, #15
   13798:	18fb      	adds	r3, r7, r3
   1379a:	781b      	ldrb	r3, [r3, #0]
   1379c:	2208      	movs	r2, #8
   1379e:	4013      	ands	r3, r2
   137a0:	d004      	beq.n	137ac <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   137a2:	697b      	ldr	r3, [r7, #20]
   137a4:	699b      	ldr	r3, [r3, #24]
   137a6:	697a      	ldr	r2, [r7, #20]
   137a8:	0010      	movs	r0, r2
   137aa:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   137ac:	693b      	ldr	r3, [r7, #16]
   137ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   137b0:	230a      	movs	r3, #10
   137b2:	18fb      	adds	r3, r7, r3
   137b4:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   137b6:	693b      	ldr	r3, [r7, #16]
   137b8:	2204      	movs	r2, #4
   137ba:	835a      	strh	r2, [r3, #26]
   137bc:	e054      	b.n	13868 <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   137be:	697b      	ldr	r3, [r7, #20]
   137c0:	7a5b      	ldrb	r3, [r3, #9]
   137c2:	b2db      	uxtb	r3, r3
   137c4:	2b01      	cmp	r3, #1
   137c6:	d11e      	bne.n	13806 <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   137c8:	697b      	ldr	r3, [r7, #20]
   137ca:	0018      	movs	r0, r3
   137cc:	4b6b      	ldr	r3, [pc, #428]	; (1397c <_spi_interrupt_handler+0x304>)
   137ce:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   137d0:	697b      	ldr	r3, [r7, #20]
   137d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   137d4:	b29b      	uxth	r3, r3
   137d6:	2b00      	cmp	r3, #0
   137d8:	d146      	bne.n	13868 <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   137da:	693b      	ldr	r3, [r7, #16]
   137dc:	2204      	movs	r2, #4
   137de:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   137e0:	697b      	ldr	r3, [r7, #20]
   137e2:	2238      	movs	r2, #56	; 0x38
   137e4:	2100      	movs	r1, #0
   137e6:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   137e8:	697b      	ldr	r3, [r7, #20]
   137ea:	2203      	movs	r2, #3
   137ec:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   137ee:	230f      	movs	r3, #15
   137f0:	18fb      	adds	r3, r7, r3
   137f2:	781b      	ldrb	r3, [r3, #0]
   137f4:	2201      	movs	r2, #1
   137f6:	4013      	ands	r3, r2
   137f8:	d036      	beq.n	13868 <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   137fa:	697b      	ldr	r3, [r7, #20]
   137fc:	68db      	ldr	r3, [r3, #12]
   137fe:	697a      	ldr	r2, [r7, #20]
   13800:	0010      	movs	r0, r2
   13802:	4798      	blx	r3
   13804:	e030      	b.n	13868 <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   13806:	697b      	ldr	r3, [r7, #20]
   13808:	0018      	movs	r0, r3
   1380a:	4b5d      	ldr	r3, [pc, #372]	; (13980 <_spi_interrupt_handler+0x308>)
   1380c:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   1380e:	697b      	ldr	r3, [r7, #20]
   13810:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   13812:	b29b      	uxth	r3, r3
   13814:	2b00      	cmp	r3, #0
   13816:	d127      	bne.n	13868 <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
   13818:	697b      	ldr	r3, [r7, #20]
   1381a:	2238      	movs	r2, #56	; 0x38
   1381c:	2100      	movs	r1, #0
   1381e:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   13820:	693b      	ldr	r3, [r7, #16]
   13822:	2204      	movs	r2, #4
   13824:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   13826:	697b      	ldr	r3, [r7, #20]
   13828:	7a5b      	ldrb	r3, [r3, #9]
   1382a:	b2db      	uxtb	r3, r3
   1382c:	2b02      	cmp	r3, #2
   1382e:	d10b      	bne.n	13848 <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   13830:	230f      	movs	r3, #15
   13832:	18fb      	adds	r3, r7, r3
   13834:	781b      	ldrb	r3, [r3, #0]
   13836:	2204      	movs	r2, #4
   13838:	4013      	ands	r3, r2
   1383a:	d015      	beq.n	13868 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   1383c:	697b      	ldr	r3, [r7, #20]
   1383e:	695b      	ldr	r3, [r3, #20]
   13840:	697a      	ldr	r2, [r7, #20]
   13842:	0010      	movs	r0, r2
   13844:	4798      	blx	r3
   13846:	e00f      	b.n	13868 <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   13848:	697b      	ldr	r3, [r7, #20]
   1384a:	7a5b      	ldrb	r3, [r3, #9]
   1384c:	b2db      	uxtb	r3, r3
   1384e:	2b00      	cmp	r3, #0
   13850:	d10a      	bne.n	13868 <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   13852:	230f      	movs	r3, #15
   13854:	18fb      	adds	r3, r7, r3
   13856:	781b      	ldrb	r3, [r3, #0]
   13858:	2202      	movs	r2, #2
   1385a:	4013      	ands	r3, r2
   1385c:	d004      	beq.n	13868 <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   1385e:	697b      	ldr	r3, [r7, #20]
   13860:	691b      	ldr	r3, [r3, #16]
   13862:	697a      	ldr	r2, [r7, #20]
   13864:	0010      	movs	r0, r2
   13866:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   13868:	230c      	movs	r3, #12
   1386a:	18fb      	adds	r3, r7, r3
   1386c:	881b      	ldrh	r3, [r3, #0]
   1386e:	2202      	movs	r2, #2
   13870:	4013      	ands	r3, r2
   13872:	d046      	beq.n	13902 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
   13874:	697b      	ldr	r3, [r7, #20]
   13876:	795b      	ldrb	r3, [r3, #5]
   13878:	2b00      	cmp	r3, #0
   1387a:	d11d      	bne.n	138b8 <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
   1387c:	693b      	ldr	r3, [r7, #16]
   1387e:	2207      	movs	r2, #7
   13880:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   13882:	693b      	ldr	r3, [r7, #16]
   13884:	2202      	movs	r2, #2
   13886:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
   13888:	697b      	ldr	r3, [r7, #20]
   1388a:	2203      	movs	r2, #3
   1388c:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
   1388e:	697b      	ldr	r3, [r7, #20]
   13890:	2200      	movs	r2, #0
   13892:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
   13894:	697b      	ldr	r3, [r7, #20]
   13896:	2200      	movs	r2, #0
   13898:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
   1389a:	697b      	ldr	r3, [r7, #20]
   1389c:	2238      	movs	r2, #56	; 0x38
   1389e:	2100      	movs	r1, #0
   138a0:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
   138a2:	230f      	movs	r3, #15
   138a4:	18fb      	adds	r3, r7, r3
   138a6:	781b      	ldrb	r3, [r3, #0]
   138a8:	2210      	movs	r2, #16
   138aa:	4013      	ands	r3, r2
   138ac:	d004      	beq.n	138b8 <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
   138ae:	697b      	ldr	r3, [r7, #20]
   138b0:	69db      	ldr	r3, [r3, #28]
   138b2:	697a      	ldr	r2, [r7, #20]
   138b4:	0010      	movs	r0, r2
   138b6:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   138b8:	697b      	ldr	r3, [r7, #20]
   138ba:	795b      	ldrb	r3, [r3, #5]
   138bc:	2b01      	cmp	r3, #1
   138be:	d120      	bne.n	13902 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   138c0:	697b      	ldr	r3, [r7, #20]
   138c2:	7a5b      	ldrb	r3, [r3, #9]
   138c4:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   138c6:	2b01      	cmp	r3, #1
   138c8:	d11b      	bne.n	13902 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   138ca:	697b      	ldr	r3, [r7, #20]
   138cc:	79db      	ldrb	r3, [r3, #7]
   138ce:	2201      	movs	r2, #1
   138d0:	4053      	eors	r3, r2
   138d2:	b2db      	uxtb	r3, r3
   138d4:	2b00      	cmp	r3, #0
   138d6:	d014      	beq.n	13902 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   138d8:	693b      	ldr	r3, [r7, #16]
   138da:	2202      	movs	r2, #2
   138dc:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   138de:	697b      	ldr	r3, [r7, #20]
   138e0:	2203      	movs	r2, #3
   138e2:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   138e4:	697b      	ldr	r3, [r7, #20]
   138e6:	2238      	movs	r2, #56	; 0x38
   138e8:	2100      	movs	r1, #0
   138ea:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   138ec:	230f      	movs	r3, #15
   138ee:	18fb      	adds	r3, r7, r3
   138f0:	781b      	ldrb	r3, [r3, #0]
   138f2:	2201      	movs	r2, #1
   138f4:	4013      	ands	r3, r2
   138f6:	d004      	beq.n	13902 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   138f8:	697b      	ldr	r3, [r7, #20]
   138fa:	68db      	ldr	r3, [r3, #12]
   138fc:	697a      	ldr	r2, [r7, #20]
   138fe:	0010      	movs	r0, r2
   13900:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
   13902:	230c      	movs	r3, #12
   13904:	18fb      	adds	r3, r7, r3
   13906:	881b      	ldrh	r3, [r3, #0]
   13908:	2208      	movs	r2, #8
   1390a:	4013      	ands	r3, r2
   1390c:	d014      	beq.n	13938 <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
   1390e:	697b      	ldr	r3, [r7, #20]
   13910:	795b      	ldrb	r3, [r3, #5]
   13912:	2b00      	cmp	r3, #0
   13914:	d110      	bne.n	13938 <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
   13916:	693b      	ldr	r3, [r7, #16]
   13918:	2208      	movs	r2, #8
   1391a:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
   1391c:	693b      	ldr	r3, [r7, #16]
   1391e:	2208      	movs	r2, #8
   13920:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
   13922:	230f      	movs	r3, #15
   13924:	18fb      	adds	r3, r7, r3
   13926:	781b      	ldrb	r3, [r3, #0]
   13928:	2220      	movs	r2, #32
   1392a:	4013      	ands	r3, r2
   1392c:	d004      	beq.n	13938 <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
   1392e:	697b      	ldr	r3, [r7, #20]
   13930:	6a1b      	ldr	r3, [r3, #32]
   13932:	697a      	ldr	r2, [r7, #20]
   13934:	0010      	movs	r0, r2
   13936:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   13938:	230c      	movs	r3, #12
   1393a:	18fb      	adds	r3, r7, r3
   1393c:	881b      	ldrh	r3, [r3, #0]
   1393e:	2280      	movs	r2, #128	; 0x80
   13940:	4013      	ands	r3, r2
   13942:	d010      	beq.n	13966 <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   13944:	693b      	ldr	r3, [r7, #16]
   13946:	2280      	movs	r2, #128	; 0x80
   13948:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   1394a:	693b      	ldr	r3, [r7, #16]
   1394c:	2280      	movs	r2, #128	; 0x80
   1394e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   13950:	230f      	movs	r3, #15
   13952:	18fb      	adds	r3, r7, r3
   13954:	781b      	ldrb	r3, [r3, #0]
   13956:	2240      	movs	r2, #64	; 0x40
   13958:	4013      	ands	r3, r2
   1395a:	d004      	beq.n	13966 <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   1395c:	697b      	ldr	r3, [r7, #20]
   1395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13960:	697a      	ldr	r2, [r7, #20]
   13962:	0010      	movs	r0, r2
   13964:	4798      	blx	r3
		}
	}
#  endif
}
   13966:	46c0      	nop			; (mov r8, r8)
   13968:	46bd      	mov	sp, r7
   1396a:	b006      	add	sp, #24
   1396c:	bd80      	pop	{r7, pc}
   1396e:	46c0      	nop			; (mov r8, r8)
   13970:	200003b4 	.word	0x200003b4
   13974:	0001359d 	.word	0x0001359d
   13978:	00013521 	.word	0x00013521
   1397c:	000135d1 	.word	0x000135d1
   13980:	00013609 	.word	0x00013609

00013984 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   13984:	b580      	push	{r7, lr}
   13986:	b082      	sub	sp, #8
   13988:	af00      	add	r7, sp, #0
   1398a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1398c:	687b      	ldr	r3, [r7, #4]
   1398e:	2200      	movs	r2, #0
   13990:	701a      	strb	r2, [r3, #0]
}
   13992:	46c0      	nop			; (mov r8, r8)
   13994:	46bd      	mov	sp, r7
   13996:	b002      	add	sp, #8
   13998:	bd80      	pop	{r7, pc}
   1399a:	46c0      	nop			; (mov r8, r8)

0001399c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1399c:	b580      	push	{r7, lr}
   1399e:	b082      	sub	sp, #8
   139a0:	af00      	add	r7, sp, #0
   139a2:	0002      	movs	r2, r0
   139a4:	6039      	str	r1, [r7, #0]
   139a6:	1dfb      	adds	r3, r7, #7
   139a8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   139aa:	1dfb      	adds	r3, r7, #7
   139ac:	781b      	ldrb	r3, [r3, #0]
   139ae:	2b01      	cmp	r3, #1
   139b0:	d00a      	beq.n	139c8 <system_apb_clock_set_mask+0x2c>
   139b2:	2b02      	cmp	r3, #2
   139b4:	d00f      	beq.n	139d6 <system_apb_clock_set_mask+0x3a>
   139b6:	2b00      	cmp	r3, #0
   139b8:	d114      	bne.n	139e4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   139ba:	4b0e      	ldr	r3, [pc, #56]	; (139f4 <system_apb_clock_set_mask+0x58>)
   139bc:	4a0d      	ldr	r2, [pc, #52]	; (139f4 <system_apb_clock_set_mask+0x58>)
   139be:	6991      	ldr	r1, [r2, #24]
   139c0:	683a      	ldr	r2, [r7, #0]
   139c2:	430a      	orrs	r2, r1
   139c4:	619a      	str	r2, [r3, #24]
			break;
   139c6:	e00f      	b.n	139e8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   139c8:	4b0a      	ldr	r3, [pc, #40]	; (139f4 <system_apb_clock_set_mask+0x58>)
   139ca:	4a0a      	ldr	r2, [pc, #40]	; (139f4 <system_apb_clock_set_mask+0x58>)
   139cc:	69d1      	ldr	r1, [r2, #28]
   139ce:	683a      	ldr	r2, [r7, #0]
   139d0:	430a      	orrs	r2, r1
   139d2:	61da      	str	r2, [r3, #28]
			break;
   139d4:	e008      	b.n	139e8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   139d6:	4b07      	ldr	r3, [pc, #28]	; (139f4 <system_apb_clock_set_mask+0x58>)
   139d8:	4a06      	ldr	r2, [pc, #24]	; (139f4 <system_apb_clock_set_mask+0x58>)
   139da:	6a11      	ldr	r1, [r2, #32]
   139dc:	683a      	ldr	r2, [r7, #0]
   139de:	430a      	orrs	r2, r1
   139e0:	621a      	str	r2, [r3, #32]
			break;
   139e2:	e001      	b.n	139e8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   139e4:	2317      	movs	r3, #23
   139e6:	e000      	b.n	139ea <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   139e8:	2300      	movs	r3, #0
}
   139ea:	0018      	movs	r0, r3
   139ec:	46bd      	mov	sp, r7
   139ee:	b002      	add	sp, #8
   139f0:	bd80      	pop	{r7, pc}
   139f2:	46c0      	nop			; (mov r8, r8)
   139f4:	40000400 	.word	0x40000400

000139f8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
   139f8:	b580      	push	{r7, lr}
   139fa:	b082      	sub	sp, #8
   139fc:	af00      	add	r7, sp, #0
   139fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
   13a00:	687b      	ldr	r3, [r7, #4]
   13a02:	2280      	movs	r2, #128	; 0x80
   13a04:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13a06:	687b      	ldr	r3, [r7, #4]
   13a08:	2200      	movs	r2, #0
   13a0a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   13a0c:	687b      	ldr	r3, [r7, #4]
   13a0e:	2201      	movs	r2, #1
   13a10:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   13a12:	687b      	ldr	r3, [r7, #4]
   13a14:	2200      	movs	r2, #0
   13a16:	70da      	strb	r2, [r3, #3]
}
   13a18:	46c0      	nop			; (mov r8, r8)
   13a1a:	46bd      	mov	sp, r7
   13a1c:	b002      	add	sp, #8
   13a1e:	bd80      	pop	{r7, pc}

00013a20 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   13a20:	b580      	push	{r7, lr}
   13a22:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   13a24:	4b05      	ldr	r3, [pc, #20]	; (13a3c <system_is_debugger_present+0x1c>)
   13a26:	789b      	ldrb	r3, [r3, #2]
   13a28:	b2db      	uxtb	r3, r3
   13a2a:	001a      	movs	r2, r3
   13a2c:	2302      	movs	r3, #2
   13a2e:	4013      	ands	r3, r2
   13a30:	1e5a      	subs	r2, r3, #1
   13a32:	4193      	sbcs	r3, r2
   13a34:	b2db      	uxtb	r3, r3
}
   13a36:	0018      	movs	r0, r3
   13a38:	46bd      	mov	sp, r7
   13a3a:	bd80      	pop	{r7, pc}
   13a3c:	41002000 	.word	0x41002000

00013a40 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   13a40:	b580      	push	{r7, lr}
   13a42:	b084      	sub	sp, #16
   13a44:	af00      	add	r7, sp, #0
   13a46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   13a48:	687b      	ldr	r3, [r7, #4]
   13a4a:	681b      	ldr	r3, [r3, #0]
   13a4c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   13a4e:	68fb      	ldr	r3, [r7, #12]
   13a50:	69db      	ldr	r3, [r3, #28]
   13a52:	1e5a      	subs	r2, r3, #1
   13a54:	4193      	sbcs	r3, r2
   13a56:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   13a58:	0018      	movs	r0, r3
   13a5a:	46bd      	mov	sp, r7
   13a5c:	b004      	add	sp, #16
   13a5e:	bd80      	pop	{r7, pc}

00013a60 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   13a60:	b580      	push	{r7, lr}
   13a62:	b082      	sub	sp, #8
   13a64:	af00      	add	r7, sp, #0
   13a66:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   13a68:	46c0      	nop			; (mov r8, r8)
   13a6a:	687b      	ldr	r3, [r7, #4]
   13a6c:	0018      	movs	r0, r3
   13a6e:	4b04      	ldr	r3, [pc, #16]	; (13a80 <_usart_wait_for_sync+0x20>)
   13a70:	4798      	blx	r3
   13a72:	1e03      	subs	r3, r0, #0
   13a74:	d1f9      	bne.n	13a6a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   13a76:	46c0      	nop			; (mov r8, r8)
   13a78:	46bd      	mov	sp, r7
   13a7a:	b002      	add	sp, #8
   13a7c:	bd80      	pop	{r7, pc}
   13a7e:	46c0      	nop			; (mov r8, r8)
   13a80:	00013a41 	.word	0x00013a41

00013a84 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   13a84:	b5b0      	push	{r4, r5, r7, lr}
   13a86:	b08c      	sub	sp, #48	; 0x30
   13a88:	af02      	add	r7, sp, #8
   13a8a:	6078      	str	r0, [r7, #4]
   13a8c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13a8e:	687b      	ldr	r3, [r7, #4]
   13a90:	681b      	ldr	r3, [r3, #0]
   13a92:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13a94:	687b      	ldr	r3, [r7, #4]
   13a96:	681b      	ldr	r3, [r3, #0]
   13a98:	0018      	movs	r0, r3
   13a9a:	4bab      	ldr	r3, [pc, #684]	; (13d48 <_usart_set_config+0x2c4>)
   13a9c:	4798      	blx	r3
   13a9e:	0003      	movs	r3, r0
   13aa0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13aa2:	697b      	ldr	r3, [r7, #20]
   13aa4:	3314      	adds	r3, #20
   13aa6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   13aa8:	2300      	movs	r3, #0
   13aaa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   13aac:	2300      	movs	r3, #0
   13aae:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   13ab0:	230a      	movs	r3, #10
   13ab2:	18fb      	adds	r3, r7, r3
   13ab4:	2200      	movs	r2, #0
   13ab6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13ab8:	231f      	movs	r3, #31
   13aba:	18fb      	adds	r3, r7, r3
   13abc:	2200      	movs	r2, #0
   13abe:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   13ac0:	231e      	movs	r3, #30
   13ac2:	18fb      	adds	r3, r7, r3
   13ac4:	2210      	movs	r2, #16
   13ac6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   13ac8:	683b      	ldr	r3, [r7, #0]
   13aca:	8a1b      	ldrh	r3, [r3, #16]
   13acc:	2280      	movs	r2, #128	; 0x80
   13ace:	01d2      	lsls	r2, r2, #7
   13ad0:	4293      	cmp	r3, r2
   13ad2:	d01c      	beq.n	13b0e <_usart_set_config+0x8a>
   13ad4:	2280      	movs	r2, #128	; 0x80
   13ad6:	01d2      	lsls	r2, r2, #7
   13ad8:	4293      	cmp	r3, r2
   13ada:	dc06      	bgt.n	13aea <_usart_set_config+0x66>
   13adc:	2b00      	cmp	r3, #0
   13ade:	d00d      	beq.n	13afc <_usart_set_config+0x78>
   13ae0:	2280      	movs	r2, #128	; 0x80
   13ae2:	0192      	lsls	r2, r2, #6
   13ae4:	4293      	cmp	r3, r2
   13ae6:	d024      	beq.n	13b32 <_usart_set_config+0xae>
   13ae8:	e035      	b.n	13b56 <_usart_set_config+0xd2>
   13aea:	22c0      	movs	r2, #192	; 0xc0
   13aec:	01d2      	lsls	r2, r2, #7
   13aee:	4293      	cmp	r3, r2
   13af0:	d028      	beq.n	13b44 <_usart_set_config+0xc0>
   13af2:	2280      	movs	r2, #128	; 0x80
   13af4:	0212      	lsls	r2, r2, #8
   13af6:	4293      	cmp	r3, r2
   13af8:	d012      	beq.n	13b20 <_usart_set_config+0x9c>
   13afa:	e02c      	b.n	13b56 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13afc:	231f      	movs	r3, #31
   13afe:	18fb      	adds	r3, r7, r3
   13b00:	2200      	movs	r2, #0
   13b02:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   13b04:	231e      	movs	r3, #30
   13b06:	18fb      	adds	r3, r7, r3
   13b08:	2210      	movs	r2, #16
   13b0a:	701a      	strb	r2, [r3, #0]
			break;
   13b0c:	e023      	b.n	13b56 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13b0e:	231f      	movs	r3, #31
   13b10:	18fb      	adds	r3, r7, r3
   13b12:	2200      	movs	r2, #0
   13b14:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   13b16:	231e      	movs	r3, #30
   13b18:	18fb      	adds	r3, r7, r3
   13b1a:	2208      	movs	r2, #8
   13b1c:	701a      	strb	r2, [r3, #0]
			break;
   13b1e:	e01a      	b.n	13b56 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   13b20:	231f      	movs	r3, #31
   13b22:	18fb      	adds	r3, r7, r3
   13b24:	2200      	movs	r2, #0
   13b26:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   13b28:	231e      	movs	r3, #30
   13b2a:	18fb      	adds	r3, r7, r3
   13b2c:	2203      	movs	r2, #3
   13b2e:	701a      	strb	r2, [r3, #0]
			break;
   13b30:	e011      	b.n	13b56 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   13b32:	231f      	movs	r3, #31
   13b34:	18fb      	adds	r3, r7, r3
   13b36:	2201      	movs	r2, #1
   13b38:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   13b3a:	231e      	movs	r3, #30
   13b3c:	18fb      	adds	r3, r7, r3
   13b3e:	2210      	movs	r2, #16
   13b40:	701a      	strb	r2, [r3, #0]
			break;
   13b42:	e008      	b.n	13b56 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   13b44:	231f      	movs	r3, #31
   13b46:	18fb      	adds	r3, r7, r3
   13b48:	2201      	movs	r2, #1
   13b4a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   13b4c:	231e      	movs	r3, #30
   13b4e:	18fb      	adds	r3, r7, r3
   13b50:	2208      	movs	r2, #8
   13b52:	701a      	strb	r2, [r3, #0]
			break;
   13b54:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   13b56:	683b      	ldr	r3, [r7, #0]
   13b58:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   13b5a:	683b      	ldr	r3, [r7, #0]
   13b5c:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   13b5e:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   13b60:	683b      	ldr	r3, [r7, #0]
   13b62:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
   13b64:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
   13b66:	683a      	ldr	r2, [r7, #0]
   13b68:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   13b6a:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   13b6c:	683a      	ldr	r2, [r7, #0]
   13b6e:	7e12      	ldrb	r2, [r2, #24]
   13b70:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
   13b72:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   13b74:	683a      	ldr	r2, [r7, #0]
   13b76:	2126      	movs	r1, #38	; 0x26
   13b78:	5c52      	ldrb	r2, [r2, r1]
   13b7a:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   13b7c:	4313      	orrs	r3, r2
   13b7e:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
   13b80:	231d      	movs	r3, #29
   13b82:	18fb      	adds	r3, r7, r3
   13b84:	2200      	movs	r2, #0
   13b86:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   13b88:	683b      	ldr	r3, [r7, #0]
   13b8a:	685b      	ldr	r3, [r3, #4]
   13b8c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   13b8e:	68fb      	ldr	r3, [r7, #12]
   13b90:	2b00      	cmp	r3, #0
   13b92:	d01e      	beq.n	13bd2 <_usart_set_config+0x14e>
   13b94:	2280      	movs	r2, #128	; 0x80
   13b96:	0552      	lsls	r2, r2, #21
   13b98:	4293      	cmp	r3, r2
   13b9a:	d14f      	bne.n	13c3c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   13b9c:	683b      	ldr	r3, [r7, #0]
   13b9e:	2227      	movs	r2, #39	; 0x27
   13ba0:	5c9b      	ldrb	r3, [r3, r2]
   13ba2:	2201      	movs	r2, #1
   13ba4:	4053      	eors	r3, r2
   13ba6:	b2db      	uxtb	r3, r3
   13ba8:	2b00      	cmp	r3, #0
   13baa:	d046      	beq.n	13c3a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   13bac:	683b      	ldr	r3, [r7, #0]
   13bae:	6a1d      	ldr	r5, [r3, #32]
   13bb0:	693b      	ldr	r3, [r7, #16]
   13bb2:	b2db      	uxtb	r3, r3
   13bb4:	0018      	movs	r0, r3
   13bb6:	4b65      	ldr	r3, [pc, #404]	; (13d4c <_usart_set_config+0x2c8>)
   13bb8:	4798      	blx	r3
   13bba:	0001      	movs	r1, r0
   13bbc:	231d      	movs	r3, #29
   13bbe:	18fc      	adds	r4, r7, r3
   13bc0:	230a      	movs	r3, #10
   13bc2:	18fb      	adds	r3, r7, r3
   13bc4:	001a      	movs	r2, r3
   13bc6:	0028      	movs	r0, r5
   13bc8:	4b61      	ldr	r3, [pc, #388]	; (13d50 <_usart_set_config+0x2cc>)
   13bca:	4798      	blx	r3
   13bcc:	0003      	movs	r3, r0
   13bce:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   13bd0:	e033      	b.n	13c3a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   13bd2:	683b      	ldr	r3, [r7, #0]
   13bd4:	2227      	movs	r2, #39	; 0x27
   13bd6:	5c9b      	ldrb	r3, [r3, r2]
   13bd8:	2b00      	cmp	r3, #0
   13bda:	d014      	beq.n	13c06 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   13bdc:	683b      	ldr	r3, [r7, #0]
   13bde:	6a18      	ldr	r0, [r3, #32]
   13be0:	683b      	ldr	r3, [r7, #0]
   13be2:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
   13be4:	231d      	movs	r3, #29
   13be6:	18fc      	adds	r4, r7, r3
   13be8:	231f      	movs	r3, #31
   13bea:	18fb      	adds	r3, r7, r3
   13bec:	781d      	ldrb	r5, [r3, #0]
   13bee:	230a      	movs	r3, #10
   13bf0:	18fa      	adds	r2, r7, r3
   13bf2:	231e      	movs	r3, #30
   13bf4:	18fb      	adds	r3, r7, r3
   13bf6:	781b      	ldrb	r3, [r3, #0]
   13bf8:	9300      	str	r3, [sp, #0]
   13bfa:	002b      	movs	r3, r5
   13bfc:	4d55      	ldr	r5, [pc, #340]	; (13d54 <_usart_set_config+0x2d0>)
   13bfe:	47a8      	blx	r5
   13c00:	0003      	movs	r3, r0
   13c02:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   13c04:	e01a      	b.n	13c3c <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   13c06:	683b      	ldr	r3, [r7, #0]
   13c08:	6a1d      	ldr	r5, [r3, #32]
   13c0a:	693b      	ldr	r3, [r7, #16]
   13c0c:	b2db      	uxtb	r3, r3
   13c0e:	0018      	movs	r0, r3
   13c10:	4b4e      	ldr	r3, [pc, #312]	; (13d4c <_usart_set_config+0x2c8>)
   13c12:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
   13c14:	231d      	movs	r3, #29
   13c16:	18fc      	adds	r4, r7, r3
   13c18:	231f      	movs	r3, #31
   13c1a:	18fb      	adds	r3, r7, r3
   13c1c:	7819      	ldrb	r1, [r3, #0]
   13c1e:	230a      	movs	r3, #10
   13c20:	18fa      	adds	r2, r7, r3
   13c22:	231e      	movs	r3, #30
   13c24:	18fb      	adds	r3, r7, r3
   13c26:	781b      	ldrb	r3, [r3, #0]
   13c28:	9300      	str	r3, [sp, #0]
   13c2a:	000b      	movs	r3, r1
   13c2c:	0001      	movs	r1, r0
   13c2e:	0028      	movs	r0, r5
   13c30:	4d48      	ldr	r5, [pc, #288]	; (13d54 <_usart_set_config+0x2d0>)
   13c32:	47a8      	blx	r5
   13c34:	0003      	movs	r3, r0
   13c36:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   13c38:	e000      	b.n	13c3c <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   13c3a:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   13c3c:	231d      	movs	r3, #29
   13c3e:	18fb      	adds	r3, r7, r3
   13c40:	781b      	ldrb	r3, [r3, #0]
   13c42:	2b00      	cmp	r3, #0
   13c44:	d003      	beq.n	13c4e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   13c46:	231d      	movs	r3, #29
   13c48:	18fb      	adds	r3, r7, r3
   13c4a:	781b      	ldrb	r3, [r3, #0]
   13c4c:	e077      	b.n	13d3e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   13c4e:	683b      	ldr	r3, [r7, #0]
   13c50:	7e5b      	ldrb	r3, [r3, #25]
   13c52:	2b00      	cmp	r3, #0
   13c54:	d003      	beq.n	13c5e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   13c56:	683b      	ldr	r3, [r7, #0]
   13c58:	7e9a      	ldrb	r2, [r3, #26]
   13c5a:	69bb      	ldr	r3, [r7, #24]
   13c5c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13c5e:	687b      	ldr	r3, [r7, #4]
   13c60:	0018      	movs	r0, r3
   13c62:	4b3d      	ldr	r3, [pc, #244]	; (13d58 <_usart_set_config+0x2d4>)
   13c64:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   13c66:	230a      	movs	r3, #10
   13c68:	18fb      	adds	r3, r7, r3
   13c6a:	881a      	ldrh	r2, [r3, #0]
   13c6c:	69bb      	ldr	r3, [r7, #24]
   13c6e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   13c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13c72:	68fb      	ldr	r3, [r7, #12]
   13c74:	4313      	orrs	r3, r2
   13c76:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   13c78:	683b      	ldr	r3, [r7, #0]
   13c7a:	2227      	movs	r2, #39	; 0x27
   13c7c:	5c9b      	ldrb	r3, [r3, r2]
   13c7e:	2201      	movs	r2, #1
   13c80:	4053      	eors	r3, r2
   13c82:	b2db      	uxtb	r3, r3
   13c84:	2b00      	cmp	r3, #0
   13c86:	d003      	beq.n	13c90 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   13c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13c8a:	2204      	movs	r2, #4
   13c8c:	4313      	orrs	r3, r2
   13c8e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   13c90:	683b      	ldr	r3, [r7, #0]
   13c92:	7e5b      	ldrb	r3, [r3, #25]
   13c94:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   13c96:	683b      	ldr	r3, [r7, #0]
   13c98:	7f1b      	ldrb	r3, [r3, #28]
   13c9a:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   13c9c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   13c9e:	683b      	ldr	r3, [r7, #0]
   13ca0:	7f5b      	ldrb	r3, [r3, #29]
   13ca2:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   13ca4:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   13ca6:	683b      	ldr	r3, [r7, #0]
   13ca8:	2124      	movs	r1, #36	; 0x24
   13caa:	5c5b      	ldrb	r3, [r3, r1]
   13cac:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   13cae:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   13cb0:	683b      	ldr	r3, [r7, #0]
   13cb2:	2125      	movs	r1, #37	; 0x25
   13cb4:	5c5b      	ldrb	r3, [r3, r1]
   13cb6:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   13cb8:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
   13cba:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   13cbc:	683b      	ldr	r3, [r7, #0]
   13cbe:	7a9b      	ldrb	r3, [r3, #10]
   13cc0:	001a      	movs	r2, r3
   13cc2:	6a3b      	ldr	r3, [r7, #32]
   13cc4:	4313      	orrs	r3, r2
   13cc6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   13cc8:	683b      	ldr	r3, [r7, #0]
   13cca:	7adb      	ldrb	r3, [r3, #11]
   13ccc:	001a      	movs	r2, r3
   13cce:	6a3b      	ldr	r3, [r7, #32]
   13cd0:	4313      	orrs	r3, r2
   13cd2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   13cd4:	683b      	ldr	r3, [r7, #0]
   13cd6:	891b      	ldrh	r3, [r3, #8]
   13cd8:	2bff      	cmp	r3, #255	; 0xff
   13cda:	d00b      	beq.n	13cf4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   13cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13cde:	2280      	movs	r2, #128	; 0x80
   13ce0:	0452      	lsls	r2, r2, #17
   13ce2:	4313      	orrs	r3, r2
   13ce4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   13ce6:	683b      	ldr	r3, [r7, #0]
   13ce8:	891b      	ldrh	r3, [r3, #8]
   13cea:	001a      	movs	r2, r3
   13cec:	6a3b      	ldr	r3, [r7, #32]
   13cee:	4313      	orrs	r3, r2
   13cf0:	623b      	str	r3, [r7, #32]
   13cf2:	e008      	b.n	13d06 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   13cf4:	683b      	ldr	r3, [r7, #0]
   13cf6:	7edb      	ldrb	r3, [r3, #27]
   13cf8:	2b00      	cmp	r3, #0
   13cfa:	d004      	beq.n	13d06 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   13cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13cfe:	2280      	movs	r2, #128	; 0x80
   13d00:	04d2      	lsls	r2, r2, #19
   13d02:	4313      	orrs	r3, r2
   13d04:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   13d06:	683b      	ldr	r3, [r7, #0]
   13d08:	222c      	movs	r2, #44	; 0x2c
   13d0a:	5c9b      	ldrb	r3, [r3, r2]
   13d0c:	2b00      	cmp	r3, #0
   13d0e:	d103      	bne.n	13d18 <_usart_set_config+0x294>
   13d10:	4b12      	ldr	r3, [pc, #72]	; (13d5c <_usart_set_config+0x2d8>)
   13d12:	4798      	blx	r3
   13d14:	1e03      	subs	r3, r0, #0
   13d16:	d003      	beq.n	13d20 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   13d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13d1a:	2280      	movs	r2, #128	; 0x80
   13d1c:	4313      	orrs	r3, r2
   13d1e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13d20:	687b      	ldr	r3, [r7, #4]
   13d22:	0018      	movs	r0, r3
   13d24:	4b0c      	ldr	r3, [pc, #48]	; (13d58 <_usart_set_config+0x2d4>)
   13d26:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   13d28:	69bb      	ldr	r3, [r7, #24]
   13d2a:	6a3a      	ldr	r2, [r7, #32]
   13d2c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   13d2e:	687b      	ldr	r3, [r7, #4]
   13d30:	0018      	movs	r0, r3
   13d32:	4b09      	ldr	r3, [pc, #36]	; (13d58 <_usart_set_config+0x2d4>)
   13d34:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   13d36:	69bb      	ldr	r3, [r7, #24]
   13d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13d3a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   13d3c:	2300      	movs	r3, #0
}
   13d3e:	0018      	movs	r0, r3
   13d40:	46bd      	mov	sp, r7
   13d42:	b00a      	add	sp, #40	; 0x28
   13d44:	bdb0      	pop	{r4, r5, r7, pc}
   13d46:	46c0      	nop			; (mov r8, r8)
   13d48:	000126b9 	.word	0x000126b9
   13d4c:	00015211 	.word	0x00015211
   13d50:	00012235 	.word	0x00012235
   13d54:	000122b1 	.word	0x000122b1
   13d58:	00013a61 	.word	0x00013a61
   13d5c:	00013a21 	.word	0x00013a21

00013d60 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   13d60:	b590      	push	{r4, r7, lr}
   13d62:	b093      	sub	sp, #76	; 0x4c
   13d64:	af00      	add	r7, sp, #0
   13d66:	60f8      	str	r0, [r7, #12]
   13d68:	60b9      	str	r1, [r7, #8]
   13d6a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   13d6c:	233b      	movs	r3, #59	; 0x3b
   13d6e:	18fb      	adds	r3, r7, r3
   13d70:	2200      	movs	r2, #0
   13d72:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   13d74:	68fb      	ldr	r3, [r7, #12]
   13d76:	68ba      	ldr	r2, [r7, #8]
   13d78:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13d7a:	68fb      	ldr	r3, [r7, #12]
   13d7c:	681b      	ldr	r3, [r3, #0]
   13d7e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   13d80:	68fb      	ldr	r3, [r7, #12]
   13d82:	681b      	ldr	r3, [r3, #0]
   13d84:	0018      	movs	r0, r3
   13d86:	4b86      	ldr	r3, [pc, #536]	; (13fa0 <usart_init+0x240>)
   13d88:	4798      	blx	r3
   13d8a:	0003      	movs	r3, r0
   13d8c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   13d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13d90:	3302      	adds	r3, #2
   13d92:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   13d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13d96:	3314      	adds	r3, #20
   13d98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   13d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13d9c:	681b      	ldr	r3, [r3, #0]
   13d9e:	2201      	movs	r2, #1
   13da0:	4013      	ands	r3, r2
   13da2:	d001      	beq.n	13da8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   13da4:	2305      	movs	r3, #5
   13da6:	e0f6      	b.n	13f96 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   13da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13daa:	681b      	ldr	r3, [r3, #0]
   13dac:	2202      	movs	r2, #2
   13dae:	4013      	ands	r3, r2
   13db0:	d001      	beq.n	13db6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   13db2:	231c      	movs	r3, #28
   13db4:	e0ef      	b.n	13f96 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   13db6:	2201      	movs	r2, #1
   13db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13dba:	409a      	lsls	r2, r3
   13dbc:	0013      	movs	r3, r2
   13dbe:	0019      	movs	r1, r3
   13dc0:	2002      	movs	r0, #2
   13dc2:	4b78      	ldr	r3, [pc, #480]	; (13fa4 <usart_init+0x244>)
   13dc4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   13dc6:	2324      	movs	r3, #36	; 0x24
   13dc8:	18fb      	adds	r3, r7, r3
   13dca:	0018      	movs	r0, r3
   13dcc:	4b76      	ldr	r3, [pc, #472]	; (13fa8 <usart_init+0x248>)
   13dce:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   13dd0:	687b      	ldr	r3, [r7, #4]
   13dd2:	222d      	movs	r2, #45	; 0x2d
   13dd4:	5c9a      	ldrb	r2, [r3, r2]
   13dd6:	2324      	movs	r3, #36	; 0x24
   13dd8:	18fb      	adds	r3, r7, r3
   13dda:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   13ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13dde:	b2db      	uxtb	r3, r3
   13de0:	2224      	movs	r2, #36	; 0x24
   13de2:	18ba      	adds	r2, r7, r2
   13de4:	0011      	movs	r1, r2
   13de6:	0018      	movs	r0, r3
   13de8:	4b70      	ldr	r3, [pc, #448]	; (13fac <usart_init+0x24c>)
   13dea:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   13dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13dee:	b2db      	uxtb	r3, r3
   13df0:	0018      	movs	r0, r3
   13df2:	4b6f      	ldr	r3, [pc, #444]	; (13fb0 <usart_init+0x250>)
   13df4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   13df6:	687b      	ldr	r3, [r7, #4]
   13df8:	222d      	movs	r2, #45	; 0x2d
   13dfa:	5c9b      	ldrb	r3, [r3, r2]
   13dfc:	2100      	movs	r1, #0
   13dfe:	0018      	movs	r0, r3
   13e00:	4b6c      	ldr	r3, [pc, #432]	; (13fb4 <usart_init+0x254>)
   13e02:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   13e04:	687b      	ldr	r3, [r7, #4]
   13e06:	7ada      	ldrb	r2, [r3, #11]
   13e08:	68fb      	ldr	r3, [r7, #12]
   13e0a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   13e0c:	687b      	ldr	r3, [r7, #4]
   13e0e:	2224      	movs	r2, #36	; 0x24
   13e10:	5c9a      	ldrb	r2, [r3, r2]
   13e12:	68fb      	ldr	r3, [r7, #12]
   13e14:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   13e16:	687b      	ldr	r3, [r7, #4]
   13e18:	2225      	movs	r2, #37	; 0x25
   13e1a:	5c9a      	ldrb	r2, [r3, r2]
   13e1c:	68fb      	ldr	r3, [r7, #12]
   13e1e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   13e20:	687b      	ldr	r3, [r7, #4]
   13e22:	7eda      	ldrb	r2, [r3, #27]
   13e24:	68fb      	ldr	r3, [r7, #12]
   13e26:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   13e28:	687b      	ldr	r3, [r7, #4]
   13e2a:	7f1a      	ldrb	r2, [r3, #28]
   13e2c:	68fb      	ldr	r3, [r7, #12]
   13e2e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   13e30:	233b      	movs	r3, #59	; 0x3b
   13e32:	18fc      	adds	r4, r7, r3
   13e34:	687a      	ldr	r2, [r7, #4]
   13e36:	68fb      	ldr	r3, [r7, #12]
   13e38:	0011      	movs	r1, r2
   13e3a:	0018      	movs	r0, r3
   13e3c:	4b5e      	ldr	r3, [pc, #376]	; (13fb8 <usart_init+0x258>)
   13e3e:	4798      	blx	r3
   13e40:	0003      	movs	r3, r0
   13e42:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   13e44:	233b      	movs	r3, #59	; 0x3b
   13e46:	18fb      	adds	r3, r7, r3
   13e48:	781b      	ldrb	r3, [r3, #0]
   13e4a:	2b00      	cmp	r3, #0
   13e4c:	d003      	beq.n	13e56 <usart_init+0xf6>
		return status_code;
   13e4e:	233b      	movs	r3, #59	; 0x3b
   13e50:	18fb      	adds	r3, r7, r3
   13e52:	781b      	ldrb	r3, [r3, #0]
   13e54:	e09f      	b.n	13f96 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   13e56:	2320      	movs	r3, #32
   13e58:	18fb      	adds	r3, r7, r3
   13e5a:	0018      	movs	r0, r3
   13e5c:	4b57      	ldr	r3, [pc, #348]	; (13fbc <usart_init+0x25c>)
   13e5e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   13e60:	2320      	movs	r3, #32
   13e62:	18fb      	adds	r3, r7, r3
   13e64:	2200      	movs	r2, #0
   13e66:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   13e68:	2320      	movs	r3, #32
   13e6a:	18fb      	adds	r3, r7, r3
   13e6c:	2200      	movs	r2, #0
   13e6e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   13e70:	687b      	ldr	r3, [r7, #4]
   13e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
   13e74:	2310      	movs	r3, #16
   13e76:	18fb      	adds	r3, r7, r3
   13e78:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   13e7a:	687b      	ldr	r3, [r7, #4]
   13e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
   13e7e:	2310      	movs	r3, #16
   13e80:	18fb      	adds	r3, r7, r3
   13e82:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   13e84:	687b      	ldr	r3, [r7, #4]
   13e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
   13e88:	2310      	movs	r3, #16
   13e8a:	18fb      	adds	r3, r7, r3
   13e8c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
   13e8e:	687b      	ldr	r3, [r7, #4]
   13e90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
   13e92:	2310      	movs	r3, #16
   13e94:	18fb      	adds	r3, r7, r3
   13e96:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   13e98:	2347      	movs	r3, #71	; 0x47
   13e9a:	18fb      	adds	r3, r7, r3
   13e9c:	2200      	movs	r2, #0
   13e9e:	701a      	strb	r2, [r3, #0]
   13ea0:	e02c      	b.n	13efc <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   13ea2:	2347      	movs	r3, #71	; 0x47
   13ea4:	18fb      	adds	r3, r7, r3
   13ea6:	781a      	ldrb	r2, [r3, #0]
   13ea8:	2310      	movs	r3, #16
   13eaa:	18fb      	adds	r3, r7, r3
   13eac:	0092      	lsls	r2, r2, #2
   13eae:	58d3      	ldr	r3, [r2, r3]
   13eb0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   13eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13eb4:	2b00      	cmp	r3, #0
   13eb6:	d109      	bne.n	13ecc <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   13eb8:	2347      	movs	r3, #71	; 0x47
   13eba:	18fb      	adds	r3, r7, r3
   13ebc:	781a      	ldrb	r2, [r3, #0]
   13ebe:	68bb      	ldr	r3, [r7, #8]
   13ec0:	0011      	movs	r1, r2
   13ec2:	0018      	movs	r0, r3
   13ec4:	4b3e      	ldr	r3, [pc, #248]	; (13fc0 <usart_init+0x260>)
   13ec6:	4798      	blx	r3
   13ec8:	0003      	movs	r3, r0
   13eca:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   13ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13ece:	3301      	adds	r3, #1
   13ed0:	d00d      	beq.n	13eee <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   13ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13ed4:	b2da      	uxtb	r2, r3
   13ed6:	2320      	movs	r3, #32
   13ed8:	18fb      	adds	r3, r7, r3
   13eda:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   13edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   13ede:	0c1b      	lsrs	r3, r3, #16
   13ee0:	b2db      	uxtb	r3, r3
   13ee2:	2220      	movs	r2, #32
   13ee4:	18ba      	adds	r2, r7, r2
   13ee6:	0011      	movs	r1, r2
   13ee8:	0018      	movs	r0, r3
   13eea:	4b36      	ldr	r3, [pc, #216]	; (13fc4 <usart_init+0x264>)
   13eec:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   13eee:	2347      	movs	r3, #71	; 0x47
   13ef0:	18fb      	adds	r3, r7, r3
   13ef2:	781a      	ldrb	r2, [r3, #0]
   13ef4:	2347      	movs	r3, #71	; 0x47
   13ef6:	18fb      	adds	r3, r7, r3
   13ef8:	3201      	adds	r2, #1
   13efa:	701a      	strb	r2, [r3, #0]
   13efc:	2347      	movs	r3, #71	; 0x47
   13efe:	18fb      	adds	r3, r7, r3
   13f00:	781b      	ldrb	r3, [r3, #0]
   13f02:	2b03      	cmp	r3, #3
   13f04:	d9cd      	bls.n	13ea2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   13f06:	2300      	movs	r3, #0
   13f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   13f0a:	e00a      	b.n	13f22 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   13f0c:	68fa      	ldr	r2, [r7, #12]
   13f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13f10:	3302      	adds	r3, #2
   13f12:	009b      	lsls	r3, r3, #2
   13f14:	18d3      	adds	r3, r2, r3
   13f16:	3304      	adds	r3, #4
   13f18:	2200      	movs	r2, #0
   13f1a:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   13f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13f1e:	3301      	adds	r3, #1
   13f20:	63fb      	str	r3, [r7, #60]	; 0x3c
   13f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13f24:	2b05      	cmp	r3, #5
   13f26:	d9f1      	bls.n	13f0c <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
   13f28:	68fb      	ldr	r3, [r7, #12]
   13f2a:	2200      	movs	r2, #0
   13f2c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   13f2e:	68fb      	ldr	r3, [r7, #12]
   13f30:	2200      	movs	r2, #0
   13f32:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   13f34:	68fb      	ldr	r3, [r7, #12]
   13f36:	2200      	movs	r2, #0
   13f38:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   13f3a:	68fb      	ldr	r3, [r7, #12]
   13f3c:	2200      	movs	r2, #0
   13f3e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   13f40:	68fb      	ldr	r3, [r7, #12]
   13f42:	2230      	movs	r2, #48	; 0x30
   13f44:	2100      	movs	r1, #0
   13f46:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   13f48:	68fb      	ldr	r3, [r7, #12]
   13f4a:	2231      	movs	r2, #49	; 0x31
   13f4c:	2100      	movs	r1, #0
   13f4e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   13f50:	68fb      	ldr	r3, [r7, #12]
   13f52:	2232      	movs	r2, #50	; 0x32
   13f54:	2100      	movs	r1, #0
   13f56:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   13f58:	68fb      	ldr	r3, [r7, #12]
   13f5a:	2233      	movs	r2, #51	; 0x33
   13f5c:	2100      	movs	r1, #0
   13f5e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   13f60:	68fb      	ldr	r3, [r7, #12]
   13f62:	681b      	ldr	r3, [r3, #0]
   13f64:	2227      	movs	r2, #39	; 0x27
   13f66:	18bc      	adds	r4, r7, r2
   13f68:	0018      	movs	r0, r3
   13f6a:	4b0d      	ldr	r3, [pc, #52]	; (13fa0 <usart_init+0x240>)
   13f6c:	4798      	blx	r3
   13f6e:	0003      	movs	r3, r0
   13f70:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   13f72:	4a15      	ldr	r2, [pc, #84]	; (13fc8 <usart_init+0x268>)
   13f74:	2327      	movs	r3, #39	; 0x27
   13f76:	18fb      	adds	r3, r7, r3
   13f78:	781b      	ldrb	r3, [r3, #0]
   13f7a:	0011      	movs	r1, r2
   13f7c:	0018      	movs	r0, r3
   13f7e:	4b13      	ldr	r3, [pc, #76]	; (13fcc <usart_init+0x26c>)
   13f80:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   13f82:	2327      	movs	r3, #39	; 0x27
   13f84:	18fb      	adds	r3, r7, r3
   13f86:	781a      	ldrb	r2, [r3, #0]
   13f88:	4b11      	ldr	r3, [pc, #68]	; (13fd0 <usart_init+0x270>)
   13f8a:	0092      	lsls	r2, r2, #2
   13f8c:	68f9      	ldr	r1, [r7, #12]
   13f8e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   13f90:	233b      	movs	r3, #59	; 0x3b
   13f92:	18fb      	adds	r3, r7, r3
   13f94:	781b      	ldrb	r3, [r3, #0]
}
   13f96:	0018      	movs	r0, r3
   13f98:	46bd      	mov	sp, r7
   13f9a:	b013      	add	sp, #76	; 0x4c
   13f9c:	bd90      	pop	{r4, r7, pc}
   13f9e:	46c0      	nop			; (mov r8, r8)
   13fa0:	000126b9 	.word	0x000126b9
   13fa4:	0001399d 	.word	0x0001399d
   13fa8:	00013985 	.word	0x00013985
   13fac:	000150ed 	.word	0x000150ed
   13fb0:	00015131 	.word	0x00015131
   13fb4:	00012471 	.word	0x00012471
   13fb8:	00013a85 	.word	0x00013a85
   13fbc:	000139f9 	.word	0x000139f9
   13fc0:	000124fd 	.word	0x000124fd
   13fc4:	000153d9 	.word	0x000153d9
   13fc8:	00014169 	.word	0x00014169
   13fcc:	0001271d 	.word	0x0001271d
   13fd0:	200003b4 	.word	0x200003b4

00013fd4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
   13fd4:	b580      	push	{r7, lr}
   13fd6:	b084      	sub	sp, #16
   13fd8:	af00      	add	r7, sp, #0
   13fda:	6078      	str	r0, [r7, #4]
   13fdc:	000a      	movs	r2, r1
   13fde:	1cbb      	adds	r3, r7, #2
   13fe0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   13fe2:	687b      	ldr	r3, [r7, #4]
   13fe4:	681b      	ldr	r3, [r3, #0]
   13fe6:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   13fe8:	687b      	ldr	r3, [r7, #4]
   13fea:	79db      	ldrb	r3, [r3, #7]
   13fec:	2201      	movs	r2, #1
   13fee:	4053      	eors	r3, r2
   13ff0:	b2db      	uxtb	r3, r3
   13ff2:	2b00      	cmp	r3, #0
   13ff4:	d001      	beq.n	13ffa <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
   13ff6:	231c      	movs	r3, #28
   13ff8:	e017      	b.n	1402a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
   13ffa:	687b      	ldr	r3, [r7, #4]
   13ffc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   13ffe:	b29b      	uxth	r3, r3
   14000:	2b00      	cmp	r3, #0
   14002:	d001      	beq.n	14008 <usart_write_wait+0x34>
		return STATUS_BUSY;
   14004:	2305      	movs	r3, #5
   14006:	e010      	b.n	1402a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   14008:	687b      	ldr	r3, [r7, #4]
   1400a:	0018      	movs	r0, r3
   1400c:	4b09      	ldr	r3, [pc, #36]	; (14034 <usart_write_wait+0x60>)
   1400e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
   14010:	68fb      	ldr	r3, [r7, #12]
   14012:	1cba      	adds	r2, r7, #2
   14014:	8812      	ldrh	r2, [r2, #0]
   14016:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   14018:	46c0      	nop			; (mov r8, r8)
   1401a:	68fb      	ldr	r3, [r7, #12]
   1401c:	7e1b      	ldrb	r3, [r3, #24]
   1401e:	b2db      	uxtb	r3, r3
   14020:	001a      	movs	r2, r3
   14022:	2302      	movs	r3, #2
   14024:	4013      	ands	r3, r2
   14026:	d0f8      	beq.n	1401a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
   14028:	2300      	movs	r3, #0
}
   1402a:	0018      	movs	r0, r3
   1402c:	46bd      	mov	sp, r7
   1402e:	b004      	add	sp, #16
   14030:	bd80      	pop	{r7, pc}
   14032:	46c0      	nop			; (mov r8, r8)
   14034:	00013a61 	.word	0x00013a61

00014038 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
   14038:	b580      	push	{r7, lr}
   1403a:	b084      	sub	sp, #16
   1403c:	af00      	add	r7, sp, #0
   1403e:	6078      	str	r0, [r7, #4]
   14040:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   14042:	687b      	ldr	r3, [r7, #4]
   14044:	681b      	ldr	r3, [r3, #0]
   14046:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   14048:	687b      	ldr	r3, [r7, #4]
   1404a:	799b      	ldrb	r3, [r3, #6]
   1404c:	2201      	movs	r2, #1
   1404e:	4053      	eors	r3, r2
   14050:	b2db      	uxtb	r3, r3
   14052:	2b00      	cmp	r3, #0
   14054:	d001      	beq.n	1405a <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
   14056:	231c      	movs	r3, #28
   14058:	e05e      	b.n	14118 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
   1405a:	687b      	ldr	r3, [r7, #4]
   1405c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1405e:	b29b      	uxth	r3, r3
   14060:	2b00      	cmp	r3, #0
   14062:	d001      	beq.n	14068 <usart_read_wait+0x30>
		return STATUS_BUSY;
   14064:	2305      	movs	r3, #5
   14066:	e057      	b.n	14118 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
   14068:	68fb      	ldr	r3, [r7, #12]
   1406a:	7e1b      	ldrb	r3, [r3, #24]
   1406c:	b2db      	uxtb	r3, r3
   1406e:	001a      	movs	r2, r3
   14070:	2304      	movs	r3, #4
   14072:	4013      	ands	r3, r2
   14074:	d101      	bne.n	1407a <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
   14076:	2305      	movs	r3, #5
   14078:	e04e      	b.n	14118 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1407a:	687b      	ldr	r3, [r7, #4]
   1407c:	0018      	movs	r0, r3
   1407e:	4b28      	ldr	r3, [pc, #160]	; (14120 <usart_read_wait+0xe8>)
   14080:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   14082:	68fb      	ldr	r3, [r7, #12]
   14084:	8b5b      	ldrh	r3, [r3, #26]
   14086:	b29b      	uxth	r3, r3
   14088:	b2da      	uxtb	r2, r3
   1408a:	230b      	movs	r3, #11
   1408c:	18fb      	adds	r3, r7, r3
   1408e:	213f      	movs	r1, #63	; 0x3f
   14090:	400a      	ands	r2, r1
   14092:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
   14094:	230b      	movs	r3, #11
   14096:	18fb      	adds	r3, r7, r3
   14098:	781b      	ldrb	r3, [r3, #0]
   1409a:	2b00      	cmp	r3, #0
   1409c:	d036      	beq.n	1410c <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
   1409e:	230b      	movs	r3, #11
   140a0:	18fb      	adds	r3, r7, r3
   140a2:	781b      	ldrb	r3, [r3, #0]
   140a4:	2202      	movs	r2, #2
   140a6:	4013      	ands	r3, r2
   140a8:	d004      	beq.n	140b4 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   140aa:	68fb      	ldr	r3, [r7, #12]
   140ac:	2202      	movs	r2, #2
   140ae:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
   140b0:	231a      	movs	r3, #26
   140b2:	e031      	b.n	14118 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   140b4:	230b      	movs	r3, #11
   140b6:	18fb      	adds	r3, r7, r3
   140b8:	781b      	ldrb	r3, [r3, #0]
   140ba:	2204      	movs	r2, #4
   140bc:	4013      	ands	r3, r2
   140be:	d004      	beq.n	140ca <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   140c0:	68fb      	ldr	r3, [r7, #12]
   140c2:	2204      	movs	r2, #4
   140c4:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
   140c6:	231e      	movs	r3, #30
   140c8:	e026      	b.n	14118 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   140ca:	230b      	movs	r3, #11
   140cc:	18fb      	adds	r3, r7, r3
   140ce:	781b      	ldrb	r3, [r3, #0]
   140d0:	2201      	movs	r2, #1
   140d2:	4013      	ands	r3, r2
   140d4:	d004      	beq.n	140e0 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   140d6:	68fb      	ldr	r3, [r7, #12]
   140d8:	2201      	movs	r2, #1
   140da:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
   140dc:	2313      	movs	r3, #19
   140de:	e01b      	b.n	14118 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
   140e0:	230b      	movs	r3, #11
   140e2:	18fb      	adds	r3, r7, r3
   140e4:	781b      	ldrb	r3, [r3, #0]
   140e6:	2210      	movs	r2, #16
   140e8:	4013      	ands	r3, r2
   140ea:	d004      	beq.n	140f6 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   140ec:	68fb      	ldr	r3, [r7, #12]
   140ee:	2210      	movs	r2, #16
   140f0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
   140f2:	2342      	movs	r3, #66	; 0x42
   140f4:	e010      	b.n	14118 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
   140f6:	230b      	movs	r3, #11
   140f8:	18fb      	adds	r3, r7, r3
   140fa:	781b      	ldrb	r3, [r3, #0]
   140fc:	2220      	movs	r2, #32
   140fe:	4013      	ands	r3, r2
   14100:	d004      	beq.n	1410c <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   14102:	68fb      	ldr	r3, [r7, #12]
   14104:	2220      	movs	r2, #32
   14106:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
   14108:	2341      	movs	r3, #65	; 0x41
   1410a:	e005      	b.n	14118 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
   1410c:	68fb      	ldr	r3, [r7, #12]
   1410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   14110:	b29a      	uxth	r2, r3
   14112:	683b      	ldr	r3, [r7, #0]
   14114:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
   14116:	2300      	movs	r3, #0
}
   14118:	0018      	movs	r0, r3
   1411a:	46bd      	mov	sp, r7
   1411c:	b004      	add	sp, #16
   1411e:	bd80      	pop	{r7, pc}
   14120:	00013a61 	.word	0x00013a61

00014124 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   14124:	b580      	push	{r7, lr}
   14126:	b084      	sub	sp, #16
   14128:	af00      	add	r7, sp, #0
   1412a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1412c:	687b      	ldr	r3, [r7, #4]
   1412e:	681b      	ldr	r3, [r3, #0]
   14130:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   14132:	68fb      	ldr	r3, [r7, #12]
   14134:	69db      	ldr	r3, [r3, #28]
   14136:	1e5a      	subs	r2, r3, #1
   14138:	4193      	sbcs	r3, r2
   1413a:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1413c:	0018      	movs	r0, r3
   1413e:	46bd      	mov	sp, r7
   14140:	b004      	add	sp, #16
   14142:	bd80      	pop	{r7, pc}

00014144 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   14144:	b580      	push	{r7, lr}
   14146:	b082      	sub	sp, #8
   14148:	af00      	add	r7, sp, #0
   1414a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1414c:	46c0      	nop			; (mov r8, r8)
   1414e:	687b      	ldr	r3, [r7, #4]
   14150:	0018      	movs	r0, r3
   14152:	4b04      	ldr	r3, [pc, #16]	; (14164 <_usart_wait_for_sync+0x20>)
   14154:	4798      	blx	r3
   14156:	1e03      	subs	r3, r0, #0
   14158:	d1f9      	bne.n	1414e <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1415a:	46c0      	nop			; (mov r8, r8)
   1415c:	46bd      	mov	sp, r7
   1415e:	b002      	add	sp, #8
   14160:	bd80      	pop	{r7, pc}
   14162:	46c0      	nop			; (mov r8, r8)
   14164:	00014125 	.word	0x00014125

00014168 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   14168:	b580      	push	{r7, lr}
   1416a:	b088      	sub	sp, #32
   1416c:	af00      	add	r7, sp, #0
   1416e:	0002      	movs	r2, r0
   14170:	1dfb      	adds	r3, r7, #7
   14172:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   14174:	1dfb      	adds	r3, r7, #7
   14176:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   14178:	4ba3      	ldr	r3, [pc, #652]	; (14408 <_usart_interrupt_handler+0x2a0>)
   1417a:	0092      	lsls	r2, r2, #2
   1417c:	58d3      	ldr	r3, [r2, r3]
   1417e:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   14180:	69bb      	ldr	r3, [r7, #24]
   14182:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
   14184:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   14186:	69bb      	ldr	r3, [r7, #24]
   14188:	0018      	movs	r0, r3
   1418a:	4ba0      	ldr	r3, [pc, #640]	; (1440c <_usart_interrupt_handler+0x2a4>)
   1418c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   1418e:	697b      	ldr	r3, [r7, #20]
   14190:	7e1b      	ldrb	r3, [r3, #24]
   14192:	b2da      	uxtb	r2, r3
   14194:	2312      	movs	r3, #18
   14196:	18fb      	adds	r3, r7, r3
   14198:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   1419a:	697b      	ldr	r3, [r7, #20]
   1419c:	7d9b      	ldrb	r3, [r3, #22]
   1419e:	b2db      	uxtb	r3, r3
   141a0:	b29a      	uxth	r2, r3
   141a2:	2312      	movs	r3, #18
   141a4:	18fb      	adds	r3, r7, r3
   141a6:	2112      	movs	r1, #18
   141a8:	1879      	adds	r1, r7, r1
   141aa:	8809      	ldrh	r1, [r1, #0]
   141ac:	400a      	ands	r2, r1
   141ae:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   141b0:	69bb      	ldr	r3, [r7, #24]
   141b2:	2230      	movs	r2, #48	; 0x30
   141b4:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   141b6:	69ba      	ldr	r2, [r7, #24]
   141b8:	2131      	movs	r1, #49	; 0x31
   141ba:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
   141bc:	4013      	ands	r3, r2
   141be:	b2da      	uxtb	r2, r3
   141c0:	2310      	movs	r3, #16
   141c2:	18fb      	adds	r3, r7, r3
   141c4:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   141c6:	2312      	movs	r3, #18
   141c8:	18fb      	adds	r3, r7, r3
   141ca:	881b      	ldrh	r3, [r3, #0]
   141cc:	2201      	movs	r2, #1
   141ce:	4013      	ands	r3, r2
   141d0:	d044      	beq.n	1425c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   141d2:	69bb      	ldr	r3, [r7, #24]
   141d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   141d6:	b29b      	uxth	r3, r3
   141d8:	2b00      	cmp	r3, #0
   141da:	d03c      	beq.n	14256 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   141dc:	69bb      	ldr	r3, [r7, #24]
   141de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   141e0:	781b      	ldrb	r3, [r3, #0]
   141e2:	b2da      	uxtb	r2, r3
   141e4:	231c      	movs	r3, #28
   141e6:	18fb      	adds	r3, r7, r3
   141e8:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   141ea:	69bb      	ldr	r3, [r7, #24]
   141ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   141ee:	1c5a      	adds	r2, r3, #1
   141f0:	69bb      	ldr	r3, [r7, #24]
   141f2:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   141f4:	69bb      	ldr	r3, [r7, #24]
   141f6:	795b      	ldrb	r3, [r3, #5]
   141f8:	2b01      	cmp	r3, #1
   141fa:	d113      	bne.n	14224 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   141fc:	69bb      	ldr	r3, [r7, #24]
   141fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14200:	781b      	ldrb	r3, [r3, #0]
   14202:	b2db      	uxtb	r3, r3
   14204:	021b      	lsls	r3, r3, #8
   14206:	b21a      	sxth	r2, r3
   14208:	231c      	movs	r3, #28
   1420a:	18fb      	adds	r3, r7, r3
   1420c:	2100      	movs	r1, #0
   1420e:	5e5b      	ldrsh	r3, [r3, r1]
   14210:	4313      	orrs	r3, r2
   14212:	b21a      	sxth	r2, r3
   14214:	231c      	movs	r3, #28
   14216:	18fb      	adds	r3, r7, r3
   14218:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   1421a:	69bb      	ldr	r3, [r7, #24]
   1421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1421e:	1c5a      	adds	r2, r3, #1
   14220:	69bb      	ldr	r3, [r7, #24]
   14222:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   14224:	231c      	movs	r3, #28
   14226:	18fb      	adds	r3, r7, r3
   14228:	881b      	ldrh	r3, [r3, #0]
   1422a:	05db      	lsls	r3, r3, #23
   1422c:	0ddb      	lsrs	r3, r3, #23
   1422e:	b29a      	uxth	r2, r3
   14230:	697b      	ldr	r3, [r7, #20]
   14232:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   14234:	69bb      	ldr	r3, [r7, #24]
   14236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   14238:	b29b      	uxth	r3, r3
   1423a:	3b01      	subs	r3, #1
   1423c:	b29b      	uxth	r3, r3
   1423e:	69ba      	ldr	r2, [r7, #24]
   14240:	1c19      	adds	r1, r3, #0
   14242:	85d1      	strh	r1, [r2, #46]	; 0x2e
   14244:	2b00      	cmp	r3, #0
   14246:	d109      	bne.n	1425c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   14248:	697b      	ldr	r3, [r7, #20]
   1424a:	2201      	movs	r2, #1
   1424c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   1424e:	697b      	ldr	r3, [r7, #20]
   14250:	2202      	movs	r2, #2
   14252:	759a      	strb	r2, [r3, #22]
   14254:	e002      	b.n	1425c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   14256:	697b      	ldr	r3, [r7, #20]
   14258:	2201      	movs	r2, #1
   1425a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   1425c:	2312      	movs	r3, #18
   1425e:	18fb      	adds	r3, r7, r3
   14260:	881b      	ldrh	r3, [r3, #0]
   14262:	2202      	movs	r2, #2
   14264:	4013      	ands	r3, r2
   14266:	d011      	beq.n	1428c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   14268:	697b      	ldr	r3, [r7, #20]
   1426a:	2202      	movs	r2, #2
   1426c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   1426e:	69bb      	ldr	r3, [r7, #24]
   14270:	2233      	movs	r2, #51	; 0x33
   14272:	2100      	movs	r1, #0
   14274:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   14276:	2310      	movs	r3, #16
   14278:	18fb      	adds	r3, r7, r3
   1427a:	881b      	ldrh	r3, [r3, #0]
   1427c:	2201      	movs	r2, #1
   1427e:	4013      	ands	r3, r2
   14280:	d004      	beq.n	1428c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   14282:	69bb      	ldr	r3, [r7, #24]
   14284:	68db      	ldr	r3, [r3, #12]
   14286:	69ba      	ldr	r2, [r7, #24]
   14288:	0010      	movs	r0, r2
   1428a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   1428c:	2312      	movs	r3, #18
   1428e:	18fb      	adds	r3, r7, r3
   14290:	881b      	ldrh	r3, [r3, #0]
   14292:	2204      	movs	r2, #4
   14294:	4013      	ands	r3, r2
   14296:	d100      	bne.n	1429a <_usart_interrupt_handler+0x132>
   14298:	e0bd      	b.n	14416 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   1429a:	69bb      	ldr	r3, [r7, #24]
   1429c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   1429e:	b29b      	uxth	r3, r3
   142a0:	2b00      	cmp	r3, #0
   142a2:	d100      	bne.n	142a6 <_usart_interrupt_handler+0x13e>
   142a4:	e0b4      	b.n	14410 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   142a6:	697b      	ldr	r3, [r7, #20]
   142a8:	8b5b      	ldrh	r3, [r3, #26]
   142aa:	b29b      	uxth	r3, r3
   142ac:	b2da      	uxtb	r2, r3
   142ae:	231f      	movs	r3, #31
   142b0:	18fb      	adds	r3, r7, r3
   142b2:	213f      	movs	r1, #63	; 0x3f
   142b4:	400a      	ands	r2, r1
   142b6:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   142b8:	231f      	movs	r3, #31
   142ba:	18fb      	adds	r3, r7, r3
   142bc:	781b      	ldrb	r3, [r3, #0]
   142be:	2208      	movs	r2, #8
   142c0:	4013      	ands	r3, r2
   142c2:	d007      	beq.n	142d4 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   142c4:	231f      	movs	r3, #31
   142c6:	18fb      	adds	r3, r7, r3
   142c8:	221f      	movs	r2, #31
   142ca:	18ba      	adds	r2, r7, r2
   142cc:	7812      	ldrb	r2, [r2, #0]
   142ce:	2108      	movs	r1, #8
   142d0:	438a      	bics	r2, r1
   142d2:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   142d4:	231f      	movs	r3, #31
   142d6:	18fb      	adds	r3, r7, r3
   142d8:	781b      	ldrb	r3, [r3, #0]
   142da:	2b00      	cmp	r3, #0
   142dc:	d050      	beq.n	14380 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   142de:	231f      	movs	r3, #31
   142e0:	18fb      	adds	r3, r7, r3
   142e2:	781b      	ldrb	r3, [r3, #0]
   142e4:	2202      	movs	r2, #2
   142e6:	4013      	ands	r3, r2
   142e8:	d007      	beq.n	142fa <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   142ea:	69bb      	ldr	r3, [r7, #24]
   142ec:	2232      	movs	r2, #50	; 0x32
   142ee:	211a      	movs	r1, #26
   142f0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   142f2:	697b      	ldr	r3, [r7, #20]
   142f4:	2202      	movs	r2, #2
   142f6:	835a      	strh	r2, [r3, #26]
   142f8:	e036      	b.n	14368 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   142fa:	231f      	movs	r3, #31
   142fc:	18fb      	adds	r3, r7, r3
   142fe:	781b      	ldrb	r3, [r3, #0]
   14300:	2204      	movs	r2, #4
   14302:	4013      	ands	r3, r2
   14304:	d007      	beq.n	14316 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   14306:	69bb      	ldr	r3, [r7, #24]
   14308:	2232      	movs	r2, #50	; 0x32
   1430a:	211e      	movs	r1, #30
   1430c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   1430e:	697b      	ldr	r3, [r7, #20]
   14310:	2204      	movs	r2, #4
   14312:	835a      	strh	r2, [r3, #26]
   14314:	e028      	b.n	14368 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   14316:	231f      	movs	r3, #31
   14318:	18fb      	adds	r3, r7, r3
   1431a:	781b      	ldrb	r3, [r3, #0]
   1431c:	2201      	movs	r2, #1
   1431e:	4013      	ands	r3, r2
   14320:	d007      	beq.n	14332 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   14322:	69bb      	ldr	r3, [r7, #24]
   14324:	2232      	movs	r2, #50	; 0x32
   14326:	2113      	movs	r1, #19
   14328:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   1432a:	697b      	ldr	r3, [r7, #20]
   1432c:	2201      	movs	r2, #1
   1432e:	835a      	strh	r2, [r3, #26]
   14330:	e01a      	b.n	14368 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   14332:	231f      	movs	r3, #31
   14334:	18fb      	adds	r3, r7, r3
   14336:	781b      	ldrb	r3, [r3, #0]
   14338:	2210      	movs	r2, #16
   1433a:	4013      	ands	r3, r2
   1433c:	d007      	beq.n	1434e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   1433e:	69bb      	ldr	r3, [r7, #24]
   14340:	2232      	movs	r2, #50	; 0x32
   14342:	2142      	movs	r1, #66	; 0x42
   14344:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   14346:	697b      	ldr	r3, [r7, #20]
   14348:	2210      	movs	r2, #16
   1434a:	835a      	strh	r2, [r3, #26]
   1434c:	e00c      	b.n	14368 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   1434e:	231f      	movs	r3, #31
   14350:	18fb      	adds	r3, r7, r3
   14352:	781b      	ldrb	r3, [r3, #0]
   14354:	2220      	movs	r2, #32
   14356:	4013      	ands	r3, r2
   14358:	d006      	beq.n	14368 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   1435a:	69bb      	ldr	r3, [r7, #24]
   1435c:	2232      	movs	r2, #50	; 0x32
   1435e:	2141      	movs	r1, #65	; 0x41
   14360:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   14362:	697b      	ldr	r3, [r7, #20]
   14364:	2220      	movs	r2, #32
   14366:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   14368:	2310      	movs	r3, #16
   1436a:	18fb      	adds	r3, r7, r3
   1436c:	881b      	ldrh	r3, [r3, #0]
   1436e:	2204      	movs	r2, #4
   14370:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   14372:	d050      	beq.n	14416 <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   14374:	69bb      	ldr	r3, [r7, #24]
   14376:	695b      	ldr	r3, [r3, #20]
   14378:	69ba      	ldr	r2, [r7, #24]
   1437a:	0010      	movs	r0, r2
   1437c:	4798      	blx	r3
   1437e:	e04a      	b.n	14416 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   14380:	697b      	ldr	r3, [r7, #20]
   14382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   14384:	b29a      	uxth	r2, r3
   14386:	230e      	movs	r3, #14
   14388:	18fb      	adds	r3, r7, r3
   1438a:	05d2      	lsls	r2, r2, #23
   1438c:	0dd2      	lsrs	r2, r2, #23
   1438e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   14390:	69bb      	ldr	r3, [r7, #24]
   14392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14394:	220e      	movs	r2, #14
   14396:	18ba      	adds	r2, r7, r2
   14398:	8812      	ldrh	r2, [r2, #0]
   1439a:	b2d2      	uxtb	r2, r2
   1439c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   1439e:	69bb      	ldr	r3, [r7, #24]
   143a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   143a2:	1c5a      	adds	r2, r3, #1
   143a4:	69bb      	ldr	r3, [r7, #24]
   143a6:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   143a8:	69bb      	ldr	r3, [r7, #24]
   143aa:	795b      	ldrb	r3, [r3, #5]
   143ac:	2b01      	cmp	r3, #1
   143ae:	d10d      	bne.n	143cc <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   143b0:	69bb      	ldr	r3, [r7, #24]
   143b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   143b4:	220e      	movs	r2, #14
   143b6:	18ba      	adds	r2, r7, r2
   143b8:	8812      	ldrh	r2, [r2, #0]
   143ba:	0a12      	lsrs	r2, r2, #8
   143bc:	b292      	uxth	r2, r2
   143be:	b2d2      	uxtb	r2, r2
   143c0:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   143c2:	69bb      	ldr	r3, [r7, #24]
   143c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   143c6:	1c5a      	adds	r2, r3, #1
   143c8:	69bb      	ldr	r3, [r7, #24]
   143ca:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   143cc:	69bb      	ldr	r3, [r7, #24]
   143ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   143d0:	b29b      	uxth	r3, r3
   143d2:	3b01      	subs	r3, #1
   143d4:	b29b      	uxth	r3, r3
   143d6:	69ba      	ldr	r2, [r7, #24]
   143d8:	1c19      	adds	r1, r3, #0
   143da:	8591      	strh	r1, [r2, #44]	; 0x2c
   143dc:	2b00      	cmp	r3, #0
   143de:	d11a      	bne.n	14416 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   143e0:	697b      	ldr	r3, [r7, #20]
   143e2:	2204      	movs	r2, #4
   143e4:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   143e6:	69bb      	ldr	r3, [r7, #24]
   143e8:	2232      	movs	r2, #50	; 0x32
   143ea:	2100      	movs	r1, #0
   143ec:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   143ee:	2310      	movs	r3, #16
   143f0:	18fb      	adds	r3, r7, r3
   143f2:	881b      	ldrh	r3, [r3, #0]
   143f4:	2202      	movs	r2, #2
   143f6:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
   143f8:	d00d      	beq.n	14416 <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   143fa:	69bb      	ldr	r3, [r7, #24]
   143fc:	691b      	ldr	r3, [r3, #16]
   143fe:	69ba      	ldr	r2, [r7, #24]
   14400:	0010      	movs	r0, r2
   14402:	4798      	blx	r3
   14404:	e007      	b.n	14416 <_usart_interrupt_handler+0x2ae>
   14406:	46c0      	nop			; (mov r8, r8)
   14408:	200003b4 	.word	0x200003b4
   1440c:	00014145 	.word	0x00014145
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   14410:	697b      	ldr	r3, [r7, #20]
   14412:	2204      	movs	r2, #4
   14414:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   14416:	2312      	movs	r3, #18
   14418:	18fb      	adds	r3, r7, r3
   1441a:	881b      	ldrh	r3, [r3, #0]
   1441c:	2210      	movs	r2, #16
   1441e:	4013      	ands	r3, r2
   14420:	d010      	beq.n	14444 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   14422:	697b      	ldr	r3, [r7, #20]
   14424:	2210      	movs	r2, #16
   14426:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   14428:	697b      	ldr	r3, [r7, #20]
   1442a:	2210      	movs	r2, #16
   1442c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   1442e:	2310      	movs	r3, #16
   14430:	18fb      	adds	r3, r7, r3
   14432:	881b      	ldrh	r3, [r3, #0]
   14434:	2210      	movs	r2, #16
   14436:	4013      	ands	r3, r2
   14438:	d004      	beq.n	14444 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   1443a:	69bb      	ldr	r3, [r7, #24]
   1443c:	69db      	ldr	r3, [r3, #28]
   1443e:	69ba      	ldr	r2, [r7, #24]
   14440:	0010      	movs	r0, r2
   14442:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   14444:	2312      	movs	r3, #18
   14446:	18fb      	adds	r3, r7, r3
   14448:	881b      	ldrh	r3, [r3, #0]
   1444a:	2220      	movs	r2, #32
   1444c:	4013      	ands	r3, r2
   1444e:	d010      	beq.n	14472 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   14450:	697b      	ldr	r3, [r7, #20]
   14452:	2220      	movs	r2, #32
   14454:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   14456:	697b      	ldr	r3, [r7, #20]
   14458:	2220      	movs	r2, #32
   1445a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   1445c:	2310      	movs	r3, #16
   1445e:	18fb      	adds	r3, r7, r3
   14460:	881b      	ldrh	r3, [r3, #0]
   14462:	2208      	movs	r2, #8
   14464:	4013      	ands	r3, r2
   14466:	d004      	beq.n	14472 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   14468:	69bb      	ldr	r3, [r7, #24]
   1446a:	699b      	ldr	r3, [r3, #24]
   1446c:	69ba      	ldr	r2, [r7, #24]
   1446e:	0010      	movs	r0, r2
   14470:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   14472:	2312      	movs	r3, #18
   14474:	18fb      	adds	r3, r7, r3
   14476:	881b      	ldrh	r3, [r3, #0]
   14478:	2208      	movs	r2, #8
   1447a:	4013      	ands	r3, r2
   1447c:	d010      	beq.n	144a0 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   1447e:	697b      	ldr	r3, [r7, #20]
   14480:	2208      	movs	r2, #8
   14482:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   14484:	697b      	ldr	r3, [r7, #20]
   14486:	2208      	movs	r2, #8
   14488:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   1448a:	2310      	movs	r3, #16
   1448c:	18fb      	adds	r3, r7, r3
   1448e:	881b      	ldrh	r3, [r3, #0]
   14490:	2220      	movs	r2, #32
   14492:	4013      	ands	r3, r2
   14494:	d004      	beq.n	144a0 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   14496:	69bb      	ldr	r3, [r7, #24]
   14498:	6a1b      	ldr	r3, [r3, #32]
   1449a:	69ba      	ldr	r2, [r7, #24]
   1449c:	0010      	movs	r0, r2
   1449e:	4798      	blx	r3
		}
	}
#endif
}
   144a0:	46c0      	nop			; (mov r8, r8)
   144a2:	46bd      	mov	sp, r7
   144a4:	b008      	add	sp, #32
   144a6:	bd80      	pop	{r7, pc}

000144a8 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
   144a8:	b580      	push	{r7, lr}
   144aa:	b082      	sub	sp, #8
   144ac:	af00      	add	r7, sp, #0
   144ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
   144b0:	687b      	ldr	r3, [r7, #4]
   144b2:	2201      	movs	r2, #1
   144b4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   144b6:	687b      	ldr	r3, [r7, #4]
   144b8:	2200      	movs	r2, #0
   144ba:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
   144bc:	687b      	ldr	r3, [r7, #4]
   144be:	2206      	movs	r2, #6
   144c0:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
   144c2:	687b      	ldr	r3, [r7, #4]
   144c4:	2200      	movs	r2, #0
   144c6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   144c8:	687b      	ldr	r3, [r7, #4]
   144ca:	2200      	movs	r2, #0
   144cc:	725a      	strb	r2, [r3, #9]
}
   144ce:	46c0      	nop			; (mov r8, r8)
   144d0:	46bd      	mov	sp, r7
   144d2:	b002      	add	sp, #8
   144d4:	bd80      	pop	{r7, pc}
   144d6:	46c0      	nop			; (mov r8, r8)

000144d8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   144d8:	b580      	push	{r7, lr}
   144da:	b082      	sub	sp, #8
   144dc:	af00      	add	r7, sp, #0
   144de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   144e0:	687b      	ldr	r3, [r7, #4]
   144e2:	2200      	movs	r2, #0
   144e4:	701a      	strb	r2, [r3, #0]
}
   144e6:	46c0      	nop			; (mov r8, r8)
   144e8:	46bd      	mov	sp, r7
   144ea:	b002      	add	sp, #8
   144ec:	bd80      	pop	{r7, pc}
   144ee:	46c0      	nop			; (mov r8, r8)

000144f0 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
   144f0:	b580      	push	{r7, lr}
   144f2:	b082      	sub	sp, #8
   144f4:	af00      	add	r7, sp, #0
   144f6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   144f8:	687b      	ldr	r3, [r7, #4]
   144fa:	2200      	movs	r2, #0
   144fc:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
   144fe:	687b      	ldr	r3, [r7, #4]
   14500:	2204      	movs	r2, #4
   14502:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
   14504:	687b      	ldr	r3, [r7, #4]
   14506:	2200      	movs	r2, #0
   14508:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
   1450a:	687b      	ldr	r3, [r7, #4]
   1450c:	2280      	movs	r2, #128	; 0x80
   1450e:	0212      	lsls	r2, r2, #8
   14510:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
   14512:	687b      	ldr	r3, [r7, #4]
   14514:	2200      	movs	r2, #0
   14516:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
   14518:	687b      	ldr	r3, [r7, #4]
   1451a:	2201      	movs	r2, #1
   1451c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
   1451e:	687b      	ldr	r3, [r7, #4]
   14520:	2200      	movs	r2, #0
   14522:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
   14524:	687b      	ldr	r3, [r7, #4]
   14526:	2201      	movs	r2, #1
   14528:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
   1452a:	687b      	ldr	r3, [r7, #4]
   1452c:	2200      	movs	r2, #0
   1452e:	739a      	strb	r2, [r3, #14]
}
   14530:	46c0      	nop			; (mov r8, r8)
   14532:	46bd      	mov	sp, r7
   14534:	b002      	add	sp, #8
   14536:	bd80      	pop	{r7, pc}

00014538 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
   14538:	b580      	push	{r7, lr}
   1453a:	b082      	sub	sp, #8
   1453c:	af00      	add	r7, sp, #0
   1453e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   14540:	687b      	ldr	r3, [r7, #4]
   14542:	2203      	movs	r2, #3
   14544:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   14546:	687b      	ldr	r3, [r7, #4]
   14548:	2200      	movs	r2, #0
   1454a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   1454c:	687b      	ldr	r3, [r7, #4]
   1454e:	2201      	movs	r2, #1
   14550:	709a      	strb	r2, [r3, #2]
}
   14552:	46c0      	nop			; (mov r8, r8)
   14554:	46bd      	mov	sp, r7
   14556:	b002      	add	sp, #8
   14558:	bd80      	pop	{r7, pc}
   1455a:	46c0      	nop			; (mov r8, r8)

0001455c <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
   1455c:	b580      	push	{r7, lr}
   1455e:	b082      	sub	sp, #8
   14560:	af00      	add	r7, sp, #0
   14562:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
   14564:	687b      	ldr	r3, [r7, #4]
   14566:	2200      	movs	r2, #0
   14568:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   1456a:	687b      	ldr	r3, [r7, #4]
   1456c:	2200      	movs	r2, #0
   1456e:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   14570:	687b      	ldr	r3, [r7, #4]
   14572:	2200      	movs	r2, #0
   14574:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   14576:	687b      	ldr	r3, [r7, #4]
   14578:	2200      	movs	r2, #0
   1457a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   1457c:	687b      	ldr	r3, [r7, #4]
   1457e:	2200      	movs	r2, #0
   14580:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
   14582:	687b      	ldr	r3, [r7, #4]
   14584:	2201      	movs	r2, #1
   14586:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
   14588:	687b      	ldr	r3, [r7, #4]
   1458a:	2207      	movs	r2, #7
   1458c:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
   1458e:	687b      	ldr	r3, [r7, #4]
   14590:	223f      	movs	r2, #63	; 0x3f
   14592:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
   14594:	687b      	ldr	r3, [r7, #4]
   14596:	2201      	movs	r2, #1
   14598:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
   1459a:	687b      	ldr	r3, [r7, #4]
   1459c:	2201      	movs	r2, #1
   1459e:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
   145a0:	687b      	ldr	r3, [r7, #4]
   145a2:	2206      	movs	r2, #6
   145a4:	821a      	strh	r2, [r3, #16]
}
   145a6:	46c0      	nop			; (mov r8, r8)
   145a8:	46bd      	mov	sp, r7
   145aa:	b002      	add	sp, #8
   145ac:	bd80      	pop	{r7, pc}
   145ae:	46c0      	nop			; (mov r8, r8)

000145b0 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
   145b0:	b580      	push	{r7, lr}
   145b2:	b082      	sub	sp, #8
   145b4:	af00      	add	r7, sp, #0
   145b6:	0002      	movs	r2, r0
   145b8:	1dfb      	adds	r3, r7, #7
   145ba:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
   145bc:	4a03      	ldr	r2, [pc, #12]	; (145cc <system_cpu_clock_set_divider+0x1c>)
   145be:	1dfb      	adds	r3, r7, #7
   145c0:	781b      	ldrb	r3, [r3, #0]
   145c2:	7213      	strb	r3, [r2, #8]
}
   145c4:	46c0      	nop			; (mov r8, r8)
   145c6:	46bd      	mov	sp, r7
   145c8:	b002      	add	sp, #8
   145ca:	bd80      	pop	{r7, pc}
   145cc:	40000400 	.word	0x40000400

000145d0 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
   145d0:	b580      	push	{r7, lr}
   145d2:	b082      	sub	sp, #8
   145d4:	af00      	add	r7, sp, #0
   145d6:	0002      	movs	r2, r0
   145d8:	1dfb      	adds	r3, r7, #7
   145da:	701a      	strb	r2, [r3, #0]
   145dc:	1dbb      	adds	r3, r7, #6
   145de:	1c0a      	adds	r2, r1, #0
   145e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   145e2:	1dfb      	adds	r3, r7, #7
   145e4:	781b      	ldrb	r3, [r3, #0]
   145e6:	2b01      	cmp	r3, #1
   145e8:	d008      	beq.n	145fc <system_apb_clock_set_divider+0x2c>
   145ea:	2b02      	cmp	r3, #2
   145ec:	d00b      	beq.n	14606 <system_apb_clock_set_divider+0x36>
   145ee:	2b00      	cmp	r3, #0
   145f0:	d10e      	bne.n	14610 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
   145f2:	4a0b      	ldr	r2, [pc, #44]	; (14620 <system_apb_clock_set_divider+0x50>)
   145f4:	1dbb      	adds	r3, r7, #6
   145f6:	781b      	ldrb	r3, [r3, #0]
   145f8:	7253      	strb	r3, [r2, #9]
			break;
   145fa:	e00b      	b.n	14614 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
   145fc:	4a08      	ldr	r2, [pc, #32]	; (14620 <system_apb_clock_set_divider+0x50>)
   145fe:	1dbb      	adds	r3, r7, #6
   14600:	781b      	ldrb	r3, [r3, #0]
   14602:	7293      	strb	r3, [r2, #10]
			break;
   14604:	e006      	b.n	14614 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
   14606:	4a06      	ldr	r2, [pc, #24]	; (14620 <system_apb_clock_set_divider+0x50>)
   14608:	1dbb      	adds	r3, r7, #6
   1460a:	781b      	ldrb	r3, [r3, #0]
   1460c:	72d3      	strb	r3, [r2, #11]
			break;
   1460e:	e001      	b.n	14614 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   14610:	2317      	movs	r3, #23
   14612:	e000      	b.n	14616 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
   14614:	2300      	movs	r3, #0
}
   14616:	0018      	movs	r0, r3
   14618:	46bd      	mov	sp, r7
   1461a:	b002      	add	sp, #8
   1461c:	bd80      	pop	{r7, pc}
   1461e:	46c0      	nop			; (mov r8, r8)
   14620:	40000400 	.word	0x40000400

00014624 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   14624:	b580      	push	{r7, lr}
   14626:	b082      	sub	sp, #8
   14628:	af00      	add	r7, sp, #0
   1462a:	0002      	movs	r2, r0
   1462c:	1dfb      	adds	r3, r7, #7
   1462e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   14630:	4a08      	ldr	r2, [pc, #32]	; (14654 <system_flash_set_waitstates+0x30>)
   14632:	1dfb      	adds	r3, r7, #7
   14634:	781b      	ldrb	r3, [r3, #0]
   14636:	210f      	movs	r1, #15
   14638:	400b      	ands	r3, r1
   1463a:	b2d9      	uxtb	r1, r3
   1463c:	6853      	ldr	r3, [r2, #4]
   1463e:	200f      	movs	r0, #15
   14640:	4001      	ands	r1, r0
   14642:	0049      	lsls	r1, r1, #1
   14644:	201e      	movs	r0, #30
   14646:	4383      	bics	r3, r0
   14648:	430b      	orrs	r3, r1
   1464a:	6053      	str	r3, [r2, #4]
}
   1464c:	46c0      	nop			; (mov r8, r8)
   1464e:	46bd      	mov	sp, r7
   14650:	b002      	add	sp, #8
   14652:	bd80      	pop	{r7, pc}
   14654:	41004000 	.word	0x41004000

00014658 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   14658:	b580      	push	{r7, lr}
   1465a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   1465c:	46c0      	nop			; (mov r8, r8)
   1465e:	4b04      	ldr	r3, [pc, #16]	; (14670 <_system_dfll_wait_for_sync+0x18>)
   14660:	68db      	ldr	r3, [r3, #12]
   14662:	2210      	movs	r2, #16
   14664:	4013      	ands	r3, r2
   14666:	d0fa      	beq.n	1465e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   14668:	46c0      	nop			; (mov r8, r8)
   1466a:	46bd      	mov	sp, r7
   1466c:	bd80      	pop	{r7, pc}
   1466e:	46c0      	nop			; (mov r8, r8)
   14670:	40000800 	.word	0x40000800

00014674 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   14674:	b580      	push	{r7, lr}
   14676:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   14678:	4b0c      	ldr	r3, [pc, #48]	; (146ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1467a:	2202      	movs	r2, #2
   1467c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   1467e:	4b0c      	ldr	r3, [pc, #48]	; (146b0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   14680:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   14682:	4a0a      	ldr	r2, [pc, #40]	; (146ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   14684:	4b0b      	ldr	r3, [pc, #44]	; (146b4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   14686:	689b      	ldr	r3, [r3, #8]
   14688:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   1468a:	4a08      	ldr	r2, [pc, #32]	; (146ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1468c:	4b09      	ldr	r3, [pc, #36]	; (146b4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   1468e:	685b      	ldr	r3, [r3, #4]
   14690:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   14692:	4b06      	ldr	r3, [pc, #24]	; (146ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   14694:	2200      	movs	r2, #0
   14696:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   14698:	4b05      	ldr	r3, [pc, #20]	; (146b0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   1469a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   1469c:	4a03      	ldr	r2, [pc, #12]	; (146ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   1469e:	4b05      	ldr	r3, [pc, #20]	; (146b4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   146a0:	681b      	ldr	r3, [r3, #0]
   146a2:	b29b      	uxth	r3, r3
   146a4:	8493      	strh	r3, [r2, #36]	; 0x24
}
   146a6:	46c0      	nop			; (mov r8, r8)
   146a8:	46bd      	mov	sp, r7
   146aa:	bd80      	pop	{r7, pc}
   146ac:	40000800 	.word	0x40000800
   146b0:	00014659 	.word	0x00014659
   146b4:	20000108 	.word	0x20000108

000146b8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   146b8:	b580      	push	{r7, lr}
   146ba:	b082      	sub	sp, #8
   146bc:	af00      	add	r7, sp, #0
   146be:	0002      	movs	r2, r0
   146c0:	1dfb      	adds	r3, r7, #7
   146c2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   146c4:	1dfb      	adds	r3, r7, #7
   146c6:	781b      	ldrb	r3, [r3, #0]
   146c8:	2b08      	cmp	r3, #8
   146ca:	d840      	bhi.n	1474e <system_clock_source_get_hz+0x96>
   146cc:	009a      	lsls	r2, r3, #2
   146ce:	4b22      	ldr	r3, [pc, #136]	; (14758 <system_clock_source_get_hz+0xa0>)
   146d0:	18d3      	adds	r3, r2, r3
   146d2:	681b      	ldr	r3, [r3, #0]
   146d4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   146d6:	4b21      	ldr	r3, [pc, #132]	; (1475c <system_clock_source_get_hz+0xa4>)
   146d8:	691b      	ldr	r3, [r3, #16]
   146da:	e039      	b.n	14750 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   146dc:	4b20      	ldr	r3, [pc, #128]	; (14760 <system_clock_source_get_hz+0xa8>)
   146de:	6a1b      	ldr	r3, [r3, #32]
   146e0:	059b      	lsls	r3, r3, #22
   146e2:	0f9b      	lsrs	r3, r3, #30
   146e4:	b2db      	uxtb	r3, r3
   146e6:	001a      	movs	r2, r3
   146e8:	4b1e      	ldr	r3, [pc, #120]	; (14764 <system_clock_source_get_hz+0xac>)
   146ea:	40d3      	lsrs	r3, r2
   146ec:	e030      	b.n	14750 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   146ee:	2380      	movs	r3, #128	; 0x80
   146f0:	021b      	lsls	r3, r3, #8
   146f2:	e02d      	b.n	14750 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   146f4:	2380      	movs	r3, #128	; 0x80
   146f6:	021b      	lsls	r3, r3, #8
   146f8:	e02a      	b.n	14750 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   146fa:	4b18      	ldr	r3, [pc, #96]	; (1475c <system_clock_source_get_hz+0xa4>)
   146fc:	695b      	ldr	r3, [r3, #20]
   146fe:	e027      	b.n	14750 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   14700:	4b16      	ldr	r3, [pc, #88]	; (1475c <system_clock_source_get_hz+0xa4>)
   14702:	681b      	ldr	r3, [r3, #0]
   14704:	2202      	movs	r2, #2
   14706:	4013      	ands	r3, r2
   14708:	d101      	bne.n	1470e <system_clock_source_get_hz+0x56>
			return 0;
   1470a:	2300      	movs	r3, #0
   1470c:	e020      	b.n	14750 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   1470e:	4b16      	ldr	r3, [pc, #88]	; (14768 <system_clock_source_get_hz+0xb0>)
   14710:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
   14712:	4b12      	ldr	r3, [pc, #72]	; (1475c <system_clock_source_get_hz+0xa4>)
   14714:	681b      	ldr	r3, [r3, #0]
   14716:	2204      	movs	r2, #4
   14718:	4013      	ands	r3, r2
   1471a:	d009      	beq.n	14730 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1471c:	2000      	movs	r0, #0
   1471e:	4b13      	ldr	r3, [pc, #76]	; (1476c <system_clock_source_get_hz+0xb4>)
   14720:	4798      	blx	r3
   14722:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   14724:	4b0d      	ldr	r3, [pc, #52]	; (1475c <system_clock_source_get_hz+0xa4>)
   14726:	689b      	ldr	r3, [r3, #8]
   14728:	041b      	lsls	r3, r3, #16
   1472a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   1472c:	4353      	muls	r3, r2
   1472e:	e00f      	b.n	14750 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
   14730:	4b0f      	ldr	r3, [pc, #60]	; (14770 <system_clock_source_get_hz+0xb8>)
   14732:	e00d      	b.n	14750 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   14734:	4a0a      	ldr	r2, [pc, #40]	; (14760 <system_clock_source_get_hz+0xa8>)
   14736:	2350      	movs	r3, #80	; 0x50
   14738:	5cd3      	ldrb	r3, [r2, r3]
   1473a:	b2db      	uxtb	r3, r3
   1473c:	001a      	movs	r2, r3
   1473e:	2304      	movs	r3, #4
   14740:	4013      	ands	r3, r2
   14742:	d101      	bne.n	14748 <system_clock_source_get_hz+0x90>
			return 0;
   14744:	2300      	movs	r3, #0
   14746:	e003      	b.n	14750 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
   14748:	4b04      	ldr	r3, [pc, #16]	; (1475c <system_clock_source_get_hz+0xa4>)
   1474a:	68db      	ldr	r3, [r3, #12]
   1474c:	e000      	b.n	14750 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
   1474e:	2300      	movs	r3, #0
	}
}
   14750:	0018      	movs	r0, r3
   14752:	46bd      	mov	sp, r7
   14754:	b002      	add	sp, #8
   14756:	bd80      	pop	{r7, pc}
   14758:	00019734 	.word	0x00019734
   1475c:	20000108 	.word	0x20000108
   14760:	40000800 	.word	0x40000800
   14764:	007a1200 	.word	0x007a1200
   14768:	00014659 	.word	0x00014659
   1476c:	00015211 	.word	0x00015211
   14770:	02dc6c00 	.word	0x02dc6c00

00014774 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   14774:	b580      	push	{r7, lr}
   14776:	b084      	sub	sp, #16
   14778:	af00      	add	r7, sp, #0
   1477a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   1477c:	4b1a      	ldr	r3, [pc, #104]	; (147e8 <system_clock_source_osc8m_set_config+0x74>)
   1477e:	6a1b      	ldr	r3, [r3, #32]
   14780:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   14782:	687b      	ldr	r3, [r7, #4]
   14784:	781b      	ldrb	r3, [r3, #0]
   14786:	1c1a      	adds	r2, r3, #0
   14788:	2303      	movs	r3, #3
   1478a:	4013      	ands	r3, r2
   1478c:	b2da      	uxtb	r2, r3
   1478e:	230d      	movs	r3, #13
   14790:	18fb      	adds	r3, r7, r3
   14792:	2103      	movs	r1, #3
   14794:	400a      	ands	r2, r1
   14796:	0010      	movs	r0, r2
   14798:	781a      	ldrb	r2, [r3, #0]
   1479a:	2103      	movs	r1, #3
   1479c:	438a      	bics	r2, r1
   1479e:	1c11      	adds	r1, r2, #0
   147a0:	1c02      	adds	r2, r0, #0
   147a2:	430a      	orrs	r2, r1
   147a4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   147a6:	687b      	ldr	r3, [r7, #4]
   147a8:	789a      	ldrb	r2, [r3, #2]
   147aa:	230c      	movs	r3, #12
   147ac:	18fb      	adds	r3, r7, r3
   147ae:	01d0      	lsls	r0, r2, #7
   147b0:	781a      	ldrb	r2, [r3, #0]
   147b2:	217f      	movs	r1, #127	; 0x7f
   147b4:	400a      	ands	r2, r1
   147b6:	1c11      	adds	r1, r2, #0
   147b8:	1c02      	adds	r2, r0, #0
   147ba:	430a      	orrs	r2, r1
   147bc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   147be:	687b      	ldr	r3, [r7, #4]
   147c0:	785a      	ldrb	r2, [r3, #1]
   147c2:	230c      	movs	r3, #12
   147c4:	18fb      	adds	r3, r7, r3
   147c6:	2101      	movs	r1, #1
   147c8:	400a      	ands	r2, r1
   147ca:	0190      	lsls	r0, r2, #6
   147cc:	781a      	ldrb	r2, [r3, #0]
   147ce:	2140      	movs	r1, #64	; 0x40
   147d0:	438a      	bics	r2, r1
   147d2:	1c11      	adds	r1, r2, #0
   147d4:	1c02      	adds	r2, r0, #0
   147d6:	430a      	orrs	r2, r1
   147d8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   147da:	4b03      	ldr	r3, [pc, #12]	; (147e8 <system_clock_source_osc8m_set_config+0x74>)
   147dc:	68fa      	ldr	r2, [r7, #12]
   147de:	621a      	str	r2, [r3, #32]
}
   147e0:	46c0      	nop			; (mov r8, r8)
   147e2:	46bd      	mov	sp, r7
   147e4:	b004      	add	sp, #16
   147e6:	bd80      	pop	{r7, pc}
   147e8:	40000800 	.word	0x40000800

000147ec <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   147ec:	b580      	push	{r7, lr}
   147ee:	b084      	sub	sp, #16
   147f0:	af00      	add	r7, sp, #0
   147f2:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   147f4:	4a43      	ldr	r2, [pc, #268]	; (14904 <system_clock_source_xosc32k_set_config+0x118>)
   147f6:	230c      	movs	r3, #12
   147f8:	18fb      	adds	r3, r7, r3
   147fa:	8a92      	ldrh	r2, [r2, #20]
   147fc:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
   147fe:	687b      	ldr	r3, [r7, #4]
   14800:	785b      	ldrb	r3, [r3, #1]
   14802:	1c1a      	adds	r2, r3, #0
   14804:	2307      	movs	r3, #7
   14806:	4013      	ands	r3, r2
   14808:	b2da      	uxtb	r2, r3
   1480a:	230c      	movs	r3, #12
   1480c:	18fb      	adds	r3, r7, r3
   1480e:	2107      	movs	r1, #7
   14810:	400a      	ands	r2, r1
   14812:	0010      	movs	r0, r2
   14814:	785a      	ldrb	r2, [r3, #1]
   14816:	2107      	movs	r1, #7
   14818:	438a      	bics	r2, r1
   1481a:	1c11      	adds	r1, r2, #0
   1481c:	1c02      	adds	r2, r0, #0
   1481e:	430a      	orrs	r2, r1
   14820:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   14822:	687b      	ldr	r3, [r7, #4]
   14824:	781b      	ldrb	r3, [r3, #0]
   14826:	2b00      	cmp	r3, #0
   14828:	d106      	bne.n	14838 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
   1482a:	230c      	movs	r3, #12
   1482c:	18fb      	adds	r3, r7, r3
   1482e:	781a      	ldrb	r2, [r3, #0]
   14830:	2104      	movs	r1, #4
   14832:	430a      	orrs	r2, r1
   14834:	701a      	strb	r2, [r3, #0]
   14836:	e005      	b.n	14844 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
   14838:	230c      	movs	r3, #12
   1483a:	18fb      	adds	r3, r7, r3
   1483c:	781a      	ldrb	r2, [r3, #0]
   1483e:	2104      	movs	r1, #4
   14840:	438a      	bics	r2, r1
   14842:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   14844:	687b      	ldr	r3, [r7, #4]
   14846:	789a      	ldrb	r2, [r3, #2]
   14848:	230c      	movs	r3, #12
   1484a:	18fb      	adds	r3, r7, r3
   1484c:	2101      	movs	r1, #1
   1484e:	400a      	ands	r2, r1
   14850:	0150      	lsls	r0, r2, #5
   14852:	781a      	ldrb	r2, [r3, #0]
   14854:	2120      	movs	r1, #32
   14856:	438a      	bics	r2, r1
   14858:	1c11      	adds	r1, r2, #0
   1485a:	1c02      	adds	r2, r0, #0
   1485c:	430a      	orrs	r2, r1
   1485e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
   14860:	687b      	ldr	r3, [r7, #4]
   14862:	78da      	ldrb	r2, [r3, #3]
   14864:	230c      	movs	r3, #12
   14866:	18fb      	adds	r3, r7, r3
   14868:	2101      	movs	r1, #1
   1486a:	400a      	ands	r2, r1
   1486c:	0110      	lsls	r0, r2, #4
   1486e:	781a      	ldrb	r2, [r3, #0]
   14870:	2110      	movs	r1, #16
   14872:	438a      	bics	r2, r1
   14874:	1c11      	adds	r1, r2, #0
   14876:	1c02      	adds	r2, r0, #0
   14878:	430a      	orrs	r2, r1
   1487a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
   1487c:	687b      	ldr	r3, [r7, #4]
   1487e:	791a      	ldrb	r2, [r3, #4]
   14880:	230c      	movs	r3, #12
   14882:	18fb      	adds	r3, r7, r3
   14884:	2101      	movs	r1, #1
   14886:	400a      	ands	r2, r1
   14888:	00d0      	lsls	r0, r2, #3
   1488a:	781a      	ldrb	r2, [r3, #0]
   1488c:	2108      	movs	r1, #8
   1488e:	438a      	bics	r2, r1
   14890:	1c11      	adds	r1, r2, #0
   14892:	1c02      	adds	r2, r0, #0
   14894:	430a      	orrs	r2, r1
   14896:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
   14898:	687b      	ldr	r3, [r7, #4]
   1489a:	7b5a      	ldrb	r2, [r3, #13]
   1489c:	230c      	movs	r3, #12
   1489e:	18fb      	adds	r3, r7, r3
   148a0:	01d0      	lsls	r0, r2, #7
   148a2:	781a      	ldrb	r2, [r3, #0]
   148a4:	217f      	movs	r1, #127	; 0x7f
   148a6:	400a      	ands	r2, r1
   148a8:	1c11      	adds	r1, r2, #0
   148aa:	1c02      	adds	r2, r0, #0
   148ac:	430a      	orrs	r2, r1
   148ae:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   148b0:	687b      	ldr	r3, [r7, #4]
   148b2:	7b1a      	ldrb	r2, [r3, #12]
   148b4:	230c      	movs	r3, #12
   148b6:	18fb      	adds	r3, r7, r3
   148b8:	2101      	movs	r1, #1
   148ba:	400a      	ands	r2, r1
   148bc:	0190      	lsls	r0, r2, #6
   148be:	781a      	ldrb	r2, [r3, #0]
   148c0:	2140      	movs	r1, #64	; 0x40
   148c2:	438a      	bics	r2, r1
   148c4:	1c11      	adds	r1, r2, #0
   148c6:	1c02      	adds	r2, r0, #0
   148c8:	430a      	orrs	r2, r1
   148ca:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
   148cc:	687b      	ldr	r3, [r7, #4]
   148ce:	7b9a      	ldrb	r2, [r3, #14]
   148d0:	230c      	movs	r3, #12
   148d2:	18fb      	adds	r3, r7, r3
   148d4:	2101      	movs	r1, #1
   148d6:	400a      	ands	r2, r1
   148d8:	0110      	lsls	r0, r2, #4
   148da:	785a      	ldrb	r2, [r3, #1]
   148dc:	2110      	movs	r1, #16
   148de:	438a      	bics	r2, r1
   148e0:	1c11      	adds	r1, r2, #0
   148e2:	1c02      	adds	r2, r0, #0
   148e4:	430a      	orrs	r2, r1
   148e6:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   148e8:	687b      	ldr	r3, [r7, #4]
   148ea:	689a      	ldr	r2, [r3, #8]
   148ec:	4b06      	ldr	r3, [pc, #24]	; (14908 <system_clock_source_xosc32k_set_config+0x11c>)
   148ee:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
   148f0:	4a04      	ldr	r2, [pc, #16]	; (14904 <system_clock_source_xosc32k_set_config+0x118>)
   148f2:	230c      	movs	r3, #12
   148f4:	18fb      	adds	r3, r7, r3
   148f6:	881b      	ldrh	r3, [r3, #0]
   148f8:	8293      	strh	r3, [r2, #20]
}
   148fa:	46c0      	nop			; (mov r8, r8)
   148fc:	46bd      	mov	sp, r7
   148fe:	b004      	add	sp, #16
   14900:	bd80      	pop	{r7, pc}
   14902:	46c0      	nop			; (mov r8, r8)
   14904:	40000800 	.word	0x40000800
   14908:	20000108 	.word	0x20000108

0001490c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   1490c:	b580      	push	{r7, lr}
   1490e:	b082      	sub	sp, #8
   14910:	af00      	add	r7, sp, #0
   14912:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   14914:	687b      	ldr	r3, [r7, #4]
   14916:	7a1b      	ldrb	r3, [r3, #8]
   14918:	029b      	lsls	r3, r3, #10
   1491a:	041b      	lsls	r3, r3, #16
   1491c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   1491e:	687b      	ldr	r3, [r7, #4]
   14920:	895b      	ldrh	r3, [r3, #10]
   14922:	059b      	lsls	r3, r3, #22
   14924:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   14926:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
   14928:	4b2a      	ldr	r3, [pc, #168]	; (149d4 <system_clock_source_dfll_set_config+0xc8>)
   1492a:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   1492c:	687b      	ldr	r3, [r7, #4]
   1492e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
   14930:	687b      	ldr	r3, [r7, #4]
   14932:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   14934:	4313      	orrs	r3, r2
   14936:	b2db      	uxtb	r3, r3
   14938:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   1493a:	687b      	ldr	r3, [r7, #4]
   1493c:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
   1493e:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
   14940:	687a      	ldr	r2, [r7, #4]
   14942:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   14944:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   14946:	687b      	ldr	r3, [r7, #4]
   14948:	785b      	ldrb	r3, [r3, #1]
   1494a:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
   1494c:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
   1494e:	4b21      	ldr	r3, [pc, #132]	; (149d4 <system_clock_source_dfll_set_config+0xc8>)
   14950:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   14952:	687b      	ldr	r3, [r7, #4]
   14954:	781b      	ldrb	r3, [r3, #0]
   14956:	2b04      	cmp	r3, #4
   14958:	d116      	bne.n	14988 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1495a:	687b      	ldr	r3, [r7, #4]
   1495c:	7b1b      	ldrb	r3, [r3, #12]
   1495e:	069b      	lsls	r3, r3, #26
   14960:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   14962:	687b      	ldr	r3, [r7, #4]
   14964:	89db      	ldrh	r3, [r3, #14]
   14966:	041b      	lsls	r3, r3, #16
   14968:	0019      	movs	r1, r3
   1496a:	4b1b      	ldr	r3, [pc, #108]	; (149d8 <system_clock_source_dfll_set_config+0xcc>)
   1496c:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1496e:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   14970:	687a      	ldr	r2, [r7, #4]
   14972:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   14974:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
   14976:	4b17      	ldr	r3, [pc, #92]	; (149d4 <system_clock_source_dfll_set_config+0xc8>)
   14978:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
   1497a:	4b16      	ldr	r3, [pc, #88]	; (149d4 <system_clock_source_dfll_set_config+0xc8>)
   1497c:	681b      	ldr	r3, [r3, #0]
   1497e:	687a      	ldr	r2, [r7, #4]
   14980:	7812      	ldrb	r2, [r2, #0]
   14982:	431a      	orrs	r2, r3
   14984:	4b13      	ldr	r3, [pc, #76]	; (149d4 <system_clock_source_dfll_set_config+0xc8>)
   14986:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   14988:	687b      	ldr	r3, [r7, #4]
   1498a:	781b      	ldrb	r3, [r3, #0]
   1498c:	2b20      	cmp	r3, #32
   1498e:	d11c      	bne.n	149ca <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   14990:	687b      	ldr	r3, [r7, #4]
   14992:	7b1b      	ldrb	r3, [r3, #12]
   14994:	069b      	lsls	r3, r3, #26
   14996:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   14998:	687b      	ldr	r3, [r7, #4]
   1499a:	89db      	ldrh	r3, [r3, #14]
   1499c:	041b      	lsls	r3, r3, #16
   1499e:	0019      	movs	r1, r3
   149a0:	4b0d      	ldr	r3, [pc, #52]	; (149d8 <system_clock_source_dfll_set_config+0xcc>)
   149a2:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   149a4:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   149a6:	687a      	ldr	r2, [r7, #4]
   149a8:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   149aa:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
   149ac:	4b09      	ldr	r3, [pc, #36]	; (149d4 <system_clock_source_dfll_set_config+0xc8>)
   149ae:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   149b0:	4b08      	ldr	r3, [pc, #32]	; (149d4 <system_clock_source_dfll_set_config+0xc8>)
   149b2:	681b      	ldr	r3, [r3, #0]
   149b4:	687a      	ldr	r2, [r7, #4]
   149b6:	7812      	ldrb	r2, [r2, #0]
   149b8:	2104      	movs	r1, #4
   149ba:	430a      	orrs	r2, r1
   149bc:	b2d2      	uxtb	r2, r2
   149be:	4313      	orrs	r3, r2
   149c0:	2280      	movs	r2, #128	; 0x80
   149c2:	00d2      	lsls	r2, r2, #3
   149c4:	431a      	orrs	r2, r3
   149c6:	4b03      	ldr	r3, [pc, #12]	; (149d4 <system_clock_source_dfll_set_config+0xc8>)
   149c8:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   149ca:	46c0      	nop			; (mov r8, r8)
   149cc:	46bd      	mov	sp, r7
   149ce:	b002      	add	sp, #8
   149d0:	bd80      	pop	{r7, pc}
   149d2:	46c0      	nop			; (mov r8, r8)
   149d4:	20000108 	.word	0x20000108
   149d8:	03ff0000 	.word	0x03ff0000

000149dc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   149dc:	b580      	push	{r7, lr}
   149de:	b082      	sub	sp, #8
   149e0:	af00      	add	r7, sp, #0
   149e2:	0002      	movs	r2, r0
   149e4:	1dfb      	adds	r3, r7, #7
   149e6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   149e8:	1dfb      	adds	r3, r7, #7
   149ea:	781b      	ldrb	r3, [r3, #0]
   149ec:	2b08      	cmp	r3, #8
   149ee:	d83b      	bhi.n	14a68 <system_clock_source_enable+0x8c>
   149f0:	009a      	lsls	r2, r3, #2
   149f2:	4b21      	ldr	r3, [pc, #132]	; (14a78 <system_clock_source_enable+0x9c>)
   149f4:	18d3      	adds	r3, r2, r3
   149f6:	681b      	ldr	r3, [r3, #0]
   149f8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   149fa:	4b20      	ldr	r3, [pc, #128]	; (14a7c <system_clock_source_enable+0xa0>)
   149fc:	4a1f      	ldr	r2, [pc, #124]	; (14a7c <system_clock_source_enable+0xa0>)
   149fe:	6a12      	ldr	r2, [r2, #32]
   14a00:	2102      	movs	r1, #2
   14a02:	430a      	orrs	r2, r1
   14a04:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   14a06:	2300      	movs	r3, #0
   14a08:	e031      	b.n	14a6e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   14a0a:	4b1c      	ldr	r3, [pc, #112]	; (14a7c <system_clock_source_enable+0xa0>)
   14a0c:	4a1b      	ldr	r2, [pc, #108]	; (14a7c <system_clock_source_enable+0xa0>)
   14a0e:	6992      	ldr	r2, [r2, #24]
   14a10:	2102      	movs	r1, #2
   14a12:	430a      	orrs	r2, r1
   14a14:	619a      	str	r2, [r3, #24]
		break;
   14a16:	e029      	b.n	14a6c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   14a18:	4a18      	ldr	r2, [pc, #96]	; (14a7c <system_clock_source_enable+0xa0>)
   14a1a:	4b18      	ldr	r3, [pc, #96]	; (14a7c <system_clock_source_enable+0xa0>)
   14a1c:	8a1b      	ldrh	r3, [r3, #16]
   14a1e:	b29b      	uxth	r3, r3
   14a20:	2102      	movs	r1, #2
   14a22:	430b      	orrs	r3, r1
   14a24:	b29b      	uxth	r3, r3
   14a26:	8213      	strh	r3, [r2, #16]
		break;
   14a28:	e020      	b.n	14a6c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   14a2a:	4a14      	ldr	r2, [pc, #80]	; (14a7c <system_clock_source_enable+0xa0>)
   14a2c:	4b13      	ldr	r3, [pc, #76]	; (14a7c <system_clock_source_enable+0xa0>)
   14a2e:	8a9b      	ldrh	r3, [r3, #20]
   14a30:	b29b      	uxth	r3, r3
   14a32:	2102      	movs	r1, #2
   14a34:	430b      	orrs	r3, r1
   14a36:	b29b      	uxth	r3, r3
   14a38:	8293      	strh	r3, [r2, #20]
		break;
   14a3a:	e017      	b.n	14a6c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   14a3c:	4b10      	ldr	r3, [pc, #64]	; (14a80 <system_clock_source_enable+0xa4>)
   14a3e:	681b      	ldr	r3, [r3, #0]
   14a40:	2202      	movs	r2, #2
   14a42:	431a      	orrs	r2, r3
   14a44:	4b0e      	ldr	r3, [pc, #56]	; (14a80 <system_clock_source_enable+0xa4>)
   14a46:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   14a48:	4b0e      	ldr	r3, [pc, #56]	; (14a84 <system_clock_source_enable+0xa8>)
   14a4a:	4798      	blx	r3
		break;
   14a4c:	e00e      	b.n	14a6c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   14a4e:	4a0b      	ldr	r2, [pc, #44]	; (14a7c <system_clock_source_enable+0xa0>)
   14a50:	490a      	ldr	r1, [pc, #40]	; (14a7c <system_clock_source_enable+0xa0>)
   14a52:	2344      	movs	r3, #68	; 0x44
   14a54:	5ccb      	ldrb	r3, [r1, r3]
   14a56:	b2db      	uxtb	r3, r3
   14a58:	2102      	movs	r1, #2
   14a5a:	430b      	orrs	r3, r1
   14a5c:	b2d9      	uxtb	r1, r3
   14a5e:	2344      	movs	r3, #68	; 0x44
   14a60:	54d1      	strb	r1, [r2, r3]
		break;
   14a62:	e003      	b.n	14a6c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   14a64:	2300      	movs	r3, #0
   14a66:	e002      	b.n	14a6e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   14a68:	2317      	movs	r3, #23
   14a6a:	e000      	b.n	14a6e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   14a6c:	2300      	movs	r3, #0
}
   14a6e:	0018      	movs	r0, r3
   14a70:	46bd      	mov	sp, r7
   14a72:	b002      	add	sp, #8
   14a74:	bd80      	pop	{r7, pc}
   14a76:	46c0      	nop			; (mov r8, r8)
   14a78:	00019758 	.word	0x00019758
   14a7c:	40000800 	.word	0x40000800
   14a80:	20000108 	.word	0x20000108
   14a84:	00014675 	.word	0x00014675

00014a88 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   14a88:	b580      	push	{r7, lr}
   14a8a:	b084      	sub	sp, #16
   14a8c:	af00      	add	r7, sp, #0
   14a8e:	0002      	movs	r2, r0
   14a90:	1dfb      	adds	r3, r7, #7
   14a92:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   14a94:	2300      	movs	r3, #0
   14a96:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   14a98:	1dfb      	adds	r3, r7, #7
   14a9a:	781b      	ldrb	r3, [r3, #0]
   14a9c:	2b08      	cmp	r3, #8
   14a9e:	d821      	bhi.n	14ae4 <system_clock_source_is_ready+0x5c>
   14aa0:	009a      	lsls	r2, r3, #2
   14aa2:	4b18      	ldr	r3, [pc, #96]	; (14b04 <system_clock_source_is_ready+0x7c>)
   14aa4:	18d3      	adds	r3, r2, r3
   14aa6:	681b      	ldr	r3, [r3, #0]
   14aa8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   14aaa:	2308      	movs	r3, #8
   14aac:	60fb      	str	r3, [r7, #12]
		break;
   14aae:	e01b      	b.n	14ae8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   14ab0:	2304      	movs	r3, #4
   14ab2:	60fb      	str	r3, [r7, #12]
		break;
   14ab4:	e018      	b.n	14ae8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   14ab6:	2301      	movs	r3, #1
   14ab8:	60fb      	str	r3, [r7, #12]
		break;
   14aba:	e015      	b.n	14ae8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   14abc:	2302      	movs	r3, #2
   14abe:	60fb      	str	r3, [r7, #12]
		break;
   14ac0:	e012      	b.n	14ae8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
   14ac2:	23d0      	movs	r3, #208	; 0xd0
   14ac4:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
   14ac6:	e00f      	b.n	14ae8 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   14ac8:	4a0f      	ldr	r2, [pc, #60]	; (14b08 <system_clock_source_is_ready+0x80>)
   14aca:	2350      	movs	r3, #80	; 0x50
   14acc:	5cd3      	ldrb	r3, [r2, r3]
   14ace:	b2db      	uxtb	r3, r3
   14ad0:	001a      	movs	r2, r3
   14ad2:	2303      	movs	r3, #3
   14ad4:	4013      	ands	r3, r2
   14ad6:	3b03      	subs	r3, #3
   14ad8:	425a      	negs	r2, r3
   14ada:	4153      	adcs	r3, r2
   14adc:	b2db      	uxtb	r3, r3
   14ade:	e00c      	b.n	14afa <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   14ae0:	2301      	movs	r3, #1
   14ae2:	e00a      	b.n	14afa <system_clock_source_is_ready+0x72>

	default:
		return false;
   14ae4:	2300      	movs	r3, #0
   14ae6:	e008      	b.n	14afa <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   14ae8:	4b07      	ldr	r3, [pc, #28]	; (14b08 <system_clock_source_is_ready+0x80>)
   14aea:	68db      	ldr	r3, [r3, #12]
   14aec:	68fa      	ldr	r2, [r7, #12]
   14aee:	401a      	ands	r2, r3
   14af0:	68fb      	ldr	r3, [r7, #12]
   14af2:	1ad3      	subs	r3, r2, r3
   14af4:	425a      	negs	r2, r3
   14af6:	4153      	adcs	r3, r2
   14af8:	b2db      	uxtb	r3, r3
}
   14afa:	0018      	movs	r0, r3
   14afc:	46bd      	mov	sp, r7
   14afe:	b004      	add	sp, #16
   14b00:	bd80      	pop	{r7, pc}
   14b02:	46c0      	nop			; (mov r8, r8)
   14b04:	0001977c 	.word	0x0001977c
   14b08:	40000800 	.word	0x40000800

00014b0c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   14b0c:	b580      	push	{r7, lr}
   14b0e:	b082      	sub	sp, #8
   14b10:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   14b12:	003b      	movs	r3, r7
   14b14:	2202      	movs	r2, #2
   14b16:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   14b18:	2300      	movs	r3, #0
   14b1a:	607b      	str	r3, [r7, #4]
   14b1c:	e009      	b.n	14b32 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   14b1e:	687b      	ldr	r3, [r7, #4]
   14b20:	b2db      	uxtb	r3, r3
   14b22:	003a      	movs	r2, r7
   14b24:	0011      	movs	r1, r2
   14b26:	0018      	movs	r0, r3
   14b28:	4b05      	ldr	r3, [pc, #20]	; (14b40 <_switch_peripheral_gclk+0x34>)
   14b2a:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   14b2c:	687b      	ldr	r3, [r7, #4]
   14b2e:	3301      	adds	r3, #1
   14b30:	607b      	str	r3, [r7, #4]
   14b32:	687b      	ldr	r3, [r7, #4]
   14b34:	2b24      	cmp	r3, #36	; 0x24
   14b36:	d9f2      	bls.n	14b1e <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
   14b38:	46c0      	nop			; (mov r8, r8)
   14b3a:	46bd      	mov	sp, r7
   14b3c:	b002      	add	sp, #8
   14b3e:	bd80      	pop	{r7, pc}
   14b40:	000150ed 	.word	0x000150ed

00014b44 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   14b44:	b580      	push	{r7, lr}
   14b46:	b0aa      	sub	sp, #168	; 0xa8
   14b48:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   14b4a:	4b87      	ldr	r3, [pc, #540]	; (14d68 <system_clock_init+0x224>)
   14b4c:	22c2      	movs	r2, #194	; 0xc2
   14b4e:	00d2      	lsls	r2, r2, #3
   14b50:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   14b52:	2002      	movs	r0, #2
   14b54:	4b85      	ldr	r3, [pc, #532]	; (14d6c <system_clock_init+0x228>)
   14b56:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   14b58:	4b85      	ldr	r3, [pc, #532]	; (14d70 <system_clock_init+0x22c>)
   14b5a:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
   14b5c:	2394      	movs	r3, #148	; 0x94
   14b5e:	18fb      	adds	r3, r7, r3
   14b60:	0018      	movs	r0, r3
   14b62:	4b84      	ldr	r3, [pc, #528]	; (14d74 <system_clock_init+0x230>)
   14b64:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
   14b66:	2394      	movs	r3, #148	; 0x94
   14b68:	18fb      	adds	r3, r7, r3
   14b6a:	2280      	movs	r2, #128	; 0x80
   14b6c:	0212      	lsls	r2, r2, #8
   14b6e:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
   14b70:	2394      	movs	r3, #148	; 0x94
   14b72:	18fb      	adds	r3, r7, r3
   14b74:	2200      	movs	r2, #0
   14b76:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   14b78:	2394      	movs	r3, #148	; 0x94
   14b7a:	18fb      	adds	r3, r7, r3
   14b7c:	2203      	movs	r2, #3
   14b7e:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
   14b80:	2394      	movs	r3, #148	; 0x94
   14b82:	18fb      	adds	r3, r7, r3
   14b84:	2200      	movs	r2, #0
   14b86:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
   14b88:	2394      	movs	r3, #148	; 0x94
   14b8a:	18fb      	adds	r3, r7, r3
   14b8c:	2200      	movs	r2, #0
   14b8e:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
   14b90:	2394      	movs	r3, #148	; 0x94
   14b92:	18fb      	adds	r3, r7, r3
   14b94:	2201      	movs	r2, #1
   14b96:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
   14b98:	2394      	movs	r3, #148	; 0x94
   14b9a:	18fb      	adds	r3, r7, r3
   14b9c:	2200      	movs	r2, #0
   14b9e:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
   14ba0:	2394      	movs	r3, #148	; 0x94
   14ba2:	18fb      	adds	r3, r7, r3
   14ba4:	2200      	movs	r2, #0
   14ba6:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   14ba8:	2394      	movs	r3, #148	; 0x94
   14baa:	18fb      	adds	r3, r7, r3
   14bac:	0018      	movs	r0, r3
   14bae:	4b72      	ldr	r3, [pc, #456]	; (14d78 <system_clock_init+0x234>)
   14bb0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   14bb2:	2005      	movs	r0, #5
   14bb4:	4b71      	ldr	r3, [pc, #452]	; (14d7c <system_clock_init+0x238>)
   14bb6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   14bb8:	46c0      	nop			; (mov r8, r8)
   14bba:	2005      	movs	r0, #5
   14bbc:	4b70      	ldr	r3, [pc, #448]	; (14d80 <system_clock_init+0x23c>)
   14bbe:	4798      	blx	r3
   14bc0:	0003      	movs	r3, r0
   14bc2:	001a      	movs	r2, r3
   14bc4:	2301      	movs	r3, #1
   14bc6:	4053      	eors	r3, r2
   14bc8:	b2db      	uxtb	r3, r3
   14bca:	2b00      	cmp	r3, #0
   14bcc:	d1f5      	bne.n	14bba <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
   14bce:	4a66      	ldr	r2, [pc, #408]	; (14d68 <system_clock_init+0x224>)
   14bd0:	8a93      	ldrh	r3, [r2, #20]
   14bd2:	2180      	movs	r1, #128	; 0x80
   14bd4:	430b      	orrs	r3, r1
   14bd6:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
   14bd8:	2380      	movs	r3, #128	; 0x80
   14bda:	18fb      	adds	r3, r7, r3
   14bdc:	0018      	movs	r0, r3
   14bde:	4b69      	ldr	r3, [pc, #420]	; (14d84 <system_clock_init+0x240>)
   14be0:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   14be2:	2380      	movs	r3, #128	; 0x80
   14be4:	18fb      	adds	r3, r7, r3
   14be6:	2204      	movs	r2, #4
   14be8:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
   14bea:	2380      	movs	r3, #128	; 0x80
   14bec:	18fb      	adds	r3, r7, r3
   14bee:	2200      	movs	r2, #0
   14bf0:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   14bf2:	4b65      	ldr	r3, [pc, #404]	; (14d88 <system_clock_init+0x244>)
   14bf4:	681b      	ldr	r3, [r3, #0]
   14bf6:	0e9b      	lsrs	r3, r3, #26
   14bf8:	22a4      	movs	r2, #164	; 0xa4
   14bfa:	18ba      	adds	r2, r7, r2
   14bfc:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   14bfe:	23a4      	movs	r3, #164	; 0xa4
   14c00:	18fb      	adds	r3, r7, r3
   14c02:	681b      	ldr	r3, [r3, #0]
   14c04:	2b3f      	cmp	r3, #63	; 0x3f
   14c06:	d103      	bne.n	14c10 <system_clock_init+0xcc>
		coarse = 0x1f;
   14c08:	231f      	movs	r3, #31
   14c0a:	22a4      	movs	r2, #164	; 0xa4
   14c0c:	18ba      	adds	r2, r7, r2
   14c0e:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
   14c10:	23a4      	movs	r3, #164	; 0xa4
   14c12:	18fb      	adds	r3, r7, r3
   14c14:	681b      	ldr	r3, [r3, #0]
   14c16:	b2da      	uxtb	r2, r3
   14c18:	2380      	movs	r3, #128	; 0x80
   14c1a:	18fb      	adds	r3, r7, r3
   14c1c:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   14c1e:	2380      	movs	r3, #128	; 0x80
   14c20:	18fb      	adds	r3, r7, r3
   14c22:	2200      	movs	r2, #0
   14c24:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   14c26:	2380      	movs	r3, #128	; 0x80
   14c28:	18fb      	adds	r3, r7, r3
   14c2a:	2200      	movs	r2, #0
   14c2c:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   14c2e:	2380      	movs	r3, #128	; 0x80
   14c30:	18fb      	adds	r3, r7, r3
   14c32:	2200      	movs	r2, #0
   14c34:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   14c36:	2380      	movs	r3, #128	; 0x80
   14c38:	18fb      	adds	r3, r7, r3
   14c3a:	2200      	movs	r2, #0
   14c3c:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   14c3e:	2380      	movs	r3, #128	; 0x80
   14c40:	18fb      	adds	r3, r7, r3
   14c42:	4a52      	ldr	r2, [pc, #328]	; (14d8c <system_clock_init+0x248>)
   14c44:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   14c46:	2380      	movs	r3, #128	; 0x80
   14c48:	18fb      	adds	r3, r7, r3
   14c4a:	2207      	movs	r2, #7
   14c4c:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   14c4e:	2380      	movs	r3, #128	; 0x80
   14c50:	18fb      	adds	r3, r7, r3
   14c52:	223f      	movs	r2, #63	; 0x3f
   14c54:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   14c56:	2380      	movs	r3, #128	; 0x80
   14c58:	18fb      	adds	r3, r7, r3
   14c5a:	0018      	movs	r0, r3
   14c5c:	4b4c      	ldr	r3, [pc, #304]	; (14d90 <system_clock_init+0x24c>)
   14c5e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   14c60:	237c      	movs	r3, #124	; 0x7c
   14c62:	18fb      	adds	r3, r7, r3
   14c64:	0018      	movs	r0, r3
   14c66:	4b4b      	ldr	r3, [pc, #300]	; (14d94 <system_clock_init+0x250>)
   14c68:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   14c6a:	237c      	movs	r3, #124	; 0x7c
   14c6c:	18fb      	adds	r3, r7, r3
   14c6e:	2200      	movs	r2, #0
   14c70:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   14c72:	237c      	movs	r3, #124	; 0x7c
   14c74:	18fb      	adds	r3, r7, r3
   14c76:	2201      	movs	r2, #1
   14c78:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   14c7a:	237c      	movs	r3, #124	; 0x7c
   14c7c:	18fb      	adds	r3, r7, r3
   14c7e:	2200      	movs	r2, #0
   14c80:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   14c82:	237c      	movs	r3, #124	; 0x7c
   14c84:	18fb      	adds	r3, r7, r3
   14c86:	0018      	movs	r0, r3
   14c88:	4b43      	ldr	r3, [pc, #268]	; (14d98 <system_clock_init+0x254>)
   14c8a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   14c8c:	2006      	movs	r0, #6
   14c8e:	4b3b      	ldr	r3, [pc, #236]	; (14d7c <system_clock_init+0x238>)
   14c90:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   14c92:	4b42      	ldr	r3, [pc, #264]	; (14d9c <system_clock_init+0x258>)
   14c94:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   14c96:	2364      	movs	r3, #100	; 0x64
   14c98:	18fb      	adds	r3, r7, r3
   14c9a:	0018      	movs	r0, r3
   14c9c:	4b40      	ldr	r3, [pc, #256]	; (14da0 <system_clock_init+0x25c>)
   14c9e:	4798      	blx	r3
   14ca0:	2364      	movs	r3, #100	; 0x64
   14ca2:	18fb      	adds	r3, r7, r3
   14ca4:	2205      	movs	r2, #5
   14ca6:	701a      	strb	r2, [r3, #0]
   14ca8:	2364      	movs	r3, #100	; 0x64
   14caa:	18fb      	adds	r3, r7, r3
   14cac:	2201      	movs	r2, #1
   14cae:	605a      	str	r2, [r3, #4]
   14cb0:	2364      	movs	r3, #100	; 0x64
   14cb2:	18fb      	adds	r3, r7, r3
   14cb4:	2200      	movs	r2, #0
   14cb6:	721a      	strb	r2, [r3, #8]
   14cb8:	2364      	movs	r3, #100	; 0x64
   14cba:	18fb      	adds	r3, r7, r3
   14cbc:	2200      	movs	r2, #0
   14cbe:	725a      	strb	r2, [r3, #9]
   14cc0:	2364      	movs	r3, #100	; 0x64
   14cc2:	18fb      	adds	r3, r7, r3
   14cc4:	0019      	movs	r1, r3
   14cc6:	2001      	movs	r0, #1
   14cc8:	4b36      	ldr	r3, [pc, #216]	; (14da4 <system_clock_init+0x260>)
   14cca:	4798      	blx	r3
   14ccc:	2001      	movs	r0, #1
   14cce:	4b36      	ldr	r3, [pc, #216]	; (14da8 <system_clock_init+0x264>)
   14cd0:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
   14cd2:	230c      	movs	r3, #12
   14cd4:	18fb      	adds	r3, r7, r3
   14cd6:	0018      	movs	r0, r3
   14cd8:	4b34      	ldr	r3, [pc, #208]	; (14dac <system_clock_init+0x268>)
   14cda:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   14cdc:	230c      	movs	r3, #12
   14cde:	18fb      	adds	r3, r7, r3
   14ce0:	2201      	movs	r2, #1
   14ce2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   14ce4:	230c      	movs	r3, #12
   14ce6:	18fb      	adds	r3, r7, r3
   14ce8:	0019      	movs	r1, r3
   14cea:	2000      	movs	r0, #0
   14cec:	4b30      	ldr	r3, [pc, #192]	; (14db0 <system_clock_init+0x26c>)
   14cee:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   14cf0:	2000      	movs	r0, #0
   14cf2:	4b30      	ldr	r3, [pc, #192]	; (14db4 <system_clock_init+0x270>)
   14cf4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   14cf6:	2007      	movs	r0, #7
   14cf8:	4b20      	ldr	r3, [pc, #128]	; (14d7c <system_clock_init+0x238>)
   14cfa:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   14cfc:	46c0      	nop			; (mov r8, r8)
   14cfe:	2007      	movs	r0, #7
   14d00:	4b1f      	ldr	r3, [pc, #124]	; (14d80 <system_clock_init+0x23c>)
   14d02:	4798      	blx	r3
   14d04:	0003      	movs	r3, r0
   14d06:	001a      	movs	r2, r3
   14d08:	2301      	movs	r3, #1
   14d0a:	4053      	eors	r3, r2
   14d0c:	b2db      	uxtb	r3, r3
   14d0e:	2b00      	cmp	r3, #0
   14d10:	d1f5      	bne.n	14cfe <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   14d12:	2000      	movs	r0, #0
   14d14:	4b28      	ldr	r3, [pc, #160]	; (14db8 <system_clock_init+0x274>)
   14d16:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   14d18:	2100      	movs	r1, #0
   14d1a:	2000      	movs	r0, #0
   14d1c:	4b27      	ldr	r3, [pc, #156]	; (14dbc <system_clock_init+0x278>)
   14d1e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   14d20:	2100      	movs	r1, #0
   14d22:	2001      	movs	r0, #1
   14d24:	4b25      	ldr	r3, [pc, #148]	; (14dbc <system_clock_init+0x278>)
   14d26:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   14d28:	2100      	movs	r1, #0
   14d2a:	2002      	movs	r0, #2
   14d2c:	4b23      	ldr	r3, [pc, #140]	; (14dbc <system_clock_init+0x278>)
   14d2e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   14d30:	003b      	movs	r3, r7
   14d32:	0018      	movs	r0, r3
   14d34:	4b1a      	ldr	r3, [pc, #104]	; (14da0 <system_clock_init+0x25c>)
   14d36:	4798      	blx	r3
   14d38:	003b      	movs	r3, r7
   14d3a:	2207      	movs	r2, #7
   14d3c:	701a      	strb	r2, [r3, #0]
   14d3e:	003b      	movs	r3, r7
   14d40:	2201      	movs	r2, #1
   14d42:	605a      	str	r2, [r3, #4]
   14d44:	003b      	movs	r3, r7
   14d46:	2200      	movs	r2, #0
   14d48:	721a      	strb	r2, [r3, #8]
   14d4a:	003b      	movs	r3, r7
   14d4c:	2200      	movs	r2, #0
   14d4e:	725a      	strb	r2, [r3, #9]
   14d50:	003b      	movs	r3, r7
   14d52:	0019      	movs	r1, r3
   14d54:	2000      	movs	r0, #0
   14d56:	4b13      	ldr	r3, [pc, #76]	; (14da4 <system_clock_init+0x260>)
   14d58:	4798      	blx	r3
   14d5a:	2000      	movs	r0, #0
   14d5c:	4b12      	ldr	r3, [pc, #72]	; (14da8 <system_clock_init+0x264>)
   14d5e:	4798      	blx	r3
#endif
}
   14d60:	46c0      	nop			; (mov r8, r8)
   14d62:	46bd      	mov	sp, r7
   14d64:	b02a      	add	sp, #168	; 0xa8
   14d66:	bd80      	pop	{r7, pc}
   14d68:	40000800 	.word	0x40000800
   14d6c:	00014625 	.word	0x00014625
   14d70:	00014b0d 	.word	0x00014b0d
   14d74:	000144f1 	.word	0x000144f1
   14d78:	000147ed 	.word	0x000147ed
   14d7c:	000149dd 	.word	0x000149dd
   14d80:	00014a89 	.word	0x00014a89
   14d84:	0001455d 	.word	0x0001455d
   14d88:	00806024 	.word	0x00806024
   14d8c:	000005b9 	.word	0x000005b9
   14d90:	0001490d 	.word	0x0001490d
   14d94:	00014539 	.word	0x00014539
   14d98:	00014775 	.word	0x00014775
   14d9c:	00014e65 	.word	0x00014e65
   14da0:	000144a9 	.word	0x000144a9
   14da4:	00014e95 	.word	0x00014e95
   14da8:	00014fb9 	.word	0x00014fb9
   14dac:	000144d9 	.word	0x000144d9
   14db0:	000150ed 	.word	0x000150ed
   14db4:	00015131 	.word	0x00015131
   14db8:	000145b1 	.word	0x000145b1
   14dbc:	000145d1 	.word	0x000145d1

00014dc0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   14dc0:	b580      	push	{r7, lr}
   14dc2:	b082      	sub	sp, #8
   14dc4:	af00      	add	r7, sp, #0
   14dc6:	0002      	movs	r2, r0
   14dc8:	6039      	str	r1, [r7, #0]
   14dca:	1dfb      	adds	r3, r7, #7
   14dcc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   14dce:	1dfb      	adds	r3, r7, #7
   14dd0:	781b      	ldrb	r3, [r3, #0]
   14dd2:	2b01      	cmp	r3, #1
   14dd4:	d00a      	beq.n	14dec <system_apb_clock_set_mask+0x2c>
   14dd6:	2b02      	cmp	r3, #2
   14dd8:	d00f      	beq.n	14dfa <system_apb_clock_set_mask+0x3a>
   14dda:	2b00      	cmp	r3, #0
   14ddc:	d114      	bne.n	14e08 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   14dde:	4b0e      	ldr	r3, [pc, #56]	; (14e18 <system_apb_clock_set_mask+0x58>)
   14de0:	4a0d      	ldr	r2, [pc, #52]	; (14e18 <system_apb_clock_set_mask+0x58>)
   14de2:	6991      	ldr	r1, [r2, #24]
   14de4:	683a      	ldr	r2, [r7, #0]
   14de6:	430a      	orrs	r2, r1
   14de8:	619a      	str	r2, [r3, #24]
			break;
   14dea:	e00f      	b.n	14e0c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   14dec:	4b0a      	ldr	r3, [pc, #40]	; (14e18 <system_apb_clock_set_mask+0x58>)
   14dee:	4a0a      	ldr	r2, [pc, #40]	; (14e18 <system_apb_clock_set_mask+0x58>)
   14df0:	69d1      	ldr	r1, [r2, #28]
   14df2:	683a      	ldr	r2, [r7, #0]
   14df4:	430a      	orrs	r2, r1
   14df6:	61da      	str	r2, [r3, #28]
			break;
   14df8:	e008      	b.n	14e0c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   14dfa:	4b07      	ldr	r3, [pc, #28]	; (14e18 <system_apb_clock_set_mask+0x58>)
   14dfc:	4a06      	ldr	r2, [pc, #24]	; (14e18 <system_apb_clock_set_mask+0x58>)
   14dfe:	6a11      	ldr	r1, [r2, #32]
   14e00:	683a      	ldr	r2, [r7, #0]
   14e02:	430a      	orrs	r2, r1
   14e04:	621a      	str	r2, [r3, #32]
			break;
   14e06:	e001      	b.n	14e0c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   14e08:	2317      	movs	r3, #23
   14e0a:	e000      	b.n	14e0e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   14e0c:	2300      	movs	r3, #0
}
   14e0e:	0018      	movs	r0, r3
   14e10:	46bd      	mov	sp, r7
   14e12:	b002      	add	sp, #8
   14e14:	bd80      	pop	{r7, pc}
   14e16:	46c0      	nop			; (mov r8, r8)
   14e18:	40000400 	.word	0x40000400

00014e1c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
   14e1c:	b580      	push	{r7, lr}
   14e1e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   14e20:	4b02      	ldr	r3, [pc, #8]	; (14e2c <system_interrupt_enter_critical_section+0x10>)
   14e22:	4798      	blx	r3
}
   14e24:	46c0      	nop			; (mov r8, r8)
   14e26:	46bd      	mov	sp, r7
   14e28:	bd80      	pop	{r7, pc}
   14e2a:	46c0      	nop			; (mov r8, r8)
   14e2c:	00010b71 	.word	0x00010b71

00014e30 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
   14e30:	b580      	push	{r7, lr}
   14e32:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   14e34:	4b02      	ldr	r3, [pc, #8]	; (14e40 <system_interrupt_leave_critical_section+0x10>)
   14e36:	4798      	blx	r3
}
   14e38:	46c0      	nop			; (mov r8, r8)
   14e3a:	46bd      	mov	sp, r7
   14e3c:	bd80      	pop	{r7, pc}
   14e3e:	46c0      	nop			; (mov r8, r8)
   14e40:	00010bc5 	.word	0x00010bc5

00014e44 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   14e44:	b580      	push	{r7, lr}
   14e46:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   14e48:	4b05      	ldr	r3, [pc, #20]	; (14e60 <system_gclk_is_syncing+0x1c>)
   14e4a:	785b      	ldrb	r3, [r3, #1]
   14e4c:	b2db      	uxtb	r3, r3
   14e4e:	b25b      	sxtb	r3, r3
   14e50:	2b00      	cmp	r3, #0
   14e52:	da01      	bge.n	14e58 <system_gclk_is_syncing+0x14>
		return true;
   14e54:	2301      	movs	r3, #1
   14e56:	e000      	b.n	14e5a <system_gclk_is_syncing+0x16>
	}

	return false;
   14e58:	2300      	movs	r3, #0
}
   14e5a:	0018      	movs	r0, r3
   14e5c:	46bd      	mov	sp, r7
   14e5e:	bd80      	pop	{r7, pc}
   14e60:	40000c00 	.word	0x40000c00

00014e64 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   14e64:	b580      	push	{r7, lr}
   14e66:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   14e68:	2108      	movs	r1, #8
   14e6a:	2000      	movs	r0, #0
   14e6c:	4b07      	ldr	r3, [pc, #28]	; (14e8c <system_gclk_init+0x28>)
   14e6e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   14e70:	4b07      	ldr	r3, [pc, #28]	; (14e90 <system_gclk_init+0x2c>)
   14e72:	2201      	movs	r2, #1
   14e74:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   14e76:	46c0      	nop			; (mov r8, r8)
   14e78:	4b05      	ldr	r3, [pc, #20]	; (14e90 <system_gclk_init+0x2c>)
   14e7a:	781b      	ldrb	r3, [r3, #0]
   14e7c:	b2db      	uxtb	r3, r3
   14e7e:	001a      	movs	r2, r3
   14e80:	2301      	movs	r3, #1
   14e82:	4013      	ands	r3, r2
   14e84:	d1f8      	bne.n	14e78 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   14e86:	46c0      	nop			; (mov r8, r8)
   14e88:	46bd      	mov	sp, r7
   14e8a:	bd80      	pop	{r7, pc}
   14e8c:	00014dc1 	.word	0x00014dc1
   14e90:	40000c00 	.word	0x40000c00

00014e94 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   14e94:	b580      	push	{r7, lr}
   14e96:	b086      	sub	sp, #24
   14e98:	af00      	add	r7, sp, #0
   14e9a:	0002      	movs	r2, r0
   14e9c:	6039      	str	r1, [r7, #0]
   14e9e:	1dfb      	adds	r3, r7, #7
   14ea0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   14ea2:	1dfb      	adds	r3, r7, #7
   14ea4:	781b      	ldrb	r3, [r3, #0]
   14ea6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   14ea8:	1dfb      	adds	r3, r7, #7
   14eaa:	781b      	ldrb	r3, [r3, #0]
   14eac:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   14eae:	683b      	ldr	r3, [r7, #0]
   14eb0:	781b      	ldrb	r3, [r3, #0]
   14eb2:	021b      	lsls	r3, r3, #8
   14eb4:	001a      	movs	r2, r3
   14eb6:	697b      	ldr	r3, [r7, #20]
   14eb8:	4313      	orrs	r3, r2
   14eba:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   14ebc:	683b      	ldr	r3, [r7, #0]
   14ebe:	785b      	ldrb	r3, [r3, #1]
   14ec0:	2b00      	cmp	r3, #0
   14ec2:	d004      	beq.n	14ece <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   14ec4:	697b      	ldr	r3, [r7, #20]
   14ec6:	2280      	movs	r2, #128	; 0x80
   14ec8:	02d2      	lsls	r2, r2, #11
   14eca:	4313      	orrs	r3, r2
   14ecc:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   14ece:	683b      	ldr	r3, [r7, #0]
   14ed0:	7a5b      	ldrb	r3, [r3, #9]
   14ed2:	2b00      	cmp	r3, #0
   14ed4:	d004      	beq.n	14ee0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   14ed6:	697b      	ldr	r3, [r7, #20]
   14ed8:	2280      	movs	r2, #128	; 0x80
   14eda:	0312      	lsls	r2, r2, #12
   14edc:	4313      	orrs	r3, r2
   14ede:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   14ee0:	683b      	ldr	r3, [r7, #0]
   14ee2:	685b      	ldr	r3, [r3, #4]
   14ee4:	2b01      	cmp	r3, #1
   14ee6:	d92c      	bls.n	14f42 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   14ee8:	683b      	ldr	r3, [r7, #0]
   14eea:	685a      	ldr	r2, [r3, #4]
   14eec:	683b      	ldr	r3, [r7, #0]
   14eee:	685b      	ldr	r3, [r3, #4]
   14ef0:	3b01      	subs	r3, #1
   14ef2:	4013      	ands	r3, r2
   14ef4:	d11a      	bne.n	14f2c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   14ef6:	2300      	movs	r3, #0
   14ef8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   14efa:	2302      	movs	r3, #2
   14efc:	60bb      	str	r3, [r7, #8]
   14efe:	e005      	b.n	14f0c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   14f00:	68fb      	ldr	r3, [r7, #12]
   14f02:	3301      	adds	r3, #1
   14f04:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
   14f06:	68bb      	ldr	r3, [r7, #8]
   14f08:	005b      	lsls	r3, r3, #1
   14f0a:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   14f0c:	683b      	ldr	r3, [r7, #0]
   14f0e:	685a      	ldr	r2, [r3, #4]
   14f10:	68bb      	ldr	r3, [r7, #8]
   14f12:	429a      	cmp	r2, r3
   14f14:	d8f4      	bhi.n	14f00 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   14f16:	68fb      	ldr	r3, [r7, #12]
   14f18:	021b      	lsls	r3, r3, #8
   14f1a:	693a      	ldr	r2, [r7, #16]
   14f1c:	4313      	orrs	r3, r2
   14f1e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   14f20:	697b      	ldr	r3, [r7, #20]
   14f22:	2280      	movs	r2, #128	; 0x80
   14f24:	0352      	lsls	r2, r2, #13
   14f26:	4313      	orrs	r3, r2
   14f28:	617b      	str	r3, [r7, #20]
   14f2a:	e00a      	b.n	14f42 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   14f2c:	683b      	ldr	r3, [r7, #0]
   14f2e:	685b      	ldr	r3, [r3, #4]
   14f30:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
   14f32:	693a      	ldr	r2, [r7, #16]
   14f34:	4313      	orrs	r3, r2
   14f36:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   14f38:	697b      	ldr	r3, [r7, #20]
   14f3a:	2280      	movs	r2, #128	; 0x80
   14f3c:	0292      	lsls	r2, r2, #10
   14f3e:	4313      	orrs	r3, r2
   14f40:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   14f42:	683b      	ldr	r3, [r7, #0]
   14f44:	7a1b      	ldrb	r3, [r3, #8]
   14f46:	2b00      	cmp	r3, #0
   14f48:	d004      	beq.n	14f54 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   14f4a:	697b      	ldr	r3, [r7, #20]
   14f4c:	2280      	movs	r2, #128	; 0x80
   14f4e:	0392      	lsls	r2, r2, #14
   14f50:	4313      	orrs	r3, r2
   14f52:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   14f54:	46c0      	nop			; (mov r8, r8)
   14f56:	4b13      	ldr	r3, [pc, #76]	; (14fa4 <system_gclk_gen_set_config+0x110>)
   14f58:	4798      	blx	r3
   14f5a:	1e03      	subs	r3, r0, #0
   14f5c:	d1fb      	bne.n	14f56 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   14f5e:	4b12      	ldr	r3, [pc, #72]	; (14fa8 <system_gclk_gen_set_config+0x114>)
   14f60:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   14f62:	4a12      	ldr	r2, [pc, #72]	; (14fac <system_gclk_gen_set_config+0x118>)
   14f64:	1dfb      	adds	r3, r7, #7
   14f66:	781b      	ldrb	r3, [r3, #0]
   14f68:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   14f6a:	46c0      	nop			; (mov r8, r8)
   14f6c:	4b0d      	ldr	r3, [pc, #52]	; (14fa4 <system_gclk_gen_set_config+0x110>)
   14f6e:	4798      	blx	r3
   14f70:	1e03      	subs	r3, r0, #0
   14f72:	d1fb      	bne.n	14f6c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   14f74:	4b0e      	ldr	r3, [pc, #56]	; (14fb0 <system_gclk_gen_set_config+0x11c>)
   14f76:	693a      	ldr	r2, [r7, #16]
   14f78:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   14f7a:	46c0      	nop			; (mov r8, r8)
   14f7c:	4b09      	ldr	r3, [pc, #36]	; (14fa4 <system_gclk_gen_set_config+0x110>)
   14f7e:	4798      	blx	r3
   14f80:	1e03      	subs	r3, r0, #0
   14f82:	d1fb      	bne.n	14f7c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   14f84:	4b0a      	ldr	r3, [pc, #40]	; (14fb0 <system_gclk_gen_set_config+0x11c>)
   14f86:	4a0a      	ldr	r2, [pc, #40]	; (14fb0 <system_gclk_gen_set_config+0x11c>)
   14f88:	6851      	ldr	r1, [r2, #4]
   14f8a:	2280      	movs	r2, #128	; 0x80
   14f8c:	0252      	lsls	r2, r2, #9
   14f8e:	4011      	ands	r1, r2
   14f90:	697a      	ldr	r2, [r7, #20]
   14f92:	430a      	orrs	r2, r1
   14f94:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   14f96:	4b07      	ldr	r3, [pc, #28]	; (14fb4 <system_gclk_gen_set_config+0x120>)
   14f98:	4798      	blx	r3
}
   14f9a:	46c0      	nop			; (mov r8, r8)
   14f9c:	46bd      	mov	sp, r7
   14f9e:	b006      	add	sp, #24
   14fa0:	bd80      	pop	{r7, pc}
   14fa2:	46c0      	nop			; (mov r8, r8)
   14fa4:	00014e45 	.word	0x00014e45
   14fa8:	00014e1d 	.word	0x00014e1d
   14fac:	40000c08 	.word	0x40000c08
   14fb0:	40000c00 	.word	0x40000c00
   14fb4:	00014e31 	.word	0x00014e31

00014fb8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   14fb8:	b580      	push	{r7, lr}
   14fba:	b082      	sub	sp, #8
   14fbc:	af00      	add	r7, sp, #0
   14fbe:	0002      	movs	r2, r0
   14fc0:	1dfb      	adds	r3, r7, #7
   14fc2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   14fc4:	46c0      	nop			; (mov r8, r8)
   14fc6:	4b0e      	ldr	r3, [pc, #56]	; (15000 <system_gclk_gen_enable+0x48>)
   14fc8:	4798      	blx	r3
   14fca:	1e03      	subs	r3, r0, #0
   14fcc:	d1fb      	bne.n	14fc6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   14fce:	4b0d      	ldr	r3, [pc, #52]	; (15004 <system_gclk_gen_enable+0x4c>)
   14fd0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   14fd2:	4a0d      	ldr	r2, [pc, #52]	; (15008 <system_gclk_gen_enable+0x50>)
   14fd4:	1dfb      	adds	r3, r7, #7
   14fd6:	781b      	ldrb	r3, [r3, #0]
   14fd8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   14fda:	46c0      	nop			; (mov r8, r8)
   14fdc:	4b08      	ldr	r3, [pc, #32]	; (15000 <system_gclk_gen_enable+0x48>)
   14fde:	4798      	blx	r3
   14fe0:	1e03      	subs	r3, r0, #0
   14fe2:	d1fb      	bne.n	14fdc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   14fe4:	4b09      	ldr	r3, [pc, #36]	; (1500c <system_gclk_gen_enable+0x54>)
   14fe6:	4a09      	ldr	r2, [pc, #36]	; (1500c <system_gclk_gen_enable+0x54>)
   14fe8:	6852      	ldr	r2, [r2, #4]
   14fea:	2180      	movs	r1, #128	; 0x80
   14fec:	0249      	lsls	r1, r1, #9
   14fee:	430a      	orrs	r2, r1
   14ff0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   14ff2:	4b07      	ldr	r3, [pc, #28]	; (15010 <system_gclk_gen_enable+0x58>)
   14ff4:	4798      	blx	r3
}
   14ff6:	46c0      	nop			; (mov r8, r8)
   14ff8:	46bd      	mov	sp, r7
   14ffa:	b002      	add	sp, #8
   14ffc:	bd80      	pop	{r7, pc}
   14ffe:	46c0      	nop			; (mov r8, r8)
   15000:	00014e45 	.word	0x00014e45
   15004:	00014e1d 	.word	0x00014e1d
   15008:	40000c04 	.word	0x40000c04
   1500c:	40000c00 	.word	0x40000c00
   15010:	00014e31 	.word	0x00014e31

00015014 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   15014:	b580      	push	{r7, lr}
   15016:	b086      	sub	sp, #24
   15018:	af00      	add	r7, sp, #0
   1501a:	0002      	movs	r2, r0
   1501c:	1dfb      	adds	r3, r7, #7
   1501e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   15020:	46c0      	nop			; (mov r8, r8)
   15022:	4b2a      	ldr	r3, [pc, #168]	; (150cc <system_gclk_gen_get_hz+0xb8>)
   15024:	4798      	blx	r3
   15026:	1e03      	subs	r3, r0, #0
   15028:	d1fb      	bne.n	15022 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   1502a:	4b29      	ldr	r3, [pc, #164]	; (150d0 <system_gclk_gen_get_hz+0xbc>)
   1502c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1502e:	4a29      	ldr	r2, [pc, #164]	; (150d4 <system_gclk_gen_get_hz+0xc0>)
   15030:	1dfb      	adds	r3, r7, #7
   15032:	781b      	ldrb	r3, [r3, #0]
   15034:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   15036:	46c0      	nop			; (mov r8, r8)
   15038:	4b24      	ldr	r3, [pc, #144]	; (150cc <system_gclk_gen_get_hz+0xb8>)
   1503a:	4798      	blx	r3
   1503c:	1e03      	subs	r3, r0, #0
   1503e:	d1fb      	bne.n	15038 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   15040:	4b25      	ldr	r3, [pc, #148]	; (150d8 <system_gclk_gen_get_hz+0xc4>)
   15042:	685b      	ldr	r3, [r3, #4]
   15044:	04db      	lsls	r3, r3, #19
   15046:	0edb      	lsrs	r3, r3, #27
   15048:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
   1504a:	0018      	movs	r0, r3
   1504c:	4b23      	ldr	r3, [pc, #140]	; (150dc <system_gclk_gen_get_hz+0xc8>)
   1504e:	4798      	blx	r3
   15050:	0003      	movs	r3, r0
   15052:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   15054:	4a1f      	ldr	r2, [pc, #124]	; (150d4 <system_gclk_gen_get_hz+0xc0>)
   15056:	1dfb      	adds	r3, r7, #7
   15058:	781b      	ldrb	r3, [r3, #0]
   1505a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   1505c:	4b1e      	ldr	r3, [pc, #120]	; (150d8 <system_gclk_gen_get_hz+0xc4>)
   1505e:	685b      	ldr	r3, [r3, #4]
   15060:	02db      	lsls	r3, r3, #11
   15062:	0fdb      	lsrs	r3, r3, #31
   15064:	b2da      	uxtb	r2, r3
   15066:	2313      	movs	r3, #19
   15068:	18fb      	adds	r3, r7, r3
   1506a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1506c:	4a1c      	ldr	r2, [pc, #112]	; (150e0 <system_gclk_gen_get_hz+0xcc>)
   1506e:	1dfb      	adds	r3, r7, #7
   15070:	781b      	ldrb	r3, [r3, #0]
   15072:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   15074:	46c0      	nop			; (mov r8, r8)
   15076:	4b15      	ldr	r3, [pc, #84]	; (150cc <system_gclk_gen_get_hz+0xb8>)
   15078:	4798      	blx	r3
   1507a:	1e03      	subs	r3, r0, #0
   1507c:	d1fb      	bne.n	15076 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   1507e:	4b16      	ldr	r3, [pc, #88]	; (150d8 <system_gclk_gen_get_hz+0xc4>)
   15080:	689b      	ldr	r3, [r3, #8]
   15082:	021b      	lsls	r3, r3, #8
   15084:	0c1b      	lsrs	r3, r3, #16
   15086:	b29b      	uxth	r3, r3
   15088:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   1508a:	4b16      	ldr	r3, [pc, #88]	; (150e4 <system_gclk_gen_get_hz+0xd0>)
   1508c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   1508e:	2313      	movs	r3, #19
   15090:	18fb      	adds	r3, r7, r3
   15092:	781b      	ldrb	r3, [r3, #0]
   15094:	2b00      	cmp	r3, #0
   15096:	d109      	bne.n	150ac <system_gclk_gen_get_hz+0x98>
   15098:	68fb      	ldr	r3, [r7, #12]
   1509a:	2b01      	cmp	r3, #1
   1509c:	d906      	bls.n	150ac <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   1509e:	4b12      	ldr	r3, [pc, #72]	; (150e8 <system_gclk_gen_get_hz+0xd4>)
   150a0:	68f9      	ldr	r1, [r7, #12]
   150a2:	6978      	ldr	r0, [r7, #20]
   150a4:	4798      	blx	r3
   150a6:	0003      	movs	r3, r0
   150a8:	617b      	str	r3, [r7, #20]
   150aa:	e00a      	b.n	150c2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   150ac:	2313      	movs	r3, #19
   150ae:	18fb      	adds	r3, r7, r3
   150b0:	781b      	ldrb	r3, [r3, #0]
   150b2:	2b00      	cmp	r3, #0
   150b4:	d005      	beq.n	150c2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   150b6:	68fb      	ldr	r3, [r7, #12]
   150b8:	3301      	adds	r3, #1
   150ba:	697a      	ldr	r2, [r7, #20]
   150bc:	40da      	lsrs	r2, r3
   150be:	0013      	movs	r3, r2
   150c0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   150c2:	697b      	ldr	r3, [r7, #20]
}
   150c4:	0018      	movs	r0, r3
   150c6:	46bd      	mov	sp, r7
   150c8:	b006      	add	sp, #24
   150ca:	bd80      	pop	{r7, pc}
   150cc:	00014e45 	.word	0x00014e45
   150d0:	00014e1d 	.word	0x00014e1d
   150d4:	40000c04 	.word	0x40000c04
   150d8:	40000c00 	.word	0x40000c00
   150dc:	000146b9 	.word	0x000146b9
   150e0:	40000c08 	.word	0x40000c08
   150e4:	00014e31 	.word	0x00014e31
   150e8:	00016869 	.word	0x00016869

000150ec <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   150ec:	b580      	push	{r7, lr}
   150ee:	b084      	sub	sp, #16
   150f0:	af00      	add	r7, sp, #0
   150f2:	0002      	movs	r2, r0
   150f4:	6039      	str	r1, [r7, #0]
   150f6:	1dfb      	adds	r3, r7, #7
   150f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   150fa:	1dfb      	adds	r3, r7, #7
   150fc:	781b      	ldrb	r3, [r3, #0]
   150fe:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   15100:	683b      	ldr	r3, [r7, #0]
   15102:	781b      	ldrb	r3, [r3, #0]
   15104:	021b      	lsls	r3, r3, #8
   15106:	001a      	movs	r2, r3
   15108:	68fb      	ldr	r3, [r7, #12]
   1510a:	4313      	orrs	r3, r2
   1510c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   1510e:	1dfb      	adds	r3, r7, #7
   15110:	781b      	ldrb	r3, [r3, #0]
   15112:	0018      	movs	r0, r3
   15114:	4b04      	ldr	r3, [pc, #16]	; (15128 <system_gclk_chan_set_config+0x3c>)
   15116:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   15118:	4b04      	ldr	r3, [pc, #16]	; (1512c <system_gclk_chan_set_config+0x40>)
   1511a:	68fa      	ldr	r2, [r7, #12]
   1511c:	b292      	uxth	r2, r2
   1511e:	805a      	strh	r2, [r3, #2]
}
   15120:	46c0      	nop			; (mov r8, r8)
   15122:	46bd      	mov	sp, r7
   15124:	b004      	add	sp, #16
   15126:	bd80      	pop	{r7, pc}
   15128:	00015179 	.word	0x00015179
   1512c:	40000c00 	.word	0x40000c00

00015130 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   15130:	b580      	push	{r7, lr}
   15132:	b082      	sub	sp, #8
   15134:	af00      	add	r7, sp, #0
   15136:	0002      	movs	r2, r0
   15138:	1dfb      	adds	r3, r7, #7
   1513a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   1513c:	4b0a      	ldr	r3, [pc, #40]	; (15168 <system_gclk_chan_enable+0x38>)
   1513e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   15140:	4a0a      	ldr	r2, [pc, #40]	; (1516c <system_gclk_chan_enable+0x3c>)
   15142:	1dfb      	adds	r3, r7, #7
   15144:	781b      	ldrb	r3, [r3, #0]
   15146:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   15148:	4909      	ldr	r1, [pc, #36]	; (15170 <system_gclk_chan_enable+0x40>)
   1514a:	4b09      	ldr	r3, [pc, #36]	; (15170 <system_gclk_chan_enable+0x40>)
   1514c:	885b      	ldrh	r3, [r3, #2]
   1514e:	b29b      	uxth	r3, r3
   15150:	2280      	movs	r2, #128	; 0x80
   15152:	01d2      	lsls	r2, r2, #7
   15154:	4313      	orrs	r3, r2
   15156:	b29b      	uxth	r3, r3
   15158:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   1515a:	4b06      	ldr	r3, [pc, #24]	; (15174 <system_gclk_chan_enable+0x44>)
   1515c:	4798      	blx	r3
}
   1515e:	46c0      	nop			; (mov r8, r8)
   15160:	46bd      	mov	sp, r7
   15162:	b002      	add	sp, #8
   15164:	bd80      	pop	{r7, pc}
   15166:	46c0      	nop			; (mov r8, r8)
   15168:	00014e1d 	.word	0x00014e1d
   1516c:	40000c02 	.word	0x40000c02
   15170:	40000c00 	.word	0x40000c00
   15174:	00014e31 	.word	0x00014e31

00015178 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   15178:	b580      	push	{r7, lr}
   1517a:	b084      	sub	sp, #16
   1517c:	af00      	add	r7, sp, #0
   1517e:	0002      	movs	r2, r0
   15180:	1dfb      	adds	r3, r7, #7
   15182:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   15184:	4b1c      	ldr	r3, [pc, #112]	; (151f8 <system_gclk_chan_disable+0x80>)
   15186:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   15188:	4a1c      	ldr	r2, [pc, #112]	; (151fc <system_gclk_chan_disable+0x84>)
   1518a:	1dfb      	adds	r3, r7, #7
   1518c:	781b      	ldrb	r3, [r3, #0]
   1518e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   15190:	4b1b      	ldr	r3, [pc, #108]	; (15200 <system_gclk_chan_disable+0x88>)
   15192:	885b      	ldrh	r3, [r3, #2]
   15194:	051b      	lsls	r3, r3, #20
   15196:	0f1b      	lsrs	r3, r3, #28
   15198:	b2db      	uxtb	r3, r3
   1519a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   1519c:	4a18      	ldr	r2, [pc, #96]	; (15200 <system_gclk_chan_disable+0x88>)
   1519e:	8853      	ldrh	r3, [r2, #2]
   151a0:	4918      	ldr	r1, [pc, #96]	; (15204 <system_gclk_chan_disable+0x8c>)
   151a2:	400b      	ands	r3, r1
   151a4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   151a6:	4a16      	ldr	r2, [pc, #88]	; (15200 <system_gclk_chan_disable+0x88>)
   151a8:	4b15      	ldr	r3, [pc, #84]	; (15200 <system_gclk_chan_disable+0x88>)
   151aa:	885b      	ldrh	r3, [r3, #2]
   151ac:	b29b      	uxth	r3, r3
   151ae:	4916      	ldr	r1, [pc, #88]	; (15208 <system_gclk_chan_disable+0x90>)
   151b0:	400b      	ands	r3, r1
   151b2:	b29b      	uxth	r3, r3
   151b4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   151b6:	46c0      	nop			; (mov r8, r8)
   151b8:	4b11      	ldr	r3, [pc, #68]	; (15200 <system_gclk_chan_disable+0x88>)
   151ba:	885b      	ldrh	r3, [r3, #2]
   151bc:	b29b      	uxth	r3, r3
   151be:	001a      	movs	r2, r3
   151c0:	2380      	movs	r3, #128	; 0x80
   151c2:	01db      	lsls	r3, r3, #7
   151c4:	4013      	ands	r3, r2
   151c6:	d1f7      	bne.n	151b8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   151c8:	4a0d      	ldr	r2, [pc, #52]	; (15200 <system_gclk_chan_disable+0x88>)
   151ca:	68fb      	ldr	r3, [r7, #12]
   151cc:	b2db      	uxtb	r3, r3
   151ce:	1c19      	adds	r1, r3, #0
   151d0:	230f      	movs	r3, #15
   151d2:	400b      	ands	r3, r1
   151d4:	b2d9      	uxtb	r1, r3
   151d6:	8853      	ldrh	r3, [r2, #2]
   151d8:	1c08      	adds	r0, r1, #0
   151da:	210f      	movs	r1, #15
   151dc:	4001      	ands	r1, r0
   151de:	0208      	lsls	r0, r1, #8
   151e0:	4908      	ldr	r1, [pc, #32]	; (15204 <system_gclk_chan_disable+0x8c>)
   151e2:	400b      	ands	r3, r1
   151e4:	1c19      	adds	r1, r3, #0
   151e6:	1c03      	adds	r3, r0, #0
   151e8:	430b      	orrs	r3, r1
   151ea:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   151ec:	4b07      	ldr	r3, [pc, #28]	; (1520c <system_gclk_chan_disable+0x94>)
   151ee:	4798      	blx	r3
}
   151f0:	46c0      	nop			; (mov r8, r8)
   151f2:	46bd      	mov	sp, r7
   151f4:	b004      	add	sp, #16
   151f6:	bd80      	pop	{r7, pc}
   151f8:	00014e1d 	.word	0x00014e1d
   151fc:	40000c02 	.word	0x40000c02
   15200:	40000c00 	.word	0x40000c00
   15204:	fffff0ff 	.word	0xfffff0ff
   15208:	ffffbfff 	.word	0xffffbfff
   1520c:	00014e31 	.word	0x00014e31

00015210 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   15210:	b580      	push	{r7, lr}
   15212:	b084      	sub	sp, #16
   15214:	af00      	add	r7, sp, #0
   15216:	0002      	movs	r2, r0
   15218:	1dfb      	adds	r3, r7, #7
   1521a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   1521c:	4b0d      	ldr	r3, [pc, #52]	; (15254 <system_gclk_chan_get_hz+0x44>)
   1521e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   15220:	4a0d      	ldr	r2, [pc, #52]	; (15258 <system_gclk_chan_get_hz+0x48>)
   15222:	1dfb      	adds	r3, r7, #7
   15224:	781b      	ldrb	r3, [r3, #0]
   15226:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   15228:	4b0c      	ldr	r3, [pc, #48]	; (1525c <system_gclk_chan_get_hz+0x4c>)
   1522a:	885b      	ldrh	r3, [r3, #2]
   1522c:	051b      	lsls	r3, r3, #20
   1522e:	0f1b      	lsrs	r3, r3, #28
   15230:	b2da      	uxtb	r2, r3
   15232:	230f      	movs	r3, #15
   15234:	18fb      	adds	r3, r7, r3
   15236:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   15238:	4b09      	ldr	r3, [pc, #36]	; (15260 <system_gclk_chan_get_hz+0x50>)
   1523a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   1523c:	230f      	movs	r3, #15
   1523e:	18fb      	adds	r3, r7, r3
   15240:	781b      	ldrb	r3, [r3, #0]
   15242:	0018      	movs	r0, r3
   15244:	4b07      	ldr	r3, [pc, #28]	; (15264 <system_gclk_chan_get_hz+0x54>)
   15246:	4798      	blx	r3
   15248:	0003      	movs	r3, r0
}
   1524a:	0018      	movs	r0, r3
   1524c:	46bd      	mov	sp, r7
   1524e:	b004      	add	sp, #16
   15250:	bd80      	pop	{r7, pc}
   15252:	46c0      	nop			; (mov r8, r8)
   15254:	00014e1d 	.word	0x00014e1d
   15258:	40000c02 	.word	0x40000c02
   1525c:	40000c00 	.word	0x40000c00
   15260:	00014e31 	.word	0x00014e31
   15264:	00015015 	.word	0x00015015

00015268 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   15268:	b580      	push	{r7, lr}
   1526a:	b084      	sub	sp, #16
   1526c:	af00      	add	r7, sp, #0
   1526e:	0002      	movs	r2, r0
   15270:	1dfb      	adds	r3, r7, #7
   15272:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   15274:	230f      	movs	r3, #15
   15276:	18fb      	adds	r3, r7, r3
   15278:	1dfa      	adds	r2, r7, #7
   1527a:	7812      	ldrb	r2, [r2, #0]
   1527c:	09d2      	lsrs	r2, r2, #7
   1527e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15280:	230e      	movs	r3, #14
   15282:	18fb      	adds	r3, r7, r3
   15284:	1dfa      	adds	r2, r7, #7
   15286:	7812      	ldrb	r2, [r2, #0]
   15288:	0952      	lsrs	r2, r2, #5
   1528a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1528c:	4b0d      	ldr	r3, [pc, #52]	; (152c4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1528e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   15290:	230f      	movs	r3, #15
   15292:	18fb      	adds	r3, r7, r3
   15294:	781b      	ldrb	r3, [r3, #0]
   15296:	2b00      	cmp	r3, #0
   15298:	d10f      	bne.n	152ba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1529a:	230f      	movs	r3, #15
   1529c:	18fb      	adds	r3, r7, r3
   1529e:	781b      	ldrb	r3, [r3, #0]
   152a0:	009b      	lsls	r3, r3, #2
   152a2:	2210      	movs	r2, #16
   152a4:	4694      	mov	ip, r2
   152a6:	44bc      	add	ip, r7
   152a8:	4463      	add	r3, ip
   152aa:	3b08      	subs	r3, #8
   152ac:	681a      	ldr	r2, [r3, #0]
   152ae:	230e      	movs	r3, #14
   152b0:	18fb      	adds	r3, r7, r3
   152b2:	781b      	ldrb	r3, [r3, #0]
   152b4:	01db      	lsls	r3, r3, #7
   152b6:	18d3      	adds	r3, r2, r3
   152b8:	e000      	b.n	152bc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   152ba:	2300      	movs	r3, #0
	}
}
   152bc:	0018      	movs	r0, r3
   152be:	46bd      	mov	sp, r7
   152c0:	b004      	add	sp, #16
   152c2:	bd80      	pop	{r7, pc}
   152c4:	41004400 	.word	0x41004400

000152c8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   152c8:	b580      	push	{r7, lr}
   152ca:	b088      	sub	sp, #32
   152cc:	af00      	add	r7, sp, #0
   152ce:	60f8      	str	r0, [r7, #12]
   152d0:	60b9      	str	r1, [r7, #8]
   152d2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   152d4:	2300      	movs	r3, #0
   152d6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   152d8:	687b      	ldr	r3, [r7, #4]
   152da:	78db      	ldrb	r3, [r3, #3]
   152dc:	2201      	movs	r2, #1
   152de:	4053      	eors	r3, r2
   152e0:	b2db      	uxtb	r3, r3
   152e2:	2b00      	cmp	r3, #0
   152e4:	d035      	beq.n	15352 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   152e6:	687b      	ldr	r3, [r7, #4]
   152e8:	781b      	ldrb	r3, [r3, #0]
   152ea:	2b80      	cmp	r3, #128	; 0x80
   152ec:	d00b      	beq.n	15306 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   152ee:	69fb      	ldr	r3, [r7, #28]
   152f0:	2280      	movs	r2, #128	; 0x80
   152f2:	0252      	lsls	r2, r2, #9
   152f4:	4313      	orrs	r3, r2
   152f6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   152f8:	687b      	ldr	r3, [r7, #4]
   152fa:	781b      	ldrb	r3, [r3, #0]
   152fc:	061b      	lsls	r3, r3, #24
   152fe:	001a      	movs	r2, r3
   15300:	69fb      	ldr	r3, [r7, #28]
   15302:	4313      	orrs	r3, r2
   15304:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   15306:	687b      	ldr	r3, [r7, #4]
   15308:	785b      	ldrb	r3, [r3, #1]
   1530a:	2b00      	cmp	r3, #0
   1530c:	d003      	beq.n	15316 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   1530e:	687b      	ldr	r3, [r7, #4]
   15310:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   15312:	2b02      	cmp	r3, #2
   15314:	d110      	bne.n	15338 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   15316:	69fb      	ldr	r3, [r7, #28]
   15318:	2280      	movs	r2, #128	; 0x80
   1531a:	0292      	lsls	r2, r2, #10
   1531c:	4313      	orrs	r3, r2
   1531e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   15320:	687b      	ldr	r3, [r7, #4]
   15322:	789b      	ldrb	r3, [r3, #2]
   15324:	2b00      	cmp	r3, #0
   15326:	d004      	beq.n	15332 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   15328:	69fb      	ldr	r3, [r7, #28]
   1532a:	2280      	movs	r2, #128	; 0x80
   1532c:	02d2      	lsls	r2, r2, #11
   1532e:	4313      	orrs	r3, r2
   15330:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   15332:	68fb      	ldr	r3, [r7, #12]
   15334:	68ba      	ldr	r2, [r7, #8]
   15336:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   15338:	687b      	ldr	r3, [r7, #4]
   1533a:	785b      	ldrb	r3, [r3, #1]
   1533c:	2b01      	cmp	r3, #1
   1533e:	d003      	beq.n	15348 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   15340:	687b      	ldr	r3, [r7, #4]
   15342:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   15344:	2b02      	cmp	r3, #2
   15346:	d107      	bne.n	15358 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   15348:	69fb      	ldr	r3, [r7, #28]
   1534a:	4a22      	ldr	r2, [pc, #136]	; (153d4 <_system_pinmux_config+0x10c>)
   1534c:	4013      	ands	r3, r2
   1534e:	61fb      	str	r3, [r7, #28]
   15350:	e002      	b.n	15358 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   15352:	68fb      	ldr	r3, [r7, #12]
   15354:	68ba      	ldr	r2, [r7, #8]
   15356:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   15358:	68bb      	ldr	r3, [r7, #8]
   1535a:	041b      	lsls	r3, r3, #16
   1535c:	0c1b      	lsrs	r3, r3, #16
   1535e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   15360:	68bb      	ldr	r3, [r7, #8]
   15362:	0c1b      	lsrs	r3, r3, #16
   15364:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   15366:	69ba      	ldr	r2, [r7, #24]
   15368:	69fb      	ldr	r3, [r7, #28]
   1536a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   1536c:	22a0      	movs	r2, #160	; 0xa0
   1536e:	05d2      	lsls	r2, r2, #23
   15370:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   15372:	68fb      	ldr	r3, [r7, #12]
   15374:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   15376:	697a      	ldr	r2, [r7, #20]
   15378:	69fb      	ldr	r3, [r7, #28]
   1537a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1537c:	22d0      	movs	r2, #208	; 0xd0
   1537e:	0612      	lsls	r2, r2, #24
   15380:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   15382:	68fb      	ldr	r3, [r7, #12]
   15384:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   15386:	687b      	ldr	r3, [r7, #4]
   15388:	78db      	ldrb	r3, [r3, #3]
   1538a:	2201      	movs	r2, #1
   1538c:	4053      	eors	r3, r2
   1538e:	b2db      	uxtb	r3, r3
   15390:	2b00      	cmp	r3, #0
   15392:	d01a      	beq.n	153ca <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   15394:	69fa      	ldr	r2, [r7, #28]
   15396:	2380      	movs	r3, #128	; 0x80
   15398:	02db      	lsls	r3, r3, #11
   1539a:	4013      	ands	r3, r2
   1539c:	d00a      	beq.n	153b4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   1539e:	687b      	ldr	r3, [r7, #4]
   153a0:	789b      	ldrb	r3, [r3, #2]
   153a2:	2b01      	cmp	r3, #1
   153a4:	d103      	bne.n	153ae <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   153a6:	68fb      	ldr	r3, [r7, #12]
   153a8:	68ba      	ldr	r2, [r7, #8]
   153aa:	619a      	str	r2, [r3, #24]
   153ac:	e002      	b.n	153b4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   153ae:	68fb      	ldr	r3, [r7, #12]
   153b0:	68ba      	ldr	r2, [r7, #8]
   153b2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   153b4:	687b      	ldr	r3, [r7, #4]
   153b6:	785b      	ldrb	r3, [r3, #1]
   153b8:	2b01      	cmp	r3, #1
   153ba:	d003      	beq.n	153c4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   153bc:	687b      	ldr	r3, [r7, #4]
   153be:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   153c0:	2b02      	cmp	r3, #2
   153c2:	d102      	bne.n	153ca <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   153c4:	68fb      	ldr	r3, [r7, #12]
   153c6:	68ba      	ldr	r2, [r7, #8]
   153c8:	609a      	str	r2, [r3, #8]
		}
	}
}
   153ca:	46c0      	nop			; (mov r8, r8)
   153cc:	46bd      	mov	sp, r7
   153ce:	b008      	add	sp, #32
   153d0:	bd80      	pop	{r7, pc}
   153d2:	46c0      	nop			; (mov r8, r8)
   153d4:	fffbffff 	.word	0xfffbffff

000153d8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   153d8:	b580      	push	{r7, lr}
   153da:	b084      	sub	sp, #16
   153dc:	af00      	add	r7, sp, #0
   153de:	0002      	movs	r2, r0
   153e0:	6039      	str	r1, [r7, #0]
   153e2:	1dfb      	adds	r3, r7, #7
   153e4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   153e6:	1dfb      	adds	r3, r7, #7
   153e8:	781b      	ldrb	r3, [r3, #0]
   153ea:	0018      	movs	r0, r3
   153ec:	4b0a      	ldr	r3, [pc, #40]	; (15418 <system_pinmux_pin_set_config+0x40>)
   153ee:	4798      	blx	r3
   153f0:	0003      	movs	r3, r0
   153f2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   153f4:	1dfb      	adds	r3, r7, #7
   153f6:	781b      	ldrb	r3, [r3, #0]
   153f8:	221f      	movs	r2, #31
   153fa:	4013      	ands	r3, r2
   153fc:	2201      	movs	r2, #1
   153fe:	409a      	lsls	r2, r3
   15400:	0013      	movs	r3, r2
   15402:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   15404:	683a      	ldr	r2, [r7, #0]
   15406:	68b9      	ldr	r1, [r7, #8]
   15408:	68fb      	ldr	r3, [r7, #12]
   1540a:	0018      	movs	r0, r3
   1540c:	4b03      	ldr	r3, [pc, #12]	; (1541c <system_pinmux_pin_set_config+0x44>)
   1540e:	4798      	blx	r3
}
   15410:	46c0      	nop			; (mov r8, r8)
   15412:	46bd      	mov	sp, r7
   15414:	b004      	add	sp, #16
   15416:	bd80      	pop	{r7, pc}
   15418:	00015269 	.word	0x00015269
   1541c:	000152c9 	.word	0x000152c9

00015420 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   15420:	b580      	push	{r7, lr}
   15422:	af00      	add	r7, sp, #0
	return;
   15424:	46c0      	nop			; (mov r8, r8)
}
   15426:	46bd      	mov	sp, r7
   15428:	bd80      	pop	{r7, pc}
   1542a:	46c0      	nop			; (mov r8, r8)

0001542c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   1542c:	b580      	push	{r7, lr}
   1542e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   15430:	4b06      	ldr	r3, [pc, #24]	; (1544c <system_init+0x20>)
   15432:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   15434:	4b06      	ldr	r3, [pc, #24]	; (15450 <system_init+0x24>)
   15436:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   15438:	4b06      	ldr	r3, [pc, #24]	; (15454 <system_init+0x28>)
   1543a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   1543c:	4b06      	ldr	r3, [pc, #24]	; (15458 <system_init+0x2c>)
   1543e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   15440:	4b06      	ldr	r3, [pc, #24]	; (1545c <system_init+0x30>)
   15442:	4798      	blx	r3
}
   15444:	46c0      	nop			; (mov r8, r8)
   15446:	46bd      	mov	sp, r7
   15448:	bd80      	pop	{r7, pc}
   1544a:	46c0      	nop			; (mov r8, r8)
   1544c:	00014b45 	.word	0x00014b45
   15450:	00010d9d 	.word	0x00010d9d
   15454:	00015421 	.word	0x00015421
   15458:	0000df39 	.word	0x0000df39
   1545c:	00015421 	.word	0x00015421

00015460 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   15460:	b580      	push	{r7, lr}
   15462:	b086      	sub	sp, #24
   15464:	af00      	add	r7, sp, #0
   15466:	60f8      	str	r0, [r7, #12]
   15468:	60b9      	str	r1, [r7, #8]
   1546a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   1546c:	2300      	movs	r3, #0
   1546e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   15470:	68fb      	ldr	r3, [r7, #12]
   15472:	2b00      	cmp	r3, #0
   15474:	d012      	beq.n	1549c <_read+0x3c>
		return -1;
   15476:	2301      	movs	r3, #1
   15478:	425b      	negs	r3, r3
   1547a:	e013      	b.n	154a4 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   1547c:	4b0b      	ldr	r3, [pc, #44]	; (154ac <_read+0x4c>)
   1547e:	681a      	ldr	r2, [r3, #0]
   15480:	4b0b      	ldr	r3, [pc, #44]	; (154b0 <_read+0x50>)
   15482:	681b      	ldr	r3, [r3, #0]
   15484:	68b9      	ldr	r1, [r7, #8]
   15486:	0018      	movs	r0, r3
   15488:	4790      	blx	r2
		ptr++;
   1548a:	68bb      	ldr	r3, [r7, #8]
   1548c:	3301      	adds	r3, #1
   1548e:	60bb      	str	r3, [r7, #8]
		nChars++;
   15490:	697b      	ldr	r3, [r7, #20]
   15492:	3301      	adds	r3, #1
   15494:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   15496:	687b      	ldr	r3, [r7, #4]
   15498:	3b01      	subs	r3, #1
   1549a:	607b      	str	r3, [r7, #4]
   1549c:	687b      	ldr	r3, [r7, #4]
   1549e:	2b00      	cmp	r3, #0
   154a0:	dcec      	bgt.n	1547c <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   154a2:	697b      	ldr	r3, [r7, #20]
}
   154a4:	0018      	movs	r0, r3
   154a6:	46bd      	mov	sp, r7
   154a8:	b006      	add	sp, #24
   154aa:	bd80      	pop	{r7, pc}
   154ac:	200003d0 	.word	0x200003d0
   154b0:	200003d8 	.word	0x200003d8

000154b4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   154b4:	b580      	push	{r7, lr}
   154b6:	b086      	sub	sp, #24
   154b8:	af00      	add	r7, sp, #0
   154ba:	60f8      	str	r0, [r7, #12]
   154bc:	60b9      	str	r1, [r7, #8]
   154be:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   154c0:	2300      	movs	r3, #0
   154c2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   154c4:	68fb      	ldr	r3, [r7, #12]
   154c6:	2b01      	cmp	r3, #1
   154c8:	d01d      	beq.n	15506 <_write+0x52>
   154ca:	68fb      	ldr	r3, [r7, #12]
   154cc:	2b02      	cmp	r3, #2
   154ce:	d01a      	beq.n	15506 <_write+0x52>
   154d0:	68fb      	ldr	r3, [r7, #12]
   154d2:	2b03      	cmp	r3, #3
   154d4:	d017      	beq.n	15506 <_write+0x52>
		return -1;
   154d6:	2301      	movs	r3, #1
   154d8:	425b      	negs	r3, r3
   154da:	e018      	b.n	1550e <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   154dc:	4b0e      	ldr	r3, [pc, #56]	; (15518 <_write+0x64>)
   154de:	681a      	ldr	r2, [r3, #0]
   154e0:	4b0e      	ldr	r3, [pc, #56]	; (1551c <_write+0x68>)
   154e2:	6818      	ldr	r0, [r3, #0]
   154e4:	68bb      	ldr	r3, [r7, #8]
   154e6:	1c59      	adds	r1, r3, #1
   154e8:	60b9      	str	r1, [r7, #8]
   154ea:	781b      	ldrb	r3, [r3, #0]
   154ec:	0019      	movs	r1, r3
   154ee:	4790      	blx	r2
   154f0:	1e03      	subs	r3, r0, #0
   154f2:	da02      	bge.n	154fa <_write+0x46>
			return -1;
   154f4:	2301      	movs	r3, #1
   154f6:	425b      	negs	r3, r3
   154f8:	e009      	b.n	1550e <_write+0x5a>
		}
		++nChars;
   154fa:	697b      	ldr	r3, [r7, #20]
   154fc:	3301      	adds	r3, #1
   154fe:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   15500:	687b      	ldr	r3, [r7, #4]
   15502:	3b01      	subs	r3, #1
   15504:	607b      	str	r3, [r7, #4]
   15506:	687b      	ldr	r3, [r7, #4]
   15508:	2b00      	cmp	r3, #0
   1550a:	d1e7      	bne.n	154dc <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   1550c:	697b      	ldr	r3, [r7, #20]
}
   1550e:	0018      	movs	r0, r3
   15510:	46bd      	mov	sp, r7
   15512:	b006      	add	sp, #24
   15514:	bd80      	pop	{r7, pc}
   15516:	46c0      	nop			; (mov r8, r8)
   15518:	200003d4 	.word	0x200003d4
   1551c:	200003d8 	.word	0x200003d8

00015520 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   15520:	b580      	push	{r7, lr}
   15522:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   15524:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   15528:	4b02      	ldr	r3, [pc, #8]	; (15534 <NVIC_SystemReset+0x14>)
   1552a:	4a03      	ldr	r2, [pc, #12]	; (15538 <NVIC_SystemReset+0x18>)
   1552c:	60da      	str	r2, [r3, #12]
   1552e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   15532:	e7fe      	b.n	15532 <NVIC_SystemReset+0x12>
   15534:	e000ed00 	.word	0xe000ed00
   15538:	05fa0004 	.word	0x05fa0004

0001553c <crc32_calculate>:
 * \note To calculate the CRC of multiple blocks, use this function first, then
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
   1553c:	b580      	push	{r7, lr}
   1553e:	b084      	sub	sp, #16
   15540:	af00      	add	r7, sp, #0
   15542:	60f8      	str	r0, [r7, #12]
   15544:	60b9      	str	r1, [r7, #8]
   15546:	607a      	str	r2, [r7, #4]
	*crc = 0;
   15548:	687b      	ldr	r3, [r7, #4]
   1554a:	2200      	movs	r2, #0
   1554c:	601a      	str	r2, [r3, #0]

	return crc32_recalculate(data, length, crc);
   1554e:	687a      	ldr	r2, [r7, #4]
   15550:	68b9      	ldr	r1, [r7, #8]
   15552:	68fb      	ldr	r3, [r7, #12]
   15554:	0018      	movs	r0, r3
   15556:	4b03      	ldr	r3, [pc, #12]	; (15564 <crc32_calculate+0x28>)
   15558:	4798      	blx	r3
   1555a:	0003      	movs	r3, r0
}
   1555c:	0018      	movs	r0, r3
   1555e:	46bd      	mov	sp, r7
   15560:	b004      	add	sp, #16
   15562:	bd80      	pop	{r7, pc}
   15564:	0000dab5 	.word	0x0000dab5

00015568 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   15568:	b580      	push	{r7, lr}
   1556a:	b084      	sub	sp, #16
   1556c:	af00      	add	r7, sp, #0
   1556e:	0002      	movs	r2, r0
   15570:	1dfb      	adds	r3, r7, #7
   15572:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   15574:	230f      	movs	r3, #15
   15576:	18fb      	adds	r3, r7, r3
   15578:	1dfa      	adds	r2, r7, #7
   1557a:	7812      	ldrb	r2, [r2, #0]
   1557c:	09d2      	lsrs	r2, r2, #7
   1557e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15580:	230e      	movs	r3, #14
   15582:	18fb      	adds	r3, r7, r3
   15584:	1dfa      	adds	r2, r7, #7
   15586:	7812      	ldrb	r2, [r2, #0]
   15588:	0952      	lsrs	r2, r2, #5
   1558a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1558c:	4b0d      	ldr	r3, [pc, #52]	; (155c4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1558e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   15590:	230f      	movs	r3, #15
   15592:	18fb      	adds	r3, r7, r3
   15594:	781b      	ldrb	r3, [r3, #0]
   15596:	2b00      	cmp	r3, #0
   15598:	d10f      	bne.n	155ba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1559a:	230f      	movs	r3, #15
   1559c:	18fb      	adds	r3, r7, r3
   1559e:	781b      	ldrb	r3, [r3, #0]
   155a0:	009b      	lsls	r3, r3, #2
   155a2:	2210      	movs	r2, #16
   155a4:	4694      	mov	ip, r2
   155a6:	44bc      	add	ip, r7
   155a8:	4463      	add	r3, ip
   155aa:	3b08      	subs	r3, #8
   155ac:	681a      	ldr	r2, [r3, #0]
   155ae:	230e      	movs	r3, #14
   155b0:	18fb      	adds	r3, r7, r3
   155b2:	781b      	ldrb	r3, [r3, #0]
   155b4:	01db      	lsls	r3, r3, #7
   155b6:	18d3      	adds	r3, r2, r3
   155b8:	e000      	b.n	155bc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   155ba:	2300      	movs	r3, #0
	}
}
   155bc:	0018      	movs	r0, r3
   155be:	46bd      	mov	sp, r7
   155c0:	b004      	add	sp, #16
   155c2:	bd80      	pop	{r7, pc}
   155c4:	41004400 	.word	0x41004400

000155c8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   155c8:	b580      	push	{r7, lr}
   155ca:	b082      	sub	sp, #8
   155cc:	af00      	add	r7, sp, #0
   155ce:	0002      	movs	r2, r0
   155d0:	1dfb      	adds	r3, r7, #7
   155d2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   155d4:	1dfb      	adds	r3, r7, #7
   155d6:	781b      	ldrb	r3, [r3, #0]
   155d8:	0018      	movs	r0, r3
   155da:	4b03      	ldr	r3, [pc, #12]	; (155e8 <port_get_group_from_gpio_pin+0x20>)
   155dc:	4798      	blx	r3
   155de:	0003      	movs	r3, r0
}
   155e0:	0018      	movs	r0, r3
   155e2:	46bd      	mov	sp, r7
   155e4:	b002      	add	sp, #8
   155e6:	bd80      	pop	{r7, pc}
   155e8:	00015569 	.word	0x00015569

000155ec <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   155ec:	b580      	push	{r7, lr}
   155ee:	b082      	sub	sp, #8
   155f0:	af00      	add	r7, sp, #0
   155f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   155f4:	687b      	ldr	r3, [r7, #4]
   155f6:	2200      	movs	r2, #0
   155f8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   155fa:	687b      	ldr	r3, [r7, #4]
   155fc:	2201      	movs	r2, #1
   155fe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   15600:	687b      	ldr	r3, [r7, #4]
   15602:	2200      	movs	r2, #0
   15604:	709a      	strb	r2, [r3, #2]
}
   15606:	46c0      	nop			; (mov r8, r8)
   15608:	46bd      	mov	sp, r7
   1560a:	b002      	add	sp, #8
   1560c:	bd80      	pop	{r7, pc}
   1560e:	46c0      	nop			; (mov r8, r8)

00015610 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
   15610:	b580      	push	{r7, lr}
   15612:	b084      	sub	sp, #16
   15614:	af00      	add	r7, sp, #0
   15616:	0002      	movs	r2, r0
   15618:	1dfb      	adds	r3, r7, #7
   1561a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1561c:	1dfb      	adds	r3, r7, #7
   1561e:	781b      	ldrb	r3, [r3, #0]
   15620:	0018      	movs	r0, r3
   15622:	4b0b      	ldr	r3, [pc, #44]	; (15650 <port_pin_get_input_level+0x40>)
   15624:	4798      	blx	r3
   15626:	0003      	movs	r3, r0
   15628:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1562a:	1dfb      	adds	r3, r7, #7
   1562c:	781b      	ldrb	r3, [r3, #0]
   1562e:	221f      	movs	r2, #31
   15630:	4013      	ands	r3, r2
   15632:	2201      	movs	r2, #1
   15634:	409a      	lsls	r2, r3
   15636:	0013      	movs	r3, r2
   15638:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
   1563a:	68fb      	ldr	r3, [r7, #12]
   1563c:	6a1b      	ldr	r3, [r3, #32]
   1563e:	68ba      	ldr	r2, [r7, #8]
   15640:	4013      	ands	r3, r2
   15642:	1e5a      	subs	r2, r3, #1
   15644:	4193      	sbcs	r3, r2
   15646:	b2db      	uxtb	r3, r3
}
   15648:	0018      	movs	r0, r3
   1564a:	46bd      	mov	sp, r7
   1564c:	b004      	add	sp, #16
   1564e:	bd80      	pop	{r7, pc}
   15650:	000155c9 	.word	0x000155c9

00015654 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   15654:	b580      	push	{r7, lr}
   15656:	b084      	sub	sp, #16
   15658:	af00      	add	r7, sp, #0
   1565a:	0002      	movs	r2, r0
   1565c:	1dfb      	adds	r3, r7, #7
   1565e:	701a      	strb	r2, [r3, #0]
   15660:	1dbb      	adds	r3, r7, #6
   15662:	1c0a      	adds	r2, r1, #0
   15664:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   15666:	1dfb      	adds	r3, r7, #7
   15668:	781b      	ldrb	r3, [r3, #0]
   1566a:	0018      	movs	r0, r3
   1566c:	4b0d      	ldr	r3, [pc, #52]	; (156a4 <port_pin_set_output_level+0x50>)
   1566e:	4798      	blx	r3
   15670:	0003      	movs	r3, r0
   15672:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15674:	1dfb      	adds	r3, r7, #7
   15676:	781b      	ldrb	r3, [r3, #0]
   15678:	221f      	movs	r2, #31
   1567a:	4013      	ands	r3, r2
   1567c:	2201      	movs	r2, #1
   1567e:	409a      	lsls	r2, r3
   15680:	0013      	movs	r3, r2
   15682:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   15684:	1dbb      	adds	r3, r7, #6
   15686:	781b      	ldrb	r3, [r3, #0]
   15688:	2b00      	cmp	r3, #0
   1568a:	d003      	beq.n	15694 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1568c:	68fb      	ldr	r3, [r7, #12]
   1568e:	68ba      	ldr	r2, [r7, #8]
   15690:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   15692:	e002      	b.n	1569a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
   15694:	68fb      	ldr	r3, [r7, #12]
   15696:	68ba      	ldr	r2, [r7, #8]
   15698:	615a      	str	r2, [r3, #20]
	}
}
   1569a:	46c0      	nop			; (mov r8, r8)
   1569c:	46bd      	mov	sp, r7
   1569e:	b004      	add	sp, #16
   156a0:	bd80      	pop	{r7, pc}
   156a2:	46c0      	nop			; (mov r8, r8)
   156a4:	000155c9 	.word	0x000155c9

000156a8 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   156a8:	b580      	push	{r7, lr}
   156aa:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   156ac:	4b02      	ldr	r3, [pc, #8]	; (156b8 <system_reset+0x10>)
   156ae:	4798      	blx	r3
}
   156b0:	46c0      	nop			; (mov r8, r8)
   156b2:	46bd      	mov	sp, r7
   156b4:	bd80      	pop	{r7, pc}
   156b6:	46c0      	nop			; (mov r8, r8)
   156b8:	00015521 	.word	0x00015521

000156bc <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   156bc:	b580      	push	{r7, lr}
   156be:	b082      	sub	sp, #8
   156c0:	af00      	add	r7, sp, #0
   156c2:	0002      	movs	r2, r0
   156c4:	1dfb      	adds	r3, r7, #7
   156c6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   156c8:	4b06      	ldr	r3, [pc, #24]	; (156e4 <system_interrupt_enable+0x28>)
   156ca:	1dfa      	adds	r2, r7, #7
   156cc:	7812      	ldrb	r2, [r2, #0]
   156ce:	0011      	movs	r1, r2
   156d0:	221f      	movs	r2, #31
   156d2:	400a      	ands	r2, r1
   156d4:	2101      	movs	r1, #1
   156d6:	4091      	lsls	r1, r2
   156d8:	000a      	movs	r2, r1
   156da:	601a      	str	r2, [r3, #0]
}
   156dc:	46c0      	nop			; (mov r8, r8)
   156de:	46bd      	mov	sp, r7
   156e0:	b002      	add	sp, #8
   156e2:	bd80      	pop	{r7, pc}
   156e4:	e000e100 	.word	0xe000e100

000156e8 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   156e8:	b580      	push	{r7, lr}
   156ea:	b084      	sub	sp, #16
   156ec:	af00      	add	r7, sp, #0
   156ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   156f0:	687b      	ldr	r3, [r7, #4]
   156f2:	681b      	ldr	r3, [r3, #0]
   156f4:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   156f6:	68fb      	ldr	r3, [r7, #12]
   156f8:	69db      	ldr	r3, [r3, #28]
   156fa:	1e5a      	subs	r2, r3, #1
   156fc:	4193      	sbcs	r3, r2
   156fe:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   15700:	0018      	movs	r0, r3
   15702:	46bd      	mov	sp, r7
   15704:	b004      	add	sp, #16
   15706:	bd80      	pop	{r7, pc}

00015708 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   15708:	b580      	push	{r7, lr}
   1570a:	b082      	sub	sp, #8
   1570c:	af00      	add	r7, sp, #0
   1570e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   15710:	687b      	ldr	r3, [r7, #4]
   15712:	2201      	movs	r2, #1
   15714:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   15716:	687b      	ldr	r3, [r7, #4]
   15718:	2200      	movs	r2, #0
   1571a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1571c:	687b      	ldr	r3, [r7, #4]
   1571e:	2200      	movs	r2, #0
   15720:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   15722:	687b      	ldr	r3, [r7, #4]
   15724:	22c0      	movs	r2, #192	; 0xc0
   15726:	0392      	lsls	r2, r2, #14
   15728:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1572a:	687b      	ldr	r3, [r7, #4]
   1572c:	2200      	movs	r2, #0
   1572e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   15730:	687b      	ldr	r3, [r7, #4]
   15732:	2200      	movs	r2, #0
   15734:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   15736:	687b      	ldr	r3, [r7, #4]
   15738:	2201      	movs	r2, #1
   1573a:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1573c:	687b      	ldr	r3, [r7, #4]
   1573e:	2201      	movs	r2, #1
   15740:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   15742:	687b      	ldr	r3, [r7, #4]
   15744:	2200      	movs	r2, #0
   15746:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   15748:	687b      	ldr	r3, [r7, #4]
   1574a:	2224      	movs	r2, #36	; 0x24
   1574c:	2100      	movs	r1, #0
   1574e:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   15750:	687b      	ldr	r3, [r7, #4]
   15752:	3318      	adds	r3, #24
   15754:	220c      	movs	r2, #12
   15756:	2100      	movs	r1, #0
   15758:	0018      	movs	r0, r3
   1575a:	4b0a      	ldr	r3, [pc, #40]	; (15784 <spi_get_config_defaults+0x7c>)
   1575c:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1575e:	687b      	ldr	r3, [r7, #4]
   15760:	4a09      	ldr	r2, [pc, #36]	; (15788 <spi_get_config_defaults+0x80>)
   15762:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   15764:	687b      	ldr	r3, [r7, #4]
   15766:	2200      	movs	r2, #0
   15768:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1576a:	687b      	ldr	r3, [r7, #4]
   1576c:	2200      	movs	r2, #0
   1576e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   15770:	687b      	ldr	r3, [r7, #4]
   15772:	2200      	movs	r2, #0
   15774:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   15776:	687b      	ldr	r3, [r7, #4]
   15778:	2200      	movs	r2, #0
   1577a:	635a      	str	r2, [r3, #52]	; 0x34

};
   1577c:	46c0      	nop			; (mov r8, r8)
   1577e:	46bd      	mov	sp, r7
   15780:	b002      	add	sp, #8
   15782:	bd80      	pop	{r7, pc}
   15784:	00016c69 	.word	0x00016c69
   15788:	000186a0 	.word	0x000186a0

0001578c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1578c:	b580      	push	{r7, lr}
   1578e:	b084      	sub	sp, #16
   15790:	af00      	add	r7, sp, #0
   15792:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   15794:	687b      	ldr	r3, [r7, #4]
   15796:	681b      	ldr	r3, [r3, #0]
   15798:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1579a:	687b      	ldr	r3, [r7, #4]
   1579c:	681b      	ldr	r3, [r3, #0]
   1579e:	0018      	movs	r0, r3
   157a0:	4b0b      	ldr	r3, [pc, #44]	; (157d0 <spi_enable+0x44>)
   157a2:	4798      	blx	r3
   157a4:	0003      	movs	r3, r0
   157a6:	0018      	movs	r0, r3
   157a8:	4b0a      	ldr	r3, [pc, #40]	; (157d4 <spi_enable+0x48>)
   157aa:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   157ac:	46c0      	nop			; (mov r8, r8)
   157ae:	687b      	ldr	r3, [r7, #4]
   157b0:	0018      	movs	r0, r3
   157b2:	4b09      	ldr	r3, [pc, #36]	; (157d8 <spi_enable+0x4c>)
   157b4:	4798      	blx	r3
   157b6:	1e03      	subs	r3, r0, #0
   157b8:	d1f9      	bne.n	157ae <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   157ba:	68fb      	ldr	r3, [r7, #12]
   157bc:	681b      	ldr	r3, [r3, #0]
   157be:	2202      	movs	r2, #2
   157c0:	431a      	orrs	r2, r3
   157c2:	68fb      	ldr	r3, [r7, #12]
   157c4:	601a      	str	r2, [r3, #0]
}
   157c6:	46c0      	nop			; (mov r8, r8)
   157c8:	46bd      	mov	sp, r7
   157ca:	b004      	add	sp, #16
   157cc:	bd80      	pop	{r7, pc}
   157ce:	46c0      	nop			; (mov r8, r8)
   157d0:	00012789 	.word	0x00012789
   157d4:	000156bd 	.word	0x000156bd
   157d8:	000156e9 	.word	0x000156e9

000157dc <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
   157dc:	b580      	push	{r7, lr}
   157de:	b086      	sub	sp, #24
   157e0:	af00      	add	r7, sp, #0
   157e2:	60f8      	str	r0, [r7, #12]
   157e4:	60b9      	str	r1, [r7, #8]
   157e6:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
   157e8:	687b      	ldr	r3, [r7, #4]
   157ea:	781a      	ldrb	r2, [r3, #0]
   157ec:	68fb      	ldr	r3, [r7, #12]
   157ee:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
   157f0:	687b      	ldr	r3, [r7, #4]
   157f2:	785a      	ldrb	r2, [r3, #1]
   157f4:	68fb      	ldr	r3, [r7, #12]
   157f6:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
   157f8:	68fb      	ldr	r3, [r7, #12]
   157fa:	68ba      	ldr	r2, [r7, #8]
   157fc:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
   157fe:	2314      	movs	r3, #20
   15800:	18fb      	adds	r3, r7, r3
   15802:	0018      	movs	r0, r3
   15804:	4b0c      	ldr	r3, [pc, #48]	; (15838 <at25dfx_chip_init+0x5c>)
   15806:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
   15808:	2314      	movs	r3, #20
   1580a:	18fb      	adds	r3, r7, r3
   1580c:	2201      	movs	r2, #1
   1580e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
   15810:	68fb      	ldr	r3, [r7, #12]
   15812:	795b      	ldrb	r3, [r3, #5]
   15814:	2214      	movs	r2, #20
   15816:	18ba      	adds	r2, r7, r2
   15818:	0011      	movs	r1, r2
   1581a:	0018      	movs	r0, r3
   1581c:	4b07      	ldr	r3, [pc, #28]	; (1583c <at25dfx_chip_init+0x60>)
   1581e:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
   15820:	68fb      	ldr	r3, [r7, #12]
   15822:	795b      	ldrb	r3, [r3, #5]
   15824:	2101      	movs	r1, #1
   15826:	0018      	movs	r0, r3
   15828:	4b05      	ldr	r3, [pc, #20]	; (15840 <at25dfx_chip_init+0x64>)
   1582a:	4798      	blx	r3

	return STATUS_OK;
   1582c:	2300      	movs	r3, #0
}
   1582e:	0018      	movs	r0, r3
   15830:	46bd      	mov	sp, r7
   15832:	b006      	add	sp, #24
   15834:	bd80      	pop	{r7, pc}
   15836:	46c0      	nop			; (mov r8, r8)
   15838:	000155ed 	.word	0x000155ed
   1583c:	000120dd 	.word	0x000120dd
   15840:	00015655 	.word	0x00015655

00015844 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
   15844:	b580      	push	{r7, lr}
   15846:	b082      	sub	sp, #8
   15848:	af00      	add	r7, sp, #0
   1584a:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   1584c:	687b      	ldr	r3, [r7, #4]
   1584e:	2200      	movs	r2, #0
   15850:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
   15852:	687b      	ldr	r3, [r7, #4]
   15854:	2201      	movs	r2, #1
   15856:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   15858:	4b08      	ldr	r3, [pc, #32]	; (1587c <nvm_get_config_defaults+0x38>)
   1585a:	685b      	ldr	r3, [r3, #4]
   1585c:	06db      	lsls	r3, r3, #27
   1585e:	0f1b      	lsrs	r3, r3, #28
   15860:	b2db      	uxtb	r3, r3
   15862:	001a      	movs	r2, r3
   15864:	687b      	ldr	r3, [r7, #4]
   15866:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
   15868:	687b      	ldr	r3, [r7, #4]
   1586a:	2200      	movs	r2, #0
   1586c:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   1586e:	687b      	ldr	r3, [r7, #4]
   15870:	2200      	movs	r2, #0
   15872:	711a      	strb	r2, [r3, #4]
}
   15874:	46c0      	nop			; (mov r8, r8)
   15876:	46bd      	mov	sp, r7
   15878:	b002      	add	sp, #8
   1587a:	bd80      	pop	{r7, pc}
   1587c:	41004000 	.word	0x41004000

00015880 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   15880:	b580      	push	{r7, lr}
   15882:	b084      	sub	sp, #16
   15884:	af00      	add	r7, sp, #0
   15886:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   15888:	687b      	ldr	r3, [r7, #4]
   1588a:	681b      	ldr	r3, [r3, #0]
   1588c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1588e:	68fb      	ldr	r3, [r7, #12]
   15890:	69db      	ldr	r3, [r3, #28]
   15892:	1e5a      	subs	r2, r3, #1
   15894:	4193      	sbcs	r3, r2
   15896:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   15898:	0018      	movs	r0, r3
   1589a:	46bd      	mov	sp, r7
   1589c:	b004      	add	sp, #16
   1589e:	bd80      	pop	{r7, pc}

000158a0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   158a0:	b580      	push	{r7, lr}
   158a2:	b082      	sub	sp, #8
   158a4:	af00      	add	r7, sp, #0
   158a6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   158a8:	46c0      	nop			; (mov r8, r8)
   158aa:	687b      	ldr	r3, [r7, #4]
   158ac:	0018      	movs	r0, r3
   158ae:	4b04      	ldr	r3, [pc, #16]	; (158c0 <_usart_wait_for_sync+0x20>)
   158b0:	4798      	blx	r3
   158b2:	1e03      	subs	r3, r0, #0
   158b4:	d1f9      	bne.n	158aa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   158b6:	46c0      	nop			; (mov r8, r8)
   158b8:	46bd      	mov	sp, r7
   158ba:	b002      	add	sp, #8
   158bc:	bd80      	pop	{r7, pc}
   158be:	46c0      	nop			; (mov r8, r8)
   158c0:	00015881 	.word	0x00015881

000158c4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   158c4:	b580      	push	{r7, lr}
   158c6:	b082      	sub	sp, #8
   158c8:	af00      	add	r7, sp, #0
   158ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   158cc:	687b      	ldr	r3, [r7, #4]
   158ce:	2280      	movs	r2, #128	; 0x80
   158d0:	05d2      	lsls	r2, r2, #23
   158d2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   158d4:	687b      	ldr	r3, [r7, #4]
   158d6:	2200      	movs	r2, #0
   158d8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   158da:	687b      	ldr	r3, [r7, #4]
   158dc:	22ff      	movs	r2, #255	; 0xff
   158de:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   158e0:	687b      	ldr	r3, [r7, #4]
   158e2:	2200      	movs	r2, #0
   158e4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   158e6:	687b      	ldr	r3, [r7, #4]
   158e8:	2200      	movs	r2, #0
   158ea:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   158ec:	687b      	ldr	r3, [r7, #4]
   158ee:	2296      	movs	r2, #150	; 0x96
   158f0:	0192      	lsls	r2, r2, #6
   158f2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   158f4:	687b      	ldr	r3, [r7, #4]
   158f6:	2224      	movs	r2, #36	; 0x24
   158f8:	2101      	movs	r1, #1
   158fa:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   158fc:	687b      	ldr	r3, [r7, #4]
   158fe:	2225      	movs	r2, #37	; 0x25
   15900:	2101      	movs	r1, #1
   15902:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   15904:	687b      	ldr	r3, [r7, #4]
   15906:	2226      	movs	r2, #38	; 0x26
   15908:	2100      	movs	r1, #0
   1590a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1590c:	687b      	ldr	r3, [r7, #4]
   1590e:	2227      	movs	r2, #39	; 0x27
   15910:	2100      	movs	r1, #0
   15912:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   15914:	687b      	ldr	r3, [r7, #4]
   15916:	2200      	movs	r2, #0
   15918:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1591a:	687b      	ldr	r3, [r7, #4]
   1591c:	2288      	movs	r2, #136	; 0x88
   1591e:	0352      	lsls	r2, r2, #13
   15920:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   15922:	687b      	ldr	r3, [r7, #4]
   15924:	222c      	movs	r2, #44	; 0x2c
   15926:	2100      	movs	r1, #0
   15928:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1592a:	687b      	ldr	r3, [r7, #4]
   1592c:	222d      	movs	r2, #45	; 0x2d
   1592e:	2100      	movs	r1, #0
   15930:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   15932:	687b      	ldr	r3, [r7, #4]
   15934:	2200      	movs	r2, #0
   15936:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   15938:	687b      	ldr	r3, [r7, #4]
   1593a:	2200      	movs	r2, #0
   1593c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1593e:	687b      	ldr	r3, [r7, #4]
   15940:	2200      	movs	r2, #0
   15942:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   15944:	687b      	ldr	r3, [r7, #4]
   15946:	2200      	movs	r2, #0
   15948:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1594a:	687b      	ldr	r3, [r7, #4]
   1594c:	2200      	movs	r2, #0
   1594e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   15950:	687b      	ldr	r3, [r7, #4]
   15952:	2200      	movs	r2, #0
   15954:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   15956:	687b      	ldr	r3, [r7, #4]
   15958:	2200      	movs	r2, #0
   1595a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1595c:	687b      	ldr	r3, [r7, #4]
   1595e:	2200      	movs	r2, #0
   15960:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   15962:	687b      	ldr	r3, [r7, #4]
   15964:	2200      	movs	r2, #0
   15966:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   15968:	687b      	ldr	r3, [r7, #4]
   1596a:	2200      	movs	r2, #0
   1596c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1596e:	687b      	ldr	r3, [r7, #4]
   15970:	2213      	movs	r2, #19
   15972:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   15974:	687b      	ldr	r3, [r7, #4]
   15976:	2200      	movs	r2, #0
   15978:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1597a:	46c0      	nop			; (mov r8, r8)
   1597c:	46bd      	mov	sp, r7
   1597e:	b002      	add	sp, #8
   15980:	bd80      	pop	{r7, pc}
   15982:	46c0      	nop			; (mov r8, r8)

00015984 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   15984:	b580      	push	{r7, lr}
   15986:	b084      	sub	sp, #16
   15988:	af00      	add	r7, sp, #0
   1598a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1598c:	687b      	ldr	r3, [r7, #4]
   1598e:	681b      	ldr	r3, [r3, #0]
   15990:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   15992:	687b      	ldr	r3, [r7, #4]
   15994:	681b      	ldr	r3, [r3, #0]
   15996:	0018      	movs	r0, r3
   15998:	4b09      	ldr	r3, [pc, #36]	; (159c0 <usart_enable+0x3c>)
   1599a:	4798      	blx	r3
   1599c:	0003      	movs	r3, r0
   1599e:	0018      	movs	r0, r3
   159a0:	4b08      	ldr	r3, [pc, #32]	; (159c4 <usart_enable+0x40>)
   159a2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   159a4:	687b      	ldr	r3, [r7, #4]
   159a6:	0018      	movs	r0, r3
   159a8:	4b07      	ldr	r3, [pc, #28]	; (159c8 <usart_enable+0x44>)
   159aa:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   159ac:	68fb      	ldr	r3, [r7, #12]
   159ae:	681b      	ldr	r3, [r3, #0]
   159b0:	2202      	movs	r2, #2
   159b2:	431a      	orrs	r2, r3
   159b4:	68fb      	ldr	r3, [r7, #12]
   159b6:	601a      	str	r2, [r3, #0]
}
   159b8:	46c0      	nop			; (mov r8, r8)
   159ba:	46bd      	mov	sp, r7
   159bc:	b004      	add	sp, #16
   159be:	bd80      	pop	{r7, pc}
   159c0:	00012789 	.word	0x00012789
   159c4:	000156bd 	.word	0x000156bd
   159c8:	000158a1 	.word	0x000158a1

000159cc <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   159cc:	b580      	push	{r7, lr}
   159ce:	b084      	sub	sp, #16
   159d0:	af00      	add	r7, sp, #0
   159d2:	60f8      	str	r0, [r7, #12]
   159d4:	60b9      	str	r1, [r7, #8]
   159d6:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
   159d8:	687a      	ldr	r2, [r7, #4]
   159da:	68b9      	ldr	r1, [r7, #8]
   159dc:	68fb      	ldr	r3, [r7, #12]
   159de:	0018      	movs	r0, r3
   159e0:	4b05      	ldr	r3, [pc, #20]	; (159f8 <usart_serial_init+0x2c>)
   159e2:	4798      	blx	r3
   159e4:	1e03      	subs	r3, r0, #0
   159e6:	d101      	bne.n	159ec <usart_serial_init+0x20>
		return true;
   159e8:	2301      	movs	r3, #1
   159ea:	e000      	b.n	159ee <usart_serial_init+0x22>
	}
	else {
		return false;
   159ec:	2300      	movs	r3, #0
	}
}
   159ee:	0018      	movs	r0, r3
   159f0:	46bd      	mov	sp, r7
   159f2:	b004      	add	sp, #16
   159f4:	bd80      	pop	{r7, pc}
   159f6:	46c0      	nop			; (mov r8, r8)
   159f8:	00013d61 	.word	0x00013d61

000159fc <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
   159fc:	b580      	push	{r7, lr}
   159fe:	b082      	sub	sp, #8
   15a00:	af00      	add	r7, sp, #0
   15a02:	6078      	str	r0, [r7, #4]
   15a04:	000a      	movs	r2, r1
   15a06:	1cfb      	adds	r3, r7, #3
   15a08:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
   15a0a:	46c0      	nop			; (mov r8, r8)
   15a0c:	1cfb      	adds	r3, r7, #3
   15a0e:	781b      	ldrb	r3, [r3, #0]
   15a10:	b29a      	uxth	r2, r3
   15a12:	687b      	ldr	r3, [r7, #4]
   15a14:	0011      	movs	r1, r2
   15a16:	0018      	movs	r0, r3
   15a18:	4b04      	ldr	r3, [pc, #16]	; (15a2c <usart_serial_putchar+0x30>)
   15a1a:	4798      	blx	r3
   15a1c:	1e03      	subs	r3, r0, #0
   15a1e:	d1f5      	bne.n	15a0c <usart_serial_putchar+0x10>

	return STATUS_OK;
   15a20:	2300      	movs	r3, #0
}
   15a22:	0018      	movs	r0, r3
   15a24:	46bd      	mov	sp, r7
   15a26:	b002      	add	sp, #8
   15a28:	bd80      	pop	{r7, pc}
   15a2a:	46c0      	nop			; (mov r8, r8)
   15a2c:	00013fd5 	.word	0x00013fd5

00015a30 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   15a30:	b580      	push	{r7, lr}
   15a32:	b084      	sub	sp, #16
   15a34:	af00      	add	r7, sp, #0
   15a36:	6078      	str	r0, [r7, #4]
   15a38:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
   15a3a:	230e      	movs	r3, #14
   15a3c:	18fb      	adds	r3, r7, r3
   15a3e:	2200      	movs	r2, #0
   15a40:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
   15a42:	46c0      	nop			; (mov r8, r8)
   15a44:	230e      	movs	r3, #14
   15a46:	18fa      	adds	r2, r7, r3
   15a48:	687b      	ldr	r3, [r7, #4]
   15a4a:	0011      	movs	r1, r2
   15a4c:	0018      	movs	r0, r3
   15a4e:	4b07      	ldr	r3, [pc, #28]	; (15a6c <usart_serial_getchar+0x3c>)
   15a50:	4798      	blx	r3
   15a52:	1e03      	subs	r3, r0, #0
   15a54:	d1f6      	bne.n	15a44 <usart_serial_getchar+0x14>

	*c = temp;
   15a56:	230e      	movs	r3, #14
   15a58:	18fb      	adds	r3, r7, r3
   15a5a:	881b      	ldrh	r3, [r3, #0]
   15a5c:	b2da      	uxtb	r2, r3
   15a5e:	683b      	ldr	r3, [r7, #0]
   15a60:	701a      	strb	r2, [r3, #0]
}
   15a62:	46c0      	nop			; (mov r8, r8)
   15a64:	46bd      	mov	sp, r7
   15a66:	b004      	add	sp, #16
   15a68:	bd80      	pop	{r7, pc}
   15a6a:	46c0      	nop			; (mov r8, r8)
   15a6c:	00014039 	.word	0x00014039

00015a70 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   15a70:	b580      	push	{r7, lr}
   15a72:	b084      	sub	sp, #16
   15a74:	af00      	add	r7, sp, #0
   15a76:	60f8      	str	r0, [r7, #12]
   15a78:	60b9      	str	r1, [r7, #8]
   15a7a:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
   15a7c:	4b10      	ldr	r3, [pc, #64]	; (15ac0 <stdio_serial_init+0x50>)
   15a7e:	68fa      	ldr	r2, [r7, #12]
   15a80:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   15a82:	4b10      	ldr	r3, [pc, #64]	; (15ac4 <stdio_serial_init+0x54>)
   15a84:	4a10      	ldr	r2, [pc, #64]	; (15ac8 <stdio_serial_init+0x58>)
   15a86:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   15a88:	4b10      	ldr	r3, [pc, #64]	; (15acc <stdio_serial_init+0x5c>)
   15a8a:	4a11      	ldr	r2, [pc, #68]	; (15ad0 <stdio_serial_init+0x60>)
   15a8c:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
   15a8e:	687a      	ldr	r2, [r7, #4]
   15a90:	68b9      	ldr	r1, [r7, #8]
   15a92:	68fb      	ldr	r3, [r7, #12]
   15a94:	0018      	movs	r0, r3
   15a96:	4b0f      	ldr	r3, [pc, #60]	; (15ad4 <stdio_serial_init+0x64>)
   15a98:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   15a9a:	4b0f      	ldr	r3, [pc, #60]	; (15ad8 <stdio_serial_init+0x68>)
   15a9c:	681b      	ldr	r3, [r3, #0]
   15a9e:	689b      	ldr	r3, [r3, #8]
   15aa0:	2100      	movs	r1, #0
   15aa2:	0018      	movs	r0, r3
   15aa4:	4b0d      	ldr	r3, [pc, #52]	; (15adc <stdio_serial_init+0x6c>)
   15aa6:	4798      	blx	r3
	setbuf(stdin, NULL);
   15aa8:	4b0b      	ldr	r3, [pc, #44]	; (15ad8 <stdio_serial_init+0x68>)
   15aaa:	681b      	ldr	r3, [r3, #0]
   15aac:	685b      	ldr	r3, [r3, #4]
   15aae:	2100      	movs	r1, #0
   15ab0:	0018      	movs	r0, r3
   15ab2:	4b0a      	ldr	r3, [pc, #40]	; (15adc <stdio_serial_init+0x6c>)
   15ab4:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
   15ab6:	46c0      	nop			; (mov r8, r8)
   15ab8:	46bd      	mov	sp, r7
   15aba:	b004      	add	sp, #16
   15abc:	bd80      	pop	{r7, pc}
   15abe:	46c0      	nop			; (mov r8, r8)
   15ac0:	200003d8 	.word	0x200003d8
   15ac4:	200003d4 	.word	0x200003d4
   15ac8:	000159fd 	.word	0x000159fd
   15acc:	200003d0 	.word	0x200003d0
   15ad0:	00015a31 	.word	0x00015a31
   15ad4:	000159cd 	.word	0x000159cd
   15ad8:	2000007c 	.word	0x2000007c
   15adc:	00016f09 	.word	0x00016f09

00015ae0 <configure_console>:
// begin source code



static void configure_console(void)
{
   15ae0:	b580      	push	{r7, lr}
   15ae2:	b090      	sub	sp, #64	; 0x40
   15ae4:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;
	usart_get_config_defaults(&usart_conf);
   15ae6:	003b      	movs	r3, r7
   15ae8:	0018      	movs	r0, r3
   15aea:	4b13      	ldr	r3, [pc, #76]	; (15b38 <configure_console+0x58>)
   15aec:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   15aee:	003b      	movs	r3, r7
   15af0:	22c4      	movs	r2, #196	; 0xc4
   15af2:	0392      	lsls	r2, r2, #14
   15af4:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   15af6:	003b      	movs	r3, r7
   15af8:	2201      	movs	r2, #1
   15afa:	4252      	negs	r2, r2
   15afc:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   15afe:	003b      	movs	r3, r7
   15b00:	2201      	movs	r2, #1
   15b02:	4252      	negs	r2, r2
   15b04:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   15b06:	003b      	movs	r3, r7
   15b08:	4a0c      	ldr	r2, [pc, #48]	; (15b3c <configure_console+0x5c>)
   15b0a:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   15b0c:	003b      	movs	r3, r7
   15b0e:	4a0c      	ldr	r2, [pc, #48]	; (15b40 <configure_console+0x60>)
   15b10:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
   15b12:	003b      	movs	r3, r7
   15b14:	22e1      	movs	r2, #225	; 0xe1
   15b16:	0252      	lsls	r2, r2, #9
   15b18:	621a      	str	r2, [r3, #32]
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
   15b1a:	003a      	movs	r2, r7
   15b1c:	4909      	ldr	r1, [pc, #36]	; (15b44 <configure_console+0x64>)
   15b1e:	4b0a      	ldr	r3, [pc, #40]	; (15b48 <configure_console+0x68>)
   15b20:	0018      	movs	r0, r3
   15b22:	4b0a      	ldr	r3, [pc, #40]	; (15b4c <configure_console+0x6c>)
   15b24:	4798      	blx	r3
	usart_enable(&usart_instance);
   15b26:	4b08      	ldr	r3, [pc, #32]	; (15b48 <configure_console+0x68>)
   15b28:	0018      	movs	r0, r3
   15b2a:	4b09      	ldr	r3, [pc, #36]	; (15b50 <configure_console+0x70>)
   15b2c:	4798      	blx	r3
}
   15b2e:	46c0      	nop			; (mov r8, r8)
   15b30:	46bd      	mov	sp, r7
   15b32:	b010      	add	sp, #64	; 0x40
   15b34:	bd80      	pop	{r7, pc}
   15b36:	46c0      	nop			; (mov r8, r8)
   15b38:	000158c5 	.word	0x000158c5
   15b3c:	002a0003 	.word	0x002a0003
   15b40:	002b0003 	.word	0x002b0003
   15b44:	42001800 	.word	0x42001800
   15b48:	200003dc 	.word	0x200003dc
   15b4c:	00015a71 	.word	0x00015a71
   15b50:	00015985 	.word	0x00015985

00015b54 <configure_nvm>:


static void configure_nvm()
{
   15b54:	b580      	push	{r7, lr}
   15b56:	b082      	sub	sp, #8
   15b58:	af00      	add	r7, sp, #0
	struct nvm_config config;
	nvm_get_config_defaults(&config);
   15b5a:	003b      	movs	r3, r7
   15b5c:	0018      	movs	r0, r3
   15b5e:	4b06      	ldr	r3, [pc, #24]	; (15b78 <configure_nvm+0x24>)
   15b60:	4798      	blx	r3
	config.manual_page_write = false;
   15b62:	003b      	movs	r3, r7
   15b64:	2200      	movs	r2, #0
   15b66:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config);
   15b68:	003b      	movs	r3, r7
   15b6a:	0018      	movs	r0, r3
   15b6c:	4b03      	ldr	r3, [pc, #12]	; (15b7c <configure_nvm+0x28>)
   15b6e:	4798      	blx	r3
}
   15b70:	46c0      	nop			; (mov r8, r8)
   15b72:	46bd      	mov	sp, r7
   15b74:	b002      	add	sp, #8
   15b76:	bd80      	pop	{r7, pc}
   15b78:	00015845 	.word	0x00015845
   15b7c:	00011bd5 	.word	0x00011bd5

00015b80 <getFWStat>:

static Firmware_Status_t getFWStat()
{
   15b80:	b590      	push	{r4, r7, lr}
   15b82:	b097      	sub	sp, #92	; 0x5c
   15b84:	af00      	add	r7, sp, #0
   15b86:	6078      	str	r0, [r7, #4]
	status_code_genare_t error_code;
	uint8_t read_buffer[NVMCTRL_PAGE_SIZE]={0};
   15b88:	2314      	movs	r3, #20
   15b8a:	18fb      	adds	r3, r7, r3
   15b8c:	0018      	movs	r0, r3
   15b8e:	2340      	movs	r3, #64	; 0x40
   15b90:	001a      	movs	r2, r3
   15b92:	2100      	movs	r1, #0
   15b94:	4b27      	ldr	r3, [pc, #156]	; (15c34 <getFWStat+0xb4>)
   15b96:	4798      	blx	r3
	do
	{
		error_code = nvm_read_buffer(FW_STAT_ADDRESS, read_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   15b98:	2357      	movs	r3, #87	; 0x57
   15b9a:	18fc      	adds	r4, r7, r3
   15b9c:	2314      	movs	r3, #20
   15b9e:	18f9      	adds	r1, r7, r3
   15ba0:	23fe      	movs	r3, #254	; 0xfe
   15ba2:	01db      	lsls	r3, r3, #7
   15ba4:	2240      	movs	r2, #64	; 0x40
   15ba6:	0018      	movs	r0, r3
   15ba8:	4b23      	ldr	r3, [pc, #140]	; (15c38 <getFWStat+0xb8>)
   15baa:	4798      	blx	r3
   15bac:	0003      	movs	r3, r0
   15bae:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   15bb0:	2357      	movs	r3, #87	; 0x57
   15bb2:	18fb      	adds	r3, r7, r3
   15bb4:	781b      	ldrb	r3, [r3, #0]
   15bb6:	2b05      	cmp	r3, #5
   15bb8:	d0ee      	beq.n	15b98 <getFWStat+0x18>
	Firmware_Status_t thisFW;
	thisFW.signature[0]			= read_buffer[0];
   15bba:	2314      	movs	r3, #20
   15bbc:	18fb      	adds	r3, r7, r3
   15bbe:	781a      	ldrb	r2, [r3, #0]
   15bc0:	230c      	movs	r3, #12
   15bc2:	18fb      	adds	r3, r7, r3
   15bc4:	701a      	strb	r2, [r3, #0]
	thisFW.signature[1]			= read_buffer[1];
   15bc6:	2314      	movs	r3, #20
   15bc8:	18fb      	adds	r3, r7, r3
   15bca:	785a      	ldrb	r2, [r3, #1]
   15bcc:	230c      	movs	r3, #12
   15bce:	18fb      	adds	r3, r7, r3
   15bd0:	705a      	strb	r2, [r3, #1]
	thisFW.signature[2]			= read_buffer[2];
   15bd2:	2314      	movs	r3, #20
   15bd4:	18fb      	adds	r3, r7, r3
   15bd6:	789a      	ldrb	r2, [r3, #2]
   15bd8:	230c      	movs	r3, #12
   15bda:	18fb      	adds	r3, r7, r3
   15bdc:	709a      	strb	r2, [r3, #2]
	thisFW.signature[3]			= read_buffer[3];
   15bde:	2314      	movs	r3, #20
   15be0:	18fb      	adds	r3, r7, r3
   15be2:	78da      	ldrb	r2, [r3, #3]
   15be4:	230c      	movs	r3, #12
   15be6:	18fb      	adds	r3, r7, r3
   15be8:	70da      	strb	r2, [r3, #3]
	thisFW.executing_image		= read_buffer[4];
   15bea:	2314      	movs	r3, #20
   15bec:	18fb      	adds	r3, r7, r3
   15bee:	791a      	ldrb	r2, [r3, #4]
   15bf0:	230c      	movs	r3, #12
   15bf2:	18fb      	adds	r3, r7, r3
   15bf4:	711a      	strb	r2, [r3, #4]
	thisFW.downloaded_image		= read_buffer[5];
   15bf6:	2314      	movs	r3, #20
   15bf8:	18fb      	adds	r3, r7, r3
   15bfa:	795a      	ldrb	r2, [r3, #5]
   15bfc:	230c      	movs	r3, #12
   15bfe:	18fb      	adds	r3, r7, r3
   15c00:	715a      	strb	r2, [r3, #5]
	thisFW.writenew_image		= read_buffer[6];
   15c02:	2314      	movs	r3, #20
   15c04:	18fb      	adds	r3, r7, r3
   15c06:	799a      	ldrb	r2, [r3, #6]
   15c08:	230c      	movs	r3, #12
   15c0a:	18fb      	adds	r3, r7, r3
   15c0c:	719a      	strb	r2, [r3, #6]
	thisFW.reset_count			= read_buffer[7];
   15c0e:	2314      	movs	r3, #20
   15c10:	18fb      	adds	r3, r7, r3
   15c12:	79da      	ldrb	r2, [r3, #7]
   15c14:	230c      	movs	r3, #12
   15c16:	18fb      	adds	r3, r7, r3
   15c18:	71da      	strb	r2, [r3, #7]
	return thisFW;
   15c1a:	687a      	ldr	r2, [r7, #4]
   15c1c:	230c      	movs	r3, #12
   15c1e:	18fb      	adds	r3, r7, r3
   15c20:	0010      	movs	r0, r2
   15c22:	0019      	movs	r1, r3
   15c24:	2308      	movs	r3, #8
   15c26:	001a      	movs	r2, r3
   15c28:	4b04      	ldr	r3, [pc, #16]	; (15c3c <getFWStat+0xbc>)
   15c2a:	4798      	blx	r3
	//return *(Firmware_Status_t*)FW_STAT_ADDRESS;	// return the firmware status
}
   15c2c:	6878      	ldr	r0, [r7, #4]
   15c2e:	46bd      	mov	sp, r7
   15c30:	b017      	add	sp, #92	; 0x5c
   15c32:	bd90      	pop	{r4, r7, pc}
   15c34:	00016c69 	.word	0x00016c69
   15c38:	00011f11 	.word	0x00011f11
   15c3c:	00016c2d 	.word	0x00016c2d

00015c40 <writeFWStat>:

static void writeFWStat(Firmware_Status_t thisFW)
{
   15c40:	b590      	push	{r4, r7, lr}
   15c42:	b0a5      	sub	sp, #148	; 0x94
   15c44:	af00      	add	r7, sp, #0
   15c46:	003b      	movs	r3, r7
   15c48:	6018      	str	r0, [r3, #0]
   15c4a:	6059      	str	r1, [r3, #4]
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE]={0};
   15c4c:	234c      	movs	r3, #76	; 0x4c
   15c4e:	18fb      	adds	r3, r7, r3
   15c50:	0018      	movs	r0, r3
   15c52:	2340      	movs	r3, #64	; 0x40
   15c54:	001a      	movs	r2, r3
   15c56:	2100      	movs	r1, #0
   15c58:	4b32      	ldr	r3, [pc, #200]	; (15d24 <writeFWStat+0xe4>)
   15c5a:	4798      	blx	r3
	page_buffer[0] = thisFW.signature[0];
   15c5c:	003b      	movs	r3, r7
   15c5e:	781a      	ldrb	r2, [r3, #0]
   15c60:	234c      	movs	r3, #76	; 0x4c
   15c62:	18fb      	adds	r3, r7, r3
   15c64:	701a      	strb	r2, [r3, #0]
	page_buffer[1] = thisFW.signature[1];
   15c66:	003b      	movs	r3, r7
   15c68:	785a      	ldrb	r2, [r3, #1]
   15c6a:	234c      	movs	r3, #76	; 0x4c
   15c6c:	18fb      	adds	r3, r7, r3
   15c6e:	705a      	strb	r2, [r3, #1]
	page_buffer[2] = thisFW.signature[2];
   15c70:	003b      	movs	r3, r7
   15c72:	789a      	ldrb	r2, [r3, #2]
   15c74:	234c      	movs	r3, #76	; 0x4c
   15c76:	18fb      	adds	r3, r7, r3
   15c78:	709a      	strb	r2, [r3, #2]
	page_buffer[3] = thisFW.signature[3];
   15c7a:	003b      	movs	r3, r7
   15c7c:	78da      	ldrb	r2, [r3, #3]
   15c7e:	234c      	movs	r3, #76	; 0x4c
   15c80:	18fb      	adds	r3, r7, r3
   15c82:	70da      	strb	r2, [r3, #3]
	page_buffer[4] = thisFW.executing_image;
   15c84:	003b      	movs	r3, r7
   15c86:	791a      	ldrb	r2, [r3, #4]
   15c88:	234c      	movs	r3, #76	; 0x4c
   15c8a:	18fb      	adds	r3, r7, r3
   15c8c:	711a      	strb	r2, [r3, #4]
	page_buffer[5] = thisFW.downloaded_image;
   15c8e:	003b      	movs	r3, r7
   15c90:	795a      	ldrb	r2, [r3, #5]
   15c92:	234c      	movs	r3, #76	; 0x4c
   15c94:	18fb      	adds	r3, r7, r3
   15c96:	715a      	strb	r2, [r3, #5]
	page_buffer[6] = thisFW.writenew_image;
   15c98:	003b      	movs	r3, r7
   15c9a:	799a      	ldrb	r2, [r3, #6]
   15c9c:	234c      	movs	r3, #76	; 0x4c
   15c9e:	18fb      	adds	r3, r7, r3
   15ca0:	719a      	strb	r2, [r3, #6]
	page_buffer[7] = 0;
   15ca2:	234c      	movs	r3, #76	; 0x4c
   15ca4:	18fb      	adds	r3, r7, r3
   15ca6:	2200      	movs	r2, #0
   15ca8:	71da      	strb	r2, [r3, #7]
	
	status_code_genare_t error_code;
	do
	{
		error_code = nvm_erase_row(FW_STAT_ADDRESS);			// Erase FW stat row
   15caa:	238f      	movs	r3, #143	; 0x8f
   15cac:	18fc      	adds	r4, r7, r3
   15cae:	23fe      	movs	r3, #254	; 0xfe
   15cb0:	01db      	lsls	r3, r3, #7
   15cb2:	0018      	movs	r0, r3
   15cb4:	4b1c      	ldr	r3, [pc, #112]	; (15d28 <writeFWStat+0xe8>)
   15cb6:	4798      	blx	r3
   15cb8:	0003      	movs	r3, r0
   15cba:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   15cbc:	238f      	movs	r3, #143	; 0x8f
   15cbe:	18fb      	adds	r3, r7, r3
   15cc0:	781b      	ldrb	r3, [r3, #0]
   15cc2:	2b05      	cmp	r3, #5
   15cc4:	d0f1      	beq.n	15caa <writeFWStat+0x6a>
	
	do
	{
		error_code = nvm_write_buffer(FW_STAT_ADDRESS, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   15cc6:	238f      	movs	r3, #143	; 0x8f
   15cc8:	18fc      	adds	r4, r7, r3
   15cca:	234c      	movs	r3, #76	; 0x4c
   15ccc:	18f9      	adds	r1, r7, r3
   15cce:	23fe      	movs	r3, #254	; 0xfe
   15cd0:	01db      	lsls	r3, r3, #7
   15cd2:	2240      	movs	r2, #64	; 0x40
   15cd4:	0018      	movs	r0, r3
   15cd6:	4b15      	ldr	r3, [pc, #84]	; (15d2c <writeFWStat+0xec>)
   15cd8:	4798      	blx	r3
   15cda:	0003      	movs	r3, r0
   15cdc:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   15cde:	238f      	movs	r3, #143	; 0x8f
   15ce0:	18fb      	adds	r3, r7, r3
   15ce2:	781b      	ldrb	r3, [r3, #0]
   15ce4:	2b05      	cmp	r3, #5
   15ce6:	d0ee      	beq.n	15cc6 <writeFWStat+0x86>
	
	/* test - read back NVM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	uint8_t read_buffer[NVMCTRL_PAGE_SIZE]={0};
   15ce8:	230c      	movs	r3, #12
   15cea:	18fb      	adds	r3, r7, r3
   15cec:	0018      	movs	r0, r3
   15cee:	2340      	movs	r3, #64	; 0x40
   15cf0:	001a      	movs	r2, r3
   15cf2:	2100      	movs	r1, #0
   15cf4:	4b0b      	ldr	r3, [pc, #44]	; (15d24 <writeFWStat+0xe4>)
   15cf6:	4798      	blx	r3
	do
	{
		error_code = nvm_read_buffer(FW_STAT_ADDRESS, read_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   15cf8:	238f      	movs	r3, #143	; 0x8f
   15cfa:	18fc      	adds	r4, r7, r3
   15cfc:	230c      	movs	r3, #12
   15cfe:	18f9      	adds	r1, r7, r3
   15d00:	23fe      	movs	r3, #254	; 0xfe
   15d02:	01db      	lsls	r3, r3, #7
   15d04:	2240      	movs	r2, #64	; 0x40
   15d06:	0018      	movs	r0, r3
   15d08:	4b09      	ldr	r3, [pc, #36]	; (15d30 <writeFWStat+0xf0>)
   15d0a:	4798      	blx	r3
   15d0c:	0003      	movs	r3, r0
   15d0e:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
   15d10:	238f      	movs	r3, #143	; 0x8f
   15d12:	18fb      	adds	r3, r7, r3
   15d14:	781b      	ldrb	r3, [r3, #0]
   15d16:	2b05      	cmp	r3, #5
   15d18:	d0ee      	beq.n	15cf8 <writeFWStat+0xb8>
}
   15d1a:	46c0      	nop			; (mov r8, r8)
   15d1c:	46bd      	mov	sp, r7
   15d1e:	b025      	add	sp, #148	; 0x94
   15d20:	bd90      	pop	{r4, r7, pc}
   15d22:	46c0      	nop			; (mov r8, r8)
   15d24:	00016c69 	.word	0x00016c69
   15d28:	0001200d 	.word	0x0001200d
   15d2c:	00011dc5 	.word	0x00011dc5
   15d30:	00011f11 	.word	0x00011f11

00015d34 <configure_port_pins>:
void configure_port_pins(void)
{
   15d34:	b580      	push	{r7, lr}
   15d36:	b082      	sub	sp, #8
   15d38:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   15d3a:	1d3b      	adds	r3, r7, #4
   15d3c:	0018      	movs	r0, r3
   15d3e:	4b0b      	ldr	r3, [pc, #44]	; (15d6c <configure_port_pins+0x38>)
   15d40:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
   15d42:	1d3b      	adds	r3, r7, #4
   15d44:	2201      	movs	r2, #1
   15d46:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
   15d48:	1d3b      	adds	r3, r7, #4
   15d4a:	0019      	movs	r1, r3
   15d4c:	2017      	movs	r0, #23
   15d4e:	4b08      	ldr	r3, [pc, #32]	; (15d70 <configure_port_pins+0x3c>)
   15d50:	4798      	blx	r3
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
   15d52:	1d3b      	adds	r3, r7, #4
   15d54:	2200      	movs	r2, #0
   15d56:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(B1, &config_port_pin);
   15d58:	1d3b      	adds	r3, r7, #4
   15d5a:	0019      	movs	r1, r3
   15d5c:	2037      	movs	r0, #55	; 0x37
   15d5e:	4b04      	ldr	r3, [pc, #16]	; (15d70 <configure_port_pins+0x3c>)
   15d60:	4798      	blx	r3
}
   15d62:	46c0      	nop			; (mov r8, r8)
   15d64:	46bd      	mov	sp, r7
   15d66:	b002      	add	sp, #8
   15d68:	bd80      	pop	{r7, pc}
   15d6a:	46c0      	nop			; (mov r8, r8)
   15d6c:	000155ed 	.word	0x000155ed
   15d70:	000120dd 	.word	0x000120dd

00015d74 <configure_spi_flash>:

static void configure_spi_flash()
{
   15d74:	b580      	push	{r7, lr}
   15d76:	b090      	sub	sp, #64	; 0x40
   15d78:	af00      	add	r7, sp, #0
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
   15d7a:	1d3b      	adds	r3, r7, #4
   15d7c:	0018      	movs	r0, r3
   15d7e:	4b19      	ldr	r3, [pc, #100]	; (15de4 <configure_spi_flash+0x70>)
   15d80:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
   15d82:	1d3b      	adds	r3, r7, #4
   15d84:	4a18      	ldr	r2, [pc, #96]	; (15de8 <configure_spi_flash+0x74>)
   15d86:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
   15d88:	1d3b      	adds	r3, r7, #4
   15d8a:	2280      	movs	r2, #128	; 0x80
   15d8c:	0252      	lsls	r2, r2, #9
   15d8e:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
   15d90:	1d3b      	adds	r3, r7, #4
   15d92:	4a16      	ldr	r2, [pc, #88]	; (15dec <configure_spi_flash+0x78>)
   15d94:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
   15d96:	1d3b      	adds	r3, r7, #4
   15d98:	2201      	movs	r2, #1
   15d9a:	4252      	negs	r2, r2
   15d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
   15d9e:	1d3b      	adds	r3, r7, #4
   15da0:	4a13      	ldr	r2, [pc, #76]	; (15df0 <configure_spi_flash+0x7c>)
   15da2:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
   15da4:	1d3b      	adds	r3, r7, #4
   15da6:	4a13      	ldr	r2, [pc, #76]	; (15df4 <configure_spi_flash+0x80>)
   15da8:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
   15daa:	1d3a      	adds	r2, r7, #4
   15dac:	4912      	ldr	r1, [pc, #72]	; (15df8 <configure_spi_flash+0x84>)
   15dae:	4b13      	ldr	r3, [pc, #76]	; (15dfc <configure_spi_flash+0x88>)
   15db0:	0018      	movs	r0, r3
   15db2:	4b13      	ldr	r3, [pc, #76]	; (15e00 <configure_spi_flash+0x8c>)
   15db4:	4798      	blx	r3
	spi_enable(&at25dfx_spi);
   15db6:	4b11      	ldr	r3, [pc, #68]	; (15dfc <configure_spi_flash+0x88>)
   15db8:	0018      	movs	r0, r3
   15dba:	4b12      	ldr	r3, [pc, #72]	; (15e04 <configure_spi_flash+0x90>)
   15dbc:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_MEM_TYPE;
   15dbe:	233c      	movs	r3, #60	; 0x3c
   15dc0:	18fb      	adds	r3, r7, r3
   15dc2:	2204      	movs	r2, #4
   15dc4:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = AT25DFX_CS;
   15dc6:	233c      	movs	r3, #60	; 0x3c
   15dc8:	18fb      	adds	r3, r7, r3
   15dca:	2207      	movs	r2, #7
   15dcc:	705a      	strb	r2, [r3, #1]
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
   15dce:	233c      	movs	r3, #60	; 0x3c
   15dd0:	18fa      	adds	r2, r7, r3
   15dd2:	490a      	ldr	r1, [pc, #40]	; (15dfc <configure_spi_flash+0x88>)
   15dd4:	4b0c      	ldr	r3, [pc, #48]	; (15e08 <configure_spi_flash+0x94>)
   15dd6:	0018      	movs	r0, r3
   15dd8:	4b0c      	ldr	r3, [pc, #48]	; (15e0c <configure_spi_flash+0x98>)
   15dda:	4798      	blx	r3
}
   15ddc:	46c0      	nop			; (mov r8, r8)
   15dde:	46bd      	mov	sp, r7
   15de0:	b010      	add	sp, #64	; 0x40
   15de2:	bd80      	pop	{r7, pc}
   15de4:	00015709 	.word	0x00015709
   15de8:	0001d4c0 	.word	0x0001d4c0
   15dec:	00100002 	.word	0x00100002
   15df0:	00120002 	.word	0x00120002
   15df4:	00130002 	.word	0x00130002
   15df8:	42000c00 	.word	0x42000c00
   15dfc:	20000d5c 	.word	0x20000d5c
   15e00:	00012dad 	.word	0x00012dad
   15e04:	0001578d 	.word	0x0001578d
   15e08:	20000c14 	.word	0x20000c14
   15e0c:	000157dd 	.word	0x000157dd

00015e10 <configure_timer>:

//Http downloader source code

static void configure_timer(void)
{
   15e10:	b580      	push	{r7, lr}
   15e12:	b082      	sub	sp, #8
   15e14:	af00      	add	r7, sp, #0
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
   15e16:	1d3b      	adds	r3, r7, #4
   15e18:	0018      	movs	r0, r3
   15e1a:	4b08      	ldr	r3, [pc, #32]	; (15e3c <configure_timer+0x2c>)
   15e1c:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
   15e1e:	1d3a      	adds	r2, r7, #4
   15e20:	4b07      	ldr	r3, [pc, #28]	; (15e40 <configure_timer+0x30>)
   15e22:	0011      	movs	r1, r2
   15e24:	0018      	movs	r0, r3
   15e26:	4b07      	ldr	r3, [pc, #28]	; (15e44 <configure_timer+0x34>)
   15e28:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   15e2a:	4b05      	ldr	r3, [pc, #20]	; (15e40 <configure_timer+0x30>)
   15e2c:	0018      	movs	r0, r3
   15e2e:	4b06      	ldr	r3, [pc, #24]	; (15e48 <configure_timer+0x38>)
   15e30:	4798      	blx	r3
}
   15e32:	46c0      	nop			; (mov r8, r8)
   15e34:	46bd      	mov	sp, r7
   15e36:	b002      	add	sp, #8
   15e38:	bd80      	pop	{r7, pc}
   15e3a:	46c0      	nop			; (mov r8, r8)
   15e3c:	00010869 	.word	0x00010869
   15e40:	20000c1c 	.word	0x20000c1c
   15e44:	0001088d 	.word	0x0001088d
   15e48:	00010979 	.word	0x00010979

00015e4c <init_state>:

static void init_state(void)
{
   15e4c:	b580      	push	{r7, lr}
   15e4e:	af00      	add	r7, sp, #0
	down_state = NOT_READY;
   15e50:	4b02      	ldr	r3, [pc, #8]	; (15e5c <init_state+0x10>)
   15e52:	2200      	movs	r2, #0
   15e54:	701a      	strb	r2, [r3, #0]
}
   15e56:	46c0      	nop			; (mov r8, r8)
   15e58:	46bd      	mov	sp, r7
   15e5a:	bd80      	pop	{r7, pc}
   15e5c:	2000022c 	.word	0x2000022c

00015e60 <clear_state>:

static void clear_state(download_state mask)
{
   15e60:	b580      	push	{r7, lr}
   15e62:	b082      	sub	sp, #8
   15e64:	af00      	add	r7, sp, #0
   15e66:	0002      	movs	r2, r0
   15e68:	1dfb      	adds	r3, r7, #7
   15e6a:	701a      	strb	r2, [r3, #0]
	down_state &= ~mask;
   15e6c:	1dfb      	adds	r3, r7, #7
   15e6e:	781b      	ldrb	r3, [r3, #0]
   15e70:	b25b      	sxtb	r3, r3
   15e72:	43db      	mvns	r3, r3
   15e74:	b25b      	sxtb	r3, r3
   15e76:	4a06      	ldr	r2, [pc, #24]	; (15e90 <clear_state+0x30>)
   15e78:	7812      	ldrb	r2, [r2, #0]
   15e7a:	b252      	sxtb	r2, r2
   15e7c:	4013      	ands	r3, r2
   15e7e:	b25b      	sxtb	r3, r3
   15e80:	b2da      	uxtb	r2, r3
   15e82:	4b03      	ldr	r3, [pc, #12]	; (15e90 <clear_state+0x30>)
   15e84:	701a      	strb	r2, [r3, #0]
}
   15e86:	46c0      	nop			; (mov r8, r8)
   15e88:	46bd      	mov	sp, r7
   15e8a:	b002      	add	sp, #8
   15e8c:	bd80      	pop	{r7, pc}
   15e8e:	46c0      	nop			; (mov r8, r8)
   15e90:	2000022c 	.word	0x2000022c

00015e94 <add_state>:

static void add_state(download_state mask)
{
   15e94:	b580      	push	{r7, lr}
   15e96:	b082      	sub	sp, #8
   15e98:	af00      	add	r7, sp, #0
   15e9a:	0002      	movs	r2, r0
   15e9c:	1dfb      	adds	r3, r7, #7
   15e9e:	701a      	strb	r2, [r3, #0]
	down_state |= mask;
   15ea0:	4b05      	ldr	r3, [pc, #20]	; (15eb8 <add_state+0x24>)
   15ea2:	781a      	ldrb	r2, [r3, #0]
   15ea4:	1dfb      	adds	r3, r7, #7
   15ea6:	781b      	ldrb	r3, [r3, #0]
   15ea8:	4313      	orrs	r3, r2
   15eaa:	b2da      	uxtb	r2, r3
   15eac:	4b02      	ldr	r3, [pc, #8]	; (15eb8 <add_state+0x24>)
   15eae:	701a      	strb	r2, [r3, #0]
}
   15eb0:	46c0      	nop			; (mov r8, r8)
   15eb2:	46bd      	mov	sp, r7
   15eb4:	b002      	add	sp, #8
   15eb6:	bd80      	pop	{r7, pc}
   15eb8:	2000022c 	.word	0x2000022c

00015ebc <is_state_set>:

static inline bool is_state_set(download_state mask)
{
   15ebc:	b580      	push	{r7, lr}
   15ebe:	b082      	sub	sp, #8
   15ec0:	af00      	add	r7, sp, #0
   15ec2:	0002      	movs	r2, r0
   15ec4:	1dfb      	adds	r3, r7, #7
   15ec6:	701a      	strb	r2, [r3, #0]
	return ((down_state & mask) != 0);
   15ec8:	4b06      	ldr	r3, [pc, #24]	; (15ee4 <is_state_set+0x28>)
   15eca:	781b      	ldrb	r3, [r3, #0]
   15ecc:	1dfa      	adds	r2, r7, #7
   15ece:	7812      	ldrb	r2, [r2, #0]
   15ed0:	4013      	ands	r3, r2
   15ed2:	b2db      	uxtb	r3, r3
   15ed4:	1e5a      	subs	r2, r3, #1
   15ed6:	4193      	sbcs	r3, r2
   15ed8:	b2db      	uxtb	r3, r3
}
   15eda:	0018      	movs	r0, r3
   15edc:	46bd      	mov	sp, r7
   15ede:	b002      	add	sp, #8
   15ee0:	bd80      	pop	{r7, pc}
   15ee2:	46c0      	nop			; (mov r8, r8)
   15ee4:	2000022c 	.word	0x2000022c

00015ee8 <write_spi_flash_frm_buf>:

void write_spi_flash_frm_buf(uint32 len){
   15ee8:	b590      	push	{r4, r7, lr}
   15eea:	b083      	sub	sp, #12
   15eec:	af00      	add	r7, sp, #0
   15eee:	6078      	str	r0, [r7, #4]
	at25dfx_chip_wake(&at25dfx_chip);
   15ef0:	4b13      	ldr	r3, [pc, #76]	; (15f40 <write_spi_flash_frm_buf+0x58>)
   15ef2:	0018      	movs	r0, r3
   15ef4:	4b13      	ldr	r3, [pc, #76]	; (15f44 <write_spi_flash_frm_buf+0x5c>)
   15ef6:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   15ef8:	4b11      	ldr	r3, [pc, #68]	; (15f40 <write_spi_flash_frm_buf+0x58>)
   15efa:	0018      	movs	r0, r3
   15efc:	4b12      	ldr	r3, [pc, #72]	; (15f48 <write_spi_flash_frm_buf+0x60>)
   15efe:	4798      	blx	r3
   15f00:	1e03      	subs	r3, r0, #0
   15f02:	d003      	beq.n	15f0c <write_spi_flash_frm_buf+0x24>
		// Handle missing or non-responsive device
		printf("Chip didnt wake \r\n");
   15f04:	4b11      	ldr	r3, [pc, #68]	; (15f4c <write_spi_flash_frm_buf+0x64>)
   15f06:	0018      	movs	r0, r3
   15f08:	4b11      	ldr	r3, [pc, #68]	; (15f50 <write_spi_flash_frm_buf+0x68>)
   15f0a:	4798      	blx	r3
	}
	
	//at25dfx_chip_set_sector_protect(&at25dfx_chip, flash_addr, false);				// unprotect sector
	
	at25dfx_chip_write_buffer(&at25dfx_chip, flash_addr, http_buf + http_buf_read_ptr, len);	// write buffer
   15f0c:	4b11      	ldr	r3, [pc, #68]	; (15f54 <write_spi_flash_frm_buf+0x6c>)
   15f0e:	6819      	ldr	r1, [r3, #0]
   15f10:	4b11      	ldr	r3, [pc, #68]	; (15f58 <write_spi_flash_frm_buf+0x70>)
   15f12:	681a      	ldr	r2, [r3, #0]
   15f14:	4b11      	ldr	r3, [pc, #68]	; (15f5c <write_spi_flash_frm_buf+0x74>)
   15f16:	18d2      	adds	r2, r2, r3
   15f18:	687b      	ldr	r3, [r7, #4]
   15f1a:	b29b      	uxth	r3, r3
   15f1c:	4808      	ldr	r0, [pc, #32]	; (15f40 <write_spi_flash_frm_buf+0x58>)
   15f1e:	4c10      	ldr	r4, [pc, #64]	; (15f60 <write_spi_flash_frm_buf+0x78>)
   15f20:	47a0      	blx	r4
	//at25dfx_chip_read_buffer(&at25dfx_chip, flash_addr, read_buffer, len);		// read same location
	//at25dfx_chip_read_buffer(&at25dfx_chip, (flash_addr+0x0020), read_buffer, AT25DFX_BUFFER_SIZE);		// read same location
	//at25dfx_chip_set_global_sector_protect(&at25dfx_chip, true);				// protect sector
	at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
   15f22:	4b07      	ldr	r3, [pc, #28]	; (15f40 <write_spi_flash_frm_buf+0x58>)
   15f24:	0018      	movs	r0, r3
   15f26:	4b0f      	ldr	r3, [pc, #60]	; (15f64 <write_spi_flash_frm_buf+0x7c>)
   15f28:	4798      	blx	r3
	flash_addr = flash_addr + len;
   15f2a:	4b0a      	ldr	r3, [pc, #40]	; (15f54 <write_spi_flash_frm_buf+0x6c>)
   15f2c:	681a      	ldr	r2, [r3, #0]
   15f2e:	687b      	ldr	r3, [r7, #4]
   15f30:	18d2      	adds	r2, r2, r3
   15f32:	4b08      	ldr	r3, [pc, #32]	; (15f54 <write_spi_flash_frm_buf+0x6c>)
   15f34:	601a      	str	r2, [r3, #0]
}
   15f36:	46c0      	nop			; (mov r8, r8)
   15f38:	46bd      	mov	sp, r7
   15f3a:	b003      	add	sp, #12
   15f3c:	bd90      	pop	{r4, r7, pc}
   15f3e:	46c0      	nop			; (mov r8, r8)
   15f40:	20000c14 	.word	0x20000c14
   15f44:	00011a09 	.word	0x00011a09
   15f48:	000114c1 	.word	0x000114c1
   15f4c:	000197a0 	.word	0x000197a0
   15f50:	00016ed1 	.word	0x00016ed1
   15f54:	20000410 	.word	0x20000410
   15f58:	20000228 	.word	0x20000228
   15f5c:	20000414 	.word	0x20000414
   15f60:	00011625 	.word	0x00011625
   15f64:	0001197d 	.word	0x0001197d

00015f68 <start_download>:

static void start_download(void)
{
   15f68:	b590      	push	{r4, r7, lr}
   15f6a:	b083      	sub	sp, #12
   15f6c:	af02      	add	r7, sp, #8
	if (!is_state_set(STORAGE_READY)) {
		printf("start_download: Flash not initialized.\r\n");
		return;
	}
	*/
	if (!is_state_set(WIFI_CONNECTED)) {
   15f6e:	2002      	movs	r0, #2
   15f70:	4b18      	ldr	r3, [pc, #96]	; (15fd4 <start_download+0x6c>)
   15f72:	4798      	blx	r3
   15f74:	0003      	movs	r3, r0
   15f76:	001a      	movs	r2, r3
   15f78:	2301      	movs	r3, #1
   15f7a:	4053      	eors	r3, r2
   15f7c:	b2db      	uxtb	r3, r3
   15f7e:	2b00      	cmp	r3, #0
   15f80:	d004      	beq.n	15f8c <start_download+0x24>
		printf("start_download: Wi-Fi is not connected.\r\n");
   15f82:	4b15      	ldr	r3, [pc, #84]	; (15fd8 <start_download+0x70>)
   15f84:	0018      	movs	r0, r3
   15f86:	4b15      	ldr	r3, [pc, #84]	; (15fdc <start_download+0x74>)
   15f88:	4798      	blx	r3
		return;
   15f8a:	e01f      	b.n	15fcc <start_download+0x64>
	}

	if (is_state_set(GET_REQUESTED)) {
   15f8c:	2004      	movs	r0, #4
   15f8e:	4b11      	ldr	r3, [pc, #68]	; (15fd4 <start_download+0x6c>)
   15f90:	4798      	blx	r3
   15f92:	1e03      	subs	r3, r0, #0
   15f94:	d004      	beq.n	15fa0 <start_download+0x38>
		printf("start_download: request is sent already.\r\n");
   15f96:	4b12      	ldr	r3, [pc, #72]	; (15fe0 <start_download+0x78>)
   15f98:	0018      	movs	r0, r3
   15f9a:	4b10      	ldr	r3, [pc, #64]	; (15fdc <start_download+0x74>)
   15f9c:	4798      	blx	r3
		return;
   15f9e:	e015      	b.n	15fcc <start_download+0x64>
	}

	if (is_state_set(DOWNLOADING)) {
   15fa0:	2008      	movs	r0, #8
   15fa2:	4b0c      	ldr	r3, [pc, #48]	; (15fd4 <start_download+0x6c>)
   15fa4:	4798      	blx	r3
   15fa6:	1e03      	subs	r3, r0, #0
   15fa8:	d004      	beq.n	15fb4 <start_download+0x4c>
		printf("start_download: running download already.\r\n");
   15faa:	4b0e      	ldr	r3, [pc, #56]	; (15fe4 <start_download+0x7c>)
   15fac:	0018      	movs	r0, r3
   15fae:	4b0b      	ldr	r3, [pc, #44]	; (15fdc <start_download+0x74>)
   15fb0:	4798      	blx	r3
		return;
   15fb2:	e00b      	b.n	15fcc <start_download+0x64>
	}

	/* Send the HTTP request. */
	printf("start_download: sending HTTP request...\r\n");
   15fb4:	4b0c      	ldr	r3, [pc, #48]	; (15fe8 <start_download+0x80>)
   15fb6:	0018      	movs	r0, r3
   15fb8:	4b08      	ldr	r3, [pc, #32]	; (15fdc <start_download+0x74>)
   15fba:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   15fbc:	490b      	ldr	r1, [pc, #44]	; (15fec <start_download+0x84>)
   15fbe:	480c      	ldr	r0, [pc, #48]	; (15ff0 <start_download+0x88>)
   15fc0:	2300      	movs	r3, #0
   15fc2:	9300      	str	r3, [sp, #0]
   15fc4:	2300      	movs	r3, #0
   15fc6:	2201      	movs	r2, #1
   15fc8:	4c0a      	ldr	r4, [pc, #40]	; (15ff4 <start_download+0x8c>)
   15fca:	47a0      	blx	r4
}
   15fcc:	46bd      	mov	sp, r7
   15fce:	b001      	add	sp, #4
   15fd0:	bd90      	pop	{r4, r7, pc}
   15fd2:	46c0      	nop			; (mov r8, r8)
   15fd4:	00015ebd 	.word	0x00015ebd
   15fd8:	000197b4 	.word	0x000197b4
   15fdc:	00016ed1 	.word	0x00016ed1
   15fe0:	000197e0 	.word	0x000197e0
   15fe4:	0001980c 	.word	0x0001980c
   15fe8:	00019838 	.word	0x00019838
   15fec:	00019864 	.word	0x00019864
   15ff0:	20000c74 	.word	0x20000c74
   15ff4:	0000f3e1 	.word	0x0000f3e1

00015ff8 <http_client_callback>:
	printf("start_download: sending HTTP request...\r\n");
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_CRC_URL, HTTP_METHOD_GET, NULL, NULL);
}

static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   15ff8:	b580      	push	{r7, lr}
   15ffa:	b088      	sub	sp, #32
   15ffc:	af00      	add	r7, sp, #0
   15ffe:	60f8      	str	r0, [r7, #12]
   16000:	60b9      	str	r1, [r7, #8]
   16002:	607a      	str	r2, [r7, #4]
	switch (type) {
   16004:	68bb      	ldr	r3, [r7, #8]
   16006:	2b04      	cmp	r3, #4
   16008:	d900      	bls.n	1600c <http_client_callback+0x14>
   1600a:	e175      	b.n	162f8 <http_client_callback+0x300>
   1600c:	68bb      	ldr	r3, [r7, #8]
   1600e:	009a      	lsls	r2, r3, #2
   16010:	4bbb      	ldr	r3, [pc, #748]	; (16300 <http_client_callback+0x308>)
   16012:	18d3      	adds	r3, r2, r3
   16014:	681b      	ldr	r3, [r3, #0]
   16016:	469f      	mov	pc, r3
	case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
		printf("http_client_callback: HTTP client socket connected.\r\n");
   16018:	4bba      	ldr	r3, [pc, #744]	; (16304 <http_client_callback+0x30c>)
   1601a:	0018      	movs	r0, r3
   1601c:	4bba      	ldr	r3, [pc, #744]	; (16308 <http_client_callback+0x310>)
   1601e:	4798      	blx	r3
		break;
   16020:	e16a      	b.n	162f8 <http_client_callback+0x300>

	case HTTP_CLIENT_CALLBACK_REQUESTED:
		printf("http_client_callback: request completed.\r\n");
   16022:	4bba      	ldr	r3, [pc, #744]	; (1630c <http_client_callback+0x314>)
   16024:	0018      	movs	r0, r3
   16026:	4bb8      	ldr	r3, [pc, #736]	; (16308 <http_client_callback+0x310>)
   16028:	4798      	blx	r3
		add_state(GET_REQUESTED);
   1602a:	2004      	movs	r0, #4
   1602c:	4bb8      	ldr	r3, [pc, #736]	; (16310 <http_client_callback+0x318>)
   1602e:	4798      	blx	r3
		break;
   16030:	e162      	b.n	162f8 <http_client_callback+0x300>

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		printf("http_client_callback: received response %u data size %u\r\n",
				(unsigned int)data->recv_response.response_code,
   16032:	687b      	ldr	r3, [r7, #4]
   16034:	881b      	ldrh	r3, [r3, #0]
		printf("http_client_callback: request completed.\r\n");
		add_state(GET_REQUESTED);
		break;

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		printf("http_client_callback: received response %u data size %u\r\n",
   16036:	0019      	movs	r1, r3
				(unsigned int)data->recv_response.response_code,
				(unsigned int)data->recv_response.content_length);
   16038:	687b      	ldr	r3, [r7, #4]
   1603a:	685a      	ldr	r2, [r3, #4]
		printf("http_client_callback: request completed.\r\n");
		add_state(GET_REQUESTED);
		break;

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		printf("http_client_callback: received response %u data size %u\r\n",
   1603c:	4bb5      	ldr	r3, [pc, #724]	; (16314 <http_client_callback+0x31c>)
   1603e:	0018      	movs	r0, r3
   16040:	4bb5      	ldr	r3, [pc, #724]	; (16318 <http_client_callback+0x320>)
   16042:	4798      	blx	r3
				(unsigned int)data->recv_response.response_code,
				(unsigned int)data->recv_response.content_length);
		if ((unsigned int)data->recv_response.response_code == 200) {
   16044:	687b      	ldr	r3, [r7, #4]
   16046:	881b      	ldrh	r3, [r3, #0]
   16048:	2bc8      	cmp	r3, #200	; 0xc8
   1604a:	d003      	beq.n	16054 <http_client_callback+0x5c>
		} 
		else {
			add_state(CANCELED);
   1604c:	2020      	movs	r0, #32
   1604e:	4bb0      	ldr	r3, [pc, #704]	; (16310 <http_client_callback+0x318>)
   16050:	4798      	blx	r3
			return;
   16052:	e151      	b.n	162f8 <http_client_callback+0x300>
		}
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   16054:	687b      	ldr	r3, [r7, #4]
   16056:	685a      	ldr	r2, [r3, #4]
   16058:	2380      	movs	r3, #128	; 0x80
   1605a:	00db      	lsls	r3, r3, #3
   1605c:	429a      	cmp	r2, r3
   1605e:	d900      	bls.n	16062 <http_client_callback+0x6a>
   16060:	e145      	b.n	162ee <http_client_callback+0x2f6>
			//***store_file_packet(data->recv_response.content, data->recv_response.content_length);
			
			//This is run only when file size < MAIN_BUFFER_MAX_SIZE which we assume never happens!
			
			add_state(COMPLETED);
   16062:	2010      	movs	r0, #16
   16064:	4baa      	ldr	r3, [pc, #680]	; (16310 <http_client_callback+0x318>)
   16066:	4798      	blx	r3
		}
		break;
   16068:	e141      	b.n	162ee <http_client_callback+0x2f6>

	case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
	if (notCRC) {
   1606a:	4bac      	ldr	r3, [pc, #688]	; (1631c <http_client_callback+0x324>)
   1606c:	781b      	ldrb	r3, [r3, #0]
   1606e:	2b00      	cmp	r3, #0
   16070:	d100      	bne.n	16074 <http_client_callback+0x7c>
   16072:	e10c      	b.n	1628e <http_client_callback+0x296>
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
				(unsigned int)data->recv_chunked_data.length);
   16074:	687b      	ldr	r3, [r7, #4]
   16076:	681a      	ldr	r2, [r3, #0]
		}
		break;

	case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
	if (notCRC) {
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
   16078:	4ba9      	ldr	r3, [pc, #676]	; (16320 <http_client_callback+0x328>)
   1607a:	0011      	movs	r1, r2
   1607c:	0018      	movs	r0, r3
   1607e:	4ba6      	ldr	r3, [pc, #664]	; (16318 <http_client_callback+0x320>)
   16080:	4798      	blx	r3
				(unsigned int)data->recv_chunked_data.length);
		// Calc CRC for this chunk
		if (firstCRC) {
   16082:	4ba8      	ldr	r3, [pc, #672]	; (16324 <http_client_callback+0x32c>)
   16084:	781b      	ldrb	r3, [r3, #0]
   16086:	2b00      	cmp	r3, #0
   16088:	d013      	beq.n	160b2 <http_client_callback+0xba>
			crc32_calculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
   1608a:	687b      	ldr	r3, [r7, #4]
   1608c:	6858      	ldr	r0, [r3, #4]
   1608e:	687b      	ldr	r3, [r7, #4]
   16090:	681b      	ldr	r3, [r3, #0]
   16092:	4aa5      	ldr	r2, [pc, #660]	; (16328 <http_client_callback+0x330>)
   16094:	0019      	movs	r1, r3
   16096:	4ba5      	ldr	r3, [pc, #660]	; (1632c <http_client_callback+0x334>)
   16098:	4798      	blx	r3
			printf("First block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
   1609a:	687b      	ldr	r3, [r7, #4]
   1609c:	6819      	ldr	r1, [r3, #0]
   1609e:	4ba2      	ldr	r3, [pc, #648]	; (16328 <http_client_callback+0x330>)
   160a0:	681a      	ldr	r2, [r3, #0]
   160a2:	4ba3      	ldr	r3, [pc, #652]	; (16330 <http_client_callback+0x338>)
   160a4:	0018      	movs	r0, r3
   160a6:	4b9c      	ldr	r3, [pc, #624]	; (16318 <http_client_callback+0x320>)
   160a8:	4798      	blx	r3
			firstCRC = false;
   160aa:	4b9e      	ldr	r3, [pc, #632]	; (16324 <http_client_callback+0x32c>)
   160ac:	2200      	movs	r2, #0
   160ae:	701a      	strb	r2, [r3, #0]
   160b0:	e00f      	b.n	160d2 <http_client_callback+0xda>
		}
		else {
			crc32_recalculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
   160b2:	687b      	ldr	r3, [r7, #4]
   160b4:	6858      	ldr	r0, [r3, #4]
   160b6:	687b      	ldr	r3, [r7, #4]
   160b8:	681b      	ldr	r3, [r3, #0]
   160ba:	4a9b      	ldr	r2, [pc, #620]	; (16328 <http_client_callback+0x330>)
   160bc:	0019      	movs	r1, r3
   160be:	4b9d      	ldr	r3, [pc, #628]	; (16334 <http_client_callback+0x33c>)
   160c0:	4798      	blx	r3
			printf("Block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
   160c2:	687b      	ldr	r3, [r7, #4]
   160c4:	6819      	ldr	r1, [r3, #0]
   160c6:	4b98      	ldr	r3, [pc, #608]	; (16328 <http_client_callback+0x330>)
   160c8:	681a      	ldr	r2, [r3, #0]
   160ca:	4b9b      	ldr	r3, [pc, #620]	; (16338 <http_client_callback+0x340>)
   160cc:	0018      	movs	r0, r3
   160ce:	4b92      	ldr	r3, [pc, #584]	; (16318 <http_client_callback+0x320>)
   160d0:	4798      	blx	r3
		}
		
		//***store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
		if (http_buf_write_ptr + data->recv_chunked_data.length > 2048){
   160d2:	687b      	ldr	r3, [r7, #4]
   160d4:	681a      	ldr	r2, [r3, #0]
   160d6:	4b99      	ldr	r3, [pc, #612]	; (1633c <http_client_callback+0x344>)
   160d8:	681b      	ldr	r3, [r3, #0]
   160da:	18d2      	adds	r2, r2, r3
   160dc:	2380      	movs	r3, #128	; 0x80
   160de:	011b      	lsls	r3, r3, #4
   160e0:	429a      	cmp	r2, r3
   160e2:	d92a      	bls.n	1613a <http_client_callback+0x142>
			memcpy_ram2ram(http_buf + http_buf_write_ptr,data->recv_chunked_data.data,(2048-http_buf_write_ptr));
   160e4:	4b95      	ldr	r3, [pc, #596]	; (1633c <http_client_callback+0x344>)
   160e6:	681a      	ldr	r2, [r3, #0]
   160e8:	4b95      	ldr	r3, [pc, #596]	; (16340 <http_client_callback+0x348>)
   160ea:	18d0      	adds	r0, r2, r3
   160ec:	687b      	ldr	r3, [r7, #4]
   160ee:	6859      	ldr	r1, [r3, #4]
   160f0:	4b92      	ldr	r3, [pc, #584]	; (1633c <http_client_callback+0x344>)
   160f2:	681b      	ldr	r3, [r3, #0]
   160f4:	2280      	movs	r2, #128	; 0x80
   160f6:	0112      	lsls	r2, r2, #4
   160f8:	1ad3      	subs	r3, r2, r3
   160fa:	001a      	movs	r2, r3
   160fc:	4b91      	ldr	r3, [pc, #580]	; (16344 <http_client_callback+0x34c>)
   160fe:	4798      	blx	r3
			memcpy_ram2ram(http_buf, data->recv_chunked_data.data + (2048-http_buf_write_ptr), data->recv_chunked_data.length-(2048-http_buf_write_ptr));
   16100:	687b      	ldr	r3, [r7, #4]
   16102:	685a      	ldr	r2, [r3, #4]
   16104:	4b8d      	ldr	r3, [pc, #564]	; (1633c <http_client_callback+0x344>)
   16106:	681b      	ldr	r3, [r3, #0]
   16108:	2180      	movs	r1, #128	; 0x80
   1610a:	0109      	lsls	r1, r1, #4
   1610c:	1acb      	subs	r3, r1, r3
   1610e:	18d1      	adds	r1, r2, r3
   16110:	687b      	ldr	r3, [r7, #4]
   16112:	681a      	ldr	r2, [r3, #0]
   16114:	4b89      	ldr	r3, [pc, #548]	; (1633c <http_client_callback+0x344>)
   16116:	681b      	ldr	r3, [r3, #0]
   16118:	18d3      	adds	r3, r2, r3
   1611a:	4a8b      	ldr	r2, [pc, #556]	; (16348 <http_client_callback+0x350>)
   1611c:	189a      	adds	r2, r3, r2
   1611e:	4b88      	ldr	r3, [pc, #544]	; (16340 <http_client_callback+0x348>)
   16120:	0018      	movs	r0, r3
   16122:	4b88      	ldr	r3, [pc, #544]	; (16344 <http_client_callback+0x34c>)
   16124:	4798      	blx	r3
			http_buf_write_ptr = data->recv_chunked_data.length-(2048-http_buf_write_ptr);
   16126:	687b      	ldr	r3, [r7, #4]
   16128:	681a      	ldr	r2, [r3, #0]
   1612a:	4b84      	ldr	r3, [pc, #528]	; (1633c <http_client_callback+0x344>)
   1612c:	681b      	ldr	r3, [r3, #0]
   1612e:	18d3      	adds	r3, r2, r3
   16130:	4a85      	ldr	r2, [pc, #532]	; (16348 <http_client_callback+0x350>)
   16132:	189a      	adds	r2, r3, r2
   16134:	4b81      	ldr	r3, [pc, #516]	; (1633c <http_client_callback+0x344>)
   16136:	601a      	str	r2, [r3, #0]
   16138:	e011      	b.n	1615e <http_client_callback+0x166>
		}
		else {
			memcpy_ram2ram(http_buf + http_buf_write_ptr, data->recv_chunked_data.data, data->recv_chunked_data.length);
   1613a:	4b80      	ldr	r3, [pc, #512]	; (1633c <http_client_callback+0x344>)
   1613c:	681a      	ldr	r2, [r3, #0]
   1613e:	4b80      	ldr	r3, [pc, #512]	; (16340 <http_client_callback+0x348>)
   16140:	18d0      	adds	r0, r2, r3
   16142:	687b      	ldr	r3, [r7, #4]
   16144:	6859      	ldr	r1, [r3, #4]
   16146:	687b      	ldr	r3, [r7, #4]
   16148:	681b      	ldr	r3, [r3, #0]
   1614a:	001a      	movs	r2, r3
   1614c:	4b7d      	ldr	r3, [pc, #500]	; (16344 <http_client_callback+0x34c>)
   1614e:	4798      	blx	r3
			http_buf_write_ptr = http_buf_write_ptr + data->recv_chunked_data.length;
   16150:	687b      	ldr	r3, [r7, #4]
   16152:	681a      	ldr	r2, [r3, #0]
   16154:	4b79      	ldr	r3, [pc, #484]	; (1633c <http_client_callback+0x344>)
   16156:	681b      	ldr	r3, [r3, #0]
   16158:	18d2      	adds	r2, r2, r3
   1615a:	4b78      	ldr	r3, [pc, #480]	; (1633c <http_client_callback+0x344>)
   1615c:	601a      	str	r2, [r3, #0]
		}
		 
		if  (http_buf_write_ptr > http_buf_read_ptr){
   1615e:	4b77      	ldr	r3, [pc, #476]	; (1633c <http_client_callback+0x344>)
   16160:	681a      	ldr	r2, [r3, #0]
   16162:	4b7a      	ldr	r3, [pc, #488]	; (1634c <http_client_callback+0x354>)
   16164:	681b      	ldr	r3, [r3, #0]
   16166:	429a      	cmp	r2, r3
   16168:	d920      	bls.n	161ac <http_client_callback+0x1b4>
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
   1616a:	4b74      	ldr	r3, [pc, #464]	; (1633c <http_client_callback+0x344>)
   1616c:	681a      	ldr	r2, [r3, #0]
   1616e:	4b77      	ldr	r3, [pc, #476]	; (1634c <http_client_callback+0x354>)
   16170:	681b      	ldr	r3, [r3, #0]
   16172:	1ad3      	subs	r3, r2, r3
   16174:	0a1a      	lsrs	r2, r3, #8
   16176:	2313      	movs	r3, #19
   16178:	18fb      	adds	r3, r7, r3
   1617a:	701a      	strb	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   1617c:	2300      	movs	r3, #0
   1617e:	61fb      	str	r3, [r7, #28]
   16180:	e00d      	b.n	1619e <http_client_callback+0x1a6>
				write_spi_flash_frm_buf(256);
   16182:	2380      	movs	r3, #128	; 0x80
   16184:	005b      	lsls	r3, r3, #1
   16186:	0018      	movs	r0, r3
   16188:	4b71      	ldr	r3, [pc, #452]	; (16350 <http_client_callback+0x358>)
   1618a:	4798      	blx	r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
   1618c:	4b6f      	ldr	r3, [pc, #444]	; (1634c <http_client_callback+0x354>)
   1618e:	681b      	ldr	r3, [r3, #0]
   16190:	1c5a      	adds	r2, r3, #1
   16192:	32ff      	adds	r2, #255	; 0xff
   16194:	4b6d      	ldr	r3, [pc, #436]	; (1634c <http_client_callback+0x354>)
   16196:	601a      	str	r2, [r3, #0]
			http_buf_write_ptr = http_buf_write_ptr + data->recv_chunked_data.length;
		}
		 
		if  (http_buf_write_ptr > http_buf_read_ptr){
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
   16198:	69fb      	ldr	r3, [r7, #28]
   1619a:	3301      	adds	r3, #1
   1619c:	61fb      	str	r3, [r7, #28]
   1619e:	2313      	movs	r3, #19
   161a0:	18fb      	adds	r3, r7, r3
   161a2:	781a      	ldrb	r2, [r3, #0]
   161a4:	69fb      	ldr	r3, [r7, #28]
   161a6:	429a      	cmp	r2, r3
   161a8:	dceb      	bgt.n	16182 <http_client_callback+0x18a>
   161aa:	e048      	b.n	1623e <http_client_callback+0x246>
				write_spi_flash_frm_buf(256);
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
		}
		else if (http_buf_write_ptr < http_buf_read_ptr){
   161ac:	4b63      	ldr	r3, [pc, #396]	; (1633c <http_client_callback+0x344>)
   161ae:	681a      	ldr	r2, [r3, #0]
   161b0:	4b66      	ldr	r3, [pc, #408]	; (1634c <http_client_callback+0x354>)
   161b2:	681b      	ldr	r3, [r3, #0]
   161b4:	429a      	cmp	r2, r3
   161b6:	d242      	bcs.n	1623e <http_client_callback+0x246>
			uint8 n = (2048 - http_buf_read_ptr) / 256;
   161b8:	4b64      	ldr	r3, [pc, #400]	; (1634c <http_client_callback+0x354>)
   161ba:	681b      	ldr	r3, [r3, #0]
   161bc:	2280      	movs	r2, #128	; 0x80
   161be:	0112      	lsls	r2, r2, #4
   161c0:	1ad3      	subs	r3, r2, r3
   161c2:	0a1a      	lsrs	r2, r3, #8
   161c4:	2312      	movs	r3, #18
   161c6:	18fb      	adds	r3, r7, r3
   161c8:	701a      	strb	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   161ca:	2300      	movs	r3, #0
   161cc:	61bb      	str	r3, [r7, #24]
   161ce:	e00d      	b.n	161ec <http_client_callback+0x1f4>
				write_spi_flash_frm_buf(256);
   161d0:	2380      	movs	r3, #128	; 0x80
   161d2:	005b      	lsls	r3, r3, #1
   161d4:	0018      	movs	r0, r3
   161d6:	4b5e      	ldr	r3, [pc, #376]	; (16350 <http_client_callback+0x358>)
   161d8:	4798      	blx	r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
   161da:	4b5c      	ldr	r3, [pc, #368]	; (1634c <http_client_callback+0x354>)
   161dc:	681b      	ldr	r3, [r3, #0]
   161de:	1c5a      	adds	r2, r3, #1
   161e0:	32ff      	adds	r2, #255	; 0xff
   161e2:	4b5a      	ldr	r3, [pc, #360]	; (1634c <http_client_callback+0x354>)
   161e4:	601a      	str	r2, [r3, #0]
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
		}
		else if (http_buf_write_ptr < http_buf_read_ptr){
			uint8 n = (2048 - http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
   161e6:	69bb      	ldr	r3, [r7, #24]
   161e8:	3301      	adds	r3, #1
   161ea:	61bb      	str	r3, [r7, #24]
   161ec:	2312      	movs	r3, #18
   161ee:	18fb      	adds	r3, r7, r3
   161f0:	781a      	ldrb	r2, [r3, #0]
   161f2:	69bb      	ldr	r3, [r7, #24]
   161f4:	429a      	cmp	r2, r3
   161f6:	dceb      	bgt.n	161d0 <http_client_callback+0x1d8>
				write_spi_flash_frm_buf(256);
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
			http_buf_read_ptr = 0;
   161f8:	4b54      	ldr	r3, [pc, #336]	; (1634c <http_client_callback+0x354>)
   161fa:	2200      	movs	r2, #0
   161fc:	601a      	str	r2, [r3, #0]
			n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
   161fe:	4b4f      	ldr	r3, [pc, #316]	; (1633c <http_client_callback+0x344>)
   16200:	681a      	ldr	r2, [r3, #0]
   16202:	4b52      	ldr	r3, [pc, #328]	; (1634c <http_client_callback+0x354>)
   16204:	681b      	ldr	r3, [r3, #0]
   16206:	1ad3      	subs	r3, r2, r3
   16208:	0a1a      	lsrs	r2, r3, #8
   1620a:	2312      	movs	r3, #18
   1620c:	18fb      	adds	r3, r7, r3
   1620e:	701a      	strb	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
   16210:	2300      	movs	r3, #0
   16212:	617b      	str	r3, [r7, #20]
   16214:	e00d      	b.n	16232 <http_client_callback+0x23a>
				write_spi_flash_frm_buf(256);
   16216:	2380      	movs	r3, #128	; 0x80
   16218:	005b      	lsls	r3, r3, #1
   1621a:	0018      	movs	r0, r3
   1621c:	4b4c      	ldr	r3, [pc, #304]	; (16350 <http_client_callback+0x358>)
   1621e:	4798      	blx	r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
   16220:	4b4a      	ldr	r3, [pc, #296]	; (1634c <http_client_callback+0x354>)
   16222:	681b      	ldr	r3, [r3, #0]
   16224:	1c5a      	adds	r2, r3, #1
   16226:	32ff      	adds	r2, #255	; 0xff
   16228:	4b48      	ldr	r3, [pc, #288]	; (1634c <http_client_callback+0x354>)
   1622a:	601a      	str	r2, [r3, #0]
				write_spi_flash_frm_buf(256);
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
			http_buf_read_ptr = 0;
			n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
			for (int i=0 ; i<n ; i++ ){
   1622c:	697b      	ldr	r3, [r7, #20]
   1622e:	3301      	adds	r3, #1
   16230:	617b      	str	r3, [r7, #20]
   16232:	2312      	movs	r3, #18
   16234:	18fb      	adds	r3, r7, r3
   16236:	781a      	ldrb	r2, [r3, #0]
   16238:	697b      	ldr	r3, [r7, #20]
   1623a:	429a      	cmp	r2, r3
   1623c:	dceb      	bgt.n	16216 <http_client_callback+0x21e>
				http_buf_read_ptr = http_buf_read_ptr + 256;
			}
		}
		
		
		if (data->recv_chunked_data.is_complete) {
   1623e:	687b      	ldr	r3, [r7, #4]
   16240:	7a1b      	ldrb	r3, [r3, #8]
   16242:	2b00      	cmp	r3, #0
   16244:	d055      	beq.n	162f2 <http_client_callback+0x2fa>
			add_state(COMPLETED);
   16246:	2010      	movs	r0, #16
   16248:	4b31      	ldr	r3, [pc, #196]	; (16310 <http_client_callback+0x318>)
   1624a:	4798      	blx	r3
			if  (http_buf_write_ptr < http_buf_read_ptr){
   1624c:	4b3b      	ldr	r3, [pc, #236]	; (1633c <http_client_callback+0x344>)
   1624e:	681a      	ldr	r2, [r3, #0]
   16250:	4b3e      	ldr	r3, [pc, #248]	; (1634c <http_client_callback+0x354>)
   16252:	681b      	ldr	r3, [r3, #0]
   16254:	429a      	cmp	r2, r3
   16256:	d20b      	bcs.n	16270 <http_client_callback+0x278>
				http_buf_read_ptr =0;
   16258:	4b3c      	ldr	r3, [pc, #240]	; (1634c <http_client_callback+0x354>)
   1625a:	2200      	movs	r2, #0
   1625c:	601a      	str	r2, [r3, #0]
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
   1625e:	4b37      	ldr	r3, [pc, #220]	; (1633c <http_client_callback+0x344>)
   16260:	681a      	ldr	r2, [r3, #0]
   16262:	4b3a      	ldr	r3, [pc, #232]	; (1634c <http_client_callback+0x354>)
   16264:	681b      	ldr	r3, [r3, #0]
   16266:	1ad3      	subs	r3, r2, r3
   16268:	0018      	movs	r0, r3
   1626a:	4b39      	ldr	r3, [pc, #228]	; (16350 <http_client_callback+0x358>)
   1626c:	4798      	blx	r3
	else {
		printf("Callback: CRC download chunked data\r\n");
		dlCRC = data->recv_chunked_data.data;
		printf("Received %lu\r\n", (unsigned long)dlCRC);
	}
		break;
   1626e:	e040      	b.n	162f2 <http_client_callback+0x2fa>
			add_state(COMPLETED);
			if  (http_buf_write_ptr < http_buf_read_ptr){
				http_buf_read_ptr =0;
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
			}
			else if(http_buf_write_ptr > http_buf_read_ptr){
   16270:	4b32      	ldr	r3, [pc, #200]	; (1633c <http_client_callback+0x344>)
   16272:	681a      	ldr	r2, [r3, #0]
   16274:	4b35      	ldr	r3, [pc, #212]	; (1634c <http_client_callback+0x354>)
   16276:	681b      	ldr	r3, [r3, #0]
   16278:	429a      	cmp	r2, r3
   1627a:	d93a      	bls.n	162f2 <http_client_callback+0x2fa>
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
   1627c:	4b2f      	ldr	r3, [pc, #188]	; (1633c <http_client_callback+0x344>)
   1627e:	681a      	ldr	r2, [r3, #0]
   16280:	4b32      	ldr	r3, [pc, #200]	; (1634c <http_client_callback+0x354>)
   16282:	681b      	ldr	r3, [r3, #0]
   16284:	1ad3      	subs	r3, r2, r3
   16286:	0018      	movs	r0, r3
   16288:	4b31      	ldr	r3, [pc, #196]	; (16350 <http_client_callback+0x358>)
   1628a:	4798      	blx	r3
	else {
		printf("Callback: CRC download chunked data\r\n");
		dlCRC = data->recv_chunked_data.data;
		printf("Received %lu\r\n", (unsigned long)dlCRC);
	}
		break;
   1628c:	e031      	b.n	162f2 <http_client_callback+0x2fa>
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
			}
		}
	}
	else {
		printf("Callback: CRC download chunked data\r\n");
   1628e:	4b31      	ldr	r3, [pc, #196]	; (16354 <http_client_callback+0x35c>)
   16290:	0018      	movs	r0, r3
   16292:	4b1d      	ldr	r3, [pc, #116]	; (16308 <http_client_callback+0x310>)
   16294:	4798      	blx	r3
		dlCRC = data->recv_chunked_data.data;
   16296:	687b      	ldr	r3, [r7, #4]
   16298:	685b      	ldr	r3, [r3, #4]
   1629a:	001a      	movs	r2, r3
   1629c:	4b2e      	ldr	r3, [pc, #184]	; (16358 <http_client_callback+0x360>)
   1629e:	601a      	str	r2, [r3, #0]
		printf("Received %lu\r\n", (unsigned long)dlCRC);
   162a0:	4b2d      	ldr	r3, [pc, #180]	; (16358 <http_client_callback+0x360>)
   162a2:	681a      	ldr	r2, [r3, #0]
   162a4:	4b2d      	ldr	r3, [pc, #180]	; (1635c <http_client_callback+0x364>)
   162a6:	0011      	movs	r1, r2
   162a8:	0018      	movs	r0, r3
   162aa:	4b1b      	ldr	r3, [pc, #108]	; (16318 <http_client_callback+0x320>)
   162ac:	4798      	blx	r3
	}
		break;
   162ae:	e020      	b.n	162f2 <http_client_callback+0x2fa>

	case HTTP_CLIENT_CALLBACK_DISCONNECTED:
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   162b0:	687b      	ldr	r3, [r7, #4]
   162b2:	681a      	ldr	r2, [r3, #0]
   162b4:	4b2a      	ldr	r3, [pc, #168]	; (16360 <http_client_callback+0x368>)
   162b6:	0011      	movs	r1, r2
   162b8:	0018      	movs	r0, r3
   162ba:	4b17      	ldr	r3, [pc, #92]	; (16318 <http_client_callback+0x320>)
   162bc:	4798      	blx	r3

		/* If disconnect reason is equal to -ECONNRESET(-104),
		 * It means the server has closed the connection (timeout).
		 * This is normal operation.
		 */
		if (data->disconnected.reason == -EAGAIN) {
   162be:	687b      	ldr	r3, [r7, #4]
   162c0:	681b      	ldr	r3, [r3, #0]
   162c2:	330b      	adds	r3, #11
   162c4:	d117      	bne.n	162f6 <http_client_callback+0x2fe>
			/* Server has not responded. Retry immediately. */
			if (is_state_set(DOWNLOADING)) {
   162c6:	2008      	movs	r0, #8
   162c8:	4b26      	ldr	r3, [pc, #152]	; (16364 <http_client_callback+0x36c>)
   162ca:	4798      	blx	r3
   162cc:	1e03      	subs	r3, r0, #0
   162ce:	d002      	beq.n	162d6 <http_client_callback+0x2de>
				//f_close(&file_object);
				clear_state(DOWNLOADING);
   162d0:	2008      	movs	r0, #8
   162d2:	4b25      	ldr	r3, [pc, #148]	; (16368 <http_client_callback+0x370>)
   162d4:	4798      	blx	r3
			}

			if (is_state_set(GET_REQUESTED)) {
   162d6:	2004      	movs	r0, #4
   162d8:	4b22      	ldr	r3, [pc, #136]	; (16364 <http_client_callback+0x36c>)
   162da:	4798      	blx	r3
   162dc:	1e03      	subs	r3, r0, #0
   162de:	d002      	beq.n	162e6 <http_client_callback+0x2ee>
				clear_state(GET_REQUESTED);
   162e0:	2004      	movs	r0, #4
   162e2:	4b21      	ldr	r3, [pc, #132]	; (16368 <http_client_callback+0x370>)
   162e4:	4798      	blx	r3
			}

			start_download();
   162e6:	4b21      	ldr	r3, [pc, #132]	; (1636c <http_client_callback+0x374>)
   162e8:	4798      	blx	r3
		}

		break;
   162ea:	46c0      	nop			; (mov r8, r8)
   162ec:	e003      	b.n	162f6 <http_client_callback+0x2fe>
			
			//This is run only when file size < MAIN_BUFFER_MAX_SIZE which we assume never happens!
			
			add_state(COMPLETED);
		}
		break;
   162ee:	46c0      	nop			; (mov r8, r8)
   162f0:	e002      	b.n	162f8 <http_client_callback+0x300>
	else {
		printf("Callback: CRC download chunked data\r\n");
		dlCRC = data->recv_chunked_data.data;
		printf("Received %lu\r\n", (unsigned long)dlCRC);
	}
		break;
   162f2:	46c0      	nop			; (mov r8, r8)
   162f4:	e000      	b.n	162f8 <http_client_callback+0x300>
			}

			start_download();
		}

		break;
   162f6:	46c0      	nop			; (mov r8, r8)
	}
}
   162f8:	46bd      	mov	sp, r7
   162fa:	b008      	add	sp, #32
   162fc:	bd80      	pop	{r7, pc}
   162fe:	46c0      	nop			; (mov r8, r8)
   16300:	00019c3c 	.word	0x00019c3c
   16304:	000198d0 	.word	0x000198d0
   16308:	00016ed1 	.word	0x00016ed1
   1630c:	00019908 	.word	0x00019908
   16310:	00015e95 	.word	0x00015e95
   16314:	00019934 	.word	0x00019934
   16318:	00016db1 	.word	0x00016db1
   1631c:	20000019 	.word	0x20000019
   16320:	00019970 	.word	0x00019970
   16324:	20000018 	.word	0x20000018
   16328:	20000d98 	.word	0x20000d98
   1632c:	0001553d 	.word	0x0001553d
   16330:	000199b4 	.word	0x000199b4
   16334:	0000dab5 	.word	0x0000dab5
   16338:	000199d4 	.word	0x000199d4
   1633c:	20000224 	.word	0x20000224
   16340:	20000414 	.word	0x20000414
   16344:	00016c2d 	.word	0x00016c2d
   16348:	fffff800 	.word	0xfffff800
   1634c:	20000228 	.word	0x20000228
   16350:	00015ee9 	.word	0x00015ee9
   16354:	000199f0 	.word	0x000199f0
   16358:	20000d9c 	.word	0x20000d9c
   1635c:	00019a18 	.word	0x00019a18
   16360:	00019a28 	.word	0x00019a28
   16364:	00015ebd 	.word	0x00015ebd
   16368:	00015e61 	.word	0x00015e61
   1636c:	00015f69 	.word	0x00015f69

00016370 <socket_cb>:

static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   16370:	b580      	push	{r7, lr}
   16372:	b082      	sub	sp, #8
   16374:	af00      	add	r7, sp, #0
   16376:	603a      	str	r2, [r7, #0]
   16378:	1dfb      	adds	r3, r7, #7
   1637a:	1c02      	adds	r2, r0, #0
   1637c:	701a      	strb	r2, [r3, #0]
   1637e:	1dbb      	adds	r3, r7, #6
   16380:	1c0a      	adds	r2, r1, #0
   16382:	701a      	strb	r2, [r3, #0]
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   16384:	683a      	ldr	r2, [r7, #0]
   16386:	1dbb      	adds	r3, r7, #6
   16388:	7819      	ldrb	r1, [r3, #0]
   1638a:	1dfb      	adds	r3, r7, #7
   1638c:	781b      	ldrb	r3, [r3, #0]
   1638e:	b25b      	sxtb	r3, r3
   16390:	0018      	movs	r0, r3
   16392:	4b03      	ldr	r3, [pc, #12]	; (163a0 <socket_cb+0x30>)
   16394:	4798      	blx	r3
}
   16396:	46c0      	nop			; (mov r8, r8)
   16398:	46bd      	mov	sp, r7
   1639a:	b002      	add	sp, #8
   1639c:	bd80      	pop	{r7, pc}
   1639e:	46c0      	nop			; (mov r8, r8)
   163a0:	0000f0f1 	.word	0x0000f0f1

000163a4 <resolve_cb>:

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   163a4:	b5b0      	push	{r4, r5, r7, lr}
   163a6:	b084      	sub	sp, #16
   163a8:	af02      	add	r7, sp, #8
   163aa:	6078      	str	r0, [r7, #4]
   163ac:	6039      	str	r1, [r7, #0]
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   163ae:	683b      	ldr	r3, [r7, #0]
   163b0:	22ff      	movs	r2, #255	; 0xff
   163b2:	4013      	ands	r3, r2
   163b4:	001c      	movs	r4, r3
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   163b6:	683b      	ldr	r3, [r7, #0]
   163b8:	0a1b      	lsrs	r3, r3, #8
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   163ba:	001a      	movs	r2, r3
   163bc:	23ff      	movs	r3, #255	; 0xff
   163be:	401a      	ands	r2, r3
   163c0:	0015      	movs	r5, r2
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   163c2:	683b      	ldr	r3, [r7, #0]
   163c4:	0c1b      	lsrs	r3, r3, #16
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   163c6:	001a      	movs	r2, r3
   163c8:	23ff      	movs	r3, #255	; 0xff
   163ca:	4013      	ands	r3, r2
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   163cc:	683a      	ldr	r2, [r7, #0]
   163ce:	0e12      	lsrs	r2, r2, #24
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   163d0:	6879      	ldr	r1, [r7, #4]
   163d2:	4808      	ldr	r0, [pc, #32]	; (163f4 <resolve_cb+0x50>)
   163d4:	9201      	str	r2, [sp, #4]
   163d6:	9300      	str	r3, [sp, #0]
   163d8:	002b      	movs	r3, r5
   163da:	0022      	movs	r2, r4
   163dc:	4c06      	ldr	r4, [pc, #24]	; (163f8 <resolve_cb+0x54>)
   163de:	47a0      	blx	r4
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   163e0:	683a      	ldr	r2, [r7, #0]
   163e2:	687b      	ldr	r3, [r7, #4]
   163e4:	0011      	movs	r1, r2
   163e6:	0018      	movs	r0, r3
   163e8:	4b04      	ldr	r3, [pc, #16]	; (163fc <resolve_cb+0x58>)
   163ea:	4798      	blx	r3
}
   163ec:	46c0      	nop			; (mov r8, r8)
   163ee:	46bd      	mov	sp, r7
   163f0:	b002      	add	sp, #8
   163f2:	bdb0      	pop	{r4, r5, r7, pc}
   163f4:	00019a58 	.word	0x00019a58
   163f8:	00016db1 	.word	0x00016db1
   163fc:	0000f255 	.word	0x0000f255

00016400 <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   16400:	b590      	push	{r4, r7, lr}
   16402:	b087      	sub	sp, #28
   16404:	af02      	add	r7, sp, #8
   16406:	0002      	movs	r2, r0
   16408:	6039      	str	r1, [r7, #0]
   1640a:	1dfb      	adds	r3, r7, #7
   1640c:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
   1640e:	1dfb      	adds	r3, r7, #7
   16410:	781b      	ldrb	r3, [r3, #0]
   16412:	2b2c      	cmp	r3, #44	; 0x2c
   16414:	d002      	beq.n	1641c <wifi_cb+0x1c>
   16416:	2b32      	cmp	r3, #50	; 0x32
   16418:	d032      	beq.n	16480 <wifi_cb+0x80>
			add_state(WIFI_CONNECTED);
			start_download();
		}

		default:
		break;
   1641a:	e04d      	b.n	164b8 <wifi_cb+0xb8>
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
		case M2M_WIFI_RESP_CON_STATE_CHANGED:
		{
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   1641c:	683b      	ldr	r3, [r7, #0]
   1641e:	60fb      	str	r3, [r7, #12]
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16420:	68fb      	ldr	r3, [r7, #12]
   16422:	781b      	ldrb	r3, [r3, #0]
   16424:	2b01      	cmp	r3, #1
   16426:	d106      	bne.n	16436 <wifi_cb+0x36>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16428:	4b25      	ldr	r3, [pc, #148]	; (164c0 <wifi_cb+0xc0>)
   1642a:	0018      	movs	r0, r3
   1642c:	4b25      	ldr	r3, [pc, #148]	; (164c4 <wifi_cb+0xc4>)
   1642e:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
   16430:	4b25      	ldr	r3, [pc, #148]	; (164c8 <wifi_cb+0xc8>)
   16432:	4798      	blx	r3

				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
				MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}

			break;
   16434:	e03f      	b.n	164b6 <wifi_cb+0xb6>
		{
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
				m2m_wifi_request_dhcp_client();
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   16436:	68fb      	ldr	r3, [r7, #12]
   16438:	781b      	ldrb	r3, [r3, #0]
   1643a:	2b00      	cmp	r3, #0
   1643c:	d13b      	bne.n	164b6 <wifi_cb+0xb6>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   1643e:	4b23      	ldr	r3, [pc, #140]	; (164cc <wifi_cb+0xcc>)
   16440:	0018      	movs	r0, r3
   16442:	4b20      	ldr	r3, [pc, #128]	; (164c4 <wifi_cb+0xc4>)
   16444:	4798      	blx	r3
				clear_state(WIFI_CONNECTED);
   16446:	2002      	movs	r0, #2
   16448:	4b21      	ldr	r3, [pc, #132]	; (164d0 <wifi_cb+0xd0>)
   1644a:	4798      	blx	r3
				if (is_state_set(DOWNLOADING)) {
   1644c:	2008      	movs	r0, #8
   1644e:	4b21      	ldr	r3, [pc, #132]	; (164d4 <wifi_cb+0xd4>)
   16450:	4798      	blx	r3
   16452:	1e03      	subs	r3, r0, #0
   16454:	d002      	beq.n	1645c <wifi_cb+0x5c>
					clear_state(DOWNLOADING);
   16456:	2008      	movs	r0, #8
   16458:	4b1d      	ldr	r3, [pc, #116]	; (164d0 <wifi_cb+0xd0>)
   1645a:	4798      	blx	r3
				}

				if (is_state_set(GET_REQUESTED)) {
   1645c:	2004      	movs	r0, #4
   1645e:	4b1d      	ldr	r3, [pc, #116]	; (164d4 <wifi_cb+0xd4>)
   16460:	4798      	blx	r3
   16462:	1e03      	subs	r3, r0, #0
   16464:	d002      	beq.n	1646c <wifi_cb+0x6c>
					clear_state(GET_REQUESTED);
   16466:	2004      	movs	r0, #4
   16468:	4b19      	ldr	r3, [pc, #100]	; (164d0 <wifi_cb+0xd0>)
   1646a:	4798      	blx	r3
				}

				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   1646c:	4a1a      	ldr	r2, [pc, #104]	; (164d8 <wifi_cb+0xd8>)
   1646e:	481b      	ldr	r0, [pc, #108]	; (164dc <wifi_cb+0xdc>)
   16470:	23ff      	movs	r3, #255	; 0xff
   16472:	9300      	str	r3, [sp, #0]
   16474:	0013      	movs	r3, r2
   16476:	2202      	movs	r2, #2
   16478:	2116      	movs	r1, #22
   1647a:	4c19      	ldr	r4, [pc, #100]	; (164e0 <wifi_cb+0xe0>)
   1647c:	47a0      	blx	r4
				MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}

			break;
   1647e:	e01a      	b.n	164b6 <wifi_cb+0xb6>
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   16480:	683b      	ldr	r3, [r7, #0]
   16482:	60bb      	str	r3, [r7, #8]
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16484:	68bb      	ldr	r3, [r7, #8]
   16486:	781b      	ldrb	r3, [r3, #0]
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16488:	0019      	movs	r1, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   1648a:	68bb      	ldr	r3, [r7, #8]
   1648c:	3301      	adds	r3, #1
   1648e:	781b      	ldrb	r3, [r3, #0]
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16490:	001a      	movs	r2, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16492:	68bb      	ldr	r3, [r7, #8]
   16494:	3302      	adds	r3, #2
   16496:	781b      	ldrb	r3, [r3, #0]
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16498:	001c      	movs	r4, r3
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   1649a:	68bb      	ldr	r3, [r7, #8]
   1649c:	3303      	adds	r3, #3
   1649e:	781b      	ldrb	r3, [r3, #0]
		}

		case M2M_WIFI_REQ_DHCP_CONF:
		{
			uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   164a0:	4810      	ldr	r0, [pc, #64]	; (164e4 <wifi_cb+0xe4>)
   164a2:	9300      	str	r3, [sp, #0]
   164a4:	0023      	movs	r3, r4
   164a6:	4c10      	ldr	r4, [pc, #64]	; (164e8 <wifi_cb+0xe8>)
   164a8:	47a0      	blx	r4
			pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
			add_state(WIFI_CONNECTED);
   164aa:	2002      	movs	r0, #2
   164ac:	4b0f      	ldr	r3, [pc, #60]	; (164ec <wifi_cb+0xec>)
   164ae:	4798      	blx	r3
			start_download();
   164b0:	4b0f      	ldr	r3, [pc, #60]	; (164f0 <wifi_cb+0xf0>)
   164b2:	4798      	blx	r3
		}

		default:
		break;
   164b4:	e000      	b.n	164b8 <wifi_cb+0xb8>

				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
				MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}

			break;
   164b6:	46c0      	nop			; (mov r8, r8)
		}

		default:
		break;
	}
}
   164b8:	46c0      	nop			; (mov r8, r8)
   164ba:	46bd      	mov	sp, r7
   164bc:	b005      	add	sp, #20
   164be:	bd90      	pop	{r4, r7, pc}
   164c0:	00019a88 	.word	0x00019a88
   164c4:	00016ed1 	.word	0x00016ed1
   164c8:	0000a431 	.word	0x0000a431
   164cc:	00019aa8 	.word	0x00019aa8
   164d0:	00015e61 	.word	0x00015e61
   164d4:	00015ebd 	.word	0x00015ebd
   164d8:	00019ac8 	.word	0x00019ac8
   164dc:	00019ad4 	.word	0x00019ad4
   164e0:	00009f69 	.word	0x00009f69
   164e4:	00019aec 	.word	0x00019aec
   164e8:	00016db1 	.word	0x00016db1
   164ec:	00015e95 	.word	0x00015e95
   164f0:	00015f69 	.word	0x00015f69

000164f4 <configure_http_client>:

static void configure_http_client(void)
{
   164f4:	b580      	push	{r7, lr}
   164f6:	b088      	sub	sp, #32
   164f8:	af00      	add	r7, sp, #0
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
   164fa:	003b      	movs	r3, r7
   164fc:	0018      	movs	r0, r3
   164fe:	4b12      	ldr	r3, [pc, #72]	; (16548 <configure_http_client+0x54>)
   16500:	4798      	blx	r3

	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   16502:	003b      	movs	r3, r7
   16504:	2280      	movs	r2, #128	; 0x80
   16506:	00d2      	lsls	r2, r2, #3
   16508:	611a      	str	r2, [r3, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   1650a:	003b      	movs	r3, r7
   1650c:	4a0f      	ldr	r2, [pc, #60]	; (1654c <configure_http_client+0x58>)
   1650e:	605a      	str	r2, [r3, #4]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   16510:	003a      	movs	r2, r7
   16512:	4b0f      	ldr	r3, [pc, #60]	; (16550 <configure_http_client+0x5c>)
   16514:	0011      	movs	r1, r2
   16516:	0018      	movs	r0, r3
   16518:	4b0e      	ldr	r3, [pc, #56]	; (16554 <configure_http_client+0x60>)
   1651a:	4798      	blx	r3
   1651c:	0003      	movs	r3, r0
   1651e:	61fb      	str	r3, [r7, #28]
	if (ret < 0) {
   16520:	69fb      	ldr	r3, [r7, #28]
   16522:	2b00      	cmp	r3, #0
   16524:	da06      	bge.n	16534 <configure_http_client+0x40>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16526:	69fa      	ldr	r2, [r7, #28]
   16528:	4b0b      	ldr	r3, [pc, #44]	; (16558 <configure_http_client+0x64>)
   1652a:	0011      	movs	r1, r2
   1652c:	0018      	movs	r0, r3
   1652e:	4b0b      	ldr	r3, [pc, #44]	; (1655c <configure_http_client+0x68>)
   16530:	4798      	blx	r3
		while (1) {
			} // Loop forever
   16532:	e7fe      	b.n	16532 <configure_http_client+0x3e>
		}

		http_client_register_callback(&http_client_module_inst, http_client_callback);
   16534:	4a0a      	ldr	r2, [pc, #40]	; (16560 <configure_http_client+0x6c>)
   16536:	4b06      	ldr	r3, [pc, #24]	; (16550 <configure_http_client+0x5c>)
   16538:	0011      	movs	r1, r2
   1653a:	0018      	movs	r0, r3
   1653c:	4b09      	ldr	r3, [pc, #36]	; (16564 <configure_http_client+0x70>)
   1653e:	4798      	blx	r3
}
   16540:	46c0      	nop			; (mov r8, r8)
   16542:	46bd      	mov	sp, r7
   16544:	b008      	add	sp, #32
   16546:	bd80      	pop	{r7, pc}
   16548:	0000ef19 	.word	0x0000ef19
   1654c:	20000c1c 	.word	0x20000c1c
   16550:	20000c74 	.word	0x20000c74
   16554:	0000ef65 	.word	0x0000ef65
   16558:	00019b14 	.word	0x00019b14
   1655c:	00016db1 	.word	0x00016db1
   16560:	00015ff9 	.word	0x00015ff9
   16564:	0000f051 	.word	0x0000f051

00016568 <download_firmware>:

static void download_firmware(unsigned int slot)
{
   16568:	b590      	push	{r4, r7, lr}
   1656a:	b085      	sub	sp, #20
   1656c:	af02      	add	r7, sp, #8
   1656e:	6078      	str	r0, [r7, #4]
	flash_addr = 0x40000 * slot; //Starting addr on flash where downloaded file is stored
   16570:	687b      	ldr	r3, [r7, #4]
   16572:	049a      	lsls	r2, r3, #18
   16574:	4b45      	ldr	r3, [pc, #276]	; (1668c <download_firmware+0x124>)
   16576:	601a      	str	r2, [r3, #0]
	at25dfx_chip_wake(&at25dfx_chip);
   16578:	4b45      	ldr	r3, [pc, #276]	; (16690 <download_firmware+0x128>)
   1657a:	0018      	movs	r0, r3
   1657c:	4b45      	ldr	r3, [pc, #276]	; (16694 <download_firmware+0x12c>)
   1657e:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   16580:	4b43      	ldr	r3, [pc, #268]	; (16690 <download_firmware+0x128>)
   16582:	0018      	movs	r0, r3
   16584:	4b44      	ldr	r3, [pc, #272]	; (16698 <download_firmware+0x130>)
   16586:	4798      	blx	r3
		// Handle missing or non-responsive device
	}
	
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
   16588:	4b41      	ldr	r3, [pc, #260]	; (16690 <download_firmware+0x128>)
   1658a:	2100      	movs	r1, #0
   1658c:	0018      	movs	r0, r3
   1658e:	4b43      	ldr	r3, [pc, #268]	; (1669c <download_firmware+0x134>)
   16590:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr, AT25DFX_BLOCK_SIZE_64KB);	// erase block
   16592:	4b3e      	ldr	r3, [pc, #248]	; (1668c <download_firmware+0x124>)
   16594:	6819      	ldr	r1, [r3, #0]
   16596:	4b3e      	ldr	r3, [pc, #248]	; (16690 <download_firmware+0x128>)
   16598:	2202      	movs	r2, #2
   1659a:	0018      	movs	r0, r3
   1659c:	4b40      	ldr	r3, [pc, #256]	; (166a0 <download_firmware+0x138>)
   1659e:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x10000, AT25DFX_BLOCK_SIZE_64KB);
   165a0:	4b3a      	ldr	r3, [pc, #232]	; (1668c <download_firmware+0x124>)
   165a2:	681b      	ldr	r3, [r3, #0]
   165a4:	2280      	movs	r2, #128	; 0x80
   165a6:	0252      	lsls	r2, r2, #9
   165a8:	1899      	adds	r1, r3, r2
   165aa:	4b39      	ldr	r3, [pc, #228]	; (16690 <download_firmware+0x128>)
   165ac:	2202      	movs	r2, #2
   165ae:	0018      	movs	r0, r3
   165b0:	4b3b      	ldr	r3, [pc, #236]	; (166a0 <download_firmware+0x138>)
   165b2:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x20000, AT25DFX_BLOCK_SIZE_64KB);
   165b4:	4b35      	ldr	r3, [pc, #212]	; (1668c <download_firmware+0x124>)
   165b6:	681b      	ldr	r3, [r3, #0]
   165b8:	2280      	movs	r2, #128	; 0x80
   165ba:	0292      	lsls	r2, r2, #10
   165bc:	1899      	adds	r1, r3, r2
   165be:	4b34      	ldr	r3, [pc, #208]	; (16690 <download_firmware+0x128>)
   165c0:	2202      	movs	r2, #2
   165c2:	0018      	movs	r0, r3
   165c4:	4b36      	ldr	r3, [pc, #216]	; (166a0 <download_firmware+0x138>)
   165c6:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x30000, AT25DFX_BLOCK_SIZE_64KB);
   165c8:	4b30      	ldr	r3, [pc, #192]	; (1668c <download_firmware+0x124>)
   165ca:	681b      	ldr	r3, [r3, #0]
   165cc:	22c0      	movs	r2, #192	; 0xc0
   165ce:	0292      	lsls	r2, r2, #10
   165d0:	1899      	adds	r1, r3, r2
   165d2:	4b2f      	ldr	r3, [pc, #188]	; (16690 <download_firmware+0x128>)
   165d4:	2202      	movs	r2, #2
   165d6:	0018      	movs	r0, r3
   165d8:	4b31      	ldr	r3, [pc, #196]	; (166a0 <download_firmware+0x138>)
   165da:	4798      	blx	r3
	
	/* Connect to router and download stuff and store it in flash */
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   165dc:	4a31      	ldr	r2, [pc, #196]	; (166a4 <download_firmware+0x13c>)
   165de:	4b32      	ldr	r3, [pc, #200]	; (166a8 <download_firmware+0x140>)
   165e0:	0011      	movs	r1, r2
   165e2:	0018      	movs	r0, r3
   165e4:	4b31      	ldr	r3, [pc, #196]	; (166ac <download_firmware+0x144>)
   165e6:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   165e8:	4a31      	ldr	r2, [pc, #196]	; (166b0 <download_firmware+0x148>)
   165ea:	482e      	ldr	r0, [pc, #184]	; (166a4 <download_firmware+0x13c>)
   165ec:	23ff      	movs	r3, #255	; 0xff
   165ee:	9300      	str	r3, [sp, #0]
   165f0:	0013      	movs	r3, r2
   165f2:	2202      	movs	r2, #2
   165f4:	2116      	movs	r1, #22
   165f6:	4c2f      	ldr	r4, [pc, #188]	; (166b4 <download_firmware+0x14c>)
   165f8:	47a0      	blx	r4
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   165fa:	e006      	b.n	1660a <download_firmware+0xa2>
		m2m_wifi_handle_events(NULL);
   165fc:	2000      	movs	r0, #0
   165fe:	4b2e      	ldr	r3, [pc, #184]	; (166b8 <download_firmware+0x150>)
   16600:	4798      	blx	r3
		sw_timer_task(&swt_module_inst);
   16602:	4b2e      	ldr	r3, [pc, #184]	; (166bc <download_firmware+0x154>)
   16604:	0018      	movs	r0, r3
   16606:	4b2e      	ldr	r3, [pc, #184]	; (166c0 <download_firmware+0x158>)
   16608:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x30000, AT25DFX_BLOCK_SIZE_64KB);
	
	/* Connect to router and download stuff and store it in flash */
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1660a:	2010      	movs	r0, #16
   1660c:	4b2d      	ldr	r3, [pc, #180]	; (166c4 <download_firmware+0x15c>)
   1660e:	4798      	blx	r3
   16610:	0003      	movs	r3, r0
   16612:	001a      	movs	r2, r3
   16614:	2301      	movs	r3, #1
   16616:	4053      	eors	r3, r2
   16618:	b2db      	uxtb	r3, r3
   1661a:	2b00      	cmp	r3, #0
   1661c:	d009      	beq.n	16632 <download_firmware+0xca>
   1661e:	2020      	movs	r0, #32
   16620:	4b28      	ldr	r3, [pc, #160]	; (166c4 <download_firmware+0x15c>)
   16622:	4798      	blx	r3
   16624:	0003      	movs	r3, r0
   16626:	001a      	movs	r2, r3
   16628:	2301      	movs	r3, #1
   1662a:	4053      	eors	r3, r2
   1662c:	b2db      	uxtb	r3, r3
   1662e:	2b00      	cmp	r3, #0
   16630:	d1e4      	bne.n	165fc <download_firmware+0x94>
		m2m_wifi_handle_events(NULL);
		sw_timer_task(&swt_module_inst);
	}
	printf("download_firmware: done.\r\n");
   16632:	4b25      	ldr	r3, [pc, #148]	; (166c8 <download_firmware+0x160>)
   16634:	0018      	movs	r0, r3
   16636:	4b25      	ldr	r3, [pc, #148]	; (166cc <download_firmware+0x164>)
   16638:	4798      	blx	r3
	printf("Calculated CRC: %lu\r\n", (unsigned long)crcChecker);
   1663a:	4b25      	ldr	r3, [pc, #148]	; (166d0 <download_firmware+0x168>)
   1663c:	681a      	ldr	r2, [r3, #0]
   1663e:	4b25      	ldr	r3, [pc, #148]	; (166d4 <download_firmware+0x16c>)
   16640:	0011      	movs	r1, r2
   16642:	0018      	movs	r0, r3
   16644:	4b19      	ldr	r3, [pc, #100]	; (166ac <download_firmware+0x144>)
   16646:	4798      	blx	r3
	
	//For debugging this shit
	//flash_addr = 0x00000;
	at25dfx_chip_wake(&at25dfx_chip);
   16648:	4b11      	ldr	r3, [pc, #68]	; (16690 <download_firmware+0x128>)
   1664a:	0018      	movs	r0, r3
   1664c:	4b11      	ldr	r3, [pc, #68]	; (16694 <download_firmware+0x12c>)
   1664e:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   16650:	4b0f      	ldr	r3, [pc, #60]	; (16690 <download_firmware+0x128>)
   16652:	0018      	movs	r0, r3
   16654:	4b10      	ldr	r3, [pc, #64]	; (16698 <download_firmware+0x130>)
   16656:	4798      	blx	r3
		// Handle missing or non-responsive device
	}
	at25dfx_chip_read_buffer(&at25dfx_chip, flash_addr, read_buffer, AT25DFX_BUFFER_SIZE);
   16658:	4b0c      	ldr	r3, [pc, #48]	; (1668c <download_firmware+0x124>)
   1665a:	6819      	ldr	r1, [r3, #0]
   1665c:	2380      	movs	r3, #128	; 0x80
   1665e:	005b      	lsls	r3, r3, #1
   16660:	4a1d      	ldr	r2, [pc, #116]	; (166d8 <download_firmware+0x170>)
   16662:	480b      	ldr	r0, [pc, #44]	; (16690 <download_firmware+0x128>)
   16664:	4c1d      	ldr	r4, [pc, #116]	; (166dc <download_firmware+0x174>)
   16666:	47a0      	blx	r4
	at25dfx_chip_read_buffer(&at25dfx_chip, flash_addr+AT25DFX_BUFFER_SIZE, read_buffer, AT25DFX_BUFFER_SIZE);
   16668:	4b08      	ldr	r3, [pc, #32]	; (1668c <download_firmware+0x124>)
   1666a:	681b      	ldr	r3, [r3, #0]
   1666c:	1c59      	adds	r1, r3, #1
   1666e:	31ff      	adds	r1, #255	; 0xff
   16670:	2380      	movs	r3, #128	; 0x80
   16672:	005b      	lsls	r3, r3, #1
   16674:	4a18      	ldr	r2, [pc, #96]	; (166d8 <download_firmware+0x170>)
   16676:	4806      	ldr	r0, [pc, #24]	; (16690 <download_firmware+0x128>)
   16678:	4c18      	ldr	r4, [pc, #96]	; (166dc <download_firmware+0x174>)
   1667a:	47a0      	blx	r4
	at25dfx_chip_sleep(&at25dfx_chip);
   1667c:	4b04      	ldr	r3, [pc, #16]	; (16690 <download_firmware+0x128>)
   1667e:	0018      	movs	r0, r3
   16680:	4b17      	ldr	r3, [pc, #92]	; (166e0 <download_firmware+0x178>)
   16682:	4798      	blx	r3
}
   16684:	46c0      	nop			; (mov r8, r8)
   16686:	46bd      	mov	sp, r7
   16688:	b003      	add	sp, #12
   1668a:	bd90      	pop	{r4, r7, pc}
   1668c:	20000410 	.word	0x20000410
   16690:	20000c14 	.word	0x20000c14
   16694:	00011a09 	.word	0x00011a09
   16698:	000114c1 	.word	0x000114c1
   1669c:	000118c9 	.word	0x000118c9
   166a0:	000117cd 	.word	0x000117cd
   166a4:	00019ad4 	.word	0x00019ad4
   166a8:	00019b5c 	.word	0x00019b5c
   166ac:	00016db1 	.word	0x00016db1
   166b0:	00019ac8 	.word	0x00019ac8
   166b4:	00009f69 	.word	0x00009f69
   166b8:	00009f4d 	.word	0x00009f4d
   166bc:	20000c1c 	.word	0x20000c1c
   166c0:	00010aa9 	.word	0x00010aa9
   166c4:	00015ebd 	.word	0x00015ebd
   166c8:	00019b90 	.word	0x00019b90
   166cc:	00016ed1 	.word	0x00016ed1
   166d0:	20000d98 	.word	0x20000d98
   166d4:	00019bac 	.word	0x00019bac
   166d8:	20000124 	.word	0x20000124
   166dc:	0001156d 	.word	0x0001156d
   166e0:	0001197d 	.word	0x0001197d

000166e4 <main>:

int main (void)
{
   166e4:	b590      	push	{r4, r7, lr}
   166e6:	b08b      	sub	sp, #44	; 0x2c
   166e8:	af00      	add	r7, sp, #0
	
	tstrWifiInitParam param;
	int8_t ret;
	init_state();
   166ea:	4b43      	ldr	r3, [pc, #268]	; (167f8 <main+0x114>)
   166ec:	4798      	blx	r3
	
	system_init();
   166ee:	4b43      	ldr	r3, [pc, #268]	; (167fc <main+0x118>)
   166f0:	4798      	blx	r3
	//system_interrupt_enable_global();
	configure_port_pins();
   166f2:	4b43      	ldr	r3, [pc, #268]	; (16800 <main+0x11c>)
   166f4:	4798      	blx	r3
	//delay_init();
	configure_console();
   166f6:	4b43      	ldr	r3, [pc, #268]	; (16804 <main+0x120>)
   166f8:	4798      	blx	r3
	configure_nvm();
   166fa:	4b43      	ldr	r3, [pc, #268]	; (16808 <main+0x124>)
   166fc:	4798      	blx	r3
	configure_spi_flash();
   166fe:	4b43      	ldr	r3, [pc, #268]	; (1680c <main+0x128>)
   16700:	4798      	blx	r3
	configure_timer();
   16702:	4b43      	ldr	r3, [pc, #268]	; (16810 <main+0x12c>)
   16704:	4798      	blx	r3
	configure_http_client();
   16706:	4b43      	ldr	r3, [pc, #268]	; (16814 <main+0x130>)
   16708:	4798      	blx	r3
	nm_bsp_init();
   1670a:	4b43      	ldr	r3, [pc, #268]	; (16818 <main+0x134>)
   1670c:	4798      	blx	r3
	
	
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1670e:	230c      	movs	r3, #12
   16710:	18fb      	adds	r3, r7, r3
   16712:	2218      	movs	r2, #24
   16714:	2100      	movs	r1, #0
   16716:	0018      	movs	r0, r3
   16718:	4b40      	ldr	r3, [pc, #256]	; (1681c <main+0x138>)
   1671a:	4798      	blx	r3
	
	param.pfAppWifiCb = wifi_cb;
   1671c:	230c      	movs	r3, #12
   1671e:	18fb      	adds	r3, r7, r3
   16720:	4a3f      	ldr	r2, [pc, #252]	; (16820 <main+0x13c>)
   16722:	601a      	str	r2, [r3, #0]
	ret = m2m_wifi_init(&param);
   16724:	2327      	movs	r3, #39	; 0x27
   16726:	18fc      	adds	r4, r7, r3
   16728:	230c      	movs	r3, #12
   1672a:	18fb      	adds	r3, r7, r3
   1672c:	0018      	movs	r0, r3
   1672e:	4b3d      	ldr	r3, [pc, #244]	; (16824 <main+0x140>)
   16730:	4798      	blx	r3
   16732:	0003      	movs	r3, r0
   16734:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   16736:	2327      	movs	r3, #39	; 0x27
   16738:	18fb      	adds	r3, r7, r3
   1673a:	781b      	ldrb	r3, [r3, #0]
   1673c:	b25b      	sxtb	r3, r3
   1673e:	2b00      	cmp	r3, #0
   16740:	d009      	beq.n	16756 <main+0x72>
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   16742:	2327      	movs	r3, #39	; 0x27
   16744:	18fb      	adds	r3, r7, r3
   16746:	2200      	movs	r2, #0
   16748:	569a      	ldrsb	r2, [r3, r2]
   1674a:	4b37      	ldr	r3, [pc, #220]	; (16828 <main+0x144>)
   1674c:	0011      	movs	r1, r2
   1674e:	0018      	movs	r0, r3
   16750:	4b36      	ldr	r3, [pc, #216]	; (1682c <main+0x148>)
   16752:	4798      	blx	r3
		while (1) {
		}
   16754:	e7fe      	b.n	16754 <main+0x70>
	}
	
	socketInit();
   16756:	4b36      	ldr	r3, [pc, #216]	; (16830 <main+0x14c>)
   16758:	4798      	blx	r3
	registerSocketCallback(socket_cb, resolve_cb);
   1675a:	4a36      	ldr	r2, [pc, #216]	; (16834 <main+0x150>)
   1675c:	4b36      	ldr	r3, [pc, #216]	; (16838 <main+0x154>)
   1675e:	0011      	movs	r1, r2
   16760:	0018      	movs	r0, r3
   16762:	4b36      	ldr	r3, [pc, #216]	; (1683c <main+0x158>)
   16764:	4798      	blx	r3
	write_firmware = false; 
   16766:	4b36      	ldr	r3, [pc, #216]	; (16840 <main+0x15c>)
   16768:	2200      	movs	r2, #0
   1676a:	701a      	strb	r2, [r3, #0]
	while (1) 
	{
		if (port_pin_get_input_level(B1) == true) {
   1676c:	2037      	movs	r0, #55	; 0x37
   1676e:	4b35      	ldr	r3, [pc, #212]	; (16844 <main+0x160>)
   16770:	4798      	blx	r3
   16772:	1e03      	subs	r3, r0, #0
   16774:	d004      	beq.n	16780 <main+0x9c>
			port_pin_set_output_level(LED_0_PIN, false);
   16776:	2100      	movs	r1, #0
   16778:	2017      	movs	r0, #23
   1677a:	4b33      	ldr	r3, [pc, #204]	; (16848 <main+0x164>)
   1677c:	4798      	blx	r3
   1677e:	e006      	b.n	1678e <main+0xaa>
		}
		else 
		{
			port_pin_set_output_level(LED_0_PIN, true);
   16780:	2101      	movs	r1, #1
   16782:	2017      	movs	r0, #23
   16784:	4b30      	ldr	r3, [pc, #192]	; (16848 <main+0x164>)
   16786:	4798      	blx	r3
			write_firmware = true;
   16788:	4b2d      	ldr	r3, [pc, #180]	; (16840 <main+0x15c>)
   1678a:	2201      	movs	r2, #1
   1678c:	701a      	strb	r2, [r3, #0]
		}
		
		// receive command from IBM BlueMix
		//....................
		//write the updated status
		if(write_firmware)
   1678e:	4b2c      	ldr	r3, [pc, #176]	; (16840 <main+0x15c>)
   16790:	781b      	ldrb	r3, [r3, #0]
   16792:	2b00      	cmp	r3, #0
   16794:	d0ea      	beq.n	1676c <main+0x88>
		{
			// download firmware into serial flash and upgrade
			Firmware_Status_t fw_status = getFWStat();
   16796:	1d3b      	adds	r3, r7, #4
   16798:	0018      	movs	r0, r3
   1679a:	4b2c      	ldr	r3, [pc, #176]	; (1684c <main+0x168>)
   1679c:	4798      	blx	r3
			if (fw_status.executing_image == 1) {
   1679e:	1d3b      	adds	r3, r7, #4
   167a0:	791b      	ldrb	r3, [r3, #4]
   167a2:	2b01      	cmp	r3, #1
   167a4:	d103      	bne.n	167ae <main+0xca>
				fw_status.downloaded_image = 2;
   167a6:	1d3b      	adds	r3, r7, #4
   167a8:	2202      	movs	r2, #2
   167aa:	715a      	strb	r2, [r3, #5]
   167ac:	e002      	b.n	167b4 <main+0xd0>
			}
			else {
				fw_status.downloaded_image = 1;
   167ae:	1d3b      	adds	r3, r7, #4
   167b0:	2201      	movs	r2, #1
   167b2:	715a      	strb	r2, [r3, #5]
			}
			printf("Executing image: %d, DL to: %d\r\n", fw_status.executing_image, fw_status.downloaded_image);
   167b4:	1d3b      	adds	r3, r7, #4
   167b6:	791b      	ldrb	r3, [r3, #4]
   167b8:	0019      	movs	r1, r3
   167ba:	1d3b      	adds	r3, r7, #4
   167bc:	795b      	ldrb	r3, [r3, #5]
   167be:	001a      	movs	r2, r3
   167c0:	4b23      	ldr	r3, [pc, #140]	; (16850 <main+0x16c>)
   167c2:	0018      	movs	r0, r3
   167c4:	4b19      	ldr	r3, [pc, #100]	; (1682c <main+0x148>)
   167c6:	4798      	blx	r3
			download_firmware(fw_status.downloaded_image);
   167c8:	1d3b      	adds	r3, r7, #4
   167ca:	795b      	ldrb	r3, [r3, #5]
   167cc:	0018      	movs	r0, r3
   167ce:	4b21      	ldr	r3, [pc, #132]	; (16854 <main+0x170>)
   167d0:	4798      	blx	r3
			printf("\n\r Main: Done downloading firmware\n\r");
   167d2:	4b21      	ldr	r3, [pc, #132]	; (16858 <main+0x174>)
   167d4:	0018      	movs	r0, r3
   167d6:	4b15      	ldr	r3, [pc, #84]	; (1682c <main+0x148>)
   167d8:	4798      	blx	r3
			
			//printf("fw_status.writenew_image = %d\n\r before mod\n\r", fw_status.writenew_image);
			*(uint32_t*)fw_status.signature = 0xEFBEADDE; //replace with checksum of downloaded image
   167da:	1d3b      	adds	r3, r7, #4
   167dc:	4a1f      	ldr	r2, [pc, #124]	; (1685c <main+0x178>)
   167de:	601a      	str	r2, [r3, #0]
 			fw_status.writenew_image = 1;  // write image flag
   167e0:	1d3b      	adds	r3, r7, #4
   167e2:	2201      	movs	r2, #1
   167e4:	719a      	strb	r2, [r3, #6]
			//printf("fw_status.writenew_image = %d\n\r after mod before write\n\r", fw_status.writenew_image);
			writeFWStat(fw_status);
   167e6:	1d3b      	adds	r3, r7, #4
   167e8:	6818      	ldr	r0, [r3, #0]
   167ea:	6859      	ldr	r1, [r3, #4]
   167ec:	4b1c      	ldr	r3, [pc, #112]	; (16860 <main+0x17c>)
   167ee:	4798      	blx	r3
			// reset to begin writing firmware
			system_reset();
   167f0:	4b1c      	ldr	r3, [pc, #112]	; (16864 <main+0x180>)
   167f2:	4798      	blx	r3
		}
	}	
   167f4:	e7ba      	b.n	1676c <main+0x88>
   167f6:	46c0      	nop			; (mov r8, r8)
   167f8:	00015e4d 	.word	0x00015e4d
   167fc:	0001542d 	.word	0x0001542d
   16800:	00015d35 	.word	0x00015d35
   16804:	00015ae1 	.word	0x00015ae1
   16808:	00015b55 	.word	0x00015b55
   1680c:	00015d75 	.word	0x00015d75
   16810:	00015e11 	.word	0x00015e11
   16814:	000164f5 	.word	0x000164f5
   16818:	000082a1 	.word	0x000082a1
   1681c:	00016c69 	.word	0x00016c69
   16820:	00016401 	.word	0x00016401
   16824:	00009d61 	.word	0x00009d61
   16828:	00019bc4 	.word	0x00019bc4
   1682c:	00016db1 	.word	0x00016db1
   16830:	0000cf65 	.word	0x0000cf65
   16834:	000163a5 	.word	0x000163a5
   16838:	00016371 	.word	0x00016371
   1683c:	0000cfb5 	.word	0x0000cfb5
   16840:	20000120 	.word	0x20000120
   16844:	00015611 	.word	0x00015611
   16848:	00015655 	.word	0x00015655
   1684c:	00015b81 	.word	0x00015b81
   16850:	00019bf0 	.word	0x00019bf0
   16854:	00016569 	.word	0x00016569
   16858:	00019c14 	.word	0x00019c14
   1685c:	efbeadde 	.word	0xefbeadde
   16860:	00015c41 	.word	0x00015c41
   16864:	000156a9 	.word	0x000156a9

00016868 <__aeabi_uidiv>:
   16868:	2200      	movs	r2, #0
   1686a:	0843      	lsrs	r3, r0, #1
   1686c:	428b      	cmp	r3, r1
   1686e:	d374      	bcc.n	1695a <__aeabi_uidiv+0xf2>
   16870:	0903      	lsrs	r3, r0, #4
   16872:	428b      	cmp	r3, r1
   16874:	d35f      	bcc.n	16936 <__aeabi_uidiv+0xce>
   16876:	0a03      	lsrs	r3, r0, #8
   16878:	428b      	cmp	r3, r1
   1687a:	d344      	bcc.n	16906 <__aeabi_uidiv+0x9e>
   1687c:	0b03      	lsrs	r3, r0, #12
   1687e:	428b      	cmp	r3, r1
   16880:	d328      	bcc.n	168d4 <__aeabi_uidiv+0x6c>
   16882:	0c03      	lsrs	r3, r0, #16
   16884:	428b      	cmp	r3, r1
   16886:	d30d      	bcc.n	168a4 <__aeabi_uidiv+0x3c>
   16888:	22ff      	movs	r2, #255	; 0xff
   1688a:	0209      	lsls	r1, r1, #8
   1688c:	ba12      	rev	r2, r2
   1688e:	0c03      	lsrs	r3, r0, #16
   16890:	428b      	cmp	r3, r1
   16892:	d302      	bcc.n	1689a <__aeabi_uidiv+0x32>
   16894:	1212      	asrs	r2, r2, #8
   16896:	0209      	lsls	r1, r1, #8
   16898:	d065      	beq.n	16966 <__aeabi_uidiv+0xfe>
   1689a:	0b03      	lsrs	r3, r0, #12
   1689c:	428b      	cmp	r3, r1
   1689e:	d319      	bcc.n	168d4 <__aeabi_uidiv+0x6c>
   168a0:	e000      	b.n	168a4 <__aeabi_uidiv+0x3c>
   168a2:	0a09      	lsrs	r1, r1, #8
   168a4:	0bc3      	lsrs	r3, r0, #15
   168a6:	428b      	cmp	r3, r1
   168a8:	d301      	bcc.n	168ae <__aeabi_uidiv+0x46>
   168aa:	03cb      	lsls	r3, r1, #15
   168ac:	1ac0      	subs	r0, r0, r3
   168ae:	4152      	adcs	r2, r2
   168b0:	0b83      	lsrs	r3, r0, #14
   168b2:	428b      	cmp	r3, r1
   168b4:	d301      	bcc.n	168ba <__aeabi_uidiv+0x52>
   168b6:	038b      	lsls	r3, r1, #14
   168b8:	1ac0      	subs	r0, r0, r3
   168ba:	4152      	adcs	r2, r2
   168bc:	0b43      	lsrs	r3, r0, #13
   168be:	428b      	cmp	r3, r1
   168c0:	d301      	bcc.n	168c6 <__aeabi_uidiv+0x5e>
   168c2:	034b      	lsls	r3, r1, #13
   168c4:	1ac0      	subs	r0, r0, r3
   168c6:	4152      	adcs	r2, r2
   168c8:	0b03      	lsrs	r3, r0, #12
   168ca:	428b      	cmp	r3, r1
   168cc:	d301      	bcc.n	168d2 <__aeabi_uidiv+0x6a>
   168ce:	030b      	lsls	r3, r1, #12
   168d0:	1ac0      	subs	r0, r0, r3
   168d2:	4152      	adcs	r2, r2
   168d4:	0ac3      	lsrs	r3, r0, #11
   168d6:	428b      	cmp	r3, r1
   168d8:	d301      	bcc.n	168de <__aeabi_uidiv+0x76>
   168da:	02cb      	lsls	r3, r1, #11
   168dc:	1ac0      	subs	r0, r0, r3
   168de:	4152      	adcs	r2, r2
   168e0:	0a83      	lsrs	r3, r0, #10
   168e2:	428b      	cmp	r3, r1
   168e4:	d301      	bcc.n	168ea <__aeabi_uidiv+0x82>
   168e6:	028b      	lsls	r3, r1, #10
   168e8:	1ac0      	subs	r0, r0, r3
   168ea:	4152      	adcs	r2, r2
   168ec:	0a43      	lsrs	r3, r0, #9
   168ee:	428b      	cmp	r3, r1
   168f0:	d301      	bcc.n	168f6 <__aeabi_uidiv+0x8e>
   168f2:	024b      	lsls	r3, r1, #9
   168f4:	1ac0      	subs	r0, r0, r3
   168f6:	4152      	adcs	r2, r2
   168f8:	0a03      	lsrs	r3, r0, #8
   168fa:	428b      	cmp	r3, r1
   168fc:	d301      	bcc.n	16902 <__aeabi_uidiv+0x9a>
   168fe:	020b      	lsls	r3, r1, #8
   16900:	1ac0      	subs	r0, r0, r3
   16902:	4152      	adcs	r2, r2
   16904:	d2cd      	bcs.n	168a2 <__aeabi_uidiv+0x3a>
   16906:	09c3      	lsrs	r3, r0, #7
   16908:	428b      	cmp	r3, r1
   1690a:	d301      	bcc.n	16910 <__aeabi_uidiv+0xa8>
   1690c:	01cb      	lsls	r3, r1, #7
   1690e:	1ac0      	subs	r0, r0, r3
   16910:	4152      	adcs	r2, r2
   16912:	0983      	lsrs	r3, r0, #6
   16914:	428b      	cmp	r3, r1
   16916:	d301      	bcc.n	1691c <__aeabi_uidiv+0xb4>
   16918:	018b      	lsls	r3, r1, #6
   1691a:	1ac0      	subs	r0, r0, r3
   1691c:	4152      	adcs	r2, r2
   1691e:	0943      	lsrs	r3, r0, #5
   16920:	428b      	cmp	r3, r1
   16922:	d301      	bcc.n	16928 <__aeabi_uidiv+0xc0>
   16924:	014b      	lsls	r3, r1, #5
   16926:	1ac0      	subs	r0, r0, r3
   16928:	4152      	adcs	r2, r2
   1692a:	0903      	lsrs	r3, r0, #4
   1692c:	428b      	cmp	r3, r1
   1692e:	d301      	bcc.n	16934 <__aeabi_uidiv+0xcc>
   16930:	010b      	lsls	r3, r1, #4
   16932:	1ac0      	subs	r0, r0, r3
   16934:	4152      	adcs	r2, r2
   16936:	08c3      	lsrs	r3, r0, #3
   16938:	428b      	cmp	r3, r1
   1693a:	d301      	bcc.n	16940 <__aeabi_uidiv+0xd8>
   1693c:	00cb      	lsls	r3, r1, #3
   1693e:	1ac0      	subs	r0, r0, r3
   16940:	4152      	adcs	r2, r2
   16942:	0883      	lsrs	r3, r0, #2
   16944:	428b      	cmp	r3, r1
   16946:	d301      	bcc.n	1694c <__aeabi_uidiv+0xe4>
   16948:	008b      	lsls	r3, r1, #2
   1694a:	1ac0      	subs	r0, r0, r3
   1694c:	4152      	adcs	r2, r2
   1694e:	0843      	lsrs	r3, r0, #1
   16950:	428b      	cmp	r3, r1
   16952:	d301      	bcc.n	16958 <__aeabi_uidiv+0xf0>
   16954:	004b      	lsls	r3, r1, #1
   16956:	1ac0      	subs	r0, r0, r3
   16958:	4152      	adcs	r2, r2
   1695a:	1a41      	subs	r1, r0, r1
   1695c:	d200      	bcs.n	16960 <__aeabi_uidiv+0xf8>
   1695e:	4601      	mov	r1, r0
   16960:	4152      	adcs	r2, r2
   16962:	4610      	mov	r0, r2
   16964:	4770      	bx	lr
   16966:	e7ff      	b.n	16968 <__aeabi_uidiv+0x100>
   16968:	b501      	push	{r0, lr}
   1696a:	2000      	movs	r0, #0
   1696c:	f000 f8f0 	bl	16b50 <__aeabi_idiv0>
   16970:	bd02      	pop	{r1, pc}
   16972:	46c0      	nop			; (mov r8, r8)

00016974 <__aeabi_uidivmod>:
   16974:	2900      	cmp	r1, #0
   16976:	d0f7      	beq.n	16968 <__aeabi_uidiv+0x100>
   16978:	e776      	b.n	16868 <__aeabi_uidiv>
   1697a:	4770      	bx	lr

0001697c <__aeabi_idiv>:
   1697c:	4603      	mov	r3, r0
   1697e:	430b      	orrs	r3, r1
   16980:	d47f      	bmi.n	16a82 <__aeabi_idiv+0x106>
   16982:	2200      	movs	r2, #0
   16984:	0843      	lsrs	r3, r0, #1
   16986:	428b      	cmp	r3, r1
   16988:	d374      	bcc.n	16a74 <__aeabi_idiv+0xf8>
   1698a:	0903      	lsrs	r3, r0, #4
   1698c:	428b      	cmp	r3, r1
   1698e:	d35f      	bcc.n	16a50 <__aeabi_idiv+0xd4>
   16990:	0a03      	lsrs	r3, r0, #8
   16992:	428b      	cmp	r3, r1
   16994:	d344      	bcc.n	16a20 <__aeabi_idiv+0xa4>
   16996:	0b03      	lsrs	r3, r0, #12
   16998:	428b      	cmp	r3, r1
   1699a:	d328      	bcc.n	169ee <__aeabi_idiv+0x72>
   1699c:	0c03      	lsrs	r3, r0, #16
   1699e:	428b      	cmp	r3, r1
   169a0:	d30d      	bcc.n	169be <__aeabi_idiv+0x42>
   169a2:	22ff      	movs	r2, #255	; 0xff
   169a4:	0209      	lsls	r1, r1, #8
   169a6:	ba12      	rev	r2, r2
   169a8:	0c03      	lsrs	r3, r0, #16
   169aa:	428b      	cmp	r3, r1
   169ac:	d302      	bcc.n	169b4 <__aeabi_idiv+0x38>
   169ae:	1212      	asrs	r2, r2, #8
   169b0:	0209      	lsls	r1, r1, #8
   169b2:	d065      	beq.n	16a80 <__aeabi_idiv+0x104>
   169b4:	0b03      	lsrs	r3, r0, #12
   169b6:	428b      	cmp	r3, r1
   169b8:	d319      	bcc.n	169ee <__aeabi_idiv+0x72>
   169ba:	e000      	b.n	169be <__aeabi_idiv+0x42>
   169bc:	0a09      	lsrs	r1, r1, #8
   169be:	0bc3      	lsrs	r3, r0, #15
   169c0:	428b      	cmp	r3, r1
   169c2:	d301      	bcc.n	169c8 <__aeabi_idiv+0x4c>
   169c4:	03cb      	lsls	r3, r1, #15
   169c6:	1ac0      	subs	r0, r0, r3
   169c8:	4152      	adcs	r2, r2
   169ca:	0b83      	lsrs	r3, r0, #14
   169cc:	428b      	cmp	r3, r1
   169ce:	d301      	bcc.n	169d4 <__aeabi_idiv+0x58>
   169d0:	038b      	lsls	r3, r1, #14
   169d2:	1ac0      	subs	r0, r0, r3
   169d4:	4152      	adcs	r2, r2
   169d6:	0b43      	lsrs	r3, r0, #13
   169d8:	428b      	cmp	r3, r1
   169da:	d301      	bcc.n	169e0 <__aeabi_idiv+0x64>
   169dc:	034b      	lsls	r3, r1, #13
   169de:	1ac0      	subs	r0, r0, r3
   169e0:	4152      	adcs	r2, r2
   169e2:	0b03      	lsrs	r3, r0, #12
   169e4:	428b      	cmp	r3, r1
   169e6:	d301      	bcc.n	169ec <__aeabi_idiv+0x70>
   169e8:	030b      	lsls	r3, r1, #12
   169ea:	1ac0      	subs	r0, r0, r3
   169ec:	4152      	adcs	r2, r2
   169ee:	0ac3      	lsrs	r3, r0, #11
   169f0:	428b      	cmp	r3, r1
   169f2:	d301      	bcc.n	169f8 <__aeabi_idiv+0x7c>
   169f4:	02cb      	lsls	r3, r1, #11
   169f6:	1ac0      	subs	r0, r0, r3
   169f8:	4152      	adcs	r2, r2
   169fa:	0a83      	lsrs	r3, r0, #10
   169fc:	428b      	cmp	r3, r1
   169fe:	d301      	bcc.n	16a04 <__aeabi_idiv+0x88>
   16a00:	028b      	lsls	r3, r1, #10
   16a02:	1ac0      	subs	r0, r0, r3
   16a04:	4152      	adcs	r2, r2
   16a06:	0a43      	lsrs	r3, r0, #9
   16a08:	428b      	cmp	r3, r1
   16a0a:	d301      	bcc.n	16a10 <__aeabi_idiv+0x94>
   16a0c:	024b      	lsls	r3, r1, #9
   16a0e:	1ac0      	subs	r0, r0, r3
   16a10:	4152      	adcs	r2, r2
   16a12:	0a03      	lsrs	r3, r0, #8
   16a14:	428b      	cmp	r3, r1
   16a16:	d301      	bcc.n	16a1c <__aeabi_idiv+0xa0>
   16a18:	020b      	lsls	r3, r1, #8
   16a1a:	1ac0      	subs	r0, r0, r3
   16a1c:	4152      	adcs	r2, r2
   16a1e:	d2cd      	bcs.n	169bc <__aeabi_idiv+0x40>
   16a20:	09c3      	lsrs	r3, r0, #7
   16a22:	428b      	cmp	r3, r1
   16a24:	d301      	bcc.n	16a2a <__aeabi_idiv+0xae>
   16a26:	01cb      	lsls	r3, r1, #7
   16a28:	1ac0      	subs	r0, r0, r3
   16a2a:	4152      	adcs	r2, r2
   16a2c:	0983      	lsrs	r3, r0, #6
   16a2e:	428b      	cmp	r3, r1
   16a30:	d301      	bcc.n	16a36 <__aeabi_idiv+0xba>
   16a32:	018b      	lsls	r3, r1, #6
   16a34:	1ac0      	subs	r0, r0, r3
   16a36:	4152      	adcs	r2, r2
   16a38:	0943      	lsrs	r3, r0, #5
   16a3a:	428b      	cmp	r3, r1
   16a3c:	d301      	bcc.n	16a42 <__aeabi_idiv+0xc6>
   16a3e:	014b      	lsls	r3, r1, #5
   16a40:	1ac0      	subs	r0, r0, r3
   16a42:	4152      	adcs	r2, r2
   16a44:	0903      	lsrs	r3, r0, #4
   16a46:	428b      	cmp	r3, r1
   16a48:	d301      	bcc.n	16a4e <__aeabi_idiv+0xd2>
   16a4a:	010b      	lsls	r3, r1, #4
   16a4c:	1ac0      	subs	r0, r0, r3
   16a4e:	4152      	adcs	r2, r2
   16a50:	08c3      	lsrs	r3, r0, #3
   16a52:	428b      	cmp	r3, r1
   16a54:	d301      	bcc.n	16a5a <__aeabi_idiv+0xde>
   16a56:	00cb      	lsls	r3, r1, #3
   16a58:	1ac0      	subs	r0, r0, r3
   16a5a:	4152      	adcs	r2, r2
   16a5c:	0883      	lsrs	r3, r0, #2
   16a5e:	428b      	cmp	r3, r1
   16a60:	d301      	bcc.n	16a66 <__aeabi_idiv+0xea>
   16a62:	008b      	lsls	r3, r1, #2
   16a64:	1ac0      	subs	r0, r0, r3
   16a66:	4152      	adcs	r2, r2
   16a68:	0843      	lsrs	r3, r0, #1
   16a6a:	428b      	cmp	r3, r1
   16a6c:	d301      	bcc.n	16a72 <__aeabi_idiv+0xf6>
   16a6e:	004b      	lsls	r3, r1, #1
   16a70:	1ac0      	subs	r0, r0, r3
   16a72:	4152      	adcs	r2, r2
   16a74:	1a41      	subs	r1, r0, r1
   16a76:	d200      	bcs.n	16a7a <__aeabi_idiv+0xfe>
   16a78:	4601      	mov	r1, r0
   16a7a:	4152      	adcs	r2, r2
   16a7c:	4610      	mov	r0, r2
   16a7e:	4770      	bx	lr
   16a80:	e05d      	b.n	16b3e <__aeabi_idiv+0x1c2>
   16a82:	0fca      	lsrs	r2, r1, #31
   16a84:	d000      	beq.n	16a88 <__aeabi_idiv+0x10c>
   16a86:	4249      	negs	r1, r1
   16a88:	1003      	asrs	r3, r0, #32
   16a8a:	d300      	bcc.n	16a8e <__aeabi_idiv+0x112>
   16a8c:	4240      	negs	r0, r0
   16a8e:	4053      	eors	r3, r2
   16a90:	2200      	movs	r2, #0
   16a92:	469c      	mov	ip, r3
   16a94:	0903      	lsrs	r3, r0, #4
   16a96:	428b      	cmp	r3, r1
   16a98:	d32d      	bcc.n	16af6 <__aeabi_idiv+0x17a>
   16a9a:	0a03      	lsrs	r3, r0, #8
   16a9c:	428b      	cmp	r3, r1
   16a9e:	d312      	bcc.n	16ac6 <__aeabi_idiv+0x14a>
   16aa0:	22fc      	movs	r2, #252	; 0xfc
   16aa2:	0189      	lsls	r1, r1, #6
   16aa4:	ba12      	rev	r2, r2
   16aa6:	0a03      	lsrs	r3, r0, #8
   16aa8:	428b      	cmp	r3, r1
   16aaa:	d30c      	bcc.n	16ac6 <__aeabi_idiv+0x14a>
   16aac:	0189      	lsls	r1, r1, #6
   16aae:	1192      	asrs	r2, r2, #6
   16ab0:	428b      	cmp	r3, r1
   16ab2:	d308      	bcc.n	16ac6 <__aeabi_idiv+0x14a>
   16ab4:	0189      	lsls	r1, r1, #6
   16ab6:	1192      	asrs	r2, r2, #6
   16ab8:	428b      	cmp	r3, r1
   16aba:	d304      	bcc.n	16ac6 <__aeabi_idiv+0x14a>
   16abc:	0189      	lsls	r1, r1, #6
   16abe:	d03a      	beq.n	16b36 <__aeabi_idiv+0x1ba>
   16ac0:	1192      	asrs	r2, r2, #6
   16ac2:	e000      	b.n	16ac6 <__aeabi_idiv+0x14a>
   16ac4:	0989      	lsrs	r1, r1, #6
   16ac6:	09c3      	lsrs	r3, r0, #7
   16ac8:	428b      	cmp	r3, r1
   16aca:	d301      	bcc.n	16ad0 <__aeabi_idiv+0x154>
   16acc:	01cb      	lsls	r3, r1, #7
   16ace:	1ac0      	subs	r0, r0, r3
   16ad0:	4152      	adcs	r2, r2
   16ad2:	0983      	lsrs	r3, r0, #6
   16ad4:	428b      	cmp	r3, r1
   16ad6:	d301      	bcc.n	16adc <__aeabi_idiv+0x160>
   16ad8:	018b      	lsls	r3, r1, #6
   16ada:	1ac0      	subs	r0, r0, r3
   16adc:	4152      	adcs	r2, r2
   16ade:	0943      	lsrs	r3, r0, #5
   16ae0:	428b      	cmp	r3, r1
   16ae2:	d301      	bcc.n	16ae8 <__aeabi_idiv+0x16c>
   16ae4:	014b      	lsls	r3, r1, #5
   16ae6:	1ac0      	subs	r0, r0, r3
   16ae8:	4152      	adcs	r2, r2
   16aea:	0903      	lsrs	r3, r0, #4
   16aec:	428b      	cmp	r3, r1
   16aee:	d301      	bcc.n	16af4 <__aeabi_idiv+0x178>
   16af0:	010b      	lsls	r3, r1, #4
   16af2:	1ac0      	subs	r0, r0, r3
   16af4:	4152      	adcs	r2, r2
   16af6:	08c3      	lsrs	r3, r0, #3
   16af8:	428b      	cmp	r3, r1
   16afa:	d301      	bcc.n	16b00 <__aeabi_idiv+0x184>
   16afc:	00cb      	lsls	r3, r1, #3
   16afe:	1ac0      	subs	r0, r0, r3
   16b00:	4152      	adcs	r2, r2
   16b02:	0883      	lsrs	r3, r0, #2
   16b04:	428b      	cmp	r3, r1
   16b06:	d301      	bcc.n	16b0c <__aeabi_idiv+0x190>
   16b08:	008b      	lsls	r3, r1, #2
   16b0a:	1ac0      	subs	r0, r0, r3
   16b0c:	4152      	adcs	r2, r2
   16b0e:	d2d9      	bcs.n	16ac4 <__aeabi_idiv+0x148>
   16b10:	0843      	lsrs	r3, r0, #1
   16b12:	428b      	cmp	r3, r1
   16b14:	d301      	bcc.n	16b1a <__aeabi_idiv+0x19e>
   16b16:	004b      	lsls	r3, r1, #1
   16b18:	1ac0      	subs	r0, r0, r3
   16b1a:	4152      	adcs	r2, r2
   16b1c:	1a41      	subs	r1, r0, r1
   16b1e:	d200      	bcs.n	16b22 <__aeabi_idiv+0x1a6>
   16b20:	4601      	mov	r1, r0
   16b22:	4663      	mov	r3, ip
   16b24:	4152      	adcs	r2, r2
   16b26:	105b      	asrs	r3, r3, #1
   16b28:	4610      	mov	r0, r2
   16b2a:	d301      	bcc.n	16b30 <__aeabi_idiv+0x1b4>
   16b2c:	4240      	negs	r0, r0
   16b2e:	2b00      	cmp	r3, #0
   16b30:	d500      	bpl.n	16b34 <__aeabi_idiv+0x1b8>
   16b32:	4249      	negs	r1, r1
   16b34:	4770      	bx	lr
   16b36:	4663      	mov	r3, ip
   16b38:	105b      	asrs	r3, r3, #1
   16b3a:	d300      	bcc.n	16b3e <__aeabi_idiv+0x1c2>
   16b3c:	4240      	negs	r0, r0
   16b3e:	b501      	push	{r0, lr}
   16b40:	2000      	movs	r0, #0
   16b42:	f000 f805 	bl	16b50 <__aeabi_idiv0>
   16b46:	bd02      	pop	{r1, pc}

00016b48 <__aeabi_idivmod>:
   16b48:	2900      	cmp	r1, #0
   16b4a:	d0f8      	beq.n	16b3e <__aeabi_idiv+0x1c2>
   16b4c:	e716      	b.n	1697c <__aeabi_idiv>
   16b4e:	4770      	bx	lr

00016b50 <__aeabi_idiv0>:
   16b50:	4770      	bx	lr
   16b52:	46c0      	nop			; (mov r8, r8)

00016b54 <__aeabi_lmul>:
   16b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b56:	464f      	mov	r7, r9
   16b58:	4646      	mov	r6, r8
   16b5a:	b4c0      	push	{r6, r7}
   16b5c:	0416      	lsls	r6, r2, #16
   16b5e:	0c36      	lsrs	r6, r6, #16
   16b60:	4699      	mov	r9, r3
   16b62:	0033      	movs	r3, r6
   16b64:	0405      	lsls	r5, r0, #16
   16b66:	0c2c      	lsrs	r4, r5, #16
   16b68:	0c07      	lsrs	r7, r0, #16
   16b6a:	0c15      	lsrs	r5, r2, #16
   16b6c:	4363      	muls	r3, r4
   16b6e:	437e      	muls	r6, r7
   16b70:	436f      	muls	r7, r5
   16b72:	4365      	muls	r5, r4
   16b74:	0c1c      	lsrs	r4, r3, #16
   16b76:	19ad      	adds	r5, r5, r6
   16b78:	1964      	adds	r4, r4, r5
   16b7a:	469c      	mov	ip, r3
   16b7c:	42a6      	cmp	r6, r4
   16b7e:	d903      	bls.n	16b88 <__aeabi_lmul+0x34>
   16b80:	2380      	movs	r3, #128	; 0x80
   16b82:	025b      	lsls	r3, r3, #9
   16b84:	4698      	mov	r8, r3
   16b86:	4447      	add	r7, r8
   16b88:	4663      	mov	r3, ip
   16b8a:	0c25      	lsrs	r5, r4, #16
   16b8c:	19ef      	adds	r7, r5, r7
   16b8e:	041d      	lsls	r5, r3, #16
   16b90:	464b      	mov	r3, r9
   16b92:	434a      	muls	r2, r1
   16b94:	4343      	muls	r3, r0
   16b96:	0c2d      	lsrs	r5, r5, #16
   16b98:	0424      	lsls	r4, r4, #16
   16b9a:	1964      	adds	r4, r4, r5
   16b9c:	1899      	adds	r1, r3, r2
   16b9e:	19c9      	adds	r1, r1, r7
   16ba0:	0020      	movs	r0, r4
   16ba2:	bc0c      	pop	{r2, r3}
   16ba4:	4690      	mov	r8, r2
   16ba6:	4699      	mov	r9, r3
   16ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16baa:	46c0      	nop			; (mov r8, r8)

00016bac <atoi>:
   16bac:	b510      	push	{r4, lr}
   16bae:	220a      	movs	r2, #10
   16bb0:	2100      	movs	r1, #0
   16bb2:	f000 fb7b 	bl	172ac <strtol>
   16bb6:	bd10      	pop	{r4, pc}

00016bb8 <__libc_init_array>:
   16bb8:	4b0e      	ldr	r3, [pc, #56]	; (16bf4 <__libc_init_array+0x3c>)
   16bba:	b570      	push	{r4, r5, r6, lr}
   16bbc:	2500      	movs	r5, #0
   16bbe:	001e      	movs	r6, r3
   16bc0:	4c0d      	ldr	r4, [pc, #52]	; (16bf8 <__libc_init_array+0x40>)
   16bc2:	1ae4      	subs	r4, r4, r3
   16bc4:	10a4      	asrs	r4, r4, #2
   16bc6:	42a5      	cmp	r5, r4
   16bc8:	d004      	beq.n	16bd4 <__libc_init_array+0x1c>
   16bca:	00ab      	lsls	r3, r5, #2
   16bcc:	58f3      	ldr	r3, [r6, r3]
   16bce:	4798      	blx	r3
   16bd0:	3501      	adds	r5, #1
   16bd2:	e7f8      	b.n	16bc6 <__libc_init_array+0xe>
   16bd4:	f003 f90c 	bl	19df0 <_init>
   16bd8:	4b08      	ldr	r3, [pc, #32]	; (16bfc <__libc_init_array+0x44>)
   16bda:	2500      	movs	r5, #0
   16bdc:	001e      	movs	r6, r3
   16bde:	4c08      	ldr	r4, [pc, #32]	; (16c00 <__libc_init_array+0x48>)
   16be0:	1ae4      	subs	r4, r4, r3
   16be2:	10a4      	asrs	r4, r4, #2
   16be4:	42a5      	cmp	r5, r4
   16be6:	d004      	beq.n	16bf2 <__libc_init_array+0x3a>
   16be8:	00ab      	lsls	r3, r5, #2
   16bea:	58f3      	ldr	r3, [r6, r3]
   16bec:	4798      	blx	r3
   16bee:	3501      	adds	r5, #1
   16bf0:	e7f8      	b.n	16be4 <__libc_init_array+0x2c>
   16bf2:	bd70      	pop	{r4, r5, r6, pc}
   16bf4:	00019dfc 	.word	0x00019dfc
   16bf8:	00019dfc 	.word	0x00019dfc
   16bfc:	00019dfc 	.word	0x00019dfc
   16c00:	00019e00 	.word	0x00019e00

00016c04 <malloc>:
   16c04:	b510      	push	{r4, lr}
   16c06:	4b03      	ldr	r3, [pc, #12]	; (16c14 <malloc+0x10>)
   16c08:	0001      	movs	r1, r0
   16c0a:	6818      	ldr	r0, [r3, #0]
   16c0c:	f000 f87a 	bl	16d04 <_malloc_r>
   16c10:	bd10      	pop	{r4, pc}
   16c12:	46c0      	nop			; (mov r8, r8)
   16c14:	2000007c 	.word	0x2000007c

00016c18 <free>:
   16c18:	b510      	push	{r4, lr}
   16c1a:	4b03      	ldr	r3, [pc, #12]	; (16c28 <free+0x10>)
   16c1c:	0001      	movs	r1, r0
   16c1e:	6818      	ldr	r0, [r3, #0]
   16c20:	f000 f82a 	bl	16c78 <_free_r>
   16c24:	bd10      	pop	{r4, pc}
   16c26:	46c0      	nop			; (mov r8, r8)
   16c28:	2000007c 	.word	0x2000007c

00016c2c <memcpy>:
   16c2c:	2300      	movs	r3, #0
   16c2e:	b510      	push	{r4, lr}
   16c30:	429a      	cmp	r2, r3
   16c32:	d003      	beq.n	16c3c <memcpy+0x10>
   16c34:	5ccc      	ldrb	r4, [r1, r3]
   16c36:	54c4      	strb	r4, [r0, r3]
   16c38:	3301      	adds	r3, #1
   16c3a:	e7f9      	b.n	16c30 <memcpy+0x4>
   16c3c:	bd10      	pop	{r4, pc}

00016c3e <memmove>:
   16c3e:	b510      	push	{r4, lr}
   16c40:	4288      	cmp	r0, r1
   16c42:	d902      	bls.n	16c4a <memmove+0xc>
   16c44:	188b      	adds	r3, r1, r2
   16c46:	4298      	cmp	r0, r3
   16c48:	d301      	bcc.n	16c4e <memmove+0x10>
   16c4a:	2300      	movs	r3, #0
   16c4c:	e005      	b.n	16c5a <memmove+0x1c>
   16c4e:	1a9b      	subs	r3, r3, r2
   16c50:	3a01      	subs	r2, #1
   16c52:	d308      	bcc.n	16c66 <memmove+0x28>
   16c54:	5c99      	ldrb	r1, [r3, r2]
   16c56:	5481      	strb	r1, [r0, r2]
   16c58:	e7fa      	b.n	16c50 <memmove+0x12>
   16c5a:	4293      	cmp	r3, r2
   16c5c:	d003      	beq.n	16c66 <memmove+0x28>
   16c5e:	5ccc      	ldrb	r4, [r1, r3]
   16c60:	54c4      	strb	r4, [r0, r3]
   16c62:	3301      	adds	r3, #1
   16c64:	e7f9      	b.n	16c5a <memmove+0x1c>
   16c66:	bd10      	pop	{r4, pc}

00016c68 <memset>:
   16c68:	0003      	movs	r3, r0
   16c6a:	1882      	adds	r2, r0, r2
   16c6c:	4293      	cmp	r3, r2
   16c6e:	d002      	beq.n	16c76 <memset+0xe>
   16c70:	7019      	strb	r1, [r3, #0]
   16c72:	3301      	adds	r3, #1
   16c74:	e7fa      	b.n	16c6c <memset+0x4>
   16c76:	4770      	bx	lr

00016c78 <_free_r>:
   16c78:	b530      	push	{r4, r5, lr}
   16c7a:	2900      	cmp	r1, #0
   16c7c:	d03e      	beq.n	16cfc <_free_r+0x84>
   16c7e:	3904      	subs	r1, #4
   16c80:	680b      	ldr	r3, [r1, #0]
   16c82:	2b00      	cmp	r3, #0
   16c84:	da00      	bge.n	16c88 <_free_r+0x10>
   16c86:	18c9      	adds	r1, r1, r3
   16c88:	4a1d      	ldr	r2, [pc, #116]	; (16d00 <_free_r+0x88>)
   16c8a:	6813      	ldr	r3, [r2, #0]
   16c8c:	0014      	movs	r4, r2
   16c8e:	2b00      	cmp	r3, #0
   16c90:	d102      	bne.n	16c98 <_free_r+0x20>
   16c92:	604b      	str	r3, [r1, #4]
   16c94:	6011      	str	r1, [r2, #0]
   16c96:	e031      	b.n	16cfc <_free_r+0x84>
   16c98:	428b      	cmp	r3, r1
   16c9a:	d90d      	bls.n	16cb8 <_free_r+0x40>
   16c9c:	680a      	ldr	r2, [r1, #0]
   16c9e:	1888      	adds	r0, r1, r2
   16ca0:	4283      	cmp	r3, r0
   16ca2:	d103      	bne.n	16cac <_free_r+0x34>
   16ca4:	6818      	ldr	r0, [r3, #0]
   16ca6:	685b      	ldr	r3, [r3, #4]
   16ca8:	1882      	adds	r2, r0, r2
   16caa:	600a      	str	r2, [r1, #0]
   16cac:	604b      	str	r3, [r1, #4]
   16cae:	6021      	str	r1, [r4, #0]
   16cb0:	e024      	b.n	16cfc <_free_r+0x84>
   16cb2:	428a      	cmp	r2, r1
   16cb4:	d803      	bhi.n	16cbe <_free_r+0x46>
   16cb6:	0013      	movs	r3, r2
   16cb8:	685a      	ldr	r2, [r3, #4]
   16cba:	2a00      	cmp	r2, #0
   16cbc:	d1f9      	bne.n	16cb2 <_free_r+0x3a>
   16cbe:	681d      	ldr	r5, [r3, #0]
   16cc0:	195c      	adds	r4, r3, r5
   16cc2:	428c      	cmp	r4, r1
   16cc4:	d10b      	bne.n	16cde <_free_r+0x66>
   16cc6:	6809      	ldr	r1, [r1, #0]
   16cc8:	1869      	adds	r1, r5, r1
   16cca:	1858      	adds	r0, r3, r1
   16ccc:	6019      	str	r1, [r3, #0]
   16cce:	4282      	cmp	r2, r0
   16cd0:	d114      	bne.n	16cfc <_free_r+0x84>
   16cd2:	6810      	ldr	r0, [r2, #0]
   16cd4:	6852      	ldr	r2, [r2, #4]
   16cd6:	1841      	adds	r1, r0, r1
   16cd8:	6019      	str	r1, [r3, #0]
   16cda:	605a      	str	r2, [r3, #4]
   16cdc:	e00e      	b.n	16cfc <_free_r+0x84>
   16cde:	428c      	cmp	r4, r1
   16ce0:	d902      	bls.n	16ce8 <_free_r+0x70>
   16ce2:	230c      	movs	r3, #12
   16ce4:	6003      	str	r3, [r0, #0]
   16ce6:	e009      	b.n	16cfc <_free_r+0x84>
   16ce8:	6808      	ldr	r0, [r1, #0]
   16cea:	180c      	adds	r4, r1, r0
   16cec:	42a2      	cmp	r2, r4
   16cee:	d103      	bne.n	16cf8 <_free_r+0x80>
   16cf0:	6814      	ldr	r4, [r2, #0]
   16cf2:	6852      	ldr	r2, [r2, #4]
   16cf4:	1820      	adds	r0, r4, r0
   16cf6:	6008      	str	r0, [r1, #0]
   16cf8:	604a      	str	r2, [r1, #4]
   16cfa:	6059      	str	r1, [r3, #4]
   16cfc:	bd30      	pop	{r4, r5, pc}
   16cfe:	46c0      	nop			; (mov r8, r8)
   16d00:	20000234 	.word	0x20000234

00016d04 <_malloc_r>:
   16d04:	2303      	movs	r3, #3
   16d06:	b570      	push	{r4, r5, r6, lr}
   16d08:	1ccd      	adds	r5, r1, #3
   16d0a:	439d      	bics	r5, r3
   16d0c:	3508      	adds	r5, #8
   16d0e:	0006      	movs	r6, r0
   16d10:	2d0c      	cmp	r5, #12
   16d12:	d201      	bcs.n	16d18 <_malloc_r+0x14>
   16d14:	250c      	movs	r5, #12
   16d16:	e005      	b.n	16d24 <_malloc_r+0x20>
   16d18:	2d00      	cmp	r5, #0
   16d1a:	da03      	bge.n	16d24 <_malloc_r+0x20>
   16d1c:	230c      	movs	r3, #12
   16d1e:	2000      	movs	r0, #0
   16d20:	6033      	str	r3, [r6, #0]
   16d22:	e040      	b.n	16da6 <_malloc_r+0xa2>
   16d24:	42a9      	cmp	r1, r5
   16d26:	d8f9      	bhi.n	16d1c <_malloc_r+0x18>
   16d28:	4b1f      	ldr	r3, [pc, #124]	; (16da8 <_malloc_r+0xa4>)
   16d2a:	681c      	ldr	r4, [r3, #0]
   16d2c:	001a      	movs	r2, r3
   16d2e:	0021      	movs	r1, r4
   16d30:	2900      	cmp	r1, #0
   16d32:	d013      	beq.n	16d5c <_malloc_r+0x58>
   16d34:	680b      	ldr	r3, [r1, #0]
   16d36:	1b5b      	subs	r3, r3, r5
   16d38:	d40d      	bmi.n	16d56 <_malloc_r+0x52>
   16d3a:	2b0b      	cmp	r3, #11
   16d3c:	d902      	bls.n	16d44 <_malloc_r+0x40>
   16d3e:	600b      	str	r3, [r1, #0]
   16d40:	18cc      	adds	r4, r1, r3
   16d42:	e01e      	b.n	16d82 <_malloc_r+0x7e>
   16d44:	428c      	cmp	r4, r1
   16d46:	d102      	bne.n	16d4e <_malloc_r+0x4a>
   16d48:	6863      	ldr	r3, [r4, #4]
   16d4a:	6013      	str	r3, [r2, #0]
   16d4c:	e01a      	b.n	16d84 <_malloc_r+0x80>
   16d4e:	684b      	ldr	r3, [r1, #4]
   16d50:	6063      	str	r3, [r4, #4]
   16d52:	000c      	movs	r4, r1
   16d54:	e016      	b.n	16d84 <_malloc_r+0x80>
   16d56:	000c      	movs	r4, r1
   16d58:	6849      	ldr	r1, [r1, #4]
   16d5a:	e7e9      	b.n	16d30 <_malloc_r+0x2c>
   16d5c:	4c13      	ldr	r4, [pc, #76]	; (16dac <_malloc_r+0xa8>)
   16d5e:	6823      	ldr	r3, [r4, #0]
   16d60:	2b00      	cmp	r3, #0
   16d62:	d103      	bne.n	16d6c <_malloc_r+0x68>
   16d64:	0030      	movs	r0, r6
   16d66:	f000 f8bd 	bl	16ee4 <_sbrk_r>
   16d6a:	6020      	str	r0, [r4, #0]
   16d6c:	0029      	movs	r1, r5
   16d6e:	0030      	movs	r0, r6
   16d70:	f000 f8b8 	bl	16ee4 <_sbrk_r>
   16d74:	1c43      	adds	r3, r0, #1
   16d76:	d0d1      	beq.n	16d1c <_malloc_r+0x18>
   16d78:	2303      	movs	r3, #3
   16d7a:	1cc4      	adds	r4, r0, #3
   16d7c:	439c      	bics	r4, r3
   16d7e:	42a0      	cmp	r0, r4
   16d80:	d10a      	bne.n	16d98 <_malloc_r+0x94>
   16d82:	6025      	str	r5, [r4, #0]
   16d84:	0020      	movs	r0, r4
   16d86:	2207      	movs	r2, #7
   16d88:	300b      	adds	r0, #11
   16d8a:	1d23      	adds	r3, r4, #4
   16d8c:	4390      	bics	r0, r2
   16d8e:	1ac3      	subs	r3, r0, r3
   16d90:	d009      	beq.n	16da6 <_malloc_r+0xa2>
   16d92:	425a      	negs	r2, r3
   16d94:	50e2      	str	r2, [r4, r3]
   16d96:	e006      	b.n	16da6 <_malloc_r+0xa2>
   16d98:	1a21      	subs	r1, r4, r0
   16d9a:	0030      	movs	r0, r6
   16d9c:	f000 f8a2 	bl	16ee4 <_sbrk_r>
   16da0:	1c43      	adds	r3, r0, #1
   16da2:	d1ee      	bne.n	16d82 <_malloc_r+0x7e>
   16da4:	e7ba      	b.n	16d1c <_malloc_r+0x18>
   16da6:	bd70      	pop	{r4, r5, r6, pc}
   16da8:	20000234 	.word	0x20000234
   16dac:	20000230 	.word	0x20000230

00016db0 <iprintf>:
   16db0:	b40f      	push	{r0, r1, r2, r3}
   16db2:	4b0b      	ldr	r3, [pc, #44]	; (16de0 <iprintf+0x30>)
   16db4:	b513      	push	{r0, r1, r4, lr}
   16db6:	681c      	ldr	r4, [r3, #0]
   16db8:	2c00      	cmp	r4, #0
   16dba:	d005      	beq.n	16dc8 <iprintf+0x18>
   16dbc:	69a3      	ldr	r3, [r4, #24]
   16dbe:	2b00      	cmp	r3, #0
   16dc0:	d102      	bne.n	16dc8 <iprintf+0x18>
   16dc2:	0020      	movs	r0, r4
   16dc4:	f000 fc40 	bl	17648 <__sinit>
   16dc8:	ab05      	add	r3, sp, #20
   16dca:	9a04      	ldr	r2, [sp, #16]
   16dcc:	68a1      	ldr	r1, [r4, #8]
   16dce:	0020      	movs	r0, r4
   16dd0:	9301      	str	r3, [sp, #4]
   16dd2:	f000 feb9 	bl	17b48 <_vfiprintf_r>
   16dd6:	bc16      	pop	{r1, r2, r4}
   16dd8:	bc08      	pop	{r3}
   16dda:	b004      	add	sp, #16
   16ddc:	4718      	bx	r3
   16dde:	46c0      	nop			; (mov r8, r8)
   16de0:	2000007c 	.word	0x2000007c

00016de4 <putchar>:
   16de4:	4b08      	ldr	r3, [pc, #32]	; (16e08 <putchar+0x24>)
   16de6:	b570      	push	{r4, r5, r6, lr}
   16de8:	681c      	ldr	r4, [r3, #0]
   16dea:	0005      	movs	r5, r0
   16dec:	2c00      	cmp	r4, #0
   16dee:	d005      	beq.n	16dfc <putchar+0x18>
   16df0:	69a3      	ldr	r3, [r4, #24]
   16df2:	2b00      	cmp	r3, #0
   16df4:	d102      	bne.n	16dfc <putchar+0x18>
   16df6:	0020      	movs	r0, r4
   16df8:	f000 fc26 	bl	17648 <__sinit>
   16dfc:	0029      	movs	r1, r5
   16dfe:	68a2      	ldr	r2, [r4, #8]
   16e00:	0020      	movs	r0, r4
   16e02:	f001 f94d 	bl	180a0 <_putc_r>
   16e06:	bd70      	pop	{r4, r5, r6, pc}
   16e08:	2000007c 	.word	0x2000007c

00016e0c <_puts_r>:
   16e0c:	b570      	push	{r4, r5, r6, lr}
   16e0e:	0005      	movs	r5, r0
   16e10:	000e      	movs	r6, r1
   16e12:	2800      	cmp	r0, #0
   16e14:	d004      	beq.n	16e20 <_puts_r+0x14>
   16e16:	6983      	ldr	r3, [r0, #24]
   16e18:	2b00      	cmp	r3, #0
   16e1a:	d101      	bne.n	16e20 <_puts_r+0x14>
   16e1c:	f000 fc14 	bl	17648 <__sinit>
   16e20:	69ab      	ldr	r3, [r5, #24]
   16e22:	68ac      	ldr	r4, [r5, #8]
   16e24:	2b00      	cmp	r3, #0
   16e26:	d102      	bne.n	16e2e <_puts_r+0x22>
   16e28:	0028      	movs	r0, r5
   16e2a:	f000 fc0d 	bl	17648 <__sinit>
   16e2e:	4b25      	ldr	r3, [pc, #148]	; (16ec4 <_puts_r+0xb8>)
   16e30:	429c      	cmp	r4, r3
   16e32:	d101      	bne.n	16e38 <_puts_r+0x2c>
   16e34:	686c      	ldr	r4, [r5, #4]
   16e36:	e008      	b.n	16e4a <_puts_r+0x3e>
   16e38:	4b23      	ldr	r3, [pc, #140]	; (16ec8 <_puts_r+0xbc>)
   16e3a:	429c      	cmp	r4, r3
   16e3c:	d101      	bne.n	16e42 <_puts_r+0x36>
   16e3e:	68ac      	ldr	r4, [r5, #8]
   16e40:	e003      	b.n	16e4a <_puts_r+0x3e>
   16e42:	4b22      	ldr	r3, [pc, #136]	; (16ecc <_puts_r+0xc0>)
   16e44:	429c      	cmp	r4, r3
   16e46:	d100      	bne.n	16e4a <_puts_r+0x3e>
   16e48:	68ec      	ldr	r4, [r5, #12]
   16e4a:	89a3      	ldrh	r3, [r4, #12]
   16e4c:	071b      	lsls	r3, r3, #28
   16e4e:	d502      	bpl.n	16e56 <_puts_r+0x4a>
   16e50:	6923      	ldr	r3, [r4, #16]
   16e52:	2b00      	cmp	r3, #0
   16e54:	d111      	bne.n	16e7a <_puts_r+0x6e>
   16e56:	0021      	movs	r1, r4
   16e58:	0028      	movs	r0, r5
   16e5a:	f000 fa8b 	bl	17374 <__swsetup_r>
   16e5e:	2800      	cmp	r0, #0
   16e60:	d00b      	beq.n	16e7a <_puts_r+0x6e>
   16e62:	2001      	movs	r0, #1
   16e64:	4240      	negs	r0, r0
   16e66:	e02b      	b.n	16ec0 <_puts_r+0xb4>
   16e68:	3b01      	subs	r3, #1
   16e6a:	3601      	adds	r6, #1
   16e6c:	60a3      	str	r3, [r4, #8]
   16e6e:	2b00      	cmp	r3, #0
   16e70:	db08      	blt.n	16e84 <_puts_r+0x78>
   16e72:	6823      	ldr	r3, [r4, #0]
   16e74:	1c5a      	adds	r2, r3, #1
   16e76:	6022      	str	r2, [r4, #0]
   16e78:	7019      	strb	r1, [r3, #0]
   16e7a:	7831      	ldrb	r1, [r6, #0]
   16e7c:	68a3      	ldr	r3, [r4, #8]
   16e7e:	2900      	cmp	r1, #0
   16e80:	d1f2      	bne.n	16e68 <_puts_r+0x5c>
   16e82:	e00b      	b.n	16e9c <_puts_r+0x90>
   16e84:	69a2      	ldr	r2, [r4, #24]
   16e86:	4293      	cmp	r3, r2
   16e88:	db01      	blt.n	16e8e <_puts_r+0x82>
   16e8a:	290a      	cmp	r1, #10
   16e8c:	d1f1      	bne.n	16e72 <_puts_r+0x66>
   16e8e:	0022      	movs	r2, r4
   16e90:	0028      	movs	r0, r5
   16e92:	f000 fa17 	bl	172c4 <__swbuf_r>
   16e96:	1c43      	adds	r3, r0, #1
   16e98:	d1ef      	bne.n	16e7a <_puts_r+0x6e>
   16e9a:	e7e2      	b.n	16e62 <_puts_r+0x56>
   16e9c:	3b01      	subs	r3, #1
   16e9e:	60a3      	str	r3, [r4, #8]
   16ea0:	2b00      	cmp	r3, #0
   16ea2:	da08      	bge.n	16eb6 <_puts_r+0xaa>
   16ea4:	0022      	movs	r2, r4
   16ea6:	310a      	adds	r1, #10
   16ea8:	0028      	movs	r0, r5
   16eaa:	f000 fa0b 	bl	172c4 <__swbuf_r>
   16eae:	1c43      	adds	r3, r0, #1
   16eb0:	d0d7      	beq.n	16e62 <_puts_r+0x56>
   16eb2:	200a      	movs	r0, #10
   16eb4:	e004      	b.n	16ec0 <_puts_r+0xb4>
   16eb6:	200a      	movs	r0, #10
   16eb8:	6823      	ldr	r3, [r4, #0]
   16eba:	1c5a      	adds	r2, r3, #1
   16ebc:	6022      	str	r2, [r4, #0]
   16ebe:	7018      	strb	r0, [r3, #0]
   16ec0:	bd70      	pop	{r4, r5, r6, pc}
   16ec2:	46c0      	nop			; (mov r8, r8)
   16ec4:	00019d5c 	.word	0x00019d5c
   16ec8:	00019d7c 	.word	0x00019d7c
   16ecc:	00019d9c 	.word	0x00019d9c

00016ed0 <puts>:
   16ed0:	b510      	push	{r4, lr}
   16ed2:	4b03      	ldr	r3, [pc, #12]	; (16ee0 <puts+0x10>)
   16ed4:	0001      	movs	r1, r0
   16ed6:	6818      	ldr	r0, [r3, #0]
   16ed8:	f7ff ff98 	bl	16e0c <_puts_r>
   16edc:	bd10      	pop	{r4, pc}
   16ede:	46c0      	nop			; (mov r8, r8)
   16ee0:	2000007c 	.word	0x2000007c

00016ee4 <_sbrk_r>:
   16ee4:	2300      	movs	r3, #0
   16ee6:	b570      	push	{r4, r5, r6, lr}
   16ee8:	4c06      	ldr	r4, [pc, #24]	; (16f04 <_sbrk_r+0x20>)
   16eea:	0005      	movs	r5, r0
   16eec:	0008      	movs	r0, r1
   16eee:	6023      	str	r3, [r4, #0]
   16ef0:	f7f9 ff08 	bl	10d04 <_sbrk>
   16ef4:	1c43      	adds	r3, r0, #1
   16ef6:	d103      	bne.n	16f00 <_sbrk_r+0x1c>
   16ef8:	6823      	ldr	r3, [r4, #0]
   16efa:	2b00      	cmp	r3, #0
   16efc:	d000      	beq.n	16f00 <_sbrk_r+0x1c>
   16efe:	602b      	str	r3, [r5, #0]
   16f00:	bd70      	pop	{r4, r5, r6, pc}
   16f02:	46c0      	nop			; (mov r8, r8)
   16f04:	20000da0 	.word	0x20000da0

00016f08 <setbuf>:
   16f08:	424a      	negs	r2, r1
   16f0a:	414a      	adcs	r2, r1
   16f0c:	2380      	movs	r3, #128	; 0x80
   16f0e:	b510      	push	{r4, lr}
   16f10:	0052      	lsls	r2, r2, #1
   16f12:	00db      	lsls	r3, r3, #3
   16f14:	f000 f802 	bl	16f1c <setvbuf>
   16f18:	bd10      	pop	{r4, pc}
	...

00016f1c <setvbuf>:
   16f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f1e:	001d      	movs	r5, r3
   16f20:	4b51      	ldr	r3, [pc, #324]	; (17068 <setvbuf+0x14c>)
   16f22:	b085      	sub	sp, #20
   16f24:	681e      	ldr	r6, [r3, #0]
   16f26:	0004      	movs	r4, r0
   16f28:	000f      	movs	r7, r1
   16f2a:	9200      	str	r2, [sp, #0]
   16f2c:	2e00      	cmp	r6, #0
   16f2e:	d005      	beq.n	16f3c <setvbuf+0x20>
   16f30:	69b3      	ldr	r3, [r6, #24]
   16f32:	2b00      	cmp	r3, #0
   16f34:	d102      	bne.n	16f3c <setvbuf+0x20>
   16f36:	0030      	movs	r0, r6
   16f38:	f000 fb86 	bl	17648 <__sinit>
   16f3c:	4b4b      	ldr	r3, [pc, #300]	; (1706c <setvbuf+0x150>)
   16f3e:	429c      	cmp	r4, r3
   16f40:	d101      	bne.n	16f46 <setvbuf+0x2a>
   16f42:	6874      	ldr	r4, [r6, #4]
   16f44:	e008      	b.n	16f58 <setvbuf+0x3c>
   16f46:	4b4a      	ldr	r3, [pc, #296]	; (17070 <setvbuf+0x154>)
   16f48:	429c      	cmp	r4, r3
   16f4a:	d101      	bne.n	16f50 <setvbuf+0x34>
   16f4c:	68b4      	ldr	r4, [r6, #8]
   16f4e:	e003      	b.n	16f58 <setvbuf+0x3c>
   16f50:	4b48      	ldr	r3, [pc, #288]	; (17074 <setvbuf+0x158>)
   16f52:	429c      	cmp	r4, r3
   16f54:	d100      	bne.n	16f58 <setvbuf+0x3c>
   16f56:	68f4      	ldr	r4, [r6, #12]
   16f58:	9b00      	ldr	r3, [sp, #0]
   16f5a:	2b02      	cmp	r3, #2
   16f5c:	d005      	beq.n	16f6a <setvbuf+0x4e>
   16f5e:	2b01      	cmp	r3, #1
   16f60:	d900      	bls.n	16f64 <setvbuf+0x48>
   16f62:	e07c      	b.n	1705e <setvbuf+0x142>
   16f64:	2d00      	cmp	r5, #0
   16f66:	da00      	bge.n	16f6a <setvbuf+0x4e>
   16f68:	e079      	b.n	1705e <setvbuf+0x142>
   16f6a:	0021      	movs	r1, r4
   16f6c:	0030      	movs	r0, r6
   16f6e:	f000 fafd 	bl	1756c <_fflush_r>
   16f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16f74:	2900      	cmp	r1, #0
   16f76:	d008      	beq.n	16f8a <setvbuf+0x6e>
   16f78:	0023      	movs	r3, r4
   16f7a:	3344      	adds	r3, #68	; 0x44
   16f7c:	4299      	cmp	r1, r3
   16f7e:	d002      	beq.n	16f86 <setvbuf+0x6a>
   16f80:	0030      	movs	r0, r6
   16f82:	f7ff fe79 	bl	16c78 <_free_r>
   16f86:	2300      	movs	r3, #0
   16f88:	6363      	str	r3, [r4, #52]	; 0x34
   16f8a:	2300      	movs	r3, #0
   16f8c:	61a3      	str	r3, [r4, #24]
   16f8e:	6063      	str	r3, [r4, #4]
   16f90:	89a3      	ldrh	r3, [r4, #12]
   16f92:	061b      	lsls	r3, r3, #24
   16f94:	d503      	bpl.n	16f9e <setvbuf+0x82>
   16f96:	6921      	ldr	r1, [r4, #16]
   16f98:	0030      	movs	r0, r6
   16f9a:	f7ff fe6d 	bl	16c78 <_free_r>
   16f9e:	89a2      	ldrh	r2, [r4, #12]
   16fa0:	4b35      	ldr	r3, [pc, #212]	; (17078 <setvbuf+0x15c>)
   16fa2:	4013      	ands	r3, r2
   16fa4:	81a3      	strh	r3, [r4, #12]
   16fa6:	9b00      	ldr	r3, [sp, #0]
   16fa8:	2b02      	cmp	r3, #2
   16faa:	d021      	beq.n	16ff0 <setvbuf+0xd4>
   16fac:	ab03      	add	r3, sp, #12
   16fae:	aa02      	add	r2, sp, #8
   16fb0:	0021      	movs	r1, r4
   16fb2:	0030      	movs	r0, r6
   16fb4:	f000 fbdc 	bl	17770 <__swhatbuf_r>
   16fb8:	89a3      	ldrh	r3, [r4, #12]
   16fba:	4318      	orrs	r0, r3
   16fbc:	81a0      	strh	r0, [r4, #12]
   16fbe:	2d00      	cmp	r5, #0
   16fc0:	d101      	bne.n	16fc6 <setvbuf+0xaa>
   16fc2:	9d02      	ldr	r5, [sp, #8]
   16fc4:	e001      	b.n	16fca <setvbuf+0xae>
   16fc6:	2f00      	cmp	r7, #0
   16fc8:	d125      	bne.n	17016 <setvbuf+0xfa>
   16fca:	0028      	movs	r0, r5
   16fcc:	f7ff fe1a 	bl	16c04 <malloc>
   16fd0:	9501      	str	r5, [sp, #4]
   16fd2:	1e07      	subs	r7, r0, #0
   16fd4:	d11a      	bne.n	1700c <setvbuf+0xf0>
   16fd6:	9b02      	ldr	r3, [sp, #8]
   16fd8:	9301      	str	r3, [sp, #4]
   16fda:	42ab      	cmp	r3, r5
   16fdc:	d102      	bne.n	16fe4 <setvbuf+0xc8>
   16fde:	2001      	movs	r0, #1
   16fe0:	4240      	negs	r0, r0
   16fe2:	e006      	b.n	16ff2 <setvbuf+0xd6>
   16fe4:	9801      	ldr	r0, [sp, #4]
   16fe6:	f7ff fe0d 	bl	16c04 <malloc>
   16fea:	1e07      	subs	r7, r0, #0
   16fec:	d10e      	bne.n	1700c <setvbuf+0xf0>
   16fee:	e7f6      	b.n	16fde <setvbuf+0xc2>
   16ff0:	2000      	movs	r0, #0
   16ff2:	2202      	movs	r2, #2
   16ff4:	89a3      	ldrh	r3, [r4, #12]
   16ff6:	4313      	orrs	r3, r2
   16ff8:	81a3      	strh	r3, [r4, #12]
   16ffa:	2300      	movs	r3, #0
   16ffc:	60a3      	str	r3, [r4, #8]
   16ffe:	0023      	movs	r3, r4
   17000:	3347      	adds	r3, #71	; 0x47
   17002:	6023      	str	r3, [r4, #0]
   17004:	6123      	str	r3, [r4, #16]
   17006:	2301      	movs	r3, #1
   17008:	6163      	str	r3, [r4, #20]
   1700a:	e02a      	b.n	17062 <setvbuf+0x146>
   1700c:	2280      	movs	r2, #128	; 0x80
   1700e:	89a3      	ldrh	r3, [r4, #12]
   17010:	9d01      	ldr	r5, [sp, #4]
   17012:	4313      	orrs	r3, r2
   17014:	81a3      	strh	r3, [r4, #12]
   17016:	69b3      	ldr	r3, [r6, #24]
   17018:	2b00      	cmp	r3, #0
   1701a:	d102      	bne.n	17022 <setvbuf+0x106>
   1701c:	0030      	movs	r0, r6
   1701e:	f000 fb13 	bl	17648 <__sinit>
   17022:	9b00      	ldr	r3, [sp, #0]
   17024:	2b01      	cmp	r3, #1
   17026:	d103      	bne.n	17030 <setvbuf+0x114>
   17028:	89a3      	ldrh	r3, [r4, #12]
   1702a:	9a00      	ldr	r2, [sp, #0]
   1702c:	431a      	orrs	r2, r3
   1702e:	81a2      	strh	r2, [r4, #12]
   17030:	2308      	movs	r3, #8
   17032:	89a2      	ldrh	r2, [r4, #12]
   17034:	6027      	str	r7, [r4, #0]
   17036:	4013      	ands	r3, r2
   17038:	6127      	str	r7, [r4, #16]
   1703a:	6165      	str	r5, [r4, #20]
   1703c:	1e18      	subs	r0, r3, #0
   1703e:	d00c      	beq.n	1705a <setvbuf+0x13e>
   17040:	2301      	movs	r3, #1
   17042:	401a      	ands	r2, r3
   17044:	2300      	movs	r3, #0
   17046:	1e10      	subs	r0, r2, #0
   17048:	4298      	cmp	r0, r3
   1704a:	d004      	beq.n	17056 <setvbuf+0x13a>
   1704c:	426d      	negs	r5, r5
   1704e:	60a3      	str	r3, [r4, #8]
   17050:	61a5      	str	r5, [r4, #24]
   17052:	0018      	movs	r0, r3
   17054:	e005      	b.n	17062 <setvbuf+0x146>
   17056:	60a5      	str	r5, [r4, #8]
   17058:	e003      	b.n	17062 <setvbuf+0x146>
   1705a:	60a3      	str	r3, [r4, #8]
   1705c:	e001      	b.n	17062 <setvbuf+0x146>
   1705e:	2001      	movs	r0, #1
   17060:	4240      	negs	r0, r0
   17062:	b005      	add	sp, #20
   17064:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17066:	46c0      	nop			; (mov r8, r8)
   17068:	2000007c 	.word	0x2000007c
   1706c:	00019d5c 	.word	0x00019d5c
   17070:	00019d7c 	.word	0x00019d7c
   17074:	00019d9c 	.word	0x00019d9c
   17078:	fffff35c 	.word	0xfffff35c

0001707c <siprintf>:
   1707c:	b40e      	push	{r1, r2, r3}
   1707e:	b510      	push	{r4, lr}
   17080:	b09d      	sub	sp, #116	; 0x74
   17082:	a902      	add	r1, sp, #8
   17084:	9002      	str	r0, [sp, #8]
   17086:	6108      	str	r0, [r1, #16]
   17088:	480b      	ldr	r0, [pc, #44]	; (170b8 <siprintf+0x3c>)
   1708a:	2482      	movs	r4, #130	; 0x82
   1708c:	6088      	str	r0, [r1, #8]
   1708e:	6148      	str	r0, [r1, #20]
   17090:	2001      	movs	r0, #1
   17092:	4240      	negs	r0, r0
   17094:	ab1f      	add	r3, sp, #124	; 0x7c
   17096:	81c8      	strh	r0, [r1, #14]
   17098:	4808      	ldr	r0, [pc, #32]	; (170bc <siprintf+0x40>)
   1709a:	cb04      	ldmia	r3!, {r2}
   1709c:	00a4      	lsls	r4, r4, #2
   1709e:	6800      	ldr	r0, [r0, #0]
   170a0:	9301      	str	r3, [sp, #4]
   170a2:	818c      	strh	r4, [r1, #12]
   170a4:	f000 fc2a 	bl	178fc <_svfiprintf_r>
   170a8:	2300      	movs	r3, #0
   170aa:	9a02      	ldr	r2, [sp, #8]
   170ac:	7013      	strb	r3, [r2, #0]
   170ae:	b01d      	add	sp, #116	; 0x74
   170b0:	bc10      	pop	{r4}
   170b2:	bc08      	pop	{r3}
   170b4:	b003      	add	sp, #12
   170b6:	4718      	bx	r3
   170b8:	7fffffff 	.word	0x7fffffff
   170bc:	2000007c 	.word	0x2000007c

000170c0 <strcmp>:
   170c0:	7802      	ldrb	r2, [r0, #0]
   170c2:	780b      	ldrb	r3, [r1, #0]
   170c4:	2a00      	cmp	r2, #0
   170c6:	d003      	beq.n	170d0 <strcmp+0x10>
   170c8:	3001      	adds	r0, #1
   170ca:	3101      	adds	r1, #1
   170cc:	429a      	cmp	r2, r3
   170ce:	d0f7      	beq.n	170c0 <strcmp>
   170d0:	1ad0      	subs	r0, r2, r3
   170d2:	4770      	bx	lr

000170d4 <strcpy>:
   170d4:	1c03      	adds	r3, r0, #0
   170d6:	780a      	ldrb	r2, [r1, #0]
   170d8:	3101      	adds	r1, #1
   170da:	701a      	strb	r2, [r3, #0]
   170dc:	3301      	adds	r3, #1
   170de:	2a00      	cmp	r2, #0
   170e0:	d1f9      	bne.n	170d6 <strcpy+0x2>
   170e2:	4770      	bx	lr

000170e4 <strdup>:
   170e4:	b510      	push	{r4, lr}
   170e6:	4b03      	ldr	r3, [pc, #12]	; (170f4 <strdup+0x10>)
   170e8:	0001      	movs	r1, r0
   170ea:	6818      	ldr	r0, [r3, #0]
   170ec:	f000 f804 	bl	170f8 <_strdup_r>
   170f0:	bd10      	pop	{r4, pc}
   170f2:	46c0      	nop			; (mov r8, r8)
   170f4:	2000007c 	.word	0x2000007c

000170f8 <_strdup_r>:
   170f8:	b570      	push	{r4, r5, r6, lr}
   170fa:	0005      	movs	r5, r0
   170fc:	0008      	movs	r0, r1
   170fe:	000e      	movs	r6, r1
   17100:	f000 f80d 	bl	1711e <strlen>
   17104:	1c44      	adds	r4, r0, #1
   17106:	0021      	movs	r1, r4
   17108:	0028      	movs	r0, r5
   1710a:	f7ff fdfb 	bl	16d04 <_malloc_r>
   1710e:	1e05      	subs	r5, r0, #0
   17110:	d003      	beq.n	1711a <_strdup_r+0x22>
   17112:	0022      	movs	r2, r4
   17114:	0031      	movs	r1, r6
   17116:	f7ff fd89 	bl	16c2c <memcpy>
   1711a:	0028      	movs	r0, r5
   1711c:	bd70      	pop	{r4, r5, r6, pc}

0001711e <strlen>:
   1711e:	2300      	movs	r3, #0
   17120:	5cc2      	ldrb	r2, [r0, r3]
   17122:	3301      	adds	r3, #1
   17124:	2a00      	cmp	r2, #0
   17126:	d1fb      	bne.n	17120 <strlen+0x2>
   17128:	1e58      	subs	r0, r3, #1
   1712a:	4770      	bx	lr

0001712c <strncmp>:
   1712c:	2300      	movs	r3, #0
   1712e:	b530      	push	{r4, r5, lr}
   17130:	429a      	cmp	r2, r3
   17132:	d00b      	beq.n	1714c <strncmp+0x20>
   17134:	3a01      	subs	r2, #1
   17136:	5cc4      	ldrb	r4, [r0, r3]
   17138:	5ccd      	ldrb	r5, [r1, r3]
   1713a:	42ac      	cmp	r4, r5
   1713c:	d105      	bne.n	1714a <strncmp+0x1e>
   1713e:	429a      	cmp	r2, r3
   17140:	d002      	beq.n	17148 <strncmp+0x1c>
   17142:	3301      	adds	r3, #1
   17144:	2c00      	cmp	r4, #0
   17146:	d1f6      	bne.n	17136 <strncmp+0xa>
   17148:	0025      	movs	r5, r4
   1714a:	1b63      	subs	r3, r4, r5
   1714c:	0018      	movs	r0, r3
   1714e:	bd30      	pop	{r4, r5, pc}

00017150 <strstr>:
   17150:	b510      	push	{r4, lr}
   17152:	7803      	ldrb	r3, [r0, #0]
   17154:	0002      	movs	r2, r0
   17156:	2b00      	cmp	r3, #0
   17158:	d105      	bne.n	17166 <strstr+0x16>
   1715a:	7809      	ldrb	r1, [r1, #0]
   1715c:	0018      	movs	r0, r3
   1715e:	2900      	cmp	r1, #0
   17160:	d00d      	beq.n	1717e <strstr+0x2e>
   17162:	e00f      	b.n	17184 <strstr+0x34>
   17164:	3201      	adds	r2, #1
   17166:	7813      	ldrb	r3, [r2, #0]
   17168:	2b00      	cmp	r3, #0
   1716a:	d00a      	beq.n	17182 <strstr+0x32>
   1716c:	2300      	movs	r3, #0
   1716e:	5cc8      	ldrb	r0, [r1, r3]
   17170:	2800      	cmp	r0, #0
   17172:	d004      	beq.n	1717e <strstr+0x2e>
   17174:	5cd4      	ldrb	r4, [r2, r3]
   17176:	4284      	cmp	r4, r0
   17178:	d1f4      	bne.n	17164 <strstr+0x14>
   1717a:	3301      	adds	r3, #1
   1717c:	e7f7      	b.n	1716e <strstr+0x1e>
   1717e:	0010      	movs	r0, r2
   17180:	e000      	b.n	17184 <strstr+0x34>
   17182:	0018      	movs	r0, r3
   17184:	bd10      	pop	{r4, pc}
	...

00017188 <_strtol_r>:
   17188:	b5f0      	push	{r4, r5, r6, r7, lr}
   1718a:	001e      	movs	r6, r3
   1718c:	4b45      	ldr	r3, [pc, #276]	; (172a4 <_strtol_r+0x11c>)
   1718e:	b087      	sub	sp, #28
   17190:	681b      	ldr	r3, [r3, #0]
   17192:	9201      	str	r2, [sp, #4]
   17194:	9302      	str	r3, [sp, #8]
   17196:	2208      	movs	r2, #8
   17198:	000b      	movs	r3, r1
   1719a:	9005      	str	r0, [sp, #20]
   1719c:	9103      	str	r1, [sp, #12]
   1719e:	781c      	ldrb	r4, [r3, #0]
   171a0:	9902      	ldr	r1, [sp, #8]
   171a2:	1c5d      	adds	r5, r3, #1
   171a4:	1909      	adds	r1, r1, r4
   171a6:	7848      	ldrb	r0, [r1, #1]
   171a8:	4010      	ands	r0, r2
   171aa:	d001      	beq.n	171b0 <_strtol_r+0x28>
   171ac:	002b      	movs	r3, r5
   171ae:	e7f6      	b.n	1719e <_strtol_r+0x16>
   171b0:	2c2d      	cmp	r4, #45	; 0x2d
   171b2:	d104      	bne.n	171be <_strtol_r+0x36>
   171b4:	1c9d      	adds	r5, r3, #2
   171b6:	785c      	ldrb	r4, [r3, #1]
   171b8:	2301      	movs	r3, #1
   171ba:	9300      	str	r3, [sp, #0]
   171bc:	e004      	b.n	171c8 <_strtol_r+0x40>
   171be:	9000      	str	r0, [sp, #0]
   171c0:	2c2b      	cmp	r4, #43	; 0x2b
   171c2:	d101      	bne.n	171c8 <_strtol_r+0x40>
   171c4:	785c      	ldrb	r4, [r3, #1]
   171c6:	1c9d      	adds	r5, r3, #2
   171c8:	2e00      	cmp	r6, #0
   171ca:	d002      	beq.n	171d2 <_strtol_r+0x4a>
   171cc:	2e10      	cmp	r6, #16
   171ce:	d10a      	bne.n	171e6 <_strtol_r+0x5e>
   171d0:	e062      	b.n	17298 <_strtol_r+0x110>
   171d2:	2c30      	cmp	r4, #48	; 0x30
   171d4:	d15e      	bne.n	17294 <_strtol_r+0x10c>
   171d6:	2220      	movs	r2, #32
   171d8:	782b      	ldrb	r3, [r5, #0]
   171da:	4393      	bics	r3, r2
   171dc:	2b58      	cmp	r3, #88	; 0x58
   171de:	d154      	bne.n	1728a <_strtol_r+0x102>
   171e0:	2610      	movs	r6, #16
   171e2:	786c      	ldrb	r4, [r5, #1]
   171e4:	3502      	adds	r5, #2
   171e6:	9f00      	ldr	r7, [sp, #0]
   171e8:	0031      	movs	r1, r6
   171ea:	1e7b      	subs	r3, r7, #1
   171ec:	419f      	sbcs	r7, r3
   171ee:	4b2e      	ldr	r3, [pc, #184]	; (172a8 <_strtol_r+0x120>)
   171f0:	18ff      	adds	r7, r7, r3
   171f2:	0038      	movs	r0, r7
   171f4:	f7ff fbbe 	bl	16974 <__aeabi_uidivmod>
   171f8:	0038      	movs	r0, r7
   171fa:	9104      	str	r1, [sp, #16]
   171fc:	0031      	movs	r1, r6
   171fe:	f7ff fb33 	bl	16868 <__aeabi_uidiv>
   17202:	2300      	movs	r3, #0
   17204:	2203      	movs	r2, #3
   17206:	0007      	movs	r7, r0
   17208:	4694      	mov	ip, r2
   1720a:	0018      	movs	r0, r3
   1720c:	9a02      	ldr	r2, [sp, #8]
   1720e:	1912      	adds	r2, r2, r4
   17210:	7851      	ldrb	r1, [r2, #1]
   17212:	2204      	movs	r2, #4
   17214:	4211      	tst	r1, r2
   17216:	d001      	beq.n	1721c <_strtol_r+0x94>
   17218:	3c30      	subs	r4, #48	; 0x30
   1721a:	e007      	b.n	1722c <_strtol_r+0xa4>
   1721c:	4662      	mov	r2, ip
   1721e:	4011      	ands	r1, r2
   17220:	d017      	beq.n	17252 <_strtol_r+0xca>
   17222:	2237      	movs	r2, #55	; 0x37
   17224:	2901      	cmp	r1, #1
   17226:	d000      	beq.n	1722a <_strtol_r+0xa2>
   17228:	3220      	adds	r2, #32
   1722a:	1aa4      	subs	r4, r4, r2
   1722c:	42a6      	cmp	r6, r4
   1722e:	dd10      	ble.n	17252 <_strtol_r+0xca>
   17230:	1c5a      	adds	r2, r3, #1
   17232:	d00b      	beq.n	1724c <_strtol_r+0xc4>
   17234:	42b8      	cmp	r0, r7
   17236:	d807      	bhi.n	17248 <_strtol_r+0xc0>
   17238:	d102      	bne.n	17240 <_strtol_r+0xb8>
   1723a:	9b04      	ldr	r3, [sp, #16]
   1723c:	429c      	cmp	r4, r3
   1723e:	dc03      	bgt.n	17248 <_strtol_r+0xc0>
   17240:	4370      	muls	r0, r6
   17242:	2301      	movs	r3, #1
   17244:	1820      	adds	r0, r4, r0
   17246:	e001      	b.n	1724c <_strtol_r+0xc4>
   17248:	2301      	movs	r3, #1
   1724a:	425b      	negs	r3, r3
   1724c:	782c      	ldrb	r4, [r5, #0]
   1724e:	3501      	adds	r5, #1
   17250:	e7dc      	b.n	1720c <_strtol_r+0x84>
   17252:	1c5a      	adds	r2, r3, #1
   17254:	d10b      	bne.n	1726e <_strtol_r+0xe6>
   17256:	9800      	ldr	r0, [sp, #0]
   17258:	9a05      	ldr	r2, [sp, #20]
   1725a:	1e43      	subs	r3, r0, #1
   1725c:	4198      	sbcs	r0, r3
   1725e:	4b12      	ldr	r3, [pc, #72]	; (172a8 <_strtol_r+0x120>)
   17260:	18c0      	adds	r0, r0, r3
   17262:	2322      	movs	r3, #34	; 0x22
   17264:	6013      	str	r3, [r2, #0]
   17266:	9b01      	ldr	r3, [sp, #4]
   17268:	2b00      	cmp	r3, #0
   1726a:	d10a      	bne.n	17282 <_strtol_r+0xfa>
   1726c:	e017      	b.n	1729e <_strtol_r+0x116>
   1726e:	9a00      	ldr	r2, [sp, #0]
   17270:	2a00      	cmp	r2, #0
   17272:	d000      	beq.n	17276 <_strtol_r+0xee>
   17274:	4240      	negs	r0, r0
   17276:	9a01      	ldr	r2, [sp, #4]
   17278:	2a00      	cmp	r2, #0
   1727a:	d010      	beq.n	1729e <_strtol_r+0x116>
   1727c:	9a03      	ldr	r2, [sp, #12]
   1727e:	2b00      	cmp	r3, #0
   17280:	d000      	beq.n	17284 <_strtol_r+0xfc>
   17282:	1e6a      	subs	r2, r5, #1
   17284:	9b01      	ldr	r3, [sp, #4]
   17286:	601a      	str	r2, [r3, #0]
   17288:	e009      	b.n	1729e <_strtol_r+0x116>
   1728a:	2430      	movs	r4, #48	; 0x30
   1728c:	2e00      	cmp	r6, #0
   1728e:	d1aa      	bne.n	171e6 <_strtol_r+0x5e>
   17290:	2608      	movs	r6, #8
   17292:	e7a8      	b.n	171e6 <_strtol_r+0x5e>
   17294:	260a      	movs	r6, #10
   17296:	e7a6      	b.n	171e6 <_strtol_r+0x5e>
   17298:	2c30      	cmp	r4, #48	; 0x30
   1729a:	d09c      	beq.n	171d6 <_strtol_r+0x4e>
   1729c:	e7a3      	b.n	171e6 <_strtol_r+0x5e>
   1729e:	b007      	add	sp, #28
   172a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   172a2:	46c0      	nop			; (mov r8, r8)
   172a4:	20000080 	.word	0x20000080
   172a8:	7fffffff 	.word	0x7fffffff

000172ac <strtol>:
   172ac:	b510      	push	{r4, lr}
   172ae:	0013      	movs	r3, r2
   172b0:	000a      	movs	r2, r1
   172b2:	0001      	movs	r1, r0
   172b4:	4802      	ldr	r0, [pc, #8]	; (172c0 <strtol+0x14>)
   172b6:	6800      	ldr	r0, [r0, #0]
   172b8:	f7ff ff66 	bl	17188 <_strtol_r>
   172bc:	bd10      	pop	{r4, pc}
   172be:	46c0      	nop			; (mov r8, r8)
   172c0:	2000007c 	.word	0x2000007c

000172c4 <__swbuf_r>:
   172c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   172c6:	0005      	movs	r5, r0
   172c8:	000f      	movs	r7, r1
   172ca:	0014      	movs	r4, r2
   172cc:	2800      	cmp	r0, #0
   172ce:	d004      	beq.n	172da <__swbuf_r+0x16>
   172d0:	6983      	ldr	r3, [r0, #24]
   172d2:	2b00      	cmp	r3, #0
   172d4:	d101      	bne.n	172da <__swbuf_r+0x16>
   172d6:	f000 f9b7 	bl	17648 <__sinit>
   172da:	4b23      	ldr	r3, [pc, #140]	; (17368 <__swbuf_r+0xa4>)
   172dc:	429c      	cmp	r4, r3
   172de:	d101      	bne.n	172e4 <__swbuf_r+0x20>
   172e0:	686c      	ldr	r4, [r5, #4]
   172e2:	e008      	b.n	172f6 <__swbuf_r+0x32>
   172e4:	4b21      	ldr	r3, [pc, #132]	; (1736c <__swbuf_r+0xa8>)
   172e6:	429c      	cmp	r4, r3
   172e8:	d101      	bne.n	172ee <__swbuf_r+0x2a>
   172ea:	68ac      	ldr	r4, [r5, #8]
   172ec:	e003      	b.n	172f6 <__swbuf_r+0x32>
   172ee:	4b20      	ldr	r3, [pc, #128]	; (17370 <__swbuf_r+0xac>)
   172f0:	429c      	cmp	r4, r3
   172f2:	d100      	bne.n	172f6 <__swbuf_r+0x32>
   172f4:	68ec      	ldr	r4, [r5, #12]
   172f6:	69a3      	ldr	r3, [r4, #24]
   172f8:	60a3      	str	r3, [r4, #8]
   172fa:	89a3      	ldrh	r3, [r4, #12]
   172fc:	071b      	lsls	r3, r3, #28
   172fe:	d50a      	bpl.n	17316 <__swbuf_r+0x52>
   17300:	6923      	ldr	r3, [r4, #16]
   17302:	2b00      	cmp	r3, #0
   17304:	d007      	beq.n	17316 <__swbuf_r+0x52>
   17306:	6823      	ldr	r3, [r4, #0]
   17308:	6922      	ldr	r2, [r4, #16]
   1730a:	b2fe      	uxtb	r6, r7
   1730c:	1a98      	subs	r0, r3, r2
   1730e:	6963      	ldr	r3, [r4, #20]
   17310:	4298      	cmp	r0, r3
   17312:	db0f      	blt.n	17334 <__swbuf_r+0x70>
   17314:	e008      	b.n	17328 <__swbuf_r+0x64>
   17316:	0021      	movs	r1, r4
   17318:	0028      	movs	r0, r5
   1731a:	f000 f82b 	bl	17374 <__swsetup_r>
   1731e:	2800      	cmp	r0, #0
   17320:	d0f1      	beq.n	17306 <__swbuf_r+0x42>
   17322:	2001      	movs	r0, #1
   17324:	4240      	negs	r0, r0
   17326:	e01d      	b.n	17364 <__swbuf_r+0xa0>
   17328:	0021      	movs	r1, r4
   1732a:	0028      	movs	r0, r5
   1732c:	f000 f91e 	bl	1756c <_fflush_r>
   17330:	2800      	cmp	r0, #0
   17332:	d1f6      	bne.n	17322 <__swbuf_r+0x5e>
   17334:	68a3      	ldr	r3, [r4, #8]
   17336:	3001      	adds	r0, #1
   17338:	3b01      	subs	r3, #1
   1733a:	60a3      	str	r3, [r4, #8]
   1733c:	6823      	ldr	r3, [r4, #0]
   1733e:	1c5a      	adds	r2, r3, #1
   17340:	6022      	str	r2, [r4, #0]
   17342:	701f      	strb	r7, [r3, #0]
   17344:	6963      	ldr	r3, [r4, #20]
   17346:	4298      	cmp	r0, r3
   17348:	d005      	beq.n	17356 <__swbuf_r+0x92>
   1734a:	89a3      	ldrh	r3, [r4, #12]
   1734c:	0030      	movs	r0, r6
   1734e:	07db      	lsls	r3, r3, #31
   17350:	d508      	bpl.n	17364 <__swbuf_r+0xa0>
   17352:	2e0a      	cmp	r6, #10
   17354:	d106      	bne.n	17364 <__swbuf_r+0xa0>
   17356:	0021      	movs	r1, r4
   17358:	0028      	movs	r0, r5
   1735a:	f000 f907 	bl	1756c <_fflush_r>
   1735e:	2800      	cmp	r0, #0
   17360:	d1df      	bne.n	17322 <__swbuf_r+0x5e>
   17362:	0030      	movs	r0, r6
   17364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17366:	46c0      	nop			; (mov r8, r8)
   17368:	00019d5c 	.word	0x00019d5c
   1736c:	00019d7c 	.word	0x00019d7c
   17370:	00019d9c 	.word	0x00019d9c

00017374 <__swsetup_r>:
   17374:	4b36      	ldr	r3, [pc, #216]	; (17450 <__swsetup_r+0xdc>)
   17376:	b570      	push	{r4, r5, r6, lr}
   17378:	681d      	ldr	r5, [r3, #0]
   1737a:	0006      	movs	r6, r0
   1737c:	000c      	movs	r4, r1
   1737e:	2d00      	cmp	r5, #0
   17380:	d005      	beq.n	1738e <__swsetup_r+0x1a>
   17382:	69ab      	ldr	r3, [r5, #24]
   17384:	2b00      	cmp	r3, #0
   17386:	d102      	bne.n	1738e <__swsetup_r+0x1a>
   17388:	0028      	movs	r0, r5
   1738a:	f000 f95d 	bl	17648 <__sinit>
   1738e:	4b31      	ldr	r3, [pc, #196]	; (17454 <__swsetup_r+0xe0>)
   17390:	429c      	cmp	r4, r3
   17392:	d101      	bne.n	17398 <__swsetup_r+0x24>
   17394:	686c      	ldr	r4, [r5, #4]
   17396:	e008      	b.n	173aa <__swsetup_r+0x36>
   17398:	4b2f      	ldr	r3, [pc, #188]	; (17458 <__swsetup_r+0xe4>)
   1739a:	429c      	cmp	r4, r3
   1739c:	d101      	bne.n	173a2 <__swsetup_r+0x2e>
   1739e:	68ac      	ldr	r4, [r5, #8]
   173a0:	e003      	b.n	173aa <__swsetup_r+0x36>
   173a2:	4b2e      	ldr	r3, [pc, #184]	; (1745c <__swsetup_r+0xe8>)
   173a4:	429c      	cmp	r4, r3
   173a6:	d100      	bne.n	173aa <__swsetup_r+0x36>
   173a8:	68ec      	ldr	r4, [r5, #12]
   173aa:	220c      	movs	r2, #12
   173ac:	5ea3      	ldrsh	r3, [r4, r2]
   173ae:	b29a      	uxth	r2, r3
   173b0:	0711      	lsls	r1, r2, #28
   173b2:	d423      	bmi.n	173fc <__swsetup_r+0x88>
   173b4:	06d1      	lsls	r1, r2, #27
   173b6:	d407      	bmi.n	173c8 <__swsetup_r+0x54>
   173b8:	2209      	movs	r2, #9
   173ba:	2001      	movs	r0, #1
   173bc:	6032      	str	r2, [r6, #0]
   173be:	3237      	adds	r2, #55	; 0x37
   173c0:	4313      	orrs	r3, r2
   173c2:	81a3      	strh	r3, [r4, #12]
   173c4:	4240      	negs	r0, r0
   173c6:	e042      	b.n	1744e <__swsetup_r+0xda>
   173c8:	0753      	lsls	r3, r2, #29
   173ca:	d513      	bpl.n	173f4 <__swsetup_r+0x80>
   173cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   173ce:	2900      	cmp	r1, #0
   173d0:	d008      	beq.n	173e4 <__swsetup_r+0x70>
   173d2:	0023      	movs	r3, r4
   173d4:	3344      	adds	r3, #68	; 0x44
   173d6:	4299      	cmp	r1, r3
   173d8:	d002      	beq.n	173e0 <__swsetup_r+0x6c>
   173da:	0030      	movs	r0, r6
   173dc:	f7ff fc4c 	bl	16c78 <_free_r>
   173e0:	2300      	movs	r3, #0
   173e2:	6363      	str	r3, [r4, #52]	; 0x34
   173e4:	2224      	movs	r2, #36	; 0x24
   173e6:	89a3      	ldrh	r3, [r4, #12]
   173e8:	4393      	bics	r3, r2
   173ea:	81a3      	strh	r3, [r4, #12]
   173ec:	2300      	movs	r3, #0
   173ee:	6063      	str	r3, [r4, #4]
   173f0:	6923      	ldr	r3, [r4, #16]
   173f2:	6023      	str	r3, [r4, #0]
   173f4:	2208      	movs	r2, #8
   173f6:	89a3      	ldrh	r3, [r4, #12]
   173f8:	4313      	orrs	r3, r2
   173fa:	81a3      	strh	r3, [r4, #12]
   173fc:	6923      	ldr	r3, [r4, #16]
   173fe:	2b00      	cmp	r3, #0
   17400:	d10b      	bne.n	1741a <__swsetup_r+0xa6>
   17402:	23a0      	movs	r3, #160	; 0xa0
   17404:	89a2      	ldrh	r2, [r4, #12]
   17406:	009b      	lsls	r3, r3, #2
   17408:	4013      	ands	r3, r2
   1740a:	2280      	movs	r2, #128	; 0x80
   1740c:	0092      	lsls	r2, r2, #2
   1740e:	4293      	cmp	r3, r2
   17410:	d003      	beq.n	1741a <__swsetup_r+0xa6>
   17412:	0021      	movs	r1, r4
   17414:	0030      	movs	r0, r6
   17416:	f000 f9d1 	bl	177bc <__smakebuf_r>
   1741a:	2301      	movs	r3, #1
   1741c:	89a2      	ldrh	r2, [r4, #12]
   1741e:	4013      	ands	r3, r2
   17420:	d005      	beq.n	1742e <__swsetup_r+0xba>
   17422:	2300      	movs	r3, #0
   17424:	60a3      	str	r3, [r4, #8]
   17426:	6963      	ldr	r3, [r4, #20]
   17428:	425b      	negs	r3, r3
   1742a:	61a3      	str	r3, [r4, #24]
   1742c:	e003      	b.n	17436 <__swsetup_r+0xc2>
   1742e:	0792      	lsls	r2, r2, #30
   17430:	d400      	bmi.n	17434 <__swsetup_r+0xc0>
   17432:	6963      	ldr	r3, [r4, #20]
   17434:	60a3      	str	r3, [r4, #8]
   17436:	2000      	movs	r0, #0
   17438:	6923      	ldr	r3, [r4, #16]
   1743a:	4283      	cmp	r3, r0
   1743c:	d107      	bne.n	1744e <__swsetup_r+0xda>
   1743e:	220c      	movs	r2, #12
   17440:	5ea3      	ldrsh	r3, [r4, r2]
   17442:	061a      	lsls	r2, r3, #24
   17444:	d503      	bpl.n	1744e <__swsetup_r+0xda>
   17446:	2240      	movs	r2, #64	; 0x40
   17448:	4313      	orrs	r3, r2
   1744a:	81a3      	strh	r3, [r4, #12]
   1744c:	3801      	subs	r0, #1
   1744e:	bd70      	pop	{r4, r5, r6, pc}
   17450:	2000007c 	.word	0x2000007c
   17454:	00019d5c 	.word	0x00019d5c
   17458:	00019d7c 	.word	0x00019d7c
   1745c:	00019d9c 	.word	0x00019d9c

00017460 <__sflush_r>:
   17460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17462:	898a      	ldrh	r2, [r1, #12]
   17464:	0005      	movs	r5, r0
   17466:	000c      	movs	r4, r1
   17468:	0713      	lsls	r3, r2, #28
   1746a:	d45a      	bmi.n	17522 <__sflush_r+0xc2>
   1746c:	684b      	ldr	r3, [r1, #4]
   1746e:	2b00      	cmp	r3, #0
   17470:	dc02      	bgt.n	17478 <__sflush_r+0x18>
   17472:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   17474:	2b00      	cmp	r3, #0
   17476:	dd19      	ble.n	174ac <__sflush_r+0x4c>
   17478:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1747a:	2f00      	cmp	r7, #0
   1747c:	d016      	beq.n	174ac <__sflush_r+0x4c>
   1747e:	2300      	movs	r3, #0
   17480:	682e      	ldr	r6, [r5, #0]
   17482:	602b      	str	r3, [r5, #0]
   17484:	2380      	movs	r3, #128	; 0x80
   17486:	015b      	lsls	r3, r3, #5
   17488:	401a      	ands	r2, r3
   1748a:	d001      	beq.n	17490 <__sflush_r+0x30>
   1748c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1748e:	e014      	b.n	174ba <__sflush_r+0x5a>
   17490:	2301      	movs	r3, #1
   17492:	6a21      	ldr	r1, [r4, #32]
   17494:	0028      	movs	r0, r5
   17496:	47b8      	blx	r7
   17498:	1c43      	adds	r3, r0, #1
   1749a:	d10e      	bne.n	174ba <__sflush_r+0x5a>
   1749c:	682b      	ldr	r3, [r5, #0]
   1749e:	2b00      	cmp	r3, #0
   174a0:	d00b      	beq.n	174ba <__sflush_r+0x5a>
   174a2:	2b1d      	cmp	r3, #29
   174a4:	d001      	beq.n	174aa <__sflush_r+0x4a>
   174a6:	2b16      	cmp	r3, #22
   174a8:	d102      	bne.n	174b0 <__sflush_r+0x50>
   174aa:	602e      	str	r6, [r5, #0]
   174ac:	2000      	movs	r0, #0
   174ae:	e05a      	b.n	17566 <__sflush_r+0x106>
   174b0:	2240      	movs	r2, #64	; 0x40
   174b2:	89a3      	ldrh	r3, [r4, #12]
   174b4:	4313      	orrs	r3, r2
   174b6:	81a3      	strh	r3, [r4, #12]
   174b8:	e055      	b.n	17566 <__sflush_r+0x106>
   174ba:	89a3      	ldrh	r3, [r4, #12]
   174bc:	075b      	lsls	r3, r3, #29
   174be:	d506      	bpl.n	174ce <__sflush_r+0x6e>
   174c0:	6863      	ldr	r3, [r4, #4]
   174c2:	1ac0      	subs	r0, r0, r3
   174c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   174c6:	2b00      	cmp	r3, #0
   174c8:	d001      	beq.n	174ce <__sflush_r+0x6e>
   174ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
   174cc:	1ac0      	subs	r0, r0, r3
   174ce:	2300      	movs	r3, #0
   174d0:	0002      	movs	r2, r0
   174d2:	6a21      	ldr	r1, [r4, #32]
   174d4:	0028      	movs	r0, r5
   174d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   174d8:	47b8      	blx	r7
   174da:	89a3      	ldrh	r3, [r4, #12]
   174dc:	1c42      	adds	r2, r0, #1
   174de:	d106      	bne.n	174ee <__sflush_r+0x8e>
   174e0:	6829      	ldr	r1, [r5, #0]
   174e2:	291d      	cmp	r1, #29
   174e4:	d83a      	bhi.n	1755c <__sflush_r+0xfc>
   174e6:	4a20      	ldr	r2, [pc, #128]	; (17568 <__sflush_r+0x108>)
   174e8:	40ca      	lsrs	r2, r1
   174ea:	07d2      	lsls	r2, r2, #31
   174ec:	d536      	bpl.n	1755c <__sflush_r+0xfc>
   174ee:	2200      	movs	r2, #0
   174f0:	6062      	str	r2, [r4, #4]
   174f2:	6922      	ldr	r2, [r4, #16]
   174f4:	6022      	str	r2, [r4, #0]
   174f6:	04db      	lsls	r3, r3, #19
   174f8:	d505      	bpl.n	17506 <__sflush_r+0xa6>
   174fa:	1c43      	adds	r3, r0, #1
   174fc:	d102      	bne.n	17504 <__sflush_r+0xa4>
   174fe:	682b      	ldr	r3, [r5, #0]
   17500:	2b00      	cmp	r3, #0
   17502:	d100      	bne.n	17506 <__sflush_r+0xa6>
   17504:	6560      	str	r0, [r4, #84]	; 0x54
   17506:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17508:	602e      	str	r6, [r5, #0]
   1750a:	2900      	cmp	r1, #0
   1750c:	d0ce      	beq.n	174ac <__sflush_r+0x4c>
   1750e:	0023      	movs	r3, r4
   17510:	3344      	adds	r3, #68	; 0x44
   17512:	4299      	cmp	r1, r3
   17514:	d002      	beq.n	1751c <__sflush_r+0xbc>
   17516:	0028      	movs	r0, r5
   17518:	f7ff fbae 	bl	16c78 <_free_r>
   1751c:	2000      	movs	r0, #0
   1751e:	6360      	str	r0, [r4, #52]	; 0x34
   17520:	e021      	b.n	17566 <__sflush_r+0x106>
   17522:	690f      	ldr	r7, [r1, #16]
   17524:	2f00      	cmp	r7, #0
   17526:	d0c1      	beq.n	174ac <__sflush_r+0x4c>
   17528:	680b      	ldr	r3, [r1, #0]
   1752a:	600f      	str	r7, [r1, #0]
   1752c:	1bdb      	subs	r3, r3, r7
   1752e:	9301      	str	r3, [sp, #4]
   17530:	2300      	movs	r3, #0
   17532:	0792      	lsls	r2, r2, #30
   17534:	d100      	bne.n	17538 <__sflush_r+0xd8>
   17536:	694b      	ldr	r3, [r1, #20]
   17538:	60a3      	str	r3, [r4, #8]
   1753a:	e003      	b.n	17544 <__sflush_r+0xe4>
   1753c:	9b01      	ldr	r3, [sp, #4]
   1753e:	183f      	adds	r7, r7, r0
   17540:	1a1b      	subs	r3, r3, r0
   17542:	9301      	str	r3, [sp, #4]
   17544:	9b01      	ldr	r3, [sp, #4]
   17546:	2b00      	cmp	r3, #0
   17548:	ddb0      	ble.n	174ac <__sflush_r+0x4c>
   1754a:	9b01      	ldr	r3, [sp, #4]
   1754c:	003a      	movs	r2, r7
   1754e:	6a21      	ldr	r1, [r4, #32]
   17550:	0028      	movs	r0, r5
   17552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   17554:	47b0      	blx	r6
   17556:	2800      	cmp	r0, #0
   17558:	dcf0      	bgt.n	1753c <__sflush_r+0xdc>
   1755a:	89a3      	ldrh	r3, [r4, #12]
   1755c:	2240      	movs	r2, #64	; 0x40
   1755e:	2001      	movs	r0, #1
   17560:	4313      	orrs	r3, r2
   17562:	81a3      	strh	r3, [r4, #12]
   17564:	4240      	negs	r0, r0
   17566:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17568:	20400001 	.word	0x20400001

0001756c <_fflush_r>:
   1756c:	690b      	ldr	r3, [r1, #16]
   1756e:	b570      	push	{r4, r5, r6, lr}
   17570:	0005      	movs	r5, r0
   17572:	000c      	movs	r4, r1
   17574:	2b00      	cmp	r3, #0
   17576:	d101      	bne.n	1757c <_fflush_r+0x10>
   17578:	2000      	movs	r0, #0
   1757a:	e01c      	b.n	175b6 <_fflush_r+0x4a>
   1757c:	2800      	cmp	r0, #0
   1757e:	d004      	beq.n	1758a <_fflush_r+0x1e>
   17580:	6983      	ldr	r3, [r0, #24]
   17582:	2b00      	cmp	r3, #0
   17584:	d101      	bne.n	1758a <_fflush_r+0x1e>
   17586:	f000 f85f 	bl	17648 <__sinit>
   1758a:	4b0b      	ldr	r3, [pc, #44]	; (175b8 <_fflush_r+0x4c>)
   1758c:	429c      	cmp	r4, r3
   1758e:	d101      	bne.n	17594 <_fflush_r+0x28>
   17590:	686c      	ldr	r4, [r5, #4]
   17592:	e008      	b.n	175a6 <_fflush_r+0x3a>
   17594:	4b09      	ldr	r3, [pc, #36]	; (175bc <_fflush_r+0x50>)
   17596:	429c      	cmp	r4, r3
   17598:	d101      	bne.n	1759e <_fflush_r+0x32>
   1759a:	68ac      	ldr	r4, [r5, #8]
   1759c:	e003      	b.n	175a6 <_fflush_r+0x3a>
   1759e:	4b08      	ldr	r3, [pc, #32]	; (175c0 <_fflush_r+0x54>)
   175a0:	429c      	cmp	r4, r3
   175a2:	d100      	bne.n	175a6 <_fflush_r+0x3a>
   175a4:	68ec      	ldr	r4, [r5, #12]
   175a6:	220c      	movs	r2, #12
   175a8:	5ea3      	ldrsh	r3, [r4, r2]
   175aa:	2b00      	cmp	r3, #0
   175ac:	d0e4      	beq.n	17578 <_fflush_r+0xc>
   175ae:	0021      	movs	r1, r4
   175b0:	0028      	movs	r0, r5
   175b2:	f7ff ff55 	bl	17460 <__sflush_r>
   175b6:	bd70      	pop	{r4, r5, r6, pc}
   175b8:	00019d5c 	.word	0x00019d5c
   175bc:	00019d7c 	.word	0x00019d7c
   175c0:	00019d9c 	.word	0x00019d9c

000175c4 <_cleanup_r>:
   175c4:	b510      	push	{r4, lr}
   175c6:	4902      	ldr	r1, [pc, #8]	; (175d0 <_cleanup_r+0xc>)
   175c8:	f000 f8b0 	bl	1772c <_fwalk_reent>
   175cc:	bd10      	pop	{r4, pc}
   175ce:	46c0      	nop			; (mov r8, r8)
   175d0:	0001756d 	.word	0x0001756d

000175d4 <std.isra.0>:
   175d4:	2300      	movs	r3, #0
   175d6:	b510      	push	{r4, lr}
   175d8:	0004      	movs	r4, r0
   175da:	6003      	str	r3, [r0, #0]
   175dc:	6043      	str	r3, [r0, #4]
   175de:	6083      	str	r3, [r0, #8]
   175e0:	8181      	strh	r1, [r0, #12]
   175e2:	6643      	str	r3, [r0, #100]	; 0x64
   175e4:	81c2      	strh	r2, [r0, #14]
   175e6:	6103      	str	r3, [r0, #16]
   175e8:	6143      	str	r3, [r0, #20]
   175ea:	6183      	str	r3, [r0, #24]
   175ec:	0019      	movs	r1, r3
   175ee:	2208      	movs	r2, #8
   175f0:	305c      	adds	r0, #92	; 0x5c
   175f2:	f7ff fb39 	bl	16c68 <memset>
   175f6:	4b05      	ldr	r3, [pc, #20]	; (1760c <std.isra.0+0x38>)
   175f8:	6224      	str	r4, [r4, #32]
   175fa:	6263      	str	r3, [r4, #36]	; 0x24
   175fc:	4b04      	ldr	r3, [pc, #16]	; (17610 <std.isra.0+0x3c>)
   175fe:	62a3      	str	r3, [r4, #40]	; 0x28
   17600:	4b04      	ldr	r3, [pc, #16]	; (17614 <std.isra.0+0x40>)
   17602:	62e3      	str	r3, [r4, #44]	; 0x2c
   17604:	4b04      	ldr	r3, [pc, #16]	; (17618 <std.isra.0+0x44>)
   17606:	6323      	str	r3, [r4, #48]	; 0x30
   17608:	bd10      	pop	{r4, pc}
   1760a:	46c0      	nop			; (mov r8, r8)
   1760c:	0001810d 	.word	0x0001810d
   17610:	00018135 	.word	0x00018135
   17614:	0001816d 	.word	0x0001816d
   17618:	00018199 	.word	0x00018199

0001761c <__sfmoreglue>:
   1761c:	b570      	push	{r4, r5, r6, lr}
   1761e:	2568      	movs	r5, #104	; 0x68
   17620:	1e4b      	subs	r3, r1, #1
   17622:	435d      	muls	r5, r3
   17624:	000e      	movs	r6, r1
   17626:	0029      	movs	r1, r5
   17628:	3174      	adds	r1, #116	; 0x74
   1762a:	f7ff fb6b 	bl	16d04 <_malloc_r>
   1762e:	1e04      	subs	r4, r0, #0
   17630:	d008      	beq.n	17644 <__sfmoreglue+0x28>
   17632:	2100      	movs	r1, #0
   17634:	002a      	movs	r2, r5
   17636:	6001      	str	r1, [r0, #0]
   17638:	6046      	str	r6, [r0, #4]
   1763a:	300c      	adds	r0, #12
   1763c:	60a0      	str	r0, [r4, #8]
   1763e:	3268      	adds	r2, #104	; 0x68
   17640:	f7ff fb12 	bl	16c68 <memset>
   17644:	0020      	movs	r0, r4
   17646:	bd70      	pop	{r4, r5, r6, pc}

00017648 <__sinit>:
   17648:	6983      	ldr	r3, [r0, #24]
   1764a:	b513      	push	{r0, r1, r4, lr}
   1764c:	0004      	movs	r4, r0
   1764e:	2b00      	cmp	r3, #0
   17650:	d128      	bne.n	176a4 <__sinit+0x5c>
   17652:	6483      	str	r3, [r0, #72]	; 0x48
   17654:	64c3      	str	r3, [r0, #76]	; 0x4c
   17656:	6503      	str	r3, [r0, #80]	; 0x50
   17658:	4b13      	ldr	r3, [pc, #76]	; (176a8 <__sinit+0x60>)
   1765a:	4a14      	ldr	r2, [pc, #80]	; (176ac <__sinit+0x64>)
   1765c:	681b      	ldr	r3, [r3, #0]
   1765e:	6282      	str	r2, [r0, #40]	; 0x28
   17660:	9301      	str	r3, [sp, #4]
   17662:	4298      	cmp	r0, r3
   17664:	d101      	bne.n	1766a <__sinit+0x22>
   17666:	2301      	movs	r3, #1
   17668:	6183      	str	r3, [r0, #24]
   1766a:	0020      	movs	r0, r4
   1766c:	f000 f820 	bl	176b0 <__sfp>
   17670:	6060      	str	r0, [r4, #4]
   17672:	0020      	movs	r0, r4
   17674:	f000 f81c 	bl	176b0 <__sfp>
   17678:	60a0      	str	r0, [r4, #8]
   1767a:	0020      	movs	r0, r4
   1767c:	f000 f818 	bl	176b0 <__sfp>
   17680:	2200      	movs	r2, #0
   17682:	60e0      	str	r0, [r4, #12]
   17684:	2104      	movs	r1, #4
   17686:	6860      	ldr	r0, [r4, #4]
   17688:	f7ff ffa4 	bl	175d4 <std.isra.0>
   1768c:	2201      	movs	r2, #1
   1768e:	2109      	movs	r1, #9
   17690:	68a0      	ldr	r0, [r4, #8]
   17692:	f7ff ff9f 	bl	175d4 <std.isra.0>
   17696:	2202      	movs	r2, #2
   17698:	2112      	movs	r1, #18
   1769a:	68e0      	ldr	r0, [r4, #12]
   1769c:	f7ff ff9a 	bl	175d4 <std.isra.0>
   176a0:	2301      	movs	r3, #1
   176a2:	61a3      	str	r3, [r4, #24]
   176a4:	bd13      	pop	{r0, r1, r4, pc}
   176a6:	46c0      	nop			; (mov r8, r8)
   176a8:	00019c54 	.word	0x00019c54
   176ac:	000175c5 	.word	0x000175c5

000176b0 <__sfp>:
   176b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   176b2:	4b1d      	ldr	r3, [pc, #116]	; (17728 <__sfp+0x78>)
   176b4:	0006      	movs	r6, r0
   176b6:	681d      	ldr	r5, [r3, #0]
   176b8:	69ab      	ldr	r3, [r5, #24]
   176ba:	2b00      	cmp	r3, #0
   176bc:	d102      	bne.n	176c4 <__sfp+0x14>
   176be:	0028      	movs	r0, r5
   176c0:	f7ff ffc2 	bl	17648 <__sinit>
   176c4:	3548      	adds	r5, #72	; 0x48
   176c6:	68ac      	ldr	r4, [r5, #8]
   176c8:	686b      	ldr	r3, [r5, #4]
   176ca:	3b01      	subs	r3, #1
   176cc:	d405      	bmi.n	176da <__sfp+0x2a>
   176ce:	220c      	movs	r2, #12
   176d0:	5ea7      	ldrsh	r7, [r4, r2]
   176d2:	2f00      	cmp	r7, #0
   176d4:	d010      	beq.n	176f8 <__sfp+0x48>
   176d6:	3468      	adds	r4, #104	; 0x68
   176d8:	e7f7      	b.n	176ca <__sfp+0x1a>
   176da:	682b      	ldr	r3, [r5, #0]
   176dc:	2b00      	cmp	r3, #0
   176de:	d001      	beq.n	176e4 <__sfp+0x34>
   176e0:	682d      	ldr	r5, [r5, #0]
   176e2:	e7f0      	b.n	176c6 <__sfp+0x16>
   176e4:	2104      	movs	r1, #4
   176e6:	0030      	movs	r0, r6
   176e8:	f7ff ff98 	bl	1761c <__sfmoreglue>
   176ec:	6028      	str	r0, [r5, #0]
   176ee:	2800      	cmp	r0, #0
   176f0:	d1f6      	bne.n	176e0 <__sfp+0x30>
   176f2:	230c      	movs	r3, #12
   176f4:	6033      	str	r3, [r6, #0]
   176f6:	e016      	b.n	17726 <__sfp+0x76>
   176f8:	2301      	movs	r3, #1
   176fa:	0020      	movs	r0, r4
   176fc:	425b      	negs	r3, r3
   176fe:	81e3      	strh	r3, [r4, #14]
   17700:	3302      	adds	r3, #2
   17702:	81a3      	strh	r3, [r4, #12]
   17704:	6667      	str	r7, [r4, #100]	; 0x64
   17706:	6027      	str	r7, [r4, #0]
   17708:	60a7      	str	r7, [r4, #8]
   1770a:	6067      	str	r7, [r4, #4]
   1770c:	6127      	str	r7, [r4, #16]
   1770e:	6167      	str	r7, [r4, #20]
   17710:	61a7      	str	r7, [r4, #24]
   17712:	305c      	adds	r0, #92	; 0x5c
   17714:	2208      	movs	r2, #8
   17716:	0039      	movs	r1, r7
   17718:	f7ff faa6 	bl	16c68 <memset>
   1771c:	0020      	movs	r0, r4
   1771e:	6367      	str	r7, [r4, #52]	; 0x34
   17720:	63a7      	str	r7, [r4, #56]	; 0x38
   17722:	64a7      	str	r7, [r4, #72]	; 0x48
   17724:	64e7      	str	r7, [r4, #76]	; 0x4c
   17726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17728:	00019c54 	.word	0x00019c54

0001772c <_fwalk_reent>:
   1772c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1772e:	0004      	movs	r4, r0
   17730:	0007      	movs	r7, r0
   17732:	2600      	movs	r6, #0
   17734:	9101      	str	r1, [sp, #4]
   17736:	3448      	adds	r4, #72	; 0x48
   17738:	2c00      	cmp	r4, #0
   1773a:	d016      	beq.n	1776a <_fwalk_reent+0x3e>
   1773c:	6863      	ldr	r3, [r4, #4]
   1773e:	68a5      	ldr	r5, [r4, #8]
   17740:	9300      	str	r3, [sp, #0]
   17742:	9b00      	ldr	r3, [sp, #0]
   17744:	3b01      	subs	r3, #1
   17746:	9300      	str	r3, [sp, #0]
   17748:	d40d      	bmi.n	17766 <_fwalk_reent+0x3a>
   1774a:	89ab      	ldrh	r3, [r5, #12]
   1774c:	2b01      	cmp	r3, #1
   1774e:	d908      	bls.n	17762 <_fwalk_reent+0x36>
   17750:	220e      	movs	r2, #14
   17752:	5eab      	ldrsh	r3, [r5, r2]
   17754:	3301      	adds	r3, #1
   17756:	d004      	beq.n	17762 <_fwalk_reent+0x36>
   17758:	0029      	movs	r1, r5
   1775a:	0038      	movs	r0, r7
   1775c:	9b01      	ldr	r3, [sp, #4]
   1775e:	4798      	blx	r3
   17760:	4306      	orrs	r6, r0
   17762:	3568      	adds	r5, #104	; 0x68
   17764:	e7ed      	b.n	17742 <_fwalk_reent+0x16>
   17766:	6824      	ldr	r4, [r4, #0]
   17768:	e7e6      	b.n	17738 <_fwalk_reent+0xc>
   1776a:	0030      	movs	r0, r6
   1776c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00017770 <__swhatbuf_r>:
   17770:	b570      	push	{r4, r5, r6, lr}
   17772:	000e      	movs	r6, r1
   17774:	001d      	movs	r5, r3
   17776:	230e      	movs	r3, #14
   17778:	5ec9      	ldrsh	r1, [r1, r3]
   1777a:	b090      	sub	sp, #64	; 0x40
   1777c:	0014      	movs	r4, r2
   1777e:	2900      	cmp	r1, #0
   17780:	da06      	bge.n	17790 <__swhatbuf_r+0x20>
   17782:	2300      	movs	r3, #0
   17784:	602b      	str	r3, [r5, #0]
   17786:	89b3      	ldrh	r3, [r6, #12]
   17788:	061b      	lsls	r3, r3, #24
   1778a:	d50f      	bpl.n	177ac <__swhatbuf_r+0x3c>
   1778c:	2340      	movs	r3, #64	; 0x40
   1778e:	e00f      	b.n	177b0 <__swhatbuf_r+0x40>
   17790:	aa01      	add	r2, sp, #4
   17792:	f000 fd2d 	bl	181f0 <_fstat_r>
   17796:	2800      	cmp	r0, #0
   17798:	dbf3      	blt.n	17782 <__swhatbuf_r+0x12>
   1779a:	23f0      	movs	r3, #240	; 0xf0
   1779c:	9a02      	ldr	r2, [sp, #8]
   1779e:	021b      	lsls	r3, r3, #8
   177a0:	4013      	ands	r3, r2
   177a2:	4a05      	ldr	r2, [pc, #20]	; (177b8 <__swhatbuf_r+0x48>)
   177a4:	189b      	adds	r3, r3, r2
   177a6:	425a      	negs	r2, r3
   177a8:	4153      	adcs	r3, r2
   177aa:	602b      	str	r3, [r5, #0]
   177ac:	2380      	movs	r3, #128	; 0x80
   177ae:	00db      	lsls	r3, r3, #3
   177b0:	2000      	movs	r0, #0
   177b2:	6023      	str	r3, [r4, #0]
   177b4:	b010      	add	sp, #64	; 0x40
   177b6:	bd70      	pop	{r4, r5, r6, pc}
   177b8:	ffffe000 	.word	0xffffe000

000177bc <__smakebuf_r>:
   177bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   177be:	2602      	movs	r6, #2
   177c0:	898b      	ldrh	r3, [r1, #12]
   177c2:	0005      	movs	r5, r0
   177c4:	000c      	movs	r4, r1
   177c6:	4233      	tst	r3, r6
   177c8:	d110      	bne.n	177ec <__smakebuf_r+0x30>
   177ca:	ab01      	add	r3, sp, #4
   177cc:	466a      	mov	r2, sp
   177ce:	f7ff ffcf 	bl	17770 <__swhatbuf_r>
   177d2:	9900      	ldr	r1, [sp, #0]
   177d4:	0007      	movs	r7, r0
   177d6:	0028      	movs	r0, r5
   177d8:	f7ff fa94 	bl	16d04 <_malloc_r>
   177dc:	2800      	cmp	r0, #0
   177de:	d10c      	bne.n	177fa <__smakebuf_r+0x3e>
   177e0:	220c      	movs	r2, #12
   177e2:	5ea3      	ldrsh	r3, [r4, r2]
   177e4:	059a      	lsls	r2, r3, #22
   177e6:	d423      	bmi.n	17830 <__smakebuf_r+0x74>
   177e8:	4333      	orrs	r3, r6
   177ea:	81a3      	strh	r3, [r4, #12]
   177ec:	0023      	movs	r3, r4
   177ee:	3347      	adds	r3, #71	; 0x47
   177f0:	6023      	str	r3, [r4, #0]
   177f2:	6123      	str	r3, [r4, #16]
   177f4:	2301      	movs	r3, #1
   177f6:	6163      	str	r3, [r4, #20]
   177f8:	e01a      	b.n	17830 <__smakebuf_r+0x74>
   177fa:	2280      	movs	r2, #128	; 0x80
   177fc:	4b0d      	ldr	r3, [pc, #52]	; (17834 <__smakebuf_r+0x78>)
   177fe:	62ab      	str	r3, [r5, #40]	; 0x28
   17800:	89a3      	ldrh	r3, [r4, #12]
   17802:	6020      	str	r0, [r4, #0]
   17804:	4313      	orrs	r3, r2
   17806:	81a3      	strh	r3, [r4, #12]
   17808:	9b00      	ldr	r3, [sp, #0]
   1780a:	6120      	str	r0, [r4, #16]
   1780c:	6163      	str	r3, [r4, #20]
   1780e:	9b01      	ldr	r3, [sp, #4]
   17810:	2b00      	cmp	r3, #0
   17812:	d00a      	beq.n	1782a <__smakebuf_r+0x6e>
   17814:	230e      	movs	r3, #14
   17816:	5ee1      	ldrsh	r1, [r4, r3]
   17818:	0028      	movs	r0, r5
   1781a:	f000 fcfb 	bl	18214 <_isatty_r>
   1781e:	2800      	cmp	r0, #0
   17820:	d003      	beq.n	1782a <__smakebuf_r+0x6e>
   17822:	2201      	movs	r2, #1
   17824:	89a3      	ldrh	r3, [r4, #12]
   17826:	4313      	orrs	r3, r2
   17828:	81a3      	strh	r3, [r4, #12]
   1782a:	89a3      	ldrh	r3, [r4, #12]
   1782c:	431f      	orrs	r7, r3
   1782e:	81a7      	strh	r7, [r4, #12]
   17830:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   17832:	46c0      	nop			; (mov r8, r8)
   17834:	000175c5 	.word	0x000175c5

00017838 <__ssputs_r>:
   17838:	b5f0      	push	{r4, r5, r6, r7, lr}
   1783a:	688e      	ldr	r6, [r1, #8]
   1783c:	b085      	sub	sp, #20
   1783e:	0007      	movs	r7, r0
   17840:	000c      	movs	r4, r1
   17842:	9203      	str	r2, [sp, #12]
   17844:	9301      	str	r3, [sp, #4]
   17846:	429e      	cmp	r6, r3
   17848:	d843      	bhi.n	178d2 <__ssputs_r+0x9a>
   1784a:	2390      	movs	r3, #144	; 0x90
   1784c:	898a      	ldrh	r2, [r1, #12]
   1784e:	00db      	lsls	r3, r3, #3
   17850:	421a      	tst	r2, r3
   17852:	d03e      	beq.n	178d2 <__ssputs_r+0x9a>
   17854:	2503      	movs	r5, #3
   17856:	6909      	ldr	r1, [r1, #16]
   17858:	6823      	ldr	r3, [r4, #0]
   1785a:	9801      	ldr	r0, [sp, #4]
   1785c:	1a5b      	subs	r3, r3, r1
   1785e:	9302      	str	r3, [sp, #8]
   17860:	6963      	ldr	r3, [r4, #20]
   17862:	435d      	muls	r5, r3
   17864:	0feb      	lsrs	r3, r5, #31
   17866:	195d      	adds	r5, r3, r5
   17868:	9b02      	ldr	r3, [sp, #8]
   1786a:	106d      	asrs	r5, r5, #1
   1786c:	3301      	adds	r3, #1
   1786e:	181b      	adds	r3, r3, r0
   17870:	42ab      	cmp	r3, r5
   17872:	d900      	bls.n	17876 <__ssputs_r+0x3e>
   17874:	001d      	movs	r5, r3
   17876:	0553      	lsls	r3, r2, #21
   17878:	d510      	bpl.n	1789c <__ssputs_r+0x64>
   1787a:	0029      	movs	r1, r5
   1787c:	0038      	movs	r0, r7
   1787e:	f7ff fa41 	bl	16d04 <_malloc_r>
   17882:	1e06      	subs	r6, r0, #0
   17884:	d014      	beq.n	178b0 <__ssputs_r+0x78>
   17886:	9a02      	ldr	r2, [sp, #8]
   17888:	6921      	ldr	r1, [r4, #16]
   1788a:	f7ff f9cf 	bl	16c2c <memcpy>
   1788e:	89a2      	ldrh	r2, [r4, #12]
   17890:	4b19      	ldr	r3, [pc, #100]	; (178f8 <__ssputs_r+0xc0>)
   17892:	4013      	ands	r3, r2
   17894:	2280      	movs	r2, #128	; 0x80
   17896:	4313      	orrs	r3, r2
   17898:	81a3      	strh	r3, [r4, #12]
   1789a:	e012      	b.n	178c2 <__ssputs_r+0x8a>
   1789c:	002a      	movs	r2, r5
   1789e:	0038      	movs	r0, r7
   178a0:	f000 fce9 	bl	18276 <_realloc_r>
   178a4:	1e06      	subs	r6, r0, #0
   178a6:	d10c      	bne.n	178c2 <__ssputs_r+0x8a>
   178a8:	6921      	ldr	r1, [r4, #16]
   178aa:	0038      	movs	r0, r7
   178ac:	f7ff f9e4 	bl	16c78 <_free_r>
   178b0:	230c      	movs	r3, #12
   178b2:	2240      	movs	r2, #64	; 0x40
   178b4:	2001      	movs	r0, #1
   178b6:	603b      	str	r3, [r7, #0]
   178b8:	89a3      	ldrh	r3, [r4, #12]
   178ba:	4240      	negs	r0, r0
   178bc:	4313      	orrs	r3, r2
   178be:	81a3      	strh	r3, [r4, #12]
   178c0:	e017      	b.n	178f2 <__ssputs_r+0xba>
   178c2:	9b02      	ldr	r3, [sp, #8]
   178c4:	6126      	str	r6, [r4, #16]
   178c6:	18f6      	adds	r6, r6, r3
   178c8:	6026      	str	r6, [r4, #0]
   178ca:	6165      	str	r5, [r4, #20]
   178cc:	9e01      	ldr	r6, [sp, #4]
   178ce:	1aed      	subs	r5, r5, r3
   178d0:	60a5      	str	r5, [r4, #8]
   178d2:	9b01      	ldr	r3, [sp, #4]
   178d4:	42b3      	cmp	r3, r6
   178d6:	d200      	bcs.n	178da <__ssputs_r+0xa2>
   178d8:	001e      	movs	r6, r3
   178da:	0032      	movs	r2, r6
   178dc:	9903      	ldr	r1, [sp, #12]
   178de:	6820      	ldr	r0, [r4, #0]
   178e0:	f7ff f9ad 	bl	16c3e <memmove>
   178e4:	2000      	movs	r0, #0
   178e6:	68a3      	ldr	r3, [r4, #8]
   178e8:	1b9b      	subs	r3, r3, r6
   178ea:	60a3      	str	r3, [r4, #8]
   178ec:	6823      	ldr	r3, [r4, #0]
   178ee:	199e      	adds	r6, r3, r6
   178f0:	6026      	str	r6, [r4, #0]
   178f2:	b005      	add	sp, #20
   178f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   178f6:	46c0      	nop			; (mov r8, r8)
   178f8:	fffffb7f 	.word	0xfffffb7f

000178fc <_svfiprintf_r>:
   178fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   178fe:	b09f      	sub	sp, #124	; 0x7c
   17900:	9002      	str	r0, [sp, #8]
   17902:	9305      	str	r3, [sp, #20]
   17904:	898b      	ldrh	r3, [r1, #12]
   17906:	000f      	movs	r7, r1
   17908:	0016      	movs	r6, r2
   1790a:	061b      	lsls	r3, r3, #24
   1790c:	d510      	bpl.n	17930 <_svfiprintf_r+0x34>
   1790e:	690b      	ldr	r3, [r1, #16]
   17910:	2b00      	cmp	r3, #0
   17912:	d10d      	bne.n	17930 <_svfiprintf_r+0x34>
   17914:	2140      	movs	r1, #64	; 0x40
   17916:	f7ff f9f5 	bl	16d04 <_malloc_r>
   1791a:	6038      	str	r0, [r7, #0]
   1791c:	6138      	str	r0, [r7, #16]
   1791e:	2800      	cmp	r0, #0
   17920:	d104      	bne.n	1792c <_svfiprintf_r+0x30>
   17922:	230c      	movs	r3, #12
   17924:	9a02      	ldr	r2, [sp, #8]
   17926:	3801      	subs	r0, #1
   17928:	6013      	str	r3, [r2, #0]
   1792a:	e0d8      	b.n	17ade <_svfiprintf_r+0x1e2>
   1792c:	2340      	movs	r3, #64	; 0x40
   1792e:	617b      	str	r3, [r7, #20]
   17930:	2300      	movs	r3, #0
   17932:	ad06      	add	r5, sp, #24
   17934:	616b      	str	r3, [r5, #20]
   17936:	3320      	adds	r3, #32
   17938:	766b      	strb	r3, [r5, #25]
   1793a:	3310      	adds	r3, #16
   1793c:	76ab      	strb	r3, [r5, #26]
   1793e:	0034      	movs	r4, r6
   17940:	7823      	ldrb	r3, [r4, #0]
   17942:	2b00      	cmp	r3, #0
   17944:	d103      	bne.n	1794e <_svfiprintf_r+0x52>
   17946:	1ba3      	subs	r3, r4, r6
   17948:	9304      	str	r3, [sp, #16]
   1794a:	d012      	beq.n	17972 <_svfiprintf_r+0x76>
   1794c:	e003      	b.n	17956 <_svfiprintf_r+0x5a>
   1794e:	2b25      	cmp	r3, #37	; 0x25
   17950:	d0f9      	beq.n	17946 <_svfiprintf_r+0x4a>
   17952:	3401      	adds	r4, #1
   17954:	e7f4      	b.n	17940 <_svfiprintf_r+0x44>
   17956:	1ba3      	subs	r3, r4, r6
   17958:	0032      	movs	r2, r6
   1795a:	0039      	movs	r1, r7
   1795c:	9802      	ldr	r0, [sp, #8]
   1795e:	f7ff ff6b 	bl	17838 <__ssputs_r>
   17962:	1c43      	adds	r3, r0, #1
   17964:	d100      	bne.n	17968 <_svfiprintf_r+0x6c>
   17966:	e0b4      	b.n	17ad2 <_svfiprintf_r+0x1d6>
   17968:	696a      	ldr	r2, [r5, #20]
   1796a:	9b04      	ldr	r3, [sp, #16]
   1796c:	4694      	mov	ip, r2
   1796e:	4463      	add	r3, ip
   17970:	616b      	str	r3, [r5, #20]
   17972:	7823      	ldrb	r3, [r4, #0]
   17974:	2b00      	cmp	r3, #0
   17976:	d100      	bne.n	1797a <_svfiprintf_r+0x7e>
   17978:	e0ab      	b.n	17ad2 <_svfiprintf_r+0x1d6>
   1797a:	2201      	movs	r2, #1
   1797c:	2300      	movs	r3, #0
   1797e:	4252      	negs	r2, r2
   17980:	606a      	str	r2, [r5, #4]
   17982:	a902      	add	r1, sp, #8
   17984:	3254      	adds	r2, #84	; 0x54
   17986:	1852      	adds	r2, r2, r1
   17988:	3401      	adds	r4, #1
   1798a:	602b      	str	r3, [r5, #0]
   1798c:	60eb      	str	r3, [r5, #12]
   1798e:	60ab      	str	r3, [r5, #8]
   17990:	7013      	strb	r3, [r2, #0]
   17992:	65ab      	str	r3, [r5, #88]	; 0x58
   17994:	4e53      	ldr	r6, [pc, #332]	; (17ae4 <_svfiprintf_r+0x1e8>)
   17996:	7821      	ldrb	r1, [r4, #0]
   17998:	2205      	movs	r2, #5
   1799a:	0030      	movs	r0, r6
   1799c:	f000 fc60 	bl	18260 <memchr>
   179a0:	2800      	cmp	r0, #0
   179a2:	d007      	beq.n	179b4 <_svfiprintf_r+0xb8>
   179a4:	2301      	movs	r3, #1
   179a6:	1b80      	subs	r0, r0, r6
   179a8:	4083      	lsls	r3, r0
   179aa:	682a      	ldr	r2, [r5, #0]
   179ac:	3401      	adds	r4, #1
   179ae:	4313      	orrs	r3, r2
   179b0:	602b      	str	r3, [r5, #0]
   179b2:	e7ef      	b.n	17994 <_svfiprintf_r+0x98>
   179b4:	682b      	ldr	r3, [r5, #0]
   179b6:	06da      	lsls	r2, r3, #27
   179b8:	d504      	bpl.n	179c4 <_svfiprintf_r+0xc8>
   179ba:	2253      	movs	r2, #83	; 0x53
   179bc:	2120      	movs	r1, #32
   179be:	a802      	add	r0, sp, #8
   179c0:	1812      	adds	r2, r2, r0
   179c2:	7011      	strb	r1, [r2, #0]
   179c4:	071a      	lsls	r2, r3, #28
   179c6:	d504      	bpl.n	179d2 <_svfiprintf_r+0xd6>
   179c8:	2253      	movs	r2, #83	; 0x53
   179ca:	212b      	movs	r1, #43	; 0x2b
   179cc:	a802      	add	r0, sp, #8
   179ce:	1812      	adds	r2, r2, r0
   179d0:	7011      	strb	r1, [r2, #0]
   179d2:	7822      	ldrb	r2, [r4, #0]
   179d4:	2a2a      	cmp	r2, #42	; 0x2a
   179d6:	d003      	beq.n	179e0 <_svfiprintf_r+0xe4>
   179d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   179da:	2000      	movs	r0, #0
   179dc:	210a      	movs	r1, #10
   179de:	e00e      	b.n	179fe <_svfiprintf_r+0x102>
   179e0:	9a05      	ldr	r2, [sp, #20]
   179e2:	1d11      	adds	r1, r2, #4
   179e4:	6812      	ldr	r2, [r2, #0]
   179e6:	9105      	str	r1, [sp, #20]
   179e8:	2a00      	cmp	r2, #0
   179ea:	db01      	blt.n	179f0 <_svfiprintf_r+0xf4>
   179ec:	9209      	str	r2, [sp, #36]	; 0x24
   179ee:	e004      	b.n	179fa <_svfiprintf_r+0xfe>
   179f0:	4252      	negs	r2, r2
   179f2:	60ea      	str	r2, [r5, #12]
   179f4:	2202      	movs	r2, #2
   179f6:	4313      	orrs	r3, r2
   179f8:	602b      	str	r3, [r5, #0]
   179fa:	3401      	adds	r4, #1
   179fc:	e00b      	b.n	17a16 <_svfiprintf_r+0x11a>
   179fe:	7822      	ldrb	r2, [r4, #0]
   17a00:	3a30      	subs	r2, #48	; 0x30
   17a02:	2a09      	cmp	r2, #9
   17a04:	d804      	bhi.n	17a10 <_svfiprintf_r+0x114>
   17a06:	434b      	muls	r3, r1
   17a08:	3401      	adds	r4, #1
   17a0a:	189b      	adds	r3, r3, r2
   17a0c:	2001      	movs	r0, #1
   17a0e:	e7f6      	b.n	179fe <_svfiprintf_r+0x102>
   17a10:	2800      	cmp	r0, #0
   17a12:	d000      	beq.n	17a16 <_svfiprintf_r+0x11a>
   17a14:	9309      	str	r3, [sp, #36]	; 0x24
   17a16:	7823      	ldrb	r3, [r4, #0]
   17a18:	2b2e      	cmp	r3, #46	; 0x2e
   17a1a:	d11e      	bne.n	17a5a <_svfiprintf_r+0x15e>
   17a1c:	7863      	ldrb	r3, [r4, #1]
   17a1e:	2b2a      	cmp	r3, #42	; 0x2a
   17a20:	d10a      	bne.n	17a38 <_svfiprintf_r+0x13c>
   17a22:	9b05      	ldr	r3, [sp, #20]
   17a24:	3402      	adds	r4, #2
   17a26:	1d1a      	adds	r2, r3, #4
   17a28:	681b      	ldr	r3, [r3, #0]
   17a2a:	9205      	str	r2, [sp, #20]
   17a2c:	2b00      	cmp	r3, #0
   17a2e:	da01      	bge.n	17a34 <_svfiprintf_r+0x138>
   17a30:	2301      	movs	r3, #1
   17a32:	425b      	negs	r3, r3
   17a34:	9307      	str	r3, [sp, #28]
   17a36:	e010      	b.n	17a5a <_svfiprintf_r+0x15e>
   17a38:	2300      	movs	r3, #0
   17a3a:	200a      	movs	r0, #10
   17a3c:	001a      	movs	r2, r3
   17a3e:	3401      	adds	r4, #1
   17a40:	606b      	str	r3, [r5, #4]
   17a42:	7821      	ldrb	r1, [r4, #0]
   17a44:	3930      	subs	r1, #48	; 0x30
   17a46:	2909      	cmp	r1, #9
   17a48:	d804      	bhi.n	17a54 <_svfiprintf_r+0x158>
   17a4a:	4342      	muls	r2, r0
   17a4c:	3401      	adds	r4, #1
   17a4e:	1852      	adds	r2, r2, r1
   17a50:	2301      	movs	r3, #1
   17a52:	e7f6      	b.n	17a42 <_svfiprintf_r+0x146>
   17a54:	2b00      	cmp	r3, #0
   17a56:	d000      	beq.n	17a5a <_svfiprintf_r+0x15e>
   17a58:	9207      	str	r2, [sp, #28]
   17a5a:	4e23      	ldr	r6, [pc, #140]	; (17ae8 <_svfiprintf_r+0x1ec>)
   17a5c:	7821      	ldrb	r1, [r4, #0]
   17a5e:	2203      	movs	r2, #3
   17a60:	0030      	movs	r0, r6
   17a62:	f000 fbfd 	bl	18260 <memchr>
   17a66:	2800      	cmp	r0, #0
   17a68:	d006      	beq.n	17a78 <_svfiprintf_r+0x17c>
   17a6a:	2340      	movs	r3, #64	; 0x40
   17a6c:	1b80      	subs	r0, r0, r6
   17a6e:	4083      	lsls	r3, r0
   17a70:	682a      	ldr	r2, [r5, #0]
   17a72:	3401      	adds	r4, #1
   17a74:	4313      	orrs	r3, r2
   17a76:	602b      	str	r3, [r5, #0]
   17a78:	7821      	ldrb	r1, [r4, #0]
   17a7a:	2206      	movs	r2, #6
   17a7c:	481b      	ldr	r0, [pc, #108]	; (17aec <_svfiprintf_r+0x1f0>)
   17a7e:	1c66      	adds	r6, r4, #1
   17a80:	7629      	strb	r1, [r5, #24]
   17a82:	f000 fbed 	bl	18260 <memchr>
   17a86:	2800      	cmp	r0, #0
   17a88:	d012      	beq.n	17ab0 <_svfiprintf_r+0x1b4>
   17a8a:	4b19      	ldr	r3, [pc, #100]	; (17af0 <_svfiprintf_r+0x1f4>)
   17a8c:	2b00      	cmp	r3, #0
   17a8e:	d106      	bne.n	17a9e <_svfiprintf_r+0x1a2>
   17a90:	2207      	movs	r2, #7
   17a92:	9b05      	ldr	r3, [sp, #20]
   17a94:	3307      	adds	r3, #7
   17a96:	4393      	bics	r3, r2
   17a98:	3308      	adds	r3, #8
   17a9a:	9305      	str	r3, [sp, #20]
   17a9c:	e014      	b.n	17ac8 <_svfiprintf_r+0x1cc>
   17a9e:	ab05      	add	r3, sp, #20
   17aa0:	9300      	str	r3, [sp, #0]
   17aa2:	003a      	movs	r2, r7
   17aa4:	4b13      	ldr	r3, [pc, #76]	; (17af4 <_svfiprintf_r+0x1f8>)
   17aa6:	0029      	movs	r1, r5
   17aa8:	9802      	ldr	r0, [sp, #8]
   17aaa:	e000      	b.n	17aae <_svfiprintf_r+0x1b2>
   17aac:	bf00      	nop
   17aae:	e007      	b.n	17ac0 <_svfiprintf_r+0x1c4>
   17ab0:	ab05      	add	r3, sp, #20
   17ab2:	9300      	str	r3, [sp, #0]
   17ab4:	003a      	movs	r2, r7
   17ab6:	4b0f      	ldr	r3, [pc, #60]	; (17af4 <_svfiprintf_r+0x1f8>)
   17ab8:	0029      	movs	r1, r5
   17aba:	9802      	ldr	r0, [sp, #8]
   17abc:	f000 f9ce 	bl	17e5c <_printf_i>
   17ac0:	9003      	str	r0, [sp, #12]
   17ac2:	9b03      	ldr	r3, [sp, #12]
   17ac4:	3301      	adds	r3, #1
   17ac6:	d004      	beq.n	17ad2 <_svfiprintf_r+0x1d6>
   17ac8:	696b      	ldr	r3, [r5, #20]
   17aca:	9a03      	ldr	r2, [sp, #12]
   17acc:	189b      	adds	r3, r3, r2
   17ace:	616b      	str	r3, [r5, #20]
   17ad0:	e735      	b.n	1793e <_svfiprintf_r+0x42>
   17ad2:	89bb      	ldrh	r3, [r7, #12]
   17ad4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17ad6:	065b      	lsls	r3, r3, #25
   17ad8:	d501      	bpl.n	17ade <_svfiprintf_r+0x1e2>
   17ada:	2001      	movs	r0, #1
   17adc:	4240      	negs	r0, r0
   17ade:	b01f      	add	sp, #124	; 0x7c
   17ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17ae2:	46c0      	nop			; (mov r8, r8)
   17ae4:	00019dbc 	.word	0x00019dbc
   17ae8:	00019dc2 	.word	0x00019dc2
   17aec:	00019dc6 	.word	0x00019dc6
   17af0:	00000000 	.word	0x00000000
   17af4:	00017839 	.word	0x00017839

00017af8 <__sfputc_r>:
   17af8:	6893      	ldr	r3, [r2, #8]
   17afa:	b510      	push	{r4, lr}
   17afc:	3b01      	subs	r3, #1
   17afe:	6093      	str	r3, [r2, #8]
   17b00:	2b00      	cmp	r3, #0
   17b02:	da05      	bge.n	17b10 <__sfputc_r+0x18>
   17b04:	6994      	ldr	r4, [r2, #24]
   17b06:	42a3      	cmp	r3, r4
   17b08:	db08      	blt.n	17b1c <__sfputc_r+0x24>
   17b0a:	b2cb      	uxtb	r3, r1
   17b0c:	2b0a      	cmp	r3, #10
   17b0e:	d005      	beq.n	17b1c <__sfputc_r+0x24>
   17b10:	6813      	ldr	r3, [r2, #0]
   17b12:	1c58      	adds	r0, r3, #1
   17b14:	6010      	str	r0, [r2, #0]
   17b16:	7019      	strb	r1, [r3, #0]
   17b18:	b2c8      	uxtb	r0, r1
   17b1a:	e001      	b.n	17b20 <__sfputc_r+0x28>
   17b1c:	f7ff fbd2 	bl	172c4 <__swbuf_r>
   17b20:	bd10      	pop	{r4, pc}

00017b22 <__sfputs_r>:
   17b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b24:	0006      	movs	r6, r0
   17b26:	000f      	movs	r7, r1
   17b28:	0014      	movs	r4, r2
   17b2a:	18d5      	adds	r5, r2, r3
   17b2c:	42ac      	cmp	r4, r5
   17b2e:	d008      	beq.n	17b42 <__sfputs_r+0x20>
   17b30:	7821      	ldrb	r1, [r4, #0]
   17b32:	003a      	movs	r2, r7
   17b34:	0030      	movs	r0, r6
   17b36:	f7ff ffdf 	bl	17af8 <__sfputc_r>
   17b3a:	3401      	adds	r4, #1
   17b3c:	1c43      	adds	r3, r0, #1
   17b3e:	d1f5      	bne.n	17b2c <__sfputs_r+0xa>
   17b40:	e000      	b.n	17b44 <__sfputs_r+0x22>
   17b42:	2000      	movs	r0, #0
   17b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00017b48 <_vfiprintf_r>:
   17b48:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b4a:	b09f      	sub	sp, #124	; 0x7c
   17b4c:	0006      	movs	r6, r0
   17b4e:	000f      	movs	r7, r1
   17b50:	9202      	str	r2, [sp, #8]
   17b52:	9305      	str	r3, [sp, #20]
   17b54:	2800      	cmp	r0, #0
   17b56:	d004      	beq.n	17b62 <_vfiprintf_r+0x1a>
   17b58:	6983      	ldr	r3, [r0, #24]
   17b5a:	2b00      	cmp	r3, #0
   17b5c:	d101      	bne.n	17b62 <_vfiprintf_r+0x1a>
   17b5e:	f7ff fd73 	bl	17648 <__sinit>
   17b62:	4b7f      	ldr	r3, [pc, #508]	; (17d60 <_vfiprintf_r+0x218>)
   17b64:	429f      	cmp	r7, r3
   17b66:	d101      	bne.n	17b6c <_vfiprintf_r+0x24>
   17b68:	6877      	ldr	r7, [r6, #4]
   17b6a:	e008      	b.n	17b7e <_vfiprintf_r+0x36>
   17b6c:	4b7d      	ldr	r3, [pc, #500]	; (17d64 <_vfiprintf_r+0x21c>)
   17b6e:	429f      	cmp	r7, r3
   17b70:	d101      	bne.n	17b76 <_vfiprintf_r+0x2e>
   17b72:	68b7      	ldr	r7, [r6, #8]
   17b74:	e003      	b.n	17b7e <_vfiprintf_r+0x36>
   17b76:	4b7c      	ldr	r3, [pc, #496]	; (17d68 <_vfiprintf_r+0x220>)
   17b78:	429f      	cmp	r7, r3
   17b7a:	d100      	bne.n	17b7e <_vfiprintf_r+0x36>
   17b7c:	68f7      	ldr	r7, [r6, #12]
   17b7e:	89bb      	ldrh	r3, [r7, #12]
   17b80:	071b      	lsls	r3, r3, #28
   17b82:	d50a      	bpl.n	17b9a <_vfiprintf_r+0x52>
   17b84:	693b      	ldr	r3, [r7, #16]
   17b86:	2b00      	cmp	r3, #0
   17b88:	d007      	beq.n	17b9a <_vfiprintf_r+0x52>
   17b8a:	2300      	movs	r3, #0
   17b8c:	ad06      	add	r5, sp, #24
   17b8e:	616b      	str	r3, [r5, #20]
   17b90:	3320      	adds	r3, #32
   17b92:	766b      	strb	r3, [r5, #25]
   17b94:	3310      	adds	r3, #16
   17b96:	76ab      	strb	r3, [r5, #26]
   17b98:	e03d      	b.n	17c16 <_vfiprintf_r+0xce>
   17b9a:	0039      	movs	r1, r7
   17b9c:	0030      	movs	r0, r6
   17b9e:	f7ff fbe9 	bl	17374 <__swsetup_r>
   17ba2:	2800      	cmp	r0, #0
   17ba4:	d0f1      	beq.n	17b8a <_vfiprintf_r+0x42>
   17ba6:	2001      	movs	r0, #1
   17ba8:	4240      	negs	r0, r0
   17baa:	e0d6      	b.n	17d5a <_vfiprintf_r+0x212>
   17bac:	9a05      	ldr	r2, [sp, #20]
   17bae:	1d11      	adds	r1, r2, #4
   17bb0:	6812      	ldr	r2, [r2, #0]
   17bb2:	9105      	str	r1, [sp, #20]
   17bb4:	2a00      	cmp	r2, #0
   17bb6:	da00      	bge.n	17bba <_vfiprintf_r+0x72>
   17bb8:	e07f      	b.n	17cba <_vfiprintf_r+0x172>
   17bba:	9209      	str	r2, [sp, #36]	; 0x24
   17bbc:	3401      	adds	r4, #1
   17bbe:	7823      	ldrb	r3, [r4, #0]
   17bc0:	2b2e      	cmp	r3, #46	; 0x2e
   17bc2:	d100      	bne.n	17bc6 <_vfiprintf_r+0x7e>
   17bc4:	e08d      	b.n	17ce2 <_vfiprintf_r+0x19a>
   17bc6:	7821      	ldrb	r1, [r4, #0]
   17bc8:	2203      	movs	r2, #3
   17bca:	4868      	ldr	r0, [pc, #416]	; (17d6c <_vfiprintf_r+0x224>)
   17bcc:	f000 fb48 	bl	18260 <memchr>
   17bd0:	2800      	cmp	r0, #0
   17bd2:	d007      	beq.n	17be4 <_vfiprintf_r+0x9c>
   17bd4:	4b65      	ldr	r3, [pc, #404]	; (17d6c <_vfiprintf_r+0x224>)
   17bd6:	682a      	ldr	r2, [r5, #0]
   17bd8:	1ac0      	subs	r0, r0, r3
   17bda:	2340      	movs	r3, #64	; 0x40
   17bdc:	4083      	lsls	r3, r0
   17bde:	4313      	orrs	r3, r2
   17be0:	602b      	str	r3, [r5, #0]
   17be2:	3401      	adds	r4, #1
   17be4:	7821      	ldrb	r1, [r4, #0]
   17be6:	1c63      	adds	r3, r4, #1
   17be8:	2206      	movs	r2, #6
   17bea:	4861      	ldr	r0, [pc, #388]	; (17d70 <_vfiprintf_r+0x228>)
   17bec:	9302      	str	r3, [sp, #8]
   17bee:	7629      	strb	r1, [r5, #24]
   17bf0:	f000 fb36 	bl	18260 <memchr>
   17bf4:	2800      	cmp	r0, #0
   17bf6:	d100      	bne.n	17bfa <_vfiprintf_r+0xb2>
   17bf8:	e09d      	b.n	17d36 <_vfiprintf_r+0x1ee>
   17bfa:	4b5e      	ldr	r3, [pc, #376]	; (17d74 <_vfiprintf_r+0x22c>)
   17bfc:	2b00      	cmp	r3, #0
   17bfe:	d000      	beq.n	17c02 <_vfiprintf_r+0xba>
   17c00:	e090      	b.n	17d24 <_vfiprintf_r+0x1dc>
   17c02:	2207      	movs	r2, #7
   17c04:	9b05      	ldr	r3, [sp, #20]
   17c06:	3307      	adds	r3, #7
   17c08:	4393      	bics	r3, r2
   17c0a:	3308      	adds	r3, #8
   17c0c:	9305      	str	r3, [sp, #20]
   17c0e:	696b      	ldr	r3, [r5, #20]
   17c10:	9a03      	ldr	r2, [sp, #12]
   17c12:	189b      	adds	r3, r3, r2
   17c14:	616b      	str	r3, [r5, #20]
   17c16:	9c02      	ldr	r4, [sp, #8]
   17c18:	7823      	ldrb	r3, [r4, #0]
   17c1a:	2b00      	cmp	r3, #0
   17c1c:	d104      	bne.n	17c28 <_vfiprintf_r+0xe0>
   17c1e:	9b02      	ldr	r3, [sp, #8]
   17c20:	1ae3      	subs	r3, r4, r3
   17c22:	9304      	str	r3, [sp, #16]
   17c24:	d012      	beq.n	17c4c <_vfiprintf_r+0x104>
   17c26:	e003      	b.n	17c30 <_vfiprintf_r+0xe8>
   17c28:	2b25      	cmp	r3, #37	; 0x25
   17c2a:	d0f8      	beq.n	17c1e <_vfiprintf_r+0xd6>
   17c2c:	3401      	adds	r4, #1
   17c2e:	e7f3      	b.n	17c18 <_vfiprintf_r+0xd0>
   17c30:	9b04      	ldr	r3, [sp, #16]
   17c32:	9a02      	ldr	r2, [sp, #8]
   17c34:	0039      	movs	r1, r7
   17c36:	0030      	movs	r0, r6
   17c38:	f7ff ff73 	bl	17b22 <__sfputs_r>
   17c3c:	1c43      	adds	r3, r0, #1
   17c3e:	d100      	bne.n	17c42 <_vfiprintf_r+0xfa>
   17c40:	e086      	b.n	17d50 <_vfiprintf_r+0x208>
   17c42:	696a      	ldr	r2, [r5, #20]
   17c44:	9b04      	ldr	r3, [sp, #16]
   17c46:	4694      	mov	ip, r2
   17c48:	4463      	add	r3, ip
   17c4a:	616b      	str	r3, [r5, #20]
   17c4c:	7823      	ldrb	r3, [r4, #0]
   17c4e:	2b00      	cmp	r3, #0
   17c50:	d07e      	beq.n	17d50 <_vfiprintf_r+0x208>
   17c52:	2201      	movs	r2, #1
   17c54:	2300      	movs	r3, #0
   17c56:	4252      	negs	r2, r2
   17c58:	606a      	str	r2, [r5, #4]
   17c5a:	a902      	add	r1, sp, #8
   17c5c:	3254      	adds	r2, #84	; 0x54
   17c5e:	1852      	adds	r2, r2, r1
   17c60:	3401      	adds	r4, #1
   17c62:	602b      	str	r3, [r5, #0]
   17c64:	60eb      	str	r3, [r5, #12]
   17c66:	60ab      	str	r3, [r5, #8]
   17c68:	7013      	strb	r3, [r2, #0]
   17c6a:	65ab      	str	r3, [r5, #88]	; 0x58
   17c6c:	7821      	ldrb	r1, [r4, #0]
   17c6e:	2205      	movs	r2, #5
   17c70:	4841      	ldr	r0, [pc, #260]	; (17d78 <_vfiprintf_r+0x230>)
   17c72:	f000 faf5 	bl	18260 <memchr>
   17c76:	2800      	cmp	r0, #0
   17c78:	d008      	beq.n	17c8c <_vfiprintf_r+0x144>
   17c7a:	4b3f      	ldr	r3, [pc, #252]	; (17d78 <_vfiprintf_r+0x230>)
   17c7c:	682a      	ldr	r2, [r5, #0]
   17c7e:	1ac0      	subs	r0, r0, r3
   17c80:	2301      	movs	r3, #1
   17c82:	4083      	lsls	r3, r0
   17c84:	4313      	orrs	r3, r2
   17c86:	602b      	str	r3, [r5, #0]
   17c88:	3401      	adds	r4, #1
   17c8a:	e7ef      	b.n	17c6c <_vfiprintf_r+0x124>
   17c8c:	682b      	ldr	r3, [r5, #0]
   17c8e:	06da      	lsls	r2, r3, #27
   17c90:	d504      	bpl.n	17c9c <_vfiprintf_r+0x154>
   17c92:	2253      	movs	r2, #83	; 0x53
   17c94:	2120      	movs	r1, #32
   17c96:	a802      	add	r0, sp, #8
   17c98:	1812      	adds	r2, r2, r0
   17c9a:	7011      	strb	r1, [r2, #0]
   17c9c:	071a      	lsls	r2, r3, #28
   17c9e:	d504      	bpl.n	17caa <_vfiprintf_r+0x162>
   17ca0:	2253      	movs	r2, #83	; 0x53
   17ca2:	212b      	movs	r1, #43	; 0x2b
   17ca4:	a802      	add	r0, sp, #8
   17ca6:	1812      	adds	r2, r2, r0
   17ca8:	7011      	strb	r1, [r2, #0]
   17caa:	7822      	ldrb	r2, [r4, #0]
   17cac:	2a2a      	cmp	r2, #42	; 0x2a
   17cae:	d100      	bne.n	17cb2 <_vfiprintf_r+0x16a>
   17cb0:	e77c      	b.n	17bac <_vfiprintf_r+0x64>
   17cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17cb4:	2000      	movs	r0, #0
   17cb6:	210a      	movs	r1, #10
   17cb8:	e005      	b.n	17cc6 <_vfiprintf_r+0x17e>
   17cba:	4252      	negs	r2, r2
   17cbc:	60ea      	str	r2, [r5, #12]
   17cbe:	2202      	movs	r2, #2
   17cc0:	4313      	orrs	r3, r2
   17cc2:	602b      	str	r3, [r5, #0]
   17cc4:	e77a      	b.n	17bbc <_vfiprintf_r+0x74>
   17cc6:	7822      	ldrb	r2, [r4, #0]
   17cc8:	3a30      	subs	r2, #48	; 0x30
   17cca:	2a09      	cmp	r2, #9
   17ccc:	d804      	bhi.n	17cd8 <_vfiprintf_r+0x190>
   17cce:	434b      	muls	r3, r1
   17cd0:	3401      	adds	r4, #1
   17cd2:	189b      	adds	r3, r3, r2
   17cd4:	2001      	movs	r0, #1
   17cd6:	e7f6      	b.n	17cc6 <_vfiprintf_r+0x17e>
   17cd8:	2800      	cmp	r0, #0
   17cda:	d100      	bne.n	17cde <_vfiprintf_r+0x196>
   17cdc:	e76f      	b.n	17bbe <_vfiprintf_r+0x76>
   17cde:	9309      	str	r3, [sp, #36]	; 0x24
   17ce0:	e76d      	b.n	17bbe <_vfiprintf_r+0x76>
   17ce2:	7863      	ldrb	r3, [r4, #1]
   17ce4:	2b2a      	cmp	r3, #42	; 0x2a
   17ce6:	d10a      	bne.n	17cfe <_vfiprintf_r+0x1b6>
   17ce8:	9b05      	ldr	r3, [sp, #20]
   17cea:	3402      	adds	r4, #2
   17cec:	1d1a      	adds	r2, r3, #4
   17cee:	681b      	ldr	r3, [r3, #0]
   17cf0:	9205      	str	r2, [sp, #20]
   17cf2:	2b00      	cmp	r3, #0
   17cf4:	da01      	bge.n	17cfa <_vfiprintf_r+0x1b2>
   17cf6:	2301      	movs	r3, #1
   17cf8:	425b      	negs	r3, r3
   17cfa:	9307      	str	r3, [sp, #28]
   17cfc:	e763      	b.n	17bc6 <_vfiprintf_r+0x7e>
   17cfe:	2300      	movs	r3, #0
   17d00:	200a      	movs	r0, #10
   17d02:	001a      	movs	r2, r3
   17d04:	3401      	adds	r4, #1
   17d06:	606b      	str	r3, [r5, #4]
   17d08:	7821      	ldrb	r1, [r4, #0]
   17d0a:	3930      	subs	r1, #48	; 0x30
   17d0c:	2909      	cmp	r1, #9
   17d0e:	d804      	bhi.n	17d1a <_vfiprintf_r+0x1d2>
   17d10:	4342      	muls	r2, r0
   17d12:	3401      	adds	r4, #1
   17d14:	1852      	adds	r2, r2, r1
   17d16:	2301      	movs	r3, #1
   17d18:	e7f6      	b.n	17d08 <_vfiprintf_r+0x1c0>
   17d1a:	2b00      	cmp	r3, #0
   17d1c:	d100      	bne.n	17d20 <_vfiprintf_r+0x1d8>
   17d1e:	e752      	b.n	17bc6 <_vfiprintf_r+0x7e>
   17d20:	9207      	str	r2, [sp, #28]
   17d22:	e750      	b.n	17bc6 <_vfiprintf_r+0x7e>
   17d24:	ab05      	add	r3, sp, #20
   17d26:	9300      	str	r3, [sp, #0]
   17d28:	003a      	movs	r2, r7
   17d2a:	4b14      	ldr	r3, [pc, #80]	; (17d7c <_vfiprintf_r+0x234>)
   17d2c:	0029      	movs	r1, r5
   17d2e:	0030      	movs	r0, r6
   17d30:	e000      	b.n	17d34 <_vfiprintf_r+0x1ec>
   17d32:	bf00      	nop
   17d34:	e007      	b.n	17d46 <_vfiprintf_r+0x1fe>
   17d36:	ab05      	add	r3, sp, #20
   17d38:	9300      	str	r3, [sp, #0]
   17d3a:	003a      	movs	r2, r7
   17d3c:	4b0f      	ldr	r3, [pc, #60]	; (17d7c <_vfiprintf_r+0x234>)
   17d3e:	0029      	movs	r1, r5
   17d40:	0030      	movs	r0, r6
   17d42:	f000 f88b 	bl	17e5c <_printf_i>
   17d46:	9003      	str	r0, [sp, #12]
   17d48:	9b03      	ldr	r3, [sp, #12]
   17d4a:	3301      	adds	r3, #1
   17d4c:	d000      	beq.n	17d50 <_vfiprintf_r+0x208>
   17d4e:	e75e      	b.n	17c0e <_vfiprintf_r+0xc6>
   17d50:	89bb      	ldrh	r3, [r7, #12]
   17d52:	065b      	lsls	r3, r3, #25
   17d54:	d500      	bpl.n	17d58 <_vfiprintf_r+0x210>
   17d56:	e726      	b.n	17ba6 <_vfiprintf_r+0x5e>
   17d58:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17d5a:	b01f      	add	sp, #124	; 0x7c
   17d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17d5e:	46c0      	nop			; (mov r8, r8)
   17d60:	00019d5c 	.word	0x00019d5c
   17d64:	00019d7c 	.word	0x00019d7c
   17d68:	00019d9c 	.word	0x00019d9c
   17d6c:	00019dc2 	.word	0x00019dc2
   17d70:	00019dc6 	.word	0x00019dc6
   17d74:	00000000 	.word	0x00000000
   17d78:	00019dbc 	.word	0x00019dbc
   17d7c:	00017b23 	.word	0x00017b23

00017d80 <_printf_common>:
   17d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17d82:	0017      	movs	r7, r2
   17d84:	9301      	str	r3, [sp, #4]
   17d86:	688a      	ldr	r2, [r1, #8]
   17d88:	690b      	ldr	r3, [r1, #16]
   17d8a:	9000      	str	r0, [sp, #0]
   17d8c:	000c      	movs	r4, r1
   17d8e:	4293      	cmp	r3, r2
   17d90:	da00      	bge.n	17d94 <_printf_common+0x14>
   17d92:	0013      	movs	r3, r2
   17d94:	0022      	movs	r2, r4
   17d96:	603b      	str	r3, [r7, #0]
   17d98:	3243      	adds	r2, #67	; 0x43
   17d9a:	7812      	ldrb	r2, [r2, #0]
   17d9c:	2a00      	cmp	r2, #0
   17d9e:	d001      	beq.n	17da4 <_printf_common+0x24>
   17da0:	3301      	adds	r3, #1
   17da2:	603b      	str	r3, [r7, #0]
   17da4:	6823      	ldr	r3, [r4, #0]
   17da6:	069b      	lsls	r3, r3, #26
   17da8:	d502      	bpl.n	17db0 <_printf_common+0x30>
   17daa:	683b      	ldr	r3, [r7, #0]
   17dac:	3302      	adds	r3, #2
   17dae:	603b      	str	r3, [r7, #0]
   17db0:	2506      	movs	r5, #6
   17db2:	6823      	ldr	r3, [r4, #0]
   17db4:	401d      	ands	r5, r3
   17db6:	d01e      	beq.n	17df6 <_printf_common+0x76>
   17db8:	0023      	movs	r3, r4
   17dba:	3343      	adds	r3, #67	; 0x43
   17dbc:	781b      	ldrb	r3, [r3, #0]
   17dbe:	1e5a      	subs	r2, r3, #1
   17dc0:	4193      	sbcs	r3, r2
   17dc2:	6822      	ldr	r2, [r4, #0]
   17dc4:	0692      	lsls	r2, r2, #26
   17dc6:	d51c      	bpl.n	17e02 <_printf_common+0x82>
   17dc8:	2030      	movs	r0, #48	; 0x30
   17dca:	18e1      	adds	r1, r4, r3
   17dcc:	3143      	adds	r1, #67	; 0x43
   17dce:	7008      	strb	r0, [r1, #0]
   17dd0:	0021      	movs	r1, r4
   17dd2:	1c5a      	adds	r2, r3, #1
   17dd4:	3145      	adds	r1, #69	; 0x45
   17dd6:	7809      	ldrb	r1, [r1, #0]
   17dd8:	18a2      	adds	r2, r4, r2
   17dda:	3243      	adds	r2, #67	; 0x43
   17ddc:	3302      	adds	r3, #2
   17dde:	7011      	strb	r1, [r2, #0]
   17de0:	e00f      	b.n	17e02 <_printf_common+0x82>
   17de2:	0022      	movs	r2, r4
   17de4:	2301      	movs	r3, #1
   17de6:	3219      	adds	r2, #25
   17de8:	9901      	ldr	r1, [sp, #4]
   17dea:	9800      	ldr	r0, [sp, #0]
   17dec:	9e08      	ldr	r6, [sp, #32]
   17dee:	47b0      	blx	r6
   17df0:	1c43      	adds	r3, r0, #1
   17df2:	d00e      	beq.n	17e12 <_printf_common+0x92>
   17df4:	3501      	adds	r5, #1
   17df6:	68e3      	ldr	r3, [r4, #12]
   17df8:	683a      	ldr	r2, [r7, #0]
   17dfa:	1a9b      	subs	r3, r3, r2
   17dfc:	429d      	cmp	r5, r3
   17dfe:	dbf0      	blt.n	17de2 <_printf_common+0x62>
   17e00:	e7da      	b.n	17db8 <_printf_common+0x38>
   17e02:	0022      	movs	r2, r4
   17e04:	9901      	ldr	r1, [sp, #4]
   17e06:	3243      	adds	r2, #67	; 0x43
   17e08:	9800      	ldr	r0, [sp, #0]
   17e0a:	9d08      	ldr	r5, [sp, #32]
   17e0c:	47a8      	blx	r5
   17e0e:	1c43      	adds	r3, r0, #1
   17e10:	d102      	bne.n	17e18 <_printf_common+0x98>
   17e12:	2001      	movs	r0, #1
   17e14:	4240      	negs	r0, r0
   17e16:	e020      	b.n	17e5a <_printf_common+0xda>
   17e18:	2306      	movs	r3, #6
   17e1a:	6820      	ldr	r0, [r4, #0]
   17e1c:	68e1      	ldr	r1, [r4, #12]
   17e1e:	683a      	ldr	r2, [r7, #0]
   17e20:	4003      	ands	r3, r0
   17e22:	2500      	movs	r5, #0
   17e24:	2b04      	cmp	r3, #4
   17e26:	d103      	bne.n	17e30 <_printf_common+0xb0>
   17e28:	1a8d      	subs	r5, r1, r2
   17e2a:	43eb      	mvns	r3, r5
   17e2c:	17db      	asrs	r3, r3, #31
   17e2e:	401d      	ands	r5, r3
   17e30:	68a3      	ldr	r3, [r4, #8]
   17e32:	6922      	ldr	r2, [r4, #16]
   17e34:	4293      	cmp	r3, r2
   17e36:	dd01      	ble.n	17e3c <_printf_common+0xbc>
   17e38:	1a9b      	subs	r3, r3, r2
   17e3a:	18ed      	adds	r5, r5, r3
   17e3c:	2700      	movs	r7, #0
   17e3e:	42bd      	cmp	r5, r7
   17e40:	d00a      	beq.n	17e58 <_printf_common+0xd8>
   17e42:	0022      	movs	r2, r4
   17e44:	2301      	movs	r3, #1
   17e46:	321a      	adds	r2, #26
   17e48:	9901      	ldr	r1, [sp, #4]
   17e4a:	9800      	ldr	r0, [sp, #0]
   17e4c:	9e08      	ldr	r6, [sp, #32]
   17e4e:	47b0      	blx	r6
   17e50:	1c43      	adds	r3, r0, #1
   17e52:	d0de      	beq.n	17e12 <_printf_common+0x92>
   17e54:	3701      	adds	r7, #1
   17e56:	e7f2      	b.n	17e3e <_printf_common+0xbe>
   17e58:	2000      	movs	r0, #0
   17e5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00017e5c <_printf_i>:
   17e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e5e:	b08b      	sub	sp, #44	; 0x2c
   17e60:	9206      	str	r2, [sp, #24]
   17e62:	000a      	movs	r2, r1
   17e64:	3243      	adds	r2, #67	; 0x43
   17e66:	9307      	str	r3, [sp, #28]
   17e68:	9005      	str	r0, [sp, #20]
   17e6a:	9204      	str	r2, [sp, #16]
   17e6c:	7e0a      	ldrb	r2, [r1, #24]
   17e6e:	000c      	movs	r4, r1
   17e70:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17e72:	2a6e      	cmp	r2, #110	; 0x6e
   17e74:	d100      	bne.n	17e78 <_printf_i+0x1c>
   17e76:	e0ab      	b.n	17fd0 <_printf_i+0x174>
   17e78:	d811      	bhi.n	17e9e <_printf_i+0x42>
   17e7a:	2a63      	cmp	r2, #99	; 0x63
   17e7c:	d022      	beq.n	17ec4 <_printf_i+0x68>
   17e7e:	d809      	bhi.n	17e94 <_printf_i+0x38>
   17e80:	2a00      	cmp	r2, #0
   17e82:	d100      	bne.n	17e86 <_printf_i+0x2a>
   17e84:	e0b5      	b.n	17ff2 <_printf_i+0x196>
   17e86:	2a58      	cmp	r2, #88	; 0x58
   17e88:	d000      	beq.n	17e8c <_printf_i+0x30>
   17e8a:	e0c5      	b.n	18018 <_printf_i+0x1bc>
   17e8c:	3145      	adds	r1, #69	; 0x45
   17e8e:	700a      	strb	r2, [r1, #0]
   17e90:	4a81      	ldr	r2, [pc, #516]	; (18098 <_printf_i+0x23c>)
   17e92:	e04f      	b.n	17f34 <_printf_i+0xd8>
   17e94:	2a64      	cmp	r2, #100	; 0x64
   17e96:	d01d      	beq.n	17ed4 <_printf_i+0x78>
   17e98:	2a69      	cmp	r2, #105	; 0x69
   17e9a:	d01b      	beq.n	17ed4 <_printf_i+0x78>
   17e9c:	e0bc      	b.n	18018 <_printf_i+0x1bc>
   17e9e:	2a73      	cmp	r2, #115	; 0x73
   17ea0:	d100      	bne.n	17ea4 <_printf_i+0x48>
   17ea2:	e0aa      	b.n	17ffa <_printf_i+0x19e>
   17ea4:	d809      	bhi.n	17eba <_printf_i+0x5e>
   17ea6:	2a6f      	cmp	r2, #111	; 0x6f
   17ea8:	d029      	beq.n	17efe <_printf_i+0xa2>
   17eaa:	2a70      	cmp	r2, #112	; 0x70
   17eac:	d000      	beq.n	17eb0 <_printf_i+0x54>
   17eae:	e0b3      	b.n	18018 <_printf_i+0x1bc>
   17eb0:	2220      	movs	r2, #32
   17eb2:	6809      	ldr	r1, [r1, #0]
   17eb4:	430a      	orrs	r2, r1
   17eb6:	6022      	str	r2, [r4, #0]
   17eb8:	e037      	b.n	17f2a <_printf_i+0xce>
   17eba:	2a75      	cmp	r2, #117	; 0x75
   17ebc:	d01f      	beq.n	17efe <_printf_i+0xa2>
   17ebe:	2a78      	cmp	r2, #120	; 0x78
   17ec0:	d033      	beq.n	17f2a <_printf_i+0xce>
   17ec2:	e0a9      	b.n	18018 <_printf_i+0x1bc>
   17ec4:	000e      	movs	r6, r1
   17ec6:	681a      	ldr	r2, [r3, #0]
   17ec8:	3642      	adds	r6, #66	; 0x42
   17eca:	1d11      	adds	r1, r2, #4
   17ecc:	6019      	str	r1, [r3, #0]
   17ece:	6813      	ldr	r3, [r2, #0]
   17ed0:	7033      	strb	r3, [r6, #0]
   17ed2:	e0a4      	b.n	1801e <_printf_i+0x1c2>
   17ed4:	6821      	ldr	r1, [r4, #0]
   17ed6:	681a      	ldr	r2, [r3, #0]
   17ed8:	0608      	lsls	r0, r1, #24
   17eda:	d406      	bmi.n	17eea <_printf_i+0x8e>
   17edc:	0649      	lsls	r1, r1, #25
   17ede:	d504      	bpl.n	17eea <_printf_i+0x8e>
   17ee0:	1d11      	adds	r1, r2, #4
   17ee2:	6019      	str	r1, [r3, #0]
   17ee4:	2300      	movs	r3, #0
   17ee6:	5ed5      	ldrsh	r5, [r2, r3]
   17ee8:	e002      	b.n	17ef0 <_printf_i+0x94>
   17eea:	1d11      	adds	r1, r2, #4
   17eec:	6019      	str	r1, [r3, #0]
   17eee:	6815      	ldr	r5, [r2, #0]
   17ef0:	2d00      	cmp	r5, #0
   17ef2:	da3b      	bge.n	17f6c <_printf_i+0x110>
   17ef4:	232d      	movs	r3, #45	; 0x2d
   17ef6:	9a04      	ldr	r2, [sp, #16]
   17ef8:	426d      	negs	r5, r5
   17efa:	7013      	strb	r3, [r2, #0]
   17efc:	e036      	b.n	17f6c <_printf_i+0x110>
   17efe:	6821      	ldr	r1, [r4, #0]
   17f00:	681a      	ldr	r2, [r3, #0]
   17f02:	0608      	lsls	r0, r1, #24
   17f04:	d406      	bmi.n	17f14 <_printf_i+0xb8>
   17f06:	0649      	lsls	r1, r1, #25
   17f08:	d504      	bpl.n	17f14 <_printf_i+0xb8>
   17f0a:	6815      	ldr	r5, [r2, #0]
   17f0c:	1d11      	adds	r1, r2, #4
   17f0e:	6019      	str	r1, [r3, #0]
   17f10:	b2ad      	uxth	r5, r5
   17f12:	e002      	b.n	17f1a <_printf_i+0xbe>
   17f14:	1d11      	adds	r1, r2, #4
   17f16:	6019      	str	r1, [r3, #0]
   17f18:	6815      	ldr	r5, [r2, #0]
   17f1a:	4b5f      	ldr	r3, [pc, #380]	; (18098 <_printf_i+0x23c>)
   17f1c:	7e22      	ldrb	r2, [r4, #24]
   17f1e:	9303      	str	r3, [sp, #12]
   17f20:	2708      	movs	r7, #8
   17f22:	2a6f      	cmp	r2, #111	; 0x6f
   17f24:	d01d      	beq.n	17f62 <_printf_i+0x106>
   17f26:	270a      	movs	r7, #10
   17f28:	e01b      	b.n	17f62 <_printf_i+0x106>
   17f2a:	0022      	movs	r2, r4
   17f2c:	2178      	movs	r1, #120	; 0x78
   17f2e:	3245      	adds	r2, #69	; 0x45
   17f30:	7011      	strb	r1, [r2, #0]
   17f32:	4a5a      	ldr	r2, [pc, #360]	; (1809c <_printf_i+0x240>)
   17f34:	6819      	ldr	r1, [r3, #0]
   17f36:	9203      	str	r2, [sp, #12]
   17f38:	1d08      	adds	r0, r1, #4
   17f3a:	6822      	ldr	r2, [r4, #0]
   17f3c:	6018      	str	r0, [r3, #0]
   17f3e:	680d      	ldr	r5, [r1, #0]
   17f40:	0610      	lsls	r0, r2, #24
   17f42:	d402      	bmi.n	17f4a <_printf_i+0xee>
   17f44:	0650      	lsls	r0, r2, #25
   17f46:	d500      	bpl.n	17f4a <_printf_i+0xee>
   17f48:	b2ad      	uxth	r5, r5
   17f4a:	07d3      	lsls	r3, r2, #31
   17f4c:	d502      	bpl.n	17f54 <_printf_i+0xf8>
   17f4e:	2320      	movs	r3, #32
   17f50:	431a      	orrs	r2, r3
   17f52:	6022      	str	r2, [r4, #0]
   17f54:	2710      	movs	r7, #16
   17f56:	2d00      	cmp	r5, #0
   17f58:	d103      	bne.n	17f62 <_printf_i+0x106>
   17f5a:	2320      	movs	r3, #32
   17f5c:	6822      	ldr	r2, [r4, #0]
   17f5e:	439a      	bics	r2, r3
   17f60:	6022      	str	r2, [r4, #0]
   17f62:	0023      	movs	r3, r4
   17f64:	2200      	movs	r2, #0
   17f66:	3343      	adds	r3, #67	; 0x43
   17f68:	701a      	strb	r2, [r3, #0]
   17f6a:	e002      	b.n	17f72 <_printf_i+0x116>
   17f6c:	270a      	movs	r7, #10
   17f6e:	4b4a      	ldr	r3, [pc, #296]	; (18098 <_printf_i+0x23c>)
   17f70:	9303      	str	r3, [sp, #12]
   17f72:	6863      	ldr	r3, [r4, #4]
   17f74:	60a3      	str	r3, [r4, #8]
   17f76:	2b00      	cmp	r3, #0
   17f78:	db09      	blt.n	17f8e <_printf_i+0x132>
   17f7a:	2204      	movs	r2, #4
   17f7c:	6821      	ldr	r1, [r4, #0]
   17f7e:	4391      	bics	r1, r2
   17f80:	6021      	str	r1, [r4, #0]
   17f82:	2d00      	cmp	r5, #0
   17f84:	d105      	bne.n	17f92 <_printf_i+0x136>
   17f86:	9e04      	ldr	r6, [sp, #16]
   17f88:	2b00      	cmp	r3, #0
   17f8a:	d011      	beq.n	17fb0 <_printf_i+0x154>
   17f8c:	e07b      	b.n	18086 <_printf_i+0x22a>
   17f8e:	2d00      	cmp	r5, #0
   17f90:	d079      	beq.n	18086 <_printf_i+0x22a>
   17f92:	9e04      	ldr	r6, [sp, #16]
   17f94:	0028      	movs	r0, r5
   17f96:	0039      	movs	r1, r7
   17f98:	f7fe fcec 	bl	16974 <__aeabi_uidivmod>
   17f9c:	9b03      	ldr	r3, [sp, #12]
   17f9e:	3e01      	subs	r6, #1
   17fa0:	5c5b      	ldrb	r3, [r3, r1]
   17fa2:	0028      	movs	r0, r5
   17fa4:	7033      	strb	r3, [r6, #0]
   17fa6:	0039      	movs	r1, r7
   17fa8:	f7fe fc5e 	bl	16868 <__aeabi_uidiv>
   17fac:	1e05      	subs	r5, r0, #0
   17fae:	d1f1      	bne.n	17f94 <_printf_i+0x138>
   17fb0:	2f08      	cmp	r7, #8
   17fb2:	d109      	bne.n	17fc8 <_printf_i+0x16c>
   17fb4:	6823      	ldr	r3, [r4, #0]
   17fb6:	07db      	lsls	r3, r3, #31
   17fb8:	d506      	bpl.n	17fc8 <_printf_i+0x16c>
   17fba:	6863      	ldr	r3, [r4, #4]
   17fbc:	6922      	ldr	r2, [r4, #16]
   17fbe:	4293      	cmp	r3, r2
   17fc0:	dc02      	bgt.n	17fc8 <_printf_i+0x16c>
   17fc2:	2330      	movs	r3, #48	; 0x30
   17fc4:	3e01      	subs	r6, #1
   17fc6:	7033      	strb	r3, [r6, #0]
   17fc8:	9b04      	ldr	r3, [sp, #16]
   17fca:	1b9b      	subs	r3, r3, r6
   17fcc:	6123      	str	r3, [r4, #16]
   17fce:	e02b      	b.n	18028 <_printf_i+0x1cc>
   17fd0:	6809      	ldr	r1, [r1, #0]
   17fd2:	681a      	ldr	r2, [r3, #0]
   17fd4:	0608      	lsls	r0, r1, #24
   17fd6:	d407      	bmi.n	17fe8 <_printf_i+0x18c>
   17fd8:	0649      	lsls	r1, r1, #25
   17fda:	d505      	bpl.n	17fe8 <_printf_i+0x18c>
   17fdc:	1d11      	adds	r1, r2, #4
   17fde:	6019      	str	r1, [r3, #0]
   17fe0:	6813      	ldr	r3, [r2, #0]
   17fe2:	8aa2      	ldrh	r2, [r4, #20]
   17fe4:	801a      	strh	r2, [r3, #0]
   17fe6:	e004      	b.n	17ff2 <_printf_i+0x196>
   17fe8:	1d11      	adds	r1, r2, #4
   17fea:	6019      	str	r1, [r3, #0]
   17fec:	6813      	ldr	r3, [r2, #0]
   17fee:	6962      	ldr	r2, [r4, #20]
   17ff0:	601a      	str	r2, [r3, #0]
   17ff2:	2300      	movs	r3, #0
   17ff4:	9e04      	ldr	r6, [sp, #16]
   17ff6:	6123      	str	r3, [r4, #16]
   17ff8:	e016      	b.n	18028 <_printf_i+0x1cc>
   17ffa:	681a      	ldr	r2, [r3, #0]
   17ffc:	1d11      	adds	r1, r2, #4
   17ffe:	6019      	str	r1, [r3, #0]
   18000:	6816      	ldr	r6, [r2, #0]
   18002:	2100      	movs	r1, #0
   18004:	6862      	ldr	r2, [r4, #4]
   18006:	0030      	movs	r0, r6
   18008:	f000 f92a 	bl	18260 <memchr>
   1800c:	2800      	cmp	r0, #0
   1800e:	d001      	beq.n	18014 <_printf_i+0x1b8>
   18010:	1b80      	subs	r0, r0, r6
   18012:	6060      	str	r0, [r4, #4]
   18014:	6863      	ldr	r3, [r4, #4]
   18016:	e003      	b.n	18020 <_printf_i+0x1c4>
   18018:	0026      	movs	r6, r4
   1801a:	3642      	adds	r6, #66	; 0x42
   1801c:	7032      	strb	r2, [r6, #0]
   1801e:	2301      	movs	r3, #1
   18020:	6123      	str	r3, [r4, #16]
   18022:	2300      	movs	r3, #0
   18024:	9a04      	ldr	r2, [sp, #16]
   18026:	7013      	strb	r3, [r2, #0]
   18028:	9b07      	ldr	r3, [sp, #28]
   1802a:	aa09      	add	r2, sp, #36	; 0x24
   1802c:	9300      	str	r3, [sp, #0]
   1802e:	0021      	movs	r1, r4
   18030:	9b06      	ldr	r3, [sp, #24]
   18032:	9805      	ldr	r0, [sp, #20]
   18034:	f7ff fea4 	bl	17d80 <_printf_common>
   18038:	1c43      	adds	r3, r0, #1
   1803a:	d102      	bne.n	18042 <_printf_i+0x1e6>
   1803c:	2001      	movs	r0, #1
   1803e:	4240      	negs	r0, r0
   18040:	e027      	b.n	18092 <_printf_i+0x236>
   18042:	6923      	ldr	r3, [r4, #16]
   18044:	0032      	movs	r2, r6
   18046:	9906      	ldr	r1, [sp, #24]
   18048:	9805      	ldr	r0, [sp, #20]
   1804a:	9d07      	ldr	r5, [sp, #28]
   1804c:	47a8      	blx	r5
   1804e:	1c43      	adds	r3, r0, #1
   18050:	d0f4      	beq.n	1803c <_printf_i+0x1e0>
   18052:	6823      	ldr	r3, [r4, #0]
   18054:	2500      	movs	r5, #0
   18056:	079b      	lsls	r3, r3, #30
   18058:	d40f      	bmi.n	1807a <_printf_i+0x21e>
   1805a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1805c:	68e0      	ldr	r0, [r4, #12]
   1805e:	4298      	cmp	r0, r3
   18060:	da17      	bge.n	18092 <_printf_i+0x236>
   18062:	0018      	movs	r0, r3
   18064:	e015      	b.n	18092 <_printf_i+0x236>
   18066:	0022      	movs	r2, r4
   18068:	2301      	movs	r3, #1
   1806a:	3219      	adds	r2, #25
   1806c:	9906      	ldr	r1, [sp, #24]
   1806e:	9805      	ldr	r0, [sp, #20]
   18070:	9e07      	ldr	r6, [sp, #28]
   18072:	47b0      	blx	r6
   18074:	1c43      	adds	r3, r0, #1
   18076:	d0e1      	beq.n	1803c <_printf_i+0x1e0>
   18078:	3501      	adds	r5, #1
   1807a:	68e3      	ldr	r3, [r4, #12]
   1807c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1807e:	1a9b      	subs	r3, r3, r2
   18080:	429d      	cmp	r5, r3
   18082:	dbf0      	blt.n	18066 <_printf_i+0x20a>
   18084:	e7e9      	b.n	1805a <_printf_i+0x1fe>
   18086:	0026      	movs	r6, r4
   18088:	9b03      	ldr	r3, [sp, #12]
   1808a:	3642      	adds	r6, #66	; 0x42
   1808c:	781b      	ldrb	r3, [r3, #0]
   1808e:	7033      	strb	r3, [r6, #0]
   18090:	e78e      	b.n	17fb0 <_printf_i+0x154>
   18092:	b00b      	add	sp, #44	; 0x2c
   18094:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18096:	46c0      	nop			; (mov r8, r8)
   18098:	00019dcd 	.word	0x00019dcd
   1809c:	00019dde 	.word	0x00019dde

000180a0 <_putc_r>:
   180a0:	b570      	push	{r4, r5, r6, lr}
   180a2:	0006      	movs	r6, r0
   180a4:	000d      	movs	r5, r1
   180a6:	0014      	movs	r4, r2
   180a8:	2800      	cmp	r0, #0
   180aa:	d004      	beq.n	180b6 <_putc_r+0x16>
   180ac:	6983      	ldr	r3, [r0, #24]
   180ae:	2b00      	cmp	r3, #0
   180b0:	d101      	bne.n	180b6 <_putc_r+0x16>
   180b2:	f7ff fac9 	bl	17648 <__sinit>
   180b6:	4b12      	ldr	r3, [pc, #72]	; (18100 <_putc_r+0x60>)
   180b8:	429c      	cmp	r4, r3
   180ba:	d101      	bne.n	180c0 <_putc_r+0x20>
   180bc:	6874      	ldr	r4, [r6, #4]
   180be:	e008      	b.n	180d2 <_putc_r+0x32>
   180c0:	4b10      	ldr	r3, [pc, #64]	; (18104 <_putc_r+0x64>)
   180c2:	429c      	cmp	r4, r3
   180c4:	d101      	bne.n	180ca <_putc_r+0x2a>
   180c6:	68b4      	ldr	r4, [r6, #8]
   180c8:	e003      	b.n	180d2 <_putc_r+0x32>
   180ca:	4b0f      	ldr	r3, [pc, #60]	; (18108 <_putc_r+0x68>)
   180cc:	429c      	cmp	r4, r3
   180ce:	d100      	bne.n	180d2 <_putc_r+0x32>
   180d0:	68f4      	ldr	r4, [r6, #12]
   180d2:	68a3      	ldr	r3, [r4, #8]
   180d4:	3b01      	subs	r3, #1
   180d6:	60a3      	str	r3, [r4, #8]
   180d8:	2b00      	cmp	r3, #0
   180da:	da05      	bge.n	180e8 <_putc_r+0x48>
   180dc:	69a2      	ldr	r2, [r4, #24]
   180de:	4293      	cmp	r3, r2
   180e0:	db08      	blt.n	180f4 <_putc_r+0x54>
   180e2:	b2eb      	uxtb	r3, r5
   180e4:	2b0a      	cmp	r3, #10
   180e6:	d005      	beq.n	180f4 <_putc_r+0x54>
   180e8:	6823      	ldr	r3, [r4, #0]
   180ea:	b2e8      	uxtb	r0, r5
   180ec:	1c5a      	adds	r2, r3, #1
   180ee:	6022      	str	r2, [r4, #0]
   180f0:	701d      	strb	r5, [r3, #0]
   180f2:	e004      	b.n	180fe <_putc_r+0x5e>
   180f4:	0022      	movs	r2, r4
   180f6:	0029      	movs	r1, r5
   180f8:	0030      	movs	r0, r6
   180fa:	f7ff f8e3 	bl	172c4 <__swbuf_r>
   180fe:	bd70      	pop	{r4, r5, r6, pc}
   18100:	00019d5c 	.word	0x00019d5c
   18104:	00019d7c 	.word	0x00019d7c
   18108:	00019d9c 	.word	0x00019d9c

0001810c <__sread>:
   1810c:	b570      	push	{r4, r5, r6, lr}
   1810e:	000c      	movs	r4, r1
   18110:	250e      	movs	r5, #14
   18112:	5f49      	ldrsh	r1, [r1, r5]
   18114:	f000 f8d6 	bl	182c4 <_read_r>
   18118:	2800      	cmp	r0, #0
   1811a:	db03      	blt.n	18124 <__sread+0x18>
   1811c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1811e:	181b      	adds	r3, r3, r0
   18120:	6563      	str	r3, [r4, #84]	; 0x54
   18122:	e003      	b.n	1812c <__sread+0x20>
   18124:	89a2      	ldrh	r2, [r4, #12]
   18126:	4b02      	ldr	r3, [pc, #8]	; (18130 <__sread+0x24>)
   18128:	4013      	ands	r3, r2
   1812a:	81a3      	strh	r3, [r4, #12]
   1812c:	bd70      	pop	{r4, r5, r6, pc}
   1812e:	46c0      	nop			; (mov r8, r8)
   18130:	ffffefff 	.word	0xffffefff

00018134 <__swrite>:
   18134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18136:	001f      	movs	r7, r3
   18138:	898b      	ldrh	r3, [r1, #12]
   1813a:	0005      	movs	r5, r0
   1813c:	000c      	movs	r4, r1
   1813e:	0016      	movs	r6, r2
   18140:	05db      	lsls	r3, r3, #23
   18142:	d505      	bpl.n	18150 <__swrite+0x1c>
   18144:	230e      	movs	r3, #14
   18146:	5ec9      	ldrsh	r1, [r1, r3]
   18148:	2200      	movs	r2, #0
   1814a:	2302      	movs	r3, #2
   1814c:	f000 f874 	bl	18238 <_lseek_r>
   18150:	89a2      	ldrh	r2, [r4, #12]
   18152:	4b05      	ldr	r3, [pc, #20]	; (18168 <__swrite+0x34>)
   18154:	0028      	movs	r0, r5
   18156:	4013      	ands	r3, r2
   18158:	81a3      	strh	r3, [r4, #12]
   1815a:	0032      	movs	r2, r6
   1815c:	230e      	movs	r3, #14
   1815e:	5ee1      	ldrsh	r1, [r4, r3]
   18160:	003b      	movs	r3, r7
   18162:	f000 f81f 	bl	181a4 <_write_r>
   18166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18168:	ffffefff 	.word	0xffffefff

0001816c <__sseek>:
   1816c:	b570      	push	{r4, r5, r6, lr}
   1816e:	000c      	movs	r4, r1
   18170:	250e      	movs	r5, #14
   18172:	5f49      	ldrsh	r1, [r1, r5]
   18174:	f000 f860 	bl	18238 <_lseek_r>
   18178:	89a3      	ldrh	r3, [r4, #12]
   1817a:	1c42      	adds	r2, r0, #1
   1817c:	d103      	bne.n	18186 <__sseek+0x1a>
   1817e:	4a05      	ldr	r2, [pc, #20]	; (18194 <__sseek+0x28>)
   18180:	4013      	ands	r3, r2
   18182:	81a3      	strh	r3, [r4, #12]
   18184:	e004      	b.n	18190 <__sseek+0x24>
   18186:	2280      	movs	r2, #128	; 0x80
   18188:	0152      	lsls	r2, r2, #5
   1818a:	4313      	orrs	r3, r2
   1818c:	81a3      	strh	r3, [r4, #12]
   1818e:	6560      	str	r0, [r4, #84]	; 0x54
   18190:	bd70      	pop	{r4, r5, r6, pc}
   18192:	46c0      	nop			; (mov r8, r8)
   18194:	ffffefff 	.word	0xffffefff

00018198 <__sclose>:
   18198:	b510      	push	{r4, lr}
   1819a:	230e      	movs	r3, #14
   1819c:	5ec9      	ldrsh	r1, [r1, r3]
   1819e:	f000 f815 	bl	181cc <_close_r>
   181a2:	bd10      	pop	{r4, pc}

000181a4 <_write_r>:
   181a4:	b570      	push	{r4, r5, r6, lr}
   181a6:	0005      	movs	r5, r0
   181a8:	0008      	movs	r0, r1
   181aa:	0011      	movs	r1, r2
   181ac:	2200      	movs	r2, #0
   181ae:	4c06      	ldr	r4, [pc, #24]	; (181c8 <_write_r+0x24>)
   181b0:	6022      	str	r2, [r4, #0]
   181b2:	001a      	movs	r2, r3
   181b4:	f7fd f97e 	bl	154b4 <_write>
   181b8:	1c43      	adds	r3, r0, #1
   181ba:	d103      	bne.n	181c4 <_write_r+0x20>
   181bc:	6823      	ldr	r3, [r4, #0]
   181be:	2b00      	cmp	r3, #0
   181c0:	d000      	beq.n	181c4 <_write_r+0x20>
   181c2:	602b      	str	r3, [r5, #0]
   181c4:	bd70      	pop	{r4, r5, r6, pc}
   181c6:	46c0      	nop			; (mov r8, r8)
   181c8:	20000da0 	.word	0x20000da0

000181cc <_close_r>:
   181cc:	2300      	movs	r3, #0
   181ce:	b570      	push	{r4, r5, r6, lr}
   181d0:	4c06      	ldr	r4, [pc, #24]	; (181ec <_close_r+0x20>)
   181d2:	0005      	movs	r5, r0
   181d4:	0008      	movs	r0, r1
   181d6:	6023      	str	r3, [r4, #0]
   181d8:	f7f8 fdb2 	bl	10d40 <_close>
   181dc:	1c43      	adds	r3, r0, #1
   181de:	d103      	bne.n	181e8 <_close_r+0x1c>
   181e0:	6823      	ldr	r3, [r4, #0]
   181e2:	2b00      	cmp	r3, #0
   181e4:	d000      	beq.n	181e8 <_close_r+0x1c>
   181e6:	602b      	str	r3, [r5, #0]
   181e8:	bd70      	pop	{r4, r5, r6, pc}
   181ea:	46c0      	nop			; (mov r8, r8)
   181ec:	20000da0 	.word	0x20000da0

000181f0 <_fstat_r>:
   181f0:	2300      	movs	r3, #0
   181f2:	b570      	push	{r4, r5, r6, lr}
   181f4:	4c06      	ldr	r4, [pc, #24]	; (18210 <_fstat_r+0x20>)
   181f6:	0005      	movs	r5, r0
   181f8:	0008      	movs	r0, r1
   181fa:	0011      	movs	r1, r2
   181fc:	6023      	str	r3, [r4, #0]
   181fe:	f7f8 fda9 	bl	10d54 <_fstat>
   18202:	1c43      	adds	r3, r0, #1
   18204:	d103      	bne.n	1820e <_fstat_r+0x1e>
   18206:	6823      	ldr	r3, [r4, #0]
   18208:	2b00      	cmp	r3, #0
   1820a:	d000      	beq.n	1820e <_fstat_r+0x1e>
   1820c:	602b      	str	r3, [r5, #0]
   1820e:	bd70      	pop	{r4, r5, r6, pc}
   18210:	20000da0 	.word	0x20000da0

00018214 <_isatty_r>:
   18214:	2300      	movs	r3, #0
   18216:	b570      	push	{r4, r5, r6, lr}
   18218:	4c06      	ldr	r4, [pc, #24]	; (18234 <_isatty_r+0x20>)
   1821a:	0005      	movs	r5, r0
   1821c:	0008      	movs	r0, r1
   1821e:	6023      	str	r3, [r4, #0]
   18220:	f7f8 fda6 	bl	10d70 <_isatty>
   18224:	1c43      	adds	r3, r0, #1
   18226:	d103      	bne.n	18230 <_isatty_r+0x1c>
   18228:	6823      	ldr	r3, [r4, #0]
   1822a:	2b00      	cmp	r3, #0
   1822c:	d000      	beq.n	18230 <_isatty_r+0x1c>
   1822e:	602b      	str	r3, [r5, #0]
   18230:	bd70      	pop	{r4, r5, r6, pc}
   18232:	46c0      	nop			; (mov r8, r8)
   18234:	20000da0 	.word	0x20000da0

00018238 <_lseek_r>:
   18238:	b570      	push	{r4, r5, r6, lr}
   1823a:	0005      	movs	r5, r0
   1823c:	0008      	movs	r0, r1
   1823e:	0011      	movs	r1, r2
   18240:	2200      	movs	r2, #0
   18242:	4c06      	ldr	r4, [pc, #24]	; (1825c <_lseek_r+0x24>)
   18244:	6022      	str	r2, [r4, #0]
   18246:	001a      	movs	r2, r3
   18248:	f7f8 fd9c 	bl	10d84 <_lseek>
   1824c:	1c43      	adds	r3, r0, #1
   1824e:	d103      	bne.n	18258 <_lseek_r+0x20>
   18250:	6823      	ldr	r3, [r4, #0]
   18252:	2b00      	cmp	r3, #0
   18254:	d000      	beq.n	18258 <_lseek_r+0x20>
   18256:	602b      	str	r3, [r5, #0]
   18258:	bd70      	pop	{r4, r5, r6, pc}
   1825a:	46c0      	nop			; (mov r8, r8)
   1825c:	20000da0 	.word	0x20000da0

00018260 <memchr>:
   18260:	b2c9      	uxtb	r1, r1
   18262:	1882      	adds	r2, r0, r2
   18264:	4290      	cmp	r0, r2
   18266:	d004      	beq.n	18272 <memchr+0x12>
   18268:	7803      	ldrb	r3, [r0, #0]
   1826a:	428b      	cmp	r3, r1
   1826c:	d002      	beq.n	18274 <memchr+0x14>
   1826e:	3001      	adds	r0, #1
   18270:	e7f8      	b.n	18264 <memchr+0x4>
   18272:	2000      	movs	r0, #0
   18274:	4770      	bx	lr

00018276 <_realloc_r>:
   18276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18278:	0006      	movs	r6, r0
   1827a:	000c      	movs	r4, r1
   1827c:	0015      	movs	r5, r2
   1827e:	2900      	cmp	r1, #0
   18280:	d104      	bne.n	1828c <_realloc_r+0x16>
   18282:	0011      	movs	r1, r2
   18284:	f7fe fd3e 	bl	16d04 <_malloc_r>
   18288:	0004      	movs	r4, r0
   1828a:	e018      	b.n	182be <_realloc_r+0x48>
   1828c:	2a00      	cmp	r2, #0
   1828e:	d103      	bne.n	18298 <_realloc_r+0x22>
   18290:	f7fe fcf2 	bl	16c78 <_free_r>
   18294:	002c      	movs	r4, r5
   18296:	e012      	b.n	182be <_realloc_r+0x48>
   18298:	f000 f828 	bl	182ec <_malloc_usable_size_r>
   1829c:	4285      	cmp	r5, r0
   1829e:	d90e      	bls.n	182be <_realloc_r+0x48>
   182a0:	0029      	movs	r1, r5
   182a2:	0030      	movs	r0, r6
   182a4:	f7fe fd2e 	bl	16d04 <_malloc_r>
   182a8:	1e07      	subs	r7, r0, #0
   182aa:	d007      	beq.n	182bc <_realloc_r+0x46>
   182ac:	0021      	movs	r1, r4
   182ae:	002a      	movs	r2, r5
   182b0:	f7fe fcbc 	bl	16c2c <memcpy>
   182b4:	0021      	movs	r1, r4
   182b6:	0030      	movs	r0, r6
   182b8:	f7fe fcde 	bl	16c78 <_free_r>
   182bc:	003c      	movs	r4, r7
   182be:	0020      	movs	r0, r4
   182c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000182c4 <_read_r>:
   182c4:	b570      	push	{r4, r5, r6, lr}
   182c6:	0005      	movs	r5, r0
   182c8:	0008      	movs	r0, r1
   182ca:	0011      	movs	r1, r2
   182cc:	2200      	movs	r2, #0
   182ce:	4c06      	ldr	r4, [pc, #24]	; (182e8 <_read_r+0x24>)
   182d0:	6022      	str	r2, [r4, #0]
   182d2:	001a      	movs	r2, r3
   182d4:	f7fd f8c4 	bl	15460 <_read>
   182d8:	1c43      	adds	r3, r0, #1
   182da:	d103      	bne.n	182e4 <_read_r+0x20>
   182dc:	6823      	ldr	r3, [r4, #0]
   182de:	2b00      	cmp	r3, #0
   182e0:	d000      	beq.n	182e4 <_read_r+0x20>
   182e2:	602b      	str	r3, [r5, #0]
   182e4:	bd70      	pop	{r4, r5, r6, pc}
   182e6:	46c0      	nop			; (mov r8, r8)
   182e8:	20000da0 	.word	0x20000da0

000182ec <_malloc_usable_size_r>:
   182ec:	1f0b      	subs	r3, r1, #4
   182ee:	681a      	ldr	r2, [r3, #0]
   182f0:	1f10      	subs	r0, r2, #4
   182f2:	2a00      	cmp	r2, #0
   182f4:	da04      	bge.n	18300 <_malloc_usable_size_r+0x14>
   182f6:	1889      	adds	r1, r1, r2
   182f8:	3904      	subs	r1, #4
   182fa:	680b      	ldr	r3, [r1, #0]
   182fc:	18d0      	adds	r0, r2, r3
   182fe:	3804      	subs	r0, #4
   18300:	4770      	bx	lr
   18302:	0000      	movs	r0, r0
   18304:	50504128 	.word	0x50504128
   18308:	52452829 	.word	0x52452829
   1830c:	255b2952 	.word	0x255b2952
   18310:	255b5d73 	.word	0x255b5d73
   18314:	00005d64 	.word	0x00005d64
   18318:	61766e69 	.word	0x61766e69
   1831c:	6564696c 	.word	0x6564696c
   18320:	636f6920 	.word	0x636f6920
   18324:	6320746c 	.word	0x6320746c
   18328:	0000646d 	.word	0x0000646d

0001832c <__FUNCTION__.14452>:
   1832c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   1833c:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   1834c:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
   1835c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1836c:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   1837c:	74207075 63206568 00706968 66696828     up the chip.(hif
   1838c:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
   1839c:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
   183ac:	66696828 64612029 73657264 75622073     (hif) address bu
   183bc:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
   183cc:	70757272 20646574 6b636170 53207465     rrupted packet S
   183dc:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   183ec:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   183fc:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   1840c:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   1841c:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
   1842c:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   1843c:	73696765 65726574 00000064 2061744f     egistered...Ota 
   1844c:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
   1845c:	69676572 72657473 00006465 70797243     registered..Cryp
   1846c:	63206f74 626c6c61 206b6361 6e207369     to callback is n
   1847c:	7220746f 73696765 65726574 00000064     ot registered...
   1848c:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
   1849c:	6f6e2073 65722074 74736967 64657265     s not registered
   184ac:	00000000 66696828 6e692029 696c6176     ....(hif) invali
   184bc:	72672064 2070756f 00004449 66696828     d group ID..(hif
   184cc:	6f682029 61207473 64207070 276e6469     ) host app didn'
   184dc:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
   184ec:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
   184fc:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   1850c:	61462029 2065736c 65746e69 70757272     ) False interrup
   1851c:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   1852c:	74206c69 6552206f 69206461 7265746e     il to Read inter
   1853c:	74707572 67657220 00000000 46494828     rupt reg....(HIF
   1854c:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   1855c:	746e6920 75727265 25207470 72742064      interrupt %d tr
   1856c:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   1857c:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   1858c:	72612064 656d7567 0000746e 20505041     d argument..APP 
   1859c:	75716552 65747365 69532064 6920657a     Requested Size i
   185ac:	616c2073 72656772 61687420 6874206e     s larger than th
   185bc:	65722065 65766963 75622064 72656666     e recived buffer
   185cc:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
   185dc:	00000000 20505041 75716552 65747365     ....APP Requeste
   185ec:	64412064 73657264 65622073 646e6f79     d Address beyond
   185fc:	65687420 63657220 64657669 66756220      the recived buf
   1860c:	20726566 72646461 20737365 20646e61     fer address and 
   1861c:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
   1862c:	0000000a 00009958 00009928 00009920     ....X...(... ...
   1863c:	00009938 00009930 00009950 00009940     8...0...P...@...
   1864c:	00009948                                H...

00018650 <__FUNCTION__.13068>:
   18650:	5f666968 646e6573 00000000              hif_send....

0001865c <__FUNCTION__.13078>:
   1865c:	5f666968 00727369                       hif_isr.

00018664 <__FUNCTION__.13084>:
   18664:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00018674 <__FUNCTION__.13096>:
   18674:	5f666968 65636572 00657669              hif_receive.

00018680 <__FUNCTION__.13112>:
   18680:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   18690:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   186a0:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   186b0:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   186c0:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   186d0:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   186e0:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   186f0:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   18700:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   18710:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   18720:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   18730:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   18740:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   18750:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   18760:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   18770:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   18780:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   18790:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   187a0:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   187b0:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   187c0:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   187d0:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   187e0:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   187f0:	73747365 72657020 61637320 6c73206e     ests per scan sl
   18800:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   18810:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   18820:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   18830:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   18840:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   18850:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   18860:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   18870:	6e694d20 69726420 20726576 20726576      Min driver ver 
   18880:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   18890:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   188a0:	0000000a 313a3531 36333a38 00000000     ....15:18:36....
   188b0:	20727041 32203531 00373130 76697244     Apr 15 2017.Driv
   188c0:	62207265 746c6975 20746120 25097325     er built at %s.%
   188d0:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   188e0:	7277616d 65562065 6f697372 0000006e     mawre Version...
   188f0:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   18900:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
   18910:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
   18920:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
   18930:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   18940:	65646e69 64252078 0000000a 61766e49     index %d....Inva
   18950:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
   18960:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
   18970:	53502074 656b204b 656c2079 6874676e     t PSK key length
   18980:	00000000 65646e75 656e6966 65732064     ....undefined se
   18990:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
   189a0:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
   189b0:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
   189c0:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
   189d0:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
   189e0:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
   189f0:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   18a00:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   18a10:	66754220 20726566 65637865 64656465      Buffer exceeded
   18a20:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   18a30:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   18a40:	00000000                                ....

00018a44 <__FUNCTION__.13047>:
   18a44:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00018a50 <__FUNCTION__.13076>:
   18a50:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00018a60 <__FUNCTION__.13104>:
   18a60:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   18a70:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   18a80:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   18a90:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   18aa0:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   18ab0:	20656874 70696863 00000000 50504128     the chip....(APP
   18ac0:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
   18ad0:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
   18ae0:	6c696166 74206465 6564206f 696e692d     failed to de-ini
   18af0:	6c616974 00657a69                       tialize.

00018af8 <__FUNCTION__.12910>:
   18af8:	70696863 6b61775f 00000065              chip_wake...

00018b04 <__FUNCTION__.12959>:
   18b04:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   18b14:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   18b24:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   18b34:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   18b44:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   18b54:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   18b64:	6e65206f 656c6261 746e6920 75727265     o enable interru
   18b74:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   18b84:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   18b94:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   18ba4:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   18bb4:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   18bc4:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   18bd4:	75622074 00000073                       t bus...

00018bdc <__FUNCTION__.12957>:
   18bdc:	645f6d6e 695f7672 0074696e              nm_drv_init.

00018be8 <__FUNCTION__.12964>:
   18be8:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00018bf8 <crc7_syndrome_table>:
   18bf8:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   18c08:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   18c18:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   18c28:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   18c38:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   18c48:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   18c58:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   18c68:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   18c78:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   18c88:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   18c98:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   18ca8:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   18cb8:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   18cc8:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   18cd8:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   18ce8:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   18cf8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   18d08:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   18d18:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   18d28:	73756220 72726520 2e2e726f 0000002e      bus error......
   18d38:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18d48:	75622064 72652073 2e726f72 00002e2e     d bus error.....
   18d58:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18d68:	61642064 72206174 6f707365 2065736e     d data response 
   18d78:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
   18d88:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18d98:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   18da8:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   18db8:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   18dc8:	656c6961 61642064 72206174 6f707365     ailed data respo
   18dd8:	2065736e 64616572 7562202c 72652073     nse read, bus er
   18de8:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   18df8:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   18e08:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   18e18:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   18e28:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   18e38:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   18e48:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   18e58:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   18e68:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   18e78:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   18e88:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   18e98:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   18ea8:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   18eb8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   18ec8:	656c6961 61642064 62206174 6b636f6c     ailed data block
   18ed8:	69727720 202c6574 20737562 6f727265      write, bus erro
   18ee8:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   18ef8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   18f08:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   18f18:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   18f28:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18f38:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   18f48:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   18f58:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   18f68:	65722064 6e6f7073 202c6573 74697277     d response, writ
   18f78:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   18f88:	00000000 65736552 6e612074 65722064     ....Reset and re
   18f98:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   18fa8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18fb8:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   18fc8:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   18fd8:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   18fe8:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   18ff8:	69727720 62206574 6b636f6c 30252820      write block (%0
   19008:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   19018:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   19028:	61746164 69727720 2e2e6574 0000002e     data write......
   19038:	65736552 6e612074 65722064 20797274     Reset and retry 
   19048:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   19058:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   19068:	72202c64 20646165 20676572 38302528     d, read reg (%08
   19078:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   19088:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   19098:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   190a8:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   190b8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   190c8:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   190d8:	6e612074 65722064 20797274 25206425     t and retry %d %
   190e8:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   190f8:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   19108:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   19118:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19128:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   19138:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   19148:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   19158:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   19168:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   19178:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19188:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   19198:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   191a8:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   191b8:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   191c8:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   191d8:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   191e8:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   191f8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   19208:	6e692064 6e726574 77206c61 65746972     d internal write
   19218:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   19228:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   19238:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   19248:	64692070 002e2e2e 0000b51c 0000b51c     p id............
   19258:	0000b5ac 0000b470 0000b4b6 0000b4d8     ....p...........
   19268:	0000b55e 0000b55e 0000b618 0000b444     ^...^.......D...
   19278:	0000b672 0000b672 0000b672 0000b672     r...r...r...r...
   19288:	0000b4fa                                ....

0001928c <__FUNCTION__.12263>:
   1928c:	5f697073 00646d63                       spi_cmd.

00019294 <__FUNCTION__.12270>:
   19294:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

000192a4 <__FUNCTION__.12279>:
   192a4:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000192b0 <__FUNCTION__.12295>:
   192b0:	5f697073 61746164 6165725f 00000064     spi_data_read...

000192c0 <__FUNCTION__.12310>:
   192c0:	5f697073 61746164 6972775f 00006574     spi_data_write..

000192d0 <__FUNCTION__.12322>:
   192d0:	5f697073 74697277 65725f65 00000067     spi_write_reg...

000192e0 <__FUNCTION__.12333>:
   192e0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

000192f0 <__FUNCTION__.12345>:
   192f0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00019300 <__FUNCTION__.12358>:
   19300:	735f6d6e 725f6970 00646165              nm_spi_read.

0001930c <__FUNCTION__.12379>:
   1930c:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   1931c:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   1932c:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   1933c:	25207465 65732064 6f697373 4449206e     et %d session ID
   1934c:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   1935c:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   1936c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1937c:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   1938c:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   1939c:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   193ac:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   193bc:	204c5353 6b636f53 00007465              SSL Socket..

000193c8 <tcc_modules>:
   193c8:	42002000 42002400 42002800              . .B.$.B.(.B

000193d4 <_tcc_gclk_ids>:
   193d4:	001b1a1a                                ....

000193d8 <_tcc_apbcmasks>:
   193d8:	00000100 00000200 00000400              ............

000193e4 <_tcc_maxs>:
   193e4:	00ffffff 00ffffff 0000ffff              ............

000193f0 <_tcc_cc_nums>:
   193f0:	00020204                                ....

000193f4 <_tcc_ow_nums>:
   193f4:	00020408                                ....

000193f8 <_tcc_intflag>:
   193f8:	00000001 00000002 00000004 00000008     ................
   19408:	00001000 00002000 00004000 00008000     ..... ...@......
   19418:	00010000 00020000 00040000 00080000     ................
   19428:	656d7461 2e312f6c 00322e30 70747468     atmel/1.0.2.http
   19438:	002f2f3a 70747468 2f2f3a73 00000000     ://.https://....
   19448:	20544547 00000000 54534f50 00000020     GET ....POST ...
   19458:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   19468:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   19478:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   19488:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   19498:	00000a0d 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
   194a8:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
   194b8:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
   194c8:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
   194d8:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
   194e8:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
   194f8:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
   19508:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
   19518:	676e654c 203a6874 00000000 33323130     Length: ....0123
   19528:	37363534 62613938 66656463 6e617254     456789abcdefTran
   19538:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
   19548:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
   19558:	50545448 0000002f 00000d31 0000f0ce     HTTP/...1.......
   19568:	0000f0c8 0000f0c2 0000f0bc 0000f0d4     ................
   19578:	0000f0b6 0000f0d4 0000f0b0 0000f0aa     ................
   19588:	0000f0d4 0000f0a4 0000f0a4 0000f09e     ................
   19598:	0000f098 0000f092 42002000 42002400     ......... .B.$.B
   195a8:	42002800 00011046 0001104a 0001104e     .(.BF...J...N...
   195b8:	00011052 00011056 0001105a 0001105e     R...V...Z...^...
   195c8:	00011062 00011066 0001106a 000110c2     b...f...j.......
   195d8:	000110c8 000110ce 000110d4 000110d4     ................
   195e8:	000110da 000110da 000110da 000110e0     ................
   195f8:	000110e6 00011d64 00011d64 00011d58     ....d...d...X...
   19608:	00011d64 00011d58 00011d32 00011d32     d...X...2...2...
   19618:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   19628:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   19638:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   19648:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   19658:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   19668:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   19678:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   19688:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   19698:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   196a8:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   196b8:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   196c8:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   196d8:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   196e8:	00011d64 00011d64 00011d64 00011d64     d...d...d...d...
   196f8:	00011d64 00011d58 00011d58 00011d6e     d...X...X...n...
   19708:	00011d6e 00011d6e 00011d6e 42000800     n...n...n......B
   19718:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   19728:	42001c00 0c0b0a09 00000e0d 000146d6     ...B.........F..
   19738:	0001474e 0001474e 000146f4 000146ee     NG..NG...F...F..
   19748:	000146fa 000146dc 00014700 00014734     .F...F...G..4G..
   19758:	00014a18 00014a68 00014a68 00014a64     .J..hJ..hJ..dJ..
   19768:	00014a0a 00014a2a 000149fa 00014a3c     .J..*J...I..<J..
   19778:	00014a4e 00014ab6 00014ae4 00014ae4     NJ...J...J...J..
   19788:	00014ae0 00014ab0 00014abc 00014aaa     .J...J...J...J..
   19798:	00014ac2 00014ac8 70696843 64696420     .J...J..Chip did
   197a8:	7720746e 20656b61 0000000d 72617473     nt wake ....star
   197b8:	6f645f74 6f6c6e77 203a6461 462d6957     t_download: Wi-F
   197c8:	73692069 746f6e20 6e6f6320 7463656e     i is not connect
   197d8:	0d2e6465 00000000 72617473 6f645f74     ed......start_do
   197e8:	6f6c6e77 203a6461 75716572 20747365     wnload: request 
   197f8:	73207369 20746e65 65726c61 2e796461     is sent already.
   19808:	0000000d 72617473 6f645f74 6f6c6e77     ....start_downlo
   19818:	203a6461 6e6e7572 20676e69 6e776f64     ad: running down
   19828:	64616f6c 726c6120 79646165 00000d2e     load already....
   19838:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   19848:	646e6573 20676e69 50545448 71657220     sending HTTP req
   19858:	74736575 0d2e2e2e 00000000 70747468     uest........http
   19868:	2f2f3a73 2e777777 73616573 6570752e     s://www.seas.upe
   19878:	652e6e6e 7e2f7564 6863696e 2f736e69     nn.edu/~nichins/
   19888:	74747562 6c5f6e6f 2e326465 006e6962     button_led2.bin.
   19898:	70747468 2f2f3a73 2e777777 73616573     https://www.seas
   198a8:	6570752e 652e6e6e 7e2f7564 69707372     .upenn.edu/~rspi
   198b8:	2f726563 74747562 6c5f6e6f 5f326465     cer/button_led2_
   198c8:	2e637263 006e6962 70747468 696c635f     crc.bin.http_cli
   198d8:	5f746e65 6c6c6163 6b636162 5448203a     ent_callback: HT
   198e8:	63205054 6e65696c 6f732074 74656b63     TP client socket
   198f8:	6e6f6320 7463656e 0d2e6465 00000000      connected......
   19908:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   19918:	6b636162 6572203a 73657571 6f632074     back: request co
   19928:	656c706d 2e646574 0000000d 70747468     mpleted.....http
   19938:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   19948:	6572203a 76696563 72206465 6f707365     : received respo
   19958:	2065736e 64207525 20617461 657a6973     nse %u data size
   19968:	0d752520 0000000a 70747468 696c635f      %u.....http_cli
   19978:	5f746e65 6c6c6163 6b636162 5548435f     ent_callback_CHU
   19988:	44454b4e 54414420 72203a41 69656365     NKED DATA: recei
   19998:	20646576 70736572 65736e6f 74616420     ved response dat
   199a8:	69732061 2520657a 000a0d75 73726946     a size %u...Firs
   199b8:	6c622074 206b636f 676e656c 25206874     t block length %
   199c8:	52432064 25203a43 000a0d75 636f6c42     d CRC: %u...Bloc
   199d8:	656c206b 6874676e 20642520 3a435243     k length %d CRC:
   199e8:	0d752520 0000000a 6c6c6143 6b636162      %u.....Callback
   199f8:	5243203a 6f642043 6f6c6e77 63206461     : CRC download c
   19a08:	6b6e7568 64206465 0d617461 00000000     hunked data.....
   19a18:	65636552 64657669 756c2520 00000a0d     Received %lu....
   19a28:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   19a38:	6b636162 6964203a 6e6f6373 7463656e     back: disconnect
   19a48:	206e6f69 73616572 253a6e6f 000a0d64     ion reason:%d...
   19a58:	6f736572 5f65766c 203a6263 49207325     resolve_cb: %s I
   19a68:	64612050 73657264 73692073 2e642520     P address is %d.
   19a78:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
   19a88:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   19a98:	4f435f49 43454e4e 0d444554 00000000     I_CONNECTED.....
   19aa8:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   19ab8:	49445f49 4e4f4353 5443454e 000d4445     I_DISCONNECTED..
   19ac8:	656b6163 73736f62 00000000 796f7254     cakeboss....Troy
   19ad8:	41646e41 49646562 6568546e 65646f4d     AndAbedInTheMode
   19ae8:	0000006d 69666977 3a62635f 20504920     m...wifi_cb: IP 
   19af8:	72646461 20737365 25207369 75252e75     address is %u.%u
   19b08:	2e75252e 0a0d7525 00000000 666e6f63     .%u.%u......conf
   19b18:	72756769 74685f65 635f7074 6e65696c     igure_http_clien
   19b28:	48203a74 20505454 65696c63 6920746e     t: HTTP client i
   19b38:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
   19b48:	64656c69 72282021 25207365 0a0d2964     iled! (res %d)..
   19b58:	00000000 6e776f64 64616f6c 7269665f     ....download_fir
   19b68:	7261776d 63203a65 656e6e6f 6e697463     mware: connectin
   19b78:	6f742067 46695720 50412069 2e732520     g to WiFi AP %s.
   19b88:	0a0d2e2e 00000000 6e776f64 64616f6c     ........download
   19b98:	7269665f 7261776d 64203a65 2e656e6f     _firmware: done.
   19ba8:	0000000d 636c6143 74616c75 43206465     ....Calculated C
   19bb8:	203a4352 0d756c25 0000000a 6e69616d     RC: %lu.....main
   19bc8:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   19bd8:	6c6c6163 72726520 2021726f 73657228     call error! (res
   19be8:	29642520 00000a0d 63657845 6e697475      %d)....Executin
   19bf8:	6d692067 3a656761 2c642520 204c4420     g image: %d, DL 
   19c08:	203a6f74 0a0d6425 00000000 4d200d0a     to: %d........ M
   19c18:	3a6e6961 6e6f4420 6f642065 6f6c6e77     ain: Done downlo
   19c28:	6e696461 69662067 61776d72 0d0a6572     ading firmware..
   19c38:	00000000 00016018 00016022 00016032     .....`.."`..2`..
   19c48:	0001606a 000162b0 00000043              j`...b..C...

00019c54 <_global_impure_ptr>:
   19c54:	2000001c                                ... 

00019c58 <_ctype_>:
   19c58:	20202000 20202020 28282020 20282828     .         ((((( 
   19c68:	20202020 20202020 20202020 20202020                     
   19c78:	10108820 10101010 10101010 10101010      ...............
   19c88:	04040410 04040404 10040404 10101010     ................
   19c98:	41411010 41414141 01010101 01010101     ..AAAAAA........
   19ca8:	01010101 01010101 01010101 10101010     ................
   19cb8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   19cc8:	02020202 02020202 02020202 10101010     ................
   19cd8:	00000020 00000000 00000000 00000000      ...............
	...

00019d5c <__sf_fake_stdin>:
	...

00019d7c <__sf_fake_stdout>:
	...

00019d9c <__sf_fake_stderr>:
	...
   19dbc:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   19dcc:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   19ddc:	31300046 35343332 39383736 64636261     F.0123456789abcd
   19dec:	00006665                                ef..

00019df0 <_init>:
   19df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19df2:	46c0      	nop			; (mov r8, r8)
   19df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19df6:	bc08      	pop	{r3}
   19df8:	469e      	mov	lr, r3
   19dfa:	4770      	bx	lr

00019dfc <__init_array_start>:
   19dfc:	000080dd 	.word	0x000080dd

00019e00 <_fini>:
   19e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e02:	46c0      	nop			; (mov r8, r8)
   19e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19e06:	bc08      	pop	{r3}
   19e08:	469e      	mov	lr, r3
   19e0a:	4770      	bx	lr

00019e0c <__fini_array_start>:
   19e0c:	000080b5 	.word	0x000080b5
