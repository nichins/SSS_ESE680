
samw25_xplained_pro_serial_bridge_6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000843c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  0000843c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000580  20000074  000084b0  00020074  2**2
                  ALLOC
  3 .stack        00002004  200005f4  00008a30  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002b519  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e57  00000000  00000000  0004b60e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000049f9  00000000  00000000  0004f465  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d88  00000000  00000000  00053e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bb8  00000000  00000000  00054be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001dcb9  00000000  00000000  0005579e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013c19  00000000  00000000  00073457  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00087915  00000000  00000000  00087070  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000358c  00000000  00000000  0010e988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200025f8 	.word	0x200025f8
       4:	0000652d 	.word	0x0000652d
       8:	000065b1 	.word	0x000065b1
       c:	000065b1 	.word	0x000065b1
	...
      2c:	000065b1 	.word	0x000065b1
	...
      38:	000065b1 	.word	0x000065b1
      3c:	000065b1 	.word	0x000065b1
      40:	000065b1 	.word	0x000065b1
      44:	000065b1 	.word	0x000065b1
      48:	000065b1 	.word	0x000065b1
      4c:	000065b1 	.word	0x000065b1
      50:	00003591 	.word	0x00003591
      54:	000065b1 	.word	0x000065b1
      58:	000065b1 	.word	0x000065b1
      5c:	000065b1 	.word	0x000065b1
      60:	000065b1 	.word	0x000065b1
      64:	00003d49 	.word	0x00003d49
      68:	00003d61 	.word	0x00003d61
      6c:	00003d79 	.word	0x00003d79
      70:	00003d91 	.word	0x00003d91
      74:	00003da9 	.word	0x00003da9
      78:	00003dc1 	.word	0x00003dc1
      7c:	00006381 	.word	0x00006381
      80:	00006395 	.word	0x00006395
      84:	000063a9 	.word	0x000063a9
      88:	00006439 	.word	0x00006439
      8c:	0000644d 	.word	0x0000644d
      90:	00006461 	.word	0x00006461
      94:	000065b1 	.word	0x000065b1
      98:	000065b1 	.word	0x000065b1
      9c:	000065b1 	.word	0x000065b1
      a0:	000065b1 	.word	0x000065b1
      a4:	000065b1 	.word	0x000065b1
      a8:	000065b1 	.word	0x000065b1
      ac:	000065b1 	.word	0x000065b1

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000074 	.word	0x20000074
      d0:	00000000 	.word	0x00000000
      d4:	0000843c 	.word	0x0000843c

000000d8 <frame_dummy>:
      d8:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      da:	b510      	push	{r4, lr}
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4907      	ldr	r1, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4808      	ldr	r0, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd10      	pop	{r4, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
     100:	20000078 	.word	0x20000078
     104:	0000843c 	.word	0x0000843c
     108:	0000843c 	.word	0x0000843c
     10c:	00000000 	.word	0x00000000

00000110 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     110:	b580      	push	{r7, lr}
     112:	b084      	sub	sp, #16
     114:	af00      	add	r7, sp, #0
     116:	0002      	movs	r2, r0
     118:	1dfb      	adds	r3, r7, #7
     11a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     11c:	230f      	movs	r3, #15
     11e:	18fb      	adds	r3, r7, r3
     120:	1dfa      	adds	r2, r7, #7
     122:	7812      	ldrb	r2, [r2, #0]
     124:	09d2      	lsrs	r2, r2, #7
     126:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     128:	230e      	movs	r3, #14
     12a:	18fb      	adds	r3, r7, r3
     12c:	1dfa      	adds	r2, r7, #7
     12e:	7812      	ldrb	r2, [r2, #0]
     130:	0952      	lsrs	r2, r2, #5
     132:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     134:	4b0d      	ldr	r3, [pc, #52]	; (16c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     136:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     138:	230f      	movs	r3, #15
     13a:	18fb      	adds	r3, r7, r3
     13c:	781b      	ldrb	r3, [r3, #0]
     13e:	2b00      	cmp	r3, #0
     140:	d10f      	bne.n	162 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     142:	230f      	movs	r3, #15
     144:	18fb      	adds	r3, r7, r3
     146:	781b      	ldrb	r3, [r3, #0]
     148:	009b      	lsls	r3, r3, #2
     14a:	2210      	movs	r2, #16
     14c:	4694      	mov	ip, r2
     14e:	44bc      	add	ip, r7
     150:	4463      	add	r3, ip
     152:	3b08      	subs	r3, #8
     154:	681a      	ldr	r2, [r3, #0]
     156:	230e      	movs	r3, #14
     158:	18fb      	adds	r3, r7, r3
     15a:	781b      	ldrb	r3, [r3, #0]
     15c:	01db      	lsls	r3, r3, #7
     15e:	18d3      	adds	r3, r2, r3
     160:	e000      	b.n	164 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     162:	2300      	movs	r3, #0
	}
}
     164:	0018      	movs	r0, r3
     166:	46bd      	mov	sp, r7
     168:	b004      	add	sp, #16
     16a:	bd80      	pop	{r7, pc}
     16c:	41004400 	.word	0x41004400

00000170 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     170:	b580      	push	{r7, lr}
     172:	b082      	sub	sp, #8
     174:	af00      	add	r7, sp, #0
     176:	0002      	movs	r2, r0
     178:	1dfb      	adds	r3, r7, #7
     17a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <system_interrupt_enable+0x28>)
     17e:	1dfa      	adds	r2, r7, #7
     180:	7812      	ldrb	r2, [r2, #0]
     182:	0011      	movs	r1, r2
     184:	221f      	movs	r2, #31
     186:	400a      	ands	r2, r1
     188:	2101      	movs	r1, #1
     18a:	4091      	lsls	r1, r2
     18c:	000a      	movs	r2, r1
     18e:	601a      	str	r2, [r3, #0]
}
     190:	46c0      	nop			; (mov r8, r8)
     192:	46bd      	mov	sp, r7
     194:	b002      	add	sp, #8
     196:	bd80      	pop	{r7, pc}
     198:	e000e100 	.word	0xe000e100

0000019c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     19c:	b580      	push	{r7, lr}
     19e:	b082      	sub	sp, #8
     1a0:	af00      	add	r7, sp, #0
     1a2:	0002      	movs	r2, r0
     1a4:	1dfb      	adds	r3, r7, #7
     1a6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     1a8:	4a07      	ldr	r2, [pc, #28]	; (1c8 <system_interrupt_disable+0x2c>)
     1aa:	1dfb      	adds	r3, r7, #7
     1ac:	781b      	ldrb	r3, [r3, #0]
     1ae:	0019      	movs	r1, r3
     1b0:	231f      	movs	r3, #31
     1b2:	400b      	ands	r3, r1
     1b4:	2101      	movs	r1, #1
     1b6:	4099      	lsls	r1, r3
     1b8:	000b      	movs	r3, r1
     1ba:	0019      	movs	r1, r3
     1bc:	2380      	movs	r3, #128	; 0x80
     1be:	50d1      	str	r1, [r2, r3]
}
     1c0:	46c0      	nop			; (mov r8, r8)
     1c2:	46bd      	mov	sp, r7
     1c4:	b002      	add	sp, #8
     1c6:	bd80      	pop	{r7, pc}
     1c8:	e000e100 	.word	0xe000e100

000001cc <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
     1cc:	b580      	push	{r7, lr}
     1ce:	b082      	sub	sp, #8
     1d0:	af00      	add	r7, sp, #0
     1d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     1d4:	687b      	ldr	r3, [r7, #4]
     1d6:	2200      	movs	r2, #0
     1d8:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
     1da:	687b      	ldr	r3, [r7, #4]
     1dc:	2200      	movs	r2, #0
     1de:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     1e0:	687b      	ldr	r3, [r7, #4]
     1e2:	2201      	movs	r2, #1
     1e4:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
     1e6:	687b      	ldr	r3, [r7, #4]
     1e8:	2201      	movs	r2, #1
     1ea:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
     1ec:	687b      	ldr	r3, [r7, #4]
     1ee:	2200      	movs	r2, #0
     1f0:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     1f2:	687b      	ldr	r3, [r7, #4]
     1f4:	2202      	movs	r2, #2
     1f6:	72da      	strb	r2, [r3, #11]
}
     1f8:	46c0      	nop			; (mov r8, r8)
     1fa:	46bd      	mov	sp, r7
     1fc:	b002      	add	sp, #8
     1fe:	bd80      	pop	{r7, pc}

00000200 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     200:	b580      	push	{r7, lr}
     202:	b082      	sub	sp, #8
     204:	af00      	add	r7, sp, #0
     206:	0002      	movs	r2, r0
     208:	1dfb      	adds	r3, r7, #7
     20a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     20c:	1dfb      	adds	r3, r7, #7
     20e:	781b      	ldrb	r3, [r3, #0]
     210:	0018      	movs	r0, r3
     212:	4b03      	ldr	r3, [pc, #12]	; (220 <port_get_group_from_gpio_pin+0x20>)
     214:	4798      	blx	r3
     216:	0003      	movs	r3, r0
}
     218:	0018      	movs	r0, r3
     21a:	46bd      	mov	sp, r7
     21c:	b002      	add	sp, #8
     21e:	bd80      	pop	{r7, pc}
     220:	00000111 	.word	0x00000111

00000224 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
     224:	b580      	push	{r7, lr}
     226:	b084      	sub	sp, #16
     228:	af00      	add	r7, sp, #0
     22a:	0002      	movs	r2, r0
     22c:	1dfb      	adds	r3, r7, #7
     22e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     230:	1dfb      	adds	r3, r7, #7
     232:	781b      	ldrb	r3, [r3, #0]
     234:	0018      	movs	r0, r3
     236:	4b0b      	ldr	r3, [pc, #44]	; (264 <port_pin_get_input_level+0x40>)
     238:	4798      	blx	r3
     23a:	0003      	movs	r3, r0
     23c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     23e:	1dfb      	adds	r3, r7, #7
     240:	781b      	ldrb	r3, [r3, #0]
     242:	221f      	movs	r2, #31
     244:	4013      	ands	r3, r2
     246:	2201      	movs	r2, #1
     248:	409a      	lsls	r2, r3
     24a:	0013      	movs	r3, r2
     24c:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
     24e:	68fb      	ldr	r3, [r7, #12]
     250:	6a1b      	ldr	r3, [r3, #32]
     252:	68ba      	ldr	r2, [r7, #8]
     254:	4013      	ands	r3, r2
     256:	1e5a      	subs	r2, r3, #1
     258:	4193      	sbcs	r3, r2
     25a:	b2db      	uxtb	r3, r3
}
     25c:	0018      	movs	r0, r3
     25e:	46bd      	mov	sp, r7
     260:	b004      	add	sp, #16
     262:	bd80      	pop	{r7, pc}
     264:	00000201 	.word	0x00000201

00000268 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     268:	b580      	push	{r7, lr}
     26a:	b084      	sub	sp, #16
     26c:	af00      	add	r7, sp, #0
     26e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     270:	687b      	ldr	r3, [r7, #4]
     272:	681b      	ldr	r3, [r3, #0]
     274:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     276:	68fb      	ldr	r3, [r7, #12]
     278:	69db      	ldr	r3, [r3, #28]
     27a:	1e5a      	subs	r2, r3, #1
     27c:	4193      	sbcs	r3, r2
     27e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     280:	0018      	movs	r0, r3
     282:	46bd      	mov	sp, r7
     284:	b004      	add	sp, #16
     286:	bd80      	pop	{r7, pc}

00000288 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     288:	b580      	push	{r7, lr}
     28a:	b082      	sub	sp, #8
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     290:	46c0      	nop			; (mov r8, r8)
     292:	687b      	ldr	r3, [r7, #4]
     294:	0018      	movs	r0, r3
     296:	4b04      	ldr	r3, [pc, #16]	; (2a8 <_usart_wait_for_sync+0x20>)
     298:	4798      	blx	r3
     29a:	1e03      	subs	r3, r0, #0
     29c:	d1f9      	bne.n	292 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	46bd      	mov	sp, r7
     2a2:	b002      	add	sp, #8
     2a4:	bd80      	pop	{r7, pc}
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	00000269 	.word	0x00000269

000002ac <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     2ac:	b580      	push	{r7, lr}
     2ae:	b082      	sub	sp, #8
     2b0:	af00      	add	r7, sp, #0
     2b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	2280      	movs	r2, #128	; 0x80
     2b8:	05d2      	lsls	r2, r2, #23
     2ba:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     2bc:	687b      	ldr	r3, [r7, #4]
     2be:	2200      	movs	r2, #0
     2c0:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     2c2:	687b      	ldr	r3, [r7, #4]
     2c4:	22ff      	movs	r2, #255	; 0xff
     2c6:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     2c8:	687b      	ldr	r3, [r7, #4]
     2ca:	2200      	movs	r2, #0
     2cc:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     2ce:	687b      	ldr	r3, [r7, #4]
     2d0:	2200      	movs	r2, #0
     2d2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     2d4:	687b      	ldr	r3, [r7, #4]
     2d6:	2296      	movs	r2, #150	; 0x96
     2d8:	0192      	lsls	r2, r2, #6
     2da:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     2dc:	687b      	ldr	r3, [r7, #4]
     2de:	2224      	movs	r2, #36	; 0x24
     2e0:	2101      	movs	r1, #1
     2e2:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     2e4:	687b      	ldr	r3, [r7, #4]
     2e6:	2225      	movs	r2, #37	; 0x25
     2e8:	2101      	movs	r1, #1
     2ea:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     2ec:	687b      	ldr	r3, [r7, #4]
     2ee:	2226      	movs	r2, #38	; 0x26
     2f0:	2100      	movs	r1, #0
     2f2:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     2f4:	687b      	ldr	r3, [r7, #4]
     2f6:	2227      	movs	r2, #39	; 0x27
     2f8:	2100      	movs	r1, #0
     2fa:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     2fc:	687b      	ldr	r3, [r7, #4]
     2fe:	2200      	movs	r2, #0
     300:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     302:	687b      	ldr	r3, [r7, #4]
     304:	2288      	movs	r2, #136	; 0x88
     306:	0352      	lsls	r2, r2, #13
     308:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     30a:	687b      	ldr	r3, [r7, #4]
     30c:	222c      	movs	r2, #44	; 0x2c
     30e:	2100      	movs	r1, #0
     310:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     312:	687b      	ldr	r3, [r7, #4]
     314:	222d      	movs	r2, #45	; 0x2d
     316:	2100      	movs	r1, #0
     318:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     31a:	687b      	ldr	r3, [r7, #4]
     31c:	2200      	movs	r2, #0
     31e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     320:	687b      	ldr	r3, [r7, #4]
     322:	2200      	movs	r2, #0
     324:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     326:	687b      	ldr	r3, [r7, #4]
     328:	2200      	movs	r2, #0
     32a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     32c:	687b      	ldr	r3, [r7, #4]
     32e:	2200      	movs	r2, #0
     330:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     332:	687b      	ldr	r3, [r7, #4]
     334:	2200      	movs	r2, #0
     336:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     338:	687b      	ldr	r3, [r7, #4]
     33a:	2200      	movs	r2, #0
     33c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     33e:	687b      	ldr	r3, [r7, #4]
     340:	2200      	movs	r2, #0
     342:	76da      	strb	r2, [r3, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
     344:	687b      	ldr	r3, [r7, #4]
     346:	2200      	movs	r2, #0
     348:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
     34a:	687b      	ldr	r3, [r7, #4]
     34c:	2200      	movs	r2, #0
     34e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
     350:	687b      	ldr	r3, [r7, #4]
     352:	2200      	movs	r2, #0
     354:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                        = 19;
     356:	687b      	ldr	r3, [r7, #4]
     358:	2213      	movs	r2, #19
     35a:	769a      	strb	r2, [r3, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
     35c:	687b      	ldr	r3, [r7, #4]
     35e:	2200      	movs	r2, #0
     360:	775a      	strb	r2, [r3, #29]
#endif
}
     362:	46c0      	nop			; (mov r8, r8)
     364:	46bd      	mov	sp, r7
     366:	b002      	add	sp, #8
     368:	bd80      	pop	{r7, pc}
     36a:	46c0      	nop			; (mov r8, r8)

0000036c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     36c:	b580      	push	{r7, lr}
     36e:	b084      	sub	sp, #16
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     374:	687b      	ldr	r3, [r7, #4]
     376:	681b      	ldr	r3, [r3, #0]
     378:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	681b      	ldr	r3, [r3, #0]
     37e:	0018      	movs	r0, r3
     380:	4b09      	ldr	r3, [pc, #36]	; (3a8 <usart_enable+0x3c>)
     382:	4798      	blx	r3
     384:	0003      	movs	r3, r0
     386:	0018      	movs	r0, r3
     388:	4b08      	ldr	r3, [pc, #32]	; (3ac <usart_enable+0x40>)
     38a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     38c:	687b      	ldr	r3, [r7, #4]
     38e:	0018      	movs	r0, r3
     390:	4b07      	ldr	r3, [pc, #28]	; (3b0 <usart_enable+0x44>)
     392:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     394:	68fb      	ldr	r3, [r7, #12]
     396:	681b      	ldr	r3, [r3, #0]
     398:	2202      	movs	r2, #2
     39a:	431a      	orrs	r2, r3
     39c:	68fb      	ldr	r3, [r7, #12]
     39e:	601a      	str	r2, [r3, #0]
}
     3a0:	46c0      	nop			; (mov r8, r8)
     3a2:	46bd      	mov	sp, r7
     3a4:	b004      	add	sp, #16
     3a6:	bd80      	pop	{r7, pc}
     3a8:	00003cfd 	.word	0x00003cfd
     3ac:	00000171 	.word	0x00000171
     3b0:	00000289 	.word	0x00000289

000003b4 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     3b4:	b580      	push	{r7, lr}
     3b6:	b084      	sub	sp, #16
     3b8:	af00      	add	r7, sp, #0
     3ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     3bc:	687b      	ldr	r3, [r7, #4]
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	60fb      	str	r3, [r7, #12]

	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     3c2:	687b      	ldr	r3, [r7, #4]
     3c4:	681b      	ldr	r3, [r3, #0]
     3c6:	0018      	movs	r0, r3
     3c8:	4b0a      	ldr	r3, [pc, #40]	; (3f4 <usart_disable+0x40>)
     3ca:	4798      	blx	r3
     3cc:	0003      	movs	r3, r0
     3ce:	0018      	movs	r0, r3
     3d0:	4b09      	ldr	r3, [pc, #36]	; (3f8 <usart_disable+0x44>)
     3d2:	4798      	blx	r3

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     3d4:	687b      	ldr	r3, [r7, #4]
     3d6:	0018      	movs	r0, r3
     3d8:	4b08      	ldr	r3, [pc, #32]	; (3fc <usart_disable+0x48>)
     3da:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     3dc:	68fb      	ldr	r3, [r7, #12]
     3de:	681b      	ldr	r3, [r3, #0]
     3e0:	2202      	movs	r2, #2
     3e2:	4393      	bics	r3, r2
     3e4:	001a      	movs	r2, r3
     3e6:	68fb      	ldr	r3, [r7, #12]
     3e8:	601a      	str	r2, [r3, #0]
}
     3ea:	46c0      	nop			; (mov r8, r8)
     3ec:	46bd      	mov	sp, r7
     3ee:	b004      	add	sp, #16
     3f0:	bd80      	pop	{r7, pc}
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	00003cfd 	.word	0x00003cfd
     3f8:	0000019d 	.word	0x0000019d
     3fc:	00000289 	.word	0x00000289

00000400 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     400:	b580      	push	{r7, lr}
     402:	b082      	sub	sp, #8
     404:	af00      	add	r7, sp, #0
     406:	6078      	str	r0, [r7, #4]
     408:	000a      	movs	r2, r1
     40a:	1cfb      	adds	r3, r7, #3
     40c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     40e:	687b      	ldr	r3, [r7, #4]
     410:	2231      	movs	r2, #49	; 0x31
     412:	5c9b      	ldrb	r3, [r3, r2]
     414:	b25a      	sxtb	r2, r3
     416:	1cfb      	adds	r3, r7, #3
     418:	781b      	ldrb	r3, [r3, #0]
     41a:	2101      	movs	r1, #1
     41c:	4099      	lsls	r1, r3
     41e:	000b      	movs	r3, r1
     420:	b25b      	sxtb	r3, r3
     422:	4313      	orrs	r3, r2
     424:	b25b      	sxtb	r3, r3
     426:	b2d9      	uxtb	r1, r3
     428:	687b      	ldr	r3, [r7, #4]
     42a:	2231      	movs	r2, #49	; 0x31
     42c:	5499      	strb	r1, [r3, r2]

}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	46bd      	mov	sp, r7
     432:	b002      	add	sp, #8
     434:	bd80      	pop	{r7, pc}
     436:	46c0      	nop			; (mov r8, r8)

00000438 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     438:	b580      	push	{r7, lr}
     43a:	b084      	sub	sp, #16
     43c:	af00      	add	r7, sp, #0
     43e:	60f8      	str	r0, [r7, #12]
     440:	60b9      	str	r1, [r7, #8]
     442:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
     444:	687a      	ldr	r2, [r7, #4]
     446:	68b9      	ldr	r1, [r7, #8]
     448:	68fb      	ldr	r3, [r7, #12]
     44a:	0018      	movs	r0, r3
     44c:	4b05      	ldr	r3, [pc, #20]	; (464 <usart_serial_init+0x2c>)
     44e:	4798      	blx	r3
     450:	1e03      	subs	r3, r0, #0
     452:	d101      	bne.n	458 <usart_serial_init+0x20>
		return true;
     454:	2301      	movs	r3, #1
     456:	e000      	b.n	45a <usart_serial_init+0x22>
	}
	else {
		return false;
     458:	2300      	movs	r3, #0
	}
}
     45a:	0018      	movs	r0, r3
     45c:	46bd      	mov	sp, r7
     45e:	b004      	add	sp, #16
     460:	bd80      	pop	{r7, pc}
     462:	46c0      	nop			; (mov r8, r8)
     464:	00004b55 	.word	0x00004b55

00000468 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
     470:	000a      	movs	r2, r1
     472:	1cfb      	adds	r3, r7, #3
     474:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     476:	46c0      	nop			; (mov r8, r8)
     478:	1cfb      	adds	r3, r7, #3
     47a:	781b      	ldrb	r3, [r3, #0]
     47c:	b29a      	uxth	r2, r3
     47e:	687b      	ldr	r3, [r7, #4]
     480:	0011      	movs	r1, r2
     482:	0018      	movs	r0, r3
     484:	4b04      	ldr	r3, [pc, #16]	; (498 <usart_serial_putchar+0x30>)
     486:	4798      	blx	r3
     488:	1e03      	subs	r3, r0, #0
     48a:	d1f5      	bne.n	478 <usart_serial_putchar+0x10>

	return STATUS_OK;
     48c:	2300      	movs	r3, #0
}
     48e:	0018      	movs	r0, r3
     490:	46bd      	mov	sp, r7
     492:	b002      	add	sp, #8
     494:	bd80      	pop	{r7, pc}
     496:	46c0      	nop			; (mov r8, r8)
     498:	00004dc9 	.word	0x00004dc9

0000049c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     49c:	b580      	push	{r7, lr}
     49e:	b084      	sub	sp, #16
     4a0:	af00      	add	r7, sp, #0
     4a2:	6078      	str	r0, [r7, #4]
     4a4:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     4a6:	230e      	movs	r3, #14
     4a8:	18fb      	adds	r3, r7, r3
     4aa:	2200      	movs	r2, #0
     4ac:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	230e      	movs	r3, #14
     4b2:	18fa      	adds	r2, r7, r3
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	0011      	movs	r1, r2
     4b8:	0018      	movs	r0, r3
     4ba:	4b07      	ldr	r3, [pc, #28]	; (4d8 <usart_serial_getchar+0x3c>)
     4bc:	4798      	blx	r3
     4be:	1e03      	subs	r3, r0, #0
     4c0:	d1f6      	bne.n	4b0 <usart_serial_getchar+0x14>

	*c = temp;
     4c2:	230e      	movs	r3, #14
     4c4:	18fb      	adds	r3, r7, r3
     4c6:	881b      	ldrh	r3, [r3, #0]
     4c8:	b2da      	uxtb	r2, r3
     4ca:	683b      	ldr	r3, [r7, #0]
     4cc:	701a      	strb	r2, [r3, #0]
}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	46bd      	mov	sp, r7
     4d2:	b004      	add	sp, #16
     4d4:	bd80      	pop	{r7, pc}
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	00004e2d 	.word	0x00004e2d

000004dc <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     4dc:	b580      	push	{r7, lr}
     4de:	b084      	sub	sp, #16
     4e0:	af00      	add	r7, sp, #0
     4e2:	60f8      	str	r0, [r7, #12]
     4e4:	60b9      	str	r1, [r7, #8]
     4e6:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     4e8:	4b10      	ldr	r3, [pc, #64]	; (52c <stdio_serial_init+0x50>)
     4ea:	68fa      	ldr	r2, [r7, #12]
     4ec:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     4ee:	4b10      	ldr	r3, [pc, #64]	; (530 <stdio_serial_init+0x54>)
     4f0:	4a10      	ldr	r2, [pc, #64]	; (534 <stdio_serial_init+0x58>)
     4f2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     4f4:	4b10      	ldr	r3, [pc, #64]	; (538 <stdio_serial_init+0x5c>)
     4f6:	4a11      	ldr	r2, [pc, #68]	; (53c <stdio_serial_init+0x60>)
     4f8:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
     4fa:	687a      	ldr	r2, [r7, #4]
     4fc:	68b9      	ldr	r1, [r7, #8]
     4fe:	68fb      	ldr	r3, [r7, #12]
     500:	0018      	movs	r0, r3
     502:	4b0f      	ldr	r3, [pc, #60]	; (540 <stdio_serial_init+0x64>)
     504:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     506:	4b0f      	ldr	r3, [pc, #60]	; (544 <stdio_serial_init+0x68>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	689b      	ldr	r3, [r3, #8]
     50c:	2100      	movs	r1, #0
     50e:	0018      	movs	r0, r3
     510:	4b0d      	ldr	r3, [pc, #52]	; (548 <stdio_serial_init+0x6c>)
     512:	4798      	blx	r3
	setbuf(stdin, NULL);
     514:	4b0b      	ldr	r3, [pc, #44]	; (544 <stdio_serial_init+0x68>)
     516:	681b      	ldr	r3, [r3, #0]
     518:	685b      	ldr	r3, [r3, #4]
     51a:	2100      	movs	r1, #0
     51c:	0018      	movs	r0, r3
     51e:	4b0a      	ldr	r3, [pc, #40]	; (548 <stdio_serial_init+0x6c>)
     520:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     522:	46c0      	nop			; (mov r8, r8)
     524:	46bd      	mov	sp, r7
     526:	b004      	add	sp, #16
     528:	bd80      	pop	{r7, pc}
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	200005ec 	.word	0x200005ec
     530:	200005e8 	.word	0x200005e8
     534:	00000469 	.word	0x00000469
     538:	200005e4 	.word	0x200005e4
     53c:	0000049d 	.word	0x0000049d
     540:	00000439 	.word	0x00000439
     544:	20000070 	.word	0x20000070
     548:	00006a25 	.word	0x00006a25

0000054c <usart_tx_complete_handler>:
static uint8_t change_state = 0;
static uint8_t uart_reconfigure = 0;
#define USART_CMD_HDR_LENGTH	sizeof(uart_cmd_hdr)
#define SPI_TRANSFER_SIZE	512
static void usart_tx_complete_handler(const struct usart_module *const module)
{
     54c:	b580      	push	{r7, lr}
     54e:	b082      	sub	sp, #8
     550:	af00      	add	r7, sp, #0
     552:	6078      	str	r0, [r7, #4]
	if(schedule_rx) {
     554:	4b14      	ldr	r3, [pc, #80]	; (5a8 <usart_tx_complete_handler+0x5c>)
     556:	781b      	ldrb	r3, [r3, #0]
     558:	2b00      	cmp	r3, #0
     55a:	d016      	beq.n	58a <usart_tx_complete_handler+0x3e>
		if(schedule_rx_length == 1) {
     55c:	4b13      	ldr	r3, [pc, #76]	; (5ac <usart_tx_complete_handler+0x60>)
     55e:	881b      	ldrh	r3, [r3, #0]
     560:	2b01      	cmp	r3, #1
     562:	d107      	bne.n	574 <usart_tx_complete_handler+0x28>
			usart_read_job((struct usart_module *)module, schedule_rx_buffer);
     564:	4b12      	ldr	r3, [pc, #72]	; (5b0 <usart_tx_complete_handler+0x64>)
     566:	681a      	ldr	r2, [r3, #0]
     568:	687b      	ldr	r3, [r7, #4]
     56a:	0011      	movs	r1, r2
     56c:	0018      	movs	r0, r3
     56e:	4b11      	ldr	r3, [pc, #68]	; (5b4 <usart_tx_complete_handler+0x68>)
     570:	4798      	blx	r3
     572:	e007      	b.n	584 <usart_tx_complete_handler+0x38>
		}
		else {
			usart_read_buffer_job((struct usart_module *)module, (uint8_t *)schedule_rx_buffer, schedule_rx_length);
     574:	4b0e      	ldr	r3, [pc, #56]	; (5b0 <usart_tx_complete_handler+0x64>)
     576:	6819      	ldr	r1, [r3, #0]
     578:	4b0c      	ldr	r3, [pc, #48]	; (5ac <usart_tx_complete_handler+0x60>)
     57a:	881a      	ldrh	r2, [r3, #0]
     57c:	687b      	ldr	r3, [r7, #4]
     57e:	0018      	movs	r0, r3
     580:	4b0d      	ldr	r3, [pc, #52]	; (5b8 <usart_tx_complete_handler+0x6c>)
     582:	4798      	blx	r3
		}
		schedule_rx = 0;
     584:	4b08      	ldr	r3, [pc, #32]	; (5a8 <usart_tx_complete_handler+0x5c>)
     586:	2200      	movs	r2, #0
     588:	701a      	strb	r2, [r3, #0]
		//schedule_rx_length = 0;
		//schedule_rx_buffer = NULL;
	}
	if(change_state) {
     58a:	4b0c      	ldr	r3, [pc, #48]	; (5bc <usart_tx_complete_handler+0x70>)
     58c:	781b      	ldrb	r3, [r3, #0]
     58e:	2b00      	cmp	r3, #0
     590:	d006      	beq.n	5a0 <usart_tx_complete_handler+0x54>
		usart_prot_handler_status = new_state;
     592:	4b0b      	ldr	r3, [pc, #44]	; (5c0 <usart_tx_complete_handler+0x74>)
     594:	781a      	ldrb	r2, [r3, #0]
     596:	4b0b      	ldr	r3, [pc, #44]	; (5c4 <usart_tx_complete_handler+0x78>)
     598:	701a      	strb	r2, [r3, #0]
		change_state = 0;
     59a:	4b08      	ldr	r3, [pc, #32]	; (5bc <usart_tx_complete_handler+0x70>)
     59c:	2200      	movs	r2, #0
     59e:	701a      	strb	r2, [r3, #0]
	}
}
     5a0:	46c0      	nop			; (mov r8, r8)
     5a2:	46bd      	mov	sp, r7
     5a4:	b002      	add	sp, #8
     5a6:	bd80      	pop	{r7, pc}
     5a8:	200004fa 	.word	0x200004fa
     5ac:	200004f8 	.word	0x200004f8
     5b0:	200004fc 	.word	0x200004fc
     5b4:	0000508d 	.word	0x0000508d
     5b8:	00005119 	.word	0x00005119
     5bc:	20000506 	.word	0x20000506
     5c0:	20000505 	.word	0x20000505
     5c4:	20000504 	.word	0x20000504

000005c8 <usart_rx_complete_handler>:

static void usart_rx_complete_handler(const struct usart_module *const module)
{
     5c8:	b580      	push	{r7, lr}
     5ca:	b082      	sub	sp, #8
     5cc:	af00      	add	r7, sp, #0
     5ce:	6078      	str	r0, [r7, #4]
	usart_pkt_received = 1;
     5d0:	4b0c      	ldr	r3, [pc, #48]	; (604 <usart_rx_complete_handler+0x3c>)
     5d2:	2201      	movs	r2, #1
     5d4:	701a      	strb	r2, [r3, #0]
	usart_pkt = (uint8_t *)(module->rx_buffer_ptr - schedule_rx_length);
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     5da:	4b0b      	ldr	r3, [pc, #44]	; (608 <usart_rx_complete_handler+0x40>)
     5dc:	881b      	ldrh	r3, [r3, #0]
     5de:	425b      	negs	r3, r3
     5e0:	18d2      	adds	r2, r2, r3
     5e2:	4b0a      	ldr	r3, [pc, #40]	; (60c <usart_rx_complete_handler+0x44>)
     5e4:	601a      	str	r2, [r3, #0]
	if(change_state) {
     5e6:	4b0a      	ldr	r3, [pc, #40]	; (610 <usart_rx_complete_handler+0x48>)
     5e8:	781b      	ldrb	r3, [r3, #0]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d006      	beq.n	5fc <usart_rx_complete_handler+0x34>
		usart_prot_handler_status = new_state;
     5ee:	4b09      	ldr	r3, [pc, #36]	; (614 <usart_rx_complete_handler+0x4c>)
     5f0:	781a      	ldrb	r2, [r3, #0]
     5f2:	4b09      	ldr	r3, [pc, #36]	; (618 <usart_rx_complete_handler+0x50>)
     5f4:	701a      	strb	r2, [r3, #0]
		change_state = 0;
     5f6:	4b06      	ldr	r3, [pc, #24]	; (610 <usart_rx_complete_handler+0x48>)
     5f8:	2200      	movs	r2, #0
     5fa:	701a      	strb	r2, [r3, #0]
	}
}
     5fc:	46c0      	nop			; (mov r8, r8)
     5fe:	46bd      	mov	sp, r7
     600:	b002      	add	sp, #8
     602:	bd80      	pop	{r7, pc}
     604:	200004e5 	.word	0x200004e5
     608:	200004f8 	.word	0x200004f8
     60c:	20000500 	.word	0x20000500
     610:	20000506 	.word	0x20000506
     614:	20000505 	.word	0x20000505
     618:	20000504 	.word	0x20000504

0000061c <nm_usart_send_regval>:
//	usart_err_on_reception = 1;
//	usart_abort_job(module,USART_TRANSCEIVER_RX);
//}

static void nm_usart_send_regval(struct usart_module *module,uint8_t *tx_data,uint16_t length)
{
     61c:	b580      	push	{r7, lr}
     61e:	b086      	sub	sp, #24
     620:	af00      	add	r7, sp, #0
     622:	60f8      	str	r0, [r7, #12]
     624:	60b9      	str	r1, [r7, #8]
     626:	1dbb      	adds	r3, r7, #6
     628:	801a      	strh	r2, [r3, #0]
	uint8_t temp,i,j;
	for(i=0,j=(length-1);i<j;i++,j--) {
     62a:	2317      	movs	r3, #23
     62c:	18fb      	adds	r3, r7, r3
     62e:	2200      	movs	r2, #0
     630:	701a      	strb	r2, [r3, #0]
     632:	1dbb      	adds	r3, r7, #6
     634:	881b      	ldrh	r3, [r3, #0]
     636:	b2da      	uxtb	r2, r3
     638:	2316      	movs	r3, #22
     63a:	18fb      	adds	r3, r7, r3
     63c:	3a01      	subs	r2, #1
     63e:	701a      	strb	r2, [r3, #0]
     640:	e02b      	b.n	69a <nm_usart_send_regval+0x7e>
		temp = tx_data[i];
     642:	2317      	movs	r3, #23
     644:	18fb      	adds	r3, r7, r3
     646:	781b      	ldrb	r3, [r3, #0]
     648:	68ba      	ldr	r2, [r7, #8]
     64a:	18d2      	adds	r2, r2, r3
     64c:	2315      	movs	r3, #21
     64e:	18fb      	adds	r3, r7, r3
     650:	7812      	ldrb	r2, [r2, #0]
     652:	701a      	strb	r2, [r3, #0]
		tx_data[i] = tx_data[j];
     654:	2317      	movs	r3, #23
     656:	18fb      	adds	r3, r7, r3
     658:	781b      	ldrb	r3, [r3, #0]
     65a:	68ba      	ldr	r2, [r7, #8]
     65c:	18d3      	adds	r3, r2, r3
     65e:	2216      	movs	r2, #22
     660:	18ba      	adds	r2, r7, r2
     662:	7812      	ldrb	r2, [r2, #0]
     664:	68b9      	ldr	r1, [r7, #8]
     666:	188a      	adds	r2, r1, r2
     668:	7812      	ldrb	r2, [r2, #0]
     66a:	701a      	strb	r2, [r3, #0]
		tx_data[j] = temp;
     66c:	2316      	movs	r3, #22
     66e:	18fb      	adds	r3, r7, r3
     670:	781b      	ldrb	r3, [r3, #0]
     672:	68ba      	ldr	r2, [r7, #8]
     674:	18d3      	adds	r3, r2, r3
     676:	2215      	movs	r2, #21
     678:	18ba      	adds	r2, r7, r2
     67a:	7812      	ldrb	r2, [r2, #0]
     67c:	701a      	strb	r2, [r3, #0]
//}

static void nm_usart_send_regval(struct usart_module *module,uint8_t *tx_data,uint16_t length)
{
	uint8_t temp,i,j;
	for(i=0,j=(length-1);i<j;i++,j--) {
     67e:	2317      	movs	r3, #23
     680:	18fb      	adds	r3, r7, r3
     682:	781a      	ldrb	r2, [r3, #0]
     684:	2317      	movs	r3, #23
     686:	18fb      	adds	r3, r7, r3
     688:	3201      	adds	r2, #1
     68a:	701a      	strb	r2, [r3, #0]
     68c:	2316      	movs	r3, #22
     68e:	18fb      	adds	r3, r7, r3
     690:	781a      	ldrb	r2, [r3, #0]
     692:	2316      	movs	r3, #22
     694:	18fb      	adds	r3, r7, r3
     696:	3a01      	subs	r2, #1
     698:	701a      	strb	r2, [r3, #0]
     69a:	2317      	movs	r3, #23
     69c:	18fa      	adds	r2, r7, r3
     69e:	2316      	movs	r3, #22
     6a0:	18fb      	adds	r3, r7, r3
     6a2:	7812      	ldrb	r2, [r2, #0]
     6a4:	781b      	ldrb	r3, [r3, #0]
     6a6:	429a      	cmp	r2, r3
     6a8:	d3cb      	bcc.n	642 <nm_usart_send_regval+0x26>
		temp = tx_data[i];
		tx_data[i] = tx_data[j];
		tx_data[j] = temp;
	}
	usart_write_buffer_job(module,tx_data,length);
     6aa:	1dbb      	adds	r3, r7, #6
     6ac:	881a      	ldrh	r2, [r3, #0]
     6ae:	68b9      	ldr	r1, [r7, #8]
     6b0:	68fb      	ldr	r3, [r7, #12]
     6b2:	0018      	movs	r0, r3
     6b4:	4b02      	ldr	r3, [pc, #8]	; (6c0 <nm_usart_send_regval+0xa4>)
     6b6:	4798      	blx	r3
}
     6b8:	46c0      	nop			; (mov r8, r8)
     6ba:	46bd      	mov	sp, r7
     6bc:	b006      	add	sp, #24
     6be:	bd80      	pop	{r7, pc}
     6c0:	000050c1 	.word	0x000050c1

000006c4 <nm_usart_protocol_handler>:

static void nm_usart_protocol_handler(struct usart_module *module,enum nm_usart_event_types event_name)
{
     6c4:	b580      	push	{r7, lr}
     6c6:	b084      	sub	sp, #16
     6c8:	af00      	add	r7, sp, #0
     6ca:	6078      	str	r0, [r7, #4]
     6cc:	000a      	movs	r2, r1
     6ce:	1cfb      	adds	r3, r7, #3
     6d0:	701a      	strb	r2, [r3, #0]
	//uint16_t response;
	static uint16_t payload_length = 0;
	//uint16_t expected_length;
	//static uint32_t target_address = 0;
	uint8 checksum = 0;
     6d2:	230f      	movs	r3, #15
     6d4:	18fb      	adds	r3, r7, r3
     6d6:	2200      	movs	r2, #0
     6d8:	701a      	strb	r2, [r3, #0]
	uint8 i;
#if 1
switch(usart_prot_handler_status) {
     6da:	4bd8      	ldr	r3, [pc, #864]	; (a3c <nm_usart_protocol_handler+0x378>)
     6dc:	781b      	ldrb	r3, [r3, #0]
     6de:	2b04      	cmp	r3, #4
     6e0:	d900      	bls.n	6e4 <nm_usart_protocol_handler+0x20>
     6e2:	e20f      	b.n	b04 <nm_usart_protocol_handler+0x440>
     6e4:	009a      	lsls	r2, r3, #2
     6e6:	4bd6      	ldr	r3, [pc, #856]	; (a40 <nm_usart_protocol_handler+0x37c>)
     6e8:	18d3      	adds	r3, r2, r3
     6ea:	681b      	ldr	r3, [r3, #0]
     6ec:	469f      	mov	pc, r3
	case INIT:
		if((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == 1)) {
     6ee:	1cfb      	adds	r3, r7, #3
     6f0:	781b      	ldrb	r3, [r3, #0]
     6f2:	2b00      	cmp	r3, #0
     6f4:	d13a      	bne.n	76c <nm_usart_protocol_handler+0xa8>
     6f6:	4bd3      	ldr	r3, [pc, #844]	; (a44 <nm_usart_protocol_handler+0x380>)
     6f8:	881b      	ldrh	r3, [r3, #0]
     6fa:	2b01      	cmp	r3, #1
     6fc:	d136      	bne.n	76c <nm_usart_protocol_handler+0xa8>
			if((usart_pkt[0] == 0x12)) {
     6fe:	4bd2      	ldr	r3, [pc, #840]	; (a48 <nm_usart_protocol_handler+0x384>)
     700:	681b      	ldr	r3, [r3, #0]
     702:	781b      	ldrb	r3, [r3, #0]
     704:	2b12      	cmp	r3, #18
     706:	d11a      	bne.n	73e <nm_usart_protocol_handler+0x7a>
				usart_prot_handler_status = WAIT_SYNC;
     708:	4bcc      	ldr	r3, [pc, #816]	; (a3c <nm_usart_protocol_handler+0x378>)
     70a:	2201      	movs	r2, #1
     70c:	701a      	strb	r2, [r3, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
     70e:	4bcf      	ldr	r3, [pc, #828]	; (a4c <nm_usart_protocol_handler+0x388>)
     710:	22ff      	movs	r2, #255	; 0xff
     712:	801a      	strh	r2, [r3, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     714:	4bce      	ldr	r3, [pc, #824]	; (a50 <nm_usart_protocol_handler+0x38c>)
     716:	4acd      	ldr	r2, [pc, #820]	; (a4c <nm_usart_protocol_handler+0x388>)
     718:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
     71a:	4bca      	ldr	r3, [pc, #808]	; (a44 <nm_usart_protocol_handler+0x380>)
     71c:	2201      	movs	r2, #1
     71e:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
     720:	4bcc      	ldr	r3, [pc, #816]	; (a54 <nm_usart_protocol_handler+0x390>)
     722:	2201      	movs	r2, #1
     724:	701a      	strb	r2, [r3, #0]
				usart_tx_buffer[0] = 0x5B;
     726:	4bcc      	ldr	r3, [pc, #816]	; (a58 <nm_usart_protocol_handler+0x394>)
     728:	225b      	movs	r2, #91	; 0x5b
     72a:	701a      	strb	r2, [r3, #0]
				usart_write_job(module,usart_tx_buffer[0]);
     72c:	4bca      	ldr	r3, [pc, #808]	; (a58 <nm_usart_protocol_handler+0x394>)
     72e:	781b      	ldrb	r3, [r3, #0]
     730:	b29a      	uxth	r2, r3
     732:	687b      	ldr	r3, [r7, #4]
     734:	0011      	movs	r1, r2
     736:	0018      	movs	r0, r3
     738:	4bc8      	ldr	r3, [pc, #800]	; (a5c <nm_usart_protocol_handler+0x398>)
     73a:	4798      	blx	r3
	uint8 i;
#if 1
switch(usart_prot_handler_status) {
	case INIT:
		if((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == 1)) {
			if((usart_pkt[0] == 0x12)) {
     73c:	e02e      	b.n	79c <nm_usart_protocol_handler+0xd8>
				schedule_rx = 1;
				usart_tx_buffer[0] = 0x5B;
				usart_write_job(module,usart_tx_buffer[0]);
			}
			else {
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     73e:	4bc4      	ldr	r3, [pc, #784]	; (a50 <nm_usart_protocol_handler+0x38c>)
     740:	4ac2      	ldr	r2, [pc, #776]	; (a4c <nm_usart_protocol_handler+0x388>)
     742:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
     744:	4bbf      	ldr	r3, [pc, #764]	; (a44 <nm_usart_protocol_handler+0x380>)
     746:	2201      	movs	r2, #1
     748:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
     74a:	4bc2      	ldr	r3, [pc, #776]	; (a54 <nm_usart_protocol_handler+0x390>)
     74c:	2201      	movs	r2, #1
     74e:	701a      	strb	r2, [r3, #0]
				usart_tx_buffer[0] = usart_pkt[0];
     750:	4bbd      	ldr	r3, [pc, #756]	; (a48 <nm_usart_protocol_handler+0x384>)
     752:	681b      	ldr	r3, [r3, #0]
     754:	781a      	ldrb	r2, [r3, #0]
     756:	4bc0      	ldr	r3, [pc, #768]	; (a58 <nm_usart_protocol_handler+0x394>)
     758:	701a      	strb	r2, [r3, #0]
				usart_write_job(module,usart_tx_buffer[0]);
     75a:	4bbf      	ldr	r3, [pc, #764]	; (a58 <nm_usart_protocol_handler+0x394>)
     75c:	781b      	ldrb	r3, [r3, #0]
     75e:	b29a      	uxth	r2, r3
     760:	687b      	ldr	r3, [r7, #4]
     762:	0011      	movs	r1, r2
     764:	0018      	movs	r0, r3
     766:	4bbd      	ldr	r3, [pc, #756]	; (a5c <nm_usart_protocol_handler+0x398>)
     768:	4798      	blx	r3
	uint8 i;
#if 1
switch(usart_prot_handler_status) {
	case INIT:
		if((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == 1)) {
			if((usart_pkt[0] == 0x12)) {
     76a:	e017      	b.n	79c <nm_usart_protocol_handler+0xd8>
				usart_write_job(module,usart_tx_buffer[0]);
				//usart_read_job(module,&usart_cmd_recv_buffer[0]);
			}
		}
		else {
			usart_cmd_recv_buffer[0] = 0xFF;
     76c:	4bb7      	ldr	r3, [pc, #732]	; (a4c <nm_usart_protocol_handler+0x388>)
     76e:	22ff      	movs	r2, #255	; 0xff
     770:	801a      	strh	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     772:	4bb7      	ldr	r3, [pc, #732]	; (a50 <nm_usart_protocol_handler+0x38c>)
     774:	4ab5      	ldr	r2, [pc, #724]	; (a4c <nm_usart_protocol_handler+0x388>)
     776:	601a      	str	r2, [r3, #0]
			schedule_rx_length = 1;
     778:	4bb2      	ldr	r3, [pc, #712]	; (a44 <nm_usart_protocol_handler+0x380>)
     77a:	2201      	movs	r2, #1
     77c:	801a      	strh	r2, [r3, #0]
			schedule_rx = 1;
     77e:	4bb5      	ldr	r3, [pc, #724]	; (a54 <nm_usart_protocol_handler+0x390>)
     780:	2201      	movs	r2, #1
     782:	701a      	strb	r2, [r3, #0]
			usart_tx_buffer[0] = 0xEA;
     784:	4bb4      	ldr	r3, [pc, #720]	; (a58 <nm_usart_protocol_handler+0x394>)
     786:	22ea      	movs	r2, #234	; 0xea
     788:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     78a:	4bb3      	ldr	r3, [pc, #716]	; (a58 <nm_usart_protocol_handler+0x394>)
     78c:	781b      	ldrb	r3, [r3, #0]
     78e:	b29a      	uxth	r2, r3
     790:	687b      	ldr	r3, [r7, #4]
     792:	0011      	movs	r1, r2
     794:	0018      	movs	r0, r3
     796:	4bb1      	ldr	r3, [pc, #708]	; (a5c <nm_usart_protocol_handler+0x398>)
     798:	4798      	blx	r3
		}
		break;
     79a:	e1ba      	b.n	b12 <nm_usart_protocol_handler+0x44e>
     79c:	e1b9      	b.n	b12 <nm_usart_protocol_handler+0x44e>
	case WAIT_SYNC:
		if(event_name == USART_PKT_RECEIVED) {
     79e:	1cfb      	adds	r3, r7, #3
     7a0:	781b      	ldrb	r3, [r3, #0]
     7a2:	2b00      	cmp	r3, #0
     7a4:	d000      	beq.n	7a8 <nm_usart_protocol_handler+0xe4>
     7a6:	e1b1      	b.n	b0c <nm_usart_protocol_handler+0x448>
			if(usart_pkt[0] == 0xA5) {
     7a8:	4ba7      	ldr	r3, [pc, #668]	; (a48 <nm_usart_protocol_handler+0x384>)
     7aa:	681b      	ldr	r3, [r3, #0]
     7ac:	781b      	ldrb	r3, [r3, #0]
     7ae:	2ba5      	cmp	r3, #165	; 0xa5
     7b0:	d112      	bne.n	7d8 <nm_usart_protocol_handler+0x114>
				uint8 * usart_cmd_recv_buffer_u8 = (uint8*)&usart_cmd_recv_buffer[0];
     7b2:	4ba6      	ldr	r3, [pc, #664]	; (a4c <nm_usart_protocol_handler+0x388>)
     7b4:	60bb      	str	r3, [r7, #8]
				//module->rx_buffer_ptr = &usart_cmd_recv_buffer_u8[4];
				//module->remaining_rx_buffer_length = 1;
				usart_prot_handler_status = WAITING;
     7b6:	4ba1      	ldr	r3, [pc, #644]	; (a3c <nm_usart_protocol_handler+0x378>)
     7b8:	2202      	movs	r2, #2
     7ba:	701a      	strb	r2, [r3, #0]
				usart_cmd_recv_buffer_u8[4] = 0xFF;
     7bc:	68bb      	ldr	r3, [r7, #8]
     7be:	3304      	adds	r3, #4
     7c0:	22ff      	movs	r2, #255	; 0xff
     7c2:	701a      	strb	r2, [r3, #0]
				schedule_rx_length = 1;
     7c4:	4b9f      	ldr	r3, [pc, #636]	; (a44 <nm_usart_protocol_handler+0x380>)
     7c6:	2201      	movs	r2, #1
     7c8:	801a      	strh	r2, [r3, #0]
				usart_read_job(module, &usart_cmd_recv_buffer[2]);
     7ca:	4aa5      	ldr	r2, [pc, #660]	; (a60 <nm_usart_protocol_handler+0x39c>)
     7cc:	687b      	ldr	r3, [r7, #4]
     7ce:	0011      	movs	r1, r2
     7d0:	0018      	movs	r0, r3
     7d2:	4ba4      	ldr	r3, [pc, #656]	; (a64 <nm_usart_protocol_handler+0x3a0>)
     7d4:	4798      	blx	r3
					schedule_rx_length = 1;
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
				}
			}
		}
			break;
     7d6:	e199      	b.n	b0c <nm_usart_protocol_handler+0x448>
				usart_prot_handler_status = WAITING;
				usart_cmd_recv_buffer_u8[4] = 0xFF;
				schedule_rx_length = 1;
				usart_read_job(module, &usart_cmd_recv_buffer[2]);
			}
			else if(usart_pkt[0] == 0x12) {	//uart identification command
     7d8:	4b9b      	ldr	r3, [pc, #620]	; (a48 <nm_usart_protocol_handler+0x384>)
     7da:	681b      	ldr	r3, [r3, #0]
     7dc:	781b      	ldrb	r3, [r3, #0]
     7de:	2b12      	cmp	r3, #18
     7e0:	d117      	bne.n	812 <nm_usart_protocol_handler+0x14e>
				usart_tx_buffer[0] = 0x5B;
     7e2:	4b9d      	ldr	r3, [pc, #628]	; (a58 <nm_usart_protocol_handler+0x394>)
     7e4:	225b      	movs	r2, #91	; 0x5b
     7e6:	701a      	strb	r2, [r3, #0]
				usart_cmd_recv_buffer[0] = 0xFF;
     7e8:	4b98      	ldr	r3, [pc, #608]	; (a4c <nm_usart_protocol_handler+0x388>)
     7ea:	22ff      	movs	r2, #255	; 0xff
     7ec:	801a      	strh	r2, [r3, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     7ee:	4b98      	ldr	r3, [pc, #608]	; (a50 <nm_usart_protocol_handler+0x38c>)
     7f0:	4a96      	ldr	r2, [pc, #600]	; (a4c <nm_usart_protocol_handler+0x388>)
     7f2:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
     7f4:	4b93      	ldr	r3, [pc, #588]	; (a44 <nm_usart_protocol_handler+0x380>)
     7f6:	2201      	movs	r2, #1
     7f8:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
     7fa:	4b96      	ldr	r3, [pc, #600]	; (a54 <nm_usart_protocol_handler+0x390>)
     7fc:	2201      	movs	r2, #1
     7fe:	701a      	strb	r2, [r3, #0]
				usart_write_job(module,usart_tx_buffer[0]);
     800:	4b95      	ldr	r3, [pc, #596]	; (a58 <nm_usart_protocol_handler+0x394>)
     802:	781b      	ldrb	r3, [r3, #0]
     804:	b29a      	uxth	r2, r3
     806:	687b      	ldr	r3, [r7, #4]
     808:	0011      	movs	r1, r2
     80a:	0018      	movs	r0, r3
     80c:	4b93      	ldr	r3, [pc, #588]	; (a5c <nm_usart_protocol_handler+0x398>)
     80e:	4798      	blx	r3
					schedule_rx_length = 1;
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
				}
			}
		}
			break;
     810:	e17c      	b.n	b0c <nm_usart_protocol_handler+0x448>
				schedule_rx_length = 1;
				schedule_rx = 1;
				usart_write_job(module,usart_tx_buffer[0]);
			}
			else {
				if(!uart_reconfigure) {
     812:	4b95      	ldr	r3, [pc, #596]	; (a68 <nm_usart_protocol_handler+0x3a4>)
     814:	781b      	ldrb	r3, [r3, #0]
     816:	2b00      	cmp	r3, #0
     818:	d117      	bne.n	84a <nm_usart_protocol_handler+0x186>
					usart_tx_buffer[0] = 0x5A;
     81a:	4b8f      	ldr	r3, [pc, #572]	; (a58 <nm_usart_protocol_handler+0x394>)
     81c:	225a      	movs	r2, #90	; 0x5a
     81e:	701a      	strb	r2, [r3, #0]
					usart_cmd_recv_buffer[0] = 0xFF;
     820:	4b8a      	ldr	r3, [pc, #552]	; (a4c <nm_usart_protocol_handler+0x388>)
     822:	22ff      	movs	r2, #255	; 0xff
     824:	801a      	strh	r2, [r3, #0]
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     826:	4b8a      	ldr	r3, [pc, #552]	; (a50 <nm_usart_protocol_handler+0x38c>)
     828:	4a88      	ldr	r2, [pc, #544]	; (a4c <nm_usart_protocol_handler+0x388>)
     82a:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     82c:	4b85      	ldr	r3, [pc, #532]	; (a44 <nm_usart_protocol_handler+0x380>)
     82e:	2201      	movs	r2, #1
     830:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     832:	4b88      	ldr	r3, [pc, #544]	; (a54 <nm_usart_protocol_handler+0x390>)
     834:	2201      	movs	r2, #1
     836:	701a      	strb	r2, [r3, #0]
					usart_write_job(module,usart_tx_buffer[0]);
     838:	4b87      	ldr	r3, [pc, #540]	; (a58 <nm_usart_protocol_handler+0x394>)
     83a:	781b      	ldrb	r3, [r3, #0]
     83c:	b29a      	uxth	r2, r3
     83e:	687b      	ldr	r3, [r7, #4]
     840:	0011      	movs	r1, r2
     842:	0018      	movs	r0, r3
     844:	4b85      	ldr	r3, [pc, #532]	; (a5c <nm_usart_protocol_handler+0x398>)
     846:	4798      	blx	r3
					schedule_rx_length = 1;
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
				}
			}
		}
			break;
     848:	e160      	b.n	b0c <nm_usart_protocol_handler+0x448>
					schedule_rx = 1;
					usart_write_job(module,usart_tx_buffer[0]);
				}
				else {
					//uart_reconfigure = 0;
					schedule_rx_length = 1;
     84a:	4b7e      	ldr	r3, [pc, #504]	; (a44 <nm_usart_protocol_handler+0x380>)
     84c:	2201      	movs	r2, #1
     84e:	801a      	strh	r2, [r3, #0]
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
     850:	4a7e      	ldr	r2, [pc, #504]	; (a4c <nm_usart_protocol_handler+0x388>)
     852:	687b      	ldr	r3, [r7, #4]
     854:	0011      	movs	r1, r2
     856:	0018      	movs	r0, r3
     858:	4b82      	ldr	r3, [pc, #520]	; (a64 <nm_usart_protocol_handler+0x3a0>)
     85a:	4798      	blx	r3
				}
			}
		}
			break;
     85c:	e156      	b.n	b0c <nm_usart_protocol_handler+0x448>
	case WAITING:
		if(event_name == USART_PKT_RECEIVED) {
     85e:	1cfb      	adds	r3, r7, #3
     860:	781b      	ldrb	r3, [r3, #0]
     862:	2b00      	cmp	r3, #0
     864:	d111      	bne.n	88a <nm_usart_protocol_handler+0x1c6>
			usart_prot_handler_status = COLLECTING_HDR;
     866:	4b75      	ldr	r3, [pc, #468]	; (a3c <nm_usart_protocol_handler+0x378>)
     868:	2203      	movs	r2, #3
     86a:	701a      	strb	r2, [r3, #0]
			uart_cmd_buf = usart_pkt;
     86c:	4b76      	ldr	r3, [pc, #472]	; (a48 <nm_usart_protocol_handler+0x384>)
     86e:	681a      	ldr	r2, [r3, #0]
     870:	4b7e      	ldr	r3, [pc, #504]	; (a6c <nm_usart_protocol_handler+0x3a8>)
     872:	601a      	str	r2, [r3, #0]
			//module->remaining_rx_buffer_length = USART_CMD_HDR_LENGTH - 1;
			schedule_rx_length = (USART_CMD_HDR_LENGTH - 1);
     874:	4b73      	ldr	r3, [pc, #460]	; (a44 <nm_usart_protocol_handler+0x380>)
     876:	220b      	movs	r2, #11
     878:	801a      	strh	r2, [r3, #0]
			usart_read_buffer_job(module, (uint8_t *)module->rx_buffer_ptr, (USART_CMD_HDR_LENGTH - 1));
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	6a59      	ldr	r1, [r3, #36]	; 0x24
     87e:	687b      	ldr	r3, [r7, #4]
     880:	220b      	movs	r2, #11
     882:	0018      	movs	r0, r3
     884:	4b7a      	ldr	r3, [pc, #488]	; (a70 <nm_usart_protocol_handler+0x3ac>)
     886:	4798      	blx	r3
			schedule_rx = 1;
			schedule_rx_length = 1;
			usart_tx_buffer[0] = 0xEA;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     888:	e143      	b.n	b12 <nm_usart_protocol_handler+0x44e>
			//module->remaining_rx_buffer_length = USART_CMD_HDR_LENGTH - 1;
			schedule_rx_length = (USART_CMD_HDR_LENGTH - 1);
			usart_read_buffer_job(module, (uint8_t *)module->rx_buffer_ptr, (USART_CMD_HDR_LENGTH - 1));
		}
		else {
			usart_prot_handler_status = WAIT_SYNC;
     88a:	4b6c      	ldr	r3, [pc, #432]	; (a3c <nm_usart_protocol_handler+0x378>)
     88c:	2201      	movs	r2, #1
     88e:	701a      	strb	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     890:	4b6f      	ldr	r3, [pc, #444]	; (a50 <nm_usart_protocol_handler+0x38c>)
     892:	4a6e      	ldr	r2, [pc, #440]	; (a4c <nm_usart_protocol_handler+0x388>)
     894:	601a      	str	r2, [r3, #0]
			schedule_rx = 1;
     896:	4b6f      	ldr	r3, [pc, #444]	; (a54 <nm_usart_protocol_handler+0x390>)
     898:	2201      	movs	r2, #1
     89a:	701a      	strb	r2, [r3, #0]
			schedule_rx_length = 1;
     89c:	4b69      	ldr	r3, [pc, #420]	; (a44 <nm_usart_protocol_handler+0x380>)
     89e:	2201      	movs	r2, #1
     8a0:	801a      	strh	r2, [r3, #0]
			usart_tx_buffer[0] = 0xEA;
     8a2:	4b6d      	ldr	r3, [pc, #436]	; (a58 <nm_usart_protocol_handler+0x394>)
     8a4:	22ea      	movs	r2, #234	; 0xea
     8a6:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     8a8:	4b6b      	ldr	r3, [pc, #428]	; (a58 <nm_usart_protocol_handler+0x394>)
     8aa:	781b      	ldrb	r3, [r3, #0]
     8ac:	b29a      	uxth	r2, r3
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	0011      	movs	r1, r2
     8b2:	0018      	movs	r0, r3
     8b4:	4b69      	ldr	r3, [pc, #420]	; (a5c <nm_usart_protocol_handler+0x398>)
     8b6:	4798      	blx	r3
		}
		break;
     8b8:	e12b      	b.n	b12 <nm_usart_protocol_handler+0x44e>
	case COLLECTING_HDR:
		if(event_name == USART_PKT_RECEIVED) {
     8ba:	1cfb      	adds	r3, r7, #3
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	2b00      	cmp	r3, #0
     8c0:	d000      	beq.n	8c4 <nm_usart_protocol_handler+0x200>
     8c2:	e08c      	b.n	9de <nm_usart_protocol_handler+0x31a>
			//Verify check sum
			for(i=0;i<(USART_CMD_HDR_LENGTH);i++) {
     8c4:	230e      	movs	r3, #14
     8c6:	18fb      	adds	r3, r7, r3
     8c8:	2200      	movs	r2, #0
     8ca:	701a      	strb	r2, [r3, #0]
     8cc:	e014      	b.n	8f8 <nm_usart_protocol_handler+0x234>
				checksum ^= *(((uint8_t *)uart_cmd_buf)+i);
     8ce:	4b67      	ldr	r3, [pc, #412]	; (a6c <nm_usart_protocol_handler+0x3a8>)
     8d0:	681a      	ldr	r2, [r3, #0]
     8d2:	230e      	movs	r3, #14
     8d4:	18fb      	adds	r3, r7, r3
     8d6:	781b      	ldrb	r3, [r3, #0]
     8d8:	18d3      	adds	r3, r2, r3
     8da:	7819      	ldrb	r1, [r3, #0]
     8dc:	230f      	movs	r3, #15
     8de:	18fb      	adds	r3, r7, r3
     8e0:	220f      	movs	r2, #15
     8e2:	18ba      	adds	r2, r7, r2
     8e4:	7812      	ldrb	r2, [r2, #0]
     8e6:	404a      	eors	r2, r1
     8e8:	701a      	strb	r2, [r3, #0]
		}
		break;
	case COLLECTING_HDR:
		if(event_name == USART_PKT_RECEIVED) {
			//Verify check sum
			for(i=0;i<(USART_CMD_HDR_LENGTH);i++) {
     8ea:	230e      	movs	r3, #14
     8ec:	18fb      	adds	r3, r7, r3
     8ee:	781a      	ldrb	r2, [r3, #0]
     8f0:	230e      	movs	r3, #14
     8f2:	18fb      	adds	r3, r7, r3
     8f4:	3201      	adds	r2, #1
     8f6:	701a      	strb	r2, [r3, #0]
     8f8:	230e      	movs	r3, #14
     8fa:	18fb      	adds	r3, r7, r3
     8fc:	781b      	ldrb	r3, [r3, #0]
     8fe:	2b0b      	cmp	r3, #11
     900:	d9e5      	bls.n	8ce <nm_usart_protocol_handler+0x20a>
				checksum ^= *(((uint8_t *)uart_cmd_buf)+i);
			}
			if(checksum != 0) {
     902:	230f      	movs	r3, #15
     904:	18fb      	adds	r3, r7, r3
     906:	781b      	ldrb	r3, [r3, #0]
     908:	2b00      	cmp	r3, #0
     90a:	d01a      	beq.n	942 <nm_usart_protocol_handler+0x27e>
				usart_prot_handler_status = WAIT_SYNC;
     90c:	4b4b      	ldr	r3, [pc, #300]	; (a3c <nm_usart_protocol_handler+0x378>)
     90e:	2201      	movs	r2, #1
     910:	701a      	strb	r2, [r3, #0]
				//module->remaining_rx_buffer_length = 1;
				usart_cmd_recv_buffer[0] = 0xFF;
     912:	4b4e      	ldr	r3, [pc, #312]	; (a4c <nm_usart_protocol_handler+0x388>)
     914:	22ff      	movs	r2, #255	; 0xff
     916:	801a      	strh	r2, [r3, #0]
				schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     918:	4b4d      	ldr	r3, [pc, #308]	; (a50 <nm_usart_protocol_handler+0x38c>)
     91a:	4a4c      	ldr	r2, [pc, #304]	; (a4c <nm_usart_protocol_handler+0x388>)
     91c:	601a      	str	r2, [r3, #0]
				schedule_rx_length = 1;
     91e:	4b49      	ldr	r3, [pc, #292]	; (a44 <nm_usart_protocol_handler+0x380>)
     920:	2201      	movs	r2, #1
     922:	801a      	strh	r2, [r3, #0]
				schedule_rx = 1;
     924:	4b4b      	ldr	r3, [pc, #300]	; (a54 <nm_usart_protocol_handler+0x390>)
     926:	2201      	movs	r2, #1
     928:	701a      	strb	r2, [r3, #0]
				usart_tx_buffer[0] = 0x5A;
     92a:	4b4b      	ldr	r3, [pc, #300]	; (a58 <nm_usart_protocol_handler+0x394>)
     92c:	225a      	movs	r2, #90	; 0x5a
     92e:	701a      	strb	r2, [r3, #0]
				//ptr_put(module,&response);
				usart_write_job(module,usart_tx_buffer[0]);
     930:	4b49      	ldr	r3, [pc, #292]	; (a58 <nm_usart_protocol_handler+0x394>)
     932:	781b      	ldrb	r3, [r3, #0]
     934:	b29a      	uxth	r2, r3
     936:	687b      	ldr	r3, [r7, #4]
     938:	0011      	movs	r1, r2
     93a:	0018      	movs	r0, r3
     93c:	4b47      	ldr	r3, [pc, #284]	; (a5c <nm_usart_protocol_handler+0x398>)
     93e:	4798      	blx	r3
			schedule_rx = 1;
			schedule_rx_length = 1;
			usart_tx_buffer[0] = 0xEA;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     940:	e0e6      	b.n	b10 <nm_usart_protocol_handler+0x44c>
				//ptr_put(module,&response);
				usart_write_job(module,usart_tx_buffer[0]);
				//usart_read_job(module,&usart_cmd_recv_buffer[0]);
			}
			else {
				memcpy(&uart_cmd, uart_cmd_buf, sizeof(uart_cmd_hdr));
     942:	4b4a      	ldr	r3, [pc, #296]	; (a6c <nm_usart_protocol_handler+0x3a8>)
     944:	6819      	ldr	r1, [r3, #0]
     946:	4b4b      	ldr	r3, [pc, #300]	; (a74 <nm_usart_protocol_handler+0x3b0>)
     948:	220c      	movs	r2, #12
     94a:	0018      	movs	r0, r3
     94c:	4b4a      	ldr	r3, [pc, #296]	; (a78 <nm_usart_protocol_handler+0x3b4>)
     94e:	4798      	blx	r3
				//Process the Command.
				//uart_cmd = &module->rx_buffer_ptr[4];
				if((uart_cmd.cmd & 0xFF) == WRITE_BUFF) {
     950:	4b48      	ldr	r3, [pc, #288]	; (a74 <nm_usart_protocol_handler+0x3b0>)
     952:	681b      	ldr	r3, [r3, #0]
     954:	22ff      	movs	r2, #255	; 0xff
     956:	4013      	ands	r3, r2
     958:	2b03      	cmp	r3, #3
     95a:	d11e      	bne.n	99a <nm_usart_protocol_handler+0x2d6>
					usart_prot_handler_status = COLLECTING_PAYLOAD;
     95c:	4b37      	ldr	r3, [pc, #220]	; (a3c <nm_usart_protocol_handler+0x378>)
     95e:	2204      	movs	r2, #4
     960:	701a      	strb	r2, [r3, #0]
					payload_length = (uart_cmd.cmd >> 16) & 0xFFFF;
     962:	4b44      	ldr	r3, [pc, #272]	; (a74 <nm_usart_protocol_handler+0x3b0>)
     964:	681b      	ldr	r3, [r3, #0]
     966:	0c1b      	lsrs	r3, r3, #16
     968:	b29a      	uxth	r2, r3
     96a:	4b44      	ldr	r3, [pc, #272]	; (a7c <nm_usart_protocol_handler+0x3b8>)
     96c:	801a      	strh	r2, [r3, #0]
					//target_address = uart_cmd.addr;
					schedule_rx = 1;
     96e:	4b39      	ldr	r3, [pc, #228]	; (a54 <nm_usart_protocol_handler+0x390>)
     970:	2201      	movs	r2, #1
     972:	701a      	strb	r2, [r3, #0]
					schedule_rx_buffer = &usart_payload_buffer[0];
     974:	4b36      	ldr	r3, [pc, #216]	; (a50 <nm_usart_protocol_handler+0x38c>)
     976:	4a42      	ldr	r2, [pc, #264]	; (a80 <nm_usart_protocol_handler+0x3bc>)
     978:	601a      	str	r2, [r3, #0]
					schedule_rx_length = payload_length;
     97a:	4b40      	ldr	r3, [pc, #256]	; (a7c <nm_usart_protocol_handler+0x3b8>)
     97c:	881a      	ldrh	r2, [r3, #0]
     97e:	4b31      	ldr	r3, [pc, #196]	; (a44 <nm_usart_protocol_handler+0x380>)
     980:	801a      	strh	r2, [r3, #0]
					usart_tx_buffer[0] = 0xAC;
     982:	4b35      	ldr	r3, [pc, #212]	; (a58 <nm_usart_protocol_handler+0x394>)
     984:	22ac      	movs	r2, #172	; 0xac
     986:	701a      	strb	r2, [r3, #0]
					usart_write_job(module,usart_tx_buffer[0]);
     988:	4b33      	ldr	r3, [pc, #204]	; (a58 <nm_usart_protocol_handler+0x394>)
     98a:	781b      	ldrb	r3, [r3, #0]
     98c:	b29a      	uxth	r2, r3
     98e:	687b      	ldr	r3, [r7, #4]
     990:	0011      	movs	r1, r2
     992:	0018      	movs	r0, r3
     994:	4b31      	ldr	r3, [pc, #196]	; (a5c <nm_usart_protocol_handler+0x398>)
     996:	4798      	blx	r3
			schedule_rx = 1;
			schedule_rx_length = 1;
			usart_tx_buffer[0] = 0xEA;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     998:	e0ba      	b.n	b10 <nm_usart_protocol_handler+0x44c>
					schedule_rx_buffer = &usart_payload_buffer[0];
					schedule_rx_length = payload_length;
					usart_tx_buffer[0] = 0xAC;
					usart_write_job(module,usart_tx_buffer[0]);
				} 
				else if((uart_cmd.cmd & 0xFF) == WRITE_REG) {
     99a:	4b36      	ldr	r3, [pc, #216]	; (a74 <nm_usart_protocol_handler+0x3b0>)
     99c:	681b      	ldr	r3, [r3, #0]
     99e:	22ff      	movs	r2, #255	; 0xff
     9a0:	4013      	ands	r3, r2
     9a2:	2b01      	cmp	r3, #1
     9a4:	d106      	bne.n	9b4 <nm_usart_protocol_handler+0x2f0>
					serial_command_pending = 1;
     9a6:	4b37      	ldr	r3, [pc, #220]	; (a84 <nm_usart_protocol_handler+0x3c0>)
     9a8:	2201      	movs	r2, #1
     9aa:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = PROCESSING;
     9ac:	4b23      	ldr	r3, [pc, #140]	; (a3c <nm_usart_protocol_handler+0x378>)
     9ae:	2205      	movs	r2, #5
     9b0:	701a      	strb	r2, [r3, #0]
			schedule_rx = 1;
			schedule_rx_length = 1;
			usart_tx_buffer[0] = 0xEA;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     9b2:	e0ad      	b.n	b10 <nm_usart_protocol_handler+0x44c>
				else if((uart_cmd.cmd & 0xFF) == WRITE_REG) {
					serial_command_pending = 1;
					usart_prot_handler_status = PROCESSING;
				}
				else {
					serial_command_pending = 1;
     9b4:	4b33      	ldr	r3, [pc, #204]	; (a84 <nm_usart_protocol_handler+0x3c0>)
     9b6:	2201      	movs	r2, #1
     9b8:	701a      	strb	r2, [r3, #0]
					//usart_prot_handler_status = PROCESSING;
					change_state = 1;
     9ba:	4b33      	ldr	r3, [pc, #204]	; (a88 <nm_usart_protocol_handler+0x3c4>)
     9bc:	2201      	movs	r2, #1
     9be:	701a      	strb	r2, [r3, #0]
					new_state = PROCESSING;
     9c0:	4b32      	ldr	r3, [pc, #200]	; (a8c <nm_usart_protocol_handler+0x3c8>)
     9c2:	2205      	movs	r2, #5
     9c4:	701a      	strb	r2, [r3, #0]
					usart_tx_buffer[0] = 0xAC;
     9c6:	4b24      	ldr	r3, [pc, #144]	; (a58 <nm_usart_protocol_handler+0x394>)
     9c8:	22ac      	movs	r2, #172	; 0xac
     9ca:	701a      	strb	r2, [r3, #0]
					usart_write_job(module,usart_tx_buffer[0]);
     9cc:	4b22      	ldr	r3, [pc, #136]	; (a58 <nm_usart_protocol_handler+0x394>)
     9ce:	781b      	ldrb	r3, [r3, #0]
     9d0:	b29a      	uxth	r2, r3
     9d2:	687b      	ldr	r3, [r7, #4]
     9d4:	0011      	movs	r1, r2
     9d6:	0018      	movs	r0, r3
     9d8:	4b20      	ldr	r3, [pc, #128]	; (a5c <nm_usart_protocol_handler+0x398>)
     9da:	4798      	blx	r3
			schedule_rx = 1;
			schedule_rx_length = 1;
			usart_tx_buffer[0] = 0xEA;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     9dc:	e098      	b.n	b10 <nm_usart_protocol_handler+0x44c>
					usart_tx_buffer[0] = 0xAC;
					usart_write_job(module,usart_tx_buffer[0]);
				}
			}
		}
		else if(event_name == USART_ERROR_ON_RECEPTION) {
     9de:	1cfb      	adds	r3, r7, #3
     9e0:	781b      	ldrb	r3, [r3, #0]
     9e2:	2b02      	cmp	r3, #2
     9e4:	d000      	beq.n	9e8 <nm_usart_protocol_handler+0x324>
     9e6:	e093      	b.n	b10 <nm_usart_protocol_handler+0x44c>
			usart_prot_handler_status = WAIT_SYNC;
     9e8:	4b14      	ldr	r3, [pc, #80]	; (a3c <nm_usart_protocol_handler+0x378>)
     9ea:	2201      	movs	r2, #1
     9ec:	701a      	strb	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     9ee:	4b18      	ldr	r3, [pc, #96]	; (a50 <nm_usart_protocol_handler+0x38c>)
     9f0:	4a16      	ldr	r2, [pc, #88]	; (a4c <nm_usart_protocol_handler+0x388>)
     9f2:	601a      	str	r2, [r3, #0]
			schedule_rx = 1;
     9f4:	4b17      	ldr	r3, [pc, #92]	; (a54 <nm_usart_protocol_handler+0x390>)
     9f6:	2201      	movs	r2, #1
     9f8:	701a      	strb	r2, [r3, #0]
			schedule_rx_length = 1;
     9fa:	4b12      	ldr	r3, [pc, #72]	; (a44 <nm_usart_protocol_handler+0x380>)
     9fc:	2201      	movs	r2, #1
     9fe:	801a      	strh	r2, [r3, #0]
			usart_tx_buffer[0] = 0xEA;
     a00:	4b15      	ldr	r3, [pc, #84]	; (a58 <nm_usart_protocol_handler+0x394>)
     a02:	22ea      	movs	r2, #234	; 0xea
     a04:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     a06:	4b14      	ldr	r3, [pc, #80]	; (a58 <nm_usart_protocol_handler+0x394>)
     a08:	781b      	ldrb	r3, [r3, #0]
     a0a:	b29a      	uxth	r2, r3
     a0c:	687b      	ldr	r3, [r7, #4]
     a0e:	0011      	movs	r1, r2
     a10:	0018      	movs	r0, r3
     a12:	4b12      	ldr	r3, [pc, #72]	; (a5c <nm_usart_protocol_handler+0x398>)
     a14:	4798      	blx	r3
		}
		break;
     a16:	e07b      	b.n	b10 <nm_usart_protocol_handler+0x44c>
	case COLLECTING_PAYLOAD:
		if((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == payload_length)) {
     a18:	1cfb      	adds	r3, r7, #3
     a1a:	781b      	ldrb	r3, [r3, #0]
     a1c:	2b00      	cmp	r3, #0
     a1e:	d137      	bne.n	a90 <nm_usart_protocol_handler+0x3cc>
     a20:	4b08      	ldr	r3, [pc, #32]	; (a44 <nm_usart_protocol_handler+0x380>)
     a22:	881a      	ldrh	r2, [r3, #0]
     a24:	4b15      	ldr	r3, [pc, #84]	; (a7c <nm_usart_protocol_handler+0x3b8>)
     a26:	881b      	ldrh	r3, [r3, #0]
     a28:	429a      	cmp	r2, r3
     a2a:	d131      	bne.n	a90 <nm_usart_protocol_handler+0x3cc>
			serial_command_pending = 1;
     a2c:	4b15      	ldr	r3, [pc, #84]	; (a84 <nm_usart_protocol_handler+0x3c0>)
     a2e:	2201      	movs	r2, #1
     a30:	701a      	strb	r2, [r3, #0]
			usart_prot_handler_status = PROCESSING;
     a32:	4b02      	ldr	r3, [pc, #8]	; (a3c <nm_usart_protocol_handler+0x378>)
     a34:	2205      	movs	r2, #5
     a36:	701a      	strb	r2, [r3, #0]
			schedule_rx_length = 1;
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
			schedule_rx = 1;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     a38:	e06b      	b.n	b12 <nm_usart_protocol_handler+0x44e>
     a3a:	46c0      	nop			; (mov r8, r8)
     a3c:	20000504 	.word	0x20000504
     a40:	00007a24 	.word	0x00007a24
     a44:	200004f8 	.word	0x200004f8
     a48:	20000500 	.word	0x20000500
     a4c:	200000c4 	.word	0x200000c4
     a50:	200004fc 	.word	0x200004fc
     a54:	200004fa 	.word	0x200004fa
     a58:	200004d4 	.word	0x200004d4
     a5c:	00005045 	.word	0x00005045
     a60:	200000c8 	.word	0x200000c8
     a64:	0000508d 	.word	0x0000508d
     a68:	20000507 	.word	0x20000507
     a6c:	200004e8 	.word	0x200004e8
     a70:	00005119 	.word	0x00005119
     a74:	200004ec 	.word	0x200004ec
     a78:	000068cd 	.word	0x000068cd
     a7c:	20000508 	.word	0x20000508
     a80:	200000d4 	.word	0x200000d4
     a84:	200004e4 	.word	0x200004e4
     a88:	20000506 	.word	0x20000506
     a8c:	20000505 	.word	0x20000505
	case COLLECTING_PAYLOAD:
		if((event_name == USART_PKT_RECEIVED) && (schedule_rx_length == payload_length)) {
			serial_command_pending = 1;
			usart_prot_handler_status = PROCESSING;
		}
		else if(event_name == USART_ERROR_ON_RECEPTION) {
     a90:	1cfb      	adds	r3, r7, #3
     a92:	781b      	ldrb	r3, [r3, #0]
     a94:	2b02      	cmp	r3, #2
     a96:	d11a      	bne.n	ace <nm_usart_protocol_handler+0x40a>
			usart_prot_handler_status = WAIT_SYNC;
     a98:	4b20      	ldr	r3, [pc, #128]	; (b1c <nm_usart_protocol_handler+0x458>)
     a9a:	2201      	movs	r2, #1
     a9c:	701a      	strb	r2, [r3, #0]
			usart_tx_buffer[0] = 0xEA;
     a9e:	4b20      	ldr	r3, [pc, #128]	; (b20 <nm_usart_protocol_handler+0x45c>)
     aa0:	22ea      	movs	r2, #234	; 0xea
     aa2:	701a      	strb	r2, [r3, #0]
			usart_cmd_recv_buffer[0] = 0xFF;
     aa4:	4b1f      	ldr	r3, [pc, #124]	; (b24 <nm_usart_protocol_handler+0x460>)
     aa6:	22ff      	movs	r2, #255	; 0xff
     aa8:	801a      	strh	r2, [r3, #0]
			schedule_rx_length = 1;
     aaa:	4b1f      	ldr	r3, [pc, #124]	; (b28 <nm_usart_protocol_handler+0x464>)
     aac:	2201      	movs	r2, #1
     aae:	801a      	strh	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     ab0:	4b1e      	ldr	r3, [pc, #120]	; (b2c <nm_usart_protocol_handler+0x468>)
     ab2:	4a1c      	ldr	r2, [pc, #112]	; (b24 <nm_usart_protocol_handler+0x460>)
     ab4:	601a      	str	r2, [r3, #0]
			schedule_rx = 1;
     ab6:	4b1e      	ldr	r3, [pc, #120]	; (b30 <nm_usart_protocol_handler+0x46c>)
     ab8:	2201      	movs	r2, #1
     aba:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     abc:	4b18      	ldr	r3, [pc, #96]	; (b20 <nm_usart_protocol_handler+0x45c>)
     abe:	781b      	ldrb	r3, [r3, #0]
     ac0:	b29a      	uxth	r2, r3
     ac2:	687b      	ldr	r3, [r7, #4]
     ac4:	0011      	movs	r1, r2
     ac6:	0018      	movs	r0, r3
     ac8:	4b1a      	ldr	r3, [pc, #104]	; (b34 <nm_usart_protocol_handler+0x470>)
     aca:	4798      	blx	r3
			schedule_rx_length = 1;
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
			schedule_rx = 1;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     acc:	e021      	b.n	b12 <nm_usart_protocol_handler+0x44e>
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
			schedule_rx = 1;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		else {
			usart_prot_handler_status = WAIT_SYNC;
     ace:	4b13      	ldr	r3, [pc, #76]	; (b1c <nm_usart_protocol_handler+0x458>)
     ad0:	2201      	movs	r2, #1
     ad2:	701a      	strb	r2, [r3, #0]
			usart_tx_buffer[0] = 0x5A;
     ad4:	4b12      	ldr	r3, [pc, #72]	; (b20 <nm_usart_protocol_handler+0x45c>)
     ad6:	225a      	movs	r2, #90	; 0x5a
     ad8:	701a      	strb	r2, [r3, #0]
			usart_cmd_recv_buffer[0] = 0xFF;
     ada:	4b12      	ldr	r3, [pc, #72]	; (b24 <nm_usart_protocol_handler+0x460>)
     adc:	22ff      	movs	r2, #255	; 0xff
     ade:	801a      	strh	r2, [r3, #0]
			schedule_rx_length = 1;
     ae0:	4b11      	ldr	r3, [pc, #68]	; (b28 <nm_usart_protocol_handler+0x464>)
     ae2:	2201      	movs	r2, #1
     ae4:	801a      	strh	r2, [r3, #0]
			schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     ae6:	4b11      	ldr	r3, [pc, #68]	; (b2c <nm_usart_protocol_handler+0x468>)
     ae8:	4a0e      	ldr	r2, [pc, #56]	; (b24 <nm_usart_protocol_handler+0x460>)
     aea:	601a      	str	r2, [r3, #0]
			schedule_rx = 1;
     aec:	4b10      	ldr	r3, [pc, #64]	; (b30 <nm_usart_protocol_handler+0x46c>)
     aee:	2201      	movs	r2, #1
     af0:	701a      	strb	r2, [r3, #0]
			usart_write_job(module,usart_tx_buffer[0]);
     af2:	4b0b      	ldr	r3, [pc, #44]	; (b20 <nm_usart_protocol_handler+0x45c>)
     af4:	781b      	ldrb	r3, [r3, #0]
     af6:	b29a      	uxth	r2, r3
     af8:	687b      	ldr	r3, [r7, #4]
     afa:	0011      	movs	r1, r2
     afc:	0018      	movs	r0, r3
     afe:	4b0d      	ldr	r3, [pc, #52]	; (b34 <nm_usart_protocol_handler+0x470>)
     b00:	4798      	blx	r3
		}
		break;
     b02:	e006      	b.n	b12 <nm_usart_protocol_handler+0x44e>
	default:
		usart_prot_handler_status = WAIT_SYNC;		
     b04:	4b05      	ldr	r3, [pc, #20]	; (b1c <nm_usart_protocol_handler+0x458>)
     b06:	2201      	movs	r2, #1
     b08:	701a      	strb	r2, [r3, #0]
		break;
     b0a:	e002      	b.n	b12 <nm_usart_protocol_handler+0x44e>
					schedule_rx_length = 1;
					usart_read_job(module, &usart_cmd_recv_buffer[0]);
				}
			}
		}
			break;
     b0c:	46c0      	nop			; (mov r8, r8)
     b0e:	e000      	b.n	b12 <nm_usart_protocol_handler+0x44e>
			schedule_rx = 1;
			schedule_rx_length = 1;
			usart_tx_buffer[0] = 0xEA;
			usart_write_job(module,usart_tx_buffer[0]);
		}
		break;
     b10:	46c0      	nop			; (mov r8, r8)
		usart_prot_handler_status = WAIT_SYNC;		
		break;
	}
#else
#endif
}
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	46bd      	mov	sp, r7
     b16:	b004      	add	sp, #16
     b18:	bd80      	pop	{r7, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	20000504 	.word	0x20000504
     b20:	200004d4 	.word	0x200004d4
     b24:	200000c4 	.word	0x200000c4
     b28:	200004f8 	.word	0x200004f8
     b2c:	200004fc 	.word	0x200004fc
     b30:	200004fa 	.word	0x200004fa
     b34:	00005045 	.word	0x00005045

00000b38 <configure_console>:
/**
 *  Configure UART console.
 */
static void configure_console(uint32_t baud)
{
     b38:	b580      	push	{r7, lr}
     b3a:	b092      	sub	sp, #72	; 0x48
     b3c:	af00      	add	r7, sp, #0
     b3e:	6078      	str	r0, [r7, #4]
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
     b40:	2308      	movs	r3, #8
     b42:	18fb      	adds	r3, r7, r3
     b44:	0018      	movs	r0, r3
     b46:	4b25      	ldr	r3, [pc, #148]	; (bdc <configure_console+0xa4>)
     b48:	4798      	blx	r3
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
     b4a:	2308      	movs	r3, #8
     b4c:	18fb      	adds	r3, r7, r3
     b4e:	22c0      	movs	r2, #192	; 0xc0
     b50:	0392      	lsls	r2, r2, #14
     b52:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
     b54:	2308      	movs	r3, #8
     b56:	18fb      	adds	r3, r7, r3
     b58:	2201      	movs	r2, #1
     b5a:	4252      	negs	r2, r2
     b5c:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
     b5e:	2308      	movs	r3, #8
     b60:	18fb      	adds	r3, r7, r3
     b62:	2201      	movs	r2, #1
     b64:	4252      	negs	r2, r2
     b66:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
     b68:	2308      	movs	r3, #8
     b6a:	18fb      	adds	r3, r7, r3
     b6c:	4a1c      	ldr	r2, [pc, #112]	; (be0 <configure_console+0xa8>)
     b6e:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
     b70:	2308      	movs	r3, #8
     b72:	18fb      	adds	r3, r7, r3
     b74:	4a1b      	ldr	r2, [pc, #108]	; (be4 <configure_console+0xac>)
     b76:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = baud;
     b78:	2308      	movs	r3, #8
     b7a:	18fb      	adds	r3, r7, r3
     b7c:	687a      	ldr	r2, [r7, #4]
     b7e:	621a      	str	r2, [r3, #32]
	//usart_conf.sample_rate = USART_SAMPLE_RATE_16X_FRACTIONAL;
	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART_MODULE, &usart_conf);
     b80:	2308      	movs	r3, #8
     b82:	18fa      	adds	r2, r7, r3
     b84:	4918      	ldr	r1, [pc, #96]	; (be8 <configure_console+0xb0>)
     b86:	4b19      	ldr	r3, [pc, #100]	; (bec <configure_console+0xb4>)
     b88:	0018      	movs	r0, r3
     b8a:	4b19      	ldr	r3, [pc, #100]	; (bf0 <configure_console+0xb8>)
     b8c:	4798      	blx	r3
	usart_register_callback(&cdc_uart_module,usart_rx_complete_handler,USART_CALLBACK_BUFFER_RECEIVED);
     b8e:	4919      	ldr	r1, [pc, #100]	; (bf4 <configure_console+0xbc>)
     b90:	4b16      	ldr	r3, [pc, #88]	; (bec <configure_console+0xb4>)
     b92:	2201      	movs	r2, #1
     b94:	0018      	movs	r0, r3
     b96:	4b18      	ldr	r3, [pc, #96]	; (bf8 <configure_console+0xc0>)
     b98:	4798      	blx	r3
	usart_register_callback(&cdc_uart_module,usart_tx_complete_handler,USART_CALLBACK_BUFFER_TRANSMITTED);
     b9a:	4918      	ldr	r1, [pc, #96]	; (bfc <configure_console+0xc4>)
     b9c:	4b13      	ldr	r3, [pc, #76]	; (bec <configure_console+0xb4>)
     b9e:	2200      	movs	r2, #0
     ba0:	0018      	movs	r0, r3
     ba2:	4b15      	ldr	r3, [pc, #84]	; (bf8 <configure_console+0xc0>)
     ba4:	4798      	blx	r3
	usart_enable_callback(&cdc_uart_module,USART_CALLBACK_BUFFER_RECEIVED);
     ba6:	4b11      	ldr	r3, [pc, #68]	; (bec <configure_console+0xb4>)
     ba8:	2101      	movs	r1, #1
     baa:	0018      	movs	r0, r3
     bac:	4b14      	ldr	r3, [pc, #80]	; (c00 <configure_console+0xc8>)
     bae:	4798      	blx	r3
	usart_enable_callback(&cdc_uart_module,USART_CALLBACK_BUFFER_TRANSMITTED);
     bb0:	4b0e      	ldr	r3, [pc, #56]	; (bec <configure_console+0xb4>)
     bb2:	2100      	movs	r1, #0
     bb4:	0018      	movs	r0, r3
     bb6:	4b12      	ldr	r3, [pc, #72]	; (c00 <configure_console+0xc8>)
     bb8:	4798      	blx	r3
	//usart_register_callback(&cdc_uart_module,usart_err_handler,USART_CALLBACK_ERROR);
	//usart_enable_callback(&cdc_uart_module,USART_CALLBACK_ERROR);
	usart_enable(&cdc_uart_module);
     bba:	4b0c      	ldr	r3, [pc, #48]	; (bec <configure_console+0xb4>)
     bbc:	0018      	movs	r0, r3
     bbe:	4b11      	ldr	r3, [pc, #68]	; (c04 <configure_console+0xcc>)
     bc0:	4798      	blx	r3
	schedule_rx_length = 1;
     bc2:	4b11      	ldr	r3, [pc, #68]	; (c08 <configure_console+0xd0>)
     bc4:	2201      	movs	r2, #1
     bc6:	801a      	strh	r2, [r3, #0]
	usart_read_job(&cdc_uart_module,&usart_cmd_recv_buffer[0]);
     bc8:	4a10      	ldr	r2, [pc, #64]	; (c0c <configure_console+0xd4>)
     bca:	4b08      	ldr	r3, [pc, #32]	; (bec <configure_console+0xb4>)
     bcc:	0011      	movs	r1, r2
     bce:	0018      	movs	r0, r3
     bd0:	4b0f      	ldr	r3, [pc, #60]	; (c10 <configure_console+0xd8>)
     bd2:	4798      	blx	r3
}
     bd4:	46c0      	nop			; (mov r8, r8)
     bd6:	46bd      	mov	sp, r7
     bd8:	b012      	add	sp, #72	; 0x48
     bda:	bd80      	pop	{r7, pc}
     bdc:	000002ad 	.word	0x000002ad
     be0:	00160002 	.word	0x00160002
     be4:	00150003 	.word	0x00150003
     be8:	42001400 	.word	0x42001400
     bec:	20000090 	.word	0x20000090
     bf0:	000004dd 	.word	0x000004dd
     bf4:	000005c9 	.word	0x000005c9
     bf8:	00004ffd 	.word	0x00004ffd
     bfc:	0000054d 	.word	0x0000054d
     c00:	00000401 	.word	0x00000401
     c04:	0000036d 	.word	0x0000036d
     c08:	200004f8 	.word	0x200004f8
     c0c:	200000c4 	.word	0x200000c4
     c10:	0000508d 	.word	0x0000508d

00000c14 <enter_wifi_firmware_download>:

static sint8 enter_wifi_firmware_download(void)
{
     c14:	b590      	push	{r4, r7, lr}
     c16:	b083      	sub	sp, #12
     c18:	af00      	add	r7, sp, #0
	sint8 ret;
	//uint32 reg_val;
	static uint8_t done_programming = 0;
	//nm_bsp_start_timer(NULL, 500);
	ret = m2m_wifi_download_mode();
     c1a:	1dfc      	adds	r4, r7, #7
     c1c:	4b89      	ldr	r3, [pc, #548]	; (e44 <enter_wifi_firmware_download+0x230>)
     c1e:	4798      	blx	r3
     c20:	0003      	movs	r3, r0
     c22:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)
     c24:	1dfb      	adds	r3, r7, #7
     c26:	781b      	ldrb	r3, [r3, #0]
     c28:	b25b      	sxtb	r3, r3
     c2a:	2b00      	cmp	r3, #0
     c2c:	d100      	bne.n	c30 <enter_wifi_firmware_download+0x1c>
     c2e:	e0fc      	b.n	e2a <enter_wifi_firmware_download+0x216>
	{
		M2M_ERR("Failed to put the WiFi Chip in download mode\n");
     c30:	2376      	movs	r3, #118	; 0x76
     c32:	33ff      	adds	r3, #255	; 0xff
     c34:	001a      	movs	r2, r3
     c36:	4984      	ldr	r1, [pc, #528]	; (e48 <enter_wifi_firmware_download+0x234>)
     c38:	4b84      	ldr	r3, [pc, #528]	; (e4c <enter_wifi_firmware_download+0x238>)
     c3a:	0018      	movs	r0, r3
     c3c:	4b84      	ldr	r3, [pc, #528]	; (e50 <enter_wifi_firmware_download+0x23c>)
     c3e:	4798      	blx	r3
     c40:	4b84      	ldr	r3, [pc, #528]	; (e54 <enter_wifi_firmware_download+0x240>)
     c42:	0018      	movs	r0, r3
     c44:	4b84      	ldr	r3, [pc, #528]	; (e58 <enter_wifi_firmware_download+0x244>)
     c46:	4798      	blx	r3
     c48:	200d      	movs	r0, #13
     c4a:	4b84      	ldr	r3, [pc, #528]	; (e5c <enter_wifi_firmware_download+0x248>)
     c4c:	4798      	blx	r3
		return M2M_ERR_INIT;
     c4e:	2305      	movs	r3, #5
     c50:	425b      	negs	r3, r3
     c52:	e0f2      	b.n	e3a <enter_wifi_firmware_download+0x226>
	}
	//Program the WiFi chip here
	while(!done_programming) {
		if(usart_pkt_received) {
     c54:	4b82      	ldr	r3, [pc, #520]	; (e60 <enter_wifi_firmware_download+0x24c>)
     c56:	781b      	ldrb	r3, [r3, #0]
     c58:	2b00      	cmp	r3, #0
     c5a:	d007      	beq.n	c6c <enter_wifi_firmware_download+0x58>
			usart_pkt_received = 0;
     c5c:	4b80      	ldr	r3, [pc, #512]	; (e60 <enter_wifi_firmware_download+0x24c>)
     c5e:	2200      	movs	r2, #0
     c60:	701a      	strb	r2, [r3, #0]
			nm_usart_protocol_handler(&cdc_uart_module,USART_PKT_RECEIVED);
     c62:	4b80      	ldr	r3, [pc, #512]	; (e64 <enter_wifi_firmware_download+0x250>)
     c64:	2100      	movs	r1, #0
     c66:	0018      	movs	r0, r3
     c68:	4b7f      	ldr	r3, [pc, #508]	; (e68 <enter_wifi_firmware_download+0x254>)
     c6a:	4798      	blx	r3
			//usart_write_job(&cdc_uart_module,0xAC);
		}
		if(usart_err_on_reception) {
     c6c:	4b7f      	ldr	r3, [pc, #508]	; (e6c <enter_wifi_firmware_download+0x258>)
     c6e:	781b      	ldrb	r3, [r3, #0]
     c70:	2b00      	cmp	r3, #0
     c72:	d007      	beq.n	c84 <enter_wifi_firmware_download+0x70>
			usart_err_on_reception = 0;
     c74:	4b7d      	ldr	r3, [pc, #500]	; (e6c <enter_wifi_firmware_download+0x258>)
     c76:	2200      	movs	r2, #0
     c78:	701a      	strb	r2, [r3, #0]
			nm_usart_protocol_handler(&cdc_uart_module,USART_ERROR_ON_RECEPTION);
     c7a:	4b7a      	ldr	r3, [pc, #488]	; (e64 <enter_wifi_firmware_download+0x250>)
     c7c:	2102      	movs	r1, #2
     c7e:	0018      	movs	r0, r3
     c80:	4b79      	ldr	r3, [pc, #484]	; (e68 <enter_wifi_firmware_download+0x254>)
     c82:	4798      	blx	r3
		}
		if(serial_command_pending && (usart_prot_handler_status == PROCESSING)) {
     c84:	4b7a      	ldr	r3, [pc, #488]	; (e70 <enter_wifi_firmware_download+0x25c>)
     c86:	781b      	ldrb	r3, [r3, #0]
     c88:	2b00      	cmp	r3, #0
     c8a:	d100      	bne.n	c8e <enter_wifi_firmware_download+0x7a>
     c8c:	e0cd      	b.n	e2a <enter_wifi_firmware_download+0x216>
     c8e:	4b79      	ldr	r3, [pc, #484]	; (e74 <enter_wifi_firmware_download+0x260>)
     c90:	781b      	ldrb	r3, [r3, #0]
     c92:	2b05      	cmp	r3, #5
     c94:	d000      	beq.n	c98 <enter_wifi_firmware_download+0x84>
     c96:	e0c8      	b.n	e2a <enter_wifi_firmware_download+0x216>
			uint32_t temp;
			switch((uart_cmd.cmd) & 0xFF) {
     c98:	4b77      	ldr	r3, [pc, #476]	; (e78 <enter_wifi_firmware_download+0x264>)
     c9a:	681b      	ldr	r3, [r3, #0]
     c9c:	22ff      	movs	r2, #255	; 0xff
     c9e:	4013      	ands	r3, r2
     ca0:	2b0a      	cmp	r3, #10
     ca2:	d900      	bls.n	ca6 <enter_wifi_firmware_download+0x92>
     ca4:	e0bd      	b.n	e22 <enter_wifi_firmware_download+0x20e>
     ca6:	009a      	lsls	r2, r3, #2
     ca8:	4b74      	ldr	r3, [pc, #464]	; (e7c <enter_wifi_firmware_download+0x268>)
     caa:	18d3      	adds	r3, r2, r3
     cac:	681b      	ldr	r3, [r3, #0]
     cae:	469f      	mov	pc, r3
				//Forward it to SERCOM0 SPI
				case READ_REG:
					//Transalate it to SPI Read register
					temp = nm_read_reg(uart_cmd.addr);
     cb0:	4b71      	ldr	r3, [pc, #452]	; (e78 <enter_wifi_firmware_download+0x264>)
     cb2:	685b      	ldr	r3, [r3, #4]
     cb4:	0018      	movs	r0, r3
     cb6:	4b72      	ldr	r3, [pc, #456]	; (e80 <enter_wifi_firmware_download+0x26c>)
     cb8:	4798      	blx	r3
     cba:	0003      	movs	r3, r0
     cbc:	603b      	str	r3, [r7, #0]
					usart_tx_buffer[0] = (uint8)(temp >> 0);
     cbe:	683b      	ldr	r3, [r7, #0]
     cc0:	b2da      	uxtb	r2, r3
     cc2:	4b70      	ldr	r3, [pc, #448]	; (e84 <enter_wifi_firmware_download+0x270>)
     cc4:	701a      	strb	r2, [r3, #0]
					usart_tx_buffer[1] = (uint8)(temp >> 8);
     cc6:	683b      	ldr	r3, [r7, #0]
     cc8:	0a1b      	lsrs	r3, r3, #8
     cca:	b2da      	uxtb	r2, r3
     ccc:	4b6d      	ldr	r3, [pc, #436]	; (e84 <enter_wifi_firmware_download+0x270>)
     cce:	705a      	strb	r2, [r3, #1]
					usart_tx_buffer[2] = (uint8)(temp >> 16);
     cd0:	683b      	ldr	r3, [r7, #0]
     cd2:	0c1b      	lsrs	r3, r3, #16
     cd4:	b2da      	uxtb	r2, r3
     cd6:	4b6b      	ldr	r3, [pc, #428]	; (e84 <enter_wifi_firmware_download+0x270>)
     cd8:	709a      	strb	r2, [r3, #2]
					usart_tx_buffer[3] = (uint8)(temp >> 24);
     cda:	683b      	ldr	r3, [r7, #0]
     cdc:	0e1b      	lsrs	r3, r3, #24
     cde:	b2da      	uxtb	r2, r3
     ce0:	4b68      	ldr	r3, [pc, #416]	; (e84 <enter_wifi_firmware_download+0x270>)
     ce2:	70da      	strb	r2, [r3, #3]
					//usart_write_buffer_wait(&cdc_uart_module,&reg_val,sizeof(reg_val));
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     ce4:	4b68      	ldr	r3, [pc, #416]	; (e88 <enter_wifi_firmware_download+0x274>)
     ce6:	4a69      	ldr	r2, [pc, #420]	; (e8c <enter_wifi_firmware_download+0x278>)
     ce8:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     cea:	4b69      	ldr	r3, [pc, #420]	; (e90 <enter_wifi_firmware_download+0x27c>)
     cec:	2201      	movs	r2, #1
     cee:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     cf0:	4b68      	ldr	r3, [pc, #416]	; (e94 <enter_wifi_firmware_download+0x280>)
     cf2:	2201      	movs	r2, #1
     cf4:	701a      	strb	r2, [r3, #0]
					//change_state = 1;
					//new_state = WAIT_SYNC;
					usart_prot_handler_status = WAIT_SYNC;
     cf6:	4b5f      	ldr	r3, [pc, #380]	; (e74 <enter_wifi_firmware_download+0x260>)
     cf8:	2201      	movs	r2, #1
     cfa:	701a      	strb	r2, [r3, #0]
					nm_usart_send_regval(&cdc_uart_module,&usart_tx_buffer[0],sizeof(uint32_t));
     cfc:	4961      	ldr	r1, [pc, #388]	; (e84 <enter_wifi_firmware_download+0x270>)
     cfe:	4b59      	ldr	r3, [pc, #356]	; (e64 <enter_wifi_firmware_download+0x250>)
     d00:	2204      	movs	r2, #4
     d02:	0018      	movs	r0, r3
     d04:	4b64      	ldr	r3, [pc, #400]	; (e98 <enter_wifi_firmware_download+0x284>)
     d06:	4798      	blx	r3
					break;
     d08:	e08c      	b.n	e24 <enter_wifi_firmware_download+0x210>
				case WRITE_REG:
					//Transalate it to SPI Write register
					nm_write_reg(uart_cmd.addr,uart_cmd.val);
     d0a:	4b5b      	ldr	r3, [pc, #364]	; (e78 <enter_wifi_firmware_download+0x264>)
     d0c:	685a      	ldr	r2, [r3, #4]
     d0e:	4b5a      	ldr	r3, [pc, #360]	; (e78 <enter_wifi_firmware_download+0x264>)
     d10:	689b      	ldr	r3, [r3, #8]
     d12:	0019      	movs	r1, r3
     d14:	0010      	movs	r0, r2
     d16:	4b61      	ldr	r3, [pc, #388]	; (e9c <enter_wifi_firmware_download+0x288>)
     d18:	4798      	blx	r3
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     d1a:	4b5b      	ldr	r3, [pc, #364]	; (e88 <enter_wifi_firmware_download+0x274>)
     d1c:	4a5b      	ldr	r2, [pc, #364]	; (e8c <enter_wifi_firmware_download+0x278>)
     d1e:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     d20:	4b5b      	ldr	r3, [pc, #364]	; (e90 <enter_wifi_firmware_download+0x27c>)
     d22:	2201      	movs	r2, #1
     d24:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     d26:	4b5b      	ldr	r3, [pc, #364]	; (e94 <enter_wifi_firmware_download+0x280>)
     d28:	2201      	movs	r2, #1
     d2a:	701a      	strb	r2, [r3, #0]
					usart_tx_buffer[0] = 0xAC;
     d2c:	4b55      	ldr	r3, [pc, #340]	; (e84 <enter_wifi_firmware_download+0x270>)
     d2e:	22ac      	movs	r2, #172	; 0xac
     d30:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     d32:	4b50      	ldr	r3, [pc, #320]	; (e74 <enter_wifi_firmware_download+0x260>)
     d34:	2201      	movs	r2, #1
     d36:	701a      	strb	r2, [r3, #0]
					usart_write_job(&cdc_uart_module,usart_tx_buffer[0]);
     d38:	4b52      	ldr	r3, [pc, #328]	; (e84 <enter_wifi_firmware_download+0x270>)
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	b29a      	uxth	r2, r3
     d3e:	4b49      	ldr	r3, [pc, #292]	; (e64 <enter_wifi_firmware_download+0x250>)
     d40:	0011      	movs	r1, r2
     d42:	0018      	movs	r0, r3
     d44:	4b56      	ldr	r3, [pc, #344]	; (ea0 <enter_wifi_firmware_download+0x28c>)
     d46:	4798      	blx	r3
					break;
     d48:	e06c      	b.n	e24 <enter_wifi_firmware_download+0x210>
				case READ_BUFF:
				//Transalate it to SPI Read buffer
					nm_read_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0],((uart_cmd.cmd >> 16) & 0xFFFF));
     d4a:	4b4b      	ldr	r3, [pc, #300]	; (e78 <enter_wifi_firmware_download+0x264>)
     d4c:	6858      	ldr	r0, [r3, #4]
     d4e:	4b4a      	ldr	r3, [pc, #296]	; (e78 <enter_wifi_firmware_download+0x264>)
     d50:	681b      	ldr	r3, [r3, #0]
     d52:	0c1a      	lsrs	r2, r3, #16
     d54:	4b53      	ldr	r3, [pc, #332]	; (ea4 <enter_wifi_firmware_download+0x290>)
     d56:	0019      	movs	r1, r3
     d58:	4b53      	ldr	r3, [pc, #332]	; (ea8 <enter_wifi_firmware_download+0x294>)
     d5a:	4798      	blx	r3
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     d5c:	4b4a      	ldr	r3, [pc, #296]	; (e88 <enter_wifi_firmware_download+0x274>)
     d5e:	4a4b      	ldr	r2, [pc, #300]	; (e8c <enter_wifi_firmware_download+0x278>)
     d60:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     d62:	4b4b      	ldr	r3, [pc, #300]	; (e90 <enter_wifi_firmware_download+0x27c>)
     d64:	2201      	movs	r2, #1
     d66:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     d68:	4b4a      	ldr	r3, [pc, #296]	; (e94 <enter_wifi_firmware_download+0x280>)
     d6a:	2201      	movs	r2, #1
     d6c:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     d6e:	4b41      	ldr	r3, [pc, #260]	; (e74 <enter_wifi_firmware_download+0x260>)
     d70:	2201      	movs	r2, #1
     d72:	701a      	strb	r2, [r3, #0]
					usart_write_buffer_job(&cdc_uart_module, (uint8 *)&usart_payload_buffer[0],((uart_cmd.cmd >> 16) & 0xFFFF));
     d74:	4b40      	ldr	r3, [pc, #256]	; (e78 <enter_wifi_firmware_download+0x264>)
     d76:	681b      	ldr	r3, [r3, #0]
     d78:	0c1b      	lsrs	r3, r3, #16
     d7a:	b29a      	uxth	r2, r3
     d7c:	4949      	ldr	r1, [pc, #292]	; (ea4 <enter_wifi_firmware_download+0x290>)
     d7e:	4b39      	ldr	r3, [pc, #228]	; (e64 <enter_wifi_firmware_download+0x250>)
     d80:	0018      	movs	r0, r3
     d82:	4b4a      	ldr	r3, [pc, #296]	; (eac <enter_wifi_firmware_download+0x298>)
     d84:	4798      	blx	r3
					break;
     d86:	e04d      	b.n	e24 <enter_wifi_firmware_download+0x210>
				case WRITE_BUFF:
					//Transalate it to SPI Write buffer
					nm_write_block(uart_cmd.addr, (uint8 *)&usart_payload_buffer[0],((uart_cmd.cmd >> 16) & 0xFFFF));
     d88:	4b3b      	ldr	r3, [pc, #236]	; (e78 <enter_wifi_firmware_download+0x264>)
     d8a:	6858      	ldr	r0, [r3, #4]
     d8c:	4b3a      	ldr	r3, [pc, #232]	; (e78 <enter_wifi_firmware_download+0x264>)
     d8e:	681b      	ldr	r3, [r3, #0]
     d90:	0c1a      	lsrs	r2, r3, #16
     d92:	4b44      	ldr	r3, [pc, #272]	; (ea4 <enter_wifi_firmware_download+0x290>)
     d94:	0019      	movs	r1, r3
     d96:	4b46      	ldr	r3, [pc, #280]	; (eb0 <enter_wifi_firmware_download+0x29c>)
     d98:	4798      	blx	r3
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     d9a:	4b3b      	ldr	r3, [pc, #236]	; (e88 <enter_wifi_firmware_download+0x274>)
     d9c:	4a3b      	ldr	r2, [pc, #236]	; (e8c <enter_wifi_firmware_download+0x278>)
     d9e:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     da0:	4b3b      	ldr	r3, [pc, #236]	; (e90 <enter_wifi_firmware_download+0x27c>)
     da2:	2201      	movs	r2, #1
     da4:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     da6:	4b3b      	ldr	r3, [pc, #236]	; (e94 <enter_wifi_firmware_download+0x280>)
     da8:	2201      	movs	r2, #1
     daa:	701a      	strb	r2, [r3, #0]
					usart_tx_buffer[0] = 0xAC;
     dac:	4b35      	ldr	r3, [pc, #212]	; (e84 <enter_wifi_firmware_download+0x270>)
     dae:	22ac      	movs	r2, #172	; 0xac
     db0:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     db2:	4b30      	ldr	r3, [pc, #192]	; (e74 <enter_wifi_firmware_download+0x260>)
     db4:	2201      	movs	r2, #1
     db6:	701a      	strb	r2, [r3, #0]
					usart_write_job(&cdc_uart_module,usart_tx_buffer[0]);
     db8:	4b32      	ldr	r3, [pc, #200]	; (e84 <enter_wifi_firmware_download+0x270>)
     dba:	781b      	ldrb	r3, [r3, #0]
     dbc:	b29a      	uxth	r2, r3
     dbe:	4b29      	ldr	r3, [pc, #164]	; (e64 <enter_wifi_firmware_download+0x250>)
     dc0:	0011      	movs	r1, r2
     dc2:	0018      	movs	r0, r3
     dc4:	4b36      	ldr	r3, [pc, #216]	; (ea0 <enter_wifi_firmware_download+0x28c>)
     dc6:	4798      	blx	r3
					break;
     dc8:	e02c      	b.n	e24 <enter_wifi_firmware_download+0x210>
				case RECONFIGURE_UART:
					// Send the ack back
					usart_prot_handler_status = WAIT_SYNC;
     dca:	4b2a      	ldr	r3, [pc, #168]	; (e74 <enter_wifi_firmware_download+0x260>)
     dcc:	2201      	movs	r2, #1
     dce:	701a      	strb	r2, [r3, #0]
					uart_reconfigure = 1;
     dd0:	4b38      	ldr	r3, [pc, #224]	; (eb4 <enter_wifi_firmware_download+0x2a0>)
     dd2:	2201      	movs	r2, #1
     dd4:	701a      	strb	r2, [r3, #0]
					usart_disable(&cdc_uart_module);
     dd6:	4b23      	ldr	r3, [pc, #140]	; (e64 <enter_wifi_firmware_download+0x250>)
     dd8:	0018      	movs	r0, r3
     dda:	4b37      	ldr	r3, [pc, #220]	; (eb8 <enter_wifi_firmware_download+0x2a4>)
     ddc:	4798      	blx	r3
					configure_console(uart_cmd.val);
     dde:	4b26      	ldr	r3, [pc, #152]	; (e78 <enter_wifi_firmware_download+0x264>)
     de0:	689b      	ldr	r3, [r3, #8]
     de2:	0018      	movs	r0, r3
     de4:	4b35      	ldr	r3, [pc, #212]	; (ebc <enter_wifi_firmware_download+0x2a8>)
     de6:	4798      	blx	r3
					break;
     de8:	e01c      	b.n	e24 <enter_wifi_firmware_download+0x210>
				case 10:
				//GPIO read command
					usart_tx_buffer[0] = port_pin_get_input_level(PIN_PB09);
     dea:	2029      	movs	r0, #41	; 0x29
     dec:	4b34      	ldr	r3, [pc, #208]	; (ec0 <enter_wifi_firmware_download+0x2ac>)
     dee:	4798      	blx	r3
     df0:	0003      	movs	r3, r0
     df2:	001a      	movs	r2, r3
     df4:	4b23      	ldr	r3, [pc, #140]	; (e84 <enter_wifi_firmware_download+0x270>)
     df6:	701a      	strb	r2, [r3, #0]
					//usart_tx_buffer[0]= port_pin_get_output_level(PIN_PB09);
					schedule_rx_buffer = &usart_cmd_recv_buffer[0];
     df8:	4b23      	ldr	r3, [pc, #140]	; (e88 <enter_wifi_firmware_download+0x274>)
     dfa:	4a24      	ldr	r2, [pc, #144]	; (e8c <enter_wifi_firmware_download+0x278>)
     dfc:	601a      	str	r2, [r3, #0]
					schedule_rx_length = 1;
     dfe:	4b24      	ldr	r3, [pc, #144]	; (e90 <enter_wifi_firmware_download+0x27c>)
     e00:	2201      	movs	r2, #1
     e02:	801a      	strh	r2, [r3, #0]
					schedule_rx = 1;
     e04:	4b23      	ldr	r3, [pc, #140]	; (e94 <enter_wifi_firmware_download+0x280>)
     e06:	2201      	movs	r2, #1
     e08:	701a      	strb	r2, [r3, #0]
					usart_prot_handler_status = WAIT_SYNC;
     e0a:	4b1a      	ldr	r3, [pc, #104]	; (e74 <enter_wifi_firmware_download+0x260>)
     e0c:	2201      	movs	r2, #1
     e0e:	701a      	strb	r2, [r3, #0]
					usart_write_job(&cdc_uart_module,usart_tx_buffer[0]);
     e10:	4b1c      	ldr	r3, [pc, #112]	; (e84 <enter_wifi_firmware_download+0x270>)
     e12:	781b      	ldrb	r3, [r3, #0]
     e14:	b29a      	uxth	r2, r3
     e16:	4b13      	ldr	r3, [pc, #76]	; (e64 <enter_wifi_firmware_download+0x250>)
     e18:	0011      	movs	r1, r2
     e1a:	0018      	movs	r0, r3
     e1c:	4b20      	ldr	r3, [pc, #128]	; (ea0 <enter_wifi_firmware_download+0x28c>)
     e1e:	4798      	blx	r3
					break;
     e20:	e000      	b.n	e24 <enter_wifi_firmware_download+0x210>
				default:
					break;
     e22:	46c0      	nop			; (mov r8, r8)
			}
			serial_command_pending = 0;
     e24:	4b12      	ldr	r3, [pc, #72]	; (e70 <enter_wifi_firmware_download+0x25c>)
     e26:	2200      	movs	r2, #0
     e28:	701a      	strb	r2, [r3, #0]
	{
		M2M_ERR("Failed to put the WiFi Chip in download mode\n");
		return M2M_ERR_INIT;
	}
	//Program the WiFi chip here
	while(!done_programming) {
     e2a:	4b26      	ldr	r3, [pc, #152]	; (ec4 <enter_wifi_firmware_download+0x2b0>)
     e2c:	781b      	ldrb	r3, [r3, #0]
     e2e:	2b00      	cmp	r3, #0
     e30:	d100      	bne.n	e34 <enter_wifi_firmware_download+0x220>
     e32:	e70f      	b.n	c54 <enter_wifi_firmware_download+0x40>
					break;
			}
			serial_command_pending = 0;
		}
	}
	return ret;
     e34:	1dfb      	adds	r3, r7, #7
     e36:	781b      	ldrb	r3, [r3, #0]
     e38:	b25b      	sxtb	r3, r3
}
     e3a:	0018      	movs	r0, r3
     e3c:	46bd      	mov	sp, r7
     e3e:	b003      	add	sp, #12
     e40:	bd90      	pop	{r4, r7, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	000017dd 	.word	0x000017dd
     e48:	00007aa8 	.word	0x00007aa8
     e4c:	00007a38 	.word	0x00007a38
     e50:	000068f1 	.word	0x000068f1
     e54:	00007a4c 	.word	0x00007a4c
     e58:	00006a11 	.word	0x00006a11
     e5c:	00006925 	.word	0x00006925
     e60:	200004e5 	.word	0x200004e5
     e64:	20000090 	.word	0x20000090
     e68:	000006c5 	.word	0x000006c5
     e6c:	200004e6 	.word	0x200004e6
     e70:	200004e4 	.word	0x200004e4
     e74:	20000504 	.word	0x20000504
     e78:	200004ec 	.word	0x200004ec
     e7c:	00007a7c 	.word	0x00007a7c
     e80:	000019d9 	.word	0x000019d9
     e84:	200004d4 	.word	0x200004d4
     e88:	200004fc 	.word	0x200004fc
     e8c:	200000c4 	.word	0x200000c4
     e90:	200004f8 	.word	0x200004f8
     e94:	200004fa 	.word	0x200004fa
     e98:	0000061d 	.word	0x0000061d
     e9c:	00001a1d 	.word	0x00001a1d
     ea0:	00005045 	.word	0x00005045
     ea4:	200000d4 	.word	0x200000d4
     ea8:	00001a6d 	.word	0x00001a6d
     eac:	000050c1 	.word	0x000050c1
     eb0:	00001b65 	.word	0x00001b65
     eb4:	20000507 	.word	0x20000507
     eb8:	000003b5 	.word	0x000003b5
     ebc:	00000b39 	.word	0x00000b39
     ec0:	00000225 	.word	0x00000225
     ec4:	2000050a 	.word	0x2000050a

00000ec8 <main>:


int main (void)
{
     ec8:	b590      	push	{r4, r7, lr}
     eca:	b085      	sub	sp, #20
     ecc:	af00      	add	r7, sp, #0

	sint8 ret = 0;
     ece:	230f      	movs	r3, #15
     ed0:	18fb      	adds	r3, r7, r3
     ed2:	2200      	movs	r2, #0
     ed4:	701a      	strb	r2, [r3, #0]
	system_init();
     ed6:	4b12      	ldr	r3, [pc, #72]	; (f20 <main+0x58>)
     ed8:	4798      	blx	r3
	/* Initialize the UART console. */
	configure_console(CONF_STDIO_BAUDRATE);
     eda:	23e1      	movs	r3, #225	; 0xe1
     edc:	025b      	lsls	r3, r3, #9
     ede:	0018      	movs	r0, r3
     ee0:	4b10      	ldr	r3, [pc, #64]	; (f24 <main+0x5c>)
     ee2:	4798      	blx	r3
	/* Output example information */

	
	while(1)
	{
		nm_bsp_init();
     ee4:	4b10      	ldr	r3, [pc, #64]	; (f28 <main+0x60>)
     ee6:	4798      	blx	r3
			
			struct extint_chan_conf config_extint_chan;

			//gpfIsr = pfIsr;

			extint_chan_get_config_defaults(&config_extint_chan);
     ee8:	003b      	movs	r3, r7
     eea:	0018      	movs	r0, r3
     eec:	4b0f      	ldr	r3, [pc, #60]	; (f2c <main+0x64>)
     eee:	4798      	blx	r3
			config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     ef0:	003b      	movs	r3, r7
     ef2:	2229      	movs	r2, #41	; 0x29
     ef4:	601a      	str	r2, [r3, #0]
			config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     ef6:	003b      	movs	r3, r7
     ef8:	2200      	movs	r2, #0
     efa:	605a      	str	r2, [r3, #4]
			config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     efc:	003b      	movs	r3, r7
     efe:	2201      	movs	r2, #1
     f00:	721a      	strb	r2, [r3, #8]
			config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     f02:	003b      	movs	r3, r7
     f04:	2202      	movs	r2, #2
     f06:	72da      	strb	r2, [r3, #11]

			extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     f08:	003b      	movs	r3, r7
     f0a:	0019      	movs	r1, r3
     f0c:	2009      	movs	r0, #9
     f0e:	4b08      	ldr	r3, [pc, #32]	; (f30 <main+0x68>)
     f10:	4798      	blx	r3
		}
		//nm_bsp_sleep(500);
		//system_interrupt_enable_global();
		ret = enter_wifi_firmware_download();
     f12:	230f      	movs	r3, #15
     f14:	18fc      	adds	r4, r7, r3
     f16:	4b07      	ldr	r3, [pc, #28]	; (f34 <main+0x6c>)
     f18:	4798      	blx	r3
     f1a:	0003      	movs	r3, r0
     f1c:	7023      	strb	r3, [r4, #0]
	}
     f1e:	e7e1      	b.n	ee4 <main+0x1c>
     f20:	00006355 	.word	0x00006355
     f24:	00000b39 	.word	0x00000b39
     f28:	00001095 	.word	0x00001095
     f2c:	000001cd 	.word	0x000001cd
     f30:	000033c9 	.word	0x000033c9
     f34:	00000c15 	.word	0x00000c15

00000f38 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     f38:	b580      	push	{r7, lr}
     f3a:	b084      	sub	sp, #16
     f3c:	af00      	add	r7, sp, #0
     f3e:	0002      	movs	r2, r0
     f40:	1dfb      	adds	r3, r7, #7
     f42:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     f44:	230f      	movs	r3, #15
     f46:	18fb      	adds	r3, r7, r3
     f48:	1dfa      	adds	r2, r7, #7
     f4a:	7812      	ldrb	r2, [r2, #0]
     f4c:	09d2      	lsrs	r2, r2, #7
     f4e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     f50:	230e      	movs	r3, #14
     f52:	18fb      	adds	r3, r7, r3
     f54:	1dfa      	adds	r2, r7, #7
     f56:	7812      	ldrb	r2, [r2, #0]
     f58:	0952      	lsrs	r2, r2, #5
     f5a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     f5c:	4b0d      	ldr	r3, [pc, #52]	; (f94 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     f5e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     f60:	230f      	movs	r3, #15
     f62:	18fb      	adds	r3, r7, r3
     f64:	781b      	ldrb	r3, [r3, #0]
     f66:	2b00      	cmp	r3, #0
     f68:	d10f      	bne.n	f8a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     f6a:	230f      	movs	r3, #15
     f6c:	18fb      	adds	r3, r7, r3
     f6e:	781b      	ldrb	r3, [r3, #0]
     f70:	009b      	lsls	r3, r3, #2
     f72:	2210      	movs	r2, #16
     f74:	4694      	mov	ip, r2
     f76:	44bc      	add	ip, r7
     f78:	4463      	add	r3, ip
     f7a:	3b08      	subs	r3, #8
     f7c:	681a      	ldr	r2, [r3, #0]
     f7e:	230e      	movs	r3, #14
     f80:	18fb      	adds	r3, r7, r3
     f82:	781b      	ldrb	r3, [r3, #0]
     f84:	01db      	lsls	r3, r3, #7
     f86:	18d3      	adds	r3, r2, r3
     f88:	e000      	b.n	f8c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     f8a:	2300      	movs	r3, #0
	}
}
     f8c:	0018      	movs	r0, r3
     f8e:	46bd      	mov	sp, r7
     f90:	b004      	add	sp, #16
     f92:	bd80      	pop	{r7, pc}
     f94:	41004400 	.word	0x41004400

00000f98 <system_interrupt_enable_global>:
 * \brief Enables global interrupts
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     f98:	b580      	push	{r7, lr}
     f9a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     f9c:	4b04      	ldr	r3, [pc, #16]	; (fb0 <system_interrupt_enable_global+0x18>)
     f9e:	2201      	movs	r2, #1
     fa0:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     fa2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     fa6:	b662      	cpsie	i
}
     fa8:	46c0      	nop			; (mov r8, r8)
     faa:	46bd      	mov	sp, r7
     fac:	bd80      	pop	{r7, pc}
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	2000000c 	.word	0x2000000c

00000fb4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     fb4:	b580      	push	{r7, lr}
     fb6:	b082      	sub	sp, #8
     fb8:	af00      	add	r7, sp, #0
     fba:	0002      	movs	r2, r0
     fbc:	1dfb      	adds	r3, r7, #7
     fbe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     fc0:	1dfb      	adds	r3, r7, #7
     fc2:	781b      	ldrb	r3, [r3, #0]
     fc4:	0018      	movs	r0, r3
     fc6:	4b03      	ldr	r3, [pc, #12]	; (fd4 <port_get_group_from_gpio_pin+0x20>)
     fc8:	4798      	blx	r3
     fca:	0003      	movs	r3, r0
}
     fcc:	0018      	movs	r0, r3
     fce:	46bd      	mov	sp, r7
     fd0:	b002      	add	sp, #8
     fd2:	bd80      	pop	{r7, pc}
     fd4:	00000f39 	.word	0x00000f39

00000fd8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     fd8:	b580      	push	{r7, lr}
     fda:	b082      	sub	sp, #8
     fdc:	af00      	add	r7, sp, #0
     fde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	2200      	movs	r2, #0
     fe4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     fe6:	687b      	ldr	r3, [r7, #4]
     fe8:	2201      	movs	r2, #1
     fea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     fec:	687b      	ldr	r3, [r7, #4]
     fee:	2200      	movs	r2, #0
     ff0:	709a      	strb	r2, [r3, #2]
}
     ff2:	46c0      	nop			; (mov r8, r8)
     ff4:	46bd      	mov	sp, r7
     ff6:	b002      	add	sp, #8
     ff8:	bd80      	pop	{r7, pc}
     ffa:	46c0      	nop			; (mov r8, r8)

00000ffc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     ffc:	b580      	push	{r7, lr}
     ffe:	b084      	sub	sp, #16
    1000:	af00      	add	r7, sp, #0
    1002:	0002      	movs	r2, r0
    1004:	1dfb      	adds	r3, r7, #7
    1006:	701a      	strb	r2, [r3, #0]
    1008:	1dbb      	adds	r3, r7, #6
    100a:	1c0a      	adds	r2, r1, #0
    100c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    100e:	1dfb      	adds	r3, r7, #7
    1010:	781b      	ldrb	r3, [r3, #0]
    1012:	0018      	movs	r0, r3
    1014:	4b0d      	ldr	r3, [pc, #52]	; (104c <port_pin_set_output_level+0x50>)
    1016:	4798      	blx	r3
    1018:	0003      	movs	r3, r0
    101a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    101c:	1dfb      	adds	r3, r7, #7
    101e:	781b      	ldrb	r3, [r3, #0]
    1020:	221f      	movs	r2, #31
    1022:	4013      	ands	r3, r2
    1024:	2201      	movs	r2, #1
    1026:	409a      	lsls	r2, r3
    1028:	0013      	movs	r3, r2
    102a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    102c:	1dbb      	adds	r3, r7, #6
    102e:	781b      	ldrb	r3, [r3, #0]
    1030:	2b00      	cmp	r3, #0
    1032:	d003      	beq.n	103c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1034:	68fb      	ldr	r3, [r7, #12]
    1036:	68ba      	ldr	r2, [r7, #8]
    1038:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    103a:	e002      	b.n	1042 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    103c:	68fb      	ldr	r3, [r7, #12]
    103e:	68ba      	ldr	r2, [r7, #8]
    1040:	615a      	str	r2, [r3, #20]
	}
}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	46bd      	mov	sp, r7
    1046:	b004      	add	sp, #16
    1048:	bd80      	pop	{r7, pc}
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	00000fb5 	.word	0x00000fb5

00001050 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    1050:	b580      	push	{r7, lr}
    1052:	b082      	sub	sp, #8
    1054:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    1056:	1d3b      	adds	r3, r7, #4
    1058:	0018      	movs	r0, r3
    105a:	4b0c      	ldr	r3, [pc, #48]	; (108c <init_chip_pins+0x3c>)
    105c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    105e:	1d3b      	adds	r3, r7, #4
    1060:	2201      	movs	r2, #1
    1062:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    1064:	1d3b      	adds	r3, r7, #4
    1066:	0019      	movs	r1, r3
    1068:	201b      	movs	r0, #27
    106a:	4b09      	ldr	r3, [pc, #36]	; (1090 <init_chip_pins+0x40>)
    106c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    106e:	1d3b      	adds	r3, r7, #4
    1070:	0019      	movs	r1, r3
    1072:	201c      	movs	r0, #28
    1074:	4b06      	ldr	r3, [pc, #24]	; (1090 <init_chip_pins+0x40>)
    1076:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    1078:	1d3b      	adds	r3, r7, #4
    107a:	0019      	movs	r1, r3
    107c:	2028      	movs	r0, #40	; 0x28
    107e:	4b04      	ldr	r3, [pc, #16]	; (1090 <init_chip_pins+0x40>)
    1080:	4798      	blx	r3
}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	46bd      	mov	sp, r7
    1086:	b002      	add	sp, #8
    1088:	bd80      	pop	{r7, pc}
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	00000fd9 	.word	0x00000fd9
    1090:	00003625 	.word	0x00003625

00001094 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    1094:	b580      	push	{r7, lr}
    1096:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    1098:	4b0c      	ldr	r3, [pc, #48]	; (10cc <nm_bsp_init+0x38>)
    109a:	2200      	movs	r2, #0
    109c:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    109e:	4b0c      	ldr	r3, [pc, #48]	; (10d0 <nm_bsp_init+0x3c>)
    10a0:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    10a2:	4b0c      	ldr	r3, [pc, #48]	; (10d4 <nm_bsp_init+0x40>)
    10a4:	681b      	ldr	r3, [r3, #0]
    10a6:	2201      	movs	r2, #1
    10a8:	4013      	ands	r3, r2
    10aa:	d004      	beq.n	10b6 <nm_bsp_init+0x22>
    10ac:	4b09      	ldr	r3, [pc, #36]	; (10d4 <nm_bsp_init+0x40>)
    10ae:	681b      	ldr	r3, [r3, #0]
    10b0:	2202      	movs	r2, #2
    10b2:	4013      	ands	r3, r2
    10b4:	d101      	bne.n	10ba <nm_bsp_init+0x26>
	    delay_init();
    10b6:	4b08      	ldr	r3, [pc, #32]	; (10d8 <nm_bsp_init+0x44>)
    10b8:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    10ba:	4b08      	ldr	r3, [pc, #32]	; (10dc <nm_bsp_init+0x48>)
    10bc:	4798      	blx	r3

	system_interrupt_enable_global();
    10be:	4b08      	ldr	r3, [pc, #32]	; (10e0 <nm_bsp_init+0x4c>)
    10c0:	4798      	blx	r3

	return M2M_SUCCESS;
    10c2:	2300      	movs	r3, #0
}
    10c4:	0018      	movs	r0, r3
    10c6:	46bd      	mov	sp, r7
    10c8:	bd80      	pop	{r7, pc}
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	2000050c 	.word	0x2000050c
    10d0:	00001051 	.word	0x00001051
    10d4:	e000e010 	.word	0xe000e010
    10d8:	00002ec1 	.word	0x00002ec1
    10dc:	000010e5 	.word	0x000010e5
    10e0:	00000f99 	.word	0x00000f99

000010e4 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    10e4:	b580      	push	{r7, lr}
    10e6:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    10e8:	2100      	movs	r1, #0
    10ea:	201c      	movs	r0, #28
    10ec:	4b0c      	ldr	r3, [pc, #48]	; (1120 <nm_bsp_reset+0x3c>)
    10ee:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    10f0:	2100      	movs	r1, #0
    10f2:	201b      	movs	r0, #27
    10f4:	4b0a      	ldr	r3, [pc, #40]	; (1120 <nm_bsp_reset+0x3c>)
    10f6:	4798      	blx	r3
	nm_bsp_sleep(100);
    10f8:	2064      	movs	r0, #100	; 0x64
    10fa:	4b0a      	ldr	r3, [pc, #40]	; (1124 <nm_bsp_reset+0x40>)
    10fc:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    10fe:	2101      	movs	r1, #1
    1100:	201c      	movs	r0, #28
    1102:	4b07      	ldr	r3, [pc, #28]	; (1120 <nm_bsp_reset+0x3c>)
    1104:	4798      	blx	r3
	nm_bsp_sleep(10);
    1106:	200a      	movs	r0, #10
    1108:	4b06      	ldr	r3, [pc, #24]	; (1124 <nm_bsp_reset+0x40>)
    110a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    110c:	2101      	movs	r1, #1
    110e:	201b      	movs	r0, #27
    1110:	4b03      	ldr	r3, [pc, #12]	; (1120 <nm_bsp_reset+0x3c>)
    1112:	4798      	blx	r3
	nm_bsp_sleep(100);
    1114:	2064      	movs	r0, #100	; 0x64
    1116:	4b03      	ldr	r3, [pc, #12]	; (1124 <nm_bsp_reset+0x40>)
    1118:	4798      	blx	r3
}
    111a:	46c0      	nop			; (mov r8, r8)
    111c:	46bd      	mov	sp, r7
    111e:	bd80      	pop	{r7, pc}
    1120:	00000ffd 	.word	0x00000ffd
    1124:	00001129 	.word	0x00001129

00001128 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1128:	b580      	push	{r7, lr}
    112a:	b082      	sub	sp, #8
    112c:	af00      	add	r7, sp, #0
    112e:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    1130:	e002      	b.n	1138 <nm_bsp_sleep+0x10>
		delay_ms(1);
    1132:	2001      	movs	r0, #1
    1134:	4b05      	ldr	r3, [pc, #20]	; (114c <nm_bsp_sleep+0x24>)
    1136:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    1138:	687b      	ldr	r3, [r7, #4]
    113a:	1e5a      	subs	r2, r3, #1
    113c:	607a      	str	r2, [r7, #4]
    113e:	2b00      	cmp	r3, #0
    1140:	d1f7      	bne.n	1132 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	46bd      	mov	sp, r7
    1146:	b002      	add	sp, #8
    1148:	bd80      	pop	{r7, pc}
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	00002f19 	.word	0x00002f19

00001150 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1150:	b580      	push	{r7, lr}
    1152:	b084      	sub	sp, #16
    1154:	af00      	add	r7, sp, #0
    1156:	0002      	movs	r2, r0
    1158:	1dfb      	adds	r3, r7, #7
    115a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    115c:	230f      	movs	r3, #15
    115e:	18fb      	adds	r3, r7, r3
    1160:	1dfa      	adds	r2, r7, #7
    1162:	7812      	ldrb	r2, [r2, #0]
    1164:	09d2      	lsrs	r2, r2, #7
    1166:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1168:	230e      	movs	r3, #14
    116a:	18fb      	adds	r3, r7, r3
    116c:	1dfa      	adds	r2, r7, #7
    116e:	7812      	ldrb	r2, [r2, #0]
    1170:	0952      	lsrs	r2, r2, #5
    1172:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1174:	4b0d      	ldr	r3, [pc, #52]	; (11ac <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1176:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1178:	230f      	movs	r3, #15
    117a:	18fb      	adds	r3, r7, r3
    117c:	781b      	ldrb	r3, [r3, #0]
    117e:	2b00      	cmp	r3, #0
    1180:	d10f      	bne.n	11a2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1182:	230f      	movs	r3, #15
    1184:	18fb      	adds	r3, r7, r3
    1186:	781b      	ldrb	r3, [r3, #0]
    1188:	009b      	lsls	r3, r3, #2
    118a:	2210      	movs	r2, #16
    118c:	4694      	mov	ip, r2
    118e:	44bc      	add	ip, r7
    1190:	4463      	add	r3, ip
    1192:	3b08      	subs	r3, #8
    1194:	681a      	ldr	r2, [r3, #0]
    1196:	230e      	movs	r3, #14
    1198:	18fb      	adds	r3, r7, r3
    119a:	781b      	ldrb	r3, [r3, #0]
    119c:	01db      	lsls	r3, r3, #7
    119e:	18d3      	adds	r3, r2, r3
    11a0:	e000      	b.n	11a4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    11a2:	2300      	movs	r3, #0
	}
}
    11a4:	0018      	movs	r0, r3
    11a6:	46bd      	mov	sp, r7
    11a8:	b004      	add	sp, #16
    11aa:	bd80      	pop	{r7, pc}
    11ac:	41004400 	.word	0x41004400

000011b0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    11b0:	b580      	push	{r7, lr}
    11b2:	b082      	sub	sp, #8
    11b4:	af00      	add	r7, sp, #0
    11b6:	0002      	movs	r2, r0
    11b8:	1dfb      	adds	r3, r7, #7
    11ba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    11bc:	1dfb      	adds	r3, r7, #7
    11be:	781b      	ldrb	r3, [r3, #0]
    11c0:	0018      	movs	r0, r3
    11c2:	4b03      	ldr	r3, [pc, #12]	; (11d0 <port_get_group_from_gpio_pin+0x20>)
    11c4:	4798      	blx	r3
    11c6:	0003      	movs	r3, r0
}
    11c8:	0018      	movs	r0, r3
    11ca:	46bd      	mov	sp, r7
    11cc:	b002      	add	sp, #8
    11ce:	bd80      	pop	{r7, pc}
    11d0:	00001151 	.word	0x00001151

000011d4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    11d4:	b580      	push	{r7, lr}
    11d6:	b082      	sub	sp, #8
    11d8:	af00      	add	r7, sp, #0
    11da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    11dc:	687b      	ldr	r3, [r7, #4]
    11de:	2200      	movs	r2, #0
    11e0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    11e2:	687b      	ldr	r3, [r7, #4]
    11e4:	2201      	movs	r2, #1
    11e6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    11e8:	687b      	ldr	r3, [r7, #4]
    11ea:	2200      	movs	r2, #0
    11ec:	709a      	strb	r2, [r3, #2]
}
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	46bd      	mov	sp, r7
    11f2:	b002      	add	sp, #8
    11f4:	bd80      	pop	{r7, pc}
    11f6:	46c0      	nop			; (mov r8, r8)

000011f8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    11f8:	b580      	push	{r7, lr}
    11fa:	b084      	sub	sp, #16
    11fc:	af00      	add	r7, sp, #0
    11fe:	0002      	movs	r2, r0
    1200:	1dfb      	adds	r3, r7, #7
    1202:	701a      	strb	r2, [r3, #0]
    1204:	1dbb      	adds	r3, r7, #6
    1206:	1c0a      	adds	r2, r1, #0
    1208:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    120a:	1dfb      	adds	r3, r7, #7
    120c:	781b      	ldrb	r3, [r3, #0]
    120e:	0018      	movs	r0, r3
    1210:	4b0d      	ldr	r3, [pc, #52]	; (1248 <port_pin_set_output_level+0x50>)
    1212:	4798      	blx	r3
    1214:	0003      	movs	r3, r0
    1216:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1218:	1dfb      	adds	r3, r7, #7
    121a:	781b      	ldrb	r3, [r3, #0]
    121c:	221f      	movs	r2, #31
    121e:	4013      	ands	r3, r2
    1220:	2201      	movs	r2, #1
    1222:	409a      	lsls	r2, r3
    1224:	0013      	movs	r3, r2
    1226:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1228:	1dbb      	adds	r3, r7, #6
    122a:	781b      	ldrb	r3, [r3, #0]
    122c:	2b00      	cmp	r3, #0
    122e:	d003      	beq.n	1238 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1230:	68fb      	ldr	r3, [r7, #12]
    1232:	68ba      	ldr	r2, [r7, #8]
    1234:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1236:	e002      	b.n	123e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1238:	68fb      	ldr	r3, [r7, #12]
    123a:	68ba      	ldr	r2, [r7, #8]
    123c:	615a      	str	r2, [r3, #20]
	}
}
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	46bd      	mov	sp, r7
    1242:	b004      	add	sp, #16
    1244:	bd80      	pop	{r7, pc}
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	000011b1 	.word	0x000011b1

0000124c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    124c:	b580      	push	{r7, lr}
    124e:	b084      	sub	sp, #16
    1250:	af00      	add	r7, sp, #0
    1252:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1254:	687b      	ldr	r3, [r7, #4]
    1256:	681b      	ldr	r3, [r3, #0]
    1258:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    125a:	68fb      	ldr	r3, [r7, #12]
    125c:	69db      	ldr	r3, [r3, #28]
    125e:	1e5a      	subs	r2, r3, #1
    1260:	4193      	sbcs	r3, r2
    1262:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    1264:	0018      	movs	r0, r3
    1266:	46bd      	mov	sp, r7
    1268:	b004      	add	sp, #16
    126a:	bd80      	pop	{r7, pc}

0000126c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    126c:	b580      	push	{r7, lr}
    126e:	b082      	sub	sp, #8
    1270:	af00      	add	r7, sp, #0
    1272:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1274:	687b      	ldr	r3, [r7, #4]
    1276:	2201      	movs	r2, #1
    1278:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    127a:	687b      	ldr	r3, [r7, #4]
    127c:	2200      	movs	r2, #0
    127e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1280:	687b      	ldr	r3, [r7, #4]
    1282:	2200      	movs	r2, #0
    1284:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1286:	687b      	ldr	r3, [r7, #4]
    1288:	22c0      	movs	r2, #192	; 0xc0
    128a:	0392      	lsls	r2, r2, #14
    128c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    128e:	687b      	ldr	r3, [r7, #4]
    1290:	2200      	movs	r2, #0
    1292:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    1294:	687b      	ldr	r3, [r7, #4]
    1296:	2200      	movs	r2, #0
    1298:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    129a:	687b      	ldr	r3, [r7, #4]
    129c:	2201      	movs	r2, #1
    129e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    12a0:	687b      	ldr	r3, [r7, #4]
    12a2:	2201      	movs	r2, #1
    12a4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    12a6:	687b      	ldr	r3, [r7, #4]
    12a8:	2200      	movs	r2, #0
    12aa:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    12ac:	687b      	ldr	r3, [r7, #4]
    12ae:	2224      	movs	r2, #36	; 0x24
    12b0:	2100      	movs	r1, #0
    12b2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    12b4:	687b      	ldr	r3, [r7, #4]
    12b6:	3318      	adds	r3, #24
    12b8:	220c      	movs	r2, #12
    12ba:	2100      	movs	r1, #0
    12bc:	0018      	movs	r0, r3
    12be:	4b0a      	ldr	r3, [pc, #40]	; (12e8 <spi_get_config_defaults+0x7c>)
    12c0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    12c2:	687b      	ldr	r3, [r7, #4]
    12c4:	4a09      	ldr	r2, [pc, #36]	; (12ec <spi_get_config_defaults+0x80>)
    12c6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    12c8:	687b      	ldr	r3, [r7, #4]
    12ca:	2200      	movs	r2, #0
    12cc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    12ce:	687b      	ldr	r3, [r7, #4]
    12d0:	2200      	movs	r2, #0
    12d2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    12d4:	687b      	ldr	r3, [r7, #4]
    12d6:	2200      	movs	r2, #0
    12d8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    12da:	687b      	ldr	r3, [r7, #4]
    12dc:	2200      	movs	r2, #0
    12de:	635a      	str	r2, [r3, #52]	; 0x34

};
    12e0:	46c0      	nop			; (mov r8, r8)
    12e2:	46bd      	mov	sp, r7
    12e4:	b002      	add	sp, #8
    12e6:	bd80      	pop	{r7, pc}
    12e8:	000068df 	.word	0x000068df
    12ec:	000186a0 	.word	0x000186a0

000012f0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    12f0:	b580      	push	{r7, lr}
    12f2:	b082      	sub	sp, #8
    12f4:	af00      	add	r7, sp, #0
    12f6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    12f8:	687b      	ldr	r3, [r7, #4]
    12fa:	220a      	movs	r2, #10
    12fc:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    12fe:	687b      	ldr	r3, [r7, #4]
    1300:	2200      	movs	r2, #0
    1302:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    1304:	687b      	ldr	r3, [r7, #4]
    1306:	2200      	movs	r2, #0
    1308:	709a      	strb	r2, [r3, #2]
}
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	46bd      	mov	sp, r7
    130e:	b002      	add	sp, #8
    1310:	bd80      	pop	{r7, pc}
    1312:	46c0      	nop			; (mov r8, r8)

00001314 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
    1314:	b580      	push	{r7, lr}
    1316:	b084      	sub	sp, #16
    1318:	af00      	add	r7, sp, #0
    131a:	6078      	str	r0, [r7, #4]
    131c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    131e:	683b      	ldr	r3, [r7, #0]
    1320:	781a      	ldrb	r2, [r3, #0]
    1322:	687b      	ldr	r3, [r7, #4]
    1324:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    1326:	683b      	ldr	r3, [r7, #0]
    1328:	785a      	ldrb	r2, [r3, #1]
    132a:	687b      	ldr	r3, [r7, #4]
    132c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    132e:	683b      	ldr	r3, [r7, #0]
    1330:	789a      	ldrb	r2, [r3, #2]
    1332:	687b      	ldr	r3, [r7, #4]
    1334:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    1336:	230c      	movs	r3, #12
    1338:	18fb      	adds	r3, r7, r3
    133a:	0018      	movs	r0, r3
    133c:	4b0b      	ldr	r3, [pc, #44]	; (136c <spi_attach_slave+0x58>)
    133e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1340:	230c      	movs	r3, #12
    1342:	18fb      	adds	r3, r7, r3
    1344:	2201      	movs	r2, #1
    1346:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1348:	687b      	ldr	r3, [r7, #4]
    134a:	781b      	ldrb	r3, [r3, #0]
    134c:	220c      	movs	r2, #12
    134e:	18ba      	adds	r2, r7, r2
    1350:	0011      	movs	r1, r2
    1352:	0018      	movs	r0, r3
    1354:	4b06      	ldr	r3, [pc, #24]	; (1370 <spi_attach_slave+0x5c>)
    1356:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1358:	687b      	ldr	r3, [r7, #4]
    135a:	781b      	ldrb	r3, [r3, #0]
    135c:	2101      	movs	r1, #1
    135e:	0018      	movs	r0, r3
    1360:	4b04      	ldr	r3, [pc, #16]	; (1374 <spi_attach_slave+0x60>)
    1362:	4798      	blx	r3
}
    1364:	46c0      	nop			; (mov r8, r8)
    1366:	46bd      	mov	sp, r7
    1368:	b004      	add	sp, #16
    136a:	bd80      	pop	{r7, pc}
    136c:	000011d5 	.word	0x000011d5
    1370:	00003625 	.word	0x00003625
    1374:	000011f9 	.word	0x000011f9

00001378 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    1378:	b580      	push	{r7, lr}
    137a:	b084      	sub	sp, #16
    137c:	af00      	add	r7, sp, #0
    137e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1380:	687b      	ldr	r3, [r7, #4]
    1382:	681b      	ldr	r3, [r3, #0]
    1384:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	0018      	movs	r0, r3
    138c:	4b06      	ldr	r3, [pc, #24]	; (13a8 <spi_enable+0x30>)
    138e:	4798      	blx	r3
    1390:	1e03      	subs	r3, r0, #0
    1392:	d1f9      	bne.n	1388 <spi_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1394:	68fb      	ldr	r3, [r7, #12]
    1396:	681b      	ldr	r3, [r3, #0]
    1398:	2202      	movs	r2, #2
    139a:	431a      	orrs	r2, r3
    139c:	68fb      	ldr	r3, [r7, #12]
    139e:	601a      	str	r2, [r3, #0]
}
    13a0:	46c0      	nop			; (mov r8, r8)
    13a2:	46bd      	mov	sp, r7
    13a4:	b004      	add	sp, #16
    13a6:	bd80      	pop	{r7, pc}
    13a8:	0000124d 	.word	0x0000124d

000013ac <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    13ac:	b580      	push	{r7, lr}
    13ae:	b084      	sub	sp, #16
    13b0:	af00      	add	r7, sp, #0
    13b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13b4:	687b      	ldr	r3, [r7, #4]
    13b6:	681b      	ldr	r3, [r3, #0]
    13b8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    13ba:	68fb      	ldr	r3, [r7, #12]
    13bc:	7e1b      	ldrb	r3, [r3, #24]
    13be:	b2db      	uxtb	r3, r3
    13c0:	001a      	movs	r2, r3
    13c2:	2302      	movs	r3, #2
    13c4:	4013      	ands	r3, r2
    13c6:	1e5a      	subs	r2, r3, #1
    13c8:	4193      	sbcs	r3, r2
    13ca:	b2db      	uxtb	r3, r3
}
    13cc:	0018      	movs	r0, r3
    13ce:	46bd      	mov	sp, r7
    13d0:	b004      	add	sp, #16
    13d2:	bd80      	pop	{r7, pc}

000013d4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    13d4:	b580      	push	{r7, lr}
    13d6:	b084      	sub	sp, #16
    13d8:	af00      	add	r7, sp, #0
    13da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13dc:	687b      	ldr	r3, [r7, #4]
    13de:	681b      	ldr	r3, [r3, #0]
    13e0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    13e2:	68fb      	ldr	r3, [r7, #12]
    13e4:	7e1b      	ldrb	r3, [r3, #24]
    13e6:	b2db      	uxtb	r3, r3
    13e8:	001a      	movs	r2, r3
    13ea:	2301      	movs	r3, #1
    13ec:	4013      	ands	r3, r2
    13ee:	1e5a      	subs	r2, r3, #1
    13f0:	4193      	sbcs	r3, r2
    13f2:	b2db      	uxtb	r3, r3
}
    13f4:	0018      	movs	r0, r3
    13f6:	46bd      	mov	sp, r7
    13f8:	b004      	add	sp, #16
    13fa:	bd80      	pop	{r7, pc}

000013fc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    13fc:	b580      	push	{r7, lr}
    13fe:	b084      	sub	sp, #16
    1400:	af00      	add	r7, sp, #0
    1402:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1404:	687b      	ldr	r3, [r7, #4]
    1406:	681b      	ldr	r3, [r3, #0]
    1408:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    140a:	68fb      	ldr	r3, [r7, #12]
    140c:	7e1b      	ldrb	r3, [r3, #24]
    140e:	b2db      	uxtb	r3, r3
    1410:	001a      	movs	r2, r3
    1412:	2304      	movs	r3, #4
    1414:	4013      	ands	r3, r2
    1416:	1e5a      	subs	r2, r3, #1
    1418:	4193      	sbcs	r3, r2
    141a:	b2db      	uxtb	r3, r3
}
    141c:	0018      	movs	r0, r3
    141e:	46bd      	mov	sp, r7
    1420:	b004      	add	sp, #16
    1422:	bd80      	pop	{r7, pc}

00001424 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    1424:	b580      	push	{r7, lr}
    1426:	b084      	sub	sp, #16
    1428:	af00      	add	r7, sp, #0
    142a:	6078      	str	r0, [r7, #4]
    142c:	000a      	movs	r2, r1
    142e:	1cbb      	adds	r3, r7, #2
    1430:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1432:	687b      	ldr	r3, [r7, #4]
    1434:	681b      	ldr	r3, [r3, #0]
    1436:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1438:	687b      	ldr	r3, [r7, #4]
    143a:	0018      	movs	r0, r3
    143c:	4b0a      	ldr	r3, [pc, #40]	; (1468 <spi_write+0x44>)
    143e:	4798      	blx	r3
    1440:	0003      	movs	r3, r0
    1442:	001a      	movs	r2, r3
    1444:	2301      	movs	r3, #1
    1446:	4053      	eors	r3, r2
    1448:	b2db      	uxtb	r3, r3
    144a:	2b00      	cmp	r3, #0
    144c:	d001      	beq.n	1452 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    144e:	2305      	movs	r3, #5
    1450:	e006      	b.n	1460 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1452:	1cbb      	adds	r3, r7, #2
    1454:	881b      	ldrh	r3, [r3, #0]
    1456:	05db      	lsls	r3, r3, #23
    1458:	0dda      	lsrs	r2, r3, #23
    145a:	68fb      	ldr	r3, [r7, #12]
    145c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    145e:	2300      	movs	r3, #0
}
    1460:	0018      	movs	r0, r3
    1462:	46bd      	mov	sp, r7
    1464:	b004      	add	sp, #16
    1466:	bd80      	pop	{r7, pc}
    1468:	000013d5 	.word	0x000013d5

0000146c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    146c:	b580      	push	{r7, lr}
    146e:	b084      	sub	sp, #16
    1470:	af00      	add	r7, sp, #0
    1472:	6078      	str	r0, [r7, #4]
    1474:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1476:	687b      	ldr	r3, [r7, #4]
    1478:	681b      	ldr	r3, [r3, #0]
    147a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    147c:	687b      	ldr	r3, [r7, #4]
    147e:	0018      	movs	r0, r3
    1480:	4b1d      	ldr	r3, [pc, #116]	; (14f8 <spi_read+0x8c>)
    1482:	4798      	blx	r3
    1484:	0003      	movs	r3, r0
    1486:	001a      	movs	r2, r3
    1488:	2301      	movs	r3, #1
    148a:	4053      	eors	r3, r2
    148c:	b2db      	uxtb	r3, r3
    148e:	2b00      	cmp	r3, #0
    1490:	d001      	beq.n	1496 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    1492:	2310      	movs	r3, #16
    1494:	e02c      	b.n	14f0 <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    1496:	230f      	movs	r3, #15
    1498:	18fb      	adds	r3, r7, r3
    149a:	2200      	movs	r2, #0
    149c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    149e:	68bb      	ldr	r3, [r7, #8]
    14a0:	8b5b      	ldrh	r3, [r3, #26]
    14a2:	b29b      	uxth	r3, r3
    14a4:	001a      	movs	r2, r3
    14a6:	2304      	movs	r3, #4
    14a8:	4013      	ands	r3, r2
    14aa:	d00b      	beq.n	14c4 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
    14ac:	230f      	movs	r3, #15
    14ae:	18fb      	adds	r3, r7, r3
    14b0:	221e      	movs	r2, #30
    14b2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    14b4:	68bb      	ldr	r3, [r7, #8]
    14b6:	8b5b      	ldrh	r3, [r3, #26]
    14b8:	b29b      	uxth	r3, r3
    14ba:	2204      	movs	r2, #4
    14bc:	4313      	orrs	r3, r2
    14be:	b29a      	uxth	r2, r3
    14c0:	68bb      	ldr	r3, [r7, #8]
    14c2:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14c4:	687b      	ldr	r3, [r7, #4]
    14c6:	799b      	ldrb	r3, [r3, #6]
    14c8:	2b01      	cmp	r3, #1
    14ca:	d108      	bne.n	14de <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    14cc:	68bb      	ldr	r3, [r7, #8]
    14ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14d0:	b29b      	uxth	r3, r3
    14d2:	05db      	lsls	r3, r3, #23
    14d4:	0ddb      	lsrs	r3, r3, #23
    14d6:	b29a      	uxth	r2, r3
    14d8:	683b      	ldr	r3, [r7, #0]
    14da:	801a      	strh	r2, [r3, #0]
    14dc:	e005      	b.n	14ea <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    14de:	68bb      	ldr	r3, [r7, #8]
    14e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14e2:	b2db      	uxtb	r3, r3
    14e4:	b29a      	uxth	r2, r3
    14e6:	683b      	ldr	r3, [r7, #0]
    14e8:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    14ea:	230f      	movs	r3, #15
    14ec:	18fb      	adds	r3, r7, r3
    14ee:	781b      	ldrb	r3, [r3, #0]
}
    14f0:	0018      	movs	r0, r3
    14f2:	46bd      	mov	sp, r7
    14f4:	b004      	add	sp, #16
    14f6:	bd80      	pop	{r7, pc}
    14f8:	000013fd 	.word	0x000013fd

000014fc <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    14fc:	b580      	push	{r7, lr}
    14fe:	b086      	sub	sp, #24
    1500:	af00      	add	r7, sp, #0
    1502:	60f8      	str	r0, [r7, #12]
    1504:	60b9      	str	r1, [r7, #8]
    1506:	1dbb      	adds	r3, r7, #6
    1508:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    150a:	2313      	movs	r3, #19
    150c:	18fb      	adds	r3, r7, r3
    150e:	2200      	movs	r2, #0
    1510:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    1512:	2317      	movs	r3, #23
    1514:	18fb      	adds	r3, r7, r3
    1516:	2200      	movs	r2, #0
    1518:	701a      	strb	r2, [r3, #0]
    151a:	2316      	movs	r3, #22
    151c:	18fb      	adds	r3, r7, r3
    151e:	2200      	movs	r2, #0
    1520:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    1522:	2314      	movs	r3, #20
    1524:	18fb      	adds	r3, r7, r3
    1526:	2200      	movs	r2, #0
    1528:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    152a:	2310      	movs	r3, #16
    152c:	18fb      	adds	r3, r7, r3
    152e:	2200      	movs	r2, #0
    1530:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
    1532:	68fb      	ldr	r3, [r7, #12]
    1534:	2b00      	cmp	r3, #0
    1536:	d107      	bne.n	1548 <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
    1538:	2313      	movs	r3, #19
    153a:	18fb      	adds	r3, r7, r3
    153c:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    153e:	2317      	movs	r3, #23
    1540:	18fb      	adds	r3, r7, r3
    1542:	2201      	movs	r2, #1
    1544:	701a      	strb	r2, [r3, #0]
    1546:	e00d      	b.n	1564 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
    1548:	68bb      	ldr	r3, [r7, #8]
    154a:	2b00      	cmp	r3, #0
    154c:	d107      	bne.n	155e <spi_rw+0x62>
		pu8Miso = &u8Dummy;
    154e:	2313      	movs	r3, #19
    1550:	18fb      	adds	r3, r7, r3
    1552:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    1554:	2316      	movs	r3, #22
    1556:	18fb      	adds	r3, r7, r3
    1558:	2201      	movs	r2, #1
    155a:	701a      	strb	r2, [r3, #0]
    155c:	e002      	b.n	1564 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    155e:	2306      	movs	r3, #6
    1560:	425b      	negs	r3, r3
    1562:	e06a      	b.n	163a <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
    1564:	4937      	ldr	r1, [pc, #220]	; (1644 <spi_rw+0x148>)
    1566:	4b38      	ldr	r3, [pc, #224]	; (1648 <spi_rw+0x14c>)
    1568:	2201      	movs	r2, #1
    156a:	0018      	movs	r0, r3
    156c:	4b37      	ldr	r3, [pc, #220]	; (164c <spi_rw+0x150>)
    156e:	4798      	blx	r3

	while (u16Sz) {
    1570:	e04c      	b.n	160c <spi_rw+0x110>
		txd_data = *pu8Mosi;
    1572:	68fb      	ldr	r3, [r7, #12]
    1574:	781a      	ldrb	r2, [r3, #0]
    1576:	2314      	movs	r3, #20
    1578:	18fb      	adds	r3, r7, r3
    157a:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    157c:	46c0      	nop			; (mov r8, r8)
    157e:	4b32      	ldr	r3, [pc, #200]	; (1648 <spi_rw+0x14c>)
    1580:	0018      	movs	r0, r3
    1582:	4b33      	ldr	r3, [pc, #204]	; (1650 <spi_rw+0x154>)
    1584:	4798      	blx	r3
    1586:	0003      	movs	r3, r0
    1588:	001a      	movs	r2, r3
    158a:	2301      	movs	r3, #1
    158c:	4053      	eors	r3, r2
    158e:	b2db      	uxtb	r3, r3
    1590:	2b00      	cmp	r3, #0
    1592:	d1f4      	bne.n	157e <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    1594:	46c0      	nop			; (mov r8, r8)
    1596:	2314      	movs	r3, #20
    1598:	18fb      	adds	r3, r7, r3
    159a:	881a      	ldrh	r2, [r3, #0]
    159c:	4b2a      	ldr	r3, [pc, #168]	; (1648 <spi_rw+0x14c>)
    159e:	0011      	movs	r1, r2
    15a0:	0018      	movs	r0, r3
    15a2:	4b2c      	ldr	r3, [pc, #176]	; (1654 <spi_rw+0x158>)
    15a4:	4798      	blx	r3
    15a6:	1e03      	subs	r3, r0, #0
    15a8:	d1f5      	bne.n	1596 <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    15aa:	46c0      	nop			; (mov r8, r8)
    15ac:	4b26      	ldr	r3, [pc, #152]	; (1648 <spi_rw+0x14c>)
    15ae:	0018      	movs	r0, r3
    15b0:	4b29      	ldr	r3, [pc, #164]	; (1658 <spi_rw+0x15c>)
    15b2:	4798      	blx	r3
    15b4:	0003      	movs	r3, r0
    15b6:	001a      	movs	r2, r3
    15b8:	2301      	movs	r3, #1
    15ba:	4053      	eors	r3, r2
    15bc:	b2db      	uxtb	r3, r3
    15be:	2b00      	cmp	r3, #0
    15c0:	d1f4      	bne.n	15ac <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    15c2:	46c0      	nop			; (mov r8, r8)
    15c4:	2310      	movs	r3, #16
    15c6:	18fa      	adds	r2, r7, r3
    15c8:	4b1f      	ldr	r3, [pc, #124]	; (1648 <spi_rw+0x14c>)
    15ca:	0011      	movs	r1, r2
    15cc:	0018      	movs	r0, r3
    15ce:	4b23      	ldr	r3, [pc, #140]	; (165c <spi_rw+0x160>)
    15d0:	4798      	blx	r3
    15d2:	1e03      	subs	r3, r0, #0
    15d4:	d1f6      	bne.n	15c4 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
    15d6:	2310      	movs	r3, #16
    15d8:	18fb      	adds	r3, r7, r3
    15da:	881b      	ldrh	r3, [r3, #0]
    15dc:	b2da      	uxtb	r2, r3
    15de:	68bb      	ldr	r3, [r7, #8]
    15e0:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    15e2:	1dbb      	adds	r3, r7, #6
    15e4:	881a      	ldrh	r2, [r3, #0]
    15e6:	1dbb      	adds	r3, r7, #6
    15e8:	3a01      	subs	r2, #1
    15ea:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    15ec:	2316      	movs	r3, #22
    15ee:	18fb      	adds	r3, r7, r3
    15f0:	781b      	ldrb	r3, [r3, #0]
    15f2:	2b00      	cmp	r3, #0
    15f4:	d102      	bne.n	15fc <spi_rw+0x100>
			pu8Miso++;
    15f6:	68bb      	ldr	r3, [r7, #8]
    15f8:	3301      	adds	r3, #1
    15fa:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    15fc:	2317      	movs	r3, #23
    15fe:	18fb      	adds	r3, r7, r3
    1600:	781b      	ldrb	r3, [r3, #0]
    1602:	2b00      	cmp	r3, #0
    1604:	d102      	bne.n	160c <spi_rw+0x110>
			pu8Mosi++;
    1606:	68fb      	ldr	r3, [r7, #12]
    1608:	3301      	adds	r3, #1
    160a:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    160c:	1dbb      	adds	r3, r7, #6
    160e:	881b      	ldrh	r3, [r3, #0]
    1610:	2b00      	cmp	r3, #0
    1612:	d1ae      	bne.n	1572 <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    1614:	46c0      	nop			; (mov r8, r8)
    1616:	4b0c      	ldr	r3, [pc, #48]	; (1648 <spi_rw+0x14c>)
    1618:	0018      	movs	r0, r3
    161a:	4b11      	ldr	r3, [pc, #68]	; (1660 <spi_rw+0x164>)
    161c:	4798      	blx	r3
    161e:	0003      	movs	r3, r0
    1620:	001a      	movs	r2, r3
    1622:	2301      	movs	r3, #1
    1624:	4053      	eors	r3, r2
    1626:	b2db      	uxtb	r3, r3
    1628:	2b00      	cmp	r3, #0
    162a:	d1f4      	bne.n	1616 <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
    162c:	4905      	ldr	r1, [pc, #20]	; (1644 <spi_rw+0x148>)
    162e:	4b06      	ldr	r3, [pc, #24]	; (1648 <spi_rw+0x14c>)
    1630:	2200      	movs	r2, #0
    1632:	0018      	movs	r0, r3
    1634:	4b05      	ldr	r3, [pc, #20]	; (164c <spi_rw+0x150>)
    1636:	4798      	blx	r3

	return M2M_SUCCESS;
    1638:	2300      	movs	r3, #0
}
    163a:	0018      	movs	r0, r3
    163c:	46bd      	mov	sp, r7
    163e:	b006      	add	sp, #24
    1640:	bd80      	pop	{r7, pc}
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	20000560 	.word	0x20000560
    1648:	20000564 	.word	0x20000564
    164c:	0000468d 	.word	0x0000468d
    1650:	000013d5 	.word	0x000013d5
    1654:	00001425 	.word	0x00001425
    1658:	000013fd 	.word	0x000013fd
    165c:	0000146d 	.word	0x0000146d
    1660:	000013ad 	.word	0x000013ad

00001664 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    1664:	b580      	push	{r7, lr}
    1666:	b092      	sub	sp, #72	; 0x48
    1668:	af00      	add	r7, sp, #0
    166a:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    166c:	2347      	movs	r3, #71	; 0x47
    166e:	18fb      	adds	r3, r7, r3
    1670:	2200      	movs	r2, #0
    1672:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    1674:	2308      	movs	r3, #8
    1676:	18fb      	adds	r3, r7, r3
    1678:	0018      	movs	r0, r3
    167a:	4b26      	ldr	r3, [pc, #152]	; (1714 <nm_bus_init+0xb0>)
    167c:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    167e:	2308      	movs	r3, #8
    1680:	18fb      	adds	r3, r7, r3
    1682:	220e      	movs	r2, #14
    1684:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    1686:	2308      	movs	r3, #8
    1688:	18fa      	adds	r2, r7, r3
    168a:	4b23      	ldr	r3, [pc, #140]	; (1718 <nm_bus_init+0xb4>)
    168c:	0011      	movs	r1, r2
    168e:	0018      	movs	r0, r3
    1690:	4b22      	ldr	r3, [pc, #136]	; (171c <nm_bus_init+0xb8>)
    1692:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    1694:	230c      	movs	r3, #12
    1696:	18fb      	adds	r3, r7, r3
    1698:	0018      	movs	r0, r3
    169a:	4b21      	ldr	r3, [pc, #132]	; (1720 <nm_bus_init+0xbc>)
    169c:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    169e:	230c      	movs	r3, #12
    16a0:	18fb      	adds	r3, r7, r3
    16a2:	22c0      	movs	r2, #192	; 0xc0
    16a4:	0392      	lsls	r2, r2, #14
    16a6:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    16a8:	230c      	movs	r3, #12
    16aa:	18fb      	adds	r3, r7, r3
    16ac:	4a1d      	ldr	r2, [pc, #116]	; (1724 <nm_bus_init+0xc0>)
    16ae:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    16b0:	230c      	movs	r3, #12
    16b2:	18fb      	adds	r3, r7, r3
    16b4:	4a1c      	ldr	r2, [pc, #112]	; (1728 <nm_bus_init+0xc4>)
    16b6:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    16b8:	230c      	movs	r3, #12
    16ba:	18fb      	adds	r3, r7, r3
    16bc:	2201      	movs	r2, #1
    16be:	4252      	negs	r2, r2
    16c0:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    16c2:	230c      	movs	r3, #12
    16c4:	18fb      	adds	r3, r7, r3
    16c6:	4a19      	ldr	r2, [pc, #100]	; (172c <nm_bus_init+0xc8>)
    16c8:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    16ca:	230c      	movs	r3, #12
    16cc:	18fb      	adds	r3, r7, r3
    16ce:	2200      	movs	r2, #0
    16d0:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    16d2:	230c      	movs	r3, #12
    16d4:	18fb      	adds	r3, r7, r3
    16d6:	4a16      	ldr	r2, [pc, #88]	; (1730 <nm_bus_init+0xcc>)
    16d8:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    16da:	230c      	movs	r3, #12
    16dc:	18fa      	adds	r2, r7, r3
    16de:	4915      	ldr	r1, [pc, #84]	; (1734 <nm_bus_init+0xd0>)
    16e0:	4b15      	ldr	r3, [pc, #84]	; (1738 <nm_bus_init+0xd4>)
    16e2:	0018      	movs	r0, r3
    16e4:	4b15      	ldr	r3, [pc, #84]	; (173c <nm_bus_init+0xd8>)
    16e6:	4798      	blx	r3
    16e8:	1e03      	subs	r3, r0, #0
    16ea:	d002      	beq.n	16f2 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    16ec:	2306      	movs	r3, #6
    16ee:	425b      	negs	r3, r3
    16f0:	e00c      	b.n	170c <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    16f2:	4b11      	ldr	r3, [pc, #68]	; (1738 <nm_bus_init+0xd4>)
    16f4:	0018      	movs	r0, r3
    16f6:	4b12      	ldr	r3, [pc, #72]	; (1740 <nm_bus_init+0xdc>)
    16f8:	4798      	blx	r3

	nm_bsp_reset();
    16fa:	4b12      	ldr	r3, [pc, #72]	; (1744 <nm_bus_init+0xe0>)
    16fc:	4798      	blx	r3
	nm_bsp_sleep(1);
    16fe:	2001      	movs	r0, #1
    1700:	4b11      	ldr	r3, [pc, #68]	; (1748 <nm_bus_init+0xe4>)
    1702:	4798      	blx	r3
#endif
	return result;
    1704:	2347      	movs	r3, #71	; 0x47
    1706:	18fb      	adds	r3, r7, r3
    1708:	781b      	ldrb	r3, [r3, #0]
    170a:	b25b      	sxtb	r3, r3
}
    170c:	0018      	movs	r0, r3
    170e:	46bd      	mov	sp, r7
    1710:	b012      	add	sp, #72	; 0x48
    1712:	bd80      	pop	{r7, pc}
    1714:	000012f1 	.word	0x000012f1
    1718:	20000560 	.word	0x20000560
    171c:	00001315 	.word	0x00001315
    1720:	0000126d 	.word	0x0000126d
    1724:	000c0002 	.word	0x000c0002
    1728:	000d0002 	.word	0x000d0002
    172c:	000f0002 	.word	0x000f0002
    1730:	00989680 	.word	0x00989680
    1734:	42001000 	.word	0x42001000
    1738:	20000564 	.word	0x20000564
    173c:	00004585 	.word	0x00004585
    1740:	00001379 	.word	0x00001379
    1744:	000010e5 	.word	0x000010e5
    1748:	00001129 	.word	0x00001129

0000174c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    174c:	b590      	push	{r4, r7, lr}
    174e:	b085      	sub	sp, #20
    1750:	af00      	add	r7, sp, #0
    1752:	0002      	movs	r2, r0
    1754:	6039      	str	r1, [r7, #0]
    1756:	1dfb      	adds	r3, r7, #7
    1758:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    175a:	230f      	movs	r3, #15
    175c:	18fb      	adds	r3, r7, r3
    175e:	2200      	movs	r2, #0
    1760:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    1762:	1dfb      	adds	r3, r7, #7
    1764:	781b      	ldrb	r3, [r3, #0]
    1766:	2b03      	cmp	r3, #3
    1768:	d10f      	bne.n	178a <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    176a:	683b      	ldr	r3, [r7, #0]
    176c:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    176e:	68bb      	ldr	r3, [r7, #8]
    1770:	6818      	ldr	r0, [r3, #0]
    1772:	68bb      	ldr	r3, [r7, #8]
    1774:	6859      	ldr	r1, [r3, #4]
    1776:	68bb      	ldr	r3, [r7, #8]
    1778:	891b      	ldrh	r3, [r3, #8]
    177a:	220f      	movs	r2, #15
    177c:	18bc      	adds	r4, r7, r2
    177e:	001a      	movs	r2, r3
    1780:	4b0f      	ldr	r3, [pc, #60]	; (17c0 <nm_bus_ioctl+0x74>)
    1782:	4798      	blx	r3
    1784:	0003      	movs	r3, r0
    1786:	7023      	strb	r3, [r4, #0]
		}
		break;
    1788:	e012      	b.n	17b0 <nm_bus_ioctl+0x64>
#endif
		default:
			s8Ret = -1;
    178a:	230f      	movs	r3, #15
    178c:	18fb      	adds	r3, r7, r3
    178e:	22ff      	movs	r2, #255	; 0xff
    1790:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    1792:	2386      	movs	r3, #134	; 0x86
    1794:	005a      	lsls	r2, r3, #1
    1796:	490b      	ldr	r1, [pc, #44]	; (17c4 <nm_bus_ioctl+0x78>)
    1798:	4b0b      	ldr	r3, [pc, #44]	; (17c8 <nm_bus_ioctl+0x7c>)
    179a:	0018      	movs	r0, r3
    179c:	4b0b      	ldr	r3, [pc, #44]	; (17cc <nm_bus_ioctl+0x80>)
    179e:	4798      	blx	r3
    17a0:	4b0b      	ldr	r3, [pc, #44]	; (17d0 <nm_bus_ioctl+0x84>)
    17a2:	0018      	movs	r0, r3
    17a4:	4b0b      	ldr	r3, [pc, #44]	; (17d4 <nm_bus_ioctl+0x88>)
    17a6:	4798      	blx	r3
    17a8:	200d      	movs	r0, #13
    17aa:	4b0b      	ldr	r3, [pc, #44]	; (17d8 <nm_bus_ioctl+0x8c>)
    17ac:	4798      	blx	r3
			break;
    17ae:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    17b0:	230f      	movs	r3, #15
    17b2:	18fb      	adds	r3, r7, r3
    17b4:	781b      	ldrb	r3, [r3, #0]
    17b6:	b25b      	sxtb	r3, r3
}
    17b8:	0018      	movs	r0, r3
    17ba:	46bd      	mov	sp, r7
    17bc:	b005      	add	sp, #20
    17be:	bd90      	pop	{r4, r7, pc}
    17c0:	000014fd 	.word	0x000014fd
    17c4:	00007af0 	.word	0x00007af0
    17c8:	00007ac8 	.word	0x00007ac8
    17cc:	000068f1 	.word	0x000068f1
    17d0:	00007adc 	.word	0x00007adc
    17d4:	00006a11 	.word	0x00006a11
    17d8:	00006925 	.word	0x00006925

000017dc <m2m_wifi_download_mode>:
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}

sint8 m2m_wifi_download_mode()
{
    17dc:	b590      	push	{r4, r7, lr}
    17de:	b083      	sub	sp, #12
    17e0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    17e2:	1dfb      	adds	r3, r7, #7
    17e4:	2200      	movs	r2, #0
    17e6:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init_download_mode();
    17e8:	1dfc      	adds	r4, r7, #7
    17ea:	4b0a      	ldr	r3, [pc, #40]	; (1814 <m2m_wifi_download_mode+0x38>)
    17ec:	4798      	blx	r3
    17ee:	0003      	movs	r3, r0
    17f0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    17f2:	1dfb      	adds	r3, r7, #7
    17f4:	781b      	ldrb	r3, [r3, #0]
    17f6:	b25b      	sxtb	r3, r3
    17f8:	2b00      	cmp	r3, #0
    17fa:	d102      	bne.n	1802 <m2m_wifi_download_mode+0x26>



	enable_interrupts();
    17fc:	4b06      	ldr	r3, [pc, #24]	; (1818 <m2m_wifi_download_mode+0x3c>)
    17fe:	4798      	blx	r3
    1800:	e000      	b.n	1804 <m2m_wifi_download_mode+0x28>
sint8 m2m_wifi_download_mode()
{
	sint8 ret = M2M_SUCCESS;
	/* Apply device specific initialization. */
	ret = nm_drv_init_download_mode();
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1802:	46c0      	nop			; (mov r8, r8)


	enable_interrupts();

_EXIT0:
	return ret;
    1804:	1dfb      	adds	r3, r7, #7
    1806:	781b      	ldrb	r3, [r3, #0]
    1808:	b25b      	sxtb	r3, r3
}
    180a:	0018      	movs	r0, r3
    180c:	46bd      	mov	sp, r7
    180e:	b003      	add	sp, #12
    1810:	bd90      	pop	{r4, r7, pc}
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	00001c31 	.word	0x00001c31
    1818:	0000181d 	.word	0x0000181d

0000181c <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
    181c:	b590      	push	{r4, r7, lr}
    181e:	b083      	sub	sp, #12
    1820:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    1822:	1dfc      	adds	r4, r7, #7
    1824:	003b      	movs	r3, r7
    1826:	4a29      	ldr	r2, [pc, #164]	; (18cc <enable_interrupts+0xb0>)
    1828:	0019      	movs	r1, r3
    182a:	0010      	movs	r0, r2
    182c:	4b28      	ldr	r3, [pc, #160]	; (18d0 <enable_interrupts+0xb4>)
    182e:	4798      	blx	r3
    1830:	0003      	movs	r3, r0
    1832:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    1834:	1dfb      	adds	r3, r7, #7
    1836:	781b      	ldrb	r3, [r3, #0]
    1838:	b25b      	sxtb	r3, r3
    183a:	2b00      	cmp	r3, #0
    183c:	d002      	beq.n	1844 <enable_interrupts+0x28>
		return M2M_ERR_BUS_FAIL;
    183e:	2306      	movs	r3, #6
    1840:	425b      	negs	r3, r3
    1842:	e03f      	b.n	18c4 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 8);
    1844:	683b      	ldr	r3, [r7, #0]
    1846:	2280      	movs	r2, #128	; 0x80
    1848:	0052      	lsls	r2, r2, #1
    184a:	4313      	orrs	r3, r2
    184c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    184e:	683b      	ldr	r3, [r7, #0]
    1850:	1dfc      	adds	r4, r7, #7
    1852:	4a1e      	ldr	r2, [pc, #120]	; (18cc <enable_interrupts+0xb0>)
    1854:	0019      	movs	r1, r3
    1856:	0010      	movs	r0, r2
    1858:	4b1e      	ldr	r3, [pc, #120]	; (18d4 <enable_interrupts+0xb8>)
    185a:	4798      	blx	r3
    185c:	0003      	movs	r3, r0
    185e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    1860:	1dfb      	adds	r3, r7, #7
    1862:	781b      	ldrb	r3, [r3, #0]
    1864:	b25b      	sxtb	r3, r3
    1866:	2b00      	cmp	r3, #0
    1868:	d002      	beq.n	1870 <enable_interrupts+0x54>
		return M2M_ERR_BUS_FAIL;
    186a:	2306      	movs	r3, #6
    186c:	425b      	negs	r3, r3
    186e:	e029      	b.n	18c4 <enable_interrupts+0xa8>
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    1870:	1dfc      	adds	r4, r7, #7
    1872:	003a      	movs	r2, r7
    1874:	23d0      	movs	r3, #208	; 0xd0
    1876:	015b      	lsls	r3, r3, #5
    1878:	0011      	movs	r1, r2
    187a:	0018      	movs	r0, r3
    187c:	4b14      	ldr	r3, [pc, #80]	; (18d0 <enable_interrupts+0xb4>)
    187e:	4798      	blx	r3
    1880:	0003      	movs	r3, r0
    1882:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    1884:	1dfb      	adds	r3, r7, #7
    1886:	781b      	ldrb	r3, [r3, #0]
    1888:	b25b      	sxtb	r3, r3
    188a:	2b00      	cmp	r3, #0
    188c:	d002      	beq.n	1894 <enable_interrupts+0x78>
		return M2M_ERR_BUS_FAIL;
    188e:	2306      	movs	r3, #6
    1890:	425b      	negs	r3, r3
    1892:	e017      	b.n	18c4 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 16);
    1894:	683b      	ldr	r3, [r7, #0]
    1896:	2280      	movs	r2, #128	; 0x80
    1898:	0252      	lsls	r2, r2, #9
    189a:	4313      	orrs	r3, r2
    189c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    189e:	683a      	ldr	r2, [r7, #0]
    18a0:	1dfc      	adds	r4, r7, #7
    18a2:	23d0      	movs	r3, #208	; 0xd0
    18a4:	015b      	lsls	r3, r3, #5
    18a6:	0011      	movs	r1, r2
    18a8:	0018      	movs	r0, r3
    18aa:	4b0a      	ldr	r3, [pc, #40]	; (18d4 <enable_interrupts+0xb8>)
    18ac:	4798      	blx	r3
    18ae:	0003      	movs	r3, r0
    18b0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    18b2:	1dfb      	adds	r3, r7, #7
    18b4:	781b      	ldrb	r3, [r3, #0]
    18b6:	b25b      	sxtb	r3, r3
    18b8:	2b00      	cmp	r3, #0
    18ba:	d002      	beq.n	18c2 <enable_interrupts+0xa6>
		return M2M_ERR_BUS_FAIL;
    18bc:	2306      	movs	r3, #6
    18be:	425b      	negs	r3, r3
    18c0:	e000      	b.n	18c4 <enable_interrupts+0xa8>
	}
	return M2M_SUCCESS;
    18c2:	2300      	movs	r3, #0
}
    18c4:	0018      	movs	r0, r3
    18c6:	46bd      	mov	sp, r7
    18c8:	b003      	add	sp, #12
    18ca:	bd90      	pop	{r4, r7, pc}
    18cc:	00001408 	.word	0x00001408
    18d0:	000019f9 	.word	0x000019f9
    18d4:	00001a1d 	.word	0x00001a1d

000018d8 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    18d8:	b580      	push	{r7, lr}
    18da:	b082      	sub	sp, #8
    18dc:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    18de:	4b28      	ldr	r3, [pc, #160]	; (1980 <nmi_get_chipid+0xa8>)
    18e0:	681b      	ldr	r3, [r3, #0]
    18e2:	2b00      	cmp	r3, #0
    18e4:	d145      	bne.n	1972 <nmi_get_chipid+0x9a>
		//uint32 revid;
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    18e6:	4a26      	ldr	r2, [pc, #152]	; (1980 <nmi_get_chipid+0xa8>)
    18e8:	2380      	movs	r3, #128	; 0x80
    18ea:	015b      	lsls	r3, r3, #5
    18ec:	0011      	movs	r1, r2
    18ee:	0018      	movs	r0, r3
    18f0:	4b24      	ldr	r3, [pc, #144]	; (1984 <nmi_get_chipid+0xac>)
    18f2:	4798      	blx	r3
    18f4:	1e03      	subs	r3, r0, #0
    18f6:	d004      	beq.n	1902 <nmi_get_chipid+0x2a>
			chipid = 0;
    18f8:	4b21      	ldr	r3, [pc, #132]	; (1980 <nmi_get_chipid+0xa8>)
    18fa:	2200      	movs	r2, #0
    18fc:	601a      	str	r2, [r3, #0]
			return 0;
    18fe:	2300      	movs	r3, #0
    1900:	e039      	b.n	1976 <nmi_get_chipid+0x9e>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    1902:	1d3b      	adds	r3, r7, #4
    1904:	4a20      	ldr	r2, [pc, #128]	; (1988 <nmi_get_chipid+0xb0>)
    1906:	0019      	movs	r1, r3
    1908:	0010      	movs	r0, r2
    190a:	4b1e      	ldr	r3, [pc, #120]	; (1984 <nmi_get_chipid+0xac>)
    190c:	4798      	blx	r3
    190e:	1e03      	subs	r3, r0, #0
    1910:	d004      	beq.n	191c <nmi_get_chipid+0x44>
			chipid = 0;
    1912:	4b1b      	ldr	r3, [pc, #108]	; (1980 <nmi_get_chipid+0xa8>)
    1914:	2200      	movs	r2, #0
    1916:	601a      	str	r2, [r3, #0]
			return 0;
    1918:	2300      	movs	r3, #0
    191a:	e02c      	b.n	1976 <nmi_get_chipid+0x9e>
		}

		if (chipid == 0x1002a0)  {
    191c:	4b18      	ldr	r3, [pc, #96]	; (1980 <nmi_get_chipid+0xa8>)
    191e:	681b      	ldr	r3, [r3, #0]
    1920:	4a1a      	ldr	r2, [pc, #104]	; (198c <nmi_get_chipid+0xb4>)
    1922:	4293      	cmp	r3, r2
    1924:	d106      	bne.n	1934 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	2b01      	cmp	r3, #1
    192a:	d015      	beq.n	1958 <nmi_get_chipid+0x80>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    192c:	4b14      	ldr	r3, [pc, #80]	; (1980 <nmi_get_chipid+0xa8>)
    192e:	4a18      	ldr	r2, [pc, #96]	; (1990 <nmi_get_chipid+0xb8>)
    1930:	601a      	str	r2, [r3, #0]
    1932:	e011      	b.n	1958 <nmi_get_chipid+0x80>
			}
		} else if(chipid == 0x1002b0) {
    1934:	4b12      	ldr	r3, [pc, #72]	; (1980 <nmi_get_chipid+0xa8>)
    1936:	681b      	ldr	r3, [r3, #0]
    1938:	4a16      	ldr	r2, [pc, #88]	; (1994 <nmi_get_chipid+0xbc>)
    193a:	4293      	cmp	r3, r2
    193c:	d10c      	bne.n	1958 <nmi_get_chipid+0x80>
			if(rfrevid == 3) { /* 1002B0 */
    193e:	687b      	ldr	r3, [r7, #4]
    1940:	2b03      	cmp	r3, #3
    1942:	d009      	beq.n	1958 <nmi_get_chipid+0x80>
			} else if(rfrevid == 4) { /* 1002B1 */
    1944:	687b      	ldr	r3, [r7, #4]
    1946:	2b04      	cmp	r3, #4
    1948:	d103      	bne.n	1952 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    194a:	4b0d      	ldr	r3, [pc, #52]	; (1980 <nmi_get_chipid+0xa8>)
    194c:	4a12      	ldr	r2, [pc, #72]	; (1998 <nmi_get_chipid+0xc0>)
    194e:	601a      	str	r2, [r3, #0]
    1950:	e002      	b.n	1958 <nmi_get_chipid+0x80>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    1952:	4b0b      	ldr	r3, [pc, #44]	; (1980 <nmi_get_chipid+0xa8>)
    1954:	4a11      	ldr	r2, [pc, #68]	; (199c <nmi_get_chipid+0xc4>)
    1956:	601a      	str	r2, [r3, #0]
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    1958:	4b09      	ldr	r3, [pc, #36]	; (1980 <nmi_get_chipid+0xa8>)
    195a:	681b      	ldr	r3, [r3, #0]
    195c:	4a10      	ldr	r2, [pc, #64]	; (19a0 <nmi_get_chipid+0xc8>)
    195e:	401a      	ands	r2, r3
    1960:	4b07      	ldr	r3, [pc, #28]	; (1980 <nmi_get_chipid+0xa8>)
    1962:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    1964:	4b06      	ldr	r3, [pc, #24]	; (1980 <nmi_get_chipid+0xa8>)
    1966:	681b      	ldr	r3, [r3, #0]
    1968:	22a0      	movs	r2, #160	; 0xa0
    196a:	02d2      	lsls	r2, r2, #11
    196c:	431a      	orrs	r2, r3
    196e:	4b04      	ldr	r3, [pc, #16]	; (1980 <nmi_get_chipid+0xa8>)
    1970:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    1972:	4b03      	ldr	r3, [pc, #12]	; (1980 <nmi_get_chipid+0xa8>)
    1974:	681b      	ldr	r3, [r3, #0]
}
    1976:	0018      	movs	r0, r3
    1978:	46bd      	mov	sp, r7
    197a:	b002      	add	sp, #8
    197c:	bd80      	pop	{r7, pc}
    197e:	46c0      	nop			; (mov r8, r8)
    1980:	20000510 	.word	0x20000510
    1984:	000019f9 	.word	0x000019f9
    1988:	000013f4 	.word	0x000013f4
    198c:	001002a0 	.word	0x001002a0
    1990:	001002a1 	.word	0x001002a1
    1994:	001002b0 	.word	0x001002b0
    1998:	001002b1 	.word	0x001002b1
    199c:	001002b2 	.word	0x001002b2
    19a0:	fff0ffff 	.word	0xfff0ffff

000019a4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    19a4:	b590      	push	{r4, r7, lr}
    19a6:	b085      	sub	sp, #20
    19a8:	af00      	add	r7, sp, #0
    19aa:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    19ac:	230f      	movs	r3, #15
    19ae:	18fb      	adds	r3, r7, r3
    19b0:	2200      	movs	r2, #0
    19b2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    19b4:	230f      	movs	r3, #15
    19b6:	18fc      	adds	r4, r7, r3
    19b8:	687b      	ldr	r3, [r7, #4]
    19ba:	0018      	movs	r0, r3
    19bc:	4b05      	ldr	r3, [pc, #20]	; (19d4 <nm_bus_iface_init+0x30>)
    19be:	4798      	blx	r3
    19c0:	0003      	movs	r3, r0
    19c2:	7023      	strb	r3, [r4, #0]

	return ret;
    19c4:	230f      	movs	r3, #15
    19c6:	18fb      	adds	r3, r7, r3
    19c8:	781b      	ldrb	r3, [r3, #0]
    19ca:	b25b      	sxtb	r3, r3
}
    19cc:	0018      	movs	r0, r3
    19ce:	46bd      	mov	sp, r7
    19d0:	b005      	add	sp, #20
    19d2:	bd90      	pop	{r4, r7, pc}
    19d4:	00001665 	.word	0x00001665

000019d8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    19d8:	b580      	push	{r7, lr}
    19da:	b082      	sub	sp, #8
    19dc:	af00      	add	r7, sp, #0
    19de:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    19e0:	687b      	ldr	r3, [r7, #4]
    19e2:	0018      	movs	r0, r3
    19e4:	4b03      	ldr	r3, [pc, #12]	; (19f4 <nm_read_reg+0x1c>)
    19e6:	4798      	blx	r3
    19e8:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    19ea:	0018      	movs	r0, r3
    19ec:	46bd      	mov	sp, r7
    19ee:	b002      	add	sp, #8
    19f0:	bd80      	pop	{r7, pc}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	00002d19 	.word	0x00002d19

000019f8 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    19f8:	b580      	push	{r7, lr}
    19fa:	b082      	sub	sp, #8
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
    1a00:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    1a02:	683a      	ldr	r2, [r7, #0]
    1a04:	687b      	ldr	r3, [r7, #4]
    1a06:	0011      	movs	r1, r2
    1a08:	0018      	movs	r0, r3
    1a0a:	4b03      	ldr	r3, [pc, #12]	; (1a18 <nm_read_reg_with_ret+0x20>)
    1a0c:	4798      	blx	r3
    1a0e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1a10:	0018      	movs	r0, r3
    1a12:	46bd      	mov	sp, r7
    1a14:	b002      	add	sp, #8
    1a16:	bd80      	pop	{r7, pc}
    1a18:	00002d3d 	.word	0x00002d3d

00001a1c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1a1c:	b580      	push	{r7, lr}
    1a1e:	b082      	sub	sp, #8
    1a20:	af00      	add	r7, sp, #0
    1a22:	6078      	str	r0, [r7, #4]
    1a24:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    1a26:	683a      	ldr	r2, [r7, #0]
    1a28:	687b      	ldr	r3, [r7, #4]
    1a2a:	0011      	movs	r1, r2
    1a2c:	0018      	movs	r0, r3
    1a2e:	4b03      	ldr	r3, [pc, #12]	; (1a3c <nm_write_reg+0x20>)
    1a30:	4798      	blx	r3
    1a32:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    1a34:	0018      	movs	r0, r3
    1a36:	46bd      	mov	sp, r7
    1a38:	b002      	add	sp, #8
    1a3a:	bd80      	pop	{r7, pc}
    1a3c:	00002d8d 	.word	0x00002d8d

00001a40 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    1a40:	b580      	push	{r7, lr}
    1a42:	b084      	sub	sp, #16
    1a44:	af00      	add	r7, sp, #0
    1a46:	60f8      	str	r0, [r7, #12]
    1a48:	60b9      	str	r1, [r7, #8]
    1a4a:	1dbb      	adds	r3, r7, #6
    1a4c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1a4e:	1dbb      	adds	r3, r7, #6
    1a50:	881a      	ldrh	r2, [r3, #0]
    1a52:	68b9      	ldr	r1, [r7, #8]
    1a54:	68fb      	ldr	r3, [r7, #12]
    1a56:	0018      	movs	r0, r3
    1a58:	4b03      	ldr	r3, [pc, #12]	; (1a68 <p_nm_read_block+0x28>)
    1a5a:	4798      	blx	r3
    1a5c:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    1a5e:	0018      	movs	r0, r3
    1a60:	46bd      	mov	sp, r7
    1a62:	b004      	add	sp, #16
    1a64:	bd80      	pop	{r7, pc}
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	00002ddd 	.word	0x00002ddd

00001a6c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1a6c:	b580      	push	{r7, lr}
    1a6e:	b086      	sub	sp, #24
    1a70:	af00      	add	r7, sp, #0
    1a72:	60f8      	str	r0, [r7, #12]
    1a74:	60b9      	str	r1, [r7, #8]
    1a76:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1a78:	4b2d      	ldr	r3, [pc, #180]	; (1b30 <nm_read_block+0xc4>)
    1a7a:	881a      	ldrh	r2, [r3, #0]
    1a7c:	2310      	movs	r3, #16
    1a7e:	18fb      	adds	r3, r7, r3
    1a80:	3a08      	subs	r2, #8
    1a82:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    1a84:	2300      	movs	r3, #0
    1a86:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    1a88:	2313      	movs	r3, #19
    1a8a:	18fb      	adds	r3, r7, r3
    1a8c:	2200      	movs	r2, #0
    1a8e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a90:	2310      	movs	r3, #16
    1a92:	18fb      	adds	r3, r7, r3
    1a94:	881a      	ldrh	r2, [r3, #0]
    1a96:	687b      	ldr	r3, [r7, #4]
    1a98:	429a      	cmp	r2, r3
    1a9a:	d313      	bcc.n	1ac4 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1a9c:	68ba      	ldr	r2, [r7, #8]
    1a9e:	697b      	ldr	r3, [r7, #20]
    1aa0:	18d1      	adds	r1, r2, r3
    1aa2:	687b      	ldr	r3, [r7, #4]
    1aa4:	b29a      	uxth	r2, r3
    1aa6:	68fb      	ldr	r3, [r7, #12]
    1aa8:	0018      	movs	r0, r3
    1aaa:	4b22      	ldr	r3, [pc, #136]	; (1b34 <nm_read_block+0xc8>)
    1aac:	4798      	blx	r3
    1aae:	0003      	movs	r3, r0
    1ab0:	b2da      	uxtb	r2, r3
    1ab2:	2313      	movs	r3, #19
    1ab4:	18fb      	adds	r3, r7, r3
    1ab6:	781b      	ldrb	r3, [r3, #0]
    1ab8:	18d3      	adds	r3, r2, r3
    1aba:	b2da      	uxtb	r2, r3
    1abc:	2313      	movs	r3, #19
    1abe:	18fb      	adds	r3, r7, r3
    1ac0:	701a      	strb	r2, [r3, #0]
			break;
    1ac2:	e02d      	b.n	1b20 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    1ac4:	68ba      	ldr	r2, [r7, #8]
    1ac6:	697b      	ldr	r3, [r7, #20]
    1ac8:	18d1      	adds	r1, r2, r3
    1aca:	2310      	movs	r3, #16
    1acc:	18fb      	adds	r3, r7, r3
    1ace:	881a      	ldrh	r2, [r3, #0]
    1ad0:	68fb      	ldr	r3, [r7, #12]
    1ad2:	0018      	movs	r0, r3
    1ad4:	4b17      	ldr	r3, [pc, #92]	; (1b34 <nm_read_block+0xc8>)
    1ad6:	4798      	blx	r3
    1ad8:	0003      	movs	r3, r0
    1ada:	b2da      	uxtb	r2, r3
    1adc:	2313      	movs	r3, #19
    1ade:	18fb      	adds	r3, r7, r3
    1ae0:	781b      	ldrb	r3, [r3, #0]
    1ae2:	18d3      	adds	r3, r2, r3
    1ae4:	b2da      	uxtb	r2, r3
    1ae6:	2313      	movs	r3, #19
    1ae8:	18fb      	adds	r3, r7, r3
    1aea:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    1aec:	2313      	movs	r3, #19
    1aee:	18fb      	adds	r3, r7, r3
    1af0:	781b      	ldrb	r3, [r3, #0]
    1af2:	b25b      	sxtb	r3, r3
    1af4:	2b00      	cmp	r3, #0
    1af6:	d112      	bne.n	1b1e <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    1af8:	2310      	movs	r3, #16
    1afa:	18fb      	adds	r3, r7, r3
    1afc:	881b      	ldrh	r3, [r3, #0]
    1afe:	687a      	ldr	r2, [r7, #4]
    1b00:	1ad3      	subs	r3, r2, r3
    1b02:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    1b04:	2310      	movs	r3, #16
    1b06:	18fb      	adds	r3, r7, r3
    1b08:	881b      	ldrh	r3, [r3, #0]
    1b0a:	697a      	ldr	r2, [r7, #20]
    1b0c:	18d3      	adds	r3, r2, r3
    1b0e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    1b10:	2310      	movs	r3, #16
    1b12:	18fb      	adds	r3, r7, r3
    1b14:	881b      	ldrh	r3, [r3, #0]
    1b16:	68fa      	ldr	r2, [r7, #12]
    1b18:	18d3      	adds	r3, r2, r3
    1b1a:	60fb      	str	r3, [r7, #12]
		}
	}
    1b1c:	e7b8      	b.n	1a90 <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1b1e:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    1b20:	2313      	movs	r3, #19
    1b22:	18fb      	adds	r3, r7, r3
    1b24:	781b      	ldrb	r3, [r3, #0]
    1b26:	b25b      	sxtb	r3, r3
}
    1b28:	0018      	movs	r0, r3
    1b2a:	46bd      	mov	sp, r7
    1b2c:	b006      	add	sp, #24
    1b2e:	bd80      	pop	{r7, pc}
    1b30:	20000000 	.word	0x20000000
    1b34:	00001a41 	.word	0x00001a41

00001b38 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    1b38:	b580      	push	{r7, lr}
    1b3a:	b084      	sub	sp, #16
    1b3c:	af00      	add	r7, sp, #0
    1b3e:	60f8      	str	r0, [r7, #12]
    1b40:	60b9      	str	r1, [r7, #8]
    1b42:	1dbb      	adds	r3, r7, #6
    1b44:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1b46:	1dbb      	adds	r3, r7, #6
    1b48:	881a      	ldrh	r2, [r3, #0]
    1b4a:	68b9      	ldr	r1, [r7, #8]
    1b4c:	68fb      	ldr	r3, [r7, #12]
    1b4e:	0018      	movs	r0, r3
    1b50:	4b03      	ldr	r3, [pc, #12]	; (1b60 <p_nm_write_block+0x28>)
    1b52:	4798      	blx	r3
    1b54:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    1b56:	0018      	movs	r0, r3
    1b58:	46bd      	mov	sp, r7
    1b5a:	b004      	add	sp, #16
    1b5c:	bd80      	pop	{r7, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	00002e35 	.word	0x00002e35

00001b64 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1b64:	b580      	push	{r7, lr}
    1b66:	b086      	sub	sp, #24
    1b68:	af00      	add	r7, sp, #0
    1b6a:	60f8      	str	r0, [r7, #12]
    1b6c:	60b9      	str	r1, [r7, #8]
    1b6e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1b70:	4b2d      	ldr	r3, [pc, #180]	; (1c28 <nm_write_block+0xc4>)
    1b72:	881a      	ldrh	r2, [r3, #0]
    1b74:	2310      	movs	r3, #16
    1b76:	18fb      	adds	r3, r7, r3
    1b78:	3a08      	subs	r2, #8
    1b7a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    1b7c:	2300      	movs	r3, #0
    1b7e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    1b80:	2313      	movs	r3, #19
    1b82:	18fb      	adds	r3, r7, r3
    1b84:	2200      	movs	r2, #0
    1b86:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1b88:	2310      	movs	r3, #16
    1b8a:	18fb      	adds	r3, r7, r3
    1b8c:	881a      	ldrh	r2, [r3, #0]
    1b8e:	687b      	ldr	r3, [r7, #4]
    1b90:	429a      	cmp	r2, r3
    1b92:	d313      	bcc.n	1bbc <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1b94:	68ba      	ldr	r2, [r7, #8]
    1b96:	697b      	ldr	r3, [r7, #20]
    1b98:	18d1      	adds	r1, r2, r3
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	b29a      	uxth	r2, r3
    1b9e:	68fb      	ldr	r3, [r7, #12]
    1ba0:	0018      	movs	r0, r3
    1ba2:	4b22      	ldr	r3, [pc, #136]	; (1c2c <nm_write_block+0xc8>)
    1ba4:	4798      	blx	r3
    1ba6:	0003      	movs	r3, r0
    1ba8:	b2da      	uxtb	r2, r3
    1baa:	2313      	movs	r3, #19
    1bac:	18fb      	adds	r3, r7, r3
    1bae:	781b      	ldrb	r3, [r3, #0]
    1bb0:	18d3      	adds	r3, r2, r3
    1bb2:	b2da      	uxtb	r2, r3
    1bb4:	2313      	movs	r3, #19
    1bb6:	18fb      	adds	r3, r7, r3
    1bb8:	701a      	strb	r2, [r3, #0]
			break;
    1bba:	e02d      	b.n	1c18 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    1bbc:	68ba      	ldr	r2, [r7, #8]
    1bbe:	697b      	ldr	r3, [r7, #20]
    1bc0:	18d1      	adds	r1, r2, r3
    1bc2:	2310      	movs	r3, #16
    1bc4:	18fb      	adds	r3, r7, r3
    1bc6:	881a      	ldrh	r2, [r3, #0]
    1bc8:	68fb      	ldr	r3, [r7, #12]
    1bca:	0018      	movs	r0, r3
    1bcc:	4b17      	ldr	r3, [pc, #92]	; (1c2c <nm_write_block+0xc8>)
    1bce:	4798      	blx	r3
    1bd0:	0003      	movs	r3, r0
    1bd2:	b2da      	uxtb	r2, r3
    1bd4:	2313      	movs	r3, #19
    1bd6:	18fb      	adds	r3, r7, r3
    1bd8:	781b      	ldrb	r3, [r3, #0]
    1bda:	18d3      	adds	r3, r2, r3
    1bdc:	b2da      	uxtb	r2, r3
    1bde:	2313      	movs	r3, #19
    1be0:	18fb      	adds	r3, r7, r3
    1be2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    1be4:	2313      	movs	r3, #19
    1be6:	18fb      	adds	r3, r7, r3
    1be8:	781b      	ldrb	r3, [r3, #0]
    1bea:	b25b      	sxtb	r3, r3
    1bec:	2b00      	cmp	r3, #0
    1bee:	d112      	bne.n	1c16 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    1bf0:	2310      	movs	r3, #16
    1bf2:	18fb      	adds	r3, r7, r3
    1bf4:	881b      	ldrh	r3, [r3, #0]
    1bf6:	687a      	ldr	r2, [r7, #4]
    1bf8:	1ad3      	subs	r3, r2, r3
    1bfa:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    1bfc:	2310      	movs	r3, #16
    1bfe:	18fb      	adds	r3, r7, r3
    1c00:	881b      	ldrh	r3, [r3, #0]
    1c02:	697a      	ldr	r2, [r7, #20]
    1c04:	18d3      	adds	r3, r2, r3
    1c06:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    1c08:	2310      	movs	r3, #16
    1c0a:	18fb      	adds	r3, r7, r3
    1c0c:	881b      	ldrh	r3, [r3, #0]
    1c0e:	68fa      	ldr	r2, [r7, #12]
    1c10:	18d3      	adds	r3, r2, r3
    1c12:	60fb      	str	r3, [r7, #12]
		}
	}
    1c14:	e7b8      	b.n	1b88 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1c16:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    1c18:	2313      	movs	r3, #19
    1c1a:	18fb      	adds	r3, r7, r3
    1c1c:	781b      	ldrb	r3, [r3, #0]
    1c1e:	b25b      	sxtb	r3, r3
}
    1c20:	0018      	movs	r0, r3
    1c22:	46bd      	mov	sp, r7
    1c24:	b006      	add	sp, #24
    1c26:	bd80      	pop	{r7, pc}
    1c28:	20000000 	.word	0x20000000
    1c2c:	00001b39 	.word	0x00001b39

00001c30 <nm_drv_init_download_mode>:
*	@author	Viswanathan Murugesan
*	@date	10 Oct 2014
*	@version	1.0
*/
sint8 nm_drv_init_download_mode()
{
    1c30:	b590      	push	{r4, r7, lr}
    1c32:	b083      	sub	sp, #12
    1c34:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    1c36:	1dfb      	adds	r3, r7, #7
    1c38:	2200      	movs	r2, #0
    1c3a:	701a      	strb	r2, [r3, #0]

	ret = nm_bus_iface_init(NULL);
    1c3c:	1dfc      	adds	r4, r7, #7
    1c3e:	2000      	movs	r0, #0
    1c40:	4b19      	ldr	r3, [pc, #100]	; (1ca8 <nm_drv_init_download_mode+0x78>)
    1c42:	4798      	blx	r3
    1c44:	0003      	movs	r3, r0
    1c46:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    1c48:	1dfb      	adds	r3, r7, #7
    1c4a:	781b      	ldrb	r3, [r3, #0]
    1c4c:	b25b      	sxtb	r3, r3
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d00d      	beq.n	1c6e <nm_drv_init_download_mode+0x3e>
		M2M_ERR("[nmi start]: fail init bus\n");
    1c52:	4916      	ldr	r1, [pc, #88]	; (1cac <nm_drv_init_download_mode+0x7c>)
    1c54:	4b16      	ldr	r3, [pc, #88]	; (1cb0 <nm_drv_init_download_mode+0x80>)
    1c56:	2275      	movs	r2, #117	; 0x75
    1c58:	0018      	movs	r0, r3
    1c5a:	4b16      	ldr	r3, [pc, #88]	; (1cb4 <nm_drv_init_download_mode+0x84>)
    1c5c:	4798      	blx	r3
    1c5e:	4b16      	ldr	r3, [pc, #88]	; (1cb8 <nm_drv_init_download_mode+0x88>)
    1c60:	0018      	movs	r0, r3
    1c62:	4b16      	ldr	r3, [pc, #88]	; (1cbc <nm_drv_init_download_mode+0x8c>)
    1c64:	4798      	blx	r3
    1c66:	200d      	movs	r0, #13
    1c68:	4b15      	ldr	r3, [pc, #84]	; (1cc0 <nm_drv_init_download_mode+0x90>)
    1c6a:	4798      	blx	r3
		goto ERR1;
    1c6c:	e015      	b.n	1c9a <nm_drv_init_download_mode+0x6a>
	}


#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1c6e:	4b15      	ldr	r3, [pc, #84]	; (1cc4 <nm_drv_init_download_mode+0x94>)
    1c70:	4798      	blx	r3
#endif

	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1c72:	4b15      	ldr	r3, [pc, #84]	; (1cc8 <nm_drv_init_download_mode+0x98>)
    1c74:	0018      	movs	r0, r3
    1c76:	4b0f      	ldr	r3, [pc, #60]	; (1cb4 <nm_drv_init_download_mode+0x84>)
    1c78:	4798      	blx	r3
    1c7a:	4b14      	ldr	r3, [pc, #80]	; (1ccc <nm_drv_init_download_mode+0x9c>)
    1c7c:	4798      	blx	r3
    1c7e:	0002      	movs	r2, r0
    1c80:	4b13      	ldr	r3, [pc, #76]	; (1cd0 <nm_drv_init_download_mode+0xa0>)
    1c82:	0011      	movs	r1, r2
    1c84:	0018      	movs	r0, r3
    1c86:	4b0b      	ldr	r3, [pc, #44]	; (1cb4 <nm_drv_init_download_mode+0x84>)
    1c88:	4798      	blx	r3
    1c8a:	200d      	movs	r0, #13
    1c8c:	4b0c      	ldr	r3, [pc, #48]	; (1cc0 <nm_drv_init_download_mode+0x90>)
    1c8e:	4798      	blx	r3

	/*disable all interrupt in ROM (to disable uart) in 2b0 chip*/
	nm_write_reg(0x20300,0);
    1c90:	4b10      	ldr	r3, [pc, #64]	; (1cd4 <nm_drv_init_download_mode+0xa4>)
    1c92:	2100      	movs	r1, #0
    1c94:	0018      	movs	r0, r3
    1c96:	4b10      	ldr	r3, [pc, #64]	; (1cd8 <nm_drv_init_download_mode+0xa8>)
    1c98:	4798      	blx	r3

ERR1:
	return ret;
    1c9a:	1dfb      	adds	r3, r7, #7
    1c9c:	781b      	ldrb	r3, [r3, #0]
    1c9e:	b25b      	sxtb	r3, r3
}
    1ca0:	0018      	movs	r0, r3
    1ca2:	46bd      	mov	sp, r7
    1ca4:	b003      	add	sp, #12
    1ca6:	bd90      	pop	{r4, r7, pc}
    1ca8:	000019a5 	.word	0x000019a5
    1cac:	00007c38 	.word	0x00007c38
    1cb0:	00007b00 	.word	0x00007b00
    1cb4:	000068f1 	.word	0x000068f1
    1cb8:	00007b14 	.word	0x00007b14
    1cbc:	00006a11 	.word	0x00006a11
    1cc0:	00006925 	.word	0x00006925
    1cc4:	00002bd1 	.word	0x00002bd1
    1cc8:	00007b30 	.word	0x00007b30
    1ccc:	000018d9 	.word	0x000018d9
    1cd0:	00007b3c 	.word	0x00007b3c
    1cd4:	00020300 	.word	0x00020300
    1cd8:	00001a1d 	.word	0x00001a1d

00001cdc <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    1cdc:	b580      	push	{r7, lr}
    1cde:	b086      	sub	sp, #24
    1ce0:	af00      	add	r7, sp, #0
    1ce2:	6078      	str	r0, [r7, #4]
    1ce4:	000a      	movs	r2, r1
    1ce6:	1cbb      	adds	r3, r7, #2
    1ce8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    1cea:	230c      	movs	r3, #12
    1cec:	18fb      	adds	r3, r7, r3
    1cee:	2200      	movs	r2, #0
    1cf0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    1cf2:	230c      	movs	r3, #12
    1cf4:	18fb      	adds	r3, r7, r3
    1cf6:	687a      	ldr	r2, [r7, #4]
    1cf8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    1cfa:	230c      	movs	r3, #12
    1cfc:	18fb      	adds	r3, r7, r3
    1cfe:	1cba      	adds	r2, r7, #2
    1d00:	8812      	ldrh	r2, [r2, #0]
    1d02:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1d04:	230c      	movs	r3, #12
    1d06:	18fb      	adds	r3, r7, r3
    1d08:	0019      	movs	r1, r3
    1d0a:	2003      	movs	r0, #3
    1d0c:	4b03      	ldr	r3, [pc, #12]	; (1d1c <nmi_spi_read+0x40>)
    1d0e:	4798      	blx	r3
    1d10:	0003      	movs	r3, r0
}
    1d12:	0018      	movs	r0, r3
    1d14:	46bd      	mov	sp, r7
    1d16:	b006      	add	sp, #24
    1d18:	bd80      	pop	{r7, pc}
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	0000174d 	.word	0x0000174d

00001d20 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1d20:	b580      	push	{r7, lr}
    1d22:	b086      	sub	sp, #24
    1d24:	af00      	add	r7, sp, #0
    1d26:	6078      	str	r0, [r7, #4]
    1d28:	000a      	movs	r2, r1
    1d2a:	1cbb      	adds	r3, r7, #2
    1d2c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1d2e:	230c      	movs	r3, #12
    1d30:	18fb      	adds	r3, r7, r3
    1d32:	687a      	ldr	r2, [r7, #4]
    1d34:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    1d36:	230c      	movs	r3, #12
    1d38:	18fb      	adds	r3, r7, r3
    1d3a:	2200      	movs	r2, #0
    1d3c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    1d3e:	230c      	movs	r3, #12
    1d40:	18fb      	adds	r3, r7, r3
    1d42:	1cba      	adds	r2, r7, #2
    1d44:	8812      	ldrh	r2, [r2, #0]
    1d46:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1d48:	230c      	movs	r3, #12
    1d4a:	18fb      	adds	r3, r7, r3
    1d4c:	0019      	movs	r1, r3
    1d4e:	2003      	movs	r0, #3
    1d50:	4b03      	ldr	r3, [pc, #12]	; (1d60 <nmi_spi_write+0x40>)
    1d52:	4798      	blx	r3
    1d54:	0003      	movs	r3, r0
}
    1d56:	0018      	movs	r0, r3
    1d58:	46bd      	mov	sp, r7
    1d5a:	b006      	add	sp, #24
    1d5c:	bd80      	pop	{r7, pc}
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	0000174d 	.word	0x0000174d

00001d64 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    1d64:	b580      	push	{r7, lr}
    1d66:	b082      	sub	sp, #8
    1d68:	af00      	add	r7, sp, #0
    1d6a:	0002      	movs	r2, r0
    1d6c:	1dfb      	adds	r3, r7, #7
    1d6e:	701a      	strb	r2, [r3, #0]
    1d70:	1dbb      	adds	r3, r7, #6
    1d72:	1c0a      	adds	r2, r1, #0
    1d74:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    1d76:	1dfb      	adds	r3, r7, #7
    1d78:	781b      	ldrb	r3, [r3, #0]
    1d7a:	005a      	lsls	r2, r3, #1
    1d7c:	1dbb      	adds	r3, r7, #6
    1d7e:	781b      	ldrb	r3, [r3, #0]
    1d80:	4053      	eors	r3, r2
    1d82:	4a03      	ldr	r2, [pc, #12]	; (1d90 <crc7_byte+0x2c>)
    1d84:	5cd3      	ldrb	r3, [r2, r3]
}
    1d86:	0018      	movs	r0, r3
    1d88:	46bd      	mov	sp, r7
    1d8a:	b002      	add	sp, #8
    1d8c:	bd80      	pop	{r7, pc}
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	00007c54 	.word	0x00007c54

00001d94 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    1d94:	b590      	push	{r4, r7, lr}
    1d96:	b085      	sub	sp, #20
    1d98:	af00      	add	r7, sp, #0
    1d9a:	60b9      	str	r1, [r7, #8]
    1d9c:	607a      	str	r2, [r7, #4]
    1d9e:	230f      	movs	r3, #15
    1da0:	18fb      	adds	r3, r7, r3
    1da2:	1c02      	adds	r2, r0, #0
    1da4:	701a      	strb	r2, [r3, #0]
	while (len--)
    1da6:	e00e      	b.n	1dc6 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    1da8:	68bb      	ldr	r3, [r7, #8]
    1daa:	1c5a      	adds	r2, r3, #1
    1dac:	60ba      	str	r2, [r7, #8]
    1dae:	781a      	ldrb	r2, [r3, #0]
    1db0:	230f      	movs	r3, #15
    1db2:	18fc      	adds	r4, r7, r3
    1db4:	230f      	movs	r3, #15
    1db6:	18fb      	adds	r3, r7, r3
    1db8:	781b      	ldrb	r3, [r3, #0]
    1dba:	0011      	movs	r1, r2
    1dbc:	0018      	movs	r0, r3
    1dbe:	4b08      	ldr	r3, [pc, #32]	; (1de0 <crc7+0x4c>)
    1dc0:	4798      	blx	r3
    1dc2:	0003      	movs	r3, r0
    1dc4:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    1dc6:	687b      	ldr	r3, [r7, #4]
    1dc8:	1e5a      	subs	r2, r3, #1
    1dca:	607a      	str	r2, [r7, #4]
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d1eb      	bne.n	1da8 <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    1dd0:	230f      	movs	r3, #15
    1dd2:	18fb      	adds	r3, r7, r3
    1dd4:	781b      	ldrb	r3, [r3, #0]
}
    1dd6:	0018      	movs	r0, r3
    1dd8:	46bd      	mov	sp, r7
    1dda:	b005      	add	sp, #20
    1ddc:	bd90      	pop	{r4, r7, pc}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	00001d65 	.word	0x00001d65

00001de4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1de4:	b590      	push	{r4, r7, lr}
    1de6:	b089      	sub	sp, #36	; 0x24
    1de8:	af00      	add	r7, sp, #0
    1dea:	60b9      	str	r1, [r7, #8]
    1dec:	607a      	str	r2, [r7, #4]
    1dee:	603b      	str	r3, [r7, #0]
    1df0:	230f      	movs	r3, #15
    1df2:	18fb      	adds	r3, r7, r3
    1df4:	1c02      	adds	r2, r0, #0
    1df6:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    1df8:	231f      	movs	r3, #31
    1dfa:	18fb      	adds	r3, r7, r3
    1dfc:	2205      	movs	r2, #5
    1dfe:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    1e00:	231e      	movs	r3, #30
    1e02:	18fb      	adds	r3, r7, r3
    1e04:	2201      	movs	r2, #1
    1e06:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    1e08:	2314      	movs	r3, #20
    1e0a:	18fb      	adds	r3, r7, r3
    1e0c:	220f      	movs	r2, #15
    1e0e:	18ba      	adds	r2, r7, r2
    1e10:	7812      	ldrb	r2, [r2, #0]
    1e12:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    1e14:	230f      	movs	r3, #15
    1e16:	18fb      	adds	r3, r7, r3
    1e18:	781b      	ldrb	r3, [r3, #0]
    1e1a:	3bc1      	subs	r3, #193	; 0xc1
    1e1c:	2b0e      	cmp	r3, #14
    1e1e:	d900      	bls.n	1e22 <spi_cmd+0x3e>
    1e20:	e11b      	b.n	205a <STACK_SIZE+0x5a>
    1e22:	009a      	lsls	r2, r3, #2
    1e24:	4bb6      	ldr	r3, [pc, #728]	; (2100 <STACK_SIZE+0x100>)
    1e26:	18d3      	adds	r3, r2, r3
    1e28:	681b      	ldr	r3, [r3, #0]
    1e2a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    1e2c:	68bb      	ldr	r3, [r7, #8]
    1e2e:	0c1b      	lsrs	r3, r3, #16
    1e30:	b2da      	uxtb	r2, r3
    1e32:	2314      	movs	r3, #20
    1e34:	18fb      	adds	r3, r7, r3
    1e36:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1e38:	68bb      	ldr	r3, [r7, #8]
    1e3a:	0a1b      	lsrs	r3, r3, #8
    1e3c:	b2da      	uxtb	r2, r3
    1e3e:	2314      	movs	r3, #20
    1e40:	18fb      	adds	r3, r7, r3
    1e42:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1e44:	68bb      	ldr	r3, [r7, #8]
    1e46:	b2da      	uxtb	r2, r3
    1e48:	2314      	movs	r3, #20
    1e4a:	18fb      	adds	r3, r7, r3
    1e4c:	70da      	strb	r2, [r3, #3]
		len = 5;
    1e4e:	231f      	movs	r3, #31
    1e50:	18fb      	adds	r3, r7, r3
    1e52:	2205      	movs	r2, #5
    1e54:	701a      	strb	r2, [r3, #0]
		break;
    1e56:	e105      	b.n	2064 <STACK_SIZE+0x64>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    1e58:	68bb      	ldr	r3, [r7, #8]
    1e5a:	0a1b      	lsrs	r3, r3, #8
    1e5c:	b2da      	uxtb	r2, r3
    1e5e:	2314      	movs	r3, #20
    1e60:	18fb      	adds	r3, r7, r3
    1e62:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    1e64:	2330      	movs	r3, #48	; 0x30
    1e66:	18fb      	adds	r3, r7, r3
    1e68:	781b      	ldrb	r3, [r3, #0]
    1e6a:	2b00      	cmp	r3, #0
    1e6c:	d009      	beq.n	1e82 <spi_cmd+0x9e>
    1e6e:	2314      	movs	r3, #20
    1e70:	18fb      	adds	r3, r7, r3
    1e72:	785b      	ldrb	r3, [r3, #1]
    1e74:	2280      	movs	r2, #128	; 0x80
    1e76:	4252      	negs	r2, r2
    1e78:	4313      	orrs	r3, r2
    1e7a:	b2da      	uxtb	r2, r3
    1e7c:	2314      	movs	r3, #20
    1e7e:	18fb      	adds	r3, r7, r3
    1e80:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    1e82:	68bb      	ldr	r3, [r7, #8]
    1e84:	b2da      	uxtb	r2, r3
    1e86:	2314      	movs	r3, #20
    1e88:	18fb      	adds	r3, r7, r3
    1e8a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1e8c:	2314      	movs	r3, #20
    1e8e:	18fb      	adds	r3, r7, r3
    1e90:	2200      	movs	r2, #0
    1e92:	70da      	strb	r2, [r3, #3]
		len = 5;
    1e94:	231f      	movs	r3, #31
    1e96:	18fb      	adds	r3, r7, r3
    1e98:	2205      	movs	r2, #5
    1e9a:	701a      	strb	r2, [r3, #0]
		break;
    1e9c:	e0e2      	b.n	2064 <STACK_SIZE+0x64>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    1e9e:	2314      	movs	r3, #20
    1ea0:	18fb      	adds	r3, r7, r3
    1ea2:	2200      	movs	r2, #0
    1ea4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1ea6:	2314      	movs	r3, #20
    1ea8:	18fb      	adds	r3, r7, r3
    1eaa:	2200      	movs	r2, #0
    1eac:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1eae:	2314      	movs	r3, #20
    1eb0:	18fb      	adds	r3, r7, r3
    1eb2:	2200      	movs	r2, #0
    1eb4:	70da      	strb	r2, [r3, #3]
		len = 5;
    1eb6:	231f      	movs	r3, #31
    1eb8:	18fb      	adds	r3, r7, r3
    1eba:	2205      	movs	r2, #5
    1ebc:	701a      	strb	r2, [r3, #0]
		break;
    1ebe:	e0d1      	b.n	2064 <STACK_SIZE+0x64>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    1ec0:	2314      	movs	r3, #20
    1ec2:	18fb      	adds	r3, r7, r3
    1ec4:	2200      	movs	r2, #0
    1ec6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1ec8:	2314      	movs	r3, #20
    1eca:	18fb      	adds	r3, r7, r3
    1ecc:	2200      	movs	r2, #0
    1ece:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1ed0:	2314      	movs	r3, #20
    1ed2:	18fb      	adds	r3, r7, r3
    1ed4:	2200      	movs	r2, #0
    1ed6:	70da      	strb	r2, [r3, #3]
		len = 5;
    1ed8:	231f      	movs	r3, #31
    1eda:	18fb      	adds	r3, r7, r3
    1edc:	2205      	movs	r2, #5
    1ede:	701a      	strb	r2, [r3, #0]
		break;
    1ee0:	e0c0      	b.n	2064 <STACK_SIZE+0x64>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    1ee2:	2314      	movs	r3, #20
    1ee4:	18fb      	adds	r3, r7, r3
    1ee6:	22ff      	movs	r2, #255	; 0xff
    1ee8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    1eea:	2314      	movs	r3, #20
    1eec:	18fb      	adds	r3, r7, r3
    1eee:	22ff      	movs	r2, #255	; 0xff
    1ef0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    1ef2:	2314      	movs	r3, #20
    1ef4:	18fb      	adds	r3, r7, r3
    1ef6:	22ff      	movs	r2, #255	; 0xff
    1ef8:	70da      	strb	r2, [r3, #3]
		len = 5;
    1efa:	231f      	movs	r3, #31
    1efc:	18fb      	adds	r3, r7, r3
    1efe:	2205      	movs	r2, #5
    1f00:	701a      	strb	r2, [r3, #0]
		break;
    1f02:	e0af      	b.n	2064 <STACK_SIZE+0x64>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    1f04:	68bb      	ldr	r3, [r7, #8]
    1f06:	0c1b      	lsrs	r3, r3, #16
    1f08:	b2da      	uxtb	r2, r3
    1f0a:	2314      	movs	r3, #20
    1f0c:	18fb      	adds	r3, r7, r3
    1f0e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1f10:	68bb      	ldr	r3, [r7, #8]
    1f12:	0a1b      	lsrs	r3, r3, #8
    1f14:	b2da      	uxtb	r2, r3
    1f16:	2314      	movs	r3, #20
    1f18:	18fb      	adds	r3, r7, r3
    1f1a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1f1c:	68bb      	ldr	r3, [r7, #8]
    1f1e:	b2da      	uxtb	r2, r3
    1f20:	2314      	movs	r3, #20
    1f22:	18fb      	adds	r3, r7, r3
    1f24:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    1f26:	683b      	ldr	r3, [r7, #0]
    1f28:	0a1b      	lsrs	r3, r3, #8
    1f2a:	b2da      	uxtb	r2, r3
    1f2c:	2314      	movs	r3, #20
    1f2e:	18fb      	adds	r3, r7, r3
    1f30:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    1f32:	683b      	ldr	r3, [r7, #0]
    1f34:	b2da      	uxtb	r2, r3
    1f36:	2314      	movs	r3, #20
    1f38:	18fb      	adds	r3, r7, r3
    1f3a:	715a      	strb	r2, [r3, #5]
		len = 7;
    1f3c:	231f      	movs	r3, #31
    1f3e:	18fb      	adds	r3, r7, r3
    1f40:	2207      	movs	r2, #7
    1f42:	701a      	strb	r2, [r3, #0]
		break;
    1f44:	e08e      	b.n	2064 <STACK_SIZE+0x64>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    1f46:	68bb      	ldr	r3, [r7, #8]
    1f48:	0c1b      	lsrs	r3, r3, #16
    1f4a:	b2da      	uxtb	r2, r3
    1f4c:	2314      	movs	r3, #20
    1f4e:	18fb      	adds	r3, r7, r3
    1f50:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1f52:	68bb      	ldr	r3, [r7, #8]
    1f54:	0a1b      	lsrs	r3, r3, #8
    1f56:	b2da      	uxtb	r2, r3
    1f58:	2314      	movs	r3, #20
    1f5a:	18fb      	adds	r3, r7, r3
    1f5c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1f5e:	68bb      	ldr	r3, [r7, #8]
    1f60:	b2da      	uxtb	r2, r3
    1f62:	2314      	movs	r3, #20
    1f64:	18fb      	adds	r3, r7, r3
    1f66:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    1f68:	683b      	ldr	r3, [r7, #0]
    1f6a:	0c1b      	lsrs	r3, r3, #16
    1f6c:	b2da      	uxtb	r2, r3
    1f6e:	2314      	movs	r3, #20
    1f70:	18fb      	adds	r3, r7, r3
    1f72:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    1f74:	683b      	ldr	r3, [r7, #0]
    1f76:	0a1b      	lsrs	r3, r3, #8
    1f78:	b2da      	uxtb	r2, r3
    1f7a:	2314      	movs	r3, #20
    1f7c:	18fb      	adds	r3, r7, r3
    1f7e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    1f80:	683b      	ldr	r3, [r7, #0]
    1f82:	b2da      	uxtb	r2, r3
    1f84:	2314      	movs	r3, #20
    1f86:	18fb      	adds	r3, r7, r3
    1f88:	719a      	strb	r2, [r3, #6]
		len = 8;
    1f8a:	231f      	movs	r3, #31
    1f8c:	18fb      	adds	r3, r7, r3
    1f8e:	2208      	movs	r2, #8
    1f90:	701a      	strb	r2, [r3, #0]
		break;
    1f92:	e067      	b.n	2064 <STACK_SIZE+0x64>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    1f94:	68bb      	ldr	r3, [r7, #8]
    1f96:	0a1b      	lsrs	r3, r3, #8
    1f98:	b2da      	uxtb	r2, r3
    1f9a:	2314      	movs	r3, #20
    1f9c:	18fb      	adds	r3, r7, r3
    1f9e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    1fa0:	2330      	movs	r3, #48	; 0x30
    1fa2:	18fb      	adds	r3, r7, r3
    1fa4:	781b      	ldrb	r3, [r3, #0]
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d009      	beq.n	1fbe <spi_cmd+0x1da>
    1faa:	2314      	movs	r3, #20
    1fac:	18fb      	adds	r3, r7, r3
    1fae:	785b      	ldrb	r3, [r3, #1]
    1fb0:	2280      	movs	r2, #128	; 0x80
    1fb2:	4252      	negs	r2, r2
    1fb4:	4313      	orrs	r3, r2
    1fb6:	b2da      	uxtb	r2, r3
    1fb8:	2314      	movs	r3, #20
    1fba:	18fb      	adds	r3, r7, r3
    1fbc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    1fbe:	68bb      	ldr	r3, [r7, #8]
    1fc0:	b2da      	uxtb	r2, r3
    1fc2:	2314      	movs	r3, #20
    1fc4:	18fb      	adds	r3, r7, r3
    1fc6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    1fc8:	687b      	ldr	r3, [r7, #4]
    1fca:	0e1b      	lsrs	r3, r3, #24
    1fcc:	b2da      	uxtb	r2, r3
    1fce:	2314      	movs	r3, #20
    1fd0:	18fb      	adds	r3, r7, r3
    1fd2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    1fd4:	687b      	ldr	r3, [r7, #4]
    1fd6:	0c1b      	lsrs	r3, r3, #16
    1fd8:	b2da      	uxtb	r2, r3
    1fda:	2314      	movs	r3, #20
    1fdc:	18fb      	adds	r3, r7, r3
    1fde:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    1fe0:	687b      	ldr	r3, [r7, #4]
    1fe2:	0a1b      	lsrs	r3, r3, #8
    1fe4:	b2da      	uxtb	r2, r3
    1fe6:	2314      	movs	r3, #20
    1fe8:	18fb      	adds	r3, r7, r3
    1fea:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    1fec:	687b      	ldr	r3, [r7, #4]
    1fee:	b2da      	uxtb	r2, r3
    1ff0:	2314      	movs	r3, #20
    1ff2:	18fb      	adds	r3, r7, r3
    1ff4:	719a      	strb	r2, [r3, #6]
		len = 8;
    1ff6:	231f      	movs	r3, #31
    1ff8:	18fb      	adds	r3, r7, r3
    1ffa:	2208      	movs	r2, #8
    1ffc:	701a      	strb	r2, [r3, #0]
		break;
    1ffe:	e031      	b.n	2064 <STACK_SIZE+0x64>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    2000:	68bb      	ldr	r3, [r7, #8]
    2002:	0c1b      	lsrs	r3, r3, #16
    2004:	b2da      	uxtb	r2, r3
    2006:	2314      	movs	r3, #20
    2008:	18fb      	adds	r3, r7, r3
    200a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    200c:	68bb      	ldr	r3, [r7, #8]
    200e:	0a1b      	lsrs	r3, r3, #8
    2010:	b2da      	uxtb	r2, r3
    2012:	2314      	movs	r3, #20
    2014:	18fb      	adds	r3, r7, r3
    2016:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    2018:	68bb      	ldr	r3, [r7, #8]
    201a:	b2da      	uxtb	r2, r3
    201c:	2314      	movs	r3, #20
    201e:	18fb      	adds	r3, r7, r3
    2020:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2022:	687b      	ldr	r3, [r7, #4]
    2024:	0e1b      	lsrs	r3, r3, #24
    2026:	b2da      	uxtb	r2, r3
    2028:	2314      	movs	r3, #20
    202a:	18fb      	adds	r3, r7, r3
    202c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    202e:	687b      	ldr	r3, [r7, #4]
    2030:	0c1b      	lsrs	r3, r3, #16
    2032:	b2da      	uxtb	r2, r3
    2034:	2314      	movs	r3, #20
    2036:	18fb      	adds	r3, r7, r3
    2038:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    203a:	687b      	ldr	r3, [r7, #4]
    203c:	0a1b      	lsrs	r3, r3, #8
    203e:	b2da      	uxtb	r2, r3
    2040:	2314      	movs	r3, #20
    2042:	18fb      	adds	r3, r7, r3
    2044:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    2046:	687b      	ldr	r3, [r7, #4]
    2048:	b2da      	uxtb	r2, r3
    204a:	2314      	movs	r3, #20
    204c:	18fb      	adds	r3, r7, r3
    204e:	71da      	strb	r2, [r3, #7]
		len = 9;
    2050:	231f      	movs	r3, #31
    2052:	18fb      	adds	r3, r7, r3
    2054:	2209      	movs	r2, #9
    2056:	701a      	strb	r2, [r3, #0]
		break;
    2058:	e004      	b.n	2064 <STACK_SIZE+0x64>
	default:
		result = N_FAIL;
    205a:	231e      	movs	r3, #30
    205c:	18fb      	adds	r3, r7, r3
    205e:	2200      	movs	r2, #0
    2060:	701a      	strb	r2, [r3, #0]
		break;
    2062:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    2064:	231e      	movs	r3, #30
    2066:	18fb      	adds	r3, r7, r3
    2068:	781b      	ldrb	r3, [r3, #0]
    206a:	b25b      	sxtb	r3, r3
    206c:	2b00      	cmp	r3, #0
    206e:	d03e      	beq.n	20ee <STACK_SIZE+0xee>
		if (!gu8Crc_off)
    2070:	4b24      	ldr	r3, [pc, #144]	; (2104 <STACK_SIZE+0x104>)
    2072:	781b      	ldrb	r3, [r3, #0]
    2074:	2b00      	cmp	r3, #0
    2076:	d115      	bne.n	20a4 <STACK_SIZE+0xa4>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2078:	231f      	movs	r3, #31
    207a:	18fb      	adds	r3, r7, r3
    207c:	781b      	ldrb	r3, [r3, #0]
    207e:	1e5c      	subs	r4, r3, #1
    2080:	231f      	movs	r3, #31
    2082:	18fb      	adds	r3, r7, r3
    2084:	781b      	ldrb	r3, [r3, #0]
    2086:	3b01      	subs	r3, #1
    2088:	001a      	movs	r2, r3
    208a:	2314      	movs	r3, #20
    208c:	18fb      	adds	r3, r7, r3
    208e:	0019      	movs	r1, r3
    2090:	207f      	movs	r0, #127	; 0x7f
    2092:	4b1d      	ldr	r3, [pc, #116]	; (2108 <STACK_SIZE+0x108>)
    2094:	4798      	blx	r3
    2096:	0003      	movs	r3, r0
    2098:	18db      	adds	r3, r3, r3
    209a:	b2da      	uxtb	r2, r3
    209c:	2314      	movs	r3, #20
    209e:	18fb      	adds	r3, r7, r3
    20a0:	551a      	strb	r2, [r3, r4]
    20a2:	e006      	b.n	20b2 <STACK_SIZE+0xb2>
		else
			len-=1;
    20a4:	231f      	movs	r3, #31
    20a6:	18fb      	adds	r3, r7, r3
    20a8:	221f      	movs	r2, #31
    20aa:	18ba      	adds	r2, r7, r2
    20ac:	7812      	ldrb	r2, [r2, #0]
    20ae:	3a01      	subs	r2, #1
    20b0:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    20b2:	231f      	movs	r3, #31
    20b4:	18fb      	adds	r3, r7, r3
    20b6:	781b      	ldrb	r3, [r3, #0]
    20b8:	b29a      	uxth	r2, r3
    20ba:	2314      	movs	r3, #20
    20bc:	18fb      	adds	r3, r7, r3
    20be:	0011      	movs	r1, r2
    20c0:	0018      	movs	r0, r3
    20c2:	4b12      	ldr	r3, [pc, #72]	; (210c <STACK_SIZE+0x10c>)
    20c4:	4798      	blx	r3
    20c6:	1e03      	subs	r3, r0, #0
    20c8:	d011      	beq.n	20ee <STACK_SIZE+0xee>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    20ca:	238e      	movs	r3, #142	; 0x8e
    20cc:	005a      	lsls	r2, r3, #1
    20ce:	4910      	ldr	r1, [pc, #64]	; (2110 <STACK_SIZE+0x110>)
    20d0:	4b10      	ldr	r3, [pc, #64]	; (2114 <STACK_SIZE+0x114>)
    20d2:	0018      	movs	r0, r3
    20d4:	4b10      	ldr	r3, [pc, #64]	; (2118 <STACK_SIZE+0x118>)
    20d6:	4798      	blx	r3
    20d8:	4b10      	ldr	r3, [pc, #64]	; (211c <STACK_SIZE+0x11c>)
    20da:	0018      	movs	r0, r3
    20dc:	4b10      	ldr	r3, [pc, #64]	; (2120 <STACK_SIZE+0x120>)
    20de:	4798      	blx	r3
    20e0:	200d      	movs	r0, #13
    20e2:	4b10      	ldr	r3, [pc, #64]	; (2124 <STACK_SIZE+0x124>)
    20e4:	4798      	blx	r3
			result = N_FAIL;
    20e6:	231e      	movs	r3, #30
    20e8:	18fb      	adds	r3, r7, r3
    20ea:	2200      	movs	r2, #0
    20ec:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    20ee:	231e      	movs	r3, #30
    20f0:	18fb      	adds	r3, r7, r3
    20f2:	781b      	ldrb	r3, [r3, #0]
    20f4:	b25b      	sxtb	r3, r3
}
    20f6:	0018      	movs	r0, r3
    20f8:	46bd      	mov	sp, r7
    20fa:	b009      	add	sp, #36	; 0x24
    20fc:	bd90      	pop	{r4, r7, pc}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	0000820c 	.word	0x0000820c
    2104:	20000514 	.word	0x20000514
    2108:	00001d95 	.word	0x00001d95
    210c:	00001d21 	.word	0x00001d21
    2110:	00008248 	.word	0x00008248
    2114:	00007d54 	.word	0x00007d54
    2118:	000068f1 	.word	0x000068f1
    211c:	00007d68 	.word	0x00007d68
    2120:	00006a11 	.word	0x00006a11
    2124:	00006925 	.word	0x00006925

00002128 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2128:	b580      	push	{r7, lr}
    212a:	b084      	sub	sp, #16
    212c:	af00      	add	r7, sp, #0
    212e:	0002      	movs	r2, r0
    2130:	1dfb      	adds	r3, r7, #7
    2132:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    2134:	230f      	movs	r3, #15
    2136:	18fb      	adds	r3, r7, r3
    2138:	2201      	movs	r2, #1
    213a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    213c:	1dfb      	adds	r3, r7, #7
    213e:	781b      	ldrb	r3, [r3, #0]
    2140:	2bcf      	cmp	r3, #207	; 0xcf
    2142:	d007      	beq.n	2154 <spi_cmd_rsp+0x2c>
    2144:	1dfb      	adds	r3, r7, #7
    2146:	781b      	ldrb	r3, [r3, #0]
    2148:	2bc5      	cmp	r3, #197	; 0xc5
    214a:	d003      	beq.n	2154 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    214c:	1dfb      	adds	r3, r7, #7
    214e:	781b      	ldrb	r3, [r3, #0]
    2150:	2bc6      	cmp	r3, #198	; 0xc6
    2152:	d10c      	bne.n	216e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2154:	230d      	movs	r3, #13
    2156:	18fb      	adds	r3, r7, r3
    2158:	2101      	movs	r1, #1
    215a:	0018      	movs	r0, r3
    215c:	4b3a      	ldr	r3, [pc, #232]	; (2248 <spi_cmd_rsp+0x120>)
    215e:	4798      	blx	r3
    2160:	1e03      	subs	r3, r0, #0
    2162:	d004      	beq.n	216e <spi_cmd_rsp+0x46>
			result = N_FAIL;
    2164:	230f      	movs	r3, #15
    2166:	18fb      	adds	r3, r7, r3
    2168:	2200      	movs	r2, #0
    216a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    216c:	e063      	b.n	2236 <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
    216e:	230e      	movs	r3, #14
    2170:	18fb      	adds	r3, r7, r3
    2172:	220a      	movs	r2, #10
    2174:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2176:	230d      	movs	r3, #13
    2178:	18fb      	adds	r3, r7, r3
    217a:	2101      	movs	r1, #1
    217c:	0018      	movs	r0, r3
    217e:	4b32      	ldr	r3, [pc, #200]	; (2248 <spi_cmd_rsp+0x120>)
    2180:	4798      	blx	r3
    2182:	1e03      	subs	r3, r0, #0
    2184:	d013      	beq.n	21ae <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    2186:	233c      	movs	r3, #60	; 0x3c
    2188:	33ff      	adds	r3, #255	; 0xff
    218a:	001a      	movs	r2, r3
    218c:	492f      	ldr	r1, [pc, #188]	; (224c <spi_cmd_rsp+0x124>)
    218e:	4b30      	ldr	r3, [pc, #192]	; (2250 <spi_cmd_rsp+0x128>)
    2190:	0018      	movs	r0, r3
    2192:	4b30      	ldr	r3, [pc, #192]	; (2254 <spi_cmd_rsp+0x12c>)
    2194:	4798      	blx	r3
    2196:	4b30      	ldr	r3, [pc, #192]	; (2258 <spi_cmd_rsp+0x130>)
    2198:	0018      	movs	r0, r3
    219a:	4b30      	ldr	r3, [pc, #192]	; (225c <spi_cmd_rsp+0x134>)
    219c:	4798      	blx	r3
    219e:	200d      	movs	r0, #13
    21a0:	4b2f      	ldr	r3, [pc, #188]	; (2260 <spi_cmd_rsp+0x138>)
    21a2:	4798      	blx	r3
			result = N_FAIL;
    21a4:	230f      	movs	r3, #15
    21a6:	18fb      	adds	r3, r7, r3
    21a8:	2200      	movs	r2, #0
    21aa:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    21ac:	e043      	b.n	2236 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    21ae:	230d      	movs	r3, #13
    21b0:	18fb      	adds	r3, r7, r3
    21b2:	781b      	ldrb	r3, [r3, #0]
    21b4:	1dfa      	adds	r2, r7, #7
    21b6:	7812      	ldrb	r2, [r2, #0]
    21b8:	429a      	cmp	r2, r3
    21ba:	d00b      	beq.n	21d4 <spi_cmd_rsp+0xac>
    21bc:	230e      	movs	r3, #14
    21be:	18fb      	adds	r3, r7, r3
    21c0:	781b      	ldrb	r3, [r3, #0]
    21c2:	b25b      	sxtb	r3, r3
    21c4:	b2da      	uxtb	r2, r3
    21c6:	3a01      	subs	r2, #1
    21c8:	b2d1      	uxtb	r1, r2
    21ca:	220e      	movs	r2, #14
    21cc:	18ba      	adds	r2, r7, r2
    21ce:	7011      	strb	r1, [r2, #0]
    21d0:	2b00      	cmp	r3, #0
    21d2:	dcd0      	bgt.n	2176 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    21d4:	230e      	movs	r3, #14
    21d6:	18fb      	adds	r3, r7, r3
    21d8:	220a      	movs	r2, #10
    21da:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    21dc:	230d      	movs	r3, #13
    21de:	18fb      	adds	r3, r7, r3
    21e0:	2101      	movs	r1, #1
    21e2:	0018      	movs	r0, r3
    21e4:	4b18      	ldr	r3, [pc, #96]	; (2248 <spi_cmd_rsp+0x120>)
    21e6:	4798      	blx	r3
    21e8:	1e03      	subs	r3, r0, #0
    21ea:	d013      	beq.n	2214 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    21ec:	234a      	movs	r3, #74	; 0x4a
    21ee:	33ff      	adds	r3, #255	; 0xff
    21f0:	001a      	movs	r2, r3
    21f2:	4916      	ldr	r1, [pc, #88]	; (224c <spi_cmd_rsp+0x124>)
    21f4:	4b16      	ldr	r3, [pc, #88]	; (2250 <spi_cmd_rsp+0x128>)
    21f6:	0018      	movs	r0, r3
    21f8:	4b16      	ldr	r3, [pc, #88]	; (2254 <spi_cmd_rsp+0x12c>)
    21fa:	4798      	blx	r3
    21fc:	4b16      	ldr	r3, [pc, #88]	; (2258 <spi_cmd_rsp+0x130>)
    21fe:	0018      	movs	r0, r3
    2200:	4b16      	ldr	r3, [pc, #88]	; (225c <spi_cmd_rsp+0x134>)
    2202:	4798      	blx	r3
    2204:	200d      	movs	r0, #13
    2206:	4b16      	ldr	r3, [pc, #88]	; (2260 <spi_cmd_rsp+0x138>)
    2208:	4798      	blx	r3
			result = N_FAIL;
    220a:	230f      	movs	r3, #15
    220c:	18fb      	adds	r3, r7, r3
    220e:	2200      	movs	r2, #0
    2210:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    2212:	e010      	b.n	2236 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2214:	230d      	movs	r3, #13
    2216:	18fb      	adds	r3, r7, r3
    2218:	781b      	ldrb	r3, [r3, #0]
    221a:	2b00      	cmp	r3, #0
    221c:	d00b      	beq.n	2236 <spi_cmd_rsp+0x10e>
    221e:	230e      	movs	r3, #14
    2220:	18fb      	adds	r3, r7, r3
    2222:	781b      	ldrb	r3, [r3, #0]
    2224:	b25b      	sxtb	r3, r3
    2226:	b2da      	uxtb	r2, r3
    2228:	3a01      	subs	r2, #1
    222a:	b2d1      	uxtb	r1, r2
    222c:	220e      	movs	r2, #14
    222e:	18ba      	adds	r2, r7, r2
    2230:	7011      	strb	r1, [r2, #0]
    2232:	2b00      	cmp	r3, #0
    2234:	dcd2      	bgt.n	21dc <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    2236:	230f      	movs	r3, #15
    2238:	18fb      	adds	r3, r7, r3
    223a:	781b      	ldrb	r3, [r3, #0]
    223c:	b25b      	sxtb	r3, r3
}
    223e:	0018      	movs	r0, r3
    2240:	46bd      	mov	sp, r7
    2242:	b004      	add	sp, #16
    2244:	bd80      	pop	{r7, pc}
    2246:	46c0      	nop			; (mov r8, r8)
    2248:	00001cdd 	.word	0x00001cdd
    224c:	00008250 	.word	0x00008250
    2250:	00007d54 	.word	0x00007d54
    2254:	000068f1 	.word	0x000068f1
    2258:	00007d94 	.word	0x00007d94
    225c:	00006a11 	.word	0x00006a11
    2260:	00006925 	.word	0x00006925

00002264 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2264:	b580      	push	{r7, lr}
    2266:	b086      	sub	sp, #24
    2268:	af00      	add	r7, sp, #0
    226a:	6078      	str	r0, [r7, #4]
    226c:	0008      	movs	r0, r1
    226e:	0011      	movs	r1, r2
    2270:	1cbb      	adds	r3, r7, #2
    2272:	1c02      	adds	r2, r0, #0
    2274:	801a      	strh	r2, [r3, #0]
    2276:	1c7b      	adds	r3, r7, #1
    2278:	1c0a      	adds	r2, r1, #0
    227a:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    227c:	2311      	movs	r3, #17
    227e:	18fb      	adds	r3, r7, r3
    2280:	2201      	movs	r2, #1
    2282:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2284:	2314      	movs	r3, #20
    2286:	18fb      	adds	r3, r7, r3
    2288:	2200      	movs	r2, #0
    228a:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    228c:	1cbb      	adds	r3, r7, #2
    228e:	881a      	ldrh	r2, [r3, #0]
    2290:	2380      	movs	r3, #128	; 0x80
    2292:	019b      	lsls	r3, r3, #6
    2294:	429a      	cmp	r2, r3
    2296:	d805      	bhi.n	22a4 <spi_data_read+0x40>
			nbytes = sz;
    2298:	2312      	movs	r3, #18
    229a:	18fb      	adds	r3, r7, r3
    229c:	1cba      	adds	r2, r7, #2
    229e:	8812      	ldrh	r2, [r2, #0]
    22a0:	801a      	strh	r2, [r3, #0]
    22a2:	e004      	b.n	22ae <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    22a4:	2312      	movs	r3, #18
    22a6:	18fb      	adds	r3, r7, r3
    22a8:	2280      	movs	r2, #128	; 0x80
    22aa:	0192      	lsls	r2, r2, #6
    22ac:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    22ae:	2316      	movs	r3, #22
    22b0:	18fb      	adds	r3, r7, r3
    22b2:	220a      	movs	r2, #10
    22b4:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    22b6:	230b      	movs	r3, #11
    22b8:	18fb      	adds	r3, r7, r3
    22ba:	2101      	movs	r1, #1
    22bc:	0018      	movs	r0, r3
    22be:	4b5f      	ldr	r3, [pc, #380]	; (243c <spi_data_read+0x1d8>)
    22c0:	4798      	blx	r3
    22c2:	1e03      	subs	r3, r0, #0
    22c4:	d013      	beq.n	22ee <spi_data_read+0x8a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    22c6:	236c      	movs	r3, #108	; 0x6c
    22c8:	33ff      	adds	r3, #255	; 0xff
    22ca:	001a      	movs	r2, r3
    22cc:	495c      	ldr	r1, [pc, #368]	; (2440 <spi_data_read+0x1dc>)
    22ce:	4b5d      	ldr	r3, [pc, #372]	; (2444 <spi_data_read+0x1e0>)
    22d0:	0018      	movs	r0, r3
    22d2:	4b5d      	ldr	r3, [pc, #372]	; (2448 <spi_data_read+0x1e4>)
    22d4:	4798      	blx	r3
    22d6:	4b5d      	ldr	r3, [pc, #372]	; (244c <spi_data_read+0x1e8>)
    22d8:	0018      	movs	r0, r3
    22da:	4b5d      	ldr	r3, [pc, #372]	; (2450 <spi_data_read+0x1ec>)
    22dc:	4798      	blx	r3
    22de:	200d      	movs	r0, #13
    22e0:	4b5c      	ldr	r3, [pc, #368]	; (2454 <spi_data_read+0x1f0>)
    22e2:	4798      	blx	r3
				result = N_FAIL;
    22e4:	2311      	movs	r3, #17
    22e6:	18fb      	adds	r3, r7, r3
    22e8:	2200      	movs	r2, #0
    22ea:	701a      	strb	r2, [r3, #0]
				break;
    22ec:	e017      	b.n	231e <spi_data_read+0xba>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    22ee:	230b      	movs	r3, #11
    22f0:	18fb      	adds	r3, r7, r3
    22f2:	781b      	ldrb	r3, [r3, #0]
    22f4:	091b      	lsrs	r3, r3, #4
    22f6:	b2db      	uxtb	r3, r3
    22f8:	001a      	movs	r2, r3
    22fa:	230f      	movs	r3, #15
    22fc:	4013      	ands	r3, r2
    22fe:	2b0f      	cmp	r3, #15
    2300:	d00c      	beq.n	231c <spi_data_read+0xb8>
				break;
		} while (retry--);
    2302:	2316      	movs	r3, #22
    2304:	18fb      	adds	r3, r7, r3
    2306:	2200      	movs	r2, #0
    2308:	5e9b      	ldrsh	r3, [r3, r2]
    230a:	b29a      	uxth	r2, r3
    230c:	3a01      	subs	r2, #1
    230e:	b291      	uxth	r1, r2
    2310:	2216      	movs	r2, #22
    2312:	18ba      	adds	r2, r7, r2
    2314:	8011      	strh	r1, [r2, #0]
    2316:	2b00      	cmp	r3, #0
    2318:	d1cd      	bne.n	22b6 <spi_data_read+0x52>
    231a:	e000      	b.n	231e <spi_data_read+0xba>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    231c:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    231e:	2311      	movs	r3, #17
    2320:	18fb      	adds	r3, r7, r3
    2322:	781b      	ldrb	r3, [r3, #0]
    2324:	b25b      	sxtb	r3, r3
    2326:	2b00      	cmp	r3, #0
    2328:	d100      	bne.n	232c <spi_data_read+0xc8>
    232a:	e07d      	b.n	2428 <spi_data_read+0x1c4>
			break;

		if (retry <= 0) {
    232c:	2316      	movs	r3, #22
    232e:	18fb      	adds	r3, r7, r3
    2330:	2200      	movs	r2, #0
    2332:	5e9b      	ldrsh	r3, [r3, r2]
    2334:	2b00      	cmp	r3, #0
    2336:	dc18      	bgt.n	236a <spi_data_read+0x106>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2338:	2378      	movs	r3, #120	; 0x78
    233a:	33ff      	adds	r3, #255	; 0xff
    233c:	001a      	movs	r2, r3
    233e:	4940      	ldr	r1, [pc, #256]	; (2440 <spi_data_read+0x1dc>)
    2340:	4b40      	ldr	r3, [pc, #256]	; (2444 <spi_data_read+0x1e0>)
    2342:	0018      	movs	r0, r3
    2344:	4b40      	ldr	r3, [pc, #256]	; (2448 <spi_data_read+0x1e4>)
    2346:	4798      	blx	r3
    2348:	230b      	movs	r3, #11
    234a:	18fb      	adds	r3, r7, r3
    234c:	781b      	ldrb	r3, [r3, #0]
    234e:	001a      	movs	r2, r3
    2350:	4b41      	ldr	r3, [pc, #260]	; (2458 <spi_data_read+0x1f4>)
    2352:	0011      	movs	r1, r2
    2354:	0018      	movs	r0, r3
    2356:	4b3c      	ldr	r3, [pc, #240]	; (2448 <spi_data_read+0x1e4>)
    2358:	4798      	blx	r3
    235a:	200d      	movs	r0, #13
    235c:	4b3d      	ldr	r3, [pc, #244]	; (2454 <spi_data_read+0x1f0>)
    235e:	4798      	blx	r3
			result = N_FAIL;
    2360:	2311      	movs	r3, #17
    2362:	18fb      	adds	r3, r7, r3
    2364:	2200      	movs	r2, #0
    2366:	701a      	strb	r2, [r3, #0]
			break;
    2368:	e05f      	b.n	242a <spi_data_read+0x1c6>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    236a:	2314      	movs	r3, #20
    236c:	18fb      	adds	r3, r7, r3
    236e:	2200      	movs	r2, #0
    2370:	5e9b      	ldrsh	r3, [r3, r2]
    2372:	687a      	ldr	r2, [r7, #4]
    2374:	18d2      	adds	r2, r2, r3
    2376:	2312      	movs	r3, #18
    2378:	18fb      	adds	r3, r7, r3
    237a:	881b      	ldrh	r3, [r3, #0]
    237c:	0019      	movs	r1, r3
    237e:	0010      	movs	r0, r2
    2380:	4b2e      	ldr	r3, [pc, #184]	; (243c <spi_data_read+0x1d8>)
    2382:	4798      	blx	r3
    2384:	1e03      	subs	r3, r0, #0
    2386:	d012      	beq.n	23ae <spi_data_read+0x14a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2388:	23c0      	movs	r3, #192	; 0xc0
    238a:	005a      	lsls	r2, r3, #1
    238c:	492c      	ldr	r1, [pc, #176]	; (2440 <spi_data_read+0x1dc>)
    238e:	4b2d      	ldr	r3, [pc, #180]	; (2444 <spi_data_read+0x1e0>)
    2390:	0018      	movs	r0, r3
    2392:	4b2d      	ldr	r3, [pc, #180]	; (2448 <spi_data_read+0x1e4>)
    2394:	4798      	blx	r3
    2396:	4b31      	ldr	r3, [pc, #196]	; (245c <spi_data_read+0x1f8>)
    2398:	0018      	movs	r0, r3
    239a:	4b2d      	ldr	r3, [pc, #180]	; (2450 <spi_data_read+0x1ec>)
    239c:	4798      	blx	r3
    239e:	200d      	movs	r0, #13
    23a0:	4b2c      	ldr	r3, [pc, #176]	; (2454 <spi_data_read+0x1f0>)
    23a2:	4798      	blx	r3
			result = N_FAIL;
    23a4:	2311      	movs	r3, #17
    23a6:	18fb      	adds	r3, r7, r3
    23a8:	2200      	movs	r2, #0
    23aa:	701a      	strb	r2, [r3, #0]
			break;
    23ac:	e03d      	b.n	242a <spi_data_read+0x1c6>
		}
		if(!clockless)
    23ae:	1c7b      	adds	r3, r7, #1
    23b0:	781b      	ldrb	r3, [r3, #0]
    23b2:	2b00      	cmp	r3, #0
    23b4:	d11f      	bne.n	23f6 <spi_data_read+0x192>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    23b6:	4b2a      	ldr	r3, [pc, #168]	; (2460 <spi_data_read+0x1fc>)
    23b8:	781b      	ldrb	r3, [r3, #0]
    23ba:	2b00      	cmp	r3, #0
    23bc:	d11b      	bne.n	23f6 <spi_data_read+0x192>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    23be:	230c      	movs	r3, #12
    23c0:	18fb      	adds	r3, r7, r3
    23c2:	2102      	movs	r1, #2
    23c4:	0018      	movs	r0, r3
    23c6:	4b1d      	ldr	r3, [pc, #116]	; (243c <spi_data_read+0x1d8>)
    23c8:	4798      	blx	r3
    23ca:	1e03      	subs	r3, r0, #0
    23cc:	d013      	beq.n	23f6 <spi_data_read+0x192>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    23ce:	238c      	movs	r3, #140	; 0x8c
    23d0:	33ff      	adds	r3, #255	; 0xff
    23d2:	001a      	movs	r2, r3
    23d4:	491a      	ldr	r1, [pc, #104]	; (2440 <spi_data_read+0x1dc>)
    23d6:	4b1b      	ldr	r3, [pc, #108]	; (2444 <spi_data_read+0x1e0>)
    23d8:	0018      	movs	r0, r3
    23da:	4b1b      	ldr	r3, [pc, #108]	; (2448 <spi_data_read+0x1e4>)
    23dc:	4798      	blx	r3
    23de:	4b21      	ldr	r3, [pc, #132]	; (2464 <spi_data_read+0x200>)
    23e0:	0018      	movs	r0, r3
    23e2:	4b1b      	ldr	r3, [pc, #108]	; (2450 <spi_data_read+0x1ec>)
    23e4:	4798      	blx	r3
    23e6:	200d      	movs	r0, #13
    23e8:	4b1a      	ldr	r3, [pc, #104]	; (2454 <spi_data_read+0x1f0>)
    23ea:	4798      	blx	r3
					result = N_FAIL;
    23ec:	2311      	movs	r3, #17
    23ee:	18fb      	adds	r3, r7, r3
    23f0:	2200      	movs	r2, #0
    23f2:	701a      	strb	r2, [r3, #0]
					break;
    23f4:	e019      	b.n	242a <spi_data_read+0x1c6>
				}
			}
		}
		ix += nbytes;
    23f6:	2314      	movs	r3, #20
    23f8:	18fb      	adds	r3, r7, r3
    23fa:	881a      	ldrh	r2, [r3, #0]
    23fc:	2312      	movs	r3, #18
    23fe:	18fb      	adds	r3, r7, r3
    2400:	881b      	ldrh	r3, [r3, #0]
    2402:	18d3      	adds	r3, r2, r3
    2404:	b29a      	uxth	r2, r3
    2406:	2314      	movs	r3, #20
    2408:	18fb      	adds	r3, r7, r3
    240a:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    240c:	2312      	movs	r3, #18
    240e:	18fb      	adds	r3, r7, r3
    2410:	881a      	ldrh	r2, [r3, #0]
    2412:	1cbb      	adds	r3, r7, #2
    2414:	1cb9      	adds	r1, r7, #2
    2416:	8809      	ldrh	r1, [r1, #0]
    2418:	1a8a      	subs	r2, r1, r2
    241a:	801a      	strh	r2, [r3, #0]

	} while (sz);
    241c:	1cbb      	adds	r3, r7, #2
    241e:	881b      	ldrh	r3, [r3, #0]
    2420:	2b00      	cmp	r3, #0
    2422:	d000      	beq.n	2426 <spi_data_read+0x1c2>
    2424:	e732      	b.n	228c <spi_data_read+0x28>
    2426:	e000      	b.n	242a <spi_data_read+0x1c6>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    2428:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    242a:	2311      	movs	r3, #17
    242c:	18fb      	adds	r3, r7, r3
    242e:	781b      	ldrb	r3, [r3, #0]
    2430:	b25b      	sxtb	r3, r3
}
    2432:	0018      	movs	r0, r3
    2434:	46bd      	mov	sp, r7
    2436:	b006      	add	sp, #24
    2438:	bd80      	pop	{r7, pc}
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	00001cdd 	.word	0x00001cdd
    2440:	0000825c 	.word	0x0000825c
    2444:	00007d54 	.word	0x00007d54
    2448:	000068f1 	.word	0x000068f1
    244c:	00007dc8 	.word	0x00007dc8
    2450:	00006a11 	.word	0x00006a11
    2454:	00006925 	.word	0x00006925
    2458:	00007dfc 	.word	0x00007dfc
    245c:	00007e2c 	.word	0x00007e2c
    2460:	20000514 	.word	0x20000514
    2464:	00007e5c 	.word	0x00007e5c

00002468 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    2468:	b580      	push	{r7, lr}
    246a:	b086      	sub	sp, #24
    246c:	af00      	add	r7, sp, #0
    246e:	6078      	str	r0, [r7, #4]
    2470:	000a      	movs	r2, r1
    2472:	1cbb      	adds	r3, r7, #2
    2474:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    2476:	2313      	movs	r3, #19
    2478:	18fb      	adds	r3, r7, r3
    247a:	2201      	movs	r2, #1
    247c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    247e:	230c      	movs	r3, #12
    2480:	18fb      	adds	r3, r7, r3
    2482:	2200      	movs	r2, #0
    2484:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2486:	2316      	movs	r3, #22
    2488:	18fb      	adds	r3, r7, r3
    248a:	2200      	movs	r2, #0
    248c:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    248e:	1cbb      	adds	r3, r7, #2
    2490:	881a      	ldrh	r2, [r3, #0]
    2492:	2380      	movs	r3, #128	; 0x80
    2494:	019b      	lsls	r3, r3, #6
    2496:	429a      	cmp	r2, r3
    2498:	d805      	bhi.n	24a6 <spi_data_write+0x3e>
			nbytes = sz;
    249a:	2314      	movs	r3, #20
    249c:	18fb      	adds	r3, r7, r3
    249e:	1cba      	adds	r2, r7, #2
    24a0:	8812      	ldrh	r2, [r2, #0]
    24a2:	801a      	strh	r2, [r3, #0]
    24a4:	e004      	b.n	24b0 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    24a6:	2314      	movs	r3, #20
    24a8:	18fb      	adds	r3, r7, r3
    24aa:	2280      	movs	r2, #128	; 0x80
    24ac:	0192      	lsls	r2, r2, #6
    24ae:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    24b0:	2311      	movs	r3, #17
    24b2:	18fb      	adds	r3, r7, r3
    24b4:	22f0      	movs	r2, #240	; 0xf0
    24b6:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    24b8:	2316      	movs	r3, #22
    24ba:	18fb      	adds	r3, r7, r3
    24bc:	2200      	movs	r2, #0
    24be:	5e9b      	ldrsh	r3, [r3, r2]
    24c0:	2b00      	cmp	r3, #0
    24c2:	d10f      	bne.n	24e4 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    24c4:	1cbb      	adds	r3, r7, #2
    24c6:	881a      	ldrh	r2, [r3, #0]
    24c8:	2380      	movs	r3, #128	; 0x80
    24ca:	019b      	lsls	r3, r3, #6
    24cc:	429a      	cmp	r2, r3
    24ce:	d804      	bhi.n	24da <spi_data_write+0x72>
				order = 0x3;
    24d0:	2312      	movs	r3, #18
    24d2:	18fb      	adds	r3, r7, r3
    24d4:	2203      	movs	r2, #3
    24d6:	701a      	strb	r2, [r3, #0]
    24d8:	e013      	b.n	2502 <spi_data_write+0x9a>
			else
				order = 0x1;
    24da:	2312      	movs	r3, #18
    24dc:	18fb      	adds	r3, r7, r3
    24de:	2201      	movs	r2, #1
    24e0:	701a      	strb	r2, [r3, #0]
    24e2:	e00e      	b.n	2502 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    24e4:	1cbb      	adds	r3, r7, #2
    24e6:	881a      	ldrh	r2, [r3, #0]
    24e8:	2380      	movs	r3, #128	; 0x80
    24ea:	019b      	lsls	r3, r3, #6
    24ec:	429a      	cmp	r2, r3
    24ee:	d804      	bhi.n	24fa <spi_data_write+0x92>
				order = 0x3;
    24f0:	2312      	movs	r3, #18
    24f2:	18fb      	adds	r3, r7, r3
    24f4:	2203      	movs	r2, #3
    24f6:	701a      	strb	r2, [r3, #0]
    24f8:	e003      	b.n	2502 <spi_data_write+0x9a>
			else
				order = 0x2;
    24fa:	2312      	movs	r3, #18
    24fc:	18fb      	adds	r3, r7, r3
    24fe:	2202      	movs	r2, #2
    2500:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    2502:	2311      	movs	r3, #17
    2504:	18fb      	adds	r3, r7, r3
    2506:	781a      	ldrb	r2, [r3, #0]
    2508:	2312      	movs	r3, #18
    250a:	18fb      	adds	r3, r7, r3
    250c:	781b      	ldrb	r3, [r3, #0]
    250e:	4313      	orrs	r3, r2
    2510:	b2da      	uxtb	r2, r3
    2512:	2311      	movs	r3, #17
    2514:	18fb      	adds	r3, r7, r3
    2516:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    2518:	2311      	movs	r3, #17
    251a:	18fb      	adds	r3, r7, r3
    251c:	2101      	movs	r1, #1
    251e:	0018      	movs	r0, r3
    2520:	4b3c      	ldr	r3, [pc, #240]	; (2614 <spi_data_write+0x1ac>)
    2522:	4798      	blx	r3
    2524:	1e03      	subs	r3, r0, #0
    2526:	d012      	beq.n	254e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    2528:	23de      	movs	r3, #222	; 0xde
    252a:	005a      	lsls	r2, r3, #1
    252c:	493a      	ldr	r1, [pc, #232]	; (2618 <spi_data_write+0x1b0>)
    252e:	4b3b      	ldr	r3, [pc, #236]	; (261c <spi_data_write+0x1b4>)
    2530:	0018      	movs	r0, r3
    2532:	4b3b      	ldr	r3, [pc, #236]	; (2620 <spi_data_write+0x1b8>)
    2534:	4798      	blx	r3
    2536:	4b3b      	ldr	r3, [pc, #236]	; (2624 <spi_data_write+0x1bc>)
    2538:	0018      	movs	r0, r3
    253a:	4b3b      	ldr	r3, [pc, #236]	; (2628 <spi_data_write+0x1c0>)
    253c:	4798      	blx	r3
    253e:	200d      	movs	r0, #13
    2540:	4b3a      	ldr	r3, [pc, #232]	; (262c <spi_data_write+0x1c4>)
    2542:	4798      	blx	r3
			result = N_FAIL;
    2544:	2313      	movs	r3, #19
    2546:	18fb      	adds	r3, r7, r3
    2548:	2200      	movs	r2, #0
    254a:	701a      	strb	r2, [r3, #0]
			break;
    254c:	e05a      	b.n	2604 <spi_data_write+0x19c>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    254e:	2316      	movs	r3, #22
    2550:	18fb      	adds	r3, r7, r3
    2552:	2200      	movs	r2, #0
    2554:	5e9b      	ldrsh	r3, [r3, r2]
    2556:	687a      	ldr	r2, [r7, #4]
    2558:	18d2      	adds	r2, r2, r3
    255a:	2314      	movs	r3, #20
    255c:	18fb      	adds	r3, r7, r3
    255e:	881b      	ldrh	r3, [r3, #0]
    2560:	0019      	movs	r1, r3
    2562:	0010      	movs	r0, r2
    2564:	4b2b      	ldr	r3, [pc, #172]	; (2614 <spi_data_write+0x1ac>)
    2566:	4798      	blx	r3
    2568:	1e03      	subs	r3, r0, #0
    256a:	d013      	beq.n	2594 <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    256c:	23c6      	movs	r3, #198	; 0xc6
    256e:	33ff      	adds	r3, #255	; 0xff
    2570:	001a      	movs	r2, r3
    2572:	4929      	ldr	r1, [pc, #164]	; (2618 <spi_data_write+0x1b0>)
    2574:	4b29      	ldr	r3, [pc, #164]	; (261c <spi_data_write+0x1b4>)
    2576:	0018      	movs	r0, r3
    2578:	4b29      	ldr	r3, [pc, #164]	; (2620 <spi_data_write+0x1b8>)
    257a:	4798      	blx	r3
    257c:	4b2c      	ldr	r3, [pc, #176]	; (2630 <spi_data_write+0x1c8>)
    257e:	0018      	movs	r0, r3
    2580:	4b29      	ldr	r3, [pc, #164]	; (2628 <spi_data_write+0x1c0>)
    2582:	4798      	blx	r3
    2584:	200d      	movs	r0, #13
    2586:	4b29      	ldr	r3, [pc, #164]	; (262c <spi_data_write+0x1c4>)
    2588:	4798      	blx	r3
			result = N_FAIL;
    258a:	2313      	movs	r3, #19
    258c:	18fb      	adds	r3, r7, r3
    258e:	2200      	movs	r2, #0
    2590:	701a      	strb	r2, [r3, #0]
			break;
    2592:	e037      	b.n	2604 <spi_data_write+0x19c>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    2594:	4b27      	ldr	r3, [pc, #156]	; (2634 <spi_data_write+0x1cc>)
    2596:	781b      	ldrb	r3, [r3, #0]
    2598:	2b00      	cmp	r3, #0
    259a:	d11b      	bne.n	25d4 <spi_data_write+0x16c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    259c:	230c      	movs	r3, #12
    259e:	18fb      	adds	r3, r7, r3
    25a0:	2102      	movs	r1, #2
    25a2:	0018      	movs	r0, r3
    25a4:	4b1b      	ldr	r3, [pc, #108]	; (2614 <spi_data_write+0x1ac>)
    25a6:	4798      	blx	r3
    25a8:	1e03      	subs	r3, r0, #0
    25aa:	d013      	beq.n	25d4 <spi_data_write+0x16c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    25ac:	23d0      	movs	r3, #208	; 0xd0
    25ae:	33ff      	adds	r3, #255	; 0xff
    25b0:	001a      	movs	r2, r3
    25b2:	4919      	ldr	r1, [pc, #100]	; (2618 <spi_data_write+0x1b0>)
    25b4:	4b19      	ldr	r3, [pc, #100]	; (261c <spi_data_write+0x1b4>)
    25b6:	0018      	movs	r0, r3
    25b8:	4b19      	ldr	r3, [pc, #100]	; (2620 <spi_data_write+0x1b8>)
    25ba:	4798      	blx	r3
    25bc:	4b1e      	ldr	r3, [pc, #120]	; (2638 <spi_data_write+0x1d0>)
    25be:	0018      	movs	r0, r3
    25c0:	4b19      	ldr	r3, [pc, #100]	; (2628 <spi_data_write+0x1c0>)
    25c2:	4798      	blx	r3
    25c4:	200d      	movs	r0, #13
    25c6:	4b19      	ldr	r3, [pc, #100]	; (262c <spi_data_write+0x1c4>)
    25c8:	4798      	blx	r3
				result = N_FAIL;
    25ca:	2313      	movs	r3, #19
    25cc:	18fb      	adds	r3, r7, r3
    25ce:	2200      	movs	r2, #0
    25d0:	701a      	strb	r2, [r3, #0]
				break;
    25d2:	e017      	b.n	2604 <spi_data_write+0x19c>
			}
		}

		ix += nbytes;
    25d4:	2316      	movs	r3, #22
    25d6:	18fb      	adds	r3, r7, r3
    25d8:	881a      	ldrh	r2, [r3, #0]
    25da:	2314      	movs	r3, #20
    25dc:	18fb      	adds	r3, r7, r3
    25de:	881b      	ldrh	r3, [r3, #0]
    25e0:	18d3      	adds	r3, r2, r3
    25e2:	b29a      	uxth	r2, r3
    25e4:	2316      	movs	r3, #22
    25e6:	18fb      	adds	r3, r7, r3
    25e8:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    25ea:	1cbb      	adds	r3, r7, #2
    25ec:	1cb9      	adds	r1, r7, #2
    25ee:	2214      	movs	r2, #20
    25f0:	18ba      	adds	r2, r7, r2
    25f2:	8809      	ldrh	r1, [r1, #0]
    25f4:	8812      	ldrh	r2, [r2, #0]
    25f6:	1a8a      	subs	r2, r1, r2
    25f8:	801a      	strh	r2, [r3, #0]
	} while (sz);
    25fa:	1cbb      	adds	r3, r7, #2
    25fc:	881b      	ldrh	r3, [r3, #0]
    25fe:	2b00      	cmp	r3, #0
    2600:	d000      	beq.n	2604 <spi_data_write+0x19c>
    2602:	e744      	b.n	248e <spi_data_write+0x26>


	return result;
    2604:	2313      	movs	r3, #19
    2606:	18fb      	adds	r3, r7, r3
    2608:	781b      	ldrb	r3, [r3, #0]
    260a:	b25b      	sxtb	r3, r3
}
    260c:	0018      	movs	r0, r3
    260e:	46bd      	mov	sp, r7
    2610:	b006      	add	sp, #24
    2612:	bd80      	pop	{r7, pc}
    2614:	00001d21 	.word	0x00001d21
    2618:	0000826c 	.word	0x0000826c
    261c:	00007d54 	.word	0x00007d54
    2620:	000068f1 	.word	0x000068f1
    2624:	00007e90 	.word	0x00007e90
    2628:	00006a11 	.word	0x00006a11
    262c:	00006925 	.word	0x00006925
    2630:	00007ec8 	.word	0x00007ec8
    2634:	20000514 	.word	0x20000514
    2638:	00007efc 	.word	0x00007efc

0000263c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    263c:	b5b0      	push	{r4, r5, r7, lr}
    263e:	b086      	sub	sp, #24
    2640:	af02      	add	r7, sp, #8
    2642:	6078      	str	r0, [r7, #4]
    2644:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    2646:	230d      	movs	r3, #13
    2648:	18fb      	adds	r3, r7, r3
    264a:	2201      	movs	r2, #1
    264c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    264e:	230f      	movs	r3, #15
    2650:	18fb      	adds	r3, r7, r3
    2652:	22c9      	movs	r2, #201	; 0xc9
    2654:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    2656:	230e      	movs	r3, #14
    2658:	18fb      	adds	r3, r7, r3
    265a:	2200      	movs	r2, #0
    265c:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30)
    265e:	687b      	ldr	r3, [r7, #4]
    2660:	2b30      	cmp	r3, #48	; 0x30
    2662:	d808      	bhi.n	2676 <spi_write_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    2664:	230f      	movs	r3, #15
    2666:	18fb      	adds	r3, r7, r3
    2668:	22c3      	movs	r2, #195	; 0xc3
    266a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    266c:	230e      	movs	r3, #14
    266e:	18fb      	adds	r3, r7, r3
    2670:	2201      	movs	r2, #1
    2672:	701a      	strb	r2, [r3, #0]
    2674:	e007      	b.n	2686 <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    2676:	230f      	movs	r3, #15
    2678:	18fb      	adds	r3, r7, r3
    267a:	22c9      	movs	r2, #201	; 0xc9
    267c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    267e:	230e      	movs	r3, #14
    2680:	18fb      	adds	r3, r7, r3
    2682:	2200      	movs	r2, #0
    2684:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2686:	230d      	movs	r3, #13
    2688:	18fc      	adds	r4, r7, r3
    268a:	683a      	ldr	r2, [r7, #0]
    268c:	6879      	ldr	r1, [r7, #4]
    268e:	230f      	movs	r3, #15
    2690:	18fb      	adds	r3, r7, r3
    2692:	7818      	ldrb	r0, [r3, #0]
    2694:	230e      	movs	r3, #14
    2696:	18fb      	adds	r3, r7, r3
    2698:	781b      	ldrb	r3, [r3, #0]
    269a:	9300      	str	r3, [sp, #0]
    269c:	2304      	movs	r3, #4
    269e:	4d24      	ldr	r5, [pc, #144]	; (2730 <spi_write_reg+0xf4>)
    26a0:	47a8      	blx	r5
    26a2:	0003      	movs	r3, r0
    26a4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    26a6:	230d      	movs	r3, #13
    26a8:	18fb      	adds	r3, r7, r3
    26aa:	781b      	ldrb	r3, [r3, #0]
    26ac:	b25b      	sxtb	r3, r3
    26ae:	2b01      	cmp	r3, #1
    26b0:	d010      	beq.n	26d4 <spi_write_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    26b2:	4a20      	ldr	r2, [pc, #128]	; (2734 <spi_write_reg+0xf8>)
    26b4:	4920      	ldr	r1, [pc, #128]	; (2738 <spi_write_reg+0xfc>)
    26b6:	4b21      	ldr	r3, [pc, #132]	; (273c <spi_write_reg+0x100>)
    26b8:	0018      	movs	r0, r3
    26ba:	4b21      	ldr	r3, [pc, #132]	; (2740 <spi_write_reg+0x104>)
    26bc:	4798      	blx	r3
    26be:	687a      	ldr	r2, [r7, #4]
    26c0:	4b20      	ldr	r3, [pc, #128]	; (2744 <spi_write_reg+0x108>)
    26c2:	0011      	movs	r1, r2
    26c4:	0018      	movs	r0, r3
    26c6:	4b1e      	ldr	r3, [pc, #120]	; (2740 <spi_write_reg+0x104>)
    26c8:	4798      	blx	r3
    26ca:	200d      	movs	r0, #13
    26cc:	4b1e      	ldr	r3, [pc, #120]	; (2748 <spi_write_reg+0x10c>)
    26ce:	4798      	blx	r3
		return N_FAIL;
    26d0:	2300      	movs	r3, #0
    26d2:	e029      	b.n	2728 <spi_write_reg+0xec>
	}

	result = spi_cmd_rsp(cmd);
    26d4:	230d      	movs	r3, #13
    26d6:	18fc      	adds	r4, r7, r3
    26d8:	230f      	movs	r3, #15
    26da:	18fb      	adds	r3, r7, r3
    26dc:	781b      	ldrb	r3, [r3, #0]
    26de:	0018      	movs	r0, r3
    26e0:	4b1a      	ldr	r3, [pc, #104]	; (274c <spi_write_reg+0x110>)
    26e2:	4798      	blx	r3
    26e4:	0003      	movs	r3, r0
    26e6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    26e8:	230d      	movs	r3, #13
    26ea:	18fb      	adds	r3, r7, r3
    26ec:	781b      	ldrb	r3, [r3, #0]
    26ee:	b25b      	sxtb	r3, r3
    26f0:	2b01      	cmp	r3, #1
    26f2:	d018      	beq.n	2726 <spi_write_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    26f4:	4a16      	ldr	r2, [pc, #88]	; (2750 <spi_write_reg+0x114>)
    26f6:	4910      	ldr	r1, [pc, #64]	; (2738 <spi_write_reg+0xfc>)
    26f8:	4b10      	ldr	r3, [pc, #64]	; (273c <spi_write_reg+0x100>)
    26fa:	0018      	movs	r0, r3
    26fc:	4b10      	ldr	r3, [pc, #64]	; (2740 <spi_write_reg+0x104>)
    26fe:	4798      	blx	r3
    2700:	687a      	ldr	r2, [r7, #4]
    2702:	4b14      	ldr	r3, [pc, #80]	; (2754 <spi_write_reg+0x118>)
    2704:	0011      	movs	r1, r2
    2706:	0018      	movs	r0, r3
    2708:	4b0d      	ldr	r3, [pc, #52]	; (2740 <spi_write_reg+0x104>)
    270a:	4798      	blx	r3
    270c:	200d      	movs	r0, #13
    270e:	4b0e      	ldr	r3, [pc, #56]	; (2748 <spi_write_reg+0x10c>)
    2710:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2712:	2300      	movs	r3, #0
    2714:	9300      	str	r3, [sp, #0]
    2716:	2300      	movs	r3, #0
    2718:	2200      	movs	r2, #0
    271a:	2100      	movs	r1, #0
    271c:	20cf      	movs	r0, #207	; 0xcf
    271e:	4c04      	ldr	r4, [pc, #16]	; (2730 <spi_write_reg+0xf4>)
    2720:	47a0      	blx	r4
		return N_FAIL;
    2722:	2300      	movs	r3, #0
    2724:	e000      	b.n	2728 <spi_write_reg+0xec>
	}

	return N_OK;
    2726:	2301      	movs	r3, #1
	}

	return result;

#endif
}
    2728:	0018      	movs	r0, r3
    272a:	46bd      	mov	sp, r7
    272c:	b004      	add	sp, #16
    272e:	bdb0      	pop	{r4, r5, r7, pc}
    2730:	00001de5 	.word	0x00001de5
    2734:	000001ff 	.word	0x000001ff
    2738:	0000827c 	.word	0x0000827c
    273c:	00007d54 	.word	0x00007d54
    2740:	000068f1 	.word	0x000068f1
    2744:	00007f34 	.word	0x00007f34
    2748:	00006925 	.word	0x00006925
    274c:	00002129 	.word	0x00002129
    2750:	00000205 	.word	0x00000205
    2754:	00007f60 	.word	0x00007f60

00002758 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    2758:	b5b0      	push	{r4, r5, r7, lr}
    275a:	b088      	sub	sp, #32
    275c:	af02      	add	r7, sp, #8
    275e:	60f8      	str	r0, [r7, #12]
    2760:	60b9      	str	r1, [r7, #8]
    2762:	1dbb      	adds	r3, r7, #6
    2764:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    2766:	2317      	movs	r3, #23
    2768:	18fb      	adds	r3, r7, r3
    276a:	22c7      	movs	r2, #199	; 0xc7
    276c:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    276e:	1dbb      	adds	r3, r7, #6
    2770:	881a      	ldrh	r2, [r3, #0]
    2772:	2316      	movs	r3, #22
    2774:	18fc      	adds	r4, r7, r3
    2776:	68f9      	ldr	r1, [r7, #12]
    2778:	2317      	movs	r3, #23
    277a:	18fb      	adds	r3, r7, r3
    277c:	7818      	ldrb	r0, [r3, #0]
    277e:	2300      	movs	r3, #0
    2780:	9300      	str	r3, [sp, #0]
    2782:	0013      	movs	r3, r2
    2784:	2200      	movs	r2, #0
    2786:	4d37      	ldr	r5, [pc, #220]	; (2864 <nm_spi_write+0x10c>)
    2788:	47a8      	blx	r5
    278a:	0003      	movs	r3, r0
    278c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    278e:	2316      	movs	r3, #22
    2790:	18fb      	adds	r3, r7, r3
    2792:	781b      	ldrb	r3, [r3, #0]
    2794:	b25b      	sxtb	r3, r3
    2796:	2b01      	cmp	r3, #1
    2798:	d010      	beq.n	27bc <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    279a:	4a33      	ldr	r2, [pc, #204]	; (2868 <nm_spi_write+0x110>)
    279c:	4933      	ldr	r1, [pc, #204]	; (286c <nm_spi_write+0x114>)
    279e:	4b34      	ldr	r3, [pc, #208]	; (2870 <nm_spi_write+0x118>)
    27a0:	0018      	movs	r0, r3
    27a2:	4b34      	ldr	r3, [pc, #208]	; (2874 <nm_spi_write+0x11c>)
    27a4:	4798      	blx	r3
    27a6:	68fa      	ldr	r2, [r7, #12]
    27a8:	4b33      	ldr	r3, [pc, #204]	; (2878 <nm_spi_write+0x120>)
    27aa:	0011      	movs	r1, r2
    27ac:	0018      	movs	r0, r3
    27ae:	4b31      	ldr	r3, [pc, #196]	; (2874 <nm_spi_write+0x11c>)
    27b0:	4798      	blx	r3
    27b2:	200d      	movs	r0, #13
    27b4:	4b31      	ldr	r3, [pc, #196]	; (287c <nm_spi_write+0x124>)
    27b6:	4798      	blx	r3
		return N_FAIL;
    27b8:	2300      	movs	r3, #0
    27ba:	e04f      	b.n	285c <nm_spi_write+0x104>
	}

	result = spi_cmd_rsp(cmd);
    27bc:	2316      	movs	r3, #22
    27be:	18fc      	adds	r4, r7, r3
    27c0:	2317      	movs	r3, #23
    27c2:	18fb      	adds	r3, r7, r3
    27c4:	781b      	ldrb	r3, [r3, #0]
    27c6:	0018      	movs	r0, r3
    27c8:	4b2d      	ldr	r3, [pc, #180]	; (2880 <nm_spi_write+0x128>)
    27ca:	4798      	blx	r3
    27cc:	0003      	movs	r3, r0
    27ce:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    27d0:	2316      	movs	r3, #22
    27d2:	18fb      	adds	r3, r7, r3
    27d4:	781b      	ldrb	r3, [r3, #0]
    27d6:	b25b      	sxtb	r3, r3
    27d8:	2b01      	cmp	r3, #1
    27da:	d018      	beq.n	280e <nm_spi_write+0xb6>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    27dc:	4a29      	ldr	r2, [pc, #164]	; (2884 <nm_spi_write+0x12c>)
    27de:	4923      	ldr	r1, [pc, #140]	; (286c <nm_spi_write+0x114>)
    27e0:	4b23      	ldr	r3, [pc, #140]	; (2870 <nm_spi_write+0x118>)
    27e2:	0018      	movs	r0, r3
    27e4:	4b23      	ldr	r3, [pc, #140]	; (2874 <nm_spi_write+0x11c>)
    27e6:	4798      	blx	r3
    27e8:	68fa      	ldr	r2, [r7, #12]
    27ea:	4b27      	ldr	r3, [pc, #156]	; (2888 <nm_spi_write+0x130>)
    27ec:	0011      	movs	r1, r2
    27ee:	0018      	movs	r0, r3
    27f0:	4b20      	ldr	r3, [pc, #128]	; (2874 <nm_spi_write+0x11c>)
    27f2:	4798      	blx	r3
    27f4:	200d      	movs	r0, #13
    27f6:	4b21      	ldr	r3, [pc, #132]	; (287c <nm_spi_write+0x124>)
    27f8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    27fa:	2300      	movs	r3, #0
    27fc:	9300      	str	r3, [sp, #0]
    27fe:	2300      	movs	r3, #0
    2800:	2200      	movs	r2, #0
    2802:	2100      	movs	r1, #0
    2804:	20cf      	movs	r0, #207	; 0xcf
    2806:	4c17      	ldr	r4, [pc, #92]	; (2864 <nm_spi_write+0x10c>)
    2808:	47a0      	blx	r4
		return N_FAIL;
    280a:	2300      	movs	r3, #0
    280c:	e026      	b.n	285c <nm_spi_write+0x104>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    280e:	2316      	movs	r3, #22
    2810:	18fc      	adds	r4, r7, r3
    2812:	1dbb      	adds	r3, r7, #6
    2814:	881a      	ldrh	r2, [r3, #0]
    2816:	68bb      	ldr	r3, [r7, #8]
    2818:	0011      	movs	r1, r2
    281a:	0018      	movs	r0, r3
    281c:	4b1b      	ldr	r3, [pc, #108]	; (288c <nm_spi_write+0x134>)
    281e:	4798      	blx	r3
    2820:	0003      	movs	r3, r0
    2822:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2824:	2316      	movs	r3, #22
    2826:	18fb      	adds	r3, r7, r3
    2828:	781b      	ldrb	r3, [r3, #0]
    282a:	b25b      	sxtb	r3, r3
    282c:	2b01      	cmp	r3, #1
    282e:	d014      	beq.n	285a <nm_spi_write+0x102>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2830:	4a17      	ldr	r2, [pc, #92]	; (2890 <nm_spi_write+0x138>)
    2832:	490e      	ldr	r1, [pc, #56]	; (286c <nm_spi_write+0x114>)
    2834:	4b0e      	ldr	r3, [pc, #56]	; (2870 <nm_spi_write+0x118>)
    2836:	0018      	movs	r0, r3
    2838:	4b0e      	ldr	r3, [pc, #56]	; (2874 <nm_spi_write+0x11c>)
    283a:	4798      	blx	r3
    283c:	4b15      	ldr	r3, [pc, #84]	; (2894 <nm_spi_write+0x13c>)
    283e:	0018      	movs	r0, r3
    2840:	4b15      	ldr	r3, [pc, #84]	; (2898 <nm_spi_write+0x140>)
    2842:	4798      	blx	r3
    2844:	200d      	movs	r0, #13
    2846:	4b0d      	ldr	r3, [pc, #52]	; (287c <nm_spi_write+0x124>)
    2848:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    284a:	2300      	movs	r3, #0
    284c:	9300      	str	r3, [sp, #0]
    284e:	2300      	movs	r3, #0
    2850:	2200      	movs	r2, #0
    2852:	2100      	movs	r1, #0
    2854:	20cf      	movs	r0, #207	; 0xcf
    2856:	4c03      	ldr	r4, [pc, #12]	; (2864 <nm_spi_write+0x10c>)
    2858:	47a0      	blx	r4
	}

	return N_OK;
    285a:	2301      	movs	r3, #1
}
    285c:	0018      	movs	r0, r3
    285e:	46bd      	mov	sp, r7
    2860:	b006      	add	sp, #24
    2862:	bdb0      	pop	{r4, r5, r7, pc}
    2864:	00001de5 	.word	0x00001de5
    2868:	00000223 	.word	0x00000223
    286c:	0000828c 	.word	0x0000828c
    2870:	00007d54 	.word	0x00007d54
    2874:	000068f1 	.word	0x000068f1
    2878:	00007f98 	.word	0x00007f98
    287c:	00006925 	.word	0x00006925
    2880:	00002129 	.word	0x00002129
    2884:	00000229 	.word	0x00000229
    2888:	00007fc8 	.word	0x00007fc8
    288c:	00002469 	.word	0x00002469
    2890:	0000023a 	.word	0x0000023a
    2894:	00008000 	.word	0x00008000
    2898:	00006a11 	.word	0x00006a11

0000289c <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    289c:	b5b0      	push	{r4, r5, r7, lr}
    289e:	b086      	sub	sp, #24
    28a0:	af02      	add	r7, sp, #8
    28a2:	6078      	str	r0, [r7, #4]
    28a4:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    28a6:	230d      	movs	r3, #13
    28a8:	18fb      	adds	r3, r7, r3
    28aa:	2201      	movs	r2, #1
    28ac:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    28ae:	230f      	movs	r3, #15
    28b0:	18fb      	adds	r3, r7, r3
    28b2:	22ca      	movs	r2, #202	; 0xca
    28b4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    28b6:	230e      	movs	r3, #14
    28b8:	18fb      	adds	r3, r7, r3
    28ba:	2200      	movs	r2, #0
    28bc:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff)
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	2bff      	cmp	r3, #255	; 0xff
    28c2:	d808      	bhi.n	28d6 <spi_read_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    28c4:	230f      	movs	r3, #15
    28c6:	18fb      	adds	r3, r7, r3
    28c8:	22c4      	movs	r2, #196	; 0xc4
    28ca:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    28cc:	230e      	movs	r3, #14
    28ce:	18fb      	adds	r3, r7, r3
    28d0:	2201      	movs	r2, #1
    28d2:	701a      	strb	r2, [r3, #0]
    28d4:	e007      	b.n	28e6 <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    28d6:	230f      	movs	r3, #15
    28d8:	18fb      	adds	r3, r7, r3
    28da:	22ca      	movs	r2, #202	; 0xca
    28dc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    28de:	230e      	movs	r3, #14
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	2200      	movs	r2, #0
    28e4:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    28e6:	230d      	movs	r3, #13
    28e8:	18fc      	adds	r4, r7, r3
    28ea:	6879      	ldr	r1, [r7, #4]
    28ec:	230f      	movs	r3, #15
    28ee:	18fb      	adds	r3, r7, r3
    28f0:	7818      	ldrb	r0, [r3, #0]
    28f2:	230e      	movs	r3, #14
    28f4:	18fb      	adds	r3, r7, r3
    28f6:	781b      	ldrb	r3, [r3, #0]
    28f8:	9300      	str	r3, [sp, #0]
    28fa:	2304      	movs	r3, #4
    28fc:	2200      	movs	r2, #0
    28fe:	4d44      	ldr	r5, [pc, #272]	; (2a10 <spi_read_reg+0x174>)
    2900:	47a8      	blx	r5
    2902:	0003      	movs	r3, r0
    2904:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2906:	230d      	movs	r3, #13
    2908:	18fb      	adds	r3, r7, r3
    290a:	781b      	ldrb	r3, [r3, #0]
    290c:	b25b      	sxtb	r3, r3
    290e:	2b01      	cmp	r3, #1
    2910:	d010      	beq.n	2934 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    2912:	4a40      	ldr	r2, [pc, #256]	; (2a14 <spi_read_reg+0x178>)
    2914:	4940      	ldr	r1, [pc, #256]	; (2a18 <spi_read_reg+0x17c>)
    2916:	4b41      	ldr	r3, [pc, #260]	; (2a1c <spi_read_reg+0x180>)
    2918:	0018      	movs	r0, r3
    291a:	4b41      	ldr	r3, [pc, #260]	; (2a20 <spi_read_reg+0x184>)
    291c:	4798      	blx	r3
    291e:	687a      	ldr	r2, [r7, #4]
    2920:	4b40      	ldr	r3, [pc, #256]	; (2a24 <spi_read_reg+0x188>)
    2922:	0011      	movs	r1, r2
    2924:	0018      	movs	r0, r3
    2926:	4b3e      	ldr	r3, [pc, #248]	; (2a20 <spi_read_reg+0x184>)
    2928:	4798      	blx	r3
    292a:	200d      	movs	r0, #13
    292c:	4b3e      	ldr	r3, [pc, #248]	; (2a28 <spi_read_reg+0x18c>)
    292e:	4798      	blx	r3
		return N_FAIL;
    2930:	2300      	movs	r3, #0
    2932:	e068      	b.n	2a06 <spi_read_reg+0x16a>
	}

	result = spi_cmd_rsp(cmd);
    2934:	230d      	movs	r3, #13
    2936:	18fc      	adds	r4, r7, r3
    2938:	230f      	movs	r3, #15
    293a:	18fb      	adds	r3, r7, r3
    293c:	781b      	ldrb	r3, [r3, #0]
    293e:	0018      	movs	r0, r3
    2940:	4b3a      	ldr	r3, [pc, #232]	; (2a2c <spi_read_reg+0x190>)
    2942:	4798      	blx	r3
    2944:	0003      	movs	r3, r0
    2946:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2948:	230d      	movs	r3, #13
    294a:	18fb      	adds	r3, r7, r3
    294c:	781b      	ldrb	r3, [r3, #0]
    294e:	b25b      	sxtb	r3, r3
    2950:	2b01      	cmp	r3, #1
    2952:	d018      	beq.n	2986 <spi_read_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    2954:	4a36      	ldr	r2, [pc, #216]	; (2a30 <spi_read_reg+0x194>)
    2956:	4930      	ldr	r1, [pc, #192]	; (2a18 <spi_read_reg+0x17c>)
    2958:	4b30      	ldr	r3, [pc, #192]	; (2a1c <spi_read_reg+0x180>)
    295a:	0018      	movs	r0, r3
    295c:	4b30      	ldr	r3, [pc, #192]	; (2a20 <spi_read_reg+0x184>)
    295e:	4798      	blx	r3
    2960:	687a      	ldr	r2, [r7, #4]
    2962:	4b34      	ldr	r3, [pc, #208]	; (2a34 <spi_read_reg+0x198>)
    2964:	0011      	movs	r1, r2
    2966:	0018      	movs	r0, r3
    2968:	4b2d      	ldr	r3, [pc, #180]	; (2a20 <spi_read_reg+0x184>)
    296a:	4798      	blx	r3
    296c:	200d      	movs	r0, #13
    296e:	4b2e      	ldr	r3, [pc, #184]	; (2a28 <spi_read_reg+0x18c>)
    2970:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2972:	2300      	movs	r3, #0
    2974:	9300      	str	r3, [sp, #0]
    2976:	2300      	movs	r3, #0
    2978:	2200      	movs	r2, #0
    297a:	2100      	movs	r1, #0
    297c:	20cf      	movs	r0, #207	; 0xcf
    297e:	4c24      	ldr	r4, [pc, #144]	; (2a10 <spi_read_reg+0x174>)
    2980:	47a0      	blx	r4
		return N_FAIL;
    2982:	2300      	movs	r3, #0
    2984:	e03f      	b.n	2a06 <spi_read_reg+0x16a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    2986:	230d      	movs	r3, #13
    2988:	18fc      	adds	r4, r7, r3
    298a:	230e      	movs	r3, #14
    298c:	18fb      	adds	r3, r7, r3
    298e:	781a      	ldrb	r2, [r3, #0]
    2990:	2308      	movs	r3, #8
    2992:	18fb      	adds	r3, r7, r3
    2994:	2104      	movs	r1, #4
    2996:	0018      	movs	r0, r3
    2998:	4b27      	ldr	r3, [pc, #156]	; (2a38 <spi_read_reg+0x19c>)
    299a:	4798      	blx	r3
    299c:	0003      	movs	r3, r0
    299e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    29a0:	230d      	movs	r3, #13
    29a2:	18fb      	adds	r3, r7, r3
    29a4:	781b      	ldrb	r3, [r3, #0]
    29a6:	b25b      	sxtb	r3, r3
    29a8:	2b01      	cmp	r3, #1
    29aa:	d016      	beq.n	29da <spi_read_reg+0x13e>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    29ac:	4a23      	ldr	r2, [pc, #140]	; (2a3c <spi_read_reg+0x1a0>)
    29ae:	491a      	ldr	r1, [pc, #104]	; (2a18 <spi_read_reg+0x17c>)
    29b0:	4b1a      	ldr	r3, [pc, #104]	; (2a1c <spi_read_reg+0x180>)
    29b2:	0018      	movs	r0, r3
    29b4:	4b1a      	ldr	r3, [pc, #104]	; (2a20 <spi_read_reg+0x184>)
    29b6:	4798      	blx	r3
    29b8:	4b21      	ldr	r3, [pc, #132]	; (2a40 <spi_read_reg+0x1a4>)
    29ba:	0018      	movs	r0, r3
    29bc:	4b21      	ldr	r3, [pc, #132]	; (2a44 <spi_read_reg+0x1a8>)
    29be:	4798      	blx	r3
    29c0:	200d      	movs	r0, #13
    29c2:	4b19      	ldr	r3, [pc, #100]	; (2a28 <spi_read_reg+0x18c>)
    29c4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    29c6:	2300      	movs	r3, #0
    29c8:	9300      	str	r3, [sp, #0]
    29ca:	2300      	movs	r3, #0
    29cc:	2200      	movs	r2, #0
    29ce:	2100      	movs	r1, #0
    29d0:	20cf      	movs	r0, #207	; 0xcf
    29d2:	4c0f      	ldr	r4, [pc, #60]	; (2a10 <spi_read_reg+0x174>)
    29d4:	47a0      	blx	r4
		return N_FAIL;
    29d6:	2300      	movs	r3, #0
    29d8:	e015      	b.n	2a06 <spi_read_reg+0x16a>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    29da:	2308      	movs	r3, #8
    29dc:	18fb      	adds	r3, r7, r3
    29de:	781b      	ldrb	r3, [r3, #0]
    29e0:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    29e2:	2308      	movs	r3, #8
    29e4:	18fb      	adds	r3, r7, r3
    29e6:	785b      	ldrb	r3, [r3, #1]
    29e8:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    29ea:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    29ec:	2308      	movs	r3, #8
    29ee:	18fb      	adds	r3, r7, r3
    29f0:	789b      	ldrb	r3, [r3, #2]
    29f2:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    29f4:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    29f6:	2308      	movs	r3, #8
    29f8:	18fb      	adds	r3, r7, r3
    29fa:	78db      	ldrb	r3, [r3, #3]
    29fc:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    29fe:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    2a00:	683b      	ldr	r3, [r7, #0]
    2a02:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    2a04:	2301      	movs	r3, #1
}
    2a06:	0018      	movs	r0, r3
    2a08:	46bd      	mov	sp, r7
    2a0a:	b004      	add	sp, #16
    2a0c:	bdb0      	pop	{r4, r5, r7, pc}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	00001de5 	.word	0x00001de5
    2a14:	00000259 	.word	0x00000259
    2a18:	0000829c 	.word	0x0000829c
    2a1c:	00007d54 	.word	0x00007d54
    2a20:	000068f1 	.word	0x000068f1
    2a24:	00008028 	.word	0x00008028
    2a28:	00006925 	.word	0x00006925
    2a2c:	00002129 	.word	0x00002129
    2a30:	0000025f 	.word	0x0000025f
    2a34:	00008054 	.word	0x00008054
    2a38:	00002265 	.word	0x00002265
    2a3c:	00000267 	.word	0x00000267
    2a40:	00008088 	.word	0x00008088
    2a44:	00006a11 	.word	0x00006a11

00002a48 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    2a48:	b5b0      	push	{r4, r5, r7, lr}
    2a4a:	b088      	sub	sp, #32
    2a4c:	af02      	add	r7, sp, #8
    2a4e:	60f8      	str	r0, [r7, #12]
    2a50:	60b9      	str	r1, [r7, #8]
    2a52:	1dbb      	adds	r3, r7, #6
    2a54:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    2a56:	2317      	movs	r3, #23
    2a58:	18fb      	adds	r3, r7, r3
    2a5a:	22c8      	movs	r2, #200	; 0xc8
    2a5c:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    2a5e:	1dbb      	adds	r3, r7, #6
    2a60:	881a      	ldrh	r2, [r3, #0]
    2a62:	2316      	movs	r3, #22
    2a64:	18fc      	adds	r4, r7, r3
    2a66:	68f9      	ldr	r1, [r7, #12]
    2a68:	2317      	movs	r3, #23
    2a6a:	18fb      	adds	r3, r7, r3
    2a6c:	7818      	ldrb	r0, [r3, #0]
    2a6e:	2300      	movs	r3, #0
    2a70:	9300      	str	r3, [sp, #0]
    2a72:	0013      	movs	r3, r2
    2a74:	2200      	movs	r2, #0
    2a76:	4d39      	ldr	r5, [pc, #228]	; (2b5c <nm_spi_read+0x114>)
    2a78:	47a8      	blx	r5
    2a7a:	0003      	movs	r3, r0
    2a7c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2a7e:	2316      	movs	r3, #22
    2a80:	18fb      	adds	r3, r7, r3
    2a82:	781b      	ldrb	r3, [r3, #0]
    2a84:	b25b      	sxtb	r3, r3
    2a86:	2b01      	cmp	r3, #1
    2a88:	d011      	beq.n	2aae <nm_spi_read+0x66>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    2a8a:	23a2      	movs	r3, #162	; 0xa2
    2a8c:	009a      	lsls	r2, r3, #2
    2a8e:	4934      	ldr	r1, [pc, #208]	; (2b60 <nm_spi_read+0x118>)
    2a90:	4b34      	ldr	r3, [pc, #208]	; (2b64 <nm_spi_read+0x11c>)
    2a92:	0018      	movs	r0, r3
    2a94:	4b34      	ldr	r3, [pc, #208]	; (2b68 <nm_spi_read+0x120>)
    2a96:	4798      	blx	r3
    2a98:	68fa      	ldr	r2, [r7, #12]
    2a9a:	4b34      	ldr	r3, [pc, #208]	; (2b6c <nm_spi_read+0x124>)
    2a9c:	0011      	movs	r1, r2
    2a9e:	0018      	movs	r0, r3
    2aa0:	4b31      	ldr	r3, [pc, #196]	; (2b68 <nm_spi_read+0x120>)
    2aa2:	4798      	blx	r3
    2aa4:	200d      	movs	r0, #13
    2aa6:	4b32      	ldr	r3, [pc, #200]	; (2b70 <nm_spi_read+0x128>)
    2aa8:	4798      	blx	r3
		return N_FAIL;
    2aaa:	2300      	movs	r3, #0
    2aac:	e052      	b.n	2b54 <nm_spi_read+0x10c>
	}

	result = spi_cmd_rsp(cmd);
    2aae:	2316      	movs	r3, #22
    2ab0:	18fc      	adds	r4, r7, r3
    2ab2:	2317      	movs	r3, #23
    2ab4:	18fb      	adds	r3, r7, r3
    2ab6:	781b      	ldrb	r3, [r3, #0]
    2ab8:	0018      	movs	r0, r3
    2aba:	4b2e      	ldr	r3, [pc, #184]	; (2b74 <nm_spi_read+0x12c>)
    2abc:	4798      	blx	r3
    2abe:	0003      	movs	r3, r0
    2ac0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2ac2:	2316      	movs	r3, #22
    2ac4:	18fb      	adds	r3, r7, r3
    2ac6:	781b      	ldrb	r3, [r3, #0]
    2ac8:	b25b      	sxtb	r3, r3
    2aca:	2b01      	cmp	r3, #1
    2acc:	d018      	beq.n	2b00 <nm_spi_read+0xb8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    2ace:	4a2a      	ldr	r2, [pc, #168]	; (2b78 <nm_spi_read+0x130>)
    2ad0:	4923      	ldr	r1, [pc, #140]	; (2b60 <nm_spi_read+0x118>)
    2ad2:	4b24      	ldr	r3, [pc, #144]	; (2b64 <nm_spi_read+0x11c>)
    2ad4:	0018      	movs	r0, r3
    2ad6:	4b24      	ldr	r3, [pc, #144]	; (2b68 <nm_spi_read+0x120>)
    2ad8:	4798      	blx	r3
    2ada:	68fa      	ldr	r2, [r7, #12]
    2adc:	4b27      	ldr	r3, [pc, #156]	; (2b7c <nm_spi_read+0x134>)
    2ade:	0011      	movs	r1, r2
    2ae0:	0018      	movs	r0, r3
    2ae2:	4b21      	ldr	r3, [pc, #132]	; (2b68 <nm_spi_read+0x120>)
    2ae4:	4798      	blx	r3
    2ae6:	200d      	movs	r0, #13
    2ae8:	4b21      	ldr	r3, [pc, #132]	; (2b70 <nm_spi_read+0x128>)
    2aea:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2aec:	2300      	movs	r3, #0
    2aee:	9300      	str	r3, [sp, #0]
    2af0:	2300      	movs	r3, #0
    2af2:	2200      	movs	r2, #0
    2af4:	2100      	movs	r1, #0
    2af6:	20cf      	movs	r0, #207	; 0xcf
    2af8:	4c18      	ldr	r4, [pc, #96]	; (2b5c <nm_spi_read+0x114>)
    2afa:	47a0      	blx	r4
		return N_FAIL;
    2afc:	2300      	movs	r3, #0
    2afe:	e029      	b.n	2b54 <nm_spi_read+0x10c>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    2b00:	2316      	movs	r3, #22
    2b02:	18fc      	adds	r4, r7, r3
    2b04:	1dbb      	adds	r3, r7, #6
    2b06:	8819      	ldrh	r1, [r3, #0]
    2b08:	68bb      	ldr	r3, [r7, #8]
    2b0a:	2200      	movs	r2, #0
    2b0c:	0018      	movs	r0, r3
    2b0e:	4b1c      	ldr	r3, [pc, #112]	; (2b80 <nm_spi_read+0x138>)
    2b10:	4798      	blx	r3
    2b12:	0003      	movs	r3, r0
    2b14:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2b16:	2316      	movs	r3, #22
    2b18:	18fb      	adds	r3, r7, r3
    2b1a:	781b      	ldrb	r3, [r3, #0]
    2b1c:	b25b      	sxtb	r3, r3
    2b1e:	2b01      	cmp	r3, #1
    2b20:	d017      	beq.n	2b52 <nm_spi_read+0x10a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2b22:	23a6      	movs	r3, #166	; 0xa6
    2b24:	009a      	lsls	r2, r3, #2
    2b26:	490e      	ldr	r1, [pc, #56]	; (2b60 <nm_spi_read+0x118>)
    2b28:	4b0e      	ldr	r3, [pc, #56]	; (2b64 <nm_spi_read+0x11c>)
    2b2a:	0018      	movs	r0, r3
    2b2c:	4b0e      	ldr	r3, [pc, #56]	; (2b68 <nm_spi_read+0x120>)
    2b2e:	4798      	blx	r3
    2b30:	4b14      	ldr	r3, [pc, #80]	; (2b84 <nm_spi_read+0x13c>)
    2b32:	0018      	movs	r0, r3
    2b34:	4b14      	ldr	r3, [pc, #80]	; (2b88 <nm_spi_read+0x140>)
    2b36:	4798      	blx	r3
    2b38:	200d      	movs	r0, #13
    2b3a:	4b0d      	ldr	r3, [pc, #52]	; (2b70 <nm_spi_read+0x128>)
    2b3c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2b3e:	2300      	movs	r3, #0
    2b40:	9300      	str	r3, [sp, #0]
    2b42:	2300      	movs	r3, #0
    2b44:	2200      	movs	r2, #0
    2b46:	2100      	movs	r1, #0
    2b48:	20cf      	movs	r0, #207	; 0xcf
    2b4a:	4c04      	ldr	r4, [pc, #16]	; (2b5c <nm_spi_read+0x114>)
    2b4c:	47a0      	blx	r4
		return N_FAIL;
    2b4e:	2300      	movs	r3, #0
    2b50:	e000      	b.n	2b54 <nm_spi_read+0x10c>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
    2b52:	2301      	movs	r3, #1
}
    2b54:	0018      	movs	r0, r3
    2b56:	46bd      	mov	sp, r7
    2b58:	b006      	add	sp, #24
    2b5a:	bdb0      	pop	{r4, r5, r7, pc}
    2b5c:	00001de5 	.word	0x00001de5
    2b60:	000082ac 	.word	0x000082ac
    2b64:	00007d54 	.word	0x00007d54
    2b68:	000068f1 	.word	0x000068f1
    2b6c:	000080a8 	.word	0x000080a8
    2b70:	00006925 	.word	0x00006925
    2b74:	00002129 	.word	0x00002129
    2b78:	0000028e 	.word	0x0000028e
    2b7c:	000080d8 	.word	0x000080d8
    2b80:	00002265 	.word	0x00002265
    2b84:	00008110 	.word	0x00008110
    2b88:	00006a11 	.word	0x00006a11

00002b8c <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    2b8c:	b580      	push	{r7, lr}
    2b8e:	b082      	sub	sp, #8
    2b90:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    2b92:	4b0c      	ldr	r3, [pc, #48]	; (2bc4 <spi_init_pkt_sz+0x38>)
    2b94:	0018      	movs	r0, r3
    2b96:	4b0c      	ldr	r3, [pc, #48]	; (2bc8 <spi_init_pkt_sz+0x3c>)
    2b98:	4798      	blx	r3
    2b9a:	0003      	movs	r3, r0
    2b9c:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    2b9e:	687b      	ldr	r3, [r7, #4]
    2ba0:	2270      	movs	r2, #112	; 0x70
    2ba2:	4393      	bics	r3, r2
    2ba4:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	2250      	movs	r2, #80	; 0x50
    2baa:	4313      	orrs	r3, r2
    2bac:	607b      	str	r3, [r7, #4]
    2bae:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    2bb0:	687b      	ldr	r3, [r7, #4]
    2bb2:	4a04      	ldr	r2, [pc, #16]	; (2bc4 <spi_init_pkt_sz+0x38>)
    2bb4:	0019      	movs	r1, r3
    2bb6:	0010      	movs	r0, r2
    2bb8:	4b04      	ldr	r3, [pc, #16]	; (2bcc <spi_init_pkt_sz+0x40>)
    2bba:	4798      	blx	r3
}
    2bbc:	46c0      	nop			; (mov r8, r8)
    2bbe:	46bd      	mov	sp, r7
    2bc0:	b002      	add	sp, #8
    2bc2:	bd80      	pop	{r7, pc}
    2bc4:	0000e824 	.word	0x0000e824
    2bc8:	00002d19 	.word	0x00002d19
    2bcc:	00002d8d 	.word	0x00002d8d

00002bd0 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    2bd0:	b580      	push	{r7, lr}
    2bd2:	b082      	sub	sp, #8
    2bd4:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg =0;
    2bd6:	2300      	movs	r3, #0
    2bd8:	603b      	str	r3, [r7, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    2bda:	4b3f      	ldr	r3, [pc, #252]	; (2cd8 <nm_spi_init+0x108>)
    2bdc:	2200      	movs	r2, #0
    2bde:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2be0:	003b      	movs	r3, r7
    2be2:	4a3e      	ldr	r2, [pc, #248]	; (2cdc <nm_spi_init+0x10c>)
    2be4:	0019      	movs	r1, r3
    2be6:	0010      	movs	r0, r2
    2be8:	4b3d      	ldr	r3, [pc, #244]	; (2ce0 <nm_spi_init+0x110>)
    2bea:	4798      	blx	r3
    2bec:	1e03      	subs	r3, r0, #0
    2bee:	d127      	bne.n	2c40 <nm_spi_init+0x70>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    2bf0:	4b39      	ldr	r3, [pc, #228]	; (2cd8 <nm_spi_init+0x108>)
    2bf2:	2201      	movs	r2, #1
    2bf4:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    2bf6:	4a3b      	ldr	r2, [pc, #236]	; (2ce4 <nm_spi_init+0x114>)
    2bf8:	493b      	ldr	r1, [pc, #236]	; (2ce8 <nm_spi_init+0x118>)
    2bfa:	4b3c      	ldr	r3, [pc, #240]	; (2cec <nm_spi_init+0x11c>)
    2bfc:	0018      	movs	r0, r3
    2bfe:	4b3c      	ldr	r3, [pc, #240]	; (2cf0 <nm_spi_init+0x120>)
    2c00:	4798      	blx	r3
    2c02:	4b3c      	ldr	r3, [pc, #240]	; (2cf4 <nm_spi_init+0x124>)
    2c04:	0018      	movs	r0, r3
    2c06:	4b3c      	ldr	r3, [pc, #240]	; (2cf8 <nm_spi_init+0x128>)
    2c08:	4798      	blx	r3
    2c0a:	200d      	movs	r0, #13
    2c0c:	4b3b      	ldr	r3, [pc, #236]	; (2cfc <nm_spi_init+0x12c>)
    2c0e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2c10:	003b      	movs	r3, r7
    2c12:	4a32      	ldr	r2, [pc, #200]	; (2cdc <nm_spi_init+0x10c>)
    2c14:	0019      	movs	r1, r3
    2c16:	0010      	movs	r0, r2
    2c18:	4b31      	ldr	r3, [pc, #196]	; (2ce0 <nm_spi_init+0x110>)
    2c1a:	4798      	blx	r3
    2c1c:	1e03      	subs	r3, r0, #0
    2c1e:	d10f      	bne.n	2c40 <nm_spi_init+0x70>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    2c20:	23b7      	movs	r3, #183	; 0xb7
    2c22:	009a      	lsls	r2, r3, #2
    2c24:	4930      	ldr	r1, [pc, #192]	; (2ce8 <nm_spi_init+0x118>)
    2c26:	4b31      	ldr	r3, [pc, #196]	; (2cec <nm_spi_init+0x11c>)
    2c28:	0018      	movs	r0, r3
    2c2a:	4b31      	ldr	r3, [pc, #196]	; (2cf0 <nm_spi_init+0x120>)
    2c2c:	4798      	blx	r3
    2c2e:	4b34      	ldr	r3, [pc, #208]	; (2d00 <nm_spi_init+0x130>)
    2c30:	0018      	movs	r0, r3
    2c32:	4b31      	ldr	r3, [pc, #196]	; (2cf8 <nm_spi_init+0x128>)
    2c34:	4798      	blx	r3
    2c36:	200d      	movs	r0, #13
    2c38:	4b30      	ldr	r3, [pc, #192]	; (2cfc <nm_spi_init+0x12c>)
    2c3a:	4798      	blx	r3
			return 0;
    2c3c:	2300      	movs	r3, #0
    2c3e:	e046      	b.n	2cce <nm_spi_init+0xfe>
		}
	}
	if(gu8Crc_off == 0)
    2c40:	4b25      	ldr	r3, [pc, #148]	; (2cd8 <nm_spi_init+0x108>)
    2c42:	781b      	ldrb	r3, [r3, #0]
    2c44:	2b00      	cmp	r3, #0
    2c46:	d125      	bne.n	2c94 <nm_spi_init+0xc4>
	{
		reg &= ~0xc;	/* disable crc checking */
    2c48:	683b      	ldr	r3, [r7, #0]
    2c4a:	220c      	movs	r2, #12
    2c4c:	4393      	bics	r3, r2
    2c4e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    2c50:	683b      	ldr	r3, [r7, #0]
    2c52:	2270      	movs	r2, #112	; 0x70
    2c54:	4393      	bics	r3, r2
    2c56:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    2c58:	683b      	ldr	r3, [r7, #0]
    2c5a:	2250      	movs	r2, #80	; 0x50
    2c5c:	4313      	orrs	r3, r2
    2c5e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    2c60:	683b      	ldr	r3, [r7, #0]
    2c62:	4a1e      	ldr	r2, [pc, #120]	; (2cdc <nm_spi_init+0x10c>)
    2c64:	0019      	movs	r1, r3
    2c66:	0010      	movs	r0, r2
    2c68:	4b26      	ldr	r3, [pc, #152]	; (2d04 <nm_spi_init+0x134>)
    2c6a:	4798      	blx	r3
    2c6c:	1e03      	subs	r3, r0, #0
    2c6e:	d10e      	bne.n	2c8e <nm_spi_init+0xbe>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2c70:	4a25      	ldr	r2, [pc, #148]	; (2d08 <nm_spi_init+0x138>)
    2c72:	491d      	ldr	r1, [pc, #116]	; (2ce8 <nm_spi_init+0x118>)
    2c74:	4b1d      	ldr	r3, [pc, #116]	; (2cec <nm_spi_init+0x11c>)
    2c76:	0018      	movs	r0, r3
    2c78:	4b1d      	ldr	r3, [pc, #116]	; (2cf0 <nm_spi_init+0x120>)
    2c7a:	4798      	blx	r3
    2c7c:	4b23      	ldr	r3, [pc, #140]	; (2d0c <nm_spi_init+0x13c>)
    2c7e:	0018      	movs	r0, r3
    2c80:	4b1d      	ldr	r3, [pc, #116]	; (2cf8 <nm_spi_init+0x128>)
    2c82:	4798      	blx	r3
    2c84:	200d      	movs	r0, #13
    2c86:	4b1d      	ldr	r3, [pc, #116]	; (2cfc <nm_spi_init+0x12c>)
    2c88:	4798      	blx	r3
			return 0;
    2c8a:	2300      	movs	r3, #0
    2c8c:	e01f      	b.n	2cce <nm_spi_init+0xfe>
		}
		gu8Crc_off = 1;
    2c8e:	4b12      	ldr	r3, [pc, #72]	; (2cd8 <nm_spi_init+0x108>)
    2c90:	2201      	movs	r2, #1
    2c92:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    2c94:	1d3a      	adds	r2, r7, #4
    2c96:	2380      	movs	r3, #128	; 0x80
    2c98:	015b      	lsls	r3, r3, #5
    2c9a:	0011      	movs	r1, r2
    2c9c:	0018      	movs	r0, r3
    2c9e:	4b10      	ldr	r3, [pc, #64]	; (2ce0 <nm_spi_init+0x110>)
    2ca0:	4798      	blx	r3
    2ca2:	1e03      	subs	r3, r0, #0
    2ca4:	d110      	bne.n	2cc8 <nm_spi_init+0xf8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    2ca6:	23bc      	movs	r3, #188	; 0xbc
    2ca8:	009a      	lsls	r2, r3, #2
    2caa:	490f      	ldr	r1, [pc, #60]	; (2ce8 <nm_spi_init+0x118>)
    2cac:	4b0f      	ldr	r3, [pc, #60]	; (2cec <nm_spi_init+0x11c>)
    2cae:	0018      	movs	r0, r3
    2cb0:	4b0f      	ldr	r3, [pc, #60]	; (2cf0 <nm_spi_init+0x120>)
    2cb2:	4798      	blx	r3
    2cb4:	4b16      	ldr	r3, [pc, #88]	; (2d10 <nm_spi_init+0x140>)
    2cb6:	0018      	movs	r0, r3
    2cb8:	4b0f      	ldr	r3, [pc, #60]	; (2cf8 <nm_spi_init+0x128>)
    2cba:	4798      	blx	r3
    2cbc:	200d      	movs	r0, #13
    2cbe:	4b0f      	ldr	r3, [pc, #60]	; (2cfc <nm_spi_init+0x12c>)
    2cc0:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    2cc2:	2306      	movs	r3, #6
    2cc4:	425b      	negs	r3, r3
    2cc6:	e002      	b.n	2cce <nm_spi_init+0xfe>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    2cc8:	4b12      	ldr	r3, [pc, #72]	; (2d14 <nm_spi_init+0x144>)
    2cca:	4798      	blx	r3


	return M2M_SUCCESS;
    2ccc:	2300      	movs	r3, #0
}
    2cce:	0018      	movs	r0, r3
    2cd0:	46bd      	mov	sp, r7
    2cd2:	b002      	add	sp, #8
    2cd4:	bd80      	pop	{r7, pc}
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	20000514 	.word	0x20000514
    2cdc:	0000e824 	.word	0x0000e824
    2ce0:	0000289d 	.word	0x0000289d
    2ce4:	000002d9 	.word	0x000002d9
    2ce8:	000082b8 	.word	0x000082b8
    2cec:	00007d54 	.word	0x00007d54
    2cf0:	000068f1 	.word	0x000068f1
    2cf4:	00008138 	.word	0x00008138
    2cf8:	00006a11 	.word	0x00006a11
    2cfc:	00006925 	.word	0x00006925
    2d00:	00008188 	.word	0x00008188
    2d04:	0000263d 	.word	0x0000263d
    2d08:	000002e6 	.word	0x000002e6
    2d0c:	000081b4 	.word	0x000081b4
    2d10:	000081e8 	.word	0x000081e8
    2d14:	00002b8d 	.word	0x00002b8d

00002d18 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2d18:	b580      	push	{r7, lr}
    2d1a:	b084      	sub	sp, #16
    2d1c:	af00      	add	r7, sp, #0
    2d1e:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    2d20:	230c      	movs	r3, #12
    2d22:	18fa      	adds	r2, r7, r3
    2d24:	687b      	ldr	r3, [r7, #4]
    2d26:	0011      	movs	r1, r2
    2d28:	0018      	movs	r0, r3
    2d2a:	4b03      	ldr	r3, [pc, #12]	; (2d38 <nm_spi_read_reg+0x20>)
    2d2c:	4798      	blx	r3

	return u32Val;
    2d2e:	68fb      	ldr	r3, [r7, #12]
}
    2d30:	0018      	movs	r0, r3
    2d32:	46bd      	mov	sp, r7
    2d34:	b004      	add	sp, #16
    2d36:	bd80      	pop	{r7, pc}
    2d38:	0000289d 	.word	0x0000289d

00002d3c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2d3c:	b590      	push	{r4, r7, lr}
    2d3e:	b085      	sub	sp, #20
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
    2d44:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    2d46:	230f      	movs	r3, #15
    2d48:	18fc      	adds	r4, r7, r3
    2d4a:	683a      	ldr	r2, [r7, #0]
    2d4c:	687b      	ldr	r3, [r7, #4]
    2d4e:	0011      	movs	r1, r2
    2d50:	0018      	movs	r0, r3
    2d52:	4b0d      	ldr	r3, [pc, #52]	; (2d88 <nm_spi_read_reg_with_ret+0x4c>)
    2d54:	4798      	blx	r3
    2d56:	0003      	movs	r3, r0
    2d58:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2d5a:	230f      	movs	r3, #15
    2d5c:	18fb      	adds	r3, r7, r3
    2d5e:	781b      	ldrb	r3, [r3, #0]
    2d60:	b25b      	sxtb	r3, r3
    2d62:	2b01      	cmp	r3, #1
    2d64:	d104      	bne.n	2d70 <nm_spi_read_reg_with_ret+0x34>
    2d66:	230f      	movs	r3, #15
    2d68:	18fb      	adds	r3, r7, r3
    2d6a:	2200      	movs	r2, #0
    2d6c:	701a      	strb	r2, [r3, #0]
    2d6e:	e003      	b.n	2d78 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2d70:	230f      	movs	r3, #15
    2d72:	18fb      	adds	r3, r7, r3
    2d74:	22fa      	movs	r2, #250	; 0xfa
    2d76:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2d78:	230f      	movs	r3, #15
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	781b      	ldrb	r3, [r3, #0]
    2d7e:	b25b      	sxtb	r3, r3
}
    2d80:	0018      	movs	r0, r3
    2d82:	46bd      	mov	sp, r7
    2d84:	b005      	add	sp, #20
    2d86:	bd90      	pop	{r4, r7, pc}
    2d88:	0000289d 	.word	0x0000289d

00002d8c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2d8c:	b590      	push	{r4, r7, lr}
    2d8e:	b085      	sub	sp, #20
    2d90:	af00      	add	r7, sp, #0
    2d92:	6078      	str	r0, [r7, #4]
    2d94:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    2d96:	230f      	movs	r3, #15
    2d98:	18fc      	adds	r4, r7, r3
    2d9a:	683a      	ldr	r2, [r7, #0]
    2d9c:	687b      	ldr	r3, [r7, #4]
    2d9e:	0011      	movs	r1, r2
    2da0:	0018      	movs	r0, r3
    2da2:	4b0d      	ldr	r3, [pc, #52]	; (2dd8 <nm_spi_write_reg+0x4c>)
    2da4:	4798      	blx	r3
    2da6:	0003      	movs	r3, r0
    2da8:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2daa:	230f      	movs	r3, #15
    2dac:	18fb      	adds	r3, r7, r3
    2dae:	781b      	ldrb	r3, [r3, #0]
    2db0:	b25b      	sxtb	r3, r3
    2db2:	2b01      	cmp	r3, #1
    2db4:	d104      	bne.n	2dc0 <nm_spi_write_reg+0x34>
    2db6:	230f      	movs	r3, #15
    2db8:	18fb      	adds	r3, r7, r3
    2dba:	2200      	movs	r2, #0
    2dbc:	701a      	strb	r2, [r3, #0]
    2dbe:	e003      	b.n	2dc8 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2dc0:	230f      	movs	r3, #15
    2dc2:	18fb      	adds	r3, r7, r3
    2dc4:	22fa      	movs	r2, #250	; 0xfa
    2dc6:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2dc8:	230f      	movs	r3, #15
    2dca:	18fb      	adds	r3, r7, r3
    2dcc:	781b      	ldrb	r3, [r3, #0]
    2dce:	b25b      	sxtb	r3, r3
}
    2dd0:	0018      	movs	r0, r3
    2dd2:	46bd      	mov	sp, r7
    2dd4:	b005      	add	sp, #20
    2dd6:	bd90      	pop	{r4, r7, pc}
    2dd8:	0000263d 	.word	0x0000263d

00002ddc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2ddc:	b590      	push	{r4, r7, lr}
    2dde:	b087      	sub	sp, #28
    2de0:	af00      	add	r7, sp, #0
    2de2:	60f8      	str	r0, [r7, #12]
    2de4:	60b9      	str	r1, [r7, #8]
    2de6:	1dbb      	adds	r3, r7, #6
    2de8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    2dea:	2317      	movs	r3, #23
    2dec:	18fc      	adds	r4, r7, r3
    2dee:	1dbb      	adds	r3, r7, #6
    2df0:	881a      	ldrh	r2, [r3, #0]
    2df2:	68b9      	ldr	r1, [r7, #8]
    2df4:	68fb      	ldr	r3, [r7, #12]
    2df6:	0018      	movs	r0, r3
    2df8:	4b0d      	ldr	r3, [pc, #52]	; (2e30 <nm_spi_read_block+0x54>)
    2dfa:	4798      	blx	r3
    2dfc:	0003      	movs	r3, r0
    2dfe:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2e00:	2317      	movs	r3, #23
    2e02:	18fb      	adds	r3, r7, r3
    2e04:	781b      	ldrb	r3, [r3, #0]
    2e06:	b25b      	sxtb	r3, r3
    2e08:	2b01      	cmp	r3, #1
    2e0a:	d104      	bne.n	2e16 <nm_spi_read_block+0x3a>
    2e0c:	2317      	movs	r3, #23
    2e0e:	18fb      	adds	r3, r7, r3
    2e10:	2200      	movs	r2, #0
    2e12:	701a      	strb	r2, [r3, #0]
    2e14:	e003      	b.n	2e1e <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2e16:	2317      	movs	r3, #23
    2e18:	18fb      	adds	r3, r7, r3
    2e1a:	22fa      	movs	r2, #250	; 0xfa
    2e1c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2e1e:	2317      	movs	r3, #23
    2e20:	18fb      	adds	r3, r7, r3
    2e22:	781b      	ldrb	r3, [r3, #0]
    2e24:	b25b      	sxtb	r3, r3
}
    2e26:	0018      	movs	r0, r3
    2e28:	46bd      	mov	sp, r7
    2e2a:	b007      	add	sp, #28
    2e2c:	bd90      	pop	{r4, r7, pc}
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	00002a49 	.word	0x00002a49

00002e34 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2e34:	b590      	push	{r4, r7, lr}
    2e36:	b087      	sub	sp, #28
    2e38:	af00      	add	r7, sp, #0
    2e3a:	60f8      	str	r0, [r7, #12]
    2e3c:	60b9      	str	r1, [r7, #8]
    2e3e:	1dbb      	adds	r3, r7, #6
    2e40:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    2e42:	2317      	movs	r3, #23
    2e44:	18fc      	adds	r4, r7, r3
    2e46:	1dbb      	adds	r3, r7, #6
    2e48:	881a      	ldrh	r2, [r3, #0]
    2e4a:	68b9      	ldr	r1, [r7, #8]
    2e4c:	68fb      	ldr	r3, [r7, #12]
    2e4e:	0018      	movs	r0, r3
    2e50:	4b0d      	ldr	r3, [pc, #52]	; (2e88 <nm_spi_write_block+0x54>)
    2e52:	4798      	blx	r3
    2e54:	0003      	movs	r3, r0
    2e56:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2e58:	2317      	movs	r3, #23
    2e5a:	18fb      	adds	r3, r7, r3
    2e5c:	781b      	ldrb	r3, [r3, #0]
    2e5e:	b25b      	sxtb	r3, r3
    2e60:	2b01      	cmp	r3, #1
    2e62:	d104      	bne.n	2e6e <nm_spi_write_block+0x3a>
    2e64:	2317      	movs	r3, #23
    2e66:	18fb      	adds	r3, r7, r3
    2e68:	2200      	movs	r2, #0
    2e6a:	701a      	strb	r2, [r3, #0]
    2e6c:	e003      	b.n	2e76 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2e6e:	2317      	movs	r3, #23
    2e70:	18fb      	adds	r3, r7, r3
    2e72:	22fa      	movs	r2, #250	; 0xfa
    2e74:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2e76:	2317      	movs	r3, #23
    2e78:	18fb      	adds	r3, r7, r3
    2e7a:	781b      	ldrb	r3, [r3, #0]
    2e7c:	b25b      	sxtb	r3, r3
}
    2e7e:	0018      	movs	r0, r3
    2e80:	46bd      	mov	sp, r7
    2e82:	b007      	add	sp, #28
    2e84:	bd90      	pop	{r4, r7, pc}
    2e86:	46c0      	nop			; (mov r8, r8)
    2e88:	00002759 	.word	0x00002759

00002e8c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    2e8c:	b580      	push	{r7, lr}
    2e8e:	b082      	sub	sp, #8
    2e90:	af00      	add	r7, sp, #0
    2e92:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    2e94:	687b      	ldr	r3, [r7, #4]
    2e96:	2b00      	cmp	r3, #0
    2e98:	d00c      	beq.n	2eb4 <delay_cycles+0x28>
		SysTick->LOAD = n;
    2e9a:	4b08      	ldr	r3, [pc, #32]	; (2ebc <delay_cycles+0x30>)
    2e9c:	687a      	ldr	r2, [r7, #4]
    2e9e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    2ea0:	4b06      	ldr	r3, [pc, #24]	; (2ebc <delay_cycles+0x30>)
    2ea2:	2200      	movs	r2, #0
    2ea4:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2ea6:	46c0      	nop			; (mov r8, r8)
    2ea8:	4b04      	ldr	r3, [pc, #16]	; (2ebc <delay_cycles+0x30>)
    2eaa:	681a      	ldr	r2, [r3, #0]
    2eac:	2380      	movs	r3, #128	; 0x80
    2eae:	025b      	lsls	r3, r3, #9
    2eb0:	4013      	ands	r3, r2
    2eb2:	d0f9      	beq.n	2ea8 <delay_cycles+0x1c>
		};
	}
}
    2eb4:	46c0      	nop			; (mov r8, r8)
    2eb6:	46bd      	mov	sp, r7
    2eb8:	b002      	add	sp, #8
    2eba:	bd80      	pop	{r7, pc}
    2ebc:	e000e010 	.word	0xe000e010

00002ec0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    2ec0:	b580      	push	{r7, lr}
    2ec2:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    2ec4:	2000      	movs	r0, #0
    2ec6:	4b0f      	ldr	r3, [pc, #60]	; (2f04 <delay_init+0x44>)
    2ec8:	4798      	blx	r3
    2eca:	0002      	movs	r2, r0
    2ecc:	4b0e      	ldr	r3, [pc, #56]	; (2f08 <delay_init+0x48>)
    2ece:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    2ed0:	4b0d      	ldr	r3, [pc, #52]	; (2f08 <delay_init+0x48>)
    2ed2:	6818      	ldr	r0, [r3, #0]
    2ed4:	4b0d      	ldr	r3, [pc, #52]	; (2f0c <delay_init+0x4c>)
    2ed6:	22fa      	movs	r2, #250	; 0xfa
    2ed8:	0091      	lsls	r1, r2, #2
    2eda:	4798      	blx	r3
    2edc:	0003      	movs	r3, r0
    2ede:	001a      	movs	r2, r3
    2ee0:	4b09      	ldr	r3, [pc, #36]	; (2f08 <delay_init+0x48>)
    2ee2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    2ee4:	4b08      	ldr	r3, [pc, #32]	; (2f08 <delay_init+0x48>)
    2ee6:	6818      	ldr	r0, [r3, #0]
    2ee8:	4b08      	ldr	r3, [pc, #32]	; (2f0c <delay_init+0x4c>)
    2eea:	22fa      	movs	r2, #250	; 0xfa
    2eec:	0091      	lsls	r1, r2, #2
    2eee:	4798      	blx	r3
    2ef0:	0003      	movs	r3, r0
    2ef2:	001a      	movs	r2, r3
    2ef4:	4b06      	ldr	r3, [pc, #24]	; (2f10 <delay_init+0x50>)
    2ef6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2ef8:	4b06      	ldr	r3, [pc, #24]	; (2f14 <delay_init+0x54>)
    2efa:	2205      	movs	r2, #5
    2efc:	601a      	str	r2, [r3, #0]
}
    2efe:	46c0      	nop			; (mov r8, r8)
    2f00:	46bd      	mov	sp, r7
    2f02:	bd80      	pop	{r7, pc}
    2f04:	00005f45 	.word	0x00005f45
    2f08:	20000004 	.word	0x20000004
    2f0c:	00006711 	.word	0x00006711
    2f10:	20000008 	.word	0x20000008
    2f14:	e000e010 	.word	0xe000e010

00002f18 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    2f18:	b580      	push	{r7, lr}
    2f1a:	b082      	sub	sp, #8
    2f1c:	af00      	add	r7, sp, #0
    2f1e:	6078      	str	r0, [r7, #4]
	while (n--) {
    2f20:	e004      	b.n	2f2c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    2f22:	4b07      	ldr	r3, [pc, #28]	; (2f40 <delay_cycles_ms+0x28>)
    2f24:	681b      	ldr	r3, [r3, #0]
    2f26:	0018      	movs	r0, r3
    2f28:	4b06      	ldr	r3, [pc, #24]	; (2f44 <delay_cycles_ms+0x2c>)
    2f2a:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    2f2c:	687b      	ldr	r3, [r7, #4]
    2f2e:	1e5a      	subs	r2, r3, #1
    2f30:	607a      	str	r2, [r7, #4]
    2f32:	2b00      	cmp	r3, #0
    2f34:	d1f5      	bne.n	2f22 <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	46bd      	mov	sp, r7
    2f3a:	b002      	add	sp, #8
    2f3c:	bd80      	pop	{r7, pc}
    2f3e:	46c0      	nop			; (mov r8, r8)
    2f40:	20000004 	.word	0x20000004
    2f44:	00002e8d 	.word	0x00002e8d

00002f48 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2f48:	b580      	push	{r7, lr}
    2f4a:	b082      	sub	sp, #8
    2f4c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2f4e:	4b10      	ldr	r3, [pc, #64]	; (2f90 <cpu_irq_enter_critical+0x48>)
    2f50:	681b      	ldr	r3, [r3, #0]
    2f52:	2b00      	cmp	r3, #0
    2f54:	d112      	bne.n	2f7c <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f56:	f3ef 8310 	mrs	r3, PRIMASK
    2f5a:	607b      	str	r3, [r7, #4]
  return(result);
    2f5c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d109      	bne.n	2f76 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2f62:	b672      	cpsid	i
    2f64:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2f68:	4b0a      	ldr	r3, [pc, #40]	; (2f94 <cpu_irq_enter_critical+0x4c>)
    2f6a:	2200      	movs	r2, #0
    2f6c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2f6e:	4b0a      	ldr	r3, [pc, #40]	; (2f98 <cpu_irq_enter_critical+0x50>)
    2f70:	2201      	movs	r2, #1
    2f72:	701a      	strb	r2, [r3, #0]
    2f74:	e002      	b.n	2f7c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2f76:	4b08      	ldr	r3, [pc, #32]	; (2f98 <cpu_irq_enter_critical+0x50>)
    2f78:	2200      	movs	r2, #0
    2f7a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2f7c:	4b04      	ldr	r3, [pc, #16]	; (2f90 <cpu_irq_enter_critical+0x48>)
    2f7e:	681b      	ldr	r3, [r3, #0]
    2f80:	1c5a      	adds	r2, r3, #1
    2f82:	4b03      	ldr	r3, [pc, #12]	; (2f90 <cpu_irq_enter_critical+0x48>)
    2f84:	601a      	str	r2, [r3, #0]
}
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	46bd      	mov	sp, r7
    2f8a:	b002      	add	sp, #8
    2f8c:	bd80      	pop	{r7, pc}
    2f8e:	46c0      	nop			; (mov r8, r8)
    2f90:	20000518 	.word	0x20000518
    2f94:	2000000c 	.word	0x2000000c
    2f98:	2000051c 	.word	0x2000051c

00002f9c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2f9c:	b580      	push	{r7, lr}
    2f9e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2fa0:	4b0b      	ldr	r3, [pc, #44]	; (2fd0 <cpu_irq_leave_critical+0x34>)
    2fa2:	681b      	ldr	r3, [r3, #0]
    2fa4:	1e5a      	subs	r2, r3, #1
    2fa6:	4b0a      	ldr	r3, [pc, #40]	; (2fd0 <cpu_irq_leave_critical+0x34>)
    2fa8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2faa:	4b09      	ldr	r3, [pc, #36]	; (2fd0 <cpu_irq_leave_critical+0x34>)
    2fac:	681b      	ldr	r3, [r3, #0]
    2fae:	2b00      	cmp	r3, #0
    2fb0:	d10a      	bne.n	2fc8 <cpu_irq_leave_critical+0x2c>
    2fb2:	4b08      	ldr	r3, [pc, #32]	; (2fd4 <cpu_irq_leave_critical+0x38>)
    2fb4:	781b      	ldrb	r3, [r3, #0]
    2fb6:	b2db      	uxtb	r3, r3
    2fb8:	2b00      	cmp	r3, #0
    2fba:	d005      	beq.n	2fc8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2fbc:	4b06      	ldr	r3, [pc, #24]	; (2fd8 <cpu_irq_leave_critical+0x3c>)
    2fbe:	2201      	movs	r2, #1
    2fc0:	701a      	strb	r2, [r3, #0]
    2fc2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2fc6:	b662      	cpsie	i
	}
}
    2fc8:	46c0      	nop			; (mov r8, r8)
    2fca:	46bd      	mov	sp, r7
    2fcc:	bd80      	pop	{r7, pc}
    2fce:	46c0      	nop			; (mov r8, r8)
    2fd0:	20000518 	.word	0x20000518
    2fd4:	2000051c 	.word	0x2000051c
    2fd8:	2000000c 	.word	0x2000000c

00002fdc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2fdc:	b580      	push	{r7, lr}
    2fde:	b084      	sub	sp, #16
    2fe0:	af00      	add	r7, sp, #0
    2fe2:	0002      	movs	r2, r0
    2fe4:	1dfb      	adds	r3, r7, #7
    2fe6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2fe8:	230f      	movs	r3, #15
    2fea:	18fb      	adds	r3, r7, r3
    2fec:	1dfa      	adds	r2, r7, #7
    2fee:	7812      	ldrb	r2, [r2, #0]
    2ff0:	09d2      	lsrs	r2, r2, #7
    2ff2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2ff4:	230e      	movs	r3, #14
    2ff6:	18fb      	adds	r3, r7, r3
    2ff8:	1dfa      	adds	r2, r7, #7
    2ffa:	7812      	ldrb	r2, [r2, #0]
    2ffc:	0952      	lsrs	r2, r2, #5
    2ffe:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3000:	4b0d      	ldr	r3, [pc, #52]	; (3038 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3002:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3004:	230f      	movs	r3, #15
    3006:	18fb      	adds	r3, r7, r3
    3008:	781b      	ldrb	r3, [r3, #0]
    300a:	2b00      	cmp	r3, #0
    300c:	d10f      	bne.n	302e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    300e:	230f      	movs	r3, #15
    3010:	18fb      	adds	r3, r7, r3
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	009b      	lsls	r3, r3, #2
    3016:	2210      	movs	r2, #16
    3018:	4694      	mov	ip, r2
    301a:	44bc      	add	ip, r7
    301c:	4463      	add	r3, ip
    301e:	3b08      	subs	r3, #8
    3020:	681a      	ldr	r2, [r3, #0]
    3022:	230e      	movs	r3, #14
    3024:	18fb      	adds	r3, r7, r3
    3026:	781b      	ldrb	r3, [r3, #0]
    3028:	01db      	lsls	r3, r3, #7
    302a:	18d3      	adds	r3, r2, r3
    302c:	e000      	b.n	3030 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    302e:	2300      	movs	r3, #0
	}
}
    3030:	0018      	movs	r0, r3
    3032:	46bd      	mov	sp, r7
    3034:	b004      	add	sp, #16
    3036:	bd80      	pop	{r7, pc}
    3038:	41004400 	.word	0x41004400

0000303c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    303c:	b580      	push	{r7, lr}
    303e:	b082      	sub	sp, #8
    3040:	af00      	add	r7, sp, #0
    3042:	0002      	movs	r2, r0
    3044:	1dfb      	adds	r3, r7, #7
    3046:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3048:	1dfb      	adds	r3, r7, #7
    304a:	781b      	ldrb	r3, [r3, #0]
    304c:	0018      	movs	r0, r3
    304e:	4b03      	ldr	r3, [pc, #12]	; (305c <port_get_group_from_gpio_pin+0x20>)
    3050:	4798      	blx	r3
    3052:	0003      	movs	r3, r0
}
    3054:	0018      	movs	r0, r3
    3056:	46bd      	mov	sp, r7
    3058:	b002      	add	sp, #8
    305a:	bd80      	pop	{r7, pc}
    305c:	00002fdd 	.word	0x00002fdd

00003060 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values.
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3060:	b580      	push	{r7, lr}
    3062:	b082      	sub	sp, #8
    3064:	af00      	add	r7, sp, #0
    3066:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3068:	687b      	ldr	r3, [r7, #4]
    306a:	2200      	movs	r2, #0
    306c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    306e:	687b      	ldr	r3, [r7, #4]
    3070:	2201      	movs	r2, #1
    3072:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3074:	687b      	ldr	r3, [r7, #4]
    3076:	2200      	movs	r2, #0
    3078:	709a      	strb	r2, [r3, #2]
}
    307a:	46c0      	nop			; (mov r8, r8)
    307c:	46bd      	mov	sp, r7
    307e:	b002      	add	sp, #8
    3080:	bd80      	pop	{r7, pc}
    3082:	46c0      	nop			; (mov r8, r8)

00003084 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3084:	b580      	push	{r7, lr}
    3086:	b084      	sub	sp, #16
    3088:	af00      	add	r7, sp, #0
    308a:	0002      	movs	r2, r0
    308c:	1dfb      	adds	r3, r7, #7
    308e:	701a      	strb	r2, [r3, #0]
    3090:	1dbb      	adds	r3, r7, #6
    3092:	1c0a      	adds	r2, r1, #0
    3094:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3096:	1dfb      	adds	r3, r7, #7
    3098:	781b      	ldrb	r3, [r3, #0]
    309a:	0018      	movs	r0, r3
    309c:	4b0d      	ldr	r3, [pc, #52]	; (30d4 <port_pin_set_output_level+0x50>)
    309e:	4798      	blx	r3
    30a0:	0003      	movs	r3, r0
    30a2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    30a4:	1dfb      	adds	r3, r7, #7
    30a6:	781b      	ldrb	r3, [r3, #0]
    30a8:	221f      	movs	r2, #31
    30aa:	4013      	ands	r3, r2
    30ac:	2201      	movs	r2, #1
    30ae:	409a      	lsls	r2, r3
    30b0:	0013      	movs	r3, r2
    30b2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    30b4:	1dbb      	adds	r3, r7, #6
    30b6:	781b      	ldrb	r3, [r3, #0]
    30b8:	2b00      	cmp	r3, #0
    30ba:	d003      	beq.n	30c4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    30bc:	68fb      	ldr	r3, [r7, #12]
    30be:	68ba      	ldr	r2, [r7, #8]
    30c0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    30c2:	e002      	b.n	30ca <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    30c4:	68fb      	ldr	r3, [r7, #12]
    30c6:	68ba      	ldr	r2, [r7, #8]
    30c8:	615a      	str	r2, [r3, #20]
	}
}
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	46bd      	mov	sp, r7
    30ce:	b004      	add	sp, #16
    30d0:	bd80      	pop	{r7, pc}
    30d2:	46c0      	nop			; (mov r8, r8)
    30d4:	0000303d 	.word	0x0000303d

000030d8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    30d8:	b580      	push	{r7, lr}
    30da:	b082      	sub	sp, #8
    30dc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    30de:	1d3b      	adds	r3, r7, #4
    30e0:	0018      	movs	r0, r3
    30e2:	4b0e      	ldr	r3, [pc, #56]	; (311c <system_board_init+0x44>)
    30e4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    30e6:	1d3b      	adds	r3, r7, #4
    30e8:	2201      	movs	r2, #1
    30ea:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    30ec:	1d3b      	adds	r3, r7, #4
    30ee:	0019      	movs	r1, r3
    30f0:	2017      	movs	r0, #23
    30f2:	4b0b      	ldr	r3, [pc, #44]	; (3120 <system_board_init+0x48>)
    30f4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    30f6:	2101      	movs	r1, #1
    30f8:	2017      	movs	r0, #23
    30fa:	4b0a      	ldr	r3, [pc, #40]	; (3124 <system_board_init+0x4c>)
    30fc:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    30fe:	1d3b      	adds	r3, r7, #4
    3100:	2200      	movs	r2, #0
    3102:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3104:	1d3b      	adds	r3, r7, #4
    3106:	2201      	movs	r2, #1
    3108:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    310a:	1d3b      	adds	r3, r7, #4
    310c:	0019      	movs	r1, r3
    310e:	2037      	movs	r0, #55	; 0x37
    3110:	4b03      	ldr	r3, [pc, #12]	; (3120 <system_board_init+0x48>)
    3112:	4798      	blx	r3
}
    3114:	46c0      	nop			; (mov r8, r8)
    3116:	46bd      	mov	sp, r7
    3118:	b002      	add	sp, #8
    311a:	bd80      	pop	{r7, pc}
    311c:	00003061 	.word	0x00003061
    3120:	00003625 	.word	0x00003625
    3124:	00003085 	.word	0x00003085

00003128 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3128:	b580      	push	{r7, lr}
    312a:	b082      	sub	sp, #8
    312c:	af00      	add	r7, sp, #0
    312e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3130:	687b      	ldr	r3, [r7, #4]
    3132:	2280      	movs	r2, #128	; 0x80
    3134:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3136:	687b      	ldr	r3, [r7, #4]
    3138:	2200      	movs	r2, #0
    313a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	2201      	movs	r2, #1
    3140:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3142:	687b      	ldr	r3, [r7, #4]
    3144:	2200      	movs	r2, #0
    3146:	70da      	strb	r2, [r3, #3]
}
    3148:	46c0      	nop			; (mov r8, r8)
    314a:	46bd      	mov	sp, r7
    314c:	b002      	add	sp, #8
    314e:	bd80      	pop	{r7, pc}

00003150 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    3150:	b580      	push	{r7, lr}
    3152:	b084      	sub	sp, #16
    3154:	af00      	add	r7, sp, #0
    3156:	0002      	movs	r2, r0
    3158:	1dfb      	adds	r3, r7, #7
    315a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    315c:	230f      	movs	r3, #15
    315e:	18fb      	adds	r3, r7, r3
    3160:	1dfa      	adds	r2, r7, #7
    3162:	7812      	ldrb	r2, [r2, #0]
    3164:	0952      	lsrs	r2, r2, #5
    3166:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    3168:	230f      	movs	r3, #15
    316a:	18fb      	adds	r3, r7, r3
    316c:	781b      	ldrb	r3, [r3, #0]
    316e:	2b00      	cmp	r3, #0
    3170:	d10c      	bne.n	318c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3172:	4b09      	ldr	r3, [pc, #36]	; (3198 <_extint_get_eic_from_channel+0x48>)
    3174:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    3176:	230f      	movs	r3, #15
    3178:	18fb      	adds	r3, r7, r3
    317a:	781b      	ldrb	r3, [r3, #0]
    317c:	009b      	lsls	r3, r3, #2
    317e:	2210      	movs	r2, #16
    3180:	4694      	mov	ip, r2
    3182:	44bc      	add	ip, r7
    3184:	4463      	add	r3, ip
    3186:	3b08      	subs	r3, #8
    3188:	681b      	ldr	r3, [r3, #0]
    318a:	e000      	b.n	318e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    318c:	2300      	movs	r3, #0
	}
}
    318e:	0018      	movs	r0, r3
    3190:	46bd      	mov	sp, r7
    3192:	b004      	add	sp, #16
    3194:	bd80      	pop	{r7, pc}
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	40001800 	.word	0x40001800

0000319c <extint_is_syncing>:
 *
 * \retval true  If the module has completed synchronization
 * \retval false If the module synchronization is ongoing
 */
static inline bool extint_is_syncing(void)
{
    319c:	b580      	push	{r7, lr}
    319e:	b082      	sub	sp, #8
    31a0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    31a2:	4b0f      	ldr	r3, [pc, #60]	; (31e0 <extint_is_syncing+0x44>)
    31a4:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    31a6:	2300      	movs	r3, #0
    31a8:	607b      	str	r3, [r7, #4]
    31aa:	e011      	b.n	31d0 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    31ac:	687b      	ldr	r3, [r7, #4]
    31ae:	009b      	lsls	r3, r3, #2
    31b0:	2208      	movs	r2, #8
    31b2:	4694      	mov	ip, r2
    31b4:	44bc      	add	ip, r7
    31b6:	4463      	add	r3, ip
    31b8:	3b08      	subs	r3, #8
    31ba:	681b      	ldr	r3, [r3, #0]
    31bc:	785b      	ldrb	r3, [r3, #1]
    31be:	b2db      	uxtb	r3, r3
    31c0:	b25b      	sxtb	r3, r3
    31c2:	2b00      	cmp	r3, #0
    31c4:	da01      	bge.n	31ca <extint_is_syncing+0x2e>
			return true;
    31c6:	2301      	movs	r3, #1
    31c8:	e006      	b.n	31d8 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    31ca:	687b      	ldr	r3, [r7, #4]
    31cc:	3301      	adds	r3, #1
    31ce:	607b      	str	r3, [r7, #4]
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	2b00      	cmp	r3, #0
    31d4:	d0ea      	beq.n	31ac <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}

	return false;
    31d6:	2300      	movs	r3, #0
}
    31d8:	0018      	movs	r0, r3
    31da:	46bd      	mov	sp, r7
    31dc:	b002      	add	sp, #8
    31de:	bd80      	pop	{r7, pc}
    31e0:	40001800 	.word	0x40001800

000031e4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    31e4:	b580      	push	{r7, lr}
    31e6:	b082      	sub	sp, #8
    31e8:	af00      	add	r7, sp, #0
    31ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    31ec:	687b      	ldr	r3, [r7, #4]
    31ee:	2200      	movs	r2, #0
    31f0:	701a      	strb	r2, [r3, #0]
}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	46bd      	mov	sp, r7
    31f6:	b002      	add	sp, #8
    31f8:	bd80      	pop	{r7, pc}
    31fa:	46c0      	nop			; (mov r8, r8)

000031fc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    31fc:	b580      	push	{r7, lr}
    31fe:	b082      	sub	sp, #8
    3200:	af00      	add	r7, sp, #0
    3202:	0002      	movs	r2, r0
    3204:	6039      	str	r1, [r7, #0]
    3206:	1dfb      	adds	r3, r7, #7
    3208:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    320a:	1dfb      	adds	r3, r7, #7
    320c:	781b      	ldrb	r3, [r3, #0]
    320e:	2b01      	cmp	r3, #1
    3210:	d00a      	beq.n	3228 <system_apb_clock_set_mask+0x2c>
    3212:	2b02      	cmp	r3, #2
    3214:	d00f      	beq.n	3236 <system_apb_clock_set_mask+0x3a>
    3216:	2b00      	cmp	r3, #0
    3218:	d114      	bne.n	3244 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    321a:	4b0e      	ldr	r3, [pc, #56]	; (3254 <system_apb_clock_set_mask+0x58>)
    321c:	4a0d      	ldr	r2, [pc, #52]	; (3254 <system_apb_clock_set_mask+0x58>)
    321e:	6991      	ldr	r1, [r2, #24]
    3220:	683a      	ldr	r2, [r7, #0]
    3222:	430a      	orrs	r2, r1
    3224:	619a      	str	r2, [r3, #24]
			break;
    3226:	e00f      	b.n	3248 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3228:	4b0a      	ldr	r3, [pc, #40]	; (3254 <system_apb_clock_set_mask+0x58>)
    322a:	4a0a      	ldr	r2, [pc, #40]	; (3254 <system_apb_clock_set_mask+0x58>)
    322c:	69d1      	ldr	r1, [r2, #28]
    322e:	683a      	ldr	r2, [r7, #0]
    3230:	430a      	orrs	r2, r1
    3232:	61da      	str	r2, [r3, #28]
			break;
    3234:	e008      	b.n	3248 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3236:	4b07      	ldr	r3, [pc, #28]	; (3254 <system_apb_clock_set_mask+0x58>)
    3238:	4a06      	ldr	r2, [pc, #24]	; (3254 <system_apb_clock_set_mask+0x58>)
    323a:	6a11      	ldr	r1, [r2, #32]
    323c:	683a      	ldr	r2, [r7, #0]
    323e:	430a      	orrs	r2, r1
    3240:	621a      	str	r2, [r3, #32]
			break;
    3242:	e001      	b.n	3248 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3244:	2317      	movs	r3, #23
    3246:	e000      	b.n	324a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3248:	2300      	movs	r3, #0
}
    324a:	0018      	movs	r0, r3
    324c:	46bd      	mov	sp, r7
    324e:	b002      	add	sp, #8
    3250:	bd80      	pop	{r7, pc}
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	40000400 	.word	0x40000400

00003258 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3258:	b580      	push	{r7, lr}
    325a:	b082      	sub	sp, #8
    325c:	af00      	add	r7, sp, #0
    325e:	0002      	movs	r2, r0
    3260:	1dfb      	adds	r3, r7, #7
    3262:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3264:	4b06      	ldr	r3, [pc, #24]	; (3280 <system_interrupt_enable+0x28>)
    3266:	1dfa      	adds	r2, r7, #7
    3268:	7812      	ldrb	r2, [r2, #0]
    326a:	0011      	movs	r1, r2
    326c:	221f      	movs	r2, #31
    326e:	400a      	ands	r2, r1
    3270:	2101      	movs	r1, #1
    3272:	4091      	lsls	r1, r2
    3274:	000a      	movs	r2, r1
    3276:	601a      	str	r2, [r3, #0]
}
    3278:	46c0      	nop			; (mov r8, r8)
    327a:	46bd      	mov	sp, r7
    327c:	b002      	add	sp, #8
    327e:	bd80      	pop	{r7, pc}
    3280:	e000e100 	.word	0xe000e100

00003284 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    3284:	b580      	push	{r7, lr}
    3286:	b084      	sub	sp, #16
    3288:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    328a:	4b2d      	ldr	r3, [pc, #180]	; (3340 <_system_extint_init+0xbc>)
    328c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    328e:	2140      	movs	r1, #64	; 0x40
    3290:	2000      	movs	r0, #0
    3292:	4b2c      	ldr	r3, [pc, #176]	; (3344 <_system_extint_init+0xc0>)
    3294:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3296:	003b      	movs	r3, r7
    3298:	0018      	movs	r0, r3
    329a:	4b2b      	ldr	r3, [pc, #172]	; (3348 <_system_extint_init+0xc4>)
    329c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    329e:	003b      	movs	r3, r7
    32a0:	2200      	movs	r2, #0
    32a2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    32a4:	003b      	movs	r3, r7
    32a6:	0019      	movs	r1, r3
    32a8:	2005      	movs	r0, #5
    32aa:	4b28      	ldr	r3, [pc, #160]	; (334c <_system_extint_init+0xc8>)
    32ac:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    32ae:	2005      	movs	r0, #5
    32b0:	4b27      	ldr	r3, [pc, #156]	; (3350 <_system_extint_init+0xcc>)
    32b2:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    32b4:	2300      	movs	r3, #0
    32b6:	60fb      	str	r3, [r7, #12]
    32b8:	e018      	b.n	32ec <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    32ba:	68fb      	ldr	r3, [r7, #12]
    32bc:	009b      	lsls	r3, r3, #2
    32be:	2210      	movs	r2, #16
    32c0:	4694      	mov	ip, r2
    32c2:	44bc      	add	ip, r7
    32c4:	4463      	add	r3, ip
    32c6:	3b0c      	subs	r3, #12
    32c8:	681a      	ldr	r2, [r3, #0]
    32ca:	68fb      	ldr	r3, [r7, #12]
    32cc:	009b      	lsls	r3, r3, #2
    32ce:	2110      	movs	r1, #16
    32d0:	468c      	mov	ip, r1
    32d2:	44bc      	add	ip, r7
    32d4:	4463      	add	r3, ip
    32d6:	3b0c      	subs	r3, #12
    32d8:	681b      	ldr	r3, [r3, #0]
    32da:	781b      	ldrb	r3, [r3, #0]
    32dc:	b2db      	uxtb	r3, r3
    32de:	2101      	movs	r1, #1
    32e0:	430b      	orrs	r3, r1
    32e2:	b2db      	uxtb	r3, r3
    32e4:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    32e6:	68fb      	ldr	r3, [r7, #12]
    32e8:	3301      	adds	r3, #1
    32ea:	60fb      	str	r3, [r7, #12]
    32ec:	68fb      	ldr	r3, [r7, #12]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d0e3      	beq.n	32ba <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    32f2:	46c0      	nop			; (mov r8, r8)
    32f4:	4b17      	ldr	r3, [pc, #92]	; (3354 <_system_extint_init+0xd0>)
    32f6:	4798      	blx	r3
    32f8:	1e03      	subs	r3, r0, #0
    32fa:	d1fb      	bne.n	32f4 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    32fc:	230b      	movs	r3, #11
    32fe:	18fb      	adds	r3, r7, r3
    3300:	2200      	movs	r2, #0
    3302:	701a      	strb	r2, [r3, #0]
    3304:	e00d      	b.n	3322 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    3306:	230b      	movs	r3, #11
    3308:	18fb      	adds	r3, r7, r3
    330a:	781a      	ldrb	r2, [r3, #0]
    330c:	4b12      	ldr	r3, [pc, #72]	; (3358 <_system_extint_init+0xd4>)
    330e:	0092      	lsls	r2, r2, #2
    3310:	2100      	movs	r1, #0
    3312:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3314:	230b      	movs	r3, #11
    3316:	18fb      	adds	r3, r7, r3
    3318:	781a      	ldrb	r2, [r3, #0]
    331a:	230b      	movs	r3, #11
    331c:	18fb      	adds	r3, r7, r3
    331e:	3201      	adds	r2, #1
    3320:	701a      	strb	r2, [r3, #0]
    3322:	230b      	movs	r3, #11
    3324:	18fb      	adds	r3, r7, r3
    3326:	781b      	ldrb	r3, [r3, #0]
    3328:	2b0f      	cmp	r3, #15
    332a:	d9ec      	bls.n	3306 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    332c:	2004      	movs	r0, #4
    332e:	4b0b      	ldr	r3, [pc, #44]	; (335c <_system_extint_init+0xd8>)
    3330:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    3332:	4b0b      	ldr	r3, [pc, #44]	; (3360 <_system_extint_init+0xdc>)
    3334:	4798      	blx	r3
}
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	46bd      	mov	sp, r7
    333a:	b004      	add	sp, #16
    333c:	bd80      	pop	{r7, pc}
    333e:	46c0      	nop			; (mov r8, r8)
    3340:	40001800 	.word	0x40001800
    3344:	000031fd 	.word	0x000031fd
    3348:	000031e5 	.word	0x000031e5
    334c:	0000601d 	.word	0x0000601d
    3350:	00006061 	.word	0x00006061
    3354:	0000319d 	.word	0x0000319d
    3358:	20000570 	.word	0x20000570
    335c:	00003259 	.word	0x00003259
    3360:	00003365 	.word	0x00003365

00003364 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    3364:	b580      	push	{r7, lr}
    3366:	b082      	sub	sp, #8
    3368:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    336a:	4b15      	ldr	r3, [pc, #84]	; (33c0 <_extint_enable+0x5c>)
    336c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    336e:	2300      	movs	r3, #0
    3370:	607b      	str	r3, [r7, #4]
    3372:	e018      	b.n	33a6 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3374:	687b      	ldr	r3, [r7, #4]
    3376:	009b      	lsls	r3, r3, #2
    3378:	2208      	movs	r2, #8
    337a:	4694      	mov	ip, r2
    337c:	44bc      	add	ip, r7
    337e:	4463      	add	r3, ip
    3380:	3b08      	subs	r3, #8
    3382:	681a      	ldr	r2, [r3, #0]
    3384:	687b      	ldr	r3, [r7, #4]
    3386:	009b      	lsls	r3, r3, #2
    3388:	2108      	movs	r1, #8
    338a:	468c      	mov	ip, r1
    338c:	44bc      	add	ip, r7
    338e:	4463      	add	r3, ip
    3390:	3b08      	subs	r3, #8
    3392:	681b      	ldr	r3, [r3, #0]
    3394:	781b      	ldrb	r3, [r3, #0]
    3396:	b2db      	uxtb	r3, r3
    3398:	2102      	movs	r1, #2
    339a:	430b      	orrs	r3, r1
    339c:	b2db      	uxtb	r3, r3
    339e:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    33a0:	687b      	ldr	r3, [r7, #4]
    33a2:	3301      	adds	r3, #1
    33a4:	607b      	str	r3, [r7, #4]
    33a6:	687b      	ldr	r3, [r7, #4]
    33a8:	2b00      	cmp	r3, #0
    33aa:	d0e3      	beq.n	3374 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    33ac:	46c0      	nop			; (mov r8, r8)
    33ae:	4b05      	ldr	r3, [pc, #20]	; (33c4 <_extint_enable+0x60>)
    33b0:	4798      	blx	r3
    33b2:	1e03      	subs	r3, r0, #0
    33b4:	d1fb      	bne.n	33ae <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    33b6:	46c0      	nop			; (mov r8, r8)
    33b8:	46bd      	mov	sp, r7
    33ba:	b002      	add	sp, #8
    33bc:	bd80      	pop	{r7, pc}
    33be:	46c0      	nop			; (mov r8, r8)
    33c0:	40001800 	.word	0x40001800
    33c4:	0000319d 	.word	0x0000319d

000033c8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    33c8:	b580      	push	{r7, lr}
    33ca:	b086      	sub	sp, #24
    33cc:	af00      	add	r7, sp, #0
    33ce:	0002      	movs	r2, r0
    33d0:	6039      	str	r1, [r7, #0]
    33d2:	1dfb      	adds	r3, r7, #7
    33d4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    33d6:	2308      	movs	r3, #8
    33d8:	18fb      	adds	r3, r7, r3
    33da:	0018      	movs	r0, r3
    33dc:	4b36      	ldr	r3, [pc, #216]	; (34b8 <extint_chan_set_config+0xf0>)
    33de:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    33e0:	683b      	ldr	r3, [r7, #0]
    33e2:	685b      	ldr	r3, [r3, #4]
    33e4:	b2da      	uxtb	r2, r3
    33e6:	2308      	movs	r3, #8
    33e8:	18fb      	adds	r3, r7, r3
    33ea:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    33ec:	2308      	movs	r3, #8
    33ee:	18fb      	adds	r3, r7, r3
    33f0:	2200      	movs	r2, #0
    33f2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    33f4:	683b      	ldr	r3, [r7, #0]
    33f6:	7a1a      	ldrb	r2, [r3, #8]
    33f8:	2308      	movs	r3, #8
    33fa:	18fb      	adds	r3, r7, r3
    33fc:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    33fe:	683b      	ldr	r3, [r7, #0]
    3400:	681b      	ldr	r3, [r3, #0]
    3402:	b2db      	uxtb	r3, r3
    3404:	2208      	movs	r2, #8
    3406:	18ba      	adds	r2, r7, r2
    3408:	0011      	movs	r1, r2
    340a:	0018      	movs	r0, r3
    340c:	4b2b      	ldr	r3, [pc, #172]	; (34bc <extint_chan_set_config+0xf4>)
    340e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    3410:	1dfb      	adds	r3, r7, #7
    3412:	781b      	ldrb	r3, [r3, #0]
    3414:	0018      	movs	r0, r3
    3416:	4b2a      	ldr	r3, [pc, #168]	; (34c0 <extint_chan_set_config+0xf8>)
    3418:	4798      	blx	r3
    341a:	0003      	movs	r3, r0
    341c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    341e:	1dfb      	adds	r3, r7, #7
    3420:	781b      	ldrb	r3, [r3, #0]
    3422:	2207      	movs	r2, #7
    3424:	4013      	ands	r3, r2
    3426:	009b      	lsls	r3, r3, #2
    3428:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    342a:	683b      	ldr	r3, [r7, #0]
    342c:	7adb      	ldrb	r3, [r3, #11]
    342e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    3430:	683b      	ldr	r3, [r7, #0]
    3432:	7a9b      	ldrb	r3, [r3, #10]
    3434:	2b00      	cmp	r3, #0
    3436:	d003      	beq.n	3440 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    3438:	697b      	ldr	r3, [r7, #20]
    343a:	2208      	movs	r2, #8
    343c:	4313      	orrs	r3, r2
    343e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    3440:	1dfb      	adds	r3, r7, #7
    3442:	781b      	ldrb	r3, [r3, #0]
    3444:	08db      	lsrs	r3, r3, #3
    3446:	b2db      	uxtb	r3, r3
    3448:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    344a:	1dfb      	adds	r3, r7, #7
    344c:	781b      	ldrb	r3, [r3, #0]
    344e:	08db      	lsrs	r3, r3, #3
    3450:	b2db      	uxtb	r3, r3
    3452:	001a      	movs	r2, r3
    3454:	693b      	ldr	r3, [r7, #16]
    3456:	3206      	adds	r2, #6
    3458:	0092      	lsls	r2, r2, #2
    345a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    345c:	210f      	movs	r1, #15
    345e:	68fa      	ldr	r2, [r7, #12]
    3460:	4091      	lsls	r1, r2
    3462:	000a      	movs	r2, r1
    3464:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    3466:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    3468:	6979      	ldr	r1, [r7, #20]
    346a:	68fb      	ldr	r3, [r7, #12]
    346c:	4099      	lsls	r1, r3
    346e:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3470:	431a      	orrs	r2, r3
    3472:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    3474:	693b      	ldr	r3, [r7, #16]
    3476:	1d82      	adds	r2, r0, #6
    3478:	0092      	lsls	r2, r2, #2
    347a:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    347c:	683b      	ldr	r3, [r7, #0]
    347e:	7a5b      	ldrb	r3, [r3, #9]
    3480:	2b00      	cmp	r3, #0
    3482:	d00a      	beq.n	349a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    3484:	693b      	ldr	r3, [r7, #16]
    3486:	695a      	ldr	r2, [r3, #20]
    3488:	1dfb      	adds	r3, r7, #7
    348a:	781b      	ldrb	r3, [r3, #0]
    348c:	2101      	movs	r1, #1
    348e:	4099      	lsls	r1, r3
    3490:	000b      	movs	r3, r1
    3492:	431a      	orrs	r2, r3
    3494:	693b      	ldr	r3, [r7, #16]
    3496:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    3498:	e00a      	b.n	34b0 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    349a:	693b      	ldr	r3, [r7, #16]
    349c:	695b      	ldr	r3, [r3, #20]
    349e:	1dfa      	adds	r2, r7, #7
    34a0:	7812      	ldrb	r2, [r2, #0]
    34a2:	2101      	movs	r1, #1
    34a4:	4091      	lsls	r1, r2
    34a6:	000a      	movs	r2, r1
    34a8:	43d2      	mvns	r2, r2
    34aa:	401a      	ands	r2, r3
    34ac:	693b      	ldr	r3, [r7, #16]
    34ae:	615a      	str	r2, [r3, #20]
	}
}
    34b0:	46c0      	nop			; (mov r8, r8)
    34b2:	46bd      	mov	sp, r7
    34b4:	b006      	add	sp, #24
    34b6:	bd80      	pop	{r7, pc}
    34b8:	00003129 	.word	0x00003129
    34bc:	00006301 	.word	0x00006301
    34c0:	00003151 	.word	0x00003151

000034c4 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    34c4:	b580      	push	{r7, lr}
    34c6:	b084      	sub	sp, #16
    34c8:	af00      	add	r7, sp, #0
    34ca:	0002      	movs	r2, r0
    34cc:	1dfb      	adds	r3, r7, #7
    34ce:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    34d0:	230f      	movs	r3, #15
    34d2:	18fb      	adds	r3, r7, r3
    34d4:	1dfa      	adds	r2, r7, #7
    34d6:	7812      	ldrb	r2, [r2, #0]
    34d8:	0952      	lsrs	r2, r2, #5
    34da:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    34dc:	230f      	movs	r3, #15
    34de:	18fb      	adds	r3, r7, r3
    34e0:	781b      	ldrb	r3, [r3, #0]
    34e2:	2b00      	cmp	r3, #0
    34e4:	d10c      	bne.n	3500 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    34e6:	4b09      	ldr	r3, [pc, #36]	; (350c <_extint_get_eic_from_channel+0x48>)
    34e8:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    34ea:	230f      	movs	r3, #15
    34ec:	18fb      	adds	r3, r7, r3
    34ee:	781b      	ldrb	r3, [r3, #0]
    34f0:	009b      	lsls	r3, r3, #2
    34f2:	2210      	movs	r2, #16
    34f4:	4694      	mov	ip, r2
    34f6:	44bc      	add	ip, r7
    34f8:	4463      	add	r3, ip
    34fa:	3b08      	subs	r3, #8
    34fc:	681b      	ldr	r3, [r3, #0]
    34fe:	e000      	b.n	3502 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    3500:	2300      	movs	r3, #0
	}
}
    3502:	0018      	movs	r0, r3
    3504:	46bd      	mov	sp, r7
    3506:	b004      	add	sp, #16
    3508:	bd80      	pop	{r7, pc}
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	40001800 	.word	0x40001800

00003510 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    3510:	b580      	push	{r7, lr}
    3512:	b084      	sub	sp, #16
    3514:	af00      	add	r7, sp, #0
    3516:	0002      	movs	r2, r0
    3518:	1dfb      	adds	r3, r7, #7
    351a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    351c:	1dfb      	adds	r3, r7, #7
    351e:	781b      	ldrb	r3, [r3, #0]
    3520:	0018      	movs	r0, r3
    3522:	4b0b      	ldr	r3, [pc, #44]	; (3550 <extint_chan_is_detected+0x40>)
    3524:	4798      	blx	r3
    3526:	0003      	movs	r3, r0
    3528:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    352a:	1dfb      	adds	r3, r7, #7
    352c:	781b      	ldrb	r3, [r3, #0]
    352e:	221f      	movs	r2, #31
    3530:	4013      	ands	r3, r2
    3532:	2201      	movs	r2, #1
    3534:	409a      	lsls	r2, r3
    3536:	0013      	movs	r3, r2
    3538:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    353a:	68fb      	ldr	r3, [r7, #12]
    353c:	691b      	ldr	r3, [r3, #16]
    353e:	68ba      	ldr	r2, [r7, #8]
    3540:	4013      	ands	r3, r2
    3542:	1e5a      	subs	r2, r3, #1
    3544:	4193      	sbcs	r3, r2
    3546:	b2db      	uxtb	r3, r3
}
    3548:	0018      	movs	r0, r3
    354a:	46bd      	mov	sp, r7
    354c:	b004      	add	sp, #16
    354e:	bd80      	pop	{r7, pc}
    3550:	000034c5 	.word	0x000034c5

00003554 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check.
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    3554:	b580      	push	{r7, lr}
    3556:	b084      	sub	sp, #16
    3558:	af00      	add	r7, sp, #0
    355a:	0002      	movs	r2, r0
    355c:	1dfb      	adds	r3, r7, #7
    355e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    3560:	1dfb      	adds	r3, r7, #7
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	0018      	movs	r0, r3
    3566:	4b09      	ldr	r3, [pc, #36]	; (358c <extint_chan_clear_detected+0x38>)
    3568:	4798      	blx	r3
    356a:	0003      	movs	r3, r0
    356c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    356e:	1dfb      	adds	r3, r7, #7
    3570:	781b      	ldrb	r3, [r3, #0]
    3572:	221f      	movs	r2, #31
    3574:	4013      	ands	r3, r2
    3576:	2201      	movs	r2, #1
    3578:	409a      	lsls	r2, r3
    357a:	0013      	movs	r3, r2
    357c:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    357e:	68fb      	ldr	r3, [r7, #12]
    3580:	68ba      	ldr	r2, [r7, #8]
    3582:	611a      	str	r2, [r3, #16]
}
    3584:	46c0      	nop			; (mov r8, r8)
    3586:	46bd      	mov	sp, r7
    3588:	b004      	add	sp, #16
    358a:	bd80      	pop	{r7, pc}
    358c:	000034c5 	.word	0x000034c5

00003590 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3590:	b580      	push	{r7, lr}
    3592:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3594:	4b15      	ldr	r3, [pc, #84]	; (35ec <EIC_Handler+0x5c>)
    3596:	2200      	movs	r2, #0
    3598:	701a      	strb	r2, [r3, #0]
    359a:	e020      	b.n	35de <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    359c:	4b13      	ldr	r3, [pc, #76]	; (35ec <EIC_Handler+0x5c>)
    359e:	781b      	ldrb	r3, [r3, #0]
    35a0:	0018      	movs	r0, r3
    35a2:	4b13      	ldr	r3, [pc, #76]	; (35f0 <EIC_Handler+0x60>)
    35a4:	4798      	blx	r3
    35a6:	1e03      	subs	r3, r0, #0
    35a8:	d013      	beq.n	35d2 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    35aa:	4b10      	ldr	r3, [pc, #64]	; (35ec <EIC_Handler+0x5c>)
    35ac:	781b      	ldrb	r3, [r3, #0]
    35ae:	0018      	movs	r0, r3
    35b0:	4b10      	ldr	r3, [pc, #64]	; (35f4 <EIC_Handler+0x64>)
    35b2:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    35b4:	4b0d      	ldr	r3, [pc, #52]	; (35ec <EIC_Handler+0x5c>)
    35b6:	781b      	ldrb	r3, [r3, #0]
    35b8:	001a      	movs	r2, r3
    35ba:	4b0f      	ldr	r3, [pc, #60]	; (35f8 <EIC_Handler+0x68>)
    35bc:	0092      	lsls	r2, r2, #2
    35be:	58d3      	ldr	r3, [r2, r3]
    35c0:	2b00      	cmp	r3, #0
    35c2:	d006      	beq.n	35d2 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    35c4:	4b09      	ldr	r3, [pc, #36]	; (35ec <EIC_Handler+0x5c>)
    35c6:	781b      	ldrb	r3, [r3, #0]
    35c8:	001a      	movs	r2, r3
    35ca:	4b0b      	ldr	r3, [pc, #44]	; (35f8 <EIC_Handler+0x68>)
    35cc:	0092      	lsls	r2, r2, #2
    35ce:	58d3      	ldr	r3, [r2, r3]
    35d0:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    35d2:	4b06      	ldr	r3, [pc, #24]	; (35ec <EIC_Handler+0x5c>)
    35d4:	781b      	ldrb	r3, [r3, #0]
    35d6:	3301      	adds	r3, #1
    35d8:	b2da      	uxtb	r2, r3
    35da:	4b04      	ldr	r3, [pc, #16]	; (35ec <EIC_Handler+0x5c>)
    35dc:	701a      	strb	r2, [r3, #0]
    35de:	4b03      	ldr	r3, [pc, #12]	; (35ec <EIC_Handler+0x5c>)
    35e0:	781b      	ldrb	r3, [r3, #0]
    35e2:	2b0f      	cmp	r3, #15
    35e4:	d9da      	bls.n	359c <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    35e6:	46c0      	nop			; (mov r8, r8)
    35e8:	46bd      	mov	sp, r7
    35ea:	bd80      	pop	{r7, pc}
    35ec:	200005b0 	.word	0x200005b0
    35f0:	00003511 	.word	0x00003511
    35f4:	00003555 	.word	0x00003555
    35f8:	20000570 	.word	0x20000570

000035fc <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    35fc:	b580      	push	{r7, lr}
    35fe:	b082      	sub	sp, #8
    3600:	af00      	add	r7, sp, #0
    3602:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3604:	687b      	ldr	r3, [r7, #4]
    3606:	2280      	movs	r2, #128	; 0x80
    3608:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    360a:	687b      	ldr	r3, [r7, #4]
    360c:	2200      	movs	r2, #0
    360e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3610:	687b      	ldr	r3, [r7, #4]
    3612:	2201      	movs	r2, #1
    3614:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3616:	687b      	ldr	r3, [r7, #4]
    3618:	2200      	movs	r2, #0
    361a:	70da      	strb	r2, [r3, #3]
}
    361c:	46c0      	nop			; (mov r8, r8)
    361e:	46bd      	mov	sp, r7
    3620:	b002      	add	sp, #8
    3622:	bd80      	pop	{r7, pc}

00003624 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3624:	b580      	push	{r7, lr}
    3626:	b084      	sub	sp, #16
    3628:	af00      	add	r7, sp, #0
    362a:	0002      	movs	r2, r0
    362c:	6039      	str	r1, [r7, #0]
    362e:	1dfb      	adds	r3, r7, #7
    3630:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    3632:	230c      	movs	r3, #12
    3634:	18fb      	adds	r3, r7, r3
    3636:	0018      	movs	r0, r3
    3638:	4b10      	ldr	r3, [pc, #64]	; (367c <port_pin_set_config+0x58>)
    363a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    363c:	230c      	movs	r3, #12
    363e:	18fb      	adds	r3, r7, r3
    3640:	2280      	movs	r2, #128	; 0x80
    3642:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3644:	683b      	ldr	r3, [r7, #0]
    3646:	781a      	ldrb	r2, [r3, #0]
    3648:	230c      	movs	r3, #12
    364a:	18fb      	adds	r3, r7, r3
    364c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    364e:	683b      	ldr	r3, [r7, #0]
    3650:	785a      	ldrb	r2, [r3, #1]
    3652:	230c      	movs	r3, #12
    3654:	18fb      	adds	r3, r7, r3
    3656:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3658:	683b      	ldr	r3, [r7, #0]
    365a:	789a      	ldrb	r2, [r3, #2]
    365c:	230c      	movs	r3, #12
    365e:	18fb      	adds	r3, r7, r3
    3660:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3662:	230c      	movs	r3, #12
    3664:	18fa      	adds	r2, r7, r3
    3666:	1dfb      	adds	r3, r7, #7
    3668:	781b      	ldrb	r3, [r3, #0]
    366a:	0011      	movs	r1, r2
    366c:	0018      	movs	r0, r3
    366e:	4b04      	ldr	r3, [pc, #16]	; (3680 <port_pin_set_config+0x5c>)
    3670:	4798      	blx	r3
}
    3672:	46c0      	nop			; (mov r8, r8)
    3674:	46bd      	mov	sp, r7
    3676:	b004      	add	sp, #16
    3678:	bd80      	pop	{r7, pc}
    367a:	46c0      	nop			; (mov r8, r8)
    367c:	000035fd 	.word	0x000035fd
    3680:	00006301 	.word	0x00006301

00003684 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3684:	b580      	push	{r7, lr}
    3686:	b082      	sub	sp, #8
    3688:	af00      	add	r7, sp, #0
    368a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	2200      	movs	r2, #0
    3690:	701a      	strb	r2, [r3, #0]
}
    3692:	46c0      	nop			; (mov r8, r8)
    3694:	46bd      	mov	sp, r7
    3696:	b002      	add	sp, #8
    3698:	bd80      	pop	{r7, pc}
    369a:	46c0      	nop			; (mov r8, r8)

0000369c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    369c:	b5f0      	push	{r4, r5, r6, r7, lr}
    369e:	b08d      	sub	sp, #52	; 0x34
    36a0:	af00      	add	r7, sp, #0
    36a2:	60b8      	str	r0, [r7, #8]
    36a4:	60f9      	str	r1, [r7, #12]
    36a6:	603a      	str	r2, [r7, #0]
    36a8:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    36aa:	2300      	movs	r3, #0
    36ac:	2400      	movs	r4, #0
    36ae:	623b      	str	r3, [r7, #32]
    36b0:	627c      	str	r4, [r7, #36]	; 0x24
    36b2:	2300      	movs	r3, #0
    36b4:	2400      	movs	r4, #0
    36b6:	61bb      	str	r3, [r7, #24]
    36b8:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    36ba:	233f      	movs	r3, #63	; 0x3f
    36bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    36be:	e053      	b.n	3768 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    36c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36c2:	3b20      	subs	r3, #32
    36c4:	2b00      	cmp	r3, #0
    36c6:	db04      	blt.n	36d2 <long_division+0x36>
    36c8:	2201      	movs	r2, #1
    36ca:	409a      	lsls	r2, r3
    36cc:	0013      	movs	r3, r2
    36ce:	617b      	str	r3, [r7, #20]
    36d0:	e00b      	b.n	36ea <long_division+0x4e>
    36d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36d4:	2220      	movs	r2, #32
    36d6:	1ad3      	subs	r3, r2, r3
    36d8:	2201      	movs	r2, #1
    36da:	40da      	lsrs	r2, r3
    36dc:	0013      	movs	r3, r2
    36de:	2100      	movs	r1, #0
    36e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    36e2:	4091      	lsls	r1, r2
    36e4:	000a      	movs	r2, r1
    36e6:	4313      	orrs	r3, r2
    36e8:	617b      	str	r3, [r7, #20]
    36ea:	2201      	movs	r2, #1
    36ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36ee:	409a      	lsls	r2, r3
    36f0:	0013      	movs	r3, r2
    36f2:	613b      	str	r3, [r7, #16]

		r = r << 1;
    36f4:	69bb      	ldr	r3, [r7, #24]
    36f6:	69fc      	ldr	r4, [r7, #28]
    36f8:	18db      	adds	r3, r3, r3
    36fa:	4164      	adcs	r4, r4
    36fc:	61bb      	str	r3, [r7, #24]
    36fe:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    3700:	68bb      	ldr	r3, [r7, #8]
    3702:	693a      	ldr	r2, [r7, #16]
    3704:	401a      	ands	r2, r3
    3706:	0015      	movs	r5, r2
    3708:	68fb      	ldr	r3, [r7, #12]
    370a:	697a      	ldr	r2, [r7, #20]
    370c:	401a      	ands	r2, r3
    370e:	0016      	movs	r6, r2
    3710:	002b      	movs	r3, r5
    3712:	4333      	orrs	r3, r6
    3714:	d007      	beq.n	3726 <long_division+0x8a>
			r |= 0x01;
    3716:	69bb      	ldr	r3, [r7, #24]
    3718:	2201      	movs	r2, #1
    371a:	4313      	orrs	r3, r2
    371c:	61bb      	str	r3, [r7, #24]
    371e:	69fb      	ldr	r3, [r7, #28]
    3720:	2200      	movs	r2, #0
    3722:	4313      	orrs	r3, r2
    3724:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    3726:	687a      	ldr	r2, [r7, #4]
    3728:	69fb      	ldr	r3, [r7, #28]
    372a:	429a      	cmp	r2, r3
    372c:	d819      	bhi.n	3762 <long_division+0xc6>
    372e:	687a      	ldr	r2, [r7, #4]
    3730:	69fb      	ldr	r3, [r7, #28]
    3732:	429a      	cmp	r2, r3
    3734:	d103      	bne.n	373e <long_division+0xa2>
    3736:	683a      	ldr	r2, [r7, #0]
    3738:	69bb      	ldr	r3, [r7, #24]
    373a:	429a      	cmp	r2, r3
    373c:	d811      	bhi.n	3762 <long_division+0xc6>
			r = r - d;
    373e:	69b9      	ldr	r1, [r7, #24]
    3740:	69fa      	ldr	r2, [r7, #28]
    3742:	683b      	ldr	r3, [r7, #0]
    3744:	687c      	ldr	r4, [r7, #4]
    3746:	1ac9      	subs	r1, r1, r3
    3748:	41a2      	sbcs	r2, r4
    374a:	000b      	movs	r3, r1
    374c:	0014      	movs	r4, r2
    374e:	61bb      	str	r3, [r7, #24]
    3750:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3752:	6a3a      	ldr	r2, [r7, #32]
    3754:	693b      	ldr	r3, [r7, #16]
    3756:	4313      	orrs	r3, r2
    3758:	623b      	str	r3, [r7, #32]
    375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    375c:	697b      	ldr	r3, [r7, #20]
    375e:	4313      	orrs	r3, r2
    3760:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3764:	3b01      	subs	r3, #1
    3766:	62fb      	str	r3, [r7, #44]	; 0x2c
    3768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    376a:	2b00      	cmp	r3, #0
    376c:	daa8      	bge.n	36c0 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    376e:	6a3b      	ldr	r3, [r7, #32]
    3770:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    3772:	0018      	movs	r0, r3
    3774:	0021      	movs	r1, r4
    3776:	46bd      	mov	sp, r7
    3778:	b00d      	add	sp, #52	; 0x34
    377a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000377c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    377c:	b580      	push	{r7, lr}
    377e:	b086      	sub	sp, #24
    3780:	af00      	add	r7, sp, #0
    3782:	60f8      	str	r0, [r7, #12]
    3784:	60b9      	str	r1, [r7, #8]
    3786:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3788:	2316      	movs	r3, #22
    378a:	18fb      	adds	r3, r7, r3
    378c:	2200      	movs	r2, #0
    378e:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3790:	68bb      	ldr	r3, [r7, #8]
    3792:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    3794:	68bb      	ldr	r3, [r7, #8]
    3796:	085a      	lsrs	r2, r3, #1
    3798:	68fb      	ldr	r3, [r7, #12]
    379a:	429a      	cmp	r2, r3
    379c:	d201      	bcs.n	37a2 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    379e:	2340      	movs	r3, #64	; 0x40
    37a0:	e026      	b.n	37f0 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    37a2:	68bb      	ldr	r3, [r7, #8]
    37a4:	085b      	lsrs	r3, r3, #1
    37a6:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    37a8:	e00a      	b.n	37c0 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    37aa:	693a      	ldr	r2, [r7, #16]
    37ac:	68fb      	ldr	r3, [r7, #12]
    37ae:	1ad3      	subs	r3, r2, r3
    37b0:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    37b2:	2316      	movs	r3, #22
    37b4:	18fb      	adds	r3, r7, r3
    37b6:	881a      	ldrh	r2, [r3, #0]
    37b8:	2316      	movs	r3, #22
    37ba:	18fb      	adds	r3, r7, r3
    37bc:	3201      	adds	r2, #1
    37be:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    37c0:	693a      	ldr	r2, [r7, #16]
    37c2:	68fb      	ldr	r3, [r7, #12]
    37c4:	429a      	cmp	r2, r3
    37c6:	d2f0      	bcs.n	37aa <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    37c8:	2316      	movs	r3, #22
    37ca:	18fb      	adds	r3, r7, r3
    37cc:	2216      	movs	r2, #22
    37ce:	18ba      	adds	r2, r7, r2
    37d0:	8812      	ldrh	r2, [r2, #0]
    37d2:	3a01      	subs	r2, #1
    37d4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    37d6:	2316      	movs	r3, #22
    37d8:	18fb      	adds	r3, r7, r3
    37da:	881b      	ldrh	r3, [r3, #0]
    37dc:	2bff      	cmp	r3, #255	; 0xff
    37de:	d901      	bls.n	37e4 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    37e0:	2340      	movs	r3, #64	; 0x40
    37e2:	e005      	b.n	37f0 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	2216      	movs	r2, #22
    37e8:	18ba      	adds	r2, r7, r2
    37ea:	8812      	ldrh	r2, [r2, #0]
    37ec:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    37ee:	2300      	movs	r3, #0
	}
}
    37f0:	0018      	movs	r0, r3
    37f2:	46bd      	mov	sp, r7
    37f4:	b006      	add	sp, #24
    37f6:	bd80      	pop	{r7, pc}

000037f8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    37f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    37fa:	b09d      	sub	sp, #116	; 0x74
    37fc:	af00      	add	r7, sp, #0
    37fe:	63f8      	str	r0, [r7, #60]	; 0x3c
    3800:	63b9      	str	r1, [r7, #56]	; 0x38
    3802:	637a      	str	r2, [r7, #52]	; 0x34
    3804:	2233      	movs	r2, #51	; 0x33
    3806:	18ba      	adds	r2, r7, r2
    3808:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    380a:	2300      	movs	r3, #0
    380c:	2400      	movs	r4, #0
    380e:	65bb      	str	r3, [r7, #88]	; 0x58
    3810:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    3812:	2300      	movs	r3, #0
    3814:	2400      	movs	r4, #0
    3816:	653b      	str	r3, [r7, #80]	; 0x50
    3818:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    381a:	2300      	movs	r3, #0
    381c:	2400      	movs	r4, #0
    381e:	66bb      	str	r3, [r7, #104]	; 0x68
    3820:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    3822:	2300      	movs	r3, #0
    3824:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3826:	2358      	movs	r3, #88	; 0x58
    3828:	2230      	movs	r2, #48	; 0x30
    382a:	4694      	mov	ip, r2
    382c:	44bc      	add	ip, r7
    382e:	4463      	add	r3, ip
    3830:	781a      	ldrb	r2, [r3, #0]
    3832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3834:	435a      	muls	r2, r3
    3836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3838:	429a      	cmp	r2, r3
    383a:	d901      	bls.n	3840 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    383c:	2340      	movs	r3, #64	; 0x40
    383e:	e0c6      	b.n	39ce <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3840:	2333      	movs	r3, #51	; 0x33
    3842:	18fb      	adds	r3, r7, r3
    3844:	781b      	ldrb	r3, [r3, #0]
    3846:	2b00      	cmp	r3, #0
    3848:	d13d      	bne.n	38c6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    384a:	2358      	movs	r3, #88	; 0x58
    384c:	2230      	movs	r2, #48	; 0x30
    384e:	4694      	mov	ip, r2
    3850:	44bc      	add	ip, r7
    3852:	4463      	add	r3, ip
    3854:	781b      	ldrb	r3, [r3, #0]
    3856:	b2db      	uxtb	r3, r3
    3858:	613b      	str	r3, [r7, #16]
    385a:	2300      	movs	r3, #0
    385c:	617b      	str	r3, [r7, #20]
    385e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3860:	60bb      	str	r3, [r7, #8]
    3862:	2300      	movs	r3, #0
    3864:	60fb      	str	r3, [r7, #12]
    3866:	4c5c      	ldr	r4, [pc, #368]	; (39d8 <_sercom_get_async_baud_val+0x1e0>)
    3868:	68ba      	ldr	r2, [r7, #8]
    386a:	68fb      	ldr	r3, [r7, #12]
    386c:	6938      	ldr	r0, [r7, #16]
    386e:	6979      	ldr	r1, [r7, #20]
    3870:	47a0      	blx	r4
    3872:	0003      	movs	r3, r0
    3874:	000c      	movs	r4, r1
    3876:	001b      	movs	r3, r3
    3878:	64fb      	str	r3, [r7, #76]	; 0x4c
    387a:	2300      	movs	r3, #0
    387c:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3880:	603b      	str	r3, [r7, #0]
    3882:	2300      	movs	r3, #0
    3884:	607b      	str	r3, [r7, #4]
    3886:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    3888:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    388a:	683a      	ldr	r2, [r7, #0]
    388c:	687b      	ldr	r3, [r7, #4]
    388e:	4c53      	ldr	r4, [pc, #332]	; (39dc <_sercom_get_async_baud_val+0x1e4>)
    3890:	47a0      	blx	r4
    3892:	0003      	movs	r3, r0
    3894:	000c      	movs	r4, r1
    3896:	65bb      	str	r3, [r7, #88]	; 0x58
    3898:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    389a:	2100      	movs	r1, #0
    389c:	2201      	movs	r2, #1
    389e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    38a0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    38a2:	1ac9      	subs	r1, r1, r3
    38a4:	41a2      	sbcs	r2, r4
    38a6:	000b      	movs	r3, r1
    38a8:	0014      	movs	r4, r2
    38aa:	653b      	str	r3, [r7, #80]	; 0x50
    38ac:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    38ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    38b0:	0c1b      	lsrs	r3, r3, #16
    38b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    38b4:	0416      	lsls	r6, r2, #16
    38b6:	431e      	orrs	r6, r3
    38b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    38ba:	041d      	lsls	r5, r3, #16
    38bc:	0033      	movs	r3, r6
    38be:	66bb      	str	r3, [r7, #104]	; 0x68
    38c0:	2300      	movs	r3, #0
    38c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    38c4:	e07d      	b.n	39c2 <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    38c6:	2333      	movs	r3, #51	; 0x33
    38c8:	18fb      	adds	r3, r7, r3
    38ca:	781b      	ldrb	r3, [r3, #0]
    38cc:	2b01      	cmp	r3, #1
    38ce:	d000      	beq.n	38d2 <_sercom_get_async_baud_val+0xda>
    38d0:	e077      	b.n	39c2 <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    38d2:	2337      	movs	r3, #55	; 0x37
    38d4:	2230      	movs	r2, #48	; 0x30
    38d6:	4694      	mov	ip, r2
    38d8:	44bc      	add	ip, r7
    38da:	4463      	add	r3, ip
    38dc:	2200      	movs	r2, #0
    38de:	701a      	strb	r2, [r3, #0]
    38e0:	e04e      	b.n	3980 <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    38e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    38e4:	62bb      	str	r3, [r7, #40]	; 0x28
    38e6:	2300      	movs	r3, #0
    38e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    38ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    38ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    38ee:	0003      	movs	r3, r0
    38f0:	0f5b      	lsrs	r3, r3, #29
    38f2:	000a      	movs	r2, r1
    38f4:	00d2      	lsls	r2, r2, #3
    38f6:	4313      	orrs	r3, r2
    38f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    38fa:	0003      	movs	r3, r0
    38fc:	00db      	lsls	r3, r3, #3
    38fe:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    3900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3902:	623b      	str	r3, [r7, #32]
    3904:	2300      	movs	r3, #0
    3906:	627b      	str	r3, [r7, #36]	; 0x24
    3908:	2358      	movs	r3, #88	; 0x58
    390a:	2230      	movs	r2, #48	; 0x30
    390c:	4694      	mov	ip, r2
    390e:	44bc      	add	ip, r7
    3910:	4463      	add	r3, ip
    3912:	781b      	ldrb	r3, [r3, #0]
    3914:	b2db      	uxtb	r3, r3
    3916:	61bb      	str	r3, [r7, #24]
    3918:	2300      	movs	r3, #0
    391a:	61fb      	str	r3, [r7, #28]
    391c:	4c2e      	ldr	r4, [pc, #184]	; (39d8 <_sercom_get_async_baud_val+0x1e0>)
    391e:	69ba      	ldr	r2, [r7, #24]
    3920:	69fb      	ldr	r3, [r7, #28]
    3922:	6a38      	ldr	r0, [r7, #32]
    3924:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3926:	47a0      	blx	r4
    3928:	0003      	movs	r3, r0
    392a:	000c      	movs	r4, r1
    392c:	643b      	str	r3, [r7, #64]	; 0x40
    392e:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    3930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3932:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    3934:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    3936:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    3938:	001a      	movs	r2, r3
    393a:	0023      	movs	r3, r4
    393c:	4c27      	ldr	r4, [pc, #156]	; (39dc <_sercom_get_async_baud_val+0x1e4>)
    393e:	47a0      	blx	r4
    3940:	0003      	movs	r3, r0
    3942:	000c      	movs	r4, r1
    3944:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    3946:	2337      	movs	r3, #55	; 0x37
    3948:	2230      	movs	r2, #48	; 0x30
    394a:	4694      	mov	ip, r2
    394c:	44bc      	add	ip, r7
    394e:	4463      	add	r3, ip
    3950:	781b      	ldrb	r3, [r3, #0]
    3952:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    3954:	1ad3      	subs	r3, r2, r3
    3956:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    3958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    395a:	08db      	lsrs	r3, r3, #3
    395c:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    395e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3960:	4a1f      	ldr	r2, [pc, #124]	; (39e0 <_sercom_get_async_baud_val+0x1e8>)
    3962:	4293      	cmp	r3, r2
    3964:	d915      	bls.n	3992 <_sercom_get_async_baud_val+0x19a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    3966:	2337      	movs	r3, #55	; 0x37
    3968:	2230      	movs	r2, #48	; 0x30
    396a:	4694      	mov	ip, r2
    396c:	44bc      	add	ip, r7
    396e:	4463      	add	r3, ip
    3970:	781a      	ldrb	r2, [r3, #0]
    3972:	2337      	movs	r3, #55	; 0x37
    3974:	2130      	movs	r1, #48	; 0x30
    3976:	468c      	mov	ip, r1
    3978:	44bc      	add	ip, r7
    397a:	4463      	add	r3, ip
    397c:	3201      	adds	r2, #1
    397e:	701a      	strb	r2, [r3, #0]
    3980:	2337      	movs	r3, #55	; 0x37
    3982:	2230      	movs	r2, #48	; 0x30
    3984:	4694      	mov	ip, r2
    3986:	44bc      	add	ip, r7
    3988:	4463      	add	r3, ip
    398a:	781b      	ldrb	r3, [r3, #0]
    398c:	2b07      	cmp	r3, #7
    398e:	d9a8      	bls.n	38e2 <_sercom_get_async_baud_val+0xea>
    3990:	e000      	b.n	3994 <_sercom_get_async_baud_val+0x19c>
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
    3992:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    3994:	2337      	movs	r3, #55	; 0x37
    3996:	2230      	movs	r2, #48	; 0x30
    3998:	4694      	mov	ip, r2
    399a:	44bc      	add	ip, r7
    399c:	4463      	add	r3, ip
    399e:	781b      	ldrb	r3, [r3, #0]
    39a0:	2b08      	cmp	r3, #8
    39a2:	d101      	bne.n	39a8 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    39a4:	2340      	movs	r3, #64	; 0x40
    39a6:	e012      	b.n	39ce <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    39a8:	2337      	movs	r3, #55	; 0x37
    39aa:	2230      	movs	r2, #48	; 0x30
    39ac:	4694      	mov	ip, r2
    39ae:	44bc      	add	ip, r7
    39b0:	4463      	add	r3, ip
    39b2:	781b      	ldrb	r3, [r3, #0]
    39b4:	035b      	lsls	r3, r3, #13
    39b6:	001a      	movs	r2, r3
    39b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    39ba:	4313      	orrs	r3, r2
    39bc:	66bb      	str	r3, [r7, #104]	; 0x68
    39be:	2300      	movs	r3, #0
    39c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    39c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    39c4:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    39c6:	b29a      	uxth	r2, r3
    39c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39ca:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    39cc:	2300      	movs	r3, #0
}
    39ce:	0018      	movs	r0, r3
    39d0:	46bd      	mov	sp, r7
    39d2:	b01d      	add	sp, #116	; 0x74
    39d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39d6:	46c0      	nop			; (mov r8, r8)
    39d8:	00006829 	.word	0x00006829
    39dc:	0000369d 	.word	0x0000369d
    39e0:	00001fff 	.word	0x00001fff

000039e4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    39e4:	b580      	push	{r7, lr}
    39e6:	b084      	sub	sp, #16
    39e8:	af00      	add	r7, sp, #0
    39ea:	0002      	movs	r2, r0
    39ec:	1dfb      	adds	r3, r7, #7
    39ee:	701a      	strb	r2, [r3, #0]
    39f0:	1dbb      	adds	r3, r7, #6
    39f2:	1c0a      	adds	r2, r1, #0
    39f4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    39f6:	4b1a      	ldr	r3, [pc, #104]	; (3a60 <sercom_set_gclk_generator+0x7c>)
    39f8:	781b      	ldrb	r3, [r3, #0]
    39fa:	2201      	movs	r2, #1
    39fc:	4053      	eors	r3, r2
    39fe:	b2db      	uxtb	r3, r3
    3a00:	2b00      	cmp	r3, #0
    3a02:	d103      	bne.n	3a0c <sercom_set_gclk_generator+0x28>
    3a04:	1dbb      	adds	r3, r7, #6
    3a06:	781b      	ldrb	r3, [r3, #0]
    3a08:	2b00      	cmp	r3, #0
    3a0a:	d01b      	beq.n	3a44 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3a0c:	230c      	movs	r3, #12
    3a0e:	18fb      	adds	r3, r7, r3
    3a10:	0018      	movs	r0, r3
    3a12:	4b14      	ldr	r3, [pc, #80]	; (3a64 <sercom_set_gclk_generator+0x80>)
    3a14:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3a16:	230c      	movs	r3, #12
    3a18:	18fb      	adds	r3, r7, r3
    3a1a:	1dfa      	adds	r2, r7, #7
    3a1c:	7812      	ldrb	r2, [r2, #0]
    3a1e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3a20:	230c      	movs	r3, #12
    3a22:	18fb      	adds	r3, r7, r3
    3a24:	0019      	movs	r1, r3
    3a26:	2013      	movs	r0, #19
    3a28:	4b0f      	ldr	r3, [pc, #60]	; (3a68 <sercom_set_gclk_generator+0x84>)
    3a2a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3a2c:	2013      	movs	r0, #19
    3a2e:	4b0f      	ldr	r3, [pc, #60]	; (3a6c <sercom_set_gclk_generator+0x88>)
    3a30:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    3a32:	4b0b      	ldr	r3, [pc, #44]	; (3a60 <sercom_set_gclk_generator+0x7c>)
    3a34:	1dfa      	adds	r2, r7, #7
    3a36:	7812      	ldrb	r2, [r2, #0]
    3a38:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3a3a:	4b09      	ldr	r3, [pc, #36]	; (3a60 <sercom_set_gclk_generator+0x7c>)
    3a3c:	2201      	movs	r2, #1
    3a3e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3a40:	2300      	movs	r3, #0
    3a42:	e008      	b.n	3a56 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3a44:	4b06      	ldr	r3, [pc, #24]	; (3a60 <sercom_set_gclk_generator+0x7c>)
    3a46:	785b      	ldrb	r3, [r3, #1]
    3a48:	1dfa      	adds	r2, r7, #7
    3a4a:	7812      	ldrb	r2, [r2, #0]
    3a4c:	429a      	cmp	r2, r3
    3a4e:	d101      	bne.n	3a54 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config. */
		return STATUS_OK;
    3a50:	2300      	movs	r3, #0
    3a52:	e000      	b.n	3a56 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3a54:	231d      	movs	r3, #29
}
    3a56:	0018      	movs	r0, r3
    3a58:	46bd      	mov	sp, r7
    3a5a:	b004      	add	sp, #16
    3a5c:	bd80      	pop	{r7, pc}
    3a5e:	46c0      	nop			; (mov r8, r8)
    3a60:	20000520 	.word	0x20000520
    3a64:	00003685 	.word	0x00003685
    3a68:	0000601d 	.word	0x0000601d
    3a6c:	00006061 	.word	0x00006061

00003a70 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3a70:	b580      	push	{r7, lr}
    3a72:	b082      	sub	sp, #8
    3a74:	af00      	add	r7, sp, #0
    3a76:	6078      	str	r0, [r7, #4]
    3a78:	000a      	movs	r2, r1
    3a7a:	1cfb      	adds	r3, r7, #3
    3a7c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3a7e:	687b      	ldr	r3, [r7, #4]
    3a80:	4a4d      	ldr	r2, [pc, #308]	; (3bb8 <_sercom_get_default_pad+0x148>)
    3a82:	4293      	cmp	r3, r2
    3a84:	d03f      	beq.n	3b06 <_sercom_get_default_pad+0x96>
    3a86:	4a4c      	ldr	r2, [pc, #304]	; (3bb8 <_sercom_get_default_pad+0x148>)
    3a88:	4293      	cmp	r3, r2
    3a8a:	d806      	bhi.n	3a9a <_sercom_get_default_pad+0x2a>
    3a8c:	4a4b      	ldr	r2, [pc, #300]	; (3bbc <_sercom_get_default_pad+0x14c>)
    3a8e:	4293      	cmp	r3, r2
    3a90:	d00f      	beq.n	3ab2 <_sercom_get_default_pad+0x42>
    3a92:	4a4b      	ldr	r2, [pc, #300]	; (3bc0 <_sercom_get_default_pad+0x150>)
    3a94:	4293      	cmp	r3, r2
    3a96:	d021      	beq.n	3adc <_sercom_get_default_pad+0x6c>
    3a98:	e089      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3a9a:	4a4a      	ldr	r2, [pc, #296]	; (3bc4 <_sercom_get_default_pad+0x154>)
    3a9c:	4293      	cmp	r3, r2
    3a9e:	d100      	bne.n	3aa2 <_sercom_get_default_pad+0x32>
    3aa0:	e05b      	b.n	3b5a <_sercom_get_default_pad+0xea>
    3aa2:	4a49      	ldr	r2, [pc, #292]	; (3bc8 <_sercom_get_default_pad+0x158>)
    3aa4:	4293      	cmp	r3, r2
    3aa6:	d100      	bne.n	3aaa <_sercom_get_default_pad+0x3a>
    3aa8:	e06c      	b.n	3b84 <_sercom_get_default_pad+0x114>
    3aaa:	4a48      	ldr	r2, [pc, #288]	; (3bcc <_sercom_get_default_pad+0x15c>)
    3aac:	4293      	cmp	r3, r2
    3aae:	d03f      	beq.n	3b30 <_sercom_get_default_pad+0xc0>
    3ab0:	e07d      	b.n	3bae <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3ab2:	1cfb      	adds	r3, r7, #3
    3ab4:	781b      	ldrb	r3, [r3, #0]
    3ab6:	2b01      	cmp	r3, #1
    3ab8:	d00a      	beq.n	3ad0 <_sercom_get_default_pad+0x60>
    3aba:	dc02      	bgt.n	3ac2 <_sercom_get_default_pad+0x52>
    3abc:	2b00      	cmp	r3, #0
    3abe:	d005      	beq.n	3acc <_sercom_get_default_pad+0x5c>
    3ac0:	e075      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3ac2:	2b02      	cmp	r3, #2
    3ac4:	d006      	beq.n	3ad4 <_sercom_get_default_pad+0x64>
    3ac6:	2b03      	cmp	r3, #3
    3ac8:	d006      	beq.n	3ad8 <_sercom_get_default_pad+0x68>
    3aca:	e070      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3acc:	4b40      	ldr	r3, [pc, #256]	; (3bd0 <_sercom_get_default_pad+0x160>)
    3ace:	e06f      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3ad0:	4b40      	ldr	r3, [pc, #256]	; (3bd4 <_sercom_get_default_pad+0x164>)
    3ad2:	e06d      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3ad4:	4b40      	ldr	r3, [pc, #256]	; (3bd8 <_sercom_get_default_pad+0x168>)
    3ad6:	e06b      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3ad8:	4b40      	ldr	r3, [pc, #256]	; (3bdc <_sercom_get_default_pad+0x16c>)
    3ada:	e069      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3adc:	1cfb      	adds	r3, r7, #3
    3ade:	781b      	ldrb	r3, [r3, #0]
    3ae0:	2b01      	cmp	r3, #1
    3ae2:	d00a      	beq.n	3afa <_sercom_get_default_pad+0x8a>
    3ae4:	dc02      	bgt.n	3aec <_sercom_get_default_pad+0x7c>
    3ae6:	2b00      	cmp	r3, #0
    3ae8:	d005      	beq.n	3af6 <_sercom_get_default_pad+0x86>
    3aea:	e060      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3aec:	2b02      	cmp	r3, #2
    3aee:	d006      	beq.n	3afe <_sercom_get_default_pad+0x8e>
    3af0:	2b03      	cmp	r3, #3
    3af2:	d006      	beq.n	3b02 <_sercom_get_default_pad+0x92>
    3af4:	e05b      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3af6:	2303      	movs	r3, #3
    3af8:	e05a      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3afa:	4b39      	ldr	r3, [pc, #228]	; (3be0 <_sercom_get_default_pad+0x170>)
    3afc:	e058      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3afe:	4b39      	ldr	r3, [pc, #228]	; (3be4 <_sercom_get_default_pad+0x174>)
    3b00:	e056      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b02:	4b39      	ldr	r3, [pc, #228]	; (3be8 <_sercom_get_default_pad+0x178>)
    3b04:	e054      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b06:	1cfb      	adds	r3, r7, #3
    3b08:	781b      	ldrb	r3, [r3, #0]
    3b0a:	2b01      	cmp	r3, #1
    3b0c:	d00a      	beq.n	3b24 <_sercom_get_default_pad+0xb4>
    3b0e:	dc02      	bgt.n	3b16 <_sercom_get_default_pad+0xa6>
    3b10:	2b00      	cmp	r3, #0
    3b12:	d005      	beq.n	3b20 <_sercom_get_default_pad+0xb0>
    3b14:	e04b      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3b16:	2b02      	cmp	r3, #2
    3b18:	d006      	beq.n	3b28 <_sercom_get_default_pad+0xb8>
    3b1a:	2b03      	cmp	r3, #3
    3b1c:	d006      	beq.n	3b2c <_sercom_get_default_pad+0xbc>
    3b1e:	e046      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3b20:	4b32      	ldr	r3, [pc, #200]	; (3bec <_sercom_get_default_pad+0x17c>)
    3b22:	e045      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b24:	4b32      	ldr	r3, [pc, #200]	; (3bf0 <_sercom_get_default_pad+0x180>)
    3b26:	e043      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b28:	4b32      	ldr	r3, [pc, #200]	; (3bf4 <_sercom_get_default_pad+0x184>)
    3b2a:	e041      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b2c:	4b32      	ldr	r3, [pc, #200]	; (3bf8 <_sercom_get_default_pad+0x188>)
    3b2e:	e03f      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b30:	1cfb      	adds	r3, r7, #3
    3b32:	781b      	ldrb	r3, [r3, #0]
    3b34:	2b01      	cmp	r3, #1
    3b36:	d00a      	beq.n	3b4e <_sercom_get_default_pad+0xde>
    3b38:	dc02      	bgt.n	3b40 <_sercom_get_default_pad+0xd0>
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d005      	beq.n	3b4a <_sercom_get_default_pad+0xda>
    3b3e:	e036      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3b40:	2b02      	cmp	r3, #2
    3b42:	d006      	beq.n	3b52 <_sercom_get_default_pad+0xe2>
    3b44:	2b03      	cmp	r3, #3
    3b46:	d006      	beq.n	3b56 <_sercom_get_default_pad+0xe6>
    3b48:	e031      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3b4a:	4b2c      	ldr	r3, [pc, #176]	; (3bfc <_sercom_get_default_pad+0x18c>)
    3b4c:	e030      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b4e:	4b2c      	ldr	r3, [pc, #176]	; (3c00 <_sercom_get_default_pad+0x190>)
    3b50:	e02e      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b52:	4b2c      	ldr	r3, [pc, #176]	; (3c04 <_sercom_get_default_pad+0x194>)
    3b54:	e02c      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b56:	4b2c      	ldr	r3, [pc, #176]	; (3c08 <_sercom_get_default_pad+0x198>)
    3b58:	e02a      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b5a:	1cfb      	adds	r3, r7, #3
    3b5c:	781b      	ldrb	r3, [r3, #0]
    3b5e:	2b01      	cmp	r3, #1
    3b60:	d00a      	beq.n	3b78 <_sercom_get_default_pad+0x108>
    3b62:	dc02      	bgt.n	3b6a <_sercom_get_default_pad+0xfa>
    3b64:	2b00      	cmp	r3, #0
    3b66:	d005      	beq.n	3b74 <_sercom_get_default_pad+0x104>
    3b68:	e021      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3b6a:	2b02      	cmp	r3, #2
    3b6c:	d006      	beq.n	3b7c <_sercom_get_default_pad+0x10c>
    3b6e:	2b03      	cmp	r3, #3
    3b70:	d006      	beq.n	3b80 <_sercom_get_default_pad+0x110>
    3b72:	e01c      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3b74:	4b25      	ldr	r3, [pc, #148]	; (3c0c <_sercom_get_default_pad+0x19c>)
    3b76:	e01b      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b78:	4b25      	ldr	r3, [pc, #148]	; (3c10 <_sercom_get_default_pad+0x1a0>)
    3b7a:	e019      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b7c:	4b25      	ldr	r3, [pc, #148]	; (3c14 <_sercom_get_default_pad+0x1a4>)
    3b7e:	e017      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b80:	4b25      	ldr	r3, [pc, #148]	; (3c18 <_sercom_get_default_pad+0x1a8>)
    3b82:	e015      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3b84:	1cfb      	adds	r3, r7, #3
    3b86:	781b      	ldrb	r3, [r3, #0]
    3b88:	2b01      	cmp	r3, #1
    3b8a:	d00a      	beq.n	3ba2 <_sercom_get_default_pad+0x132>
    3b8c:	dc02      	bgt.n	3b94 <_sercom_get_default_pad+0x124>
    3b8e:	2b00      	cmp	r3, #0
    3b90:	d005      	beq.n	3b9e <_sercom_get_default_pad+0x12e>
    3b92:	e00c      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3b94:	2b02      	cmp	r3, #2
    3b96:	d006      	beq.n	3ba6 <_sercom_get_default_pad+0x136>
    3b98:	2b03      	cmp	r3, #3
    3b9a:	d006      	beq.n	3baa <_sercom_get_default_pad+0x13a>
    3b9c:	e007      	b.n	3bae <_sercom_get_default_pad+0x13e>
    3b9e:	4b1f      	ldr	r3, [pc, #124]	; (3c1c <_sercom_get_default_pad+0x1ac>)
    3ba0:	e006      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3ba2:	4b1f      	ldr	r3, [pc, #124]	; (3c20 <_sercom_get_default_pad+0x1b0>)
    3ba4:	e004      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3ba6:	4b1f      	ldr	r3, [pc, #124]	; (3c24 <_sercom_get_default_pad+0x1b4>)
    3ba8:	e002      	b.n	3bb0 <_sercom_get_default_pad+0x140>
    3baa:	4b1f      	ldr	r3, [pc, #124]	; (3c28 <_sercom_get_default_pad+0x1b8>)
    3bac:	e000      	b.n	3bb0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3bae:	2300      	movs	r3, #0
}
    3bb0:	0018      	movs	r0, r3
    3bb2:	46bd      	mov	sp, r7
    3bb4:	b002      	add	sp, #8
    3bb6:	bd80      	pop	{r7, pc}
    3bb8:	42001000 	.word	0x42001000
    3bbc:	42000800 	.word	0x42000800
    3bc0:	42000c00 	.word	0x42000c00
    3bc4:	42001800 	.word	0x42001800
    3bc8:	42001c00 	.word	0x42001c00
    3bcc:	42001400 	.word	0x42001400
    3bd0:	00040003 	.word	0x00040003
    3bd4:	00050003 	.word	0x00050003
    3bd8:	00060003 	.word	0x00060003
    3bdc:	00070003 	.word	0x00070003
    3be0:	00010003 	.word	0x00010003
    3be4:	001e0003 	.word	0x001e0003
    3be8:	001f0003 	.word	0x001f0003
    3bec:	00080003 	.word	0x00080003
    3bf0:	00090003 	.word	0x00090003
    3bf4:	000a0003 	.word	0x000a0003
    3bf8:	000b0003 	.word	0x000b0003
    3bfc:	00100003 	.word	0x00100003
    3c00:	00110003 	.word	0x00110003
    3c04:	00120003 	.word	0x00120003
    3c08:	00130003 	.word	0x00130003
    3c0c:	000c0003 	.word	0x000c0003
    3c10:	000d0003 	.word	0x000d0003
    3c14:	000e0003 	.word	0x000e0003
    3c18:	000f0003 	.word	0x000f0003
    3c1c:	00160003 	.word	0x00160003
    3c20:	00170003 	.word	0x00170003
    3c24:	00180003 	.word	0x00180003
    3c28:	00190003 	.word	0x00190003

00003c2c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3c2c:	b580      	push	{r7, lr}
    3c2e:	b082      	sub	sp, #8
    3c30:	af00      	add	r7, sp, #0
    3c32:	0002      	movs	r2, r0
    3c34:	1dfb      	adds	r3, r7, #7
    3c36:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3c38:	46c0      	nop			; (mov r8, r8)
    3c3a:	46bd      	mov	sp, r7
    3c3c:	b002      	add	sp, #8
    3c3e:	bd80      	pop	{r7, pc}

00003c40 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3c40:	b590      	push	{r4, r7, lr}
    3c42:	b08b      	sub	sp, #44	; 0x2c
    3c44:	af00      	add	r7, sp, #0
    3c46:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3c48:	230c      	movs	r3, #12
    3c4a:	18fb      	adds	r3, r7, r3
    3c4c:	4a0f      	ldr	r2, [pc, #60]	; (3c8c <_sercom_get_sercom_inst_index+0x4c>)
    3c4e:	ca13      	ldmia	r2!, {r0, r1, r4}
    3c50:	c313      	stmia	r3!, {r0, r1, r4}
    3c52:	ca13      	ldmia	r2!, {r0, r1, r4}
    3c54:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3c56:	2300      	movs	r3, #0
    3c58:	627b      	str	r3, [r7, #36]	; 0x24
    3c5a:	e00e      	b.n	3c7a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3c5c:	230c      	movs	r3, #12
    3c5e:	18fb      	adds	r3, r7, r3
    3c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c62:	0092      	lsls	r2, r2, #2
    3c64:	58d3      	ldr	r3, [r2, r3]
    3c66:	1e1a      	subs	r2, r3, #0
    3c68:	687b      	ldr	r3, [r7, #4]
    3c6a:	429a      	cmp	r2, r3
    3c6c:	d102      	bne.n	3c74 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c70:	b2db      	uxtb	r3, r3
    3c72:	e006      	b.n	3c82 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c76:	3301      	adds	r3, #1
    3c78:	627b      	str	r3, [r7, #36]	; 0x24
    3c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3c7c:	2b05      	cmp	r3, #5
    3c7e:	d9ed      	bls.n	3c5c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    3c80:	2300      	movs	r3, #0
}
    3c82:	0018      	movs	r0, r3
    3c84:	46bd      	mov	sp, r7
    3c86:	b00b      	add	sp, #44	; 0x2c
    3c88:	bd90      	pop	{r4, r7, pc}
    3c8a:	46c0      	nop			; (mov r8, r8)
    3c8c:	000082c4 	.word	0x000082c4

00003c90 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3c90:	b580      	push	{r7, lr}
    3c92:	b084      	sub	sp, #16
    3c94:	af00      	add	r7, sp, #0
    3c96:	0002      	movs	r2, r0
    3c98:	6039      	str	r1, [r7, #0]
    3c9a:	1dfb      	adds	r3, r7, #7
    3c9c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    3c9e:	4b13      	ldr	r3, [pc, #76]	; (3cec <_sercom_set_handler+0x5c>)
    3ca0:	781b      	ldrb	r3, [r3, #0]
    3ca2:	2201      	movs	r2, #1
    3ca4:	4053      	eors	r3, r2
    3ca6:	b2db      	uxtb	r3, r3
    3ca8:	2b00      	cmp	r3, #0
    3caa:	d015      	beq.n	3cd8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3cac:	2300      	movs	r3, #0
    3cae:	60fb      	str	r3, [r7, #12]
    3cb0:	e00c      	b.n	3ccc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3cb2:	4b0f      	ldr	r3, [pc, #60]	; (3cf0 <_sercom_set_handler+0x60>)
    3cb4:	68fa      	ldr	r2, [r7, #12]
    3cb6:	0092      	lsls	r2, r2, #2
    3cb8:	490e      	ldr	r1, [pc, #56]	; (3cf4 <_sercom_set_handler+0x64>)
    3cba:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3cbc:	4b0e      	ldr	r3, [pc, #56]	; (3cf8 <_sercom_set_handler+0x68>)
    3cbe:	68fa      	ldr	r2, [r7, #12]
    3cc0:	0092      	lsls	r2, r2, #2
    3cc2:	2100      	movs	r1, #0
    3cc4:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3cc6:	68fb      	ldr	r3, [r7, #12]
    3cc8:	3301      	adds	r3, #1
    3cca:	60fb      	str	r3, [r7, #12]
    3ccc:	68fb      	ldr	r3, [r7, #12]
    3cce:	2b05      	cmp	r3, #5
    3cd0:	d9ef      	bls.n	3cb2 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    3cd2:	4b06      	ldr	r3, [pc, #24]	; (3cec <_sercom_set_handler+0x5c>)
    3cd4:	2201      	movs	r2, #1
    3cd6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3cd8:	1dfb      	adds	r3, r7, #7
    3cda:	781a      	ldrb	r2, [r3, #0]
    3cdc:	4b04      	ldr	r3, [pc, #16]	; (3cf0 <_sercom_set_handler+0x60>)
    3cde:	0092      	lsls	r2, r2, #2
    3ce0:	6839      	ldr	r1, [r7, #0]
    3ce2:	50d1      	str	r1, [r2, r3]
}
    3ce4:	46c0      	nop			; (mov r8, r8)
    3ce6:	46bd      	mov	sp, r7
    3ce8:	b004      	add	sp, #16
    3cea:	bd80      	pop	{r7, pc}
    3cec:	20000522 	.word	0x20000522
    3cf0:	20000524 	.word	0x20000524
    3cf4:	00003c2d 	.word	0x00003c2d
    3cf8:	200005b4 	.word	0x200005b4

00003cfc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3cfc:	b590      	push	{r4, r7, lr}
    3cfe:	b085      	sub	sp, #20
    3d00:	af00      	add	r7, sp, #0
    3d02:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3d04:	2308      	movs	r3, #8
    3d06:	18fa      	adds	r2, r7, r3
    3d08:	4b0c      	ldr	r3, [pc, #48]	; (3d3c <_sercom_get_interrupt_vector+0x40>)
    3d0a:	0010      	movs	r0, r2
    3d0c:	0019      	movs	r1, r3
    3d0e:	2306      	movs	r3, #6
    3d10:	001a      	movs	r2, r3
    3d12:	4b0b      	ldr	r3, [pc, #44]	; (3d40 <_sercom_get_interrupt_vector+0x44>)
    3d14:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3d16:	230f      	movs	r3, #15
    3d18:	18fc      	adds	r4, r7, r3
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	0018      	movs	r0, r3
    3d1e:	4b09      	ldr	r3, [pc, #36]	; (3d44 <_sercom_get_interrupt_vector+0x48>)
    3d20:	4798      	blx	r3
    3d22:	0003      	movs	r3, r0
    3d24:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3d26:	230f      	movs	r3, #15
    3d28:	18fb      	adds	r3, r7, r3
    3d2a:	781b      	ldrb	r3, [r3, #0]
    3d2c:	2208      	movs	r2, #8
    3d2e:	18ba      	adds	r2, r7, r2
    3d30:	5cd3      	ldrb	r3, [r2, r3]
    3d32:	b25b      	sxtb	r3, r3
}
    3d34:	0018      	movs	r0, r3
    3d36:	46bd      	mov	sp, r7
    3d38:	b005      	add	sp, #20
    3d3a:	bd90      	pop	{r4, r7, pc}
    3d3c:	000082dc 	.word	0x000082dc
    3d40:	000068cd 	.word	0x000068cd
    3d44:	00003c41 	.word	0x00003c41

00003d48 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3d48:	b580      	push	{r7, lr}
    3d4a:	af00      	add	r7, sp, #0
    3d4c:	4b03      	ldr	r3, [pc, #12]	; (3d5c <SERCOM0_Handler+0x14>)
    3d4e:	681b      	ldr	r3, [r3, #0]
    3d50:	2000      	movs	r0, #0
    3d52:	4798      	blx	r3
    3d54:	46c0      	nop			; (mov r8, r8)
    3d56:	46bd      	mov	sp, r7
    3d58:	bd80      	pop	{r7, pc}
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	20000524 	.word	0x20000524

00003d60 <SERCOM1_Handler>:
    3d60:	b580      	push	{r7, lr}
    3d62:	af00      	add	r7, sp, #0
    3d64:	4b03      	ldr	r3, [pc, #12]	; (3d74 <SERCOM1_Handler+0x14>)
    3d66:	685b      	ldr	r3, [r3, #4]
    3d68:	2001      	movs	r0, #1
    3d6a:	4798      	blx	r3
    3d6c:	46c0      	nop			; (mov r8, r8)
    3d6e:	46bd      	mov	sp, r7
    3d70:	bd80      	pop	{r7, pc}
    3d72:	46c0      	nop			; (mov r8, r8)
    3d74:	20000524 	.word	0x20000524

00003d78 <SERCOM2_Handler>:
    3d78:	b580      	push	{r7, lr}
    3d7a:	af00      	add	r7, sp, #0
    3d7c:	4b03      	ldr	r3, [pc, #12]	; (3d8c <SERCOM2_Handler+0x14>)
    3d7e:	689b      	ldr	r3, [r3, #8]
    3d80:	2002      	movs	r0, #2
    3d82:	4798      	blx	r3
    3d84:	46c0      	nop			; (mov r8, r8)
    3d86:	46bd      	mov	sp, r7
    3d88:	bd80      	pop	{r7, pc}
    3d8a:	46c0      	nop			; (mov r8, r8)
    3d8c:	20000524 	.word	0x20000524

00003d90 <SERCOM3_Handler>:
    3d90:	b580      	push	{r7, lr}
    3d92:	af00      	add	r7, sp, #0
    3d94:	4b03      	ldr	r3, [pc, #12]	; (3da4 <SERCOM3_Handler+0x14>)
    3d96:	68db      	ldr	r3, [r3, #12]
    3d98:	2003      	movs	r0, #3
    3d9a:	4798      	blx	r3
    3d9c:	46c0      	nop			; (mov r8, r8)
    3d9e:	46bd      	mov	sp, r7
    3da0:	bd80      	pop	{r7, pc}
    3da2:	46c0      	nop			; (mov r8, r8)
    3da4:	20000524 	.word	0x20000524

00003da8 <SERCOM4_Handler>:
    3da8:	b580      	push	{r7, lr}
    3daa:	af00      	add	r7, sp, #0
    3dac:	4b03      	ldr	r3, [pc, #12]	; (3dbc <SERCOM4_Handler+0x14>)
    3dae:	691b      	ldr	r3, [r3, #16]
    3db0:	2004      	movs	r0, #4
    3db2:	4798      	blx	r3
    3db4:	46c0      	nop			; (mov r8, r8)
    3db6:	46bd      	mov	sp, r7
    3db8:	bd80      	pop	{r7, pc}
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	20000524 	.word	0x20000524

00003dc0 <SERCOM5_Handler>:
    3dc0:	b580      	push	{r7, lr}
    3dc2:	af00      	add	r7, sp, #0
    3dc4:	4b03      	ldr	r3, [pc, #12]	; (3dd4 <SERCOM5_Handler+0x14>)
    3dc6:	695b      	ldr	r3, [r3, #20]
    3dc8:	2005      	movs	r0, #5
    3dca:	4798      	blx	r3
    3dcc:	46c0      	nop			; (mov r8, r8)
    3dce:	46bd      	mov	sp, r7
    3dd0:	bd80      	pop	{r7, pc}
    3dd2:	46c0      	nop			; (mov r8, r8)
    3dd4:	20000524 	.word	0x20000524

00003dd8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	b082      	sub	sp, #8
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3de0:	687b      	ldr	r3, [r7, #4]
    3de2:	2280      	movs	r2, #128	; 0x80
    3de4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3de6:	687b      	ldr	r3, [r7, #4]
    3de8:	2200      	movs	r2, #0
    3dea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3dec:	687b      	ldr	r3, [r7, #4]
    3dee:	2201      	movs	r2, #1
    3df0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3df2:	687b      	ldr	r3, [r7, #4]
    3df4:	2200      	movs	r2, #0
    3df6:	70da      	strb	r2, [r3, #3]
}
    3df8:	46c0      	nop			; (mov r8, r8)
    3dfa:	46bd      	mov	sp, r7
    3dfc:	b002      	add	sp, #8
    3dfe:	bd80      	pop	{r7, pc}

00003e00 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3e00:	b580      	push	{r7, lr}
    3e02:	b084      	sub	sp, #16
    3e04:	af00      	add	r7, sp, #0
    3e06:	0002      	movs	r2, r0
    3e08:	1dfb      	adds	r3, r7, #7
    3e0a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3e0c:	230f      	movs	r3, #15
    3e0e:	18fb      	adds	r3, r7, r3
    3e10:	1dfa      	adds	r2, r7, #7
    3e12:	7812      	ldrb	r2, [r2, #0]
    3e14:	09d2      	lsrs	r2, r2, #7
    3e16:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3e18:	230e      	movs	r3, #14
    3e1a:	18fb      	adds	r3, r7, r3
    3e1c:	1dfa      	adds	r2, r7, #7
    3e1e:	7812      	ldrb	r2, [r2, #0]
    3e20:	0952      	lsrs	r2, r2, #5
    3e22:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3e24:	4b0d      	ldr	r3, [pc, #52]	; (3e5c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3e26:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3e28:	230f      	movs	r3, #15
    3e2a:	18fb      	adds	r3, r7, r3
    3e2c:	781b      	ldrb	r3, [r3, #0]
    3e2e:	2b00      	cmp	r3, #0
    3e30:	d10f      	bne.n	3e52 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3e32:	230f      	movs	r3, #15
    3e34:	18fb      	adds	r3, r7, r3
    3e36:	781b      	ldrb	r3, [r3, #0]
    3e38:	009b      	lsls	r3, r3, #2
    3e3a:	2210      	movs	r2, #16
    3e3c:	4694      	mov	ip, r2
    3e3e:	44bc      	add	ip, r7
    3e40:	4463      	add	r3, ip
    3e42:	3b08      	subs	r3, #8
    3e44:	681a      	ldr	r2, [r3, #0]
    3e46:	230e      	movs	r3, #14
    3e48:	18fb      	adds	r3, r7, r3
    3e4a:	781b      	ldrb	r3, [r3, #0]
    3e4c:	01db      	lsls	r3, r3, #7
    3e4e:	18d3      	adds	r3, r2, r3
    3e50:	e000      	b.n	3e54 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3e52:	2300      	movs	r3, #0
	}
}
    3e54:	0018      	movs	r0, r3
    3e56:	46bd      	mov	sp, r7
    3e58:	b004      	add	sp, #16
    3e5a:	bd80      	pop	{r7, pc}
    3e5c:	41004400 	.word	0x41004400

00003e60 <system_pinmux_pin_get_mux_position>:
 *
 * \return Currently selected peripheral index on the specified pin.
 */
static inline uint8_t system_pinmux_pin_get_mux_position(
		const uint8_t gpio_pin)
{
    3e60:	b580      	push	{r7, lr}
    3e62:	b086      	sub	sp, #24
    3e64:	af00      	add	r7, sp, #0
    3e66:	0002      	movs	r2, r0
    3e68:	1dfb      	adds	r3, r7, #7
    3e6a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3e6c:	1dfb      	adds	r3, r7, #7
    3e6e:	781b      	ldrb	r3, [r3, #0]
    3e70:	0018      	movs	r0, r3
    3e72:	4b19      	ldr	r3, [pc, #100]	; (3ed8 <system_pinmux_pin_get_mux_position+0x78>)
    3e74:	4798      	blx	r3
    3e76:	0003      	movs	r3, r0
    3e78:	617b      	str	r3, [r7, #20]
	uint32_t pin_index = (gpio_pin % 32);
    3e7a:	1dfb      	adds	r3, r7, #7
    3e7c:	781b      	ldrb	r3, [r3, #0]
    3e7e:	221f      	movs	r2, #31
    3e80:	4013      	ands	r3, r2
    3e82:	613b      	str	r3, [r7, #16]

	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    3e84:	697a      	ldr	r2, [r7, #20]
    3e86:	2140      	movs	r1, #64	; 0x40
    3e88:	693b      	ldr	r3, [r7, #16]
    3e8a:	18d3      	adds	r3, r2, r3
    3e8c:	185b      	adds	r3, r3, r1
    3e8e:	781b      	ldrb	r3, [r3, #0]
    3e90:	b2db      	uxtb	r3, r3
    3e92:	001a      	movs	r2, r3
    3e94:	2301      	movs	r3, #1
    3e96:	4013      	ands	r3, r2
    3e98:	d101      	bne.n	3e9e <system_pinmux_pin_get_mux_position+0x3e>
		return SYSTEM_PINMUX_GPIO;
    3e9a:	2380      	movs	r3, #128	; 0x80
    3e9c:	e018      	b.n	3ed0 <system_pinmux_pin_get_mux_position+0x70>
	}

	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    3e9e:	693b      	ldr	r3, [r7, #16]
    3ea0:	085b      	lsrs	r3, r3, #1
    3ea2:	697a      	ldr	r2, [r7, #20]
    3ea4:	2130      	movs	r1, #48	; 0x30
    3ea6:	18d3      	adds	r3, r2, r3
    3ea8:	185b      	adds	r3, r3, r1
    3eaa:	781b      	ldrb	r3, [r3, #0]
    3eac:	b2db      	uxtb	r3, r3
    3eae:	60fb      	str	r3, [r7, #12]

	if (pin_index & 1) {
    3eb0:	693b      	ldr	r3, [r7, #16]
    3eb2:	2201      	movs	r2, #1
    3eb4:	4013      	ands	r3, r2
    3eb6:	d006      	beq.n	3ec6 <system_pinmux_pin_get_mux_position+0x66>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    3eb8:	68fb      	ldr	r3, [r7, #12]
    3eba:	091b      	lsrs	r3, r3, #4
    3ebc:	b2db      	uxtb	r3, r3
    3ebe:	220f      	movs	r2, #15
    3ec0:	4013      	ands	r3, r2
    3ec2:	b2db      	uxtb	r3, r3
    3ec4:	e004      	b.n	3ed0 <system_pinmux_pin_get_mux_position+0x70>
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    3ec6:	68fb      	ldr	r3, [r7, #12]
    3ec8:	b2db      	uxtb	r3, r3
    3eca:	220f      	movs	r2, #15
    3ecc:	4013      	ands	r3, r2
    3ece:	b2db      	uxtb	r3, r3
	}
}
    3ed0:	0018      	movs	r0, r3
    3ed2:	46bd      	mov	sp, r7
    3ed4:	b006      	add	sp, #24
    3ed6:	bd80      	pop	{r7, pc}
    3ed8:	00003e01 	.word	0x00003e01

00003edc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3edc:	b580      	push	{r7, lr}
    3ede:	b082      	sub	sp, #8
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	0002      	movs	r2, r0
    3ee4:	1dfb      	adds	r3, r7, #7
    3ee6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3ee8:	1dfb      	adds	r3, r7, #7
    3eea:	781b      	ldrb	r3, [r3, #0]
    3eec:	0018      	movs	r0, r3
    3eee:	4b03      	ldr	r3, [pc, #12]	; (3efc <port_get_group_from_gpio_pin+0x20>)
    3ef0:	4798      	blx	r3
    3ef2:	0003      	movs	r3, r0
}
    3ef4:	0018      	movs	r0, r3
    3ef6:	46bd      	mov	sp, r7
    3ef8:	b002      	add	sp, #8
    3efa:	bd80      	pop	{r7, pc}
    3efc:	00003e01 	.word	0x00003e01

00003f00 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to.
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3f00:	b580      	push	{r7, lr}
    3f02:	b084      	sub	sp, #16
    3f04:	af00      	add	r7, sp, #0
    3f06:	0002      	movs	r2, r0
    3f08:	1dfb      	adds	r3, r7, #7
    3f0a:	701a      	strb	r2, [r3, #0]
    3f0c:	1dbb      	adds	r3, r7, #6
    3f0e:	1c0a      	adds	r2, r1, #0
    3f10:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3f12:	1dfb      	adds	r3, r7, #7
    3f14:	781b      	ldrb	r3, [r3, #0]
    3f16:	0018      	movs	r0, r3
    3f18:	4b0d      	ldr	r3, [pc, #52]	; (3f50 <port_pin_set_output_level+0x50>)
    3f1a:	4798      	blx	r3
    3f1c:	0003      	movs	r3, r0
    3f1e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3f20:	1dfb      	adds	r3, r7, #7
    3f22:	781b      	ldrb	r3, [r3, #0]
    3f24:	221f      	movs	r2, #31
    3f26:	4013      	ands	r3, r2
    3f28:	2201      	movs	r2, #1
    3f2a:	409a      	lsls	r2, r3
    3f2c:	0013      	movs	r3, r2
    3f2e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3f30:	1dbb      	adds	r3, r7, #6
    3f32:	781b      	ldrb	r3, [r3, #0]
    3f34:	2b00      	cmp	r3, #0
    3f36:	d003      	beq.n	3f40 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3f38:	68fb      	ldr	r3, [r7, #12]
    3f3a:	68ba      	ldr	r2, [r7, #8]
    3f3c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3f3e:	e002      	b.n	3f46 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3f40:	68fb      	ldr	r3, [r7, #12]
    3f42:	68ba      	ldr	r2, [r7, #8]
    3f44:	615a      	str	r2, [r3, #20]
	}
}
    3f46:	46c0      	nop			; (mov r8, r8)
    3f48:	46bd      	mov	sp, r7
    3f4a:	b004      	add	sp, #16
    3f4c:	bd80      	pop	{r7, pc}
    3f4e:	46c0      	nop			; (mov r8, r8)
    3f50:	00003edd 	.word	0x00003edd

00003f54 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3f54:	b580      	push	{r7, lr}
    3f56:	b082      	sub	sp, #8
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	2200      	movs	r2, #0
    3f60:	701a      	strb	r2, [r3, #0]
}
    3f62:	46c0      	nop			; (mov r8, r8)
    3f64:	46bd      	mov	sp, r7
    3f66:	b002      	add	sp, #8
    3f68:	bd80      	pop	{r7, pc}
    3f6a:	46c0      	nop			; (mov r8, r8)

00003f6c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3f6c:	b580      	push	{r7, lr}
    3f6e:	b082      	sub	sp, #8
    3f70:	af00      	add	r7, sp, #0
    3f72:	0002      	movs	r2, r0
    3f74:	6039      	str	r1, [r7, #0]
    3f76:	1dfb      	adds	r3, r7, #7
    3f78:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3f7a:	1dfb      	adds	r3, r7, #7
    3f7c:	781b      	ldrb	r3, [r3, #0]
    3f7e:	2b01      	cmp	r3, #1
    3f80:	d00a      	beq.n	3f98 <system_apb_clock_set_mask+0x2c>
    3f82:	2b02      	cmp	r3, #2
    3f84:	d00f      	beq.n	3fa6 <system_apb_clock_set_mask+0x3a>
    3f86:	2b00      	cmp	r3, #0
    3f88:	d114      	bne.n	3fb4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3f8a:	4b0e      	ldr	r3, [pc, #56]	; (3fc4 <system_apb_clock_set_mask+0x58>)
    3f8c:	4a0d      	ldr	r2, [pc, #52]	; (3fc4 <system_apb_clock_set_mask+0x58>)
    3f8e:	6991      	ldr	r1, [r2, #24]
    3f90:	683a      	ldr	r2, [r7, #0]
    3f92:	430a      	orrs	r2, r1
    3f94:	619a      	str	r2, [r3, #24]
			break;
    3f96:	e00f      	b.n	3fb8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3f98:	4b0a      	ldr	r3, [pc, #40]	; (3fc4 <system_apb_clock_set_mask+0x58>)
    3f9a:	4a0a      	ldr	r2, [pc, #40]	; (3fc4 <system_apb_clock_set_mask+0x58>)
    3f9c:	69d1      	ldr	r1, [r2, #28]
    3f9e:	683a      	ldr	r2, [r7, #0]
    3fa0:	430a      	orrs	r2, r1
    3fa2:	61da      	str	r2, [r3, #28]
			break;
    3fa4:	e008      	b.n	3fb8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3fa6:	4b07      	ldr	r3, [pc, #28]	; (3fc4 <system_apb_clock_set_mask+0x58>)
    3fa8:	4a06      	ldr	r2, [pc, #24]	; (3fc4 <system_apb_clock_set_mask+0x58>)
    3faa:	6a11      	ldr	r1, [r2, #32]
    3fac:	683a      	ldr	r2, [r7, #0]
    3fae:	430a      	orrs	r2, r1
    3fb0:	621a      	str	r2, [r3, #32]
			break;
    3fb2:	e001      	b.n	3fb8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3fb4:	2317      	movs	r3, #23
    3fb6:	e000      	b.n	3fba <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3fb8:	2300      	movs	r3, #0
}
    3fba:	0018      	movs	r0, r3
    3fbc:	46bd      	mov	sp, r7
    3fbe:	b002      	add	sp, #8
    3fc0:	bd80      	pop	{r7, pc}
    3fc2:	46c0      	nop			; (mov r8, r8)
    3fc4:	40000400 	.word	0x40000400

00003fc8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3fc8:	b580      	push	{r7, lr}
    3fca:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3fcc:	4b05      	ldr	r3, [pc, #20]	; (3fe4 <system_is_debugger_present+0x1c>)
    3fce:	789b      	ldrb	r3, [r3, #2]
    3fd0:	b2db      	uxtb	r3, r3
    3fd2:	001a      	movs	r2, r3
    3fd4:	2302      	movs	r3, #2
    3fd6:	4013      	ands	r3, r2
    3fd8:	1e5a      	subs	r2, r3, #1
    3fda:	4193      	sbcs	r3, r2
    3fdc:	b2db      	uxtb	r3, r3
}
    3fde:	0018      	movs	r0, r3
    3fe0:	46bd      	mov	sp, r7
    3fe2:	bd80      	pop	{r7, pc}
    3fe4:	41002000 	.word	0x41002000

00003fe8 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    3fe8:	b580      	push	{r7, lr}
    3fea:	b084      	sub	sp, #16
    3fec:	af00      	add	r7, sp, #0
    3fee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3ff0:	687b      	ldr	r3, [r7, #4]
    3ff2:	681b      	ldr	r3, [r3, #0]
    3ff4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3ff6:	68fb      	ldr	r3, [r7, #12]
    3ff8:	7e1b      	ldrb	r3, [r3, #24]
    3ffa:	b2db      	uxtb	r3, r3
    3ffc:	001a      	movs	r2, r3
    3ffe:	2301      	movs	r3, #1
    4000:	4013      	ands	r3, r2
    4002:	1e5a      	subs	r2, r3, #1
    4004:	4193      	sbcs	r3, r2
    4006:	b2db      	uxtb	r3, r3
}
    4008:	0018      	movs	r0, r3
    400a:	46bd      	mov	sp, r7
    400c:	b004      	add	sp, #16
    400e:	bd80      	pop	{r7, pc}

00004010 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    4010:	b580      	push	{r7, lr}
    4012:	b084      	sub	sp, #16
    4014:	af00      	add	r7, sp, #0
    4016:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4018:	687b      	ldr	r3, [r7, #4]
    401a:	681b      	ldr	r3, [r3, #0]
    401c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    401e:	68fb      	ldr	r3, [r7, #12]
    4020:	7e1b      	ldrb	r3, [r3, #24]
    4022:	b2db      	uxtb	r3, r3
    4024:	001a      	movs	r2, r3
    4026:	2304      	movs	r3, #4
    4028:	4013      	ands	r3, r2
    402a:	1e5a      	subs	r2, r3, #1
    402c:	4193      	sbcs	r3, r2
    402e:	b2db      	uxtb	r3, r3
}
    4030:	0018      	movs	r0, r3
    4032:	46bd      	mov	sp, r7
    4034:	b004      	add	sp, #16
    4036:	bd80      	pop	{r7, pc}

00004038 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    4038:	b580      	push	{r7, lr}
    403a:	b084      	sub	sp, #16
    403c:	af00      	add	r7, sp, #0
    403e:	6078      	str	r0, [r7, #4]
    4040:	000a      	movs	r2, r1
    4042:	1cbb      	adds	r3, r7, #2
    4044:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4046:	687b      	ldr	r3, [r7, #4]
    4048:	681b      	ldr	r3, [r3, #0]
    404a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    404c:	687b      	ldr	r3, [r7, #4]
    404e:	0018      	movs	r0, r3
    4050:	4b0a      	ldr	r3, [pc, #40]	; (407c <spi_write+0x44>)
    4052:	4798      	blx	r3
    4054:	0003      	movs	r3, r0
    4056:	001a      	movs	r2, r3
    4058:	2301      	movs	r3, #1
    405a:	4053      	eors	r3, r2
    405c:	b2db      	uxtb	r3, r3
    405e:	2b00      	cmp	r3, #0
    4060:	d001      	beq.n	4066 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    4062:	2305      	movs	r3, #5
    4064:	e006      	b.n	4074 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4066:	1cbb      	adds	r3, r7, #2
    4068:	881b      	ldrh	r3, [r3, #0]
    406a:	05db      	lsls	r3, r3, #23
    406c:	0dda      	lsrs	r2, r3, #23
    406e:	68fb      	ldr	r3, [r7, #12]
    4070:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    4072:	2300      	movs	r3, #0
}
    4074:	0018      	movs	r0, r3
    4076:	46bd      	mov	sp, r7
    4078:	b004      	add	sp, #16
    407a:	bd80      	pop	{r7, pc}
    407c:	00003fe9 	.word	0x00003fe9

00004080 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    4080:	b580      	push	{r7, lr}
    4082:	b084      	sub	sp, #16
    4084:	af00      	add	r7, sp, #0
    4086:	6078      	str	r0, [r7, #4]
    4088:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    408a:	687b      	ldr	r3, [r7, #4]
    408c:	681b      	ldr	r3, [r3, #0]
    408e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4090:	687b      	ldr	r3, [r7, #4]
    4092:	0018      	movs	r0, r3
    4094:	4b1d      	ldr	r3, [pc, #116]	; (410c <spi_read+0x8c>)
    4096:	4798      	blx	r3
    4098:	0003      	movs	r3, r0
    409a:	001a      	movs	r2, r3
    409c:	2301      	movs	r3, #1
    409e:	4053      	eors	r3, r2
    40a0:	b2db      	uxtb	r3, r3
    40a2:	2b00      	cmp	r3, #0
    40a4:	d001      	beq.n	40aa <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    40a6:	2310      	movs	r3, #16
    40a8:	e02c      	b.n	4104 <spi_read+0x84>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    40aa:	230f      	movs	r3, #15
    40ac:	18fb      	adds	r3, r7, r3
    40ae:	2200      	movs	r2, #0
    40b0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    40b2:	68bb      	ldr	r3, [r7, #8]
    40b4:	8b5b      	ldrh	r3, [r3, #26]
    40b6:	b29b      	uxth	r3, r3
    40b8:	001a      	movs	r2, r3
    40ba:	2304      	movs	r3, #4
    40bc:	4013      	ands	r3, r2
    40be:	d00b      	beq.n	40d8 <spi_read+0x58>
		retval = STATUS_ERR_OVERFLOW;
    40c0:	230f      	movs	r3, #15
    40c2:	18fb      	adds	r3, r7, r3
    40c4:	221e      	movs	r2, #30
    40c6:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    40c8:	68bb      	ldr	r3, [r7, #8]
    40ca:	8b5b      	ldrh	r3, [r3, #26]
    40cc:	b29b      	uxth	r3, r3
    40ce:	2204      	movs	r2, #4
    40d0:	4313      	orrs	r3, r2
    40d2:	b29a      	uxth	r2, r3
    40d4:	68bb      	ldr	r3, [r7, #8]
    40d6:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	799b      	ldrb	r3, [r3, #6]
    40dc:	2b01      	cmp	r3, #1
    40de:	d108      	bne.n	40f2 <spi_read+0x72>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    40e0:	68bb      	ldr	r3, [r7, #8]
    40e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40e4:	b29b      	uxth	r3, r3
    40e6:	05db      	lsls	r3, r3, #23
    40e8:	0ddb      	lsrs	r3, r3, #23
    40ea:	b29a      	uxth	r2, r3
    40ec:	683b      	ldr	r3, [r7, #0]
    40ee:	801a      	strh	r2, [r3, #0]
    40f0:	e005      	b.n	40fe <spi_read+0x7e>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    40f2:	68bb      	ldr	r3, [r7, #8]
    40f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40f6:	b2db      	uxtb	r3, r3
    40f8:	b29a      	uxth	r2, r3
    40fa:	683b      	ldr	r3, [r7, #0]
    40fc:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    40fe:	230f      	movs	r3, #15
    4100:	18fb      	adds	r3, r7, r3
    4102:	781b      	ldrb	r3, [r3, #0]
}
    4104:	0018      	movs	r0, r3
    4106:	46bd      	mov	sp, r7
    4108:	b004      	add	sp, #16
    410a:	bd80      	pop	{r7, pc}
    410c:	00004011 	.word	0x00004011

00004110 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    4110:	b590      	push	{r4, r7, lr}
    4112:	b093      	sub	sp, #76	; 0x4c
    4114:	af00      	add	r7, sp, #0
    4116:	6078      	str	r0, [r7, #4]
    4118:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    411a:	687b      	ldr	r3, [r7, #4]
    411c:	681b      	ldr	r3, [r3, #0]
    411e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    4120:	687b      	ldr	r3, [r7, #4]
    4122:	681b      	ldr	r3, [r3, #0]
    4124:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4126:	231c      	movs	r3, #28
    4128:	18fb      	adds	r3, r7, r3
    412a:	0018      	movs	r0, r3
    412c:	4b81      	ldr	r3, [pc, #516]	; (4334 <_spi_set_config+0x224>)
    412e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4130:	231c      	movs	r3, #28
    4132:	18fb      	adds	r3, r7, r3
    4134:	2200      	movs	r2, #0
    4136:	705a      	strb	r2, [r3, #1]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4138:	683b      	ldr	r3, [r7, #0]
    413a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    413c:	230c      	movs	r3, #12
    413e:	18fb      	adds	r3, r7, r3
    4140:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4142:	683b      	ldr	r3, [r7, #0]
    4144:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    4146:	230c      	movs	r3, #12
    4148:	18fb      	adds	r3, r7, r3
    414a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    414c:	683b      	ldr	r3, [r7, #0]
    414e:	6b1a      	ldr	r2, [r3, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    4150:	230c      	movs	r3, #12
    4152:	18fb      	adds	r3, r7, r3
    4154:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4156:	683b      	ldr	r3, [r7, #0]
    4158:	6b5a      	ldr	r2, [r3, #52]	; 0x34

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
    415a:	230c      	movs	r3, #12
    415c:	18fb      	adds	r3, r7, r3
    415e:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4160:	2347      	movs	r3, #71	; 0x47
    4162:	18fb      	adds	r3, r7, r3
    4164:	2200      	movs	r2, #0
    4166:	701a      	strb	r2, [r3, #0]
    4168:	e02c      	b.n	41c4 <_spi_set_config+0xb4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    416a:	2347      	movs	r3, #71	; 0x47
    416c:	18fb      	adds	r3, r7, r3
    416e:	781a      	ldrb	r2, [r3, #0]
    4170:	230c      	movs	r3, #12
    4172:	18fb      	adds	r3, r7, r3
    4174:	0092      	lsls	r2, r2, #2
    4176:	58d3      	ldr	r3, [r2, r3]
    4178:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    417a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    417c:	2b00      	cmp	r3, #0
    417e:	d109      	bne.n	4194 <_spi_set_config+0x84>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4180:	2347      	movs	r3, #71	; 0x47
    4182:	18fb      	adds	r3, r7, r3
    4184:	781a      	ldrb	r2, [r3, #0]
    4186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4188:	0011      	movs	r1, r2
    418a:	0018      	movs	r0, r3
    418c:	4b6a      	ldr	r3, [pc, #424]	; (4338 <_spi_set_config+0x228>)
    418e:	4798      	blx	r3
    4190:	0003      	movs	r3, r0
    4192:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4196:	3301      	adds	r3, #1
    4198:	d00d      	beq.n	41b6 <_spi_set_config+0xa6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    419a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    419c:	b2da      	uxtb	r2, r3
    419e:	231c      	movs	r3, #28
    41a0:	18fb      	adds	r3, r7, r3
    41a2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    41a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    41a6:	0c1b      	lsrs	r3, r3, #16
    41a8:	b2db      	uxtb	r3, r3
    41aa:	221c      	movs	r2, #28
    41ac:	18ba      	adds	r2, r7, r2
    41ae:	0011      	movs	r1, r2
    41b0:	0018      	movs	r0, r3
    41b2:	4b62      	ldr	r3, [pc, #392]	; (433c <_spi_set_config+0x22c>)
    41b4:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    41b6:	2347      	movs	r3, #71	; 0x47
    41b8:	18fb      	adds	r3, r7, r3
    41ba:	781a      	ldrb	r2, [r3, #0]
    41bc:	2347      	movs	r3, #71	; 0x47
    41be:	18fb      	adds	r3, r7, r3
    41c0:	3201      	adds	r2, #1
    41c2:	701a      	strb	r2, [r3, #0]
    41c4:	2347      	movs	r3, #71	; 0x47
    41c6:	18fb      	adds	r3, r7, r3
    41c8:	781b      	ldrb	r3, [r3, #0]
    41ca:	2b03      	cmp	r3, #3
    41cc:	d9cd      	bls.n	416a <_spi_set_config+0x5a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    41ce:	683b      	ldr	r3, [r7, #0]
    41d0:	781a      	ldrb	r2, [r3, #0]
    41d2:	687b      	ldr	r3, [r7, #4]
    41d4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    41d6:	683b      	ldr	r3, [r7, #0]
    41d8:	7c1a      	ldrb	r2, [r3, #16]
    41da:	687b      	ldr	r3, [r7, #4]
    41dc:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    41de:	683b      	ldr	r3, [r7, #0]
    41e0:	7c9a      	ldrb	r2, [r3, #18]
    41e2:	687b      	ldr	r3, [r7, #4]
    41e4:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    41e6:	683b      	ldr	r3, [r7, #0]
    41e8:	7d1a      	ldrb	r2, [r3, #20]
    41ea:	687b      	ldr	r3, [r7, #4]
    41ec:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    41ee:	230a      	movs	r3, #10
    41f0:	18fb      	adds	r3, r7, r3
    41f2:	2200      	movs	r2, #0
    41f4:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    41f6:	2300      	movs	r3, #0
    41f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    41fa:	2300      	movs	r3, #0
    41fc:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    41fe:	683b      	ldr	r3, [r7, #0]
    4200:	781b      	ldrb	r3, [r3, #0]
    4202:	2b01      	cmp	r3, #1
    4204:	d129      	bne.n	425a <_spi_set_config+0x14a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4206:	687b      	ldr	r3, [r7, #4]
    4208:	681b      	ldr	r3, [r3, #0]
    420a:	0018      	movs	r0, r3
    420c:	4b4c      	ldr	r3, [pc, #304]	; (4340 <_spi_set_config+0x230>)
    420e:	4798      	blx	r3
    4210:	0003      	movs	r3, r0
    4212:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4216:	3314      	adds	r3, #20
    4218:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    421c:	b2db      	uxtb	r3, r3
    421e:	0018      	movs	r0, r3
    4220:	4b48      	ldr	r3, [pc, #288]	; (4344 <_spi_set_config+0x234>)
    4222:	4798      	blx	r3
    4224:	0003      	movs	r3, r0
    4226:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4228:	683b      	ldr	r3, [r7, #0]
    422a:	699b      	ldr	r3, [r3, #24]
    422c:	2223      	movs	r2, #35	; 0x23
    422e:	18bc      	adds	r4, r7, r2
    4230:	220a      	movs	r2, #10
    4232:	18ba      	adds	r2, r7, r2
    4234:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4236:	0018      	movs	r0, r3
    4238:	4b43      	ldr	r3, [pc, #268]	; (4348 <_spi_set_config+0x238>)
    423a:	4798      	blx	r3
    423c:	0003      	movs	r3, r0
    423e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    4240:	2323      	movs	r3, #35	; 0x23
    4242:	18fb      	adds	r3, r7, r3
    4244:	781b      	ldrb	r3, [r3, #0]
    4246:	2b00      	cmp	r3, #0
    4248:	d001      	beq.n	424e <_spi_set_config+0x13e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    424a:	2317      	movs	r3, #23
    424c:	e06d      	b.n	432a <_spi_set_config+0x21a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    424e:	230a      	movs	r3, #10
    4250:	18fb      	adds	r3, r7, r3
    4252:	881b      	ldrh	r3, [r3, #0]
    4254:	b2da      	uxtb	r2, r3
    4256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4258:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    425a:	683b      	ldr	r3, [r7, #0]
    425c:	781b      	ldrb	r3, [r3, #0]
    425e:	2b00      	cmp	r3, #0
    4260:	d11a      	bne.n	4298 <_spi_set_config+0x188>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
    4262:	683b      	ldr	r3, [r7, #0]
    4264:	699b      	ldr	r3, [r3, #24]
    4266:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
    4268:	683b      	ldr	r3, [r7, #0]
    426a:	8b9b      	ldrh	r3, [r3, #28]
    426c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4272:	683a      	ldr	r2, [r7, #0]
    4274:	7f92      	ldrb	r2, [r2, #30]
    4276:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    4278:	683a      	ldr	r2, [r7, #0]
    427a:	7fd2      	ldrb	r2, [r2, #31]
    427c:	0412      	lsls	r2, r2, #16
		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    427e:	430a      	orrs	r2, r1

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
    4280:	431a      	orrs	r2, r3
    4282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4284:	625a      	str	r2, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);

		if (config->mode_specific.slave.preload_enable) {
    4286:	683b      	ldr	r3, [r7, #0]
    4288:	2220      	movs	r2, #32
    428a:	5c9b      	ldrb	r3, [r3, r2]
    428c:	2b00      	cmp	r3, #0
    428e:	d003      	beq.n	4298 <_spi_set_config+0x188>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    4290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4292:	2240      	movs	r2, #64	; 0x40
    4294:	4313      	orrs	r3, r2
    4296:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    4298:	683b      	ldr	r3, [r7, #0]
    429a:	685b      	ldr	r3, [r3, #4]
    429c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    429e:	4313      	orrs	r3, r2
    42a0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    42a2:	683b      	ldr	r3, [r7, #0]
    42a4:	689b      	ldr	r3, [r3, #8]
    42a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    42a8:	4313      	orrs	r3, r2
    42aa:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set mux setting */
	ctrla |= config->mux_setting;
    42ac:	683b      	ldr	r3, [r7, #0]
    42ae:	68db      	ldr	r3, [r3, #12]
    42b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    42b2:	4313      	orrs	r3, r2
    42b4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    42b6:	683b      	ldr	r3, [r7, #0]
    42b8:	7c1b      	ldrb	r3, [r3, #16]
    42ba:	001a      	movs	r2, r3
    42bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    42be:	4313      	orrs	r3, r2
    42c0:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    42c2:	683b      	ldr	r3, [r7, #0]
    42c4:	7c5b      	ldrb	r3, [r3, #17]
    42c6:	2b00      	cmp	r3, #0
    42c8:	d103      	bne.n	42d2 <_spi_set_config+0x1c2>
    42ca:	4b20      	ldr	r3, [pc, #128]	; (434c <_spi_set_config+0x23c>)
    42cc:	4798      	blx	r3
    42ce:	1e03      	subs	r3, r0, #0
    42d0:	d003      	beq.n	42da <_spi_set_config+0x1ca>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    42d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    42d4:	2280      	movs	r2, #128	; 0x80
    42d6:	4313      	orrs	r3, r2
    42d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    42da:	683b      	ldr	r3, [r7, #0]
    42dc:	7c9b      	ldrb	r3, [r3, #18]
    42de:	2b00      	cmp	r3, #0
    42e0:	d004      	beq.n	42ec <_spi_set_config+0x1dc>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    42e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    42e4:	2280      	movs	r2, #128	; 0x80
    42e6:	0292      	lsls	r2, r2, #10
    42e8:	4313      	orrs	r3, r2
    42ea:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    42ec:	683b      	ldr	r3, [r7, #0]
    42ee:	7cdb      	ldrb	r3, [r3, #19]
    42f0:	2b00      	cmp	r3, #0
    42f2:	d004      	beq.n	42fe <_spi_set_config+0x1ee>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    42f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    42f6:	2280      	movs	r2, #128	; 0x80
    42f8:	0092      	lsls	r2, r2, #2
    42fa:	4313      	orrs	r3, r2
    42fc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    42fe:	683b      	ldr	r3, [r7, #0]
    4300:	7d1b      	ldrb	r3, [r3, #20]
    4302:	2b00      	cmp	r3, #0
    4304:	d004      	beq.n	4310 <_spi_set_config+0x200>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4308:	2280      	movs	r2, #128	; 0x80
    430a:	0192      	lsls	r2, r2, #6
    430c:	4313      	orrs	r3, r2
    430e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    4310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4312:	681a      	ldr	r2, [r3, #0]
    4314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4316:	431a      	orrs	r2, r3
    4318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    431a:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    431c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    431e:	685a      	ldr	r2, [r3, #4]
    4320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4322:	431a      	orrs	r2, r3
    4324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4326:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    4328:	2300      	movs	r3, #0
}
    432a:	0018      	movs	r0, r3
    432c:	46bd      	mov	sp, r7
    432e:	b013      	add	sp, #76	; 0x4c
    4330:	bd90      	pop	{r4, r7, pc}
    4332:	46c0      	nop			; (mov r8, r8)
    4334:	00003dd9 	.word	0x00003dd9
    4338:	00003a71 	.word	0x00003a71
    433c:	00006301 	.word	0x00006301
    4340:	00003c41 	.word	0x00003c41
    4344:	00006141 	.word	0x00006141
    4348:	0000377d 	.word	0x0000377d
    434c:	00003fc9 	.word	0x00003fc9

00004350 <_spi_check_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_check_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    4350:	b590      	push	{r4, r7, lr}
    4352:	b091      	sub	sp, #68	; 0x44
    4354:	af00      	add	r7, sp, #0
    4356:	6078      	str	r0, [r7, #4]
    4358:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    435a:	687b      	ldr	r3, [r7, #4]
    435c:	681b      	ldr	r3, [r3, #0]
    435e:	62fb      	str	r3, [r7, #44]	; 0x2c
	Sercom *const hw = module->hw;
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	681b      	ldr	r3, [r3, #0]
    4364:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pad_pinmuxes[] = {
		config->pinmux_pad0, config->pinmux_pad1,
    4366:	683b      	ldr	r3, [r7, #0]
    4368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    436a:	230c      	movs	r3, #12
    436c:	18fb      	adds	r3, r7, r3
    436e:	601a      	str	r2, [r3, #0]
		config->pinmux_pad0, config->pinmux_pad1,
    4370:	683b      	ldr	r3, [r7, #0]
    4372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    4374:	230c      	movs	r3, #12
    4376:	18fb      	adds	r3, r7, r3
    4378:	605a      	str	r2, [r3, #4]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    437a:	683b      	ldr	r3, [r7, #0]
    437c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    437e:	230c      	movs	r3, #12
    4380:	18fb      	adds	r3, r7, r3
    4382:	609a      	str	r2, [r3, #8]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
    4384:	683b      	ldr	r3, [r7, #0]
    4386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
	Sercom *const hw = module->hw;

	uint32_t pad_pinmuxes[] = {
    4388:	230c      	movs	r3, #12
    438a:	18fb      	adds	r3, r7, r3
    438c:	60da      	str	r2, [r3, #12]
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    438e:	233f      	movs	r3, #63	; 0x3f
    4390:	18fb      	adds	r3, r7, r3
    4392:	2200      	movs	r2, #0
    4394:	701a      	strb	r2, [r3, #0]
    4396:	e030      	b.n	43fa <_spi_check_config+0xaa>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4398:	233f      	movs	r3, #63	; 0x3f
    439a:	18fb      	adds	r3, r7, r3
    439c:	781a      	ldrb	r2, [r3, #0]
    439e:	230c      	movs	r3, #12
    43a0:	18fb      	adds	r3, r7, r3
    43a2:	0092      	lsls	r2, r2, #2
    43a4:	58d3      	ldr	r3, [r2, r3]
    43a6:	63bb      	str	r3, [r7, #56]	; 0x38

		if (current_pinmux == PINMUX_DEFAULT) {
    43a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    43aa:	2b00      	cmp	r3, #0
    43ac:	d109      	bne.n	43c2 <_spi_check_config+0x72>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    43ae:	233f      	movs	r3, #63	; 0x3f
    43b0:	18fb      	adds	r3, r7, r3
    43b2:	781a      	ldrb	r2, [r3, #0]
    43b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    43b6:	0011      	movs	r1, r2
    43b8:	0018      	movs	r0, r3
    43ba:	4b6e      	ldr	r3, [pc, #440]	; (4574 <_spi_check_config+0x224>)
    43bc:	4798      	blx	r3
    43be:	0003      	movs	r3, r0
    43c0:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if (current_pinmux == PINMUX_UNUSED) {
    43c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    43c4:	3301      	adds	r3, #1
    43c6:	d010      	beq.n	43ea <_spi_check_config+0x9a>
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    43c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    43ca:	041b      	lsls	r3, r3, #16
    43cc:	0c1c      	lsrs	r4, r3, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    43ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    43d0:	0c1b      	lsrs	r3, r3, #16
    43d2:	b2db      	uxtb	r3, r3
    43d4:	0018      	movs	r0, r3
    43d6:	4b68      	ldr	r3, [pc, #416]	; (4578 <_spi_check_config+0x228>)
    43d8:	4798      	blx	r3
    43da:	0003      	movs	r3, r0

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
		}

		if ((current_pinmux & 0xFFFF) !=
    43dc:	429c      	cmp	r4, r3
    43de:	d005      	beq.n	43ec <_spi_check_config+0x9c>
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
			module->hw = NULL;
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	2200      	movs	r2, #0
    43e4:	601a      	str	r2, [r3, #0]
			return STATUS_ERR_DENIED;
    43e6:	231c      	movs	r3, #28
    43e8:	e0bf      	b.n	456a <_spi_check_config+0x21a>
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux == PINMUX_UNUSED) {
			continue;
    43ea:	46c0      	nop			; (mov r8, r8)
		config->pinmux_pad0, config->pinmux_pad1,
		config->pinmux_pad2, config->pinmux_pad3
	};

	/* Compare the current SERCOM pins against the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    43ec:	233f      	movs	r3, #63	; 0x3f
    43ee:	18fb      	adds	r3, r7, r3
    43f0:	781a      	ldrb	r2, [r3, #0]
    43f2:	233f      	movs	r3, #63	; 0x3f
    43f4:	18fb      	adds	r3, r7, r3
    43f6:	3201      	adds	r2, #1
    43f8:	701a      	strb	r2, [r3, #0]
    43fa:	233f      	movs	r3, #63	; 0x3f
    43fc:	18fb      	adds	r3, r7, r3
    43fe:	781b      	ldrb	r3, [r3, #0]
    4400:	2b03      	cmp	r3, #3
    4402:	d9c9      	bls.n	4398 <_spi_check_config+0x48>
	}

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to read BAUD register */
	uint16_t baud;
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    4404:	2013      	movs	r0, #19
    4406:	4b5d      	ldr	r3, [pc, #372]	; (457c <_spi_check_config+0x22c>)
    4408:	4798      	blx	r3
    440a:	0003      	movs	r3, r0
    440c:	627b      	str	r3, [r7, #36]	; 0x24
#  endif
	/* Value to read CTRLA, CTRLB and ADDR register */
	uint32_t ctrla = 0;
    440e:	2300      	movs	r3, #0
    4410:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t ctrlb = 0;
    4412:	2300      	movs	r3, #0
    4414:	633b      	str	r3, [r7, #48]	; 0x30
#  if CONF_SPI_SLAVE_ENABLE == true
	uint32_t addr = 0;
    4416:	2300      	movs	r3, #0
    4418:	623b      	str	r3, [r7, #32]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and compare it */
	if (config->mode == SPI_MODE_MASTER) {
    441a:	683b      	ldr	r3, [r7, #0]
    441c:	781b      	ldrb	r3, [r3, #0]
    441e:	2b01      	cmp	r3, #1
    4420:	d121      	bne.n	4466 <_spi_check_config+0x116>
		enum status_code error_code = _sercom_get_sync_baud_val(
    4422:	683b      	ldr	r3, [r7, #0]
    4424:	699b      	ldr	r3, [r3, #24]
    4426:	221f      	movs	r2, #31
    4428:	18bc      	adds	r4, r7, r2
    442a:	220a      	movs	r2, #10
    442c:	18ba      	adds	r2, r7, r2
    442e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4430:	0018      	movs	r0, r3
    4432:	4b53      	ldr	r3, [pc, #332]	; (4580 <_spi_check_config+0x230>)
    4434:	4798      	blx	r3
    4436:	0003      	movs	r3, r0
    4438:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				external_clock, &baud);

		if (error_code != STATUS_OK) {
    443a:	231f      	movs	r3, #31
    443c:	18fb      	adds	r3, r7, r3
    443e:	781b      	ldrb	r3, [r3, #0]
    4440:	2b00      	cmp	r3, #0
    4442:	d001      	beq.n	4448 <_spi_check_config+0xf8>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    4444:	2317      	movs	r3, #23
    4446:	e090      	b.n	456a <_spi_check_config+0x21a>
		}

		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    4448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    444a:	7b1b      	ldrb	r3, [r3, #12]
    444c:	b2da      	uxtb	r2, r3
    444e:	230a      	movs	r3, #10
    4450:	18fb      	adds	r3, r7, r3
    4452:	881b      	ldrh	r3, [r3, #0]
    4454:	b2db      	uxtb	r3, r3
    4456:	429a      	cmp	r2, r3
    4458:	d001      	beq.n	445e <_spi_check_config+0x10e>
			return STATUS_ERR_DENIED;
    445a:	231c      	movs	r3, #28
    445c:	e085      	b.n	456a <_spi_check_config+0x21a>
		}

		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    445e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4460:	220c      	movs	r2, #12
    4462:	4313      	orrs	r3, r2
    4464:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    4466:	683b      	ldr	r3, [r7, #0]
    4468:	781b      	ldrb	r3, [r3, #0]
    446a:	2b00      	cmp	r3, #0
    446c:	d129      	bne.n	44c2 <_spi_check_config+0x172>

		/* Set frame format */
		ctrla |= config->mode_specific.slave.frame_format;
    446e:	683b      	ldr	r3, [r7, #0]
    4470:	699b      	ldr	r3, [r3, #24]
    4472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4474:	4313      	orrs	r3, r2
    4476:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;
    4478:	683b      	ldr	r3, [r7, #0]
    447a:	8b9b      	ldrh	r3, [r3, #28]
    447c:	001a      	movs	r2, r3
    447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4480:	4313      	orrs	r3, r2
    4482:	633b      	str	r3, [r7, #48]	; 0x30

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4484:	683b      	ldr	r3, [r7, #0]
    4486:	7f9b      	ldrb	r3, [r3, #30]
    4488:	001a      	movs	r2, r3
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    448a:	683b      	ldr	r3, [r7, #0]
    448c:	7fdb      	ldrb	r3, [r3, #31]
    448e:	041b      	lsls	r3, r3, #16

		/* Set address mode */
		ctrlb |= config->mode_specific.slave.address_mode;

		/* Set address and address mask*/
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    4490:	4313      	orrs	r3, r2
    4492:	001a      	movs	r2, r3
    4494:	6a3b      	ldr	r3, [r7, #32]
    4496:	4313      	orrs	r3, r2
    4498:	623b      	str	r3, [r7, #32]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
		if (spi_module->CTRLA.reg != addr) {
    449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    449c:	681a      	ldr	r2, [r3, #0]
    449e:	6a3b      	ldr	r3, [r7, #32]
    44a0:	429a      	cmp	r2, r3
    44a2:	d001      	beq.n	44a8 <_spi_check_config+0x158>
			return STATUS_ERR_DENIED;
    44a4:	231c      	movs	r3, #28
    44a6:	e060      	b.n	456a <_spi_check_config+0x21a>
		}

		if (config->mode_specific.slave.preload_enable) {
    44a8:	683b      	ldr	r3, [r7, #0]
    44aa:	2220      	movs	r2, #32
    44ac:	5c9b      	ldrb	r3, [r3, r2]
    44ae:	2b00      	cmp	r3, #0
    44b0:	d003      	beq.n	44ba <_spi_check_config+0x16a>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    44b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    44b4:	2240      	movs	r2, #64	; 0x40
    44b6:	4313      	orrs	r3, r2
    44b8:	633b      	str	r3, [r7, #48]	; 0x30
		}
		ctrla |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
    44ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44bc:	2208      	movs	r2, #8
    44be:	4313      	orrs	r3, r2
    44c0:	637b      	str	r3, [r7, #52]	; 0x34
	}
#  endif
	/* Set data order */
	ctrla |= config->data_order;
    44c2:	683b      	ldr	r3, [r7, #0]
    44c4:	685b      	ldr	r3, [r3, #4]
    44c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    44c8:	4313      	orrs	r3, r2
    44ca:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    44cc:	683b      	ldr	r3, [r7, #0]
    44ce:	689b      	ldr	r3, [r3, #8]
    44d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    44d2:	4313      	orrs	r3, r2
    44d4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set mux setting */
	ctrla |= config->mux_setting;
    44d6:	683b      	ldr	r3, [r7, #0]
    44d8:	68db      	ldr	r3, [r3, #12]
    44da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    44dc:	4313      	orrs	r3, r2
    44de:	637b      	str	r3, [r7, #52]	; 0x34

	/* Set SPI character size */
	ctrlb |= config->character_size;
    44e0:	683b      	ldr	r3, [r7, #0]
    44e2:	7c1b      	ldrb	r3, [r3, #16]
    44e4:	001a      	movs	r2, r3
    44e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    44e8:	4313      	orrs	r3, r2
    44ea:	633b      	str	r3, [r7, #48]	; 0x30

	if (config->run_in_standby) {
    44ec:	683b      	ldr	r3, [r7, #0]
    44ee:	7c5b      	ldrb	r3, [r3, #17]
    44f0:	2b00      	cmp	r3, #0
    44f2:	d003      	beq.n	44fc <_spi_check_config+0x1ac>
		/* Enable in sleep mode */
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    44f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    44f6:	2280      	movs	r2, #128	; 0x80
    44f8:	4313      	orrs	r3, r2
    44fa:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (config->receiver_enable) {
    44fc:	683b      	ldr	r3, [r7, #0]
    44fe:	7c9b      	ldrb	r3, [r3, #18]
    4500:	2b00      	cmp	r3, #0
    4502:	d004      	beq.n	450e <_spi_check_config+0x1be>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4506:	2280      	movs	r2, #128	; 0x80
    4508:	0292      	lsls	r2, r2, #10
    450a:	4313      	orrs	r3, r2
    450c:	633b      	str	r3, [r7, #48]	; 0x30
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    450e:	683b      	ldr	r3, [r7, #0]
    4510:	7cdb      	ldrb	r3, [r3, #19]
    4512:	2b00      	cmp	r3, #0
    4514:	d004      	beq.n	4520 <_spi_check_config+0x1d0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4518:	2280      	movs	r2, #128	; 0x80
    451a:	0092      	lsls	r2, r2, #2
    451c:	4313      	orrs	r3, r2
    451e:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    4520:	683b      	ldr	r3, [r7, #0]
    4522:	7d1b      	ldrb	r3, [r3, #20]
    4524:	2b00      	cmp	r3, #0
    4526:	d004      	beq.n	4532 <_spi_check_config+0x1e2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    452a:	2280      	movs	r2, #128	; 0x80
    452c:	0192      	lsls	r2, r2, #6
    452e:	4313      	orrs	r3, r2
    4530:	633b      	str	r3, [r7, #48]	; 0x30
	}
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    4532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4534:	2202      	movs	r2, #2
    4536:	4313      	orrs	r3, r2
    4538:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    453c:	681a      	ldr	r2, [r3, #0]
    453e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4540:	429a      	cmp	r2, r3
    4542:	d10e      	bne.n	4562 <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
    4544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4546:	685a      	ldr	r2, [r3, #4]
#  endif

	ctrla |= SERCOM_SPI_CTRLA_ENABLE;

	/* Check that same config is set */
	if (spi_module->CTRLA.reg == ctrla &&
    4548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    454a:	429a      	cmp	r2, r3
    454c:	d109      	bne.n	4562 <_spi_check_config+0x212>
			spi_module->CTRLB.reg == ctrlb) {
		module->mode           = config->mode;
    454e:	683b      	ldr	r3, [r7, #0]
    4550:	781a      	ldrb	r2, [r3, #0]
    4552:	687b      	ldr	r3, [r7, #4]
    4554:	715a      	strb	r2, [r3, #5]
		module->character_size = config->character_size;
    4556:	683b      	ldr	r3, [r7, #0]
    4558:	7c1a      	ldrb	r2, [r3, #16]
    455a:	687b      	ldr	r3, [r7, #4]
    455c:	719a      	strb	r2, [r3, #6]
		return STATUS_OK;
    455e:	2300      	movs	r3, #0
    4560:	e003      	b.n	456a <_spi_check_config+0x21a>
	}

	/* Not same config, wipe module pointer and return */
	module->hw = NULL;
    4562:	687b      	ldr	r3, [r7, #4]
    4564:	2200      	movs	r2, #0
    4566:	601a      	str	r2, [r3, #0]

	return STATUS_ERR_DENIED;
    4568:	231c      	movs	r3, #28
}
    456a:	0018      	movs	r0, r3
    456c:	46bd      	mov	sp, r7
    456e:	b011      	add	sp, #68	; 0x44
    4570:	bd90      	pop	{r4, r7, pc}
    4572:	46c0      	nop			; (mov r8, r8)
    4574:	00003a71 	.word	0x00003a71
    4578:	00003e61 	.word	0x00003e61
    457c:	00006141 	.word	0x00006141
    4580:	0000377d 	.word	0x0000377d

00004584 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4584:	b580      	push	{r7, lr}
    4586:	b08a      	sub	sp, #40	; 0x28
    4588:	af00      	add	r7, sp, #0
    458a:	60f8      	str	r0, [r7, #12]
    458c:	60b9      	str	r1, [r7, #8]
    458e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4590:	68fb      	ldr	r3, [r7, #12]
    4592:	68ba      	ldr	r2, [r7, #8]
    4594:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4596:	68fb      	ldr	r3, [r7, #12]
    4598:	681b      	ldr	r3, [r3, #0]
    459a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    459e:	681b      	ldr	r3, [r3, #0]
    45a0:	2202      	movs	r2, #2
    45a2:	4013      	ands	r3, r2
    45a4:	d007      	beq.n	45b6 <spi_init+0x32>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
    45a6:	687a      	ldr	r2, [r7, #4]
    45a8:	68fb      	ldr	r3, [r7, #12]
    45aa:	0011      	movs	r1, r2
    45ac:	0018      	movs	r0, r3
    45ae:	4b2f      	ldr	r3, [pc, #188]	; (466c <spi_init+0xe8>)
    45b0:	4798      	blx	r3
    45b2:	0003      	movs	r3, r0
    45b4:	e055      	b.n	4662 <spi_init+0xde>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    45b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    45b8:	681b      	ldr	r3, [r3, #0]
    45ba:	2201      	movs	r2, #1
    45bc:	4013      	ands	r3, r2
    45be:	d001      	beq.n	45c4 <spi_init+0x40>
		return STATUS_BUSY;
    45c0:	2305      	movs	r3, #5
    45c2:	e04e      	b.n	4662 <spi_init+0xde>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    45c4:	68fb      	ldr	r3, [r7, #12]
    45c6:	681b      	ldr	r3, [r3, #0]
    45c8:	0018      	movs	r0, r3
    45ca:	4b29      	ldr	r3, [pc, #164]	; (4670 <spi_init+0xec>)
    45cc:	4798      	blx	r3
    45ce:	0003      	movs	r3, r0
    45d0:	623b      	str	r3, [r7, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    45d2:	6a3b      	ldr	r3, [r7, #32]
    45d4:	3302      	adds	r3, #2
    45d6:	61fb      	str	r3, [r7, #28]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    45d8:	6a3b      	ldr	r3, [r7, #32]
    45da:	3314      	adds	r3, #20
    45dc:	61bb      	str	r3, [r7, #24]

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    45de:	2201      	movs	r2, #1
    45e0:	69fb      	ldr	r3, [r7, #28]
    45e2:	409a      	lsls	r2, r3
    45e4:	0013      	movs	r3, r2
    45e6:	0019      	movs	r1, r3
    45e8:	2002      	movs	r0, #2
    45ea:	4b22      	ldr	r3, [pc, #136]	; (4674 <spi_init+0xf0>)
    45ec:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    45ee:	2314      	movs	r3, #20
    45f0:	18fb      	adds	r3, r7, r3
    45f2:	0018      	movs	r0, r3
    45f4:	4b20      	ldr	r3, [pc, #128]	; (4678 <spi_init+0xf4>)
    45f6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    45f8:	687b      	ldr	r3, [r7, #4]
    45fa:	2224      	movs	r2, #36	; 0x24
    45fc:	5c9a      	ldrb	r2, [r3, r2]
    45fe:	2314      	movs	r3, #20
    4600:	18fb      	adds	r3, r7, r3
    4602:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4604:	69bb      	ldr	r3, [r7, #24]
    4606:	b2db      	uxtb	r3, r3
    4608:	2214      	movs	r2, #20
    460a:	18ba      	adds	r2, r7, r2
    460c:	0011      	movs	r1, r2
    460e:	0018      	movs	r0, r3
    4610:	4b1a      	ldr	r3, [pc, #104]	; (467c <spi_init+0xf8>)
    4612:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4614:	69bb      	ldr	r3, [r7, #24]
    4616:	b2db      	uxtb	r3, r3
    4618:	0018      	movs	r0, r3
    461a:	4b19      	ldr	r3, [pc, #100]	; (4680 <spi_init+0xfc>)
    461c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    461e:	687b      	ldr	r3, [r7, #4]
    4620:	2224      	movs	r2, #36	; 0x24
    4622:	5c9b      	ldrb	r3, [r3, r2]
    4624:	2100      	movs	r1, #0
    4626:	0018      	movs	r0, r3
    4628:	4b16      	ldr	r3, [pc, #88]	; (4684 <spi_init+0x100>)
    462a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    462c:	687b      	ldr	r3, [r7, #4]
    462e:	781b      	ldrb	r3, [r3, #0]
    4630:	2b01      	cmp	r3, #1
    4632:	d105      	bne.n	4640 <spi_init+0xbc>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
    4634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4636:	681b      	ldr	r3, [r3, #0]
    4638:	220c      	movs	r2, #12
    463a:	431a      	orrs	r2, r3
    463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    463e:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
    4640:	687b      	ldr	r3, [r7, #4]
    4642:	781b      	ldrb	r3, [r3, #0]
    4644:	2b00      	cmp	r3, #0
    4646:	d105      	bne.n	4654 <spi_init+0xd0>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE_SPI_SLAVE;
    4648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    464a:	681b      	ldr	r3, [r3, #0]
    464c:	2208      	movs	r2, #8
    464e:	431a      	orrs	r2, r3
    4650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4652:	601a      	str	r2, [r3, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    4654:	687a      	ldr	r2, [r7, #4]
    4656:	68fb      	ldr	r3, [r7, #12]
    4658:	0011      	movs	r1, r2
    465a:	0018      	movs	r0, r3
    465c:	4b0a      	ldr	r3, [pc, #40]	; (4688 <spi_init+0x104>)
    465e:	4798      	blx	r3
    4660:	0003      	movs	r3, r0
}
    4662:	0018      	movs	r0, r3
    4664:	46bd      	mov	sp, r7
    4666:	b00a      	add	sp, #40	; 0x28
    4668:	bd80      	pop	{r7, pc}
    466a:	46c0      	nop			; (mov r8, r8)
    466c:	00004351 	.word	0x00004351
    4670:	00003c41 	.word	0x00003c41
    4674:	00003f6d 	.word	0x00003f6d
    4678:	00003f55 	.word	0x00003f55
    467c:	0000601d 	.word	0x0000601d
    4680:	00006061 	.word	0x00006061
    4684:	000039e5 	.word	0x000039e5
    4688:	00004111 	.word	0x00004111

0000468c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    468c:	b580      	push	{r7, lr}
    468e:	b086      	sub	sp, #24
    4690:	af00      	add	r7, sp, #0
    4692:	60f8      	str	r0, [r7, #12]
    4694:	60b9      	str	r1, [r7, #8]
    4696:	1dfb      	adds	r3, r7, #7
    4698:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    469a:	68fb      	ldr	r3, [r7, #12]
    469c:	795b      	ldrb	r3, [r3, #5]
    469e:	2b01      	cmp	r3, #1
    46a0:	d001      	beq.n	46a6 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    46a2:	2315      	movs	r3, #21
    46a4:	e05c      	b.n	4760 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    46a6:	68fb      	ldr	r3, [r7, #12]
    46a8:	7a1b      	ldrb	r3, [r3, #8]
    46aa:	2201      	movs	r2, #1
    46ac:	4053      	eors	r3, r2
    46ae:	b2db      	uxtb	r3, r3
    46b0:	2b00      	cmp	r3, #0
    46b2:	d054      	beq.n	475e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    46b4:	1dfb      	adds	r3, r7, #7
    46b6:	781b      	ldrb	r3, [r3, #0]
    46b8:	2b00      	cmp	r3, #0
    46ba:	d04a      	beq.n	4752 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    46bc:	68bb      	ldr	r3, [r7, #8]
    46be:	785b      	ldrb	r3, [r3, #1]
    46c0:	2b00      	cmp	r3, #0
    46c2:	d03f      	beq.n	4744 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    46c4:	68fb      	ldr	r3, [r7, #12]
    46c6:	0018      	movs	r0, r3
    46c8:	4b27      	ldr	r3, [pc, #156]	; (4768 <spi_select_slave+0xdc>)
    46ca:	4798      	blx	r3
    46cc:	0003      	movs	r3, r0
    46ce:	001a      	movs	r2, r3
    46d0:	2301      	movs	r3, #1
    46d2:	4053      	eors	r3, r2
    46d4:	b2db      	uxtb	r3, r3
    46d6:	2b00      	cmp	r3, #0
    46d8:	d007      	beq.n	46ea <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    46da:	68bb      	ldr	r3, [r7, #8]
    46dc:	781b      	ldrb	r3, [r3, #0]
    46de:	2101      	movs	r1, #1
    46e0:	0018      	movs	r0, r3
    46e2:	4b22      	ldr	r3, [pc, #136]	; (476c <spi_select_slave+0xe0>)
    46e4:	4798      	blx	r3
					return STATUS_BUSY;
    46e6:	2305      	movs	r3, #5
    46e8:	e03a      	b.n	4760 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    46ea:	68bb      	ldr	r3, [r7, #8]
    46ec:	781b      	ldrb	r3, [r3, #0]
    46ee:	2100      	movs	r1, #0
    46f0:	0018      	movs	r0, r3
    46f2:	4b1e      	ldr	r3, [pc, #120]	; (476c <spi_select_slave+0xe0>)
    46f4:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    46f6:	68bb      	ldr	r3, [r7, #8]
    46f8:	789b      	ldrb	r3, [r3, #2]
    46fa:	b29a      	uxth	r2, r3
    46fc:	68fb      	ldr	r3, [r7, #12]
    46fe:	0011      	movs	r1, r2
    4700:	0018      	movs	r0, r3
    4702:	4b1b      	ldr	r3, [pc, #108]	; (4770 <spi_select_slave+0xe4>)
    4704:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    4706:	68fb      	ldr	r3, [r7, #12]
    4708:	79db      	ldrb	r3, [r3, #7]
    470a:	2201      	movs	r2, #1
    470c:	4053      	eors	r3, r2
    470e:	b2db      	uxtb	r3, r3
    4710:	2b00      	cmp	r3, #0
    4712:	d024      	beq.n	475e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4714:	46c0      	nop			; (mov r8, r8)
    4716:	68fb      	ldr	r3, [r7, #12]
    4718:	0018      	movs	r0, r3
    471a:	4b16      	ldr	r3, [pc, #88]	; (4774 <spi_select_slave+0xe8>)
    471c:	4798      	blx	r3
    471e:	0003      	movs	r3, r0
    4720:	001a      	movs	r2, r3
    4722:	2301      	movs	r3, #1
    4724:	4053      	eors	r3, r2
    4726:	b2db      	uxtb	r3, r3
    4728:	2b00      	cmp	r3, #0
    472a:	d1f4      	bne.n	4716 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    472c:	2316      	movs	r3, #22
    472e:	18fb      	adds	r3, r7, r3
    4730:	2200      	movs	r2, #0
    4732:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    4734:	2316      	movs	r3, #22
    4736:	18fa      	adds	r2, r7, r3
    4738:	68fb      	ldr	r3, [r7, #12]
    473a:	0011      	movs	r1, r2
    473c:	0018      	movs	r0, r3
    473e:	4b0e      	ldr	r3, [pc, #56]	; (4778 <spi_select_slave+0xec>)
    4740:	4798      	blx	r3
    4742:	e00c      	b.n	475e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4744:	68bb      	ldr	r3, [r7, #8]
    4746:	781b      	ldrb	r3, [r3, #0]
    4748:	2100      	movs	r1, #0
    474a:	0018      	movs	r0, r3
    474c:	4b07      	ldr	r3, [pc, #28]	; (476c <spi_select_slave+0xe0>)
    474e:	4798      	blx	r3
    4750:	e005      	b.n	475e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    4752:	68bb      	ldr	r3, [r7, #8]
    4754:	781b      	ldrb	r3, [r3, #0]
    4756:	2101      	movs	r1, #1
    4758:	0018      	movs	r0, r3
    475a:	4b04      	ldr	r3, [pc, #16]	; (476c <spi_select_slave+0xe0>)
    475c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    475e:	2300      	movs	r3, #0
}
    4760:	0018      	movs	r0, r3
    4762:	46bd      	mov	sp, r7
    4764:	b006      	add	sp, #24
    4766:	bd80      	pop	{r7, pc}
    4768:	00003fe9 	.word	0x00003fe9
    476c:	00003f01 	.word	0x00003f01
    4770:	00004039 	.word	0x00004039
    4774:	00004011 	.word	0x00004011
    4778:	00004081 	.word	0x00004081

0000477c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    477c:	b580      	push	{r7, lr}
    477e:	b082      	sub	sp, #8
    4780:	af00      	add	r7, sp, #0
    4782:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4784:	687b      	ldr	r3, [r7, #4]
    4786:	2200      	movs	r2, #0
    4788:	701a      	strb	r2, [r3, #0]
}
    478a:	46c0      	nop			; (mov r8, r8)
    478c:	46bd      	mov	sp, r7
    478e:	b002      	add	sp, #8
    4790:	bd80      	pop	{r7, pc}
    4792:	46c0      	nop			; (mov r8, r8)

00004794 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4794:	b580      	push	{r7, lr}
    4796:	b082      	sub	sp, #8
    4798:	af00      	add	r7, sp, #0
    479a:	0002      	movs	r2, r0
    479c:	6039      	str	r1, [r7, #0]
    479e:	1dfb      	adds	r3, r7, #7
    47a0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    47a2:	1dfb      	adds	r3, r7, #7
    47a4:	781b      	ldrb	r3, [r3, #0]
    47a6:	2b01      	cmp	r3, #1
    47a8:	d00a      	beq.n	47c0 <system_apb_clock_set_mask+0x2c>
    47aa:	2b02      	cmp	r3, #2
    47ac:	d00f      	beq.n	47ce <system_apb_clock_set_mask+0x3a>
    47ae:	2b00      	cmp	r3, #0
    47b0:	d114      	bne.n	47dc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    47b2:	4b0e      	ldr	r3, [pc, #56]	; (47ec <system_apb_clock_set_mask+0x58>)
    47b4:	4a0d      	ldr	r2, [pc, #52]	; (47ec <system_apb_clock_set_mask+0x58>)
    47b6:	6991      	ldr	r1, [r2, #24]
    47b8:	683a      	ldr	r2, [r7, #0]
    47ba:	430a      	orrs	r2, r1
    47bc:	619a      	str	r2, [r3, #24]
			break;
    47be:	e00f      	b.n	47e0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    47c0:	4b0a      	ldr	r3, [pc, #40]	; (47ec <system_apb_clock_set_mask+0x58>)
    47c2:	4a0a      	ldr	r2, [pc, #40]	; (47ec <system_apb_clock_set_mask+0x58>)
    47c4:	69d1      	ldr	r1, [r2, #28]
    47c6:	683a      	ldr	r2, [r7, #0]
    47c8:	430a      	orrs	r2, r1
    47ca:	61da      	str	r2, [r3, #28]
			break;
    47cc:	e008      	b.n	47e0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    47ce:	4b07      	ldr	r3, [pc, #28]	; (47ec <system_apb_clock_set_mask+0x58>)
    47d0:	4a06      	ldr	r2, [pc, #24]	; (47ec <system_apb_clock_set_mask+0x58>)
    47d2:	6a11      	ldr	r1, [r2, #32]
    47d4:	683a      	ldr	r2, [r7, #0]
    47d6:	430a      	orrs	r2, r1
    47d8:	621a      	str	r2, [r3, #32]
			break;
    47da:	e001      	b.n	47e0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    47dc:	2317      	movs	r3, #23
    47de:	e000      	b.n	47e2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    47e0:	2300      	movs	r3, #0
}
    47e2:	0018      	movs	r0, r3
    47e4:	46bd      	mov	sp, r7
    47e6:	b002      	add	sp, #8
    47e8:	bd80      	pop	{r7, pc}
    47ea:	46c0      	nop			; (mov r8, r8)
    47ec:	40000400 	.word	0x40000400

000047f0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    47f0:	b580      	push	{r7, lr}
    47f2:	b082      	sub	sp, #8
    47f4:	af00      	add	r7, sp, #0
    47f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    47f8:	687b      	ldr	r3, [r7, #4]
    47fa:	2280      	movs	r2, #128	; 0x80
    47fc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    47fe:	687b      	ldr	r3, [r7, #4]
    4800:	2200      	movs	r2, #0
    4802:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4804:	687b      	ldr	r3, [r7, #4]
    4806:	2201      	movs	r2, #1
    4808:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	2200      	movs	r2, #0
    480e:	70da      	strb	r2, [r3, #3]
}
    4810:	46c0      	nop			; (mov r8, r8)
    4812:	46bd      	mov	sp, r7
    4814:	b002      	add	sp, #8
    4816:	bd80      	pop	{r7, pc}

00004818 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4818:	b580      	push	{r7, lr}
    481a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    481c:	4b05      	ldr	r3, [pc, #20]	; (4834 <system_is_debugger_present+0x1c>)
    481e:	789b      	ldrb	r3, [r3, #2]
    4820:	b2db      	uxtb	r3, r3
    4822:	001a      	movs	r2, r3
    4824:	2302      	movs	r3, #2
    4826:	4013      	ands	r3, r2
    4828:	1e5a      	subs	r2, r3, #1
    482a:	4193      	sbcs	r3, r2
    482c:	b2db      	uxtb	r3, r3
}
    482e:	0018      	movs	r0, r3
    4830:	46bd      	mov	sp, r7
    4832:	bd80      	pop	{r7, pc}
    4834:	41002000 	.word	0x41002000

00004838 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4838:	b580      	push	{r7, lr}
    483a:	b084      	sub	sp, #16
    483c:	af00      	add	r7, sp, #0
    483e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4840:	687b      	ldr	r3, [r7, #4]
    4842:	681b      	ldr	r3, [r3, #0]
    4844:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4846:	68fb      	ldr	r3, [r7, #12]
    4848:	69db      	ldr	r3, [r3, #28]
    484a:	1e5a      	subs	r2, r3, #1
    484c:	4193      	sbcs	r3, r2
    484e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    4850:	0018      	movs	r0, r3
    4852:	46bd      	mov	sp, r7
    4854:	b004      	add	sp, #16
    4856:	bd80      	pop	{r7, pc}

00004858 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4858:	b580      	push	{r7, lr}
    485a:	b082      	sub	sp, #8
    485c:	af00      	add	r7, sp, #0
    485e:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4860:	46c0      	nop			; (mov r8, r8)
    4862:	687b      	ldr	r3, [r7, #4]
    4864:	0018      	movs	r0, r3
    4866:	4b04      	ldr	r3, [pc, #16]	; (4878 <_usart_wait_for_sync+0x20>)
    4868:	4798      	blx	r3
    486a:	1e03      	subs	r3, r0, #0
    486c:	d1f9      	bne.n	4862 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    486e:	46c0      	nop			; (mov r8, r8)
    4870:	46bd      	mov	sp, r7
    4872:	b002      	add	sp, #8
    4874:	bd80      	pop	{r7, pc}
    4876:	46c0      	nop			; (mov r8, r8)
    4878:	00004839 	.word	0x00004839

0000487c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    487c:	b5b0      	push	{r4, r5, r7, lr}
    487e:	b08c      	sub	sp, #48	; 0x30
    4880:	af02      	add	r7, sp, #8
    4882:	6078      	str	r0, [r7, #4]
    4884:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4886:	687b      	ldr	r3, [r7, #4]
    4888:	681b      	ldr	r3, [r3, #0]
    488a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    488c:	687b      	ldr	r3, [r7, #4]
    488e:	681b      	ldr	r3, [r3, #0]
    4890:	0018      	movs	r0, r3
    4892:	4baa      	ldr	r3, [pc, #680]	; (4b3c <_usart_set_config+0x2c0>)
    4894:	4798      	blx	r3
    4896:	0003      	movs	r3, r0
    4898:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    489a:	697b      	ldr	r3, [r7, #20]
    489c:	3314      	adds	r3, #20
    489e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    48a0:	2300      	movs	r3, #0
    48a2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    48a4:	2300      	movs	r3, #0
    48a6:	623b      	str	r3, [r7, #32]
	uint16_t baud  = 0;
    48a8:	230e      	movs	r3, #14
    48aa:	18fb      	adds	r3, r7, r3
    48ac:	2200      	movs	r2, #0
    48ae:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    48b0:	231f      	movs	r3, #31
    48b2:	18fb      	adds	r3, r7, r3
    48b4:	2200      	movs	r2, #0
    48b6:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    48b8:	231e      	movs	r3, #30
    48ba:	18fb      	adds	r3, r7, r3
    48bc:	2210      	movs	r2, #16
    48be:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    48c0:	683b      	ldr	r3, [r7, #0]
    48c2:	8a1b      	ldrh	r3, [r3, #16]
    48c4:	2280      	movs	r2, #128	; 0x80
    48c6:	01d2      	lsls	r2, r2, #7
    48c8:	4293      	cmp	r3, r2
    48ca:	d01c      	beq.n	4906 <_usart_set_config+0x8a>
    48cc:	2280      	movs	r2, #128	; 0x80
    48ce:	01d2      	lsls	r2, r2, #7
    48d0:	4293      	cmp	r3, r2
    48d2:	dc06      	bgt.n	48e2 <_usart_set_config+0x66>
    48d4:	2b00      	cmp	r3, #0
    48d6:	d00d      	beq.n	48f4 <_usart_set_config+0x78>
    48d8:	2280      	movs	r2, #128	; 0x80
    48da:	0192      	lsls	r2, r2, #6
    48dc:	4293      	cmp	r3, r2
    48de:	d024      	beq.n	492a <_usart_set_config+0xae>
    48e0:	e035      	b.n	494e <_usart_set_config+0xd2>
    48e2:	22c0      	movs	r2, #192	; 0xc0
    48e4:	01d2      	lsls	r2, r2, #7
    48e6:	4293      	cmp	r3, r2
    48e8:	d028      	beq.n	493c <_usart_set_config+0xc0>
    48ea:	2280      	movs	r2, #128	; 0x80
    48ec:	0212      	lsls	r2, r2, #8
    48ee:	4293      	cmp	r3, r2
    48f0:	d012      	beq.n	4918 <_usart_set_config+0x9c>
    48f2:	e02c      	b.n	494e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    48f4:	231f      	movs	r3, #31
    48f6:	18fb      	adds	r3, r7, r3
    48f8:	2200      	movs	r2, #0
    48fa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    48fc:	231e      	movs	r3, #30
    48fe:	18fb      	adds	r3, r7, r3
    4900:	2210      	movs	r2, #16
    4902:	701a      	strb	r2, [r3, #0]
			break;
    4904:	e023      	b.n	494e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4906:	231f      	movs	r3, #31
    4908:	18fb      	adds	r3, r7, r3
    490a:	2200      	movs	r2, #0
    490c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    490e:	231e      	movs	r3, #30
    4910:	18fb      	adds	r3, r7, r3
    4912:	2208      	movs	r2, #8
    4914:	701a      	strb	r2, [r3, #0]
			break;
    4916:	e01a      	b.n	494e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4918:	231f      	movs	r3, #31
    491a:	18fb      	adds	r3, r7, r3
    491c:	2200      	movs	r2, #0
    491e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4920:	231e      	movs	r3, #30
    4922:	18fb      	adds	r3, r7, r3
    4924:	2203      	movs	r2, #3
    4926:	701a      	strb	r2, [r3, #0]
			break;
    4928:	e011      	b.n	494e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    492a:	231f      	movs	r3, #31
    492c:	18fb      	adds	r3, r7, r3
    492e:	2201      	movs	r2, #1
    4930:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4932:	231e      	movs	r3, #30
    4934:	18fb      	adds	r3, r7, r3
    4936:	2210      	movs	r2, #16
    4938:	701a      	strb	r2, [r3, #0]
			break;
    493a:	e008      	b.n	494e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    493c:	231f      	movs	r3, #31
    493e:	18fb      	adds	r3, r7, r3
    4940:	2201      	movs	r2, #1
    4942:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4944:	231e      	movs	r3, #30
    4946:	18fb      	adds	r3, r7, r3
    4948:	2208      	movs	r2, #8
    494a:	701a      	strb	r2, [r3, #0]
			break;
    494c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    494e:	683b      	ldr	r3, [r7, #0]
    4950:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    4952:	683b      	ldr	r3, [r7, #0]
    4954:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4956:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4958:	683b      	ldr	r3, [r7, #0]
    495a:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    495c:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    495e:	683a      	ldr	r2, [r7, #0]
    4960:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4962:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4964:	683a      	ldr	r2, [r7, #0]
    4966:	7e12      	ldrb	r2, [r2, #24]
    4968:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    496a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    496c:	683a      	ldr	r2, [r7, #0]
    496e:	2126      	movs	r1, #38	; 0x26
    4970:	5c52      	ldrb	r2, [r2, r1]
    4972:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4974:	4313      	orrs	r3, r2
    4976:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    4978:	231d      	movs	r3, #29
    497a:	18fb      	adds	r3, r7, r3
    497c:	2200      	movs	r2, #0
    497e:	701a      	strb	r2, [r3, #0]

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    4980:	683b      	ldr	r3, [r7, #0]
    4982:	685b      	ldr	r3, [r3, #4]
    4984:	2b00      	cmp	r3, #0
    4986:	d01e      	beq.n	49c6 <_usart_set_config+0x14a>
    4988:	2280      	movs	r2, #128	; 0x80
    498a:	0552      	lsls	r2, r2, #21
    498c:	4293      	cmp	r3, r2
    498e:	d14f      	bne.n	4a30 <_usart_set_config+0x1b4>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    4990:	683b      	ldr	r3, [r7, #0]
    4992:	2227      	movs	r2, #39	; 0x27
    4994:	5c9b      	ldrb	r3, [r3, r2]
    4996:	2201      	movs	r2, #1
    4998:	4053      	eors	r3, r2
    499a:	b2db      	uxtb	r3, r3
    499c:	2b00      	cmp	r3, #0
    499e:	d046      	beq.n	4a2e <_usart_set_config+0x1b2>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    49a0:	683b      	ldr	r3, [r7, #0]
    49a2:	6a1d      	ldr	r5, [r3, #32]
    49a4:	693b      	ldr	r3, [r7, #16]
    49a6:	b2db      	uxtb	r3, r3
    49a8:	0018      	movs	r0, r3
    49aa:	4b65      	ldr	r3, [pc, #404]	; (4b40 <_usart_set_config+0x2c4>)
    49ac:	4798      	blx	r3
    49ae:	0001      	movs	r1, r0
    49b0:	231d      	movs	r3, #29
    49b2:	18fc      	adds	r4, r7, r3
    49b4:	230e      	movs	r3, #14
    49b6:	18fb      	adds	r3, r7, r3
    49b8:	001a      	movs	r2, r3
    49ba:	0028      	movs	r0, r5
    49bc:	4b61      	ldr	r3, [pc, #388]	; (4b44 <_usart_set_config+0x2c8>)
    49be:	4798      	blx	r3
    49c0:	0003      	movs	r3, r0
    49c2:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    49c4:	e033      	b.n	4a2e <_usart_set_config+0x1b2>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    49c6:	683b      	ldr	r3, [r7, #0]
    49c8:	2227      	movs	r2, #39	; 0x27
    49ca:	5c9b      	ldrb	r3, [r3, r2]
    49cc:	2b00      	cmp	r3, #0
    49ce:	d014      	beq.n	49fa <_usart_set_config+0x17e>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    49d0:	683b      	ldr	r3, [r7, #0]
    49d2:	6a18      	ldr	r0, [r3, #32]
    49d4:	683b      	ldr	r3, [r7, #0]
    49d6:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    49d8:	231d      	movs	r3, #29
    49da:	18fc      	adds	r4, r7, r3
    49dc:	231f      	movs	r3, #31
    49de:	18fb      	adds	r3, r7, r3
    49e0:	781d      	ldrb	r5, [r3, #0]
    49e2:	230e      	movs	r3, #14
    49e4:	18fa      	adds	r2, r7, r3
    49e6:	231e      	movs	r3, #30
    49e8:	18fb      	adds	r3, r7, r3
    49ea:	781b      	ldrb	r3, [r3, #0]
    49ec:	9300      	str	r3, [sp, #0]
    49ee:	002b      	movs	r3, r5
    49f0:	4d55      	ldr	r5, [pc, #340]	; (4b48 <_usart_set_config+0x2cc>)
    49f2:	47a8      	blx	r5
    49f4:	0003      	movs	r3, r0
    49f6:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    49f8:	e01a      	b.n	4a30 <_usart_set_config+0x1b4>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    49fa:	683b      	ldr	r3, [r7, #0]
    49fc:	6a1d      	ldr	r5, [r3, #32]
    49fe:	693b      	ldr	r3, [r7, #16]
    4a00:	b2db      	uxtb	r3, r3
    4a02:	0018      	movs	r0, r3
    4a04:	4b4e      	ldr	r3, [pc, #312]	; (4b40 <_usart_set_config+0x2c4>)
    4a06:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    4a08:	231d      	movs	r3, #29
    4a0a:	18fc      	adds	r4, r7, r3
    4a0c:	231f      	movs	r3, #31
    4a0e:	18fb      	adds	r3, r7, r3
    4a10:	7819      	ldrb	r1, [r3, #0]
    4a12:	230e      	movs	r3, #14
    4a14:	18fa      	adds	r2, r7, r3
    4a16:	231e      	movs	r3, #30
    4a18:	18fb      	adds	r3, r7, r3
    4a1a:	781b      	ldrb	r3, [r3, #0]
    4a1c:	9300      	str	r3, [sp, #0]
    4a1e:	000b      	movs	r3, r1
    4a20:	0001      	movs	r1, r0
    4a22:	0028      	movs	r0, r5
    4a24:	4d48      	ldr	r5, [pc, #288]	; (4b48 <_usart_set_config+0x2cc>)
    4a26:	47a8      	blx	r5
    4a28:	0003      	movs	r3, r0
    4a2a:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4a2c:	e000      	b.n	4a30 <_usart_set_config+0x1b4>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    4a2e:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baud rate failed */
	if (status_code != STATUS_OK) {
    4a30:	231d      	movs	r3, #29
    4a32:	18fb      	adds	r3, r7, r3
    4a34:	781b      	ldrb	r3, [r3, #0]
    4a36:	2b00      	cmp	r3, #0
    4a38:	d003      	beq.n	4a42 <_usart_set_config+0x1c6>
		/* Abort */
		return status_code;
    4a3a:	231d      	movs	r3, #29
    4a3c:	18fb      	adds	r3, r7, r3
    4a3e:	781b      	ldrb	r3, [r3, #0]
    4a40:	e078      	b.n	4b34 <_usart_set_config+0x2b8>
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    4a42:	683b      	ldr	r3, [r7, #0]
    4a44:	7e5b      	ldrb	r3, [r3, #25]
    4a46:	2b00      	cmp	r3, #0
    4a48:	d003      	beq.n	4a52 <_usart_set_config+0x1d6>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4a4a:	683b      	ldr	r3, [r7, #0]
    4a4c:	7e9a      	ldrb	r2, [r3, #26]
    4a4e:	69bb      	ldr	r3, [r7, #24]
    4a50:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4a52:	687b      	ldr	r3, [r7, #4]
    4a54:	0018      	movs	r0, r3
    4a56:	4b3d      	ldr	r3, [pc, #244]	; (4b4c <_usart_set_config+0x2d0>)
    4a58:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4a5a:	230e      	movs	r3, #14
    4a5c:	18fb      	adds	r3, r7, r3
    4a5e:	881a      	ldrh	r2, [r3, #0]
    4a60:	69bb      	ldr	r3, [r7, #24]
    4a62:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    4a64:	683b      	ldr	r3, [r7, #0]
    4a66:	685b      	ldr	r3, [r3, #4]
    4a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4a6a:	4313      	orrs	r3, r2
    4a6c:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    4a6e:	683b      	ldr	r3, [r7, #0]
    4a70:	2227      	movs	r2, #39	; 0x27
    4a72:	5c9b      	ldrb	r3, [r3, r2]
    4a74:	2201      	movs	r2, #1
    4a76:	4053      	eors	r3, r2
    4a78:	b2db      	uxtb	r3, r3
    4a7a:	2b00      	cmp	r3, #0
    4a7c:	d003      	beq.n	4a86 <_usart_set_config+0x20a>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    4a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a80:	2204      	movs	r2, #4
    4a82:	4313      	orrs	r3, r2
    4a84:	627b      	str	r3, [r7, #36]	; 0x24
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    4a86:	683b      	ldr	r3, [r7, #0]
    4a88:	7a9a      	ldrb	r2, [r3, #10]
    4a8a:	683b      	ldr	r3, [r7, #0]
    4a8c:	7adb      	ldrb	r3, [r3, #11]
    4a8e:	4313      	orrs	r3, r2
    4a90:	b2db      	uxtb	r3, r3
    4a92:	001a      	movs	r2, r3
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4a94:	683b      	ldr	r3, [r7, #0]
    4a96:	7e5b      	ldrb	r3, [r3, #25]
    4a98:	029b      	lsls	r3, r3, #10
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    4a9a:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4a9c:	683a      	ldr	r2, [r7, #0]
    4a9e:	7f12      	ldrb	r2, [r2, #28]
    4aa0:	0252      	lsls	r2, r2, #9
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4aa2:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4aa4:	683a      	ldr	r2, [r7, #0]
    4aa6:	7f52      	ldrb	r2, [r2, #29]
    4aa8:	0212      	lsls	r2, r2, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4aaa:	4313      	orrs	r3, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4aac:	683a      	ldr	r2, [r7, #0]
    4aae:	2124      	movs	r1, #36	; 0x24
    4ab0:	5c52      	ldrb	r2, [r2, r1]
    4ab2:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4ab4:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4ab6:	683a      	ldr	r2, [r7, #0]
    4ab8:	2125      	movs	r1, #37	; 0x25
    4aba:	5c52      	ldrb	r2, [r2, r1]
    4abc:	0412      	lsls	r2, r2, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    4abe:	4313      	orrs	r3, r2
    4ac0:	623b      	str	r3, [r7, #32]
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    4ac2:	683b      	ldr	r3, [r7, #0]
    4ac4:	891b      	ldrh	r3, [r3, #8]
    4ac6:	2bff      	cmp	r3, #255	; 0xff
    4ac8:	d00f      	beq.n	4aea <_usart_set_config+0x26e>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4aca:	683b      	ldr	r3, [r7, #0]
    4acc:	7edb      	ldrb	r3, [r3, #27]
    4ace:	2b00      	cmp	r3, #0
    4ad0:	d004      	beq.n	4adc <_usart_set_config+0x260>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    4ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ad4:	22a0      	movs	r2, #160	; 0xa0
    4ad6:	04d2      	lsls	r2, r2, #19
    4ad8:	4313      	orrs	r3, r2
    4ada:	627b      	str	r3, [r7, #36]	; 0x24
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    4adc:	683b      	ldr	r3, [r7, #0]
    4ade:	891b      	ldrh	r3, [r3, #8]
    4ae0:	001a      	movs	r2, r3
    4ae2:	6a3b      	ldr	r3, [r7, #32]
    4ae4:	4313      	orrs	r3, r2
    4ae6:	623b      	str	r3, [r7, #32]
    4ae8:	e008      	b.n	4afc <_usart_set_config+0x280>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4aea:	683b      	ldr	r3, [r7, #0]
    4aec:	7edb      	ldrb	r3, [r3, #27]
    4aee:	2b00      	cmp	r3, #0
    4af0:	d004      	beq.n	4afc <_usart_set_config+0x280>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4af4:	2280      	movs	r2, #128	; 0x80
    4af6:	04d2      	lsls	r2, r2, #19
    4af8:	4313      	orrs	r3, r2
    4afa:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4afc:	683b      	ldr	r3, [r7, #0]
    4afe:	222c      	movs	r2, #44	; 0x2c
    4b00:	5c9b      	ldrb	r3, [r3, r2]
    4b02:	2b00      	cmp	r3, #0
    4b04:	d103      	bne.n	4b0e <_usart_set_config+0x292>
    4b06:	4b12      	ldr	r3, [pc, #72]	; (4b50 <_usart_set_config+0x2d4>)
    4b08:	4798      	blx	r3
    4b0a:	1e03      	subs	r3, r0, #0
    4b0c:	d003      	beq.n	4b16 <_usart_set_config+0x29a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4b10:	2280      	movs	r2, #128	; 0x80
    4b12:	4313      	orrs	r3, r2
    4b14:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4b16:	687b      	ldr	r3, [r7, #4]
    4b18:	0018      	movs	r0, r3
    4b1a:	4b0c      	ldr	r3, [pc, #48]	; (4b4c <_usart_set_config+0x2d0>)
    4b1c:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    4b1e:	69bb      	ldr	r3, [r7, #24]
    4b20:	6a3a      	ldr	r2, [r7, #32]
    4b22:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4b24:	687b      	ldr	r3, [r7, #4]
    4b26:	0018      	movs	r0, r3
    4b28:	4b08      	ldr	r3, [pc, #32]	; (4b4c <_usart_set_config+0x2d0>)
    4b2a:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4b2c:	69bb      	ldr	r3, [r7, #24]
    4b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4b30:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
    4b32:	2300      	movs	r3, #0
}
    4b34:	0018      	movs	r0, r3
    4b36:	46bd      	mov	sp, r7
    4b38:	b00a      	add	sp, #40	; 0x28
    4b3a:	bdb0      	pop	{r4, r5, r7, pc}
    4b3c:	00003c41 	.word	0x00003c41
    4b40:	00006141 	.word	0x00006141
    4b44:	0000377d 	.word	0x0000377d
    4b48:	000037f9 	.word	0x000037f9
    4b4c:	00004859 	.word	0x00004859
    4b50:	00004819 	.word	0x00004819

00004b54 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4b54:	b590      	push	{r4, r7, lr}
    4b56:	b093      	sub	sp, #76	; 0x4c
    4b58:	af00      	add	r7, sp, #0
    4b5a:	60f8      	str	r0, [r7, #12]
    4b5c:	60b9      	str	r1, [r7, #8]
    4b5e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    4b60:	233b      	movs	r3, #59	; 0x3b
    4b62:	18fb      	adds	r3, r7, r3
    4b64:	2200      	movs	r2, #0
    4b66:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4b68:	68fb      	ldr	r3, [r7, #12]
    4b6a:	68ba      	ldr	r2, [r7, #8]
    4b6c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4b6e:	68fb      	ldr	r3, [r7, #12]
    4b70:	681b      	ldr	r3, [r3, #0]
    4b72:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4b74:	68fb      	ldr	r3, [r7, #12]
    4b76:	681b      	ldr	r3, [r3, #0]
    4b78:	0018      	movs	r0, r3
    4b7a:	4b86      	ldr	r3, [pc, #536]	; (4d94 <usart_init+0x240>)
    4b7c:	4798      	blx	r3
    4b7e:	0003      	movs	r3, r0
    4b80:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4b84:	3302      	adds	r3, #2
    4b86:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4b8a:	3314      	adds	r3, #20
    4b8c:	62bb      	str	r3, [r7, #40]	; 0x28

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	2201      	movs	r2, #1
    4b94:	4013      	ands	r3, r2
    4b96:	d001      	beq.n	4b9c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4b98:	2305      	movs	r3, #5
    4b9a:	e0f6      	b.n	4d8a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4b9e:	681b      	ldr	r3, [r3, #0]
    4ba0:	2202      	movs	r2, #2
    4ba2:	4013      	ands	r3, r2
    4ba4:	d001      	beq.n	4baa <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4ba6:	231c      	movs	r3, #28
    4ba8:	e0ef      	b.n	4d8a <usart_init+0x236>
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4baa:	2201      	movs	r2, #1
    4bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4bae:	409a      	lsls	r2, r3
    4bb0:	0013      	movs	r3, r2
    4bb2:	0019      	movs	r1, r3
    4bb4:	2002      	movs	r0, #2
    4bb6:	4b78      	ldr	r3, [pc, #480]	; (4d98 <usart_init+0x244>)
    4bb8:	4798      	blx	r3

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4bba:	2324      	movs	r3, #36	; 0x24
    4bbc:	18fb      	adds	r3, r7, r3
    4bbe:	0018      	movs	r0, r3
    4bc0:	4b76      	ldr	r3, [pc, #472]	; (4d9c <usart_init+0x248>)
    4bc2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4bc4:	687b      	ldr	r3, [r7, #4]
    4bc6:	222d      	movs	r2, #45	; 0x2d
    4bc8:	5c9a      	ldrb	r2, [r3, r2]
    4bca:	2324      	movs	r3, #36	; 0x24
    4bcc:	18fb      	adds	r3, r7, r3
    4bce:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4bd2:	b2db      	uxtb	r3, r3
    4bd4:	2224      	movs	r2, #36	; 0x24
    4bd6:	18ba      	adds	r2, r7, r2
    4bd8:	0011      	movs	r1, r2
    4bda:	0018      	movs	r0, r3
    4bdc:	4b70      	ldr	r3, [pc, #448]	; (4da0 <usart_init+0x24c>)
    4bde:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4be2:	b2db      	uxtb	r3, r3
    4be4:	0018      	movs	r0, r3
    4be6:	4b6f      	ldr	r3, [pc, #444]	; (4da4 <usart_init+0x250>)
    4be8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4bea:	687b      	ldr	r3, [r7, #4]
    4bec:	222d      	movs	r2, #45	; 0x2d
    4bee:	5c9b      	ldrb	r3, [r3, r2]
    4bf0:	2100      	movs	r1, #0
    4bf2:	0018      	movs	r0, r3
    4bf4:	4b6c      	ldr	r3, [pc, #432]	; (4da8 <usart_init+0x254>)
    4bf6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    4bf8:	687b      	ldr	r3, [r7, #4]
    4bfa:	7ada      	ldrb	r2, [r3, #11]
    4bfc:	68fb      	ldr	r3, [r7, #12]
    4bfe:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    4c00:	687b      	ldr	r3, [r7, #4]
    4c02:	2224      	movs	r2, #36	; 0x24
    4c04:	5c9a      	ldrb	r2, [r3, r2]
    4c06:	68fb      	ldr	r3, [r7, #12]
    4c08:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4c0a:	687b      	ldr	r3, [r7, #4]
    4c0c:	2225      	movs	r2, #37	; 0x25
    4c0e:	5c9a      	ldrb	r2, [r3, r2]
    4c10:	68fb      	ldr	r3, [r7, #12]
    4c12:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    4c14:	687b      	ldr	r3, [r7, #4]
    4c16:	7eda      	ldrb	r2, [r3, #27]
    4c18:	68fb      	ldr	r3, [r7, #12]
    4c1a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4c1c:	687b      	ldr	r3, [r7, #4]
    4c1e:	7f1a      	ldrb	r2, [r3, #28]
    4c20:	68fb      	ldr	r3, [r7, #12]
    4c22:	725a      	strb	r2, [r3, #9]
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    4c24:	233b      	movs	r3, #59	; 0x3b
    4c26:	18fc      	adds	r4, r7, r3
    4c28:	687a      	ldr	r2, [r7, #4]
    4c2a:	68fb      	ldr	r3, [r7, #12]
    4c2c:	0011      	movs	r1, r2
    4c2e:	0018      	movs	r0, r3
    4c30:	4b5e      	ldr	r3, [pc, #376]	; (4dac <usart_init+0x258>)
    4c32:	4798      	blx	r3
    4c34:	0003      	movs	r3, r0
    4c36:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    4c38:	233b      	movs	r3, #59	; 0x3b
    4c3a:	18fb      	adds	r3, r7, r3
    4c3c:	781b      	ldrb	r3, [r3, #0]
    4c3e:	2b00      	cmp	r3, #0
    4c40:	d003      	beq.n	4c4a <usart_init+0xf6>
		return status_code;
    4c42:	233b      	movs	r3, #59	; 0x3b
    4c44:	18fb      	adds	r3, r7, r3
    4c46:	781b      	ldrb	r3, [r3, #0]
    4c48:	e09f      	b.n	4d8a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4c4a:	2320      	movs	r3, #32
    4c4c:	18fb      	adds	r3, r7, r3
    4c4e:	0018      	movs	r0, r3
    4c50:	4b57      	ldr	r3, [pc, #348]	; (4db0 <usart_init+0x25c>)
    4c52:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4c54:	2320      	movs	r3, #32
    4c56:	18fb      	adds	r3, r7, r3
    4c58:	2200      	movs	r2, #0
    4c5a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4c5c:	2320      	movs	r3, #32
    4c5e:	18fb      	adds	r3, r7, r3
    4c60:	2200      	movs	r2, #0
    4c62:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4c64:	687b      	ldr	r3, [r7, #4]
    4c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4c68:	2310      	movs	r3, #16
    4c6a:	18fb      	adds	r3, r7, r3
    4c6c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4c6e:	687b      	ldr	r3, [r7, #4]
    4c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4c72:	2310      	movs	r3, #16
    4c74:	18fb      	adds	r3, r7, r3
    4c76:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4c78:	687b      	ldr	r3, [r7, #4]
    4c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4c7c:	2310      	movs	r3, #16
    4c7e:	18fb      	adds	r3, r7, r3
    4c80:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4c82:	687b      	ldr	r3, [r7, #4]
    4c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    4c86:	2310      	movs	r3, #16
    4c88:	18fb      	adds	r3, r7, r3
    4c8a:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4c8c:	2347      	movs	r3, #71	; 0x47
    4c8e:	18fb      	adds	r3, r7, r3
    4c90:	2200      	movs	r2, #0
    4c92:	701a      	strb	r2, [r3, #0]
    4c94:	e02c      	b.n	4cf0 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4c96:	2347      	movs	r3, #71	; 0x47
    4c98:	18fb      	adds	r3, r7, r3
    4c9a:	781a      	ldrb	r2, [r3, #0]
    4c9c:	2310      	movs	r3, #16
    4c9e:	18fb      	adds	r3, r7, r3
    4ca0:	0092      	lsls	r2, r2, #2
    4ca2:	58d3      	ldr	r3, [r2, r3]
    4ca4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4ca8:	2b00      	cmp	r3, #0
    4caa:	d109      	bne.n	4cc0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4cac:	2347      	movs	r3, #71	; 0x47
    4cae:	18fb      	adds	r3, r7, r3
    4cb0:	781a      	ldrb	r2, [r3, #0]
    4cb2:	68bb      	ldr	r3, [r7, #8]
    4cb4:	0011      	movs	r1, r2
    4cb6:	0018      	movs	r0, r3
    4cb8:	4b3e      	ldr	r3, [pc, #248]	; (4db4 <usart_init+0x260>)
    4cba:	4798      	blx	r3
    4cbc:	0003      	movs	r3, r0
    4cbe:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4cc2:	3301      	adds	r3, #1
    4cc4:	d00d      	beq.n	4ce2 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4cc8:	b2da      	uxtb	r2, r3
    4cca:	2320      	movs	r3, #32
    4ccc:	18fb      	adds	r3, r7, r3
    4cce:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4cd2:	0c1b      	lsrs	r3, r3, #16
    4cd4:	b2db      	uxtb	r3, r3
    4cd6:	2220      	movs	r2, #32
    4cd8:	18ba      	adds	r2, r7, r2
    4cda:	0011      	movs	r1, r2
    4cdc:	0018      	movs	r0, r3
    4cde:	4b36      	ldr	r3, [pc, #216]	; (4db8 <usart_init+0x264>)
    4ce0:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4ce2:	2347      	movs	r3, #71	; 0x47
    4ce4:	18fb      	adds	r3, r7, r3
    4ce6:	781a      	ldrb	r2, [r3, #0]
    4ce8:	2347      	movs	r3, #71	; 0x47
    4cea:	18fb      	adds	r3, r7, r3
    4cec:	3201      	adds	r2, #1
    4cee:	701a      	strb	r2, [r3, #0]
    4cf0:	2347      	movs	r3, #71	; 0x47
    4cf2:	18fb      	adds	r3, r7, r3
    4cf4:	781b      	ldrb	r3, [r3, #0]
    4cf6:	2b03      	cmp	r3, #3
    4cf8:	d9cd      	bls.n	4c96 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4cfa:	2300      	movs	r3, #0
    4cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    4cfe:	e00a      	b.n	4d16 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    4d00:	68fa      	ldr	r2, [r7, #12]
    4d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4d04:	3302      	adds	r3, #2
    4d06:	009b      	lsls	r3, r3, #2
    4d08:	18d3      	adds	r3, r2, r3
    4d0a:	3304      	adds	r3, #4
    4d0c:	2200      	movs	r2, #0
    4d0e:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    4d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4d12:	3301      	adds	r3, #1
    4d14:	63fb      	str	r3, [r7, #60]	; 0x3c
    4d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4d18:	2b05      	cmp	r3, #5
    4d1a:	d9f1      	bls.n	4d00 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    4d1c:	68fb      	ldr	r3, [r7, #12]
    4d1e:	2200      	movs	r2, #0
    4d20:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4d22:	68fb      	ldr	r3, [r7, #12]
    4d24:	2200      	movs	r2, #0
    4d26:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4d28:	68fb      	ldr	r3, [r7, #12]
    4d2a:	2200      	movs	r2, #0
    4d2c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4d2e:	68fb      	ldr	r3, [r7, #12]
    4d30:	2200      	movs	r2, #0
    4d32:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4d34:	68fb      	ldr	r3, [r7, #12]
    4d36:	2230      	movs	r2, #48	; 0x30
    4d38:	2100      	movs	r1, #0
    4d3a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    4d3c:	68fb      	ldr	r3, [r7, #12]
    4d3e:	2231      	movs	r2, #49	; 0x31
    4d40:	2100      	movs	r1, #0
    4d42:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    4d44:	68fb      	ldr	r3, [r7, #12]
    4d46:	2232      	movs	r2, #50	; 0x32
    4d48:	2100      	movs	r1, #0
    4d4a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    4d4c:	68fb      	ldr	r3, [r7, #12]
    4d4e:	2233      	movs	r2, #51	; 0x33
    4d50:	2100      	movs	r1, #0
    4d52:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4d54:	68fb      	ldr	r3, [r7, #12]
    4d56:	681b      	ldr	r3, [r3, #0]
    4d58:	2227      	movs	r2, #39	; 0x27
    4d5a:	18bc      	adds	r4, r7, r2
    4d5c:	0018      	movs	r0, r3
    4d5e:	4b0d      	ldr	r3, [pc, #52]	; (4d94 <usart_init+0x240>)
    4d60:	4798      	blx	r3
    4d62:	0003      	movs	r3, r0
    4d64:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4d66:	4a15      	ldr	r2, [pc, #84]	; (4dbc <usart_init+0x268>)
    4d68:	2327      	movs	r3, #39	; 0x27
    4d6a:	18fb      	adds	r3, r7, r3
    4d6c:	781b      	ldrb	r3, [r3, #0]
    4d6e:	0011      	movs	r1, r2
    4d70:	0018      	movs	r0, r3
    4d72:	4b13      	ldr	r3, [pc, #76]	; (4dc0 <usart_init+0x26c>)
    4d74:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4d76:	2327      	movs	r3, #39	; 0x27
    4d78:	18fb      	adds	r3, r7, r3
    4d7a:	781a      	ldrb	r2, [r3, #0]
    4d7c:	4b11      	ldr	r3, [pc, #68]	; (4dc4 <usart_init+0x270>)
    4d7e:	0092      	lsls	r2, r2, #2
    4d80:	68f9      	ldr	r1, [r7, #12]
    4d82:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    4d84:	233b      	movs	r3, #59	; 0x3b
    4d86:	18fb      	adds	r3, r7, r3
    4d88:	781b      	ldrb	r3, [r3, #0]
}
    4d8a:	0018      	movs	r0, r3
    4d8c:	46bd      	mov	sp, r7
    4d8e:	b013      	add	sp, #76	; 0x4c
    4d90:	bd90      	pop	{r4, r7, pc}
    4d92:	46c0      	nop			; (mov r8, r8)
    4d94:	00003c41 	.word	0x00003c41
    4d98:	00004795 	.word	0x00004795
    4d9c:	0000477d 	.word	0x0000477d
    4da0:	0000601d 	.word	0x0000601d
    4da4:	00006061 	.word	0x00006061
    4da8:	000039e5 	.word	0x000039e5
    4dac:	0000487d 	.word	0x0000487d
    4db0:	000047f1 	.word	0x000047f1
    4db4:	00003a71 	.word	0x00003a71
    4db8:	00006301 	.word	0x00006301
    4dbc:	00005171 	.word	0x00005171
    4dc0:	00003c91 	.word	0x00003c91
    4dc4:	200005b4 	.word	0x200005b4

00004dc8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    4dc8:	b580      	push	{r7, lr}
    4dca:	b084      	sub	sp, #16
    4dcc:	af00      	add	r7, sp, #0
    4dce:	6078      	str	r0, [r7, #4]
    4dd0:	000a      	movs	r2, r1
    4dd2:	1cbb      	adds	r3, r7, #2
    4dd4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4dd6:	687b      	ldr	r3, [r7, #4]
    4dd8:	681b      	ldr	r3, [r3, #0]
    4dda:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4ddc:	687b      	ldr	r3, [r7, #4]
    4dde:	79db      	ldrb	r3, [r3, #7]
    4de0:	2201      	movs	r2, #1
    4de2:	4053      	eors	r3, r2
    4de4:	b2db      	uxtb	r3, r3
    4de6:	2b00      	cmp	r3, #0
    4de8:	d001      	beq.n	4dee <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    4dea:	231c      	movs	r3, #28
    4dec:	e017      	b.n	4e1e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    4dee:	687b      	ldr	r3, [r7, #4]
    4df0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    4df2:	b29b      	uxth	r3, r3
    4df4:	2b00      	cmp	r3, #0
    4df6:	d001      	beq.n	4dfc <usart_write_wait+0x34>
		return STATUS_BUSY;
    4df8:	2305      	movs	r3, #5
    4dfa:	e010      	b.n	4e1e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4dfc:	687b      	ldr	r3, [r7, #4]
    4dfe:	0018      	movs	r0, r3
    4e00:	4b09      	ldr	r3, [pc, #36]	; (4e28 <usart_write_wait+0x60>)
    4e02:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    4e04:	68fb      	ldr	r3, [r7, #12]
    4e06:	1cba      	adds	r2, r7, #2
    4e08:	8812      	ldrh	r2, [r2, #0]
    4e0a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4e0c:	46c0      	nop			; (mov r8, r8)
    4e0e:	68fb      	ldr	r3, [r7, #12]
    4e10:	7e1b      	ldrb	r3, [r3, #24]
    4e12:	b2db      	uxtb	r3, r3
    4e14:	001a      	movs	r2, r3
    4e16:	2302      	movs	r3, #2
    4e18:	4013      	ands	r3, r2
    4e1a:	d0f8      	beq.n	4e0e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    4e1c:	2300      	movs	r3, #0
}
    4e1e:	0018      	movs	r0, r3
    4e20:	46bd      	mov	sp, r7
    4e22:	b004      	add	sp, #16
    4e24:	bd80      	pop	{r7, pc}
    4e26:	46c0      	nop			; (mov r8, r8)
    4e28:	00004859 	.word	0x00004859

00004e2c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    4e2c:	b580      	push	{r7, lr}
    4e2e:	b084      	sub	sp, #16
    4e30:	af00      	add	r7, sp, #0
    4e32:	6078      	str	r0, [r7, #4]
    4e34:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4e36:	687b      	ldr	r3, [r7, #4]
    4e38:	681b      	ldr	r3, [r3, #0]
    4e3a:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4e3c:	687b      	ldr	r3, [r7, #4]
    4e3e:	799b      	ldrb	r3, [r3, #6]
    4e40:	2201      	movs	r2, #1
    4e42:	4053      	eors	r3, r2
    4e44:	b2db      	uxtb	r3, r3
    4e46:	2b00      	cmp	r3, #0
    4e48:	d001      	beq.n	4e4e <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    4e4a:	231c      	movs	r3, #28
    4e4c:	e068      	b.n	4f20 <usart_read_wait+0xf4>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    4e4e:	687b      	ldr	r3, [r7, #4]
    4e50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    4e52:	b29b      	uxth	r3, r3
    4e54:	2b00      	cmp	r3, #0
    4e56:	d001      	beq.n	4e5c <usart_read_wait+0x30>
		return STATUS_BUSY;
    4e58:	2305      	movs	r3, #5
    4e5a:	e061      	b.n	4f20 <usart_read_wait+0xf4>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4e5c:	68fb      	ldr	r3, [r7, #12]
    4e5e:	7e1b      	ldrb	r3, [r3, #24]
    4e60:	b2db      	uxtb	r3, r3
    4e62:	001a      	movs	r2, r3
    4e64:	2304      	movs	r3, #4
    4e66:	4013      	ands	r3, r2
    4e68:	d101      	bne.n	4e6e <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    4e6a:	2305      	movs	r3, #5
    4e6c:	e058      	b.n	4f20 <usart_read_wait+0xf4>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4e6e:	687b      	ldr	r3, [r7, #4]
    4e70:	0018      	movs	r0, r3
    4e72:	4b2d      	ldr	r3, [pc, #180]	; (4f28 <usart_read_wait+0xfc>)
    4e74:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4e76:	68fb      	ldr	r3, [r7, #12]
    4e78:	8b5b      	ldrh	r3, [r3, #26]
    4e7a:	b29b      	uxth	r3, r3
    4e7c:	b2da      	uxtb	r2, r3
    4e7e:	230b      	movs	r3, #11
    4e80:	18fb      	adds	r3, r7, r3
    4e82:	213f      	movs	r1, #63	; 0x3f
    4e84:	400a      	ands	r2, r1
    4e86:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    4e88:	230b      	movs	r3, #11
    4e8a:	18fb      	adds	r3, r7, r3
    4e8c:	781b      	ldrb	r3, [r3, #0]
    4e8e:	2b00      	cmp	r3, #0
    4e90:	d040      	beq.n	4f14 <usart_read_wait+0xe8>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4e92:	230b      	movs	r3, #11
    4e94:	18fb      	adds	r3, r7, r3
    4e96:	781b      	ldrb	r3, [r3, #0]
    4e98:	2202      	movs	r2, #2
    4e9a:	4013      	ands	r3, r2
    4e9c:	d004      	beq.n	4ea8 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4e9e:	68fb      	ldr	r3, [r7, #12]
    4ea0:	2202      	movs	r2, #2
    4ea2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    4ea4:	231a      	movs	r3, #26
    4ea6:	e03b      	b.n	4f20 <usart_read_wait+0xf4>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4ea8:	230b      	movs	r3, #11
    4eaa:	18fb      	adds	r3, r7, r3
    4eac:	781b      	ldrb	r3, [r3, #0]
    4eae:	2204      	movs	r2, #4
    4eb0:	4013      	ands	r3, r2
    4eb2:	d004      	beq.n	4ebe <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4eb4:	68fb      	ldr	r3, [r7, #12]
    4eb6:	2204      	movs	r2, #4
    4eb8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    4eba:	231e      	movs	r3, #30
    4ebc:	e030      	b.n	4f20 <usart_read_wait+0xf4>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4ebe:	230b      	movs	r3, #11
    4ec0:	18fb      	adds	r3, r7, r3
    4ec2:	781b      	ldrb	r3, [r3, #0]
    4ec4:	2201      	movs	r2, #1
    4ec6:	4013      	ands	r3, r2
    4ec8:	d004      	beq.n	4ed4 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4eca:	68fb      	ldr	r3, [r7, #12]
    4ecc:	2201      	movs	r2, #1
    4ece:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    4ed0:	2313      	movs	r3, #19
    4ed2:	e025      	b.n	4f20 <usart_read_wait+0xf4>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4ed4:	230b      	movs	r3, #11
    4ed6:	18fb      	adds	r3, r7, r3
    4ed8:	781b      	ldrb	r3, [r3, #0]
    4eda:	2210      	movs	r2, #16
    4edc:	4013      	ands	r3, r2
    4ede:	d009      	beq.n	4ef4 <usart_read_wait+0xc8>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    4ee0:	68fb      	ldr	r3, [r7, #12]
    4ee2:	8b5b      	ldrh	r3, [r3, #26]
    4ee4:	b29b      	uxth	r3, r3
    4ee6:	2210      	movs	r2, #16
    4ee8:	4313      	orrs	r3, r2
    4eea:	b29a      	uxth	r2, r3
    4eec:	68fb      	ldr	r3, [r7, #12]
    4eee:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    4ef0:	2342      	movs	r3, #66	; 0x42
    4ef2:	e015      	b.n	4f20 <usart_read_wait+0xf4>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4ef4:	230b      	movs	r3, #11
    4ef6:	18fb      	adds	r3, r7, r3
    4ef8:	781b      	ldrb	r3, [r3, #0]
    4efa:	2220      	movs	r2, #32
    4efc:	4013      	ands	r3, r2
    4efe:	d009      	beq.n	4f14 <usart_read_wait+0xe8>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    4f00:	68fb      	ldr	r3, [r7, #12]
    4f02:	8b5b      	ldrh	r3, [r3, #26]
    4f04:	b29b      	uxth	r3, r3
    4f06:	2220      	movs	r2, #32
    4f08:	4313      	orrs	r3, r2
    4f0a:	b29a      	uxth	r2, r3
    4f0c:	68fb      	ldr	r3, [r7, #12]
    4f0e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    4f10:	2341      	movs	r3, #65	; 0x41
    4f12:	e005      	b.n	4f20 <usart_read_wait+0xf4>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    4f14:	68fb      	ldr	r3, [r7, #12]
    4f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    4f18:	b29a      	uxth	r2, r3
    4f1a:	683b      	ldr	r3, [r7, #0]
    4f1c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    4f1e:	2300      	movs	r3, #0
}
    4f20:	0018      	movs	r0, r3
    4f22:	46bd      	mov	sp, r7
    4f24:	b004      	add	sp, #16
    4f26:	bd80      	pop	{r7, pc}
    4f28:	00004859 	.word	0x00004859

00004f2c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus.
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    4f2c:	b580      	push	{r7, lr}
    4f2e:	b084      	sub	sp, #16
    4f30:	af00      	add	r7, sp, #0
    4f32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4f34:	687b      	ldr	r3, [r7, #4]
    4f36:	681b      	ldr	r3, [r3, #0]
    4f38:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4f3a:	68fb      	ldr	r3, [r7, #12]
    4f3c:	69db      	ldr	r3, [r3, #28]
    4f3e:	1e5a      	subs	r2, r3, #1
    4f40:	4193      	sbcs	r3, r2
    4f42:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    4f44:	0018      	movs	r0, r3
    4f46:	46bd      	mov	sp, r7
    4f48:	b004      	add	sp, #16
    4f4a:	bd80      	pop	{r7, pc}

00004f4c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    4f4c:	b580      	push	{r7, lr}
    4f4e:	b082      	sub	sp, #8
    4f50:	af00      	add	r7, sp, #0
    4f52:	6078      	str	r0, [r7, #4]
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4f54:	46c0      	nop			; (mov r8, r8)
    4f56:	687b      	ldr	r3, [r7, #4]
    4f58:	0018      	movs	r0, r3
    4f5a:	4b04      	ldr	r3, [pc, #16]	; (4f6c <_usart_wait_for_sync+0x20>)
    4f5c:	4798      	blx	r3
    4f5e:	1e03      	subs	r3, r0, #0
    4f60:	d1f9      	bne.n	4f56 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    4f62:	46c0      	nop			; (mov r8, r8)
    4f64:	46bd      	mov	sp, r7
    4f66:	b002      	add	sp, #8
    4f68:	bd80      	pop	{r7, pc}
    4f6a:	46c0      	nop			; (mov r8, r8)
    4f6c:	00004f2d 	.word	0x00004f2d

00004f70 <_usart_write_buffer>:
 */
void _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    4f70:	b580      	push	{r7, lr}
    4f72:	b086      	sub	sp, #24
    4f74:	af00      	add	r7, sp, #0
    4f76:	60f8      	str	r0, [r7, #12]
    4f78:	60b9      	str	r1, [r7, #8]
    4f7a:	1dbb      	adds	r3, r7, #6
    4f7c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4f7e:	68fb      	ldr	r3, [r7, #12]
    4f80:	681b      	ldr	r3, [r3, #0]
    4f82:	617b      	str	r3, [r7, #20]

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    4f84:	68fb      	ldr	r3, [r7, #12]
    4f86:	1dba      	adds	r2, r7, #6
    4f88:	8812      	ldrh	r2, [r2, #0]
    4f8a:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->tx_buffer_ptr              = tx_data;
    4f8c:	68fb      	ldr	r3, [r7, #12]
    4f8e:	68ba      	ldr	r2, [r7, #8]
    4f90:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    4f92:	68fb      	ldr	r3, [r7, #12]
    4f94:	2233      	movs	r2, #51	; 0x33
    4f96:	2105      	movs	r1, #5
    4f98:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    4f9a:	697b      	ldr	r3, [r7, #20]
    4f9c:	2201      	movs	r2, #1
    4f9e:	759a      	strb	r2, [r3, #22]
}
    4fa0:	46c0      	nop			; (mov r8, r8)
    4fa2:	46bd      	mov	sp, r7
    4fa4:	b006      	add	sp, #24
    4fa6:	bd80      	pop	{r7, pc}

00004fa8 <_usart_read_buffer>:
 */
void _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4fa8:	b580      	push	{r7, lr}
    4faa:	b086      	sub	sp, #24
    4fac:	af00      	add	r7, sp, #0
    4fae:	60f8      	str	r0, [r7, #12]
    4fb0:	60b9      	str	r1, [r7, #8]
    4fb2:	1dbb      	adds	r3, r7, #6
    4fb4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4fb6:	68fb      	ldr	r3, [r7, #12]
    4fb8:	681b      	ldr	r3, [r3, #0]
    4fba:	617b      	str	r3, [r7, #20]

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    4fbc:	68fb      	ldr	r3, [r7, #12]
    4fbe:	1dba      	adds	r2, r7, #6
    4fc0:	8812      	ldrh	r2, [r2, #0]
    4fc2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = rx_data;
    4fc4:	68fb      	ldr	r3, [r7, #12]
    4fc6:	68ba      	ldr	r2, [r7, #8]
    4fc8:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    4fca:	68fb      	ldr	r3, [r7, #12]
    4fcc:	2232      	movs	r2, #50	; 0x32
    4fce:	2105      	movs	r1, #5
    4fd0:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    4fd2:	697b      	ldr	r3, [r7, #20]
    4fd4:	2204      	movs	r2, #4
    4fd6:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    4fd8:	68fb      	ldr	r3, [r7, #12]
    4fda:	7a1b      	ldrb	r3, [r3, #8]
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d002      	beq.n	4fe6 <_usart_read_buffer+0x3e>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    4fe0:	697b      	ldr	r3, [r7, #20]
    4fe2:	2220      	movs	r2, #32
    4fe4:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    4fe6:	68fb      	ldr	r3, [r7, #12]
    4fe8:	7a5b      	ldrb	r3, [r3, #9]
    4fea:	2b00      	cmp	r3, #0
    4fec:	d002      	beq.n	4ff4 <_usart_read_buffer+0x4c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    4fee:	697b      	ldr	r3, [r7, #20]
    4ff0:	2208      	movs	r2, #8
    4ff2:	759a      	strb	r2, [r3, #22]
	}
#endif
}
    4ff4:	46c0      	nop			; (mov r8, r8)
    4ff6:	46bd      	mov	sp, r7
    4ff8:	b006      	add	sp, #24
    4ffa:	bd80      	pop	{r7, pc}

00004ffc <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    4ffc:	b580      	push	{r7, lr}
    4ffe:	b084      	sub	sp, #16
    5000:	af00      	add	r7, sp, #0
    5002:	60f8      	str	r0, [r7, #12]
    5004:	60b9      	str	r1, [r7, #8]
    5006:	1dfb      	adds	r3, r7, #7
    5008:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    500a:	1dfb      	adds	r3, r7, #7
    500c:	781b      	ldrb	r3, [r3, #0]
    500e:	68fa      	ldr	r2, [r7, #12]
    5010:	3302      	adds	r3, #2
    5012:	009b      	lsls	r3, r3, #2
    5014:	18d3      	adds	r3, r2, r3
    5016:	3304      	adds	r3, #4
    5018:	68ba      	ldr	r2, [r7, #8]
    501a:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    501c:	68fb      	ldr	r3, [r7, #12]
    501e:	2230      	movs	r2, #48	; 0x30
    5020:	5c9b      	ldrb	r3, [r3, r2]
    5022:	b25a      	sxtb	r2, r3
    5024:	1dfb      	adds	r3, r7, #7
    5026:	781b      	ldrb	r3, [r3, #0]
    5028:	2101      	movs	r1, #1
    502a:	4099      	lsls	r1, r3
    502c:	000b      	movs	r3, r1
    502e:	b25b      	sxtb	r3, r3
    5030:	4313      	orrs	r3, r2
    5032:	b25b      	sxtb	r3, r3
    5034:	b2d9      	uxtb	r1, r3
    5036:	68fb      	ldr	r3, [r7, #12]
    5038:	2230      	movs	r2, #48	; 0x30
    503a:	5499      	strb	r1, [r3, r2]
}
    503c:	46c0      	nop			; (mov r8, r8)
    503e:	46bd      	mov	sp, r7
    5040:	b004      	add	sp, #16
    5042:	bd80      	pop	{r7, pc}

00005044 <usart_write_job>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_job(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    5044:	b580      	push	{r7, lr}
    5046:	b082      	sub	sp, #8
    5048:	af00      	add	r7, sp, #0
    504a:	6078      	str	r0, [r7, #4]
    504c:	000a      	movs	r2, r1
    504e:	1cbb      	adds	r3, r7, #2
    5050:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    5052:	687b      	ldr	r3, [r7, #4]
    5054:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5056:	b29b      	uxth	r3, r3
    5058:	2b00      	cmp	r3, #0
    505a:	d001      	beq.n	5060 <usart_write_job+0x1c>
		return STATUS_BUSY;
    505c:	2305      	movs	r3, #5
    505e:	e00f      	b.n	5080 <usart_write_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5060:	687b      	ldr	r3, [r7, #4]
    5062:	79db      	ldrb	r3, [r3, #7]
    5064:	2201      	movs	r2, #1
    5066:	4053      	eors	r3, r2
    5068:	b2db      	uxtb	r3, r3
    506a:	2b00      	cmp	r3, #0
    506c:	d001      	beq.n	5072 <usart_write_job+0x2e>
		return STATUS_ERR_DENIED;
    506e:	231c      	movs	r3, #28
    5070:	e006      	b.n	5080 <usart_write_job+0x3c>
	}

	/* Call internal write buffer function with length 1 */
	_usart_write_buffer(module, (uint8_t *)&tx_data, 1);
    5072:	1cb9      	adds	r1, r7, #2
    5074:	687b      	ldr	r3, [r7, #4]
    5076:	2201      	movs	r2, #1
    5078:	0018      	movs	r0, r3
    507a:	4b03      	ldr	r3, [pc, #12]	; (5088 <usart_write_job+0x44>)
    507c:	4798      	blx	r3

	return STATUS_OK;
    507e:	2300      	movs	r3, #0
}
    5080:	0018      	movs	r0, r3
    5082:	46bd      	mov	sp, r7
    5084:	b002      	add	sp, #8
    5086:	bd80      	pop	{r7, pc}
    5088:	00004f71 	.word	0x00004f71

0000508c <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed,
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    508c:	b580      	push	{r7, lr}
    508e:	b082      	sub	sp, #8
    5090:	af00      	add	r7, sp, #0
    5092:	6078      	str	r0, [r7, #4]
    5094:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5096:	687b      	ldr	r3, [r7, #4]
    5098:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    509a:	b29b      	uxth	r3, r3
    509c:	2b00      	cmp	r3, #0
    509e:	d001      	beq.n	50a4 <usart_read_job+0x18>
		return STATUS_BUSY;
    50a0:	2305      	movs	r3, #5
    50a2:	e006      	b.n	50b2 <usart_read_job+0x26>
	}

	/* Call internal read buffer function with length 1 */
	_usart_read_buffer(module, (uint8_t *)rx_data, 1);
    50a4:	6839      	ldr	r1, [r7, #0]
    50a6:	687b      	ldr	r3, [r7, #4]
    50a8:	2201      	movs	r2, #1
    50aa:	0018      	movs	r0, r3
    50ac:	4b03      	ldr	r3, [pc, #12]	; (50bc <usart_read_job+0x30>)
    50ae:	4798      	blx	r3

	return STATUS_OK;
    50b0:	2300      	movs	r3, #0
}
    50b2:	0018      	movs	r0, r3
    50b4:	46bd      	mov	sp, r7
    50b6:	b002      	add	sp, #8
    50b8:	bd80      	pop	{r7, pc}
    50ba:	46c0      	nop			; (mov r8, r8)
    50bc:	00004fa9 	.word	0x00004fa9

000050c0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    50c0:	b580      	push	{r7, lr}
    50c2:	b084      	sub	sp, #16
    50c4:	af00      	add	r7, sp, #0
    50c6:	60f8      	str	r0, [r7, #12]
    50c8:	60b9      	str	r1, [r7, #8]
    50ca:	1dbb      	adds	r3, r7, #6
    50cc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	if (length == 0) {
    50ce:	1dbb      	adds	r3, r7, #6
    50d0:	881b      	ldrh	r3, [r3, #0]
    50d2:	2b00      	cmp	r3, #0
    50d4:	d101      	bne.n	50da <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    50d6:	2317      	movs	r3, #23
    50d8:	e017      	b.n	510a <usart_write_buffer_job+0x4a>
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    50da:	68fb      	ldr	r3, [r7, #12]
    50dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    50de:	b29b      	uxth	r3, r3
    50e0:	2b00      	cmp	r3, #0
    50e2:	d001      	beq.n	50e8 <usart_write_buffer_job+0x28>
		return STATUS_BUSY;
    50e4:	2305      	movs	r3, #5
    50e6:	e010      	b.n	510a <usart_write_buffer_job+0x4a>
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    50e8:	68fb      	ldr	r3, [r7, #12]
    50ea:	79db      	ldrb	r3, [r3, #7]
    50ec:	2201      	movs	r2, #1
    50ee:	4053      	eors	r3, r2
    50f0:	b2db      	uxtb	r3, r3
    50f2:	2b00      	cmp	r3, #0
    50f4:	d001      	beq.n	50fa <usart_write_buffer_job+0x3a>
		return STATUS_ERR_DENIED;
    50f6:	231c      	movs	r3, #28
    50f8:	e007      	b.n	510a <usart_write_buffer_job+0x4a>
	}

	/* Issue internal asynchronous write */
	_usart_write_buffer(module, tx_data, length);
    50fa:	1dbb      	adds	r3, r7, #6
    50fc:	881a      	ldrh	r2, [r3, #0]
    50fe:	68b9      	ldr	r1, [r7, #8]
    5100:	68fb      	ldr	r3, [r7, #12]
    5102:	0018      	movs	r0, r3
    5104:	4b03      	ldr	r3, [pc, #12]	; (5114 <usart_write_buffer_job+0x54>)
    5106:	4798      	blx	r3

	return STATUS_OK;
    5108:	2300      	movs	r3, #0
}
    510a:	0018      	movs	r0, r3
    510c:	46bd      	mov	sp, r7
    510e:	b004      	add	sp, #16
    5110:	bd80      	pop	{r7, pc}
    5112:	46c0      	nop			; (mov r8, r8)
    5114:	00004f71 	.word	0x00004f71

00005118 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5118:	b580      	push	{r7, lr}
    511a:	b084      	sub	sp, #16
    511c:	af00      	add	r7, sp, #0
    511e:	60f8      	str	r0, [r7, #12]
    5120:	60b9      	str	r1, [r7, #8]
    5122:	1dbb      	adds	r3, r7, #6
    5124:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    5126:	1dbb      	adds	r3, r7, #6
    5128:	881b      	ldrh	r3, [r3, #0]
    512a:	2b00      	cmp	r3, #0
    512c:	d101      	bne.n	5132 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    512e:	2317      	movs	r3, #23
    5130:	e017      	b.n	5162 <usart_read_buffer_job+0x4a>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5132:	68fb      	ldr	r3, [r7, #12]
    5134:	799b      	ldrb	r3, [r3, #6]
    5136:	2201      	movs	r2, #1
    5138:	4053      	eors	r3, r2
    513a:	b2db      	uxtb	r3, r3
    513c:	2b00      	cmp	r3, #0
    513e:	d001      	beq.n	5144 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5140:	231c      	movs	r3, #28
    5142:	e00e      	b.n	5162 <usart_read_buffer_job+0x4a>
	}

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    5144:	68fb      	ldr	r3, [r7, #12]
    5146:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5148:	b29b      	uxth	r3, r3
    514a:	2b00      	cmp	r3, #0
    514c:	d001      	beq.n	5152 <usart_read_buffer_job+0x3a>
		return STATUS_BUSY;
    514e:	2305      	movs	r3, #5
    5150:	e007      	b.n	5162 <usart_read_buffer_job+0x4a>
	}

	/* Issue internal asynchronous read */
	_usart_read_buffer(module, rx_data, length);
    5152:	1dbb      	adds	r3, r7, #6
    5154:	881a      	ldrh	r2, [r3, #0]
    5156:	68b9      	ldr	r1, [r7, #8]
    5158:	68fb      	ldr	r3, [r7, #12]
    515a:	0018      	movs	r0, r3
    515c:	4b03      	ldr	r3, [pc, #12]	; (516c <usart_read_buffer_job+0x54>)
    515e:	4798      	blx	r3

	return STATUS_OK;
    5160:	2300      	movs	r3, #0
}
    5162:	0018      	movs	r0, r3
    5164:	46bd      	mov	sp, r7
    5166:	b004      	add	sp, #16
    5168:	bd80      	pop	{r7, pc}
    516a:	46c0      	nop			; (mov r8, r8)
    516c:	00004fa9 	.word	0x00004fa9

00005170 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5170:	b580      	push	{r7, lr}
    5172:	b088      	sub	sp, #32
    5174:	af00      	add	r7, sp, #0
    5176:	0002      	movs	r2, r0
    5178:	1dfb      	adds	r3, r7, #7
    517a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    517c:	1dfb      	adds	r3, r7, #7
    517e:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    5180:	4bb0      	ldr	r3, [pc, #704]	; (5444 <_usart_interrupt_handler+0x2d4>)
    5182:	0092      	lsls	r2, r2, #2
    5184:	58d3      	ldr	r3, [r2, r3]
    5186:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5188:	69bb      	ldr	r3, [r7, #24]
    518a:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    518c:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    518e:	69bb      	ldr	r3, [r7, #24]
    5190:	0018      	movs	r0, r3
    5192:	4bad      	ldr	r3, [pc, #692]	; (5448 <_usart_interrupt_handler+0x2d8>)
    5194:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5196:	697b      	ldr	r3, [r7, #20]
    5198:	7e1b      	ldrb	r3, [r3, #24]
    519a:	b2da      	uxtb	r2, r3
    519c:	2312      	movs	r3, #18
    519e:	18fb      	adds	r3, r7, r3
    51a0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    51a2:	697b      	ldr	r3, [r7, #20]
    51a4:	7d9b      	ldrb	r3, [r3, #22]
    51a6:	b2db      	uxtb	r3, r3
    51a8:	b29a      	uxth	r2, r3
    51aa:	2312      	movs	r3, #18
    51ac:	18fb      	adds	r3, r7, r3
    51ae:	2112      	movs	r1, #18
    51b0:	1879      	adds	r1, r7, r1
    51b2:	8809      	ldrh	r1, [r1, #0]
    51b4:	400a      	ands	r2, r1
    51b6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    51b8:	69bb      	ldr	r3, [r7, #24]
    51ba:	2230      	movs	r2, #48	; 0x30
    51bc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    51be:	69ba      	ldr	r2, [r7, #24]
    51c0:	2131      	movs	r1, #49	; 0x31
    51c2:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    51c4:	4013      	ands	r3, r2
    51c6:	b2da      	uxtb	r2, r3
    51c8:	2310      	movs	r3, #16
    51ca:	18fb      	adds	r3, r7, r3
    51cc:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    51ce:	2312      	movs	r3, #18
    51d0:	18fb      	adds	r3, r7, r3
    51d2:	881b      	ldrh	r3, [r3, #0]
    51d4:	2201      	movs	r2, #1
    51d6:	4013      	ands	r3, r2
    51d8:	d044      	beq.n	5264 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    51da:	69bb      	ldr	r3, [r7, #24]
    51dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    51de:	b29b      	uxth	r3, r3
    51e0:	2b00      	cmp	r3, #0
    51e2:	d03c      	beq.n	525e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    51e4:	69bb      	ldr	r3, [r7, #24]
    51e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51e8:	781b      	ldrb	r3, [r3, #0]
    51ea:	b2da      	uxtb	r2, r3
    51ec:	231c      	movs	r3, #28
    51ee:	18fb      	adds	r3, r7, r3
    51f0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    51f2:	69bb      	ldr	r3, [r7, #24]
    51f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    51f6:	1c5a      	adds	r2, r3, #1
    51f8:	69bb      	ldr	r3, [r7, #24]
    51fa:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    51fc:	69bb      	ldr	r3, [r7, #24]
    51fe:	795b      	ldrb	r3, [r3, #5]
    5200:	2b01      	cmp	r3, #1
    5202:	d113      	bne.n	522c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5204:	69bb      	ldr	r3, [r7, #24]
    5206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5208:	781b      	ldrb	r3, [r3, #0]
    520a:	b2db      	uxtb	r3, r3
    520c:	021b      	lsls	r3, r3, #8
    520e:	b21a      	sxth	r2, r3
    5210:	231c      	movs	r3, #28
    5212:	18fb      	adds	r3, r7, r3
    5214:	2100      	movs	r1, #0
    5216:	5e5b      	ldrsh	r3, [r3, r1]
    5218:	4313      	orrs	r3, r2
    521a:	b21a      	sxth	r2, r3
    521c:	231c      	movs	r3, #28
    521e:	18fb      	adds	r3, r7, r3
    5220:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5222:	69bb      	ldr	r3, [r7, #24]
    5224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5226:	1c5a      	adds	r2, r3, #1
    5228:	69bb      	ldr	r3, [r7, #24]
    522a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    522c:	231c      	movs	r3, #28
    522e:	18fb      	adds	r3, r7, r3
    5230:	881b      	ldrh	r3, [r3, #0]
    5232:	05db      	lsls	r3, r3, #23
    5234:	0ddb      	lsrs	r3, r3, #23
    5236:	b29a      	uxth	r2, r3
    5238:	697b      	ldr	r3, [r7, #20]
    523a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    523c:	69bb      	ldr	r3, [r7, #24]
    523e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5240:	b29b      	uxth	r3, r3
    5242:	3b01      	subs	r3, #1
    5244:	b29b      	uxth	r3, r3
    5246:	69ba      	ldr	r2, [r7, #24]
    5248:	1c19      	adds	r1, r3, #0
    524a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    524c:	2b00      	cmp	r3, #0
    524e:	d109      	bne.n	5264 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5250:	697b      	ldr	r3, [r7, #20]
    5252:	2201      	movs	r2, #1
    5254:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5256:	697b      	ldr	r3, [r7, #20]
    5258:	2202      	movs	r2, #2
    525a:	759a      	strb	r2, [r3, #22]
    525c:	e002      	b.n	5264 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    525e:	697b      	ldr	r3, [r7, #20]
    5260:	2201      	movs	r2, #1
    5262:	751a      	strb	r2, [r3, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5264:	2312      	movs	r3, #18
    5266:	18fb      	adds	r3, r7, r3
    5268:	881b      	ldrh	r3, [r3, #0]
    526a:	2202      	movs	r2, #2
    526c:	4013      	ands	r3, r2
    526e:	d011      	beq.n	5294 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5270:	697b      	ldr	r3, [r7, #20]
    5272:	2202      	movs	r2, #2
    5274:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5276:	69bb      	ldr	r3, [r7, #24]
    5278:	2233      	movs	r2, #51	; 0x33
    527a:	2100      	movs	r1, #0
    527c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    527e:	2310      	movs	r3, #16
    5280:	18fb      	adds	r3, r7, r3
    5282:	881b      	ldrh	r3, [r3, #0]
    5284:	2201      	movs	r2, #1
    5286:	4013      	ands	r3, r2
    5288:	d004      	beq.n	5294 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    528a:	69bb      	ldr	r3, [r7, #24]
    528c:	68db      	ldr	r3, [r3, #12]
    528e:	69ba      	ldr	r2, [r7, #24]
    5290:	0010      	movs	r0, r2
    5292:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5294:	2312      	movs	r3, #18
    5296:	18fb      	adds	r3, r7, r3
    5298:	881b      	ldrh	r3, [r3, #0]
    529a:	2204      	movs	r2, #4
    529c:	4013      	ands	r3, r2
    529e:	d100      	bne.n	52a2 <_usart_interrupt_handler+0x132>
    52a0:	e0d7      	b.n	5452 <_usart_interrupt_handler+0x2e2>

		if (module->remaining_rx_buffer_length) {
    52a2:	69bb      	ldr	r3, [r7, #24]
    52a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    52a6:	b29b      	uxth	r3, r3
    52a8:	2b00      	cmp	r3, #0
    52aa:	d100      	bne.n	52ae <_usart_interrupt_handler+0x13e>
    52ac:	e0ce      	b.n	544c <_usart_interrupt_handler+0x2dc>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    52ae:	697b      	ldr	r3, [r7, #20]
    52b0:	8b5b      	ldrh	r3, [r3, #26]
    52b2:	b29b      	uxth	r3, r3
    52b4:	b2da      	uxtb	r2, r3
    52b6:	231f      	movs	r3, #31
    52b8:	18fb      	adds	r3, r7, r3
    52ba:	213f      	movs	r1, #63	; 0x3f
    52bc:	400a      	ands	r2, r1
    52be:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    52c0:	231f      	movs	r3, #31
    52c2:	18fb      	adds	r3, r7, r3
    52c4:	781b      	ldrb	r3, [r3, #0]
    52c6:	2208      	movs	r2, #8
    52c8:	4013      	ands	r3, r2
    52ca:	d007      	beq.n	52dc <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    52cc:	231f      	movs	r3, #31
    52ce:	18fb      	adds	r3, r7, r3
    52d0:	221f      	movs	r2, #31
    52d2:	18ba      	adds	r2, r7, r2
    52d4:	7812      	ldrb	r2, [r2, #0]
    52d6:	2108      	movs	r1, #8
    52d8:	438a      	bics	r2, r1
    52da:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    52dc:	231f      	movs	r3, #31
    52de:	18fb      	adds	r3, r7, r3
    52e0:	781b      	ldrb	r3, [r3, #0]
    52e2:	2b00      	cmp	r3, #0
    52e4:	d100      	bne.n	52e8 <_usart_interrupt_handler+0x178>
    52e6:	e069      	b.n	53bc <_usart_interrupt_handler+0x24c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    52e8:	231f      	movs	r3, #31
    52ea:	18fb      	adds	r3, r7, r3
    52ec:	781b      	ldrb	r3, [r3, #0]
    52ee:	2202      	movs	r2, #2
    52f0:	4013      	ands	r3, r2
    52f2:	d00c      	beq.n	530e <_usart_interrupt_handler+0x19e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    52f4:	69bb      	ldr	r3, [r7, #24]
    52f6:	2232      	movs	r2, #50	; 0x32
    52f8:	211a      	movs	r1, #26
    52fa:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    52fc:	697b      	ldr	r3, [r7, #20]
    52fe:	8b5b      	ldrh	r3, [r3, #26]
    5300:	b29b      	uxth	r3, r3
    5302:	2202      	movs	r2, #2
    5304:	4313      	orrs	r3, r2
    5306:	b29a      	uxth	r2, r3
    5308:	697b      	ldr	r3, [r7, #20]
    530a:	835a      	strh	r2, [r3, #26]
    530c:	e04a      	b.n	53a4 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    530e:	231f      	movs	r3, #31
    5310:	18fb      	adds	r3, r7, r3
    5312:	781b      	ldrb	r3, [r3, #0]
    5314:	2204      	movs	r2, #4
    5316:	4013      	ands	r3, r2
    5318:	d00c      	beq.n	5334 <_usart_interrupt_handler+0x1c4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    531a:	69bb      	ldr	r3, [r7, #24]
    531c:	2232      	movs	r2, #50	; 0x32
    531e:	211e      	movs	r1, #30
    5320:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    5322:	697b      	ldr	r3, [r7, #20]
    5324:	8b5b      	ldrh	r3, [r3, #26]
    5326:	b29b      	uxth	r3, r3
    5328:	2204      	movs	r2, #4
    532a:	4313      	orrs	r3, r2
    532c:	b29a      	uxth	r2, r3
    532e:	697b      	ldr	r3, [r7, #20]
    5330:	835a      	strh	r2, [r3, #26]
    5332:	e037      	b.n	53a4 <_usart_interrupt_handler+0x234>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5334:	231f      	movs	r3, #31
    5336:	18fb      	adds	r3, r7, r3
    5338:	781b      	ldrb	r3, [r3, #0]
    533a:	2201      	movs	r2, #1
    533c:	4013      	ands	r3, r2
    533e:	d00c      	beq.n	535a <_usart_interrupt_handler+0x1ea>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    5340:	69bb      	ldr	r3, [r7, #24]
    5342:	2232      	movs	r2, #50	; 0x32
    5344:	2113      	movs	r1, #19
    5346:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    5348:	697b      	ldr	r3, [r7, #20]
    534a:	8b5b      	ldrh	r3, [r3, #26]
    534c:	b29b      	uxth	r3, r3
    534e:	2201      	movs	r2, #1
    5350:	4313      	orrs	r3, r2
    5352:	b29a      	uxth	r2, r3
    5354:	697b      	ldr	r3, [r7, #20]
    5356:	835a      	strh	r2, [r3, #26]
    5358:	e024      	b.n	53a4 <_usart_interrupt_handler+0x234>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    535a:	231f      	movs	r3, #31
    535c:	18fb      	adds	r3, r7, r3
    535e:	781b      	ldrb	r3, [r3, #0]
    5360:	2210      	movs	r2, #16
    5362:	4013      	ands	r3, r2
    5364:	d00c      	beq.n	5380 <_usart_interrupt_handler+0x210>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5366:	69bb      	ldr	r3, [r7, #24]
    5368:	2232      	movs	r2, #50	; 0x32
    536a:	2142      	movs	r1, #66	; 0x42
    536c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    536e:	697b      	ldr	r3, [r7, #20]
    5370:	8b5b      	ldrh	r3, [r3, #26]
    5372:	b29b      	uxth	r3, r3
    5374:	2210      	movs	r2, #16
    5376:	4313      	orrs	r3, r2
    5378:	b29a      	uxth	r2, r3
    537a:	697b      	ldr	r3, [r7, #20]
    537c:	835a      	strh	r2, [r3, #26]
    537e:	e011      	b.n	53a4 <_usart_interrupt_handler+0x234>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5380:	231f      	movs	r3, #31
    5382:	18fb      	adds	r3, r7, r3
    5384:	781b      	ldrb	r3, [r3, #0]
    5386:	2220      	movs	r2, #32
    5388:	4013      	ands	r3, r2
    538a:	d00b      	beq.n	53a4 <_usart_interrupt_handler+0x234>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    538c:	69bb      	ldr	r3, [r7, #24]
    538e:	2232      	movs	r2, #50	; 0x32
    5390:	2141      	movs	r1, #65	; 0x41
    5392:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    5394:	697b      	ldr	r3, [r7, #20]
    5396:	8b5b      	ldrh	r3, [r3, #26]
    5398:	b29b      	uxth	r3, r3
    539a:	2220      	movs	r2, #32
    539c:	4313      	orrs	r3, r2
    539e:	b29a      	uxth	r2, r3
    53a0:	697b      	ldr	r3, [r7, #20]
    53a2:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    53a4:	2310      	movs	r3, #16
    53a6:	18fb      	adds	r3, r7, r3
    53a8:	881b      	ldrh	r3, [r3, #0]
    53aa:	2204      	movs	r2, #4
    53ac:	4013      	ands	r3, r2
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    53ae:	d050      	beq.n	5452 <_usart_interrupt_handler+0x2e2>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    53b0:	69bb      	ldr	r3, [r7, #24]
    53b2:	695b      	ldr	r3, [r3, #20]
    53b4:	69ba      	ldr	r2, [r7, #24]
    53b6:	0010      	movs	r0, r2
    53b8:	4798      	blx	r3
    53ba:	e04a      	b.n	5452 <_usart_interrupt_handler+0x2e2>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    53bc:	697b      	ldr	r3, [r7, #20]
    53be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    53c0:	b29a      	uxth	r2, r3
    53c2:	230e      	movs	r3, #14
    53c4:	18fb      	adds	r3, r7, r3
    53c6:	05d2      	lsls	r2, r2, #23
    53c8:	0dd2      	lsrs	r2, r2, #23
    53ca:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    53cc:	69bb      	ldr	r3, [r7, #24]
    53ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    53d0:	220e      	movs	r2, #14
    53d2:	18ba      	adds	r2, r7, r2
    53d4:	8812      	ldrh	r2, [r2, #0]
    53d6:	b2d2      	uxtb	r2, r2
    53d8:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    53da:	69bb      	ldr	r3, [r7, #24]
    53dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    53de:	1c5a      	adds	r2, r3, #1
    53e0:	69bb      	ldr	r3, [r7, #24]
    53e2:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    53e4:	69bb      	ldr	r3, [r7, #24]
    53e6:	795b      	ldrb	r3, [r3, #5]
    53e8:	2b01      	cmp	r3, #1
    53ea:	d10d      	bne.n	5408 <_usart_interrupt_handler+0x298>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    53ec:	69bb      	ldr	r3, [r7, #24]
    53ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    53f0:	220e      	movs	r2, #14
    53f2:	18ba      	adds	r2, r7, r2
    53f4:	8812      	ldrh	r2, [r2, #0]
    53f6:	0a12      	lsrs	r2, r2, #8
    53f8:	b292      	uxth	r2, r2
    53fa:	b2d2      	uxtb	r2, r2
    53fc:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    53fe:	69bb      	ldr	r3, [r7, #24]
    5400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5402:	1c5a      	adds	r2, r3, #1
    5404:	69bb      	ldr	r3, [r7, #24]
    5406:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5408:	69bb      	ldr	r3, [r7, #24]
    540a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    540c:	b29b      	uxth	r3, r3
    540e:	3b01      	subs	r3, #1
    5410:	b29b      	uxth	r3, r3
    5412:	69ba      	ldr	r2, [r7, #24]
    5414:	1c19      	adds	r1, r3, #0
    5416:	8591      	strh	r1, [r2, #44]	; 0x2c
    5418:	2b00      	cmp	r3, #0
    541a:	d11a      	bne.n	5452 <_usart_interrupt_handler+0x2e2>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    541c:	697b      	ldr	r3, [r7, #20]
    541e:	2204      	movs	r2, #4
    5420:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    5422:	69bb      	ldr	r3, [r7, #24]
    5424:	2232      	movs	r2, #50	; 0x32
    5426:	2100      	movs	r1, #0
    5428:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    542a:	2310      	movs	r3, #16
    542c:	18fb      	adds	r3, r7, r3
    542e:	881b      	ldrh	r3, [r3, #0]
    5430:	2202      	movs	r2, #2
    5432:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    5434:	d00d      	beq.n	5452 <_usart_interrupt_handler+0x2e2>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5436:	69bb      	ldr	r3, [r7, #24]
    5438:	691b      	ldr	r3, [r3, #16]
    543a:	69ba      	ldr	r2, [r7, #24]
    543c:	0010      	movs	r0, r2
    543e:	4798      	blx	r3
    5440:	e007      	b.n	5452 <_usart_interrupt_handler+0x2e2>
    5442:	46c0      	nop			; (mov r8, r8)
    5444:	200005b4 	.word	0x200005b4
    5448:	00004f4d 	.word	0x00004f4d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    544c:	697b      	ldr	r3, [r7, #20]
    544e:	2204      	movs	r2, #4
    5450:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5452:	2312      	movs	r3, #18
    5454:	18fb      	adds	r3, r7, r3
    5456:	881b      	ldrh	r3, [r3, #0]
    5458:	2210      	movs	r2, #16
    545a:	4013      	ands	r3, r2
    545c:	d010      	beq.n	5480 <_usart_interrupt_handler+0x310>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    545e:	697b      	ldr	r3, [r7, #20]
    5460:	2210      	movs	r2, #16
    5462:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5464:	697b      	ldr	r3, [r7, #20]
    5466:	2210      	movs	r2, #16
    5468:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    546a:	2310      	movs	r3, #16
    546c:	18fb      	adds	r3, r7, r3
    546e:	881b      	ldrh	r3, [r3, #0]
    5470:	2210      	movs	r2, #16
    5472:	4013      	ands	r3, r2
    5474:	d004      	beq.n	5480 <_usart_interrupt_handler+0x310>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5476:	69bb      	ldr	r3, [r7, #24]
    5478:	69db      	ldr	r3, [r3, #28]
    547a:	69ba      	ldr	r2, [r7, #24]
    547c:	0010      	movs	r0, r2
    547e:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5480:	2312      	movs	r3, #18
    5482:	18fb      	adds	r3, r7, r3
    5484:	881b      	ldrh	r3, [r3, #0]
    5486:	2220      	movs	r2, #32
    5488:	4013      	ands	r3, r2
    548a:	d010      	beq.n	54ae <_usart_interrupt_handler+0x33e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    548c:	697b      	ldr	r3, [r7, #20]
    548e:	2220      	movs	r2, #32
    5490:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5492:	697b      	ldr	r3, [r7, #20]
    5494:	2220      	movs	r2, #32
    5496:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5498:	2310      	movs	r3, #16
    549a:	18fb      	adds	r3, r7, r3
    549c:	881b      	ldrh	r3, [r3, #0]
    549e:	2208      	movs	r2, #8
    54a0:	4013      	ands	r3, r2
    54a2:	d004      	beq.n	54ae <_usart_interrupt_handler+0x33e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    54a4:	69bb      	ldr	r3, [r7, #24]
    54a6:	699b      	ldr	r3, [r3, #24]
    54a8:	69ba      	ldr	r2, [r7, #24]
    54aa:	0010      	movs	r0, r2
    54ac:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    54ae:	2312      	movs	r3, #18
    54b0:	18fb      	adds	r3, r7, r3
    54b2:	881b      	ldrh	r3, [r3, #0]
    54b4:	2208      	movs	r2, #8
    54b6:	4013      	ands	r3, r2
    54b8:	d010      	beq.n	54dc <_usart_interrupt_handler+0x36c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    54ba:	697b      	ldr	r3, [r7, #20]
    54bc:	2208      	movs	r2, #8
    54be:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    54c0:	697b      	ldr	r3, [r7, #20]
    54c2:	2208      	movs	r2, #8
    54c4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    54c6:	2310      	movs	r3, #16
    54c8:	18fb      	adds	r3, r7, r3
    54ca:	881b      	ldrh	r3, [r3, #0]
    54cc:	2220      	movs	r2, #32
    54ce:	4013      	ands	r3, r2
    54d0:	d004      	beq.n	54dc <_usart_interrupt_handler+0x36c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    54d2:	69bb      	ldr	r3, [r7, #24]
    54d4:	6a1b      	ldr	r3, [r3, #32]
    54d6:	69ba      	ldr	r2, [r7, #24]
    54d8:	0010      	movs	r0, r2
    54da:	4798      	blx	r3
		}
	}
#endif
}
    54dc:	46c0      	nop			; (mov r8, r8)
    54de:	46bd      	mov	sp, r7
    54e0:	b008      	add	sp, #32
    54e2:	bd80      	pop	{r7, pc}

000054e4 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    54e4:	b580      	push	{r7, lr}
    54e6:	b082      	sub	sp, #8
    54e8:	af00      	add	r7, sp, #0
    54ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    54ec:	687b      	ldr	r3, [r7, #4]
    54ee:	2201      	movs	r2, #1
    54f0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    54f2:	687b      	ldr	r3, [r7, #4]
    54f4:	2200      	movs	r2, #0
    54f6:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    54f8:	687b      	ldr	r3, [r7, #4]
    54fa:	2206      	movs	r2, #6
    54fc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    54fe:	687b      	ldr	r3, [r7, #4]
    5500:	2200      	movs	r2, #0
    5502:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5504:	687b      	ldr	r3, [r7, #4]
    5506:	2200      	movs	r2, #0
    5508:	725a      	strb	r2, [r3, #9]
}
    550a:	46c0      	nop			; (mov r8, r8)
    550c:	46bd      	mov	sp, r7
    550e:	b002      	add	sp, #8
    5510:	bd80      	pop	{r7, pc}
    5512:	46c0      	nop			; (mov r8, r8)

00005514 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5514:	b580      	push	{r7, lr}
    5516:	b082      	sub	sp, #8
    5518:	af00      	add	r7, sp, #0
    551a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    551c:	687b      	ldr	r3, [r7, #4]
    551e:	2200      	movs	r2, #0
    5520:	701a      	strb	r2, [r3, #0]
}
    5522:	46c0      	nop			; (mov r8, r8)
    5524:	46bd      	mov	sp, r7
    5526:	b002      	add	sp, #8
    5528:	bd80      	pop	{r7, pc}
    552a:	46c0      	nop			; (mov r8, r8)

0000552c <system_clock_source_osc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc32k_get_config_defaults(
		struct system_clock_source_osc32k_config *const config)
{
    552c:	b580      	push	{r7, lr}
    552e:	b082      	sub	sp, #8
    5530:	af00      	add	r7, sp, #0
    5532:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->enable_1khz_output  = true;
    5534:	687b      	ldr	r3, [r7, #4]
    5536:	2201      	movs	r2, #1
    5538:	705a      	strb	r2, [r3, #1]
	config->enable_32khz_output = true;
    553a:	687b      	ldr	r3, [r7, #4]
    553c:	2201      	movs	r2, #1
    553e:	709a      	strb	r2, [r3, #2]
	config->run_in_standby      = false;
    5540:	687b      	ldr	r3, [r7, #4]
    5542:	2200      	movs	r2, #0
    5544:	70da      	strb	r2, [r3, #3]
	config->on_demand           = true;
    5546:	687b      	ldr	r3, [r7, #4]
    5548:	2201      	movs	r2, #1
    554a:	711a      	strb	r2, [r3, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    554c:	687b      	ldr	r3, [r7, #4]
    554e:	2207      	movs	r2, #7
    5550:	701a      	strb	r2, [r3, #0]
	config->write_once          = false;
    5552:	687b      	ldr	r3, [r7, #4]
    5554:	2200      	movs	r2, #0
    5556:	715a      	strb	r2, [r3, #5]
}
    5558:	46c0      	nop			; (mov r8, r8)
    555a:	46bd      	mov	sp, r7
    555c:	b002      	add	sp, #8
    555e:	bd80      	pop	{r7, pc}

00005560 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    5560:	b580      	push	{r7, lr}
    5562:	b082      	sub	sp, #8
    5564:	af00      	add	r7, sp, #0
    5566:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5568:	687b      	ldr	r3, [r7, #4]
    556a:	2203      	movs	r2, #3
    556c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    556e:	687b      	ldr	r3, [r7, #4]
    5570:	2200      	movs	r2, #0
    5572:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5574:	687b      	ldr	r3, [r7, #4]
    5576:	2201      	movs	r2, #1
    5578:	709a      	strb	r2, [r3, #2]
}
    557a:	46c0      	nop			; (mov r8, r8)
    557c:	46bd      	mov	sp, r7
    557e:	b002      	add	sp, #8
    5580:	bd80      	pop	{r7, pc}
    5582:	46c0      	nop			; (mov r8, r8)

00005584 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    5584:	b580      	push	{r7, lr}
    5586:	b082      	sub	sp, #8
    5588:	af00      	add	r7, sp, #0
    558a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	2200      	movs	r2, #0
    5590:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5592:	687b      	ldr	r3, [r7, #4]
    5594:	2200      	movs	r2, #0
    5596:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5598:	687b      	ldr	r3, [r7, #4]
    559a:	2200      	movs	r2, #0
    559c:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	2200      	movs	r2, #0
    55a2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    55a4:	687b      	ldr	r3, [r7, #4]
    55a6:	2200      	movs	r2, #0
    55a8:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    55aa:	687b      	ldr	r3, [r7, #4]
    55ac:	2201      	movs	r2, #1
    55ae:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    55b0:	687b      	ldr	r3, [r7, #4]
    55b2:	2207      	movs	r2, #7
    55b4:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    55b6:	687b      	ldr	r3, [r7, #4]
    55b8:	223f      	movs	r2, #63	; 0x3f
    55ba:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    55bc:	687b      	ldr	r3, [r7, #4]
    55be:	2201      	movs	r2, #1
    55c0:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    55c2:	687b      	ldr	r3, [r7, #4]
    55c4:	2201      	movs	r2, #1
    55c6:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	2206      	movs	r2, #6
    55cc:	821a      	strh	r2, [r3, #16]
}
    55ce:	46c0      	nop			; (mov r8, r8)
    55d0:	46bd      	mov	sp, r7
    55d2:	b002      	add	sp, #8
    55d4:	bd80      	pop	{r7, pc}
    55d6:	46c0      	nop			; (mov r8, r8)

000055d8 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    55d8:	b580      	push	{r7, lr}
    55da:	b082      	sub	sp, #8
    55dc:	af00      	add	r7, sp, #0
    55de:	0002      	movs	r2, r0
    55e0:	1dfb      	adds	r3, r7, #7
    55e2:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    55e4:	4a03      	ldr	r2, [pc, #12]	; (55f4 <system_cpu_clock_set_divider+0x1c>)
    55e6:	1dfb      	adds	r3, r7, #7
    55e8:	781b      	ldrb	r3, [r3, #0]
    55ea:	7213      	strb	r3, [r2, #8]
}
    55ec:	46c0      	nop			; (mov r8, r8)
    55ee:	46bd      	mov	sp, r7
    55f0:	b002      	add	sp, #8
    55f2:	bd80      	pop	{r7, pc}
    55f4:	40000400 	.word	0x40000400

000055f8 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    55f8:	b580      	push	{r7, lr}
    55fa:	b082      	sub	sp, #8
    55fc:	af00      	add	r7, sp, #0
    55fe:	0002      	movs	r2, r0
    5600:	1dfb      	adds	r3, r7, #7
    5602:	701a      	strb	r2, [r3, #0]
    5604:	1dbb      	adds	r3, r7, #6
    5606:	1c0a      	adds	r2, r1, #0
    5608:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    560a:	1dfb      	adds	r3, r7, #7
    560c:	781b      	ldrb	r3, [r3, #0]
    560e:	2b01      	cmp	r3, #1
    5610:	d008      	beq.n	5624 <system_apb_clock_set_divider+0x2c>
    5612:	2b02      	cmp	r3, #2
    5614:	d00b      	beq.n	562e <system_apb_clock_set_divider+0x36>
    5616:	2b00      	cmp	r3, #0
    5618:	d10e      	bne.n	5638 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    561a:	4a0b      	ldr	r2, [pc, #44]	; (5648 <system_apb_clock_set_divider+0x50>)
    561c:	1dbb      	adds	r3, r7, #6
    561e:	781b      	ldrb	r3, [r3, #0]
    5620:	7253      	strb	r3, [r2, #9]
			break;
    5622:	e00b      	b.n	563c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    5624:	4a08      	ldr	r2, [pc, #32]	; (5648 <system_apb_clock_set_divider+0x50>)
    5626:	1dbb      	adds	r3, r7, #6
    5628:	781b      	ldrb	r3, [r3, #0]
    562a:	7293      	strb	r3, [r2, #10]
			break;
    562c:	e006      	b.n	563c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    562e:	4a06      	ldr	r2, [pc, #24]	; (5648 <system_apb_clock_set_divider+0x50>)
    5630:	1dbb      	adds	r3, r7, #6
    5632:	781b      	ldrb	r3, [r3, #0]
    5634:	72d3      	strb	r3, [r2, #11]
			break;
    5636:	e001      	b.n	563c <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5638:	2317      	movs	r3, #23
    563a:	e000      	b.n	563e <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    563c:	2300      	movs	r3, #0
}
    563e:	0018      	movs	r0, r3
    5640:	46bd      	mov	sp, r7
    5642:	b002      	add	sp, #8
    5644:	bd80      	pop	{r7, pc}
    5646:	46c0      	nop			; (mov r8, r8)
    5648:	40000400 	.word	0x40000400

0000564c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    564c:	b580      	push	{r7, lr}
    564e:	b082      	sub	sp, #8
    5650:	af00      	add	r7, sp, #0
    5652:	0002      	movs	r2, r0
    5654:	1dfb      	adds	r3, r7, #7
    5656:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5658:	4a08      	ldr	r2, [pc, #32]	; (567c <system_flash_set_waitstates+0x30>)
    565a:	1dfb      	adds	r3, r7, #7
    565c:	781b      	ldrb	r3, [r3, #0]
    565e:	210f      	movs	r1, #15
    5660:	400b      	ands	r3, r1
    5662:	b2d9      	uxtb	r1, r3
    5664:	6853      	ldr	r3, [r2, #4]
    5666:	200f      	movs	r0, #15
    5668:	4001      	ands	r1, r0
    566a:	0049      	lsls	r1, r1, #1
    566c:	201e      	movs	r0, #30
    566e:	4383      	bics	r3, r0
    5670:	430b      	orrs	r3, r1
    5672:	6053      	str	r3, [r2, #4]
}
    5674:	46c0      	nop			; (mov r8, r8)
    5676:	46bd      	mov	sp, r7
    5678:	b002      	add	sp, #8
    567a:	bd80      	pop	{r7, pc}
    567c:	41004000 	.word	0x41004000

00005680 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5680:	b580      	push	{r7, lr}
    5682:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5684:	46c0      	nop			; (mov r8, r8)
    5686:	4b04      	ldr	r3, [pc, #16]	; (5698 <_system_dfll_wait_for_sync+0x18>)
    5688:	68db      	ldr	r3, [r3, #12]
    568a:	2210      	movs	r2, #16
    568c:	4013      	ands	r3, r2
    568e:	d0fa      	beq.n	5686 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5690:	46c0      	nop			; (mov r8, r8)
    5692:	46bd      	mov	sp, r7
    5694:	bd80      	pop	{r7, pc}
    5696:	46c0      	nop			; (mov r8, r8)
    5698:	40000800 	.word	0x40000800

0000569c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    569c:	b580      	push	{r7, lr}
    569e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    56a0:	4a0c      	ldr	r2, [pc, #48]	; (56d4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    56a2:	4b0d      	ldr	r3, [pc, #52]	; (56d8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    56a4:	681b      	ldr	r3, [r3, #0]
    56a6:	b29b      	uxth	r3, r3
    56a8:	2180      	movs	r1, #128	; 0x80
    56aa:	438b      	bics	r3, r1
    56ac:	b29b      	uxth	r3, r3
    56ae:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    56b0:	4b0a      	ldr	r3, [pc, #40]	; (56dc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    56b2:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    56b4:	4a07      	ldr	r2, [pc, #28]	; (56d4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    56b6:	4b08      	ldr	r3, [pc, #32]	; (56d8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    56b8:	689b      	ldr	r3, [r3, #8]
    56ba:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    56bc:	4a05      	ldr	r2, [pc, #20]	; (56d4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    56be:	4b06      	ldr	r3, [pc, #24]	; (56d8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    56c0:	685b      	ldr	r3, [r3, #4]
    56c2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    56c4:	4a03      	ldr	r2, [pc, #12]	; (56d4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    56c6:	4b04      	ldr	r3, [pc, #16]	; (56d8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    56c8:	681b      	ldr	r3, [r3, #0]
    56ca:	b29b      	uxth	r3, r3
    56cc:	8493      	strh	r3, [r2, #36]	; 0x24
}
    56ce:	46c0      	nop			; (mov r8, r8)
    56d0:	46bd      	mov	sp, r7
    56d2:	bd80      	pop	{r7, pc}
    56d4:	40000800 	.word	0x40000800
    56d8:	2000053c 	.word	0x2000053c
    56dc:	00005681 	.word	0x00005681

000056e0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    56e0:	b580      	push	{r7, lr}
    56e2:	b082      	sub	sp, #8
    56e4:	af00      	add	r7, sp, #0
    56e6:	0002      	movs	r2, r0
    56e8:	1dfb      	adds	r3, r7, #7
    56ea:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    56ec:	1dfb      	adds	r3, r7, #7
    56ee:	781b      	ldrb	r3, [r3, #0]
    56f0:	2b08      	cmp	r3, #8
    56f2:	d840      	bhi.n	5776 <system_clock_source_get_hz+0x96>
    56f4:	009a      	lsls	r2, r3, #2
    56f6:	4b22      	ldr	r3, [pc, #136]	; (5780 <system_clock_source_get_hz+0xa0>)
    56f8:	18d3      	adds	r3, r2, r3
    56fa:	681b      	ldr	r3, [r3, #0]
    56fc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    56fe:	4b21      	ldr	r3, [pc, #132]	; (5784 <system_clock_source_get_hz+0xa4>)
    5700:	691b      	ldr	r3, [r3, #16]
    5702:	e039      	b.n	5778 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5704:	4b20      	ldr	r3, [pc, #128]	; (5788 <system_clock_source_get_hz+0xa8>)
    5706:	6a1b      	ldr	r3, [r3, #32]
    5708:	059b      	lsls	r3, r3, #22
    570a:	0f9b      	lsrs	r3, r3, #30
    570c:	b2db      	uxtb	r3, r3
    570e:	001a      	movs	r2, r3
    5710:	4b1e      	ldr	r3, [pc, #120]	; (578c <system_clock_source_get_hz+0xac>)
    5712:	40d3      	lsrs	r3, r2
    5714:	e030      	b.n	5778 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5716:	2380      	movs	r3, #128	; 0x80
    5718:	021b      	lsls	r3, r3, #8
    571a:	e02d      	b.n	5778 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    571c:	2380      	movs	r3, #128	; 0x80
    571e:	021b      	lsls	r3, r3, #8
    5720:	e02a      	b.n	5778 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5722:	4b18      	ldr	r3, [pc, #96]	; (5784 <system_clock_source_get_hz+0xa4>)
    5724:	695b      	ldr	r3, [r3, #20]
    5726:	e027      	b.n	5778 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5728:	4b16      	ldr	r3, [pc, #88]	; (5784 <system_clock_source_get_hz+0xa4>)
    572a:	681b      	ldr	r3, [r3, #0]
    572c:	2202      	movs	r2, #2
    572e:	4013      	ands	r3, r2
    5730:	d101      	bne.n	5736 <system_clock_source_get_hz+0x56>
			return 0;
    5732:	2300      	movs	r3, #0
    5734:	e020      	b.n	5778 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5736:	4b16      	ldr	r3, [pc, #88]	; (5790 <system_clock_source_get_hz+0xb0>)
    5738:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    573a:	4b12      	ldr	r3, [pc, #72]	; (5784 <system_clock_source_get_hz+0xa4>)
    573c:	681b      	ldr	r3, [r3, #0]
    573e:	2204      	movs	r2, #4
    5740:	4013      	ands	r3, r2
    5742:	d009      	beq.n	5758 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5744:	2000      	movs	r0, #0
    5746:	4b13      	ldr	r3, [pc, #76]	; (5794 <system_clock_source_get_hz+0xb4>)
    5748:	4798      	blx	r3
    574a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    574c:	4b0d      	ldr	r3, [pc, #52]	; (5784 <system_clock_source_get_hz+0xa4>)
    574e:	689b      	ldr	r3, [r3, #8]
    5750:	041b      	lsls	r3, r3, #16
    5752:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5754:	4353      	muls	r3, r2
    5756:	e00f      	b.n	5778 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    5758:	4b0f      	ldr	r3, [pc, #60]	; (5798 <system_clock_source_get_hz+0xb8>)
    575a:	e00d      	b.n	5778 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    575c:	4a0a      	ldr	r2, [pc, #40]	; (5788 <system_clock_source_get_hz+0xa8>)
    575e:	2350      	movs	r3, #80	; 0x50
    5760:	5cd3      	ldrb	r3, [r2, r3]
    5762:	b2db      	uxtb	r3, r3
    5764:	001a      	movs	r2, r3
    5766:	2304      	movs	r3, #4
    5768:	4013      	ands	r3, r2
    576a:	d101      	bne.n	5770 <system_clock_source_get_hz+0x90>
			return 0;
    576c:	2300      	movs	r3, #0
    576e:	e003      	b.n	5778 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    5770:	4b04      	ldr	r3, [pc, #16]	; (5784 <system_clock_source_get_hz+0xa4>)
    5772:	68db      	ldr	r3, [r3, #12]
    5774:	e000      	b.n	5778 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    5776:	2300      	movs	r3, #0
	}
}
    5778:	0018      	movs	r0, r3
    577a:	46bd      	mov	sp, r7
    577c:	b002      	add	sp, #8
    577e:	bd80      	pop	{r7, pc}
    5780:	000082e4 	.word	0x000082e4
    5784:	2000053c 	.word	0x2000053c
    5788:	40000800 	.word	0x40000800
    578c:	007a1200 	.word	0x007a1200
    5790:	00005681 	.word	0x00005681
    5794:	00006141 	.word	0x00006141
    5798:	02dc6c00 	.word	0x02dc6c00

0000579c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    579c:	b580      	push	{r7, lr}
    579e:	b084      	sub	sp, #16
    57a0:	af00      	add	r7, sp, #0
    57a2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    57a4:	4b1a      	ldr	r3, [pc, #104]	; (5810 <system_clock_source_osc8m_set_config+0x74>)
    57a6:	6a1b      	ldr	r3, [r3, #32]
    57a8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    57aa:	687b      	ldr	r3, [r7, #4]
    57ac:	781b      	ldrb	r3, [r3, #0]
    57ae:	1c1a      	adds	r2, r3, #0
    57b0:	2303      	movs	r3, #3
    57b2:	4013      	ands	r3, r2
    57b4:	b2da      	uxtb	r2, r3
    57b6:	230d      	movs	r3, #13
    57b8:	18fb      	adds	r3, r7, r3
    57ba:	2103      	movs	r1, #3
    57bc:	400a      	ands	r2, r1
    57be:	0010      	movs	r0, r2
    57c0:	781a      	ldrb	r2, [r3, #0]
    57c2:	2103      	movs	r1, #3
    57c4:	438a      	bics	r2, r1
    57c6:	1c11      	adds	r1, r2, #0
    57c8:	1c02      	adds	r2, r0, #0
    57ca:	430a      	orrs	r2, r1
    57cc:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    57ce:	687b      	ldr	r3, [r7, #4]
    57d0:	789a      	ldrb	r2, [r3, #2]
    57d2:	230c      	movs	r3, #12
    57d4:	18fb      	adds	r3, r7, r3
    57d6:	01d0      	lsls	r0, r2, #7
    57d8:	781a      	ldrb	r2, [r3, #0]
    57da:	217f      	movs	r1, #127	; 0x7f
    57dc:	400a      	ands	r2, r1
    57de:	1c11      	adds	r1, r2, #0
    57e0:	1c02      	adds	r2, r0, #0
    57e2:	430a      	orrs	r2, r1
    57e4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	785a      	ldrb	r2, [r3, #1]
    57ea:	230c      	movs	r3, #12
    57ec:	18fb      	adds	r3, r7, r3
    57ee:	2101      	movs	r1, #1
    57f0:	400a      	ands	r2, r1
    57f2:	0190      	lsls	r0, r2, #6
    57f4:	781a      	ldrb	r2, [r3, #0]
    57f6:	2140      	movs	r1, #64	; 0x40
    57f8:	438a      	bics	r2, r1
    57fa:	1c11      	adds	r1, r2, #0
    57fc:	1c02      	adds	r2, r0, #0
    57fe:	430a      	orrs	r2, r1
    5800:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    5802:	4b03      	ldr	r3, [pc, #12]	; (5810 <system_clock_source_osc8m_set_config+0x74>)
    5804:	68fa      	ldr	r2, [r7, #12]
    5806:	621a      	str	r2, [r3, #32]
}
    5808:	46c0      	nop			; (mov r8, r8)
    580a:	46bd      	mov	sp, r7
    580c:	b004      	add	sp, #16
    580e:	bd80      	pop	{r7, pc}
    5810:	40000800 	.word	0x40000800

00005814 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    5814:	b580      	push	{r7, lr}
    5816:	b084      	sub	sp, #16
    5818:	af00      	add	r7, sp, #0
    581a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    581c:	4b2f      	ldr	r3, [pc, #188]	; (58dc <system_clock_source_osc32k_set_config+0xc8>)
    581e:	699b      	ldr	r3, [r3, #24]
    5820:	60fb      	str	r3, [r7, #12]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    5822:	687b      	ldr	r3, [r7, #4]
    5824:	785a      	ldrb	r2, [r3, #1]
    5826:	230c      	movs	r3, #12
    5828:	18fb      	adds	r3, r7, r3
    582a:	2101      	movs	r1, #1
    582c:	400a      	ands	r2, r1
    582e:	00d0      	lsls	r0, r2, #3
    5830:	781a      	ldrb	r2, [r3, #0]
    5832:	2108      	movs	r1, #8
    5834:	438a      	bics	r2, r1
    5836:	1c11      	adds	r1, r2, #0
    5838:	1c02      	adds	r2, r0, #0
    583a:	430a      	orrs	r2, r1
    583c:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K    = config->enable_32khz_output;
    583e:	687b      	ldr	r3, [r7, #4]
    5840:	789a      	ldrb	r2, [r3, #2]
    5842:	230c      	movs	r3, #12
    5844:	18fb      	adds	r3, r7, r3
    5846:	2101      	movs	r1, #1
    5848:	400a      	ands	r2, r1
    584a:	0090      	lsls	r0, r2, #2
    584c:	781a      	ldrb	r2, [r3, #0]
    584e:	2104      	movs	r1, #4
    5850:	438a      	bics	r2, r1
    5852:	1c11      	adds	r1, r2, #0
    5854:	1c02      	adds	r2, r0, #0
    5856:	430a      	orrs	r2, r1
    5858:	701a      	strb	r2, [r3, #0]
	temp.bit.STARTUP  = config->startup_time;
    585a:	687b      	ldr	r3, [r7, #4]
    585c:	781b      	ldrb	r3, [r3, #0]
    585e:	1c1a      	adds	r2, r3, #0
    5860:	2307      	movs	r3, #7
    5862:	4013      	ands	r3, r2
    5864:	b2da      	uxtb	r2, r3
    5866:	230d      	movs	r3, #13
    5868:	18fb      	adds	r3, r7, r3
    586a:	2107      	movs	r1, #7
    586c:	400a      	ands	r2, r1
    586e:	0010      	movs	r0, r2
    5870:	781a      	ldrb	r2, [r3, #0]
    5872:	2107      	movs	r1, #7
    5874:	438a      	bics	r2, r1
    5876:	1c11      	adds	r1, r2, #0
    5878:	1c02      	adds	r2, r0, #0
    587a:	430a      	orrs	r2, r1
    587c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    587e:	687b      	ldr	r3, [r7, #4]
    5880:	791a      	ldrb	r2, [r3, #4]
    5882:	230c      	movs	r3, #12
    5884:	18fb      	adds	r3, r7, r3
    5886:	01d0      	lsls	r0, r2, #7
    5888:	781a      	ldrb	r2, [r3, #0]
    588a:	217f      	movs	r1, #127	; 0x7f
    588c:	400a      	ands	r2, r1
    588e:	1c11      	adds	r1, r2, #0
    5890:	1c02      	adds	r2, r0, #0
    5892:	430a      	orrs	r2, r1
    5894:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5896:	687b      	ldr	r3, [r7, #4]
    5898:	78da      	ldrb	r2, [r3, #3]
    589a:	230c      	movs	r3, #12
    589c:	18fb      	adds	r3, r7, r3
    589e:	2101      	movs	r1, #1
    58a0:	400a      	ands	r2, r1
    58a2:	0190      	lsls	r0, r2, #6
    58a4:	781a      	ldrb	r2, [r3, #0]
    58a6:	2140      	movs	r1, #64	; 0x40
    58a8:	438a      	bics	r2, r1
    58aa:	1c11      	adds	r1, r2, #0
    58ac:	1c02      	adds	r2, r0, #0
    58ae:	430a      	orrs	r2, r1
    58b0:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    58b2:	687b      	ldr	r3, [r7, #4]
    58b4:	795a      	ldrb	r2, [r3, #5]
    58b6:	230d      	movs	r3, #13
    58b8:	18fb      	adds	r3, r7, r3
    58ba:	2101      	movs	r1, #1
    58bc:	400a      	ands	r2, r1
    58be:	0110      	lsls	r0, r2, #4
    58c0:	781a      	ldrb	r2, [r3, #0]
    58c2:	2110      	movs	r1, #16
    58c4:	438a      	bics	r2, r1
    58c6:	1c11      	adds	r1, r2, #0
    58c8:	1c02      	adds	r2, r0, #0
    58ca:	430a      	orrs	r2, r1
    58cc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC32K  = temp;
    58ce:	4b03      	ldr	r3, [pc, #12]	; (58dc <system_clock_source_osc32k_set_config+0xc8>)
    58d0:	68fa      	ldr	r2, [r7, #12]
    58d2:	619a      	str	r2, [r3, #24]
}
    58d4:	46c0      	nop			; (mov r8, r8)
    58d6:	46bd      	mov	sp, r7
    58d8:	b004      	add	sp, #16
    58da:	bd80      	pop	{r7, pc}
    58dc:	40000800 	.word	0x40000800

000058e0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    58e0:	b580      	push	{r7, lr}
    58e2:	b082      	sub	sp, #8
    58e4:	af00      	add	r7, sp, #0
    58e6:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    58e8:	687b      	ldr	r3, [r7, #4]
    58ea:	7a1b      	ldrb	r3, [r3, #8]
    58ec:	029b      	lsls	r3, r3, #10
    58ee:	041b      	lsls	r3, r3, #16
    58f0:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    58f2:	687b      	ldr	r3, [r7, #4]
    58f4:	895b      	ldrh	r3, [r3, #10]
    58f6:	059b      	lsls	r3, r3, #22
    58f8:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    58fa:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    58fc:	4b23      	ldr	r3, [pc, #140]	; (598c <system_clock_source_dfll_set_config+0xac>)
    58fe:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5900:	687b      	ldr	r3, [r7, #4]
    5902:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    5904:	687b      	ldr	r3, [r7, #4]
    5906:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5908:	4313      	orrs	r3, r2
    590a:	b2db      	uxtb	r3, r3
    590c:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    590e:	687b      	ldr	r3, [r7, #4]
    5910:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    5912:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    5914:	687a      	ldr	r2, [r7, #4]
    5916:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5918:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    591a:	687b      	ldr	r3, [r7, #4]
    591c:	785b      	ldrb	r3, [r3, #1]
    591e:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    5920:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    5922:	4b1a      	ldr	r3, [pc, #104]	; (598c <system_clock_source_dfll_set_config+0xac>)
    5924:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5926:	687b      	ldr	r3, [r7, #4]
    5928:	781b      	ldrb	r3, [r3, #0]
    592a:	2b04      	cmp	r3, #4
    592c:	d116      	bne.n	595c <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    592e:	687b      	ldr	r3, [r7, #4]
    5930:	7b1b      	ldrb	r3, [r3, #12]
    5932:	069b      	lsls	r3, r3, #26
    5934:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5936:	687b      	ldr	r3, [r7, #4]
    5938:	89db      	ldrh	r3, [r3, #14]
    593a:	041b      	lsls	r3, r3, #16
    593c:	0019      	movs	r1, r3
    593e:	4b14      	ldr	r3, [pc, #80]	; (5990 <system_clock_source_dfll_set_config+0xb0>)
    5940:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5942:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5944:	687a      	ldr	r2, [r7, #4]
    5946:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5948:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    594a:	4b10      	ldr	r3, [pc, #64]	; (598c <system_clock_source_dfll_set_config+0xac>)
    594c:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    594e:	4b0f      	ldr	r3, [pc, #60]	; (598c <system_clock_source_dfll_set_config+0xac>)
    5950:	681b      	ldr	r3, [r3, #0]
    5952:	687a      	ldr	r2, [r7, #4]
    5954:	7812      	ldrb	r2, [r2, #0]
    5956:	431a      	orrs	r2, r3
    5958:	4b0c      	ldr	r3, [pc, #48]	; (598c <system_clock_source_dfll_set_config+0xac>)
    595a:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    595c:	687b      	ldr	r3, [r7, #4]
    595e:	781b      	ldrb	r3, [r3, #0]
    5960:	2b20      	cmp	r3, #32
    5962:	d10e      	bne.n	5982 <system_clock_source_dfll_set_config+0xa2>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5964:	687b      	ldr	r3, [r7, #4]
    5966:	8a1b      	ldrh	r3, [r3, #16]
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    5968:	001a      	movs	r2, r3
    596a:	4b08      	ldr	r3, [pc, #32]	; (598c <system_clock_source_dfll_set_config+0xac>)
    596c:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    596e:	4b07      	ldr	r3, [pc, #28]	; (598c <system_clock_source_dfll_set_config+0xac>)
    5970:	681b      	ldr	r3, [r3, #0]
    5972:	687a      	ldr	r2, [r7, #4]
    5974:	7812      	ldrb	r2, [r2, #0]
    5976:	4313      	orrs	r3, r2
    5978:	2280      	movs	r2, #128	; 0x80
    597a:	00d2      	lsls	r2, r2, #3
    597c:	431a      	orrs	r2, r3
    597e:	4b03      	ldr	r3, [pc, #12]	; (598c <system_clock_source_dfll_set_config+0xac>)
    5980:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5982:	46c0      	nop			; (mov r8, r8)
    5984:	46bd      	mov	sp, r7
    5986:	b002      	add	sp, #8
    5988:	bd80      	pop	{r7, pc}
    598a:	46c0      	nop			; (mov r8, r8)
    598c:	2000053c 	.word	0x2000053c
    5990:	03ff0000 	.word	0x03ff0000

00005994 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5994:	b580      	push	{r7, lr}
    5996:	b082      	sub	sp, #8
    5998:	af00      	add	r7, sp, #0
    599a:	0002      	movs	r2, r0
    599c:	1dfb      	adds	r3, r7, #7
    599e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    59a0:	1dfb      	adds	r3, r7, #7
    59a2:	781b      	ldrb	r3, [r3, #0]
    59a4:	2b08      	cmp	r3, #8
    59a6:	d83b      	bhi.n	5a20 <system_clock_source_enable+0x8c>
    59a8:	009a      	lsls	r2, r3, #2
    59aa:	4b21      	ldr	r3, [pc, #132]	; (5a30 <system_clock_source_enable+0x9c>)
    59ac:	18d3      	adds	r3, r2, r3
    59ae:	681b      	ldr	r3, [r3, #0]
    59b0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    59b2:	4b20      	ldr	r3, [pc, #128]	; (5a34 <system_clock_source_enable+0xa0>)
    59b4:	4a1f      	ldr	r2, [pc, #124]	; (5a34 <system_clock_source_enable+0xa0>)
    59b6:	6a12      	ldr	r2, [r2, #32]
    59b8:	2102      	movs	r1, #2
    59ba:	430a      	orrs	r2, r1
    59bc:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    59be:	2300      	movs	r3, #0
    59c0:	e031      	b.n	5a26 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    59c2:	4b1c      	ldr	r3, [pc, #112]	; (5a34 <system_clock_source_enable+0xa0>)
    59c4:	4a1b      	ldr	r2, [pc, #108]	; (5a34 <system_clock_source_enable+0xa0>)
    59c6:	6992      	ldr	r2, [r2, #24]
    59c8:	2102      	movs	r1, #2
    59ca:	430a      	orrs	r2, r1
    59cc:	619a      	str	r2, [r3, #24]
		break;
    59ce:	e029      	b.n	5a24 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    59d0:	4a18      	ldr	r2, [pc, #96]	; (5a34 <system_clock_source_enable+0xa0>)
    59d2:	4b18      	ldr	r3, [pc, #96]	; (5a34 <system_clock_source_enable+0xa0>)
    59d4:	8a1b      	ldrh	r3, [r3, #16]
    59d6:	b29b      	uxth	r3, r3
    59d8:	2102      	movs	r1, #2
    59da:	430b      	orrs	r3, r1
    59dc:	b29b      	uxth	r3, r3
    59de:	8213      	strh	r3, [r2, #16]
		break;
    59e0:	e020      	b.n	5a24 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    59e2:	4a14      	ldr	r2, [pc, #80]	; (5a34 <system_clock_source_enable+0xa0>)
    59e4:	4b13      	ldr	r3, [pc, #76]	; (5a34 <system_clock_source_enable+0xa0>)
    59e6:	8a9b      	ldrh	r3, [r3, #20]
    59e8:	b29b      	uxth	r3, r3
    59ea:	2102      	movs	r1, #2
    59ec:	430b      	orrs	r3, r1
    59ee:	b29b      	uxth	r3, r3
    59f0:	8293      	strh	r3, [r2, #20]
		break;
    59f2:	e017      	b.n	5a24 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    59f4:	4b10      	ldr	r3, [pc, #64]	; (5a38 <system_clock_source_enable+0xa4>)
    59f6:	681b      	ldr	r3, [r3, #0]
    59f8:	2202      	movs	r2, #2
    59fa:	431a      	orrs	r2, r3
    59fc:	4b0e      	ldr	r3, [pc, #56]	; (5a38 <system_clock_source_enable+0xa4>)
    59fe:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5a00:	4b0e      	ldr	r3, [pc, #56]	; (5a3c <system_clock_source_enable+0xa8>)
    5a02:	4798      	blx	r3
		break;
    5a04:	e00e      	b.n	5a24 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5a06:	4a0b      	ldr	r2, [pc, #44]	; (5a34 <system_clock_source_enable+0xa0>)
    5a08:	490a      	ldr	r1, [pc, #40]	; (5a34 <system_clock_source_enable+0xa0>)
    5a0a:	2344      	movs	r3, #68	; 0x44
    5a0c:	5ccb      	ldrb	r3, [r1, r3]
    5a0e:	b2db      	uxtb	r3, r3
    5a10:	2102      	movs	r1, #2
    5a12:	430b      	orrs	r3, r1
    5a14:	b2d9      	uxtb	r1, r3
    5a16:	2344      	movs	r3, #68	; 0x44
    5a18:	54d1      	strb	r1, [r2, r3]
		break;
    5a1a:	e003      	b.n	5a24 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5a1c:	2300      	movs	r3, #0
    5a1e:	e002      	b.n	5a26 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5a20:	2317      	movs	r3, #23
    5a22:	e000      	b.n	5a26 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    5a24:	2300      	movs	r3, #0
}
    5a26:	0018      	movs	r0, r3
    5a28:	46bd      	mov	sp, r7
    5a2a:	b002      	add	sp, #8
    5a2c:	bd80      	pop	{r7, pc}
    5a2e:	46c0      	nop			; (mov r8, r8)
    5a30:	00008308 	.word	0x00008308
    5a34:	40000800 	.word	0x40000800
    5a38:	2000053c 	.word	0x2000053c
    5a3c:	0000569d 	.word	0x0000569d

00005a40 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5a40:	b580      	push	{r7, lr}
    5a42:	b084      	sub	sp, #16
    5a44:	af00      	add	r7, sp, #0
    5a46:	0002      	movs	r2, r0
    5a48:	1dfb      	adds	r3, r7, #7
    5a4a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    5a4c:	2300      	movs	r3, #0
    5a4e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    5a50:	1dfb      	adds	r3, r7, #7
    5a52:	781b      	ldrb	r3, [r3, #0]
    5a54:	2b08      	cmp	r3, #8
    5a56:	d821      	bhi.n	5a9c <system_clock_source_is_ready+0x5c>
    5a58:	009a      	lsls	r2, r3, #2
    5a5a:	4b18      	ldr	r3, [pc, #96]	; (5abc <system_clock_source_is_ready+0x7c>)
    5a5c:	18d3      	adds	r3, r2, r3
    5a5e:	681b      	ldr	r3, [r3, #0]
    5a60:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5a62:	2308      	movs	r3, #8
    5a64:	60fb      	str	r3, [r7, #12]
		break;
    5a66:	e01b      	b.n	5aa0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    5a68:	2304      	movs	r3, #4
    5a6a:	60fb      	str	r3, [r7, #12]
		break;
    5a6c:	e018      	b.n	5aa0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    5a6e:	2301      	movs	r3, #1
    5a70:	60fb      	str	r3, [r7, #12]
		break;
    5a72:	e015      	b.n	5aa0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5a74:	2302      	movs	r3, #2
    5a76:	60fb      	str	r3, [r7, #12]
		break;
    5a78:	e012      	b.n	5aa0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    5a7a:	23d0      	movs	r3, #208	; 0xd0
    5a7c:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    5a7e:	e00f      	b.n	5aa0 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    5a80:	4a0f      	ldr	r2, [pc, #60]	; (5ac0 <system_clock_source_is_ready+0x80>)
    5a82:	2350      	movs	r3, #80	; 0x50
    5a84:	5cd3      	ldrb	r3, [r2, r3]
    5a86:	b2db      	uxtb	r3, r3
    5a88:	001a      	movs	r2, r3
    5a8a:	2303      	movs	r3, #3
    5a8c:	4013      	ands	r3, r2
    5a8e:	3b03      	subs	r3, #3
    5a90:	425a      	negs	r2, r3
    5a92:	4153      	adcs	r3, r2
    5a94:	b2db      	uxtb	r3, r3
    5a96:	e00c      	b.n	5ab2 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    5a98:	2301      	movs	r3, #1
    5a9a:	e00a      	b.n	5ab2 <system_clock_source_is_ready+0x72>

	default:
		return false;
    5a9c:	2300      	movs	r3, #0
    5a9e:	e008      	b.n	5ab2 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5aa0:	4b07      	ldr	r3, [pc, #28]	; (5ac0 <system_clock_source_is_ready+0x80>)
    5aa2:	68db      	ldr	r3, [r3, #12]
    5aa4:	68fa      	ldr	r2, [r7, #12]
    5aa6:	401a      	ands	r2, r3
    5aa8:	68fb      	ldr	r3, [r7, #12]
    5aaa:	1ad3      	subs	r3, r2, r3
    5aac:	425a      	negs	r2, r3
    5aae:	4153      	adcs	r3, r2
    5ab0:	b2db      	uxtb	r3, r3
}
    5ab2:	0018      	movs	r0, r3
    5ab4:	46bd      	mov	sp, r7
    5ab6:	b004      	add	sp, #16
    5ab8:	bd80      	pop	{r7, pc}
    5aba:	46c0      	nop			; (mov r8, r8)
    5abc:	0000832c 	.word	0x0000832c
    5ac0:	40000800 	.word	0x40000800

00005ac4 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    5ac4:	b580      	push	{r7, lr}
    5ac6:	b0a4      	sub	sp, #144	; 0x90
    5ac8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5aca:	4b74      	ldr	r3, [pc, #464]	; (5c9c <system_clock_init+0x1d8>)
    5acc:	22c2      	movs	r2, #194	; 0xc2
    5ace:	00d2      	lsls	r2, r2, #3
    5ad0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    5ad2:	2002      	movs	r0, #2
    5ad4:	4b72      	ldr	r3, [pc, #456]	; (5ca0 <system_clock_init+0x1dc>)
    5ad6:	4798      	blx	r3
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    5ad8:	4a70      	ldr	r2, [pc, #448]	; (5c9c <system_clock_init+0x1d8>)
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);
    5ada:	4b72      	ldr	r3, [pc, #456]	; (5ca4 <system_clock_init+0x1e0>)
    5adc:	681b      	ldr	r3, [r3, #0]
    5ade:	099b      	lsrs	r3, r3, #6
#endif


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
    5ae0:	b2db      	uxtb	r3, r3
    5ae2:	1c19      	adds	r1, r3, #0
    5ae4:	237f      	movs	r3, #127	; 0x7f
    5ae6:	400b      	ands	r3, r1
    5ae8:	b2d9      	uxtb	r1, r3
    5aea:	6993      	ldr	r3, [r2, #24]
    5aec:	207f      	movs	r0, #127	; 0x7f
    5aee:	4001      	ands	r1, r0
    5af0:	0409      	lsls	r1, r1, #16
    5af2:	486d      	ldr	r0, [pc, #436]	; (5ca8 <system_clock_init+0x1e4>)
    5af4:	4003      	ands	r3, r0
    5af6:	430b      	orrs	r3, r1
    5af8:	6193      	str	r3, [r2, #24]
			(*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> SYSCTRL_FUSES_OSC32K_Pos);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);
    5afa:	2388      	movs	r3, #136	; 0x88
    5afc:	18fb      	adds	r3, r7, r3
    5afe:	0018      	movs	r0, r3
    5b00:	4b6a      	ldr	r3, [pc, #424]	; (5cac <system_clock_init+0x1e8>)
    5b02:	4798      	blx	r3

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    5b04:	2388      	movs	r3, #136	; 0x88
    5b06:	18fb      	adds	r3, r7, r3
    5b08:	2207      	movs	r2, #7
    5b0a:	701a      	strb	r2, [r3, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
    5b0c:	2388      	movs	r3, #136	; 0x88
    5b0e:	18fb      	adds	r3, r7, r3
    5b10:	2201      	movs	r2, #1
    5b12:	705a      	strb	r2, [r3, #1]
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
    5b14:	2388      	movs	r3, #136	; 0x88
    5b16:	18fb      	adds	r3, r7, r3
    5b18:	2201      	movs	r2, #1
    5b1a:	709a      	strb	r2, [r3, #2]
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
    5b1c:	2388      	movs	r3, #136	; 0x88
    5b1e:	18fb      	adds	r3, r7, r3
    5b20:	2201      	movs	r2, #1
    5b22:	711a      	strb	r2, [r3, #4]
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;
    5b24:	2388      	movs	r3, #136	; 0x88
    5b26:	18fb      	adds	r3, r7, r3
    5b28:	2200      	movs	r2, #0
    5b2a:	70da      	strb	r2, [r3, #3]

	system_clock_source_osc32k_set_config(&osc32k_conf);
    5b2c:	2388      	movs	r3, #136	; 0x88
    5b2e:	18fb      	adds	r3, r7, r3
    5b30:	0018      	movs	r0, r3
    5b32:	4b5f      	ldr	r3, [pc, #380]	; (5cb0 <system_clock_init+0x1ec>)
    5b34:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    5b36:	2004      	movs	r0, #4
    5b38:	4b5e      	ldr	r3, [pc, #376]	; (5cb4 <system_clock_init+0x1f0>)
    5b3a:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    5b3c:	2374      	movs	r3, #116	; 0x74
    5b3e:	18fb      	adds	r3, r7, r3
    5b40:	0018      	movs	r0, r3
    5b42:	4b5d      	ldr	r3, [pc, #372]	; (5cb8 <system_clock_init+0x1f4>)
    5b44:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5b46:	2374      	movs	r3, #116	; 0x74
    5b48:	18fb      	adds	r3, r7, r3
    5b4a:	2204      	movs	r2, #4
    5b4c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    5b4e:	2374      	movs	r3, #116	; 0x74
    5b50:	18fb      	adds	r3, r7, r3
    5b52:	2200      	movs	r2, #0
    5b54:	705a      	strb	r2, [r3, #1]
		dfll_conf.coarse_value = CONF_CLOCK_DFLL_COARSE_VALUE;
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5b56:	2374      	movs	r3, #116	; 0x74
    5b58:	18fb      	adds	r3, r7, r3
    5b5a:	2200      	movs	r2, #0
    5b5c:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5b5e:	2374      	movs	r3, #116	; 0x74
    5b60:	18fb      	adds	r3, r7, r3
    5b62:	2200      	movs	r2, #0
    5b64:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5b66:	2374      	movs	r3, #116	; 0x74
    5b68:	18fb      	adds	r3, r7, r3
    5b6a:	2200      	movs	r2, #0
    5b6c:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5b6e:	2374      	movs	r3, #116	; 0x74
    5b70:	18fb      	adds	r3, r7, r3
    5b72:	2200      	movs	r2, #0
    5b74:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5b76:	2374      	movs	r3, #116	; 0x74
    5b78:	18fb      	adds	r3, r7, r3
    5b7a:	22b7      	movs	r2, #183	; 0xb7
    5b7c:	00d2      	lsls	r2, r2, #3
    5b7e:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5b80:	2374      	movs	r3, #116	; 0x74
    5b82:	18fb      	adds	r3, r7, r3
    5b84:	2207      	movs	r2, #7
    5b86:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5b88:	2374      	movs	r3, #116	; 0x74
    5b8a:	18fb      	adds	r3, r7, r3
    5b8c:	223f      	movs	r2, #63	; 0x3f
    5b8e:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5b90:	2374      	movs	r3, #116	; 0x74
    5b92:	18fb      	adds	r3, r7, r3
    5b94:	0018      	movs	r0, r3
    5b96:	4b49      	ldr	r3, [pc, #292]	; (5cbc <system_clock_init+0x1f8>)
    5b98:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    5b9a:	2370      	movs	r3, #112	; 0x70
    5b9c:	18fb      	adds	r3, r7, r3
    5b9e:	0018      	movs	r0, r3
    5ba0:	4b47      	ldr	r3, [pc, #284]	; (5cc0 <system_clock_init+0x1fc>)
    5ba2:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5ba4:	2370      	movs	r3, #112	; 0x70
    5ba6:	18fb      	adds	r3, r7, r3
    5ba8:	2200      	movs	r2, #0
    5baa:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    5bac:	2370      	movs	r3, #112	; 0x70
    5bae:	18fb      	adds	r3, r7, r3
    5bb0:	2201      	movs	r2, #1
    5bb2:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    5bb4:	2370      	movs	r3, #112	; 0x70
    5bb6:	18fb      	adds	r3, r7, r3
    5bb8:	2201      	movs	r2, #1
    5bba:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5bbc:	2370      	movs	r3, #112	; 0x70
    5bbe:	18fb      	adds	r3, r7, r3
    5bc0:	0018      	movs	r0, r3
    5bc2:	4b40      	ldr	r3, [pc, #256]	; (5cc4 <system_clock_init+0x200>)
    5bc4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5bc6:	2006      	movs	r0, #6
    5bc8:	4b3a      	ldr	r3, [pc, #232]	; (5cb4 <system_clock_init+0x1f0>)
    5bca:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5bcc:	4b3e      	ldr	r3, [pc, #248]	; (5cc8 <system_clock_init+0x204>)
    5bce:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5bd0:	2358      	movs	r3, #88	; 0x58
    5bd2:	18fb      	adds	r3, r7, r3
    5bd4:	0018      	movs	r0, r3
    5bd6:	4b3d      	ldr	r3, [pc, #244]	; (5ccc <system_clock_init+0x208>)
    5bd8:	4798      	blx	r3
    5bda:	2358      	movs	r3, #88	; 0x58
    5bdc:	18fb      	adds	r3, r7, r3
    5bde:	2204      	movs	r2, #4
    5be0:	701a      	strb	r2, [r3, #0]
    5be2:	2358      	movs	r3, #88	; 0x58
    5be4:	18fb      	adds	r3, r7, r3
    5be6:	2201      	movs	r2, #1
    5be8:	605a      	str	r2, [r3, #4]
    5bea:	2358      	movs	r3, #88	; 0x58
    5bec:	18fb      	adds	r3, r7, r3
    5bee:	2200      	movs	r2, #0
    5bf0:	721a      	strb	r2, [r3, #8]
    5bf2:	2358      	movs	r3, #88	; 0x58
    5bf4:	18fb      	adds	r3, r7, r3
    5bf6:	2200      	movs	r2, #0
    5bf8:	725a      	strb	r2, [r3, #9]
    5bfa:	2358      	movs	r3, #88	; 0x58
    5bfc:	18fb      	adds	r3, r7, r3
    5bfe:	0019      	movs	r1, r3
    5c00:	2001      	movs	r0, #1
    5c02:	4b33      	ldr	r3, [pc, #204]	; (5cd0 <system_clock_init+0x20c>)
    5c04:	4798      	blx	r3
    5c06:	2001      	movs	r0, #1
    5c08:	4b32      	ldr	r3, [pc, #200]	; (5cd4 <system_clock_init+0x210>)
    5c0a:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    5c0c:	230c      	movs	r3, #12
    5c0e:	18fb      	adds	r3, r7, r3
    5c10:	0018      	movs	r0, r3
    5c12:	4b31      	ldr	r3, [pc, #196]	; (5cd8 <system_clock_init+0x214>)
    5c14:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5c16:	230c      	movs	r3, #12
    5c18:	18fb      	adds	r3, r7, r3
    5c1a:	2201      	movs	r2, #1
    5c1c:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    5c1e:	230c      	movs	r3, #12
    5c20:	18fb      	adds	r3, r7, r3
    5c22:	0019      	movs	r1, r3
    5c24:	2000      	movs	r0, #0
    5c26:	4b2d      	ldr	r3, [pc, #180]	; (5cdc <system_clock_init+0x218>)
    5c28:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    5c2a:	2000      	movs	r0, #0
    5c2c:	4b2c      	ldr	r3, [pc, #176]	; (5ce0 <system_clock_init+0x21c>)
    5c2e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5c30:	2007      	movs	r0, #7
    5c32:	4b20      	ldr	r3, [pc, #128]	; (5cb4 <system_clock_init+0x1f0>)
    5c34:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5c36:	46c0      	nop			; (mov r8, r8)
    5c38:	2007      	movs	r0, #7
    5c3a:	4b2a      	ldr	r3, [pc, #168]	; (5ce4 <system_clock_init+0x220>)
    5c3c:	4798      	blx	r3
    5c3e:	0003      	movs	r3, r0
    5c40:	001a      	movs	r2, r3
    5c42:	2301      	movs	r3, #1
    5c44:	4053      	eors	r3, r2
    5c46:	b2db      	uxtb	r3, r3
    5c48:	2b00      	cmp	r3, #0
    5c4a:	d1f5      	bne.n	5c38 <system_clock_init+0x174>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    5c4c:	2000      	movs	r0, #0
    5c4e:	4b26      	ldr	r3, [pc, #152]	; (5ce8 <system_clock_init+0x224>)
    5c50:	4798      	blx	r3

#ifdef FEATURE_SYSTEM_CLOCK_FAILURE_DETECT
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);
#endif

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    5c52:	2100      	movs	r1, #0
    5c54:	2000      	movs	r0, #0
    5c56:	4b25      	ldr	r3, [pc, #148]	; (5cec <system_clock_init+0x228>)
    5c58:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    5c5a:	2100      	movs	r1, #0
    5c5c:	2001      	movs	r0, #1
    5c5e:	4b23      	ldr	r3, [pc, #140]	; (5cec <system_clock_init+0x228>)
    5c60:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5c62:	003b      	movs	r3, r7
    5c64:	0018      	movs	r0, r3
    5c66:	4b19      	ldr	r3, [pc, #100]	; (5ccc <system_clock_init+0x208>)
    5c68:	4798      	blx	r3
    5c6a:	003b      	movs	r3, r7
    5c6c:	2207      	movs	r2, #7
    5c6e:	701a      	strb	r2, [r3, #0]
    5c70:	003b      	movs	r3, r7
    5c72:	2201      	movs	r2, #1
    5c74:	605a      	str	r2, [r3, #4]
    5c76:	003b      	movs	r3, r7
    5c78:	2200      	movs	r2, #0
    5c7a:	721a      	strb	r2, [r3, #8]
    5c7c:	003b      	movs	r3, r7
    5c7e:	2200      	movs	r2, #0
    5c80:	725a      	strb	r2, [r3, #9]
    5c82:	003b      	movs	r3, r7
    5c84:	0019      	movs	r1, r3
    5c86:	2000      	movs	r0, #0
    5c88:	4b11      	ldr	r3, [pc, #68]	; (5cd0 <system_clock_init+0x20c>)
    5c8a:	4798      	blx	r3
    5c8c:	2000      	movs	r0, #0
    5c8e:	4b11      	ldr	r3, [pc, #68]	; (5cd4 <system_clock_init+0x210>)
    5c90:	4798      	blx	r3
#endif
}
    5c92:	46c0      	nop			; (mov r8, r8)
    5c94:	46bd      	mov	sp, r7
    5c96:	b024      	add	sp, #144	; 0x90
    5c98:	bd80      	pop	{r7, pc}
    5c9a:	46c0      	nop			; (mov r8, r8)
    5c9c:	40000800 	.word	0x40000800
    5ca0:	0000564d 	.word	0x0000564d
    5ca4:	00806024 	.word	0x00806024
    5ca8:	ff80ffff 	.word	0xff80ffff
    5cac:	0000552d 	.word	0x0000552d
    5cb0:	00005815 	.word	0x00005815
    5cb4:	00005995 	.word	0x00005995
    5cb8:	00005585 	.word	0x00005585
    5cbc:	000058e1 	.word	0x000058e1
    5cc0:	00005561 	.word	0x00005561
    5cc4:	0000579d 	.word	0x0000579d
    5cc8:	00005d95 	.word	0x00005d95
    5ccc:	000054e5 	.word	0x000054e5
    5cd0:	00005dc5 	.word	0x00005dc5
    5cd4:	00005ee9 	.word	0x00005ee9
    5cd8:	00005515 	.word	0x00005515
    5cdc:	0000601d 	.word	0x0000601d
    5ce0:	00006061 	.word	0x00006061
    5ce4:	00005a41 	.word	0x00005a41
    5ce8:	000055d9 	.word	0x000055d9
    5cec:	000055f9 	.word	0x000055f9

00005cf0 <system_gclk_is_syncing>:
 *
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    5cf0:	b580      	push	{r7, lr}
    5cf2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    5cf4:	4b05      	ldr	r3, [pc, #20]	; (5d0c <system_gclk_is_syncing+0x1c>)
    5cf6:	785b      	ldrb	r3, [r3, #1]
    5cf8:	b2db      	uxtb	r3, r3
    5cfa:	b25b      	sxtb	r3, r3
    5cfc:	2b00      	cmp	r3, #0
    5cfe:	da01      	bge.n	5d04 <system_gclk_is_syncing+0x14>
		return true;
    5d00:	2301      	movs	r3, #1
    5d02:	e000      	b.n	5d06 <system_gclk_is_syncing+0x16>
	}

	return false;
    5d04:	2300      	movs	r3, #0
}
    5d06:	0018      	movs	r0, r3
    5d08:	46bd      	mov	sp, r7
    5d0a:	bd80      	pop	{r7, pc}
    5d0c:	40000c00 	.word	0x40000c00

00005d10 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5d10:	b580      	push	{r7, lr}
    5d12:	b082      	sub	sp, #8
    5d14:	af00      	add	r7, sp, #0
    5d16:	0002      	movs	r2, r0
    5d18:	6039      	str	r1, [r7, #0]
    5d1a:	1dfb      	adds	r3, r7, #7
    5d1c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5d1e:	1dfb      	adds	r3, r7, #7
    5d20:	781b      	ldrb	r3, [r3, #0]
    5d22:	2b01      	cmp	r3, #1
    5d24:	d00a      	beq.n	5d3c <system_apb_clock_set_mask+0x2c>
    5d26:	2b02      	cmp	r3, #2
    5d28:	d00f      	beq.n	5d4a <system_apb_clock_set_mask+0x3a>
    5d2a:	2b00      	cmp	r3, #0
    5d2c:	d114      	bne.n	5d58 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5d2e:	4b0e      	ldr	r3, [pc, #56]	; (5d68 <system_apb_clock_set_mask+0x58>)
    5d30:	4a0d      	ldr	r2, [pc, #52]	; (5d68 <system_apb_clock_set_mask+0x58>)
    5d32:	6991      	ldr	r1, [r2, #24]
    5d34:	683a      	ldr	r2, [r7, #0]
    5d36:	430a      	orrs	r2, r1
    5d38:	619a      	str	r2, [r3, #24]
			break;
    5d3a:	e00f      	b.n	5d5c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5d3c:	4b0a      	ldr	r3, [pc, #40]	; (5d68 <system_apb_clock_set_mask+0x58>)
    5d3e:	4a0a      	ldr	r2, [pc, #40]	; (5d68 <system_apb_clock_set_mask+0x58>)
    5d40:	69d1      	ldr	r1, [r2, #28]
    5d42:	683a      	ldr	r2, [r7, #0]
    5d44:	430a      	orrs	r2, r1
    5d46:	61da      	str	r2, [r3, #28]
			break;
    5d48:	e008      	b.n	5d5c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5d4a:	4b07      	ldr	r3, [pc, #28]	; (5d68 <system_apb_clock_set_mask+0x58>)
    5d4c:	4a06      	ldr	r2, [pc, #24]	; (5d68 <system_apb_clock_set_mask+0x58>)
    5d4e:	6a11      	ldr	r1, [r2, #32]
    5d50:	683a      	ldr	r2, [r7, #0]
    5d52:	430a      	orrs	r2, r1
    5d54:	621a      	str	r2, [r3, #32]
			break;
    5d56:	e001      	b.n	5d5c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5d58:	2317      	movs	r3, #23
    5d5a:	e000      	b.n	5d5e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5d5c:	2300      	movs	r3, #0
}
    5d5e:	0018      	movs	r0, r3
    5d60:	46bd      	mov	sp, r7
    5d62:	b002      	add	sp, #8
    5d64:	bd80      	pop	{r7, pc}
    5d66:	46c0      	nop			; (mov r8, r8)
    5d68:	40000400 	.word	0x40000400

00005d6c <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    5d6c:	b580      	push	{r7, lr}
    5d6e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5d70:	4b02      	ldr	r3, [pc, #8]	; (5d7c <system_interrupt_enter_critical_section+0x10>)
    5d72:	4798      	blx	r3
}
    5d74:	46c0      	nop			; (mov r8, r8)
    5d76:	46bd      	mov	sp, r7
    5d78:	bd80      	pop	{r7, pc}
    5d7a:	46c0      	nop			; (mov r8, r8)
    5d7c:	00002f49 	.word	0x00002f49

00005d80 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    5d80:	b580      	push	{r7, lr}
    5d82:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5d84:	4b02      	ldr	r3, [pc, #8]	; (5d90 <system_interrupt_leave_critical_section+0x10>)
    5d86:	4798      	blx	r3
}
    5d88:	46c0      	nop			; (mov r8, r8)
    5d8a:	46bd      	mov	sp, r7
    5d8c:	bd80      	pop	{r7, pc}
    5d8e:	46c0      	nop			; (mov r8, r8)
    5d90:	00002f9d 	.word	0x00002f9d

00005d94 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    5d94:	b580      	push	{r7, lr}
    5d96:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    5d98:	2108      	movs	r1, #8
    5d9a:	2000      	movs	r0, #0
    5d9c:	4b07      	ldr	r3, [pc, #28]	; (5dbc <system_gclk_init+0x28>)
    5d9e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5da0:	4b07      	ldr	r3, [pc, #28]	; (5dc0 <system_gclk_init+0x2c>)
    5da2:	2201      	movs	r2, #1
    5da4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5da6:	46c0      	nop			; (mov r8, r8)
    5da8:	4b05      	ldr	r3, [pc, #20]	; (5dc0 <system_gclk_init+0x2c>)
    5daa:	781b      	ldrb	r3, [r3, #0]
    5dac:	b2db      	uxtb	r3, r3
    5dae:	001a      	movs	r2, r3
    5db0:	2301      	movs	r3, #1
    5db2:	4013      	ands	r3, r2
    5db4:	d1f8      	bne.n	5da8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    5db6:	46c0      	nop			; (mov r8, r8)
    5db8:	46bd      	mov	sp, r7
    5dba:	bd80      	pop	{r7, pc}
    5dbc:	00005d11 	.word	0x00005d11
    5dc0:	40000c00 	.word	0x40000c00

00005dc4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5dc4:	b580      	push	{r7, lr}
    5dc6:	b086      	sub	sp, #24
    5dc8:	af00      	add	r7, sp, #0
    5dca:	0002      	movs	r2, r0
    5dcc:	6039      	str	r1, [r7, #0]
    5dce:	1dfb      	adds	r3, r7, #7
    5dd0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5dd2:	1dfb      	adds	r3, r7, #7
    5dd4:	781b      	ldrb	r3, [r3, #0]
    5dd6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    5dd8:	1dfb      	adds	r3, r7, #7
    5dda:	781b      	ldrb	r3, [r3, #0]
    5ddc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5dde:	683b      	ldr	r3, [r7, #0]
    5de0:	781b      	ldrb	r3, [r3, #0]
    5de2:	021b      	lsls	r3, r3, #8
    5de4:	001a      	movs	r2, r3
    5de6:	697b      	ldr	r3, [r7, #20]
    5de8:	4313      	orrs	r3, r2
    5dea:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5dec:	683b      	ldr	r3, [r7, #0]
    5dee:	785b      	ldrb	r3, [r3, #1]
    5df0:	2b00      	cmp	r3, #0
    5df2:	d004      	beq.n	5dfe <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5df4:	697b      	ldr	r3, [r7, #20]
    5df6:	2280      	movs	r2, #128	; 0x80
    5df8:	02d2      	lsls	r2, r2, #11
    5dfa:	4313      	orrs	r3, r2
    5dfc:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5dfe:	683b      	ldr	r3, [r7, #0]
    5e00:	7a5b      	ldrb	r3, [r3, #9]
    5e02:	2b00      	cmp	r3, #0
    5e04:	d004      	beq.n	5e10 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5e06:	697b      	ldr	r3, [r7, #20]
    5e08:	2280      	movs	r2, #128	; 0x80
    5e0a:	0312      	lsls	r2, r2, #12
    5e0c:	4313      	orrs	r3, r2
    5e0e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5e10:	683b      	ldr	r3, [r7, #0]
    5e12:	685b      	ldr	r3, [r3, #4]
    5e14:	2b01      	cmp	r3, #1
    5e16:	d92c      	bls.n	5e72 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5e18:	683b      	ldr	r3, [r7, #0]
    5e1a:	685a      	ldr	r2, [r3, #4]
    5e1c:	683b      	ldr	r3, [r7, #0]
    5e1e:	685b      	ldr	r3, [r3, #4]
    5e20:	3b01      	subs	r3, #1
    5e22:	4013      	ands	r3, r2
    5e24:	d11a      	bne.n	5e5c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    5e26:	2300      	movs	r3, #0
    5e28:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5e2a:	2302      	movs	r3, #2
    5e2c:	60bb      	str	r3, [r7, #8]
    5e2e:	e005      	b.n	5e3c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    5e30:	68fb      	ldr	r3, [r7, #12]
    5e32:	3301      	adds	r3, #1
    5e34:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    5e36:	68bb      	ldr	r3, [r7, #8]
    5e38:	005b      	lsls	r3, r3, #1
    5e3a:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5e3c:	683b      	ldr	r3, [r7, #0]
    5e3e:	685a      	ldr	r2, [r3, #4]
    5e40:	68bb      	ldr	r3, [r7, #8]
    5e42:	429a      	cmp	r2, r3
    5e44:	d8f4      	bhi.n	5e30 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5e46:	68fb      	ldr	r3, [r7, #12]
    5e48:	021b      	lsls	r3, r3, #8
    5e4a:	693a      	ldr	r2, [r7, #16]
    5e4c:	4313      	orrs	r3, r2
    5e4e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5e50:	697b      	ldr	r3, [r7, #20]
    5e52:	2280      	movs	r2, #128	; 0x80
    5e54:	0352      	lsls	r2, r2, #13
    5e56:	4313      	orrs	r3, r2
    5e58:	617b      	str	r3, [r7, #20]
    5e5a:	e00a      	b.n	5e72 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5e5c:	683b      	ldr	r3, [r7, #0]
    5e5e:	685b      	ldr	r3, [r3, #4]
    5e60:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    5e62:	693a      	ldr	r2, [r7, #16]
    5e64:	4313      	orrs	r3, r2
    5e66:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5e68:	697b      	ldr	r3, [r7, #20]
    5e6a:	2280      	movs	r2, #128	; 0x80
    5e6c:	0292      	lsls	r2, r2, #10
    5e6e:	4313      	orrs	r3, r2
    5e70:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5e72:	683b      	ldr	r3, [r7, #0]
    5e74:	7a1b      	ldrb	r3, [r3, #8]
    5e76:	2b00      	cmp	r3, #0
    5e78:	d004      	beq.n	5e84 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5e7a:	697b      	ldr	r3, [r7, #20]
    5e7c:	2280      	movs	r2, #128	; 0x80
    5e7e:	0392      	lsls	r2, r2, #14
    5e80:	4313      	orrs	r3, r2
    5e82:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    5e84:	46c0      	nop			; (mov r8, r8)
    5e86:	4b13      	ldr	r3, [pc, #76]	; (5ed4 <system_gclk_gen_set_config+0x110>)
    5e88:	4798      	blx	r3
    5e8a:	1e03      	subs	r3, r0, #0
    5e8c:	d1fb      	bne.n	5e86 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5e8e:	4b12      	ldr	r3, [pc, #72]	; (5ed8 <system_gclk_gen_set_config+0x114>)
    5e90:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5e92:	4a12      	ldr	r2, [pc, #72]	; (5edc <system_gclk_gen_set_config+0x118>)
    5e94:	1dfb      	adds	r3, r7, #7
    5e96:	781b      	ldrb	r3, [r3, #0]
    5e98:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5e9a:	46c0      	nop			; (mov r8, r8)
    5e9c:	4b0d      	ldr	r3, [pc, #52]	; (5ed4 <system_gclk_gen_set_config+0x110>)
    5e9e:	4798      	blx	r3
    5ea0:	1e03      	subs	r3, r0, #0
    5ea2:	d1fb      	bne.n	5e9c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5ea4:	4b0e      	ldr	r3, [pc, #56]	; (5ee0 <system_gclk_gen_set_config+0x11c>)
    5ea6:	693a      	ldr	r2, [r7, #16]
    5ea8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    5eaa:	46c0      	nop			; (mov r8, r8)
    5eac:	4b09      	ldr	r3, [pc, #36]	; (5ed4 <system_gclk_gen_set_config+0x110>)
    5eae:	4798      	blx	r3
    5eb0:	1e03      	subs	r3, r0, #0
    5eb2:	d1fb      	bne.n	5eac <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5eb4:	4b0a      	ldr	r3, [pc, #40]	; (5ee0 <system_gclk_gen_set_config+0x11c>)
    5eb6:	4a0a      	ldr	r2, [pc, #40]	; (5ee0 <system_gclk_gen_set_config+0x11c>)
    5eb8:	6851      	ldr	r1, [r2, #4]
    5eba:	2280      	movs	r2, #128	; 0x80
    5ebc:	0252      	lsls	r2, r2, #9
    5ebe:	4011      	ands	r1, r2
    5ec0:	697a      	ldr	r2, [r7, #20]
    5ec2:	430a      	orrs	r2, r1
    5ec4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    5ec6:	4b07      	ldr	r3, [pc, #28]	; (5ee4 <system_gclk_gen_set_config+0x120>)
    5ec8:	4798      	blx	r3
}
    5eca:	46c0      	nop			; (mov r8, r8)
    5ecc:	46bd      	mov	sp, r7
    5ece:	b006      	add	sp, #24
    5ed0:	bd80      	pop	{r7, pc}
    5ed2:	46c0      	nop			; (mov r8, r8)
    5ed4:	00005cf1 	.word	0x00005cf1
    5ed8:	00005d6d 	.word	0x00005d6d
    5edc:	40000c08 	.word	0x40000c08
    5ee0:	40000c00 	.word	0x40000c00
    5ee4:	00005d81 	.word	0x00005d81

00005ee8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5ee8:	b580      	push	{r7, lr}
    5eea:	b082      	sub	sp, #8
    5eec:	af00      	add	r7, sp, #0
    5eee:	0002      	movs	r2, r0
    5ef0:	1dfb      	adds	r3, r7, #7
    5ef2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5ef4:	46c0      	nop			; (mov r8, r8)
    5ef6:	4b0e      	ldr	r3, [pc, #56]	; (5f30 <system_gclk_gen_enable+0x48>)
    5ef8:	4798      	blx	r3
    5efa:	1e03      	subs	r3, r0, #0
    5efc:	d1fb      	bne.n	5ef6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5efe:	4b0d      	ldr	r3, [pc, #52]	; (5f34 <system_gclk_gen_enable+0x4c>)
    5f00:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5f02:	4a0d      	ldr	r2, [pc, #52]	; (5f38 <system_gclk_gen_enable+0x50>)
    5f04:	1dfb      	adds	r3, r7, #7
    5f06:	781b      	ldrb	r3, [r3, #0]
    5f08:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5f0a:	46c0      	nop			; (mov r8, r8)
    5f0c:	4b08      	ldr	r3, [pc, #32]	; (5f30 <system_gclk_gen_enable+0x48>)
    5f0e:	4798      	blx	r3
    5f10:	1e03      	subs	r3, r0, #0
    5f12:	d1fb      	bne.n	5f0c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5f14:	4b09      	ldr	r3, [pc, #36]	; (5f3c <system_gclk_gen_enable+0x54>)
    5f16:	4a09      	ldr	r2, [pc, #36]	; (5f3c <system_gclk_gen_enable+0x54>)
    5f18:	6852      	ldr	r2, [r2, #4]
    5f1a:	2180      	movs	r1, #128	; 0x80
    5f1c:	0249      	lsls	r1, r1, #9
    5f1e:	430a      	orrs	r2, r1
    5f20:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    5f22:	4b07      	ldr	r3, [pc, #28]	; (5f40 <system_gclk_gen_enable+0x58>)
    5f24:	4798      	blx	r3
}
    5f26:	46c0      	nop			; (mov r8, r8)
    5f28:	46bd      	mov	sp, r7
    5f2a:	b002      	add	sp, #8
    5f2c:	bd80      	pop	{r7, pc}
    5f2e:	46c0      	nop			; (mov r8, r8)
    5f30:	00005cf1 	.word	0x00005cf1
    5f34:	00005d6d 	.word	0x00005d6d
    5f38:	40000c04 	.word	0x40000c04
    5f3c:	40000c00 	.word	0x40000c00
    5f40:	00005d81 	.word	0x00005d81

00005f44 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5f44:	b580      	push	{r7, lr}
    5f46:	b086      	sub	sp, #24
    5f48:	af00      	add	r7, sp, #0
    5f4a:	0002      	movs	r2, r0
    5f4c:	1dfb      	adds	r3, r7, #7
    5f4e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5f50:	46c0      	nop			; (mov r8, r8)
    5f52:	4b2a      	ldr	r3, [pc, #168]	; (5ffc <system_gclk_gen_get_hz+0xb8>)
    5f54:	4798      	blx	r3
    5f56:	1e03      	subs	r3, r0, #0
    5f58:	d1fb      	bne.n	5f52 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5f5a:	4b29      	ldr	r3, [pc, #164]	; (6000 <system_gclk_gen_get_hz+0xbc>)
    5f5c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5f5e:	4a29      	ldr	r2, [pc, #164]	; (6004 <system_gclk_gen_get_hz+0xc0>)
    5f60:	1dfb      	adds	r3, r7, #7
    5f62:	781b      	ldrb	r3, [r3, #0]
    5f64:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5f66:	46c0      	nop			; (mov r8, r8)
    5f68:	4b24      	ldr	r3, [pc, #144]	; (5ffc <system_gclk_gen_get_hz+0xb8>)
    5f6a:	4798      	blx	r3
    5f6c:	1e03      	subs	r3, r0, #0
    5f6e:	d1fb      	bne.n	5f68 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5f70:	4b25      	ldr	r3, [pc, #148]	; (6008 <system_gclk_gen_get_hz+0xc4>)
    5f72:	685b      	ldr	r3, [r3, #4]
    5f74:	04db      	lsls	r3, r3, #19
    5f76:	0edb      	lsrs	r3, r3, #27
    5f78:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5f7a:	0018      	movs	r0, r3
    5f7c:	4b23      	ldr	r3, [pc, #140]	; (600c <system_gclk_gen_get_hz+0xc8>)
    5f7e:	4798      	blx	r3
    5f80:	0003      	movs	r3, r0
    5f82:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5f84:	4a1f      	ldr	r2, [pc, #124]	; (6004 <system_gclk_gen_get_hz+0xc0>)
    5f86:	1dfb      	adds	r3, r7, #7
    5f88:	781b      	ldrb	r3, [r3, #0]
    5f8a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5f8c:	4b1e      	ldr	r3, [pc, #120]	; (6008 <system_gclk_gen_get_hz+0xc4>)
    5f8e:	685b      	ldr	r3, [r3, #4]
    5f90:	02db      	lsls	r3, r3, #11
    5f92:	0fdb      	lsrs	r3, r3, #31
    5f94:	b2da      	uxtb	r2, r3
    5f96:	2313      	movs	r3, #19
    5f98:	18fb      	adds	r3, r7, r3
    5f9a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5f9c:	4a1c      	ldr	r2, [pc, #112]	; (6010 <system_gclk_gen_get_hz+0xcc>)
    5f9e:	1dfb      	adds	r3, r7, #7
    5fa0:	781b      	ldrb	r3, [r3, #0]
    5fa2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    5fa4:	46c0      	nop			; (mov r8, r8)
    5fa6:	4b15      	ldr	r3, [pc, #84]	; (5ffc <system_gclk_gen_get_hz+0xb8>)
    5fa8:	4798      	blx	r3
    5faa:	1e03      	subs	r3, r0, #0
    5fac:	d1fb      	bne.n	5fa6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5fae:	4b16      	ldr	r3, [pc, #88]	; (6008 <system_gclk_gen_get_hz+0xc4>)
    5fb0:	689b      	ldr	r3, [r3, #8]
    5fb2:	021b      	lsls	r3, r3, #8
    5fb4:	0c1b      	lsrs	r3, r3, #16
    5fb6:	b29b      	uxth	r3, r3
    5fb8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    5fba:	4b16      	ldr	r3, [pc, #88]	; (6014 <system_gclk_gen_get_hz+0xd0>)
    5fbc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5fbe:	2313      	movs	r3, #19
    5fc0:	18fb      	adds	r3, r7, r3
    5fc2:	781b      	ldrb	r3, [r3, #0]
    5fc4:	2b00      	cmp	r3, #0
    5fc6:	d109      	bne.n	5fdc <system_gclk_gen_get_hz+0x98>
    5fc8:	68fb      	ldr	r3, [r7, #12]
    5fca:	2b01      	cmp	r3, #1
    5fcc:	d906      	bls.n	5fdc <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    5fce:	4b12      	ldr	r3, [pc, #72]	; (6018 <system_gclk_gen_get_hz+0xd4>)
    5fd0:	68f9      	ldr	r1, [r7, #12]
    5fd2:	6978      	ldr	r0, [r7, #20]
    5fd4:	4798      	blx	r3
    5fd6:	0003      	movs	r3, r0
    5fd8:	617b      	str	r3, [r7, #20]
    5fda:	e00a      	b.n	5ff2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    5fdc:	2313      	movs	r3, #19
    5fde:	18fb      	adds	r3, r7, r3
    5fe0:	781b      	ldrb	r3, [r3, #0]
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d005      	beq.n	5ff2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    5fe6:	68fb      	ldr	r3, [r7, #12]
    5fe8:	3301      	adds	r3, #1
    5fea:	697a      	ldr	r2, [r7, #20]
    5fec:	40da      	lsrs	r2, r3
    5fee:	0013      	movs	r3, r2
    5ff0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    5ff2:	697b      	ldr	r3, [r7, #20]
}
    5ff4:	0018      	movs	r0, r3
    5ff6:	46bd      	mov	sp, r7
    5ff8:	b006      	add	sp, #24
    5ffa:	bd80      	pop	{r7, pc}
    5ffc:	00005cf1 	.word	0x00005cf1
    6000:	00005d6d 	.word	0x00005d6d
    6004:	40000c04 	.word	0x40000c04
    6008:	40000c00 	.word	0x40000c00
    600c:	000056e1 	.word	0x000056e1
    6010:	40000c08 	.word	0x40000c08
    6014:	00005d81 	.word	0x00005d81
    6018:	00006711 	.word	0x00006711

0000601c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    601c:	b580      	push	{r7, lr}
    601e:	b084      	sub	sp, #16
    6020:	af00      	add	r7, sp, #0
    6022:	0002      	movs	r2, r0
    6024:	6039      	str	r1, [r7, #0]
    6026:	1dfb      	adds	r3, r7, #7
    6028:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    602a:	1dfb      	adds	r3, r7, #7
    602c:	781b      	ldrb	r3, [r3, #0]
    602e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6030:	683b      	ldr	r3, [r7, #0]
    6032:	781b      	ldrb	r3, [r3, #0]
    6034:	021b      	lsls	r3, r3, #8
    6036:	001a      	movs	r2, r3
    6038:	68fb      	ldr	r3, [r7, #12]
    603a:	4313      	orrs	r3, r2
    603c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    603e:	1dfb      	adds	r3, r7, #7
    6040:	781b      	ldrb	r3, [r3, #0]
    6042:	0018      	movs	r0, r3
    6044:	4b04      	ldr	r3, [pc, #16]	; (6058 <system_gclk_chan_set_config+0x3c>)
    6046:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6048:	4b04      	ldr	r3, [pc, #16]	; (605c <system_gclk_chan_set_config+0x40>)
    604a:	68fa      	ldr	r2, [r7, #12]
    604c:	b292      	uxth	r2, r2
    604e:	805a      	strh	r2, [r3, #2]
}
    6050:	46c0      	nop			; (mov r8, r8)
    6052:	46bd      	mov	sp, r7
    6054:	b004      	add	sp, #16
    6056:	bd80      	pop	{r7, pc}
    6058:	000060a9 	.word	0x000060a9
    605c:	40000c00 	.word	0x40000c00

00006060 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6060:	b580      	push	{r7, lr}
    6062:	b082      	sub	sp, #8
    6064:	af00      	add	r7, sp, #0
    6066:	0002      	movs	r2, r0
    6068:	1dfb      	adds	r3, r7, #7
    606a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    606c:	4b0a      	ldr	r3, [pc, #40]	; (6098 <system_gclk_chan_enable+0x38>)
    606e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6070:	4a0a      	ldr	r2, [pc, #40]	; (609c <system_gclk_chan_enable+0x3c>)
    6072:	1dfb      	adds	r3, r7, #7
    6074:	781b      	ldrb	r3, [r3, #0]
    6076:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6078:	4909      	ldr	r1, [pc, #36]	; (60a0 <system_gclk_chan_enable+0x40>)
    607a:	4b09      	ldr	r3, [pc, #36]	; (60a0 <system_gclk_chan_enable+0x40>)
    607c:	885b      	ldrh	r3, [r3, #2]
    607e:	b29b      	uxth	r3, r3
    6080:	2280      	movs	r2, #128	; 0x80
    6082:	01d2      	lsls	r2, r2, #7
    6084:	4313      	orrs	r3, r2
    6086:	b29b      	uxth	r3, r3
    6088:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    608a:	4b06      	ldr	r3, [pc, #24]	; (60a4 <system_gclk_chan_enable+0x44>)
    608c:	4798      	blx	r3
}
    608e:	46c0      	nop			; (mov r8, r8)
    6090:	46bd      	mov	sp, r7
    6092:	b002      	add	sp, #8
    6094:	bd80      	pop	{r7, pc}
    6096:	46c0      	nop			; (mov r8, r8)
    6098:	00005d6d 	.word	0x00005d6d
    609c:	40000c02 	.word	0x40000c02
    60a0:	40000c00 	.word	0x40000c00
    60a4:	00005d81 	.word	0x00005d81

000060a8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    60a8:	b580      	push	{r7, lr}
    60aa:	b084      	sub	sp, #16
    60ac:	af00      	add	r7, sp, #0
    60ae:	0002      	movs	r2, r0
    60b0:	1dfb      	adds	r3, r7, #7
    60b2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    60b4:	4b1c      	ldr	r3, [pc, #112]	; (6128 <system_gclk_chan_disable+0x80>)
    60b6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    60b8:	4a1c      	ldr	r2, [pc, #112]	; (612c <system_gclk_chan_disable+0x84>)
    60ba:	1dfb      	adds	r3, r7, #7
    60bc:	781b      	ldrb	r3, [r3, #0]
    60be:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    60c0:	4b1b      	ldr	r3, [pc, #108]	; (6130 <system_gclk_chan_disable+0x88>)
    60c2:	885b      	ldrh	r3, [r3, #2]
    60c4:	051b      	lsls	r3, r3, #20
    60c6:	0f1b      	lsrs	r3, r3, #28
    60c8:	b2db      	uxtb	r3, r3
    60ca:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    60cc:	4a18      	ldr	r2, [pc, #96]	; (6130 <system_gclk_chan_disable+0x88>)
    60ce:	8853      	ldrh	r3, [r2, #2]
    60d0:	4918      	ldr	r1, [pc, #96]	; (6134 <system_gclk_chan_disable+0x8c>)
    60d2:	400b      	ands	r3, r1
    60d4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    60d6:	4a16      	ldr	r2, [pc, #88]	; (6130 <system_gclk_chan_disable+0x88>)
    60d8:	4b15      	ldr	r3, [pc, #84]	; (6130 <system_gclk_chan_disable+0x88>)
    60da:	885b      	ldrh	r3, [r3, #2]
    60dc:	b29b      	uxth	r3, r3
    60de:	4916      	ldr	r1, [pc, #88]	; (6138 <system_gclk_chan_disable+0x90>)
    60e0:	400b      	ands	r3, r1
    60e2:	b29b      	uxth	r3, r3
    60e4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    60e6:	46c0      	nop			; (mov r8, r8)
    60e8:	4b11      	ldr	r3, [pc, #68]	; (6130 <system_gclk_chan_disable+0x88>)
    60ea:	885b      	ldrh	r3, [r3, #2]
    60ec:	b29b      	uxth	r3, r3
    60ee:	001a      	movs	r2, r3
    60f0:	2380      	movs	r3, #128	; 0x80
    60f2:	01db      	lsls	r3, r3, #7
    60f4:	4013      	ands	r3, r2
    60f6:	d1f7      	bne.n	60e8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    60f8:	4a0d      	ldr	r2, [pc, #52]	; (6130 <system_gclk_chan_disable+0x88>)
    60fa:	68fb      	ldr	r3, [r7, #12]
    60fc:	b2db      	uxtb	r3, r3
    60fe:	1c19      	adds	r1, r3, #0
    6100:	230f      	movs	r3, #15
    6102:	400b      	ands	r3, r1
    6104:	b2d9      	uxtb	r1, r3
    6106:	8853      	ldrh	r3, [r2, #2]
    6108:	1c08      	adds	r0, r1, #0
    610a:	210f      	movs	r1, #15
    610c:	4001      	ands	r1, r0
    610e:	0208      	lsls	r0, r1, #8
    6110:	4908      	ldr	r1, [pc, #32]	; (6134 <system_gclk_chan_disable+0x8c>)
    6112:	400b      	ands	r3, r1
    6114:	1c19      	adds	r1, r3, #0
    6116:	1c03      	adds	r3, r0, #0
    6118:	430b      	orrs	r3, r1
    611a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    611c:	4b07      	ldr	r3, [pc, #28]	; (613c <system_gclk_chan_disable+0x94>)
    611e:	4798      	blx	r3
}
    6120:	46c0      	nop			; (mov r8, r8)
    6122:	46bd      	mov	sp, r7
    6124:	b004      	add	sp, #16
    6126:	bd80      	pop	{r7, pc}
    6128:	00005d6d 	.word	0x00005d6d
    612c:	40000c02 	.word	0x40000c02
    6130:	40000c00 	.word	0x40000c00
    6134:	fffff0ff 	.word	0xfffff0ff
    6138:	ffffbfff 	.word	0xffffbfff
    613c:	00005d81 	.word	0x00005d81

00006140 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6140:	b580      	push	{r7, lr}
    6142:	b084      	sub	sp, #16
    6144:	af00      	add	r7, sp, #0
    6146:	0002      	movs	r2, r0
    6148:	1dfb      	adds	r3, r7, #7
    614a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    614c:	4b0d      	ldr	r3, [pc, #52]	; (6184 <system_gclk_chan_get_hz+0x44>)
    614e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6150:	4a0d      	ldr	r2, [pc, #52]	; (6188 <system_gclk_chan_get_hz+0x48>)
    6152:	1dfb      	adds	r3, r7, #7
    6154:	781b      	ldrb	r3, [r3, #0]
    6156:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6158:	4b0c      	ldr	r3, [pc, #48]	; (618c <system_gclk_chan_get_hz+0x4c>)
    615a:	885b      	ldrh	r3, [r3, #2]
    615c:	051b      	lsls	r3, r3, #20
    615e:	0f1b      	lsrs	r3, r3, #28
    6160:	b2da      	uxtb	r2, r3
    6162:	230f      	movs	r3, #15
    6164:	18fb      	adds	r3, r7, r3
    6166:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6168:	4b09      	ldr	r3, [pc, #36]	; (6190 <system_gclk_chan_get_hz+0x50>)
    616a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    616c:	230f      	movs	r3, #15
    616e:	18fb      	adds	r3, r7, r3
    6170:	781b      	ldrb	r3, [r3, #0]
    6172:	0018      	movs	r0, r3
    6174:	4b07      	ldr	r3, [pc, #28]	; (6194 <system_gclk_chan_get_hz+0x54>)
    6176:	4798      	blx	r3
    6178:	0003      	movs	r3, r0
}
    617a:	0018      	movs	r0, r3
    617c:	46bd      	mov	sp, r7
    617e:	b004      	add	sp, #16
    6180:	bd80      	pop	{r7, pc}
    6182:	46c0      	nop			; (mov r8, r8)
    6184:	00005d6d 	.word	0x00005d6d
    6188:	40000c02 	.word	0x40000c02
    618c:	40000c00 	.word	0x40000c00
    6190:	00005d81 	.word	0x00005d81
    6194:	00005f45 	.word	0x00005f45

00006198 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6198:	b580      	push	{r7, lr}
    619a:	b084      	sub	sp, #16
    619c:	af00      	add	r7, sp, #0
    619e:	0002      	movs	r2, r0
    61a0:	1dfb      	adds	r3, r7, #7
    61a2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    61a4:	230f      	movs	r3, #15
    61a6:	18fb      	adds	r3, r7, r3
    61a8:	1dfa      	adds	r2, r7, #7
    61aa:	7812      	ldrb	r2, [r2, #0]
    61ac:	09d2      	lsrs	r2, r2, #7
    61ae:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    61b0:	230e      	movs	r3, #14
    61b2:	18fb      	adds	r3, r7, r3
    61b4:	1dfa      	adds	r2, r7, #7
    61b6:	7812      	ldrb	r2, [r2, #0]
    61b8:	0952      	lsrs	r2, r2, #5
    61ba:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    61bc:	4b0d      	ldr	r3, [pc, #52]	; (61f4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    61be:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    61c0:	230f      	movs	r3, #15
    61c2:	18fb      	adds	r3, r7, r3
    61c4:	781b      	ldrb	r3, [r3, #0]
    61c6:	2b00      	cmp	r3, #0
    61c8:	d10f      	bne.n	61ea <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    61ca:	230f      	movs	r3, #15
    61cc:	18fb      	adds	r3, r7, r3
    61ce:	781b      	ldrb	r3, [r3, #0]
    61d0:	009b      	lsls	r3, r3, #2
    61d2:	2210      	movs	r2, #16
    61d4:	4694      	mov	ip, r2
    61d6:	44bc      	add	ip, r7
    61d8:	4463      	add	r3, ip
    61da:	3b08      	subs	r3, #8
    61dc:	681a      	ldr	r2, [r3, #0]
    61de:	230e      	movs	r3, #14
    61e0:	18fb      	adds	r3, r7, r3
    61e2:	781b      	ldrb	r3, [r3, #0]
    61e4:	01db      	lsls	r3, r3, #7
    61e6:	18d3      	adds	r3, r2, r3
    61e8:	e000      	b.n	61ec <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    61ea:	2300      	movs	r3, #0
	}
}
    61ec:	0018      	movs	r0, r3
    61ee:	46bd      	mov	sp, r7
    61f0:	b004      	add	sp, #16
    61f2:	bd80      	pop	{r7, pc}
    61f4:	41004400 	.word	0x41004400

000061f8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    61f8:	b580      	push	{r7, lr}
    61fa:	b088      	sub	sp, #32
    61fc:	af00      	add	r7, sp, #0
    61fe:	60f8      	str	r0, [r7, #12]
    6200:	60b9      	str	r1, [r7, #8]
    6202:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6204:	2300      	movs	r3, #0
    6206:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	78db      	ldrb	r3, [r3, #3]
    620c:	2201      	movs	r2, #1
    620e:	4053      	eors	r3, r2
    6210:	b2db      	uxtb	r3, r3
    6212:	2b00      	cmp	r3, #0
    6214:	d034      	beq.n	6280 <_system_pinmux_config+0x88>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6216:	687b      	ldr	r3, [r7, #4]
    6218:	781b      	ldrb	r3, [r3, #0]
    621a:	2b80      	cmp	r3, #128	; 0x80
    621c:	d00b      	beq.n	6236 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    621e:	69fb      	ldr	r3, [r7, #28]
    6220:	2280      	movs	r2, #128	; 0x80
    6222:	0252      	lsls	r2, r2, #9
    6224:	4313      	orrs	r3, r2
    6226:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6228:	687b      	ldr	r3, [r7, #4]
    622a:	781b      	ldrb	r3, [r3, #0]
    622c:	061b      	lsls	r3, r3, #24
    622e:	001a      	movs	r2, r3
    6230:	69fb      	ldr	r3, [r7, #28]
    6232:	4313      	orrs	r3, r2
    6234:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6236:	687b      	ldr	r3, [r7, #4]
    6238:	785b      	ldrb	r3, [r3, #1]
    623a:	2b00      	cmp	r3, #0
    623c:	d003      	beq.n	6246 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    623e:	687b      	ldr	r3, [r7, #4]
    6240:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6242:	2b02      	cmp	r3, #2
    6244:	d110      	bne.n	6268 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6246:	69fb      	ldr	r3, [r7, #28]
    6248:	2280      	movs	r2, #128	; 0x80
    624a:	0292      	lsls	r2, r2, #10
    624c:	4313      	orrs	r3, r2
    624e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	789b      	ldrb	r3, [r3, #2]
    6254:	2b00      	cmp	r3, #0
    6256:	d004      	beq.n	6262 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6258:	69fb      	ldr	r3, [r7, #28]
    625a:	2280      	movs	r2, #128	; 0x80
    625c:	02d2      	lsls	r2, r2, #11
    625e:	4313      	orrs	r3, r2
    6260:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6262:	68fb      	ldr	r3, [r7, #12]
    6264:	68ba      	ldr	r2, [r7, #8]
    6266:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6268:	687b      	ldr	r3, [r7, #4]
    626a:	785b      	ldrb	r3, [r3, #1]
    626c:	2b01      	cmp	r3, #1
    626e:	d003      	beq.n	6278 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6270:	687b      	ldr	r3, [r7, #4]
    6272:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6274:	2b02      	cmp	r3, #2
    6276:	d103      	bne.n	6280 <_system_pinmux_config+0x88>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6278:	69fb      	ldr	r3, [r7, #28]
    627a:	4a20      	ldr	r2, [pc, #128]	; (62fc <_system_pinmux_config+0x104>)
    627c:	4013      	ands	r3, r2
    627e:	61fb      	str	r3, [r7, #28]
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6280:	68bb      	ldr	r3, [r7, #8]
    6282:	041b      	lsls	r3, r3, #16
    6284:	0c1b      	lsrs	r3, r3, #16
    6286:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6288:	68bb      	ldr	r3, [r7, #8]
    628a:	0c1b      	lsrs	r3, r3, #16
    628c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    628e:	69ba      	ldr	r2, [r7, #24]
    6290:	69fb      	ldr	r3, [r7, #28]
    6292:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6294:	22a0      	movs	r2, #160	; 0xa0
    6296:	05d2      	lsls	r2, r2, #23
    6298:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    629a:	68fb      	ldr	r3, [r7, #12]
    629c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    629e:	697a      	ldr	r2, [r7, #20]
    62a0:	69fb      	ldr	r3, [r7, #28]
    62a2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    62a4:	22d0      	movs	r2, #208	; 0xd0
    62a6:	0612      	lsls	r2, r2, #24
    62a8:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    62aa:	68fb      	ldr	r3, [r7, #12]
    62ac:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    62ae:	687b      	ldr	r3, [r7, #4]
    62b0:	78db      	ldrb	r3, [r3, #3]
    62b2:	2201      	movs	r2, #1
    62b4:	4053      	eors	r3, r2
    62b6:	b2db      	uxtb	r3, r3
    62b8:	2b00      	cmp	r3, #0
    62ba:	d01a      	beq.n	62f2 <_system_pinmux_config+0xfa>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    62bc:	69fa      	ldr	r2, [r7, #28]
    62be:	2380      	movs	r3, #128	; 0x80
    62c0:	02db      	lsls	r3, r3, #11
    62c2:	4013      	ands	r3, r2
    62c4:	d00a      	beq.n	62dc <_system_pinmux_config+0xe4>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    62c6:	687b      	ldr	r3, [r7, #4]
    62c8:	789b      	ldrb	r3, [r3, #2]
    62ca:	2b01      	cmp	r3, #1
    62cc:	d103      	bne.n	62d6 <_system_pinmux_config+0xde>
				port->OUTSET.reg = pin_mask;
    62ce:	68fb      	ldr	r3, [r7, #12]
    62d0:	68ba      	ldr	r2, [r7, #8]
    62d2:	619a      	str	r2, [r3, #24]
    62d4:	e002      	b.n	62dc <_system_pinmux_config+0xe4>
			} else {
				port->OUTCLR.reg = pin_mask;
    62d6:	68fb      	ldr	r3, [r7, #12]
    62d8:	68ba      	ldr	r2, [r7, #8]
    62da:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    62dc:	687b      	ldr	r3, [r7, #4]
    62de:	785b      	ldrb	r3, [r3, #1]
    62e0:	2b01      	cmp	r3, #1
    62e2:	d003      	beq.n	62ec <_system_pinmux_config+0xf4>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    62e4:	687b      	ldr	r3, [r7, #4]
    62e6:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    62e8:	2b02      	cmp	r3, #2
    62ea:	d102      	bne.n	62f2 <_system_pinmux_config+0xfa>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    62ec:	68fb      	ldr	r3, [r7, #12]
    62ee:	68ba      	ldr	r2, [r7, #8]
    62f0:	609a      	str	r2, [r3, #8]
		}
	}
}
    62f2:	46c0      	nop			; (mov r8, r8)
    62f4:	46bd      	mov	sp, r7
    62f6:	b008      	add	sp, #32
    62f8:	bd80      	pop	{r7, pc}
    62fa:	46c0      	nop			; (mov r8, r8)
    62fc:	fffbffff 	.word	0xfffbffff

00006300 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6300:	b580      	push	{r7, lr}
    6302:	b084      	sub	sp, #16
    6304:	af00      	add	r7, sp, #0
    6306:	0002      	movs	r2, r0
    6308:	6039      	str	r1, [r7, #0]
    630a:	1dfb      	adds	r3, r7, #7
    630c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    630e:	1dfb      	adds	r3, r7, #7
    6310:	781b      	ldrb	r3, [r3, #0]
    6312:	0018      	movs	r0, r3
    6314:	4b0a      	ldr	r3, [pc, #40]	; (6340 <system_pinmux_pin_set_config+0x40>)
    6316:	4798      	blx	r3
    6318:	0003      	movs	r3, r0
    631a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    631c:	1dfb      	adds	r3, r7, #7
    631e:	781b      	ldrb	r3, [r3, #0]
    6320:	221f      	movs	r2, #31
    6322:	4013      	ands	r3, r2
    6324:	2201      	movs	r2, #1
    6326:	409a      	lsls	r2, r3
    6328:	0013      	movs	r3, r2
    632a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    632c:	683a      	ldr	r2, [r7, #0]
    632e:	68b9      	ldr	r1, [r7, #8]
    6330:	68fb      	ldr	r3, [r7, #12]
    6332:	0018      	movs	r0, r3
    6334:	4b03      	ldr	r3, [pc, #12]	; (6344 <system_pinmux_pin_set_config+0x44>)
    6336:	4798      	blx	r3
}
    6338:	46c0      	nop			; (mov r8, r8)
    633a:	46bd      	mov	sp, r7
    633c:	b004      	add	sp, #16
    633e:	bd80      	pop	{r7, pc}
    6340:	00006199 	.word	0x00006199
    6344:	000061f9 	.word	0x000061f9

00006348 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6348:	b580      	push	{r7, lr}
    634a:	af00      	add	r7, sp, #0
	return;
    634c:	46c0      	nop			; (mov r8, r8)
}
    634e:	46bd      	mov	sp, r7
    6350:	bd80      	pop	{r7, pc}
    6352:	46c0      	nop			; (mov r8, r8)

00006354 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6354:	b580      	push	{r7, lr}
    6356:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6358:	4b05      	ldr	r3, [pc, #20]	; (6370 <system_init+0x1c>)
    635a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    635c:	4b05      	ldr	r3, [pc, #20]	; (6374 <system_init+0x20>)
    635e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6360:	4b05      	ldr	r3, [pc, #20]	; (6378 <system_init+0x24>)
    6362:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6364:	4b05      	ldr	r3, [pc, #20]	; (637c <system_init+0x28>)
    6366:	4798      	blx	r3
}
    6368:	46c0      	nop			; (mov r8, r8)
    636a:	46bd      	mov	sp, r7
    636c:	bd80      	pop	{r7, pc}
    636e:	46c0      	nop			; (mov r8, r8)
    6370:	00005ac5 	.word	0x00005ac5
    6374:	000030d9 	.word	0x000030d9
    6378:	00006349 	.word	0x00006349
    637c:	00003285 	.word	0x00003285

00006380 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6380:	b580      	push	{r7, lr}
    6382:	af00      	add	r7, sp, #0
    6384:	2000      	movs	r0, #0
    6386:	4b02      	ldr	r3, [pc, #8]	; (6390 <TCC0_Handler+0x10>)
    6388:	4798      	blx	r3
    638a:	46c0      	nop			; (mov r8, r8)
    638c:	46bd      	mov	sp, r7
    638e:	bd80      	pop	{r7, pc}
    6390:	000063bd 	.word	0x000063bd

00006394 <TCC1_Handler>:
    6394:	b580      	push	{r7, lr}
    6396:	af00      	add	r7, sp, #0
    6398:	2001      	movs	r0, #1
    639a:	4b02      	ldr	r3, [pc, #8]	; (63a4 <TCC1_Handler+0x10>)
    639c:	4798      	blx	r3
    639e:	46c0      	nop			; (mov r8, r8)
    63a0:	46bd      	mov	sp, r7
    63a2:	bd80      	pop	{r7, pc}
    63a4:	000063bd 	.word	0x000063bd

000063a8 <TCC2_Handler>:
    63a8:	b580      	push	{r7, lr}
    63aa:	af00      	add	r7, sp, #0
    63ac:	2002      	movs	r0, #2
    63ae:	4b02      	ldr	r3, [pc, #8]	; (63b8 <TCC2_Handler+0x10>)
    63b0:	4798      	blx	r3
    63b2:	46c0      	nop			; (mov r8, r8)
    63b4:	46bd      	mov	sp, r7
    63b6:	bd80      	pop	{r7, pc}
    63b8:	000063bd 	.word	0x000063bd

000063bc <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler.
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    63bc:	b580      	push	{r7, lr}
    63be:	b086      	sub	sp, #24
    63c0:	af00      	add	r7, sp, #0
    63c2:	0002      	movs	r2, r0
    63c4:	1dfb      	adds	r3, r7, #7
    63c6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    63c8:	1dfb      	adds	r3, r7, #7
    63ca:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    63cc:	4b18      	ldr	r3, [pc, #96]	; (6430 <_tcc_interrupt_handler+0x74>)
    63ce:	0092      	lsls	r2, r2, #2
    63d0:	58d3      	ldr	r3, [r2, r3]
    63d2:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    63d4:	693b      	ldr	r3, [r7, #16]
    63d6:	681b      	ldr	r3, [r3, #0]
    63d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    63da:	693b      	ldr	r3, [r7, #16]
    63dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    63de:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    63e0:	693b      	ldr	r3, [r7, #16]
    63e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    63e4:	4013      	ands	r3, r2
    63e6:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    63e8:	2300      	movs	r3, #0
    63ea:	617b      	str	r3, [r7, #20]
    63ec:	e019      	b.n	6422 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    63ee:	4b11      	ldr	r3, [pc, #68]	; (6434 <_tcc_interrupt_handler+0x78>)
    63f0:	697a      	ldr	r2, [r7, #20]
    63f2:	0092      	lsls	r2, r2, #2
    63f4:	58d3      	ldr	r3, [r2, r3]
    63f6:	68fa      	ldr	r2, [r7, #12]
    63f8:	4013      	ands	r3, r2
    63fa:	d00f      	beq.n	641c <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    63fc:	693a      	ldr	r2, [r7, #16]
    63fe:	697b      	ldr	r3, [r7, #20]
    6400:	009b      	lsls	r3, r3, #2
    6402:	18d3      	adds	r3, r2, r3
    6404:	3304      	adds	r3, #4
    6406:	681b      	ldr	r3, [r3, #0]
    6408:	693a      	ldr	r2, [r7, #16]
    640a:	0010      	movs	r0, r2
    640c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    640e:	693b      	ldr	r3, [r7, #16]
    6410:	681b      	ldr	r3, [r3, #0]
    6412:	4a08      	ldr	r2, [pc, #32]	; (6434 <_tcc_interrupt_handler+0x78>)
    6414:	6979      	ldr	r1, [r7, #20]
    6416:	0089      	lsls	r1, r1, #2
    6418:	588a      	ldr	r2, [r1, r2]
    641a:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    641c:	697b      	ldr	r3, [r7, #20]
    641e:	3301      	adds	r3, #1
    6420:	617b      	str	r3, [r7, #20]
    6422:	697b      	ldr	r3, [r7, #20]
    6424:	2b0b      	cmp	r3, #11
    6426:	dde2      	ble.n	63ee <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    6428:	46c0      	nop			; (mov r8, r8)
    642a:	46bd      	mov	sp, r7
    642c:	b006      	add	sp, #24
    642e:	bd80      	pop	{r7, pc}
    6430:	200005cc 	.word	0x200005cc
    6434:	00008350 	.word	0x00008350

00006438 <TC3_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(m); \
		}

MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    6438:	b580      	push	{r7, lr}
    643a:	af00      	add	r7, sp, #0
    643c:	2000      	movs	r0, #0
    643e:	4b02      	ldr	r3, [pc, #8]	; (6448 <TC3_Handler+0x10>)
    6440:	4798      	blx	r3
    6442:	46c0      	nop			; (mov r8, r8)
    6444:	46bd      	mov	sp, r7
    6446:	bd80      	pop	{r7, pc}
    6448:	00006475 	.word	0x00006475

0000644c <TC4_Handler>:
    644c:	b580      	push	{r7, lr}
    644e:	af00      	add	r7, sp, #0
    6450:	2001      	movs	r0, #1
    6452:	4b02      	ldr	r3, [pc, #8]	; (645c <TC4_Handler+0x10>)
    6454:	4798      	blx	r3
    6456:	46c0      	nop			; (mov r8, r8)
    6458:	46bd      	mov	sp, r7
    645a:	bd80      	pop	{r7, pc}
    645c:	00006475 	.word	0x00006475

00006460 <TC5_Handler>:
    6460:	b580      	push	{r7, lr}
    6462:	af00      	add	r7, sp, #0
    6464:	2002      	movs	r0, #2
    6466:	4b02      	ldr	r3, [pc, #8]	; (6470 <TC5_Handler+0x10>)
    6468:	4798      	blx	r3
    646a:	46c0      	nop			; (mov r8, r8)
    646c:	46bd      	mov	sp, r7
    646e:	bd80      	pop	{r7, pc}
    6470:	00006475 	.word	0x00006475

00006474 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    6474:	b580      	push	{r7, lr}
    6476:	b084      	sub	sp, #16
    6478:	af00      	add	r7, sp, #0
    647a:	0002      	movs	r2, r0
    647c:	1dfb      	adds	r3, r7, #7
    647e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    6480:	1dfb      	adds	r3, r7, #7
    6482:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    6484:	4b28      	ldr	r3, [pc, #160]	; (6528 <_tc_interrupt_handler+0xb4>)
    6486:	0092      	lsls	r2, r2, #2
    6488:	58d3      	ldr	r3, [r2, r3]
    648a:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    648c:	68fb      	ldr	r3, [r7, #12]
    648e:	681b      	ldr	r3, [r3, #0]
    6490:	7b9b      	ldrb	r3, [r3, #14]
    6492:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    6494:	68fa      	ldr	r2, [r7, #12]
    6496:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    6498:	4013      	ands	r3, r2
    649a:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
    649c:	68fb      	ldr	r3, [r7, #12]
    649e:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    64a0:	230b      	movs	r3, #11
    64a2:	18fb      	adds	r3, r7, r3
    64a4:	400a      	ands	r2, r1
    64a6:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    64a8:	230b      	movs	r3, #11
    64aa:	18fb      	adds	r3, r7, r3
    64ac:	781b      	ldrb	r3, [r3, #0]
    64ae:	2201      	movs	r2, #1
    64b0:	4013      	ands	r3, r2
    64b2:	d008      	beq.n	64c6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    64b4:	68fb      	ldr	r3, [r7, #12]
    64b6:	689b      	ldr	r3, [r3, #8]
    64b8:	68fa      	ldr	r2, [r7, #12]
    64ba:	0010      	movs	r0, r2
    64bc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    64be:	68fb      	ldr	r3, [r7, #12]
    64c0:	681b      	ldr	r3, [r3, #0]
    64c2:	2201      	movs	r2, #1
    64c4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    64c6:	230b      	movs	r3, #11
    64c8:	18fb      	adds	r3, r7, r3
    64ca:	781b      	ldrb	r3, [r3, #0]
    64cc:	2202      	movs	r2, #2
    64ce:	4013      	ands	r3, r2
    64d0:	d008      	beq.n	64e4 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    64d2:	68fb      	ldr	r3, [r7, #12]
    64d4:	68db      	ldr	r3, [r3, #12]
    64d6:	68fa      	ldr	r2, [r7, #12]
    64d8:	0010      	movs	r0, r2
    64da:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    64dc:	68fb      	ldr	r3, [r7, #12]
    64de:	681b      	ldr	r3, [r3, #0]
    64e0:	2202      	movs	r2, #2
    64e2:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    64e4:	230b      	movs	r3, #11
    64e6:	18fb      	adds	r3, r7, r3
    64e8:	781b      	ldrb	r3, [r3, #0]
    64ea:	2210      	movs	r2, #16
    64ec:	4013      	ands	r3, r2
    64ee:	d008      	beq.n	6502 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    64f0:	68fb      	ldr	r3, [r7, #12]
    64f2:	691b      	ldr	r3, [r3, #16]
    64f4:	68fa      	ldr	r2, [r7, #12]
    64f6:	0010      	movs	r0, r2
    64f8:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    64fa:	68fb      	ldr	r3, [r7, #12]
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	2210      	movs	r2, #16
    6500:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    6502:	230b      	movs	r3, #11
    6504:	18fb      	adds	r3, r7, r3
    6506:	781b      	ldrb	r3, [r3, #0]
    6508:	2220      	movs	r2, #32
    650a:	4013      	ands	r3, r2
    650c:	d008      	beq.n	6520 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    650e:	68fb      	ldr	r3, [r7, #12]
    6510:	695b      	ldr	r3, [r3, #20]
    6512:	68fa      	ldr	r2, [r7, #12]
    6514:	0010      	movs	r0, r2
    6516:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    6518:	68fb      	ldr	r3, [r7, #12]
    651a:	681b      	ldr	r3, [r3, #0]
    651c:	2220      	movs	r2, #32
    651e:	739a      	strb	r2, [r3, #14]
	}
}
    6520:	46c0      	nop			; (mov r8, r8)
    6522:	46bd      	mov	sp, r7
    6524:	b004      	add	sp, #16
    6526:	bd80      	pop	{r7, pc}
    6528:	200005d8 	.word	0x200005d8

0000652c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    652c:	b580      	push	{r7, lr}
    652e:	b082      	sub	sp, #8
    6530:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6532:	4b16      	ldr	r3, [pc, #88]	; (658c <Reset_Handler+0x60>)
    6534:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6536:	4b16      	ldr	r3, [pc, #88]	; (6590 <Reset_Handler+0x64>)
    6538:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    653a:	687a      	ldr	r2, [r7, #4]
    653c:	683b      	ldr	r3, [r7, #0]
    653e:	429a      	cmp	r2, r3
    6540:	d00c      	beq.n	655c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6542:	e007      	b.n	6554 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6544:	683b      	ldr	r3, [r7, #0]
    6546:	1d1a      	adds	r2, r3, #4
    6548:	603a      	str	r2, [r7, #0]
    654a:	687a      	ldr	r2, [r7, #4]
    654c:	1d11      	adds	r1, r2, #4
    654e:	6079      	str	r1, [r7, #4]
    6550:	6812      	ldr	r2, [r2, #0]
    6552:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    6554:	683a      	ldr	r2, [r7, #0]
    6556:	4b0f      	ldr	r3, [pc, #60]	; (6594 <Reset_Handler+0x68>)
    6558:	429a      	cmp	r2, r3
    655a:	d3f3      	bcc.n	6544 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    655c:	4b0e      	ldr	r3, [pc, #56]	; (6598 <Reset_Handler+0x6c>)
    655e:	603b      	str	r3, [r7, #0]
    6560:	e004      	b.n	656c <Reset_Handler+0x40>
                *pDest++ = 0;
    6562:	683b      	ldr	r3, [r7, #0]
    6564:	1d1a      	adds	r2, r3, #4
    6566:	603a      	str	r2, [r7, #0]
    6568:	2200      	movs	r2, #0
    656a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    656c:	683a      	ldr	r2, [r7, #0]
    656e:	4b0b      	ldr	r3, [pc, #44]	; (659c <Reset_Handler+0x70>)
    6570:	429a      	cmp	r2, r3
    6572:	d3f6      	bcc.n	6562 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6574:	4b0a      	ldr	r3, [pc, #40]	; (65a0 <Reset_Handler+0x74>)
    6576:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6578:	4b0a      	ldr	r3, [pc, #40]	; (65a4 <Reset_Handler+0x78>)
    657a:	687a      	ldr	r2, [r7, #4]
    657c:	217f      	movs	r1, #127	; 0x7f
    657e:	438a      	bics	r2, r1
    6580:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    6582:	4b09      	ldr	r3, [pc, #36]	; (65a8 <Reset_Handler+0x7c>)
    6584:	4798      	blx	r3

        /* Branch to main function */
        main();
    6586:	4b09      	ldr	r3, [pc, #36]	; (65ac <Reset_Handler+0x80>)
    6588:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    658a:	e7fe      	b.n	658a <Reset_Handler+0x5e>
    658c:	0000843c 	.word	0x0000843c
    6590:	20000000 	.word	0x20000000
    6594:	20000074 	.word	0x20000074
    6598:	20000074 	.word	0x20000074
    659c:	200005f4 	.word	0x200005f4
    65a0:	00000000 	.word	0x00000000
    65a4:	e000ed00 	.word	0xe000ed00
    65a8:	00006881 	.word	0x00006881
    65ac:	00000ec9 	.word	0x00000ec9

000065b0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    65b0:	b580      	push	{r7, lr}
    65b2:	af00      	add	r7, sp, #0
        while (1) {
        }
    65b4:	e7fe      	b.n	65b4 <Dummy_Handler+0x4>
    65b6:	46c0      	nop			; (mov r8, r8)

000065b8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    65b8:	b580      	push	{r7, lr}
    65ba:	b086      	sub	sp, #24
    65bc:	af00      	add	r7, sp, #0
    65be:	60f8      	str	r0, [r7, #12]
    65c0:	60b9      	str	r1, [r7, #8]
    65c2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    65c4:	2300      	movs	r3, #0
    65c6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    65c8:	68fb      	ldr	r3, [r7, #12]
    65ca:	2b00      	cmp	r3, #0
    65cc:	d012      	beq.n	65f4 <_read+0x3c>
		return -1;
    65ce:	2301      	movs	r3, #1
    65d0:	425b      	negs	r3, r3
    65d2:	e013      	b.n	65fc <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    65d4:	4b0b      	ldr	r3, [pc, #44]	; (6604 <_read+0x4c>)
    65d6:	681a      	ldr	r2, [r3, #0]
    65d8:	4b0b      	ldr	r3, [pc, #44]	; (6608 <_read+0x50>)
    65da:	681b      	ldr	r3, [r3, #0]
    65dc:	68b9      	ldr	r1, [r7, #8]
    65de:	0018      	movs	r0, r3
    65e0:	4790      	blx	r2
		ptr++;
    65e2:	68bb      	ldr	r3, [r7, #8]
    65e4:	3301      	adds	r3, #1
    65e6:	60bb      	str	r3, [r7, #8]
		nChars++;
    65e8:	697b      	ldr	r3, [r7, #20]
    65ea:	3301      	adds	r3, #1
    65ec:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    65ee:	687b      	ldr	r3, [r7, #4]
    65f0:	3b01      	subs	r3, #1
    65f2:	607b      	str	r3, [r7, #4]
    65f4:	687b      	ldr	r3, [r7, #4]
    65f6:	2b00      	cmp	r3, #0
    65f8:	dcec      	bgt.n	65d4 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    65fa:	697b      	ldr	r3, [r7, #20]
}
    65fc:	0018      	movs	r0, r3
    65fe:	46bd      	mov	sp, r7
    6600:	b006      	add	sp, #24
    6602:	bd80      	pop	{r7, pc}
    6604:	200005e4 	.word	0x200005e4
    6608:	200005ec 	.word	0x200005ec

0000660c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    660c:	b580      	push	{r7, lr}
    660e:	b086      	sub	sp, #24
    6610:	af00      	add	r7, sp, #0
    6612:	60f8      	str	r0, [r7, #12]
    6614:	60b9      	str	r1, [r7, #8]
    6616:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6618:	2300      	movs	r3, #0
    661a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    661c:	68fb      	ldr	r3, [r7, #12]
    661e:	2b01      	cmp	r3, #1
    6620:	d01d      	beq.n	665e <_write+0x52>
    6622:	68fb      	ldr	r3, [r7, #12]
    6624:	2b02      	cmp	r3, #2
    6626:	d01a      	beq.n	665e <_write+0x52>
    6628:	68fb      	ldr	r3, [r7, #12]
    662a:	2b03      	cmp	r3, #3
    662c:	d017      	beq.n	665e <_write+0x52>
		return -1;
    662e:	2301      	movs	r3, #1
    6630:	425b      	negs	r3, r3
    6632:	e018      	b.n	6666 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6634:	4b0e      	ldr	r3, [pc, #56]	; (6670 <_write+0x64>)
    6636:	681a      	ldr	r2, [r3, #0]
    6638:	4b0e      	ldr	r3, [pc, #56]	; (6674 <_write+0x68>)
    663a:	6818      	ldr	r0, [r3, #0]
    663c:	68bb      	ldr	r3, [r7, #8]
    663e:	1c59      	adds	r1, r3, #1
    6640:	60b9      	str	r1, [r7, #8]
    6642:	781b      	ldrb	r3, [r3, #0]
    6644:	0019      	movs	r1, r3
    6646:	4790      	blx	r2
    6648:	1e03      	subs	r3, r0, #0
    664a:	da02      	bge.n	6652 <_write+0x46>
			return -1;
    664c:	2301      	movs	r3, #1
    664e:	425b      	negs	r3, r3
    6650:	e009      	b.n	6666 <_write+0x5a>
		}
		++nChars;
    6652:	697b      	ldr	r3, [r7, #20]
    6654:	3301      	adds	r3, #1
    6656:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    6658:	687b      	ldr	r3, [r7, #4]
    665a:	3b01      	subs	r3, #1
    665c:	607b      	str	r3, [r7, #4]
    665e:	687b      	ldr	r3, [r7, #4]
    6660:	2b00      	cmp	r3, #0
    6662:	d1e7      	bne.n	6634 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    6664:	697b      	ldr	r3, [r7, #20]
}
    6666:	0018      	movs	r0, r3
    6668:	46bd      	mov	sp, r7
    666a:	b006      	add	sp, #24
    666c:	bd80      	pop	{r7, pc}
    666e:	46c0      	nop			; (mov r8, r8)
    6670:	200005e8 	.word	0x200005e8
    6674:	200005ec 	.word	0x200005ec

00006678 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6678:	b580      	push	{r7, lr}
    667a:	b084      	sub	sp, #16
    667c:	af00      	add	r7, sp, #0
    667e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6680:	4b0a      	ldr	r3, [pc, #40]	; (66ac <_sbrk+0x34>)
    6682:	681b      	ldr	r3, [r3, #0]
    6684:	2b00      	cmp	r3, #0
    6686:	d102      	bne.n	668e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6688:	4b08      	ldr	r3, [pc, #32]	; (66ac <_sbrk+0x34>)
    668a:	4a09      	ldr	r2, [pc, #36]	; (66b0 <_sbrk+0x38>)
    668c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    668e:	4b07      	ldr	r3, [pc, #28]	; (66ac <_sbrk+0x34>)
    6690:	681b      	ldr	r3, [r3, #0]
    6692:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6694:	4b05      	ldr	r3, [pc, #20]	; (66ac <_sbrk+0x34>)
    6696:	681a      	ldr	r2, [r3, #0]
    6698:	687b      	ldr	r3, [r7, #4]
    669a:	18d2      	adds	r2, r2, r3
    669c:	4b03      	ldr	r3, [pc, #12]	; (66ac <_sbrk+0x34>)
    669e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    66a0:	68fb      	ldr	r3, [r7, #12]
}
    66a2:	0018      	movs	r0, r3
    66a4:	46bd      	mov	sp, r7
    66a6:	b004      	add	sp, #16
    66a8:	bd80      	pop	{r7, pc}
    66aa:	46c0      	nop			; (mov r8, r8)
    66ac:	20000554 	.word	0x20000554
    66b0:	200025f8 	.word	0x200025f8

000066b4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    66b4:	b580      	push	{r7, lr}
    66b6:	b082      	sub	sp, #8
    66b8:	af00      	add	r7, sp, #0
    66ba:	6078      	str	r0, [r7, #4]
	return -1;
    66bc:	2301      	movs	r3, #1
    66be:	425b      	negs	r3, r3
}
    66c0:	0018      	movs	r0, r3
    66c2:	46bd      	mov	sp, r7
    66c4:	b002      	add	sp, #8
    66c6:	bd80      	pop	{r7, pc}

000066c8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    66c8:	b580      	push	{r7, lr}
    66ca:	b082      	sub	sp, #8
    66cc:	af00      	add	r7, sp, #0
    66ce:	6078      	str	r0, [r7, #4]
    66d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    66d2:	683b      	ldr	r3, [r7, #0]
    66d4:	2280      	movs	r2, #128	; 0x80
    66d6:	0192      	lsls	r2, r2, #6
    66d8:	605a      	str	r2, [r3, #4]

	return 0;
    66da:	2300      	movs	r3, #0
}
    66dc:	0018      	movs	r0, r3
    66de:	46bd      	mov	sp, r7
    66e0:	b002      	add	sp, #8
    66e2:	bd80      	pop	{r7, pc}

000066e4 <_isatty>:

extern int _isatty(int file)
{
    66e4:	b580      	push	{r7, lr}
    66e6:	b082      	sub	sp, #8
    66e8:	af00      	add	r7, sp, #0
    66ea:	6078      	str	r0, [r7, #4]
	return 1;
    66ec:	2301      	movs	r3, #1
}
    66ee:	0018      	movs	r0, r3
    66f0:	46bd      	mov	sp, r7
    66f2:	b002      	add	sp, #8
    66f4:	bd80      	pop	{r7, pc}
    66f6:	46c0      	nop			; (mov r8, r8)

000066f8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    66f8:	b580      	push	{r7, lr}
    66fa:	b084      	sub	sp, #16
    66fc:	af00      	add	r7, sp, #0
    66fe:	60f8      	str	r0, [r7, #12]
    6700:	60b9      	str	r1, [r7, #8]
    6702:	607a      	str	r2, [r7, #4]
	return 0;
    6704:	2300      	movs	r3, #0
}
    6706:	0018      	movs	r0, r3
    6708:	46bd      	mov	sp, r7
    670a:	b004      	add	sp, #16
    670c:	bd80      	pop	{r7, pc}
    670e:	46c0      	nop			; (mov r8, r8)

00006710 <__aeabi_uidiv>:
    6710:	2200      	movs	r2, #0
    6712:	0843      	lsrs	r3, r0, #1
    6714:	428b      	cmp	r3, r1
    6716:	d374      	bcc.n	6802 <__aeabi_uidiv+0xf2>
    6718:	0903      	lsrs	r3, r0, #4
    671a:	428b      	cmp	r3, r1
    671c:	d35f      	bcc.n	67de <__aeabi_uidiv+0xce>
    671e:	0a03      	lsrs	r3, r0, #8
    6720:	428b      	cmp	r3, r1
    6722:	d344      	bcc.n	67ae <__aeabi_uidiv+0x9e>
    6724:	0b03      	lsrs	r3, r0, #12
    6726:	428b      	cmp	r3, r1
    6728:	d328      	bcc.n	677c <__aeabi_uidiv+0x6c>
    672a:	0c03      	lsrs	r3, r0, #16
    672c:	428b      	cmp	r3, r1
    672e:	d30d      	bcc.n	674c <__aeabi_uidiv+0x3c>
    6730:	22ff      	movs	r2, #255	; 0xff
    6732:	0209      	lsls	r1, r1, #8
    6734:	ba12      	rev	r2, r2
    6736:	0c03      	lsrs	r3, r0, #16
    6738:	428b      	cmp	r3, r1
    673a:	d302      	bcc.n	6742 <__aeabi_uidiv+0x32>
    673c:	1212      	asrs	r2, r2, #8
    673e:	0209      	lsls	r1, r1, #8
    6740:	d065      	beq.n	680e <__aeabi_uidiv+0xfe>
    6742:	0b03      	lsrs	r3, r0, #12
    6744:	428b      	cmp	r3, r1
    6746:	d319      	bcc.n	677c <__aeabi_uidiv+0x6c>
    6748:	e000      	b.n	674c <__aeabi_uidiv+0x3c>
    674a:	0a09      	lsrs	r1, r1, #8
    674c:	0bc3      	lsrs	r3, r0, #15
    674e:	428b      	cmp	r3, r1
    6750:	d301      	bcc.n	6756 <__aeabi_uidiv+0x46>
    6752:	03cb      	lsls	r3, r1, #15
    6754:	1ac0      	subs	r0, r0, r3
    6756:	4152      	adcs	r2, r2
    6758:	0b83      	lsrs	r3, r0, #14
    675a:	428b      	cmp	r3, r1
    675c:	d301      	bcc.n	6762 <__aeabi_uidiv+0x52>
    675e:	038b      	lsls	r3, r1, #14
    6760:	1ac0      	subs	r0, r0, r3
    6762:	4152      	adcs	r2, r2
    6764:	0b43      	lsrs	r3, r0, #13
    6766:	428b      	cmp	r3, r1
    6768:	d301      	bcc.n	676e <__aeabi_uidiv+0x5e>
    676a:	034b      	lsls	r3, r1, #13
    676c:	1ac0      	subs	r0, r0, r3
    676e:	4152      	adcs	r2, r2
    6770:	0b03      	lsrs	r3, r0, #12
    6772:	428b      	cmp	r3, r1
    6774:	d301      	bcc.n	677a <__aeabi_uidiv+0x6a>
    6776:	030b      	lsls	r3, r1, #12
    6778:	1ac0      	subs	r0, r0, r3
    677a:	4152      	adcs	r2, r2
    677c:	0ac3      	lsrs	r3, r0, #11
    677e:	428b      	cmp	r3, r1
    6780:	d301      	bcc.n	6786 <__aeabi_uidiv+0x76>
    6782:	02cb      	lsls	r3, r1, #11
    6784:	1ac0      	subs	r0, r0, r3
    6786:	4152      	adcs	r2, r2
    6788:	0a83      	lsrs	r3, r0, #10
    678a:	428b      	cmp	r3, r1
    678c:	d301      	bcc.n	6792 <__aeabi_uidiv+0x82>
    678e:	028b      	lsls	r3, r1, #10
    6790:	1ac0      	subs	r0, r0, r3
    6792:	4152      	adcs	r2, r2
    6794:	0a43      	lsrs	r3, r0, #9
    6796:	428b      	cmp	r3, r1
    6798:	d301      	bcc.n	679e <__aeabi_uidiv+0x8e>
    679a:	024b      	lsls	r3, r1, #9
    679c:	1ac0      	subs	r0, r0, r3
    679e:	4152      	adcs	r2, r2
    67a0:	0a03      	lsrs	r3, r0, #8
    67a2:	428b      	cmp	r3, r1
    67a4:	d301      	bcc.n	67aa <__aeabi_uidiv+0x9a>
    67a6:	020b      	lsls	r3, r1, #8
    67a8:	1ac0      	subs	r0, r0, r3
    67aa:	4152      	adcs	r2, r2
    67ac:	d2cd      	bcs.n	674a <__aeabi_uidiv+0x3a>
    67ae:	09c3      	lsrs	r3, r0, #7
    67b0:	428b      	cmp	r3, r1
    67b2:	d301      	bcc.n	67b8 <__aeabi_uidiv+0xa8>
    67b4:	01cb      	lsls	r3, r1, #7
    67b6:	1ac0      	subs	r0, r0, r3
    67b8:	4152      	adcs	r2, r2
    67ba:	0983      	lsrs	r3, r0, #6
    67bc:	428b      	cmp	r3, r1
    67be:	d301      	bcc.n	67c4 <__aeabi_uidiv+0xb4>
    67c0:	018b      	lsls	r3, r1, #6
    67c2:	1ac0      	subs	r0, r0, r3
    67c4:	4152      	adcs	r2, r2
    67c6:	0943      	lsrs	r3, r0, #5
    67c8:	428b      	cmp	r3, r1
    67ca:	d301      	bcc.n	67d0 <__aeabi_uidiv+0xc0>
    67cc:	014b      	lsls	r3, r1, #5
    67ce:	1ac0      	subs	r0, r0, r3
    67d0:	4152      	adcs	r2, r2
    67d2:	0903      	lsrs	r3, r0, #4
    67d4:	428b      	cmp	r3, r1
    67d6:	d301      	bcc.n	67dc <__aeabi_uidiv+0xcc>
    67d8:	010b      	lsls	r3, r1, #4
    67da:	1ac0      	subs	r0, r0, r3
    67dc:	4152      	adcs	r2, r2
    67de:	08c3      	lsrs	r3, r0, #3
    67e0:	428b      	cmp	r3, r1
    67e2:	d301      	bcc.n	67e8 <__aeabi_uidiv+0xd8>
    67e4:	00cb      	lsls	r3, r1, #3
    67e6:	1ac0      	subs	r0, r0, r3
    67e8:	4152      	adcs	r2, r2
    67ea:	0883      	lsrs	r3, r0, #2
    67ec:	428b      	cmp	r3, r1
    67ee:	d301      	bcc.n	67f4 <__aeabi_uidiv+0xe4>
    67f0:	008b      	lsls	r3, r1, #2
    67f2:	1ac0      	subs	r0, r0, r3
    67f4:	4152      	adcs	r2, r2
    67f6:	0843      	lsrs	r3, r0, #1
    67f8:	428b      	cmp	r3, r1
    67fa:	d301      	bcc.n	6800 <__aeabi_uidiv+0xf0>
    67fc:	004b      	lsls	r3, r1, #1
    67fe:	1ac0      	subs	r0, r0, r3
    6800:	4152      	adcs	r2, r2
    6802:	1a41      	subs	r1, r0, r1
    6804:	d200      	bcs.n	6808 <__aeabi_uidiv+0xf8>
    6806:	4601      	mov	r1, r0
    6808:	4152      	adcs	r2, r2
    680a:	4610      	mov	r0, r2
    680c:	4770      	bx	lr
    680e:	e7ff      	b.n	6810 <__aeabi_uidiv+0x100>
    6810:	b501      	push	{r0, lr}
    6812:	2000      	movs	r0, #0
    6814:	f000 f806 	bl	6824 <__aeabi_idiv0>
    6818:	bd02      	pop	{r1, pc}
    681a:	46c0      	nop			; (mov r8, r8)

0000681c <__aeabi_uidivmod>:
    681c:	2900      	cmp	r1, #0
    681e:	d0f7      	beq.n	6810 <__aeabi_uidiv+0x100>
    6820:	e776      	b.n	6710 <__aeabi_uidiv>
    6822:	4770      	bx	lr

00006824 <__aeabi_idiv0>:
    6824:	4770      	bx	lr
    6826:	46c0      	nop			; (mov r8, r8)

00006828 <__aeabi_lmul>:
    6828:	b5f0      	push	{r4, r5, r6, r7, lr}
    682a:	464f      	mov	r7, r9
    682c:	4646      	mov	r6, r8
    682e:	b4c0      	push	{r6, r7}
    6830:	0416      	lsls	r6, r2, #16
    6832:	0c36      	lsrs	r6, r6, #16
    6834:	4699      	mov	r9, r3
    6836:	0033      	movs	r3, r6
    6838:	0405      	lsls	r5, r0, #16
    683a:	0c2c      	lsrs	r4, r5, #16
    683c:	0c07      	lsrs	r7, r0, #16
    683e:	0c15      	lsrs	r5, r2, #16
    6840:	4363      	muls	r3, r4
    6842:	437e      	muls	r6, r7
    6844:	436f      	muls	r7, r5
    6846:	4365      	muls	r5, r4
    6848:	0c1c      	lsrs	r4, r3, #16
    684a:	19ad      	adds	r5, r5, r6
    684c:	1964      	adds	r4, r4, r5
    684e:	469c      	mov	ip, r3
    6850:	42a6      	cmp	r6, r4
    6852:	d903      	bls.n	685c <__aeabi_lmul+0x34>
    6854:	2380      	movs	r3, #128	; 0x80
    6856:	025b      	lsls	r3, r3, #9
    6858:	4698      	mov	r8, r3
    685a:	4447      	add	r7, r8
    685c:	4663      	mov	r3, ip
    685e:	0c25      	lsrs	r5, r4, #16
    6860:	19ef      	adds	r7, r5, r7
    6862:	041d      	lsls	r5, r3, #16
    6864:	464b      	mov	r3, r9
    6866:	434a      	muls	r2, r1
    6868:	4343      	muls	r3, r0
    686a:	0c2d      	lsrs	r5, r5, #16
    686c:	0424      	lsls	r4, r4, #16
    686e:	1964      	adds	r4, r4, r5
    6870:	1899      	adds	r1, r3, r2
    6872:	19c9      	adds	r1, r1, r7
    6874:	0020      	movs	r0, r4
    6876:	bc0c      	pop	{r2, r3}
    6878:	4690      	mov	r8, r2
    687a:	4699      	mov	r9, r3
    687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    687e:	46c0      	nop			; (mov r8, r8)

00006880 <__libc_init_array>:
    6880:	4b0e      	ldr	r3, [pc, #56]	; (68bc <__libc_init_array+0x3c>)
    6882:	b570      	push	{r4, r5, r6, lr}
    6884:	2500      	movs	r5, #0
    6886:	001e      	movs	r6, r3
    6888:	4c0d      	ldr	r4, [pc, #52]	; (68c0 <__libc_init_array+0x40>)
    688a:	1ae4      	subs	r4, r4, r3
    688c:	10a4      	asrs	r4, r4, #2
    688e:	42a5      	cmp	r5, r4
    6890:	d004      	beq.n	689c <__libc_init_array+0x1c>
    6892:	00ab      	lsls	r3, r5, #2
    6894:	58f3      	ldr	r3, [r6, r3]
    6896:	4798      	blx	r3
    6898:	3501      	adds	r5, #1
    689a:	e7f8      	b.n	688e <__libc_init_array+0xe>
    689c:	f001 fdbe 	bl	841c <_init>
    68a0:	4b08      	ldr	r3, [pc, #32]	; (68c4 <__libc_init_array+0x44>)
    68a2:	2500      	movs	r5, #0
    68a4:	001e      	movs	r6, r3
    68a6:	4c08      	ldr	r4, [pc, #32]	; (68c8 <__libc_init_array+0x48>)
    68a8:	1ae4      	subs	r4, r4, r3
    68aa:	10a4      	asrs	r4, r4, #2
    68ac:	42a5      	cmp	r5, r4
    68ae:	d004      	beq.n	68ba <__libc_init_array+0x3a>
    68b0:	00ab      	lsls	r3, r5, #2
    68b2:	58f3      	ldr	r3, [r6, r3]
    68b4:	4798      	blx	r3
    68b6:	3501      	adds	r5, #1
    68b8:	e7f8      	b.n	68ac <__libc_init_array+0x2c>
    68ba:	bd70      	pop	{r4, r5, r6, pc}
    68bc:	00008428 	.word	0x00008428
    68c0:	00008428 	.word	0x00008428
    68c4:	00008428 	.word	0x00008428
    68c8:	0000842c 	.word	0x0000842c

000068cc <memcpy>:
    68cc:	2300      	movs	r3, #0
    68ce:	b510      	push	{r4, lr}
    68d0:	429a      	cmp	r2, r3
    68d2:	d003      	beq.n	68dc <memcpy+0x10>
    68d4:	5ccc      	ldrb	r4, [r1, r3]
    68d6:	54c4      	strb	r4, [r0, r3]
    68d8:	3301      	adds	r3, #1
    68da:	e7f9      	b.n	68d0 <memcpy+0x4>
    68dc:	bd10      	pop	{r4, pc}

000068de <memset>:
    68de:	0003      	movs	r3, r0
    68e0:	1882      	adds	r2, r0, r2
    68e2:	4293      	cmp	r3, r2
    68e4:	d002      	beq.n	68ec <memset+0xe>
    68e6:	7019      	strb	r1, [r3, #0]
    68e8:	3301      	adds	r3, #1
    68ea:	e7fa      	b.n	68e2 <memset+0x4>
    68ec:	4770      	bx	lr
	...

000068f0 <iprintf>:
    68f0:	b40f      	push	{r0, r1, r2, r3}
    68f2:	4b0b      	ldr	r3, [pc, #44]	; (6920 <iprintf+0x30>)
    68f4:	b513      	push	{r0, r1, r4, lr}
    68f6:	681c      	ldr	r4, [r3, #0]
    68f8:	2c00      	cmp	r4, #0
    68fa:	d005      	beq.n	6908 <iprintf+0x18>
    68fc:	69a3      	ldr	r3, [r4, #24]
    68fe:	2b00      	cmp	r3, #0
    6900:	d102      	bne.n	6908 <iprintf+0x18>
    6902:	0020      	movs	r0, r4
    6904:	f000 fb0a 	bl	6f1c <__sinit>
    6908:	ab05      	add	r3, sp, #20
    690a:	9a04      	ldr	r2, [sp, #16]
    690c:	68a1      	ldr	r1, [r4, #8]
    690e:	0020      	movs	r0, r4
    6910:	9301      	str	r3, [sp, #4]
    6912:	f000 fcc9 	bl	72a8 <_vfiprintf_r>
    6916:	bc16      	pop	{r1, r2, r4}
    6918:	bc08      	pop	{r3}
    691a:	b004      	add	sp, #16
    691c:	4718      	bx	r3
    691e:	46c0      	nop			; (mov r8, r8)
    6920:	20000070 	.word	0x20000070

00006924 <putchar>:
    6924:	4b08      	ldr	r3, [pc, #32]	; (6948 <putchar+0x24>)
    6926:	b570      	push	{r4, r5, r6, lr}
    6928:	681c      	ldr	r4, [r3, #0]
    692a:	0005      	movs	r5, r0
    692c:	2c00      	cmp	r4, #0
    692e:	d005      	beq.n	693c <putchar+0x18>
    6930:	69a3      	ldr	r3, [r4, #24]
    6932:	2b00      	cmp	r3, #0
    6934:	d102      	bne.n	693c <putchar+0x18>
    6936:	0020      	movs	r0, r4
    6938:	f000 faf0 	bl	6f1c <__sinit>
    693c:	0029      	movs	r1, r5
    693e:	68a2      	ldr	r2, [r4, #8]
    6940:	0020      	movs	r0, r4
    6942:	f000 ff5d 	bl	7800 <_putc_r>
    6946:	bd70      	pop	{r4, r5, r6, pc}
    6948:	20000070 	.word	0x20000070

0000694c <_puts_r>:
    694c:	b570      	push	{r4, r5, r6, lr}
    694e:	0005      	movs	r5, r0
    6950:	000e      	movs	r6, r1
    6952:	2800      	cmp	r0, #0
    6954:	d004      	beq.n	6960 <_puts_r+0x14>
    6956:	6983      	ldr	r3, [r0, #24]
    6958:	2b00      	cmp	r3, #0
    695a:	d101      	bne.n	6960 <_puts_r+0x14>
    695c:	f000 fade 	bl	6f1c <__sinit>
    6960:	69ab      	ldr	r3, [r5, #24]
    6962:	68ac      	ldr	r4, [r5, #8]
    6964:	2b00      	cmp	r3, #0
    6966:	d102      	bne.n	696e <_puts_r+0x22>
    6968:	0028      	movs	r0, r5
    696a:	f000 fad7 	bl	6f1c <__sinit>
    696e:	4b25      	ldr	r3, [pc, #148]	; (6a04 <_puts_r+0xb8>)
    6970:	429c      	cmp	r4, r3
    6972:	d101      	bne.n	6978 <_puts_r+0x2c>
    6974:	686c      	ldr	r4, [r5, #4]
    6976:	e008      	b.n	698a <_puts_r+0x3e>
    6978:	4b23      	ldr	r3, [pc, #140]	; (6a08 <_puts_r+0xbc>)
    697a:	429c      	cmp	r4, r3
    697c:	d101      	bne.n	6982 <_puts_r+0x36>
    697e:	68ac      	ldr	r4, [r5, #8]
    6980:	e003      	b.n	698a <_puts_r+0x3e>
    6982:	4b22      	ldr	r3, [pc, #136]	; (6a0c <_puts_r+0xc0>)
    6984:	429c      	cmp	r4, r3
    6986:	d100      	bne.n	698a <_puts_r+0x3e>
    6988:	68ec      	ldr	r4, [r5, #12]
    698a:	89a3      	ldrh	r3, [r4, #12]
    698c:	071b      	lsls	r3, r3, #28
    698e:	d502      	bpl.n	6996 <_puts_r+0x4a>
    6990:	6923      	ldr	r3, [r4, #16]
    6992:	2b00      	cmp	r3, #0
    6994:	d111      	bne.n	69ba <_puts_r+0x6e>
    6996:	0021      	movs	r1, r4
    6998:	0028      	movs	r0, r5
    699a:	f000 f955 	bl	6c48 <__swsetup_r>
    699e:	2800      	cmp	r0, #0
    69a0:	d00b      	beq.n	69ba <_puts_r+0x6e>
    69a2:	2001      	movs	r0, #1
    69a4:	4240      	negs	r0, r0
    69a6:	e02b      	b.n	6a00 <_puts_r+0xb4>
    69a8:	3b01      	subs	r3, #1
    69aa:	3601      	adds	r6, #1
    69ac:	60a3      	str	r3, [r4, #8]
    69ae:	2b00      	cmp	r3, #0
    69b0:	db08      	blt.n	69c4 <_puts_r+0x78>
    69b2:	6823      	ldr	r3, [r4, #0]
    69b4:	1c5a      	adds	r2, r3, #1
    69b6:	6022      	str	r2, [r4, #0]
    69b8:	7019      	strb	r1, [r3, #0]
    69ba:	7831      	ldrb	r1, [r6, #0]
    69bc:	68a3      	ldr	r3, [r4, #8]
    69be:	2900      	cmp	r1, #0
    69c0:	d1f2      	bne.n	69a8 <_puts_r+0x5c>
    69c2:	e00b      	b.n	69dc <_puts_r+0x90>
    69c4:	69a2      	ldr	r2, [r4, #24]
    69c6:	4293      	cmp	r3, r2
    69c8:	db01      	blt.n	69ce <_puts_r+0x82>
    69ca:	290a      	cmp	r1, #10
    69cc:	d1f1      	bne.n	69b2 <_puts_r+0x66>
    69ce:	0022      	movs	r2, r4
    69d0:	0028      	movs	r0, r5
    69d2:	f000 f8e1 	bl	6b98 <__swbuf_r>
    69d6:	1c43      	adds	r3, r0, #1
    69d8:	d1ef      	bne.n	69ba <_puts_r+0x6e>
    69da:	e7e2      	b.n	69a2 <_puts_r+0x56>
    69dc:	3b01      	subs	r3, #1
    69de:	60a3      	str	r3, [r4, #8]
    69e0:	2b00      	cmp	r3, #0
    69e2:	da08      	bge.n	69f6 <_puts_r+0xaa>
    69e4:	0022      	movs	r2, r4
    69e6:	310a      	adds	r1, #10
    69e8:	0028      	movs	r0, r5
    69ea:	f000 f8d5 	bl	6b98 <__swbuf_r>
    69ee:	1c43      	adds	r3, r0, #1
    69f0:	d0d7      	beq.n	69a2 <_puts_r+0x56>
    69f2:	200a      	movs	r0, #10
    69f4:	e004      	b.n	6a00 <_puts_r+0xb4>
    69f6:	200a      	movs	r0, #10
    69f8:	6823      	ldr	r3, [r4, #0]
    69fa:	1c5a      	adds	r2, r3, #1
    69fc:	6022      	str	r2, [r4, #0]
    69fe:	7018      	strb	r0, [r3, #0]
    6a00:	bd70      	pop	{r4, r5, r6, pc}
    6a02:	46c0      	nop			; (mov r8, r8)
    6a04:	00008388 	.word	0x00008388
    6a08:	000083a8 	.word	0x000083a8
    6a0c:	000083c8 	.word	0x000083c8

00006a10 <puts>:
    6a10:	b510      	push	{r4, lr}
    6a12:	4b03      	ldr	r3, [pc, #12]	; (6a20 <puts+0x10>)
    6a14:	0001      	movs	r1, r0
    6a16:	6818      	ldr	r0, [r3, #0]
    6a18:	f7ff ff98 	bl	694c <_puts_r>
    6a1c:	bd10      	pop	{r4, pc}
    6a1e:	46c0      	nop			; (mov r8, r8)
    6a20:	20000070 	.word	0x20000070

00006a24 <setbuf>:
    6a24:	424a      	negs	r2, r1
    6a26:	414a      	adcs	r2, r1
    6a28:	2380      	movs	r3, #128	; 0x80
    6a2a:	b510      	push	{r4, lr}
    6a2c:	0052      	lsls	r2, r2, #1
    6a2e:	00db      	lsls	r3, r3, #3
    6a30:	f000 f802 	bl	6a38 <setvbuf>
    6a34:	bd10      	pop	{r4, pc}
	...

00006a38 <setvbuf>:
    6a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a3a:	001d      	movs	r5, r3
    6a3c:	4b51      	ldr	r3, [pc, #324]	; (6b84 <setvbuf+0x14c>)
    6a3e:	b085      	sub	sp, #20
    6a40:	681e      	ldr	r6, [r3, #0]
    6a42:	0004      	movs	r4, r0
    6a44:	000f      	movs	r7, r1
    6a46:	9200      	str	r2, [sp, #0]
    6a48:	2e00      	cmp	r6, #0
    6a4a:	d005      	beq.n	6a58 <setvbuf+0x20>
    6a4c:	69b3      	ldr	r3, [r6, #24]
    6a4e:	2b00      	cmp	r3, #0
    6a50:	d102      	bne.n	6a58 <setvbuf+0x20>
    6a52:	0030      	movs	r0, r6
    6a54:	f000 fa62 	bl	6f1c <__sinit>
    6a58:	4b4b      	ldr	r3, [pc, #300]	; (6b88 <setvbuf+0x150>)
    6a5a:	429c      	cmp	r4, r3
    6a5c:	d101      	bne.n	6a62 <setvbuf+0x2a>
    6a5e:	6874      	ldr	r4, [r6, #4]
    6a60:	e008      	b.n	6a74 <setvbuf+0x3c>
    6a62:	4b4a      	ldr	r3, [pc, #296]	; (6b8c <setvbuf+0x154>)
    6a64:	429c      	cmp	r4, r3
    6a66:	d101      	bne.n	6a6c <setvbuf+0x34>
    6a68:	68b4      	ldr	r4, [r6, #8]
    6a6a:	e003      	b.n	6a74 <setvbuf+0x3c>
    6a6c:	4b48      	ldr	r3, [pc, #288]	; (6b90 <setvbuf+0x158>)
    6a6e:	429c      	cmp	r4, r3
    6a70:	d100      	bne.n	6a74 <setvbuf+0x3c>
    6a72:	68f4      	ldr	r4, [r6, #12]
    6a74:	9b00      	ldr	r3, [sp, #0]
    6a76:	2b02      	cmp	r3, #2
    6a78:	d005      	beq.n	6a86 <setvbuf+0x4e>
    6a7a:	2b01      	cmp	r3, #1
    6a7c:	d900      	bls.n	6a80 <setvbuf+0x48>
    6a7e:	e07c      	b.n	6b7a <setvbuf+0x142>
    6a80:	2d00      	cmp	r5, #0
    6a82:	da00      	bge.n	6a86 <setvbuf+0x4e>
    6a84:	e079      	b.n	6b7a <setvbuf+0x142>
    6a86:	0021      	movs	r1, r4
    6a88:	0030      	movs	r0, r6
    6a8a:	f000 f9d9 	bl	6e40 <_fflush_r>
    6a8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6a90:	2900      	cmp	r1, #0
    6a92:	d008      	beq.n	6aa6 <setvbuf+0x6e>
    6a94:	0023      	movs	r3, r4
    6a96:	3344      	adds	r3, #68	; 0x44
    6a98:	4299      	cmp	r1, r3
    6a9a:	d002      	beq.n	6aa2 <setvbuf+0x6a>
    6a9c:	0030      	movs	r0, r6
    6a9e:	f000 fb3f 	bl	7120 <_free_r>
    6aa2:	2300      	movs	r3, #0
    6aa4:	6363      	str	r3, [r4, #52]	; 0x34
    6aa6:	2300      	movs	r3, #0
    6aa8:	61a3      	str	r3, [r4, #24]
    6aaa:	6063      	str	r3, [r4, #4]
    6aac:	89a3      	ldrh	r3, [r4, #12]
    6aae:	061b      	lsls	r3, r3, #24
    6ab0:	d503      	bpl.n	6aba <setvbuf+0x82>
    6ab2:	6921      	ldr	r1, [r4, #16]
    6ab4:	0030      	movs	r0, r6
    6ab6:	f000 fb33 	bl	7120 <_free_r>
    6aba:	89a2      	ldrh	r2, [r4, #12]
    6abc:	4b35      	ldr	r3, [pc, #212]	; (6b94 <setvbuf+0x15c>)
    6abe:	4013      	ands	r3, r2
    6ac0:	81a3      	strh	r3, [r4, #12]
    6ac2:	9b00      	ldr	r3, [sp, #0]
    6ac4:	2b02      	cmp	r3, #2
    6ac6:	d021      	beq.n	6b0c <setvbuf+0xd4>
    6ac8:	ab03      	add	r3, sp, #12
    6aca:	aa02      	add	r2, sp, #8
    6acc:	0021      	movs	r1, r4
    6ace:	0030      	movs	r0, r6
    6ad0:	f000 fab8 	bl	7044 <__swhatbuf_r>
    6ad4:	89a3      	ldrh	r3, [r4, #12]
    6ad6:	4318      	orrs	r0, r3
    6ad8:	81a0      	strh	r0, [r4, #12]
    6ada:	2d00      	cmp	r5, #0
    6adc:	d101      	bne.n	6ae2 <setvbuf+0xaa>
    6ade:	9d02      	ldr	r5, [sp, #8]
    6ae0:	e001      	b.n	6ae6 <setvbuf+0xae>
    6ae2:	2f00      	cmp	r7, #0
    6ae4:	d125      	bne.n	6b32 <setvbuf+0xfa>
    6ae6:	0028      	movs	r0, r5
    6ae8:	f000 fb10 	bl	710c <malloc>
    6aec:	9501      	str	r5, [sp, #4]
    6aee:	1e07      	subs	r7, r0, #0
    6af0:	d11a      	bne.n	6b28 <setvbuf+0xf0>
    6af2:	9b02      	ldr	r3, [sp, #8]
    6af4:	9301      	str	r3, [sp, #4]
    6af6:	42ab      	cmp	r3, r5
    6af8:	d102      	bne.n	6b00 <setvbuf+0xc8>
    6afa:	2001      	movs	r0, #1
    6afc:	4240      	negs	r0, r0
    6afe:	e006      	b.n	6b0e <setvbuf+0xd6>
    6b00:	9801      	ldr	r0, [sp, #4]
    6b02:	f000 fb03 	bl	710c <malloc>
    6b06:	1e07      	subs	r7, r0, #0
    6b08:	d10e      	bne.n	6b28 <setvbuf+0xf0>
    6b0a:	e7f6      	b.n	6afa <setvbuf+0xc2>
    6b0c:	2000      	movs	r0, #0
    6b0e:	2202      	movs	r2, #2
    6b10:	89a3      	ldrh	r3, [r4, #12]
    6b12:	4313      	orrs	r3, r2
    6b14:	81a3      	strh	r3, [r4, #12]
    6b16:	2300      	movs	r3, #0
    6b18:	60a3      	str	r3, [r4, #8]
    6b1a:	0023      	movs	r3, r4
    6b1c:	3347      	adds	r3, #71	; 0x47
    6b1e:	6023      	str	r3, [r4, #0]
    6b20:	6123      	str	r3, [r4, #16]
    6b22:	2301      	movs	r3, #1
    6b24:	6163      	str	r3, [r4, #20]
    6b26:	e02a      	b.n	6b7e <setvbuf+0x146>
    6b28:	2280      	movs	r2, #128	; 0x80
    6b2a:	89a3      	ldrh	r3, [r4, #12]
    6b2c:	9d01      	ldr	r5, [sp, #4]
    6b2e:	4313      	orrs	r3, r2
    6b30:	81a3      	strh	r3, [r4, #12]
    6b32:	69b3      	ldr	r3, [r6, #24]
    6b34:	2b00      	cmp	r3, #0
    6b36:	d102      	bne.n	6b3e <setvbuf+0x106>
    6b38:	0030      	movs	r0, r6
    6b3a:	f000 f9ef 	bl	6f1c <__sinit>
    6b3e:	9b00      	ldr	r3, [sp, #0]
    6b40:	2b01      	cmp	r3, #1
    6b42:	d103      	bne.n	6b4c <setvbuf+0x114>
    6b44:	89a3      	ldrh	r3, [r4, #12]
    6b46:	9a00      	ldr	r2, [sp, #0]
    6b48:	431a      	orrs	r2, r3
    6b4a:	81a2      	strh	r2, [r4, #12]
    6b4c:	2308      	movs	r3, #8
    6b4e:	89a2      	ldrh	r2, [r4, #12]
    6b50:	6027      	str	r7, [r4, #0]
    6b52:	4013      	ands	r3, r2
    6b54:	6127      	str	r7, [r4, #16]
    6b56:	6165      	str	r5, [r4, #20]
    6b58:	1e18      	subs	r0, r3, #0
    6b5a:	d00c      	beq.n	6b76 <setvbuf+0x13e>
    6b5c:	2301      	movs	r3, #1
    6b5e:	401a      	ands	r2, r3
    6b60:	2300      	movs	r3, #0
    6b62:	1e10      	subs	r0, r2, #0
    6b64:	4298      	cmp	r0, r3
    6b66:	d004      	beq.n	6b72 <setvbuf+0x13a>
    6b68:	426d      	negs	r5, r5
    6b6a:	60a3      	str	r3, [r4, #8]
    6b6c:	61a5      	str	r5, [r4, #24]
    6b6e:	0018      	movs	r0, r3
    6b70:	e005      	b.n	6b7e <setvbuf+0x146>
    6b72:	60a5      	str	r5, [r4, #8]
    6b74:	e003      	b.n	6b7e <setvbuf+0x146>
    6b76:	60a3      	str	r3, [r4, #8]
    6b78:	e001      	b.n	6b7e <setvbuf+0x146>
    6b7a:	2001      	movs	r0, #1
    6b7c:	4240      	negs	r0, r0
    6b7e:	b005      	add	sp, #20
    6b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b82:	46c0      	nop			; (mov r8, r8)
    6b84:	20000070 	.word	0x20000070
    6b88:	00008388 	.word	0x00008388
    6b8c:	000083a8 	.word	0x000083a8
    6b90:	000083c8 	.word	0x000083c8
    6b94:	fffff35c 	.word	0xfffff35c

00006b98 <__swbuf_r>:
    6b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b9a:	0005      	movs	r5, r0
    6b9c:	000f      	movs	r7, r1
    6b9e:	0014      	movs	r4, r2
    6ba0:	2800      	cmp	r0, #0
    6ba2:	d004      	beq.n	6bae <__swbuf_r+0x16>
    6ba4:	6983      	ldr	r3, [r0, #24]
    6ba6:	2b00      	cmp	r3, #0
    6ba8:	d101      	bne.n	6bae <__swbuf_r+0x16>
    6baa:	f000 f9b7 	bl	6f1c <__sinit>
    6bae:	4b23      	ldr	r3, [pc, #140]	; (6c3c <__swbuf_r+0xa4>)
    6bb0:	429c      	cmp	r4, r3
    6bb2:	d101      	bne.n	6bb8 <__swbuf_r+0x20>
    6bb4:	686c      	ldr	r4, [r5, #4]
    6bb6:	e008      	b.n	6bca <__swbuf_r+0x32>
    6bb8:	4b21      	ldr	r3, [pc, #132]	; (6c40 <__swbuf_r+0xa8>)
    6bba:	429c      	cmp	r4, r3
    6bbc:	d101      	bne.n	6bc2 <__swbuf_r+0x2a>
    6bbe:	68ac      	ldr	r4, [r5, #8]
    6bc0:	e003      	b.n	6bca <__swbuf_r+0x32>
    6bc2:	4b20      	ldr	r3, [pc, #128]	; (6c44 <__swbuf_r+0xac>)
    6bc4:	429c      	cmp	r4, r3
    6bc6:	d100      	bne.n	6bca <__swbuf_r+0x32>
    6bc8:	68ec      	ldr	r4, [r5, #12]
    6bca:	69a3      	ldr	r3, [r4, #24]
    6bcc:	60a3      	str	r3, [r4, #8]
    6bce:	89a3      	ldrh	r3, [r4, #12]
    6bd0:	071b      	lsls	r3, r3, #28
    6bd2:	d50a      	bpl.n	6bea <__swbuf_r+0x52>
    6bd4:	6923      	ldr	r3, [r4, #16]
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d007      	beq.n	6bea <__swbuf_r+0x52>
    6bda:	6823      	ldr	r3, [r4, #0]
    6bdc:	6922      	ldr	r2, [r4, #16]
    6bde:	b2fe      	uxtb	r6, r7
    6be0:	1a98      	subs	r0, r3, r2
    6be2:	6963      	ldr	r3, [r4, #20]
    6be4:	4298      	cmp	r0, r3
    6be6:	db0f      	blt.n	6c08 <__swbuf_r+0x70>
    6be8:	e008      	b.n	6bfc <__swbuf_r+0x64>
    6bea:	0021      	movs	r1, r4
    6bec:	0028      	movs	r0, r5
    6bee:	f000 f82b 	bl	6c48 <__swsetup_r>
    6bf2:	2800      	cmp	r0, #0
    6bf4:	d0f1      	beq.n	6bda <__swbuf_r+0x42>
    6bf6:	2001      	movs	r0, #1
    6bf8:	4240      	negs	r0, r0
    6bfa:	e01d      	b.n	6c38 <__swbuf_r+0xa0>
    6bfc:	0021      	movs	r1, r4
    6bfe:	0028      	movs	r0, r5
    6c00:	f000 f91e 	bl	6e40 <_fflush_r>
    6c04:	2800      	cmp	r0, #0
    6c06:	d1f6      	bne.n	6bf6 <__swbuf_r+0x5e>
    6c08:	68a3      	ldr	r3, [r4, #8]
    6c0a:	3001      	adds	r0, #1
    6c0c:	3b01      	subs	r3, #1
    6c0e:	60a3      	str	r3, [r4, #8]
    6c10:	6823      	ldr	r3, [r4, #0]
    6c12:	1c5a      	adds	r2, r3, #1
    6c14:	6022      	str	r2, [r4, #0]
    6c16:	701f      	strb	r7, [r3, #0]
    6c18:	6963      	ldr	r3, [r4, #20]
    6c1a:	4298      	cmp	r0, r3
    6c1c:	d005      	beq.n	6c2a <__swbuf_r+0x92>
    6c1e:	89a3      	ldrh	r3, [r4, #12]
    6c20:	0030      	movs	r0, r6
    6c22:	07db      	lsls	r3, r3, #31
    6c24:	d508      	bpl.n	6c38 <__swbuf_r+0xa0>
    6c26:	2e0a      	cmp	r6, #10
    6c28:	d106      	bne.n	6c38 <__swbuf_r+0xa0>
    6c2a:	0021      	movs	r1, r4
    6c2c:	0028      	movs	r0, r5
    6c2e:	f000 f907 	bl	6e40 <_fflush_r>
    6c32:	2800      	cmp	r0, #0
    6c34:	d1df      	bne.n	6bf6 <__swbuf_r+0x5e>
    6c36:	0030      	movs	r0, r6
    6c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c3a:	46c0      	nop			; (mov r8, r8)
    6c3c:	00008388 	.word	0x00008388
    6c40:	000083a8 	.word	0x000083a8
    6c44:	000083c8 	.word	0x000083c8

00006c48 <__swsetup_r>:
    6c48:	4b36      	ldr	r3, [pc, #216]	; (6d24 <__swsetup_r+0xdc>)
    6c4a:	b570      	push	{r4, r5, r6, lr}
    6c4c:	681d      	ldr	r5, [r3, #0]
    6c4e:	0006      	movs	r6, r0
    6c50:	000c      	movs	r4, r1
    6c52:	2d00      	cmp	r5, #0
    6c54:	d005      	beq.n	6c62 <__swsetup_r+0x1a>
    6c56:	69ab      	ldr	r3, [r5, #24]
    6c58:	2b00      	cmp	r3, #0
    6c5a:	d102      	bne.n	6c62 <__swsetup_r+0x1a>
    6c5c:	0028      	movs	r0, r5
    6c5e:	f000 f95d 	bl	6f1c <__sinit>
    6c62:	4b31      	ldr	r3, [pc, #196]	; (6d28 <__swsetup_r+0xe0>)
    6c64:	429c      	cmp	r4, r3
    6c66:	d101      	bne.n	6c6c <__swsetup_r+0x24>
    6c68:	686c      	ldr	r4, [r5, #4]
    6c6a:	e008      	b.n	6c7e <__swsetup_r+0x36>
    6c6c:	4b2f      	ldr	r3, [pc, #188]	; (6d2c <__swsetup_r+0xe4>)
    6c6e:	429c      	cmp	r4, r3
    6c70:	d101      	bne.n	6c76 <__swsetup_r+0x2e>
    6c72:	68ac      	ldr	r4, [r5, #8]
    6c74:	e003      	b.n	6c7e <__swsetup_r+0x36>
    6c76:	4b2e      	ldr	r3, [pc, #184]	; (6d30 <__swsetup_r+0xe8>)
    6c78:	429c      	cmp	r4, r3
    6c7a:	d100      	bne.n	6c7e <__swsetup_r+0x36>
    6c7c:	68ec      	ldr	r4, [r5, #12]
    6c7e:	220c      	movs	r2, #12
    6c80:	5ea3      	ldrsh	r3, [r4, r2]
    6c82:	b29a      	uxth	r2, r3
    6c84:	0711      	lsls	r1, r2, #28
    6c86:	d423      	bmi.n	6cd0 <__swsetup_r+0x88>
    6c88:	06d1      	lsls	r1, r2, #27
    6c8a:	d407      	bmi.n	6c9c <__swsetup_r+0x54>
    6c8c:	2209      	movs	r2, #9
    6c8e:	2001      	movs	r0, #1
    6c90:	6032      	str	r2, [r6, #0]
    6c92:	3237      	adds	r2, #55	; 0x37
    6c94:	4313      	orrs	r3, r2
    6c96:	81a3      	strh	r3, [r4, #12]
    6c98:	4240      	negs	r0, r0
    6c9a:	e042      	b.n	6d22 <__swsetup_r+0xda>
    6c9c:	0753      	lsls	r3, r2, #29
    6c9e:	d513      	bpl.n	6cc8 <__swsetup_r+0x80>
    6ca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6ca2:	2900      	cmp	r1, #0
    6ca4:	d008      	beq.n	6cb8 <__swsetup_r+0x70>
    6ca6:	0023      	movs	r3, r4
    6ca8:	3344      	adds	r3, #68	; 0x44
    6caa:	4299      	cmp	r1, r3
    6cac:	d002      	beq.n	6cb4 <__swsetup_r+0x6c>
    6cae:	0030      	movs	r0, r6
    6cb0:	f000 fa36 	bl	7120 <_free_r>
    6cb4:	2300      	movs	r3, #0
    6cb6:	6363      	str	r3, [r4, #52]	; 0x34
    6cb8:	2224      	movs	r2, #36	; 0x24
    6cba:	89a3      	ldrh	r3, [r4, #12]
    6cbc:	4393      	bics	r3, r2
    6cbe:	81a3      	strh	r3, [r4, #12]
    6cc0:	2300      	movs	r3, #0
    6cc2:	6063      	str	r3, [r4, #4]
    6cc4:	6923      	ldr	r3, [r4, #16]
    6cc6:	6023      	str	r3, [r4, #0]
    6cc8:	2208      	movs	r2, #8
    6cca:	89a3      	ldrh	r3, [r4, #12]
    6ccc:	4313      	orrs	r3, r2
    6cce:	81a3      	strh	r3, [r4, #12]
    6cd0:	6923      	ldr	r3, [r4, #16]
    6cd2:	2b00      	cmp	r3, #0
    6cd4:	d10b      	bne.n	6cee <__swsetup_r+0xa6>
    6cd6:	23a0      	movs	r3, #160	; 0xa0
    6cd8:	89a2      	ldrh	r2, [r4, #12]
    6cda:	009b      	lsls	r3, r3, #2
    6cdc:	4013      	ands	r3, r2
    6cde:	2280      	movs	r2, #128	; 0x80
    6ce0:	0092      	lsls	r2, r2, #2
    6ce2:	4293      	cmp	r3, r2
    6ce4:	d003      	beq.n	6cee <__swsetup_r+0xa6>
    6ce6:	0021      	movs	r1, r4
    6ce8:	0030      	movs	r0, r6
    6cea:	f000 f9d1 	bl	7090 <__smakebuf_r>
    6cee:	2301      	movs	r3, #1
    6cf0:	89a2      	ldrh	r2, [r4, #12]
    6cf2:	4013      	ands	r3, r2
    6cf4:	d005      	beq.n	6d02 <__swsetup_r+0xba>
    6cf6:	2300      	movs	r3, #0
    6cf8:	60a3      	str	r3, [r4, #8]
    6cfa:	6963      	ldr	r3, [r4, #20]
    6cfc:	425b      	negs	r3, r3
    6cfe:	61a3      	str	r3, [r4, #24]
    6d00:	e003      	b.n	6d0a <__swsetup_r+0xc2>
    6d02:	0792      	lsls	r2, r2, #30
    6d04:	d400      	bmi.n	6d08 <__swsetup_r+0xc0>
    6d06:	6963      	ldr	r3, [r4, #20]
    6d08:	60a3      	str	r3, [r4, #8]
    6d0a:	2000      	movs	r0, #0
    6d0c:	6923      	ldr	r3, [r4, #16]
    6d0e:	4283      	cmp	r3, r0
    6d10:	d107      	bne.n	6d22 <__swsetup_r+0xda>
    6d12:	220c      	movs	r2, #12
    6d14:	5ea3      	ldrsh	r3, [r4, r2]
    6d16:	061a      	lsls	r2, r3, #24
    6d18:	d503      	bpl.n	6d22 <__swsetup_r+0xda>
    6d1a:	2240      	movs	r2, #64	; 0x40
    6d1c:	4313      	orrs	r3, r2
    6d1e:	81a3      	strh	r3, [r4, #12]
    6d20:	3801      	subs	r0, #1
    6d22:	bd70      	pop	{r4, r5, r6, pc}
    6d24:	20000070 	.word	0x20000070
    6d28:	00008388 	.word	0x00008388
    6d2c:	000083a8 	.word	0x000083a8
    6d30:	000083c8 	.word	0x000083c8

00006d34 <__sflush_r>:
    6d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6d36:	898a      	ldrh	r2, [r1, #12]
    6d38:	0005      	movs	r5, r0
    6d3a:	000c      	movs	r4, r1
    6d3c:	0713      	lsls	r3, r2, #28
    6d3e:	d45a      	bmi.n	6df6 <__sflush_r+0xc2>
    6d40:	684b      	ldr	r3, [r1, #4]
    6d42:	2b00      	cmp	r3, #0
    6d44:	dc02      	bgt.n	6d4c <__sflush_r+0x18>
    6d46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    6d48:	2b00      	cmp	r3, #0
    6d4a:	dd19      	ble.n	6d80 <__sflush_r+0x4c>
    6d4c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6d4e:	2f00      	cmp	r7, #0
    6d50:	d016      	beq.n	6d80 <__sflush_r+0x4c>
    6d52:	2300      	movs	r3, #0
    6d54:	682e      	ldr	r6, [r5, #0]
    6d56:	602b      	str	r3, [r5, #0]
    6d58:	2380      	movs	r3, #128	; 0x80
    6d5a:	015b      	lsls	r3, r3, #5
    6d5c:	401a      	ands	r2, r3
    6d5e:	d001      	beq.n	6d64 <__sflush_r+0x30>
    6d60:	6d60      	ldr	r0, [r4, #84]	; 0x54
    6d62:	e014      	b.n	6d8e <__sflush_r+0x5a>
    6d64:	2301      	movs	r3, #1
    6d66:	6a21      	ldr	r1, [r4, #32]
    6d68:	0028      	movs	r0, r5
    6d6a:	47b8      	blx	r7
    6d6c:	1c43      	adds	r3, r0, #1
    6d6e:	d10e      	bne.n	6d8e <__sflush_r+0x5a>
    6d70:	682b      	ldr	r3, [r5, #0]
    6d72:	2b00      	cmp	r3, #0
    6d74:	d00b      	beq.n	6d8e <__sflush_r+0x5a>
    6d76:	2b1d      	cmp	r3, #29
    6d78:	d001      	beq.n	6d7e <__sflush_r+0x4a>
    6d7a:	2b16      	cmp	r3, #22
    6d7c:	d102      	bne.n	6d84 <__sflush_r+0x50>
    6d7e:	602e      	str	r6, [r5, #0]
    6d80:	2000      	movs	r0, #0
    6d82:	e05a      	b.n	6e3a <__sflush_r+0x106>
    6d84:	2240      	movs	r2, #64	; 0x40
    6d86:	89a3      	ldrh	r3, [r4, #12]
    6d88:	4313      	orrs	r3, r2
    6d8a:	81a3      	strh	r3, [r4, #12]
    6d8c:	e055      	b.n	6e3a <__sflush_r+0x106>
    6d8e:	89a3      	ldrh	r3, [r4, #12]
    6d90:	075b      	lsls	r3, r3, #29
    6d92:	d506      	bpl.n	6da2 <__sflush_r+0x6e>
    6d94:	6863      	ldr	r3, [r4, #4]
    6d96:	1ac0      	subs	r0, r0, r3
    6d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	d001      	beq.n	6da2 <__sflush_r+0x6e>
    6d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    6da0:	1ac0      	subs	r0, r0, r3
    6da2:	2300      	movs	r3, #0
    6da4:	0002      	movs	r2, r0
    6da6:	6a21      	ldr	r1, [r4, #32]
    6da8:	0028      	movs	r0, r5
    6daa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    6dac:	47b8      	blx	r7
    6dae:	89a3      	ldrh	r3, [r4, #12]
    6db0:	1c42      	adds	r2, r0, #1
    6db2:	d106      	bne.n	6dc2 <__sflush_r+0x8e>
    6db4:	6829      	ldr	r1, [r5, #0]
    6db6:	291d      	cmp	r1, #29
    6db8:	d83a      	bhi.n	6e30 <__sflush_r+0xfc>
    6dba:	4a20      	ldr	r2, [pc, #128]	; (6e3c <__sflush_r+0x108>)
    6dbc:	40ca      	lsrs	r2, r1
    6dbe:	07d2      	lsls	r2, r2, #31
    6dc0:	d536      	bpl.n	6e30 <__sflush_r+0xfc>
    6dc2:	2200      	movs	r2, #0
    6dc4:	6062      	str	r2, [r4, #4]
    6dc6:	6922      	ldr	r2, [r4, #16]
    6dc8:	6022      	str	r2, [r4, #0]
    6dca:	04db      	lsls	r3, r3, #19
    6dcc:	d505      	bpl.n	6dda <__sflush_r+0xa6>
    6dce:	1c43      	adds	r3, r0, #1
    6dd0:	d102      	bne.n	6dd8 <__sflush_r+0xa4>
    6dd2:	682b      	ldr	r3, [r5, #0]
    6dd4:	2b00      	cmp	r3, #0
    6dd6:	d100      	bne.n	6dda <__sflush_r+0xa6>
    6dd8:	6560      	str	r0, [r4, #84]	; 0x54
    6dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6ddc:	602e      	str	r6, [r5, #0]
    6dde:	2900      	cmp	r1, #0
    6de0:	d0ce      	beq.n	6d80 <__sflush_r+0x4c>
    6de2:	0023      	movs	r3, r4
    6de4:	3344      	adds	r3, #68	; 0x44
    6de6:	4299      	cmp	r1, r3
    6de8:	d002      	beq.n	6df0 <__sflush_r+0xbc>
    6dea:	0028      	movs	r0, r5
    6dec:	f000 f998 	bl	7120 <_free_r>
    6df0:	2000      	movs	r0, #0
    6df2:	6360      	str	r0, [r4, #52]	; 0x34
    6df4:	e021      	b.n	6e3a <__sflush_r+0x106>
    6df6:	690f      	ldr	r7, [r1, #16]
    6df8:	2f00      	cmp	r7, #0
    6dfa:	d0c1      	beq.n	6d80 <__sflush_r+0x4c>
    6dfc:	680b      	ldr	r3, [r1, #0]
    6dfe:	600f      	str	r7, [r1, #0]
    6e00:	1bdb      	subs	r3, r3, r7
    6e02:	9301      	str	r3, [sp, #4]
    6e04:	2300      	movs	r3, #0
    6e06:	0792      	lsls	r2, r2, #30
    6e08:	d100      	bne.n	6e0c <__sflush_r+0xd8>
    6e0a:	694b      	ldr	r3, [r1, #20]
    6e0c:	60a3      	str	r3, [r4, #8]
    6e0e:	e003      	b.n	6e18 <__sflush_r+0xe4>
    6e10:	9b01      	ldr	r3, [sp, #4]
    6e12:	183f      	adds	r7, r7, r0
    6e14:	1a1b      	subs	r3, r3, r0
    6e16:	9301      	str	r3, [sp, #4]
    6e18:	9b01      	ldr	r3, [sp, #4]
    6e1a:	2b00      	cmp	r3, #0
    6e1c:	ddb0      	ble.n	6d80 <__sflush_r+0x4c>
    6e1e:	9b01      	ldr	r3, [sp, #4]
    6e20:	003a      	movs	r2, r7
    6e22:	6a21      	ldr	r1, [r4, #32]
    6e24:	0028      	movs	r0, r5
    6e26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    6e28:	47b0      	blx	r6
    6e2a:	2800      	cmp	r0, #0
    6e2c:	dcf0      	bgt.n	6e10 <__sflush_r+0xdc>
    6e2e:	89a3      	ldrh	r3, [r4, #12]
    6e30:	2240      	movs	r2, #64	; 0x40
    6e32:	2001      	movs	r0, #1
    6e34:	4313      	orrs	r3, r2
    6e36:	81a3      	strh	r3, [r4, #12]
    6e38:	4240      	negs	r0, r0
    6e3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6e3c:	20400001 	.word	0x20400001

00006e40 <_fflush_r>:
    6e40:	690b      	ldr	r3, [r1, #16]
    6e42:	b570      	push	{r4, r5, r6, lr}
    6e44:	0005      	movs	r5, r0
    6e46:	000c      	movs	r4, r1
    6e48:	2b00      	cmp	r3, #0
    6e4a:	d101      	bne.n	6e50 <_fflush_r+0x10>
    6e4c:	2000      	movs	r0, #0
    6e4e:	e01c      	b.n	6e8a <_fflush_r+0x4a>
    6e50:	2800      	cmp	r0, #0
    6e52:	d004      	beq.n	6e5e <_fflush_r+0x1e>
    6e54:	6983      	ldr	r3, [r0, #24]
    6e56:	2b00      	cmp	r3, #0
    6e58:	d101      	bne.n	6e5e <_fflush_r+0x1e>
    6e5a:	f000 f85f 	bl	6f1c <__sinit>
    6e5e:	4b0b      	ldr	r3, [pc, #44]	; (6e8c <_fflush_r+0x4c>)
    6e60:	429c      	cmp	r4, r3
    6e62:	d101      	bne.n	6e68 <_fflush_r+0x28>
    6e64:	686c      	ldr	r4, [r5, #4]
    6e66:	e008      	b.n	6e7a <_fflush_r+0x3a>
    6e68:	4b09      	ldr	r3, [pc, #36]	; (6e90 <_fflush_r+0x50>)
    6e6a:	429c      	cmp	r4, r3
    6e6c:	d101      	bne.n	6e72 <_fflush_r+0x32>
    6e6e:	68ac      	ldr	r4, [r5, #8]
    6e70:	e003      	b.n	6e7a <_fflush_r+0x3a>
    6e72:	4b08      	ldr	r3, [pc, #32]	; (6e94 <_fflush_r+0x54>)
    6e74:	429c      	cmp	r4, r3
    6e76:	d100      	bne.n	6e7a <_fflush_r+0x3a>
    6e78:	68ec      	ldr	r4, [r5, #12]
    6e7a:	220c      	movs	r2, #12
    6e7c:	5ea3      	ldrsh	r3, [r4, r2]
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d0e4      	beq.n	6e4c <_fflush_r+0xc>
    6e82:	0021      	movs	r1, r4
    6e84:	0028      	movs	r0, r5
    6e86:	f7ff ff55 	bl	6d34 <__sflush_r>
    6e8a:	bd70      	pop	{r4, r5, r6, pc}
    6e8c:	00008388 	.word	0x00008388
    6e90:	000083a8 	.word	0x000083a8
    6e94:	000083c8 	.word	0x000083c8

00006e98 <_cleanup_r>:
    6e98:	b510      	push	{r4, lr}
    6e9a:	4902      	ldr	r1, [pc, #8]	; (6ea4 <_cleanup_r+0xc>)
    6e9c:	f000 f8b0 	bl	7000 <_fwalk_reent>
    6ea0:	bd10      	pop	{r4, pc}
    6ea2:	46c0      	nop			; (mov r8, r8)
    6ea4:	00006e41 	.word	0x00006e41

00006ea8 <std.isra.0>:
    6ea8:	2300      	movs	r3, #0
    6eaa:	b510      	push	{r4, lr}
    6eac:	0004      	movs	r4, r0
    6eae:	6003      	str	r3, [r0, #0]
    6eb0:	6043      	str	r3, [r0, #4]
    6eb2:	6083      	str	r3, [r0, #8]
    6eb4:	8181      	strh	r1, [r0, #12]
    6eb6:	6643      	str	r3, [r0, #100]	; 0x64
    6eb8:	81c2      	strh	r2, [r0, #14]
    6eba:	6103      	str	r3, [r0, #16]
    6ebc:	6143      	str	r3, [r0, #20]
    6ebe:	6183      	str	r3, [r0, #24]
    6ec0:	0019      	movs	r1, r3
    6ec2:	2208      	movs	r2, #8
    6ec4:	305c      	adds	r0, #92	; 0x5c
    6ec6:	f7ff fd0a 	bl	68de <memset>
    6eca:	4b05      	ldr	r3, [pc, #20]	; (6ee0 <std.isra.0+0x38>)
    6ecc:	6224      	str	r4, [r4, #32]
    6ece:	6263      	str	r3, [r4, #36]	; 0x24
    6ed0:	4b04      	ldr	r3, [pc, #16]	; (6ee4 <std.isra.0+0x3c>)
    6ed2:	62a3      	str	r3, [r4, #40]	; 0x28
    6ed4:	4b04      	ldr	r3, [pc, #16]	; (6ee8 <std.isra.0+0x40>)
    6ed6:	62e3      	str	r3, [r4, #44]	; 0x2c
    6ed8:	4b04      	ldr	r3, [pc, #16]	; (6eec <std.isra.0+0x44>)
    6eda:	6323      	str	r3, [r4, #48]	; 0x30
    6edc:	bd10      	pop	{r4, pc}
    6ede:	46c0      	nop			; (mov r8, r8)
    6ee0:	00007891 	.word	0x00007891
    6ee4:	000078b9 	.word	0x000078b9
    6ee8:	000078f1 	.word	0x000078f1
    6eec:	0000791d 	.word	0x0000791d

00006ef0 <__sfmoreglue>:
    6ef0:	b570      	push	{r4, r5, r6, lr}
    6ef2:	2568      	movs	r5, #104	; 0x68
    6ef4:	1e4b      	subs	r3, r1, #1
    6ef6:	435d      	muls	r5, r3
    6ef8:	000e      	movs	r6, r1
    6efa:	0029      	movs	r1, r5
    6efc:	3174      	adds	r1, #116	; 0x74
    6efe:	f000 f955 	bl	71ac <_malloc_r>
    6f02:	1e04      	subs	r4, r0, #0
    6f04:	d008      	beq.n	6f18 <__sfmoreglue+0x28>
    6f06:	2100      	movs	r1, #0
    6f08:	002a      	movs	r2, r5
    6f0a:	6001      	str	r1, [r0, #0]
    6f0c:	6046      	str	r6, [r0, #4]
    6f0e:	300c      	adds	r0, #12
    6f10:	60a0      	str	r0, [r4, #8]
    6f12:	3268      	adds	r2, #104	; 0x68
    6f14:	f7ff fce3 	bl	68de <memset>
    6f18:	0020      	movs	r0, r4
    6f1a:	bd70      	pop	{r4, r5, r6, pc}

00006f1c <__sinit>:
    6f1c:	6983      	ldr	r3, [r0, #24]
    6f1e:	b513      	push	{r0, r1, r4, lr}
    6f20:	0004      	movs	r4, r0
    6f22:	2b00      	cmp	r3, #0
    6f24:	d128      	bne.n	6f78 <__sinit+0x5c>
    6f26:	6483      	str	r3, [r0, #72]	; 0x48
    6f28:	64c3      	str	r3, [r0, #76]	; 0x4c
    6f2a:	6503      	str	r3, [r0, #80]	; 0x50
    6f2c:	4b13      	ldr	r3, [pc, #76]	; (6f7c <__sinit+0x60>)
    6f2e:	4a14      	ldr	r2, [pc, #80]	; (6f80 <__sinit+0x64>)
    6f30:	681b      	ldr	r3, [r3, #0]
    6f32:	6282      	str	r2, [r0, #40]	; 0x28
    6f34:	9301      	str	r3, [sp, #4]
    6f36:	4298      	cmp	r0, r3
    6f38:	d101      	bne.n	6f3e <__sinit+0x22>
    6f3a:	2301      	movs	r3, #1
    6f3c:	6183      	str	r3, [r0, #24]
    6f3e:	0020      	movs	r0, r4
    6f40:	f000 f820 	bl	6f84 <__sfp>
    6f44:	6060      	str	r0, [r4, #4]
    6f46:	0020      	movs	r0, r4
    6f48:	f000 f81c 	bl	6f84 <__sfp>
    6f4c:	60a0      	str	r0, [r4, #8]
    6f4e:	0020      	movs	r0, r4
    6f50:	f000 f818 	bl	6f84 <__sfp>
    6f54:	2200      	movs	r2, #0
    6f56:	60e0      	str	r0, [r4, #12]
    6f58:	2104      	movs	r1, #4
    6f5a:	6860      	ldr	r0, [r4, #4]
    6f5c:	f7ff ffa4 	bl	6ea8 <std.isra.0>
    6f60:	2201      	movs	r2, #1
    6f62:	2109      	movs	r1, #9
    6f64:	68a0      	ldr	r0, [r4, #8]
    6f66:	f7ff ff9f 	bl	6ea8 <std.isra.0>
    6f6a:	2202      	movs	r2, #2
    6f6c:	2112      	movs	r1, #18
    6f6e:	68e0      	ldr	r0, [r4, #12]
    6f70:	f7ff ff9a 	bl	6ea8 <std.isra.0>
    6f74:	2301      	movs	r3, #1
    6f76:	61a3      	str	r3, [r4, #24]
    6f78:	bd13      	pop	{r0, r1, r4, pc}
    6f7a:	46c0      	nop			; (mov r8, r8)
    6f7c:	00008384 	.word	0x00008384
    6f80:	00006e99 	.word	0x00006e99

00006f84 <__sfp>:
    6f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f86:	4b1d      	ldr	r3, [pc, #116]	; (6ffc <__sfp+0x78>)
    6f88:	0006      	movs	r6, r0
    6f8a:	681d      	ldr	r5, [r3, #0]
    6f8c:	69ab      	ldr	r3, [r5, #24]
    6f8e:	2b00      	cmp	r3, #0
    6f90:	d102      	bne.n	6f98 <__sfp+0x14>
    6f92:	0028      	movs	r0, r5
    6f94:	f7ff ffc2 	bl	6f1c <__sinit>
    6f98:	3548      	adds	r5, #72	; 0x48
    6f9a:	68ac      	ldr	r4, [r5, #8]
    6f9c:	686b      	ldr	r3, [r5, #4]
    6f9e:	3b01      	subs	r3, #1
    6fa0:	d405      	bmi.n	6fae <__sfp+0x2a>
    6fa2:	220c      	movs	r2, #12
    6fa4:	5ea7      	ldrsh	r7, [r4, r2]
    6fa6:	2f00      	cmp	r7, #0
    6fa8:	d010      	beq.n	6fcc <__sfp+0x48>
    6faa:	3468      	adds	r4, #104	; 0x68
    6fac:	e7f7      	b.n	6f9e <__sfp+0x1a>
    6fae:	682b      	ldr	r3, [r5, #0]
    6fb0:	2b00      	cmp	r3, #0
    6fb2:	d001      	beq.n	6fb8 <__sfp+0x34>
    6fb4:	682d      	ldr	r5, [r5, #0]
    6fb6:	e7f0      	b.n	6f9a <__sfp+0x16>
    6fb8:	2104      	movs	r1, #4
    6fba:	0030      	movs	r0, r6
    6fbc:	f7ff ff98 	bl	6ef0 <__sfmoreglue>
    6fc0:	6028      	str	r0, [r5, #0]
    6fc2:	2800      	cmp	r0, #0
    6fc4:	d1f6      	bne.n	6fb4 <__sfp+0x30>
    6fc6:	230c      	movs	r3, #12
    6fc8:	6033      	str	r3, [r6, #0]
    6fca:	e016      	b.n	6ffa <__sfp+0x76>
    6fcc:	2301      	movs	r3, #1
    6fce:	0020      	movs	r0, r4
    6fd0:	425b      	negs	r3, r3
    6fd2:	81e3      	strh	r3, [r4, #14]
    6fd4:	3302      	adds	r3, #2
    6fd6:	81a3      	strh	r3, [r4, #12]
    6fd8:	6667      	str	r7, [r4, #100]	; 0x64
    6fda:	6027      	str	r7, [r4, #0]
    6fdc:	60a7      	str	r7, [r4, #8]
    6fde:	6067      	str	r7, [r4, #4]
    6fe0:	6127      	str	r7, [r4, #16]
    6fe2:	6167      	str	r7, [r4, #20]
    6fe4:	61a7      	str	r7, [r4, #24]
    6fe6:	305c      	adds	r0, #92	; 0x5c
    6fe8:	2208      	movs	r2, #8
    6fea:	0039      	movs	r1, r7
    6fec:	f7ff fc77 	bl	68de <memset>
    6ff0:	0020      	movs	r0, r4
    6ff2:	6367      	str	r7, [r4, #52]	; 0x34
    6ff4:	63a7      	str	r7, [r4, #56]	; 0x38
    6ff6:	64a7      	str	r7, [r4, #72]	; 0x48
    6ff8:	64e7      	str	r7, [r4, #76]	; 0x4c
    6ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ffc:	00008384 	.word	0x00008384

00007000 <_fwalk_reent>:
    7000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7002:	0004      	movs	r4, r0
    7004:	0007      	movs	r7, r0
    7006:	2600      	movs	r6, #0
    7008:	9101      	str	r1, [sp, #4]
    700a:	3448      	adds	r4, #72	; 0x48
    700c:	2c00      	cmp	r4, #0
    700e:	d016      	beq.n	703e <_fwalk_reent+0x3e>
    7010:	6863      	ldr	r3, [r4, #4]
    7012:	68a5      	ldr	r5, [r4, #8]
    7014:	9300      	str	r3, [sp, #0]
    7016:	9b00      	ldr	r3, [sp, #0]
    7018:	3b01      	subs	r3, #1
    701a:	9300      	str	r3, [sp, #0]
    701c:	d40d      	bmi.n	703a <_fwalk_reent+0x3a>
    701e:	89ab      	ldrh	r3, [r5, #12]
    7020:	2b01      	cmp	r3, #1
    7022:	d908      	bls.n	7036 <_fwalk_reent+0x36>
    7024:	220e      	movs	r2, #14
    7026:	5eab      	ldrsh	r3, [r5, r2]
    7028:	3301      	adds	r3, #1
    702a:	d004      	beq.n	7036 <_fwalk_reent+0x36>
    702c:	0029      	movs	r1, r5
    702e:	0038      	movs	r0, r7
    7030:	9b01      	ldr	r3, [sp, #4]
    7032:	4798      	blx	r3
    7034:	4306      	orrs	r6, r0
    7036:	3568      	adds	r5, #104	; 0x68
    7038:	e7ed      	b.n	7016 <_fwalk_reent+0x16>
    703a:	6824      	ldr	r4, [r4, #0]
    703c:	e7e6      	b.n	700c <_fwalk_reent+0xc>
    703e:	0030      	movs	r0, r6
    7040:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007044 <__swhatbuf_r>:
    7044:	b570      	push	{r4, r5, r6, lr}
    7046:	000e      	movs	r6, r1
    7048:	001d      	movs	r5, r3
    704a:	230e      	movs	r3, #14
    704c:	5ec9      	ldrsh	r1, [r1, r3]
    704e:	b090      	sub	sp, #64	; 0x40
    7050:	0014      	movs	r4, r2
    7052:	2900      	cmp	r1, #0
    7054:	da06      	bge.n	7064 <__swhatbuf_r+0x20>
    7056:	2300      	movs	r3, #0
    7058:	602b      	str	r3, [r5, #0]
    705a:	89b3      	ldrh	r3, [r6, #12]
    705c:	061b      	lsls	r3, r3, #24
    705e:	d50f      	bpl.n	7080 <__swhatbuf_r+0x3c>
    7060:	2340      	movs	r3, #64	; 0x40
    7062:	e00f      	b.n	7084 <__swhatbuf_r+0x40>
    7064:	aa01      	add	r2, sp, #4
    7066:	f000 fc85 	bl	7974 <_fstat_r>
    706a:	2800      	cmp	r0, #0
    706c:	dbf3      	blt.n	7056 <__swhatbuf_r+0x12>
    706e:	23f0      	movs	r3, #240	; 0xf0
    7070:	9a02      	ldr	r2, [sp, #8]
    7072:	021b      	lsls	r3, r3, #8
    7074:	4013      	ands	r3, r2
    7076:	4a05      	ldr	r2, [pc, #20]	; (708c <__swhatbuf_r+0x48>)
    7078:	189b      	adds	r3, r3, r2
    707a:	425a      	negs	r2, r3
    707c:	4153      	adcs	r3, r2
    707e:	602b      	str	r3, [r5, #0]
    7080:	2380      	movs	r3, #128	; 0x80
    7082:	00db      	lsls	r3, r3, #3
    7084:	2000      	movs	r0, #0
    7086:	6023      	str	r3, [r4, #0]
    7088:	b010      	add	sp, #64	; 0x40
    708a:	bd70      	pop	{r4, r5, r6, pc}
    708c:	ffffe000 	.word	0xffffe000

00007090 <__smakebuf_r>:
    7090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7092:	2602      	movs	r6, #2
    7094:	898b      	ldrh	r3, [r1, #12]
    7096:	0005      	movs	r5, r0
    7098:	000c      	movs	r4, r1
    709a:	4233      	tst	r3, r6
    709c:	d110      	bne.n	70c0 <__smakebuf_r+0x30>
    709e:	ab01      	add	r3, sp, #4
    70a0:	466a      	mov	r2, sp
    70a2:	f7ff ffcf 	bl	7044 <__swhatbuf_r>
    70a6:	9900      	ldr	r1, [sp, #0]
    70a8:	0007      	movs	r7, r0
    70aa:	0028      	movs	r0, r5
    70ac:	f000 f87e 	bl	71ac <_malloc_r>
    70b0:	2800      	cmp	r0, #0
    70b2:	d10c      	bne.n	70ce <__smakebuf_r+0x3e>
    70b4:	220c      	movs	r2, #12
    70b6:	5ea3      	ldrsh	r3, [r4, r2]
    70b8:	059a      	lsls	r2, r3, #22
    70ba:	d423      	bmi.n	7104 <__smakebuf_r+0x74>
    70bc:	4333      	orrs	r3, r6
    70be:	81a3      	strh	r3, [r4, #12]
    70c0:	0023      	movs	r3, r4
    70c2:	3347      	adds	r3, #71	; 0x47
    70c4:	6023      	str	r3, [r4, #0]
    70c6:	6123      	str	r3, [r4, #16]
    70c8:	2301      	movs	r3, #1
    70ca:	6163      	str	r3, [r4, #20]
    70cc:	e01a      	b.n	7104 <__smakebuf_r+0x74>
    70ce:	2280      	movs	r2, #128	; 0x80
    70d0:	4b0d      	ldr	r3, [pc, #52]	; (7108 <__smakebuf_r+0x78>)
    70d2:	62ab      	str	r3, [r5, #40]	; 0x28
    70d4:	89a3      	ldrh	r3, [r4, #12]
    70d6:	6020      	str	r0, [r4, #0]
    70d8:	4313      	orrs	r3, r2
    70da:	81a3      	strh	r3, [r4, #12]
    70dc:	9b00      	ldr	r3, [sp, #0]
    70de:	6120      	str	r0, [r4, #16]
    70e0:	6163      	str	r3, [r4, #20]
    70e2:	9b01      	ldr	r3, [sp, #4]
    70e4:	2b00      	cmp	r3, #0
    70e6:	d00a      	beq.n	70fe <__smakebuf_r+0x6e>
    70e8:	230e      	movs	r3, #14
    70ea:	5ee1      	ldrsh	r1, [r4, r3]
    70ec:	0028      	movs	r0, r5
    70ee:	f000 fc53 	bl	7998 <_isatty_r>
    70f2:	2800      	cmp	r0, #0
    70f4:	d003      	beq.n	70fe <__smakebuf_r+0x6e>
    70f6:	2201      	movs	r2, #1
    70f8:	89a3      	ldrh	r3, [r4, #12]
    70fa:	4313      	orrs	r3, r2
    70fc:	81a3      	strh	r3, [r4, #12]
    70fe:	89a3      	ldrh	r3, [r4, #12]
    7100:	431f      	orrs	r7, r3
    7102:	81a7      	strh	r7, [r4, #12]
    7104:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7106:	46c0      	nop			; (mov r8, r8)
    7108:	00006e99 	.word	0x00006e99

0000710c <malloc>:
    710c:	b510      	push	{r4, lr}
    710e:	4b03      	ldr	r3, [pc, #12]	; (711c <malloc+0x10>)
    7110:	0001      	movs	r1, r0
    7112:	6818      	ldr	r0, [r3, #0]
    7114:	f000 f84a 	bl	71ac <_malloc_r>
    7118:	bd10      	pop	{r4, pc}
    711a:	46c0      	nop			; (mov r8, r8)
    711c:	20000070 	.word	0x20000070

00007120 <_free_r>:
    7120:	b530      	push	{r4, r5, lr}
    7122:	2900      	cmp	r1, #0
    7124:	d03e      	beq.n	71a4 <_free_r+0x84>
    7126:	3904      	subs	r1, #4
    7128:	680b      	ldr	r3, [r1, #0]
    712a:	2b00      	cmp	r3, #0
    712c:	da00      	bge.n	7130 <_free_r+0x10>
    712e:	18c9      	adds	r1, r1, r3
    7130:	4a1d      	ldr	r2, [pc, #116]	; (71a8 <_free_r+0x88>)
    7132:	6813      	ldr	r3, [r2, #0]
    7134:	0014      	movs	r4, r2
    7136:	2b00      	cmp	r3, #0
    7138:	d102      	bne.n	7140 <_free_r+0x20>
    713a:	604b      	str	r3, [r1, #4]
    713c:	6011      	str	r1, [r2, #0]
    713e:	e031      	b.n	71a4 <_free_r+0x84>
    7140:	428b      	cmp	r3, r1
    7142:	d90d      	bls.n	7160 <_free_r+0x40>
    7144:	680a      	ldr	r2, [r1, #0]
    7146:	1888      	adds	r0, r1, r2
    7148:	4283      	cmp	r3, r0
    714a:	d103      	bne.n	7154 <_free_r+0x34>
    714c:	6818      	ldr	r0, [r3, #0]
    714e:	685b      	ldr	r3, [r3, #4]
    7150:	1882      	adds	r2, r0, r2
    7152:	600a      	str	r2, [r1, #0]
    7154:	604b      	str	r3, [r1, #4]
    7156:	6021      	str	r1, [r4, #0]
    7158:	e024      	b.n	71a4 <_free_r+0x84>
    715a:	428a      	cmp	r2, r1
    715c:	d803      	bhi.n	7166 <_free_r+0x46>
    715e:	0013      	movs	r3, r2
    7160:	685a      	ldr	r2, [r3, #4]
    7162:	2a00      	cmp	r2, #0
    7164:	d1f9      	bne.n	715a <_free_r+0x3a>
    7166:	681d      	ldr	r5, [r3, #0]
    7168:	195c      	adds	r4, r3, r5
    716a:	428c      	cmp	r4, r1
    716c:	d10b      	bne.n	7186 <_free_r+0x66>
    716e:	6809      	ldr	r1, [r1, #0]
    7170:	1869      	adds	r1, r5, r1
    7172:	1858      	adds	r0, r3, r1
    7174:	6019      	str	r1, [r3, #0]
    7176:	4282      	cmp	r2, r0
    7178:	d114      	bne.n	71a4 <_free_r+0x84>
    717a:	6810      	ldr	r0, [r2, #0]
    717c:	6852      	ldr	r2, [r2, #4]
    717e:	1841      	adds	r1, r0, r1
    7180:	6019      	str	r1, [r3, #0]
    7182:	605a      	str	r2, [r3, #4]
    7184:	e00e      	b.n	71a4 <_free_r+0x84>
    7186:	428c      	cmp	r4, r1
    7188:	d902      	bls.n	7190 <_free_r+0x70>
    718a:	230c      	movs	r3, #12
    718c:	6003      	str	r3, [r0, #0]
    718e:	e009      	b.n	71a4 <_free_r+0x84>
    7190:	6808      	ldr	r0, [r1, #0]
    7192:	180c      	adds	r4, r1, r0
    7194:	42a2      	cmp	r2, r4
    7196:	d103      	bne.n	71a0 <_free_r+0x80>
    7198:	6814      	ldr	r4, [r2, #0]
    719a:	6852      	ldr	r2, [r2, #4]
    719c:	1820      	adds	r0, r4, r0
    719e:	6008      	str	r0, [r1, #0]
    71a0:	604a      	str	r2, [r1, #4]
    71a2:	6059      	str	r1, [r3, #4]
    71a4:	bd30      	pop	{r4, r5, pc}
    71a6:	46c0      	nop			; (mov r8, r8)
    71a8:	2000055c 	.word	0x2000055c

000071ac <_malloc_r>:
    71ac:	2303      	movs	r3, #3
    71ae:	b570      	push	{r4, r5, r6, lr}
    71b0:	1ccd      	adds	r5, r1, #3
    71b2:	439d      	bics	r5, r3
    71b4:	3508      	adds	r5, #8
    71b6:	0006      	movs	r6, r0
    71b8:	2d0c      	cmp	r5, #12
    71ba:	d201      	bcs.n	71c0 <_malloc_r+0x14>
    71bc:	250c      	movs	r5, #12
    71be:	e005      	b.n	71cc <_malloc_r+0x20>
    71c0:	2d00      	cmp	r5, #0
    71c2:	da03      	bge.n	71cc <_malloc_r+0x20>
    71c4:	230c      	movs	r3, #12
    71c6:	2000      	movs	r0, #0
    71c8:	6033      	str	r3, [r6, #0]
    71ca:	e040      	b.n	724e <_malloc_r+0xa2>
    71cc:	42a9      	cmp	r1, r5
    71ce:	d8f9      	bhi.n	71c4 <_malloc_r+0x18>
    71d0:	4b1f      	ldr	r3, [pc, #124]	; (7250 <_malloc_r+0xa4>)
    71d2:	681c      	ldr	r4, [r3, #0]
    71d4:	001a      	movs	r2, r3
    71d6:	0021      	movs	r1, r4
    71d8:	2900      	cmp	r1, #0
    71da:	d013      	beq.n	7204 <_malloc_r+0x58>
    71dc:	680b      	ldr	r3, [r1, #0]
    71de:	1b5b      	subs	r3, r3, r5
    71e0:	d40d      	bmi.n	71fe <_malloc_r+0x52>
    71e2:	2b0b      	cmp	r3, #11
    71e4:	d902      	bls.n	71ec <_malloc_r+0x40>
    71e6:	600b      	str	r3, [r1, #0]
    71e8:	18cc      	adds	r4, r1, r3
    71ea:	e01e      	b.n	722a <_malloc_r+0x7e>
    71ec:	428c      	cmp	r4, r1
    71ee:	d102      	bne.n	71f6 <_malloc_r+0x4a>
    71f0:	6863      	ldr	r3, [r4, #4]
    71f2:	6013      	str	r3, [r2, #0]
    71f4:	e01a      	b.n	722c <_malloc_r+0x80>
    71f6:	684b      	ldr	r3, [r1, #4]
    71f8:	6063      	str	r3, [r4, #4]
    71fa:	000c      	movs	r4, r1
    71fc:	e016      	b.n	722c <_malloc_r+0x80>
    71fe:	000c      	movs	r4, r1
    7200:	6849      	ldr	r1, [r1, #4]
    7202:	e7e9      	b.n	71d8 <_malloc_r+0x2c>
    7204:	4c13      	ldr	r4, [pc, #76]	; (7254 <_malloc_r+0xa8>)
    7206:	6823      	ldr	r3, [r4, #0]
    7208:	2b00      	cmp	r3, #0
    720a:	d103      	bne.n	7214 <_malloc_r+0x68>
    720c:	0030      	movs	r0, r6
    720e:	f000 fb2d 	bl	786c <_sbrk_r>
    7212:	6020      	str	r0, [r4, #0]
    7214:	0029      	movs	r1, r5
    7216:	0030      	movs	r0, r6
    7218:	f000 fb28 	bl	786c <_sbrk_r>
    721c:	1c43      	adds	r3, r0, #1
    721e:	d0d1      	beq.n	71c4 <_malloc_r+0x18>
    7220:	2303      	movs	r3, #3
    7222:	1cc4      	adds	r4, r0, #3
    7224:	439c      	bics	r4, r3
    7226:	42a0      	cmp	r0, r4
    7228:	d10a      	bne.n	7240 <_malloc_r+0x94>
    722a:	6025      	str	r5, [r4, #0]
    722c:	0020      	movs	r0, r4
    722e:	2207      	movs	r2, #7
    7230:	300b      	adds	r0, #11
    7232:	1d23      	adds	r3, r4, #4
    7234:	4390      	bics	r0, r2
    7236:	1ac3      	subs	r3, r0, r3
    7238:	d009      	beq.n	724e <_malloc_r+0xa2>
    723a:	425a      	negs	r2, r3
    723c:	50e2      	str	r2, [r4, r3]
    723e:	e006      	b.n	724e <_malloc_r+0xa2>
    7240:	1a21      	subs	r1, r4, r0
    7242:	0030      	movs	r0, r6
    7244:	f000 fb12 	bl	786c <_sbrk_r>
    7248:	1c43      	adds	r3, r0, #1
    724a:	d1ee      	bne.n	722a <_malloc_r+0x7e>
    724c:	e7ba      	b.n	71c4 <_malloc_r+0x18>
    724e:	bd70      	pop	{r4, r5, r6, pc}
    7250:	2000055c 	.word	0x2000055c
    7254:	20000558 	.word	0x20000558

00007258 <__sfputc_r>:
    7258:	6893      	ldr	r3, [r2, #8]
    725a:	b510      	push	{r4, lr}
    725c:	3b01      	subs	r3, #1
    725e:	6093      	str	r3, [r2, #8]
    7260:	2b00      	cmp	r3, #0
    7262:	da05      	bge.n	7270 <__sfputc_r+0x18>
    7264:	6994      	ldr	r4, [r2, #24]
    7266:	42a3      	cmp	r3, r4
    7268:	db08      	blt.n	727c <__sfputc_r+0x24>
    726a:	b2cb      	uxtb	r3, r1
    726c:	2b0a      	cmp	r3, #10
    726e:	d005      	beq.n	727c <__sfputc_r+0x24>
    7270:	6813      	ldr	r3, [r2, #0]
    7272:	1c58      	adds	r0, r3, #1
    7274:	6010      	str	r0, [r2, #0]
    7276:	7019      	strb	r1, [r3, #0]
    7278:	b2c8      	uxtb	r0, r1
    727a:	e001      	b.n	7280 <__sfputc_r+0x28>
    727c:	f7ff fc8c 	bl	6b98 <__swbuf_r>
    7280:	bd10      	pop	{r4, pc}

00007282 <__sfputs_r>:
    7282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7284:	0006      	movs	r6, r0
    7286:	000f      	movs	r7, r1
    7288:	0014      	movs	r4, r2
    728a:	18d5      	adds	r5, r2, r3
    728c:	42ac      	cmp	r4, r5
    728e:	d008      	beq.n	72a2 <__sfputs_r+0x20>
    7290:	7821      	ldrb	r1, [r4, #0]
    7292:	003a      	movs	r2, r7
    7294:	0030      	movs	r0, r6
    7296:	f7ff ffdf 	bl	7258 <__sfputc_r>
    729a:	3401      	adds	r4, #1
    729c:	1c43      	adds	r3, r0, #1
    729e:	d1f5      	bne.n	728c <__sfputs_r+0xa>
    72a0:	e000      	b.n	72a4 <__sfputs_r+0x22>
    72a2:	2000      	movs	r0, #0
    72a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000072a8 <_vfiprintf_r>:
    72a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    72aa:	b09f      	sub	sp, #124	; 0x7c
    72ac:	0006      	movs	r6, r0
    72ae:	000f      	movs	r7, r1
    72b0:	9202      	str	r2, [sp, #8]
    72b2:	9305      	str	r3, [sp, #20]
    72b4:	2800      	cmp	r0, #0
    72b6:	d004      	beq.n	72c2 <_vfiprintf_r+0x1a>
    72b8:	6983      	ldr	r3, [r0, #24]
    72ba:	2b00      	cmp	r3, #0
    72bc:	d101      	bne.n	72c2 <_vfiprintf_r+0x1a>
    72be:	f7ff fe2d 	bl	6f1c <__sinit>
    72c2:	4b7f      	ldr	r3, [pc, #508]	; (74c0 <_vfiprintf_r+0x218>)
    72c4:	429f      	cmp	r7, r3
    72c6:	d101      	bne.n	72cc <_vfiprintf_r+0x24>
    72c8:	6877      	ldr	r7, [r6, #4]
    72ca:	e008      	b.n	72de <_vfiprintf_r+0x36>
    72cc:	4b7d      	ldr	r3, [pc, #500]	; (74c4 <_vfiprintf_r+0x21c>)
    72ce:	429f      	cmp	r7, r3
    72d0:	d101      	bne.n	72d6 <_vfiprintf_r+0x2e>
    72d2:	68b7      	ldr	r7, [r6, #8]
    72d4:	e003      	b.n	72de <_vfiprintf_r+0x36>
    72d6:	4b7c      	ldr	r3, [pc, #496]	; (74c8 <_vfiprintf_r+0x220>)
    72d8:	429f      	cmp	r7, r3
    72da:	d100      	bne.n	72de <_vfiprintf_r+0x36>
    72dc:	68f7      	ldr	r7, [r6, #12]
    72de:	89bb      	ldrh	r3, [r7, #12]
    72e0:	071b      	lsls	r3, r3, #28
    72e2:	d50a      	bpl.n	72fa <_vfiprintf_r+0x52>
    72e4:	693b      	ldr	r3, [r7, #16]
    72e6:	2b00      	cmp	r3, #0
    72e8:	d007      	beq.n	72fa <_vfiprintf_r+0x52>
    72ea:	2300      	movs	r3, #0
    72ec:	ad06      	add	r5, sp, #24
    72ee:	616b      	str	r3, [r5, #20]
    72f0:	3320      	adds	r3, #32
    72f2:	766b      	strb	r3, [r5, #25]
    72f4:	3310      	adds	r3, #16
    72f6:	76ab      	strb	r3, [r5, #26]
    72f8:	e03d      	b.n	7376 <_vfiprintf_r+0xce>
    72fa:	0039      	movs	r1, r7
    72fc:	0030      	movs	r0, r6
    72fe:	f7ff fca3 	bl	6c48 <__swsetup_r>
    7302:	2800      	cmp	r0, #0
    7304:	d0f1      	beq.n	72ea <_vfiprintf_r+0x42>
    7306:	2001      	movs	r0, #1
    7308:	4240      	negs	r0, r0
    730a:	e0d6      	b.n	74ba <_vfiprintf_r+0x212>
    730c:	9a05      	ldr	r2, [sp, #20]
    730e:	1d11      	adds	r1, r2, #4
    7310:	6812      	ldr	r2, [r2, #0]
    7312:	9105      	str	r1, [sp, #20]
    7314:	2a00      	cmp	r2, #0
    7316:	da00      	bge.n	731a <_vfiprintf_r+0x72>
    7318:	e07f      	b.n	741a <_vfiprintf_r+0x172>
    731a:	9209      	str	r2, [sp, #36]	; 0x24
    731c:	3401      	adds	r4, #1
    731e:	7823      	ldrb	r3, [r4, #0]
    7320:	2b2e      	cmp	r3, #46	; 0x2e
    7322:	d100      	bne.n	7326 <_vfiprintf_r+0x7e>
    7324:	e08d      	b.n	7442 <_vfiprintf_r+0x19a>
    7326:	7821      	ldrb	r1, [r4, #0]
    7328:	2203      	movs	r2, #3
    732a:	4868      	ldr	r0, [pc, #416]	; (74cc <_vfiprintf_r+0x224>)
    732c:	f000 fb5a 	bl	79e4 <memchr>
    7330:	2800      	cmp	r0, #0
    7332:	d007      	beq.n	7344 <_vfiprintf_r+0x9c>
    7334:	4b65      	ldr	r3, [pc, #404]	; (74cc <_vfiprintf_r+0x224>)
    7336:	682a      	ldr	r2, [r5, #0]
    7338:	1ac0      	subs	r0, r0, r3
    733a:	2340      	movs	r3, #64	; 0x40
    733c:	4083      	lsls	r3, r0
    733e:	4313      	orrs	r3, r2
    7340:	602b      	str	r3, [r5, #0]
    7342:	3401      	adds	r4, #1
    7344:	7821      	ldrb	r1, [r4, #0]
    7346:	1c63      	adds	r3, r4, #1
    7348:	2206      	movs	r2, #6
    734a:	4861      	ldr	r0, [pc, #388]	; (74d0 <_vfiprintf_r+0x228>)
    734c:	9302      	str	r3, [sp, #8]
    734e:	7629      	strb	r1, [r5, #24]
    7350:	f000 fb48 	bl	79e4 <memchr>
    7354:	2800      	cmp	r0, #0
    7356:	d100      	bne.n	735a <_vfiprintf_r+0xb2>
    7358:	e09d      	b.n	7496 <_vfiprintf_r+0x1ee>
    735a:	4b5e      	ldr	r3, [pc, #376]	; (74d4 <_vfiprintf_r+0x22c>)
    735c:	2b00      	cmp	r3, #0
    735e:	d000      	beq.n	7362 <_vfiprintf_r+0xba>
    7360:	e090      	b.n	7484 <_vfiprintf_r+0x1dc>
    7362:	2207      	movs	r2, #7
    7364:	9b05      	ldr	r3, [sp, #20]
    7366:	3307      	adds	r3, #7
    7368:	4393      	bics	r3, r2
    736a:	3308      	adds	r3, #8
    736c:	9305      	str	r3, [sp, #20]
    736e:	696b      	ldr	r3, [r5, #20]
    7370:	9a03      	ldr	r2, [sp, #12]
    7372:	189b      	adds	r3, r3, r2
    7374:	616b      	str	r3, [r5, #20]
    7376:	9c02      	ldr	r4, [sp, #8]
    7378:	7823      	ldrb	r3, [r4, #0]
    737a:	2b00      	cmp	r3, #0
    737c:	d104      	bne.n	7388 <_vfiprintf_r+0xe0>
    737e:	9b02      	ldr	r3, [sp, #8]
    7380:	1ae3      	subs	r3, r4, r3
    7382:	9304      	str	r3, [sp, #16]
    7384:	d012      	beq.n	73ac <_vfiprintf_r+0x104>
    7386:	e003      	b.n	7390 <_vfiprintf_r+0xe8>
    7388:	2b25      	cmp	r3, #37	; 0x25
    738a:	d0f8      	beq.n	737e <_vfiprintf_r+0xd6>
    738c:	3401      	adds	r4, #1
    738e:	e7f3      	b.n	7378 <_vfiprintf_r+0xd0>
    7390:	9b04      	ldr	r3, [sp, #16]
    7392:	9a02      	ldr	r2, [sp, #8]
    7394:	0039      	movs	r1, r7
    7396:	0030      	movs	r0, r6
    7398:	f7ff ff73 	bl	7282 <__sfputs_r>
    739c:	1c43      	adds	r3, r0, #1
    739e:	d100      	bne.n	73a2 <_vfiprintf_r+0xfa>
    73a0:	e086      	b.n	74b0 <_vfiprintf_r+0x208>
    73a2:	696a      	ldr	r2, [r5, #20]
    73a4:	9b04      	ldr	r3, [sp, #16]
    73a6:	4694      	mov	ip, r2
    73a8:	4463      	add	r3, ip
    73aa:	616b      	str	r3, [r5, #20]
    73ac:	7823      	ldrb	r3, [r4, #0]
    73ae:	2b00      	cmp	r3, #0
    73b0:	d07e      	beq.n	74b0 <_vfiprintf_r+0x208>
    73b2:	2201      	movs	r2, #1
    73b4:	2300      	movs	r3, #0
    73b6:	4252      	negs	r2, r2
    73b8:	606a      	str	r2, [r5, #4]
    73ba:	a902      	add	r1, sp, #8
    73bc:	3254      	adds	r2, #84	; 0x54
    73be:	1852      	adds	r2, r2, r1
    73c0:	3401      	adds	r4, #1
    73c2:	602b      	str	r3, [r5, #0]
    73c4:	60eb      	str	r3, [r5, #12]
    73c6:	60ab      	str	r3, [r5, #8]
    73c8:	7013      	strb	r3, [r2, #0]
    73ca:	65ab      	str	r3, [r5, #88]	; 0x58
    73cc:	7821      	ldrb	r1, [r4, #0]
    73ce:	2205      	movs	r2, #5
    73d0:	4841      	ldr	r0, [pc, #260]	; (74d8 <_vfiprintf_r+0x230>)
    73d2:	f000 fb07 	bl	79e4 <memchr>
    73d6:	2800      	cmp	r0, #0
    73d8:	d008      	beq.n	73ec <_vfiprintf_r+0x144>
    73da:	4b3f      	ldr	r3, [pc, #252]	; (74d8 <_vfiprintf_r+0x230>)
    73dc:	682a      	ldr	r2, [r5, #0]
    73de:	1ac0      	subs	r0, r0, r3
    73e0:	2301      	movs	r3, #1
    73e2:	4083      	lsls	r3, r0
    73e4:	4313      	orrs	r3, r2
    73e6:	602b      	str	r3, [r5, #0]
    73e8:	3401      	adds	r4, #1
    73ea:	e7ef      	b.n	73cc <_vfiprintf_r+0x124>
    73ec:	682b      	ldr	r3, [r5, #0]
    73ee:	06da      	lsls	r2, r3, #27
    73f0:	d504      	bpl.n	73fc <_vfiprintf_r+0x154>
    73f2:	2253      	movs	r2, #83	; 0x53
    73f4:	2120      	movs	r1, #32
    73f6:	a802      	add	r0, sp, #8
    73f8:	1812      	adds	r2, r2, r0
    73fa:	7011      	strb	r1, [r2, #0]
    73fc:	071a      	lsls	r2, r3, #28
    73fe:	d504      	bpl.n	740a <_vfiprintf_r+0x162>
    7400:	2253      	movs	r2, #83	; 0x53
    7402:	212b      	movs	r1, #43	; 0x2b
    7404:	a802      	add	r0, sp, #8
    7406:	1812      	adds	r2, r2, r0
    7408:	7011      	strb	r1, [r2, #0]
    740a:	7822      	ldrb	r2, [r4, #0]
    740c:	2a2a      	cmp	r2, #42	; 0x2a
    740e:	d100      	bne.n	7412 <_vfiprintf_r+0x16a>
    7410:	e77c      	b.n	730c <_vfiprintf_r+0x64>
    7412:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7414:	2000      	movs	r0, #0
    7416:	210a      	movs	r1, #10
    7418:	e005      	b.n	7426 <_vfiprintf_r+0x17e>
    741a:	4252      	negs	r2, r2
    741c:	60ea      	str	r2, [r5, #12]
    741e:	2202      	movs	r2, #2
    7420:	4313      	orrs	r3, r2
    7422:	602b      	str	r3, [r5, #0]
    7424:	e77a      	b.n	731c <_vfiprintf_r+0x74>
    7426:	7822      	ldrb	r2, [r4, #0]
    7428:	3a30      	subs	r2, #48	; 0x30
    742a:	2a09      	cmp	r2, #9
    742c:	d804      	bhi.n	7438 <_vfiprintf_r+0x190>
    742e:	434b      	muls	r3, r1
    7430:	3401      	adds	r4, #1
    7432:	189b      	adds	r3, r3, r2
    7434:	2001      	movs	r0, #1
    7436:	e7f6      	b.n	7426 <_vfiprintf_r+0x17e>
    7438:	2800      	cmp	r0, #0
    743a:	d100      	bne.n	743e <_vfiprintf_r+0x196>
    743c:	e76f      	b.n	731e <_vfiprintf_r+0x76>
    743e:	9309      	str	r3, [sp, #36]	; 0x24
    7440:	e76d      	b.n	731e <_vfiprintf_r+0x76>
    7442:	7863      	ldrb	r3, [r4, #1]
    7444:	2b2a      	cmp	r3, #42	; 0x2a
    7446:	d10a      	bne.n	745e <_vfiprintf_r+0x1b6>
    7448:	9b05      	ldr	r3, [sp, #20]
    744a:	3402      	adds	r4, #2
    744c:	1d1a      	adds	r2, r3, #4
    744e:	681b      	ldr	r3, [r3, #0]
    7450:	9205      	str	r2, [sp, #20]
    7452:	2b00      	cmp	r3, #0
    7454:	da01      	bge.n	745a <_vfiprintf_r+0x1b2>
    7456:	2301      	movs	r3, #1
    7458:	425b      	negs	r3, r3
    745a:	9307      	str	r3, [sp, #28]
    745c:	e763      	b.n	7326 <_vfiprintf_r+0x7e>
    745e:	2300      	movs	r3, #0
    7460:	200a      	movs	r0, #10
    7462:	001a      	movs	r2, r3
    7464:	3401      	adds	r4, #1
    7466:	606b      	str	r3, [r5, #4]
    7468:	7821      	ldrb	r1, [r4, #0]
    746a:	3930      	subs	r1, #48	; 0x30
    746c:	2909      	cmp	r1, #9
    746e:	d804      	bhi.n	747a <_vfiprintf_r+0x1d2>
    7470:	4342      	muls	r2, r0
    7472:	3401      	adds	r4, #1
    7474:	1852      	adds	r2, r2, r1
    7476:	2301      	movs	r3, #1
    7478:	e7f6      	b.n	7468 <_vfiprintf_r+0x1c0>
    747a:	2b00      	cmp	r3, #0
    747c:	d100      	bne.n	7480 <_vfiprintf_r+0x1d8>
    747e:	e752      	b.n	7326 <_vfiprintf_r+0x7e>
    7480:	9207      	str	r2, [sp, #28]
    7482:	e750      	b.n	7326 <_vfiprintf_r+0x7e>
    7484:	ab05      	add	r3, sp, #20
    7486:	9300      	str	r3, [sp, #0]
    7488:	003a      	movs	r2, r7
    748a:	4b14      	ldr	r3, [pc, #80]	; (74dc <_vfiprintf_r+0x234>)
    748c:	0029      	movs	r1, r5
    748e:	0030      	movs	r0, r6
    7490:	e000      	b.n	7494 <_vfiprintf_r+0x1ec>
    7492:	bf00      	nop
    7494:	e007      	b.n	74a6 <_vfiprintf_r+0x1fe>
    7496:	ab05      	add	r3, sp, #20
    7498:	9300      	str	r3, [sp, #0]
    749a:	003a      	movs	r2, r7
    749c:	4b0f      	ldr	r3, [pc, #60]	; (74dc <_vfiprintf_r+0x234>)
    749e:	0029      	movs	r1, r5
    74a0:	0030      	movs	r0, r6
    74a2:	f000 f88b 	bl	75bc <_printf_i>
    74a6:	9003      	str	r0, [sp, #12]
    74a8:	9b03      	ldr	r3, [sp, #12]
    74aa:	3301      	adds	r3, #1
    74ac:	d000      	beq.n	74b0 <_vfiprintf_r+0x208>
    74ae:	e75e      	b.n	736e <_vfiprintf_r+0xc6>
    74b0:	89bb      	ldrh	r3, [r7, #12]
    74b2:	065b      	lsls	r3, r3, #25
    74b4:	d500      	bpl.n	74b8 <_vfiprintf_r+0x210>
    74b6:	e726      	b.n	7306 <_vfiprintf_r+0x5e>
    74b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    74ba:	b01f      	add	sp, #124	; 0x7c
    74bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74be:	46c0      	nop			; (mov r8, r8)
    74c0:	00008388 	.word	0x00008388
    74c4:	000083a8 	.word	0x000083a8
    74c8:	000083c8 	.word	0x000083c8
    74cc:	000083ee 	.word	0x000083ee
    74d0:	000083f2 	.word	0x000083f2
    74d4:	00000000 	.word	0x00000000
    74d8:	000083e8 	.word	0x000083e8
    74dc:	00007283 	.word	0x00007283

000074e0 <_printf_common>:
    74e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    74e2:	0017      	movs	r7, r2
    74e4:	9301      	str	r3, [sp, #4]
    74e6:	688a      	ldr	r2, [r1, #8]
    74e8:	690b      	ldr	r3, [r1, #16]
    74ea:	9000      	str	r0, [sp, #0]
    74ec:	000c      	movs	r4, r1
    74ee:	4293      	cmp	r3, r2
    74f0:	da00      	bge.n	74f4 <_printf_common+0x14>
    74f2:	0013      	movs	r3, r2
    74f4:	0022      	movs	r2, r4
    74f6:	603b      	str	r3, [r7, #0]
    74f8:	3243      	adds	r2, #67	; 0x43
    74fa:	7812      	ldrb	r2, [r2, #0]
    74fc:	2a00      	cmp	r2, #0
    74fe:	d001      	beq.n	7504 <_printf_common+0x24>
    7500:	3301      	adds	r3, #1
    7502:	603b      	str	r3, [r7, #0]
    7504:	6823      	ldr	r3, [r4, #0]
    7506:	069b      	lsls	r3, r3, #26
    7508:	d502      	bpl.n	7510 <_printf_common+0x30>
    750a:	683b      	ldr	r3, [r7, #0]
    750c:	3302      	adds	r3, #2
    750e:	603b      	str	r3, [r7, #0]
    7510:	2506      	movs	r5, #6
    7512:	6823      	ldr	r3, [r4, #0]
    7514:	401d      	ands	r5, r3
    7516:	d01e      	beq.n	7556 <_printf_common+0x76>
    7518:	0023      	movs	r3, r4
    751a:	3343      	adds	r3, #67	; 0x43
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	1e5a      	subs	r2, r3, #1
    7520:	4193      	sbcs	r3, r2
    7522:	6822      	ldr	r2, [r4, #0]
    7524:	0692      	lsls	r2, r2, #26
    7526:	d51c      	bpl.n	7562 <_printf_common+0x82>
    7528:	2030      	movs	r0, #48	; 0x30
    752a:	18e1      	adds	r1, r4, r3
    752c:	3143      	adds	r1, #67	; 0x43
    752e:	7008      	strb	r0, [r1, #0]
    7530:	0021      	movs	r1, r4
    7532:	1c5a      	adds	r2, r3, #1
    7534:	3145      	adds	r1, #69	; 0x45
    7536:	7809      	ldrb	r1, [r1, #0]
    7538:	18a2      	adds	r2, r4, r2
    753a:	3243      	adds	r2, #67	; 0x43
    753c:	3302      	adds	r3, #2
    753e:	7011      	strb	r1, [r2, #0]
    7540:	e00f      	b.n	7562 <_printf_common+0x82>
    7542:	0022      	movs	r2, r4
    7544:	2301      	movs	r3, #1
    7546:	3219      	adds	r2, #25
    7548:	9901      	ldr	r1, [sp, #4]
    754a:	9800      	ldr	r0, [sp, #0]
    754c:	9e08      	ldr	r6, [sp, #32]
    754e:	47b0      	blx	r6
    7550:	1c43      	adds	r3, r0, #1
    7552:	d00e      	beq.n	7572 <_printf_common+0x92>
    7554:	3501      	adds	r5, #1
    7556:	68e3      	ldr	r3, [r4, #12]
    7558:	683a      	ldr	r2, [r7, #0]
    755a:	1a9b      	subs	r3, r3, r2
    755c:	429d      	cmp	r5, r3
    755e:	dbf0      	blt.n	7542 <_printf_common+0x62>
    7560:	e7da      	b.n	7518 <_printf_common+0x38>
    7562:	0022      	movs	r2, r4
    7564:	9901      	ldr	r1, [sp, #4]
    7566:	3243      	adds	r2, #67	; 0x43
    7568:	9800      	ldr	r0, [sp, #0]
    756a:	9d08      	ldr	r5, [sp, #32]
    756c:	47a8      	blx	r5
    756e:	1c43      	adds	r3, r0, #1
    7570:	d102      	bne.n	7578 <_printf_common+0x98>
    7572:	2001      	movs	r0, #1
    7574:	4240      	negs	r0, r0
    7576:	e020      	b.n	75ba <_printf_common+0xda>
    7578:	2306      	movs	r3, #6
    757a:	6820      	ldr	r0, [r4, #0]
    757c:	68e1      	ldr	r1, [r4, #12]
    757e:	683a      	ldr	r2, [r7, #0]
    7580:	4003      	ands	r3, r0
    7582:	2500      	movs	r5, #0
    7584:	2b04      	cmp	r3, #4
    7586:	d103      	bne.n	7590 <_printf_common+0xb0>
    7588:	1a8d      	subs	r5, r1, r2
    758a:	43eb      	mvns	r3, r5
    758c:	17db      	asrs	r3, r3, #31
    758e:	401d      	ands	r5, r3
    7590:	68a3      	ldr	r3, [r4, #8]
    7592:	6922      	ldr	r2, [r4, #16]
    7594:	4293      	cmp	r3, r2
    7596:	dd01      	ble.n	759c <_printf_common+0xbc>
    7598:	1a9b      	subs	r3, r3, r2
    759a:	18ed      	adds	r5, r5, r3
    759c:	2700      	movs	r7, #0
    759e:	42bd      	cmp	r5, r7
    75a0:	d00a      	beq.n	75b8 <_printf_common+0xd8>
    75a2:	0022      	movs	r2, r4
    75a4:	2301      	movs	r3, #1
    75a6:	321a      	adds	r2, #26
    75a8:	9901      	ldr	r1, [sp, #4]
    75aa:	9800      	ldr	r0, [sp, #0]
    75ac:	9e08      	ldr	r6, [sp, #32]
    75ae:	47b0      	blx	r6
    75b0:	1c43      	adds	r3, r0, #1
    75b2:	d0de      	beq.n	7572 <_printf_common+0x92>
    75b4:	3701      	adds	r7, #1
    75b6:	e7f2      	b.n	759e <_printf_common+0xbe>
    75b8:	2000      	movs	r0, #0
    75ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000075bc <_printf_i>:
    75bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    75be:	b08b      	sub	sp, #44	; 0x2c
    75c0:	9206      	str	r2, [sp, #24]
    75c2:	000a      	movs	r2, r1
    75c4:	3243      	adds	r2, #67	; 0x43
    75c6:	9307      	str	r3, [sp, #28]
    75c8:	9005      	str	r0, [sp, #20]
    75ca:	9204      	str	r2, [sp, #16]
    75cc:	7e0a      	ldrb	r2, [r1, #24]
    75ce:	000c      	movs	r4, r1
    75d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    75d2:	2a6e      	cmp	r2, #110	; 0x6e
    75d4:	d100      	bne.n	75d8 <_printf_i+0x1c>
    75d6:	e0ab      	b.n	7730 <_printf_i+0x174>
    75d8:	d811      	bhi.n	75fe <_printf_i+0x42>
    75da:	2a63      	cmp	r2, #99	; 0x63
    75dc:	d022      	beq.n	7624 <_printf_i+0x68>
    75de:	d809      	bhi.n	75f4 <_printf_i+0x38>
    75e0:	2a00      	cmp	r2, #0
    75e2:	d100      	bne.n	75e6 <_printf_i+0x2a>
    75e4:	e0b5      	b.n	7752 <_printf_i+0x196>
    75e6:	2a58      	cmp	r2, #88	; 0x58
    75e8:	d000      	beq.n	75ec <_printf_i+0x30>
    75ea:	e0c5      	b.n	7778 <_printf_i+0x1bc>
    75ec:	3145      	adds	r1, #69	; 0x45
    75ee:	700a      	strb	r2, [r1, #0]
    75f0:	4a81      	ldr	r2, [pc, #516]	; (77f8 <_printf_i+0x23c>)
    75f2:	e04f      	b.n	7694 <_printf_i+0xd8>
    75f4:	2a64      	cmp	r2, #100	; 0x64
    75f6:	d01d      	beq.n	7634 <_printf_i+0x78>
    75f8:	2a69      	cmp	r2, #105	; 0x69
    75fa:	d01b      	beq.n	7634 <_printf_i+0x78>
    75fc:	e0bc      	b.n	7778 <_printf_i+0x1bc>
    75fe:	2a73      	cmp	r2, #115	; 0x73
    7600:	d100      	bne.n	7604 <_printf_i+0x48>
    7602:	e0aa      	b.n	775a <_printf_i+0x19e>
    7604:	d809      	bhi.n	761a <_printf_i+0x5e>
    7606:	2a6f      	cmp	r2, #111	; 0x6f
    7608:	d029      	beq.n	765e <_printf_i+0xa2>
    760a:	2a70      	cmp	r2, #112	; 0x70
    760c:	d000      	beq.n	7610 <_printf_i+0x54>
    760e:	e0b3      	b.n	7778 <_printf_i+0x1bc>
    7610:	2220      	movs	r2, #32
    7612:	6809      	ldr	r1, [r1, #0]
    7614:	430a      	orrs	r2, r1
    7616:	6022      	str	r2, [r4, #0]
    7618:	e037      	b.n	768a <_printf_i+0xce>
    761a:	2a75      	cmp	r2, #117	; 0x75
    761c:	d01f      	beq.n	765e <_printf_i+0xa2>
    761e:	2a78      	cmp	r2, #120	; 0x78
    7620:	d033      	beq.n	768a <_printf_i+0xce>
    7622:	e0a9      	b.n	7778 <_printf_i+0x1bc>
    7624:	000e      	movs	r6, r1
    7626:	681a      	ldr	r2, [r3, #0]
    7628:	3642      	adds	r6, #66	; 0x42
    762a:	1d11      	adds	r1, r2, #4
    762c:	6019      	str	r1, [r3, #0]
    762e:	6813      	ldr	r3, [r2, #0]
    7630:	7033      	strb	r3, [r6, #0]
    7632:	e0a4      	b.n	777e <_printf_i+0x1c2>
    7634:	6821      	ldr	r1, [r4, #0]
    7636:	681a      	ldr	r2, [r3, #0]
    7638:	0608      	lsls	r0, r1, #24
    763a:	d406      	bmi.n	764a <_printf_i+0x8e>
    763c:	0649      	lsls	r1, r1, #25
    763e:	d504      	bpl.n	764a <_printf_i+0x8e>
    7640:	1d11      	adds	r1, r2, #4
    7642:	6019      	str	r1, [r3, #0]
    7644:	2300      	movs	r3, #0
    7646:	5ed5      	ldrsh	r5, [r2, r3]
    7648:	e002      	b.n	7650 <_printf_i+0x94>
    764a:	1d11      	adds	r1, r2, #4
    764c:	6019      	str	r1, [r3, #0]
    764e:	6815      	ldr	r5, [r2, #0]
    7650:	2d00      	cmp	r5, #0
    7652:	da3b      	bge.n	76cc <_printf_i+0x110>
    7654:	232d      	movs	r3, #45	; 0x2d
    7656:	9a04      	ldr	r2, [sp, #16]
    7658:	426d      	negs	r5, r5
    765a:	7013      	strb	r3, [r2, #0]
    765c:	e036      	b.n	76cc <_printf_i+0x110>
    765e:	6821      	ldr	r1, [r4, #0]
    7660:	681a      	ldr	r2, [r3, #0]
    7662:	0608      	lsls	r0, r1, #24
    7664:	d406      	bmi.n	7674 <_printf_i+0xb8>
    7666:	0649      	lsls	r1, r1, #25
    7668:	d504      	bpl.n	7674 <_printf_i+0xb8>
    766a:	6815      	ldr	r5, [r2, #0]
    766c:	1d11      	adds	r1, r2, #4
    766e:	6019      	str	r1, [r3, #0]
    7670:	b2ad      	uxth	r5, r5
    7672:	e002      	b.n	767a <_printf_i+0xbe>
    7674:	1d11      	adds	r1, r2, #4
    7676:	6019      	str	r1, [r3, #0]
    7678:	6815      	ldr	r5, [r2, #0]
    767a:	4b5f      	ldr	r3, [pc, #380]	; (77f8 <_printf_i+0x23c>)
    767c:	7e22      	ldrb	r2, [r4, #24]
    767e:	9303      	str	r3, [sp, #12]
    7680:	2708      	movs	r7, #8
    7682:	2a6f      	cmp	r2, #111	; 0x6f
    7684:	d01d      	beq.n	76c2 <_printf_i+0x106>
    7686:	270a      	movs	r7, #10
    7688:	e01b      	b.n	76c2 <_printf_i+0x106>
    768a:	0022      	movs	r2, r4
    768c:	2178      	movs	r1, #120	; 0x78
    768e:	3245      	adds	r2, #69	; 0x45
    7690:	7011      	strb	r1, [r2, #0]
    7692:	4a5a      	ldr	r2, [pc, #360]	; (77fc <_printf_i+0x240>)
    7694:	6819      	ldr	r1, [r3, #0]
    7696:	9203      	str	r2, [sp, #12]
    7698:	1d08      	adds	r0, r1, #4
    769a:	6822      	ldr	r2, [r4, #0]
    769c:	6018      	str	r0, [r3, #0]
    769e:	680d      	ldr	r5, [r1, #0]
    76a0:	0610      	lsls	r0, r2, #24
    76a2:	d402      	bmi.n	76aa <_printf_i+0xee>
    76a4:	0650      	lsls	r0, r2, #25
    76a6:	d500      	bpl.n	76aa <_printf_i+0xee>
    76a8:	b2ad      	uxth	r5, r5
    76aa:	07d3      	lsls	r3, r2, #31
    76ac:	d502      	bpl.n	76b4 <_printf_i+0xf8>
    76ae:	2320      	movs	r3, #32
    76b0:	431a      	orrs	r2, r3
    76b2:	6022      	str	r2, [r4, #0]
    76b4:	2710      	movs	r7, #16
    76b6:	2d00      	cmp	r5, #0
    76b8:	d103      	bne.n	76c2 <_printf_i+0x106>
    76ba:	2320      	movs	r3, #32
    76bc:	6822      	ldr	r2, [r4, #0]
    76be:	439a      	bics	r2, r3
    76c0:	6022      	str	r2, [r4, #0]
    76c2:	0023      	movs	r3, r4
    76c4:	2200      	movs	r2, #0
    76c6:	3343      	adds	r3, #67	; 0x43
    76c8:	701a      	strb	r2, [r3, #0]
    76ca:	e002      	b.n	76d2 <_printf_i+0x116>
    76cc:	270a      	movs	r7, #10
    76ce:	4b4a      	ldr	r3, [pc, #296]	; (77f8 <_printf_i+0x23c>)
    76d0:	9303      	str	r3, [sp, #12]
    76d2:	6863      	ldr	r3, [r4, #4]
    76d4:	60a3      	str	r3, [r4, #8]
    76d6:	2b00      	cmp	r3, #0
    76d8:	db09      	blt.n	76ee <_printf_i+0x132>
    76da:	2204      	movs	r2, #4
    76dc:	6821      	ldr	r1, [r4, #0]
    76de:	4391      	bics	r1, r2
    76e0:	6021      	str	r1, [r4, #0]
    76e2:	2d00      	cmp	r5, #0
    76e4:	d105      	bne.n	76f2 <_printf_i+0x136>
    76e6:	9e04      	ldr	r6, [sp, #16]
    76e8:	2b00      	cmp	r3, #0
    76ea:	d011      	beq.n	7710 <_printf_i+0x154>
    76ec:	e07b      	b.n	77e6 <_printf_i+0x22a>
    76ee:	2d00      	cmp	r5, #0
    76f0:	d079      	beq.n	77e6 <_printf_i+0x22a>
    76f2:	9e04      	ldr	r6, [sp, #16]
    76f4:	0028      	movs	r0, r5
    76f6:	0039      	movs	r1, r7
    76f8:	f7ff f890 	bl	681c <__aeabi_uidivmod>
    76fc:	9b03      	ldr	r3, [sp, #12]
    76fe:	3e01      	subs	r6, #1
    7700:	5c5b      	ldrb	r3, [r3, r1]
    7702:	0028      	movs	r0, r5
    7704:	7033      	strb	r3, [r6, #0]
    7706:	0039      	movs	r1, r7
    7708:	f7ff f802 	bl	6710 <__aeabi_uidiv>
    770c:	1e05      	subs	r5, r0, #0
    770e:	d1f1      	bne.n	76f4 <_printf_i+0x138>
    7710:	2f08      	cmp	r7, #8
    7712:	d109      	bne.n	7728 <_printf_i+0x16c>
    7714:	6823      	ldr	r3, [r4, #0]
    7716:	07db      	lsls	r3, r3, #31
    7718:	d506      	bpl.n	7728 <_printf_i+0x16c>
    771a:	6863      	ldr	r3, [r4, #4]
    771c:	6922      	ldr	r2, [r4, #16]
    771e:	4293      	cmp	r3, r2
    7720:	dc02      	bgt.n	7728 <_printf_i+0x16c>
    7722:	2330      	movs	r3, #48	; 0x30
    7724:	3e01      	subs	r6, #1
    7726:	7033      	strb	r3, [r6, #0]
    7728:	9b04      	ldr	r3, [sp, #16]
    772a:	1b9b      	subs	r3, r3, r6
    772c:	6123      	str	r3, [r4, #16]
    772e:	e02b      	b.n	7788 <_printf_i+0x1cc>
    7730:	6809      	ldr	r1, [r1, #0]
    7732:	681a      	ldr	r2, [r3, #0]
    7734:	0608      	lsls	r0, r1, #24
    7736:	d407      	bmi.n	7748 <_printf_i+0x18c>
    7738:	0649      	lsls	r1, r1, #25
    773a:	d505      	bpl.n	7748 <_printf_i+0x18c>
    773c:	1d11      	adds	r1, r2, #4
    773e:	6019      	str	r1, [r3, #0]
    7740:	6813      	ldr	r3, [r2, #0]
    7742:	8aa2      	ldrh	r2, [r4, #20]
    7744:	801a      	strh	r2, [r3, #0]
    7746:	e004      	b.n	7752 <_printf_i+0x196>
    7748:	1d11      	adds	r1, r2, #4
    774a:	6019      	str	r1, [r3, #0]
    774c:	6813      	ldr	r3, [r2, #0]
    774e:	6962      	ldr	r2, [r4, #20]
    7750:	601a      	str	r2, [r3, #0]
    7752:	2300      	movs	r3, #0
    7754:	9e04      	ldr	r6, [sp, #16]
    7756:	6123      	str	r3, [r4, #16]
    7758:	e016      	b.n	7788 <_printf_i+0x1cc>
    775a:	681a      	ldr	r2, [r3, #0]
    775c:	1d11      	adds	r1, r2, #4
    775e:	6019      	str	r1, [r3, #0]
    7760:	6816      	ldr	r6, [r2, #0]
    7762:	2100      	movs	r1, #0
    7764:	6862      	ldr	r2, [r4, #4]
    7766:	0030      	movs	r0, r6
    7768:	f000 f93c 	bl	79e4 <memchr>
    776c:	2800      	cmp	r0, #0
    776e:	d001      	beq.n	7774 <_printf_i+0x1b8>
    7770:	1b80      	subs	r0, r0, r6
    7772:	6060      	str	r0, [r4, #4]
    7774:	6863      	ldr	r3, [r4, #4]
    7776:	e003      	b.n	7780 <_printf_i+0x1c4>
    7778:	0026      	movs	r6, r4
    777a:	3642      	adds	r6, #66	; 0x42
    777c:	7032      	strb	r2, [r6, #0]
    777e:	2301      	movs	r3, #1
    7780:	6123      	str	r3, [r4, #16]
    7782:	2300      	movs	r3, #0
    7784:	9a04      	ldr	r2, [sp, #16]
    7786:	7013      	strb	r3, [r2, #0]
    7788:	9b07      	ldr	r3, [sp, #28]
    778a:	aa09      	add	r2, sp, #36	; 0x24
    778c:	9300      	str	r3, [sp, #0]
    778e:	0021      	movs	r1, r4
    7790:	9b06      	ldr	r3, [sp, #24]
    7792:	9805      	ldr	r0, [sp, #20]
    7794:	f7ff fea4 	bl	74e0 <_printf_common>
    7798:	1c43      	adds	r3, r0, #1
    779a:	d102      	bne.n	77a2 <_printf_i+0x1e6>
    779c:	2001      	movs	r0, #1
    779e:	4240      	negs	r0, r0
    77a0:	e027      	b.n	77f2 <_printf_i+0x236>
    77a2:	6923      	ldr	r3, [r4, #16]
    77a4:	0032      	movs	r2, r6
    77a6:	9906      	ldr	r1, [sp, #24]
    77a8:	9805      	ldr	r0, [sp, #20]
    77aa:	9d07      	ldr	r5, [sp, #28]
    77ac:	47a8      	blx	r5
    77ae:	1c43      	adds	r3, r0, #1
    77b0:	d0f4      	beq.n	779c <_printf_i+0x1e0>
    77b2:	6823      	ldr	r3, [r4, #0]
    77b4:	2500      	movs	r5, #0
    77b6:	079b      	lsls	r3, r3, #30
    77b8:	d40f      	bmi.n	77da <_printf_i+0x21e>
    77ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    77bc:	68e0      	ldr	r0, [r4, #12]
    77be:	4298      	cmp	r0, r3
    77c0:	da17      	bge.n	77f2 <_printf_i+0x236>
    77c2:	0018      	movs	r0, r3
    77c4:	e015      	b.n	77f2 <_printf_i+0x236>
    77c6:	0022      	movs	r2, r4
    77c8:	2301      	movs	r3, #1
    77ca:	3219      	adds	r2, #25
    77cc:	9906      	ldr	r1, [sp, #24]
    77ce:	9805      	ldr	r0, [sp, #20]
    77d0:	9e07      	ldr	r6, [sp, #28]
    77d2:	47b0      	blx	r6
    77d4:	1c43      	adds	r3, r0, #1
    77d6:	d0e1      	beq.n	779c <_printf_i+0x1e0>
    77d8:	3501      	adds	r5, #1
    77da:	68e3      	ldr	r3, [r4, #12]
    77dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    77de:	1a9b      	subs	r3, r3, r2
    77e0:	429d      	cmp	r5, r3
    77e2:	dbf0      	blt.n	77c6 <_printf_i+0x20a>
    77e4:	e7e9      	b.n	77ba <_printf_i+0x1fe>
    77e6:	0026      	movs	r6, r4
    77e8:	9b03      	ldr	r3, [sp, #12]
    77ea:	3642      	adds	r6, #66	; 0x42
    77ec:	781b      	ldrb	r3, [r3, #0]
    77ee:	7033      	strb	r3, [r6, #0]
    77f0:	e78e      	b.n	7710 <_printf_i+0x154>
    77f2:	b00b      	add	sp, #44	; 0x2c
    77f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    77f6:	46c0      	nop			; (mov r8, r8)
    77f8:	000083f9 	.word	0x000083f9
    77fc:	0000840a 	.word	0x0000840a

00007800 <_putc_r>:
    7800:	b570      	push	{r4, r5, r6, lr}
    7802:	0006      	movs	r6, r0
    7804:	000d      	movs	r5, r1
    7806:	0014      	movs	r4, r2
    7808:	2800      	cmp	r0, #0
    780a:	d004      	beq.n	7816 <_putc_r+0x16>
    780c:	6983      	ldr	r3, [r0, #24]
    780e:	2b00      	cmp	r3, #0
    7810:	d101      	bne.n	7816 <_putc_r+0x16>
    7812:	f7ff fb83 	bl	6f1c <__sinit>
    7816:	4b12      	ldr	r3, [pc, #72]	; (7860 <_putc_r+0x60>)
    7818:	429c      	cmp	r4, r3
    781a:	d101      	bne.n	7820 <_putc_r+0x20>
    781c:	6874      	ldr	r4, [r6, #4]
    781e:	e008      	b.n	7832 <_putc_r+0x32>
    7820:	4b10      	ldr	r3, [pc, #64]	; (7864 <_putc_r+0x64>)
    7822:	429c      	cmp	r4, r3
    7824:	d101      	bne.n	782a <_putc_r+0x2a>
    7826:	68b4      	ldr	r4, [r6, #8]
    7828:	e003      	b.n	7832 <_putc_r+0x32>
    782a:	4b0f      	ldr	r3, [pc, #60]	; (7868 <_putc_r+0x68>)
    782c:	429c      	cmp	r4, r3
    782e:	d100      	bne.n	7832 <_putc_r+0x32>
    7830:	68f4      	ldr	r4, [r6, #12]
    7832:	68a3      	ldr	r3, [r4, #8]
    7834:	3b01      	subs	r3, #1
    7836:	60a3      	str	r3, [r4, #8]
    7838:	2b00      	cmp	r3, #0
    783a:	da05      	bge.n	7848 <_putc_r+0x48>
    783c:	69a2      	ldr	r2, [r4, #24]
    783e:	4293      	cmp	r3, r2
    7840:	db08      	blt.n	7854 <_putc_r+0x54>
    7842:	b2eb      	uxtb	r3, r5
    7844:	2b0a      	cmp	r3, #10
    7846:	d005      	beq.n	7854 <_putc_r+0x54>
    7848:	6823      	ldr	r3, [r4, #0]
    784a:	b2e8      	uxtb	r0, r5
    784c:	1c5a      	adds	r2, r3, #1
    784e:	6022      	str	r2, [r4, #0]
    7850:	701d      	strb	r5, [r3, #0]
    7852:	e004      	b.n	785e <_putc_r+0x5e>
    7854:	0022      	movs	r2, r4
    7856:	0029      	movs	r1, r5
    7858:	0030      	movs	r0, r6
    785a:	f7ff f99d 	bl	6b98 <__swbuf_r>
    785e:	bd70      	pop	{r4, r5, r6, pc}
    7860:	00008388 	.word	0x00008388
    7864:	000083a8 	.word	0x000083a8
    7868:	000083c8 	.word	0x000083c8

0000786c <_sbrk_r>:
    786c:	2300      	movs	r3, #0
    786e:	b570      	push	{r4, r5, r6, lr}
    7870:	4c06      	ldr	r4, [pc, #24]	; (788c <_sbrk_r+0x20>)
    7872:	0005      	movs	r5, r0
    7874:	0008      	movs	r0, r1
    7876:	6023      	str	r3, [r4, #0]
    7878:	f7fe fefe 	bl	6678 <_sbrk>
    787c:	1c43      	adds	r3, r0, #1
    787e:	d103      	bne.n	7888 <_sbrk_r+0x1c>
    7880:	6823      	ldr	r3, [r4, #0]
    7882:	2b00      	cmp	r3, #0
    7884:	d000      	beq.n	7888 <_sbrk_r+0x1c>
    7886:	602b      	str	r3, [r5, #0]
    7888:	bd70      	pop	{r4, r5, r6, pc}
    788a:	46c0      	nop			; (mov r8, r8)
    788c:	200005f0 	.word	0x200005f0

00007890 <__sread>:
    7890:	b570      	push	{r4, r5, r6, lr}
    7892:	000c      	movs	r4, r1
    7894:	250e      	movs	r5, #14
    7896:	5f49      	ldrsh	r1, [r1, r5]
    7898:	f000 f8b0 	bl	79fc <_read_r>
    789c:	2800      	cmp	r0, #0
    789e:	db03      	blt.n	78a8 <__sread+0x18>
    78a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    78a2:	181b      	adds	r3, r3, r0
    78a4:	6563      	str	r3, [r4, #84]	; 0x54
    78a6:	e003      	b.n	78b0 <__sread+0x20>
    78a8:	89a2      	ldrh	r2, [r4, #12]
    78aa:	4b02      	ldr	r3, [pc, #8]	; (78b4 <__sread+0x24>)
    78ac:	4013      	ands	r3, r2
    78ae:	81a3      	strh	r3, [r4, #12]
    78b0:	bd70      	pop	{r4, r5, r6, pc}
    78b2:	46c0      	nop			; (mov r8, r8)
    78b4:	ffffefff 	.word	0xffffefff

000078b8 <__swrite>:
    78b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78ba:	001f      	movs	r7, r3
    78bc:	898b      	ldrh	r3, [r1, #12]
    78be:	0005      	movs	r5, r0
    78c0:	000c      	movs	r4, r1
    78c2:	0016      	movs	r6, r2
    78c4:	05db      	lsls	r3, r3, #23
    78c6:	d505      	bpl.n	78d4 <__swrite+0x1c>
    78c8:	230e      	movs	r3, #14
    78ca:	5ec9      	ldrsh	r1, [r1, r3]
    78cc:	2200      	movs	r2, #0
    78ce:	2302      	movs	r3, #2
    78d0:	f000 f874 	bl	79bc <_lseek_r>
    78d4:	89a2      	ldrh	r2, [r4, #12]
    78d6:	4b05      	ldr	r3, [pc, #20]	; (78ec <__swrite+0x34>)
    78d8:	0028      	movs	r0, r5
    78da:	4013      	ands	r3, r2
    78dc:	81a3      	strh	r3, [r4, #12]
    78de:	0032      	movs	r2, r6
    78e0:	230e      	movs	r3, #14
    78e2:	5ee1      	ldrsh	r1, [r4, r3]
    78e4:	003b      	movs	r3, r7
    78e6:	f000 f81f 	bl	7928 <_write_r>
    78ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    78ec:	ffffefff 	.word	0xffffefff

000078f0 <__sseek>:
    78f0:	b570      	push	{r4, r5, r6, lr}
    78f2:	000c      	movs	r4, r1
    78f4:	250e      	movs	r5, #14
    78f6:	5f49      	ldrsh	r1, [r1, r5]
    78f8:	f000 f860 	bl	79bc <_lseek_r>
    78fc:	89a3      	ldrh	r3, [r4, #12]
    78fe:	1c42      	adds	r2, r0, #1
    7900:	d103      	bne.n	790a <__sseek+0x1a>
    7902:	4a05      	ldr	r2, [pc, #20]	; (7918 <__sseek+0x28>)
    7904:	4013      	ands	r3, r2
    7906:	81a3      	strh	r3, [r4, #12]
    7908:	e004      	b.n	7914 <__sseek+0x24>
    790a:	2280      	movs	r2, #128	; 0x80
    790c:	0152      	lsls	r2, r2, #5
    790e:	4313      	orrs	r3, r2
    7910:	81a3      	strh	r3, [r4, #12]
    7912:	6560      	str	r0, [r4, #84]	; 0x54
    7914:	bd70      	pop	{r4, r5, r6, pc}
    7916:	46c0      	nop			; (mov r8, r8)
    7918:	ffffefff 	.word	0xffffefff

0000791c <__sclose>:
    791c:	b510      	push	{r4, lr}
    791e:	230e      	movs	r3, #14
    7920:	5ec9      	ldrsh	r1, [r1, r3]
    7922:	f000 f815 	bl	7950 <_close_r>
    7926:	bd10      	pop	{r4, pc}

00007928 <_write_r>:
    7928:	b570      	push	{r4, r5, r6, lr}
    792a:	0005      	movs	r5, r0
    792c:	0008      	movs	r0, r1
    792e:	0011      	movs	r1, r2
    7930:	2200      	movs	r2, #0
    7932:	4c06      	ldr	r4, [pc, #24]	; (794c <_write_r+0x24>)
    7934:	6022      	str	r2, [r4, #0]
    7936:	001a      	movs	r2, r3
    7938:	f7fe fe68 	bl	660c <_write>
    793c:	1c43      	adds	r3, r0, #1
    793e:	d103      	bne.n	7948 <_write_r+0x20>
    7940:	6823      	ldr	r3, [r4, #0]
    7942:	2b00      	cmp	r3, #0
    7944:	d000      	beq.n	7948 <_write_r+0x20>
    7946:	602b      	str	r3, [r5, #0]
    7948:	bd70      	pop	{r4, r5, r6, pc}
    794a:	46c0      	nop			; (mov r8, r8)
    794c:	200005f0 	.word	0x200005f0

00007950 <_close_r>:
    7950:	2300      	movs	r3, #0
    7952:	b570      	push	{r4, r5, r6, lr}
    7954:	4c06      	ldr	r4, [pc, #24]	; (7970 <_close_r+0x20>)
    7956:	0005      	movs	r5, r0
    7958:	0008      	movs	r0, r1
    795a:	6023      	str	r3, [r4, #0]
    795c:	f7fe feaa 	bl	66b4 <_close>
    7960:	1c43      	adds	r3, r0, #1
    7962:	d103      	bne.n	796c <_close_r+0x1c>
    7964:	6823      	ldr	r3, [r4, #0]
    7966:	2b00      	cmp	r3, #0
    7968:	d000      	beq.n	796c <_close_r+0x1c>
    796a:	602b      	str	r3, [r5, #0]
    796c:	bd70      	pop	{r4, r5, r6, pc}
    796e:	46c0      	nop			; (mov r8, r8)
    7970:	200005f0 	.word	0x200005f0

00007974 <_fstat_r>:
    7974:	2300      	movs	r3, #0
    7976:	b570      	push	{r4, r5, r6, lr}
    7978:	4c06      	ldr	r4, [pc, #24]	; (7994 <_fstat_r+0x20>)
    797a:	0005      	movs	r5, r0
    797c:	0008      	movs	r0, r1
    797e:	0011      	movs	r1, r2
    7980:	6023      	str	r3, [r4, #0]
    7982:	f7fe fea1 	bl	66c8 <_fstat>
    7986:	1c43      	adds	r3, r0, #1
    7988:	d103      	bne.n	7992 <_fstat_r+0x1e>
    798a:	6823      	ldr	r3, [r4, #0]
    798c:	2b00      	cmp	r3, #0
    798e:	d000      	beq.n	7992 <_fstat_r+0x1e>
    7990:	602b      	str	r3, [r5, #0]
    7992:	bd70      	pop	{r4, r5, r6, pc}
    7994:	200005f0 	.word	0x200005f0

00007998 <_isatty_r>:
    7998:	2300      	movs	r3, #0
    799a:	b570      	push	{r4, r5, r6, lr}
    799c:	4c06      	ldr	r4, [pc, #24]	; (79b8 <_isatty_r+0x20>)
    799e:	0005      	movs	r5, r0
    79a0:	0008      	movs	r0, r1
    79a2:	6023      	str	r3, [r4, #0]
    79a4:	f7fe fe9e 	bl	66e4 <_isatty>
    79a8:	1c43      	adds	r3, r0, #1
    79aa:	d103      	bne.n	79b4 <_isatty_r+0x1c>
    79ac:	6823      	ldr	r3, [r4, #0]
    79ae:	2b00      	cmp	r3, #0
    79b0:	d000      	beq.n	79b4 <_isatty_r+0x1c>
    79b2:	602b      	str	r3, [r5, #0]
    79b4:	bd70      	pop	{r4, r5, r6, pc}
    79b6:	46c0      	nop			; (mov r8, r8)
    79b8:	200005f0 	.word	0x200005f0

000079bc <_lseek_r>:
    79bc:	b570      	push	{r4, r5, r6, lr}
    79be:	0005      	movs	r5, r0
    79c0:	0008      	movs	r0, r1
    79c2:	0011      	movs	r1, r2
    79c4:	2200      	movs	r2, #0
    79c6:	4c06      	ldr	r4, [pc, #24]	; (79e0 <_lseek_r+0x24>)
    79c8:	6022      	str	r2, [r4, #0]
    79ca:	001a      	movs	r2, r3
    79cc:	f7fe fe94 	bl	66f8 <_lseek>
    79d0:	1c43      	adds	r3, r0, #1
    79d2:	d103      	bne.n	79dc <_lseek_r+0x20>
    79d4:	6823      	ldr	r3, [r4, #0]
    79d6:	2b00      	cmp	r3, #0
    79d8:	d000      	beq.n	79dc <_lseek_r+0x20>
    79da:	602b      	str	r3, [r5, #0]
    79dc:	bd70      	pop	{r4, r5, r6, pc}
    79de:	46c0      	nop			; (mov r8, r8)
    79e0:	200005f0 	.word	0x200005f0

000079e4 <memchr>:
    79e4:	b2c9      	uxtb	r1, r1
    79e6:	1882      	adds	r2, r0, r2
    79e8:	4290      	cmp	r0, r2
    79ea:	d004      	beq.n	79f6 <memchr+0x12>
    79ec:	7803      	ldrb	r3, [r0, #0]
    79ee:	428b      	cmp	r3, r1
    79f0:	d002      	beq.n	79f8 <memchr+0x14>
    79f2:	3001      	adds	r0, #1
    79f4:	e7f8      	b.n	79e8 <memchr+0x4>
    79f6:	2000      	movs	r0, #0
    79f8:	4770      	bx	lr
	...

000079fc <_read_r>:
    79fc:	b570      	push	{r4, r5, r6, lr}
    79fe:	0005      	movs	r5, r0
    7a00:	0008      	movs	r0, r1
    7a02:	0011      	movs	r1, r2
    7a04:	2200      	movs	r2, #0
    7a06:	4c06      	ldr	r4, [pc, #24]	; (7a20 <_read_r+0x24>)
    7a08:	6022      	str	r2, [r4, #0]
    7a0a:	001a      	movs	r2, r3
    7a0c:	f7fe fdd4 	bl	65b8 <_read>
    7a10:	1c43      	adds	r3, r0, #1
    7a12:	d103      	bne.n	7a1c <_read_r+0x20>
    7a14:	6823      	ldr	r3, [r4, #0]
    7a16:	2b00      	cmp	r3, #0
    7a18:	d000      	beq.n	7a1c <_read_r+0x20>
    7a1a:	602b      	str	r3, [r5, #0]
    7a1c:	bd70      	pop	{r4, r5, r6, pc}
    7a1e:	46c0      	nop			; (mov r8, r8)
    7a20:	200005f0 	.word	0x200005f0
    7a24:	000006ee 	.word	0x000006ee
    7a28:	0000079e 	.word	0x0000079e
    7a2c:	0000085e 	.word	0x0000085e
    7a30:	000008ba 	.word	0x000008ba
    7a34:	00000a18 	.word	0x00000a18
    7a38:	50504128 	.word	0x50504128
    7a3c:	52452829 	.word	0x52452829
    7a40:	255b2952 	.word	0x255b2952
    7a44:	255b5d73 	.word	0x255b5d73
    7a48:	00005d64 	.word	0x00005d64
    7a4c:	6c696146 	.word	0x6c696146
    7a50:	74206465 	.word	0x74206465
    7a54:	7570206f 	.word	0x7570206f
    7a58:	68742074 	.word	0x68742074
    7a5c:	69572065 	.word	0x69572065
    7a60:	43206946 	.word	0x43206946
    7a64:	20706968 	.word	0x20706968
    7a68:	64206e69 	.word	0x64206e69
    7a6c:	6c6e776f 	.word	0x6c6e776f
    7a70:	2064616f 	.word	0x2064616f
    7a74:	65646f6d 	.word	0x65646f6d
    7a78:	00000000 	.word	0x00000000
    7a7c:	00000cb0 	.word	0x00000cb0
    7a80:	00000d0a 	.word	0x00000d0a
    7a84:	00000d4a 	.word	0x00000d4a
    7a88:	00000d88 	.word	0x00000d88
    7a8c:	00000e22 	.word	0x00000e22
    7a90:	00000dca 	.word	0x00000dca
    7a94:	00000e22 	.word	0x00000e22
    7a98:	00000e22 	.word	0x00000e22
    7a9c:	00000e22 	.word	0x00000e22
    7aa0:	00000e22 	.word	0x00000e22
    7aa4:	00000dea 	.word	0x00000dea

00007aa8 <__FUNCTION__.14695>:
    7aa8:	65746e65 69775f72 665f6966 776d7269     enter_wifi_firmw
    7ab8:	5f657261 6e776f64 64616f6c 00000000     are_download....
    7ac8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    7ad8:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    7ae8:	6320746c 0000646d                       lt cmd..

00007af0 <__FUNCTION__.14138>:
    7af0:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    7b00:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    7b10:	00005d64 696d6e5b 61747320 3a5d7472     d]..[nmi start]:
    7b20:	69616620 6e69206c 62207469 00007375      fail init bus..
    7b30:	50504128 4e492829 00294f46 70696843     (APP)(INFO).Chip
    7b40:	20444920 0a786c25 00000000 696d6e5b      ID %lx.....[nmi
    7b50:	61747320 3a5d7472 69616620 6863206c      start]: fail ch
    7b60:	775f7069 75656b61 00000070 6c696166     ip_wakeup...fail
    7b70:	74206465 6e65206f 656c6261 746e6920     ed to enable int
    7b80:	75727265 2e737470 0000002e 6d726946     errupts.....Firm
    7b90:	65726177 72657620 3a202020 2e752520     ware ver   : %u.
    7ba0:	252e7525 00000a75 206e694d 76697264     %u.%u...Min driv
    7bb0:	76207265 3a207265 2e752520 252e7525     er ver : %u.%u.%
    7bc0:	00000a75 72727543 69726420 20726576     u...Curr driver 
    7bd0:	3a726576 2e752520 252e7525 00000a75     ver: %u.%u.%u...
    7be0:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    7bf0:	65562065 6f697372 0000006e 696d6e5b     e Version...[nmi
    7c00:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
    7c10:	2074696e 6c696166 00000000 696d6e5b     nit fail....[nmi
    7c20:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
    7c30:	75622074 00000073                       t bus...

00007c38 <__FUNCTION__.12720>:
    7c38:	645f6d6e 695f7672 5f74696e 6e776f64     nm_drv_init_down
    7c48:	64616f6c 646f6d5f 00000065              load_mode...

00007c54 <crc7_syndrome_table>:
    7c54:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    7c64:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    7c74:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    7c84:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    7c94:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    7ca4:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    7cb4:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    7cc4:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    7cd4:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    7ce4:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    7cf4:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    7d04:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    7d14:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    7d24:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    7d34:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    7d44:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    7d54:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    7d64:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
    7d74:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    7d84:	73756220 72726520 2e2e726f 0000002e      bus error......
    7d94:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    7da4:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    7db4:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    7dc4:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    7dd4:	656c6961 61642064 72206174 6f707365     ailed data respo
    7de4:	2065736e 64616572 7562202c 72652073     nse read, bus er
    7df4:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    7e04:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    7e14:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    7e24:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    7e34:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    7e44:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    7e54:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    7e64:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    7e74:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    7e84:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    7e94:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    7ea4:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
    7eb4:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    7ec4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    7ed4:	656c6961 61642064 62206174 6b636f6c     ailed data block
    7ee4:	69727720 202c6574 20737562 6f727265      write, bus erro
    7ef4:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    7f04:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    7f14:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
    7f24:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    7f34:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    7f44:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    7f54:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    7f64:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    7f74:	65722064 6e6f7073 202c6573 74697277     d response, writ
    7f84:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    7f94:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    7fa4:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    7fb4:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
    7fc4:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
    7fd4:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
    7fe4:	2c65736e 69727720 62206574 6b636f6c     nse, write block
    7ff4:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    8004:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    8014:	206b636f 61746164 69727720 2e2e6574     ock data write..
    8024:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8034:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    8044:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
    8054:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    8064:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    8074:	64616572 67657220 30252820 2e297838     read reg (%08x).
    8084:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8094:	656c6961 61642064 72206174 2e646165     ailed data read.
    80a4:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    80b4:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    80c4:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    80d4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    80e4:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    80f4:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    8104:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    8114:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    8124:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    8134:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8144:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    8154:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
    8164:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
    8174:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
    8184:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    8194:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    81a4:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
    81b4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    81c4:	6e692064 6e726574 77206c61 65746972     d internal write
    81d4:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
    81e4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    81f4:	206c6961 20646d63 64616572 69686320     ail cmd read chi
    8204:	64692070 002e2e2e 00001f04 00001f04     p id............
    8214:	00001f94 00001e58 00001e9e 00001ec0     ....X...........
    8224:	00001f46 00001f46 00002000 00001e2c     F...F.... ..,...
    8234:	0000205a 0000205a 0000205a 0000205a     Z ..Z ..Z ..Z ..
    8244:	00001ee2                                ....

00008248 <__FUNCTION__.12123>:
    8248:	5f697073 00646d63                       spi_cmd.

00008250 <__FUNCTION__.12131>:
    8250:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000825c <__FUNCTION__.12147>:
    825c:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000826c <__FUNCTION__.12162>:
    826c:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000827c <__FUNCTION__.12172>:
    827c:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000828c <__FUNCTION__.12180>:
    828c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000829c <__FUNCTION__.12189>:
    829c:	5f697073 64616572 6765725f 00000000     spi_read_reg....

000082ac <__FUNCTION__.12197>:
    82ac:	735f6d6e 725f6970 00646165              nm_spi_read.

000082b8 <__FUNCTION__.12214>:
    82b8:	735f6d6e 695f6970 0074696e 42000800     nm_spi_init....B
    82c8:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    82d8:	42001c00 0c0b0a09 00000e0d 000056fe     ...B.........V..
    82e8:	00005776 00005776 0000571c 00005716     vW..vW...W...W..
    82f8:	00005722 00005704 00005728 0000575c     "W...W..(W..\W..
    8308:	000059d0 00005a20 00005a20 00005a1c     .Y.. Z.. Z...Z..
    8318:	000059c2 000059e2 000059b2 000059f4     .Y...Y...Y...Y..
    8328:	00005a06 00005a6e 00005a9c 00005a9c     .Z..nZ...Z...Z..
    8338:	00005a98 00005a68 00005a74 00005a62     .Z..hZ..tZ..bZ..
    8348:	00005a7a 00005a80                       zZ...Z..

00008350 <_tcc_intflag>:
    8350:	00000001 00000002 00000004 00000008     ................
    8360:	00001000 00002000 00004000 00008000     ..... ...@......
    8370:	00010000 00020000 00040000 00080000     ................
    8380:	00000043                                C...

00008384 <_global_impure_ptr>:
    8384:	20000010                                ... 

00008388 <__sf_fake_stdin>:
	...

000083a8 <__sf_fake_stdout>:
	...

000083c8 <__sf_fake_stderr>:
	...
    83e8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    83f8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8408:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8418:	00006665                                ef..

0000841c <_init>:
    841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    841e:	46c0      	nop			; (mov r8, r8)
    8420:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8422:	bc08      	pop	{r3}
    8424:	469e      	mov	lr, r3
    8426:	4770      	bx	lr

00008428 <__init_array_start>:
    8428:	000000d9 	.word	0x000000d9

0000842c <_fini>:
    842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    842e:	46c0      	nop			; (mov r8, r8)
    8430:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8432:	bc08      	pop	{r3}
    8434:	469e      	mov	lr, r3
    8436:	4770      	bx	lr

00008438 <__fini_array_start>:
    8438:	000000b1 	.word	0x000000b1
