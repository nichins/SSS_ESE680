
ESE680A_ApplicationCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cadc  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001f0  20000000  00014adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000dd0  200001f0  00014ccc  000201f0  2**2
                  ALLOC
  3 .stack        00002000  20000fc0  00015a9c  000201f0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
  6 .debug_info   0006e5c8  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00009541  00000000  00000000  0008e8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001b824  00000000  00000000  00097deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001038  00000000  00000000  000b360f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001e38  00000000  00000000  000b4647  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00024277  00000000  00000000  000b647f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00021ee3  00000000  00000000  000da6f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00095c53  00000000  00000000  000fc5d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000038c4  00000000  00000000  0019222c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <exception_table>:
    8000:	c0 2f 00 20 e9 ce 00 00 e5 ce 00 00 e5 ce 00 00     ./. ............
	...
    802c:	e5 ce 00 00 00 00 00 00 00 00 00 00 e5 ce 00 00     ................
    803c:	e5 ce 00 00 e5 ce 00 00 e5 ce 00 00 e5 ce 00 00     ................
    804c:	bd b5 00 00 59 b4 00 00 e5 ce 00 00 e5 ce 00 00     ....Y...........
    805c:	e5 ce 00 00 e5 ce 00 00 81 e0 00 00 91 e0 00 00     ................
    806c:	a1 e0 00 00 b1 e0 00 00 c1 e0 00 00 d1 e0 00 00     ................
    807c:	31 bc 00 00 41 bc 00 00 51 bc 00 00 e5 ce 00 00     1...A...Q.......
    808c:	e5 ce 00 00 e5 ce 00 00 00 00 00 00 00 00 00 00     ................
    809c:	e5 ce 00 00 e5 ce 00 00 e5 ce 00 00 e5 ce 00 00     ................
    80ac:	e5 ce 00 00 00 00 00 00                             ........

000080b4 <__do_global_dtors_aux>:
    80b4:	b510      	push	{r4, lr}
    80b6:	4c06      	ldr	r4, [pc, #24]	; (80d0 <__do_global_dtors_aux+0x1c>)
    80b8:	7823      	ldrb	r3, [r4, #0]
    80ba:	2b00      	cmp	r3, #0
    80bc:	d107      	bne.n	80ce <__do_global_dtors_aux+0x1a>
    80be:	4b05      	ldr	r3, [pc, #20]	; (80d4 <__do_global_dtors_aux+0x20>)
    80c0:	2b00      	cmp	r3, #0
    80c2:	d002      	beq.n	80ca <__do_global_dtors_aux+0x16>
    80c4:	4804      	ldr	r0, [pc, #16]	; (80d8 <__do_global_dtors_aux+0x24>)
    80c6:	e000      	b.n	80ca <__do_global_dtors_aux+0x16>
    80c8:	bf00      	nop
    80ca:	2301      	movs	r3, #1
    80cc:	7023      	strb	r3, [r4, #0]
    80ce:	bd10      	pop	{r4, pc}
    80d0:	200001f0 	.word	0x200001f0
    80d4:	00000000 	.word	0x00000000
    80d8:	00014adc 	.word	0x00014adc

000080dc <frame_dummy>:
    80dc:	4b08      	ldr	r3, [pc, #32]	; (8100 <frame_dummy+0x24>)
    80de:	b510      	push	{r4, lr}
    80e0:	2b00      	cmp	r3, #0
    80e2:	d003      	beq.n	80ec <frame_dummy+0x10>
    80e4:	4907      	ldr	r1, [pc, #28]	; (8104 <frame_dummy+0x28>)
    80e6:	4808      	ldr	r0, [pc, #32]	; (8108 <frame_dummy+0x2c>)
    80e8:	e000      	b.n	80ec <frame_dummy+0x10>
    80ea:	bf00      	nop
    80ec:	4807      	ldr	r0, [pc, #28]	; (810c <frame_dummy+0x30>)
    80ee:	6803      	ldr	r3, [r0, #0]
    80f0:	2b00      	cmp	r3, #0
    80f2:	d100      	bne.n	80f6 <frame_dummy+0x1a>
    80f4:	bd10      	pop	{r4, pc}
    80f6:	4b06      	ldr	r3, [pc, #24]	; (8110 <frame_dummy+0x34>)
    80f8:	2b00      	cmp	r3, #0
    80fa:	d0fb      	beq.n	80f4 <frame_dummy+0x18>
    80fc:	4798      	blx	r3
    80fe:	e7f9      	b.n	80f4 <frame_dummy+0x18>
    8100:	00000000 	.word	0x00000000
    8104:	200001f4 	.word	0x200001f4
    8108:	00014adc 	.word	0x00014adc
    810c:	00014adc 	.word	0x00014adc
    8110:	00000000 	.word	0x00000000

00008114 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    8114:	b510      	push	{r4, lr}
	if (gpfIsr) {
    8116:	4b03      	ldr	r3, [pc, #12]	; (8124 <chip_isr+0x10>)
    8118:	681b      	ldr	r3, [r3, #0]
    811a:	2b00      	cmp	r3, #0
    811c:	d000      	beq.n	8120 <chip_isr+0xc>
		gpfIsr();
    811e:	4798      	blx	r3
	}
}
    8120:	bd10      	pop	{r4, pc}
    8122:	46c0      	nop			; (mov r8, r8)
    8124:	2000020c 	.word	0x2000020c

00008128 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    8128:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    812a:	1e44      	subs	r4, r0, #1
    812c:	2800      	cmp	r0, #0
    812e:	d004      	beq.n	813a <nm_bsp_sleep+0x12>
		delay_ms(1);
    8130:	4d02      	ldr	r5, [pc, #8]	; (813c <nm_bsp_sleep+0x14>)
    8132:	2001      	movs	r0, #1
    8134:	47a8      	blx	r5
	while (u32TimeMsec--) {
    8136:	3c01      	subs	r4, #1
    8138:	d2fb      	bcs.n	8132 <nm_bsp_sleep+0xa>
	}
}
    813a:	bd70      	pop	{r4, r5, r6, pc}
    813c:	0000d9b5 	.word	0x0000d9b5

00008140 <nm_bsp_reset>:
{
    8140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8142:	4c08      	ldr	r4, [pc, #32]	; (8164 <nm_bsp_reset+0x24>)
    8144:	2780      	movs	r7, #128	; 0x80
    8146:	057f      	lsls	r7, r7, #21
    8148:	6167      	str	r7, [r4, #20]
    814a:	2680      	movs	r6, #128	; 0x80
    814c:	0536      	lsls	r6, r6, #20
    814e:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
    8150:	2064      	movs	r0, #100	; 0x64
    8152:	4d05      	ldr	r5, [pc, #20]	; (8168 <nm_bsp_reset+0x28>)
    8154:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    8156:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
    8158:	2064      	movs	r0, #100	; 0x64
    815a:	47a8      	blx	r5
    815c:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
    815e:	2064      	movs	r0, #100	; 0x64
    8160:	47a8      	blx	r5
}
    8162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8164:	41004400 	.word	0x41004400
    8168:	00008129 	.word	0x00008129

0000816c <nm_bsp_init>:
{
    816c:	b570      	push	{r4, r5, r6, lr}
    816e:	b082      	sub	sp, #8
	gpfIsr = NULL;
    8170:	2300      	movs	r3, #0
    8172:	4a16      	ldr	r2, [pc, #88]	; (81cc <nm_bsp_init+0x60>)
    8174:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    8176:	ac01      	add	r4, sp, #4
    8178:	2501      	movs	r5, #1
    817a:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    817c:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    817e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    8180:	0021      	movs	r1, r4
    8182:	201b      	movs	r0, #27
    8184:	4e12      	ldr	r6, [pc, #72]	; (81d0 <nm_bsp_init+0x64>)
    8186:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    8188:	0021      	movs	r1, r4
    818a:	201c      	movs	r0, #28
    818c:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    818e:	0021      	movs	r1, r4
    8190:	2028      	movs	r0, #40	; 0x28
    8192:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    8194:	4b0f      	ldr	r3, [pc, #60]	; (81d4 <nm_bsp_init+0x68>)
    8196:	2280      	movs	r2, #128	; 0x80
    8198:	0552      	lsls	r2, r2, #21
    819a:	615a      	str	r2, [r3, #20]
    819c:	2280      	movs	r2, #128	; 0x80
    819e:	0512      	lsls	r2, r2, #20
    81a0:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    81a2:	4b0d      	ldr	r3, [pc, #52]	; (81d8 <nm_bsp_init+0x6c>)
    81a4:	681b      	ldr	r3, [r3, #0]
    81a6:	421d      	tst	r5, r3
    81a8:	d003      	beq.n	81b2 <nm_bsp_init+0x46>
    81aa:	4b0b      	ldr	r3, [pc, #44]	; (81d8 <nm_bsp_init+0x6c>)
    81ac:	681b      	ldr	r3, [r3, #0]
    81ae:	079b      	lsls	r3, r3, #30
    81b0:	d401      	bmi.n	81b6 <nm_bsp_init+0x4a>
	    delay_init();
    81b2:	4b0a      	ldr	r3, [pc, #40]	; (81dc <nm_bsp_init+0x70>)
    81b4:	4798      	blx	r3
	nm_bsp_reset();
    81b6:	4b0a      	ldr	r3, [pc, #40]	; (81e0 <nm_bsp_init+0x74>)
    81b8:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    81ba:	2201      	movs	r2, #1
    81bc:	4b09      	ldr	r3, [pc, #36]	; (81e4 <nm_bsp_init+0x78>)
    81be:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    81c0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    81c4:	b662      	cpsie	i
}
    81c6:	2000      	movs	r0, #0
    81c8:	b002      	add	sp, #8
    81ca:	bd70      	pop	{r4, r5, r6, pc}
    81cc:	2000020c 	.word	0x2000020c
    81d0:	0000dc79 	.word	0x0000dc79
    81d4:	41004400 	.word	0x41004400
    81d8:	e000e010 	.word	0xe000e010
    81dc:	0000d975 	.word	0x0000d975
    81e0:	00008141 	.word	0x00008141
    81e4:	20000002 	.word	0x20000002

000081e8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    81e8:	b510      	push	{r4, lr}
    81ea:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    81ec:	4b0e      	ldr	r3, [pc, #56]	; (8228 <nm_bsp_register_isr+0x40>)
    81ee:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    81f0:	ac01      	add	r4, sp, #4
    81f2:	0020      	movs	r0, r4
    81f4:	4b0d      	ldr	r3, [pc, #52]	; (822c <nm_bsp_register_isr+0x44>)
    81f6:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    81f8:	2329      	movs	r3, #41	; 0x29
    81fa:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    81fc:	2300      	movs	r3, #0
    81fe:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    8200:	3301      	adds	r3, #1
    8202:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    8204:	3301      	adds	r3, #1
    8206:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    8208:	0021      	movs	r1, r4
    820a:	2009      	movs	r0, #9
    820c:	4b08      	ldr	r3, [pc, #32]	; (8230 <nm_bsp_register_isr+0x48>)
    820e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    8210:	2200      	movs	r2, #0
    8212:	2109      	movs	r1, #9
    8214:	4807      	ldr	r0, [pc, #28]	; (8234 <nm_bsp_register_isr+0x4c>)
    8216:	4b08      	ldr	r3, [pc, #32]	; (8238 <nm_bsp_register_isr+0x50>)
    8218:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    821a:	2100      	movs	r1, #0
    821c:	2009      	movs	r0, #9
    821e:	4b07      	ldr	r3, [pc, #28]	; (823c <nm_bsp_register_isr+0x54>)
    8220:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    8222:	b004      	add	sp, #16
    8224:	bd10      	pop	{r4, pc}
    8226:	46c0      	nop			; (mov r8, r8)
    8228:	2000020c 	.word	0x2000020c
    822c:	0000b531 	.word	0x0000b531
    8230:	0000b545 	.word	0x0000b545
    8234:	00008115 	.word	0x00008115
    8238:	0000b3ed 	.word	0x0000b3ed
    823c:	0000b419 	.word	0x0000b419

00008240 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    8240:	b510      	push	{r4, lr}
	if (u8Enable) {
    8242:	2800      	cmp	r0, #0
    8244:	d104      	bne.n	8250 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    8246:	2100      	movs	r1, #0
    8248:	2009      	movs	r0, #9
    824a:	4b04      	ldr	r3, [pc, #16]	; (825c <nm_bsp_interrupt_ctrl+0x1c>)
    824c:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    824e:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    8250:	2100      	movs	r1, #0
    8252:	2009      	movs	r0, #9
    8254:	4b02      	ldr	r3, [pc, #8]	; (8260 <nm_bsp_interrupt_ctrl+0x20>)
    8256:	4798      	blx	r3
    8258:	e7f9      	b.n	824e <nm_bsp_interrupt_ctrl+0xe>
    825a:	46c0      	nop			; (mov r8, r8)
    825c:	0000b439 	.word	0x0000b439
    8260:	0000b419 	.word	0x0000b419

00008264 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    8264:	b530      	push	{r4, r5, lr}
    8266:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    8268:	4c30      	ldr	r4, [pc, #192]	; (832c <nm_bus_init+0xc8>)
    826a:	230e      	movs	r3, #14
    826c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    826e:	2300      	movs	r3, #0
    8270:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    8272:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    8274:	a901      	add	r1, sp, #4
    8276:	2201      	movs	r2, #1
    8278:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    827a:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    827c:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    827e:	200e      	movs	r0, #14
    8280:	4b2b      	ldr	r3, [pc, #172]	; (8330 <nm_bus_init+0xcc>)
    8282:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    8284:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    8286:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    8288:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    828a:	2900      	cmp	r1, #0
    828c:	d104      	bne.n	8298 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    828e:	0953      	lsrs	r3, r2, #5
    8290:	01db      	lsls	r3, r3, #7
    8292:	4928      	ldr	r1, [pc, #160]	; (8334 <nm_bus_init+0xd0>)
    8294:	468c      	mov	ip, r1
    8296:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8298:	211f      	movs	r1, #31
    829a:	4011      	ands	r1, r2
    829c:	2201      	movs	r2, #1
    829e:	0010      	movs	r0, r2
    82a0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    82a2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    82a4:	ac02      	add	r4, sp, #8
    82a6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    82a8:	2300      	movs	r3, #0
    82aa:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    82ac:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    82ae:	21c0      	movs	r1, #192	; 0xc0
    82b0:	0389      	lsls	r1, r1, #14
    82b2:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    82b4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    82b6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    82b8:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    82ba:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    82bc:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    82be:	3223      	adds	r2, #35	; 0x23
    82c0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    82c2:	3a18      	subs	r2, #24
    82c4:	2100      	movs	r1, #0
    82c6:	a808      	add	r0, sp, #32
    82c8:	4b1b      	ldr	r3, [pc, #108]	; (8338 <nm_bus_init+0xd4>)
    82ca:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    82cc:	4b1b      	ldr	r3, [pc, #108]	; (833c <nm_bus_init+0xd8>)
    82ce:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    82d0:	4b1b      	ldr	r3, [pc, #108]	; (8340 <nm_bus_init+0xdc>)
    82d2:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    82d4:	2301      	movs	r3, #1
    82d6:	425b      	negs	r3, r3
    82d8:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    82da:	4b1a      	ldr	r3, [pc, #104]	; (8344 <nm_bus_init+0xe0>)
    82dc:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    82de:	4b1a      	ldr	r3, [pc, #104]	; (8348 <nm_bus_init+0xe4>)
    82e0:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    82e2:	0022      	movs	r2, r4
    82e4:	4919      	ldr	r1, [pc, #100]	; (834c <nm_bus_init+0xe8>)
    82e6:	481a      	ldr	r0, [pc, #104]	; (8350 <nm_bus_init+0xec>)
    82e8:	4b1a      	ldr	r3, [pc, #104]	; (8354 <nm_bus_init+0xf0>)
    82ea:	4798      	blx	r3
    82ec:	2800      	cmp	r0, #0
    82ee:	d11a      	bne.n	8326 <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    82f0:	4d17      	ldr	r5, [pc, #92]	; (8350 <nm_bus_init+0xec>)
    82f2:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    82f4:	0020      	movs	r0, r4
    82f6:	4b18      	ldr	r3, [pc, #96]	; (8358 <nm_bus_init+0xf4>)
    82f8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    82fa:	231f      	movs	r3, #31
    82fc:	4018      	ands	r0, r3
    82fe:	3b1e      	subs	r3, #30
    8300:	4083      	lsls	r3, r0
    8302:	4a16      	ldr	r2, [pc, #88]	; (835c <nm_bus_init+0xf8>)
    8304:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8306:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    8308:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    830a:	2b00      	cmp	r3, #0
    830c:	d1fc      	bne.n	8308 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    830e:	6823      	ldr	r3, [r4, #0]
    8310:	2202      	movs	r2, #2
    8312:	4313      	orrs	r3, r2
    8314:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    8316:	4b12      	ldr	r3, [pc, #72]	; (8360 <nm_bus_init+0xfc>)
    8318:	4798      	blx	r3
	nm_bsp_sleep(1);
    831a:	2001      	movs	r0, #1
    831c:	4b11      	ldr	r3, [pc, #68]	; (8364 <nm_bus_init+0x100>)
    831e:	4798      	blx	r3
#endif
	return result;
    8320:	2000      	movs	r0, #0
}
    8322:	b011      	add	sp, #68	; 0x44
    8324:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    8326:	2006      	movs	r0, #6
    8328:	4240      	negs	r0, r0
    832a:	e7fa      	b.n	8322 <nm_bus_init+0xbe>
    832c:	200003f8 	.word	0x200003f8
    8330:	0000dc79 	.word	0x0000dc79
    8334:	41004400 	.word	0x41004400
    8338:	0001184f 	.word	0x0001184f
    833c:	000c0002 	.word	0x000c0002
    8340:	000d0002 	.word	0x000d0002
    8344:	000f0002 	.word	0x000f0002
    8348:	00b71b00 	.word	0x00b71b00
    834c:	42001000 	.word	0x42001000
    8350:	200003fc 	.word	0x200003fc
    8354:	0000e0e1 	.word	0x0000e0e1
    8358:	0000e051 	.word	0x0000e051
    835c:	e000e100 	.word	0xe000e100
    8360:	00008141 	.word	0x00008141
    8364:	00008129 	.word	0x00008129

00008368 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    8368:	b5f0      	push	{r4, r5, r6, r7, lr}
    836a:	46de      	mov	lr, fp
    836c:	4657      	mov	r7, sl
    836e:	464e      	mov	r6, r9
    8370:	4645      	mov	r5, r8
    8372:	b5e0      	push	{r5, r6, r7, lr}
    8374:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    8376:	2803      	cmp	r0, #3
    8378:	d000      	beq.n	837c <nm_bus_ioctl+0x14>
    837a:	e075      	b.n	8468 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    837c:	680e      	ldr	r6, [r1, #0]
    837e:	684d      	ldr	r5, [r1, #4]
    8380:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    8382:	2200      	movs	r2, #0
    8384:	466b      	mov	r3, sp
    8386:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    8388:	2d00      	cmp	r5, #0
    838a:	d027      	beq.n	83dc <nm_bus_ioctl+0x74>
    838c:	2c00      	cmp	r4, #0
    838e:	d065      	beq.n	845c <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    8390:	2e00      	cmp	r6, #0
    8392:	d100      	bne.n	8396 <nm_bus_ioctl+0x2e>
    8394:	e077      	b.n	8486 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    8396:	2300      	movs	r3, #0
    8398:	4698      	mov	r8, r3
    839a:	2300      	movs	r3, #0
    839c:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    839e:	2201      	movs	r2, #1
    83a0:	493b      	ldr	r1, [pc, #236]	; (8490 <nm_bus_ioctl+0x128>)
    83a2:	483c      	ldr	r0, [pc, #240]	; (8494 <nm_bus_ioctl+0x12c>)
    83a4:	4b3c      	ldr	r3, [pc, #240]	; (8498 <nm_bus_ioctl+0x130>)
    83a6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    83a8:	4b3a      	ldr	r3, [pc, #232]	; (8494 <nm_bus_ioctl+0x12c>)
    83aa:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    83ac:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    83ae:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    83b0:	4699      	mov	r9, r3
			pu8Miso++;
    83b2:	4659      	mov	r1, fp
    83b4:	424b      	negs	r3, r1
    83b6:	4159      	adcs	r1, r3
    83b8:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    83ba:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    83bc:	4653      	mov	r3, sl
    83be:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    83c0:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    83c2:	4239      	tst	r1, r7
    83c4:	d0fc      	beq.n	83c0 <nm_bus_ioctl+0x58>
    83c6:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    83c8:	4239      	tst	r1, r7
    83ca:	d0fc      	beq.n	83c6 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    83cc:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    83ce:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    83d0:	4211      	tst	r1, r2
    83d2:	d0fc      	beq.n	83ce <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    83d4:	4649      	mov	r1, r9
    83d6:	7989      	ldrb	r1, [r1, #6]
    83d8:	468c      	mov	ip, r1
    83da:	e011      	b.n	8400 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    83dc:	2e00      	cmp	r6, #0
    83de:	d03a      	beq.n	8456 <nm_bus_ioctl+0xee>
    83e0:	2c00      	cmp	r4, #0
    83e2:	d03e      	beq.n	8462 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    83e4:	2300      	movs	r3, #0
    83e6:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    83e8:	3301      	adds	r3, #1
    83ea:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    83ec:	466b      	mov	r3, sp
    83ee:	1ddd      	adds	r5, r3, #7
    83f0:	e7d5      	b.n	839e <nm_bus_ioctl+0x36>
    83f2:	4660      	mov	r0, ip
    83f4:	2801      	cmp	r0, #1
    83f6:	d00d      	beq.n	8414 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    83f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    83fa:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    83fc:	2900      	cmp	r1, #0
    83fe:	d00d      	beq.n	841c <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8400:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    8402:	4211      	tst	r1, r2
    8404:	d0fc      	beq.n	8400 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8406:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    8408:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    840a:	4210      	tst	r0, r2
    840c:	d0f1      	beq.n	83f2 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    840e:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    8410:	311e      	adds	r1, #30
    8412:	e7ee      	b.n	83f2 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    8414:	6a98      	ldr	r0, [r3, #40]	; 0x28
    8416:	05c0      	lsls	r0, r0, #23
    8418:	0dc0      	lsrs	r0, r0, #23
    841a:	e7ef      	b.n	83fc <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    841c:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    841e:	3c01      	subs	r4, #1
    8420:	b2a4      	uxth	r4, r4
			pu8Miso++;
    8422:	445d      	add	r5, fp
			pu8Mosi++;
    8424:	4643      	mov	r3, r8
    8426:	4259      	negs	r1, r3
    8428:	414b      	adcs	r3, r1
    842a:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    842c:	2c00      	cmp	r4, #0
    842e:	d1c4      	bne.n	83ba <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    8430:	4b18      	ldr	r3, [pc, #96]	; (8494 <nm_bus_ioctl+0x12c>)
    8432:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    8434:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    8436:	7e0b      	ldrb	r3, [r1, #24]
    8438:	4213      	tst	r3, r2
    843a:	d0fc      	beq.n	8436 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    843c:	2200      	movs	r2, #0
    843e:	4914      	ldr	r1, [pc, #80]	; (8490 <nm_bus_ioctl+0x128>)
    8440:	4814      	ldr	r0, [pc, #80]	; (8494 <nm_bus_ioctl+0x12c>)
    8442:	4b15      	ldr	r3, [pc, #84]	; (8498 <nm_bus_ioctl+0x130>)
    8444:	4798      	blx	r3
	return M2M_SUCCESS;
    8446:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    8448:	b003      	add	sp, #12
    844a:	bc3c      	pop	{r2, r3, r4, r5}
    844c:	4690      	mov	r8, r2
    844e:	4699      	mov	r9, r3
    8450:	46a2      	mov	sl, r4
    8452:	46ab      	mov	fp, r5
    8454:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    8456:	200f      	movs	r0, #15
    8458:	4240      	negs	r0, r0
    845a:	e7f5      	b.n	8448 <nm_bus_ioctl+0xe0>
    845c:	200f      	movs	r0, #15
    845e:	4240      	negs	r0, r0
    8460:	e7f2      	b.n	8448 <nm_bus_ioctl+0xe0>
    8462:	200f      	movs	r0, #15
    8464:	4240      	negs	r0, r0
		break;
    8466:	e7ef      	b.n	8448 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    8468:	220e      	movs	r2, #14
    846a:	32ff      	adds	r2, #255	; 0xff
    846c:	490b      	ldr	r1, [pc, #44]	; (849c <nm_bus_ioctl+0x134>)
    846e:	480c      	ldr	r0, [pc, #48]	; (84a0 <nm_bus_ioctl+0x138>)
    8470:	4b0c      	ldr	r3, [pc, #48]	; (84a4 <nm_bus_ioctl+0x13c>)
    8472:	4798      	blx	r3
    8474:	480c      	ldr	r0, [pc, #48]	; (84a8 <nm_bus_ioctl+0x140>)
    8476:	4b0d      	ldr	r3, [pc, #52]	; (84ac <nm_bus_ioctl+0x144>)
    8478:	4798      	blx	r3
    847a:	200d      	movs	r0, #13
    847c:	4b0c      	ldr	r3, [pc, #48]	; (84b0 <nm_bus_ioctl+0x148>)
    847e:	4798      	blx	r3
			s8Ret = -1;
    8480:	2001      	movs	r0, #1
    8482:	4240      	negs	r0, r0
	return s8Ret;
    8484:	e7e0      	b.n	8448 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    8486:	2301      	movs	r3, #1
    8488:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    848a:	466b      	mov	r3, sp
    848c:	1dde      	adds	r6, r3, #7
    848e:	e784      	b.n	839a <nm_bus_ioctl+0x32>
    8490:	200003f8 	.word	0x200003f8
    8494:	200003fc 	.word	0x200003fc
    8498:	0000e411 	.word	0x0000e411
    849c:	00012f2c 	.word	0x00012f2c
    84a0:	00012f3c 	.word	0x00012f3c
    84a4:	000119b1 	.word	0x000119b1
    84a8:	00012f50 	.word	0x00012f50
    84ac:	00011acd 	.word	0x00011acd
    84b0:	000119e5 	.word	0x000119e5

000084b4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    84b4:	b530      	push	{r4, r5, lr}
    84b6:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    84b8:	ab01      	add	r3, sp, #4
    84ba:	2200      	movs	r2, #0
    84bc:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    84be:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    84c0:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    84c2:	4d13      	ldr	r5, [pc, #76]	; (8510 <nm_bus_deinit+0x5c>)
    84c4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    84c6:	0020      	movs	r0, r4
    84c8:	4b12      	ldr	r3, [pc, #72]	; (8514 <nm_bus_deinit+0x60>)
    84ca:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    84cc:	231f      	movs	r3, #31
    84ce:	4018      	ands	r0, r3
    84d0:	3b1e      	subs	r3, #30
    84d2:	4083      	lsls	r3, r0
    84d4:	2280      	movs	r2, #128	; 0x80
    84d6:	4910      	ldr	r1, [pc, #64]	; (8518 <nm_bus_deinit+0x64>)
    84d8:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    84da:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    84dc:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    84de:	2b00      	cmp	r3, #0
    84e0:	d1fc      	bne.n	84dc <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    84e2:	338f      	adds	r3, #143	; 0x8f
    84e4:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    84e6:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    84e8:	6823      	ldr	r3, [r4, #0]
    84ea:	2202      	movs	r2, #2
    84ec:	4393      	bics	r3, r2
    84ee:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    84f0:	a901      	add	r1, sp, #4
    84f2:	200c      	movs	r0, #12
    84f4:	4c09      	ldr	r4, [pc, #36]	; (851c <nm_bus_deinit+0x68>)
    84f6:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    84f8:	a901      	add	r1, sp, #4
    84fa:	200f      	movs	r0, #15
    84fc:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    84fe:	a901      	add	r1, sp, #4
    8500:	200d      	movs	r0, #13
    8502:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    8504:	a901      	add	r1, sp, #4
    8506:	200e      	movs	r0, #14
    8508:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    850a:	2000      	movs	r0, #0
    850c:	b003      	add	sp, #12
    850e:	bd30      	pop	{r4, r5, pc}
    8510:	200003fc 	.word	0x200003fc
    8514:	0000e051 	.word	0x0000e051
    8518:	e000e100 	.word	0xe000e100
    851c:	0000dc79 	.word	0x0000dc79

00008520 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    8520:	2a00      	cmp	r2, #0
    8522:	d006      	beq.n	8532 <m2m_memcpy+0x12>
    8524:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    8526:	780b      	ldrb	r3, [r1, #0]
    8528:	7003      	strb	r3, [r0, #0]
		pDst++;
    852a:	3001      	adds	r0, #1
		pSrc++;
    852c:	3101      	adds	r1, #1
	}while(--sz);
    852e:	4290      	cmp	r0, r2
    8530:	d1f9      	bne.n	8526 <m2m_memcpy+0x6>
}
    8532:	4770      	bx	lr

00008534 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    8534:	2a00      	cmp	r2, #0
    8536:	d004      	beq.n	8542 <m2m_memset+0xe>
    8538:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    853a:	7001      	strb	r1, [r0, #0]
		pBuf++;
    853c:	3001      	adds	r0, #1
	}while(--sz);
    853e:	4290      	cmp	r0, r2
    8540:	d1fb      	bne.n	853a <m2m_memset+0x6>
}
    8542:	4770      	bx	lr

00008544 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    8544:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    8546:	7802      	ldrb	r2, [r0, #0]
    8548:	2a00      	cmp	r2, #0
    854a:	d007      	beq.n	855c <m2m_strlen+0x18>
    854c:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    854e:	3001      	adds	r0, #1
    8550:	b280      	uxth	r0, r0
		pcStr++;
    8552:	3301      	adds	r3, #1
	while(*pcStr)
    8554:	781a      	ldrb	r2, [r3, #0]
    8556:	2a00      	cmp	r2, #0
    8558:	d1f9      	bne.n	854e <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    855a:	4770      	bx	lr
	uint16	u16StrLen = 0;
    855c:	2000      	movs	r0, #0
    855e:	e7fc      	b.n	855a <m2m_strlen+0x16>

00008560 <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    8560:	4a02      	ldr	r2, [pc, #8]	; (856c <isr+0xc>)
    8562:	78d3      	ldrb	r3, [r2, #3]
    8564:	3301      	adds	r3, #1
    8566:	b2db      	uxtb	r3, r3
    8568:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    856a:	4770      	bx	lr
    856c:	20000438 	.word	0x20000438

00008570 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    8570:	4770      	bx	lr
	...

00008574 <hif_set_rx_done>:
{
    8574:	b500      	push	{lr}
    8576:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    8578:	2200      	movs	r2, #0
    857a:	4b0a      	ldr	r3, [pc, #40]	; (85a4 <hif_set_rx_done+0x30>)
    857c:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    857e:	2001      	movs	r0, #1
    8580:	4b09      	ldr	r3, [pc, #36]	; (85a8 <hif_set_rx_done+0x34>)
    8582:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    8584:	a901      	add	r1, sp, #4
    8586:	4809      	ldr	r0, [pc, #36]	; (85ac <hif_set_rx_done+0x38>)
    8588:	4b09      	ldr	r3, [pc, #36]	; (85b0 <hif_set_rx_done+0x3c>)
    858a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    858c:	2800      	cmp	r0, #0
    858e:	d001      	beq.n	8594 <hif_set_rx_done+0x20>
}
    8590:	b003      	add	sp, #12
    8592:	bd00      	pop	{pc}
	reg |= NBIT1;
    8594:	2102      	movs	r1, #2
    8596:	9b01      	ldr	r3, [sp, #4]
    8598:	4319      	orrs	r1, r3
    859a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    859c:	4803      	ldr	r0, [pc, #12]	; (85ac <hif_set_rx_done+0x38>)
    859e:	4b05      	ldr	r3, [pc, #20]	; (85b4 <hif_set_rx_done+0x40>)
    85a0:	4798      	blx	r3
    85a2:	e7f5      	b.n	8590 <hif_set_rx_done+0x1c>
    85a4:	20000438 	.word	0x20000438
    85a8:	00008241 	.word	0x00008241
    85ac:	00001070 	.word	0x00001070
    85b0:	000099bd 	.word	0x000099bd
    85b4:	000099c9 	.word	0x000099c9

000085b8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    85b8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    85ba:	4b0c      	ldr	r3, [pc, #48]	; (85ec <hif_chip_wake+0x34>)
    85bc:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    85be:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    85c0:	2b00      	cmp	r3, #0
    85c2:	d10d      	bne.n	85e0 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    85c4:	4b09      	ldr	r3, [pc, #36]	; (85ec <hif_chip_wake+0x34>)
    85c6:	785b      	ldrb	r3, [r3, #1]
    85c8:	2b00      	cmp	r3, #0
    85ca:	d103      	bne.n	85d4 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    85cc:	4b07      	ldr	r3, [pc, #28]	; (85ec <hif_chip_wake+0x34>)
    85ce:	781b      	ldrb	r3, [r3, #0]
    85d0:	2b00      	cmp	r3, #0
    85d2:	d106      	bne.n	85e2 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    85d4:	4a05      	ldr	r2, [pc, #20]	; (85ec <hif_chip_wake+0x34>)
    85d6:	7853      	ldrb	r3, [r2, #1]
    85d8:	3301      	adds	r3, #1
    85da:	b2db      	uxtb	r3, r3
    85dc:	7053      	strb	r3, [r2, #1]
    85de:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    85e0:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    85e2:	4b03      	ldr	r3, [pc, #12]	; (85f0 <hif_chip_wake+0x38>)
    85e4:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    85e6:	2800      	cmp	r0, #0
    85e8:	d0f4      	beq.n	85d4 <hif_chip_wake+0x1c>
    85ea:	e7f9      	b.n	85e0 <hif_chip_wake+0x28>
    85ec:	20000438 	.word	0x20000438
    85f0:	000096a5 	.word	0x000096a5

000085f4 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    85f4:	4b05      	ldr	r3, [pc, #20]	; (860c <hif_chip_sleep_sc+0x18>)
    85f6:	785b      	ldrb	r3, [r3, #1]
    85f8:	2b00      	cmp	r3, #0
    85fa:	d004      	beq.n	8606 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    85fc:	4a03      	ldr	r2, [pc, #12]	; (860c <hif_chip_sleep_sc+0x18>)
    85fe:	7853      	ldrb	r3, [r2, #1]
    8600:	3b01      	subs	r3, #1
    8602:	b2db      	uxtb	r3, r3
    8604:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    8606:	2000      	movs	r0, #0
    8608:	4770      	bx	lr
    860a:	46c0      	nop			; (mov r8, r8)
    860c:	20000438 	.word	0x20000438

00008610 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    8610:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    8612:	4b0b      	ldr	r3, [pc, #44]	; (8640 <hif_chip_sleep+0x30>)
    8614:	785b      	ldrb	r3, [r3, #1]
    8616:	2b00      	cmp	r3, #0
    8618:	d004      	beq.n	8624 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    861a:	4a09      	ldr	r2, [pc, #36]	; (8640 <hif_chip_sleep+0x30>)
    861c:	7853      	ldrb	r3, [r2, #1]
    861e:	3b01      	subs	r3, #1
    8620:	b2db      	uxtb	r3, r3
    8622:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    8624:	4b06      	ldr	r3, [pc, #24]	; (8640 <hif_chip_sleep+0x30>)
    8626:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    8628:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    862a:	2b00      	cmp	r3, #0
    862c:	d103      	bne.n	8636 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    862e:	4b04      	ldr	r3, [pc, #16]	; (8640 <hif_chip_sleep+0x30>)
    8630:	781b      	ldrb	r3, [r3, #0]
    8632:	2b00      	cmp	r3, #0
    8634:	d100      	bne.n	8638 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    8636:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    8638:	4b02      	ldr	r3, [pc, #8]	; (8644 <hif_chip_sleep+0x34>)
    863a:	4798      	blx	r3
    863c:	e7fb      	b.n	8636 <hif_chip_sleep+0x26>
    863e:	46c0      	nop			; (mov r8, r8)
    8640:	20000438 	.word	0x20000438
    8644:	0000963d 	.word	0x0000963d

00008648 <hif_deinit>:
*    @param [in]	arg
*				Pointer to the arguments.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_deinit(void * arg)
{
    8648:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    864a:	4b05      	ldr	r3, [pc, #20]	; (8660 <hif_deinit+0x18>)
    864c:	4798      	blx	r3
    864e:	0004      	movs	r4, r0
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    8650:	2228      	movs	r2, #40	; 0x28
    8652:	2100      	movs	r1, #0
    8654:	4803      	ldr	r0, [pc, #12]	; (8664 <hif_deinit+0x1c>)
    8656:	4b04      	ldr	r3, [pc, #16]	; (8668 <hif_deinit+0x20>)
    8658:	4798      	blx	r3
	return ret;
}
    865a:	0020      	movs	r0, r4
    865c:	bd10      	pop	{r4, pc}
    865e:	46c0      	nop			; (mov r8, r8)
    8660:	000085b9 	.word	0x000085b9
    8664:	20000438 	.word	0x20000438
    8668:	00008535 	.word	0x00008535

0000866c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    866c:	b5f0      	push	{r4, r5, r6, r7, lr}
    866e:	46de      	mov	lr, fp
    8670:	4657      	mov	r7, sl
    8672:	b580      	push	{r7, lr}
    8674:	b089      	sub	sp, #36	; 0x24
    8676:	4683      	mov	fp, r0
    8678:	468a      	mov	sl, r1
    867a:	9201      	str	r2, [sp, #4]
    867c:	9300      	str	r3, [sp, #0]
    867e:	ab10      	add	r3, sp, #64	; 0x40
    8680:	cb80      	ldmia	r3!, {r7}
    8682:	881e      	ldrh	r6, [r3, #0]
    8684:	ab12      	add	r3, sp, #72	; 0x48
    8686:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    8688:	227f      	movs	r2, #127	; 0x7f
    868a:	400a      	ands	r2, r1
    868c:	ab07      	add	r3, sp, #28
    868e:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    8690:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    8692:	2208      	movs	r2, #8
    8694:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    8696:	2f00      	cmp	r7, #0
    8698:	d03d      	beq.n	8716 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    869a:	885a      	ldrh	r2, [r3, #2]
    869c:	1992      	adds	r2, r2, r6
    869e:	18aa      	adds	r2, r5, r2
    86a0:	b292      	uxth	r2, r2
    86a2:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    86a4:	4b69      	ldr	r3, [pc, #420]	; (884c <hif_send+0x1e0>)
    86a6:	4798      	blx	r3
    86a8:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    86aa:	d000      	beq.n	86ae <hif_send+0x42>
    86ac:	e0c1      	b.n	8832 <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    86ae:	2300      	movs	r3, #0
    86b0:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    86b2:	aa02      	add	r2, sp, #8
    86b4:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    86b6:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    86b8:	9b04      	ldr	r3, [sp, #16]
    86ba:	465a      	mov	r2, fp
    86bc:	431a      	orrs	r2, r3
    86be:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    86c0:	9a04      	ldr	r2, [sp, #16]
    86c2:	4653      	mov	r3, sl
    86c4:	021b      	lsls	r3, r3, #8
    86c6:	4313      	orrs	r3, r2
    86c8:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    86ca:	ab07      	add	r3, sp, #28
    86cc:	885b      	ldrh	r3, [r3, #2]
    86ce:	9a04      	ldr	r2, [sp, #16]
    86d0:	041b      	lsls	r3, r3, #16
    86d2:	4313      	orrs	r3, r2
    86d4:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    86d6:	9904      	ldr	r1, [sp, #16]
    86d8:	485d      	ldr	r0, [pc, #372]	; (8850 <hif_send+0x1e4>)
    86da:	4b5e      	ldr	r3, [pc, #376]	; (8854 <hif_send+0x1e8>)
    86dc:	4798      	blx	r3
    86de:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    86e0:	d157      	bne.n	8792 <hif_send+0x126>

		reg = 0UL;
    86e2:	2300      	movs	r3, #0
    86e4:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    86e6:	9b04      	ldr	r3, [sp, #16]
    86e8:	2202      	movs	r2, #2
    86ea:	4313      	orrs	r3, r2
    86ec:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    86ee:	9904      	ldr	r1, [sp, #16]
    86f0:	4859      	ldr	r0, [pc, #356]	; (8858 <hif_send+0x1ec>)
    86f2:	4b58      	ldr	r3, [pc, #352]	; (8854 <hif_send+0x1e8>)
    86f4:	4798      	blx	r3
    86f6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    86f8:	d14b      	bne.n	8792 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    86fa:	2200      	movs	r2, #0
    86fc:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    86fe:	ab02      	add	r3, sp, #8
    8700:	80da      	strh	r2, [r3, #6]
    8702:	3306      	adds	r3, #6
    8704:	881b      	ldrh	r3, [r3, #0]
    8706:	b29b      	uxth	r3, r3
    8708:	4a54      	ldr	r2, [pc, #336]	; (885c <hif_send+0x1f0>)
    870a:	4293      	cmp	r3, r2
    870c:	d849      	bhi.n	87a2 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    870e:	4c54      	ldr	r4, [pc, #336]	; (8860 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    8710:	4b54      	ldr	r3, [pc, #336]	; (8864 <hif_send+0x1f8>)
    8712:	469a      	mov	sl, r3
    8714:	e017      	b.n	8746 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    8716:	ab07      	add	r3, sp, #28
    8718:	885a      	ldrh	r2, [r3, #2]
    871a:	9900      	ldr	r1, [sp, #0]
    871c:	468c      	mov	ip, r1
    871e:	4462      	add	r2, ip
    8720:	b292      	uxth	r2, r2
    8722:	805a      	strh	r2, [r3, #2]
    8724:	e7be      	b.n	86a4 <hif_send+0x38>
				nm_bsp_sleep(1);
    8726:	2001      	movs	r0, #1
    8728:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    872a:	9b04      	ldr	r3, [sp, #16]
    872c:	079b      	lsls	r3, r3, #30
    872e:	d528      	bpl.n	8782 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    8730:	ab02      	add	r3, sp, #8
    8732:	88da      	ldrh	r2, [r3, #6]
    8734:	3201      	adds	r2, #1
    8736:	b292      	uxth	r2, r2
    8738:	80da      	strh	r2, [r3, #6]
    873a:	3306      	adds	r3, #6
    873c:	881b      	ldrh	r3, [r3, #0]
    873e:	b29b      	uxth	r3, r3
    8740:	4a46      	ldr	r2, [pc, #280]	; (885c <hif_send+0x1f0>)
    8742:	4293      	cmp	r3, r2
    8744:	d82d      	bhi.n	87a2 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    8746:	a904      	add	r1, sp, #16
    8748:	4843      	ldr	r0, [pc, #268]	; (8858 <hif_send+0x1ec>)
    874a:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    874c:	2800      	cmp	r0, #0
    874e:	d128      	bne.n	87a2 <hif_send+0x136>
			if(cnt >= 500) {
    8750:	ab02      	add	r3, sp, #8
    8752:	3306      	adds	r3, #6
    8754:	881b      	ldrh	r3, [r3, #0]
    8756:	b29b      	uxth	r3, r3
    8758:	22f4      	movs	r2, #244	; 0xf4
    875a:	32ff      	adds	r2, #255	; 0xff
    875c:	4293      	cmp	r3, r2
    875e:	d9e4      	bls.n	872a <hif_send+0xbe>
				if(cnt < 501) {
    8760:	ab02      	add	r3, sp, #8
    8762:	3306      	adds	r3, #6
    8764:	881b      	ldrh	r3, [r3, #0]
    8766:	b29b      	uxth	r3, r3
    8768:	3201      	adds	r2, #1
    876a:	4293      	cmp	r3, r2
    876c:	d8db      	bhi.n	8726 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    876e:	483e      	ldr	r0, [pc, #248]	; (8868 <hif_send+0x1fc>)
    8770:	4b3e      	ldr	r3, [pc, #248]	; (886c <hif_send+0x200>)
    8772:	4798      	blx	r3
    8774:	483e      	ldr	r0, [pc, #248]	; (8870 <hif_send+0x204>)
    8776:	4b3f      	ldr	r3, [pc, #252]	; (8874 <hif_send+0x208>)
    8778:	4798      	blx	r3
    877a:	200d      	movs	r0, #13
    877c:	4b3e      	ldr	r3, [pc, #248]	; (8878 <hif_send+0x20c>)
    877e:	4798      	blx	r3
    8780:	e7d1      	b.n	8726 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    8782:	a905      	add	r1, sp, #20
    8784:	483d      	ldr	r0, [pc, #244]	; (887c <hif_send+0x210>)
    8786:	4b36      	ldr	r3, [pc, #216]	; (8860 <hif_send+0x1f4>)
    8788:	4798      	blx	r3
    878a:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    878c:	d009      	beq.n	87a2 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    878e:	2300      	movs	r3, #0
    8790:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    8792:	4b3b      	ldr	r3, [pc, #236]	; (8880 <hif_send+0x214>)
    8794:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    8796:	0020      	movs	r0, r4
    8798:	b009      	add	sp, #36	; 0x24
    879a:	bc0c      	pop	{r2, r3}
    879c:	4692      	mov	sl, r2
    879e:	469b      	mov	fp, r3
    87a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    87a2:	9b05      	ldr	r3, [sp, #20]
    87a4:	2b00      	cmp	r3, #0
    87a6:	d03f      	beq.n	8828 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    87a8:	9b05      	ldr	r3, [sp, #20]
    87aa:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    87ac:	a907      	add	r1, sp, #28
    87ae:	884b      	ldrh	r3, [r1, #2]
    87b0:	b29b      	uxth	r3, r3
    87b2:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    87b4:	9806      	ldr	r0, [sp, #24]
    87b6:	2208      	movs	r2, #8
    87b8:	4b32      	ldr	r3, [pc, #200]	; (8884 <hif_send+0x218>)
    87ba:	4798      	blx	r3
    87bc:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    87be:	d1e8      	bne.n	8792 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    87c0:	9b06      	ldr	r3, [sp, #24]
    87c2:	3308      	adds	r3, #8
    87c4:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    87c6:	9b01      	ldr	r3, [sp, #4]
    87c8:	2b00      	cmp	r3, #0
    87ca:	d00b      	beq.n	87e4 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    87cc:	9806      	ldr	r0, [sp, #24]
    87ce:	9a00      	ldr	r2, [sp, #0]
    87d0:	0019      	movs	r1, r3
    87d2:	4b2c      	ldr	r3, [pc, #176]	; (8884 <hif_send+0x218>)
    87d4:	4798      	blx	r3
    87d6:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    87d8:	d1db      	bne.n	8792 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    87da:	9b06      	ldr	r3, [sp, #24]
    87dc:	9a00      	ldr	r2, [sp, #0]
    87de:	4694      	mov	ip, r2
    87e0:	4463      	add	r3, ip
    87e2:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    87e4:	2f00      	cmp	r7, #0
    87e6:	d00e      	beq.n	8806 <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    87e8:	9b06      	ldr	r3, [sp, #24]
    87ea:	9a00      	ldr	r2, [sp, #0]
    87ec:	1aad      	subs	r5, r5, r2
    87ee:	18ed      	adds	r5, r5, r3
    87f0:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    87f2:	9806      	ldr	r0, [sp, #24]
    87f4:	0032      	movs	r2, r6
    87f6:	0039      	movs	r1, r7
    87f8:	4b22      	ldr	r3, [pc, #136]	; (8884 <hif_send+0x218>)
    87fa:	4798      	blx	r3
    87fc:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    87fe:	d1c8      	bne.n	8792 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    8800:	9b06      	ldr	r3, [sp, #24]
    8802:	18f3      	adds	r3, r6, r3
    8804:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    8806:	9b05      	ldr	r3, [sp, #20]
    8808:	009b      	lsls	r3, r3, #2
    880a:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    880c:	9b04      	ldr	r3, [sp, #16]
    880e:	2202      	movs	r2, #2
    8810:	4313      	orrs	r3, r2
    8812:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    8814:	9904      	ldr	r1, [sp, #16]
    8816:	481c      	ldr	r0, [pc, #112]	; (8888 <hif_send+0x21c>)
    8818:	4b0e      	ldr	r3, [pc, #56]	; (8854 <hif_send+0x1e8>)
    881a:	4798      	blx	r3
    881c:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    881e:	d1b8      	bne.n	8792 <hif_send+0x126>
 	ret = hif_chip_sleep();
    8820:	4b1a      	ldr	r3, [pc, #104]	; (888c <hif_send+0x220>)
    8822:	4798      	blx	r3
    8824:	0004      	movs	r4, r0
	return ret;
    8826:	e7b6      	b.n	8796 <hif_send+0x12a>
			ret = hif_chip_sleep();
    8828:	4b18      	ldr	r3, [pc, #96]	; (888c <hif_send+0x220>)
    882a:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    882c:	2403      	movs	r4, #3
    882e:	4264      	negs	r4, r4
			goto ERR2;
    8830:	e7b1      	b.n	8796 <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    8832:	22cb      	movs	r2, #203	; 0xcb
    8834:	0052      	lsls	r2, r2, #1
    8836:	4916      	ldr	r1, [pc, #88]	; (8890 <hif_send+0x224>)
    8838:	4816      	ldr	r0, [pc, #88]	; (8894 <hif_send+0x228>)
    883a:	4b0c      	ldr	r3, [pc, #48]	; (886c <hif_send+0x200>)
    883c:	4798      	blx	r3
    883e:	4816      	ldr	r0, [pc, #88]	; (8898 <hif_send+0x22c>)
    8840:	4b0c      	ldr	r3, [pc, #48]	; (8874 <hif_send+0x208>)
    8842:	4798      	blx	r3
    8844:	200d      	movs	r0, #13
    8846:	4b0c      	ldr	r3, [pc, #48]	; (8878 <hif_send+0x20c>)
    8848:	4798      	blx	r3
		goto ERR2;
    884a:	e7a4      	b.n	8796 <hif_send+0x12a>
    884c:	000085b9 	.word	0x000085b9
    8850:	0000108c 	.word	0x0000108c
    8854:	000099c9 	.word	0x000099c9
    8858:	00001078 	.word	0x00001078
    885c:	000003e7 	.word	0x000003e7
    8860:	000099bd 	.word	0x000099bd
    8864:	00008129 	.word	0x00008129
    8868:	0001326c 	.word	0x0001326c
    886c:	000119b1 	.word	0x000119b1
    8870:	00013278 	.word	0x00013278
    8874:	00011acd 	.word	0x00011acd
    8878:	000119e5 	.word	0x000119e5
    887c:	00150400 	.word	0x00150400
    8880:	000085f5 	.word	0x000085f5
    8884:	00009a3d 	.word	0x00009a3d
    8888:	0000106c 	.word	0x0000106c
    888c:	00008611 	.word	0x00008611
    8890:	00012f84 	.word	0x00012f84
    8894:	00012f3c 	.word	0x00012f3c
    8898:	00013288 	.word	0x00013288

0000889c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    889c:	b5f0      	push	{r4, r5, r6, r7, lr}
    889e:	46ce      	mov	lr, r9
    88a0:	4647      	mov	r7, r8
    88a2:	b580      	push	{r7, lr}
    88a4:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    88a6:	4bcf      	ldr	r3, [pc, #828]	; (8be4 <hif_handle_isr+0x348>)
    88a8:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    88aa:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    88ac:	e080      	b.n	89b0 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    88ae:	4bcd      	ldr	r3, [pc, #820]	; (8be4 <hif_handle_isr+0x348>)
    88b0:	9a05      	ldr	r2, [sp, #20]
    88b2:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    88b4:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    88b6:	af04      	add	r7, sp, #16
    88b8:	2204      	movs	r2, #4
    88ba:	0039      	movs	r1, r7
    88bc:	9805      	ldr	r0, [sp, #20]
    88be:	4bca      	ldr	r3, [pc, #808]	; (8be8 <hif_handle_isr+0x34c>)
    88c0:	4798      	blx	r3
    88c2:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    88c4:	887b      	ldrh	r3, [r7, #2]
    88c6:	b29b      	uxth	r3, r3
    88c8:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    88ca:	2800      	cmp	r0, #0
    88cc:	d133      	bne.n	8936 <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    88ce:	ab04      	add	r3, sp, #16
    88d0:	885b      	ldrh	r3, [r3, #2]
    88d2:	b29b      	uxth	r3, r3
    88d4:	429d      	cmp	r5, r3
    88d6:	d004      	beq.n	88e2 <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    88d8:	ab04      	add	r3, sp, #16
    88da:	885b      	ldrh	r3, [r3, #2]
    88dc:	1aeb      	subs	r3, r5, r3
    88de:	2b04      	cmp	r3, #4
    88e0:	dc39      	bgt.n	8956 <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    88e2:	ab04      	add	r3, sp, #16
    88e4:	781b      	ldrb	r3, [r3, #0]
    88e6:	2b01      	cmp	r3, #1
    88e8:	d04e      	beq.n	8988 <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    88ea:	ab04      	add	r3, sp, #16
    88ec:	781b      	ldrb	r3, [r3, #0]
    88ee:	2b02      	cmp	r3, #2
    88f0:	d078      	beq.n	89e4 <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    88f2:	ab04      	add	r3, sp, #16
    88f4:	781b      	ldrb	r3, [r3, #0]
    88f6:	2b04      	cmp	r3, #4
    88f8:	d100      	bne.n	88fc <hif_handle_isr+0x60>
    88fa:	e090      	b.n	8a1e <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    88fc:	ab04      	add	r3, sp, #16
    88fe:	781b      	ldrb	r3, [r3, #0]
    8900:	2b06      	cmp	r3, #6
    8902:	d100      	bne.n	8906 <hif_handle_isr+0x6a>
    8904:	e0a8      	b.n	8a58 <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    8906:	ab04      	add	r3, sp, #16
    8908:	781b      	ldrb	r3, [r3, #0]
    890a:	2b07      	cmp	r3, #7
    890c:	d100      	bne.n	8910 <hif_handle_isr+0x74>
    890e:	e0bf      	b.n	8a90 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    8910:	ab04      	add	r3, sp, #16
    8912:	781b      	ldrb	r3, [r3, #0]
    8914:	2b05      	cmp	r3, #5
    8916:	d100      	bne.n	891a <hif_handle_isr+0x7e>
    8918:	e0d6      	b.n	8ac8 <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    891a:	4ab4      	ldr	r2, [pc, #720]	; (8bec <hif_handle_isr+0x350>)
    891c:	49b4      	ldr	r1, [pc, #720]	; (8bf0 <hif_handle_isr+0x354>)
    891e:	48b5      	ldr	r0, [pc, #724]	; (8bf4 <hif_handle_isr+0x358>)
    8920:	4bb5      	ldr	r3, [pc, #724]	; (8bf8 <hif_handle_isr+0x35c>)
    8922:	4798      	blx	r3
    8924:	48b5      	ldr	r0, [pc, #724]	; (8bfc <hif_handle_isr+0x360>)
    8926:	4bb6      	ldr	r3, [pc, #728]	; (8c00 <hif_handle_isr+0x364>)
    8928:	4798      	blx	r3
    892a:	200d      	movs	r0, #13
    892c:	4bb5      	ldr	r3, [pc, #724]	; (8c04 <hif_handle_isr+0x368>)
    892e:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    8930:	2406      	movs	r4, #6
    8932:	4264      	negs	r4, r4
    8934:	e116      	b.n	8b64 <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    8936:	22d2      	movs	r2, #210	; 0xd2
    8938:	32ff      	adds	r2, #255	; 0xff
    893a:	49ad      	ldr	r1, [pc, #692]	; (8bf0 <hif_handle_isr+0x354>)
    893c:	48ad      	ldr	r0, [pc, #692]	; (8bf4 <hif_handle_isr+0x358>)
    893e:	4bae      	ldr	r3, [pc, #696]	; (8bf8 <hif_handle_isr+0x35c>)
    8940:	4798      	blx	r3
    8942:	48b1      	ldr	r0, [pc, #708]	; (8c08 <hif_handle_isr+0x36c>)
    8944:	4bae      	ldr	r3, [pc, #696]	; (8c00 <hif_handle_isr+0x364>)
    8946:	4798      	blx	r3
    8948:	200d      	movs	r0, #13
    894a:	4bae      	ldr	r3, [pc, #696]	; (8c04 <hif_handle_isr+0x368>)
    894c:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    894e:	2001      	movs	r0, #1
    8950:	4bae      	ldr	r3, [pc, #696]	; (8c0c <hif_handle_isr+0x370>)
    8952:	4798      	blx	r3
    8954:	e106      	b.n	8b64 <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    8956:	22ed      	movs	r2, #237	; 0xed
    8958:	0052      	lsls	r2, r2, #1
    895a:	49a5      	ldr	r1, [pc, #660]	; (8bf0 <hif_handle_isr+0x354>)
    895c:	48a5      	ldr	r0, [pc, #660]	; (8bf4 <hif_handle_isr+0x358>)
    895e:	4ca6      	ldr	r4, [pc, #664]	; (8bf8 <hif_handle_isr+0x35c>)
    8960:	47a0      	blx	r4
    8962:	a904      	add	r1, sp, #16
    8964:	884a      	ldrh	r2, [r1, #2]
    8966:	b292      	uxth	r2, r2
    8968:	780b      	ldrb	r3, [r1, #0]
    896a:	b2db      	uxtb	r3, r3
    896c:	7849      	ldrb	r1, [r1, #1]
    896e:	9100      	str	r1, [sp, #0]
    8970:	0029      	movs	r1, r5
    8972:	48a7      	ldr	r0, [pc, #668]	; (8c10 <hif_handle_isr+0x374>)
    8974:	47a0      	blx	r4
    8976:	200d      	movs	r0, #13
    8978:	4ba2      	ldr	r3, [pc, #648]	; (8c04 <hif_handle_isr+0x368>)
    897a:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    897c:	2001      	movs	r0, #1
    897e:	4ba3      	ldr	r3, [pc, #652]	; (8c0c <hif_handle_isr+0x370>)
    8980:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    8982:	2406      	movs	r4, #6
    8984:	4264      	negs	r4, r4
    8986:	e0ed      	b.n	8b64 <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    8988:	4b96      	ldr	r3, [pc, #600]	; (8be4 <hif_handle_isr+0x348>)
    898a:	68db      	ldr	r3, [r3, #12]
    898c:	2b00      	cmp	r3, #0
    898e:	d01c      	beq.n	89ca <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    8990:	4b94      	ldr	r3, [pc, #592]	; (8be4 <hif_handle_isr+0x348>)
    8992:	68db      	ldr	r3, [r3, #12]
    8994:	aa04      	add	r2, sp, #16
    8996:	7850      	ldrb	r0, [r2, #1]
    8998:	b2c0      	uxtb	r0, r0
    899a:	8851      	ldrh	r1, [r2, #2]
    899c:	9a05      	ldr	r2, [sp, #20]
    899e:	3208      	adds	r2, #8
    89a0:	3908      	subs	r1, #8
    89a2:	b289      	uxth	r1, r1
    89a4:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    89a6:	4b8f      	ldr	r3, [pc, #572]	; (8be4 <hif_handle_isr+0x348>)
    89a8:	789b      	ldrb	r3, [r3, #2]
    89aa:	2b00      	cmp	r3, #0
    89ac:	d000      	beq.n	89b0 <hif_handle_isr+0x114>
    89ae:	e09c      	b.n	8aea <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    89b0:	4643      	mov	r3, r8
    89b2:	78db      	ldrb	r3, [r3, #3]
    89b4:	2b00      	cmp	r3, #0
    89b6:	d100      	bne.n	89ba <hif_handle_isr+0x11e>
    89b8:	e158      	b.n	8c6c <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    89ba:	464b      	mov	r3, r9
    89bc:	78db      	ldrb	r3, [r3, #3]
    89be:	3b01      	subs	r3, #1
    89c0:	b2db      	uxtb	r3, r3
    89c2:	464a      	mov	r2, r9
    89c4:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    89c6:	4e93      	ldr	r6, [pc, #588]	; (8c14 <hif_handle_isr+0x378>)
    89c8:	e0d7      	b.n	8b7a <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    89ca:	22f3      	movs	r2, #243	; 0xf3
    89cc:	0052      	lsls	r2, r2, #1
    89ce:	4988      	ldr	r1, [pc, #544]	; (8bf0 <hif_handle_isr+0x354>)
    89d0:	4888      	ldr	r0, [pc, #544]	; (8bf4 <hif_handle_isr+0x358>)
    89d2:	4b89      	ldr	r3, [pc, #548]	; (8bf8 <hif_handle_isr+0x35c>)
    89d4:	4798      	blx	r3
    89d6:	4890      	ldr	r0, [pc, #576]	; (8c18 <hif_handle_isr+0x37c>)
    89d8:	4b89      	ldr	r3, [pc, #548]	; (8c00 <hif_handle_isr+0x364>)
    89da:	4798      	blx	r3
    89dc:	200d      	movs	r0, #13
    89de:	4b89      	ldr	r3, [pc, #548]	; (8c04 <hif_handle_isr+0x368>)
    89e0:	4798      	blx	r3
    89e2:	e7e0      	b.n	89a6 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    89e4:	4b7f      	ldr	r3, [pc, #508]	; (8be4 <hif_handle_isr+0x348>)
    89e6:	691b      	ldr	r3, [r3, #16]
    89e8:	2b00      	cmp	r3, #0
    89ea:	d00b      	beq.n	8a04 <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    89ec:	4b7d      	ldr	r3, [pc, #500]	; (8be4 <hif_handle_isr+0x348>)
    89ee:	691b      	ldr	r3, [r3, #16]
    89f0:	aa04      	add	r2, sp, #16
    89f2:	7850      	ldrb	r0, [r2, #1]
    89f4:	b2c0      	uxtb	r0, r0
    89f6:	8851      	ldrh	r1, [r2, #2]
    89f8:	9a05      	ldr	r2, [sp, #20]
    89fa:	3208      	adds	r2, #8
    89fc:	3908      	subs	r1, #8
    89fe:	b289      	uxth	r1, r1
    8a00:	4798      	blx	r3
    8a02:	e7d0      	b.n	89a6 <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    8a04:	22f7      	movs	r2, #247	; 0xf7
    8a06:	0052      	lsls	r2, r2, #1
    8a08:	4979      	ldr	r1, [pc, #484]	; (8bf0 <hif_handle_isr+0x354>)
    8a0a:	487a      	ldr	r0, [pc, #488]	; (8bf4 <hif_handle_isr+0x358>)
    8a0c:	4b7a      	ldr	r3, [pc, #488]	; (8bf8 <hif_handle_isr+0x35c>)
    8a0e:	4798      	blx	r3
    8a10:	4882      	ldr	r0, [pc, #520]	; (8c1c <hif_handle_isr+0x380>)
    8a12:	4b7b      	ldr	r3, [pc, #492]	; (8c00 <hif_handle_isr+0x364>)
    8a14:	4798      	blx	r3
    8a16:	200d      	movs	r0, #13
    8a18:	4b7a      	ldr	r3, [pc, #488]	; (8c04 <hif_handle_isr+0x368>)
    8a1a:	4798      	blx	r3
    8a1c:	e7c3      	b.n	89a6 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    8a1e:	4b71      	ldr	r3, [pc, #452]	; (8be4 <hif_handle_isr+0x348>)
    8a20:	695b      	ldr	r3, [r3, #20]
    8a22:	2b00      	cmp	r3, #0
    8a24:	d00b      	beq.n	8a3e <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    8a26:	4b6f      	ldr	r3, [pc, #444]	; (8be4 <hif_handle_isr+0x348>)
    8a28:	695b      	ldr	r3, [r3, #20]
    8a2a:	aa04      	add	r2, sp, #16
    8a2c:	7850      	ldrb	r0, [r2, #1]
    8a2e:	b2c0      	uxtb	r0, r0
    8a30:	8851      	ldrh	r1, [r2, #2]
    8a32:	9a05      	ldr	r2, [sp, #20]
    8a34:	3208      	adds	r2, #8
    8a36:	3908      	subs	r1, #8
    8a38:	b289      	uxth	r1, r1
    8a3a:	4798      	blx	r3
    8a3c:	e7b3      	b.n	89a6 <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    8a3e:	22fb      	movs	r2, #251	; 0xfb
    8a40:	0052      	lsls	r2, r2, #1
    8a42:	496b      	ldr	r1, [pc, #428]	; (8bf0 <hif_handle_isr+0x354>)
    8a44:	486b      	ldr	r0, [pc, #428]	; (8bf4 <hif_handle_isr+0x358>)
    8a46:	4b6c      	ldr	r3, [pc, #432]	; (8bf8 <hif_handle_isr+0x35c>)
    8a48:	4798      	blx	r3
    8a4a:	4875      	ldr	r0, [pc, #468]	; (8c20 <hif_handle_isr+0x384>)
    8a4c:	4b6c      	ldr	r3, [pc, #432]	; (8c00 <hif_handle_isr+0x364>)
    8a4e:	4798      	blx	r3
    8a50:	200d      	movs	r0, #13
    8a52:	4b6c      	ldr	r3, [pc, #432]	; (8c04 <hif_handle_isr+0x368>)
    8a54:	4798      	blx	r3
    8a56:	e7a6      	b.n	89a6 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    8a58:	4b62      	ldr	r3, [pc, #392]	; (8be4 <hif_handle_isr+0x348>)
    8a5a:	6a1b      	ldr	r3, [r3, #32]
    8a5c:	2b00      	cmp	r3, #0
    8a5e:	d00b      	beq.n	8a78 <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    8a60:	4b60      	ldr	r3, [pc, #384]	; (8be4 <hif_handle_isr+0x348>)
    8a62:	6a1b      	ldr	r3, [r3, #32]
    8a64:	aa04      	add	r2, sp, #16
    8a66:	7850      	ldrb	r0, [r2, #1]
    8a68:	b2c0      	uxtb	r0, r0
    8a6a:	8851      	ldrh	r1, [r2, #2]
    8a6c:	9a05      	ldr	r2, [sp, #20]
    8a6e:	3208      	adds	r2, #8
    8a70:	3908      	subs	r1, #8
    8a72:	b289      	uxth	r1, r1
    8a74:	4798      	blx	r3
    8a76:	e796      	b.n	89a6 <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    8a78:	4a6a      	ldr	r2, [pc, #424]	; (8c24 <hif_handle_isr+0x388>)
    8a7a:	495d      	ldr	r1, [pc, #372]	; (8bf0 <hif_handle_isr+0x354>)
    8a7c:	485d      	ldr	r0, [pc, #372]	; (8bf4 <hif_handle_isr+0x358>)
    8a7e:	4b5e      	ldr	r3, [pc, #376]	; (8bf8 <hif_handle_isr+0x35c>)
    8a80:	4798      	blx	r3
    8a82:	4869      	ldr	r0, [pc, #420]	; (8c28 <hif_handle_isr+0x38c>)
    8a84:	4b5e      	ldr	r3, [pc, #376]	; (8c00 <hif_handle_isr+0x364>)
    8a86:	4798      	blx	r3
    8a88:	200d      	movs	r0, #13
    8a8a:	4b5e      	ldr	r3, [pc, #376]	; (8c04 <hif_handle_isr+0x368>)
    8a8c:	4798      	blx	r3
    8a8e:	e78a      	b.n	89a6 <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    8a90:	4b54      	ldr	r3, [pc, #336]	; (8be4 <hif_handle_isr+0x348>)
    8a92:	699b      	ldr	r3, [r3, #24]
    8a94:	2b00      	cmp	r3, #0
    8a96:	d00b      	beq.n	8ab0 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    8a98:	4b52      	ldr	r3, [pc, #328]	; (8be4 <hif_handle_isr+0x348>)
    8a9a:	699b      	ldr	r3, [r3, #24]
    8a9c:	aa04      	add	r2, sp, #16
    8a9e:	7850      	ldrb	r0, [r2, #1]
    8aa0:	b2c0      	uxtb	r0, r0
    8aa2:	8851      	ldrh	r1, [r2, #2]
    8aa4:	9a05      	ldr	r2, [sp, #20]
    8aa6:	3208      	adds	r2, #8
    8aa8:	3908      	subs	r1, #8
    8aaa:	b289      	uxth	r1, r1
    8aac:	4798      	blx	r3
    8aae:	e77a      	b.n	89a6 <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    8ab0:	4a5e      	ldr	r2, [pc, #376]	; (8c2c <hif_handle_isr+0x390>)
    8ab2:	494f      	ldr	r1, [pc, #316]	; (8bf0 <hif_handle_isr+0x354>)
    8ab4:	484f      	ldr	r0, [pc, #316]	; (8bf4 <hif_handle_isr+0x358>)
    8ab6:	4b50      	ldr	r3, [pc, #320]	; (8bf8 <hif_handle_isr+0x35c>)
    8ab8:	4798      	blx	r3
    8aba:	485d      	ldr	r0, [pc, #372]	; (8c30 <hif_handle_isr+0x394>)
    8abc:	4b50      	ldr	r3, [pc, #320]	; (8c00 <hif_handle_isr+0x364>)
    8abe:	4798      	blx	r3
    8ac0:	200d      	movs	r0, #13
    8ac2:	4b50      	ldr	r3, [pc, #320]	; (8c04 <hif_handle_isr+0x368>)
    8ac4:	4798      	blx	r3
    8ac6:	e76e      	b.n	89a6 <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    8ac8:	4b46      	ldr	r3, [pc, #280]	; (8be4 <hif_handle_isr+0x348>)
    8aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8acc:	2b00      	cmp	r3, #0
    8ace:	d100      	bne.n	8ad2 <hif_handle_isr+0x236>
    8ad0:	e769      	b.n	89a6 <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    8ad2:	4b44      	ldr	r3, [pc, #272]	; (8be4 <hif_handle_isr+0x348>)
    8ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8ad6:	aa04      	add	r2, sp, #16
    8ad8:	7850      	ldrb	r0, [r2, #1]
    8ada:	b2c0      	uxtb	r0, r0
    8adc:	8851      	ldrh	r1, [r2, #2]
    8ade:	9a05      	ldr	r2, [sp, #20]
    8ae0:	3208      	adds	r2, #8
    8ae2:	3908      	subs	r1, #8
    8ae4:	b289      	uxth	r1, r1
    8ae6:	4798      	blx	r3
    8ae8:	e75d      	b.n	89a6 <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    8aea:	4a52      	ldr	r2, [pc, #328]	; (8c34 <hif_handle_isr+0x398>)
    8aec:	4940      	ldr	r1, [pc, #256]	; (8bf0 <hif_handle_isr+0x354>)
    8aee:	4841      	ldr	r0, [pc, #260]	; (8bf4 <hif_handle_isr+0x358>)
    8af0:	4c41      	ldr	r4, [pc, #260]	; (8bf8 <hif_handle_isr+0x35c>)
    8af2:	47a0      	blx	r4
    8af4:	ab04      	add	r3, sp, #16
    8af6:	7819      	ldrb	r1, [r3, #0]
    8af8:	b2c9      	uxtb	r1, r1
    8afa:	785a      	ldrb	r2, [r3, #1]
    8afc:	b2d2      	uxtb	r2, r2
    8afe:	484e      	ldr	r0, [pc, #312]	; (8c38 <hif_handle_isr+0x39c>)
    8b00:	47a0      	blx	r4
    8b02:	200d      	movs	r0, #13
    8b04:	4b3f      	ldr	r3, [pc, #252]	; (8c04 <hif_handle_isr+0x368>)
    8b06:	4798      	blx	r3
					ret = hif_set_rx_done();
    8b08:	4b4c      	ldr	r3, [pc, #304]	; (8c3c <hif_handle_isr+0x3a0>)
    8b0a:	4798      	blx	r3
    8b0c:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    8b0e:	d129      	bne.n	8b64 <hif_handle_isr+0x2c8>
    8b10:	e74e      	b.n	89b0 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    8b12:	2287      	movs	r2, #135	; 0x87
    8b14:	0092      	lsls	r2, r2, #2
    8b16:	4936      	ldr	r1, [pc, #216]	; (8bf0 <hif_handle_isr+0x354>)
    8b18:	4836      	ldr	r0, [pc, #216]	; (8bf4 <hif_handle_isr+0x358>)
    8b1a:	4b37      	ldr	r3, [pc, #220]	; (8bf8 <hif_handle_isr+0x35c>)
    8b1c:	4798      	blx	r3
    8b1e:	4848      	ldr	r0, [pc, #288]	; (8c40 <hif_handle_isr+0x3a4>)
    8b20:	4b37      	ldr	r3, [pc, #220]	; (8c00 <hif_handle_isr+0x364>)
    8b22:	4798      	blx	r3
    8b24:	200d      	movs	r0, #13
    8b26:	4b37      	ldr	r3, [pc, #220]	; (8c04 <hif_handle_isr+0x368>)
    8b28:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    8b2a:	2402      	movs	r4, #2
    8b2c:	4264      	negs	r4, r4
    8b2e:	e019      	b.n	8b64 <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    8b30:	2289      	movs	r2, #137	; 0x89
    8b32:	0092      	lsls	r2, r2, #2
    8b34:	492e      	ldr	r1, [pc, #184]	; (8bf0 <hif_handle_isr+0x354>)
    8b36:	482f      	ldr	r0, [pc, #188]	; (8bf4 <hif_handle_isr+0x358>)
    8b38:	4c2f      	ldr	r4, [pc, #188]	; (8bf8 <hif_handle_isr+0x35c>)
    8b3a:	47a0      	blx	r4
    8b3c:	9903      	ldr	r1, [sp, #12]
    8b3e:	4841      	ldr	r0, [pc, #260]	; (8c44 <hif_handle_isr+0x3a8>)
    8b40:	47a0      	blx	r4
    8b42:	200d      	movs	r0, #13
    8b44:	4b2f      	ldr	r3, [pc, #188]	; (8c04 <hif_handle_isr+0x368>)
    8b46:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    8b48:	240c      	movs	r4, #12
    8b4a:	4264      	negs	r4, r4
    8b4c:	e00a      	b.n	8b64 <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    8b4e:	4a3e      	ldr	r2, [pc, #248]	; (8c48 <hif_handle_isr+0x3ac>)
    8b50:	4927      	ldr	r1, [pc, #156]	; (8bf0 <hif_handle_isr+0x354>)
    8b52:	4828      	ldr	r0, [pc, #160]	; (8bf4 <hif_handle_isr+0x358>)
    8b54:	4b28      	ldr	r3, [pc, #160]	; (8bf8 <hif_handle_isr+0x35c>)
    8b56:	4798      	blx	r3
    8b58:	483c      	ldr	r0, [pc, #240]	; (8c4c <hif_handle_isr+0x3b0>)
    8b5a:	4b29      	ldr	r3, [pc, #164]	; (8c00 <hif_handle_isr+0x364>)
    8b5c:	4798      	blx	r3
    8b5e:	200d      	movs	r0, #13
    8b60:	4b28      	ldr	r3, [pc, #160]	; (8c04 <hif_handle_isr+0x368>)
    8b62:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    8b64:	4a3a      	ldr	r2, [pc, #232]	; (8c50 <hif_handle_isr+0x3b4>)
    8b66:	493b      	ldr	r1, [pc, #236]	; (8c54 <hif_handle_isr+0x3b8>)
    8b68:	4822      	ldr	r0, [pc, #136]	; (8bf4 <hif_handle_isr+0x358>)
    8b6a:	4f23      	ldr	r7, [pc, #140]	; (8bf8 <hif_handle_isr+0x35c>)
    8b6c:	47b8      	blx	r7
    8b6e:	0021      	movs	r1, r4
    8b70:	4839      	ldr	r0, [pc, #228]	; (8c58 <hif_handle_isr+0x3bc>)
    8b72:	47b8      	blx	r7
    8b74:	200d      	movs	r0, #13
    8b76:	4b23      	ldr	r3, [pc, #140]	; (8c04 <hif_handle_isr+0x368>)
    8b78:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    8b7a:	a903      	add	r1, sp, #12
    8b7c:	4837      	ldr	r0, [pc, #220]	; (8c5c <hif_handle_isr+0x3c0>)
    8b7e:	47b0      	blx	r6
    8b80:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    8b82:	d1e4      	bne.n	8b4e <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    8b84:	9b03      	ldr	r3, [sp, #12]
    8b86:	07db      	lsls	r3, r3, #31
    8b88:	d5d2      	bpl.n	8b30 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    8b8a:	2000      	movs	r0, #0
    8b8c:	4b1f      	ldr	r3, [pc, #124]	; (8c0c <hif_handle_isr+0x370>)
    8b8e:	4798      	blx	r3
			reg &= ~NBIT0;
    8b90:	2301      	movs	r3, #1
    8b92:	9903      	ldr	r1, [sp, #12]
    8b94:	4399      	bics	r1, r3
    8b96:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    8b98:	4830      	ldr	r0, [pc, #192]	; (8c5c <hif_handle_isr+0x3c0>)
    8b9a:	4b31      	ldr	r3, [pc, #196]	; (8c60 <hif_handle_isr+0x3c4>)
    8b9c:	4798      	blx	r3
    8b9e:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    8ba0:	d1e0      	bne.n	8b64 <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    8ba2:	2201      	movs	r2, #1
    8ba4:	4b0f      	ldr	r3, [pc, #60]	; (8be4 <hif_handle_isr+0x348>)
    8ba6:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    8ba8:	9b03      	ldr	r3, [sp, #12]
    8baa:	049d      	lsls	r5, r3, #18
    8bac:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    8bae:	d0b0      	beq.n	8b12 <hif_handle_isr+0x276>
				uint32 address = 0;
    8bb0:	2300      	movs	r3, #0
    8bb2:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    8bb4:	a905      	add	r1, sp, #20
    8bb6:	482b      	ldr	r0, [pc, #172]	; (8c64 <hif_handle_isr+0x3c8>)
    8bb8:	4b16      	ldr	r3, [pc, #88]	; (8c14 <hif_handle_isr+0x378>)
    8bba:	4798      	blx	r3
    8bbc:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    8bbe:	d100      	bne.n	8bc2 <hif_handle_isr+0x326>
    8bc0:	e675      	b.n	88ae <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    8bc2:	22c8      	movs	r2, #200	; 0xc8
    8bc4:	32ff      	adds	r2, #255	; 0xff
    8bc6:	490a      	ldr	r1, [pc, #40]	; (8bf0 <hif_handle_isr+0x354>)
    8bc8:	480a      	ldr	r0, [pc, #40]	; (8bf4 <hif_handle_isr+0x358>)
    8bca:	4b0b      	ldr	r3, [pc, #44]	; (8bf8 <hif_handle_isr+0x35c>)
    8bcc:	4798      	blx	r3
    8bce:	4826      	ldr	r0, [pc, #152]	; (8c68 <hif_handle_isr+0x3cc>)
    8bd0:	4b0b      	ldr	r3, [pc, #44]	; (8c00 <hif_handle_isr+0x364>)
    8bd2:	4798      	blx	r3
    8bd4:	200d      	movs	r0, #13
    8bd6:	4b0b      	ldr	r3, [pc, #44]	; (8c04 <hif_handle_isr+0x368>)
    8bd8:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    8bda:	2001      	movs	r0, #1
    8bdc:	4b0b      	ldr	r3, [pc, #44]	; (8c0c <hif_handle_isr+0x370>)
    8bde:	4798      	blx	r3
    8be0:	e7c0      	b.n	8b64 <hif_handle_isr+0x2c8>
    8be2:	46c0      	nop			; (mov r8, r8)
    8be4:	20000438 	.word	0x20000438
    8be8:	000099d5 	.word	0x000099d5
    8bec:	0000020f 	.word	0x0000020f
    8bf0:	00012f90 	.word	0x00012f90
    8bf4:	00012f3c 	.word	0x00012f3c
    8bf8:	000119b1 	.word	0x000119b1
    8bfc:	000130ec 	.word	0x000130ec
    8c00:	00011acd 	.word	0x00011acd
    8c04:	000119e5 	.word	0x000119e5
    8c08:	00012fe8 	.word	0x00012fe8
    8c0c:	00008241 	.word	0x00008241
    8c10:	00013000 	.word	0x00013000
    8c14:	000099bd 	.word	0x000099bd
    8c18:	00013040 	.word	0x00013040
    8c1c:	00013060 	.word	0x00013060
    8c20:	00013084 	.word	0x00013084
    8c24:	000001ff 	.word	0x000001ff
    8c28:	000130a4 	.word	0x000130a4
    8c2c:	00000206 	.word	0x00000206
    8c30:	000130c8 	.word	0x000130c8
    8c34:	00000215 	.word	0x00000215
    8c38:	00013104 	.word	0x00013104
    8c3c:	00008575 	.word	0x00008575
    8c40:	00013130 	.word	0x00013130
    8c44:	00013144 	.word	0x00013144
    8c48:	0000022d 	.word	0x0000022d
    8c4c:	00013160 	.word	0x00013160
    8c50:	0000024a 	.word	0x0000024a
    8c54:	00012f98 	.word	0x00012f98
    8c58:	00013184 	.word	0x00013184
    8c5c:	00001070 	.word	0x00001070
    8c60:	000099c9 	.word	0x000099c9
    8c64:	00001084 	.word	0x00001084
    8c68:	00012fc4 	.word	0x00012fc4
			}
		}
	}

	return ret;
}
    8c6c:	2000      	movs	r0, #0
    8c6e:	b007      	add	sp, #28
    8c70:	bc0c      	pop	{r2, r3}
    8c72:	4690      	mov	r8, r2
    8c74:	4699      	mov	r9, r3
    8c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008c78 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    8c78:	b570      	push	{r4, r5, r6, lr}
    8c7a:	0014      	movs	r4, r2
    8c7c:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    8c7e:	2800      	cmp	r0, #0
    8c80:	d003      	beq.n	8c8a <hif_receive+0x12>
    8c82:	2900      	cmp	r1, #0
    8c84:	d001      	beq.n	8c8a <hif_receive+0x12>
    8c86:	2a00      	cmp	r2, #0
    8c88:	d112      	bne.n	8cb0 <hif_receive+0x38>
	{
		if(isDone)
    8c8a:	2d00      	cmp	r5, #0
    8c8c:	d002      	beq.n	8c94 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    8c8e:	4b27      	ldr	r3, [pc, #156]	; (8d2c <hif_receive+0xb4>)
    8c90:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    8c92:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    8c94:	4a26      	ldr	r2, [pc, #152]	; (8d30 <hif_receive+0xb8>)
    8c96:	4927      	ldr	r1, [pc, #156]	; (8d34 <hif_receive+0xbc>)
    8c98:	4827      	ldr	r0, [pc, #156]	; (8d38 <hif_receive+0xc0>)
    8c9a:	4b28      	ldr	r3, [pc, #160]	; (8d3c <hif_receive+0xc4>)
    8c9c:	4798      	blx	r3
    8c9e:	4828      	ldr	r0, [pc, #160]	; (8d40 <hif_receive+0xc8>)
    8ca0:	4b28      	ldr	r3, [pc, #160]	; (8d44 <hif_receive+0xcc>)
    8ca2:	4798      	blx	r3
    8ca4:	200d      	movs	r0, #13
    8ca6:	4b28      	ldr	r3, [pc, #160]	; (8d48 <hif_receive+0xd0>)
    8ca8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    8caa:	200c      	movs	r0, #12
    8cac:	4240      	negs	r0, r0
    8cae:	e7f0      	b.n	8c92 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    8cb0:	4b26      	ldr	r3, [pc, #152]	; (8d4c <hif_receive+0xd4>)
    8cb2:	689b      	ldr	r3, [r3, #8]
    8cb4:	429a      	cmp	r2, r3
    8cb6:	d81a      	bhi.n	8cee <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    8cb8:	4b24      	ldr	r3, [pc, #144]	; (8d4c <hif_receive+0xd4>)
    8cba:	685b      	ldr	r3, [r3, #4]
    8cbc:	4298      	cmp	r0, r3
    8cbe:	d326      	bcc.n	8d0e <hif_receive+0x96>
    8cc0:	1886      	adds	r6, r0, r2
    8cc2:	4a22      	ldr	r2, [pc, #136]	; (8d4c <hif_receive+0xd4>)
    8cc4:	6853      	ldr	r3, [r2, #4]
    8cc6:	6892      	ldr	r2, [r2, #8]
    8cc8:	189b      	adds	r3, r3, r2
    8cca:	429e      	cmp	r6, r3
    8ccc:	d81f      	bhi.n	8d0e <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    8cce:	0022      	movs	r2, r4
    8cd0:	4b1f      	ldr	r3, [pc, #124]	; (8d50 <hif_receive+0xd8>)
    8cd2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    8cd4:	2800      	cmp	r0, #0
    8cd6:	d1dc      	bne.n	8c92 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    8cd8:	4a1c      	ldr	r2, [pc, #112]	; (8d4c <hif_receive+0xd4>)
    8cda:	6853      	ldr	r3, [r2, #4]
    8cdc:	6892      	ldr	r2, [r2, #8]
    8cde:	189b      	adds	r3, r3, r2
    8ce0:	429e      	cmp	r6, r3
    8ce2:	d001      	beq.n	8ce8 <hif_receive+0x70>
    8ce4:	2d00      	cmp	r5, #0
    8ce6:	d0d4      	beq.n	8c92 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    8ce8:	4b10      	ldr	r3, [pc, #64]	; (8d2c <hif_receive+0xb4>)
    8cea:	4798      	blx	r3
    8cec:	e7d1      	b.n	8c92 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    8cee:	4a19      	ldr	r2, [pc, #100]	; (8d54 <hif_receive+0xdc>)
    8cf0:	4910      	ldr	r1, [pc, #64]	; (8d34 <hif_receive+0xbc>)
    8cf2:	4811      	ldr	r0, [pc, #68]	; (8d38 <hif_receive+0xc0>)
    8cf4:	4d11      	ldr	r5, [pc, #68]	; (8d3c <hif_receive+0xc4>)
    8cf6:	47a8      	blx	r5
    8cf8:	4b14      	ldr	r3, [pc, #80]	; (8d4c <hif_receive+0xd4>)
    8cfa:	689a      	ldr	r2, [r3, #8]
    8cfc:	0021      	movs	r1, r4
    8cfe:	4816      	ldr	r0, [pc, #88]	; (8d58 <hif_receive+0xe0>)
    8d00:	47a8      	blx	r5
    8d02:	200d      	movs	r0, #13
    8d04:	4b10      	ldr	r3, [pc, #64]	; (8d48 <hif_receive+0xd0>)
    8d06:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    8d08:	200c      	movs	r0, #12
    8d0a:	4240      	negs	r0, r0
		goto ERR1;
    8d0c:	e7c1      	b.n	8c92 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    8d0e:	4a13      	ldr	r2, [pc, #76]	; (8d5c <hif_receive+0xe4>)
    8d10:	4908      	ldr	r1, [pc, #32]	; (8d34 <hif_receive+0xbc>)
    8d12:	4809      	ldr	r0, [pc, #36]	; (8d38 <hif_receive+0xc0>)
    8d14:	4b09      	ldr	r3, [pc, #36]	; (8d3c <hif_receive+0xc4>)
    8d16:	4798      	blx	r3
    8d18:	4811      	ldr	r0, [pc, #68]	; (8d60 <hif_receive+0xe8>)
    8d1a:	4b0a      	ldr	r3, [pc, #40]	; (8d44 <hif_receive+0xcc>)
    8d1c:	4798      	blx	r3
    8d1e:	200d      	movs	r0, #13
    8d20:	4b09      	ldr	r3, [pc, #36]	; (8d48 <hif_receive+0xd0>)
    8d22:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    8d24:	200c      	movs	r0, #12
    8d26:	4240      	negs	r0, r0
		goto ERR1;
    8d28:	e7b3      	b.n	8c92 <hif_receive+0x1a>
    8d2a:	46c0      	nop			; (mov r8, r8)
    8d2c:	00008575 	.word	0x00008575
    8d30:	0000026b 	.word	0x0000026b
    8d34:	00012fa8 	.word	0x00012fa8
    8d38:	00012f3c 	.word	0x00012f3c
    8d3c:	000119b1 	.word	0x000119b1
    8d40:	000131b4 	.word	0x000131b4
    8d44:	00011acd 	.word	0x00011acd
    8d48:	000119e5 	.word	0x000119e5
    8d4c:	20000438 	.word	0x20000438
    8d50:	000099d5 	.word	0x000099d5
    8d54:	00000273 	.word	0x00000273
    8d58:	000131d4 	.word	0x000131d4
    8d5c:	00000279 	.word	0x00000279
    8d60:	0001321c 	.word	0x0001321c

00008d64 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    8d64:	b570      	push	{r4, r5, r6, lr}
    8d66:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    8d68:	2807      	cmp	r0, #7
    8d6a:	d81f      	bhi.n	8dac <hif_register_cb+0x48>
    8d6c:	0083      	lsls	r3, r0, #2
    8d6e:	4a16      	ldr	r2, [pc, #88]	; (8dc8 <hif_register_cb+0x64>)
    8d70:	58d3      	ldr	r3, [r2, r3]
    8d72:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    8d74:	4b15      	ldr	r3, [pc, #84]	; (8dcc <hif_register_cb+0x68>)
    8d76:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    8d78:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    8d7a:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    8d7c:	4b13      	ldr	r3, [pc, #76]	; (8dcc <hif_register_cb+0x68>)
    8d7e:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    8d80:	2000      	movs	r0, #0
			break;
    8d82:	e7fa      	b.n	8d7a <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    8d84:	4b11      	ldr	r3, [pc, #68]	; (8dcc <hif_register_cb+0x68>)
    8d86:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    8d88:	2000      	movs	r0, #0
			break;
    8d8a:	e7f6      	b.n	8d7a <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    8d8c:	4b0f      	ldr	r3, [pc, #60]	; (8dcc <hif_register_cb+0x68>)
    8d8e:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    8d90:	2000      	movs	r0, #0
			break;
    8d92:	e7f2      	b.n	8d7a <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    8d94:	4b0d      	ldr	r3, [pc, #52]	; (8dcc <hif_register_cb+0x68>)
    8d96:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    8d98:	2000      	movs	r0, #0
			break;
    8d9a:	e7ee      	b.n	8d7a <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    8d9c:	4b0b      	ldr	r3, [pc, #44]	; (8dcc <hif_register_cb+0x68>)
    8d9e:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    8da0:	2000      	movs	r0, #0
			break;
    8da2:	e7ea      	b.n	8d7a <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    8da4:	4b09      	ldr	r3, [pc, #36]	; (8dcc <hif_register_cb+0x68>)
    8da6:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    8da8:	2000      	movs	r0, #0
			break;
    8daa:	e7e6      	b.n	8d7a <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    8dac:	4a08      	ldr	r2, [pc, #32]	; (8dd0 <hif_register_cb+0x6c>)
    8dae:	4909      	ldr	r1, [pc, #36]	; (8dd4 <hif_register_cb+0x70>)
    8db0:	4809      	ldr	r0, [pc, #36]	; (8dd8 <hif_register_cb+0x74>)
    8db2:	4d0a      	ldr	r5, [pc, #40]	; (8ddc <hif_register_cb+0x78>)
    8db4:	47a8      	blx	r5
    8db6:	0021      	movs	r1, r4
    8db8:	4809      	ldr	r0, [pc, #36]	; (8de0 <hif_register_cb+0x7c>)
    8dba:	47a8      	blx	r5
    8dbc:	200d      	movs	r0, #13
    8dbe:	4b09      	ldr	r3, [pc, #36]	; (8de4 <hif_register_cb+0x80>)
    8dc0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    8dc2:	200c      	movs	r0, #12
    8dc4:	4240      	negs	r0, r0
			break;
    8dc6:	e7d8      	b.n	8d7a <hif_register_cb+0x16>
    8dc8:	00012f64 	.word	0x00012f64
    8dcc:	20000438 	.word	0x20000438
    8dd0:	000002b1 	.word	0x000002b1
    8dd4:	00012fb4 	.word	0x00012fb4
    8dd8:	00012f3c 	.word	0x00012f3c
    8ddc:	000119b1 	.word	0x000119b1
    8de0:	00013260 	.word	0x00013260
    8de4:	000119e5 	.word	0x000119e5

00008de8 <hif_init>:
{
    8de8:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    8dea:	2228      	movs	r2, #40	; 0x28
    8dec:	2100      	movs	r1, #0
    8dee:	4806      	ldr	r0, [pc, #24]	; (8e08 <hif_init+0x20>)
    8df0:	4b06      	ldr	r3, [pc, #24]	; (8e0c <hif_init+0x24>)
    8df2:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    8df4:	4806      	ldr	r0, [pc, #24]	; (8e10 <hif_init+0x28>)
    8df6:	4b07      	ldr	r3, [pc, #28]	; (8e14 <hif_init+0x2c>)
    8df8:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    8dfa:	4907      	ldr	r1, [pc, #28]	; (8e18 <hif_init+0x30>)
    8dfc:	2003      	movs	r0, #3
    8dfe:	4b07      	ldr	r3, [pc, #28]	; (8e1c <hif_init+0x34>)
    8e00:	4798      	blx	r3
}
    8e02:	2000      	movs	r0, #0
    8e04:	bd10      	pop	{r4, pc}
    8e06:	46c0      	nop			; (mov r8, r8)
    8e08:	20000438 	.word	0x20000438
    8e0c:	00008535 	.word	0x00008535
    8e10:	00008561 	.word	0x00008561
    8e14:	000081e9 	.word	0x000081e9
    8e18:	00008571 	.word	0x00008571
    8e1c:	00008d65 	.word	0x00008d65

00008e20 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    8e20:	b530      	push	{r4, r5, lr}
    8e22:	b09f      	sub	sp, #124	; 0x7c
    8e24:	0004      	movs	r4, r0
    8e26:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    8e28:	282c      	cmp	r0, #44	; 0x2c
    8e2a:	d02f      	beq.n	8e8c <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    8e2c:	281b      	cmp	r0, #27
    8e2e:	d03d      	beq.n	8eac <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    8e30:	2806      	cmp	r0, #6
    8e32:	d04b      	beq.n	8ecc <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    8e34:	280e      	cmp	r0, #14
    8e36:	d027      	beq.n	8e88 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    8e38:	2832      	cmp	r0, #50	; 0x32
    8e3a:	d057      	beq.n	8eec <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    8e3c:	282f      	cmp	r0, #47	; 0x2f
    8e3e:	d065      	beq.n	8f0c <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    8e40:	2834      	cmp	r0, #52	; 0x34
    8e42:	d100      	bne.n	8e46 <m2m_wifi_cb+0x26>
    8e44:	e077      	b.n	8f36 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    8e46:	2811      	cmp	r0, #17
    8e48:	d100      	bne.n	8e4c <m2m_wifi_cb+0x2c>
    8e4a:	e096      	b.n	8f7a <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    8e4c:	2813      	cmp	r0, #19
    8e4e:	d100      	bne.n	8e52 <m2m_wifi_cb+0x32>
    8e50:	e0ac      	b.n	8fac <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    8e52:	2804      	cmp	r0, #4
    8e54:	d100      	bne.n	8e58 <m2m_wifi_cb+0x38>
    8e56:	e0bb      	b.n	8fd0 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    8e58:	2865      	cmp	r0, #101	; 0x65
    8e5a:	d100      	bne.n	8e5e <m2m_wifi_cb+0x3e>
    8e5c:	e0ca      	b.n	8ff4 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    8e5e:	2809      	cmp	r0, #9
    8e60:	d100      	bne.n	8e64 <m2m_wifi_cb+0x44>
    8e62:	e0d9      	b.n	9018 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    8e64:	282a      	cmp	r0, #42	; 0x2a
    8e66:	d100      	bne.n	8e6a <m2m_wifi_cb+0x4a>
    8e68:	e0e8      	b.n	903c <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    8e6a:	2820      	cmp	r0, #32
    8e6c:	d100      	bne.n	8e70 <m2m_wifi_cb+0x50>
    8e6e:	e0f7      	b.n	9060 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    8e70:	2292      	movs	r2, #146	; 0x92
    8e72:	0052      	lsls	r2, r2, #1
    8e74:	4989      	ldr	r1, [pc, #548]	; (909c <m2m_wifi_cb+0x27c>)
    8e76:	488a      	ldr	r0, [pc, #552]	; (90a0 <m2m_wifi_cb+0x280>)
    8e78:	4d8a      	ldr	r5, [pc, #552]	; (90a4 <m2m_wifi_cb+0x284>)
    8e7a:	47a8      	blx	r5
    8e7c:	0021      	movs	r1, r4
    8e7e:	488a      	ldr	r0, [pc, #552]	; (90a8 <m2m_wifi_cb+0x288>)
    8e80:	47a8      	blx	r5
    8e82:	200d      	movs	r0, #13
    8e84:	4b89      	ldr	r3, [pc, #548]	; (90ac <m2m_wifi_cb+0x28c>)
    8e86:	4798      	blx	r3
	}
}
    8e88:	b01f      	add	sp, #124	; 0x7c
    8e8a:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    8e8c:	2300      	movs	r3, #0
    8e8e:	2204      	movs	r2, #4
    8e90:	a903      	add	r1, sp, #12
    8e92:	0028      	movs	r0, r5
    8e94:	4c86      	ldr	r4, [pc, #536]	; (90b0 <m2m_wifi_cb+0x290>)
    8e96:	47a0      	blx	r4
    8e98:	2800      	cmp	r0, #0
    8e9a:	d1f5      	bne.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    8e9c:	4b85      	ldr	r3, [pc, #532]	; (90b4 <m2m_wifi_cb+0x294>)
    8e9e:	681b      	ldr	r3, [r3, #0]
    8ea0:	2b00      	cmp	r3, #0
    8ea2:	d0f1      	beq.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    8ea4:	a903      	add	r1, sp, #12
    8ea6:	302c      	adds	r0, #44	; 0x2c
    8ea8:	4798      	blx	r3
    8eaa:	e7ed      	b.n	8e88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    8eac:	2300      	movs	r3, #0
    8eae:	2208      	movs	r2, #8
    8eb0:	a903      	add	r1, sp, #12
    8eb2:	0028      	movs	r0, r5
    8eb4:	4c7e      	ldr	r4, [pc, #504]	; (90b0 <m2m_wifi_cb+0x290>)
    8eb6:	47a0      	blx	r4
    8eb8:	2800      	cmp	r0, #0
    8eba:	d1e5      	bne.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    8ebc:	4b7d      	ldr	r3, [pc, #500]	; (90b4 <m2m_wifi_cb+0x294>)
    8ebe:	681b      	ldr	r3, [r3, #0]
    8ec0:	2b00      	cmp	r3, #0
    8ec2:	d0e1      	beq.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    8ec4:	a903      	add	r1, sp, #12
    8ec6:	301b      	adds	r0, #27
    8ec8:	4798      	blx	r3
    8eca:	e7dd      	b.n	8e88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    8ecc:	2301      	movs	r3, #1
    8ece:	2230      	movs	r2, #48	; 0x30
    8ed0:	a903      	add	r1, sp, #12
    8ed2:	0028      	movs	r0, r5
    8ed4:	4c76      	ldr	r4, [pc, #472]	; (90b0 <m2m_wifi_cb+0x290>)
    8ed6:	47a0      	blx	r4
    8ed8:	2800      	cmp	r0, #0
    8eda:	d1d5      	bne.n	8e88 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    8edc:	4b75      	ldr	r3, [pc, #468]	; (90b4 <m2m_wifi_cb+0x294>)
    8ede:	681b      	ldr	r3, [r3, #0]
    8ee0:	2b00      	cmp	r3, #0
    8ee2:	d0d1      	beq.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    8ee4:	a903      	add	r1, sp, #12
    8ee6:	3006      	adds	r0, #6
    8ee8:	4798      	blx	r3
    8eea:	e7cd      	b.n	8e88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    8eec:	2300      	movs	r3, #0
    8eee:	2214      	movs	r2, #20
    8ef0:	a903      	add	r1, sp, #12
    8ef2:	0028      	movs	r0, r5
    8ef4:	4c6e      	ldr	r4, [pc, #440]	; (90b0 <m2m_wifi_cb+0x290>)
    8ef6:	47a0      	blx	r4
    8ef8:	2800      	cmp	r0, #0
    8efa:	d1c5      	bne.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    8efc:	4b6d      	ldr	r3, [pc, #436]	; (90b4 <m2m_wifi_cb+0x294>)
    8efe:	681b      	ldr	r3, [r3, #0]
    8f00:	2b00      	cmp	r3, #0
    8f02:	d0c1      	beq.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    8f04:	a903      	add	r1, sp, #12
    8f06:	3032      	adds	r0, #50	; 0x32
    8f08:	4798      	blx	r3
    8f0a:	e7bd      	b.n	8e88 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    8f0c:	2264      	movs	r2, #100	; 0x64
    8f0e:	2100      	movs	r1, #0
    8f10:	a803      	add	r0, sp, #12
    8f12:	4b69      	ldr	r3, [pc, #420]	; (90b8 <m2m_wifi_cb+0x298>)
    8f14:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    8f16:	2300      	movs	r3, #0
    8f18:	2264      	movs	r2, #100	; 0x64
    8f1a:	a903      	add	r1, sp, #12
    8f1c:	0028      	movs	r0, r5
    8f1e:	4c64      	ldr	r4, [pc, #400]	; (90b0 <m2m_wifi_cb+0x290>)
    8f20:	47a0      	blx	r4
    8f22:	2800      	cmp	r0, #0
    8f24:	d1b0      	bne.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    8f26:	4b63      	ldr	r3, [pc, #396]	; (90b4 <m2m_wifi_cb+0x294>)
    8f28:	681b      	ldr	r3, [r3, #0]
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	d0ac      	beq.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    8f2e:	a903      	add	r1, sp, #12
    8f30:	302f      	adds	r0, #47	; 0x2f
    8f32:	4798      	blx	r3
    8f34:	e7a8      	b.n	8e88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    8f36:	2300      	movs	r3, #0
    8f38:	2204      	movs	r2, #4
    8f3a:	a903      	add	r1, sp, #12
    8f3c:	0028      	movs	r0, r5
    8f3e:	4c5c      	ldr	r4, [pc, #368]	; (90b0 <m2m_wifi_cb+0x290>)
    8f40:	47a0      	blx	r4
    8f42:	2800      	cmp	r0, #0
    8f44:	d1a0      	bne.n	8e88 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    8f46:	485d      	ldr	r0, [pc, #372]	; (90bc <m2m_wifi_cb+0x29c>)
    8f48:	4d56      	ldr	r5, [pc, #344]	; (90a4 <m2m_wifi_cb+0x284>)
    8f4a:	47a8      	blx	r5
    8f4c:	9c03      	ldr	r4, [sp, #12]
    8f4e:	0a23      	lsrs	r3, r4, #8
    8f50:	20ff      	movs	r0, #255	; 0xff
    8f52:	4003      	ands	r3, r0
    8f54:	0c22      	lsrs	r2, r4, #16
    8f56:	4002      	ands	r2, r0
    8f58:	0e21      	lsrs	r1, r4, #24
    8f5a:	4020      	ands	r0, r4
    8f5c:	9000      	str	r0, [sp, #0]
    8f5e:	4858      	ldr	r0, [pc, #352]	; (90c0 <m2m_wifi_cb+0x2a0>)
    8f60:	47a8      	blx	r5
    8f62:	200d      	movs	r0, #13
    8f64:	4b51      	ldr	r3, [pc, #324]	; (90ac <m2m_wifi_cb+0x28c>)
    8f66:	4798      	blx	r3
			if (gpfAppWifiCb)
    8f68:	4b52      	ldr	r3, [pc, #328]	; (90b4 <m2m_wifi_cb+0x294>)
    8f6a:	681b      	ldr	r3, [r3, #0]
    8f6c:	2b00      	cmp	r3, #0
    8f6e:	d100      	bne.n	8f72 <m2m_wifi_cb+0x152>
    8f70:	e78a      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    8f72:	2100      	movs	r1, #0
    8f74:	2034      	movs	r0, #52	; 0x34
    8f76:	4798      	blx	r3
    8f78:	e786      	b.n	8e88 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    8f7a:	2200      	movs	r2, #0
    8f7c:	4b51      	ldr	r3, [pc, #324]	; (90c4 <m2m_wifi_cb+0x2a4>)
    8f7e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    8f80:	2300      	movs	r3, #0
    8f82:	3204      	adds	r2, #4
    8f84:	a903      	add	r1, sp, #12
    8f86:	0028      	movs	r0, r5
    8f88:	4c49      	ldr	r4, [pc, #292]	; (90b0 <m2m_wifi_cb+0x290>)
    8f8a:	47a0      	blx	r4
    8f8c:	2800      	cmp	r0, #0
    8f8e:	d000      	beq.n	8f92 <m2m_wifi_cb+0x172>
    8f90:	e77a      	b.n	8e88 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    8f92:	ab03      	add	r3, sp, #12
    8f94:	781a      	ldrb	r2, [r3, #0]
    8f96:	4b4c      	ldr	r3, [pc, #304]	; (90c8 <m2m_wifi_cb+0x2a8>)
    8f98:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    8f9a:	4b46      	ldr	r3, [pc, #280]	; (90b4 <m2m_wifi_cb+0x294>)
    8f9c:	681b      	ldr	r3, [r3, #0]
    8f9e:	2b00      	cmp	r3, #0
    8fa0:	d100      	bne.n	8fa4 <m2m_wifi_cb+0x184>
    8fa2:	e771      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    8fa4:	a903      	add	r1, sp, #12
    8fa6:	3011      	adds	r0, #17
    8fa8:	4798      	blx	r3
    8faa:	e76d      	b.n	8e88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    8fac:	2300      	movs	r3, #0
    8fae:	222c      	movs	r2, #44	; 0x2c
    8fb0:	a903      	add	r1, sp, #12
    8fb2:	0028      	movs	r0, r5
    8fb4:	4c3e      	ldr	r4, [pc, #248]	; (90b0 <m2m_wifi_cb+0x290>)
    8fb6:	47a0      	blx	r4
    8fb8:	2800      	cmp	r0, #0
    8fba:	d000      	beq.n	8fbe <m2m_wifi_cb+0x19e>
    8fbc:	e764      	b.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    8fbe:	4b3d      	ldr	r3, [pc, #244]	; (90b4 <m2m_wifi_cb+0x294>)
    8fc0:	681b      	ldr	r3, [r3, #0]
    8fc2:	2b00      	cmp	r3, #0
    8fc4:	d100      	bne.n	8fc8 <m2m_wifi_cb+0x1a8>
    8fc6:	e75f      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    8fc8:	a903      	add	r1, sp, #12
    8fca:	3013      	adds	r0, #19
    8fcc:	4798      	blx	r3
    8fce:	e75b      	b.n	8e88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    8fd0:	2300      	movs	r3, #0
    8fd2:	2204      	movs	r2, #4
    8fd4:	a91c      	add	r1, sp, #112	; 0x70
    8fd6:	0028      	movs	r0, r5
    8fd8:	4c35      	ldr	r4, [pc, #212]	; (90b0 <m2m_wifi_cb+0x290>)
    8fda:	47a0      	blx	r4
    8fdc:	2800      	cmp	r0, #0
    8fde:	d000      	beq.n	8fe2 <m2m_wifi_cb+0x1c2>
    8fe0:	e752      	b.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    8fe2:	4b34      	ldr	r3, [pc, #208]	; (90b4 <m2m_wifi_cb+0x294>)
    8fe4:	681b      	ldr	r3, [r3, #0]
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	d100      	bne.n	8fec <m2m_wifi_cb+0x1cc>
    8fea:	e74d      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    8fec:	a91c      	add	r1, sp, #112	; 0x70
    8fee:	3004      	adds	r0, #4
    8ff0:	4798      	blx	r3
    8ff2:	e749      	b.n	8e88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    8ff4:	2300      	movs	r3, #0
    8ff6:	2204      	movs	r2, #4
    8ff8:	a91c      	add	r1, sp, #112	; 0x70
    8ffa:	0028      	movs	r0, r5
    8ffc:	4c2c      	ldr	r4, [pc, #176]	; (90b0 <m2m_wifi_cb+0x290>)
    8ffe:	47a0      	blx	r4
    9000:	2800      	cmp	r0, #0
    9002:	d000      	beq.n	9006 <m2m_wifi_cb+0x1e6>
    9004:	e740      	b.n	8e88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    9006:	4b2b      	ldr	r3, [pc, #172]	; (90b4 <m2m_wifi_cb+0x294>)
    9008:	681b      	ldr	r3, [r3, #0]
    900a:	2b00      	cmp	r3, #0
    900c:	d100      	bne.n	9010 <m2m_wifi_cb+0x1f0>
    900e:	e73b      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    9010:	a91c      	add	r1, sp, #112	; 0x70
    9012:	3065      	adds	r0, #101	; 0x65
    9014:	4798      	blx	r3
    9016:	e737      	b.n	8e88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    9018:	2301      	movs	r3, #1
    901a:	2264      	movs	r2, #100	; 0x64
    901c:	a903      	add	r1, sp, #12
    901e:	0028      	movs	r0, r5
    9020:	4c23      	ldr	r4, [pc, #140]	; (90b0 <m2m_wifi_cb+0x290>)
    9022:	47a0      	blx	r4
    9024:	2800      	cmp	r0, #0
    9026:	d000      	beq.n	902a <m2m_wifi_cb+0x20a>
    9028:	e72e      	b.n	8e88 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    902a:	4b22      	ldr	r3, [pc, #136]	; (90b4 <m2m_wifi_cb+0x294>)
    902c:	681b      	ldr	r3, [r3, #0]
    902e:	2b00      	cmp	r3, #0
    9030:	d100      	bne.n	9034 <m2m_wifi_cb+0x214>
    9032:	e729      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    9034:	a903      	add	r1, sp, #12
    9036:	3009      	adds	r0, #9
    9038:	4798      	blx	r3
    903a:	e725      	b.n	8e88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    903c:	2301      	movs	r3, #1
    903e:	2204      	movs	r2, #4
    9040:	a903      	add	r1, sp, #12
    9042:	0028      	movs	r0, r5
    9044:	4c1a      	ldr	r4, [pc, #104]	; (90b0 <m2m_wifi_cb+0x290>)
    9046:	47a0      	blx	r4
    9048:	2800      	cmp	r0, #0
    904a:	d000      	beq.n	904e <m2m_wifi_cb+0x22e>
    904c:	e71c      	b.n	8e88 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    904e:	4b19      	ldr	r3, [pc, #100]	; (90b4 <m2m_wifi_cb+0x294>)
    9050:	681b      	ldr	r3, [r3, #0]
    9052:	2b00      	cmp	r3, #0
    9054:	d100      	bne.n	9058 <m2m_wifi_cb+0x238>
    9056:	e717      	b.n	8e88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    9058:	a903      	add	r1, sp, #12
    905a:	302a      	adds	r0, #42	; 0x2a
    905c:	4798      	blx	r3
    905e:	e713      	b.n	8e88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    9060:	2300      	movs	r3, #0
    9062:	2208      	movs	r2, #8
    9064:	a903      	add	r1, sp, #12
    9066:	0028      	movs	r0, r5
    9068:	4c11      	ldr	r4, [pc, #68]	; (90b0 <m2m_wifi_cb+0x290>)
    906a:	47a0      	blx	r4
    906c:	2800      	cmp	r0, #0
    906e:	d000      	beq.n	9072 <m2m_wifi_cb+0x252>
    9070:	e70a      	b.n	8e88 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    9072:	ab03      	add	r3, sp, #12
    9074:	889a      	ldrh	r2, [r3, #4]
    9076:	0028      	movs	r0, r5
    9078:	3008      	adds	r0, #8
    907a:	2301      	movs	r3, #1
    907c:	9903      	ldr	r1, [sp, #12]
    907e:	4c0c      	ldr	r4, [pc, #48]	; (90b0 <m2m_wifi_cb+0x290>)
    9080:	47a0      	blx	r4
    9082:	2800      	cmp	r0, #0
    9084:	d000      	beq.n	9088 <m2m_wifi_cb+0x268>
    9086:	e6ff      	b.n	8e88 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    9088:	4b0a      	ldr	r3, [pc, #40]	; (90b4 <m2m_wifi_cb+0x294>)
    908a:	681b      	ldr	r3, [r3, #0]
    908c:	2b00      	cmp	r3, #0
    908e:	d100      	bne.n	9092 <m2m_wifi_cb+0x272>
    9090:	e6fa      	b.n	8e88 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    9092:	a903      	add	r1, sp, #12
    9094:	3020      	adds	r0, #32
    9096:	4798      	blx	r3
    9098:	e6f6      	b.n	8e88 <m2m_wifi_cb+0x68>
    909a:	46c0      	nop			; (mov r8, r8)
    909c:	000132a4 	.word	0x000132a4
    90a0:	00012f3c 	.word	0x00012f3c
    90a4:	000119b1 	.word	0x000119b1
    90a8:	000132f4 	.word	0x000132f4
    90ac:	000119e5 	.word	0x000119e5
    90b0:	00008c79 	.word	0x00008c79
    90b4:	20000210 	.word	0x20000210
    90b8:	00008535 	.word	0x00008535
    90bc:	0001326c 	.word	0x0001326c
    90c0:	000132d4 	.word	0x000132d4
    90c4:	20000215 	.word	0x20000215
    90c8:	20000214 	.word	0x20000214

000090cc <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    90cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    90ce:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    90d0:	2201      	movs	r2, #1
    90d2:	230f      	movs	r3, #15
    90d4:	446b      	add	r3, sp
    90d6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    90d8:	2800      	cmp	r0, #0
    90da:	d061      	beq.n	91a0 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    90dc:	6802      	ldr	r2, [r0, #0]
    90de:	4b32      	ldr	r3, [pc, #200]	; (91a8 <m2m_wifi_init+0xdc>)
    90e0:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    90e2:	2200      	movs	r2, #0
    90e4:	4b31      	ldr	r3, [pc, #196]	; (91ac <m2m_wifi_init+0xe0>)
    90e6:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    90e8:	200f      	movs	r0, #15
    90ea:	4468      	add	r0, sp
    90ec:	4b30      	ldr	r3, [pc, #192]	; (91b0 <m2m_wifi_init+0xe4>)
    90ee:	4798      	blx	r3
    90f0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    90f2:	d002      	beq.n	90fa <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    90f4:	0020      	movs	r0, r4
    90f6:	b00f      	add	sp, #60	; 0x3c
    90f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    90fa:	2000      	movs	r0, #0
    90fc:	4b2d      	ldr	r3, [pc, #180]	; (91b4 <m2m_wifi_init+0xe8>)
    90fe:	4798      	blx	r3
    9100:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    9102:	d149      	bne.n	9198 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    9104:	492c      	ldr	r1, [pc, #176]	; (91b8 <m2m_wifi_init+0xec>)
    9106:	2001      	movs	r0, #1
    9108:	4b2c      	ldr	r3, [pc, #176]	; (91bc <m2m_wifi_init+0xf0>)
    910a:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    910c:	ae04      	add	r6, sp, #16
    910e:	0030      	movs	r0, r6
    9110:	4b2b      	ldr	r3, [pc, #172]	; (91c0 <m2m_wifi_init+0xf4>)
    9112:	4798      	blx	r3
    9114:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    9116:	482b      	ldr	r0, [pc, #172]	; (91c4 <m2m_wifi_init+0xf8>)
    9118:	4d2b      	ldr	r5, [pc, #172]	; (91c8 <m2m_wifi_init+0xfc>)
    911a:	47a8      	blx	r5
    911c:	79b3      	ldrb	r3, [r6, #6]
    911e:	7972      	ldrb	r2, [r6, #5]
    9120:	7931      	ldrb	r1, [r6, #4]
    9122:	8c30      	ldrh	r0, [r6, #32]
    9124:	9000      	str	r0, [sp, #0]
    9126:	4829      	ldr	r0, [pc, #164]	; (91cc <m2m_wifi_init+0x100>)
    9128:	47a8      	blx	r5
    912a:	200d      	movs	r0, #13
    912c:	4f28      	ldr	r7, [pc, #160]	; (91d0 <m2m_wifi_init+0x104>)
    912e:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    9130:	4824      	ldr	r0, [pc, #144]	; (91c4 <m2m_wifi_init+0xf8>)
    9132:	47a8      	blx	r5
    9134:	2226      	movs	r2, #38	; 0x26
    9136:	446a      	add	r2, sp
    9138:	211a      	movs	r1, #26
    913a:	4469      	add	r1, sp
    913c:	4825      	ldr	r0, [pc, #148]	; (91d4 <m2m_wifi_init+0x108>)
    913e:	47a8      	blx	r5
    9140:	200d      	movs	r0, #13
    9142:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    9144:	481f      	ldr	r0, [pc, #124]	; (91c4 <m2m_wifi_init+0xf8>)
    9146:	47a8      	blx	r5
    9148:	7a73      	ldrb	r3, [r6, #9]
    914a:	7a32      	ldrb	r2, [r6, #8]
    914c:	79f1      	ldrb	r1, [r6, #7]
    914e:	4822      	ldr	r0, [pc, #136]	; (91d8 <m2m_wifi_init+0x10c>)
    9150:	47a8      	blx	r5
    9152:	200d      	movs	r0, #13
    9154:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    9156:	481b      	ldr	r0, [pc, #108]	; (91c4 <m2m_wifi_init+0xf8>)
    9158:	47a8      	blx	r5
    915a:	2302      	movs	r3, #2
    915c:	2205      	movs	r2, #5
    915e:	2113      	movs	r1, #19
    9160:	481e      	ldr	r0, [pc, #120]	; (91dc <m2m_wifi_init+0x110>)
    9162:	47a8      	blx	r5
    9164:	200d      	movs	r0, #13
    9166:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    9168:	4816      	ldr	r0, [pc, #88]	; (91c4 <m2m_wifi_init+0xf8>)
    916a:	47a8      	blx	r5
    916c:	4a1c      	ldr	r2, [pc, #112]	; (91e0 <m2m_wifi_init+0x114>)
    916e:	491d      	ldr	r1, [pc, #116]	; (91e4 <m2m_wifi_init+0x118>)
    9170:	481d      	ldr	r0, [pc, #116]	; (91e8 <m2m_wifi_init+0x11c>)
    9172:	47a8      	blx	r5
    9174:	200d      	movs	r0, #13
    9176:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    9178:	0023      	movs	r3, r4
    917a:	330d      	adds	r3, #13
    917c:	d1ba      	bne.n	90f4 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    917e:	22e8      	movs	r2, #232	; 0xe8
    9180:	32ff      	adds	r2, #255	; 0xff
    9182:	491a      	ldr	r1, [pc, #104]	; (91ec <m2m_wifi_init+0x120>)
    9184:	481a      	ldr	r0, [pc, #104]	; (91f0 <m2m_wifi_init+0x124>)
    9186:	4b10      	ldr	r3, [pc, #64]	; (91c8 <m2m_wifi_init+0xfc>)
    9188:	4798      	blx	r3
    918a:	481a      	ldr	r0, [pc, #104]	; (91f4 <m2m_wifi_init+0x128>)
    918c:	4b1a      	ldr	r3, [pc, #104]	; (91f8 <m2m_wifi_init+0x12c>)
    918e:	4798      	blx	r3
    9190:	200d      	movs	r0, #13
    9192:	4b0f      	ldr	r3, [pc, #60]	; (91d0 <m2m_wifi_init+0x104>)
    9194:	4798      	blx	r3
    9196:	e7ad      	b.n	90f4 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    9198:	2000      	movs	r0, #0
    919a:	4b18      	ldr	r3, [pc, #96]	; (91fc <m2m_wifi_init+0x130>)
    919c:	4798      	blx	r3
    919e:	e7a9      	b.n	90f4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    91a0:	240c      	movs	r4, #12
    91a2:	4264      	negs	r4, r4
    91a4:	e7a6      	b.n	90f4 <m2m_wifi_init+0x28>
    91a6:	46c0      	nop			; (mov r8, r8)
    91a8:	20000210 	.word	0x20000210
    91ac:	20000215 	.word	0x20000215
    91b0:	00009b89 	.word	0x00009b89
    91b4:	00008de9 	.word	0x00008de9
    91b8:	00008e21 	.word	0x00008e21
    91bc:	00008d65 	.word	0x00008d65
    91c0:	00009aa5 	.word	0x00009aa5
    91c4:	0001326c 	.word	0x0001326c
    91c8:	000119b1 	.word	0x000119b1
    91cc:	000133b0 	.word	0x000133b0
    91d0:	000119e5 	.word	0x000119e5
    91d4:	000133d8 	.word	0x000133d8
    91d8:	000133f4 	.word	0x000133f4
    91dc:	00013418 	.word	0x00013418
    91e0:	00013430 	.word	0x00013430
    91e4:	0001343c 	.word	0x0001343c
    91e8:	00013448 	.word	0x00013448
    91ec:	000132b0 	.word	0x000132b0
    91f0:	00012f3c 	.word	0x00012f3c
    91f4:	00013460 	.word	0x00013460
    91f8:	00011acd 	.word	0x00011acd
    91fc:	00009c5d 	.word	0x00009c5d

00009200 <m2m_wifi_deinit>:

sint8  m2m_wifi_deinit(void * arg)
{
    9200:	b510      	push	{r4, lr}

	hif_deinit(NULL);
    9202:	2000      	movs	r0, #0
    9204:	4b03      	ldr	r3, [pc, #12]	; (9214 <m2m_wifi_deinit+0x14>)
    9206:	4798      	blx	r3

	nm_drv_deinit(NULL);
    9208:	2000      	movs	r0, #0
    920a:	4b03      	ldr	r3, [pc, #12]	; (9218 <m2m_wifi_deinit+0x18>)
    920c:	4798      	blx	r3

	return M2M_SUCCESS;
}
    920e:	2000      	movs	r0, #0
    9210:	bd10      	pop	{r4, pc}
    9212:	46c0      	nop			; (mov r8, r8)
    9214:	00008649 	.word	0x00008649
    9218:	00009c5d 	.word	0x00009c5d

0000921c <m2m_wifi_handle_events>:


sint8 m2m_wifi_handle_events(void * arg)
{
    921c:	b510      	push	{r4, lr}
	return hif_handle_isr();
    921e:	4b01      	ldr	r3, [pc, #4]	; (9224 <m2m_wifi_handle_events+0x8>)
    9220:	4798      	blx	r3
}
    9222:	bd10      	pop	{r4, pc}
    9224:	0000889d 	.word	0x0000889d

00009228 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    9228:	b5f0      	push	{r4, r5, r6, r7, lr}
    922a:	46ce      	mov	lr, r9
    922c:	4647      	mov	r7, r8
    922e:	b580      	push	{r7, lr}
    9230:	b0a3      	sub	sp, #140	; 0x8c
    9232:	9005      	str	r0, [sp, #20]
    9234:	000c      	movs	r4, r1
    9236:	0015      	movs	r5, r2
    9238:	001f      	movs	r7, r3
    923a:	ab2a      	add	r3, sp, #168	; 0xa8
    923c:	881b      	ldrh	r3, [r3, #0]
    923e:	4699      	mov	r9, r3
    9240:	ab2b      	add	r3, sp, #172	; 0xac
    9242:	781b      	ldrb	r3, [r3, #0]
    9244:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    9246:	2a01      	cmp	r2, #1
    9248:	d003      	beq.n	9252 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    924a:	2f00      	cmp	r7, #0
    924c:	d040      	beq.n	92d0 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    924e:	2a02      	cmp	r2, #2
    9250:	d04c      	beq.n	92ec <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    9252:	1e63      	subs	r3, r4, #1
    9254:	2b1f      	cmp	r3, #31
    9256:	d900      	bls.n	925a <m2m_wifi_connect_sc+0x32>
    9258:	e078      	b.n	934c <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    925a:	464b      	mov	r3, r9
    925c:	3b01      	subs	r3, #1
    925e:	b29b      	uxth	r3, r3
    9260:	2b0d      	cmp	r3, #13
    9262:	d903      	bls.n	926c <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    9264:	464b      	mov	r3, r9
    9266:	2bff      	cmp	r3, #255	; 0xff
    9268:	d000      	beq.n	926c <m2m_wifi_connect_sc+0x44>
    926a:	e07d      	b.n	9368 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    926c:	ae07      	add	r6, sp, #28
    926e:	0022      	movs	r2, r4
    9270:	9905      	ldr	r1, [sp, #20]
    9272:	205a      	movs	r0, #90	; 0x5a
    9274:	ab02      	add	r3, sp, #8
    9276:	469c      	mov	ip, r3
    9278:	4460      	add	r0, ip
    927a:	4b78      	ldr	r3, [pc, #480]	; (945c <m2m_wifi_connect_sc+0x234>)
    927c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    927e:	1934      	adds	r4, r6, r4
    9280:	3446      	adds	r4, #70	; 0x46
    9282:	2300      	movs	r3, #0
    9284:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    9286:	3344      	adds	r3, #68	; 0x44
    9288:	464a      	mov	r2, r9
    928a:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    928c:	4643      	mov	r3, r8
    928e:	1e5a      	subs	r2, r3, #1
    9290:	4193      	sbcs	r3, r2
    9292:	2267      	movs	r2, #103	; 0x67
    9294:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    9296:	2341      	movs	r3, #65	; 0x41
    9298:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    929a:	2d03      	cmp	r5, #3
    929c:	d100      	bne.n	92a0 <m2m_wifi_connect_sc+0x78>
    929e:	e072      	b.n	9386 <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    92a0:	2d02      	cmp	r5, #2
    92a2:	d100      	bne.n	92a6 <m2m_wifi_connect_sc+0x7e>
    92a4:	e0ab      	b.n	93fe <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    92a6:	2d04      	cmp	r5, #4
    92a8:	d100      	bne.n	92ac <m2m_wifi_connect_sc+0x84>
    92aa:	e0c3      	b.n	9434 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    92ac:	2d01      	cmp	r5, #1
    92ae:	d000      	beq.n	92b2 <m2m_wifi_connect_sc+0x8a>
    92b0:	e0c6      	b.n	9440 <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    92b2:	2300      	movs	r3, #0
    92b4:	9302      	str	r3, [sp, #8]
    92b6:	9301      	str	r3, [sp, #4]
    92b8:	9300      	str	r3, [sp, #0]
    92ba:	336c      	adds	r3, #108	; 0x6c
    92bc:	aa07      	add	r2, sp, #28
    92be:	2128      	movs	r1, #40	; 0x28
    92c0:	2001      	movs	r0, #1
    92c2:	4c67      	ldr	r4, [pc, #412]	; (9460 <m2m_wifi_connect_sc+0x238>)
    92c4:	47a0      	blx	r4

ERR1:
	return ret;
}
    92c6:	b023      	add	sp, #140	; 0x8c
    92c8:	bc0c      	pop	{r2, r3}
    92ca:	4690      	mov	r8, r2
    92cc:	4699      	mov	r9, r3
    92ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    92d0:	4a64      	ldr	r2, [pc, #400]	; (9464 <m2m_wifi_connect_sc+0x23c>)
    92d2:	4965      	ldr	r1, [pc, #404]	; (9468 <m2m_wifi_connect_sc+0x240>)
    92d4:	4865      	ldr	r0, [pc, #404]	; (946c <m2m_wifi_connect_sc+0x244>)
    92d6:	4b66      	ldr	r3, [pc, #408]	; (9470 <m2m_wifi_connect_sc+0x248>)
    92d8:	4798      	blx	r3
    92da:	4866      	ldr	r0, [pc, #408]	; (9474 <m2m_wifi_connect_sc+0x24c>)
    92dc:	4b66      	ldr	r3, [pc, #408]	; (9478 <m2m_wifi_connect_sc+0x250>)
    92de:	4798      	blx	r3
    92e0:	200d      	movs	r0, #13
    92e2:	4b66      	ldr	r3, [pc, #408]	; (947c <m2m_wifi_connect_sc+0x254>)
    92e4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    92e6:	200c      	movs	r0, #12
    92e8:	4240      	negs	r0, r0
			goto ERR1;
    92ea:	e7ec      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    92ec:	0038      	movs	r0, r7
    92ee:	4b64      	ldr	r3, [pc, #400]	; (9480 <m2m_wifi_connect_sc+0x258>)
    92f0:	4798      	blx	r3
    92f2:	2840      	cmp	r0, #64	; 0x40
    92f4:	d1ad      	bne.n	9252 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    92f6:	783b      	ldrb	r3, [r7, #0]
    92f8:	001a      	movs	r2, r3
    92fa:	3a30      	subs	r2, #48	; 0x30
    92fc:	2a36      	cmp	r2, #54	; 0x36
    92fe:	d817      	bhi.n	9330 <m2m_wifi_connect_sc+0x108>
    9300:	3a0a      	subs	r2, #10
    9302:	2a06      	cmp	r2, #6
    9304:	d914      	bls.n	9330 <m2m_wifi_connect_sc+0x108>
    9306:	3b47      	subs	r3, #71	; 0x47
    9308:	2b19      	cmp	r3, #25
    930a:	d911      	bls.n	9330 <m2m_wifi_connect_sc+0x108>
    930c:	1c7a      	adds	r2, r7, #1
    930e:	0038      	movs	r0, r7
    9310:	3040      	adds	r0, #64	; 0x40
    9312:	7813      	ldrb	r3, [r2, #0]
    9314:	0019      	movs	r1, r3
    9316:	3930      	subs	r1, #48	; 0x30
    9318:	2936      	cmp	r1, #54	; 0x36
    931a:	d809      	bhi.n	9330 <m2m_wifi_connect_sc+0x108>
    931c:	390a      	subs	r1, #10
    931e:	2906      	cmp	r1, #6
    9320:	d906      	bls.n	9330 <m2m_wifi_connect_sc+0x108>
    9322:	3b47      	subs	r3, #71	; 0x47
    9324:	2b19      	cmp	r3, #25
    9326:	d903      	bls.n	9330 <m2m_wifi_connect_sc+0x108>
    9328:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    932a:	4282      	cmp	r2, r0
    932c:	d1f1      	bne.n	9312 <m2m_wifi_connect_sc+0xea>
    932e:	e790      	b.n	9252 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    9330:	4a54      	ldr	r2, [pc, #336]	; (9484 <m2m_wifi_connect_sc+0x25c>)
    9332:	494d      	ldr	r1, [pc, #308]	; (9468 <m2m_wifi_connect_sc+0x240>)
    9334:	484d      	ldr	r0, [pc, #308]	; (946c <m2m_wifi_connect_sc+0x244>)
    9336:	4b4e      	ldr	r3, [pc, #312]	; (9470 <m2m_wifi_connect_sc+0x248>)
    9338:	4798      	blx	r3
    933a:	4853      	ldr	r0, [pc, #332]	; (9488 <m2m_wifi_connect_sc+0x260>)
    933c:	4b4e      	ldr	r3, [pc, #312]	; (9478 <m2m_wifi_connect_sc+0x250>)
    933e:	4798      	blx	r3
    9340:	200d      	movs	r0, #13
    9342:	4b4e      	ldr	r3, [pc, #312]	; (947c <m2m_wifi_connect_sc+0x254>)
    9344:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    9346:	200c      	movs	r0, #12
    9348:	4240      	negs	r0, r0
					goto ERR1;
    934a:	e7bc      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    934c:	4a4f      	ldr	r2, [pc, #316]	; (948c <m2m_wifi_connect_sc+0x264>)
    934e:	4946      	ldr	r1, [pc, #280]	; (9468 <m2m_wifi_connect_sc+0x240>)
    9350:	4846      	ldr	r0, [pc, #280]	; (946c <m2m_wifi_connect_sc+0x244>)
    9352:	4b47      	ldr	r3, [pc, #284]	; (9470 <m2m_wifi_connect_sc+0x248>)
    9354:	4798      	blx	r3
    9356:	484e      	ldr	r0, [pc, #312]	; (9490 <m2m_wifi_connect_sc+0x268>)
    9358:	4b47      	ldr	r3, [pc, #284]	; (9478 <m2m_wifi_connect_sc+0x250>)
    935a:	4798      	blx	r3
    935c:	200d      	movs	r0, #13
    935e:	4b47      	ldr	r3, [pc, #284]	; (947c <m2m_wifi_connect_sc+0x254>)
    9360:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    9362:	200c      	movs	r0, #12
    9364:	4240      	negs	r0, r0
		goto ERR1;
    9366:	e7ae      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    9368:	228d      	movs	r2, #141	; 0x8d
    936a:	0092      	lsls	r2, r2, #2
    936c:	493e      	ldr	r1, [pc, #248]	; (9468 <m2m_wifi_connect_sc+0x240>)
    936e:	483f      	ldr	r0, [pc, #252]	; (946c <m2m_wifi_connect_sc+0x244>)
    9370:	4b3f      	ldr	r3, [pc, #252]	; (9470 <m2m_wifi_connect_sc+0x248>)
    9372:	4798      	blx	r3
    9374:	4847      	ldr	r0, [pc, #284]	; (9494 <m2m_wifi_connect_sc+0x26c>)
    9376:	4b40      	ldr	r3, [pc, #256]	; (9478 <m2m_wifi_connect_sc+0x250>)
    9378:	4798      	blx	r3
    937a:	200d      	movs	r0, #13
    937c:	4b3f      	ldr	r3, [pc, #252]	; (947c <m2m_wifi_connect_sc+0x254>)
    937e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    9380:	200c      	movs	r0, #12
    9382:	4240      	negs	r0, r0
			goto ERR1;
    9384:	e79f      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    9386:	783b      	ldrb	r3, [r7, #0]
    9388:	3b01      	subs	r3, #1
    938a:	b2db      	uxtb	r3, r3
    938c:	aa07      	add	r2, sp, #28
    938e:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    9390:	2b03      	cmp	r3, #3
    9392:	d817      	bhi.n	93c4 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    9394:	787a      	ldrb	r2, [r7, #1]
    9396:	1e51      	subs	r1, r2, #1
    9398:	ab07      	add	r3, sp, #28
    939a:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    939c:	2310      	movs	r3, #16
    939e:	0011      	movs	r1, r2
    93a0:	4399      	bics	r1, r3
    93a2:	290b      	cmp	r1, #11
    93a4:	d01d      	beq.n	93e2 <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    93a6:	4a3c      	ldr	r2, [pc, #240]	; (9498 <m2m_wifi_connect_sc+0x270>)
    93a8:	492f      	ldr	r1, [pc, #188]	; (9468 <m2m_wifi_connect_sc+0x240>)
    93aa:	4830      	ldr	r0, [pc, #192]	; (946c <m2m_wifi_connect_sc+0x244>)
    93ac:	4c30      	ldr	r4, [pc, #192]	; (9470 <m2m_wifi_connect_sc+0x248>)
    93ae:	47a0      	blx	r4
    93b0:	ab07      	add	r3, sp, #28
    93b2:	7859      	ldrb	r1, [r3, #1]
    93b4:	4839      	ldr	r0, [pc, #228]	; (949c <m2m_wifi_connect_sc+0x274>)
    93b6:	47a0      	blx	r4
    93b8:	200d      	movs	r0, #13
    93ba:	4b30      	ldr	r3, [pc, #192]	; (947c <m2m_wifi_connect_sc+0x254>)
    93bc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    93be:	200c      	movs	r0, #12
    93c0:	4240      	negs	r0, r0
			goto ERR1;
    93c2:	e780      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    93c4:	4a36      	ldr	r2, [pc, #216]	; (94a0 <m2m_wifi_connect_sc+0x278>)
    93c6:	4928      	ldr	r1, [pc, #160]	; (9468 <m2m_wifi_connect_sc+0x240>)
    93c8:	4828      	ldr	r0, [pc, #160]	; (946c <m2m_wifi_connect_sc+0x244>)
    93ca:	4c29      	ldr	r4, [pc, #164]	; (9470 <m2m_wifi_connect_sc+0x248>)
    93cc:	47a0      	blx	r4
    93ce:	ab07      	add	r3, sp, #28
    93d0:	7819      	ldrb	r1, [r3, #0]
    93d2:	4834      	ldr	r0, [pc, #208]	; (94a4 <m2m_wifi_connect_sc+0x27c>)
    93d4:	47a0      	blx	r4
    93d6:	200d      	movs	r0, #13
    93d8:	4b28      	ldr	r3, [pc, #160]	; (947c <m2m_wifi_connect_sc+0x254>)
    93da:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    93dc:	200c      	movs	r0, #12
    93de:	4240      	negs	r0, r0
			goto ERR1;
    93e0:	e771      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    93e2:	1cb9      	adds	r1, r7, #2
    93e4:	2016      	movs	r0, #22
    93e6:	ab02      	add	r3, sp, #8
    93e8:	469c      	mov	ip, r3
    93ea:	4460      	add	r0, ip
    93ec:	4b1b      	ldr	r3, [pc, #108]	; (945c <m2m_wifi_connect_sc+0x234>)
    93ee:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    93f0:	787b      	ldrb	r3, [r7, #1]
    93f2:	aa07      	add	r2, sp, #28
    93f4:	4694      	mov	ip, r2
    93f6:	4463      	add	r3, ip
    93f8:	2200      	movs	r2, #0
    93fa:	709a      	strb	r2, [r3, #2]
    93fc:	e759      	b.n	92b2 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    93fe:	0038      	movs	r0, r7
    9400:	4b1f      	ldr	r3, [pc, #124]	; (9480 <m2m_wifi_connect_sc+0x258>)
    9402:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    9404:	1e43      	subs	r3, r0, #1
    9406:	b29b      	uxth	r3, r3
    9408:	2b3f      	cmp	r3, #63	; 0x3f
    940a:	d805      	bhi.n	9418 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    940c:	1c42      	adds	r2, r0, #1
    940e:	0039      	movs	r1, r7
    9410:	a807      	add	r0, sp, #28
    9412:	4b12      	ldr	r3, [pc, #72]	; (945c <m2m_wifi_connect_sc+0x234>)
    9414:	4798      	blx	r3
    9416:	e74c      	b.n	92b2 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    9418:	4a23      	ldr	r2, [pc, #140]	; (94a8 <m2m_wifi_connect_sc+0x280>)
    941a:	4913      	ldr	r1, [pc, #76]	; (9468 <m2m_wifi_connect_sc+0x240>)
    941c:	4813      	ldr	r0, [pc, #76]	; (946c <m2m_wifi_connect_sc+0x244>)
    941e:	4b14      	ldr	r3, [pc, #80]	; (9470 <m2m_wifi_connect_sc+0x248>)
    9420:	4798      	blx	r3
    9422:	4822      	ldr	r0, [pc, #136]	; (94ac <m2m_wifi_connect_sc+0x284>)
    9424:	4b14      	ldr	r3, [pc, #80]	; (9478 <m2m_wifi_connect_sc+0x250>)
    9426:	4798      	blx	r3
    9428:	200d      	movs	r0, #13
    942a:	4b14      	ldr	r3, [pc, #80]	; (947c <m2m_wifi_connect_sc+0x254>)
    942c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    942e:	200c      	movs	r0, #12
    9430:	4240      	negs	r0, r0
			goto ERR1;
    9432:	e748      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    9434:	223e      	movs	r2, #62	; 0x3e
    9436:	0039      	movs	r1, r7
    9438:	a807      	add	r0, sp, #28
    943a:	4b08      	ldr	r3, [pc, #32]	; (945c <m2m_wifi_connect_sc+0x234>)
    943c:	4798      	blx	r3
    943e:	e738      	b.n	92b2 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    9440:	4a1b      	ldr	r2, [pc, #108]	; (94b0 <m2m_wifi_connect_sc+0x288>)
    9442:	4909      	ldr	r1, [pc, #36]	; (9468 <m2m_wifi_connect_sc+0x240>)
    9444:	4809      	ldr	r0, [pc, #36]	; (946c <m2m_wifi_connect_sc+0x244>)
    9446:	4b0a      	ldr	r3, [pc, #40]	; (9470 <m2m_wifi_connect_sc+0x248>)
    9448:	4798      	blx	r3
    944a:	481a      	ldr	r0, [pc, #104]	; (94b4 <m2m_wifi_connect_sc+0x28c>)
    944c:	4b0a      	ldr	r3, [pc, #40]	; (9478 <m2m_wifi_connect_sc+0x250>)
    944e:	4798      	blx	r3
    9450:	200d      	movs	r0, #13
    9452:	4b0a      	ldr	r3, [pc, #40]	; (947c <m2m_wifi_connect_sc+0x254>)
    9454:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    9456:	200c      	movs	r0, #12
    9458:	4240      	negs	r0, r0
		goto ERR1;
    945a:	e734      	b.n	92c6 <m2m_wifi_connect_sc+0x9e>
    945c:	00008521 	.word	0x00008521
    9460:	0000866d 	.word	0x0000866d
    9464:	00000215 	.word	0x00000215
    9468:	000132c0 	.word	0x000132c0
    946c:	00012f3c 	.word	0x00012f3c
    9470:	000119b1 	.word	0x000119b1
    9474:	00013308 	.word	0x00013308
    9478:	00011acd 	.word	0x00011acd
    947c:	000119e5 	.word	0x000119e5
    9480:	00008545 	.word	0x00008545
    9484:	00000221 	.word	0x00000221
    9488:	0001331c 	.word	0x0001331c
    948c:	0000022b 	.word	0x0000022b
    9490:	00013328 	.word	0x00013328
    9494:	0001333c 	.word	0x0001333c
    9498:	00000252 	.word	0x00000252
    949c:	00013364 	.word	0x00013364
    94a0:	0000024b 	.word	0x0000024b
    94a4:	00013348 	.word	0x00013348
    94a8:	00000261 	.word	0x00000261
    94ac:	00013380 	.word	0x00013380
    94b0:	00000271 	.word	0x00000271
    94b4:	0001339c 	.word	0x0001339c

000094b8 <m2m_wifi_connect>:
{
    94b8:	b530      	push	{r4, r5, lr}
    94ba:	b083      	sub	sp, #12
    94bc:	ac06      	add	r4, sp, #24
    94be:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    94c0:	2500      	movs	r5, #0
    94c2:	9501      	str	r5, [sp, #4]
    94c4:	9400      	str	r4, [sp, #0]
    94c6:	4c02      	ldr	r4, [pc, #8]	; (94d0 <m2m_wifi_connect+0x18>)
    94c8:	47a0      	blx	r4
}
    94ca:	b003      	add	sp, #12
    94cc:	bd30      	pop	{r4, r5, pc}
    94ce:	46c0      	nop			; (mov r8, r8)
    94d0:	00009229 	.word	0x00009229

000094d4 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    94d4:	2000      	movs	r0, #0
    94d6:	4770      	bx	lr

000094d8 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    94d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    94da:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    94dc:	2580      	movs	r5, #128	; 0x80
    94de:	006d      	lsls	r5, r5, #1
    94e0:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    94e2:	24a5      	movs	r4, #165	; 0xa5
    94e4:	0164      	lsls	r4, r4, #5
    94e6:	4f08      	ldr	r7, [pc, #32]	; (9508 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    94e8:	4e08      	ldr	r6, [pc, #32]	; (950c <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    94ea:	0029      	movs	r1, r5
    94ec:	0020      	movs	r0, r4
    94ee:	47b8      	blx	r7
			uint32 reg = 0;
    94f0:	2300      	movs	r3, #0
    94f2:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    94f4:	a901      	add	r1, sp, #4
    94f6:	0020      	movs	r0, r4
    94f8:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    94fa:	2800      	cmp	r0, #0
    94fc:	d1f5      	bne.n	94ea <chip_apply_conf+0x12>
				if(reg == val32)
    94fe:	9b01      	ldr	r3, [sp, #4]
    9500:	429d      	cmp	r5, r3
    9502:	d1f2      	bne.n	94ea <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    9504:	b003      	add	sp, #12
    9506:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9508:	000099c9 	.word	0x000099c9
    950c:	000099bd 	.word	0x000099bd

00009510 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    9510:	b500      	push	{lr}
    9512:	b083      	sub	sp, #12
	uint32 reg = 0;
    9514:	2300      	movs	r3, #0
    9516:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    9518:	a901      	add	r1, sp, #4
    951a:	4811      	ldr	r0, [pc, #68]	; (9560 <enable_interrupts+0x50>)
    951c:	4b11      	ldr	r3, [pc, #68]	; (9564 <enable_interrupts+0x54>)
    951e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    9520:	2800      	cmp	r0, #0
    9522:	d001      	beq.n	9528 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    9524:	b003      	add	sp, #12
    9526:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    9528:	2180      	movs	r1, #128	; 0x80
    952a:	0049      	lsls	r1, r1, #1
    952c:	9b01      	ldr	r3, [sp, #4]
    952e:	4319      	orrs	r1, r3
    9530:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    9532:	480b      	ldr	r0, [pc, #44]	; (9560 <enable_interrupts+0x50>)
    9534:	4b0c      	ldr	r3, [pc, #48]	; (9568 <enable_interrupts+0x58>)
    9536:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    9538:	2800      	cmp	r0, #0
    953a:	d1f3      	bne.n	9524 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    953c:	a901      	add	r1, sp, #4
    953e:	20d0      	movs	r0, #208	; 0xd0
    9540:	0140      	lsls	r0, r0, #5
    9542:	4b08      	ldr	r3, [pc, #32]	; (9564 <enable_interrupts+0x54>)
    9544:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    9546:	2800      	cmp	r0, #0
    9548:	d1ec      	bne.n	9524 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    954a:	2180      	movs	r1, #128	; 0x80
    954c:	0249      	lsls	r1, r1, #9
    954e:	9b01      	ldr	r3, [sp, #4]
    9550:	4319      	orrs	r1, r3
    9552:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    9554:	20d0      	movs	r0, #208	; 0xd0
    9556:	0140      	lsls	r0, r0, #5
    9558:	4b03      	ldr	r3, [pc, #12]	; (9568 <enable_interrupts+0x58>)
    955a:	4798      	blx	r3
    955c:	e7e2      	b.n	9524 <enable_interrupts+0x14>
    955e:	46c0      	nop			; (mov r8, r8)
    9560:	00001408 	.word	0x00001408
    9564:	000099bd 	.word	0x000099bd
    9568:	000099c9 	.word	0x000099c9

0000956c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    956c:	b510      	push	{r4, lr}
    956e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    9570:	4b28      	ldr	r3, [pc, #160]	; (9614 <nmi_get_chipid+0xa8>)
    9572:	681c      	ldr	r4, [r3, #0]
    9574:	2c00      	cmp	r4, #0
    9576:	d004      	beq.n	9582 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    9578:	4b26      	ldr	r3, [pc, #152]	; (9614 <nmi_get_chipid+0xa8>)
    957a:	681c      	ldr	r4, [r3, #0]
}
    957c:	0020      	movs	r0, r4
    957e:	b002      	add	sp, #8
    9580:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    9582:	0019      	movs	r1, r3
    9584:	2080      	movs	r0, #128	; 0x80
    9586:	0140      	lsls	r0, r0, #5
    9588:	4b23      	ldr	r3, [pc, #140]	; (9618 <nmi_get_chipid+0xac>)
    958a:	4798      	blx	r3
    958c:	2800      	cmp	r0, #0
    958e:	d003      	beq.n	9598 <nmi_get_chipid+0x2c>
			chipid = 0;
    9590:	2200      	movs	r2, #0
    9592:	4b20      	ldr	r3, [pc, #128]	; (9614 <nmi_get_chipid+0xa8>)
    9594:	601a      	str	r2, [r3, #0]
			return 0;
    9596:	e7f1      	b.n	957c <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    9598:	a901      	add	r1, sp, #4
    959a:	4820      	ldr	r0, [pc, #128]	; (961c <nmi_get_chipid+0xb0>)
    959c:	4b1e      	ldr	r3, [pc, #120]	; (9618 <nmi_get_chipid+0xac>)
    959e:	4798      	blx	r3
    95a0:	2800      	cmp	r0, #0
    95a2:	d003      	beq.n	95ac <nmi_get_chipid+0x40>
			chipid = 0;
    95a4:	2200      	movs	r2, #0
    95a6:	4b1b      	ldr	r3, [pc, #108]	; (9614 <nmi_get_chipid+0xa8>)
    95a8:	601a      	str	r2, [r3, #0]
			return 0;
    95aa:	e7e7      	b.n	957c <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    95ac:	4b19      	ldr	r3, [pc, #100]	; (9614 <nmi_get_chipid+0xa8>)
    95ae:	681b      	ldr	r3, [r3, #0]
    95b0:	4a1b      	ldr	r2, [pc, #108]	; (9620 <nmi_get_chipid+0xb4>)
    95b2:	4293      	cmp	r3, r2
    95b4:	d00e      	beq.n	95d4 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    95b6:	4a1b      	ldr	r2, [pc, #108]	; (9624 <nmi_get_chipid+0xb8>)
    95b8:	4293      	cmp	r3, r2
    95ba:	d012      	beq.n	95e2 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    95bc:	4a1a      	ldr	r2, [pc, #104]	; (9628 <nmi_get_chipid+0xbc>)
    95be:	4293      	cmp	r3, r2
    95c0:	d01c      	beq.n	95fc <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    95c2:	4914      	ldr	r1, [pc, #80]	; (9614 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    95c4:	4a19      	ldr	r2, [pc, #100]	; (962c <nmi_get_chipid+0xc0>)
    95c6:	680b      	ldr	r3, [r1, #0]
    95c8:	401a      	ands	r2, r3
		chipid |= 0x050000;
    95ca:	23a0      	movs	r3, #160	; 0xa0
    95cc:	02db      	lsls	r3, r3, #11
    95ce:	4313      	orrs	r3, r2
    95d0:	600b      	str	r3, [r1, #0]
    95d2:	e7d1      	b.n	9578 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    95d4:	9b01      	ldr	r3, [sp, #4]
    95d6:	2b01      	cmp	r3, #1
    95d8:	d0f3      	beq.n	95c2 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    95da:	4a15      	ldr	r2, [pc, #84]	; (9630 <nmi_get_chipid+0xc4>)
    95dc:	4b0d      	ldr	r3, [pc, #52]	; (9614 <nmi_get_chipid+0xa8>)
    95de:	601a      	str	r2, [r3, #0]
    95e0:	e7ef      	b.n	95c2 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    95e2:	9b01      	ldr	r3, [sp, #4]
    95e4:	2b03      	cmp	r3, #3
    95e6:	d0ec      	beq.n	95c2 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    95e8:	2b04      	cmp	r3, #4
    95ea:	d003      	beq.n	95f4 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    95ec:	4a11      	ldr	r2, [pc, #68]	; (9634 <nmi_get_chipid+0xc8>)
    95ee:	4b09      	ldr	r3, [pc, #36]	; (9614 <nmi_get_chipid+0xa8>)
    95f0:	601a      	str	r2, [r3, #0]
    95f2:	e7e6      	b.n	95c2 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    95f4:	4a10      	ldr	r2, [pc, #64]	; (9638 <nmi_get_chipid+0xcc>)
    95f6:	4b07      	ldr	r3, [pc, #28]	; (9614 <nmi_get_chipid+0xa8>)
    95f8:	601a      	str	r2, [r3, #0]
    95fa:	e7e2      	b.n	95c2 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    95fc:	4905      	ldr	r1, [pc, #20]	; (9614 <nmi_get_chipid+0xa8>)
    95fe:	20ec      	movs	r0, #236	; 0xec
    9600:	0380      	lsls	r0, r0, #14
    9602:	4b05      	ldr	r3, [pc, #20]	; (9618 <nmi_get_chipid+0xac>)
    9604:	4798      	blx	r3
    9606:	2800      	cmp	r0, #0
    9608:	d0db      	beq.n	95c2 <nmi_get_chipid+0x56>
			chipid = 0;
    960a:	2200      	movs	r2, #0
    960c:	4b01      	ldr	r3, [pc, #4]	; (9614 <nmi_get_chipid+0xa8>)
    960e:	601a      	str	r2, [r3, #0]
			return 0;
    9610:	e7b4      	b.n	957c <nmi_get_chipid+0x10>
    9612:	46c0      	nop			; (mov r8, r8)
    9614:	20000218 	.word	0x20000218
    9618:	000099bd 	.word	0x000099bd
    961c:	000013f4 	.word	0x000013f4
    9620:	001002a0 	.word	0x001002a0
    9624:	001002b0 	.word	0x001002b0
    9628:	001000f0 	.word	0x001000f0
    962c:	fff0ffff 	.word	0xfff0ffff
    9630:	001002a1 	.word	0x001002a1
    9634:	001002b2 	.word	0x001002b2
    9638:	001002b1 	.word	0x001002b1

0000963c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    963c:	b530      	push	{r4, r5, lr}
    963e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    9640:	4c16      	ldr	r4, [pc, #88]	; (969c <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    9642:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    9644:	a901      	add	r1, sp, #4
    9646:	2010      	movs	r0, #16
    9648:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    964a:	2800      	cmp	r0, #0
    964c:	d11c      	bne.n	9688 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    964e:	9b01      	ldr	r3, [sp, #4]
    9650:	422b      	tst	r3, r5
    9652:	d1f7      	bne.n	9644 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    9654:	a901      	add	r1, sp, #4
    9656:	3001      	adds	r0, #1
    9658:	4b10      	ldr	r3, [pc, #64]	; (969c <chip_sleep+0x60>)
    965a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    965c:	2800      	cmp	r0, #0
    965e:	d113      	bne.n	9688 <chip_sleep+0x4c>
	if(reg & NBIT1)
    9660:	9901      	ldr	r1, [sp, #4]
    9662:	078b      	lsls	r3, r1, #30
    9664:	d507      	bpl.n	9676 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    9666:	2302      	movs	r3, #2
    9668:	4399      	bics	r1, r3
    966a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    966c:	3001      	adds	r0, #1
    966e:	4b0c      	ldr	r3, [pc, #48]	; (96a0 <chip_sleep+0x64>)
    9670:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    9672:	2800      	cmp	r0, #0
    9674:	d108      	bne.n	9688 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    9676:	a901      	add	r1, sp, #4
    9678:	200b      	movs	r0, #11
    967a:	4b08      	ldr	r3, [pc, #32]	; (969c <chip_sleep+0x60>)
    967c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    967e:	2800      	cmp	r0, #0
    9680:	d102      	bne.n	9688 <chip_sleep+0x4c>
	if(reg & NBIT0)
    9682:	9901      	ldr	r1, [sp, #4]
    9684:	07cb      	lsls	r3, r1, #31
    9686:	d401      	bmi.n	968c <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    9688:	b003      	add	sp, #12
    968a:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    968c:	2301      	movs	r3, #1
    968e:	4399      	bics	r1, r3
    9690:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    9692:	300b      	adds	r0, #11
    9694:	4b02      	ldr	r3, [pc, #8]	; (96a0 <chip_sleep+0x64>)
    9696:	4798      	blx	r3
    9698:	e7f6      	b.n	9688 <chip_sleep+0x4c>
    969a:	46c0      	nop			; (mov r8, r8)
    969c:	000099bd 	.word	0x000099bd
    96a0:	000099c9 	.word	0x000099c9

000096a4 <chip_wake>:
sint8 chip_wake(void)
{
    96a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    96a6:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    96a8:	2300      	movs	r3, #0
    96aa:	9301      	str	r3, [sp, #4]
    96ac:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    96ae:	a901      	add	r1, sp, #4
    96b0:	200b      	movs	r0, #11
    96b2:	4b28      	ldr	r3, [pc, #160]	; (9754 <chip_wake+0xb0>)
    96b4:	4798      	blx	r3
    96b6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    96b8:	d130      	bne.n	971c <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    96ba:	9901      	ldr	r1, [sp, #4]
    96bc:	07cb      	lsls	r3, r1, #31
    96be:	d406      	bmi.n	96ce <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    96c0:	2301      	movs	r3, #1
    96c2:	4319      	orrs	r1, r3
    96c4:	200b      	movs	r0, #11
    96c6:	4b24      	ldr	r3, [pc, #144]	; (9758 <chip_wake+0xb4>)
    96c8:	4798      	blx	r3
    96ca:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    96cc:	d126      	bne.n	971c <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    96ce:	a901      	add	r1, sp, #4
    96d0:	2001      	movs	r0, #1
    96d2:	4b20      	ldr	r3, [pc, #128]	; (9754 <chip_wake+0xb0>)
    96d4:	4798      	blx	r3
    96d6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    96d8:	d120      	bne.n	971c <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    96da:	9901      	ldr	r1, [sp, #4]
    96dc:	078b      	lsls	r3, r1, #30
    96de:	d520      	bpl.n	9722 <chip_wake+0x7e>
{
    96e0:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    96e2:	4f1c      	ldr	r7, [pc, #112]	; (9754 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    96e4:	4e1d      	ldr	r6, [pc, #116]	; (975c <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    96e6:	4669      	mov	r1, sp
    96e8:	200f      	movs	r0, #15
    96ea:	47b8      	blx	r7
    96ec:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    96ee:	d120      	bne.n	9732 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    96f0:	9b00      	ldr	r3, [sp, #0]
    96f2:	075b      	lsls	r3, r3, #29
    96f4:	d42b      	bmi.n	974e <chip_wake+0xaa>
		nm_bsp_sleep(2);
    96f6:	2002      	movs	r0, #2
    96f8:	47b0      	blx	r6
    96fa:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    96fc:	2d00      	cmp	r5, #0
    96fe:	d1f2      	bne.n	96e6 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    9700:	22af      	movs	r2, #175	; 0xaf
    9702:	0052      	lsls	r2, r2, #1
    9704:	4916      	ldr	r1, [pc, #88]	; (9760 <chip_wake+0xbc>)
    9706:	4817      	ldr	r0, [pc, #92]	; (9764 <chip_wake+0xc0>)
    9708:	4b17      	ldr	r3, [pc, #92]	; (9768 <chip_wake+0xc4>)
    970a:	4798      	blx	r3
    970c:	4817      	ldr	r0, [pc, #92]	; (976c <chip_wake+0xc8>)
    970e:	4b18      	ldr	r3, [pc, #96]	; (9770 <chip_wake+0xcc>)
    9710:	4798      	blx	r3
    9712:	200d      	movs	r0, #13
    9714:	4b17      	ldr	r3, [pc, #92]	; (9774 <chip_wake+0xd0>)
    9716:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    9718:	2404      	movs	r4, #4
    971a:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    971c:	0020      	movs	r0, r4
    971e:	b003      	add	sp, #12
    9720:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    9722:	2302      	movs	r3, #2
    9724:	4319      	orrs	r1, r3
    9726:	2001      	movs	r0, #1
    9728:	4b0b      	ldr	r3, [pc, #44]	; (9758 <chip_wake+0xb4>)
    972a:	4798      	blx	r3
    972c:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    972e:	d0d7      	beq.n	96e0 <chip_wake+0x3c>
    9730:	e7f4      	b.n	971c <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    9732:	22aa      	movs	r2, #170	; 0xaa
    9734:	0052      	lsls	r2, r2, #1
    9736:	490a      	ldr	r1, [pc, #40]	; (9760 <chip_wake+0xbc>)
    9738:	480a      	ldr	r0, [pc, #40]	; (9764 <chip_wake+0xc0>)
    973a:	4d0b      	ldr	r5, [pc, #44]	; (9768 <chip_wake+0xc4>)
    973c:	47a8      	blx	r5
    973e:	9a00      	ldr	r2, [sp, #0]
    9740:	0021      	movs	r1, r4
    9742:	480d      	ldr	r0, [pc, #52]	; (9778 <chip_wake+0xd4>)
    9744:	47a8      	blx	r5
    9746:	200d      	movs	r0, #13
    9748:	4b0a      	ldr	r3, [pc, #40]	; (9774 <chip_wake+0xd0>)
    974a:	4798      	blx	r3
			goto _WAKE_EXIT;
    974c:	e7e6      	b.n	971c <chip_wake+0x78>
	nm_bus_reset();
    974e:	4b0b      	ldr	r3, [pc, #44]	; (977c <chip_wake+0xd8>)
    9750:	4798      	blx	r3
    9752:	e7e3      	b.n	971c <chip_wake+0x78>
    9754:	000099bd 	.word	0x000099bd
    9758:	000099c9 	.word	0x000099c9
    975c:	00008129 	.word	0x00008129
    9760:	0001347c 	.word	0x0001347c
    9764:	00012f3c 	.word	0x00012f3c
    9768:	000119b1 	.word	0x000119b1
    976c:	000134c4 	.word	0x000134c4
    9770:	00011acd 	.word	0x00011acd
    9774:	000119e5 	.word	0x000119e5
    9778:	000134ac 	.word	0x000134ac
    977c:	000099a5 	.word	0x000099a5

00009780 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    9780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9782:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    9784:	4d2d      	ldr	r5, [pc, #180]	; (983c <wait_for_bootrom+0xbc>)
    9786:	4c2e      	ldr	r4, [pc, #184]	; (9840 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    9788:	4e2e      	ldr	r6, [pc, #184]	; (9844 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    978a:	0028      	movs	r0, r5
    978c:	47a0      	blx	r4
		if (reg & 0x80000000) {
    978e:	2800      	cmp	r0, #0
    9790:	db02      	blt.n	9798 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    9792:	2001      	movs	r0, #1
    9794:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    9796:	e7f8      	b.n	978a <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    9798:	482b      	ldr	r0, [pc, #172]	; (9848 <wait_for_bootrom+0xc8>)
    979a:	4b29      	ldr	r3, [pc, #164]	; (9840 <wait_for_bootrom+0xc0>)
    979c:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    979e:	07c3      	lsls	r3, r0, #31
    97a0:	d409      	bmi.n	97b6 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    97a2:	4e28      	ldr	r6, [pc, #160]	; (9844 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    97a4:	4c29      	ldr	r4, [pc, #164]	; (984c <wait_for_bootrom+0xcc>)
    97a6:	4d26      	ldr	r5, [pc, #152]	; (9840 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    97a8:	2001      	movs	r0, #1
    97aa:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    97ac:	0020      	movs	r0, r4
    97ae:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    97b0:	4b27      	ldr	r3, [pc, #156]	; (9850 <wait_for_bootrom+0xd0>)
    97b2:	4298      	cmp	r0, r3
    97b4:	d1f8      	bne.n	97a8 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    97b6:	2f02      	cmp	r7, #2
    97b8:	d021      	beq.n	97fe <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    97ba:	2f03      	cmp	r7, #3
    97bc:	d029      	beq.n	9812 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    97be:	2f04      	cmp	r7, #4
    97c0:	d030      	beq.n	9824 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    97c2:	4924      	ldr	r1, [pc, #144]	; (9854 <wait_for_bootrom+0xd4>)
    97c4:	4824      	ldr	r0, [pc, #144]	; (9858 <wait_for_bootrom+0xd8>)
    97c6:	4b25      	ldr	r3, [pc, #148]	; (985c <wait_for_bootrom+0xdc>)
    97c8:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    97ca:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    97cc:	4b24      	ldr	r3, [pc, #144]	; (9860 <wait_for_bootrom+0xe0>)
    97ce:	4798      	blx	r3
    97d0:	0500      	lsls	r0, r0, #20
    97d2:	0d00      	lsrs	r0, r0, #20
    97d4:	4b23      	ldr	r3, [pc, #140]	; (9864 <wait_for_bootrom+0xe4>)
    97d6:	4298      	cmp	r0, r3
    97d8:	d82a      	bhi.n	9830 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    97da:	0020      	movs	r0, r4
    97dc:	4b22      	ldr	r3, [pc, #136]	; (9868 <wait_for_bootrom+0xe8>)
    97de:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    97e0:	4822      	ldr	r0, [pc, #136]	; (986c <wait_for_bootrom+0xec>)
    97e2:	4c23      	ldr	r4, [pc, #140]	; (9870 <wait_for_bootrom+0xf0>)
    97e4:	47a0      	blx	r4
    97e6:	491b      	ldr	r1, [pc, #108]	; (9854 <wait_for_bootrom+0xd4>)
    97e8:	4822      	ldr	r0, [pc, #136]	; (9874 <wait_for_bootrom+0xf4>)
    97ea:	47a0      	blx	r4
    97ec:	200d      	movs	r0, #13
    97ee:	4b22      	ldr	r3, [pc, #136]	; (9878 <wait_for_bootrom+0xf8>)
    97f0:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    97f2:	4922      	ldr	r1, [pc, #136]	; (987c <wait_for_bootrom+0xfc>)
    97f4:	4815      	ldr	r0, [pc, #84]	; (984c <wait_for_bootrom+0xcc>)
    97f6:	4b19      	ldr	r3, [pc, #100]	; (985c <wait_for_bootrom+0xdc>)
    97f8:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    97fa:	2000      	movs	r0, #0
    97fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    97fe:	4920      	ldr	r1, [pc, #128]	; (9880 <wait_for_bootrom+0x100>)
    9800:	4820      	ldr	r0, [pc, #128]	; (9884 <wait_for_bootrom+0x104>)
    9802:	4c16      	ldr	r4, [pc, #88]	; (985c <wait_for_bootrom+0xdc>)
    9804:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    9806:	2180      	movs	r1, #128	; 0x80
    9808:	0349      	lsls	r1, r1, #13
    980a:	4813      	ldr	r0, [pc, #76]	; (9858 <wait_for_bootrom+0xd8>)
    980c:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    980e:	2400      	movs	r4, #0
    9810:	e7dc      	b.n	97cc <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    9812:	491b      	ldr	r1, [pc, #108]	; (9880 <wait_for_bootrom+0x100>)
    9814:	481b      	ldr	r0, [pc, #108]	; (9884 <wait_for_bootrom+0x104>)
    9816:	4c11      	ldr	r4, [pc, #68]	; (985c <wait_for_bootrom+0xdc>)
    9818:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    981a:	2100      	movs	r1, #0
    981c:	480e      	ldr	r0, [pc, #56]	; (9858 <wait_for_bootrom+0xd8>)
    981e:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    9820:	2400      	movs	r4, #0
    9822:	e7d3      	b.n	97cc <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    9824:	490b      	ldr	r1, [pc, #44]	; (9854 <wait_for_bootrom+0xd4>)
    9826:	480c      	ldr	r0, [pc, #48]	; (9858 <wait_for_bootrom+0xd8>)
    9828:	4b0c      	ldr	r3, [pc, #48]	; (985c <wait_for_bootrom+0xdc>)
    982a:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    982c:	2480      	movs	r4, #128	; 0x80
    982e:	e7cd      	b.n	97cc <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    9830:	2002      	movs	r0, #2
    9832:	4320      	orrs	r0, r4
    9834:	4b0c      	ldr	r3, [pc, #48]	; (9868 <wait_for_bootrom+0xe8>)
    9836:	4798      	blx	r3
    9838:	e7d2      	b.n	97e0 <wait_for_bootrom+0x60>
    983a:	46c0      	nop			; (mov r8, r8)
    983c:	00001014 	.word	0x00001014
    9840:	000099b1 	.word	0x000099b1
    9844:	00008129 	.word	0x00008129
    9848:	000207bc 	.word	0x000207bc
    984c:	000c000c 	.word	0x000c000c
    9850:	10add09e 	.word	0x10add09e
    9854:	13521352 	.word	0x13521352
    9858:	0000108c 	.word	0x0000108c
    985c:	000099c9 	.word	0x000099c9
    9860:	0000956d 	.word	0x0000956d
    9864:	0000039f 	.word	0x0000039f
    9868:	000094d9 	.word	0x000094d9
    986c:	0001326c 	.word	0x0001326c
    9870:	000119b1 	.word	0x000119b1
    9874:	000134e0 	.word	0x000134e0
    9878:	000119e5 	.word	0x000119e5
    987c:	ef522f61 	.word	0xef522f61
    9880:	3c1cd57d 	.word	0x3c1cd57d
    9884:	000207ac 	.word	0x000207ac

00009888 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    9888:	b570      	push	{r4, r5, r6, lr}
    988a:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    988c:	4b15      	ldr	r3, [pc, #84]	; (98e4 <wait_for_firmware_start+0x5c>)
    988e:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    9890:	4b15      	ldr	r3, [pc, #84]	; (98e8 <wait_for_firmware_start+0x60>)
    9892:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    9894:	3802      	subs	r0, #2
    9896:	2801      	cmp	r0, #1
    9898:	d911      	bls.n	98be <wait_for_firmware_start+0x36>
{
    989a:	2401      	movs	r4, #1
    989c:	4264      	negs	r4, r4
    989e:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    98a0:	4e12      	ldr	r6, [pc, #72]	; (98ec <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    98a2:	4d13      	ldr	r5, [pc, #76]	; (98f0 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    98a4:	9b00      	ldr	r3, [sp, #0]
    98a6:	4298      	cmp	r0, r3
    98a8:	d00e      	beq.n	98c8 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    98aa:	2002      	movs	r0, #2
    98ac:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    98ae:	9801      	ldr	r0, [sp, #4]
    98b0:	47a8      	blx	r5
    98b2:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    98b4:	2c00      	cmp	r4, #0
    98b6:	d1f5      	bne.n	98a4 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    98b8:	2005      	movs	r0, #5
    98ba:	4240      	negs	r0, r0
    98bc:	e009      	b.n	98d2 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    98be:	4b0d      	ldr	r3, [pc, #52]	; (98f4 <wait_for_firmware_start+0x6c>)
    98c0:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    98c2:	4b0d      	ldr	r3, [pc, #52]	; (98f8 <wait_for_firmware_start+0x70>)
    98c4:	9300      	str	r3, [sp, #0]
    98c6:	e7e8      	b.n	989a <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    98c8:	9a00      	ldr	r2, [sp, #0]
    98ca:	4b07      	ldr	r3, [pc, #28]	; (98e8 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    98cc:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    98ce:	429a      	cmp	r2, r3
    98d0:	d001      	beq.n	98d6 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    98d2:	b002      	add	sp, #8
    98d4:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    98d6:	2100      	movs	r1, #0
    98d8:	4802      	ldr	r0, [pc, #8]	; (98e4 <wait_for_firmware_start+0x5c>)
    98da:	4b08      	ldr	r3, [pc, #32]	; (98fc <wait_for_firmware_start+0x74>)
    98dc:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    98de:	2000      	movs	r0, #0
    98e0:	e7f7      	b.n	98d2 <wait_for_firmware_start+0x4a>
    98e2:	46c0      	nop			; (mov r8, r8)
    98e4:	0000108c 	.word	0x0000108c
    98e8:	02532636 	.word	0x02532636
    98ec:	00008129 	.word	0x00008129
    98f0:	000099b1 	.word	0x000099b1
    98f4:	000207ac 	.word	0x000207ac
    98f8:	d75dc1c3 	.word	0xd75dc1c3
    98fc:	000099c9 	.word	0x000099c9

00009900 <chip_deinit>:

sint8 chip_deinit(void)
{
    9900:	b510      	push	{r4, lr}
    9902:	b082      	sub	sp, #8
	uint32 reg = 0;
    9904:	2300      	movs	r3, #0
    9906:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    9908:	a901      	add	r1, sp, #4
    990a:	20a0      	movs	r0, #160	; 0xa0
    990c:	0140      	lsls	r0, r0, #5
    990e:	4b14      	ldr	r3, [pc, #80]	; (9960 <chip_deinit+0x60>)
    9910:	4798      	blx	r3
    9912:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    9914:	d115      	bne.n	9942 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    9916:	4913      	ldr	r1, [pc, #76]	; (9964 <chip_deinit+0x64>)
    9918:	9b01      	ldr	r3, [sp, #4]
    991a:	4019      	ands	r1, r3
    991c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    991e:	20a0      	movs	r0, #160	; 0xa0
    9920:	0140      	lsls	r0, r0, #5
    9922:	4b11      	ldr	r3, [pc, #68]	; (9968 <chip_deinit+0x68>)
    9924:	4798      	blx	r3
    9926:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    9928:	d016      	beq.n	9958 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    992a:	4a10      	ldr	r2, [pc, #64]	; (996c <chip_deinit+0x6c>)
    992c:	4910      	ldr	r1, [pc, #64]	; (9970 <chip_deinit+0x70>)
    992e:	4811      	ldr	r0, [pc, #68]	; (9974 <chip_deinit+0x74>)
    9930:	4b11      	ldr	r3, [pc, #68]	; (9978 <chip_deinit+0x78>)
    9932:	4798      	blx	r3
    9934:	4811      	ldr	r0, [pc, #68]	; (997c <chip_deinit+0x7c>)
    9936:	4b12      	ldr	r3, [pc, #72]	; (9980 <chip_deinit+0x80>)
    9938:	4798      	blx	r3
    993a:	200d      	movs	r0, #13
    993c:	4b11      	ldr	r3, [pc, #68]	; (9984 <chip_deinit+0x84>)
    993e:	4798      	blx	r3
		goto ERR1;
    9940:	e00a      	b.n	9958 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    9942:	4a11      	ldr	r2, [pc, #68]	; (9988 <chip_deinit+0x88>)
    9944:	490a      	ldr	r1, [pc, #40]	; (9970 <chip_deinit+0x70>)
    9946:	480b      	ldr	r0, [pc, #44]	; (9974 <chip_deinit+0x74>)
    9948:	4b0b      	ldr	r3, [pc, #44]	; (9978 <chip_deinit+0x78>)
    994a:	4798      	blx	r3
    994c:	480b      	ldr	r0, [pc, #44]	; (997c <chip_deinit+0x7c>)
    994e:	4b0c      	ldr	r3, [pc, #48]	; (9980 <chip_deinit+0x80>)
    9950:	4798      	blx	r3
    9952:	200d      	movs	r0, #13
    9954:	4b0b      	ldr	r3, [pc, #44]	; (9984 <chip_deinit+0x84>)
    9956:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    9958:	0020      	movs	r0, r4
    995a:	b002      	add	sp, #8
    995c:	bd10      	pop	{r4, pc}
    995e:	46c0      	nop			; (mov r8, r8)
    9960:	000099bd 	.word	0x000099bd
    9964:	fffffbff 	.word	0xfffffbff
    9968:	000099c9 	.word	0x000099c9
    996c:	0000020b 	.word	0x0000020b
    9970:	00013488 	.word	0x00013488
    9974:	00012f3c 	.word	0x00012f3c
    9978:	000119b1 	.word	0x000119b1
    997c:	00013494 	.word	0x00013494
    9980:	00011acd 	.word	0x00011acd
    9984:	000119e5 	.word	0x000119e5
    9988:	00000205 	.word	0x00000205

0000998c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    998c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    998e:	4b01      	ldr	r3, [pc, #4]	; (9994 <nm_bus_iface_init+0x8>)
    9990:	4798      	blx	r3
	return ret;
}
    9992:	bd10      	pop	{r4, pc}
    9994:	00008265 	.word	0x00008265

00009998 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    9998:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    999a:	4b01      	ldr	r3, [pc, #4]	; (99a0 <nm_bus_iface_deinit+0x8>)
    999c:	4798      	blx	r3

	return ret;
}
    999e:	bd10      	pop	{r4, pc}
    99a0:	000084b5 	.word	0x000084b5

000099a4 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    99a4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    99a6:	4b01      	ldr	r3, [pc, #4]	; (99ac <nm_bus_reset+0x8>)
    99a8:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    99aa:	bd10      	pop	{r4, pc}
    99ac:	0000a355 	.word	0x0000a355

000099b0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    99b0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    99b2:	4b01      	ldr	r3, [pc, #4]	; (99b8 <nm_read_reg+0x8>)
    99b4:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    99b6:	bd10      	pop	{r4, pc}
    99b8:	0000a38d 	.word	0x0000a38d

000099bc <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    99bc:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    99be:	4b01      	ldr	r3, [pc, #4]	; (99c4 <nm_read_reg_with_ret+0x8>)
    99c0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    99c2:	bd10      	pop	{r4, pc}
    99c4:	0000a3a1 	.word	0x0000a3a1

000099c8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    99c8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    99ca:	4b01      	ldr	r3, [pc, #4]	; (99d0 <nm_write_reg+0x8>)
    99cc:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    99ce:	bd10      	pop	{r4, pc}
    99d0:	0000a3b9 	.word	0x0000a3b9

000099d4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    99d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    99d6:	46d6      	mov	lr, sl
    99d8:	464f      	mov	r7, r9
    99da:	4646      	mov	r6, r8
    99dc:	b5c0      	push	{r6, r7, lr}
    99de:	b082      	sub	sp, #8
    99e0:	4680      	mov	r8, r0
    99e2:	4689      	mov	r9, r1
    99e4:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    99e6:	4b13      	ldr	r3, [pc, #76]	; (9a34 <nm_read_block+0x60>)
    99e8:	881f      	ldrh	r7, [r3, #0]
    99ea:	3f08      	subs	r7, #8
    99ec:	b2bb      	uxth	r3, r7
    99ee:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    99f0:	001e      	movs	r6, r3
    99f2:	0004      	movs	r4, r0
    99f4:	429a      	cmp	r2, r3
    99f6:	d91a      	bls.n	9a2e <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    99f8:	4b0f      	ldr	r3, [pc, #60]	; (9a38 <nm_read_block+0x64>)
    99fa:	469a      	mov	sl, r3
    99fc:	1a37      	subs	r7, r6, r0
    99fe:	4643      	mov	r3, r8
    9a00:	1ae1      	subs	r1, r4, r3
    9a02:	4449      	add	r1, r9
    9a04:	9a01      	ldr	r2, [sp, #4]
    9a06:	0020      	movs	r0, r4
    9a08:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    9a0a:	2800      	cmp	r0, #0
    9a0c:	d109      	bne.n	9a22 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    9a0e:	1bad      	subs	r5, r5, r6
    9a10:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    9a12:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    9a14:	42b5      	cmp	r5, r6
    9a16:	d8f2      	bhi.n	99fe <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    9a18:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    9a1a:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    9a1c:	0020      	movs	r0, r4
    9a1e:	4b06      	ldr	r3, [pc, #24]	; (9a38 <nm_read_block+0x64>)
    9a20:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    9a22:	b002      	add	sp, #8
    9a24:	bc1c      	pop	{r2, r3, r4}
    9a26:	4690      	mov	r8, r2
    9a28:	4699      	mov	r9, r3
    9a2a:	46a2      	mov	sl, r4
    9a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    9a2e:	2100      	movs	r1, #0
    9a30:	e7f2      	b.n	9a18 <nm_read_block+0x44>
    9a32:	46c0      	nop			; (mov r8, r8)
    9a34:	20000000 	.word	0x20000000
    9a38:	0000a4fd 	.word	0x0000a4fd

00009a3c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    9a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a3e:	46d6      	mov	lr, sl
    9a40:	464f      	mov	r7, r9
    9a42:	4646      	mov	r6, r8
    9a44:	b5c0      	push	{r6, r7, lr}
    9a46:	b082      	sub	sp, #8
    9a48:	4680      	mov	r8, r0
    9a4a:	4689      	mov	r9, r1
    9a4c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    9a4e:	4b13      	ldr	r3, [pc, #76]	; (9a9c <nm_write_block+0x60>)
    9a50:	881f      	ldrh	r7, [r3, #0]
    9a52:	3f08      	subs	r7, #8
    9a54:	b2bb      	uxth	r3, r7
    9a56:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    9a58:	001e      	movs	r6, r3
    9a5a:	0004      	movs	r4, r0
    9a5c:	429a      	cmp	r2, r3
    9a5e:	d91a      	bls.n	9a96 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    9a60:	4b0f      	ldr	r3, [pc, #60]	; (9aa0 <nm_write_block+0x64>)
    9a62:	469a      	mov	sl, r3
    9a64:	1a37      	subs	r7, r6, r0
    9a66:	4643      	mov	r3, r8
    9a68:	1ae1      	subs	r1, r4, r3
    9a6a:	4449      	add	r1, r9
    9a6c:	9a01      	ldr	r2, [sp, #4]
    9a6e:	0020      	movs	r0, r4
    9a70:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    9a72:	2800      	cmp	r0, #0
    9a74:	d109      	bne.n	9a8a <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    9a76:	1bad      	subs	r5, r5, r6
    9a78:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    9a7a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    9a7c:	42b5      	cmp	r5, r6
    9a7e:	d8f2      	bhi.n	9a66 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    9a80:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    9a82:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    9a84:	0020      	movs	r0, r4
    9a86:	4b06      	ldr	r3, [pc, #24]	; (9aa0 <nm_write_block+0x64>)
    9a88:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    9a8a:	b002      	add	sp, #8
    9a8c:	bc1c      	pop	{r2, r3, r4}
    9a8e:	4690      	mov	r8, r2
    9a90:	4699      	mov	r9, r3
    9a92:	46a2      	mov	sl, r4
    9a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    9a96:	2100      	movs	r1, #0
    9a98:	e7f2      	b.n	9a80 <nm_write_block+0x44>
    9a9a:	46c0      	nop			; (mov r8, r8)
    9a9c:	20000000 	.word	0x20000000
    9aa0:	0000a659 	.word	0x0000a659

00009aa4 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    9aa4:	b570      	push	{r4, r5, r6, lr}
    9aa6:	b084      	sub	sp, #16
    9aa8:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    9aaa:	2300      	movs	r3, #0
    9aac:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    9aae:	2208      	movs	r2, #8
    9ab0:	2100      	movs	r1, #0
    9ab2:	a801      	add	r0, sp, #4
    9ab4:	4b2d      	ldr	r3, [pc, #180]	; (9b6c <nm_get_firmware_full_info+0xc8>)
    9ab6:	4798      	blx	r3
	if (pstrRev != NULL)
    9ab8:	2c00      	cmp	r4, #0
    9aba:	d044      	beq.n	9b46 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    9abc:	2228      	movs	r2, #40	; 0x28
    9abe:	2100      	movs	r1, #0
    9ac0:	0020      	movs	r0, r4
    9ac2:	4b2b      	ldr	r3, [pc, #172]	; (9b70 <nm_get_firmware_full_info+0xcc>)
    9ac4:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    9ac6:	a903      	add	r1, sp, #12
    9ac8:	482a      	ldr	r0, [pc, #168]	; (9b74 <nm_get_firmware_full_info+0xd0>)
    9aca:	4b2b      	ldr	r3, [pc, #172]	; (9b78 <nm_get_firmware_full_info+0xd4>)
    9acc:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    9ace:	2800      	cmp	r0, #0
    9ad0:	d13a      	bne.n	9b48 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    9ad2:	9b03      	ldr	r3, [sp, #12]
    9ad4:	2b00      	cmp	r3, #0
    9ad6:	d039      	beq.n	9b4c <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    9ad8:	20c0      	movs	r0, #192	; 0xc0
    9ada:	0280      	lsls	r0, r0, #10
    9adc:	4318      	orrs	r0, r3
    9ade:	2208      	movs	r2, #8
    9ae0:	a901      	add	r1, sp, #4
    9ae2:	4b26      	ldr	r3, [pc, #152]	; (9b7c <nm_get_firmware_full_info+0xd8>)
    9ae4:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    9ae6:	2800      	cmp	r0, #0
    9ae8:	d12e      	bne.n	9b48 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    9aea:	9b02      	ldr	r3, [sp, #8]
    9aec:	0418      	lsls	r0, r3, #16
    9aee:	0c00      	lsrs	r0, r0, #16
    9af0:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    9af2:	d02e      	beq.n	9b52 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    9af4:	23c0      	movs	r3, #192	; 0xc0
    9af6:	029b      	lsls	r3, r3, #10
    9af8:	4318      	orrs	r0, r3
    9afa:	2228      	movs	r2, #40	; 0x28
    9afc:	0021      	movs	r1, r4
    9afe:	4b1f      	ldr	r3, [pc, #124]	; (9b7c <nm_get_firmware_full_info+0xd8>)
    9b00:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    9b02:	2800      	cmp	r0, #0
    9b04:	d120      	bne.n	9b48 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    9b06:	7921      	ldrb	r1, [r4, #4]
    9b08:	0209      	lsls	r1, r1, #8
    9b0a:	79a2      	ldrb	r2, [r4, #6]
    9b0c:	230f      	movs	r3, #15
    9b0e:	401a      	ands	r2, r3
    9b10:	430a      	orrs	r2, r1
    9b12:	7961      	ldrb	r1, [r4, #5]
    9b14:	0109      	lsls	r1, r1, #4
    9b16:	25ff      	movs	r5, #255	; 0xff
    9b18:	4029      	ands	r1, r5
    9b1a:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    9b1c:	79e1      	ldrb	r1, [r4, #7]
    9b1e:	0209      	lsls	r1, r1, #8
    9b20:	7a66      	ldrb	r6, [r4, #9]
    9b22:	4033      	ands	r3, r6
    9b24:	430b      	orrs	r3, r1
    9b26:	7a21      	ldrb	r1, [r4, #8]
    9b28:	0109      	lsls	r1, r1, #4
    9b2a:	400d      	ands	r5, r1
    9b2c:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    9b2e:	2a00      	cmp	r2, #0
    9b30:	d012      	beq.n	9b58 <nm_get_firmware_full_info+0xb4>
    9b32:	2b00      	cmp	r3, #0
    9b34:	d013      	beq.n	9b5e <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    9b36:	4912      	ldr	r1, [pc, #72]	; (9b80 <nm_get_firmware_full_info+0xdc>)
    9b38:	428b      	cmp	r3, r1
    9b3a:	d813      	bhi.n	9b64 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    9b3c:	4b11      	ldr	r3, [pc, #68]	; (9b84 <nm_get_firmware_full_info+0xe0>)
    9b3e:	429a      	cmp	r2, r3
    9b40:	d802      	bhi.n	9b48 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    9b42:	380d      	subs	r0, #13
    9b44:	e000      	b.n	9b48 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    9b46:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    9b48:	b004      	add	sp, #16
    9b4a:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    9b4c:	200c      	movs	r0, #12
    9b4e:	4240      	negs	r0, r0
    9b50:	e7fa      	b.n	9b48 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    9b52:	200c      	movs	r0, #12
    9b54:	4240      	negs	r0, r0
    9b56:	e7f7      	b.n	9b48 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    9b58:	200c      	movs	r0, #12
    9b5a:	4240      	negs	r0, r0
    9b5c:	e7f4      	b.n	9b48 <nm_get_firmware_full_info+0xa4>
    9b5e:	200c      	movs	r0, #12
    9b60:	4240      	negs	r0, r0
    9b62:	e7f1      	b.n	9b48 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    9b64:	200d      	movs	r0, #13
    9b66:	4240      	negs	r0, r0
    9b68:	e7ee      	b.n	9b48 <nm_get_firmware_full_info+0xa4>
    9b6a:	46c0      	nop			; (mov r8, r8)
    9b6c:	0001184f 	.word	0x0001184f
    9b70:	00008535 	.word	0x00008535
    9b74:	000c0008 	.word	0x000c0008
    9b78:	000099bd 	.word	0x000099bd
    9b7c:	000099d5 	.word	0x000099d5
    9b80:	00001352 	.word	0x00001352
    9b84:	00001351 	.word	0x00001351

00009b88 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    9b88:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    9b8a:	2800      	cmp	r0, #0
    9b8c:	d037      	beq.n	9bfe <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    9b8e:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    9b90:	1e6b      	subs	r3, r5, #1
    9b92:	2b03      	cmp	r3, #3
    9b94:	d900      	bls.n	9b98 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    9b96:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    9b98:	2000      	movs	r0, #0
    9b9a:	4b20      	ldr	r3, [pc, #128]	; (9c1c <nm_drv_init+0x94>)
    9b9c:	4798      	blx	r3
    9b9e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9ba0:	d12f      	bne.n	9c02 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    9ba2:	481f      	ldr	r0, [pc, #124]	; (9c20 <nm_drv_init+0x98>)
    9ba4:	4c1f      	ldr	r4, [pc, #124]	; (9c24 <nm_drv_init+0x9c>)
    9ba6:	47a0      	blx	r4
    9ba8:	4b1f      	ldr	r3, [pc, #124]	; (9c28 <nm_drv_init+0xa0>)
    9baa:	4798      	blx	r3
    9bac:	0001      	movs	r1, r0
    9bae:	481f      	ldr	r0, [pc, #124]	; (9c2c <nm_drv_init+0xa4>)
    9bb0:	47a0      	blx	r4
    9bb2:	200d      	movs	r0, #13
    9bb4:	4b1e      	ldr	r3, [pc, #120]	; (9c30 <nm_drv_init+0xa8>)
    9bb6:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    9bb8:	4b1e      	ldr	r3, [pc, #120]	; (9c34 <nm_drv_init+0xac>)
    9bba:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    9bbc:	0028      	movs	r0, r5
    9bbe:	4b1e      	ldr	r3, [pc, #120]	; (9c38 <nm_drv_init+0xb0>)
    9bc0:	4798      	blx	r3
    9bc2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9bc4:	d117      	bne.n	9bf6 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    9bc6:	0028      	movs	r0, r5
    9bc8:	4b1c      	ldr	r3, [pc, #112]	; (9c3c <nm_drv_init+0xb4>)
    9bca:	4798      	blx	r3
    9bcc:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9bce:	d112      	bne.n	9bf6 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    9bd0:	3d02      	subs	r5, #2
    9bd2:	2d01      	cmp	r5, #1
    9bd4:	d911      	bls.n	9bfa <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    9bd6:	4b1a      	ldr	r3, [pc, #104]	; (9c40 <nm_drv_init+0xb8>)
    9bd8:	4798      	blx	r3
    9bda:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9bdc:	d00d      	beq.n	9bfa <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    9bde:	2256      	movs	r2, #86	; 0x56
    9be0:	32ff      	adds	r2, #255	; 0xff
    9be2:	4918      	ldr	r1, [pc, #96]	; (9c44 <nm_drv_init+0xbc>)
    9be4:	4818      	ldr	r0, [pc, #96]	; (9c48 <nm_drv_init+0xc0>)
    9be6:	4b0f      	ldr	r3, [pc, #60]	; (9c24 <nm_drv_init+0x9c>)
    9be8:	4798      	blx	r3
    9bea:	4818      	ldr	r0, [pc, #96]	; (9c4c <nm_drv_init+0xc4>)
    9bec:	4b18      	ldr	r3, [pc, #96]	; (9c50 <nm_drv_init+0xc8>)
    9bee:	4798      	blx	r3
    9bf0:	200d      	movs	r0, #13
    9bf2:	4b0f      	ldr	r3, [pc, #60]	; (9c30 <nm_drv_init+0xa8>)
    9bf4:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    9bf6:	4b17      	ldr	r3, [pc, #92]	; (9c54 <nm_drv_init+0xcc>)
    9bf8:	4798      	blx	r3
ERR1:
	return ret;
}
    9bfa:	0020      	movs	r0, r4
    9bfc:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    9bfe:	2501      	movs	r5, #1
    9c00:	e7ca      	b.n	9b98 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    9c02:	2228      	movs	r2, #40	; 0x28
    9c04:	32ff      	adds	r2, #255	; 0xff
    9c06:	490f      	ldr	r1, [pc, #60]	; (9c44 <nm_drv_init+0xbc>)
    9c08:	480f      	ldr	r0, [pc, #60]	; (9c48 <nm_drv_init+0xc0>)
    9c0a:	4b06      	ldr	r3, [pc, #24]	; (9c24 <nm_drv_init+0x9c>)
    9c0c:	4798      	blx	r3
    9c0e:	4812      	ldr	r0, [pc, #72]	; (9c58 <nm_drv_init+0xd0>)
    9c10:	4b0f      	ldr	r3, [pc, #60]	; (9c50 <nm_drv_init+0xc8>)
    9c12:	4798      	blx	r3
    9c14:	200d      	movs	r0, #13
    9c16:	4b06      	ldr	r3, [pc, #24]	; (9c30 <nm_drv_init+0xa8>)
    9c18:	4798      	blx	r3
		goto ERR1;
    9c1a:	e7ee      	b.n	9bfa <nm_drv_init+0x72>
    9c1c:	0000998d 	.word	0x0000998d
    9c20:	0001326c 	.word	0x0001326c
    9c24:	000119b1 	.word	0x000119b1
    9c28:	0000956d 	.word	0x0000956d
    9c2c:	000135b0 	.word	0x000135b0
    9c30:	000119e5 	.word	0x000119e5
    9c34:	0000a3d1 	.word	0x0000a3d1
    9c38:	00009781 	.word	0x00009781
    9c3c:	00009889 	.word	0x00009889
    9c40:	00009511 	.word	0x00009511
    9c44:	000134f8 	.word	0x000134f8
    9c48:	00012f3c 	.word	0x00012f3c
    9c4c:	00013574 	.word	0x00013574
    9c50:	00011acd 	.word	0x00011acd
    9c54:	00009999 	.word	0x00009999
    9c58:	00013594 	.word	0x00013594

00009c5c <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    9c5c:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    9c5e:	4b1c      	ldr	r3, [pc, #112]	; (9cd0 <nm_drv_deinit+0x74>)
    9c60:	4798      	blx	r3
    9c62:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9c64:	d10b      	bne.n	9c7e <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    9c66:	2000      	movs	r0, #0
    9c68:	4b1a      	ldr	r3, [pc, #104]	; (9cd4 <nm_drv_deinit+0x78>)
    9c6a:	4798      	blx	r3
    9c6c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9c6e:	d114      	bne.n	9c9a <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    9c70:	4b19      	ldr	r3, [pc, #100]	; (9cd8 <nm_drv_deinit+0x7c>)
    9c72:	4798      	blx	r3
    9c74:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    9c76:	d11d      	bne.n	9cb4 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    9c78:	4b18      	ldr	r3, [pc, #96]	; (9cdc <nm_drv_deinit+0x80>)
    9c7a:	4798      	blx	r3
    9c7c:	e00b      	b.n	9c96 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    9c7e:	22b6      	movs	r2, #182	; 0xb6
    9c80:	0052      	lsls	r2, r2, #1
    9c82:	4917      	ldr	r1, [pc, #92]	; (9ce0 <nm_drv_deinit+0x84>)
    9c84:	4817      	ldr	r0, [pc, #92]	; (9ce4 <nm_drv_deinit+0x88>)
    9c86:	4b18      	ldr	r3, [pc, #96]	; (9ce8 <nm_drv_deinit+0x8c>)
    9c88:	4798      	blx	r3
    9c8a:	4818      	ldr	r0, [pc, #96]	; (9cec <nm_drv_deinit+0x90>)
    9c8c:	4b18      	ldr	r3, [pc, #96]	; (9cf0 <nm_drv_deinit+0x94>)
    9c8e:	4798      	blx	r3
    9c90:	200d      	movs	r0, #13
    9c92:	4b18      	ldr	r3, [pc, #96]	; (9cf4 <nm_drv_deinit+0x98>)
    9c94:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    9c96:	0020      	movs	r0, r4
    9c98:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    9c9a:	2274      	movs	r2, #116	; 0x74
    9c9c:	32ff      	adds	r2, #255	; 0xff
    9c9e:	4910      	ldr	r1, [pc, #64]	; (9ce0 <nm_drv_deinit+0x84>)
    9ca0:	4810      	ldr	r0, [pc, #64]	; (9ce4 <nm_drv_deinit+0x88>)
    9ca2:	4b11      	ldr	r3, [pc, #68]	; (9ce8 <nm_drv_deinit+0x8c>)
    9ca4:	4798      	blx	r3
    9ca6:	4814      	ldr	r0, [pc, #80]	; (9cf8 <nm_drv_deinit+0x9c>)
    9ca8:	4b11      	ldr	r3, [pc, #68]	; (9cf0 <nm_drv_deinit+0x94>)
    9caa:	4798      	blx	r3
    9cac:	200d      	movs	r0, #13
    9cae:	4b11      	ldr	r3, [pc, #68]	; (9cf4 <nm_drv_deinit+0x98>)
    9cb0:	4798      	blx	r3
		goto ERR1;
    9cb2:	e7f0      	b.n	9c96 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    9cb4:	227a      	movs	r2, #122	; 0x7a
    9cb6:	32ff      	adds	r2, #255	; 0xff
    9cb8:	4909      	ldr	r1, [pc, #36]	; (9ce0 <nm_drv_deinit+0x84>)
    9cba:	480a      	ldr	r0, [pc, #40]	; (9ce4 <nm_drv_deinit+0x88>)
    9cbc:	4b0a      	ldr	r3, [pc, #40]	; (9ce8 <nm_drv_deinit+0x8c>)
    9cbe:	4798      	blx	r3
    9cc0:	480e      	ldr	r0, [pc, #56]	; (9cfc <nm_drv_deinit+0xa0>)
    9cc2:	4b0b      	ldr	r3, [pc, #44]	; (9cf0 <nm_drv_deinit+0x94>)
    9cc4:	4798      	blx	r3
    9cc6:	200d      	movs	r0, #13
    9cc8:	4b0a      	ldr	r3, [pc, #40]	; (9cf4 <nm_drv_deinit+0x98>)
    9cca:	4798      	blx	r3
		goto ERR1;
    9ccc:	e7e3      	b.n	9c96 <nm_drv_deinit+0x3a>
    9cce:	46c0      	nop			; (mov r8, r8)
    9cd0:	00009901 	.word	0x00009901
    9cd4:	0000b22d 	.word	0x0000b22d
    9cd8:	00009999 	.word	0x00009999
    9cdc:	0000a37d 	.word	0x0000a37d
    9ce0:	00013504 	.word	0x00013504
    9ce4:	00012f3c 	.word	0x00012f3c
    9ce8:	000119b1 	.word	0x000119b1
    9cec:	00013514 	.word	0x00013514
    9cf0:	00011acd 	.word	0x00011acd
    9cf4:	000119e5 	.word	0x000119e5
    9cf8:	00013534 	.word	0x00013534
    9cfc:	00013558 	.word	0x00013558

00009d00 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    9d00:	b500      	push	{lr}
    9d02:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    9d04:	ab01      	add	r3, sp, #4
    9d06:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    9d08:	2200      	movs	r2, #0
    9d0a:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    9d0c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    9d0e:	0019      	movs	r1, r3
    9d10:	2003      	movs	r0, #3
    9d12:	4b02      	ldr	r3, [pc, #8]	; (9d1c <nmi_spi_write+0x1c>)
    9d14:	4798      	blx	r3
}
    9d16:	b005      	add	sp, #20
    9d18:	bd00      	pop	{pc}
    9d1a:	46c0      	nop			; (mov r8, r8)
    9d1c:	00008369 	.word	0x00008369

00009d20 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    9d20:	b570      	push	{r4, r5, r6, lr}
    9d22:	b084      	sub	sp, #16
    9d24:	ac08      	add	r4, sp, #32
    9d26:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    9d28:	ac01      	add	r4, sp, #4
    9d2a:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    9d2c:	303f      	adds	r0, #63	; 0x3f
    9d2e:	b2c4      	uxtb	r4, r0
    9d30:	2c0e      	cmp	r4, #14
    9d32:	d900      	bls.n	9d36 <spi_cmd+0x16>
    9d34:	e084      	b.n	9e40 <spi_cmd+0x120>
    9d36:	00a0      	lsls	r0, r4, #2
    9d38:	4c4f      	ldr	r4, [pc, #316]	; (9e78 <spi_cmd+0x158>)
    9d3a:	5820      	ldr	r0, [r4, r0]
    9d3c:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    9d3e:	ab01      	add	r3, sp, #4
    9d40:	0c0a      	lsrs	r2, r1, #16
    9d42:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    9d44:	0a0a      	lsrs	r2, r1, #8
    9d46:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    9d48:	70d9      	strb	r1, [r3, #3]
		len = 5;
    9d4a:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    9d4c:	4b4b      	ldr	r3, [pc, #300]	; (9e7c <spi_cmd+0x15c>)
    9d4e:	781b      	ldrb	r3, [r3, #0]
    9d50:	2b00      	cmp	r3, #0
    9d52:	d077      	beq.n	9e44 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    9d54:	3901      	subs	r1, #1
    9d56:	b2c9      	uxtb	r1, r1
    9d58:	e083      	b.n	9e62 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    9d5a:	0a0b      	lsrs	r3, r1, #8
    9d5c:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    9d5e:	2d00      	cmp	r5, #0
    9d60:	d107      	bne.n	9d72 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    9d62:	aa01      	add	r2, sp, #4
    9d64:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    9d66:	ab01      	add	r3, sp, #4
    9d68:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    9d6a:	2200      	movs	r2, #0
    9d6c:	70da      	strb	r2, [r3, #3]
		len = 5;
    9d6e:	2105      	movs	r1, #5
		break;
    9d70:	e7ec      	b.n	9d4c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    9d72:	2280      	movs	r2, #128	; 0x80
    9d74:	4252      	negs	r2, r2
    9d76:	4313      	orrs	r3, r2
    9d78:	aa01      	add	r2, sp, #4
    9d7a:	7053      	strb	r3, [r2, #1]
    9d7c:	e7f3      	b.n	9d66 <spi_cmd+0x46>
		bc[1] = 0x00;
    9d7e:	ab01      	add	r3, sp, #4
    9d80:	2200      	movs	r2, #0
    9d82:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    9d84:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    9d86:	70da      	strb	r2, [r3, #3]
		len = 5;
    9d88:	2105      	movs	r1, #5
		break;
    9d8a:	e7df      	b.n	9d4c <spi_cmd+0x2c>
		bc[1] = 0x00;
    9d8c:	ab01      	add	r3, sp, #4
    9d8e:	2200      	movs	r2, #0
    9d90:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    9d92:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    9d94:	70da      	strb	r2, [r3, #3]
		len = 5;
    9d96:	2105      	movs	r1, #5
		break;
    9d98:	e7d8      	b.n	9d4c <spi_cmd+0x2c>
		bc[1] = 0xff;
    9d9a:	ab01      	add	r3, sp, #4
    9d9c:	22ff      	movs	r2, #255	; 0xff
    9d9e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    9da0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    9da2:	70da      	strb	r2, [r3, #3]
		len = 5;
    9da4:	2105      	movs	r1, #5
		break;
    9da6:	e7d1      	b.n	9d4c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    9da8:	aa01      	add	r2, sp, #4
    9daa:	0c08      	lsrs	r0, r1, #16
    9dac:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    9dae:	0a08      	lsrs	r0, r1, #8
    9db0:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    9db2:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    9db4:	0a19      	lsrs	r1, r3, #8
    9db6:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    9db8:	7153      	strb	r3, [r2, #5]
		len = 7;
    9dba:	2107      	movs	r1, #7
		break;
    9dbc:	e7c6      	b.n	9d4c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    9dbe:	aa01      	add	r2, sp, #4
    9dc0:	0c08      	lsrs	r0, r1, #16
    9dc2:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    9dc4:	0a08      	lsrs	r0, r1, #8
    9dc6:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    9dc8:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    9dca:	0c19      	lsrs	r1, r3, #16
    9dcc:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    9dce:	0a19      	lsrs	r1, r3, #8
    9dd0:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    9dd2:	7193      	strb	r3, [r2, #6]
		len = 8;
    9dd4:	2108      	movs	r1, #8
		break;
    9dd6:	e7b9      	b.n	9d4c <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    9dd8:	0a0b      	lsrs	r3, r1, #8
    9dda:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    9ddc:	2d00      	cmp	r5, #0
    9dde:	d10c      	bne.n	9dfa <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    9de0:	a801      	add	r0, sp, #4
    9de2:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    9de4:	ab01      	add	r3, sp, #4
    9de6:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    9de8:	0e11      	lsrs	r1, r2, #24
    9dea:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    9dec:	0c11      	lsrs	r1, r2, #16
    9dee:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    9df0:	0a11      	lsrs	r1, r2, #8
    9df2:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    9df4:	719a      	strb	r2, [r3, #6]
		len = 8;
    9df6:	2108      	movs	r1, #8
		break;
    9df8:	e7a8      	b.n	9d4c <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    9dfa:	2080      	movs	r0, #128	; 0x80
    9dfc:	4240      	negs	r0, r0
    9dfe:	4303      	orrs	r3, r0
    9e00:	a801      	add	r0, sp, #4
    9e02:	7043      	strb	r3, [r0, #1]
    9e04:	e7ee      	b.n	9de4 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    9e06:	ab01      	add	r3, sp, #4
    9e08:	0c08      	lsrs	r0, r1, #16
    9e0a:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    9e0c:	0a08      	lsrs	r0, r1, #8
    9e0e:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    9e10:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    9e12:	0e11      	lsrs	r1, r2, #24
    9e14:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    9e16:	0c11      	lsrs	r1, r2, #16
    9e18:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    9e1a:	0a11      	lsrs	r1, r2, #8
    9e1c:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    9e1e:	71da      	strb	r2, [r3, #7]
		len = 9;
    9e20:	2109      	movs	r1, #9
		break;
    9e22:	e793      	b.n	9d4c <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    9e24:	2228      	movs	r2, #40	; 0x28
    9e26:	32ff      	adds	r2, #255	; 0xff
    9e28:	4915      	ldr	r1, [pc, #84]	; (9e80 <spi_cmd+0x160>)
    9e2a:	4816      	ldr	r0, [pc, #88]	; (9e84 <spi_cmd+0x164>)
    9e2c:	4b16      	ldr	r3, [pc, #88]	; (9e88 <spi_cmd+0x168>)
    9e2e:	4798      	blx	r3
    9e30:	4816      	ldr	r0, [pc, #88]	; (9e8c <spi_cmd+0x16c>)
    9e32:	4b17      	ldr	r3, [pc, #92]	; (9e90 <spi_cmd+0x170>)
    9e34:	4798      	blx	r3
    9e36:	200d      	movs	r0, #13
    9e38:	4b16      	ldr	r3, [pc, #88]	; (9e94 <spi_cmd+0x174>)
    9e3a:	4798      	blx	r3
			result = N_FAIL;
    9e3c:	2300      	movs	r3, #0
    9e3e:	e017      	b.n	9e70 <spi_cmd+0x150>
	switch (cmd) {
    9e40:	2300      	movs	r3, #0
    9e42:	e015      	b.n	9e70 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    9e44:	1e4e      	subs	r6, r1, #1
    9e46:	aa01      	add	r2, sp, #4
    9e48:	1995      	adds	r5, r2, r6
    9e4a:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    9e4c:	4c12      	ldr	r4, [pc, #72]	; (9e98 <spi_cmd+0x178>)
    9e4e:	005b      	lsls	r3, r3, #1
    9e50:	7810      	ldrb	r0, [r2, #0]
    9e52:	4043      	eors	r3, r0
    9e54:	5ce3      	ldrb	r3, [r4, r3]
    9e56:	3201      	adds	r2, #1
	while (len--)
    9e58:	42aa      	cmp	r2, r5
    9e5a:	d1f8      	bne.n	9e4e <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    9e5c:	005b      	lsls	r3, r3, #1
    9e5e:	aa01      	add	r2, sp, #4
    9e60:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    9e62:	b289      	uxth	r1, r1
    9e64:	a801      	add	r0, sp, #4
    9e66:	4b0d      	ldr	r3, [pc, #52]	; (9e9c <spi_cmd+0x17c>)
    9e68:	4798      	blx	r3
    9e6a:	2301      	movs	r3, #1
    9e6c:	2800      	cmp	r0, #0
    9e6e:	d1d9      	bne.n	9e24 <spi_cmd+0x104>
		}
	}

	return result;
}
    9e70:	0018      	movs	r0, r3
    9e72:	b004      	add	sp, #16
    9e74:	bd70      	pop	{r4, r5, r6, pc}
    9e76:	46c0      	nop			; (mov r8, r8)
    9e78:	000135c0 	.word	0x000135c0
    9e7c:	2000021c 	.word	0x2000021c
    9e80:	00013600 	.word	0x00013600
    9e84:	00012f3c 	.word	0x00012f3c
    9e88:	000119b1 	.word	0x000119b1
    9e8c:	00013a90 	.word	0x00013a90
    9e90:	00011acd 	.word	0x00011acd
    9e94:	000119e5 	.word	0x000119e5
    9e98:	0001368c 	.word	0x0001368c
    9e9c:	00009d01 	.word	0x00009d01

00009ea0 <nmi_spi_read>:
{
    9ea0:	b500      	push	{lr}
    9ea2:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    9ea4:	ab01      	add	r3, sp, #4
    9ea6:	2200      	movs	r2, #0
    9ea8:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    9eaa:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    9eac:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    9eae:	0019      	movs	r1, r3
    9eb0:	2003      	movs	r0, #3
    9eb2:	4b02      	ldr	r3, [pc, #8]	; (9ebc <nmi_spi_read+0x1c>)
    9eb4:	4798      	blx	r3
}
    9eb6:	b005      	add	sp, #20
    9eb8:	bd00      	pop	{pc}
    9eba:	46c0      	nop			; (mov r8, r8)
    9ebc:	00008369 	.word	0x00008369

00009ec0 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    9ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ec2:	46c6      	mov	lr, r8
    9ec4:	b500      	push	{lr}
    9ec6:	b082      	sub	sp, #8
    9ec8:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    9eca:	28cf      	cmp	r0, #207	; 0xcf
    9ecc:	d02b      	beq.n	9f26 <spi_cmd_rsp+0x66>
    9ece:	0003      	movs	r3, r0
    9ed0:	333b      	adds	r3, #59	; 0x3b
    9ed2:	b2db      	uxtb	r3, r3
    9ed4:	2b01      	cmp	r3, #1
    9ed6:	d926      	bls.n	9f26 <spi_cmd_rsp+0x66>
{
    9ed8:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9eda:	466b      	mov	r3, sp
    9edc:	1dde      	adds	r6, r3, #7
    9ede:	4b26      	ldr	r3, [pc, #152]	; (9f78 <spi_cmd_rsp+0xb8>)
    9ee0:	4698      	mov	r8, r3
    9ee2:	2101      	movs	r1, #1
    9ee4:	0030      	movs	r0, r6
    9ee6:	47c0      	blx	r8
    9ee8:	1e05      	subs	r5, r0, #0
    9eea:	d125      	bne.n	9f38 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    9eec:	7833      	ldrb	r3, [r6, #0]
    9eee:	42bb      	cmp	r3, r7
    9ef0:	d030      	beq.n	9f54 <spi_cmd_rsp+0x94>
    9ef2:	3c01      	subs	r4, #1
    9ef4:	b2e4      	uxtb	r4, r4
    9ef6:	2c00      	cmp	r4, #0
    9ef8:	d1f3      	bne.n	9ee2 <spi_cmd_rsp+0x22>
    9efa:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9efc:	466b      	mov	r3, sp
    9efe:	1dde      	adds	r6, r3, #7
    9f00:	4f1d      	ldr	r7, [pc, #116]	; (9f78 <spi_cmd_rsp+0xb8>)
    9f02:	2101      	movs	r1, #1
    9f04:	0030      	movs	r0, r6
    9f06:	47b8      	blx	r7
    9f08:	2800      	cmp	r0, #0
    9f0a:	d125      	bne.n	9f58 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    9f0c:	7833      	ldrb	r3, [r6, #0]
    9f0e:	2b00      	cmp	r3, #0
    9f10:	d02f      	beq.n	9f72 <spi_cmd_rsp+0xb2>
    9f12:	3c01      	subs	r4, #1
    9f14:	b2e4      	uxtb	r4, r4
    9f16:	2c00      	cmp	r4, #0
    9f18:	d1f3      	bne.n	9f02 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    9f1a:	2501      	movs	r5, #1

_fail_:

	return result;
}
    9f1c:	0028      	movs	r0, r5
    9f1e:	b002      	add	sp, #8
    9f20:	bc04      	pop	{r2}
    9f22:	4690      	mov	r8, r2
    9f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9f26:	2101      	movs	r1, #1
    9f28:	466b      	mov	r3, sp
    9f2a:	1dd8      	adds	r0, r3, #7
    9f2c:	4b12      	ldr	r3, [pc, #72]	; (9f78 <spi_cmd_rsp+0xb8>)
    9f2e:	4798      	blx	r3
			result = N_FAIL;
    9f30:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9f32:	2800      	cmp	r0, #0
    9f34:	d0d0      	beq.n	9ed8 <spi_cmd_rsp+0x18>
    9f36:	e7f1      	b.n	9f1c <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    9f38:	22b1      	movs	r2, #177	; 0xb1
    9f3a:	0052      	lsls	r2, r2, #1
    9f3c:	490f      	ldr	r1, [pc, #60]	; (9f7c <spi_cmd_rsp+0xbc>)
    9f3e:	4810      	ldr	r0, [pc, #64]	; (9f80 <spi_cmd_rsp+0xc0>)
    9f40:	4b10      	ldr	r3, [pc, #64]	; (9f84 <spi_cmd_rsp+0xc4>)
    9f42:	4798      	blx	r3
    9f44:	4810      	ldr	r0, [pc, #64]	; (9f88 <spi_cmd_rsp+0xc8>)
    9f46:	4b11      	ldr	r3, [pc, #68]	; (9f8c <spi_cmd_rsp+0xcc>)
    9f48:	4798      	blx	r3
    9f4a:	200d      	movs	r0, #13
    9f4c:	4b10      	ldr	r3, [pc, #64]	; (9f90 <spi_cmd_rsp+0xd0>)
    9f4e:	4798      	blx	r3
			result = N_FAIL;
    9f50:	2500      	movs	r5, #0
			goto _fail_;
    9f52:	e7e3      	b.n	9f1c <spi_cmd_rsp+0x5c>
    9f54:	240b      	movs	r4, #11
    9f56:	e7d1      	b.n	9efc <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    9f58:	22b8      	movs	r2, #184	; 0xb8
    9f5a:	0052      	lsls	r2, r2, #1
    9f5c:	4907      	ldr	r1, [pc, #28]	; (9f7c <spi_cmd_rsp+0xbc>)
    9f5e:	4808      	ldr	r0, [pc, #32]	; (9f80 <spi_cmd_rsp+0xc0>)
    9f60:	4b08      	ldr	r3, [pc, #32]	; (9f84 <spi_cmd_rsp+0xc4>)
    9f62:	4798      	blx	r3
    9f64:	4808      	ldr	r0, [pc, #32]	; (9f88 <spi_cmd_rsp+0xc8>)
    9f66:	4b09      	ldr	r3, [pc, #36]	; (9f8c <spi_cmd_rsp+0xcc>)
    9f68:	4798      	blx	r3
    9f6a:	200d      	movs	r0, #13
    9f6c:	4b08      	ldr	r3, [pc, #32]	; (9f90 <spi_cmd_rsp+0xd0>)
    9f6e:	4798      	blx	r3
			goto _fail_;
    9f70:	e7d4      	b.n	9f1c <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    9f72:	2501      	movs	r5, #1
    9f74:	e7d2      	b.n	9f1c <spi_cmd_rsp+0x5c>
    9f76:	46c0      	nop			; (mov r8, r8)
    9f78:	00009ea1 	.word	0x00009ea1
    9f7c:	00013618 	.word	0x00013618
    9f80:	00012f3c 	.word	0x00012f3c
    9f84:	000119b1 	.word	0x000119b1
    9f88:	00013abc 	.word	0x00013abc
    9f8c:	00011acd 	.word	0x00011acd
    9f90:	000119e5 	.word	0x000119e5

00009f94 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    9f94:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f96:	46de      	mov	lr, fp
    9f98:	4657      	mov	r7, sl
    9f9a:	464e      	mov	r6, r9
    9f9c:	4645      	mov	r5, r8
    9f9e:	b5e0      	push	{r5, r6, r7, lr}
    9fa0:	b087      	sub	sp, #28
    9fa2:	9001      	str	r0, [sp, #4]
    9fa4:	4689      	mov	r9, r1
    9fa6:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    9fa8:	2300      	movs	r3, #0
    9faa:	469a      	mov	sl, r3
    9fac:	2380      	movs	r3, #128	; 0x80
    9fae:	019b      	lsls	r3, r3, #6
    9fb0:	469b      	mov	fp, r3
    9fb2:	466a      	mov	r2, sp
    9fb4:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9fb6:	4b3b      	ldr	r3, [pc, #236]	; (a0a4 <spi_data_read+0x110>)
    9fb8:	4698      	mov	r8, r3
    9fba:	e02e      	b.n	a01a <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    9fbc:	4a3a      	ldr	r2, [pc, #232]	; (a0a8 <spi_data_read+0x114>)
    9fbe:	493b      	ldr	r1, [pc, #236]	; (a0ac <spi_data_read+0x118>)
    9fc0:	483b      	ldr	r0, [pc, #236]	; (a0b0 <spi_data_read+0x11c>)
    9fc2:	4b3c      	ldr	r3, [pc, #240]	; (a0b4 <spi_data_read+0x120>)
    9fc4:	4798      	blx	r3
    9fc6:	483c      	ldr	r0, [pc, #240]	; (a0b8 <spi_data_read+0x124>)
    9fc8:	4b3c      	ldr	r3, [pc, #240]	; (a0bc <spi_data_read+0x128>)
    9fca:	4798      	blx	r3
    9fcc:	200d      	movs	r0, #13
    9fce:	4b3c      	ldr	r3, [pc, #240]	; (a0c0 <spi_data_read+0x12c>)
    9fd0:	4798      	blx	r3
    9fd2:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    9fd4:	0028      	movs	r0, r5
    9fd6:	b007      	add	sp, #28
    9fd8:	bc3c      	pop	{r2, r3, r4, r5}
    9fda:	4690      	mov	r8, r2
    9fdc:	4699      	mov	r9, r3
    9fde:	46a2      	mov	sl, r4
    9fe0:	46ab      	mov	fp, r5
    9fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    9fe4:	2c00      	cmp	r4, #0
    9fe6:	dd2e      	ble.n	a046 <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    9fe8:	9b01      	ldr	r3, [sp, #4]
    9fea:	4453      	add	r3, sl
    9fec:	0018      	movs	r0, r3
    9fee:	0039      	movs	r1, r7
    9ff0:	4b2c      	ldr	r3, [pc, #176]	; (a0a4 <spi_data_read+0x110>)
    9ff2:	4798      	blx	r3
    9ff4:	1e04      	subs	r4, r0, #0
    9ff6:	d133      	bne.n	a060 <spi_data_read+0xcc>
		if(!clockless)
    9ff8:	9b02      	ldr	r3, [sp, #8]
    9ffa:	2b00      	cmp	r3, #0
    9ffc:	d103      	bne.n	a006 <spi_data_read+0x72>
			if (!gu8Crc_off) {
    9ffe:	4b31      	ldr	r3, [pc, #196]	; (a0c4 <spi_data_read+0x130>)
    a000:	781b      	ldrb	r3, [r3, #0]
    a002:	2b00      	cmp	r3, #0
    a004:	d039      	beq.n	a07a <spi_data_read+0xe6>
		ix += nbytes;
    a006:	4653      	mov	r3, sl
    a008:	18fb      	adds	r3, r7, r3
    a00a:	b21b      	sxth	r3, r3
    a00c:	469a      	mov	sl, r3
		sz -= nbytes;
    a00e:	464b      	mov	r3, r9
    a010:	1bdf      	subs	r7, r3, r7
    a012:	b2bb      	uxth	r3, r7
    a014:	4699      	mov	r9, r3
	} while (sz);
    a016:	2b00      	cmp	r3, #0
    a018:	d042      	beq.n	a0a0 <spi_data_read+0x10c>
    a01a:	464f      	mov	r7, r9
    a01c:	45d9      	cmp	r9, fp
    a01e:	d901      	bls.n	a024 <spi_data_read+0x90>
    a020:	466b      	mov	r3, sp
    a022:	89df      	ldrh	r7, [r3, #14]
    a024:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    a026:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    a028:	ab04      	add	r3, sp, #16
    a02a:	1cde      	adds	r6, r3, #3
    a02c:	2101      	movs	r1, #1
    a02e:	0030      	movs	r0, r6
    a030:	47c0      	blx	r8
    a032:	1e05      	subs	r5, r0, #0
    a034:	d1c2      	bne.n	9fbc <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    a036:	7833      	ldrb	r3, [r6, #0]
    a038:	091b      	lsrs	r3, r3, #4
    a03a:	2b0f      	cmp	r3, #15
    a03c:	d0d2      	beq.n	9fe4 <spi_data_read+0x50>
    a03e:	3c01      	subs	r4, #1
    a040:	b224      	sxth	r4, r4
		} while (retry--);
    a042:	1c63      	adds	r3, r4, #1
    a044:	d1f2      	bne.n	a02c <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    a046:	4a20      	ldr	r2, [pc, #128]	; (a0c8 <spi_data_read+0x134>)
    a048:	4918      	ldr	r1, [pc, #96]	; (a0ac <spi_data_read+0x118>)
    a04a:	4819      	ldr	r0, [pc, #100]	; (a0b0 <spi_data_read+0x11c>)
    a04c:	4c19      	ldr	r4, [pc, #100]	; (a0b4 <spi_data_read+0x120>)
    a04e:	47a0      	blx	r4
    a050:	ab04      	add	r3, sp, #16
    a052:	78d9      	ldrb	r1, [r3, #3]
    a054:	481d      	ldr	r0, [pc, #116]	; (a0cc <spi_data_read+0x138>)
    a056:	47a0      	blx	r4
    a058:	200d      	movs	r0, #13
    a05a:	4b19      	ldr	r3, [pc, #100]	; (a0c0 <spi_data_read+0x12c>)
    a05c:	4798      	blx	r3
			break;
    a05e:	e7b9      	b.n	9fd4 <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    a060:	22c5      	movs	r2, #197	; 0xc5
    a062:	0092      	lsls	r2, r2, #2
    a064:	4911      	ldr	r1, [pc, #68]	; (a0ac <spi_data_read+0x118>)
    a066:	4812      	ldr	r0, [pc, #72]	; (a0b0 <spi_data_read+0x11c>)
    a068:	4b12      	ldr	r3, [pc, #72]	; (a0b4 <spi_data_read+0x120>)
    a06a:	4798      	blx	r3
    a06c:	4818      	ldr	r0, [pc, #96]	; (a0d0 <spi_data_read+0x13c>)
    a06e:	4b13      	ldr	r3, [pc, #76]	; (a0bc <spi_data_read+0x128>)
    a070:	4798      	blx	r3
    a072:	200d      	movs	r0, #13
    a074:	4b12      	ldr	r3, [pc, #72]	; (a0c0 <spi_data_read+0x12c>)
    a076:	4798      	blx	r3
			break;
    a078:	e7ac      	b.n	9fd4 <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    a07a:	2102      	movs	r1, #2
    a07c:	a805      	add	r0, sp, #20
    a07e:	4b09      	ldr	r3, [pc, #36]	; (a0a4 <spi_data_read+0x110>)
    a080:	4798      	blx	r3
    a082:	2800      	cmp	r0, #0
    a084:	d0bf      	beq.n	a006 <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    a086:	4a13      	ldr	r2, [pc, #76]	; (a0d4 <spi_data_read+0x140>)
    a088:	4908      	ldr	r1, [pc, #32]	; (a0ac <spi_data_read+0x118>)
    a08a:	4809      	ldr	r0, [pc, #36]	; (a0b0 <spi_data_read+0x11c>)
    a08c:	4b09      	ldr	r3, [pc, #36]	; (a0b4 <spi_data_read+0x120>)
    a08e:	4798      	blx	r3
    a090:	4811      	ldr	r0, [pc, #68]	; (a0d8 <spi_data_read+0x144>)
    a092:	4b0a      	ldr	r3, [pc, #40]	; (a0bc <spi_data_read+0x128>)
    a094:	4798      	blx	r3
    a096:	200d      	movs	r0, #13
    a098:	4b09      	ldr	r3, [pc, #36]	; (a0c0 <spi_data_read+0x12c>)
    a09a:	4798      	blx	r3
					result = N_FAIL;
    a09c:	0025      	movs	r5, r4
					break;
    a09e:	e799      	b.n	9fd4 <spi_data_read+0x40>
    a0a0:	2501      	movs	r5, #1
    a0a2:	e797      	b.n	9fd4 <spi_data_read+0x40>
    a0a4:	00009ea1 	.word	0x00009ea1
    a0a8:	000002ff 	.word	0x000002ff
    a0ac:	00013624 	.word	0x00013624
    a0b0:	00012f3c 	.word	0x00012f3c
    a0b4:	000119b1 	.word	0x000119b1
    a0b8:	00013af0 	.word	0x00013af0
    a0bc:	00011acd 	.word	0x00011acd
    a0c0:	000119e5 	.word	0x000119e5
    a0c4:	2000021c 	.word	0x2000021c
    a0c8:	0000030b 	.word	0x0000030b
    a0cc:	00013b24 	.word	0x00013b24
    a0d0:	00013b54 	.word	0x00013b54
    a0d4:	0000031f 	.word	0x0000031f
    a0d8:	00013b84 	.word	0x00013b84

0000a0dc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0de:	46d6      	mov	lr, sl
    a0e0:	464f      	mov	r7, r9
    a0e2:	4646      	mov	r6, r8
    a0e4:	b5c0      	push	{r6, r7, lr}
    a0e6:	b086      	sub	sp, #24
    a0e8:	9003      	str	r0, [sp, #12]
    a0ea:	9104      	str	r1, [sp, #16]
    a0ec:	2830      	cmp	r0, #48	; 0x30
    a0ee:	d80f      	bhi.n	a110 <spi_write_reg+0x34>
    a0f0:	4b30      	ldr	r3, [pc, #192]	; (a1b4 <spi_write_reg+0xd8>)
    a0f2:	781f      	ldrb	r7, [r3, #0]
    a0f4:	b2fb      	uxtb	r3, r7
    a0f6:	9305      	str	r3, [sp, #20]
    a0f8:	2300      	movs	r3, #0
    a0fa:	2230      	movs	r2, #48	; 0x30
    a0fc:	9903      	ldr	r1, [sp, #12]
    a0fe:	428a      	cmp	r2, r1
    a100:	415b      	adcs	r3, r3
    a102:	b2db      	uxtb	r3, r3
    a104:	469a      	mov	sl, r3
    a106:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    a108:	4b2b      	ldr	r3, [pc, #172]	; (a1b8 <spi_write_reg+0xdc>)
    a10a:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    a10c:	46d1      	mov	r9, sl
    a10e:	e033      	b.n	a178 <spi_write_reg+0x9c>
    a110:	4b2a      	ldr	r3, [pc, #168]	; (a1bc <spi_write_reg+0xe0>)
    a112:	781f      	ldrb	r7, [r3, #0]
    a114:	e7ee      	b.n	a0f4 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    a116:	9805      	ldr	r0, [sp, #20]
    a118:	4b29      	ldr	r3, [pc, #164]	; (a1c0 <spi_write_reg+0xe4>)
    a11a:	4798      	blx	r3
    a11c:	0004      	movs	r4, r0
	if (result != N_OK) {
    a11e:	2801      	cmp	r0, #1
    a120:	d041      	beq.n	a1a6 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    a122:	22e7      	movs	r2, #231	; 0xe7
    a124:	0092      	lsls	r2, r2, #2
    a126:	4927      	ldr	r1, [pc, #156]	; (a1c4 <spi_write_reg+0xe8>)
    a128:	4827      	ldr	r0, [pc, #156]	; (a1c8 <spi_write_reg+0xec>)
    a12a:	4e28      	ldr	r6, [pc, #160]	; (a1cc <spi_write_reg+0xf0>)
    a12c:	47b0      	blx	r6
    a12e:	9903      	ldr	r1, [sp, #12]
    a130:	4827      	ldr	r0, [pc, #156]	; (a1d0 <spi_write_reg+0xf4>)
    a132:	47b0      	blx	r6
    a134:	200d      	movs	r0, #13
    a136:	4b27      	ldr	r3, [pc, #156]	; (a1d4 <spi_write_reg+0xf8>)
    a138:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    a13a:	2001      	movs	r0, #1
    a13c:	4e26      	ldr	r6, [pc, #152]	; (a1d8 <spi_write_reg+0xfc>)
    a13e:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a140:	2300      	movs	r3, #0
    a142:	9300      	str	r3, [sp, #0]
    a144:	2200      	movs	r2, #0
    a146:	2100      	movs	r1, #0
    a148:	20cf      	movs	r0, #207	; 0xcf
    a14a:	4f1b      	ldr	r7, [pc, #108]	; (a1b8 <spi_write_reg+0xdc>)
    a14c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    a14e:	20cf      	movs	r0, #207	; 0xcf
    a150:	4b1b      	ldr	r3, [pc, #108]	; (a1c0 <spi_write_reg+0xe4>)
    a152:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    a154:	4a21      	ldr	r2, [pc, #132]	; (a1dc <spi_write_reg+0x100>)
    a156:	491b      	ldr	r1, [pc, #108]	; (a1c4 <spi_write_reg+0xe8>)
    a158:	481b      	ldr	r0, [pc, #108]	; (a1c8 <spi_write_reg+0xec>)
    a15a:	4f1c      	ldr	r7, [pc, #112]	; (a1cc <spi_write_reg+0xf0>)
    a15c:	47b8      	blx	r7
    a15e:	9b04      	ldr	r3, [sp, #16]
    a160:	9a03      	ldr	r2, [sp, #12]
    a162:	0029      	movs	r1, r5
    a164:	481e      	ldr	r0, [pc, #120]	; (a1e0 <spi_write_reg+0x104>)
    a166:	47b8      	blx	r7
    a168:	200d      	movs	r0, #13
    a16a:	4b1a      	ldr	r3, [pc, #104]	; (a1d4 <spi_write_reg+0xf8>)
    a16c:	4798      	blx	r3
		nm_bsp_sleep(1);
    a16e:	2001      	movs	r0, #1
    a170:	47b0      	blx	r6
    a172:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    a174:	2d00      	cmp	r5, #0
    a176:	d016      	beq.n	a1a6 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    a178:	464b      	mov	r3, r9
    a17a:	9300      	str	r3, [sp, #0]
    a17c:	2304      	movs	r3, #4
    a17e:	9a04      	ldr	r2, [sp, #16]
    a180:	9f03      	ldr	r7, [sp, #12]
    a182:	0039      	movs	r1, r7
    a184:	9805      	ldr	r0, [sp, #20]
    a186:	47c0      	blx	r8
    a188:	0004      	movs	r4, r0
	if (result != N_OK) {
    a18a:	2801      	cmp	r0, #1
    a18c:	d0c3      	beq.n	a116 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    a18e:	4a15      	ldr	r2, [pc, #84]	; (a1e4 <spi_write_reg+0x108>)
    a190:	490c      	ldr	r1, [pc, #48]	; (a1c4 <spi_write_reg+0xe8>)
    a192:	480d      	ldr	r0, [pc, #52]	; (a1c8 <spi_write_reg+0xec>)
    a194:	4e0d      	ldr	r6, [pc, #52]	; (a1cc <spi_write_reg+0xf0>)
    a196:	47b0      	blx	r6
    a198:	0039      	movs	r1, r7
    a19a:	4813      	ldr	r0, [pc, #76]	; (a1e8 <spi_write_reg+0x10c>)
    a19c:	47b0      	blx	r6
    a19e:	200d      	movs	r0, #13
    a1a0:	4b0c      	ldr	r3, [pc, #48]	; (a1d4 <spi_write_reg+0xf8>)
    a1a2:	4798      	blx	r3
		goto _FAIL_;
    a1a4:	e7c9      	b.n	a13a <spi_write_reg+0x5e>
	}

	return result;
}
    a1a6:	0020      	movs	r0, r4
    a1a8:	b006      	add	sp, #24
    a1aa:	bc1c      	pop	{r2, r3, r4}
    a1ac:	4690      	mov	r8, r2
    a1ae:	4699      	mov	r9, r3
    a1b0:	46a2      	mov	sl, r4
    a1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1b4:	000135fc 	.word	0x000135fc
    a1b8:	00009d21 	.word	0x00009d21
    a1bc:	000135fd 	.word	0x000135fd
    a1c0:	00009ec1 	.word	0x00009ec1
    a1c4:	00013644 	.word	0x00013644
    a1c8:	00012f3c 	.word	0x00012f3c
    a1cc:	000119b1 	.word	0x000119b1
    a1d0:	00013c7c 	.word	0x00013c7c
    a1d4:	000119e5 	.word	0x000119e5
    a1d8:	00008129 	.word	0x00008129
    a1dc:	000003af 	.word	0x000003af
    a1e0:	00013cb4 	.word	0x00013cb4
    a1e4:	00000396 	.word	0x00000396
    a1e8:	00013c50 	.word	0x00013c50

0000a1ec <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    a1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1ee:	46de      	mov	lr, fp
    a1f0:	4657      	mov	r7, sl
    a1f2:	464e      	mov	r6, r9
    a1f4:	4645      	mov	r5, r8
    a1f6:	b5e0      	push	{r5, r6, r7, lr}
    a1f8:	b087      	sub	sp, #28
    a1fa:	9002      	str	r0, [sp, #8]
    a1fc:	468b      	mov	fp, r1
    a1fe:	28ff      	cmp	r0, #255	; 0xff
    a200:	d80f      	bhi.n	a222 <spi_read_reg+0x36>
    a202:	4b41      	ldr	r3, [pc, #260]	; (a308 <spi_read_reg+0x11c>)
    a204:	781f      	ldrb	r7, [r3, #0]
    a206:	b2fb      	uxtb	r3, r7
    a208:	9303      	str	r3, [sp, #12]
    a20a:	2300      	movs	r3, #0
    a20c:	22ff      	movs	r2, #255	; 0xff
    a20e:	9902      	ldr	r1, [sp, #8]
    a210:	428a      	cmp	r2, r1
    a212:	415b      	adcs	r3, r3
    a214:	b2db      	uxtb	r3, r3
    a216:	469a      	mov	sl, r3
    a218:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    a21a:	4b3c      	ldr	r3, [pc, #240]	; (a30c <spi_read_reg+0x120>)
    a21c:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    a21e:	46d1      	mov	r9, sl
    a220:	e031      	b.n	a286 <spi_read_reg+0x9a>
    a222:	4b3b      	ldr	r3, [pc, #236]	; (a310 <spi_read_reg+0x124>)
    a224:	781f      	ldrb	r7, [r3, #0]
    a226:	e7ee      	b.n	a206 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    a228:	9803      	ldr	r0, [sp, #12]
    a22a:	4b3a      	ldr	r3, [pc, #232]	; (a314 <spi_read_reg+0x128>)
    a22c:	4798      	blx	r3
    a22e:	0004      	movs	r4, r0
	if (result != N_OK) {
    a230:	2801      	cmp	r0, #1
    a232:	d03f      	beq.n	a2b4 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    a234:	4a38      	ldr	r2, [pc, #224]	; (a318 <spi_read_reg+0x12c>)
    a236:	4939      	ldr	r1, [pc, #228]	; (a31c <spi_read_reg+0x130>)
    a238:	4839      	ldr	r0, [pc, #228]	; (a320 <spi_read_reg+0x134>)
    a23a:	4e3a      	ldr	r6, [pc, #232]	; (a324 <spi_read_reg+0x138>)
    a23c:	47b0      	blx	r6
    a23e:	9902      	ldr	r1, [sp, #8]
    a240:	4839      	ldr	r0, [pc, #228]	; (a328 <spi_read_reg+0x13c>)
    a242:	47b0      	blx	r6
    a244:	200d      	movs	r0, #13
    a246:	4b39      	ldr	r3, [pc, #228]	; (a32c <spi_read_reg+0x140>)
    a248:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    a24a:	2001      	movs	r0, #1
    a24c:	4e38      	ldr	r6, [pc, #224]	; (a330 <spi_read_reg+0x144>)
    a24e:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a250:	2300      	movs	r3, #0
    a252:	9300      	str	r3, [sp, #0]
    a254:	2200      	movs	r2, #0
    a256:	2100      	movs	r1, #0
    a258:	20cf      	movs	r0, #207	; 0xcf
    a25a:	4f2c      	ldr	r7, [pc, #176]	; (a30c <spi_read_reg+0x120>)
    a25c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    a25e:	20cf      	movs	r0, #207	; 0xcf
    a260:	4b2c      	ldr	r3, [pc, #176]	; (a314 <spi_read_reg+0x128>)
    a262:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    a264:	4a33      	ldr	r2, [pc, #204]	; (a334 <spi_read_reg+0x148>)
    a266:	492d      	ldr	r1, [pc, #180]	; (a31c <spi_read_reg+0x130>)
    a268:	482d      	ldr	r0, [pc, #180]	; (a320 <spi_read_reg+0x134>)
    a26a:	4f2e      	ldr	r7, [pc, #184]	; (a324 <spi_read_reg+0x138>)
    a26c:	47b8      	blx	r7
    a26e:	9a02      	ldr	r2, [sp, #8]
    a270:	0029      	movs	r1, r5
    a272:	4831      	ldr	r0, [pc, #196]	; (a338 <spi_read_reg+0x14c>)
    a274:	47b8      	blx	r7
    a276:	200d      	movs	r0, #13
    a278:	4b2c      	ldr	r3, [pc, #176]	; (a32c <spi_read_reg+0x140>)
    a27a:	4798      	blx	r3
		nm_bsp_sleep(1);
    a27c:	2001      	movs	r0, #1
    a27e:	47b0      	blx	r6
    a280:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    a282:	2d00      	cmp	r5, #0
    a284:	d037      	beq.n	a2f6 <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    a286:	464b      	mov	r3, r9
    a288:	9300      	str	r3, [sp, #0]
    a28a:	2304      	movs	r3, #4
    a28c:	2200      	movs	r2, #0
    a28e:	9f02      	ldr	r7, [sp, #8]
    a290:	0039      	movs	r1, r7
    a292:	9803      	ldr	r0, [sp, #12]
    a294:	47c0      	blx	r8
    a296:	0004      	movs	r4, r0
	if (result != N_OK) {
    a298:	2801      	cmp	r0, #1
    a29a:	d0c5      	beq.n	a228 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    a29c:	4a27      	ldr	r2, [pc, #156]	; (a33c <spi_read_reg+0x150>)
    a29e:	491f      	ldr	r1, [pc, #124]	; (a31c <spi_read_reg+0x130>)
    a2a0:	481f      	ldr	r0, [pc, #124]	; (a320 <spi_read_reg+0x134>)
    a2a2:	4e20      	ldr	r6, [pc, #128]	; (a324 <spi_read_reg+0x138>)
    a2a4:	47b0      	blx	r6
    a2a6:	0039      	movs	r1, r7
    a2a8:	4825      	ldr	r0, [pc, #148]	; (a340 <spi_read_reg+0x154>)
    a2aa:	47b0      	blx	r6
    a2ac:	200d      	movs	r0, #13
    a2ae:	4b1f      	ldr	r3, [pc, #124]	; (a32c <spi_read_reg+0x140>)
    a2b0:	4798      	blx	r3
		goto _FAIL_;
    a2b2:	e7ca      	b.n	a24a <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    a2b4:	464a      	mov	r2, r9
    a2b6:	2104      	movs	r1, #4
    a2b8:	a805      	add	r0, sp, #20
    a2ba:	4b22      	ldr	r3, [pc, #136]	; (a344 <spi_read_reg+0x158>)
    a2bc:	4798      	blx	r3
    a2be:	0004      	movs	r4, r0
	if (result != N_OK) {
    a2c0:	2801      	cmp	r0, #1
    a2c2:	d00b      	beq.n	a2dc <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    a2c4:	4a20      	ldr	r2, [pc, #128]	; (a348 <spi_read_reg+0x15c>)
    a2c6:	4915      	ldr	r1, [pc, #84]	; (a31c <spi_read_reg+0x130>)
    a2c8:	4815      	ldr	r0, [pc, #84]	; (a320 <spi_read_reg+0x134>)
    a2ca:	4b16      	ldr	r3, [pc, #88]	; (a324 <spi_read_reg+0x138>)
    a2cc:	4798      	blx	r3
    a2ce:	481f      	ldr	r0, [pc, #124]	; (a34c <spi_read_reg+0x160>)
    a2d0:	4b1f      	ldr	r3, [pc, #124]	; (a350 <spi_read_reg+0x164>)
    a2d2:	4798      	blx	r3
    a2d4:	200d      	movs	r0, #13
    a2d6:	4b15      	ldr	r3, [pc, #84]	; (a32c <spi_read_reg+0x140>)
    a2d8:	4798      	blx	r3
		goto _FAIL_;
    a2da:	e7b6      	b.n	a24a <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    a2dc:	aa05      	add	r2, sp, #20
    a2de:	7853      	ldrb	r3, [r2, #1]
    a2e0:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    a2e2:	7891      	ldrb	r1, [r2, #2]
    a2e4:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    a2e6:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    a2e8:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    a2ea:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    a2ec:	78d2      	ldrb	r2, [r2, #3]
    a2ee:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    a2f0:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    a2f2:	465a      	mov	r2, fp
    a2f4:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    a2f6:	0020      	movs	r0, r4
    a2f8:	b007      	add	sp, #28
    a2fa:	bc3c      	pop	{r2, r3, r4, r5}
    a2fc:	4690      	mov	r8, r2
    a2fe:	4699      	mov	r9, r3
    a300:	46a2      	mov	sl, r4
    a302:	46ab      	mov	fp, r5
    a304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a306:	46c0      	nop			; (mov r8, r8)
    a308:	000135fe 	.word	0x000135fe
    a30c:	00009d21 	.word	0x00009d21
    a310:	000135ff 	.word	0x000135ff
    a314:	00009ec1 	.word	0x00009ec1
    a318:	0000041d 	.word	0x0000041d
    a31c:	00013664 	.word	0x00013664
    a320:	00012f3c 	.word	0x00012f3c
    a324:	000119b1 	.word	0x000119b1
    a328:	00013be4 	.word	0x00013be4
    a32c:	000119e5 	.word	0x000119e5
    a330:	00008129 	.word	0x00008129
    a334:	0000043c 	.word	0x0000043c
    a338:	00013c38 	.word	0x00013c38
    a33c:	00000417 	.word	0x00000417
    a340:	00013bb8 	.word	0x00013bb8
    a344:	00009f95 	.word	0x00009f95
    a348:	00000424 	.word	0x00000424
    a34c:	00013c18 	.word	0x00013c18
    a350:	00011acd 	.word	0x00011acd

0000a354 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    a354:	b510      	push	{r4, lr}
    a356:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a358:	2300      	movs	r3, #0
    a35a:	9300      	str	r3, [sp, #0]
    a35c:	2200      	movs	r2, #0
    a35e:	2100      	movs	r1, #0
    a360:	20cf      	movs	r0, #207	; 0xcf
    a362:	4c04      	ldr	r4, [pc, #16]	; (a374 <nm_spi_reset+0x20>)
    a364:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    a366:	20cf      	movs	r0, #207	; 0xcf
    a368:	4b03      	ldr	r3, [pc, #12]	; (a378 <nm_spi_reset+0x24>)
    a36a:	4798      	blx	r3
	return M2M_SUCCESS;
}
    a36c:	2000      	movs	r0, #0
    a36e:	b002      	add	sp, #8
    a370:	bd10      	pop	{r4, pc}
    a372:	46c0      	nop			; (mov r8, r8)
    a374:	00009d21 	.word	0x00009d21
    a378:	00009ec1 	.word	0x00009ec1

0000a37c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    a37c:	2200      	movs	r2, #0
    a37e:	4b02      	ldr	r3, [pc, #8]	; (a388 <nm_spi_deinit+0xc>)
    a380:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    a382:	2000      	movs	r0, #0
    a384:	4770      	bx	lr
    a386:	46c0      	nop			; (mov r8, r8)
    a388:	2000021c 	.word	0x2000021c

0000a38c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    a38c:	b500      	push	{lr}
    a38e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    a390:	a901      	add	r1, sp, #4
    a392:	4b02      	ldr	r3, [pc, #8]	; (a39c <nm_spi_read_reg+0x10>)
    a394:	4798      	blx	r3

	return u32Val;
}
    a396:	9801      	ldr	r0, [sp, #4]
    a398:	b003      	add	sp, #12
    a39a:	bd00      	pop	{pc}
    a39c:	0000a1ed 	.word	0x0000a1ed

0000a3a0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    a3a0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    a3a2:	4b04      	ldr	r3, [pc, #16]	; (a3b4 <nm_spi_read_reg_with_ret+0x14>)
    a3a4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    a3a6:	2300      	movs	r3, #0
    a3a8:	2801      	cmp	r0, #1
    a3aa:	d101      	bne.n	a3b0 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    a3ac:	0018      	movs	r0, r3
    a3ae:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    a3b0:	3b06      	subs	r3, #6
    a3b2:	e7fb      	b.n	a3ac <nm_spi_read_reg_with_ret+0xc>
    a3b4:	0000a1ed 	.word	0x0000a1ed

0000a3b8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    a3b8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    a3ba:	4b04      	ldr	r3, [pc, #16]	; (a3cc <nm_spi_write_reg+0x14>)
    a3bc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    a3be:	2300      	movs	r3, #0
    a3c0:	2801      	cmp	r0, #1
    a3c2:	d101      	bne.n	a3c8 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    a3c4:	0018      	movs	r0, r3
    a3c6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    a3c8:	3b06      	subs	r3, #6
    a3ca:	e7fb      	b.n	a3c4 <nm_spi_write_reg+0xc>
    a3cc:	0000a0dd 	.word	0x0000a0dd

0000a3d0 <nm_spi_init>:
{
    a3d0:	b510      	push	{r4, lr}
    a3d2:	b082      	sub	sp, #8
	uint32 reg = 0;
    a3d4:	2300      	movs	r3, #0
    a3d6:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    a3d8:	4a35      	ldr	r2, [pc, #212]	; (a4b0 <nm_spi_init+0xe0>)
    a3da:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    a3dc:	4669      	mov	r1, sp
    a3de:	4835      	ldr	r0, [pc, #212]	; (a4b4 <nm_spi_init+0xe4>)
    a3e0:	4b35      	ldr	r3, [pc, #212]	; (a4b8 <nm_spi_init+0xe8>)
    a3e2:	4798      	blx	r3
    a3e4:	2800      	cmp	r0, #0
    a3e6:	d028      	beq.n	a43a <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    a3e8:	4b31      	ldr	r3, [pc, #196]	; (a4b0 <nm_spi_init+0xe0>)
    a3ea:	781b      	ldrb	r3, [r3, #0]
    a3ec:	2b00      	cmp	r3, #0
    a3ee:	d10d      	bne.n	a40c <nm_spi_init+0x3c>
		reg &= ~0x70;
    a3f0:	337c      	adds	r3, #124	; 0x7c
    a3f2:	9900      	ldr	r1, [sp, #0]
    a3f4:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    a3f6:	3b2c      	subs	r3, #44	; 0x2c
    a3f8:	4319      	orrs	r1, r3
    a3fa:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    a3fc:	482d      	ldr	r0, [pc, #180]	; (a4b4 <nm_spi_init+0xe4>)
    a3fe:	4b2f      	ldr	r3, [pc, #188]	; (a4bc <nm_spi_init+0xec>)
    a400:	4798      	blx	r3
    a402:	1e04      	subs	r4, r0, #0
    a404:	d039      	beq.n	a47a <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    a406:	2201      	movs	r2, #1
    a408:	4b29      	ldr	r3, [pc, #164]	; (a4b0 <nm_spi_init+0xe0>)
    a40a:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    a40c:	a901      	add	r1, sp, #4
    a40e:	2080      	movs	r0, #128	; 0x80
    a410:	0140      	lsls	r0, r0, #5
    a412:	4b29      	ldr	r3, [pc, #164]	; (a4b8 <nm_spi_init+0xe8>)
    a414:	4798      	blx	r3
    a416:	2800      	cmp	r0, #0
    a418:	d03b      	beq.n	a492 <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    a41a:	4c26      	ldr	r4, [pc, #152]	; (a4b4 <nm_spi_init+0xe4>)
    a41c:	0020      	movs	r0, r4
    a41e:	4b28      	ldr	r3, [pc, #160]	; (a4c0 <nm_spi_init+0xf0>)
    a420:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    a422:	2370      	movs	r3, #112	; 0x70
    a424:	0001      	movs	r1, r0
    a426:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    a428:	2050      	movs	r0, #80	; 0x50
    a42a:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    a42c:	0020      	movs	r0, r4
    a42e:	4b25      	ldr	r3, [pc, #148]	; (a4c4 <nm_spi_init+0xf4>)
    a430:	4798      	blx	r3
	return M2M_SUCCESS;
    a432:	2400      	movs	r4, #0
}
    a434:	0020      	movs	r0, r4
    a436:	b002      	add	sp, #8
    a438:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    a43a:	2201      	movs	r2, #1
    a43c:	4b1c      	ldr	r3, [pc, #112]	; (a4b0 <nm_spi_init+0xe0>)
    a43e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    a440:	4a21      	ldr	r2, [pc, #132]	; (a4c8 <nm_spi_init+0xf8>)
    a442:	4922      	ldr	r1, [pc, #136]	; (a4cc <nm_spi_init+0xfc>)
    a444:	4822      	ldr	r0, [pc, #136]	; (a4d0 <nm_spi_init+0x100>)
    a446:	4b23      	ldr	r3, [pc, #140]	; (a4d4 <nm_spi_init+0x104>)
    a448:	4798      	blx	r3
    a44a:	4823      	ldr	r0, [pc, #140]	; (a4d8 <nm_spi_init+0x108>)
    a44c:	4b23      	ldr	r3, [pc, #140]	; (a4dc <nm_spi_init+0x10c>)
    a44e:	4798      	blx	r3
    a450:	200d      	movs	r0, #13
    a452:	4b23      	ldr	r3, [pc, #140]	; (a4e0 <nm_spi_init+0x110>)
    a454:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    a456:	4669      	mov	r1, sp
    a458:	4816      	ldr	r0, [pc, #88]	; (a4b4 <nm_spi_init+0xe4>)
    a45a:	4b17      	ldr	r3, [pc, #92]	; (a4b8 <nm_spi_init+0xe8>)
    a45c:	4798      	blx	r3
    a45e:	1e04      	subs	r4, r0, #0
    a460:	d1c2      	bne.n	a3e8 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    a462:	4a20      	ldr	r2, [pc, #128]	; (a4e4 <nm_spi_init+0x114>)
    a464:	4919      	ldr	r1, [pc, #100]	; (a4cc <nm_spi_init+0xfc>)
    a466:	481a      	ldr	r0, [pc, #104]	; (a4d0 <nm_spi_init+0x100>)
    a468:	4b1a      	ldr	r3, [pc, #104]	; (a4d4 <nm_spi_init+0x104>)
    a46a:	4798      	blx	r3
    a46c:	481e      	ldr	r0, [pc, #120]	; (a4e8 <nm_spi_init+0x118>)
    a46e:	4b1b      	ldr	r3, [pc, #108]	; (a4dc <nm_spi_init+0x10c>)
    a470:	4798      	blx	r3
    a472:	200d      	movs	r0, #13
    a474:	4b1a      	ldr	r3, [pc, #104]	; (a4e0 <nm_spi_init+0x110>)
    a476:	4798      	blx	r3
			return 0;
    a478:	e7dc      	b.n	a434 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    a47a:	4a1c      	ldr	r2, [pc, #112]	; (a4ec <nm_spi_init+0x11c>)
    a47c:	4913      	ldr	r1, [pc, #76]	; (a4cc <nm_spi_init+0xfc>)
    a47e:	4814      	ldr	r0, [pc, #80]	; (a4d0 <nm_spi_init+0x100>)
    a480:	4b14      	ldr	r3, [pc, #80]	; (a4d4 <nm_spi_init+0x104>)
    a482:	4798      	blx	r3
    a484:	481a      	ldr	r0, [pc, #104]	; (a4f0 <nm_spi_init+0x120>)
    a486:	4b15      	ldr	r3, [pc, #84]	; (a4dc <nm_spi_init+0x10c>)
    a488:	4798      	blx	r3
    a48a:	200d      	movs	r0, #13
    a48c:	4b14      	ldr	r3, [pc, #80]	; (a4e0 <nm_spi_init+0x110>)
    a48e:	4798      	blx	r3
			return 0;
    a490:	e7d0      	b.n	a434 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    a492:	4a18      	ldr	r2, [pc, #96]	; (a4f4 <nm_spi_init+0x124>)
    a494:	490d      	ldr	r1, [pc, #52]	; (a4cc <nm_spi_init+0xfc>)
    a496:	480e      	ldr	r0, [pc, #56]	; (a4d0 <nm_spi_init+0x100>)
    a498:	4b0e      	ldr	r3, [pc, #56]	; (a4d4 <nm_spi_init+0x104>)
    a49a:	4798      	blx	r3
    a49c:	4816      	ldr	r0, [pc, #88]	; (a4f8 <nm_spi_init+0x128>)
    a49e:	4b0f      	ldr	r3, [pc, #60]	; (a4dc <nm_spi_init+0x10c>)
    a4a0:	4798      	blx	r3
    a4a2:	200d      	movs	r0, #13
    a4a4:	4b0e      	ldr	r3, [pc, #56]	; (a4e0 <nm_spi_init+0x110>)
    a4a6:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    a4a8:	2406      	movs	r4, #6
    a4aa:	4264      	negs	r4, r4
    a4ac:	e7c2      	b.n	a434 <nm_spi_init+0x64>
    a4ae:	46c0      	nop			; (mov r8, r8)
    a4b0:	2000021c 	.word	0x2000021c
    a4b4:	0000e824 	.word	0x0000e824
    a4b8:	0000a1ed 	.word	0x0000a1ed
    a4bc:	0000a0dd 	.word	0x0000a0dd
    a4c0:	0000a38d 	.word	0x0000a38d
    a4c4:	0000a3b9 	.word	0x0000a3b9
    a4c8:	000004c7 	.word	0x000004c7
    a4cc:	00013680 	.word	0x00013680
    a4d0:	00012f3c 	.word	0x00012f3c
    a4d4:	000119b1 	.word	0x000119b1
    a4d8:	0001378c 	.word	0x0001378c
    a4dc:	00011acd 	.word	0x00011acd
    a4e0:	000119e5 	.word	0x000119e5
    a4e4:	000004ca 	.word	0x000004ca
    a4e8:	000137dc 	.word	0x000137dc
    a4ec:	000004d4 	.word	0x000004d4
    a4f0:	00013808 	.word	0x00013808
    a4f4:	000004de 	.word	0x000004de
    a4f8:	0001383c 	.word	0x0001383c

0000a4fc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    a4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4fe:	46de      	mov	lr, fp
    a500:	4657      	mov	r7, sl
    a502:	464e      	mov	r6, r9
    a504:	4645      	mov	r5, r8
    a506:	b5e0      	push	{r5, r6, r7, lr}
    a508:	b087      	sub	sp, #28
    a50a:	9002      	str	r0, [sp, #8]
    a50c:	9103      	str	r1, [sp, #12]
    a50e:	0016      	movs	r6, r2
    a510:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    a512:	2300      	movs	r3, #0
    a514:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    a516:	2400      	movs	r4, #0
    a518:	4b3e      	ldr	r3, [pc, #248]	; (a614 <nm_spi_read_block+0x118>)
    a51a:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    a51c:	46a9      	mov	r9, r5
    a51e:	e037      	b.n	a590 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    a520:	2301      	movs	r3, #1
    a522:	469b      	mov	fp, r3
		size = 2;
    a524:	3601      	adds	r6, #1
    a526:	e035      	b.n	a594 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    a528:	20c8      	movs	r0, #200	; 0xc8
    a52a:	4b3b      	ldr	r3, [pc, #236]	; (a618 <nm_spi_read_block+0x11c>)
    a52c:	4798      	blx	r3
	if (result != N_OK) {
    a52e:	2801      	cmp	r0, #1
    a530:	d045      	beq.n	a5be <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    a532:	4a3a      	ldr	r2, [pc, #232]	; (a61c <nm_spi_read_block+0x120>)
    a534:	493a      	ldr	r1, [pc, #232]	; (a620 <nm_spi_read_block+0x124>)
    a536:	483b      	ldr	r0, [pc, #236]	; (a624 <nm_spi_read_block+0x128>)
    a538:	4f3b      	ldr	r7, [pc, #236]	; (a628 <nm_spi_read_block+0x12c>)
    a53a:	47b8      	blx	r7
    a53c:	9902      	ldr	r1, [sp, #8]
    a53e:	483b      	ldr	r0, [pc, #236]	; (a62c <nm_spi_read_block+0x130>)
    a540:	47b8      	blx	r7
    a542:	200d      	movs	r0, #13
    a544:	4b3a      	ldr	r3, [pc, #232]	; (a630 <nm_spi_read_block+0x134>)
    a546:	4798      	blx	r3
		nm_bsp_sleep(1);
    a548:	2001      	movs	r0, #1
    a54a:	4f3a      	ldr	r7, [pc, #232]	; (a634 <nm_spi_read_block+0x138>)
    a54c:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a54e:	9400      	str	r4, [sp, #0]
    a550:	0023      	movs	r3, r4
    a552:	0022      	movs	r2, r4
    a554:	0021      	movs	r1, r4
    a556:	20cf      	movs	r0, #207	; 0xcf
    a558:	4d2e      	ldr	r5, [pc, #184]	; (a614 <nm_spi_read_block+0x118>)
    a55a:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    a55c:	20cf      	movs	r0, #207	; 0xcf
    a55e:	4b2e      	ldr	r3, [pc, #184]	; (a618 <nm_spi_read_block+0x11c>)
    a560:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    a562:	4a35      	ldr	r2, [pc, #212]	; (a638 <nm_spi_read_block+0x13c>)
    a564:	492e      	ldr	r1, [pc, #184]	; (a620 <nm_spi_read_block+0x124>)
    a566:	482f      	ldr	r0, [pc, #188]	; (a624 <nm_spi_read_block+0x128>)
    a568:	4b2f      	ldr	r3, [pc, #188]	; (a628 <nm_spi_read_block+0x12c>)
    a56a:	469a      	mov	sl, r3
    a56c:	4798      	blx	r3
    a56e:	0033      	movs	r3, r6
    a570:	9a02      	ldr	r2, [sp, #8]
    a572:	4649      	mov	r1, r9
    a574:	4831      	ldr	r0, [pc, #196]	; (a63c <nm_spi_read_block+0x140>)
    a576:	47d0      	blx	sl
    a578:	200d      	movs	r0, #13
    a57a:	4b2d      	ldr	r3, [pc, #180]	; (a630 <nm_spi_read_block+0x134>)
    a57c:	4798      	blx	r3
		nm_bsp_sleep(1);
    a57e:	2001      	movs	r0, #1
    a580:	47b8      	blx	r7
    a582:	2301      	movs	r3, #1
    a584:	425b      	negs	r3, r3
    a586:	469c      	mov	ip, r3
    a588:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    a58a:	464b      	mov	r3, r9
    a58c:	2b00      	cmp	r3, #0
    a58e:	d038      	beq.n	a602 <nm_spi_read_block+0x106>
	if (size == 1)
    a590:	2e01      	cmp	r6, #1
    a592:	d0c5      	beq.n	a520 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    a594:	9400      	str	r4, [sp, #0]
    a596:	0033      	movs	r3, r6
    a598:	0022      	movs	r2, r4
    a59a:	9d02      	ldr	r5, [sp, #8]
    a59c:	0029      	movs	r1, r5
    a59e:	20c8      	movs	r0, #200	; 0xc8
    a5a0:	47c0      	blx	r8
	if (result != N_OK) {
    a5a2:	2801      	cmp	r0, #1
    a5a4:	d0c0      	beq.n	a528 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    a5a6:	4a26      	ldr	r2, [pc, #152]	; (a640 <nm_spi_read_block+0x144>)
    a5a8:	491d      	ldr	r1, [pc, #116]	; (a620 <nm_spi_read_block+0x124>)
    a5aa:	481e      	ldr	r0, [pc, #120]	; (a624 <nm_spi_read_block+0x128>)
    a5ac:	4f1e      	ldr	r7, [pc, #120]	; (a628 <nm_spi_read_block+0x12c>)
    a5ae:	47b8      	blx	r7
    a5b0:	0029      	movs	r1, r5
    a5b2:	4824      	ldr	r0, [pc, #144]	; (a644 <nm_spi_read_block+0x148>)
    a5b4:	47b8      	blx	r7
    a5b6:	200d      	movs	r0, #13
    a5b8:	4b1d      	ldr	r3, [pc, #116]	; (a630 <nm_spi_read_block+0x134>)
    a5ba:	4798      	blx	r3
    a5bc:	e7c4      	b.n	a548 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    a5be:	465b      	mov	r3, fp
    a5c0:	2b00      	cmp	r3, #0
    a5c2:	d016      	beq.n	a5f2 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    a5c4:	af05      	add	r7, sp, #20
    a5c6:	0022      	movs	r2, r4
    a5c8:	0031      	movs	r1, r6
    a5ca:	0038      	movs	r0, r7
    a5cc:	4b1e      	ldr	r3, [pc, #120]	; (a648 <nm_spi_read_block+0x14c>)
    a5ce:	4798      	blx	r3
		buf[0] = tmp[0];
    a5d0:	783b      	ldrb	r3, [r7, #0]
    a5d2:	9a03      	ldr	r2, [sp, #12]
    a5d4:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    a5d6:	2801      	cmp	r0, #1
    a5d8:	d011      	beq.n	a5fe <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    a5da:	4a1c      	ldr	r2, [pc, #112]	; (a64c <nm_spi_read_block+0x150>)
    a5dc:	4910      	ldr	r1, [pc, #64]	; (a620 <nm_spi_read_block+0x124>)
    a5de:	4811      	ldr	r0, [pc, #68]	; (a624 <nm_spi_read_block+0x128>)
    a5e0:	4b11      	ldr	r3, [pc, #68]	; (a628 <nm_spi_read_block+0x12c>)
    a5e2:	4798      	blx	r3
    a5e4:	481a      	ldr	r0, [pc, #104]	; (a650 <nm_spi_read_block+0x154>)
    a5e6:	4b1b      	ldr	r3, [pc, #108]	; (a654 <nm_spi_read_block+0x158>)
    a5e8:	4798      	blx	r3
    a5ea:	200d      	movs	r0, #13
    a5ec:	4b10      	ldr	r3, [pc, #64]	; (a630 <nm_spi_read_block+0x134>)
    a5ee:	4798      	blx	r3
    a5f0:	e7aa      	b.n	a548 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    a5f2:	0022      	movs	r2, r4
    a5f4:	0031      	movs	r1, r6
    a5f6:	9803      	ldr	r0, [sp, #12]
    a5f8:	4b13      	ldr	r3, [pc, #76]	; (a648 <nm_spi_read_block+0x14c>)
    a5fa:	4798      	blx	r3
    a5fc:	e7eb      	b.n	a5d6 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    a5fe:	2000      	movs	r0, #0
    a600:	e001      	b.n	a606 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    a602:	2006      	movs	r0, #6
    a604:	4240      	negs	r0, r0

	return s8Ret;
}
    a606:	b007      	add	sp, #28
    a608:	bc3c      	pop	{r2, r3, r4, r5}
    a60a:	4690      	mov	r8, r2
    a60c:	4699      	mov	r9, r3
    a60e:	46a2      	mov	sl, r4
    a610:	46ab      	mov	fp, r5
    a612:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a614:	00009d21 	.word	0x00009d21
    a618:	00009ec1 	.word	0x00009ec1
    a61c:	00000463 	.word	0x00000463
    a620:	00013674 	.word	0x00013674
    a624:	00012f3c 	.word	0x00012f3c
    a628:	000119b1 	.word	0x000119b1
    a62c:	00013890 	.word	0x00013890
    a630:	000119e5 	.word	0x000119e5
    a634:	00008129 	.word	0x00008129
    a638:	00000484 	.word	0x00000484
    a63c:	000138f0 	.word	0x000138f0
    a640:	0000045d 	.word	0x0000045d
    a644:	00013860 	.word	0x00013860
    a648:	00009f95 	.word	0x00009f95
    a64c:	00000473 	.word	0x00000473
    a650:	000138c8 	.word	0x000138c8
    a654:	00011acd 	.word	0x00011acd

0000a658 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    a658:	b5f0      	push	{r4, r5, r6, r7, lr}
    a65a:	46de      	mov	lr, fp
    a65c:	4647      	mov	r7, r8
    a65e:	b580      	push	{r7, lr}
    a660:	b089      	sub	sp, #36	; 0x24
    a662:	9004      	str	r0, [sp, #16]
    a664:	468b      	mov	fp, r1
    a666:	9203      	str	r2, [sp, #12]
    a668:	260a      	movs	r6, #10
    a66a:	2780      	movs	r7, #128	; 0x80
    a66c:	01bf      	lsls	r7, r7, #6
    a66e:	466b      	mov	r3, sp
    a670:	82df      	strh	r7, [r3, #22]
    a672:	0035      	movs	r5, r6
    a674:	e02d      	b.n	a6d2 <nm_spi_write_block+0x7a>
		size = 2;
    a676:	3301      	adds	r3, #1
    a678:	9303      	str	r3, [sp, #12]
    a67a:	e02d      	b.n	a6d8 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    a67c:	4a83      	ldr	r2, [pc, #524]	; (a88c <nm_spi_write_block+0x234>)
    a67e:	4984      	ldr	r1, [pc, #528]	; (a890 <nm_spi_write_block+0x238>)
    a680:	4884      	ldr	r0, [pc, #528]	; (a894 <nm_spi_write_block+0x23c>)
    a682:	4c85      	ldr	r4, [pc, #532]	; (a898 <nm_spi_write_block+0x240>)
    a684:	47a0      	blx	r4
    a686:	0031      	movs	r1, r6
    a688:	4884      	ldr	r0, [pc, #528]	; (a89c <nm_spi_write_block+0x244>)
    a68a:	47a0      	blx	r4
    a68c:	200d      	movs	r0, #13
    a68e:	4b84      	ldr	r3, [pc, #528]	; (a8a0 <nm_spi_write_block+0x248>)
    a690:	4798      	blx	r3
		nm_bsp_sleep(1);
    a692:	2001      	movs	r0, #1
    a694:	4c83      	ldr	r4, [pc, #524]	; (a8a4 <nm_spi_write_block+0x24c>)
    a696:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a698:	2300      	movs	r3, #0
    a69a:	9300      	str	r3, [sp, #0]
    a69c:	2200      	movs	r2, #0
    a69e:	2100      	movs	r1, #0
    a6a0:	20cf      	movs	r0, #207	; 0xcf
    a6a2:	4e81      	ldr	r6, [pc, #516]	; (a8a8 <nm_spi_write_block+0x250>)
    a6a4:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    a6a6:	20cf      	movs	r0, #207	; 0xcf
    a6a8:	4b80      	ldr	r3, [pc, #512]	; (a8ac <nm_spi_write_block+0x254>)
    a6aa:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    a6ac:	4a80      	ldr	r2, [pc, #512]	; (a8b0 <nm_spi_write_block+0x258>)
    a6ae:	4978      	ldr	r1, [pc, #480]	; (a890 <nm_spi_write_block+0x238>)
    a6b0:	4878      	ldr	r0, [pc, #480]	; (a894 <nm_spi_write_block+0x23c>)
    a6b2:	4e79      	ldr	r6, [pc, #484]	; (a898 <nm_spi_write_block+0x240>)
    a6b4:	47b0      	blx	r6
    a6b6:	9b03      	ldr	r3, [sp, #12]
    a6b8:	9a04      	ldr	r2, [sp, #16]
    a6ba:	0029      	movs	r1, r5
    a6bc:	487d      	ldr	r0, [pc, #500]	; (a8b4 <nm_spi_write_block+0x25c>)
    a6be:	47b0      	blx	r6
    a6c0:	200d      	movs	r0, #13
    a6c2:	4b77      	ldr	r3, [pc, #476]	; (a8a0 <nm_spi_write_block+0x248>)
    a6c4:	4798      	blx	r3
		nm_bsp_sleep(1);
    a6c6:	2001      	movs	r0, #1
    a6c8:	47a0      	blx	r4
    a6ca:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    a6cc:	2d00      	cmp	r5, #0
    a6ce:	d100      	bne.n	a6d2 <nm_spi_write_block+0x7a>
    a6d0:	e0d5      	b.n	a87e <nm_spi_write_block+0x226>
	if (size == 1)
    a6d2:	9b03      	ldr	r3, [sp, #12]
    a6d4:	2b01      	cmp	r3, #1
    a6d6:	d0ce      	beq.n	a676 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    a6d8:	2300      	movs	r3, #0
    a6da:	9300      	str	r3, [sp, #0]
    a6dc:	9b03      	ldr	r3, [sp, #12]
    a6de:	2200      	movs	r2, #0
    a6e0:	9e04      	ldr	r6, [sp, #16]
    a6e2:	0031      	movs	r1, r6
    a6e4:	20c7      	movs	r0, #199	; 0xc7
    a6e6:	4c70      	ldr	r4, [pc, #448]	; (a8a8 <nm_spi_write_block+0x250>)
    a6e8:	47a0      	blx	r4
	if (result != N_OK) {
    a6ea:	2801      	cmp	r0, #1
    a6ec:	d1c6      	bne.n	a67c <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    a6ee:	20c7      	movs	r0, #199	; 0xc7
    a6f0:	4b6e      	ldr	r3, [pc, #440]	; (a8ac <nm_spi_write_block+0x254>)
    a6f2:	4798      	blx	r3
	if (result != N_OK) {
    a6f4:	2801      	cmp	r0, #1
    a6f6:	d00c      	beq.n	a712 <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    a6f8:	22f4      	movs	r2, #244	; 0xf4
    a6fa:	0092      	lsls	r2, r2, #2
    a6fc:	4964      	ldr	r1, [pc, #400]	; (a890 <nm_spi_write_block+0x238>)
    a6fe:	4865      	ldr	r0, [pc, #404]	; (a894 <nm_spi_write_block+0x23c>)
    a700:	4c65      	ldr	r4, [pc, #404]	; (a898 <nm_spi_write_block+0x240>)
    a702:	47a0      	blx	r4
    a704:	9904      	ldr	r1, [sp, #16]
    a706:	486c      	ldr	r0, [pc, #432]	; (a8b8 <nm_spi_write_block+0x260>)
    a708:	47a0      	blx	r4
    a70a:	200d      	movs	r0, #13
    a70c:	4b64      	ldr	r3, [pc, #400]	; (a8a0 <nm_spi_write_block+0x248>)
    a70e:	4798      	blx	r3
    a710:	e7bf      	b.n	a692 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    a712:	2200      	movs	r2, #0
    a714:	ab07      	add	r3, sp, #28
    a716:	801a      	strh	r2, [r3, #0]
    a718:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    a71a:	2600      	movs	r6, #0
				order = 0x1;
    a71c:	46a8      	mov	r8, r5
    a71e:	0035      	movs	r5, r6
    a720:	0026      	movs	r6, r4
    a722:	e021      	b.n	a768 <nm_spi_write_block+0x110>
				order = 0x2;
    a724:	2300      	movs	r3, #0
    a726:	42b7      	cmp	r7, r6
    a728:	415b      	adcs	r3, r3
    a72a:	3302      	adds	r3, #2
		cmd |= order;
    a72c:	200b      	movs	r0, #11
    a72e:	aa04      	add	r2, sp, #16
    a730:	4694      	mov	ip, r2
    a732:	4460      	add	r0, ip
    a734:	2210      	movs	r2, #16
    a736:	4252      	negs	r2, r2
    a738:	4313      	orrs	r3, r2
    a73a:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    a73c:	2101      	movs	r1, #1
    a73e:	4b5f      	ldr	r3, [pc, #380]	; (a8bc <nm_spi_write_block+0x264>)
    a740:	4798      	blx	r3
    a742:	2800      	cmp	r0, #0
    a744:	d11d      	bne.n	a782 <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    a746:	465b      	mov	r3, fp
    a748:	1958      	adds	r0, r3, r5
    a74a:	0021      	movs	r1, r4
    a74c:	4b5b      	ldr	r3, [pc, #364]	; (a8bc <nm_spi_write_block+0x264>)
    a74e:	4798      	blx	r3
    a750:	2800      	cmp	r0, #0
    a752:	d130      	bne.n	a7b6 <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    a754:	4b5a      	ldr	r3, [pc, #360]	; (a8c0 <nm_spi_write_block+0x268>)
    a756:	781b      	ldrb	r3, [r3, #0]
    a758:	2b00      	cmp	r3, #0
    a75a:	d039      	beq.n	a7d0 <nm_spi_write_block+0x178>
		ix += nbytes;
    a75c:	1965      	adds	r5, r4, r5
    a75e:	b22d      	sxth	r5, r5
		sz -= nbytes;
    a760:	1b36      	subs	r6, r6, r4
    a762:	b2b6      	uxth	r6, r6
	} while (sz);
    a764:	2e00      	cmp	r6, #0
    a766:	d053      	beq.n	a810 <nm_spi_write_block+0x1b8>
    a768:	1c34      	adds	r4, r6, #0
    a76a:	42be      	cmp	r6, r7
    a76c:	d901      	bls.n	a772 <nm_spi_write_block+0x11a>
    a76e:	466b      	mov	r3, sp
    a770:	8adc      	ldrh	r4, [r3, #22]
    a772:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    a774:	2d00      	cmp	r5, #0
    a776:	d1d5      	bne.n	a724 <nm_spi_write_block+0xcc>
				order = 0x3;
    a778:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    a77a:	42be      	cmp	r6, r7
    a77c:	d9d6      	bls.n	a72c <nm_spi_write_block+0xd4>
				order = 0x1;
    a77e:	3b02      	subs	r3, #2
    a780:	e7d4      	b.n	a72c <nm_spi_write_block+0xd4>
    a782:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    a784:	22d4      	movs	r2, #212	; 0xd4
    a786:	0092      	lsls	r2, r2, #2
    a788:	494e      	ldr	r1, [pc, #312]	; (a8c4 <nm_spi_write_block+0x26c>)
    a78a:	4842      	ldr	r0, [pc, #264]	; (a894 <nm_spi_write_block+0x23c>)
    a78c:	4b42      	ldr	r3, [pc, #264]	; (a898 <nm_spi_write_block+0x240>)
    a78e:	4798      	blx	r3
    a790:	484d      	ldr	r0, [pc, #308]	; (a8c8 <nm_spi_write_block+0x270>)
    a792:	4b4e      	ldr	r3, [pc, #312]	; (a8cc <nm_spi_write_block+0x274>)
    a794:	4798      	blx	r3
    a796:	200d      	movs	r0, #13
    a798:	4b41      	ldr	r3, [pc, #260]	; (a8a0 <nm_spi_write_block+0x248>)
    a79a:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    a79c:	22f8      	movs	r2, #248	; 0xf8
    a79e:	0092      	lsls	r2, r2, #2
    a7a0:	493b      	ldr	r1, [pc, #236]	; (a890 <nm_spi_write_block+0x238>)
    a7a2:	483c      	ldr	r0, [pc, #240]	; (a894 <nm_spi_write_block+0x23c>)
    a7a4:	4b3c      	ldr	r3, [pc, #240]	; (a898 <nm_spi_write_block+0x240>)
    a7a6:	4798      	blx	r3
    a7a8:	4849      	ldr	r0, [pc, #292]	; (a8d0 <nm_spi_write_block+0x278>)
    a7aa:	4b48      	ldr	r3, [pc, #288]	; (a8cc <nm_spi_write_block+0x274>)
    a7ac:	4798      	blx	r3
    a7ae:	200d      	movs	r0, #13
    a7b0:	4b3b      	ldr	r3, [pc, #236]	; (a8a0 <nm_spi_write_block+0x248>)
    a7b2:	4798      	blx	r3
    a7b4:	e76d      	b.n	a692 <nm_spi_write_block+0x3a>
    a7b6:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    a7b8:	4a46      	ldr	r2, [pc, #280]	; (a8d4 <nm_spi_write_block+0x27c>)
    a7ba:	4942      	ldr	r1, [pc, #264]	; (a8c4 <nm_spi_write_block+0x26c>)
    a7bc:	4835      	ldr	r0, [pc, #212]	; (a894 <nm_spi_write_block+0x23c>)
    a7be:	4b36      	ldr	r3, [pc, #216]	; (a898 <nm_spi_write_block+0x240>)
    a7c0:	4798      	blx	r3
    a7c2:	4845      	ldr	r0, [pc, #276]	; (a8d8 <nm_spi_write_block+0x280>)
    a7c4:	4b41      	ldr	r3, [pc, #260]	; (a8cc <nm_spi_write_block+0x274>)
    a7c6:	4798      	blx	r3
    a7c8:	200d      	movs	r0, #13
    a7ca:	4b35      	ldr	r3, [pc, #212]	; (a8a0 <nm_spi_write_block+0x248>)
    a7cc:	4798      	blx	r3
    a7ce:	e7e5      	b.n	a79c <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    a7d0:	2102      	movs	r1, #2
    a7d2:	a807      	add	r0, sp, #28
    a7d4:	4b39      	ldr	r3, [pc, #228]	; (a8bc <nm_spi_write_block+0x264>)
    a7d6:	4798      	blx	r3
    a7d8:	2800      	cmp	r0, #0
    a7da:	d0bf      	beq.n	a75c <nm_spi_write_block+0x104>
    a7dc:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    a7de:	4a3f      	ldr	r2, [pc, #252]	; (a8dc <nm_spi_write_block+0x284>)
    a7e0:	4938      	ldr	r1, [pc, #224]	; (a8c4 <nm_spi_write_block+0x26c>)
    a7e2:	482c      	ldr	r0, [pc, #176]	; (a894 <nm_spi_write_block+0x23c>)
    a7e4:	4b2c      	ldr	r3, [pc, #176]	; (a898 <nm_spi_write_block+0x240>)
    a7e6:	4798      	blx	r3
    a7e8:	483d      	ldr	r0, [pc, #244]	; (a8e0 <nm_spi_write_block+0x288>)
    a7ea:	4b38      	ldr	r3, [pc, #224]	; (a8cc <nm_spi_write_block+0x274>)
    a7ec:	4798      	blx	r3
    a7ee:	200d      	movs	r0, #13
    a7f0:	4b2b      	ldr	r3, [pc, #172]	; (a8a0 <nm_spi_write_block+0x248>)
    a7f2:	4798      	blx	r3
    a7f4:	e7d2      	b.n	a79c <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    a7f6:	223c      	movs	r2, #60	; 0x3c
    a7f8:	32ff      	adds	r2, #255	; 0xff
    a7fa:	493a      	ldr	r1, [pc, #232]	; (a8e4 <nm_spi_write_block+0x28c>)
    a7fc:	4825      	ldr	r0, [pc, #148]	; (a894 <nm_spi_write_block+0x23c>)
    a7fe:	4b26      	ldr	r3, [pc, #152]	; (a898 <nm_spi_write_block+0x240>)
    a800:	4798      	blx	r3
    a802:	4839      	ldr	r0, [pc, #228]	; (a8e8 <nm_spi_write_block+0x290>)
    a804:	4b31      	ldr	r3, [pc, #196]	; (a8cc <nm_spi_write_block+0x274>)
    a806:	4798      	blx	r3
    a808:	200d      	movs	r0, #13
    a80a:	4b25      	ldr	r3, [pc, #148]	; (a8a0 <nm_spi_write_block+0x248>)
    a80c:	4798      	blx	r3
    a80e:	e027      	b.n	a860 <nm_spi_write_block+0x208>
    a810:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    a812:	4b2b      	ldr	r3, [pc, #172]	; (a8c0 <nm_spi_write_block+0x268>)
    a814:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    a816:	1e63      	subs	r3, r4, #1
    a818:	419c      	sbcs	r4, r3
    a81a:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    a81c:	b2a1      	uxth	r1, r4
    a81e:	a807      	add	r0, sp, #28
    a820:	4b32      	ldr	r3, [pc, #200]	; (a8ec <nm_spi_write_block+0x294>)
    a822:	4798      	blx	r3
    a824:	2800      	cmp	r0, #0
    a826:	d1e6      	bne.n	a7f6 <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    a828:	ab08      	add	r3, sp, #32
    a82a:	191b      	adds	r3, r3, r4
    a82c:	3b05      	subs	r3, #5
    a82e:	781b      	ldrb	r3, [r3, #0]
    a830:	2b00      	cmp	r3, #0
    a832:	d106      	bne.n	a842 <nm_spi_write_block+0x1ea>
    a834:	ab08      	add	r3, sp, #32
    a836:	469c      	mov	ip, r3
    a838:	4464      	add	r4, ip
    a83a:	3c06      	subs	r4, #6
    a83c:	7823      	ldrb	r3, [r4, #0]
    a83e:	2bc3      	cmp	r3, #195	; 0xc3
    a840:	d01b      	beq.n	a87a <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    a842:	22a1      	movs	r2, #161	; 0xa1
    a844:	0052      	lsls	r2, r2, #1
    a846:	4927      	ldr	r1, [pc, #156]	; (a8e4 <nm_spi_write_block+0x28c>)
    a848:	4812      	ldr	r0, [pc, #72]	; (a894 <nm_spi_write_block+0x23c>)
    a84a:	4c13      	ldr	r4, [pc, #76]	; (a898 <nm_spi_write_block+0x240>)
    a84c:	47a0      	blx	r4
    a84e:	a907      	add	r1, sp, #28
    a850:	788b      	ldrb	r3, [r1, #2]
    a852:	784a      	ldrb	r2, [r1, #1]
    a854:	7809      	ldrb	r1, [r1, #0]
    a856:	4826      	ldr	r0, [pc, #152]	; (a8f0 <nm_spi_write_block+0x298>)
    a858:	47a0      	blx	r4
    a85a:	200d      	movs	r0, #13
    a85c:	4b10      	ldr	r3, [pc, #64]	; (a8a0 <nm_spi_write_block+0x248>)
    a85e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    a860:	22fa      	movs	r2, #250	; 0xfa
    a862:	0092      	lsls	r2, r2, #2
    a864:	490a      	ldr	r1, [pc, #40]	; (a890 <nm_spi_write_block+0x238>)
    a866:	480b      	ldr	r0, [pc, #44]	; (a894 <nm_spi_write_block+0x23c>)
    a868:	4b0b      	ldr	r3, [pc, #44]	; (a898 <nm_spi_write_block+0x240>)
    a86a:	4798      	blx	r3
    a86c:	4818      	ldr	r0, [pc, #96]	; (a8d0 <nm_spi_write_block+0x278>)
    a86e:	4b17      	ldr	r3, [pc, #92]	; (a8cc <nm_spi_write_block+0x274>)
    a870:	4798      	blx	r3
    a872:	200d      	movs	r0, #13
    a874:	4b0a      	ldr	r3, [pc, #40]	; (a8a0 <nm_spi_write_block+0x248>)
    a876:	4798      	blx	r3
    a878:	e70b      	b.n	a692 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    a87a:	2000      	movs	r0, #0
    a87c:	e001      	b.n	a882 <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    a87e:	2006      	movs	r0, #6
    a880:	4240      	negs	r0, r0

	return s8Ret;
}
    a882:	b009      	add	sp, #36	; 0x24
    a884:	bc0c      	pop	{r2, r3}
    a886:	4690      	mov	r8, r2
    a888:	469b      	mov	fp, r3
    a88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a88c:	000003ca 	.word	0x000003ca
    a890:	00013654 	.word	0x00013654
    a894:	00012f3c 	.word	0x00012f3c
    a898:	000119b1 	.word	0x000119b1
    a89c:	0001390c 	.word	0x0001390c
    a8a0:	000119e5 	.word	0x000119e5
    a8a4:	00008129 	.word	0x00008129
    a8a8:	00009d21 	.word	0x00009d21
    a8ac:	00009ec1 	.word	0x00009ec1
    a8b0:	000003f2 	.word	0x000003f2
    a8b4:	000138f0 	.word	0x000138f0
    a8b8:	0001393c 	.word	0x0001393c
    a8bc:	00009d01 	.word	0x00009d01
    a8c0:	2000021c 	.word	0x2000021c
    a8c4:	00013634 	.word	0x00013634
    a8c8:	00013974 	.word	0x00013974
    a8cc:	00011acd 	.word	0x00011acd
    a8d0:	00013a68 	.word	0x00013a68
    a8d4:	00000359 	.word	0x00000359
    a8d8:	000139ac 	.word	0x000139ac
    a8dc:	00000363 	.word	0x00000363
    a8e0:	000139e0 	.word	0x000139e0
    a8e4:	00013608 	.word	0x00013608
    a8e8:	00013a18 	.word	0x00013a18
    a8ec:	00009ea1 	.word	0x00009ea1
    a8f0:	00013a38 	.word	0x00013a38

0000a8f4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    a8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a8f6:	46de      	mov	lr, fp
    a8f8:	4657      	mov	r7, sl
    a8fa:	464e      	mov	r6, r9
    a8fc:	4645      	mov	r5, r8
    a8fe:	b5e0      	push	{r5, r6, r7, lr}
    a900:	b085      	sub	sp, #20
    a902:	9001      	str	r0, [sp, #4]
    a904:	000e      	movs	r6, r1
    a906:	9202      	str	r2, [sp, #8]
    a908:	001d      	movs	r5, r3
    a90a:	ab0e      	add	r3, sp, #56	; 0x38
    a90c:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    a90e:	2c00      	cmp	r4, #0
    a910:	d064      	beq.n	a9dc <Socket_ReadSocketData+0xe8>
    a912:	0103      	lsls	r3, r0, #4
    a914:	4935      	ldr	r1, [pc, #212]	; (a9ec <Socket_ReadSocketData+0xf8>)
    a916:	585b      	ldr	r3, [r3, r1]
    a918:	2b00      	cmp	r3, #0
    a91a:	d05f      	beq.n	a9dc <Socket_ReadSocketData+0xe8>
    a91c:	0101      	lsls	r1, r0, #4
    a91e:	4b33      	ldr	r3, [pc, #204]	; (a9ec <Socket_ReadSocketData+0xf8>)
    a920:	185b      	adds	r3, r3, r1
    a922:	889b      	ldrh	r3, [r3, #4]
    a924:	b29b      	uxth	r3, r3
    a926:	2b00      	cmp	r3, #0
    a928:	d058      	beq.n	a9dc <Socket_ReadSocketData+0xe8>
    a92a:	4b30      	ldr	r3, [pc, #192]	; (a9ec <Socket_ReadSocketData+0xf8>)
    a92c:	185b      	adds	r3, r3, r1
    a92e:	7a9b      	ldrb	r3, [r3, #10]
    a930:	2b01      	cmp	r3, #1
    a932:	d153      	bne.n	a9dc <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    a934:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    a936:	4b2d      	ldr	r3, [pc, #180]	; (a9ec <Socket_ReadSocketData+0xf8>)
    a938:	469b      	mov	fp, r3
    a93a:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    a93c:	465b      	mov	r3, fp
    a93e:	220a      	movs	r2, #10
    a940:	4690      	mov	r8, r2
    a942:	44d8      	add	r8, fp
    a944:	468a      	mov	sl, r1
    a946:	9500      	str	r5, [sp, #0]
    a948:	9303      	str	r3, [sp, #12]
    a94a:	e015      	b.n	a978 <Socket_ReadSocketData+0x84>
    a94c:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    a94e:	2301      	movs	r3, #1
    a950:	e01c      	b.n	a98c <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    a952:	3301      	adds	r3, #1
    a954:	2200      	movs	r2, #0
    a956:	2100      	movs	r1, #0
    a958:	2000      	movs	r0, #0
    a95a:	4c25      	ldr	r4, [pc, #148]	; (a9f0 <Socket_ReadSocketData+0xfc>)
    a95c:	47a0      	blx	r4
    a95e:	e03d      	b.n	a9dc <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    a960:	4824      	ldr	r0, [pc, #144]	; (a9f4 <Socket_ReadSocketData+0x100>)
    a962:	4d25      	ldr	r5, [pc, #148]	; (a9f8 <Socket_ReadSocketData+0x104>)
    a964:	47a8      	blx	r5
    a966:	0021      	movs	r1, r4
    a968:	4824      	ldr	r0, [pc, #144]	; (a9fc <Socket_ReadSocketData+0x108>)
    a96a:	47a8      	blx	r5
    a96c:	200d      	movs	r0, #13
    a96e:	4b24      	ldr	r3, [pc, #144]	; (aa00 <Socket_ReadSocketData+0x10c>)
    a970:	4798      	blx	r3
				break;
    a972:	e033      	b.n	a9dc <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    a974:	2c00      	cmp	r4, #0
    a976:	d031      	beq.n	a9dc <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    a978:	465b      	mov	r3, fp
    a97a:	889b      	ldrh	r3, [r3, #4]
    a97c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    a97e:	b21b      	sxth	r3, r3
    a980:	2b00      	cmp	r3, #0
    a982:	dde3      	ble.n	a94c <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    a984:	9b03      	ldr	r3, [sp, #12]
    a986:	889d      	ldrh	r5, [r3, #4]
    a988:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    a98a:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    a98c:	4a17      	ldr	r2, [pc, #92]	; (a9ec <Socket_ReadSocketData+0xf8>)
    a98e:	4651      	mov	r1, sl
    a990:	5889      	ldr	r1, [r1, r2]
    a992:	002a      	movs	r2, r5
    a994:	9800      	ldr	r0, [sp, #0]
    a996:	4f16      	ldr	r7, [pc, #88]	; (a9f0 <Socket_ReadSocketData+0xfc>)
    a998:	47b8      	blx	r7
    a99a:	2800      	cmp	r0, #0
    a99c:	d1e0      	bne.n	a960 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    a99e:	4b13      	ldr	r3, [pc, #76]	; (a9ec <Socket_ReadSocketData+0xf8>)
    a9a0:	4652      	mov	r2, sl
    a9a2:	58d3      	ldr	r3, [r2, r3]
    a9a4:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    a9a6:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    a9a8:	88f3      	ldrh	r3, [r6, #6]
    a9aa:	1b5b      	subs	r3, r3, r5
    a9ac:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    a9ae:	4b15      	ldr	r3, [pc, #84]	; (aa04 <Socket_ReadSocketData+0x110>)
    a9b0:	681b      	ldr	r3, [r3, #0]
    a9b2:	2b00      	cmp	r3, #0
    a9b4:	d005      	beq.n	a9c2 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    a9b6:	4b13      	ldr	r3, [pc, #76]	; (aa04 <Socket_ReadSocketData+0x110>)
    a9b8:	681b      	ldr	r3, [r3, #0]
    a9ba:	0032      	movs	r2, r6
    a9bc:	9902      	ldr	r1, [sp, #8]
    a9be:	9801      	ldr	r0, [sp, #4]
    a9c0:	4798      	blx	r3
				u16ReadCount -= u16Read;
    a9c2:	1b64      	subs	r4, r4, r5
    a9c4:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    a9c6:	9b00      	ldr	r3, [sp, #0]
    a9c8:	469c      	mov	ip, r3
    a9ca:	44ac      	add	ip, r5
    a9cc:	4663      	mov	r3, ip
    a9ce:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    a9d0:	4643      	mov	r3, r8
    a9d2:	781b      	ldrb	r3, [r3, #0]
    a9d4:	2b00      	cmp	r3, #0
    a9d6:	d1cd      	bne.n	a974 <Socket_ReadSocketData+0x80>
    a9d8:	2c00      	cmp	r4, #0
    a9da:	d1ba      	bne.n	a952 <Socket_ReadSocketData+0x5e>
	}
}
    a9dc:	b005      	add	sp, #20
    a9de:	bc3c      	pop	{r2, r3, r4, r5}
    a9e0:	4690      	mov	r8, r2
    a9e2:	4699      	mov	r9, r3
    a9e4:	46a2      	mov	sl, r4
    a9e6:	46ab      	mov	fp, r5
    a9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9ea:	46c0      	nop			; (mov r8, r8)
    a9ec:	20000464 	.word	0x20000464
    a9f0:	00008c79 	.word	0x00008c79
    a9f4:	0001326c 	.word	0x0001326c
    a9f8:	000119b1 	.word	0x000119b1
    a9fc:	00013cd0 	.word	0x00013cd0
    aa00:	000119e5 	.word	0x000119e5
    aa04:	20000514 	.word	0x20000514

0000aa08 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    aa08:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa0a:	46d6      	mov	lr, sl
    aa0c:	464f      	mov	r7, r9
    aa0e:	4646      	mov	r6, r8
    aa10:	b5c0      	push	{r6, r7, lr}
    aa12:	b09a      	sub	sp, #104	; 0x68
    aa14:	000d      	movs	r5, r1
    aa16:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    aa18:	2841      	cmp	r0, #65	; 0x41
    aa1a:	d039      	beq.n	aa90 <m2m_ip_cb+0x88>
    aa1c:	2854      	cmp	r0, #84	; 0x54
    aa1e:	d037      	beq.n	aa90 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    aa20:	2842      	cmp	r0, #66	; 0x42
    aa22:	d053      	beq.n	aacc <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    aa24:	2843      	cmp	r0, #67	; 0x43
    aa26:	d06a      	beq.n	aafe <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    aa28:	2844      	cmp	r0, #68	; 0x44
    aa2a:	d100      	bne.n	aa2e <m2m_ip_cb+0x26>
    aa2c:	e0af      	b.n	ab8e <m2m_ip_cb+0x186>
    aa2e:	284b      	cmp	r0, #75	; 0x4b
    aa30:	d100      	bne.n	aa34 <m2m_ip_cb+0x2c>
    aa32:	e0ac      	b.n	ab8e <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    aa34:	284a      	cmp	r0, #74	; 0x4a
    aa36:	d100      	bne.n	aa3a <m2m_ip_cb+0x32>
    aa38:	e0cf      	b.n	abda <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    aa3a:	2846      	cmp	r0, #70	; 0x46
    aa3c:	d100      	bne.n	aa40 <m2m_ip_cb+0x38>
    aa3e:	e0e5      	b.n	ac0c <m2m_ip_cb+0x204>
    aa40:	2848      	cmp	r0, #72	; 0x48
    aa42:	d100      	bne.n	aa46 <m2m_ip_cb+0x3e>
    aa44:	e10e      	b.n	ac64 <m2m_ip_cb+0x25c>
    aa46:	284d      	cmp	r0, #77	; 0x4d
    aa48:	d100      	bne.n	aa4c <m2m_ip_cb+0x44>
    aa4a:	e0dc      	b.n	ac06 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    aa4c:	2845      	cmp	r0, #69	; 0x45
    aa4e:	d100      	bne.n	aa52 <m2m_ip_cb+0x4a>
    aa50:	e12c      	b.n	acac <m2m_ip_cb+0x2a4>
    aa52:	2847      	cmp	r0, #71	; 0x47
    aa54:	d100      	bne.n	aa58 <m2m_ip_cb+0x50>
    aa56:	e14d      	b.n	acf4 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    aa58:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    aa5a:	284c      	cmp	r0, #76	; 0x4c
    aa5c:	d100      	bne.n	aa60 <m2m_ip_cb+0x58>
    aa5e:	e126      	b.n	acae <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    aa60:	2852      	cmp	r0, #82	; 0x52
    aa62:	d12d      	bne.n	aac0 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    aa64:	2301      	movs	r3, #1
    aa66:	2214      	movs	r2, #20
    aa68:	a909      	add	r1, sp, #36	; 0x24
    aa6a:	0020      	movs	r0, r4
    aa6c:	4ca2      	ldr	r4, [pc, #648]	; (acf8 <m2m_ip_cb+0x2f0>)
    aa6e:	47a0      	blx	r4
    aa70:	2800      	cmp	r0, #0
    aa72:	d125      	bne.n	aac0 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    aa74:	4ba1      	ldr	r3, [pc, #644]	; (acfc <m2m_ip_cb+0x2f4>)
    aa76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    aa78:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    aa7a:	681b      	ldr	r3, [r3, #0]
    aa7c:	2b00      	cmp	r3, #0
    aa7e:	d01f      	beq.n	aac0 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    aa80:	4b9e      	ldr	r3, [pc, #632]	; (acfc <m2m_ip_cb+0x2f4>)
    aa82:	681c      	ldr	r4, [r3, #0]
    aa84:	ab09      	add	r3, sp, #36	; 0x24
    aa86:	7c1a      	ldrb	r2, [r3, #16]
    aa88:	990b      	ldr	r1, [sp, #44]	; 0x2c
    aa8a:	9809      	ldr	r0, [sp, #36]	; 0x24
    aa8c:	47a0      	blx	r4
			}
		}
	}
}
    aa8e:	e017      	b.n	aac0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    aa90:	2300      	movs	r3, #0
    aa92:	2204      	movs	r2, #4
    aa94:	a909      	add	r1, sp, #36	; 0x24
    aa96:	0020      	movs	r0, r4
    aa98:	4c97      	ldr	r4, [pc, #604]	; (acf8 <m2m_ip_cb+0x2f0>)
    aa9a:	47a0      	blx	r4
    aa9c:	2800      	cmp	r0, #0
    aa9e:	d10f      	bne.n	aac0 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    aaa0:	ab09      	add	r3, sp, #36	; 0x24
    aaa2:	785a      	ldrb	r2, [r3, #1]
    aaa4:	ab05      	add	r3, sp, #20
    aaa6:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    aaa8:	4b95      	ldr	r3, [pc, #596]	; (ad00 <m2m_ip_cb+0x2f8>)
    aaaa:	681b      	ldr	r3, [r3, #0]
    aaac:	2b00      	cmp	r3, #0
    aaae:	d007      	beq.n	aac0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    aab0:	4b93      	ldr	r3, [pc, #588]	; (ad00 <m2m_ip_cb+0x2f8>)
    aab2:	681b      	ldr	r3, [r3, #0]
    aab4:	aa09      	add	r2, sp, #36	; 0x24
    aab6:	2000      	movs	r0, #0
    aab8:	5610      	ldrsb	r0, [r2, r0]
    aaba:	aa05      	add	r2, sp, #20
    aabc:	2101      	movs	r1, #1
    aabe:	4798      	blx	r3
}
    aac0:	b01a      	add	sp, #104	; 0x68
    aac2:	bc1c      	pop	{r2, r3, r4}
    aac4:	4690      	mov	r8, r2
    aac6:	4699      	mov	r9, r3
    aac8:	46a2      	mov	sl, r4
    aaca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    aacc:	2300      	movs	r3, #0
    aace:	2204      	movs	r2, #4
    aad0:	a909      	add	r1, sp, #36	; 0x24
    aad2:	0020      	movs	r0, r4
    aad4:	4c88      	ldr	r4, [pc, #544]	; (acf8 <m2m_ip_cb+0x2f0>)
    aad6:	47a0      	blx	r4
    aad8:	2800      	cmp	r0, #0
    aada:	d1f1      	bne.n	aac0 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    aadc:	ab09      	add	r3, sp, #36	; 0x24
    aade:	785a      	ldrb	r2, [r3, #1]
    aae0:	ab05      	add	r3, sp, #20
    aae2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    aae4:	4b86      	ldr	r3, [pc, #536]	; (ad00 <m2m_ip_cb+0x2f8>)
    aae6:	681b      	ldr	r3, [r3, #0]
    aae8:	2b00      	cmp	r3, #0
    aaea:	d0e9      	beq.n	aac0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    aaec:	4b84      	ldr	r3, [pc, #528]	; (ad00 <m2m_ip_cb+0x2f8>)
    aaee:	681b      	ldr	r3, [r3, #0]
    aaf0:	aa09      	add	r2, sp, #36	; 0x24
    aaf2:	2000      	movs	r0, #0
    aaf4:	5610      	ldrsb	r0, [r2, r0]
    aaf6:	aa05      	add	r2, sp, #20
    aaf8:	2102      	movs	r1, #2
    aafa:	4798      	blx	r3
    aafc:	e7e0      	b.n	aac0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    aafe:	2300      	movs	r3, #0
    ab00:	220c      	movs	r2, #12
    ab02:	a905      	add	r1, sp, #20
    ab04:	0020      	movs	r0, r4
    ab06:	4c7c      	ldr	r4, [pc, #496]	; (acf8 <m2m_ip_cb+0x2f0>)
    ab08:	47a0      	blx	r4
    ab0a:	2800      	cmp	r0, #0
    ab0c:	d1d8      	bne.n	aac0 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    ab0e:	ab05      	add	r3, sp, #20
    ab10:	2209      	movs	r2, #9
    ab12:	569a      	ldrsb	r2, [r3, r2]
    ab14:	2a00      	cmp	r2, #0
    ab16:	db24      	blt.n	ab62 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    ab18:	0018      	movs	r0, r3
    ab1a:	2108      	movs	r1, #8
    ab1c:	5659      	ldrsb	r1, [r3, r1]
    ab1e:	4b79      	ldr	r3, [pc, #484]	; (ad04 <m2m_ip_cb+0x2fc>)
    ab20:	0109      	lsls	r1, r1, #4
    ab22:	1859      	adds	r1, r3, r1
    ab24:	7ac9      	ldrb	r1, [r1, #11]
    ab26:	b2c9      	uxtb	r1, r1
    ab28:	0114      	lsls	r4, r2, #4
    ab2a:	191b      	adds	r3, r3, r4
    ab2c:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    ab2e:	2101      	movs	r1, #1
    ab30:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    ab32:	8941      	ldrh	r1, [r0, #10]
    ab34:	3908      	subs	r1, #8
    ab36:	b289      	uxth	r1, r1
    ab38:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    ab3a:	4973      	ldr	r1, [pc, #460]	; (ad08 <m2m_ip_cb+0x300>)
    ab3c:	880b      	ldrh	r3, [r1, #0]
    ab3e:	3301      	adds	r3, #1
    ab40:	b29b      	uxth	r3, r3
    ab42:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    ab44:	880b      	ldrh	r3, [r1, #0]
    ab46:	b29b      	uxth	r3, r3
    ab48:	2b00      	cmp	r3, #0
    ab4a:	d103      	bne.n	ab54 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    ab4c:	880b      	ldrh	r3, [r1, #0]
    ab4e:	3301      	adds	r3, #1
    ab50:	b29b      	uxth	r3, r3
    ab52:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    ab54:	4b6c      	ldr	r3, [pc, #432]	; (ad08 <m2m_ip_cb+0x300>)
    ab56:	8819      	ldrh	r1, [r3, #0]
    ab58:	b289      	uxth	r1, r1
    ab5a:	0110      	lsls	r0, r2, #4
    ab5c:	4b69      	ldr	r3, [pc, #420]	; (ad04 <m2m_ip_cb+0x2fc>)
    ab5e:	181b      	adds	r3, r3, r0
    ab60:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    ab62:	ab09      	add	r3, sp, #36	; 0x24
    ab64:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    ab66:	2202      	movs	r2, #2
    ab68:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    ab6a:	aa05      	add	r2, sp, #20
    ab6c:	8851      	ldrh	r1, [r2, #2]
    ab6e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    ab70:	9a06      	ldr	r2, [sp, #24]
    ab72:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    ab74:	4b62      	ldr	r3, [pc, #392]	; (ad00 <m2m_ip_cb+0x2f8>)
    ab76:	681b      	ldr	r3, [r3, #0]
    ab78:	2b00      	cmp	r3, #0
    ab7a:	d0a1      	beq.n	aac0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    ab7c:	4b60      	ldr	r3, [pc, #384]	; (ad00 <m2m_ip_cb+0x2f8>)
    ab7e:	681b      	ldr	r3, [r3, #0]
    ab80:	aa05      	add	r2, sp, #20
    ab82:	2008      	movs	r0, #8
    ab84:	5610      	ldrsb	r0, [r2, r0]
    ab86:	aa09      	add	r2, sp, #36	; 0x24
    ab88:	2104      	movs	r1, #4
    ab8a:	4798      	blx	r3
    ab8c:	e798      	b.n	aac0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    ab8e:	2300      	movs	r3, #0
    ab90:	2204      	movs	r2, #4
    ab92:	a909      	add	r1, sp, #36	; 0x24
    ab94:	0020      	movs	r0, r4
    ab96:	4c58      	ldr	r4, [pc, #352]	; (acf8 <m2m_ip_cb+0x2f0>)
    ab98:	47a0      	blx	r4
    ab9a:	2800      	cmp	r0, #0
    ab9c:	d000      	beq.n	aba0 <m2m_ip_cb+0x198>
    ab9e:	e78f      	b.n	aac0 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    aba0:	ab09      	add	r3, sp, #36	; 0x24
    aba2:	2000      	movs	r0, #0
    aba4:	5618      	ldrsb	r0, [r3, r0]
    aba6:	aa05      	add	r2, sp, #20
    aba8:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    abaa:	785b      	ldrb	r3, [r3, #1]
    abac:	b25b      	sxtb	r3, r3
    abae:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    abb0:	2b00      	cmp	r3, #0
    abb2:	d107      	bne.n	abc4 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    abb4:	ab09      	add	r3, sp, #36	; 0x24
    abb6:	885b      	ldrh	r3, [r3, #2]
    abb8:	3b08      	subs	r3, #8
    abba:	b29b      	uxth	r3, r3
    abbc:	0101      	lsls	r1, r0, #4
    abbe:	4a51      	ldr	r2, [pc, #324]	; (ad04 <m2m_ip_cb+0x2fc>)
    abc0:	1852      	adds	r2, r2, r1
    abc2:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    abc4:	4b4e      	ldr	r3, [pc, #312]	; (ad00 <m2m_ip_cb+0x2f8>)
    abc6:	681b      	ldr	r3, [r3, #0]
    abc8:	2b00      	cmp	r3, #0
    abca:	d100      	bne.n	abce <m2m_ip_cb+0x1c6>
    abcc:	e778      	b.n	aac0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    abce:	4b4c      	ldr	r3, [pc, #304]	; (ad00 <m2m_ip_cb+0x2f8>)
    abd0:	681b      	ldr	r3, [r3, #0]
    abd2:	aa05      	add	r2, sp, #20
    abd4:	2105      	movs	r1, #5
    abd6:	4798      	blx	r3
	{
    abd8:	e772      	b.n	aac0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    abda:	2300      	movs	r3, #0
    abdc:	2244      	movs	r2, #68	; 0x44
    abde:	a909      	add	r1, sp, #36	; 0x24
    abe0:	0020      	movs	r0, r4
    abe2:	4c45      	ldr	r4, [pc, #276]	; (acf8 <m2m_ip_cb+0x2f0>)
    abe4:	47a0      	blx	r4
    abe6:	2800      	cmp	r0, #0
    abe8:	d000      	beq.n	abec <m2m_ip_cb+0x1e4>
    abea:	e769      	b.n	aac0 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    abec:	4b47      	ldr	r3, [pc, #284]	; (ad0c <m2m_ip_cb+0x304>)
    abee:	681b      	ldr	r3, [r3, #0]
    abf0:	2b00      	cmp	r3, #0
    abf2:	d100      	bne.n	abf6 <m2m_ip_cb+0x1ee>
    abf4:	e764      	b.n	aac0 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    abf6:	4b45      	ldr	r3, [pc, #276]	; (ad0c <m2m_ip_cb+0x304>)
    abf8:	681b      	ldr	r3, [r3, #0]
    abfa:	9a19      	ldr	r2, [sp, #100]	; 0x64
    abfc:	9203      	str	r2, [sp, #12]
    abfe:	0011      	movs	r1, r2
    ac00:	a809      	add	r0, sp, #36	; 0x24
    ac02:	4798      	blx	r3
    ac04:	e75c      	b.n	aac0 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    ac06:	2306      	movs	r3, #6
    ac08:	469a      	mov	sl, r3
    ac0a:	e001      	b.n	ac10 <m2m_ip_cb+0x208>
    ac0c:	2306      	movs	r3, #6
    ac0e:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    ac10:	2300      	movs	r3, #0
    ac12:	2210      	movs	r2, #16
    ac14:	a905      	add	r1, sp, #20
    ac16:	0020      	movs	r0, r4
    ac18:	4f37      	ldr	r7, [pc, #220]	; (acf8 <m2m_ip_cb+0x2f0>)
    ac1a:	47b8      	blx	r7
    ac1c:	2800      	cmp	r0, #0
    ac1e:	d000      	beq.n	ac22 <m2m_ip_cb+0x21a>
    ac20:	e74e      	b.n	aac0 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    ac22:	aa05      	add	r2, sp, #20
    ac24:	200c      	movs	r0, #12
    ac26:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    ac28:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    ac2a:	0107      	lsls	r7, r0, #4
    ac2c:	4935      	ldr	r1, [pc, #212]	; (ad04 <m2m_ip_cb+0x2fc>)
    ac2e:	19c9      	adds	r1, r1, r7
    ac30:	2700      	movs	r7, #0
    ac32:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    ac34:	2608      	movs	r6, #8
    ac36:	5f97      	ldrsh	r7, [r2, r6]
    ac38:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    ac3a:	8957      	ldrh	r7, [r2, #10]
    ac3c:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    ac3e:	af09      	add	r7, sp, #36	; 0x24
    ac40:	8856      	ldrh	r6, [r2, #2]
    ac42:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    ac44:	9a06      	ldr	r2, [sp, #24]
    ac46:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    ac48:	88ca      	ldrh	r2, [r1, #6]
    ac4a:	b292      	uxth	r2, r2
    ac4c:	4293      	cmp	r3, r2
    ac4e:	d00c      	beq.n	ac6a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    ac50:	2d10      	cmp	r5, #16
    ac52:	d800      	bhi.n	ac56 <m2m_ip_cb+0x24e>
    ac54:	e734      	b.n	aac0 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    ac56:	2301      	movs	r3, #1
    ac58:	2200      	movs	r2, #0
    ac5a:	2100      	movs	r1, #0
    ac5c:	2000      	movs	r0, #0
    ac5e:	4c26      	ldr	r4, [pc, #152]	; (acf8 <m2m_ip_cb+0x2f0>)
    ac60:	47a0      	blx	r4
	{
    ac62:	e72d      	b.n	aac0 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    ac64:	2309      	movs	r3, #9
    ac66:	469a      	mov	sl, r3
    ac68:	e7d2      	b.n	ac10 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    ac6a:	4643      	mov	r3, r8
    ac6c:	2b00      	cmp	r3, #0
    ac6e:	dd01      	ble.n	ac74 <m2m_ip_cb+0x26c>
    ac70:	45a8      	cmp	r8, r5
    ac72:	db0f      	blt.n	ac94 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    ac74:	ab09      	add	r3, sp, #36	; 0x24
    ac76:	4642      	mov	r2, r8
    ac78:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    ac7a:	2300      	movs	r3, #0
    ac7c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    ac7e:	4b20      	ldr	r3, [pc, #128]	; (ad00 <m2m_ip_cb+0x2f8>)
    ac80:	681b      	ldr	r3, [r3, #0]
    ac82:	2b00      	cmp	r3, #0
    ac84:	d100      	bne.n	ac88 <m2m_ip_cb+0x280>
    ac86:	e71b      	b.n	aac0 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    ac88:	4b1d      	ldr	r3, [pc, #116]	; (ad00 <m2m_ip_cb+0x2f8>)
    ac8a:	681b      	ldr	r3, [r3, #0]
    ac8c:	aa09      	add	r2, sp, #36	; 0x24
    ac8e:	4651      	mov	r1, sl
    ac90:	4798      	blx	r3
    ac92:	e715      	b.n	aac0 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    ac94:	0023      	movs	r3, r4
    ac96:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    ac98:	4642      	mov	r2, r8
    ac9a:	4669      	mov	r1, sp
    ac9c:	818a      	strh	r2, [r1, #12]
    ac9e:	898a      	ldrh	r2, [r1, #12]
    aca0:	9200      	str	r2, [sp, #0]
    aca2:	4652      	mov	r2, sl
    aca4:	0039      	movs	r1, r7
    aca6:	4c1a      	ldr	r4, [pc, #104]	; (ad10 <m2m_ip_cb+0x308>)
    aca8:	47a0      	blx	r4
    acaa:	e709      	b.n	aac0 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    acac:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    acae:	2300      	movs	r3, #0
    acb0:	2208      	movs	r2, #8
    acb2:	a909      	add	r1, sp, #36	; 0x24
    acb4:	0020      	movs	r0, r4
    acb6:	4c10      	ldr	r4, [pc, #64]	; (acf8 <m2m_ip_cb+0x2f0>)
    acb8:	47a0      	blx	r4
    acba:	2800      	cmp	r0, #0
    acbc:	d000      	beq.n	acc0 <m2m_ip_cb+0x2b8>
    acbe:	e6ff      	b.n	aac0 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    acc0:	ab09      	add	r3, sp, #36	; 0x24
    acc2:	2000      	movs	r0, #0
    acc4:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    acc6:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    acc8:	8859      	ldrh	r1, [r3, #2]
    acca:	ab05      	add	r3, sp, #20
    accc:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    acce:	0101      	lsls	r1, r0, #4
    acd0:	4b0c      	ldr	r3, [pc, #48]	; (ad04 <m2m_ip_cb+0x2fc>)
    acd2:	185b      	adds	r3, r3, r1
    acd4:	88db      	ldrh	r3, [r3, #6]
    acd6:	b29b      	uxth	r3, r3
    acd8:	429a      	cmp	r2, r3
    acda:	d000      	beq.n	acde <m2m_ip_cb+0x2d6>
    acdc:	e6f0      	b.n	aac0 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    acde:	4b08      	ldr	r3, [pc, #32]	; (ad00 <m2m_ip_cb+0x2f8>)
    ace0:	681b      	ldr	r3, [r3, #0]
    ace2:	2b00      	cmp	r3, #0
    ace4:	d100      	bne.n	ace8 <m2m_ip_cb+0x2e0>
    ace6:	e6eb      	b.n	aac0 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    ace8:	4b05      	ldr	r3, [pc, #20]	; (ad00 <m2m_ip_cb+0x2f8>)
    acea:	681b      	ldr	r3, [r3, #0]
    acec:	aa05      	add	r2, sp, #20
    acee:	0029      	movs	r1, r5
    acf0:	4798      	blx	r3
	{
    acf2:	e6e5      	b.n	aac0 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    acf4:	2508      	movs	r5, #8
    acf6:	e7da      	b.n	acae <m2m_ip_cb+0x2a6>
    acf8:	00008c79 	.word	0x00008c79
    acfc:	20000518 	.word	0x20000518
    ad00:	20000514 	.word	0x20000514
    ad04:	20000464 	.word	0x20000464
    ad08:	2000021e 	.word	0x2000021e
    ad0c:	2000051c 	.word	0x2000051c
    ad10:	0000a8f5 	.word	0x0000a8f5

0000ad14 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    ad14:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    ad16:	4b0a      	ldr	r3, [pc, #40]	; (ad40 <socketInit+0x2c>)
    ad18:	781b      	ldrb	r3, [r3, #0]
    ad1a:	2b00      	cmp	r3, #0
    ad1c:	d000      	beq.n	ad20 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    ad1e:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    ad20:	22b0      	movs	r2, #176	; 0xb0
    ad22:	2100      	movs	r1, #0
    ad24:	4807      	ldr	r0, [pc, #28]	; (ad44 <socketInit+0x30>)
    ad26:	4b08      	ldr	r3, [pc, #32]	; (ad48 <socketInit+0x34>)
    ad28:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    ad2a:	4908      	ldr	r1, [pc, #32]	; (ad4c <socketInit+0x38>)
    ad2c:	2002      	movs	r0, #2
    ad2e:	4b08      	ldr	r3, [pc, #32]	; (ad50 <socketInit+0x3c>)
    ad30:	4798      	blx	r3
		gbSocketInit	= 1;
    ad32:	2201      	movs	r2, #1
    ad34:	4b02      	ldr	r3, [pc, #8]	; (ad40 <socketInit+0x2c>)
    ad36:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    ad38:	2200      	movs	r2, #0
    ad3a:	4b06      	ldr	r3, [pc, #24]	; (ad54 <socketInit+0x40>)
    ad3c:	801a      	strh	r2, [r3, #0]
}
    ad3e:	e7ee      	b.n	ad1e <socketInit+0xa>
    ad40:	2000021d 	.word	0x2000021d
    ad44:	20000464 	.word	0x20000464
    ad48:	00008535 	.word	0x00008535
    ad4c:	0000aa09 	.word	0x0000aa09
    ad50:	00008d65 	.word	0x00008d65
    ad54:	2000021e 	.word	0x2000021e

0000ad58 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    ad58:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    ad5a:	22b0      	movs	r2, #176	; 0xb0
    ad5c:	2100      	movs	r1, #0
    ad5e:	4807      	ldr	r0, [pc, #28]	; (ad7c <socketDeinit+0x24>)
    ad60:	4b07      	ldr	r3, [pc, #28]	; (ad80 <socketDeinit+0x28>)
    ad62:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    ad64:	2100      	movs	r1, #0
    ad66:	2002      	movs	r0, #2
    ad68:	4b06      	ldr	r3, [pc, #24]	; (ad84 <socketDeinit+0x2c>)
    ad6a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    ad6c:	2300      	movs	r3, #0
    ad6e:	4a06      	ldr	r2, [pc, #24]	; (ad88 <socketDeinit+0x30>)
    ad70:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    ad72:	4a06      	ldr	r2, [pc, #24]	; (ad8c <socketDeinit+0x34>)
    ad74:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    ad76:	4a06      	ldr	r2, [pc, #24]	; (ad90 <socketDeinit+0x38>)
    ad78:	7013      	strb	r3, [r2, #0]
}
    ad7a:	bd10      	pop	{r4, pc}
    ad7c:	20000464 	.word	0x20000464
    ad80:	00008535 	.word	0x00008535
    ad84:	00008d65 	.word	0x00008d65
    ad88:	20000514 	.word	0x20000514
    ad8c:	2000051c 	.word	0x2000051c
    ad90:	2000021d 	.word	0x2000021d

0000ad94 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    ad94:	4b02      	ldr	r3, [pc, #8]	; (ada0 <registerSocketCallback+0xc>)
    ad96:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    ad98:	4b02      	ldr	r3, [pc, #8]	; (ada4 <registerSocketCallback+0x10>)
    ad9a:	6019      	str	r1, [r3, #0]
}
    ad9c:	4770      	bx	lr
    ad9e:	46c0      	nop			; (mov r8, r8)
    ada0:	20000514 	.word	0x20000514
    ada4:	2000051c 	.word	0x2000051c

0000ada8 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    ada8:	b5f0      	push	{r4, r5, r6, r7, lr}
    adaa:	46d6      	mov	lr, sl
    adac:	4647      	mov	r7, r8
    adae:	b580      	push	{r7, lr}
    adb0:	b089      	sub	sp, #36	; 0x24
    adb2:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    adb4:	2802      	cmp	r0, #2
    adb6:	d000      	beq.n	adba <socket+0x12>
    adb8:	e09c      	b.n	aef4 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    adba:	2901      	cmp	r1, #1
    adbc:	d00a      	beq.n	add4 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    adbe:	2902      	cmp	r1, #2
    adc0:	d100      	bne.n	adc4 <socket+0x1c>
    adc2:	e070      	b.n	aea6 <socket+0xfe>
	SOCKET					sock = -1;
    adc4:	2501      	movs	r5, #1
    adc6:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    adc8:	0028      	movs	r0, r5
    adca:	b009      	add	sp, #36	; 0x24
    adcc:	bc0c      	pop	{r2, r3}
    adce:	4690      	mov	r8, r2
    add0:	469a      	mov	sl, r3
    add2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    add4:	4c49      	ldr	r4, [pc, #292]	; (aefc <socket+0x154>)
    add6:	7827      	ldrb	r7, [r4, #0]
    add8:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    adda:	7826      	ldrb	r6, [r4, #0]
    addc:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    adde:	7820      	ldrb	r0, [r4, #0]
    ade0:	3001      	adds	r0, #1
    ade2:	3106      	adds	r1, #6
    ade4:	4b46      	ldr	r3, [pc, #280]	; (af00 <socket+0x158>)
    ade6:	4798      	blx	r3
    ade8:	b2c9      	uxtb	r1, r1
    adea:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    adec:	0132      	lsls	r2, r6, #4
    adee:	4b45      	ldr	r3, [pc, #276]	; (af04 <socket+0x15c>)
    adf0:	189b      	adds	r3, r3, r2
    adf2:	7a9b      	ldrb	r3, [r3, #10]
    adf4:	2506      	movs	r5, #6
    adf6:	2b00      	cmp	r3, #0
    adf8:	d018      	beq.n	ae2c <socket+0x84>
				u8SockID	= u8NextTcpSock;
    adfa:	4e40      	ldr	r6, [pc, #256]	; (aefc <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    adfc:	4b40      	ldr	r3, [pc, #256]	; (af00 <socket+0x158>)
    adfe:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    ae00:	4b40      	ldr	r3, [pc, #256]	; (af04 <socket+0x15c>)
    ae02:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    ae04:	7837      	ldrb	r7, [r6, #0]
    ae06:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    ae08:	7834      	ldrb	r4, [r6, #0]
    ae0a:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    ae0c:	7830      	ldrb	r0, [r6, #0]
    ae0e:	3001      	adds	r0, #1
    ae10:	2107      	movs	r1, #7
    ae12:	47d0      	blx	sl
    ae14:	b2c9      	uxtb	r1, r1
    ae16:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    ae18:	0123      	lsls	r3, r4, #4
    ae1a:	4443      	add	r3, r8
    ae1c:	7a9b      	ldrb	r3, [r3, #10]
    ae1e:	2b00      	cmp	r3, #0
    ae20:	d007      	beq.n	ae32 <socket+0x8a>
    ae22:	3d01      	subs	r5, #1
    ae24:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    ae26:	2d00      	cmp	r5, #0
    ae28:	d1ec      	bne.n	ae04 <socket+0x5c>
    ae2a:	e7cb      	b.n	adc4 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    ae2c:	4b35      	ldr	r3, [pc, #212]	; (af04 <socket+0x15c>)
    ae2e:	18d4      	adds	r4, r2, r3
    ae30:	e002      	b.n	ae38 <socket+0x90>
    ae32:	0124      	lsls	r4, r4, #4
    ae34:	4b33      	ldr	r3, [pc, #204]	; (af04 <socket+0x15c>)
    ae36:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    ae38:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    ae3a:	2d00      	cmp	r5, #0
    ae3c:	dbc4      	blt.n	adc8 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    ae3e:	2210      	movs	r2, #16
    ae40:	2100      	movs	r1, #0
    ae42:	0020      	movs	r0, r4
    ae44:	4b30      	ldr	r3, [pc, #192]	; (af08 <socket+0x160>)
    ae46:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    ae48:	2301      	movs	r3, #1
    ae4a:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    ae4c:	4a2f      	ldr	r2, [pc, #188]	; (af0c <socket+0x164>)
    ae4e:	8813      	ldrh	r3, [r2, #0]
    ae50:	3301      	adds	r3, #1
    ae52:	b29b      	uxth	r3, r3
    ae54:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    ae56:	8813      	ldrh	r3, [r2, #0]
    ae58:	b29b      	uxth	r3, r3
    ae5a:	2b00      	cmp	r3, #0
    ae5c:	d103      	bne.n	ae66 <socket+0xbe>
				++gu16SessionID;
    ae5e:	8813      	ldrh	r3, [r2, #0]
    ae60:	3301      	adds	r3, #1
    ae62:	b29b      	uxth	r3, r3
    ae64:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    ae66:	4e29      	ldr	r6, [pc, #164]	; (af0c <socket+0x164>)
    ae68:	8833      	ldrh	r3, [r6, #0]
    ae6a:	b29b      	uxth	r3, r3
    ae6c:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    ae6e:	4828      	ldr	r0, [pc, #160]	; (af10 <socket+0x168>)
    ae70:	4f28      	ldr	r7, [pc, #160]	; (af14 <socket+0x16c>)
    ae72:	47b8      	blx	r7
    ae74:	8832      	ldrh	r2, [r6, #0]
    ae76:	b292      	uxth	r2, r2
    ae78:	0029      	movs	r1, r5
    ae7a:	4827      	ldr	r0, [pc, #156]	; (af18 <socket+0x170>)
    ae7c:	47b8      	blx	r7
    ae7e:	200d      	movs	r0, #13
    ae80:	4b26      	ldr	r3, [pc, #152]	; (af1c <socket+0x174>)
    ae82:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    ae84:	9b05      	ldr	r3, [sp, #20]
    ae86:	07db      	lsls	r3, r3, #31
    ae88:	d59e      	bpl.n	adc8 <socket+0x20>
				strSSLCreate.sslSock = sock;
    ae8a:	aa07      	add	r2, sp, #28
    ae8c:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    ae8e:	2321      	movs	r3, #33	; 0x21
    ae90:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    ae92:	2300      	movs	r3, #0
    ae94:	9302      	str	r3, [sp, #8]
    ae96:	9301      	str	r3, [sp, #4]
    ae98:	9300      	str	r3, [sp, #0]
    ae9a:	3304      	adds	r3, #4
    ae9c:	2150      	movs	r1, #80	; 0x50
    ae9e:	2002      	movs	r0, #2
    aea0:	4c1f      	ldr	r4, [pc, #124]	; (af20 <socket+0x178>)
    aea2:	47a0      	blx	r4
    aea4:	e790      	b.n	adc8 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    aea6:	4b1f      	ldr	r3, [pc, #124]	; (af24 <socket+0x17c>)
    aea8:	781d      	ldrb	r5, [r3, #0]
    aeaa:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    aeac:	781c      	ldrb	r4, [r3, #0]
    aeae:	0124      	lsls	r4, r4, #4
    aeb0:	4a1d      	ldr	r2, [pc, #116]	; (af28 <socket+0x180>)
    aeb2:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    aeb4:	7819      	ldrb	r1, [r3, #0]
    aeb6:	3101      	adds	r1, #1
    aeb8:	2203      	movs	r2, #3
    aeba:	400a      	ands	r2, r1
    aebc:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    aebe:	7aa3      	ldrb	r3, [r4, #10]
    aec0:	2b00      	cmp	r3, #0
    aec2:	d014      	beq.n	aeee <socket+0x146>
    aec4:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    aec6:	4917      	ldr	r1, [pc, #92]	; (af24 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    aec8:	4f17      	ldr	r7, [pc, #92]	; (af28 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    aeca:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    aecc:	780d      	ldrb	r5, [r1, #0]
    aece:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    aed0:	780c      	ldrb	r4, [r1, #0]
    aed2:	0124      	lsls	r4, r4, #4
    aed4:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    aed6:	780b      	ldrb	r3, [r1, #0]
    aed8:	3301      	adds	r3, #1
    aeda:	4003      	ands	r3, r0
    aedc:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    aede:	7aa3      	ldrb	r3, [r4, #10]
    aee0:	2b00      	cmp	r3, #0
    aee2:	d004      	beq.n	aeee <socket+0x146>
    aee4:	3a01      	subs	r2, #1
    aee6:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    aee8:	2a00      	cmp	r2, #0
    aeea:	d1ef      	bne.n	aecc <socket+0x124>
    aeec:	e76a      	b.n	adc4 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    aeee:	3507      	adds	r5, #7
    aef0:	b26d      	sxtb	r5, r5
					break;
    aef2:	e7a2      	b.n	ae3a <socket+0x92>
	SOCKET					sock = -1;
    aef4:	2501      	movs	r5, #1
    aef6:	426d      	negs	r5, r5
    aef8:	e766      	b.n	adc8 <socket+0x20>
    aefa:	46c0      	nop			; (mov r8, r8)
    aefc:	20000220 	.word	0x20000220
    af00:	0001173d 	.word	0x0001173d
    af04:	20000464 	.word	0x20000464
    af08:	00008535 	.word	0x00008535
    af0c:	2000021e 	.word	0x2000021e
    af10:	0001326c 	.word	0x0001326c
    af14:	000119b1 	.word	0x000119b1
    af18:	00013cfc 	.word	0x00013cfc
    af1c:	000119e5 	.word	0x000119e5
    af20:	0000866d 	.word	0x0000866d
    af24:	20000221 	.word	0x20000221
    af28:	200004d4 	.word	0x200004d4

0000af2c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    af2c:	b570      	push	{r4, r5, r6, lr}
    af2e:	b088      	sub	sp, #32
    af30:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    af32:	db30      	blt.n	af96 <connect+0x6a>
    af34:	2900      	cmp	r1, #0
    af36:	d031      	beq.n	af9c <connect+0x70>
    af38:	0100      	lsls	r0, r0, #4
    af3a:	4b1d      	ldr	r3, [pc, #116]	; (afb0 <connect+0x84>)
    af3c:	181b      	adds	r3, r3, r0
    af3e:	7a9b      	ldrb	r3, [r3, #10]
    af40:	2b01      	cmp	r3, #1
    af42:	d12e      	bne.n	afa2 <connect+0x76>
    af44:	2a00      	cmp	r2, #0
    af46:	d02f      	beq.n	afa8 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    af48:	4b19      	ldr	r3, [pc, #100]	; (afb0 <connect+0x84>)
    af4a:	181b      	adds	r3, r3, r0
    af4c:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    af4e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    af50:	07db      	lsls	r3, r3, #31
    af52:	d505      	bpl.n	af60 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    af54:	4b16      	ldr	r3, [pc, #88]	; (afb0 <connect+0x84>)
    af56:	181b      	adds	r3, r3, r0
    af58:	7ada      	ldrb	r2, [r3, #11]
    af5a:	ab05      	add	r3, sp, #20
    af5c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    af5e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    af60:	ad05      	add	r5, sp, #20
    af62:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    af64:	2208      	movs	r2, #8
    af66:	0028      	movs	r0, r5
    af68:	4b12      	ldr	r3, [pc, #72]	; (afb4 <connect+0x88>)
    af6a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    af6c:	0124      	lsls	r4, r4, #4
    af6e:	4b10      	ldr	r3, [pc, #64]	; (afb0 <connect+0x84>)
    af70:	191c      	adds	r4, r3, r4
    af72:	88e3      	ldrh	r3, [r4, #6]
    af74:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    af76:	2300      	movs	r3, #0
    af78:	9302      	str	r3, [sp, #8]
    af7a:	9301      	str	r3, [sp, #4]
    af7c:	9300      	str	r3, [sp, #0]
    af7e:	330c      	adds	r3, #12
    af80:	002a      	movs	r2, r5
    af82:	0031      	movs	r1, r6
    af84:	2002      	movs	r0, #2
    af86:	4c0c      	ldr	r4, [pc, #48]	; (afb8 <connect+0x8c>)
    af88:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    af8a:	2800      	cmp	r0, #0
    af8c:	d001      	beq.n	af92 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    af8e:	2009      	movs	r0, #9
    af90:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    af92:	b008      	add	sp, #32
    af94:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    af96:	2006      	movs	r0, #6
    af98:	4240      	negs	r0, r0
    af9a:	e7fa      	b.n	af92 <connect+0x66>
    af9c:	2006      	movs	r0, #6
    af9e:	4240      	negs	r0, r0
    afa0:	e7f7      	b.n	af92 <connect+0x66>
    afa2:	2006      	movs	r0, #6
    afa4:	4240      	negs	r0, r0
    afa6:	e7f4      	b.n	af92 <connect+0x66>
    afa8:	2006      	movs	r0, #6
    afaa:	4240      	negs	r0, r0
    afac:	e7f1      	b.n	af92 <connect+0x66>
    afae:	46c0      	nop			; (mov r8, r8)
    afb0:	20000464 	.word	0x20000464
    afb4:	00008521 	.word	0x00008521
    afb8:	0000866d 	.word	0x0000866d

0000afbc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    afbc:	b530      	push	{r4, r5, lr}
    afbe:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    afc0:	2800      	cmp	r0, #0
    afc2:	db36      	blt.n	b032 <send+0x76>
    afc4:	2900      	cmp	r1, #0
    afc6:	d037      	beq.n	b038 <send+0x7c>
    afc8:	23af      	movs	r3, #175	; 0xaf
    afca:	00db      	lsls	r3, r3, #3
    afcc:	429a      	cmp	r2, r3
    afce:	d836      	bhi.n	b03e <send+0x82>
    afd0:	0104      	lsls	r4, r0, #4
    afd2:	4b1e      	ldr	r3, [pc, #120]	; (b04c <send+0x90>)
    afd4:	191b      	adds	r3, r3, r4
    afd6:	7a9b      	ldrb	r3, [r3, #10]
    afd8:	2b01      	cmp	r3, #1
    afda:	d133      	bne.n	b044 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    afdc:	ab04      	add	r3, sp, #16
    afde:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    afe0:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    afe2:	0025      	movs	r5, r4
    afe4:	4c19      	ldr	r4, [pc, #100]	; (b04c <send+0x90>)
    afe6:	1964      	adds	r4, r4, r5
    afe8:	88e4      	ldrh	r4, [r4, #6]
    afea:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    afec:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    afee:	2806      	cmp	r0, #6
    aff0:	dd00      	ble.n	aff4 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    aff2:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    aff4:	0104      	lsls	r4, r0, #4
    aff6:	4b15      	ldr	r3, [pc, #84]	; (b04c <send+0x90>)
    aff8:	191b      	adds	r3, r3, r4
    affa:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    affc:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    affe:	07e4      	lsls	r4, r4, #31
    b000:	d505      	bpl.n	b00e <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    b002:	0100      	lsls	r0, r0, #4
    b004:	4b11      	ldr	r3, [pc, #68]	; (b04c <send+0x90>)
    b006:	1818      	adds	r0, r3, r0
    b008:	8905      	ldrh	r5, [r0, #8]
    b00a:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    b00c:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    b00e:	2080      	movs	r0, #128	; 0x80
    b010:	4318      	orrs	r0, r3
    b012:	9502      	str	r5, [sp, #8]
    b014:	9201      	str	r2, [sp, #4]
    b016:	9100      	str	r1, [sp, #0]
    b018:	2310      	movs	r3, #16
    b01a:	aa04      	add	r2, sp, #16
    b01c:	0001      	movs	r1, r0
    b01e:	2002      	movs	r0, #2
    b020:	4c0b      	ldr	r4, [pc, #44]	; (b050 <send+0x94>)
    b022:	47a0      	blx	r4
    b024:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    b026:	2800      	cmp	r0, #0
    b028:	d000      	beq.n	b02c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    b02a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    b02c:	0018      	movs	r0, r3
    b02e:	b009      	add	sp, #36	; 0x24
    b030:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    b032:	2306      	movs	r3, #6
    b034:	425b      	negs	r3, r3
    b036:	e7f9      	b.n	b02c <send+0x70>
    b038:	2306      	movs	r3, #6
    b03a:	425b      	negs	r3, r3
    b03c:	e7f6      	b.n	b02c <send+0x70>
    b03e:	2306      	movs	r3, #6
    b040:	425b      	negs	r3, r3
    b042:	e7f3      	b.n	b02c <send+0x70>
    b044:	2306      	movs	r3, #6
    b046:	425b      	negs	r3, r3
    b048:	e7f0      	b.n	b02c <send+0x70>
    b04a:	46c0      	nop			; (mov r8, r8)
    b04c:	20000464 	.word	0x20000464
    b050:	0000866d 	.word	0x0000866d

0000b054 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    b054:	b530      	push	{r4, r5, lr}
    b056:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    b058:	2800      	cmp	r0, #0
    b05a:	db34      	blt.n	b0c6 <recv+0x72>
    b05c:	2900      	cmp	r1, #0
    b05e:	d035      	beq.n	b0cc <recv+0x78>
    b060:	2a00      	cmp	r2, #0
    b062:	d036      	beq.n	b0d2 <recv+0x7e>
    b064:	0105      	lsls	r5, r0, #4
    b066:	4c1e      	ldr	r4, [pc, #120]	; (b0e0 <recv+0x8c>)
    b068:	1964      	adds	r4, r4, r5
    b06a:	7aa4      	ldrb	r4, [r4, #10]
    b06c:	2c01      	cmp	r4, #1
    b06e:	d133      	bne.n	b0d8 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    b070:	4c1b      	ldr	r4, [pc, #108]	; (b0e0 <recv+0x8c>)
    b072:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    b074:	1964      	adds	r4, r4, r5
    b076:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    b078:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    b07a:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    b07c:	2900      	cmp	r1, #0
    b07e:	d11d      	bne.n	b0bc <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    b080:	2101      	movs	r1, #1
    b082:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b084:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    b086:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b088:	07d2      	lsls	r2, r2, #31
    b08a:	d500      	bpl.n	b08e <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    b08c:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    b08e:	2b00      	cmp	r3, #0
    b090:	d117      	bne.n	b0c2 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    b092:	3b01      	subs	r3, #1
    b094:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    b096:	aa04      	add	r2, sp, #16
    b098:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    b09a:	0100      	lsls	r0, r0, #4
    b09c:	4b10      	ldr	r3, [pc, #64]	; (b0e0 <recv+0x8c>)
    b09e:	1818      	adds	r0, r3, r0
    b0a0:	88c3      	ldrh	r3, [r0, #6]
    b0a2:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    b0a4:	2300      	movs	r3, #0
    b0a6:	9302      	str	r3, [sp, #8]
    b0a8:	9301      	str	r3, [sp, #4]
    b0aa:	9300      	str	r3, [sp, #0]
    b0ac:	3308      	adds	r3, #8
    b0ae:	2002      	movs	r0, #2
    b0b0:	4c0c      	ldr	r4, [pc, #48]	; (b0e4 <recv+0x90>)
    b0b2:	47a0      	blx	r4
    b0b4:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    b0b6:	2800      	cmp	r0, #0
    b0b8:	d000      	beq.n	b0bc <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    b0ba:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    b0bc:	0010      	movs	r0, r2
    b0be:	b007      	add	sp, #28
    b0c0:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    b0c2:	9304      	str	r3, [sp, #16]
    b0c4:	e7e7      	b.n	b096 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    b0c6:	2206      	movs	r2, #6
    b0c8:	4252      	negs	r2, r2
    b0ca:	e7f7      	b.n	b0bc <recv+0x68>
    b0cc:	2206      	movs	r2, #6
    b0ce:	4252      	negs	r2, r2
    b0d0:	e7f4      	b.n	b0bc <recv+0x68>
    b0d2:	2206      	movs	r2, #6
    b0d4:	4252      	negs	r2, r2
    b0d6:	e7f1      	b.n	b0bc <recv+0x68>
    b0d8:	2206      	movs	r2, #6
    b0da:	4252      	negs	r2, r2
    b0dc:	e7ee      	b.n	b0bc <recv+0x68>
    b0de:	46c0      	nop			; (mov r8, r8)
    b0e0:	20000464 	.word	0x20000464
    b0e4:	0000866d 	.word	0x0000866d

0000b0e8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    b0e8:	b530      	push	{r4, r5, lr}
    b0ea:	b087      	sub	sp, #28
    b0ec:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    b0ee:	481e      	ldr	r0, [pc, #120]	; (b168 <close+0x80>)
    b0f0:	4d1e      	ldr	r5, [pc, #120]	; (b16c <close+0x84>)
    b0f2:	47a8      	blx	r5
    b0f4:	0021      	movs	r1, r4
    b0f6:	481e      	ldr	r0, [pc, #120]	; (b170 <close+0x88>)
    b0f8:	47a8      	blx	r5
    b0fa:	200d      	movs	r0, #13
    b0fc:	4b1d      	ldr	r3, [pc, #116]	; (b174 <close+0x8c>)
    b0fe:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    b100:	2c00      	cmp	r4, #0
    b102:	db2a      	blt.n	b15a <close+0x72>
    b104:	0122      	lsls	r2, r4, #4
    b106:	4b1c      	ldr	r3, [pc, #112]	; (b178 <close+0x90>)
    b108:	189b      	adds	r3, r3, r2
    b10a:	7a9b      	ldrb	r3, [r3, #10]
    b10c:	2b01      	cmp	r3, #1
    b10e:	d127      	bne.n	b160 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    b110:	a905      	add	r1, sp, #20
    b112:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    b114:	4b18      	ldr	r3, [pc, #96]	; (b178 <close+0x90>)
    b116:	189b      	adds	r3, r3, r2
    b118:	88da      	ldrh	r2, [r3, #6]
    b11a:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    b11c:	2200      	movs	r2, #0
    b11e:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    b120:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b122:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    b124:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b126:	07db      	lsls	r3, r3, #31
    b128:	d500      	bpl.n	b12c <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    b12a:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    b12c:	2300      	movs	r3, #0
    b12e:	9302      	str	r3, [sp, #8]
    b130:	9301      	str	r3, [sp, #4]
    b132:	9300      	str	r3, [sp, #0]
    b134:	3304      	adds	r3, #4
    b136:	aa05      	add	r2, sp, #20
    b138:	2002      	movs	r0, #2
    b13a:	4d10      	ldr	r5, [pc, #64]	; (b17c <close+0x94>)
    b13c:	47a8      	blx	r5
    b13e:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    b140:	d001      	beq.n	b146 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    b142:	2509      	movs	r5, #9
    b144:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    b146:	0124      	lsls	r4, r4, #4
    b148:	480b      	ldr	r0, [pc, #44]	; (b178 <close+0x90>)
    b14a:	1820      	adds	r0, r4, r0
    b14c:	2210      	movs	r2, #16
    b14e:	2100      	movs	r1, #0
    b150:	4b0b      	ldr	r3, [pc, #44]	; (b180 <close+0x98>)
    b152:	4798      	blx	r3
	}
	return s8Ret;
}
    b154:	0028      	movs	r0, r5
    b156:	b007      	add	sp, #28
    b158:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    b15a:	2506      	movs	r5, #6
    b15c:	426d      	negs	r5, r5
    b15e:	e7f9      	b.n	b154 <close+0x6c>
    b160:	2506      	movs	r5, #6
    b162:	426d      	negs	r5, r5
    b164:	e7f6      	b.n	b154 <close+0x6c>
    b166:	46c0      	nop			; (mov r8, r8)
    b168:	0001326c 	.word	0x0001326c
    b16c:	000119b1 	.word	0x000119b1
    b170:	00013ce4 	.word	0x00013ce4
    b174:	000119e5 	.word	0x000119e5
    b178:	20000464 	.word	0x20000464
    b17c:	0000866d 	.word	0x0000866d
    b180:	00008535 	.word	0x00008535

0000b184 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    b184:	b570      	push	{r4, r5, r6, lr}
    b186:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    b188:	2300      	movs	r3, #0
    b18a:	9301      	str	r3, [sp, #4]
    b18c:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    b18e:	2100      	movs	r1, #0
    b190:	7802      	ldrb	r2, [r0, #0]
    b192:	1c44      	adds	r4, r0, #1
    b194:	3005      	adds	r0, #5
    b196:	000b      	movs	r3, r1
    b198:	e009      	b.n	b1ae <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    b19a:	009d      	lsls	r5, r3, #2
    b19c:	195b      	adds	r3, r3, r5
    b19e:	005b      	lsls	r3, r3, #1
    b1a0:	189b      	adds	r3, r3, r2
    b1a2:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    b1a4:	0022      	movs	r2, r4
    b1a6:	3401      	adds	r4, #1
			if(j > 4)
    b1a8:	42a0      	cmp	r0, r4
    b1aa:	d00a      	beq.n	b1c2 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    b1ac:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    b1ae:	2a2e      	cmp	r2, #46	; 0x2e
    b1b0:	d00a      	beq.n	b1c8 <nmi_inet_addr+0x44>
    b1b2:	2a00      	cmp	r2, #0
    b1b4:	d00c      	beq.n	b1d0 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    b1b6:	3a30      	subs	r2, #48	; 0x30
    b1b8:	b2d2      	uxtb	r2, r2
    b1ba:	2a09      	cmp	r2, #9
    b1bc:	d9ed      	bls.n	b19a <nmi_inet_addr+0x16>
				return 0;
    b1be:	2000      	movs	r0, #0
    b1c0:	e000      	b.n	b1c4 <nmi_inet_addr+0x40>
				return 0;
    b1c2:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    b1c4:	b002      	add	sp, #8
    b1c6:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    b1c8:	466a      	mov	r2, sp
    b1ca:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    b1cc:	0020      	movs	r0, r4
    b1ce:	e002      	b.n	b1d6 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    b1d0:	466a      	mov	r2, sp
    b1d2:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    b1d4:	0020      	movs	r0, r4
    b1d6:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    b1d8:	2e04      	cmp	r6, #4
    b1da:	d1d9      	bne.n	b190 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    b1dc:	2204      	movs	r2, #4
    b1de:	4669      	mov	r1, sp
    b1e0:	a801      	add	r0, sp, #4
    b1e2:	4b02      	ldr	r3, [pc, #8]	; (b1ec <nmi_inet_addr+0x68>)
    b1e4:	4798      	blx	r3
	return u32IP;
    b1e6:	9801      	ldr	r0, [sp, #4]
    b1e8:	e7ec      	b.n	b1c4 <nmi_inet_addr+0x40>
    b1ea:	46c0      	nop			; (mov r8, r8)
    b1ec:	00008521 	.word	0x00008521

0000b1f0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    b1f0:	b510      	push	{r4, lr}
    b1f2:	b084      	sub	sp, #16
    b1f4:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    b1f6:	4b0b      	ldr	r3, [pc, #44]	; (b224 <gethostbyname+0x34>)
    b1f8:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    b1fa:	b2c3      	uxtb	r3, r0
    b1fc:	2b40      	cmp	r3, #64	; 0x40
    b1fe:	d80d      	bhi.n	b21c <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    b200:	23ff      	movs	r3, #255	; 0xff
    b202:	4003      	ands	r3, r0
    b204:	3301      	adds	r3, #1
    b206:	2200      	movs	r2, #0
    b208:	9202      	str	r2, [sp, #8]
    b20a:	9201      	str	r2, [sp, #4]
    b20c:	9200      	str	r2, [sp, #0]
    b20e:	0022      	movs	r2, r4
    b210:	214a      	movs	r1, #74	; 0x4a
    b212:	2002      	movs	r0, #2
    b214:	4c04      	ldr	r4, [pc, #16]	; (b228 <gethostbyname+0x38>)
    b216:	47a0      	blx	r4
	}
	return s8Err;
}
    b218:	b004      	add	sp, #16
    b21a:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    b21c:	2006      	movs	r0, #6
    b21e:	4240      	negs	r0, r0
    b220:	e7fa      	b.n	b218 <gethostbyname+0x28>
    b222:	46c0      	nop			; (mov r8, r8)
    b224:	00008545 	.word	0x00008545
    b228:	0000866d 	.word	0x0000866d

0000b22c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    b22c:	b570      	push	{r4, r5, r6, lr}
    b22e:	b082      	sub	sp, #8
    b230:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    b232:	4b2a      	ldr	r3, [pc, #168]	; (b2dc <spi_flash_enable+0xb0>)
    b234:	4798      	blx	r3
    b236:	0500      	lsls	r0, r0, #20
    b238:	0d00      	lsrs	r0, r0, #20
    b23a:	4b29      	ldr	r3, [pc, #164]	; (b2e0 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    b23c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    b23e:	4298      	cmp	r0, r3
    b240:	d802      	bhi.n	b248 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    b242:	0028      	movs	r0, r5
    b244:	b002      	add	sp, #8
    b246:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    b248:	a901      	add	r1, sp, #4
    b24a:	4826      	ldr	r0, [pc, #152]	; (b2e4 <spi_flash_enable+0xb8>)
    b24c:	4b26      	ldr	r3, [pc, #152]	; (b2e8 <spi_flash_enable+0xbc>)
    b24e:	4798      	blx	r3
    b250:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    b252:	d1f6      	bne.n	b242 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    b254:	4b25      	ldr	r3, [pc, #148]	; (b2ec <spi_flash_enable+0xc0>)
    b256:	9a01      	ldr	r2, [sp, #4]
    b258:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    b25a:	4925      	ldr	r1, [pc, #148]	; (b2f0 <spi_flash_enable+0xc4>)
    b25c:	4319      	orrs	r1, r3
    b25e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    b260:	4820      	ldr	r0, [pc, #128]	; (b2e4 <spi_flash_enable+0xb8>)
    b262:	4b24      	ldr	r3, [pc, #144]	; (b2f4 <spi_flash_enable+0xc8>)
    b264:	4798      	blx	r3
		if(enable) {
    b266:	2c00      	cmp	r4, #0
    b268:	d020      	beq.n	b2ac <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    b26a:	2100      	movs	r1, #0
    b26c:	4822      	ldr	r0, [pc, #136]	; (b2f8 <spi_flash_enable+0xcc>)
    b26e:	4c21      	ldr	r4, [pc, #132]	; (b2f4 <spi_flash_enable+0xc8>)
    b270:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    b272:	21ab      	movs	r1, #171	; 0xab
    b274:	4821      	ldr	r0, [pc, #132]	; (b2fc <spi_flash_enable+0xd0>)
    b276:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    b278:	2101      	movs	r1, #1
    b27a:	4821      	ldr	r0, [pc, #132]	; (b300 <spi_flash_enable+0xd4>)
    b27c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    b27e:	2100      	movs	r1, #0
    b280:	4820      	ldr	r0, [pc, #128]	; (b304 <spi_flash_enable+0xd8>)
    b282:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    b284:	2181      	movs	r1, #129	; 0x81
    b286:	4820      	ldr	r0, [pc, #128]	; (b308 <spi_flash_enable+0xdc>)
    b288:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    b28a:	4e20      	ldr	r6, [pc, #128]	; (b30c <spi_flash_enable+0xe0>)
    b28c:	4c20      	ldr	r4, [pc, #128]	; (b310 <spi_flash_enable+0xe4>)
    b28e:	0030      	movs	r0, r6
    b290:	47a0      	blx	r4
    b292:	2801      	cmp	r0, #1
    b294:	d1fb      	bne.n	b28e <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    b296:	4b15      	ldr	r3, [pc, #84]	; (b2ec <spi_flash_enable+0xc0>)
    b298:	9a01      	ldr	r2, [sp, #4]
    b29a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    b29c:	2180      	movs	r1, #128	; 0x80
    b29e:	0249      	lsls	r1, r1, #9
    b2a0:	4319      	orrs	r1, r3
    b2a2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    b2a4:	480f      	ldr	r0, [pc, #60]	; (b2e4 <spi_flash_enable+0xb8>)
    b2a6:	4b13      	ldr	r3, [pc, #76]	; (b2f4 <spi_flash_enable+0xc8>)
    b2a8:	4798      	blx	r3
    b2aa:	e7ca      	b.n	b242 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    b2ac:	2100      	movs	r1, #0
    b2ae:	4812      	ldr	r0, [pc, #72]	; (b2f8 <spi_flash_enable+0xcc>)
    b2b0:	4c10      	ldr	r4, [pc, #64]	; (b2f4 <spi_flash_enable+0xc8>)
    b2b2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    b2b4:	21b9      	movs	r1, #185	; 0xb9
    b2b6:	4811      	ldr	r0, [pc, #68]	; (b2fc <spi_flash_enable+0xd0>)
    b2b8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    b2ba:	2101      	movs	r1, #1
    b2bc:	4810      	ldr	r0, [pc, #64]	; (b300 <spi_flash_enable+0xd4>)
    b2be:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    b2c0:	2100      	movs	r1, #0
    b2c2:	4810      	ldr	r0, [pc, #64]	; (b304 <spi_flash_enable+0xd8>)
    b2c4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    b2c6:	2181      	movs	r1, #129	; 0x81
    b2c8:	480f      	ldr	r0, [pc, #60]	; (b308 <spi_flash_enable+0xdc>)
    b2ca:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    b2cc:	4e0f      	ldr	r6, [pc, #60]	; (b30c <spi_flash_enable+0xe0>)
    b2ce:	4c10      	ldr	r4, [pc, #64]	; (b310 <spi_flash_enable+0xe4>)
    b2d0:	0030      	movs	r0, r6
    b2d2:	47a0      	blx	r4
    b2d4:	2801      	cmp	r0, #1
    b2d6:	d1fb      	bne.n	b2d0 <spi_flash_enable+0xa4>
    b2d8:	e7dd      	b.n	b296 <spi_flash_enable+0x6a>
    b2da:	46c0      	nop			; (mov r8, r8)
    b2dc:	0000956d 	.word	0x0000956d
    b2e0:	0000039f 	.word	0x0000039f
    b2e4:	00001410 	.word	0x00001410
    b2e8:	000099bd 	.word	0x000099bd
    b2ec:	f8888fff 	.word	0xf8888fff
    b2f0:	01111000 	.word	0x01111000
    b2f4:	000099c9 	.word	0x000099c9
    b2f8:	00010208 	.word	0x00010208
    b2fc:	0001020c 	.word	0x0001020c
    b300:	00010214 	.word	0x00010214
    b304:	0001021c 	.word	0x0001021c
    b308:	00010204 	.word	0x00010204
    b30c:	00010218 	.word	0x00010218
    b310:	000099b1 	.word	0x000099b1

0000b314 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    b314:	b5f0      	push	{r4, r5, r6, r7, lr}
    b316:	46c6      	mov	lr, r8
    b318:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    b31a:	2303      	movs	r3, #3
    b31c:	0007      	movs	r7, r0
    b31e:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    b320:	6813      	ldr	r3, [r2, #0]
    b322:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    b324:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    b326:	2903      	cmp	r1, #3
    b328:	d902      	bls.n	b330 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    b32a:	4244      	negs	r4, r0
    b32c:	2003      	movs	r0, #3
    b32e:	4004      	ands	r4, r0
	}

	if (temp_length) {
    b330:	2c00      	cmp	r4, #0
    b332:	d016      	beq.n	b362 <crc32_recalculate+0x4e>
		length -= temp_length;
    b334:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    b336:	1d3e      	adds	r6, r7, #4
    b338:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    b33a:	00e0      	lsls	r0, r4, #3
    b33c:	4240      	negs	r0, r0
    b33e:	3020      	adds	r0, #32
    b340:	40c5      	lsrs	r5, r0
	crc ^= data;
    b342:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    b344:	00e0      	lsls	r0, r4, #3
    b346:	d019      	beq.n	b37c <crc32_recalculate+0x68>
		if (crc & 1) {
    b348:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b34a:	4d27      	ldr	r5, [pc, #156]	; (b3e8 <crc32_recalculate+0xd4>)
    b34c:	e003      	b.n	b356 <crc32_recalculate+0x42>
			crc >>= 1;
    b34e:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    b350:	3801      	subs	r0, #1
    b352:	2800      	cmp	r0, #0
    b354:	d004      	beq.n	b360 <crc32_recalculate+0x4c>
		if (crc & 1) {
    b356:	421c      	tst	r4, r3
    b358:	d0f9      	beq.n	b34e <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b35a:	085b      	lsrs	r3, r3, #1
    b35c:	406b      	eors	r3, r5
    b35e:	e7f7      	b.n	b350 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    b360:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    b362:	2003      	movs	r0, #3
    b364:	000c      	movs	r4, r1
    b366:	4384      	bics	r4, r0

	if (temp_length) {
    b368:	d01e      	beq.n	b3a8 <crc32_recalculate+0x94>
		length -= temp_length;
    b36a:	1b08      	subs	r0, r1, r4
    b36c:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    b36e:	0889      	lsrs	r1, r1, #2
    b370:	4688      	mov	r8, r1
    b372:	003e      	movs	r6, r7
    b374:	000d      	movs	r5, r1
		if (crc & 1) {
    b376:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b378:	4c1b      	ldr	r4, [pc, #108]	; (b3e8 <crc32_recalculate+0xd4>)

		while (temp_length--) {
    b37a:	e00b      	b.n	b394 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    b37c:	0037      	movs	r7, r6
    b37e:	e7f0      	b.n	b362 <crc32_recalculate+0x4e>
			crc >>= 1;
    b380:	085b      	lsrs	r3, r3, #1
    b382:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    b384:	2900      	cmp	r1, #0
    b386:	d004      	beq.n	b392 <crc32_recalculate+0x7e>
		if (crc & 1) {
    b388:	4218      	tst	r0, r3
    b38a:	d0f9      	beq.n	b380 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b38c:	085b      	lsrs	r3, r3, #1
    b38e:	4063      	eors	r3, r4
    b390:	e7f7      	b.n	b382 <crc32_recalculate+0x6e>
    b392:	3604      	adds	r6, #4
		while (temp_length--) {
    b394:	3d01      	subs	r5, #1
    b396:	d303      	bcc.n	b3a0 <crc32_recalculate+0x8c>
	crc ^= data;
    b398:	6831      	ldr	r1, [r6, #0]
    b39a:	404b      	eors	r3, r1
    b39c:	2120      	movs	r1, #32
    b39e:	e7f3      	b.n	b388 <crc32_recalculate+0x74>
    b3a0:	4641      	mov	r1, r8
    b3a2:	0089      	lsls	r1, r1, #2
    b3a4:	187f      	adds	r7, r7, r1
		length -= temp_length;
    b3a6:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    b3a8:	2900      	cmp	r1, #0
    b3aa:	d017      	beq.n	b3dc <crc32_recalculate+0xc8>
		word = *word_ptr;
    b3ac:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    b3ae:	00c8      	lsls	r0, r1, #3
    b3b0:	4240      	negs	r0, r0
    b3b2:	3020      	adds	r0, #32
    b3b4:	2501      	movs	r5, #1
    b3b6:	426d      	negs	r5, r5
    b3b8:	40c5      	lsrs	r5, r0
    b3ba:	0028      	movs	r0, r5
    b3bc:	4020      	ands	r0, r4
	crc ^= data;
    b3be:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    b3c0:	00c9      	lsls	r1, r1, #3
    b3c2:	d00b      	beq.n	b3dc <crc32_recalculate+0xc8>
		if (crc & 1) {
    b3c4:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b3c6:	4c08      	ldr	r4, [pc, #32]	; (b3e8 <crc32_recalculate+0xd4>)
    b3c8:	e003      	b.n	b3d2 <crc32_recalculate+0xbe>
			crc >>= 1;
    b3ca:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    b3cc:	3901      	subs	r1, #1
    b3ce:	2900      	cmp	r1, #0
    b3d0:	d004      	beq.n	b3dc <crc32_recalculate+0xc8>
		if (crc & 1) {
    b3d2:	4218      	tst	r0, r3
    b3d4:	d0f9      	beq.n	b3ca <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    b3d6:	085b      	lsrs	r3, r3, #1
    b3d8:	4063      	eors	r3, r4
    b3da:	e7f7      	b.n	b3cc <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    b3dc:	43db      	mvns	r3, r3
    b3de:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    b3e0:	2000      	movs	r0, #0
    b3e2:	bc04      	pop	{r2}
    b3e4:	4690      	mov	r8, r2
    b3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3e8:	edb88320 	.word	0xedb88320

0000b3ec <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    b3ec:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    b3ee:	2a00      	cmp	r2, #0
    b3f0:	d001      	beq.n	b3f6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    b3f2:	0018      	movs	r0, r3
    b3f4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    b3f6:	008b      	lsls	r3, r1, #2
    b3f8:	4a06      	ldr	r2, [pc, #24]	; (b414 <extint_register_callback+0x28>)
    b3fa:	589b      	ldr	r3, [r3, r2]
    b3fc:	2b00      	cmp	r3, #0
    b3fe:	d003      	beq.n	b408 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    b400:	4283      	cmp	r3, r0
    b402:	d005      	beq.n	b410 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    b404:	231d      	movs	r3, #29
    b406:	e7f4      	b.n	b3f2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    b408:	0089      	lsls	r1, r1, #2
    b40a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    b40c:	2300      	movs	r3, #0
    b40e:	e7f0      	b.n	b3f2 <extint_register_callback+0x6>
		return STATUS_OK;
    b410:	2300      	movs	r3, #0
    b412:	e7ee      	b.n	b3f2 <extint_register_callback+0x6>
    b414:	20000524 	.word	0x20000524

0000b418 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    b418:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    b41a:	2900      	cmp	r1, #0
    b41c:	d001      	beq.n	b422 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    b41e:	0018      	movs	r0, r3
    b420:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    b422:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    b424:	281f      	cmp	r0, #31
    b426:	d800      	bhi.n	b42a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    b428:	4a02      	ldr	r2, [pc, #8]	; (b434 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    b42a:	2301      	movs	r3, #1
    b42c:	4083      	lsls	r3, r0
    b42e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    b430:	2300      	movs	r3, #0
    b432:	e7f4      	b.n	b41e <extint_chan_enable_callback+0x6>
    b434:	40001800 	.word	0x40001800

0000b438 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    b438:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    b43a:	2900      	cmp	r1, #0
    b43c:	d001      	beq.n	b442 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    b43e:	0018      	movs	r0, r3
    b440:	4770      	bx	lr
		return NULL;
    b442:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    b444:	281f      	cmp	r0, #31
    b446:	d800      	bhi.n	b44a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    b448:	4a02      	ldr	r2, [pc, #8]	; (b454 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    b44a:	2301      	movs	r3, #1
    b44c:	4083      	lsls	r3, r0
    b44e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    b450:	2300      	movs	r3, #0
    b452:	e7f4      	b.n	b43e <extint_chan_disable_callback+0x6>
    b454:	40001800 	.word	0x40001800

0000b458 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    b458:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    b45a:	2200      	movs	r2, #0
    b45c:	4b10      	ldr	r3, [pc, #64]	; (b4a0 <EIC_Handler+0x48>)
    b45e:	701a      	strb	r2, [r3, #0]
    b460:	2300      	movs	r3, #0
    b462:	4910      	ldr	r1, [pc, #64]	; (b4a4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    b464:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    b466:	4e10      	ldr	r6, [pc, #64]	; (b4a8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    b468:	4c0d      	ldr	r4, [pc, #52]	; (b4a0 <EIC_Handler+0x48>)
    b46a:	e00a      	b.n	b482 <EIC_Handler+0x2a>
		return eics[eic_index];
    b46c:	490d      	ldr	r1, [pc, #52]	; (b4a4 <EIC_Handler+0x4c>)
    b46e:	e008      	b.n	b482 <EIC_Handler+0x2a>
    b470:	7823      	ldrb	r3, [r4, #0]
    b472:	3301      	adds	r3, #1
    b474:	b2db      	uxtb	r3, r3
    b476:	7023      	strb	r3, [r4, #0]
    b478:	2b0f      	cmp	r3, #15
    b47a:	d810      	bhi.n	b49e <EIC_Handler+0x46>
		return NULL;
    b47c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    b47e:	2b1f      	cmp	r3, #31
    b480:	d9f4      	bls.n	b46c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    b482:	0028      	movs	r0, r5
    b484:	4018      	ands	r0, r3
    b486:	2201      	movs	r2, #1
    b488:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    b48a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    b48c:	4210      	tst	r0, r2
    b48e:	d0ef      	beq.n	b470 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    b490:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    b492:	009b      	lsls	r3, r3, #2
    b494:	599b      	ldr	r3, [r3, r6]
    b496:	2b00      	cmp	r3, #0
    b498:	d0ea      	beq.n	b470 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    b49a:	4798      	blx	r3
    b49c:	e7e8      	b.n	b470 <EIC_Handler+0x18>
			}
		}
	}
}
    b49e:	bd70      	pop	{r4, r5, r6, pc}
    b4a0:	20000520 	.word	0x20000520
    b4a4:	40001800 	.word	0x40001800
    b4a8:	20000524 	.word	0x20000524

0000b4ac <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    b4ac:	4a04      	ldr	r2, [pc, #16]	; (b4c0 <_extint_enable+0x14>)
    b4ae:	7813      	ldrb	r3, [r2, #0]
    b4b0:	2102      	movs	r1, #2
    b4b2:	430b      	orrs	r3, r1
    b4b4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    b4b6:	7853      	ldrb	r3, [r2, #1]
    b4b8:	b25b      	sxtb	r3, r3
    b4ba:	2b00      	cmp	r3, #0
    b4bc:	dbfb      	blt.n	b4b6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    b4be:	4770      	bx	lr
    b4c0:	40001800 	.word	0x40001800

0000b4c4 <_system_extint_init>:
{
    b4c4:	b500      	push	{lr}
    b4c6:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    b4c8:	4a12      	ldr	r2, [pc, #72]	; (b514 <_system_extint_init+0x50>)
    b4ca:	6993      	ldr	r3, [r2, #24]
    b4cc:	2140      	movs	r1, #64	; 0x40
    b4ce:	430b      	orrs	r3, r1
    b4d0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    b4d2:	a901      	add	r1, sp, #4
    b4d4:	2300      	movs	r3, #0
    b4d6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    b4d8:	2005      	movs	r0, #5
    b4da:	4b0f      	ldr	r3, [pc, #60]	; (b518 <_system_extint_init+0x54>)
    b4dc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    b4de:	2005      	movs	r0, #5
    b4e0:	4b0e      	ldr	r3, [pc, #56]	; (b51c <_system_extint_init+0x58>)
    b4e2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    b4e4:	4a0e      	ldr	r2, [pc, #56]	; (b520 <_system_extint_init+0x5c>)
    b4e6:	7813      	ldrb	r3, [r2, #0]
    b4e8:	2101      	movs	r1, #1
    b4ea:	430b      	orrs	r3, r1
    b4ec:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    b4ee:	7853      	ldrb	r3, [r2, #1]
    b4f0:	b25b      	sxtb	r3, r3
    b4f2:	2b00      	cmp	r3, #0
    b4f4:	dbfb      	blt.n	b4ee <_system_extint_init+0x2a>
    b4f6:	4b0b      	ldr	r3, [pc, #44]	; (b524 <_system_extint_init+0x60>)
    b4f8:	0019      	movs	r1, r3
    b4fa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    b4fc:	2200      	movs	r2, #0
    b4fe:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    b500:	4299      	cmp	r1, r3
    b502:	d1fc      	bne.n	b4fe <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b504:	2210      	movs	r2, #16
    b506:	4b08      	ldr	r3, [pc, #32]	; (b528 <_system_extint_init+0x64>)
    b508:	601a      	str	r2, [r3, #0]
	_extint_enable();
    b50a:	4b08      	ldr	r3, [pc, #32]	; (b52c <_system_extint_init+0x68>)
    b50c:	4798      	blx	r3
}
    b50e:	b003      	add	sp, #12
    b510:	bd00      	pop	{pc}
    b512:	46c0      	nop			; (mov r8, r8)
    b514:	40000400 	.word	0x40000400
    b518:	0000f551 	.word	0x0000f551
    b51c:	0000f4c5 	.word	0x0000f4c5
    b520:	40001800 	.word	0x40001800
    b524:	20000524 	.word	0x20000524
    b528:	e000e100 	.word	0xe000e100
    b52c:	0000b4ad 	.word	0x0000b4ad

0000b530 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    b530:	2300      	movs	r3, #0
    b532:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    b534:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    b536:	2201      	movs	r2, #1
    b538:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    b53a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    b53c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    b53e:	3302      	adds	r3, #2
    b540:	72c3      	strb	r3, [r0, #11]
}
    b542:	4770      	bx	lr

0000b544 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    b544:	b5f0      	push	{r4, r5, r6, r7, lr}
    b546:	b083      	sub	sp, #12
    b548:	0005      	movs	r5, r0
    b54a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b54c:	a901      	add	r1, sp, #4
    b54e:	2300      	movs	r3, #0
    b550:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    b552:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    b554:	7923      	ldrb	r3, [r4, #4]
    b556:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    b558:	7a23      	ldrb	r3, [r4, #8]
    b55a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    b55c:	7820      	ldrb	r0, [r4, #0]
    b55e:	4b15      	ldr	r3, [pc, #84]	; (b5b4 <extint_chan_set_config+0x70>)
    b560:	4798      	blx	r3
		return NULL;
    b562:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    b564:	2d1f      	cmp	r5, #31
    b566:	d800      	bhi.n	b56a <extint_chan_set_config+0x26>
		return eics[eic_index];
    b568:	4813      	ldr	r0, [pc, #76]	; (b5b8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    b56a:	2207      	movs	r2, #7
    b56c:	402a      	ands	r2, r5
    b56e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    b570:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    b572:	7aa3      	ldrb	r3, [r4, #10]
    b574:	2b00      	cmp	r3, #0
    b576:	d001      	beq.n	b57c <extint_chan_set_config+0x38>
    b578:	2308      	movs	r3, #8
    b57a:	431f      	orrs	r7, r3
    b57c:	08eb      	lsrs	r3, r5, #3
    b57e:	009b      	lsls	r3, r3, #2
    b580:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    b582:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    b584:	260f      	movs	r6, #15
    b586:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    b588:	43b1      	bics	r1, r6
			(new_config << config_pos);
    b58a:	4097      	lsls	r7, r2
    b58c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    b58e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    b590:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    b592:	7a63      	ldrb	r3, [r4, #9]
    b594:	2b00      	cmp	r3, #0
    b596:	d106      	bne.n	b5a6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    b598:	6943      	ldr	r3, [r0, #20]
    b59a:	2201      	movs	r2, #1
    b59c:	40aa      	lsls	r2, r5
    b59e:	4393      	bics	r3, r2
    b5a0:	6143      	str	r3, [r0, #20]
	}
}
    b5a2:	b003      	add	sp, #12
    b5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    b5a6:	6942      	ldr	r2, [r0, #20]
    b5a8:	2301      	movs	r3, #1
    b5aa:	40ab      	lsls	r3, r5
    b5ac:	4313      	orrs	r3, r2
    b5ae:	6143      	str	r3, [r0, #20]
    b5b0:	e7f7      	b.n	b5a2 <extint_chan_set_config+0x5e>
    b5b2:	46c0      	nop			; (mov r8, r8)
    b5b4:	0000f649 	.word	0x0000f649
    b5b8:	40001800 	.word	0x40001800

0000b5bc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    b5bc:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    b5be:	4b0f      	ldr	r3, [pc, #60]	; (b5fc <RTC_Handler+0x40>)
    b5c0:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    b5c2:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    b5c4:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    b5c6:	8a13      	ldrh	r3, [r2, #16]
    b5c8:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    b5ca:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    b5cc:	79e3      	ldrb	r3, [r4, #7]
    b5ce:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    b5d0:	b258      	sxtb	r0, r3
    b5d2:	2800      	cmp	r0, #0
    b5d4:	db06      	blt.n	b5e4 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    b5d6:	07db      	lsls	r3, r3, #31
    b5d8:	d503      	bpl.n	b5e2 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    b5da:	07cb      	lsls	r3, r1, #31
    b5dc:	d40a      	bmi.n	b5f4 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    b5de:	2301      	movs	r3, #1
    b5e0:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    b5e2:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    b5e4:	078b      	lsls	r3, r1, #30
    b5e6:	d402      	bmi.n	b5ee <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    b5e8:	2380      	movs	r3, #128	; 0x80
    b5ea:	7223      	strb	r3, [r4, #8]
    b5ec:	e7f9      	b.n	b5e2 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    b5ee:	68d3      	ldr	r3, [r2, #12]
    b5f0:	4798      	blx	r3
    b5f2:	e7f9      	b.n	b5e8 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    b5f4:	6893      	ldr	r3, [r2, #8]
    b5f6:	4798      	blx	r3
    b5f8:	e7f1      	b.n	b5de <RTC_Handler+0x22>
    b5fa:	46c0      	nop			; (mov r8, r8)
    b5fc:	20000564 	.word	0x20000564

0000b600 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    b600:	4b09      	ldr	r3, [pc, #36]	; (b628 <_tcc_get_inst_index+0x28>)
    b602:	4298      	cmp	r0, r3
    b604:	d00c      	beq.n	b620 <_tcc_get_inst_index+0x20>
    b606:	4b09      	ldr	r3, [pc, #36]	; (b62c <_tcc_get_inst_index+0x2c>)
    b608:	4298      	cmp	r0, r3
    b60a:	d007      	beq.n	b61c <_tcc_get_inst_index+0x1c>
    b60c:	4a08      	ldr	r2, [pc, #32]	; (b630 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    b60e:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    b610:	4290      	cmp	r0, r2
    b612:	d001      	beq.n	b618 <_tcc_get_inst_index+0x18>
}
    b614:	0018      	movs	r0, r3
    b616:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    b618:	3302      	adds	r3, #2
    b61a:	e002      	b.n	b622 <_tcc_get_inst_index+0x22>
    b61c:	2301      	movs	r3, #1
    b61e:	e000      	b.n	b622 <_tcc_get_inst_index+0x22>
    b620:	2300      	movs	r3, #0
			return i;
    b622:	b2db      	uxtb	r3, r3
    b624:	e7f6      	b.n	b614 <_tcc_get_inst_index+0x14>
    b626:	46c0      	nop			; (mov r8, r8)
    b628:	42002000 	.word	0x42002000
    b62c:	42002400 	.word	0x42002400
    b630:	42002800 	.word	0x42002800

0000b634 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    b634:	b510      	push	{r4, lr}
    b636:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    b638:	0008      	movs	r0, r1
    b63a:	4b4f      	ldr	r3, [pc, #316]	; (b778 <tcc_get_config_defaults+0x144>)
    b63c:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    b63e:	2300      	movs	r3, #0
    b640:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    b642:	0080      	lsls	r0, r0, #2
    b644:	4a4d      	ldr	r2, [pc, #308]	; (b77c <tcc_get_config_defaults+0x148>)
    b646:	5882      	ldr	r2, [r0, r2]
    b648:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    b64a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    b64c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    b64e:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    b650:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    b652:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    b654:	61e3      	str	r3, [r4, #28]
    b656:	6223      	str	r3, [r4, #32]
    b658:	6263      	str	r3, [r4, #36]	; 0x24
    b65a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    b65c:	7523      	strb	r3, [r4, #20]
    b65e:	7563      	strb	r3, [r4, #21]
    b660:	75a3      	strb	r3, [r4, #22]
    b662:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    b664:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    b666:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    b668:	7423      	strb	r3, [r4, #16]
    b66a:	7463      	strb	r3, [r4, #17]
    b66c:	74a3      	strb	r3, [r4, #18]
    b66e:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    b670:	222c      	movs	r2, #44	; 0x2c
    b672:	54a3      	strb	r3, [r4, r2]
    b674:	3201      	adds	r2, #1
    b676:	54a3      	strb	r3, [r4, r2]
    b678:	3201      	adds	r2, #1
    b67a:	54a3      	strb	r3, [r4, r2]
    b67c:	3201      	adds	r2, #1
    b67e:	54a3      	strb	r3, [r4, r2]
    b680:	3201      	adds	r2, #1
    b682:	54a3      	strb	r3, [r4, r2]
    b684:	3201      	adds	r2, #1
    b686:	54a3      	strb	r3, [r4, r2]
    b688:	3201      	adds	r2, #1
    b68a:	54a3      	strb	r3, [r4, r2]
    b68c:	3201      	adds	r2, #1
    b68e:	54a3      	strb	r3, [r4, r2]
    b690:	3201      	adds	r2, #1
    b692:	54a3      	strb	r3, [r4, r2]
    b694:	3201      	adds	r2, #1
    b696:	54a3      	strb	r3, [r4, r2]
    b698:	3201      	adds	r2, #1
    b69a:	54a3      	strb	r3, [r4, r2]
    b69c:	3201      	adds	r2, #1
    b69e:	54a3      	strb	r3, [r4, r2]
    b6a0:	3201      	adds	r2, #1
    b6a2:	54a3      	strb	r3, [r4, r2]
    b6a4:	3201      	adds	r2, #1
    b6a6:	54a3      	strb	r3, [r4, r2]
    b6a8:	3201      	adds	r2, #1
    b6aa:	54a3      	strb	r3, [r4, r2]
    b6ac:	3201      	adds	r2, #1
    b6ae:	54a3      	strb	r3, [r4, r2]
    b6b0:	3201      	adds	r2, #1
    b6b2:	54a3      	strb	r3, [r4, r2]
    b6b4:	3201      	adds	r2, #1
    b6b6:	54a3      	strb	r3, [r4, r2]
    b6b8:	3201      	adds	r2, #1
    b6ba:	54a3      	strb	r3, [r4, r2]
    b6bc:	3201      	adds	r2, #1
    b6be:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    b6c0:	3201      	adds	r2, #1
    b6c2:	54a3      	strb	r3, [r4, r2]
    b6c4:	3201      	adds	r2, #1
    b6c6:	54a3      	strb	r3, [r4, r2]
    b6c8:	3201      	adds	r2, #1
    b6ca:	54a3      	strb	r3, [r4, r2]
    b6cc:	3201      	adds	r2, #1
    b6ce:	54a3      	strb	r3, [r4, r2]
    b6d0:	3201      	adds	r2, #1
    b6d2:	54a3      	strb	r3, [r4, r2]
    b6d4:	3201      	adds	r2, #1
    b6d6:	54a3      	strb	r3, [r4, r2]
    b6d8:	3201      	adds	r2, #1
    b6da:	54a3      	strb	r3, [r4, r2]
    b6dc:	3201      	adds	r2, #1
    b6de:	54a3      	strb	r3, [r4, r2]
    b6e0:	3201      	adds	r2, #1
    b6e2:	54a3      	strb	r3, [r4, r2]
    b6e4:	3201      	adds	r2, #1
    b6e6:	54a3      	strb	r3, [r4, r2]
    b6e8:	3201      	adds	r2, #1
    b6ea:	54a3      	strb	r3, [r4, r2]
    b6ec:	3201      	adds	r2, #1
    b6ee:	54a3      	strb	r3, [r4, r2]
    b6f0:	3201      	adds	r2, #1
    b6f2:	54a3      	strb	r3, [r4, r2]
    b6f4:	3201      	adds	r2, #1
    b6f6:	54a3      	strb	r3, [r4, r2]
    b6f8:	3201      	adds	r2, #1
    b6fa:	54a3      	strb	r3, [r4, r2]
    b6fc:	3201      	adds	r2, #1
    b6fe:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    b700:	3201      	adds	r2, #1
    b702:	54a3      	strb	r3, [r4, r2]
    b704:	3201      	adds	r2, #1
    b706:	54a3      	strb	r3, [r4, r2]
    b708:	3201      	adds	r2, #1
    b70a:	54a3      	strb	r3, [r4, r2]
    b70c:	3201      	adds	r2, #1
    b70e:	54a3      	strb	r3, [r4, r2]
    b710:	3201      	adds	r2, #1
    b712:	54a3      	strb	r3, [r4, r2]
    b714:	3201      	adds	r2, #1
    b716:	54a3      	strb	r3, [r4, r2]
    b718:	3201      	adds	r2, #1
    b71a:	54a3      	strb	r3, [r4, r2]
    b71c:	3201      	adds	r2, #1
    b71e:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    b720:	3241      	adds	r2, #65	; 0x41
    b722:	54a3      	strb	r3, [r4, r2]
    b724:	65a3      	str	r3, [r4, #88]	; 0x58
    b726:	67a3      	str	r3, [r4, #120]	; 0x78
    b728:	3201      	adds	r2, #1
    b72a:	54a3      	strb	r3, [r4, r2]
    b72c:	65e3      	str	r3, [r4, #92]	; 0x5c
    b72e:	67e3      	str	r3, [r4, #124]	; 0x7c
    b730:	3201      	adds	r2, #1
    b732:	54a3      	strb	r3, [r4, r2]
    b734:	6623      	str	r3, [r4, #96]	; 0x60
    b736:	3a1a      	subs	r2, #26
    b738:	50a3      	str	r3, [r4, r2]
    b73a:	321b      	adds	r2, #27
    b73c:	54a3      	strb	r3, [r4, r2]
    b73e:	6663      	str	r3, [r4, #100]	; 0x64
    b740:	3a17      	subs	r2, #23
    b742:	50a3      	str	r3, [r4, r2]
    b744:	3218      	adds	r2, #24
    b746:	54a3      	strb	r3, [r4, r2]
    b748:	66a3      	str	r3, [r4, #104]	; 0x68
    b74a:	3a14      	subs	r2, #20
    b74c:	50a3      	str	r3, [r4, r2]
    b74e:	3215      	adds	r2, #21
    b750:	54a3      	strb	r3, [r4, r2]
    b752:	66e3      	str	r3, [r4, #108]	; 0x6c
    b754:	3a11      	subs	r2, #17
    b756:	50a3      	str	r3, [r4, r2]
    b758:	3212      	adds	r2, #18
    b75a:	54a3      	strb	r3, [r4, r2]
    b75c:	6723      	str	r3, [r4, #112]	; 0x70
    b75e:	3a0e      	subs	r2, #14
    b760:	50a3      	str	r3, [r4, r2]
    b762:	320f      	adds	r2, #15
    b764:	54a3      	strb	r3, [r4, r2]
    b766:	6763      	str	r3, [r4, #116]	; 0x74
    b768:	3a0b      	subs	r2, #11
    b76a:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    b76c:	2101      	movs	r1, #1
    b76e:	320c      	adds	r2, #12
    b770:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    b772:	3201      	adds	r2, #1
    b774:	54a3      	strb	r3, [r4, r2]
}
    b776:	bd10      	pop	{r4, pc}
    b778:	0000b601 	.word	0x0000b601
    b77c:	00013d2c 	.word	0x00013d2c

0000b780 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    b780:	b5f0      	push	{r4, r5, r6, r7, lr}
    b782:	46de      	mov	lr, fp
    b784:	4657      	mov	r7, sl
    b786:	464e      	mov	r6, r9
    b788:	4645      	mov	r5, r8
    b78a:	b5e0      	push	{r5, r6, r7, lr}
    b78c:	b091      	sub	sp, #68	; 0x44
    b78e:	9001      	str	r0, [sp, #4]
    b790:	000c      	movs	r4, r1
    b792:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    b794:	0008      	movs	r0, r1
    b796:	4bc3      	ldr	r3, [pc, #780]	; (baa4 <tcc_init+0x324>)
    b798:	4798      	blx	r3
    b79a:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    b79c:	0001      	movs	r1, r0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    b79e:	48c2      	ldr	r0, [pc, #776]	; (baa8 <tcc_init+0x328>)
    b7a0:	6a02      	ldr	r2, [r0, #32]
    b7a2:	009e      	lsls	r6, r3, #2
    b7a4:	4fc1      	ldr	r7, [pc, #772]	; (baac <tcc_init+0x32c>)
    b7a6:	59f7      	ldr	r7, [r6, r7]
    b7a8:	433a      	orrs	r2, r7
    b7aa:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    b7ac:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    b7ae:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    b7b0:	0792      	lsls	r2, r2, #30
    b7b2:	d506      	bpl.n	b7c2 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    b7b4:	b011      	add	sp, #68	; 0x44
    b7b6:	bc3c      	pop	{r2, r3, r4, r5}
    b7b8:	4690      	mov	r8, r2
    b7ba:	4699      	mov	r9, r3
    b7bc:	46a2      	mov	sl, r4
    b7be:	46ab      	mov	fp, r5
    b7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    b7c2:	6822      	ldr	r2, [r4, #0]
    b7c4:	2701      	movs	r7, #1
    b7c6:	4017      	ands	r7, r2
    b7c8:	d1f4      	bne.n	b7b4 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    b7ca:	48b9      	ldr	r0, [pc, #740]	; (bab0 <tcc_init+0x330>)
    b7cc:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    b7ce:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    b7d0:	682e      	ldr	r6, [r5, #0]
    b7d2:	42b2      	cmp	r2, r6
    b7d4:	d3ee      	bcc.n	b7b4 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    b7d6:	686e      	ldr	r6, [r5, #4]
    b7d8:	42b2      	cmp	r2, r6
    b7da:	d3eb      	bcc.n	b7b4 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    b7dc:	69e8      	ldr	r0, [r5, #28]
    b7de:	4282      	cmp	r2, r0
    b7e0:	d200      	bcs.n	b7e4 <tcc_init+0x64>
    b7e2:	e1b9      	b.n	bb58 <tcc_init+0x3d8>
    b7e4:	6a28      	ldr	r0, [r5, #32]
    b7e6:	4282      	cmp	r2, r0
    b7e8:	d200      	bcs.n	b7ec <tcc_init+0x6c>
    b7ea:	e1b7      	b.n	bb5c <tcc_init+0x3dc>
    b7ec:	6a68      	ldr	r0, [r5, #36]	; 0x24
    b7ee:	4282      	cmp	r2, r0
    b7f0:	d200      	bcs.n	b7f4 <tcc_init+0x74>
    b7f2:	e1b5      	b.n	bb60 <tcc_init+0x3e0>
    b7f4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    b7f6:	4282      	cmp	r2, r0
    b7f8:	d200      	bcs.n	b7fc <tcc_init+0x7c>
    b7fa:	e1b3      	b.n	bb64 <tcc_init+0x3e4>
    b7fc:	2298      	movs	r2, #152	; 0x98
    b7fe:	4694      	mov	ip, r2
    b800:	44ac      	add	ip, r5
    b802:	4662      	mov	r2, ip
    b804:	9208      	str	r2, [sp, #32]
    b806:	2000      	movs	r0, #0
    b808:	e003      	b.n	b812 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    b80a:	3001      	adds	r0, #1
    b80c:	3201      	adds	r2, #1
    b80e:	2808      	cmp	r0, #8
    b810:	d008      	beq.n	b824 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    b812:	7816      	ldrb	r6, [r2, #0]
    b814:	2e00      	cmp	r6, #0
    b816:	d0f8      	beq.n	b80a <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    b818:	4ea6      	ldr	r6, [pc, #664]	; (bab4 <tcc_init+0x334>)
    b81a:	5c76      	ldrb	r6, [r6, r1]
    b81c:	4286      	cmp	r6, r0
    b81e:	dcf4      	bgt.n	b80a <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    b820:	2017      	movs	r0, #23
    b822:	e7c7      	b.n	b7b4 <tcc_init+0x34>
    b824:	2200      	movs	r2, #0
    b826:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    b828:	2080      	movs	r0, #128	; 0x80
    b82a:	0440      	lsls	r0, r0, #17
    b82c:	4684      	mov	ip, r0
    b82e:	e002      	b.n	b836 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    b830:	3201      	adds	r2, #1
    b832:	2a04      	cmp	r2, #4
    b834:	d00e      	beq.n	b854 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    b836:	18a8      	adds	r0, r5, r2
    b838:	7c00      	ldrb	r0, [r0, #16]
    b83a:	2801      	cmp	r0, #1
    b83c:	d1f8      	bne.n	b830 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    b83e:	489e      	ldr	r0, [pc, #632]	; (bab8 <tcc_init+0x338>)
    b840:	5c40      	ldrb	r0, [r0, r1]
    b842:	4290      	cmp	r0, r2
    b844:	da00      	bge.n	b848 <tcc_init+0xc8>
    b846:	e18f      	b.n	bb68 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    b848:	4660      	mov	r0, ip
    b84a:	4090      	lsls	r0, r2
    b84c:	9e02      	ldr	r6, [sp, #8]
    b84e:	4306      	orrs	r6, r0
    b850:	9602      	str	r6, [sp, #8]
    b852:	e7ed      	b.n	b830 <tcc_init+0xb0>
	if (config->run_in_standby) {
    b854:	329d      	adds	r2, #157	; 0x9d
    b856:	5caa      	ldrb	r2, [r5, r2]
    b858:	2a00      	cmp	r2, #0
    b85a:	d004      	beq.n	b866 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    b85c:	2280      	movs	r2, #128	; 0x80
    b85e:	0112      	lsls	r2, r2, #4
    b860:	9902      	ldr	r1, [sp, #8]
    b862:	4311      	orrs	r1, r2
    b864:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    b866:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    b868:	1e51      	subs	r1, r2, #1
    b86a:	418a      	sbcs	r2, r1
    b86c:	0092      	lsls	r2, r2, #2
    b86e:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    b870:	7a6a      	ldrb	r2, [r5, #9]
    b872:	2a01      	cmp	r2, #1
    b874:	d022      	beq.n	b8bc <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    b876:	4a90      	ldr	r2, [pc, #576]	; (bab8 <tcc_init+0x338>)
    b878:	5cd2      	ldrb	r2, [r2, r3]
    b87a:	0011      	movs	r1, r2
    b87c:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    b87e:	2235      	movs	r2, #53	; 0x35
    b880:	5caa      	ldrb	r2, [r5, r2]
    b882:	428a      	cmp	r2, r1
    b884:	d300      	bcc.n	b888 <tcc_init+0x108>
    b886:	e179      	b.n	bb7c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    b888:	212c      	movs	r1, #44	; 0x2c
    b88a:	5c69      	ldrb	r1, [r5, r1]
    b88c:	290f      	cmp	r1, #15
    b88e:	d900      	bls.n	b892 <tcc_init+0x112>
    b890:	e174      	b.n	bb7c <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    b892:	7b28      	ldrb	r0, [r5, #12]
    b894:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    b896:	7ae8      	ldrb	r0, [r5, #11]
    b898:	900b      	str	r0, [sp, #44]	; 0x2c
    b89a:	202d      	movs	r0, #45	; 0x2d
    b89c:	4682      	mov	sl, r0
    b89e:	44aa      	add	sl, r5
    b8a0:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    b8a2:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    b8a4:	ae0e      	add	r6, sp, #56	; 0x38
    b8a6:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    b8a8:	26c0      	movs	r6, #192	; 0xc0
    b8aa:	0136      	lsls	r6, r6, #4
    b8ac:	46b1      	mov	r9, r6
    b8ae:	4684      	mov	ip, r0
    b8b0:	46a0      	mov	r8, r4
    b8b2:	0028      	movs	r0, r5
    b8b4:	4655      	mov	r5, sl
    b8b6:	9309      	str	r3, [sp, #36]	; 0x24
    b8b8:	4682      	mov	sl, r0
    b8ba:	e035      	b.n	b928 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    b8bc:	9906      	ldr	r1, [sp, #24]
    b8be:	4311      	orrs	r1, r2
    b8c0:	9106      	str	r1, [sp, #24]
    b8c2:	e7d8      	b.n	b876 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    b8c4:	0292      	lsls	r2, r2, #10
    b8c6:	464f      	mov	r7, r9
    b8c8:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    b8ca:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    b8cc:	7919      	ldrb	r1, [r3, #4]
    b8ce:	468b      	mov	fp, r1
    b8d0:	2103      	movs	r1, #3
    b8d2:	465f      	mov	r7, fp
    b8d4:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    b8d6:	430a      	orrs	r2, r1
    b8d8:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    b8da:	795a      	ldrb	r2, [r3, #5]
    b8dc:	0152      	lsls	r2, r2, #5
    b8de:	2160      	movs	r1, #96	; 0x60
    b8e0:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    b8e2:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    b8e4:	7999      	ldrb	r1, [r3, #6]
    b8e6:	0209      	lsls	r1, r1, #8
    b8e8:	26c0      	movs	r6, #192	; 0xc0
    b8ea:	00b6      	lsls	r6, r6, #2
    b8ec:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    b8ee:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    b8f0:	79da      	ldrb	r2, [r3, #7]
    b8f2:	0312      	lsls	r2, r2, #12
    b8f4:	21e0      	movs	r1, #224	; 0xe0
    b8f6:	01c9      	lsls	r1, r1, #7
    b8f8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    b8fa:	4316      	orrs	r6, r2
    b8fc:	4334      	orrs	r4, r6
    b8fe:	9a03      	ldr	r2, [sp, #12]
    b900:	4314      	orrs	r4, r2
    b902:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    b904:	4662      	mov	r2, ip
    b906:	9907      	ldr	r1, [sp, #28]
    b908:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    b90a:	2a04      	cmp	r2, #4
    b90c:	d02a      	beq.n	b964 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    b90e:	7c9a      	ldrb	r2, [r3, #18]
    b910:	9905      	ldr	r1, [sp, #20]
    b912:	4291      	cmp	r1, r2
    b914:	d800      	bhi.n	b918 <tcc_init+0x198>
    b916:	e131      	b.n	bb7c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    b918:	7a59      	ldrb	r1, [r3, #9]
    b91a:	350a      	adds	r5, #10
    b91c:	2304      	movs	r3, #4
    b91e:	469b      	mov	fp, r3
    b920:	44dc      	add	ip, fp
    b922:	290f      	cmp	r1, #15
    b924:	d900      	bls.n	b928 <tcc_init+0x1a8>
    b926:	e129      	b.n	bb7c <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    b928:	0609      	lsls	r1, r1, #24
    b92a:	23f0      	movs	r3, #240	; 0xf0
    b92c:	051b      	lsls	r3, r3, #20
    b92e:	4019      	ands	r1, r3
    b930:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    b932:	782e      	ldrb	r6, [r5, #0]
    b934:	0436      	lsls	r6, r6, #16
    b936:	20ff      	movs	r0, #255	; 0xff
    b938:	0400      	lsls	r0, r0, #16
    b93a:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    b93c:	7868      	ldrb	r0, [r5, #1]
    b93e:	2480      	movs	r4, #128	; 0x80
    b940:	2800      	cmp	r0, #0
    b942:	d100      	bne.n	b946 <tcc_init+0x1c6>
    b944:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    b946:	7898      	ldrb	r0, [r3, #2]
    b948:	2708      	movs	r7, #8
    b94a:	9703      	str	r7, [sp, #12]
    b94c:	2800      	cmp	r0, #0
    b94e:	d101      	bne.n	b954 <tcc_init+0x1d4>
    b950:	9804      	ldr	r0, [sp, #16]
    b952:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    b954:	78d8      	ldrb	r0, [r3, #3]
    b956:	4683      	mov	fp, r0
    b958:	2010      	movs	r0, #16
    b95a:	465f      	mov	r7, fp
    b95c:	2f00      	cmp	r7, #0
    b95e:	d1b1      	bne.n	b8c4 <tcc_init+0x144>
    b960:	9804      	ldr	r0, [sp, #16]
    b962:	e7af      	b.n	b8c4 <tcc_init+0x144>
    b964:	4644      	mov	r4, r8
    b966:	4655      	mov	r5, sl
    b968:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    b96a:	4a52      	ldr	r2, [pc, #328]	; (bab4 <tcc_init+0x334>)
    b96c:	5cd2      	ldrb	r2, [r2, r3]
    b96e:	4691      	mov	r9, r2
    b970:	4651      	mov	r1, sl
    b972:	3150      	adds	r1, #80	; 0x50
    b974:	4650      	mov	r0, sl
    b976:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    b978:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    b97a:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    b97c:	2601      	movs	r6, #1
    b97e:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    b980:	2602      	movs	r6, #2
    b982:	36ff      	adds	r6, #255	; 0xff
    b984:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    b986:	2680      	movs	r6, #128	; 0x80
    b988:	0276      	lsls	r6, r6, #9
    b98a:	46b0      	mov	r8, r6
    b98c:	46a4      	mov	ip, r4
    b98e:	001c      	movs	r4, r3
    b990:	464b      	mov	r3, r9
    b992:	e00f      	b.n	b9b4 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    b994:	7806      	ldrb	r6, [r0, #0]
    b996:	2e00      	cmp	r6, #0
    b998:	d007      	beq.n	b9aa <tcc_init+0x22a>
			if (i >= ow_num) {
    b99a:	4293      	cmp	r3, r2
    b99c:	d800      	bhi.n	b9a0 <tcc_init+0x220>
    b99e:	e0e7      	b.n	bb70 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    b9a0:	2e02      	cmp	r6, #2
    b9a2:	d014      	beq.n	b9ce <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    b9a4:	4656      	mov	r6, sl
    b9a6:	4096      	lsls	r6, r2
    b9a8:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    b9aa:	3201      	adds	r2, #1
    b9ac:	3101      	adds	r1, #1
    b9ae:	3002      	adds	r0, #2
    b9b0:	2a08      	cmp	r2, #8
    b9b2:	d010      	beq.n	b9d6 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    b9b4:	780e      	ldrb	r6, [r1, #0]
    b9b6:	2e00      	cmp	r6, #0
    b9b8:	d0ec      	beq.n	b994 <tcc_init+0x214>
			if (i >= ow_num) {
    b9ba:	4293      	cmp	r3, r2
    b9bc:	d800      	bhi.n	b9c0 <tcc_init+0x240>
    b9be:	e0d5      	b.n	bb6c <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    b9c0:	4646      	mov	r6, r8
    b9c2:	4096      	lsls	r6, r2
    b9c4:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    b9c6:	7806      	ldrb	r6, [r0, #0]
    b9c8:	2e00      	cmp	r6, #0
    b9ca:	d1e9      	bne.n	b9a0 <tcc_init+0x220>
    b9cc:	e7ed      	b.n	b9aa <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    b9ce:	465e      	mov	r6, fp
    b9d0:	4096      	lsls	r6, r2
    b9d2:	4337      	orrs	r7, r6
    b9d4:	e7e9      	b.n	b9aa <tcc_init+0x22a>
    b9d6:	4699      	mov	r9, r3
    b9d8:	0023      	movs	r3, r4
    b9da:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    b9dc:	7e6a      	ldrb	r2, [r5, #25]
    b9de:	0112      	lsls	r2, r2, #4
    b9e0:	2130      	movs	r1, #48	; 0x30
    b9e2:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    b9e4:	7e28      	ldrb	r0, [r5, #24]
    b9e6:	2207      	movs	r2, #7
    b9e8:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    b9ea:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    b9ec:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    b9ee:	2080      	movs	r0, #128	; 0x80
    b9f0:	0240      	lsls	r0, r0, #9
    b9f2:	000e      	movs	r6, r1
    b9f4:	e002      	b.n	b9fc <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    b9f6:	3201      	adds	r2, #1
    b9f8:	2a04      	cmp	r2, #4
    b9fa:	d00b      	beq.n	ba14 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    b9fc:	18a9      	adds	r1, r5, r2
    b9fe:	7d09      	ldrb	r1, [r1, #20]
    ba00:	2900      	cmp	r1, #0
    ba02:	d0f8      	beq.n	b9f6 <tcc_init+0x276>
			if (n >= cc_num) {
    ba04:	9905      	ldr	r1, [sp, #20]
    ba06:	4291      	cmp	r1, r2
    ba08:	dc00      	bgt.n	ba0c <tcc_init+0x28c>
    ba0a:	e0b3      	b.n	bb74 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    ba0c:	0001      	movs	r1, r0
    ba0e:	4091      	lsls	r1, r2
    ba10:	430e      	orrs	r6, r1
    ba12:	e7f0      	b.n	b9f6 <tcc_init+0x276>
    ba14:	46b2      	mov	sl, r6
    ba16:	9801      	ldr	r0, [sp, #4]
    ba18:	0002      	movs	r2, r0
    ba1a:	3204      	adds	r2, #4
    ba1c:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    ba1e:	2100      	movs	r1, #0
    ba20:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    ba22:	4282      	cmp	r2, r0
    ba24:	d1fc      	bne.n	ba20 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    ba26:	2200      	movs	r2, #0
    ba28:	9801      	ldr	r0, [sp, #4]
    ba2a:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    ba2c:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    ba2e:	0099      	lsls	r1, r3, #2
    ba30:	4a22      	ldr	r2, [pc, #136]	; (babc <tcc_init+0x33c>)
    ba32:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    ba34:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    ba36:	22a0      	movs	r2, #160	; 0xa0
    ba38:	5ca9      	ldrb	r1, [r5, r2]
    ba3a:	3a64      	subs	r2, #100	; 0x64
    ba3c:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    ba3e:	a90d      	add	r1, sp, #52	; 0x34
    ba40:	7aaa      	ldrb	r2, [r5, #10]
    ba42:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    ba44:	4a1e      	ldr	r2, [pc, #120]	; (bac0 <tcc_init+0x340>)
    ba46:	5cd6      	ldrb	r6, [r2, r3]
    ba48:	0030      	movs	r0, r6
    ba4a:	4b1e      	ldr	r3, [pc, #120]	; (bac4 <tcc_init+0x344>)
    ba4c:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    ba4e:	0030      	movs	r0, r6
    ba50:	4b1d      	ldr	r3, [pc, #116]	; (bac8 <tcc_init+0x348>)
    ba52:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    ba54:	464b      	mov	r3, r9
    ba56:	2b00      	cmp	r3, #0
    ba58:	dd3c      	ble.n	bad4 <tcc_init+0x354>
    ba5a:	002e      	movs	r6, r5
    ba5c:	3658      	adds	r6, #88	; 0x58
    ba5e:	3398      	adds	r3, #152	; 0x98
    ba60:	4698      	mov	r8, r3
    ba62:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    ba64:	2301      	movs	r3, #1
    ba66:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    ba68:	46ab      	mov	fp, r5
    ba6a:	4645      	mov	r5, r8
    ba6c:	46a0      	mov	r8, r4
    ba6e:	9c08      	ldr	r4, [sp, #32]
    ba70:	e003      	b.n	ba7a <tcc_init+0x2fa>
    ba72:	3401      	adds	r4, #1
    ba74:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    ba76:	42ac      	cmp	r4, r5
    ba78:	d02a      	beq.n	bad0 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    ba7a:	7823      	ldrb	r3, [r4, #0]
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	d0f8      	beq.n	ba72 <tcc_init+0x2f2>
    ba80:	ab0c      	add	r3, sp, #48	; 0x30
    ba82:	464a      	mov	r2, r9
    ba84:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    ba86:	2300      	movs	r3, #0
    ba88:	aa0c      	add	r2, sp, #48	; 0x30
    ba8a:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    ba8c:	0013      	movs	r3, r2
    ba8e:	2220      	movs	r2, #32
    ba90:	18b2      	adds	r2, r6, r2
    ba92:	7812      	ldrb	r2, [r2, #0]
    ba94:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    ba96:	464a      	mov	r2, r9
    ba98:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    ba9a:	7830      	ldrb	r0, [r6, #0]
    ba9c:	0019      	movs	r1, r3
    ba9e:	4b0b      	ldr	r3, [pc, #44]	; (bacc <tcc_init+0x34c>)
    baa0:	4798      	blx	r3
    baa2:	e7e6      	b.n	ba72 <tcc_init+0x2f2>
    baa4:	0000b601 	.word	0x0000b601
    baa8:	40000400 	.word	0x40000400
    baac:	00013d18 	.word	0x00013d18
    bab0:	00013d2c 	.word	0x00013d2c
    bab4:	00013d38 	.word	0x00013d38
    bab8:	00013d24 	.word	0x00013d24
    babc:	20000568 	.word	0x20000568
    bac0:	00013d28 	.word	0x00013d28
    bac4:	0000f551 	.word	0x0000f551
    bac8:	0000f4c5 	.word	0x0000f4c5
    bacc:	0000f649 	.word	0x0000f649
    bad0:	4644      	mov	r4, r8
    bad2:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    bad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bad6:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    bad8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bada:	0212      	lsls	r2, r2, #8
    badc:	4313      	orrs	r3, r2
    bade:	9a02      	ldr	r2, [sp, #8]
    bae0:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    bae2:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    bae4:	2204      	movs	r2, #4
    bae6:	68a3      	ldr	r3, [r4, #8]
    bae8:	421a      	tst	r2, r3
    baea:	d1fc      	bne.n	bae6 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    baec:	23ff      	movs	r3, #255	; 0xff
    baee:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    baf0:	2204      	movs	r2, #4
    baf2:	68a3      	ldr	r3, [r4, #8]
    baf4:	421a      	tst	r2, r3
    baf6:	d1fc      	bne.n	baf2 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    baf8:	466b      	mov	r3, sp
    bafa:	7e1b      	ldrb	r3, [r3, #24]
    bafc:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    bafe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bb00:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    bb02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bb04:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    bb06:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    bb08:	4a1d      	ldr	r2, [pc, #116]	; (bb80 <tcc_init+0x400>)
    bb0a:	68a3      	ldr	r3, [r4, #8]
    bb0c:	4213      	tst	r3, r2
    bb0e:	d1fc      	bne.n	bb0a <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    bb10:	4653      	mov	r3, sl
    bb12:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    bb14:	2210      	movs	r2, #16
    bb16:	68a3      	ldr	r3, [r4, #8]
    bb18:	421a      	tst	r2, r3
    bb1a:	d1fc      	bne.n	bb16 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    bb1c:	682b      	ldr	r3, [r5, #0]
    bb1e:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    bb20:	4a18      	ldr	r2, [pc, #96]	; (bb84 <tcc_init+0x404>)
    bb22:	68a3      	ldr	r3, [r4, #8]
    bb24:	4213      	tst	r3, r2
    bb26:	d1fc      	bne.n	bb22 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    bb28:	686b      	ldr	r3, [r5, #4]
    bb2a:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    bb2c:	9805      	ldr	r0, [sp, #20]
    bb2e:	2800      	cmp	r0, #0
    bb30:	dd22      	ble.n	bb78 <tcc_init+0x3f8>
    bb32:	351c      	adds	r5, #28
    bb34:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    bb36:	4e14      	ldr	r6, [pc, #80]	; (bb88 <tcc_init+0x408>)
    bb38:	0032      	movs	r2, r6
    bb3a:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    bb3c:	68a3      	ldr	r3, [r4, #8]
    bb3e:	421a      	tst	r2, r3
    bb40:	d1fc      	bne.n	bb3c <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    bb42:	cd04      	ldmia	r5!, {r2}
    bb44:	000b      	movs	r3, r1
    bb46:	3310      	adds	r3, #16
    bb48:	009b      	lsls	r3, r3, #2
    bb4a:	18e3      	adds	r3, r4, r3
    bb4c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    bb4e:	3101      	adds	r1, #1
    bb50:	4288      	cmp	r0, r1
    bb52:	dcf1      	bgt.n	bb38 <tcc_init+0x3b8>
	return STATUS_OK;
    bb54:	2000      	movs	r0, #0
    bb56:	e62d      	b.n	b7b4 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    bb58:	2017      	movs	r0, #23
    bb5a:	e62b      	b.n	b7b4 <tcc_init+0x34>
    bb5c:	2017      	movs	r0, #23
    bb5e:	e629      	b.n	b7b4 <tcc_init+0x34>
    bb60:	2017      	movs	r0, #23
    bb62:	e627      	b.n	b7b4 <tcc_init+0x34>
    bb64:	2017      	movs	r0, #23
    bb66:	e625      	b.n	b7b4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    bb68:	2017      	movs	r0, #23
    bb6a:	e623      	b.n	b7b4 <tcc_init+0x34>
			if (i >= ow_num) {
    bb6c:	2017      	movs	r0, #23
    bb6e:	e621      	b.n	b7b4 <tcc_init+0x34>
			if (i >= ow_num) {
    bb70:	2017      	movs	r0, #23
    bb72:	e61f      	b.n	b7b4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    bb74:	2017      	movs	r0, #23
    bb76:	e61d      	b.n	b7b4 <tcc_init+0x34>
	return STATUS_OK;
    bb78:	2000      	movs	r0, #0
    bb7a:	e61b      	b.n	b7b4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    bb7c:	2017      	movs	r0, #23
    bb7e:	e619      	b.n	b7b4 <tcc_init+0x34>
    bb80:	00020040 	.word	0x00020040
    bb84:	00040080 	.word	0x00040080
    bb88:	00080100 	.word	0x00080100

0000bb8c <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    bb8c:	0092      	lsls	r2, r2, #2
    bb8e:	1883      	adds	r3, r0, r2
    bb90:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    bb92:	4b03      	ldr	r3, [pc, #12]	; (bba0 <tcc_register_callback+0x14>)
    bb94:	58d3      	ldr	r3, [r2, r3]
    bb96:	6b42      	ldr	r2, [r0, #52]	; 0x34
    bb98:	4313      	orrs	r3, r2
    bb9a:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    bb9c:	2000      	movs	r0, #0
    bb9e:	4770      	bx	lr
    bba0:	00013d3c 	.word	0x00013d3c

0000bba4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    bba4:	b570      	push	{r4, r5, r6, lr}
    bba6:	0004      	movs	r4, r0
    bba8:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    bbaa:	6800      	ldr	r0, [r0, #0]
    bbac:	4b09      	ldr	r3, [pc, #36]	; (bbd4 <tcc_enable_callback+0x30>)
    bbae:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    bbb0:	4b09      	ldr	r3, [pc, #36]	; (bbd8 <tcc_enable_callback+0x34>)
    bbb2:	5c1b      	ldrb	r3, [r3, r0]
    bbb4:	221f      	movs	r2, #31
    bbb6:	401a      	ands	r2, r3
    bbb8:	2301      	movs	r3, #1
    bbba:	4093      	lsls	r3, r2
    bbbc:	4a07      	ldr	r2, [pc, #28]	; (bbdc <tcc_enable_callback+0x38>)
    bbbe:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    bbc0:	00ad      	lsls	r5, r5, #2
    bbc2:	4b07      	ldr	r3, [pc, #28]	; (bbe0 <tcc_enable_callback+0x3c>)
    bbc4:	58ea      	ldr	r2, [r5, r3]
    bbc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    bbc8:	4313      	orrs	r3, r2
    bbca:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    bbcc:	6823      	ldr	r3, [r4, #0]
    bbce:	629a      	str	r2, [r3, #40]	; 0x28
}
    bbd0:	bd70      	pop	{r4, r5, r6, pc}
    bbd2:	46c0      	nop			; (mov r8, r8)
    bbd4:	0000b601 	.word	0x0000b601
    bbd8:	00013d6c 	.word	0x00013d6c
    bbdc:	e000e100 	.word	0xe000e100
    bbe0:	00013d3c 	.word	0x00013d3c

0000bbe4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    bbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbe6:	46c6      	mov	lr, r8
    bbe8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    bbea:	0080      	lsls	r0, r0, #2
    bbec:	4b0e      	ldr	r3, [pc, #56]	; (bc28 <_tcc_interrupt_handler+0x44>)
    bbee:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    bbf0:	683b      	ldr	r3, [r7, #0]
    bbf2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    bbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    bbf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    bbf8:	4013      	ands	r3, r2
    bbfa:	401e      	ands	r6, r3
    bbfc:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    bbfe:	4b0b      	ldr	r3, [pc, #44]	; (bc2c <_tcc_interrupt_handler+0x48>)
    bc00:	4698      	mov	r8, r3
    bc02:	e002      	b.n	bc0a <_tcc_interrupt_handler+0x26>
    bc04:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    bc06:	2c30      	cmp	r4, #48	; 0x30
    bc08:	d00a      	beq.n	bc20 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    bc0a:	4643      	mov	r3, r8
    bc0c:	58e5      	ldr	r5, [r4, r3]
    bc0e:	4235      	tst	r5, r6
    bc10:	d0f8      	beq.n	bc04 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    bc12:	193b      	adds	r3, r7, r4
    bc14:	685b      	ldr	r3, [r3, #4]
    bc16:	0038      	movs	r0, r7
    bc18:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    bc1a:	683b      	ldr	r3, [r7, #0]
    bc1c:	62dd      	str	r5, [r3, #44]	; 0x2c
    bc1e:	e7f1      	b.n	bc04 <_tcc_interrupt_handler+0x20>
		}
	}
}
    bc20:	bc04      	pop	{r2}
    bc22:	4690      	mov	r8, r2
    bc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc26:	46c0      	nop			; (mov r8, r8)
    bc28:	20000568 	.word	0x20000568
    bc2c:	00013d3c 	.word	0x00013d3c

0000bc30 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    bc30:	b510      	push	{r4, lr}
    bc32:	2000      	movs	r0, #0
    bc34:	4b01      	ldr	r3, [pc, #4]	; (bc3c <TCC0_Handler+0xc>)
    bc36:	4798      	blx	r3
    bc38:	bd10      	pop	{r4, pc}
    bc3a:	46c0      	nop			; (mov r8, r8)
    bc3c:	0000bbe5 	.word	0x0000bbe5

0000bc40 <TCC1_Handler>:
    bc40:	b510      	push	{r4, lr}
    bc42:	2001      	movs	r0, #1
    bc44:	4b01      	ldr	r3, [pc, #4]	; (bc4c <TCC1_Handler+0xc>)
    bc46:	4798      	blx	r3
    bc48:	bd10      	pop	{r4, pc}
    bc4a:	46c0      	nop			; (mov r8, r8)
    bc4c:	0000bbe5 	.word	0x0000bbe5

0000bc50 <TCC2_Handler>:
    bc50:	b510      	push	{r4, lr}
    bc52:	2002      	movs	r0, #2
    bc54:	4b01      	ldr	r3, [pc, #4]	; (bc5c <TCC2_Handler+0xc>)
    bc56:	4798      	blx	r3
    bc58:	bd10      	pop	{r4, pc}
    bc5a:	46c0      	nop			; (mov r8, r8)
    bc5c:	0000bbe5 	.word	0x0000bbe5

0000bc60 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc62:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    bc64:	2041      	movs	r0, #65	; 0x41
    bc66:	5c23      	ldrb	r3, [r4, r0]
    bc68:	2501      	movs	r5, #1
    bc6a:	432b      	orrs	r3, r5
    bc6c:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    bc6e:	b292      	uxth	r2, r2
    bc70:	2000      	movs	r0, #0
    bc72:	5620      	ldrsb	r0, [r4, r0]
    bc74:	2300      	movs	r3, #0
    bc76:	4d12      	ldr	r5, [pc, #72]	; (bcc0 <_http_client_send_wait+0x60>)
    bc78:	47a8      	blx	r5
    bc7a:	2800      	cmp	r0, #0
    bc7c:	db16      	blt.n	bcac <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    bc7e:	2341      	movs	r3, #65	; 0x41
    bc80:	5ce3      	ldrb	r3, [r4, r3]
    bc82:	07db      	lsls	r3, r3, #31
    bc84:	d518      	bpl.n	bcb8 <_http_client_send_wait+0x58>
    bc86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    bc88:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    bc8a:	2b02      	cmp	r3, #2
    bc8c:	d917      	bls.n	bcbe <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    bc8e:	4f0d      	ldr	r7, [pc, #52]	; (bcc4 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    bc90:	4e0d      	ldr	r6, [pc, #52]	; (bcc8 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    bc92:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    bc94:	2000      	movs	r0, #0
    bc96:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    bc98:	6d60      	ldr	r0, [r4, #84]	; 0x54
    bc9a:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    bc9c:	5d63      	ldrb	r3, [r4, r5]
    bc9e:	07db      	lsls	r3, r3, #31
    bca0:	d50c      	bpl.n	bcbc <_http_client_send_wait+0x5c>
    bca2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    bca4:	2b02      	cmp	r3, #2
    bca6:	d8f5      	bhi.n	bc94 <_http_client_send_wait+0x34>
	return 0;
    bca8:	2000      	movs	r0, #0
    bcaa:	e008      	b.n	bcbe <_http_client_send_wait+0x5e>
		module->sending = 0;
    bcac:	2241      	movs	r2, #65	; 0x41
    bcae:	5ca3      	ldrb	r3, [r4, r2]
    bcb0:	2101      	movs	r1, #1
    bcb2:	438b      	bics	r3, r1
    bcb4:	54a3      	strb	r3, [r4, r2]
		return result;
    bcb6:	e002      	b.n	bcbe <_http_client_send_wait+0x5e>
	return 0;
    bcb8:	2000      	movs	r0, #0
    bcba:	e000      	b.n	bcbe <_http_client_send_wait+0x5e>
    bcbc:	2000      	movs	r0, #0
}
    bcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bcc0:	0000afbd 	.word	0x0000afbd
    bcc4:	0000921d 	.word	0x0000921d
    bcc8:	0000ce1d 	.word	0x0000ce1d

0000bccc <http_client_get_config_defaults>:
	config->port = 80;
    bccc:	2350      	movs	r3, #80	; 0x50
    bcce:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    bcd0:	2300      	movs	r3, #0
    bcd2:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    bcd4:	4a05      	ldr	r2, [pc, #20]	; (bcec <http_client_get_config_defaults+0x20>)
    bcd6:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    bcd8:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    bcda:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    bcdc:	3301      	adds	r3, #1
    bcde:	33ff      	adds	r3, #255	; 0xff
    bce0:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    bce2:	3bae      	subs	r3, #174	; 0xae
    bce4:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    bce6:	4b02      	ldr	r3, [pc, #8]	; (bcf0 <http_client_get_config_defaults+0x24>)
    bce8:	6183      	str	r3, [r0, #24]
}
    bcea:	4770      	bx	lr
    bcec:	00004e20 	.word	0x00004e20
    bcf0:	00013f38 	.word	0x00013f38

0000bcf4 <http_client_init>:
{
    bcf4:	b570      	push	{r4, r5, r6, lr}
    bcf6:	0004      	movs	r4, r0
    bcf8:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    bcfa:	2800      	cmp	r0, #0
    bcfc:	d038      	beq.n	bd70 <http_client_init+0x7c>
    bcfe:	2900      	cmp	r1, #0
    bd00:	d039      	beq.n	bd76 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    bd02:	690b      	ldr	r3, [r1, #16]
    bd04:	2b00      	cmp	r3, #0
    bd06:	d039      	beq.n	bd7c <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    bd08:	684b      	ldr	r3, [r1, #4]
    bd0a:	2b00      	cmp	r3, #0
    bd0c:	d039      	beq.n	bd82 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    bd0e:	694b      	ldr	r3, [r1, #20]
    bd10:	2b51      	cmp	r3, #81	; 0x51
    bd12:	d939      	bls.n	bd88 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    bd14:	22e8      	movs	r2, #232	; 0xe8
    bd16:	2100      	movs	r1, #0
    bd18:	4b1e      	ldr	r3, [pc, #120]	; (bd94 <http_client_init+0xa0>)
    bd1a:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    bd1c:	0020      	movs	r0, r4
    bd1e:	3050      	adds	r0, #80	; 0x50
    bd20:	221c      	movs	r2, #28
    bd22:	0029      	movs	r1, r5
    bd24:	4b1c      	ldr	r3, [pc, #112]	; (bd98 <http_client_init+0xa4>)
    bd26:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    bd28:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    bd2a:	2b00      	cmp	r3, #0
    bd2c:	d008      	beq.n	bd40 <http_client_init+0x4c>
	if (config->timeout > 0) {
    bd2e:	892b      	ldrh	r3, [r5, #8]
    bd30:	2b00      	cmp	r3, #0
    bd32:	d111      	bne.n	bd58 <http_client_init+0x64>
	module->req.state = STATE_INIT;
    bd34:	2300      	movs	r3, #0
    bd36:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    bd38:	22d8      	movs	r2, #216	; 0xd8
    bd3a:	50a3      	str	r3, [r4, r2]
	return 0;
    bd3c:	2000      	movs	r0, #0
}
    bd3e:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    bd40:	6928      	ldr	r0, [r5, #16]
    bd42:	4b16      	ldr	r3, [pc, #88]	; (bd9c <http_client_init+0xa8>)
    bd44:	4798      	blx	r3
    bd46:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    bd48:	2800      	cmp	r0, #0
    bd4a:	d020      	beq.n	bd8e <http_client_init+0x9a>
		module->alloc_buffer = 1;
    bd4c:	2241      	movs	r2, #65	; 0x41
    bd4e:	5ca3      	ldrb	r3, [r4, r2]
    bd50:	2104      	movs	r1, #4
    bd52:	430b      	orrs	r3, r1
    bd54:	54a3      	strb	r3, [r4, r2]
    bd56:	e7ea      	b.n	bd2e <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    bd58:	6868      	ldr	r0, [r5, #4]
    bd5a:	2300      	movs	r3, #0
    bd5c:	0022      	movs	r2, r4
    bd5e:	4910      	ldr	r1, [pc, #64]	; (bda0 <http_client_init+0xac>)
    bd60:	4d10      	ldr	r5, [pc, #64]	; (bda4 <http_client_init+0xb0>)
    bd62:	47a8      	blx	r5
    bd64:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    bd66:	2800      	cmp	r0, #0
    bd68:	dae4      	bge.n	bd34 <http_client_init+0x40>
			return -ENOSPC;
    bd6a:	201c      	movs	r0, #28
    bd6c:	4240      	negs	r0, r0
    bd6e:	e7e6      	b.n	bd3e <http_client_init+0x4a>
		return -EINVAL;
    bd70:	2016      	movs	r0, #22
    bd72:	4240      	negs	r0, r0
    bd74:	e7e3      	b.n	bd3e <http_client_init+0x4a>
    bd76:	2016      	movs	r0, #22
    bd78:	4240      	negs	r0, r0
    bd7a:	e7e0      	b.n	bd3e <http_client_init+0x4a>
		return -EINVAL;
    bd7c:	2016      	movs	r0, #22
    bd7e:	4240      	negs	r0, r0
    bd80:	e7dd      	b.n	bd3e <http_client_init+0x4a>
		return -EINVAL;
    bd82:	2016      	movs	r0, #22
    bd84:	4240      	negs	r0, r0
    bd86:	e7da      	b.n	bd3e <http_client_init+0x4a>
		return -EINVAL;
    bd88:	2016      	movs	r0, #22
    bd8a:	4240      	negs	r0, r0
    bd8c:	e7d7      	b.n	bd3e <http_client_init+0x4a>
			return -ENOMEM;
    bd8e:	200c      	movs	r0, #12
    bd90:	4240      	negs	r0, r0
    bd92:	e7d4      	b.n	bd3e <http_client_init+0x4a>
    bd94:	0001184f 	.word	0x0001184f
    bd98:	00011819 	.word	0x00011819
    bd9c:	000117f1 	.word	0x000117f1
    bda0:	0000beb9 	.word	0x0000beb9
    bda4:	0000cd99 	.word	0x0000cd99

0000bda8 <http_client_register_callback>:
	if (module == NULL) {
    bda8:	2800      	cmp	r0, #0
    bdaa:	d002      	beq.n	bdb2 <http_client_register_callback+0xa>
	module->cb = callback;
    bdac:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    bdae:	2000      	movs	r0, #0
}
    bdb0:	4770      	bx	lr
		return -EINVAL;
    bdb2:	2016      	movs	r0, #22
    bdb4:	4240      	negs	r0, r0
    bdb6:	e7fb      	b.n	bdb0 <http_client_register_callback+0x8>

0000bdb8 <_http_client_clear_conn>:
{
    bdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdba:	b085      	sub	sp, #20
    bdbc:	0004      	movs	r4, r0
    bdbe:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    bdc0:	23c0      	movs	r3, #192	; 0xc0
    bdc2:	58c3      	ldr	r3, [r0, r3]
    bdc4:	2b00      	cmp	r3, #0
    bdc6:	d002      	beq.n	bdce <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    bdc8:	22c4      	movs	r2, #196	; 0xc4
    bdca:	5880      	ldr	r0, [r0, r2]
    bdcc:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    bdce:	0020      	movs	r0, r4
    bdd0:	30b0      	adds	r0, #176	; 0xb0
    bdd2:	2218      	movs	r2, #24
    bdd4:	2100      	movs	r1, #0
    bdd6:	4b17      	ldr	r3, [pc, #92]	; (be34 <_http_client_clear_conn+0x7c>)
    bdd8:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    bdda:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    bddc:	2b00      	cmp	r3, #0
    bdde:	d124      	bne.n	be2a <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    bde0:	2300      	movs	r3, #0
    bde2:	56e3      	ldrsb	r3, [r4, r3]
    bde4:	009b      	lsls	r3, r3, #2
    bde6:	2500      	movs	r5, #0
    bde8:	4a13      	ldr	r2, [pc, #76]	; (be38 <_http_client_clear_conn+0x80>)
    bdea:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    bdec:	0020      	movs	r0, r4
    bdee:	306c      	adds	r0, #108	; 0x6c
    bdf0:	226c      	movs	r2, #108	; 0x6c
    bdf2:	2100      	movs	r1, #0
    bdf4:	4f0f      	ldr	r7, [pc, #60]	; (be34 <_http_client_clear_conn+0x7c>)
    bdf6:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    bdf8:	0020      	movs	r0, r4
    bdfa:	30d8      	adds	r0, #216	; 0xd8
    bdfc:	2210      	movs	r2, #16
    bdfe:	2100      	movs	r1, #0
    be00:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    be02:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    be04:	23d8      	movs	r3, #216	; 0xd8
    be06:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    be08:	2241      	movs	r2, #65	; 0x41
    be0a:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    be0c:	2101      	movs	r1, #1
    be0e:	438b      	bics	r3, r1
    be10:	3101      	adds	r1, #1
    be12:	438b      	bics	r3, r1
    be14:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    be16:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    be18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    be1a:	2b00      	cmp	r3, #0
    be1c:	d003      	beq.n	be26 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    be1e:	aa01      	add	r2, sp, #4
    be20:	3102      	adds	r1, #2
    be22:	0020      	movs	r0, r4
    be24:	4798      	blx	r3
}
    be26:	b005      	add	sp, #20
    be28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    be2a:	2000      	movs	r0, #0
    be2c:	5620      	ldrsb	r0, [r4, r0]
    be2e:	4b03      	ldr	r3, [pc, #12]	; (be3c <_http_client_clear_conn+0x84>)
    be30:	4798      	blx	r3
    be32:	e7d5      	b.n	bde0 <_http_client_clear_conn+0x28>
    be34:	0001184f 	.word	0x0001184f
    be38:	20000224 	.word	0x20000224
    be3c:	0000b0e9 	.word	0x0000b0e9

0000be40 <http_client_socket_resolve_handler>:
{
    be40:	b5f0      	push	{r4, r5, r6, r7, lr}
    be42:	b087      	sub	sp, #28
    be44:	9000      	str	r0, [sp, #0]
    be46:	9101      	str	r1, [sp, #4]
    be48:	4c17      	ldr	r4, [pc, #92]	; (bea8 <http_client_socket_resolve_handler+0x68>)
    be4a:	0026      	movs	r6, r4
    be4c:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    be4e:	4f17      	ldr	r7, [pc, #92]	; (beac <http_client_socket_resolve_handler+0x6c>)
    be50:	e015      	b.n	be7e <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    be52:	2302      	movs	r3, #2
    be54:	aa02      	add	r2, sp, #8
    be56:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    be58:	334e      	adds	r3, #78	; 0x4e
    be5a:	5aeb      	ldrh	r3, [r5, r3]
    be5c:	021a      	lsls	r2, r3, #8
    be5e:	0a1b      	lsrs	r3, r3, #8
    be60:	4313      	orrs	r3, r2
    be62:	aa02      	add	r2, sp, #8
    be64:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    be66:	9b01      	ldr	r3, [sp, #4]
    be68:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    be6a:	2000      	movs	r0, #0
    be6c:	5628      	ldrsb	r0, [r5, r0]
    be6e:	2210      	movs	r2, #16
    be70:	a902      	add	r1, sp, #8
    be72:	4b0f      	ldr	r3, [pc, #60]	; (beb0 <http_client_socket_resolve_handler+0x70>)
    be74:	4798      	blx	r3
				return;
    be76:	e015      	b.n	bea4 <http_client_socket_resolve_handler+0x64>
    be78:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    be7a:	42b4      	cmp	r4, r6
    be7c:	d012      	beq.n	bea4 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    be7e:	6825      	ldr	r5, [r4, #0]
    be80:	2d00      	cmp	r5, #0
    be82:	d0f9      	beq.n	be78 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    be84:	1c69      	adds	r1, r5, #1
    be86:	9800      	ldr	r0, [sp, #0]
    be88:	47b8      	blx	r7
    be8a:	2800      	cmp	r0, #0
    be8c:	d1f4      	bne.n	be78 <http_client_socket_resolve_handler+0x38>
    be8e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    be90:	2b01      	cmp	r3, #1
    be92:	d1f1      	bne.n	be78 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    be94:	9b01      	ldr	r3, [sp, #4]
    be96:	2b00      	cmp	r3, #0
    be98:	d1db      	bne.n	be52 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    be9a:	2176      	movs	r1, #118	; 0x76
    be9c:	4249      	negs	r1, r1
    be9e:	0028      	movs	r0, r5
    bea0:	4b04      	ldr	r3, [pc, #16]	; (beb4 <http_client_socket_resolve_handler+0x74>)
    bea2:	4798      	blx	r3
}
    bea4:	b007      	add	sp, #28
    bea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bea8:	20000224 	.word	0x20000224
    beac:	00011cb5 	.word	0x00011cb5
    beb0:	0000af2d 	.word	0x0000af2d
    beb4:	0000bdb9 	.word	0x0000bdb9

0000beb8 <http_client_timer_callback>:
{
    beb8:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    beba:	2a00      	cmp	r2, #0
    bebc:	d004      	beq.n	bec8 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    bebe:	213e      	movs	r1, #62	; 0x3e
    bec0:	4249      	negs	r1, r1
    bec2:	0010      	movs	r0, r2
    bec4:	4b01      	ldr	r3, [pc, #4]	; (becc <http_client_timer_callback+0x14>)
    bec6:	4798      	blx	r3
}
    bec8:	bd10      	pop	{r4, pc}
    beca:	46c0      	nop			; (mov r8, r8)
    becc:	0000bdb9 	.word	0x0000bdb9

0000bed0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    bed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bed2:	46de      	mov	lr, fp
    bed4:	4657      	mov	r7, sl
    bed6:	b580      	push	{r7, lr}
    bed8:	b095      	sub	sp, #84	; 0x54
    beda:	af02      	add	r7, sp, #8
    bedc:	0004      	movs	r4, r0
    bede:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    bee0:	2210      	movs	r2, #16
    bee2:	49b2      	ldr	r1, [pc, #712]	; (c1ac <_http_client_request+0x2dc>)
    bee4:	2310      	movs	r3, #16
    bee6:	2008      	movs	r0, #8
    bee8:	1838      	adds	r0, r7, r0
    beea:	18c0      	adds	r0, r0, r3
    beec:	4bb0      	ldr	r3, [pc, #704]	; (c1b0 <_http_client_request+0x2e0>)
    beee:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    bef0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    bef2:	1dd3      	adds	r3, r2, #7
    bef4:	08db      	lsrs	r3, r3, #3
    bef6:	00db      	lsls	r3, r3, #3
    bef8:	4669      	mov	r1, sp
    befa:	1acb      	subs	r3, r1, r3
    befc:	469d      	mov	sp, r3
    befe:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    bf00:	2c00      	cmp	r4, #0
    bf02:	d100      	bne.n	bf06 <_http_client_request+0x36>
    bf04:	e1f1      	b.n	c2ea <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    bf06:	2341      	movs	r3, #65	; 0x41
    bf08:	5ce3      	ldrb	r3, [r4, r3]
    bf0a:	07db      	lsls	r3, r3, #31
    bf0c:	d500      	bpl.n	bf10 <_http_client_request+0x40>
    bf0e:	e1ec      	b.n	c2ea <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    bf10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    bf12:	2b03      	cmp	r3, #3
    bf14:	d004      	beq.n	bf20 <_http_client_request+0x50>
    bf16:	2b04      	cmp	r3, #4
    bf18:	d100      	bne.n	bf1c <_http_client_request+0x4c>
    bf1a:	e120      	b.n	c15e <_http_client_request+0x28e>
    bf1c:	46dd      	mov	sp, fp
    bf1e:	e1e5      	b.n	c2ec <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    bf20:	2300      	movs	r3, #0
    bf22:	21cc      	movs	r1, #204	; 0xcc
    bf24:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    bf26:	3104      	adds	r1, #4
    bf28:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    bf2a:	9400      	str	r4, [sp, #0]
    bf2c:	4ba1      	ldr	r3, [pc, #644]	; (c1b4 <_http_client_request+0x2e4>)
    bf2e:	0031      	movs	r1, r6
    bf30:	202c      	movs	r0, #44	; 0x2c
    bf32:	2508      	movs	r5, #8
    bf34:	46ac      	mov	ip, r5
    bf36:	44bc      	add	ip, r7
    bf38:	4460      	add	r0, ip
    bf3a:	4d9f      	ldr	r5, [pc, #636]	; (c1b8 <_http_client_request+0x2e8>)
    bf3c:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    bf3e:	23c8      	movs	r3, #200	; 0xc8
    bf40:	5ce3      	ldrb	r3, [r4, r3]
    bf42:	2b01      	cmp	r3, #1
    bf44:	d100      	bne.n	bf48 <_http_client_request+0x78>
    bf46:	e0a9      	b.n	c09c <_http_client_request+0x1cc>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    bf48:	2b02      	cmp	r3, #2
    bf4a:	d100      	bne.n	bf4e <_http_client_request+0x7e>
    bf4c:	e0af      	b.n	c0ae <_http_client_request+0x1de>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    bf4e:	2b03      	cmp	r3, #3
    bf50:	d100      	bne.n	bf54 <_http_client_request+0x84>
    bf52:	e0b5      	b.n	c0c0 <_http_client_request+0x1f0>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    bf54:	2b04      	cmp	r3, #4
    bf56:	d100      	bne.n	bf5a <_http_client_request+0x8a>
    bf58:	e0bb      	b.n	c0d2 <_http_client_request+0x202>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    bf5a:	2b05      	cmp	r3, #5
    bf5c:	d100      	bne.n	bf60 <_http_client_request+0x90>
    bf5e:	e0c1      	b.n	c0e4 <_http_client_request+0x214>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    bf60:	2b06      	cmp	r3, #6
    bf62:	d100      	bne.n	bf66 <_http_client_request+0x96>
    bf64:	e0c7      	b.n	c0f6 <_http_client_request+0x226>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    bf66:	0025      	movs	r5, r4
    bf68:	3570      	adds	r5, #112	; 0x70
    bf6a:	0028      	movs	r0, r5
    bf6c:	4b93      	ldr	r3, [pc, #588]	; (c1bc <_http_client_request+0x2ec>)
    bf6e:	469a      	mov	sl, r3
    bf70:	4798      	blx	r3
    bf72:	0002      	movs	r2, r0
    bf74:	0029      	movs	r1, r5
    bf76:	232c      	movs	r3, #44	; 0x2c
    bf78:	2008      	movs	r0, #8
    bf7a:	1838      	adds	r0, r7, r0
    bf7c:	18c0      	adds	r0, r0, r3
    bf7e:	4d90      	ldr	r5, [pc, #576]	; (c1c0 <_http_client_request+0x2f0>)
    bf80:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    bf82:	220b      	movs	r2, #11
    bf84:	498f      	ldr	r1, [pc, #572]	; (c1c4 <_http_client_request+0x2f4>)
    bf86:	232c      	movs	r3, #44	; 0x2c
    bf88:	2008      	movs	r0, #8
    bf8a:	1838      	adds	r0, r7, r0
    bf8c:	18c0      	adds	r0, r0, r3
    bf8e:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    bf90:	220c      	movs	r2, #12
    bf92:	498d      	ldr	r1, [pc, #564]	; (c1c8 <_http_client_request+0x2f8>)
    bf94:	232c      	movs	r3, #44	; 0x2c
    bf96:	2008      	movs	r0, #8
    bf98:	1838      	adds	r0, r7, r0
    bf9a:	18c0      	adds	r0, r0, r3
    bf9c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    bf9e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    bfa0:	607b      	str	r3, [r7, #4]
    bfa2:	0018      	movs	r0, r3
    bfa4:	47d0      	blx	sl
    bfa6:	0002      	movs	r2, r0
    bfa8:	6879      	ldr	r1, [r7, #4]
    bfaa:	232c      	movs	r3, #44	; 0x2c
    bfac:	2008      	movs	r0, #8
    bfae:	1838      	adds	r0, r7, r0
    bfb0:	18c0      	adds	r0, r0, r3
    bfb2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    bfb4:	2202      	movs	r2, #2
    bfb6:	4985      	ldr	r1, [pc, #532]	; (c1cc <_http_client_request+0x2fc>)
    bfb8:	232c      	movs	r3, #44	; 0x2c
    bfba:	2008      	movs	r0, #8
    bfbc:	1838      	adds	r0, r7, r0
    bfbe:	18c0      	adds	r0, r0, r3
    bfc0:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    bfc2:	2206      	movs	r2, #6
    bfc4:	4982      	ldr	r1, [pc, #520]	; (c1d0 <_http_client_request+0x300>)
    bfc6:	232c      	movs	r3, #44	; 0x2c
    bfc8:	2008      	movs	r0, #8
    bfca:	1838      	adds	r0, r7, r0
    bfcc:	18c0      	adds	r0, r0, r3
    bfce:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    bfd0:	1c63      	adds	r3, r4, #1
    bfd2:	607b      	str	r3, [r7, #4]
    bfd4:	0018      	movs	r0, r3
    bfd6:	47d0      	blx	sl
    bfd8:	0002      	movs	r2, r0
    bfda:	6879      	ldr	r1, [r7, #4]
    bfdc:	232c      	movs	r3, #44	; 0x2c
    bfde:	2008      	movs	r0, #8
    bfe0:	1838      	adds	r0, r7, r0
    bfe2:	18c0      	adds	r0, r0, r3
    bfe4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    bfe6:	2202      	movs	r2, #2
    bfe8:	4978      	ldr	r1, [pc, #480]	; (c1cc <_http_client_request+0x2fc>)
    bfea:	232c      	movs	r3, #44	; 0x2c
    bfec:	2008      	movs	r0, #8
    bfee:	1838      	adds	r0, r7, r0
    bff0:	18c0      	adds	r0, r0, r3
    bff2:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    bff4:	2218      	movs	r2, #24
    bff6:	4977      	ldr	r1, [pc, #476]	; (c1d4 <_http_client_request+0x304>)
    bff8:	232c      	movs	r3, #44	; 0x2c
    bffa:	2008      	movs	r0, #8
    bffc:	1838      	adds	r0, r7, r0
    bffe:	18c0      	adds	r0, r0, r3
    c000:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    c002:	2213      	movs	r2, #19
    c004:	4974      	ldr	r1, [pc, #464]	; (c1d8 <_http_client_request+0x308>)
    c006:	232c      	movs	r3, #44	; 0x2c
    c008:	2008      	movs	r0, #8
    c00a:	1838      	adds	r0, r7, r0
    c00c:	18c0      	adds	r0, r0, r3
    c00e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    c010:	2217      	movs	r2, #23
    c012:	4972      	ldr	r1, [pc, #456]	; (c1dc <_http_client_request+0x30c>)
    c014:	232c      	movs	r3, #44	; 0x2c
    c016:	2008      	movs	r0, #8
    c018:	1838      	adds	r0, r7, r0
    c01a:	18c0      	adds	r0, r0, r3
    c01c:	47a8      	blx	r5

		if (entity->read != NULL) {
    c01e:	0023      	movs	r3, r4
    c020:	33b0      	adds	r3, #176	; 0xb0
    c022:	68db      	ldr	r3, [r3, #12]
    c024:	2b00      	cmp	r3, #0
    c026:	d07b      	beq.n	c120 <_http_client_request+0x250>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    c028:	23b0      	movs	r3, #176	; 0xb0
    c02a:	5ce3      	ldrb	r3, [r4, r3]
    c02c:	2b00      	cmp	r3, #0
    c02e:	d16b      	bne.n	c108 <_http_client_request+0x238>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    c030:	0023      	movs	r3, r4
    c032:	33b0      	adds	r3, #176	; 0xb0
    c034:	689b      	ldr	r3, [r3, #8]
    c036:	2b00      	cmp	r3, #0
    c038:	d072      	beq.n	c120 <_http_client_request+0x250>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    c03a:	0022      	movs	r2, r4
    c03c:	32b0      	adds	r2, #176	; 0xb0
    c03e:	6950      	ldr	r0, [r2, #20]
    c040:	4798      	blx	r3
    c042:	23cc      	movs	r3, #204	; 0xcc
    c044:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    c046:	2800      	cmp	r0, #0
    c048:	da00      	bge.n	c04c <_http_client_request+0x17c>
    c04a:	e0ac      	b.n	c1a6 <_http_client_request+0x2d6>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    c04c:	0002      	movs	r2, r0
    c04e:	4964      	ldr	r1, [pc, #400]	; (c1e0 <_http_client_request+0x310>)
    c050:	2320      	movs	r3, #32
    c052:	2008      	movs	r0, #8
    c054:	1838      	adds	r0, r7, r0
    c056:	18c0      	adds	r0, r0, r3
    c058:	4b62      	ldr	r3, [pc, #392]	; (c1e4 <_http_client_request+0x314>)
    c05a:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    c05c:	2210      	movs	r2, #16
    c05e:	4962      	ldr	r1, [pc, #392]	; (c1e8 <_http_client_request+0x318>)
    c060:	232c      	movs	r3, #44	; 0x2c
    c062:	2008      	movs	r0, #8
    c064:	1838      	adds	r0, r7, r0
    c066:	18c0      	adds	r0, r0, r3
    c068:	4d55      	ldr	r5, [pc, #340]	; (c1c0 <_http_client_request+0x2f0>)
    c06a:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    c06c:	2320      	movs	r3, #32
    c06e:	2208      	movs	r2, #8
    c070:	18ba      	adds	r2, r7, r2
    c072:	18d0      	adds	r0, r2, r3
    c074:	4b51      	ldr	r3, [pc, #324]	; (c1bc <_http_client_request+0x2ec>)
    c076:	4798      	blx	r3
    c078:	0002      	movs	r2, r0
    c07a:	2320      	movs	r3, #32
    c07c:	2108      	movs	r1, #8
    c07e:	1879      	adds	r1, r7, r1
    c080:	18c9      	adds	r1, r1, r3
    c082:	330c      	adds	r3, #12
    c084:	2008      	movs	r0, #8
    c086:	1838      	adds	r0, r7, r0
    c088:	18c0      	adds	r0, r0, r3
    c08a:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    c08c:	2202      	movs	r2, #2
    c08e:	494f      	ldr	r1, [pc, #316]	; (c1cc <_http_client_request+0x2fc>)
    c090:	232c      	movs	r3, #44	; 0x2c
    c092:	2008      	movs	r0, #8
    c094:	1838      	adds	r0, r7, r0
    c096:	18c0      	adds	r0, r0, r3
    c098:	47a8      	blx	r5
    c09a:	e041      	b.n	c120 <_http_client_request+0x250>
			stream_writer_send_buffer(&writer, "GET ", 4);
    c09c:	2204      	movs	r2, #4
    c09e:	4953      	ldr	r1, [pc, #332]	; (c1ec <_http_client_request+0x31c>)
    c0a0:	332b      	adds	r3, #43	; 0x2b
    c0a2:	2008      	movs	r0, #8
    c0a4:	1838      	adds	r0, r7, r0
    c0a6:	18c0      	adds	r0, r0, r3
    c0a8:	4b45      	ldr	r3, [pc, #276]	; (c1c0 <_http_client_request+0x2f0>)
    c0aa:	4798      	blx	r3
    c0ac:	e75b      	b.n	bf66 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "POST ", 5);
    c0ae:	2205      	movs	r2, #5
    c0b0:	494f      	ldr	r1, [pc, #316]	; (c1f0 <_http_client_request+0x320>)
    c0b2:	332a      	adds	r3, #42	; 0x2a
    c0b4:	2008      	movs	r0, #8
    c0b6:	1838      	adds	r0, r7, r0
    c0b8:	18c0      	adds	r0, r0, r3
    c0ba:	4b41      	ldr	r3, [pc, #260]	; (c1c0 <_http_client_request+0x2f0>)
    c0bc:	4798      	blx	r3
    c0be:	e752      	b.n	bf66 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    c0c0:	2207      	movs	r2, #7
    c0c2:	494c      	ldr	r1, [pc, #304]	; (c1f4 <_http_client_request+0x324>)
    c0c4:	3329      	adds	r3, #41	; 0x29
    c0c6:	2008      	movs	r0, #8
    c0c8:	1838      	adds	r0, r7, r0
    c0ca:	18c0      	adds	r0, r0, r3
    c0cc:	4b3c      	ldr	r3, [pc, #240]	; (c1c0 <_http_client_request+0x2f0>)
    c0ce:	4798      	blx	r3
    c0d0:	e749      	b.n	bf66 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    c0d2:	2204      	movs	r2, #4
    c0d4:	4948      	ldr	r1, [pc, #288]	; (c1f8 <_http_client_request+0x328>)
    c0d6:	3328      	adds	r3, #40	; 0x28
    c0d8:	2008      	movs	r0, #8
    c0da:	1838      	adds	r0, r7, r0
    c0dc:	18c0      	adds	r0, r0, r3
    c0de:	4b38      	ldr	r3, [pc, #224]	; (c1c0 <_http_client_request+0x2f0>)
    c0e0:	4798      	blx	r3
    c0e2:	e740      	b.n	bf66 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    c0e4:	2208      	movs	r2, #8
    c0e6:	4945      	ldr	r1, [pc, #276]	; (c1fc <_http_client_request+0x32c>)
    c0e8:	3327      	adds	r3, #39	; 0x27
    c0ea:	2008      	movs	r0, #8
    c0ec:	1838      	adds	r0, r7, r0
    c0ee:	18c0      	adds	r0, r0, r3
    c0f0:	4b33      	ldr	r3, [pc, #204]	; (c1c0 <_http_client_request+0x2f0>)
    c0f2:	4798      	blx	r3
    c0f4:	e737      	b.n	bf66 <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    c0f6:	2205      	movs	r2, #5
    c0f8:	4941      	ldr	r1, [pc, #260]	; (c200 <_http_client_request+0x330>)
    c0fa:	3326      	adds	r3, #38	; 0x26
    c0fc:	2008      	movs	r0, #8
    c0fe:	1838      	adds	r0, r7, r0
    c100:	18c0      	adds	r0, r0, r3
    c102:	4b2f      	ldr	r3, [pc, #188]	; (c1c0 <_http_client_request+0x2f0>)
    c104:	4798      	blx	r3
    c106:	e72e      	b.n	bf66 <_http_client_request+0x96>
				module->req.content_length = -1;
    c108:	2201      	movs	r2, #1
    c10a:	4252      	negs	r2, r2
    c10c:	23cc      	movs	r3, #204	; 0xcc
    c10e:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    c110:	321d      	adds	r2, #29
    c112:	493c      	ldr	r1, [pc, #240]	; (c204 <_http_client_request+0x334>)
    c114:	3ba0      	subs	r3, #160	; 0xa0
    c116:	2008      	movs	r0, #8
    c118:	1838      	adds	r0, r7, r0
    c11a:	18c0      	adds	r0, r0, r3
    c11c:	4b28      	ldr	r3, [pc, #160]	; (c1c0 <_http_client_request+0x2f0>)
    c11e:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    c120:	23d4      	movs	r3, #212	; 0xd4
    c122:	58e5      	ldr	r5, [r4, r3]
    c124:	2d00      	cmp	r5, #0
    c126:	d00a      	beq.n	c13e <_http_client_request+0x26e>
			stream_writer_send_buffer(&writer,
    c128:	0028      	movs	r0, r5
    c12a:	4b24      	ldr	r3, [pc, #144]	; (c1bc <_http_client_request+0x2ec>)
    c12c:	4798      	blx	r3
    c12e:	0002      	movs	r2, r0
    c130:	0029      	movs	r1, r5
    c132:	232c      	movs	r3, #44	; 0x2c
    c134:	2008      	movs	r0, #8
    c136:	1838      	adds	r0, r7, r0
    c138:	18c0      	adds	r0, r0, r3
    c13a:	4b21      	ldr	r3, [pc, #132]	; (c1c0 <_http_client_request+0x2f0>)
    c13c:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    c13e:	2202      	movs	r2, #2
    c140:	4922      	ldr	r1, [pc, #136]	; (c1cc <_http_client_request+0x2fc>)
    c142:	232c      	movs	r3, #44	; 0x2c
    c144:	2008      	movs	r0, #8
    c146:	1838      	adds	r0, r7, r0
    c148:	18c0      	adds	r0, r0, r3
    c14a:	4b1d      	ldr	r3, [pc, #116]	; (c1c0 <_http_client_request+0x2f0>)
    c14c:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    c14e:	232c      	movs	r3, #44	; 0x2c
    c150:	2208      	movs	r2, #8
    c152:	18ba      	adds	r2, r7, r2
    c154:	18d0      	adds	r0, r2, r3
    c156:	4b2c      	ldr	r3, [pc, #176]	; (c208 <_http_client_request+0x338>)
    c158:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    c15a:	2304      	movs	r3, #4
    c15c:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    c15e:	23cc      	movs	r3, #204	; 0xcc
    c160:	58e2      	ldr	r2, [r4, r3]
    c162:	2a00      	cmp	r2, #0
    c164:	db52      	blt.n	c20c <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    c166:	dc00      	bgt.n	c16a <_http_client_request+0x29a>
    c168:	e0f1      	b.n	c34e <_http_client_request+0x47e>
    c16a:	0023      	movs	r3, r4
    c16c:	33b0      	adds	r3, #176	; 0xb0
    c16e:	68dd      	ldr	r5, [r3, #12]
    c170:	2d00      	cmp	r5, #0
    c172:	d100      	bne.n	c176 <_http_client_request+0x2a6>
    c174:	e0eb      	b.n	c34e <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    c176:	23d0      	movs	r3, #208	; 0xd0
    c178:	58e3      	ldr	r3, [r4, r3]
    c17a:	429a      	cmp	r2, r3
    c17c:	dd00      	ble.n	c180 <_http_client_request+0x2b0>
    c17e:	e0bb      	b.n	c2f8 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    c180:	23c0      	movs	r3, #192	; 0xc0
    c182:	58e3      	ldr	r3, [r4, r3]
    c184:	2b00      	cmp	r3, #0
    c186:	d002      	beq.n	c18e <_http_client_request+0x2be>
					module->req.entity.close(module->req.entity.priv_data);
    c188:	22c4      	movs	r2, #196	; 0xc4
    c18a:	58a0      	ldr	r0, [r4, r2]
    c18c:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    c18e:	2302      	movs	r3, #2
    c190:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    c192:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c194:	2b00      	cmp	r3, #0
    c196:	d100      	bne.n	c19a <_http_client_request+0x2ca>
    c198:	e6c0      	b.n	bf1c <_http_client_request+0x4c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    c19a:	220c      	movs	r2, #12
    c19c:	18ba      	adds	r2, r7, r2
    c19e:	2101      	movs	r1, #1
    c1a0:	0020      	movs	r0, r4
    c1a2:	4798      	blx	r3
    c1a4:	e6ba      	b.n	bf1c <_http_client_request+0x4c>
					module->req.content_length = 0;
    c1a6:	2200      	movs	r2, #0
    c1a8:	50e2      	str	r2, [r4, r3]
    c1aa:	e7b9      	b.n	c120 <_http_client_request+0x250>
    c1ac:	00013e20 	.word	0x00013e20
    c1b0:	00011819 	.word	0x00011819
    c1b4:	0000bc61 	.word	0x0000bc61
    c1b8:	0000cc2d 	.word	0x0000cc2d
    c1bc:	00011d13 	.word	0x00011d13
    c1c0:	0000cc99 	.word	0x0000cc99
    c1c4:	00013e94 	.word	0x00013e94
    c1c8:	00013ea0 	.word	0x00013ea0
    c1cc:	0001446c 	.word	0x0001446c
    c1d0:	00013eb0 	.word	0x00013eb0
    c1d4:	00013eb8 	.word	0x00013eb8
    c1d8:	00013ed4 	.word	0x00013ed4
    c1dc:	00013ee8 	.word	0x00013ee8
    c1e0:	00013f20 	.word	0x00013f20
    c1e4:	00011c71 	.word	0x00011c71
    c1e8:	00013f24 	.word	0x00013f24
    c1ec:	00013e60 	.word	0x00013e60
    c1f0:	00013e68 	.word	0x00013e68
    c1f4:	00013e70 	.word	0x00013e70
    c1f8:	00013e78 	.word	0x00013e78
    c1fc:	00013e80 	.word	0x00013e80
    c200:	00013e8c 	.word	0x00013e8c
    c204:	00013f00 	.word	0x00013f00
    c208:	0000cc3d 	.word	0x0000cc3d
		if (module->req.content_length < 0 && entity->read) {
    c20c:	0023      	movs	r3, r4
    c20e:	33b0      	adds	r3, #176	; 0xb0
    c210:	68dd      	ldr	r5, [r3, #12]
    c212:	2d00      	cmp	r5, #0
    c214:	d100      	bne.n	c218 <_http_client_request+0x348>
    c216:	e09a      	b.n	c34e <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    c218:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    c21a:	58e3      	ldr	r3, [r4, r3]
    c21c:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c21e:	3a07      	subs	r2, #7
    c220:	1d71      	adds	r1, r6, #5
    c222:	0020      	movs	r0, r4
    c224:	30b0      	adds	r0, #176	; 0xb0
    c226:	6940      	ldr	r0, [r0, #20]
    c228:	47a8      	blx	r5
    c22a:	0005      	movs	r5, r0
    c22c:	43c3      	mvns	r3, r0
    c22e:	17db      	asrs	r3, r3, #31
    c230:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    c232:	220a      	movs	r2, #10
    c234:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    c236:	210d      	movs	r1, #13
    c238:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    c23a:	1973      	adds	r3, r6, r5
    c23c:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    c23e:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    c240:	230f      	movs	r3, #15
    c242:	402b      	ands	r3, r5
    c244:	3206      	adds	r2, #6
    c246:	3905      	subs	r1, #5
    c248:	468c      	mov	ip, r1
    c24a:	44bc      	add	ip, r7
    c24c:	4462      	add	r2, ip
    c24e:	5cd3      	ldrb	r3, [r2, r3]
    c250:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    c252:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    c254:	2d0f      	cmp	r5, #15
    c256:	dd0d      	ble.n	c274 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    c258:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    c25a:	17eb      	asrs	r3, r5, #31
    c25c:	220f      	movs	r2, #15
    c25e:	4013      	ands	r3, r2
    c260:	195b      	adds	r3, r3, r5
    c262:	111b      	asrs	r3, r3, #4
    c264:	4013      	ands	r3, r2
    c266:	3201      	adds	r2, #1
    c268:	2008      	movs	r0, #8
    c26a:	4684      	mov	ip, r0
    c26c:	44bc      	add	ip, r7
    c26e:	4462      	add	r2, ip
    c270:	5cd3      	ldrb	r3, [r2, r3]
    c272:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    c274:	2dff      	cmp	r5, #255	; 0xff
    c276:	dd0d      	ble.n	c294 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    c278:	17ea      	asrs	r2, r5, #31
    c27a:	23ff      	movs	r3, #255	; 0xff
    c27c:	4013      	ands	r3, r2
    c27e:	195b      	adds	r3, r3, r5
    c280:	051b      	lsls	r3, r3, #20
    c282:	0f1b      	lsrs	r3, r3, #28
    c284:	2210      	movs	r2, #16
    c286:	2108      	movs	r1, #8
    c288:	468c      	mov	ip, r1
    c28a:	44bc      	add	ip, r7
    c28c:	4462      	add	r2, ip
    c28e:	5cd3      	ldrb	r3, [r2, r3]
    c290:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    c292:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    c294:	1cca      	adds	r2, r1, #3
    c296:	1b92      	subs	r2, r2, r6
    c298:	1d2b      	adds	r3, r5, #4
    c29a:	18d2      	adds	r2, r2, r3
    c29c:	b292      	uxth	r2, r2
    c29e:	2000      	movs	r0, #0
    c2a0:	5620      	ldrsb	r0, [r4, r0]
    c2a2:	2300      	movs	r3, #0
    c2a4:	4e30      	ldr	r6, [pc, #192]	; (c368 <_http_client_request+0x498>)
    c2a6:	47b0      	blx	r6
    c2a8:	2800      	cmp	r0, #0
    c2aa:	db19      	blt.n	c2e0 <_http_client_request+0x410>
			module->req.sent_length += size;
    c2ac:	22d0      	movs	r2, #208	; 0xd0
    c2ae:	58a3      	ldr	r3, [r4, r2]
    c2b0:	195b      	adds	r3, r3, r5
    c2b2:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    c2b4:	2d00      	cmp	r5, #0
    c2b6:	d000      	beq.n	c2ba <_http_client_request+0x3ea>
    c2b8:	e630      	b.n	bf1c <_http_client_request+0x4c>
				if (module->req.entity.close) {
    c2ba:	23c0      	movs	r3, #192	; 0xc0
    c2bc:	58e3      	ldr	r3, [r4, r3]
    c2be:	2b00      	cmp	r3, #0
    c2c0:	d002      	beq.n	c2c8 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    c2c2:	3a0c      	subs	r2, #12
    c2c4:	58a0      	ldr	r0, [r4, r2]
    c2c6:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    c2c8:	2302      	movs	r3, #2
    c2ca:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    c2cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c2ce:	2b00      	cmp	r3, #0
    c2d0:	d100      	bne.n	c2d4 <_http_client_request+0x404>
    c2d2:	e623      	b.n	bf1c <_http_client_request+0x4c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    c2d4:	220c      	movs	r2, #12
    c2d6:	18ba      	adds	r2, r7, r2
    c2d8:	2101      	movs	r1, #1
    c2da:	0020      	movs	r0, r4
    c2dc:	4798      	blx	r3
    c2de:	e61d      	b.n	bf1c <_http_client_request+0x4c>
				_http_client_clear_conn(module, -EIO);
    c2e0:	2105      	movs	r1, #5
    c2e2:	4249      	negs	r1, r1
    c2e4:	0020      	movs	r0, r4
    c2e6:	4b21      	ldr	r3, [pc, #132]	; (c36c <_http_client_request+0x49c>)
    c2e8:	4798      	blx	r3
    c2ea:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    c2ec:	46bd      	mov	sp, r7
    c2ee:	b013      	add	sp, #76	; 0x4c
    c2f0:	bc0c      	pop	{r2, r3}
    c2f2:	4692      	mov	sl, r2
    c2f4:	469b      	mov	fp, r3
    c2f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    c2f8:	0022      	movs	r2, r4
    c2fa:	32b0      	adds	r2, #176	; 0xb0
    c2fc:	6950      	ldr	r0, [r2, #20]
    c2fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
    c300:	0031      	movs	r1, r6
    c302:	47a8      	blx	r5
			if (size < 0) {
    c304:	2800      	cmp	r0, #0
    c306:	db16      	blt.n	c336 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    c308:	23cc      	movs	r3, #204	; 0xcc
    c30a:	58e5      	ldr	r5, [r4, r3]
    c30c:	3304      	adds	r3, #4
    c30e:	58e3      	ldr	r3, [r4, r3]
    c310:	1aed      	subs	r5, r5, r3
    c312:	4285      	cmp	r5, r0
    c314:	dd00      	ble.n	c318 <_http_client_request+0x448>
    c316:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    c318:	b2aa      	uxth	r2, r5
    c31a:	2000      	movs	r0, #0
    c31c:	5620      	ldrsb	r0, [r4, r0]
    c31e:	2300      	movs	r3, #0
    c320:	0031      	movs	r1, r6
    c322:	4e11      	ldr	r6, [pc, #68]	; (c368 <_http_client_request+0x498>)
    c324:	47b0      	blx	r6
    c326:	2800      	cmp	r0, #0
    c328:	db0b      	blt.n	c342 <_http_client_request+0x472>
				module->req.sent_length += size;
    c32a:	23d0      	movs	r3, #208	; 0xd0
    c32c:	58e2      	ldr	r2, [r4, r3]
    c32e:	4694      	mov	ip, r2
    c330:	4465      	add	r5, ip
    c332:	50e5      	str	r5, [r4, r3]
    c334:	e5f2      	b.n	bf1c <_http_client_request+0x4c>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    c336:	2105      	movs	r1, #5
    c338:	4249      	negs	r1, r1
    c33a:	0020      	movs	r0, r4
    c33c:	4b0b      	ldr	r3, [pc, #44]	; (c36c <_http_client_request+0x49c>)
    c33e:	4798      	blx	r3
    c340:	e5ec      	b.n	bf1c <_http_client_request+0x4c>
					_http_client_clear_conn(module, -EIO);
    c342:	2105      	movs	r1, #5
    c344:	4249      	negs	r1, r1
    c346:	0020      	movs	r0, r4
    c348:	4b08      	ldr	r3, [pc, #32]	; (c36c <_http_client_request+0x49c>)
    c34a:	4798      	blx	r3
					return;
    c34c:	e7cd      	b.n	c2ea <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    c34e:	2302      	movs	r3, #2
    c350:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    c352:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c354:	2b00      	cmp	r3, #0
    c356:	d100      	bne.n	c35a <_http_client_request+0x48a>
    c358:	e5e0      	b.n	bf1c <_http_client_request+0x4c>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    c35a:	220c      	movs	r2, #12
    c35c:	18ba      	adds	r2, r7, r2
    c35e:	2101      	movs	r1, #1
    c360:	0020      	movs	r0, r4
    c362:	4798      	blx	r3
    c364:	e5da      	b.n	bf1c <_http_client_request+0x4c>
    c366:	46c0      	nop			; (mov r8, r8)
    c368:	0000afbd 	.word	0x0000afbd
    c36c:	0000bdb9 	.word	0x0000bdb9

0000c370 <http_client_send_request>:
{
    c370:	b5f0      	push	{r4, r5, r6, r7, lr}
    c372:	46d6      	mov	lr, sl
    c374:	b500      	push	{lr}
    c376:	b088      	sub	sp, #32
    c378:	0004      	movs	r4, r0
    c37a:	000f      	movs	r7, r1
    c37c:	4692      	mov	sl, r2
    c37e:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    c380:	2800      	cmp	r0, #0
    c382:	d100      	bne.n	c386 <http_client_send_request+0x16>
    c384:	e0d3      	b.n	c52e <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    c386:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    c388:	2b02      	cmp	r3, #2
    c38a:	d900      	bls.n	c38e <http_client_send_request+0x1e>
    c38c:	e0d3      	b.n	c536 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    c38e:	2207      	movs	r2, #7
    c390:	4981      	ldr	r1, [pc, #516]	; (c598 <http_client_send_request+0x228>)
    c392:	0038      	movs	r0, r7
    c394:	4b81      	ldr	r3, [pc, #516]	; (c59c <http_client_send_request+0x22c>)
    c396:	4798      	blx	r3
		i = 7;
    c398:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    c39a:	2800      	cmp	r0, #0
    c39c:	d007      	beq.n	c3ae <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    c39e:	2208      	movs	r2, #8
    c3a0:	497f      	ldr	r1, [pc, #508]	; (c5a0 <http_client_send_request+0x230>)
    c3a2:	0038      	movs	r0, r7
    c3a4:	4b7d      	ldr	r3, [pc, #500]	; (c59c <http_client_send_request+0x22c>)
    c3a6:	4798      	blx	r3
		i = 8;
    c3a8:	4246      	negs	r6, r0
    c3aa:	4146      	adcs	r6, r0
    c3ac:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    c3ae:	1c63      	adds	r3, r4, #1
    c3b0:	19bd      	adds	r5, r7, r6
    c3b2:	9302      	str	r3, [sp, #8]
    c3b4:	0018      	movs	r0, r3
    c3b6:	4b7b      	ldr	r3, [pc, #492]	; (c5a4 <http_client_send_request+0x234>)
    c3b8:	4798      	blx	r3
    c3ba:	0002      	movs	r2, r0
    c3bc:	0029      	movs	r1, r5
    c3be:	9802      	ldr	r0, [sp, #8]
    c3c0:	4b76      	ldr	r3, [pc, #472]	; (c59c <http_client_send_request+0x22c>)
    c3c2:	4798      	blx	r3
    c3c4:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    c3c6:	782b      	ldrb	r3, [r5, #0]
    c3c8:	2b00      	cmp	r3, #0
    c3ca:	d052      	beq.n	c472 <http_client_send_request+0x102>
    c3cc:	2b2f      	cmp	r3, #47	; 0x2f
    c3ce:	d052      	beq.n	c476 <http_client_send_request+0x106>
    c3d0:	1c71      	adds	r1, r6, #1
    c3d2:	1879      	adds	r1, r7, r1
    c3d4:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    c3d6:	3201      	adds	r2, #1
    c3d8:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    c3da:	000d      	movs	r5, r1
    c3dc:	780b      	ldrb	r3, [r1, #0]
    c3de:	2b00      	cmp	r3, #0
    c3e0:	d002      	beq.n	c3e8 <http_client_send_request+0x78>
    c3e2:	3101      	adds	r1, #1
    c3e4:	2b2f      	cmp	r3, #47	; 0x2f
    c3e6:	d1f6      	bne.n	c3d6 <http_client_send_request+0x66>
	module->host[j] = '\0';
    c3e8:	18a2      	adds	r2, r4, r2
    c3ea:	2300      	movs	r3, #0
    c3ec:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    c3ee:	7863      	ldrb	r3, [r4, #1]
    c3f0:	2b00      	cmp	r3, #0
    c3f2:	d100      	bne.n	c3f6 <http_client_send_request+0x86>
    c3f4:	e0a3      	b.n	c53e <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    c3f6:	0028      	movs	r0, r5
    c3f8:	4b6a      	ldr	r3, [pc, #424]	; (c5a4 <http_client_send_request+0x234>)
    c3fa:	4798      	blx	r3
    c3fc:	283f      	cmp	r0, #63	; 0x3f
    c3fe:	d900      	bls.n	c402 <http_client_send_request+0x92>
    c400:	e0a1      	b.n	c546 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    c402:	23d4      	movs	r3, #212	; 0xd4
    c404:	58e0      	ldr	r0, [r4, r3]
    c406:	2800      	cmp	r0, #0
    c408:	d001      	beq.n	c40e <http_client_send_request+0x9e>
		free(module->req.ext_header);
    c40a:	4b67      	ldr	r3, [pc, #412]	; (c5a8 <http_client_send_request+0x238>)
    c40c:	4798      	blx	r3
	if (ext_header != NULL) {
    c40e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c410:	2b00      	cmp	r3, #0
    c412:	d032      	beq.n	c47a <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    c414:	0018      	movs	r0, r3
    c416:	4b65      	ldr	r3, [pc, #404]	; (c5ac <http_client_send_request+0x23c>)
    c418:	4798      	blx	r3
    c41a:	23d4      	movs	r3, #212	; 0xd4
    c41c:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    c41e:	2800      	cmp	r0, #0
    c420:	d100      	bne.n	c424 <http_client_send_request+0xb4>
    c422:	e094      	b.n	c54e <http_client_send_request+0x1de>
	module->sending = 0;
    c424:	2241      	movs	r2, #65	; 0x41
    c426:	5ca3      	ldrb	r3, [r4, r2]
    c428:	2101      	movs	r1, #1
    c42a:	438b      	bics	r3, r1
    c42c:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    c42e:	2300      	movs	r3, #0
    c430:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    c432:	782b      	ldrb	r3, [r5, #0]
    c434:	2b2f      	cmp	r3, #47	; 0x2f
    c436:	d024      	beq.n	c482 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    c438:	222f      	movs	r2, #47	; 0x2f
    c43a:	2370      	movs	r3, #112	; 0x70
    c43c:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    c43e:	782b      	ldrb	r3, [r5, #0]
    c440:	2b00      	cmp	r3, #0
    c442:	d124      	bne.n	c48e <http_client_send_request+0x11e>
	if (entity != NULL) {
    c444:	9b03      	ldr	r3, [sp, #12]
    c446:	2b00      	cmp	r3, #0
    c448:	d027      	beq.n	c49a <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    c44a:	0020      	movs	r0, r4
    c44c:	30b0      	adds	r0, #176	; 0xb0
    c44e:	2218      	movs	r2, #24
    c450:	0019      	movs	r1, r3
    c452:	4b57      	ldr	r3, [pc, #348]	; (c5b0 <http_client_send_request+0x240>)
    c454:	4798      	blx	r3
	module->req.method = method;
    c456:	23c8      	movs	r3, #200	; 0xc8
    c458:	4652      	mov	r2, sl
    c45a:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    c45c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    c45e:	2b01      	cmp	r3, #1
    c460:	d022      	beq.n	c4a8 <http_client_send_request+0x138>
    c462:	2b00      	cmp	r3, #0
    c464:	d027      	beq.n	c4b6 <http_client_send_request+0x146>
    c466:	2b02      	cmp	r3, #2
    c468:	d03a      	beq.n	c4e0 <http_client_send_request+0x170>
		return -EAGAIN;
    c46a:	230b      	movs	r3, #11
    c46c:	425b      	negs	r3, r3
    c46e:	9301      	str	r3, [sp, #4]
    c470:	e08d      	b.n	c58e <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    c472:	2200      	movs	r2, #0
    c474:	e7b8      	b.n	c3e8 <http_client_send_request+0x78>
    c476:	2200      	movs	r2, #0
    c478:	e7b6      	b.n	c3e8 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    c47a:	2200      	movs	r2, #0
    c47c:	23d4      	movs	r3, #212	; 0xd4
    c47e:	50e2      	str	r2, [r4, r3]
    c480:	e7d0      	b.n	c424 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    c482:	0020      	movs	r0, r4
    c484:	3070      	adds	r0, #112	; 0x70
    c486:	0029      	movs	r1, r5
    c488:	4b4a      	ldr	r3, [pc, #296]	; (c5b4 <http_client_send_request+0x244>)
    c48a:	4798      	blx	r3
    c48c:	e7da      	b.n	c444 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    c48e:	0029      	movs	r1, r5
    c490:	0020      	movs	r0, r4
    c492:	3071      	adds	r0, #113	; 0x71
    c494:	4b47      	ldr	r3, [pc, #284]	; (c5b4 <http_client_send_request+0x244>)
    c496:	4798      	blx	r3
    c498:	e7d4      	b.n	c444 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    c49a:	0020      	movs	r0, r4
    c49c:	30b0      	adds	r0, #176	; 0xb0
    c49e:	2218      	movs	r2, #24
    c4a0:	2100      	movs	r1, #0
    c4a2:	4b45      	ldr	r3, [pc, #276]	; (c5b8 <http_client_send_request+0x248>)
    c4a4:	4798      	blx	r3
    c4a6:	e7d6      	b.n	c456 <http_client_send_request+0xe6>
		if (!reconnect) {
    c4a8:	9b01      	ldr	r3, [sp, #4]
    c4aa:	2b00      	cmp	r3, #0
    c4ac:	d06f      	beq.n	c58e <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    c4ae:	2100      	movs	r1, #0
    c4b0:	0020      	movs	r0, r4
    c4b2:	4b42      	ldr	r3, [pc, #264]	; (c5bc <http_client_send_request+0x24c>)
    c4b4:	4798      	blx	r3
		if (module->config.tls) {
    c4b6:	2352      	movs	r3, #82	; 0x52
    c4b8:	5ce2      	ldrb	r2, [r4, r3]
    c4ba:	1e53      	subs	r3, r2, #1
    c4bc:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    c4be:	b2d2      	uxtb	r2, r2
    c4c0:	2101      	movs	r1, #1
    c4c2:	2002      	movs	r0, #2
    c4c4:	4b3e      	ldr	r3, [pc, #248]	; (c5c0 <http_client_send_request+0x250>)
    c4c6:	4798      	blx	r3
    c4c8:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    c4ca:	2800      	cmp	r0, #0
    c4cc:	db43      	blt.n	c556 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    c4ce:	0080      	lsls	r0, r0, #2
    c4d0:	4b3c      	ldr	r3, [pc, #240]	; (c5c4 <http_client_send_request+0x254>)
    c4d2:	50c4      	str	r4, [r0, r3]
    c4d4:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    c4d6:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    c4d8:	2620      	movs	r6, #32
			isv6 = 1;
    c4da:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    c4dc:	2730      	movs	r7, #48	; 0x30
    c4de:	e00c      	b.n	c4fa <http_client_send_request+0x18a>
		if (!reconnect) {
    c4e0:	9b01      	ldr	r3, [sp, #4]
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d1e3      	bne.n	c4ae <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    c4e6:	3303      	adds	r3, #3
    c4e8:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    c4ea:	0020      	movs	r0, r4
    c4ec:	4b36      	ldr	r3, [pc, #216]	; (c5c8 <http_client_send_request+0x258>)
    c4ee:	4798      	blx	r3
			break;
    c4f0:	e04d      	b.n	c58e <http_client_send_request+0x21e>
			if (isv6) {
    c4f2:	2900      	cmp	r1, #0
    c4f4:	d001      	beq.n	c4fa <http_client_send_request+0x18a>
    c4f6:	e012      	b.n	c51e <http_client_send_request+0x1ae>
			isv6 = 1;
    c4f8:	0001      	movs	r1, r0
	while (*host != '\0') {
    c4fa:	782a      	ldrb	r2, [r5, #0]
    c4fc:	2a00      	cmp	r2, #0
    c4fe:	d02e      	beq.n	c55e <http_client_send_request+0x1ee>
		ch = *host++;
    c500:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    c502:	0013      	movs	r3, r2
    c504:	43b3      	bics	r3, r6
    c506:	3b41      	subs	r3, #65	; 0x41
    c508:	2b05      	cmp	r3, #5
    c50a:	d9f5      	bls.n	c4f8 <http_client_send_request+0x188>
    c50c:	2a3a      	cmp	r2, #58	; 0x3a
    c50e:	d00a      	beq.n	c526 <http_client_send_request+0x1b6>
    c510:	2a2f      	cmp	r2, #47	; 0x2f
    c512:	d00a      	beq.n	c52a <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    c514:	2a2e      	cmp	r2, #46	; 0x2e
    c516:	d0ec      	beq.n	c4f2 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    c518:	403a      	ands	r2, r7
    c51a:	2a30      	cmp	r2, #48	; 0x30
    c51c:	d0ed      	beq.n	c4fa <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    c51e:	9802      	ldr	r0, [sp, #8]
    c520:	4b2a      	ldr	r3, [pc, #168]	; (c5cc <http_client_send_request+0x25c>)
    c522:	4798      	blx	r3
    c524:	e02f      	b.n	c586 <http_client_send_request+0x216>
			isv6 = 1;
    c526:	0001      	movs	r1, r0
    c528:	e7e7      	b.n	c4fa <http_client_send_request+0x18a>
    c52a:	0001      	movs	r1, r0
    c52c:	e7e5      	b.n	c4fa <http_client_send_request+0x18a>
		return -EINVAL;
    c52e:	2316      	movs	r3, #22
    c530:	425b      	negs	r3, r3
    c532:	9301      	str	r3, [sp, #4]
    c534:	e02b      	b.n	c58e <http_client_send_request+0x21e>
		return -EBUSY;
    c536:	2310      	movs	r3, #16
    c538:	425b      	negs	r3, r3
    c53a:	9301      	str	r3, [sp, #4]
    c53c:	e027      	b.n	c58e <http_client_send_request+0x21e>
		return -EINVAL;
    c53e:	2316      	movs	r3, #22
    c540:	425b      	negs	r3, r3
    c542:	9301      	str	r3, [sp, #4]
    c544:	e023      	b.n	c58e <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    c546:	235b      	movs	r3, #91	; 0x5b
    c548:	425b      	negs	r3, r3
    c54a:	9301      	str	r3, [sp, #4]
    c54c:	e01f      	b.n	c58e <http_client_send_request+0x21e>
			return -ENOMEM;
    c54e:	230c      	movs	r3, #12
    c550:	425b      	negs	r3, r3
    c552:	9301      	str	r3, [sp, #4]
    c554:	e01b      	b.n	c58e <http_client_send_request+0x21e>
			return -ENOSPC;
    c556:	231c      	movs	r3, #28
    c558:	425b      	negs	r3, r3
    c55a:	9301      	str	r3, [sp, #4]
    c55c:	e017      	b.n	c58e <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    c55e:	2302      	movs	r3, #2
    c560:	aa04      	add	r2, sp, #16
    c562:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    c564:	334e      	adds	r3, #78	; 0x4e
    c566:	5ae3      	ldrh	r3, [r4, r3]
    c568:	021a      	lsls	r2, r3, #8
    c56a:	0a1b      	lsrs	r3, r3, #8
    c56c:	4313      	orrs	r3, r2
    c56e:	aa04      	add	r2, sp, #16
    c570:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    c572:	9802      	ldr	r0, [sp, #8]
    c574:	4b16      	ldr	r3, [pc, #88]	; (c5d0 <http_client_send_request+0x260>)
    c576:	4798      	blx	r3
    c578:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    c57a:	2000      	movs	r0, #0
    c57c:	5620      	ldrsb	r0, [r4, r0]
    c57e:	2210      	movs	r2, #16
    c580:	a904      	add	r1, sp, #16
    c582:	4b14      	ldr	r3, [pc, #80]	; (c5d4 <http_client_send_request+0x264>)
    c584:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    c586:	2301      	movs	r3, #1
    c588:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    c58a:	2300      	movs	r3, #0
    c58c:	9301      	str	r3, [sp, #4]
}
    c58e:	9801      	ldr	r0, [sp, #4]
    c590:	b008      	add	sp, #32
    c592:	bc04      	pop	{r2}
    c594:	4692      	mov	sl, r2
    c596:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c598:	00013f44 	.word	0x00013f44
    c59c:	00011d21 	.word	0x00011d21
    c5a0:	00013f4c 	.word	0x00013f4c
    c5a4:	00011d13 	.word	0x00011d13
    c5a8:	00011805 	.word	0x00011805
    c5ac:	00011cd9 	.word	0x00011cd9
    c5b0:	00011819 	.word	0x00011819
    c5b4:	00011cc9 	.word	0x00011cc9
    c5b8:	0001184f 	.word	0x0001184f
    c5bc:	0000bdb9 	.word	0x0000bdb9
    c5c0:	0000ada9 	.word	0x0000ada9
    c5c4:	20000224 	.word	0x20000224
    c5c8:	0000bed1 	.word	0x0000bed1
    c5cc:	0000b1f1 	.word	0x0000b1f1
    c5d0:	0000b185 	.word	0x0000b185
    c5d4:	0000af2d 	.word	0x0000af2d

0000c5d8 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    c5d8:	b510      	push	{r4, lr}
	if (module == NULL) {
    c5da:	2800      	cmp	r0, #0
    c5dc:	d00d      	beq.n	c5fa <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    c5de:	6c41      	ldr	r1, [r0, #68]	; 0x44
    c5e0:	6e02      	ldr	r2, [r0, #96]	; 0x60
    c5e2:	4291      	cmp	r1, r2
    c5e4:	d20a      	bcs.n	c5fc <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    c5e6:	1a52      	subs	r2, r2, r1
    c5e8:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    c5ea:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    c5ec:	469c      	mov	ip, r3
    c5ee:	4461      	add	r1, ip
	recv(module->sock,
    c5f0:	7800      	ldrb	r0, [r0, #0]
    c5f2:	b240      	sxtb	r0, r0
    c5f4:	2300      	movs	r3, #0
    c5f6:	4c04      	ldr	r4, [pc, #16]	; (c608 <_http_client_recv_packet+0x30>)
    c5f8:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    c5fa:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    c5fc:	218b      	movs	r1, #139	; 0x8b
    c5fe:	4249      	negs	r1, r1
    c600:	4b02      	ldr	r3, [pc, #8]	; (c60c <_http_client_recv_packet+0x34>)
    c602:	4798      	blx	r3
		return;
    c604:	e7f9      	b.n	c5fa <_http_client_recv_packet+0x22>
    c606:	46c0      	nop			; (mov r8, r8)
    c608:	0000b055 	.word	0x0000b055
    c60c:	0000bdb9 	.word	0x0000bdb9

0000c610 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    c610:	b570      	push	{r4, r5, r6, lr}
    c612:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    c614:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    c616:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    c618:	1a5c      	subs	r4, r3, r1
    c61a:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    c61c:	2c00      	cmp	r4, #0
    c61e:	dc02      	bgt.n	c626 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    c620:	2300      	movs	r3, #0
    c622:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    c624:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    c626:	0022      	movs	r2, r4
    c628:	4b01      	ldr	r3, [pc, #4]	; (c630 <_http_client_move_buffer+0x20>)
    c62a:	4798      	blx	r3
		module->recved_size = remain;
    c62c:	646c      	str	r4, [r5, #68]	; 0x44
    c62e:	e7f9      	b.n	c624 <_http_client_move_buffer+0x14>
    c630:	0001182b 	.word	0x0001182b

0000c634 <_http_client_handle_header>:
{
    c634:	b5f0      	push	{r4, r5, r6, r7, lr}
    c636:	46ce      	mov	lr, r9
    c638:	b500      	push	{lr}
    c63a:	b084      	sub	sp, #16
    c63c:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    c63e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    c640:	4b62      	ldr	r3, [pc, #392]	; (c7cc <_http_client_handle_header+0x198>)
    c642:	4699      	mov	r9, r3
    c644:	e049      	b.n	c6da <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    c646:	0021      	movs	r1, r4
    c648:	0038      	movs	r0, r7
    c64a:	4b61      	ldr	r3, [pc, #388]	; (c7d0 <_http_client_handle_header+0x19c>)
    c64c:	4798      	blx	r3
			return 0;
    c64e:	2600      	movs	r6, #0
}
    c650:	0030      	movs	r0, r6
    c652:	b004      	add	sp, #16
    c654:	bc04      	pop	{r2}
    c656:	4691      	mov	r9, r2
    c658:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    c65a:	1ca1      	adds	r1, r4, #2
    c65c:	0038      	movs	r0, r7
    c65e:	4b5c      	ldr	r3, [pc, #368]	; (c7d0 <_http_client_handle_header+0x19c>)
    c660:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    c662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c664:	2b00      	cmp	r3, #0
    c666:	d00a      	beq.n	c67e <_http_client_handle_header+0x4a>
    c668:	22e4      	movs	r2, #228	; 0xe4
    c66a:	5ab9      	ldrh	r1, [r7, r2]
    c66c:	2900      	cmp	r1, #0
    c66e:	d006      	beq.n	c67e <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    c670:	3a08      	subs	r2, #8
    c672:	58b8      	ldr	r0, [r7, r2]
    c674:	2800      	cmp	r0, #0
    c676:	db07      	blt.n	c688 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    c678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    c67a:	4290      	cmp	r0, r2
    c67c:	dc10      	bgt.n	c6a0 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    c67e:	2201      	movs	r2, #1
    c680:	23d8      	movs	r3, #216	; 0xd8
    c682:	50fa      	str	r2, [r7, r3]
			return 1;
    c684:	2601      	movs	r6, #1
    c686:	e7e3      	b.n	c650 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    c688:	aa01      	add	r2, sp, #4
    c68a:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    c68c:	2101      	movs	r1, #1
    c68e:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    c690:	2100      	movs	r1, #0
    c692:	20e0      	movs	r0, #224	; 0xe0
    c694:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    c696:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    c698:	3102      	adds	r1, #2
    c69a:	0038      	movs	r0, r7
    c69c:	4798      	blx	r3
    c69e:	e7ee      	b.n	c67e <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    c6a0:	aa01      	add	r2, sp, #4
    c6a2:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    c6a4:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    c6a6:	2100      	movs	r1, #0
    c6a8:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    c6aa:	20e0      	movs	r0, #224	; 0xe0
    c6ac:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    c6ae:	3102      	adds	r1, #2
    c6b0:	0038      	movs	r0, r7
    c6b2:	4798      	blx	r3
    c6b4:	e7e3      	b.n	c67e <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    c6b6:	0020      	movs	r0, r4
    c6b8:	3010      	adds	r0, #16
    c6ba:	4b46      	ldr	r3, [pc, #280]	; (c7d4 <_http_client_handle_header+0x1a0>)
    c6bc:	4798      	blx	r3
    c6be:	23dc      	movs	r3, #220	; 0xdc
    c6c0:	50f8      	str	r0, [r7, r3]
    c6c2:	e009      	b.n	c6d8 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c6c4:	3201      	adds	r2, #1
    c6c6:	4295      	cmp	r5, r2
    c6c8:	d006      	beq.n	c6d8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    c6ca:	7813      	ldrb	r3, [r2, #0]
    c6cc:	2b20      	cmp	r3, #32
    c6ce:	d12b      	bne.n	c728 <_http_client_handle_header+0xf4>
    c6d0:	e7f8      	b.n	c6c4 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    c6d2:	3a21      	subs	r2, #33	; 0x21
    c6d4:	3389      	adds	r3, #137	; 0x89
    c6d6:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    c6d8:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    c6da:	493f      	ldr	r1, [pc, #252]	; (c7d8 <_http_client_handle_header+0x1a4>)
    c6dc:	0020      	movs	r0, r4
    c6de:	47c8      	blx	r9
    c6e0:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    c6e2:	d0b0      	beq.n	c646 <_http_client_handle_header+0x12>
    c6e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c6e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c6e8:	4694      	mov	ip, r2
    c6ea:	4463      	add	r3, ip
    c6ec:	4298      	cmp	r0, r3
    c6ee:	d2aa      	bcs.n	c646 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    c6f0:	2202      	movs	r2, #2
    c6f2:	4939      	ldr	r1, [pc, #228]	; (c7d8 <_http_client_handle_header+0x1a4>)
    c6f4:	0020      	movs	r0, r4
    c6f6:	4b39      	ldr	r3, [pc, #228]	; (c7dc <_http_client_handle_header+0x1a8>)
    c6f8:	4798      	blx	r3
    c6fa:	2800      	cmp	r0, #0
    c6fc:	d0ad      	beq.n	c65a <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    c6fe:	2210      	movs	r2, #16
    c700:	4937      	ldr	r1, [pc, #220]	; (c7e0 <_http_client_handle_header+0x1ac>)
    c702:	0020      	movs	r0, r4
    c704:	4b35      	ldr	r3, [pc, #212]	; (c7dc <_http_client_handle_header+0x1a8>)
    c706:	4798      	blx	r3
    c708:	2800      	cmp	r0, #0
    c70a:	d0d4      	beq.n	c6b6 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    c70c:	2213      	movs	r2, #19
    c70e:	4935      	ldr	r1, [pc, #212]	; (c7e4 <_http_client_handle_header+0x1b0>)
    c710:	0020      	movs	r0, r4
    c712:	4b32      	ldr	r3, [pc, #200]	; (c7dc <_http_client_handle_header+0x1a8>)
    c714:	4798      	blx	r3
    c716:	1e06      	subs	r6, r0, #0
    c718:	d110      	bne.n	c73c <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    c71a:	0022      	movs	r2, r4
    c71c:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c71e:	4295      	cmp	r5, r2
    c720:	d9da      	bls.n	c6d8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    c722:	7ce3      	ldrb	r3, [r4, #19]
    c724:	2b20      	cmp	r3, #32
    c726:	d0cd      	beq.n	c6c4 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    c728:	2220      	movs	r2, #32
    c72a:	4393      	bics	r3, r2
    c72c:	2b43      	cmp	r3, #67	; 0x43
    c72e:	d0d0      	beq.n	c6d2 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    c730:	2186      	movs	r1, #134	; 0x86
    c732:	4249      	negs	r1, r1
    c734:	0038      	movs	r0, r7
    c736:	4b2c      	ldr	r3, [pc, #176]	; (c7e8 <_http_client_handle_header+0x1b4>)
    c738:	4798      	blx	r3
					return 0;
    c73a:	e789      	b.n	c650 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    c73c:	220c      	movs	r2, #12
    c73e:	492b      	ldr	r1, [pc, #172]	; (c7ec <_http_client_handle_header+0x1b8>)
    c740:	0020      	movs	r0, r4
    c742:	4b26      	ldr	r3, [pc, #152]	; (c7dc <_http_client_handle_header+0x1a8>)
    c744:	4798      	blx	r3
    c746:	2800      	cmp	r0, #0
    c748:	d11d      	bne.n	c786 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    c74a:	0022      	movs	r2, r4
    c74c:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c74e:	4295      	cmp	r5, r2
    c750:	d9c2      	bls.n	c6d8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    c752:	7b23      	ldrb	r3, [r4, #12]
    c754:	2b20      	cmp	r3, #32
    c756:	d009      	beq.n	c76c <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    c758:	2220      	movs	r2, #32
    c75a:	4393      	bics	r3, r2
    c75c:	2b4b      	cmp	r3, #75	; 0x4b
    c75e:	d00c      	beq.n	c77a <_http_client_handle_header+0x146>
					module->permanent = 0;
    c760:	2241      	movs	r2, #65	; 0x41
    c762:	5cbb      	ldrb	r3, [r7, r2]
    c764:	2102      	movs	r1, #2
    c766:	438b      	bics	r3, r1
    c768:	54bb      	strb	r3, [r7, r2]
    c76a:	e7b5      	b.n	c6d8 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c76c:	3201      	adds	r2, #1
    c76e:	4295      	cmp	r5, r2
    c770:	d0b2      	beq.n	c6d8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    c772:	7813      	ldrb	r3, [r2, #0]
    c774:	2b20      	cmp	r3, #32
    c776:	d1ef      	bne.n	c758 <_http_client_handle_header+0x124>
    c778:	e7f8      	b.n	c76c <_http_client_handle_header+0x138>
					module->permanent = 1;
    c77a:	3221      	adds	r2, #33	; 0x21
    c77c:	5cbb      	ldrb	r3, [r7, r2]
    c77e:	2102      	movs	r1, #2
    c780:	430b      	orrs	r3, r1
    c782:	54bb      	strb	r3, [r7, r2]
    c784:	e7a8      	b.n	c6d8 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    c786:	2205      	movs	r2, #5
    c788:	4919      	ldr	r1, [pc, #100]	; (c7f0 <_http_client_handle_header+0x1bc>)
    c78a:	0020      	movs	r0, r4
    c78c:	4b13      	ldr	r3, [pc, #76]	; (c7dc <_http_client_handle_header+0x1a8>)
    c78e:	4798      	blx	r3
    c790:	2800      	cmp	r0, #0
    c792:	d1a1      	bne.n	c6d8 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    c794:	0020      	movs	r0, r4
    c796:	3009      	adds	r0, #9
    c798:	4b0e      	ldr	r3, [pc, #56]	; (c7d4 <_http_client_handle_header+0x1a0>)
    c79a:	4798      	blx	r3
    c79c:	23e4      	movs	r3, #228	; 0xe4
    c79e:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    c7a0:	2200      	movs	r2, #0
    c7a2:	3b08      	subs	r3, #8
    c7a4:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    c7a6:	7963      	ldrb	r3, [r4, #5]
    c7a8:	2b31      	cmp	r3, #49	; 0x31
    c7aa:	d802      	bhi.n	c7b2 <_http_client_handle_header+0x17e>
    c7ac:	79e3      	ldrb	r3, [r4, #7]
    c7ae:	2b30      	cmp	r3, #48	; 0x30
    c7b0:	d905      	bls.n	c7be <_http_client_handle_header+0x18a>
				module->permanent = 1;
    c7b2:	2241      	movs	r2, #65	; 0x41
    c7b4:	5cbb      	ldrb	r3, [r7, r2]
    c7b6:	2102      	movs	r1, #2
    c7b8:	430b      	orrs	r3, r1
    c7ba:	54bb      	strb	r3, [r7, r2]
    c7bc:	e78c      	b.n	c6d8 <_http_client_handle_header+0xa4>
				module->permanent = 0;
    c7be:	2241      	movs	r2, #65	; 0x41
    c7c0:	5cbb      	ldrb	r3, [r7, r2]
    c7c2:	2102      	movs	r1, #2
    c7c4:	438b      	bics	r3, r1
    c7c6:	54bb      	strb	r3, [r7, r2]
    c7c8:	e786      	b.n	c6d8 <_http_client_handle_header+0xa4>
    c7ca:	46c0      	nop			; (mov r8, r8)
    c7cc:	00011d43 	.word	0x00011d43
    c7d0:	0000c611 	.word	0x0000c611
    c7d4:	0001179d 	.word	0x0001179d
    c7d8:	0001446c 	.word	0x0001446c
    c7dc:	00011d21 	.word	0x00011d21
    c7e0:	00013f24 	.word	0x00013f24
    c7e4:	00013e34 	.word	0x00013e34
    c7e8:	0000bdb9 	.word	0x0000bdb9
    c7ec:	00013e48 	.word	0x00013e48
    c7f0:	00013e58 	.word	0x00013e58

0000c7f4 <_http_client_handle_entity>:
{
    c7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7f6:	46ce      	mov	lr, r9
    c7f8:	b500      	push	{lr}
    c7fa:	b086      	sub	sp, #24
    c7fc:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    c7fe:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    c800:	23dc      	movs	r3, #220	; 0xdc
    c802:	58c3      	ldr	r3, [r0, r3]
    c804:	2b00      	cmp	r3, #0
    c806:	db69      	blt.n	c8dc <_http_client_handle_entity+0xe8>
    c808:	6e02      	ldr	r2, [r0, #96]	; 0x60
    c80a:	4293      	cmp	r3, r2
    c80c:	dc2b      	bgt.n	c866 <_http_client_handle_entity+0x72>
	return 0;
    c80e:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    c810:	6c62      	ldr	r2, [r4, #68]	; 0x44
    c812:	4293      	cmp	r3, r2
    c814:	dc4e      	bgt.n	c8b4 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    c816:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    c818:	2e00      	cmp	r6, #0
    c81a:	d003      	beq.n	c824 <_http_client_handle_entity+0x30>
    c81c:	22e4      	movs	r2, #228	; 0xe4
    c81e:	5aa1      	ldrh	r1, [r4, r2]
    c820:	2900      	cmp	r1, #0
    c822:	d10e      	bne.n	c842 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    c824:	2300      	movs	r3, #0
    c826:	22d8      	movs	r2, #216	; 0xd8
    c828:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    c82a:	320c      	adds	r2, #12
    c82c:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    c82e:	3341      	adds	r3, #65	; 0x41
    c830:	5ce3      	ldrb	r3, [r4, r3]
    c832:	079b      	lsls	r3, r3, #30
    c834:	d40f      	bmi.n	c856 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    c836:	2100      	movs	r1, #0
    c838:	0020      	movs	r0, r4
    c83a:	4b71      	ldr	r3, [pc, #452]	; (ca00 <_http_client_handle_entity+0x20c>)
    c83c:	4798      	blx	r3
	return 0;
    c83e:	2000      	movs	r0, #0
    c840:	e038      	b.n	c8b4 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    c842:	aa03      	add	r2, sp, #12
    c844:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    c846:	2100      	movs	r1, #0
    c848:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    c84a:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    c84c:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    c84e:	3102      	adds	r1, #2
    c850:	0020      	movs	r0, r4
    c852:	47b0      	blx	r6
    c854:	e7e6      	b.n	c824 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    c856:	23dc      	movs	r3, #220	; 0xdc
    c858:	58e1      	ldr	r1, [r4, r3]
    c85a:	1869      	adds	r1, r5, r1
    c85c:	0020      	movs	r0, r4
    c85e:	4b69      	ldr	r3, [pc, #420]	; (ca04 <_http_client_handle_entity+0x210>)
    c860:	4798      	blx	r3
				return module->recved_size;
    c862:	6c60      	ldr	r0, [r4, #68]	; 0x44
    c864:	e026      	b.n	c8b4 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    c866:	6c42      	ldr	r2, [r0, #68]	; 0x44
    c868:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    c86a:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    c86c:	21e0      	movs	r1, #224	; 0xe0
    c86e:	5840      	ldr	r0, [r0, r1]
    c870:	4684      	mov	ip, r0
    c872:	4462      	add	r2, ip
    c874:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    c876:	4293      	cmp	r3, r2
    c878:	dc20      	bgt.n	c8bc <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    c87a:	2300      	movs	r3, #0
    c87c:	22d8      	movs	r2, #216	; 0xd8
    c87e:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    c880:	320c      	adds	r2, #12
    c882:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    c884:	3ae3      	subs	r2, #227	; 0xe3
    c886:	ab03      	add	r3, sp, #12
    c888:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    c88a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c88c:	2b00      	cmp	r3, #0
    c88e:	d007      	beq.n	c8a0 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    c890:	ae03      	add	r6, sp, #12
    c892:	0032      	movs	r2, r6
    c894:	2103      	movs	r1, #3
    c896:	0020      	movs	r0, r4
    c898:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    c89a:	7a33      	ldrb	r3, [r6, #8]
    c89c:	2b01      	cmp	r3, #1
    c89e:	d103      	bne.n	c8a8 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    c8a0:	2341      	movs	r3, #65	; 0x41
    c8a2:	5ce3      	ldrb	r3, [r4, r3]
    c8a4:	079b      	lsls	r3, r3, #30
    c8a6:	d510      	bpl.n	c8ca <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    c8a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c8aa:	18e9      	adds	r1, r5, r3
    c8ac:	0020      	movs	r0, r4
    c8ae:	4b55      	ldr	r3, [pc, #340]	; (ca04 <_http_client_handle_entity+0x210>)
    c8b0:	4798      	blx	r3
	return 0;
    c8b2:	2000      	movs	r0, #0
}
    c8b4:	b006      	add	sp, #24
    c8b6:	bc04      	pop	{r2}
    c8b8:	4691      	mov	r9, r2
    c8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    c8bc:	2200      	movs	r2, #0
    c8be:	ab03      	add	r3, sp, #12
    c8c0:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    c8c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c8c4:	2b00      	cmp	r3, #0
    c8c6:	d0ef      	beq.n	c8a8 <_http_client_handle_entity+0xb4>
    c8c8:	e7e2      	b.n	c890 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    c8ca:	484f      	ldr	r0, [pc, #316]	; (ca08 <_http_client_handle_entity+0x214>)
    c8cc:	4b4f      	ldr	r3, [pc, #316]	; (ca0c <_http_client_handle_entity+0x218>)
    c8ce:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    c8d0:	2100      	movs	r1, #0
    c8d2:	0020      	movs	r0, r4
    c8d4:	4b4a      	ldr	r3, [pc, #296]	; (ca00 <_http_client_handle_entity+0x20c>)
    c8d6:	4798      	blx	r3
					return 0;
    c8d8:	2000      	movs	r0, #0
    c8da:	e7eb      	b.n	c8b4 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    c8dc:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    c8de:	2300      	movs	r3, #0
    c8e0:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    c8e2:	26e0      	movs	r6, #224	; 0xe0
    c8e4:	e00a      	b.n	c8fc <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    c8e6:	2341      	movs	r3, #65	; 0x41
    c8e8:	5ce3      	ldrb	r3, [r4, r3]
    c8ea:	079b      	lsls	r3, r3, #30
    c8ec:	d51b      	bpl.n	c926 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    c8ee:	1ca9      	adds	r1, r5, #2
    c8f0:	0020      	movs	r0, r4
    c8f2:	4b44      	ldr	r3, [pc, #272]	; (ca04 <_http_client_handle_entity+0x210>)
    c8f4:	4798      	blx	r3
	} while(module->recved_size > 0);
    c8f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c8f8:	2b00      	cmp	r3, #0
    c8fa:	d073      	beq.n	c9e4 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    c8fc:	59a3      	ldr	r3, [r4, r6]
    c8fe:	2b00      	cmp	r3, #0
    c900:	db30      	blt.n	c964 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    c902:	d116      	bne.n	c932 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    c904:	22d8      	movs	r2, #216	; 0xd8
    c906:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    c908:	320c      	adds	r2, #12
    c90a:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    c90c:	3ae3      	subs	r2, #227	; 0xe3
    c90e:	4669      	mov	r1, sp
    c910:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    c912:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    c914:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    c916:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c918:	2b00      	cmp	r3, #0
    c91a:	d0e4      	beq.n	c8e6 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    c91c:	466a      	mov	r2, sp
    c91e:	2103      	movs	r1, #3
    c920:	0020      	movs	r0, r4
    c922:	4798      	blx	r3
    c924:	e7df      	b.n	c8e6 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    c926:	2100      	movs	r1, #0
    c928:	0020      	movs	r0, r4
    c92a:	4b35      	ldr	r3, [pc, #212]	; (ca00 <_http_client_handle_entity+0x20c>)
    c92c:	4798      	blx	r3
	return 0;
    c92e:	2000      	movs	r0, #0
    c930:	e7c0      	b.n	c8b4 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    c932:	42bb      	cmp	r3, r7
    c934:	dcdf      	bgt.n	c8f6 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    c936:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    c938:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    c93a:	2300      	movs	r3, #0
    c93c:	466a      	mov	r2, sp
    c93e:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    c940:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c942:	2b00      	cmp	r3, #0
    c944:	d002      	beq.n	c94c <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    c946:	2103      	movs	r1, #3
    c948:	0020      	movs	r0, r4
    c94a:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    c94c:	59a3      	ldr	r3, [r4, r6]
    c94e:	1c99      	adds	r1, r3, #2
    c950:	1869      	adds	r1, r5, r1
    c952:	0020      	movs	r0, r4
    c954:	4b2b      	ldr	r3, [pc, #172]	; (ca04 <_http_client_handle_entity+0x210>)
    c956:	4798      	blx	r3
				length = (int)module->recved_size;
    c958:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    c95a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    c95c:	2301      	movs	r3, #1
    c95e:	425b      	negs	r3, r3
    c960:	51a3      	str	r3, [r4, r6]
    c962:	e7c8      	b.n	c8f6 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    c964:	2300      	movs	r3, #0
    c966:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    c968:	2f00      	cmp	r7, #0
    c96a:	dd04      	ble.n	c976 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    c96c:	782b      	ldrb	r3, [r5, #0]
    c96e:	2b0a      	cmp	r3, #10
    c970:	d11c      	bne.n	c9ac <_http_client_handle_entity+0x1b8>
					buffer++;
    c972:	3501      	adds	r5, #1
					length--;
    c974:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    c976:	59a3      	ldr	r3, [r4, r6]
    c978:	6e22      	ldr	r2, [r4, #96]	; 0x60
    c97a:	4293      	cmp	r3, r2
    c97c:	dc39      	bgt.n	c9f2 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    c97e:	2f00      	cmp	r7, #0
    c980:	d1b9      	bne.n	c8f6 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    c982:	2201      	movs	r2, #1
    c984:	4252      	negs	r2, r2
    c986:	23e0      	movs	r3, #224	; 0xe0
    c988:	50e2      	str	r2, [r4, r3]
    c98a:	e7d0      	b.n	c92e <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    c98c:	001a      	movs	r2, r3
    c98e:	3a61      	subs	r2, #97	; 0x61
    c990:	2a05      	cmp	r2, #5
    c992:	d818      	bhi.n	c9c6 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    c994:	59a2      	ldr	r2, [r4, r6]
    c996:	0112      	lsls	r2, r2, #4
    c998:	18d3      	adds	r3, r2, r3
    c99a:	3b61      	subs	r3, #97	; 0x61
    c99c:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    c99e:	3501      	adds	r5, #1
    c9a0:	3f01      	subs	r7, #1
    c9a2:	2f00      	cmp	r7, #0
    c9a4:	d020      	beq.n	c9e8 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    c9a6:	782b      	ldrb	r3, [r5, #0]
    c9a8:	2b0a      	cmp	r3, #10
    c9aa:	d0e2      	beq.n	c972 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    c9ac:	464a      	mov	r2, r9
    c9ae:	2a00      	cmp	r2, #0
    c9b0:	d1f5      	bne.n	c99e <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    c9b2:	001a      	movs	r2, r3
    c9b4:	3a30      	subs	r2, #48	; 0x30
    c9b6:	2a09      	cmp	r2, #9
    c9b8:	d8e8      	bhi.n	c98c <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    c9ba:	59a2      	ldr	r2, [r4, r6]
    c9bc:	0112      	lsls	r2, r2, #4
    c9be:	18d3      	adds	r3, r2, r3
    c9c0:	3b30      	subs	r3, #48	; 0x30
    c9c2:	51a3      	str	r3, [r4, r6]
    c9c4:	e7eb      	b.n	c99e <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    c9c6:	001a      	movs	r2, r3
    c9c8:	3a41      	subs	r2, #65	; 0x41
    c9ca:	2a05      	cmp	r2, #5
    c9cc:	d805      	bhi.n	c9da <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    c9ce:	59a2      	ldr	r2, [r4, r6]
    c9d0:	0112      	lsls	r2, r2, #4
    c9d2:	18d3      	adds	r3, r2, r3
    c9d4:	3b41      	subs	r3, #65	; 0x41
    c9d6:	51a3      	str	r3, [r4, r6]
    c9d8:	e7e1      	b.n	c99e <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    c9da:	3b3b      	subs	r3, #59	; 0x3b
    c9dc:	425a      	negs	r2, r3
    c9de:	415a      	adcs	r2, r3
    c9e0:	4691      	mov	r9, r2
    c9e2:	e7dc      	b.n	c99e <_http_client_handle_entity+0x1aa>
	return 0;
    c9e4:	2000      	movs	r0, #0
    c9e6:	e765      	b.n	c8b4 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    c9e8:	23e0      	movs	r3, #224	; 0xe0
    c9ea:	58e3      	ldr	r3, [r4, r3]
    c9ec:	6e22      	ldr	r2, [r4, #96]	; 0x60
    c9ee:	4293      	cmp	r3, r2
    c9f0:	ddc7      	ble.n	c982 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    c9f2:	218b      	movs	r1, #139	; 0x8b
    c9f4:	4249      	negs	r1, r1
    c9f6:	0020      	movs	r0, r4
    c9f8:	4b01      	ldr	r3, [pc, #4]	; (ca00 <_http_client_handle_entity+0x20c>)
    c9fa:	4798      	blx	r3
    c9fc:	e797      	b.n	c92e <_http_client_handle_entity+0x13a>
    c9fe:	46c0      	nop			; (mov r8, r8)
    ca00:	0000bdb9 	.word	0x0000bdb9
    ca04:	0000c611 	.word	0x0000c611
    ca08:	00013e30 	.word	0x00013e30
    ca0c:	00011acd 	.word	0x00011acd

0000ca10 <_http_client_handle_response>:
{
    ca10:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    ca12:	23d8      	movs	r3, #216	; 0xd8
    ca14:	58c3      	ldr	r3, [r0, r3]
    ca16:	2b00      	cmp	r3, #0
    ca18:	d003      	beq.n	ca22 <_http_client_handle_response+0x12>
    ca1a:	2b01      	cmp	r3, #1
    ca1c:	d004      	beq.n	ca28 <_http_client_handle_response+0x18>
	return 0;
    ca1e:	2000      	movs	r0, #0
    ca20:	e001      	b.n	ca26 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    ca22:	4b03      	ldr	r3, [pc, #12]	; (ca30 <_http_client_handle_response+0x20>)
    ca24:	4798      	blx	r3
}
    ca26:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    ca28:	4b02      	ldr	r3, [pc, #8]	; (ca34 <_http_client_handle_response+0x24>)
    ca2a:	4798      	blx	r3
    ca2c:	e7fb      	b.n	ca26 <_http_client_handle_response+0x16>
    ca2e:	46c0      	nop			; (mov r8, r8)
    ca30:	0000c635 	.word	0x0000c635
    ca34:	0000c7f5 	.word	0x0000c7f5

0000ca38 <_http_client_recved_packet>:
{
    ca38:	b570      	push	{r4, r5, r6, lr}
    ca3a:	0004      	movs	r4, r0
	module->recved_size += read_len;
    ca3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ca3e:	469c      	mov	ip, r3
    ca40:	4461      	add	r1, ip
    ca42:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    ca44:	2358      	movs	r3, #88	; 0x58
    ca46:	5ac3      	ldrh	r3, [r0, r3]
    ca48:	2b00      	cmp	r3, #0
    ca4a:	d105      	bne.n	ca58 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    ca4c:	4d05      	ldr	r5, [pc, #20]	; (ca64 <_http_client_recved_packet+0x2c>)
    ca4e:	0020      	movs	r0, r4
    ca50:	47a8      	blx	r5
    ca52:	2800      	cmp	r0, #0
    ca54:	d1fb      	bne.n	ca4e <_http_client_recved_packet+0x16>
}
    ca56:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    ca58:	6c81      	ldr	r1, [r0, #72]	; 0x48
    ca5a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    ca5c:	4b02      	ldr	r3, [pc, #8]	; (ca68 <_http_client_recved_packet+0x30>)
    ca5e:	4798      	blx	r3
    ca60:	e7f4      	b.n	ca4c <_http_client_recved_packet+0x14>
    ca62:	46c0      	nop			; (mov r8, r8)
    ca64:	0000ca11 	.word	0x0000ca11
    ca68:	0000ce0d 	.word	0x0000ce0d

0000ca6c <http_client_socket_event_handler>:
{
    ca6c:	b510      	push	{r4, lr}
    ca6e:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    ca70:	0080      	lsls	r0, r0, #2
    ca72:	4b65      	ldr	r3, [pc, #404]	; (cc08 <http_client_socket_event_handler+0x19c>)
    ca74:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    ca76:	2c00      	cmp	r4, #0
    ca78:	d006      	beq.n	ca88 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    ca7a:	2906      	cmp	r1, #6
    ca7c:	d051      	beq.n	cb22 <http_client_socket_event_handler+0xb6>
    ca7e:	2907      	cmp	r1, #7
    ca80:	d100      	bne.n	ca84 <http_client_socket_event_handler+0x18>
    ca82:	e08a      	b.n	cb9a <http_client_socket_event_handler+0x12e>
    ca84:	2905      	cmp	r1, #5
    ca86:	d001      	beq.n	ca8c <http_client_socket_event_handler+0x20>
}
    ca88:	b004      	add	sp, #16
    ca8a:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    ca8c:	2301      	movs	r3, #1
    ca8e:	56d3      	ldrsb	r3, [r2, r3]
    ca90:	1e1a      	subs	r2, r3, #0
    ca92:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    ca94:	db15      	blt.n	cac2 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    ca96:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ca98:	2b00      	cmp	r3, #0
    ca9a:	d003      	beq.n	caa4 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    ca9c:	aa01      	add	r2, sp, #4
    ca9e:	2100      	movs	r1, #0
    caa0:	0020      	movs	r0, r4
    caa2:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    caa4:	2303      	movs	r3, #3
    caa6:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    caa8:	3355      	adds	r3, #85	; 0x55
    caaa:	5ae2      	ldrh	r2, [r4, r3]
    caac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    caae:	6d60      	ldr	r0, [r4, #84]	; 0x54
    cab0:	4b56      	ldr	r3, [pc, #344]	; (cc0c <http_client_socket_event_handler+0x1a0>)
    cab2:	4798      	blx	r3
    		_http_client_recv_packet(module);
    cab4:	0020      	movs	r0, r4
    cab6:	4b56      	ldr	r3, [pc, #344]	; (cc10 <http_client_socket_event_handler+0x1a4>)
    cab8:	4798      	blx	r3
			_http_client_request(module);
    caba:	0020      	movs	r0, r4
    cabc:	4b55      	ldr	r3, [pc, #340]	; (cc14 <http_client_socket_event_handler+0x1a8>)
    cabe:	4798      	blx	r3
    cac0:	e7e2      	b.n	ca88 <http_client_socket_event_handler+0x1c>
	switch (err) {
    cac2:	330e      	adds	r3, #14
    cac4:	b2d9      	uxtb	r1, r3
    cac6:	290e      	cmp	r1, #14
    cac8:	d81e      	bhi.n	cb08 <http_client_socket_event_handler+0x9c>
    caca:	008b      	lsls	r3, r1, #2
    cacc:	4952      	ldr	r1, [pc, #328]	; (cc18 <http_client_socket_event_handler+0x1ac>)
    cace:	58cb      	ldr	r3, [r1, r3]
    cad0:	469f      	mov	pc, r3
			return -ENOENT;
    cad2:	2102      	movs	r1, #2
    cad4:	4249      	negs	r1, r1
    cad6:	e01d      	b.n	cb14 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    cad8:	2170      	movs	r1, #112	; 0x70
    cada:	4249      	negs	r1, r1
    cadc:	e01a      	b.n	cb14 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    cade:	210c      	movs	r1, #12
    cae0:	4249      	negs	r1, r1
    cae2:	e017      	b.n	cb14 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    cae4:	2116      	movs	r1, #22
    cae6:	4249      	negs	r1, r1
    cae8:	e014      	b.n	cb14 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    caea:	210c      	movs	r1, #12
    caec:	4249      	negs	r1, r1
    caee:	e011      	b.n	cb14 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    caf0:	2179      	movs	r1, #121	; 0x79
    caf2:	4249      	negs	r1, r1
    caf4:	e00e      	b.n	cb14 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    caf6:	2168      	movs	r1, #104	; 0x68
    caf8:	4249      	negs	r1, r1
    cafa:	e00b      	b.n	cb14 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    cafc:	210b      	movs	r1, #11
    cafe:	4249      	negs	r1, r1
    cb00:	e008      	b.n	cb14 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    cb02:	2110      	movs	r1, #16
    cb04:	4249      	negs	r1, r1
    cb06:	e005      	b.n	cb14 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    cb08:	2a00      	cmp	r2, #0
    cb0a:	db07      	blt.n	cb1c <http_client_socket_event_handler+0xb0>
			return 0;
    cb0c:	2100      	movs	r1, #0
    cb0e:	e001      	b.n	cb14 <http_client_socket_event_handler+0xa8>
			return -EIO;
    cb10:	2105      	movs	r1, #5
    cb12:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    cb14:	0020      	movs	r0, r4
    cb16:	4b41      	ldr	r3, [pc, #260]	; (cc1c <http_client_socket_event_handler+0x1b0>)
    cb18:	4798      	blx	r3
    cb1a:	e7b5      	b.n	ca88 <http_client_socket_event_handler+0x1c>
				return -EIO;
    cb1c:	2105      	movs	r1, #5
    cb1e:	4249      	negs	r1, r1
    cb20:	e7f8      	b.n	cb14 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    cb22:	2304      	movs	r3, #4
    cb24:	5ed1      	ldrsh	r1, [r2, r3]
    cb26:	2900      	cmp	r1, #0
    cb28:	dd06      	ble.n	cb38 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    cb2a:	0020      	movs	r0, r4
    cb2c:	4b3c      	ldr	r3, [pc, #240]	; (cc20 <http_client_socket_event_handler+0x1b4>)
    cb2e:	4798      	blx	r3
		_http_client_recv_packet(module);
    cb30:	0020      	movs	r0, r4
    cb32:	4b37      	ldr	r3, [pc, #220]	; (cc10 <http_client_socket_event_handler+0x1a4>)
    cb34:	4798      	blx	r3
		break;
    cb36:	e7a7      	b.n	ca88 <http_client_socket_event_handler+0x1c>
	switch (err) {
    cb38:	000b      	movs	r3, r1
    cb3a:	330e      	adds	r3, #14
    cb3c:	b29a      	uxth	r2, r3
    cb3e:	2a0e      	cmp	r2, #14
    cb40:	d81e      	bhi.n	cb80 <http_client_socket_event_handler+0x114>
    cb42:	0093      	lsls	r3, r2, #2
    cb44:	4a37      	ldr	r2, [pc, #220]	; (cc24 <http_client_socket_event_handler+0x1b8>)
    cb46:	58d3      	ldr	r3, [r2, r3]
    cb48:	469f      	mov	pc, r3
			return -ENOENT;
    cb4a:	2102      	movs	r1, #2
    cb4c:	4249      	negs	r1, r1
    cb4e:	e01d      	b.n	cb8c <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    cb50:	2170      	movs	r1, #112	; 0x70
    cb52:	4249      	negs	r1, r1
    cb54:	e01a      	b.n	cb8c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    cb56:	210c      	movs	r1, #12
    cb58:	4249      	negs	r1, r1
    cb5a:	e017      	b.n	cb8c <http_client_socket_event_handler+0x120>
			return -EINVAL;
    cb5c:	2116      	movs	r1, #22
    cb5e:	4249      	negs	r1, r1
    cb60:	e014      	b.n	cb8c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    cb62:	210c      	movs	r1, #12
    cb64:	4249      	negs	r1, r1
    cb66:	e011      	b.n	cb8c <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    cb68:	2179      	movs	r1, #121	; 0x79
    cb6a:	4249      	negs	r1, r1
    cb6c:	e00e      	b.n	cb8c <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    cb6e:	2168      	movs	r1, #104	; 0x68
    cb70:	4249      	negs	r1, r1
    cb72:	e00b      	b.n	cb8c <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    cb74:	210b      	movs	r1, #11
    cb76:	4249      	negs	r1, r1
    cb78:	e008      	b.n	cb8c <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    cb7a:	2110      	movs	r1, #16
    cb7c:	4249      	negs	r1, r1
    cb7e:	e005      	b.n	cb8c <http_client_socket_event_handler+0x120>
			if (err < 0) {
    cb80:	2900      	cmp	r1, #0
    cb82:	db07      	blt.n	cb94 <http_client_socket_event_handler+0x128>
			return 0;
    cb84:	2100      	movs	r1, #0
    cb86:	e001      	b.n	cb8c <http_client_socket_event_handler+0x120>
			return -EIO;
    cb88:	2105      	movs	r1, #5
    cb8a:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    cb8c:	0020      	movs	r0, r4
    cb8e:	4b23      	ldr	r3, [pc, #140]	; (cc1c <http_client_socket_event_handler+0x1b0>)
    cb90:	4798      	blx	r3
    cb92:	e7cd      	b.n	cb30 <http_client_socket_event_handler+0xc4>
				return -EIO;
    cb94:	2105      	movs	r1, #5
    cb96:	4249      	negs	r1, r1
    cb98:	e7f8      	b.n	cb8c <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    cb9a:	2300      	movs	r3, #0
    cb9c:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    cb9e:	2b00      	cmp	r3, #0
    cba0:	db08      	blt.n	cbb4 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    cba2:	0020      	movs	r0, r4
    cba4:	4b1b      	ldr	r3, [pc, #108]	; (cc14 <http_client_socket_event_handler+0x1a8>)
    cba6:	4798      	blx	r3
		module->sending = 0;
    cba8:	2241      	movs	r2, #65	; 0x41
    cbaa:	5ca3      	ldrb	r3, [r4, r2]
    cbac:	2101      	movs	r1, #1
    cbae:	438b      	bics	r3, r1
    cbb0:	54a3      	strb	r3, [r4, r2]
    	break;
    cbb2:	e769      	b.n	ca88 <http_client_socket_event_handler+0x1c>
	switch (err) {
    cbb4:	330e      	adds	r3, #14
    cbb6:	b29a      	uxth	r2, r3
    cbb8:	2a0d      	cmp	r2, #13
    cbba:	d81e      	bhi.n	cbfa <http_client_socket_event_handler+0x18e>
    cbbc:	0093      	lsls	r3, r2, #2
    cbbe:	4a1a      	ldr	r2, [pc, #104]	; (cc28 <http_client_socket_event_handler+0x1bc>)
    cbc0:	58d3      	ldr	r3, [r2, r3]
    cbc2:	469f      	mov	pc, r3
			return -ENOENT;
    cbc4:	2102      	movs	r1, #2
    cbc6:	4249      	negs	r1, r1
    cbc8:	e019      	b.n	cbfe <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    cbca:	2170      	movs	r1, #112	; 0x70
    cbcc:	4249      	negs	r1, r1
    cbce:	e016      	b.n	cbfe <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    cbd0:	210c      	movs	r1, #12
    cbd2:	4249      	negs	r1, r1
    cbd4:	e013      	b.n	cbfe <http_client_socket_event_handler+0x192>
			return -EINVAL;
    cbd6:	2116      	movs	r1, #22
    cbd8:	4249      	negs	r1, r1
    cbda:	e010      	b.n	cbfe <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    cbdc:	210c      	movs	r1, #12
    cbde:	4249      	negs	r1, r1
    cbe0:	e00d      	b.n	cbfe <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    cbe2:	2179      	movs	r1, #121	; 0x79
    cbe4:	4249      	negs	r1, r1
    cbe6:	e00a      	b.n	cbfe <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    cbe8:	2168      	movs	r1, #104	; 0x68
    cbea:	4249      	negs	r1, r1
    cbec:	e007      	b.n	cbfe <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    cbee:	210b      	movs	r1, #11
    cbf0:	4249      	negs	r1, r1
    cbf2:	e004      	b.n	cbfe <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    cbf4:	2110      	movs	r1, #16
    cbf6:	4249      	negs	r1, r1
    cbf8:	e001      	b.n	cbfe <http_client_socket_event_handler+0x192>
			return -EIO;
    cbfa:	2105      	movs	r1, #5
    cbfc:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    cbfe:	0020      	movs	r0, r4
    cc00:	4b06      	ldr	r3, [pc, #24]	; (cc1c <http_client_socket_event_handler+0x1b0>)
    cc02:	4798      	blx	r3
    cc04:	e7d0      	b.n	cba8 <http_client_socket_event_handler+0x13c>
    cc06:	46c0      	nop			; (mov r8, r8)
    cc08:	20000224 	.word	0x20000224
    cc0c:	0000cde1 	.word	0x0000cde1
    cc10:	0000c5d9 	.word	0x0000c5d9
    cc14:	0000bed1 	.word	0x0000bed1
    cc18:	00013d70 	.word	0x00013d70
    cc1c:	0000bdb9 	.word	0x0000bdb9
    cc20:	0000ca39 	.word	0x0000ca39
    cc24:	00013dac 	.word	0x00013dac
    cc28:	00013de8 	.word	0x00013de8

0000cc2c <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    cc2c:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    cc2e:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    cc30:	2200      	movs	r2, #0
    cc32:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    cc34:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    cc36:	9b00      	ldr	r3, [sp, #0]
    cc38:	60c3      	str	r3, [r0, #12]
}
    cc3a:	4770      	bx	lr

0000cc3c <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    cc3c:	b510      	push	{r4, lr}
    cc3e:	0004      	movs	r4, r0
	if(writer->written > 0) {
    cc40:	6842      	ldr	r2, [r0, #4]
    cc42:	2a00      	cmp	r2, #0
    cc44:	d100      	bne.n	cc48 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    cc46:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    cc48:	6901      	ldr	r1, [r0, #16]
    cc4a:	68c0      	ldr	r0, [r0, #12]
    cc4c:	68a3      	ldr	r3, [r4, #8]
    cc4e:	4798      	blx	r3
		writer->written = 0;
    cc50:	2300      	movs	r3, #0
    cc52:	6063      	str	r3, [r4, #4]
}
    cc54:	e7f7      	b.n	cc46 <stream_writer_send_remain+0xa>
	...

0000cc58 <stream_writer_send_8>:
{
    cc58:	b570      	push	{r4, r5, r6, lr}
    cc5a:	0004      	movs	r4, r0
    cc5c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    cc5e:	6803      	ldr	r3, [r0, #0]
    cc60:	6842      	ldr	r2, [r0, #4]
    cc62:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    cc64:	2b00      	cmp	r3, #0
    cc66:	dd05      	ble.n	cc74 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    cc68:	6922      	ldr	r2, [r4, #16]
    cc6a:	6863      	ldr	r3, [r4, #4]
    cc6c:	1c59      	adds	r1, r3, #1
    cc6e:	6061      	str	r1, [r4, #4]
    cc70:	54d5      	strb	r5, [r2, r3]
}
    cc72:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    cc74:	4b01      	ldr	r3, [pc, #4]	; (cc7c <stream_writer_send_8+0x24>)
    cc76:	4798      	blx	r3
    cc78:	e7f6      	b.n	cc68 <stream_writer_send_8+0x10>
    cc7a:	46c0      	nop			; (mov r8, r8)
    cc7c:	0000cc3d 	.word	0x0000cc3d

0000cc80 <stream_writer_send_16BE>:
{
    cc80:	b570      	push	{r4, r5, r6, lr}
    cc82:	0006      	movs	r6, r0
    cc84:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    cc86:	1209      	asrs	r1, r1, #8
    cc88:	4d02      	ldr	r5, [pc, #8]	; (cc94 <stream_writer_send_16BE+0x14>)
    cc8a:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    cc8c:	b261      	sxtb	r1, r4
    cc8e:	0030      	movs	r0, r6
    cc90:	47a8      	blx	r5
}
    cc92:	bd70      	pop	{r4, r5, r6, pc}
    cc94:	0000cc59 	.word	0x0000cc59

0000cc98 <stream_writer_send_buffer>:
{
    cc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc9a:	0006      	movs	r6, r0
    cc9c:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    cc9e:	2a00      	cmp	r2, #0
    cca0:	d008      	beq.n	ccb4 <stream_writer_send_buffer+0x1c>
    cca2:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    cca4:	4f04      	ldr	r7, [pc, #16]	; (ccb8 <stream_writer_send_buffer+0x20>)
    cca6:	2100      	movs	r1, #0
    cca8:	5661      	ldrsb	r1, [r4, r1]
    ccaa:	0030      	movs	r0, r6
    ccac:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    ccae:	3401      	adds	r4, #1
    ccb0:	42a5      	cmp	r5, r4
    ccb2:	d1f8      	bne.n	cca6 <stream_writer_send_buffer+0xe>
}
    ccb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ccb6:	46c0      	nop			; (mov r8, r8)
    ccb8:	0000cc59 	.word	0x0000cc59

0000ccbc <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    ccbc:	4a02      	ldr	r2, [pc, #8]	; (ccc8 <sw_timer_tcc_callback+0xc>)
    ccbe:	6813      	ldr	r3, [r2, #0]
    ccc0:	3301      	adds	r3, #1
    ccc2:	6013      	str	r3, [r2, #0]
}
    ccc4:	4770      	bx	lr
    ccc6:	46c0      	nop			; (mov r8, r8)
    ccc8:	20000240 	.word	0x20000240

0000cccc <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    cccc:	2364      	movs	r3, #100	; 0x64
    ccce:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    ccd0:	2300      	movs	r3, #0
    ccd2:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    ccd4:	7043      	strb	r3, [r0, #1]
}
    ccd6:	4770      	bx	lr

0000ccd8 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    ccd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccda:	46c6      	mov	lr, r8
    ccdc:	b500      	push	{lr}
    ccde:	b0ac      	sub	sp, #176	; 0xb0
    cce0:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    cce2:	466e      	mov	r6, sp
    cce4:	4b1d      	ldr	r3, [pc, #116]	; (cd5c <sw_timer_init+0x84>)
    cce6:	466a      	mov	r2, sp
    cce8:	cb92      	ldmia	r3!, {r1, r4, r7}
    ccea:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    ccec:	886b      	ldrh	r3, [r5, #2]
    ccee:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    ccf0:	3014      	adds	r0, #20
    ccf2:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    ccf4:	782b      	ldrb	r3, [r5, #0]
    ccf6:	009b      	lsls	r3, r3, #2
    ccf8:	5999      	ldr	r1, [r3, r6]
    ccfa:	0017      	movs	r7, r2
    ccfc:	0010      	movs	r0, r2
    ccfe:	4b18      	ldr	r3, [pc, #96]	; (cd60 <sw_timer_init+0x88>)
    cd00:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    cd02:	2000      	movs	r0, #0
    cd04:	4b17      	ldr	r3, [pc, #92]	; (cd64 <sw_timer_init+0x8c>)
    cd06:	4798      	blx	r3
    cd08:	4b17      	ldr	r3, [pc, #92]	; (cd68 <sw_timer_init+0x90>)
    cd0a:	7a1b      	ldrb	r3, [r3, #8]
    cd0c:	b2db      	uxtb	r3, r3
    cd0e:	40d8      	lsrs	r0, r3
    cd10:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    cd12:	8869      	ldrh	r1, [r5, #2]
    cd14:	20fa      	movs	r0, #250	; 0xfa
    cd16:	0200      	lsls	r0, r0, #8
    cd18:	4b14      	ldr	r3, [pc, #80]	; (cd6c <sw_timer_init+0x94>)
    cd1a:	4798      	blx	r3
    cd1c:	0001      	movs	r1, r0
    cd1e:	4640      	mov	r0, r8
    cd20:	4b13      	ldr	r3, [pc, #76]	; (cd70 <sw_timer_init+0x98>)
    cd22:	4798      	blx	r3
    cd24:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    cd26:	2305      	movs	r3, #5
    cd28:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    cd2a:	782b      	ldrb	r3, [r5, #0]
    cd2c:	009b      	lsls	r3, r3, #2
    cd2e:	5999      	ldr	r1, [r3, r6]
    cd30:	003a      	movs	r2, r7
    cd32:	0020      	movs	r0, r4
    cd34:	4b0f      	ldr	r3, [pc, #60]	; (cd74 <sw_timer_init+0x9c>)
    cd36:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    cd38:	786a      	ldrb	r2, [r5, #1]
    cd3a:	3208      	adds	r2, #8
    cd3c:	b2d2      	uxtb	r2, r2
    cd3e:	490e      	ldr	r1, [pc, #56]	; (cd78 <sw_timer_init+0xa0>)
    cd40:	0020      	movs	r0, r4
    cd42:	4b0e      	ldr	r3, [pc, #56]	; (cd7c <sw_timer_init+0xa4>)
    cd44:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    cd46:	7869      	ldrb	r1, [r5, #1]
    cd48:	3108      	adds	r1, #8
    cd4a:	b2c9      	uxtb	r1, r1
    cd4c:	0020      	movs	r0, r4
    cd4e:	4b0c      	ldr	r3, [pc, #48]	; (cd80 <sw_timer_init+0xa8>)
    cd50:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    cd52:	b02c      	add	sp, #176	; 0xb0
    cd54:	bc04      	pop	{r2}
    cd56:	4690      	mov	r8, r2
    cd58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd5a:	46c0      	nop			; (mov r8, r8)
    cd5c:	00013f58 	.word	0x00013f58
    cd60:	0000b635 	.word	0x0000b635
    cd64:	0000f439 	.word	0x0000f439
    cd68:	40000400 	.word	0x40000400
    cd6c:	00011571 	.word	0x00011571
    cd70:	0001145d 	.word	0x0001145d
    cd74:	0000b781 	.word	0x0000b781
    cd78:	0000ccbd 	.word	0x0000ccbd
    cd7c:	0000bb8d 	.word	0x0000bb8d
    cd80:	0000bba5 	.word	0x0000bba5

0000cd84 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    cd84:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    cd86:	2102      	movs	r1, #2
    cd88:	6893      	ldr	r3, [r2, #8]
    cd8a:	4219      	tst	r1, r3
    cd8c:	d1fc      	bne.n	cd88 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    cd8e:	6813      	ldr	r3, [r2, #0]
    cd90:	2102      	movs	r1, #2
    cd92:	430b      	orrs	r3, r1
    cd94:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    cd96:	4770      	bx	lr

0000cd98 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    cd98:	b570      	push	{r4, r5, r6, lr}
    cd9a:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    cd9c:	7805      	ldrb	r5, [r0, #0]
    cd9e:	07e8      	lsls	r0, r5, #31
    cda0:	d502      	bpl.n	cda8 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    cda2:	2001      	movs	r0, #1
    cda4:	4240      	negs	r0, r0
}
    cda6:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    cda8:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    cdaa:	0029      	movs	r1, r5
    cdac:	2002      	movs	r0, #2
    cdae:	4381      	bics	r1, r0
    cdb0:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    cdb2:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    cdb4:	6d61      	ldr	r1, [r4, #84]	; 0x54
    cdb6:	0018      	movs	r0, r3
    cdb8:	4b04      	ldr	r3, [pc, #16]	; (cdcc <sw_timer_register_callback+0x34>)
    cdba:	4798      	blx	r3
    cdbc:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    cdbe:	7823      	ldrb	r3, [r4, #0]
    cdc0:	2201      	movs	r2, #1
    cdc2:	4313      	orrs	r3, r2
    cdc4:	7023      	strb	r3, [r4, #0]
			return index;
    cdc6:	2000      	movs	r0, #0
    cdc8:	e7ed      	b.n	cda6 <sw_timer_register_callback+0xe>
    cdca:	46c0      	nop			; (mov r8, r8)
    cdcc:	0001145d 	.word	0x0001145d

0000cdd0 <sw_timer_unregister_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->used = 0;
    cdd0:	008b      	lsls	r3, r1, #2
    cdd2:	1859      	adds	r1, r3, r1
    cdd4:	0089      	lsls	r1, r1, #2
    cdd6:	5c0b      	ldrb	r3, [r1, r0]
    cdd8:	2201      	movs	r2, #1
    cdda:	4393      	bics	r3, r2
    cddc:	540b      	strb	r3, [r1, r0]
}
    cdde:	4770      	bx	lr

0000cde0 <sw_timer_enable_callback>:

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    cde0:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    cde2:	008b      	lsls	r3, r1, #2
    cde4:	185d      	adds	r5, r3, r1
    cde6:	00ad      	lsls	r5, r5, #2
    cde8:	5c29      	ldrb	r1, [r5, r0]
    cdea:	2602      	movs	r6, #2
    cdec:	4331      	orrs	r1, r6
    cdee:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    cdf0:	1944      	adds	r4, r0, r5
    cdf2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    cdf4:	0010      	movs	r0, r2
    cdf6:	4b03      	ldr	r3, [pc, #12]	; (ce04 <sw_timer_enable_callback+0x24>)
    cdf8:	4798      	blx	r3
    cdfa:	4b03      	ldr	r3, [pc, #12]	; (ce08 <sw_timer_enable_callback+0x28>)
    cdfc:	681b      	ldr	r3, [r3, #0]
    cdfe:	18c0      	adds	r0, r0, r3
    ce00:	6120      	str	r0, [r4, #16]
}
    ce02:	bd70      	pop	{r4, r5, r6, pc}
    ce04:	0001145d 	.word	0x0001145d
    ce08:	20000240 	.word	0x20000240

0000ce0c <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    ce0c:	008b      	lsls	r3, r1, #2
    ce0e:	1859      	adds	r1, r3, r1
    ce10:	0089      	lsls	r1, r1, #2
    ce12:	5c0b      	ldrb	r3, [r1, r0]
    ce14:	2202      	movs	r2, #2
    ce16:	4393      	bics	r3, r2
    ce18:	540b      	strb	r3, [r1, r0]
}
    ce1a:	4770      	bx	lr

0000ce1c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    ce1c:	b570      	push	{r4, r5, r6, lr}
    ce1e:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    ce20:	7803      	ldrb	r3, [r0, #0]
    ce22:	07db      	lsls	r3, r3, #31
    ce24:	d507      	bpl.n	ce36 <sw_timer_task+0x1a>
    ce26:	7803      	ldrb	r3, [r0, #0]
    ce28:	079b      	lsls	r3, r3, #30
    ce2a:	d504      	bpl.n	ce36 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    ce2c:	4b10      	ldr	r3, [pc, #64]	; (ce70 <sw_timer_task+0x54>)
    ce2e:	681a      	ldr	r2, [r3, #0]
    ce30:	6903      	ldr	r3, [r0, #16]
    ce32:	1a9b      	subs	r3, r3, r2
    ce34:	d400      	bmi.n	ce38 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    ce36:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    ce38:	7803      	ldrb	r3, [r0, #0]
    ce3a:	075b      	lsls	r3, r3, #29
    ce3c:	d4fb      	bmi.n	ce36 <sw_timer_task+0x1a>
				handler->busy = 1;
    ce3e:	7803      	ldrb	r3, [r0, #0]
    ce40:	2104      	movs	r1, #4
    ce42:	430b      	orrs	r3, r1
    ce44:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    ce46:	68c3      	ldr	r3, [r0, #12]
    ce48:	2b00      	cmp	r3, #0
    ce4a:	d00b      	beq.n	ce64 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    ce4c:	18d2      	adds	r2, r2, r3
    ce4e:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    ce50:	68a2      	ldr	r2, [r4, #8]
    ce52:	2100      	movs	r1, #0
    ce54:	0020      	movs	r0, r4
    ce56:	6865      	ldr	r5, [r4, #4]
    ce58:	47a8      	blx	r5
				handler->busy = 0;
    ce5a:	7823      	ldrb	r3, [r4, #0]
    ce5c:	2204      	movs	r2, #4
    ce5e:	4393      	bics	r3, r2
    ce60:	7023      	strb	r3, [r4, #0]
}
    ce62:	e7e8      	b.n	ce36 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    ce64:	7802      	ldrb	r2, [r0, #0]
    ce66:	2102      	movs	r1, #2
    ce68:	438a      	bics	r2, r1
    ce6a:	7002      	strb	r2, [r0, #0]
    ce6c:	e7f0      	b.n	ce50 <sw_timer_task+0x34>
    ce6e:	46c0      	nop			; (mov r8, r8)
    ce70:	20000240 	.word	0x20000240

0000ce74 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    ce74:	4b0c      	ldr	r3, [pc, #48]	; (cea8 <cpu_irq_enter_critical+0x34>)
    ce76:	681b      	ldr	r3, [r3, #0]
    ce78:	2b00      	cmp	r3, #0
    ce7a:	d106      	bne.n	ce8a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    ce7c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    ce80:	2b00      	cmp	r3, #0
    ce82:	d007      	beq.n	ce94 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    ce84:	2200      	movs	r2, #0
    ce86:	4b09      	ldr	r3, [pc, #36]	; (ceac <cpu_irq_enter_critical+0x38>)
    ce88:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    ce8a:	4a07      	ldr	r2, [pc, #28]	; (cea8 <cpu_irq_enter_critical+0x34>)
    ce8c:	6813      	ldr	r3, [r2, #0]
    ce8e:	3301      	adds	r3, #1
    ce90:	6013      	str	r3, [r2, #0]
}
    ce92:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    ce94:	b672      	cpsid	i
    ce96:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    ce9a:	2200      	movs	r2, #0
    ce9c:	4b04      	ldr	r3, [pc, #16]	; (ceb0 <cpu_irq_enter_critical+0x3c>)
    ce9e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    cea0:	3201      	adds	r2, #1
    cea2:	4b02      	ldr	r3, [pc, #8]	; (ceac <cpu_irq_enter_critical+0x38>)
    cea4:	701a      	strb	r2, [r3, #0]
    cea6:	e7f0      	b.n	ce8a <cpu_irq_enter_critical+0x16>
    cea8:	20000244 	.word	0x20000244
    ceac:	20000248 	.word	0x20000248
    ceb0:	20000002 	.word	0x20000002

0000ceb4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    ceb4:	4b08      	ldr	r3, [pc, #32]	; (ced8 <cpu_irq_leave_critical+0x24>)
    ceb6:	681a      	ldr	r2, [r3, #0]
    ceb8:	3a01      	subs	r2, #1
    ceba:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    cebc:	681b      	ldr	r3, [r3, #0]
    cebe:	2b00      	cmp	r3, #0
    cec0:	d109      	bne.n	ced6 <cpu_irq_leave_critical+0x22>
    cec2:	4b06      	ldr	r3, [pc, #24]	; (cedc <cpu_irq_leave_critical+0x28>)
    cec4:	781b      	ldrb	r3, [r3, #0]
    cec6:	2b00      	cmp	r3, #0
    cec8:	d005      	beq.n	ced6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    ceca:	2201      	movs	r2, #1
    cecc:	4b04      	ldr	r3, [pc, #16]	; (cee0 <cpu_irq_leave_critical+0x2c>)
    cece:	701a      	strb	r2, [r3, #0]
    ced0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ced4:	b662      	cpsie	i
	}
}
    ced6:	4770      	bx	lr
    ced8:	20000244 	.word	0x20000244
    cedc:	20000248 	.word	0x20000248
    cee0:	20000002 	.word	0x20000002

0000cee4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    cee4:	e7fe      	b.n	cee4 <Dummy_Handler>
	...

0000cee8 <Reset_Handler>:
{
    cee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    ceea:	4a2a      	ldr	r2, [pc, #168]	; (cf94 <Reset_Handler+0xac>)
    ceec:	4b2a      	ldr	r3, [pc, #168]	; (cf98 <Reset_Handler+0xb0>)
    ceee:	429a      	cmp	r2, r3
    cef0:	d011      	beq.n	cf16 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    cef2:	001a      	movs	r2, r3
    cef4:	4b29      	ldr	r3, [pc, #164]	; (cf9c <Reset_Handler+0xb4>)
    cef6:	429a      	cmp	r2, r3
    cef8:	d20d      	bcs.n	cf16 <Reset_Handler+0x2e>
    cefa:	4a29      	ldr	r2, [pc, #164]	; (cfa0 <Reset_Handler+0xb8>)
    cefc:	3303      	adds	r3, #3
    cefe:	1a9b      	subs	r3, r3, r2
    cf00:	089b      	lsrs	r3, r3, #2
    cf02:	3301      	adds	r3, #1
    cf04:	009b      	lsls	r3, r3, #2
    cf06:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    cf08:	4823      	ldr	r0, [pc, #140]	; (cf98 <Reset_Handler+0xb0>)
    cf0a:	4922      	ldr	r1, [pc, #136]	; (cf94 <Reset_Handler+0xac>)
    cf0c:	588c      	ldr	r4, [r1, r2]
    cf0e:	5084      	str	r4, [r0, r2]
    cf10:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    cf12:	429a      	cmp	r2, r3
    cf14:	d1fa      	bne.n	cf0c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    cf16:	4a23      	ldr	r2, [pc, #140]	; (cfa4 <Reset_Handler+0xbc>)
    cf18:	4b23      	ldr	r3, [pc, #140]	; (cfa8 <Reset_Handler+0xc0>)
    cf1a:	429a      	cmp	r2, r3
    cf1c:	d20a      	bcs.n	cf34 <Reset_Handler+0x4c>
    cf1e:	43d3      	mvns	r3, r2
    cf20:	4921      	ldr	r1, [pc, #132]	; (cfa8 <Reset_Handler+0xc0>)
    cf22:	185b      	adds	r3, r3, r1
    cf24:	2103      	movs	r1, #3
    cf26:	438b      	bics	r3, r1
    cf28:	3304      	adds	r3, #4
    cf2a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    cf2c:	2100      	movs	r1, #0
    cf2e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    cf30:	4293      	cmp	r3, r2
    cf32:	d1fc      	bne.n	cf2e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    cf34:	4a1d      	ldr	r2, [pc, #116]	; (cfac <Reset_Handler+0xc4>)
    cf36:	21ff      	movs	r1, #255	; 0xff
    cf38:	4b1d      	ldr	r3, [pc, #116]	; (cfb0 <Reset_Handler+0xc8>)
    cf3a:	438b      	bics	r3, r1
    cf3c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    cf3e:	39fd      	subs	r1, #253	; 0xfd
    cf40:	2390      	movs	r3, #144	; 0x90
    cf42:	005b      	lsls	r3, r3, #1
    cf44:	4a1b      	ldr	r2, [pc, #108]	; (cfb4 <Reset_Handler+0xcc>)
    cf46:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    cf48:	4a1b      	ldr	r2, [pc, #108]	; (cfb8 <Reset_Handler+0xd0>)
    cf4a:	78d3      	ldrb	r3, [r2, #3]
    cf4c:	2503      	movs	r5, #3
    cf4e:	43ab      	bics	r3, r5
    cf50:	2402      	movs	r4, #2
    cf52:	4323      	orrs	r3, r4
    cf54:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    cf56:	78d3      	ldrb	r3, [r2, #3]
    cf58:	270c      	movs	r7, #12
    cf5a:	43bb      	bics	r3, r7
    cf5c:	2608      	movs	r6, #8
    cf5e:	4333      	orrs	r3, r6
    cf60:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    cf62:	4b16      	ldr	r3, [pc, #88]	; (cfbc <Reset_Handler+0xd4>)
    cf64:	7b98      	ldrb	r0, [r3, #14]
    cf66:	2230      	movs	r2, #48	; 0x30
    cf68:	4390      	bics	r0, r2
    cf6a:	2220      	movs	r2, #32
    cf6c:	4310      	orrs	r0, r2
    cf6e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    cf70:	7b99      	ldrb	r1, [r3, #14]
    cf72:	43b9      	bics	r1, r7
    cf74:	4331      	orrs	r1, r6
    cf76:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    cf78:	7b9a      	ldrb	r2, [r3, #14]
    cf7a:	43aa      	bics	r2, r5
    cf7c:	4322      	orrs	r2, r4
    cf7e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    cf80:	4a0f      	ldr	r2, [pc, #60]	; (cfc0 <Reset_Handler+0xd8>)
    cf82:	6853      	ldr	r3, [r2, #4]
    cf84:	2180      	movs	r1, #128	; 0x80
    cf86:	430b      	orrs	r3, r1
    cf88:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    cf8a:	4b0e      	ldr	r3, [pc, #56]	; (cfc4 <Reset_Handler+0xdc>)
    cf8c:	4798      	blx	r3
        main();
    cf8e:	4b0e      	ldr	r3, [pc, #56]	; (cfc8 <Reset_Handler+0xe0>)
    cf90:	4798      	blx	r3
    cf92:	e7fe      	b.n	cf92 <Reset_Handler+0xaa>
    cf94:	00014adc 	.word	0x00014adc
    cf98:	20000000 	.word	0x20000000
    cf9c:	200001f0 	.word	0x200001f0
    cfa0:	20000004 	.word	0x20000004
    cfa4:	200001f0 	.word	0x200001f0
    cfa8:	20000fc0 	.word	0x20000fc0
    cfac:	e000ed00 	.word	0xe000ed00
    cfb0:	00008000 	.word	0x00008000
    cfb4:	41007000 	.word	0x41007000
    cfb8:	41005000 	.word	0x41005000
    cfbc:	41004800 	.word	0x41004800
    cfc0:	41004000 	.word	0x41004000
    cfc4:	000117a9 	.word	0x000117a9
    cfc8:	0000ff01 	.word	0x0000ff01

0000cfcc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    cfcc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    cfce:	4a06      	ldr	r2, [pc, #24]	; (cfe8 <_sbrk+0x1c>)
    cfd0:	6812      	ldr	r2, [r2, #0]
    cfd2:	2a00      	cmp	r2, #0
    cfd4:	d004      	beq.n	cfe0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    cfd6:	4a04      	ldr	r2, [pc, #16]	; (cfe8 <_sbrk+0x1c>)
    cfd8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    cfda:	18c3      	adds	r3, r0, r3
    cfdc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    cfde:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    cfe0:	4902      	ldr	r1, [pc, #8]	; (cfec <_sbrk+0x20>)
    cfe2:	4a01      	ldr	r2, [pc, #4]	; (cfe8 <_sbrk+0x1c>)
    cfe4:	6011      	str	r1, [r2, #0]
    cfe6:	e7f6      	b.n	cfd6 <_sbrk+0xa>
    cfe8:	2000024c 	.word	0x2000024c
    cfec:	20002fc0 	.word	0x20002fc0

0000cff0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    cff0:	2001      	movs	r0, #1
    cff2:	4240      	negs	r0, r0
    cff4:	4770      	bx	lr

0000cff6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    cff6:	2380      	movs	r3, #128	; 0x80
    cff8:	019b      	lsls	r3, r3, #6
    cffa:	604b      	str	r3, [r1, #4]

	return 0;
}
    cffc:	2000      	movs	r0, #0
    cffe:	4770      	bx	lr

0000d000 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    d000:	2001      	movs	r0, #1
    d002:	4770      	bx	lr

0000d004 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    d004:	2000      	movs	r0, #0
    d006:	4770      	bx	lr

0000d008 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    d008:	4770      	bx	lr
	...

0000d00c <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    d00c:	b530      	push	{r4, r5, lr}
    d00e:	b085      	sub	sp, #20
    d010:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    d012:	2300      	movs	r3, #0
    d014:	9303      	str	r3, [sp, #12]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    d016:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    d018:	4b2f      	ldr	r3, [pc, #188]	; (d0d8 <at25dfx_chip_check_presence+0xcc>)
    d01a:	4798      	blx	r3
	if (module->locked) {
    d01c:	792b      	ldrb	r3, [r5, #4]
    d01e:	2b00      	cmp	r3, #0
    d020:	d156      	bne.n	d0d0 <at25dfx_chip_check_presence+0xc4>
		module->locked = true;
    d022:	3301      	adds	r3, #1
    d024:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    d026:	4b2d      	ldr	r3, [pc, #180]	; (d0dc <at25dfx_chip_check_presence+0xd0>)
    d028:	4798      	blx	r3
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    d02a:	229f      	movs	r2, #159	; 0x9f
    d02c:	ab01      	add	r3, sp, #4
    d02e:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    d030:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d032:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d034:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d036:	2900      	cmp	r1, #0
    d038:	d104      	bne.n	d044 <at25dfx_chip_check_presence+0x38>
		return &(ports[port_index]->Group[group_index]);
    d03a:	0953      	lsrs	r3, r2, #5
    d03c:	01db      	lsls	r3, r3, #7
    d03e:	4928      	ldr	r1, [pc, #160]	; (d0e0 <at25dfx_chip_check_presence+0xd4>)
    d040:	468c      	mov	ip, r1
    d042:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d044:	211f      	movs	r1, #31
    d046:	4011      	ands	r1, r2
    d048:	2201      	movs	r2, #1
    d04a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    d04c:	615a      	str	r2, [r3, #20]
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    d04e:	2201      	movs	r2, #1
    d050:	a901      	add	r1, sp, #4
    d052:	6820      	ldr	r0, [r4, #0]
    d054:	4b23      	ldr	r3, [pc, #140]	; (d0e4 <at25dfx_chip_check_presence+0xd8>)
    d056:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
    d058:	2300      	movs	r3, #0
    d05a:	2203      	movs	r2, #3
    d05c:	a903      	add	r1, sp, #12
    d05e:	6820      	ldr	r0, [r4, #0]
    d060:	4d21      	ldr	r5, [pc, #132]	; (d0e8 <at25dfx_chip_check_presence+0xdc>)
    d062:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    d064:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d066:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d068:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d06a:	2900      	cmp	r1, #0
    d06c:	d104      	bne.n	d078 <at25dfx_chip_check_presence+0x6c>
		return &(ports[port_index]->Group[group_index]);
    d06e:	0953      	lsrs	r3, r2, #5
    d070:	01db      	lsls	r3, r3, #7
    d072:	491b      	ldr	r1, [pc, #108]	; (d0e0 <at25dfx_chip_check_presence+0xd4>)
    d074:	468c      	mov	ip, r1
    d076:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d078:	211f      	movs	r1, #31
    d07a:	4011      	ands	r1, r2
    d07c:	2201      	movs	r2, #1
    d07e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d080:	619a      	str	r2, [r3, #24]
	module->locked = false;
    d082:	2300      	movs	r3, #0
    d084:	6822      	ldr	r2, [r4, #0]
    d086:	7113      	strb	r3, [r2, #4]
	switch (type) {
    d088:	7923      	ldrb	r3, [r4, #4]
    d08a:	2b09      	cmp	r3, #9
    d08c:	d815      	bhi.n	d0ba <at25dfx_chip_check_presence+0xae>
    d08e:	009b      	lsls	r3, r3, #2
    d090:	4a16      	ldr	r2, [pc, #88]	; (d0ec <at25dfx_chip_check_presence+0xe0>)
    d092:	58d3      	ldr	r3, [r2, r3]
    d094:	469f      	mov	pc, r3
		return 0x00431f;
    d096:	4b16      	ldr	r3, [pc, #88]	; (d0f0 <at25dfx_chip_check_presence+0xe4>)
    d098:	e012      	b.n	d0c0 <at25dfx_chip_check_presence+0xb4>
		return 0x01441f;
    d09a:	4b16      	ldr	r3, [pc, #88]	; (d0f4 <at25dfx_chip_check_presence+0xe8>)
    d09c:	e010      	b.n	d0c0 <at25dfx_chip_check_presence+0xb4>
		return 0x02451f;
    d09e:	4b16      	ldr	r3, [pc, #88]	; (d0f8 <at25dfx_chip_check_presence+0xec>)
    d0a0:	e00e      	b.n	d0c0 <at25dfx_chip_check_presence+0xb4>
		return 0x01451f;
    d0a2:	4b16      	ldr	r3, [pc, #88]	; (d0fc <at25dfx_chip_check_presence+0xf0>)
    d0a4:	e00c      	b.n	d0c0 <at25dfx_chip_check_presence+0xb4>
		return 0x02461f;
    d0a6:	4b16      	ldr	r3, [pc, #88]	; (d100 <at25dfx_chip_check_presence+0xf4>)
    d0a8:	e00a      	b.n	d0c0 <at25dfx_chip_check_presence+0xb4>
		return 0x03461f;
    d0aa:	4b16      	ldr	r3, [pc, #88]	; (d104 <at25dfx_chip_check_presence+0xf8>)
    d0ac:	e008      	b.n	d0c0 <at25dfx_chip_check_presence+0xb4>
		return 0x00861f;
    d0ae:	4b16      	ldr	r3, [pc, #88]	; (d108 <at25dfx_chip_check_presence+0xfc>)
    d0b0:	e006      	b.n	d0c0 <at25dfx_chip_check_presence+0xb4>
		return 0x01471f;
    d0b2:	4b16      	ldr	r3, [pc, #88]	; (d10c <at25dfx_chip_check_presence+0x100>)
    d0b4:	e004      	b.n	d0c0 <at25dfx_chip_check_presence+0xb4>
		return 0x00481f;
    d0b6:	4b16      	ldr	r3, [pc, #88]	; (d110 <at25dfx_chip_check_presence+0x104>)
    d0b8:	e002      	b.n	d0c0 <at25dfx_chip_check_presence+0xb4>
		return 0;
    d0ba:	2300      	movs	r3, #0
    d0bc:	e000      	b.n	d0c0 <at25dfx_chip_check_presence+0xb4>
		return 0x00651f;
    d0be:	4b15      	ldr	r3, [pc, #84]	; (d114 <at25dfx_chip_check_presence+0x108>)

	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
    d0c0:	9a03      	ldr	r2, [sp, #12]
    d0c2:	429a      	cmp	r2, r3
    d0c4:	d002      	beq.n	d0cc <at25dfx_chip_check_presence+0xc0>
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
    d0c6:	2014      	movs	r0, #20
	}
}
    d0c8:	b005      	add	sp, #20
    d0ca:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    d0cc:	2000      	movs	r0, #0
    d0ce:	e7fb      	b.n	d0c8 <at25dfx_chip_check_presence+0xbc>
    d0d0:	4b02      	ldr	r3, [pc, #8]	; (d0dc <at25dfx_chip_check_presence+0xd0>)
    d0d2:	4798      	blx	r3
		return status;
    d0d4:	2005      	movs	r0, #5
    d0d6:	e7f7      	b.n	d0c8 <at25dfx_chip_check_presence+0xbc>
    d0d8:	0000ce75 	.word	0x0000ce75
    d0dc:	0000ceb5 	.word	0x0000ceb5
    d0e0:	41004400 	.word	0x41004400
    d0e4:	0000e505 	.word	0x0000e505
    d0e8:	0000e2f5 	.word	0x0000e2f5
    d0ec:	00013f64 	.word	0x00013f64
    d0f0:	0000431f 	.word	0x0000431f
    d0f4:	0001441f 	.word	0x0001441f
    d0f8:	0002451f 	.word	0x0002451f
    d0fc:	0001451f 	.word	0x0001451f
    d100:	0002461f 	.word	0x0002461f
    d104:	0003461f 	.word	0x0003461f
    d108:	0000861f 	.word	0x0000861f
    d10c:	0001471f 	.word	0x0001471f
    d110:	0000481f 	.word	0x0000481f
    d114:	0000651f 	.word	0x0000651f

0000d118 <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    d118:	b5f0      	push	{r4, r5, r6, r7, lr}
    d11a:	46de      	mov	lr, fp
    d11c:	4657      	mov	r7, sl
    d11e:	464e      	mov	r6, r9
    d120:	4645      	mov	r5, r8
    d122:	b5e0      	push	{r5, r6, r7, lr}
    d124:	b085      	sub	sp, #20
    d126:	0005      	movs	r5, r0
    d128:	000e      	movs	r6, r1
    d12a:	9201      	str	r2, [sp, #4]
    d12c:	001f      	movs	r7, r3

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    d12e:	185a      	adds	r2, r3, r1
	switch (type) {
    d130:	7903      	ldrb	r3, [r0, #4]
    d132:	2b09      	cmp	r3, #9
    d134:	d815      	bhi.n	d162 <at25dfx_chip_write_buffer+0x4a>
    d136:	009b      	lsls	r3, r3, #2
    d138:	49ae      	ldr	r1, [pc, #696]	; (d3f4 <at25dfx_chip_write_buffer+0x2dc>)
    d13a:	58cb      	ldr	r3, [r1, r3]
    d13c:	469f      	mov	pc, r3
		return 256 * 1024UL;
    d13e:	2380      	movs	r3, #128	; 0x80
    d140:	02db      	lsls	r3, r3, #11
    d142:	e012      	b.n	d16a <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
    d144:	2380      	movs	r3, #128	; 0x80
    d146:	031b      	lsls	r3, r3, #12
    d148:	e00f      	b.n	d16a <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
    d14a:	2380      	movs	r3, #128	; 0x80
    d14c:	035b      	lsls	r3, r3, #13
    d14e:	e00c      	b.n	d16a <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
    d150:	2380      	movs	r3, #128	; 0x80
    d152:	039b      	lsls	r3, r3, #14
    d154:	e009      	b.n	d16a <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
    d156:	2380      	movs	r3, #128	; 0x80
    d158:	03db      	lsls	r3, r3, #15
    d15a:	e006      	b.n	d16a <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
    d15c:	2380      	movs	r3, #128	; 0x80
    d15e:	041b      	lsls	r3, r3, #16
    d160:	e003      	b.n	d16a <at25dfx_chip_write_buffer+0x52>
		return 0;
    d162:	2300      	movs	r3, #0
    d164:	e001      	b.n	d16a <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
    d166:	2380      	movs	r3, #128	; 0x80
    d168:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    d16a:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    d16c:	429a      	cmp	r2, r3
    d16e:	d906      	bls.n	d17e <at25dfx_chip_write_buffer+0x66>
	}

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    d170:	b005      	add	sp, #20
    d172:	bc3c      	pop	{r2, r3, r4, r5}
    d174:	4690      	mov	r8, r2
    d176:	4699      	mov	r9, r3
    d178:	46a2      	mov	sl, r4
    d17a:	46ab      	mov	fp, r5
    d17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    d17e:	682c      	ldr	r4, [r5, #0]
	cpu_irq_enter_critical();
    d180:	4b9d      	ldr	r3, [pc, #628]	; (d3f8 <at25dfx_chip_write_buffer+0x2e0>)
    d182:	4798      	blx	r3
	if (module->locked) {
    d184:	7923      	ldrb	r3, [r4, #4]
    d186:	2b00      	cmp	r3, #0
    d188:	d000      	beq.n	d18c <at25dfx_chip_write_buffer+0x74>
    d18a:	e12e      	b.n	d3ea <at25dfx_chip_write_buffer+0x2d2>
		module->locked = true;
    d18c:	3301      	adds	r3, #1
    d18e:	7123      	strb	r3, [r4, #4]
	cpu_irq_leave_critical();
    d190:	4b9a      	ldr	r3, [pc, #616]	; (d3fc <at25dfx_chip_write_buffer+0x2e4>)
    d192:	4798      	blx	r3

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    d194:	2306      	movs	r3, #6
    d196:	aa02      	add	r2, sp, #8
    d198:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    d19a:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    d19c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d19e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d1a0:	2900      	cmp	r1, #0
    d1a2:	d104      	bne.n	d1ae <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
    d1a4:	0953      	lsrs	r3, r2, #5
    d1a6:	01db      	lsls	r3, r3, #7
    d1a8:	4995      	ldr	r1, [pc, #596]	; (d400 <at25dfx_chip_write_buffer+0x2e8>)
    d1aa:	468c      	mov	ip, r1
    d1ac:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d1ae:	211f      	movs	r1, #31
    d1b0:	4011      	ands	r1, r2
    d1b2:	2201      	movs	r2, #1
    d1b4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    d1b6:	615a      	str	r2, [r3, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    d1b8:	2201      	movs	r2, #1
    d1ba:	a902      	add	r1, sp, #8
    d1bc:	6828      	ldr	r0, [r5, #0]
    d1be:	4b91      	ldr	r3, [pc, #580]	; (d404 <at25dfx_chip_write_buffer+0x2ec>)
    d1c0:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    d1c2:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    d1c4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d1c6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d1c8:	2900      	cmp	r1, #0
    d1ca:	d104      	bne.n	d1d6 <at25dfx_chip_write_buffer+0xbe>
		return &(ports[port_index]->Group[group_index]);
    d1cc:	0953      	lsrs	r3, r2, #5
    d1ce:	01db      	lsls	r3, r3, #7
    d1d0:	498b      	ldr	r1, [pc, #556]	; (d400 <at25dfx_chip_write_buffer+0x2e8>)
    d1d2:	468c      	mov	ip, r1
    d1d4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d1d6:	211f      	movs	r1, #31
    d1d8:	4011      	ands	r1, r2
    d1da:	2201      	movs	r2, #1
    d1dc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d1de:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    d1e0:	22ff      	movs	r2, #255	; 0xff
    d1e2:	4032      	ands	r2, r6
    d1e4:	2380      	movs	r3, #128	; 0x80
    d1e6:	005b      	lsls	r3, r3, #1
    d1e8:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
    d1ea:	1c1a      	adds	r2, r3, #0
    d1ec:	b29b      	uxth	r3, r3
    d1ee:	42bb      	cmp	r3, r7
    d1f0:	d900      	bls.n	d1f4 <at25dfx_chip_write_buffer+0xdc>
    d1f2:	1c3a      	adds	r2, r7, #0
    d1f4:	b293      	uxth	r3, r2
    d1f6:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
    d1f8:	2302      	movs	r3, #2
    d1fa:	aa02      	add	r2, sp, #8
    d1fc:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    d1fe:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    d200:	0a33      	lsrs	r3, r6, #8
    d202:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    d204:	0c33      	lsrs	r3, r6, #16
    d206:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    d208:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    d20a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d20c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d20e:	2900      	cmp	r1, #0
    d210:	d104      	bne.n	d21c <at25dfx_chip_write_buffer+0x104>
		return &(ports[port_index]->Group[group_index]);
    d212:	0953      	lsrs	r3, r2, #5
    d214:	01db      	lsls	r3, r3, #7
    d216:	497a      	ldr	r1, [pc, #488]	; (d400 <at25dfx_chip_write_buffer+0x2e8>)
    d218:	468c      	mov	ip, r1
    d21a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d21c:	211f      	movs	r1, #31
    d21e:	4011      	ands	r1, r2
    d220:	2201      	movs	r2, #1
    d222:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    d224:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    d226:	2204      	movs	r2, #4
    d228:	a902      	add	r1, sp, #8
    d22a:	6828      	ldr	r0, [r5, #0]
    d22c:	4b75      	ldr	r3, [pc, #468]	; (d404 <at25dfx_chip_write_buffer+0x2ec>)
    d22e:	4798      	blx	r3
	Assert(status == STATUS_OK);

	if (cmd.length) {
    d230:	4653      	mov	r3, sl
    d232:	2b00      	cmp	r3, #0
    d234:	d145      	bne.n	d2c2 <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
    d236:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    d238:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d23a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d23c:	2900      	cmp	r1, #0
    d23e:	d104      	bne.n	d24a <at25dfx_chip_write_buffer+0x132>
		return &(ports[port_index]->Group[group_index]);
    d240:	0953      	lsrs	r3, r2, #5
    d242:	01db      	lsls	r3, r3, #7
    d244:	496e      	ldr	r1, [pc, #440]	; (d400 <at25dfx_chip_write_buffer+0x2e8>)
    d246:	468c      	mov	ip, r1
    d248:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d24a:	211f      	movs	r1, #31
    d24c:	4011      	ands	r1, r2
    d24e:	2201      	movs	r2, #1
    d250:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d252:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d254:	682b      	ldr	r3, [r5, #0]
    d256:	6819      	ldr	r1, [r3, #0]
	uint16_t status_reg = 0;

	UNUSED(status);

	// Issue status read command
	while (!spi_is_ready_to_write(chip->spi)) {
    d258:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d25a:	7e0b      	ldrb	r3, [r1, #24]
    d25c:	4213      	tst	r3, r2
    d25e:	d0fc      	beq.n	d25a <at25dfx_chip_write_buffer+0x142>
	port_pin_set_output_level(chip->cs_pin, false);
    d260:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    d262:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d264:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d266:	2900      	cmp	r1, #0
    d268:	d104      	bne.n	d274 <at25dfx_chip_write_buffer+0x15c>
		return &(ports[port_index]->Group[group_index]);
    d26a:	0953      	lsrs	r3, r2, #5
    d26c:	01db      	lsls	r3, r3, #7
    d26e:	4964      	ldr	r1, [pc, #400]	; (d400 <at25dfx_chip_write_buffer+0x2e8>)
    d270:	468c      	mov	ip, r1
    d272:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d274:	211f      	movs	r1, #31
    d276:	4011      	ands	r1, r2
    d278:	2201      	movs	r2, #1
    d27a:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    d27c:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d27e:	682b      	ldr	r3, [r5, #0]
    d280:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d282:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d284:	07d2      	lsls	r2, r2, #31
    d286:	d501      	bpl.n	d28c <at25dfx_chip_write_buffer+0x174>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d288:	2205      	movs	r2, #5
    d28a:	629a      	str	r2, [r3, #40]	; 0x28

	_at25dfx_chip_select(chip);
	status = spi_write(chip->spi, AT25DFX_COMMAND_READ_STATUS);
	Assert(status == STATUS_OK);

	while (!spi_is_ready_to_read(chip->spi)) {
    d28c:	6828      	ldr	r0, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d28e:	6802      	ldr	r2, [r0, #0]
    d290:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d292:	7e13      	ldrb	r3, [r2, #24]
    d294:	420b      	tst	r3, r1
    d296:	d0fc      	beq.n	d292 <at25dfx_chip_write_buffer+0x17a>
    d298:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    d29a:	2400      	movs	r4, #0
	if (!spi_is_ready_to_read(module)) {
    d29c:	075b      	lsls	r3, r3, #29
    d29e:	d509      	bpl.n	d2b4 <at25dfx_chip_write_buffer+0x19c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d2a0:	8b53      	ldrh	r3, [r2, #26]
    d2a2:	075b      	lsls	r3, r3, #29
    d2a4:	d501      	bpl.n	d2aa <at25dfx_chip_write_buffer+0x192>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d2a6:	2304      	movs	r3, #4
    d2a8:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d2aa:	7983      	ldrb	r3, [r0, #6]
    d2ac:	2b01      	cmp	r3, #1
    d2ae:	d00e      	beq.n	d2ce <at25dfx_chip_write_buffer+0x1b6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d2b0:	6a94      	ldr	r4, [r2, #40]	; 0x28
    d2b2:	b2e4      	uxtb	r4, r4

	// Keep reading until busy flag clears
	// TODO: Add some timeout functionality here!
	do {
		// Do dummy writes to read out status
		while (!spi_is_ready_to_write(chip->spi)) {
    d2b4:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d2b6:	2300      	movs	r3, #0
    d2b8:	4698      	mov	r8, r3
		}
		status = spi_write(chip->spi, 0);
		Assert(status == STATUS_OK);

		while (!spi_is_ready_to_read(chip->spi)) {
    d2ba:	2004      	movs	r0, #4
    d2bc:	46b4      	mov	ip, r6
    d2be:	002e      	movs	r6, r5
    d2c0:	e010      	b.n	d2e4 <at25dfx_chip_write_buffer+0x1cc>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    d2c2:	4652      	mov	r2, sl
    d2c4:	9901      	ldr	r1, [sp, #4]
    d2c6:	6828      	ldr	r0, [r5, #0]
    d2c8:	4b4e      	ldr	r3, [pc, #312]	; (d404 <at25dfx_chip_write_buffer+0x2ec>)
    d2ca:	4798      	blx	r3
    d2cc:	e7b3      	b.n	d236 <at25dfx_chip_write_buffer+0x11e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d2ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d2d0:	05db      	lsls	r3, r3, #23
    d2d2:	0ddc      	lsrs	r4, r3, #23
    d2d4:	e7ee      	b.n	d2b4 <at25dfx_chip_write_buffer+0x19c>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d2d6:	79ab      	ldrb	r3, [r5, #6]
    d2d8:	2b01      	cmp	r3, #1
    d2da:	d01a      	beq.n	d312 <at25dfx_chip_write_buffer+0x1fa>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d2dc:	6a94      	ldr	r4, [r2, #40]	; 0x28
    d2de:	b2e4      	uxtb	r4, r4
		}
		status = spi_read(chip->spi, &status_reg);
		Assert(status == STATUS_OK);
	} while (status_reg & AT25DFX_STATUS_BUSY);
    d2e0:	4221      	tst	r1, r4
    d2e2:	d01a      	beq.n	d31a <at25dfx_chip_write_buffer+0x202>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d2e4:	6833      	ldr	r3, [r6, #0]
    d2e6:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d2e8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    d2ea:	420b      	tst	r3, r1
    d2ec:	d0fc      	beq.n	d2e8 <at25dfx_chip_write_buffer+0x1d0>
    d2ee:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    d2f0:	420b      	tst	r3, r1
    d2f2:	d001      	beq.n	d2f8 <at25dfx_chip_write_buffer+0x1e0>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d2f4:	4643      	mov	r3, r8
    d2f6:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    d2f8:	6835      	ldr	r5, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d2fa:	682a      	ldr	r2, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d2fc:	7e13      	ldrb	r3, [r2, #24]
    d2fe:	4203      	tst	r3, r0
    d300:	d0fc      	beq.n	d2fc <at25dfx_chip_write_buffer+0x1e4>
    d302:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    d304:	4203      	tst	r3, r0
    d306:	d0eb      	beq.n	d2e0 <at25dfx_chip_write_buffer+0x1c8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d308:	8b53      	ldrh	r3, [r2, #26]
    d30a:	4203      	tst	r3, r0
    d30c:	d0e3      	beq.n	d2d6 <at25dfx_chip_write_buffer+0x1be>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d30e:	8350      	strh	r0, [r2, #26]
    d310:	e7e1      	b.n	d2d6 <at25dfx_chip_write_buffer+0x1be>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d312:	6a94      	ldr	r4, [r2, #40]	; 0x28
    d314:	05e4      	lsls	r4, r4, #23
    d316:	0de4      	lsrs	r4, r4, #23
    d318:	e7e2      	b.n	d2e0 <at25dfx_chip_write_buffer+0x1c8>
    d31a:	0035      	movs	r5, r6
    d31c:	4666      	mov	r6, ip
	port_pin_set_output_level(chip->cs_pin, true);
    d31e:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    d320:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d322:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d324:	2900      	cmp	r1, #0
    d326:	d104      	bne.n	d332 <at25dfx_chip_write_buffer+0x21a>
		return &(ports[port_index]->Group[group_index]);
    d328:	0953      	lsrs	r3, r2, #5
    d32a:	01db      	lsls	r3, r3, #7
    d32c:	4934      	ldr	r1, [pc, #208]	; (d400 <at25dfx_chip_write_buffer+0x2e8>)
    d32e:	468c      	mov	ip, r1
    d330:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d332:	211f      	movs	r1, #31
    d334:	4011      	ands	r1, r2
    d336:	2201      	movs	r2, #1
    d338:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d33a:	619a      	str	r2, [r3, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (status_reg & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
    d33c:	2010      	movs	r0, #16
	if (status_reg & AT25DFX_STATUS_ERROR) {
    d33e:	06a3      	lsls	r3, r4, #26
    d340:	d44f      	bmi.n	d3e2 <at25dfx_chip_write_buffer+0x2ca>
	length -= cmd.length;
    d342:	4653      	mov	r3, sl
    d344:	1aff      	subs	r7, r7, r3
    d346:	b2bb      	uxth	r3, r7
    d348:	0019      	movs	r1, r3
	while (length && (status == STATUS_OK)) {
    d34a:	9a01      	ldr	r2, [sp, #4]
    d34c:	4691      	mov	r9, r2
	}
	return STATUS_OK;
    d34e:	2000      	movs	r0, #0
    d350:	2b00      	cmp	r3, #0
    d352:	d046      	beq.n	d3e2 <at25dfx_chip_write_buffer+0x2ca>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d354:	231f      	movs	r3, #31
    d356:	469b      	mov	fp, r3
    d358:	2401      	movs	r4, #1
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    d35a:	4b2a      	ldr	r3, [pc, #168]	; (d404 <at25dfx_chip_write_buffer+0x2ec>)
    d35c:	4698      	mov	r8, r3
    d35e:	4653      	mov	r3, sl
    d360:	9301      	str	r3, [sp, #4]
    d362:	468a      	mov	sl, r1
    d364:	e058      	b.n	d418 <at25dfx_chip_write_buffer+0x300>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    d366:	001a      	movs	r2, r3
    d368:	4649      	mov	r1, r9
    d36a:	6828      	ldr	r0, [r5, #0]
    d36c:	4b25      	ldr	r3, [pc, #148]	; (d404 <at25dfx_chip_write_buffer+0x2ec>)
    d36e:	4798      	blx	r3
    d370:	e0a4      	b.n	d4bc <at25dfx_chip_write_buffer+0x3a4>
    d372:	6a90      	ldr	r0, [r2, #40]	; 0x28
    d374:	05c0      	lsls	r0, r0, #23
    d376:	0dc0      	lsrs	r0, r0, #23
    d378:	e0e1      	b.n	d53e <at25dfx_chip_write_buffer+0x426>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d37a:	79bb      	ldrb	r3, [r7, #6]
    d37c:	2b01      	cmp	r3, #1
    d37e:	d01a      	beq.n	d3b6 <at25dfx_chip_write_buffer+0x29e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d380:	6a90      	ldr	r0, [r2, #40]	; 0x28
    d382:	b2c0      	uxtb	r0, r0
	} while (status_reg & AT25DFX_STATUS_BUSY);
    d384:	4204      	tst	r4, r0
    d386:	d01a      	beq.n	d3be <at25dfx_chip_write_buffer+0x2a6>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d388:	682b      	ldr	r3, [r5, #0]
    d38a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d38c:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    d38e:	4223      	tst	r3, r4
    d390:	d0fc      	beq.n	d38c <at25dfx_chip_write_buffer+0x274>
    d392:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    d394:	4223      	tst	r3, r4
    d396:	d001      	beq.n	d39c <at25dfx_chip_write_buffer+0x284>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d398:	2300      	movs	r3, #0
    d39a:	6293      	str	r3, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    d39c:	682f      	ldr	r7, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d39e:	683a      	ldr	r2, [r7, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d3a0:	7e13      	ldrb	r3, [r2, #24]
    d3a2:	420b      	tst	r3, r1
    d3a4:	d0fc      	beq.n	d3a0 <at25dfx_chip_write_buffer+0x288>
    d3a6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    d3a8:	420b      	tst	r3, r1
    d3aa:	d0eb      	beq.n	d384 <at25dfx_chip_write_buffer+0x26c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d3ac:	8b53      	ldrh	r3, [r2, #26]
    d3ae:	420b      	tst	r3, r1
    d3b0:	d0e3      	beq.n	d37a <at25dfx_chip_write_buffer+0x262>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d3b2:	8351      	strh	r1, [r2, #26]
    d3b4:	e7e1      	b.n	d37a <at25dfx_chip_write_buffer+0x262>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d3b6:	6a90      	ldr	r0, [r2, #40]	; 0x28
    d3b8:	05c0      	lsls	r0, r0, #23
    d3ba:	0dc0      	lsrs	r0, r0, #23
    d3bc:	e7e2      	b.n	d384 <at25dfx_chip_write_buffer+0x26c>
	port_pin_set_output_level(chip->cs_pin, true);
    d3be:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    d3c0:	09d9      	lsrs	r1, r3, #7
		return NULL;
    d3c2:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    d3c4:	2900      	cmp	r1, #0
    d3c6:	d104      	bne.n	d3d2 <at25dfx_chip_write_buffer+0x2ba>
		return &(ports[port_index]->Group[group_index]);
    d3c8:	095a      	lsrs	r2, r3, #5
    d3ca:	01d2      	lsls	r2, r2, #7
    d3cc:	490c      	ldr	r1, [pc, #48]	; (d400 <at25dfx_chip_write_buffer+0x2e8>)
    d3ce:	468c      	mov	ip, r1
    d3d0:	4462      	add	r2, ip
    d3d2:	4659      	mov	r1, fp
    d3d4:	400b      	ands	r3, r1
    d3d6:	0021      	movs	r1, r4
    d3d8:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    d3da:	6191      	str	r1, [r2, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    d3dc:	0683      	lsls	r3, r0, #26
    d3de:	d513      	bpl.n	d408 <at25dfx_chip_write_buffer+0x2f0>
		return STATUS_ERR_IO;
    d3e0:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
    d3e2:	682b      	ldr	r3, [r5, #0]
	module->locked = false;
    d3e4:	2200      	movs	r2, #0
    d3e6:	711a      	strb	r2, [r3, #4]
	return status;
    d3e8:	e6c2      	b.n	d170 <at25dfx_chip_write_buffer+0x58>
    d3ea:	4b04      	ldr	r3, [pc, #16]	; (d3fc <at25dfx_chip_write_buffer+0x2e4>)
    d3ec:	4798      	blx	r3
		return status;
    d3ee:	2005      	movs	r0, #5
    d3f0:	e6be      	b.n	d170 <at25dfx_chip_write_buffer+0x58>
    d3f2:	46c0      	nop			; (mov r8, r8)
    d3f4:	00013f90 	.word	0x00013f90
    d3f8:	0000ce75 	.word	0x0000ce75
    d3fc:	0000ceb5 	.word	0x0000ceb5
    d400:	41004400 	.word	0x41004400
    d404:	0000e505 	.word	0x0000e505
		length -= cmd.length;
    d408:	4653      	mov	r3, sl
    d40a:	9a01      	ldr	r2, [sp, #4]
    d40c:	1a9b      	subs	r3, r3, r2
    d40e:	b29b      	uxth	r3, r3
    d410:	469a      	mov	sl, r3
	while (length && (status == STATUS_OK)) {
    d412:	2b00      	cmp	r3, #0
    d414:	d100      	bne.n	d418 <at25dfx_chip_write_buffer+0x300>
    d416:	e094      	b.n	d542 <at25dfx_chip_write_buffer+0x42a>
	cmd_buffer[0] = cmd.opcode;
    d418:	ab02      	add	r3, sp, #8
    d41a:	2206      	movs	r2, #6
    d41c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    d41e:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    d420:	09d9      	lsrs	r1, r3, #7
		return NULL;
    d422:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    d424:	2900      	cmp	r1, #0
    d426:	d104      	bne.n	d432 <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
    d428:	095a      	lsrs	r2, r3, #5
    d42a:	01d2      	lsls	r2, r2, #7
    d42c:	4946      	ldr	r1, [pc, #280]	; (d548 <at25dfx_chip_write_buffer+0x430>)
    d42e:	468c      	mov	ip, r1
    d430:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d432:	4659      	mov	r1, fp
    d434:	400b      	ands	r3, r1
    d436:	0021      	movs	r1, r4
    d438:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    d43a:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    d43c:	0022      	movs	r2, r4
    d43e:	a902      	add	r1, sp, #8
    d440:	6828      	ldr	r0, [r5, #0]
    d442:	47c0      	blx	r8
	port_pin_set_output_level(chip->cs_pin, true);
    d444:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    d446:	09d9      	lsrs	r1, r3, #7
		return NULL;
    d448:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    d44a:	2900      	cmp	r1, #0
    d44c:	d104      	bne.n	d458 <at25dfx_chip_write_buffer+0x340>
		return &(ports[port_index]->Group[group_index]);
    d44e:	095a      	lsrs	r2, r3, #5
    d450:	01d2      	lsls	r2, r2, #7
    d452:	493d      	ldr	r1, [pc, #244]	; (d548 <at25dfx_chip_write_buffer+0x430>)
    d454:	468c      	mov	ip, r1
    d456:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d458:	4659      	mov	r1, fp
    d45a:	400b      	ands	r3, r1
    d45c:	0021      	movs	r1, r4
    d45e:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    d460:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
    d462:	9a01      	ldr	r2, [sp, #4]
    d464:	4694      	mov	ip, r2
    d466:	4466      	add	r6, ip
		cmd.data.tx += cmd.length;
    d468:	44e1      	add	r9, ip
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    d46a:	4657      	mov	r7, sl
    d46c:	2380      	movs	r3, #128	; 0x80
    d46e:	005b      	lsls	r3, r3, #1
    d470:	459a      	cmp	sl, r3
    d472:	d901      	bls.n	d478 <at25dfx_chip_write_buffer+0x360>
    d474:	4b35      	ldr	r3, [pc, #212]	; (d54c <at25dfx_chip_write_buffer+0x434>)
    d476:	881f      	ldrh	r7, [r3, #0]
    d478:	b2bb      	uxth	r3, r7
    d47a:	9301      	str	r3, [sp, #4]
	cmd_buffer[0] = cmd.opcode;
    d47c:	2302      	movs	r3, #2
    d47e:	aa02      	add	r2, sp, #8
    d480:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    d482:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    d484:	0a33      	lsrs	r3, r6, #8
    d486:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    d488:	0c33      	lsrs	r3, r6, #16
    d48a:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    d48c:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    d48e:	09d9      	lsrs	r1, r3, #7
		return NULL;
    d490:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    d492:	2900      	cmp	r1, #0
    d494:	d104      	bne.n	d4a0 <at25dfx_chip_write_buffer+0x388>
		return &(ports[port_index]->Group[group_index]);
    d496:	095a      	lsrs	r2, r3, #5
    d498:	01d2      	lsls	r2, r2, #7
    d49a:	492b      	ldr	r1, [pc, #172]	; (d548 <at25dfx_chip_write_buffer+0x430>)
    d49c:	468c      	mov	ip, r1
    d49e:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d4a0:	4659      	mov	r1, fp
    d4a2:	400b      	ands	r3, r1
    d4a4:	0021      	movs	r1, r4
    d4a6:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    d4a8:	6151      	str	r1, [r2, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    d4aa:	2204      	movs	r2, #4
    d4ac:	a902      	add	r1, sp, #8
    d4ae:	6828      	ldr	r0, [r5, #0]
    d4b0:	4b27      	ldr	r3, [pc, #156]	; (d550 <at25dfx_chip_write_buffer+0x438>)
    d4b2:	4798      	blx	r3
	if (cmd.length) {
    d4b4:	9b01      	ldr	r3, [sp, #4]
    d4b6:	2b00      	cmp	r3, #0
    d4b8:	d000      	beq.n	d4bc <at25dfx_chip_write_buffer+0x3a4>
    d4ba:	e754      	b.n	d366 <at25dfx_chip_write_buffer+0x24e>
	port_pin_set_output_level(chip->cs_pin, true);
    d4bc:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    d4be:	09d9      	lsrs	r1, r3, #7
		return NULL;
    d4c0:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    d4c2:	2900      	cmp	r1, #0
    d4c4:	d104      	bne.n	d4d0 <at25dfx_chip_write_buffer+0x3b8>
		return &(ports[port_index]->Group[group_index]);
    d4c6:	095a      	lsrs	r2, r3, #5
    d4c8:	01d2      	lsls	r2, r2, #7
    d4ca:	491f      	ldr	r1, [pc, #124]	; (d548 <at25dfx_chip_write_buffer+0x430>)
    d4cc:	468c      	mov	ip, r1
    d4ce:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d4d0:	4659      	mov	r1, fp
    d4d2:	400b      	ands	r3, r1
    d4d4:	0021      	movs	r1, r4
    d4d6:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    d4d8:	6191      	str	r1, [r2, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d4da:	682b      	ldr	r3, [r5, #0]
    d4dc:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d4de:	7e13      	ldrb	r3, [r2, #24]
	while (!spi_is_ready_to_write(chip->spi)) {
    d4e0:	4223      	tst	r3, r4
    d4e2:	d0fc      	beq.n	d4de <at25dfx_chip_write_buffer+0x3c6>
	port_pin_set_output_level(chip->cs_pin, false);
    d4e4:	796b      	ldrb	r3, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    d4e6:	09d9      	lsrs	r1, r3, #7
		return NULL;
    d4e8:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    d4ea:	2900      	cmp	r1, #0
    d4ec:	d104      	bne.n	d4f8 <at25dfx_chip_write_buffer+0x3e0>
		return &(ports[port_index]->Group[group_index]);
    d4ee:	095a      	lsrs	r2, r3, #5
    d4f0:	01d2      	lsls	r2, r2, #7
    d4f2:	4915      	ldr	r1, [pc, #84]	; (d548 <at25dfx_chip_write_buffer+0x430>)
    d4f4:	468c      	mov	ip, r1
    d4f6:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d4f8:	4659      	mov	r1, fp
    d4fa:	400b      	ands	r3, r1
    d4fc:	0021      	movs	r1, r4
    d4fe:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    d500:	6151      	str	r1, [r2, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d502:	682b      	ldr	r3, [r5, #0]
    d504:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d506:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d508:	4222      	tst	r2, r4
    d50a:	d001      	beq.n	d510 <at25dfx_chip_write_buffer+0x3f8>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d50c:	2205      	movs	r2, #5
    d50e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    d510:	682b      	ldr	r3, [r5, #0]
    d512:	469c      	mov	ip, r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d514:	681a      	ldr	r2, [r3, #0]
    d516:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d518:	7e13      	ldrb	r3, [r2, #24]
    d51a:	420b      	tst	r3, r1
    d51c:	d0fc      	beq.n	d518 <at25dfx_chip_write_buffer+0x400>
    d51e:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    d520:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    d522:	075b      	lsls	r3, r3, #29
    d524:	d50b      	bpl.n	d53e <at25dfx_chip_write_buffer+0x426>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d526:	8b53      	ldrh	r3, [r2, #26]
    d528:	075b      	lsls	r3, r3, #29
    d52a:	d501      	bpl.n	d530 <at25dfx_chip_write_buffer+0x418>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d52c:	2304      	movs	r3, #4
    d52e:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d530:	4663      	mov	r3, ip
    d532:	799b      	ldrb	r3, [r3, #6]
    d534:	2b01      	cmp	r3, #1
    d536:	d100      	bne.n	d53a <at25dfx_chip_write_buffer+0x422>
    d538:	e71b      	b.n	d372 <at25dfx_chip_write_buffer+0x25a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d53a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    d53c:	b2c0      	uxtb	r0, r0
		while (!spi_is_ready_to_read(chip->spi)) {
    d53e:	2104      	movs	r1, #4
    d540:	e722      	b.n	d388 <at25dfx_chip_write_buffer+0x270>
	return STATUS_OK;
    d542:	2000      	movs	r0, #0
    d544:	e74d      	b.n	d3e2 <at25dfx_chip_write_buffer+0x2ca>
    d546:	46c0      	nop			; (mov r8, r8)
    d548:	41004400 	.word	0x41004400
    d54c:	00013f8c 	.word	0x00013f8c
    d550:	0000e505 	.word	0x0000e505

0000d554 <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    d554:	b5f0      	push	{r4, r5, r6, r7, lr}
    d556:	b083      	sub	sp, #12
    d558:	0004      	movs	r4, r0
    d55a:	000e      	movs	r6, r1
    d55c:	0015      	movs	r5, r2
	switch (type) {
    d55e:	7903      	ldrb	r3, [r0, #4]
    d560:	2b09      	cmp	r3, #9
    d562:	d900      	bls.n	d566 <at25dfx_chip_erase_block+0x12>
    d564:	e0f2      	b.n	d74c <at25dfx_chip_erase_block+0x1f8>
    d566:	009b      	lsls	r3, r3, #2
    d568:	4a7b      	ldr	r2, [pc, #492]	; (d758 <at25dfx_chip_erase_block+0x204>)
    d56a:	58d3      	ldr	r3, [r2, r3]
    d56c:	469f      	mov	pc, r3
		return 256 * 1024UL;
    d56e:	2380      	movs	r3, #128	; 0x80
    d570:	02db      	lsls	r3, r3, #11
    d572:	e010      	b.n	d596 <at25dfx_chip_erase_block+0x42>
		return 512 * 1024UL;
    d574:	2380      	movs	r3, #128	; 0x80
    d576:	031b      	lsls	r3, r3, #12
    d578:	e00d      	b.n	d596 <at25dfx_chip_erase_block+0x42>
		return 1024 * 1024UL;
    d57a:	2380      	movs	r3, #128	; 0x80
    d57c:	035b      	lsls	r3, r3, #13
    d57e:	e00a      	b.n	d596 <at25dfx_chip_erase_block+0x42>
		return 2048 * 1024UL;
    d580:	2380      	movs	r3, #128	; 0x80
    d582:	039b      	lsls	r3, r3, #14
    d584:	e007      	b.n	d596 <at25dfx_chip_erase_block+0x42>
		return 4096 * 1024UL;
    d586:	2380      	movs	r3, #128	; 0x80
    d588:	03db      	lsls	r3, r3, #15
    d58a:	e004      	b.n	d596 <at25dfx_chip_erase_block+0x42>
		return 8192 * 1024UL;
    d58c:	2380      	movs	r3, #128	; 0x80
    d58e:	041b      	lsls	r3, r3, #16
    d590:	e001      	b.n	d596 <at25dfx_chip_erase_block+0x42>
		return 64 * 1024UL;
    d592:	2380      	movs	r3, #128	; 0x80
    d594:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    d596:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
    d598:	42b3      	cmp	r3, r6
    d59a:	d801      	bhi.n	d5a0 <at25dfx_chip_erase_block+0x4c>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    d59c:	b003      	add	sp, #12
    d59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    d5a0:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
    d5a2:	4b6e      	ldr	r3, [pc, #440]	; (d75c <at25dfx_chip_erase_block+0x208>)
    d5a4:	4798      	blx	r3
	if (module->locked) {
    d5a6:	793b      	ldrb	r3, [r7, #4]
    d5a8:	2b00      	cmp	r3, #0
    d5aa:	d000      	beq.n	d5ae <at25dfx_chip_erase_block+0x5a>
    d5ac:	e0d0      	b.n	d750 <at25dfx_chip_erase_block+0x1fc>
		module->locked = true;
    d5ae:	3301      	adds	r3, #1
    d5b0:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
    d5b2:	4b6b      	ldr	r3, [pc, #428]	; (d760 <at25dfx_chip_erase_block+0x20c>)
    d5b4:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    d5b6:	2306      	movs	r3, #6
    d5b8:	466a      	mov	r2, sp
    d5ba:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    d5bc:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d5be:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d5c0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d5c2:	2900      	cmp	r1, #0
    d5c4:	d104      	bne.n	d5d0 <at25dfx_chip_erase_block+0x7c>
		return &(ports[port_index]->Group[group_index]);
    d5c6:	0953      	lsrs	r3, r2, #5
    d5c8:	01db      	lsls	r3, r3, #7
    d5ca:	4966      	ldr	r1, [pc, #408]	; (d764 <at25dfx_chip_erase_block+0x210>)
    d5cc:	468c      	mov	ip, r1
    d5ce:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d5d0:	211f      	movs	r1, #31
    d5d2:	4011      	ands	r1, r2
    d5d4:	2201      	movs	r2, #1
    d5d6:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    d5d8:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    d5da:	2201      	movs	r2, #1
    d5dc:	4669      	mov	r1, sp
    d5de:	6820      	ldr	r0, [r4, #0]
    d5e0:	4b61      	ldr	r3, [pc, #388]	; (d768 <at25dfx_chip_erase_block+0x214>)
    d5e2:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    d5e4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d5e6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d5e8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d5ea:	2900      	cmp	r1, #0
    d5ec:	d104      	bne.n	d5f8 <at25dfx_chip_erase_block+0xa4>
		return &(ports[port_index]->Group[group_index]);
    d5ee:	0953      	lsrs	r3, r2, #5
    d5f0:	01db      	lsls	r3, r3, #7
    d5f2:	495c      	ldr	r1, [pc, #368]	; (d764 <at25dfx_chip_erase_block+0x210>)
    d5f4:	468c      	mov	ip, r1
    d5f6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d5f8:	211f      	movs	r1, #31
    d5fa:	4011      	ands	r1, r2
    d5fc:	2201      	movs	r2, #1
    d5fe:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d600:	619a      	str	r2, [r3, #24]
	switch (block_size) {
    d602:	2d01      	cmp	r5, #1
    d604:	d006      	beq.n	d614 <at25dfx_chip_erase_block+0xc0>
    d606:	2d00      	cmp	r5, #0
    d608:	d063      	beq.n	d6d2 <at25dfx_chip_erase_block+0x17e>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    d60a:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
    d60c:	2d02      	cmp	r5, #2
    d60e:	d002      	beq.n	d616 <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = (enum at25dfx_command_opcode)0;
    d610:	2300      	movs	r3, #0
    d612:	e000      	b.n	d616 <at25dfx_chip_erase_block+0xc2>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    d614:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
    d616:	466a      	mov	r2, sp
    d618:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    d61a:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    d61c:	0a33      	lsrs	r3, r6, #8
    d61e:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    d620:	0c36      	lsrs	r6, r6, #16
    d622:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    d624:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d626:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d628:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d62a:	2900      	cmp	r1, #0
    d62c:	d104      	bne.n	d638 <at25dfx_chip_erase_block+0xe4>
		return &(ports[port_index]->Group[group_index]);
    d62e:	0953      	lsrs	r3, r2, #5
    d630:	01db      	lsls	r3, r3, #7
    d632:	494c      	ldr	r1, [pc, #304]	; (d764 <at25dfx_chip_erase_block+0x210>)
    d634:	468c      	mov	ip, r1
    d636:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d638:	211f      	movs	r1, #31
    d63a:	4011      	ands	r1, r2
    d63c:	2201      	movs	r2, #1
    d63e:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    d640:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    d642:	2204      	movs	r2, #4
    d644:	4669      	mov	r1, sp
    d646:	6820      	ldr	r0, [r4, #0]
    d648:	4b47      	ldr	r3, [pc, #284]	; (d768 <at25dfx_chip_erase_block+0x214>)
    d64a:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    d64c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d64e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d650:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d652:	2900      	cmp	r1, #0
    d654:	d104      	bne.n	d660 <at25dfx_chip_erase_block+0x10c>
		return &(ports[port_index]->Group[group_index]);
    d656:	0953      	lsrs	r3, r2, #5
    d658:	01db      	lsls	r3, r3, #7
    d65a:	4942      	ldr	r1, [pc, #264]	; (d764 <at25dfx_chip_erase_block+0x210>)
    d65c:	468c      	mov	ip, r1
    d65e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d660:	211f      	movs	r1, #31
    d662:	4011      	ands	r1, r2
    d664:	2201      	movs	r2, #1
    d666:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d668:	619a      	str	r2, [r3, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d66a:	6823      	ldr	r3, [r4, #0]
    d66c:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_ready_to_write(chip->spi)) {
    d66e:	2201      	movs	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d670:	7e0b      	ldrb	r3, [r1, #24]
    d672:	4213      	tst	r3, r2
    d674:	d0fc      	beq.n	d670 <at25dfx_chip_erase_block+0x11c>
	port_pin_set_output_level(chip->cs_pin, false);
    d676:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d678:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d67a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d67c:	2900      	cmp	r1, #0
    d67e:	d104      	bne.n	d68a <at25dfx_chip_erase_block+0x136>
		return &(ports[port_index]->Group[group_index]);
    d680:	0953      	lsrs	r3, r2, #5
    d682:	01db      	lsls	r3, r3, #7
    d684:	4937      	ldr	r1, [pc, #220]	; (d764 <at25dfx_chip_erase_block+0x210>)
    d686:	468c      	mov	ip, r1
    d688:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d68a:	211f      	movs	r1, #31
    d68c:	4011      	ands	r1, r2
    d68e:	2201      	movs	r2, #1
    d690:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    d692:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d694:	6823      	ldr	r3, [r4, #0]
    d696:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d698:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d69a:	07d2      	lsls	r2, r2, #31
    d69c:	d501      	bpl.n	d6a2 <at25dfx_chip_erase_block+0x14e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d69e:	2205      	movs	r2, #5
    d6a0:	629a      	str	r2, [r3, #40]	; 0x28
	while (!spi_is_ready_to_read(chip->spi)) {
    d6a2:	6820      	ldr	r0, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d6a4:	6802      	ldr	r2, [r0, #0]
    d6a6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d6a8:	7e13      	ldrb	r3, [r2, #24]
    d6aa:	420b      	tst	r3, r1
    d6ac:	d0fc      	beq.n	d6a8 <at25dfx_chip_erase_block+0x154>
    d6ae:	7e13      	ldrb	r3, [r2, #24]
	uint16_t status_reg = 0;
    d6b0:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    d6b2:	075b      	lsls	r3, r3, #29
    d6b4:	d509      	bpl.n	d6ca <at25dfx_chip_erase_block+0x176>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d6b6:	8b53      	ldrh	r3, [r2, #26]
    d6b8:	075b      	lsls	r3, r3, #29
    d6ba:	d501      	bpl.n	d6c0 <at25dfx_chip_erase_block+0x16c>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d6bc:	2304      	movs	r3, #4
    d6be:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d6c0:	7983      	ldrb	r3, [r0, #6]
    d6c2:	2b01      	cmp	r3, #1
    d6c4:	d007      	beq.n	d6d6 <at25dfx_chip_erase_block+0x182>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d6c6:	6a95      	ldr	r5, [r2, #40]	; 0x28
    d6c8:	b2ed      	uxtb	r5, r5
		while (!spi_is_ready_to_write(chip->spi)) {
    d6ca:	2101      	movs	r1, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d6cc:	2700      	movs	r7, #0
		while (!spi_is_ready_to_read(chip->spi)) {
    d6ce:	2004      	movs	r0, #4
    d6d0:	e00c      	b.n	d6ec <at25dfx_chip_erase_block+0x198>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    d6d2:	2320      	movs	r3, #32
    d6d4:	e79f      	b.n	d616 <at25dfx_chip_erase_block+0xc2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d6d6:	6a95      	ldr	r5, [r2, #40]	; 0x28
    d6d8:	05ed      	lsls	r5, r5, #23
    d6da:	0ded      	lsrs	r5, r5, #23
    d6dc:	e7f5      	b.n	d6ca <at25dfx_chip_erase_block+0x176>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d6de:	79b3      	ldrb	r3, [r6, #6]
    d6e0:	2b01      	cmp	r3, #1
    d6e2:	d019      	beq.n	d718 <at25dfx_chip_erase_block+0x1c4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d6e4:	6a95      	ldr	r5, [r2, #40]	; 0x28
    d6e6:	b2ed      	uxtb	r5, r5
	} while (status_reg & AT25DFX_STATUS_BUSY);
    d6e8:	4229      	tst	r1, r5
    d6ea:	d019      	beq.n	d720 <at25dfx_chip_erase_block+0x1cc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d6ec:	6823      	ldr	r3, [r4, #0]
    d6ee:	681a      	ldr	r2, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d6f0:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(chip->spi)) {
    d6f2:	420b      	tst	r3, r1
    d6f4:	d0fc      	beq.n	d6f0 <at25dfx_chip_erase_block+0x19c>
    d6f6:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    d6f8:	420b      	tst	r3, r1
    d6fa:	d000      	beq.n	d6fe <at25dfx_chip_erase_block+0x1aa>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d6fc:	6297      	str	r7, [r2, #40]	; 0x28
		while (!spi_is_ready_to_read(chip->spi)) {
    d6fe:	6826      	ldr	r6, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d700:	6832      	ldr	r2, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d702:	7e13      	ldrb	r3, [r2, #24]
    d704:	4203      	tst	r3, r0
    d706:	d0fc      	beq.n	d702 <at25dfx_chip_erase_block+0x1ae>
    d708:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    d70a:	4203      	tst	r3, r0
    d70c:	d0ec      	beq.n	d6e8 <at25dfx_chip_erase_block+0x194>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d70e:	8b53      	ldrh	r3, [r2, #26]
    d710:	4203      	tst	r3, r0
    d712:	d0e4      	beq.n	d6de <at25dfx_chip_erase_block+0x18a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d714:	8350      	strh	r0, [r2, #26]
    d716:	e7e2      	b.n	d6de <at25dfx_chip_erase_block+0x18a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d718:	6a95      	ldr	r5, [r2, #40]	; 0x28
    d71a:	05ed      	lsls	r5, r5, #23
    d71c:	0ded      	lsrs	r5, r5, #23
    d71e:	e7e3      	b.n	d6e8 <at25dfx_chip_erase_block+0x194>
	port_pin_set_output_level(chip->cs_pin, true);
    d720:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d722:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d724:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d726:	2900      	cmp	r1, #0
    d728:	d104      	bne.n	d734 <at25dfx_chip_erase_block+0x1e0>
		return &(ports[port_index]->Group[group_index]);
    d72a:	0953      	lsrs	r3, r2, #5
    d72c:	01db      	lsls	r3, r3, #7
    d72e:	490d      	ldr	r1, [pc, #52]	; (d764 <at25dfx_chip_erase_block+0x210>)
    d730:	468c      	mov	ip, r1
    d732:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d734:	211f      	movs	r1, #31
    d736:	4011      	ands	r1, r2
    d738:	2201      	movs	r2, #1
    d73a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d73c:	619a      	str	r2, [r3, #24]
	if (status_reg & AT25DFX_STATUS_ERROR) {
    d73e:	06a8      	lsls	r0, r5, #26
	return STATUS_OK;
    d740:	0fc0      	lsrs	r0, r0, #31
    d742:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
    d744:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    d746:	2200      	movs	r2, #0
    d748:	711a      	strb	r2, [r3, #4]
	return status;
    d74a:	e727      	b.n	d59c <at25dfx_chip_erase_block+0x48>
		return STATUS_ERR_INVALID_ARG;
    d74c:	2017      	movs	r0, #23
    d74e:	e725      	b.n	d59c <at25dfx_chip_erase_block+0x48>
    d750:	4b03      	ldr	r3, [pc, #12]	; (d760 <at25dfx_chip_erase_block+0x20c>)
    d752:	4798      	blx	r3
		return status;
    d754:	2005      	movs	r0, #5
    d756:	e721      	b.n	d59c <at25dfx_chip_erase_block+0x48>
    d758:	00013fb8 	.word	0x00013fb8
    d75c:	0000ce75 	.word	0x0000ce75
    d760:	0000ceb5 	.word	0x0000ceb5
    d764:	41004400 	.word	0x41004400
    d768:	0000e505 	.word	0x0000e505

0000d76c <at25dfx_chip_set_global_sector_protect>:
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_set_global_sector_protect(
		struct at25dfx_chip_module *chip, bool protect)
{
    d76c:	b570      	push	{r4, r5, r6, lr}
    d76e:	b082      	sub	sp, #8
    d770:	0004      	movs	r4, r0
    d772:	000d      	movs	r5, r1
	struct at25dfx_command cmd;
	uint8_t temp_data;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    d774:	6806      	ldr	r6, [r0, #0]
	cpu_irq_enter_critical();
    d776:	4b35      	ldr	r3, [pc, #212]	; (d84c <at25dfx_chip_set_global_sector_protect+0xe0>)
    d778:	4798      	blx	r3
	if (module->locked) {
    d77a:	7933      	ldrb	r3, [r6, #4]
    d77c:	2b00      	cmp	r3, #0
    d77e:	d160      	bne.n	d842 <at25dfx_chip_set_global_sector_protect+0xd6>
		module->locked = true;
    d780:	3301      	adds	r3, #1
    d782:	7133      	strb	r3, [r6, #4]
	cpu_irq_leave_critical();
    d784:	4b32      	ldr	r3, [pc, #200]	; (d850 <at25dfx_chip_set_global_sector_protect+0xe4>)
    d786:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    d788:	2306      	movs	r3, #6
    d78a:	466a      	mov	r2, sp
    d78c:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    d78e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d790:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d792:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d794:	2900      	cmp	r1, #0
    d796:	d104      	bne.n	d7a2 <at25dfx_chip_set_global_sector_protect+0x36>
		return &(ports[port_index]->Group[group_index]);
    d798:	0953      	lsrs	r3, r2, #5
    d79a:	01db      	lsls	r3, r3, #7
    d79c:	492d      	ldr	r1, [pc, #180]	; (d854 <at25dfx_chip_set_global_sector_protect+0xe8>)
    d79e:	468c      	mov	ip, r1
    d7a0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d7a2:	211f      	movs	r1, #31
    d7a4:	4011      	ands	r1, r2
    d7a6:	2201      	movs	r2, #1
    d7a8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    d7aa:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    d7ac:	2201      	movs	r2, #1
    d7ae:	4669      	mov	r1, sp
    d7b0:	6820      	ldr	r0, [r4, #0]
    d7b2:	4b29      	ldr	r3, [pc, #164]	; (d858 <at25dfx_chip_set_global_sector_protect+0xec>)
    d7b4:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    d7b6:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d7b8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d7ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d7bc:	2900      	cmp	r1, #0
    d7be:	d104      	bne.n	d7ca <at25dfx_chip_set_global_sector_protect+0x5e>
		return &(ports[port_index]->Group[group_index]);
    d7c0:	0953      	lsrs	r3, r2, #5
    d7c2:	01db      	lsls	r3, r3, #7
    d7c4:	4923      	ldr	r1, [pc, #140]	; (d854 <at25dfx_chip_set_global_sector_protect+0xe8>)
    d7c6:	468c      	mov	ip, r1
    d7c8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d7ca:	211f      	movs	r1, #31
    d7cc:	4011      	ands	r1, r2
    d7ce:	2201      	movs	r2, #1
    d7d0:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d7d2:	619a      	str	r2, [r3, #24]
		return status;
	}

	_at25dfx_chip_enable_write(chip);

	temp_data = protect ? AT25DFX_STATUS_GLOBAL_PROTECT : 0;
    d7d4:	233c      	movs	r3, #60	; 0x3c
    d7d6:	1e6a      	subs	r2, r5, #1
    d7d8:	4195      	sbcs	r5, r2
    d7da:	426d      	negs	r5, r5
    d7dc:	402b      	ands	r3, r5
    d7de:	466a      	mov	r2, sp
    d7e0:	71d3      	strb	r3, [r2, #7]
	cmd_buffer[0] = cmd.opcode;
    d7e2:	2301      	movs	r3, #1
    d7e4:	466a      	mov	r2, sp
    d7e6:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    d7e8:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d7ea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d7ec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d7ee:	2900      	cmp	r1, #0
    d7f0:	d104      	bne.n	d7fc <at25dfx_chip_set_global_sector_protect+0x90>
		return &(ports[port_index]->Group[group_index]);
    d7f2:	0953      	lsrs	r3, r2, #5
    d7f4:	01db      	lsls	r3, r3, #7
    d7f6:	4917      	ldr	r1, [pc, #92]	; (d854 <at25dfx_chip_set_global_sector_protect+0xe8>)
    d7f8:	468c      	mov	ip, r1
    d7fa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d7fc:	211f      	movs	r1, #31
    d7fe:	4011      	ands	r1, r2
    d800:	2201      	movs	r2, #1
    d802:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    d804:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    d806:	2201      	movs	r2, #1
    d808:	4669      	mov	r1, sp
    d80a:	6820      	ldr	r0, [r4, #0]
    d80c:	4d12      	ldr	r5, [pc, #72]	; (d858 <at25dfx_chip_set_global_sector_protect+0xec>)
    d80e:	47a8      	blx	r5
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
    d810:	2201      	movs	r2, #1
    d812:	466b      	mov	r3, sp
    d814:	1dd9      	adds	r1, r3, #7
    d816:	6820      	ldr	r0, [r4, #0]
    d818:	47a8      	blx	r5
	port_pin_set_output_level(chip->cs_pin, true);
    d81a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d81c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d81e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d820:	2900      	cmp	r1, #0
    d822:	d104      	bne.n	d82e <at25dfx_chip_set_global_sector_protect+0xc2>
		return &(ports[port_index]->Group[group_index]);
    d824:	0953      	lsrs	r3, r2, #5
    d826:	01db      	lsls	r3, r3, #7
    d828:	490a      	ldr	r1, [pc, #40]	; (d854 <at25dfx_chip_set_global_sector_protect+0xe8>)
    d82a:	468c      	mov	ip, r1
    d82c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d82e:	211f      	movs	r1, #31
    d830:	4011      	ands	r1, r2
    d832:	2201      	movs	r2, #1
    d834:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d836:	619a      	str	r2, [r3, #24]
	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    d838:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    d83a:	2200      	movs	r2, #0
    d83c:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    d83e:	2000      	movs	r0, #0
    d840:	e002      	b.n	d848 <at25dfx_chip_set_global_sector_protect+0xdc>
    d842:	4b03      	ldr	r3, [pc, #12]	; (d850 <at25dfx_chip_set_global_sector_protect+0xe4>)
    d844:	4798      	blx	r3
		return status;
    d846:	2005      	movs	r0, #5
}
    d848:	b002      	add	sp, #8
    d84a:	bd70      	pop	{r4, r5, r6, pc}
    d84c:	0000ce75 	.word	0x0000ce75
    d850:	0000ceb5 	.word	0x0000ceb5
    d854:	41004400 	.word	0x41004400
    d858:	0000e505 	.word	0x0000e505

0000d85c <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    d85c:	b530      	push	{r4, r5, lr}
    d85e:	b083      	sub	sp, #12
    d860:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    d862:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    d864:	4b1c      	ldr	r3, [pc, #112]	; (d8d8 <at25dfx_chip_sleep+0x7c>)
    d866:	4798      	blx	r3
	if (module->locked) {
    d868:	792b      	ldrb	r3, [r5, #4]
    d86a:	2b00      	cmp	r3, #0
    d86c:	d12e      	bne.n	d8cc <at25dfx_chip_sleep+0x70>
		module->locked = true;
    d86e:	3301      	adds	r3, #1
    d870:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    d872:	4b1a      	ldr	r3, [pc, #104]	; (d8dc <at25dfx_chip_sleep+0x80>)
    d874:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    d876:	23b9      	movs	r3, #185	; 0xb9
    d878:	466a      	mov	r2, sp
    d87a:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    d87c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d87e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d880:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d882:	2900      	cmp	r1, #0
    d884:	d104      	bne.n	d890 <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
    d886:	0953      	lsrs	r3, r2, #5
    d888:	01db      	lsls	r3, r3, #7
    d88a:	4915      	ldr	r1, [pc, #84]	; (d8e0 <at25dfx_chip_sleep+0x84>)
    d88c:	468c      	mov	ip, r1
    d88e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d890:	211f      	movs	r1, #31
    d892:	4011      	ands	r1, r2
    d894:	2201      	movs	r2, #1
    d896:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    d898:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    d89a:	2201      	movs	r2, #1
    d89c:	4669      	mov	r1, sp
    d89e:	6820      	ldr	r0, [r4, #0]
    d8a0:	4b10      	ldr	r3, [pc, #64]	; (d8e4 <at25dfx_chip_sleep+0x88>)
    d8a2:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    d8a4:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d8a6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d8a8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d8aa:	2900      	cmp	r1, #0
    d8ac:	d104      	bne.n	d8b8 <at25dfx_chip_sleep+0x5c>
		return &(ports[port_index]->Group[group_index]);
    d8ae:	0953      	lsrs	r3, r2, #5
    d8b0:	01db      	lsls	r3, r3, #7
    d8b2:	490b      	ldr	r1, [pc, #44]	; (d8e0 <at25dfx_chip_sleep+0x84>)
    d8b4:	468c      	mov	ip, r1
    d8b6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d8b8:	211f      	movs	r1, #31
    d8ba:	4011      	ands	r1, r2
    d8bc:	2201      	movs	r2, #1
    d8be:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d8c0:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    d8c2:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    d8c4:	2200      	movs	r2, #0
    d8c6:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    d8c8:	2000      	movs	r0, #0
    d8ca:	e002      	b.n	d8d2 <at25dfx_chip_sleep+0x76>
    d8cc:	4b03      	ldr	r3, [pc, #12]	; (d8dc <at25dfx_chip_sleep+0x80>)
    d8ce:	4798      	blx	r3
		return status;
    d8d0:	2005      	movs	r0, #5
}
    d8d2:	b003      	add	sp, #12
    d8d4:	bd30      	pop	{r4, r5, pc}
    d8d6:	46c0      	nop			; (mov r8, r8)
    d8d8:	0000ce75 	.word	0x0000ce75
    d8dc:	0000ceb5 	.word	0x0000ceb5
    d8e0:	41004400 	.word	0x41004400
    d8e4:	0000e505 	.word	0x0000e505

0000d8e8 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    d8e8:	b530      	push	{r4, r5, lr}
    d8ea:	b083      	sub	sp, #12
    d8ec:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    d8ee:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    d8f0:	4b1c      	ldr	r3, [pc, #112]	; (d964 <at25dfx_chip_wake+0x7c>)
    d8f2:	4798      	blx	r3
	if (module->locked) {
    d8f4:	792b      	ldrb	r3, [r5, #4]
    d8f6:	2b00      	cmp	r3, #0
    d8f8:	d12e      	bne.n	d958 <at25dfx_chip_wake+0x70>
		module->locked = true;
    d8fa:	3301      	adds	r3, #1
    d8fc:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    d8fe:	4b1a      	ldr	r3, [pc, #104]	; (d968 <at25dfx_chip_wake+0x80>)
    d900:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    d902:	23ab      	movs	r3, #171	; 0xab
    d904:	466a      	mov	r2, sp
    d906:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    d908:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d90a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d90c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d90e:	2900      	cmp	r1, #0
    d910:	d104      	bne.n	d91c <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
    d912:	0953      	lsrs	r3, r2, #5
    d914:	01db      	lsls	r3, r3, #7
    d916:	4915      	ldr	r1, [pc, #84]	; (d96c <at25dfx_chip_wake+0x84>)
    d918:	468c      	mov	ip, r1
    d91a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d91c:	211f      	movs	r1, #31
    d91e:	4011      	ands	r1, r2
    d920:	2201      	movs	r2, #1
    d922:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    d924:	615a      	str	r2, [r3, #20]
	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
    d926:	2201      	movs	r2, #1
    d928:	4669      	mov	r1, sp
    d92a:	6820      	ldr	r0, [r4, #0]
    d92c:	4b10      	ldr	r3, [pc, #64]	; (d970 <at25dfx_chip_wake+0x88>)
    d92e:	4798      	blx	r3
	port_pin_set_output_level(chip->cs_pin, true);
    d930:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    d932:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d934:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d936:	2900      	cmp	r1, #0
    d938:	d104      	bne.n	d944 <at25dfx_chip_wake+0x5c>
		return &(ports[port_index]->Group[group_index]);
    d93a:	0953      	lsrs	r3, r2, #5
    d93c:	01db      	lsls	r3, r3, #7
    d93e:	490b      	ldr	r1, [pc, #44]	; (d96c <at25dfx_chip_wake+0x84>)
    d940:	468c      	mov	ip, r1
    d942:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d944:	211f      	movs	r1, #31
    d946:	4011      	ands	r1, r2
    d948:	2201      	movs	r2, #1
    d94a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d94c:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    d94e:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    d950:	2200      	movs	r2, #0
    d952:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    d954:	2000      	movs	r0, #0
    d956:	e002      	b.n	d95e <at25dfx_chip_wake+0x76>
    d958:	4b03      	ldr	r3, [pc, #12]	; (d968 <at25dfx_chip_wake+0x80>)
    d95a:	4798      	blx	r3
		return status;
    d95c:	2005      	movs	r0, #5
    d95e:	b003      	add	sp, #12
    d960:	bd30      	pop	{r4, r5, pc}
    d962:	46c0      	nop			; (mov r8, r8)
    d964:	0000ce75 	.word	0x0000ce75
    d968:	0000ceb5 	.word	0x0000ceb5
    d96c:	41004400 	.word	0x41004400
    d970:	0000e505 	.word	0x0000e505

0000d974 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    d974:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    d976:	2000      	movs	r0, #0
    d978:	4b08      	ldr	r3, [pc, #32]	; (d99c <delay_init+0x28>)
    d97a:	4798      	blx	r3
    d97c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    d97e:	4c08      	ldr	r4, [pc, #32]	; (d9a0 <delay_init+0x2c>)
    d980:	21fa      	movs	r1, #250	; 0xfa
    d982:	0089      	lsls	r1, r1, #2
    d984:	47a0      	blx	r4
    d986:	4b07      	ldr	r3, [pc, #28]	; (d9a4 <delay_init+0x30>)
    d988:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    d98a:	4907      	ldr	r1, [pc, #28]	; (d9a8 <delay_init+0x34>)
    d98c:	0028      	movs	r0, r5
    d98e:	47a0      	blx	r4
    d990:	4b06      	ldr	r3, [pc, #24]	; (d9ac <delay_init+0x38>)
    d992:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    d994:	2205      	movs	r2, #5
    d996:	4b06      	ldr	r3, [pc, #24]	; (d9b0 <delay_init+0x3c>)
    d998:	601a      	str	r2, [r3, #0]
}
    d99a:	bd70      	pop	{r4, r5, r6, pc}
    d99c:	0000f439 	.word	0x0000f439
    d9a0:	0001145d 	.word	0x0001145d
    d9a4:	20000004 	.word	0x20000004
    d9a8:	000f4240 	.word	0x000f4240
    d9ac:	20000008 	.word	0x20000008
    d9b0:	e000e010 	.word	0xe000e010

0000d9b4 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    d9b4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    d9b6:	4b08      	ldr	r3, [pc, #32]	; (d9d8 <delay_cycles_ms+0x24>)
    d9b8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    d9ba:	4a08      	ldr	r2, [pc, #32]	; (d9dc <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    d9bc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    d9be:	2180      	movs	r1, #128	; 0x80
    d9c0:	0249      	lsls	r1, r1, #9
	while (n--) {
    d9c2:	3801      	subs	r0, #1
    d9c4:	d307      	bcc.n	d9d6 <delay_cycles_ms+0x22>
	if (n > 0) {
    d9c6:	2c00      	cmp	r4, #0
    d9c8:	d0fb      	beq.n	d9c2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    d9ca:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    d9cc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    d9ce:	6813      	ldr	r3, [r2, #0]
    d9d0:	420b      	tst	r3, r1
    d9d2:	d0fc      	beq.n	d9ce <delay_cycles_ms+0x1a>
    d9d4:	e7f5      	b.n	d9c2 <delay_cycles_ms+0xe>
	}
}
    d9d6:	bd30      	pop	{r4, r5, pc}
    d9d8:	20000004 	.word	0x20000004
    d9dc:	e000e010 	.word	0xe000e010

0000d9e0 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    d9e0:	b510      	push	{r4, lr}
			PM->APBBMASK.reg |= mask;
    d9e2:	4a1e      	ldr	r2, [pc, #120]	; (da5c <nvm_set_config+0x7c>)
    d9e4:	69d3      	ldr	r3, [r2, #28]
    d9e6:	2104      	movs	r1, #4
    d9e8:	430b      	orrs	r3, r1
    d9ea:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    d9ec:	4b1c      	ldr	r3, [pc, #112]	; (da60 <nvm_set_config+0x80>)
    d9ee:	2220      	movs	r2, #32
    d9f0:	32ff      	adds	r2, #255	; 0xff
    d9f2:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    d9f4:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    d9f6:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    d9f8:	07d2      	lsls	r2, r2, #31
    d9fa:	d401      	bmi.n	da00 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    d9fc:	0018      	movs	r0, r3
    d9fe:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    da00:	7803      	ldrb	r3, [r0, #0]
    da02:	021b      	lsls	r3, r3, #8
    da04:	22c0      	movs	r2, #192	; 0xc0
    da06:	0092      	lsls	r2, r2, #2
    da08:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    da0a:	7841      	ldrb	r1, [r0, #1]
    da0c:	01c9      	lsls	r1, r1, #7
    da0e:	22ff      	movs	r2, #255	; 0xff
    da10:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    da12:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    da14:	7881      	ldrb	r1, [r0, #2]
    da16:	0049      	lsls	r1, r1, #1
    da18:	221e      	movs	r2, #30
    da1a:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    da1c:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    da1e:	78c2      	ldrb	r2, [r0, #3]
    da20:	0492      	lsls	r2, r2, #18
    da22:	2180      	movs	r1, #128	; 0x80
    da24:	02c9      	lsls	r1, r1, #11
    da26:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    da28:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    da2a:	7902      	ldrb	r2, [r0, #4]
    da2c:	0412      	lsls	r2, r2, #16
    da2e:	21c0      	movs	r1, #192	; 0xc0
    da30:	0289      	lsls	r1, r1, #10
    da32:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    da34:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    da36:	4a0a      	ldr	r2, [pc, #40]	; (da60 <nvm_set_config+0x80>)
    da38:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    da3a:	6893      	ldr	r3, [r2, #8]
    da3c:	035b      	lsls	r3, r3, #13
    da3e:	0f5b      	lsrs	r3, r3, #29
    da40:	4908      	ldr	r1, [pc, #32]	; (da64 <nvm_set_config+0x84>)
    da42:	2408      	movs	r4, #8
    da44:	409c      	lsls	r4, r3
    da46:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    da48:	6893      	ldr	r3, [r2, #8]
    da4a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    da4c:	7843      	ldrb	r3, [r0, #1]
    da4e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    da50:	8b13      	ldrh	r3, [r2, #24]
    da52:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    da54:	0fdb      	lsrs	r3, r3, #31
    da56:	011b      	lsls	r3, r3, #4
    da58:	e7d0      	b.n	d9fc <nvm_set_config+0x1c>
    da5a:	46c0      	nop			; (mov r8, r8)
    da5c:	40000400 	.word	0x40000400
    da60:	41004000 	.word	0x41004000
    da64:	20000250 	.word	0x20000250

0000da68 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    da68:	b530      	push	{r4, r5, lr}
    da6a:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    da6c:	4a22      	ldr	r2, [pc, #136]	; (daf8 <nvm_execute_command+0x90>)
    da6e:	8810      	ldrh	r0, [r2, #0]
    da70:	8853      	ldrh	r3, [r2, #2]
    da72:	4343      	muls	r3, r0
    da74:	428b      	cmp	r3, r1
    da76:	d206      	bcs.n	da86 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    da78:	2280      	movs	r2, #128	; 0x80
    da7a:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    da7c:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    da7e:	4b1f      	ldr	r3, [pc, #124]	; (dafc <nvm_execute_command+0x94>)
    da80:	18cb      	adds	r3, r1, r3
    da82:	4293      	cmp	r3, r2
    da84:	d80e      	bhi.n	daa4 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    da86:	4b1e      	ldr	r3, [pc, #120]	; (db00 <nvm_execute_command+0x98>)
    da88:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    da8a:	2280      	movs	r2, #128	; 0x80
    da8c:	02d2      	lsls	r2, r2, #11
    da8e:	432a      	orrs	r2, r5
    da90:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    da92:	2220      	movs	r2, #32
    da94:	32ff      	adds	r2, #255	; 0xff
    da96:	831a      	strh	r2, [r3, #24]
    da98:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    da9a:	07db      	lsls	r3, r3, #31
    da9c:	d403      	bmi.n	daa6 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    da9e:	4b18      	ldr	r3, [pc, #96]	; (db00 <nvm_execute_command+0x98>)
    daa0:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    daa2:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    daa4:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    daa6:	2c45      	cmp	r4, #69	; 0x45
    daa8:	d822      	bhi.n	daf0 <nvm_execute_command+0x88>
    daaa:	00a3      	lsls	r3, r4, #2
    daac:	4a15      	ldr	r2, [pc, #84]	; (db04 <nvm_execute_command+0x9c>)
    daae:	58d3      	ldr	r3, [r2, r3]
    dab0:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    dab2:	4b13      	ldr	r3, [pc, #76]	; (db00 <nvm_execute_command+0x98>)
    dab4:	8b1b      	ldrh	r3, [r3, #24]
    dab6:	05db      	lsls	r3, r3, #23
    dab8:	d503      	bpl.n	dac2 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    daba:	4b11      	ldr	r3, [pc, #68]	; (db00 <nvm_execute_command+0x98>)
    dabc:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    dabe:	2010      	movs	r0, #16
    dac0:	e7f0      	b.n	daa4 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    dac2:	0889      	lsrs	r1, r1, #2
    dac4:	0049      	lsls	r1, r1, #1
    dac6:	4b0e      	ldr	r3, [pc, #56]	; (db00 <nvm_execute_command+0x98>)
    dac8:	61d9      	str	r1, [r3, #28]
			break;
    daca:	e003      	b.n	dad4 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    dacc:	0889      	lsrs	r1, r1, #2
    dace:	0049      	lsls	r1, r1, #1
    dad0:	4b0b      	ldr	r3, [pc, #44]	; (db00 <nvm_execute_command+0x98>)
    dad2:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    dad4:	20a5      	movs	r0, #165	; 0xa5
    dad6:	0200      	lsls	r0, r0, #8
    dad8:	4304      	orrs	r4, r0
    dada:	4b09      	ldr	r3, [pc, #36]	; (db00 <nvm_execute_command+0x98>)
    dadc:	801c      	strh	r4, [r3, #0]
    dade:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    dae0:	2201      	movs	r2, #1
    dae2:	7d0b      	ldrb	r3, [r1, #20]
    dae4:	4213      	tst	r3, r2
    dae6:	d0fc      	beq.n	dae2 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    dae8:	4b05      	ldr	r3, [pc, #20]	; (db00 <nvm_execute_command+0x98>)
    daea:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    daec:	2000      	movs	r0, #0
    daee:	e7d9      	b.n	daa4 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    daf0:	4b03      	ldr	r3, [pc, #12]	; (db00 <nvm_execute_command+0x98>)
    daf2:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    daf4:	2017      	movs	r0, #23
    daf6:	e7d5      	b.n	daa4 <nvm_execute_command+0x3c>
    daf8:	20000250 	.word	0x20000250
    dafc:	ff7fc000 	.word	0xff7fc000
    db00:	41004000 	.word	0x41004000
    db04:	00013fe0 	.word	0x00013fe0

0000db08 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    db0a:	4b25      	ldr	r3, [pc, #148]	; (dba0 <nvm_write_buffer+0x98>)
    db0c:	881d      	ldrh	r5, [r3, #0]
    db0e:	885b      	ldrh	r3, [r3, #2]
    db10:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    db12:	2418      	movs	r4, #24
	if (destination_address >
    db14:	4283      	cmp	r3, r0
    db16:	d201      	bcs.n	db1c <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    db18:	0020      	movs	r0, r4
    db1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    db1c:	1e6b      	subs	r3, r5, #1
    db1e:	4218      	tst	r0, r3
    db20:	d1fa      	bne.n	db18 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    db22:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    db24:	4295      	cmp	r5, r2
    db26:	d3f7      	bcc.n	db18 <nvm_write_buffer+0x10>
    db28:	4b1e      	ldr	r3, [pc, #120]	; (dba4 <nvm_write_buffer+0x9c>)
    db2a:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    db2c:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    db2e:	07db      	lsls	r3, r3, #31
    db30:	d5f2      	bpl.n	db18 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    db32:	4c1d      	ldr	r4, [pc, #116]	; (dba8 <nvm_write_buffer+0xa0>)
    db34:	4b1b      	ldr	r3, [pc, #108]	; (dba4 <nvm_write_buffer+0x9c>)
    db36:	801c      	strh	r4, [r3, #0]
    db38:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    db3a:	2401      	movs	r4, #1
    db3c:	7d2b      	ldrb	r3, [r5, #20]
    db3e:	4223      	tst	r3, r4
    db40:	d0fc      	beq.n	db3c <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    db42:	2420      	movs	r4, #32
    db44:	34ff      	adds	r4, #255	; 0xff
    db46:	4b17      	ldr	r3, [pc, #92]	; (dba4 <nvm_write_buffer+0x9c>)
    db48:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    db4a:	2a00      	cmp	r2, #0
    db4c:	d022      	beq.n	db94 <nvm_write_buffer+0x8c>
    db4e:	2301      	movs	r3, #1
    db50:	0005      	movs	r5, r0
    db52:	439d      	bics	r5, r3
    db54:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    db56:	1e57      	subs	r7, r2, #1
    db58:	e009      	b.n	db6e <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    db5a:	18ce      	adds	r6, r1, r3
    db5c:	7876      	ldrb	r6, [r6, #1]
    db5e:	0236      	lsls	r6, r6, #8
    db60:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    db62:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    db64:	3302      	adds	r3, #2
    db66:	b29b      	uxth	r3, r3
    db68:	3502      	adds	r5, #2
    db6a:	429a      	cmp	r2, r3
    db6c:	d904      	bls.n	db78 <nvm_write_buffer+0x70>
		data = buffer[i];
    db6e:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    db70:	42bb      	cmp	r3, r7
    db72:	dbf2      	blt.n	db5a <nvm_write_buffer+0x52>
		data = buffer[i];
    db74:	b2a4      	uxth	r4, r4
    db76:	e7f4      	b.n	db62 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    db78:	4b09      	ldr	r3, [pc, #36]	; (dba0 <nvm_write_buffer+0x98>)
    db7a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    db7c:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    db7e:	2b00      	cmp	r3, #0
    db80:	d1ca      	bne.n	db18 <nvm_write_buffer+0x10>
    db82:	2a3f      	cmp	r2, #63	; 0x3f
    db84:	d8c8      	bhi.n	db18 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    db86:	2200      	movs	r2, #0
    db88:	0001      	movs	r1, r0
    db8a:	2004      	movs	r0, #4
    db8c:	4b07      	ldr	r3, [pc, #28]	; (dbac <nvm_write_buffer+0xa4>)
    db8e:	4798      	blx	r3
    db90:	0004      	movs	r4, r0
    db92:	e7c1      	b.n	db18 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    db94:	4b02      	ldr	r3, [pc, #8]	; (dba0 <nvm_write_buffer+0x98>)
    db96:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    db98:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    db9a:	2b00      	cmp	r3, #0
    db9c:	d0f3      	beq.n	db86 <nvm_write_buffer+0x7e>
    db9e:	e7bb      	b.n	db18 <nvm_write_buffer+0x10>
    dba0:	20000250 	.word	0x20000250
    dba4:	41004000 	.word	0x41004000
    dba8:	ffffa544 	.word	0xffffa544
    dbac:	0000da69 	.word	0x0000da69

0000dbb0 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    dbb0:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    dbb2:	4b18      	ldr	r3, [pc, #96]	; (dc14 <nvm_read_buffer+0x64>)
    dbb4:	881d      	ldrh	r5, [r3, #0]
    dbb6:	885b      	ldrh	r3, [r3, #2]
    dbb8:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    dbba:	2418      	movs	r4, #24
	if (source_address >
    dbbc:	4283      	cmp	r3, r0
    dbbe:	d201      	bcs.n	dbc4 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    dbc0:	0020      	movs	r0, r4
    dbc2:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    dbc4:	1e6b      	subs	r3, r5, #1
    dbc6:	4218      	tst	r0, r3
    dbc8:	d1fa      	bne.n	dbc0 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    dbca:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    dbcc:	4295      	cmp	r5, r2
    dbce:	d3f7      	bcc.n	dbc0 <nvm_read_buffer+0x10>
    dbd0:	4b11      	ldr	r3, [pc, #68]	; (dc18 <nvm_read_buffer+0x68>)
    dbd2:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    dbd4:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    dbd6:	07db      	lsls	r3, r3, #31
    dbd8:	d5f2      	bpl.n	dbc0 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    dbda:	2420      	movs	r4, #32
    dbdc:	34ff      	adds	r4, #255	; 0xff
    dbde:	4b0e      	ldr	r3, [pc, #56]	; (dc18 <nvm_read_buffer+0x68>)
    dbe0:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    dbe2:	2a00      	cmp	r2, #0
    dbe4:	d014      	beq.n	dc10 <nvm_read_buffer+0x60>
    dbe6:	2301      	movs	r3, #1
    dbe8:	4398      	bics	r0, r3
    dbea:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    dbec:	1e56      	subs	r6, r2, #1
    dbee:	e004      	b.n	dbfa <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    dbf0:	3302      	adds	r3, #2
    dbf2:	b29b      	uxth	r3, r3
    dbf4:	3002      	adds	r0, #2
    dbf6:	429a      	cmp	r2, r3
    dbf8:	d908      	bls.n	dc0c <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    dbfa:	8804      	ldrh	r4, [r0, #0]
    dbfc:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    dbfe:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    dc00:	42b3      	cmp	r3, r6
    dc02:	daf5      	bge.n	dbf0 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    dc04:	18cd      	adds	r5, r1, r3
    dc06:	0a24      	lsrs	r4, r4, #8
    dc08:	706c      	strb	r4, [r5, #1]
    dc0a:	e7f1      	b.n	dbf0 <nvm_read_buffer+0x40>
	return STATUS_OK;
    dc0c:	2400      	movs	r4, #0
    dc0e:	e7d7      	b.n	dbc0 <nvm_read_buffer+0x10>
    dc10:	2400      	movs	r4, #0
    dc12:	e7d5      	b.n	dbc0 <nvm_read_buffer+0x10>
    dc14:	20000250 	.word	0x20000250
    dc18:	41004000 	.word	0x41004000

0000dc1c <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    dc1c:	4b13      	ldr	r3, [pc, #76]	; (dc6c <nvm_erase_row+0x50>)
    dc1e:	881a      	ldrh	r2, [r3, #0]
    dc20:	885b      	ldrh	r3, [r3, #2]
    dc22:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    dc24:	2118      	movs	r1, #24
	if (row_address >
    dc26:	4283      	cmp	r3, r0
    dc28:	d201      	bcs.n	dc2e <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    dc2a:	0008      	movs	r0, r1
    dc2c:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    dc2e:	0092      	lsls	r2, r2, #2
    dc30:	3a01      	subs	r2, #1
    dc32:	4210      	tst	r0, r2
    dc34:	d1f9      	bne.n	dc2a <nvm_erase_row+0xe>
    dc36:	4b0e      	ldr	r3, [pc, #56]	; (dc70 <nvm_erase_row+0x54>)
    dc38:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    dc3a:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    dc3c:	07db      	lsls	r3, r3, #31
    dc3e:	d5f4      	bpl.n	dc2a <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    dc40:	4b0b      	ldr	r3, [pc, #44]	; (dc70 <nvm_erase_row+0x54>)
    dc42:	2220      	movs	r2, #32
    dc44:	32ff      	adds	r2, #255	; 0xff
    dc46:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    dc48:	0880      	lsrs	r0, r0, #2
    dc4a:	0040      	lsls	r0, r0, #1
    dc4c:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    dc4e:	4a09      	ldr	r2, [pc, #36]	; (dc74 <nvm_erase_row+0x58>)
    dc50:	801a      	strh	r2, [r3, #0]
    dc52:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    dc54:	2201      	movs	r2, #1
    dc56:	7d0b      	ldrb	r3, [r1, #20]
    dc58:	4213      	tst	r3, r2
    dc5a:	d0fc      	beq.n	dc56 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    dc5c:	4b04      	ldr	r3, [pc, #16]	; (dc70 <nvm_erase_row+0x54>)
    dc5e:	8b19      	ldrh	r1, [r3, #24]
    dc60:	201c      	movs	r0, #28
    dc62:	4001      	ands	r1, r0
	return STATUS_OK;
    dc64:	1e48      	subs	r0, r1, #1
    dc66:	4181      	sbcs	r1, r0
    dc68:	0089      	lsls	r1, r1, #2
    dc6a:	e7de      	b.n	dc2a <nvm_erase_row+0xe>
    dc6c:	20000250 	.word	0x20000250
    dc70:	41004000 	.word	0x41004000
    dc74:	ffffa502 	.word	0xffffa502

0000dc78 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    dc78:	b500      	push	{lr}
    dc7a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    dc7c:	ab01      	add	r3, sp, #4
    dc7e:	2280      	movs	r2, #128	; 0x80
    dc80:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    dc82:	780a      	ldrb	r2, [r1, #0]
    dc84:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    dc86:	784a      	ldrb	r2, [r1, #1]
    dc88:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    dc8a:	788a      	ldrb	r2, [r1, #2]
    dc8c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    dc8e:	0019      	movs	r1, r3
    dc90:	4b01      	ldr	r3, [pc, #4]	; (dc98 <port_pin_set_config+0x20>)
    dc92:	4798      	blx	r3
}
    dc94:	b003      	add	sp, #12
    dc96:	bd00      	pop	{pc}
    dc98:	0000f649 	.word	0x0000f649

0000dc9c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    dc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc9e:	46de      	mov	lr, fp
    dca0:	4657      	mov	r7, sl
    dca2:	464e      	mov	r6, r9
    dca4:	4645      	mov	r5, r8
    dca6:	b5e0      	push	{r5, r6, r7, lr}
    dca8:	b087      	sub	sp, #28
    dcaa:	4680      	mov	r8, r0
    dcac:	9104      	str	r1, [sp, #16]
    dcae:	0016      	movs	r6, r2
    dcb0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    dcb2:	2200      	movs	r2, #0
    dcb4:	2300      	movs	r3, #0
    dcb6:	2100      	movs	r1, #0
    dcb8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    dcba:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    dcbc:	2001      	movs	r0, #1
    dcbe:	0021      	movs	r1, r4
    dcc0:	9600      	str	r6, [sp, #0]
    dcc2:	9701      	str	r7, [sp, #4]
    dcc4:	465c      	mov	r4, fp
    dcc6:	9403      	str	r4, [sp, #12]
    dcc8:	4644      	mov	r4, r8
    dcca:	9405      	str	r4, [sp, #20]
    dccc:	e013      	b.n	dcf6 <long_division+0x5a>
    dcce:	2420      	movs	r4, #32
    dcd0:	1a64      	subs	r4, r4, r1
    dcd2:	0005      	movs	r5, r0
    dcd4:	40e5      	lsrs	r5, r4
    dcd6:	46a8      	mov	r8, r5
    dcd8:	e014      	b.n	dd04 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    dcda:	9c00      	ldr	r4, [sp, #0]
    dcdc:	9d01      	ldr	r5, [sp, #4]
    dcde:	1b12      	subs	r2, r2, r4
    dce0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    dce2:	465c      	mov	r4, fp
    dce4:	464d      	mov	r5, r9
    dce6:	432c      	orrs	r4, r5
    dce8:	46a3      	mov	fp, r4
    dcea:	9c03      	ldr	r4, [sp, #12]
    dcec:	4645      	mov	r5, r8
    dcee:	432c      	orrs	r4, r5
    dcf0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    dcf2:	3901      	subs	r1, #1
    dcf4:	d325      	bcc.n	dd42 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    dcf6:	2420      	movs	r4, #32
    dcf8:	4264      	negs	r4, r4
    dcfa:	190c      	adds	r4, r1, r4
    dcfc:	d4e7      	bmi.n	dcce <long_division+0x32>
    dcfe:	0005      	movs	r5, r0
    dd00:	40a5      	lsls	r5, r4
    dd02:	46a8      	mov	r8, r5
    dd04:	0004      	movs	r4, r0
    dd06:	408c      	lsls	r4, r1
    dd08:	46a1      	mov	r9, r4
		r = r << 1;
    dd0a:	1892      	adds	r2, r2, r2
    dd0c:	415b      	adcs	r3, r3
    dd0e:	0014      	movs	r4, r2
    dd10:	001d      	movs	r5, r3
		if (n & bit_shift) {
    dd12:	9e05      	ldr	r6, [sp, #20]
    dd14:	464f      	mov	r7, r9
    dd16:	403e      	ands	r6, r7
    dd18:	46b4      	mov	ip, r6
    dd1a:	9e04      	ldr	r6, [sp, #16]
    dd1c:	4647      	mov	r7, r8
    dd1e:	403e      	ands	r6, r7
    dd20:	46b2      	mov	sl, r6
    dd22:	4666      	mov	r6, ip
    dd24:	4657      	mov	r7, sl
    dd26:	433e      	orrs	r6, r7
    dd28:	d003      	beq.n	dd32 <long_division+0x96>
			r |= 0x01;
    dd2a:	0006      	movs	r6, r0
    dd2c:	4326      	orrs	r6, r4
    dd2e:	0032      	movs	r2, r6
    dd30:	002b      	movs	r3, r5
		if (r >= d) {
    dd32:	9c00      	ldr	r4, [sp, #0]
    dd34:	9d01      	ldr	r5, [sp, #4]
    dd36:	429d      	cmp	r5, r3
    dd38:	d8db      	bhi.n	dcf2 <long_division+0x56>
    dd3a:	d1ce      	bne.n	dcda <long_division+0x3e>
    dd3c:	4294      	cmp	r4, r2
    dd3e:	d8d8      	bhi.n	dcf2 <long_division+0x56>
    dd40:	e7cb      	b.n	dcda <long_division+0x3e>
    dd42:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    dd44:	4658      	mov	r0, fp
    dd46:	0019      	movs	r1, r3
    dd48:	b007      	add	sp, #28
    dd4a:	bc3c      	pop	{r2, r3, r4, r5}
    dd4c:	4690      	mov	r8, r2
    dd4e:	4699      	mov	r9, r3
    dd50:	46a2      	mov	sl, r4
    dd52:	46ab      	mov	fp, r5
    dd54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dd56 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    dd56:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    dd58:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    dd5a:	2340      	movs	r3, #64	; 0x40
    dd5c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    dd5e:	4281      	cmp	r1, r0
    dd60:	d202      	bcs.n	dd68 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    dd62:	0018      	movs	r0, r3
    dd64:	bd10      	pop	{r4, pc}
		baud_calculated++;
    dd66:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    dd68:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    dd6a:	1c63      	adds	r3, r4, #1
    dd6c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    dd6e:	4288      	cmp	r0, r1
    dd70:	d9f9      	bls.n	dd66 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    dd72:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    dd74:	2cff      	cmp	r4, #255	; 0xff
    dd76:	d8f4      	bhi.n	dd62 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    dd78:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    dd7a:	2300      	movs	r3, #0
    dd7c:	e7f1      	b.n	dd62 <_sercom_get_sync_baud_val+0xc>
	...

0000dd80 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    dd80:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd82:	b083      	sub	sp, #12
    dd84:	000f      	movs	r7, r1
    dd86:	0016      	movs	r6, r2
    dd88:	aa08      	add	r2, sp, #32
    dd8a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    dd8c:	0004      	movs	r4, r0
    dd8e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    dd90:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    dd92:	42bc      	cmp	r4, r7
    dd94:	d902      	bls.n	dd9c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    dd96:	0010      	movs	r0, r2
    dd98:	b003      	add	sp, #12
    dd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    dd9c:	2b00      	cmp	r3, #0
    dd9e:	d114      	bne.n	ddca <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    dda0:	0002      	movs	r2, r0
    dda2:	0008      	movs	r0, r1
    dda4:	2100      	movs	r1, #0
    dda6:	4c19      	ldr	r4, [pc, #100]	; (de0c <_sercom_get_async_baud_val+0x8c>)
    dda8:	47a0      	blx	r4
    ddaa:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    ddac:	003a      	movs	r2, r7
    ddae:	2300      	movs	r3, #0
    ddb0:	2000      	movs	r0, #0
    ddb2:	4c17      	ldr	r4, [pc, #92]	; (de10 <_sercom_get_async_baud_val+0x90>)
    ddb4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    ddb6:	2200      	movs	r2, #0
    ddb8:	2301      	movs	r3, #1
    ddba:	1a12      	subs	r2, r2, r0
    ddbc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    ddbe:	0c12      	lsrs	r2, r2, #16
    ddc0:	041b      	lsls	r3, r3, #16
    ddc2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    ddc4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    ddc6:	2200      	movs	r2, #0
    ddc8:	e7e5      	b.n	dd96 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    ddca:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    ddcc:	2b01      	cmp	r3, #1
    ddce:	d1f9      	bne.n	ddc4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    ddd0:	000a      	movs	r2, r1
    ddd2:	2300      	movs	r3, #0
    ddd4:	2100      	movs	r1, #0
    ddd6:	4c0d      	ldr	r4, [pc, #52]	; (de0c <_sercom_get_async_baud_val+0x8c>)
    ddd8:	47a0      	blx	r4
    ddda:	0002      	movs	r2, r0
    dddc:	000b      	movs	r3, r1
    ddde:	9200      	str	r2, [sp, #0]
    dde0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    dde2:	0038      	movs	r0, r7
    dde4:	2100      	movs	r1, #0
    dde6:	4c0a      	ldr	r4, [pc, #40]	; (de10 <_sercom_get_async_baud_val+0x90>)
    dde8:	47a0      	blx	r4
    ddea:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    ddec:	2380      	movs	r3, #128	; 0x80
    ddee:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    ddf0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    ddf2:	4298      	cmp	r0, r3
    ddf4:	d8cf      	bhi.n	dd96 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    ddf6:	0f79      	lsrs	r1, r7, #29
    ddf8:	00f8      	lsls	r0, r7, #3
    ddfa:	9a00      	ldr	r2, [sp, #0]
    ddfc:	9b01      	ldr	r3, [sp, #4]
    ddfe:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    de00:	00ea      	lsls	r2, r5, #3
    de02:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    de04:	b2d2      	uxtb	r2, r2
    de06:	0352      	lsls	r2, r2, #13
    de08:	432a      	orrs	r2, r5
    de0a:	e7db      	b.n	ddc4 <_sercom_get_async_baud_val+0x44>
    de0c:	00011749 	.word	0x00011749
    de10:	0000dc9d 	.word	0x0000dc9d

0000de14 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    de14:	b510      	push	{r4, lr}
    de16:	b082      	sub	sp, #8
    de18:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    de1a:	4b0e      	ldr	r3, [pc, #56]	; (de54 <sercom_set_gclk_generator+0x40>)
    de1c:	781b      	ldrb	r3, [r3, #0]
    de1e:	2b00      	cmp	r3, #0
    de20:	d007      	beq.n	de32 <sercom_set_gclk_generator+0x1e>
    de22:	2900      	cmp	r1, #0
    de24:	d105      	bne.n	de32 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    de26:	4b0b      	ldr	r3, [pc, #44]	; (de54 <sercom_set_gclk_generator+0x40>)
    de28:	785b      	ldrb	r3, [r3, #1]
    de2a:	4283      	cmp	r3, r0
    de2c:	d010      	beq.n	de50 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    de2e:	201d      	movs	r0, #29
    de30:	e00c      	b.n	de4c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    de32:	a901      	add	r1, sp, #4
    de34:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    de36:	2013      	movs	r0, #19
    de38:	4b07      	ldr	r3, [pc, #28]	; (de58 <sercom_set_gclk_generator+0x44>)
    de3a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    de3c:	2013      	movs	r0, #19
    de3e:	4b07      	ldr	r3, [pc, #28]	; (de5c <sercom_set_gclk_generator+0x48>)
    de40:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    de42:	4b04      	ldr	r3, [pc, #16]	; (de54 <sercom_set_gclk_generator+0x40>)
    de44:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    de46:	2201      	movs	r2, #1
    de48:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    de4a:	2000      	movs	r0, #0
}
    de4c:	b002      	add	sp, #8
    de4e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    de50:	2000      	movs	r0, #0
    de52:	e7fb      	b.n	de4c <sercom_set_gclk_generator+0x38>
    de54:	20000258 	.word	0x20000258
    de58:	0000f551 	.word	0x0000f551
    de5c:	0000f4c5 	.word	0x0000f4c5

0000de60 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    de60:	4b40      	ldr	r3, [pc, #256]	; (df64 <_sercom_get_default_pad+0x104>)
    de62:	4298      	cmp	r0, r3
    de64:	d031      	beq.n	deca <_sercom_get_default_pad+0x6a>
    de66:	d90a      	bls.n	de7e <_sercom_get_default_pad+0x1e>
    de68:	4b3f      	ldr	r3, [pc, #252]	; (df68 <_sercom_get_default_pad+0x108>)
    de6a:	4298      	cmp	r0, r3
    de6c:	d04d      	beq.n	df0a <_sercom_get_default_pad+0xaa>
    de6e:	4b3f      	ldr	r3, [pc, #252]	; (df6c <_sercom_get_default_pad+0x10c>)
    de70:	4298      	cmp	r0, r3
    de72:	d05a      	beq.n	df2a <_sercom_get_default_pad+0xca>
    de74:	4b3e      	ldr	r3, [pc, #248]	; (df70 <_sercom_get_default_pad+0x110>)
    de76:	4298      	cmp	r0, r3
    de78:	d037      	beq.n	deea <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    de7a:	2000      	movs	r0, #0
}
    de7c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    de7e:	4b3d      	ldr	r3, [pc, #244]	; (df74 <_sercom_get_default_pad+0x114>)
    de80:	4298      	cmp	r0, r3
    de82:	d00c      	beq.n	de9e <_sercom_get_default_pad+0x3e>
    de84:	4b3c      	ldr	r3, [pc, #240]	; (df78 <_sercom_get_default_pad+0x118>)
    de86:	4298      	cmp	r0, r3
    de88:	d1f7      	bne.n	de7a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    de8a:	2901      	cmp	r1, #1
    de8c:	d017      	beq.n	debe <_sercom_get_default_pad+0x5e>
    de8e:	2900      	cmp	r1, #0
    de90:	d05d      	beq.n	df4e <_sercom_get_default_pad+0xee>
    de92:	2902      	cmp	r1, #2
    de94:	d015      	beq.n	dec2 <_sercom_get_default_pad+0x62>
    de96:	2903      	cmp	r1, #3
    de98:	d015      	beq.n	dec6 <_sercom_get_default_pad+0x66>
	return 0;
    de9a:	2000      	movs	r0, #0
    de9c:	e7ee      	b.n	de7c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    de9e:	2901      	cmp	r1, #1
    dea0:	d007      	beq.n	deb2 <_sercom_get_default_pad+0x52>
    dea2:	2900      	cmp	r1, #0
    dea4:	d051      	beq.n	df4a <_sercom_get_default_pad+0xea>
    dea6:	2902      	cmp	r1, #2
    dea8:	d005      	beq.n	deb6 <_sercom_get_default_pad+0x56>
    deaa:	2903      	cmp	r1, #3
    deac:	d005      	beq.n	deba <_sercom_get_default_pad+0x5a>
	return 0;
    deae:	2000      	movs	r0, #0
    deb0:	e7e4      	b.n	de7c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    deb2:	4832      	ldr	r0, [pc, #200]	; (df7c <_sercom_get_default_pad+0x11c>)
    deb4:	e7e2      	b.n	de7c <_sercom_get_default_pad+0x1c>
    deb6:	4832      	ldr	r0, [pc, #200]	; (df80 <_sercom_get_default_pad+0x120>)
    deb8:	e7e0      	b.n	de7c <_sercom_get_default_pad+0x1c>
    deba:	4832      	ldr	r0, [pc, #200]	; (df84 <_sercom_get_default_pad+0x124>)
    debc:	e7de      	b.n	de7c <_sercom_get_default_pad+0x1c>
    debe:	4832      	ldr	r0, [pc, #200]	; (df88 <_sercom_get_default_pad+0x128>)
    dec0:	e7dc      	b.n	de7c <_sercom_get_default_pad+0x1c>
    dec2:	4832      	ldr	r0, [pc, #200]	; (df8c <_sercom_get_default_pad+0x12c>)
    dec4:	e7da      	b.n	de7c <_sercom_get_default_pad+0x1c>
    dec6:	4832      	ldr	r0, [pc, #200]	; (df90 <_sercom_get_default_pad+0x130>)
    dec8:	e7d8      	b.n	de7c <_sercom_get_default_pad+0x1c>
    deca:	2901      	cmp	r1, #1
    decc:	d007      	beq.n	dede <_sercom_get_default_pad+0x7e>
    dece:	2900      	cmp	r1, #0
    ded0:	d03f      	beq.n	df52 <_sercom_get_default_pad+0xf2>
    ded2:	2902      	cmp	r1, #2
    ded4:	d005      	beq.n	dee2 <_sercom_get_default_pad+0x82>
    ded6:	2903      	cmp	r1, #3
    ded8:	d005      	beq.n	dee6 <_sercom_get_default_pad+0x86>
	return 0;
    deda:	2000      	movs	r0, #0
    dedc:	e7ce      	b.n	de7c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    dede:	482d      	ldr	r0, [pc, #180]	; (df94 <_sercom_get_default_pad+0x134>)
    dee0:	e7cc      	b.n	de7c <_sercom_get_default_pad+0x1c>
    dee2:	482d      	ldr	r0, [pc, #180]	; (df98 <_sercom_get_default_pad+0x138>)
    dee4:	e7ca      	b.n	de7c <_sercom_get_default_pad+0x1c>
    dee6:	482d      	ldr	r0, [pc, #180]	; (df9c <_sercom_get_default_pad+0x13c>)
    dee8:	e7c8      	b.n	de7c <_sercom_get_default_pad+0x1c>
    deea:	2901      	cmp	r1, #1
    deec:	d007      	beq.n	defe <_sercom_get_default_pad+0x9e>
    deee:	2900      	cmp	r1, #0
    def0:	d031      	beq.n	df56 <_sercom_get_default_pad+0xf6>
    def2:	2902      	cmp	r1, #2
    def4:	d005      	beq.n	df02 <_sercom_get_default_pad+0xa2>
    def6:	2903      	cmp	r1, #3
    def8:	d005      	beq.n	df06 <_sercom_get_default_pad+0xa6>
	return 0;
    defa:	2000      	movs	r0, #0
    defc:	e7be      	b.n	de7c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    defe:	4828      	ldr	r0, [pc, #160]	; (dfa0 <_sercom_get_default_pad+0x140>)
    df00:	e7bc      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df02:	4828      	ldr	r0, [pc, #160]	; (dfa4 <_sercom_get_default_pad+0x144>)
    df04:	e7ba      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df06:	4828      	ldr	r0, [pc, #160]	; (dfa8 <_sercom_get_default_pad+0x148>)
    df08:	e7b8      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df0a:	2901      	cmp	r1, #1
    df0c:	d007      	beq.n	df1e <_sercom_get_default_pad+0xbe>
    df0e:	2900      	cmp	r1, #0
    df10:	d023      	beq.n	df5a <_sercom_get_default_pad+0xfa>
    df12:	2902      	cmp	r1, #2
    df14:	d005      	beq.n	df22 <_sercom_get_default_pad+0xc2>
    df16:	2903      	cmp	r1, #3
    df18:	d005      	beq.n	df26 <_sercom_get_default_pad+0xc6>
	return 0;
    df1a:	2000      	movs	r0, #0
    df1c:	e7ae      	b.n	de7c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    df1e:	4823      	ldr	r0, [pc, #140]	; (dfac <_sercom_get_default_pad+0x14c>)
    df20:	e7ac      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df22:	4823      	ldr	r0, [pc, #140]	; (dfb0 <_sercom_get_default_pad+0x150>)
    df24:	e7aa      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df26:	4823      	ldr	r0, [pc, #140]	; (dfb4 <_sercom_get_default_pad+0x154>)
    df28:	e7a8      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df2a:	2901      	cmp	r1, #1
    df2c:	d007      	beq.n	df3e <_sercom_get_default_pad+0xde>
    df2e:	2900      	cmp	r1, #0
    df30:	d015      	beq.n	df5e <_sercom_get_default_pad+0xfe>
    df32:	2902      	cmp	r1, #2
    df34:	d005      	beq.n	df42 <_sercom_get_default_pad+0xe2>
    df36:	2903      	cmp	r1, #3
    df38:	d005      	beq.n	df46 <_sercom_get_default_pad+0xe6>
	return 0;
    df3a:	2000      	movs	r0, #0
    df3c:	e79e      	b.n	de7c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    df3e:	481e      	ldr	r0, [pc, #120]	; (dfb8 <_sercom_get_default_pad+0x158>)
    df40:	e79c      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df42:	481e      	ldr	r0, [pc, #120]	; (dfbc <_sercom_get_default_pad+0x15c>)
    df44:	e79a      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df46:	481e      	ldr	r0, [pc, #120]	; (dfc0 <_sercom_get_default_pad+0x160>)
    df48:	e798      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df4a:	481e      	ldr	r0, [pc, #120]	; (dfc4 <_sercom_get_default_pad+0x164>)
    df4c:	e796      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df4e:	2003      	movs	r0, #3
    df50:	e794      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df52:	481d      	ldr	r0, [pc, #116]	; (dfc8 <_sercom_get_default_pad+0x168>)
    df54:	e792      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df56:	481d      	ldr	r0, [pc, #116]	; (dfcc <_sercom_get_default_pad+0x16c>)
    df58:	e790      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df5a:	481d      	ldr	r0, [pc, #116]	; (dfd0 <_sercom_get_default_pad+0x170>)
    df5c:	e78e      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df5e:	481d      	ldr	r0, [pc, #116]	; (dfd4 <_sercom_get_default_pad+0x174>)
    df60:	e78c      	b.n	de7c <_sercom_get_default_pad+0x1c>
    df62:	46c0      	nop			; (mov r8, r8)
    df64:	42001000 	.word	0x42001000
    df68:	42001800 	.word	0x42001800
    df6c:	42001c00 	.word	0x42001c00
    df70:	42001400 	.word	0x42001400
    df74:	42000800 	.word	0x42000800
    df78:	42000c00 	.word	0x42000c00
    df7c:	00050003 	.word	0x00050003
    df80:	00060003 	.word	0x00060003
    df84:	00070003 	.word	0x00070003
    df88:	00010003 	.word	0x00010003
    df8c:	001e0003 	.word	0x001e0003
    df90:	001f0003 	.word	0x001f0003
    df94:	00090003 	.word	0x00090003
    df98:	000a0003 	.word	0x000a0003
    df9c:	000b0003 	.word	0x000b0003
    dfa0:	00110003 	.word	0x00110003
    dfa4:	00120003 	.word	0x00120003
    dfa8:	00130003 	.word	0x00130003
    dfac:	000d0003 	.word	0x000d0003
    dfb0:	000e0003 	.word	0x000e0003
    dfb4:	000f0003 	.word	0x000f0003
    dfb8:	00170003 	.word	0x00170003
    dfbc:	00180003 	.word	0x00180003
    dfc0:	00190003 	.word	0x00190003
    dfc4:	00040003 	.word	0x00040003
    dfc8:	00080003 	.word	0x00080003
    dfcc:	00100003 	.word	0x00100003
    dfd0:	000c0003 	.word	0x000c0003
    dfd4:	00160003 	.word	0x00160003

0000dfd8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    dfd8:	b530      	push	{r4, r5, lr}
    dfda:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    dfdc:	4b0b      	ldr	r3, [pc, #44]	; (e00c <_sercom_get_sercom_inst_index+0x34>)
    dfde:	466a      	mov	r2, sp
    dfe0:	cb32      	ldmia	r3!, {r1, r4, r5}
    dfe2:	c232      	stmia	r2!, {r1, r4, r5}
    dfe4:	cb32      	ldmia	r3!, {r1, r4, r5}
    dfe6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    dfe8:	9b00      	ldr	r3, [sp, #0]
    dfea:	4283      	cmp	r3, r0
    dfec:	d00b      	beq.n	e006 <_sercom_get_sercom_inst_index+0x2e>
    dfee:	2301      	movs	r3, #1
    dff0:	009a      	lsls	r2, r3, #2
    dff2:	4669      	mov	r1, sp
    dff4:	5852      	ldr	r2, [r2, r1]
    dff6:	4282      	cmp	r2, r0
    dff8:	d006      	beq.n	e008 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    dffa:	3301      	adds	r3, #1
    dffc:	2b06      	cmp	r3, #6
    dffe:	d1f7      	bne.n	dff0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    e000:	2000      	movs	r0, #0
}
    e002:	b007      	add	sp, #28
    e004:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    e006:	2300      	movs	r3, #0
			return i;
    e008:	b2d8      	uxtb	r0, r3
    e00a:	e7fa      	b.n	e002 <_sercom_get_sercom_inst_index+0x2a>
    e00c:	000140f8 	.word	0x000140f8

0000e010 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    e010:	4770      	bx	lr
	...

0000e014 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    e014:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    e016:	4b0a      	ldr	r3, [pc, #40]	; (e040 <_sercom_set_handler+0x2c>)
    e018:	781b      	ldrb	r3, [r3, #0]
    e01a:	2b00      	cmp	r3, #0
    e01c:	d10c      	bne.n	e038 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    e01e:	4f09      	ldr	r7, [pc, #36]	; (e044 <_sercom_set_handler+0x30>)
    e020:	4e09      	ldr	r6, [pc, #36]	; (e048 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    e022:	4d0a      	ldr	r5, [pc, #40]	; (e04c <_sercom_set_handler+0x38>)
    e024:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    e026:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    e028:	195a      	adds	r2, r3, r5
    e02a:	6014      	str	r4, [r2, #0]
    e02c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    e02e:	2b18      	cmp	r3, #24
    e030:	d1f9      	bne.n	e026 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    e032:	2201      	movs	r2, #1
    e034:	4b02      	ldr	r3, [pc, #8]	; (e040 <_sercom_set_handler+0x2c>)
    e036:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    e038:	0080      	lsls	r0, r0, #2
    e03a:	4b02      	ldr	r3, [pc, #8]	; (e044 <_sercom_set_handler+0x30>)
    e03c:	50c1      	str	r1, [r0, r3]
}
    e03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e040:	2000025a 	.word	0x2000025a
    e044:	2000025c 	.word	0x2000025c
    e048:	0000e011 	.word	0x0000e011
    e04c:	20000574 	.word	0x20000574

0000e050 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    e050:	b500      	push	{lr}
    e052:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    e054:	2309      	movs	r3, #9
    e056:	466a      	mov	r2, sp
    e058:	7013      	strb	r3, [r2, #0]
    e05a:	3301      	adds	r3, #1
    e05c:	7053      	strb	r3, [r2, #1]
    e05e:	3301      	adds	r3, #1
    e060:	7093      	strb	r3, [r2, #2]
    e062:	3301      	adds	r3, #1
    e064:	70d3      	strb	r3, [r2, #3]
    e066:	3301      	adds	r3, #1
    e068:	7113      	strb	r3, [r2, #4]
    e06a:	3301      	adds	r3, #1
    e06c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    e06e:	4b03      	ldr	r3, [pc, #12]	; (e07c <_sercom_get_interrupt_vector+0x2c>)
    e070:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    e072:	466b      	mov	r3, sp
    e074:	5618      	ldrsb	r0, [r3, r0]
}
    e076:	b003      	add	sp, #12
    e078:	bd00      	pop	{pc}
    e07a:	46c0      	nop			; (mov r8, r8)
    e07c:	0000dfd9 	.word	0x0000dfd9

0000e080 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    e080:	b510      	push	{r4, lr}
    e082:	4b02      	ldr	r3, [pc, #8]	; (e08c <SERCOM0_Handler+0xc>)
    e084:	681b      	ldr	r3, [r3, #0]
    e086:	2000      	movs	r0, #0
    e088:	4798      	blx	r3
    e08a:	bd10      	pop	{r4, pc}
    e08c:	2000025c 	.word	0x2000025c

0000e090 <SERCOM1_Handler>:
    e090:	b510      	push	{r4, lr}
    e092:	4b02      	ldr	r3, [pc, #8]	; (e09c <SERCOM1_Handler+0xc>)
    e094:	685b      	ldr	r3, [r3, #4]
    e096:	2001      	movs	r0, #1
    e098:	4798      	blx	r3
    e09a:	bd10      	pop	{r4, pc}
    e09c:	2000025c 	.word	0x2000025c

0000e0a0 <SERCOM2_Handler>:
    e0a0:	b510      	push	{r4, lr}
    e0a2:	4b02      	ldr	r3, [pc, #8]	; (e0ac <SERCOM2_Handler+0xc>)
    e0a4:	689b      	ldr	r3, [r3, #8]
    e0a6:	2002      	movs	r0, #2
    e0a8:	4798      	blx	r3
    e0aa:	bd10      	pop	{r4, pc}
    e0ac:	2000025c 	.word	0x2000025c

0000e0b0 <SERCOM3_Handler>:
    e0b0:	b510      	push	{r4, lr}
    e0b2:	4b02      	ldr	r3, [pc, #8]	; (e0bc <SERCOM3_Handler+0xc>)
    e0b4:	68db      	ldr	r3, [r3, #12]
    e0b6:	2003      	movs	r0, #3
    e0b8:	4798      	blx	r3
    e0ba:	bd10      	pop	{r4, pc}
    e0bc:	2000025c 	.word	0x2000025c

0000e0c0 <SERCOM4_Handler>:
    e0c0:	b510      	push	{r4, lr}
    e0c2:	4b02      	ldr	r3, [pc, #8]	; (e0cc <SERCOM4_Handler+0xc>)
    e0c4:	691b      	ldr	r3, [r3, #16]
    e0c6:	2004      	movs	r0, #4
    e0c8:	4798      	blx	r3
    e0ca:	bd10      	pop	{r4, pc}
    e0cc:	2000025c 	.word	0x2000025c

0000e0d0 <SERCOM5_Handler>:
    e0d0:	b510      	push	{r4, lr}
    e0d2:	4b02      	ldr	r3, [pc, #8]	; (e0dc <SERCOM5_Handler+0xc>)
    e0d4:	695b      	ldr	r3, [r3, #20]
    e0d6:	2005      	movs	r0, #5
    e0d8:	4798      	blx	r3
    e0da:	bd10      	pop	{r4, pc}
    e0dc:	2000025c 	.word	0x2000025c

0000e0e0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    e0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0e2:	b08b      	sub	sp, #44	; 0x2c
    e0e4:	0005      	movs	r5, r0
    e0e6:	000c      	movs	r4, r1
    e0e8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    e0ea:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    e0ec:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    e0ee:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    e0f0:	079b      	lsls	r3, r3, #30
    e0f2:	d501      	bpl.n	e0f8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    e0f4:	b00b      	add	sp, #44	; 0x2c
    e0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    e0f8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    e0fa:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    e0fc:	07db      	lsls	r3, r3, #31
    e0fe:	d4f9      	bmi.n	e0f4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    e100:	0008      	movs	r0, r1
    e102:	4b6f      	ldr	r3, [pc, #444]	; (e2c0 <spi_init+0x1e0>)
    e104:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    e106:	4a6f      	ldr	r2, [pc, #444]	; (e2c4 <spi_init+0x1e4>)
    e108:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    e10a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    e10c:	2301      	movs	r3, #1
    e10e:	40bb      	lsls	r3, r7
    e110:	430b      	orrs	r3, r1
    e112:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    e114:	a909      	add	r1, sp, #36	; 0x24
    e116:	2724      	movs	r7, #36	; 0x24
    e118:	5df3      	ldrb	r3, [r6, r7]
    e11a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    e11c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    e11e:	b2c3      	uxtb	r3, r0
    e120:	9301      	str	r3, [sp, #4]
    e122:	0018      	movs	r0, r3
    e124:	4b68      	ldr	r3, [pc, #416]	; (e2c8 <spi_init+0x1e8>)
    e126:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    e128:	9801      	ldr	r0, [sp, #4]
    e12a:	4b68      	ldr	r3, [pc, #416]	; (e2cc <spi_init+0x1ec>)
    e12c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    e12e:	5df0      	ldrb	r0, [r6, r7]
    e130:	2100      	movs	r1, #0
    e132:	4b67      	ldr	r3, [pc, #412]	; (e2d0 <spi_init+0x1f0>)
    e134:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    e136:	7833      	ldrb	r3, [r6, #0]
    e138:	2b01      	cmp	r3, #1
    e13a:	d03f      	beq.n	e1bc <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    e13c:	7833      	ldrb	r3, [r6, #0]
    e13e:	2b00      	cmp	r3, #0
    e140:	d103      	bne.n	e14a <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    e142:	6823      	ldr	r3, [r4, #0]
    e144:	2208      	movs	r2, #8
    e146:	4313      	orrs	r3, r2
    e148:	6023      	str	r3, [r4, #0]
    e14a:	002b      	movs	r3, r5
    e14c:	330c      	adds	r3, #12
    e14e:	0029      	movs	r1, r5
    e150:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    e152:	2200      	movs	r2, #0
    e154:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    e156:	428b      	cmp	r3, r1
    e158:	d1fc      	bne.n	e154 <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    e15a:	2300      	movs	r3, #0
    e15c:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    e15e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    e160:	2400      	movs	r4, #0
    e162:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    e164:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    e166:	3336      	adds	r3, #54	; 0x36
    e168:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    e16a:	3301      	adds	r3, #1
    e16c:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    e16e:	3301      	adds	r3, #1
    e170:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    e172:	3b35      	subs	r3, #53	; 0x35
    e174:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    e176:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    e178:	6828      	ldr	r0, [r5, #0]
    e17a:	4b51      	ldr	r3, [pc, #324]	; (e2c0 <spi_init+0x1e0>)
    e17c:	4798      	blx	r3
    e17e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    e180:	4954      	ldr	r1, [pc, #336]	; (e2d4 <spi_init+0x1f4>)
    e182:	4b55      	ldr	r3, [pc, #340]	; (e2d8 <spi_init+0x1f8>)
    e184:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    e186:	00bf      	lsls	r7, r7, #2
    e188:	4b54      	ldr	r3, [pc, #336]	; (e2dc <spi_init+0x1fc>)
    e18a:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    e18c:	682f      	ldr	r7, [r5, #0]
    e18e:	ab04      	add	r3, sp, #16
    e190:	2280      	movs	r2, #128	; 0x80
    e192:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    e194:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    e196:	3a7f      	subs	r2, #127	; 0x7f
    e198:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    e19a:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    e19c:	7833      	ldrb	r3, [r6, #0]
    e19e:	2b00      	cmp	r3, #0
    e1a0:	d102      	bne.n	e1a8 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    e1a2:	2200      	movs	r2, #0
    e1a4:	ab04      	add	r3, sp, #16
    e1a6:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    e1a8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    e1aa:	9305      	str	r3, [sp, #20]
    e1ac:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    e1ae:	9306      	str	r3, [sp, #24]
    e1b0:	6b33      	ldr	r3, [r6, #48]	; 0x30
    e1b2:	9307      	str	r3, [sp, #28]
    e1b4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    e1b6:	9308      	str	r3, [sp, #32]
    e1b8:	2400      	movs	r4, #0
    e1ba:	e00b      	b.n	e1d4 <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    e1bc:	6823      	ldr	r3, [r4, #0]
    e1be:	220c      	movs	r2, #12
    e1c0:	4313      	orrs	r3, r2
    e1c2:	6023      	str	r3, [r4, #0]
    e1c4:	e7ba      	b.n	e13c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    e1c6:	0038      	movs	r0, r7
    e1c8:	4b45      	ldr	r3, [pc, #276]	; (e2e0 <spi_init+0x200>)
    e1ca:	4798      	blx	r3
    e1cc:	e00a      	b.n	e1e4 <spi_init+0x104>
    e1ce:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    e1d0:	2c04      	cmp	r4, #4
    e1d2:	d010      	beq.n	e1f6 <spi_init+0x116>
    e1d4:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    e1d6:	00a3      	lsls	r3, r4, #2
    e1d8:	aa02      	add	r2, sp, #8
    e1da:	200c      	movs	r0, #12
    e1dc:	1812      	adds	r2, r2, r0
    e1de:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    e1e0:	2800      	cmp	r0, #0
    e1e2:	d0f0      	beq.n	e1c6 <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    e1e4:	1c43      	adds	r3, r0, #1
    e1e6:	d0f2      	beq.n	e1ce <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    e1e8:	a904      	add	r1, sp, #16
    e1ea:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    e1ec:	0c00      	lsrs	r0, r0, #16
    e1ee:	b2c0      	uxtb	r0, r0
    e1f0:	4b3c      	ldr	r3, [pc, #240]	; (e2e4 <spi_init+0x204>)
    e1f2:	4798      	blx	r3
    e1f4:	e7eb      	b.n	e1ce <spi_init+0xee>
	module->mode             = config->mode;
    e1f6:	7833      	ldrb	r3, [r6, #0]
    e1f8:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    e1fa:	7c33      	ldrb	r3, [r6, #16]
    e1fc:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    e1fe:	7cb3      	ldrb	r3, [r6, #18]
    e200:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    e202:	7d33      	ldrb	r3, [r6, #20]
    e204:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    e206:	2200      	movs	r2, #0
    e208:	ab02      	add	r3, sp, #8
    e20a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    e20c:	7833      	ldrb	r3, [r6, #0]
    e20e:	2b01      	cmp	r3, #1
    e210:	d012      	beq.n	e238 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    e212:	7833      	ldrb	r3, [r6, #0]
    e214:	2b00      	cmp	r3, #0
    e216:	d126      	bne.n	e266 <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    e218:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    e21a:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    e21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    e21e:	7ff1      	ldrb	r1, [r6, #31]
    e220:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    e222:	7fb4      	ldrb	r4, [r6, #30]
    e224:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    e226:	4319      	orrs	r1, r3
    e228:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    e22a:	2320      	movs	r3, #32
    e22c:	5cf3      	ldrb	r3, [r6, r3]
    e22e:	2b00      	cmp	r3, #0
    e230:	d01b      	beq.n	e26a <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    e232:	2340      	movs	r3, #64	; 0x40
    e234:	431a      	orrs	r2, r3
    e236:	e018      	b.n	e26a <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    e238:	6828      	ldr	r0, [r5, #0]
    e23a:	4b21      	ldr	r3, [pc, #132]	; (e2c0 <spi_init+0x1e0>)
    e23c:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    e23e:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    e240:	b2c0      	uxtb	r0, r0
    e242:	4b29      	ldr	r3, [pc, #164]	; (e2e8 <spi_init+0x208>)
    e244:	4798      	blx	r3
    e246:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    e248:	ab02      	add	r3, sp, #8
    e24a:	1d9a      	adds	r2, r3, #6
    e24c:	69b0      	ldr	r0, [r6, #24]
    e24e:	4b27      	ldr	r3, [pc, #156]	; (e2ec <spi_init+0x20c>)
    e250:	4798      	blx	r3
    e252:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    e254:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    e256:	2b00      	cmp	r3, #0
    e258:	d000      	beq.n	e25c <spi_init+0x17c>
    e25a:	e74b      	b.n	e0f4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    e25c:	ab02      	add	r3, sp, #8
    e25e:	3306      	adds	r3, #6
    e260:	781b      	ldrb	r3, [r3, #0]
    e262:	733b      	strb	r3, [r7, #12]
    e264:	e7d5      	b.n	e212 <spi_init+0x132>
	uint32_t ctrlb = 0;
    e266:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    e268:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    e26a:	6873      	ldr	r3, [r6, #4]
    e26c:	68b1      	ldr	r1, [r6, #8]
    e26e:	430b      	orrs	r3, r1
    e270:	68f1      	ldr	r1, [r6, #12]
    e272:	430b      	orrs	r3, r1
    e274:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    e276:	7c31      	ldrb	r1, [r6, #16]
    e278:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    e27a:	7c71      	ldrb	r1, [r6, #17]
    e27c:	2900      	cmp	r1, #0
    e27e:	d103      	bne.n	e288 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    e280:	491b      	ldr	r1, [pc, #108]	; (e2f0 <spi_init+0x210>)
    e282:	7889      	ldrb	r1, [r1, #2]
    e284:	0789      	lsls	r1, r1, #30
    e286:	d501      	bpl.n	e28c <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    e288:	2180      	movs	r1, #128	; 0x80
    e28a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    e28c:	7cb1      	ldrb	r1, [r6, #18]
    e28e:	2900      	cmp	r1, #0
    e290:	d002      	beq.n	e298 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    e292:	2180      	movs	r1, #128	; 0x80
    e294:	0289      	lsls	r1, r1, #10
    e296:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    e298:	7cf1      	ldrb	r1, [r6, #19]
    e29a:	2900      	cmp	r1, #0
    e29c:	d002      	beq.n	e2a4 <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    e29e:	2180      	movs	r1, #128	; 0x80
    e2a0:	0089      	lsls	r1, r1, #2
    e2a2:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    e2a4:	7d31      	ldrb	r1, [r6, #20]
    e2a6:	2900      	cmp	r1, #0
    e2a8:	d002      	beq.n	e2b0 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    e2aa:	2180      	movs	r1, #128	; 0x80
    e2ac:	0189      	lsls	r1, r1, #6
    e2ae:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    e2b0:	6839      	ldr	r1, [r7, #0]
    e2b2:	430b      	orrs	r3, r1
    e2b4:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    e2b6:	687b      	ldr	r3, [r7, #4]
    e2b8:	431a      	orrs	r2, r3
    e2ba:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    e2bc:	2000      	movs	r0, #0
    e2be:	e719      	b.n	e0f4 <spi_init+0x14>
    e2c0:	0000dfd9 	.word	0x0000dfd9
    e2c4:	40000400 	.word	0x40000400
    e2c8:	0000f551 	.word	0x0000f551
    e2cc:	0000f4c5 	.word	0x0000f4c5
    e2d0:	0000de15 	.word	0x0000de15
    e2d4:	0000e715 	.word	0x0000e715
    e2d8:	0000e015 	.word	0x0000e015
    e2dc:	20000574 	.word	0x20000574
    e2e0:	0000de61 	.word	0x0000de61
    e2e4:	0000f649 	.word	0x0000f649
    e2e8:	0000f56d 	.word	0x0000f56d
    e2ec:	0000dd57 	.word	0x0000dd57
    e2f0:	41002000 	.word	0x41002000

0000e2f4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    e2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2f6:	46d6      	mov	lr, sl
    e2f8:	464f      	mov	r7, r9
    e2fa:	b580      	push	{r7, lr}
    e2fc:	b083      	sub	sp, #12
    e2fe:	468c      	mov	ip, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    e300:	2538      	movs	r5, #56	; 0x38
    e302:	5d46      	ldrb	r6, [r0, r5]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    e304:	3d33      	subs	r5, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    e306:	2e05      	cmp	r6, #5
    e308:	d075      	beq.n	e3f6 <spi_read_buffer_wait+0x102>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    e30a:	3512      	adds	r5, #18
	if (length == 0) {
    e30c:	2a00      	cmp	r2, #0
    e30e:	d072      	beq.n	e3f6 <spi_read_buffer_wait+0x102>
	}

	if (!(module->receiver_enabled)) {
    e310:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    e312:	3505      	adds	r5, #5
	if (!(module->receiver_enabled)) {
    e314:	2c00      	cmp	r4, #0
    e316:	d06e      	beq.n	e3f6 <spi_read_buffer_wait+0x102>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    e318:	7944      	ldrb	r4, [r0, #5]
    e31a:	2c00      	cmp	r4, #0
    e31c:	d103      	bne.n	e326 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e31e:	6804      	ldr	r4, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e320:	7e25      	ldrb	r5, [r4, #24]
    e322:	07a9      	lsls	r1, r5, #30
    e324:	d40a      	bmi.n	e33c <spi_read_buffer_wait+0x48>
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    e326:	3a01      	subs	r2, #1
    e328:	b294      	uxth	r4, r2
    e32a:	2600      	movs	r6, #0

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
				if (spi_is_ready_to_read(module)) {
    e32c:	2204      	movs	r2, #4
					break;
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    e32e:	2102      	movs	r1, #2
    e330:	4689      	mov	r9, r1
			while (!spi_is_ready_to_write(module)) {
    e332:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e334:	05db      	lsls	r3, r3, #23
    e336:	0ddb      	lsrs	r3, r3, #23
    e338:	469a      	mov	sl, r3
    e33a:	e037      	b.n	e3ac <spi_read_buffer_wait+0xb8>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    e33c:	2502      	movs	r5, #2
    e33e:	7625      	strb	r5, [r4, #24]
    e340:	e7f1      	b.n	e326 <spi_read_buffer_wait+0x32>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e342:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e344:	7e0b      	ldrb	r3, [r1, #24]
			while (!spi_is_ready_to_write(module)) {
    e346:	423b      	tst	r3, r7
    e348:	d0fc      	beq.n	e344 <spi_read_buffer_wait+0x50>
    e34a:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_write(module)) {
    e34c:	423b      	tst	r3, r7
    e34e:	d009      	beq.n	e364 <spi_read_buffer_wait+0x70>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e350:	4653      	mov	r3, sl
    e352:	628b      	str	r3, [r1, #40]	; 0x28
    e354:	e02d      	b.n	e3b2 <spi_read_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e356:	7e0b      	ldrb	r3, [r1, #24]
			if (spi_is_write_complete(module)) {
    e358:	464d      	mov	r5, r9
    e35a:	422b      	tst	r3, r5
    e35c:	d138      	bne.n	e3d0 <spi_read_buffer_wait+0xdc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e35e:	7e0b      	ldrb	r3, [r1, #24]
				_spi_clear_tx_complete_flag(module);
				return STATUS_ABORTED;
			}

			if (!spi_is_ready_to_read(module)) {
    e360:	4213      	tst	r3, r2
    e362:	d045      	beq.n	e3f0 <spi_read_buffer_wait+0xfc>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e364:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e366:	7e0b      	ldrb	r3, [r1, #24]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    e368:	4213      	tst	r3, r2
    e36a:	d0fc      	beq.n	e366 <spi_read_buffer_wait+0x72>
    e36c:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    e36e:	4213      	tst	r3, r2
    e370:	d040      	beq.n	e3f4 <spi_read_buffer_wait+0x100>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e372:	8b4b      	ldrh	r3, [r1, #26]
	enum status_code retval = STATUS_OK;
    e374:	2500      	movs	r5, #0
    e376:	9501      	str	r5, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e378:	4213      	tst	r3, r2
    e37a:	d002      	beq.n	e382 <spi_read_buffer_wait+0x8e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e37c:	834a      	strh	r2, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    e37e:	231e      	movs	r3, #30
    e380:	9301      	str	r3, [sp, #4]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e382:	7983      	ldrb	r3, [r0, #6]
    e384:	2b01      	cmp	r3, #1
    e386:	d027      	beq.n	e3d8 <spi_read_buffer_wait+0xe4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e388:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    e38a:	b2db      	uxtb	r3, r3
		}

		uint16_t received_data = 0;
		enum status_code retval = spi_read(module, &received_data);

		if (retval != STATUS_OK) {
    e38c:	9901      	ldr	r1, [sp, #4]
    e38e:	2900      	cmp	r1, #0
    e390:	d137      	bne.n	e402 <spi_read_buffer_wait+0x10e>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    e392:	1c75      	adds	r5, r6, #1
    e394:	b2ad      	uxth	r5, r5
    e396:	4661      	mov	r1, ip
    e398:	558b      	strb	r3, [r1, r6]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e39a:	7981      	ldrb	r1, [r0, #6]
    e39c:	2901      	cmp	r1, #1
    e39e:	d01f      	beq.n	e3e0 <spi_read_buffer_wait+0xec>
		rx_data[rx_pos++] = received_data;
    e3a0:	002e      	movs	r6, r5
	while (length--) {
    e3a2:	3c01      	subs	r4, #1
    e3a4:	b2a4      	uxth	r4, r4
    e3a6:	4b18      	ldr	r3, [pc, #96]	; (e408 <spi_read_buffer_wait+0x114>)
    e3a8:	429c      	cmp	r4, r3
    e3aa:	d01f      	beq.n	e3ec <spi_read_buffer_wait+0xf8>
		if (module->mode == SPI_MODE_MASTER) {
    e3ac:	7943      	ldrb	r3, [r0, #5]
    e3ae:	2b01      	cmp	r3, #1
    e3b0:	d0c7      	beq.n	e342 <spi_read_buffer_wait+0x4e>
		if (module->mode == SPI_MODE_SLAVE) {
    e3b2:	7943      	ldrb	r3, [r0, #5]
    e3b4:	2b00      	cmp	r3, #0
    e3b6:	d1d5      	bne.n	e364 <spi_read_buffer_wait+0x70>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e3b8:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e3ba:	7e0b      	ldrb	r3, [r1, #24]
				if (spi_is_ready_to_read(module)) {
    e3bc:	4213      	tst	r3, r2
    e3be:	d1ca      	bne.n	e356 <spi_read_buffer_wait+0x62>
    e3c0:	4b12      	ldr	r3, [pc, #72]	; (e40c <spi_read_buffer_wait+0x118>)
    e3c2:	7e0d      	ldrb	r5, [r1, #24]
    e3c4:	4215      	tst	r5, r2
    e3c6:	d1c6      	bne.n	e356 <spi_read_buffer_wait+0x62>
    e3c8:	3b01      	subs	r3, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    e3ca:	2b00      	cmp	r3, #0
    e3cc:	d1f9      	bne.n	e3c2 <spi_read_buffer_wait+0xce>
    e3ce:	e7c2      	b.n	e356 <spi_read_buffer_wait+0x62>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    e3d0:	2302      	movs	r3, #2
    e3d2:	760b      	strb	r3, [r1, #24]
				return STATUS_ABORTED;
    e3d4:	2504      	movs	r5, #4
    e3d6:	e00e      	b.n	e3f6 <spi_read_buffer_wait+0x102>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e3d8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    e3da:	05db      	lsls	r3, r3, #23
    e3dc:	0ddb      	lsrs	r3, r3, #23
    e3de:	e7d5      	b.n	e38c <spi_read_buffer_wait+0x98>
			rx_data[rx_pos++] = (received_data >> 8);
    e3e0:	3602      	adds	r6, #2
    e3e2:	b2b6      	uxth	r6, r6
    e3e4:	0a1b      	lsrs	r3, r3, #8
    e3e6:	4661      	mov	r1, ip
    e3e8:	554b      	strb	r3, [r1, r5]
    e3ea:	e7da      	b.n	e3a2 <spi_read_buffer_wait+0xae>
    e3ec:	9d01      	ldr	r5, [sp, #4]
    e3ee:	e002      	b.n	e3f6 <spi_read_buffer_wait+0x102>
				return STATUS_ERR_TIMEOUT;
    e3f0:	2512      	movs	r5, #18
    e3f2:	e000      	b.n	e3f6 <spi_read_buffer_wait+0x102>
		return STATUS_ERR_IO;
    e3f4:	2510      	movs	r5, #16
		}
	}

	return STATUS_OK;
}
    e3f6:	0028      	movs	r0, r5
    e3f8:	b003      	add	sp, #12
    e3fa:	bc0c      	pop	{r2, r3}
    e3fc:	4691      	mov	r9, r2
    e3fe:	469a      	mov	sl, r3
    e400:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e402:	9d01      	ldr	r5, [sp, #4]
    e404:	e7f7      	b.n	e3f6 <spi_read_buffer_wait+0x102>
    e406:	46c0      	nop			; (mov r8, r8)
    e408:	0000ffff 	.word	0x0000ffff
    e40c:	00002710 	.word	0x00002710

0000e410 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    e410:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    e412:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    e414:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    e416:	2c01      	cmp	r4, #1
    e418:	d001      	beq.n	e41e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    e41a:	0018      	movs	r0, r3
    e41c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    e41e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    e420:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    e422:	2c00      	cmp	r4, #0
    e424:	d1f9      	bne.n	e41a <spi_select_slave+0xa>
		if (select) {
    e426:	2a00      	cmp	r2, #0
    e428:	d058      	beq.n	e4dc <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    e42a:	784b      	ldrb	r3, [r1, #1]
    e42c:	2b00      	cmp	r3, #0
    e42e:	d044      	beq.n	e4ba <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e430:	6803      	ldr	r3, [r0, #0]
    e432:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    e434:	07db      	lsls	r3, r3, #31
    e436:	d410      	bmi.n	e45a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    e438:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    e43a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e43c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e43e:	2900      	cmp	r1, #0
    e440:	d104      	bne.n	e44c <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    e442:	0953      	lsrs	r3, r2, #5
    e444:	01db      	lsls	r3, r3, #7
    e446:	492e      	ldr	r1, [pc, #184]	; (e500 <spi_select_slave+0xf0>)
    e448:	468c      	mov	ip, r1
    e44a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e44c:	211f      	movs	r1, #31
    e44e:	4011      	ands	r1, r2
    e450:	2201      	movs	r2, #1
    e452:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    e454:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    e456:	2305      	movs	r3, #5
    e458:	e7df      	b.n	e41a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    e45a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    e45c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    e45e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e460:	2c00      	cmp	r4, #0
    e462:	d104      	bne.n	e46e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    e464:	0953      	lsrs	r3, r2, #5
    e466:	01db      	lsls	r3, r3, #7
    e468:	4c25      	ldr	r4, [pc, #148]	; (e500 <spi_select_slave+0xf0>)
    e46a:	46a4      	mov	ip, r4
    e46c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e46e:	241f      	movs	r4, #31
    e470:	4014      	ands	r4, r2
    e472:	2201      	movs	r2, #1
    e474:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    e476:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    e478:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e47a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e47c:	07d2      	lsls	r2, r2, #31
    e47e:	d501      	bpl.n	e484 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e480:	788a      	ldrb	r2, [r1, #2]
    e482:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    e484:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    e486:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    e488:	2a00      	cmp	r2, #0
    e48a:	d1c6      	bne.n	e41a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e48c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    e48e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e490:	7e13      	ldrb	r3, [r2, #24]
    e492:	420b      	tst	r3, r1
    e494:	d0fc      	beq.n	e490 <spi_select_slave+0x80>
    e496:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    e498:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    e49a:	0749      	lsls	r1, r1, #29
    e49c:	d5bd      	bpl.n	e41a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e49e:	8b53      	ldrh	r3, [r2, #26]
    e4a0:	075b      	lsls	r3, r3, #29
    e4a2:	d501      	bpl.n	e4a8 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e4a4:	2304      	movs	r3, #4
    e4a6:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e4a8:	7983      	ldrb	r3, [r0, #6]
    e4aa:	2b01      	cmp	r3, #1
    e4ac:	d002      	beq.n	e4b4 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e4ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    e4b0:	2300      	movs	r3, #0
    e4b2:	e7b2      	b.n	e41a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e4b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    e4b6:	2300      	movs	r3, #0
    e4b8:	e7af      	b.n	e41a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    e4ba:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    e4bc:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e4be:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e4c0:	2900      	cmp	r1, #0
    e4c2:	d104      	bne.n	e4ce <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    e4c4:	0953      	lsrs	r3, r2, #5
    e4c6:	01db      	lsls	r3, r3, #7
    e4c8:	490d      	ldr	r1, [pc, #52]	; (e500 <spi_select_slave+0xf0>)
    e4ca:	468c      	mov	ip, r1
    e4cc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e4ce:	211f      	movs	r1, #31
    e4d0:	4011      	ands	r1, r2
    e4d2:	2201      	movs	r2, #1
    e4d4:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    e4d6:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    e4d8:	2300      	movs	r3, #0
    e4da:	e79e      	b.n	e41a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    e4dc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    e4de:	09d1      	lsrs	r1, r2, #7
		return NULL;
    e4e0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    e4e2:	2900      	cmp	r1, #0
    e4e4:	d104      	bne.n	e4f0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    e4e6:	0953      	lsrs	r3, r2, #5
    e4e8:	01db      	lsls	r3, r3, #7
    e4ea:	4905      	ldr	r1, [pc, #20]	; (e500 <spi_select_slave+0xf0>)
    e4ec:	468c      	mov	ip, r1
    e4ee:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e4f0:	211f      	movs	r1, #31
    e4f2:	4011      	ands	r1, r2
    e4f4:	2201      	movs	r2, #1
    e4f6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    e4f8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    e4fa:	2300      	movs	r3, #0
    e4fc:	e78d      	b.n	e41a <spi_select_slave+0xa>
    e4fe:	46c0      	nop			; (mov r8, r8)
    e500:	41004400 	.word	0x41004400

0000e504 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    e504:	b5f0      	push	{r4, r5, r6, r7, lr}
    e506:	46de      	mov	lr, fp
    e508:	4657      	mov	r7, sl
    e50a:	464e      	mov	r6, r9
    e50c:	4645      	mov	r5, r8
    e50e:	b5e0      	push	{r5, r6, r7, lr}
    e510:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    e512:	2338      	movs	r3, #56	; 0x38
    e514:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    e516:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    e518:	2c05      	cmp	r4, #5
    e51a:	d002      	beq.n	e522 <spi_write_buffer_wait+0x1e>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    e51c:	3312      	adds	r3, #18
	if (length == 0) {
    e51e:	2a00      	cmp	r2, #0
    e520:	d107      	bne.n	e532 <spi_write_buffer_wait+0x2e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    e522:	0018      	movs	r0, r3
    e524:	b003      	add	sp, #12
    e526:	bc3c      	pop	{r2, r3, r4, r5}
    e528:	4690      	mov	r8, r2
    e52a:	4699      	mov	r9, r3
    e52c:	46a2      	mov	sl, r4
    e52e:	46ab      	mov	fp, r5
    e530:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    e532:	7943      	ldrb	r3, [r0, #5]
    e534:	2b00      	cmp	r3, #0
    e536:	d103      	bne.n	e540 <spi_write_buffer_wait+0x3c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e538:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e53a:	7e1c      	ldrb	r4, [r3, #24]
    e53c:	07a4      	lsls	r4, r4, #30
    e53e:	d40a      	bmi.n	e556 <spi_write_buffer_wait+0x52>
						data_to_send = tx_data[tx_pos++];
    e540:	4693      	mov	fp, r2
    e542:	2400      	movs	r4, #0
				if (spi_is_ready_to_write(module)) {
    e544:	2301      	movs	r3, #1
			if (spi_is_write_complete(module)) {
    e546:	2502      	movs	r5, #2
    e548:	46ac      	mov	ip, r5
					if (spi_is_ready_to_read(module)) {
    e54a:	3502      	adds	r5, #2
    e54c:	46a8      	mov	r8, r5
    e54e:	3a01      	subs	r2, #1
    e550:	b292      	uxth	r2, r2
    e552:	468a      	mov	sl, r1
    e554:	e023      	b.n	e59e <spi_write_buffer_wait+0x9a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    e556:	2402      	movs	r4, #2
    e558:	761c      	strb	r4, [r3, #24]
    e55a:	e7f1      	b.n	e540 <spi_write_buffer_wait+0x3c>
    e55c:	7e35      	ldrb	r5, [r6, #24]
			if (spi_is_write_complete(module)) {
    e55e:	4661      	mov	r1, ip
    e560:	420d      	tst	r5, r1
    e562:	d12e      	bne.n	e5c2 <spi_write_buffer_wait+0xbe>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e564:	7e35      	ldrb	r5, [r6, #24]
			if (!spi_is_ready_to_write(module)) {
    e566:	421d      	tst	r5, r3
    e568:	d100      	bne.n	e56c <spi_write_buffer_wait+0x68>
    e56a:	e0c2      	b.n	e6f2 <spi_write_buffer_wait+0x1ee>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e56c:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e56e:	7e35      	ldrb	r5, [r6, #24]
		while (!spi_is_ready_to_write(module)) {
    e570:	421d      	tst	r5, r3
    e572:	d0fc      	beq.n	e56e <spi_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    e574:	1c67      	adds	r7, r4, #1
    e576:	b2bf      	uxth	r7, r7
    e578:	4651      	mov	r1, sl
    e57a:	5d0d      	ldrb	r5, [r1, r4]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e57c:	7981      	ldrb	r1, [r0, #6]
    e57e:	2901      	cmp	r1, #1
    e580:	d023      	beq.n	e5ca <spi_write_buffer_wait+0xc6>
		uint16_t data_to_send = tx_data[tx_pos++];
    e582:	b2ad      	uxth	r5, r5
    e584:	003c      	movs	r4, r7
    e586:	7e37      	ldrb	r7, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    e588:	421f      	tst	r7, r3
    e58a:	d002      	beq.n	e592 <spi_write_buffer_wait+0x8e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e58c:	05ed      	lsls	r5, r5, #23
    e58e:	0ded      	lsrs	r5, r5, #23
    e590:	62b5      	str	r5, [r6, #40]	; 0x28
    e592:	1e55      	subs	r5, r2, #1
    e594:	b2ad      	uxth	r5, r5
		if (module->receiver_enabled) {
    e596:	79c6      	ldrb	r6, [r0, #7]
    e598:	2e00      	cmp	r6, #0
    e59a:	d11d      	bne.n	e5d8 <spi_write_buffer_wait+0xd4>
    e59c:	002a      	movs	r2, r5
	while (length--) {
    e59e:	4d5a      	ldr	r5, [pc, #360]	; (e708 <spi_write_buffer_wait+0x204>)
    e5a0:	42aa      	cmp	r2, r5
    e5a2:	d070      	beq.n	e686 <spi_write_buffer_wait+0x182>
		if (module->mode == SPI_MODE_SLAVE) {
    e5a4:	7945      	ldrb	r5, [r0, #5]
    e5a6:	2d00      	cmp	r5, #0
    e5a8:	d1e0      	bne.n	e56c <spi_write_buffer_wait+0x68>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e5aa:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e5ac:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_ready_to_write(module)) {
    e5ae:	421d      	tst	r5, r3
    e5b0:	d1d4      	bne.n	e55c <spi_write_buffer_wait+0x58>
    e5b2:	4d56      	ldr	r5, [pc, #344]	; (e70c <spi_write_buffer_wait+0x208>)
    e5b4:	7e37      	ldrb	r7, [r6, #24]
    e5b6:	421f      	tst	r7, r3
    e5b8:	d1d0      	bne.n	e55c <spi_write_buffer_wait+0x58>
    e5ba:	3d01      	subs	r5, #1
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    e5bc:	2d00      	cmp	r5, #0
    e5be:	d1f9      	bne.n	e5b4 <spi_write_buffer_wait+0xb0>
    e5c0:	e7cc      	b.n	e55c <spi_write_buffer_wait+0x58>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    e5c2:	2302      	movs	r3, #2
    e5c4:	7633      	strb	r3, [r6, #24]
				return STATUS_ABORTED;
    e5c6:	3302      	adds	r3, #2
    e5c8:	e7ab      	b.n	e522 <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    e5ca:	3402      	adds	r4, #2
    e5cc:	b2a4      	uxth	r4, r4
    e5ce:	4651      	mov	r1, sl
    e5d0:	5dcf      	ldrb	r7, [r1, r7]
    e5d2:	023f      	lsls	r7, r7, #8
    e5d4:	433d      	orrs	r5, r7
    e5d6:	e7d6      	b.n	e586 <spi_write_buffer_wait+0x82>
    e5d8:	4651      	mov	r1, sl
			if (module->mode == SPI_MODE_SLAVE) {
    e5da:	7945      	ldrb	r5, [r0, #5]
    e5dc:	2d00      	cmp	r5, #0
    e5de:	d137      	bne.n	e650 <spi_write_buffer_wait+0x14c>
    e5e0:	4d4b      	ldr	r5, [pc, #300]	; (e710 <spi_write_buffer_wait+0x20c>)
    e5e2:	9101      	str	r1, [sp, #4]
    e5e4:	e012      	b.n	e60c <spi_write_buffer_wait+0x108>
							data_to_send |= (tx_data[tx_pos++] << 8);
    e5e6:	3402      	adds	r4, #2
    e5e8:	b2a4      	uxth	r4, r4
    e5ea:	4649      	mov	r1, r9
    e5ec:	9f01      	ldr	r7, [sp, #4]
    e5ee:	5c79      	ldrb	r1, [r7, r1]
    e5f0:	0209      	lsls	r1, r1, #8
    e5f2:	9f00      	ldr	r7, [sp, #0]
    e5f4:	430f      	orrs	r7, r1
    e5f6:	e01b      	b.n	e630 <spi_write_buffer_wait+0x12c>
						length--;
    e5f8:	3a01      	subs	r2, #1
    e5fa:	b292      	uxth	r2, r2
	SercomSpi *const spi_module = &(module->hw->SPI);
    e5fc:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e5fe:	7e37      	ldrb	r7, [r6, #24]
					if (spi_is_ready_to_read(module)) {
    e600:	4641      	mov	r1, r8
    e602:	420f      	tst	r7, r1
    e604:	d11b      	bne.n	e63e <spi_write_buffer_wait+0x13a>
    e606:	3d01      	subs	r5, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    e608:	2d00      	cmp	r5, #0
    e60a:	d018      	beq.n	e63e <spi_write_buffer_wait+0x13a>
					if (length && spi_is_ready_to_write(module)) {
    e60c:	2a00      	cmp	r2, #0
    e60e:	d0f5      	beq.n	e5fc <spi_write_buffer_wait+0xf8>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e610:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e612:	7e37      	ldrb	r7, [r6, #24]
    e614:	421f      	tst	r7, r3
    e616:	d0f1      	beq.n	e5fc <spi_write_buffer_wait+0xf8>
						data_to_send = tx_data[tx_pos++];
    e618:	1c67      	adds	r7, r4, #1
    e61a:	b2b9      	uxth	r1, r7
    e61c:	4689      	mov	r9, r1
    e61e:	9901      	ldr	r1, [sp, #4]
    e620:	5d09      	ldrb	r1, [r1, r4]
    e622:	9100      	str	r1, [sp, #0]
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e624:	7981      	ldrb	r1, [r0, #6]
    e626:	2901      	cmp	r1, #1
    e628:	d0dd      	beq.n	e5e6 <spi_write_buffer_wait+0xe2>
						data_to_send = tx_data[tx_pos++];
    e62a:	4669      	mov	r1, sp
    e62c:	880f      	ldrh	r7, [r1, #0]
    e62e:	464c      	mov	r4, r9
    e630:	7e31      	ldrb	r1, [r6, #24]
	if (!spi_is_ready_to_write(module)) {
    e632:	4219      	tst	r1, r3
    e634:	d0e0      	beq.n	e5f8 <spi_write_buffer_wait+0xf4>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e636:	05ff      	lsls	r7, r7, #23
    e638:	0dff      	lsrs	r7, r7, #23
    e63a:	62b7      	str	r7, [r6, #40]	; 0x28
    e63c:	e7dc      	b.n	e5f8 <spi_write_buffer_wait+0xf4>
    e63e:	9901      	ldr	r1, [sp, #4]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e640:	7e35      	ldrb	r5, [r6, #24]
				if (spi_is_write_complete(module)) {
    e642:	4667      	mov	r7, ip
    e644:	423d      	tst	r5, r7
    e646:	d118      	bne.n	e67a <spi_write_buffer_wait+0x176>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e648:	7e35      	ldrb	r5, [r6, #24]
				if (!spi_is_ready_to_read(module)) {
    e64a:	4646      	mov	r6, r8
    e64c:	4235      	tst	r5, r6
    e64e:	d052      	beq.n	e6f6 <spi_write_buffer_wait+0x1f2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e650:	6806      	ldr	r6, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e652:	7e35      	ldrb	r5, [r6, #24]
			while (!spi_is_ready_to_read(module)) {
    e654:	4647      	mov	r7, r8
    e656:	423d      	tst	r5, r7
    e658:	d0fb      	beq.n	e652 <spi_write_buffer_wait+0x14e>
    e65a:	7e35      	ldrb	r5, [r6, #24]
	if (!spi_is_ready_to_read(module)) {
    e65c:	423d      	tst	r5, r7
    e65e:	d007      	beq.n	e670 <spi_write_buffer_wait+0x16c>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e660:	8b75      	ldrh	r5, [r6, #26]
    e662:	423d      	tst	r5, r7
    e664:	d000      	beq.n	e668 <spi_write_buffer_wait+0x164>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e666:	8377      	strh	r7, [r6, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e668:	7985      	ldrb	r5, [r0, #6]
    e66a:	2d01      	cmp	r5, #1
    e66c:	d009      	beq.n	e682 <spi_write_buffer_wait+0x17e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e66e:	6ab5      	ldr	r5, [r6, #40]	; 0x28
			flush_length--;
    e670:	465d      	mov	r5, fp
    e672:	3d01      	subs	r5, #1
    e674:	b2ad      	uxth	r5, r5
    e676:	46ab      	mov	fp, r5
    e678:	e769      	b.n	e54e <spi_write_buffer_wait+0x4a>
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    e67a:	2302      	movs	r3, #2
    e67c:	7633      	strb	r3, [r6, #24]
					return STATUS_ABORTED;
    e67e:	3302      	adds	r3, #2
    e680:	e74f      	b.n	e522 <spi_write_buffer_wait+0x1e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e682:	6ab5      	ldr	r5, [r6, #40]	; 0x28
    e684:	e7f4      	b.n	e670 <spi_write_buffer_wait+0x16c>
	if (module->mode == SPI_MODE_MASTER) {
    e686:	7943      	ldrb	r3, [r0, #5]
    e688:	2b01      	cmp	r3, #1
    e68a:	d00b      	beq.n	e6a4 <spi_write_buffer_wait+0x1a0>
	if (module->mode == SPI_MODE_SLAVE) {
    e68c:	2b00      	cmp	r3, #0
    e68e:	d134      	bne.n	e6fa <spi_write_buffer_wait+0x1f6>
		if (module->receiver_enabled) {
    e690:	79c2      	ldrb	r2, [r0, #7]
    e692:	2a00      	cmp	r2, #0
    e694:	d100      	bne.n	e698 <spi_write_buffer_wait+0x194>
    e696:	e744      	b.n	e522 <spi_write_buffer_wait+0x1e>
					if (spi_is_ready_to_read(module)) {
    e698:	2404      	movs	r4, #4
			while (flush_length) {
    e69a:	465b      	mov	r3, fp
    e69c:	465d      	mov	r5, fp
    e69e:	2b00      	cmp	r3, #0
    e6a0:	d119      	bne.n	e6d6 <spi_write_buffer_wait+0x1d2>
    e6a2:	e73e      	b.n	e522 <spi_write_buffer_wait+0x1e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e6a4:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    e6a6:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e6a8:	7e0b      	ldrb	r3, [r1, #24]
    e6aa:	4213      	tst	r3, r2
    e6ac:	d0fc      	beq.n	e6a8 <spi_write_buffer_wait+0x1a4>
	return STATUS_OK;
    e6ae:	2300      	movs	r3, #0
    e6b0:	e737      	b.n	e522 <spi_write_buffer_wait+0x1e>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e6b2:	7e0b      	ldrb	r3, [r1, #24]
				if (!spi_is_ready_to_read(module)) {
    e6b4:	4223      	tst	r3, r4
    e6b6:	d022      	beq.n	e6fe <spi_write_buffer_wait+0x1fa>
    e6b8:	7e0b      	ldrb	r3, [r1, #24]
	if (!spi_is_ready_to_read(module)) {
    e6ba:	4223      	tst	r3, r4
    e6bc:	d007      	beq.n	e6ce <spi_write_buffer_wait+0x1ca>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e6be:	8b4b      	ldrh	r3, [r1, #26]
    e6c0:	4223      	tst	r3, r4
    e6c2:	d000      	beq.n	e6c6 <spi_write_buffer_wait+0x1c2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e6c4:	834c      	strh	r4, [r1, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e6c6:	7983      	ldrb	r3, [r0, #6]
    e6c8:	2b01      	cmp	r3, #1
    e6ca:	d010      	beq.n	e6ee <spi_write_buffer_wait+0x1ea>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e6cc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
				flush_length--;
    e6ce:	3d01      	subs	r5, #1
    e6d0:	b2ad      	uxth	r5, r5
			while (flush_length) {
    e6d2:	2d00      	cmp	r5, #0
    e6d4:	d015      	beq.n	e702 <spi_write_buffer_wait+0x1fe>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e6d6:	6801      	ldr	r1, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e6d8:	7e0b      	ldrb	r3, [r1, #24]
					if (spi_is_ready_to_read(module)) {
    e6da:	4223      	tst	r3, r4
    e6dc:	d1e9      	bne.n	e6b2 <spi_write_buffer_wait+0x1ae>
    e6de:	4b0b      	ldr	r3, [pc, #44]	; (e70c <spi_write_buffer_wait+0x208>)
    e6e0:	7e0a      	ldrb	r2, [r1, #24]
    e6e2:	4222      	tst	r2, r4
    e6e4:	d1e5      	bne.n	e6b2 <spi_write_buffer_wait+0x1ae>
    e6e6:	3b01      	subs	r3, #1
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    e6e8:	2b00      	cmp	r3, #0
    e6ea:	d1f9      	bne.n	e6e0 <spi_write_buffer_wait+0x1dc>
    e6ec:	e7e1      	b.n	e6b2 <spi_write_buffer_wait+0x1ae>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e6ee:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    e6f0:	e7ed      	b.n	e6ce <spi_write_buffer_wait+0x1ca>
				return STATUS_ERR_TIMEOUT;
    e6f2:	2312      	movs	r3, #18
    e6f4:	e715      	b.n	e522 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    e6f6:	2312      	movs	r3, #18
    e6f8:	e713      	b.n	e522 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    e6fa:	2300      	movs	r3, #0
    e6fc:	e711      	b.n	e522 <spi_write_buffer_wait+0x1e>
					return STATUS_ERR_TIMEOUT;
    e6fe:	2312      	movs	r3, #18
    e700:	e70f      	b.n	e522 <spi_write_buffer_wait+0x1e>
	return STATUS_OK;
    e702:	2300      	movs	r3, #0
    e704:	e70d      	b.n	e522 <spi_write_buffer_wait+0x1e>
    e706:	46c0      	nop			; (mov r8, r8)
    e708:	0000ffff 	.word	0x0000ffff
    e70c:	00002710 	.word	0x00002710
    e710:	00002711 	.word	0x00002711

0000e714 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    e714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    e716:	0080      	lsls	r0, r0, #2
    e718:	4b85      	ldr	r3, [pc, #532]	; (e930 <_spi_interrupt_handler+0x21c>)
    e71a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    e71c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    e71e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    e720:	5ce3      	ldrb	r3, [r4, r3]
    e722:	2236      	movs	r2, #54	; 0x36
    e724:	5ca7      	ldrb	r7, [r4, r2]
    e726:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    e728:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    e72a:	7db5      	ldrb	r5, [r6, #22]
    e72c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    e72e:	07eb      	lsls	r3, r5, #31
    e730:	d52e      	bpl.n	e790 <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    e732:	7963      	ldrb	r3, [r4, #5]
    e734:	2b01      	cmp	r3, #1
    e736:	d025      	beq.n	e784 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    e738:	2b00      	cmp	r3, #0
    e73a:	d129      	bne.n	e790 <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    e73c:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    e73e:	2b00      	cmp	r3, #0
    e740:	d026      	beq.n	e790 <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    e742:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    e744:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e746:	7813      	ldrb	r3, [r2, #0]
    e748:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    e74a:	1c50      	adds	r0, r2, #1
    e74c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e74e:	79a0      	ldrb	r0, [r4, #6]
    e750:	2801      	cmp	r0, #1
    e752:	d100      	bne.n	e756 <_spi_interrupt_handler+0x42>
    e754:	e069      	b.n	e82a <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    e756:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    e758:	05db      	lsls	r3, r3, #23
    e75a:	0ddb      	lsrs	r3, r3, #23
    e75c:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    e75e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    e760:	3b01      	subs	r3, #1
    e762:	b29b      	uxth	r3, r3
    e764:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    e766:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    e768:	b29b      	uxth	r3, r3
    e76a:	2b00      	cmp	r3, #0
    e76c:	d110      	bne.n	e790 <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    e76e:	3301      	adds	r3, #1
    e770:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    e772:	7a63      	ldrb	r3, [r4, #9]
    e774:	2b01      	cmp	r3, #1
    e776:	d10b      	bne.n	e790 <_spi_interrupt_handler+0x7c>
    e778:	79e3      	ldrb	r3, [r4, #7]
    e77a:	2b00      	cmp	r3, #0
    e77c:	d108      	bne.n	e790 <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    e77e:	3302      	adds	r3, #2
    e780:	75b3      	strb	r3, [r6, #22]
    e782:	e005      	b.n	e790 <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    e784:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    e786:	2b00      	cmp	r3, #0
    e788:	d03e      	beq.n	e808 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    e78a:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    e78c:	2b00      	cmp	r3, #0
    e78e:	d1d8      	bne.n	e742 <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    e790:	076b      	lsls	r3, r5, #29
    e792:	d511      	bpl.n	e7b8 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e794:	8b73      	ldrh	r3, [r6, #26]
    e796:	075b      	lsls	r3, r3, #29
    e798:	d551      	bpl.n	e83e <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    e79a:	7a63      	ldrb	r3, [r4, #9]
    e79c:	2b01      	cmp	r3, #1
    e79e:	d008      	beq.n	e7b2 <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    e7a0:	221e      	movs	r2, #30
    e7a2:	2338      	movs	r3, #56	; 0x38
    e7a4:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    e7a6:	3b35      	subs	r3, #53	; 0x35
    e7a8:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    e7aa:	3302      	adds	r3, #2
    e7ac:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    e7ae:	073b      	lsls	r3, r7, #28
    e7b0:	d441      	bmi.n	e836 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    e7b2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e7b4:	2304      	movs	r3, #4
    e7b6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    e7b8:	07ab      	lsls	r3, r5, #30
    e7ba:	d515      	bpl.n	e7e8 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    e7bc:	7963      	ldrb	r3, [r4, #5]
    e7be:	2b00      	cmp	r3, #0
    e7c0:	d10e      	bne.n	e7e0 <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    e7c2:	3307      	adds	r3, #7
    e7c4:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    e7c6:	3b05      	subs	r3, #5
    e7c8:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    e7ca:	3301      	adds	r3, #1
    e7cc:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    e7ce:	2300      	movs	r3, #0
    e7d0:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    e7d2:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    e7d4:	3338      	adds	r3, #56	; 0x38
    e7d6:	2200      	movs	r2, #0
    e7d8:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    e7da:	06fb      	lsls	r3, r7, #27
    e7dc:	d500      	bpl.n	e7e0 <_spi_interrupt_handler+0xcc>
    e7de:	e07f      	b.n	e8e0 <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    e7e0:	7963      	ldrb	r3, [r4, #5]
    e7e2:	2b01      	cmp	r3, #1
    e7e4:	d100      	bne.n	e7e8 <_spi_interrupt_handler+0xd4>
    e7e6:	e07f      	b.n	e8e8 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    e7e8:	072b      	lsls	r3, r5, #28
    e7ea:	d508      	bpl.n	e7fe <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    e7ec:	7963      	ldrb	r3, [r4, #5]
    e7ee:	2b00      	cmp	r3, #0
    e7f0:	d105      	bne.n	e7fe <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    e7f2:	3308      	adds	r3, #8
    e7f4:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    e7f6:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    e7f8:	06bb      	lsls	r3, r7, #26
    e7fa:	d500      	bpl.n	e7fe <_spi_interrupt_handler+0xea>
    e7fc:	e08a      	b.n	e914 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    e7fe:	b26d      	sxtb	r5, r5
    e800:	2d00      	cmp	r5, #0
    e802:	da00      	bge.n	e806 <_spi_interrupt_handler+0xf2>
    e804:	e08a      	b.n	e91c <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    e806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    e808:	4b4a      	ldr	r3, [pc, #296]	; (e934 <_spi_interrupt_handler+0x220>)
    e80a:	881b      	ldrh	r3, [r3, #0]
    e80c:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    e80e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    e810:	3b01      	subs	r3, #1
    e812:	b29b      	uxth	r3, r3
    e814:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    e816:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    e818:	b29b      	uxth	r3, r3
    e81a:	2b00      	cmp	r3, #0
    e81c:	d101      	bne.n	e822 <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    e81e:	3301      	adds	r3, #1
    e820:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    e822:	7963      	ldrb	r3, [r4, #5]
		if (0
    e824:	2b01      	cmp	r3, #1
    e826:	d0b0      	beq.n	e78a <_spi_interrupt_handler+0x76>
    e828:	e786      	b.n	e738 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    e82a:	7850      	ldrb	r0, [r2, #1]
    e82c:	0200      	lsls	r0, r0, #8
    e82e:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    e830:	3202      	adds	r2, #2
    e832:	62e2      	str	r2, [r4, #44]	; 0x2c
    e834:	e790      	b.n	e758 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    e836:	0020      	movs	r0, r4
    e838:	69a3      	ldr	r3, [r4, #24]
    e83a:	4798      	blx	r3
    e83c:	e7b9      	b.n	e7b2 <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    e83e:	7a63      	ldrb	r3, [r4, #9]
    e840:	2b01      	cmp	r3, #1
    e842:	d027      	beq.n	e894 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    e844:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    e846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e848:	05db      	lsls	r3, r3, #23
    e84a:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    e84c:	b2da      	uxtb	r2, r3
    e84e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    e850:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    e852:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e854:	1c51      	adds	r1, r2, #1
    e856:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e858:	79a1      	ldrb	r1, [r4, #6]
    e85a:	2901      	cmp	r1, #1
    e85c:	d033      	beq.n	e8c6 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    e85e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e860:	3b01      	subs	r3, #1
    e862:	b29b      	uxth	r3, r3
    e864:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    e866:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    e868:	b29b      	uxth	r3, r3
    e86a:	2b00      	cmp	r3, #0
    e86c:	d1a4      	bne.n	e7b8 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    e86e:	2200      	movs	r2, #0
    e870:	3338      	adds	r3, #56	; 0x38
    e872:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    e874:	3b34      	subs	r3, #52	; 0x34
    e876:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    e878:	7a63      	ldrb	r3, [r4, #9]
    e87a:	2b02      	cmp	r3, #2
    e87c:	d029      	beq.n	e8d2 <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    e87e:	7a63      	ldrb	r3, [r4, #9]
    e880:	2b00      	cmp	r3, #0
    e882:	d000      	beq.n	e886 <_spi_interrupt_handler+0x172>
    e884:	e798      	b.n	e7b8 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    e886:	07bb      	lsls	r3, r7, #30
    e888:	d400      	bmi.n	e88c <_spi_interrupt_handler+0x178>
    e88a:	e795      	b.n	e7b8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    e88c:	0020      	movs	r0, r4
    e88e:	6923      	ldr	r3, [r4, #16]
    e890:	4798      	blx	r3
    e892:	e791      	b.n	e7b8 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    e894:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    e896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    e898:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    e89a:	3b01      	subs	r3, #1
    e89c:	b29b      	uxth	r3, r3
    e89e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    e8a0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    e8a2:	b29b      	uxth	r3, r3
    e8a4:	2b00      	cmp	r3, #0
    e8a6:	d000      	beq.n	e8aa <_spi_interrupt_handler+0x196>
    e8a8:	e786      	b.n	e7b8 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    e8aa:	3304      	adds	r3, #4
    e8ac:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    e8ae:	2200      	movs	r2, #0
    e8b0:	3334      	adds	r3, #52	; 0x34
    e8b2:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    e8b4:	3b35      	subs	r3, #53	; 0x35
    e8b6:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    e8b8:	07fb      	lsls	r3, r7, #31
    e8ba:	d400      	bmi.n	e8be <_spi_interrupt_handler+0x1aa>
    e8bc:	e77c      	b.n	e7b8 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    e8be:	0020      	movs	r0, r4
    e8c0:	68e3      	ldr	r3, [r4, #12]
    e8c2:	4798      	blx	r3
    e8c4:	e778      	b.n	e7b8 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    e8c6:	0a1b      	lsrs	r3, r3, #8
    e8c8:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    e8ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e8cc:	3301      	adds	r3, #1
    e8ce:	62a3      	str	r3, [r4, #40]	; 0x28
    e8d0:	e7c5      	b.n	e85e <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    e8d2:	077b      	lsls	r3, r7, #29
    e8d4:	d400      	bmi.n	e8d8 <_spi_interrupt_handler+0x1c4>
    e8d6:	e76f      	b.n	e7b8 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    e8d8:	0020      	movs	r0, r4
    e8da:	6963      	ldr	r3, [r4, #20]
    e8dc:	4798      	blx	r3
    e8de:	e76b      	b.n	e7b8 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    e8e0:	0020      	movs	r0, r4
    e8e2:	69e3      	ldr	r3, [r4, #28]
    e8e4:	4798      	blx	r3
    e8e6:	e77b      	b.n	e7e0 <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    e8e8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    e8ea:	2b01      	cmp	r3, #1
    e8ec:	d000      	beq.n	e8f0 <_spi_interrupt_handler+0x1dc>
    e8ee:	e786      	b.n	e7fe <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    e8f0:	79e3      	ldrb	r3, [r4, #7]
    e8f2:	2b00      	cmp	r3, #0
    e8f4:	d000      	beq.n	e8f8 <_spi_interrupt_handler+0x1e4>
    e8f6:	e782      	b.n	e7fe <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    e8f8:	3302      	adds	r3, #2
    e8fa:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    e8fc:	3301      	adds	r3, #1
    e8fe:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    e900:	2200      	movs	r2, #0
    e902:	3335      	adds	r3, #53	; 0x35
    e904:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    e906:	07fb      	lsls	r3, r7, #31
    e908:	d400      	bmi.n	e90c <_spi_interrupt_handler+0x1f8>
    e90a:	e76d      	b.n	e7e8 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    e90c:	0020      	movs	r0, r4
    e90e:	68e3      	ldr	r3, [r4, #12]
    e910:	4798      	blx	r3
    e912:	e769      	b.n	e7e8 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    e914:	0020      	movs	r0, r4
    e916:	6a23      	ldr	r3, [r4, #32]
    e918:	4798      	blx	r3
    e91a:	e770      	b.n	e7fe <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    e91c:	2380      	movs	r3, #128	; 0x80
    e91e:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    e920:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    e922:	067b      	lsls	r3, r7, #25
    e924:	d400      	bmi.n	e928 <_spi_interrupt_handler+0x214>
    e926:	e76e      	b.n	e806 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    e928:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e92a:	0020      	movs	r0, r4
    e92c:	4798      	blx	r3
}
    e92e:	e76a      	b.n	e806 <_spi_interrupt_handler+0xf2>
    e930:	20000574 	.word	0x20000574
    e934:	2000058c 	.word	0x2000058c

0000e938 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    e938:	b5f0      	push	{r4, r5, r6, r7, lr}
    e93a:	46de      	mov	lr, fp
    e93c:	4657      	mov	r7, sl
    e93e:	464e      	mov	r6, r9
    e940:	4645      	mov	r5, r8
    e942:	b5e0      	push	{r5, r6, r7, lr}
    e944:	b091      	sub	sp, #68	; 0x44
    e946:	0005      	movs	r5, r0
    e948:	000c      	movs	r4, r1
    e94a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    e94c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    e94e:	0008      	movs	r0, r1
    e950:	4bbc      	ldr	r3, [pc, #752]	; (ec44 <usart_init+0x30c>)
    e952:	4798      	blx	r3
    e954:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    e956:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    e958:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    e95a:	07db      	lsls	r3, r3, #31
    e95c:	d506      	bpl.n	e96c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    e95e:	b011      	add	sp, #68	; 0x44
    e960:	bc3c      	pop	{r2, r3, r4, r5}
    e962:	4690      	mov	r8, r2
    e964:	4699      	mov	r9, r3
    e966:	46a2      	mov	sl, r4
    e968:	46ab      	mov	fp, r5
    e96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    e96c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    e96e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    e970:	079b      	lsls	r3, r3, #30
    e972:	d4f4      	bmi.n	e95e <usart_init+0x26>
    e974:	49b4      	ldr	r1, [pc, #720]	; (ec48 <usart_init+0x310>)
    e976:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    e978:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    e97a:	2301      	movs	r3, #1
    e97c:	40bb      	lsls	r3, r7
    e97e:	4303      	orrs	r3, r0
    e980:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    e982:	a90f      	add	r1, sp, #60	; 0x3c
    e984:	272d      	movs	r7, #45	; 0x2d
    e986:	5df3      	ldrb	r3, [r6, r7]
    e988:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    e98a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    e98c:	b2d3      	uxtb	r3, r2
    e98e:	9302      	str	r3, [sp, #8]
    e990:	0018      	movs	r0, r3
    e992:	4bae      	ldr	r3, [pc, #696]	; (ec4c <usart_init+0x314>)
    e994:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    e996:	9802      	ldr	r0, [sp, #8]
    e998:	4bad      	ldr	r3, [pc, #692]	; (ec50 <usart_init+0x318>)
    e99a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    e99c:	5df0      	ldrb	r0, [r6, r7]
    e99e:	2100      	movs	r1, #0
    e9a0:	4bac      	ldr	r3, [pc, #688]	; (ec54 <usart_init+0x31c>)
    e9a2:	4798      	blx	r3
	module->character_size = config->character_size;
    e9a4:	7af3      	ldrb	r3, [r6, #11]
    e9a6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    e9a8:	2324      	movs	r3, #36	; 0x24
    e9aa:	5cf3      	ldrb	r3, [r6, r3]
    e9ac:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    e9ae:	2325      	movs	r3, #37	; 0x25
    e9b0:	5cf3      	ldrb	r3, [r6, r3]
    e9b2:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    e9b4:	7ef3      	ldrb	r3, [r6, #27]
    e9b6:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    e9b8:	7f33      	ldrb	r3, [r6, #28]
    e9ba:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    e9bc:	682b      	ldr	r3, [r5, #0]
    e9be:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    e9c0:	0018      	movs	r0, r3
    e9c2:	4ba0      	ldr	r3, [pc, #640]	; (ec44 <usart_init+0x30c>)
    e9c4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    e9c6:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    e9c8:	2200      	movs	r2, #0
    e9ca:	230e      	movs	r3, #14
    e9cc:	a906      	add	r1, sp, #24
    e9ce:	468c      	mov	ip, r1
    e9d0:	4463      	add	r3, ip
    e9d2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    e9d4:	8a32      	ldrh	r2, [r6, #16]
    e9d6:	9202      	str	r2, [sp, #8]
    e9d8:	2380      	movs	r3, #128	; 0x80
    e9da:	01db      	lsls	r3, r3, #7
    e9dc:	429a      	cmp	r2, r3
    e9de:	d100      	bne.n	e9e2 <usart_init+0xaa>
    e9e0:	e09e      	b.n	eb20 <usart_init+0x1e8>
    e9e2:	d90f      	bls.n	ea04 <usart_init+0xcc>
    e9e4:	23c0      	movs	r3, #192	; 0xc0
    e9e6:	01db      	lsls	r3, r3, #7
    e9e8:	9a02      	ldr	r2, [sp, #8]
    e9ea:	429a      	cmp	r2, r3
    e9ec:	d100      	bne.n	e9f0 <usart_init+0xb8>
    e9ee:	e092      	b.n	eb16 <usart_init+0x1de>
    e9f0:	2380      	movs	r3, #128	; 0x80
    e9f2:	021b      	lsls	r3, r3, #8
    e9f4:	429a      	cmp	r2, r3
    e9f6:	d000      	beq.n	e9fa <usart_init+0xc2>
    e9f8:	e11f      	b.n	ec3a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    e9fa:	2303      	movs	r3, #3
    e9fc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    e9fe:	2300      	movs	r3, #0
    ea00:	9307      	str	r3, [sp, #28]
    ea02:	e008      	b.n	ea16 <usart_init+0xde>
	switch (config->sample_rate) {
    ea04:	2380      	movs	r3, #128	; 0x80
    ea06:	019b      	lsls	r3, r3, #6
    ea08:	429a      	cmp	r2, r3
    ea0a:	d000      	beq.n	ea0e <usart_init+0xd6>
    ea0c:	e115      	b.n	ec3a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    ea0e:	2310      	movs	r3, #16
    ea10:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    ea12:	3b0f      	subs	r3, #15
    ea14:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    ea16:	6833      	ldr	r3, [r6, #0]
    ea18:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    ea1a:	68f3      	ldr	r3, [r6, #12]
    ea1c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    ea1e:	6973      	ldr	r3, [r6, #20]
    ea20:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    ea22:	7e33      	ldrb	r3, [r6, #24]
    ea24:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    ea26:	2326      	movs	r3, #38	; 0x26
    ea28:	5cf3      	ldrb	r3, [r6, r3]
    ea2a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    ea2c:	6873      	ldr	r3, [r6, #4]
    ea2e:	4699      	mov	r9, r3
	switch (transfer_mode)
    ea30:	2b00      	cmp	r3, #0
    ea32:	d100      	bne.n	ea36 <usart_init+0xfe>
    ea34:	e0a0      	b.n	eb78 <usart_init+0x240>
    ea36:	2380      	movs	r3, #128	; 0x80
    ea38:	055b      	lsls	r3, r3, #21
    ea3a:	4599      	cmp	r9, r3
    ea3c:	d100      	bne.n	ea40 <usart_init+0x108>
    ea3e:	e084      	b.n	eb4a <usart_init+0x212>
	if(config->encoding_format_enable) {
    ea40:	7e73      	ldrb	r3, [r6, #25]
    ea42:	2b00      	cmp	r3, #0
    ea44:	d002      	beq.n	ea4c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    ea46:	7eb3      	ldrb	r3, [r6, #26]
    ea48:	4642      	mov	r2, r8
    ea4a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    ea4c:	682a      	ldr	r2, [r5, #0]
    ea4e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    ea50:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    ea52:	2b00      	cmp	r3, #0
    ea54:	d1fc      	bne.n	ea50 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    ea56:	330e      	adds	r3, #14
    ea58:	aa06      	add	r2, sp, #24
    ea5a:	4694      	mov	ip, r2
    ea5c:	4463      	add	r3, ip
    ea5e:	881b      	ldrh	r3, [r3, #0]
    ea60:	4642      	mov	r2, r8
    ea62:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    ea64:	9b05      	ldr	r3, [sp, #20]
    ea66:	9a03      	ldr	r2, [sp, #12]
    ea68:	4313      	orrs	r3, r2
    ea6a:	9a04      	ldr	r2, [sp, #16]
    ea6c:	4313      	orrs	r3, r2
    ea6e:	464a      	mov	r2, r9
    ea70:	4313      	orrs	r3, r2
    ea72:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    ea74:	465b      	mov	r3, fp
    ea76:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    ea78:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    ea7a:	4653      	mov	r3, sl
    ea7c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    ea7e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    ea80:	2327      	movs	r3, #39	; 0x27
    ea82:	5cf3      	ldrb	r3, [r6, r3]
    ea84:	2b00      	cmp	r3, #0
    ea86:	d101      	bne.n	ea8c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    ea88:	3304      	adds	r3, #4
    ea8a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ea8c:	7e73      	ldrb	r3, [r6, #25]
    ea8e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ea90:	7f32      	ldrb	r2, [r6, #28]
    ea92:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ea94:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ea96:	7f72      	ldrb	r2, [r6, #29]
    ea98:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ea9a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ea9c:	2224      	movs	r2, #36	; 0x24
    ea9e:	5cb2      	ldrb	r2, [r6, r2]
    eaa0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    eaa2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    eaa4:	2225      	movs	r2, #37	; 0x25
    eaa6:	5cb2      	ldrb	r2, [r6, r2]
    eaa8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    eaaa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    eaac:	7ab1      	ldrb	r1, [r6, #10]
    eaae:	7af2      	ldrb	r2, [r6, #11]
    eab0:	4311      	orrs	r1, r2
    eab2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    eab4:	8933      	ldrh	r3, [r6, #8]
    eab6:	2bff      	cmp	r3, #255	; 0xff
    eab8:	d100      	bne.n	eabc <usart_init+0x184>
    eaba:	e081      	b.n	ebc0 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    eabc:	2280      	movs	r2, #128	; 0x80
    eabe:	0452      	lsls	r2, r2, #17
    eac0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    eac2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    eac4:	232c      	movs	r3, #44	; 0x2c
    eac6:	5cf3      	ldrb	r3, [r6, r3]
    eac8:	2b00      	cmp	r3, #0
    eaca:	d103      	bne.n	ead4 <usart_init+0x19c>
    eacc:	4b62      	ldr	r3, [pc, #392]	; (ec58 <usart_init+0x320>)
    eace:	789b      	ldrb	r3, [r3, #2]
    ead0:	079b      	lsls	r3, r3, #30
    ead2:	d501      	bpl.n	ead8 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    ead4:	2380      	movs	r3, #128	; 0x80
    ead6:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    ead8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    eada:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    eadc:	2b00      	cmp	r3, #0
    eade:	d1fc      	bne.n	eada <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    eae0:	4643      	mov	r3, r8
    eae2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    eae4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    eae6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    eae8:	2b00      	cmp	r3, #0
    eaea:	d1fc      	bne.n	eae6 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    eaec:	4643      	mov	r3, r8
    eaee:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    eaf0:	ab0e      	add	r3, sp, #56	; 0x38
    eaf2:	2280      	movs	r2, #128	; 0x80
    eaf4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    eaf6:	2200      	movs	r2, #0
    eaf8:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    eafa:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    eafc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    eafe:	6b33      	ldr	r3, [r6, #48]	; 0x30
    eb00:	930a      	str	r3, [sp, #40]	; 0x28
    eb02:	6b73      	ldr	r3, [r6, #52]	; 0x34
    eb04:	930b      	str	r3, [sp, #44]	; 0x2c
    eb06:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    eb08:	930c      	str	r3, [sp, #48]	; 0x30
    eb0a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    eb0c:	9302      	str	r3, [sp, #8]
    eb0e:	930d      	str	r3, [sp, #52]	; 0x34
    eb10:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    eb12:	ae0a      	add	r6, sp, #40	; 0x28
    eb14:	e063      	b.n	ebde <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    eb16:	2308      	movs	r3, #8
    eb18:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    eb1a:	3b07      	subs	r3, #7
    eb1c:	9307      	str	r3, [sp, #28]
    eb1e:	e77a      	b.n	ea16 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    eb20:	6833      	ldr	r3, [r6, #0]
    eb22:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    eb24:	68f3      	ldr	r3, [r6, #12]
    eb26:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    eb28:	6973      	ldr	r3, [r6, #20]
    eb2a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    eb2c:	7e33      	ldrb	r3, [r6, #24]
    eb2e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    eb30:	2326      	movs	r3, #38	; 0x26
    eb32:	5cf3      	ldrb	r3, [r6, r3]
    eb34:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    eb36:	6873      	ldr	r3, [r6, #4]
    eb38:	4699      	mov	r9, r3
	switch (transfer_mode)
    eb3a:	2b00      	cmp	r3, #0
    eb3c:	d018      	beq.n	eb70 <usart_init+0x238>
    eb3e:	2380      	movs	r3, #128	; 0x80
    eb40:	055b      	lsls	r3, r3, #21
    eb42:	4599      	cmp	r9, r3
    eb44:	d001      	beq.n	eb4a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    eb46:	2000      	movs	r0, #0
    eb48:	e025      	b.n	eb96 <usart_init+0x25e>
			if (!config->use_external_clock) {
    eb4a:	2327      	movs	r3, #39	; 0x27
    eb4c:	5cf3      	ldrb	r3, [r6, r3]
    eb4e:	2b00      	cmp	r3, #0
    eb50:	d000      	beq.n	eb54 <usart_init+0x21c>
    eb52:	e775      	b.n	ea40 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    eb54:	6a33      	ldr	r3, [r6, #32]
    eb56:	001f      	movs	r7, r3
    eb58:	b2c0      	uxtb	r0, r0
    eb5a:	4b40      	ldr	r3, [pc, #256]	; (ec5c <usart_init+0x324>)
    eb5c:	4798      	blx	r3
    eb5e:	0001      	movs	r1, r0
    eb60:	220e      	movs	r2, #14
    eb62:	ab06      	add	r3, sp, #24
    eb64:	469c      	mov	ip, r3
    eb66:	4462      	add	r2, ip
    eb68:	0038      	movs	r0, r7
    eb6a:	4b3d      	ldr	r3, [pc, #244]	; (ec60 <usart_init+0x328>)
    eb6c:	4798      	blx	r3
    eb6e:	e012      	b.n	eb96 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    eb70:	2308      	movs	r3, #8
    eb72:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    eb74:	2300      	movs	r3, #0
    eb76:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    eb78:	2327      	movs	r3, #39	; 0x27
    eb7a:	5cf3      	ldrb	r3, [r6, r3]
    eb7c:	2b00      	cmp	r3, #0
    eb7e:	d00e      	beq.n	eb9e <usart_init+0x266>
				status_code =
    eb80:	9b06      	ldr	r3, [sp, #24]
    eb82:	9300      	str	r3, [sp, #0]
    eb84:	9b07      	ldr	r3, [sp, #28]
    eb86:	220e      	movs	r2, #14
    eb88:	a906      	add	r1, sp, #24
    eb8a:	468c      	mov	ip, r1
    eb8c:	4462      	add	r2, ip
    eb8e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    eb90:	6a30      	ldr	r0, [r6, #32]
    eb92:	4f34      	ldr	r7, [pc, #208]	; (ec64 <usart_init+0x32c>)
    eb94:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    eb96:	2800      	cmp	r0, #0
    eb98:	d000      	beq.n	eb9c <usart_init+0x264>
    eb9a:	e6e0      	b.n	e95e <usart_init+0x26>
    eb9c:	e750      	b.n	ea40 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    eb9e:	6a33      	ldr	r3, [r6, #32]
    eba0:	001f      	movs	r7, r3
    eba2:	b2c0      	uxtb	r0, r0
    eba4:	4b2d      	ldr	r3, [pc, #180]	; (ec5c <usart_init+0x324>)
    eba6:	4798      	blx	r3
    eba8:	0001      	movs	r1, r0
				status_code =
    ebaa:	9b06      	ldr	r3, [sp, #24]
    ebac:	9300      	str	r3, [sp, #0]
    ebae:	9b07      	ldr	r3, [sp, #28]
    ebb0:	220e      	movs	r2, #14
    ebb2:	a806      	add	r0, sp, #24
    ebb4:	4684      	mov	ip, r0
    ebb6:	4462      	add	r2, ip
    ebb8:	0038      	movs	r0, r7
    ebba:	4f2a      	ldr	r7, [pc, #168]	; (ec64 <usart_init+0x32c>)
    ebbc:	47b8      	blx	r7
    ebbe:	e7ea      	b.n	eb96 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    ebc0:	7ef3      	ldrb	r3, [r6, #27]
    ebc2:	2b00      	cmp	r3, #0
    ebc4:	d100      	bne.n	ebc8 <usart_init+0x290>
    ebc6:	e77d      	b.n	eac4 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    ebc8:	2380      	movs	r3, #128	; 0x80
    ebca:	04db      	lsls	r3, r3, #19
    ebcc:	431f      	orrs	r7, r3
    ebce:	e779      	b.n	eac4 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    ebd0:	0020      	movs	r0, r4
    ebd2:	4b25      	ldr	r3, [pc, #148]	; (ec68 <usart_init+0x330>)
    ebd4:	4798      	blx	r3
    ebd6:	e007      	b.n	ebe8 <usart_init+0x2b0>
    ebd8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    ebda:	2f04      	cmp	r7, #4
    ebdc:	d00d      	beq.n	ebfa <usart_init+0x2c2>
    ebde:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    ebe0:	00bb      	lsls	r3, r7, #2
    ebe2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    ebe4:	2800      	cmp	r0, #0
    ebe6:	d0f3      	beq.n	ebd0 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    ebe8:	1c43      	adds	r3, r0, #1
    ebea:	d0f5      	beq.n	ebd8 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    ebec:	a90e      	add	r1, sp, #56	; 0x38
    ebee:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    ebf0:	0c00      	lsrs	r0, r0, #16
    ebf2:	b2c0      	uxtb	r0, r0
    ebf4:	4b1d      	ldr	r3, [pc, #116]	; (ec6c <usart_init+0x334>)
    ebf6:	4798      	blx	r3
    ebf8:	e7ee      	b.n	ebd8 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    ebfa:	2300      	movs	r3, #0
    ebfc:	60eb      	str	r3, [r5, #12]
    ebfe:	612b      	str	r3, [r5, #16]
    ec00:	616b      	str	r3, [r5, #20]
    ec02:	61ab      	str	r3, [r5, #24]
    ec04:	61eb      	str	r3, [r5, #28]
    ec06:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    ec08:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    ec0a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    ec0c:	2200      	movs	r2, #0
    ec0e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    ec10:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    ec12:	3330      	adds	r3, #48	; 0x30
    ec14:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    ec16:	3301      	adds	r3, #1
    ec18:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    ec1a:	3301      	adds	r3, #1
    ec1c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    ec1e:	3301      	adds	r3, #1
    ec20:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    ec22:	6828      	ldr	r0, [r5, #0]
    ec24:	4b07      	ldr	r3, [pc, #28]	; (ec44 <usart_init+0x30c>)
    ec26:	4798      	blx	r3
    ec28:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    ec2a:	4911      	ldr	r1, [pc, #68]	; (ec70 <usart_init+0x338>)
    ec2c:	4b11      	ldr	r3, [pc, #68]	; (ec74 <usart_init+0x33c>)
    ec2e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    ec30:	00a4      	lsls	r4, r4, #2
    ec32:	4b11      	ldr	r3, [pc, #68]	; (ec78 <usart_init+0x340>)
    ec34:	50e5      	str	r5, [r4, r3]
	return status_code;
    ec36:	2000      	movs	r0, #0
    ec38:	e691      	b.n	e95e <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    ec3a:	2310      	movs	r3, #16
    ec3c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    ec3e:	2300      	movs	r3, #0
    ec40:	9307      	str	r3, [sp, #28]
    ec42:	e6e8      	b.n	ea16 <usart_init+0xde>
    ec44:	0000dfd9 	.word	0x0000dfd9
    ec48:	40000400 	.word	0x40000400
    ec4c:	0000f551 	.word	0x0000f551
    ec50:	0000f4c5 	.word	0x0000f4c5
    ec54:	0000de15 	.word	0x0000de15
    ec58:	41002000 	.word	0x41002000
    ec5c:	0000f56d 	.word	0x0000f56d
    ec60:	0000dd57 	.word	0x0000dd57
    ec64:	0000dd81 	.word	0x0000dd81
    ec68:	0000de61 	.word	0x0000de61
    ec6c:	0000f649 	.word	0x0000f649
    ec70:	0000ed79 	.word	0x0000ed79
    ec74:	0000e015 	.word	0x0000e015
    ec78:	20000574 	.word	0x20000574

0000ec7c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    ec7c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    ec7e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    ec80:	2a00      	cmp	r2, #0
    ec82:	d101      	bne.n	ec88 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    ec84:	0018      	movs	r0, r3
    ec86:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    ec88:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    ec8a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    ec8c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    ec8e:	2a00      	cmp	r2, #0
    ec90:	d1f8      	bne.n	ec84 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    ec92:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    ec94:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    ec96:	2a00      	cmp	r2, #0
    ec98:	d1fc      	bne.n	ec94 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    ec9a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    ec9c:	2102      	movs	r1, #2
    ec9e:	7e1a      	ldrb	r2, [r3, #24]
    eca0:	420a      	tst	r2, r1
    eca2:	d0fc      	beq.n	ec9e <usart_write_wait+0x22>
	return STATUS_OK;
    eca4:	2300      	movs	r3, #0
    eca6:	e7ed      	b.n	ec84 <usart_write_wait+0x8>

0000eca8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    eca8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    ecaa:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    ecac:	2a00      	cmp	r2, #0
    ecae:	d101      	bne.n	ecb4 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    ecb0:	0018      	movs	r0, r3
    ecb2:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    ecb4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    ecb6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    ecb8:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    ecba:	2a00      	cmp	r2, #0
    ecbc:	d1f8      	bne.n	ecb0 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    ecbe:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    ecc0:	7e10      	ldrb	r0, [r2, #24]
    ecc2:	0740      	lsls	r0, r0, #29
    ecc4:	d5f4      	bpl.n	ecb0 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    ecc6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    ecc8:	2b00      	cmp	r3, #0
    ecca:	d1fc      	bne.n	ecc6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    eccc:	8b53      	ldrh	r3, [r2, #26]
    ecce:	b2db      	uxtb	r3, r3
	if (error_code) {
    ecd0:	0698      	lsls	r0, r3, #26
    ecd2:	d01d      	beq.n	ed10 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    ecd4:	0798      	lsls	r0, r3, #30
    ecd6:	d503      	bpl.n	ece0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    ecd8:	2302      	movs	r3, #2
    ecda:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    ecdc:	3318      	adds	r3, #24
    ecde:	e7e7      	b.n	ecb0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    ece0:	0758      	lsls	r0, r3, #29
    ece2:	d503      	bpl.n	ecec <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    ece4:	2304      	movs	r3, #4
    ece6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    ece8:	331a      	adds	r3, #26
    ecea:	e7e1      	b.n	ecb0 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    ecec:	07d8      	lsls	r0, r3, #31
    ecee:	d503      	bpl.n	ecf8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    ecf0:	2301      	movs	r3, #1
    ecf2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    ecf4:	3312      	adds	r3, #18
    ecf6:	e7db      	b.n	ecb0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    ecf8:	06d8      	lsls	r0, r3, #27
    ecfa:	d503      	bpl.n	ed04 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    ecfc:	2310      	movs	r3, #16
    ecfe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    ed00:	3332      	adds	r3, #50	; 0x32
    ed02:	e7d5      	b.n	ecb0 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    ed04:	069b      	lsls	r3, r3, #26
    ed06:	d503      	bpl.n	ed10 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    ed08:	2320      	movs	r3, #32
    ed0a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    ed0c:	3321      	adds	r3, #33	; 0x21
    ed0e:	e7cf      	b.n	ecb0 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    ed10:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    ed12:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    ed14:	2300      	movs	r3, #0
    ed16:	e7cb      	b.n	ecb0 <usart_read_wait+0x8>

0000ed18 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    ed18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed1a:	0004      	movs	r4, r0
    ed1c:	000d      	movs	r5, r1
    ed1e:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    ed20:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    ed22:	4b0f      	ldr	r3, [pc, #60]	; (ed60 <_usart_read_buffer+0x48>)
    ed24:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    ed26:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    ed28:	b29b      	uxth	r3, r3
    ed2a:	2b00      	cmp	r3, #0
    ed2c:	d003      	beq.n	ed36 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    ed2e:	4b0d      	ldr	r3, [pc, #52]	; (ed64 <_usart_read_buffer+0x4c>)
    ed30:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    ed32:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    ed34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    ed36:	85a6      	strh	r6, [r4, #44]	; 0x2c
    ed38:	4b0a      	ldr	r3, [pc, #40]	; (ed64 <_usart_read_buffer+0x4c>)
    ed3a:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    ed3c:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    ed3e:	2205      	movs	r2, #5
    ed40:	2332      	movs	r3, #50	; 0x32
    ed42:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    ed44:	3b2e      	subs	r3, #46	; 0x2e
    ed46:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    ed48:	7a23      	ldrb	r3, [r4, #8]
    ed4a:	2b00      	cmp	r3, #0
    ed4c:	d001      	beq.n	ed52 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    ed4e:	2320      	movs	r3, #32
    ed50:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    ed52:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    ed54:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    ed56:	2b00      	cmp	r3, #0
    ed58:	d0ec      	beq.n	ed34 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    ed5a:	2308      	movs	r3, #8
    ed5c:	75bb      	strb	r3, [r7, #22]
    ed5e:	e7e9      	b.n	ed34 <_usart_read_buffer+0x1c>
    ed60:	0000ce75 	.word	0x0000ce75
    ed64:	0000ceb5 	.word	0x0000ceb5

0000ed68 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    ed68:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    ed6a:	2201      	movs	r2, #1
    ed6c:	4b01      	ldr	r3, [pc, #4]	; (ed74 <usart_read_job+0xc>)
    ed6e:	4798      	blx	r3
}
    ed70:	bd10      	pop	{r4, pc}
    ed72:	46c0      	nop			; (mov r8, r8)
    ed74:	0000ed19 	.word	0x0000ed19

0000ed78 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    ed7a:	0080      	lsls	r0, r0, #2
    ed7c:	4b62      	ldr	r3, [pc, #392]	; (ef08 <_usart_interrupt_handler+0x190>)
    ed7e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    ed80:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    ed82:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    ed84:	2b00      	cmp	r3, #0
    ed86:	d1fc      	bne.n	ed82 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    ed88:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    ed8a:	7da6      	ldrb	r6, [r4, #22]
    ed8c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    ed8e:	2330      	movs	r3, #48	; 0x30
    ed90:	5ceb      	ldrb	r3, [r5, r3]
    ed92:	2231      	movs	r2, #49	; 0x31
    ed94:	5caf      	ldrb	r7, [r5, r2]
    ed96:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    ed98:	07f3      	lsls	r3, r6, #31
    ed9a:	d522      	bpl.n	ede2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    ed9c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    ed9e:	b29b      	uxth	r3, r3
    eda0:	2b00      	cmp	r3, #0
    eda2:	d01c      	beq.n	edde <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    eda4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    eda6:	7813      	ldrb	r3, [r2, #0]
    eda8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    edaa:	1c51      	adds	r1, r2, #1
    edac:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    edae:	7969      	ldrb	r1, [r5, #5]
    edb0:	2901      	cmp	r1, #1
    edb2:	d00e      	beq.n	edd2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    edb4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    edb6:	05db      	lsls	r3, r3, #23
    edb8:	0ddb      	lsrs	r3, r3, #23
    edba:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    edbc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    edbe:	3b01      	subs	r3, #1
    edc0:	b29b      	uxth	r3, r3
    edc2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    edc4:	2b00      	cmp	r3, #0
    edc6:	d10c      	bne.n	ede2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    edc8:	3301      	adds	r3, #1
    edca:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    edcc:	3301      	adds	r3, #1
    edce:	75a3      	strb	r3, [r4, #22]
    edd0:	e007      	b.n	ede2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    edd2:	7851      	ldrb	r1, [r2, #1]
    edd4:	0209      	lsls	r1, r1, #8
    edd6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    edd8:	3202      	adds	r2, #2
    edda:	62aa      	str	r2, [r5, #40]	; 0x28
    eddc:	e7eb      	b.n	edb6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    edde:	2301      	movs	r3, #1
    ede0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    ede2:	07b3      	lsls	r3, r6, #30
    ede4:	d506      	bpl.n	edf4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    ede6:	2302      	movs	r3, #2
    ede8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    edea:	2200      	movs	r2, #0
    edec:	3331      	adds	r3, #49	; 0x31
    edee:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    edf0:	07fb      	lsls	r3, r7, #31
    edf2:	d41a      	bmi.n	ee2a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    edf4:	0773      	lsls	r3, r6, #29
    edf6:	d565      	bpl.n	eec4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    edf8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    edfa:	b29b      	uxth	r3, r3
    edfc:	2b00      	cmp	r3, #0
    edfe:	d05f      	beq.n	eec0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    ee00:	8b63      	ldrh	r3, [r4, #26]
    ee02:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    ee04:	071a      	lsls	r2, r3, #28
    ee06:	d414      	bmi.n	ee32 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    ee08:	223f      	movs	r2, #63	; 0x3f
    ee0a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    ee0c:	2b00      	cmp	r3, #0
    ee0e:	d034      	beq.n	ee7a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    ee10:	079a      	lsls	r2, r3, #30
    ee12:	d511      	bpl.n	ee38 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    ee14:	221a      	movs	r2, #26
    ee16:	2332      	movs	r3, #50	; 0x32
    ee18:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    ee1a:	3b30      	subs	r3, #48	; 0x30
    ee1c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    ee1e:	077b      	lsls	r3, r7, #29
    ee20:	d550      	bpl.n	eec4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    ee22:	0028      	movs	r0, r5
    ee24:	696b      	ldr	r3, [r5, #20]
    ee26:	4798      	blx	r3
    ee28:	e04c      	b.n	eec4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    ee2a:	0028      	movs	r0, r5
    ee2c:	68eb      	ldr	r3, [r5, #12]
    ee2e:	4798      	blx	r3
    ee30:	e7e0      	b.n	edf4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    ee32:	2237      	movs	r2, #55	; 0x37
    ee34:	4013      	ands	r3, r2
    ee36:	e7e9      	b.n	ee0c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    ee38:	075a      	lsls	r2, r3, #29
    ee3a:	d505      	bpl.n	ee48 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    ee3c:	221e      	movs	r2, #30
    ee3e:	2332      	movs	r3, #50	; 0x32
    ee40:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    ee42:	3b2e      	subs	r3, #46	; 0x2e
    ee44:	8363      	strh	r3, [r4, #26]
    ee46:	e7ea      	b.n	ee1e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    ee48:	07da      	lsls	r2, r3, #31
    ee4a:	d505      	bpl.n	ee58 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    ee4c:	2213      	movs	r2, #19
    ee4e:	2332      	movs	r3, #50	; 0x32
    ee50:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    ee52:	3b31      	subs	r3, #49	; 0x31
    ee54:	8363      	strh	r3, [r4, #26]
    ee56:	e7e2      	b.n	ee1e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    ee58:	06da      	lsls	r2, r3, #27
    ee5a:	d505      	bpl.n	ee68 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    ee5c:	2242      	movs	r2, #66	; 0x42
    ee5e:	2332      	movs	r3, #50	; 0x32
    ee60:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    ee62:	3b22      	subs	r3, #34	; 0x22
    ee64:	8363      	strh	r3, [r4, #26]
    ee66:	e7da      	b.n	ee1e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    ee68:	2220      	movs	r2, #32
    ee6a:	421a      	tst	r2, r3
    ee6c:	d0d7      	beq.n	ee1e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    ee6e:	3221      	adds	r2, #33	; 0x21
    ee70:	2332      	movs	r3, #50	; 0x32
    ee72:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    ee74:	3b12      	subs	r3, #18
    ee76:	8363      	strh	r3, [r4, #26]
    ee78:	e7d1      	b.n	ee1e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    ee7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    ee7c:	05db      	lsls	r3, r3, #23
    ee7e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    ee80:	b2da      	uxtb	r2, r3
    ee82:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ee84:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    ee86:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    ee88:	1c51      	adds	r1, r2, #1
    ee8a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    ee8c:	7969      	ldrb	r1, [r5, #5]
    ee8e:	2901      	cmp	r1, #1
    ee90:	d010      	beq.n	eeb4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    ee92:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    ee94:	3b01      	subs	r3, #1
    ee96:	b29b      	uxth	r3, r3
    ee98:	85ab      	strh	r3, [r5, #44]	; 0x2c
    ee9a:	2b00      	cmp	r3, #0
    ee9c:	d112      	bne.n	eec4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    ee9e:	3304      	adds	r3, #4
    eea0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    eea2:	2200      	movs	r2, #0
    eea4:	332e      	adds	r3, #46	; 0x2e
    eea6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    eea8:	07bb      	lsls	r3, r7, #30
    eeaa:	d50b      	bpl.n	eec4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    eeac:	0028      	movs	r0, r5
    eeae:	692b      	ldr	r3, [r5, #16]
    eeb0:	4798      	blx	r3
    eeb2:	e007      	b.n	eec4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    eeb4:	0a1b      	lsrs	r3, r3, #8
    eeb6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    eeb8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eeba:	3301      	adds	r3, #1
    eebc:	626b      	str	r3, [r5, #36]	; 0x24
    eebe:	e7e8      	b.n	ee92 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    eec0:	2304      	movs	r3, #4
    eec2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    eec4:	06f3      	lsls	r3, r6, #27
    eec6:	d504      	bpl.n	eed2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    eec8:	2310      	movs	r3, #16
    eeca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    eecc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    eece:	06fb      	lsls	r3, r7, #27
    eed0:	d40e      	bmi.n	eef0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    eed2:	06b3      	lsls	r3, r6, #26
    eed4:	d504      	bpl.n	eee0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    eed6:	2320      	movs	r3, #32
    eed8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    eeda:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    eedc:	073b      	lsls	r3, r7, #28
    eede:	d40b      	bmi.n	eef8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    eee0:	0733      	lsls	r3, r6, #28
    eee2:	d504      	bpl.n	eeee <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    eee4:	2308      	movs	r3, #8
    eee6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    eee8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    eeea:	06bb      	lsls	r3, r7, #26
    eeec:	d408      	bmi.n	ef00 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    eeee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    eef0:	0028      	movs	r0, r5
    eef2:	69eb      	ldr	r3, [r5, #28]
    eef4:	4798      	blx	r3
    eef6:	e7ec      	b.n	eed2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    eef8:	0028      	movs	r0, r5
    eefa:	69ab      	ldr	r3, [r5, #24]
    eefc:	4798      	blx	r3
    eefe:	e7ef      	b.n	eee0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    ef00:	6a2b      	ldr	r3, [r5, #32]
    ef02:	0028      	movs	r0, r5
    ef04:	4798      	blx	r3
}
    ef06:	e7f2      	b.n	eeee <_usart_interrupt_handler+0x176>
    ef08:	20000574 	.word	0x20000574

0000ef0c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    ef0c:	b510      	push	{r4, lr}
	switch (clock_source) {
    ef0e:	2808      	cmp	r0, #8
    ef10:	d803      	bhi.n	ef1a <system_clock_source_get_hz+0xe>
    ef12:	0080      	lsls	r0, r0, #2
    ef14:	4b1b      	ldr	r3, [pc, #108]	; (ef84 <system_clock_source_get_hz+0x78>)
    ef16:	581b      	ldr	r3, [r3, r0]
    ef18:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    ef1a:	2000      	movs	r0, #0
    ef1c:	e030      	b.n	ef80 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    ef1e:	4b1a      	ldr	r3, [pc, #104]	; (ef88 <system_clock_source_get_hz+0x7c>)
    ef20:	6918      	ldr	r0, [r3, #16]
    ef22:	e02d      	b.n	ef80 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    ef24:	4b19      	ldr	r3, [pc, #100]	; (ef8c <system_clock_source_get_hz+0x80>)
    ef26:	6a1b      	ldr	r3, [r3, #32]
    ef28:	059b      	lsls	r3, r3, #22
    ef2a:	0f9b      	lsrs	r3, r3, #30
    ef2c:	4818      	ldr	r0, [pc, #96]	; (ef90 <system_clock_source_get_hz+0x84>)
    ef2e:	40d8      	lsrs	r0, r3
    ef30:	e026      	b.n	ef80 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    ef32:	4b15      	ldr	r3, [pc, #84]	; (ef88 <system_clock_source_get_hz+0x7c>)
    ef34:	6958      	ldr	r0, [r3, #20]
    ef36:	e023      	b.n	ef80 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    ef38:	4b13      	ldr	r3, [pc, #76]	; (ef88 <system_clock_source_get_hz+0x7c>)
    ef3a:	681b      	ldr	r3, [r3, #0]
			return 0;
    ef3c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    ef3e:	079b      	lsls	r3, r3, #30
    ef40:	d51e      	bpl.n	ef80 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    ef42:	4912      	ldr	r1, [pc, #72]	; (ef8c <system_clock_source_get_hz+0x80>)
    ef44:	2210      	movs	r2, #16
    ef46:	68cb      	ldr	r3, [r1, #12]
    ef48:	421a      	tst	r2, r3
    ef4a:	d0fc      	beq.n	ef46 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    ef4c:	4b0e      	ldr	r3, [pc, #56]	; (ef88 <system_clock_source_get_hz+0x7c>)
    ef4e:	681b      	ldr	r3, [r3, #0]
    ef50:	075b      	lsls	r3, r3, #29
    ef52:	d401      	bmi.n	ef58 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    ef54:	480f      	ldr	r0, [pc, #60]	; (ef94 <system_clock_source_get_hz+0x88>)
    ef56:	e013      	b.n	ef80 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    ef58:	2000      	movs	r0, #0
    ef5a:	4b0f      	ldr	r3, [pc, #60]	; (ef98 <system_clock_source_get_hz+0x8c>)
    ef5c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    ef5e:	4b0a      	ldr	r3, [pc, #40]	; (ef88 <system_clock_source_get_hz+0x7c>)
    ef60:	689b      	ldr	r3, [r3, #8]
    ef62:	041b      	lsls	r3, r3, #16
    ef64:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    ef66:	4358      	muls	r0, r3
    ef68:	e00a      	b.n	ef80 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    ef6a:	2350      	movs	r3, #80	; 0x50
    ef6c:	4a07      	ldr	r2, [pc, #28]	; (ef8c <system_clock_source_get_hz+0x80>)
    ef6e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    ef70:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    ef72:	075b      	lsls	r3, r3, #29
    ef74:	d504      	bpl.n	ef80 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    ef76:	4b04      	ldr	r3, [pc, #16]	; (ef88 <system_clock_source_get_hz+0x7c>)
    ef78:	68d8      	ldr	r0, [r3, #12]
    ef7a:	e001      	b.n	ef80 <system_clock_source_get_hz+0x74>
		return 32768UL;
    ef7c:	2080      	movs	r0, #128	; 0x80
    ef7e:	0200      	lsls	r0, r0, #8
	}
}
    ef80:	bd10      	pop	{r4, pc}
    ef82:	46c0      	nop			; (mov r8, r8)
    ef84:	00014110 	.word	0x00014110
    ef88:	20000274 	.word	0x20000274
    ef8c:	40000800 	.word	0x40000800
    ef90:	007a1200 	.word	0x007a1200
    ef94:	02dc6c00 	.word	0x02dc6c00
    ef98:	0000f56d 	.word	0x0000f56d

0000ef9c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    ef9c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    ef9e:	490c      	ldr	r1, [pc, #48]	; (efd0 <system_clock_source_osc8m_set_config+0x34>)
    efa0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    efa2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    efa4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    efa6:	7840      	ldrb	r0, [r0, #1]
    efa8:	2201      	movs	r2, #1
    efaa:	4010      	ands	r0, r2
    efac:	0180      	lsls	r0, r0, #6
    efae:	2640      	movs	r6, #64	; 0x40
    efb0:	43b3      	bics	r3, r6
    efb2:	4303      	orrs	r3, r0
    efb4:	402a      	ands	r2, r5
    efb6:	01d2      	lsls	r2, r2, #7
    efb8:	2080      	movs	r0, #128	; 0x80
    efba:	4383      	bics	r3, r0
    efbc:	4313      	orrs	r3, r2
    efbe:	2203      	movs	r2, #3
    efc0:	4022      	ands	r2, r4
    efc2:	0212      	lsls	r2, r2, #8
    efc4:	4803      	ldr	r0, [pc, #12]	; (efd4 <system_clock_source_osc8m_set_config+0x38>)
    efc6:	4003      	ands	r3, r0
    efc8:	4313      	orrs	r3, r2
    efca:	620b      	str	r3, [r1, #32]
}
    efcc:	bd70      	pop	{r4, r5, r6, pc}
    efce:	46c0      	nop			; (mov r8, r8)
    efd0:	40000800 	.word	0x40000800
    efd4:	fffffcff 	.word	0xfffffcff

0000efd8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    efd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    efda:	46de      	mov	lr, fp
    efdc:	4657      	mov	r7, sl
    efde:	464e      	mov	r6, r9
    efe0:	4645      	mov	r5, r8
    efe2:	b5e0      	push	{r5, r6, r7, lr}
    efe4:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    efe6:	4b26      	ldr	r3, [pc, #152]	; (f080 <system_clock_source_xosc32k_set_config+0xa8>)
    efe8:	469b      	mov	fp, r3
    efea:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    efec:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    efee:	7800      	ldrb	r0, [r0, #0]
    eff0:	4242      	negs	r2, r0
    eff2:	4142      	adcs	r2, r0
    eff4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    eff6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    eff8:	78ca      	ldrb	r2, [r1, #3]
    effa:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    effc:	790a      	ldrb	r2, [r1, #4]
    effe:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    f000:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    f002:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    f004:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    f006:	688a      	ldr	r2, [r1, #8]
    f008:	491e      	ldr	r1, [pc, #120]	; (f084 <system_clock_source_xosc32k_set_config+0xac>)
    f00a:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    f00c:	2101      	movs	r1, #1
    f00e:	464a      	mov	r2, r9
    f010:	0092      	lsls	r2, r2, #2
    f012:	4691      	mov	r9, r2
    f014:	2204      	movs	r2, #4
    f016:	4393      	bics	r3, r2
    f018:	464a      	mov	r2, r9
    f01a:	4313      	orrs	r3, r2
    f01c:	4642      	mov	r2, r8
    f01e:	400a      	ands	r2, r1
    f020:	00d2      	lsls	r2, r2, #3
    f022:	4690      	mov	r8, r2
    f024:	2208      	movs	r2, #8
    f026:	4393      	bics	r3, r2
    f028:	4642      	mov	r2, r8
    f02a:	4313      	orrs	r3, r2
    f02c:	4662      	mov	r2, ip
    f02e:	400a      	ands	r2, r1
    f030:	0112      	lsls	r2, r2, #4
    f032:	4694      	mov	ip, r2
    f034:	2210      	movs	r2, #16
    f036:	4393      	bics	r3, r2
    f038:	4662      	mov	r2, ip
    f03a:	4313      	orrs	r3, r2
    f03c:	4008      	ands	r0, r1
    f03e:	0140      	lsls	r0, r0, #5
    f040:	2220      	movs	r2, #32
    f042:	4393      	bics	r3, r2
    f044:	4303      	orrs	r3, r0
    f046:	400f      	ands	r7, r1
    f048:	01bf      	lsls	r7, r7, #6
    f04a:	2040      	movs	r0, #64	; 0x40
    f04c:	4383      	bics	r3, r0
    f04e:	433b      	orrs	r3, r7
    f050:	400e      	ands	r6, r1
    f052:	01f6      	lsls	r6, r6, #7
    f054:	3040      	adds	r0, #64	; 0x40
    f056:	4383      	bics	r3, r0
    f058:	4333      	orrs	r3, r6
    f05a:	3879      	subs	r0, #121	; 0x79
    f05c:	4005      	ands	r5, r0
    f05e:	022d      	lsls	r5, r5, #8
    f060:	4809      	ldr	r0, [pc, #36]	; (f088 <system_clock_source_xosc32k_set_config+0xb0>)
    f062:	4003      	ands	r3, r0
    f064:	432b      	orrs	r3, r5
    f066:	4021      	ands	r1, r4
    f068:	0309      	lsls	r1, r1, #12
    f06a:	4808      	ldr	r0, [pc, #32]	; (f08c <system_clock_source_xosc32k_set_config+0xb4>)
    f06c:	4003      	ands	r3, r0
    f06e:	430b      	orrs	r3, r1
    f070:	465a      	mov	r2, fp
    f072:	8293      	strh	r3, [r2, #20]
}
    f074:	bc3c      	pop	{r2, r3, r4, r5}
    f076:	4690      	mov	r8, r2
    f078:	4699      	mov	r9, r3
    f07a:	46a2      	mov	sl, r4
    f07c:	46ab      	mov	fp, r5
    f07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f080:	40000800 	.word	0x40000800
    f084:	20000274 	.word	0x20000274
    f088:	fffff8ff 	.word	0xfffff8ff
    f08c:	ffffefff 	.word	0xffffefff

0000f090 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    f090:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    f092:	7a03      	ldrb	r3, [r0, #8]
    f094:	069b      	lsls	r3, r3, #26
    f096:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    f098:	8942      	ldrh	r2, [r0, #10]
    f09a:	0592      	lsls	r2, r2, #22
    f09c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    f09e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    f0a0:	4918      	ldr	r1, [pc, #96]	; (f104 <system_clock_source_dfll_set_config+0x74>)
    f0a2:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    f0a4:	7983      	ldrb	r3, [r0, #6]
    f0a6:	79c2      	ldrb	r2, [r0, #7]
    f0a8:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    f0aa:	8842      	ldrh	r2, [r0, #2]
    f0ac:	8884      	ldrh	r4, [r0, #4]
    f0ae:	4322      	orrs	r2, r4
    f0b0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    f0b2:	7842      	ldrb	r2, [r0, #1]
    f0b4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    f0b6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    f0b8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    f0ba:	7803      	ldrb	r3, [r0, #0]
    f0bc:	2b04      	cmp	r3, #4
    f0be:	d011      	beq.n	f0e4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    f0c0:	2b20      	cmp	r3, #32
    f0c2:	d10e      	bne.n	f0e2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    f0c4:	7b03      	ldrb	r3, [r0, #12]
    f0c6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    f0c8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    f0ca:	4313      	orrs	r3, r2
    f0cc:	89c2      	ldrh	r2, [r0, #14]
    f0ce:	0412      	lsls	r2, r2, #16
    f0d0:	490d      	ldr	r1, [pc, #52]	; (f108 <system_clock_source_dfll_set_config+0x78>)
    f0d2:	400a      	ands	r2, r1
    f0d4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    f0d6:	4a0b      	ldr	r2, [pc, #44]	; (f104 <system_clock_source_dfll_set_config+0x74>)
    f0d8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    f0da:	6811      	ldr	r1, [r2, #0]
    f0dc:	4b0b      	ldr	r3, [pc, #44]	; (f10c <system_clock_source_dfll_set_config+0x7c>)
    f0de:	430b      	orrs	r3, r1
    f0e0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    f0e2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    f0e4:	7b03      	ldrb	r3, [r0, #12]
    f0e6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    f0e8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    f0ea:	4313      	orrs	r3, r2
    f0ec:	89c2      	ldrh	r2, [r0, #14]
    f0ee:	0412      	lsls	r2, r2, #16
    f0f0:	4905      	ldr	r1, [pc, #20]	; (f108 <system_clock_source_dfll_set_config+0x78>)
    f0f2:	400a      	ands	r2, r1
    f0f4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    f0f6:	4a03      	ldr	r2, [pc, #12]	; (f104 <system_clock_source_dfll_set_config+0x74>)
    f0f8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    f0fa:	6813      	ldr	r3, [r2, #0]
    f0fc:	2104      	movs	r1, #4
    f0fe:	430b      	orrs	r3, r1
    f100:	6013      	str	r3, [r2, #0]
    f102:	e7ee      	b.n	f0e2 <system_clock_source_dfll_set_config+0x52>
    f104:	20000274 	.word	0x20000274
    f108:	03ff0000 	.word	0x03ff0000
    f10c:	00000424 	.word	0x00000424

0000f110 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    f110:	2808      	cmp	r0, #8
    f112:	d803      	bhi.n	f11c <system_clock_source_enable+0xc>
    f114:	0080      	lsls	r0, r0, #2
    f116:	4b25      	ldr	r3, [pc, #148]	; (f1ac <system_clock_source_enable+0x9c>)
    f118:	581b      	ldr	r3, [r3, r0]
    f11a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    f11c:	2017      	movs	r0, #23
    f11e:	e044      	b.n	f1aa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    f120:	4a23      	ldr	r2, [pc, #140]	; (f1b0 <system_clock_source_enable+0xa0>)
    f122:	6a13      	ldr	r3, [r2, #32]
    f124:	2102      	movs	r1, #2
    f126:	430b      	orrs	r3, r1
    f128:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    f12a:	2000      	movs	r0, #0
    f12c:	e03d      	b.n	f1aa <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    f12e:	4a20      	ldr	r2, [pc, #128]	; (f1b0 <system_clock_source_enable+0xa0>)
    f130:	6993      	ldr	r3, [r2, #24]
    f132:	2102      	movs	r1, #2
    f134:	430b      	orrs	r3, r1
    f136:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    f138:	2000      	movs	r0, #0
		break;
    f13a:	e036      	b.n	f1aa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    f13c:	4a1c      	ldr	r2, [pc, #112]	; (f1b0 <system_clock_source_enable+0xa0>)
    f13e:	8a13      	ldrh	r3, [r2, #16]
    f140:	2102      	movs	r1, #2
    f142:	430b      	orrs	r3, r1
    f144:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    f146:	2000      	movs	r0, #0
		break;
    f148:	e02f      	b.n	f1aa <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    f14a:	4a19      	ldr	r2, [pc, #100]	; (f1b0 <system_clock_source_enable+0xa0>)
    f14c:	8a93      	ldrh	r3, [r2, #20]
    f14e:	2102      	movs	r1, #2
    f150:	430b      	orrs	r3, r1
    f152:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    f154:	2000      	movs	r0, #0
		break;
    f156:	e028      	b.n	f1aa <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    f158:	4916      	ldr	r1, [pc, #88]	; (f1b4 <system_clock_source_enable+0xa4>)
    f15a:	680b      	ldr	r3, [r1, #0]
    f15c:	2202      	movs	r2, #2
    f15e:	4313      	orrs	r3, r2
    f160:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    f162:	4b13      	ldr	r3, [pc, #76]	; (f1b0 <system_clock_source_enable+0xa0>)
    f164:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    f166:	0019      	movs	r1, r3
    f168:	320e      	adds	r2, #14
    f16a:	68cb      	ldr	r3, [r1, #12]
    f16c:	421a      	tst	r2, r3
    f16e:	d0fc      	beq.n	f16a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    f170:	4a10      	ldr	r2, [pc, #64]	; (f1b4 <system_clock_source_enable+0xa4>)
    f172:	6891      	ldr	r1, [r2, #8]
    f174:	4b0e      	ldr	r3, [pc, #56]	; (f1b0 <system_clock_source_enable+0xa0>)
    f176:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    f178:	6852      	ldr	r2, [r2, #4]
    f17a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    f17c:	2200      	movs	r2, #0
    f17e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    f180:	0019      	movs	r1, r3
    f182:	3210      	adds	r2, #16
    f184:	68cb      	ldr	r3, [r1, #12]
    f186:	421a      	tst	r2, r3
    f188:	d0fc      	beq.n	f184 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    f18a:	4b0a      	ldr	r3, [pc, #40]	; (f1b4 <system_clock_source_enable+0xa4>)
    f18c:	681b      	ldr	r3, [r3, #0]
    f18e:	b29b      	uxth	r3, r3
    f190:	4a07      	ldr	r2, [pc, #28]	; (f1b0 <system_clock_source_enable+0xa0>)
    f192:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    f194:	2000      	movs	r0, #0
    f196:	e008      	b.n	f1aa <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    f198:	4905      	ldr	r1, [pc, #20]	; (f1b0 <system_clock_source_enable+0xa0>)
    f19a:	2244      	movs	r2, #68	; 0x44
    f19c:	5c8b      	ldrb	r3, [r1, r2]
    f19e:	2002      	movs	r0, #2
    f1a0:	4303      	orrs	r3, r0
    f1a2:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    f1a4:	2000      	movs	r0, #0
		break;
    f1a6:	e000      	b.n	f1aa <system_clock_source_enable+0x9a>
		return STATUS_OK;
    f1a8:	2000      	movs	r0, #0
}
    f1aa:	4770      	bx	lr
    f1ac:	00014134 	.word	0x00014134
    f1b0:	40000800 	.word	0x40000800
    f1b4:	20000274 	.word	0x20000274

0000f1b8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    f1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1ba:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    f1bc:	22c2      	movs	r2, #194	; 0xc2
    f1be:	00d2      	lsls	r2, r2, #3
    f1c0:	4b47      	ldr	r3, [pc, #284]	; (f2e0 <system_clock_init+0x128>)
    f1c2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    f1c4:	4a47      	ldr	r2, [pc, #284]	; (f2e4 <system_clock_init+0x12c>)
    f1c6:	6853      	ldr	r3, [r2, #4]
    f1c8:	211e      	movs	r1, #30
    f1ca:	438b      	bics	r3, r1
    f1cc:	391a      	subs	r1, #26
    f1ce:	430b      	orrs	r3, r1
    f1d0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    f1d2:	2202      	movs	r2, #2
    f1d4:	ab01      	add	r3, sp, #4
    f1d6:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    f1d8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    f1da:	4d43      	ldr	r5, [pc, #268]	; (f2e8 <system_clock_init+0x130>)
    f1dc:	b2e0      	uxtb	r0, r4
    f1de:	a901      	add	r1, sp, #4
    f1e0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    f1e2:	3401      	adds	r4, #1
    f1e4:	2c25      	cmp	r4, #37	; 0x25
    f1e6:	d1f9      	bne.n	f1dc <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    f1e8:	a80a      	add	r0, sp, #40	; 0x28
    f1ea:	2300      	movs	r3, #0
    f1ec:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    f1ee:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    f1f0:	2280      	movs	r2, #128	; 0x80
    f1f2:	0212      	lsls	r2, r2, #8
    f1f4:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    f1f6:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    f1f8:	2201      	movs	r2, #1
    f1fa:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    f1fc:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    f1fe:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    f200:	3202      	adds	r2, #2
    f202:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    f204:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    f206:	4b39      	ldr	r3, [pc, #228]	; (f2ec <system_clock_init+0x134>)
    f208:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    f20a:	2005      	movs	r0, #5
    f20c:	4b38      	ldr	r3, [pc, #224]	; (f2f0 <system_clock_init+0x138>)
    f20e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    f210:	4933      	ldr	r1, [pc, #204]	; (f2e0 <system_clock_init+0x128>)
    f212:	2202      	movs	r2, #2
    f214:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    f216:	421a      	tst	r2, r3
    f218:	d0fc      	beq.n	f214 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    f21a:	4a31      	ldr	r2, [pc, #196]	; (f2e0 <system_clock_init+0x128>)
    f21c:	8a93      	ldrh	r3, [r2, #20]
    f21e:	2180      	movs	r1, #128	; 0x80
    f220:	430b      	orrs	r3, r1
    f222:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    f224:	ab05      	add	r3, sp, #20
    f226:	2100      	movs	r1, #0
    f228:	2200      	movs	r2, #0
    f22a:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    f22c:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    f22e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    f230:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    f232:	313f      	adds	r1, #63	; 0x3f
    f234:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    f236:	393b      	subs	r1, #59	; 0x3b
    f238:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    f23a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    f23c:	4b2d      	ldr	r3, [pc, #180]	; (f2f4 <system_clock_init+0x13c>)
    f23e:	681b      	ldr	r3, [r3, #0]
    f240:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    f242:	2b3f      	cmp	r3, #63	; 0x3f
    f244:	d04a      	beq.n	f2dc <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    f246:	a805      	add	r0, sp, #20
    f248:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    f24a:	4b2b      	ldr	r3, [pc, #172]	; (f2f8 <system_clock_init+0x140>)
    f24c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    f24e:	2307      	movs	r3, #7
    f250:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    f252:	3338      	adds	r3, #56	; 0x38
    f254:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    f256:	4b29      	ldr	r3, [pc, #164]	; (f2fc <system_clock_init+0x144>)
    f258:	4798      	blx	r3
	config->run_in_standby  = false;
    f25a:	a804      	add	r0, sp, #16
    f25c:	2500      	movs	r5, #0
    f25e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    f260:	2601      	movs	r6, #1
    f262:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    f264:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    f266:	4b26      	ldr	r3, [pc, #152]	; (f300 <system_clock_init+0x148>)
    f268:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    f26a:	2006      	movs	r0, #6
    f26c:	4f20      	ldr	r7, [pc, #128]	; (f2f0 <system_clock_init+0x138>)
    f26e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    f270:	4b24      	ldr	r3, [pc, #144]	; (f304 <system_clock_init+0x14c>)
    f272:	4798      	blx	r3
	config->division_factor    = 1;
    f274:	ac01      	add	r4, sp, #4
    f276:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    f278:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    f27a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    f27c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    f27e:	2305      	movs	r3, #5
    f280:	7023      	strb	r3, [r4, #0]
    f282:	0021      	movs	r1, r4
    f284:	2001      	movs	r0, #1
    f286:	4b20      	ldr	r3, [pc, #128]	; (f308 <system_clock_init+0x150>)
    f288:	4798      	blx	r3
    f28a:	2001      	movs	r0, #1
    f28c:	4b1f      	ldr	r3, [pc, #124]	; (f30c <system_clock_init+0x154>)
    f28e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    f290:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    f292:	0021      	movs	r1, r4
    f294:	2000      	movs	r0, #0
    f296:	4b14      	ldr	r3, [pc, #80]	; (f2e8 <system_clock_init+0x130>)
    f298:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    f29a:	2000      	movs	r0, #0
    f29c:	4b1c      	ldr	r3, [pc, #112]	; (f310 <system_clock_init+0x158>)
    f29e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    f2a0:	2007      	movs	r0, #7
    f2a2:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    f2a4:	490e      	ldr	r1, [pc, #56]	; (f2e0 <system_clock_init+0x128>)
    f2a6:	22d0      	movs	r2, #208	; 0xd0
    f2a8:	68cb      	ldr	r3, [r1, #12]
    f2aa:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    f2ac:	2bd0      	cmp	r3, #208	; 0xd0
    f2ae:	d1fb      	bne.n	f2a8 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    f2b0:	4a18      	ldr	r2, [pc, #96]	; (f314 <system_clock_init+0x15c>)
    f2b2:	2300      	movs	r3, #0
    f2b4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    f2b6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    f2b8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    f2ba:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    f2bc:	a901      	add	r1, sp, #4
    f2be:	2201      	movs	r2, #1
    f2c0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    f2c2:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    f2c4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    f2c6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    f2c8:	3307      	adds	r3, #7
    f2ca:	700b      	strb	r3, [r1, #0]
    f2cc:	2000      	movs	r0, #0
    f2ce:	4b0e      	ldr	r3, [pc, #56]	; (f308 <system_clock_init+0x150>)
    f2d0:	4798      	blx	r3
    f2d2:	2000      	movs	r0, #0
    f2d4:	4b0d      	ldr	r3, [pc, #52]	; (f30c <system_clock_init+0x154>)
    f2d6:	4798      	blx	r3
#endif
}
    f2d8:	b00f      	add	sp, #60	; 0x3c
    f2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    f2dc:	3b20      	subs	r3, #32
    f2de:	e7b2      	b.n	f246 <system_clock_init+0x8e>
    f2e0:	40000800 	.word	0x40000800
    f2e4:	41004000 	.word	0x41004000
    f2e8:	0000f551 	.word	0x0000f551
    f2ec:	0000efd9 	.word	0x0000efd9
    f2f0:	0000f111 	.word	0x0000f111
    f2f4:	00806024 	.word	0x00806024
    f2f8:	000005b9 	.word	0x000005b9
    f2fc:	0000f091 	.word	0x0000f091
    f300:	0000ef9d 	.word	0x0000ef9d
    f304:	0000f319 	.word	0x0000f319
    f308:	0000f33d 	.word	0x0000f33d
    f30c:	0000f3f5 	.word	0x0000f3f5
    f310:	0000f4c5 	.word	0x0000f4c5
    f314:	40000400 	.word	0x40000400

0000f318 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    f318:	4a06      	ldr	r2, [pc, #24]	; (f334 <system_gclk_init+0x1c>)
    f31a:	6993      	ldr	r3, [r2, #24]
    f31c:	2108      	movs	r1, #8
    f31e:	430b      	orrs	r3, r1
    f320:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    f322:	2201      	movs	r2, #1
    f324:	4b04      	ldr	r3, [pc, #16]	; (f338 <system_gclk_init+0x20>)
    f326:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    f328:	0019      	movs	r1, r3
    f32a:	780b      	ldrb	r3, [r1, #0]
    f32c:	4213      	tst	r3, r2
    f32e:	d1fc      	bne.n	f32a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    f330:	4770      	bx	lr
    f332:	46c0      	nop			; (mov r8, r8)
    f334:	40000400 	.word	0x40000400
    f338:	40000c00 	.word	0x40000c00

0000f33c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    f33c:	b570      	push	{r4, r5, r6, lr}
    f33e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    f340:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    f342:	780d      	ldrb	r5, [r1, #0]
    f344:	022d      	lsls	r5, r5, #8
    f346:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    f348:	784b      	ldrb	r3, [r1, #1]
    f34a:	2b00      	cmp	r3, #0
    f34c:	d002      	beq.n	f354 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    f34e:	2380      	movs	r3, #128	; 0x80
    f350:	02db      	lsls	r3, r3, #11
    f352:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    f354:	7a4b      	ldrb	r3, [r1, #9]
    f356:	2b00      	cmp	r3, #0
    f358:	d002      	beq.n	f360 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    f35a:	2380      	movs	r3, #128	; 0x80
    f35c:	031b      	lsls	r3, r3, #12
    f35e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    f360:	6848      	ldr	r0, [r1, #4]
    f362:	2801      	cmp	r0, #1
    f364:	d910      	bls.n	f388 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    f366:	1e43      	subs	r3, r0, #1
    f368:	4218      	tst	r0, r3
    f36a:	d134      	bne.n	f3d6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    f36c:	2802      	cmp	r0, #2
    f36e:	d930      	bls.n	f3d2 <system_gclk_gen_set_config+0x96>
    f370:	2302      	movs	r3, #2
    f372:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    f374:	3201      	adds	r2, #1
						mask <<= 1) {
    f376:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    f378:	4298      	cmp	r0, r3
    f37a:	d8fb      	bhi.n	f374 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    f37c:	0212      	lsls	r2, r2, #8
    f37e:	4332      	orrs	r2, r6
    f380:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    f382:	2380      	movs	r3, #128	; 0x80
    f384:	035b      	lsls	r3, r3, #13
    f386:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    f388:	7a0b      	ldrb	r3, [r1, #8]
    f38a:	2b00      	cmp	r3, #0
    f38c:	d002      	beq.n	f394 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    f38e:	2380      	movs	r3, #128	; 0x80
    f390:	039b      	lsls	r3, r3, #14
    f392:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    f394:	4a13      	ldr	r2, [pc, #76]	; (f3e4 <system_gclk_gen_set_config+0xa8>)
    f396:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    f398:	b25b      	sxtb	r3, r3
    f39a:	2b00      	cmp	r3, #0
    f39c:	dbfb      	blt.n	f396 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    f39e:	4b12      	ldr	r3, [pc, #72]	; (f3e8 <system_gclk_gen_set_config+0xac>)
    f3a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    f3a2:	4b12      	ldr	r3, [pc, #72]	; (f3ec <system_gclk_gen_set_config+0xb0>)
    f3a4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    f3a6:	4a0f      	ldr	r2, [pc, #60]	; (f3e4 <system_gclk_gen_set_config+0xa8>)
    f3a8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    f3aa:	b25b      	sxtb	r3, r3
    f3ac:	2b00      	cmp	r3, #0
    f3ae:	dbfb      	blt.n	f3a8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    f3b0:	4b0c      	ldr	r3, [pc, #48]	; (f3e4 <system_gclk_gen_set_config+0xa8>)
    f3b2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    f3b4:	001a      	movs	r2, r3
    f3b6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    f3b8:	b25b      	sxtb	r3, r3
    f3ba:	2b00      	cmp	r3, #0
    f3bc:	dbfb      	blt.n	f3b6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    f3be:	4a09      	ldr	r2, [pc, #36]	; (f3e4 <system_gclk_gen_set_config+0xa8>)
    f3c0:	6853      	ldr	r3, [r2, #4]
    f3c2:	2180      	movs	r1, #128	; 0x80
    f3c4:	0249      	lsls	r1, r1, #9
    f3c6:	400b      	ands	r3, r1
    f3c8:	431d      	orrs	r5, r3
    f3ca:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    f3cc:	4b08      	ldr	r3, [pc, #32]	; (f3f0 <system_gclk_gen_set_config+0xb4>)
    f3ce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    f3d0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    f3d2:	2200      	movs	r2, #0
    f3d4:	e7d2      	b.n	f37c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    f3d6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    f3d8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    f3da:	2380      	movs	r3, #128	; 0x80
    f3dc:	029b      	lsls	r3, r3, #10
    f3de:	431d      	orrs	r5, r3
    f3e0:	e7d2      	b.n	f388 <system_gclk_gen_set_config+0x4c>
    f3e2:	46c0      	nop			; (mov r8, r8)
    f3e4:	40000c00 	.word	0x40000c00
    f3e8:	0000ce75 	.word	0x0000ce75
    f3ec:	40000c08 	.word	0x40000c08
    f3f0:	0000ceb5 	.word	0x0000ceb5

0000f3f4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    f3f4:	b510      	push	{r4, lr}
    f3f6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    f3f8:	4a0b      	ldr	r2, [pc, #44]	; (f428 <system_gclk_gen_enable+0x34>)
    f3fa:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    f3fc:	b25b      	sxtb	r3, r3
    f3fe:	2b00      	cmp	r3, #0
    f400:	dbfb      	blt.n	f3fa <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    f402:	4b0a      	ldr	r3, [pc, #40]	; (f42c <system_gclk_gen_enable+0x38>)
    f404:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    f406:	4b0a      	ldr	r3, [pc, #40]	; (f430 <system_gclk_gen_enable+0x3c>)
    f408:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    f40a:	4a07      	ldr	r2, [pc, #28]	; (f428 <system_gclk_gen_enable+0x34>)
    f40c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    f40e:	b25b      	sxtb	r3, r3
    f410:	2b00      	cmp	r3, #0
    f412:	dbfb      	blt.n	f40c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    f414:	4a04      	ldr	r2, [pc, #16]	; (f428 <system_gclk_gen_enable+0x34>)
    f416:	6851      	ldr	r1, [r2, #4]
    f418:	2380      	movs	r3, #128	; 0x80
    f41a:	025b      	lsls	r3, r3, #9
    f41c:	430b      	orrs	r3, r1
    f41e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    f420:	4b04      	ldr	r3, [pc, #16]	; (f434 <system_gclk_gen_enable+0x40>)
    f422:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    f424:	bd10      	pop	{r4, pc}
    f426:	46c0      	nop			; (mov r8, r8)
    f428:	40000c00 	.word	0x40000c00
    f42c:	0000ce75 	.word	0x0000ce75
    f430:	40000c04 	.word	0x40000c04
    f434:	0000ceb5 	.word	0x0000ceb5

0000f438 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    f438:	b570      	push	{r4, r5, r6, lr}
    f43a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    f43c:	4a1a      	ldr	r2, [pc, #104]	; (f4a8 <system_gclk_gen_get_hz+0x70>)
    f43e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    f440:	b25b      	sxtb	r3, r3
    f442:	2b00      	cmp	r3, #0
    f444:	dbfb      	blt.n	f43e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    f446:	4b19      	ldr	r3, [pc, #100]	; (f4ac <system_gclk_gen_get_hz+0x74>)
    f448:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    f44a:	4b19      	ldr	r3, [pc, #100]	; (f4b0 <system_gclk_gen_get_hz+0x78>)
    f44c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    f44e:	4a16      	ldr	r2, [pc, #88]	; (f4a8 <system_gclk_gen_get_hz+0x70>)
    f450:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    f452:	b25b      	sxtb	r3, r3
    f454:	2b00      	cmp	r3, #0
    f456:	dbfb      	blt.n	f450 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    f458:	4e13      	ldr	r6, [pc, #76]	; (f4a8 <system_gclk_gen_get_hz+0x70>)
    f45a:	6870      	ldr	r0, [r6, #4]
    f45c:	04c0      	lsls	r0, r0, #19
    f45e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    f460:	4b14      	ldr	r3, [pc, #80]	; (f4b4 <system_gclk_gen_get_hz+0x7c>)
    f462:	4798      	blx	r3
    f464:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    f466:	4b12      	ldr	r3, [pc, #72]	; (f4b0 <system_gclk_gen_get_hz+0x78>)
    f468:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    f46a:	6876      	ldr	r6, [r6, #4]
    f46c:	02f6      	lsls	r6, r6, #11
    f46e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    f470:	4b11      	ldr	r3, [pc, #68]	; (f4b8 <system_gclk_gen_get_hz+0x80>)
    f472:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    f474:	4a0c      	ldr	r2, [pc, #48]	; (f4a8 <system_gclk_gen_get_hz+0x70>)
    f476:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    f478:	b25b      	sxtb	r3, r3
    f47a:	2b00      	cmp	r3, #0
    f47c:	dbfb      	blt.n	f476 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    f47e:	4b0a      	ldr	r3, [pc, #40]	; (f4a8 <system_gclk_gen_get_hz+0x70>)
    f480:	689c      	ldr	r4, [r3, #8]
    f482:	0224      	lsls	r4, r4, #8
    f484:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    f486:	4b0d      	ldr	r3, [pc, #52]	; (f4bc <system_gclk_gen_get_hz+0x84>)
    f488:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    f48a:	2e00      	cmp	r6, #0
    f48c:	d107      	bne.n	f49e <system_gclk_gen_get_hz+0x66>
    f48e:	2c01      	cmp	r4, #1
    f490:	d907      	bls.n	f4a2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    f492:	0021      	movs	r1, r4
    f494:	0028      	movs	r0, r5
    f496:	4b0a      	ldr	r3, [pc, #40]	; (f4c0 <system_gclk_gen_get_hz+0x88>)
    f498:	4798      	blx	r3
    f49a:	0005      	movs	r5, r0
    f49c:	e001      	b.n	f4a2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    f49e:	3401      	adds	r4, #1
    f4a0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    f4a2:	0028      	movs	r0, r5
    f4a4:	bd70      	pop	{r4, r5, r6, pc}
    f4a6:	46c0      	nop			; (mov r8, r8)
    f4a8:	40000c00 	.word	0x40000c00
    f4ac:	0000ce75 	.word	0x0000ce75
    f4b0:	40000c04 	.word	0x40000c04
    f4b4:	0000ef0d 	.word	0x0000ef0d
    f4b8:	40000c08 	.word	0x40000c08
    f4bc:	0000ceb5 	.word	0x0000ceb5
    f4c0:	0001145d 	.word	0x0001145d

0000f4c4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    f4c4:	b510      	push	{r4, lr}
    f4c6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    f4c8:	4b06      	ldr	r3, [pc, #24]	; (f4e4 <system_gclk_chan_enable+0x20>)
    f4ca:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f4cc:	4b06      	ldr	r3, [pc, #24]	; (f4e8 <system_gclk_chan_enable+0x24>)
    f4ce:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    f4d0:	4a06      	ldr	r2, [pc, #24]	; (f4ec <system_gclk_chan_enable+0x28>)
    f4d2:	8853      	ldrh	r3, [r2, #2]
    f4d4:	2180      	movs	r1, #128	; 0x80
    f4d6:	01c9      	lsls	r1, r1, #7
    f4d8:	430b      	orrs	r3, r1
    f4da:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    f4dc:	4b04      	ldr	r3, [pc, #16]	; (f4f0 <system_gclk_chan_enable+0x2c>)
    f4de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    f4e0:	bd10      	pop	{r4, pc}
    f4e2:	46c0      	nop			; (mov r8, r8)
    f4e4:	0000ce75 	.word	0x0000ce75
    f4e8:	40000c02 	.word	0x40000c02
    f4ec:	40000c00 	.word	0x40000c00
    f4f0:	0000ceb5 	.word	0x0000ceb5

0000f4f4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    f4f4:	b510      	push	{r4, lr}
    f4f6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    f4f8:	4b0f      	ldr	r3, [pc, #60]	; (f538 <system_gclk_chan_disable+0x44>)
    f4fa:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f4fc:	4b0f      	ldr	r3, [pc, #60]	; (f53c <system_gclk_chan_disable+0x48>)
    f4fe:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    f500:	4a0f      	ldr	r2, [pc, #60]	; (f540 <system_gclk_chan_disable+0x4c>)
    f502:	8853      	ldrh	r3, [r2, #2]
    f504:	051b      	lsls	r3, r3, #20
    f506:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    f508:	8853      	ldrh	r3, [r2, #2]
    f50a:	490e      	ldr	r1, [pc, #56]	; (f544 <system_gclk_chan_disable+0x50>)
    f50c:	400b      	ands	r3, r1
    f50e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    f510:	8853      	ldrh	r3, [r2, #2]
    f512:	490d      	ldr	r1, [pc, #52]	; (f548 <system_gclk_chan_disable+0x54>)
    f514:	400b      	ands	r3, r1
    f516:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    f518:	0011      	movs	r1, r2
    f51a:	2280      	movs	r2, #128	; 0x80
    f51c:	01d2      	lsls	r2, r2, #7
    f51e:	884b      	ldrh	r3, [r1, #2]
    f520:	4213      	tst	r3, r2
    f522:	d1fc      	bne.n	f51e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    f524:	4906      	ldr	r1, [pc, #24]	; (f540 <system_gclk_chan_disable+0x4c>)
    f526:	884a      	ldrh	r2, [r1, #2]
    f528:	0203      	lsls	r3, r0, #8
    f52a:	4806      	ldr	r0, [pc, #24]	; (f544 <system_gclk_chan_disable+0x50>)
    f52c:	4002      	ands	r2, r0
    f52e:	4313      	orrs	r3, r2
    f530:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    f532:	4b06      	ldr	r3, [pc, #24]	; (f54c <system_gclk_chan_disable+0x58>)
    f534:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    f536:	bd10      	pop	{r4, pc}
    f538:	0000ce75 	.word	0x0000ce75
    f53c:	40000c02 	.word	0x40000c02
    f540:	40000c00 	.word	0x40000c00
    f544:	fffff0ff 	.word	0xfffff0ff
    f548:	ffffbfff 	.word	0xffffbfff
    f54c:	0000ceb5 	.word	0x0000ceb5

0000f550 <system_gclk_chan_set_config>:
{
    f550:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    f552:	780c      	ldrb	r4, [r1, #0]
    f554:	0224      	lsls	r4, r4, #8
    f556:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    f558:	4b02      	ldr	r3, [pc, #8]	; (f564 <system_gclk_chan_set_config+0x14>)
    f55a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    f55c:	b2a4      	uxth	r4, r4
    f55e:	4b02      	ldr	r3, [pc, #8]	; (f568 <system_gclk_chan_set_config+0x18>)
    f560:	805c      	strh	r4, [r3, #2]
}
    f562:	bd10      	pop	{r4, pc}
    f564:	0000f4f5 	.word	0x0000f4f5
    f568:	40000c00 	.word	0x40000c00

0000f56c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    f56c:	b510      	push	{r4, lr}
    f56e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    f570:	4b06      	ldr	r3, [pc, #24]	; (f58c <system_gclk_chan_get_hz+0x20>)
    f572:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f574:	4b06      	ldr	r3, [pc, #24]	; (f590 <system_gclk_chan_get_hz+0x24>)
    f576:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    f578:	4b06      	ldr	r3, [pc, #24]	; (f594 <system_gclk_chan_get_hz+0x28>)
    f57a:	885c      	ldrh	r4, [r3, #2]
    f57c:	0524      	lsls	r4, r4, #20
    f57e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    f580:	4b05      	ldr	r3, [pc, #20]	; (f598 <system_gclk_chan_get_hz+0x2c>)
    f582:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    f584:	0020      	movs	r0, r4
    f586:	4b05      	ldr	r3, [pc, #20]	; (f59c <system_gclk_chan_get_hz+0x30>)
    f588:	4798      	blx	r3
}
    f58a:	bd10      	pop	{r4, pc}
    f58c:	0000ce75 	.word	0x0000ce75
    f590:	40000c02 	.word	0x40000c02
    f594:	40000c00 	.word	0x40000c00
    f598:	0000ceb5 	.word	0x0000ceb5
    f59c:	0000f439 	.word	0x0000f439

0000f5a0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    f5a0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    f5a2:	78d3      	ldrb	r3, [r2, #3]
    f5a4:	2b00      	cmp	r3, #0
    f5a6:	d135      	bne.n	f614 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    f5a8:	7813      	ldrb	r3, [r2, #0]
    f5aa:	2b80      	cmp	r3, #128	; 0x80
    f5ac:	d029      	beq.n	f602 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    f5ae:	061b      	lsls	r3, r3, #24
    f5b0:	2480      	movs	r4, #128	; 0x80
    f5b2:	0264      	lsls	r4, r4, #9
    f5b4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    f5b6:	7854      	ldrb	r4, [r2, #1]
    f5b8:	2502      	movs	r5, #2
    f5ba:	43ac      	bics	r4, r5
    f5bc:	d106      	bne.n	f5cc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    f5be:	7894      	ldrb	r4, [r2, #2]
    f5c0:	2c00      	cmp	r4, #0
    f5c2:	d120      	bne.n	f606 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    f5c4:	2480      	movs	r4, #128	; 0x80
    f5c6:	02a4      	lsls	r4, r4, #10
    f5c8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    f5ca:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    f5cc:	7854      	ldrb	r4, [r2, #1]
    f5ce:	3c01      	subs	r4, #1
    f5d0:	2c01      	cmp	r4, #1
    f5d2:	d91c      	bls.n	f60e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    f5d4:	040d      	lsls	r5, r1, #16
    f5d6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    f5d8:	24a0      	movs	r4, #160	; 0xa0
    f5da:	05e4      	lsls	r4, r4, #23
    f5dc:	432c      	orrs	r4, r5
    f5de:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    f5e0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    f5e2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    f5e4:	24d0      	movs	r4, #208	; 0xd0
    f5e6:	0624      	lsls	r4, r4, #24
    f5e8:	432c      	orrs	r4, r5
    f5ea:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    f5ec:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    f5ee:	78d4      	ldrb	r4, [r2, #3]
    f5f0:	2c00      	cmp	r4, #0
    f5f2:	d122      	bne.n	f63a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    f5f4:	035b      	lsls	r3, r3, #13
    f5f6:	d51c      	bpl.n	f632 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    f5f8:	7893      	ldrb	r3, [r2, #2]
    f5fa:	2b01      	cmp	r3, #1
    f5fc:	d01e      	beq.n	f63c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    f5fe:	6141      	str	r1, [r0, #20]
    f600:	e017      	b.n	f632 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    f602:	2300      	movs	r3, #0
    f604:	e7d7      	b.n	f5b6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    f606:	24c0      	movs	r4, #192	; 0xc0
    f608:	02e4      	lsls	r4, r4, #11
    f60a:	4323      	orrs	r3, r4
    f60c:	e7dd      	b.n	f5ca <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    f60e:	4c0d      	ldr	r4, [pc, #52]	; (f644 <_system_pinmux_config+0xa4>)
    f610:	4023      	ands	r3, r4
    f612:	e7df      	b.n	f5d4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    f614:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    f616:	040c      	lsls	r4, r1, #16
    f618:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    f61a:	23a0      	movs	r3, #160	; 0xa0
    f61c:	05db      	lsls	r3, r3, #23
    f61e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    f620:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    f622:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    f624:	23d0      	movs	r3, #208	; 0xd0
    f626:	061b      	lsls	r3, r3, #24
    f628:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    f62a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    f62c:	78d3      	ldrb	r3, [r2, #3]
    f62e:	2b00      	cmp	r3, #0
    f630:	d103      	bne.n	f63a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    f632:	7853      	ldrb	r3, [r2, #1]
    f634:	3b01      	subs	r3, #1
    f636:	2b01      	cmp	r3, #1
    f638:	d902      	bls.n	f640 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    f63a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    f63c:	6181      	str	r1, [r0, #24]
    f63e:	e7f8      	b.n	f632 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    f640:	6081      	str	r1, [r0, #8]
}
    f642:	e7fa      	b.n	f63a <_system_pinmux_config+0x9a>
    f644:	fffbffff 	.word	0xfffbffff

0000f648 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    f648:	b510      	push	{r4, lr}
    f64a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    f64c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    f64e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    f650:	2900      	cmp	r1, #0
    f652:	d104      	bne.n	f65e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    f654:	0943      	lsrs	r3, r0, #5
    f656:	01db      	lsls	r3, r3, #7
    f658:	4905      	ldr	r1, [pc, #20]	; (f670 <system_pinmux_pin_set_config+0x28>)
    f65a:	468c      	mov	ip, r1
    f65c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    f65e:	241f      	movs	r4, #31
    f660:	4020      	ands	r0, r4
    f662:	2101      	movs	r1, #1
    f664:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    f666:	0018      	movs	r0, r3
    f668:	4b02      	ldr	r3, [pc, #8]	; (f674 <system_pinmux_pin_set_config+0x2c>)
    f66a:	4798      	blx	r3
}
    f66c:	bd10      	pop	{r4, pc}
    f66e:	46c0      	nop			; (mov r8, r8)
    f670:	41004400 	.word	0x41004400
    f674:	0000f5a1 	.word	0x0000f5a1

0000f678 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    f678:	4770      	bx	lr
	...

0000f67c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    f67c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    f67e:	4b05      	ldr	r3, [pc, #20]	; (f694 <system_init+0x18>)
    f680:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    f682:	4b05      	ldr	r3, [pc, #20]	; (f698 <system_init+0x1c>)
    f684:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    f686:	4b05      	ldr	r3, [pc, #20]	; (f69c <system_init+0x20>)
    f688:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    f68a:	4b05      	ldr	r3, [pc, #20]	; (f6a0 <system_init+0x24>)
    f68c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    f68e:	4b05      	ldr	r3, [pc, #20]	; (f6a4 <system_init+0x28>)
    f690:	4798      	blx	r3
}
    f692:	bd10      	pop	{r4, pc}
    f694:	0000f1b9 	.word	0x0000f1b9
    f698:	0000d009 	.word	0x0000d009
    f69c:	0000f679 	.word	0x0000f679
    f6a0:	0000b4c5 	.word	0x0000b4c5
    f6a4:	0000f679 	.word	0x0000f679

0000f6a8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    f6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6aa:	46c6      	mov	lr, r8
    f6ac:	b500      	push	{lr}
    f6ae:	000c      	movs	r4, r1
    f6b0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    f6b2:	2800      	cmp	r0, #0
    f6b4:	d10f      	bne.n	f6d6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    f6b6:	2a00      	cmp	r2, #0
    f6b8:	dd11      	ble.n	f6de <_read+0x36>
    f6ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    f6bc:	4e09      	ldr	r6, [pc, #36]	; (f6e4 <_read+0x3c>)
    f6be:	4d0a      	ldr	r5, [pc, #40]	; (f6e8 <_read+0x40>)
    f6c0:	6830      	ldr	r0, [r6, #0]
    f6c2:	0021      	movs	r1, r4
    f6c4:	682b      	ldr	r3, [r5, #0]
    f6c6:	4798      	blx	r3
		ptr++;
    f6c8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    f6ca:	42bc      	cmp	r4, r7
    f6cc:	d1f8      	bne.n	f6c0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    f6ce:	4640      	mov	r0, r8
    f6d0:	bc04      	pop	{r2}
    f6d2:	4690      	mov	r8, r2
    f6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    f6d6:	2301      	movs	r3, #1
    f6d8:	425b      	negs	r3, r3
    f6da:	4698      	mov	r8, r3
    f6dc:	e7f7      	b.n	f6ce <_read+0x26>
	for (; len > 0; --len) {
    f6de:	4680      	mov	r8, r0
    f6e0:	e7f5      	b.n	f6ce <_read+0x26>
    f6e2:	46c0      	nop			; (mov r8, r8)
    f6e4:	20000598 	.word	0x20000598
    f6e8:	20000590 	.word	0x20000590

0000f6ec <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    f6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6ee:	46c6      	mov	lr, r8
    f6f0:	b500      	push	{lr}
    f6f2:	000e      	movs	r6, r1
    f6f4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    f6f6:	3801      	subs	r0, #1
    f6f8:	2802      	cmp	r0, #2
    f6fa:	d810      	bhi.n	f71e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    f6fc:	2a00      	cmp	r2, #0
    f6fe:	d011      	beq.n	f724 <_write+0x38>
    f700:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    f702:	4b0c      	ldr	r3, [pc, #48]	; (f734 <_write+0x48>)
    f704:	4698      	mov	r8, r3
    f706:	4f0c      	ldr	r7, [pc, #48]	; (f738 <_write+0x4c>)
    f708:	4643      	mov	r3, r8
    f70a:	6818      	ldr	r0, [r3, #0]
    f70c:	5d31      	ldrb	r1, [r6, r4]
    f70e:	683b      	ldr	r3, [r7, #0]
    f710:	4798      	blx	r3
    f712:	2800      	cmp	r0, #0
    f714:	db08      	blt.n	f728 <_write+0x3c>
			return -1;
		}
		++nChars;
    f716:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    f718:	42a5      	cmp	r5, r4
    f71a:	d1f5      	bne.n	f708 <_write+0x1c>
    f71c:	e006      	b.n	f72c <_write+0x40>
		return -1;
    f71e:	2401      	movs	r4, #1
    f720:	4264      	negs	r4, r4
    f722:	e003      	b.n	f72c <_write+0x40>
	for (; len != 0; --len) {
    f724:	0014      	movs	r4, r2
    f726:	e001      	b.n	f72c <_write+0x40>
			return -1;
    f728:	2401      	movs	r4, #1
    f72a:	4264      	negs	r4, r4
	}
	return nChars;
}
    f72c:	0020      	movs	r0, r4
    f72e:	bc04      	pop	{r2}
    f730:	4690      	mov	r8, r2
    f732:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f734:	20000598 	.word	0x20000598
    f738:	20000594 	.word	0x20000594

0000f73c <resolve_cb>:
{
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
}

static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    f73c:	b570      	push	{r4, r5, r6, lr}
    f73e:	b082      	sub	sp, #8
    f740:	0005      	movs	r5, r0
    f742:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
	(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    f744:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    f746:	21ff      	movs	r1, #255	; 0xff
    f748:	400b      	ands	r3, r1
    f74a:	000a      	movs	r2, r1
    f74c:	4022      	ands	r2, r4
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    f74e:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    f750:	9001      	str	r0, [sp, #4]
	(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    f752:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    f754:	4001      	ands	r1, r0
    f756:	9100      	str	r1, [sp, #0]
    f758:	0029      	movs	r1, r5
    f75a:	4804      	ldr	r0, [pc, #16]	; (f76c <resolve_cb+0x30>)
    f75c:	4e04      	ldr	r6, [pc, #16]	; (f770 <resolve_cb+0x34>)
    f75e:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    f760:	0021      	movs	r1, r4
    f762:	0028      	movs	r0, r5
    f764:	4b03      	ldr	r3, [pc, #12]	; (f774 <resolve_cb+0x38>)
    f766:	4798      	blx	r3
}
    f768:	b002      	add	sp, #8
    f76a:	bd70      	pop	{r4, r5, r6, pc}
    f76c:	000146bc 	.word	0x000146bc
    f770:	000119b1 	.word	0x000119b1
    f774:	0000be41 	.word	0x0000be41

0000f778 <socket_cb>:
{
    f778:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    f77a:	4b01      	ldr	r3, [pc, #4]	; (f780 <socket_cb+0x8>)
    f77c:	4798      	blx	r3
}
    f77e:	bd10      	pop	{r4, pc}
    f780:	0000ca6d 	.word	0x0000ca6d

0000f784 <start_download>:
{
    f784:	b510      	push	{r4, lr}
    f786:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
    f788:	4b17      	ldr	r3, [pc, #92]	; (f7e8 <start_download+0x64>)
    f78a:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(WIFI_CONNECTED)) {
    f78c:	079a      	lsls	r2, r3, #30
    f78e:	d513      	bpl.n	f7b8 <start_download+0x34>
	if (is_state_set(GET_REQUESTED)) {
    f790:	075a      	lsls	r2, r3, #29
    f792:	d415      	bmi.n	f7c0 <start_download+0x3c>
	if (is_state_set(DOWNLOADING)) {
    f794:	071b      	lsls	r3, r3, #28
    f796:	d417      	bmi.n	f7c8 <start_download+0x44>
	if(download_CRC == false){
    f798:	4b14      	ldr	r3, [pc, #80]	; (f7ec <start_download+0x68>)
    f79a:	781b      	ldrb	r3, [r3, #0]
    f79c:	2b00      	cmp	r3, #0
    f79e:	d017      	beq.n	f7d0 <start_download+0x4c>
		printf("start_download CRC: sending HTTP request...\r\n");
    f7a0:	4813      	ldr	r0, [pc, #76]	; (f7f0 <start_download+0x6c>)
    f7a2:	4b14      	ldr	r3, [pc, #80]	; (f7f4 <start_download+0x70>)
    f7a4:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_CRC_URL, HTTP_METHOD_GET, NULL, NULL);
    f7a6:	2300      	movs	r3, #0
    f7a8:	9300      	str	r3, [sp, #0]
    f7aa:	2201      	movs	r2, #1
    f7ac:	4912      	ldr	r1, [pc, #72]	; (f7f8 <start_download+0x74>)
    f7ae:	4813      	ldr	r0, [pc, #76]	; (f7fc <start_download+0x78>)
    f7b0:	4c13      	ldr	r4, [pc, #76]	; (f800 <start_download+0x7c>)
    f7b2:	47a0      	blx	r4
}
    f7b4:	b002      	add	sp, #8
    f7b6:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
    f7b8:	4812      	ldr	r0, [pc, #72]	; (f804 <start_download+0x80>)
    f7ba:	4b0e      	ldr	r3, [pc, #56]	; (f7f4 <start_download+0x70>)
    f7bc:	4798      	blx	r3
		return;
    f7be:	e7f9      	b.n	f7b4 <start_download+0x30>
		printf("start_download: request is sent already.\r\n");
    f7c0:	4811      	ldr	r0, [pc, #68]	; (f808 <start_download+0x84>)
    f7c2:	4b0c      	ldr	r3, [pc, #48]	; (f7f4 <start_download+0x70>)
    f7c4:	4798      	blx	r3
		return;
    f7c6:	e7f5      	b.n	f7b4 <start_download+0x30>
		printf("start_download: running download already.\r\n");
    f7c8:	4810      	ldr	r0, [pc, #64]	; (f80c <start_download+0x88>)
    f7ca:	4b0a      	ldr	r3, [pc, #40]	; (f7f4 <start_download+0x70>)
    f7cc:	4798      	blx	r3
		return;
    f7ce:	e7f1      	b.n	f7b4 <start_download+0x30>
		printf("start_download: sending HTTP request...\r\n");
    f7d0:	480f      	ldr	r0, [pc, #60]	; (f810 <start_download+0x8c>)
    f7d2:	4b08      	ldr	r3, [pc, #32]	; (f7f4 <start_download+0x70>)
    f7d4:	4798      	blx	r3
		http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    f7d6:	2300      	movs	r3, #0
    f7d8:	9300      	str	r3, [sp, #0]
    f7da:	2201      	movs	r2, #1
    f7dc:	490d      	ldr	r1, [pc, #52]	; (f814 <start_download+0x90>)
    f7de:	4807      	ldr	r0, [pc, #28]	; (f7fc <start_download+0x78>)
    f7e0:	4c07      	ldr	r4, [pc, #28]	; (f800 <start_download+0x7c>)
    f7e2:	47a0      	blx	r4
    f7e4:	e7e6      	b.n	f7b4 <start_download+0x30>
    f7e6:	46c0      	nop			; (mov r8, r8)
    f7e8:	2000028c 	.word	0x2000028c
    f7ec:	2000028d 	.word	0x2000028d
    f7f0:	000147d0 	.word	0x000147d0
    f7f4:	00011acd 	.word	0x00011acd
    f7f8:	00014800 	.word	0x00014800
    f7fc:	20000e8c 	.word	0x20000e8c
    f800:	0000c371 	.word	0x0000c371
    f804:	000146ec 	.word	0x000146ec
    f808:	00014718 	.word	0x00014718
    f80c:	00014744 	.word	0x00014744
    f810:	00014770 	.word	0x00014770
    f814:	0001479c 	.word	0x0001479c

0000f818 <socket_resolve_handler>:
{
    f818:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    f81a:	4b01      	ldr	r3, [pc, #4]	; (f820 <socket_resolve_handler+0x8>)
    f81c:	4798      	blx	r3
}
    f81e:	bd10      	pop	{r4, pc}
    f820:	000107a9 	.word	0x000107a9

0000f824 <socket_event_handler>:
{
    f824:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    f826:	4b01      	ldr	r3, [pc, #4]	; (f82c <socket_event_handler+0x8>)
    f828:	4798      	blx	r3
}
    f82a:	bd10      	pop	{r4, pc}
    f82c:	00011349 	.word	0x00011349

0000f830 <wifi_callback>:
{
    f830:	b510      	push	{r4, lr}
    f832:	b082      	sub	sp, #8
	switch (msg_type) {
    f834:	282c      	cmp	r0, #44	; 0x2c
    f836:	d003      	beq.n	f840 <wifi_callback+0x10>
    f838:	2832      	cmp	r0, #50	; 0x32
    f83a:	d01c      	beq.n	f876 <wifi_callback+0x46>
}
    f83c:	b002      	add	sp, #8
    f83e:	bd10      	pop	{r4, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    f840:	780b      	ldrb	r3, [r1, #0]
    f842:	2b01      	cmp	r3, #1
    f844:	d011      	beq.n	f86a <wifi_callback+0x3a>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    f846:	2b00      	cmp	r3, #0
    f848:	d1f8      	bne.n	f83c <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
    f84a:	4812      	ldr	r0, [pc, #72]	; (f894 <wifi_callback+0x64>)
    f84c:	4b12      	ldr	r3, [pc, #72]	; (f898 <wifi_callback+0x68>)
    f84e:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    f850:	23ff      	movs	r3, #255	; 0xff
    f852:	9300      	str	r3, [sp, #0]
    f854:	4b11      	ldr	r3, [pc, #68]	; (f89c <wifi_callback+0x6c>)
    f856:	2202      	movs	r2, #2
    f858:	210b      	movs	r1, #11
    f85a:	4811      	ldr	r0, [pc, #68]	; (f8a0 <wifi_callback+0x70>)
    f85c:	4c11      	ldr	r4, [pc, #68]	; (f8a4 <wifi_callback+0x74>)
    f85e:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    f860:	2101      	movs	r1, #1
    f862:	4811      	ldr	r0, [pc, #68]	; (f8a8 <wifi_callback+0x78>)
    f864:	4b11      	ldr	r3, [pc, #68]	; (f8ac <wifi_callback+0x7c>)
    f866:	4798      	blx	r3
    f868:	e7e8      	b.n	f83c <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
    f86a:	4811      	ldr	r0, [pc, #68]	; (f8b0 <wifi_callback+0x80>)
    f86c:	4b0a      	ldr	r3, [pc, #40]	; (f898 <wifi_callback+0x68>)
    f86e:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    f870:	4b10      	ldr	r3, [pc, #64]	; (f8b4 <wifi_callback+0x84>)
    f872:	4798      	blx	r3
    f874:	e7e2      	b.n	f83c <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    f876:	788b      	ldrb	r3, [r1, #2]
    f878:	784a      	ldrb	r2, [r1, #1]
    f87a:	7808      	ldrb	r0, [r1, #0]
    f87c:	78c9      	ldrb	r1, [r1, #3]
    f87e:	9100      	str	r1, [sp, #0]
    f880:	0001      	movs	r1, r0
    f882:	480d      	ldr	r0, [pc, #52]	; (f8b8 <wifi_callback+0x88>)
    f884:	4c0d      	ldr	r4, [pc, #52]	; (f8bc <wifi_callback+0x8c>)
    f886:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    f888:	490d      	ldr	r1, [pc, #52]	; (f8c0 <wifi_callback+0x90>)
    f88a:	4807      	ldr	r0, [pc, #28]	; (f8a8 <wifi_callback+0x78>)
    f88c:	4b0d      	ldr	r3, [pc, #52]	; (f8c4 <wifi_callback+0x94>)
    f88e:	4798      	blx	r3
}
    f890:	e7d4      	b.n	f83c <wifi_callback+0xc>
    f892:	46c0      	nop			; (mov r8, r8)
    f894:	0001484c 	.word	0x0001484c
    f898:	00011acd 	.word	0x00011acd
    f89c:	00014860 	.word	0x00014860
    f8a0:	0001486c 	.word	0x0001486c
    f8a4:	000094b9 	.word	0x000094b9
    f8a8:	20000318 	.word	0x20000318
    f8ac:	00011009 	.word	0x00011009
    f8b0:	00014838 	.word	0x00014838
    f8b4:	000094d5 	.word	0x000094d5
    f8b8:	00014878 	.word	0x00014878
    f8bc:	000119b1 	.word	0x000119b1
    f8c0:	00014594 	.word	0x00014594
    f8c4:	000107fd 	.word	0x000107fd

0000f8c8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    f8c8:	b570      	push	{r4, r5, r6, lr}
    f8ca:	b082      	sub	sp, #8
    f8cc:	0005      	movs	r5, r0
    f8ce:	000e      	movs	r6, r1
	uint16_t temp = 0;
    f8d0:	2200      	movs	r2, #0
    f8d2:	466b      	mov	r3, sp
    f8d4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    f8d6:	4c06      	ldr	r4, [pc, #24]	; (f8f0 <usart_serial_getchar+0x28>)
    f8d8:	466b      	mov	r3, sp
    f8da:	1d99      	adds	r1, r3, #6
    f8dc:	0028      	movs	r0, r5
    f8de:	47a0      	blx	r4
    f8e0:	2800      	cmp	r0, #0
    f8e2:	d1f9      	bne.n	f8d8 <usart_serial_getchar+0x10>

	*c = temp;
    f8e4:	466b      	mov	r3, sp
    f8e6:	3306      	adds	r3, #6
    f8e8:	881b      	ldrh	r3, [r3, #0]
    f8ea:	7033      	strb	r3, [r6, #0]
}
    f8ec:	b002      	add	sp, #8
    f8ee:	bd70      	pop	{r4, r5, r6, pc}
    f8f0:	0000eca9 	.word	0x0000eca9

0000f8f4 <usart_serial_putchar>:
{
    f8f4:	b570      	push	{r4, r5, r6, lr}
    f8f6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    f8f8:	b28c      	uxth	r4, r1
    f8fa:	4e03      	ldr	r6, [pc, #12]	; (f908 <usart_serial_putchar+0x14>)
    f8fc:	0021      	movs	r1, r4
    f8fe:	0028      	movs	r0, r5
    f900:	47b0      	blx	r6
    f902:	2800      	cmp	r0, #0
    f904:	d1fa      	bne.n	f8fc <usart_serial_putchar+0x8>
}
    f906:	bd70      	pop	{r4, r5, r6, pc}
    f908:	0000ec7d 	.word	0x0000ec7d

0000f90c <mqtt_callback>:
{
    f90c:	b570      	push	{r4, r5, r6, lr}
    f90e:	b086      	sub	sp, #24
    f910:	0005      	movs	r5, r0
    f912:	0014      	movs	r4, r2
	switch (type) {
    f914:	2901      	cmp	r1, #1
    f916:	d062      	beq.n	f9de <mqtt_callback+0xd2>
    f918:	dd41      	ble.n	f99e <mqtt_callback+0x92>
    f91a:	2905      	cmp	r1, #5
    f91c:	d100      	bne.n	f920 <mqtt_callback+0x14>
    f91e:	e0c0      	b.n	faa2 <mqtt_callback+0x196>
    f920:	2906      	cmp	r1, #6
    f922:	d000      	beq.n	f926 <mqtt_callback+0x1a>
    f924:	e0c6      	b.n	fab4 <mqtt_callback+0x1a8>
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    f926:	6810      	ldr	r0, [r2, #0]
    f928:	2800      	cmp	r0, #0
    f92a:	d100      	bne.n	f92e <mqtt_callback+0x22>
    f92c:	e0c2      	b.n	fab4 <mqtt_callback+0x1a8>
    f92e:	6893      	ldr	r3, [r2, #8]
    f930:	2b00      	cmp	r3, #0
    f932:	d100      	bne.n	f936 <mqtt_callback+0x2a>
    f934:	e0be      	b.n	fab4 <mqtt_callback+0x1a8>
      if (!strncmp(data->recv_publish.topic, ACTUATOR_TOPIC, strlen(ACTUATOR_TOPIC)) ) {
    f936:	2208      	movs	r2, #8
    f938:	495f      	ldr	r1, [pc, #380]	; (fab8 <mqtt_callback+0x1ac>)
    f93a:	4b60      	ldr	r3, [pc, #384]	; (fabc <mqtt_callback+0x1b0>)
    f93c:	4798      	blx	r3
    f93e:	1e05      	subs	r5, r0, #0
    f940:	d06e      	beq.n	fa20 <mqtt_callback+0x114>
       if (!strncmp(data->recv_publish.topic, UPGRADE_TOPIC, strlen(UPGRADE_TOPIC)) ) {
    f942:	2207      	movs	r2, #7
    f944:	495e      	ldr	r1, [pc, #376]	; (fac0 <mqtt_callback+0x1b4>)
    f946:	6820      	ldr	r0, [r4, #0]
    f948:	4b5c      	ldr	r3, [pc, #368]	; (fabc <mqtt_callback+0x1b0>)
    f94a:	4798      	blx	r3
    f94c:	1e05      	subs	r5, r0, #0
    f94e:	d100      	bne.n	f952 <mqtt_callback+0x46>
    f950:	e089      	b.n	fa66 <mqtt_callback+0x15a>
	   if (!strncmp(data->recv_publish.topic, VERSION_TOPIC, strlen(VERSION_TOPIC)) ) {
    f952:	2207      	movs	r2, #7
    f954:	495b      	ldr	r1, [pc, #364]	; (fac4 <mqtt_callback+0x1b8>)
    f956:	6820      	ldr	r0, [r4, #0]
    f958:	4b58      	ldr	r3, [pc, #352]	; (fabc <mqtt_callback+0x1b0>)
    f95a:	4798      	blx	r3
    f95c:	1e05      	subs	r5, r0, #0
    f95e:	d000      	beq.n	f962 <mqtt_callback+0x56>
    f960:	e0a8      	b.n	fab4 <mqtt_callback+0x1a8>
		   printf("%s >> ", VERSION_TOPIC);
    f962:	4958      	ldr	r1, [pc, #352]	; (fac4 <mqtt_callback+0x1b8>)
    f964:	4858      	ldr	r0, [pc, #352]	; (fac8 <mqtt_callback+0x1bc>)
    f966:	4b59      	ldr	r3, [pc, #356]	; (facc <mqtt_callback+0x1c0>)
    f968:	4798      	blx	r3
		   for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f96a:	68e3      	ldr	r3, [r4, #12]
    f96c:	2b00      	cmp	r3, #0
    f96e:	dd07      	ble.n	f980 <mqtt_callback+0x74>
			   printf("%c", data->recv_publish.msg[i]);
    f970:	4e57      	ldr	r6, [pc, #348]	; (fad0 <mqtt_callback+0x1c4>)
    f972:	68a3      	ldr	r3, [r4, #8]
    f974:	5d58      	ldrb	r0, [r3, r5]
    f976:	47b0      	blx	r6
		   for (int i = 0; i < data->recv_publish.msg_size; i++) {
    f978:	3501      	adds	r5, #1
    f97a:	68e3      	ldr	r3, [r4, #12]
    f97c:	42ab      	cmp	r3, r5
    f97e:	dcf8      	bgt.n	f972 <mqtt_callback+0x66>
		   printf("\r\n");
    f980:	4854      	ldr	r0, [pc, #336]	; (fad4 <mqtt_callback+0x1c8>)
    f982:	4b55      	ldr	r3, [pc, #340]	; (fad8 <mqtt_callback+0x1cc>)
    f984:	4798      	blx	r3
		   if(!strncmp(data->recv_publish.msg,"reply", data->recv_publish.msg_size)){
    f986:	68e2      	ldr	r2, [r4, #12]
    f988:	68a0      	ldr	r0, [r4, #8]
    f98a:	4954      	ldr	r1, [pc, #336]	; (fadc <mqtt_callback+0x1d0>)
    f98c:	4b4b      	ldr	r3, [pc, #300]	; (fabc <mqtt_callback+0x1b0>)
    f98e:	4798      	blx	r3
    f990:	2800      	cmp	r0, #0
    f992:	d000      	beq.n	f996 <mqtt_callback+0x8a>
    f994:	e08e      	b.n	fab4 <mqtt_callback+0x1a8>
			   reply_firmware_ver=true;
    f996:	2201      	movs	r2, #1
    f998:	4b51      	ldr	r3, [pc, #324]	; (fae0 <mqtt_callback+0x1d4>)
    f99a:	701a      	strb	r2, [r3, #0]
    f99c:	e08a      	b.n	fab4 <mqtt_callback+0x1a8>
	switch (type) {
    f99e:	2900      	cmp	r1, #0
    f9a0:	d000      	beq.n	f9a4 <mqtt_callback+0x98>
    f9a2:	e087      	b.n	fab4 <mqtt_callback+0x1a8>
		if (data->sock_connected.result >= 0) {
    f9a4:	6813      	ldr	r3, [r2, #0]
    f9a6:	2b00      	cmp	r3, #0
    f9a8:	db0f      	blt.n	f9ca <mqtt_callback+0xbe>
      status = mqtt_connect_broker(module_inst, 1, mqtt_user, mqtt_pass, mqtt_user, NULL, NULL, 0, 2, 0);
    f9aa:	4a4e      	ldr	r2, [pc, #312]	; (fae4 <mqtt_callback+0x1d8>)
    f9ac:	2300      	movs	r3, #0
    f9ae:	9305      	str	r3, [sp, #20]
    f9b0:	2102      	movs	r1, #2
    f9b2:	9104      	str	r1, [sp, #16]
    f9b4:	9303      	str	r3, [sp, #12]
    f9b6:	9302      	str	r3, [sp, #8]
    f9b8:	9301      	str	r3, [sp, #4]
    f9ba:	9200      	str	r2, [sp, #0]
    f9bc:	4b4a      	ldr	r3, [pc, #296]	; (fae8 <mqtt_callback+0x1dc>)
    f9be:	3901      	subs	r1, #1
    f9c0:	4c4a      	ldr	r4, [pc, #296]	; (faec <mqtt_callback+0x1e0>)
    f9c2:	47a0      	blx	r4
    f9c4:	4b4a      	ldr	r3, [pc, #296]	; (faf0 <mqtt_callback+0x1e4>)
    f9c6:	6018      	str	r0, [r3, #0]
    f9c8:	e074      	b.n	fab4 <mqtt_callback+0x1a8>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    f9ca:	4c4a      	ldr	r4, [pc, #296]	; (faf4 <mqtt_callback+0x1e8>)
    f9cc:	0021      	movs	r1, r4
    f9ce:	484a      	ldr	r0, [pc, #296]	; (faf8 <mqtt_callback+0x1ec>)
    f9d0:	4b3e      	ldr	r3, [pc, #248]	; (facc <mqtt_callback+0x1c0>)
    f9d2:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    f9d4:	0021      	movs	r1, r4
    f9d6:	0028      	movs	r0, r5
    f9d8:	4b48      	ldr	r3, [pc, #288]	; (fafc <mqtt_callback+0x1f0>)
    f9da:	4798      	blx	r3
    f9dc:	e06a      	b.n	fab4 <mqtt_callback+0x1a8>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    f9de:	7811      	ldrb	r1, [r2, #0]
    f9e0:	2900      	cmp	r1, #0
    f9e2:	d119      	bne.n	fa18 <mqtt_callback+0x10c>
			status = mqtt_subscribe(module_inst, ACTUATOR_TOPIC, 2);
    f9e4:	2202      	movs	r2, #2
    f9e6:	4934      	ldr	r1, [pc, #208]	; (fab8 <mqtt_callback+0x1ac>)
    f9e8:	4e45      	ldr	r6, [pc, #276]	; (fb00 <mqtt_callback+0x1f4>)
    f9ea:	47b0      	blx	r6
    f9ec:	4c40      	ldr	r4, [pc, #256]	; (faf0 <mqtt_callback+0x1e4>)
    f9ee:	6020      	str	r0, [r4, #0]
			status = mqtt_subscribe(module_inst, UPGRADE_TOPIC, 2);
    f9f0:	2202      	movs	r2, #2
    f9f2:	4933      	ldr	r1, [pc, #204]	; (fac0 <mqtt_callback+0x1b4>)
    f9f4:	0028      	movs	r0, r5
    f9f6:	47b0      	blx	r6
    f9f8:	6020      	str	r0, [r4, #0]
			status = mqtt_subscribe(module_inst, VERSION_TOPIC, 2);
    f9fa:	2202      	movs	r2, #2
    f9fc:	4931      	ldr	r1, [pc, #196]	; (fac4 <mqtt_callback+0x1b8>)
    f9fe:	0028      	movs	r0, r5
    fa00:	47b0      	blx	r6
    fa02:	6020      	str	r0, [r4, #0]
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    fa04:	493f      	ldr	r1, [pc, #252]	; (fb04 <mqtt_callback+0x1f8>)
    fa06:	2231      	movs	r2, #49	; 0x31
    fa08:	5c8b      	ldrb	r3, [r1, r2]
    fa0a:	2002      	movs	r0, #2
    fa0c:	4303      	orrs	r3, r0
    fa0e:	548b      	strb	r3, [r1, r2]
			printf("Preparation of the chat has been completed.\r\n");
    fa10:	483d      	ldr	r0, [pc, #244]	; (fb08 <mqtt_callback+0x1fc>)
    fa12:	4b31      	ldr	r3, [pc, #196]	; (fad8 <mqtt_callback+0x1cc>)
    fa14:	4798      	blx	r3
    fa16:	e04d      	b.n	fab4 <mqtt_callback+0x1a8>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    fa18:	483c      	ldr	r0, [pc, #240]	; (fb0c <mqtt_callback+0x200>)
    fa1a:	4b2c      	ldr	r3, [pc, #176]	; (facc <mqtt_callback+0x1c0>)
    fa1c:	4798      	blx	r3
    fa1e:	e049      	b.n	fab4 <mqtt_callback+0x1a8>
        printf("%s >> ", ACTUATOR_TOPIC);
    fa20:	4925      	ldr	r1, [pc, #148]	; (fab8 <mqtt_callback+0x1ac>)
    fa22:	4829      	ldr	r0, [pc, #164]	; (fac8 <mqtt_callback+0x1bc>)
    fa24:	4b29      	ldr	r3, [pc, #164]	; (facc <mqtt_callback+0x1c0>)
    fa26:	4798      	blx	r3
		if(!strncmp(data->recv_publish.msg,"true", data->recv_publish.msg_size)){
    fa28:	68e2      	ldr	r2, [r4, #12]
    fa2a:	4939      	ldr	r1, [pc, #228]	; (fb10 <mqtt_callback+0x204>)
    fa2c:	68a0      	ldr	r0, [r4, #8]
    fa2e:	4b23      	ldr	r3, [pc, #140]	; (fabc <mqtt_callback+0x1b0>)
    fa30:	4798      	blx	r3
    fa32:	2800      	cmp	r0, #0
    fa34:	d112      	bne.n	fa5c <mqtt_callback+0x150>
    fa36:	2280      	movs	r2, #128	; 0x80
    fa38:	0112      	lsls	r2, r2, #4
    fa3a:	4b36      	ldr	r3, [pc, #216]	; (fb14 <mqtt_callback+0x208>)
    fa3c:	619a      	str	r2, [r3, #24]
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    fa3e:	68e3      	ldr	r3, [r4, #12]
    fa40:	2b00      	cmp	r3, #0
    fa42:	dd07      	ble.n	fa54 <mqtt_callback+0x148>
          printf("%c", data->recv_publish.msg[i]);
    fa44:	4e22      	ldr	r6, [pc, #136]	; (fad0 <mqtt_callback+0x1c4>)
    fa46:	68a3      	ldr	r3, [r4, #8]
    fa48:	5d58      	ldrb	r0, [r3, r5]
    fa4a:	47b0      	blx	r6
        for (int i = 0; i < data->recv_publish.msg_size; i++) {
    fa4c:	3501      	adds	r5, #1
    fa4e:	68e3      	ldr	r3, [r4, #12]
    fa50:	42ab      	cmp	r3, r5
    fa52:	dcf8      	bgt.n	fa46 <mqtt_callback+0x13a>
        printf("\r\n");
    fa54:	481f      	ldr	r0, [pc, #124]	; (fad4 <mqtt_callback+0x1c8>)
    fa56:	4b20      	ldr	r3, [pc, #128]	; (fad8 <mqtt_callback+0x1cc>)
    fa58:	4798      	blx	r3
    fa5a:	e772      	b.n	f942 <mqtt_callback+0x36>
		port_base->OUTCLR.reg = pin_mask;
    fa5c:	2280      	movs	r2, #128	; 0x80
    fa5e:	0112      	lsls	r2, r2, #4
    fa60:	4b2c      	ldr	r3, [pc, #176]	; (fb14 <mqtt_callback+0x208>)
    fa62:	615a      	str	r2, [r3, #20]
    fa64:	e7eb      	b.n	fa3e <mqtt_callback+0x132>
	       printf("%s >> ", UPGRADE_TOPIC);
    fa66:	4916      	ldr	r1, [pc, #88]	; (fac0 <mqtt_callback+0x1b4>)
    fa68:	4817      	ldr	r0, [pc, #92]	; (fac8 <mqtt_callback+0x1bc>)
    fa6a:	4b18      	ldr	r3, [pc, #96]	; (facc <mqtt_callback+0x1c0>)
    fa6c:	4798      	blx	r3
	       for (int i = 0; i < data->recv_publish.msg_size; i++) {
    fa6e:	68e3      	ldr	r3, [r4, #12]
    fa70:	2b00      	cmp	r3, #0
    fa72:	dd07      	ble.n	fa84 <mqtt_callback+0x178>
		       printf("%c", data->recv_publish.msg[i]);
    fa74:	4e16      	ldr	r6, [pc, #88]	; (fad0 <mqtt_callback+0x1c4>)
    fa76:	68a3      	ldr	r3, [r4, #8]
    fa78:	5d58      	ldrb	r0, [r3, r5]
    fa7a:	47b0      	blx	r6
	       for (int i = 0; i < data->recv_publish.msg_size; i++) {
    fa7c:	3501      	adds	r5, #1
    fa7e:	68e3      	ldr	r3, [r4, #12]
    fa80:	42ab      	cmp	r3, r5
    fa82:	dcf8      	bgt.n	fa76 <mqtt_callback+0x16a>
	       printf("\r\n");
    fa84:	4813      	ldr	r0, [pc, #76]	; (fad4 <mqtt_callback+0x1c8>)
    fa86:	4b14      	ldr	r3, [pc, #80]	; (fad8 <mqtt_callback+0x1cc>)
    fa88:	4798      	blx	r3
		   if(!strncmp(data->recv_publish.msg,"upgrade firmware", data->recv_publish.msg_size)){
    fa8a:	68e2      	ldr	r2, [r4, #12]
    fa8c:	4922      	ldr	r1, [pc, #136]	; (fb18 <mqtt_callback+0x20c>)
    fa8e:	68a0      	ldr	r0, [r4, #8]
    fa90:	4b0a      	ldr	r3, [pc, #40]	; (fabc <mqtt_callback+0x1b0>)
    fa92:	4798      	blx	r3
    fa94:	2800      	cmp	r0, #0
    fa96:	d000      	beq.n	fa9a <mqtt_callback+0x18e>
    fa98:	e75b      	b.n	f952 <mqtt_callback+0x46>
			   printf("upgrade message received");
    fa9a:	4820      	ldr	r0, [pc, #128]	; (fb1c <mqtt_callback+0x210>)
    fa9c:	4b0b      	ldr	r3, [pc, #44]	; (facc <mqtt_callback+0x1c0>)
    fa9e:	4798      	blx	r3
    faa0:	e757      	b.n	f952 <mqtt_callback+0x46>
		printf("MQTT disconnected\r\n");
    faa2:	481f      	ldr	r0, [pc, #124]	; (fb20 <mqtt_callback+0x214>)
    faa4:	4b0c      	ldr	r3, [pc, #48]	; (fad8 <mqtt_callback+0x1cc>)
    faa6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    faa8:	4916      	ldr	r1, [pc, #88]	; (fb04 <mqtt_callback+0x1f8>)
    faaa:	2231      	movs	r2, #49	; 0x31
    faac:	5c8b      	ldrb	r3, [r1, r2]
    faae:	2002      	movs	r0, #2
    fab0:	4383      	bics	r3, r0
    fab2:	548b      	strb	r3, [r1, r2]
}
    fab4:	b006      	add	sp, #24
    fab6:	bd70      	pop	{r4, r5, r6, pc}
    fab8:	000145e0 	.word	0x000145e0
    fabc:	00011d21 	.word	0x00011d21
    fac0:	000145ec 	.word	0x000145ec
    fac4:	000145f4 	.word	0x000145f4
    fac8:	00014660 	.word	0x00014660
    facc:	000119b1 	.word	0x000119b1
    fad0:	000119e5 	.word	0x000119e5
    fad4:	0001490c 	.word	0x0001490c
    fad8:	00011acd 	.word	0x00011acd
    fadc:	000146a0 	.word	0x000146a0
    fae0:	200003cc 	.word	0x200003cc
    fae4:	20000018 	.word	0x20000018
    fae8:	20000010 	.word	0x20000010
    faec:	00010911 	.word	0x00010911
    faf0:	20000fb8 	.word	0x20000fb8
    faf4:	00014594 	.word	0x00014594
    faf8:	000145a8 	.word	0x000145a8
    fafc:	000107fd 	.word	0x000107fd
    fb00:	00010d69 	.word	0x00010d69
    fb04:	2000059c 	.word	0x2000059c
    fb08:	000145fc 	.word	0x000145fc
    fb0c:	0001462c 	.word	0x0001462c
    fb10:	00014668 	.word	0x00014668
    fb14:	41004400 	.word	0x41004400
    fb18:	00014670 	.word	0x00014670
    fb1c:	00014684 	.word	0x00014684
    fb20:	000146a8 	.word	0x000146a8

0000fb24 <wifi_cb>:

static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    fb24:	b510      	push	{r4, lr}
    fb26:	b082      	sub	sp, #8
	switch (u8MsgType) {
    fb28:	282c      	cmp	r0, #44	; 0x2c
    fb2a:	d003      	beq.n	fb34 <wifi_cb+0x10>
    fb2c:	2832      	cmp	r0, #50	; 0x32
    fb2e:	d02f      	beq.n	fb90 <wifi_cb+0x6c>
		}

		default:
		break;
	}
}
    fb30:	b002      	add	sp, #8
    fb32:	bd10      	pop	{r4, pc}
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    fb34:	780b      	ldrb	r3, [r1, #0]
    fb36:	2b01      	cmp	r3, #1
    fb38:	d01a      	beq.n	fb70 <wifi_cb+0x4c>
				} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    fb3a:	2b00      	cmp	r3, #0
    fb3c:	d1f8      	bne.n	fb30 <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    fb3e:	481d      	ldr	r0, [pc, #116]	; (fbb4 <wifi_cb+0x90>)
    fb40:	4b1d      	ldr	r3, [pc, #116]	; (fbb8 <wifi_cb+0x94>)
    fb42:	4798      	blx	r3
	down_state &= ~mask;
    fb44:	4b1d      	ldr	r3, [pc, #116]	; (fbbc <wifi_cb+0x98>)
    fb46:	2200      	movs	r2, #0
    fb48:	569a      	ldrsb	r2, [r3, r2]
    fb4a:	23fd      	movs	r3, #253	; 0xfd
    fb4c:	4013      	ands	r3, r2
				if (is_state_set(DOWNLOADING)) {
    fb4e:	0719      	lsls	r1, r3, #28
    fb50:	d414      	bmi.n	fb7c <wifi_cb+0x58>
	down_state &= ~mask;
    fb52:	4a1a      	ldr	r2, [pc, #104]	; (fbbc <wifi_cb+0x98>)
    fb54:	7013      	strb	r3, [r2, #0]
	return ((down_state & mask) != 0);
    fb56:	4b19      	ldr	r3, [pc, #100]	; (fbbc <wifi_cb+0x98>)
    fb58:	781b      	ldrb	r3, [r3, #0]
				if (is_state_set(GET_REQUESTED)) {
    fb5a:	075a      	lsls	r2, r3, #29
    fb5c:	d413      	bmi.n	fb86 <wifi_cb+0x62>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    fb5e:	23ff      	movs	r3, #255	; 0xff
    fb60:	9300      	str	r3, [sp, #0]
    fb62:	4b17      	ldr	r3, [pc, #92]	; (fbc0 <wifi_cb+0x9c>)
    fb64:	2202      	movs	r2, #2
    fb66:	210b      	movs	r1, #11
    fb68:	4816      	ldr	r0, [pc, #88]	; (fbc4 <wifi_cb+0xa0>)
    fb6a:	4c17      	ldr	r4, [pc, #92]	; (fbc8 <wifi_cb+0xa4>)
    fb6c:	47a0      	blx	r4
    fb6e:	e7df      	b.n	fb30 <wifi_cb+0xc>
				printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    fb70:	4816      	ldr	r0, [pc, #88]	; (fbcc <wifi_cb+0xa8>)
    fb72:	4b11      	ldr	r3, [pc, #68]	; (fbb8 <wifi_cb+0x94>)
    fb74:	4798      	blx	r3
				m2m_wifi_request_dhcp_client();
    fb76:	4b16      	ldr	r3, [pc, #88]	; (fbd0 <wifi_cb+0xac>)
    fb78:	4798      	blx	r3
    fb7a:	e7d9      	b.n	fb30 <wifi_cb+0xc>
	down_state &= ~mask;
    fb7c:	230a      	movs	r3, #10
    fb7e:	439a      	bics	r2, r3
    fb80:	4b0e      	ldr	r3, [pc, #56]	; (fbbc <wifi_cb+0x98>)
    fb82:	701a      	strb	r2, [r3, #0]
    fb84:	e7e7      	b.n	fb56 <wifi_cb+0x32>
    fb86:	2204      	movs	r2, #4
    fb88:	4393      	bics	r3, r2
    fb8a:	4a0c      	ldr	r2, [pc, #48]	; (fbbc <wifi_cb+0x98>)
    fb8c:	7013      	strb	r3, [r2, #0]
    fb8e:	e7e6      	b.n	fb5e <wifi_cb+0x3a>
			printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    fb90:	788b      	ldrb	r3, [r1, #2]
    fb92:	784a      	ldrb	r2, [r1, #1]
    fb94:	7808      	ldrb	r0, [r1, #0]
    fb96:	78c9      	ldrb	r1, [r1, #3]
    fb98:	9100      	str	r1, [sp, #0]
    fb9a:	0001      	movs	r1, r0
    fb9c:	480d      	ldr	r0, [pc, #52]	; (fbd4 <wifi_cb+0xb0>)
    fb9e:	4c0e      	ldr	r4, [pc, #56]	; (fbd8 <wifi_cb+0xb4>)
    fba0:	47a0      	blx	r4
	down_state |= mask;
    fba2:	4a06      	ldr	r2, [pc, #24]	; (fbbc <wifi_cb+0x98>)
    fba4:	7813      	ldrb	r3, [r2, #0]
    fba6:	2102      	movs	r1, #2
    fba8:	430b      	orrs	r3, r1
    fbaa:	7013      	strb	r3, [r2, #0]
			start_download();
    fbac:	4b0b      	ldr	r3, [pc, #44]	; (fbdc <wifi_cb+0xb8>)
    fbae:	4798      	blx	r3
}
    fbb0:	e7be      	b.n	fb30 <wifi_cb+0xc>
    fbb2:	46c0      	nop			; (mov r8, r8)
    fbb4:	000148b4 	.word	0x000148b4
    fbb8:	00011acd 	.word	0x00011acd
    fbbc:	2000028c 	.word	0x2000028c
    fbc0:	00014860 	.word	0x00014860
    fbc4:	0001486c 	.word	0x0001486c
    fbc8:	000094b9 	.word	0x000094b9
    fbcc:	00014894 	.word	0x00014894
    fbd0:	000094d5 	.word	0x000094d5
    fbd4:	000148d4 	.word	0x000148d4
    fbd8:	000119b1 	.word	0x000119b1
    fbdc:	0000f785 	.word	0x0000f785

0000fbe0 <configure_port_pins>:
{
    fbe0:	b570      	push	{r4, r5, r6, lr}
    fbe2:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    fbe4:	ac01      	add	r4, sp, #4
    fbe6:	2301      	movs	r3, #1
    fbe8:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    fbea:	2600      	movs	r6, #0
    fbec:	70a6      	strb	r6, [r4, #2]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    fbee:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(LED_0_PIN, &config_port_pin);
    fbf0:	0021      	movs	r1, r4
    fbf2:	200b      	movs	r0, #11
    fbf4:	4d03      	ldr	r5, [pc, #12]	; (fc04 <configure_port_pins+0x24>)
    fbf6:	47a8      	blx	r5
	config_port_pin.direction = PORT_PIN_DIR_INPUT;
    fbf8:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(B1, &config_port_pin);
    fbfa:	0021      	movs	r1, r4
    fbfc:	2023      	movs	r0, #35	; 0x23
    fbfe:	47a8      	blx	r5
}
    fc00:	b002      	add	sp, #8
    fc02:	bd70      	pop	{r4, r5, r6, pc}
    fc04:	0000dc79 	.word	0x0000dc79

0000fc08 <write_spi_flash_frm_buf>:
void write_spi_flash_frm_buf(uint32 len){
    fc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc0a:	0005      	movs	r5, r0
	at25dfx_chip_wake(&at25dfx_chip);
    fc0c:	4c0f      	ldr	r4, [pc, #60]	; (fc4c <write_spi_flash_frm_buf+0x44>)
    fc0e:	0020      	movs	r0, r4
    fc10:	4b0f      	ldr	r3, [pc, #60]	; (fc50 <write_spi_flash_frm_buf+0x48>)
    fc12:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    fc14:	0020      	movs	r0, r4
    fc16:	4b0f      	ldr	r3, [pc, #60]	; (fc54 <write_spi_flash_frm_buf+0x4c>)
    fc18:	4798      	blx	r3
    fc1a:	2800      	cmp	r0, #0
    fc1c:	d112      	bne.n	fc44 <write_spi_flash_frm_buf+0x3c>
	at25dfx_chip_write_buffer(&at25dfx_chip, flash_addr, http_buf + http_buf_read_ptr, len);	// write buffer
    fc1e:	b2ab      	uxth	r3, r5
    fc20:	4a0d      	ldr	r2, [pc, #52]	; (fc58 <write_spi_flash_frm_buf+0x50>)
    fc22:	6812      	ldr	r2, [r2, #0]
    fc24:	490d      	ldr	r1, [pc, #52]	; (fc5c <write_spi_flash_frm_buf+0x54>)
    fc26:	1852      	adds	r2, r2, r1
    fc28:	4c0d      	ldr	r4, [pc, #52]	; (fc60 <write_spi_flash_frm_buf+0x58>)
    fc2a:	4e08      	ldr	r6, [pc, #32]	; (fc4c <write_spi_flash_frm_buf+0x44>)
    fc2c:	6821      	ldr	r1, [r4, #0]
    fc2e:	0030      	movs	r0, r6
    fc30:	4f0c      	ldr	r7, [pc, #48]	; (fc64 <write_spi_flash_frm_buf+0x5c>)
    fc32:	47b8      	blx	r7
	at25dfx_chip_sleep(&at25dfx_chip);											// back to sleep
    fc34:	0030      	movs	r0, r6
    fc36:	4b0c      	ldr	r3, [pc, #48]	; (fc68 <write_spi_flash_frm_buf+0x60>)
    fc38:	4798      	blx	r3
	flash_addr = flash_addr + len;
    fc3a:	6823      	ldr	r3, [r4, #0]
    fc3c:	469c      	mov	ip, r3
    fc3e:	4465      	add	r5, ip
    fc40:	6025      	str	r5, [r4, #0]
}
    fc42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("Chip didnt wake \r\n");
    fc44:	4809      	ldr	r0, [pc, #36]	; (fc6c <write_spi_flash_frm_buf+0x64>)
    fc46:	4b0a      	ldr	r3, [pc, #40]	; (fc70 <write_spi_flash_frm_buf+0x68>)
    fc48:	4798      	blx	r3
    fc4a:	e7e8      	b.n	fc1e <write_spi_flash_frm_buf+0x16>
    fc4c:	20000e2c 	.word	0x20000e2c
    fc50:	0000d8e9 	.word	0x0000d8e9
    fc54:	0000d00d 	.word	0x0000d00d
    fc58:	20000290 	.word	0x20000290
    fc5c:	2000062c 	.word	0x2000062c
    fc60:	200005d0 	.word	0x200005d0
    fc64:	0000d119 	.word	0x0000d119
    fc68:	0000d85d 	.word	0x0000d85d
    fc6c:	000148fc 	.word	0x000148fc
    fc70:	00011acd 	.word	0x00011acd

0000fc74 <http_client_callback>:
{
    fc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc76:	46ce      	mov	lr, r9
    fc78:	4647      	mov	r7, r8
    fc7a:	b580      	push	{r7, lr}
    fc7c:	0014      	movs	r4, r2
	switch (type) {
    fc7e:	2904      	cmp	r1, #4
    fc80:	d806      	bhi.n	fc90 <http_client_callback+0x1c>
    fc82:	0089      	lsls	r1, r1, #2
    fc84:	4b86      	ldr	r3, [pc, #536]	; (fea0 <http_client_callback+0x22c>)
    fc86:	585b      	ldr	r3, [r3, r1]
    fc88:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    fc8a:	4886      	ldr	r0, [pc, #536]	; (fea4 <http_client_callback+0x230>)
    fc8c:	4b86      	ldr	r3, [pc, #536]	; (fea8 <http_client_callback+0x234>)
    fc8e:	4798      	blx	r3
}
    fc90:	bc0c      	pop	{r2, r3}
    fc92:	4690      	mov	r8, r2
    fc94:	4699      	mov	r9, r3
    fc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("http_client_callback: request completed.\r\n");
    fc98:	4884      	ldr	r0, [pc, #528]	; (feac <http_client_callback+0x238>)
    fc9a:	4b83      	ldr	r3, [pc, #524]	; (fea8 <http_client_callback+0x234>)
    fc9c:	4798      	blx	r3
	down_state |= mask;
    fc9e:	4a84      	ldr	r2, [pc, #528]	; (feb0 <http_client_callback+0x23c>)
    fca0:	7813      	ldrb	r3, [r2, #0]
    fca2:	2104      	movs	r1, #4
    fca4:	430b      	orrs	r3, r1
    fca6:	7013      	strb	r3, [r2, #0]
    fca8:	e7f2      	b.n	fc90 <http_client_callback+0x1c>
		printf("http_client_callback: received response %u data size %u\r\n",
    fcaa:	8811      	ldrh	r1, [r2, #0]
    fcac:	6852      	ldr	r2, [r2, #4]
    fcae:	4881      	ldr	r0, [pc, #516]	; (feb4 <http_client_callback+0x240>)
    fcb0:	4b81      	ldr	r3, [pc, #516]	; (feb8 <http_client_callback+0x244>)
    fcb2:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    fcb4:	8823      	ldrh	r3, [r4, #0]
    fcb6:	2bc8      	cmp	r3, #200	; 0xc8
    fcb8:	d121      	bne.n	fcfe <http_client_callback+0x8a>
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    fcba:	2380      	movs	r3, #128	; 0x80
    fcbc:	00db      	lsls	r3, r3, #3
    fcbe:	6862      	ldr	r2, [r4, #4]
    fcc0:	429a      	cmp	r2, r3
    fcc2:	d8e5      	bhi.n	fc90 <http_client_callback+0x1c>
			printf("Callback: CRC download......\r\n");
    fcc4:	487d      	ldr	r0, [pc, #500]	; (febc <http_client_callback+0x248>)
    fcc6:	4b78      	ldr	r3, [pc, #480]	; (fea8 <http_client_callback+0x234>)
    fcc8:	4798      	blx	r3
			dlCRC = *(uint32_t *)data->recv_response.content;
    fcca:	68a3      	ldr	r3, [r4, #8]
    fccc:	681b      	ldr	r3, [r3, #0]
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
    fcce:	0e19      	lsrs	r1, r3, #24
                    ((dlCRC<<24)&0xff000000); // byte 0 to byte 3
    fcd0:	061a      	lsls	r2, r3, #24
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
    fcd2:	4311      	orrs	r1, r2
                    ((dlCRC<<8)&0xff0000) | // move byte 1 to byte 2
    fcd4:	021a      	lsls	r2, r3, #8
    fcd6:	20ff      	movs	r0, #255	; 0xff
    fcd8:	0400      	lsls	r0, r0, #16
    fcda:	4002      	ands	r2, r0
                    ((dlCRC>>8)&0xff00) | // move byte 2 to byte 1
    fcdc:	4311      	orrs	r1, r2
    fcde:	0a1b      	lsrs	r3, r3, #8
    fce0:	22ff      	movs	r2, #255	; 0xff
    fce2:	0212      	lsls	r2, r2, #8
    fce4:	4013      	ands	r3, r2
    fce6:	4319      	orrs	r1, r3
			dlCRC =  ((dlCRC>>24)&0xff) | // move byte 3 to byte 0
    fce8:	4b75      	ldr	r3, [pc, #468]	; (fec0 <http_client_callback+0x24c>)
    fcea:	6019      	str	r1, [r3, #0]
			printf("Received %x\r\n", (uint32_t)dlCRC);
    fcec:	4875      	ldr	r0, [pc, #468]	; (fec4 <http_client_callback+0x250>)
    fcee:	4b72      	ldr	r3, [pc, #456]	; (feb8 <http_client_callback+0x244>)
    fcf0:	4798      	blx	r3
	down_state |= mask;
    fcf2:	4a6f      	ldr	r2, [pc, #444]	; (feb0 <http_client_callback+0x23c>)
    fcf4:	7813      	ldrb	r3, [r2, #0]
    fcf6:	2110      	movs	r1, #16
    fcf8:	430b      	orrs	r3, r1
    fcfa:	7013      	strb	r3, [r2, #0]
    fcfc:	e7c8      	b.n	fc90 <http_client_callback+0x1c>
    fcfe:	4a6c      	ldr	r2, [pc, #432]	; (feb0 <http_client_callback+0x23c>)
    fd00:	7813      	ldrb	r3, [r2, #0]
    fd02:	2120      	movs	r1, #32
    fd04:	430b      	orrs	r3, r1
    fd06:	7013      	strb	r3, [r2, #0]
    fd08:	e7c2      	b.n	fc90 <http_client_callback+0x1c>
		printf("http_client_callback_CHUNKED DATA: received response data size %u\r\n",
    fd0a:	6811      	ldr	r1, [r2, #0]
    fd0c:	486e      	ldr	r0, [pc, #440]	; (fec8 <http_client_callback+0x254>)
    fd0e:	4b6a      	ldr	r3, [pc, #424]	; (feb8 <http_client_callback+0x244>)
    fd10:	4798      	blx	r3
		if (firstCRC) {
    fd12:	4b6e      	ldr	r3, [pc, #440]	; (fecc <http_client_callback+0x258>)
    fd14:	781b      	ldrb	r3, [r3, #0]
    fd16:	2b00      	cmp	r3, #0
    fd18:	d05a      	beq.n	fdd0 <http_client_callback+0x15c>
			crc32_calculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
    fd1a:	6821      	ldr	r1, [r4, #0]
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;
    fd1c:	4d6c      	ldr	r5, [pc, #432]	; (fed0 <http_client_callback+0x25c>)
    fd1e:	2600      	movs	r6, #0
    fd20:	602e      	str	r6, [r5, #0]

	return crc32_recalculate(data, length, crc);
    fd22:	002a      	movs	r2, r5
    fd24:	6860      	ldr	r0, [r4, #4]
    fd26:	4b6b      	ldr	r3, [pc, #428]	; (fed4 <http_client_callback+0x260>)
    fd28:	4798      	blx	r3
			printf("First block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
    fd2a:	682a      	ldr	r2, [r5, #0]
    fd2c:	6821      	ldr	r1, [r4, #0]
    fd2e:	486a      	ldr	r0, [pc, #424]	; (fed8 <http_client_callback+0x264>)
    fd30:	4b61      	ldr	r3, [pc, #388]	; (feb8 <http_client_callback+0x244>)
    fd32:	4798      	blx	r3
			firstCRC = false;
    fd34:	4b65      	ldr	r3, [pc, #404]	; (fecc <http_client_callback+0x258>)
    fd36:	701e      	strb	r6, [r3, #0]
		if (http_buf_write_ptr + data->recv_chunked_data.length > 2048){
    fd38:	6822      	ldr	r2, [r4, #0]
    fd3a:	4b68      	ldr	r3, [pc, #416]	; (fedc <http_client_callback+0x268>)
    fd3c:	681d      	ldr	r5, [r3, #0]
    fd3e:	1951      	adds	r1, r2, r5
    fd40:	2380      	movs	r3, #128	; 0x80
    fd42:	011b      	lsls	r3, r3, #4
    fd44:	4299      	cmp	r1, r3
    fd46:	d94f      	bls.n	fde8 <http_client_callback+0x174>
			memcpy_ram2ram(http_buf + http_buf_write_ptr,data->recv_chunked_data.data,(2048-http_buf_write_ptr));
    fd48:	1b5e      	subs	r6, r3, r5
    fd4a:	4b65      	ldr	r3, [pc, #404]	; (fee0 <http_client_callback+0x26c>)
    fd4c:	4698      	mov	r8, r3
    fd4e:	18e8      	adds	r0, r5, r3
    fd50:	0032      	movs	r2, r6
    fd52:	6861      	ldr	r1, [r4, #4]
    fd54:	4f63      	ldr	r7, [pc, #396]	; (fee4 <http_client_callback+0x270>)
    fd56:	47b8      	blx	r7
    fd58:	4b63      	ldr	r3, [pc, #396]	; (fee8 <http_client_callback+0x274>)
    fd5a:	469c      	mov	ip, r3
    fd5c:	4465      	add	r5, ip
			memcpy_ram2ram(http_buf, data->recv_chunked_data.data + (2048-http_buf_write_ptr), data->recv_chunked_data.length-(2048-http_buf_write_ptr));
    fd5e:	6823      	ldr	r3, [r4, #0]
    fd60:	18ea      	adds	r2, r5, r3
    fd62:	6863      	ldr	r3, [r4, #4]
    fd64:	1999      	adds	r1, r3, r6
    fd66:	4640      	mov	r0, r8
    fd68:	47b8      	blx	r7
			http_buf_write_ptr = data->recv_chunked_data.length-(2048-http_buf_write_ptr);
    fd6a:	6823      	ldr	r3, [r4, #0]
    fd6c:	469c      	mov	ip, r3
    fd6e:	4465      	add	r5, ip
    fd70:	4b5a      	ldr	r3, [pc, #360]	; (fedc <http_client_callback+0x268>)
    fd72:	601d      	str	r5, [r3, #0]
		if  (http_buf_write_ptr > http_buf_read_ptr){
    fd74:	4b59      	ldr	r3, [pc, #356]	; (fedc <http_client_callback+0x268>)
    fd76:	681f      	ldr	r7, [r3, #0]
    fd78:	4b5c      	ldr	r3, [pc, #368]	; (feec <http_client_callback+0x278>)
    fd7a:	681b      	ldr	r3, [r3, #0]
    fd7c:	429f      	cmp	r7, r3
    fd7e:	d93e      	bls.n	fdfe <http_client_callback+0x18a>
			uint8 n = (http_buf_write_ptr-http_buf_read_ptr) / 256;
    fd80:	1aff      	subs	r7, r7, r3
			for (int i=0 ; i<n ; i++ ){
    fd82:	043f      	lsls	r7, r7, #16
    fd84:	0e3f      	lsrs	r7, r7, #24
    fd86:	2f00      	cmp	r7, #0
    fd88:	dd0d      	ble.n	fda6 <http_client_callback+0x132>
    fd8a:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
    fd8c:	4b58      	ldr	r3, [pc, #352]	; (fef0 <http_client_callback+0x27c>)
    fd8e:	4699      	mov	r9, r3
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fd90:	4e56      	ldr	r6, [pc, #344]	; (feec <http_client_callback+0x278>)
				write_spi_flash_frm_buf(256);
    fd92:	2080      	movs	r0, #128	; 0x80
    fd94:	0040      	lsls	r0, r0, #1
    fd96:	47c8      	blx	r9
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fd98:	6833      	ldr	r3, [r6, #0]
    fd9a:	3301      	adds	r3, #1
    fd9c:	33ff      	adds	r3, #255	; 0xff
    fd9e:	6033      	str	r3, [r6, #0]
			for (int i=0 ; i<n ; i++ ){
    fda0:	3501      	adds	r5, #1
    fda2:	42bd      	cmp	r5, r7
    fda4:	d1f5      	bne.n	fd92 <http_client_callback+0x11e>
		if (data->recv_chunked_data.is_complete) {
    fda6:	7a23      	ldrb	r3, [r4, #8]
    fda8:	2b00      	cmp	r3, #0
    fdaa:	d100      	bne.n	fdae <http_client_callback+0x13a>
    fdac:	e770      	b.n	fc90 <http_client_callback+0x1c>
	down_state |= mask;
    fdae:	4a40      	ldr	r2, [pc, #256]	; (feb0 <http_client_callback+0x23c>)
    fdb0:	7813      	ldrb	r3, [r2, #0]
    fdb2:	2110      	movs	r1, #16
    fdb4:	430b      	orrs	r3, r1
    fdb6:	7013      	strb	r3, [r2, #0]
			if  (http_buf_write_ptr < http_buf_read_ptr){
    fdb8:	4b48      	ldr	r3, [pc, #288]	; (fedc <http_client_callback+0x268>)
    fdba:	6818      	ldr	r0, [r3, #0]
    fdbc:	4b4b      	ldr	r3, [pc, #300]	; (feec <http_client_callback+0x278>)
    fdbe:	681b      	ldr	r3, [r3, #0]
    fdc0:	4298      	cmp	r0, r3
    fdc2:	d349      	bcc.n	fe58 <http_client_callback+0x1e4>
			else if(http_buf_write_ptr > http_buf_read_ptr){
    fdc4:	d800      	bhi.n	fdc8 <http_client_callback+0x154>
    fdc6:	e763      	b.n	fc90 <http_client_callback+0x1c>
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
    fdc8:	1ac0      	subs	r0, r0, r3
    fdca:	4b49      	ldr	r3, [pc, #292]	; (fef0 <http_client_callback+0x27c>)
    fdcc:	4798      	blx	r3
    fdce:	e75f      	b.n	fc90 <http_client_callback+0x1c>
			crc32_recalculate(data->recv_chunked_data.data, (unsigned int)data->recv_chunked_data.length, &crcChecker);
    fdd0:	4d3f      	ldr	r5, [pc, #252]	; (fed0 <http_client_callback+0x25c>)
    fdd2:	002a      	movs	r2, r5
    fdd4:	6821      	ldr	r1, [r4, #0]
    fdd6:	6860      	ldr	r0, [r4, #4]
    fdd8:	4b3e      	ldr	r3, [pc, #248]	; (fed4 <http_client_callback+0x260>)
    fdda:	4798      	blx	r3
			printf("Block length %d CRC: %u\r\n", (unsigned int)data->recv_chunked_data.length, crcChecker);
    fddc:	682a      	ldr	r2, [r5, #0]
    fdde:	6821      	ldr	r1, [r4, #0]
    fde0:	4844      	ldr	r0, [pc, #272]	; (fef4 <http_client_callback+0x280>)
    fde2:	4b35      	ldr	r3, [pc, #212]	; (feb8 <http_client_callback+0x244>)
    fde4:	4798      	blx	r3
    fde6:	e7a7      	b.n	fd38 <http_client_callback+0xc4>
			memcpy_ram2ram(http_buf + http_buf_write_ptr, data->recv_chunked_data.data, data->recv_chunked_data.length);
    fde8:	483d      	ldr	r0, [pc, #244]	; (fee0 <http_client_callback+0x26c>)
    fdea:	1828      	adds	r0, r5, r0
    fdec:	6861      	ldr	r1, [r4, #4]
    fdee:	4b3d      	ldr	r3, [pc, #244]	; (fee4 <http_client_callback+0x270>)
    fdf0:	4798      	blx	r3
			http_buf_write_ptr = http_buf_write_ptr + data->recv_chunked_data.length;
    fdf2:	6823      	ldr	r3, [r4, #0]
    fdf4:	469c      	mov	ip, r3
    fdf6:	4465      	add	r5, ip
    fdf8:	4b38      	ldr	r3, [pc, #224]	; (fedc <http_client_callback+0x268>)
    fdfa:	601d      	str	r5, [r3, #0]
    fdfc:	e7ba      	b.n	fd74 <http_client_callback+0x100>
		else if (http_buf_write_ptr < http_buf_read_ptr){
    fdfe:	429f      	cmp	r7, r3
    fe00:	d2d1      	bcs.n	fda6 <http_client_callback+0x132>
			uint8 n = (2048 - http_buf_read_ptr) / 256;
    fe02:	2780      	movs	r7, #128	; 0x80
    fe04:	013f      	lsls	r7, r7, #4
    fe06:	1aff      	subs	r7, r7, r3
			for (int i=0 ; i<n ; i++ ){
    fe08:	043f      	lsls	r7, r7, #16
    fe0a:	0e3b      	lsrs	r3, r7, #24
    fe0c:	4698      	mov	r8, r3
    fe0e:	2b00      	cmp	r3, #0
    fe10:	dd0c      	ble.n	fe2c <http_client_callback+0x1b8>
    fe12:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
    fe14:	4e36      	ldr	r6, [pc, #216]	; (fef0 <http_client_callback+0x27c>)
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fe16:	4f35      	ldr	r7, [pc, #212]	; (feec <http_client_callback+0x278>)
				write_spi_flash_frm_buf(256);
    fe18:	2080      	movs	r0, #128	; 0x80
    fe1a:	0040      	lsls	r0, r0, #1
    fe1c:	47b0      	blx	r6
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fe1e:	683b      	ldr	r3, [r7, #0]
    fe20:	3301      	adds	r3, #1
    fe22:	33ff      	adds	r3, #255	; 0xff
    fe24:	603b      	str	r3, [r7, #0]
			for (int i=0 ; i<n ; i++ ){
    fe26:	3501      	adds	r5, #1
    fe28:	45a8      	cmp	r8, r5
    fe2a:	d1f5      	bne.n	fe18 <http_client_callback+0x1a4>
			http_buf_read_ptr = 0;
    fe2c:	2200      	movs	r2, #0
    fe2e:	4b2f      	ldr	r3, [pc, #188]	; (feec <http_client_callback+0x278>)
    fe30:	601a      	str	r2, [r3, #0]
			for (int i=0 ; i<n ; i++ ){
    fe32:	4b2a      	ldr	r3, [pc, #168]	; (fedc <http_client_callback+0x268>)
    fe34:	785b      	ldrb	r3, [r3, #1]
    fe36:	4698      	mov	r8, r3
    fe38:	2b00      	cmp	r3, #0
    fe3a:	ddb4      	ble.n	fda6 <http_client_callback+0x132>
    fe3c:	2500      	movs	r5, #0
				write_spi_flash_frm_buf(256);
    fe3e:	4e2c      	ldr	r6, [pc, #176]	; (fef0 <http_client_callback+0x27c>)
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fe40:	4f2a      	ldr	r7, [pc, #168]	; (feec <http_client_callback+0x278>)
				write_spi_flash_frm_buf(256);
    fe42:	2080      	movs	r0, #128	; 0x80
    fe44:	0040      	lsls	r0, r0, #1
    fe46:	47b0      	blx	r6
				http_buf_read_ptr = http_buf_read_ptr + 256;
    fe48:	683b      	ldr	r3, [r7, #0]
    fe4a:	3301      	adds	r3, #1
    fe4c:	33ff      	adds	r3, #255	; 0xff
    fe4e:	603b      	str	r3, [r7, #0]
			for (int i=0 ; i<n ; i++ ){
    fe50:	3501      	adds	r5, #1
    fe52:	4545      	cmp	r5, r8
    fe54:	d1f5      	bne.n	fe42 <http_client_callback+0x1ce>
    fe56:	e7a6      	b.n	fda6 <http_client_callback+0x132>
				http_buf_read_ptr =0;
    fe58:	2200      	movs	r2, #0
    fe5a:	4b24      	ldr	r3, [pc, #144]	; (feec <http_client_callback+0x278>)
    fe5c:	601a      	str	r2, [r3, #0]
				write_spi_flash_frm_buf(http_buf_write_ptr-http_buf_read_ptr);
    fe5e:	4b24      	ldr	r3, [pc, #144]	; (fef0 <http_client_callback+0x27c>)
    fe60:	4798      	blx	r3
    fe62:	e715      	b.n	fc90 <http_client_callback+0x1c>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    fe64:	6811      	ldr	r1, [r2, #0]
    fe66:	4824      	ldr	r0, [pc, #144]	; (fef8 <http_client_callback+0x284>)
    fe68:	4b13      	ldr	r3, [pc, #76]	; (feb8 <http_client_callback+0x244>)
    fe6a:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    fe6c:	6823      	ldr	r3, [r4, #0]
    fe6e:	330b      	adds	r3, #11
    fe70:	d000      	beq.n	fe74 <http_client_callback+0x200>
    fe72:	e70d      	b.n	fc90 <http_client_callback+0x1c>
	return ((down_state & mask) != 0);
    fe74:	4b0e      	ldr	r3, [pc, #56]	; (feb0 <http_client_callback+0x23c>)
    fe76:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    fe78:	071a      	lsls	r2, r3, #28
    fe7a:	d406      	bmi.n	fe8a <http_client_callback+0x216>
	return ((down_state & mask) != 0);
    fe7c:	4b0c      	ldr	r3, [pc, #48]	; (feb0 <http_client_callback+0x23c>)
    fe7e:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    fe80:	075a      	lsls	r2, r3, #29
    fe82:	d407      	bmi.n	fe94 <http_client_callback+0x220>
			start_download();
    fe84:	4b1d      	ldr	r3, [pc, #116]	; (fefc <http_client_callback+0x288>)
    fe86:	4798      	blx	r3
    fe88:	e702      	b.n	fc90 <http_client_callback+0x1c>
	down_state &= ~mask;
    fe8a:	2208      	movs	r2, #8
    fe8c:	4393      	bics	r3, r2
    fe8e:	4a08      	ldr	r2, [pc, #32]	; (feb0 <http_client_callback+0x23c>)
    fe90:	7013      	strb	r3, [r2, #0]
    fe92:	e7f3      	b.n	fe7c <http_client_callback+0x208>
    fe94:	2204      	movs	r2, #4
    fe96:	4393      	bics	r3, r2
    fe98:	4a05      	ldr	r2, [pc, #20]	; (feb0 <http_client_callback+0x23c>)
    fe9a:	7013      	strb	r3, [r2, #0]
    fe9c:	e7f2      	b.n	fe84 <http_client_callback+0x210>
    fe9e:	46c0      	nop			; (mov r8, r8)
    fea0:	00014158 	.word	0x00014158
    fea4:	0001416c 	.word	0x0001416c
    fea8:	00011acd 	.word	0x00011acd
    feac:	000141a4 	.word	0x000141a4
    feb0:	2000028c 	.word	0x2000028c
    feb4:	000141d0 	.word	0x000141d0
    feb8:	000119b1 	.word	0x000119b1
    febc:	0001420c 	.word	0x0001420c
    fec0:	20000fb4 	.word	0x20000fb4
    fec4:	0001422c 	.word	0x0001422c
    fec8:	0001423c 	.word	0x0001423c
    fecc:	2000000d 	.word	0x2000000d
    fed0:	20000fb0 	.word	0x20000fb0
    fed4:	0000b315 	.word	0x0000b315
    fed8:	00014280 	.word	0x00014280
    fedc:	20000294 	.word	0x20000294
    fee0:	2000062c 	.word	0x2000062c
    fee4:	00011819 	.word	0x00011819
    fee8:	fffff800 	.word	0xfffff800
    feec:	20000290 	.word	0x20000290
    fef0:	0000fc09 	.word	0x0000fc09
    fef4:	000142a0 	.word	0x000142a0
    fef8:	000142bc 	.word	0x000142bc
    fefc:	0000f785 	.word	0x0000f785

0000ff00 <main>:
	//flash_addr = 0x00000;

}

int main (void)
{
    ff00:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff02:	46d6      	mov	lr, sl
    ff04:	464f      	mov	r7, r9
    ff06:	4646      	mov	r6, r8
    ff08:	b5c0      	push	{r6, r7, lr}
    ff0a:	b0ac      	sub	sp, #176	; 0xb0
	int8_t ret;
	
	char topic[strlen(MAIN_CHAT_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];
	
	
	system_init();
    ff0c:	4bcc      	ldr	r3, [pc, #816]	; (10240 <main+0x340>)
    ff0e:	4798      	blx	r3
	down_state = NOT_READY;
    ff10:	2400      	movs	r4, #0
    ff12:	2600      	movs	r6, #0
    ff14:	4bcb      	ldr	r3, [pc, #812]	; (10244 <main+0x344>)
    ff16:	701c      	strb	r4, [r3, #0]
	cpu_irq_enable();
    ff18:	2501      	movs	r5, #1
    ff1a:	4bcb      	ldr	r3, [pc, #812]	; (10248 <main+0x348>)
    ff1c:	701d      	strb	r5, [r3, #0]
    ff1e:	f3bf 8f5f 	dmb	sy
    ff22:	b662      	cpsie	i
	init_state();
	system_interrupt_enable_global();
	configure_port_pins();
    ff24:	4bc9      	ldr	r3, [pc, #804]	; (1024c <main+0x34c>)
    ff26:	4798      	blx	r3
	delay_init();
    ff28:	4bc9      	ldr	r3, [pc, #804]	; (10250 <main+0x350>)
    ff2a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    ff2c:	aa14      	add	r2, sp, #80	; 0x50
    ff2e:	2380      	movs	r3, #128	; 0x80
    ff30:	05db      	lsls	r3, r3, #23
    ff32:	9314      	str	r3, [sp, #80]	; 0x50
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    ff34:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    ff36:	23ff      	movs	r3, #255	; 0xff
    ff38:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    ff3a:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    ff3c:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    ff3e:	3bdb      	subs	r3, #219	; 0xdb
    ff40:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    ff42:	3301      	adds	r3, #1
    ff44:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    ff46:	3301      	adds	r3, #1
    ff48:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    ff4a:	3301      	adds	r3, #1
    ff4c:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    ff4e:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    ff50:	2388      	movs	r3, #136	; 0x88
    ff52:	035b      	lsls	r3, r3, #13
    ff54:	60d3      	str	r3, [r2, #12]
	config->run_in_standby   = false;
    ff56:	232c      	movs	r3, #44	; 0x2c
    ff58:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    ff5a:	3301      	adds	r3, #1
    ff5c:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    ff5e:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    ff60:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    ff62:	2300      	movs	r3, #0
    ff64:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    ff66:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    ff68:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    ff6a:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    ff6c:	2313      	movs	r3, #19
    ff6e:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    ff70:	7756      	strb	r6, [r2, #29]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    ff72:	3b14      	subs	r3, #20
    ff74:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    ff76:	49b7      	ldr	r1, [pc, #732]	; (10254 <main+0x354>)
    ff78:	6351      	str	r1, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    ff7a:	49b7      	ldr	r1, [pc, #732]	; (10258 <main+0x358>)
    ff7c:	6391      	str	r1, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    ff7e:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    ff80:	23e1      	movs	r3, #225	; 0xe1
    ff82:	025b      	lsls	r3, r3, #9
    ff84:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    ff86:	4cb5      	ldr	r4, [pc, #724]	; (1025c <main+0x35c>)
    ff88:	4bb5      	ldr	r3, [pc, #724]	; (10260 <main+0x360>)
    ff8a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    ff8c:	49b5      	ldr	r1, [pc, #724]	; (10264 <main+0x364>)
    ff8e:	4bb6      	ldr	r3, [pc, #728]	; (10268 <main+0x368>)
    ff90:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    ff92:	49b6      	ldr	r1, [pc, #728]	; (1026c <main+0x36c>)
    ff94:	4bb6      	ldr	r3, [pc, #728]	; (10270 <main+0x370>)
    ff96:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    ff98:	49b6      	ldr	r1, [pc, #728]	; (10274 <main+0x374>)
    ff9a:	0020      	movs	r0, r4
    ff9c:	4bb6      	ldr	r3, [pc, #728]	; (10278 <main+0x378>)
    ff9e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    ffa0:	4fb6      	ldr	r7, [pc, #728]	; (1027c <main+0x37c>)
    ffa2:	683b      	ldr	r3, [r7, #0]
    ffa4:	6898      	ldr	r0, [r3, #8]
    ffa6:	2100      	movs	r1, #0
    ffa8:	4eb5      	ldr	r6, [pc, #724]	; (10280 <main+0x380>)
    ffaa:	47b0      	blx	r6
	setbuf(stdin, NULL);
    ffac:	683b      	ldr	r3, [r7, #0]
    ffae:	6858      	ldr	r0, [r3, #4]
    ffb0:	2100      	movs	r1, #0
    ffb2:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    ffb4:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    ffb6:	0030      	movs	r0, r6
    ffb8:	4bb2      	ldr	r3, [pc, #712]	; (10284 <main+0x384>)
    ffba:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ffbc:	231f      	movs	r3, #31
    ffbe:	4018      	ands	r0, r3
    ffc0:	4085      	lsls	r5, r0
    ffc2:	4bb1      	ldr	r3, [pc, #708]	; (10288 <main+0x388>)
    ffc4:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    ffc6:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    ffc8:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    ffca:	2b00      	cmp	r3, #0
    ffcc:	d1fc      	bne.n	ffc8 <main+0xc8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    ffce:	6833      	ldr	r3, [r6, #0]
    ffd0:	2202      	movs	r2, #2
    ffd2:	4313      	orrs	r3, r2
    ffd4:	6033      	str	r3, [r6, #0]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    ffd6:	ac14      	add	r4, sp, #80	; 0x50
    ffd8:	2500      	movs	r5, #0
    ffda:	7025      	strb	r5, [r4, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    ffdc:	4bab      	ldr	r3, [pc, #684]	; (1028c <main+0x38c>)
    ffde:	685b      	ldr	r3, [r3, #4]
    ffe0:	06db      	lsls	r3, r3, #27
    ffe2:	0f1b      	lsrs	r3, r3, #28
    ffe4:	70a3      	strb	r3, [r4, #2]
	config->disable_cache     = false;
    ffe6:	70e5      	strb	r5, [r4, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    ffe8:	7125      	strb	r5, [r4, #4]
	config.manual_page_write = false;
    ffea:	7065      	strb	r5, [r4, #1]
	nvm_set_config(&config);
    ffec:	0020      	movs	r0, r4
    ffee:	4ba8      	ldr	r3, [pc, #672]	; (10290 <main+0x390>)
    fff0:	4798      	blx	r3
	config->mode             = SPI_MODE_MASTER;
    fff2:	2601      	movs	r6, #1
    fff4:	7026      	strb	r6, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    fff6:	6065      	str	r5, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    fff8:	60a5      	str	r5, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    fffa:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
    fffc:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
    fffe:	74a6      	strb	r6, [r4, #18]
	config->select_slave_low_detect_enable= true;
   10000:	74e6      	strb	r6, [r4, #19]
	config->master_slave_select_enable= false;
   10002:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
   10004:	2324      	movs	r3, #36	; 0x24
   10006:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   10008:	220c      	movs	r2, #12
   1000a:	2100      	movs	r1, #0
   1000c:	a81a      	add	r0, sp, #104	; 0x68
   1000e:	4ba1      	ldr	r3, [pc, #644]	; (10294 <main+0x394>)
   10010:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
   10012:	4ba1      	ldr	r3, [pc, #644]	; (10298 <main+0x398>)
   10014:	61a3      	str	r3, [r4, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
   10016:	2380      	movs	r3, #128	; 0x80
   10018:	025b      	lsls	r3, r3, #9
   1001a:	60e3      	str	r3, [r4, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
   1001c:	4b9f      	ldr	r3, [pc, #636]	; (1029c <main+0x39c>)
   1001e:	62a3      	str	r3, [r4, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
   10020:	2301      	movs	r3, #1
   10022:	425b      	negs	r3, r3
   10024:	62e3      	str	r3, [r4, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
   10026:	4b9e      	ldr	r3, [pc, #632]	; (102a0 <main+0x3a0>)
   10028:	6323      	str	r3, [r4, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
   1002a:	4b9e      	ldr	r3, [pc, #632]	; (102a4 <main+0x3a4>)
   1002c:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
   1002e:	4d9e      	ldr	r5, [pc, #632]	; (102a8 <main+0x3a8>)
   10030:	0022      	movs	r2, r4
   10032:	499e      	ldr	r1, [pc, #632]	; (102ac <main+0x3ac>)
   10034:	0028      	movs	r0, r5
   10036:	4b9e      	ldr	r3, [pc, #632]	; (102b0 <main+0x3b0>)
   10038:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
   1003a:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1003c:	0020      	movs	r0, r4
   1003e:	4b91      	ldr	r3, [pc, #580]	; (10284 <main+0x384>)
   10040:	4798      	blx	r3
   10042:	231f      	movs	r3, #31
   10044:	4018      	ands	r0, r3
   10046:	4086      	lsls	r6, r0
   10048:	4b8f      	ldr	r3, [pc, #572]	; (10288 <main+0x388>)
   1004a:	601e      	str	r6, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1004c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
   1004e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
   10050:	2b00      	cmp	r3, #0
   10052:	d1fc      	bne.n	1004e <main+0x14e>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   10054:	6823      	ldr	r3, [r4, #0]
   10056:	2202      	movs	r2, #2
   10058:	4313      	orrs	r3, r2
   1005a:	6023      	str	r3, [r4, #0]
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
   1005c:	4c95      	ldr	r4, [pc, #596]	; (102b4 <main+0x3b4>)
   1005e:	2304      	movs	r3, #4
   10060:	7123      	strb	r3, [r4, #4]
	module->cs_pin = config->cs_pin;
   10062:	3303      	adds	r3, #3
   10064:	7163      	strb	r3, [r4, #5]
	module->spi = spi_module;
   10066:	4b90      	ldr	r3, [pc, #576]	; (102a8 <main+0x3a8>)
   10068:	6023      	str	r3, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1006a:	a904      	add	r1, sp, #16
   1006c:	2301      	movs	r3, #1
   1006e:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
   10070:	2200      	movs	r2, #0
   10072:	708a      	strb	r2, [r1, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
   10074:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(module->cs_pin, &port_config);
   10076:	2007      	movs	r0, #7
   10078:	4b8f      	ldr	r3, [pc, #572]	; (102b8 <main+0x3b8>)
   1007a:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
   1007c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
   1007e:	09d1      	lsrs	r1, r2, #7
		return NULL;
   10080:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   10082:	2900      	cmp	r1, #0
   10084:	d104      	bne.n	10090 <main+0x190>
		return &(ports[port_index]->Group[group_index]);
   10086:	0953      	lsrs	r3, r2, #5
   10088:	01db      	lsls	r3, r3, #7
   1008a:	498c      	ldr	r1, [pc, #560]	; (102bc <main+0x3bc>)
   1008c:	468c      	mov	ip, r1
   1008e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   10090:	211f      	movs	r1, #31
   10092:	4011      	ands	r1, r2
   10094:	2201      	movs	r2, #1
   10096:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
   10098:	619a      	str	r2, [r3, #24]
	sw_timer_get_config_defaults(&swt_conf);
   1009a:	ac14      	add	r4, sp, #80	; 0x50
   1009c:	0020      	movs	r0, r4
   1009e:	4b88      	ldr	r3, [pc, #544]	; (102c0 <main+0x3c0>)
   100a0:	4798      	blx	r3
	sw_timer_init(&swt_module_inst_mqtt, &swt_conf);
   100a2:	4d88      	ldr	r5, [pc, #544]	; (102c4 <main+0x3c4>)
   100a4:	0021      	movs	r1, r4
   100a6:	0028      	movs	r0, r5
   100a8:	4b87      	ldr	r3, [pc, #540]	; (102c8 <main+0x3c8>)
   100aa:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst_mqtt);
   100ac:	0028      	movs	r0, r5
   100ae:	4b87      	ldr	r3, [pc, #540]	; (102cc <main+0x3cc>)
   100b0:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
   100b2:	0020      	movs	r0, r4
   100b4:	4b86      	ldr	r3, [pc, #536]	; (102d0 <main+0x3d0>)
   100b6:	4798      	blx	r3
	mqtt_conf.timer_inst = &swt_module_inst_mqtt;
   100b8:	6065      	str	r5, [r4, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
   100ba:	4b86      	ldr	r3, [pc, #536]	; (102d4 <main+0x3d4>)
   100bc:	60e3      	str	r3, [r4, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   100be:	2380      	movs	r3, #128	; 0x80
   100c0:	6123      	str	r3, [r4, #16]
    mqtt_conf.port = MQTT_PORT;
   100c2:	4b85      	ldr	r3, [pc, #532]	; (102d8 <main+0x3d8>)
   100c4:	8023      	strh	r3, [r4, #0]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   100c6:	0021      	movs	r1, r4
   100c8:	4884      	ldr	r0, [pc, #528]	; (102dc <main+0x3dc>)
   100ca:	4b85      	ldr	r3, [pc, #532]	; (102e0 <main+0x3e0>)
   100cc:	4798      	blx	r3
   100ce:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   100d0:	db27      	blt.n	10122 <main+0x222>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   100d2:	4984      	ldr	r1, [pc, #528]	; (102e4 <main+0x3e4>)
   100d4:	4881      	ldr	r0, [pc, #516]	; (102dc <main+0x3dc>)
   100d6:	4b84      	ldr	r3, [pc, #528]	; (102e8 <main+0x3e8>)
   100d8:	4798      	blx	r3
   100da:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   100dc:	db25      	blt.n	1012a <main+0x22a>
	configure_nvm();
	configure_spi_flash();
	configure_timer();
	
	configure_mqtt();
	nm_bsp_init();
   100de:	4b83      	ldr	r3, [pc, #524]	; (102ec <main+0x3ec>)
   100e0:	4798      	blx	r3
	printf("User : %s\r\n", mqtt_user);
   100e2:	4d83      	ldr	r5, [pc, #524]	; (102f0 <main+0x3f0>)
   100e4:	0029      	movs	r1, r5
   100e6:	4883      	ldr	r0, [pc, #524]	; (102f4 <main+0x3f4>)
   100e8:	4c83      	ldr	r4, [pc, #524]	; (102f8 <main+0x3f8>)
   100ea:	47a0      	blx	r4
	printf("Password : %s\r\n", mqtt_user);
   100ec:	0029      	movs	r1, r5
   100ee:	4883      	ldr	r0, [pc, #524]	; (102fc <main+0x3fc>)
   100f0:	47a0      	blx	r4
	sprintf(topic, "%s", MAIN_CHAT_TOPIC);
   100f2:	a914      	add	r1, sp, #80	; 0x50
   100f4:	4b82      	ldr	r3, [pc, #520]	; (10300 <main+0x400>)
   100f6:	681a      	ldr	r2, [r3, #0]
   100f8:	9214      	str	r2, [sp, #80]	; 0x50
   100fa:	791b      	ldrb	r3, [r3, #4]
   100fc:	710b      	strb	r3, [r1, #4]
	printf("Topic : %s\r\n", topic);
   100fe:	4881      	ldr	r0, [pc, #516]	; (10304 <main+0x404>)
   10100:	47a0      	blx	r4

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   10102:	2218      	movs	r2, #24
   10104:	2100      	movs	r1, #0
   10106:	a826      	add	r0, sp, #152	; 0x98
   10108:	4b62      	ldr	r3, [pc, #392]	; (10294 <main+0x394>)
   1010a:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
   1010c:	4b7e      	ldr	r3, [pc, #504]	; (10308 <main+0x408>)
   1010e:	9326      	str	r3, [sp, #152]	; 0x98
	ret = m2m_wifi_init(&param);
   10110:	a826      	add	r0, sp, #152	; 0x98
   10112:	4b7e      	ldr	r3, [pc, #504]	; (1030c <main+0x40c>)
   10114:	4798      	blx	r3
   10116:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
   10118:	d00b      	beq.n	10132 <main+0x232>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
   1011a:	487d      	ldr	r0, [pc, #500]	; (10310 <main+0x410>)
   1011c:	4b76      	ldr	r3, [pc, #472]	; (102f8 <main+0x3f8>)
   1011e:	4798      	blx	r3
   10120:	e7fe      	b.n	10120 <main+0x220>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
   10122:	487c      	ldr	r0, [pc, #496]	; (10314 <main+0x414>)
   10124:	4b74      	ldr	r3, [pc, #464]	; (102f8 <main+0x3f8>)
   10126:	4798      	blx	r3
   10128:	e7fe      	b.n	10128 <main+0x228>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
   1012a:	487b      	ldr	r0, [pc, #492]	; (10318 <main+0x418>)
   1012c:	4b72      	ldr	r3, [pc, #456]	; (102f8 <main+0x3f8>)
   1012e:	4798      	blx	r3
   10130:	e7fe      	b.n	10130 <main+0x230>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
   10132:	4b7a      	ldr	r3, [pc, #488]	; (1031c <main+0x41c>)
   10134:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
   10136:	497a      	ldr	r1, [pc, #488]	; (10320 <main+0x420>)
   10138:	487a      	ldr	r0, [pc, #488]	; (10324 <main+0x424>)
   1013a:	4b7b      	ldr	r3, [pc, #492]	; (10328 <main+0x428>)
   1013c:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   1013e:	23ff      	movs	r3, #255	; 0xff
   10140:	9300      	str	r3, [sp, #0]
   10142:	4b7a      	ldr	r3, [pc, #488]	; (1032c <main+0x42c>)
   10144:	2202      	movs	r2, #2
   10146:	210b      	movs	r1, #11
   10148:	4879      	ldr	r0, [pc, #484]	; (10330 <main+0x430>)
   1014a:	4c7a      	ldr	r4, [pc, #488]	; (10334 <main+0x434>)
   1014c:	47a0      	blx	r4
	MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
	/* ~~~~~~~~~~~~~End MQTT init~~~~~~~~~~~~~~ */
	
	write_firmware = false; 
   1014e:	2200      	movs	r2, #0
   10150:	4b79      	ldr	r3, [pc, #484]	; (10338 <main+0x438>)
   10152:	701a      	strb	r2, [r3, #0]
	
	while (1) {
		/* Handle pending events from network controller. */
		sint8 wifiStatus = m2m_wifi_handle_events(NULL);
   10154:	4f79      	ldr	r7, [pc, #484]	; (1033c <main+0x43c>)
		/* Try to read user input from USART. */
		usart_read_job(&usart_instance, &uart_ch_buffer);
   10156:	4e7a      	ldr	r6, [pc, #488]	; (10340 <main+0x440>)
   10158:	4b40      	ldr	r3, [pc, #256]	; (1025c <main+0x35c>)
   1015a:	4699      	mov	r9, r3
   1015c:	e007      	b.n	1016e <main+0x26e>
			sprintf(pub_text, "%d", buttonLevel);
			mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 1, 2, 0);
		}

		// reply with version number
		if(reply_firmware_ver)
   1015e:	4b79      	ldr	r3, [pc, #484]	; (10344 <main+0x444>)
   10160:	781b      	ldrb	r3, [r3, #0]
   10162:	2b00      	cmp	r3, #0
   10164:	d12a      	bne.n	101bc <main+0x2bc>
		{
			sprintf(pub_text, "%s", FIRMWARE_VERSION);
			mqtt_publish(&mqtt_inst, VERSIONREADOUT_TOPIC, pub_text, strlen(FIRMWARE_VERSION), 2, 0);
			reply_firmware_ver=false;
		}
		if (write_firmware) {
   10166:	4b74      	ldr	r3, [pc, #464]	; (10338 <main+0x438>)
   10168:	781b      	ldrb	r3, [r3, #0]
   1016a:	2b00      	cmp	r3, #0
   1016c:	d138      	bne.n	101e0 <main+0x2e0>
		sint8 wifiStatus = m2m_wifi_handle_events(NULL);
   1016e:	2000      	movs	r0, #0
   10170:	47b8      	blx	r7
		usart_read_job(&usart_instance, &uart_ch_buffer);
   10172:	0031      	movs	r1, r6
   10174:	4648      	mov	r0, r9
   10176:	4b74      	ldr	r3, [pc, #464]	; (10348 <main+0x448>)
   10178:	4798      	blx	r3
		sw_timer_task(&swt_module_inst_mqtt);
   1017a:	4852      	ldr	r0, [pc, #328]	; (102c4 <main+0x3c4>)
   1017c:	4b73      	ldr	r3, [pc, #460]	; (1034c <main+0x44c>)
   1017e:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
   10180:	4b73      	ldr	r3, [pc, #460]	; (10350 <main+0x450>)
   10182:	6a1b      	ldr	r3, [r3, #32]
   10184:	071b      	lsls	r3, r3, #28
   10186:	0fdb      	lsrs	r3, r3, #31
		if( port_pin_get_input_level(B1) != buttonLevel )
   10188:	4a72      	ldr	r2, [pc, #456]	; (10354 <main+0x454>)
   1018a:	7812      	ldrb	r2, [r2, #0]
   1018c:	4293      	cmp	r3, r2
   1018e:	d0e6      	beq.n	1015e <main+0x25e>
   10190:	4b6f      	ldr	r3, [pc, #444]	; (10350 <main+0x450>)
   10192:	6a1a      	ldr	r2, [r3, #32]
   10194:	0712      	lsls	r2, r2, #28
   10196:	0fd2      	lsrs	r2, r2, #31
			buttonLevel = port_pin_get_input_level(B1);
   10198:	4b6e      	ldr	r3, [pc, #440]	; (10354 <main+0x454>)
   1019a:	701a      	strb	r2, [r3, #0]
			sprintf(pub_text, "%d", buttonLevel);
   1019c:	4c6e      	ldr	r4, [pc, #440]	; (10358 <main+0x458>)
   1019e:	496f      	ldr	r1, [pc, #444]	; (1035c <main+0x45c>)
   101a0:	0020      	movs	r0, r4
   101a2:	4b6f      	ldr	r3, [pc, #444]	; (10360 <main+0x460>)
   101a4:	4798      	blx	r3
			mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 1, 2, 0);
   101a6:	2300      	movs	r3, #0
   101a8:	9301      	str	r3, [sp, #4]
   101aa:	3302      	adds	r3, #2
   101ac:	9300      	str	r3, [sp, #0]
   101ae:	3b01      	subs	r3, #1
   101b0:	0022      	movs	r2, r4
   101b2:	496c      	ldr	r1, [pc, #432]	; (10364 <main+0x464>)
   101b4:	4849      	ldr	r0, [pc, #292]	; (102dc <main+0x3dc>)
   101b6:	4c6c      	ldr	r4, [pc, #432]	; (10368 <main+0x468>)
   101b8:	47a0      	blx	r4
   101ba:	e7d0      	b.n	1015e <main+0x25e>
			sprintf(pub_text, "%s", FIRMWARE_VERSION);
   101bc:	4a66      	ldr	r2, [pc, #408]	; (10358 <main+0x458>)
   101be:	4b6b      	ldr	r3, [pc, #428]	; (1036c <main+0x46c>)
   101c0:	6819      	ldr	r1, [r3, #0]
   101c2:	6011      	str	r1, [r2, #0]
   101c4:	889b      	ldrh	r3, [r3, #4]
   101c6:	8093      	strh	r3, [r2, #4]
			mqtt_publish(&mqtt_inst, VERSIONREADOUT_TOPIC, pub_text, strlen(FIRMWARE_VERSION), 2, 0);
   101c8:	2400      	movs	r4, #0
   101ca:	9401      	str	r4, [sp, #4]
   101cc:	2302      	movs	r3, #2
   101ce:	9300      	str	r3, [sp, #0]
   101d0:	3303      	adds	r3, #3
   101d2:	4967      	ldr	r1, [pc, #412]	; (10370 <main+0x470>)
   101d4:	4841      	ldr	r0, [pc, #260]	; (102dc <main+0x3dc>)
   101d6:	4d64      	ldr	r5, [pc, #400]	; (10368 <main+0x468>)
   101d8:	47a8      	blx	r5
			reply_firmware_ver=false;
   101da:	4b5a      	ldr	r3, [pc, #360]	; (10344 <main+0x444>)
   101dc:	701c      	strb	r4, [r3, #0]
   101de:	e7c2      	b.n	10166 <main+0x266>
			socketDeinit();
   101e0:	4b64      	ldr	r3, [pc, #400]	; (10374 <main+0x474>)
   101e2:	4798      	blx	r3
			mqtt_deinit(&mqtt_inst);
   101e4:	483d      	ldr	r0, [pc, #244]	; (102dc <main+0x3dc>)
   101e6:	4b64      	ldr	r3, [pc, #400]	; (10378 <main+0x478>)
   101e8:	4798      	blx	r3
			ret = m2m_wifi_deinit(&param);
   101ea:	a826      	add	r0, sp, #152	; 0x98
   101ec:	4b63      	ldr	r3, [pc, #396]	; (1037c <main+0x47c>)
   101ee:	4798      	blx	r3
   101f0:	1e01      	subs	r1, r0, #0
			if (M2M_SUCCESS != ret) {
   101f2:	d003      	beq.n	101fc <main+0x2fc>
				printf("main: m2m_wifi_deinit call error!(%d)\r\n", ret);
   101f4:	4862      	ldr	r0, [pc, #392]	; (10380 <main+0x480>)
   101f6:	4b40      	ldr	r3, [pc, #256]	; (102f8 <main+0x3f8>)
   101f8:	4798      	blx	r3
   101fa:	e7fe      	b.n	101fa <main+0x2fa>
	http_client_get_config_defaults(&httpc_conf);
   101fc:	a804      	add	r0, sp, #16
   101fe:	4b61      	ldr	r3, [pc, #388]	; (10384 <main+0x484>)
   10200:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   10202:	2380      	movs	r3, #128	; 0x80
   10204:	00db      	lsls	r3, r3, #3
   10206:	9308      	str	r3, [sp, #32]
	httpc_conf.timer_inst = &swt_module_inst;
   10208:	4b5f      	ldr	r3, [pc, #380]	; (10388 <main+0x488>)
   1020a:	9305      	str	r3, [sp, #20]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1020c:	a904      	add	r1, sp, #16
   1020e:	485f      	ldr	r0, [pc, #380]	; (1038c <main+0x48c>)
   10210:	4b5f      	ldr	r3, [pc, #380]	; (10390 <main+0x490>)
   10212:	4798      	blx	r3
   10214:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   10216:	da03      	bge.n	10220 <main+0x320>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   10218:	485e      	ldr	r0, [pc, #376]	; (10394 <main+0x494>)
   1021a:	4b37      	ldr	r3, [pc, #220]	; (102f8 <main+0x3f8>)
   1021c:	4798      	blx	r3
   1021e:	e7fe      	b.n	1021e <main+0x31e>
		http_client_register_callback(&http_client_module_inst, http_client_callback);
   10220:	495d      	ldr	r1, [pc, #372]	; (10398 <main+0x498>)
   10222:	485a      	ldr	r0, [pc, #360]	; (1038c <main+0x48c>)
   10224:	4b5d      	ldr	r3, [pc, #372]	; (1039c <main+0x49c>)
   10226:	4798      	blx	r3
			/* ~~~~~~~~~~~~~~~~Begin HTTP client init~~~~~~~~~~~~~~~~~~*/
			configure_http_client();
			
			//memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
			
			param.pfAppWifiCb = wifi_cb;
   10228:	4b5d      	ldr	r3, [pc, #372]	; (103a0 <main+0x4a0>)
   1022a:	9326      	str	r3, [sp, #152]	; 0x98
			
			ret = m2m_wifi_init(&param);
   1022c:	a826      	add	r0, sp, #152	; 0x98
   1022e:	4b37      	ldr	r3, [pc, #220]	; (1030c <main+0x40c>)
   10230:	4798      	blx	r3
   10232:	1e01      	subs	r1, r0, #0
			if (M2M_SUCCESS != ret) {
   10234:	d100      	bne.n	10238 <main+0x338>
   10236:	e0b7      	b.n	103a8 <main+0x4a8>
				printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   10238:	485a      	ldr	r0, [pc, #360]	; (103a4 <main+0x4a4>)
   1023a:	4b2f      	ldr	r3, [pc, #188]	; (102f8 <main+0x3f8>)
   1023c:	4798      	blx	r3
   1023e:	e7fe      	b.n	1023e <main+0x33e>
   10240:	0000f67d 	.word	0x0000f67d
   10244:	2000028c 	.word	0x2000028c
   10248:	20000002 	.word	0x20000002
   1024c:	0000fbe1 	.word	0x0000fbe1
   10250:	0000d975 	.word	0x0000d975
   10254:	00110003 	.word	0x00110003
   10258:	00140003 	.word	0x00140003
   1025c:	2000059c 	.word	0x2000059c
   10260:	20000598 	.word	0x20000598
   10264:	0000f8f5 	.word	0x0000f8f5
   10268:	20000594 	.word	0x20000594
   1026c:	0000f8c9 	.word	0x0000f8c9
   10270:	20000590 	.word	0x20000590
   10274:	42001400 	.word	0x42001400
   10278:	0000e939 	.word	0x0000e939
   1027c:	20000020 	.word	0x20000020
   10280:	00011b05 	.word	0x00011b05
   10284:	0000e051 	.word	0x0000e051
   10288:	e000e100 	.word	0xe000e100
   1028c:	41004000 	.word	0x41004000
   10290:	0000d9e1 	.word	0x0000d9e1
   10294:	0001184f 	.word	0x0001184f
   10298:	0001d4c0 	.word	0x0001d4c0
   1029c:	00100002 	.word	0x00100002
   102a0:	00120002 	.word	0x00120002
   102a4:	00130002 	.word	0x00130002
   102a8:	20000f74 	.word	0x20000f74
   102ac:	42000c00 	.word	0x42000c00
   102b0:	0000e0e1 	.word	0x0000e0e1
   102b4:	20000e2c 	.word	0x20000e2c
   102b8:	0000dc79 	.word	0x0000dc79
   102bc:	41004400 	.word	0x41004400
   102c0:	0000cccd 	.word	0x0000cccd
   102c4:	200005d4 	.word	0x200005d4
   102c8:	0000ccd9 	.word	0x0000ccd9
   102cc:	0000cd85 	.word	0x0000cd85
   102d0:	000106a5 	.word	0x000106a5
   102d4:	20000298 	.word	0x20000298
   102d8:	00004788 	.word	0x00004788
   102dc:	20000318 	.word	0x20000318
   102e0:	000106c9 	.word	0x000106c9
   102e4:	0000f90d 	.word	0x0000f90d
   102e8:	00010799 	.word	0x00010799
   102ec:	0000816d 	.word	0x0000816d
   102f0:	20000018 	.word	0x20000018
   102f4:	00014354 	.word	0x00014354
   102f8:	000119b1 	.word	0x000119b1
   102fc:	00014360 	.word	0x00014360
   10300:	00014370 	.word	0x00014370
   10304:	00014378 	.word	0x00014378
   10308:	0000f831 	.word	0x0000f831
   1030c:	000090cd 	.word	0x000090cd
   10310:	00014388 	.word	0x00014388
   10314:	000142ec 	.word	0x000142ec
   10318:	00014320 	.word	0x00014320
   1031c:	0000ad15 	.word	0x0000ad15
   10320:	0000f819 	.word	0x0000f819
   10324:	0000f825 	.word	0x0000f825
   10328:	0000ad95 	.word	0x0000ad95
   1032c:	00014860 	.word	0x00014860
   10330:	0001486c 	.word	0x0001486c
   10334:	000094b9 	.word	0x000094b9
   10338:	200003d0 	.word	0x200003d0
   1033c:	0000921d 	.word	0x0000921d
   10340:	200003ce 	.word	0x200003ce
   10344:	200003cc 	.word	0x200003cc
   10348:	0000ed69 	.word	0x0000ed69
   1034c:	0000ce1d 	.word	0x0000ce1d
   10350:	41004480 	.word	0x41004480
   10354:	2000000c 	.word	0x2000000c
   10358:	2000038c 	.word	0x2000038c
   1035c:	000143b0 	.word	0x000143b0
   10360:	00011c71 	.word	0x00011c71
   10364:	000143b4 	.word	0x000143b4
   10368:	00010bc1 	.word	0x00010bc1
   1036c:	000143bc 	.word	0x000143bc
   10370:	000143c4 	.word	0x000143c4
   10374:	0000ad59 	.word	0x0000ad59
   10378:	00010755 	.word	0x00010755
   1037c:	00009201 	.word	0x00009201
   10380:	000143d4 	.word	0x000143d4
   10384:	0000bccd 	.word	0x0000bccd
   10388:	20000e34 	.word	0x20000e34
   1038c:	20000e8c 	.word	0x20000e8c
   10390:	0000bcf5 	.word	0x0000bcf5
   10394:	000143fc 	.word	0x000143fc
   10398:	0000fc75 	.word	0x0000fc75
   1039c:	0000bda9 	.word	0x0000bda9
   103a0:	0000fb25 	.word	0x0000fb25
   103a4:	00014444 	.word	0x00014444
				while (1) {
				}
			}
			socketInit();
   103a8:	4b6c      	ldr	r3, [pc, #432]	; (1055c <main+0x65c>)
   103aa:	4798      	blx	r3
			registerSocketCallback(socket_cb, resolve_cb);
   103ac:	496c      	ldr	r1, [pc, #432]	; (10560 <main+0x660>)
   103ae:	486d      	ldr	r0, [pc, #436]	; (10564 <main+0x664>)
   103b0:	4b6d      	ldr	r3, [pc, #436]	; (10568 <main+0x668>)
   103b2:	4798      	blx	r3
			printf("Survived http client setup\r\n");
   103b4:	486d      	ldr	r0, [pc, #436]	; (1056c <main+0x66c>)
   103b6:	4b6e      	ldr	r3, [pc, #440]	; (10570 <main+0x670>)
   103b8:	4798      	blx	r3
	uint8_t read_buffer[NVMCTRL_PAGE_SIZE]={0};
   103ba:	2240      	movs	r2, #64	; 0x40
   103bc:	2100      	movs	r1, #0
   103be:	a804      	add	r0, sp, #16
   103c0:	4b6c      	ldr	r3, [pc, #432]	; (10574 <main+0x674>)
   103c2:	4798      	blx	r3
		error_code = nvm_read_buffer(FW_STAT_ADDRESS, read_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   103c4:	25fe      	movs	r5, #254	; 0xfe
   103c6:	01ed      	lsls	r5, r5, #7
   103c8:	4c6b      	ldr	r4, [pc, #428]	; (10578 <main+0x678>)
   103ca:	2240      	movs	r2, #64	; 0x40
   103cc:	a904      	add	r1, sp, #16
   103ce:	0028      	movs	r0, r5
   103d0:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
   103d2:	2805      	cmp	r0, #5
   103d4:	d0f9      	beq.n	103ca <main+0x4ca>
	thisFW.executing_image		= read_buffer[4];
   103d6:	ab04      	add	r3, sp, #16
   103d8:	791b      	ldrb	r3, [r3, #4]
   103da:	4698      	mov	r8, r3
			Firmware_Status_t fw_status = getFWStat();
			if (fw_status.executing_image == 1) {
				fw_status.downloaded_image = 2;
			}
			else {
				fw_status.downloaded_image = 1;
   103dc:	1e5d      	subs	r5, r3, #1
   103de:	426a      	negs	r2, r5
   103e0:	416a      	adcs	r2, r5
   103e2:	1c55      	adds	r5, r2, #1
			}
			printf("Executing image: %d, DL to: %d\r\n", fw_status.executing_image, fw_status.downloaded_image);
   103e4:	002a      	movs	r2, r5
   103e6:	4641      	mov	r1, r8
   103e8:	4864      	ldr	r0, [pc, #400]	; (1057c <main+0x67c>)
   103ea:	4b65      	ldr	r3, [pc, #404]	; (10580 <main+0x680>)
   103ec:	4699      	mov	r9, r3
   103ee:	4798      	blx	r3
			firstCRC=true;
   103f0:	2201      	movs	r2, #1
   103f2:	4b64      	ldr	r3, [pc, #400]	; (10584 <main+0x684>)
   103f4:	701a      	strb	r2, [r3, #0]
	flash_addr = 0x40000 * slot; //Starting addr on flash where downloaded file is stored
   103f6:	4e64      	ldr	r6, [pc, #400]	; (10588 <main+0x688>)
   103f8:	04ab      	lsls	r3, r5, #18
   103fa:	6033      	str	r3, [r6, #0]
	at25dfx_chip_wake(&at25dfx_chip);
   103fc:	4c63      	ldr	r4, [pc, #396]	; (1058c <main+0x68c>)
   103fe:	0020      	movs	r0, r4
   10400:	4b63      	ldr	r3, [pc, #396]	; (10590 <main+0x690>)
   10402:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
   10404:	0020      	movs	r0, r4
   10406:	4b63      	ldr	r3, [pc, #396]	; (10594 <main+0x694>)
   10408:	4798      	blx	r3
	at25dfx_chip_set_global_sector_protect(&at25dfx_chip, false);
   1040a:	2100      	movs	r1, #0
   1040c:	0020      	movs	r0, r4
   1040e:	4b62      	ldr	r3, [pc, #392]	; (10598 <main+0x698>)
   10410:	4798      	blx	r3
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr, AT25DFX_BLOCK_SIZE_64KB);	// erase block
   10412:	2202      	movs	r2, #2
   10414:	6831      	ldr	r1, [r6, #0]
   10416:	0020      	movs	r0, r4
   10418:	4f60      	ldr	r7, [pc, #384]	; (1059c <main+0x69c>)
   1041a:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x10000, AT25DFX_BLOCK_SIZE_64KB);
   1041c:	6833      	ldr	r3, [r6, #0]
   1041e:	2280      	movs	r2, #128	; 0x80
   10420:	0252      	lsls	r2, r2, #9
   10422:	4694      	mov	ip, r2
   10424:	4463      	add	r3, ip
   10426:	0019      	movs	r1, r3
   10428:	2202      	movs	r2, #2
   1042a:	0020      	movs	r0, r4
   1042c:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x20000, AT25DFX_BLOCK_SIZE_64KB);
   1042e:	6833      	ldr	r3, [r6, #0]
   10430:	2280      	movs	r2, #128	; 0x80
   10432:	0292      	lsls	r2, r2, #10
   10434:	4694      	mov	ip, r2
   10436:	4463      	add	r3, ip
   10438:	0019      	movs	r1, r3
   1043a:	2202      	movs	r2, #2
   1043c:	0020      	movs	r0, r4
   1043e:	47b8      	blx	r7
	at25dfx_chip_erase_block(&at25dfx_chip, flash_addr + 0x30000, AT25DFX_BLOCK_SIZE_64KB);
   10440:	6831      	ldr	r1, [r6, #0]
   10442:	23c0      	movs	r3, #192	; 0xc0
   10444:	029b      	lsls	r3, r3, #10
   10446:	469c      	mov	ip, r3
   10448:	4461      	add	r1, ip
   1044a:	2202      	movs	r2, #2
   1044c:	0020      	movs	r0, r4
   1044e:	47b8      	blx	r7
	printf("download_firmware: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   10450:	4c53      	ldr	r4, [pc, #332]	; (105a0 <main+0x6a0>)
   10452:	0021      	movs	r1, r4
   10454:	4853      	ldr	r0, [pc, #332]	; (105a4 <main+0x6a4>)
   10456:	47c8      	blx	r9
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   10458:	23ff      	movs	r3, #255	; 0xff
   1045a:	9300      	str	r3, [sp, #0]
   1045c:	4b52      	ldr	r3, [pc, #328]	; (105a8 <main+0x6a8>)
   1045e:	2202      	movs	r2, #2
   10460:	210b      	movs	r1, #11
   10462:	0020      	movs	r0, r4
   10464:	4c51      	ldr	r4, [pc, #324]	; (105ac <main+0x6ac>)
   10466:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   10468:	4b51      	ldr	r3, [pc, #324]	; (105b0 <main+0x6b0>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1046a:	781a      	ldrb	r2, [r3, #0]
   1046c:	2330      	movs	r3, #48	; 0x30
   1046e:	421a      	tst	r2, r3
   10470:	d10b      	bne.n	1048a <main+0x58a>
		m2m_wifi_handle_events(NULL);
   10472:	4f50      	ldr	r7, [pc, #320]	; (105b4 <main+0x6b4>)
		sw_timer_task(&swt_module_inst);
   10474:	4e50      	ldr	r6, [pc, #320]	; (105b8 <main+0x6b8>)
   10476:	4c51      	ldr	r4, [pc, #324]	; (105bc <main+0x6bc>)
		m2m_wifi_handle_events(NULL);
   10478:	2000      	movs	r0, #0
   1047a:	47b8      	blx	r7
		sw_timer_task(&swt_module_inst);
   1047c:	0030      	movs	r0, r6
   1047e:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   10480:	4b4b      	ldr	r3, [pc, #300]	; (105b0 <main+0x6b0>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   10482:	781b      	ldrb	r3, [r3, #0]
   10484:	2230      	movs	r2, #48	; 0x30
   10486:	421a      	tst	r2, r3
   10488:	d0f6      	beq.n	10478 <main+0x578>
	printf("download_firmware: done.\r\n");
   1048a:	484d      	ldr	r0, [pc, #308]	; (105c0 <main+0x6c0>)
   1048c:	4b38      	ldr	r3, [pc, #224]	; (10570 <main+0x670>)
   1048e:	4798      	blx	r3
	printf("Calculated CRC: %x\r\n", (uint32_t)crcChecker);
   10490:	4b4c      	ldr	r3, [pc, #304]	; (105c4 <main+0x6c4>)
   10492:	6819      	ldr	r1, [r3, #0]
   10494:	484c      	ldr	r0, [pc, #304]	; (105c8 <main+0x6c8>)
   10496:	4b3a      	ldr	r3, [pc, #232]	; (10580 <main+0x680>)
   10498:	4798      	blx	r3
	down_state &= ~mask;
   1049a:	4c45      	ldr	r4, [pc, #276]	; (105b0 <main+0x6b0>)
   1049c:	7823      	ldrb	r3, [r4, #0]
   1049e:	223c      	movs	r2, #60	; 0x3c
   104a0:	4393      	bics	r3, r2
   104a2:	7023      	strb	r3, [r4, #0]
	download_CRC = true;
   104a4:	3a3b      	subs	r2, #59	; 0x3b
   104a6:	4b49      	ldr	r3, [pc, #292]	; (105cc <main+0x6cc>)
   104a8:	701a      	strb	r2, [r3, #0]
	start_download();
   104aa:	4b49      	ldr	r3, [pc, #292]	; (105d0 <main+0x6d0>)
   104ac:	4798      	blx	r3
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   104ae:	7822      	ldrb	r2, [r4, #0]
   104b0:	2330      	movs	r3, #48	; 0x30
   104b2:	421a      	tst	r2, r3
   104b4:	d10b      	bne.n	104ce <main+0x5ce>
		m2m_wifi_handle_events(NULL);
   104b6:	4f3f      	ldr	r7, [pc, #252]	; (105b4 <main+0x6b4>)
		sw_timer_task(&swt_module_inst);
   104b8:	4e3f      	ldr	r6, [pc, #252]	; (105b8 <main+0x6b8>)
   104ba:	4c40      	ldr	r4, [pc, #256]	; (105bc <main+0x6bc>)
		m2m_wifi_handle_events(NULL);
   104bc:	2000      	movs	r0, #0
   104be:	47b8      	blx	r7
		sw_timer_task(&swt_module_inst);
   104c0:	0030      	movs	r0, r6
   104c2:	47a0      	blx	r4
	return ((down_state & mask) != 0);
   104c4:	4b3a      	ldr	r3, [pc, #232]	; (105b0 <main+0x6b0>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   104c6:	781b      	ldrb	r3, [r3, #0]
   104c8:	2230      	movs	r2, #48	; 0x30
   104ca:	421a      	tst	r2, r3
   104cc:	d0f6      	beq.n	104bc <main+0x5bc>
	download_CRC = false;
   104ce:	2200      	movs	r2, #0
   104d0:	4b3e      	ldr	r3, [pc, #248]	; (105cc <main+0x6cc>)
   104d2:	701a      	strb	r2, [r3, #0]
			download_firmware(fw_status.downloaded_image);
			printf("\n\rMain: Done downloading firmware and CRC\n\r");
   104d4:	483f      	ldr	r0, [pc, #252]	; (105d4 <main+0x6d4>)
   104d6:	4b2a      	ldr	r3, [pc, #168]	; (10580 <main+0x680>)
   104d8:	4798      	blx	r3
			if (dlCRC == crcChecker){
   104da:	4b3f      	ldr	r3, [pc, #252]	; (105d8 <main+0x6d8>)
   104dc:	681a      	ldr	r2, [r3, #0]
   104de:	4b39      	ldr	r3, [pc, #228]	; (105c4 <main+0x6c4>)
   104e0:	681b      	ldr	r3, [r3, #0]
   104e2:	429a      	cmp	r2, r3
   104e4:	d136      	bne.n	10554 <main+0x654>
				printf("\n\rMain: CRC MATCHED! starting firmware upgrade. \n\r");
   104e6:	483d      	ldr	r0, [pc, #244]	; (105dc <main+0x6dc>)
   104e8:	4b25      	ldr	r3, [pc, #148]	; (10580 <main+0x680>)
   104ea:	4798      	blx	r3
				*(uint32_t*)fw_status.signature = (uint32_t)crcChecker; //replace with checksum of downloaded image
   104ec:	4b35      	ldr	r3, [pc, #212]	; (105c4 <main+0x6c4>)
   104ee:	681e      	ldr	r6, [r3, #0]
   104f0:	0a32      	lsrs	r2, r6, #8
   104f2:	0c37      	lsrs	r7, r6, #16
   104f4:	b2f3      	uxtb	r3, r6
   104f6:	469a      	mov	sl, r3
   104f8:	b2d3      	uxtb	r3, r2
   104fa:	4699      	mov	r9, r3
   104fc:	b2ff      	uxtb	r7, r7
   104fe:	0e36      	lsrs	r6, r6, #24
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE]={0};
   10500:	ac04      	add	r4, sp, #16
   10502:	2240      	movs	r2, #64	; 0x40
   10504:	2100      	movs	r1, #0
   10506:	0020      	movs	r0, r4
   10508:	4b1a      	ldr	r3, [pc, #104]	; (10574 <main+0x674>)
   1050a:	4798      	blx	r3
	page_buffer[0] = thisFW.signature[0];
   1050c:	4653      	mov	r3, sl
   1050e:	7023      	strb	r3, [r4, #0]
	page_buffer[1] = thisFW.signature[1];
   10510:	464b      	mov	r3, r9
   10512:	7063      	strb	r3, [r4, #1]
	page_buffer[2] = thisFW.signature[2];
   10514:	70a7      	strb	r7, [r4, #2]
	page_buffer[3] = thisFW.signature[3];
   10516:	70e6      	strb	r6, [r4, #3]
	page_buffer[4] = thisFW.executing_image;
   10518:	4643      	mov	r3, r8
   1051a:	7123      	strb	r3, [r4, #4]
	page_buffer[5] = thisFW.downloaded_image;
   1051c:	7165      	strb	r5, [r4, #5]
	page_buffer[6] = thisFW.writenew_image;
   1051e:	2301      	movs	r3, #1
   10520:	71a3      	strb	r3, [r4, #6]
		error_code = nvm_erase_row(FW_STAT_ADDRESS);			// Erase FW stat row
   10522:	25fe      	movs	r5, #254	; 0xfe
   10524:	01ed      	lsls	r5, r5, #7
   10526:	4c2e      	ldr	r4, [pc, #184]	; (105e0 <main+0x6e0>)
   10528:	0028      	movs	r0, r5
   1052a:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
   1052c:	2805      	cmp	r0, #5
   1052e:	d0fb      	beq.n	10528 <main+0x628>
		error_code = nvm_write_buffer(FW_STAT_ADDRESS, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
   10530:	25fe      	movs	r5, #254	; 0xfe
   10532:	01ed      	lsls	r5, r5, #7
   10534:	2440      	movs	r4, #64	; 0x40
   10536:	0022      	movs	r2, r4
   10538:	a904      	add	r1, sp, #16
   1053a:	0028      	movs	r0, r5
   1053c:	4b29      	ldr	r3, [pc, #164]	; (105e4 <main+0x6e4>)
   1053e:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
   10540:	2805      	cmp	r0, #5
   10542:	d0f8      	beq.n	10536 <main+0x636>
  __ASM volatile ("dsb");
   10544:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   10548:	4a27      	ldr	r2, [pc, #156]	; (105e8 <main+0x6e8>)
   1054a:	4b28      	ldr	r3, [pc, #160]	; (105ec <main+0x6ec>)
   1054c:	60da      	str	r2, [r3, #12]
   1054e:	f3bf 8f4f 	dsb	sy
   10552:	e7fe      	b.n	10552 <main+0x652>
				fw_status.writenew_image = 1;  // write image flag
				writeFWStat(fw_status);
			} 
			else {
				printf("\n\r Main: CRC Check Fail!\n\r");
   10554:	4826      	ldr	r0, [pc, #152]	; (105f0 <main+0x6f0>)
   10556:	4b0a      	ldr	r3, [pc, #40]	; (10580 <main+0x680>)
   10558:	4798      	blx	r3
   1055a:	e7f3      	b.n	10544 <main+0x644>
   1055c:	0000ad15 	.word	0x0000ad15
   10560:	0000f73d 	.word	0x0000f73d
   10564:	0000f779 	.word	0x0000f779
   10568:	0000ad95 	.word	0x0000ad95
   1056c:	00014470 	.word	0x00014470
   10570:	00011acd 	.word	0x00011acd
   10574:	0001184f 	.word	0x0001184f
   10578:	0000dbb1 	.word	0x0000dbb1
   1057c:	0001448c 	.word	0x0001448c
   10580:	000119b1 	.word	0x000119b1
   10584:	2000000d 	.word	0x2000000d
   10588:	200005d0 	.word	0x200005d0
   1058c:	20000e2c 	.word	0x20000e2c
   10590:	0000d8e9 	.word	0x0000d8e9
   10594:	0000d00d 	.word	0x0000d00d
   10598:	0000d76d 	.word	0x0000d76d
   1059c:	0000d555 	.word	0x0000d555
   105a0:	0001486c 	.word	0x0001486c
   105a4:	000144b0 	.word	0x000144b0
   105a8:	00014860 	.word	0x00014860
   105ac:	000094b9 	.word	0x000094b9
   105b0:	2000028c 	.word	0x2000028c
   105b4:	0000921d 	.word	0x0000921d
   105b8:	20000e34 	.word	0x20000e34
   105bc:	0000ce1d 	.word	0x0000ce1d
   105c0:	000144e4 	.word	0x000144e4
   105c4:	20000fb0 	.word	0x20000fb0
   105c8:	00014500 	.word	0x00014500
   105cc:	2000028d 	.word	0x2000028d
   105d0:	0000f785 	.word	0x0000f785
   105d4:	00014518 	.word	0x00014518
   105d8:	20000fb4 	.word	0x20000fb4
   105dc:	00014544 	.word	0x00014544
   105e0:	0000dc1d 	.word	0x0000dc1d
   105e4:	0000db09 	.word	0x0000db09
   105e8:	05fa0004 	.word	0x05fa0004
   105ec:	e000ed00 	.word	0xe000ed00
   105f0:	00014578 	.word	0x00014578

000105f4 <_hwerr_to_stderr>:
   105f4:	1c03      	adds	r3, r0, #0
   105f6:	300e      	adds	r0, #14
   105f8:	b500      	push	{lr}
   105fa:	280e      	cmp	r0, #14
   105fc:	d819      	bhi.n	10632 <_hwerr_to_stderr+0x3e>
   105fe:	f000 ff23 	bl	11448 <__gnu_thumb1_case_uqi>
   10602:	1416      	.short	0x1416
   10604:	1b181012 	.word	0x1b181012
   10608:	180c0e18 	.word	0x180c0e18
   1060c:	1d0a0e0e 	.word	0x1d0a0e0e
   10610:	08          	.byte	0x08
   10611:	00          	.byte	0x00
   10612:	2000      	movs	r0, #0
   10614:	e014      	b.n	10640 <_hwerr_to_stderr+0x4c>
   10616:	2070      	movs	r0, #112	; 0x70
   10618:	e011      	b.n	1063e <_hwerr_to_stderr+0x4a>
   1061a:	2016      	movs	r0, #22
   1061c:	e00f      	b.n	1063e <_hwerr_to_stderr+0x4a>
   1061e:	200c      	movs	r0, #12
   10620:	e00d      	b.n	1063e <_hwerr_to_stderr+0x4a>
   10622:	2079      	movs	r0, #121	; 0x79
   10624:	e00b      	b.n	1063e <_hwerr_to_stderr+0x4a>
   10626:	2068      	movs	r0, #104	; 0x68
   10628:	e009      	b.n	1063e <_hwerr_to_stderr+0x4a>
   1062a:	200b      	movs	r0, #11
   1062c:	e007      	b.n	1063e <_hwerr_to_stderr+0x4a>
   1062e:	2010      	movs	r0, #16
   10630:	e005      	b.n	1063e <_hwerr_to_stderr+0x4a>
   10632:	2000      	movs	r0, #0
   10634:	4283      	cmp	r3, r0
   10636:	da03      	bge.n	10640 <_hwerr_to_stderr+0x4c>
   10638:	2005      	movs	r0, #5
   1063a:	e000      	b.n	1063e <_hwerr_to_stderr+0x4a>
   1063c:	2002      	movs	r0, #2
   1063e:	4240      	negs	r0, r0
   10640:	bd00      	pop	{pc}
	...

00010644 <_mqtt_send_wait>:
   10644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10646:	1c04      	adds	r4, r0, #0
   10648:	3443      	adds	r4, #67	; 0x43
   1064a:	7823      	ldrb	r3, [r4, #0]
   1064c:	1c05      	adds	r5, r0, #0
   1064e:	07d8      	lsls	r0, r3, #31
   10650:	d51c      	bpl.n	1068c <_mqtt_send_wait+0x48>
   10652:	2604      	movs	r6, #4
   10654:	4333      	orrs	r3, r6
   10656:	7023      	strb	r3, [r4, #0]
   10658:	2002      	movs	r0, #2
   1065a:	5628      	ldrsb	r0, [r5, r0]
   1065c:	b292      	uxth	r2, r2
   1065e:	2300      	movs	r3, #0
   10660:	4f0c      	ldr	r7, [pc, #48]	; (10694 <_mqtt_send_wait+0x50>)
   10662:	47b8      	blx	r7
   10664:	2800      	cmp	r0, #0
   10666:	da05      	bge.n	10674 <_mqtt_send_wait+0x30>
   10668:	7823      	ldrb	r3, [r4, #0]
   1066a:	43b3      	bics	r3, r6
   1066c:	7023      	strb	r3, [r4, #0]
   1066e:	4b0a      	ldr	r3, [pc, #40]	; (10698 <_mqtt_send_wait+0x54>)
   10670:	4798      	blx	r3
   10672:	e00d      	b.n	10690 <_mqtt_send_wait+0x4c>
   10674:	7822      	ldrb	r2, [r4, #0]
   10676:	2314      	movs	r3, #20
   10678:	4013      	ands	r3, r2
   1067a:	2000      	movs	r0, #0
   1067c:	2b04      	cmp	r3, #4
   1067e:	d107      	bne.n	10690 <_mqtt_send_wait+0x4c>
   10680:	4b06      	ldr	r3, [pc, #24]	; (1069c <_mqtt_send_wait+0x58>)
   10682:	4798      	blx	r3
   10684:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   10686:	4b06      	ldr	r3, [pc, #24]	; (106a0 <_mqtt_send_wait+0x5c>)
   10688:	4798      	blx	r3
   1068a:	e7f3      	b.n	10674 <_mqtt_send_wait+0x30>
   1068c:	2001      	movs	r0, #1
   1068e:	4240      	negs	r0, r0
   10690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10692:	46c0      	nop			; (mov r8, r8)
   10694:	0000afbd 	.word	0x0000afbd
   10698:	000105f5 	.word	0x000105f5
   1069c:	0000921d 	.word	0x0000921d
   106a0:	0000ce1d 	.word	0x0000ce1d

000106a4 <mqtt_get_config_defaults>:
   106a4:	4b07      	ldr	r3, [pc, #28]	; (106c4 <mqtt_get_config_defaults+0x20>)
   106a6:	2240      	movs	r2, #64	; 0x40
   106a8:	8003      	strh	r3, [r0, #0]
   106aa:	2396      	movs	r3, #150	; 0x96
   106ac:	009b      	lsls	r3, r3, #2
   106ae:	8103      	strh	r3, [r0, #8]
   106b0:	6102      	str	r2, [r0, #16]
   106b2:	2300      	movs	r3, #0
   106b4:	2220      	movs	r2, #32
   106b6:	7083      	strb	r3, [r0, #2]
   106b8:	6043      	str	r3, [r0, #4]
   106ba:	60c3      	str	r3, [r0, #12]
   106bc:	6142      	str	r2, [r0, #20]
   106be:	7603      	strb	r3, [r0, #24]
   106c0:	4770      	bx	lr
   106c2:	46c0      	nop			; (mov r8, r8)
   106c4:	0000075b 	.word	0x0000075b

000106c8 <mqtt_init>:
   106c8:	b538      	push	{r3, r4, r5, lr}
   106ca:	1c04      	adds	r4, r0, #0
   106cc:	1c0d      	adds	r5, r1, #0
   106ce:	2800      	cmp	r0, #0
   106d0:	d030      	beq.n	10734 <mqtt_init+0x6c>
   106d2:	2900      	cmp	r1, #0
   106d4:	d02e      	beq.n	10734 <mqtt_init+0x6c>
   106d6:	690b      	ldr	r3, [r1, #16]
   106d8:	2b00      	cmp	r3, #0
   106da:	d02b      	beq.n	10734 <mqtt_init+0x6c>
   106dc:	684b      	ldr	r3, [r1, #4]
   106de:	2b00      	cmp	r3, #0
   106e0:	d028      	beq.n	10734 <mqtt_init+0x6c>
   106e2:	2100      	movs	r1, #0
   106e4:	2274      	movs	r2, #116	; 0x74
   106e6:	4b16      	ldr	r3, [pc, #88]	; (10740 <mqtt_init+0x78>)
   106e8:	4798      	blx	r3
   106ea:	1c20      	adds	r0, r4, #0
   106ec:	4b15      	ldr	r3, [pc, #84]	; (10744 <mqtt_init+0x7c>)
   106ee:	3058      	adds	r0, #88	; 0x58
   106f0:	1c29      	adds	r1, r5, #0
   106f2:	221c      	movs	r2, #28
   106f4:	4798      	blx	r3
   106f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   106f8:	2b00      	cmp	r3, #0
   106fa:	d10b      	bne.n	10714 <mqtt_init+0x4c>
   106fc:	6928      	ldr	r0, [r5, #16]
   106fe:	4b12      	ldr	r3, [pc, #72]	; (10748 <mqtt_init+0x80>)
   10700:	4798      	blx	r3
   10702:	6660      	str	r0, [r4, #100]	; 0x64
   10704:	2800      	cmp	r0, #0
   10706:	d017      	beq.n	10738 <mqtt_init+0x70>
   10708:	1c23      	adds	r3, r4, #0
   1070a:	3343      	adds	r3, #67	; 0x43
   1070c:	781a      	ldrb	r2, [r3, #0]
   1070e:	2120      	movs	r1, #32
   10710:	430a      	orrs	r2, r1
   10712:	701a      	strb	r2, [r3, #0]
   10714:	892a      	ldrh	r2, [r5, #8]
   10716:	23fa      	movs	r3, #250	; 0xfa
   10718:	005b      	lsls	r3, r3, #1
   1071a:	4353      	muls	r3, r2
   1071c:	6868      	ldr	r0, [r5, #4]
   1071e:	490b      	ldr	r1, [pc, #44]	; (1074c <mqtt_init+0x84>)
   10720:	1c22      	adds	r2, r4, #0
   10722:	4d0b      	ldr	r5, [pc, #44]	; (10750 <mqtt_init+0x88>)
   10724:	47a8      	blx	r5
   10726:	1c03      	adds	r3, r0, #0
   10728:	6520      	str	r0, [r4, #80]	; 0x50
   1072a:	2000      	movs	r0, #0
   1072c:	4283      	cmp	r3, r0
   1072e:	da05      	bge.n	1073c <mqtt_init+0x74>
   10730:	201c      	movs	r0, #28
   10732:	e002      	b.n	1073a <mqtt_init+0x72>
   10734:	2016      	movs	r0, #22
   10736:	e000      	b.n	1073a <mqtt_init+0x72>
   10738:	200c      	movs	r0, #12
   1073a:	4240      	negs	r0, r0
   1073c:	bd38      	pop	{r3, r4, r5, pc}
   1073e:	46c0      	nop			; (mov r8, r8)
   10740:	0001184f 	.word	0x0001184f
   10744:	00011819 	.word	0x00011819
   10748:	000117f1 	.word	0x000117f1
   1074c:	00010f15 	.word	0x00010f15
   10750:	0000cd99 	.word	0x0000cd99

00010754 <mqtt_deinit>:
   10754:	b510      	push	{r4, lr}
   10756:	1e04      	subs	r4, r0, #0
   10758:	d014      	beq.n	10784 <mqtt_deinit+0x30>
   1075a:	6e40      	ldr	r0, [r0, #100]	; 0x64
   1075c:	2800      	cmp	r0, #0
   1075e:	d008      	beq.n	10772 <mqtt_deinit+0x1e>
   10760:	1c23      	adds	r3, r4, #0
   10762:	3343      	adds	r3, #67	; 0x43
   10764:	781b      	ldrb	r3, [r3, #0]
   10766:	069a      	lsls	r2, r3, #26
   10768:	d503      	bpl.n	10772 <mqtt_deinit+0x1e>
   1076a:	4b09      	ldr	r3, [pc, #36]	; (10790 <mqtt_deinit+0x3c>)
   1076c:	4798      	blx	r3
   1076e:	2300      	movs	r3, #0
   10770:	6663      	str	r3, [r4, #100]	; 0x64
   10772:	6d21      	ldr	r1, [r4, #80]	; 0x50
   10774:	2900      	cmp	r1, #0
   10776:	db08      	blt.n	1078a <mqtt_deinit+0x36>
   10778:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   1077a:	2800      	cmp	r0, #0
   1077c:	d006      	beq.n	1078c <mqtt_deinit+0x38>
   1077e:	4b05      	ldr	r3, [pc, #20]	; (10794 <mqtt_deinit+0x40>)
   10780:	4798      	blx	r3
   10782:	e002      	b.n	1078a <mqtt_deinit+0x36>
   10784:	2016      	movs	r0, #22
   10786:	4240      	negs	r0, r0
   10788:	e000      	b.n	1078c <mqtt_deinit+0x38>
   1078a:	2000      	movs	r0, #0
   1078c:	bd10      	pop	{r4, pc}
   1078e:	46c0      	nop			; (mov r8, r8)
   10790:	00011805 	.word	0x00011805
   10794:	0000cdd1 	.word	0x0000cdd1

00010798 <mqtt_register_callback>:
   10798:	2800      	cmp	r0, #0
   1079a:	d002      	beq.n	107a2 <mqtt_register_callback+0xa>
   1079c:	6541      	str	r1, [r0, #84]	; 0x54
   1079e:	2000      	movs	r0, #0
   107a0:	e001      	b.n	107a6 <mqtt_register_callback+0xe>
   107a2:	2016      	movs	r0, #22
   107a4:	4240      	negs	r0, r0
   107a6:	4770      	bx	lr

000107a8 <mqtt_socket_resolve_handler>:
   107a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   107aa:	1c06      	adds	r6, r0, #0
   107ac:	b085      	sub	sp, #20
   107ae:	1c0f      	adds	r7, r1, #0
   107b0:	2400      	movs	r4, #0
   107b2:	4b0f      	ldr	r3, [pc, #60]	; (107f0 <mqtt_socket_resolve_handler+0x48>)
   107b4:	58e5      	ldr	r5, [r4, r3]
   107b6:	2d00      	cmp	r5, #0
   107b8:	d015      	beq.n	107e6 <mqtt_socket_resolve_handler+0x3e>
   107ba:	1ce9      	adds	r1, r5, #3
   107bc:	1c30      	adds	r0, r6, #0
   107be:	4b0d      	ldr	r3, [pc, #52]	; (107f4 <mqtt_socket_resolve_handler+0x4c>)
   107c0:	4798      	blx	r3
   107c2:	2800      	cmp	r0, #0
   107c4:	d10f      	bne.n	107e6 <mqtt_socket_resolve_handler+0x3e>
   107c6:	466a      	mov	r2, sp
   107c8:	2302      	movs	r3, #2
   107ca:	8013      	strh	r3, [r2, #0]
   107cc:	1c2b      	adds	r3, r5, #0
   107ce:	3358      	adds	r3, #88	; 0x58
   107d0:	881b      	ldrh	r3, [r3, #0]
   107d2:	9701      	str	r7, [sp, #4]
   107d4:	ba5b      	rev16	r3, r3
   107d6:	8053      	strh	r3, [r2, #2]
   107d8:	2002      	movs	r0, #2
   107da:	5628      	ldrsb	r0, [r5, r0]
   107dc:	4669      	mov	r1, sp
   107de:	2210      	movs	r2, #16
   107e0:	4b05      	ldr	r3, [pc, #20]	; (107f8 <mqtt_socket_resolve_handler+0x50>)
   107e2:	4798      	blx	r3
   107e4:	e002      	b.n	107ec <mqtt_socket_resolve_handler+0x44>
   107e6:	3404      	adds	r4, #4
   107e8:	2c1c      	cmp	r4, #28
   107ea:	d1e2      	bne.n	107b2 <mqtt_socket_resolve_handler+0xa>
   107ec:	b005      	add	sp, #20
   107ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107f0:	200003d4 	.word	0x200003d4
   107f4:	00011cb5 	.word	0x00011cb5
   107f8:	0000af2d 	.word	0x0000af2d

000107fc <mqtt_connect>:
   107fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   107fe:	1c04      	adds	r4, r0, #0
   10800:	b089      	sub	sp, #36	; 0x24
   10802:	1c0d      	adds	r5, r1, #0
   10804:	2800      	cmp	r0, #0
   10806:	d051      	beq.n	108ac <mqtt_connect+0xb0>
   10808:	2900      	cmp	r1, #0
   1080a:	d04f      	beq.n	108ac <mqtt_connect+0xb0>
   1080c:	1c08      	adds	r0, r1, #0
   1080e:	4b39      	ldr	r3, [pc, #228]	; (108f4 <mqtt_connect+0xf8>)
   10810:	4798      	blx	r3
   10812:	2840      	cmp	r0, #64	; 0x40
   10814:	d84c      	bhi.n	108b0 <mqtt_connect+0xb4>
   10816:	1c21      	adds	r1, r4, #0
   10818:	3143      	adds	r1, #67	; 0x43
   1081a:	780b      	ldrb	r3, [r1, #0]
   1081c:	9101      	str	r1, [sp, #4]
   1081e:	07db      	lsls	r3, r3, #31
   10820:	0fd9      	lsrs	r1, r3, #31
   10822:	466a      	mov	r2, sp
   10824:	b2ce      	uxtb	r6, r1
   10826:	1ce0      	adds	r0, r4, #3
   10828:	7211      	strb	r1, [r2, #8]
   1082a:	2e00      	cmp	r6, #0
   1082c:	d142      	bne.n	108b4 <mqtt_connect+0xb8>
   1082e:	2701      	movs	r7, #1
   10830:	1c29      	adds	r1, r5, #0
   10832:	4b31      	ldr	r3, [pc, #196]	; (108f8 <mqtt_connect+0xfc>)
   10834:	8027      	strh	r7, [r4, #0]
   10836:	4798      	blx	r3
   10838:	9a01      	ldr	r2, [sp, #4]
   1083a:	2002      	movs	r0, #2
   1083c:	7813      	ldrb	r3, [r2, #0]
   1083e:	9901      	ldr	r1, [sp, #4]
   10840:	43bb      	bics	r3, r7
   10842:	4383      	bics	r3, r0
   10844:	22e3      	movs	r2, #227	; 0xe3
   10846:	4013      	ands	r3, r2
   10848:	466a      	mov	r2, sp
   1084a:	700b      	strb	r3, [r1, #0]
   1084c:	7a12      	ldrb	r2, [r2, #8]
   1084e:	1c23      	adds	r3, r4, #0
   10850:	3348      	adds	r3, #72	; 0x48
   10852:	6466      	str	r6, [r4, #68]	; 0x44
   10854:	701a      	strb	r2, [r3, #0]
   10856:	7c9a      	ldrb	r2, [r3, #18]
   10858:	805e      	strh	r6, [r3, #2]
   1085a:	1e53      	subs	r3, r2, #1
   1085c:	419a      	sbcs	r2, r3
   1085e:	b2d2      	uxtb	r2, r2
   10860:	1c39      	adds	r1, r7, #0
   10862:	4b26      	ldr	r3, [pc, #152]	; (108fc <mqtt_connect+0x100>)
   10864:	4798      	blx	r3
   10866:	70a0      	strb	r0, [r4, #2]
   10868:	2800      	cmp	r0, #0
   1086a:	db25      	blt.n	108b8 <mqtt_connect+0xbc>
   1086c:	4b24      	ldr	r3, [pc, #144]	; (10900 <mqtt_connect+0x104>)
   1086e:	0080      	lsls	r0, r0, #2
   10870:	50c4      	str	r4, [r0, r3]
   10872:	1c2b      	adds	r3, r5, #0
   10874:	781f      	ldrb	r7, [r3, #0]
   10876:	2f00      	cmp	r7, #0
   10878:	d026      	beq.n	108c8 <mqtt_connect+0xcc>
   1087a:	2220      	movs	r2, #32
   1087c:	1c39      	adds	r1, r7, #0
   1087e:	4391      	bics	r1, r2
   10880:	1c0a      	adds	r2, r1, #0
   10882:	3a41      	subs	r2, #65	; 0x41
   10884:	b2d2      	uxtb	r2, r2
   10886:	3301      	adds	r3, #1
   10888:	2a05      	cmp	r2, #5
   1088a:	d90d      	bls.n	108a8 <mqtt_connect+0xac>
   1088c:	2f3a      	cmp	r7, #58	; 0x3a
   1088e:	d00b      	beq.n	108a8 <mqtt_connect+0xac>
   10890:	2f2f      	cmp	r7, #47	; 0x2f
   10892:	d009      	beq.n	108a8 <mqtt_connect+0xac>
   10894:	2f2e      	cmp	r7, #46	; 0x2e
   10896:	d102      	bne.n	1089e <mqtt_connect+0xa2>
   10898:	2e00      	cmp	r6, #0
   1089a:	d0eb      	beq.n	10874 <mqtt_connect+0x78>
   1089c:	e00f      	b.n	108be <mqtt_connect+0xc2>
   1089e:	2230      	movs	r2, #48	; 0x30
   108a0:	4017      	ands	r7, r2
   108a2:	4297      	cmp	r7, r2
   108a4:	d0e6      	beq.n	10874 <mqtt_connect+0x78>
   108a6:	e00a      	b.n	108be <mqtt_connect+0xc2>
   108a8:	2601      	movs	r6, #1
   108aa:	e7e3      	b.n	10874 <mqtt_connect+0x78>
   108ac:	2016      	movs	r0, #22
   108ae:	e004      	b.n	108ba <mqtt_connect+0xbe>
   108b0:	205b      	movs	r0, #91	; 0x5b
   108b2:	e002      	b.n	108ba <mqtt_connect+0xbe>
   108b4:	2078      	movs	r0, #120	; 0x78
   108b6:	e000      	b.n	108ba <mqtt_connect+0xbe>
   108b8:	201c      	movs	r0, #28
   108ba:	4240      	negs	r0, r0
   108bc:	e017      	b.n	108ee <mqtt_connect+0xf2>
   108be:	1c28      	adds	r0, r5, #0
   108c0:	4b10      	ldr	r3, [pc, #64]	; (10904 <mqtt_connect+0x108>)
   108c2:	4798      	blx	r3
   108c4:	2000      	movs	r0, #0
   108c6:	e012      	b.n	108ee <mqtt_connect+0xf2>
   108c8:	466a      	mov	r2, sp
   108ca:	2302      	movs	r3, #2
   108cc:	8213      	strh	r3, [r2, #16]
   108ce:	1c23      	adds	r3, r4, #0
   108d0:	3358      	adds	r3, #88	; 0x58
   108d2:	881b      	ldrh	r3, [r3, #0]
   108d4:	1c28      	adds	r0, r5, #0
   108d6:	ba5b      	rev16	r3, r3
   108d8:	8253      	strh	r3, [r2, #18]
   108da:	4b0b      	ldr	r3, [pc, #44]	; (10908 <mqtt_connect+0x10c>)
   108dc:	4798      	blx	r3
   108de:	9005      	str	r0, [sp, #20]
   108e0:	2002      	movs	r0, #2
   108e2:	5620      	ldrsb	r0, [r4, r0]
   108e4:	a904      	add	r1, sp, #16
   108e6:	2210      	movs	r2, #16
   108e8:	4b08      	ldr	r3, [pc, #32]	; (1090c <mqtt_connect+0x110>)
   108ea:	4798      	blx	r3
   108ec:	1c38      	adds	r0, r7, #0
   108ee:	b009      	add	sp, #36	; 0x24
   108f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108f2:	46c0      	nop			; (mov r8, r8)
   108f4:	00011d13 	.word	0x00011d13
   108f8:	00011cc9 	.word	0x00011cc9
   108fc:	0000ada9 	.word	0x0000ada9
   10900:	200003d4 	.word	0x200003d4
   10904:	0000b1f1 	.word	0x0000b1f1
   10908:	0000b185 	.word	0x0000b185
   1090c:	0000af2d 	.word	0x0000af2d

00010910 <mqtt_connect_broker>:
   10910:	b5f0      	push	{r4, r5, r6, r7, lr}
   10912:	b095      	sub	sp, #84	; 0x54
   10914:	af02      	add	r7, sp, #8
   10916:	617b      	str	r3, [r7, #20]
   10918:	1c3b      	adds	r3, r7, #0
   1091a:	3370      	adds	r3, #112	; 0x70
   1091c:	781b      	ldrb	r3, [r3, #0]
   1091e:	1c05      	adds	r5, r0, #0
   10920:	60fb      	str	r3, [r7, #12]
   10922:	1c3b      	adds	r3, r7, #0
   10924:	3374      	adds	r3, #116	; 0x74
   10926:	781b      	ldrb	r3, [r3, #0]
   10928:	6139      	str	r1, [r7, #16]
   1092a:	61fa      	str	r2, [r7, #28]
   1092c:	60bb      	str	r3, [r7, #8]
   1092e:	2800      	cmp	r0, #0
   10930:	d101      	bne.n	10936 <mqtt_connect_broker+0x26>
   10932:	2016      	movs	r0, #22
   10934:	e129      	b.n	10b8a <mqtt_connect_broker+0x27a>
   10936:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   10938:	4668      	mov	r0, sp
   1093a:	3307      	adds	r3, #7
   1093c:	08db      	lsrs	r3, r3, #3
   1093e:	00db      	lsls	r3, r3, #3
   10940:	1ac0      	subs	r0, r0, r3
   10942:	4685      	mov	sp, r0
   10944:	ac02      	add	r4, sp, #8
   10946:	607c      	str	r4, [r7, #4]
   10948:	6e3c      	ldr	r4, [r7, #96]	; 0x60
   1094a:	2c00      	cmp	r4, #0
   1094c:	d0f1      	beq.n	10932 <mqtt_connect_broker+0x22>
   1094e:	1c2b      	adds	r3, r5, #0
   10950:	3343      	adds	r3, #67	; 0x43
   10952:	781b      	ldrb	r3, [r3, #0]
   10954:	07d8      	lsls	r0, r3, #31
   10956:	d400      	bmi.n	1095a <mqtt_connect_broker+0x4a>
   10958:	e112      	b.n	10b80 <mqtt_connect_broker+0x270>
   1095a:	079a      	lsls	r2, r3, #30
   1095c:	d500      	bpl.n	10960 <mqtt_connect_broker+0x50>
   1095e:	e111      	b.n	10b84 <mqtt_connect_broker+0x274>
   10960:	071c      	lsls	r4, r3, #28
   10962:	d40b      	bmi.n	1097c <mqtt_connect_broker+0x6c>
   10964:	4e8b      	ldr	r6, [pc, #556]	; (10b94 <mqtt_connect_broker+0x284>)
   10966:	6e38      	ldr	r0, [r7, #96]	; 0x60
   10968:	47b0      	blx	r6
   1096a:	1c03      	adds	r3, r0, #0
   1096c:	61b8      	str	r0, [r7, #24]
   1096e:	69f8      	ldr	r0, [r7, #28]
   10970:	330e      	adds	r3, #14
   10972:	1c34      	adds	r4, r6, #0
   10974:	2800      	cmp	r0, #0
   10976:	d113      	bne.n	109a0 <mqtt_connect_broker+0x90>
   10978:	1c1e      	adds	r6, r3, #0
   1097a:	e01d      	b.n	109b8 <mqtt_connect_broker+0xa8>
   1097c:	1c2b      	adds	r3, r5, #0
   1097e:	3370      	adds	r3, #112	; 0x70
   10980:	781b      	ldrb	r3, [r3, #0]
   10982:	2b00      	cmp	r3, #0
   10984:	d000      	beq.n	10988 <mqtt_connect_broker+0x78>
   10986:	e0ff      	b.n	10b88 <mqtt_connect_broker+0x278>
   10988:	1c2b      	adds	r3, r5, #0
   1098a:	3343      	adds	r3, #67	; 0x43
   1098c:	781b      	ldrb	r3, [r3, #0]
   1098e:	071a      	lsls	r2, r3, #28
   10990:	d5e8      	bpl.n	10964 <mqtt_connect_broker+0x54>
   10992:	4b81      	ldr	r3, [pc, #516]	; (10b98 <mqtt_connect_broker+0x288>)
   10994:	2000      	movs	r0, #0
   10996:	4798      	blx	r3
   10998:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   1099a:	4b80      	ldr	r3, [pc, #512]	; (10b9c <mqtt_connect_broker+0x28c>)
   1099c:	4798      	blx	r3
   1099e:	e7f3      	b.n	10988 <mqtt_connect_broker+0x78>
   109a0:	69f8      	ldr	r0, [r7, #28]
   109a2:	47b0      	blx	r6
   109a4:	69be      	ldr	r6, [r7, #24]
   109a6:	697b      	ldr	r3, [r7, #20]
   109a8:	3610      	adds	r6, #16
   109aa:	1836      	adds	r6, r6, r0
   109ac:	2b00      	cmp	r3, #0
   109ae:	d003      	beq.n	109b8 <mqtt_connect_broker+0xa8>
   109b0:	1c18      	adds	r0, r3, #0
   109b2:	47a0      	blx	r4
   109b4:	3602      	adds	r6, #2
   109b6:	1836      	adds	r6, r6, r0
   109b8:	6e78      	ldr	r0, [r7, #100]	; 0x64
   109ba:	2800      	cmp	r0, #0
   109bc:	d007      	beq.n	109ce <mqtt_connect_broker+0xbe>
   109be:	47a0      	blx	r4
   109c0:	3602      	adds	r6, #2
   109c2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
   109c4:	1830      	adds	r0, r6, r0
   109c6:	1906      	adds	r6, r0, r4
   109c8:	2c00      	cmp	r4, #0
   109ca:	d100      	bne.n	109ce <mqtt_connect_broker+0xbe>
   109cc:	1c06      	adds	r6, r0, #0
   109ce:	69fc      	ldr	r4, [r7, #28]
   109d0:	2c00      	cmp	r4, #0
   109d2:	d006      	beq.n	109e2 <mqtt_connect_broker+0xd2>
   109d4:	24c0      	movs	r4, #192	; 0xc0
   109d6:	61bc      	str	r4, [r7, #24]
   109d8:	697c      	ldr	r4, [r7, #20]
   109da:	2c00      	cmp	r4, #0
   109dc:	d103      	bne.n	109e6 <mqtt_connect_broker+0xd6>
   109de:	2480      	movs	r4, #128	; 0x80
   109e0:	e000      	b.n	109e4 <mqtt_connect_broker+0xd4>
   109e2:	69fc      	ldr	r4, [r7, #28]
   109e4:	61bc      	str	r4, [r7, #24]
   109e6:	6e7c      	ldr	r4, [r7, #100]	; 0x64
   109e8:	2c00      	cmp	r4, #0
   109ea:	d00f      	beq.n	10a0c <mqtt_connect_broker+0xfc>
   109ec:	68bc      	ldr	r4, [r7, #8]
   109ee:	2c00      	cmp	r4, #0
   109f0:	d003      	beq.n	109fa <mqtt_connect_broker+0xea>
   109f2:	69bc      	ldr	r4, [r7, #24]
   109f4:	2320      	movs	r3, #32
   109f6:	431c      	orrs	r4, r3
   109f8:	61bc      	str	r4, [r7, #24]
   109fa:	68fc      	ldr	r4, [r7, #12]
   109fc:	2303      	movs	r3, #3
   109fe:	4023      	ands	r3, r4
   10a00:	00db      	lsls	r3, r3, #3
   10a02:	69bc      	ldr	r4, [r7, #24]
   10a04:	2204      	movs	r2, #4
   10a06:	4313      	orrs	r3, r2
   10a08:	431c      	orrs	r4, r3
   10a0a:	61bc      	str	r4, [r7, #24]
   10a0c:	693c      	ldr	r4, [r7, #16]
   10a0e:	2c00      	cmp	r4, #0
   10a10:	d003      	beq.n	10a1a <mqtt_connect_broker+0x10a>
   10a12:	69bc      	ldr	r4, [r7, #24]
   10a14:	2302      	movs	r3, #2
   10a16:	431c      	orrs	r4, r3
   10a18:	61bc      	str	r4, [r7, #24]
   10a1a:	1c2b      	adds	r3, r5, #0
   10a1c:	3343      	adds	r3, #67	; 0x43
   10a1e:	781a      	ldrb	r2, [r3, #0]
   10a20:	2108      	movs	r1, #8
   10a22:	430a      	orrs	r2, r1
   10a24:	701a      	strb	r2, [r3, #0]
   10a26:	1c38      	adds	r0, r7, #0
   10a28:	9500      	str	r5, [sp, #0]
   10a2a:	3020      	adds	r0, #32
   10a2c:	6879      	ldr	r1, [r7, #4]
   10a2e:	4b5c      	ldr	r3, [pc, #368]	; (10ba0 <mqtt_connect_broker+0x290>)
   10a30:	6eea      	ldr	r2, [r5, #108]	; 0x6c
   10a32:	4c5c      	ldr	r4, [pc, #368]	; (10ba4 <mqtt_connect_broker+0x294>)
   10a34:	47a0      	blx	r4
   10a36:	1c38      	adds	r0, r7, #0
   10a38:	3020      	adds	r0, #32
   10a3a:	2110      	movs	r1, #16
   10a3c:	4b5a      	ldr	r3, [pc, #360]	; (10ba8 <mqtt_connect_broker+0x298>)
   10a3e:	4798      	blx	r3
   10a40:	2e80      	cmp	r6, #128	; 0x80
   10a42:	dd09      	ble.n	10a58 <mqtt_connect_broker+0x148>
   10a44:	2180      	movs	r1, #128	; 0x80
   10a46:	4249      	negs	r1, r1
   10a48:	4331      	orrs	r1, r6
   10a4a:	1c38      	adds	r0, r7, #0
   10a4c:	b249      	sxtb	r1, r1
   10a4e:	3020      	adds	r0, #32
   10a50:	4c55      	ldr	r4, [pc, #340]	; (10ba8 <mqtt_connect_broker+0x298>)
   10a52:	47a0      	blx	r4
   10a54:	11f6      	asrs	r6, r6, #7
   10a56:	e7f3      	b.n	10a40 <mqtt_connect_broker+0x130>
   10a58:	4b54      	ldr	r3, [pc, #336]	; (10bac <mqtt_connect_broker+0x29c>)
   10a5a:	401e      	ands	r6, r3
   10a5c:	d504      	bpl.n	10a68 <mqtt_connect_broker+0x158>
   10a5e:	2380      	movs	r3, #128	; 0x80
   10a60:	3e01      	subs	r6, #1
   10a62:	425b      	negs	r3, r3
   10a64:	431e      	orrs	r6, r3
   10a66:	3601      	adds	r6, #1
   10a68:	1c38      	adds	r0, r7, #0
   10a6a:	b271      	sxtb	r1, r6
   10a6c:	3020      	adds	r0, #32
   10a6e:	4c4e      	ldr	r4, [pc, #312]	; (10ba8 <mqtt_connect_broker+0x298>)
   10a70:	47a0      	blx	r4
   10a72:	1c38      	adds	r0, r7, #0
   10a74:	4c4e      	ldr	r4, [pc, #312]	; (10bb0 <mqtt_connect_broker+0x2a0>)
   10a76:	3020      	adds	r0, #32
   10a78:	2106      	movs	r1, #6
   10a7a:	47a0      	blx	r4
   10a7c:	1c38      	adds	r0, r7, #0
   10a7e:	4b4d      	ldr	r3, [pc, #308]	; (10bb4 <mqtt_connect_broker+0x2a4>)
   10a80:	3020      	adds	r0, #32
   10a82:	494d      	ldr	r1, [pc, #308]	; (10bb8 <mqtt_connect_broker+0x2a8>)
   10a84:	2206      	movs	r2, #6
   10a86:	4798      	blx	r3
   10a88:	1c38      	adds	r0, r7, #0
   10a8a:	3020      	adds	r0, #32
   10a8c:	2103      	movs	r1, #3
   10a8e:	4a46      	ldr	r2, [pc, #280]	; (10ba8 <mqtt_connect_broker+0x298>)
   10a90:	4790      	blx	r2
   10a92:	69bb      	ldr	r3, [r7, #24]
   10a94:	1c38      	adds	r0, r7, #0
   10a96:	4a44      	ldr	r2, [pc, #272]	; (10ba8 <mqtt_connect_broker+0x298>)
   10a98:	b259      	sxtb	r1, r3
   10a9a:	3020      	adds	r0, #32
   10a9c:	4790      	blx	r2
   10a9e:	1c2b      	adds	r3, r5, #0
   10aa0:	3360      	adds	r3, #96	; 0x60
   10aa2:	2000      	movs	r0, #0
   10aa4:	5e19      	ldrsh	r1, [r3, r0]
   10aa6:	1c38      	adds	r0, r7, #0
   10aa8:	3020      	adds	r0, #32
   10aaa:	47a0      	blx	r4
   10aac:	4e39      	ldr	r6, [pc, #228]	; (10b94 <mqtt_connect_broker+0x284>)
   10aae:	6e38      	ldr	r0, [r7, #96]	; 0x60
   10ab0:	47b0      	blx	r6
   10ab2:	b201      	sxth	r1, r0
   10ab4:	1c38      	adds	r0, r7, #0
   10ab6:	3020      	adds	r0, #32
   10ab8:	47a0      	blx	r4
   10aba:	6e38      	ldr	r0, [r7, #96]	; 0x60
   10abc:	47b0      	blx	r6
   10abe:	1c02      	adds	r2, r0, #0
   10ac0:	1c38      	adds	r0, r7, #0
   10ac2:	3020      	adds	r0, #32
   10ac4:	6e39      	ldr	r1, [r7, #96]	; 0x60
   10ac6:	4b3b      	ldr	r3, [pc, #236]	; (10bb4 <mqtt_connect_broker+0x2a4>)
   10ac8:	4798      	blx	r3
   10aca:	6e78      	ldr	r0, [r7, #100]	; 0x64
   10acc:	2800      	cmp	r0, #0
   10ace:	d015      	beq.n	10afc <mqtt_connect_broker+0x1ec>
   10ad0:	47b0      	blx	r6
   10ad2:	b201      	sxth	r1, r0
   10ad4:	1c38      	adds	r0, r7, #0
   10ad6:	3020      	adds	r0, #32
   10ad8:	47a0      	blx	r4
   10ada:	6e78      	ldr	r0, [r7, #100]	; 0x64
   10adc:	47b0      	blx	r6
   10ade:	1c02      	adds	r2, r0, #0
   10ae0:	1c38      	adds	r0, r7, #0
   10ae2:	4c34      	ldr	r4, [pc, #208]	; (10bb4 <mqtt_connect_broker+0x2a4>)
   10ae4:	3020      	adds	r0, #32
   10ae6:	6e79      	ldr	r1, [r7, #100]	; 0x64
   10ae8:	47a0      	blx	r4
   10aea:	6ebc      	ldr	r4, [r7, #104]	; 0x68
   10aec:	2c00      	cmp	r4, #0
   10aee:	d005      	beq.n	10afc <mqtt_connect_broker+0x1ec>
   10af0:	1c38      	adds	r0, r7, #0
   10af2:	1c21      	adds	r1, r4, #0
   10af4:	3020      	adds	r0, #32
   10af6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   10af8:	4c2e      	ldr	r4, [pc, #184]	; (10bb4 <mqtt_connect_broker+0x2a4>)
   10afa:	47a0      	blx	r4
   10afc:	69fc      	ldr	r4, [r7, #28]
   10afe:	2c00      	cmp	r4, #0
   10b00:	d01f      	beq.n	10b42 <mqtt_connect_broker+0x232>
   10b02:	4e24      	ldr	r6, [pc, #144]	; (10b94 <mqtt_connect_broker+0x284>)
   10b04:	1c20      	adds	r0, r4, #0
   10b06:	47b0      	blx	r6
   10b08:	b201      	sxth	r1, r0
   10b0a:	1c38      	adds	r0, r7, #0
   10b0c:	3020      	adds	r0, #32
   10b0e:	4c28      	ldr	r4, [pc, #160]	; (10bb0 <mqtt_connect_broker+0x2a0>)
   10b10:	47a0      	blx	r4
   10b12:	69f8      	ldr	r0, [r7, #28]
   10b14:	47b0      	blx	r6
   10b16:	1c02      	adds	r2, r0, #0
   10b18:	1c38      	adds	r0, r7, #0
   10b1a:	3020      	adds	r0, #32
   10b1c:	69f9      	ldr	r1, [r7, #28]
   10b1e:	4c25      	ldr	r4, [pc, #148]	; (10bb4 <mqtt_connect_broker+0x2a4>)
   10b20:	47a0      	blx	r4
   10b22:	6978      	ldr	r0, [r7, #20]
   10b24:	2800      	cmp	r0, #0
   10b26:	d00c      	beq.n	10b42 <mqtt_connect_broker+0x232>
   10b28:	47b0      	blx	r6
   10b2a:	b201      	sxth	r1, r0
   10b2c:	1c38      	adds	r0, r7, #0
   10b2e:	4a20      	ldr	r2, [pc, #128]	; (10bb0 <mqtt_connect_broker+0x2a0>)
   10b30:	3020      	adds	r0, #32
   10b32:	4790      	blx	r2
   10b34:	6978      	ldr	r0, [r7, #20]
   10b36:	47b0      	blx	r6
   10b38:	1c02      	adds	r2, r0, #0
   10b3a:	1c38      	adds	r0, r7, #0
   10b3c:	3020      	adds	r0, #32
   10b3e:	6979      	ldr	r1, [r7, #20]
   10b40:	47a0      	blx	r4
   10b42:	1c38      	adds	r0, r7, #0
   10b44:	1c2c      	adds	r4, r5, #0
   10b46:	3020      	adds	r0, #32
   10b48:	4b1c      	ldr	r3, [pc, #112]	; (10bbc <mqtt_connect_broker+0x2ac>)
   10b4a:	3443      	adds	r4, #67	; 0x43
   10b4c:	4798      	blx	r3
   10b4e:	7821      	ldrb	r1, [r4, #0]
   10b50:	0789      	lsls	r1, r1, #30
   10b52:	0fc9      	lsrs	r1, r1, #31
   10b54:	2901      	cmp	r1, #1
   10b56:	d10b      	bne.n	10b70 <mqtt_connect_broker+0x260>
   10b58:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   10b5a:	2a00      	cmp	r2, #0
   10b5c:	d108      	bne.n	10b70 <mqtt_connect_broker+0x260>
   10b5e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   10b60:	2b00      	cmp	r3, #0
   10b62:	d005      	beq.n	10b70 <mqtt_connect_broker+0x260>
   10b64:	2034      	movs	r0, #52	; 0x34
   10b66:	55c2      	strb	r2, [r0, r7]
   10b68:	1c3a      	adds	r2, r7, #0
   10b6a:	1c28      	adds	r0, r5, #0
   10b6c:	3234      	adds	r2, #52	; 0x34
   10b6e:	4798      	blx	r3
   10b70:	7823      	ldrb	r3, [r4, #0]
   10b72:	2202      	movs	r2, #2
   10b74:	4313      	orrs	r3, r2
   10b76:	2208      	movs	r2, #8
   10b78:	4393      	bics	r3, r2
   10b7a:	7023      	strb	r3, [r4, #0]
   10b7c:	2000      	movs	r0, #0
   10b7e:	e005      	b.n	10b8c <mqtt_connect_broker+0x27c>
   10b80:	2080      	movs	r0, #128	; 0x80
   10b82:	e002      	b.n	10b8a <mqtt_connect_broker+0x27a>
   10b84:	2078      	movs	r0, #120	; 0x78
   10b86:	e000      	b.n	10b8a <mqtt_connect_broker+0x27a>
   10b88:	200b      	movs	r0, #11
   10b8a:	4240      	negs	r0, r0
   10b8c:	46bd      	mov	sp, r7
   10b8e:	b013      	add	sp, #76	; 0x4c
   10b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b92:	46c0      	nop			; (mov r8, r8)
   10b94:	00011d13 	.word	0x00011d13
   10b98:	0000921d 	.word	0x0000921d
   10b9c:	0000ce1d 	.word	0x0000ce1d
   10ba0:	00010645 	.word	0x00010645
   10ba4:	0000cc2d 	.word	0x0000cc2d
   10ba8:	0000cc59 	.word	0x0000cc59
   10bac:	8000007f 	.word	0x8000007f
   10bb0:	0000cc81 	.word	0x0000cc81
   10bb4:	0000cc99 	.word	0x0000cc99
   10bb8:	00014910 	.word	0x00014910
   10bbc:	0000cc3d 	.word	0x0000cc3d

00010bc0 <mqtt_publish>:
   10bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bc2:	b093      	sub	sp, #76	; 0x4c
   10bc4:	af02      	add	r7, sp, #8
   10bc6:	60fb      	str	r3, [r7, #12]
   10bc8:	1c3b      	adds	r3, r7, #0
   10bca:	3358      	adds	r3, #88	; 0x58
   10bcc:	781b      	ldrb	r3, [r3, #0]
   10bce:	1c04      	adds	r4, r0, #0
   10bd0:	613b      	str	r3, [r7, #16]
   10bd2:	1c3b      	adds	r3, r7, #0
   10bd4:	335c      	adds	r3, #92	; 0x5c
   10bd6:	781b      	ldrb	r3, [r3, #0]
   10bd8:	6179      	str	r1, [r7, #20]
   10bda:	60ba      	str	r2, [r7, #8]
   10bdc:	607b      	str	r3, [r7, #4]
   10bde:	2800      	cmp	r0, #0
   10be0:	d101      	bne.n	10be6 <mqtt_publish+0x26>
   10be2:	2516      	movs	r5, #22
   10be4:	e0a7      	b.n	10d36 <mqtt_publish+0x176>
   10be6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   10be8:	466a      	mov	r2, sp
   10bea:	3307      	adds	r3, #7
   10bec:	08db      	lsrs	r3, r3, #3
   10bee:	00db      	lsls	r3, r3, #3
   10bf0:	1ad2      	subs	r2, r2, r3
   10bf2:	697b      	ldr	r3, [r7, #20]
   10bf4:	4695      	mov	sp, r2
   10bf6:	ae02      	add	r6, sp, #8
   10bf8:	2b00      	cmp	r3, #0
   10bfa:	d0f2      	beq.n	10be2 <mqtt_publish+0x22>
   10bfc:	693a      	ldr	r2, [r7, #16]
   10bfe:	2a02      	cmp	r2, #2
   10c00:	d8ef      	bhi.n	10be2 <mqtt_publish+0x22>
   10c02:	1c05      	adds	r5, r0, #0
   10c04:	3543      	adds	r5, #67	; 0x43
   10c06:	782b      	ldrb	r3, [r5, #0]
   10c08:	079a      	lsls	r2, r3, #30
   10c0a:	d400      	bmi.n	10c0e <mqtt_publish+0x4e>
   10c0c:	e090      	b.n	10d30 <mqtt_publish+0x170>
   10c0e:	071a      	lsls	r2, r3, #28
   10c10:	d40a      	bmi.n	10c28 <mqtt_publish+0x68>
   10c12:	4b4b      	ldr	r3, [pc, #300]	; (10d40 <mqtt_publish+0x180>)
   10c14:	6978      	ldr	r0, [r7, #20]
   10c16:	4798      	blx	r3
   10c18:	68fd      	ldr	r5, [r7, #12]
   10c1a:	693b      	ldr	r3, [r7, #16]
   10c1c:	3502      	adds	r5, #2
   10c1e:	182d      	adds	r5, r5, r0
   10c20:	2b00      	cmp	r3, #0
   10c22:	d011      	beq.n	10c48 <mqtt_publish+0x88>
   10c24:	3502      	adds	r5, #2
   10c26:	e00f      	b.n	10c48 <mqtt_publish+0x88>
   10c28:	1c03      	adds	r3, r0, #0
   10c2a:	3370      	adds	r3, #112	; 0x70
   10c2c:	781b      	ldrb	r3, [r3, #0]
   10c2e:	2b00      	cmp	r3, #0
   10c30:	d000      	beq.n	10c34 <mqtt_publish+0x74>
   10c32:	e07f      	b.n	10d34 <mqtt_publish+0x174>
   10c34:	782b      	ldrb	r3, [r5, #0]
   10c36:	071a      	lsls	r2, r3, #28
   10c38:	d5eb      	bpl.n	10c12 <mqtt_publish+0x52>
   10c3a:	4b42      	ldr	r3, [pc, #264]	; (10d44 <mqtt_publish+0x184>)
   10c3c:	2000      	movs	r0, #0
   10c3e:	4798      	blx	r3
   10c40:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10c42:	4b41      	ldr	r3, [pc, #260]	; (10d48 <mqtt_publish+0x188>)
   10c44:	4798      	blx	r3
   10c46:	e7f5      	b.n	10c34 <mqtt_publish+0x74>
   10c48:	1c23      	adds	r3, r4, #0
   10c4a:	3343      	adds	r3, #67	; 0x43
   10c4c:	781a      	ldrb	r2, [r3, #0]
   10c4e:	2108      	movs	r1, #8
   10c50:	430a      	orrs	r2, r1
   10c52:	701a      	strb	r2, [r3, #0]
   10c54:	1c38      	adds	r0, r7, #0
   10c56:	9400      	str	r4, [sp, #0]
   10c58:	1c31      	adds	r1, r6, #0
   10c5a:	302c      	adds	r0, #44	; 0x2c
   10c5c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   10c5e:	4b3b      	ldr	r3, [pc, #236]	; (10d4c <mqtt_publish+0x18c>)
   10c60:	4e3b      	ldr	r6, [pc, #236]	; (10d50 <mqtt_publish+0x190>)
   10c62:	47b0      	blx	r6
   10c64:	687b      	ldr	r3, [r7, #4]
   10c66:	2101      	movs	r1, #1
   10c68:	4019      	ands	r1, r3
   10c6a:	2330      	movs	r3, #48	; 0x30
   10c6c:	4319      	orrs	r1, r3
   10c6e:	693b      	ldr	r3, [r7, #16]
   10c70:	1c38      	adds	r0, r7, #0
   10c72:	005a      	lsls	r2, r3, #1
   10c74:	2306      	movs	r3, #6
   10c76:	4013      	ands	r3, r2
   10c78:	4319      	orrs	r1, r3
   10c7a:	302c      	adds	r0, #44	; 0x2c
   10c7c:	4b35      	ldr	r3, [pc, #212]	; (10d54 <mqtt_publish+0x194>)
   10c7e:	4798      	blx	r3
   10c80:	4b34      	ldr	r3, [pc, #208]	; (10d54 <mqtt_publish+0x194>)
   10c82:	2d80      	cmp	r5, #128	; 0x80
   10c84:	dd08      	ble.n	10c98 <mqtt_publish+0xd8>
   10c86:	2180      	movs	r1, #128	; 0x80
   10c88:	4249      	negs	r1, r1
   10c8a:	4329      	orrs	r1, r5
   10c8c:	1c38      	adds	r0, r7, #0
   10c8e:	b249      	sxtb	r1, r1
   10c90:	302c      	adds	r0, #44	; 0x2c
   10c92:	4798      	blx	r3
   10c94:	11ed      	asrs	r5, r5, #7
   10c96:	e7f3      	b.n	10c80 <mqtt_publish+0xc0>
   10c98:	4a2f      	ldr	r2, [pc, #188]	; (10d58 <mqtt_publish+0x198>)
   10c9a:	4015      	ands	r5, r2
   10c9c:	d504      	bpl.n	10ca8 <mqtt_publish+0xe8>
   10c9e:	2280      	movs	r2, #128	; 0x80
   10ca0:	3d01      	subs	r5, #1
   10ca2:	4252      	negs	r2, r2
   10ca4:	4315      	orrs	r5, r2
   10ca6:	3501      	adds	r5, #1
   10ca8:	1c38      	adds	r0, r7, #0
   10caa:	b269      	sxtb	r1, r5
   10cac:	302c      	adds	r0, #44	; 0x2c
   10cae:	4798      	blx	r3
   10cb0:	4e23      	ldr	r6, [pc, #140]	; (10d40 <mqtt_publish+0x180>)
   10cb2:	6978      	ldr	r0, [r7, #20]
   10cb4:	47b0      	blx	r6
   10cb6:	b201      	sxth	r1, r0
   10cb8:	1c38      	adds	r0, r7, #0
   10cba:	302c      	adds	r0, #44	; 0x2c
   10cbc:	4d27      	ldr	r5, [pc, #156]	; (10d5c <mqtt_publish+0x19c>)
   10cbe:	47a8      	blx	r5
   10cc0:	6978      	ldr	r0, [r7, #20]
   10cc2:	47b0      	blx	r6
   10cc4:	1c02      	adds	r2, r0, #0
   10cc6:	1c38      	adds	r0, r7, #0
   10cc8:	302c      	adds	r0, #44	; 0x2c
   10cca:	6979      	ldr	r1, [r7, #20]
   10ccc:	4e24      	ldr	r6, [pc, #144]	; (10d60 <mqtt_publish+0x1a0>)
   10cce:	47b0      	blx	r6
   10cd0:	693a      	ldr	r2, [r7, #16]
   10cd2:	2a00      	cmp	r2, #0
   10cd4:	d006      	beq.n	10ce4 <mqtt_publish+0x124>
   10cd6:	8821      	ldrh	r1, [r4, #0]
   10cd8:	1c38      	adds	r0, r7, #0
   10cda:	1c4b      	adds	r3, r1, #1
   10cdc:	8023      	strh	r3, [r4, #0]
   10cde:	b209      	sxth	r1, r1
   10ce0:	302c      	adds	r0, #44	; 0x2c
   10ce2:	47a8      	blx	r5
   10ce4:	8823      	ldrh	r3, [r4, #0]
   10ce6:	2b00      	cmp	r3, #0
   10ce8:	d101      	bne.n	10cee <mqtt_publish+0x12e>
   10cea:	2301      	movs	r3, #1
   10cec:	8023      	strh	r3, [r4, #0]
   10cee:	68bb      	ldr	r3, [r7, #8]
   10cf0:	2b00      	cmp	r3, #0
   10cf2:	d006      	beq.n	10d02 <mqtt_publish+0x142>
   10cf4:	68fa      	ldr	r2, [r7, #12]
   10cf6:	2a00      	cmp	r2, #0
   10cf8:	d003      	beq.n	10d02 <mqtt_publish+0x142>
   10cfa:	1c38      	adds	r0, r7, #0
   10cfc:	302c      	adds	r0, #44	; 0x2c
   10cfe:	1c19      	adds	r1, r3, #0
   10d00:	47b0      	blx	r6
   10d02:	1c38      	adds	r0, r7, #0
   10d04:	4b17      	ldr	r3, [pc, #92]	; (10d64 <mqtt_publish+0x1a4>)
   10d06:	302c      	adds	r0, #44	; 0x2c
   10d08:	4798      	blx	r3
   10d0a:	1c23      	adds	r3, r4, #0
   10d0c:	3343      	adds	r3, #67	; 0x43
   10d0e:	781a      	ldrb	r2, [r3, #0]
   10d10:	2108      	movs	r1, #8
   10d12:	438a      	bics	r2, r1
   10d14:	701a      	strb	r2, [r3, #0]
   10d16:	693b      	ldr	r3, [r7, #16]
   10d18:	2500      	movs	r5, #0
   10d1a:	42ab      	cmp	r3, r5
   10d1c:	d10c      	bne.n	10d38 <mqtt_publish+0x178>
   10d1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10d20:	42ab      	cmp	r3, r5
   10d22:	d009      	beq.n	10d38 <mqtt_publish+0x178>
   10d24:	1c3a      	adds	r2, r7, #0
   10d26:	1c20      	adds	r0, r4, #0
   10d28:	2102      	movs	r1, #2
   10d2a:	3218      	adds	r2, #24
   10d2c:	4798      	blx	r3
   10d2e:	e003      	b.n	10d38 <mqtt_publish+0x178>
   10d30:	2580      	movs	r5, #128	; 0x80
   10d32:	e000      	b.n	10d36 <mqtt_publish+0x176>
   10d34:	250b      	movs	r5, #11
   10d36:	426d      	negs	r5, r5
   10d38:	1c28      	adds	r0, r5, #0
   10d3a:	46bd      	mov	sp, r7
   10d3c:	b011      	add	sp, #68	; 0x44
   10d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d40:	00011d13 	.word	0x00011d13
   10d44:	0000921d 	.word	0x0000921d
   10d48:	0000ce1d 	.word	0x0000ce1d
   10d4c:	00010645 	.word	0x00010645
   10d50:	0000cc2d 	.word	0x0000cc2d
   10d54:	0000cc59 	.word	0x0000cc59
   10d58:	8000007f 	.word	0x8000007f
   10d5c:	0000cc81 	.word	0x0000cc81
   10d60:	0000cc99 	.word	0x0000cc99
   10d64:	0000cc3d 	.word	0x0000cc3d

00010d68 <mqtt_subscribe>:
   10d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d6a:	b08d      	sub	sp, #52	; 0x34
   10d6c:	af02      	add	r7, sp, #8
   10d6e:	1c04      	adds	r4, r0, #0
   10d70:	60b9      	str	r1, [r7, #8]
   10d72:	607a      	str	r2, [r7, #4]
   10d74:	d101      	bne.n	10d7a <mqtt_subscribe+0x12>
   10d76:	2016      	movs	r0, #22
   10d78:	e086      	b.n	10e88 <mqtt_subscribe+0x120>
   10d7a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   10d7c:	466a      	mov	r2, sp
   10d7e:	3307      	adds	r3, #7
   10d80:	08db      	lsrs	r3, r3, #3
   10d82:	00db      	lsls	r3, r3, #3
   10d84:	1ad2      	subs	r2, r2, r3
   10d86:	4695      	mov	sp, r2
   10d88:	ad02      	add	r5, sp, #8
   10d8a:	603d      	str	r5, [r7, #0]
   10d8c:	68bd      	ldr	r5, [r7, #8]
   10d8e:	2d00      	cmp	r5, #0
   10d90:	d0f1      	beq.n	10d76 <mqtt_subscribe+0xe>
   10d92:	687d      	ldr	r5, [r7, #4]
   10d94:	2d02      	cmp	r5, #2
   10d96:	d8ee      	bhi.n	10d76 <mqtt_subscribe+0xe>
   10d98:	1c05      	adds	r5, r0, #0
   10d9a:	3543      	adds	r5, #67	; 0x43
   10d9c:	782b      	ldrb	r3, [r5, #0]
   10d9e:	079a      	lsls	r2, r3, #30
   10da0:	d56f      	bpl.n	10e82 <mqtt_subscribe+0x11a>
   10da2:	071a      	lsls	r2, r3, #28
   10da4:	d41a      	bmi.n	10ddc <mqtt_subscribe+0x74>
   10da6:	68b8      	ldr	r0, [r7, #8]
   10da8:	4d39      	ldr	r5, [pc, #228]	; (10e90 <mqtt_subscribe+0x128>)
   10daa:	47a8      	blx	r5
   10dac:	1c25      	adds	r5, r4, #0
   10dae:	3543      	adds	r5, #67	; 0x43
   10db0:	782b      	ldrb	r3, [r5, #0]
   10db2:	2208      	movs	r2, #8
   10db4:	4313      	orrs	r3, r2
   10db6:	702b      	strb	r3, [r5, #0]
   10db8:	60fd      	str	r5, [r7, #12]
   10dba:	1d46      	adds	r6, r0, #5
   10dbc:	9400      	str	r4, [sp, #0]
   10dbe:	1c38      	adds	r0, r7, #0
   10dc0:	3014      	adds	r0, #20
   10dc2:	6839      	ldr	r1, [r7, #0]
   10dc4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   10dc6:	4b33      	ldr	r3, [pc, #204]	; (10e94 <mqtt_subscribe+0x12c>)
   10dc8:	4d33      	ldr	r5, [pc, #204]	; (10e98 <mqtt_subscribe+0x130>)
   10dca:	47a8      	blx	r5
   10dcc:	1c38      	adds	r0, r7, #0
   10dce:	217e      	movs	r1, #126	; 0x7e
   10dd0:	3014      	adds	r0, #20
   10dd2:	4249      	negs	r1, r1
   10dd4:	4b31      	ldr	r3, [pc, #196]	; (10e9c <mqtt_subscribe+0x134>)
   10dd6:	4798      	blx	r3
   10dd8:	4d2d      	ldr	r5, [pc, #180]	; (10e90 <mqtt_subscribe+0x128>)
   10dda:	e00e      	b.n	10dfa <mqtt_subscribe+0x92>
   10ddc:	1c03      	adds	r3, r0, #0
   10dde:	3370      	adds	r3, #112	; 0x70
   10de0:	781b      	ldrb	r3, [r3, #0]
   10de2:	2b00      	cmp	r3, #0
   10de4:	d14f      	bne.n	10e86 <mqtt_subscribe+0x11e>
   10de6:	782b      	ldrb	r3, [r5, #0]
   10de8:	071a      	lsls	r2, r3, #28
   10dea:	d5dc      	bpl.n	10da6 <mqtt_subscribe+0x3e>
   10dec:	4b2c      	ldr	r3, [pc, #176]	; (10ea0 <mqtt_subscribe+0x138>)
   10dee:	2000      	movs	r0, #0
   10df0:	4798      	blx	r3
   10df2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10df4:	4b2b      	ldr	r3, [pc, #172]	; (10ea4 <mqtt_subscribe+0x13c>)
   10df6:	4798      	blx	r3
   10df8:	e7f5      	b.n	10de6 <mqtt_subscribe+0x7e>
   10dfa:	4b28      	ldr	r3, [pc, #160]	; (10e9c <mqtt_subscribe+0x134>)
   10dfc:	2e80      	cmp	r6, #128	; 0x80
   10dfe:	dd08      	ble.n	10e12 <mqtt_subscribe+0xaa>
   10e00:	2180      	movs	r1, #128	; 0x80
   10e02:	4249      	negs	r1, r1
   10e04:	4331      	orrs	r1, r6
   10e06:	1c38      	adds	r0, r7, #0
   10e08:	b249      	sxtb	r1, r1
   10e0a:	3014      	adds	r0, #20
   10e0c:	4798      	blx	r3
   10e0e:	11f6      	asrs	r6, r6, #7
   10e10:	e7f3      	b.n	10dfa <mqtt_subscribe+0x92>
   10e12:	4925      	ldr	r1, [pc, #148]	; (10ea8 <mqtt_subscribe+0x140>)
   10e14:	4031      	ands	r1, r6
   10e16:	d504      	bpl.n	10e22 <mqtt_subscribe+0xba>
   10e18:	2280      	movs	r2, #128	; 0x80
   10e1a:	3901      	subs	r1, #1
   10e1c:	4252      	negs	r2, r2
   10e1e:	4311      	orrs	r1, r2
   10e20:	3101      	adds	r1, #1
   10e22:	1c38      	adds	r0, r7, #0
   10e24:	b249      	sxtb	r1, r1
   10e26:	3014      	adds	r0, #20
   10e28:	4798      	blx	r3
   10e2a:	8821      	ldrh	r1, [r4, #0]
   10e2c:	1c38      	adds	r0, r7, #0
   10e2e:	1c4b      	adds	r3, r1, #1
   10e30:	8023      	strh	r3, [r4, #0]
   10e32:	b209      	sxth	r1, r1
   10e34:	3014      	adds	r0, #20
   10e36:	4e1d      	ldr	r6, [pc, #116]	; (10eac <mqtt_subscribe+0x144>)
   10e38:	47b0      	blx	r6
   10e3a:	8823      	ldrh	r3, [r4, #0]
   10e3c:	2b00      	cmp	r3, #0
   10e3e:	d101      	bne.n	10e44 <mqtt_subscribe+0xdc>
   10e40:	2301      	movs	r3, #1
   10e42:	8023      	strh	r3, [r4, #0]
   10e44:	68b8      	ldr	r0, [r7, #8]
   10e46:	47a8      	blx	r5
   10e48:	b201      	sxth	r1, r0
   10e4a:	1c38      	adds	r0, r7, #0
   10e4c:	3014      	adds	r0, #20
   10e4e:	47b0      	blx	r6
   10e50:	68b8      	ldr	r0, [r7, #8]
   10e52:	47a8      	blx	r5
   10e54:	1c02      	adds	r2, r0, #0
   10e56:	1c38      	adds	r0, r7, #0
   10e58:	3014      	adds	r0, #20
   10e5a:	68b9      	ldr	r1, [r7, #8]
   10e5c:	4b14      	ldr	r3, [pc, #80]	; (10eb0 <mqtt_subscribe+0x148>)
   10e5e:	4798      	blx	r3
   10e60:	687d      	ldr	r5, [r7, #4]
   10e62:	1c38      	adds	r0, r7, #0
   10e64:	b269      	sxtb	r1, r5
   10e66:	3014      	adds	r0, #20
   10e68:	4b0c      	ldr	r3, [pc, #48]	; (10e9c <mqtt_subscribe+0x134>)
   10e6a:	4798      	blx	r3
   10e6c:	1c38      	adds	r0, r7, #0
   10e6e:	3014      	adds	r0, #20
   10e70:	4b10      	ldr	r3, [pc, #64]	; (10eb4 <mqtt_subscribe+0x14c>)
   10e72:	4798      	blx	r3
   10e74:	68fd      	ldr	r5, [r7, #12]
   10e76:	2208      	movs	r2, #8
   10e78:	782b      	ldrb	r3, [r5, #0]
   10e7a:	2000      	movs	r0, #0
   10e7c:	4393      	bics	r3, r2
   10e7e:	702b      	strb	r3, [r5, #0]
   10e80:	e003      	b.n	10e8a <mqtt_subscribe+0x122>
   10e82:	2080      	movs	r0, #128	; 0x80
   10e84:	e000      	b.n	10e88 <mqtt_subscribe+0x120>
   10e86:	200b      	movs	r0, #11
   10e88:	4240      	negs	r0, r0
   10e8a:	46bd      	mov	sp, r7
   10e8c:	b00b      	add	sp, #44	; 0x2c
   10e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e90:	00011d13 	.word	0x00011d13
   10e94:	00010645 	.word	0x00010645
   10e98:	0000cc2d 	.word	0x0000cc2d
   10e9c:	0000cc59 	.word	0x0000cc59
   10ea0:	0000921d 	.word	0x0000921d
   10ea4:	0000ce1d 	.word	0x0000ce1d
   10ea8:	8000007f 	.word	0x8000007f
   10eac:	0000cc81 	.word	0x0000cc81
   10eb0:	0000cc99 	.word	0x0000cc99
   10eb4:	0000cc3d 	.word	0x0000cc3d

00010eb8 <_mqtt_ping>:
   10eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10eba:	23c0      	movs	r3, #192	; 0xc0
   10ebc:	a901      	add	r1, sp, #4
   10ebe:	2500      	movs	r5, #0
   10ec0:	700b      	strb	r3, [r1, #0]
   10ec2:	704d      	strb	r5, [r1, #1]
   10ec4:	42a8      	cmp	r0, r5
   10ec6:	d019      	beq.n	10efc <_mqtt_ping+0x44>
   10ec8:	1c04      	adds	r4, r0, #0
   10eca:	3443      	adds	r4, #67	; 0x43
   10ecc:	7823      	ldrb	r3, [r4, #0]
   10ece:	079a      	lsls	r2, r3, #30
   10ed0:	d516      	bpl.n	10f00 <_mqtt_ping+0x48>
   10ed2:	071a      	lsls	r2, r3, #28
   10ed4:	d416      	bmi.n	10f04 <_mqtt_ping+0x4c>
   10ed6:	2608      	movs	r6, #8
   10ed8:	4333      	orrs	r3, r6
   10eda:	7023      	strb	r3, [r4, #0]
   10edc:	7880      	ldrb	r0, [r0, #2]
   10ede:	1c2b      	adds	r3, r5, #0
   10ee0:	b240      	sxtb	r0, r0
   10ee2:	2202      	movs	r2, #2
   10ee4:	4f09      	ldr	r7, [pc, #36]	; (10f0c <_mqtt_ping+0x54>)
   10ee6:	47b8      	blx	r7
   10ee8:	1c2b      	adds	r3, r5, #0
   10eea:	42a8      	cmp	r0, r5
   10eec:	da0c      	bge.n	10f08 <_mqtt_ping+0x50>
   10eee:	7823      	ldrb	r3, [r4, #0]
   10ef0:	43b3      	bics	r3, r6
   10ef2:	7023      	strb	r3, [r4, #0]
   10ef4:	4b06      	ldr	r3, [pc, #24]	; (10f10 <_mqtt_ping+0x58>)
   10ef6:	4798      	blx	r3
   10ef8:	1c03      	adds	r3, r0, #0
   10efa:	e005      	b.n	10f08 <_mqtt_ping+0x50>
   10efc:	2316      	movs	r3, #22
   10efe:	e002      	b.n	10f06 <_mqtt_ping+0x4e>
   10f00:	2380      	movs	r3, #128	; 0x80
   10f02:	e000      	b.n	10f06 <_mqtt_ping+0x4e>
   10f04:	230b      	movs	r3, #11
   10f06:	425b      	negs	r3, r3
   10f08:	1c18      	adds	r0, r3, #0
   10f0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10f0c:	0000afbd 	.word	0x0000afbd
   10f10:	000105f5 	.word	0x000105f5

00010f14 <mqtt_timer_callback>:
   10f14:	b570      	push	{r4, r5, r6, lr}
   10f16:	1c05      	adds	r5, r0, #0
   10f18:	b086      	sub	sp, #24
   10f1a:	1c0e      	adds	r6, r1, #0
   10f1c:	1c14      	adds	r4, r2, #0
   10f1e:	2800      	cmp	r0, #0
   10f20:	d012      	beq.n	10f48 <mqtt_timer_callback+0x34>
   10f22:	2a00      	cmp	r2, #0
   10f24:	d010      	beq.n	10f48 <mqtt_timer_callback+0x34>
   10f26:	1c10      	adds	r0, r2, #0
   10f28:	4b08      	ldr	r3, [pc, #32]	; (10f4c <mqtt_timer_callback+0x38>)
   10f2a:	4798      	blx	r3
   10f2c:	2800      	cmp	r0, #0
   10f2e:	da04      	bge.n	10f3a <mqtt_timer_callback+0x26>
   10f30:	1c28      	adds	r0, r5, #0
   10f32:	1c31      	adds	r1, r6, #0
   10f34:	2200      	movs	r2, #0
   10f36:	4b06      	ldr	r3, [pc, #24]	; (10f50 <mqtt_timer_callback+0x3c>)
   10f38:	e005      	b.n	10f46 <mqtt_timer_callback+0x32>
   10f3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10f3c:	2b00      	cmp	r3, #0
   10f3e:	d003      	beq.n	10f48 <mqtt_timer_callback+0x34>
   10f40:	1c20      	adds	r0, r4, #0
   10f42:	2107      	movs	r1, #7
   10f44:	aa01      	add	r2, sp, #4
   10f46:	4798      	blx	r3
   10f48:	b006      	add	sp, #24
   10f4a:	bd70      	pop	{r4, r5, r6, pc}
   10f4c:	00010eb9 	.word	0x00010eb9
   10f50:	0000cde1 	.word	0x0000cde1

00010f54 <_mqtt_puback>:
   10f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10f56:	2302      	movs	r3, #2
   10f58:	ac01      	add	r4, sp, #4
   10f5a:	2700      	movs	r7, #0
   10f5c:	7063      	strb	r3, [r4, #1]
   10f5e:	42b8      	cmp	r0, r7
   10f60:	d01e      	beq.n	10fa0 <_mqtt_puback+0x4c>
   10f62:	1c05      	adds	r5, r0, #0
   10f64:	3543      	adds	r5, #67	; 0x43
   10f66:	782b      	ldrb	r3, [r5, #0]
   10f68:	079e      	lsls	r6, r3, #30
   10f6a:	d51b      	bpl.n	10fa4 <_mqtt_puback+0x50>
   10f6c:	071e      	lsls	r6, r3, #28
   10f6e:	d41b      	bmi.n	10fa8 <_mqtt_puback+0x54>
   10f70:	2608      	movs	r6, #8
   10f72:	4333      	orrs	r3, r6
   10f74:	702b      	strb	r3, [r5, #0]
   10f76:	7880      	ldrb	r0, [r0, #2]
   10f78:	7021      	strb	r1, [r4, #0]
   10f7a:	0a11      	lsrs	r1, r2, #8
   10f7c:	70a1      	strb	r1, [r4, #2]
   10f7e:	70e2      	strb	r2, [r4, #3]
   10f80:	1c21      	adds	r1, r4, #0
   10f82:	1c3b      	adds	r3, r7, #0
   10f84:	b240      	sxtb	r0, r0
   10f86:	2204      	movs	r2, #4
   10f88:	4c09      	ldr	r4, [pc, #36]	; (10fb0 <_mqtt_puback+0x5c>)
   10f8a:	47a0      	blx	r4
   10f8c:	1c3b      	adds	r3, r7, #0
   10f8e:	42b8      	cmp	r0, r7
   10f90:	da0c      	bge.n	10fac <_mqtt_puback+0x58>
   10f92:	782b      	ldrb	r3, [r5, #0]
   10f94:	43b3      	bics	r3, r6
   10f96:	702b      	strb	r3, [r5, #0]
   10f98:	4b06      	ldr	r3, [pc, #24]	; (10fb4 <_mqtt_puback+0x60>)
   10f9a:	4798      	blx	r3
   10f9c:	1c03      	adds	r3, r0, #0
   10f9e:	e005      	b.n	10fac <_mqtt_puback+0x58>
   10fa0:	2316      	movs	r3, #22
   10fa2:	e002      	b.n	10faa <_mqtt_puback+0x56>
   10fa4:	2380      	movs	r3, #128	; 0x80
   10fa6:	e000      	b.n	10faa <_mqtt_puback+0x56>
   10fa8:	230b      	movs	r3, #11
   10faa:	425b      	negs	r3, r3
   10fac:	1c18      	adds	r0, r3, #0
   10fae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10fb0:	0000afbd 	.word	0x0000afbd
   10fb4:	000105f5 	.word	0x000105f5

00010fb8 <mqtt_clear_conn>:
   10fb8:	b530      	push	{r4, r5, lr}
   10fba:	1c04      	adds	r4, r0, #0
   10fbc:	b087      	sub	sp, #28
   10fbe:	2800      	cmp	r0, #0
   10fc0:	d01c      	beq.n	10ffc <mqtt_clear_conn+0x44>
   10fc2:	2002      	movs	r0, #2
   10fc4:	4b0e      	ldr	r3, [pc, #56]	; (11000 <mqtt_clear_conn+0x48>)
   10fc6:	5620      	ldrsb	r0, [r4, r0]
   10fc8:	4798      	blx	r3
   10fca:	1c23      	adds	r3, r4, #0
   10fcc:	3343      	adds	r3, #67	; 0x43
   10fce:	781a      	ldrb	r2, [r3, #0]
   10fd0:	21fc      	movs	r1, #252	; 0xfc
   10fd2:	0795      	lsls	r5, r2, #30
   10fd4:	400a      	ands	r2, r1
   10fd6:	701a      	strb	r2, [r3, #0]
   10fd8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   10fda:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   10fdc:	9301      	str	r3, [sp, #4]
   10fde:	2300      	movs	r3, #0
   10fe0:	64e3      	str	r3, [r4, #76]	; 0x4c
   10fe2:	6d21      	ldr	r1, [r4, #80]	; 0x50
   10fe4:	4b07      	ldr	r3, [pc, #28]	; (11004 <mqtt_clear_conn+0x4c>)
   10fe6:	4798      	blx	r3
   10fe8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10fea:	0fed      	lsrs	r5, r5, #31
   10fec:	2b00      	cmp	r3, #0
   10fee:	d005      	beq.n	10ffc <mqtt_clear_conn+0x44>
   10ff0:	2d00      	cmp	r5, #0
   10ff2:	d003      	beq.n	10ffc <mqtt_clear_conn+0x44>
   10ff4:	1c20      	adds	r0, r4, #0
   10ff6:	2105      	movs	r1, #5
   10ff8:	aa01      	add	r2, sp, #4
   10ffa:	4798      	blx	r3
   10ffc:	b007      	add	sp, #28
   10ffe:	bd30      	pop	{r4, r5, pc}
   11000:	0000b0e9 	.word	0x0000b0e9
   11004:	0000ce0d 	.word	0x0000ce0d

00011008 <mqtt_disconnect>:
   11008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1100a:	23e0      	movs	r3, #224	; 0xe0
   1100c:	ae01      	add	r6, sp, #4
   1100e:	2700      	movs	r7, #0
   11010:	1c05      	adds	r5, r0, #0
   11012:	7033      	strb	r3, [r6, #0]
   11014:	7077      	strb	r7, [r6, #1]
   11016:	42b8      	cmp	r0, r7
   11018:	d036      	beq.n	11088 <mqtt_disconnect+0x80>
   1101a:	1c04      	adds	r4, r0, #0
   1101c:	3443      	adds	r4, #67	; 0x43
   1101e:	7823      	ldrb	r3, [r4, #0]
   11020:	079a      	lsls	r2, r3, #30
   11022:	d533      	bpl.n	1108c <mqtt_disconnect+0x84>
   11024:	42b9      	cmp	r1, r7
   11026:	d12b      	bne.n	11080 <mqtt_disconnect+0x78>
   11028:	071a      	lsls	r2, r3, #28
   1102a:	d414      	bmi.n	11056 <mqtt_disconnect+0x4e>
   1102c:	7823      	ldrb	r3, [r4, #0]
   1102e:	2210      	movs	r2, #16
   11030:	4313      	orrs	r3, r2
   11032:	2708      	movs	r7, #8
   11034:	433b      	orrs	r3, r7
   11036:	7023      	strb	r3, [r4, #0]
   11038:	2002      	movs	r0, #2
   1103a:	5628      	ldrsb	r0, [r5, r0]
   1103c:	1c31      	adds	r1, r6, #0
   1103e:	2202      	movs	r2, #2
   11040:	2300      	movs	r3, #0
   11042:	4d15      	ldr	r5, [pc, #84]	; (11098 <mqtt_disconnect+0x90>)
   11044:	47a8      	blx	r5
   11046:	2800      	cmp	r0, #0
   11048:	da14      	bge.n	11074 <mqtt_disconnect+0x6c>
   1104a:	7823      	ldrb	r3, [r4, #0]
   1104c:	43bb      	bics	r3, r7
   1104e:	7023      	strb	r3, [r4, #0]
   11050:	4b12      	ldr	r3, [pc, #72]	; (1109c <mqtt_disconnect+0x94>)
   11052:	4798      	blx	r3
   11054:	e01e      	b.n	11094 <mqtt_disconnect+0x8c>
   11056:	1c03      	adds	r3, r0, #0
   11058:	3370      	adds	r3, #112	; 0x70
   1105a:	781b      	ldrb	r3, [r3, #0]
   1105c:	2b00      	cmp	r3, #0
   1105e:	d117      	bne.n	11090 <mqtt_disconnect+0x88>
   11060:	7823      	ldrb	r3, [r4, #0]
   11062:	071a      	lsls	r2, r3, #28
   11064:	d5e2      	bpl.n	1102c <mqtt_disconnect+0x24>
   11066:	4b0e      	ldr	r3, [pc, #56]	; (110a0 <mqtt_disconnect+0x98>)
   11068:	2000      	movs	r0, #0
   1106a:	4798      	blx	r3
   1106c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
   1106e:	4b0d      	ldr	r3, [pc, #52]	; (110a4 <mqtt_disconnect+0x9c>)
   11070:	4798      	blx	r3
   11072:	e7f5      	b.n	11060 <mqtt_disconnect+0x58>
   11074:	7823      	ldrb	r3, [r4, #0]
   11076:	2202      	movs	r2, #2
   11078:	4393      	bics	r3, r2
   1107a:	7023      	strb	r3, [r4, #0]
   1107c:	2000      	movs	r0, #0
   1107e:	e009      	b.n	11094 <mqtt_disconnect+0x8c>
   11080:	4b09      	ldr	r3, [pc, #36]	; (110a8 <mqtt_disconnect+0xa0>)
   11082:	4798      	blx	r3
   11084:	1c38      	adds	r0, r7, #0
   11086:	e005      	b.n	11094 <mqtt_disconnect+0x8c>
   11088:	2016      	movs	r0, #22
   1108a:	e002      	b.n	11092 <mqtt_disconnect+0x8a>
   1108c:	2080      	movs	r0, #128	; 0x80
   1108e:	e000      	b.n	11092 <mqtt_disconnect+0x8a>
   11090:	200b      	movs	r0, #11
   11092:	4240      	negs	r0, r0
   11094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11096:	46c0      	nop			; (mov r8, r8)
   11098:	0000afbd 	.word	0x0000afbd
   1109c:	000105f5 	.word	0x000105f5
   110a0:	0000921d 	.word	0x0000921d
   110a4:	0000ce1d 	.word	0x0000ce1d
   110a8:	00010fb9 	.word	0x00010fb9

000110ac <_mqtt_recv_handler>:
   110ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   110ae:	1c04      	adds	r4, r0, #0
   110b0:	6e40      	ldr	r0, [r0, #100]	; 0x64
   110b2:	230f      	movs	r3, #15
   110b4:	7802      	ldrb	r2, [r0, #0]
   110b6:	b087      	sub	sp, #28
   110b8:	1c15      	adds	r5, r2, #0
   110ba:	439d      	bics	r5, r3
   110bc:	2d50      	cmp	r5, #80	; 0x50
   110be:	d100      	bne.n	110c2 <_mqtt_recv_handler+0x16>
   110c0:	e098      	b.n	111f4 <_mqtt_recv_handler+0x148>
   110c2:	d808      	bhi.n	110d6 <_mqtt_recv_handler+0x2a>
   110c4:	2d30      	cmp	r5, #48	; 0x30
   110c6:	d03f      	beq.n	11148 <_mqtt_recv_handler+0x9c>
   110c8:	2d40      	cmp	r5, #64	; 0x40
   110ca:	d100      	bne.n	110ce <_mqtt_recv_handler+0x22>
   110cc:	e0b3      	b.n	11236 <_mqtt_recv_handler+0x18a>
   110ce:	2d20      	cmp	r5, #32
   110d0:	d000      	beq.n	110d4 <_mqtt_recv_handler+0x28>
   110d2:	e0c3      	b.n	1125c <_mqtt_recv_handler+0x1b0>
   110d4:	e00e      	b.n	110f4 <_mqtt_recv_handler+0x48>
   110d6:	2d70      	cmp	r5, #112	; 0x70
   110d8:	d100      	bne.n	110dc <_mqtt_recv_handler+0x30>
   110da:	e0ac      	b.n	11236 <_mqtt_recv_handler+0x18a>
   110dc:	d803      	bhi.n	110e6 <_mqtt_recv_handler+0x3a>
   110de:	2d60      	cmp	r5, #96	; 0x60
   110e0:	d100      	bne.n	110e4 <_mqtt_recv_handler+0x38>
   110e2:	e096      	b.n	11212 <_mqtt_recv_handler+0x166>
   110e4:	e0ba      	b.n	1125c <_mqtt_recv_handler+0x1b0>
   110e6:	2d90      	cmp	r5, #144	; 0x90
   110e8:	d100      	bne.n	110ec <_mqtt_recv_handler+0x40>
   110ea:	e0aa      	b.n	11242 <_mqtt_recv_handler+0x196>
   110ec:	2db0      	cmp	r5, #176	; 0xb0
   110ee:	d100      	bne.n	110f2 <_mqtt_recv_handler+0x46>
   110f0:	e0ad      	b.n	1124e <_mqtt_recv_handler+0x1a2>
   110f2:	e0b3      	b.n	1125c <_mqtt_recv_handler+0x1b0>
   110f4:	aa01      	add	r2, sp, #4
   110f6:	2303      	movs	r3, #3
   110f8:	2901      	cmp	r1, #1
   110fa:	d900      	bls.n	110fe <_mqtt_recv_handler+0x52>
   110fc:	78c3      	ldrb	r3, [r0, #3]
   110fe:	7013      	strb	r3, [r2, #0]
   11100:	7813      	ldrb	r3, [r2, #0]
   11102:	2b00      	cmp	r3, #0
   11104:	d00d      	beq.n	11122 <_mqtt_recv_handler+0x76>
   11106:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11108:	2b00      	cmp	r3, #0
   1110a:	d002      	beq.n	11112 <_mqtt_recv_handler+0x66>
   1110c:	1c20      	adds	r0, r4, #0
   1110e:	2101      	movs	r1, #1
   11110:	4798      	blx	r3
   11112:	236f      	movs	r3, #111	; 0x6f
   11114:	425b      	negs	r3, r3
   11116:	64e3      	str	r3, [r4, #76]	; 0x4c
   11118:	1c20      	adds	r0, r4, #0
   1111a:	2100      	movs	r1, #0
   1111c:	4b50      	ldr	r3, [pc, #320]	; (11260 <_mqtt_recv_handler+0x1b4>)
   1111e:	4798      	blx	r3
   11120:	e09c      	b.n	1125c <_mqtt_recv_handler+0x1b0>
   11122:	1c23      	adds	r3, r4, #0
   11124:	3343      	adds	r3, #67	; 0x43
   11126:	7819      	ldrb	r1, [r3, #0]
   11128:	0789      	lsls	r1, r1, #30
   1112a:	0fc9      	lsrs	r1, r1, #31
   1112c:	d105      	bne.n	1113a <_mqtt_recv_handler+0x8e>
   1112e:	781a      	ldrb	r2, [r3, #0]
   11130:	64e1      	str	r1, [r4, #76]	; 0x4c
   11132:	2102      	movs	r1, #2
   11134:	430a      	orrs	r2, r1
   11136:	701a      	strb	r2, [r3, #0]
   11138:	e090      	b.n	1125c <_mqtt_recv_handler+0x1b0>
   1113a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1113c:	2b00      	cmp	r3, #0
   1113e:	d100      	bne.n	11142 <_mqtt_recv_handler+0x96>
   11140:	e08c      	b.n	1125c <_mqtt_recv_handler+0x1b0>
   11142:	1c20      	adds	r0, r4, #0
   11144:	2101      	movs	r1, #1
   11146:	e088      	b.n	1125a <_mqtt_recv_handler+0x1ae>
   11148:	ad01      	add	r5, sp, #4
   1114a:	0713      	lsls	r3, r2, #28
   1114c:	7c2a      	ldrb	r2, [r5, #16]
   1114e:	0fdb      	lsrs	r3, r3, #31
   11150:	2604      	movs	r6, #4
   11152:	009b      	lsls	r3, r3, #2
   11154:	43b2      	bics	r2, r6
   11156:	431a      	orrs	r2, r3
   11158:	742a      	strb	r2, [r5, #16]
   1115a:	7807      	ldrb	r7, [r0, #0]
   1115c:	2303      	movs	r3, #3
   1115e:	b2d2      	uxtb	r2, r2
   11160:	087f      	lsrs	r7, r7, #1
   11162:	439a      	bics	r2, r3
   11164:	401f      	ands	r7, r3
   11166:	1c13      	adds	r3, r2, #0
   11168:	433b      	orrs	r3, r7
   1116a:	742b      	strb	r3, [r5, #16]
   1116c:	1c43      	adds	r3, r0, #1
   1116e:	7818      	ldrb	r0, [r3, #0]
   11170:	1c5a      	adds	r2, r3, #1
   11172:	287f      	cmp	r0, #127	; 0x7f
   11174:	d901      	bls.n	1117a <_mqtt_recv_handler+0xce>
   11176:	1c13      	adds	r3, r2, #0
   11178:	e7f9      	b.n	1116e <_mqtt_recv_handler+0xc2>
   1117a:	7858      	ldrb	r0, [r3, #1]
   1117c:	789e      	ldrb	r6, [r3, #2]
   1117e:	0200      	lsls	r0, r0, #8
   11180:	4330      	orrs	r0, r6
   11182:	3303      	adds	r3, #3
   11184:	2600      	movs	r6, #0
   11186:	6068      	str	r0, [r5, #4]
   11188:	9301      	str	r3, [sp, #4]
   1118a:	1818      	adds	r0, r3, r0
   1118c:	42b7      	cmp	r7, r6
   1118e:	d004      	beq.n	1119a <_mqtt_recv_handler+0xee>
   11190:	7806      	ldrb	r6, [r0, #0]
   11192:	7843      	ldrb	r3, [r0, #1]
   11194:	0236      	lsls	r6, r6, #8
   11196:	431e      	orrs	r6, r3
   11198:	3002      	adds	r0, #2
   1119a:	1851      	adds	r1, r2, r1
   1119c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1119e:	60a8      	str	r0, [r5, #8]
   111a0:	1a08      	subs	r0, r1, r0
   111a2:	60e8      	str	r0, [r5, #12]
   111a4:	2b00      	cmp	r3, #0
   111a6:	d003      	beq.n	111b0 <_mqtt_recv_handler+0x104>
   111a8:	1c20      	adds	r0, r4, #0
   111aa:	2106      	movs	r1, #6
   111ac:	1c2a      	adds	r2, r5, #0
   111ae:	4798      	blx	r3
   111b0:	7c2b      	ldrb	r3, [r5, #16]
   111b2:	079b      	lsls	r3, r3, #30
   111b4:	0f9b      	lsrs	r3, r3, #30
   111b6:	2b01      	cmp	r3, #1
   111b8:	d10b      	bne.n	111d2 <_mqtt_recv_handler+0x126>
   111ba:	b2b6      	uxth	r6, r6
   111bc:	1c20      	adds	r0, r4, #0
   111be:	2140      	movs	r1, #64	; 0x40
   111c0:	1c32      	adds	r2, r6, #0
   111c2:	4b28      	ldr	r3, [pc, #160]	; (11264 <_mqtt_recv_handler+0x1b8>)
   111c4:	4798      	blx	r3
   111c6:	2800      	cmp	r0, #0
   111c8:	d048      	beq.n	1125c <_mqtt_recv_handler+0x1b0>
   111ca:	1c23      	adds	r3, r4, #0
   111cc:	3348      	adds	r3, #72	; 0x48
   111ce:	2240      	movs	r2, #64	; 0x40
   111d0:	e00c      	b.n	111ec <_mqtt_recv_handler+0x140>
   111d2:	2b02      	cmp	r3, #2
   111d4:	d142      	bne.n	1125c <_mqtt_recv_handler+0x1b0>
   111d6:	b2b6      	uxth	r6, r6
   111d8:	1c20      	adds	r0, r4, #0
   111da:	2150      	movs	r1, #80	; 0x50
   111dc:	1c32      	adds	r2, r6, #0
   111de:	4b21      	ldr	r3, [pc, #132]	; (11264 <_mqtt_recv_handler+0x1b8>)
   111e0:	4798      	blx	r3
   111e2:	2800      	cmp	r0, #0
   111e4:	d03a      	beq.n	1125c <_mqtt_recv_handler+0x1b0>
   111e6:	1c23      	adds	r3, r4, #0
   111e8:	3348      	adds	r3, #72	; 0x48
   111ea:	2250      	movs	r2, #80	; 0x50
   111ec:	344a      	adds	r4, #74	; 0x4a
   111ee:	701a      	strb	r2, [r3, #0]
   111f0:	8026      	strh	r6, [r4, #0]
   111f2:	e033      	b.n	1125c <_mqtt_recv_handler+0x1b0>
   111f4:	7885      	ldrb	r5, [r0, #2]
   111f6:	78c3      	ldrb	r3, [r0, #3]
   111f8:	022d      	lsls	r5, r5, #8
   111fa:	431d      	orrs	r5, r3
   111fc:	1c20      	adds	r0, r4, #0
   111fe:	2162      	movs	r1, #98	; 0x62
   11200:	1c2a      	adds	r2, r5, #0
   11202:	4b18      	ldr	r3, [pc, #96]	; (11264 <_mqtt_recv_handler+0x1b8>)
   11204:	4798      	blx	r3
   11206:	2800      	cmp	r0, #0
   11208:	d028      	beq.n	1125c <_mqtt_recv_handler+0x1b0>
   1120a:	1c23      	adds	r3, r4, #0
   1120c:	3348      	adds	r3, #72	; 0x48
   1120e:	2260      	movs	r2, #96	; 0x60
   11210:	e00d      	b.n	1122e <_mqtt_recv_handler+0x182>
   11212:	7885      	ldrb	r5, [r0, #2]
   11214:	78c3      	ldrb	r3, [r0, #3]
   11216:	022d      	lsls	r5, r5, #8
   11218:	431d      	orrs	r5, r3
   1121a:	1c20      	adds	r0, r4, #0
   1121c:	2170      	movs	r1, #112	; 0x70
   1121e:	1c2a      	adds	r2, r5, #0
   11220:	4b10      	ldr	r3, [pc, #64]	; (11264 <_mqtt_recv_handler+0x1b8>)
   11222:	4798      	blx	r3
   11224:	2800      	cmp	r0, #0
   11226:	d019      	beq.n	1125c <_mqtt_recv_handler+0x1b0>
   11228:	1c23      	adds	r3, r4, #0
   1122a:	3348      	adds	r3, #72	; 0x48
   1122c:	2270      	movs	r2, #112	; 0x70
   1122e:	344a      	adds	r4, #74	; 0x4a
   11230:	701a      	strb	r2, [r3, #0]
   11232:	8025      	strh	r5, [r4, #0]
   11234:	e012      	b.n	1125c <_mqtt_recv_handler+0x1b0>
   11236:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11238:	2b00      	cmp	r3, #0
   1123a:	d00f      	beq.n	1125c <_mqtt_recv_handler+0x1b0>
   1123c:	1c20      	adds	r0, r4, #0
   1123e:	2102      	movs	r1, #2
   11240:	e00a      	b.n	11258 <_mqtt_recv_handler+0x1ac>
   11242:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11244:	2b00      	cmp	r3, #0
   11246:	d009      	beq.n	1125c <_mqtt_recv_handler+0x1b0>
   11248:	1c20      	adds	r0, r4, #0
   1124a:	2103      	movs	r1, #3
   1124c:	e004      	b.n	11258 <_mqtt_recv_handler+0x1ac>
   1124e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11250:	2b00      	cmp	r3, #0
   11252:	d003      	beq.n	1125c <_mqtt_recv_handler+0x1b0>
   11254:	1c20      	adds	r0, r4, #0
   11256:	2104      	movs	r1, #4
   11258:	aa01      	add	r2, sp, #4
   1125a:	4798      	blx	r3
   1125c:	b007      	add	sp, #28
   1125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11260:	00011009 	.word	0x00011009
   11264:	00010f55 	.word	0x00010f55

00011268 <mqtt_recv_packet>:
   11268:	b538      	push	{r3, r4, r5, lr}
   1126a:	1e04      	subs	r4, r0, #0
   1126c:	d017      	beq.n	1129e <mqtt_recv_packet+0x36>
   1126e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   11270:	6e83      	ldr	r3, [r0, #104]	; 0x68
   11272:	429a      	cmp	r2, r3
   11274:	d906      	bls.n	11284 <mqtt_recv_packet+0x1c>
   11276:	238b      	movs	r3, #139	; 0x8b
   11278:	425b      	negs	r3, r3
   1127a:	64c3      	str	r3, [r0, #76]	; 0x4c
   1127c:	2100      	movs	r1, #0
   1127e:	4b08      	ldr	r3, [pc, #32]	; (112a0 <mqtt_recv_packet+0x38>)
   11280:	4798      	blx	r3
   11282:	e00c      	b.n	1129e <mqtt_recv_packet+0x36>
   11284:	6c62      	ldr	r2, [r4, #68]	; 0x44
   11286:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11288:	2002      	movs	r0, #2
   1128a:	1899      	adds	r1, r3, r2
   1128c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1128e:	5620      	ldrsb	r0, [r4, r0]
   11290:	1a9a      	subs	r2, r3, r2
   11292:	b292      	uxth	r2, r2
   11294:	2300      	movs	r3, #0
   11296:	4d03      	ldr	r5, [pc, #12]	; (112a4 <mqtt_recv_packet+0x3c>)
   11298:	47a8      	blx	r5
   1129a:	2800      	cmp	r0, #0
   1129c:	d1f2      	bne.n	11284 <mqtt_recv_packet+0x1c>
   1129e:	bd38      	pop	{r3, r4, r5, pc}
   112a0:	00011009 	.word	0x00011009
   112a4:	0000b055 	.word	0x0000b055

000112a8 <mqtt_recved_packet>:
   112a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   112aa:	1e04      	subs	r4, r0, #0
   112ac:	d042      	beq.n	11334 <mqtt_recved_packet+0x8c>
   112ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
   112b0:	6e67      	ldr	r7, [r4, #100]	; 0x64
   112b2:	18ca      	adds	r2, r1, r3
   112b4:	2301      	movs	r3, #1
   112b6:	9701      	str	r7, [sp, #4]
   112b8:	6462      	str	r2, [r4, #68]	; 0x44
   112ba:	2600      	movs	r6, #0
   112bc:	1c1d      	adds	r5, r3, #0
   112be:	42a9      	cmp	r1, r5
   112c0:	dc03      	bgt.n	112ca <mqtt_recved_packet+0x22>
   112c2:	1c20      	adds	r0, r4, #0
   112c4:	4b1c      	ldr	r3, [pc, #112]	; (11338 <mqtt_recved_packet+0x90>)
   112c6:	4798      	blx	r3
   112c8:	e034      	b.n	11334 <mqtt_recved_packet+0x8c>
   112ca:	9f01      	ldr	r7, [sp, #4]
   112cc:	5d78      	ldrb	r0, [r7, r5]
   112ce:	01df      	lsls	r7, r3, #7
   112d0:	46bc      	mov	ip, r7
   112d2:	2d03      	cmp	r5, #3
   112d4:	d101      	bne.n	112da <mqtt_recved_packet+0x32>
   112d6:	234d      	movs	r3, #77	; 0x4d
   112d8:	e00e      	b.n	112f8 <mqtt_recved_packet+0x50>
   112da:	277f      	movs	r7, #127	; 0x7f
   112dc:	4007      	ands	r7, r0
   112de:	437b      	muls	r3, r7
   112e0:	b240      	sxtb	r0, r0
   112e2:	3501      	adds	r5, #1
   112e4:	18f6      	adds	r6, r6, r3
   112e6:	2800      	cmp	r0, #0
   112e8:	da01      	bge.n	112ee <mqtt_recved_packet+0x46>
   112ea:	4663      	mov	r3, ip
   112ec:	e7e7      	b.n	112be <mqtt_recved_packet+0x16>
   112ee:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   112f0:	19af      	adds	r7, r5, r6
   112f2:	429f      	cmp	r7, r3
   112f4:	d907      	bls.n	11306 <mqtt_recved_packet+0x5e>
   112f6:	238b      	movs	r3, #139	; 0x8b
   112f8:	425b      	negs	r3, r3
   112fa:	64e3      	str	r3, [r4, #76]	; 0x4c
   112fc:	1c20      	adds	r0, r4, #0
   112fe:	2100      	movs	r1, #0
   11300:	4b0e      	ldr	r3, [pc, #56]	; (1133c <mqtt_recved_packet+0x94>)
   11302:	4798      	blx	r3
   11304:	e016      	b.n	11334 <mqtt_recved_packet+0x8c>
   11306:	42ba      	cmp	r2, r7
   11308:	d314      	bcc.n	11334 <mqtt_recved_packet+0x8c>
   1130a:	4b0d      	ldr	r3, [pc, #52]	; (11340 <mqtt_recved_packet+0x98>)
   1130c:	1c20      	adds	r0, r4, #0
   1130e:	1c31      	adds	r1, r6, #0
   11310:	4798      	blx	r3
   11312:	6c63      	ldr	r3, [r4, #68]	; 0x44
   11314:	42bb      	cmp	r3, r7
   11316:	d102      	bne.n	1131e <mqtt_recved_packet+0x76>
   11318:	2300      	movs	r3, #0
   1131a:	6463      	str	r3, [r4, #68]	; 0x44
   1131c:	e00a      	b.n	11334 <mqtt_recved_packet+0x8c>
   1131e:	1b9e      	subs	r6, r3, r6
   11320:	9b01      	ldr	r3, [sp, #4]
   11322:	1b75      	subs	r5, r6, r5
   11324:	19d9      	adds	r1, r3, r7
   11326:	1c18      	adds	r0, r3, #0
   11328:	1c2a      	adds	r2, r5, #0
   1132a:	4b06      	ldr	r3, [pc, #24]	; (11344 <mqtt_recved_packet+0x9c>)
   1132c:	4798      	blx	r3
   1132e:	6465      	str	r5, [r4, #68]	; 0x44
   11330:	2100      	movs	r1, #0
   11332:	e7bc      	b.n	112ae <mqtt_recved_packet+0x6>
   11334:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   11336:	46c0      	nop			; (mov r8, r8)
   11338:	00011269 	.word	0x00011269
   1133c:	00011009 	.word	0x00011009
   11340:	000110ad 	.word	0x000110ad
   11344:	0001182b 	.word	0x0001182b

00011348 <mqtt_socket_event_handler>:
   11348:	b570      	push	{r4, r5, r6, lr}
   1134a:	4d37      	ldr	r5, [pc, #220]	; (11428 <mqtt_socket_event_handler+0xe0>)
   1134c:	0086      	lsls	r6, r0, #2
   1134e:	5974      	ldr	r4, [r6, r5]
   11350:	b086      	sub	sp, #24
   11352:	2c00      	cmp	r4, #0
   11354:	d066      	beq.n	11424 <mqtt_socket_event_handler+0xdc>
   11356:	2906      	cmp	r1, #6
   11358:	d02b      	beq.n	113b2 <mqtt_socket_event_handler+0x6a>
   1135a:	2907      	cmp	r1, #7
   1135c:	d039      	beq.n	113d2 <mqtt_socket_event_handler+0x8a>
   1135e:	2905      	cmp	r1, #5
   11360:	d160      	bne.n	11424 <mqtt_socket_event_handler+0xdc>
   11362:	2001      	movs	r0, #1
   11364:	5610      	ldrsb	r0, [r2, r0]
   11366:	4b31      	ldr	r3, [pc, #196]	; (1142c <mqtt_socket_event_handler+0xe4>)
   11368:	4798      	blx	r3
   1136a:	9001      	str	r0, [sp, #4]
   1136c:	2800      	cmp	r0, #0
   1136e:	da06      	bge.n	1137e <mqtt_socket_event_handler+0x36>
   11370:	2002      	movs	r0, #2
   11372:	4b2f      	ldr	r3, [pc, #188]	; (11430 <mqtt_socket_event_handler+0xe8>)
   11374:	5620      	ldrsb	r0, [r4, r0]
   11376:	4798      	blx	r3
   11378:	2300      	movs	r3, #0
   1137a:	5173      	str	r3, [r6, r5]
   1137c:	e011      	b.n	113a2 <mqtt_socket_event_handler+0x5a>
   1137e:	1c23      	adds	r3, r4, #0
   11380:	3343      	adds	r3, #67	; 0x43
   11382:	781a      	ldrb	r2, [r3, #0]
   11384:	2101      	movs	r1, #1
   11386:	430a      	orrs	r2, r1
   11388:	701a      	strb	r2, [r3, #0]
   1138a:	331d      	adds	r3, #29
   1138c:	881b      	ldrh	r3, [r3, #0]
   1138e:	2b00      	cmp	r3, #0
   11390:	d004      	beq.n	1139c <mqtt_socket_event_handler+0x54>
   11392:	6de0      	ldr	r0, [r4, #92]	; 0x5c
   11394:	6d21      	ldr	r1, [r4, #80]	; 0x50
   11396:	2200      	movs	r2, #0
   11398:	4b26      	ldr	r3, [pc, #152]	; (11434 <mqtt_socket_event_handler+0xec>)
   1139a:	4798      	blx	r3
   1139c:	1c20      	adds	r0, r4, #0
   1139e:	4b26      	ldr	r3, [pc, #152]	; (11438 <mqtt_socket_event_handler+0xf0>)
   113a0:	4798      	blx	r3
   113a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   113a4:	2b00      	cmp	r3, #0
   113a6:	d03d      	beq.n	11424 <mqtt_socket_event_handler+0xdc>
   113a8:	1c20      	adds	r0, r4, #0
   113aa:	2100      	movs	r1, #0
   113ac:	aa01      	add	r2, sp, #4
   113ae:	4798      	blx	r3
   113b0:	e038      	b.n	11424 <mqtt_socket_event_handler+0xdc>
   113b2:	2304      	movs	r3, #4
   113b4:	5ed1      	ldrsh	r1, [r2, r3]
   113b6:	2900      	cmp	r1, #0
   113b8:	dd03      	ble.n	113c2 <mqtt_socket_event_handler+0x7a>
   113ba:	1c20      	adds	r0, r4, #0
   113bc:	4b1f      	ldr	r3, [pc, #124]	; (1143c <mqtt_socket_event_handler+0xf4>)
   113be:	4798      	blx	r3
   113c0:	e003      	b.n	113ca <mqtt_socket_event_handler+0x82>
   113c2:	1c0b      	adds	r3, r1, #0
   113c4:	1c08      	adds	r0, r1, #0
   113c6:	330d      	adds	r3, #13
   113c8:	d11a      	bne.n	11400 <mqtt_socket_event_handler+0xb8>
   113ca:	4b1b      	ldr	r3, [pc, #108]	; (11438 <mqtt_socket_event_handler+0xf0>)
   113cc:	1c20      	adds	r0, r4, #0
   113ce:	4798      	blx	r3
   113d0:	e028      	b.n	11424 <mqtt_socket_event_handler+0xdc>
   113d2:	1c23      	adds	r3, r4, #0
   113d4:	3343      	adds	r3, #67	; 0x43
   113d6:	8810      	ldrh	r0, [r2, #0]
   113d8:	781a      	ldrb	r2, [r3, #0]
   113da:	0751      	lsls	r1, r2, #29
   113dc:	d402      	bmi.n	113e4 <mqtt_socket_event_handler+0x9c>
   113de:	2108      	movs	r1, #8
   113e0:	438a      	bics	r2, r1
   113e2:	701a      	strb	r2, [r3, #0]
   113e4:	781a      	ldrb	r2, [r3, #0]
   113e6:	2104      	movs	r1, #4
   113e8:	438a      	bics	r2, r1
   113ea:	701a      	strb	r2, [r3, #0]
   113ec:	06d3      	lsls	r3, r2, #27
   113ee:	0fde      	lsrs	r6, r3, #31
   113f0:	b200      	sxth	r0, r0
   113f2:	2b00      	cmp	r3, #0
   113f4:	db02      	blt.n	113fc <mqtt_socket_event_handler+0xb4>
   113f6:	2800      	cmp	r0, #0
   113f8:	da08      	bge.n	1140c <mqtt_socket_event_handler+0xc4>
   113fa:	e001      	b.n	11400 <mqtt_socket_event_handler+0xb8>
   113fc:	2800      	cmp	r0, #0
   113fe:	da02      	bge.n	11406 <mqtt_socket_event_handler+0xbe>
   11400:	4b0a      	ldr	r3, [pc, #40]	; (1142c <mqtt_socket_event_handler+0xe4>)
   11402:	4798      	blx	r3
   11404:	64e0      	str	r0, [r4, #76]	; 0x4c
   11406:	1c20      	adds	r0, r4, #0
   11408:	4b0d      	ldr	r3, [pc, #52]	; (11440 <mqtt_socket_event_handler+0xf8>)
   1140a:	e7e0      	b.n	113ce <mqtt_socket_event_handler+0x86>
   1140c:	1c25      	adds	r5, r4, #0
   1140e:	3548      	adds	r5, #72	; 0x48
   11410:	7829      	ldrb	r1, [r5, #0]
   11412:	2900      	cmp	r1, #0
   11414:	d006      	beq.n	11424 <mqtt_socket_event_handler+0xdc>
   11416:	1c23      	adds	r3, r4, #0
   11418:	334a      	adds	r3, #74	; 0x4a
   1141a:	881a      	ldrh	r2, [r3, #0]
   1141c:	1c20      	adds	r0, r4, #0
   1141e:	4b09      	ldr	r3, [pc, #36]	; (11444 <mqtt_socket_event_handler+0xfc>)
   11420:	4798      	blx	r3
   11422:	702e      	strb	r6, [r5, #0]
   11424:	b006      	add	sp, #24
   11426:	bd70      	pop	{r4, r5, r6, pc}
   11428:	200003d4 	.word	0x200003d4
   1142c:	000105f5 	.word	0x000105f5
   11430:	0000b0e9 	.word	0x0000b0e9
   11434:	0000cde1 	.word	0x0000cde1
   11438:	00011269 	.word	0x00011269
   1143c:	000112a9 	.word	0x000112a9
   11440:	00010fb9 	.word	0x00010fb9
   11444:	00010f55 	.word	0x00010f55

00011448 <__gnu_thumb1_case_uqi>:
   11448:	b402      	push	{r1}
   1144a:	4671      	mov	r1, lr
   1144c:	0849      	lsrs	r1, r1, #1
   1144e:	0049      	lsls	r1, r1, #1
   11450:	5c09      	ldrb	r1, [r1, r0]
   11452:	0049      	lsls	r1, r1, #1
   11454:	448e      	add	lr, r1
   11456:	bc02      	pop	{r1}
   11458:	4770      	bx	lr
   1145a:	46c0      	nop			; (mov r8, r8)

0001145c <__udivsi3>:
   1145c:	2200      	movs	r2, #0
   1145e:	0843      	lsrs	r3, r0, #1
   11460:	428b      	cmp	r3, r1
   11462:	d374      	bcc.n	1154e <__udivsi3+0xf2>
   11464:	0903      	lsrs	r3, r0, #4
   11466:	428b      	cmp	r3, r1
   11468:	d35f      	bcc.n	1152a <__udivsi3+0xce>
   1146a:	0a03      	lsrs	r3, r0, #8
   1146c:	428b      	cmp	r3, r1
   1146e:	d344      	bcc.n	114fa <__udivsi3+0x9e>
   11470:	0b03      	lsrs	r3, r0, #12
   11472:	428b      	cmp	r3, r1
   11474:	d328      	bcc.n	114c8 <__udivsi3+0x6c>
   11476:	0c03      	lsrs	r3, r0, #16
   11478:	428b      	cmp	r3, r1
   1147a:	d30d      	bcc.n	11498 <__udivsi3+0x3c>
   1147c:	22ff      	movs	r2, #255	; 0xff
   1147e:	0209      	lsls	r1, r1, #8
   11480:	ba12      	rev	r2, r2
   11482:	0c03      	lsrs	r3, r0, #16
   11484:	428b      	cmp	r3, r1
   11486:	d302      	bcc.n	1148e <__udivsi3+0x32>
   11488:	1212      	asrs	r2, r2, #8
   1148a:	0209      	lsls	r1, r1, #8
   1148c:	d065      	beq.n	1155a <__udivsi3+0xfe>
   1148e:	0b03      	lsrs	r3, r0, #12
   11490:	428b      	cmp	r3, r1
   11492:	d319      	bcc.n	114c8 <__udivsi3+0x6c>
   11494:	e000      	b.n	11498 <__udivsi3+0x3c>
   11496:	0a09      	lsrs	r1, r1, #8
   11498:	0bc3      	lsrs	r3, r0, #15
   1149a:	428b      	cmp	r3, r1
   1149c:	d301      	bcc.n	114a2 <__udivsi3+0x46>
   1149e:	03cb      	lsls	r3, r1, #15
   114a0:	1ac0      	subs	r0, r0, r3
   114a2:	4152      	adcs	r2, r2
   114a4:	0b83      	lsrs	r3, r0, #14
   114a6:	428b      	cmp	r3, r1
   114a8:	d301      	bcc.n	114ae <__udivsi3+0x52>
   114aa:	038b      	lsls	r3, r1, #14
   114ac:	1ac0      	subs	r0, r0, r3
   114ae:	4152      	adcs	r2, r2
   114b0:	0b43      	lsrs	r3, r0, #13
   114b2:	428b      	cmp	r3, r1
   114b4:	d301      	bcc.n	114ba <__udivsi3+0x5e>
   114b6:	034b      	lsls	r3, r1, #13
   114b8:	1ac0      	subs	r0, r0, r3
   114ba:	4152      	adcs	r2, r2
   114bc:	0b03      	lsrs	r3, r0, #12
   114be:	428b      	cmp	r3, r1
   114c0:	d301      	bcc.n	114c6 <__udivsi3+0x6a>
   114c2:	030b      	lsls	r3, r1, #12
   114c4:	1ac0      	subs	r0, r0, r3
   114c6:	4152      	adcs	r2, r2
   114c8:	0ac3      	lsrs	r3, r0, #11
   114ca:	428b      	cmp	r3, r1
   114cc:	d301      	bcc.n	114d2 <__udivsi3+0x76>
   114ce:	02cb      	lsls	r3, r1, #11
   114d0:	1ac0      	subs	r0, r0, r3
   114d2:	4152      	adcs	r2, r2
   114d4:	0a83      	lsrs	r3, r0, #10
   114d6:	428b      	cmp	r3, r1
   114d8:	d301      	bcc.n	114de <__udivsi3+0x82>
   114da:	028b      	lsls	r3, r1, #10
   114dc:	1ac0      	subs	r0, r0, r3
   114de:	4152      	adcs	r2, r2
   114e0:	0a43      	lsrs	r3, r0, #9
   114e2:	428b      	cmp	r3, r1
   114e4:	d301      	bcc.n	114ea <__udivsi3+0x8e>
   114e6:	024b      	lsls	r3, r1, #9
   114e8:	1ac0      	subs	r0, r0, r3
   114ea:	4152      	adcs	r2, r2
   114ec:	0a03      	lsrs	r3, r0, #8
   114ee:	428b      	cmp	r3, r1
   114f0:	d301      	bcc.n	114f6 <__udivsi3+0x9a>
   114f2:	020b      	lsls	r3, r1, #8
   114f4:	1ac0      	subs	r0, r0, r3
   114f6:	4152      	adcs	r2, r2
   114f8:	d2cd      	bcs.n	11496 <__udivsi3+0x3a>
   114fa:	09c3      	lsrs	r3, r0, #7
   114fc:	428b      	cmp	r3, r1
   114fe:	d301      	bcc.n	11504 <__udivsi3+0xa8>
   11500:	01cb      	lsls	r3, r1, #7
   11502:	1ac0      	subs	r0, r0, r3
   11504:	4152      	adcs	r2, r2
   11506:	0983      	lsrs	r3, r0, #6
   11508:	428b      	cmp	r3, r1
   1150a:	d301      	bcc.n	11510 <__udivsi3+0xb4>
   1150c:	018b      	lsls	r3, r1, #6
   1150e:	1ac0      	subs	r0, r0, r3
   11510:	4152      	adcs	r2, r2
   11512:	0943      	lsrs	r3, r0, #5
   11514:	428b      	cmp	r3, r1
   11516:	d301      	bcc.n	1151c <__udivsi3+0xc0>
   11518:	014b      	lsls	r3, r1, #5
   1151a:	1ac0      	subs	r0, r0, r3
   1151c:	4152      	adcs	r2, r2
   1151e:	0903      	lsrs	r3, r0, #4
   11520:	428b      	cmp	r3, r1
   11522:	d301      	bcc.n	11528 <__udivsi3+0xcc>
   11524:	010b      	lsls	r3, r1, #4
   11526:	1ac0      	subs	r0, r0, r3
   11528:	4152      	adcs	r2, r2
   1152a:	08c3      	lsrs	r3, r0, #3
   1152c:	428b      	cmp	r3, r1
   1152e:	d301      	bcc.n	11534 <__udivsi3+0xd8>
   11530:	00cb      	lsls	r3, r1, #3
   11532:	1ac0      	subs	r0, r0, r3
   11534:	4152      	adcs	r2, r2
   11536:	0883      	lsrs	r3, r0, #2
   11538:	428b      	cmp	r3, r1
   1153a:	d301      	bcc.n	11540 <__udivsi3+0xe4>
   1153c:	008b      	lsls	r3, r1, #2
   1153e:	1ac0      	subs	r0, r0, r3
   11540:	4152      	adcs	r2, r2
   11542:	0843      	lsrs	r3, r0, #1
   11544:	428b      	cmp	r3, r1
   11546:	d301      	bcc.n	1154c <__udivsi3+0xf0>
   11548:	004b      	lsls	r3, r1, #1
   1154a:	1ac0      	subs	r0, r0, r3
   1154c:	4152      	adcs	r2, r2
   1154e:	1a41      	subs	r1, r0, r1
   11550:	d200      	bcs.n	11554 <__udivsi3+0xf8>
   11552:	4601      	mov	r1, r0
   11554:	4152      	adcs	r2, r2
   11556:	4610      	mov	r0, r2
   11558:	4770      	bx	lr
   1155a:	e7ff      	b.n	1155c <__udivsi3+0x100>
   1155c:	b501      	push	{r0, lr}
   1155e:	2000      	movs	r0, #0
   11560:	f000 f8f0 	bl	11744 <__aeabi_idiv0>
   11564:	bd02      	pop	{r1, pc}
   11566:	46c0      	nop			; (mov r8, r8)

00011568 <__aeabi_uidivmod>:
   11568:	2900      	cmp	r1, #0
   1156a:	d0f7      	beq.n	1155c <__udivsi3+0x100>
   1156c:	e776      	b.n	1145c <__udivsi3>
   1156e:	4770      	bx	lr

00011570 <__divsi3>:
   11570:	4603      	mov	r3, r0
   11572:	430b      	orrs	r3, r1
   11574:	d47f      	bmi.n	11676 <__divsi3+0x106>
   11576:	2200      	movs	r2, #0
   11578:	0843      	lsrs	r3, r0, #1
   1157a:	428b      	cmp	r3, r1
   1157c:	d374      	bcc.n	11668 <__divsi3+0xf8>
   1157e:	0903      	lsrs	r3, r0, #4
   11580:	428b      	cmp	r3, r1
   11582:	d35f      	bcc.n	11644 <__divsi3+0xd4>
   11584:	0a03      	lsrs	r3, r0, #8
   11586:	428b      	cmp	r3, r1
   11588:	d344      	bcc.n	11614 <__divsi3+0xa4>
   1158a:	0b03      	lsrs	r3, r0, #12
   1158c:	428b      	cmp	r3, r1
   1158e:	d328      	bcc.n	115e2 <__divsi3+0x72>
   11590:	0c03      	lsrs	r3, r0, #16
   11592:	428b      	cmp	r3, r1
   11594:	d30d      	bcc.n	115b2 <__divsi3+0x42>
   11596:	22ff      	movs	r2, #255	; 0xff
   11598:	0209      	lsls	r1, r1, #8
   1159a:	ba12      	rev	r2, r2
   1159c:	0c03      	lsrs	r3, r0, #16
   1159e:	428b      	cmp	r3, r1
   115a0:	d302      	bcc.n	115a8 <__divsi3+0x38>
   115a2:	1212      	asrs	r2, r2, #8
   115a4:	0209      	lsls	r1, r1, #8
   115a6:	d065      	beq.n	11674 <__divsi3+0x104>
   115a8:	0b03      	lsrs	r3, r0, #12
   115aa:	428b      	cmp	r3, r1
   115ac:	d319      	bcc.n	115e2 <__divsi3+0x72>
   115ae:	e000      	b.n	115b2 <__divsi3+0x42>
   115b0:	0a09      	lsrs	r1, r1, #8
   115b2:	0bc3      	lsrs	r3, r0, #15
   115b4:	428b      	cmp	r3, r1
   115b6:	d301      	bcc.n	115bc <__divsi3+0x4c>
   115b8:	03cb      	lsls	r3, r1, #15
   115ba:	1ac0      	subs	r0, r0, r3
   115bc:	4152      	adcs	r2, r2
   115be:	0b83      	lsrs	r3, r0, #14
   115c0:	428b      	cmp	r3, r1
   115c2:	d301      	bcc.n	115c8 <__divsi3+0x58>
   115c4:	038b      	lsls	r3, r1, #14
   115c6:	1ac0      	subs	r0, r0, r3
   115c8:	4152      	adcs	r2, r2
   115ca:	0b43      	lsrs	r3, r0, #13
   115cc:	428b      	cmp	r3, r1
   115ce:	d301      	bcc.n	115d4 <__divsi3+0x64>
   115d0:	034b      	lsls	r3, r1, #13
   115d2:	1ac0      	subs	r0, r0, r3
   115d4:	4152      	adcs	r2, r2
   115d6:	0b03      	lsrs	r3, r0, #12
   115d8:	428b      	cmp	r3, r1
   115da:	d301      	bcc.n	115e0 <__divsi3+0x70>
   115dc:	030b      	lsls	r3, r1, #12
   115de:	1ac0      	subs	r0, r0, r3
   115e0:	4152      	adcs	r2, r2
   115e2:	0ac3      	lsrs	r3, r0, #11
   115e4:	428b      	cmp	r3, r1
   115e6:	d301      	bcc.n	115ec <__divsi3+0x7c>
   115e8:	02cb      	lsls	r3, r1, #11
   115ea:	1ac0      	subs	r0, r0, r3
   115ec:	4152      	adcs	r2, r2
   115ee:	0a83      	lsrs	r3, r0, #10
   115f0:	428b      	cmp	r3, r1
   115f2:	d301      	bcc.n	115f8 <__divsi3+0x88>
   115f4:	028b      	lsls	r3, r1, #10
   115f6:	1ac0      	subs	r0, r0, r3
   115f8:	4152      	adcs	r2, r2
   115fa:	0a43      	lsrs	r3, r0, #9
   115fc:	428b      	cmp	r3, r1
   115fe:	d301      	bcc.n	11604 <__divsi3+0x94>
   11600:	024b      	lsls	r3, r1, #9
   11602:	1ac0      	subs	r0, r0, r3
   11604:	4152      	adcs	r2, r2
   11606:	0a03      	lsrs	r3, r0, #8
   11608:	428b      	cmp	r3, r1
   1160a:	d301      	bcc.n	11610 <__divsi3+0xa0>
   1160c:	020b      	lsls	r3, r1, #8
   1160e:	1ac0      	subs	r0, r0, r3
   11610:	4152      	adcs	r2, r2
   11612:	d2cd      	bcs.n	115b0 <__divsi3+0x40>
   11614:	09c3      	lsrs	r3, r0, #7
   11616:	428b      	cmp	r3, r1
   11618:	d301      	bcc.n	1161e <__divsi3+0xae>
   1161a:	01cb      	lsls	r3, r1, #7
   1161c:	1ac0      	subs	r0, r0, r3
   1161e:	4152      	adcs	r2, r2
   11620:	0983      	lsrs	r3, r0, #6
   11622:	428b      	cmp	r3, r1
   11624:	d301      	bcc.n	1162a <__divsi3+0xba>
   11626:	018b      	lsls	r3, r1, #6
   11628:	1ac0      	subs	r0, r0, r3
   1162a:	4152      	adcs	r2, r2
   1162c:	0943      	lsrs	r3, r0, #5
   1162e:	428b      	cmp	r3, r1
   11630:	d301      	bcc.n	11636 <__divsi3+0xc6>
   11632:	014b      	lsls	r3, r1, #5
   11634:	1ac0      	subs	r0, r0, r3
   11636:	4152      	adcs	r2, r2
   11638:	0903      	lsrs	r3, r0, #4
   1163a:	428b      	cmp	r3, r1
   1163c:	d301      	bcc.n	11642 <__divsi3+0xd2>
   1163e:	010b      	lsls	r3, r1, #4
   11640:	1ac0      	subs	r0, r0, r3
   11642:	4152      	adcs	r2, r2
   11644:	08c3      	lsrs	r3, r0, #3
   11646:	428b      	cmp	r3, r1
   11648:	d301      	bcc.n	1164e <__divsi3+0xde>
   1164a:	00cb      	lsls	r3, r1, #3
   1164c:	1ac0      	subs	r0, r0, r3
   1164e:	4152      	adcs	r2, r2
   11650:	0883      	lsrs	r3, r0, #2
   11652:	428b      	cmp	r3, r1
   11654:	d301      	bcc.n	1165a <__divsi3+0xea>
   11656:	008b      	lsls	r3, r1, #2
   11658:	1ac0      	subs	r0, r0, r3
   1165a:	4152      	adcs	r2, r2
   1165c:	0843      	lsrs	r3, r0, #1
   1165e:	428b      	cmp	r3, r1
   11660:	d301      	bcc.n	11666 <__divsi3+0xf6>
   11662:	004b      	lsls	r3, r1, #1
   11664:	1ac0      	subs	r0, r0, r3
   11666:	4152      	adcs	r2, r2
   11668:	1a41      	subs	r1, r0, r1
   1166a:	d200      	bcs.n	1166e <__divsi3+0xfe>
   1166c:	4601      	mov	r1, r0
   1166e:	4152      	adcs	r2, r2
   11670:	4610      	mov	r0, r2
   11672:	4770      	bx	lr
   11674:	e05d      	b.n	11732 <__divsi3+0x1c2>
   11676:	0fca      	lsrs	r2, r1, #31
   11678:	d000      	beq.n	1167c <__divsi3+0x10c>
   1167a:	4249      	negs	r1, r1
   1167c:	1003      	asrs	r3, r0, #32
   1167e:	d300      	bcc.n	11682 <__divsi3+0x112>
   11680:	4240      	negs	r0, r0
   11682:	4053      	eors	r3, r2
   11684:	2200      	movs	r2, #0
   11686:	469c      	mov	ip, r3
   11688:	0903      	lsrs	r3, r0, #4
   1168a:	428b      	cmp	r3, r1
   1168c:	d32d      	bcc.n	116ea <__divsi3+0x17a>
   1168e:	0a03      	lsrs	r3, r0, #8
   11690:	428b      	cmp	r3, r1
   11692:	d312      	bcc.n	116ba <__divsi3+0x14a>
   11694:	22fc      	movs	r2, #252	; 0xfc
   11696:	0189      	lsls	r1, r1, #6
   11698:	ba12      	rev	r2, r2
   1169a:	0a03      	lsrs	r3, r0, #8
   1169c:	428b      	cmp	r3, r1
   1169e:	d30c      	bcc.n	116ba <__divsi3+0x14a>
   116a0:	0189      	lsls	r1, r1, #6
   116a2:	1192      	asrs	r2, r2, #6
   116a4:	428b      	cmp	r3, r1
   116a6:	d308      	bcc.n	116ba <__divsi3+0x14a>
   116a8:	0189      	lsls	r1, r1, #6
   116aa:	1192      	asrs	r2, r2, #6
   116ac:	428b      	cmp	r3, r1
   116ae:	d304      	bcc.n	116ba <__divsi3+0x14a>
   116b0:	0189      	lsls	r1, r1, #6
   116b2:	d03a      	beq.n	1172a <__divsi3+0x1ba>
   116b4:	1192      	asrs	r2, r2, #6
   116b6:	e000      	b.n	116ba <__divsi3+0x14a>
   116b8:	0989      	lsrs	r1, r1, #6
   116ba:	09c3      	lsrs	r3, r0, #7
   116bc:	428b      	cmp	r3, r1
   116be:	d301      	bcc.n	116c4 <__divsi3+0x154>
   116c0:	01cb      	lsls	r3, r1, #7
   116c2:	1ac0      	subs	r0, r0, r3
   116c4:	4152      	adcs	r2, r2
   116c6:	0983      	lsrs	r3, r0, #6
   116c8:	428b      	cmp	r3, r1
   116ca:	d301      	bcc.n	116d0 <__divsi3+0x160>
   116cc:	018b      	lsls	r3, r1, #6
   116ce:	1ac0      	subs	r0, r0, r3
   116d0:	4152      	adcs	r2, r2
   116d2:	0943      	lsrs	r3, r0, #5
   116d4:	428b      	cmp	r3, r1
   116d6:	d301      	bcc.n	116dc <__divsi3+0x16c>
   116d8:	014b      	lsls	r3, r1, #5
   116da:	1ac0      	subs	r0, r0, r3
   116dc:	4152      	adcs	r2, r2
   116de:	0903      	lsrs	r3, r0, #4
   116e0:	428b      	cmp	r3, r1
   116e2:	d301      	bcc.n	116e8 <__divsi3+0x178>
   116e4:	010b      	lsls	r3, r1, #4
   116e6:	1ac0      	subs	r0, r0, r3
   116e8:	4152      	adcs	r2, r2
   116ea:	08c3      	lsrs	r3, r0, #3
   116ec:	428b      	cmp	r3, r1
   116ee:	d301      	bcc.n	116f4 <__divsi3+0x184>
   116f0:	00cb      	lsls	r3, r1, #3
   116f2:	1ac0      	subs	r0, r0, r3
   116f4:	4152      	adcs	r2, r2
   116f6:	0883      	lsrs	r3, r0, #2
   116f8:	428b      	cmp	r3, r1
   116fa:	d301      	bcc.n	11700 <__divsi3+0x190>
   116fc:	008b      	lsls	r3, r1, #2
   116fe:	1ac0      	subs	r0, r0, r3
   11700:	4152      	adcs	r2, r2
   11702:	d2d9      	bcs.n	116b8 <__divsi3+0x148>
   11704:	0843      	lsrs	r3, r0, #1
   11706:	428b      	cmp	r3, r1
   11708:	d301      	bcc.n	1170e <__divsi3+0x19e>
   1170a:	004b      	lsls	r3, r1, #1
   1170c:	1ac0      	subs	r0, r0, r3
   1170e:	4152      	adcs	r2, r2
   11710:	1a41      	subs	r1, r0, r1
   11712:	d200      	bcs.n	11716 <__divsi3+0x1a6>
   11714:	4601      	mov	r1, r0
   11716:	4663      	mov	r3, ip
   11718:	4152      	adcs	r2, r2
   1171a:	105b      	asrs	r3, r3, #1
   1171c:	4610      	mov	r0, r2
   1171e:	d301      	bcc.n	11724 <__divsi3+0x1b4>
   11720:	4240      	negs	r0, r0
   11722:	2b00      	cmp	r3, #0
   11724:	d500      	bpl.n	11728 <__divsi3+0x1b8>
   11726:	4249      	negs	r1, r1
   11728:	4770      	bx	lr
   1172a:	4663      	mov	r3, ip
   1172c:	105b      	asrs	r3, r3, #1
   1172e:	d300      	bcc.n	11732 <__divsi3+0x1c2>
   11730:	4240      	negs	r0, r0
   11732:	b501      	push	{r0, lr}
   11734:	2000      	movs	r0, #0
   11736:	f000 f805 	bl	11744 <__aeabi_idiv0>
   1173a:	bd02      	pop	{r1, pc}

0001173c <__aeabi_idivmod>:
   1173c:	2900      	cmp	r1, #0
   1173e:	d0f8      	beq.n	11732 <__divsi3+0x1c2>
   11740:	e716      	b.n	11570 <__divsi3>
   11742:	4770      	bx	lr

00011744 <__aeabi_idiv0>:
   11744:	4770      	bx	lr
   11746:	46c0      	nop			; (mov r8, r8)

00011748 <__aeabi_lmul>:
   11748:	b5f0      	push	{r4, r5, r6, r7, lr}
   1174a:	46ce      	mov	lr, r9
   1174c:	4647      	mov	r7, r8
   1174e:	0415      	lsls	r5, r2, #16
   11750:	0c2d      	lsrs	r5, r5, #16
   11752:	002e      	movs	r6, r5
   11754:	b580      	push	{r7, lr}
   11756:	0407      	lsls	r7, r0, #16
   11758:	0c14      	lsrs	r4, r2, #16
   1175a:	0c3f      	lsrs	r7, r7, #16
   1175c:	4699      	mov	r9, r3
   1175e:	0c03      	lsrs	r3, r0, #16
   11760:	437e      	muls	r6, r7
   11762:	435d      	muls	r5, r3
   11764:	4367      	muls	r7, r4
   11766:	4363      	muls	r3, r4
   11768:	197f      	adds	r7, r7, r5
   1176a:	0c34      	lsrs	r4, r6, #16
   1176c:	19e4      	adds	r4, r4, r7
   1176e:	469c      	mov	ip, r3
   11770:	42a5      	cmp	r5, r4
   11772:	d903      	bls.n	1177c <__aeabi_lmul+0x34>
   11774:	2380      	movs	r3, #128	; 0x80
   11776:	025b      	lsls	r3, r3, #9
   11778:	4698      	mov	r8, r3
   1177a:	44c4      	add	ip, r8
   1177c:	464b      	mov	r3, r9
   1177e:	4351      	muls	r1, r2
   11780:	4343      	muls	r3, r0
   11782:	0436      	lsls	r6, r6, #16
   11784:	0c36      	lsrs	r6, r6, #16
   11786:	0c25      	lsrs	r5, r4, #16
   11788:	0424      	lsls	r4, r4, #16
   1178a:	4465      	add	r5, ip
   1178c:	19a4      	adds	r4, r4, r6
   1178e:	1859      	adds	r1, r3, r1
   11790:	1949      	adds	r1, r1, r5
   11792:	0020      	movs	r0, r4
   11794:	bc0c      	pop	{r2, r3}
   11796:	4690      	mov	r8, r2
   11798:	4699      	mov	r9, r3
   1179a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001179c <atoi>:
   1179c:	b510      	push	{r4, lr}
   1179e:	220a      	movs	r2, #10
   117a0:	2100      	movs	r1, #0
   117a2:	f000 fb6d 	bl	11e80 <strtol>
   117a6:	bd10      	pop	{r4, pc}

000117a8 <__libc_init_array>:
   117a8:	b570      	push	{r4, r5, r6, lr}
   117aa:	2600      	movs	r6, #0
   117ac:	4d0c      	ldr	r5, [pc, #48]	; (117e0 <__libc_init_array+0x38>)
   117ae:	4c0d      	ldr	r4, [pc, #52]	; (117e4 <__libc_init_array+0x3c>)
   117b0:	1b64      	subs	r4, r4, r5
   117b2:	10a4      	asrs	r4, r4, #2
   117b4:	42a6      	cmp	r6, r4
   117b6:	d109      	bne.n	117cc <__libc_init_array+0x24>
   117b8:	2600      	movs	r6, #0
   117ba:	f003 f97f 	bl	14abc <_init>
   117be:	4d0a      	ldr	r5, [pc, #40]	; (117e8 <__libc_init_array+0x40>)
   117c0:	4c0a      	ldr	r4, [pc, #40]	; (117ec <__libc_init_array+0x44>)
   117c2:	1b64      	subs	r4, r4, r5
   117c4:	10a4      	asrs	r4, r4, #2
   117c6:	42a6      	cmp	r6, r4
   117c8:	d105      	bne.n	117d6 <__libc_init_array+0x2e>
   117ca:	bd70      	pop	{r4, r5, r6, pc}
   117cc:	00b3      	lsls	r3, r6, #2
   117ce:	58eb      	ldr	r3, [r5, r3]
   117d0:	4798      	blx	r3
   117d2:	3601      	adds	r6, #1
   117d4:	e7ee      	b.n	117b4 <__libc_init_array+0xc>
   117d6:	00b3      	lsls	r3, r6, #2
   117d8:	58eb      	ldr	r3, [r5, r3]
   117da:	4798      	blx	r3
   117dc:	3601      	adds	r6, #1
   117de:	e7f2      	b.n	117c6 <__libc_init_array+0x1e>
   117e0:	00014ac8 	.word	0x00014ac8
   117e4:	00014ac8 	.word	0x00014ac8
   117e8:	00014ac8 	.word	0x00014ac8
   117ec:	00014acc 	.word	0x00014acc

000117f0 <malloc>:
   117f0:	b510      	push	{r4, lr}
   117f2:	4b03      	ldr	r3, [pc, #12]	; (11800 <malloc+0x10>)
   117f4:	0001      	movs	r1, r0
   117f6:	6818      	ldr	r0, [r3, #0]
   117f8:	f000 f87c 	bl	118f4 <_malloc_r>
   117fc:	bd10      	pop	{r4, pc}
   117fe:	46c0      	nop			; (mov r8, r8)
   11800:	20000020 	.word	0x20000020

00011804 <free>:
   11804:	b510      	push	{r4, lr}
   11806:	4b03      	ldr	r3, [pc, #12]	; (11814 <free+0x10>)
   11808:	0001      	movs	r1, r0
   1180a:	6818      	ldr	r0, [r3, #0]
   1180c:	f000 f828 	bl	11860 <_free_r>
   11810:	bd10      	pop	{r4, pc}
   11812:	46c0      	nop			; (mov r8, r8)
   11814:	20000020 	.word	0x20000020

00011818 <memcpy>:
   11818:	2300      	movs	r3, #0
   1181a:	b510      	push	{r4, lr}
   1181c:	429a      	cmp	r2, r3
   1181e:	d100      	bne.n	11822 <memcpy+0xa>
   11820:	bd10      	pop	{r4, pc}
   11822:	5ccc      	ldrb	r4, [r1, r3]
   11824:	54c4      	strb	r4, [r0, r3]
   11826:	3301      	adds	r3, #1
   11828:	e7f8      	b.n	1181c <memcpy+0x4>

0001182a <memmove>:
   1182a:	b510      	push	{r4, lr}
   1182c:	4288      	cmp	r0, r1
   1182e:	d902      	bls.n	11836 <memmove+0xc>
   11830:	188b      	adds	r3, r1, r2
   11832:	4298      	cmp	r0, r3
   11834:	d308      	bcc.n	11848 <memmove+0x1e>
   11836:	2300      	movs	r3, #0
   11838:	429a      	cmp	r2, r3
   1183a:	d007      	beq.n	1184c <memmove+0x22>
   1183c:	5ccc      	ldrb	r4, [r1, r3]
   1183e:	54c4      	strb	r4, [r0, r3]
   11840:	3301      	adds	r3, #1
   11842:	e7f9      	b.n	11838 <memmove+0xe>
   11844:	5c8b      	ldrb	r3, [r1, r2]
   11846:	5483      	strb	r3, [r0, r2]
   11848:	3a01      	subs	r2, #1
   1184a:	d2fb      	bcs.n	11844 <memmove+0x1a>
   1184c:	bd10      	pop	{r4, pc}

0001184e <memset>:
   1184e:	0003      	movs	r3, r0
   11850:	1882      	adds	r2, r0, r2
   11852:	4293      	cmp	r3, r2
   11854:	d100      	bne.n	11858 <memset+0xa>
   11856:	4770      	bx	lr
   11858:	7019      	strb	r1, [r3, #0]
   1185a:	3301      	adds	r3, #1
   1185c:	e7f9      	b.n	11852 <memset+0x4>
	...

00011860 <_free_r>:
   11860:	b570      	push	{r4, r5, r6, lr}
   11862:	0005      	movs	r5, r0
   11864:	2900      	cmp	r1, #0
   11866:	d010      	beq.n	1188a <_free_r+0x2a>
   11868:	1f0c      	subs	r4, r1, #4
   1186a:	6823      	ldr	r3, [r4, #0]
   1186c:	2b00      	cmp	r3, #0
   1186e:	da00      	bge.n	11872 <_free_r+0x12>
   11870:	18e4      	adds	r4, r4, r3
   11872:	0028      	movs	r0, r5
   11874:	f000 fdec 	bl	12450 <__malloc_lock>
   11878:	4a1d      	ldr	r2, [pc, #116]	; (118f0 <_free_r+0x90>)
   1187a:	6813      	ldr	r3, [r2, #0]
   1187c:	2b00      	cmp	r3, #0
   1187e:	d105      	bne.n	1188c <_free_r+0x2c>
   11880:	6063      	str	r3, [r4, #4]
   11882:	6014      	str	r4, [r2, #0]
   11884:	0028      	movs	r0, r5
   11886:	f000 fde4 	bl	12452 <__malloc_unlock>
   1188a:	bd70      	pop	{r4, r5, r6, pc}
   1188c:	42a3      	cmp	r3, r4
   1188e:	d909      	bls.n	118a4 <_free_r+0x44>
   11890:	6821      	ldr	r1, [r4, #0]
   11892:	1860      	adds	r0, r4, r1
   11894:	4283      	cmp	r3, r0
   11896:	d1f3      	bne.n	11880 <_free_r+0x20>
   11898:	6818      	ldr	r0, [r3, #0]
   1189a:	685b      	ldr	r3, [r3, #4]
   1189c:	1841      	adds	r1, r0, r1
   1189e:	6021      	str	r1, [r4, #0]
   118a0:	e7ee      	b.n	11880 <_free_r+0x20>
   118a2:	0013      	movs	r3, r2
   118a4:	685a      	ldr	r2, [r3, #4]
   118a6:	2a00      	cmp	r2, #0
   118a8:	d001      	beq.n	118ae <_free_r+0x4e>
   118aa:	42a2      	cmp	r2, r4
   118ac:	d9f9      	bls.n	118a2 <_free_r+0x42>
   118ae:	6819      	ldr	r1, [r3, #0]
   118b0:	1858      	adds	r0, r3, r1
   118b2:	42a0      	cmp	r0, r4
   118b4:	d10b      	bne.n	118ce <_free_r+0x6e>
   118b6:	6820      	ldr	r0, [r4, #0]
   118b8:	1809      	adds	r1, r1, r0
   118ba:	1858      	adds	r0, r3, r1
   118bc:	6019      	str	r1, [r3, #0]
   118be:	4282      	cmp	r2, r0
   118c0:	d1e0      	bne.n	11884 <_free_r+0x24>
   118c2:	6810      	ldr	r0, [r2, #0]
   118c4:	6852      	ldr	r2, [r2, #4]
   118c6:	1841      	adds	r1, r0, r1
   118c8:	6019      	str	r1, [r3, #0]
   118ca:	605a      	str	r2, [r3, #4]
   118cc:	e7da      	b.n	11884 <_free_r+0x24>
   118ce:	42a0      	cmp	r0, r4
   118d0:	d902      	bls.n	118d8 <_free_r+0x78>
   118d2:	230c      	movs	r3, #12
   118d4:	602b      	str	r3, [r5, #0]
   118d6:	e7d5      	b.n	11884 <_free_r+0x24>
   118d8:	6821      	ldr	r1, [r4, #0]
   118da:	1860      	adds	r0, r4, r1
   118dc:	4282      	cmp	r2, r0
   118de:	d103      	bne.n	118e8 <_free_r+0x88>
   118e0:	6810      	ldr	r0, [r2, #0]
   118e2:	6852      	ldr	r2, [r2, #4]
   118e4:	1841      	adds	r1, r0, r1
   118e6:	6021      	str	r1, [r4, #0]
   118e8:	6062      	str	r2, [r4, #4]
   118ea:	605c      	str	r4, [r3, #4]
   118ec:	e7ca      	b.n	11884 <_free_r+0x24>
   118ee:	46c0      	nop			; (mov r8, r8)
   118f0:	200003f0 	.word	0x200003f0

000118f4 <_malloc_r>:
   118f4:	2303      	movs	r3, #3
   118f6:	b570      	push	{r4, r5, r6, lr}
   118f8:	1ccd      	adds	r5, r1, #3
   118fa:	439d      	bics	r5, r3
   118fc:	3508      	adds	r5, #8
   118fe:	0006      	movs	r6, r0
   11900:	2d0c      	cmp	r5, #12
   11902:	d21e      	bcs.n	11942 <_malloc_r+0x4e>
   11904:	250c      	movs	r5, #12
   11906:	42a9      	cmp	r1, r5
   11908:	d81d      	bhi.n	11946 <_malloc_r+0x52>
   1190a:	0030      	movs	r0, r6
   1190c:	f000 fda0 	bl	12450 <__malloc_lock>
   11910:	4a25      	ldr	r2, [pc, #148]	; (119a8 <_malloc_r+0xb4>)
   11912:	6814      	ldr	r4, [r2, #0]
   11914:	0021      	movs	r1, r4
   11916:	2900      	cmp	r1, #0
   11918:	d119      	bne.n	1194e <_malloc_r+0x5a>
   1191a:	4c24      	ldr	r4, [pc, #144]	; (119ac <_malloc_r+0xb8>)
   1191c:	6823      	ldr	r3, [r4, #0]
   1191e:	2b00      	cmp	r3, #0
   11920:	d103      	bne.n	1192a <_malloc_r+0x36>
   11922:	0030      	movs	r0, r6
   11924:	f000 f8dc 	bl	11ae0 <_sbrk_r>
   11928:	6020      	str	r0, [r4, #0]
   1192a:	0029      	movs	r1, r5
   1192c:	0030      	movs	r0, r6
   1192e:	f000 f8d7 	bl	11ae0 <_sbrk_r>
   11932:	1c43      	adds	r3, r0, #1
   11934:	d12c      	bne.n	11990 <_malloc_r+0x9c>
   11936:	230c      	movs	r3, #12
   11938:	0030      	movs	r0, r6
   1193a:	6033      	str	r3, [r6, #0]
   1193c:	f000 fd89 	bl	12452 <__malloc_unlock>
   11940:	e003      	b.n	1194a <_malloc_r+0x56>
   11942:	2d00      	cmp	r5, #0
   11944:	dadf      	bge.n	11906 <_malloc_r+0x12>
   11946:	230c      	movs	r3, #12
   11948:	6033      	str	r3, [r6, #0]
   1194a:	2000      	movs	r0, #0
   1194c:	bd70      	pop	{r4, r5, r6, pc}
   1194e:	680b      	ldr	r3, [r1, #0]
   11950:	1b5b      	subs	r3, r3, r5
   11952:	d41a      	bmi.n	1198a <_malloc_r+0x96>
   11954:	2b0b      	cmp	r3, #11
   11956:	d903      	bls.n	11960 <_malloc_r+0x6c>
   11958:	600b      	str	r3, [r1, #0]
   1195a:	18cc      	adds	r4, r1, r3
   1195c:	6025      	str	r5, [r4, #0]
   1195e:	e003      	b.n	11968 <_malloc_r+0x74>
   11960:	428c      	cmp	r4, r1
   11962:	d10e      	bne.n	11982 <_malloc_r+0x8e>
   11964:	6863      	ldr	r3, [r4, #4]
   11966:	6013      	str	r3, [r2, #0]
   11968:	0030      	movs	r0, r6
   1196a:	f000 fd72 	bl	12452 <__malloc_unlock>
   1196e:	0020      	movs	r0, r4
   11970:	2207      	movs	r2, #7
   11972:	300b      	adds	r0, #11
   11974:	1d23      	adds	r3, r4, #4
   11976:	4390      	bics	r0, r2
   11978:	1ac3      	subs	r3, r0, r3
   1197a:	d0e7      	beq.n	1194c <_malloc_r+0x58>
   1197c:	425a      	negs	r2, r3
   1197e:	50e2      	str	r2, [r4, r3]
   11980:	e7e4      	b.n	1194c <_malloc_r+0x58>
   11982:	684b      	ldr	r3, [r1, #4]
   11984:	6063      	str	r3, [r4, #4]
   11986:	000c      	movs	r4, r1
   11988:	e7ee      	b.n	11968 <_malloc_r+0x74>
   1198a:	000c      	movs	r4, r1
   1198c:	6849      	ldr	r1, [r1, #4]
   1198e:	e7c2      	b.n	11916 <_malloc_r+0x22>
   11990:	2303      	movs	r3, #3
   11992:	1cc4      	adds	r4, r0, #3
   11994:	439c      	bics	r4, r3
   11996:	42a0      	cmp	r0, r4
   11998:	d0e0      	beq.n	1195c <_malloc_r+0x68>
   1199a:	1a21      	subs	r1, r4, r0
   1199c:	0030      	movs	r0, r6
   1199e:	f000 f89f 	bl	11ae0 <_sbrk_r>
   119a2:	1c43      	adds	r3, r0, #1
   119a4:	d1da      	bne.n	1195c <_malloc_r+0x68>
   119a6:	e7c6      	b.n	11936 <_malloc_r+0x42>
   119a8:	200003f0 	.word	0x200003f0
   119ac:	200003f4 	.word	0x200003f4

000119b0 <iprintf>:
   119b0:	b40f      	push	{r0, r1, r2, r3}
   119b2:	4b0b      	ldr	r3, [pc, #44]	; (119e0 <iprintf+0x30>)
   119b4:	b513      	push	{r0, r1, r4, lr}
   119b6:	681c      	ldr	r4, [r3, #0]
   119b8:	2c00      	cmp	r4, #0
   119ba:	d005      	beq.n	119c8 <iprintf+0x18>
   119bc:	69a3      	ldr	r3, [r4, #24]
   119be:	2b00      	cmp	r3, #0
   119c0:	d102      	bne.n	119c8 <iprintf+0x18>
   119c2:	0020      	movs	r0, r4
   119c4:	f000 fc34 	bl	12230 <__sinit>
   119c8:	ab05      	add	r3, sp, #20
   119ca:	9a04      	ldr	r2, [sp, #16]
   119cc:	68a1      	ldr	r1, [r4, #8]
   119ce:	0020      	movs	r0, r4
   119d0:	9301      	str	r3, [sp, #4]
   119d2:	f000 fecd 	bl	12770 <_vfiprintf_r>
   119d6:	bc16      	pop	{r1, r2, r4}
   119d8:	bc08      	pop	{r3}
   119da:	b004      	add	sp, #16
   119dc:	4718      	bx	r3
   119de:	46c0      	nop			; (mov r8, r8)
   119e0:	20000020 	.word	0x20000020

000119e4 <putchar>:
   119e4:	4b08      	ldr	r3, [pc, #32]	; (11a08 <putchar+0x24>)
   119e6:	b570      	push	{r4, r5, r6, lr}
   119e8:	681c      	ldr	r4, [r3, #0]
   119ea:	0005      	movs	r5, r0
   119ec:	2c00      	cmp	r4, #0
   119ee:	d005      	beq.n	119fc <putchar+0x18>
   119f0:	69a3      	ldr	r3, [r4, #24]
   119f2:	2b00      	cmp	r3, #0
   119f4:	d102      	bne.n	119fc <putchar+0x18>
   119f6:	0020      	movs	r0, r4
   119f8:	f000 fc1a 	bl	12230 <__sinit>
   119fc:	0029      	movs	r1, r5
   119fe:	68a2      	ldr	r2, [r4, #8]
   11a00:	0020      	movs	r0, r4
   11a02:	f001 f959 	bl	12cb8 <_putc_r>
   11a06:	bd70      	pop	{r4, r5, r6, pc}
   11a08:	20000020 	.word	0x20000020

00011a0c <_puts_r>:
   11a0c:	b570      	push	{r4, r5, r6, lr}
   11a0e:	0005      	movs	r5, r0
   11a10:	000e      	movs	r6, r1
   11a12:	2800      	cmp	r0, #0
   11a14:	d004      	beq.n	11a20 <_puts_r+0x14>
   11a16:	6983      	ldr	r3, [r0, #24]
   11a18:	2b00      	cmp	r3, #0
   11a1a:	d101      	bne.n	11a20 <_puts_r+0x14>
   11a1c:	f000 fc08 	bl	12230 <__sinit>
   11a20:	69ab      	ldr	r3, [r5, #24]
   11a22:	68ac      	ldr	r4, [r5, #8]
   11a24:	2b00      	cmp	r3, #0
   11a26:	d102      	bne.n	11a2e <_puts_r+0x22>
   11a28:	0028      	movs	r0, r5
   11a2a:	f000 fc01 	bl	12230 <__sinit>
   11a2e:	4b24      	ldr	r3, [pc, #144]	; (11ac0 <_puts_r+0xb4>)
   11a30:	429c      	cmp	r4, r3
   11a32:	d10f      	bne.n	11a54 <_puts_r+0x48>
   11a34:	686c      	ldr	r4, [r5, #4]
   11a36:	89a3      	ldrh	r3, [r4, #12]
   11a38:	071b      	lsls	r3, r3, #28
   11a3a:	d502      	bpl.n	11a42 <_puts_r+0x36>
   11a3c:	6923      	ldr	r3, [r4, #16]
   11a3e:	2b00      	cmp	r3, #0
   11a40:	d120      	bne.n	11a84 <_puts_r+0x78>
   11a42:	0021      	movs	r1, r4
   11a44:	0028      	movs	r0, r5
   11a46:	f000 fa85 	bl	11f54 <__swsetup_r>
   11a4a:	2800      	cmp	r0, #0
   11a4c:	d01a      	beq.n	11a84 <_puts_r+0x78>
   11a4e:	2001      	movs	r0, #1
   11a50:	4240      	negs	r0, r0
   11a52:	bd70      	pop	{r4, r5, r6, pc}
   11a54:	4b1b      	ldr	r3, [pc, #108]	; (11ac4 <_puts_r+0xb8>)
   11a56:	429c      	cmp	r4, r3
   11a58:	d101      	bne.n	11a5e <_puts_r+0x52>
   11a5a:	68ac      	ldr	r4, [r5, #8]
   11a5c:	e7eb      	b.n	11a36 <_puts_r+0x2a>
   11a5e:	4b1a      	ldr	r3, [pc, #104]	; (11ac8 <_puts_r+0xbc>)
   11a60:	429c      	cmp	r4, r3
   11a62:	d1e8      	bne.n	11a36 <_puts_r+0x2a>
   11a64:	68ec      	ldr	r4, [r5, #12]
   11a66:	e7e6      	b.n	11a36 <_puts_r+0x2a>
   11a68:	3b01      	subs	r3, #1
   11a6a:	3601      	adds	r6, #1
   11a6c:	60a3      	str	r3, [r4, #8]
   11a6e:	2b00      	cmp	r3, #0
   11a70:	da04      	bge.n	11a7c <_puts_r+0x70>
   11a72:	69a2      	ldr	r2, [r4, #24]
   11a74:	4293      	cmp	r3, r2
   11a76:	db16      	blt.n	11aa6 <_puts_r+0x9a>
   11a78:	290a      	cmp	r1, #10
   11a7a:	d014      	beq.n	11aa6 <_puts_r+0x9a>
   11a7c:	6823      	ldr	r3, [r4, #0]
   11a7e:	1c5a      	adds	r2, r3, #1
   11a80:	6022      	str	r2, [r4, #0]
   11a82:	7019      	strb	r1, [r3, #0]
   11a84:	7831      	ldrb	r1, [r6, #0]
   11a86:	68a3      	ldr	r3, [r4, #8]
   11a88:	2900      	cmp	r1, #0
   11a8a:	d1ed      	bne.n	11a68 <_puts_r+0x5c>
   11a8c:	3b01      	subs	r3, #1
   11a8e:	60a3      	str	r3, [r4, #8]
   11a90:	2b00      	cmp	r3, #0
   11a92:	da0f      	bge.n	11ab4 <_puts_r+0xa8>
   11a94:	0022      	movs	r2, r4
   11a96:	310a      	adds	r1, #10
   11a98:	0028      	movs	r0, r5
   11a9a:	f000 fa05 	bl	11ea8 <__swbuf_r>
   11a9e:	1c43      	adds	r3, r0, #1
   11aa0:	d0d5      	beq.n	11a4e <_puts_r+0x42>
   11aa2:	200a      	movs	r0, #10
   11aa4:	e7d5      	b.n	11a52 <_puts_r+0x46>
   11aa6:	0022      	movs	r2, r4
   11aa8:	0028      	movs	r0, r5
   11aaa:	f000 f9fd 	bl	11ea8 <__swbuf_r>
   11aae:	1c43      	adds	r3, r0, #1
   11ab0:	d1e8      	bne.n	11a84 <_puts_r+0x78>
   11ab2:	e7cc      	b.n	11a4e <_puts_r+0x42>
   11ab4:	200a      	movs	r0, #10
   11ab6:	6823      	ldr	r3, [r4, #0]
   11ab8:	1c5a      	adds	r2, r3, #1
   11aba:	6022      	str	r2, [r4, #0]
   11abc:	7018      	strb	r0, [r3, #0]
   11abe:	e7c8      	b.n	11a52 <_puts_r+0x46>
   11ac0:	0001493c 	.word	0x0001493c
   11ac4:	0001495c 	.word	0x0001495c
   11ac8:	0001491c 	.word	0x0001491c

00011acc <puts>:
   11acc:	b510      	push	{r4, lr}
   11ace:	4b03      	ldr	r3, [pc, #12]	; (11adc <puts+0x10>)
   11ad0:	0001      	movs	r1, r0
   11ad2:	6818      	ldr	r0, [r3, #0]
   11ad4:	f7ff ff9a 	bl	11a0c <_puts_r>
   11ad8:	bd10      	pop	{r4, pc}
   11ada:	46c0      	nop			; (mov r8, r8)
   11adc:	20000020 	.word	0x20000020

00011ae0 <_sbrk_r>:
   11ae0:	2300      	movs	r3, #0
   11ae2:	b570      	push	{r4, r5, r6, lr}
   11ae4:	4c06      	ldr	r4, [pc, #24]	; (11b00 <_sbrk_r+0x20>)
   11ae6:	0005      	movs	r5, r0
   11ae8:	0008      	movs	r0, r1
   11aea:	6023      	str	r3, [r4, #0]
   11aec:	f7fb fa6e 	bl	cfcc <_sbrk>
   11af0:	1c43      	adds	r3, r0, #1
   11af2:	d103      	bne.n	11afc <_sbrk_r+0x1c>
   11af4:	6823      	ldr	r3, [r4, #0]
   11af6:	2b00      	cmp	r3, #0
   11af8:	d000      	beq.n	11afc <_sbrk_r+0x1c>
   11afa:	602b      	str	r3, [r5, #0]
   11afc:	bd70      	pop	{r4, r5, r6, pc}
   11afe:	46c0      	nop			; (mov r8, r8)
   11b00:	20000fbc 	.word	0x20000fbc

00011b04 <setbuf>:
   11b04:	424a      	negs	r2, r1
   11b06:	414a      	adcs	r2, r1
   11b08:	2380      	movs	r3, #128	; 0x80
   11b0a:	b510      	push	{r4, lr}
   11b0c:	0052      	lsls	r2, r2, #1
   11b0e:	00db      	lsls	r3, r3, #3
   11b10:	f000 f802 	bl	11b18 <setvbuf>
   11b14:	bd10      	pop	{r4, pc}
	...

00011b18 <setvbuf>:
   11b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b1a:	001d      	movs	r5, r3
   11b1c:	4b4f      	ldr	r3, [pc, #316]	; (11c5c <setvbuf+0x144>)
   11b1e:	b085      	sub	sp, #20
   11b20:	681e      	ldr	r6, [r3, #0]
   11b22:	0004      	movs	r4, r0
   11b24:	000f      	movs	r7, r1
   11b26:	9200      	str	r2, [sp, #0]
   11b28:	2e00      	cmp	r6, #0
   11b2a:	d005      	beq.n	11b38 <setvbuf+0x20>
   11b2c:	69b3      	ldr	r3, [r6, #24]
   11b2e:	2b00      	cmp	r3, #0
   11b30:	d102      	bne.n	11b38 <setvbuf+0x20>
   11b32:	0030      	movs	r0, r6
   11b34:	f000 fb7c 	bl	12230 <__sinit>
   11b38:	4b49      	ldr	r3, [pc, #292]	; (11c60 <setvbuf+0x148>)
   11b3a:	429c      	cmp	r4, r3
   11b3c:	d150      	bne.n	11be0 <setvbuf+0xc8>
   11b3e:	6874      	ldr	r4, [r6, #4]
   11b40:	9b00      	ldr	r3, [sp, #0]
   11b42:	2b02      	cmp	r3, #2
   11b44:	d005      	beq.n	11b52 <setvbuf+0x3a>
   11b46:	2b01      	cmp	r3, #1
   11b48:	d900      	bls.n	11b4c <setvbuf+0x34>
   11b4a:	e084      	b.n	11c56 <setvbuf+0x13e>
   11b4c:	2d00      	cmp	r5, #0
   11b4e:	da00      	bge.n	11b52 <setvbuf+0x3a>
   11b50:	e081      	b.n	11c56 <setvbuf+0x13e>
   11b52:	0021      	movs	r1, r4
   11b54:	0030      	movs	r0, r6
   11b56:	f000 fafd 	bl	12154 <_fflush_r>
   11b5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11b5c:	2900      	cmp	r1, #0
   11b5e:	d008      	beq.n	11b72 <setvbuf+0x5a>
   11b60:	0023      	movs	r3, r4
   11b62:	3344      	adds	r3, #68	; 0x44
   11b64:	4299      	cmp	r1, r3
   11b66:	d002      	beq.n	11b6e <setvbuf+0x56>
   11b68:	0030      	movs	r0, r6
   11b6a:	f7ff fe79 	bl	11860 <_free_r>
   11b6e:	2300      	movs	r3, #0
   11b70:	6363      	str	r3, [r4, #52]	; 0x34
   11b72:	2300      	movs	r3, #0
   11b74:	61a3      	str	r3, [r4, #24]
   11b76:	6063      	str	r3, [r4, #4]
   11b78:	89a3      	ldrh	r3, [r4, #12]
   11b7a:	061b      	lsls	r3, r3, #24
   11b7c:	d503      	bpl.n	11b86 <setvbuf+0x6e>
   11b7e:	6921      	ldr	r1, [r4, #16]
   11b80:	0030      	movs	r0, r6
   11b82:	f7ff fe6d 	bl	11860 <_free_r>
   11b86:	89a3      	ldrh	r3, [r4, #12]
   11b88:	4a36      	ldr	r2, [pc, #216]	; (11c64 <setvbuf+0x14c>)
   11b8a:	4013      	ands	r3, r2
   11b8c:	81a3      	strh	r3, [r4, #12]
   11b8e:	9b00      	ldr	r3, [sp, #0]
   11b90:	2b02      	cmp	r3, #2
   11b92:	d05a      	beq.n	11c4a <setvbuf+0x132>
   11b94:	ab03      	add	r3, sp, #12
   11b96:	aa02      	add	r2, sp, #8
   11b98:	0021      	movs	r1, r4
   11b9a:	0030      	movs	r0, r6
   11b9c:	f000 fbe0 	bl	12360 <__swhatbuf_r>
   11ba0:	89a3      	ldrh	r3, [r4, #12]
   11ba2:	4318      	orrs	r0, r3
   11ba4:	81a0      	strh	r0, [r4, #12]
   11ba6:	2d00      	cmp	r5, #0
   11ba8:	d124      	bne.n	11bf4 <setvbuf+0xdc>
   11baa:	9d02      	ldr	r5, [sp, #8]
   11bac:	0028      	movs	r0, r5
   11bae:	f7ff fe1f 	bl	117f0 <malloc>
   11bb2:	9501      	str	r5, [sp, #4]
   11bb4:	1e07      	subs	r7, r0, #0
   11bb6:	d142      	bne.n	11c3e <setvbuf+0x126>
   11bb8:	9b02      	ldr	r3, [sp, #8]
   11bba:	9301      	str	r3, [sp, #4]
   11bbc:	42ab      	cmp	r3, r5
   11bbe:	d139      	bne.n	11c34 <setvbuf+0x11c>
   11bc0:	2001      	movs	r0, #1
   11bc2:	4240      	negs	r0, r0
   11bc4:	2302      	movs	r3, #2
   11bc6:	89a2      	ldrh	r2, [r4, #12]
   11bc8:	4313      	orrs	r3, r2
   11bca:	81a3      	strh	r3, [r4, #12]
   11bcc:	2300      	movs	r3, #0
   11bce:	60a3      	str	r3, [r4, #8]
   11bd0:	0023      	movs	r3, r4
   11bd2:	3347      	adds	r3, #71	; 0x47
   11bd4:	6023      	str	r3, [r4, #0]
   11bd6:	6123      	str	r3, [r4, #16]
   11bd8:	2301      	movs	r3, #1
   11bda:	6163      	str	r3, [r4, #20]
   11bdc:	b005      	add	sp, #20
   11bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11be0:	4b21      	ldr	r3, [pc, #132]	; (11c68 <setvbuf+0x150>)
   11be2:	429c      	cmp	r4, r3
   11be4:	d101      	bne.n	11bea <setvbuf+0xd2>
   11be6:	68b4      	ldr	r4, [r6, #8]
   11be8:	e7aa      	b.n	11b40 <setvbuf+0x28>
   11bea:	4b20      	ldr	r3, [pc, #128]	; (11c6c <setvbuf+0x154>)
   11bec:	429c      	cmp	r4, r3
   11bee:	d1a7      	bne.n	11b40 <setvbuf+0x28>
   11bf0:	68f4      	ldr	r4, [r6, #12]
   11bf2:	e7a5      	b.n	11b40 <setvbuf+0x28>
   11bf4:	2f00      	cmp	r7, #0
   11bf6:	d0d9      	beq.n	11bac <setvbuf+0x94>
   11bf8:	69b3      	ldr	r3, [r6, #24]
   11bfa:	2b00      	cmp	r3, #0
   11bfc:	d102      	bne.n	11c04 <setvbuf+0xec>
   11bfe:	0030      	movs	r0, r6
   11c00:	f000 fb16 	bl	12230 <__sinit>
   11c04:	9b00      	ldr	r3, [sp, #0]
   11c06:	2b01      	cmp	r3, #1
   11c08:	d103      	bne.n	11c12 <setvbuf+0xfa>
   11c0a:	89a3      	ldrh	r3, [r4, #12]
   11c0c:	9a00      	ldr	r2, [sp, #0]
   11c0e:	431a      	orrs	r2, r3
   11c10:	81a2      	strh	r2, [r4, #12]
   11c12:	2008      	movs	r0, #8
   11c14:	89a3      	ldrh	r3, [r4, #12]
   11c16:	6027      	str	r7, [r4, #0]
   11c18:	6127      	str	r7, [r4, #16]
   11c1a:	6165      	str	r5, [r4, #20]
   11c1c:	4018      	ands	r0, r3
   11c1e:	d018      	beq.n	11c52 <setvbuf+0x13a>
   11c20:	2001      	movs	r0, #1
   11c22:	4018      	ands	r0, r3
   11c24:	2300      	movs	r3, #0
   11c26:	4298      	cmp	r0, r3
   11c28:	d011      	beq.n	11c4e <setvbuf+0x136>
   11c2a:	426d      	negs	r5, r5
   11c2c:	60a3      	str	r3, [r4, #8]
   11c2e:	61a5      	str	r5, [r4, #24]
   11c30:	0018      	movs	r0, r3
   11c32:	e7d3      	b.n	11bdc <setvbuf+0xc4>
   11c34:	9801      	ldr	r0, [sp, #4]
   11c36:	f7ff fddb 	bl	117f0 <malloc>
   11c3a:	1e07      	subs	r7, r0, #0
   11c3c:	d0c0      	beq.n	11bc0 <setvbuf+0xa8>
   11c3e:	2380      	movs	r3, #128	; 0x80
   11c40:	89a2      	ldrh	r2, [r4, #12]
   11c42:	9d01      	ldr	r5, [sp, #4]
   11c44:	4313      	orrs	r3, r2
   11c46:	81a3      	strh	r3, [r4, #12]
   11c48:	e7d6      	b.n	11bf8 <setvbuf+0xe0>
   11c4a:	2000      	movs	r0, #0
   11c4c:	e7ba      	b.n	11bc4 <setvbuf+0xac>
   11c4e:	60a5      	str	r5, [r4, #8]
   11c50:	e7c4      	b.n	11bdc <setvbuf+0xc4>
   11c52:	60a0      	str	r0, [r4, #8]
   11c54:	e7c2      	b.n	11bdc <setvbuf+0xc4>
   11c56:	2001      	movs	r0, #1
   11c58:	4240      	negs	r0, r0
   11c5a:	e7bf      	b.n	11bdc <setvbuf+0xc4>
   11c5c:	20000020 	.word	0x20000020
   11c60:	0001493c 	.word	0x0001493c
   11c64:	fffff35c 	.word	0xfffff35c
   11c68:	0001495c 	.word	0x0001495c
   11c6c:	0001491c 	.word	0x0001491c

00011c70 <siprintf>:
   11c70:	b40e      	push	{r1, r2, r3}
   11c72:	b510      	push	{r4, lr}
   11c74:	b09d      	sub	sp, #116	; 0x74
   11c76:	a902      	add	r1, sp, #8
   11c78:	9002      	str	r0, [sp, #8]
   11c7a:	6108      	str	r0, [r1, #16]
   11c7c:	480b      	ldr	r0, [pc, #44]	; (11cac <siprintf+0x3c>)
   11c7e:	2482      	movs	r4, #130	; 0x82
   11c80:	6088      	str	r0, [r1, #8]
   11c82:	6148      	str	r0, [r1, #20]
   11c84:	2001      	movs	r0, #1
   11c86:	4240      	negs	r0, r0
   11c88:	ab1f      	add	r3, sp, #124	; 0x7c
   11c8a:	81c8      	strh	r0, [r1, #14]
   11c8c:	4808      	ldr	r0, [pc, #32]	; (11cb0 <siprintf+0x40>)
   11c8e:	cb04      	ldmia	r3!, {r2}
   11c90:	00a4      	lsls	r4, r4, #2
   11c92:	6800      	ldr	r0, [r0, #0]
   11c94:	9301      	str	r3, [sp, #4]
   11c96:	818c      	strh	r4, [r1, #12]
   11c98:	f000 fc3e 	bl	12518 <_svfiprintf_r>
   11c9c:	2300      	movs	r3, #0
   11c9e:	9a02      	ldr	r2, [sp, #8]
   11ca0:	7013      	strb	r3, [r2, #0]
   11ca2:	b01d      	add	sp, #116	; 0x74
   11ca4:	bc10      	pop	{r4}
   11ca6:	bc08      	pop	{r3}
   11ca8:	b003      	add	sp, #12
   11caa:	4718      	bx	r3
   11cac:	7fffffff 	.word	0x7fffffff
   11cb0:	20000020 	.word	0x20000020

00011cb4 <strcmp>:
   11cb4:	7802      	ldrb	r2, [r0, #0]
   11cb6:	780b      	ldrb	r3, [r1, #0]
   11cb8:	2a00      	cmp	r2, #0
   11cba:	d003      	beq.n	11cc4 <strcmp+0x10>
   11cbc:	3001      	adds	r0, #1
   11cbe:	3101      	adds	r1, #1
   11cc0:	429a      	cmp	r2, r3
   11cc2:	d0f7      	beq.n	11cb4 <strcmp>
   11cc4:	1ad0      	subs	r0, r2, r3
   11cc6:	4770      	bx	lr

00011cc8 <strcpy>:
   11cc8:	1c03      	adds	r3, r0, #0
   11cca:	780a      	ldrb	r2, [r1, #0]
   11ccc:	3101      	adds	r1, #1
   11cce:	701a      	strb	r2, [r3, #0]
   11cd0:	3301      	adds	r3, #1
   11cd2:	2a00      	cmp	r2, #0
   11cd4:	d1f9      	bne.n	11cca <strcpy+0x2>
   11cd6:	4770      	bx	lr

00011cd8 <strdup>:
   11cd8:	b510      	push	{r4, lr}
   11cda:	4b03      	ldr	r3, [pc, #12]	; (11ce8 <strdup+0x10>)
   11cdc:	0001      	movs	r1, r0
   11cde:	6818      	ldr	r0, [r3, #0]
   11ce0:	f000 f804 	bl	11cec <_strdup_r>
   11ce4:	bd10      	pop	{r4, pc}
   11ce6:	46c0      	nop			; (mov r8, r8)
   11ce8:	20000020 	.word	0x20000020

00011cec <_strdup_r>:
   11cec:	b570      	push	{r4, r5, r6, lr}
   11cee:	0005      	movs	r5, r0
   11cf0:	0008      	movs	r0, r1
   11cf2:	000e      	movs	r6, r1
   11cf4:	f000 f80d 	bl	11d12 <strlen>
   11cf8:	1c44      	adds	r4, r0, #1
   11cfa:	0021      	movs	r1, r4
   11cfc:	0028      	movs	r0, r5
   11cfe:	f7ff fdf9 	bl	118f4 <_malloc_r>
   11d02:	1e05      	subs	r5, r0, #0
   11d04:	d003      	beq.n	11d0e <_strdup_r+0x22>
   11d06:	0022      	movs	r2, r4
   11d08:	0031      	movs	r1, r6
   11d0a:	f7ff fd85 	bl	11818 <memcpy>
   11d0e:	0028      	movs	r0, r5
   11d10:	bd70      	pop	{r4, r5, r6, pc}

00011d12 <strlen>:
   11d12:	2300      	movs	r3, #0
   11d14:	5cc2      	ldrb	r2, [r0, r3]
   11d16:	3301      	adds	r3, #1
   11d18:	2a00      	cmp	r2, #0
   11d1a:	d1fb      	bne.n	11d14 <strlen+0x2>
   11d1c:	1e58      	subs	r0, r3, #1
   11d1e:	4770      	bx	lr

00011d20 <strncmp>:
   11d20:	2300      	movs	r3, #0
   11d22:	b530      	push	{r4, r5, lr}
   11d24:	429a      	cmp	r2, r3
   11d26:	d00a      	beq.n	11d3e <strncmp+0x1e>
   11d28:	3a01      	subs	r2, #1
   11d2a:	5cc4      	ldrb	r4, [r0, r3]
   11d2c:	5ccd      	ldrb	r5, [r1, r3]
   11d2e:	42ac      	cmp	r4, r5
   11d30:	d104      	bne.n	11d3c <strncmp+0x1c>
   11d32:	429a      	cmp	r2, r3
   11d34:	d002      	beq.n	11d3c <strncmp+0x1c>
   11d36:	3301      	adds	r3, #1
   11d38:	2c00      	cmp	r4, #0
   11d3a:	d1f6      	bne.n	11d2a <strncmp+0xa>
   11d3c:	1b63      	subs	r3, r4, r5
   11d3e:	0018      	movs	r0, r3
   11d40:	bd30      	pop	{r4, r5, pc}

00011d42 <strstr>:
   11d42:	b510      	push	{r4, lr}
   11d44:	0002      	movs	r2, r0
   11d46:	7800      	ldrb	r0, [r0, #0]
   11d48:	2800      	cmp	r0, #0
   11d4a:	d104      	bne.n	11d56 <strstr+0x14>
   11d4c:	7809      	ldrb	r1, [r1, #0]
   11d4e:	2900      	cmp	r1, #0
   11d50:	d00d      	beq.n	11d6e <strstr+0x2c>
   11d52:	bd10      	pop	{r4, pc}
   11d54:	3201      	adds	r2, #1
   11d56:	7810      	ldrb	r0, [r2, #0]
   11d58:	2800      	cmp	r0, #0
   11d5a:	d0fa      	beq.n	11d52 <strstr+0x10>
   11d5c:	2300      	movs	r3, #0
   11d5e:	5cc8      	ldrb	r0, [r1, r3]
   11d60:	2800      	cmp	r0, #0
   11d62:	d004      	beq.n	11d6e <strstr+0x2c>
   11d64:	5cd4      	ldrb	r4, [r2, r3]
   11d66:	4284      	cmp	r4, r0
   11d68:	d1f4      	bne.n	11d54 <strstr+0x12>
   11d6a:	3301      	adds	r3, #1
   11d6c:	e7f7      	b.n	11d5e <strstr+0x1c>
   11d6e:	0010      	movs	r0, r2
   11d70:	e7ef      	b.n	11d52 <strstr+0x10>
	...

00011d74 <_strtol_l.isra.0>:
   11d74:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d76:	001f      	movs	r7, r3
   11d78:	000e      	movs	r6, r1
   11d7a:	b087      	sub	sp, #28
   11d7c:	9005      	str	r0, [sp, #20]
   11d7e:	9103      	str	r1, [sp, #12]
   11d80:	9202      	str	r2, [sp, #8]
   11d82:	980c      	ldr	r0, [sp, #48]	; 0x30
   11d84:	7834      	ldrb	r4, [r6, #0]
   11d86:	f000 fae8 	bl	1235a <__locale_ctype_ptr_l>
   11d8a:	2208      	movs	r2, #8
   11d8c:	1900      	adds	r0, r0, r4
   11d8e:	7843      	ldrb	r3, [r0, #1]
   11d90:	1c75      	adds	r5, r6, #1
   11d92:	4013      	ands	r3, r2
   11d94:	d10c      	bne.n	11db0 <_strtol_l.isra.0+0x3c>
   11d96:	2c2d      	cmp	r4, #45	; 0x2d
   11d98:	d10c      	bne.n	11db4 <_strtol_l.isra.0+0x40>
   11d9a:	3301      	adds	r3, #1
   11d9c:	782c      	ldrb	r4, [r5, #0]
   11d9e:	9301      	str	r3, [sp, #4]
   11da0:	1cb5      	adds	r5, r6, #2
   11da2:	2f00      	cmp	r7, #0
   11da4:	d00c      	beq.n	11dc0 <_strtol_l.isra.0+0x4c>
   11da6:	2f10      	cmp	r7, #16
   11da8:	d114      	bne.n	11dd4 <_strtol_l.isra.0+0x60>
   11daa:	2c30      	cmp	r4, #48	; 0x30
   11dac:	d00a      	beq.n	11dc4 <_strtol_l.isra.0+0x50>
   11dae:	e011      	b.n	11dd4 <_strtol_l.isra.0+0x60>
   11db0:	002e      	movs	r6, r5
   11db2:	e7e6      	b.n	11d82 <_strtol_l.isra.0+0xe>
   11db4:	9301      	str	r3, [sp, #4]
   11db6:	2c2b      	cmp	r4, #43	; 0x2b
   11db8:	d1f3      	bne.n	11da2 <_strtol_l.isra.0+0x2e>
   11dba:	782c      	ldrb	r4, [r5, #0]
   11dbc:	1cb5      	adds	r5, r6, #2
   11dbe:	e7f0      	b.n	11da2 <_strtol_l.isra.0+0x2e>
   11dc0:	2c30      	cmp	r4, #48	; 0x30
   11dc2:	d12f      	bne.n	11e24 <_strtol_l.isra.0+0xb0>
   11dc4:	2220      	movs	r2, #32
   11dc6:	782b      	ldrb	r3, [r5, #0]
   11dc8:	4393      	bics	r3, r2
   11dca:	2b58      	cmp	r3, #88	; 0x58
   11dcc:	d151      	bne.n	11e72 <_strtol_l.isra.0+0xfe>
   11dce:	2710      	movs	r7, #16
   11dd0:	786c      	ldrb	r4, [r5, #1]
   11dd2:	3502      	adds	r5, #2
   11dd4:	9b01      	ldr	r3, [sp, #4]
   11dd6:	4a29      	ldr	r2, [pc, #164]	; (11e7c <_strtol_l.isra.0+0x108>)
   11dd8:	0039      	movs	r1, r7
   11dda:	189e      	adds	r6, r3, r2
   11ddc:	0030      	movs	r0, r6
   11dde:	f7ff fbc3 	bl	11568 <__aeabi_uidivmod>
   11de2:	0030      	movs	r0, r6
   11de4:	9104      	str	r1, [sp, #16]
   11de6:	0039      	movs	r1, r7
   11de8:	f7ff fb38 	bl	1145c <__udivsi3>
   11dec:	2101      	movs	r1, #1
   11dee:	2300      	movs	r3, #0
   11df0:	4249      	negs	r1, r1
   11df2:	0002      	movs	r2, r0
   11df4:	468c      	mov	ip, r1
   11df6:	0018      	movs	r0, r3
   11df8:	0021      	movs	r1, r4
   11dfa:	3930      	subs	r1, #48	; 0x30
   11dfc:	2909      	cmp	r1, #9
   11dfe:	d813      	bhi.n	11e28 <_strtol_l.isra.0+0xb4>
   11e00:	000c      	movs	r4, r1
   11e02:	42a7      	cmp	r7, r4
   11e04:	dd1c      	ble.n	11e40 <_strtol_l.isra.0+0xcc>
   11e06:	1c59      	adds	r1, r3, #1
   11e08:	d009      	beq.n	11e1e <_strtol_l.isra.0+0xaa>
   11e0a:	4663      	mov	r3, ip
   11e0c:	4282      	cmp	r2, r0
   11e0e:	d306      	bcc.n	11e1e <_strtol_l.isra.0+0xaa>
   11e10:	d102      	bne.n	11e18 <_strtol_l.isra.0+0xa4>
   11e12:	9904      	ldr	r1, [sp, #16]
   11e14:	42a1      	cmp	r1, r4
   11e16:	db02      	blt.n	11e1e <_strtol_l.isra.0+0xaa>
   11e18:	2301      	movs	r3, #1
   11e1a:	4378      	muls	r0, r7
   11e1c:	1820      	adds	r0, r4, r0
   11e1e:	782c      	ldrb	r4, [r5, #0]
   11e20:	3501      	adds	r5, #1
   11e22:	e7e9      	b.n	11df8 <_strtol_l.isra.0+0x84>
   11e24:	270a      	movs	r7, #10
   11e26:	e7d5      	b.n	11dd4 <_strtol_l.isra.0+0x60>
   11e28:	0021      	movs	r1, r4
   11e2a:	3941      	subs	r1, #65	; 0x41
   11e2c:	2919      	cmp	r1, #25
   11e2e:	d801      	bhi.n	11e34 <_strtol_l.isra.0+0xc0>
   11e30:	3c37      	subs	r4, #55	; 0x37
   11e32:	e7e6      	b.n	11e02 <_strtol_l.isra.0+0x8e>
   11e34:	0021      	movs	r1, r4
   11e36:	3961      	subs	r1, #97	; 0x61
   11e38:	2919      	cmp	r1, #25
   11e3a:	d801      	bhi.n	11e40 <_strtol_l.isra.0+0xcc>
   11e3c:	3c57      	subs	r4, #87	; 0x57
   11e3e:	e7e0      	b.n	11e02 <_strtol_l.isra.0+0x8e>
   11e40:	1c5a      	adds	r2, r3, #1
   11e42:	d108      	bne.n	11e56 <_strtol_l.isra.0+0xe2>
   11e44:	9a05      	ldr	r2, [sp, #20]
   11e46:	3323      	adds	r3, #35	; 0x23
   11e48:	6013      	str	r3, [r2, #0]
   11e4a:	9b02      	ldr	r3, [sp, #8]
   11e4c:	0030      	movs	r0, r6
   11e4e:	2b00      	cmp	r3, #0
   11e50:	d10b      	bne.n	11e6a <_strtol_l.isra.0+0xf6>
   11e52:	b007      	add	sp, #28
   11e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11e56:	9a01      	ldr	r2, [sp, #4]
   11e58:	2a00      	cmp	r2, #0
   11e5a:	d000      	beq.n	11e5e <_strtol_l.isra.0+0xea>
   11e5c:	4240      	negs	r0, r0
   11e5e:	9a02      	ldr	r2, [sp, #8]
   11e60:	2a00      	cmp	r2, #0
   11e62:	d0f6      	beq.n	11e52 <_strtol_l.isra.0+0xde>
   11e64:	9a03      	ldr	r2, [sp, #12]
   11e66:	2b00      	cmp	r3, #0
   11e68:	d000      	beq.n	11e6c <_strtol_l.isra.0+0xf8>
   11e6a:	1e6a      	subs	r2, r5, #1
   11e6c:	9b02      	ldr	r3, [sp, #8]
   11e6e:	601a      	str	r2, [r3, #0]
   11e70:	e7ef      	b.n	11e52 <_strtol_l.isra.0+0xde>
   11e72:	2430      	movs	r4, #48	; 0x30
   11e74:	2f00      	cmp	r7, #0
   11e76:	d1ad      	bne.n	11dd4 <_strtol_l.isra.0+0x60>
   11e78:	3708      	adds	r7, #8
   11e7a:	e7ab      	b.n	11dd4 <_strtol_l.isra.0+0x60>
   11e7c:	7fffffff 	.word	0x7fffffff

00011e80 <strtol>:
   11e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11e82:	0013      	movs	r3, r2
   11e84:	4a06      	ldr	r2, [pc, #24]	; (11ea0 <strtol+0x20>)
   11e86:	0005      	movs	r5, r0
   11e88:	6810      	ldr	r0, [r2, #0]
   11e8a:	6a04      	ldr	r4, [r0, #32]
   11e8c:	2c00      	cmp	r4, #0
   11e8e:	d100      	bne.n	11e92 <strtol+0x12>
   11e90:	4c04      	ldr	r4, [pc, #16]	; (11ea4 <strtol+0x24>)
   11e92:	000a      	movs	r2, r1
   11e94:	9400      	str	r4, [sp, #0]
   11e96:	0029      	movs	r1, r5
   11e98:	f7ff ff6c 	bl	11d74 <_strtol_l.isra.0>
   11e9c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   11e9e:	46c0      	nop			; (mov r8, r8)
   11ea0:	20000020 	.word	0x20000020
   11ea4:	20000084 	.word	0x20000084

00011ea8 <__swbuf_r>:
   11ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11eaa:	0005      	movs	r5, r0
   11eac:	000e      	movs	r6, r1
   11eae:	0014      	movs	r4, r2
   11eb0:	2800      	cmp	r0, #0
   11eb2:	d004      	beq.n	11ebe <__swbuf_r+0x16>
   11eb4:	6983      	ldr	r3, [r0, #24]
   11eb6:	2b00      	cmp	r3, #0
   11eb8:	d101      	bne.n	11ebe <__swbuf_r+0x16>
   11eba:	f000 f9b9 	bl	12230 <__sinit>
   11ebe:	4b22      	ldr	r3, [pc, #136]	; (11f48 <__swbuf_r+0xa0>)
   11ec0:	429c      	cmp	r4, r3
   11ec2:	d12d      	bne.n	11f20 <__swbuf_r+0x78>
   11ec4:	686c      	ldr	r4, [r5, #4]
   11ec6:	69a3      	ldr	r3, [r4, #24]
   11ec8:	60a3      	str	r3, [r4, #8]
   11eca:	89a3      	ldrh	r3, [r4, #12]
   11ecc:	071b      	lsls	r3, r3, #28
   11ece:	d531      	bpl.n	11f34 <__swbuf_r+0x8c>
   11ed0:	6923      	ldr	r3, [r4, #16]
   11ed2:	2b00      	cmp	r3, #0
   11ed4:	d02e      	beq.n	11f34 <__swbuf_r+0x8c>
   11ed6:	6823      	ldr	r3, [r4, #0]
   11ed8:	6922      	ldr	r2, [r4, #16]
   11eda:	b2f7      	uxtb	r7, r6
   11edc:	1a98      	subs	r0, r3, r2
   11ede:	6963      	ldr	r3, [r4, #20]
   11ee0:	b2f6      	uxtb	r6, r6
   11ee2:	4298      	cmp	r0, r3
   11ee4:	db05      	blt.n	11ef2 <__swbuf_r+0x4a>
   11ee6:	0021      	movs	r1, r4
   11ee8:	0028      	movs	r0, r5
   11eea:	f000 f933 	bl	12154 <_fflush_r>
   11eee:	2800      	cmp	r0, #0
   11ef0:	d126      	bne.n	11f40 <__swbuf_r+0x98>
   11ef2:	68a3      	ldr	r3, [r4, #8]
   11ef4:	3001      	adds	r0, #1
   11ef6:	3b01      	subs	r3, #1
   11ef8:	60a3      	str	r3, [r4, #8]
   11efa:	6823      	ldr	r3, [r4, #0]
   11efc:	1c5a      	adds	r2, r3, #1
   11efe:	6022      	str	r2, [r4, #0]
   11f00:	701f      	strb	r7, [r3, #0]
   11f02:	6963      	ldr	r3, [r4, #20]
   11f04:	4298      	cmp	r0, r3
   11f06:	d004      	beq.n	11f12 <__swbuf_r+0x6a>
   11f08:	89a3      	ldrh	r3, [r4, #12]
   11f0a:	07db      	lsls	r3, r3, #31
   11f0c:	d51a      	bpl.n	11f44 <__swbuf_r+0x9c>
   11f0e:	2e0a      	cmp	r6, #10
   11f10:	d118      	bne.n	11f44 <__swbuf_r+0x9c>
   11f12:	0021      	movs	r1, r4
   11f14:	0028      	movs	r0, r5
   11f16:	f000 f91d 	bl	12154 <_fflush_r>
   11f1a:	2800      	cmp	r0, #0
   11f1c:	d012      	beq.n	11f44 <__swbuf_r+0x9c>
   11f1e:	e00f      	b.n	11f40 <__swbuf_r+0x98>
   11f20:	4b0a      	ldr	r3, [pc, #40]	; (11f4c <__swbuf_r+0xa4>)
   11f22:	429c      	cmp	r4, r3
   11f24:	d101      	bne.n	11f2a <__swbuf_r+0x82>
   11f26:	68ac      	ldr	r4, [r5, #8]
   11f28:	e7cd      	b.n	11ec6 <__swbuf_r+0x1e>
   11f2a:	4b09      	ldr	r3, [pc, #36]	; (11f50 <__swbuf_r+0xa8>)
   11f2c:	429c      	cmp	r4, r3
   11f2e:	d1ca      	bne.n	11ec6 <__swbuf_r+0x1e>
   11f30:	68ec      	ldr	r4, [r5, #12]
   11f32:	e7c8      	b.n	11ec6 <__swbuf_r+0x1e>
   11f34:	0021      	movs	r1, r4
   11f36:	0028      	movs	r0, r5
   11f38:	f000 f80c 	bl	11f54 <__swsetup_r>
   11f3c:	2800      	cmp	r0, #0
   11f3e:	d0ca      	beq.n	11ed6 <__swbuf_r+0x2e>
   11f40:	2601      	movs	r6, #1
   11f42:	4276      	negs	r6, r6
   11f44:	0030      	movs	r0, r6
   11f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11f48:	0001493c 	.word	0x0001493c
   11f4c:	0001495c 	.word	0x0001495c
   11f50:	0001491c 	.word	0x0001491c

00011f54 <__swsetup_r>:
   11f54:	4b36      	ldr	r3, [pc, #216]	; (12030 <__swsetup_r+0xdc>)
   11f56:	b570      	push	{r4, r5, r6, lr}
   11f58:	681d      	ldr	r5, [r3, #0]
   11f5a:	0006      	movs	r6, r0
   11f5c:	000c      	movs	r4, r1
   11f5e:	2d00      	cmp	r5, #0
   11f60:	d005      	beq.n	11f6e <__swsetup_r+0x1a>
   11f62:	69ab      	ldr	r3, [r5, #24]
   11f64:	2b00      	cmp	r3, #0
   11f66:	d102      	bne.n	11f6e <__swsetup_r+0x1a>
   11f68:	0028      	movs	r0, r5
   11f6a:	f000 f961 	bl	12230 <__sinit>
   11f6e:	4b31      	ldr	r3, [pc, #196]	; (12034 <__swsetup_r+0xe0>)
   11f70:	429c      	cmp	r4, r3
   11f72:	d10f      	bne.n	11f94 <__swsetup_r+0x40>
   11f74:	686c      	ldr	r4, [r5, #4]
   11f76:	230c      	movs	r3, #12
   11f78:	5ee2      	ldrsh	r2, [r4, r3]
   11f7a:	b293      	uxth	r3, r2
   11f7c:	0719      	lsls	r1, r3, #28
   11f7e:	d42d      	bmi.n	11fdc <__swsetup_r+0x88>
   11f80:	06d9      	lsls	r1, r3, #27
   11f82:	d411      	bmi.n	11fa8 <__swsetup_r+0x54>
   11f84:	2309      	movs	r3, #9
   11f86:	2001      	movs	r0, #1
   11f88:	6033      	str	r3, [r6, #0]
   11f8a:	3337      	adds	r3, #55	; 0x37
   11f8c:	4313      	orrs	r3, r2
   11f8e:	81a3      	strh	r3, [r4, #12]
   11f90:	4240      	negs	r0, r0
   11f92:	bd70      	pop	{r4, r5, r6, pc}
   11f94:	4b28      	ldr	r3, [pc, #160]	; (12038 <__swsetup_r+0xe4>)
   11f96:	429c      	cmp	r4, r3
   11f98:	d101      	bne.n	11f9e <__swsetup_r+0x4a>
   11f9a:	68ac      	ldr	r4, [r5, #8]
   11f9c:	e7eb      	b.n	11f76 <__swsetup_r+0x22>
   11f9e:	4b27      	ldr	r3, [pc, #156]	; (1203c <__swsetup_r+0xe8>)
   11fa0:	429c      	cmp	r4, r3
   11fa2:	d1e8      	bne.n	11f76 <__swsetup_r+0x22>
   11fa4:	68ec      	ldr	r4, [r5, #12]
   11fa6:	e7e6      	b.n	11f76 <__swsetup_r+0x22>
   11fa8:	075b      	lsls	r3, r3, #29
   11faa:	d513      	bpl.n	11fd4 <__swsetup_r+0x80>
   11fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11fae:	2900      	cmp	r1, #0
   11fb0:	d008      	beq.n	11fc4 <__swsetup_r+0x70>
   11fb2:	0023      	movs	r3, r4
   11fb4:	3344      	adds	r3, #68	; 0x44
   11fb6:	4299      	cmp	r1, r3
   11fb8:	d002      	beq.n	11fc0 <__swsetup_r+0x6c>
   11fba:	0030      	movs	r0, r6
   11fbc:	f7ff fc50 	bl	11860 <_free_r>
   11fc0:	2300      	movs	r3, #0
   11fc2:	6363      	str	r3, [r4, #52]	; 0x34
   11fc4:	2224      	movs	r2, #36	; 0x24
   11fc6:	89a3      	ldrh	r3, [r4, #12]
   11fc8:	4393      	bics	r3, r2
   11fca:	81a3      	strh	r3, [r4, #12]
   11fcc:	2300      	movs	r3, #0
   11fce:	6063      	str	r3, [r4, #4]
   11fd0:	6923      	ldr	r3, [r4, #16]
   11fd2:	6023      	str	r3, [r4, #0]
   11fd4:	2308      	movs	r3, #8
   11fd6:	89a2      	ldrh	r2, [r4, #12]
   11fd8:	4313      	orrs	r3, r2
   11fda:	81a3      	strh	r3, [r4, #12]
   11fdc:	6923      	ldr	r3, [r4, #16]
   11fde:	2b00      	cmp	r3, #0
   11fe0:	d10b      	bne.n	11ffa <__swsetup_r+0xa6>
   11fe2:	21a0      	movs	r1, #160	; 0xa0
   11fe4:	2280      	movs	r2, #128	; 0x80
   11fe6:	89a3      	ldrh	r3, [r4, #12]
   11fe8:	0089      	lsls	r1, r1, #2
   11fea:	0092      	lsls	r2, r2, #2
   11fec:	400b      	ands	r3, r1
   11fee:	4293      	cmp	r3, r2
   11ff0:	d003      	beq.n	11ffa <__swsetup_r+0xa6>
   11ff2:	0021      	movs	r1, r4
   11ff4:	0030      	movs	r0, r6
   11ff6:	f000 f9db 	bl	123b0 <__smakebuf_r>
   11ffa:	2301      	movs	r3, #1
   11ffc:	89a2      	ldrh	r2, [r4, #12]
   11ffe:	4013      	ands	r3, r2
   12000:	d011      	beq.n	12026 <__swsetup_r+0xd2>
   12002:	2300      	movs	r3, #0
   12004:	60a3      	str	r3, [r4, #8]
   12006:	6963      	ldr	r3, [r4, #20]
   12008:	425b      	negs	r3, r3
   1200a:	61a3      	str	r3, [r4, #24]
   1200c:	2000      	movs	r0, #0
   1200e:	6923      	ldr	r3, [r4, #16]
   12010:	4283      	cmp	r3, r0
   12012:	d1be      	bne.n	11f92 <__swsetup_r+0x3e>
   12014:	230c      	movs	r3, #12
   12016:	5ee2      	ldrsh	r2, [r4, r3]
   12018:	0613      	lsls	r3, r2, #24
   1201a:	d5ba      	bpl.n	11f92 <__swsetup_r+0x3e>
   1201c:	2340      	movs	r3, #64	; 0x40
   1201e:	4313      	orrs	r3, r2
   12020:	81a3      	strh	r3, [r4, #12]
   12022:	3801      	subs	r0, #1
   12024:	e7b5      	b.n	11f92 <__swsetup_r+0x3e>
   12026:	0792      	lsls	r2, r2, #30
   12028:	d400      	bmi.n	1202c <__swsetup_r+0xd8>
   1202a:	6963      	ldr	r3, [r4, #20]
   1202c:	60a3      	str	r3, [r4, #8]
   1202e:	e7ed      	b.n	1200c <__swsetup_r+0xb8>
   12030:	20000020 	.word	0x20000020
   12034:	0001493c 	.word	0x0001493c
   12038:	0001495c 	.word	0x0001495c
   1203c:	0001491c 	.word	0x0001491c

00012040 <__sflush_r>:
   12040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12042:	898a      	ldrh	r2, [r1, #12]
   12044:	0005      	movs	r5, r0
   12046:	000c      	movs	r4, r1
   12048:	0713      	lsls	r3, r2, #28
   1204a:	d460      	bmi.n	1210e <__sflush_r+0xce>
   1204c:	684b      	ldr	r3, [r1, #4]
   1204e:	2b00      	cmp	r3, #0
   12050:	dc04      	bgt.n	1205c <__sflush_r+0x1c>
   12052:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   12054:	2b00      	cmp	r3, #0
   12056:	dc01      	bgt.n	1205c <__sflush_r+0x1c>
   12058:	2000      	movs	r0, #0
   1205a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1205c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1205e:	2f00      	cmp	r7, #0
   12060:	d0fa      	beq.n	12058 <__sflush_r+0x18>
   12062:	2300      	movs	r3, #0
   12064:	682e      	ldr	r6, [r5, #0]
   12066:	602b      	str	r3, [r5, #0]
   12068:	2380      	movs	r3, #128	; 0x80
   1206a:	015b      	lsls	r3, r3, #5
   1206c:	401a      	ands	r2, r3
   1206e:	d034      	beq.n	120da <__sflush_r+0x9a>
   12070:	6d60      	ldr	r0, [r4, #84]	; 0x54
   12072:	89a3      	ldrh	r3, [r4, #12]
   12074:	075b      	lsls	r3, r3, #29
   12076:	d506      	bpl.n	12086 <__sflush_r+0x46>
   12078:	6863      	ldr	r3, [r4, #4]
   1207a:	1ac0      	subs	r0, r0, r3
   1207c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1207e:	2b00      	cmp	r3, #0
   12080:	d001      	beq.n	12086 <__sflush_r+0x46>
   12082:	6c23      	ldr	r3, [r4, #64]	; 0x40
   12084:	1ac0      	subs	r0, r0, r3
   12086:	0002      	movs	r2, r0
   12088:	6a21      	ldr	r1, [r4, #32]
   1208a:	2300      	movs	r3, #0
   1208c:	0028      	movs	r0, r5
   1208e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   12090:	47b8      	blx	r7
   12092:	89a1      	ldrh	r1, [r4, #12]
   12094:	1c43      	adds	r3, r0, #1
   12096:	d106      	bne.n	120a6 <__sflush_r+0x66>
   12098:	682b      	ldr	r3, [r5, #0]
   1209a:	2b1d      	cmp	r3, #29
   1209c:	d831      	bhi.n	12102 <__sflush_r+0xc2>
   1209e:	4a2c      	ldr	r2, [pc, #176]	; (12150 <__sflush_r+0x110>)
   120a0:	40da      	lsrs	r2, r3
   120a2:	07d3      	lsls	r3, r2, #31
   120a4:	d52d      	bpl.n	12102 <__sflush_r+0xc2>
   120a6:	2300      	movs	r3, #0
   120a8:	6063      	str	r3, [r4, #4]
   120aa:	6923      	ldr	r3, [r4, #16]
   120ac:	6023      	str	r3, [r4, #0]
   120ae:	04cb      	lsls	r3, r1, #19
   120b0:	d505      	bpl.n	120be <__sflush_r+0x7e>
   120b2:	1c43      	adds	r3, r0, #1
   120b4:	d102      	bne.n	120bc <__sflush_r+0x7c>
   120b6:	682b      	ldr	r3, [r5, #0]
   120b8:	2b00      	cmp	r3, #0
   120ba:	d100      	bne.n	120be <__sflush_r+0x7e>
   120bc:	6560      	str	r0, [r4, #84]	; 0x54
   120be:	6b61      	ldr	r1, [r4, #52]	; 0x34
   120c0:	602e      	str	r6, [r5, #0]
   120c2:	2900      	cmp	r1, #0
   120c4:	d0c8      	beq.n	12058 <__sflush_r+0x18>
   120c6:	0023      	movs	r3, r4
   120c8:	3344      	adds	r3, #68	; 0x44
   120ca:	4299      	cmp	r1, r3
   120cc:	d002      	beq.n	120d4 <__sflush_r+0x94>
   120ce:	0028      	movs	r0, r5
   120d0:	f7ff fbc6 	bl	11860 <_free_r>
   120d4:	2000      	movs	r0, #0
   120d6:	6360      	str	r0, [r4, #52]	; 0x34
   120d8:	e7bf      	b.n	1205a <__sflush_r+0x1a>
   120da:	2301      	movs	r3, #1
   120dc:	6a21      	ldr	r1, [r4, #32]
   120de:	0028      	movs	r0, r5
   120e0:	47b8      	blx	r7
   120e2:	1c43      	adds	r3, r0, #1
   120e4:	d1c5      	bne.n	12072 <__sflush_r+0x32>
   120e6:	682b      	ldr	r3, [r5, #0]
   120e8:	2b00      	cmp	r3, #0
   120ea:	d0c2      	beq.n	12072 <__sflush_r+0x32>
   120ec:	2b1d      	cmp	r3, #29
   120ee:	d001      	beq.n	120f4 <__sflush_r+0xb4>
   120f0:	2b16      	cmp	r3, #22
   120f2:	d101      	bne.n	120f8 <__sflush_r+0xb8>
   120f4:	602e      	str	r6, [r5, #0]
   120f6:	e7af      	b.n	12058 <__sflush_r+0x18>
   120f8:	2340      	movs	r3, #64	; 0x40
   120fa:	89a2      	ldrh	r2, [r4, #12]
   120fc:	4313      	orrs	r3, r2
   120fe:	81a3      	strh	r3, [r4, #12]
   12100:	e7ab      	b.n	1205a <__sflush_r+0x1a>
   12102:	2340      	movs	r3, #64	; 0x40
   12104:	430b      	orrs	r3, r1
   12106:	2001      	movs	r0, #1
   12108:	81a3      	strh	r3, [r4, #12]
   1210a:	4240      	negs	r0, r0
   1210c:	e7a5      	b.n	1205a <__sflush_r+0x1a>
   1210e:	690f      	ldr	r7, [r1, #16]
   12110:	2f00      	cmp	r7, #0
   12112:	d0a1      	beq.n	12058 <__sflush_r+0x18>
   12114:	680b      	ldr	r3, [r1, #0]
   12116:	600f      	str	r7, [r1, #0]
   12118:	1bdb      	subs	r3, r3, r7
   1211a:	9301      	str	r3, [sp, #4]
   1211c:	2300      	movs	r3, #0
   1211e:	0792      	lsls	r2, r2, #30
   12120:	d100      	bne.n	12124 <__sflush_r+0xe4>
   12122:	694b      	ldr	r3, [r1, #20]
   12124:	60a3      	str	r3, [r4, #8]
   12126:	9b01      	ldr	r3, [sp, #4]
   12128:	2b00      	cmp	r3, #0
   1212a:	dc00      	bgt.n	1212e <__sflush_r+0xee>
   1212c:	e794      	b.n	12058 <__sflush_r+0x18>
   1212e:	9b01      	ldr	r3, [sp, #4]
   12130:	003a      	movs	r2, r7
   12132:	6a21      	ldr	r1, [r4, #32]
   12134:	0028      	movs	r0, r5
   12136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   12138:	47b0      	blx	r6
   1213a:	2800      	cmp	r0, #0
   1213c:	dc03      	bgt.n	12146 <__sflush_r+0x106>
   1213e:	2340      	movs	r3, #64	; 0x40
   12140:	89a2      	ldrh	r2, [r4, #12]
   12142:	4313      	orrs	r3, r2
   12144:	e7df      	b.n	12106 <__sflush_r+0xc6>
   12146:	9b01      	ldr	r3, [sp, #4]
   12148:	183f      	adds	r7, r7, r0
   1214a:	1a1b      	subs	r3, r3, r0
   1214c:	9301      	str	r3, [sp, #4]
   1214e:	e7ea      	b.n	12126 <__sflush_r+0xe6>
   12150:	20400001 	.word	0x20400001

00012154 <_fflush_r>:
   12154:	690b      	ldr	r3, [r1, #16]
   12156:	b570      	push	{r4, r5, r6, lr}
   12158:	0005      	movs	r5, r0
   1215a:	000c      	movs	r4, r1
   1215c:	2b00      	cmp	r3, #0
   1215e:	d101      	bne.n	12164 <_fflush_r+0x10>
   12160:	2000      	movs	r0, #0
   12162:	bd70      	pop	{r4, r5, r6, pc}
   12164:	2800      	cmp	r0, #0
   12166:	d004      	beq.n	12172 <_fflush_r+0x1e>
   12168:	6983      	ldr	r3, [r0, #24]
   1216a:	2b00      	cmp	r3, #0
   1216c:	d101      	bne.n	12172 <_fflush_r+0x1e>
   1216e:	f000 f85f 	bl	12230 <__sinit>
   12172:	4b0b      	ldr	r3, [pc, #44]	; (121a0 <_fflush_r+0x4c>)
   12174:	429c      	cmp	r4, r3
   12176:	d109      	bne.n	1218c <_fflush_r+0x38>
   12178:	686c      	ldr	r4, [r5, #4]
   1217a:	220c      	movs	r2, #12
   1217c:	5ea3      	ldrsh	r3, [r4, r2]
   1217e:	2b00      	cmp	r3, #0
   12180:	d0ee      	beq.n	12160 <_fflush_r+0xc>
   12182:	0021      	movs	r1, r4
   12184:	0028      	movs	r0, r5
   12186:	f7ff ff5b 	bl	12040 <__sflush_r>
   1218a:	e7ea      	b.n	12162 <_fflush_r+0xe>
   1218c:	4b05      	ldr	r3, [pc, #20]	; (121a4 <_fflush_r+0x50>)
   1218e:	429c      	cmp	r4, r3
   12190:	d101      	bne.n	12196 <_fflush_r+0x42>
   12192:	68ac      	ldr	r4, [r5, #8]
   12194:	e7f1      	b.n	1217a <_fflush_r+0x26>
   12196:	4b04      	ldr	r3, [pc, #16]	; (121a8 <_fflush_r+0x54>)
   12198:	429c      	cmp	r4, r3
   1219a:	d1ee      	bne.n	1217a <_fflush_r+0x26>
   1219c:	68ec      	ldr	r4, [r5, #12]
   1219e:	e7ec      	b.n	1217a <_fflush_r+0x26>
   121a0:	0001493c 	.word	0x0001493c
   121a4:	0001495c 	.word	0x0001495c
   121a8:	0001491c 	.word	0x0001491c

000121ac <_cleanup_r>:
   121ac:	b510      	push	{r4, lr}
   121ae:	4902      	ldr	r1, [pc, #8]	; (121b8 <_cleanup_r+0xc>)
   121b0:	f000 f8b2 	bl	12318 <_fwalk_reent>
   121b4:	bd10      	pop	{r4, pc}
   121b6:	46c0      	nop			; (mov r8, r8)
   121b8:	00012155 	.word	0x00012155

000121bc <std.isra.0>:
   121bc:	2300      	movs	r3, #0
   121be:	b510      	push	{r4, lr}
   121c0:	0004      	movs	r4, r0
   121c2:	6003      	str	r3, [r0, #0]
   121c4:	6043      	str	r3, [r0, #4]
   121c6:	6083      	str	r3, [r0, #8]
   121c8:	8181      	strh	r1, [r0, #12]
   121ca:	6643      	str	r3, [r0, #100]	; 0x64
   121cc:	81c2      	strh	r2, [r0, #14]
   121ce:	6103      	str	r3, [r0, #16]
   121d0:	6143      	str	r3, [r0, #20]
   121d2:	6183      	str	r3, [r0, #24]
   121d4:	0019      	movs	r1, r3
   121d6:	2208      	movs	r2, #8
   121d8:	305c      	adds	r0, #92	; 0x5c
   121da:	f7ff fb38 	bl	1184e <memset>
   121de:	4b05      	ldr	r3, [pc, #20]	; (121f4 <std.isra.0+0x38>)
   121e0:	6224      	str	r4, [r4, #32]
   121e2:	6263      	str	r3, [r4, #36]	; 0x24
   121e4:	4b04      	ldr	r3, [pc, #16]	; (121f8 <std.isra.0+0x3c>)
   121e6:	62a3      	str	r3, [r4, #40]	; 0x28
   121e8:	4b04      	ldr	r3, [pc, #16]	; (121fc <std.isra.0+0x40>)
   121ea:	62e3      	str	r3, [r4, #44]	; 0x2c
   121ec:	4b04      	ldr	r3, [pc, #16]	; (12200 <std.isra.0+0x44>)
   121ee:	6323      	str	r3, [r4, #48]	; 0x30
   121f0:	bd10      	pop	{r4, pc}
   121f2:	46c0      	nop			; (mov r8, r8)
   121f4:	00012d25 	.word	0x00012d25
   121f8:	00012d4d 	.word	0x00012d4d
   121fc:	00012d85 	.word	0x00012d85
   12200:	00012db1 	.word	0x00012db1

00012204 <__sfmoreglue>:
   12204:	b570      	push	{r4, r5, r6, lr}
   12206:	2568      	movs	r5, #104	; 0x68
   12208:	1e4a      	subs	r2, r1, #1
   1220a:	4355      	muls	r5, r2
   1220c:	000e      	movs	r6, r1
   1220e:	0029      	movs	r1, r5
   12210:	3174      	adds	r1, #116	; 0x74
   12212:	f7ff fb6f 	bl	118f4 <_malloc_r>
   12216:	1e04      	subs	r4, r0, #0
   12218:	d008      	beq.n	1222c <__sfmoreglue+0x28>
   1221a:	2100      	movs	r1, #0
   1221c:	002a      	movs	r2, r5
   1221e:	6001      	str	r1, [r0, #0]
   12220:	6046      	str	r6, [r0, #4]
   12222:	300c      	adds	r0, #12
   12224:	60a0      	str	r0, [r4, #8]
   12226:	3268      	adds	r2, #104	; 0x68
   12228:	f7ff fb11 	bl	1184e <memset>
   1222c:	0020      	movs	r0, r4
   1222e:	bd70      	pop	{r4, r5, r6, pc}

00012230 <__sinit>:
   12230:	6983      	ldr	r3, [r0, #24]
   12232:	b513      	push	{r0, r1, r4, lr}
   12234:	0004      	movs	r4, r0
   12236:	2b00      	cmp	r3, #0
   12238:	d128      	bne.n	1228c <__sinit+0x5c>
   1223a:	6483      	str	r3, [r0, #72]	; 0x48
   1223c:	64c3      	str	r3, [r0, #76]	; 0x4c
   1223e:	6503      	str	r3, [r0, #80]	; 0x50
   12240:	4b13      	ldr	r3, [pc, #76]	; (12290 <__sinit+0x60>)
   12242:	4a14      	ldr	r2, [pc, #80]	; (12294 <__sinit+0x64>)
   12244:	681b      	ldr	r3, [r3, #0]
   12246:	6282      	str	r2, [r0, #40]	; 0x28
   12248:	9301      	str	r3, [sp, #4]
   1224a:	4298      	cmp	r0, r3
   1224c:	d101      	bne.n	12252 <__sinit+0x22>
   1224e:	2301      	movs	r3, #1
   12250:	6183      	str	r3, [r0, #24]
   12252:	0020      	movs	r0, r4
   12254:	f000 f820 	bl	12298 <__sfp>
   12258:	6060      	str	r0, [r4, #4]
   1225a:	0020      	movs	r0, r4
   1225c:	f000 f81c 	bl	12298 <__sfp>
   12260:	60a0      	str	r0, [r4, #8]
   12262:	0020      	movs	r0, r4
   12264:	f000 f818 	bl	12298 <__sfp>
   12268:	2200      	movs	r2, #0
   1226a:	60e0      	str	r0, [r4, #12]
   1226c:	2104      	movs	r1, #4
   1226e:	6860      	ldr	r0, [r4, #4]
   12270:	f7ff ffa4 	bl	121bc <std.isra.0>
   12274:	2201      	movs	r2, #1
   12276:	2109      	movs	r1, #9
   12278:	68a0      	ldr	r0, [r4, #8]
   1227a:	f7ff ff9f 	bl	121bc <std.isra.0>
   1227e:	2202      	movs	r2, #2
   12280:	2112      	movs	r1, #18
   12282:	68e0      	ldr	r0, [r4, #12]
   12284:	f7ff ff9a 	bl	121bc <std.isra.0>
   12288:	2301      	movs	r3, #1
   1228a:	61a3      	str	r3, [r4, #24]
   1228c:	bd13      	pop	{r0, r1, r4, pc}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	00014918 	.word	0x00014918
   12294:	000121ad 	.word	0x000121ad

00012298 <__sfp>:
   12298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1229a:	4b1e      	ldr	r3, [pc, #120]	; (12314 <__sfp+0x7c>)
   1229c:	0007      	movs	r7, r0
   1229e:	681e      	ldr	r6, [r3, #0]
   122a0:	69b3      	ldr	r3, [r6, #24]
   122a2:	2b00      	cmp	r3, #0
   122a4:	d102      	bne.n	122ac <__sfp+0x14>
   122a6:	0030      	movs	r0, r6
   122a8:	f7ff ffc2 	bl	12230 <__sinit>
   122ac:	3648      	adds	r6, #72	; 0x48
   122ae:	68b4      	ldr	r4, [r6, #8]
   122b0:	6873      	ldr	r3, [r6, #4]
   122b2:	3b01      	subs	r3, #1
   122b4:	d504      	bpl.n	122c0 <__sfp+0x28>
   122b6:	6833      	ldr	r3, [r6, #0]
   122b8:	2b00      	cmp	r3, #0
   122ba:	d007      	beq.n	122cc <__sfp+0x34>
   122bc:	6836      	ldr	r6, [r6, #0]
   122be:	e7f6      	b.n	122ae <__sfp+0x16>
   122c0:	220c      	movs	r2, #12
   122c2:	5ea5      	ldrsh	r5, [r4, r2]
   122c4:	2d00      	cmp	r5, #0
   122c6:	d00d      	beq.n	122e4 <__sfp+0x4c>
   122c8:	3468      	adds	r4, #104	; 0x68
   122ca:	e7f2      	b.n	122b2 <__sfp+0x1a>
   122cc:	2104      	movs	r1, #4
   122ce:	0038      	movs	r0, r7
   122d0:	f7ff ff98 	bl	12204 <__sfmoreglue>
   122d4:	6030      	str	r0, [r6, #0]
   122d6:	2800      	cmp	r0, #0
   122d8:	d1f0      	bne.n	122bc <__sfp+0x24>
   122da:	230c      	movs	r3, #12
   122dc:	0004      	movs	r4, r0
   122de:	603b      	str	r3, [r7, #0]
   122e0:	0020      	movs	r0, r4
   122e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   122e4:	2301      	movs	r3, #1
   122e6:	0020      	movs	r0, r4
   122e8:	425b      	negs	r3, r3
   122ea:	81e3      	strh	r3, [r4, #14]
   122ec:	3302      	adds	r3, #2
   122ee:	81a3      	strh	r3, [r4, #12]
   122f0:	6665      	str	r5, [r4, #100]	; 0x64
   122f2:	6025      	str	r5, [r4, #0]
   122f4:	60a5      	str	r5, [r4, #8]
   122f6:	6065      	str	r5, [r4, #4]
   122f8:	6125      	str	r5, [r4, #16]
   122fa:	6165      	str	r5, [r4, #20]
   122fc:	61a5      	str	r5, [r4, #24]
   122fe:	2208      	movs	r2, #8
   12300:	0029      	movs	r1, r5
   12302:	305c      	adds	r0, #92	; 0x5c
   12304:	f7ff faa3 	bl	1184e <memset>
   12308:	6365      	str	r5, [r4, #52]	; 0x34
   1230a:	63a5      	str	r5, [r4, #56]	; 0x38
   1230c:	64a5      	str	r5, [r4, #72]	; 0x48
   1230e:	64e5      	str	r5, [r4, #76]	; 0x4c
   12310:	e7e6      	b.n	122e0 <__sfp+0x48>
   12312:	46c0      	nop			; (mov r8, r8)
   12314:	00014918 	.word	0x00014918

00012318 <_fwalk_reent>:
   12318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1231a:	0004      	movs	r4, r0
   1231c:	0007      	movs	r7, r0
   1231e:	2600      	movs	r6, #0
   12320:	9101      	str	r1, [sp, #4]
   12322:	3448      	adds	r4, #72	; 0x48
   12324:	2c00      	cmp	r4, #0
   12326:	d101      	bne.n	1232c <_fwalk_reent+0x14>
   12328:	0030      	movs	r0, r6
   1232a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1232c:	6863      	ldr	r3, [r4, #4]
   1232e:	68a5      	ldr	r5, [r4, #8]
   12330:	9300      	str	r3, [sp, #0]
   12332:	9b00      	ldr	r3, [sp, #0]
   12334:	3b01      	subs	r3, #1
   12336:	9300      	str	r3, [sp, #0]
   12338:	d501      	bpl.n	1233e <_fwalk_reent+0x26>
   1233a:	6824      	ldr	r4, [r4, #0]
   1233c:	e7f2      	b.n	12324 <_fwalk_reent+0xc>
   1233e:	89ab      	ldrh	r3, [r5, #12]
   12340:	2b01      	cmp	r3, #1
   12342:	d908      	bls.n	12356 <_fwalk_reent+0x3e>
   12344:	220e      	movs	r2, #14
   12346:	5eab      	ldrsh	r3, [r5, r2]
   12348:	3301      	adds	r3, #1
   1234a:	d004      	beq.n	12356 <_fwalk_reent+0x3e>
   1234c:	0029      	movs	r1, r5
   1234e:	0038      	movs	r0, r7
   12350:	9b01      	ldr	r3, [sp, #4]
   12352:	4798      	blx	r3
   12354:	4306      	orrs	r6, r0
   12356:	3568      	adds	r5, #104	; 0x68
   12358:	e7eb      	b.n	12332 <_fwalk_reent+0x1a>

0001235a <__locale_ctype_ptr_l>:
   1235a:	30ec      	adds	r0, #236	; 0xec
   1235c:	6800      	ldr	r0, [r0, #0]
   1235e:	4770      	bx	lr

00012360 <__swhatbuf_r>:
   12360:	b570      	push	{r4, r5, r6, lr}
   12362:	000e      	movs	r6, r1
   12364:	001d      	movs	r5, r3
   12366:	230e      	movs	r3, #14
   12368:	5ec9      	ldrsh	r1, [r1, r3]
   1236a:	b090      	sub	sp, #64	; 0x40
   1236c:	0014      	movs	r4, r2
   1236e:	2900      	cmp	r1, #0
   12370:	da07      	bge.n	12382 <__swhatbuf_r+0x22>
   12372:	2300      	movs	r3, #0
   12374:	602b      	str	r3, [r5, #0]
   12376:	89b3      	ldrh	r3, [r6, #12]
   12378:	061b      	lsls	r3, r3, #24
   1237a:	d411      	bmi.n	123a0 <__swhatbuf_r+0x40>
   1237c:	2380      	movs	r3, #128	; 0x80
   1237e:	00db      	lsls	r3, r3, #3
   12380:	e00f      	b.n	123a2 <__swhatbuf_r+0x42>
   12382:	aa01      	add	r2, sp, #4
   12384:	f000 fd4c 	bl	12e20 <_fstat_r>
   12388:	2800      	cmp	r0, #0
   1238a:	dbf2      	blt.n	12372 <__swhatbuf_r+0x12>
   1238c:	22f0      	movs	r2, #240	; 0xf0
   1238e:	9b02      	ldr	r3, [sp, #8]
   12390:	0212      	lsls	r2, r2, #8
   12392:	4013      	ands	r3, r2
   12394:	4a05      	ldr	r2, [pc, #20]	; (123ac <__swhatbuf_r+0x4c>)
   12396:	189b      	adds	r3, r3, r2
   12398:	425a      	negs	r2, r3
   1239a:	4153      	adcs	r3, r2
   1239c:	602b      	str	r3, [r5, #0]
   1239e:	e7ed      	b.n	1237c <__swhatbuf_r+0x1c>
   123a0:	2340      	movs	r3, #64	; 0x40
   123a2:	2000      	movs	r0, #0
   123a4:	6023      	str	r3, [r4, #0]
   123a6:	b010      	add	sp, #64	; 0x40
   123a8:	bd70      	pop	{r4, r5, r6, pc}
   123aa:	46c0      	nop			; (mov r8, r8)
   123ac:	ffffe000 	.word	0xffffe000

000123b0 <__smakebuf_r>:
   123b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   123b2:	2602      	movs	r6, #2
   123b4:	898b      	ldrh	r3, [r1, #12]
   123b6:	0005      	movs	r5, r0
   123b8:	000c      	movs	r4, r1
   123ba:	4233      	tst	r3, r6
   123bc:	d006      	beq.n	123cc <__smakebuf_r+0x1c>
   123be:	0023      	movs	r3, r4
   123c0:	3347      	adds	r3, #71	; 0x47
   123c2:	6023      	str	r3, [r4, #0]
   123c4:	6123      	str	r3, [r4, #16]
   123c6:	2301      	movs	r3, #1
   123c8:	6163      	str	r3, [r4, #20]
   123ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   123cc:	ab01      	add	r3, sp, #4
   123ce:	466a      	mov	r2, sp
   123d0:	f7ff ffc6 	bl	12360 <__swhatbuf_r>
   123d4:	9900      	ldr	r1, [sp, #0]
   123d6:	0007      	movs	r7, r0
   123d8:	0028      	movs	r0, r5
   123da:	f7ff fa8b 	bl	118f4 <_malloc_r>
   123de:	2800      	cmp	r0, #0
   123e0:	d106      	bne.n	123f0 <__smakebuf_r+0x40>
   123e2:	220c      	movs	r2, #12
   123e4:	5ea3      	ldrsh	r3, [r4, r2]
   123e6:	059a      	lsls	r2, r3, #22
   123e8:	d4ef      	bmi.n	123ca <__smakebuf_r+0x1a>
   123ea:	431e      	orrs	r6, r3
   123ec:	81a6      	strh	r6, [r4, #12]
   123ee:	e7e6      	b.n	123be <__smakebuf_r+0xe>
   123f0:	4b0d      	ldr	r3, [pc, #52]	; (12428 <__smakebuf_r+0x78>)
   123f2:	62ab      	str	r3, [r5, #40]	; 0x28
   123f4:	2380      	movs	r3, #128	; 0x80
   123f6:	89a2      	ldrh	r2, [r4, #12]
   123f8:	6020      	str	r0, [r4, #0]
   123fa:	4313      	orrs	r3, r2
   123fc:	81a3      	strh	r3, [r4, #12]
   123fe:	9b00      	ldr	r3, [sp, #0]
   12400:	6120      	str	r0, [r4, #16]
   12402:	6163      	str	r3, [r4, #20]
   12404:	9b01      	ldr	r3, [sp, #4]
   12406:	2b00      	cmp	r3, #0
   12408:	d00a      	beq.n	12420 <__smakebuf_r+0x70>
   1240a:	230e      	movs	r3, #14
   1240c:	5ee1      	ldrsh	r1, [r4, r3]
   1240e:	0028      	movs	r0, r5
   12410:	f000 fd18 	bl	12e44 <_isatty_r>
   12414:	2800      	cmp	r0, #0
   12416:	d003      	beq.n	12420 <__smakebuf_r+0x70>
   12418:	2301      	movs	r3, #1
   1241a:	89a2      	ldrh	r2, [r4, #12]
   1241c:	4313      	orrs	r3, r2
   1241e:	81a3      	strh	r3, [r4, #12]
   12420:	89a0      	ldrh	r0, [r4, #12]
   12422:	4338      	orrs	r0, r7
   12424:	81a0      	strh	r0, [r4, #12]
   12426:	e7d0      	b.n	123ca <__smakebuf_r+0x1a>
   12428:	000121ad 	.word	0x000121ad

0001242c <__ascii_mbtowc>:
   1242c:	b082      	sub	sp, #8
   1242e:	2900      	cmp	r1, #0
   12430:	d100      	bne.n	12434 <__ascii_mbtowc+0x8>
   12432:	a901      	add	r1, sp, #4
   12434:	1e10      	subs	r0, r2, #0
   12436:	d006      	beq.n	12446 <__ascii_mbtowc+0x1a>
   12438:	2b00      	cmp	r3, #0
   1243a:	d006      	beq.n	1244a <__ascii_mbtowc+0x1e>
   1243c:	7813      	ldrb	r3, [r2, #0]
   1243e:	600b      	str	r3, [r1, #0]
   12440:	7810      	ldrb	r0, [r2, #0]
   12442:	1e43      	subs	r3, r0, #1
   12444:	4198      	sbcs	r0, r3
   12446:	b002      	add	sp, #8
   12448:	4770      	bx	lr
   1244a:	2002      	movs	r0, #2
   1244c:	4240      	negs	r0, r0
   1244e:	e7fa      	b.n	12446 <__ascii_mbtowc+0x1a>

00012450 <__malloc_lock>:
   12450:	4770      	bx	lr

00012452 <__malloc_unlock>:
   12452:	4770      	bx	lr

00012454 <__ssputs_r>:
   12454:	b5f0      	push	{r4, r5, r6, r7, lr}
   12456:	688e      	ldr	r6, [r1, #8]
   12458:	b085      	sub	sp, #20
   1245a:	0007      	movs	r7, r0
   1245c:	000c      	movs	r4, r1
   1245e:	9203      	str	r2, [sp, #12]
   12460:	9301      	str	r3, [sp, #4]
   12462:	429e      	cmp	r6, r3
   12464:	d839      	bhi.n	124da <__ssputs_r+0x86>
   12466:	2390      	movs	r3, #144	; 0x90
   12468:	898a      	ldrh	r2, [r1, #12]
   1246a:	00db      	lsls	r3, r3, #3
   1246c:	421a      	tst	r2, r3
   1246e:	d034      	beq.n	124da <__ssputs_r+0x86>
   12470:	2503      	movs	r5, #3
   12472:	6909      	ldr	r1, [r1, #16]
   12474:	6823      	ldr	r3, [r4, #0]
   12476:	1a5b      	subs	r3, r3, r1
   12478:	9302      	str	r3, [sp, #8]
   1247a:	6963      	ldr	r3, [r4, #20]
   1247c:	9802      	ldr	r0, [sp, #8]
   1247e:	435d      	muls	r5, r3
   12480:	0feb      	lsrs	r3, r5, #31
   12482:	195d      	adds	r5, r3, r5
   12484:	9b01      	ldr	r3, [sp, #4]
   12486:	106d      	asrs	r5, r5, #1
   12488:	3301      	adds	r3, #1
   1248a:	181b      	adds	r3, r3, r0
   1248c:	42ab      	cmp	r3, r5
   1248e:	d900      	bls.n	12492 <__ssputs_r+0x3e>
   12490:	001d      	movs	r5, r3
   12492:	0553      	lsls	r3, r2, #21
   12494:	d532      	bpl.n	124fc <__ssputs_r+0xa8>
   12496:	0029      	movs	r1, r5
   12498:	0038      	movs	r0, r7
   1249a:	f7ff fa2b 	bl	118f4 <_malloc_r>
   1249e:	1e06      	subs	r6, r0, #0
   124a0:	d109      	bne.n	124b6 <__ssputs_r+0x62>
   124a2:	230c      	movs	r3, #12
   124a4:	603b      	str	r3, [r7, #0]
   124a6:	2340      	movs	r3, #64	; 0x40
   124a8:	2001      	movs	r0, #1
   124aa:	89a2      	ldrh	r2, [r4, #12]
   124ac:	4240      	negs	r0, r0
   124ae:	4313      	orrs	r3, r2
   124b0:	81a3      	strh	r3, [r4, #12]
   124b2:	b005      	add	sp, #20
   124b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124b6:	9a02      	ldr	r2, [sp, #8]
   124b8:	6921      	ldr	r1, [r4, #16]
   124ba:	f7ff f9ad 	bl	11818 <memcpy>
   124be:	89a3      	ldrh	r3, [r4, #12]
   124c0:	4a14      	ldr	r2, [pc, #80]	; (12514 <__ssputs_r+0xc0>)
   124c2:	401a      	ands	r2, r3
   124c4:	2380      	movs	r3, #128	; 0x80
   124c6:	4313      	orrs	r3, r2
   124c8:	81a3      	strh	r3, [r4, #12]
   124ca:	9b02      	ldr	r3, [sp, #8]
   124cc:	6126      	str	r6, [r4, #16]
   124ce:	18f6      	adds	r6, r6, r3
   124d0:	6026      	str	r6, [r4, #0]
   124d2:	6165      	str	r5, [r4, #20]
   124d4:	9e01      	ldr	r6, [sp, #4]
   124d6:	1aed      	subs	r5, r5, r3
   124d8:	60a5      	str	r5, [r4, #8]
   124da:	9b01      	ldr	r3, [sp, #4]
   124dc:	42b3      	cmp	r3, r6
   124de:	d200      	bcs.n	124e2 <__ssputs_r+0x8e>
   124e0:	001e      	movs	r6, r3
   124e2:	0032      	movs	r2, r6
   124e4:	9903      	ldr	r1, [sp, #12]
   124e6:	6820      	ldr	r0, [r4, #0]
   124e8:	f7ff f99f 	bl	1182a <memmove>
   124ec:	68a3      	ldr	r3, [r4, #8]
   124ee:	2000      	movs	r0, #0
   124f0:	1b9b      	subs	r3, r3, r6
   124f2:	60a3      	str	r3, [r4, #8]
   124f4:	6823      	ldr	r3, [r4, #0]
   124f6:	199e      	adds	r6, r3, r6
   124f8:	6026      	str	r6, [r4, #0]
   124fa:	e7da      	b.n	124b2 <__ssputs_r+0x5e>
   124fc:	002a      	movs	r2, r5
   124fe:	0038      	movs	r0, r7
   12500:	f000 fcd1 	bl	12ea6 <_realloc_r>
   12504:	1e06      	subs	r6, r0, #0
   12506:	d1e0      	bne.n	124ca <__ssputs_r+0x76>
   12508:	6921      	ldr	r1, [r4, #16]
   1250a:	0038      	movs	r0, r7
   1250c:	f7ff f9a8 	bl	11860 <_free_r>
   12510:	e7c7      	b.n	124a2 <__ssputs_r+0x4e>
   12512:	46c0      	nop			; (mov r8, r8)
   12514:	fffffb7f 	.word	0xfffffb7f

00012518 <_svfiprintf_r>:
   12518:	b5f0      	push	{r4, r5, r6, r7, lr}
   1251a:	b09f      	sub	sp, #124	; 0x7c
   1251c:	9002      	str	r0, [sp, #8]
   1251e:	9305      	str	r3, [sp, #20]
   12520:	898b      	ldrh	r3, [r1, #12]
   12522:	000f      	movs	r7, r1
   12524:	0016      	movs	r6, r2
   12526:	061b      	lsls	r3, r3, #24
   12528:	d511      	bpl.n	1254e <_svfiprintf_r+0x36>
   1252a:	690b      	ldr	r3, [r1, #16]
   1252c:	2b00      	cmp	r3, #0
   1252e:	d10e      	bne.n	1254e <_svfiprintf_r+0x36>
   12530:	2140      	movs	r1, #64	; 0x40
   12532:	f7ff f9df 	bl	118f4 <_malloc_r>
   12536:	6038      	str	r0, [r7, #0]
   12538:	6138      	str	r0, [r7, #16]
   1253a:	2800      	cmp	r0, #0
   1253c:	d105      	bne.n	1254a <_svfiprintf_r+0x32>
   1253e:	230c      	movs	r3, #12
   12540:	9a02      	ldr	r2, [sp, #8]
   12542:	3801      	subs	r0, #1
   12544:	6013      	str	r3, [r2, #0]
   12546:	b01f      	add	sp, #124	; 0x7c
   12548:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1254a:	2340      	movs	r3, #64	; 0x40
   1254c:	617b      	str	r3, [r7, #20]
   1254e:	2300      	movs	r3, #0
   12550:	ad06      	add	r5, sp, #24
   12552:	616b      	str	r3, [r5, #20]
   12554:	3320      	adds	r3, #32
   12556:	766b      	strb	r3, [r5, #25]
   12558:	3310      	adds	r3, #16
   1255a:	76ab      	strb	r3, [r5, #26]
   1255c:	0034      	movs	r4, r6
   1255e:	7823      	ldrb	r3, [r4, #0]
   12560:	2b00      	cmp	r3, #0
   12562:	d147      	bne.n	125f4 <_svfiprintf_r+0xdc>
   12564:	1ba3      	subs	r3, r4, r6
   12566:	9304      	str	r3, [sp, #16]
   12568:	d00d      	beq.n	12586 <_svfiprintf_r+0x6e>
   1256a:	1ba3      	subs	r3, r4, r6
   1256c:	0032      	movs	r2, r6
   1256e:	0039      	movs	r1, r7
   12570:	9802      	ldr	r0, [sp, #8]
   12572:	f7ff ff6f 	bl	12454 <__ssputs_r>
   12576:	1c43      	adds	r3, r0, #1
   12578:	d100      	bne.n	1257c <_svfiprintf_r+0x64>
   1257a:	e0b5      	b.n	126e8 <_svfiprintf_r+0x1d0>
   1257c:	696a      	ldr	r2, [r5, #20]
   1257e:	9b04      	ldr	r3, [sp, #16]
   12580:	4694      	mov	ip, r2
   12582:	4463      	add	r3, ip
   12584:	616b      	str	r3, [r5, #20]
   12586:	7823      	ldrb	r3, [r4, #0]
   12588:	2b00      	cmp	r3, #0
   1258a:	d100      	bne.n	1258e <_svfiprintf_r+0x76>
   1258c:	e0ac      	b.n	126e8 <_svfiprintf_r+0x1d0>
   1258e:	2201      	movs	r2, #1
   12590:	2300      	movs	r3, #0
   12592:	4252      	negs	r2, r2
   12594:	606a      	str	r2, [r5, #4]
   12596:	a902      	add	r1, sp, #8
   12598:	3254      	adds	r2, #84	; 0x54
   1259a:	1852      	adds	r2, r2, r1
   1259c:	3401      	adds	r4, #1
   1259e:	602b      	str	r3, [r5, #0]
   125a0:	60eb      	str	r3, [r5, #12]
   125a2:	60ab      	str	r3, [r5, #8]
   125a4:	7013      	strb	r3, [r2, #0]
   125a6:	65ab      	str	r3, [r5, #88]	; 0x58
   125a8:	4e58      	ldr	r6, [pc, #352]	; (1270c <_svfiprintf_r+0x1f4>)
   125aa:	2205      	movs	r2, #5
   125ac:	7821      	ldrb	r1, [r4, #0]
   125ae:	0030      	movs	r0, r6
   125b0:	f000 fc6e 	bl	12e90 <memchr>
   125b4:	1c62      	adds	r2, r4, #1
   125b6:	2800      	cmp	r0, #0
   125b8:	d120      	bne.n	125fc <_svfiprintf_r+0xe4>
   125ba:	6829      	ldr	r1, [r5, #0]
   125bc:	06cb      	lsls	r3, r1, #27
   125be:	d504      	bpl.n	125ca <_svfiprintf_r+0xb2>
   125c0:	2353      	movs	r3, #83	; 0x53
   125c2:	ae02      	add	r6, sp, #8
   125c4:	3020      	adds	r0, #32
   125c6:	199b      	adds	r3, r3, r6
   125c8:	7018      	strb	r0, [r3, #0]
   125ca:	070b      	lsls	r3, r1, #28
   125cc:	d504      	bpl.n	125d8 <_svfiprintf_r+0xc0>
   125ce:	2353      	movs	r3, #83	; 0x53
   125d0:	202b      	movs	r0, #43	; 0x2b
   125d2:	ae02      	add	r6, sp, #8
   125d4:	199b      	adds	r3, r3, r6
   125d6:	7018      	strb	r0, [r3, #0]
   125d8:	7823      	ldrb	r3, [r4, #0]
   125da:	2b2a      	cmp	r3, #42	; 0x2a
   125dc:	d016      	beq.n	1260c <_svfiprintf_r+0xf4>
   125de:	2000      	movs	r0, #0
   125e0:	210a      	movs	r1, #10
   125e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   125e4:	7822      	ldrb	r2, [r4, #0]
   125e6:	3a30      	subs	r2, #48	; 0x30
   125e8:	2a09      	cmp	r2, #9
   125ea:	d955      	bls.n	12698 <_svfiprintf_r+0x180>
   125ec:	2800      	cmp	r0, #0
   125ee:	d015      	beq.n	1261c <_svfiprintf_r+0x104>
   125f0:	9309      	str	r3, [sp, #36]	; 0x24
   125f2:	e013      	b.n	1261c <_svfiprintf_r+0x104>
   125f4:	2b25      	cmp	r3, #37	; 0x25
   125f6:	d0b5      	beq.n	12564 <_svfiprintf_r+0x4c>
   125f8:	3401      	adds	r4, #1
   125fa:	e7b0      	b.n	1255e <_svfiprintf_r+0x46>
   125fc:	2301      	movs	r3, #1
   125fe:	1b80      	subs	r0, r0, r6
   12600:	4083      	lsls	r3, r0
   12602:	6829      	ldr	r1, [r5, #0]
   12604:	0014      	movs	r4, r2
   12606:	430b      	orrs	r3, r1
   12608:	602b      	str	r3, [r5, #0]
   1260a:	e7cd      	b.n	125a8 <_svfiprintf_r+0x90>
   1260c:	9b05      	ldr	r3, [sp, #20]
   1260e:	1d18      	adds	r0, r3, #4
   12610:	681b      	ldr	r3, [r3, #0]
   12612:	9005      	str	r0, [sp, #20]
   12614:	2b00      	cmp	r3, #0
   12616:	db39      	blt.n	1268c <_svfiprintf_r+0x174>
   12618:	9309      	str	r3, [sp, #36]	; 0x24
   1261a:	0014      	movs	r4, r2
   1261c:	7823      	ldrb	r3, [r4, #0]
   1261e:	2b2e      	cmp	r3, #46	; 0x2e
   12620:	d10b      	bne.n	1263a <_svfiprintf_r+0x122>
   12622:	7863      	ldrb	r3, [r4, #1]
   12624:	1c62      	adds	r2, r4, #1
   12626:	2b2a      	cmp	r3, #42	; 0x2a
   12628:	d13e      	bne.n	126a8 <_svfiprintf_r+0x190>
   1262a:	9b05      	ldr	r3, [sp, #20]
   1262c:	3402      	adds	r4, #2
   1262e:	1d1a      	adds	r2, r3, #4
   12630:	681b      	ldr	r3, [r3, #0]
   12632:	9205      	str	r2, [sp, #20]
   12634:	2b00      	cmp	r3, #0
   12636:	db34      	blt.n	126a2 <_svfiprintf_r+0x18a>
   12638:	9307      	str	r3, [sp, #28]
   1263a:	4e35      	ldr	r6, [pc, #212]	; (12710 <_svfiprintf_r+0x1f8>)
   1263c:	7821      	ldrb	r1, [r4, #0]
   1263e:	2203      	movs	r2, #3
   12640:	0030      	movs	r0, r6
   12642:	f000 fc25 	bl	12e90 <memchr>
   12646:	2800      	cmp	r0, #0
   12648:	d006      	beq.n	12658 <_svfiprintf_r+0x140>
   1264a:	2340      	movs	r3, #64	; 0x40
   1264c:	1b80      	subs	r0, r0, r6
   1264e:	4083      	lsls	r3, r0
   12650:	682a      	ldr	r2, [r5, #0]
   12652:	3401      	adds	r4, #1
   12654:	4313      	orrs	r3, r2
   12656:	602b      	str	r3, [r5, #0]
   12658:	7821      	ldrb	r1, [r4, #0]
   1265a:	2206      	movs	r2, #6
   1265c:	482d      	ldr	r0, [pc, #180]	; (12714 <_svfiprintf_r+0x1fc>)
   1265e:	1c66      	adds	r6, r4, #1
   12660:	7629      	strb	r1, [r5, #24]
   12662:	f000 fc15 	bl	12e90 <memchr>
   12666:	2800      	cmp	r0, #0
   12668:	d046      	beq.n	126f8 <_svfiprintf_r+0x1e0>
   1266a:	4b2b      	ldr	r3, [pc, #172]	; (12718 <_svfiprintf_r+0x200>)
   1266c:	2b00      	cmp	r3, #0
   1266e:	d12f      	bne.n	126d0 <_svfiprintf_r+0x1b8>
   12670:	6829      	ldr	r1, [r5, #0]
   12672:	9b05      	ldr	r3, [sp, #20]
   12674:	2207      	movs	r2, #7
   12676:	05c9      	lsls	r1, r1, #23
   12678:	d528      	bpl.n	126cc <_svfiprintf_r+0x1b4>
   1267a:	189b      	adds	r3, r3, r2
   1267c:	4393      	bics	r3, r2
   1267e:	3308      	adds	r3, #8
   12680:	9305      	str	r3, [sp, #20]
   12682:	696b      	ldr	r3, [r5, #20]
   12684:	9a03      	ldr	r2, [sp, #12]
   12686:	189b      	adds	r3, r3, r2
   12688:	616b      	str	r3, [r5, #20]
   1268a:	e767      	b.n	1255c <_svfiprintf_r+0x44>
   1268c:	425b      	negs	r3, r3
   1268e:	60eb      	str	r3, [r5, #12]
   12690:	2302      	movs	r3, #2
   12692:	430b      	orrs	r3, r1
   12694:	602b      	str	r3, [r5, #0]
   12696:	e7c0      	b.n	1261a <_svfiprintf_r+0x102>
   12698:	434b      	muls	r3, r1
   1269a:	3401      	adds	r4, #1
   1269c:	189b      	adds	r3, r3, r2
   1269e:	2001      	movs	r0, #1
   126a0:	e7a0      	b.n	125e4 <_svfiprintf_r+0xcc>
   126a2:	2301      	movs	r3, #1
   126a4:	425b      	negs	r3, r3
   126a6:	e7c7      	b.n	12638 <_svfiprintf_r+0x120>
   126a8:	2300      	movs	r3, #0
   126aa:	0014      	movs	r4, r2
   126ac:	200a      	movs	r0, #10
   126ae:	001a      	movs	r2, r3
   126b0:	606b      	str	r3, [r5, #4]
   126b2:	7821      	ldrb	r1, [r4, #0]
   126b4:	3930      	subs	r1, #48	; 0x30
   126b6:	2909      	cmp	r1, #9
   126b8:	d903      	bls.n	126c2 <_svfiprintf_r+0x1aa>
   126ba:	2b00      	cmp	r3, #0
   126bc:	d0bd      	beq.n	1263a <_svfiprintf_r+0x122>
   126be:	9207      	str	r2, [sp, #28]
   126c0:	e7bb      	b.n	1263a <_svfiprintf_r+0x122>
   126c2:	4342      	muls	r2, r0
   126c4:	3401      	adds	r4, #1
   126c6:	1852      	adds	r2, r2, r1
   126c8:	2301      	movs	r3, #1
   126ca:	e7f2      	b.n	126b2 <_svfiprintf_r+0x19a>
   126cc:	3307      	adds	r3, #7
   126ce:	e7d5      	b.n	1267c <_svfiprintf_r+0x164>
   126d0:	ab05      	add	r3, sp, #20
   126d2:	9300      	str	r3, [sp, #0]
   126d4:	003a      	movs	r2, r7
   126d6:	4b11      	ldr	r3, [pc, #68]	; (1271c <_svfiprintf_r+0x204>)
   126d8:	0029      	movs	r1, r5
   126da:	9802      	ldr	r0, [sp, #8]
   126dc:	e000      	b.n	126e0 <_svfiprintf_r+0x1c8>
   126de:	bf00      	nop
   126e0:	9003      	str	r0, [sp, #12]
   126e2:	9b03      	ldr	r3, [sp, #12]
   126e4:	3301      	adds	r3, #1
   126e6:	d1cc      	bne.n	12682 <_svfiprintf_r+0x16a>
   126e8:	89bb      	ldrh	r3, [r7, #12]
   126ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
   126ec:	065b      	lsls	r3, r3, #25
   126ee:	d400      	bmi.n	126f2 <_svfiprintf_r+0x1da>
   126f0:	e729      	b.n	12546 <_svfiprintf_r+0x2e>
   126f2:	2001      	movs	r0, #1
   126f4:	4240      	negs	r0, r0
   126f6:	e726      	b.n	12546 <_svfiprintf_r+0x2e>
   126f8:	ab05      	add	r3, sp, #20
   126fa:	9300      	str	r3, [sp, #0]
   126fc:	003a      	movs	r2, r7
   126fe:	4b07      	ldr	r3, [pc, #28]	; (1271c <_svfiprintf_r+0x204>)
   12700:	0029      	movs	r1, r5
   12702:	9802      	ldr	r0, [sp, #8]
   12704:	f000 f9be 	bl	12a84 <_printf_i>
   12708:	e7ea      	b.n	126e0 <_svfiprintf_r+0x1c8>
   1270a:	46c0      	nop			; (mov r8, r8)
   1270c:	00014986 	.word	0x00014986
   12710:	0001498c 	.word	0x0001498c
   12714:	00014990 	.word	0x00014990
   12718:	00000000 	.word	0x00000000
   1271c:	00012455 	.word	0x00012455

00012720 <__sfputc_r>:
   12720:	6893      	ldr	r3, [r2, #8]
   12722:	b510      	push	{r4, lr}
   12724:	3b01      	subs	r3, #1
   12726:	6093      	str	r3, [r2, #8]
   12728:	2b00      	cmp	r3, #0
   1272a:	da05      	bge.n	12738 <__sfputc_r+0x18>
   1272c:	6994      	ldr	r4, [r2, #24]
   1272e:	42a3      	cmp	r3, r4
   12730:	db08      	blt.n	12744 <__sfputc_r+0x24>
   12732:	b2cb      	uxtb	r3, r1
   12734:	2b0a      	cmp	r3, #10
   12736:	d005      	beq.n	12744 <__sfputc_r+0x24>
   12738:	6813      	ldr	r3, [r2, #0]
   1273a:	1c58      	adds	r0, r3, #1
   1273c:	6010      	str	r0, [r2, #0]
   1273e:	7019      	strb	r1, [r3, #0]
   12740:	b2c8      	uxtb	r0, r1
   12742:	bd10      	pop	{r4, pc}
   12744:	f7ff fbb0 	bl	11ea8 <__swbuf_r>
   12748:	e7fb      	b.n	12742 <__sfputc_r+0x22>

0001274a <__sfputs_r>:
   1274a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1274c:	0006      	movs	r6, r0
   1274e:	000f      	movs	r7, r1
   12750:	0014      	movs	r4, r2
   12752:	18d5      	adds	r5, r2, r3
   12754:	42ac      	cmp	r4, r5
   12756:	d101      	bne.n	1275c <__sfputs_r+0x12>
   12758:	2000      	movs	r0, #0
   1275a:	e007      	b.n	1276c <__sfputs_r+0x22>
   1275c:	7821      	ldrb	r1, [r4, #0]
   1275e:	003a      	movs	r2, r7
   12760:	0030      	movs	r0, r6
   12762:	f7ff ffdd 	bl	12720 <__sfputc_r>
   12766:	3401      	adds	r4, #1
   12768:	1c43      	adds	r3, r0, #1
   1276a:	d1f3      	bne.n	12754 <__sfputs_r+0xa>
   1276c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00012770 <_vfiprintf_r>:
   12770:	b5f0      	push	{r4, r5, r6, r7, lr}
   12772:	b09f      	sub	sp, #124	; 0x7c
   12774:	0006      	movs	r6, r0
   12776:	000f      	movs	r7, r1
   12778:	0014      	movs	r4, r2
   1277a:	9305      	str	r3, [sp, #20]
   1277c:	2800      	cmp	r0, #0
   1277e:	d004      	beq.n	1278a <_vfiprintf_r+0x1a>
   12780:	6983      	ldr	r3, [r0, #24]
   12782:	2b00      	cmp	r3, #0
   12784:	d101      	bne.n	1278a <_vfiprintf_r+0x1a>
   12786:	f7ff fd53 	bl	12230 <__sinit>
   1278a:	4b7f      	ldr	r3, [pc, #508]	; (12988 <_vfiprintf_r+0x218>)
   1278c:	429f      	cmp	r7, r3
   1278e:	d15c      	bne.n	1284a <_vfiprintf_r+0xda>
   12790:	6877      	ldr	r7, [r6, #4]
   12792:	89bb      	ldrh	r3, [r7, #12]
   12794:	071b      	lsls	r3, r3, #28
   12796:	d562      	bpl.n	1285e <_vfiprintf_r+0xee>
   12798:	693b      	ldr	r3, [r7, #16]
   1279a:	2b00      	cmp	r3, #0
   1279c:	d05f      	beq.n	1285e <_vfiprintf_r+0xee>
   1279e:	2300      	movs	r3, #0
   127a0:	ad06      	add	r5, sp, #24
   127a2:	616b      	str	r3, [r5, #20]
   127a4:	3320      	adds	r3, #32
   127a6:	766b      	strb	r3, [r5, #25]
   127a8:	3310      	adds	r3, #16
   127aa:	76ab      	strb	r3, [r5, #26]
   127ac:	9402      	str	r4, [sp, #8]
   127ae:	9c02      	ldr	r4, [sp, #8]
   127b0:	7823      	ldrb	r3, [r4, #0]
   127b2:	2b00      	cmp	r3, #0
   127b4:	d15d      	bne.n	12872 <_vfiprintf_r+0x102>
   127b6:	9b02      	ldr	r3, [sp, #8]
   127b8:	1ae3      	subs	r3, r4, r3
   127ba:	9304      	str	r3, [sp, #16]
   127bc:	d00d      	beq.n	127da <_vfiprintf_r+0x6a>
   127be:	9b04      	ldr	r3, [sp, #16]
   127c0:	9a02      	ldr	r2, [sp, #8]
   127c2:	0039      	movs	r1, r7
   127c4:	0030      	movs	r0, r6
   127c6:	f7ff ffc0 	bl	1274a <__sfputs_r>
   127ca:	1c43      	adds	r3, r0, #1
   127cc:	d100      	bne.n	127d0 <_vfiprintf_r+0x60>
   127ce:	e0cc      	b.n	1296a <_vfiprintf_r+0x1fa>
   127d0:	696a      	ldr	r2, [r5, #20]
   127d2:	9b04      	ldr	r3, [sp, #16]
   127d4:	4694      	mov	ip, r2
   127d6:	4463      	add	r3, ip
   127d8:	616b      	str	r3, [r5, #20]
   127da:	7823      	ldrb	r3, [r4, #0]
   127dc:	2b00      	cmp	r3, #0
   127de:	d100      	bne.n	127e2 <_vfiprintf_r+0x72>
   127e0:	e0c3      	b.n	1296a <_vfiprintf_r+0x1fa>
   127e2:	2201      	movs	r2, #1
   127e4:	2300      	movs	r3, #0
   127e6:	4252      	negs	r2, r2
   127e8:	606a      	str	r2, [r5, #4]
   127ea:	a902      	add	r1, sp, #8
   127ec:	3254      	adds	r2, #84	; 0x54
   127ee:	1852      	adds	r2, r2, r1
   127f0:	3401      	adds	r4, #1
   127f2:	602b      	str	r3, [r5, #0]
   127f4:	60eb      	str	r3, [r5, #12]
   127f6:	60ab      	str	r3, [r5, #8]
   127f8:	7013      	strb	r3, [r2, #0]
   127fa:	65ab      	str	r3, [r5, #88]	; 0x58
   127fc:	7821      	ldrb	r1, [r4, #0]
   127fe:	2205      	movs	r2, #5
   12800:	4862      	ldr	r0, [pc, #392]	; (1298c <_vfiprintf_r+0x21c>)
   12802:	f000 fb45 	bl	12e90 <memchr>
   12806:	1c63      	adds	r3, r4, #1
   12808:	469c      	mov	ip, r3
   1280a:	2800      	cmp	r0, #0
   1280c:	d135      	bne.n	1287a <_vfiprintf_r+0x10a>
   1280e:	6829      	ldr	r1, [r5, #0]
   12810:	06cb      	lsls	r3, r1, #27
   12812:	d504      	bpl.n	1281e <_vfiprintf_r+0xae>
   12814:	2353      	movs	r3, #83	; 0x53
   12816:	aa02      	add	r2, sp, #8
   12818:	3020      	adds	r0, #32
   1281a:	189b      	adds	r3, r3, r2
   1281c:	7018      	strb	r0, [r3, #0]
   1281e:	070b      	lsls	r3, r1, #28
   12820:	d504      	bpl.n	1282c <_vfiprintf_r+0xbc>
   12822:	2353      	movs	r3, #83	; 0x53
   12824:	202b      	movs	r0, #43	; 0x2b
   12826:	aa02      	add	r2, sp, #8
   12828:	189b      	adds	r3, r3, r2
   1282a:	7018      	strb	r0, [r3, #0]
   1282c:	7823      	ldrb	r3, [r4, #0]
   1282e:	2b2a      	cmp	r3, #42	; 0x2a
   12830:	d02c      	beq.n	1288c <_vfiprintf_r+0x11c>
   12832:	2000      	movs	r0, #0
   12834:	210a      	movs	r1, #10
   12836:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12838:	7822      	ldrb	r2, [r4, #0]
   1283a:	3a30      	subs	r2, #48	; 0x30
   1283c:	2a09      	cmp	r2, #9
   1283e:	d800      	bhi.n	12842 <_vfiprintf_r+0xd2>
   12840:	e06b      	b.n	1291a <_vfiprintf_r+0x1aa>
   12842:	2800      	cmp	r0, #0
   12844:	d02a      	beq.n	1289c <_vfiprintf_r+0x12c>
   12846:	9309      	str	r3, [sp, #36]	; 0x24
   12848:	e028      	b.n	1289c <_vfiprintf_r+0x12c>
   1284a:	4b51      	ldr	r3, [pc, #324]	; (12990 <_vfiprintf_r+0x220>)
   1284c:	429f      	cmp	r7, r3
   1284e:	d101      	bne.n	12854 <_vfiprintf_r+0xe4>
   12850:	68b7      	ldr	r7, [r6, #8]
   12852:	e79e      	b.n	12792 <_vfiprintf_r+0x22>
   12854:	4b4f      	ldr	r3, [pc, #316]	; (12994 <_vfiprintf_r+0x224>)
   12856:	429f      	cmp	r7, r3
   12858:	d19b      	bne.n	12792 <_vfiprintf_r+0x22>
   1285a:	68f7      	ldr	r7, [r6, #12]
   1285c:	e799      	b.n	12792 <_vfiprintf_r+0x22>
   1285e:	0039      	movs	r1, r7
   12860:	0030      	movs	r0, r6
   12862:	f7ff fb77 	bl	11f54 <__swsetup_r>
   12866:	2800      	cmp	r0, #0
   12868:	d099      	beq.n	1279e <_vfiprintf_r+0x2e>
   1286a:	2001      	movs	r0, #1
   1286c:	4240      	negs	r0, r0
   1286e:	b01f      	add	sp, #124	; 0x7c
   12870:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12872:	2b25      	cmp	r3, #37	; 0x25
   12874:	d09f      	beq.n	127b6 <_vfiprintf_r+0x46>
   12876:	3401      	adds	r4, #1
   12878:	e79a      	b.n	127b0 <_vfiprintf_r+0x40>
   1287a:	4b44      	ldr	r3, [pc, #272]	; (1298c <_vfiprintf_r+0x21c>)
   1287c:	6829      	ldr	r1, [r5, #0]
   1287e:	1ac0      	subs	r0, r0, r3
   12880:	2301      	movs	r3, #1
   12882:	4083      	lsls	r3, r0
   12884:	430b      	orrs	r3, r1
   12886:	602b      	str	r3, [r5, #0]
   12888:	4664      	mov	r4, ip
   1288a:	e7b7      	b.n	127fc <_vfiprintf_r+0x8c>
   1288c:	9b05      	ldr	r3, [sp, #20]
   1288e:	1d18      	adds	r0, r3, #4
   12890:	681b      	ldr	r3, [r3, #0]
   12892:	9005      	str	r0, [sp, #20]
   12894:	2b00      	cmp	r3, #0
   12896:	db3a      	blt.n	1290e <_vfiprintf_r+0x19e>
   12898:	9309      	str	r3, [sp, #36]	; 0x24
   1289a:	4664      	mov	r4, ip
   1289c:	7823      	ldrb	r3, [r4, #0]
   1289e:	2b2e      	cmp	r3, #46	; 0x2e
   128a0:	d10b      	bne.n	128ba <_vfiprintf_r+0x14a>
   128a2:	7863      	ldrb	r3, [r4, #1]
   128a4:	1c62      	adds	r2, r4, #1
   128a6:	2b2a      	cmp	r3, #42	; 0x2a
   128a8:	d13f      	bne.n	1292a <_vfiprintf_r+0x1ba>
   128aa:	9b05      	ldr	r3, [sp, #20]
   128ac:	3402      	adds	r4, #2
   128ae:	1d1a      	adds	r2, r3, #4
   128b0:	681b      	ldr	r3, [r3, #0]
   128b2:	9205      	str	r2, [sp, #20]
   128b4:	2b00      	cmp	r3, #0
   128b6:	db35      	blt.n	12924 <_vfiprintf_r+0x1b4>
   128b8:	9307      	str	r3, [sp, #28]
   128ba:	7821      	ldrb	r1, [r4, #0]
   128bc:	2203      	movs	r2, #3
   128be:	4836      	ldr	r0, [pc, #216]	; (12998 <_vfiprintf_r+0x228>)
   128c0:	f000 fae6 	bl	12e90 <memchr>
   128c4:	2800      	cmp	r0, #0
   128c6:	d007      	beq.n	128d8 <_vfiprintf_r+0x168>
   128c8:	4b33      	ldr	r3, [pc, #204]	; (12998 <_vfiprintf_r+0x228>)
   128ca:	682a      	ldr	r2, [r5, #0]
   128cc:	1ac0      	subs	r0, r0, r3
   128ce:	2340      	movs	r3, #64	; 0x40
   128d0:	4083      	lsls	r3, r0
   128d2:	4313      	orrs	r3, r2
   128d4:	602b      	str	r3, [r5, #0]
   128d6:	3401      	adds	r4, #1
   128d8:	7821      	ldrb	r1, [r4, #0]
   128da:	1c63      	adds	r3, r4, #1
   128dc:	2206      	movs	r2, #6
   128de:	482f      	ldr	r0, [pc, #188]	; (1299c <_vfiprintf_r+0x22c>)
   128e0:	9302      	str	r3, [sp, #8]
   128e2:	7629      	strb	r1, [r5, #24]
   128e4:	f000 fad4 	bl	12e90 <memchr>
   128e8:	2800      	cmp	r0, #0
   128ea:	d044      	beq.n	12976 <_vfiprintf_r+0x206>
   128ec:	4b2c      	ldr	r3, [pc, #176]	; (129a0 <_vfiprintf_r+0x230>)
   128ee:	2b00      	cmp	r3, #0
   128f0:	d12f      	bne.n	12952 <_vfiprintf_r+0x1e2>
   128f2:	6829      	ldr	r1, [r5, #0]
   128f4:	9b05      	ldr	r3, [sp, #20]
   128f6:	2207      	movs	r2, #7
   128f8:	05c9      	lsls	r1, r1, #23
   128fa:	d528      	bpl.n	1294e <_vfiprintf_r+0x1de>
   128fc:	189b      	adds	r3, r3, r2
   128fe:	4393      	bics	r3, r2
   12900:	3308      	adds	r3, #8
   12902:	9305      	str	r3, [sp, #20]
   12904:	696b      	ldr	r3, [r5, #20]
   12906:	9a03      	ldr	r2, [sp, #12]
   12908:	189b      	adds	r3, r3, r2
   1290a:	616b      	str	r3, [r5, #20]
   1290c:	e74f      	b.n	127ae <_vfiprintf_r+0x3e>
   1290e:	425b      	negs	r3, r3
   12910:	60eb      	str	r3, [r5, #12]
   12912:	2302      	movs	r3, #2
   12914:	430b      	orrs	r3, r1
   12916:	602b      	str	r3, [r5, #0]
   12918:	e7bf      	b.n	1289a <_vfiprintf_r+0x12a>
   1291a:	434b      	muls	r3, r1
   1291c:	3401      	adds	r4, #1
   1291e:	189b      	adds	r3, r3, r2
   12920:	2001      	movs	r0, #1
   12922:	e789      	b.n	12838 <_vfiprintf_r+0xc8>
   12924:	2301      	movs	r3, #1
   12926:	425b      	negs	r3, r3
   12928:	e7c6      	b.n	128b8 <_vfiprintf_r+0x148>
   1292a:	2300      	movs	r3, #0
   1292c:	0014      	movs	r4, r2
   1292e:	200a      	movs	r0, #10
   12930:	001a      	movs	r2, r3
   12932:	606b      	str	r3, [r5, #4]
   12934:	7821      	ldrb	r1, [r4, #0]
   12936:	3930      	subs	r1, #48	; 0x30
   12938:	2909      	cmp	r1, #9
   1293a:	d903      	bls.n	12944 <_vfiprintf_r+0x1d4>
   1293c:	2b00      	cmp	r3, #0
   1293e:	d0bc      	beq.n	128ba <_vfiprintf_r+0x14a>
   12940:	9207      	str	r2, [sp, #28]
   12942:	e7ba      	b.n	128ba <_vfiprintf_r+0x14a>
   12944:	4342      	muls	r2, r0
   12946:	3401      	adds	r4, #1
   12948:	1852      	adds	r2, r2, r1
   1294a:	2301      	movs	r3, #1
   1294c:	e7f2      	b.n	12934 <_vfiprintf_r+0x1c4>
   1294e:	3307      	adds	r3, #7
   12950:	e7d5      	b.n	128fe <_vfiprintf_r+0x18e>
   12952:	ab05      	add	r3, sp, #20
   12954:	9300      	str	r3, [sp, #0]
   12956:	003a      	movs	r2, r7
   12958:	4b12      	ldr	r3, [pc, #72]	; (129a4 <_vfiprintf_r+0x234>)
   1295a:	0029      	movs	r1, r5
   1295c:	0030      	movs	r0, r6
   1295e:	e000      	b.n	12962 <_vfiprintf_r+0x1f2>
   12960:	bf00      	nop
   12962:	9003      	str	r0, [sp, #12]
   12964:	9b03      	ldr	r3, [sp, #12]
   12966:	3301      	adds	r3, #1
   12968:	d1cc      	bne.n	12904 <_vfiprintf_r+0x194>
   1296a:	89bb      	ldrh	r3, [r7, #12]
   1296c:	065b      	lsls	r3, r3, #25
   1296e:	d500      	bpl.n	12972 <_vfiprintf_r+0x202>
   12970:	e77b      	b.n	1286a <_vfiprintf_r+0xfa>
   12972:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12974:	e77b      	b.n	1286e <_vfiprintf_r+0xfe>
   12976:	ab05      	add	r3, sp, #20
   12978:	9300      	str	r3, [sp, #0]
   1297a:	003a      	movs	r2, r7
   1297c:	4b09      	ldr	r3, [pc, #36]	; (129a4 <_vfiprintf_r+0x234>)
   1297e:	0029      	movs	r1, r5
   12980:	0030      	movs	r0, r6
   12982:	f000 f87f 	bl	12a84 <_printf_i>
   12986:	e7ec      	b.n	12962 <_vfiprintf_r+0x1f2>
   12988:	0001493c 	.word	0x0001493c
   1298c:	00014986 	.word	0x00014986
   12990:	0001495c 	.word	0x0001495c
   12994:	0001491c 	.word	0x0001491c
   12998:	0001498c 	.word	0x0001498c
   1299c:	00014990 	.word	0x00014990
   129a0:	00000000 	.word	0x00000000
   129a4:	0001274b 	.word	0x0001274b

000129a8 <_printf_common>:
   129a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   129aa:	0015      	movs	r5, r2
   129ac:	9301      	str	r3, [sp, #4]
   129ae:	688a      	ldr	r2, [r1, #8]
   129b0:	690b      	ldr	r3, [r1, #16]
   129b2:	9000      	str	r0, [sp, #0]
   129b4:	000c      	movs	r4, r1
   129b6:	4293      	cmp	r3, r2
   129b8:	da00      	bge.n	129bc <_printf_common+0x14>
   129ba:	0013      	movs	r3, r2
   129bc:	0022      	movs	r2, r4
   129be:	602b      	str	r3, [r5, #0]
   129c0:	3243      	adds	r2, #67	; 0x43
   129c2:	7812      	ldrb	r2, [r2, #0]
   129c4:	2a00      	cmp	r2, #0
   129c6:	d001      	beq.n	129cc <_printf_common+0x24>
   129c8:	3301      	adds	r3, #1
   129ca:	602b      	str	r3, [r5, #0]
   129cc:	6823      	ldr	r3, [r4, #0]
   129ce:	069b      	lsls	r3, r3, #26
   129d0:	d502      	bpl.n	129d8 <_printf_common+0x30>
   129d2:	682b      	ldr	r3, [r5, #0]
   129d4:	3302      	adds	r3, #2
   129d6:	602b      	str	r3, [r5, #0]
   129d8:	2706      	movs	r7, #6
   129da:	6823      	ldr	r3, [r4, #0]
   129dc:	401f      	ands	r7, r3
   129de:	d027      	beq.n	12a30 <_printf_common+0x88>
   129e0:	0023      	movs	r3, r4
   129e2:	3343      	adds	r3, #67	; 0x43
   129e4:	781b      	ldrb	r3, [r3, #0]
   129e6:	1e5a      	subs	r2, r3, #1
   129e8:	4193      	sbcs	r3, r2
   129ea:	6822      	ldr	r2, [r4, #0]
   129ec:	0692      	lsls	r2, r2, #26
   129ee:	d430      	bmi.n	12a52 <_printf_common+0xaa>
   129f0:	0022      	movs	r2, r4
   129f2:	9901      	ldr	r1, [sp, #4]
   129f4:	3243      	adds	r2, #67	; 0x43
   129f6:	9800      	ldr	r0, [sp, #0]
   129f8:	9e08      	ldr	r6, [sp, #32]
   129fa:	47b0      	blx	r6
   129fc:	1c43      	adds	r3, r0, #1
   129fe:	d025      	beq.n	12a4c <_printf_common+0xa4>
   12a00:	2306      	movs	r3, #6
   12a02:	6820      	ldr	r0, [r4, #0]
   12a04:	682a      	ldr	r2, [r5, #0]
   12a06:	68e1      	ldr	r1, [r4, #12]
   12a08:	4003      	ands	r3, r0
   12a0a:	2500      	movs	r5, #0
   12a0c:	2b04      	cmp	r3, #4
   12a0e:	d103      	bne.n	12a18 <_printf_common+0x70>
   12a10:	1a8d      	subs	r5, r1, r2
   12a12:	43eb      	mvns	r3, r5
   12a14:	17db      	asrs	r3, r3, #31
   12a16:	401d      	ands	r5, r3
   12a18:	68a3      	ldr	r3, [r4, #8]
   12a1a:	6922      	ldr	r2, [r4, #16]
   12a1c:	4293      	cmp	r3, r2
   12a1e:	dd01      	ble.n	12a24 <_printf_common+0x7c>
   12a20:	1a9b      	subs	r3, r3, r2
   12a22:	18ed      	adds	r5, r5, r3
   12a24:	2700      	movs	r7, #0
   12a26:	42bd      	cmp	r5, r7
   12a28:	d120      	bne.n	12a6c <_printf_common+0xc4>
   12a2a:	2000      	movs	r0, #0
   12a2c:	e010      	b.n	12a50 <_printf_common+0xa8>
   12a2e:	3701      	adds	r7, #1
   12a30:	68e3      	ldr	r3, [r4, #12]
   12a32:	682a      	ldr	r2, [r5, #0]
   12a34:	1a9b      	subs	r3, r3, r2
   12a36:	429f      	cmp	r7, r3
   12a38:	dad2      	bge.n	129e0 <_printf_common+0x38>
   12a3a:	0022      	movs	r2, r4
   12a3c:	2301      	movs	r3, #1
   12a3e:	3219      	adds	r2, #25
   12a40:	9901      	ldr	r1, [sp, #4]
   12a42:	9800      	ldr	r0, [sp, #0]
   12a44:	9e08      	ldr	r6, [sp, #32]
   12a46:	47b0      	blx	r6
   12a48:	1c43      	adds	r3, r0, #1
   12a4a:	d1f0      	bne.n	12a2e <_printf_common+0x86>
   12a4c:	2001      	movs	r0, #1
   12a4e:	4240      	negs	r0, r0
   12a50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12a52:	2030      	movs	r0, #48	; 0x30
   12a54:	18e1      	adds	r1, r4, r3
   12a56:	3143      	adds	r1, #67	; 0x43
   12a58:	7008      	strb	r0, [r1, #0]
   12a5a:	0021      	movs	r1, r4
   12a5c:	1c5a      	adds	r2, r3, #1
   12a5e:	3145      	adds	r1, #69	; 0x45
   12a60:	7809      	ldrb	r1, [r1, #0]
   12a62:	18a2      	adds	r2, r4, r2
   12a64:	3243      	adds	r2, #67	; 0x43
   12a66:	3302      	adds	r3, #2
   12a68:	7011      	strb	r1, [r2, #0]
   12a6a:	e7c1      	b.n	129f0 <_printf_common+0x48>
   12a6c:	0022      	movs	r2, r4
   12a6e:	2301      	movs	r3, #1
   12a70:	321a      	adds	r2, #26
   12a72:	9901      	ldr	r1, [sp, #4]
   12a74:	9800      	ldr	r0, [sp, #0]
   12a76:	9e08      	ldr	r6, [sp, #32]
   12a78:	47b0      	blx	r6
   12a7a:	1c43      	adds	r3, r0, #1
   12a7c:	d0e6      	beq.n	12a4c <_printf_common+0xa4>
   12a7e:	3701      	adds	r7, #1
   12a80:	e7d1      	b.n	12a26 <_printf_common+0x7e>
	...

00012a84 <_printf_i>:
   12a84:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a86:	b08b      	sub	sp, #44	; 0x2c
   12a88:	9206      	str	r2, [sp, #24]
   12a8a:	000a      	movs	r2, r1
   12a8c:	3243      	adds	r2, #67	; 0x43
   12a8e:	9307      	str	r3, [sp, #28]
   12a90:	9005      	str	r0, [sp, #20]
   12a92:	9204      	str	r2, [sp, #16]
   12a94:	7e0a      	ldrb	r2, [r1, #24]
   12a96:	000c      	movs	r4, r1
   12a98:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12a9a:	2a6e      	cmp	r2, #110	; 0x6e
   12a9c:	d100      	bne.n	12aa0 <_printf_i+0x1c>
   12a9e:	e08f      	b.n	12bc0 <_printf_i+0x13c>
   12aa0:	d817      	bhi.n	12ad2 <_printf_i+0x4e>
   12aa2:	2a63      	cmp	r2, #99	; 0x63
   12aa4:	d02c      	beq.n	12b00 <_printf_i+0x7c>
   12aa6:	d808      	bhi.n	12aba <_printf_i+0x36>
   12aa8:	2a00      	cmp	r2, #0
   12aaa:	d100      	bne.n	12aae <_printf_i+0x2a>
   12aac:	e099      	b.n	12be2 <_printf_i+0x15e>
   12aae:	2a58      	cmp	r2, #88	; 0x58
   12ab0:	d054      	beq.n	12b5c <_printf_i+0xd8>
   12ab2:	0026      	movs	r6, r4
   12ab4:	3642      	adds	r6, #66	; 0x42
   12ab6:	7032      	strb	r2, [r6, #0]
   12ab8:	e029      	b.n	12b0e <_printf_i+0x8a>
   12aba:	2a64      	cmp	r2, #100	; 0x64
   12abc:	d001      	beq.n	12ac2 <_printf_i+0x3e>
   12abe:	2a69      	cmp	r2, #105	; 0x69
   12ac0:	d1f7      	bne.n	12ab2 <_printf_i+0x2e>
   12ac2:	6821      	ldr	r1, [r4, #0]
   12ac4:	681a      	ldr	r2, [r3, #0]
   12ac6:	0608      	lsls	r0, r1, #24
   12ac8:	d523      	bpl.n	12b12 <_printf_i+0x8e>
   12aca:	1d11      	adds	r1, r2, #4
   12acc:	6019      	str	r1, [r3, #0]
   12ace:	6815      	ldr	r5, [r2, #0]
   12ad0:	e025      	b.n	12b1e <_printf_i+0x9a>
   12ad2:	2a73      	cmp	r2, #115	; 0x73
   12ad4:	d100      	bne.n	12ad8 <_printf_i+0x54>
   12ad6:	e088      	b.n	12bea <_printf_i+0x166>
   12ad8:	d808      	bhi.n	12aec <_printf_i+0x68>
   12ada:	2a6f      	cmp	r2, #111	; 0x6f
   12adc:	d029      	beq.n	12b32 <_printf_i+0xae>
   12ade:	2a70      	cmp	r2, #112	; 0x70
   12ae0:	d1e7      	bne.n	12ab2 <_printf_i+0x2e>
   12ae2:	2220      	movs	r2, #32
   12ae4:	6809      	ldr	r1, [r1, #0]
   12ae6:	430a      	orrs	r2, r1
   12ae8:	6022      	str	r2, [r4, #0]
   12aea:	e003      	b.n	12af4 <_printf_i+0x70>
   12aec:	2a75      	cmp	r2, #117	; 0x75
   12aee:	d020      	beq.n	12b32 <_printf_i+0xae>
   12af0:	2a78      	cmp	r2, #120	; 0x78
   12af2:	d1de      	bne.n	12ab2 <_printf_i+0x2e>
   12af4:	0022      	movs	r2, r4
   12af6:	2178      	movs	r1, #120	; 0x78
   12af8:	3245      	adds	r2, #69	; 0x45
   12afa:	7011      	strb	r1, [r2, #0]
   12afc:	4a6c      	ldr	r2, [pc, #432]	; (12cb0 <_printf_i+0x22c>)
   12afe:	e030      	b.n	12b62 <_printf_i+0xde>
   12b00:	000e      	movs	r6, r1
   12b02:	681a      	ldr	r2, [r3, #0]
   12b04:	3642      	adds	r6, #66	; 0x42
   12b06:	1d11      	adds	r1, r2, #4
   12b08:	6019      	str	r1, [r3, #0]
   12b0a:	6813      	ldr	r3, [r2, #0]
   12b0c:	7033      	strb	r3, [r6, #0]
   12b0e:	2301      	movs	r3, #1
   12b10:	e079      	b.n	12c06 <_printf_i+0x182>
   12b12:	0649      	lsls	r1, r1, #25
   12b14:	d5d9      	bpl.n	12aca <_printf_i+0x46>
   12b16:	1d11      	adds	r1, r2, #4
   12b18:	6019      	str	r1, [r3, #0]
   12b1a:	2300      	movs	r3, #0
   12b1c:	5ed5      	ldrsh	r5, [r2, r3]
   12b1e:	2d00      	cmp	r5, #0
   12b20:	da03      	bge.n	12b2a <_printf_i+0xa6>
   12b22:	232d      	movs	r3, #45	; 0x2d
   12b24:	9a04      	ldr	r2, [sp, #16]
   12b26:	426d      	negs	r5, r5
   12b28:	7013      	strb	r3, [r2, #0]
   12b2a:	4b62      	ldr	r3, [pc, #392]	; (12cb4 <_printf_i+0x230>)
   12b2c:	270a      	movs	r7, #10
   12b2e:	9303      	str	r3, [sp, #12]
   12b30:	e02f      	b.n	12b92 <_printf_i+0x10e>
   12b32:	6820      	ldr	r0, [r4, #0]
   12b34:	6819      	ldr	r1, [r3, #0]
   12b36:	0605      	lsls	r5, r0, #24
   12b38:	d503      	bpl.n	12b42 <_printf_i+0xbe>
   12b3a:	1d08      	adds	r0, r1, #4
   12b3c:	6018      	str	r0, [r3, #0]
   12b3e:	680d      	ldr	r5, [r1, #0]
   12b40:	e005      	b.n	12b4e <_printf_i+0xca>
   12b42:	0640      	lsls	r0, r0, #25
   12b44:	d5f9      	bpl.n	12b3a <_printf_i+0xb6>
   12b46:	680d      	ldr	r5, [r1, #0]
   12b48:	1d08      	adds	r0, r1, #4
   12b4a:	6018      	str	r0, [r3, #0]
   12b4c:	b2ad      	uxth	r5, r5
   12b4e:	4b59      	ldr	r3, [pc, #356]	; (12cb4 <_printf_i+0x230>)
   12b50:	2708      	movs	r7, #8
   12b52:	9303      	str	r3, [sp, #12]
   12b54:	2a6f      	cmp	r2, #111	; 0x6f
   12b56:	d018      	beq.n	12b8a <_printf_i+0x106>
   12b58:	270a      	movs	r7, #10
   12b5a:	e016      	b.n	12b8a <_printf_i+0x106>
   12b5c:	3145      	adds	r1, #69	; 0x45
   12b5e:	700a      	strb	r2, [r1, #0]
   12b60:	4a54      	ldr	r2, [pc, #336]	; (12cb4 <_printf_i+0x230>)
   12b62:	9203      	str	r2, [sp, #12]
   12b64:	681a      	ldr	r2, [r3, #0]
   12b66:	6821      	ldr	r1, [r4, #0]
   12b68:	1d10      	adds	r0, r2, #4
   12b6a:	6018      	str	r0, [r3, #0]
   12b6c:	6815      	ldr	r5, [r2, #0]
   12b6e:	0608      	lsls	r0, r1, #24
   12b70:	d522      	bpl.n	12bb8 <_printf_i+0x134>
   12b72:	07cb      	lsls	r3, r1, #31
   12b74:	d502      	bpl.n	12b7c <_printf_i+0xf8>
   12b76:	2320      	movs	r3, #32
   12b78:	4319      	orrs	r1, r3
   12b7a:	6021      	str	r1, [r4, #0]
   12b7c:	2710      	movs	r7, #16
   12b7e:	2d00      	cmp	r5, #0
   12b80:	d103      	bne.n	12b8a <_printf_i+0x106>
   12b82:	2320      	movs	r3, #32
   12b84:	6822      	ldr	r2, [r4, #0]
   12b86:	439a      	bics	r2, r3
   12b88:	6022      	str	r2, [r4, #0]
   12b8a:	0023      	movs	r3, r4
   12b8c:	2200      	movs	r2, #0
   12b8e:	3343      	adds	r3, #67	; 0x43
   12b90:	701a      	strb	r2, [r3, #0]
   12b92:	6863      	ldr	r3, [r4, #4]
   12b94:	60a3      	str	r3, [r4, #8]
   12b96:	2b00      	cmp	r3, #0
   12b98:	db5c      	blt.n	12c54 <_printf_i+0x1d0>
   12b9a:	2204      	movs	r2, #4
   12b9c:	6821      	ldr	r1, [r4, #0]
   12b9e:	4391      	bics	r1, r2
   12ba0:	6021      	str	r1, [r4, #0]
   12ba2:	2d00      	cmp	r5, #0
   12ba4:	d158      	bne.n	12c58 <_printf_i+0x1d4>
   12ba6:	9e04      	ldr	r6, [sp, #16]
   12ba8:	2b00      	cmp	r3, #0
   12baa:	d064      	beq.n	12c76 <_printf_i+0x1f2>
   12bac:	0026      	movs	r6, r4
   12bae:	9b03      	ldr	r3, [sp, #12]
   12bb0:	3642      	adds	r6, #66	; 0x42
   12bb2:	781b      	ldrb	r3, [r3, #0]
   12bb4:	7033      	strb	r3, [r6, #0]
   12bb6:	e05e      	b.n	12c76 <_printf_i+0x1f2>
   12bb8:	0648      	lsls	r0, r1, #25
   12bba:	d5da      	bpl.n	12b72 <_printf_i+0xee>
   12bbc:	b2ad      	uxth	r5, r5
   12bbe:	e7d8      	b.n	12b72 <_printf_i+0xee>
   12bc0:	6809      	ldr	r1, [r1, #0]
   12bc2:	681a      	ldr	r2, [r3, #0]
   12bc4:	0608      	lsls	r0, r1, #24
   12bc6:	d505      	bpl.n	12bd4 <_printf_i+0x150>
   12bc8:	1d11      	adds	r1, r2, #4
   12bca:	6019      	str	r1, [r3, #0]
   12bcc:	6813      	ldr	r3, [r2, #0]
   12bce:	6962      	ldr	r2, [r4, #20]
   12bd0:	601a      	str	r2, [r3, #0]
   12bd2:	e006      	b.n	12be2 <_printf_i+0x15e>
   12bd4:	0649      	lsls	r1, r1, #25
   12bd6:	d5f7      	bpl.n	12bc8 <_printf_i+0x144>
   12bd8:	1d11      	adds	r1, r2, #4
   12bda:	6019      	str	r1, [r3, #0]
   12bdc:	6813      	ldr	r3, [r2, #0]
   12bde:	8aa2      	ldrh	r2, [r4, #20]
   12be0:	801a      	strh	r2, [r3, #0]
   12be2:	2300      	movs	r3, #0
   12be4:	9e04      	ldr	r6, [sp, #16]
   12be6:	6123      	str	r3, [r4, #16]
   12be8:	e054      	b.n	12c94 <_printf_i+0x210>
   12bea:	681a      	ldr	r2, [r3, #0]
   12bec:	1d11      	adds	r1, r2, #4
   12bee:	6019      	str	r1, [r3, #0]
   12bf0:	6816      	ldr	r6, [r2, #0]
   12bf2:	2100      	movs	r1, #0
   12bf4:	6862      	ldr	r2, [r4, #4]
   12bf6:	0030      	movs	r0, r6
   12bf8:	f000 f94a 	bl	12e90 <memchr>
   12bfc:	2800      	cmp	r0, #0
   12bfe:	d001      	beq.n	12c04 <_printf_i+0x180>
   12c00:	1b80      	subs	r0, r0, r6
   12c02:	6060      	str	r0, [r4, #4]
   12c04:	6863      	ldr	r3, [r4, #4]
   12c06:	6123      	str	r3, [r4, #16]
   12c08:	2300      	movs	r3, #0
   12c0a:	9a04      	ldr	r2, [sp, #16]
   12c0c:	7013      	strb	r3, [r2, #0]
   12c0e:	e041      	b.n	12c94 <_printf_i+0x210>
   12c10:	6923      	ldr	r3, [r4, #16]
   12c12:	0032      	movs	r2, r6
   12c14:	9906      	ldr	r1, [sp, #24]
   12c16:	9805      	ldr	r0, [sp, #20]
   12c18:	9d07      	ldr	r5, [sp, #28]
   12c1a:	47a8      	blx	r5
   12c1c:	1c43      	adds	r3, r0, #1
   12c1e:	d043      	beq.n	12ca8 <_printf_i+0x224>
   12c20:	6823      	ldr	r3, [r4, #0]
   12c22:	2500      	movs	r5, #0
   12c24:	079b      	lsls	r3, r3, #30
   12c26:	d40f      	bmi.n	12c48 <_printf_i+0x1c4>
   12c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12c2a:	68e0      	ldr	r0, [r4, #12]
   12c2c:	4298      	cmp	r0, r3
   12c2e:	da3d      	bge.n	12cac <_printf_i+0x228>
   12c30:	0018      	movs	r0, r3
   12c32:	e03b      	b.n	12cac <_printf_i+0x228>
   12c34:	0022      	movs	r2, r4
   12c36:	2301      	movs	r3, #1
   12c38:	3219      	adds	r2, #25
   12c3a:	9906      	ldr	r1, [sp, #24]
   12c3c:	9805      	ldr	r0, [sp, #20]
   12c3e:	9e07      	ldr	r6, [sp, #28]
   12c40:	47b0      	blx	r6
   12c42:	1c43      	adds	r3, r0, #1
   12c44:	d030      	beq.n	12ca8 <_printf_i+0x224>
   12c46:	3501      	adds	r5, #1
   12c48:	68e3      	ldr	r3, [r4, #12]
   12c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12c4c:	1a9b      	subs	r3, r3, r2
   12c4e:	429d      	cmp	r5, r3
   12c50:	dbf0      	blt.n	12c34 <_printf_i+0x1b0>
   12c52:	e7e9      	b.n	12c28 <_printf_i+0x1a4>
   12c54:	2d00      	cmp	r5, #0
   12c56:	d0a9      	beq.n	12bac <_printf_i+0x128>
   12c58:	9e04      	ldr	r6, [sp, #16]
   12c5a:	0028      	movs	r0, r5
   12c5c:	0039      	movs	r1, r7
   12c5e:	f7fe fc83 	bl	11568 <__aeabi_uidivmod>
   12c62:	9b03      	ldr	r3, [sp, #12]
   12c64:	3e01      	subs	r6, #1
   12c66:	5c5b      	ldrb	r3, [r3, r1]
   12c68:	0028      	movs	r0, r5
   12c6a:	7033      	strb	r3, [r6, #0]
   12c6c:	0039      	movs	r1, r7
   12c6e:	f7fe fbf5 	bl	1145c <__udivsi3>
   12c72:	1e05      	subs	r5, r0, #0
   12c74:	d1f1      	bne.n	12c5a <_printf_i+0x1d6>
   12c76:	2f08      	cmp	r7, #8
   12c78:	d109      	bne.n	12c8e <_printf_i+0x20a>
   12c7a:	6823      	ldr	r3, [r4, #0]
   12c7c:	07db      	lsls	r3, r3, #31
   12c7e:	d506      	bpl.n	12c8e <_printf_i+0x20a>
   12c80:	6863      	ldr	r3, [r4, #4]
   12c82:	6922      	ldr	r2, [r4, #16]
   12c84:	4293      	cmp	r3, r2
   12c86:	dc02      	bgt.n	12c8e <_printf_i+0x20a>
   12c88:	2330      	movs	r3, #48	; 0x30
   12c8a:	3e01      	subs	r6, #1
   12c8c:	7033      	strb	r3, [r6, #0]
   12c8e:	9b04      	ldr	r3, [sp, #16]
   12c90:	1b9b      	subs	r3, r3, r6
   12c92:	6123      	str	r3, [r4, #16]
   12c94:	9b07      	ldr	r3, [sp, #28]
   12c96:	aa09      	add	r2, sp, #36	; 0x24
   12c98:	9300      	str	r3, [sp, #0]
   12c9a:	0021      	movs	r1, r4
   12c9c:	9b06      	ldr	r3, [sp, #24]
   12c9e:	9805      	ldr	r0, [sp, #20]
   12ca0:	f7ff fe82 	bl	129a8 <_printf_common>
   12ca4:	1c43      	adds	r3, r0, #1
   12ca6:	d1b3      	bne.n	12c10 <_printf_i+0x18c>
   12ca8:	2001      	movs	r0, #1
   12caa:	4240      	negs	r0, r0
   12cac:	b00b      	add	sp, #44	; 0x2c
   12cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12cb0:	000149a8 	.word	0x000149a8
   12cb4:	00014997 	.word	0x00014997

00012cb8 <_putc_r>:
   12cb8:	b570      	push	{r4, r5, r6, lr}
   12cba:	0006      	movs	r6, r0
   12cbc:	000d      	movs	r5, r1
   12cbe:	0014      	movs	r4, r2
   12cc0:	2800      	cmp	r0, #0
   12cc2:	d004      	beq.n	12cce <_putc_r+0x16>
   12cc4:	6983      	ldr	r3, [r0, #24]
   12cc6:	2b00      	cmp	r3, #0
   12cc8:	d101      	bne.n	12cce <_putc_r+0x16>
   12cca:	f7ff fab1 	bl	12230 <__sinit>
   12cce:	4b12      	ldr	r3, [pc, #72]	; (12d18 <_putc_r+0x60>)
   12cd0:	429c      	cmp	r4, r3
   12cd2:	d111      	bne.n	12cf8 <_putc_r+0x40>
   12cd4:	6874      	ldr	r4, [r6, #4]
   12cd6:	68a3      	ldr	r3, [r4, #8]
   12cd8:	3b01      	subs	r3, #1
   12cda:	60a3      	str	r3, [r4, #8]
   12cdc:	2b00      	cmp	r3, #0
   12cde:	da05      	bge.n	12cec <_putc_r+0x34>
   12ce0:	69a2      	ldr	r2, [r4, #24]
   12ce2:	4293      	cmp	r3, r2
   12ce4:	db12      	blt.n	12d0c <_putc_r+0x54>
   12ce6:	b2eb      	uxtb	r3, r5
   12ce8:	2b0a      	cmp	r3, #10
   12cea:	d00f      	beq.n	12d0c <_putc_r+0x54>
   12cec:	6823      	ldr	r3, [r4, #0]
   12cee:	b2e8      	uxtb	r0, r5
   12cf0:	1c5a      	adds	r2, r3, #1
   12cf2:	6022      	str	r2, [r4, #0]
   12cf4:	701d      	strb	r5, [r3, #0]
   12cf6:	bd70      	pop	{r4, r5, r6, pc}
   12cf8:	4b08      	ldr	r3, [pc, #32]	; (12d1c <_putc_r+0x64>)
   12cfa:	429c      	cmp	r4, r3
   12cfc:	d101      	bne.n	12d02 <_putc_r+0x4a>
   12cfe:	68b4      	ldr	r4, [r6, #8]
   12d00:	e7e9      	b.n	12cd6 <_putc_r+0x1e>
   12d02:	4b07      	ldr	r3, [pc, #28]	; (12d20 <_putc_r+0x68>)
   12d04:	429c      	cmp	r4, r3
   12d06:	d1e6      	bne.n	12cd6 <_putc_r+0x1e>
   12d08:	68f4      	ldr	r4, [r6, #12]
   12d0a:	e7e4      	b.n	12cd6 <_putc_r+0x1e>
   12d0c:	0022      	movs	r2, r4
   12d0e:	0029      	movs	r1, r5
   12d10:	0030      	movs	r0, r6
   12d12:	f7ff f8c9 	bl	11ea8 <__swbuf_r>
   12d16:	e7ee      	b.n	12cf6 <_putc_r+0x3e>
   12d18:	0001493c 	.word	0x0001493c
   12d1c:	0001495c 	.word	0x0001495c
   12d20:	0001491c 	.word	0x0001491c

00012d24 <__sread>:
   12d24:	b570      	push	{r4, r5, r6, lr}
   12d26:	000c      	movs	r4, r1
   12d28:	250e      	movs	r5, #14
   12d2a:	5f49      	ldrsh	r1, [r1, r5]
   12d2c:	f000 f8e2 	bl	12ef4 <_read_r>
   12d30:	2800      	cmp	r0, #0
   12d32:	db03      	blt.n	12d3c <__sread+0x18>
   12d34:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12d36:	181b      	adds	r3, r3, r0
   12d38:	6563      	str	r3, [r4, #84]	; 0x54
   12d3a:	bd70      	pop	{r4, r5, r6, pc}
   12d3c:	89a3      	ldrh	r3, [r4, #12]
   12d3e:	4a02      	ldr	r2, [pc, #8]	; (12d48 <__sread+0x24>)
   12d40:	4013      	ands	r3, r2
   12d42:	81a3      	strh	r3, [r4, #12]
   12d44:	e7f9      	b.n	12d3a <__sread+0x16>
   12d46:	46c0      	nop			; (mov r8, r8)
   12d48:	ffffefff 	.word	0xffffefff

00012d4c <__swrite>:
   12d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d4e:	001f      	movs	r7, r3
   12d50:	898b      	ldrh	r3, [r1, #12]
   12d52:	0005      	movs	r5, r0
   12d54:	000c      	movs	r4, r1
   12d56:	0016      	movs	r6, r2
   12d58:	05db      	lsls	r3, r3, #23
   12d5a:	d505      	bpl.n	12d68 <__swrite+0x1c>
   12d5c:	230e      	movs	r3, #14
   12d5e:	5ec9      	ldrsh	r1, [r1, r3]
   12d60:	2200      	movs	r2, #0
   12d62:	2302      	movs	r3, #2
   12d64:	f000 f880 	bl	12e68 <_lseek_r>
   12d68:	89a3      	ldrh	r3, [r4, #12]
   12d6a:	4a05      	ldr	r2, [pc, #20]	; (12d80 <__swrite+0x34>)
   12d6c:	0028      	movs	r0, r5
   12d6e:	4013      	ands	r3, r2
   12d70:	81a3      	strh	r3, [r4, #12]
   12d72:	0032      	movs	r2, r6
   12d74:	230e      	movs	r3, #14
   12d76:	5ee1      	ldrsh	r1, [r4, r3]
   12d78:	003b      	movs	r3, r7
   12d7a:	f000 f82b 	bl	12dd4 <_write_r>
   12d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d80:	ffffefff 	.word	0xffffefff

00012d84 <__sseek>:
   12d84:	b570      	push	{r4, r5, r6, lr}
   12d86:	000c      	movs	r4, r1
   12d88:	250e      	movs	r5, #14
   12d8a:	5f49      	ldrsh	r1, [r1, r5]
   12d8c:	f000 f86c 	bl	12e68 <_lseek_r>
   12d90:	89a3      	ldrh	r3, [r4, #12]
   12d92:	1c42      	adds	r2, r0, #1
   12d94:	d103      	bne.n	12d9e <__sseek+0x1a>
   12d96:	4a05      	ldr	r2, [pc, #20]	; (12dac <__sseek+0x28>)
   12d98:	4013      	ands	r3, r2
   12d9a:	81a3      	strh	r3, [r4, #12]
   12d9c:	bd70      	pop	{r4, r5, r6, pc}
   12d9e:	2280      	movs	r2, #128	; 0x80
   12da0:	0152      	lsls	r2, r2, #5
   12da2:	4313      	orrs	r3, r2
   12da4:	81a3      	strh	r3, [r4, #12]
   12da6:	6560      	str	r0, [r4, #84]	; 0x54
   12da8:	e7f8      	b.n	12d9c <__sseek+0x18>
   12daa:	46c0      	nop			; (mov r8, r8)
   12dac:	ffffefff 	.word	0xffffefff

00012db0 <__sclose>:
   12db0:	b510      	push	{r4, lr}
   12db2:	230e      	movs	r3, #14
   12db4:	5ec9      	ldrsh	r1, [r1, r3]
   12db6:	f000 f821 	bl	12dfc <_close_r>
   12dba:	bd10      	pop	{r4, pc}

00012dbc <__ascii_wctomb>:
   12dbc:	1e0b      	subs	r3, r1, #0
   12dbe:	d004      	beq.n	12dca <__ascii_wctomb+0xe>
   12dc0:	2aff      	cmp	r2, #255	; 0xff
   12dc2:	d904      	bls.n	12dce <__ascii_wctomb+0x12>
   12dc4:	238a      	movs	r3, #138	; 0x8a
   12dc6:	6003      	str	r3, [r0, #0]
   12dc8:	3b8b      	subs	r3, #139	; 0x8b
   12dca:	0018      	movs	r0, r3
   12dcc:	4770      	bx	lr
   12dce:	700a      	strb	r2, [r1, #0]
   12dd0:	2301      	movs	r3, #1
   12dd2:	e7fa      	b.n	12dca <__ascii_wctomb+0xe>

00012dd4 <_write_r>:
   12dd4:	b570      	push	{r4, r5, r6, lr}
   12dd6:	0005      	movs	r5, r0
   12dd8:	0008      	movs	r0, r1
   12dda:	0011      	movs	r1, r2
   12ddc:	2200      	movs	r2, #0
   12dde:	4c06      	ldr	r4, [pc, #24]	; (12df8 <_write_r+0x24>)
   12de0:	6022      	str	r2, [r4, #0]
   12de2:	001a      	movs	r2, r3
   12de4:	f7fc fc82 	bl	f6ec <_write>
   12de8:	1c43      	adds	r3, r0, #1
   12dea:	d103      	bne.n	12df4 <_write_r+0x20>
   12dec:	6823      	ldr	r3, [r4, #0]
   12dee:	2b00      	cmp	r3, #0
   12df0:	d000      	beq.n	12df4 <_write_r+0x20>
   12df2:	602b      	str	r3, [r5, #0]
   12df4:	bd70      	pop	{r4, r5, r6, pc}
   12df6:	46c0      	nop			; (mov r8, r8)
   12df8:	20000fbc 	.word	0x20000fbc

00012dfc <_close_r>:
   12dfc:	2300      	movs	r3, #0
   12dfe:	b570      	push	{r4, r5, r6, lr}
   12e00:	4c06      	ldr	r4, [pc, #24]	; (12e1c <_close_r+0x20>)
   12e02:	0005      	movs	r5, r0
   12e04:	0008      	movs	r0, r1
   12e06:	6023      	str	r3, [r4, #0]
   12e08:	f7fa f8f2 	bl	cff0 <_close>
   12e0c:	1c43      	adds	r3, r0, #1
   12e0e:	d103      	bne.n	12e18 <_close_r+0x1c>
   12e10:	6823      	ldr	r3, [r4, #0]
   12e12:	2b00      	cmp	r3, #0
   12e14:	d000      	beq.n	12e18 <_close_r+0x1c>
   12e16:	602b      	str	r3, [r5, #0]
   12e18:	bd70      	pop	{r4, r5, r6, pc}
   12e1a:	46c0      	nop			; (mov r8, r8)
   12e1c:	20000fbc 	.word	0x20000fbc

00012e20 <_fstat_r>:
   12e20:	2300      	movs	r3, #0
   12e22:	b570      	push	{r4, r5, r6, lr}
   12e24:	4c06      	ldr	r4, [pc, #24]	; (12e40 <_fstat_r+0x20>)
   12e26:	0005      	movs	r5, r0
   12e28:	0008      	movs	r0, r1
   12e2a:	0011      	movs	r1, r2
   12e2c:	6023      	str	r3, [r4, #0]
   12e2e:	f7fa f8e2 	bl	cff6 <_fstat>
   12e32:	1c43      	adds	r3, r0, #1
   12e34:	d103      	bne.n	12e3e <_fstat_r+0x1e>
   12e36:	6823      	ldr	r3, [r4, #0]
   12e38:	2b00      	cmp	r3, #0
   12e3a:	d000      	beq.n	12e3e <_fstat_r+0x1e>
   12e3c:	602b      	str	r3, [r5, #0]
   12e3e:	bd70      	pop	{r4, r5, r6, pc}
   12e40:	20000fbc 	.word	0x20000fbc

00012e44 <_isatty_r>:
   12e44:	2300      	movs	r3, #0
   12e46:	b570      	push	{r4, r5, r6, lr}
   12e48:	4c06      	ldr	r4, [pc, #24]	; (12e64 <_isatty_r+0x20>)
   12e4a:	0005      	movs	r5, r0
   12e4c:	0008      	movs	r0, r1
   12e4e:	6023      	str	r3, [r4, #0]
   12e50:	f7fa f8d6 	bl	d000 <_isatty>
   12e54:	1c43      	adds	r3, r0, #1
   12e56:	d103      	bne.n	12e60 <_isatty_r+0x1c>
   12e58:	6823      	ldr	r3, [r4, #0]
   12e5a:	2b00      	cmp	r3, #0
   12e5c:	d000      	beq.n	12e60 <_isatty_r+0x1c>
   12e5e:	602b      	str	r3, [r5, #0]
   12e60:	bd70      	pop	{r4, r5, r6, pc}
   12e62:	46c0      	nop			; (mov r8, r8)
   12e64:	20000fbc 	.word	0x20000fbc

00012e68 <_lseek_r>:
   12e68:	b570      	push	{r4, r5, r6, lr}
   12e6a:	0005      	movs	r5, r0
   12e6c:	0008      	movs	r0, r1
   12e6e:	0011      	movs	r1, r2
   12e70:	2200      	movs	r2, #0
   12e72:	4c06      	ldr	r4, [pc, #24]	; (12e8c <_lseek_r+0x24>)
   12e74:	6022      	str	r2, [r4, #0]
   12e76:	001a      	movs	r2, r3
   12e78:	f7fa f8c4 	bl	d004 <_lseek>
   12e7c:	1c43      	adds	r3, r0, #1
   12e7e:	d103      	bne.n	12e88 <_lseek_r+0x20>
   12e80:	6823      	ldr	r3, [r4, #0]
   12e82:	2b00      	cmp	r3, #0
   12e84:	d000      	beq.n	12e88 <_lseek_r+0x20>
   12e86:	602b      	str	r3, [r5, #0]
   12e88:	bd70      	pop	{r4, r5, r6, pc}
   12e8a:	46c0      	nop			; (mov r8, r8)
   12e8c:	20000fbc 	.word	0x20000fbc

00012e90 <memchr>:
   12e90:	b2c9      	uxtb	r1, r1
   12e92:	1882      	adds	r2, r0, r2
   12e94:	4290      	cmp	r0, r2
   12e96:	d101      	bne.n	12e9c <memchr+0xc>
   12e98:	2000      	movs	r0, #0
   12e9a:	4770      	bx	lr
   12e9c:	7803      	ldrb	r3, [r0, #0]
   12e9e:	428b      	cmp	r3, r1
   12ea0:	d0fb      	beq.n	12e9a <memchr+0xa>
   12ea2:	3001      	adds	r0, #1
   12ea4:	e7f6      	b.n	12e94 <memchr+0x4>

00012ea6 <_realloc_r>:
   12ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ea8:	0007      	movs	r7, r0
   12eaa:	000d      	movs	r5, r1
   12eac:	0016      	movs	r6, r2
   12eae:	2900      	cmp	r1, #0
   12eb0:	d105      	bne.n	12ebe <_realloc_r+0x18>
   12eb2:	0011      	movs	r1, r2
   12eb4:	f7fe fd1e 	bl	118f4 <_malloc_r>
   12eb8:	0004      	movs	r4, r0
   12eba:	0020      	movs	r0, r4
   12ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ebe:	2a00      	cmp	r2, #0
   12ec0:	d103      	bne.n	12eca <_realloc_r+0x24>
   12ec2:	f7fe fccd 	bl	11860 <_free_r>
   12ec6:	0034      	movs	r4, r6
   12ec8:	e7f7      	b.n	12eba <_realloc_r+0x14>
   12eca:	f000 f827 	bl	12f1c <_malloc_usable_size_r>
   12ece:	002c      	movs	r4, r5
   12ed0:	4286      	cmp	r6, r0
   12ed2:	d9f2      	bls.n	12eba <_realloc_r+0x14>
   12ed4:	0031      	movs	r1, r6
   12ed6:	0038      	movs	r0, r7
   12ed8:	f7fe fd0c 	bl	118f4 <_malloc_r>
   12edc:	1e04      	subs	r4, r0, #0
   12ede:	d0ec      	beq.n	12eba <_realloc_r+0x14>
   12ee0:	0029      	movs	r1, r5
   12ee2:	0032      	movs	r2, r6
   12ee4:	f7fe fc98 	bl	11818 <memcpy>
   12ee8:	0029      	movs	r1, r5
   12eea:	0038      	movs	r0, r7
   12eec:	f7fe fcb8 	bl	11860 <_free_r>
   12ef0:	e7e3      	b.n	12eba <_realloc_r+0x14>
	...

00012ef4 <_read_r>:
   12ef4:	b570      	push	{r4, r5, r6, lr}
   12ef6:	0005      	movs	r5, r0
   12ef8:	0008      	movs	r0, r1
   12efa:	0011      	movs	r1, r2
   12efc:	2200      	movs	r2, #0
   12efe:	4c06      	ldr	r4, [pc, #24]	; (12f18 <_read_r+0x24>)
   12f00:	6022      	str	r2, [r4, #0]
   12f02:	001a      	movs	r2, r3
   12f04:	f7fc fbd0 	bl	f6a8 <_read>
   12f08:	1c43      	adds	r3, r0, #1
   12f0a:	d103      	bne.n	12f14 <_read_r+0x20>
   12f0c:	6823      	ldr	r3, [r4, #0]
   12f0e:	2b00      	cmp	r3, #0
   12f10:	d000      	beq.n	12f14 <_read_r+0x20>
   12f12:	602b      	str	r3, [r5, #0]
   12f14:	bd70      	pop	{r4, r5, r6, pc}
   12f16:	46c0      	nop			; (mov r8, r8)
   12f18:	20000fbc 	.word	0x20000fbc

00012f1c <_malloc_usable_size_r>:
   12f1c:	1f0b      	subs	r3, r1, #4
   12f1e:	681b      	ldr	r3, [r3, #0]
   12f20:	1f18      	subs	r0, r3, #4
   12f22:	2b00      	cmp	r3, #0
   12f24:	da01      	bge.n	12f2a <_malloc_usable_size_r+0xe>
   12f26:	580b      	ldr	r3, [r1, r0]
   12f28:	18c0      	adds	r0, r0, r3
   12f2a:	4770      	bx	lr

00012f2c <__FUNCTION__.14455>:
   12f2c:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   12f3c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   12f4c:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   12f5c:	746c 6320 646d 0000 8dac 0000 8d7c 0000     lt cmd......|...
   12f6c:	8d74 0000 8d8c 0000 8d84 0000 8da4 0000     t...............
   12f7c:	8d94 0000 8d9c 0000                         ........

00012f84 <__FUNCTION__.13058>:
   12f84:	6968 5f66 6573 646e 0000 0000               hif_send....

00012f90 <__FUNCTION__.13068>:
   12f90:	6968 5f66 7369 0072                         hif_isr.

00012f98 <__FUNCTION__.13074>:
   12f98:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00012fa8 <__FUNCTION__.13086>:
   12fa8:	6968 5f66 6572 6563 7669 0065               hif_receive.

00012fb4 <__FUNCTION__.13102>:
   12fb4:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   12fc4:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
   12fd4:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
   12fe4:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
   12ff4:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
   13004:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
   13014:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
   13024:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
   13034:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
   13044:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
   13054:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
   13064:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   13074:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
   13084:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   13094:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
   130a4:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   130b4:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   130c4:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   130d4:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   130e4:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
   130f4:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
   13104:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   13114:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   13124:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   13134:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
   13144:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   13154:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   13164:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   13174:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
   13184:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   13194:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   131a4:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   131b4:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   131c4:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
   131d4:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   131e4:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   131f4:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   13204:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   13214:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   13224:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   13234:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   13244:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   13254:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
   13264:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
   13274:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
   13284:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
   13294:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

000132a4 <__FUNCTION__.13037>:
   132a4:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

000132b0 <__FUNCTION__.13066>:
   132b0:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

000132c0 <__FUNCTION__.13094>:
   132c0:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   132d0:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
   132e0:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
   132f0:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
   13300:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
   13310:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
   13320:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
   13330:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
   13340:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
   13350:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
   13360:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
   13370:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
   13380:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
   13390:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
   133a0:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
   133b0:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
   133c0:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
   133d0:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
   133e0:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
   133f0:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
   13400:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
   13410:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
   13420:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
   13430:	3931 343a 3a34 3534 0000 0000 7041 2072     19:44:45....Apr 
   13440:	3132 3220 3130 0037 7244 7669 7265 6220     21 2017.Driver b
   13450:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
   13460:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
   13470:	2065 6556 7372 6f69 006e 0000               e Version...

0001347c <__FUNCTION__.12900>:
   1347c:	6863 7069 775f 6b61 0065 0000               chip_wake...

00013488 <__FUNCTION__.12949>:
   13488:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
   13498:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
   134a8:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
   134b8:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
   134c8:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
   134d8:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
   134e8:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

000134f8 <__FUNCTION__.12947>:
   134f8:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00013504 <__FUNCTION__.12954>:
   13504:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
   13514:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
   13524:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
   13534:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
   13544:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
   13554:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
   13564:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
   13574:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
   13584:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
   13594:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   135a4:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
   135b4:	4920 2044 6c25 0a78 0000 0000 9da8 0000      ID %lx.........
   135c4:	9da8 0000 9dd8 0000 9d5a 0000 9d7e 0000     ........Z...~...
   135d4:	9d8c 0000 9dbe 0000 9dbe 0000 9e06 0000     ................
   135e4:	9d3e 0000 9e40 0000 9e40 0000 9e40 0000     >...@...@...@...
   135f4:	9e40 0000 9d9a 0000 c9c3 cac4               @...........

00013600 <__FUNCTION__.12253>:
   13600:	7073 5f69 6d63 0064                         spi_cmd.

00013608 <__FUNCTION__.12260>:
   13608:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00013618 <__FUNCTION__.12269>:
   13618:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00013624 <__FUNCTION__.12285>:
   13624:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

00013634 <__FUNCTION__.12300>:
   13634:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00013644 <__FUNCTION__.12312>:
   13644:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00013654 <__FUNCTION__.12323>:
   13654:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00013664 <__FUNCTION__.12335>:
   13664:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00013674 <__FUNCTION__.12348>:
   13674:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00013680 <__FUNCTION__.12369>:
   13680:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0001368c <crc7_syndrome_table>:
   1368c:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   1369c:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   136ac:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   136bc:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   136cc:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   136dc:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   136ec:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   136fc:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   1370c:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   1371c:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   1372c:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   1373c:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   1374c:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   1375c:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   1376c:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   1377c:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   1378c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   1379c:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   137ac:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
   137bc:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
   137cc:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
   137dc:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   137ec:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   137fc:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
   1380c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   1381c:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   1382c:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
   1383c:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   1384c:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   1385c:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   1386c:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
   1387c:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
   1388c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   1389c:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   138ac:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
   138bc:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
   138cc:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   138dc:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
   138ec:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   138fc:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
   1390c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   1391c:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
   1392c:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
   1393c:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
   1394c:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
   1395c:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
   1396c:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
   1397c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   1398c:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   1399c:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
   139ac:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   139bc:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   139cc:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   139dc:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   139ec:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   139fc:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   13a0c:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
   13a1c:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
   13a2c:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
   13a3c:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   13a4c:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
   13a5c:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
   13a6c:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   13a7c:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
   13a8c:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   13a9c:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   13aac:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
   13abc:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   13acc:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
   13adc:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
   13aec:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   13afc:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   13b0c:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   13b1c:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
   13b2c:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   13b3c:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   13b4c:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   13b5c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   13b6c:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   13b7c:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
   13b8c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   13b9c:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
   13bac:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
   13bbc:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   13bcc:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
   13bdc:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
   13bec:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   13bfc:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
   13c0c:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
   13c1c:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   13c2c:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
   13c3c:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   13c4c:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   13c5c:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   13c6c:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
   13c7c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   13c8c:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
   13c9c:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
   13cac:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
   13cbc:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   13ccc:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
   13cdc:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
   13cec:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
   13cfc:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   13d0c:	206e 4449 3d20 2520 0d64 000a               n ID = %d...

00013d18 <_tcc_apbcmasks>:
   13d18:	0100 0000 0200 0000 0400 0000               ............

00013d24 <_tcc_cc_nums>:
   13d24:	0204 0002                                   ....

00013d28 <_tcc_gclk_ids>:
   13d28:	1a1a 001b                                   ....

00013d2c <_tcc_maxs>:
   13d2c:	ffff 00ff ffff 00ff ffff 0000               ............

00013d38 <_tcc_ow_nums>:
   13d38:	0408 0002                                   ....

00013d3c <_tcc_intflag>:
   13d3c:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   13d4c:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   13d5c:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00013d6c <tcc_interrupt_vectors.12434>:
   13d6c:	100f 0011 cb02 0000 cafc 0000 caf6 0000     ................
   13d7c:	caf0 0000 cb08 0000 cb10 0000 cb08 0000     ................
   13d8c:	caea 0000 cae4 0000 cb08 0000 cade 0000     ................
   13d9c:	cade 0000 cad8 0000 cad2 0000 cb10 0000     ................
   13dac:	cb7a 0000 cb74 0000 cb6e 0000 cb68 0000     z...t...n...h...
   13dbc:	cb80 0000 cb88 0000 cb80 0000 cb62 0000     ............b...
   13dcc:	cb5c 0000 cb80 0000 cb56 0000 cb56 0000     \.......V...V...
   13ddc:	cb50 0000 cb4a 0000 cb88 0000 cbf4 0000     P...J...........
   13dec:	cbee 0000 cbe8 0000 cbe2 0000 cbfa 0000     ................
   13dfc:	cbfa 0000 cbfa 0000 cbdc 0000 cbd6 0000     ................
   13e0c:	cbfa 0000 cbd0 0000 cbd0 0000 cbca 0000     ................
   13e1c:	cbc4 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   13e2c:	6463 6665 0d31 0000 7254 6e61 6673 7265     cdef1...Transfer
   13e3c:	452d 636e 646f 6e69 3a67 0020 6f43 6e6e     -Encoding: .Conn
   13e4c:	6365 6974 6e6f 203a 0000 0000 5448 5054     ection: ....HTTP
   13e5c:	002f 0000 4547 2054 0000 0000 4f50 5453     /...GET ....POST
   13e6c:	0020 0000 4544 454c 4554 0020 5550 2054      ...DELETE .PUT 
   13e7c:	0000 0000 504f 4954 4e4f 2053 0000 0000     ....OPTIONS ....
   13e8c:	4548 4441 0020 0000 4820 5454 2f50 2e31     HEAD ... HTTP/1.
   13e9c:	0d31 000a 7355 7265 412d 6567 746e 203a     1...User-Agent: 
   13eac:	0000 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   13ebc:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   13ecc:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   13edc:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   13eec:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   13efc:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   13f0c:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   13f1c:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   13f2c:	654c 676e 6874 203a 0000 0000 7461 656d     Length: ....atme
   13f3c:	2f6c 2e31 2e30 0032 7468 7074 2f3a 002f     l/1.0.2.http://.
   13f4c:	7468 7074 3a73 2f2f 0000 0000 2000 4200     https://..... .B
   13f5c:	2400 4200 2800 4200 d0be 0000 d096 0000     .$.B.(.B........
   13f6c:	d09a 0000 d09e 0000 d0a2 0000 d0a6 0000     ................
   13f7c:	d0aa 0000 d0ae 0000 d0b2 0000 d0b6 0000     ................
   13f8c:	0100 0000 d166 0000 d13e 0000 d144 0000     ....f...>...D...
   13f9c:	d14a 0000 d14a 0000 d150 0000 d150 0000     J...J...P...P...
   13fac:	d150 0000 d156 0000 d15c 0000 d592 0000     P...V...\.......
   13fbc:	d56e 0000 d574 0000 d57a 0000 d57a 0000     n...t...z...z...
   13fcc:	d580 0000 d580 0000 d580 0000 d586 0000     ................
   13fdc:	d58c 0000 daf0 0000 daf0 0000 dacc 0000     ................
   13fec:	daf0 0000 dacc 0000 dab2 0000 dab2 0000     ................
   13ffc:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   1400c:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   1401c:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   1402c:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   1403c:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   1404c:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   1405c:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   1406c:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   1407c:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   1408c:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   1409c:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   140ac:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   140bc:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   140cc:	daf0 0000 daf0 0000 daf0 0000 daf0 0000     ................
   140dc:	daf0 0000 dacc 0000 dacc 0000 dad4 0000     ................
   140ec:	dad4 0000 dad4 0000 dad4 0000 0800 4200     ...............B
   140fc:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
   1410c:	1c00 4200 ef1e 0000 ef1a 0000 ef1a 0000     ...B............
   1411c:	ef7c 0000 ef7c 0000 ef32 0000 ef24 0000     |...|...2...$...
   1412c:	ef38 0000 ef6a 0000 f13c 0000 f11c 0000     8...j...<.......
   1413c:	f11c 0000 f1a8 0000 f12e 0000 f14a 0000     ............J...
   1414c:	f120 0000 f158 0000 f198 0000 fc8a 0000      ...X...........
   1415c:	fc98 0000 fcaa 0000 fd0a 0000 fe64 0000     ............d...
   1416c:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   1417c:	6162 6b63 203a 5448 5054 6320 696c 6e65     back: HTTP clien
   1418c:	2074 6f73 6b63 7465 6320 6e6f 656e 7463     t socket connect
   1419c:	6465 0d2e 0000 0000 7468 7074 635f 696c     ed......http_cli
   141ac:	6e65 5f74 6163 6c6c 6162 6b63 203a 6572     ent_callback: re
   141bc:	7571 7365 2074 6f63 706d 656c 6574 2e64     quest completed.
   141cc:	000d 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   141dc:	6163 6c6c 6162 6b63 203a 6572 6563 7669     callback: receiv
   141ec:	6465 7220 7365 6f70 736e 2065 7525 6420     ed response %u d
   141fc:	7461 2061 6973 657a 2520 0d75 000a 0000     ata size %u.....
   1420c:	6143 6c6c 6162 6b63 203a 5243 2043 6f64     Callback: CRC do
   1421c:	6e77 6f6c 6461 2e2e 2e2e 2e2e 000d 0000     wnload..........
   1422c:	6552 6563 7669 6465 2520 0d78 000a 0000     Received %x.....
   1423c:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   1424c:	6162 6b63 435f 5548 4b4e 4445 4420 5441     back_CHUNKED DAT
   1425c:	3a41 7220 6365 6965 6576 2064 6572 7073     A: received resp
   1426c:	6e6f 6573 6420 7461 2061 6973 657a 2520     onse data size %
   1427c:	0d75 000a 6946 7372 2074 6c62 636f 206b     u...First block 
   1428c:	656c 676e 6874 2520 2064 5243 3a43 2520     length %d CRC: %
   1429c:	0d75 000a 6c42 636f 206b 656c 676e 6874     u...Block length
   142ac:	2520 2064 5243 3a43 2520 0d75 000a 0000      %d CRC: %u.....
   142bc:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   142cc:	6162 6b63 203a 6964 6373 6e6f 656e 7463     back: disconnect
   142dc:	6f69 206e 6572 7361 6e6f 253a 0d64 000a     ion reason:%d...
   142ec:	514d 5454 6920 696e 6974 6c61 7a69 7461     MQTT initializat
   142fc:	6f69 206e 6166 6c69 6465 202e 7245 6f72     ion failed. Erro
   1430c:	2072 6f63 6564 6920 2073 2528 2964 0a0d     r code is (%d)..
   1431c:	0000 0000 514d 5454 7220 6765 7369 6574     ....MQTT registe
   1432c:	2072 6163 6c6c 6162 6b63 6620 6961 656c     r callback faile
   1433c:	2e64 4520 7272 726f 6320 646f 2065 7369     d. Error code is
   1434c:	2820 6425 0d29 000a 7355 7265 3a20 2520      (%d)...User : %
   1435c:	0d73 000a 6150 7373 6f77 6472 3a20 2520     s...Password : %
   1436c:	0d73 000a 6863 7461 0000 0000 6f54 6970     s...chat....Topi
   1437c:	2063 203a 7325 0a0d 0000 0000 616d 6e69     c : %s......main
   1438c:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   1439c:	6163 6c6c 6520 7272 726f 2821 6425 0d29     call error!(%d).
   143ac:	000a 0000 6425 0000 6573 736e 726f 0000     ....%d..sensor..
   143bc:	2e31 2e30 0030 0000 6576 7372 6f69 726e     1.0.0...versionr
   143cc:	6165 6f64 7475 0000 616d 6e69 203a 326d     eadout..main: m2
   143dc:	5f6d 6977 6966 645f 6965 696e 2074 6163     m_wifi_deinit ca
   143ec:	6c6c 6520 7272 726f 2821 6425 0d29 000a     ll error!(%d)...
   143fc:	6f63 666e 6769 7275 5f65 7468 7074 635f     configure_http_c
   1440c:	696c 6e65 3a74 4820 5454 2050 6c63 6569     lient: HTTP clie
   1441c:	746e 6920 696e 6974 6c61 7a69 7461 6f69     nt initializatio
   1442c:	206e 6166 6c69 6465 2021 7228 7365 2520     n failed! (res %
   1443c:	2964 0a0d 0000 0000 616d 6e69 203a 326d     d)......main: m2
   1444c:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
   1445c:	6520 7272 726f 2021 7228 7365 2520 2964      error! (res %d)
   1446c:	0a0d 0000 7553 7672 7669 6465 6820 7474     ....Survived htt
   1447c:	2070 6c63 6569 746e 7320 7465 7075 000d     p client setup..
   1448c:	7845 6365 7475 6e69 2067 6d69 6761 3a65     Executing image:
   1449c:	2520 2c64 4420 204c 6f74 203a 6425 0a0d      %d, DL to: %d..
   144ac:	0000 0000 6f64 6e77 6f6c 6461 665f 7269     ....download_fir
   144bc:	776d 7261 3a65 6320 6e6f 656e 7463 6e69     mware: connectin
   144cc:	2067 6f74 5720 4669 2069 5041 2520 2e73     g to WiFi AP %s.
   144dc:	2e2e 0a0d 0000 0000 6f64 6e77 6f6c 6461     ........download
   144ec:	665f 7269 776d 7261 3a65 6420 6e6f 2e65     _firmware: done.
   144fc:	000d 0000 6143 636c 6c75 7461 6465 4320     ....Calculated C
   1450c:	4352 203a 7825 0a0d 0000 0000 0d0a 614d     RC: %x........Ma
   1451c:	6e69 203a 6f44 656e 6420 776f 6c6e 616f     in: Done downloa
   1452c:	6964 676e 6620 7269 776d 7261 2065 6e61     ding firmware an
   1453c:	2064 5243 0a43 000d 0d0a 614d 6e69 203a     d CRC.....Main: 
   1454c:	5243 2043 414d 4354 4548 2144 7320 6174     CRC MATCHED! sta
   1455c:	7472 6e69 2067 6966 6d72 6177 6572 7520     rting firmware u
   1456c:	6770 6172 6564 202e 0d0a 0000 0d0a 4d20     pgrade. ...... M
   1457c:	6961 3a6e 4320 4352 4320 6568 6b63 4620     ain: CRC Check F
   1458c:	6961 216c 0d0a 0000                         ail!....

00014594 <main_mqtt_broker>:
   14594:	316d 2e33 6c63 756f 6d64 7471 2e74 6f63     m13.cloudmqtt.co
   145a4:	006d 0000 6f43 6e6e 6365 2074 6166 6c69     m...Connect fail
   145b4:	7420 206f 6573 7672 7265 2528 2973 2021      to server(%s)! 
   145c4:	6572 7274 2079 7469 6120 7475 6d6f 7461     retry it automat
   145d4:	6369 6c61 796c 0d2e 000a 0000 6361 7574     ically......actu
   145e4:	7461 726f 0000 0000 7075 7267 6461 0065     ator....upgrade.
   145f4:	6576 7372 6f69 006e 7250 7065 7261 7461     version.Preparat
   14604:	6f69 206e 666f 7420 6568 6320 6168 2074     ion of the chat 
   14614:	6168 2073 6562 6e65 6320 6d6f 6c70 7465     has been complet
   14624:	6465 0d2e 0000 0000 514d 5454 6220 6f72     ed......MQTT bro
   14634:	656b 2072 6564 6c63 6e69 2065 6f79 7275     ker decline your
   14644:	6120 6363 7365 2173 6520 7272 726f 6320      access! error c
   14654:	646f 2065 6425 0a0d 0000 0000 7325 3e20     ode %d......%s >
   14664:	203e 0000 7274 6575 0000 0000 7075 7267     > ..true....upgr
   14674:	6461 2065 6966 6d72 6177 6572 0000 0000     ade firmware....
   14684:	7075 7267 6461 2065 656d 7373 6761 2065     upgrade message 
   14694:	6572 6563 7669 6465 0000 0000 6572 6c70     received....repl
   146a4:	0079 0000 514d 5454 6420 7369 6f63 6e6e     y...MQTT disconn
   146b4:	6365 6574 0d64 0000 6572 6f73 766c 5f65     ected...resolve_
   146c4:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   146d4:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   146e4:	0a0d 0a0d 0000 0000 7473 7261 5f74 6f64     ........start_do
   146f4:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   14704:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   14714:	0000 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   14724:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   14734:	6e65 2074 6c61 6572 6461 2e79 000d 0000     ent already.....
   14744:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   14754:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   14764:	6120 726c 6165 7964 0d2e 0000 7473 7261      already....star
   14774:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   14784:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   14794:	2e2e 0d2e 0000 0000 7468 7074 3a73 2f2f     ........https://
   147a4:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   147b4:	7564 7e2f 696e 6863 6e69 2f73 7562 7474     du/~nichins/butt
   147c4:	6e6f 6c5f 6465 2e32 6962 006e 7473 7261     on_led2.bin.star
   147d4:	5f74 6f64 6e77 6f6c 6461 4320 4352 203a     t_download CRC: 
   147e4:	6573 646e 6e69 2067 5448 5054 7220 7165     sending HTTP req
   147f4:	6575 7473 2e2e 0d2e 0000 0000 7468 7074     uest........http
   14804:	3a73 2f2f 7777 2e77 6573 7361 752e 6570     s://www.seas.upe
   14814:	6e6e 652e 7564 7e2f 696e 6863 6e69 2f73     nn.edu/~nichins/
   14824:	7562 7474 6e6f 6c5f 6465 5f32 7263 2e63     button_led2_crc.
   14834:	6962 006e 6957 462d 2069 6f63 6e6e 6365     bin.Wi-Fi connec
   14844:	6574 0d64 0000 0000 6957 462d 2069 6964     ted.....Wi-Fi di
   14854:	6373 6e6f 656e 7463 6465 000d 6557 636c     sconnected..Welc
   14864:	6d6f 4865 6c61 0000 7068 732d 7465 7075     omeHal..hp-setup
   14874:	312d 0000 6957 462d 2069 5049 6920 2073     -1..Wi-Fi IP is 
   14884:	7525 252e 2e75 7525 252e 0d75 000a 0000     %u.%u.%u.%u.....
   14894:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   148a4:	5f49 4f43 4e4e 4345 4554 0d44 0000 0000     I_CONNECTED.....
   148b4:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   148c4:	5f49 4944 4353 4e4f 454e 5443 4445 000d     I_DISCONNECTED..
   148d4:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   148e4:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   148f4:	7525 0a0d 0000 0000 6843 7069 6420 6469     %u......Chip did
   14904:	746e 7720 6b61 2065 000d 0000 514d 7349     nt wake ....MQIs
   14914:	7064 0000                                   dp..

00014918 <_global_impure_ptr>:
   14918:	0024 2000                                   $.. 

0001491c <__sf_fake_stderr>:
	...

0001493c <__sf_fake_stdin>:
	...

0001495c <__sf_fake_stdout>:
	...
   1497c:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   1498c:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   1499c:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   149ac:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

000149b9 <_ctype_>:
   149b9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   149c9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   149d9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   149e9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   149f9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   14a09:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   14a19:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   14a29:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   14a39:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00014abc <_init>:
   14abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14abe:	46c0      	nop			; (mov r8, r8)
   14ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14ac2:	bc08      	pop	{r3}
   14ac4:	469e      	mov	lr, r3
   14ac6:	4770      	bx	lr

00014ac8 <__init_array_start>:
   14ac8:	000080dd 	.word	0x000080dd

00014acc <_fini>:
   14acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ace:	46c0      	nop			; (mov r8, r8)
   14ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14ad2:	bc08      	pop	{r3}
   14ad4:	469e      	mov	lr, r3
   14ad6:	4770      	bx	lr

00014ad8 <__fini_array_start>:
   14ad8:	000080b5 	.word	0x000080b5
