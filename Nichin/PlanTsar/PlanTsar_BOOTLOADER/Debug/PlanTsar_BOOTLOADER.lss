
PlanTsar_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e04  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .status       00000007  00005e04  00005e04  00015e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000070  20000000  00005e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000150  20000070  00005e7c  00020070  2**2
                  ALLOC
  4 .stack        00002000  200001c0  00005fcc  00020070  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003196e  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b98  00000000  00000000  00051a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000030f6  00000000  00000000  000555f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000940  00000000  00000000  000586ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007d8  00000000  00000000  0005902d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001af71  00000000  00000000  00059805  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ef69  00000000  00000000  00074776  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00088b49  00000000  00000000  000836df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002600  00000000  00000000  0010c228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 21 00 20 a5 3b 00 00 9d 3c 00 00 9d 3c 00 00     .!. .;...<...<..
	...
      2c:	9d 3c 00 00 00 00 00 00 00 00 00 00 9d 3c 00 00     .<...........<..
      3c:	9d 3c 00 00 9d 3c 00 00 9d 3c 00 00 9d 3c 00 00     .<...<...<...<..
      4c:	9d 3c 00 00 9d 3c 00 00 9d 3c 00 00 9d 3c 00 00     .<...<...<...<..
      5c:	9d 3c 00 00 9d 3c 00 00 09 2f 00 00 21 2f 00 00     .<...<.../..!/..
      6c:	39 2f 00 00 51 2f 00 00 69 2f 00 00 81 2f 00 00     9/..Q/..i/.../..
      7c:	9d 3c 00 00 9d 3c 00 00 9d 3c 00 00 9d 3c 00 00     .<...<...<...<..
      8c:	9d 3c 00 00 9d 3c 00 00 00 00 00 00 00 00 00 00     .<...<..........
      9c:	9d 3c 00 00 9d 3c 00 00 9d 3c 00 00 9d 3c 00 00     .<...<...<...<..
      ac:	9d 3c 00 00 00 00 00 00                             .<......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00005e04 	.word	0x00005e04

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00005e04 	.word	0x00005e04
     10c:	00005e0c 	.word	0x00005e0c
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
	while (length && (status == STATUS_OK)) {
		_at25dfx_chip_enable_write(chip);

		cmd.address += cmd.length;
		cmd.data.tx += cmd.length;
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
     12c:	230e      	movs	r3, #14

		_at25dfx_chip_issue_write_command_wait(chip, cmd);
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0

		status = _at25dfx_chip_get_nonbusy_status(chip);
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7

		length -= cmd.length;
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
	while (length && (status == STATUS_OK)) {
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
     166:	2300      	movs	r3, #0
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	41004400 	.word	0x41004400

00000174 <port_get_group_from_gpio_pin>:
     174:	b580      	push	{r7, lr}
	}

	_at25dfx_spi_unlock(chip->spi);
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	0002      	movs	r2, r0
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]

	return status;
     180:	1dfb      	adds	r3, r7, #7
     182:	781b      	ldrb	r3, [r3, #0]
     184:	0018      	movs	r0, r3
}
     186:	4b03      	ldr	r3, [pc, #12]	; (194 <port_get_group_from_gpio_pin+0x20>)
     188:	4798      	blx	r3
     18a:	0003      	movs	r3, r0
     18c:	0018      	movs	r0, r3
     18e:	46bd      	mov	sp, r7
     190:	b002      	add	sp, #8
     192:	bd80      	pop	{r7, pc}
     194:	00000115 	.word	0x00000115

00000198 <port_pin_set_output_level>:
     198:	b580      	push	{r7, lr}
     19a:	b084      	sub	sp, #16
     19c:	af00      	add	r7, sp, #0
     19e:	0002      	movs	r2, r0
     1a0:	1dfb      	adds	r3, r7, #7
     1a2:	701a      	strb	r2, [r3, #0]
     1a4:	1dbb      	adds	r3, r7, #6
     1a6:	1c0a      	adds	r2, r1, #0
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1a8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1aa:	1dfb      	adds	r3, r7, #7
     1ac:	781b      	ldrb	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b0d      	ldr	r3, [pc, #52]	; (1e8 <port_pin_set_output_level+0x50>)
     1b2:	4798      	blx	r3
     1b4:	0003      	movs	r3, r0
     1b6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1b8:	1dfb      	adds	r3, r7, #7
     1ba:	781b      	ldrb	r3, [r3, #0]
     1bc:	221f      	movs	r2, #31
     1be:	4013      	ands	r3, r2
     1c0:	2201      	movs	r2, #1
     1c2:	409a      	lsls	r2, r3
     1c4:	0013      	movs	r3, r2
     1c6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1c8:	1dbb      	adds	r3, r7, #6
     1ca:	781b      	ldrb	r3, [r3, #0]
     1cc:	2b00      	cmp	r3, #0
     1ce:	d003      	beq.n	1d8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     1d0:	68fb      	ldr	r3, [r7, #12]
     1d2:	68ba      	ldr	r2, [r7, #8]
     1d4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     1d6:	e002      	b.n	1de <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	68ba      	ldr	r2, [r7, #8]
     1dc:	615a      	str	r2, [r3, #20]
}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	46bd      	mov	sp, r7
     1e2:	b004      	add	sp, #16
     1e4:	bd80      	pop	{r7, pc}
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	00000175 	.word	0x00000175

000001ec <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
     1ec:	b580      	push	{r7, lr}
     1ee:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
     1f0:	4b02      	ldr	r3, [pc, #8]	; (1fc <system_interrupt_enter_critical_section+0x10>)
     1f2:	4798      	blx	r3
}
     1f4:	46c0      	nop			; (mov r8, r8)
     1f6:	46bd      	mov	sp, r7
     1f8:	bd80      	pop	{r7, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	0000302d 	.word	0x0000302d

00000200 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
     200:	b580      	push	{r7, lr}
     202:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
     204:	4b02      	ldr	r3, [pc, #8]	; (210 <system_interrupt_leave_critical_section+0x10>)
     206:	4798      	blx	r3
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	bd80      	pop	{r7, pc}
     20e:	46c0      	nop			; (mov r8, r8)
     210:	00003081 	.word	0x00003081

00000214 <spi_lock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline enum status_code spi_lock(struct spi_module *const module)
{
     214:	b580      	push	{r7, lr}
     216:	b084      	sub	sp, #16
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	enum status_code status;

	system_interrupt_enter_critical_section();
     21c:	4b0d      	ldr	r3, [pc, #52]	; (254 <spi_lock+0x40>)
     21e:	4798      	blx	r3

	if (module->locked) {
     220:	687b      	ldr	r3, [r7, #4]
     222:	791b      	ldrb	r3, [r3, #4]
     224:	b2db      	uxtb	r3, r3
     226:	2b00      	cmp	r3, #0
     228:	d004      	beq.n	234 <spi_lock+0x20>
		status = STATUS_BUSY;
     22a:	230f      	movs	r3, #15
     22c:	18fb      	adds	r3, r7, r3
     22e:	2205      	movs	r2, #5
     230:	701a      	strb	r2, [r3, #0]
     232:	e006      	b.n	242 <spi_lock+0x2e>
	} else {
		module->locked = true;
     234:	687b      	ldr	r3, [r7, #4]
     236:	2201      	movs	r2, #1
     238:	711a      	strb	r2, [r3, #4]
		status = STATUS_OK;
     23a:	230f      	movs	r3, #15
     23c:	18fb      	adds	r3, r7, r3
     23e:	2200      	movs	r2, #0
     240:	701a      	strb	r2, [r3, #0]
	}

	system_interrupt_leave_critical_section();
     242:	4b05      	ldr	r3, [pc, #20]	; (258 <spi_lock+0x44>)
     244:	4798      	blx	r3

	return status;
     246:	230f      	movs	r3, #15
     248:	18fb      	adds	r3, r7, r3
     24a:	781b      	ldrb	r3, [r3, #0]
}
     24c:	0018      	movs	r0, r3
     24e:	46bd      	mov	sp, r7
     250:	b004      	add	sp, #16
     252:	bd80      	pop	{r7, pc}
     254:	000001ed 	.word	0x000001ed
     258:	00000201 	.word	0x00000201

0000025c <spi_unlock>:
 *
 * \retval STATUS_OK If the module was locked
 * \retval STATUS_BUSY If the module was already locked
 */
static inline void spi_unlock(struct spi_module *const module)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	6078      	str	r0, [r7, #4]
	module->locked = false;
     264:	687b      	ldr	r3, [r7, #4]
     266:	2200      	movs	r2, #0
     268:	711a      	strb	r2, [r3, #4]
}
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	46bd      	mov	sp, r7
     26e:	b002      	add	sp, #8
     270:	bd80      	pop	{r7, pc}
	...

00000274 <_at25dfx_get_device_id>:
{
     274:	b580      	push	{r7, lr}
     276:	b082      	sub	sp, #8
     278:	af00      	add	r7, sp, #0
     27a:	0002      	movs	r2, r0
     27c:	1dfb      	adds	r3, r7, #7
     27e:	701a      	strb	r2, [r3, #0]
	switch (type) {
     280:	1dfb      	adds	r3, r7, #7
     282:	781b      	ldrb	r3, [r3, #0]
     284:	2b09      	cmp	r3, #9
     286:	d818      	bhi.n	2ba <_at25dfx_get_device_id+0x46>
     288:	009a      	lsls	r2, r3, #2
     28a:	4b0e      	ldr	r3, [pc, #56]	; (2c4 <_at25dfx_get_device_id+0x50>)
     28c:	18d3      	adds	r3, r2, r3
     28e:	681b      	ldr	r3, [r3, #0]
     290:	469f      	mov	pc, r3
		return 0x00651f;
     292:	4b0d      	ldr	r3, [pc, #52]	; (2c8 <_at25dfx_get_device_id+0x54>)
     294:	e012      	b.n	2bc <_at25dfx_get_device_id+0x48>
		return 0x00431f;
     296:	4b0d      	ldr	r3, [pc, #52]	; (2cc <_at25dfx_get_device_id+0x58>)
     298:	e010      	b.n	2bc <_at25dfx_get_device_id+0x48>
		return 0x01441f;
     29a:	4b0d      	ldr	r3, [pc, #52]	; (2d0 <_at25dfx_get_device_id+0x5c>)
     29c:	e00e      	b.n	2bc <_at25dfx_get_device_id+0x48>
		return 0x02451f;
     29e:	4b0d      	ldr	r3, [pc, #52]	; (2d4 <_at25dfx_get_device_id+0x60>)
     2a0:	e00c      	b.n	2bc <_at25dfx_get_device_id+0x48>
		return 0x01451f;
     2a2:	4b0d      	ldr	r3, [pc, #52]	; (2d8 <_at25dfx_get_device_id+0x64>)
     2a4:	e00a      	b.n	2bc <_at25dfx_get_device_id+0x48>
		return 0x02461f;
     2a6:	4b0d      	ldr	r3, [pc, #52]	; (2dc <_at25dfx_get_device_id+0x68>)
     2a8:	e008      	b.n	2bc <_at25dfx_get_device_id+0x48>
		return 0x03461f;
     2aa:	4b0d      	ldr	r3, [pc, #52]	; (2e0 <_at25dfx_get_device_id+0x6c>)
     2ac:	e006      	b.n	2bc <_at25dfx_get_device_id+0x48>
		return 0x00861f;
     2ae:	4b0d      	ldr	r3, [pc, #52]	; (2e4 <_at25dfx_get_device_id+0x70>)
     2b0:	e004      	b.n	2bc <_at25dfx_get_device_id+0x48>
		return 0x01471f;
     2b2:	4b0d      	ldr	r3, [pc, #52]	; (2e8 <_at25dfx_get_device_id+0x74>)
     2b4:	e002      	b.n	2bc <_at25dfx_get_device_id+0x48>
		return 0x00481f;
     2b6:	4b0d      	ldr	r3, [pc, #52]	; (2ec <_at25dfx_get_device_id+0x78>)
     2b8:	e000      	b.n	2bc <_at25dfx_get_device_id+0x48>
		return 0;
     2ba:	2300      	movs	r3, #0
}
     2bc:	0018      	movs	r0, r3
     2be:	46bd      	mov	sp, r7
     2c0:	b002      	add	sp, #8
     2c2:	bd80      	pop	{r7, pc}
     2c4:	00005ac4 	.word	0x00005ac4
     2c8:	0000651f 	.word	0x0000651f
     2cc:	0000431f 	.word	0x0000431f
     2d0:	0001441f 	.word	0x0001441f
     2d4:	0002451f 	.word	0x0002451f
     2d8:	0001451f 	.word	0x0001451f
     2dc:	0002461f 	.word	0x0002461f
     2e0:	0003461f 	.word	0x0003461f
     2e4:	0000861f 	.word	0x0000861f
     2e8:	0001471f 	.word	0x0001471f
     2ec:	0000481f 	.word	0x0000481f

000002f0 <_at25dfx_get_device_size>:
{
     2f0:	b580      	push	{r7, lr}
     2f2:	b082      	sub	sp, #8
     2f4:	af00      	add	r7, sp, #0
     2f6:	0002      	movs	r2, r0
     2f8:	1dfb      	adds	r3, r7, #7
     2fa:	701a      	strb	r2, [r3, #0]
	switch (type) {
     2fc:	1dfb      	adds	r3, r7, #7
     2fe:	781b      	ldrb	r3, [r3, #0]
     300:	2b09      	cmp	r3, #9
     302:	d819      	bhi.n	338 <_at25dfx_get_device_size+0x48>
     304:	009a      	lsls	r2, r3, #2
     306:	4b0f      	ldr	r3, [pc, #60]	; (344 <_at25dfx_get_device_size+0x54>)
     308:	18d3      	adds	r3, r2, r3
     30a:	681b      	ldr	r3, [r3, #0]
     30c:	469f      	mov	pc, r3
		return 64 * 1024UL;
     30e:	2380      	movs	r3, #128	; 0x80
     310:	025b      	lsls	r3, r3, #9
     312:	e012      	b.n	33a <_at25dfx_get_device_size+0x4a>
		return 256 * 1024UL;
     314:	2380      	movs	r3, #128	; 0x80
     316:	02db      	lsls	r3, r3, #11
     318:	e00f      	b.n	33a <_at25dfx_get_device_size+0x4a>
		return 512 * 1024UL;
     31a:	2380      	movs	r3, #128	; 0x80
     31c:	031b      	lsls	r3, r3, #12
     31e:	e00c      	b.n	33a <_at25dfx_get_device_size+0x4a>
		return 1024 * 1024UL;
     320:	2380      	movs	r3, #128	; 0x80
     322:	035b      	lsls	r3, r3, #13
     324:	e009      	b.n	33a <_at25dfx_get_device_size+0x4a>
		return 2048 * 1024UL;
     326:	2380      	movs	r3, #128	; 0x80
     328:	039b      	lsls	r3, r3, #14
     32a:	e006      	b.n	33a <_at25dfx_get_device_size+0x4a>
		return 4096 * 1024UL;
     32c:	2380      	movs	r3, #128	; 0x80
     32e:	03db      	lsls	r3, r3, #15
     330:	e003      	b.n	33a <_at25dfx_get_device_size+0x4a>
		return 8192 * 1024UL;
     332:	2380      	movs	r3, #128	; 0x80
     334:	041b      	lsls	r3, r3, #16
     336:	e000      	b.n	33a <_at25dfx_get_device_size+0x4a>
		return 0;
     338:	2300      	movs	r3, #0
}
     33a:	0018      	movs	r0, r3
     33c:	46bd      	mov	sp, r7
     33e:	b002      	add	sp, #8
     340:	bd80      	pop	{r7, pc}
     342:	46c0      	nop			; (mov r8, r8)
     344:	00005aec 	.word	0x00005aec

00000348 <_at25dfx_chip_select>:
{
     348:	b580      	push	{r7, lr}
     34a:	b082      	sub	sp, #8
     34c:	af00      	add	r7, sp, #0
     34e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, false);
     350:	687b      	ldr	r3, [r7, #4]
     352:	795b      	ldrb	r3, [r3, #5]
     354:	2100      	movs	r1, #0
     356:	0018      	movs	r0, r3
     358:	4b02      	ldr	r3, [pc, #8]	; (364 <_at25dfx_chip_select+0x1c>)
     35a:	4798      	blx	r3
}
     35c:	46c0      	nop			; (mov r8, r8)
     35e:	46bd      	mov	sp, r7
     360:	b002      	add	sp, #8
     362:	bd80      	pop	{r7, pc}
     364:	00000199 	.word	0x00000199

00000368 <_at25dfx_chip_deselect>:
{
     368:	b580      	push	{r7, lr}
     36a:	b082      	sub	sp, #8
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
	port_pin_set_output_level(chip->cs_pin, true);
     370:	687b      	ldr	r3, [r7, #4]
     372:	795b      	ldrb	r3, [r3, #5]
     374:	2101      	movs	r1, #1
     376:	0018      	movs	r0, r3
     378:	4b02      	ldr	r3, [pc, #8]	; (384 <_at25dfx_chip_deselect+0x1c>)
     37a:	4798      	blx	r3
}
     37c:	46c0      	nop			; (mov r8, r8)
     37e:	46bd      	mov	sp, r7
     380:	b002      	add	sp, #8
     382:	bd80      	pop	{r7, pc}
     384:	00000199 	.word	0x00000199

00000388 <_at25dfx_chip_issue_read_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_read_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     388:	b084      	sub	sp, #16
     38a:	b5b0      	push	{r4, r5, r7, lr}
     38c:	b084      	sub	sp, #16
     38e:	af00      	add	r7, sp, #0
     390:	6078      	str	r0, [r7, #4]
     392:	2004      	movs	r0, #4
     394:	2420      	movs	r4, #32
     396:	46a4      	mov	ip, r4
     398:	44bc      	add	ip, r7
     39a:	4460      	add	r0, ip
     39c:	6001      	str	r1, [r0, #0]
     39e:	6042      	str	r2, [r0, #4]
     3a0:	6083      	str	r3, [r0, #8]
	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
     3a2:	2304      	movs	r3, #4
     3a4:	2220      	movs	r2, #32
     3a6:	4694      	mov	ip, r2
     3a8:	44bc      	add	ip, r7
     3aa:	4463      	add	r3, ip
     3ac:	781a      	ldrb	r2, [r3, #0]
     3ae:	2308      	movs	r3, #8
     3b0:	18fb      	adds	r3, r7, r3
     3b2:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     3b4:	2304      	movs	r3, #4
     3b6:	2220      	movs	r2, #32
     3b8:	4694      	mov	ip, r2
     3ba:	44bc      	add	ip, r7
     3bc:	4463      	add	r3, ip
     3be:	785b      	ldrb	r3, [r3, #1]
     3c0:	2b01      	cmp	r3, #1
     3c2:	d91f      	bls.n	404 <_at25dfx_chip_issue_read_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     3c4:	2304      	movs	r3, #4
     3c6:	2220      	movs	r2, #32
     3c8:	4694      	mov	ip, r2
     3ca:	44bc      	add	ip, r7
     3cc:	4463      	add	r3, ip
     3ce:	685b      	ldr	r3, [r3, #4]
     3d0:	b2da      	uxtb	r2, r3
     3d2:	2308      	movs	r3, #8
     3d4:	18fb      	adds	r3, r7, r3
     3d6:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     3d8:	2304      	movs	r3, #4
     3da:	2220      	movs	r2, #32
     3dc:	4694      	mov	ip, r2
     3de:	44bc      	add	ip, r7
     3e0:	4463      	add	r3, ip
     3e2:	685b      	ldr	r3, [r3, #4]
     3e4:	0a1b      	lsrs	r3, r3, #8
     3e6:	b2da      	uxtb	r2, r3
     3e8:	2308      	movs	r3, #8
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     3ee:	2304      	movs	r3, #4
     3f0:	2220      	movs	r2, #32
     3f2:	4694      	mov	ip, r2
     3f4:	44bc      	add	ip, r7
     3f6:	4463      	add	r3, ip
     3f8:	685b      	ldr	r3, [r3, #4]
     3fa:	0c1b      	lsrs	r3, r3, #16
     3fc:	b2da      	uxtb	r2, r3
     3fe:	2308      	movs	r3, #8
     400:	18fb      	adds	r3, r7, r3
     402:	705a      	strb	r2, [r3, #1]
	}
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);
     404:	687b      	ldr	r3, [r7, #4]
     406:	0018      	movs	r0, r3
     408:	4b1d      	ldr	r3, [pc, #116]	; (480 <_at25dfx_chip_issue_read_command_wait+0xf8>)
     40a:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	6818      	ldr	r0, [r3, #0]
     410:	2304      	movs	r3, #4
     412:	2220      	movs	r2, #32
     414:	4694      	mov	ip, r2
     416:	44bc      	add	ip, r7
     418:	4463      	add	r3, ip
     41a:	785b      	ldrb	r3, [r3, #1]
     41c:	b29a      	uxth	r2, r3
     41e:	230f      	movs	r3, #15
     420:	18fc      	adds	r4, r7, r3
     422:	2308      	movs	r3, #8
     424:	18fb      	adds	r3, r7, r3
     426:	0019      	movs	r1, r3
     428:	4b16      	ldr	r3, [pc, #88]	; (484 <_at25dfx_chip_issue_read_command_wait+0xfc>)
     42a:	4798      	blx	r3
     42c:	0003      	movs	r3, r0
     42e:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     430:	2304      	movs	r3, #4
     432:	2220      	movs	r2, #32
     434:	4694      	mov	ip, r2
     436:	44bc      	add	ip, r7
     438:	4463      	add	r3, ip
     43a:	899b      	ldrh	r3, [r3, #12]
     43c:	2b00      	cmp	r3, #0
     43e:	d014      	beq.n	46a <_at25dfx_chip_issue_read_command_wait+0xe2>
		status = spi_read_buffer_wait(chip->spi, cmd.data.rx, cmd.length, 0);
     440:	687b      	ldr	r3, [r7, #4]
     442:	6818      	ldr	r0, [r3, #0]
     444:	2304      	movs	r3, #4
     446:	2220      	movs	r2, #32
     448:	4694      	mov	ip, r2
     44a:	44bc      	add	ip, r7
     44c:	4463      	add	r3, ip
     44e:	6899      	ldr	r1, [r3, #8]
     450:	2304      	movs	r3, #4
     452:	2220      	movs	r2, #32
     454:	4694      	mov	ip, r2
     456:	44bc      	add	ip, r7
     458:	4463      	add	r3, ip
     45a:	899a      	ldrh	r2, [r3, #12]
     45c:	230f      	movs	r3, #15
     45e:	18fc      	adds	r4, r7, r3
     460:	2300      	movs	r3, #0
     462:	4d09      	ldr	r5, [pc, #36]	; (488 <_at25dfx_chip_issue_read_command_wait+0x100>)
     464:	47a8      	blx	r5
     466:	0003      	movs	r3, r0
     468:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     46a:	687b      	ldr	r3, [r7, #4]
     46c:	0018      	movs	r0, r3
     46e:	4b07      	ldr	r3, [pc, #28]	; (48c <_at25dfx_chip_issue_read_command_wait+0x104>)
     470:	4798      	blx	r3
}
     472:	46c0      	nop			; (mov r8, r8)
     474:	46bd      	mov	sp, r7
     476:	b004      	add	sp, #16
     478:	bcb0      	pop	{r4, r5, r7}
     47a:	bc08      	pop	{r3}
     47c:	b004      	add	sp, #16
     47e:	4718      	bx	r3
     480:	00000349 	.word	0x00000349
     484:	00000fe1 	.word	0x00000fe1
     488:	00000e25 	.word	0x00000e25
     48c:	00000369 	.word	0x00000369

00000490 <_at25dfx_chip_issue_write_command_wait>:
 * \param chip Address of SerialFlash chip instance to operate on.
 * \param cmd The command to issue.
 */
static inline void _at25dfx_chip_issue_write_command_wait(
		struct at25dfx_chip_module *chip, struct at25dfx_command cmd)
{
     490:	b084      	sub	sp, #16
     492:	b590      	push	{r4, r7, lr}
     494:	b085      	sub	sp, #20
     496:	af00      	add	r7, sp, #0
     498:	6078      	str	r0, [r7, #4]
     49a:	2004      	movs	r0, #4
     49c:	2420      	movs	r4, #32
     49e:	46a4      	mov	ip, r4
     4a0:	44bc      	add	ip, r7
     4a2:	4460      	add	r0, ip
     4a4:	6001      	str	r1, [r0, #0]
     4a6:	6042      	str	r2, [r0, #4]
     4a8:	6083      	str	r3, [r0, #8]

	UNUSED(status);

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
     4aa:	2304      	movs	r3, #4
     4ac:	2220      	movs	r2, #32
     4ae:	4694      	mov	ip, r2
     4b0:	44bc      	add	ip, r7
     4b2:	4463      	add	r3, ip
     4b4:	781a      	ldrb	r2, [r3, #0]
     4b6:	2308      	movs	r3, #8
     4b8:	18fb      	adds	r3, r7, r3
     4ba:	701a      	strb	r2, [r3, #0]

	if (cmd.command_size > 1) {
     4bc:	2304      	movs	r3, #4
     4be:	2220      	movs	r2, #32
     4c0:	4694      	mov	ip, r2
     4c2:	44bc      	add	ip, r7
     4c4:	4463      	add	r3, ip
     4c6:	785b      	ldrb	r3, [r3, #1]
     4c8:	2b01      	cmp	r3, #1
     4ca:	d91f      	bls.n	50c <_at25dfx_chip_issue_write_command_wait+0x7c>
		Assert(cmd.command_size >= 4);

		cmd_buffer[3] = cmd.address & 0xff;
     4cc:	2304      	movs	r3, #4
     4ce:	2220      	movs	r2, #32
     4d0:	4694      	mov	ip, r2
     4d2:	44bc      	add	ip, r7
     4d4:	4463      	add	r3, ip
     4d6:	685b      	ldr	r3, [r3, #4]
     4d8:	b2da      	uxtb	r2, r3
     4da:	2308      	movs	r3, #8
     4dc:	18fb      	adds	r3, r7, r3
     4de:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     4e0:	2304      	movs	r3, #4
     4e2:	2220      	movs	r2, #32
     4e4:	4694      	mov	ip, r2
     4e6:	44bc      	add	ip, r7
     4e8:	4463      	add	r3, ip
     4ea:	685b      	ldr	r3, [r3, #4]
     4ec:	0a1b      	lsrs	r3, r3, #8
     4ee:	b2da      	uxtb	r2, r3
     4f0:	2308      	movs	r3, #8
     4f2:	18fb      	adds	r3, r7, r3
     4f4:	709a      	strb	r2, [r3, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     4f6:	2304      	movs	r3, #4
     4f8:	2220      	movs	r2, #32
     4fa:	4694      	mov	ip, r2
     4fc:	44bc      	add	ip, r7
     4fe:	4463      	add	r3, ip
     500:	685b      	ldr	r3, [r3, #4]
     502:	0c1b      	lsrs	r3, r3, #16
     504:	b2da      	uxtb	r2, r3
     506:	2308      	movs	r3, #8
     508:	18fb      	adds	r3, r7, r3
     50a:	705a      	strb	r2, [r3, #1]
	}

	_at25dfx_chip_select(chip);
     50c:	687b      	ldr	r3, [r7, #4]
     50e:	0018      	movs	r0, r3
     510:	4b1d      	ldr	r3, [pc, #116]	; (588 <_at25dfx_chip_issue_write_command_wait+0xf8>)
     512:	4798      	blx	r3

	status = spi_write_buffer_wait(chip->spi, cmd_buffer, cmd.command_size);
     514:	687b      	ldr	r3, [r7, #4]
     516:	6818      	ldr	r0, [r3, #0]
     518:	2304      	movs	r3, #4
     51a:	2220      	movs	r2, #32
     51c:	4694      	mov	ip, r2
     51e:	44bc      	add	ip, r7
     520:	4463      	add	r3, ip
     522:	785b      	ldrb	r3, [r3, #1]
     524:	b29a      	uxth	r2, r3
     526:	230f      	movs	r3, #15
     528:	18fc      	adds	r4, r7, r3
     52a:	2308      	movs	r3, #8
     52c:	18fb      	adds	r3, r7, r3
     52e:	0019      	movs	r1, r3
     530:	4b16      	ldr	r3, [pc, #88]	; (58c <_at25dfx_chip_issue_write_command_wait+0xfc>)
     532:	4798      	blx	r3
     534:	0003      	movs	r3, r0
     536:	7023      	strb	r3, [r4, #0]
	Assert(status == STATUS_OK);

	if (cmd.length) {
     538:	2304      	movs	r3, #4
     53a:	2220      	movs	r2, #32
     53c:	4694      	mov	ip, r2
     53e:	44bc      	add	ip, r7
     540:	4463      	add	r3, ip
     542:	899b      	ldrh	r3, [r3, #12]
     544:	2b00      	cmp	r3, #0
     546:	d014      	beq.n	572 <_at25dfx_chip_issue_write_command_wait+0xe2>
		status = spi_write_buffer_wait(chip->spi, cmd.data.tx, cmd.length);
     548:	687b      	ldr	r3, [r7, #4]
     54a:	6818      	ldr	r0, [r3, #0]
     54c:	2304      	movs	r3, #4
     54e:	2220      	movs	r2, #32
     550:	4694      	mov	ip, r2
     552:	44bc      	add	ip, r7
     554:	4463      	add	r3, ip
     556:	6899      	ldr	r1, [r3, #8]
     558:	2304      	movs	r3, #4
     55a:	2220      	movs	r2, #32
     55c:	4694      	mov	ip, r2
     55e:	44bc      	add	ip, r7
     560:	4463      	add	r3, ip
     562:	899b      	ldrh	r3, [r3, #12]
     564:	220f      	movs	r2, #15
     566:	18bc      	adds	r4, r7, r2
     568:	001a      	movs	r2, r3
     56a:	4b08      	ldr	r3, [pc, #32]	; (58c <_at25dfx_chip_issue_write_command_wait+0xfc>)
     56c:	4798      	blx	r3
     56e:	0003      	movs	r3, r0
     570:	7023      	strb	r3, [r4, #0]
		Assert(status == STATUS_OK);
	}

	_at25dfx_chip_deselect(chip);
     572:	687b      	ldr	r3, [r7, #4]
     574:	0018      	movs	r0, r3
     576:	4b06      	ldr	r3, [pc, #24]	; (590 <_at25dfx_chip_issue_write_command_wait+0x100>)
     578:	4798      	blx	r3
}
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	46bd      	mov	sp, r7
     57e:	b005      	add	sp, #20
     580:	bc90      	pop	{r4, r7}
     582:	bc08      	pop	{r3}
     584:	b004      	add	sp, #16
     586:	4718      	bx	r3
     588:	00000349 	.word	0x00000349
     58c:	00000fe1 	.word	0x00000fe1
     590:	00000369 	.word	0x00000369

00000594 <at25dfx_chip_check_presence>:
{
     594:	b590      	push	{r4, r7, lr}
     596:	b08b      	sub	sp, #44	; 0x2c
     598:	af02      	add	r7, sp, #8
     59a:	6078      	str	r0, [r7, #4]
	uint32_t id = 0;
     59c:	2300      	movs	r3, #0
     59e:	60bb      	str	r3, [r7, #8]
	status = _at25dfx_spi_lock(chip->spi);
     5a0:	687b      	ldr	r3, [r7, #4]
     5a2:	681b      	ldr	r3, [r3, #0]
     5a4:	221f      	movs	r2, #31
     5a6:	18bc      	adds	r4, r7, r2
     5a8:	0018      	movs	r0, r3
     5aa:	4b21      	ldr	r3, [pc, #132]	; (630 <at25dfx_chip_check_presence+0x9c>)
     5ac:	4798      	blx	r3
     5ae:	0003      	movs	r3, r0
     5b0:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     5b2:	231f      	movs	r3, #31
     5b4:	18fb      	adds	r3, r7, r3
     5b6:	781b      	ldrb	r3, [r3, #0]
     5b8:	2b05      	cmp	r3, #5
     5ba:	d103      	bne.n	5c4 <at25dfx_chip_check_presence+0x30>
		return status;
     5bc:	231f      	movs	r3, #31
     5be:	18fb      	adds	r3, r7, r3
     5c0:	781b      	ldrb	r3, [r3, #0]
     5c2:	e030      	b.n	626 <at25dfx_chip_check_presence+0x92>
	cmd.opcode = AT25DFX_COMMAND_READ_DEVICE_ID;
     5c4:	230c      	movs	r3, #12
     5c6:	18fb      	adds	r3, r7, r3
     5c8:	229f      	movs	r2, #159	; 0x9f
     5ca:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     5cc:	230c      	movs	r3, #12
     5ce:	18fb      	adds	r3, r7, r3
     5d0:	2201      	movs	r2, #1
     5d2:	705a      	strb	r2, [r3, #1]
	cmd.data.rx = (uint8_t *)&id;
     5d4:	230c      	movs	r3, #12
     5d6:	18fb      	adds	r3, r7, r3
     5d8:	2208      	movs	r2, #8
     5da:	18ba      	adds	r2, r7, r2
     5dc:	609a      	str	r2, [r3, #8]
	cmd.length = 3;
     5de:	230c      	movs	r3, #12
     5e0:	18fb      	adds	r3, r7, r3
     5e2:	2203      	movs	r2, #3
     5e4:	819a      	strh	r2, [r3, #12]
	cmd.address = (at25dfx_address_t)NULL;
     5e6:	230c      	movs	r3, #12
     5e8:	18fb      	adds	r3, r7, r3
     5ea:	2200      	movs	r2, #0
     5ec:	605a      	str	r2, [r3, #4]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     5ee:	230c      	movs	r3, #12
     5f0:	18fb      	adds	r3, r7, r3
     5f2:	6878      	ldr	r0, [r7, #4]
     5f4:	466a      	mov	r2, sp
     5f6:	68d9      	ldr	r1, [r3, #12]
     5f8:	6011      	str	r1, [r2, #0]
     5fa:	6819      	ldr	r1, [r3, #0]
     5fc:	685a      	ldr	r2, [r3, #4]
     5fe:	689b      	ldr	r3, [r3, #8]
     600:	4c0c      	ldr	r4, [pc, #48]	; (634 <at25dfx_chip_check_presence+0xa0>)
     602:	47a0      	blx	r4
	_at25dfx_spi_unlock(chip->spi);
     604:	687b      	ldr	r3, [r7, #4]
     606:	681b      	ldr	r3, [r3, #0]
     608:	0018      	movs	r0, r3
     60a:	4b0b      	ldr	r3, [pc, #44]	; (638 <at25dfx_chip_check_presence+0xa4>)
     60c:	4798      	blx	r3
	if (id == _at25dfx_get_device_id(chip->type)) {
     60e:	687b      	ldr	r3, [r7, #4]
     610:	791b      	ldrb	r3, [r3, #4]
     612:	0018      	movs	r0, r3
     614:	4b09      	ldr	r3, [pc, #36]	; (63c <at25dfx_chip_check_presence+0xa8>)
     616:	4798      	blx	r3
     618:	0002      	movs	r2, r0
     61a:	68bb      	ldr	r3, [r7, #8]
     61c:	429a      	cmp	r2, r3
     61e:	d101      	bne.n	624 <at25dfx_chip_check_presence+0x90>
		return STATUS_OK;
     620:	2300      	movs	r3, #0
     622:	e000      	b.n	626 <at25dfx_chip_check_presence+0x92>
		return STATUS_ERR_NOT_FOUND;
     624:	2314      	movs	r3, #20
}
     626:	0018      	movs	r0, r3
     628:	46bd      	mov	sp, r7
     62a:	b009      	add	sp, #36	; 0x24
     62c:	bd90      	pop	{r4, r7, pc}
     62e:	46c0      	nop			; (mov r8, r8)
     630:	00000215 	.word	0x00000215
     634:	00000389 	.word	0x00000389
     638:	0000025d 	.word	0x0000025d
     63c:	00000275 	.word	0x00000275

00000640 <at25dfx_chip_read_buffer>:
{
     640:	b590      	push	{r4, r7, lr}
     642:	b08d      	sub	sp, #52	; 0x34
     644:	af02      	add	r7, sp, #8
     646:	60f8      	str	r0, [r7, #12]
     648:	60b9      	str	r1, [r7, #8]
     64a:	607a      	str	r2, [r7, #4]
     64c:	001a      	movs	r2, r3
     64e:	1cbb      	adds	r3, r7, #2
     650:	801a      	strh	r2, [r3, #0]
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
     652:	1cbb      	adds	r3, r7, #2
     654:	881a      	ldrh	r2, [r3, #0]
     656:	68bb      	ldr	r3, [r7, #8]
     658:	18d4      	adds	r4, r2, r3
     65a:	68fb      	ldr	r3, [r7, #12]
     65c:	791b      	ldrb	r3, [r3, #4]
     65e:	0018      	movs	r0, r3
     660:	4b21      	ldr	r3, [pc, #132]	; (6e8 <at25dfx_chip_read_buffer+0xa8>)
     662:	4798      	blx	r3
     664:	0003      	movs	r3, r0
     666:	429c      	cmp	r4, r3
     668:	d901      	bls.n	66e <at25dfx_chip_read_buffer+0x2e>
		return STATUS_ERR_INVALID_ARG;
     66a:	2317      	movs	r3, #23
     66c:	e037      	b.n	6de <at25dfx_chip_read_buffer+0x9e>
	status = _at25dfx_spi_lock(chip->spi);
     66e:	68fb      	ldr	r3, [r7, #12]
     670:	681b      	ldr	r3, [r3, #0]
     672:	2227      	movs	r2, #39	; 0x27
     674:	18bc      	adds	r4, r7, r2
     676:	0018      	movs	r0, r3
     678:	4b1c      	ldr	r3, [pc, #112]	; (6ec <at25dfx_chip_read_buffer+0xac>)
     67a:	4798      	blx	r3
     67c:	0003      	movs	r3, r0
     67e:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     680:	2327      	movs	r3, #39	; 0x27
     682:	18fb      	adds	r3, r7, r3
     684:	781b      	ldrb	r3, [r3, #0]
     686:	2b05      	cmp	r3, #5
     688:	d103      	bne.n	692 <at25dfx_chip_read_buffer+0x52>
		return status;
     68a:	2327      	movs	r3, #39	; 0x27
     68c:	18fb      	adds	r3, r7, r3
     68e:	781b      	ldrb	r3, [r3, #0]
     690:	e025      	b.n	6de <at25dfx_chip_read_buffer+0x9e>
	cmd.opcode = AT25DFX_COMMAND_READ_ARRAY;
     692:	2314      	movs	r3, #20
     694:	18fb      	adds	r3, r7, r3
     696:	220b      	movs	r2, #11
     698:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 5;
     69a:	2314      	movs	r3, #20
     69c:	18fb      	adds	r3, r7, r3
     69e:	2205      	movs	r2, #5
     6a0:	705a      	strb	r2, [r3, #1]
	cmd.address = address;
     6a2:	2314      	movs	r3, #20
     6a4:	18fb      	adds	r3, r7, r3
     6a6:	68ba      	ldr	r2, [r7, #8]
     6a8:	605a      	str	r2, [r3, #4]
	cmd.data.rx = (uint8_t *)data;
     6aa:	2314      	movs	r3, #20
     6ac:	18fb      	adds	r3, r7, r3
     6ae:	687a      	ldr	r2, [r7, #4]
     6b0:	609a      	str	r2, [r3, #8]
	cmd.length = length;
     6b2:	2314      	movs	r3, #20
     6b4:	18fb      	adds	r3, r7, r3
     6b6:	1cba      	adds	r2, r7, #2
     6b8:	8812      	ldrh	r2, [r2, #0]
     6ba:	819a      	strh	r2, [r3, #12]
	_at25dfx_chip_issue_read_command_wait(chip, cmd);
     6bc:	2314      	movs	r3, #20
     6be:	18fb      	adds	r3, r7, r3
     6c0:	68f8      	ldr	r0, [r7, #12]
     6c2:	466a      	mov	r2, sp
     6c4:	68d9      	ldr	r1, [r3, #12]
     6c6:	6011      	str	r1, [r2, #0]
     6c8:	6819      	ldr	r1, [r3, #0]
     6ca:	685a      	ldr	r2, [r3, #4]
     6cc:	689b      	ldr	r3, [r3, #8]
     6ce:	4c08      	ldr	r4, [pc, #32]	; (6f0 <at25dfx_chip_read_buffer+0xb0>)
     6d0:	47a0      	blx	r4
	_at25dfx_spi_unlock(chip->spi);
     6d2:	68fb      	ldr	r3, [r7, #12]
     6d4:	681b      	ldr	r3, [r3, #0]
     6d6:	0018      	movs	r0, r3
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <at25dfx_chip_read_buffer+0xb4>)
     6da:	4798      	blx	r3
	return STATUS_OK;
     6dc:	2300      	movs	r3, #0
}
     6de:	0018      	movs	r0, r3
     6e0:	46bd      	mov	sp, r7
     6e2:	b00b      	add	sp, #44	; 0x2c
     6e4:	bd90      	pop	{r4, r7, pc}
     6e6:	46c0      	nop			; (mov r8, r8)
     6e8:	000002f1 	.word	0x000002f1
     6ec:	00000215 	.word	0x00000215
     6f0:	00000389 	.word	0x00000389
     6f4:	0000025d 	.word	0x0000025d

000006f8 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
     6f8:	b590      	push	{r4, r7, lr}
     6fa:	b08b      	sub	sp, #44	; 0x2c
     6fc:	af02      	add	r7, sp, #8
     6fe:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     700:	687b      	ldr	r3, [r7, #4]
     702:	681b      	ldr	r3, [r3, #0]
     704:	221f      	movs	r2, #31
     706:	18bc      	adds	r4, r7, r2
     708:	0018      	movs	r0, r3
     70a:	4b1b      	ldr	r3, [pc, #108]	; (778 <at25dfx_chip_sleep+0x80>)
     70c:	4798      	blx	r3
     70e:	0003      	movs	r3, r0
     710:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     712:	231f      	movs	r3, #31
     714:	18fb      	adds	r3, r7, r3
     716:	781b      	ldrb	r3, [r3, #0]
     718:	2b05      	cmp	r3, #5
     71a:	d103      	bne.n	724 <at25dfx_chip_sleep+0x2c>
		return status;
     71c:	231f      	movs	r3, #31
     71e:	18fb      	adds	r3, r7, r3
     720:	781b      	ldrb	r3, [r3, #0]
     722:	e024      	b.n	76e <at25dfx_chip_sleep+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_SLEEP;
     724:	230c      	movs	r3, #12
     726:	18fb      	adds	r3, r7, r3
     728:	22b9      	movs	r2, #185	; 0xb9
     72a:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     72c:	230c      	movs	r3, #12
     72e:	18fb      	adds	r3, r7, r3
     730:	2201      	movs	r2, #1
     732:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     734:	230c      	movs	r3, #12
     736:	18fb      	adds	r3, r7, r3
     738:	2200      	movs	r2, #0
     73a:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     73c:	230c      	movs	r3, #12
     73e:	18fb      	adds	r3, r7, r3
     740:	2200      	movs	r2, #0
     742:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     744:	230c      	movs	r3, #12
     746:	18fb      	adds	r3, r7, r3
     748:	2200      	movs	r2, #0
     74a:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     74c:	230c      	movs	r3, #12
     74e:	18fb      	adds	r3, r7, r3
     750:	6878      	ldr	r0, [r7, #4]
     752:	466a      	mov	r2, sp
     754:	68d9      	ldr	r1, [r3, #12]
     756:	6011      	str	r1, [r2, #0]
     758:	6819      	ldr	r1, [r3, #0]
     75a:	685a      	ldr	r2, [r3, #4]
     75c:	689b      	ldr	r3, [r3, #8]
     75e:	4c07      	ldr	r4, [pc, #28]	; (77c <at25dfx_chip_sleep+0x84>)
     760:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     762:	687b      	ldr	r3, [r7, #4]
     764:	681b      	ldr	r3, [r3, #0]
     766:	0018      	movs	r0, r3
     768:	4b05      	ldr	r3, [pc, #20]	; (780 <at25dfx_chip_sleep+0x88>)
     76a:	4798      	blx	r3

	return STATUS_OK;
     76c:	2300      	movs	r3, #0
}
     76e:	0018      	movs	r0, r3
     770:	46bd      	mov	sp, r7
     772:	b009      	add	sp, #36	; 0x24
     774:	bd90      	pop	{r4, r7, pc}
     776:	46c0      	nop			; (mov r8, r8)
     778:	00000215 	.word	0x00000215
     77c:	00000491 	.word	0x00000491
     780:	0000025d 	.word	0x0000025d

00000784 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
     784:	b590      	push	{r4, r7, lr}
     786:	b08b      	sub	sp, #44	; 0x2c
     788:	af02      	add	r7, sp, #8
     78a:	6078      	str	r0, [r7, #4]
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	681b      	ldr	r3, [r3, #0]
     790:	221f      	movs	r2, #31
     792:	18bc      	adds	r4, r7, r2
     794:	0018      	movs	r0, r3
     796:	4b1b      	ldr	r3, [pc, #108]	; (804 <at25dfx_chip_wake+0x80>)
     798:	4798      	blx	r3
     79a:	0003      	movs	r3, r0
     79c:	7023      	strb	r3, [r4, #0]
	if (status == STATUS_BUSY) {
     79e:	231f      	movs	r3, #31
     7a0:	18fb      	adds	r3, r7, r3
     7a2:	781b      	ldrb	r3, [r3, #0]
     7a4:	2b05      	cmp	r3, #5
     7a6:	d103      	bne.n	7b0 <at25dfx_chip_wake+0x2c>
		return status;
     7a8:	231f      	movs	r3, #31
     7aa:	18fb      	adds	r3, r7, r3
     7ac:	781b      	ldrb	r3, [r3, #0]
     7ae:	e024      	b.n	7fa <at25dfx_chip_wake+0x76>
	}

	cmd.opcode = AT25DFX_COMMAND_WAKE;
     7b0:	230c      	movs	r3, #12
     7b2:	18fb      	adds	r3, r7, r3
     7b4:	22ab      	movs	r2, #171	; 0xab
     7b6:	701a      	strb	r2, [r3, #0]
	cmd.command_size = 1;
     7b8:	230c      	movs	r3, #12
     7ba:	18fb      	adds	r3, r7, r3
     7bc:	2201      	movs	r2, #1
     7be:	705a      	strb	r2, [r3, #1]
	cmd.length = 0;
     7c0:	230c      	movs	r3, #12
     7c2:	18fb      	adds	r3, r7, r3
     7c4:	2200      	movs	r2, #0
     7c6:	819a      	strh	r2, [r3, #12]

	// Init to avoid warnings with -Os
	cmd.address = (at25dfx_address_t)NULL;
     7c8:	230c      	movs	r3, #12
     7ca:	18fb      	adds	r3, r7, r3
     7cc:	2200      	movs	r2, #0
     7ce:	605a      	str	r2, [r3, #4]
	cmd.data.tx = NULL;
     7d0:	230c      	movs	r3, #12
     7d2:	18fb      	adds	r3, r7, r3
     7d4:	2200      	movs	r2, #0
     7d6:	609a      	str	r2, [r3, #8]

	_at25dfx_chip_issue_write_command_wait(chip, cmd);
     7d8:	230c      	movs	r3, #12
     7da:	18fb      	adds	r3, r7, r3
     7dc:	6878      	ldr	r0, [r7, #4]
     7de:	466a      	mov	r2, sp
     7e0:	68d9      	ldr	r1, [r3, #12]
     7e2:	6011      	str	r1, [r2, #0]
     7e4:	6819      	ldr	r1, [r3, #0]
     7e6:	685a      	ldr	r2, [r3, #4]
     7e8:	689b      	ldr	r3, [r3, #8]
     7ea:	4c07      	ldr	r4, [pc, #28]	; (808 <at25dfx_chip_wake+0x84>)
     7ec:	47a0      	blx	r4

	_at25dfx_spi_unlock(chip->spi);
     7ee:	687b      	ldr	r3, [r7, #4]
     7f0:	681b      	ldr	r3, [r3, #0]
     7f2:	0018      	movs	r0, r3
     7f4:	4b05      	ldr	r3, [pc, #20]	; (80c <at25dfx_chip_wake+0x88>)
     7f6:	4798      	blx	r3

	return STATUS_OK;
     7f8:	2300      	movs	r3, #0
     7fa:	0018      	movs	r0, r3
     7fc:	46bd      	mov	sp, r7
     7fe:	b009      	add	sp, #36	; 0x24
     800:	bd90      	pop	{r4, r7, pc}
     802:	46c0      	nop			; (mov r8, r8)
     804:	00000215 	.word	0x00000215
     808:	00000491 	.word	0x00000491
     80c:	0000025d 	.word	0x0000025d

00000810 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     810:	b580      	push	{r7, lr}
     812:	b082      	sub	sp, #8
     814:	af00      	add	r7, sp, #0
     816:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     818:	687b      	ldr	r3, [r7, #4]
     81a:	2280      	movs	r2, #128	; 0x80
     81c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     81e:	687b      	ldr	r3, [r7, #4]
     820:	2200      	movs	r2, #0
     822:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     824:	687b      	ldr	r3, [r7, #4]
     826:	2201      	movs	r2, #1
     828:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     82a:	687b      	ldr	r3, [r7, #4]
     82c:	2200      	movs	r2, #0
     82e:	70da      	strb	r2, [r3, #3]
}
     830:	46c0      	nop			; (mov r8, r8)
     832:	46bd      	mov	sp, r7
     834:	b002      	add	sp, #8
     836:	bd80      	pop	{r7, pc}

00000838 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     838:	b580      	push	{r7, lr}
     83a:	b082      	sub	sp, #8
     83c:	af00      	add	r7, sp, #0
     83e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     840:	687b      	ldr	r3, [r7, #4]
     842:	2200      	movs	r2, #0
     844:	701a      	strb	r2, [r3, #0]
}
     846:	46c0      	nop			; (mov r8, r8)
     848:	46bd      	mov	sp, r7
     84a:	b002      	add	sp, #8
     84c:	bd80      	pop	{r7, pc}
	...

00000850 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     850:	b580      	push	{r7, lr}
     852:	b082      	sub	sp, #8
     854:	af00      	add	r7, sp, #0
     856:	0002      	movs	r2, r0
     858:	6039      	str	r1, [r7, #0]
     85a:	1dfb      	adds	r3, r7, #7
     85c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     85e:	1dfb      	adds	r3, r7, #7
     860:	781b      	ldrb	r3, [r3, #0]
     862:	2b01      	cmp	r3, #1
     864:	d00a      	beq.n	87c <system_apb_clock_set_mask+0x2c>
     866:	2b02      	cmp	r3, #2
     868:	d00f      	beq.n	88a <system_apb_clock_set_mask+0x3a>
     86a:	2b00      	cmp	r3, #0
     86c:	d114      	bne.n	898 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     86e:	4b0e      	ldr	r3, [pc, #56]	; (8a8 <system_apb_clock_set_mask+0x58>)
     870:	4a0d      	ldr	r2, [pc, #52]	; (8a8 <system_apb_clock_set_mask+0x58>)
     872:	6991      	ldr	r1, [r2, #24]
     874:	683a      	ldr	r2, [r7, #0]
     876:	430a      	orrs	r2, r1
     878:	619a      	str	r2, [r3, #24]
			break;
     87a:	e00f      	b.n	89c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     87c:	4b0a      	ldr	r3, [pc, #40]	; (8a8 <system_apb_clock_set_mask+0x58>)
     87e:	4a0a      	ldr	r2, [pc, #40]	; (8a8 <system_apb_clock_set_mask+0x58>)
     880:	69d1      	ldr	r1, [r2, #28]
     882:	683a      	ldr	r2, [r7, #0]
     884:	430a      	orrs	r2, r1
     886:	61da      	str	r2, [r3, #28]
			break;
     888:	e008      	b.n	89c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     88a:	4b07      	ldr	r3, [pc, #28]	; (8a8 <system_apb_clock_set_mask+0x58>)
     88c:	4a06      	ldr	r2, [pc, #24]	; (8a8 <system_apb_clock_set_mask+0x58>)
     88e:	6a11      	ldr	r1, [r2, #32]
     890:	683a      	ldr	r2, [r7, #0]
     892:	430a      	orrs	r2, r1
     894:	621a      	str	r2, [r3, #32]
			break;
     896:	e001      	b.n	89c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     898:	2317      	movs	r3, #23
     89a:	e000      	b.n	89e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     89c:	2300      	movs	r3, #0
}
     89e:	0018      	movs	r0, r3
     8a0:	46bd      	mov	sp, r7
     8a2:	b002      	add	sp, #8
     8a4:	bd80      	pop	{r7, pc}
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	40000400 	.word	0x40000400

000008ac <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
     8ac:	b580      	push	{r7, lr}
     8ae:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     8b0:	4b05      	ldr	r3, [pc, #20]	; (8c8 <system_is_debugger_present+0x1c>)
     8b2:	789b      	ldrb	r3, [r3, #2]
     8b4:	b2db      	uxtb	r3, r3
     8b6:	001a      	movs	r2, r3
     8b8:	2302      	movs	r3, #2
     8ba:	4013      	ands	r3, r2
     8bc:	1e5a      	subs	r2, r3, #1
     8be:	4193      	sbcs	r3, r2
     8c0:	b2db      	uxtb	r3, r3
}
     8c2:	0018      	movs	r0, r3
     8c4:	46bd      	mov	sp, r7
     8c6:	bd80      	pop	{r7, pc}
     8c8:	41002000 	.word	0x41002000

000008cc <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     8cc:	b580      	push	{r7, lr}
     8ce:	b084      	sub	sp, #16
     8d0:	af00      	add	r7, sp, #0
     8d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8d4:	687b      	ldr	r3, [r7, #4]
     8d6:	681b      	ldr	r3, [r3, #0]
     8d8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     8da:	68fb      	ldr	r3, [r7, #12]
     8dc:	7e1b      	ldrb	r3, [r3, #24]
     8de:	b2db      	uxtb	r3, r3
     8e0:	001a      	movs	r2, r3
     8e2:	2302      	movs	r3, #2
     8e4:	4013      	ands	r3, r2
     8e6:	1e5a      	subs	r2, r3, #1
     8e8:	4193      	sbcs	r3, r2
     8ea:	b2db      	uxtb	r3, r3
}
     8ec:	0018      	movs	r0, r3
     8ee:	46bd      	mov	sp, r7
     8f0:	b004      	add	sp, #16
     8f2:	bd80      	pop	{r7, pc}

000008f4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     8f4:	b580      	push	{r7, lr}
     8f6:	b084      	sub	sp, #16
     8f8:	af00      	add	r7, sp, #0
     8fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8fc:	687b      	ldr	r3, [r7, #4]
     8fe:	681b      	ldr	r3, [r3, #0]
     900:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     902:	68fb      	ldr	r3, [r7, #12]
     904:	7e1b      	ldrb	r3, [r3, #24]
     906:	b2db      	uxtb	r3, r3
     908:	001a      	movs	r2, r3
     90a:	2301      	movs	r3, #1
     90c:	4013      	ands	r3, r2
     90e:	1e5a      	subs	r2, r3, #1
     910:	4193      	sbcs	r3, r2
     912:	b2db      	uxtb	r3, r3
}
     914:	0018      	movs	r0, r3
     916:	46bd      	mov	sp, r7
     918:	b004      	add	sp, #16
     91a:	bd80      	pop	{r7, pc}

0000091c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     91c:	b580      	push	{r7, lr}
     91e:	b084      	sub	sp, #16
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     924:	687b      	ldr	r3, [r7, #4]
     926:	681b      	ldr	r3, [r3, #0]
     928:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     92a:	68fb      	ldr	r3, [r7, #12]
     92c:	7e1b      	ldrb	r3, [r3, #24]
     92e:	b2db      	uxtb	r3, r3
     930:	001a      	movs	r2, r3
     932:	2304      	movs	r3, #4
     934:	4013      	ands	r3, r2
     936:	1e5a      	subs	r2, r3, #1
     938:	4193      	sbcs	r3, r2
     93a:	b2db      	uxtb	r3, r3
}
     93c:	0018      	movs	r0, r3
     93e:	46bd      	mov	sp, r7
     940:	b004      	add	sp, #16
     942:	bd80      	pop	{r7, pc}

00000944 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     944:	b580      	push	{r7, lr}
     946:	b084      	sub	sp, #16
     948:	af00      	add	r7, sp, #0
     94a:	6078      	str	r0, [r7, #4]
     94c:	000a      	movs	r2, r1
     94e:	1cbb      	adds	r3, r7, #2
     950:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     952:	687b      	ldr	r3, [r7, #4]
     954:	681b      	ldr	r3, [r3, #0]
     956:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     958:	687b      	ldr	r3, [r7, #4]
     95a:	0018      	movs	r0, r3
     95c:	4b0a      	ldr	r3, [pc, #40]	; (988 <spi_write+0x44>)
     95e:	4798      	blx	r3
     960:	0003      	movs	r3, r0
     962:	001a      	movs	r2, r3
     964:	2301      	movs	r3, #1
     966:	4053      	eors	r3, r2
     968:	b2db      	uxtb	r3, r3
     96a:	2b00      	cmp	r3, #0
     96c:	d001      	beq.n	972 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     96e:	2305      	movs	r3, #5
     970:	e006      	b.n	980 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     972:	1cbb      	adds	r3, r7, #2
     974:	881b      	ldrh	r3, [r3, #0]
     976:	05db      	lsls	r3, r3, #23
     978:	0dda      	lsrs	r2, r3, #23
     97a:	68fb      	ldr	r3, [r7, #12]
     97c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     97e:	2300      	movs	r3, #0
}
     980:	0018      	movs	r0, r3
     982:	46bd      	mov	sp, r7
     984:	b004      	add	sp, #16
     986:	bd80      	pop	{r7, pc}
     988:	000008f5 	.word	0x000008f5

0000098c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     98c:	b580      	push	{r7, lr}
     98e:	b084      	sub	sp, #16
     990:	af00      	add	r7, sp, #0
     992:	6078      	str	r0, [r7, #4]
     994:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     996:	687b      	ldr	r3, [r7, #4]
     998:	681b      	ldr	r3, [r3, #0]
     99a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     99c:	687b      	ldr	r3, [r7, #4]
     99e:	0018      	movs	r0, r3
     9a0:	4b1b      	ldr	r3, [pc, #108]	; (a10 <spi_read+0x84>)
     9a2:	4798      	blx	r3
     9a4:	0003      	movs	r3, r0
     9a6:	001a      	movs	r2, r3
     9a8:	2301      	movs	r3, #1
     9aa:	4053      	eors	r3, r2
     9ac:	b2db      	uxtb	r3, r3
     9ae:	2b00      	cmp	r3, #0
     9b0:	d001      	beq.n	9b6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     9b2:	2310      	movs	r3, #16
     9b4:	e027      	b.n	a06 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     9b6:	230f      	movs	r3, #15
     9b8:	18fb      	adds	r3, r7, r3
     9ba:	2200      	movs	r2, #0
     9bc:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     9be:	68bb      	ldr	r3, [r7, #8]
     9c0:	8b5b      	ldrh	r3, [r3, #26]
     9c2:	b29b      	uxth	r3, r3
     9c4:	001a      	movs	r2, r3
     9c6:	2304      	movs	r3, #4
     9c8:	4013      	ands	r3, r2
     9ca:	d006      	beq.n	9da <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     9cc:	230f      	movs	r3, #15
     9ce:	18fb      	adds	r3, r7, r3
     9d0:	221e      	movs	r2, #30
     9d2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     9d4:	68bb      	ldr	r3, [r7, #8]
     9d6:	2204      	movs	r2, #4
     9d8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	799b      	ldrb	r3, [r3, #6]
     9de:	2b01      	cmp	r3, #1
     9e0:	d108      	bne.n	9f4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     9e2:	68bb      	ldr	r3, [r7, #8]
     9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     9e6:	b29b      	uxth	r3, r3
     9e8:	05db      	lsls	r3, r3, #23
     9ea:	0ddb      	lsrs	r3, r3, #23
     9ec:	b29a      	uxth	r2, r3
     9ee:	683b      	ldr	r3, [r7, #0]
     9f0:	801a      	strh	r2, [r3, #0]
     9f2:	e005      	b.n	a00 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     9f4:	68bb      	ldr	r3, [r7, #8]
     9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     9f8:	b2db      	uxtb	r3, r3
     9fa:	b29a      	uxth	r2, r3
     9fc:	683b      	ldr	r3, [r7, #0]
     9fe:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     a00:	230f      	movs	r3, #15
     a02:	18fb      	adds	r3, r7, r3
     a04:	781b      	ldrb	r3, [r3, #0]
}
     a06:	0018      	movs	r0, r3
     a08:	46bd      	mov	sp, r7
     a0a:	b004      	add	sp, #16
     a0c:	bd80      	pop	{r7, pc}
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	0000091d 	.word	0x0000091d

00000a14 <_spi_clear_tx_complete_flag>:
 *
 * \param[in]  module  Pointer to the software instance struct
 */
static void _spi_clear_tx_complete_flag(
		struct spi_module *const module)
{
     a14:	b580      	push	{r7, lr}
     a16:	b084      	sub	sp, #16
     a18:	af00      	add	r7, sp, #0
     a1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	681b      	ldr	r3, [r3, #0]
     a20:	60fb      	str	r3, [r7, #12]

	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
     a22:	68fb      	ldr	r3, [r7, #12]
     a24:	2202      	movs	r2, #2
     a26:	761a      	strb	r2, [r3, #24]
}
     a28:	46c0      	nop			; (mov r8, r8)
     a2a:	46bd      	mov	sp, r7
     a2c:	b004      	add	sp, #16
     a2e:	bd80      	pop	{r7, pc}

00000a30 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
     a30:	b590      	push	{r4, r7, lr}
     a32:	b093      	sub	sp, #76	; 0x4c
     a34:	af00      	add	r7, sp, #0
     a36:	6078      	str	r0, [r7, #4]
     a38:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a3a:	687b      	ldr	r3, [r7, #4]
     a3c:	681b      	ldr	r3, [r3, #0]
     a3e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
     a40:	687b      	ldr	r3, [r7, #4]
     a42:	681b      	ldr	r3, [r3, #0]
     a44:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
     a46:	231c      	movs	r3, #28
     a48:	18fb      	adds	r3, r7, r3
     a4a:	0018      	movs	r0, r3
     a4c:	4b85      	ldr	r3, [pc, #532]	; (c64 <_spi_set_config+0x234>)
     a4e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a50:	231c      	movs	r3, #28
     a52:	18fb      	adds	r3, r7, r3
     a54:	2200      	movs	r2, #0
     a56:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
     a58:	683b      	ldr	r3, [r7, #0]
     a5a:	781b      	ldrb	r3, [r3, #0]
     a5c:	2b00      	cmp	r3, #0
     a5e:	d103      	bne.n	a68 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a60:	231c      	movs	r3, #28
     a62:	18fb      	adds	r3, r7, r3
     a64:	2200      	movs	r2, #0
     a66:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
     a68:	683b      	ldr	r3, [r7, #0]
     a6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
     a6c:	230c      	movs	r3, #12
     a6e:	18fb      	adds	r3, r7, r3
     a70:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
     a72:	683b      	ldr	r3, [r7, #0]
     a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
     a76:	230c      	movs	r3, #12
     a78:	18fb      	adds	r3, r7, r3
     a7a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
     a7c:	683b      	ldr	r3, [r7, #0]
     a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
     a80:	230c      	movs	r3, #12
     a82:	18fb      	adds	r3, r7, r3
     a84:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
     a86:	683b      	ldr	r3, [r7, #0]
     a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
     a8a:	230c      	movs	r3, #12
     a8c:	18fb      	adds	r3, r7, r3
     a8e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     a90:	2347      	movs	r3, #71	; 0x47
     a92:	18fb      	adds	r3, r7, r3
     a94:	2200      	movs	r2, #0
     a96:	701a      	strb	r2, [r3, #0]
     a98:	e02c      	b.n	af4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a9a:	2347      	movs	r3, #71	; 0x47
     a9c:	18fb      	adds	r3, r7, r3
     a9e:	781a      	ldrb	r2, [r3, #0]
     aa0:	230c      	movs	r3, #12
     aa2:	18fb      	adds	r3, r7, r3
     aa4:	0092      	lsls	r2, r2, #2
     aa6:	58d3      	ldr	r3, [r2, r3]
     aa8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
     aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     aac:	2b00      	cmp	r3, #0
     aae:	d109      	bne.n	ac4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ab0:	2347      	movs	r3, #71	; 0x47
     ab2:	18fb      	adds	r3, r7, r3
     ab4:	781a      	ldrb	r2, [r3, #0]
     ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ab8:	0011      	movs	r1, r2
     aba:	0018      	movs	r0, r3
     abc:	4b6a      	ldr	r3, [pc, #424]	; (c68 <_spi_set_config+0x238>)
     abe:	4798      	blx	r3
     ac0:	0003      	movs	r3, r0
     ac2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
     ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ac6:	3301      	adds	r3, #1
     ac8:	d00d      	beq.n	ae6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     acc:	b2da      	uxtb	r2, r3
     ace:	231c      	movs	r3, #28
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
     ad6:	0c1b      	lsrs	r3, r3, #16
     ad8:	b2db      	uxtb	r3, r3
     ada:	221c      	movs	r2, #28
     adc:	18ba      	adds	r2, r7, r2
     ade:	0011      	movs	r1, r2
     ae0:	0018      	movs	r0, r3
     ae2:	4b62      	ldr	r3, [pc, #392]	; (c6c <_spi_set_config+0x23c>)
     ae4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
     ae6:	2347      	movs	r3, #71	; 0x47
     ae8:	18fb      	adds	r3, r7, r3
     aea:	781a      	ldrb	r2, [r3, #0]
     aec:	2347      	movs	r3, #71	; 0x47
     aee:	18fb      	adds	r3, r7, r3
     af0:	3201      	adds	r2, #1
     af2:	701a      	strb	r2, [r3, #0]
     af4:	2347      	movs	r3, #71	; 0x47
     af6:	18fb      	adds	r3, r7, r3
     af8:	781b      	ldrb	r3, [r3, #0]
     afa:	2b03      	cmp	r3, #3
     afc:	d9cd      	bls.n	a9a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
     afe:	683b      	ldr	r3, [r7, #0]
     b00:	781a      	ldrb	r2, [r3, #0]
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
     b06:	683b      	ldr	r3, [r7, #0]
     b08:	7c1a      	ldrb	r2, [r3, #16]
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
     b0e:	683b      	ldr	r3, [r7, #0]
     b10:	7c9a      	ldrb	r2, [r3, #18]
     b12:	687b      	ldr	r3, [r7, #4]
     b14:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
     b16:	683b      	ldr	r3, [r7, #0]
     b18:	7d1a      	ldrb	r2, [r3, #20]
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
     b1e:	230a      	movs	r3, #10
     b20:	18fb      	adds	r3, r7, r3
     b22:	2200      	movs	r2, #0
     b24:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
     b26:	2300      	movs	r3, #0
     b28:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
     b2a:	2300      	movs	r3, #0
     b2c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
     b2e:	683b      	ldr	r3, [r7, #0]
     b30:	781b      	ldrb	r3, [r3, #0]
     b32:	2b01      	cmp	r3, #1
     b34:	d129      	bne.n	b8a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b36:	687b      	ldr	r3, [r7, #4]
     b38:	681b      	ldr	r3, [r3, #0]
     b3a:	0018      	movs	r0, r3
     b3c:	4b4c      	ldr	r3, [pc, #304]	; (c70 <_spi_set_config+0x240>)
     b3e:	4798      	blx	r3
     b40:	0003      	movs	r3, r0
     b42:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     b46:	3314      	adds	r3, #20
     b48:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b4c:	b2db      	uxtb	r3, r3
     b4e:	0018      	movs	r0, r3
     b50:	4b48      	ldr	r3, [pc, #288]	; (c74 <_spi_set_config+0x244>)
     b52:	4798      	blx	r3
     b54:	0003      	movs	r3, r0
     b56:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
     b58:	683b      	ldr	r3, [r7, #0]
     b5a:	699b      	ldr	r3, [r3, #24]
     b5c:	2223      	movs	r2, #35	; 0x23
     b5e:	18bc      	adds	r4, r7, r2
     b60:	220a      	movs	r2, #10
     b62:	18ba      	adds	r2, r7, r2
     b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
     b66:	0018      	movs	r0, r3
     b68:	4b43      	ldr	r3, [pc, #268]	; (c78 <_spi_set_config+0x248>)
     b6a:	4798      	blx	r3
     b6c:	0003      	movs	r3, r0
     b6e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
     b70:	2323      	movs	r3, #35	; 0x23
     b72:	18fb      	adds	r3, r7, r3
     b74:	781b      	ldrb	r3, [r3, #0]
     b76:	2b00      	cmp	r3, #0
     b78:	d001      	beq.n	b7e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
     b7a:	2317      	movs	r3, #23
     b7c:	e06d      	b.n	c5a <_spi_set_config+0x22a>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
     b7e:	230a      	movs	r3, #10
     b80:	18fb      	adds	r3, r7, r3
     b82:	881b      	ldrh	r3, [r3, #0]
     b84:	b2da      	uxtb	r2, r3
     b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     b88:	731a      	strb	r2, [r3, #12]
	}
# endif
# if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     b8a:	683b      	ldr	r3, [r7, #0]
     b8c:	781b      	ldrb	r3, [r3, #0]
     b8e:	2b00      	cmp	r3, #0
     b90:	d11a      	bne.n	bc8 <_spi_set_config+0x198>
		/* Set frame format */
		ctrla = config->mode_specific.slave.frame_format;
     b92:	683b      	ldr	r3, [r7, #0]
     b94:	699b      	ldr	r3, [r3, #24]
     b96:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Set address mode */
		ctrlb = config->mode_specific.slave.address_mode;
     b98:	683b      	ldr	r3, [r7, #0]
     b9a:	8b9b      	ldrh	r3, [r3, #28]
     b9c:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Set address and address mask*/
		spi_module->ADDR.reg |=
     b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     ba2:	683a      	ldr	r2, [r7, #0]
     ba4:	7f92      	ldrb	r2, [r2, #30]
     ba6:	0011      	movs	r1, r2
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     ba8:	683a      	ldr	r2, [r7, #0]
     baa:	7fd2      	ldrb	r2, [r2, #31]
     bac:	0412      	lsls	r2, r2, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     bae:	430a      	orrs	r2, r1
		spi_module->ADDR.reg |=
     bb0:	431a      	orrs	r2, r3
     bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     bb4:	625a      	str	r2, [r3, #36]	; 0x24

		if (config->mode_specific.slave.preload_enable) {
     bb6:	683b      	ldr	r3, [r7, #0]
     bb8:	2220      	movs	r2, #32
     bba:	5c9b      	ldrb	r3, [r3, r2]
     bbc:	2b00      	cmp	r3, #0
     bbe:	d003      	beq.n	bc8 <_spi_set_config+0x198>
			/* Enable pre-loading of shift register */
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bc2:	2240      	movs	r2, #64	; 0x40
     bc4:	4313      	orrs	r3, r2
     bc6:	63bb      	str	r3, [r7, #56]	; 0x38
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
     bc8:	683b      	ldr	r3, [r7, #0]
     bca:	685b      	ldr	r3, [r3, #4]
     bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     bce:	4313      	orrs	r3, r2
     bd0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
     bd2:	683b      	ldr	r3, [r7, #0]
     bd4:	689b      	ldr	r3, [r3, #8]
     bd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     bd8:	4313      	orrs	r3, r2
     bda:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
     bdc:	683b      	ldr	r3, [r7, #0]
     bde:	68db      	ldr	r3, [r3, #12]
     be0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
     be2:	4313      	orrs	r3, r2
     be4:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
     be6:	683b      	ldr	r3, [r7, #0]
     be8:	7c1b      	ldrb	r3, [r3, #16]
     bea:	001a      	movs	r2, r3
     bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     bee:	4313      	orrs	r3, r2
     bf0:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     bf2:	683b      	ldr	r3, [r7, #0]
     bf4:	7c5b      	ldrb	r3, [r3, #17]
     bf6:	2b00      	cmp	r3, #0
     bf8:	d103      	bne.n	c02 <_spi_set_config+0x1d2>
     bfa:	4b20      	ldr	r3, [pc, #128]	; (c7c <_spi_set_config+0x24c>)
     bfc:	4798      	blx	r3
     bfe:	1e03      	subs	r3, r0, #0
     c00:	d003      	beq.n	c0a <_spi_set_config+0x1da>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c04:	2280      	movs	r2, #128	; 0x80
     c06:	4313      	orrs	r3, r2
     c08:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
     c0a:	683b      	ldr	r3, [r7, #0]
     c0c:	7c9b      	ldrb	r3, [r3, #18]
     c0e:	2b00      	cmp	r3, #0
     c10:	d004      	beq.n	c1c <_spi_set_config+0x1ec>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c14:	2280      	movs	r2, #128	; 0x80
     c16:	0292      	lsls	r2, r2, #10
     c18:	4313      	orrs	r3, r2
     c1a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
     c1c:	683b      	ldr	r3, [r7, #0]
     c1e:	7cdb      	ldrb	r3, [r3, #19]
     c20:	2b00      	cmp	r3, #0
     c22:	d004      	beq.n	c2e <_spi_set_config+0x1fe>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c26:	2280      	movs	r2, #128	; 0x80
     c28:	0092      	lsls	r2, r2, #2
     c2a:	4313      	orrs	r3, r2
     c2c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
     c2e:	683b      	ldr	r3, [r7, #0]
     c30:	7d1b      	ldrb	r3, [r3, #20]
     c32:	2b00      	cmp	r3, #0
     c34:	d004      	beq.n	c40 <_spi_set_config+0x210>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c38:	2280      	movs	r2, #128	; 0x80
     c3a:	0192      	lsls	r2, r2, #6
     c3c:	4313      	orrs	r3, r2
     c3e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
     c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c42:	681a      	ldr	r2, [r3, #0]
     c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     c46:	431a      	orrs	r2, r3
     c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c4a:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
     c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c4e:	685a      	ldr	r2, [r3, #4]
     c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     c52:	431a      	orrs	r2, r3
     c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
     c56:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     c58:	2300      	movs	r3, #0
}
     c5a:	0018      	movs	r0, r3
     c5c:	46bd      	mov	sp, r7
     c5e:	b013      	add	sp, #76	; 0x4c
     c60:	bd90      	pop	{r4, r7, pc}
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	00000811 	.word	0x00000811
     c68:	0000204d 	.word	0x0000204d
     c6c:	00003b1d 	.word	0x00003b1d
     c70:	00002209 	.word	0x00002209
     c74:	00003955 	.word	0x00003955
     c78:	00001d83 	.word	0x00001d83
     c7c:	000008ad 	.word	0x000008ad

00000c80 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     c80:	b590      	push	{r4, r7, lr}
     c82:	b08b      	sub	sp, #44	; 0x2c
     c84:	af00      	add	r7, sp, #0
     c86:	60f8      	str	r0, [r7, #12]
     c88:	60b9      	str	r1, [r7, #8]
     c8a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     c8c:	68fb      	ldr	r3, [r7, #12]
     c8e:	68ba      	ldr	r2, [r7, #8]
     c90:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
     c92:	68fb      	ldr	r3, [r7, #12]
     c94:	681b      	ldr	r3, [r3, #0]
     c96:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     c98:	6a3b      	ldr	r3, [r7, #32]
     c9a:	681b      	ldr	r3, [r3, #0]
     c9c:	2202      	movs	r2, #2
     c9e:	4013      	ands	r3, r2
     ca0:	d001      	beq.n	ca6 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
     ca2:	231c      	movs	r3, #28
     ca4:	e0a6      	b.n	df4 <spi_init+0x174>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     ca6:	6a3b      	ldr	r3, [r7, #32]
     ca8:	681b      	ldr	r3, [r3, #0]
     caa:	2201      	movs	r2, #1
     cac:	4013      	ands	r3, r2
     cae:	d001      	beq.n	cb4 <spi_init+0x34>
		return STATUS_BUSY;
     cb0:	2305      	movs	r3, #5
     cb2:	e09f      	b.n	df4 <spi_init+0x174>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     cb4:	68fb      	ldr	r3, [r7, #12]
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	0018      	movs	r0, r3
     cba:	4b50      	ldr	r3, [pc, #320]	; (dfc <spi_init+0x17c>)
     cbc:	4798      	blx	r3
     cbe:	0003      	movs	r3, r0
     cc0:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     cc2:	69fb      	ldr	r3, [r7, #28]
     cc4:	3302      	adds	r3, #2
     cc6:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     cc8:	69fb      	ldr	r3, [r7, #28]
     cca:	3314      	adds	r3, #20
     ccc:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     cce:	2201      	movs	r2, #1
     cd0:	69bb      	ldr	r3, [r7, #24]
     cd2:	409a      	lsls	r2, r3
     cd4:	0013      	movs	r3, r2
     cd6:	0019      	movs	r1, r3
     cd8:	2002      	movs	r0, #2
     cda:	4b49      	ldr	r3, [pc, #292]	; (e00 <spi_init+0x180>)
     cdc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
     cde:	2310      	movs	r3, #16
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	0018      	movs	r0, r3
     ce4:	4b47      	ldr	r3, [pc, #284]	; (e04 <spi_init+0x184>)
     ce6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
     ce8:	687b      	ldr	r3, [r7, #4]
     cea:	2224      	movs	r2, #36	; 0x24
     cec:	5c9a      	ldrb	r2, [r3, r2]
     cee:	2310      	movs	r3, #16
     cf0:	18fb      	adds	r3, r7, r3
     cf2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     cf4:	697b      	ldr	r3, [r7, #20]
     cf6:	b2db      	uxtb	r3, r3
     cf8:	2210      	movs	r2, #16
     cfa:	18ba      	adds	r2, r7, r2
     cfc:	0011      	movs	r1, r2
     cfe:	0018      	movs	r0, r3
     d00:	4b41      	ldr	r3, [pc, #260]	; (e08 <spi_init+0x188>)
     d02:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d04:	697b      	ldr	r3, [r7, #20]
     d06:	b2db      	uxtb	r3, r3
     d08:	0018      	movs	r0, r3
     d0a:	4b40      	ldr	r3, [pc, #256]	; (e0c <spi_init+0x18c>)
     d0c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	2224      	movs	r2, #36	; 0x24
     d12:	5c9b      	ldrb	r3, [r3, r2]
     d14:	2100      	movs	r1, #0
     d16:	0018      	movs	r0, r3
     d18:	4b3d      	ldr	r3, [pc, #244]	; (e10 <spi_init+0x190>)
     d1a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	781b      	ldrb	r3, [r3, #0]
     d20:	2b01      	cmp	r3, #1
     d22:	d105      	bne.n	d30 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     d24:	6a3b      	ldr	r3, [r7, #32]
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	220c      	movs	r2, #12
     d2a:	431a      	orrs	r2, r3
     d2c:	6a3b      	ldr	r3, [r7, #32]
     d2e:	601a      	str	r2, [r3, #0]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	781b      	ldrb	r3, [r3, #0]
     d34:	2b00      	cmp	r3, #0
     d36:	d105      	bne.n	d44 <spi_init+0xc4>
		/* Set the SERCOM in SPI slave mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     d38:	6a3b      	ldr	r3, [r7, #32]
     d3a:	681b      	ldr	r3, [r3, #0]
     d3c:	2208      	movs	r2, #8
     d3e:	431a      	orrs	r2, r3
     d40:	6a3b      	ldr	r3, [r7, #32]
     d42:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     d44:	2327      	movs	r3, #39	; 0x27
     d46:	18fb      	adds	r3, r7, r3
     d48:	2200      	movs	r2, #0
     d4a:	701a      	strb	r2, [r3, #0]
     d4c:	e010      	b.n	d70 <spi_init+0xf0>
		module->callback[i]        = NULL;
     d4e:	2327      	movs	r3, #39	; 0x27
     d50:	18fb      	adds	r3, r7, r3
     d52:	781b      	ldrb	r3, [r3, #0]
     d54:	68fa      	ldr	r2, [r7, #12]
     d56:	3302      	adds	r3, #2
     d58:	009b      	lsls	r3, r3, #2
     d5a:	18d3      	adds	r3, r2, r3
     d5c:	3304      	adds	r3, #4
     d5e:	2200      	movs	r2, #0
     d60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
     d62:	2327      	movs	r3, #39	; 0x27
     d64:	18fb      	adds	r3, r7, r3
     d66:	781a      	ldrb	r2, [r3, #0]
     d68:	2327      	movs	r3, #39	; 0x27
     d6a:	18fb      	adds	r3, r7, r3
     d6c:	3201      	adds	r2, #1
     d6e:	701a      	strb	r2, [r3, #0]
     d70:	2327      	movs	r3, #39	; 0x27
     d72:	18fb      	adds	r3, r7, r3
     d74:	781b      	ldrb	r3, [r3, #0]
     d76:	2b06      	cmp	r3, #6
     d78:	d9e9      	bls.n	d4e <spi_init+0xce>
	}
	module->tx_buffer_ptr              = NULL;
     d7a:	68fb      	ldr	r3, [r7, #12]
     d7c:	2200      	movs	r2, #0
     d7e:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
     d80:	68fb      	ldr	r3, [r7, #12]
     d82:	2200      	movs	r2, #0
     d84:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
     d86:	68fb      	ldr	r3, [r7, #12]
     d88:	2200      	movs	r2, #0
     d8a:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
     d8c:	68fb      	ldr	r3, [r7, #12]
     d8e:	2200      	movs	r2, #0
     d90:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
     d92:	68fb      	ldr	r3, [r7, #12]
     d94:	2236      	movs	r2, #54	; 0x36
     d96:	2100      	movs	r1, #0
     d98:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
     d9a:	68fb      	ldr	r3, [r7, #12]
     d9c:	2237      	movs	r2, #55	; 0x37
     d9e:	2100      	movs	r1, #0
     da0:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
     da2:	68fb      	ldr	r3, [r7, #12]
     da4:	2238      	movs	r2, #56	; 0x38
     da6:	2100      	movs	r1, #0
     da8:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
     daa:	68fb      	ldr	r3, [r7, #12]
     dac:	2203      	movs	r2, #3
     dae:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
     db0:	68fb      	ldr	r3, [r7, #12]
     db2:	2200      	movs	r2, #0
     db4:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
     db6:	68fb      	ldr	r3, [r7, #12]
     db8:	681b      	ldr	r3, [r3, #0]
     dba:	2213      	movs	r2, #19
     dbc:	18bc      	adds	r4, r7, r2
     dbe:	0018      	movs	r0, r3
     dc0:	4b0e      	ldr	r3, [pc, #56]	; (dfc <spi_init+0x17c>)
     dc2:	4798      	blx	r3
     dc4:	0003      	movs	r3, r0
     dc6:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
     dc8:	4a12      	ldr	r2, [pc, #72]	; (e14 <spi_init+0x194>)
     dca:	2313      	movs	r3, #19
     dcc:	18fb      	adds	r3, r7, r3
     dce:	781b      	ldrb	r3, [r3, #0]
     dd0:	0011      	movs	r1, r2
     dd2:	0018      	movs	r0, r3
     dd4:	4b10      	ldr	r3, [pc, #64]	; (e18 <spi_init+0x198>)
     dd6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     dd8:	2313      	movs	r3, #19
     dda:	18fb      	adds	r3, r7, r3
     ddc:	781a      	ldrb	r2, [r3, #0]
     dde:	4b0f      	ldr	r3, [pc, #60]	; (e1c <spi_init+0x19c>)
     de0:	0092      	lsls	r2, r2, #2
     de2:	68f9      	ldr	r1, [r7, #12]
     de4:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
     de6:	687a      	ldr	r2, [r7, #4]
     de8:	68fb      	ldr	r3, [r7, #12]
     dea:	0011      	movs	r1, r2
     dec:	0018      	movs	r0, r3
     dee:	4b0c      	ldr	r3, [pc, #48]	; (e20 <spi_init+0x1a0>)
     df0:	4798      	blx	r3
     df2:	0003      	movs	r3, r0
}
     df4:	0018      	movs	r0, r3
     df6:	46bd      	mov	sp, r7
     df8:	b00b      	add	sp, #44	; 0x2c
     dfa:	bd90      	pop	{r4, r7, pc}
     dfc:	00002209 	.word	0x00002209
     e00:	00000851 	.word	0x00000851
     e04:	00000839 	.word	0x00000839
     e08:	00003831 	.word	0x00003831
     e0c:	00003875 	.word	0x00003875
     e10:	00001fc1 	.word	0x00001fc1
     e14:	0000145d 	.word	0x0000145d
     e18:	00002e51 	.word	0x00002e51
     e1c:	2000012c 	.word	0x2000012c
     e20:	00000a31 	.word	0x00000a31

00000e24 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
     e24:	b590      	push	{r4, r7, lr}
     e26:	b089      	sub	sp, #36	; 0x24
     e28:	af00      	add	r7, sp, #0
     e2a:	60f8      	str	r0, [r7, #12]
     e2c:	60b9      	str	r1, [r7, #8]
     e2e:	0019      	movs	r1, r3
     e30:	1dbb      	adds	r3, r7, #6
     e32:	801a      	strh	r2, [r3, #0]
     e34:	1d3b      	adds	r3, r7, #4
     e36:	1c0a      	adds	r2, r1, #0
     e38:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     e3a:	68fb      	ldr	r3, [r7, #12]
     e3c:	2238      	movs	r2, #56	; 0x38
     e3e:	5c9b      	ldrb	r3, [r3, r2]
     e40:	b2db      	uxtb	r3, r3
     e42:	2b05      	cmp	r3, #5
     e44:	d101      	bne.n	e4a <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     e46:	2305      	movs	r3, #5
     e48:	e0b8      	b.n	fbc <spi_read_buffer_wait+0x198>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
     e4a:	1dbb      	adds	r3, r7, #6
     e4c:	881b      	ldrh	r3, [r3, #0]
     e4e:	2b00      	cmp	r3, #0
     e50:	d101      	bne.n	e56 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
     e52:	2317      	movs	r3, #23
     e54:	e0b2      	b.n	fbc <spi_read_buffer_wait+0x198>
	}

	if (!(module->receiver_enabled)) {
     e56:	68fb      	ldr	r3, [r7, #12]
     e58:	79db      	ldrb	r3, [r3, #7]
     e5a:	2201      	movs	r2, #1
     e5c:	4053      	eors	r3, r2
     e5e:	b2db      	uxtb	r3, r3
     e60:	2b00      	cmp	r3, #0
     e62:	d001      	beq.n	e68 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
     e64:	231c      	movs	r3, #28
     e66:	e0a9      	b.n	fbc <spi_read_buffer_wait+0x198>
	}
#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
     e68:	68fb      	ldr	r3, [r7, #12]
     e6a:	795b      	ldrb	r3, [r3, #5]
     e6c:	2b00      	cmp	r3, #0
     e6e:	d109      	bne.n	e84 <spi_read_buffer_wait+0x60>
     e70:	68fb      	ldr	r3, [r7, #12]
     e72:	0018      	movs	r0, r3
     e74:	4b53      	ldr	r3, [pc, #332]	; (fc4 <spi_read_buffer_wait+0x1a0>)
     e76:	4798      	blx	r3
     e78:	1e03      	subs	r3, r0, #0
     e7a:	d003      	beq.n	e84 <spi_read_buffer_wait+0x60>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
     e7c:	68fb      	ldr	r3, [r7, #12]
     e7e:	0018      	movs	r0, r3
     e80:	4b51      	ldr	r3, [pc, #324]	; (fc8 <spi_read_buffer_wait+0x1a4>)
     e82:	4798      	blx	r3
	}
#  endif
	uint16_t rx_pos = 0;
     e84:	231e      	movs	r3, #30
     e86:	18fb      	adds	r3, r7, r3
     e88:	2200      	movs	r2, #0
     e8a:	801a      	strh	r2, [r3, #0]

	while (length--) {
     e8c:	e08d      	b.n	faa <spi_read_buffer_wait+0x186>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
     e8e:	68fb      	ldr	r3, [r7, #12]
     e90:	795b      	ldrb	r3, [r3, #5]
     e92:	2b01      	cmp	r3, #1
     e94:	d112      	bne.n	ebc <spi_read_buffer_wait+0x98>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
     e96:	46c0      	nop			; (mov r8, r8)
     e98:	68fb      	ldr	r3, [r7, #12]
     e9a:	0018      	movs	r0, r3
     e9c:	4b4b      	ldr	r3, [pc, #300]	; (fcc <spi_read_buffer_wait+0x1a8>)
     e9e:	4798      	blx	r3
     ea0:	0003      	movs	r3, r0
     ea2:	001a      	movs	r2, r3
     ea4:	2301      	movs	r3, #1
     ea6:	4053      	eors	r3, r2
     ea8:	b2db      	uxtb	r3, r3
     eaa:	2b00      	cmp	r3, #0
     eac:	d1f4      	bne.n	e98 <spi_read_buffer_wait+0x74>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
     eae:	1d3b      	adds	r3, r7, #4
     eb0:	881a      	ldrh	r2, [r3, #0]
     eb2:	68fb      	ldr	r3, [r7, #12]
     eb4:	0011      	movs	r1, r2
     eb6:	0018      	movs	r0, r3
     eb8:	4b45      	ldr	r3, [pc, #276]	; (fd0 <spi_read_buffer_wait+0x1ac>)
     eba:	4798      	blx	r3
		}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
     ebc:	68fb      	ldr	r3, [r7, #12]
     ebe:	795b      	ldrb	r3, [r3, #5]
     ec0:	2b00      	cmp	r3, #0
     ec2:	d12a      	bne.n	f1a <spi_read_buffer_wait+0xf6>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ec4:	2300      	movs	r3, #0
     ec6:	61bb      	str	r3, [r7, #24]
     ec8:	e008      	b.n	edc <spi_read_buffer_wait+0xb8>
				if (spi_is_ready_to_read(module)) {
     eca:	68fb      	ldr	r3, [r7, #12]
     ecc:	0018      	movs	r0, r3
     ece:	4b41      	ldr	r3, [pc, #260]	; (fd4 <spi_read_buffer_wait+0x1b0>)
     ed0:	4798      	blx	r3
     ed2:	1e03      	subs	r3, r0, #0
     ed4:	d107      	bne.n	ee6 <spi_read_buffer_wait+0xc2>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
     ed6:	69bb      	ldr	r3, [r7, #24]
     ed8:	3301      	adds	r3, #1
     eda:	61bb      	str	r3, [r7, #24]
     edc:	69bb      	ldr	r3, [r7, #24]
     ede:	4a3e      	ldr	r2, [pc, #248]	; (fd8 <spi_read_buffer_wait+0x1b4>)
     ee0:	4293      	cmp	r3, r2
     ee2:	d9f2      	bls.n	eca <spi_read_buffer_wait+0xa6>
     ee4:	e000      	b.n	ee8 <spi_read_buffer_wait+0xc4>
					break;
     ee6:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
     ee8:	68fb      	ldr	r3, [r7, #12]
     eea:	0018      	movs	r0, r3
     eec:	4b35      	ldr	r3, [pc, #212]	; (fc4 <spi_read_buffer_wait+0x1a0>)
     eee:	4798      	blx	r3
     ef0:	1e03      	subs	r3, r0, #0
     ef2:	d005      	beq.n	f00 <spi_read_buffer_wait+0xdc>
				_spi_clear_tx_complete_flag(module);
     ef4:	68fb      	ldr	r3, [r7, #12]
     ef6:	0018      	movs	r0, r3
     ef8:	4b33      	ldr	r3, [pc, #204]	; (fc8 <spi_read_buffer_wait+0x1a4>)
     efa:	4798      	blx	r3
				return STATUS_ABORTED;
     efc:	2304      	movs	r3, #4
     efe:	e05d      	b.n	fbc <spi_read_buffer_wait+0x198>
			}

			if (!spi_is_ready_to_read(module)) {
     f00:	68fb      	ldr	r3, [r7, #12]
     f02:	0018      	movs	r0, r3
     f04:	4b33      	ldr	r3, [pc, #204]	; (fd4 <spi_read_buffer_wait+0x1b0>)
     f06:	4798      	blx	r3
     f08:	0003      	movs	r3, r0
     f0a:	001a      	movs	r2, r3
     f0c:	2301      	movs	r3, #1
     f0e:	4053      	eors	r3, r2
     f10:	b2db      	uxtb	r3, r3
     f12:	2b00      	cmp	r3, #0
     f14:	d001      	beq.n	f1a <spi_read_buffer_wait+0xf6>
				/* Not ready to read data within timeout period */
				return STATUS_ERR_TIMEOUT;
     f16:	2312      	movs	r3, #18
     f18:	e050      	b.n	fbc <spi_read_buffer_wait+0x198>
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	68fb      	ldr	r3, [r7, #12]
     f1e:	0018      	movs	r0, r3
     f20:	4b2c      	ldr	r3, [pc, #176]	; (fd4 <spi_read_buffer_wait+0x1b0>)
     f22:	4798      	blx	r3
     f24:	0003      	movs	r3, r0
     f26:	001a      	movs	r2, r3
     f28:	2301      	movs	r3, #1
     f2a:	4053      	eors	r3, r2
     f2c:	b2db      	uxtb	r3, r3
     f2e:	2b00      	cmp	r3, #0
     f30:	d1f4      	bne.n	f1c <spi_read_buffer_wait+0xf8>
		}

		uint16_t received_data = 0;
     f32:	2314      	movs	r3, #20
     f34:	18fb      	adds	r3, r7, r3
     f36:	2200      	movs	r2, #0
     f38:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
     f3a:	2317      	movs	r3, #23
     f3c:	18fc      	adds	r4, r7, r3
     f3e:	2314      	movs	r3, #20
     f40:	18fa      	adds	r2, r7, r3
     f42:	68fb      	ldr	r3, [r7, #12]
     f44:	0011      	movs	r1, r2
     f46:	0018      	movs	r0, r3
     f48:	4b24      	ldr	r3, [pc, #144]	; (fdc <spi_read_buffer_wait+0x1b8>)
     f4a:	4798      	blx	r3
     f4c:	0003      	movs	r3, r0
     f4e:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
     f50:	2317      	movs	r3, #23
     f52:	18fb      	adds	r3, r7, r3
     f54:	781b      	ldrb	r3, [r3, #0]
     f56:	2b00      	cmp	r3, #0
     f58:	d003      	beq.n	f62 <spi_read_buffer_wait+0x13e>
			/* Overflow, abort */
			return retval;
     f5a:	2317      	movs	r3, #23
     f5c:	18fb      	adds	r3, r7, r3
     f5e:	781b      	ldrb	r3, [r3, #0]
     f60:	e02c      	b.n	fbc <spi_read_buffer_wait+0x198>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
     f62:	231e      	movs	r3, #30
     f64:	18fb      	adds	r3, r7, r3
     f66:	881b      	ldrh	r3, [r3, #0]
     f68:	221e      	movs	r2, #30
     f6a:	18ba      	adds	r2, r7, r2
     f6c:	1c59      	adds	r1, r3, #1
     f6e:	8011      	strh	r1, [r2, #0]
     f70:	001a      	movs	r2, r3
     f72:	68bb      	ldr	r3, [r7, #8]
     f74:	189b      	adds	r3, r3, r2
     f76:	2214      	movs	r2, #20
     f78:	18ba      	adds	r2, r7, r2
     f7a:	8812      	ldrh	r2, [r2, #0]
     f7c:	b2d2      	uxtb	r2, r2
     f7e:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f80:	68fb      	ldr	r3, [r7, #12]
     f82:	799b      	ldrb	r3, [r3, #6]
     f84:	2b01      	cmp	r3, #1
     f86:	d110      	bne.n	faa <spi_read_buffer_wait+0x186>
			rx_data[rx_pos++] = (received_data >> 8);
     f88:	231e      	movs	r3, #30
     f8a:	18fb      	adds	r3, r7, r3
     f8c:	881b      	ldrh	r3, [r3, #0]
     f8e:	221e      	movs	r2, #30
     f90:	18ba      	adds	r2, r7, r2
     f92:	1c59      	adds	r1, r3, #1
     f94:	8011      	strh	r1, [r2, #0]
     f96:	001a      	movs	r2, r3
     f98:	68bb      	ldr	r3, [r7, #8]
     f9a:	189b      	adds	r3, r3, r2
     f9c:	2214      	movs	r2, #20
     f9e:	18ba      	adds	r2, r7, r2
     fa0:	8812      	ldrh	r2, [r2, #0]
     fa2:	0a12      	lsrs	r2, r2, #8
     fa4:	b292      	uxth	r2, r2
     fa6:	b2d2      	uxtb	r2, r2
     fa8:	701a      	strb	r2, [r3, #0]
	while (length--) {
     faa:	1dbb      	adds	r3, r7, #6
     fac:	881b      	ldrh	r3, [r3, #0]
     fae:	1dba      	adds	r2, r7, #6
     fb0:	1e59      	subs	r1, r3, #1
     fb2:	8011      	strh	r1, [r2, #0]
     fb4:	2b00      	cmp	r3, #0
     fb6:	d000      	beq.n	fba <spi_read_buffer_wait+0x196>
     fb8:	e769      	b.n	e8e <spi_read_buffer_wait+0x6a>
		}
	}

	return STATUS_OK;
     fba:	2300      	movs	r3, #0
}
     fbc:	0018      	movs	r0, r3
     fbe:	46bd      	mov	sp, r7
     fc0:	b009      	add	sp, #36	; 0x24
     fc2:	bd90      	pop	{r4, r7, pc}
     fc4:	000008cd 	.word	0x000008cd
     fc8:	00000a15 	.word	0x00000a15
     fcc:	000008f5 	.word	0x000008f5
     fd0:	00000945 	.word	0x00000945
     fd4:	0000091d 	.word	0x0000091d
     fd8:	00002710 	.word	0x00002710
     fdc:	0000098d 	.word	0x0000098d

00000fe0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     fe0:	b580      	push	{r7, lr}
     fe2:	b08a      	sub	sp, #40	; 0x28
     fe4:	af00      	add	r7, sp, #0
     fe6:	60f8      	str	r0, [r7, #12]
     fe8:	60b9      	str	r1, [r7, #8]
     fea:	1dbb      	adds	r3, r7, #6
     fec:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
     fee:	68fb      	ldr	r3, [r7, #12]
     ff0:	2238      	movs	r2, #56	; 0x38
     ff2:	5c9b      	ldrb	r3, [r3, r2]
     ff4:	b2db      	uxtb	r3, r3
     ff6:	2b05      	cmp	r3, #5
     ff8:	d101      	bne.n	ffe <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
     ffa:	2305      	movs	r3, #5
     ffc:	e170      	b.n	12e0 <spi_write_buffer_wait+0x300>
	}
#  endif

	if (length == 0) {
     ffe:	1dbb      	adds	r3, r7, #6
    1000:	881b      	ldrh	r3, [r3, #0]
    1002:	2b00      	cmp	r3, #0
    1004:	d101      	bne.n	100a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    1006:	2317      	movs	r3, #23
    1008:	e16a      	b.n	12e0 <spi_write_buffer_wait+0x300>
	}

#  if CONF_SPI_SLAVE_ENABLE == true
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
    100a:	68fb      	ldr	r3, [r7, #12]
    100c:	795b      	ldrb	r3, [r3, #5]
    100e:	2b00      	cmp	r3, #0
    1010:	d109      	bne.n	1026 <spi_write_buffer_wait+0x46>
    1012:	68fb      	ldr	r3, [r7, #12]
    1014:	0018      	movs	r0, r3
    1016:	4bb4      	ldr	r3, [pc, #720]	; (12e8 <spi_write_buffer_wait+0x308>)
    1018:	4798      	blx	r3
    101a:	1e03      	subs	r3, r0, #0
    101c:	d003      	beq.n	1026 <spi_write_buffer_wait+0x46>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
    101e:	68fb      	ldr	r3, [r7, #12]
    1020:	0018      	movs	r0, r3
    1022:	4bb2      	ldr	r3, [pc, #712]	; (12ec <spi_write_buffer_wait+0x30c>)
    1024:	4798      	blx	r3
	}
#  endif

	uint16_t tx_pos = 0;
    1026:	2326      	movs	r3, #38	; 0x26
    1028:	18fb      	adds	r3, r7, r3
    102a:	2200      	movs	r2, #0
    102c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    102e:	2324      	movs	r3, #36	; 0x24
    1030:	18fb      	adds	r3, r7, r3
    1032:	1dba      	adds	r2, r7, #6
    1034:	8812      	ldrh	r2, [r2, #0]
    1036:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    1038:	e0fe      	b.n	1238 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
		/* Start timeout period for slave */
		if (module->mode == SPI_MODE_SLAVE) {
    103a:	68fb      	ldr	r3, [r7, #12]
    103c:	795b      	ldrb	r3, [r3, #5]
    103e:	2b00      	cmp	r3, #0
    1040:	d12a      	bne.n	1098 <spi_write_buffer_wait+0xb8>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1042:	2300      	movs	r3, #0
    1044:	623b      	str	r3, [r7, #32]
    1046:	e008      	b.n	105a <spi_write_buffer_wait+0x7a>
				if (spi_is_ready_to_write(module)) {
    1048:	68fb      	ldr	r3, [r7, #12]
    104a:	0018      	movs	r0, r3
    104c:	4ba8      	ldr	r3, [pc, #672]	; (12f0 <spi_write_buffer_wait+0x310>)
    104e:	4798      	blx	r3
    1050:	1e03      	subs	r3, r0, #0
    1052:	d107      	bne.n	1064 <spi_write_buffer_wait+0x84>
			for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1054:	6a3b      	ldr	r3, [r7, #32]
    1056:	3301      	adds	r3, #1
    1058:	623b      	str	r3, [r7, #32]
    105a:	6a3b      	ldr	r3, [r7, #32]
    105c:	4aa5      	ldr	r2, [pc, #660]	; (12f4 <spi_write_buffer_wait+0x314>)
    105e:	4293      	cmp	r3, r2
    1060:	d9f2      	bls.n	1048 <spi_write_buffer_wait+0x68>
    1062:	e000      	b.n	1066 <spi_write_buffer_wait+0x86>
					break;
    1064:	46c0      	nop			; (mov r8, r8)
				}
			}
			/* Check if master has ended the transaction */
			if (spi_is_write_complete(module)) {
    1066:	68fb      	ldr	r3, [r7, #12]
    1068:	0018      	movs	r0, r3
    106a:	4b9f      	ldr	r3, [pc, #636]	; (12e8 <spi_write_buffer_wait+0x308>)
    106c:	4798      	blx	r3
    106e:	1e03      	subs	r3, r0, #0
    1070:	d005      	beq.n	107e <spi_write_buffer_wait+0x9e>
				_spi_clear_tx_complete_flag(module);
    1072:	68fb      	ldr	r3, [r7, #12]
    1074:	0018      	movs	r0, r3
    1076:	4b9d      	ldr	r3, [pc, #628]	; (12ec <spi_write_buffer_wait+0x30c>)
    1078:	4798      	blx	r3
				return STATUS_ABORTED;
    107a:	2304      	movs	r3, #4
    107c:	e130      	b.n	12e0 <spi_write_buffer_wait+0x300>
			}

			if (!spi_is_ready_to_write(module)) {
    107e:	68fb      	ldr	r3, [r7, #12]
    1080:	0018      	movs	r0, r3
    1082:	4b9b      	ldr	r3, [pc, #620]	; (12f0 <spi_write_buffer_wait+0x310>)
    1084:	4798      	blx	r3
    1086:	0003      	movs	r3, r0
    1088:	001a      	movs	r2, r3
    108a:	2301      	movs	r3, #1
    108c:	4053      	eors	r3, r2
    108e:	b2db      	uxtb	r3, r3
    1090:	2b00      	cmp	r3, #0
    1092:	d001      	beq.n	1098 <spi_write_buffer_wait+0xb8>
				/* Not ready to write data within timeout period */
				return STATUS_ERR_TIMEOUT;
    1094:	2312      	movs	r3, #18
    1096:	e123      	b.n	12e0 <spi_write_buffer_wait+0x300>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    1098:	46c0      	nop			; (mov r8, r8)
    109a:	68fb      	ldr	r3, [r7, #12]
    109c:	0018      	movs	r0, r3
    109e:	4b94      	ldr	r3, [pc, #592]	; (12f0 <spi_write_buffer_wait+0x310>)
    10a0:	4798      	blx	r3
    10a2:	0003      	movs	r3, r0
    10a4:	001a      	movs	r2, r3
    10a6:	2301      	movs	r3, #1
    10a8:	4053      	eors	r3, r2
    10aa:	b2db      	uxtb	r3, r3
    10ac:	2b00      	cmp	r3, #0
    10ae:	d1f4      	bne.n	109a <spi_write_buffer_wait+0xba>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    10b0:	2326      	movs	r3, #38	; 0x26
    10b2:	18fb      	adds	r3, r7, r3
    10b4:	881b      	ldrh	r3, [r3, #0]
    10b6:	2226      	movs	r2, #38	; 0x26
    10b8:	18ba      	adds	r2, r7, r2
    10ba:	1c59      	adds	r1, r3, #1
    10bc:	8011      	strh	r1, [r2, #0]
    10be:	001a      	movs	r2, r3
    10c0:	68bb      	ldr	r3, [r7, #8]
    10c2:	189b      	adds	r3, r3, r2
    10c4:	781a      	ldrb	r2, [r3, #0]
    10c6:	231e      	movs	r3, #30
    10c8:	18fb      	adds	r3, r7, r3
    10ca:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    10cc:	68fb      	ldr	r3, [r7, #12]
    10ce:	799b      	ldrb	r3, [r3, #6]
    10d0:	2b01      	cmp	r3, #1
    10d2:	d115      	bne.n	1100 <spi_write_buffer_wait+0x120>
			data_to_send |= (tx_data[tx_pos++] << 8);
    10d4:	2326      	movs	r3, #38	; 0x26
    10d6:	18fb      	adds	r3, r7, r3
    10d8:	881b      	ldrh	r3, [r3, #0]
    10da:	2226      	movs	r2, #38	; 0x26
    10dc:	18ba      	adds	r2, r7, r2
    10de:	1c59      	adds	r1, r3, #1
    10e0:	8011      	strh	r1, [r2, #0]
    10e2:	001a      	movs	r2, r3
    10e4:	68bb      	ldr	r3, [r7, #8]
    10e6:	189b      	adds	r3, r3, r2
    10e8:	781b      	ldrb	r3, [r3, #0]
    10ea:	021b      	lsls	r3, r3, #8
    10ec:	b21a      	sxth	r2, r3
    10ee:	231e      	movs	r3, #30
    10f0:	18fb      	adds	r3, r7, r3
    10f2:	2100      	movs	r1, #0
    10f4:	5e5b      	ldrsh	r3, [r3, r1]
    10f6:	4313      	orrs	r3, r2
    10f8:	b21a      	sxth	r2, r3
    10fa:	231e      	movs	r3, #30
    10fc:	18fb      	adds	r3, r7, r3
    10fe:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    1100:	231e      	movs	r3, #30
    1102:	18fb      	adds	r3, r7, r3
    1104:	881a      	ldrh	r2, [r3, #0]
    1106:	68fb      	ldr	r3, [r7, #12]
    1108:	0011      	movs	r1, r2
    110a:	0018      	movs	r0, r3
    110c:	4b7a      	ldr	r3, [pc, #488]	; (12f8 <spi_write_buffer_wait+0x318>)
    110e:	4798      	blx	r3

		if (module->receiver_enabled) {
    1110:	68fb      	ldr	r3, [r7, #12]
    1112:	79db      	ldrb	r3, [r3, #7]
    1114:	2224      	movs	r2, #36	; 0x24
    1116:	18ba      	adds	r2, r7, r2
    1118:	2124      	movs	r1, #36	; 0x24
    111a:	1879      	adds	r1, r7, r1
    111c:	8809      	ldrh	r1, [r1, #0]
    111e:	8011      	strh	r1, [r2, #0]
    1120:	2b00      	cmp	r3, #0
    1122:	d100      	bne.n	1126 <spi_write_buffer_wait+0x146>
    1124:	e088      	b.n	1238 <spi_write_buffer_wait+0x258>
#  if CONF_SPI_SLAVE_ENABLE == true
			/* Start timeout period for slave */
			if (module->mode == SPI_MODE_SLAVE) {
    1126:	68fb      	ldr	r3, [r7, #12]
    1128:	795b      	ldrb	r3, [r3, #5]
    112a:	2b00      	cmp	r3, #0
    112c:	d000      	beq.n	1130 <spi_write_buffer_wait+0x150>
    112e:	e069      	b.n	1204 <spi_write_buffer_wait+0x224>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    1130:	2300      	movs	r3, #0
    1132:	61bb      	str	r3, [r7, #24]
    1134:	e047      	b.n	11c6 <spi_write_buffer_wait+0x1e6>
					if (length && spi_is_ready_to_write(module)) {
    1136:	1dbb      	adds	r3, r7, #6
    1138:	881b      	ldrh	r3, [r3, #0]
    113a:	2b00      	cmp	r3, #0
    113c:	d03a      	beq.n	11b4 <spi_write_buffer_wait+0x1d4>
    113e:	68fb      	ldr	r3, [r7, #12]
    1140:	0018      	movs	r0, r3
    1142:	4b6b      	ldr	r3, [pc, #428]	; (12f0 <spi_write_buffer_wait+0x310>)
    1144:	4798      	blx	r3
    1146:	1e03      	subs	r3, r0, #0
    1148:	d034      	beq.n	11b4 <spi_write_buffer_wait+0x1d4>
						data_to_send = tx_data[tx_pos++];
    114a:	2326      	movs	r3, #38	; 0x26
    114c:	18fb      	adds	r3, r7, r3
    114e:	881b      	ldrh	r3, [r3, #0]
    1150:	2226      	movs	r2, #38	; 0x26
    1152:	18ba      	adds	r2, r7, r2
    1154:	1c59      	adds	r1, r3, #1
    1156:	8011      	strh	r1, [r2, #0]
    1158:	001a      	movs	r2, r3
    115a:	68bb      	ldr	r3, [r7, #8]
    115c:	189b      	adds	r3, r3, r2
    115e:	781a      	ldrb	r2, [r3, #0]
    1160:	231e      	movs	r3, #30
    1162:	18fb      	adds	r3, r7, r3
    1164:	801a      	strh	r2, [r3, #0]
						/* If 9-bit data, get next byte to send from the buffer */
						if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1166:	68fb      	ldr	r3, [r7, #12]
    1168:	799b      	ldrb	r3, [r3, #6]
    116a:	2b01      	cmp	r3, #1
    116c:	d115      	bne.n	119a <spi_write_buffer_wait+0x1ba>
							data_to_send |= (tx_data[tx_pos++] << 8);
    116e:	2326      	movs	r3, #38	; 0x26
    1170:	18fb      	adds	r3, r7, r3
    1172:	881b      	ldrh	r3, [r3, #0]
    1174:	2226      	movs	r2, #38	; 0x26
    1176:	18ba      	adds	r2, r7, r2
    1178:	1c59      	adds	r1, r3, #1
    117a:	8011      	strh	r1, [r2, #0]
    117c:	001a      	movs	r2, r3
    117e:	68bb      	ldr	r3, [r7, #8]
    1180:	189b      	adds	r3, r3, r2
    1182:	781b      	ldrb	r3, [r3, #0]
    1184:	021b      	lsls	r3, r3, #8
    1186:	b21a      	sxth	r2, r3
    1188:	231e      	movs	r3, #30
    118a:	18fb      	adds	r3, r7, r3
    118c:	2100      	movs	r1, #0
    118e:	5e5b      	ldrsh	r3, [r3, r1]
    1190:	4313      	orrs	r3, r2
    1192:	b21a      	sxth	r2, r3
    1194:	231e      	movs	r3, #30
    1196:	18fb      	adds	r3, r7, r3
    1198:	801a      	strh	r2, [r3, #0]
						}

						/* Write the data to send */
						spi_write(module, data_to_send);
    119a:	231e      	movs	r3, #30
    119c:	18fb      	adds	r3, r7, r3
    119e:	881a      	ldrh	r2, [r3, #0]
    11a0:	68fb      	ldr	r3, [r7, #12]
    11a2:	0011      	movs	r1, r2
    11a4:	0018      	movs	r0, r3
    11a6:	4b54      	ldr	r3, [pc, #336]	; (12f8 <spi_write_buffer_wait+0x318>)
    11a8:	4798      	blx	r3
						length--;
    11aa:	1dbb      	adds	r3, r7, #6
    11ac:	881a      	ldrh	r2, [r3, #0]
    11ae:	1dbb      	adds	r3, r7, #6
    11b0:	3a01      	subs	r2, #1
    11b2:	801a      	strh	r2, [r3, #0]
					}
					if (spi_is_ready_to_read(module)) {
    11b4:	68fb      	ldr	r3, [r7, #12]
    11b6:	0018      	movs	r0, r3
    11b8:	4b50      	ldr	r3, [pc, #320]	; (12fc <spi_write_buffer_wait+0x31c>)
    11ba:	4798      	blx	r3
    11bc:	1e03      	subs	r3, r0, #0
    11be:	d107      	bne.n	11d0 <spi_write_buffer_wait+0x1f0>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    11c0:	69bb      	ldr	r3, [r7, #24]
    11c2:	3301      	adds	r3, #1
    11c4:	61bb      	str	r3, [r7, #24]
    11c6:	69bb      	ldr	r3, [r7, #24]
    11c8:	4a4a      	ldr	r2, [pc, #296]	; (12f4 <spi_write_buffer_wait+0x314>)
    11ca:	4293      	cmp	r3, r2
    11cc:	d9b3      	bls.n	1136 <spi_write_buffer_wait+0x156>
    11ce:	e000      	b.n	11d2 <spi_write_buffer_wait+0x1f2>
						break;
    11d0:	46c0      	nop			; (mov r8, r8)
					}
				}

				/* Check if master has ended the transaction */
				if (spi_is_write_complete(module)) {
    11d2:	68fb      	ldr	r3, [r7, #12]
    11d4:	0018      	movs	r0, r3
    11d6:	4b44      	ldr	r3, [pc, #272]	; (12e8 <spi_write_buffer_wait+0x308>)
    11d8:	4798      	blx	r3
    11da:	1e03      	subs	r3, r0, #0
    11dc:	d005      	beq.n	11ea <spi_write_buffer_wait+0x20a>
					_spi_clear_tx_complete_flag(module);
    11de:	68fb      	ldr	r3, [r7, #12]
    11e0:	0018      	movs	r0, r3
    11e2:	4b42      	ldr	r3, [pc, #264]	; (12ec <spi_write_buffer_wait+0x30c>)
    11e4:	4798      	blx	r3
					return STATUS_ABORTED;
    11e6:	2304      	movs	r3, #4
    11e8:	e07a      	b.n	12e0 <spi_write_buffer_wait+0x300>
				}

				if (!spi_is_ready_to_read(module)) {
    11ea:	68fb      	ldr	r3, [r7, #12]
    11ec:	0018      	movs	r0, r3
    11ee:	4b43      	ldr	r3, [pc, #268]	; (12fc <spi_write_buffer_wait+0x31c>)
    11f0:	4798      	blx	r3
    11f2:	0003      	movs	r3, r0
    11f4:	001a      	movs	r2, r3
    11f6:	2301      	movs	r3, #1
    11f8:	4053      	eors	r3, r2
    11fa:	b2db      	uxtb	r3, r3
    11fc:	2b00      	cmp	r3, #0
    11fe:	d001      	beq.n	1204 <spi_write_buffer_wait+0x224>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    1200:	2312      	movs	r3, #18
    1202:	e06d      	b.n	12e0 <spi_write_buffer_wait+0x300>
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    1204:	46c0      	nop			; (mov r8, r8)
    1206:	68fb      	ldr	r3, [r7, #12]
    1208:	0018      	movs	r0, r3
    120a:	4b3c      	ldr	r3, [pc, #240]	; (12fc <spi_write_buffer_wait+0x31c>)
    120c:	4798      	blx	r3
    120e:	0003      	movs	r3, r0
    1210:	001a      	movs	r2, r3
    1212:	2301      	movs	r3, #1
    1214:	4053      	eors	r3, r2
    1216:	b2db      	uxtb	r3, r3
    1218:	2b00      	cmp	r3, #0
    121a:	d1f4      	bne.n	1206 <spi_write_buffer_wait+0x226>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    121c:	2312      	movs	r3, #18
    121e:	18fa      	adds	r2, r7, r3
    1220:	68fb      	ldr	r3, [r7, #12]
    1222:	0011      	movs	r1, r2
    1224:	0018      	movs	r0, r3
    1226:	4b36      	ldr	r3, [pc, #216]	; (1300 <spi_write_buffer_wait+0x320>)
    1228:	4798      	blx	r3
			flush_length--;
    122a:	2324      	movs	r3, #36	; 0x24
    122c:	18fb      	adds	r3, r7, r3
    122e:	881a      	ldrh	r2, [r3, #0]
    1230:	2324      	movs	r3, #36	; 0x24
    1232:	18fb      	adds	r3, r7, r3
    1234:	3a01      	subs	r2, #1
    1236:	801a      	strh	r2, [r3, #0]
	while (length--) {
    1238:	1dbb      	adds	r3, r7, #6
    123a:	881b      	ldrh	r3, [r3, #0]
    123c:	1dba      	adds	r2, r7, #6
    123e:	1e59      	subs	r1, r3, #1
    1240:	8011      	strh	r1, [r2, #0]
    1242:	2b00      	cmp	r3, #0
    1244:	d000      	beq.n	1248 <spi_write_buffer_wait+0x268>
    1246:	e6f8      	b.n	103a <spi_write_buffer_wait+0x5a>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	795b      	ldrb	r3, [r3, #5]
    124c:	2b01      	cmp	r3, #1
    124e:	d10b      	bne.n	1268 <spi_write_buffer_wait+0x288>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    1250:	46c0      	nop			; (mov r8, r8)
    1252:	68fb      	ldr	r3, [r7, #12]
    1254:	0018      	movs	r0, r3
    1256:	4b24      	ldr	r3, [pc, #144]	; (12e8 <spi_write_buffer_wait+0x308>)
    1258:	4798      	blx	r3
    125a:	0003      	movs	r3, r0
    125c:	001a      	movs	r2, r3
    125e:	2301      	movs	r3, #1
    1260:	4053      	eors	r3, r2
    1262:	b2db      	uxtb	r3, r3
    1264:	2b00      	cmp	r3, #0
    1266:	d1f4      	bne.n	1252 <spi_write_buffer_wait+0x272>
		}
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (module->mode == SPI_MODE_SLAVE) {
    1268:	68fb      	ldr	r3, [r7, #12]
    126a:	795b      	ldrb	r3, [r3, #5]
    126c:	2b00      	cmp	r3, #0
    126e:	d136      	bne.n	12de <spi_write_buffer_wait+0x2fe>
		if (module->receiver_enabled) {
    1270:	68fb      	ldr	r3, [r7, #12]
    1272:	79db      	ldrb	r3, [r3, #7]
    1274:	2b00      	cmp	r3, #0
    1276:	d032      	beq.n	12de <spi_write_buffer_wait+0x2fe>
			while (flush_length) {
    1278:	e02c      	b.n	12d4 <spi_write_buffer_wait+0x2f4>
				/* Start timeout period for slave */
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    127a:	2300      	movs	r3, #0
    127c:	617b      	str	r3, [r7, #20]
    127e:	e008      	b.n	1292 <spi_write_buffer_wait+0x2b2>
					if (spi_is_ready_to_read(module)) {
    1280:	68fb      	ldr	r3, [r7, #12]
    1282:	0018      	movs	r0, r3
    1284:	4b1d      	ldr	r3, [pc, #116]	; (12fc <spi_write_buffer_wait+0x31c>)
    1286:	4798      	blx	r3
    1288:	1e03      	subs	r3, r0, #0
    128a:	d107      	bne.n	129c <spi_write_buffer_wait+0x2bc>
				for (uint32_t i = 0; i <= SPI_TIMEOUT; i++) {
    128c:	697b      	ldr	r3, [r7, #20]
    128e:	3301      	adds	r3, #1
    1290:	617b      	str	r3, [r7, #20]
    1292:	697b      	ldr	r3, [r7, #20]
    1294:	4a17      	ldr	r2, [pc, #92]	; (12f4 <spi_write_buffer_wait+0x314>)
    1296:	4293      	cmp	r3, r2
    1298:	d9f2      	bls.n	1280 <spi_write_buffer_wait+0x2a0>
    129a:	e000      	b.n	129e <spi_write_buffer_wait+0x2be>
						break;
    129c:	46c0      	nop			; (mov r8, r8)
					}
				}
				if (!spi_is_ready_to_read(module)) {
    129e:	68fb      	ldr	r3, [r7, #12]
    12a0:	0018      	movs	r0, r3
    12a2:	4b16      	ldr	r3, [pc, #88]	; (12fc <spi_write_buffer_wait+0x31c>)
    12a4:	4798      	blx	r3
    12a6:	0003      	movs	r3, r0
    12a8:	001a      	movs	r2, r3
    12aa:	2301      	movs	r3, #1
    12ac:	4053      	eors	r3, r2
    12ae:	b2db      	uxtb	r3, r3
    12b0:	2b00      	cmp	r3, #0
    12b2:	d001      	beq.n	12b8 <spi_write_buffer_wait+0x2d8>
					/* Not ready to read data within timeout period */
					return STATUS_ERR_TIMEOUT;
    12b4:	2312      	movs	r3, #18
    12b6:	e013      	b.n	12e0 <spi_write_buffer_wait+0x300>
				}
				/* Flush read buffer */
				uint16_t flush;
				spi_read(module, &flush);
    12b8:	2310      	movs	r3, #16
    12ba:	18fa      	adds	r2, r7, r3
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	0011      	movs	r1, r2
    12c0:	0018      	movs	r0, r3
    12c2:	4b0f      	ldr	r3, [pc, #60]	; (1300 <spi_write_buffer_wait+0x320>)
    12c4:	4798      	blx	r3
				flush_length--;
    12c6:	2324      	movs	r3, #36	; 0x24
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	881a      	ldrh	r2, [r3, #0]
    12cc:	2324      	movs	r3, #36	; 0x24
    12ce:	18fb      	adds	r3, r7, r3
    12d0:	3a01      	subs	r2, #1
    12d2:	801a      	strh	r2, [r3, #0]
			while (flush_length) {
    12d4:	2324      	movs	r3, #36	; 0x24
    12d6:	18fb      	adds	r3, r7, r3
    12d8:	881b      	ldrh	r3, [r3, #0]
    12da:	2b00      	cmp	r3, #0
    12dc:	d1cd      	bne.n	127a <spi_write_buffer_wait+0x29a>
			}
		}
	}
#  endif
	return STATUS_OK;
    12de:	2300      	movs	r3, #0
}
    12e0:	0018      	movs	r0, r3
    12e2:	46bd      	mov	sp, r7
    12e4:	b00a      	add	sp, #40	; 0x28
    12e6:	bd80      	pop	{r7, pc}
    12e8:	000008cd 	.word	0x000008cd
    12ec:	00000a15 	.word	0x00000a15
    12f0:	000008f5 	.word	0x000008f5
    12f4:	00002710 	.word	0x00002710
    12f8:	00000945 	.word	0x00000945
    12fc:	0000091d 	.word	0x0000091d
    1300:	0000098d 	.word	0x0000098d

00001304 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1304:	b580      	push	{r7, lr}
    1306:	b084      	sub	sp, #16
    1308:	af00      	add	r7, sp, #0
    130a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    130c:	687b      	ldr	r3, [r7, #4]
    130e:	681b      	ldr	r3, [r3, #0]
    1310:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1312:	687b      	ldr	r3, [r7, #4]
    1314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1316:	781b      	ldrb	r3, [r3, #0]
    1318:	b2da      	uxtb	r2, r3
    131a:	230e      	movs	r3, #14
    131c:	18fb      	adds	r3, r7, r3
    131e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    1320:	687b      	ldr	r3, [r7, #4]
    1322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1324:	1c5a      	adds	r2, r3, #1
    1326:	687b      	ldr	r3, [r7, #4]
    1328:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    132a:	687b      	ldr	r3, [r7, #4]
    132c:	799b      	ldrb	r3, [r3, #6]
    132e:	2b01      	cmp	r3, #1
    1330:	d113      	bne.n	135a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1332:	687b      	ldr	r3, [r7, #4]
    1334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1336:	781b      	ldrb	r3, [r3, #0]
    1338:	b2db      	uxtb	r3, r3
    133a:	021b      	lsls	r3, r3, #8
    133c:	b21a      	sxth	r2, r3
    133e:	230e      	movs	r3, #14
    1340:	18fb      	adds	r3, r7, r3
    1342:	2100      	movs	r1, #0
    1344:	5e5b      	ldrsh	r3, [r3, r1]
    1346:	4313      	orrs	r3, r2
    1348:	b21a      	sxth	r2, r3
    134a:	230e      	movs	r3, #14
    134c:	18fb      	adds	r3, r7, r3
    134e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    1350:	687b      	ldr	r3, [r7, #4]
    1352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1354:	1c5a      	adds	r2, r3, #1
    1356:	687b      	ldr	r3, [r7, #4]
    1358:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    135a:	230e      	movs	r3, #14
    135c:	18fb      	adds	r3, r7, r3
    135e:	881b      	ldrh	r3, [r3, #0]
    1360:	05db      	lsls	r3, r3, #23
    1362:	0dda      	lsrs	r2, r3, #23
    1364:	68bb      	ldr	r3, [r7, #8]
    1366:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1368:	687b      	ldr	r3, [r7, #4]
    136a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    136c:	b29b      	uxth	r3, r3
    136e:	3b01      	subs	r3, #1
    1370:	b29a      	uxth	r2, r3
    1372:	687b      	ldr	r3, [r7, #4]
    1374:	869a      	strh	r2, [r3, #52]	; 0x34
}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	46bd      	mov	sp, r7
    137a:	b004      	add	sp, #16
    137c:	bd80      	pop	{r7, pc}
	...

00001380 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    1380:	b580      	push	{r7, lr}
    1382:	b084      	sub	sp, #16
    1384:	af00      	add	r7, sp, #0
    1386:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	681b      	ldr	r3, [r3, #0]
    138c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    138e:	4b08      	ldr	r3, [pc, #32]	; (13b0 <_spi_write_dummy+0x30>)
    1390:	881b      	ldrh	r3, [r3, #0]
    1392:	001a      	movs	r2, r3
    1394:	68fb      	ldr	r3, [r7, #12]
    1396:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1398:	687b      	ldr	r3, [r7, #4]
    139a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    139c:	b29b      	uxth	r3, r3
    139e:	3b01      	subs	r3, #1
    13a0:	b29a      	uxth	r2, r3
    13a2:	687b      	ldr	r3, [r7, #4]
    13a4:	865a      	strh	r2, [r3, #50]	; 0x32
}
    13a6:	46c0      	nop			; (mov r8, r8)
    13a8:	46bd      	mov	sp, r7
    13aa:	b004      	add	sp, #16
    13ac:	bd80      	pop	{r7, pc}
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	2000011c 	.word	0x2000011c

000013b4 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    13b4:	b580      	push	{r7, lr}
    13b6:	b084      	sub	sp, #16
    13b8:	af00      	add	r7, sp, #0
    13ba:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13bc:	687b      	ldr	r3, [r7, #4]
    13be:	681b      	ldr	r3, [r3, #0]
    13c0:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    13c2:	230a      	movs	r3, #10
    13c4:	18fb      	adds	r3, r7, r3
    13c6:	2200      	movs	r2, #0
    13c8:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    13ca:	68fb      	ldr	r3, [r7, #12]
    13cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13ce:	230a      	movs	r3, #10
    13d0:	18fb      	adds	r3, r7, r3
    13d2:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    13d4:	687b      	ldr	r3, [r7, #4]
    13d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    13d8:	b29b      	uxth	r3, r3
    13da:	3b01      	subs	r3, #1
    13dc:	b29a      	uxth	r2, r3
    13de:	687b      	ldr	r3, [r7, #4]
    13e0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	46bd      	mov	sp, r7
    13e6:	b004      	add	sp, #16
    13e8:	bd80      	pop	{r7, pc}

000013ea <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    13ea:	b580      	push	{r7, lr}
    13ec:	b084      	sub	sp, #16
    13ee:	af00      	add	r7, sp, #0
    13f0:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    13f2:	687b      	ldr	r3, [r7, #4]
    13f4:	681b      	ldr	r3, [r3, #0]
    13f6:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    13f8:	68fb      	ldr	r3, [r7, #12]
    13fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13fc:	b29a      	uxth	r2, r3
    13fe:	230a      	movs	r3, #10
    1400:	18fb      	adds	r3, r7, r3
    1402:	05d2      	lsls	r2, r2, #23
    1404:	0dd2      	lsrs	r2, r2, #23
    1406:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    1408:	687b      	ldr	r3, [r7, #4]
    140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    140c:	220a      	movs	r2, #10
    140e:	18ba      	adds	r2, r7, r2
    1410:	8812      	ldrh	r2, [r2, #0]
    1412:	b2d2      	uxtb	r2, r2
    1414:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1416:	687b      	ldr	r3, [r7, #4]
    1418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    141a:	1c5a      	adds	r2, r3, #1
    141c:	687b      	ldr	r3, [r7, #4]
    141e:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1420:	687b      	ldr	r3, [r7, #4]
    1422:	799b      	ldrb	r3, [r3, #6]
    1424:	2b01      	cmp	r3, #1
    1426:	d10d      	bne.n	1444 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1428:	687b      	ldr	r3, [r7, #4]
    142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    142c:	220a      	movs	r2, #10
    142e:	18ba      	adds	r2, r7, r2
    1430:	8812      	ldrh	r2, [r2, #0]
    1432:	0a12      	lsrs	r2, r2, #8
    1434:	b292      	uxth	r2, r2
    1436:	b2d2      	uxtb	r2, r2
    1438:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    143a:	687b      	ldr	r3, [r7, #4]
    143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    143e:	1c5a      	adds	r2, r3, #1
    1440:	687b      	ldr	r3, [r7, #4]
    1442:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1444:	687b      	ldr	r3, [r7, #4]
    1446:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1448:	b29b      	uxth	r3, r3
    144a:	3b01      	subs	r3, #1
    144c:	b29a      	uxth	r2, r3
    144e:	687b      	ldr	r3, [r7, #4]
    1450:	861a      	strh	r2, [r3, #48]	; 0x30
}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	46bd      	mov	sp, r7
    1456:	b004      	add	sp, #16
    1458:	bd80      	pop	{r7, pc}
	...

0000145c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    145c:	b580      	push	{r7, lr}
    145e:	b086      	sub	sp, #24
    1460:	af00      	add	r7, sp, #0
    1462:	0002      	movs	r2, r0
    1464:	1dfb      	adds	r3, r7, #7
    1466:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    1468:	1dfb      	adds	r3, r7, #7
    146a:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    146c:	4bb9      	ldr	r3, [pc, #740]	; (1754 <_spi_interrupt_handler+0x2f8>)
    146e:	0092      	lsls	r2, r2, #2
    1470:	58d3      	ldr	r3, [r2, r3]
    1472:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1474:	697b      	ldr	r3, [r7, #20]
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    147a:	697b      	ldr	r3, [r7, #20]
    147c:	2237      	movs	r2, #55	; 0x37
    147e:	5c9a      	ldrb	r2, [r3, r2]
    1480:	697b      	ldr	r3, [r7, #20]
    1482:	2136      	movs	r1, #54	; 0x36
    1484:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    1486:	230f      	movs	r3, #15
    1488:	18fb      	adds	r3, r7, r3
    148a:	400a      	ands	r2, r1
    148c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    148e:	693b      	ldr	r3, [r7, #16]
    1490:	7e1b      	ldrb	r3, [r3, #24]
    1492:	b2da      	uxtb	r2, r3
    1494:	230c      	movs	r3, #12
    1496:	18fb      	adds	r3, r7, r3
    1498:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    149a:	693b      	ldr	r3, [r7, #16]
    149c:	7d9b      	ldrb	r3, [r3, #22]
    149e:	b2db      	uxtb	r3, r3
    14a0:	b29a      	uxth	r2, r3
    14a2:	230c      	movs	r3, #12
    14a4:	18fb      	adds	r3, r7, r3
    14a6:	210c      	movs	r1, #12
    14a8:	1879      	adds	r1, r7, r1
    14aa:	8809      	ldrh	r1, [r1, #0]
    14ac:	400a      	ands	r2, r1
    14ae:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    14b0:	230c      	movs	r3, #12
    14b2:	18fb      	adds	r3, r7, r3
    14b4:	881b      	ldrh	r3, [r3, #0]
    14b6:	2201      	movs	r2, #1
    14b8:	4013      	ands	r3, r2
    14ba:	d041      	beq.n	1540 <_spi_interrupt_handler+0xe4>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    14bc:	697b      	ldr	r3, [r7, #20]
    14be:	795b      	ldrb	r3, [r3, #5]
    14c0:	2b01      	cmp	r3, #1
    14c2:	d110      	bne.n	14e6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    14c4:	697b      	ldr	r3, [r7, #20]
    14c6:	7a5b      	ldrb	r3, [r3, #9]
    14c8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    14ca:	2b00      	cmp	r3, #0
    14cc:	d10b      	bne.n	14e6 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    14ce:	697b      	ldr	r3, [r7, #20]
    14d0:	0018      	movs	r0, r3
    14d2:	4ba1      	ldr	r3, [pc, #644]	; (1758 <_spi_interrupt_handler+0x2fc>)
    14d4:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    14d6:	697b      	ldr	r3, [r7, #20]
    14d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    14da:	b29b      	uxth	r3, r3
    14dc:	2b00      	cmp	r3, #0
    14de:	d102      	bne.n	14e6 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    14e0:	693b      	ldr	r3, [r7, #16]
    14e2:	2201      	movs	r2, #1
    14e4:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    14e6:	697b      	ldr	r3, [r7, #20]
    14e8:	795b      	ldrb	r3, [r3, #5]
		if (0
    14ea:	2b01      	cmp	r3, #1
    14ec:	d104      	bne.n	14f8 <_spi_interrupt_handler+0x9c>
			(module->dir != SPI_DIRECTION_READ))
    14ee:	697b      	ldr	r3, [r7, #20]
    14f0:	7a5b      	ldrb	r3, [r3, #9]
    14f2:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    14f4:	2b00      	cmp	r3, #0
    14f6:	d108      	bne.n	150a <_spi_interrupt_handler+0xae>
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    14f8:	697b      	ldr	r3, [r7, #20]
    14fa:	795b      	ldrb	r3, [r3, #5]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d11f      	bne.n	1540 <_spi_interrupt_handler+0xe4>
			(module->dir != SPI_DIRECTION_READ))
    1500:	697b      	ldr	r3, [r7, #20]
    1502:	7a5b      	ldrb	r3, [r3, #9]
    1504:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_SLAVE) &&
    1506:	2b00      	cmp	r3, #0
    1508:	d01a      	beq.n	1540 <_spi_interrupt_handler+0xe4>
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    150a:	697b      	ldr	r3, [r7, #20]
    150c:	0018      	movs	r0, r3
    150e:	4b93      	ldr	r3, [pc, #588]	; (175c <_spi_interrupt_handler+0x300>)
    1510:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    1512:	697b      	ldr	r3, [r7, #20]
    1514:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1516:	b29b      	uxth	r3, r3
    1518:	2b00      	cmp	r3, #0
    151a:	d111      	bne.n	1540 <_spi_interrupt_handler+0xe4>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    151c:	693b      	ldr	r3, [r7, #16]
    151e:	2201      	movs	r2, #1
    1520:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1522:	697b      	ldr	r3, [r7, #20]
    1524:	7a5b      	ldrb	r3, [r3, #9]
    1526:	b2db      	uxtb	r3, r3
    1528:	2b01      	cmp	r3, #1
    152a:	d109      	bne.n	1540 <_spi_interrupt_handler+0xe4>
						!(module->receiver_enabled)) {
    152c:	697b      	ldr	r3, [r7, #20]
    152e:	79db      	ldrb	r3, [r3, #7]
    1530:	2201      	movs	r2, #1
    1532:	4053      	eors	r3, r2
    1534:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    1536:	2b00      	cmp	r3, #0
    1538:	d002      	beq.n	1540 <_spi_interrupt_handler+0xe4>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    153a:	693b      	ldr	r3, [r7, #16]
    153c:	2202      	movs	r2, #2
    153e:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1540:	230c      	movs	r3, #12
    1542:	18fb      	adds	r3, r7, r3
    1544:	881b      	ldrh	r3, [r3, #0]
    1546:	2204      	movs	r2, #4
    1548:	4013      	ands	r3, r2
    154a:	d100      	bne.n	154e <_spi_interrupt_handler+0xf2>
    154c:	e07e      	b.n	164c <_spi_interrupt_handler+0x1f0>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    154e:	693b      	ldr	r3, [r7, #16]
    1550:	8b5b      	ldrh	r3, [r3, #26]
    1552:	b29b      	uxth	r3, r3
    1554:	001a      	movs	r2, r3
    1556:	2304      	movs	r3, #4
    1558:	4013      	ands	r3, r2
    155a:	d022      	beq.n	15a2 <_spi_interrupt_handler+0x146>
			if (module->dir != SPI_DIRECTION_WRITE) {
    155c:	697b      	ldr	r3, [r7, #20]
    155e:	7a5b      	ldrb	r3, [r3, #9]
    1560:	b2db      	uxtb	r3, r3
    1562:	2b01      	cmp	r3, #1
    1564:	d014      	beq.n	1590 <_spi_interrupt_handler+0x134>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1566:	697b      	ldr	r3, [r7, #20]
    1568:	2238      	movs	r2, #56	; 0x38
    156a:	211e      	movs	r1, #30
    156c:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    156e:	697b      	ldr	r3, [r7, #20]
    1570:	2203      	movs	r2, #3
    1572:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1574:	693b      	ldr	r3, [r7, #16]
    1576:	2205      	movs	r2, #5
    1578:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    157a:	230f      	movs	r3, #15
    157c:	18fb      	adds	r3, r7, r3
    157e:	781b      	ldrb	r3, [r3, #0]
    1580:	2208      	movs	r2, #8
    1582:	4013      	ands	r3, r2
    1584:	d004      	beq.n	1590 <_spi_interrupt_handler+0x134>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1586:	697b      	ldr	r3, [r7, #20]
    1588:	699b      	ldr	r3, [r3, #24]
    158a:	697a      	ldr	r2, [r7, #20]
    158c:	0010      	movs	r0, r2
    158e:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1590:	693b      	ldr	r3, [r7, #16]
    1592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1594:	230a      	movs	r3, #10
    1596:	18fb      	adds	r3, r7, r3
    1598:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    159a:	693b      	ldr	r3, [r7, #16]
    159c:	2204      	movs	r2, #4
    159e:	835a      	strh	r2, [r3, #26]
    15a0:	e054      	b.n	164c <_spi_interrupt_handler+0x1f0>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    15a2:	697b      	ldr	r3, [r7, #20]
    15a4:	7a5b      	ldrb	r3, [r3, #9]
    15a6:	b2db      	uxtb	r3, r3
    15a8:	2b01      	cmp	r3, #1
    15aa:	d11e      	bne.n	15ea <_spi_interrupt_handler+0x18e>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    15ac:	697b      	ldr	r3, [r7, #20]
    15ae:	0018      	movs	r0, r3
    15b0:	4b6b      	ldr	r3, [pc, #428]	; (1760 <_spi_interrupt_handler+0x304>)
    15b2:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    15b4:	697b      	ldr	r3, [r7, #20]
    15b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    15b8:	b29b      	uxth	r3, r3
    15ba:	2b00      	cmp	r3, #0
    15bc:	d146      	bne.n	164c <_spi_interrupt_handler+0x1f0>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    15be:	693b      	ldr	r3, [r7, #16]
    15c0:	2204      	movs	r2, #4
    15c2:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    15c4:	697b      	ldr	r3, [r7, #20]
    15c6:	2238      	movs	r2, #56	; 0x38
    15c8:	2100      	movs	r1, #0
    15ca:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    15cc:	697b      	ldr	r3, [r7, #20]
    15ce:	2203      	movs	r2, #3
    15d0:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    15d2:	230f      	movs	r3, #15
    15d4:	18fb      	adds	r3, r7, r3
    15d6:	781b      	ldrb	r3, [r3, #0]
    15d8:	2201      	movs	r2, #1
    15da:	4013      	ands	r3, r2
    15dc:	d036      	beq.n	164c <_spi_interrupt_handler+0x1f0>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    15de:	697b      	ldr	r3, [r7, #20]
    15e0:	68db      	ldr	r3, [r3, #12]
    15e2:	697a      	ldr	r2, [r7, #20]
    15e4:	0010      	movs	r0, r2
    15e6:	4798      	blx	r3
    15e8:	e030      	b.n	164c <_spi_interrupt_handler+0x1f0>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    15ea:	697b      	ldr	r3, [r7, #20]
    15ec:	0018      	movs	r0, r3
    15ee:	4b5d      	ldr	r3, [pc, #372]	; (1764 <_spi_interrupt_handler+0x308>)
    15f0:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    15f2:	697b      	ldr	r3, [r7, #20]
    15f4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    15f6:	b29b      	uxth	r3, r3
    15f8:	2b00      	cmp	r3, #0
    15fa:	d127      	bne.n	164c <_spi_interrupt_handler+0x1f0>
					module->status = STATUS_OK;
    15fc:	697b      	ldr	r3, [r7, #20]
    15fe:	2238      	movs	r2, #56	; 0x38
    1600:	2100      	movs	r1, #0
    1602:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1604:	693b      	ldr	r3, [r7, #16]
    1606:	2204      	movs	r2, #4
    1608:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    160a:	697b      	ldr	r3, [r7, #20]
    160c:	7a5b      	ldrb	r3, [r3, #9]
    160e:	b2db      	uxtb	r3, r3
    1610:	2b02      	cmp	r3, #2
    1612:	d10b      	bne.n	162c <_spi_interrupt_handler+0x1d0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1614:	230f      	movs	r3, #15
    1616:	18fb      	adds	r3, r7, r3
    1618:	781b      	ldrb	r3, [r3, #0]
    161a:	2204      	movs	r2, #4
    161c:	4013      	ands	r3, r2
    161e:	d015      	beq.n	164c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1620:	697b      	ldr	r3, [r7, #20]
    1622:	695b      	ldr	r3, [r3, #20]
    1624:	697a      	ldr	r2, [r7, #20]
    1626:	0010      	movs	r0, r2
    1628:	4798      	blx	r3
    162a:	e00f      	b.n	164c <_spi_interrupt_handler+0x1f0>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    162c:	697b      	ldr	r3, [r7, #20]
    162e:	7a5b      	ldrb	r3, [r3, #9]
    1630:	b2db      	uxtb	r3, r3
    1632:	2b00      	cmp	r3, #0
    1634:	d10a      	bne.n	164c <_spi_interrupt_handler+0x1f0>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1636:	230f      	movs	r3, #15
    1638:	18fb      	adds	r3, r7, r3
    163a:	781b      	ldrb	r3, [r3, #0]
    163c:	2202      	movs	r2, #2
    163e:	4013      	ands	r3, r2
    1640:	d004      	beq.n	164c <_spi_interrupt_handler+0x1f0>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1642:	697b      	ldr	r3, [r7, #20]
    1644:	691b      	ldr	r3, [r3, #16]
    1646:	697a      	ldr	r2, [r7, #20]
    1648:	0010      	movs	r0, r2
    164a:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    164c:	230c      	movs	r3, #12
    164e:	18fb      	adds	r3, r7, r3
    1650:	881b      	ldrh	r3, [r3, #0]
    1652:	2202      	movs	r2, #2
    1654:	4013      	ands	r3, r2
    1656:	d046      	beq.n	16e6 <_spi_interrupt_handler+0x28a>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    1658:	697b      	ldr	r3, [r7, #20]
    165a:	795b      	ldrb	r3, [r3, #5]
    165c:	2b00      	cmp	r3, #0
    165e:	d11d      	bne.n	169c <_spi_interrupt_handler+0x240>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    1660:	693b      	ldr	r3, [r7, #16]
    1662:	2207      	movs	r2, #7
    1664:	751a      	strb	r2, [r3, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1666:	693b      	ldr	r3, [r7, #16]
    1668:	2202      	movs	r2, #2
    166a:	761a      	strb	r2, [r3, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    166c:	697b      	ldr	r3, [r7, #20]
    166e:	2203      	movs	r2, #3
    1670:	725a      	strb	r2, [r3, #9]
			module->remaining_tx_buffer_length = 0;
    1672:	697b      	ldr	r3, [r7, #20]
    1674:	2200      	movs	r2, #0
    1676:	869a      	strh	r2, [r3, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    1678:	697b      	ldr	r3, [r7, #20]
    167a:	2200      	movs	r2, #0
    167c:	861a      	strh	r2, [r3, #48]	; 0x30
			module->status = STATUS_OK;
    167e:	697b      	ldr	r3, [r7, #20]
    1680:	2238      	movs	r2, #56	; 0x38
    1682:	2100      	movs	r1, #0
    1684:	5499      	strb	r1, [r3, r2]

			if (callback_mask &
    1686:	230f      	movs	r3, #15
    1688:	18fb      	adds	r3, r7, r3
    168a:	781b      	ldrb	r3, [r3, #0]
    168c:	2210      	movs	r2, #16
    168e:	4013      	ands	r3, r2
    1690:	d004      	beq.n	169c <_spi_interrupt_handler+0x240>
					(1 << SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE)) {
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    1692:	697b      	ldr	r3, [r7, #20]
    1694:	69db      	ldr	r3, [r3, #28]
    1696:	697a      	ldr	r2, [r7, #20]
    1698:	0010      	movs	r0, r2
    169a:	4798      	blx	r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    169c:	697b      	ldr	r3, [r7, #20]
    169e:	795b      	ldrb	r3, [r3, #5]
    16a0:	2b01      	cmp	r3, #1
    16a2:	d120      	bne.n	16e6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    16a4:	697b      	ldr	r3, [r7, #20]
    16a6:	7a5b      	ldrb	r3, [r3, #9]
    16a8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    16aa:	2b01      	cmp	r3, #1
    16ac:	d11b      	bne.n	16e6 <_spi_interrupt_handler+0x28a>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    16ae:	697b      	ldr	r3, [r7, #20]
    16b0:	79db      	ldrb	r3, [r3, #7]
    16b2:	2201      	movs	r2, #1
    16b4:	4053      	eors	r3, r2
    16b6:	b2db      	uxtb	r3, r3
    16b8:	2b00      	cmp	r3, #0
    16ba:	d014      	beq.n	16e6 <_spi_interrupt_handler+0x28a>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    16bc:	693b      	ldr	r3, [r7, #16]
    16be:	2202      	movs	r2, #2
    16c0:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    16c2:	697b      	ldr	r3, [r7, #20]
    16c4:	2203      	movs	r2, #3
    16c6:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    16c8:	697b      	ldr	r3, [r7, #20]
    16ca:	2238      	movs	r2, #56	; 0x38
    16cc:	2100      	movs	r1, #0
    16ce:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    16d0:	230f      	movs	r3, #15
    16d2:	18fb      	adds	r3, r7, r3
    16d4:	781b      	ldrb	r3, [r3, #0]
    16d6:	2201      	movs	r2, #1
    16d8:	4013      	ands	r3, r2
    16da:	d004      	beq.n	16e6 <_spi_interrupt_handler+0x28a>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    16dc:	697b      	ldr	r3, [r7, #20]
    16de:	68db      	ldr	r3, [r3, #12]
    16e0:	697a      	ldr	r2, [r7, #20]
    16e2:	0010      	movs	r0, r2
    16e4:	4798      	blx	r3
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    16e6:	230c      	movs	r3, #12
    16e8:	18fb      	adds	r3, r7, r3
    16ea:	881b      	ldrh	r3, [r3, #0]
    16ec:	2208      	movs	r2, #8
    16ee:	4013      	ands	r3, r2
    16f0:	d014      	beq.n	171c <_spi_interrupt_handler+0x2c0>
			if (module->mode == SPI_MODE_SLAVE) {
    16f2:	697b      	ldr	r3, [r7, #20]
    16f4:	795b      	ldrb	r3, [r3, #5]
    16f6:	2b00      	cmp	r3, #0
    16f8:	d110      	bne.n	171c <_spi_interrupt_handler+0x2c0>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    16fa:	693b      	ldr	r3, [r7, #16]
    16fc:	2208      	movs	r2, #8
    16fe:	751a      	strb	r2, [r3, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    1700:	693b      	ldr	r3, [r7, #16]
    1702:	2208      	movs	r2, #8
    1704:	761a      	strb	r2, [r3, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    1706:	230f      	movs	r3, #15
    1708:	18fb      	adds	r3, r7, r3
    170a:	781b      	ldrb	r3, [r3, #0]
    170c:	2220      	movs	r2, #32
    170e:	4013      	ands	r3, r2
    1710:	d004      	beq.n	171c <_spi_interrupt_handler+0x2c0>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    1712:	697b      	ldr	r3, [r7, #20]
    1714:	6a1b      	ldr	r3, [r3, #32]
    1716:	697a      	ldr	r2, [r7, #20]
    1718:	0010      	movs	r0, r2
    171a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    171c:	230c      	movs	r3, #12
    171e:	18fb      	adds	r3, r7, r3
    1720:	881b      	ldrh	r3, [r3, #0]
    1722:	2280      	movs	r2, #128	; 0x80
    1724:	4013      	ands	r3, r2
    1726:	d010      	beq.n	174a <_spi_interrupt_handler+0x2ee>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1728:	693b      	ldr	r3, [r7, #16]
    172a:	2280      	movs	r2, #128	; 0x80
    172c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    172e:	693b      	ldr	r3, [r7, #16]
    1730:	2280      	movs	r2, #128	; 0x80
    1732:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1734:	230f      	movs	r3, #15
    1736:	18fb      	adds	r3, r7, r3
    1738:	781b      	ldrb	r3, [r3, #0]
    173a:	2240      	movs	r2, #64	; 0x40
    173c:	4013      	ands	r3, r2
    173e:	d004      	beq.n	174a <_spi_interrupt_handler+0x2ee>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1740:	697b      	ldr	r3, [r7, #20]
    1742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1744:	697a      	ldr	r2, [r7, #20]
    1746:	0010      	movs	r0, r2
    1748:	4798      	blx	r3
		}
	}
#  endif
}
    174a:	46c0      	nop			; (mov r8, r8)
    174c:	46bd      	mov	sp, r7
    174e:	b006      	add	sp, #24
    1750:	bd80      	pop	{r7, pc}
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	2000012c 	.word	0x2000012c
    1758:	00001381 	.word	0x00001381
    175c:	00001305 	.word	0x00001305
    1760:	000013b5 	.word	0x000013b5
    1764:	000013eb 	.word	0x000013eb

00001768 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    1768:	b580      	push	{r7, lr}
    176a:	b082      	sub	sp, #8
    176c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    176e:	4b07      	ldr	r3, [pc, #28]	; (178c <nvm_is_ready+0x24>)
    1770:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    1772:	687b      	ldr	r3, [r7, #4]
    1774:	7d1b      	ldrb	r3, [r3, #20]
    1776:	b2db      	uxtb	r3, r3
    1778:	001a      	movs	r2, r3
    177a:	2301      	movs	r3, #1
    177c:	4013      	ands	r3, r2
    177e:	1e5a      	subs	r2, r3, #1
    1780:	4193      	sbcs	r3, r2
    1782:	b2db      	uxtb	r3, r3
}
    1784:	0018      	movs	r0, r3
    1786:	46bd      	mov	sp, r7
    1788:	b002      	add	sp, #8
    178a:	bd80      	pop	{r7, pc}
    178c:	41004000 	.word	0x41004000

00001790 <system_apb_clock_set_mask>:
{
    1790:	b580      	push	{r7, lr}
    1792:	b082      	sub	sp, #8
    1794:	af00      	add	r7, sp, #0
    1796:	0002      	movs	r2, r0
    1798:	6039      	str	r1, [r7, #0]
    179a:	1dfb      	adds	r3, r7, #7
    179c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    179e:	1dfb      	adds	r3, r7, #7
    17a0:	781b      	ldrb	r3, [r3, #0]
    17a2:	2b01      	cmp	r3, #1
    17a4:	d00a      	beq.n	17bc <system_apb_clock_set_mask+0x2c>
    17a6:	2b02      	cmp	r3, #2
    17a8:	d00f      	beq.n	17ca <system_apb_clock_set_mask+0x3a>
    17aa:	2b00      	cmp	r3, #0
    17ac:	d114      	bne.n	17d8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    17ae:	4b0e      	ldr	r3, [pc, #56]	; (17e8 <system_apb_clock_set_mask+0x58>)
    17b0:	4a0d      	ldr	r2, [pc, #52]	; (17e8 <system_apb_clock_set_mask+0x58>)
    17b2:	6991      	ldr	r1, [r2, #24]
    17b4:	683a      	ldr	r2, [r7, #0]
    17b6:	430a      	orrs	r2, r1
    17b8:	619a      	str	r2, [r3, #24]
			break;
    17ba:	e00f      	b.n	17dc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    17bc:	4b0a      	ldr	r3, [pc, #40]	; (17e8 <system_apb_clock_set_mask+0x58>)
    17be:	4a0a      	ldr	r2, [pc, #40]	; (17e8 <system_apb_clock_set_mask+0x58>)
    17c0:	69d1      	ldr	r1, [r2, #28]
    17c2:	683a      	ldr	r2, [r7, #0]
    17c4:	430a      	orrs	r2, r1
    17c6:	61da      	str	r2, [r3, #28]
			break;
    17c8:	e008      	b.n	17dc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    17ca:	4b07      	ldr	r3, [pc, #28]	; (17e8 <system_apb_clock_set_mask+0x58>)
    17cc:	4a06      	ldr	r2, [pc, #24]	; (17e8 <system_apb_clock_set_mask+0x58>)
    17ce:	6a11      	ldr	r1, [r2, #32]
    17d0:	683a      	ldr	r2, [r7, #0]
    17d2:	430a      	orrs	r2, r1
    17d4:	621a      	str	r2, [r3, #32]
			break;
    17d6:	e001      	b.n	17dc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    17d8:	2317      	movs	r3, #23
    17da:	e000      	b.n	17de <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    17dc:	2300      	movs	r3, #0
}
    17de:	0018      	movs	r0, r3
    17e0:	46bd      	mov	sp, r7
    17e2:	b002      	add	sp, #8
    17e4:	bd80      	pop	{r7, pc}
    17e6:	46c0      	nop			; (mov r8, r8)
    17e8:	40000400 	.word	0x40000400

000017ec <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    17ec:	b580      	push	{r7, lr}
    17ee:	b084      	sub	sp, #16
    17f0:	af00      	add	r7, sp, #0
    17f2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    17f4:	4b2f      	ldr	r3, [pc, #188]	; (18b4 <nvm_set_config+0xc8>)
    17f6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    17f8:	2104      	movs	r1, #4
    17fa:	2001      	movs	r0, #1
    17fc:	4b2e      	ldr	r3, [pc, #184]	; (18b8 <nvm_set_config+0xcc>)
    17fe:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1800:	68fb      	ldr	r3, [r7, #12]
    1802:	2220      	movs	r2, #32
    1804:	32ff      	adds	r2, #255	; 0xff
    1806:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1808:	4b2c      	ldr	r3, [pc, #176]	; (18bc <nvm_set_config+0xd0>)
    180a:	4798      	blx	r3
    180c:	0003      	movs	r3, r0
    180e:	001a      	movs	r2, r3
    1810:	2301      	movs	r3, #1
    1812:	4053      	eors	r3, r2
    1814:	b2db      	uxtb	r3, r3
    1816:	2b00      	cmp	r3, #0
    1818:	d001      	beq.n	181e <nvm_set_config+0x32>
		return STATUS_BUSY;
    181a:	2305      	movs	r3, #5
    181c:	e045      	b.n	18aa <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    181e:	687b      	ldr	r3, [r7, #4]
    1820:	781b      	ldrb	r3, [r3, #0]
    1822:	021b      	lsls	r3, r3, #8
    1824:	001a      	movs	r2, r3
    1826:	23c0      	movs	r3, #192	; 0xc0
    1828:	009b      	lsls	r3, r3, #2
    182a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    182c:	687b      	ldr	r3, [r7, #4]
    182e:	785b      	ldrb	r3, [r3, #1]
    1830:	01db      	lsls	r3, r3, #7
    1832:	0019      	movs	r1, r3
    1834:	23ff      	movs	r3, #255	; 0xff
    1836:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    1838:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    183a:	687b      	ldr	r3, [r7, #4]
    183c:	789b      	ldrb	r3, [r3, #2]
    183e:	005b      	lsls	r3, r3, #1
    1840:	0019      	movs	r1, r3
    1842:	231e      	movs	r3, #30
    1844:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    1846:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1848:	687b      	ldr	r3, [r7, #4]
    184a:	78db      	ldrb	r3, [r3, #3]
    184c:	049b      	lsls	r3, r3, #18
    184e:	0019      	movs	r1, r3
    1850:	2380      	movs	r3, #128	; 0x80
    1852:	02db      	lsls	r3, r3, #11
    1854:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    1856:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    1858:	687b      	ldr	r3, [r7, #4]
    185a:	791b      	ldrb	r3, [r3, #4]
    185c:	041b      	lsls	r3, r3, #16
    185e:	0019      	movs	r1, r3
    1860:	23c0      	movs	r3, #192	; 0xc0
    1862:	029b      	lsls	r3, r3, #10
    1864:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    1866:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    1868:	68fb      	ldr	r3, [r7, #12]
    186a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    186c:	68fb      	ldr	r3, [r7, #12]
    186e:	689b      	ldr	r3, [r3, #8]
    1870:	035b      	lsls	r3, r3, #13
    1872:	0f5b      	lsrs	r3, r3, #29
    1874:	b2db      	uxtb	r3, r3
    1876:	001a      	movs	r2, r3
    1878:	2308      	movs	r3, #8
    187a:	4093      	lsls	r3, r2
    187c:	b29a      	uxth	r2, r3
    187e:	4b10      	ldr	r3, [pc, #64]	; (18c0 <nvm_set_config+0xd4>)
    1880:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    1882:	68fb      	ldr	r3, [r7, #12]
    1884:	689b      	ldr	r3, [r3, #8]
    1886:	b29a      	uxth	r2, r3
    1888:	4b0d      	ldr	r3, [pc, #52]	; (18c0 <nvm_set_config+0xd4>)
    188a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    188c:	687b      	ldr	r3, [r7, #4]
    188e:	785a      	ldrb	r2, [r3, #1]
    1890:	4b0b      	ldr	r3, [pc, #44]	; (18c0 <nvm_set_config+0xd4>)
    1892:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    1894:	68fb      	ldr	r3, [r7, #12]
    1896:	8b1b      	ldrh	r3, [r3, #24]
    1898:	b29b      	uxth	r3, r3
    189a:	001a      	movs	r2, r3
    189c:	2380      	movs	r3, #128	; 0x80
    189e:	005b      	lsls	r3, r3, #1
    18a0:	4013      	ands	r3, r2
    18a2:	d001      	beq.n	18a8 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
    18a4:	2310      	movs	r3, #16
    18a6:	e000      	b.n	18aa <nvm_set_config+0xbe>
	}

	return STATUS_OK;
    18a8:	2300      	movs	r3, #0
}
    18aa:	0018      	movs	r0, r3
    18ac:	46bd      	mov	sp, r7
    18ae:	b004      	add	sp, #16
    18b0:	bd80      	pop	{r7, pc}
    18b2:	46c0      	nop			; (mov r8, r8)
    18b4:	41004000 	.word	0x41004000
    18b8:	00001791 	.word	0x00001791
    18bc:	00001769 	.word	0x00001769
    18c0:	2000008c 	.word	0x2000008c

000018c4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    18c4:	b580      	push	{r7, lr}
    18c6:	b086      	sub	sp, #24
    18c8:	af00      	add	r7, sp, #0
    18ca:	60b9      	str	r1, [r7, #8]
    18cc:	607a      	str	r2, [r7, #4]
    18ce:	230f      	movs	r3, #15
    18d0:	18fb      	adds	r3, r7, r3
    18d2:	1c02      	adds	r2, r0, #0
    18d4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    18d6:	4b3a      	ldr	r3, [pc, #232]	; (19c0 <nvm_execute_command+0xfc>)
    18d8:	881b      	ldrh	r3, [r3, #0]
    18da:	001a      	movs	r2, r3
    18dc:	4b38      	ldr	r3, [pc, #224]	; (19c0 <nvm_execute_command+0xfc>)
    18de:	885b      	ldrh	r3, [r3, #2]
    18e0:	435a      	muls	r2, r3
    18e2:	68bb      	ldr	r3, [r7, #8]
    18e4:	429a      	cmp	r2, r3
    18e6:	d209      	bcs.n	18fc <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    18e8:	68bb      	ldr	r3, [r7, #8]
    18ea:	4a36      	ldr	r2, [pc, #216]	; (19c4 <nvm_execute_command+0x100>)
    18ec:	4293      	cmp	r3, r2
    18ee:	d903      	bls.n	18f8 <nvm_execute_command+0x34>
    18f0:	68bb      	ldr	r3, [r7, #8]
    18f2:	4a35      	ldr	r2, [pc, #212]	; (19c8 <nvm_execute_command+0x104>)
    18f4:	4293      	cmp	r3, r2
    18f6:	d901      	bls.n	18fc <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    18f8:	2318      	movs	r3, #24
    18fa:	e05c      	b.n	19b6 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    18fc:	4b33      	ldr	r3, [pc, #204]	; (19cc <nvm_execute_command+0x108>)
    18fe:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    1900:	697b      	ldr	r3, [r7, #20]
    1902:	685b      	ldr	r3, [r3, #4]
    1904:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    1906:	693b      	ldr	r3, [r7, #16]
    1908:	2280      	movs	r2, #128	; 0x80
    190a:	02d2      	lsls	r2, r2, #11
    190c:	431a      	orrs	r2, r3
    190e:	697b      	ldr	r3, [r7, #20]
    1910:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1912:	697b      	ldr	r3, [r7, #20]
    1914:	2220      	movs	r2, #32
    1916:	32ff      	adds	r2, #255	; 0xff
    1918:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    191a:	4b2d      	ldr	r3, [pc, #180]	; (19d0 <nvm_execute_command+0x10c>)
    191c:	4798      	blx	r3
    191e:	0003      	movs	r3, r0
    1920:	001a      	movs	r2, r3
    1922:	2301      	movs	r3, #1
    1924:	4053      	eors	r3, r2
    1926:	b2db      	uxtb	r3, r3
    1928:	2b00      	cmp	r3, #0
    192a:	d004      	beq.n	1936 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    192c:	697b      	ldr	r3, [r7, #20]
    192e:	693a      	ldr	r2, [r7, #16]
    1930:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    1932:	2305      	movs	r3, #5
    1934:	e03f      	b.n	19b6 <nvm_execute_command+0xf2>
	}

	switch (command) {
    1936:	230f      	movs	r3, #15
    1938:	18fb      	adds	r3, r7, r3
    193a:	781b      	ldrb	r3, [r3, #0]
    193c:	2b45      	cmp	r3, #69	; 0x45
    193e:	d81d      	bhi.n	197c <nvm_execute_command+0xb8>
    1940:	009a      	lsls	r2, r3, #2
    1942:	4b24      	ldr	r3, [pc, #144]	; (19d4 <nvm_execute_command+0x110>)
    1944:	18d3      	adds	r3, r2, r3
    1946:	681b      	ldr	r3, [r3, #0]
    1948:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    194a:	697b      	ldr	r3, [r7, #20]
    194c:	8b1b      	ldrh	r3, [r3, #24]
    194e:	b29b      	uxth	r3, r3
    1950:	001a      	movs	r2, r3
    1952:	2380      	movs	r3, #128	; 0x80
    1954:	005b      	lsls	r3, r3, #1
    1956:	4013      	ands	r3, r2
    1958:	d004      	beq.n	1964 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    195a:	697b      	ldr	r3, [r7, #20]
    195c:	693a      	ldr	r2, [r7, #16]
    195e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    1960:	2310      	movs	r3, #16
    1962:	e028      	b.n	19b6 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    1964:	68bb      	ldr	r3, [r7, #8]
    1966:	089b      	lsrs	r3, r3, #2
    1968:	005a      	lsls	r2, r3, #1
    196a:	697b      	ldr	r3, [r7, #20]
    196c:	61da      	str	r2, [r3, #28]
			break;
    196e:	e00b      	b.n	1988 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    1970:	68bb      	ldr	r3, [r7, #8]
    1972:	089b      	lsrs	r3, r3, #2
    1974:	005a      	lsls	r2, r3, #1
    1976:	697b      	ldr	r3, [r7, #20]
    1978:	61da      	str	r2, [r3, #28]
			break;
    197a:	e005      	b.n	1988 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    197c:	697b      	ldr	r3, [r7, #20]
    197e:	693a      	ldr	r2, [r7, #16]
    1980:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    1982:	2317      	movs	r3, #23
    1984:	e017      	b.n	19b6 <nvm_execute_command+0xf2>
			break;
    1986:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    1988:	230f      	movs	r3, #15
    198a:	18fb      	adds	r3, r7, r3
    198c:	781b      	ldrb	r3, [r3, #0]
    198e:	b29b      	uxth	r3, r3
    1990:	4a11      	ldr	r2, [pc, #68]	; (19d8 <nvm_execute_command+0x114>)
    1992:	4313      	orrs	r3, r2
    1994:	b29a      	uxth	r2, r3
    1996:	697b      	ldr	r3, [r7, #20]
    1998:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	4b0c      	ldr	r3, [pc, #48]	; (19d0 <nvm_execute_command+0x10c>)
    199e:	4798      	blx	r3
    19a0:	0003      	movs	r3, r0
    19a2:	001a      	movs	r2, r3
    19a4:	2301      	movs	r3, #1
    19a6:	4053      	eors	r3, r2
    19a8:	b2db      	uxtb	r3, r3
    19aa:	2b00      	cmp	r3, #0
    19ac:	d1f6      	bne.n	199c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    19ae:	697b      	ldr	r3, [r7, #20]
    19b0:	693a      	ldr	r2, [r7, #16]
    19b2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    19b4:	2300      	movs	r3, #0
}
    19b6:	0018      	movs	r0, r3
    19b8:	46bd      	mov	sp, r7
    19ba:	b006      	add	sp, #24
    19bc:	bd80      	pop	{r7, pc}
    19be:	46c0      	nop			; (mov r8, r8)
    19c0:	2000008c 	.word	0x2000008c
    19c4:	00803fff 	.word	0x00803fff
    19c8:	00806000 	.word	0x00806000
    19cc:	41004000 	.word	0x41004000
    19d0:	00001769 	.word	0x00001769
    19d4:	00005b14 	.word	0x00005b14
    19d8:	ffffa500 	.word	0xffffa500

000019dc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    19dc:	b580      	push	{r7, lr}
    19de:	b088      	sub	sp, #32
    19e0:	af00      	add	r7, sp, #0
    19e2:	60f8      	str	r0, [r7, #12]
    19e4:	60b9      	str	r1, [r7, #8]
    19e6:	1dbb      	adds	r3, r7, #6
    19e8:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    19ea:	4b4a      	ldr	r3, [pc, #296]	; (1b14 <nvm_write_buffer+0x138>)
    19ec:	881b      	ldrh	r3, [r3, #0]
    19ee:	001a      	movs	r2, r3
    19f0:	4b48      	ldr	r3, [pc, #288]	; (1b14 <nvm_write_buffer+0x138>)
    19f2:	885b      	ldrh	r3, [r3, #2]
    19f4:	435a      	muls	r2, r3
	if (destination_address >
    19f6:	68fb      	ldr	r3, [r7, #12]
    19f8:	429a      	cmp	r2, r3
    19fa:	d201      	bcs.n	1a00 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    19fc:	2318      	movs	r3, #24
    19fe:	e084      	b.n	1b0a <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    1a00:	4b44      	ldr	r3, [pc, #272]	; (1b14 <nvm_write_buffer+0x138>)
    1a02:	881b      	ldrh	r3, [r3, #0]
    1a04:	3b01      	subs	r3, #1
    1a06:	001a      	movs	r2, r3
    1a08:	68fb      	ldr	r3, [r7, #12]
    1a0a:	4013      	ands	r3, r2
    1a0c:	d001      	beq.n	1a12 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
    1a0e:	2318      	movs	r3, #24
    1a10:	e07b      	b.n	1b0a <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    1a12:	4b40      	ldr	r3, [pc, #256]	; (1b14 <nvm_write_buffer+0x138>)
    1a14:	881b      	ldrh	r3, [r3, #0]
    1a16:	1dba      	adds	r2, r7, #6
    1a18:	8812      	ldrh	r2, [r2, #0]
    1a1a:	429a      	cmp	r2, r3
    1a1c:	d901      	bls.n	1a22 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
    1a1e:	2317      	movs	r3, #23
    1a20:	e073      	b.n	1b0a <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1a22:	4b3d      	ldr	r3, [pc, #244]	; (1b18 <nvm_write_buffer+0x13c>)
    1a24:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1a26:	4b3d      	ldr	r3, [pc, #244]	; (1b1c <nvm_write_buffer+0x140>)
    1a28:	4798      	blx	r3
    1a2a:	0003      	movs	r3, r0
    1a2c:	001a      	movs	r2, r3
    1a2e:	2301      	movs	r3, #1
    1a30:	4053      	eors	r3, r2
    1a32:	b2db      	uxtb	r3, r3
    1a34:	2b00      	cmp	r3, #0
    1a36:	d001      	beq.n	1a3c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
    1a38:	2305      	movs	r3, #5
    1a3a:	e066      	b.n	1b0a <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    1a3c:	697b      	ldr	r3, [r7, #20]
    1a3e:	4a38      	ldr	r2, [pc, #224]	; (1b20 <nvm_write_buffer+0x144>)
    1a40:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	4b35      	ldr	r3, [pc, #212]	; (1b1c <nvm_write_buffer+0x140>)
    1a46:	4798      	blx	r3
    1a48:	0003      	movs	r3, r0
    1a4a:	001a      	movs	r2, r3
    1a4c:	2301      	movs	r3, #1
    1a4e:	4053      	eors	r3, r2
    1a50:	b2db      	uxtb	r3, r3
    1a52:	2b00      	cmp	r3, #0
    1a54:	d1f6      	bne.n	1a44 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1a56:	697b      	ldr	r3, [r7, #20]
    1a58:	2220      	movs	r2, #32
    1a5a:	32ff      	adds	r2, #255	; 0xff
    1a5c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    1a5e:	68fb      	ldr	r3, [r7, #12]
    1a60:	085b      	lsrs	r3, r3, #1
    1a62:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    1a64:	231a      	movs	r3, #26
    1a66:	18fb      	adds	r3, r7, r3
    1a68:	2200      	movs	r2, #0
    1a6a:	801a      	strh	r2, [r3, #0]
    1a6c:	e032      	b.n	1ad4 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    1a6e:	231a      	movs	r3, #26
    1a70:	18fb      	adds	r3, r7, r3
    1a72:	881b      	ldrh	r3, [r3, #0]
    1a74:	68ba      	ldr	r2, [r7, #8]
    1a76:	18d3      	adds	r3, r2, r3
    1a78:	781a      	ldrb	r2, [r3, #0]
    1a7a:	2318      	movs	r3, #24
    1a7c:	18fb      	adds	r3, r7, r3
    1a7e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    1a80:	231a      	movs	r3, #26
    1a82:	18fb      	adds	r3, r7, r3
    1a84:	881a      	ldrh	r2, [r3, #0]
    1a86:	1dbb      	adds	r3, r7, #6
    1a88:	881b      	ldrh	r3, [r3, #0]
    1a8a:	3b01      	subs	r3, #1
    1a8c:	429a      	cmp	r2, r3
    1a8e:	da11      	bge.n	1ab4 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
    1a90:	231a      	movs	r3, #26
    1a92:	18fb      	adds	r3, r7, r3
    1a94:	881b      	ldrh	r3, [r3, #0]
    1a96:	3301      	adds	r3, #1
    1a98:	68ba      	ldr	r2, [r7, #8]
    1a9a:	18d3      	adds	r3, r2, r3
    1a9c:	781b      	ldrb	r3, [r3, #0]
    1a9e:	021b      	lsls	r3, r3, #8
    1aa0:	b21a      	sxth	r2, r3
    1aa2:	2318      	movs	r3, #24
    1aa4:	18fb      	adds	r3, r7, r3
    1aa6:	2100      	movs	r1, #0
    1aa8:	5e5b      	ldrsh	r3, [r3, r1]
    1aaa:	4313      	orrs	r3, r2
    1aac:	b21a      	sxth	r2, r3
    1aae:	2318      	movs	r3, #24
    1ab0:	18fb      	adds	r3, r7, r3
    1ab2:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    1ab4:	69fb      	ldr	r3, [r7, #28]
    1ab6:	1c5a      	adds	r2, r3, #1
    1ab8:	61fa      	str	r2, [r7, #28]
    1aba:	005b      	lsls	r3, r3, #1
    1abc:	001a      	movs	r2, r3
    1abe:	2318      	movs	r3, #24
    1ac0:	18fb      	adds	r3, r7, r3
    1ac2:	881b      	ldrh	r3, [r3, #0]
    1ac4:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    1ac6:	231a      	movs	r3, #26
    1ac8:	18fb      	adds	r3, r7, r3
    1aca:	221a      	movs	r2, #26
    1acc:	18ba      	adds	r2, r7, r2
    1ace:	8812      	ldrh	r2, [r2, #0]
    1ad0:	3202      	adds	r2, #2
    1ad2:	801a      	strh	r2, [r3, #0]
    1ad4:	231a      	movs	r3, #26
    1ad6:	18fa      	adds	r2, r7, r3
    1ad8:	1dbb      	adds	r3, r7, #6
    1ada:	8812      	ldrh	r2, [r2, #0]
    1adc:	881b      	ldrh	r3, [r3, #0]
    1ade:	429a      	cmp	r2, r3
    1ae0:	d3c5      	bcc.n	1a6e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    1ae2:	4b0c      	ldr	r3, [pc, #48]	; (1b14 <nvm_write_buffer+0x138>)
    1ae4:	791b      	ldrb	r3, [r3, #4]
    1ae6:	2201      	movs	r2, #1
    1ae8:	4053      	eors	r3, r2
    1aea:	b2db      	uxtb	r3, r3
    1aec:	2b00      	cmp	r3, #0
    1aee:	d00b      	beq.n	1b08 <nvm_write_buffer+0x12c>
    1af0:	1dbb      	adds	r3, r7, #6
    1af2:	881b      	ldrh	r3, [r3, #0]
    1af4:	2b3f      	cmp	r3, #63	; 0x3f
    1af6:	d807      	bhi.n	1b08 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    1af8:	68fb      	ldr	r3, [r7, #12]
    1afa:	2200      	movs	r2, #0
    1afc:	0019      	movs	r1, r3
    1afe:	2004      	movs	r0, #4
    1b00:	4b08      	ldr	r3, [pc, #32]	; (1b24 <nvm_write_buffer+0x148>)
    1b02:	4798      	blx	r3
    1b04:	0003      	movs	r3, r0
    1b06:	e000      	b.n	1b0a <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    1b08:	2300      	movs	r3, #0
}
    1b0a:	0018      	movs	r0, r3
    1b0c:	46bd      	mov	sp, r7
    1b0e:	b008      	add	sp, #32
    1b10:	bd80      	pop	{r7, pc}
    1b12:	46c0      	nop			; (mov r8, r8)
    1b14:	2000008c 	.word	0x2000008c
    1b18:	41004000 	.word	0x41004000
    1b1c:	00001769 	.word	0x00001769
    1b20:	ffffa544 	.word	0xffffa544
    1b24:	000018c5 	.word	0x000018c5

00001b28 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	b084      	sub	sp, #16
    1b2c:	af00      	add	r7, sp, #0
    1b2e:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    1b30:	4b23      	ldr	r3, [pc, #140]	; (1bc0 <nvm_erase_row+0x98>)
    1b32:	881b      	ldrh	r3, [r3, #0]
    1b34:	001a      	movs	r2, r3
    1b36:	4b22      	ldr	r3, [pc, #136]	; (1bc0 <nvm_erase_row+0x98>)
    1b38:	885b      	ldrh	r3, [r3, #2]
    1b3a:	435a      	muls	r2, r3
	if (row_address >
    1b3c:	687b      	ldr	r3, [r7, #4]
    1b3e:	429a      	cmp	r2, r3
    1b40:	d201      	bcs.n	1b46 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    1b42:	2318      	movs	r3, #24
    1b44:	e037      	b.n	1bb6 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    1b46:	4b1e      	ldr	r3, [pc, #120]	; (1bc0 <nvm_erase_row+0x98>)
    1b48:	881b      	ldrh	r3, [r3, #0]
    1b4a:	009b      	lsls	r3, r3, #2
    1b4c:	3b01      	subs	r3, #1
    1b4e:	001a      	movs	r2, r3
    1b50:	687b      	ldr	r3, [r7, #4]
    1b52:	4013      	ands	r3, r2
    1b54:	d001      	beq.n	1b5a <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
    1b56:	2318      	movs	r3, #24
    1b58:	e02d      	b.n	1bb6 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    1b5a:	4b1a      	ldr	r3, [pc, #104]	; (1bc4 <nvm_erase_row+0x9c>)
    1b5c:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    1b5e:	4b1a      	ldr	r3, [pc, #104]	; (1bc8 <nvm_erase_row+0xa0>)
    1b60:	4798      	blx	r3
    1b62:	0003      	movs	r3, r0
    1b64:	001a      	movs	r2, r3
    1b66:	2301      	movs	r3, #1
    1b68:	4053      	eors	r3, r2
    1b6a:	b2db      	uxtb	r3, r3
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d001      	beq.n	1b74 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
    1b70:	2305      	movs	r3, #5
    1b72:	e020      	b.n	1bb6 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    1b74:	68fb      	ldr	r3, [r7, #12]
    1b76:	2220      	movs	r2, #32
    1b78:	32ff      	adds	r2, #255	; 0xff
    1b7a:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	089b      	lsrs	r3, r3, #2
    1b80:	005a      	lsls	r2, r3, #1
    1b82:	68fb      	ldr	r3, [r7, #12]
    1b84:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    1b86:	68fb      	ldr	r3, [r7, #12]
    1b88:	4a10      	ldr	r2, [pc, #64]	; (1bcc <nvm_erase_row+0xa4>)
    1b8a:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    1b8c:	46c0      	nop			; (mov r8, r8)
    1b8e:	4b0e      	ldr	r3, [pc, #56]	; (1bc8 <nvm_erase_row+0xa0>)
    1b90:	4798      	blx	r3
    1b92:	0003      	movs	r3, r0
    1b94:	001a      	movs	r2, r3
    1b96:	2301      	movs	r3, #1
    1b98:	4053      	eors	r3, r2
    1b9a:	b2db      	uxtb	r3, r3
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d1f6      	bne.n	1b8e <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    1ba0:	68fb      	ldr	r3, [r7, #12]
    1ba2:	8b1b      	ldrh	r3, [r3, #24]
    1ba4:	b29b      	uxth	r3, r3
    1ba6:	b2db      	uxtb	r3, r3
    1ba8:	001a      	movs	r2, r3
    1baa:	231c      	movs	r3, #28
    1bac:	4013      	ands	r3, r2
    1bae:	d001      	beq.n	1bb4 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
    1bb0:	2304      	movs	r3, #4
    1bb2:	e000      	b.n	1bb6 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
    1bb4:	2300      	movs	r3, #0
}
    1bb6:	0018      	movs	r0, r3
    1bb8:	46bd      	mov	sp, r7
    1bba:	b004      	add	sp, #16
    1bbc:	bd80      	pop	{r7, pc}
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	2000008c 	.word	0x2000008c
    1bc4:	41004000 	.word	0x41004000
    1bc8:	00001769 	.word	0x00001769
    1bcc:	ffffa502 	.word	0xffffa502

00001bd0 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    1bd0:	b580      	push	{r7, lr}
    1bd2:	b082      	sub	sp, #8
    1bd4:	af00      	add	r7, sp, #0
    1bd6:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    1bd8:	687b      	ldr	r3, [r7, #4]
    1bda:	2b00      	cmp	r3, #0
    1bdc:	d00c      	beq.n	1bf8 <delay_cycles+0x28>
		SysTick->LOAD = n;
    1bde:	4b08      	ldr	r3, [pc, #32]	; (1c00 <delay_cycles+0x30>)
    1be0:	687a      	ldr	r2, [r7, #4]
    1be2:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    1be4:	4b06      	ldr	r3, [pc, #24]	; (1c00 <delay_cycles+0x30>)
    1be6:	2200      	movs	r2, #0
    1be8:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	4b04      	ldr	r3, [pc, #16]	; (1c00 <delay_cycles+0x30>)
    1bee:	681a      	ldr	r2, [r3, #0]
    1bf0:	2380      	movs	r3, #128	; 0x80
    1bf2:	025b      	lsls	r3, r3, #9
    1bf4:	4013      	ands	r3, r2
    1bf6:	d0f9      	beq.n	1bec <delay_cycles+0x1c>
		};
	}
}
    1bf8:	46c0      	nop			; (mov r8, r8)
    1bfa:	46bd      	mov	sp, r7
    1bfc:	b002      	add	sp, #8
    1bfe:	bd80      	pop	{r7, pc}
    1c00:	e000e010 	.word	0xe000e010

00001c04 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1c04:	b580      	push	{r7, lr}
    1c06:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1c08:	2000      	movs	r0, #0
    1c0a:	4b0f      	ldr	r3, [pc, #60]	; (1c48 <delay_init+0x44>)
    1c0c:	4798      	blx	r3
    1c0e:	0002      	movs	r2, r0
    1c10:	4b0e      	ldr	r3, [pc, #56]	; (1c4c <delay_init+0x48>)
    1c12:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    1c14:	4b0d      	ldr	r3, [pc, #52]	; (1c4c <delay_init+0x48>)
    1c16:	6818      	ldr	r0, [r3, #0]
    1c18:	4b0d      	ldr	r3, [pc, #52]	; (1c50 <delay_init+0x4c>)
    1c1a:	22fa      	movs	r2, #250	; 0xfa
    1c1c:	0091      	lsls	r1, r2, #2
    1c1e:	4798      	blx	r3
    1c20:	0003      	movs	r3, r0
    1c22:	001a      	movs	r2, r3
    1c24:	4b09      	ldr	r3, [pc, #36]	; (1c4c <delay_init+0x48>)
    1c26:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1c28:	4b08      	ldr	r3, [pc, #32]	; (1c4c <delay_init+0x48>)
    1c2a:	6818      	ldr	r0, [r3, #0]
    1c2c:	4b08      	ldr	r3, [pc, #32]	; (1c50 <delay_init+0x4c>)
    1c2e:	22fa      	movs	r2, #250	; 0xfa
    1c30:	0091      	lsls	r1, r2, #2
    1c32:	4798      	blx	r3
    1c34:	0003      	movs	r3, r0
    1c36:	001a      	movs	r2, r3
    1c38:	4b06      	ldr	r3, [pc, #24]	; (1c54 <delay_init+0x50>)
    1c3a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1c3c:	4b06      	ldr	r3, [pc, #24]	; (1c58 <delay_init+0x54>)
    1c3e:	2205      	movs	r2, #5
    1c40:	601a      	str	r2, [r3, #0]
}
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	46bd      	mov	sp, r7
    1c46:	bd80      	pop	{r7, pc}
    1c48:	00003759 	.word	0x00003759
    1c4c:	20000000 	.word	0x20000000
    1c50:	00004841 	.word	0x00004841
    1c54:	20000004 	.word	0x20000004
    1c58:	e000e010 	.word	0xe000e010

00001c5c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1c5c:	b580      	push	{r7, lr}
    1c5e:	b082      	sub	sp, #8
    1c60:	af00      	add	r7, sp, #0
    1c62:	6078      	str	r0, [r7, #4]
	while (n--) {
    1c64:	e004      	b.n	1c70 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1c66:	4b07      	ldr	r3, [pc, #28]	; (1c84 <delay_cycles_ms+0x28>)
    1c68:	681b      	ldr	r3, [r3, #0]
    1c6a:	0018      	movs	r0, r3
    1c6c:	4b06      	ldr	r3, [pc, #24]	; (1c88 <delay_cycles_ms+0x2c>)
    1c6e:	4798      	blx	r3
	while (n--) {
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	1e5a      	subs	r2, r3, #1
    1c74:	607a      	str	r2, [r7, #4]
    1c76:	2b00      	cmp	r3, #0
    1c78:	d1f5      	bne.n	1c66 <delay_cycles_ms+0xa>
	}
}
    1c7a:	46c0      	nop			; (mov r8, r8)
    1c7c:	46bd      	mov	sp, r7
    1c7e:	b002      	add	sp, #8
    1c80:	bd80      	pop	{r7, pc}
    1c82:	46c0      	nop			; (mov r8, r8)
    1c84:	20000000 	.word	0x20000000
    1c88:	00001bd1 	.word	0x00001bd1

00001c8c <system_gclk_chan_get_config_defaults>:
{
    1c8c:	b580      	push	{r7, lr}
    1c8e:	b082      	sub	sp, #8
    1c90:	af00      	add	r7, sp, #0
    1c92:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1c94:	687b      	ldr	r3, [r7, #4]
    1c96:	2200      	movs	r2, #0
    1c98:	701a      	strb	r2, [r3, #0]
}
    1c9a:	46c0      	nop			; (mov r8, r8)
    1c9c:	46bd      	mov	sp, r7
    1c9e:	b002      	add	sp, #8
    1ca0:	bd80      	pop	{r7, pc}

00001ca2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ca4:	b08d      	sub	sp, #52	; 0x34
    1ca6:	af00      	add	r7, sp, #0
    1ca8:	60b8      	str	r0, [r7, #8]
    1caa:	60f9      	str	r1, [r7, #12]
    1cac:	603a      	str	r2, [r7, #0]
    1cae:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1cb0:	2300      	movs	r3, #0
    1cb2:	2400      	movs	r4, #0
    1cb4:	623b      	str	r3, [r7, #32]
    1cb6:	627c      	str	r4, [r7, #36]	; 0x24
    1cb8:	2300      	movs	r3, #0
    1cba:	2400      	movs	r4, #0
    1cbc:	61bb      	str	r3, [r7, #24]
    1cbe:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    1cc0:	233f      	movs	r3, #63	; 0x3f
    1cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    1cc4:	e053      	b.n	1d6e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    1cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1cc8:	3b20      	subs	r3, #32
    1cca:	2b00      	cmp	r3, #0
    1ccc:	db04      	blt.n	1cd8 <long_division+0x36>
    1cce:	2201      	movs	r2, #1
    1cd0:	409a      	lsls	r2, r3
    1cd2:	0013      	movs	r3, r2
    1cd4:	617b      	str	r3, [r7, #20]
    1cd6:	e00b      	b.n	1cf0 <long_division+0x4e>
    1cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1cda:	2220      	movs	r2, #32
    1cdc:	1ad3      	subs	r3, r2, r3
    1cde:	2201      	movs	r2, #1
    1ce0:	40da      	lsrs	r2, r3
    1ce2:	0013      	movs	r3, r2
    1ce4:	2100      	movs	r1, #0
    1ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1ce8:	4091      	lsls	r1, r2
    1cea:	000a      	movs	r2, r1
    1cec:	4313      	orrs	r3, r2
    1cee:	617b      	str	r3, [r7, #20]
    1cf0:	2201      	movs	r2, #1
    1cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1cf4:	409a      	lsls	r2, r3
    1cf6:	0013      	movs	r3, r2
    1cf8:	613b      	str	r3, [r7, #16]

		r = r << 1;
    1cfa:	69bb      	ldr	r3, [r7, #24]
    1cfc:	69fc      	ldr	r4, [r7, #28]
    1cfe:	18db      	adds	r3, r3, r3
    1d00:	4164      	adcs	r4, r4
    1d02:	61bb      	str	r3, [r7, #24]
    1d04:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    1d06:	68bb      	ldr	r3, [r7, #8]
    1d08:	693a      	ldr	r2, [r7, #16]
    1d0a:	401a      	ands	r2, r3
    1d0c:	0015      	movs	r5, r2
    1d0e:	68fb      	ldr	r3, [r7, #12]
    1d10:	697a      	ldr	r2, [r7, #20]
    1d12:	401a      	ands	r2, r3
    1d14:	0016      	movs	r6, r2
    1d16:	002b      	movs	r3, r5
    1d18:	4333      	orrs	r3, r6
    1d1a:	d007      	beq.n	1d2c <long_division+0x8a>
			r |= 0x01;
    1d1c:	69bb      	ldr	r3, [r7, #24]
    1d1e:	2201      	movs	r2, #1
    1d20:	4313      	orrs	r3, r2
    1d22:	61bb      	str	r3, [r7, #24]
    1d24:	69fb      	ldr	r3, [r7, #28]
    1d26:	2200      	movs	r2, #0
    1d28:	4313      	orrs	r3, r2
    1d2a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    1d2c:	687a      	ldr	r2, [r7, #4]
    1d2e:	69fb      	ldr	r3, [r7, #28]
    1d30:	429a      	cmp	r2, r3
    1d32:	d819      	bhi.n	1d68 <long_division+0xc6>
    1d34:	687a      	ldr	r2, [r7, #4]
    1d36:	69fb      	ldr	r3, [r7, #28]
    1d38:	429a      	cmp	r2, r3
    1d3a:	d103      	bne.n	1d44 <long_division+0xa2>
    1d3c:	683a      	ldr	r2, [r7, #0]
    1d3e:	69bb      	ldr	r3, [r7, #24]
    1d40:	429a      	cmp	r2, r3
    1d42:	d811      	bhi.n	1d68 <long_division+0xc6>
			r = r - d;
    1d44:	69b9      	ldr	r1, [r7, #24]
    1d46:	69fa      	ldr	r2, [r7, #28]
    1d48:	683b      	ldr	r3, [r7, #0]
    1d4a:	687c      	ldr	r4, [r7, #4]
    1d4c:	1ac9      	subs	r1, r1, r3
    1d4e:	41a2      	sbcs	r2, r4
    1d50:	000b      	movs	r3, r1
    1d52:	0014      	movs	r4, r2
    1d54:	61bb      	str	r3, [r7, #24]
    1d56:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    1d58:	6a3a      	ldr	r2, [r7, #32]
    1d5a:	693b      	ldr	r3, [r7, #16]
    1d5c:	4313      	orrs	r3, r2
    1d5e:	623b      	str	r3, [r7, #32]
    1d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1d62:	697b      	ldr	r3, [r7, #20]
    1d64:	4313      	orrs	r3, r2
    1d66:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    1d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1d6a:	3b01      	subs	r3, #1
    1d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    1d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1d70:	2b00      	cmp	r3, #0
    1d72:	daa8      	bge.n	1cc6 <long_division+0x24>
		}
	}

	return q;
    1d74:	6a3b      	ldr	r3, [r7, #32]
    1d76:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    1d78:	0018      	movs	r0, r3
    1d7a:	0021      	movs	r1, r4
    1d7c:	46bd      	mov	sp, r7
    1d7e:	b00d      	add	sp, #52	; 0x34
    1d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d82 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1d82:	b580      	push	{r7, lr}
    1d84:	b086      	sub	sp, #24
    1d86:	af00      	add	r7, sp, #0
    1d88:	60f8      	str	r0, [r7, #12]
    1d8a:	60b9      	str	r1, [r7, #8]
    1d8c:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    1d8e:	2316      	movs	r3, #22
    1d90:	18fb      	adds	r3, r7, r3
    1d92:	2200      	movs	r2, #0
    1d94:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    1d96:	68bb      	ldr	r3, [r7, #8]
    1d98:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1d9a:	68bb      	ldr	r3, [r7, #8]
    1d9c:	085a      	lsrs	r2, r3, #1
    1d9e:	68fb      	ldr	r3, [r7, #12]
    1da0:	429a      	cmp	r2, r3
    1da2:	d201      	bcs.n	1da8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1da4:	2340      	movs	r3, #64	; 0x40
    1da6:	e026      	b.n	1df6 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    1da8:	68bb      	ldr	r3, [r7, #8]
    1daa:	085b      	lsrs	r3, r3, #1
    1dac:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    1dae:	e00a      	b.n	1dc6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    1db0:	693a      	ldr	r2, [r7, #16]
    1db2:	68fb      	ldr	r3, [r7, #12]
    1db4:	1ad3      	subs	r3, r2, r3
    1db6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    1db8:	2316      	movs	r3, #22
    1dba:	18fb      	adds	r3, r7, r3
    1dbc:	881a      	ldrh	r2, [r3, #0]
    1dbe:	2316      	movs	r3, #22
    1dc0:	18fb      	adds	r3, r7, r3
    1dc2:	3201      	adds	r2, #1
    1dc4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    1dc6:	693a      	ldr	r2, [r7, #16]
    1dc8:	68fb      	ldr	r3, [r7, #12]
    1dca:	429a      	cmp	r2, r3
    1dcc:	d2f0      	bcs.n	1db0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    1dce:	2316      	movs	r3, #22
    1dd0:	18fb      	adds	r3, r7, r3
    1dd2:	2216      	movs	r2, #22
    1dd4:	18ba      	adds	r2, r7, r2
    1dd6:	8812      	ldrh	r2, [r2, #0]
    1dd8:	3a01      	subs	r2, #1
    1dda:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1ddc:	2316      	movs	r3, #22
    1dde:	18fb      	adds	r3, r7, r3
    1de0:	881b      	ldrh	r3, [r3, #0]
    1de2:	2bff      	cmp	r3, #255	; 0xff
    1de4:	d901      	bls.n	1dea <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1de6:	2340      	movs	r3, #64	; 0x40
    1de8:	e005      	b.n	1df6 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    1dea:	687b      	ldr	r3, [r7, #4]
    1dec:	2216      	movs	r2, #22
    1dee:	18ba      	adds	r2, r7, r2
    1df0:	8812      	ldrh	r2, [r2, #0]
    1df2:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    1df4:	2300      	movs	r3, #0
	}
}
    1df6:	0018      	movs	r0, r3
    1df8:	46bd      	mov	sp, r7
    1dfa:	b006      	add	sp, #24
    1dfc:	bd80      	pop	{r7, pc}
	...

00001e00 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e02:	b0a1      	sub	sp, #132	; 0x84
    1e04:	af00      	add	r7, sp, #0
    1e06:	64f8      	str	r0, [r7, #76]	; 0x4c
    1e08:	64b9      	str	r1, [r7, #72]	; 0x48
    1e0a:	647a      	str	r2, [r7, #68]	; 0x44
    1e0c:	2243      	movs	r2, #67	; 0x43
    1e0e:	18ba      	adds	r2, r7, r2
    1e10:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    1e12:	2300      	movs	r3, #0
    1e14:	2400      	movs	r4, #0
    1e16:	673b      	str	r3, [r7, #112]	; 0x70
    1e18:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    1e1a:	2300      	movs	r3, #0
    1e1c:	2400      	movs	r4, #0
    1e1e:	66bb      	str	r3, [r7, #104]	; 0x68
    1e20:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    1e22:	2300      	movs	r3, #0
    1e24:	2400      	movs	r4, #0
    1e26:	67bb      	str	r3, [r7, #120]	; 0x78
    1e28:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    1e2a:	2300      	movs	r3, #0
    1e2c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1e2e:	2358      	movs	r3, #88	; 0x58
    1e30:	2240      	movs	r2, #64	; 0x40
    1e32:	4694      	mov	ip, r2
    1e34:	44bc      	add	ip, r7
    1e36:	4463      	add	r3, ip
    1e38:	781a      	ldrb	r2, [r3, #0]
    1e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1e3c:	435a      	muls	r2, r3
    1e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1e40:	429a      	cmp	r2, r3
    1e42:	d901      	bls.n	1e48 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e44:	2340      	movs	r3, #64	; 0x40
    1e46:	e0b3      	b.n	1fb0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1e48:	2343      	movs	r3, #67	; 0x43
    1e4a:	18fb      	adds	r3, r7, r3
    1e4c:	781b      	ldrb	r3, [r3, #0]
    1e4e:	2b00      	cmp	r3, #0
    1e50:	d13d      	bne.n	1ece <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1e52:	2358      	movs	r3, #88	; 0x58
    1e54:	2240      	movs	r2, #64	; 0x40
    1e56:	4694      	mov	ip, r2
    1e58:	44bc      	add	ip, r7
    1e5a:	4463      	add	r3, ip
    1e5c:	781b      	ldrb	r3, [r3, #0]
    1e5e:	b2db      	uxtb	r3, r3
    1e60:	613b      	str	r3, [r7, #16]
    1e62:	2300      	movs	r3, #0
    1e64:	617b      	str	r3, [r7, #20]
    1e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1e68:	60bb      	str	r3, [r7, #8]
    1e6a:	2300      	movs	r3, #0
    1e6c:	60fb      	str	r3, [r7, #12]
    1e6e:	4c52      	ldr	r4, [pc, #328]	; (1fb8 <_sercom_get_async_baud_val+0x1b8>)
    1e70:	68ba      	ldr	r2, [r7, #8]
    1e72:	68fb      	ldr	r3, [r7, #12]
    1e74:	6938      	ldr	r0, [r7, #16]
    1e76:	6979      	ldr	r1, [r7, #20]
    1e78:	47a0      	blx	r4
    1e7a:	0003      	movs	r3, r0
    1e7c:	000c      	movs	r4, r1
    1e7e:	001b      	movs	r3, r3
    1e80:	65fb      	str	r3, [r7, #92]	; 0x5c
    1e82:	2300      	movs	r3, #0
    1e84:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    1e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1e88:	603b      	str	r3, [r7, #0]
    1e8a:	2300      	movs	r3, #0
    1e8c:	607b      	str	r3, [r7, #4]
    1e8e:	6db8      	ldr	r0, [r7, #88]	; 0x58
    1e90:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    1e92:	683a      	ldr	r2, [r7, #0]
    1e94:	687b      	ldr	r3, [r7, #4]
    1e96:	4c49      	ldr	r4, [pc, #292]	; (1fbc <_sercom_get_async_baud_val+0x1bc>)
    1e98:	47a0      	blx	r4
    1e9a:	0003      	movs	r3, r0
    1e9c:	000c      	movs	r4, r1
    1e9e:	673b      	str	r3, [r7, #112]	; 0x70
    1ea0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1ea2:	2100      	movs	r1, #0
    1ea4:	2201      	movs	r2, #1
    1ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1ea8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    1eaa:	1ac9      	subs	r1, r1, r3
    1eac:	41a2      	sbcs	r2, r4
    1eae:	000b      	movs	r3, r1
    1eb0:	0014      	movs	r4, r2
    1eb2:	66bb      	str	r3, [r7, #104]	; 0x68
    1eb4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    1eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1eb8:	0c1b      	lsrs	r3, r3, #16
    1eba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    1ebc:	0416      	lsls	r6, r2, #16
    1ebe:	431e      	orrs	r6, r3
    1ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1ec2:	041d      	lsls	r5, r3, #16
    1ec4:	0033      	movs	r3, r6
    1ec6:	67bb      	str	r3, [r7, #120]	; 0x78
    1ec8:	2300      	movs	r3, #0
    1eca:	67fb      	str	r3, [r7, #124]	; 0x7c
    1ecc:	e06a      	b.n	1fa4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1ece:	2343      	movs	r3, #67	; 0x43
    1ed0:	18fb      	adds	r3, r7, r3
    1ed2:	781b      	ldrb	r3, [r3, #0]
    1ed4:	2b01      	cmp	r3, #1
    1ed6:	d165      	bne.n	1fa4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    1ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1eda:	633b      	str	r3, [r7, #48]	; 0x30
    1edc:	2300      	movs	r3, #0
    1ede:	637b      	str	r3, [r7, #52]	; 0x34
    1ee0:	2358      	movs	r3, #88	; 0x58
    1ee2:	2240      	movs	r2, #64	; 0x40
    1ee4:	4694      	mov	ip, r2
    1ee6:	44bc      	add	ip, r7
    1ee8:	4463      	add	r3, ip
    1eea:	781b      	ldrb	r3, [r3, #0]
    1eec:	b2db      	uxtb	r3, r3
    1eee:	62bb      	str	r3, [r7, #40]	; 0x28
    1ef0:	2300      	movs	r3, #0
    1ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    1ef4:	4c30      	ldr	r4, [pc, #192]	; (1fb8 <_sercom_get_async_baud_val+0x1b8>)
    1ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1efc:	6b79      	ldr	r1, [r7, #52]	; 0x34
    1efe:	47a0      	blx	r4
    1f00:	0003      	movs	r3, r0
    1f02:	000c      	movs	r4, r1
    1f04:	65bb      	str	r3, [r7, #88]	; 0x58
    1f06:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    1f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1f0a:	623b      	str	r3, [r7, #32]
    1f0c:	2300      	movs	r3, #0
    1f0e:	627b      	str	r3, [r7, #36]	; 0x24
    1f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1f12:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1f14:	001a      	movs	r2, r3
    1f16:	0023      	movs	r3, r4
    1f18:	6a38      	ldr	r0, [r7, #32]
    1f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1f1c:	4c27      	ldr	r4, [pc, #156]	; (1fbc <_sercom_get_async_baud_val+0x1bc>)
    1f1e:	47a0      	blx	r4
    1f20:	0003      	movs	r3, r0
    1f22:	000c      	movs	r4, r1
    1f24:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    1f26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1f28:	2380      	movs	r3, #128	; 0x80
    1f2a:	019b      	lsls	r3, r3, #6
    1f2c:	429a      	cmp	r2, r3
    1f2e:	d901      	bls.n	1f34 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1f30:	2340      	movs	r3, #64	; 0x40
    1f32:	e03d      	b.n	1fb0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1f36:	61bb      	str	r3, [r7, #24]
    1f38:	2300      	movs	r3, #0
    1f3a:	61fb      	str	r3, [r7, #28]
    1f3c:	69b9      	ldr	r1, [r7, #24]
    1f3e:	69fa      	ldr	r2, [r7, #28]
    1f40:	000b      	movs	r3, r1
    1f42:	0f5b      	lsrs	r3, r3, #29
    1f44:	0010      	movs	r0, r2
    1f46:	00c0      	lsls	r0, r0, #3
    1f48:	63f8      	str	r0, [r7, #60]	; 0x3c
    1f4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    1f4c:	4318      	orrs	r0, r3
    1f4e:	63f8      	str	r0, [r7, #60]	; 0x3c
    1f50:	000b      	movs	r3, r1
    1f52:	00db      	lsls	r3, r3, #3
    1f54:	63bb      	str	r3, [r7, #56]	; 0x38
    1f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1f58:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1f5a:	001a      	movs	r2, r3
    1f5c:	0023      	movs	r3, r4
    1f5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    1f60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    1f62:	4c16      	ldr	r4, [pc, #88]	; (1fbc <_sercom_get_async_baud_val+0x1bc>)
    1f64:	47a0      	blx	r4
    1f66:	0003      	movs	r3, r0
    1f68:	000c      	movs	r4, r1
    1f6a:	65bb      	str	r3, [r7, #88]	; 0x58
    1f6c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    1f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1f70:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1f72:	b2d9      	uxtb	r1, r3
    1f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1f76:	b2db      	uxtb	r3, r3
    1f78:	00db      	lsls	r3, r3, #3
    1f7a:	b2da      	uxtb	r2, r3
    1f7c:	2317      	movs	r3, #23
    1f7e:	2040      	movs	r0, #64	; 0x40
    1f80:	4684      	mov	ip, r0
    1f82:	44bc      	add	ip, r7
    1f84:	4463      	add	r3, ip
    1f86:	1a8a      	subs	r2, r1, r2
    1f88:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    1f8a:	2317      	movs	r3, #23
    1f8c:	2240      	movs	r2, #64	; 0x40
    1f8e:	4694      	mov	ip, r2
    1f90:	44bc      	add	ip, r7
    1f92:	4463      	add	r3, ip
    1f94:	781b      	ldrb	r3, [r3, #0]
    1f96:	035b      	lsls	r3, r3, #13
    1f98:	001a      	movs	r2, r3
    1f9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1f9c:	4313      	orrs	r3, r2
    1f9e:	67bb      	str	r3, [r7, #120]	; 0x78
    1fa0:	2300      	movs	r3, #0
    1fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    1fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1fa6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    1fa8:	b29a      	uxth	r2, r3
    1faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1fac:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    1fae:	2300      	movs	r3, #0
}
    1fb0:	0018      	movs	r0, r3
    1fb2:	46bd      	mov	sp, r7
    1fb4:	b021      	add	sp, #132	; 0x84
    1fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fb8:	00004959 	.word	0x00004959
    1fbc:	00001ca3 	.word	0x00001ca3

00001fc0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1fc0:	b580      	push	{r7, lr}
    1fc2:	b084      	sub	sp, #16
    1fc4:	af00      	add	r7, sp, #0
    1fc6:	0002      	movs	r2, r0
    1fc8:	1dfb      	adds	r3, r7, #7
    1fca:	701a      	strb	r2, [r3, #0]
    1fcc:	1dbb      	adds	r3, r7, #6
    1fce:	1c0a      	adds	r2, r1, #0
    1fd0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1fd2:	4b1a      	ldr	r3, [pc, #104]	; (203c <STACK_SIZE+0x3c>)
    1fd4:	781b      	ldrb	r3, [r3, #0]
    1fd6:	2201      	movs	r2, #1
    1fd8:	4053      	eors	r3, r2
    1fda:	b2db      	uxtb	r3, r3
    1fdc:	2b00      	cmp	r3, #0
    1fde:	d103      	bne.n	1fe8 <sercom_set_gclk_generator+0x28>
    1fe0:	1dbb      	adds	r3, r7, #6
    1fe2:	781b      	ldrb	r3, [r3, #0]
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d01b      	beq.n	2020 <STACK_SIZE+0x20>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1fe8:	230c      	movs	r3, #12
    1fea:	18fb      	adds	r3, r7, r3
    1fec:	0018      	movs	r0, r3
    1fee:	4b14      	ldr	r3, [pc, #80]	; (2040 <STACK_SIZE+0x40>)
    1ff0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    1ff2:	230c      	movs	r3, #12
    1ff4:	18fb      	adds	r3, r7, r3
    1ff6:	1dfa      	adds	r2, r7, #7
    1ff8:	7812      	ldrb	r2, [r2, #0]
    1ffa:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1ffc:	230c      	movs	r3, #12
    1ffe:	18fb      	adds	r3, r7, r3
    2000:	0019      	movs	r1, r3
    2002:	2013      	movs	r0, #19
    2004:	4b0f      	ldr	r3, [pc, #60]	; (2044 <STACK_SIZE+0x44>)
    2006:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    2008:	2013      	movs	r0, #19
    200a:	4b0f      	ldr	r3, [pc, #60]	; (2048 <STACK_SIZE+0x48>)
    200c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    200e:	4b0b      	ldr	r3, [pc, #44]	; (203c <STACK_SIZE+0x3c>)
    2010:	1dfa      	adds	r2, r7, #7
    2012:	7812      	ldrb	r2, [r2, #0]
    2014:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    2016:	4b09      	ldr	r3, [pc, #36]	; (203c <STACK_SIZE+0x3c>)
    2018:	2201      	movs	r2, #1
    201a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    201c:	2300      	movs	r3, #0
    201e:	e008      	b.n	2032 <STACK_SIZE+0x32>
	} else if (generator_source == _sercom_config.generator_source) {
    2020:	4b06      	ldr	r3, [pc, #24]	; (203c <STACK_SIZE+0x3c>)
    2022:	785b      	ldrb	r3, [r3, #1]
    2024:	1dfa      	adds	r2, r7, #7
    2026:	7812      	ldrb	r2, [r2, #0]
    2028:	429a      	cmp	r2, r3
    202a:	d101      	bne.n	2030 <STACK_SIZE+0x30>
		/* Return status OK if same config */
		return STATUS_OK;
    202c:	2300      	movs	r3, #0
    202e:	e000      	b.n	2032 <STACK_SIZE+0x32>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    2030:	231d      	movs	r3, #29
}
    2032:	0018      	movs	r0, r3
    2034:	46bd      	mov	sp, r7
    2036:	b004      	add	sp, #16
    2038:	bd80      	pop	{r7, pc}
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	20000094 	.word	0x20000094
    2040:	00001c8d 	.word	0x00001c8d
    2044:	00003831 	.word	0x00003831
    2048:	00003875 	.word	0x00003875

0000204c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    204c:	b580      	push	{r7, lr}
    204e:	b082      	sub	sp, #8
    2050:	af00      	add	r7, sp, #0
    2052:	6078      	str	r0, [r7, #4]
    2054:	000a      	movs	r2, r1
    2056:	1cfb      	adds	r3, r7, #3
    2058:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    205a:	687b      	ldr	r3, [r7, #4]
    205c:	4a4d      	ldr	r2, [pc, #308]	; (2194 <_sercom_get_default_pad+0x148>)
    205e:	4293      	cmp	r3, r2
    2060:	d03f      	beq.n	20e2 <_sercom_get_default_pad+0x96>
    2062:	4a4c      	ldr	r2, [pc, #304]	; (2194 <_sercom_get_default_pad+0x148>)
    2064:	4293      	cmp	r3, r2
    2066:	d806      	bhi.n	2076 <_sercom_get_default_pad+0x2a>
    2068:	4a4b      	ldr	r2, [pc, #300]	; (2198 <_sercom_get_default_pad+0x14c>)
    206a:	4293      	cmp	r3, r2
    206c:	d00f      	beq.n	208e <_sercom_get_default_pad+0x42>
    206e:	4a4b      	ldr	r2, [pc, #300]	; (219c <_sercom_get_default_pad+0x150>)
    2070:	4293      	cmp	r3, r2
    2072:	d021      	beq.n	20b8 <_sercom_get_default_pad+0x6c>
    2074:	e089      	b.n	218a <_sercom_get_default_pad+0x13e>
    2076:	4a4a      	ldr	r2, [pc, #296]	; (21a0 <_sercom_get_default_pad+0x154>)
    2078:	4293      	cmp	r3, r2
    207a:	d100      	bne.n	207e <_sercom_get_default_pad+0x32>
    207c:	e05b      	b.n	2136 <_sercom_get_default_pad+0xea>
    207e:	4a49      	ldr	r2, [pc, #292]	; (21a4 <_sercom_get_default_pad+0x158>)
    2080:	4293      	cmp	r3, r2
    2082:	d100      	bne.n	2086 <_sercom_get_default_pad+0x3a>
    2084:	e06c      	b.n	2160 <_sercom_get_default_pad+0x114>
    2086:	4a48      	ldr	r2, [pc, #288]	; (21a8 <_sercom_get_default_pad+0x15c>)
    2088:	4293      	cmp	r3, r2
    208a:	d03f      	beq.n	210c <_sercom_get_default_pad+0xc0>
    208c:	e07d      	b.n	218a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    208e:	1cfb      	adds	r3, r7, #3
    2090:	781b      	ldrb	r3, [r3, #0]
    2092:	2b01      	cmp	r3, #1
    2094:	d00a      	beq.n	20ac <_sercom_get_default_pad+0x60>
    2096:	dc02      	bgt.n	209e <_sercom_get_default_pad+0x52>
    2098:	2b00      	cmp	r3, #0
    209a:	d005      	beq.n	20a8 <_sercom_get_default_pad+0x5c>
    209c:	e075      	b.n	218a <_sercom_get_default_pad+0x13e>
    209e:	2b02      	cmp	r3, #2
    20a0:	d006      	beq.n	20b0 <_sercom_get_default_pad+0x64>
    20a2:	2b03      	cmp	r3, #3
    20a4:	d006      	beq.n	20b4 <_sercom_get_default_pad+0x68>
    20a6:	e070      	b.n	218a <_sercom_get_default_pad+0x13e>
    20a8:	4b40      	ldr	r3, [pc, #256]	; (21ac <_sercom_get_default_pad+0x160>)
    20aa:	e06f      	b.n	218c <_sercom_get_default_pad+0x140>
    20ac:	4b40      	ldr	r3, [pc, #256]	; (21b0 <_sercom_get_default_pad+0x164>)
    20ae:	e06d      	b.n	218c <_sercom_get_default_pad+0x140>
    20b0:	4b40      	ldr	r3, [pc, #256]	; (21b4 <_sercom_get_default_pad+0x168>)
    20b2:	e06b      	b.n	218c <_sercom_get_default_pad+0x140>
    20b4:	4b40      	ldr	r3, [pc, #256]	; (21b8 <_sercom_get_default_pad+0x16c>)
    20b6:	e069      	b.n	218c <_sercom_get_default_pad+0x140>
    20b8:	1cfb      	adds	r3, r7, #3
    20ba:	781b      	ldrb	r3, [r3, #0]
    20bc:	2b01      	cmp	r3, #1
    20be:	d00a      	beq.n	20d6 <_sercom_get_default_pad+0x8a>
    20c0:	dc02      	bgt.n	20c8 <_sercom_get_default_pad+0x7c>
    20c2:	2b00      	cmp	r3, #0
    20c4:	d005      	beq.n	20d2 <_sercom_get_default_pad+0x86>
    20c6:	e060      	b.n	218a <_sercom_get_default_pad+0x13e>
    20c8:	2b02      	cmp	r3, #2
    20ca:	d006      	beq.n	20da <_sercom_get_default_pad+0x8e>
    20cc:	2b03      	cmp	r3, #3
    20ce:	d006      	beq.n	20de <_sercom_get_default_pad+0x92>
    20d0:	e05b      	b.n	218a <_sercom_get_default_pad+0x13e>
    20d2:	2303      	movs	r3, #3
    20d4:	e05a      	b.n	218c <_sercom_get_default_pad+0x140>
    20d6:	4b39      	ldr	r3, [pc, #228]	; (21bc <_sercom_get_default_pad+0x170>)
    20d8:	e058      	b.n	218c <_sercom_get_default_pad+0x140>
    20da:	4b39      	ldr	r3, [pc, #228]	; (21c0 <_sercom_get_default_pad+0x174>)
    20dc:	e056      	b.n	218c <_sercom_get_default_pad+0x140>
    20de:	4b39      	ldr	r3, [pc, #228]	; (21c4 <_sercom_get_default_pad+0x178>)
    20e0:	e054      	b.n	218c <_sercom_get_default_pad+0x140>
    20e2:	1cfb      	adds	r3, r7, #3
    20e4:	781b      	ldrb	r3, [r3, #0]
    20e6:	2b01      	cmp	r3, #1
    20e8:	d00a      	beq.n	2100 <_sercom_get_default_pad+0xb4>
    20ea:	dc02      	bgt.n	20f2 <_sercom_get_default_pad+0xa6>
    20ec:	2b00      	cmp	r3, #0
    20ee:	d005      	beq.n	20fc <_sercom_get_default_pad+0xb0>
    20f0:	e04b      	b.n	218a <_sercom_get_default_pad+0x13e>
    20f2:	2b02      	cmp	r3, #2
    20f4:	d006      	beq.n	2104 <_sercom_get_default_pad+0xb8>
    20f6:	2b03      	cmp	r3, #3
    20f8:	d006      	beq.n	2108 <_sercom_get_default_pad+0xbc>
    20fa:	e046      	b.n	218a <_sercom_get_default_pad+0x13e>
    20fc:	4b32      	ldr	r3, [pc, #200]	; (21c8 <_sercom_get_default_pad+0x17c>)
    20fe:	e045      	b.n	218c <_sercom_get_default_pad+0x140>
    2100:	4b32      	ldr	r3, [pc, #200]	; (21cc <_sercom_get_default_pad+0x180>)
    2102:	e043      	b.n	218c <_sercom_get_default_pad+0x140>
    2104:	4b32      	ldr	r3, [pc, #200]	; (21d0 <_sercom_get_default_pad+0x184>)
    2106:	e041      	b.n	218c <_sercom_get_default_pad+0x140>
    2108:	4b32      	ldr	r3, [pc, #200]	; (21d4 <_sercom_get_default_pad+0x188>)
    210a:	e03f      	b.n	218c <_sercom_get_default_pad+0x140>
    210c:	1cfb      	adds	r3, r7, #3
    210e:	781b      	ldrb	r3, [r3, #0]
    2110:	2b01      	cmp	r3, #1
    2112:	d00a      	beq.n	212a <_sercom_get_default_pad+0xde>
    2114:	dc02      	bgt.n	211c <_sercom_get_default_pad+0xd0>
    2116:	2b00      	cmp	r3, #0
    2118:	d005      	beq.n	2126 <_sercom_get_default_pad+0xda>
    211a:	e036      	b.n	218a <_sercom_get_default_pad+0x13e>
    211c:	2b02      	cmp	r3, #2
    211e:	d006      	beq.n	212e <_sercom_get_default_pad+0xe2>
    2120:	2b03      	cmp	r3, #3
    2122:	d006      	beq.n	2132 <_sercom_get_default_pad+0xe6>
    2124:	e031      	b.n	218a <_sercom_get_default_pad+0x13e>
    2126:	4b2c      	ldr	r3, [pc, #176]	; (21d8 <_sercom_get_default_pad+0x18c>)
    2128:	e030      	b.n	218c <_sercom_get_default_pad+0x140>
    212a:	4b2c      	ldr	r3, [pc, #176]	; (21dc <_sercom_get_default_pad+0x190>)
    212c:	e02e      	b.n	218c <_sercom_get_default_pad+0x140>
    212e:	4b2c      	ldr	r3, [pc, #176]	; (21e0 <_sercom_get_default_pad+0x194>)
    2130:	e02c      	b.n	218c <_sercom_get_default_pad+0x140>
    2132:	4b2c      	ldr	r3, [pc, #176]	; (21e4 <_sercom_get_default_pad+0x198>)
    2134:	e02a      	b.n	218c <_sercom_get_default_pad+0x140>
    2136:	1cfb      	adds	r3, r7, #3
    2138:	781b      	ldrb	r3, [r3, #0]
    213a:	2b01      	cmp	r3, #1
    213c:	d00a      	beq.n	2154 <_sercom_get_default_pad+0x108>
    213e:	dc02      	bgt.n	2146 <_sercom_get_default_pad+0xfa>
    2140:	2b00      	cmp	r3, #0
    2142:	d005      	beq.n	2150 <_sercom_get_default_pad+0x104>
    2144:	e021      	b.n	218a <_sercom_get_default_pad+0x13e>
    2146:	2b02      	cmp	r3, #2
    2148:	d006      	beq.n	2158 <_sercom_get_default_pad+0x10c>
    214a:	2b03      	cmp	r3, #3
    214c:	d006      	beq.n	215c <_sercom_get_default_pad+0x110>
    214e:	e01c      	b.n	218a <_sercom_get_default_pad+0x13e>
    2150:	4b25      	ldr	r3, [pc, #148]	; (21e8 <_sercom_get_default_pad+0x19c>)
    2152:	e01b      	b.n	218c <_sercom_get_default_pad+0x140>
    2154:	4b25      	ldr	r3, [pc, #148]	; (21ec <_sercom_get_default_pad+0x1a0>)
    2156:	e019      	b.n	218c <_sercom_get_default_pad+0x140>
    2158:	4b25      	ldr	r3, [pc, #148]	; (21f0 <_sercom_get_default_pad+0x1a4>)
    215a:	e017      	b.n	218c <_sercom_get_default_pad+0x140>
    215c:	4b25      	ldr	r3, [pc, #148]	; (21f4 <_sercom_get_default_pad+0x1a8>)
    215e:	e015      	b.n	218c <_sercom_get_default_pad+0x140>
    2160:	1cfb      	adds	r3, r7, #3
    2162:	781b      	ldrb	r3, [r3, #0]
    2164:	2b01      	cmp	r3, #1
    2166:	d00a      	beq.n	217e <_sercom_get_default_pad+0x132>
    2168:	dc02      	bgt.n	2170 <_sercom_get_default_pad+0x124>
    216a:	2b00      	cmp	r3, #0
    216c:	d005      	beq.n	217a <_sercom_get_default_pad+0x12e>
    216e:	e00c      	b.n	218a <_sercom_get_default_pad+0x13e>
    2170:	2b02      	cmp	r3, #2
    2172:	d006      	beq.n	2182 <_sercom_get_default_pad+0x136>
    2174:	2b03      	cmp	r3, #3
    2176:	d006      	beq.n	2186 <_sercom_get_default_pad+0x13a>
    2178:	e007      	b.n	218a <_sercom_get_default_pad+0x13e>
    217a:	4b1f      	ldr	r3, [pc, #124]	; (21f8 <_sercom_get_default_pad+0x1ac>)
    217c:	e006      	b.n	218c <_sercom_get_default_pad+0x140>
    217e:	4b1f      	ldr	r3, [pc, #124]	; (21fc <_sercom_get_default_pad+0x1b0>)
    2180:	e004      	b.n	218c <_sercom_get_default_pad+0x140>
    2182:	4b1f      	ldr	r3, [pc, #124]	; (2200 <_sercom_get_default_pad+0x1b4>)
    2184:	e002      	b.n	218c <_sercom_get_default_pad+0x140>
    2186:	4b1f      	ldr	r3, [pc, #124]	; (2204 <_sercom_get_default_pad+0x1b8>)
    2188:	e000      	b.n	218c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    218a:	2300      	movs	r3, #0
}
    218c:	0018      	movs	r0, r3
    218e:	46bd      	mov	sp, r7
    2190:	b002      	add	sp, #8
    2192:	bd80      	pop	{r7, pc}
    2194:	42001000 	.word	0x42001000
    2198:	42000800 	.word	0x42000800
    219c:	42000c00 	.word	0x42000c00
    21a0:	42001800 	.word	0x42001800
    21a4:	42001c00 	.word	0x42001c00
    21a8:	42001400 	.word	0x42001400
    21ac:	00040003 	.word	0x00040003
    21b0:	00050003 	.word	0x00050003
    21b4:	00060003 	.word	0x00060003
    21b8:	00070003 	.word	0x00070003
    21bc:	00010003 	.word	0x00010003
    21c0:	001e0003 	.word	0x001e0003
    21c4:	001f0003 	.word	0x001f0003
    21c8:	00080003 	.word	0x00080003
    21cc:	00090003 	.word	0x00090003
    21d0:	000a0003 	.word	0x000a0003
    21d4:	000b0003 	.word	0x000b0003
    21d8:	00100003 	.word	0x00100003
    21dc:	00110003 	.word	0x00110003
    21e0:	00120003 	.word	0x00120003
    21e4:	00130003 	.word	0x00130003
    21e8:	000c0003 	.word	0x000c0003
    21ec:	000d0003 	.word	0x000d0003
    21f0:	000e0003 	.word	0x000e0003
    21f4:	000f0003 	.word	0x000f0003
    21f8:	00160003 	.word	0x00160003
    21fc:	00170003 	.word	0x00170003
    2200:	00180003 	.word	0x00180003
    2204:	00190003 	.word	0x00190003

00002208 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2208:	b590      	push	{r4, r7, lr}
    220a:	b08b      	sub	sp, #44	; 0x2c
    220c:	af00      	add	r7, sp, #0
    220e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    2210:	230c      	movs	r3, #12
    2212:	18fb      	adds	r3, r7, r3
    2214:	4a0f      	ldr	r2, [pc, #60]	; (2254 <_sercom_get_sercom_inst_index+0x4c>)
    2216:	ca13      	ldmia	r2!, {r0, r1, r4}
    2218:	c313      	stmia	r3!, {r0, r1, r4}
    221a:	ca13      	ldmia	r2!, {r0, r1, r4}
    221c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    221e:	2300      	movs	r3, #0
    2220:	627b      	str	r3, [r7, #36]	; 0x24
    2222:	e00e      	b.n	2242 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    2224:	230c      	movs	r3, #12
    2226:	18fb      	adds	r3, r7, r3
    2228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    222a:	0092      	lsls	r2, r2, #2
    222c:	58d3      	ldr	r3, [r2, r3]
    222e:	001a      	movs	r2, r3
    2230:	687b      	ldr	r3, [r7, #4]
    2232:	429a      	cmp	r2, r3
    2234:	d102      	bne.n	223c <_sercom_get_sercom_inst_index+0x34>
			return i;
    2236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2238:	b2db      	uxtb	r3, r3
    223a:	e006      	b.n	224a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    223e:	3301      	adds	r3, #1
    2240:	627b      	str	r3, [r7, #36]	; 0x24
    2242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2244:	2b05      	cmp	r3, #5
    2246:	d9ed      	bls.n	2224 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    2248:	2300      	movs	r3, #0
}
    224a:	0018      	movs	r0, r3
    224c:	46bd      	mov	sp, r7
    224e:	b00b      	add	sp, #44	; 0x2c
    2250:	bd90      	pop	{r4, r7, pc}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	00005c2c 	.word	0x00005c2c

00002258 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2258:	b580      	push	{r7, lr}
    225a:	b086      	sub	sp, #24
    225c:	af00      	add	r7, sp, #0
    225e:	60f8      	str	r0, [r7, #12]
    2260:	60b9      	str	r1, [r7, #8]
    2262:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    2264:	2300      	movs	r3, #0
    2266:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    2268:	68fb      	ldr	r3, [r7, #12]
    226a:	2b00      	cmp	r3, #0
    226c:	d012      	beq.n	2294 <_read+0x3c>
		return -1;
    226e:	2301      	movs	r3, #1
    2270:	425b      	negs	r3, r3
    2272:	e013      	b.n	229c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    2274:	4b0b      	ldr	r3, [pc, #44]	; (22a4 <_read+0x4c>)
    2276:	681a      	ldr	r2, [r3, #0]
    2278:	4b0b      	ldr	r3, [pc, #44]	; (22a8 <_read+0x50>)
    227a:	681b      	ldr	r3, [r3, #0]
    227c:	68b9      	ldr	r1, [r7, #8]
    227e:	0018      	movs	r0, r3
    2280:	4790      	blx	r2
		ptr++;
    2282:	68bb      	ldr	r3, [r7, #8]
    2284:	3301      	adds	r3, #1
    2286:	60bb      	str	r3, [r7, #8]
		nChars++;
    2288:	697b      	ldr	r3, [r7, #20]
    228a:	3301      	adds	r3, #1
    228c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    228e:	687b      	ldr	r3, [r7, #4]
    2290:	3b01      	subs	r3, #1
    2292:	607b      	str	r3, [r7, #4]
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	2b00      	cmp	r3, #0
    2298:	dcec      	bgt.n	2274 <_read+0x1c>
	}
	return nChars;
    229a:	697b      	ldr	r3, [r7, #20]
}
    229c:	0018      	movs	r0, r3
    229e:	46bd      	mov	sp, r7
    22a0:	b006      	add	sp, #24
    22a2:	bd80      	pop	{r7, pc}
    22a4:	20000120 	.word	0x20000120
    22a8:	20000128 	.word	0x20000128

000022ac <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    22ac:	b580      	push	{r7, lr}
    22ae:	b086      	sub	sp, #24
    22b0:	af00      	add	r7, sp, #0
    22b2:	60f8      	str	r0, [r7, #12]
    22b4:	60b9      	str	r1, [r7, #8]
    22b6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    22b8:	2300      	movs	r3, #0
    22ba:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    22bc:	68fb      	ldr	r3, [r7, #12]
    22be:	2b01      	cmp	r3, #1
    22c0:	d01d      	beq.n	22fe <_write+0x52>
    22c2:	68fb      	ldr	r3, [r7, #12]
    22c4:	2b02      	cmp	r3, #2
    22c6:	d01a      	beq.n	22fe <_write+0x52>
    22c8:	68fb      	ldr	r3, [r7, #12]
    22ca:	2b03      	cmp	r3, #3
    22cc:	d017      	beq.n	22fe <_write+0x52>
		return -1;
    22ce:	2301      	movs	r3, #1
    22d0:	425b      	negs	r3, r3
    22d2:	e018      	b.n	2306 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    22d4:	4b0e      	ldr	r3, [pc, #56]	; (2310 <_write+0x64>)
    22d6:	681a      	ldr	r2, [r3, #0]
    22d8:	4b0e      	ldr	r3, [pc, #56]	; (2314 <_write+0x68>)
    22da:	6818      	ldr	r0, [r3, #0]
    22dc:	68bb      	ldr	r3, [r7, #8]
    22de:	1c59      	adds	r1, r3, #1
    22e0:	60b9      	str	r1, [r7, #8]
    22e2:	781b      	ldrb	r3, [r3, #0]
    22e4:	0019      	movs	r1, r3
    22e6:	4790      	blx	r2
    22e8:	1e03      	subs	r3, r0, #0
    22ea:	da02      	bge.n	22f2 <_write+0x46>
			return -1;
    22ec:	2301      	movs	r3, #1
    22ee:	425b      	negs	r3, r3
    22f0:	e009      	b.n	2306 <_write+0x5a>
		}
		++nChars;
    22f2:	697b      	ldr	r3, [r7, #20]
    22f4:	3301      	adds	r3, #1
    22f6:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    22f8:	687b      	ldr	r3, [r7, #4]
    22fa:	3b01      	subs	r3, #1
    22fc:	607b      	str	r3, [r7, #4]
    22fe:	687b      	ldr	r3, [r7, #4]
    2300:	2b00      	cmp	r3, #0
    2302:	d1e7      	bne.n	22d4 <_write+0x28>
	}
	return nChars;
    2304:	697b      	ldr	r3, [r7, #20]
}
    2306:	0018      	movs	r0, r3
    2308:	46bd      	mov	sp, r7
    230a:	b006      	add	sp, #24
    230c:	bd80      	pop	{r7, pc}
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	20000124 	.word	0x20000124
    2314:	20000128 	.word	0x20000128

00002318 <system_gclk_chan_get_config_defaults>:
{
    2318:	b580      	push	{r7, lr}
    231a:	b082      	sub	sp, #8
    231c:	af00      	add	r7, sp, #0
    231e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    2320:	687b      	ldr	r3, [r7, #4]
    2322:	2200      	movs	r2, #0
    2324:	701a      	strb	r2, [r3, #0]
}
    2326:	46c0      	nop			; (mov r8, r8)
    2328:	46bd      	mov	sp, r7
    232a:	b002      	add	sp, #8
    232c:	bd80      	pop	{r7, pc}
	...

00002330 <system_apb_clock_set_mask>:
{
    2330:	b580      	push	{r7, lr}
    2332:	b082      	sub	sp, #8
    2334:	af00      	add	r7, sp, #0
    2336:	0002      	movs	r2, r0
    2338:	6039      	str	r1, [r7, #0]
    233a:	1dfb      	adds	r3, r7, #7
    233c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    233e:	1dfb      	adds	r3, r7, #7
    2340:	781b      	ldrb	r3, [r3, #0]
    2342:	2b01      	cmp	r3, #1
    2344:	d00a      	beq.n	235c <system_apb_clock_set_mask+0x2c>
    2346:	2b02      	cmp	r3, #2
    2348:	d00f      	beq.n	236a <system_apb_clock_set_mask+0x3a>
    234a:	2b00      	cmp	r3, #0
    234c:	d114      	bne.n	2378 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    234e:	4b0e      	ldr	r3, [pc, #56]	; (2388 <system_apb_clock_set_mask+0x58>)
    2350:	4a0d      	ldr	r2, [pc, #52]	; (2388 <system_apb_clock_set_mask+0x58>)
    2352:	6991      	ldr	r1, [r2, #24]
    2354:	683a      	ldr	r2, [r7, #0]
    2356:	430a      	orrs	r2, r1
    2358:	619a      	str	r2, [r3, #24]
			break;
    235a:	e00f      	b.n	237c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    235c:	4b0a      	ldr	r3, [pc, #40]	; (2388 <system_apb_clock_set_mask+0x58>)
    235e:	4a0a      	ldr	r2, [pc, #40]	; (2388 <system_apb_clock_set_mask+0x58>)
    2360:	69d1      	ldr	r1, [r2, #28]
    2362:	683a      	ldr	r2, [r7, #0]
    2364:	430a      	orrs	r2, r1
    2366:	61da      	str	r2, [r3, #28]
			break;
    2368:	e008      	b.n	237c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    236a:	4b07      	ldr	r3, [pc, #28]	; (2388 <system_apb_clock_set_mask+0x58>)
    236c:	4a06      	ldr	r2, [pc, #24]	; (2388 <system_apb_clock_set_mask+0x58>)
    236e:	6a11      	ldr	r1, [r2, #32]
    2370:	683a      	ldr	r2, [r7, #0]
    2372:	430a      	orrs	r2, r1
    2374:	621a      	str	r2, [r3, #32]
			break;
    2376:	e001      	b.n	237c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2378:	2317      	movs	r3, #23
    237a:	e000      	b.n	237e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    237c:	2300      	movs	r3, #0
}
    237e:	0018      	movs	r0, r3
    2380:	46bd      	mov	sp, r7
    2382:	b002      	add	sp, #8
    2384:	bd80      	pop	{r7, pc}
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	40000400 	.word	0x40000400

0000238c <system_pinmux_get_config_defaults>:
{
    238c:	b580      	push	{r7, lr}
    238e:	b082      	sub	sp, #8
    2390:	af00      	add	r7, sp, #0
    2392:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2394:	687b      	ldr	r3, [r7, #4]
    2396:	2280      	movs	r2, #128	; 0x80
    2398:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    239a:	687b      	ldr	r3, [r7, #4]
    239c:	2200      	movs	r2, #0
    239e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    23a0:	687b      	ldr	r3, [r7, #4]
    23a2:	2201      	movs	r2, #1
    23a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    23a6:	687b      	ldr	r3, [r7, #4]
    23a8:	2200      	movs	r2, #0
    23aa:	70da      	strb	r2, [r3, #3]
}
    23ac:	46c0      	nop			; (mov r8, r8)
    23ae:	46bd      	mov	sp, r7
    23b0:	b002      	add	sp, #8
    23b2:	bd80      	pop	{r7, pc}

000023b4 <system_is_debugger_present>:
{
    23b4:	b580      	push	{r7, lr}
    23b6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    23b8:	4b05      	ldr	r3, [pc, #20]	; (23d0 <system_is_debugger_present+0x1c>)
    23ba:	789b      	ldrb	r3, [r3, #2]
    23bc:	b2db      	uxtb	r3, r3
    23be:	001a      	movs	r2, r3
    23c0:	2302      	movs	r3, #2
    23c2:	4013      	ands	r3, r2
    23c4:	1e5a      	subs	r2, r3, #1
    23c6:	4193      	sbcs	r3, r2
    23c8:	b2db      	uxtb	r3, r3
}
    23ca:	0018      	movs	r0, r3
    23cc:	46bd      	mov	sp, r7
    23ce:	bd80      	pop	{r7, pc}
    23d0:	41002000 	.word	0x41002000

000023d4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    23d4:	b580      	push	{r7, lr}
    23d6:	b084      	sub	sp, #16
    23d8:	af00      	add	r7, sp, #0
    23da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    23dc:	687b      	ldr	r3, [r7, #4]
    23de:	681b      	ldr	r3, [r3, #0]
    23e0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    23e2:	68fb      	ldr	r3, [r7, #12]
    23e4:	69db      	ldr	r3, [r3, #28]
    23e6:	1e5a      	subs	r2, r3, #1
    23e8:	4193      	sbcs	r3, r2
    23ea:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    23ec:	0018      	movs	r0, r3
    23ee:	46bd      	mov	sp, r7
    23f0:	b004      	add	sp, #16
    23f2:	bd80      	pop	{r7, pc}

000023f4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    23f4:	b580      	push	{r7, lr}
    23f6:	b082      	sub	sp, #8
    23f8:	af00      	add	r7, sp, #0
    23fa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    23fc:	46c0      	nop			; (mov r8, r8)
    23fe:	687b      	ldr	r3, [r7, #4]
    2400:	0018      	movs	r0, r3
    2402:	4b04      	ldr	r3, [pc, #16]	; (2414 <_usart_wait_for_sync+0x20>)
    2404:	4798      	blx	r3
    2406:	1e03      	subs	r3, r0, #0
    2408:	d1f9      	bne.n	23fe <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    240a:	46c0      	nop			; (mov r8, r8)
    240c:	46bd      	mov	sp, r7
    240e:	b002      	add	sp, #8
    2410:	bd80      	pop	{r7, pc}
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	000023d5 	.word	0x000023d5

00002418 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    2418:	b5b0      	push	{r4, r5, r7, lr}
    241a:	b08c      	sub	sp, #48	; 0x30
    241c:	af02      	add	r7, sp, #8
    241e:	6078      	str	r0, [r7, #4]
    2420:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2422:	687b      	ldr	r3, [r7, #4]
    2424:	681b      	ldr	r3, [r3, #0]
    2426:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2428:	687b      	ldr	r3, [r7, #4]
    242a:	681b      	ldr	r3, [r3, #0]
    242c:	0018      	movs	r0, r3
    242e:	4bab      	ldr	r3, [pc, #684]	; (26dc <_usart_set_config+0x2c4>)
    2430:	4798      	blx	r3
    2432:	0003      	movs	r3, r0
    2434:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2436:	697b      	ldr	r3, [r7, #20]
    2438:	3314      	adds	r3, #20
    243a:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    243c:	2300      	movs	r3, #0
    243e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    2440:	2300      	movs	r3, #0
    2442:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    2444:	230a      	movs	r3, #10
    2446:	18fb      	adds	r3, r7, r3
    2448:	2200      	movs	r2, #0
    244a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    244c:	231f      	movs	r3, #31
    244e:	18fb      	adds	r3, r7, r3
    2450:	2200      	movs	r2, #0
    2452:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2454:	231e      	movs	r3, #30
    2456:	18fb      	adds	r3, r7, r3
    2458:	2210      	movs	r2, #16
    245a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    245c:	683b      	ldr	r3, [r7, #0]
    245e:	8a1b      	ldrh	r3, [r3, #16]
    2460:	2280      	movs	r2, #128	; 0x80
    2462:	01d2      	lsls	r2, r2, #7
    2464:	4293      	cmp	r3, r2
    2466:	d01c      	beq.n	24a2 <_usart_set_config+0x8a>
    2468:	2280      	movs	r2, #128	; 0x80
    246a:	01d2      	lsls	r2, r2, #7
    246c:	4293      	cmp	r3, r2
    246e:	dc06      	bgt.n	247e <_usart_set_config+0x66>
    2470:	2b00      	cmp	r3, #0
    2472:	d00d      	beq.n	2490 <_usart_set_config+0x78>
    2474:	2280      	movs	r2, #128	; 0x80
    2476:	0192      	lsls	r2, r2, #6
    2478:	4293      	cmp	r3, r2
    247a:	d024      	beq.n	24c6 <_usart_set_config+0xae>
    247c:	e035      	b.n	24ea <_usart_set_config+0xd2>
    247e:	22c0      	movs	r2, #192	; 0xc0
    2480:	01d2      	lsls	r2, r2, #7
    2482:	4293      	cmp	r3, r2
    2484:	d028      	beq.n	24d8 <_usart_set_config+0xc0>
    2486:	2280      	movs	r2, #128	; 0x80
    2488:	0212      	lsls	r2, r2, #8
    248a:	4293      	cmp	r3, r2
    248c:	d012      	beq.n	24b4 <_usart_set_config+0x9c>
    248e:	e02c      	b.n	24ea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2490:	231f      	movs	r3, #31
    2492:	18fb      	adds	r3, r7, r3
    2494:	2200      	movs	r2, #0
    2496:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2498:	231e      	movs	r3, #30
    249a:	18fb      	adds	r3, r7, r3
    249c:	2210      	movs	r2, #16
    249e:	701a      	strb	r2, [r3, #0]
			break;
    24a0:	e023      	b.n	24ea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    24a2:	231f      	movs	r3, #31
    24a4:	18fb      	adds	r3, r7, r3
    24a6:	2200      	movs	r2, #0
    24a8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    24aa:	231e      	movs	r3, #30
    24ac:	18fb      	adds	r3, r7, r3
    24ae:	2208      	movs	r2, #8
    24b0:	701a      	strb	r2, [r3, #0]
			break;
    24b2:	e01a      	b.n	24ea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    24b4:	231f      	movs	r3, #31
    24b6:	18fb      	adds	r3, r7, r3
    24b8:	2200      	movs	r2, #0
    24ba:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    24bc:	231e      	movs	r3, #30
    24be:	18fb      	adds	r3, r7, r3
    24c0:	2203      	movs	r2, #3
    24c2:	701a      	strb	r2, [r3, #0]
			break;
    24c4:	e011      	b.n	24ea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    24c6:	231f      	movs	r3, #31
    24c8:	18fb      	adds	r3, r7, r3
    24ca:	2201      	movs	r2, #1
    24cc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    24ce:	231e      	movs	r3, #30
    24d0:	18fb      	adds	r3, r7, r3
    24d2:	2210      	movs	r2, #16
    24d4:	701a      	strb	r2, [r3, #0]
			break;
    24d6:	e008      	b.n	24ea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    24d8:	231f      	movs	r3, #31
    24da:	18fb      	adds	r3, r7, r3
    24dc:	2201      	movs	r2, #1
    24de:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    24e0:	231e      	movs	r3, #30
    24e2:	18fb      	adds	r3, r7, r3
    24e4:	2208      	movs	r2, #8
    24e6:	701a      	strb	r2, [r3, #0]
			break;
    24e8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    24ea:	683b      	ldr	r3, [r7, #0]
    24ec:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    24ee:	683b      	ldr	r3, [r7, #0]
    24f0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    24f2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    24f4:	683b      	ldr	r3, [r7, #0]
    24f6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    24f8:	4313      	orrs	r3, r2
		config->sample_rate |
    24fa:	683a      	ldr	r2, [r7, #0]
    24fc:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    24fe:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2500:	683a      	ldr	r2, [r7, #0]
    2502:	7e12      	ldrb	r2, [r2, #24]
    2504:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    2506:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2508:	683a      	ldr	r2, [r7, #0]
    250a:	2126      	movs	r1, #38	; 0x26
    250c:	5c52      	ldrb	r2, [r2, r1]
    250e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    2510:	4313      	orrs	r3, r2
    2512:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    2514:	231d      	movs	r3, #29
    2516:	18fb      	adds	r3, r7, r3
    2518:	2200      	movs	r2, #0
    251a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    251c:	683b      	ldr	r3, [r7, #0]
    251e:	685b      	ldr	r3, [r3, #4]
    2520:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2522:	68fb      	ldr	r3, [r7, #12]
    2524:	2b00      	cmp	r3, #0
    2526:	d01e      	beq.n	2566 <_usart_set_config+0x14e>
    2528:	2280      	movs	r2, #128	; 0x80
    252a:	0552      	lsls	r2, r2, #21
    252c:	4293      	cmp	r3, r2
    252e:	d14f      	bne.n	25d0 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2530:	683b      	ldr	r3, [r7, #0]
    2532:	2227      	movs	r2, #39	; 0x27
    2534:	5c9b      	ldrb	r3, [r3, r2]
    2536:	2201      	movs	r2, #1
    2538:	4053      	eors	r3, r2
    253a:	b2db      	uxtb	r3, r3
    253c:	2b00      	cmp	r3, #0
    253e:	d046      	beq.n	25ce <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2540:	683b      	ldr	r3, [r7, #0]
    2542:	6a1d      	ldr	r5, [r3, #32]
    2544:	693b      	ldr	r3, [r7, #16]
    2546:	b2db      	uxtb	r3, r3
    2548:	0018      	movs	r0, r3
    254a:	4b65      	ldr	r3, [pc, #404]	; (26e0 <_usart_set_config+0x2c8>)
    254c:	4798      	blx	r3
    254e:	0001      	movs	r1, r0
    2550:	231d      	movs	r3, #29
    2552:	18fc      	adds	r4, r7, r3
    2554:	230a      	movs	r3, #10
    2556:	18fb      	adds	r3, r7, r3
    2558:	001a      	movs	r2, r3
    255a:	0028      	movs	r0, r5
    255c:	4b61      	ldr	r3, [pc, #388]	; (26e4 <_usart_set_config+0x2cc>)
    255e:	4798      	blx	r3
    2560:	0003      	movs	r3, r0
    2562:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    2564:	e033      	b.n	25ce <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    2566:	683b      	ldr	r3, [r7, #0]
    2568:	2227      	movs	r2, #39	; 0x27
    256a:	5c9b      	ldrb	r3, [r3, r2]
    256c:	2b00      	cmp	r3, #0
    256e:	d014      	beq.n	259a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2570:	683b      	ldr	r3, [r7, #0]
    2572:	6a18      	ldr	r0, [r3, #32]
    2574:	683b      	ldr	r3, [r7, #0]
    2576:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    2578:	231d      	movs	r3, #29
    257a:	18fc      	adds	r4, r7, r3
    257c:	231f      	movs	r3, #31
    257e:	18fb      	adds	r3, r7, r3
    2580:	781d      	ldrb	r5, [r3, #0]
    2582:	230a      	movs	r3, #10
    2584:	18fa      	adds	r2, r7, r3
    2586:	231e      	movs	r3, #30
    2588:	18fb      	adds	r3, r7, r3
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	9300      	str	r3, [sp, #0]
    258e:	002b      	movs	r3, r5
    2590:	4d55      	ldr	r5, [pc, #340]	; (26e8 <_usart_set_config+0x2d0>)
    2592:	47a8      	blx	r5
    2594:	0003      	movs	r3, r0
    2596:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    2598:	e01a      	b.n	25d0 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    259a:	683b      	ldr	r3, [r7, #0]
    259c:	6a1d      	ldr	r5, [r3, #32]
    259e:	693b      	ldr	r3, [r7, #16]
    25a0:	b2db      	uxtb	r3, r3
    25a2:	0018      	movs	r0, r3
    25a4:	4b4e      	ldr	r3, [pc, #312]	; (26e0 <_usart_set_config+0x2c8>)
    25a6:	4798      	blx	r3
				status_code =
    25a8:	231d      	movs	r3, #29
    25aa:	18fc      	adds	r4, r7, r3
    25ac:	231f      	movs	r3, #31
    25ae:	18fb      	adds	r3, r7, r3
    25b0:	7819      	ldrb	r1, [r3, #0]
    25b2:	230a      	movs	r3, #10
    25b4:	18fa      	adds	r2, r7, r3
    25b6:	231e      	movs	r3, #30
    25b8:	18fb      	adds	r3, r7, r3
    25ba:	781b      	ldrb	r3, [r3, #0]
    25bc:	9300      	str	r3, [sp, #0]
    25be:	000b      	movs	r3, r1
    25c0:	0001      	movs	r1, r0
    25c2:	0028      	movs	r0, r5
    25c4:	4d48      	ldr	r5, [pc, #288]	; (26e8 <_usart_set_config+0x2d0>)
    25c6:	47a8      	blx	r5
    25c8:	0003      	movs	r3, r0
    25ca:	7023      	strb	r3, [r4, #0]
			break;
    25cc:	e000      	b.n	25d0 <_usart_set_config+0x1b8>
			break;
    25ce:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    25d0:	231d      	movs	r3, #29
    25d2:	18fb      	adds	r3, r7, r3
    25d4:	781b      	ldrb	r3, [r3, #0]
    25d6:	2b00      	cmp	r3, #0
    25d8:	d003      	beq.n	25e2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    25da:	231d      	movs	r3, #29
    25dc:	18fb      	adds	r3, r7, r3
    25de:	781b      	ldrb	r3, [r3, #0]
    25e0:	e077      	b.n	26d2 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    25e2:	683b      	ldr	r3, [r7, #0]
    25e4:	7e5b      	ldrb	r3, [r3, #25]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d003      	beq.n	25f2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    25ea:	683b      	ldr	r3, [r7, #0]
    25ec:	7e9a      	ldrb	r2, [r3, #26]
    25ee:	69bb      	ldr	r3, [r7, #24]
    25f0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    25f2:	687b      	ldr	r3, [r7, #4]
    25f4:	0018      	movs	r0, r3
    25f6:	4b3d      	ldr	r3, [pc, #244]	; (26ec <_usart_set_config+0x2d4>)
    25f8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    25fa:	230a      	movs	r3, #10
    25fc:	18fb      	adds	r3, r7, r3
    25fe:	881a      	ldrh	r2, [r3, #0]
    2600:	69bb      	ldr	r3, [r7, #24]
    2602:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    2604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2606:	68fb      	ldr	r3, [r7, #12]
    2608:	4313      	orrs	r3, r2
    260a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    260c:	683b      	ldr	r3, [r7, #0]
    260e:	2227      	movs	r2, #39	; 0x27
    2610:	5c9b      	ldrb	r3, [r3, r2]
    2612:	2201      	movs	r2, #1
    2614:	4053      	eors	r3, r2
    2616:	b2db      	uxtb	r3, r3
    2618:	2b00      	cmp	r3, #0
    261a:	d003      	beq.n	2624 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    261e:	2204      	movs	r2, #4
    2620:	4313      	orrs	r3, r2
    2622:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2624:	683b      	ldr	r3, [r7, #0]
    2626:	7e5b      	ldrb	r3, [r3, #25]
    2628:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    262a:	683b      	ldr	r3, [r7, #0]
    262c:	7f1b      	ldrb	r3, [r3, #28]
    262e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2630:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2632:	683b      	ldr	r3, [r7, #0]
    2634:	7f5b      	ldrb	r3, [r3, #29]
    2636:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2638:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    263a:	683b      	ldr	r3, [r7, #0]
    263c:	2124      	movs	r1, #36	; 0x24
    263e:	5c5b      	ldrb	r3, [r3, r1]
    2640:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2642:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2644:	683b      	ldr	r3, [r7, #0]
    2646:	2125      	movs	r1, #37	; 0x25
    2648:	5c5b      	ldrb	r3, [r3, r1]
    264a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    264c:	4313      	orrs	r3, r2
	ctrlb =  
    264e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    2650:	683b      	ldr	r3, [r7, #0]
    2652:	7a9b      	ldrb	r3, [r3, #10]
    2654:	001a      	movs	r2, r3
    2656:	6a3b      	ldr	r3, [r7, #32]
    2658:	4313      	orrs	r3, r2
    265a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    265c:	683b      	ldr	r3, [r7, #0]
    265e:	7adb      	ldrb	r3, [r3, #11]
    2660:	001a      	movs	r2, r3
    2662:	6a3b      	ldr	r3, [r7, #32]
    2664:	4313      	orrs	r3, r2
    2666:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    2668:	683b      	ldr	r3, [r7, #0]
    266a:	891b      	ldrh	r3, [r3, #8]
    266c:	2bff      	cmp	r3, #255	; 0xff
    266e:	d00b      	beq.n	2688 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2672:	2280      	movs	r2, #128	; 0x80
    2674:	0452      	lsls	r2, r2, #17
    2676:	4313      	orrs	r3, r2
    2678:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    267a:	683b      	ldr	r3, [r7, #0]
    267c:	891b      	ldrh	r3, [r3, #8]
    267e:	001a      	movs	r2, r3
    2680:	6a3b      	ldr	r3, [r7, #32]
    2682:	4313      	orrs	r3, r2
    2684:	623b      	str	r3, [r7, #32]
    2686:	e008      	b.n	269a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    2688:	683b      	ldr	r3, [r7, #0]
    268a:	7edb      	ldrb	r3, [r3, #27]
    268c:	2b00      	cmp	r3, #0
    268e:	d004      	beq.n	269a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2692:	2280      	movs	r2, #128	; 0x80
    2694:	04d2      	lsls	r2, r2, #19
    2696:	4313      	orrs	r3, r2
    2698:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    269a:	683b      	ldr	r3, [r7, #0]
    269c:	222c      	movs	r2, #44	; 0x2c
    269e:	5c9b      	ldrb	r3, [r3, r2]
    26a0:	2b00      	cmp	r3, #0
    26a2:	d103      	bne.n	26ac <_usart_set_config+0x294>
    26a4:	4b12      	ldr	r3, [pc, #72]	; (26f0 <_usart_set_config+0x2d8>)
    26a6:	4798      	blx	r3
    26a8:	1e03      	subs	r3, r0, #0
    26aa:	d003      	beq.n	26b4 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    26ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    26ae:	2280      	movs	r2, #128	; 0x80
    26b0:	4313      	orrs	r3, r2
    26b2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    26b4:	687b      	ldr	r3, [r7, #4]
    26b6:	0018      	movs	r0, r3
    26b8:	4b0c      	ldr	r3, [pc, #48]	; (26ec <_usart_set_config+0x2d4>)
    26ba:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    26bc:	69bb      	ldr	r3, [r7, #24]
    26be:	6a3a      	ldr	r2, [r7, #32]
    26c0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    26c2:	687b      	ldr	r3, [r7, #4]
    26c4:	0018      	movs	r0, r3
    26c6:	4b09      	ldr	r3, [pc, #36]	; (26ec <_usart_set_config+0x2d4>)
    26c8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    26ca:	69bb      	ldr	r3, [r7, #24]
    26cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    26ce:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    26d0:	2300      	movs	r3, #0
}
    26d2:	0018      	movs	r0, r3
    26d4:	46bd      	mov	sp, r7
    26d6:	b00a      	add	sp, #40	; 0x28
    26d8:	bdb0      	pop	{r4, r5, r7, pc}
    26da:	46c0      	nop			; (mov r8, r8)
    26dc:	00002209 	.word	0x00002209
    26e0:	00003955 	.word	0x00003955
    26e4:	00001d83 	.word	0x00001d83
    26e8:	00001e01 	.word	0x00001e01
    26ec:	000023f5 	.word	0x000023f5
    26f0:	000023b5 	.word	0x000023b5

000026f4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    26f4:	b590      	push	{r4, r7, lr}
    26f6:	b093      	sub	sp, #76	; 0x4c
    26f8:	af00      	add	r7, sp, #0
    26fa:	60f8      	str	r0, [r7, #12]
    26fc:	60b9      	str	r1, [r7, #8]
    26fe:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    2700:	233b      	movs	r3, #59	; 0x3b
    2702:	18fb      	adds	r3, r7, r3
    2704:	2200      	movs	r2, #0
    2706:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2708:	68fb      	ldr	r3, [r7, #12]
    270a:	68ba      	ldr	r2, [r7, #8]
    270c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    270e:	68fb      	ldr	r3, [r7, #12]
    2710:	681b      	ldr	r3, [r3, #0]
    2712:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2714:	68fb      	ldr	r3, [r7, #12]
    2716:	681b      	ldr	r3, [r3, #0]
    2718:	0018      	movs	r0, r3
    271a:	4b86      	ldr	r3, [pc, #536]	; (2934 <usart_init+0x240>)
    271c:	4798      	blx	r3
    271e:	0003      	movs	r3, r0
    2720:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2724:	3302      	adds	r3, #2
    2726:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    272a:	3314      	adds	r3, #20
    272c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    272e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2730:	681b      	ldr	r3, [r3, #0]
    2732:	2201      	movs	r2, #1
    2734:	4013      	ands	r3, r2
    2736:	d001      	beq.n	273c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2738:	2305      	movs	r3, #5
    273a:	e0f6      	b.n	292a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    273e:	681b      	ldr	r3, [r3, #0]
    2740:	2202      	movs	r2, #2
    2742:	4013      	ands	r3, r2
    2744:	d001      	beq.n	274a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    2746:	231c      	movs	r3, #28
    2748:	e0ef      	b.n	292a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    274a:	2201      	movs	r2, #1
    274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    274e:	409a      	lsls	r2, r3
    2750:	0013      	movs	r3, r2
    2752:	0019      	movs	r1, r3
    2754:	2002      	movs	r0, #2
    2756:	4b78      	ldr	r3, [pc, #480]	; (2938 <usart_init+0x244>)
    2758:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    275a:	2324      	movs	r3, #36	; 0x24
    275c:	18fb      	adds	r3, r7, r3
    275e:	0018      	movs	r0, r3
    2760:	4b76      	ldr	r3, [pc, #472]	; (293c <usart_init+0x248>)
    2762:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    2764:	687b      	ldr	r3, [r7, #4]
    2766:	222d      	movs	r2, #45	; 0x2d
    2768:	5c9a      	ldrb	r2, [r3, r2]
    276a:	2324      	movs	r3, #36	; 0x24
    276c:	18fb      	adds	r3, r7, r3
    276e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2770:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2772:	b2db      	uxtb	r3, r3
    2774:	2224      	movs	r2, #36	; 0x24
    2776:	18ba      	adds	r2, r7, r2
    2778:	0011      	movs	r1, r2
    277a:	0018      	movs	r0, r3
    277c:	4b70      	ldr	r3, [pc, #448]	; (2940 <usart_init+0x24c>)
    277e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2780:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2782:	b2db      	uxtb	r3, r3
    2784:	0018      	movs	r0, r3
    2786:	4b6f      	ldr	r3, [pc, #444]	; (2944 <usart_init+0x250>)
    2788:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    278a:	687b      	ldr	r3, [r7, #4]
    278c:	222d      	movs	r2, #45	; 0x2d
    278e:	5c9b      	ldrb	r3, [r3, r2]
    2790:	2100      	movs	r1, #0
    2792:	0018      	movs	r0, r3
    2794:	4b6c      	ldr	r3, [pc, #432]	; (2948 <usart_init+0x254>)
    2796:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    2798:	687b      	ldr	r3, [r7, #4]
    279a:	7ada      	ldrb	r2, [r3, #11]
    279c:	68fb      	ldr	r3, [r7, #12]
    279e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    27a0:	687b      	ldr	r3, [r7, #4]
    27a2:	2224      	movs	r2, #36	; 0x24
    27a4:	5c9a      	ldrb	r2, [r3, r2]
    27a6:	68fb      	ldr	r3, [r7, #12]
    27a8:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    27aa:	687b      	ldr	r3, [r7, #4]
    27ac:	2225      	movs	r2, #37	; 0x25
    27ae:	5c9a      	ldrb	r2, [r3, r2]
    27b0:	68fb      	ldr	r3, [r7, #12]
    27b2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    27b4:	687b      	ldr	r3, [r7, #4]
    27b6:	7eda      	ldrb	r2, [r3, #27]
    27b8:	68fb      	ldr	r3, [r7, #12]
    27ba:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    27bc:	687b      	ldr	r3, [r7, #4]
    27be:	7f1a      	ldrb	r2, [r3, #28]
    27c0:	68fb      	ldr	r3, [r7, #12]
    27c2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    27c4:	233b      	movs	r3, #59	; 0x3b
    27c6:	18fc      	adds	r4, r7, r3
    27c8:	687a      	ldr	r2, [r7, #4]
    27ca:	68fb      	ldr	r3, [r7, #12]
    27cc:	0011      	movs	r1, r2
    27ce:	0018      	movs	r0, r3
    27d0:	4b5e      	ldr	r3, [pc, #376]	; (294c <usart_init+0x258>)
    27d2:	4798      	blx	r3
    27d4:	0003      	movs	r3, r0
    27d6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    27d8:	233b      	movs	r3, #59	; 0x3b
    27da:	18fb      	adds	r3, r7, r3
    27dc:	781b      	ldrb	r3, [r3, #0]
    27de:	2b00      	cmp	r3, #0
    27e0:	d003      	beq.n	27ea <usart_init+0xf6>
		return status_code;
    27e2:	233b      	movs	r3, #59	; 0x3b
    27e4:	18fb      	adds	r3, r7, r3
    27e6:	781b      	ldrb	r3, [r3, #0]
    27e8:	e09f      	b.n	292a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    27ea:	2320      	movs	r3, #32
    27ec:	18fb      	adds	r3, r7, r3
    27ee:	0018      	movs	r0, r3
    27f0:	4b57      	ldr	r3, [pc, #348]	; (2950 <usart_init+0x25c>)
    27f2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    27f4:	2320      	movs	r3, #32
    27f6:	18fb      	adds	r3, r7, r3
    27f8:	2200      	movs	r2, #0
    27fa:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    27fc:	2320      	movs	r3, #32
    27fe:	18fb      	adds	r3, r7, r3
    2800:	2200      	movs	r2, #0
    2802:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    2804:	687b      	ldr	r3, [r7, #4]
    2806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    2808:	2310      	movs	r3, #16
    280a:	18fb      	adds	r3, r7, r3
    280c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    280e:	687b      	ldr	r3, [r7, #4]
    2810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    2812:	2310      	movs	r3, #16
    2814:	18fb      	adds	r3, r7, r3
    2816:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    2818:	687b      	ldr	r3, [r7, #4]
    281a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    281c:	2310      	movs	r3, #16
    281e:	18fb      	adds	r3, r7, r3
    2820:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    2822:	687b      	ldr	r3, [r7, #4]
    2824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    2826:	2310      	movs	r3, #16
    2828:	18fb      	adds	r3, r7, r3
    282a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    282c:	2347      	movs	r3, #71	; 0x47
    282e:	18fb      	adds	r3, r7, r3
    2830:	2200      	movs	r2, #0
    2832:	701a      	strb	r2, [r3, #0]
    2834:	e02c      	b.n	2890 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2836:	2347      	movs	r3, #71	; 0x47
    2838:	18fb      	adds	r3, r7, r3
    283a:	781a      	ldrb	r2, [r3, #0]
    283c:	2310      	movs	r3, #16
    283e:	18fb      	adds	r3, r7, r3
    2840:	0092      	lsls	r2, r2, #2
    2842:	58d3      	ldr	r3, [r2, r3]
    2844:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    2846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2848:	2b00      	cmp	r3, #0
    284a:	d109      	bne.n	2860 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    284c:	2347      	movs	r3, #71	; 0x47
    284e:	18fb      	adds	r3, r7, r3
    2850:	781a      	ldrb	r2, [r3, #0]
    2852:	68bb      	ldr	r3, [r7, #8]
    2854:	0011      	movs	r1, r2
    2856:	0018      	movs	r0, r3
    2858:	4b3e      	ldr	r3, [pc, #248]	; (2954 <usart_init+0x260>)
    285a:	4798      	blx	r3
    285c:	0003      	movs	r3, r0
    285e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2862:	3301      	adds	r3, #1
    2864:	d00d      	beq.n	2882 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2868:	b2da      	uxtb	r2, r3
    286a:	2320      	movs	r3, #32
    286c:	18fb      	adds	r3, r7, r3
    286e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2872:	0c1b      	lsrs	r3, r3, #16
    2874:	b2db      	uxtb	r3, r3
    2876:	2220      	movs	r2, #32
    2878:	18ba      	adds	r2, r7, r2
    287a:	0011      	movs	r1, r2
    287c:	0018      	movs	r0, r3
    287e:	4b36      	ldr	r3, [pc, #216]	; (2958 <usart_init+0x264>)
    2880:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    2882:	2347      	movs	r3, #71	; 0x47
    2884:	18fb      	adds	r3, r7, r3
    2886:	781a      	ldrb	r2, [r3, #0]
    2888:	2347      	movs	r3, #71	; 0x47
    288a:	18fb      	adds	r3, r7, r3
    288c:	3201      	adds	r2, #1
    288e:	701a      	strb	r2, [r3, #0]
    2890:	2347      	movs	r3, #71	; 0x47
    2892:	18fb      	adds	r3, r7, r3
    2894:	781b      	ldrb	r3, [r3, #0]
    2896:	2b03      	cmp	r3, #3
    2898:	d9cd      	bls.n	2836 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    289a:	2300      	movs	r3, #0
    289c:	63fb      	str	r3, [r7, #60]	; 0x3c
    289e:	e00a      	b.n	28b6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    28a0:	68fa      	ldr	r2, [r7, #12]
    28a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    28a4:	3302      	adds	r3, #2
    28a6:	009b      	lsls	r3, r3, #2
    28a8:	18d3      	adds	r3, r2, r3
    28aa:	3304      	adds	r3, #4
    28ac:	2200      	movs	r2, #0
    28ae:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    28b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    28b2:	3301      	adds	r3, #1
    28b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    28b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    28b8:	2b05      	cmp	r3, #5
    28ba:	d9f1      	bls.n	28a0 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    28bc:	68fb      	ldr	r3, [r7, #12]
    28be:	2200      	movs	r2, #0
    28c0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    28c2:	68fb      	ldr	r3, [r7, #12]
    28c4:	2200      	movs	r2, #0
    28c6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    28c8:	68fb      	ldr	r3, [r7, #12]
    28ca:	2200      	movs	r2, #0
    28cc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    28ce:	68fb      	ldr	r3, [r7, #12]
    28d0:	2200      	movs	r2, #0
    28d2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    28d4:	68fb      	ldr	r3, [r7, #12]
    28d6:	2230      	movs	r2, #48	; 0x30
    28d8:	2100      	movs	r1, #0
    28da:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    28dc:	68fb      	ldr	r3, [r7, #12]
    28de:	2231      	movs	r2, #49	; 0x31
    28e0:	2100      	movs	r1, #0
    28e2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    28e4:	68fb      	ldr	r3, [r7, #12]
    28e6:	2232      	movs	r2, #50	; 0x32
    28e8:	2100      	movs	r1, #0
    28ea:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    28ec:	68fb      	ldr	r3, [r7, #12]
    28ee:	2233      	movs	r2, #51	; 0x33
    28f0:	2100      	movs	r1, #0
    28f2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    28f4:	68fb      	ldr	r3, [r7, #12]
    28f6:	681b      	ldr	r3, [r3, #0]
    28f8:	2227      	movs	r2, #39	; 0x27
    28fa:	18bc      	adds	r4, r7, r2
    28fc:	0018      	movs	r0, r3
    28fe:	4b0d      	ldr	r3, [pc, #52]	; (2934 <usart_init+0x240>)
    2900:	4798      	blx	r3
    2902:	0003      	movs	r3, r0
    2904:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2906:	4a15      	ldr	r2, [pc, #84]	; (295c <usart_init+0x268>)
    2908:	2327      	movs	r3, #39	; 0x27
    290a:	18fb      	adds	r3, r7, r3
    290c:	781b      	ldrb	r3, [r3, #0]
    290e:	0011      	movs	r1, r2
    2910:	0018      	movs	r0, r3
    2912:	4b13      	ldr	r3, [pc, #76]	; (2960 <usart_init+0x26c>)
    2914:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2916:	2327      	movs	r3, #39	; 0x27
    2918:	18fb      	adds	r3, r7, r3
    291a:	781a      	ldrb	r2, [r3, #0]
    291c:	4b11      	ldr	r3, [pc, #68]	; (2964 <usart_init+0x270>)
    291e:	0092      	lsls	r2, r2, #2
    2920:	68f9      	ldr	r1, [r7, #12]
    2922:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    2924:	233b      	movs	r3, #59	; 0x3b
    2926:	18fb      	adds	r3, r7, r3
    2928:	781b      	ldrb	r3, [r3, #0]
}
    292a:	0018      	movs	r0, r3
    292c:	46bd      	mov	sp, r7
    292e:	b013      	add	sp, #76	; 0x4c
    2930:	bd90      	pop	{r4, r7, pc}
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	00002209 	.word	0x00002209
    2938:	00002331 	.word	0x00002331
    293c:	00002319 	.word	0x00002319
    2940:	00003831 	.word	0x00003831
    2944:	00003875 	.word	0x00003875
    2948:	00001fc1 	.word	0x00001fc1
    294c:	00002419 	.word	0x00002419
    2950:	0000238d 	.word	0x0000238d
    2954:	0000204d 	.word	0x0000204d
    2958:	00003b1d 	.word	0x00003b1d
    295c:	00002afd 	.word	0x00002afd
    2960:	00002e51 	.word	0x00002e51
    2964:	2000012c 	.word	0x2000012c

00002968 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    2968:	b580      	push	{r7, lr}
    296a:	b084      	sub	sp, #16
    296c:	af00      	add	r7, sp, #0
    296e:	6078      	str	r0, [r7, #4]
    2970:	000a      	movs	r2, r1
    2972:	1cbb      	adds	r3, r7, #2
    2974:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2976:	687b      	ldr	r3, [r7, #4]
    2978:	681b      	ldr	r3, [r3, #0]
    297a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    297c:	687b      	ldr	r3, [r7, #4]
    297e:	79db      	ldrb	r3, [r3, #7]
    2980:	2201      	movs	r2, #1
    2982:	4053      	eors	r3, r2
    2984:	b2db      	uxtb	r3, r3
    2986:	2b00      	cmp	r3, #0
    2988:	d001      	beq.n	298e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    298a:	231c      	movs	r3, #28
    298c:	e017      	b.n	29be <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2992:	b29b      	uxth	r3, r3
    2994:	2b00      	cmp	r3, #0
    2996:	d001      	beq.n	299c <usart_write_wait+0x34>
		return STATUS_BUSY;
    2998:	2305      	movs	r3, #5
    299a:	e010      	b.n	29be <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    299c:	687b      	ldr	r3, [r7, #4]
    299e:	0018      	movs	r0, r3
    29a0:	4b09      	ldr	r3, [pc, #36]	; (29c8 <usart_write_wait+0x60>)
    29a2:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    29a4:	68fb      	ldr	r3, [r7, #12]
    29a6:	1cba      	adds	r2, r7, #2
    29a8:	8812      	ldrh	r2, [r2, #0]
    29aa:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    29ac:	46c0      	nop			; (mov r8, r8)
    29ae:	68fb      	ldr	r3, [r7, #12]
    29b0:	7e1b      	ldrb	r3, [r3, #24]
    29b2:	b2db      	uxtb	r3, r3
    29b4:	001a      	movs	r2, r3
    29b6:	2302      	movs	r3, #2
    29b8:	4013      	ands	r3, r2
    29ba:	d0f8      	beq.n	29ae <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    29bc:	2300      	movs	r3, #0
}
    29be:	0018      	movs	r0, r3
    29c0:	46bd      	mov	sp, r7
    29c2:	b004      	add	sp, #16
    29c4:	bd80      	pop	{r7, pc}
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	000023f5 	.word	0x000023f5

000029cc <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    29cc:	b580      	push	{r7, lr}
    29ce:	b084      	sub	sp, #16
    29d0:	af00      	add	r7, sp, #0
    29d2:	6078      	str	r0, [r7, #4]
    29d4:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    29d6:	687b      	ldr	r3, [r7, #4]
    29d8:	681b      	ldr	r3, [r3, #0]
    29da:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    29dc:	687b      	ldr	r3, [r7, #4]
    29de:	799b      	ldrb	r3, [r3, #6]
    29e0:	2201      	movs	r2, #1
    29e2:	4053      	eors	r3, r2
    29e4:	b2db      	uxtb	r3, r3
    29e6:	2b00      	cmp	r3, #0
    29e8:	d001      	beq.n	29ee <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    29ea:	231c      	movs	r3, #28
    29ec:	e05e      	b.n	2aac <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    29ee:	687b      	ldr	r3, [r7, #4]
    29f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    29f2:	b29b      	uxth	r3, r3
    29f4:	2b00      	cmp	r3, #0
    29f6:	d001      	beq.n	29fc <usart_read_wait+0x30>
		return STATUS_BUSY;
    29f8:	2305      	movs	r3, #5
    29fa:	e057      	b.n	2aac <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    29fc:	68fb      	ldr	r3, [r7, #12]
    29fe:	7e1b      	ldrb	r3, [r3, #24]
    2a00:	b2db      	uxtb	r3, r3
    2a02:	001a      	movs	r2, r3
    2a04:	2304      	movs	r3, #4
    2a06:	4013      	ands	r3, r2
    2a08:	d101      	bne.n	2a0e <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    2a0a:	2305      	movs	r3, #5
    2a0c:	e04e      	b.n	2aac <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    2a0e:	687b      	ldr	r3, [r7, #4]
    2a10:	0018      	movs	r0, r3
    2a12:	4b28      	ldr	r3, [pc, #160]	; (2ab4 <usart_read_wait+0xe8>)
    2a14:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2a16:	68fb      	ldr	r3, [r7, #12]
    2a18:	8b5b      	ldrh	r3, [r3, #26]
    2a1a:	b29b      	uxth	r3, r3
    2a1c:	b2da      	uxtb	r2, r3
    2a1e:	230b      	movs	r3, #11
    2a20:	18fb      	adds	r3, r7, r3
    2a22:	213f      	movs	r1, #63	; 0x3f
    2a24:	400a      	ands	r2, r1
    2a26:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    2a28:	230b      	movs	r3, #11
    2a2a:	18fb      	adds	r3, r7, r3
    2a2c:	781b      	ldrb	r3, [r3, #0]
    2a2e:	2b00      	cmp	r3, #0
    2a30:	d036      	beq.n	2aa0 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2a32:	230b      	movs	r3, #11
    2a34:	18fb      	adds	r3, r7, r3
    2a36:	781b      	ldrb	r3, [r3, #0]
    2a38:	2202      	movs	r2, #2
    2a3a:	4013      	ands	r3, r2
    2a3c:	d004      	beq.n	2a48 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2a3e:	68fb      	ldr	r3, [r7, #12]
    2a40:	2202      	movs	r2, #2
    2a42:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    2a44:	231a      	movs	r3, #26
    2a46:	e031      	b.n	2aac <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2a48:	230b      	movs	r3, #11
    2a4a:	18fb      	adds	r3, r7, r3
    2a4c:	781b      	ldrb	r3, [r3, #0]
    2a4e:	2204      	movs	r2, #4
    2a50:	4013      	ands	r3, r2
    2a52:	d004      	beq.n	2a5e <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2a54:	68fb      	ldr	r3, [r7, #12]
    2a56:	2204      	movs	r2, #4
    2a58:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    2a5a:	231e      	movs	r3, #30
    2a5c:	e026      	b.n	2aac <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2a5e:	230b      	movs	r3, #11
    2a60:	18fb      	adds	r3, r7, r3
    2a62:	781b      	ldrb	r3, [r3, #0]
    2a64:	2201      	movs	r2, #1
    2a66:	4013      	ands	r3, r2
    2a68:	d004      	beq.n	2a74 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2a6a:	68fb      	ldr	r3, [r7, #12]
    2a6c:	2201      	movs	r2, #1
    2a6e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    2a70:	2313      	movs	r3, #19
    2a72:	e01b      	b.n	2aac <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2a74:	230b      	movs	r3, #11
    2a76:	18fb      	adds	r3, r7, r3
    2a78:	781b      	ldrb	r3, [r3, #0]
    2a7a:	2210      	movs	r2, #16
    2a7c:	4013      	ands	r3, r2
    2a7e:	d004      	beq.n	2a8a <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2a80:	68fb      	ldr	r3, [r7, #12]
    2a82:	2210      	movs	r2, #16
    2a84:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    2a86:	2342      	movs	r3, #66	; 0x42
    2a88:	e010      	b.n	2aac <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2a8a:	230b      	movs	r3, #11
    2a8c:	18fb      	adds	r3, r7, r3
    2a8e:	781b      	ldrb	r3, [r3, #0]
    2a90:	2220      	movs	r2, #32
    2a92:	4013      	ands	r3, r2
    2a94:	d004      	beq.n	2aa0 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2a96:	68fb      	ldr	r3, [r7, #12]
    2a98:	2220      	movs	r2, #32
    2a9a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    2a9c:	2341      	movs	r3, #65	; 0x41
    2a9e:	e005      	b.n	2aac <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    2aa0:	68fb      	ldr	r3, [r7, #12]
    2aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2aa4:	b29a      	uxth	r2, r3
    2aa6:	683b      	ldr	r3, [r7, #0]
    2aa8:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    2aaa:	2300      	movs	r3, #0
}
    2aac:	0018      	movs	r0, r3
    2aae:	46bd      	mov	sp, r7
    2ab0:	b004      	add	sp, #16
    2ab2:	bd80      	pop	{r7, pc}
    2ab4:	000023f5 	.word	0x000023f5

00002ab8 <usart_is_syncing>:
{
    2ab8:	b580      	push	{r7, lr}
    2aba:	b084      	sub	sp, #16
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ac0:	687b      	ldr	r3, [r7, #4]
    2ac2:	681b      	ldr	r3, [r3, #0]
    2ac4:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    2ac6:	68fb      	ldr	r3, [r7, #12]
    2ac8:	69db      	ldr	r3, [r3, #28]
    2aca:	1e5a      	subs	r2, r3, #1
    2acc:	4193      	sbcs	r3, r2
    2ace:	b2db      	uxtb	r3, r3
}
    2ad0:	0018      	movs	r0, r3
    2ad2:	46bd      	mov	sp, r7
    2ad4:	b004      	add	sp, #16
    2ad6:	bd80      	pop	{r7, pc}

00002ad8 <_usart_wait_for_sync>:
{
    2ad8:	b580      	push	{r7, lr}
    2ada:	b082      	sub	sp, #8
    2adc:	af00      	add	r7, sp, #0
    2ade:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    2ae0:	46c0      	nop			; (mov r8, r8)
    2ae2:	687b      	ldr	r3, [r7, #4]
    2ae4:	0018      	movs	r0, r3
    2ae6:	4b04      	ldr	r3, [pc, #16]	; (2af8 <_usart_wait_for_sync+0x20>)
    2ae8:	4798      	blx	r3
    2aea:	1e03      	subs	r3, r0, #0
    2aec:	d1f9      	bne.n	2ae2 <_usart_wait_for_sync+0xa>
}
    2aee:	46c0      	nop			; (mov r8, r8)
    2af0:	46bd      	mov	sp, r7
    2af2:	b002      	add	sp, #8
    2af4:	bd80      	pop	{r7, pc}
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	00002ab9 	.word	0x00002ab9

00002afc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2afc:	b580      	push	{r7, lr}
    2afe:	b088      	sub	sp, #32
    2b00:	af00      	add	r7, sp, #0
    2b02:	0002      	movs	r2, r0
    2b04:	1dfb      	adds	r3, r7, #7
    2b06:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    2b08:	1dfb      	adds	r3, r7, #7
    2b0a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    2b0c:	4ba3      	ldr	r3, [pc, #652]	; (2d9c <_usart_interrupt_handler+0x2a0>)
    2b0e:	0092      	lsls	r2, r2, #2
    2b10:	58d3      	ldr	r3, [r2, r3]
    2b12:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2b14:	69bb      	ldr	r3, [r7, #24]
    2b16:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    2b18:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    2b1a:	69bb      	ldr	r3, [r7, #24]
    2b1c:	0018      	movs	r0, r3
    2b1e:	4ba0      	ldr	r3, [pc, #640]	; (2da0 <_usart_interrupt_handler+0x2a4>)
    2b20:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2b22:	697b      	ldr	r3, [r7, #20]
    2b24:	7e1b      	ldrb	r3, [r3, #24]
    2b26:	b2da      	uxtb	r2, r3
    2b28:	2312      	movs	r3, #18
    2b2a:	18fb      	adds	r3, r7, r3
    2b2c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    2b2e:	697b      	ldr	r3, [r7, #20]
    2b30:	7d9b      	ldrb	r3, [r3, #22]
    2b32:	b2db      	uxtb	r3, r3
    2b34:	b29a      	uxth	r2, r3
    2b36:	2312      	movs	r3, #18
    2b38:	18fb      	adds	r3, r7, r3
    2b3a:	2112      	movs	r1, #18
    2b3c:	1879      	adds	r1, r7, r1
    2b3e:	8809      	ldrh	r1, [r1, #0]
    2b40:	400a      	ands	r2, r1
    2b42:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    2b44:	69bb      	ldr	r3, [r7, #24]
    2b46:	2230      	movs	r2, #48	; 0x30
    2b48:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    2b4a:	69ba      	ldr	r2, [r7, #24]
    2b4c:	2131      	movs	r1, #49	; 0x31
    2b4e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    2b50:	4013      	ands	r3, r2
    2b52:	b2da      	uxtb	r2, r3
    2b54:	2310      	movs	r3, #16
    2b56:	18fb      	adds	r3, r7, r3
    2b58:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2b5a:	2312      	movs	r3, #18
    2b5c:	18fb      	adds	r3, r7, r3
    2b5e:	881b      	ldrh	r3, [r3, #0]
    2b60:	2201      	movs	r2, #1
    2b62:	4013      	ands	r3, r2
    2b64:	d044      	beq.n	2bf0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    2b66:	69bb      	ldr	r3, [r7, #24]
    2b68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2b6a:	b29b      	uxth	r3, r3
    2b6c:	2b00      	cmp	r3, #0
    2b6e:	d03c      	beq.n	2bea <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2b70:	69bb      	ldr	r3, [r7, #24]
    2b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b74:	781b      	ldrb	r3, [r3, #0]
    2b76:	b2da      	uxtb	r2, r3
    2b78:	231c      	movs	r3, #28
    2b7a:	18fb      	adds	r3, r7, r3
    2b7c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2b7e:	69bb      	ldr	r3, [r7, #24]
    2b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b82:	1c5a      	adds	r2, r3, #1
    2b84:	69bb      	ldr	r3, [r7, #24]
    2b86:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2b88:	69bb      	ldr	r3, [r7, #24]
    2b8a:	795b      	ldrb	r3, [r3, #5]
    2b8c:	2b01      	cmp	r3, #1
    2b8e:	d113      	bne.n	2bb8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2b90:	69bb      	ldr	r3, [r7, #24]
    2b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b94:	781b      	ldrb	r3, [r3, #0]
    2b96:	b2db      	uxtb	r3, r3
    2b98:	021b      	lsls	r3, r3, #8
    2b9a:	b21a      	sxth	r2, r3
    2b9c:	231c      	movs	r3, #28
    2b9e:	18fb      	adds	r3, r7, r3
    2ba0:	2100      	movs	r1, #0
    2ba2:	5e5b      	ldrsh	r3, [r3, r1]
    2ba4:	4313      	orrs	r3, r2
    2ba6:	b21a      	sxth	r2, r3
    2ba8:	231c      	movs	r3, #28
    2baa:	18fb      	adds	r3, r7, r3
    2bac:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2bae:	69bb      	ldr	r3, [r7, #24]
    2bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bb2:	1c5a      	adds	r2, r3, #1
    2bb4:	69bb      	ldr	r3, [r7, #24]
    2bb6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2bb8:	231c      	movs	r3, #28
    2bba:	18fb      	adds	r3, r7, r3
    2bbc:	881b      	ldrh	r3, [r3, #0]
    2bbe:	05db      	lsls	r3, r3, #23
    2bc0:	0ddb      	lsrs	r3, r3, #23
    2bc2:	b29a      	uxth	r2, r3
    2bc4:	697b      	ldr	r3, [r7, #20]
    2bc6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2bc8:	69bb      	ldr	r3, [r7, #24]
    2bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2bcc:	b29b      	uxth	r3, r3
    2bce:	3b01      	subs	r3, #1
    2bd0:	b29b      	uxth	r3, r3
    2bd2:	69ba      	ldr	r2, [r7, #24]
    2bd4:	1c19      	adds	r1, r3, #0
    2bd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
    2bd8:	2b00      	cmp	r3, #0
    2bda:	d109      	bne.n	2bf0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2bdc:	697b      	ldr	r3, [r7, #20]
    2bde:	2201      	movs	r2, #1
    2be0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2be2:	697b      	ldr	r3, [r7, #20]
    2be4:	2202      	movs	r2, #2
    2be6:	759a      	strb	r2, [r3, #22]
    2be8:	e002      	b.n	2bf0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2bea:	697b      	ldr	r3, [r7, #20]
    2bec:	2201      	movs	r2, #1
    2bee:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2bf0:	2312      	movs	r3, #18
    2bf2:	18fb      	adds	r3, r7, r3
    2bf4:	881b      	ldrh	r3, [r3, #0]
    2bf6:	2202      	movs	r2, #2
    2bf8:	4013      	ands	r3, r2
    2bfa:	d011      	beq.n	2c20 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2bfc:	697b      	ldr	r3, [r7, #20]
    2bfe:	2202      	movs	r2, #2
    2c00:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    2c02:	69bb      	ldr	r3, [r7, #24]
    2c04:	2233      	movs	r2, #51	; 0x33
    2c06:	2100      	movs	r1, #0
    2c08:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2c0a:	2310      	movs	r3, #16
    2c0c:	18fb      	adds	r3, r7, r3
    2c0e:	881b      	ldrh	r3, [r3, #0]
    2c10:	2201      	movs	r2, #1
    2c12:	4013      	ands	r3, r2
    2c14:	d004      	beq.n	2c20 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2c16:	69bb      	ldr	r3, [r7, #24]
    2c18:	68db      	ldr	r3, [r3, #12]
    2c1a:	69ba      	ldr	r2, [r7, #24]
    2c1c:	0010      	movs	r0, r2
    2c1e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2c20:	2312      	movs	r3, #18
    2c22:	18fb      	adds	r3, r7, r3
    2c24:	881b      	ldrh	r3, [r3, #0]
    2c26:	2204      	movs	r2, #4
    2c28:	4013      	ands	r3, r2
    2c2a:	d100      	bne.n	2c2e <_usart_interrupt_handler+0x132>
    2c2c:	e0bd      	b.n	2daa <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    2c2e:	69bb      	ldr	r3, [r7, #24]
    2c30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2c32:	b29b      	uxth	r3, r3
    2c34:	2b00      	cmp	r3, #0
    2c36:	d100      	bne.n	2c3a <_usart_interrupt_handler+0x13e>
    2c38:	e0b4      	b.n	2da4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c3a:	697b      	ldr	r3, [r7, #20]
    2c3c:	8b5b      	ldrh	r3, [r3, #26]
    2c3e:	b29b      	uxth	r3, r3
    2c40:	b2da      	uxtb	r2, r3
    2c42:	231f      	movs	r3, #31
    2c44:	18fb      	adds	r3, r7, r3
    2c46:	213f      	movs	r1, #63	; 0x3f
    2c48:	400a      	ands	r2, r1
    2c4a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2c4c:	231f      	movs	r3, #31
    2c4e:	18fb      	adds	r3, r7, r3
    2c50:	781b      	ldrb	r3, [r3, #0]
    2c52:	2208      	movs	r2, #8
    2c54:	4013      	ands	r3, r2
    2c56:	d007      	beq.n	2c68 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2c58:	231f      	movs	r3, #31
    2c5a:	18fb      	adds	r3, r7, r3
    2c5c:	221f      	movs	r2, #31
    2c5e:	18ba      	adds	r2, r7, r2
    2c60:	7812      	ldrb	r2, [r2, #0]
    2c62:	2108      	movs	r1, #8
    2c64:	438a      	bics	r2, r1
    2c66:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2c68:	231f      	movs	r3, #31
    2c6a:	18fb      	adds	r3, r7, r3
    2c6c:	781b      	ldrb	r3, [r3, #0]
    2c6e:	2b00      	cmp	r3, #0
    2c70:	d050      	beq.n	2d14 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2c72:	231f      	movs	r3, #31
    2c74:	18fb      	adds	r3, r7, r3
    2c76:	781b      	ldrb	r3, [r3, #0]
    2c78:	2202      	movs	r2, #2
    2c7a:	4013      	ands	r3, r2
    2c7c:	d007      	beq.n	2c8e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2c7e:	69bb      	ldr	r3, [r7, #24]
    2c80:	2232      	movs	r2, #50	; 0x32
    2c82:	211a      	movs	r1, #26
    2c84:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2c86:	697b      	ldr	r3, [r7, #20]
    2c88:	2202      	movs	r2, #2
    2c8a:	835a      	strh	r2, [r3, #26]
    2c8c:	e036      	b.n	2cfc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2c8e:	231f      	movs	r3, #31
    2c90:	18fb      	adds	r3, r7, r3
    2c92:	781b      	ldrb	r3, [r3, #0]
    2c94:	2204      	movs	r2, #4
    2c96:	4013      	ands	r3, r2
    2c98:	d007      	beq.n	2caa <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    2c9a:	69bb      	ldr	r3, [r7, #24]
    2c9c:	2232      	movs	r2, #50	; 0x32
    2c9e:	211e      	movs	r1, #30
    2ca0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2ca2:	697b      	ldr	r3, [r7, #20]
    2ca4:	2204      	movs	r2, #4
    2ca6:	835a      	strh	r2, [r3, #26]
    2ca8:	e028      	b.n	2cfc <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2caa:	231f      	movs	r3, #31
    2cac:	18fb      	adds	r3, r7, r3
    2cae:	781b      	ldrb	r3, [r3, #0]
    2cb0:	2201      	movs	r2, #1
    2cb2:	4013      	ands	r3, r2
    2cb4:	d007      	beq.n	2cc6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    2cb6:	69bb      	ldr	r3, [r7, #24]
    2cb8:	2232      	movs	r2, #50	; 0x32
    2cba:	2113      	movs	r1, #19
    2cbc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2cbe:	697b      	ldr	r3, [r7, #20]
    2cc0:	2201      	movs	r2, #1
    2cc2:	835a      	strh	r2, [r3, #26]
    2cc4:	e01a      	b.n	2cfc <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2cc6:	231f      	movs	r3, #31
    2cc8:	18fb      	adds	r3, r7, r3
    2cca:	781b      	ldrb	r3, [r3, #0]
    2ccc:	2210      	movs	r2, #16
    2cce:	4013      	ands	r3, r2
    2cd0:	d007      	beq.n	2ce2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    2cd2:	69bb      	ldr	r3, [r7, #24]
    2cd4:	2232      	movs	r2, #50	; 0x32
    2cd6:	2142      	movs	r1, #66	; 0x42
    2cd8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2cda:	697b      	ldr	r3, [r7, #20]
    2cdc:	2210      	movs	r2, #16
    2cde:	835a      	strh	r2, [r3, #26]
    2ce0:	e00c      	b.n	2cfc <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2ce2:	231f      	movs	r3, #31
    2ce4:	18fb      	adds	r3, r7, r3
    2ce6:	781b      	ldrb	r3, [r3, #0]
    2ce8:	2220      	movs	r2, #32
    2cea:	4013      	ands	r3, r2
    2cec:	d006      	beq.n	2cfc <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2cee:	69bb      	ldr	r3, [r7, #24]
    2cf0:	2232      	movs	r2, #50	; 0x32
    2cf2:	2141      	movs	r1, #65	; 0x41
    2cf4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2cf6:	697b      	ldr	r3, [r7, #20]
    2cf8:	2220      	movs	r2, #32
    2cfa:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    2cfc:	2310      	movs	r3, #16
    2cfe:	18fb      	adds	r3, r7, r3
    2d00:	881b      	ldrh	r3, [r3, #0]
    2d02:	2204      	movs	r2, #4
    2d04:	4013      	ands	r3, r2
				if (callback_status
    2d06:	d050      	beq.n	2daa <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2d08:	69bb      	ldr	r3, [r7, #24]
    2d0a:	695b      	ldr	r3, [r3, #20]
    2d0c:	69ba      	ldr	r2, [r7, #24]
    2d0e:	0010      	movs	r0, r2
    2d10:	4798      	blx	r3
    2d12:	e04a      	b.n	2daa <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2d14:	697b      	ldr	r3, [r7, #20]
    2d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2d18:	b29a      	uxth	r2, r3
    2d1a:	230e      	movs	r3, #14
    2d1c:	18fb      	adds	r3, r7, r3
    2d1e:	05d2      	lsls	r2, r2, #23
    2d20:	0dd2      	lsrs	r2, r2, #23
    2d22:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2d24:	69bb      	ldr	r3, [r7, #24]
    2d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d28:	220e      	movs	r2, #14
    2d2a:	18ba      	adds	r2, r7, r2
    2d2c:	8812      	ldrh	r2, [r2, #0]
    2d2e:	b2d2      	uxtb	r2, r2
    2d30:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2d32:	69bb      	ldr	r3, [r7, #24]
    2d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d36:	1c5a      	adds	r2, r3, #1
    2d38:	69bb      	ldr	r3, [r7, #24]
    2d3a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2d3c:	69bb      	ldr	r3, [r7, #24]
    2d3e:	795b      	ldrb	r3, [r3, #5]
    2d40:	2b01      	cmp	r3, #1
    2d42:	d10d      	bne.n	2d60 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2d44:	69bb      	ldr	r3, [r7, #24]
    2d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d48:	220e      	movs	r2, #14
    2d4a:	18ba      	adds	r2, r7, r2
    2d4c:	8812      	ldrh	r2, [r2, #0]
    2d4e:	0a12      	lsrs	r2, r2, #8
    2d50:	b292      	uxth	r2, r2
    2d52:	b2d2      	uxtb	r2, r2
    2d54:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    2d56:	69bb      	ldr	r3, [r7, #24]
    2d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d5a:	1c5a      	adds	r2, r3, #1
    2d5c:	69bb      	ldr	r3, [r7, #24]
    2d5e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2d60:	69bb      	ldr	r3, [r7, #24]
    2d62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2d64:	b29b      	uxth	r3, r3
    2d66:	3b01      	subs	r3, #1
    2d68:	b29b      	uxth	r3, r3
    2d6a:	69ba      	ldr	r2, [r7, #24]
    2d6c:	1c19      	adds	r1, r3, #0
    2d6e:	8591      	strh	r1, [r2, #44]	; 0x2c
    2d70:	2b00      	cmp	r3, #0
    2d72:	d11a      	bne.n	2daa <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2d74:	697b      	ldr	r3, [r7, #20]
    2d76:	2204      	movs	r2, #4
    2d78:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    2d7a:	69bb      	ldr	r3, [r7, #24]
    2d7c:	2232      	movs	r2, #50	; 0x32
    2d7e:	2100      	movs	r1, #0
    2d80:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    2d82:	2310      	movs	r3, #16
    2d84:	18fb      	adds	r3, r7, r3
    2d86:	881b      	ldrh	r3, [r3, #0]
    2d88:	2202      	movs	r2, #2
    2d8a:	4013      	ands	r3, r2
					if (callback_status
    2d8c:	d00d      	beq.n	2daa <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2d8e:	69bb      	ldr	r3, [r7, #24]
    2d90:	691b      	ldr	r3, [r3, #16]
    2d92:	69ba      	ldr	r2, [r7, #24]
    2d94:	0010      	movs	r0, r2
    2d96:	4798      	blx	r3
    2d98:	e007      	b.n	2daa <_usart_interrupt_handler+0x2ae>
    2d9a:	46c0      	nop			; (mov r8, r8)
    2d9c:	2000012c 	.word	0x2000012c
    2da0:	00002ad9 	.word	0x00002ad9
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2da4:	697b      	ldr	r3, [r7, #20]
    2da6:	2204      	movs	r2, #4
    2da8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2daa:	2312      	movs	r3, #18
    2dac:	18fb      	adds	r3, r7, r3
    2dae:	881b      	ldrh	r3, [r3, #0]
    2db0:	2210      	movs	r2, #16
    2db2:	4013      	ands	r3, r2
    2db4:	d010      	beq.n	2dd8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2db6:	697b      	ldr	r3, [r7, #20]
    2db8:	2210      	movs	r2, #16
    2dba:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2dbc:	697b      	ldr	r3, [r7, #20]
    2dbe:	2210      	movs	r2, #16
    2dc0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2dc2:	2310      	movs	r3, #16
    2dc4:	18fb      	adds	r3, r7, r3
    2dc6:	881b      	ldrh	r3, [r3, #0]
    2dc8:	2210      	movs	r2, #16
    2dca:	4013      	ands	r3, r2
    2dcc:	d004      	beq.n	2dd8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2dce:	69bb      	ldr	r3, [r7, #24]
    2dd0:	69db      	ldr	r3, [r3, #28]
    2dd2:	69ba      	ldr	r2, [r7, #24]
    2dd4:	0010      	movs	r0, r2
    2dd6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2dd8:	2312      	movs	r3, #18
    2dda:	18fb      	adds	r3, r7, r3
    2ddc:	881b      	ldrh	r3, [r3, #0]
    2dde:	2220      	movs	r2, #32
    2de0:	4013      	ands	r3, r2
    2de2:	d010      	beq.n	2e06 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2de4:	697b      	ldr	r3, [r7, #20]
    2de6:	2220      	movs	r2, #32
    2de8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2dea:	697b      	ldr	r3, [r7, #20]
    2dec:	2220      	movs	r2, #32
    2dee:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2df0:	2310      	movs	r3, #16
    2df2:	18fb      	adds	r3, r7, r3
    2df4:	881b      	ldrh	r3, [r3, #0]
    2df6:	2208      	movs	r2, #8
    2df8:	4013      	ands	r3, r2
    2dfa:	d004      	beq.n	2e06 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2dfc:	69bb      	ldr	r3, [r7, #24]
    2dfe:	699b      	ldr	r3, [r3, #24]
    2e00:	69ba      	ldr	r2, [r7, #24]
    2e02:	0010      	movs	r0, r2
    2e04:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2e06:	2312      	movs	r3, #18
    2e08:	18fb      	adds	r3, r7, r3
    2e0a:	881b      	ldrh	r3, [r3, #0]
    2e0c:	2208      	movs	r2, #8
    2e0e:	4013      	ands	r3, r2
    2e10:	d010      	beq.n	2e34 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2e12:	697b      	ldr	r3, [r7, #20]
    2e14:	2208      	movs	r2, #8
    2e16:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2e18:	697b      	ldr	r3, [r7, #20]
    2e1a:	2208      	movs	r2, #8
    2e1c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2e1e:	2310      	movs	r3, #16
    2e20:	18fb      	adds	r3, r7, r3
    2e22:	881b      	ldrh	r3, [r3, #0]
    2e24:	2220      	movs	r2, #32
    2e26:	4013      	ands	r3, r2
    2e28:	d004      	beq.n	2e34 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2e2a:	69bb      	ldr	r3, [r7, #24]
    2e2c:	6a1b      	ldr	r3, [r3, #32]
    2e2e:	69ba      	ldr	r2, [r7, #24]
    2e30:	0010      	movs	r0, r2
    2e32:	4798      	blx	r3
		}
	}
#endif
}
    2e34:	46c0      	nop			; (mov r8, r8)
    2e36:	46bd      	mov	sp, r7
    2e38:	b008      	add	sp, #32
    2e3a:	bd80      	pop	{r7, pc}

00002e3c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    2e3c:	b580      	push	{r7, lr}
    2e3e:	b082      	sub	sp, #8
    2e40:	af00      	add	r7, sp, #0
    2e42:	0002      	movs	r2, r0
    2e44:	1dfb      	adds	r3, r7, #7
    2e46:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    2e48:	46c0      	nop			; (mov r8, r8)
    2e4a:	46bd      	mov	sp, r7
    2e4c:	b002      	add	sp, #8
    2e4e:	bd80      	pop	{r7, pc}

00002e50 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2e50:	b580      	push	{r7, lr}
    2e52:	b084      	sub	sp, #16
    2e54:	af00      	add	r7, sp, #0
    2e56:	0002      	movs	r2, r0
    2e58:	6039      	str	r1, [r7, #0]
    2e5a:	1dfb      	adds	r3, r7, #7
    2e5c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2e5e:	4b13      	ldr	r3, [pc, #76]	; (2eac <_sercom_set_handler+0x5c>)
    2e60:	781b      	ldrb	r3, [r3, #0]
    2e62:	2201      	movs	r2, #1
    2e64:	4053      	eors	r3, r2
    2e66:	b2db      	uxtb	r3, r3
    2e68:	2b00      	cmp	r3, #0
    2e6a:	d015      	beq.n	2e98 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2e6c:	2300      	movs	r3, #0
    2e6e:	60fb      	str	r3, [r7, #12]
    2e70:	e00c      	b.n	2e8c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2e72:	4b0f      	ldr	r3, [pc, #60]	; (2eb0 <_sercom_set_handler+0x60>)
    2e74:	68fa      	ldr	r2, [r7, #12]
    2e76:	0092      	lsls	r2, r2, #2
    2e78:	490e      	ldr	r1, [pc, #56]	; (2eb4 <_sercom_set_handler+0x64>)
    2e7a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    2e7c:	4b0e      	ldr	r3, [pc, #56]	; (2eb8 <_sercom_set_handler+0x68>)
    2e7e:	68fa      	ldr	r2, [r7, #12]
    2e80:	0092      	lsls	r2, r2, #2
    2e82:	2100      	movs	r1, #0
    2e84:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2e86:	68fb      	ldr	r3, [r7, #12]
    2e88:	3301      	adds	r3, #1
    2e8a:	60fb      	str	r3, [r7, #12]
    2e8c:	68fb      	ldr	r3, [r7, #12]
    2e8e:	2b05      	cmp	r3, #5
    2e90:	d9ef      	bls.n	2e72 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    2e92:	4b06      	ldr	r3, [pc, #24]	; (2eac <_sercom_set_handler+0x5c>)
    2e94:	2201      	movs	r2, #1
    2e96:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2e98:	1dfb      	adds	r3, r7, #7
    2e9a:	781a      	ldrb	r2, [r3, #0]
    2e9c:	4b04      	ldr	r3, [pc, #16]	; (2eb0 <_sercom_set_handler+0x60>)
    2e9e:	0092      	lsls	r2, r2, #2
    2ea0:	6839      	ldr	r1, [r7, #0]
    2ea2:	50d1      	str	r1, [r2, r3]
}
    2ea4:	46c0      	nop			; (mov r8, r8)
    2ea6:	46bd      	mov	sp, r7
    2ea8:	b004      	add	sp, #16
    2eaa:	bd80      	pop	{r7, pc}
    2eac:	20000096 	.word	0x20000096
    2eb0:	20000098 	.word	0x20000098
    2eb4:	00002e3d 	.word	0x00002e3d
    2eb8:	2000012c 	.word	0x2000012c

00002ebc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2ebc:	b590      	push	{r4, r7, lr}
    2ebe:	b085      	sub	sp, #20
    2ec0:	af00      	add	r7, sp, #0
    2ec2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2ec4:	2308      	movs	r3, #8
    2ec6:	18fa      	adds	r2, r7, r3
    2ec8:	4b0c      	ldr	r3, [pc, #48]	; (2efc <_sercom_get_interrupt_vector+0x40>)
    2eca:	0010      	movs	r0, r2
    2ecc:	0019      	movs	r1, r3
    2ece:	2306      	movs	r3, #6
    2ed0:	001a      	movs	r2, r3
    2ed2:	4b0b      	ldr	r3, [pc, #44]	; (2f00 <_sercom_get_interrupt_vector+0x44>)
    2ed4:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2ed6:	230f      	movs	r3, #15
    2ed8:	18fc      	adds	r4, r7, r3
    2eda:	687b      	ldr	r3, [r7, #4]
    2edc:	0018      	movs	r0, r3
    2ede:	4b09      	ldr	r3, [pc, #36]	; (2f04 <_sercom_get_interrupt_vector+0x48>)
    2ee0:	4798      	blx	r3
    2ee2:	0003      	movs	r3, r0
    2ee4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2ee6:	230f      	movs	r3, #15
    2ee8:	18fb      	adds	r3, r7, r3
    2eea:	781b      	ldrb	r3, [r3, #0]
    2eec:	2208      	movs	r2, #8
    2eee:	18ba      	adds	r2, r7, r2
    2ef0:	5cd3      	ldrb	r3, [r2, r3]
    2ef2:	b25b      	sxtb	r3, r3
}
    2ef4:	0018      	movs	r0, r3
    2ef6:	46bd      	mov	sp, r7
    2ef8:	b005      	add	sp, #20
    2efa:	bd90      	pop	{r4, r7, pc}
    2efc:	00005c44 	.word	0x00005c44
    2f00:	000049f5 	.word	0x000049f5
    2f04:	00002209 	.word	0x00002209

00002f08 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2f08:	b580      	push	{r7, lr}
    2f0a:	af00      	add	r7, sp, #0
    2f0c:	4b03      	ldr	r3, [pc, #12]	; (2f1c <SERCOM0_Handler+0x14>)
    2f0e:	681b      	ldr	r3, [r3, #0]
    2f10:	2000      	movs	r0, #0
    2f12:	4798      	blx	r3
    2f14:	46c0      	nop			; (mov r8, r8)
    2f16:	46bd      	mov	sp, r7
    2f18:	bd80      	pop	{r7, pc}
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	20000098 	.word	0x20000098

00002f20 <SERCOM1_Handler>:
    2f20:	b580      	push	{r7, lr}
    2f22:	af00      	add	r7, sp, #0
    2f24:	4b03      	ldr	r3, [pc, #12]	; (2f34 <SERCOM1_Handler+0x14>)
    2f26:	685b      	ldr	r3, [r3, #4]
    2f28:	2001      	movs	r0, #1
    2f2a:	4798      	blx	r3
    2f2c:	46c0      	nop			; (mov r8, r8)
    2f2e:	46bd      	mov	sp, r7
    2f30:	bd80      	pop	{r7, pc}
    2f32:	46c0      	nop			; (mov r8, r8)
    2f34:	20000098 	.word	0x20000098

00002f38 <SERCOM2_Handler>:
    2f38:	b580      	push	{r7, lr}
    2f3a:	af00      	add	r7, sp, #0
    2f3c:	4b03      	ldr	r3, [pc, #12]	; (2f4c <SERCOM2_Handler+0x14>)
    2f3e:	689b      	ldr	r3, [r3, #8]
    2f40:	2002      	movs	r0, #2
    2f42:	4798      	blx	r3
    2f44:	46c0      	nop			; (mov r8, r8)
    2f46:	46bd      	mov	sp, r7
    2f48:	bd80      	pop	{r7, pc}
    2f4a:	46c0      	nop			; (mov r8, r8)
    2f4c:	20000098 	.word	0x20000098

00002f50 <SERCOM3_Handler>:
    2f50:	b580      	push	{r7, lr}
    2f52:	af00      	add	r7, sp, #0
    2f54:	4b03      	ldr	r3, [pc, #12]	; (2f64 <SERCOM3_Handler+0x14>)
    2f56:	68db      	ldr	r3, [r3, #12]
    2f58:	2003      	movs	r0, #3
    2f5a:	4798      	blx	r3
    2f5c:	46c0      	nop			; (mov r8, r8)
    2f5e:	46bd      	mov	sp, r7
    2f60:	bd80      	pop	{r7, pc}
    2f62:	46c0      	nop			; (mov r8, r8)
    2f64:	20000098 	.word	0x20000098

00002f68 <SERCOM4_Handler>:
    2f68:	b580      	push	{r7, lr}
    2f6a:	af00      	add	r7, sp, #0
    2f6c:	4b03      	ldr	r3, [pc, #12]	; (2f7c <SERCOM4_Handler+0x14>)
    2f6e:	691b      	ldr	r3, [r3, #16]
    2f70:	2004      	movs	r0, #4
    2f72:	4798      	blx	r3
    2f74:	46c0      	nop			; (mov r8, r8)
    2f76:	46bd      	mov	sp, r7
    2f78:	bd80      	pop	{r7, pc}
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	20000098 	.word	0x20000098

00002f80 <SERCOM5_Handler>:
    2f80:	b580      	push	{r7, lr}
    2f82:	af00      	add	r7, sp, #0
    2f84:	4b03      	ldr	r3, [pc, #12]	; (2f94 <SERCOM5_Handler+0x14>)
    2f86:	695b      	ldr	r3, [r3, #20]
    2f88:	2005      	movs	r0, #5
    2f8a:	4798      	blx	r3
    2f8c:	46c0      	nop			; (mov r8, r8)
    2f8e:	46bd      	mov	sp, r7
    2f90:	bd80      	pop	{r7, pc}
    2f92:	46c0      	nop			; (mov r8, r8)
    2f94:	20000098 	.word	0x20000098

00002f98 <system_pinmux_get_config_defaults>:
{
    2f98:	b580      	push	{r7, lr}
    2f9a:	b082      	sub	sp, #8
    2f9c:	af00      	add	r7, sp, #0
    2f9e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2fa0:	687b      	ldr	r3, [r7, #4]
    2fa2:	2280      	movs	r2, #128	; 0x80
    2fa4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2fa6:	687b      	ldr	r3, [r7, #4]
    2fa8:	2200      	movs	r2, #0
    2faa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2fac:	687b      	ldr	r3, [r7, #4]
    2fae:	2201      	movs	r2, #1
    2fb0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	2200      	movs	r2, #0
    2fb6:	70da      	strb	r2, [r3, #3]
}
    2fb8:	46c0      	nop			; (mov r8, r8)
    2fba:	46bd      	mov	sp, r7
    2fbc:	b002      	add	sp, #8
    2fbe:	bd80      	pop	{r7, pc}

00002fc0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2fc0:	b580      	push	{r7, lr}
    2fc2:	b084      	sub	sp, #16
    2fc4:	af00      	add	r7, sp, #0
    2fc6:	0002      	movs	r2, r0
    2fc8:	6039      	str	r1, [r7, #0]
    2fca:	1dfb      	adds	r3, r7, #7
    2fcc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2fce:	230c      	movs	r3, #12
    2fd0:	18fb      	adds	r3, r7, r3
    2fd2:	0018      	movs	r0, r3
    2fd4:	4b10      	ldr	r3, [pc, #64]	; (3018 <port_pin_set_config+0x58>)
    2fd6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    2fd8:	230c      	movs	r3, #12
    2fda:	18fb      	adds	r3, r7, r3
    2fdc:	2280      	movs	r2, #128	; 0x80
    2fde:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2fe0:	683b      	ldr	r3, [r7, #0]
    2fe2:	781a      	ldrb	r2, [r3, #0]
    2fe4:	230c      	movs	r3, #12
    2fe6:	18fb      	adds	r3, r7, r3
    2fe8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2fea:	683b      	ldr	r3, [r7, #0]
    2fec:	785a      	ldrb	r2, [r3, #1]
    2fee:	230c      	movs	r3, #12
    2ff0:	18fb      	adds	r3, r7, r3
    2ff2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2ff4:	683b      	ldr	r3, [r7, #0]
    2ff6:	789a      	ldrb	r2, [r3, #2]
    2ff8:	230c      	movs	r3, #12
    2ffa:	18fb      	adds	r3, r7, r3
    2ffc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2ffe:	230c      	movs	r3, #12
    3000:	18fa      	adds	r2, r7, r3
    3002:	1dfb      	adds	r3, r7, #7
    3004:	781b      	ldrb	r3, [r3, #0]
    3006:	0011      	movs	r1, r2
    3008:	0018      	movs	r0, r3
    300a:	4b04      	ldr	r3, [pc, #16]	; (301c <port_pin_set_config+0x5c>)
    300c:	4798      	blx	r3
}
    300e:	46c0      	nop			; (mov r8, r8)
    3010:	46bd      	mov	sp, r7
    3012:	b004      	add	sp, #16
    3014:	bd80      	pop	{r7, pc}
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	00002f99 	.word	0x00002f99
    301c:	00003b1d 	.word	0x00003b1d

00003020 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3020:	b580      	push	{r7, lr}
    3022:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    3024:	46c0      	nop			; (mov r8, r8)
    3026:	46bd      	mov	sp, r7
    3028:	bd80      	pop	{r7, pc}
	...

0000302c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    302c:	b580      	push	{r7, lr}
    302e:	b082      	sub	sp, #8
    3030:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    3032:	4b10      	ldr	r3, [pc, #64]	; (3074 <cpu_irq_enter_critical+0x48>)
    3034:	681b      	ldr	r3, [r3, #0]
    3036:	2b00      	cmp	r3, #0
    3038:	d112      	bne.n	3060 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    303a:	f3ef 8310 	mrs	r3, PRIMASK
    303e:	607b      	str	r3, [r7, #4]
  return(result);
    3040:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    3042:	2b00      	cmp	r3, #0
    3044:	d109      	bne.n	305a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    3046:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3048:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    304c:	4b0a      	ldr	r3, [pc, #40]	; (3078 <cpu_irq_enter_critical+0x4c>)
    304e:	2200      	movs	r2, #0
    3050:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3052:	4b0a      	ldr	r3, [pc, #40]	; (307c <cpu_irq_enter_critical+0x50>)
    3054:	2201      	movs	r2, #1
    3056:	701a      	strb	r2, [r3, #0]
    3058:	e002      	b.n	3060 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    305a:	4b08      	ldr	r3, [pc, #32]	; (307c <cpu_irq_enter_critical+0x50>)
    305c:	2200      	movs	r2, #0
    305e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3060:	4b04      	ldr	r3, [pc, #16]	; (3074 <cpu_irq_enter_critical+0x48>)
    3062:	681b      	ldr	r3, [r3, #0]
    3064:	1c5a      	adds	r2, r3, #1
    3066:	4b03      	ldr	r3, [pc, #12]	; (3074 <cpu_irq_enter_critical+0x48>)
    3068:	601a      	str	r2, [r3, #0]
}
    306a:	46c0      	nop			; (mov r8, r8)
    306c:	46bd      	mov	sp, r7
    306e:	b002      	add	sp, #8
    3070:	bd80      	pop	{r7, pc}
    3072:	46c0      	nop			; (mov r8, r8)
    3074:	200000b0 	.word	0x200000b0
    3078:	20000008 	.word	0x20000008
    307c:	200000b4 	.word	0x200000b4

00003080 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3080:	b580      	push	{r7, lr}
    3082:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3084:	4b0b      	ldr	r3, [pc, #44]	; (30b4 <cpu_irq_leave_critical+0x34>)
    3086:	681b      	ldr	r3, [r3, #0]
    3088:	1e5a      	subs	r2, r3, #1
    308a:	4b0a      	ldr	r3, [pc, #40]	; (30b4 <cpu_irq_leave_critical+0x34>)
    308c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    308e:	4b09      	ldr	r3, [pc, #36]	; (30b4 <cpu_irq_leave_critical+0x34>)
    3090:	681b      	ldr	r3, [r3, #0]
    3092:	2b00      	cmp	r3, #0
    3094:	d10a      	bne.n	30ac <cpu_irq_leave_critical+0x2c>
    3096:	4b08      	ldr	r3, [pc, #32]	; (30b8 <cpu_irq_leave_critical+0x38>)
    3098:	781b      	ldrb	r3, [r3, #0]
    309a:	b2db      	uxtb	r3, r3
    309c:	2b00      	cmp	r3, #0
    309e:	d005      	beq.n	30ac <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    30a0:	4b06      	ldr	r3, [pc, #24]	; (30bc <cpu_irq_leave_critical+0x3c>)
    30a2:	2201      	movs	r2, #1
    30a4:	701a      	strb	r2, [r3, #0]
    30a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    30aa:	b662      	cpsie	i
	}
}
    30ac:	46c0      	nop			; (mov r8, r8)
    30ae:	46bd      	mov	sp, r7
    30b0:	bd80      	pop	{r7, pc}
    30b2:	46c0      	nop			; (mov r8, r8)
    30b4:	200000b0 	.word	0x200000b0
    30b8:	200000b4 	.word	0x200000b4
    30bc:	20000008 	.word	0x20000008

000030c0 <system_gclk_gen_get_config_defaults>:
{
    30c0:	b580      	push	{r7, lr}
    30c2:	b082      	sub	sp, #8
    30c4:	af00      	add	r7, sp, #0
    30c6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    30c8:	687b      	ldr	r3, [r7, #4]
    30ca:	2201      	movs	r2, #1
    30cc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    30ce:	687b      	ldr	r3, [r7, #4]
    30d0:	2200      	movs	r2, #0
    30d2:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    30d4:	687b      	ldr	r3, [r7, #4]
    30d6:	2206      	movs	r2, #6
    30d8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    30da:	687b      	ldr	r3, [r7, #4]
    30dc:	2200      	movs	r2, #0
    30de:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    30e0:	687b      	ldr	r3, [r7, #4]
    30e2:	2200      	movs	r2, #0
    30e4:	725a      	strb	r2, [r3, #9]
}
    30e6:	46c0      	nop			; (mov r8, r8)
    30e8:	46bd      	mov	sp, r7
    30ea:	b002      	add	sp, #8
    30ec:	bd80      	pop	{r7, pc}

000030ee <system_clock_source_osc8m_get_config_defaults>:
{
    30ee:	b580      	push	{r7, lr}
    30f0:	b082      	sub	sp, #8
    30f2:	af00      	add	r7, sp, #0
    30f4:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    30f6:	687b      	ldr	r3, [r7, #4]
    30f8:	2203      	movs	r2, #3
    30fa:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	2200      	movs	r2, #0
    3100:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    3102:	687b      	ldr	r3, [r7, #4]
    3104:	2201      	movs	r2, #1
    3106:	709a      	strb	r2, [r3, #2]
}
    3108:	46c0      	nop			; (mov r8, r8)
    310a:	46bd      	mov	sp, r7
    310c:	b002      	add	sp, #8
    310e:	bd80      	pop	{r7, pc}

00003110 <system_cpu_clock_set_divider>:
{
    3110:	b580      	push	{r7, lr}
    3112:	b082      	sub	sp, #8
    3114:	af00      	add	r7, sp, #0
    3116:	0002      	movs	r2, r0
    3118:	1dfb      	adds	r3, r7, #7
    311a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    311c:	4a03      	ldr	r2, [pc, #12]	; (312c <system_cpu_clock_set_divider+0x1c>)
    311e:	1dfb      	adds	r3, r7, #7
    3120:	781b      	ldrb	r3, [r3, #0]
    3122:	7213      	strb	r3, [r2, #8]
}
    3124:	46c0      	nop			; (mov r8, r8)
    3126:	46bd      	mov	sp, r7
    3128:	b002      	add	sp, #8
    312a:	bd80      	pop	{r7, pc}
    312c:	40000400 	.word	0x40000400

00003130 <system_apb_clock_set_divider>:
{
    3130:	b580      	push	{r7, lr}
    3132:	b082      	sub	sp, #8
    3134:	af00      	add	r7, sp, #0
    3136:	0002      	movs	r2, r0
    3138:	1dfb      	adds	r3, r7, #7
    313a:	701a      	strb	r2, [r3, #0]
    313c:	1dbb      	adds	r3, r7, #6
    313e:	1c0a      	adds	r2, r1, #0
    3140:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3142:	1dfb      	adds	r3, r7, #7
    3144:	781b      	ldrb	r3, [r3, #0]
    3146:	2b01      	cmp	r3, #1
    3148:	d008      	beq.n	315c <system_apb_clock_set_divider+0x2c>
    314a:	2b02      	cmp	r3, #2
    314c:	d00b      	beq.n	3166 <system_apb_clock_set_divider+0x36>
    314e:	2b00      	cmp	r3, #0
    3150:	d10e      	bne.n	3170 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    3152:	4a0b      	ldr	r2, [pc, #44]	; (3180 <system_apb_clock_set_divider+0x50>)
    3154:	1dbb      	adds	r3, r7, #6
    3156:	781b      	ldrb	r3, [r3, #0]
    3158:	7253      	strb	r3, [r2, #9]
			break;
    315a:	e00b      	b.n	3174 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    315c:	4a08      	ldr	r2, [pc, #32]	; (3180 <system_apb_clock_set_divider+0x50>)
    315e:	1dbb      	adds	r3, r7, #6
    3160:	781b      	ldrb	r3, [r3, #0]
    3162:	7293      	strb	r3, [r2, #10]
			break;
    3164:	e006      	b.n	3174 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    3166:	4a06      	ldr	r2, [pc, #24]	; (3180 <system_apb_clock_set_divider+0x50>)
    3168:	1dbb      	adds	r3, r7, #6
    316a:	781b      	ldrb	r3, [r3, #0]
    316c:	72d3      	strb	r3, [r2, #11]
			break;
    316e:	e001      	b.n	3174 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    3170:	2317      	movs	r3, #23
    3172:	e000      	b.n	3176 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    3174:	2300      	movs	r3, #0
}
    3176:	0018      	movs	r0, r3
    3178:	46bd      	mov	sp, r7
    317a:	b002      	add	sp, #8
    317c:	bd80      	pop	{r7, pc}
    317e:	46c0      	nop			; (mov r8, r8)
    3180:	40000400 	.word	0x40000400

00003184 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    3184:	b580      	push	{r7, lr}
    3186:	b082      	sub	sp, #8
    3188:	af00      	add	r7, sp, #0
    318a:	0002      	movs	r2, r0
    318c:	1dfb      	adds	r3, r7, #7
    318e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3190:	4a08      	ldr	r2, [pc, #32]	; (31b4 <system_flash_set_waitstates+0x30>)
    3192:	1dfb      	adds	r3, r7, #7
    3194:	781b      	ldrb	r3, [r3, #0]
    3196:	210f      	movs	r1, #15
    3198:	400b      	ands	r3, r1
    319a:	b2d9      	uxtb	r1, r3
    319c:	6853      	ldr	r3, [r2, #4]
    319e:	200f      	movs	r0, #15
    31a0:	4001      	ands	r1, r0
    31a2:	0049      	lsls	r1, r1, #1
    31a4:	201e      	movs	r0, #30
    31a6:	4383      	bics	r3, r0
    31a8:	430b      	orrs	r3, r1
    31aa:	6053      	str	r3, [r2, #4]
}
    31ac:	46c0      	nop			; (mov r8, r8)
    31ae:	46bd      	mov	sp, r7
    31b0:	b002      	add	sp, #8
    31b2:	bd80      	pop	{r7, pc}
    31b4:	41004000 	.word	0x41004000

000031b8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    31b8:	b580      	push	{r7, lr}
    31ba:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    31bc:	46c0      	nop			; (mov r8, r8)
    31be:	4b04      	ldr	r3, [pc, #16]	; (31d0 <_system_dfll_wait_for_sync+0x18>)
    31c0:	68db      	ldr	r3, [r3, #12]
    31c2:	2210      	movs	r2, #16
    31c4:	4013      	ands	r3, r2
    31c6:	d0fa      	beq.n	31be <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    31c8:	46c0      	nop			; (mov r8, r8)
    31ca:	46bd      	mov	sp, r7
    31cc:	bd80      	pop	{r7, pc}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	40000800 	.word	0x40000800

000031d4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    31d4:	b580      	push	{r7, lr}
    31d6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    31d8:	4b0c      	ldr	r3, [pc, #48]	; (320c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    31da:	2202      	movs	r2, #2
    31dc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    31de:	4b0c      	ldr	r3, [pc, #48]	; (3210 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    31e0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    31e2:	4a0a      	ldr	r2, [pc, #40]	; (320c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    31e4:	4b0b      	ldr	r3, [pc, #44]	; (3214 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    31e6:	689b      	ldr	r3, [r3, #8]
    31e8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    31ea:	4a08      	ldr	r2, [pc, #32]	; (320c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    31ec:	4b09      	ldr	r3, [pc, #36]	; (3214 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    31ee:	685b      	ldr	r3, [r3, #4]
    31f0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    31f2:	4b06      	ldr	r3, [pc, #24]	; (320c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    31f4:	2200      	movs	r2, #0
    31f6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    31f8:	4b05      	ldr	r3, [pc, #20]	; (3210 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    31fa:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    31fc:	4a03      	ldr	r2, [pc, #12]	; (320c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    31fe:	4b05      	ldr	r3, [pc, #20]	; (3214 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3200:	681b      	ldr	r3, [r3, #0]
    3202:	b29b      	uxth	r3, r3
    3204:	8493      	strh	r3, [r2, #36]	; 0x24
}
    3206:	46c0      	nop			; (mov r8, r8)
    3208:	46bd      	mov	sp, r7
    320a:	bd80      	pop	{r7, pc}
    320c:	40000800 	.word	0x40000800
    3210:	000031b9 	.word	0x000031b9
    3214:	200000b8 	.word	0x200000b8

00003218 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3218:	b580      	push	{r7, lr}
    321a:	b082      	sub	sp, #8
    321c:	af00      	add	r7, sp, #0
    321e:	0002      	movs	r2, r0
    3220:	1dfb      	adds	r3, r7, #7
    3222:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3224:	1dfb      	adds	r3, r7, #7
    3226:	781b      	ldrb	r3, [r3, #0]
    3228:	2b08      	cmp	r3, #8
    322a:	d840      	bhi.n	32ae <system_clock_source_get_hz+0x96>
    322c:	009a      	lsls	r2, r3, #2
    322e:	4b22      	ldr	r3, [pc, #136]	; (32b8 <system_clock_source_get_hz+0xa0>)
    3230:	18d3      	adds	r3, r2, r3
    3232:	681b      	ldr	r3, [r3, #0]
    3234:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3236:	4b21      	ldr	r3, [pc, #132]	; (32bc <system_clock_source_get_hz+0xa4>)
    3238:	691b      	ldr	r3, [r3, #16]
    323a:	e039      	b.n	32b0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    323c:	4b20      	ldr	r3, [pc, #128]	; (32c0 <system_clock_source_get_hz+0xa8>)
    323e:	6a1b      	ldr	r3, [r3, #32]
    3240:	059b      	lsls	r3, r3, #22
    3242:	0f9b      	lsrs	r3, r3, #30
    3244:	b2db      	uxtb	r3, r3
    3246:	001a      	movs	r2, r3
    3248:	4b1e      	ldr	r3, [pc, #120]	; (32c4 <system_clock_source_get_hz+0xac>)
    324a:	40d3      	lsrs	r3, r2
    324c:	e030      	b.n	32b0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    324e:	2380      	movs	r3, #128	; 0x80
    3250:	021b      	lsls	r3, r3, #8
    3252:	e02d      	b.n	32b0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    3254:	2380      	movs	r3, #128	; 0x80
    3256:	021b      	lsls	r3, r3, #8
    3258:	e02a      	b.n	32b0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    325a:	4b18      	ldr	r3, [pc, #96]	; (32bc <system_clock_source_get_hz+0xa4>)
    325c:	695b      	ldr	r3, [r3, #20]
    325e:	e027      	b.n	32b0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    3260:	4b16      	ldr	r3, [pc, #88]	; (32bc <system_clock_source_get_hz+0xa4>)
    3262:	681b      	ldr	r3, [r3, #0]
    3264:	2202      	movs	r2, #2
    3266:	4013      	ands	r3, r2
    3268:	d101      	bne.n	326e <system_clock_source_get_hz+0x56>
			return 0;
    326a:	2300      	movs	r3, #0
    326c:	e020      	b.n	32b0 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    326e:	4b16      	ldr	r3, [pc, #88]	; (32c8 <system_clock_source_get_hz+0xb0>)
    3270:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    3272:	4b12      	ldr	r3, [pc, #72]	; (32bc <system_clock_source_get_hz+0xa4>)
    3274:	681b      	ldr	r3, [r3, #0]
    3276:	2204      	movs	r2, #4
    3278:	4013      	ands	r3, r2
    327a:	d009      	beq.n	3290 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    327c:	2000      	movs	r0, #0
    327e:	4b13      	ldr	r3, [pc, #76]	; (32cc <system_clock_source_get_hz+0xb4>)
    3280:	4798      	blx	r3
    3282:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    3284:	4b0d      	ldr	r3, [pc, #52]	; (32bc <system_clock_source_get_hz+0xa4>)
    3286:	689b      	ldr	r3, [r3, #8]
    3288:	041b      	lsls	r3, r3, #16
    328a:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    328c:	4353      	muls	r3, r2
    328e:	e00f      	b.n	32b0 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    3290:	4b0f      	ldr	r3, [pc, #60]	; (32d0 <system_clock_source_get_hz+0xb8>)
    3292:	e00d      	b.n	32b0 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    3294:	4a0a      	ldr	r2, [pc, #40]	; (32c0 <system_clock_source_get_hz+0xa8>)
    3296:	2350      	movs	r3, #80	; 0x50
    3298:	5cd3      	ldrb	r3, [r2, r3]
    329a:	b2db      	uxtb	r3, r3
    329c:	001a      	movs	r2, r3
    329e:	2304      	movs	r3, #4
    32a0:	4013      	ands	r3, r2
    32a2:	d101      	bne.n	32a8 <system_clock_source_get_hz+0x90>
			return 0;
    32a4:	2300      	movs	r3, #0
    32a6:	e003      	b.n	32b0 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    32a8:	4b04      	ldr	r3, [pc, #16]	; (32bc <system_clock_source_get_hz+0xa4>)
    32aa:	68db      	ldr	r3, [r3, #12]
    32ac:	e000      	b.n	32b0 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    32ae:	2300      	movs	r3, #0
	}
}
    32b0:	0018      	movs	r0, r3
    32b2:	46bd      	mov	sp, r7
    32b4:	b002      	add	sp, #8
    32b6:	bd80      	pop	{r7, pc}
    32b8:	00005c4c 	.word	0x00005c4c
    32bc:	200000b8 	.word	0x200000b8
    32c0:	40000800 	.word	0x40000800
    32c4:	007a1200 	.word	0x007a1200
    32c8:	000031b9 	.word	0x000031b9
    32cc:	00003955 	.word	0x00003955
    32d0:	02dc6c00 	.word	0x02dc6c00

000032d4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    32d4:	b580      	push	{r7, lr}
    32d6:	b084      	sub	sp, #16
    32d8:	af00      	add	r7, sp, #0
    32da:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    32dc:	4b1a      	ldr	r3, [pc, #104]	; (3348 <system_clock_source_osc8m_set_config+0x74>)
    32de:	6a1b      	ldr	r3, [r3, #32]
    32e0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    32e2:	687b      	ldr	r3, [r7, #4]
    32e4:	781b      	ldrb	r3, [r3, #0]
    32e6:	1c1a      	adds	r2, r3, #0
    32e8:	2303      	movs	r3, #3
    32ea:	4013      	ands	r3, r2
    32ec:	b2da      	uxtb	r2, r3
    32ee:	230d      	movs	r3, #13
    32f0:	18fb      	adds	r3, r7, r3
    32f2:	2103      	movs	r1, #3
    32f4:	400a      	ands	r2, r1
    32f6:	0010      	movs	r0, r2
    32f8:	781a      	ldrb	r2, [r3, #0]
    32fa:	2103      	movs	r1, #3
    32fc:	438a      	bics	r2, r1
    32fe:	1c11      	adds	r1, r2, #0
    3300:	1c02      	adds	r2, r0, #0
    3302:	430a      	orrs	r2, r1
    3304:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    3306:	687b      	ldr	r3, [r7, #4]
    3308:	789a      	ldrb	r2, [r3, #2]
    330a:	230c      	movs	r3, #12
    330c:	18fb      	adds	r3, r7, r3
    330e:	01d0      	lsls	r0, r2, #7
    3310:	781a      	ldrb	r2, [r3, #0]
    3312:	217f      	movs	r1, #127	; 0x7f
    3314:	400a      	ands	r2, r1
    3316:	1c11      	adds	r1, r2, #0
    3318:	1c02      	adds	r2, r0, #0
    331a:	430a      	orrs	r2, r1
    331c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    331e:	687b      	ldr	r3, [r7, #4]
    3320:	785a      	ldrb	r2, [r3, #1]
    3322:	230c      	movs	r3, #12
    3324:	18fb      	adds	r3, r7, r3
    3326:	2101      	movs	r1, #1
    3328:	400a      	ands	r2, r1
    332a:	0190      	lsls	r0, r2, #6
    332c:	781a      	ldrb	r2, [r3, #0]
    332e:	2140      	movs	r1, #64	; 0x40
    3330:	438a      	bics	r2, r1
    3332:	1c11      	adds	r1, r2, #0
    3334:	1c02      	adds	r2, r0, #0
    3336:	430a      	orrs	r2, r1
    3338:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    333a:	4b03      	ldr	r3, [pc, #12]	; (3348 <system_clock_source_osc8m_set_config+0x74>)
    333c:	68fa      	ldr	r2, [r7, #12]
    333e:	621a      	str	r2, [r3, #32]
}
    3340:	46c0      	nop			; (mov r8, r8)
    3342:	46bd      	mov	sp, r7
    3344:	b004      	add	sp, #16
    3346:	bd80      	pop	{r7, pc}
    3348:	40000800 	.word	0x40000800

0000334c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    334c:	b580      	push	{r7, lr}
    334e:	b082      	sub	sp, #8
    3350:	af00      	add	r7, sp, #0
    3352:	0002      	movs	r2, r0
    3354:	1dfb      	adds	r3, r7, #7
    3356:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3358:	1dfb      	adds	r3, r7, #7
    335a:	781b      	ldrb	r3, [r3, #0]
    335c:	2b08      	cmp	r3, #8
    335e:	d83b      	bhi.n	33d8 <system_clock_source_enable+0x8c>
    3360:	009a      	lsls	r2, r3, #2
    3362:	4b21      	ldr	r3, [pc, #132]	; (33e8 <system_clock_source_enable+0x9c>)
    3364:	18d3      	adds	r3, r2, r3
    3366:	681b      	ldr	r3, [r3, #0]
    3368:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    336a:	4b20      	ldr	r3, [pc, #128]	; (33ec <system_clock_source_enable+0xa0>)
    336c:	4a1f      	ldr	r2, [pc, #124]	; (33ec <system_clock_source_enable+0xa0>)
    336e:	6a12      	ldr	r2, [r2, #32]
    3370:	2102      	movs	r1, #2
    3372:	430a      	orrs	r2, r1
    3374:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    3376:	2300      	movs	r3, #0
    3378:	e031      	b.n	33de <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    337a:	4b1c      	ldr	r3, [pc, #112]	; (33ec <system_clock_source_enable+0xa0>)
    337c:	4a1b      	ldr	r2, [pc, #108]	; (33ec <system_clock_source_enable+0xa0>)
    337e:	6992      	ldr	r2, [r2, #24]
    3380:	2102      	movs	r1, #2
    3382:	430a      	orrs	r2, r1
    3384:	619a      	str	r2, [r3, #24]
		break;
    3386:	e029      	b.n	33dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    3388:	4a18      	ldr	r2, [pc, #96]	; (33ec <system_clock_source_enable+0xa0>)
    338a:	4b18      	ldr	r3, [pc, #96]	; (33ec <system_clock_source_enable+0xa0>)
    338c:	8a1b      	ldrh	r3, [r3, #16]
    338e:	b29b      	uxth	r3, r3
    3390:	2102      	movs	r1, #2
    3392:	430b      	orrs	r3, r1
    3394:	b29b      	uxth	r3, r3
    3396:	8213      	strh	r3, [r2, #16]
		break;
    3398:	e020      	b.n	33dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    339a:	4a14      	ldr	r2, [pc, #80]	; (33ec <system_clock_source_enable+0xa0>)
    339c:	4b13      	ldr	r3, [pc, #76]	; (33ec <system_clock_source_enable+0xa0>)
    339e:	8a9b      	ldrh	r3, [r3, #20]
    33a0:	b29b      	uxth	r3, r3
    33a2:	2102      	movs	r1, #2
    33a4:	430b      	orrs	r3, r1
    33a6:	b29b      	uxth	r3, r3
    33a8:	8293      	strh	r3, [r2, #20]
		break;
    33aa:	e017      	b.n	33dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    33ac:	4b10      	ldr	r3, [pc, #64]	; (33f0 <system_clock_source_enable+0xa4>)
    33ae:	681b      	ldr	r3, [r3, #0]
    33b0:	2202      	movs	r2, #2
    33b2:	431a      	orrs	r2, r3
    33b4:	4b0e      	ldr	r3, [pc, #56]	; (33f0 <system_clock_source_enable+0xa4>)
    33b6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    33b8:	4b0e      	ldr	r3, [pc, #56]	; (33f4 <system_clock_source_enable+0xa8>)
    33ba:	4798      	blx	r3
		break;
    33bc:	e00e      	b.n	33dc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    33be:	4a0b      	ldr	r2, [pc, #44]	; (33ec <system_clock_source_enable+0xa0>)
    33c0:	490a      	ldr	r1, [pc, #40]	; (33ec <system_clock_source_enable+0xa0>)
    33c2:	2344      	movs	r3, #68	; 0x44
    33c4:	5ccb      	ldrb	r3, [r1, r3]
    33c6:	b2db      	uxtb	r3, r3
    33c8:	2102      	movs	r1, #2
    33ca:	430b      	orrs	r3, r1
    33cc:	b2d9      	uxtb	r1, r3
    33ce:	2344      	movs	r3, #68	; 0x44
    33d0:	54d1      	strb	r1, [r2, r3]
		break;
    33d2:	e003      	b.n	33dc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    33d4:	2300      	movs	r3, #0
    33d6:	e002      	b.n	33de <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    33d8:	2317      	movs	r3, #23
    33da:	e000      	b.n	33de <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    33dc:	2300      	movs	r3, #0
}
    33de:	0018      	movs	r0, r3
    33e0:	46bd      	mov	sp, r7
    33e2:	b002      	add	sp, #8
    33e4:	bd80      	pop	{r7, pc}
    33e6:	46c0      	nop			; (mov r8, r8)
    33e8:	00005c70 	.word	0x00005c70
    33ec:	40000800 	.word	0x40000800
    33f0:	200000b8 	.word	0x200000b8
    33f4:	000031d5 	.word	0x000031d5

000033f8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    33f8:	b580      	push	{r7, lr}
    33fa:	b082      	sub	sp, #8
    33fc:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    33fe:	003b      	movs	r3, r7
    3400:	2201      	movs	r2, #1
    3402:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3404:	2300      	movs	r3, #0
    3406:	607b      	str	r3, [r7, #4]
    3408:	e009      	b.n	341e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    340a:	687b      	ldr	r3, [r7, #4]
    340c:	b2db      	uxtb	r3, r3
    340e:	003a      	movs	r2, r7
    3410:	0011      	movs	r1, r2
    3412:	0018      	movs	r0, r3
    3414:	4b05      	ldr	r3, [pc, #20]	; (342c <_switch_peripheral_gclk+0x34>)
    3416:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3418:	687b      	ldr	r3, [r7, #4]
    341a:	3301      	adds	r3, #1
    341c:	607b      	str	r3, [r7, #4]
    341e:	687b      	ldr	r3, [r7, #4]
    3420:	2b24      	cmp	r3, #36	; 0x24
    3422:	d9f2      	bls.n	340a <_switch_peripheral_gclk+0x12>
	}
}
    3424:	46c0      	nop			; (mov r8, r8)
    3426:	46bd      	mov	sp, r7
    3428:	b002      	add	sp, #8
    342a:	bd80      	pop	{r7, pc}
    342c:	00003831 	.word	0x00003831

00003430 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3430:	b580      	push	{r7, lr}
    3432:	b0a0      	sub	sp, #128	; 0x80
    3434:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3436:	4b27      	ldr	r3, [pc, #156]	; (34d4 <system_clock_init+0xa4>)
    3438:	22c2      	movs	r2, #194	; 0xc2
    343a:	00d2      	lsls	r2, r2, #3
    343c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    343e:	2000      	movs	r0, #0
    3440:	4b25      	ldr	r3, [pc, #148]	; (34d8 <system_clock_init+0xa8>)
    3442:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    3444:	4b25      	ldr	r3, [pc, #148]	; (34dc <system_clock_init+0xac>)
    3446:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    3448:	237c      	movs	r3, #124	; 0x7c
    344a:	18fb      	adds	r3, r7, r3
    344c:	0018      	movs	r0, r3
    344e:	4b24      	ldr	r3, [pc, #144]	; (34e0 <system_clock_init+0xb0>)
    3450:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3452:	237c      	movs	r3, #124	; 0x7c
    3454:	18fb      	adds	r3, r7, r3
    3456:	2200      	movs	r2, #0
    3458:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    345a:	237c      	movs	r3, #124	; 0x7c
    345c:	18fb      	adds	r3, r7, r3
    345e:	2201      	movs	r2, #1
    3460:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3462:	237c      	movs	r3, #124	; 0x7c
    3464:	18fb      	adds	r3, r7, r3
    3466:	2200      	movs	r2, #0
    3468:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    346a:	237c      	movs	r3, #124	; 0x7c
    346c:	18fb      	adds	r3, r7, r3
    346e:	0018      	movs	r0, r3
    3470:	4b1c      	ldr	r3, [pc, #112]	; (34e4 <system_clock_init+0xb4>)
    3472:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3474:	2006      	movs	r0, #6
    3476:	4b1c      	ldr	r3, [pc, #112]	; (34e8 <system_clock_init+0xb8>)
    3478:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    347a:	4b1c      	ldr	r3, [pc, #112]	; (34ec <system_clock_init+0xbc>)
    347c:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    347e:	2000      	movs	r0, #0
    3480:	4b1b      	ldr	r3, [pc, #108]	; (34f0 <system_clock_init+0xc0>)
    3482:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    3484:	2100      	movs	r1, #0
    3486:	2000      	movs	r0, #0
    3488:	4b1a      	ldr	r3, [pc, #104]	; (34f4 <system_clock_init+0xc4>)
    348a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    348c:	2100      	movs	r1, #0
    348e:	2001      	movs	r0, #1
    3490:	4b18      	ldr	r3, [pc, #96]	; (34f4 <system_clock_init+0xc4>)
    3492:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    3494:	2100      	movs	r1, #0
    3496:	2002      	movs	r0, #2
    3498:	4b16      	ldr	r3, [pc, #88]	; (34f4 <system_clock_init+0xc4>)
    349a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    349c:	1d3b      	adds	r3, r7, #4
    349e:	0018      	movs	r0, r3
    34a0:	4b15      	ldr	r3, [pc, #84]	; (34f8 <system_clock_init+0xc8>)
    34a2:	4798      	blx	r3
    34a4:	1d3b      	adds	r3, r7, #4
    34a6:	2206      	movs	r2, #6
    34a8:	701a      	strb	r2, [r3, #0]
    34aa:	1d3b      	adds	r3, r7, #4
    34ac:	2201      	movs	r2, #1
    34ae:	605a      	str	r2, [r3, #4]
    34b0:	1d3b      	adds	r3, r7, #4
    34b2:	2200      	movs	r2, #0
    34b4:	721a      	strb	r2, [r3, #8]
    34b6:	1d3b      	adds	r3, r7, #4
    34b8:	2200      	movs	r2, #0
    34ba:	725a      	strb	r2, [r3, #9]
    34bc:	1d3b      	adds	r3, r7, #4
    34be:	0019      	movs	r1, r3
    34c0:	2000      	movs	r0, #0
    34c2:	4b0e      	ldr	r3, [pc, #56]	; (34fc <system_clock_init+0xcc>)
    34c4:	4798      	blx	r3
    34c6:	2000      	movs	r0, #0
    34c8:	4b0d      	ldr	r3, [pc, #52]	; (3500 <system_clock_init+0xd0>)
    34ca:	4798      	blx	r3
#endif
}
    34cc:	46c0      	nop			; (mov r8, r8)
    34ce:	46bd      	mov	sp, r7
    34d0:	b020      	add	sp, #128	; 0x80
    34d2:	bd80      	pop	{r7, pc}
    34d4:	40000800 	.word	0x40000800
    34d8:	00003185 	.word	0x00003185
    34dc:	000033f9 	.word	0x000033f9
    34e0:	000030ef 	.word	0x000030ef
    34e4:	000032d5 	.word	0x000032d5
    34e8:	0000334d 	.word	0x0000334d
    34ec:	000035a9 	.word	0x000035a9
    34f0:	00003111 	.word	0x00003111
    34f4:	00003131 	.word	0x00003131
    34f8:	000030c1 	.word	0x000030c1
    34fc:	000035d9 	.word	0x000035d9
    3500:	000036fd 	.word	0x000036fd

00003504 <system_apb_clock_set_mask>:
{
    3504:	b580      	push	{r7, lr}
    3506:	b082      	sub	sp, #8
    3508:	af00      	add	r7, sp, #0
    350a:	0002      	movs	r2, r0
    350c:	6039      	str	r1, [r7, #0]
    350e:	1dfb      	adds	r3, r7, #7
    3510:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3512:	1dfb      	adds	r3, r7, #7
    3514:	781b      	ldrb	r3, [r3, #0]
    3516:	2b01      	cmp	r3, #1
    3518:	d00a      	beq.n	3530 <system_apb_clock_set_mask+0x2c>
    351a:	2b02      	cmp	r3, #2
    351c:	d00f      	beq.n	353e <system_apb_clock_set_mask+0x3a>
    351e:	2b00      	cmp	r3, #0
    3520:	d114      	bne.n	354c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3522:	4b0e      	ldr	r3, [pc, #56]	; (355c <system_apb_clock_set_mask+0x58>)
    3524:	4a0d      	ldr	r2, [pc, #52]	; (355c <system_apb_clock_set_mask+0x58>)
    3526:	6991      	ldr	r1, [r2, #24]
    3528:	683a      	ldr	r2, [r7, #0]
    352a:	430a      	orrs	r2, r1
    352c:	619a      	str	r2, [r3, #24]
			break;
    352e:	e00f      	b.n	3550 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3530:	4b0a      	ldr	r3, [pc, #40]	; (355c <system_apb_clock_set_mask+0x58>)
    3532:	4a0a      	ldr	r2, [pc, #40]	; (355c <system_apb_clock_set_mask+0x58>)
    3534:	69d1      	ldr	r1, [r2, #28]
    3536:	683a      	ldr	r2, [r7, #0]
    3538:	430a      	orrs	r2, r1
    353a:	61da      	str	r2, [r3, #28]
			break;
    353c:	e008      	b.n	3550 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    353e:	4b07      	ldr	r3, [pc, #28]	; (355c <system_apb_clock_set_mask+0x58>)
    3540:	4a06      	ldr	r2, [pc, #24]	; (355c <system_apb_clock_set_mask+0x58>)
    3542:	6a11      	ldr	r1, [r2, #32]
    3544:	683a      	ldr	r2, [r7, #0]
    3546:	430a      	orrs	r2, r1
    3548:	621a      	str	r2, [r3, #32]
			break;
    354a:	e001      	b.n	3550 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    354c:	2317      	movs	r3, #23
    354e:	e000      	b.n	3552 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3550:	2300      	movs	r3, #0
}
    3552:	0018      	movs	r0, r3
    3554:	46bd      	mov	sp, r7
    3556:	b002      	add	sp, #8
    3558:	bd80      	pop	{r7, pc}
    355a:	46c0      	nop			; (mov r8, r8)
    355c:	40000400 	.word	0x40000400

00003560 <system_interrupt_enter_critical_section>:
{
    3560:	b580      	push	{r7, lr}
    3562:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    3564:	4b02      	ldr	r3, [pc, #8]	; (3570 <system_interrupt_enter_critical_section+0x10>)
    3566:	4798      	blx	r3
}
    3568:	46c0      	nop			; (mov r8, r8)
    356a:	46bd      	mov	sp, r7
    356c:	bd80      	pop	{r7, pc}
    356e:	46c0      	nop			; (mov r8, r8)
    3570:	0000302d 	.word	0x0000302d

00003574 <system_interrupt_leave_critical_section>:
{
    3574:	b580      	push	{r7, lr}
    3576:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    3578:	4b02      	ldr	r3, [pc, #8]	; (3584 <system_interrupt_leave_critical_section+0x10>)
    357a:	4798      	blx	r3
}
    357c:	46c0      	nop			; (mov r8, r8)
    357e:	46bd      	mov	sp, r7
    3580:	bd80      	pop	{r7, pc}
    3582:	46c0      	nop			; (mov r8, r8)
    3584:	00003081 	.word	0x00003081

00003588 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    3588:	b580      	push	{r7, lr}
    358a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    358c:	4b05      	ldr	r3, [pc, #20]	; (35a4 <system_gclk_is_syncing+0x1c>)
    358e:	785b      	ldrb	r3, [r3, #1]
    3590:	b2db      	uxtb	r3, r3
    3592:	b25b      	sxtb	r3, r3
    3594:	2b00      	cmp	r3, #0
    3596:	da01      	bge.n	359c <system_gclk_is_syncing+0x14>
		return true;
    3598:	2301      	movs	r3, #1
    359a:	e000      	b.n	359e <system_gclk_is_syncing+0x16>
	}

	return false;
    359c:	2300      	movs	r3, #0
}
    359e:	0018      	movs	r0, r3
    35a0:	46bd      	mov	sp, r7
    35a2:	bd80      	pop	{r7, pc}
    35a4:	40000c00 	.word	0x40000c00

000035a8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    35a8:	b580      	push	{r7, lr}
    35aa:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    35ac:	2108      	movs	r1, #8
    35ae:	2000      	movs	r0, #0
    35b0:	4b07      	ldr	r3, [pc, #28]	; (35d0 <system_gclk_init+0x28>)
    35b2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    35b4:	4b07      	ldr	r3, [pc, #28]	; (35d4 <system_gclk_init+0x2c>)
    35b6:	2201      	movs	r2, #1
    35b8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    35ba:	46c0      	nop			; (mov r8, r8)
    35bc:	4b05      	ldr	r3, [pc, #20]	; (35d4 <system_gclk_init+0x2c>)
    35be:	781b      	ldrb	r3, [r3, #0]
    35c0:	b2db      	uxtb	r3, r3
    35c2:	001a      	movs	r2, r3
    35c4:	2301      	movs	r3, #1
    35c6:	4013      	ands	r3, r2
    35c8:	d1f8      	bne.n	35bc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	46bd      	mov	sp, r7
    35ce:	bd80      	pop	{r7, pc}
    35d0:	00003505 	.word	0x00003505
    35d4:	40000c00 	.word	0x40000c00

000035d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    35d8:	b580      	push	{r7, lr}
    35da:	b086      	sub	sp, #24
    35dc:	af00      	add	r7, sp, #0
    35de:	0002      	movs	r2, r0
    35e0:	6039      	str	r1, [r7, #0]
    35e2:	1dfb      	adds	r3, r7, #7
    35e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    35e6:	1dfb      	adds	r3, r7, #7
    35e8:	781b      	ldrb	r3, [r3, #0]
    35ea:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    35ec:	1dfb      	adds	r3, r7, #7
    35ee:	781b      	ldrb	r3, [r3, #0]
    35f0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    35f2:	683b      	ldr	r3, [r7, #0]
    35f4:	781b      	ldrb	r3, [r3, #0]
    35f6:	021b      	lsls	r3, r3, #8
    35f8:	001a      	movs	r2, r3
    35fa:	697b      	ldr	r3, [r7, #20]
    35fc:	4313      	orrs	r3, r2
    35fe:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3600:	683b      	ldr	r3, [r7, #0]
    3602:	785b      	ldrb	r3, [r3, #1]
    3604:	2b00      	cmp	r3, #0
    3606:	d004      	beq.n	3612 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3608:	697b      	ldr	r3, [r7, #20]
    360a:	2280      	movs	r2, #128	; 0x80
    360c:	02d2      	lsls	r2, r2, #11
    360e:	4313      	orrs	r3, r2
    3610:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3612:	683b      	ldr	r3, [r7, #0]
    3614:	7a5b      	ldrb	r3, [r3, #9]
    3616:	2b00      	cmp	r3, #0
    3618:	d004      	beq.n	3624 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    361a:	697b      	ldr	r3, [r7, #20]
    361c:	2280      	movs	r2, #128	; 0x80
    361e:	0312      	lsls	r2, r2, #12
    3620:	4313      	orrs	r3, r2
    3622:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3624:	683b      	ldr	r3, [r7, #0]
    3626:	685b      	ldr	r3, [r3, #4]
    3628:	2b01      	cmp	r3, #1
    362a:	d92c      	bls.n	3686 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    362c:	683b      	ldr	r3, [r7, #0]
    362e:	685a      	ldr	r2, [r3, #4]
    3630:	683b      	ldr	r3, [r7, #0]
    3632:	685b      	ldr	r3, [r3, #4]
    3634:	3b01      	subs	r3, #1
    3636:	4013      	ands	r3, r2
    3638:	d11a      	bne.n	3670 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    363a:	2300      	movs	r3, #0
    363c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    363e:	2302      	movs	r3, #2
    3640:	60bb      	str	r3, [r7, #8]
    3642:	e005      	b.n	3650 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    3644:	68fb      	ldr	r3, [r7, #12]
    3646:	3301      	adds	r3, #1
    3648:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    364a:	68bb      	ldr	r3, [r7, #8]
    364c:	005b      	lsls	r3, r3, #1
    364e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    3650:	683b      	ldr	r3, [r7, #0]
    3652:	685a      	ldr	r2, [r3, #4]
    3654:	68bb      	ldr	r3, [r7, #8]
    3656:	429a      	cmp	r2, r3
    3658:	d8f4      	bhi.n	3644 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    365a:	68fb      	ldr	r3, [r7, #12]
    365c:	021b      	lsls	r3, r3, #8
    365e:	693a      	ldr	r2, [r7, #16]
    3660:	4313      	orrs	r3, r2
    3662:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3664:	697b      	ldr	r3, [r7, #20]
    3666:	2280      	movs	r2, #128	; 0x80
    3668:	0352      	lsls	r2, r2, #13
    366a:	4313      	orrs	r3, r2
    366c:	617b      	str	r3, [r7, #20]
    366e:	e00a      	b.n	3686 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3670:	683b      	ldr	r3, [r7, #0]
    3672:	685b      	ldr	r3, [r3, #4]
    3674:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    3676:	693a      	ldr	r2, [r7, #16]
    3678:	4313      	orrs	r3, r2
    367a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    367c:	697b      	ldr	r3, [r7, #20]
    367e:	2280      	movs	r2, #128	; 0x80
    3680:	0292      	lsls	r2, r2, #10
    3682:	4313      	orrs	r3, r2
    3684:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3686:	683b      	ldr	r3, [r7, #0]
    3688:	7a1b      	ldrb	r3, [r3, #8]
    368a:	2b00      	cmp	r3, #0
    368c:	d004      	beq.n	3698 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    368e:	697b      	ldr	r3, [r7, #20]
    3690:	2280      	movs	r2, #128	; 0x80
    3692:	0392      	lsls	r2, r2, #14
    3694:	4313      	orrs	r3, r2
    3696:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    3698:	46c0      	nop			; (mov r8, r8)
    369a:	4b13      	ldr	r3, [pc, #76]	; (36e8 <system_gclk_gen_set_config+0x110>)
    369c:	4798      	blx	r3
    369e:	1e03      	subs	r3, r0, #0
    36a0:	d1fb      	bne.n	369a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    36a2:	4b12      	ldr	r3, [pc, #72]	; (36ec <system_gclk_gen_set_config+0x114>)
    36a4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    36a6:	4a12      	ldr	r2, [pc, #72]	; (36f0 <system_gclk_gen_set_config+0x118>)
    36a8:	1dfb      	adds	r3, r7, #7
    36aa:	781b      	ldrb	r3, [r3, #0]
    36ac:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    36ae:	46c0      	nop			; (mov r8, r8)
    36b0:	4b0d      	ldr	r3, [pc, #52]	; (36e8 <system_gclk_gen_set_config+0x110>)
    36b2:	4798      	blx	r3
    36b4:	1e03      	subs	r3, r0, #0
    36b6:	d1fb      	bne.n	36b0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    36b8:	4b0e      	ldr	r3, [pc, #56]	; (36f4 <system_gclk_gen_set_config+0x11c>)
    36ba:	693a      	ldr	r2, [r7, #16]
    36bc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    36be:	46c0      	nop			; (mov r8, r8)
    36c0:	4b09      	ldr	r3, [pc, #36]	; (36e8 <system_gclk_gen_set_config+0x110>)
    36c2:	4798      	blx	r3
    36c4:	1e03      	subs	r3, r0, #0
    36c6:	d1fb      	bne.n	36c0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    36c8:	4b0a      	ldr	r3, [pc, #40]	; (36f4 <system_gclk_gen_set_config+0x11c>)
    36ca:	4a0a      	ldr	r2, [pc, #40]	; (36f4 <system_gclk_gen_set_config+0x11c>)
    36cc:	6851      	ldr	r1, [r2, #4]
    36ce:	2280      	movs	r2, #128	; 0x80
    36d0:	0252      	lsls	r2, r2, #9
    36d2:	4011      	ands	r1, r2
    36d4:	697a      	ldr	r2, [r7, #20]
    36d6:	430a      	orrs	r2, r1
    36d8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    36da:	4b07      	ldr	r3, [pc, #28]	; (36f8 <system_gclk_gen_set_config+0x120>)
    36dc:	4798      	blx	r3
}
    36de:	46c0      	nop			; (mov r8, r8)
    36e0:	46bd      	mov	sp, r7
    36e2:	b006      	add	sp, #24
    36e4:	bd80      	pop	{r7, pc}
    36e6:	46c0      	nop			; (mov r8, r8)
    36e8:	00003589 	.word	0x00003589
    36ec:	00003561 	.word	0x00003561
    36f0:	40000c08 	.word	0x40000c08
    36f4:	40000c00 	.word	0x40000c00
    36f8:	00003575 	.word	0x00003575

000036fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    36fc:	b580      	push	{r7, lr}
    36fe:	b082      	sub	sp, #8
    3700:	af00      	add	r7, sp, #0
    3702:	0002      	movs	r2, r0
    3704:	1dfb      	adds	r3, r7, #7
    3706:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3708:	46c0      	nop			; (mov r8, r8)
    370a:	4b0e      	ldr	r3, [pc, #56]	; (3744 <system_gclk_gen_enable+0x48>)
    370c:	4798      	blx	r3
    370e:	1e03      	subs	r3, r0, #0
    3710:	d1fb      	bne.n	370a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3712:	4b0d      	ldr	r3, [pc, #52]	; (3748 <system_gclk_gen_enable+0x4c>)
    3714:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3716:	4a0d      	ldr	r2, [pc, #52]	; (374c <system_gclk_gen_enable+0x50>)
    3718:	1dfb      	adds	r3, r7, #7
    371a:	781b      	ldrb	r3, [r3, #0]
    371c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	4b08      	ldr	r3, [pc, #32]	; (3744 <system_gclk_gen_enable+0x48>)
    3722:	4798      	blx	r3
    3724:	1e03      	subs	r3, r0, #0
    3726:	d1fb      	bne.n	3720 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3728:	4b09      	ldr	r3, [pc, #36]	; (3750 <system_gclk_gen_enable+0x54>)
    372a:	4a09      	ldr	r2, [pc, #36]	; (3750 <system_gclk_gen_enable+0x54>)
    372c:	6852      	ldr	r2, [r2, #4]
    372e:	2180      	movs	r1, #128	; 0x80
    3730:	0249      	lsls	r1, r1, #9
    3732:	430a      	orrs	r2, r1
    3734:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    3736:	4b07      	ldr	r3, [pc, #28]	; (3754 <system_gclk_gen_enable+0x58>)
    3738:	4798      	blx	r3
}
    373a:	46c0      	nop			; (mov r8, r8)
    373c:	46bd      	mov	sp, r7
    373e:	b002      	add	sp, #8
    3740:	bd80      	pop	{r7, pc}
    3742:	46c0      	nop			; (mov r8, r8)
    3744:	00003589 	.word	0x00003589
    3748:	00003561 	.word	0x00003561
    374c:	40000c04 	.word	0x40000c04
    3750:	40000c00 	.word	0x40000c00
    3754:	00003575 	.word	0x00003575

00003758 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3758:	b580      	push	{r7, lr}
    375a:	b086      	sub	sp, #24
    375c:	af00      	add	r7, sp, #0
    375e:	0002      	movs	r2, r0
    3760:	1dfb      	adds	r3, r7, #7
    3762:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    3764:	46c0      	nop			; (mov r8, r8)
    3766:	4b2a      	ldr	r3, [pc, #168]	; (3810 <system_gclk_gen_get_hz+0xb8>)
    3768:	4798      	blx	r3
    376a:	1e03      	subs	r3, r0, #0
    376c:	d1fb      	bne.n	3766 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    376e:	4b29      	ldr	r3, [pc, #164]	; (3814 <system_gclk_gen_get_hz+0xbc>)
    3770:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3772:	4a29      	ldr	r2, [pc, #164]	; (3818 <system_gclk_gen_get_hz+0xc0>)
    3774:	1dfb      	adds	r3, r7, #7
    3776:	781b      	ldrb	r3, [r3, #0]
    3778:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    377a:	46c0      	nop			; (mov r8, r8)
    377c:	4b24      	ldr	r3, [pc, #144]	; (3810 <system_gclk_gen_get_hz+0xb8>)
    377e:	4798      	blx	r3
    3780:	1e03      	subs	r3, r0, #0
    3782:	d1fb      	bne.n	377c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    3784:	4b25      	ldr	r3, [pc, #148]	; (381c <system_gclk_gen_get_hz+0xc4>)
    3786:	685b      	ldr	r3, [r3, #4]
    3788:	04db      	lsls	r3, r3, #19
    378a:	0edb      	lsrs	r3, r3, #27
    378c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    378e:	0018      	movs	r0, r3
    3790:	4b23      	ldr	r3, [pc, #140]	; (3820 <system_gclk_gen_get_hz+0xc8>)
    3792:	4798      	blx	r3
    3794:	0003      	movs	r3, r0
    3796:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3798:	4a1f      	ldr	r2, [pc, #124]	; (3818 <system_gclk_gen_get_hz+0xc0>)
    379a:	1dfb      	adds	r3, r7, #7
    379c:	781b      	ldrb	r3, [r3, #0]
    379e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    37a0:	4b1e      	ldr	r3, [pc, #120]	; (381c <system_gclk_gen_get_hz+0xc4>)
    37a2:	685b      	ldr	r3, [r3, #4]
    37a4:	02db      	lsls	r3, r3, #11
    37a6:	0fdb      	lsrs	r3, r3, #31
    37a8:	b2da      	uxtb	r2, r3
    37aa:	2313      	movs	r3, #19
    37ac:	18fb      	adds	r3, r7, r3
    37ae:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    37b0:	4a1c      	ldr	r2, [pc, #112]	; (3824 <system_gclk_gen_get_hz+0xcc>)
    37b2:	1dfb      	adds	r3, r7, #7
    37b4:	781b      	ldrb	r3, [r3, #0]
    37b6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    37b8:	46c0      	nop			; (mov r8, r8)
    37ba:	4b15      	ldr	r3, [pc, #84]	; (3810 <system_gclk_gen_get_hz+0xb8>)
    37bc:	4798      	blx	r3
    37be:	1e03      	subs	r3, r0, #0
    37c0:	d1fb      	bne.n	37ba <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    37c2:	4b16      	ldr	r3, [pc, #88]	; (381c <system_gclk_gen_get_hz+0xc4>)
    37c4:	689b      	ldr	r3, [r3, #8]
    37c6:	021b      	lsls	r3, r3, #8
    37c8:	0c1b      	lsrs	r3, r3, #16
    37ca:	b29b      	uxth	r3, r3
    37cc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    37ce:	4b16      	ldr	r3, [pc, #88]	; (3828 <system_gclk_gen_get_hz+0xd0>)
    37d0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    37d2:	2313      	movs	r3, #19
    37d4:	18fb      	adds	r3, r7, r3
    37d6:	781b      	ldrb	r3, [r3, #0]
    37d8:	2b00      	cmp	r3, #0
    37da:	d109      	bne.n	37f0 <system_gclk_gen_get_hz+0x98>
    37dc:	68fb      	ldr	r3, [r7, #12]
    37de:	2b01      	cmp	r3, #1
    37e0:	d906      	bls.n	37f0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    37e2:	4b12      	ldr	r3, [pc, #72]	; (382c <system_gclk_gen_get_hz+0xd4>)
    37e4:	68f9      	ldr	r1, [r7, #12]
    37e6:	6978      	ldr	r0, [r7, #20]
    37e8:	4798      	blx	r3
    37ea:	0003      	movs	r3, r0
    37ec:	617b      	str	r3, [r7, #20]
    37ee:	e00a      	b.n	3806 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    37f0:	2313      	movs	r3, #19
    37f2:	18fb      	adds	r3, r7, r3
    37f4:	781b      	ldrb	r3, [r3, #0]
    37f6:	2b00      	cmp	r3, #0
    37f8:	d005      	beq.n	3806 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    37fa:	68fb      	ldr	r3, [r7, #12]
    37fc:	3301      	adds	r3, #1
    37fe:	697a      	ldr	r2, [r7, #20]
    3800:	40da      	lsrs	r2, r3
    3802:	0013      	movs	r3, r2
    3804:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    3806:	697b      	ldr	r3, [r7, #20]
}
    3808:	0018      	movs	r0, r3
    380a:	46bd      	mov	sp, r7
    380c:	b006      	add	sp, #24
    380e:	bd80      	pop	{r7, pc}
    3810:	00003589 	.word	0x00003589
    3814:	00003561 	.word	0x00003561
    3818:	40000c04 	.word	0x40000c04
    381c:	40000c00 	.word	0x40000c00
    3820:	00003219 	.word	0x00003219
    3824:	40000c08 	.word	0x40000c08
    3828:	00003575 	.word	0x00003575
    382c:	00004841 	.word	0x00004841

00003830 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3830:	b580      	push	{r7, lr}
    3832:	b084      	sub	sp, #16
    3834:	af00      	add	r7, sp, #0
    3836:	0002      	movs	r2, r0
    3838:	6039      	str	r1, [r7, #0]
    383a:	1dfb      	adds	r3, r7, #7
    383c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    383e:	1dfb      	adds	r3, r7, #7
    3840:	781b      	ldrb	r3, [r3, #0]
    3842:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3844:	683b      	ldr	r3, [r7, #0]
    3846:	781b      	ldrb	r3, [r3, #0]
    3848:	021b      	lsls	r3, r3, #8
    384a:	001a      	movs	r2, r3
    384c:	68fb      	ldr	r3, [r7, #12]
    384e:	4313      	orrs	r3, r2
    3850:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3852:	1dfb      	adds	r3, r7, #7
    3854:	781b      	ldrb	r3, [r3, #0]
    3856:	0018      	movs	r0, r3
    3858:	4b04      	ldr	r3, [pc, #16]	; (386c <system_gclk_chan_set_config+0x3c>)
    385a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    385c:	4b04      	ldr	r3, [pc, #16]	; (3870 <system_gclk_chan_set_config+0x40>)
    385e:	68fa      	ldr	r2, [r7, #12]
    3860:	b292      	uxth	r2, r2
    3862:	805a      	strh	r2, [r3, #2]
}
    3864:	46c0      	nop			; (mov r8, r8)
    3866:	46bd      	mov	sp, r7
    3868:	b004      	add	sp, #16
    386a:	bd80      	pop	{r7, pc}
    386c:	000038bd 	.word	0x000038bd
    3870:	40000c00 	.word	0x40000c00

00003874 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3874:	b580      	push	{r7, lr}
    3876:	b082      	sub	sp, #8
    3878:	af00      	add	r7, sp, #0
    387a:	0002      	movs	r2, r0
    387c:	1dfb      	adds	r3, r7, #7
    387e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3880:	4b0a      	ldr	r3, [pc, #40]	; (38ac <system_gclk_chan_enable+0x38>)
    3882:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3884:	4a0a      	ldr	r2, [pc, #40]	; (38b0 <system_gclk_chan_enable+0x3c>)
    3886:	1dfb      	adds	r3, r7, #7
    3888:	781b      	ldrb	r3, [r3, #0]
    388a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    388c:	4909      	ldr	r1, [pc, #36]	; (38b4 <system_gclk_chan_enable+0x40>)
    388e:	4b09      	ldr	r3, [pc, #36]	; (38b4 <system_gclk_chan_enable+0x40>)
    3890:	885b      	ldrh	r3, [r3, #2]
    3892:	b29b      	uxth	r3, r3
    3894:	2280      	movs	r2, #128	; 0x80
    3896:	01d2      	lsls	r2, r2, #7
    3898:	4313      	orrs	r3, r2
    389a:	b29b      	uxth	r3, r3
    389c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    389e:	4b06      	ldr	r3, [pc, #24]	; (38b8 <system_gclk_chan_enable+0x44>)
    38a0:	4798      	blx	r3
}
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	46bd      	mov	sp, r7
    38a6:	b002      	add	sp, #8
    38a8:	bd80      	pop	{r7, pc}
    38aa:	46c0      	nop			; (mov r8, r8)
    38ac:	00003561 	.word	0x00003561
    38b0:	40000c02 	.word	0x40000c02
    38b4:	40000c00 	.word	0x40000c00
    38b8:	00003575 	.word	0x00003575

000038bc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    38bc:	b580      	push	{r7, lr}
    38be:	b084      	sub	sp, #16
    38c0:	af00      	add	r7, sp, #0
    38c2:	0002      	movs	r2, r0
    38c4:	1dfb      	adds	r3, r7, #7
    38c6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    38c8:	4b1c      	ldr	r3, [pc, #112]	; (393c <system_gclk_chan_disable+0x80>)
    38ca:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    38cc:	4a1c      	ldr	r2, [pc, #112]	; (3940 <system_gclk_chan_disable+0x84>)
    38ce:	1dfb      	adds	r3, r7, #7
    38d0:	781b      	ldrb	r3, [r3, #0]
    38d2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    38d4:	4b1b      	ldr	r3, [pc, #108]	; (3944 <system_gclk_chan_disable+0x88>)
    38d6:	885b      	ldrh	r3, [r3, #2]
    38d8:	051b      	lsls	r3, r3, #20
    38da:	0f1b      	lsrs	r3, r3, #28
    38dc:	b2db      	uxtb	r3, r3
    38de:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    38e0:	4a18      	ldr	r2, [pc, #96]	; (3944 <system_gclk_chan_disable+0x88>)
    38e2:	8853      	ldrh	r3, [r2, #2]
    38e4:	4918      	ldr	r1, [pc, #96]	; (3948 <system_gclk_chan_disable+0x8c>)
    38e6:	400b      	ands	r3, r1
    38e8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    38ea:	4a16      	ldr	r2, [pc, #88]	; (3944 <system_gclk_chan_disable+0x88>)
    38ec:	4b15      	ldr	r3, [pc, #84]	; (3944 <system_gclk_chan_disable+0x88>)
    38ee:	885b      	ldrh	r3, [r3, #2]
    38f0:	b29b      	uxth	r3, r3
    38f2:	4916      	ldr	r1, [pc, #88]	; (394c <system_gclk_chan_disable+0x90>)
    38f4:	400b      	ands	r3, r1
    38f6:	b29b      	uxth	r3, r3
    38f8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    38fa:	46c0      	nop			; (mov r8, r8)
    38fc:	4b11      	ldr	r3, [pc, #68]	; (3944 <system_gclk_chan_disable+0x88>)
    38fe:	885b      	ldrh	r3, [r3, #2]
    3900:	b29b      	uxth	r3, r3
    3902:	001a      	movs	r2, r3
    3904:	2380      	movs	r3, #128	; 0x80
    3906:	01db      	lsls	r3, r3, #7
    3908:	4013      	ands	r3, r2
    390a:	d1f7      	bne.n	38fc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    390c:	4a0d      	ldr	r2, [pc, #52]	; (3944 <system_gclk_chan_disable+0x88>)
    390e:	68fb      	ldr	r3, [r7, #12]
    3910:	b2db      	uxtb	r3, r3
    3912:	1c19      	adds	r1, r3, #0
    3914:	230f      	movs	r3, #15
    3916:	400b      	ands	r3, r1
    3918:	b2d9      	uxtb	r1, r3
    391a:	8853      	ldrh	r3, [r2, #2]
    391c:	1c08      	adds	r0, r1, #0
    391e:	210f      	movs	r1, #15
    3920:	4001      	ands	r1, r0
    3922:	0208      	lsls	r0, r1, #8
    3924:	4908      	ldr	r1, [pc, #32]	; (3948 <system_gclk_chan_disable+0x8c>)
    3926:	400b      	ands	r3, r1
    3928:	1c19      	adds	r1, r3, #0
    392a:	1c03      	adds	r3, r0, #0
    392c:	430b      	orrs	r3, r1
    392e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    3930:	4b07      	ldr	r3, [pc, #28]	; (3950 <system_gclk_chan_disable+0x94>)
    3932:	4798      	blx	r3
}
    3934:	46c0      	nop			; (mov r8, r8)
    3936:	46bd      	mov	sp, r7
    3938:	b004      	add	sp, #16
    393a:	bd80      	pop	{r7, pc}
    393c:	00003561 	.word	0x00003561
    3940:	40000c02 	.word	0x40000c02
    3944:	40000c00 	.word	0x40000c00
    3948:	fffff0ff 	.word	0xfffff0ff
    394c:	ffffbfff 	.word	0xffffbfff
    3950:	00003575 	.word	0x00003575

00003954 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3954:	b580      	push	{r7, lr}
    3956:	b084      	sub	sp, #16
    3958:	af00      	add	r7, sp, #0
    395a:	0002      	movs	r2, r0
    395c:	1dfb      	adds	r3, r7, #7
    395e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3960:	4b0d      	ldr	r3, [pc, #52]	; (3998 <system_gclk_chan_get_hz+0x44>)
    3962:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3964:	4a0d      	ldr	r2, [pc, #52]	; (399c <system_gclk_chan_get_hz+0x48>)
    3966:	1dfb      	adds	r3, r7, #7
    3968:	781b      	ldrb	r3, [r3, #0]
    396a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    396c:	4b0c      	ldr	r3, [pc, #48]	; (39a0 <system_gclk_chan_get_hz+0x4c>)
    396e:	885b      	ldrh	r3, [r3, #2]
    3970:	051b      	lsls	r3, r3, #20
    3972:	0f1b      	lsrs	r3, r3, #28
    3974:	b2da      	uxtb	r2, r3
    3976:	230f      	movs	r3, #15
    3978:	18fb      	adds	r3, r7, r3
    397a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    397c:	4b09      	ldr	r3, [pc, #36]	; (39a4 <system_gclk_chan_get_hz+0x50>)
    397e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3980:	230f      	movs	r3, #15
    3982:	18fb      	adds	r3, r7, r3
    3984:	781b      	ldrb	r3, [r3, #0]
    3986:	0018      	movs	r0, r3
    3988:	4b07      	ldr	r3, [pc, #28]	; (39a8 <system_gclk_chan_get_hz+0x54>)
    398a:	4798      	blx	r3
    398c:	0003      	movs	r3, r0
}
    398e:	0018      	movs	r0, r3
    3990:	46bd      	mov	sp, r7
    3992:	b004      	add	sp, #16
    3994:	bd80      	pop	{r7, pc}
    3996:	46c0      	nop			; (mov r8, r8)
    3998:	00003561 	.word	0x00003561
    399c:	40000c02 	.word	0x40000c02
    39a0:	40000c00 	.word	0x40000c00
    39a4:	00003575 	.word	0x00003575
    39a8:	00003759 	.word	0x00003759

000039ac <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    39ac:	b580      	push	{r7, lr}
    39ae:	b084      	sub	sp, #16
    39b0:	af00      	add	r7, sp, #0
    39b2:	0002      	movs	r2, r0
    39b4:	1dfb      	adds	r3, r7, #7
    39b6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    39b8:	230f      	movs	r3, #15
    39ba:	18fb      	adds	r3, r7, r3
    39bc:	1dfa      	adds	r2, r7, #7
    39be:	7812      	ldrb	r2, [r2, #0]
    39c0:	09d2      	lsrs	r2, r2, #7
    39c2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    39c4:	230e      	movs	r3, #14
    39c6:	18fb      	adds	r3, r7, r3
    39c8:	1dfa      	adds	r2, r7, #7
    39ca:	7812      	ldrb	r2, [r2, #0]
    39cc:	0952      	lsrs	r2, r2, #5
    39ce:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    39d0:	4b0d      	ldr	r3, [pc, #52]	; (3a08 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    39d2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    39d4:	230f      	movs	r3, #15
    39d6:	18fb      	adds	r3, r7, r3
    39d8:	781b      	ldrb	r3, [r3, #0]
    39da:	2b00      	cmp	r3, #0
    39dc:	d10f      	bne.n	39fe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    39de:	230f      	movs	r3, #15
    39e0:	18fb      	adds	r3, r7, r3
    39e2:	781b      	ldrb	r3, [r3, #0]
    39e4:	009b      	lsls	r3, r3, #2
    39e6:	2210      	movs	r2, #16
    39e8:	4694      	mov	ip, r2
    39ea:	44bc      	add	ip, r7
    39ec:	4463      	add	r3, ip
    39ee:	3b08      	subs	r3, #8
    39f0:	681a      	ldr	r2, [r3, #0]
    39f2:	230e      	movs	r3, #14
    39f4:	18fb      	adds	r3, r7, r3
    39f6:	781b      	ldrb	r3, [r3, #0]
    39f8:	01db      	lsls	r3, r3, #7
    39fa:	18d3      	adds	r3, r2, r3
    39fc:	e000      	b.n	3a00 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    39fe:	2300      	movs	r3, #0
	}
}
    3a00:	0018      	movs	r0, r3
    3a02:	46bd      	mov	sp, r7
    3a04:	b004      	add	sp, #16
    3a06:	bd80      	pop	{r7, pc}
    3a08:	41004400 	.word	0x41004400

00003a0c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3a0c:	b580      	push	{r7, lr}
    3a0e:	b088      	sub	sp, #32
    3a10:	af00      	add	r7, sp, #0
    3a12:	60f8      	str	r0, [r7, #12]
    3a14:	60b9      	str	r1, [r7, #8]
    3a16:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3a18:	2300      	movs	r3, #0
    3a1a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3a1c:	687b      	ldr	r3, [r7, #4]
    3a1e:	78db      	ldrb	r3, [r3, #3]
    3a20:	2201      	movs	r2, #1
    3a22:	4053      	eors	r3, r2
    3a24:	b2db      	uxtb	r3, r3
    3a26:	2b00      	cmp	r3, #0
    3a28:	d035      	beq.n	3a96 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	781b      	ldrb	r3, [r3, #0]
    3a2e:	2b80      	cmp	r3, #128	; 0x80
    3a30:	d00b      	beq.n	3a4a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3a32:	69fb      	ldr	r3, [r7, #28]
    3a34:	2280      	movs	r2, #128	; 0x80
    3a36:	0252      	lsls	r2, r2, #9
    3a38:	4313      	orrs	r3, r2
    3a3a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3a3c:	687b      	ldr	r3, [r7, #4]
    3a3e:	781b      	ldrb	r3, [r3, #0]
    3a40:	061b      	lsls	r3, r3, #24
    3a42:	001a      	movs	r2, r3
    3a44:	69fb      	ldr	r3, [r7, #28]
    3a46:	4313      	orrs	r3, r2
    3a48:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3a4a:	687b      	ldr	r3, [r7, #4]
    3a4c:	785b      	ldrb	r3, [r3, #1]
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d003      	beq.n	3a5a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3a52:	687b      	ldr	r3, [r7, #4]
    3a54:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3a56:	2b02      	cmp	r3, #2
    3a58:	d110      	bne.n	3a7c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3a5a:	69fb      	ldr	r3, [r7, #28]
    3a5c:	2280      	movs	r2, #128	; 0x80
    3a5e:	0292      	lsls	r2, r2, #10
    3a60:	4313      	orrs	r3, r2
    3a62:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3a64:	687b      	ldr	r3, [r7, #4]
    3a66:	789b      	ldrb	r3, [r3, #2]
    3a68:	2b00      	cmp	r3, #0
    3a6a:	d004      	beq.n	3a76 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3a6c:	69fb      	ldr	r3, [r7, #28]
    3a6e:	2280      	movs	r2, #128	; 0x80
    3a70:	02d2      	lsls	r2, r2, #11
    3a72:	4313      	orrs	r3, r2
    3a74:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3a76:	68fb      	ldr	r3, [r7, #12]
    3a78:	68ba      	ldr	r2, [r7, #8]
    3a7a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3a7c:	687b      	ldr	r3, [r7, #4]
    3a7e:	785b      	ldrb	r3, [r3, #1]
    3a80:	2b01      	cmp	r3, #1
    3a82:	d003      	beq.n	3a8c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3a84:	687b      	ldr	r3, [r7, #4]
    3a86:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3a88:	2b02      	cmp	r3, #2
    3a8a:	d107      	bne.n	3a9c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3a8c:	69fb      	ldr	r3, [r7, #28]
    3a8e:	4a22      	ldr	r2, [pc, #136]	; (3b18 <_system_pinmux_config+0x10c>)
    3a90:	4013      	ands	r3, r2
    3a92:	61fb      	str	r3, [r7, #28]
    3a94:	e002      	b.n	3a9c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3a96:	68fb      	ldr	r3, [r7, #12]
    3a98:	68ba      	ldr	r2, [r7, #8]
    3a9a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3a9c:	68bb      	ldr	r3, [r7, #8]
    3a9e:	041b      	lsls	r3, r3, #16
    3aa0:	0c1b      	lsrs	r3, r3, #16
    3aa2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3aa4:	68bb      	ldr	r3, [r7, #8]
    3aa6:	0c1b      	lsrs	r3, r3, #16
    3aa8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3aaa:	69ba      	ldr	r2, [r7, #24]
    3aac:	69fb      	ldr	r3, [r7, #28]
    3aae:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3ab0:	22a0      	movs	r2, #160	; 0xa0
    3ab2:	05d2      	lsls	r2, r2, #23
    3ab4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3ab6:	68fb      	ldr	r3, [r7, #12]
    3ab8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3aba:	697a      	ldr	r2, [r7, #20]
    3abc:	69fb      	ldr	r3, [r7, #28]
    3abe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3ac0:	22d0      	movs	r2, #208	; 0xd0
    3ac2:	0612      	lsls	r2, r2, #24
    3ac4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3ac6:	68fb      	ldr	r3, [r7, #12]
    3ac8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	78db      	ldrb	r3, [r3, #3]
    3ace:	2201      	movs	r2, #1
    3ad0:	4053      	eors	r3, r2
    3ad2:	b2db      	uxtb	r3, r3
    3ad4:	2b00      	cmp	r3, #0
    3ad6:	d01a      	beq.n	3b0e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3ad8:	69fa      	ldr	r2, [r7, #28]
    3ada:	2380      	movs	r3, #128	; 0x80
    3adc:	02db      	lsls	r3, r3, #11
    3ade:	4013      	ands	r3, r2
    3ae0:	d00a      	beq.n	3af8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	789b      	ldrb	r3, [r3, #2]
    3ae6:	2b01      	cmp	r3, #1
    3ae8:	d103      	bne.n	3af2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    3aea:	68fb      	ldr	r3, [r7, #12]
    3aec:	68ba      	ldr	r2, [r7, #8]
    3aee:	619a      	str	r2, [r3, #24]
    3af0:	e002      	b.n	3af8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    3af2:	68fb      	ldr	r3, [r7, #12]
    3af4:	68ba      	ldr	r2, [r7, #8]
    3af6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3af8:	687b      	ldr	r3, [r7, #4]
    3afa:	785b      	ldrb	r3, [r3, #1]
    3afc:	2b01      	cmp	r3, #1
    3afe:	d003      	beq.n	3b08 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3b00:	687b      	ldr	r3, [r7, #4]
    3b02:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3b04:	2b02      	cmp	r3, #2
    3b06:	d102      	bne.n	3b0e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3b08:	68fb      	ldr	r3, [r7, #12]
    3b0a:	68ba      	ldr	r2, [r7, #8]
    3b0c:	609a      	str	r2, [r3, #8]
		}
	}
}
    3b0e:	46c0      	nop			; (mov r8, r8)
    3b10:	46bd      	mov	sp, r7
    3b12:	b008      	add	sp, #32
    3b14:	bd80      	pop	{r7, pc}
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	fffbffff 	.word	0xfffbffff

00003b1c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3b1c:	b580      	push	{r7, lr}
    3b1e:	b084      	sub	sp, #16
    3b20:	af00      	add	r7, sp, #0
    3b22:	0002      	movs	r2, r0
    3b24:	6039      	str	r1, [r7, #0]
    3b26:	1dfb      	adds	r3, r7, #7
    3b28:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3b2a:	1dfb      	adds	r3, r7, #7
    3b2c:	781b      	ldrb	r3, [r3, #0]
    3b2e:	0018      	movs	r0, r3
    3b30:	4b0a      	ldr	r3, [pc, #40]	; (3b5c <system_pinmux_pin_set_config+0x40>)
    3b32:	4798      	blx	r3
    3b34:	0003      	movs	r3, r0
    3b36:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3b38:	1dfb      	adds	r3, r7, #7
    3b3a:	781b      	ldrb	r3, [r3, #0]
    3b3c:	221f      	movs	r2, #31
    3b3e:	4013      	ands	r3, r2
    3b40:	2201      	movs	r2, #1
    3b42:	409a      	lsls	r2, r3
    3b44:	0013      	movs	r3, r2
    3b46:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3b48:	683a      	ldr	r2, [r7, #0]
    3b4a:	68b9      	ldr	r1, [r7, #8]
    3b4c:	68fb      	ldr	r3, [r7, #12]
    3b4e:	0018      	movs	r0, r3
    3b50:	4b03      	ldr	r3, [pc, #12]	; (3b60 <system_pinmux_pin_set_config+0x44>)
    3b52:	4798      	blx	r3
}
    3b54:	46c0      	nop			; (mov r8, r8)
    3b56:	46bd      	mov	sp, r7
    3b58:	b004      	add	sp, #16
    3b5a:	bd80      	pop	{r7, pc}
    3b5c:	000039ad 	.word	0x000039ad
    3b60:	00003a0d 	.word	0x00003a0d

00003b64 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    3b64:	b580      	push	{r7, lr}
    3b66:	af00      	add	r7, sp, #0
	return;
    3b68:	46c0      	nop			; (mov r8, r8)
}
    3b6a:	46bd      	mov	sp, r7
    3b6c:	bd80      	pop	{r7, pc}
	...

00003b70 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3b70:	b580      	push	{r7, lr}
    3b72:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3b74:	4b06      	ldr	r3, [pc, #24]	; (3b90 <system_init+0x20>)
    3b76:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3b78:	4b06      	ldr	r3, [pc, #24]	; (3b94 <system_init+0x24>)
    3b7a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3b7c:	4b06      	ldr	r3, [pc, #24]	; (3b98 <system_init+0x28>)
    3b7e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3b80:	4b06      	ldr	r3, [pc, #24]	; (3b9c <system_init+0x2c>)
    3b82:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3b84:	4b06      	ldr	r3, [pc, #24]	; (3ba0 <system_init+0x30>)
    3b86:	4798      	blx	r3
}
    3b88:	46c0      	nop			; (mov r8, r8)
    3b8a:	46bd      	mov	sp, r7
    3b8c:	bd80      	pop	{r7, pc}
    3b8e:	46c0      	nop			; (mov r8, r8)
    3b90:	00003431 	.word	0x00003431
    3b94:	00003021 	.word	0x00003021
    3b98:	00003b65 	.word	0x00003b65
    3b9c:	00003b65 	.word	0x00003b65
    3ba0:	00003b65 	.word	0x00003b65

00003ba4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3ba4:	b580      	push	{r7, lr}
    3ba6:	b082      	sub	sp, #8
    3ba8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    3baa:	4b2f      	ldr	r3, [pc, #188]	; (3c68 <Reset_Handler+0xc4>)
    3bac:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    3bae:	4b2f      	ldr	r3, [pc, #188]	; (3c6c <Reset_Handler+0xc8>)
    3bb0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3bb2:	687a      	ldr	r2, [r7, #4]
    3bb4:	683b      	ldr	r3, [r7, #0]
    3bb6:	429a      	cmp	r2, r3
    3bb8:	d00c      	beq.n	3bd4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    3bba:	e007      	b.n	3bcc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    3bbc:	683b      	ldr	r3, [r7, #0]
    3bbe:	1d1a      	adds	r2, r3, #4
    3bc0:	603a      	str	r2, [r7, #0]
    3bc2:	687a      	ldr	r2, [r7, #4]
    3bc4:	1d11      	adds	r1, r2, #4
    3bc6:	6079      	str	r1, [r7, #4]
    3bc8:	6812      	ldr	r2, [r2, #0]
    3bca:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    3bcc:	683a      	ldr	r2, [r7, #0]
    3bce:	4b28      	ldr	r3, [pc, #160]	; (3c70 <Reset_Handler+0xcc>)
    3bd0:	429a      	cmp	r2, r3
    3bd2:	d3f3      	bcc.n	3bbc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3bd4:	4b27      	ldr	r3, [pc, #156]	; (3c74 <Reset_Handler+0xd0>)
    3bd6:	603b      	str	r3, [r7, #0]
    3bd8:	e004      	b.n	3be4 <Reset_Handler+0x40>
                *pDest++ = 0;
    3bda:	683b      	ldr	r3, [r7, #0]
    3bdc:	1d1a      	adds	r2, r3, #4
    3bde:	603a      	str	r2, [r7, #0]
    3be0:	2200      	movs	r2, #0
    3be2:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    3be4:	683a      	ldr	r2, [r7, #0]
    3be6:	4b24      	ldr	r3, [pc, #144]	; (3c78 <Reset_Handler+0xd4>)
    3be8:	429a      	cmp	r2, r3
    3bea:	d3f6      	bcc.n	3bda <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    3bec:	4b23      	ldr	r3, [pc, #140]	; (3c7c <Reset_Handler+0xd8>)
    3bee:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3bf0:	4b23      	ldr	r3, [pc, #140]	; (3c80 <Reset_Handler+0xdc>)
    3bf2:	687a      	ldr	r2, [r7, #4]
    3bf4:	21ff      	movs	r1, #255	; 0xff
    3bf6:	438a      	bics	r2, r1
    3bf8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3bfa:	4a22      	ldr	r2, [pc, #136]	; (3c84 <Reset_Handler+0xe0>)
    3bfc:	2390      	movs	r3, #144	; 0x90
    3bfe:	005b      	lsls	r3, r3, #1
    3c00:	2102      	movs	r1, #2
    3c02:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3c04:	4a20      	ldr	r2, [pc, #128]	; (3c88 <Reset_Handler+0xe4>)
    3c06:	78d3      	ldrb	r3, [r2, #3]
    3c08:	2103      	movs	r1, #3
    3c0a:	438b      	bics	r3, r1
    3c0c:	1c19      	adds	r1, r3, #0
    3c0e:	2302      	movs	r3, #2
    3c10:	430b      	orrs	r3, r1
    3c12:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3c14:	4a1c      	ldr	r2, [pc, #112]	; (3c88 <Reset_Handler+0xe4>)
    3c16:	78d3      	ldrb	r3, [r2, #3]
    3c18:	210c      	movs	r1, #12
    3c1a:	438b      	bics	r3, r1
    3c1c:	1c19      	adds	r1, r3, #0
    3c1e:	2308      	movs	r3, #8
    3c20:	430b      	orrs	r3, r1
    3c22:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    3c24:	4a19      	ldr	r2, [pc, #100]	; (3c8c <Reset_Handler+0xe8>)
    3c26:	7b93      	ldrb	r3, [r2, #14]
    3c28:	2130      	movs	r1, #48	; 0x30
    3c2a:	438b      	bics	r3, r1
    3c2c:	1c19      	adds	r1, r3, #0
    3c2e:	2320      	movs	r3, #32
    3c30:	430b      	orrs	r3, r1
    3c32:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3c34:	4a15      	ldr	r2, [pc, #84]	; (3c8c <Reset_Handler+0xe8>)
    3c36:	7b93      	ldrb	r3, [r2, #14]
    3c38:	210c      	movs	r1, #12
    3c3a:	438b      	bics	r3, r1
    3c3c:	1c19      	adds	r1, r3, #0
    3c3e:	2308      	movs	r3, #8
    3c40:	430b      	orrs	r3, r1
    3c42:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3c44:	4a11      	ldr	r2, [pc, #68]	; (3c8c <Reset_Handler+0xe8>)
    3c46:	7b93      	ldrb	r3, [r2, #14]
    3c48:	2103      	movs	r1, #3
    3c4a:	438b      	bics	r3, r1
    3c4c:	1c19      	adds	r1, r3, #0
    3c4e:	2302      	movs	r3, #2
    3c50:	430b      	orrs	r3, r1
    3c52:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3c54:	4a0e      	ldr	r2, [pc, #56]	; (3c90 <Reset_Handler+0xec>)
    3c56:	6853      	ldr	r3, [r2, #4]
    3c58:	2180      	movs	r1, #128	; 0x80
    3c5a:	430b      	orrs	r3, r1
    3c5c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    3c5e:	4b0d      	ldr	r3, [pc, #52]	; (3c94 <Reset_Handler+0xf0>)
    3c60:	4798      	blx	r3

        /* Branch to main function */
        main();
    3c62:	4b0d      	ldr	r3, [pc, #52]	; (3c98 <Reset_Handler+0xf4>)
    3c64:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3c66:	e7fe      	b.n	3c66 <Reset_Handler+0xc2>
    3c68:	00005e0c 	.word	0x00005e0c
    3c6c:	20000000 	.word	0x20000000
    3c70:	20000070 	.word	0x20000070
    3c74:	20000070 	.word	0x20000070
    3c78:	200001c0 	.word	0x200001c0
    3c7c:	00000000 	.word	0x00000000
    3c80:	e000ed00 	.word	0xe000ed00
    3c84:	41007000 	.word	0x41007000
    3c88:	41005000 	.word	0x41005000
    3c8c:	41004800 	.word	0x41004800
    3c90:	41004000 	.word	0x41004000
    3c94:	000049ad 	.word	0x000049ad
    3c98:	000046d9 	.word	0x000046d9

00003c9c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3c9c:	b580      	push	{r7, lr}
    3c9e:	af00      	add	r7, sp, #0
        while (1) {
    3ca0:	e7fe      	b.n	3ca0 <Dummy_Handler+0x4>
	...

00003ca4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3ca4:	b580      	push	{r7, lr}
    3ca6:	b084      	sub	sp, #16
    3ca8:	af00      	add	r7, sp, #0
    3caa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3cac:	4b0a      	ldr	r3, [pc, #40]	; (3cd8 <_sbrk+0x34>)
    3cae:	681b      	ldr	r3, [r3, #0]
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d102      	bne.n	3cba <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    3cb4:	4b08      	ldr	r3, [pc, #32]	; (3cd8 <_sbrk+0x34>)
    3cb6:	4a09      	ldr	r2, [pc, #36]	; (3cdc <_sbrk+0x38>)
    3cb8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    3cba:	4b07      	ldr	r3, [pc, #28]	; (3cd8 <_sbrk+0x34>)
    3cbc:	681b      	ldr	r3, [r3, #0]
    3cbe:	60fb      	str	r3, [r7, #12]

	heap += incr;
    3cc0:	4b05      	ldr	r3, [pc, #20]	; (3cd8 <_sbrk+0x34>)
    3cc2:	681a      	ldr	r2, [r3, #0]
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	18d2      	adds	r2, r2, r3
    3cc8:	4b03      	ldr	r3, [pc, #12]	; (3cd8 <_sbrk+0x34>)
    3cca:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    3ccc:	68fb      	ldr	r3, [r7, #12]
}
    3cce:	0018      	movs	r0, r3
    3cd0:	46bd      	mov	sp, r7
    3cd2:	b004      	add	sp, #16
    3cd4:	bd80      	pop	{r7, pc}
    3cd6:	46c0      	nop			; (mov r8, r8)
    3cd8:	200000d0 	.word	0x200000d0
    3cdc:	200021c0 	.word	0x200021c0

00003ce0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    3ce0:	b580      	push	{r7, lr}
    3ce2:	b082      	sub	sp, #8
    3ce4:	af00      	add	r7, sp, #0
    3ce6:	6078      	str	r0, [r7, #4]
	return -1;
    3ce8:	2301      	movs	r3, #1
    3cea:	425b      	negs	r3, r3
}
    3cec:	0018      	movs	r0, r3
    3cee:	46bd      	mov	sp, r7
    3cf0:	b002      	add	sp, #8
    3cf2:	bd80      	pop	{r7, pc}

00003cf4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    3cf4:	b580      	push	{r7, lr}
    3cf6:	b082      	sub	sp, #8
    3cf8:	af00      	add	r7, sp, #0
    3cfa:	6078      	str	r0, [r7, #4]
    3cfc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    3cfe:	683b      	ldr	r3, [r7, #0]
    3d00:	2280      	movs	r2, #128	; 0x80
    3d02:	0192      	lsls	r2, r2, #6
    3d04:	605a      	str	r2, [r3, #4]

	return 0;
    3d06:	2300      	movs	r3, #0
}
    3d08:	0018      	movs	r0, r3
    3d0a:	46bd      	mov	sp, r7
    3d0c:	b002      	add	sp, #8
    3d0e:	bd80      	pop	{r7, pc}

00003d10 <_isatty>:

extern int _isatty(int file)
{
    3d10:	b580      	push	{r7, lr}
    3d12:	b082      	sub	sp, #8
    3d14:	af00      	add	r7, sp, #0
    3d16:	6078      	str	r0, [r7, #4]
	return 1;
    3d18:	2301      	movs	r3, #1
}
    3d1a:	0018      	movs	r0, r3
    3d1c:	46bd      	mov	sp, r7
    3d1e:	b002      	add	sp, #8
    3d20:	bd80      	pop	{r7, pc}

00003d22 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    3d22:	b580      	push	{r7, lr}
    3d24:	b084      	sub	sp, #16
    3d26:	af00      	add	r7, sp, #0
    3d28:	60f8      	str	r0, [r7, #12]
    3d2a:	60b9      	str	r1, [r7, #8]
    3d2c:	607a      	str	r2, [r7, #4]
	return 0;
    3d2e:	2300      	movs	r3, #0
}
    3d30:	0018      	movs	r0, r3
    3d32:	46bd      	mov	sp, r7
    3d34:	b004      	add	sp, #16
    3d36:	bd80      	pop	{r7, pc}

00003d38 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    3d38:	b580      	push	{r7, lr}
    3d3a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    3d3c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    3d40:	4b02      	ldr	r3, [pc, #8]	; (3d4c <NVIC_SystemReset+0x14>)
    3d42:	4a03      	ldr	r2, [pc, #12]	; (3d50 <NVIC_SystemReset+0x18>)
    3d44:	60da      	str	r2, [r3, #12]
    3d46:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    3d4a:	e7fe      	b.n	3d4a <NVIC_SystemReset+0x12>
    3d4c:	e000ed00 	.word	0xe000ed00
    3d50:	05fa0004 	.word	0x05fa0004

00003d54 <system_pinmux_get_group_from_gpio_pin>:
{
    3d54:	b580      	push	{r7, lr}
    3d56:	b084      	sub	sp, #16
    3d58:	af00      	add	r7, sp, #0
    3d5a:	0002      	movs	r2, r0
    3d5c:	1dfb      	adds	r3, r7, #7
    3d5e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3d60:	230f      	movs	r3, #15
    3d62:	18fb      	adds	r3, r7, r3
    3d64:	1dfa      	adds	r2, r7, #7
    3d66:	7812      	ldrb	r2, [r2, #0]
    3d68:	09d2      	lsrs	r2, r2, #7
    3d6a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3d6c:	230e      	movs	r3, #14
    3d6e:	18fb      	adds	r3, r7, r3
    3d70:	1dfa      	adds	r2, r7, #7
    3d72:	7812      	ldrb	r2, [r2, #0]
    3d74:	0952      	lsrs	r2, r2, #5
    3d76:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3d78:	4b0d      	ldr	r3, [pc, #52]	; (3db0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3d7a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3d7c:	230f      	movs	r3, #15
    3d7e:	18fb      	adds	r3, r7, r3
    3d80:	781b      	ldrb	r3, [r3, #0]
    3d82:	2b00      	cmp	r3, #0
    3d84:	d10f      	bne.n	3da6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3d86:	230f      	movs	r3, #15
    3d88:	18fb      	adds	r3, r7, r3
    3d8a:	781b      	ldrb	r3, [r3, #0]
    3d8c:	009b      	lsls	r3, r3, #2
    3d8e:	2210      	movs	r2, #16
    3d90:	4694      	mov	ip, r2
    3d92:	44bc      	add	ip, r7
    3d94:	4463      	add	r3, ip
    3d96:	3b08      	subs	r3, #8
    3d98:	681a      	ldr	r2, [r3, #0]
    3d9a:	230e      	movs	r3, #14
    3d9c:	18fb      	adds	r3, r7, r3
    3d9e:	781b      	ldrb	r3, [r3, #0]
    3da0:	01db      	lsls	r3, r3, #7
    3da2:	18d3      	adds	r3, r2, r3
    3da4:	e000      	b.n	3da8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3da6:	2300      	movs	r3, #0
}
    3da8:	0018      	movs	r0, r3
    3daa:	46bd      	mov	sp, r7
    3dac:	b004      	add	sp, #16
    3dae:	bd80      	pop	{r7, pc}
    3db0:	41004400 	.word	0x41004400

00003db4 <port_get_group_from_gpio_pin>:
{
    3db4:	b580      	push	{r7, lr}
    3db6:	b082      	sub	sp, #8
    3db8:	af00      	add	r7, sp, #0
    3dba:	0002      	movs	r2, r0
    3dbc:	1dfb      	adds	r3, r7, #7
    3dbe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3dc0:	1dfb      	adds	r3, r7, #7
    3dc2:	781b      	ldrb	r3, [r3, #0]
    3dc4:	0018      	movs	r0, r3
    3dc6:	4b03      	ldr	r3, [pc, #12]	; (3dd4 <port_get_group_from_gpio_pin+0x20>)
    3dc8:	4798      	blx	r3
    3dca:	0003      	movs	r3, r0
}
    3dcc:	0018      	movs	r0, r3
    3dce:	46bd      	mov	sp, r7
    3dd0:	b002      	add	sp, #8
    3dd2:	bd80      	pop	{r7, pc}
    3dd4:	00003d55 	.word	0x00003d55

00003dd8 <port_get_config_defaults>:
{
    3dd8:	b580      	push	{r7, lr}
    3dda:	b082      	sub	sp, #8
    3ddc:	af00      	add	r7, sp, #0
    3dde:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    3de0:	687b      	ldr	r3, [r7, #4]
    3de2:	2200      	movs	r2, #0
    3de4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3de6:	687b      	ldr	r3, [r7, #4]
    3de8:	2201      	movs	r2, #1
    3dea:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3dec:	687b      	ldr	r3, [r7, #4]
    3dee:	2200      	movs	r2, #0
    3df0:	709a      	strb	r2, [r3, #2]
}
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	46bd      	mov	sp, r7
    3df6:	b002      	add	sp, #8
    3df8:	bd80      	pop	{r7, pc}
	...

00003dfc <port_pin_get_input_level>:
{
    3dfc:	b580      	push	{r7, lr}
    3dfe:	b084      	sub	sp, #16
    3e00:	af00      	add	r7, sp, #0
    3e02:	0002      	movs	r2, r0
    3e04:	1dfb      	adds	r3, r7, #7
    3e06:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3e08:	1dfb      	adds	r3, r7, #7
    3e0a:	781b      	ldrb	r3, [r3, #0]
    3e0c:	0018      	movs	r0, r3
    3e0e:	4b0b      	ldr	r3, [pc, #44]	; (3e3c <port_pin_get_input_level+0x40>)
    3e10:	4798      	blx	r3
    3e12:	0003      	movs	r3, r0
    3e14:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3e16:	1dfb      	adds	r3, r7, #7
    3e18:	781b      	ldrb	r3, [r3, #0]
    3e1a:	221f      	movs	r2, #31
    3e1c:	4013      	ands	r3, r2
    3e1e:	2201      	movs	r2, #1
    3e20:	409a      	lsls	r2, r3
    3e22:	0013      	movs	r3, r2
    3e24:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
    3e26:	68fb      	ldr	r3, [r7, #12]
    3e28:	6a1b      	ldr	r3, [r3, #32]
    3e2a:	68ba      	ldr	r2, [r7, #8]
    3e2c:	4013      	ands	r3, r2
    3e2e:	1e5a      	subs	r2, r3, #1
    3e30:	4193      	sbcs	r3, r2
    3e32:	b2db      	uxtb	r3, r3
}
    3e34:	0018      	movs	r0, r3
    3e36:	46bd      	mov	sp, r7
    3e38:	b004      	add	sp, #16
    3e3a:	bd80      	pop	{r7, pc}
    3e3c:	00003db5 	.word	0x00003db5

00003e40 <port_pin_set_output_level>:
{
    3e40:	b580      	push	{r7, lr}
    3e42:	b084      	sub	sp, #16
    3e44:	af00      	add	r7, sp, #0
    3e46:	0002      	movs	r2, r0
    3e48:	1dfb      	adds	r3, r7, #7
    3e4a:	701a      	strb	r2, [r3, #0]
    3e4c:	1dbb      	adds	r3, r7, #6
    3e4e:	1c0a      	adds	r2, r1, #0
    3e50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3e52:	1dfb      	adds	r3, r7, #7
    3e54:	781b      	ldrb	r3, [r3, #0]
    3e56:	0018      	movs	r0, r3
    3e58:	4b0d      	ldr	r3, [pc, #52]	; (3e90 <port_pin_set_output_level+0x50>)
    3e5a:	4798      	blx	r3
    3e5c:	0003      	movs	r3, r0
    3e5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3e60:	1dfb      	adds	r3, r7, #7
    3e62:	781b      	ldrb	r3, [r3, #0]
    3e64:	221f      	movs	r2, #31
    3e66:	4013      	ands	r3, r2
    3e68:	2201      	movs	r2, #1
    3e6a:	409a      	lsls	r2, r3
    3e6c:	0013      	movs	r3, r2
    3e6e:	60bb      	str	r3, [r7, #8]
	if (level) {
    3e70:	1dbb      	adds	r3, r7, #6
    3e72:	781b      	ldrb	r3, [r3, #0]
    3e74:	2b00      	cmp	r3, #0
    3e76:	d003      	beq.n	3e80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3e78:	68fb      	ldr	r3, [r7, #12]
    3e7a:	68ba      	ldr	r2, [r7, #8]
    3e7c:	619a      	str	r2, [r3, #24]
}
    3e7e:	e002      	b.n	3e86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3e80:	68fb      	ldr	r3, [r7, #12]
    3e82:	68ba      	ldr	r2, [r7, #8]
    3e84:	615a      	str	r2, [r3, #20]
}
    3e86:	46c0      	nop			; (mov r8, r8)
    3e88:	46bd      	mov	sp, r7
    3e8a:	b004      	add	sp, #16
    3e8c:	bd80      	pop	{r7, pc}
    3e8e:	46c0      	nop			; (mov r8, r8)
    3e90:	00003db5 	.word	0x00003db5

00003e94 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    3e94:	b580      	push	{r7, lr}
    3e96:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    3e98:	4b02      	ldr	r3, [pc, #8]	; (3ea4 <system_reset+0x10>)
    3e9a:	4798      	blx	r3
}
    3e9c:	46c0      	nop			; (mov r8, r8)
    3e9e:	46bd      	mov	sp, r7
    3ea0:	bd80      	pop	{r7, pc}
    3ea2:	46c0      	nop			; (mov r8, r8)
    3ea4:	00003d39 	.word	0x00003d39

00003ea8 <system_get_reset_cause>:
 * Retrieves the cause of the last system reset.
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
    3ea8:	b580      	push	{r7, lr}
    3eaa:	af00      	add	r7, sp, #0
	return (enum system_reset_cause)PM->RCAUSE.reg;
    3eac:	4a03      	ldr	r2, [pc, #12]	; (3ebc <system_get_reset_cause+0x14>)
    3eae:	2338      	movs	r3, #56	; 0x38
    3eb0:	5cd3      	ldrb	r3, [r2, r3]
    3eb2:	b2db      	uxtb	r3, r3
}
    3eb4:	0018      	movs	r0, r3
    3eb6:	46bd      	mov	sp, r7
    3eb8:	bd80      	pop	{r7, pc}
    3eba:	46c0      	nop			; (mov r8, r8)
    3ebc:	40000400 	.word	0x40000400

00003ec0 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    3ec0:	b580      	push	{r7, lr}
    3ec2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    3ec4:	4b04      	ldr	r3, [pc, #16]	; (3ed8 <system_interrupt_enable_global+0x18>)
    3ec6:	2201      	movs	r2, #1
    3ec8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    3eca:	f3bf 8f5f 	dmb	sy
    3ece:	b662      	cpsie	i
}
    3ed0:	46c0      	nop			; (mov r8, r8)
    3ed2:	46bd      	mov	sp, r7
    3ed4:	bd80      	pop	{r7, pc}
    3ed6:	46c0      	nop			; (mov r8, r8)
    3ed8:	20000008 	.word	0x20000008

00003edc <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3edc:	b580      	push	{r7, lr}
    3ede:	b082      	sub	sp, #8
    3ee0:	af00      	add	r7, sp, #0
    3ee2:	0002      	movs	r2, r0
    3ee4:	1dfb      	adds	r3, r7, #7
    3ee6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3ee8:	4b06      	ldr	r3, [pc, #24]	; (3f04 <system_interrupt_enable+0x28>)
    3eea:	1dfa      	adds	r2, r7, #7
    3eec:	7812      	ldrb	r2, [r2, #0]
    3eee:	0011      	movs	r1, r2
    3ef0:	221f      	movs	r2, #31
    3ef2:	400a      	ands	r2, r1
    3ef4:	2101      	movs	r1, #1
    3ef6:	4091      	lsls	r1, r2
    3ef8:	000a      	movs	r2, r1
    3efa:	601a      	str	r2, [r3, #0]
}
    3efc:	46c0      	nop			; (mov r8, r8)
    3efe:	46bd      	mov	sp, r7
    3f00:	b002      	add	sp, #8
    3f02:	bd80      	pop	{r7, pc}
    3f04:	e000e100 	.word	0xe000e100

00003f08 <spi_is_syncing>:
{
    3f08:	b580      	push	{r7, lr}
    3f0a:	b084      	sub	sp, #16
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3f10:	687b      	ldr	r3, [r7, #4]
    3f12:	681b      	ldr	r3, [r3, #0]
    3f14:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    3f16:	68fb      	ldr	r3, [r7, #12]
    3f18:	69db      	ldr	r3, [r3, #28]
    3f1a:	1e5a      	subs	r2, r3, #1
    3f1c:	4193      	sbcs	r3, r2
    3f1e:	b2db      	uxtb	r3, r3
}
    3f20:	0018      	movs	r0, r3
    3f22:	46bd      	mov	sp, r7
    3f24:	b004      	add	sp, #16
    3f26:	bd80      	pop	{r7, pc}

00003f28 <spi_get_config_defaults>:
{
    3f28:	b580      	push	{r7, lr}
    3f2a:	b082      	sub	sp, #8
    3f2c:	af00      	add	r7, sp, #0
    3f2e:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
    3f30:	687b      	ldr	r3, [r7, #4]
    3f32:	2201      	movs	r2, #1
    3f34:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	2200      	movs	r2, #0
    3f3a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3f3c:	687b      	ldr	r3, [r7, #4]
    3f3e:	2200      	movs	r2, #0
    3f40:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	22c0      	movs	r2, #192	; 0xc0
    3f46:	0392      	lsls	r2, r2, #14
    3f48:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3f4a:	687b      	ldr	r3, [r7, #4]
    3f4c:	2200      	movs	r2, #0
    3f4e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    3f50:	687b      	ldr	r3, [r7, #4]
    3f52:	2200      	movs	r2, #0
    3f54:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    3f56:	687b      	ldr	r3, [r7, #4]
    3f58:	2201      	movs	r2, #1
    3f5a:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	2201      	movs	r2, #1
    3f60:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    3f62:	687b      	ldr	r3, [r7, #4]
    3f64:	2200      	movs	r2, #0
    3f66:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    3f68:	687b      	ldr	r3, [r7, #4]
    3f6a:	2224      	movs	r2, #36	; 0x24
    3f6c:	2100      	movs	r1, #0
    3f6e:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	3318      	adds	r3, #24
    3f74:	220c      	movs	r2, #12
    3f76:	2100      	movs	r1, #0
    3f78:	0018      	movs	r0, r3
    3f7a:	4b0a      	ldr	r3, [pc, #40]	; (3fa4 <spi_get_config_defaults+0x7c>)
    3f7c:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    3f7e:	687b      	ldr	r3, [r7, #4]
    3f80:	4a09      	ldr	r2, [pc, #36]	; (3fa8 <spi_get_config_defaults+0x80>)
    3f82:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	2200      	movs	r2, #0
    3f88:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    3f8a:	687b      	ldr	r3, [r7, #4]
    3f8c:	2200      	movs	r2, #0
    3f8e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    3f90:	687b      	ldr	r3, [r7, #4]
    3f92:	2200      	movs	r2, #0
    3f94:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    3f96:	687b      	ldr	r3, [r7, #4]
    3f98:	2200      	movs	r2, #0
    3f9a:	635a      	str	r2, [r3, #52]	; 0x34
};
    3f9c:	46c0      	nop			; (mov r8, r8)
    3f9e:	46bd      	mov	sp, r7
    3fa0:	b002      	add	sp, #8
    3fa2:	bd80      	pop	{r7, pc}
    3fa4:	00004a07 	.word	0x00004a07
    3fa8:	000186a0 	.word	0x000186a0

00003fac <spi_enable>:
{
    3fac:	b580      	push	{r7, lr}
    3fae:	b084      	sub	sp, #16
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	681b      	ldr	r3, [r3, #0]
    3fb8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	681b      	ldr	r3, [r3, #0]
    3fbe:	0018      	movs	r0, r3
    3fc0:	4b0b      	ldr	r3, [pc, #44]	; (3ff0 <spi_enable+0x44>)
    3fc2:	4798      	blx	r3
    3fc4:	0003      	movs	r3, r0
    3fc6:	0018      	movs	r0, r3
    3fc8:	4b0a      	ldr	r3, [pc, #40]	; (3ff4 <spi_enable+0x48>)
    3fca:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    3fcc:	46c0      	nop			; (mov r8, r8)
    3fce:	687b      	ldr	r3, [r7, #4]
    3fd0:	0018      	movs	r0, r3
    3fd2:	4b09      	ldr	r3, [pc, #36]	; (3ff8 <spi_enable+0x4c>)
    3fd4:	4798      	blx	r3
    3fd6:	1e03      	subs	r3, r0, #0
    3fd8:	d1f9      	bne.n	3fce <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3fda:	68fb      	ldr	r3, [r7, #12]
    3fdc:	681b      	ldr	r3, [r3, #0]
    3fde:	2202      	movs	r2, #2
    3fe0:	431a      	orrs	r2, r3
    3fe2:	68fb      	ldr	r3, [r7, #12]
    3fe4:	601a      	str	r2, [r3, #0]
}
    3fe6:	46c0      	nop			; (mov r8, r8)
    3fe8:	46bd      	mov	sp, r7
    3fea:	b004      	add	sp, #16
    3fec:	bd80      	pop	{r7, pc}
    3fee:	46c0      	nop			; (mov r8, r8)
    3ff0:	00002ebd 	.word	0x00002ebd
    3ff4:	00003edd 	.word	0x00003edd
    3ff8:	00003f09 	.word	0x00003f09

00003ffc <at25dfx_chip_init>:
 */
static inline enum status_code at25dfx_chip_init(
		struct at25dfx_chip_module *const module,
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
    3ffc:	b580      	push	{r7, lr}
    3ffe:	b086      	sub	sp, #24
    4000:	af00      	add	r7, sp, #0
    4002:	60f8      	str	r0, [r7, #12]
    4004:	60b9      	str	r1, [r7, #8]
    4006:	607a      	str	r2, [r7, #4]
	struct port_config port_config;

	module->type = config->type;
    4008:	687b      	ldr	r3, [r7, #4]
    400a:	781a      	ldrb	r2, [r3, #0]
    400c:	68fb      	ldr	r3, [r7, #12]
    400e:	711a      	strb	r2, [r3, #4]
	module->cs_pin = config->cs_pin;
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	785a      	ldrb	r2, [r3, #1]
    4014:	68fb      	ldr	r3, [r7, #12]
    4016:	715a      	strb	r2, [r3, #5]
	module->spi = spi_module;
    4018:	68fb      	ldr	r3, [r7, #12]
    401a:	68ba      	ldr	r2, [r7, #8]
    401c:	601a      	str	r2, [r3, #0]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
    401e:	2314      	movs	r3, #20
    4020:	18fb      	adds	r3, r7, r3
    4022:	0018      	movs	r0, r3
    4024:	4b0c      	ldr	r3, [pc, #48]	; (4058 <at25dfx_chip_init+0x5c>)
    4026:	4798      	blx	r3
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    4028:	2314      	movs	r3, #20
    402a:	18fb      	adds	r3, r7, r3
    402c:	2201      	movs	r2, #1
    402e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    4030:	68fb      	ldr	r3, [r7, #12]
    4032:	795b      	ldrb	r3, [r3, #5]
    4034:	2214      	movs	r2, #20
    4036:	18ba      	adds	r2, r7, r2
    4038:	0011      	movs	r1, r2
    403a:	0018      	movs	r0, r3
    403c:	4b07      	ldr	r3, [pc, #28]	; (405c <at25dfx_chip_init+0x60>)
    403e:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    4040:	68fb      	ldr	r3, [r7, #12]
    4042:	795b      	ldrb	r3, [r3, #5]
    4044:	2101      	movs	r1, #1
    4046:	0018      	movs	r0, r3
    4048:	4b05      	ldr	r3, [pc, #20]	; (4060 <at25dfx_chip_init+0x64>)
    404a:	4798      	blx	r3

	return STATUS_OK;
    404c:	2300      	movs	r3, #0
}
    404e:	0018      	movs	r0, r3
    4050:	46bd      	mov	sp, r7
    4052:	b006      	add	sp, #24
    4054:	bd80      	pop	{r7, pc}
    4056:	46c0      	nop			; (mov r8, r8)
    4058:	00003dd9 	.word	0x00003dd9
    405c:	00002fc1 	.word	0x00002fc1
    4060:	00003e41 	.word	0x00003e41

00004064 <nvm_get_config_defaults>:
{
    4064:	b580      	push	{r7, lr}
    4066:	b082      	sub	sp, #8
    4068:	af00      	add	r7, sp, #0
    406a:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    406c:	687b      	ldr	r3, [r7, #4]
    406e:	2200      	movs	r2, #0
    4070:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    4072:	687b      	ldr	r3, [r7, #4]
    4074:	2201      	movs	r2, #1
    4076:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    4078:	4b08      	ldr	r3, [pc, #32]	; (409c <nvm_get_config_defaults+0x38>)
    407a:	685b      	ldr	r3, [r3, #4]
    407c:	06db      	lsls	r3, r3, #27
    407e:	0f1b      	lsrs	r3, r3, #28
    4080:	b2db      	uxtb	r3, r3
    4082:	001a      	movs	r2, r3
    4084:	687b      	ldr	r3, [r7, #4]
    4086:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    4088:	687b      	ldr	r3, [r7, #4]
    408a:	2200      	movs	r2, #0
    408c:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    408e:	687b      	ldr	r3, [r7, #4]
    4090:	2200      	movs	r2, #0
    4092:	711a      	strb	r2, [r3, #4]
}
    4094:	46c0      	nop			; (mov r8, r8)
    4096:	46bd      	mov	sp, r7
    4098:	b002      	add	sp, #8
    409a:	bd80      	pop	{r7, pc}
    409c:	41004000 	.word	0x41004000

000040a0 <usart_is_syncing>:
{
    40a0:	b580      	push	{r7, lr}
    40a2:	b084      	sub	sp, #16
    40a4:	af00      	add	r7, sp, #0
    40a6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    40a8:	687b      	ldr	r3, [r7, #4]
    40aa:	681b      	ldr	r3, [r3, #0]
    40ac:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    40ae:	68fb      	ldr	r3, [r7, #12]
    40b0:	69db      	ldr	r3, [r3, #28]
    40b2:	1e5a      	subs	r2, r3, #1
    40b4:	4193      	sbcs	r3, r2
    40b6:	b2db      	uxtb	r3, r3
}
    40b8:	0018      	movs	r0, r3
    40ba:	46bd      	mov	sp, r7
    40bc:	b004      	add	sp, #16
    40be:	bd80      	pop	{r7, pc}

000040c0 <_usart_wait_for_sync>:
{
    40c0:	b580      	push	{r7, lr}
    40c2:	b082      	sub	sp, #8
    40c4:	af00      	add	r7, sp, #0
    40c6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    40c8:	46c0      	nop			; (mov r8, r8)
    40ca:	687b      	ldr	r3, [r7, #4]
    40cc:	0018      	movs	r0, r3
    40ce:	4b04      	ldr	r3, [pc, #16]	; (40e0 <_usart_wait_for_sync+0x20>)
    40d0:	4798      	blx	r3
    40d2:	1e03      	subs	r3, r0, #0
    40d4:	d1f9      	bne.n	40ca <_usart_wait_for_sync+0xa>
}
    40d6:	46c0      	nop			; (mov r8, r8)
    40d8:	46bd      	mov	sp, r7
    40da:	b002      	add	sp, #8
    40dc:	bd80      	pop	{r7, pc}
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	000040a1 	.word	0x000040a1

000040e4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    40e4:	b580      	push	{r7, lr}
    40e6:	b082      	sub	sp, #8
    40e8:	af00      	add	r7, sp, #0
    40ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    40ec:	687b      	ldr	r3, [r7, #4]
    40ee:	2280      	movs	r2, #128	; 0x80
    40f0:	05d2      	lsls	r2, r2, #23
    40f2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	2200      	movs	r2, #0
    40f8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    40fa:	687b      	ldr	r3, [r7, #4]
    40fc:	22ff      	movs	r2, #255	; 0xff
    40fe:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    4100:	687b      	ldr	r3, [r7, #4]
    4102:	2200      	movs	r2, #0
    4104:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	2200      	movs	r2, #0
    410a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    410c:	687b      	ldr	r3, [r7, #4]
    410e:	2296      	movs	r2, #150	; 0x96
    4110:	0192      	lsls	r2, r2, #6
    4112:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	2224      	movs	r2, #36	; 0x24
    4118:	2101      	movs	r1, #1
    411a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    411c:	687b      	ldr	r3, [r7, #4]
    411e:	2225      	movs	r2, #37	; 0x25
    4120:	2101      	movs	r1, #1
    4122:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	2226      	movs	r2, #38	; 0x26
    4128:	2100      	movs	r1, #0
    412a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    412c:	687b      	ldr	r3, [r7, #4]
    412e:	2227      	movs	r2, #39	; 0x27
    4130:	2100      	movs	r1, #0
    4132:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    4134:	687b      	ldr	r3, [r7, #4]
    4136:	2200      	movs	r2, #0
    4138:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    413a:	687b      	ldr	r3, [r7, #4]
    413c:	2288      	movs	r2, #136	; 0x88
    413e:	0352      	lsls	r2, r2, #13
    4140:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    4142:	687b      	ldr	r3, [r7, #4]
    4144:	222c      	movs	r2, #44	; 0x2c
    4146:	2100      	movs	r1, #0
    4148:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    414a:	687b      	ldr	r3, [r7, #4]
    414c:	222d      	movs	r2, #45	; 0x2d
    414e:	2100      	movs	r1, #0
    4150:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	2200      	movs	r2, #0
    4156:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    4158:	687b      	ldr	r3, [r7, #4]
    415a:	2200      	movs	r2, #0
    415c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    415e:	687b      	ldr	r3, [r7, #4]
    4160:	2200      	movs	r2, #0
    4162:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    4164:	687b      	ldr	r3, [r7, #4]
    4166:	2200      	movs	r2, #0
    4168:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    416a:	687b      	ldr	r3, [r7, #4]
    416c:	2200      	movs	r2, #0
    416e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	2200      	movs	r2, #0
    4174:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    4176:	687b      	ldr	r3, [r7, #4]
    4178:	2200      	movs	r2, #0
    417a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    417c:	687b      	ldr	r3, [r7, #4]
    417e:	2200      	movs	r2, #0
    4180:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    4182:	687b      	ldr	r3, [r7, #4]
    4184:	2200      	movs	r2, #0
    4186:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    4188:	687b      	ldr	r3, [r7, #4]
    418a:	2200      	movs	r2, #0
    418c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    418e:	687b      	ldr	r3, [r7, #4]
    4190:	2213      	movs	r2, #19
    4192:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    4194:	687b      	ldr	r3, [r7, #4]
    4196:	2200      	movs	r2, #0
    4198:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    419a:	46c0      	nop			; (mov r8, r8)
    419c:	46bd      	mov	sp, r7
    419e:	b002      	add	sp, #8
    41a0:	bd80      	pop	{r7, pc}
	...

000041a4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    41a4:	b580      	push	{r7, lr}
    41a6:	b084      	sub	sp, #16
    41a8:	af00      	add	r7, sp, #0
    41aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    41ac:	687b      	ldr	r3, [r7, #4]
    41ae:	681b      	ldr	r3, [r3, #0]
    41b0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    41b2:	687b      	ldr	r3, [r7, #4]
    41b4:	681b      	ldr	r3, [r3, #0]
    41b6:	0018      	movs	r0, r3
    41b8:	4b09      	ldr	r3, [pc, #36]	; (41e0 <usart_enable+0x3c>)
    41ba:	4798      	blx	r3
    41bc:	0003      	movs	r3, r0
    41be:	0018      	movs	r0, r3
    41c0:	4b08      	ldr	r3, [pc, #32]	; (41e4 <usart_enable+0x40>)
    41c2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    41c4:	687b      	ldr	r3, [r7, #4]
    41c6:	0018      	movs	r0, r3
    41c8:	4b07      	ldr	r3, [pc, #28]	; (41e8 <usart_enable+0x44>)
    41ca:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    41cc:	68fb      	ldr	r3, [r7, #12]
    41ce:	681b      	ldr	r3, [r3, #0]
    41d0:	2202      	movs	r2, #2
    41d2:	431a      	orrs	r2, r3
    41d4:	68fb      	ldr	r3, [r7, #12]
    41d6:	601a      	str	r2, [r3, #0]
}
    41d8:	46c0      	nop			; (mov r8, r8)
    41da:	46bd      	mov	sp, r7
    41dc:	b004      	add	sp, #16
    41de:	bd80      	pop	{r7, pc}
    41e0:	00002ebd 	.word	0x00002ebd
    41e4:	00003edd 	.word	0x00003edd
    41e8:	000040c1 	.word	0x000040c1

000041ec <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    41ec:	b580      	push	{r7, lr}
    41ee:	b084      	sub	sp, #16
    41f0:	af00      	add	r7, sp, #0
    41f2:	60f8      	str	r0, [r7, #12]
    41f4:	60b9      	str	r1, [r7, #8]
    41f6:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    41f8:	687a      	ldr	r2, [r7, #4]
    41fa:	68b9      	ldr	r1, [r7, #8]
    41fc:	68fb      	ldr	r3, [r7, #12]
    41fe:	0018      	movs	r0, r3
    4200:	4b05      	ldr	r3, [pc, #20]	; (4218 <usart_serial_init+0x2c>)
    4202:	4798      	blx	r3
    4204:	1e03      	subs	r3, r0, #0
    4206:	d101      	bne.n	420c <usart_serial_init+0x20>
		return true;
    4208:	2301      	movs	r3, #1
    420a:	e000      	b.n	420e <usart_serial_init+0x22>
	}
	else {
		return false;
    420c:	2300      	movs	r3, #0
	}
}
    420e:	0018      	movs	r0, r3
    4210:	46bd      	mov	sp, r7
    4212:	b004      	add	sp, #16
    4214:	bd80      	pop	{r7, pc}
    4216:	46c0      	nop			; (mov r8, r8)
    4218:	000026f5 	.word	0x000026f5

0000421c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    421c:	b580      	push	{r7, lr}
    421e:	b082      	sub	sp, #8
    4220:	af00      	add	r7, sp, #0
    4222:	6078      	str	r0, [r7, #4]
    4224:	000a      	movs	r2, r1
    4226:	1cfb      	adds	r3, r7, #3
    4228:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    422a:	46c0      	nop			; (mov r8, r8)
    422c:	1cfb      	adds	r3, r7, #3
    422e:	781b      	ldrb	r3, [r3, #0]
    4230:	b29a      	uxth	r2, r3
    4232:	687b      	ldr	r3, [r7, #4]
    4234:	0011      	movs	r1, r2
    4236:	0018      	movs	r0, r3
    4238:	4b04      	ldr	r3, [pc, #16]	; (424c <usart_serial_putchar+0x30>)
    423a:	4798      	blx	r3
    423c:	1e03      	subs	r3, r0, #0
    423e:	d1f5      	bne.n	422c <usart_serial_putchar+0x10>

	return STATUS_OK;
    4240:	2300      	movs	r3, #0
}
    4242:	0018      	movs	r0, r3
    4244:	46bd      	mov	sp, r7
    4246:	b002      	add	sp, #8
    4248:	bd80      	pop	{r7, pc}
    424a:	46c0      	nop			; (mov r8, r8)
    424c:	00002969 	.word	0x00002969

00004250 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    4250:	b580      	push	{r7, lr}
    4252:	b084      	sub	sp, #16
    4254:	af00      	add	r7, sp, #0
    4256:	6078      	str	r0, [r7, #4]
    4258:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    425a:	230e      	movs	r3, #14
    425c:	18fb      	adds	r3, r7, r3
    425e:	2200      	movs	r2, #0
    4260:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    4262:	46c0      	nop			; (mov r8, r8)
    4264:	230e      	movs	r3, #14
    4266:	18fa      	adds	r2, r7, r3
    4268:	687b      	ldr	r3, [r7, #4]
    426a:	0011      	movs	r1, r2
    426c:	0018      	movs	r0, r3
    426e:	4b07      	ldr	r3, [pc, #28]	; (428c <usart_serial_getchar+0x3c>)
    4270:	4798      	blx	r3
    4272:	1e03      	subs	r3, r0, #0
    4274:	d1f6      	bne.n	4264 <usart_serial_getchar+0x14>

	*c = temp;
    4276:	230e      	movs	r3, #14
    4278:	18fb      	adds	r3, r7, r3
    427a:	881b      	ldrh	r3, [r3, #0]
    427c:	b2da      	uxtb	r2, r3
    427e:	683b      	ldr	r3, [r7, #0]
    4280:	701a      	strb	r2, [r3, #0]
}
    4282:	46c0      	nop			; (mov r8, r8)
    4284:	46bd      	mov	sp, r7
    4286:	b004      	add	sp, #16
    4288:	bd80      	pop	{r7, pc}
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	000029cd 	.word	0x000029cd

00004290 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    4290:	b580      	push	{r7, lr}
    4292:	b084      	sub	sp, #16
    4294:	af00      	add	r7, sp, #0
    4296:	60f8      	str	r0, [r7, #12]
    4298:	60b9      	str	r1, [r7, #8]
    429a:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    429c:	4b10      	ldr	r3, [pc, #64]	; (42e0 <stdio_serial_init+0x50>)
    429e:	68fa      	ldr	r2, [r7, #12]
    42a0:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    42a2:	4b10      	ldr	r3, [pc, #64]	; (42e4 <stdio_serial_init+0x54>)
    42a4:	4a10      	ldr	r2, [pc, #64]	; (42e8 <stdio_serial_init+0x58>)
    42a6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    42a8:	4b10      	ldr	r3, [pc, #64]	; (42ec <stdio_serial_init+0x5c>)
    42aa:	4a11      	ldr	r2, [pc, #68]	; (42f0 <stdio_serial_init+0x60>)
    42ac:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    42ae:	687a      	ldr	r2, [r7, #4]
    42b0:	68b9      	ldr	r1, [r7, #8]
    42b2:	68fb      	ldr	r3, [r7, #12]
    42b4:	0018      	movs	r0, r3
    42b6:	4b0f      	ldr	r3, [pc, #60]	; (42f4 <stdio_serial_init+0x64>)
    42b8:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    42ba:	4b0f      	ldr	r3, [pc, #60]	; (42f8 <stdio_serial_init+0x68>)
    42bc:	681b      	ldr	r3, [r3, #0]
    42be:	689b      	ldr	r3, [r3, #8]
    42c0:	2100      	movs	r1, #0
    42c2:	0018      	movs	r0, r3
    42c4:	4b0d      	ldr	r3, [pc, #52]	; (42fc <stdio_serial_init+0x6c>)
    42c6:	4798      	blx	r3
	setbuf(stdin, NULL);
    42c8:	4b0b      	ldr	r3, [pc, #44]	; (42f8 <stdio_serial_init+0x68>)
    42ca:	681b      	ldr	r3, [r3, #0]
    42cc:	685b      	ldr	r3, [r3, #4]
    42ce:	2100      	movs	r1, #0
    42d0:	0018      	movs	r0, r3
    42d2:	4b0a      	ldr	r3, [pc, #40]	; (42fc <stdio_serial_init+0x6c>)
    42d4:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    42d6:	46c0      	nop			; (mov r8, r8)
    42d8:	46bd      	mov	sp, r7
    42da:	b004      	add	sp, #16
    42dc:	bd80      	pop	{r7, pc}
    42de:	46c0      	nop			; (mov r8, r8)
    42e0:	20000128 	.word	0x20000128
    42e4:	20000124 	.word	0x20000124
    42e8:	0000421d 	.word	0x0000421d
    42ec:	20000120 	.word	0x20000120
    42f0:	00004251 	.word	0x00004251
    42f4:	000041ed 	.word	0x000041ed
    42f8:	2000000c 	.word	0x2000000c
    42fc:	00004b21 	.word	0x00004b21

00004300 <configure_console>:
static uint8_t read_buffer[AT25DFX_BUFFER_SIZE];
struct spi_module at25dfx_spi;
struct at25dfx_chip_module at25dfx_chip;

static void configure_console(void)
{
    4300:	b580      	push	{r7, lr}
    4302:	b090      	sub	sp, #64	; 0x40
    4304:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;
	usart_get_config_defaults(&usart_conf);
    4306:	003b      	movs	r3, r7
    4308:	0018      	movs	r0, r3
    430a:	4b13      	ldr	r3, [pc, #76]	; (4358 <configure_console+0x58>)
    430c:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    430e:	003b      	movs	r3, r7
    4310:	22c4      	movs	r2, #196	; 0xc4
    4312:	0392      	lsls	r2, r2, #14
    4314:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    4316:	003b      	movs	r3, r7
    4318:	2201      	movs	r2, #1
    431a:	4252      	negs	r2, r2
    431c:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    431e:	003b      	movs	r3, r7
    4320:	2201      	movs	r2, #1
    4322:	4252      	negs	r2, r2
    4324:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    4326:	003b      	movs	r3, r7
    4328:	4a0c      	ldr	r2, [pc, #48]	; (435c <configure_console+0x5c>)
    432a:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    432c:	003b      	movs	r3, r7
    432e:	4a0c      	ldr	r2, [pc, #48]	; (4360 <configure_console+0x60>)
    4330:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    4332:	003b      	movs	r3, r7
    4334:	22e1      	movs	r2, #225	; 0xe1
    4336:	0252      	lsls	r2, r2, #9
    4338:	621a      	str	r2, [r3, #32]
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
    433a:	003a      	movs	r2, r7
    433c:	4909      	ldr	r1, [pc, #36]	; (4364 <configure_console+0x64>)
    433e:	4b0a      	ldr	r3, [pc, #40]	; (4368 <configure_console+0x68>)
    4340:	0018      	movs	r0, r3
    4342:	4b0a      	ldr	r3, [pc, #40]	; (436c <configure_console+0x6c>)
    4344:	4798      	blx	r3
	usart_enable(&usart_instance);
    4346:	4b08      	ldr	r3, [pc, #32]	; (4368 <configure_console+0x68>)
    4348:	0018      	movs	r0, r3
    434a:	4b09      	ldr	r3, [pc, #36]	; (4370 <configure_console+0x70>)
    434c:	4798      	blx	r3
}
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	46bd      	mov	sp, r7
    4352:	b010      	add	sp, #64	; 0x40
    4354:	bd80      	pop	{r7, pc}
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	000040e5 	.word	0x000040e5
    435c:	002a0003 	.word	0x002a0003
    4360:	002b0003 	.word	0x002b0003
    4364:	42001800 	.word	0x42001800
    4368:	20000144 	.word	0x20000144
    436c:	00004291 	.word	0x00004291
    4370:	000041a5 	.word	0x000041a5

00004374 <configure_spi_flash>:

static void configure_spi_flash()
{
    4374:	b580      	push	{r7, lr}
    4376:	b090      	sub	sp, #64	; 0x40
    4378:	af00      	add	r7, sp, #0
	struct at25dfx_chip_config at25dfx_chip_config;
	struct spi_config at25dfx_spi_config;
	spi_get_config_defaults(&at25dfx_spi_config);
    437a:	1d3b      	adds	r3, r7, #4
    437c:	0018      	movs	r0, r3
    437e:	4b19      	ldr	r3, [pc, #100]	; (43e4 <configure_spi_flash+0x70>)
    4380:	4798      	blx	r3
	at25dfx_spi_config.mode_specific.master.baudrate = AT25DFX_CLOCK_SPEED;
    4382:	1d3b      	adds	r3, r7, #4
    4384:	4a18      	ldr	r2, [pc, #96]	; (43e8 <configure_spi_flash+0x74>)
    4386:	619a      	str	r2, [r3, #24]
	at25dfx_spi_config.mux_setting = AT25DFX_SPI_PINMUX_SETTING;
    4388:	1d3b      	adds	r3, r7, #4
    438a:	2280      	movs	r2, #128	; 0x80
    438c:	0252      	lsls	r2, r2, #9
    438e:	60da      	str	r2, [r3, #12]
	at25dfx_spi_config.pinmux_pad0 = AT25DFX_SPI_PINMUX_PAD0;
    4390:	1d3b      	adds	r3, r7, #4
    4392:	4a16      	ldr	r2, [pc, #88]	; (43ec <configure_spi_flash+0x78>)
    4394:	629a      	str	r2, [r3, #40]	; 0x28
	at25dfx_spi_config.pinmux_pad1 = AT25DFX_SPI_PINMUX_PAD1;
    4396:	1d3b      	adds	r3, r7, #4
    4398:	4a15      	ldr	r2, [pc, #84]	; (43f0 <configure_spi_flash+0x7c>)
    439a:	62da      	str	r2, [r3, #44]	; 0x2c
	at25dfx_spi_config.pinmux_pad2 = AT25DFX_SPI_PINMUX_PAD2;
    439c:	1d3b      	adds	r3, r7, #4
    439e:	4a15      	ldr	r2, [pc, #84]	; (43f4 <configure_spi_flash+0x80>)
    43a0:	631a      	str	r2, [r3, #48]	; 0x30
	at25dfx_spi_config.pinmux_pad3 = AT25DFX_SPI_PINMUX_PAD3;
    43a2:	1d3b      	adds	r3, r7, #4
    43a4:	4a14      	ldr	r2, [pc, #80]	; (43f8 <configure_spi_flash+0x84>)
    43a6:	635a      	str	r2, [r3, #52]	; 0x34
	spi_init(&at25dfx_spi, AT25DFX_SPI, &at25dfx_spi_config);
    43a8:	1d3a      	adds	r2, r7, #4
    43aa:	4914      	ldr	r1, [pc, #80]	; (43fc <configure_spi_flash+0x88>)
    43ac:	4b14      	ldr	r3, [pc, #80]	; (4400 <configure_spi_flash+0x8c>)
    43ae:	0018      	movs	r0, r3
    43b0:	4b14      	ldr	r3, [pc, #80]	; (4404 <configure_spi_flash+0x90>)
    43b2:	4798      	blx	r3
	spi_enable(&at25dfx_spi);
    43b4:	4b12      	ldr	r3, [pc, #72]	; (4400 <configure_spi_flash+0x8c>)
    43b6:	0018      	movs	r0, r3
    43b8:	4b13      	ldr	r3, [pc, #76]	; (4408 <configure_spi_flash+0x94>)
    43ba:	4798      	blx	r3
	
	at25dfx_chip_config.type = AT25DFX_MEM_TYPE;
    43bc:	233c      	movs	r3, #60	; 0x3c
    43be:	18fb      	adds	r3, r7, r3
    43c0:	2204      	movs	r2, #4
    43c2:	701a      	strb	r2, [r3, #0]
	at25dfx_chip_config.cs_pin = AT25DFX_CS;
    43c4:	233c      	movs	r3, #60	; 0x3c
    43c6:	18fb      	adds	r3, r7, r3
    43c8:	2207      	movs	r2, #7
    43ca:	705a      	strb	r2, [r3, #1]
	at25dfx_chip_init(&at25dfx_chip, &at25dfx_spi, &at25dfx_chip_config);
    43cc:	233c      	movs	r3, #60	; 0x3c
    43ce:	18fa      	adds	r2, r7, r3
    43d0:	490b      	ldr	r1, [pc, #44]	; (4400 <configure_spi_flash+0x8c>)
    43d2:	4b0e      	ldr	r3, [pc, #56]	; (440c <configure_spi_flash+0x98>)
    43d4:	0018      	movs	r0, r3
    43d6:	4b0e      	ldr	r3, [pc, #56]	; (4410 <configure_spi_flash+0x9c>)
    43d8:	4798      	blx	r3
}
    43da:	46c0      	nop			; (mov r8, r8)
    43dc:	46bd      	mov	sp, r7
    43de:	b010      	add	sp, #64	; 0x40
    43e0:	bd80      	pop	{r7, pc}
    43e2:	46c0      	nop			; (mov r8, r8)
    43e4:	00003f29 	.word	0x00003f29
    43e8:	0001d4c0 	.word	0x0001d4c0
    43ec:	00100002 	.word	0x00100002
    43f0:	00110002 	.word	0x00110002
    43f4:	00120002 	.word	0x00120002
    43f8:	00130002 	.word	0x00130002
    43fc:	42000c00 	.word	0x42000c00
    4400:	20000180 	.word	0x20000180
    4404:	00000c81 	.word	0x00000c81
    4408:	00003fad 	.word	0x00003fad
    440c:	20000178 	.word	0x20000178
    4410:	00003ffd 	.word	0x00003ffd

00004414 <getFWStat>:

static Firmware_Status_t getFWStat()
{
    4414:	b580      	push	{r7, lr}
    4416:	b082      	sub	sp, #8
    4418:	af00      	add	r7, sp, #0
    441a:	6078      	str	r0, [r7, #4]
	return *(Firmware_Status_t*)FW_STAT_ADDRESS;	// return the firmware status
    441c:	23fe      	movs	r3, #254	; 0xfe
    441e:	01db      	lsls	r3, r3, #7
    4420:	687a      	ldr	r2, [r7, #4]
    4422:	0010      	movs	r0, r2
    4424:	0019      	movs	r1, r3
    4426:	2308      	movs	r3, #8
    4428:	001a      	movs	r2, r3
    442a:	4b03      	ldr	r3, [pc, #12]	; (4438 <getFWStat+0x24>)
    442c:	4798      	blx	r3
}
    442e:	6878      	ldr	r0, [r7, #4]
    4430:	46bd      	mov	sp, r7
    4432:	b002      	add	sp, #8
    4434:	bd80      	pop	{r7, pc}
    4436:	46c0      	nop			; (mov r8, r8)
    4438:	000049f5 	.word	0x000049f5

0000443c <writeFWStat>:

static void writeFWStat(Firmware_Status_t thisFW)
{
    443c:	b590      	push	{r4, r7, lr}
    443e:	b095      	sub	sp, #84	; 0x54
    4440:	af00      	add	r7, sp, #0
    4442:	003b      	movs	r3, r7
    4444:	6018      	str	r0, [r3, #0]
    4446:	6059      	str	r1, [r3, #4]
	uint8_t page_buffer[NVMCTRL_PAGE_SIZE]={0};
    4448:	230c      	movs	r3, #12
    444a:	18fb      	adds	r3, r7, r3
    444c:	0018      	movs	r0, r3
    444e:	2340      	movs	r3, #64	; 0x40
    4450:	001a      	movs	r2, r3
    4452:	2100      	movs	r1, #0
    4454:	4b26      	ldr	r3, [pc, #152]	; (44f0 <writeFWStat+0xb4>)
    4456:	4798      	blx	r3
	page_buffer[0] = thisFW.signature[0];
    4458:	003b      	movs	r3, r7
    445a:	781a      	ldrb	r2, [r3, #0]
    445c:	230c      	movs	r3, #12
    445e:	18fb      	adds	r3, r7, r3
    4460:	701a      	strb	r2, [r3, #0]
	page_buffer[1] = thisFW.signature[1];
    4462:	003b      	movs	r3, r7
    4464:	785a      	ldrb	r2, [r3, #1]
    4466:	230c      	movs	r3, #12
    4468:	18fb      	adds	r3, r7, r3
    446a:	705a      	strb	r2, [r3, #1]
	page_buffer[2] = thisFW.signature[2];
    446c:	003b      	movs	r3, r7
    446e:	789a      	ldrb	r2, [r3, #2]
    4470:	230c      	movs	r3, #12
    4472:	18fb      	adds	r3, r7, r3
    4474:	709a      	strb	r2, [r3, #2]
	page_buffer[3] = thisFW.signature[3];
    4476:	003b      	movs	r3, r7
    4478:	78da      	ldrb	r2, [r3, #3]
    447a:	230c      	movs	r3, #12
    447c:	18fb      	adds	r3, r7, r3
    447e:	70da      	strb	r2, [r3, #3]
	page_buffer[4] = thisFW.executing_image;
    4480:	003b      	movs	r3, r7
    4482:	791a      	ldrb	r2, [r3, #4]
    4484:	230c      	movs	r3, #12
    4486:	18fb      	adds	r3, r7, r3
    4488:	711a      	strb	r2, [r3, #4]
	page_buffer[5] = thisFW.downloaded_image;
    448a:	003b      	movs	r3, r7
    448c:	795a      	ldrb	r2, [r3, #5]
    448e:	230c      	movs	r3, #12
    4490:	18fb      	adds	r3, r7, r3
    4492:	715a      	strb	r2, [r3, #5]
	page_buffer[6] = thisFW.writenew_image;
    4494:	003b      	movs	r3, r7
    4496:	799a      	ldrb	r2, [r3, #6]
    4498:	230c      	movs	r3, #12
    449a:	18fb      	adds	r3, r7, r3
    449c:	719a      	strb	r2, [r3, #6]
	page_buffer[7] = thisFW.reset_count;
    449e:	003b      	movs	r3, r7
    44a0:	79da      	ldrb	r2, [r3, #7]
    44a2:	230c      	movs	r3, #12
    44a4:	18fb      	adds	r3, r7, r3
    44a6:	71da      	strb	r2, [r3, #7]
	
	status_code_genare_t error_code;
	do
	{
		error_code = nvm_erase_row(FW_STAT_ADDRESS);			// Erase FW stat row
    44a8:	234f      	movs	r3, #79	; 0x4f
    44aa:	18fc      	adds	r4, r7, r3
    44ac:	23fe      	movs	r3, #254	; 0xfe
    44ae:	01db      	lsls	r3, r3, #7
    44b0:	0018      	movs	r0, r3
    44b2:	4b10      	ldr	r3, [pc, #64]	; (44f4 <writeFWStat+0xb8>)
    44b4:	4798      	blx	r3
    44b6:	0003      	movs	r3, r0
    44b8:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    44ba:	234f      	movs	r3, #79	; 0x4f
    44bc:	18fb      	adds	r3, r7, r3
    44be:	781b      	ldrb	r3, [r3, #0]
    44c0:	2b05      	cmp	r3, #5
    44c2:	d0f1      	beq.n	44a8 <writeFWStat+0x6c>
	
	do
	{
		error_code = nvm_write_buffer(FW_STAT_ADDRESS, page_buffer, NVMCTRL_PAGE_SIZE);	// Write buffer to FW_STAT page
    44c4:	234f      	movs	r3, #79	; 0x4f
    44c6:	18fc      	adds	r4, r7, r3
    44c8:	230c      	movs	r3, #12
    44ca:	18f9      	adds	r1, r7, r3
    44cc:	23fe      	movs	r3, #254	; 0xfe
    44ce:	01db      	lsls	r3, r3, #7
    44d0:	2240      	movs	r2, #64	; 0x40
    44d2:	0018      	movs	r0, r3
    44d4:	4b08      	ldr	r3, [pc, #32]	; (44f8 <writeFWStat+0xbc>)
    44d6:	4798      	blx	r3
    44d8:	0003      	movs	r3, r0
    44da:	7023      	strb	r3, [r4, #0]
	} while (error_code == STATUS_BUSY);
    44dc:	234f      	movs	r3, #79	; 0x4f
    44de:	18fb      	adds	r3, r7, r3
    44e0:	781b      	ldrb	r3, [r3, #0]
    44e2:	2b05      	cmp	r3, #5
    44e4:	d0ee      	beq.n	44c4 <writeFWStat+0x88>
}
    44e6:	46c0      	nop			; (mov r8, r8)
    44e8:	46bd      	mov	sp, r7
    44ea:	b015      	add	sp, #84	; 0x54
    44ec:	bd90      	pop	{r4, r7, pc}
    44ee:	46c0      	nop			; (mov r8, r8)
    44f0:	00004a07 	.word	0x00004a07
    44f4:	00001b29 	.word	0x00001b29
    44f8:	000019dd 	.word	0x000019dd

000044fc <upgradeFW>:

static void upgradeFW(Firmware_Status_t thisFW)
{
    44fc:	b590      	push	{r4, r7, lr}
    44fe:	b089      	sub	sp, #36	; 0x24
    4500:	af00      	add	r7, sp, #0
    4502:	003b      	movs	r3, r7
    4504:	6018      	str	r0, [r3, #0]
    4506:	6059      	str	r1, [r3, #4]
	printf("Upgrading firmware to version: %d.\n", thisFW.downloaded_image);
    4508:	003b      	movs	r3, r7
    450a:	795b      	ldrb	r3, [r3, #5]
    450c:	001a      	movs	r2, r3
    450e:	4b40      	ldr	r3, [pc, #256]	; (4610 <upgradeFW+0x114>)
    4510:	0011      	movs	r1, r2
    4512:	0018      	movs	r0, r3
    4514:	4b3f      	ldr	r3, [pc, #252]	; (4614 <upgradeFW+0x118>)
    4516:	4798      	blx	r3
		return;
	}
	*/
	// write new firmware
	//--------------------------
	uint32_t flash_fw_addr = thisFW.downloaded_image * 0x40000;			// Pick right start address in flash for downloaded image
    4518:	003b      	movs	r3, r7
    451a:	795b      	ldrb	r3, [r3, #5]
    451c:	049b      	lsls	r3, r3, #18
    451e:	617b      	str	r3, [r7, #20]
	at25dfx_chip_wake(&at25dfx_chip); //wake up the chip
    4520:	4b3d      	ldr	r3, [pc, #244]	; (4618 <upgradeFW+0x11c>)
    4522:	0018      	movs	r0, r3
    4524:	4b3d      	ldr	r3, [pc, #244]	; (461c <upgradeFW+0x120>)
    4526:	4798      	blx	r3
	if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK)
    4528:	4b3b      	ldr	r3, [pc, #236]	; (4618 <upgradeFW+0x11c>)
    452a:	0018      	movs	r0, r3
    452c:	4b3c      	ldr	r3, [pc, #240]	; (4620 <upgradeFW+0x124>)
    452e:	4798      	blx	r3
    4530:	1e03      	subs	r3, r0, #0
    4532:	d004      	beq.n	453e <upgradeFW+0x42>
	{
		printf("Flash Chip did not respond. Upgrade failed !\n");
    4534:	4b3b      	ldr	r3, [pc, #236]	; (4624 <upgradeFW+0x128>)
    4536:	0018      	movs	r0, r3
    4538:	4b3b      	ldr	r3, [pc, #236]	; (4628 <upgradeFW+0x12c>)
    453a:	4798      	blx	r3
		return;
    453c:	e064      	b.n	4608 <upgradeFW+0x10c>
	}
	//...................
	//read the firmware out and start burning NVM
	uint32_t addr_i = 0;
    453e:	2300      	movs	r3, #0
    4540:	61fb      	str	r3, [r7, #28]
	status_code_genare_t error_code;
	while (APP_START_ADDRESS + addr_i < 0x40000) {	
    4542:	e043      	b.n	45cc <upgradeFW+0xd0>
		// write a row to NVM (256B)
		do
		{
			error_code = nvm_erase_row(APP_START_ADDRESS + addr_i);			// Erase NVM row
    4544:	69fb      	ldr	r3, [r7, #28]
    4546:	2280      	movs	r2, #128	; 0x80
    4548:	0212      	lsls	r2, r2, #8
    454a:	4694      	mov	ip, r2
    454c:	4463      	add	r3, ip
    454e:	2213      	movs	r2, #19
    4550:	18bc      	adds	r4, r7, r2
    4552:	0018      	movs	r0, r3
    4554:	4b35      	ldr	r3, [pc, #212]	; (462c <upgradeFW+0x130>)
    4556:	4798      	blx	r3
    4558:	0003      	movs	r3, r0
    455a:	7023      	strb	r3, [r4, #0]
		} while (error_code == STATUS_BUSY);
    455c:	2313      	movs	r3, #19
    455e:	18fb      	adds	r3, r7, r3
    4560:	781b      	ldrb	r3, [r3, #0]
    4562:	2b05      	cmp	r3, #5
    4564:	d0ee      	beq.n	4544 <upgradeFW+0x48>
		for (int i = 0; i < 4; i++) {
    4566:	2300      	movs	r3, #0
    4568:	61bb      	str	r3, [r7, #24]
    456a:	e028      	b.n	45be <upgradeFW+0xc2>
			// Read 64B of flash
			uint32_t thisFlashAddr = flash_fw_addr + addr_i + i*NVMCTRL_PAGE_SIZE;
    456c:	697a      	ldr	r2, [r7, #20]
    456e:	69fb      	ldr	r3, [r7, #28]
    4570:	18d3      	adds	r3, r2, r3
    4572:	69ba      	ldr	r2, [r7, #24]
    4574:	0192      	lsls	r2, r2, #6
    4576:	189b      	adds	r3, r3, r2
    4578:	60fb      	str	r3, [r7, #12]
			at25dfx_chip_read_buffer(&at25dfx_chip, thisFlashAddr, read_buffer, NVMCTRL_PAGE_SIZE);
    457a:	4a2d      	ldr	r2, [pc, #180]	; (4630 <upgradeFW+0x134>)
    457c:	68f9      	ldr	r1, [r7, #12]
    457e:	4826      	ldr	r0, [pc, #152]	; (4618 <upgradeFW+0x11c>)
    4580:	2340      	movs	r3, #64	; 0x40
    4582:	4c2c      	ldr	r4, [pc, #176]	; (4634 <upgradeFW+0x138>)
    4584:	47a0      	blx	r4
			uint32_t thisNVMAddr = APP_START_ADDRESS + addr_i + i*NVMCTRL_PAGE_SIZE;
    4586:	69bb      	ldr	r3, [r7, #24]
    4588:	019b      	lsls	r3, r3, #6
    458a:	001a      	movs	r2, r3
    458c:	69fb      	ldr	r3, [r7, #28]
    458e:	18d3      	adds	r3, r2, r3
    4590:	2280      	movs	r2, #128	; 0x80
    4592:	0212      	lsls	r2, r2, #8
    4594:	4694      	mov	ip, r2
    4596:	4463      	add	r3, ip
    4598:	60bb      	str	r3, [r7, #8]
			do
			{
				error_code = nvm_write_buffer(thisNVMAddr, read_buffer, NVMCTRL_PAGE_SIZE);	// Write 64B to NVM page
    459a:	2313      	movs	r3, #19
    459c:	18fc      	adds	r4, r7, r3
    459e:	4924      	ldr	r1, [pc, #144]	; (4630 <upgradeFW+0x134>)
    45a0:	68bb      	ldr	r3, [r7, #8]
    45a2:	2240      	movs	r2, #64	; 0x40
    45a4:	0018      	movs	r0, r3
    45a6:	4b24      	ldr	r3, [pc, #144]	; (4638 <upgradeFW+0x13c>)
    45a8:	4798      	blx	r3
    45aa:	0003      	movs	r3, r0
    45ac:	7023      	strb	r3, [r4, #0]
			} while (error_code == STATUS_BUSY);
    45ae:	2313      	movs	r3, #19
    45b0:	18fb      	adds	r3, r7, r3
    45b2:	781b      	ldrb	r3, [r3, #0]
    45b4:	2b05      	cmp	r3, #5
    45b6:	d0f0      	beq.n	459a <upgradeFW+0x9e>
		for (int i = 0; i < 4; i++) {
    45b8:	69bb      	ldr	r3, [r7, #24]
    45ba:	3301      	adds	r3, #1
    45bc:	61bb      	str	r3, [r7, #24]
    45be:	69bb      	ldr	r3, [r7, #24]
    45c0:	2b03      	cmp	r3, #3
    45c2:	ddd3      	ble.n	456c <upgradeFW+0x70>
		}
		
		// increment addr_i
		addr_i += 256;
    45c4:	69fb      	ldr	r3, [r7, #28]
    45c6:	3301      	adds	r3, #1
    45c8:	33ff      	adds	r3, #255	; 0xff
    45ca:	61fb      	str	r3, [r7, #28]
	while (APP_START_ADDRESS + addr_i < 0x40000) {	
    45cc:	69fb      	ldr	r3, [r7, #28]
    45ce:	2280      	movs	r2, #128	; 0x80
    45d0:	0212      	lsls	r2, r2, #8
    45d2:	4694      	mov	ip, r2
    45d4:	4463      	add	r3, ip
    45d6:	4a19      	ldr	r2, [pc, #100]	; (463c <upgradeFW+0x140>)
    45d8:	4293      	cmp	r3, r2
    45da:	d9b3      	bls.n	4544 <upgradeFW+0x48>
		//printf("addr_i: %x\r\n", addr_i);
	}
	
	//------------------------
	// enter low power mode.	
	at25dfx_chip_sleep(&at25dfx_chip);
    45dc:	4b0e      	ldr	r3, [pc, #56]	; (4618 <upgradeFW+0x11c>)
    45de:	0018      	movs	r0, r3
    45e0:	4b17      	ldr	r3, [pc, #92]	; (4640 <upgradeFW+0x144>)
    45e2:	4798      	blx	r3
	// writing done. Update the flags and reset
	thisFW.executing_image = thisFW.downloaded_image;
    45e4:	003b      	movs	r3, r7
    45e6:	795a      	ldrb	r2, [r3, #5]
    45e8:	003b      	movs	r3, r7
    45ea:	711a      	strb	r2, [r3, #4]
	thisFW.writenew_image = 0;
    45ec:	003b      	movs	r3, r7
    45ee:	2200      	movs	r2, #0
    45f0:	719a      	strb	r2, [r3, #6]
	writeFWStat(thisFW);
    45f2:	003b      	movs	r3, r7
    45f4:	6818      	ldr	r0, [r3, #0]
    45f6:	6859      	ldr	r1, [r3, #4]
    45f8:	4b12      	ldr	r3, [pc, #72]	; (4644 <upgradeFW+0x148>)
    45fa:	4798      	blx	r3
	printf("Upgrade complete. Resetting device.\n");
    45fc:	4b12      	ldr	r3, [pc, #72]	; (4648 <upgradeFW+0x14c>)
    45fe:	0018      	movs	r0, r3
    4600:	4b09      	ldr	r3, [pc, #36]	; (4628 <upgradeFW+0x12c>)
    4602:	4798      	blx	r3
	system_reset();
    4604:	4b11      	ldr	r3, [pc, #68]	; (464c <upgradeFW+0x150>)
    4606:	4798      	blx	r3
}
    4608:	46bd      	mov	sp, r7
    460a:	b009      	add	sp, #36	; 0x24
    460c:	bd90      	pop	{r4, r7, pc}
    460e:	46c0      	nop			; (mov r8, r8)
    4610:	00005c94 	.word	0x00005c94
    4614:	00004a19 	.word	0x00004a19
    4618:	20000178 	.word	0x20000178
    461c:	00000785 	.word	0x00000785
    4620:	00000595 	.word	0x00000595
    4624:	00005cb8 	.word	0x00005cb8
    4628:	00004b0d 	.word	0x00004b0d
    462c:	00001b29 	.word	0x00001b29
    4630:	200000d4 	.word	0x200000d4
    4634:	00000641 	.word	0x00000641
    4638:	000019dd 	.word	0x000019dd
    463c:	0003ffff 	.word	0x0003ffff
    4640:	000006f9 	.word	0x000006f9
    4644:	0000443d 	.word	0x0000443d
    4648:	00005ce8 	.word	0x00005ce8
    464c:	00003e95 	.word	0x00003e95

00004650 <configure_nvm>:
	//printf("Flash write complete.\n");
	//system_reset();
}

static void configure_nvm()
{
    4650:	b580      	push	{r7, lr}
    4652:	b082      	sub	sp, #8
    4654:	af00      	add	r7, sp, #0
	struct nvm_config config;
	nvm_get_config_defaults(&config);
    4656:	003b      	movs	r3, r7
    4658:	0018      	movs	r0, r3
    465a:	4b06      	ldr	r3, [pc, #24]	; (4674 <configure_nvm+0x24>)
    465c:	4798      	blx	r3
	config.manual_page_write = false;
    465e:	003b      	movs	r3, r7
    4660:	2200      	movs	r2, #0
    4662:	705a      	strb	r2, [r3, #1]
	nvm_set_config(&config);
    4664:	003b      	movs	r3, r7
    4666:	0018      	movs	r0, r3
    4668:	4b03      	ldr	r3, [pc, #12]	; (4678 <configure_nvm+0x28>)
    466a:	4798      	blx	r3
}
    466c:	46c0      	nop			; (mov r8, r8)
    466e:	46bd      	mov	sp, r7
    4670:	b002      	add	sp, #8
    4672:	bd80      	pop	{r7, pc}
    4674:	00004065 	.word	0x00004065
    4678:	000017ed 	.word	0x000017ed

0000467c <configure_boot_button>:

static void configure_boot_button()
{
    467c:	b580      	push	{r7, lr}
    467e:	b082      	sub	sp, #8
    4680:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    4682:	1d3b      	adds	r3, r7, #4
    4684:	0018      	movs	r0, r3
    4686:	4b07      	ldr	r3, [pc, #28]	; (46a4 <configure_boot_button+0x28>)
    4688:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_INPUT;
    468a:	1d3b      	adds	r3, r7, #4
    468c:	2200      	movs	r2, #0
    468e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(BOOT_PIN, &pin_conf);
    4690:	1d3b      	adds	r3, r7, #4
    4692:	0019      	movs	r1, r3
    4694:	2036      	movs	r0, #54	; 0x36
    4696:	4b04      	ldr	r3, [pc, #16]	; (46a8 <configure_boot_button+0x2c>)
    4698:	4798      	blx	r3
}
    469a:	46c0      	nop			; (mov r8, r8)
    469c:	46bd      	mov	sp, r7
    469e:	b002      	add	sp, #8
    46a0:	bd80      	pop	{r7, pc}
    46a2:	46c0      	nop			; (mov r8, r8)
    46a4:	00003dd9 	.word	0x00003dd9
    46a8:	00002fc1 	.word	0x00002fc1

000046ac <init_drivers>:

static void init_drivers()
{
    46ac:	b580      	push	{r7, lr}
    46ae:	af00      	add	r7, sp, #0
	delay_init();
    46b0:	4b05      	ldr	r3, [pc, #20]	; (46c8 <init_drivers+0x1c>)
    46b2:	4798      	blx	r3
	configure_console();
    46b4:	4b05      	ldr	r3, [pc, #20]	; (46cc <init_drivers+0x20>)
    46b6:	4798      	blx	r3
	configure_nvm();
    46b8:	4b05      	ldr	r3, [pc, #20]	; (46d0 <init_drivers+0x24>)
    46ba:	4798      	blx	r3
	configure_spi_flash();
    46bc:	4b05      	ldr	r3, [pc, #20]	; (46d4 <init_drivers+0x28>)
    46be:	4798      	blx	r3
}
    46c0:	46c0      	nop			; (mov r8, r8)
    46c2:	46bd      	mov	sp, r7
    46c4:	bd80      	pop	{r7, pc}
    46c6:	46c0      	nop			; (mov r8, r8)
    46c8:	00001c05 	.word	0x00001c05
    46cc:	00004301 	.word	0x00004301
    46d0:	00004651 	.word	0x00004651
    46d4:	00004375 	.word	0x00004375

000046d8 <main>:


int main (void)
{
    46d8:	b580      	push	{r7, lr}
    46da:	b086      	sub	sp, #24
    46dc:	af00      	add	r7, sp, #0
	system_init();
    46de:	4b48      	ldr	r3, [pc, #288]	; (4800 <main+0x128>)
    46e0:	4798      	blx	r3
	system_interrupt_enable_global();
    46e2:	4b48      	ldr	r3, [pc, #288]	; (4804 <main+0x12c>)
    46e4:	4798      	blx	r3
	configure_boot_button();
    46e6:	4b48      	ldr	r3, [pc, #288]	; (4808 <main+0x130>)
    46e8:	4798      	blx	r3
	// default boot params. Needed so that linker doesn't optimize it out.
	uint8_t* t = params; 
    46ea:	4b48      	ldr	r3, [pc, #288]	; (480c <main+0x134>)
    46ec:	613b      	str	r3, [r7, #16]
	
	void (*app_code_entry)(void);
	uint16_t n=0; 
    46ee:	2316      	movs	r3, #22
    46f0:	18fb      	adds	r3, r7, r3
    46f2:	2200      	movs	r2, #0
    46f4:	801a      	strh	r2, [r3, #0]
	uint8_t remain_in_boot = 0;
    46f6:	2315      	movs	r3, #21
    46f8:	18fb      	adds	r3, r7, r3
    46fa:	2200      	movs	r2, #0
    46fc:	701a      	strb	r2, [r3, #0]
	//check if button is pressed to lock in boot
	while(n++ < 1000)
    46fe:	e010      	b.n	4722 <main+0x4a>
	{
		if(!port_pin_get_input_level(BOOT_PIN))
    4700:	2036      	movs	r0, #54	; 0x36
    4702:	4b43      	ldr	r3, [pc, #268]	; (4810 <main+0x138>)
    4704:	4798      	blx	r3
    4706:	0003      	movs	r3, r0
    4708:	001a      	movs	r2, r3
    470a:	2301      	movs	r3, #1
    470c:	4053      	eors	r3, r2
    470e:	b2db      	uxtb	r3, r3
    4710:	2b00      	cmp	r3, #0
    4712:	d006      	beq.n	4722 <main+0x4a>
		{
			remain_in_boot = 1;
    4714:	2315      	movs	r3, #21
    4716:	18fb      	adds	r3, r7, r3
    4718:	2201      	movs	r2, #1
    471a:	701a      	strb	r2, [r3, #0]
			init_drivers();
    471c:	4b3d      	ldr	r3, [pc, #244]	; (4814 <main+0x13c>)
    471e:	4798      	blx	r3
			break;
    4720:	e009      	b.n	4736 <main+0x5e>
	while(n++ < 1000)
    4722:	2316      	movs	r3, #22
    4724:	18fb      	adds	r3, r7, r3
    4726:	881b      	ldrh	r3, [r3, #0]
    4728:	2216      	movs	r2, #22
    472a:	18ba      	adds	r2, r7, r2
    472c:	1c59      	adds	r1, r3, #1
    472e:	8011      	strh	r1, [r2, #0]
    4730:	4a39      	ldr	r2, [pc, #228]	; (4818 <main+0x140>)
    4732:	4293      	cmp	r3, r2
    4734:	d9e4      	bls.n	4700 <main+0x28>
		}
	}
	while(1) 
	{
		if(!remain_in_boot)
    4736:	2315      	movs	r3, #21
    4738:	18fb      	adds	r3, r7, r3
    473a:	781b      	ldrb	r3, [r3, #0]
    473c:	2b00      	cmp	r3, #0
    473e:	d14e      	bne.n	47de <main+0x106>
		{
			// check for firmware download requested
			Firmware_Status_t thisFW = getFWStat();
    4740:	1d3b      	adds	r3, r7, #4
    4742:	0018      	movs	r0, r3
    4744:	4b35      	ldr	r3, [pc, #212]	; (481c <main+0x144>)
    4746:	4798      	blx	r3
			//thisFW.downloaded_image = 0;
			thisFW.writenew_image = 0;		// Override writenew_image cause we're testing goddamnit
    4748:	1d3b      	adds	r3, r7, #4
    474a:	2200      	movs	r2, #0
    474c:	719a      	strb	r2, [r3, #6]
			if(thisFW.writenew_image)
    474e:	1d3b      	adds	r3, r7, #4
    4750:	799b      	ldrb	r3, [r3, #6]
    4752:	2b00      	cmp	r3, #0
    4754:	d006      	beq.n	4764 <main+0x8c>
			{
				init_drivers();
    4756:	4b2f      	ldr	r3, [pc, #188]	; (4814 <main+0x13c>)
    4758:	4798      	blx	r3
				upgradeFW(thisFW);
    475a:	1d3b      	adds	r3, r7, #4
    475c:	6818      	ldr	r0, [r3, #0]
    475e:	6859      	ldr	r1, [r3, #4]
    4760:	4b2f      	ldr	r3, [pc, #188]	; (4820 <main+0x148>)
    4762:	4798      	blx	r3
			}
			
			// vector table rebasing
			SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    4764:	4b2f      	ldr	r3, [pc, #188]	; (4824 <main+0x14c>)
    4766:	2280      	movs	r2, #128	; 0x80
    4768:	0212      	lsls	r2, r2, #8
    476a:	609a      	str	r2, [r3, #8]

			// jump to reset handler
			app_code_entry =  (void(*)(void))(*(uint32_t*)(APP_START_ADDRESS+4));
    476c:	4b2e      	ldr	r3, [pc, #184]	; (4828 <main+0x150>)
    476e:	681b      	ldr	r3, [r3, #0]
    4770:	60fb      	str	r3, [r7, #12]
			if (app_code_entry == 0x0) {		// Empty app space
    4772:	68fb      	ldr	r3, [r7, #12]
    4774:	2b00      	cmp	r3, #0
    4776:	d10c      	bne.n	4792 <main+0xba>
				init_drivers();
    4778:	4b26      	ldr	r3, [pc, #152]	; (4814 <main+0x13c>)
    477a:	4798      	blx	r3
				thisFW.downloaded_image = 0;
    477c:	1d3b      	adds	r3, r7, #4
    477e:	2200      	movs	r2, #0
    4780:	715a      	strb	r2, [r3, #5]
				thisFW.writenew_image = 1;
    4782:	1d3b      	adds	r3, r7, #4
    4784:	2201      	movs	r2, #1
    4786:	719a      	strb	r2, [r3, #6]
				upgradeFW(thisFW);
    4788:	1d3b      	adds	r3, r7, #4
    478a:	6818      	ldr	r0, [r3, #0]
    478c:	6859      	ldr	r1, [r3, #4]
    478e:	4b24      	ldr	r3, [pc, #144]	; (4820 <main+0x148>)
    4790:	4798      	blx	r3
			}
			if (system_get_reset_cause() == SYSTEM_RESET_CAUSE_WDT) {
    4792:	4b26      	ldr	r3, [pc, #152]	; (482c <main+0x154>)
    4794:	4798      	blx	r3
    4796:	0003      	movs	r3, r0
    4798:	2b20      	cmp	r3, #32
    479a:	d11e      	bne.n	47da <main+0x102>
				thisFW.reset_count += 1;
    479c:	1d3b      	adds	r3, r7, #4
    479e:	79db      	ldrb	r3, [r3, #7]
    47a0:	3301      	adds	r3, #1
    47a2:	b2da      	uxtb	r2, r3
    47a4:	1d3b      	adds	r3, r7, #4
    47a6:	71da      	strb	r2, [r3, #7]
				writeFWStat(thisFW);
    47a8:	1d3b      	adds	r3, r7, #4
    47aa:	6818      	ldr	r0, [r3, #0]
    47ac:	6859      	ldr	r1, [r3, #4]
    47ae:	4b20      	ldr	r3, [pc, #128]	; (4830 <main+0x158>)
    47b0:	4798      	blx	r3
				if (thisFW.reset_count > 10) {
    47b2:	1d3b      	adds	r3, r7, #4
    47b4:	79db      	ldrb	r3, [r3, #7]
    47b6:	2b0a      	cmp	r3, #10
    47b8:	d90f      	bls.n	47da <main+0x102>
					thisFW.reset_count = 0;
    47ba:	1d3b      	adds	r3, r7, #4
    47bc:	2200      	movs	r2, #0
    47be:	71da      	strb	r2, [r3, #7]
					init_drivers();
    47c0:	4b14      	ldr	r3, [pc, #80]	; (4814 <main+0x13c>)
    47c2:	4798      	blx	r3
					thisFW.downloaded_image = 0;
    47c4:	1d3b      	adds	r3, r7, #4
    47c6:	2200      	movs	r2, #0
    47c8:	715a      	strb	r2, [r3, #5]
					thisFW.writenew_image = 1;
    47ca:	1d3b      	adds	r3, r7, #4
    47cc:	2201      	movs	r2, #1
    47ce:	719a      	strb	r2, [r3, #6]
					upgradeFW(thisFW);
    47d0:	1d3b      	adds	r3, r7, #4
    47d2:	6818      	ldr	r0, [r3, #0]
    47d4:	6859      	ldr	r1, [r3, #4]
    47d6:	4b12      	ldr	r3, [pc, #72]	; (4820 <main+0x148>)
    47d8:	4798      	blx	r3
				} 
			}
			app_code_entry();
    47da:	68fb      	ldr	r3, [r7, #12]
    47dc:	4798      	blx	r3
		}
		
		printf("in boot\n\r");
    47de:	4b15      	ldr	r3, [pc, #84]	; (4834 <main+0x15c>)
    47e0:	0018      	movs	r0, r3
    47e2:	4b15      	ldr	r3, [pc, #84]	; (4838 <main+0x160>)
    47e4:	4798      	blx	r3
		delay_ms(500);
    47e6:	23fa      	movs	r3, #250	; 0xfa
    47e8:	005b      	lsls	r3, r3, #1
    47ea:	0018      	movs	r0, r3
    47ec:	4b13      	ldr	r3, [pc, #76]	; (483c <main+0x164>)
    47ee:	4798      	blx	r3
    47f0:	2315      	movs	r3, #21
    47f2:	18fb      	adds	r3, r7, r3
    47f4:	2215      	movs	r2, #21
    47f6:	18ba      	adds	r2, r7, r2
    47f8:	7812      	ldrb	r2, [r2, #0]
    47fa:	701a      	strb	r2, [r3, #0]
		if(!remain_in_boot)
    47fc:	e79b      	b.n	4736 <main+0x5e>
    47fe:	46c0      	nop			; (mov r8, r8)
    4800:	00003b71 	.word	0x00003b71
    4804:	00003ec1 	.word	0x00003ec1
    4808:	0000467d 	.word	0x0000467d
    480c:	00005e04 	.word	0x00005e04
    4810:	00003dfd 	.word	0x00003dfd
    4814:	000046ad 	.word	0x000046ad
    4818:	000003e7 	.word	0x000003e7
    481c:	00004415 	.word	0x00004415
    4820:	000044fd 	.word	0x000044fd
    4824:	e000ed00 	.word	0xe000ed00
    4828:	00008004 	.word	0x00008004
    482c:	00003ea9 	.word	0x00003ea9
    4830:	0000443d 	.word	0x0000443d
    4834:	00005d40 	.word	0x00005d40
    4838:	00004a19 	.word	0x00004a19
    483c:	00001c5d 	.word	0x00001c5d

00004840 <__udivsi3>:
    4840:	2200      	movs	r2, #0
    4842:	0843      	lsrs	r3, r0, #1
    4844:	428b      	cmp	r3, r1
    4846:	d374      	bcc.n	4932 <__udivsi3+0xf2>
    4848:	0903      	lsrs	r3, r0, #4
    484a:	428b      	cmp	r3, r1
    484c:	d35f      	bcc.n	490e <__udivsi3+0xce>
    484e:	0a03      	lsrs	r3, r0, #8
    4850:	428b      	cmp	r3, r1
    4852:	d344      	bcc.n	48de <__udivsi3+0x9e>
    4854:	0b03      	lsrs	r3, r0, #12
    4856:	428b      	cmp	r3, r1
    4858:	d328      	bcc.n	48ac <__udivsi3+0x6c>
    485a:	0c03      	lsrs	r3, r0, #16
    485c:	428b      	cmp	r3, r1
    485e:	d30d      	bcc.n	487c <__udivsi3+0x3c>
    4860:	22ff      	movs	r2, #255	; 0xff
    4862:	0209      	lsls	r1, r1, #8
    4864:	ba12      	rev	r2, r2
    4866:	0c03      	lsrs	r3, r0, #16
    4868:	428b      	cmp	r3, r1
    486a:	d302      	bcc.n	4872 <__udivsi3+0x32>
    486c:	1212      	asrs	r2, r2, #8
    486e:	0209      	lsls	r1, r1, #8
    4870:	d065      	beq.n	493e <__udivsi3+0xfe>
    4872:	0b03      	lsrs	r3, r0, #12
    4874:	428b      	cmp	r3, r1
    4876:	d319      	bcc.n	48ac <__udivsi3+0x6c>
    4878:	e000      	b.n	487c <__udivsi3+0x3c>
    487a:	0a09      	lsrs	r1, r1, #8
    487c:	0bc3      	lsrs	r3, r0, #15
    487e:	428b      	cmp	r3, r1
    4880:	d301      	bcc.n	4886 <__udivsi3+0x46>
    4882:	03cb      	lsls	r3, r1, #15
    4884:	1ac0      	subs	r0, r0, r3
    4886:	4152      	adcs	r2, r2
    4888:	0b83      	lsrs	r3, r0, #14
    488a:	428b      	cmp	r3, r1
    488c:	d301      	bcc.n	4892 <__udivsi3+0x52>
    488e:	038b      	lsls	r3, r1, #14
    4890:	1ac0      	subs	r0, r0, r3
    4892:	4152      	adcs	r2, r2
    4894:	0b43      	lsrs	r3, r0, #13
    4896:	428b      	cmp	r3, r1
    4898:	d301      	bcc.n	489e <__udivsi3+0x5e>
    489a:	034b      	lsls	r3, r1, #13
    489c:	1ac0      	subs	r0, r0, r3
    489e:	4152      	adcs	r2, r2
    48a0:	0b03      	lsrs	r3, r0, #12
    48a2:	428b      	cmp	r3, r1
    48a4:	d301      	bcc.n	48aa <__udivsi3+0x6a>
    48a6:	030b      	lsls	r3, r1, #12
    48a8:	1ac0      	subs	r0, r0, r3
    48aa:	4152      	adcs	r2, r2
    48ac:	0ac3      	lsrs	r3, r0, #11
    48ae:	428b      	cmp	r3, r1
    48b0:	d301      	bcc.n	48b6 <__udivsi3+0x76>
    48b2:	02cb      	lsls	r3, r1, #11
    48b4:	1ac0      	subs	r0, r0, r3
    48b6:	4152      	adcs	r2, r2
    48b8:	0a83      	lsrs	r3, r0, #10
    48ba:	428b      	cmp	r3, r1
    48bc:	d301      	bcc.n	48c2 <__udivsi3+0x82>
    48be:	028b      	lsls	r3, r1, #10
    48c0:	1ac0      	subs	r0, r0, r3
    48c2:	4152      	adcs	r2, r2
    48c4:	0a43      	lsrs	r3, r0, #9
    48c6:	428b      	cmp	r3, r1
    48c8:	d301      	bcc.n	48ce <__udivsi3+0x8e>
    48ca:	024b      	lsls	r3, r1, #9
    48cc:	1ac0      	subs	r0, r0, r3
    48ce:	4152      	adcs	r2, r2
    48d0:	0a03      	lsrs	r3, r0, #8
    48d2:	428b      	cmp	r3, r1
    48d4:	d301      	bcc.n	48da <__udivsi3+0x9a>
    48d6:	020b      	lsls	r3, r1, #8
    48d8:	1ac0      	subs	r0, r0, r3
    48da:	4152      	adcs	r2, r2
    48dc:	d2cd      	bcs.n	487a <__udivsi3+0x3a>
    48de:	09c3      	lsrs	r3, r0, #7
    48e0:	428b      	cmp	r3, r1
    48e2:	d301      	bcc.n	48e8 <__udivsi3+0xa8>
    48e4:	01cb      	lsls	r3, r1, #7
    48e6:	1ac0      	subs	r0, r0, r3
    48e8:	4152      	adcs	r2, r2
    48ea:	0983      	lsrs	r3, r0, #6
    48ec:	428b      	cmp	r3, r1
    48ee:	d301      	bcc.n	48f4 <__udivsi3+0xb4>
    48f0:	018b      	lsls	r3, r1, #6
    48f2:	1ac0      	subs	r0, r0, r3
    48f4:	4152      	adcs	r2, r2
    48f6:	0943      	lsrs	r3, r0, #5
    48f8:	428b      	cmp	r3, r1
    48fa:	d301      	bcc.n	4900 <__udivsi3+0xc0>
    48fc:	014b      	lsls	r3, r1, #5
    48fe:	1ac0      	subs	r0, r0, r3
    4900:	4152      	adcs	r2, r2
    4902:	0903      	lsrs	r3, r0, #4
    4904:	428b      	cmp	r3, r1
    4906:	d301      	bcc.n	490c <__udivsi3+0xcc>
    4908:	010b      	lsls	r3, r1, #4
    490a:	1ac0      	subs	r0, r0, r3
    490c:	4152      	adcs	r2, r2
    490e:	08c3      	lsrs	r3, r0, #3
    4910:	428b      	cmp	r3, r1
    4912:	d301      	bcc.n	4918 <__udivsi3+0xd8>
    4914:	00cb      	lsls	r3, r1, #3
    4916:	1ac0      	subs	r0, r0, r3
    4918:	4152      	adcs	r2, r2
    491a:	0883      	lsrs	r3, r0, #2
    491c:	428b      	cmp	r3, r1
    491e:	d301      	bcc.n	4924 <__udivsi3+0xe4>
    4920:	008b      	lsls	r3, r1, #2
    4922:	1ac0      	subs	r0, r0, r3
    4924:	4152      	adcs	r2, r2
    4926:	0843      	lsrs	r3, r0, #1
    4928:	428b      	cmp	r3, r1
    492a:	d301      	bcc.n	4930 <__udivsi3+0xf0>
    492c:	004b      	lsls	r3, r1, #1
    492e:	1ac0      	subs	r0, r0, r3
    4930:	4152      	adcs	r2, r2
    4932:	1a41      	subs	r1, r0, r1
    4934:	d200      	bcs.n	4938 <__udivsi3+0xf8>
    4936:	4601      	mov	r1, r0
    4938:	4152      	adcs	r2, r2
    493a:	4610      	mov	r0, r2
    493c:	4770      	bx	lr
    493e:	e7ff      	b.n	4940 <__udivsi3+0x100>
    4940:	b501      	push	{r0, lr}
    4942:	2000      	movs	r0, #0
    4944:	f000 f806 	bl	4954 <__aeabi_idiv0>
    4948:	bd02      	pop	{r1, pc}
    494a:	46c0      	nop			; (mov r8, r8)

0000494c <__aeabi_uidivmod>:
    494c:	2900      	cmp	r1, #0
    494e:	d0f7      	beq.n	4940 <__udivsi3+0x100>
    4950:	e776      	b.n	4840 <__udivsi3>
    4952:	4770      	bx	lr

00004954 <__aeabi_idiv0>:
    4954:	4770      	bx	lr
    4956:	46c0      	nop			; (mov r8, r8)

00004958 <__aeabi_lmul>:
    4958:	b5f0      	push	{r4, r5, r6, r7, lr}
    495a:	46ce      	mov	lr, r9
    495c:	4647      	mov	r7, r8
    495e:	0415      	lsls	r5, r2, #16
    4960:	0c2d      	lsrs	r5, r5, #16
    4962:	002e      	movs	r6, r5
    4964:	b580      	push	{r7, lr}
    4966:	0407      	lsls	r7, r0, #16
    4968:	0c14      	lsrs	r4, r2, #16
    496a:	0c3f      	lsrs	r7, r7, #16
    496c:	4699      	mov	r9, r3
    496e:	0c03      	lsrs	r3, r0, #16
    4970:	437e      	muls	r6, r7
    4972:	435d      	muls	r5, r3
    4974:	4367      	muls	r7, r4
    4976:	4363      	muls	r3, r4
    4978:	197f      	adds	r7, r7, r5
    497a:	0c34      	lsrs	r4, r6, #16
    497c:	19e4      	adds	r4, r4, r7
    497e:	469c      	mov	ip, r3
    4980:	42a5      	cmp	r5, r4
    4982:	d903      	bls.n	498c <__aeabi_lmul+0x34>
    4984:	2380      	movs	r3, #128	; 0x80
    4986:	025b      	lsls	r3, r3, #9
    4988:	4698      	mov	r8, r3
    498a:	44c4      	add	ip, r8
    498c:	464b      	mov	r3, r9
    498e:	4351      	muls	r1, r2
    4990:	4343      	muls	r3, r0
    4992:	0436      	lsls	r6, r6, #16
    4994:	0c36      	lsrs	r6, r6, #16
    4996:	0c25      	lsrs	r5, r4, #16
    4998:	0424      	lsls	r4, r4, #16
    499a:	4465      	add	r5, ip
    499c:	19a4      	adds	r4, r4, r6
    499e:	1859      	adds	r1, r3, r1
    49a0:	1949      	adds	r1, r1, r5
    49a2:	0020      	movs	r0, r4
    49a4:	bc0c      	pop	{r2, r3}
    49a6:	4690      	mov	r8, r2
    49a8:	4699      	mov	r9, r3
    49aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000049ac <__libc_init_array>:
    49ac:	b570      	push	{r4, r5, r6, lr}
    49ae:	2600      	movs	r6, #0
    49b0:	4d0c      	ldr	r5, [pc, #48]	; (49e4 <__libc_init_array+0x38>)
    49b2:	4c0d      	ldr	r4, [pc, #52]	; (49e8 <__libc_init_array+0x3c>)
    49b4:	1b64      	subs	r4, r4, r5
    49b6:	10a4      	asrs	r4, r4, #2
    49b8:	42a6      	cmp	r6, r4
    49ba:	d109      	bne.n	49d0 <__libc_init_array+0x24>
    49bc:	2600      	movs	r6, #0
    49be:	f001 fa11 	bl	5de4 <_init>
    49c2:	4d0a      	ldr	r5, [pc, #40]	; (49ec <__libc_init_array+0x40>)
    49c4:	4c0a      	ldr	r4, [pc, #40]	; (49f0 <__libc_init_array+0x44>)
    49c6:	1b64      	subs	r4, r4, r5
    49c8:	10a4      	asrs	r4, r4, #2
    49ca:	42a6      	cmp	r6, r4
    49cc:	d105      	bne.n	49da <__libc_init_array+0x2e>
    49ce:	bd70      	pop	{r4, r5, r6, pc}
    49d0:	00b3      	lsls	r3, r6, #2
    49d2:	58eb      	ldr	r3, [r5, r3]
    49d4:	4798      	blx	r3
    49d6:	3601      	adds	r6, #1
    49d8:	e7ee      	b.n	49b8 <__libc_init_array+0xc>
    49da:	00b3      	lsls	r3, r6, #2
    49dc:	58eb      	ldr	r3, [r5, r3]
    49de:	4798      	blx	r3
    49e0:	3601      	adds	r6, #1
    49e2:	e7f2      	b.n	49ca <__libc_init_array+0x1e>
    49e4:	00005df0 	.word	0x00005df0
    49e8:	00005df0 	.word	0x00005df0
    49ec:	00005df0 	.word	0x00005df0
    49f0:	00005df4 	.word	0x00005df4

000049f4 <memcpy>:
    49f4:	2300      	movs	r3, #0
    49f6:	b510      	push	{r4, lr}
    49f8:	429a      	cmp	r2, r3
    49fa:	d100      	bne.n	49fe <memcpy+0xa>
    49fc:	bd10      	pop	{r4, pc}
    49fe:	5ccc      	ldrb	r4, [r1, r3]
    4a00:	54c4      	strb	r4, [r0, r3]
    4a02:	3301      	adds	r3, #1
    4a04:	e7f8      	b.n	49f8 <memcpy+0x4>

00004a06 <memset>:
    4a06:	0003      	movs	r3, r0
    4a08:	1882      	adds	r2, r0, r2
    4a0a:	4293      	cmp	r3, r2
    4a0c:	d100      	bne.n	4a10 <memset+0xa>
    4a0e:	4770      	bx	lr
    4a10:	7019      	strb	r1, [r3, #0]
    4a12:	3301      	adds	r3, #1
    4a14:	e7f9      	b.n	4a0a <memset+0x4>
	...

00004a18 <iprintf>:
    4a18:	b40f      	push	{r0, r1, r2, r3}
    4a1a:	4b0b      	ldr	r3, [pc, #44]	; (4a48 <iprintf+0x30>)
    4a1c:	b513      	push	{r0, r1, r4, lr}
    4a1e:	681c      	ldr	r4, [r3, #0]
    4a20:	2c00      	cmp	r4, #0
    4a22:	d005      	beq.n	4a30 <iprintf+0x18>
    4a24:	69a3      	ldr	r3, [r4, #24]
    4a26:	2b00      	cmp	r3, #0
    4a28:	d102      	bne.n	4a30 <iprintf+0x18>
    4a2a:	0020      	movs	r0, r4
    4a2c:	f000 faf2 	bl	5014 <__sinit>
    4a30:	ab05      	add	r3, sp, #20
    4a32:	9a04      	ldr	r2, [sp, #16]
    4a34:	68a1      	ldr	r1, [r4, #8]
    4a36:	0020      	movs	r0, r4
    4a38:	9301      	str	r3, [sp, #4]
    4a3a:	f000 fcc1 	bl	53c0 <_vfiprintf_r>
    4a3e:	bc16      	pop	{r1, r2, r4}
    4a40:	bc08      	pop	{r3}
    4a42:	b004      	add	sp, #16
    4a44:	4718      	bx	r3
    4a46:	46c0      	nop			; (mov r8, r8)
    4a48:	2000000c 	.word	0x2000000c

00004a4c <_puts_r>:
    4a4c:	b570      	push	{r4, r5, r6, lr}
    4a4e:	0005      	movs	r5, r0
    4a50:	000e      	movs	r6, r1
    4a52:	2800      	cmp	r0, #0
    4a54:	d004      	beq.n	4a60 <_puts_r+0x14>
    4a56:	6983      	ldr	r3, [r0, #24]
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d101      	bne.n	4a60 <_puts_r+0x14>
    4a5c:	f000 fada 	bl	5014 <__sinit>
    4a60:	69ab      	ldr	r3, [r5, #24]
    4a62:	68ac      	ldr	r4, [r5, #8]
    4a64:	2b00      	cmp	r3, #0
    4a66:	d102      	bne.n	4a6e <_puts_r+0x22>
    4a68:	0028      	movs	r0, r5
    4a6a:	f000 fad3 	bl	5014 <__sinit>
    4a6e:	4b24      	ldr	r3, [pc, #144]	; (4b00 <_puts_r+0xb4>)
    4a70:	429c      	cmp	r4, r3
    4a72:	d10f      	bne.n	4a94 <_puts_r+0x48>
    4a74:	686c      	ldr	r4, [r5, #4]
    4a76:	89a3      	ldrh	r3, [r4, #12]
    4a78:	071b      	lsls	r3, r3, #28
    4a7a:	d502      	bpl.n	4a82 <_puts_r+0x36>
    4a7c:	6923      	ldr	r3, [r4, #16]
    4a7e:	2b00      	cmp	r3, #0
    4a80:	d120      	bne.n	4ac4 <_puts_r+0x78>
    4a82:	0021      	movs	r1, r4
    4a84:	0028      	movs	r0, r5
    4a86:	f000 f957 	bl	4d38 <__swsetup_r>
    4a8a:	2800      	cmp	r0, #0
    4a8c:	d01a      	beq.n	4ac4 <_puts_r+0x78>
    4a8e:	2001      	movs	r0, #1
    4a90:	4240      	negs	r0, r0
    4a92:	bd70      	pop	{r4, r5, r6, pc}
    4a94:	4b1b      	ldr	r3, [pc, #108]	; (4b04 <_puts_r+0xb8>)
    4a96:	429c      	cmp	r4, r3
    4a98:	d101      	bne.n	4a9e <_puts_r+0x52>
    4a9a:	68ac      	ldr	r4, [r5, #8]
    4a9c:	e7eb      	b.n	4a76 <_puts_r+0x2a>
    4a9e:	4b1a      	ldr	r3, [pc, #104]	; (4b08 <_puts_r+0xbc>)
    4aa0:	429c      	cmp	r4, r3
    4aa2:	d1e8      	bne.n	4a76 <_puts_r+0x2a>
    4aa4:	68ec      	ldr	r4, [r5, #12]
    4aa6:	e7e6      	b.n	4a76 <_puts_r+0x2a>
    4aa8:	3b01      	subs	r3, #1
    4aaa:	3601      	adds	r6, #1
    4aac:	60a3      	str	r3, [r4, #8]
    4aae:	2b00      	cmp	r3, #0
    4ab0:	da04      	bge.n	4abc <_puts_r+0x70>
    4ab2:	69a2      	ldr	r2, [r4, #24]
    4ab4:	4293      	cmp	r3, r2
    4ab6:	db16      	blt.n	4ae6 <_puts_r+0x9a>
    4ab8:	290a      	cmp	r1, #10
    4aba:	d014      	beq.n	4ae6 <_puts_r+0x9a>
    4abc:	6823      	ldr	r3, [r4, #0]
    4abe:	1c5a      	adds	r2, r3, #1
    4ac0:	6022      	str	r2, [r4, #0]
    4ac2:	7019      	strb	r1, [r3, #0]
    4ac4:	7831      	ldrb	r1, [r6, #0]
    4ac6:	68a3      	ldr	r3, [r4, #8]
    4ac8:	2900      	cmp	r1, #0
    4aca:	d1ed      	bne.n	4aa8 <_puts_r+0x5c>
    4acc:	3b01      	subs	r3, #1
    4ace:	60a3      	str	r3, [r4, #8]
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	da0f      	bge.n	4af4 <_puts_r+0xa8>
    4ad4:	0022      	movs	r2, r4
    4ad6:	310a      	adds	r1, #10
    4ad8:	0028      	movs	r0, r5
    4ada:	f000 f8d7 	bl	4c8c <__swbuf_r>
    4ade:	1c43      	adds	r3, r0, #1
    4ae0:	d0d5      	beq.n	4a8e <_puts_r+0x42>
    4ae2:	200a      	movs	r0, #10
    4ae4:	e7d5      	b.n	4a92 <_puts_r+0x46>
    4ae6:	0022      	movs	r2, r4
    4ae8:	0028      	movs	r0, r5
    4aea:	f000 f8cf 	bl	4c8c <__swbuf_r>
    4aee:	1c43      	adds	r3, r0, #1
    4af0:	d1e8      	bne.n	4ac4 <_puts_r+0x78>
    4af2:	e7cc      	b.n	4a8e <_puts_r+0x42>
    4af4:	200a      	movs	r0, #10
    4af6:	6823      	ldr	r3, [r4, #0]
    4af8:	1c5a      	adds	r2, r3, #1
    4afa:	6022      	str	r2, [r4, #0]
    4afc:	7018      	strb	r0, [r3, #0]
    4afe:	e7c8      	b.n	4a92 <_puts_r+0x46>
    4b00:	00005d70 	.word	0x00005d70
    4b04:	00005d90 	.word	0x00005d90
    4b08:	00005d50 	.word	0x00005d50

00004b0c <puts>:
    4b0c:	b510      	push	{r4, lr}
    4b0e:	4b03      	ldr	r3, [pc, #12]	; (4b1c <puts+0x10>)
    4b10:	0001      	movs	r1, r0
    4b12:	6818      	ldr	r0, [r3, #0]
    4b14:	f7ff ff9a 	bl	4a4c <_puts_r>
    4b18:	bd10      	pop	{r4, pc}
    4b1a:	46c0      	nop			; (mov r8, r8)
    4b1c:	2000000c 	.word	0x2000000c

00004b20 <setbuf>:
    4b20:	424a      	negs	r2, r1
    4b22:	414a      	adcs	r2, r1
    4b24:	2380      	movs	r3, #128	; 0x80
    4b26:	b510      	push	{r4, lr}
    4b28:	0052      	lsls	r2, r2, #1
    4b2a:	00db      	lsls	r3, r3, #3
    4b2c:	f000 f802 	bl	4b34 <setvbuf>
    4b30:	bd10      	pop	{r4, pc}
	...

00004b34 <setvbuf>:
    4b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b36:	001d      	movs	r5, r3
    4b38:	4b4f      	ldr	r3, [pc, #316]	; (4c78 <setvbuf+0x144>)
    4b3a:	b085      	sub	sp, #20
    4b3c:	681e      	ldr	r6, [r3, #0]
    4b3e:	0004      	movs	r4, r0
    4b40:	000f      	movs	r7, r1
    4b42:	9200      	str	r2, [sp, #0]
    4b44:	2e00      	cmp	r6, #0
    4b46:	d005      	beq.n	4b54 <setvbuf+0x20>
    4b48:	69b3      	ldr	r3, [r6, #24]
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	d102      	bne.n	4b54 <setvbuf+0x20>
    4b4e:	0030      	movs	r0, r6
    4b50:	f000 fa60 	bl	5014 <__sinit>
    4b54:	4b49      	ldr	r3, [pc, #292]	; (4c7c <setvbuf+0x148>)
    4b56:	429c      	cmp	r4, r3
    4b58:	d150      	bne.n	4bfc <setvbuf+0xc8>
    4b5a:	6874      	ldr	r4, [r6, #4]
    4b5c:	9b00      	ldr	r3, [sp, #0]
    4b5e:	2b02      	cmp	r3, #2
    4b60:	d005      	beq.n	4b6e <setvbuf+0x3a>
    4b62:	2b01      	cmp	r3, #1
    4b64:	d900      	bls.n	4b68 <setvbuf+0x34>
    4b66:	e084      	b.n	4c72 <setvbuf+0x13e>
    4b68:	2d00      	cmp	r5, #0
    4b6a:	da00      	bge.n	4b6e <setvbuf+0x3a>
    4b6c:	e081      	b.n	4c72 <setvbuf+0x13e>
    4b6e:	0021      	movs	r1, r4
    4b70:	0030      	movs	r0, r6
    4b72:	f000 f9e1 	bl	4f38 <_fflush_r>
    4b76:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4b78:	2900      	cmp	r1, #0
    4b7a:	d008      	beq.n	4b8e <setvbuf+0x5a>
    4b7c:	0023      	movs	r3, r4
    4b7e:	3344      	adds	r3, #68	; 0x44
    4b80:	4299      	cmp	r1, r3
    4b82:	d002      	beq.n	4b8a <setvbuf+0x56>
    4b84:	0030      	movs	r0, r6
    4b86:	f000 fb4b 	bl	5220 <_free_r>
    4b8a:	2300      	movs	r3, #0
    4b8c:	6363      	str	r3, [r4, #52]	; 0x34
    4b8e:	2300      	movs	r3, #0
    4b90:	61a3      	str	r3, [r4, #24]
    4b92:	6063      	str	r3, [r4, #4]
    4b94:	89a3      	ldrh	r3, [r4, #12]
    4b96:	061b      	lsls	r3, r3, #24
    4b98:	d503      	bpl.n	4ba2 <setvbuf+0x6e>
    4b9a:	6921      	ldr	r1, [r4, #16]
    4b9c:	0030      	movs	r0, r6
    4b9e:	f000 fb3f 	bl	5220 <_free_r>
    4ba2:	89a3      	ldrh	r3, [r4, #12]
    4ba4:	4a36      	ldr	r2, [pc, #216]	; (4c80 <setvbuf+0x14c>)
    4ba6:	4013      	ands	r3, r2
    4ba8:	81a3      	strh	r3, [r4, #12]
    4baa:	9b00      	ldr	r3, [sp, #0]
    4bac:	2b02      	cmp	r3, #2
    4bae:	d05a      	beq.n	4c66 <setvbuf+0x132>
    4bb0:	ab03      	add	r3, sp, #12
    4bb2:	aa02      	add	r2, sp, #8
    4bb4:	0021      	movs	r1, r4
    4bb6:	0030      	movs	r0, r6
    4bb8:	f000 fac2 	bl	5140 <__swhatbuf_r>
    4bbc:	89a3      	ldrh	r3, [r4, #12]
    4bbe:	4318      	orrs	r0, r3
    4bc0:	81a0      	strh	r0, [r4, #12]
    4bc2:	2d00      	cmp	r5, #0
    4bc4:	d124      	bne.n	4c10 <setvbuf+0xdc>
    4bc6:	9d02      	ldr	r5, [sp, #8]
    4bc8:	0028      	movs	r0, r5
    4bca:	f000 fb1f 	bl	520c <malloc>
    4bce:	9501      	str	r5, [sp, #4]
    4bd0:	1e07      	subs	r7, r0, #0
    4bd2:	d142      	bne.n	4c5a <setvbuf+0x126>
    4bd4:	9b02      	ldr	r3, [sp, #8]
    4bd6:	9301      	str	r3, [sp, #4]
    4bd8:	42ab      	cmp	r3, r5
    4bda:	d139      	bne.n	4c50 <setvbuf+0x11c>
    4bdc:	2001      	movs	r0, #1
    4bde:	4240      	negs	r0, r0
    4be0:	2302      	movs	r3, #2
    4be2:	89a2      	ldrh	r2, [r4, #12]
    4be4:	4313      	orrs	r3, r2
    4be6:	81a3      	strh	r3, [r4, #12]
    4be8:	2300      	movs	r3, #0
    4bea:	60a3      	str	r3, [r4, #8]
    4bec:	0023      	movs	r3, r4
    4bee:	3347      	adds	r3, #71	; 0x47
    4bf0:	6023      	str	r3, [r4, #0]
    4bf2:	6123      	str	r3, [r4, #16]
    4bf4:	2301      	movs	r3, #1
    4bf6:	6163      	str	r3, [r4, #20]
    4bf8:	b005      	add	sp, #20
    4bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bfc:	4b21      	ldr	r3, [pc, #132]	; (4c84 <setvbuf+0x150>)
    4bfe:	429c      	cmp	r4, r3
    4c00:	d101      	bne.n	4c06 <setvbuf+0xd2>
    4c02:	68b4      	ldr	r4, [r6, #8]
    4c04:	e7aa      	b.n	4b5c <setvbuf+0x28>
    4c06:	4b20      	ldr	r3, [pc, #128]	; (4c88 <setvbuf+0x154>)
    4c08:	429c      	cmp	r4, r3
    4c0a:	d1a7      	bne.n	4b5c <setvbuf+0x28>
    4c0c:	68f4      	ldr	r4, [r6, #12]
    4c0e:	e7a5      	b.n	4b5c <setvbuf+0x28>
    4c10:	2f00      	cmp	r7, #0
    4c12:	d0d9      	beq.n	4bc8 <setvbuf+0x94>
    4c14:	69b3      	ldr	r3, [r6, #24]
    4c16:	2b00      	cmp	r3, #0
    4c18:	d102      	bne.n	4c20 <setvbuf+0xec>
    4c1a:	0030      	movs	r0, r6
    4c1c:	f000 f9fa 	bl	5014 <__sinit>
    4c20:	9b00      	ldr	r3, [sp, #0]
    4c22:	2b01      	cmp	r3, #1
    4c24:	d103      	bne.n	4c2e <setvbuf+0xfa>
    4c26:	89a3      	ldrh	r3, [r4, #12]
    4c28:	9a00      	ldr	r2, [sp, #0]
    4c2a:	431a      	orrs	r2, r3
    4c2c:	81a2      	strh	r2, [r4, #12]
    4c2e:	2008      	movs	r0, #8
    4c30:	89a3      	ldrh	r3, [r4, #12]
    4c32:	6027      	str	r7, [r4, #0]
    4c34:	6127      	str	r7, [r4, #16]
    4c36:	6165      	str	r5, [r4, #20]
    4c38:	4018      	ands	r0, r3
    4c3a:	d018      	beq.n	4c6e <setvbuf+0x13a>
    4c3c:	2001      	movs	r0, #1
    4c3e:	4018      	ands	r0, r3
    4c40:	2300      	movs	r3, #0
    4c42:	4298      	cmp	r0, r3
    4c44:	d011      	beq.n	4c6a <setvbuf+0x136>
    4c46:	426d      	negs	r5, r5
    4c48:	60a3      	str	r3, [r4, #8]
    4c4a:	61a5      	str	r5, [r4, #24]
    4c4c:	0018      	movs	r0, r3
    4c4e:	e7d3      	b.n	4bf8 <setvbuf+0xc4>
    4c50:	9801      	ldr	r0, [sp, #4]
    4c52:	f000 fadb 	bl	520c <malloc>
    4c56:	1e07      	subs	r7, r0, #0
    4c58:	d0c0      	beq.n	4bdc <setvbuf+0xa8>
    4c5a:	2380      	movs	r3, #128	; 0x80
    4c5c:	89a2      	ldrh	r2, [r4, #12]
    4c5e:	9d01      	ldr	r5, [sp, #4]
    4c60:	4313      	orrs	r3, r2
    4c62:	81a3      	strh	r3, [r4, #12]
    4c64:	e7d6      	b.n	4c14 <setvbuf+0xe0>
    4c66:	2000      	movs	r0, #0
    4c68:	e7ba      	b.n	4be0 <setvbuf+0xac>
    4c6a:	60a5      	str	r5, [r4, #8]
    4c6c:	e7c4      	b.n	4bf8 <setvbuf+0xc4>
    4c6e:	60a0      	str	r0, [r4, #8]
    4c70:	e7c2      	b.n	4bf8 <setvbuf+0xc4>
    4c72:	2001      	movs	r0, #1
    4c74:	4240      	negs	r0, r0
    4c76:	e7bf      	b.n	4bf8 <setvbuf+0xc4>
    4c78:	2000000c 	.word	0x2000000c
    4c7c:	00005d70 	.word	0x00005d70
    4c80:	fffff35c 	.word	0xfffff35c
    4c84:	00005d90 	.word	0x00005d90
    4c88:	00005d50 	.word	0x00005d50

00004c8c <__swbuf_r>:
    4c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c8e:	0005      	movs	r5, r0
    4c90:	000e      	movs	r6, r1
    4c92:	0014      	movs	r4, r2
    4c94:	2800      	cmp	r0, #0
    4c96:	d004      	beq.n	4ca2 <__swbuf_r+0x16>
    4c98:	6983      	ldr	r3, [r0, #24]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d101      	bne.n	4ca2 <__swbuf_r+0x16>
    4c9e:	f000 f9b9 	bl	5014 <__sinit>
    4ca2:	4b22      	ldr	r3, [pc, #136]	; (4d2c <__swbuf_r+0xa0>)
    4ca4:	429c      	cmp	r4, r3
    4ca6:	d12d      	bne.n	4d04 <__swbuf_r+0x78>
    4ca8:	686c      	ldr	r4, [r5, #4]
    4caa:	69a3      	ldr	r3, [r4, #24]
    4cac:	60a3      	str	r3, [r4, #8]
    4cae:	89a3      	ldrh	r3, [r4, #12]
    4cb0:	071b      	lsls	r3, r3, #28
    4cb2:	d531      	bpl.n	4d18 <__swbuf_r+0x8c>
    4cb4:	6923      	ldr	r3, [r4, #16]
    4cb6:	2b00      	cmp	r3, #0
    4cb8:	d02e      	beq.n	4d18 <__swbuf_r+0x8c>
    4cba:	6823      	ldr	r3, [r4, #0]
    4cbc:	6922      	ldr	r2, [r4, #16]
    4cbe:	b2f7      	uxtb	r7, r6
    4cc0:	1a98      	subs	r0, r3, r2
    4cc2:	6963      	ldr	r3, [r4, #20]
    4cc4:	b2f6      	uxtb	r6, r6
    4cc6:	4298      	cmp	r0, r3
    4cc8:	db05      	blt.n	4cd6 <__swbuf_r+0x4a>
    4cca:	0021      	movs	r1, r4
    4ccc:	0028      	movs	r0, r5
    4cce:	f000 f933 	bl	4f38 <_fflush_r>
    4cd2:	2800      	cmp	r0, #0
    4cd4:	d126      	bne.n	4d24 <__swbuf_r+0x98>
    4cd6:	68a3      	ldr	r3, [r4, #8]
    4cd8:	3001      	adds	r0, #1
    4cda:	3b01      	subs	r3, #1
    4cdc:	60a3      	str	r3, [r4, #8]
    4cde:	6823      	ldr	r3, [r4, #0]
    4ce0:	1c5a      	adds	r2, r3, #1
    4ce2:	6022      	str	r2, [r4, #0]
    4ce4:	701f      	strb	r7, [r3, #0]
    4ce6:	6963      	ldr	r3, [r4, #20]
    4ce8:	4298      	cmp	r0, r3
    4cea:	d004      	beq.n	4cf6 <__swbuf_r+0x6a>
    4cec:	89a3      	ldrh	r3, [r4, #12]
    4cee:	07db      	lsls	r3, r3, #31
    4cf0:	d51a      	bpl.n	4d28 <__swbuf_r+0x9c>
    4cf2:	2e0a      	cmp	r6, #10
    4cf4:	d118      	bne.n	4d28 <__swbuf_r+0x9c>
    4cf6:	0021      	movs	r1, r4
    4cf8:	0028      	movs	r0, r5
    4cfa:	f000 f91d 	bl	4f38 <_fflush_r>
    4cfe:	2800      	cmp	r0, #0
    4d00:	d012      	beq.n	4d28 <__swbuf_r+0x9c>
    4d02:	e00f      	b.n	4d24 <__swbuf_r+0x98>
    4d04:	4b0a      	ldr	r3, [pc, #40]	; (4d30 <__swbuf_r+0xa4>)
    4d06:	429c      	cmp	r4, r3
    4d08:	d101      	bne.n	4d0e <__swbuf_r+0x82>
    4d0a:	68ac      	ldr	r4, [r5, #8]
    4d0c:	e7cd      	b.n	4caa <__swbuf_r+0x1e>
    4d0e:	4b09      	ldr	r3, [pc, #36]	; (4d34 <__swbuf_r+0xa8>)
    4d10:	429c      	cmp	r4, r3
    4d12:	d1ca      	bne.n	4caa <__swbuf_r+0x1e>
    4d14:	68ec      	ldr	r4, [r5, #12]
    4d16:	e7c8      	b.n	4caa <__swbuf_r+0x1e>
    4d18:	0021      	movs	r1, r4
    4d1a:	0028      	movs	r0, r5
    4d1c:	f000 f80c 	bl	4d38 <__swsetup_r>
    4d20:	2800      	cmp	r0, #0
    4d22:	d0ca      	beq.n	4cba <__swbuf_r+0x2e>
    4d24:	2601      	movs	r6, #1
    4d26:	4276      	negs	r6, r6
    4d28:	0030      	movs	r0, r6
    4d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d2c:	00005d70 	.word	0x00005d70
    4d30:	00005d90 	.word	0x00005d90
    4d34:	00005d50 	.word	0x00005d50

00004d38 <__swsetup_r>:
    4d38:	4b36      	ldr	r3, [pc, #216]	; (4e14 <__swsetup_r+0xdc>)
    4d3a:	b570      	push	{r4, r5, r6, lr}
    4d3c:	681d      	ldr	r5, [r3, #0]
    4d3e:	0006      	movs	r6, r0
    4d40:	000c      	movs	r4, r1
    4d42:	2d00      	cmp	r5, #0
    4d44:	d005      	beq.n	4d52 <__swsetup_r+0x1a>
    4d46:	69ab      	ldr	r3, [r5, #24]
    4d48:	2b00      	cmp	r3, #0
    4d4a:	d102      	bne.n	4d52 <__swsetup_r+0x1a>
    4d4c:	0028      	movs	r0, r5
    4d4e:	f000 f961 	bl	5014 <__sinit>
    4d52:	4b31      	ldr	r3, [pc, #196]	; (4e18 <__swsetup_r+0xe0>)
    4d54:	429c      	cmp	r4, r3
    4d56:	d10f      	bne.n	4d78 <__swsetup_r+0x40>
    4d58:	686c      	ldr	r4, [r5, #4]
    4d5a:	230c      	movs	r3, #12
    4d5c:	5ee2      	ldrsh	r2, [r4, r3]
    4d5e:	b293      	uxth	r3, r2
    4d60:	0719      	lsls	r1, r3, #28
    4d62:	d42d      	bmi.n	4dc0 <__swsetup_r+0x88>
    4d64:	06d9      	lsls	r1, r3, #27
    4d66:	d411      	bmi.n	4d8c <__swsetup_r+0x54>
    4d68:	2309      	movs	r3, #9
    4d6a:	2001      	movs	r0, #1
    4d6c:	6033      	str	r3, [r6, #0]
    4d6e:	3337      	adds	r3, #55	; 0x37
    4d70:	4313      	orrs	r3, r2
    4d72:	81a3      	strh	r3, [r4, #12]
    4d74:	4240      	negs	r0, r0
    4d76:	bd70      	pop	{r4, r5, r6, pc}
    4d78:	4b28      	ldr	r3, [pc, #160]	; (4e1c <__swsetup_r+0xe4>)
    4d7a:	429c      	cmp	r4, r3
    4d7c:	d101      	bne.n	4d82 <__swsetup_r+0x4a>
    4d7e:	68ac      	ldr	r4, [r5, #8]
    4d80:	e7eb      	b.n	4d5a <__swsetup_r+0x22>
    4d82:	4b27      	ldr	r3, [pc, #156]	; (4e20 <__swsetup_r+0xe8>)
    4d84:	429c      	cmp	r4, r3
    4d86:	d1e8      	bne.n	4d5a <__swsetup_r+0x22>
    4d88:	68ec      	ldr	r4, [r5, #12]
    4d8a:	e7e6      	b.n	4d5a <__swsetup_r+0x22>
    4d8c:	075b      	lsls	r3, r3, #29
    4d8e:	d513      	bpl.n	4db8 <__swsetup_r+0x80>
    4d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4d92:	2900      	cmp	r1, #0
    4d94:	d008      	beq.n	4da8 <__swsetup_r+0x70>
    4d96:	0023      	movs	r3, r4
    4d98:	3344      	adds	r3, #68	; 0x44
    4d9a:	4299      	cmp	r1, r3
    4d9c:	d002      	beq.n	4da4 <__swsetup_r+0x6c>
    4d9e:	0030      	movs	r0, r6
    4da0:	f000 fa3e 	bl	5220 <_free_r>
    4da4:	2300      	movs	r3, #0
    4da6:	6363      	str	r3, [r4, #52]	; 0x34
    4da8:	2224      	movs	r2, #36	; 0x24
    4daa:	89a3      	ldrh	r3, [r4, #12]
    4dac:	4393      	bics	r3, r2
    4dae:	81a3      	strh	r3, [r4, #12]
    4db0:	2300      	movs	r3, #0
    4db2:	6063      	str	r3, [r4, #4]
    4db4:	6923      	ldr	r3, [r4, #16]
    4db6:	6023      	str	r3, [r4, #0]
    4db8:	2308      	movs	r3, #8
    4dba:	89a2      	ldrh	r2, [r4, #12]
    4dbc:	4313      	orrs	r3, r2
    4dbe:	81a3      	strh	r3, [r4, #12]
    4dc0:	6923      	ldr	r3, [r4, #16]
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d10b      	bne.n	4dde <__swsetup_r+0xa6>
    4dc6:	21a0      	movs	r1, #160	; 0xa0
    4dc8:	2280      	movs	r2, #128	; 0x80
    4dca:	89a3      	ldrh	r3, [r4, #12]
    4dcc:	0089      	lsls	r1, r1, #2
    4dce:	0092      	lsls	r2, r2, #2
    4dd0:	400b      	ands	r3, r1
    4dd2:	4293      	cmp	r3, r2
    4dd4:	d003      	beq.n	4dde <__swsetup_r+0xa6>
    4dd6:	0021      	movs	r1, r4
    4dd8:	0030      	movs	r0, r6
    4dda:	f000 f9d9 	bl	5190 <__smakebuf_r>
    4dde:	2301      	movs	r3, #1
    4de0:	89a2      	ldrh	r2, [r4, #12]
    4de2:	4013      	ands	r3, r2
    4de4:	d011      	beq.n	4e0a <__swsetup_r+0xd2>
    4de6:	2300      	movs	r3, #0
    4de8:	60a3      	str	r3, [r4, #8]
    4dea:	6963      	ldr	r3, [r4, #20]
    4dec:	425b      	negs	r3, r3
    4dee:	61a3      	str	r3, [r4, #24]
    4df0:	2000      	movs	r0, #0
    4df2:	6923      	ldr	r3, [r4, #16]
    4df4:	4283      	cmp	r3, r0
    4df6:	d1be      	bne.n	4d76 <__swsetup_r+0x3e>
    4df8:	230c      	movs	r3, #12
    4dfa:	5ee2      	ldrsh	r2, [r4, r3]
    4dfc:	0613      	lsls	r3, r2, #24
    4dfe:	d5ba      	bpl.n	4d76 <__swsetup_r+0x3e>
    4e00:	2340      	movs	r3, #64	; 0x40
    4e02:	4313      	orrs	r3, r2
    4e04:	81a3      	strh	r3, [r4, #12]
    4e06:	3801      	subs	r0, #1
    4e08:	e7b5      	b.n	4d76 <__swsetup_r+0x3e>
    4e0a:	0792      	lsls	r2, r2, #30
    4e0c:	d400      	bmi.n	4e10 <__swsetup_r+0xd8>
    4e0e:	6963      	ldr	r3, [r4, #20]
    4e10:	60a3      	str	r3, [r4, #8]
    4e12:	e7ed      	b.n	4df0 <__swsetup_r+0xb8>
    4e14:	2000000c 	.word	0x2000000c
    4e18:	00005d70 	.word	0x00005d70
    4e1c:	00005d90 	.word	0x00005d90
    4e20:	00005d50 	.word	0x00005d50

00004e24 <__sflush_r>:
    4e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4e26:	898a      	ldrh	r2, [r1, #12]
    4e28:	0005      	movs	r5, r0
    4e2a:	000c      	movs	r4, r1
    4e2c:	0713      	lsls	r3, r2, #28
    4e2e:	d460      	bmi.n	4ef2 <__sflush_r+0xce>
    4e30:	684b      	ldr	r3, [r1, #4]
    4e32:	2b00      	cmp	r3, #0
    4e34:	dc04      	bgt.n	4e40 <__sflush_r+0x1c>
    4e36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4e38:	2b00      	cmp	r3, #0
    4e3a:	dc01      	bgt.n	4e40 <__sflush_r+0x1c>
    4e3c:	2000      	movs	r0, #0
    4e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4e40:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4e42:	2f00      	cmp	r7, #0
    4e44:	d0fa      	beq.n	4e3c <__sflush_r+0x18>
    4e46:	2300      	movs	r3, #0
    4e48:	682e      	ldr	r6, [r5, #0]
    4e4a:	602b      	str	r3, [r5, #0]
    4e4c:	2380      	movs	r3, #128	; 0x80
    4e4e:	015b      	lsls	r3, r3, #5
    4e50:	401a      	ands	r2, r3
    4e52:	d034      	beq.n	4ebe <__sflush_r+0x9a>
    4e54:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4e56:	89a3      	ldrh	r3, [r4, #12]
    4e58:	075b      	lsls	r3, r3, #29
    4e5a:	d506      	bpl.n	4e6a <__sflush_r+0x46>
    4e5c:	6863      	ldr	r3, [r4, #4]
    4e5e:	1ac0      	subs	r0, r0, r3
    4e60:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4e62:	2b00      	cmp	r3, #0
    4e64:	d001      	beq.n	4e6a <__sflush_r+0x46>
    4e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4e68:	1ac0      	subs	r0, r0, r3
    4e6a:	0002      	movs	r2, r0
    4e6c:	6a21      	ldr	r1, [r4, #32]
    4e6e:	2300      	movs	r3, #0
    4e70:	0028      	movs	r0, r5
    4e72:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4e74:	47b8      	blx	r7
    4e76:	89a1      	ldrh	r1, [r4, #12]
    4e78:	1c43      	adds	r3, r0, #1
    4e7a:	d106      	bne.n	4e8a <__sflush_r+0x66>
    4e7c:	682b      	ldr	r3, [r5, #0]
    4e7e:	2b1d      	cmp	r3, #29
    4e80:	d831      	bhi.n	4ee6 <__sflush_r+0xc2>
    4e82:	4a2c      	ldr	r2, [pc, #176]	; (4f34 <__sflush_r+0x110>)
    4e84:	40da      	lsrs	r2, r3
    4e86:	07d3      	lsls	r3, r2, #31
    4e88:	d52d      	bpl.n	4ee6 <__sflush_r+0xc2>
    4e8a:	2300      	movs	r3, #0
    4e8c:	6063      	str	r3, [r4, #4]
    4e8e:	6923      	ldr	r3, [r4, #16]
    4e90:	6023      	str	r3, [r4, #0]
    4e92:	04cb      	lsls	r3, r1, #19
    4e94:	d505      	bpl.n	4ea2 <__sflush_r+0x7e>
    4e96:	1c43      	adds	r3, r0, #1
    4e98:	d102      	bne.n	4ea0 <__sflush_r+0x7c>
    4e9a:	682b      	ldr	r3, [r5, #0]
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	d100      	bne.n	4ea2 <__sflush_r+0x7e>
    4ea0:	6560      	str	r0, [r4, #84]	; 0x54
    4ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4ea4:	602e      	str	r6, [r5, #0]
    4ea6:	2900      	cmp	r1, #0
    4ea8:	d0c8      	beq.n	4e3c <__sflush_r+0x18>
    4eaa:	0023      	movs	r3, r4
    4eac:	3344      	adds	r3, #68	; 0x44
    4eae:	4299      	cmp	r1, r3
    4eb0:	d002      	beq.n	4eb8 <__sflush_r+0x94>
    4eb2:	0028      	movs	r0, r5
    4eb4:	f000 f9b4 	bl	5220 <_free_r>
    4eb8:	2000      	movs	r0, #0
    4eba:	6360      	str	r0, [r4, #52]	; 0x34
    4ebc:	e7bf      	b.n	4e3e <__sflush_r+0x1a>
    4ebe:	2301      	movs	r3, #1
    4ec0:	6a21      	ldr	r1, [r4, #32]
    4ec2:	0028      	movs	r0, r5
    4ec4:	47b8      	blx	r7
    4ec6:	1c43      	adds	r3, r0, #1
    4ec8:	d1c5      	bne.n	4e56 <__sflush_r+0x32>
    4eca:	682b      	ldr	r3, [r5, #0]
    4ecc:	2b00      	cmp	r3, #0
    4ece:	d0c2      	beq.n	4e56 <__sflush_r+0x32>
    4ed0:	2b1d      	cmp	r3, #29
    4ed2:	d001      	beq.n	4ed8 <__sflush_r+0xb4>
    4ed4:	2b16      	cmp	r3, #22
    4ed6:	d101      	bne.n	4edc <__sflush_r+0xb8>
    4ed8:	602e      	str	r6, [r5, #0]
    4eda:	e7af      	b.n	4e3c <__sflush_r+0x18>
    4edc:	2340      	movs	r3, #64	; 0x40
    4ede:	89a2      	ldrh	r2, [r4, #12]
    4ee0:	4313      	orrs	r3, r2
    4ee2:	81a3      	strh	r3, [r4, #12]
    4ee4:	e7ab      	b.n	4e3e <__sflush_r+0x1a>
    4ee6:	2340      	movs	r3, #64	; 0x40
    4ee8:	430b      	orrs	r3, r1
    4eea:	2001      	movs	r0, #1
    4eec:	81a3      	strh	r3, [r4, #12]
    4eee:	4240      	negs	r0, r0
    4ef0:	e7a5      	b.n	4e3e <__sflush_r+0x1a>
    4ef2:	690f      	ldr	r7, [r1, #16]
    4ef4:	2f00      	cmp	r7, #0
    4ef6:	d0a1      	beq.n	4e3c <__sflush_r+0x18>
    4ef8:	680b      	ldr	r3, [r1, #0]
    4efa:	600f      	str	r7, [r1, #0]
    4efc:	1bdb      	subs	r3, r3, r7
    4efe:	9301      	str	r3, [sp, #4]
    4f00:	2300      	movs	r3, #0
    4f02:	0792      	lsls	r2, r2, #30
    4f04:	d100      	bne.n	4f08 <__sflush_r+0xe4>
    4f06:	694b      	ldr	r3, [r1, #20]
    4f08:	60a3      	str	r3, [r4, #8]
    4f0a:	9b01      	ldr	r3, [sp, #4]
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	dc00      	bgt.n	4f12 <__sflush_r+0xee>
    4f10:	e794      	b.n	4e3c <__sflush_r+0x18>
    4f12:	9b01      	ldr	r3, [sp, #4]
    4f14:	003a      	movs	r2, r7
    4f16:	6a21      	ldr	r1, [r4, #32]
    4f18:	0028      	movs	r0, r5
    4f1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    4f1c:	47b0      	blx	r6
    4f1e:	2800      	cmp	r0, #0
    4f20:	dc03      	bgt.n	4f2a <__sflush_r+0x106>
    4f22:	2340      	movs	r3, #64	; 0x40
    4f24:	89a2      	ldrh	r2, [r4, #12]
    4f26:	4313      	orrs	r3, r2
    4f28:	e7df      	b.n	4eea <__sflush_r+0xc6>
    4f2a:	9b01      	ldr	r3, [sp, #4]
    4f2c:	183f      	adds	r7, r7, r0
    4f2e:	1a1b      	subs	r3, r3, r0
    4f30:	9301      	str	r3, [sp, #4]
    4f32:	e7ea      	b.n	4f0a <__sflush_r+0xe6>
    4f34:	20400001 	.word	0x20400001

00004f38 <_fflush_r>:
    4f38:	690b      	ldr	r3, [r1, #16]
    4f3a:	b570      	push	{r4, r5, r6, lr}
    4f3c:	0005      	movs	r5, r0
    4f3e:	000c      	movs	r4, r1
    4f40:	2b00      	cmp	r3, #0
    4f42:	d101      	bne.n	4f48 <_fflush_r+0x10>
    4f44:	2000      	movs	r0, #0
    4f46:	bd70      	pop	{r4, r5, r6, pc}
    4f48:	2800      	cmp	r0, #0
    4f4a:	d004      	beq.n	4f56 <_fflush_r+0x1e>
    4f4c:	6983      	ldr	r3, [r0, #24]
    4f4e:	2b00      	cmp	r3, #0
    4f50:	d101      	bne.n	4f56 <_fflush_r+0x1e>
    4f52:	f000 f85f 	bl	5014 <__sinit>
    4f56:	4b0b      	ldr	r3, [pc, #44]	; (4f84 <_fflush_r+0x4c>)
    4f58:	429c      	cmp	r4, r3
    4f5a:	d109      	bne.n	4f70 <_fflush_r+0x38>
    4f5c:	686c      	ldr	r4, [r5, #4]
    4f5e:	220c      	movs	r2, #12
    4f60:	5ea3      	ldrsh	r3, [r4, r2]
    4f62:	2b00      	cmp	r3, #0
    4f64:	d0ee      	beq.n	4f44 <_fflush_r+0xc>
    4f66:	0021      	movs	r1, r4
    4f68:	0028      	movs	r0, r5
    4f6a:	f7ff ff5b 	bl	4e24 <__sflush_r>
    4f6e:	e7ea      	b.n	4f46 <_fflush_r+0xe>
    4f70:	4b05      	ldr	r3, [pc, #20]	; (4f88 <_fflush_r+0x50>)
    4f72:	429c      	cmp	r4, r3
    4f74:	d101      	bne.n	4f7a <_fflush_r+0x42>
    4f76:	68ac      	ldr	r4, [r5, #8]
    4f78:	e7f1      	b.n	4f5e <_fflush_r+0x26>
    4f7a:	4b04      	ldr	r3, [pc, #16]	; (4f8c <_fflush_r+0x54>)
    4f7c:	429c      	cmp	r4, r3
    4f7e:	d1ee      	bne.n	4f5e <_fflush_r+0x26>
    4f80:	68ec      	ldr	r4, [r5, #12]
    4f82:	e7ec      	b.n	4f5e <_fflush_r+0x26>
    4f84:	00005d70 	.word	0x00005d70
    4f88:	00005d90 	.word	0x00005d90
    4f8c:	00005d50 	.word	0x00005d50

00004f90 <_cleanup_r>:
    4f90:	b510      	push	{r4, lr}
    4f92:	4902      	ldr	r1, [pc, #8]	; (4f9c <_cleanup_r+0xc>)
    4f94:	f000 f8b2 	bl	50fc <_fwalk_reent>
    4f98:	bd10      	pop	{r4, pc}
    4f9a:	46c0      	nop			; (mov r8, r8)
    4f9c:	00004f39 	.word	0x00004f39

00004fa0 <std.isra.0>:
    4fa0:	2300      	movs	r3, #0
    4fa2:	b510      	push	{r4, lr}
    4fa4:	0004      	movs	r4, r0
    4fa6:	6003      	str	r3, [r0, #0]
    4fa8:	6043      	str	r3, [r0, #4]
    4faa:	6083      	str	r3, [r0, #8]
    4fac:	8181      	strh	r1, [r0, #12]
    4fae:	6643      	str	r3, [r0, #100]	; 0x64
    4fb0:	81c2      	strh	r2, [r0, #14]
    4fb2:	6103      	str	r3, [r0, #16]
    4fb4:	6143      	str	r3, [r0, #20]
    4fb6:	6183      	str	r3, [r0, #24]
    4fb8:	0019      	movs	r1, r3
    4fba:	2208      	movs	r2, #8
    4fbc:	305c      	adds	r0, #92	; 0x5c
    4fbe:	f7ff fd22 	bl	4a06 <memset>
    4fc2:	4b05      	ldr	r3, [pc, #20]	; (4fd8 <std.isra.0+0x38>)
    4fc4:	6224      	str	r4, [r4, #32]
    4fc6:	6263      	str	r3, [r4, #36]	; 0x24
    4fc8:	4b04      	ldr	r3, [pc, #16]	; (4fdc <std.isra.0+0x3c>)
    4fca:	62a3      	str	r3, [r4, #40]	; 0x28
    4fcc:	4b04      	ldr	r3, [pc, #16]	; (4fe0 <std.isra.0+0x40>)
    4fce:	62e3      	str	r3, [r4, #44]	; 0x2c
    4fd0:	4b04      	ldr	r3, [pc, #16]	; (4fe4 <std.isra.0+0x44>)
    4fd2:	6323      	str	r3, [r4, #48]	; 0x30
    4fd4:	bd10      	pop	{r4, pc}
    4fd6:	46c0      	nop			; (mov r8, r8)
    4fd8:	0000592d 	.word	0x0000592d
    4fdc:	00005955 	.word	0x00005955
    4fe0:	0000598d 	.word	0x0000598d
    4fe4:	000059b9 	.word	0x000059b9

00004fe8 <__sfmoreglue>:
    4fe8:	b570      	push	{r4, r5, r6, lr}
    4fea:	2568      	movs	r5, #104	; 0x68
    4fec:	1e4a      	subs	r2, r1, #1
    4fee:	4355      	muls	r5, r2
    4ff0:	000e      	movs	r6, r1
    4ff2:	0029      	movs	r1, r5
    4ff4:	3174      	adds	r1, #116	; 0x74
    4ff6:	f000 f95d 	bl	52b4 <_malloc_r>
    4ffa:	1e04      	subs	r4, r0, #0
    4ffc:	d008      	beq.n	5010 <__sfmoreglue+0x28>
    4ffe:	2100      	movs	r1, #0
    5000:	002a      	movs	r2, r5
    5002:	6001      	str	r1, [r0, #0]
    5004:	6046      	str	r6, [r0, #4]
    5006:	300c      	adds	r0, #12
    5008:	60a0      	str	r0, [r4, #8]
    500a:	3268      	adds	r2, #104	; 0x68
    500c:	f7ff fcfb 	bl	4a06 <memset>
    5010:	0020      	movs	r0, r4
    5012:	bd70      	pop	{r4, r5, r6, pc}

00005014 <__sinit>:
    5014:	6983      	ldr	r3, [r0, #24]
    5016:	b513      	push	{r0, r1, r4, lr}
    5018:	0004      	movs	r4, r0
    501a:	2b00      	cmp	r3, #0
    501c:	d128      	bne.n	5070 <__sinit+0x5c>
    501e:	6483      	str	r3, [r0, #72]	; 0x48
    5020:	64c3      	str	r3, [r0, #76]	; 0x4c
    5022:	6503      	str	r3, [r0, #80]	; 0x50
    5024:	4b13      	ldr	r3, [pc, #76]	; (5074 <__sinit+0x60>)
    5026:	4a14      	ldr	r2, [pc, #80]	; (5078 <__sinit+0x64>)
    5028:	681b      	ldr	r3, [r3, #0]
    502a:	6282      	str	r2, [r0, #40]	; 0x28
    502c:	9301      	str	r3, [sp, #4]
    502e:	4298      	cmp	r0, r3
    5030:	d101      	bne.n	5036 <__sinit+0x22>
    5032:	2301      	movs	r3, #1
    5034:	6183      	str	r3, [r0, #24]
    5036:	0020      	movs	r0, r4
    5038:	f000 f820 	bl	507c <__sfp>
    503c:	6060      	str	r0, [r4, #4]
    503e:	0020      	movs	r0, r4
    5040:	f000 f81c 	bl	507c <__sfp>
    5044:	60a0      	str	r0, [r4, #8]
    5046:	0020      	movs	r0, r4
    5048:	f000 f818 	bl	507c <__sfp>
    504c:	2200      	movs	r2, #0
    504e:	60e0      	str	r0, [r4, #12]
    5050:	2104      	movs	r1, #4
    5052:	6860      	ldr	r0, [r4, #4]
    5054:	f7ff ffa4 	bl	4fa0 <std.isra.0>
    5058:	2201      	movs	r2, #1
    505a:	2109      	movs	r1, #9
    505c:	68a0      	ldr	r0, [r4, #8]
    505e:	f7ff ff9f 	bl	4fa0 <std.isra.0>
    5062:	2202      	movs	r2, #2
    5064:	2112      	movs	r1, #18
    5066:	68e0      	ldr	r0, [r4, #12]
    5068:	f7ff ff9a 	bl	4fa0 <std.isra.0>
    506c:	2301      	movs	r3, #1
    506e:	61a3      	str	r3, [r4, #24]
    5070:	bd13      	pop	{r0, r1, r4, pc}
    5072:	46c0      	nop			; (mov r8, r8)
    5074:	00005d4c 	.word	0x00005d4c
    5078:	00004f91 	.word	0x00004f91

0000507c <__sfp>:
    507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    507e:	4b1e      	ldr	r3, [pc, #120]	; (50f8 <__sfp+0x7c>)
    5080:	0007      	movs	r7, r0
    5082:	681e      	ldr	r6, [r3, #0]
    5084:	69b3      	ldr	r3, [r6, #24]
    5086:	2b00      	cmp	r3, #0
    5088:	d102      	bne.n	5090 <__sfp+0x14>
    508a:	0030      	movs	r0, r6
    508c:	f7ff ffc2 	bl	5014 <__sinit>
    5090:	3648      	adds	r6, #72	; 0x48
    5092:	68b4      	ldr	r4, [r6, #8]
    5094:	6873      	ldr	r3, [r6, #4]
    5096:	3b01      	subs	r3, #1
    5098:	d504      	bpl.n	50a4 <__sfp+0x28>
    509a:	6833      	ldr	r3, [r6, #0]
    509c:	2b00      	cmp	r3, #0
    509e:	d007      	beq.n	50b0 <__sfp+0x34>
    50a0:	6836      	ldr	r6, [r6, #0]
    50a2:	e7f6      	b.n	5092 <__sfp+0x16>
    50a4:	220c      	movs	r2, #12
    50a6:	5ea5      	ldrsh	r5, [r4, r2]
    50a8:	2d00      	cmp	r5, #0
    50aa:	d00d      	beq.n	50c8 <__sfp+0x4c>
    50ac:	3468      	adds	r4, #104	; 0x68
    50ae:	e7f2      	b.n	5096 <__sfp+0x1a>
    50b0:	2104      	movs	r1, #4
    50b2:	0038      	movs	r0, r7
    50b4:	f7ff ff98 	bl	4fe8 <__sfmoreglue>
    50b8:	6030      	str	r0, [r6, #0]
    50ba:	2800      	cmp	r0, #0
    50bc:	d1f0      	bne.n	50a0 <__sfp+0x24>
    50be:	230c      	movs	r3, #12
    50c0:	0004      	movs	r4, r0
    50c2:	603b      	str	r3, [r7, #0]
    50c4:	0020      	movs	r0, r4
    50c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50c8:	2301      	movs	r3, #1
    50ca:	0020      	movs	r0, r4
    50cc:	425b      	negs	r3, r3
    50ce:	81e3      	strh	r3, [r4, #14]
    50d0:	3302      	adds	r3, #2
    50d2:	81a3      	strh	r3, [r4, #12]
    50d4:	6665      	str	r5, [r4, #100]	; 0x64
    50d6:	6025      	str	r5, [r4, #0]
    50d8:	60a5      	str	r5, [r4, #8]
    50da:	6065      	str	r5, [r4, #4]
    50dc:	6125      	str	r5, [r4, #16]
    50de:	6165      	str	r5, [r4, #20]
    50e0:	61a5      	str	r5, [r4, #24]
    50e2:	2208      	movs	r2, #8
    50e4:	0029      	movs	r1, r5
    50e6:	305c      	adds	r0, #92	; 0x5c
    50e8:	f7ff fc8d 	bl	4a06 <memset>
    50ec:	6365      	str	r5, [r4, #52]	; 0x34
    50ee:	63a5      	str	r5, [r4, #56]	; 0x38
    50f0:	64a5      	str	r5, [r4, #72]	; 0x48
    50f2:	64e5      	str	r5, [r4, #76]	; 0x4c
    50f4:	e7e6      	b.n	50c4 <__sfp+0x48>
    50f6:	46c0      	nop			; (mov r8, r8)
    50f8:	00005d4c 	.word	0x00005d4c

000050fc <_fwalk_reent>:
    50fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    50fe:	0004      	movs	r4, r0
    5100:	0007      	movs	r7, r0
    5102:	2600      	movs	r6, #0
    5104:	9101      	str	r1, [sp, #4]
    5106:	3448      	adds	r4, #72	; 0x48
    5108:	2c00      	cmp	r4, #0
    510a:	d101      	bne.n	5110 <_fwalk_reent+0x14>
    510c:	0030      	movs	r0, r6
    510e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    5110:	6863      	ldr	r3, [r4, #4]
    5112:	68a5      	ldr	r5, [r4, #8]
    5114:	9300      	str	r3, [sp, #0]
    5116:	9b00      	ldr	r3, [sp, #0]
    5118:	3b01      	subs	r3, #1
    511a:	9300      	str	r3, [sp, #0]
    511c:	d501      	bpl.n	5122 <_fwalk_reent+0x26>
    511e:	6824      	ldr	r4, [r4, #0]
    5120:	e7f2      	b.n	5108 <_fwalk_reent+0xc>
    5122:	89ab      	ldrh	r3, [r5, #12]
    5124:	2b01      	cmp	r3, #1
    5126:	d908      	bls.n	513a <_fwalk_reent+0x3e>
    5128:	220e      	movs	r2, #14
    512a:	5eab      	ldrsh	r3, [r5, r2]
    512c:	3301      	adds	r3, #1
    512e:	d004      	beq.n	513a <_fwalk_reent+0x3e>
    5130:	0029      	movs	r1, r5
    5132:	0038      	movs	r0, r7
    5134:	9b01      	ldr	r3, [sp, #4]
    5136:	4798      	blx	r3
    5138:	4306      	orrs	r6, r0
    513a:	3568      	adds	r5, #104	; 0x68
    513c:	e7eb      	b.n	5116 <_fwalk_reent+0x1a>
	...

00005140 <__swhatbuf_r>:
    5140:	b570      	push	{r4, r5, r6, lr}
    5142:	000e      	movs	r6, r1
    5144:	001d      	movs	r5, r3
    5146:	230e      	movs	r3, #14
    5148:	5ec9      	ldrsh	r1, [r1, r3]
    514a:	b090      	sub	sp, #64	; 0x40
    514c:	0014      	movs	r4, r2
    514e:	2900      	cmp	r1, #0
    5150:	da07      	bge.n	5162 <__swhatbuf_r+0x22>
    5152:	2300      	movs	r3, #0
    5154:	602b      	str	r3, [r5, #0]
    5156:	89b3      	ldrh	r3, [r6, #12]
    5158:	061b      	lsls	r3, r3, #24
    515a:	d411      	bmi.n	5180 <__swhatbuf_r+0x40>
    515c:	2380      	movs	r3, #128	; 0x80
    515e:	00db      	lsls	r3, r3, #3
    5160:	e00f      	b.n	5182 <__swhatbuf_r+0x42>
    5162:	aa01      	add	r2, sp, #4
    5164:	f000 fc54 	bl	5a10 <_fstat_r>
    5168:	2800      	cmp	r0, #0
    516a:	dbf2      	blt.n	5152 <__swhatbuf_r+0x12>
    516c:	22f0      	movs	r2, #240	; 0xf0
    516e:	9b02      	ldr	r3, [sp, #8]
    5170:	0212      	lsls	r2, r2, #8
    5172:	4013      	ands	r3, r2
    5174:	4a05      	ldr	r2, [pc, #20]	; (518c <__swhatbuf_r+0x4c>)
    5176:	189b      	adds	r3, r3, r2
    5178:	425a      	negs	r2, r3
    517a:	4153      	adcs	r3, r2
    517c:	602b      	str	r3, [r5, #0]
    517e:	e7ed      	b.n	515c <__swhatbuf_r+0x1c>
    5180:	2340      	movs	r3, #64	; 0x40
    5182:	2000      	movs	r0, #0
    5184:	6023      	str	r3, [r4, #0]
    5186:	b010      	add	sp, #64	; 0x40
    5188:	bd70      	pop	{r4, r5, r6, pc}
    518a:	46c0      	nop			; (mov r8, r8)
    518c:	ffffe000 	.word	0xffffe000

00005190 <__smakebuf_r>:
    5190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5192:	2602      	movs	r6, #2
    5194:	898b      	ldrh	r3, [r1, #12]
    5196:	0005      	movs	r5, r0
    5198:	000c      	movs	r4, r1
    519a:	4233      	tst	r3, r6
    519c:	d006      	beq.n	51ac <__smakebuf_r+0x1c>
    519e:	0023      	movs	r3, r4
    51a0:	3347      	adds	r3, #71	; 0x47
    51a2:	6023      	str	r3, [r4, #0]
    51a4:	6123      	str	r3, [r4, #16]
    51a6:	2301      	movs	r3, #1
    51a8:	6163      	str	r3, [r4, #20]
    51aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    51ac:	ab01      	add	r3, sp, #4
    51ae:	466a      	mov	r2, sp
    51b0:	f7ff ffc6 	bl	5140 <__swhatbuf_r>
    51b4:	9900      	ldr	r1, [sp, #0]
    51b6:	0007      	movs	r7, r0
    51b8:	0028      	movs	r0, r5
    51ba:	f000 f87b 	bl	52b4 <_malloc_r>
    51be:	2800      	cmp	r0, #0
    51c0:	d106      	bne.n	51d0 <__smakebuf_r+0x40>
    51c2:	220c      	movs	r2, #12
    51c4:	5ea3      	ldrsh	r3, [r4, r2]
    51c6:	059a      	lsls	r2, r3, #22
    51c8:	d4ef      	bmi.n	51aa <__smakebuf_r+0x1a>
    51ca:	431e      	orrs	r6, r3
    51cc:	81a6      	strh	r6, [r4, #12]
    51ce:	e7e6      	b.n	519e <__smakebuf_r+0xe>
    51d0:	4b0d      	ldr	r3, [pc, #52]	; (5208 <__smakebuf_r+0x78>)
    51d2:	62ab      	str	r3, [r5, #40]	; 0x28
    51d4:	2380      	movs	r3, #128	; 0x80
    51d6:	89a2      	ldrh	r2, [r4, #12]
    51d8:	6020      	str	r0, [r4, #0]
    51da:	4313      	orrs	r3, r2
    51dc:	81a3      	strh	r3, [r4, #12]
    51de:	9b00      	ldr	r3, [sp, #0]
    51e0:	6120      	str	r0, [r4, #16]
    51e2:	6163      	str	r3, [r4, #20]
    51e4:	9b01      	ldr	r3, [sp, #4]
    51e6:	2b00      	cmp	r3, #0
    51e8:	d00a      	beq.n	5200 <__smakebuf_r+0x70>
    51ea:	230e      	movs	r3, #14
    51ec:	5ee1      	ldrsh	r1, [r4, r3]
    51ee:	0028      	movs	r0, r5
    51f0:	f000 fc20 	bl	5a34 <_isatty_r>
    51f4:	2800      	cmp	r0, #0
    51f6:	d003      	beq.n	5200 <__smakebuf_r+0x70>
    51f8:	2301      	movs	r3, #1
    51fa:	89a2      	ldrh	r2, [r4, #12]
    51fc:	4313      	orrs	r3, r2
    51fe:	81a3      	strh	r3, [r4, #12]
    5200:	89a0      	ldrh	r0, [r4, #12]
    5202:	4338      	orrs	r0, r7
    5204:	81a0      	strh	r0, [r4, #12]
    5206:	e7d0      	b.n	51aa <__smakebuf_r+0x1a>
    5208:	00004f91 	.word	0x00004f91

0000520c <malloc>:
    520c:	b510      	push	{r4, lr}
    520e:	4b03      	ldr	r3, [pc, #12]	; (521c <malloc+0x10>)
    5210:	0001      	movs	r1, r0
    5212:	6818      	ldr	r0, [r3, #0]
    5214:	f000 f84e 	bl	52b4 <_malloc_r>
    5218:	bd10      	pop	{r4, pc}
    521a:	46c0      	nop			; (mov r8, r8)
    521c:	2000000c 	.word	0x2000000c

00005220 <_free_r>:
    5220:	b570      	push	{r4, r5, r6, lr}
    5222:	0005      	movs	r5, r0
    5224:	2900      	cmp	r1, #0
    5226:	d010      	beq.n	524a <_free_r+0x2a>
    5228:	1f0c      	subs	r4, r1, #4
    522a:	6823      	ldr	r3, [r4, #0]
    522c:	2b00      	cmp	r3, #0
    522e:	da00      	bge.n	5232 <_free_r+0x12>
    5230:	18e4      	adds	r4, r4, r3
    5232:	0028      	movs	r0, r5
    5234:	f000 fc2f 	bl	5a96 <__malloc_lock>
    5238:	4a1d      	ldr	r2, [pc, #116]	; (52b0 <_free_r+0x90>)
    523a:	6813      	ldr	r3, [r2, #0]
    523c:	2b00      	cmp	r3, #0
    523e:	d105      	bne.n	524c <_free_r+0x2c>
    5240:	6063      	str	r3, [r4, #4]
    5242:	6014      	str	r4, [r2, #0]
    5244:	0028      	movs	r0, r5
    5246:	f000 fc27 	bl	5a98 <__malloc_unlock>
    524a:	bd70      	pop	{r4, r5, r6, pc}
    524c:	42a3      	cmp	r3, r4
    524e:	d909      	bls.n	5264 <_free_r+0x44>
    5250:	6821      	ldr	r1, [r4, #0]
    5252:	1860      	adds	r0, r4, r1
    5254:	4283      	cmp	r3, r0
    5256:	d1f3      	bne.n	5240 <_free_r+0x20>
    5258:	6818      	ldr	r0, [r3, #0]
    525a:	685b      	ldr	r3, [r3, #4]
    525c:	1841      	adds	r1, r0, r1
    525e:	6021      	str	r1, [r4, #0]
    5260:	e7ee      	b.n	5240 <_free_r+0x20>
    5262:	0013      	movs	r3, r2
    5264:	685a      	ldr	r2, [r3, #4]
    5266:	2a00      	cmp	r2, #0
    5268:	d001      	beq.n	526e <_free_r+0x4e>
    526a:	42a2      	cmp	r2, r4
    526c:	d9f9      	bls.n	5262 <_free_r+0x42>
    526e:	6819      	ldr	r1, [r3, #0]
    5270:	1858      	adds	r0, r3, r1
    5272:	42a0      	cmp	r0, r4
    5274:	d10b      	bne.n	528e <_free_r+0x6e>
    5276:	6820      	ldr	r0, [r4, #0]
    5278:	1809      	adds	r1, r1, r0
    527a:	1858      	adds	r0, r3, r1
    527c:	6019      	str	r1, [r3, #0]
    527e:	4282      	cmp	r2, r0
    5280:	d1e0      	bne.n	5244 <_free_r+0x24>
    5282:	6810      	ldr	r0, [r2, #0]
    5284:	6852      	ldr	r2, [r2, #4]
    5286:	1841      	adds	r1, r0, r1
    5288:	6019      	str	r1, [r3, #0]
    528a:	605a      	str	r2, [r3, #4]
    528c:	e7da      	b.n	5244 <_free_r+0x24>
    528e:	42a0      	cmp	r0, r4
    5290:	d902      	bls.n	5298 <_free_r+0x78>
    5292:	230c      	movs	r3, #12
    5294:	602b      	str	r3, [r5, #0]
    5296:	e7d5      	b.n	5244 <_free_r+0x24>
    5298:	6821      	ldr	r1, [r4, #0]
    529a:	1860      	adds	r0, r4, r1
    529c:	4282      	cmp	r2, r0
    529e:	d103      	bne.n	52a8 <_free_r+0x88>
    52a0:	6810      	ldr	r0, [r2, #0]
    52a2:	6852      	ldr	r2, [r2, #4]
    52a4:	1841      	adds	r1, r0, r1
    52a6:	6021      	str	r1, [r4, #0]
    52a8:	6062      	str	r2, [r4, #4]
    52aa:	605c      	str	r4, [r3, #4]
    52ac:	e7ca      	b.n	5244 <_free_r+0x24>
    52ae:	46c0      	nop			; (mov r8, r8)
    52b0:	20000114 	.word	0x20000114

000052b4 <_malloc_r>:
    52b4:	2303      	movs	r3, #3
    52b6:	b570      	push	{r4, r5, r6, lr}
    52b8:	1ccd      	adds	r5, r1, #3
    52ba:	439d      	bics	r5, r3
    52bc:	3508      	adds	r5, #8
    52be:	0006      	movs	r6, r0
    52c0:	2d0c      	cmp	r5, #12
    52c2:	d21e      	bcs.n	5302 <_malloc_r+0x4e>
    52c4:	250c      	movs	r5, #12
    52c6:	42a9      	cmp	r1, r5
    52c8:	d81d      	bhi.n	5306 <_malloc_r+0x52>
    52ca:	0030      	movs	r0, r6
    52cc:	f000 fbe3 	bl	5a96 <__malloc_lock>
    52d0:	4a25      	ldr	r2, [pc, #148]	; (5368 <_malloc_r+0xb4>)
    52d2:	6814      	ldr	r4, [r2, #0]
    52d4:	0021      	movs	r1, r4
    52d6:	2900      	cmp	r1, #0
    52d8:	d119      	bne.n	530e <_malloc_r+0x5a>
    52da:	4c24      	ldr	r4, [pc, #144]	; (536c <_malloc_r+0xb8>)
    52dc:	6823      	ldr	r3, [r4, #0]
    52de:	2b00      	cmp	r3, #0
    52e0:	d103      	bne.n	52ea <_malloc_r+0x36>
    52e2:	0030      	movs	r0, r6
    52e4:	f000 fb10 	bl	5908 <_sbrk_r>
    52e8:	6020      	str	r0, [r4, #0]
    52ea:	0029      	movs	r1, r5
    52ec:	0030      	movs	r0, r6
    52ee:	f000 fb0b 	bl	5908 <_sbrk_r>
    52f2:	1c43      	adds	r3, r0, #1
    52f4:	d12c      	bne.n	5350 <_malloc_r+0x9c>
    52f6:	230c      	movs	r3, #12
    52f8:	0030      	movs	r0, r6
    52fa:	6033      	str	r3, [r6, #0]
    52fc:	f000 fbcc 	bl	5a98 <__malloc_unlock>
    5300:	e003      	b.n	530a <_malloc_r+0x56>
    5302:	2d00      	cmp	r5, #0
    5304:	dadf      	bge.n	52c6 <_malloc_r+0x12>
    5306:	230c      	movs	r3, #12
    5308:	6033      	str	r3, [r6, #0]
    530a:	2000      	movs	r0, #0
    530c:	bd70      	pop	{r4, r5, r6, pc}
    530e:	680b      	ldr	r3, [r1, #0]
    5310:	1b5b      	subs	r3, r3, r5
    5312:	d41a      	bmi.n	534a <_malloc_r+0x96>
    5314:	2b0b      	cmp	r3, #11
    5316:	d903      	bls.n	5320 <_malloc_r+0x6c>
    5318:	600b      	str	r3, [r1, #0]
    531a:	18cc      	adds	r4, r1, r3
    531c:	6025      	str	r5, [r4, #0]
    531e:	e003      	b.n	5328 <_malloc_r+0x74>
    5320:	428c      	cmp	r4, r1
    5322:	d10e      	bne.n	5342 <_malloc_r+0x8e>
    5324:	6863      	ldr	r3, [r4, #4]
    5326:	6013      	str	r3, [r2, #0]
    5328:	0030      	movs	r0, r6
    532a:	f000 fbb5 	bl	5a98 <__malloc_unlock>
    532e:	0020      	movs	r0, r4
    5330:	2207      	movs	r2, #7
    5332:	300b      	adds	r0, #11
    5334:	1d23      	adds	r3, r4, #4
    5336:	4390      	bics	r0, r2
    5338:	1ac3      	subs	r3, r0, r3
    533a:	d0e7      	beq.n	530c <_malloc_r+0x58>
    533c:	425a      	negs	r2, r3
    533e:	50e2      	str	r2, [r4, r3]
    5340:	e7e4      	b.n	530c <_malloc_r+0x58>
    5342:	684b      	ldr	r3, [r1, #4]
    5344:	6063      	str	r3, [r4, #4]
    5346:	000c      	movs	r4, r1
    5348:	e7ee      	b.n	5328 <_malloc_r+0x74>
    534a:	000c      	movs	r4, r1
    534c:	6849      	ldr	r1, [r1, #4]
    534e:	e7c2      	b.n	52d6 <_malloc_r+0x22>
    5350:	2303      	movs	r3, #3
    5352:	1cc4      	adds	r4, r0, #3
    5354:	439c      	bics	r4, r3
    5356:	42a0      	cmp	r0, r4
    5358:	d0e0      	beq.n	531c <_malloc_r+0x68>
    535a:	1a21      	subs	r1, r4, r0
    535c:	0030      	movs	r0, r6
    535e:	f000 fad3 	bl	5908 <_sbrk_r>
    5362:	1c43      	adds	r3, r0, #1
    5364:	d1da      	bne.n	531c <_malloc_r+0x68>
    5366:	e7c6      	b.n	52f6 <_malloc_r+0x42>
    5368:	20000114 	.word	0x20000114
    536c:	20000118 	.word	0x20000118

00005370 <__sfputc_r>:
    5370:	6893      	ldr	r3, [r2, #8]
    5372:	b510      	push	{r4, lr}
    5374:	3b01      	subs	r3, #1
    5376:	6093      	str	r3, [r2, #8]
    5378:	2b00      	cmp	r3, #0
    537a:	da05      	bge.n	5388 <__sfputc_r+0x18>
    537c:	6994      	ldr	r4, [r2, #24]
    537e:	42a3      	cmp	r3, r4
    5380:	db08      	blt.n	5394 <__sfputc_r+0x24>
    5382:	b2cb      	uxtb	r3, r1
    5384:	2b0a      	cmp	r3, #10
    5386:	d005      	beq.n	5394 <__sfputc_r+0x24>
    5388:	6813      	ldr	r3, [r2, #0]
    538a:	1c58      	adds	r0, r3, #1
    538c:	6010      	str	r0, [r2, #0]
    538e:	7019      	strb	r1, [r3, #0]
    5390:	b2c8      	uxtb	r0, r1
    5392:	bd10      	pop	{r4, pc}
    5394:	f7ff fc7a 	bl	4c8c <__swbuf_r>
    5398:	e7fb      	b.n	5392 <__sfputc_r+0x22>

0000539a <__sfputs_r>:
    539a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    539c:	0006      	movs	r6, r0
    539e:	000f      	movs	r7, r1
    53a0:	0014      	movs	r4, r2
    53a2:	18d5      	adds	r5, r2, r3
    53a4:	42ac      	cmp	r4, r5
    53a6:	d101      	bne.n	53ac <__sfputs_r+0x12>
    53a8:	2000      	movs	r0, #0
    53aa:	e007      	b.n	53bc <__sfputs_r+0x22>
    53ac:	7821      	ldrb	r1, [r4, #0]
    53ae:	003a      	movs	r2, r7
    53b0:	0030      	movs	r0, r6
    53b2:	f7ff ffdd 	bl	5370 <__sfputc_r>
    53b6:	3401      	adds	r4, #1
    53b8:	1c43      	adds	r3, r0, #1
    53ba:	d1f3      	bne.n	53a4 <__sfputs_r+0xa>
    53bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000053c0 <_vfiprintf_r>:
    53c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53c2:	b09f      	sub	sp, #124	; 0x7c
    53c4:	0006      	movs	r6, r0
    53c6:	000f      	movs	r7, r1
    53c8:	0014      	movs	r4, r2
    53ca:	9305      	str	r3, [sp, #20]
    53cc:	2800      	cmp	r0, #0
    53ce:	d004      	beq.n	53da <_vfiprintf_r+0x1a>
    53d0:	6983      	ldr	r3, [r0, #24]
    53d2:	2b00      	cmp	r3, #0
    53d4:	d101      	bne.n	53da <_vfiprintf_r+0x1a>
    53d6:	f7ff fe1d 	bl	5014 <__sinit>
    53da:	4b7f      	ldr	r3, [pc, #508]	; (55d8 <_vfiprintf_r+0x218>)
    53dc:	429f      	cmp	r7, r3
    53de:	d15c      	bne.n	549a <_vfiprintf_r+0xda>
    53e0:	6877      	ldr	r7, [r6, #4]
    53e2:	89bb      	ldrh	r3, [r7, #12]
    53e4:	071b      	lsls	r3, r3, #28
    53e6:	d562      	bpl.n	54ae <_vfiprintf_r+0xee>
    53e8:	693b      	ldr	r3, [r7, #16]
    53ea:	2b00      	cmp	r3, #0
    53ec:	d05f      	beq.n	54ae <_vfiprintf_r+0xee>
    53ee:	2300      	movs	r3, #0
    53f0:	ad06      	add	r5, sp, #24
    53f2:	616b      	str	r3, [r5, #20]
    53f4:	3320      	adds	r3, #32
    53f6:	766b      	strb	r3, [r5, #25]
    53f8:	3310      	adds	r3, #16
    53fa:	76ab      	strb	r3, [r5, #26]
    53fc:	9402      	str	r4, [sp, #8]
    53fe:	9c02      	ldr	r4, [sp, #8]
    5400:	7823      	ldrb	r3, [r4, #0]
    5402:	2b00      	cmp	r3, #0
    5404:	d15d      	bne.n	54c2 <_vfiprintf_r+0x102>
    5406:	9b02      	ldr	r3, [sp, #8]
    5408:	1ae3      	subs	r3, r4, r3
    540a:	9304      	str	r3, [sp, #16]
    540c:	d00d      	beq.n	542a <_vfiprintf_r+0x6a>
    540e:	9b04      	ldr	r3, [sp, #16]
    5410:	9a02      	ldr	r2, [sp, #8]
    5412:	0039      	movs	r1, r7
    5414:	0030      	movs	r0, r6
    5416:	f7ff ffc0 	bl	539a <__sfputs_r>
    541a:	1c43      	adds	r3, r0, #1
    541c:	d100      	bne.n	5420 <_vfiprintf_r+0x60>
    541e:	e0cc      	b.n	55ba <_vfiprintf_r+0x1fa>
    5420:	696a      	ldr	r2, [r5, #20]
    5422:	9b04      	ldr	r3, [sp, #16]
    5424:	4694      	mov	ip, r2
    5426:	4463      	add	r3, ip
    5428:	616b      	str	r3, [r5, #20]
    542a:	7823      	ldrb	r3, [r4, #0]
    542c:	2b00      	cmp	r3, #0
    542e:	d100      	bne.n	5432 <_vfiprintf_r+0x72>
    5430:	e0c3      	b.n	55ba <_vfiprintf_r+0x1fa>
    5432:	2201      	movs	r2, #1
    5434:	2300      	movs	r3, #0
    5436:	4252      	negs	r2, r2
    5438:	606a      	str	r2, [r5, #4]
    543a:	a902      	add	r1, sp, #8
    543c:	3254      	adds	r2, #84	; 0x54
    543e:	1852      	adds	r2, r2, r1
    5440:	3401      	adds	r4, #1
    5442:	602b      	str	r3, [r5, #0]
    5444:	60eb      	str	r3, [r5, #12]
    5446:	60ab      	str	r3, [r5, #8]
    5448:	7013      	strb	r3, [r2, #0]
    544a:	65ab      	str	r3, [r5, #88]	; 0x58
    544c:	7821      	ldrb	r1, [r4, #0]
    544e:	2205      	movs	r2, #5
    5450:	4862      	ldr	r0, [pc, #392]	; (55dc <_vfiprintf_r+0x21c>)
    5452:	f000 fb15 	bl	5a80 <memchr>
    5456:	1c63      	adds	r3, r4, #1
    5458:	469c      	mov	ip, r3
    545a:	2800      	cmp	r0, #0
    545c:	d135      	bne.n	54ca <_vfiprintf_r+0x10a>
    545e:	6829      	ldr	r1, [r5, #0]
    5460:	06cb      	lsls	r3, r1, #27
    5462:	d504      	bpl.n	546e <_vfiprintf_r+0xae>
    5464:	2353      	movs	r3, #83	; 0x53
    5466:	aa02      	add	r2, sp, #8
    5468:	3020      	adds	r0, #32
    546a:	189b      	adds	r3, r3, r2
    546c:	7018      	strb	r0, [r3, #0]
    546e:	070b      	lsls	r3, r1, #28
    5470:	d504      	bpl.n	547c <_vfiprintf_r+0xbc>
    5472:	2353      	movs	r3, #83	; 0x53
    5474:	202b      	movs	r0, #43	; 0x2b
    5476:	aa02      	add	r2, sp, #8
    5478:	189b      	adds	r3, r3, r2
    547a:	7018      	strb	r0, [r3, #0]
    547c:	7823      	ldrb	r3, [r4, #0]
    547e:	2b2a      	cmp	r3, #42	; 0x2a
    5480:	d02c      	beq.n	54dc <_vfiprintf_r+0x11c>
    5482:	2000      	movs	r0, #0
    5484:	210a      	movs	r1, #10
    5486:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5488:	7822      	ldrb	r2, [r4, #0]
    548a:	3a30      	subs	r2, #48	; 0x30
    548c:	2a09      	cmp	r2, #9
    548e:	d800      	bhi.n	5492 <_vfiprintf_r+0xd2>
    5490:	e06b      	b.n	556a <_vfiprintf_r+0x1aa>
    5492:	2800      	cmp	r0, #0
    5494:	d02a      	beq.n	54ec <_vfiprintf_r+0x12c>
    5496:	9309      	str	r3, [sp, #36]	; 0x24
    5498:	e028      	b.n	54ec <_vfiprintf_r+0x12c>
    549a:	4b51      	ldr	r3, [pc, #324]	; (55e0 <_vfiprintf_r+0x220>)
    549c:	429f      	cmp	r7, r3
    549e:	d101      	bne.n	54a4 <_vfiprintf_r+0xe4>
    54a0:	68b7      	ldr	r7, [r6, #8]
    54a2:	e79e      	b.n	53e2 <_vfiprintf_r+0x22>
    54a4:	4b4f      	ldr	r3, [pc, #316]	; (55e4 <_vfiprintf_r+0x224>)
    54a6:	429f      	cmp	r7, r3
    54a8:	d19b      	bne.n	53e2 <_vfiprintf_r+0x22>
    54aa:	68f7      	ldr	r7, [r6, #12]
    54ac:	e799      	b.n	53e2 <_vfiprintf_r+0x22>
    54ae:	0039      	movs	r1, r7
    54b0:	0030      	movs	r0, r6
    54b2:	f7ff fc41 	bl	4d38 <__swsetup_r>
    54b6:	2800      	cmp	r0, #0
    54b8:	d099      	beq.n	53ee <_vfiprintf_r+0x2e>
    54ba:	2001      	movs	r0, #1
    54bc:	4240      	negs	r0, r0
    54be:	b01f      	add	sp, #124	; 0x7c
    54c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54c2:	2b25      	cmp	r3, #37	; 0x25
    54c4:	d09f      	beq.n	5406 <_vfiprintf_r+0x46>
    54c6:	3401      	adds	r4, #1
    54c8:	e79a      	b.n	5400 <_vfiprintf_r+0x40>
    54ca:	4b44      	ldr	r3, [pc, #272]	; (55dc <_vfiprintf_r+0x21c>)
    54cc:	6829      	ldr	r1, [r5, #0]
    54ce:	1ac0      	subs	r0, r0, r3
    54d0:	2301      	movs	r3, #1
    54d2:	4083      	lsls	r3, r0
    54d4:	430b      	orrs	r3, r1
    54d6:	602b      	str	r3, [r5, #0]
    54d8:	4664      	mov	r4, ip
    54da:	e7b7      	b.n	544c <_vfiprintf_r+0x8c>
    54dc:	9b05      	ldr	r3, [sp, #20]
    54de:	1d18      	adds	r0, r3, #4
    54e0:	681b      	ldr	r3, [r3, #0]
    54e2:	9005      	str	r0, [sp, #20]
    54e4:	2b00      	cmp	r3, #0
    54e6:	db3a      	blt.n	555e <_vfiprintf_r+0x19e>
    54e8:	9309      	str	r3, [sp, #36]	; 0x24
    54ea:	4664      	mov	r4, ip
    54ec:	7823      	ldrb	r3, [r4, #0]
    54ee:	2b2e      	cmp	r3, #46	; 0x2e
    54f0:	d10b      	bne.n	550a <_vfiprintf_r+0x14a>
    54f2:	7863      	ldrb	r3, [r4, #1]
    54f4:	1c62      	adds	r2, r4, #1
    54f6:	2b2a      	cmp	r3, #42	; 0x2a
    54f8:	d13f      	bne.n	557a <_vfiprintf_r+0x1ba>
    54fa:	9b05      	ldr	r3, [sp, #20]
    54fc:	3402      	adds	r4, #2
    54fe:	1d1a      	adds	r2, r3, #4
    5500:	681b      	ldr	r3, [r3, #0]
    5502:	9205      	str	r2, [sp, #20]
    5504:	2b00      	cmp	r3, #0
    5506:	db35      	blt.n	5574 <_vfiprintf_r+0x1b4>
    5508:	9307      	str	r3, [sp, #28]
    550a:	7821      	ldrb	r1, [r4, #0]
    550c:	2203      	movs	r2, #3
    550e:	4836      	ldr	r0, [pc, #216]	; (55e8 <_vfiprintf_r+0x228>)
    5510:	f000 fab6 	bl	5a80 <memchr>
    5514:	2800      	cmp	r0, #0
    5516:	d007      	beq.n	5528 <_vfiprintf_r+0x168>
    5518:	4b33      	ldr	r3, [pc, #204]	; (55e8 <_vfiprintf_r+0x228>)
    551a:	682a      	ldr	r2, [r5, #0]
    551c:	1ac0      	subs	r0, r0, r3
    551e:	2340      	movs	r3, #64	; 0x40
    5520:	4083      	lsls	r3, r0
    5522:	4313      	orrs	r3, r2
    5524:	602b      	str	r3, [r5, #0]
    5526:	3401      	adds	r4, #1
    5528:	7821      	ldrb	r1, [r4, #0]
    552a:	1c63      	adds	r3, r4, #1
    552c:	2206      	movs	r2, #6
    552e:	482f      	ldr	r0, [pc, #188]	; (55ec <_vfiprintf_r+0x22c>)
    5530:	9302      	str	r3, [sp, #8]
    5532:	7629      	strb	r1, [r5, #24]
    5534:	f000 faa4 	bl	5a80 <memchr>
    5538:	2800      	cmp	r0, #0
    553a:	d044      	beq.n	55c6 <_vfiprintf_r+0x206>
    553c:	4b2c      	ldr	r3, [pc, #176]	; (55f0 <_vfiprintf_r+0x230>)
    553e:	2b00      	cmp	r3, #0
    5540:	d12f      	bne.n	55a2 <_vfiprintf_r+0x1e2>
    5542:	6829      	ldr	r1, [r5, #0]
    5544:	9b05      	ldr	r3, [sp, #20]
    5546:	2207      	movs	r2, #7
    5548:	05c9      	lsls	r1, r1, #23
    554a:	d528      	bpl.n	559e <_vfiprintf_r+0x1de>
    554c:	189b      	adds	r3, r3, r2
    554e:	4393      	bics	r3, r2
    5550:	3308      	adds	r3, #8
    5552:	9305      	str	r3, [sp, #20]
    5554:	696b      	ldr	r3, [r5, #20]
    5556:	9a03      	ldr	r2, [sp, #12]
    5558:	189b      	adds	r3, r3, r2
    555a:	616b      	str	r3, [r5, #20]
    555c:	e74f      	b.n	53fe <_vfiprintf_r+0x3e>
    555e:	425b      	negs	r3, r3
    5560:	60eb      	str	r3, [r5, #12]
    5562:	2302      	movs	r3, #2
    5564:	430b      	orrs	r3, r1
    5566:	602b      	str	r3, [r5, #0]
    5568:	e7bf      	b.n	54ea <_vfiprintf_r+0x12a>
    556a:	434b      	muls	r3, r1
    556c:	3401      	adds	r4, #1
    556e:	189b      	adds	r3, r3, r2
    5570:	2001      	movs	r0, #1
    5572:	e789      	b.n	5488 <_vfiprintf_r+0xc8>
    5574:	2301      	movs	r3, #1
    5576:	425b      	negs	r3, r3
    5578:	e7c6      	b.n	5508 <_vfiprintf_r+0x148>
    557a:	2300      	movs	r3, #0
    557c:	0014      	movs	r4, r2
    557e:	200a      	movs	r0, #10
    5580:	001a      	movs	r2, r3
    5582:	606b      	str	r3, [r5, #4]
    5584:	7821      	ldrb	r1, [r4, #0]
    5586:	3930      	subs	r1, #48	; 0x30
    5588:	2909      	cmp	r1, #9
    558a:	d903      	bls.n	5594 <_vfiprintf_r+0x1d4>
    558c:	2b00      	cmp	r3, #0
    558e:	d0bc      	beq.n	550a <_vfiprintf_r+0x14a>
    5590:	9207      	str	r2, [sp, #28]
    5592:	e7ba      	b.n	550a <_vfiprintf_r+0x14a>
    5594:	4342      	muls	r2, r0
    5596:	3401      	adds	r4, #1
    5598:	1852      	adds	r2, r2, r1
    559a:	2301      	movs	r3, #1
    559c:	e7f2      	b.n	5584 <_vfiprintf_r+0x1c4>
    559e:	3307      	adds	r3, #7
    55a0:	e7d5      	b.n	554e <_vfiprintf_r+0x18e>
    55a2:	ab05      	add	r3, sp, #20
    55a4:	9300      	str	r3, [sp, #0]
    55a6:	003a      	movs	r2, r7
    55a8:	4b12      	ldr	r3, [pc, #72]	; (55f4 <_vfiprintf_r+0x234>)
    55aa:	0029      	movs	r1, r5
    55ac:	0030      	movs	r0, r6
    55ae:	e000      	b.n	55b2 <_vfiprintf_r+0x1f2>
    55b0:	bf00      	nop
    55b2:	9003      	str	r0, [sp, #12]
    55b4:	9b03      	ldr	r3, [sp, #12]
    55b6:	3301      	adds	r3, #1
    55b8:	d1cc      	bne.n	5554 <_vfiprintf_r+0x194>
    55ba:	89bb      	ldrh	r3, [r7, #12]
    55bc:	065b      	lsls	r3, r3, #25
    55be:	d500      	bpl.n	55c2 <_vfiprintf_r+0x202>
    55c0:	e77b      	b.n	54ba <_vfiprintf_r+0xfa>
    55c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    55c4:	e77b      	b.n	54be <_vfiprintf_r+0xfe>
    55c6:	ab05      	add	r3, sp, #20
    55c8:	9300      	str	r3, [sp, #0]
    55ca:	003a      	movs	r2, r7
    55cc:	4b09      	ldr	r3, [pc, #36]	; (55f4 <_vfiprintf_r+0x234>)
    55ce:	0029      	movs	r1, r5
    55d0:	0030      	movs	r0, r6
    55d2:	f000 f87f 	bl	56d4 <_printf_i>
    55d6:	e7ec      	b.n	55b2 <_vfiprintf_r+0x1f2>
    55d8:	00005d70 	.word	0x00005d70
    55dc:	00005db0 	.word	0x00005db0
    55e0:	00005d90 	.word	0x00005d90
    55e4:	00005d50 	.word	0x00005d50
    55e8:	00005db6 	.word	0x00005db6
    55ec:	00005dba 	.word	0x00005dba
    55f0:	00000000 	.word	0x00000000
    55f4:	0000539b 	.word	0x0000539b

000055f8 <_printf_common>:
    55f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    55fa:	0015      	movs	r5, r2
    55fc:	9301      	str	r3, [sp, #4]
    55fe:	688a      	ldr	r2, [r1, #8]
    5600:	690b      	ldr	r3, [r1, #16]
    5602:	9000      	str	r0, [sp, #0]
    5604:	000c      	movs	r4, r1
    5606:	4293      	cmp	r3, r2
    5608:	da00      	bge.n	560c <_printf_common+0x14>
    560a:	0013      	movs	r3, r2
    560c:	0022      	movs	r2, r4
    560e:	602b      	str	r3, [r5, #0]
    5610:	3243      	adds	r2, #67	; 0x43
    5612:	7812      	ldrb	r2, [r2, #0]
    5614:	2a00      	cmp	r2, #0
    5616:	d001      	beq.n	561c <_printf_common+0x24>
    5618:	3301      	adds	r3, #1
    561a:	602b      	str	r3, [r5, #0]
    561c:	6823      	ldr	r3, [r4, #0]
    561e:	069b      	lsls	r3, r3, #26
    5620:	d502      	bpl.n	5628 <_printf_common+0x30>
    5622:	682b      	ldr	r3, [r5, #0]
    5624:	3302      	adds	r3, #2
    5626:	602b      	str	r3, [r5, #0]
    5628:	2706      	movs	r7, #6
    562a:	6823      	ldr	r3, [r4, #0]
    562c:	401f      	ands	r7, r3
    562e:	d027      	beq.n	5680 <_printf_common+0x88>
    5630:	0023      	movs	r3, r4
    5632:	3343      	adds	r3, #67	; 0x43
    5634:	781b      	ldrb	r3, [r3, #0]
    5636:	1e5a      	subs	r2, r3, #1
    5638:	4193      	sbcs	r3, r2
    563a:	6822      	ldr	r2, [r4, #0]
    563c:	0692      	lsls	r2, r2, #26
    563e:	d430      	bmi.n	56a2 <_printf_common+0xaa>
    5640:	0022      	movs	r2, r4
    5642:	9901      	ldr	r1, [sp, #4]
    5644:	3243      	adds	r2, #67	; 0x43
    5646:	9800      	ldr	r0, [sp, #0]
    5648:	9e08      	ldr	r6, [sp, #32]
    564a:	47b0      	blx	r6
    564c:	1c43      	adds	r3, r0, #1
    564e:	d025      	beq.n	569c <_printf_common+0xa4>
    5650:	2306      	movs	r3, #6
    5652:	6820      	ldr	r0, [r4, #0]
    5654:	682a      	ldr	r2, [r5, #0]
    5656:	68e1      	ldr	r1, [r4, #12]
    5658:	4003      	ands	r3, r0
    565a:	2500      	movs	r5, #0
    565c:	2b04      	cmp	r3, #4
    565e:	d103      	bne.n	5668 <_printf_common+0x70>
    5660:	1a8d      	subs	r5, r1, r2
    5662:	43eb      	mvns	r3, r5
    5664:	17db      	asrs	r3, r3, #31
    5666:	401d      	ands	r5, r3
    5668:	68a3      	ldr	r3, [r4, #8]
    566a:	6922      	ldr	r2, [r4, #16]
    566c:	4293      	cmp	r3, r2
    566e:	dd01      	ble.n	5674 <_printf_common+0x7c>
    5670:	1a9b      	subs	r3, r3, r2
    5672:	18ed      	adds	r5, r5, r3
    5674:	2700      	movs	r7, #0
    5676:	42bd      	cmp	r5, r7
    5678:	d120      	bne.n	56bc <_printf_common+0xc4>
    567a:	2000      	movs	r0, #0
    567c:	e010      	b.n	56a0 <_printf_common+0xa8>
    567e:	3701      	adds	r7, #1
    5680:	68e3      	ldr	r3, [r4, #12]
    5682:	682a      	ldr	r2, [r5, #0]
    5684:	1a9b      	subs	r3, r3, r2
    5686:	429f      	cmp	r7, r3
    5688:	dad2      	bge.n	5630 <_printf_common+0x38>
    568a:	0022      	movs	r2, r4
    568c:	2301      	movs	r3, #1
    568e:	3219      	adds	r2, #25
    5690:	9901      	ldr	r1, [sp, #4]
    5692:	9800      	ldr	r0, [sp, #0]
    5694:	9e08      	ldr	r6, [sp, #32]
    5696:	47b0      	blx	r6
    5698:	1c43      	adds	r3, r0, #1
    569a:	d1f0      	bne.n	567e <_printf_common+0x86>
    569c:	2001      	movs	r0, #1
    569e:	4240      	negs	r0, r0
    56a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    56a2:	2030      	movs	r0, #48	; 0x30
    56a4:	18e1      	adds	r1, r4, r3
    56a6:	3143      	adds	r1, #67	; 0x43
    56a8:	7008      	strb	r0, [r1, #0]
    56aa:	0021      	movs	r1, r4
    56ac:	1c5a      	adds	r2, r3, #1
    56ae:	3145      	adds	r1, #69	; 0x45
    56b0:	7809      	ldrb	r1, [r1, #0]
    56b2:	18a2      	adds	r2, r4, r2
    56b4:	3243      	adds	r2, #67	; 0x43
    56b6:	3302      	adds	r3, #2
    56b8:	7011      	strb	r1, [r2, #0]
    56ba:	e7c1      	b.n	5640 <_printf_common+0x48>
    56bc:	0022      	movs	r2, r4
    56be:	2301      	movs	r3, #1
    56c0:	321a      	adds	r2, #26
    56c2:	9901      	ldr	r1, [sp, #4]
    56c4:	9800      	ldr	r0, [sp, #0]
    56c6:	9e08      	ldr	r6, [sp, #32]
    56c8:	47b0      	blx	r6
    56ca:	1c43      	adds	r3, r0, #1
    56cc:	d0e6      	beq.n	569c <_printf_common+0xa4>
    56ce:	3701      	adds	r7, #1
    56d0:	e7d1      	b.n	5676 <_printf_common+0x7e>
	...

000056d4 <_printf_i>:
    56d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    56d6:	b08b      	sub	sp, #44	; 0x2c
    56d8:	9206      	str	r2, [sp, #24]
    56da:	000a      	movs	r2, r1
    56dc:	3243      	adds	r2, #67	; 0x43
    56de:	9307      	str	r3, [sp, #28]
    56e0:	9005      	str	r0, [sp, #20]
    56e2:	9204      	str	r2, [sp, #16]
    56e4:	7e0a      	ldrb	r2, [r1, #24]
    56e6:	000c      	movs	r4, r1
    56e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    56ea:	2a6e      	cmp	r2, #110	; 0x6e
    56ec:	d100      	bne.n	56f0 <_printf_i+0x1c>
    56ee:	e08f      	b.n	5810 <_printf_i+0x13c>
    56f0:	d817      	bhi.n	5722 <_printf_i+0x4e>
    56f2:	2a63      	cmp	r2, #99	; 0x63
    56f4:	d02c      	beq.n	5750 <_printf_i+0x7c>
    56f6:	d808      	bhi.n	570a <_printf_i+0x36>
    56f8:	2a00      	cmp	r2, #0
    56fa:	d100      	bne.n	56fe <_printf_i+0x2a>
    56fc:	e099      	b.n	5832 <_printf_i+0x15e>
    56fe:	2a58      	cmp	r2, #88	; 0x58
    5700:	d054      	beq.n	57ac <_printf_i+0xd8>
    5702:	0026      	movs	r6, r4
    5704:	3642      	adds	r6, #66	; 0x42
    5706:	7032      	strb	r2, [r6, #0]
    5708:	e029      	b.n	575e <_printf_i+0x8a>
    570a:	2a64      	cmp	r2, #100	; 0x64
    570c:	d001      	beq.n	5712 <_printf_i+0x3e>
    570e:	2a69      	cmp	r2, #105	; 0x69
    5710:	d1f7      	bne.n	5702 <_printf_i+0x2e>
    5712:	6821      	ldr	r1, [r4, #0]
    5714:	681a      	ldr	r2, [r3, #0]
    5716:	0608      	lsls	r0, r1, #24
    5718:	d523      	bpl.n	5762 <_printf_i+0x8e>
    571a:	1d11      	adds	r1, r2, #4
    571c:	6019      	str	r1, [r3, #0]
    571e:	6815      	ldr	r5, [r2, #0]
    5720:	e025      	b.n	576e <_printf_i+0x9a>
    5722:	2a73      	cmp	r2, #115	; 0x73
    5724:	d100      	bne.n	5728 <_printf_i+0x54>
    5726:	e088      	b.n	583a <_printf_i+0x166>
    5728:	d808      	bhi.n	573c <_printf_i+0x68>
    572a:	2a6f      	cmp	r2, #111	; 0x6f
    572c:	d029      	beq.n	5782 <_printf_i+0xae>
    572e:	2a70      	cmp	r2, #112	; 0x70
    5730:	d1e7      	bne.n	5702 <_printf_i+0x2e>
    5732:	2220      	movs	r2, #32
    5734:	6809      	ldr	r1, [r1, #0]
    5736:	430a      	orrs	r2, r1
    5738:	6022      	str	r2, [r4, #0]
    573a:	e003      	b.n	5744 <_printf_i+0x70>
    573c:	2a75      	cmp	r2, #117	; 0x75
    573e:	d020      	beq.n	5782 <_printf_i+0xae>
    5740:	2a78      	cmp	r2, #120	; 0x78
    5742:	d1de      	bne.n	5702 <_printf_i+0x2e>
    5744:	0022      	movs	r2, r4
    5746:	2178      	movs	r1, #120	; 0x78
    5748:	3245      	adds	r2, #69	; 0x45
    574a:	7011      	strb	r1, [r2, #0]
    574c:	4a6c      	ldr	r2, [pc, #432]	; (5900 <_printf_i+0x22c>)
    574e:	e030      	b.n	57b2 <_printf_i+0xde>
    5750:	000e      	movs	r6, r1
    5752:	681a      	ldr	r2, [r3, #0]
    5754:	3642      	adds	r6, #66	; 0x42
    5756:	1d11      	adds	r1, r2, #4
    5758:	6019      	str	r1, [r3, #0]
    575a:	6813      	ldr	r3, [r2, #0]
    575c:	7033      	strb	r3, [r6, #0]
    575e:	2301      	movs	r3, #1
    5760:	e079      	b.n	5856 <_printf_i+0x182>
    5762:	0649      	lsls	r1, r1, #25
    5764:	d5d9      	bpl.n	571a <_printf_i+0x46>
    5766:	1d11      	adds	r1, r2, #4
    5768:	6019      	str	r1, [r3, #0]
    576a:	2300      	movs	r3, #0
    576c:	5ed5      	ldrsh	r5, [r2, r3]
    576e:	2d00      	cmp	r5, #0
    5770:	da03      	bge.n	577a <_printf_i+0xa6>
    5772:	232d      	movs	r3, #45	; 0x2d
    5774:	9a04      	ldr	r2, [sp, #16]
    5776:	426d      	negs	r5, r5
    5778:	7013      	strb	r3, [r2, #0]
    577a:	4b62      	ldr	r3, [pc, #392]	; (5904 <_printf_i+0x230>)
    577c:	270a      	movs	r7, #10
    577e:	9303      	str	r3, [sp, #12]
    5780:	e02f      	b.n	57e2 <_printf_i+0x10e>
    5782:	6820      	ldr	r0, [r4, #0]
    5784:	6819      	ldr	r1, [r3, #0]
    5786:	0605      	lsls	r5, r0, #24
    5788:	d503      	bpl.n	5792 <_printf_i+0xbe>
    578a:	1d08      	adds	r0, r1, #4
    578c:	6018      	str	r0, [r3, #0]
    578e:	680d      	ldr	r5, [r1, #0]
    5790:	e005      	b.n	579e <_printf_i+0xca>
    5792:	0640      	lsls	r0, r0, #25
    5794:	d5f9      	bpl.n	578a <_printf_i+0xb6>
    5796:	680d      	ldr	r5, [r1, #0]
    5798:	1d08      	adds	r0, r1, #4
    579a:	6018      	str	r0, [r3, #0]
    579c:	b2ad      	uxth	r5, r5
    579e:	4b59      	ldr	r3, [pc, #356]	; (5904 <_printf_i+0x230>)
    57a0:	2708      	movs	r7, #8
    57a2:	9303      	str	r3, [sp, #12]
    57a4:	2a6f      	cmp	r2, #111	; 0x6f
    57a6:	d018      	beq.n	57da <_printf_i+0x106>
    57a8:	270a      	movs	r7, #10
    57aa:	e016      	b.n	57da <_printf_i+0x106>
    57ac:	3145      	adds	r1, #69	; 0x45
    57ae:	700a      	strb	r2, [r1, #0]
    57b0:	4a54      	ldr	r2, [pc, #336]	; (5904 <_printf_i+0x230>)
    57b2:	9203      	str	r2, [sp, #12]
    57b4:	681a      	ldr	r2, [r3, #0]
    57b6:	6821      	ldr	r1, [r4, #0]
    57b8:	1d10      	adds	r0, r2, #4
    57ba:	6018      	str	r0, [r3, #0]
    57bc:	6815      	ldr	r5, [r2, #0]
    57be:	0608      	lsls	r0, r1, #24
    57c0:	d522      	bpl.n	5808 <_printf_i+0x134>
    57c2:	07cb      	lsls	r3, r1, #31
    57c4:	d502      	bpl.n	57cc <_printf_i+0xf8>
    57c6:	2320      	movs	r3, #32
    57c8:	4319      	orrs	r1, r3
    57ca:	6021      	str	r1, [r4, #0]
    57cc:	2710      	movs	r7, #16
    57ce:	2d00      	cmp	r5, #0
    57d0:	d103      	bne.n	57da <_printf_i+0x106>
    57d2:	2320      	movs	r3, #32
    57d4:	6822      	ldr	r2, [r4, #0]
    57d6:	439a      	bics	r2, r3
    57d8:	6022      	str	r2, [r4, #0]
    57da:	0023      	movs	r3, r4
    57dc:	2200      	movs	r2, #0
    57de:	3343      	adds	r3, #67	; 0x43
    57e0:	701a      	strb	r2, [r3, #0]
    57e2:	6863      	ldr	r3, [r4, #4]
    57e4:	60a3      	str	r3, [r4, #8]
    57e6:	2b00      	cmp	r3, #0
    57e8:	db5c      	blt.n	58a4 <_printf_i+0x1d0>
    57ea:	2204      	movs	r2, #4
    57ec:	6821      	ldr	r1, [r4, #0]
    57ee:	4391      	bics	r1, r2
    57f0:	6021      	str	r1, [r4, #0]
    57f2:	2d00      	cmp	r5, #0
    57f4:	d158      	bne.n	58a8 <_printf_i+0x1d4>
    57f6:	9e04      	ldr	r6, [sp, #16]
    57f8:	2b00      	cmp	r3, #0
    57fa:	d064      	beq.n	58c6 <_printf_i+0x1f2>
    57fc:	0026      	movs	r6, r4
    57fe:	9b03      	ldr	r3, [sp, #12]
    5800:	3642      	adds	r6, #66	; 0x42
    5802:	781b      	ldrb	r3, [r3, #0]
    5804:	7033      	strb	r3, [r6, #0]
    5806:	e05e      	b.n	58c6 <_printf_i+0x1f2>
    5808:	0648      	lsls	r0, r1, #25
    580a:	d5da      	bpl.n	57c2 <_printf_i+0xee>
    580c:	b2ad      	uxth	r5, r5
    580e:	e7d8      	b.n	57c2 <_printf_i+0xee>
    5810:	6809      	ldr	r1, [r1, #0]
    5812:	681a      	ldr	r2, [r3, #0]
    5814:	0608      	lsls	r0, r1, #24
    5816:	d505      	bpl.n	5824 <_printf_i+0x150>
    5818:	1d11      	adds	r1, r2, #4
    581a:	6019      	str	r1, [r3, #0]
    581c:	6813      	ldr	r3, [r2, #0]
    581e:	6962      	ldr	r2, [r4, #20]
    5820:	601a      	str	r2, [r3, #0]
    5822:	e006      	b.n	5832 <_printf_i+0x15e>
    5824:	0649      	lsls	r1, r1, #25
    5826:	d5f7      	bpl.n	5818 <_printf_i+0x144>
    5828:	1d11      	adds	r1, r2, #4
    582a:	6019      	str	r1, [r3, #0]
    582c:	6813      	ldr	r3, [r2, #0]
    582e:	8aa2      	ldrh	r2, [r4, #20]
    5830:	801a      	strh	r2, [r3, #0]
    5832:	2300      	movs	r3, #0
    5834:	9e04      	ldr	r6, [sp, #16]
    5836:	6123      	str	r3, [r4, #16]
    5838:	e054      	b.n	58e4 <_printf_i+0x210>
    583a:	681a      	ldr	r2, [r3, #0]
    583c:	1d11      	adds	r1, r2, #4
    583e:	6019      	str	r1, [r3, #0]
    5840:	6816      	ldr	r6, [r2, #0]
    5842:	2100      	movs	r1, #0
    5844:	6862      	ldr	r2, [r4, #4]
    5846:	0030      	movs	r0, r6
    5848:	f000 f91a 	bl	5a80 <memchr>
    584c:	2800      	cmp	r0, #0
    584e:	d001      	beq.n	5854 <_printf_i+0x180>
    5850:	1b80      	subs	r0, r0, r6
    5852:	6060      	str	r0, [r4, #4]
    5854:	6863      	ldr	r3, [r4, #4]
    5856:	6123      	str	r3, [r4, #16]
    5858:	2300      	movs	r3, #0
    585a:	9a04      	ldr	r2, [sp, #16]
    585c:	7013      	strb	r3, [r2, #0]
    585e:	e041      	b.n	58e4 <_printf_i+0x210>
    5860:	6923      	ldr	r3, [r4, #16]
    5862:	0032      	movs	r2, r6
    5864:	9906      	ldr	r1, [sp, #24]
    5866:	9805      	ldr	r0, [sp, #20]
    5868:	9d07      	ldr	r5, [sp, #28]
    586a:	47a8      	blx	r5
    586c:	1c43      	adds	r3, r0, #1
    586e:	d043      	beq.n	58f8 <_printf_i+0x224>
    5870:	6823      	ldr	r3, [r4, #0]
    5872:	2500      	movs	r5, #0
    5874:	079b      	lsls	r3, r3, #30
    5876:	d40f      	bmi.n	5898 <_printf_i+0x1c4>
    5878:	9b09      	ldr	r3, [sp, #36]	; 0x24
    587a:	68e0      	ldr	r0, [r4, #12]
    587c:	4298      	cmp	r0, r3
    587e:	da3d      	bge.n	58fc <_printf_i+0x228>
    5880:	0018      	movs	r0, r3
    5882:	e03b      	b.n	58fc <_printf_i+0x228>
    5884:	0022      	movs	r2, r4
    5886:	2301      	movs	r3, #1
    5888:	3219      	adds	r2, #25
    588a:	9906      	ldr	r1, [sp, #24]
    588c:	9805      	ldr	r0, [sp, #20]
    588e:	9e07      	ldr	r6, [sp, #28]
    5890:	47b0      	blx	r6
    5892:	1c43      	adds	r3, r0, #1
    5894:	d030      	beq.n	58f8 <_printf_i+0x224>
    5896:	3501      	adds	r5, #1
    5898:	68e3      	ldr	r3, [r4, #12]
    589a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    589c:	1a9b      	subs	r3, r3, r2
    589e:	429d      	cmp	r5, r3
    58a0:	dbf0      	blt.n	5884 <_printf_i+0x1b0>
    58a2:	e7e9      	b.n	5878 <_printf_i+0x1a4>
    58a4:	2d00      	cmp	r5, #0
    58a6:	d0a9      	beq.n	57fc <_printf_i+0x128>
    58a8:	9e04      	ldr	r6, [sp, #16]
    58aa:	0028      	movs	r0, r5
    58ac:	0039      	movs	r1, r7
    58ae:	f7ff f84d 	bl	494c <__aeabi_uidivmod>
    58b2:	9b03      	ldr	r3, [sp, #12]
    58b4:	3e01      	subs	r6, #1
    58b6:	5c5b      	ldrb	r3, [r3, r1]
    58b8:	0028      	movs	r0, r5
    58ba:	7033      	strb	r3, [r6, #0]
    58bc:	0039      	movs	r1, r7
    58be:	f7fe ffbf 	bl	4840 <__udivsi3>
    58c2:	1e05      	subs	r5, r0, #0
    58c4:	d1f1      	bne.n	58aa <_printf_i+0x1d6>
    58c6:	2f08      	cmp	r7, #8
    58c8:	d109      	bne.n	58de <_printf_i+0x20a>
    58ca:	6823      	ldr	r3, [r4, #0]
    58cc:	07db      	lsls	r3, r3, #31
    58ce:	d506      	bpl.n	58de <_printf_i+0x20a>
    58d0:	6863      	ldr	r3, [r4, #4]
    58d2:	6922      	ldr	r2, [r4, #16]
    58d4:	4293      	cmp	r3, r2
    58d6:	dc02      	bgt.n	58de <_printf_i+0x20a>
    58d8:	2330      	movs	r3, #48	; 0x30
    58da:	3e01      	subs	r6, #1
    58dc:	7033      	strb	r3, [r6, #0]
    58de:	9b04      	ldr	r3, [sp, #16]
    58e0:	1b9b      	subs	r3, r3, r6
    58e2:	6123      	str	r3, [r4, #16]
    58e4:	9b07      	ldr	r3, [sp, #28]
    58e6:	aa09      	add	r2, sp, #36	; 0x24
    58e8:	9300      	str	r3, [sp, #0]
    58ea:	0021      	movs	r1, r4
    58ec:	9b06      	ldr	r3, [sp, #24]
    58ee:	9805      	ldr	r0, [sp, #20]
    58f0:	f7ff fe82 	bl	55f8 <_printf_common>
    58f4:	1c43      	adds	r3, r0, #1
    58f6:	d1b3      	bne.n	5860 <_printf_i+0x18c>
    58f8:	2001      	movs	r0, #1
    58fa:	4240      	negs	r0, r0
    58fc:	b00b      	add	sp, #44	; 0x2c
    58fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5900:	00005dd2 	.word	0x00005dd2
    5904:	00005dc1 	.word	0x00005dc1

00005908 <_sbrk_r>:
    5908:	2300      	movs	r3, #0
    590a:	b570      	push	{r4, r5, r6, lr}
    590c:	4c06      	ldr	r4, [pc, #24]	; (5928 <_sbrk_r+0x20>)
    590e:	0005      	movs	r5, r0
    5910:	0008      	movs	r0, r1
    5912:	6023      	str	r3, [r4, #0]
    5914:	f7fe f9c6 	bl	3ca4 <_sbrk>
    5918:	1c43      	adds	r3, r0, #1
    591a:	d103      	bne.n	5924 <_sbrk_r+0x1c>
    591c:	6823      	ldr	r3, [r4, #0]
    591e:	2b00      	cmp	r3, #0
    5920:	d000      	beq.n	5924 <_sbrk_r+0x1c>
    5922:	602b      	str	r3, [r5, #0]
    5924:	bd70      	pop	{r4, r5, r6, pc}
    5926:	46c0      	nop			; (mov r8, r8)
    5928:	200001bc 	.word	0x200001bc

0000592c <__sread>:
    592c:	b570      	push	{r4, r5, r6, lr}
    592e:	000c      	movs	r4, r1
    5930:	250e      	movs	r5, #14
    5932:	5f49      	ldrsh	r1, [r1, r5]
    5934:	f000 f8b2 	bl	5a9c <_read_r>
    5938:	2800      	cmp	r0, #0
    593a:	db03      	blt.n	5944 <__sread+0x18>
    593c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    593e:	181b      	adds	r3, r3, r0
    5940:	6563      	str	r3, [r4, #84]	; 0x54
    5942:	bd70      	pop	{r4, r5, r6, pc}
    5944:	89a3      	ldrh	r3, [r4, #12]
    5946:	4a02      	ldr	r2, [pc, #8]	; (5950 <__sread+0x24>)
    5948:	4013      	ands	r3, r2
    594a:	81a3      	strh	r3, [r4, #12]
    594c:	e7f9      	b.n	5942 <__sread+0x16>
    594e:	46c0      	nop			; (mov r8, r8)
    5950:	ffffefff 	.word	0xffffefff

00005954 <__swrite>:
    5954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5956:	001f      	movs	r7, r3
    5958:	898b      	ldrh	r3, [r1, #12]
    595a:	0005      	movs	r5, r0
    595c:	000c      	movs	r4, r1
    595e:	0016      	movs	r6, r2
    5960:	05db      	lsls	r3, r3, #23
    5962:	d505      	bpl.n	5970 <__swrite+0x1c>
    5964:	230e      	movs	r3, #14
    5966:	5ec9      	ldrsh	r1, [r1, r3]
    5968:	2200      	movs	r2, #0
    596a:	2302      	movs	r3, #2
    596c:	f000 f874 	bl	5a58 <_lseek_r>
    5970:	89a3      	ldrh	r3, [r4, #12]
    5972:	4a05      	ldr	r2, [pc, #20]	; (5988 <__swrite+0x34>)
    5974:	0028      	movs	r0, r5
    5976:	4013      	ands	r3, r2
    5978:	81a3      	strh	r3, [r4, #12]
    597a:	0032      	movs	r2, r6
    597c:	230e      	movs	r3, #14
    597e:	5ee1      	ldrsh	r1, [r4, r3]
    5980:	003b      	movs	r3, r7
    5982:	f000 f81f 	bl	59c4 <_write_r>
    5986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5988:	ffffefff 	.word	0xffffefff

0000598c <__sseek>:
    598c:	b570      	push	{r4, r5, r6, lr}
    598e:	000c      	movs	r4, r1
    5990:	250e      	movs	r5, #14
    5992:	5f49      	ldrsh	r1, [r1, r5]
    5994:	f000 f860 	bl	5a58 <_lseek_r>
    5998:	89a3      	ldrh	r3, [r4, #12]
    599a:	1c42      	adds	r2, r0, #1
    599c:	d103      	bne.n	59a6 <__sseek+0x1a>
    599e:	4a05      	ldr	r2, [pc, #20]	; (59b4 <__sseek+0x28>)
    59a0:	4013      	ands	r3, r2
    59a2:	81a3      	strh	r3, [r4, #12]
    59a4:	bd70      	pop	{r4, r5, r6, pc}
    59a6:	2280      	movs	r2, #128	; 0x80
    59a8:	0152      	lsls	r2, r2, #5
    59aa:	4313      	orrs	r3, r2
    59ac:	81a3      	strh	r3, [r4, #12]
    59ae:	6560      	str	r0, [r4, #84]	; 0x54
    59b0:	e7f8      	b.n	59a4 <__sseek+0x18>
    59b2:	46c0      	nop			; (mov r8, r8)
    59b4:	ffffefff 	.word	0xffffefff

000059b8 <__sclose>:
    59b8:	b510      	push	{r4, lr}
    59ba:	230e      	movs	r3, #14
    59bc:	5ec9      	ldrsh	r1, [r1, r3]
    59be:	f000 f815 	bl	59ec <_close_r>
    59c2:	bd10      	pop	{r4, pc}

000059c4 <_write_r>:
    59c4:	b570      	push	{r4, r5, r6, lr}
    59c6:	0005      	movs	r5, r0
    59c8:	0008      	movs	r0, r1
    59ca:	0011      	movs	r1, r2
    59cc:	2200      	movs	r2, #0
    59ce:	4c06      	ldr	r4, [pc, #24]	; (59e8 <_write_r+0x24>)
    59d0:	6022      	str	r2, [r4, #0]
    59d2:	001a      	movs	r2, r3
    59d4:	f7fc fc6a 	bl	22ac <_write>
    59d8:	1c43      	adds	r3, r0, #1
    59da:	d103      	bne.n	59e4 <_write_r+0x20>
    59dc:	6823      	ldr	r3, [r4, #0]
    59de:	2b00      	cmp	r3, #0
    59e0:	d000      	beq.n	59e4 <_write_r+0x20>
    59e2:	602b      	str	r3, [r5, #0]
    59e4:	bd70      	pop	{r4, r5, r6, pc}
    59e6:	46c0      	nop			; (mov r8, r8)
    59e8:	200001bc 	.word	0x200001bc

000059ec <_close_r>:
    59ec:	2300      	movs	r3, #0
    59ee:	b570      	push	{r4, r5, r6, lr}
    59f0:	4c06      	ldr	r4, [pc, #24]	; (5a0c <_close_r+0x20>)
    59f2:	0005      	movs	r5, r0
    59f4:	0008      	movs	r0, r1
    59f6:	6023      	str	r3, [r4, #0]
    59f8:	f7fe f972 	bl	3ce0 <_close>
    59fc:	1c43      	adds	r3, r0, #1
    59fe:	d103      	bne.n	5a08 <_close_r+0x1c>
    5a00:	6823      	ldr	r3, [r4, #0]
    5a02:	2b00      	cmp	r3, #0
    5a04:	d000      	beq.n	5a08 <_close_r+0x1c>
    5a06:	602b      	str	r3, [r5, #0]
    5a08:	bd70      	pop	{r4, r5, r6, pc}
    5a0a:	46c0      	nop			; (mov r8, r8)
    5a0c:	200001bc 	.word	0x200001bc

00005a10 <_fstat_r>:
    5a10:	2300      	movs	r3, #0
    5a12:	b570      	push	{r4, r5, r6, lr}
    5a14:	4c06      	ldr	r4, [pc, #24]	; (5a30 <_fstat_r+0x20>)
    5a16:	0005      	movs	r5, r0
    5a18:	0008      	movs	r0, r1
    5a1a:	0011      	movs	r1, r2
    5a1c:	6023      	str	r3, [r4, #0]
    5a1e:	f7fe f969 	bl	3cf4 <_fstat>
    5a22:	1c43      	adds	r3, r0, #1
    5a24:	d103      	bne.n	5a2e <_fstat_r+0x1e>
    5a26:	6823      	ldr	r3, [r4, #0]
    5a28:	2b00      	cmp	r3, #0
    5a2a:	d000      	beq.n	5a2e <_fstat_r+0x1e>
    5a2c:	602b      	str	r3, [r5, #0]
    5a2e:	bd70      	pop	{r4, r5, r6, pc}
    5a30:	200001bc 	.word	0x200001bc

00005a34 <_isatty_r>:
    5a34:	2300      	movs	r3, #0
    5a36:	b570      	push	{r4, r5, r6, lr}
    5a38:	4c06      	ldr	r4, [pc, #24]	; (5a54 <_isatty_r+0x20>)
    5a3a:	0005      	movs	r5, r0
    5a3c:	0008      	movs	r0, r1
    5a3e:	6023      	str	r3, [r4, #0]
    5a40:	f7fe f966 	bl	3d10 <_isatty>
    5a44:	1c43      	adds	r3, r0, #1
    5a46:	d103      	bne.n	5a50 <_isatty_r+0x1c>
    5a48:	6823      	ldr	r3, [r4, #0]
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	d000      	beq.n	5a50 <_isatty_r+0x1c>
    5a4e:	602b      	str	r3, [r5, #0]
    5a50:	bd70      	pop	{r4, r5, r6, pc}
    5a52:	46c0      	nop			; (mov r8, r8)
    5a54:	200001bc 	.word	0x200001bc

00005a58 <_lseek_r>:
    5a58:	b570      	push	{r4, r5, r6, lr}
    5a5a:	0005      	movs	r5, r0
    5a5c:	0008      	movs	r0, r1
    5a5e:	0011      	movs	r1, r2
    5a60:	2200      	movs	r2, #0
    5a62:	4c06      	ldr	r4, [pc, #24]	; (5a7c <_lseek_r+0x24>)
    5a64:	6022      	str	r2, [r4, #0]
    5a66:	001a      	movs	r2, r3
    5a68:	f7fe f95b 	bl	3d22 <_lseek>
    5a6c:	1c43      	adds	r3, r0, #1
    5a6e:	d103      	bne.n	5a78 <_lseek_r+0x20>
    5a70:	6823      	ldr	r3, [r4, #0]
    5a72:	2b00      	cmp	r3, #0
    5a74:	d000      	beq.n	5a78 <_lseek_r+0x20>
    5a76:	602b      	str	r3, [r5, #0]
    5a78:	bd70      	pop	{r4, r5, r6, pc}
    5a7a:	46c0      	nop			; (mov r8, r8)
    5a7c:	200001bc 	.word	0x200001bc

00005a80 <memchr>:
    5a80:	b2c9      	uxtb	r1, r1
    5a82:	1882      	adds	r2, r0, r2
    5a84:	4290      	cmp	r0, r2
    5a86:	d101      	bne.n	5a8c <memchr+0xc>
    5a88:	2000      	movs	r0, #0
    5a8a:	4770      	bx	lr
    5a8c:	7803      	ldrb	r3, [r0, #0]
    5a8e:	428b      	cmp	r3, r1
    5a90:	d0fb      	beq.n	5a8a <memchr+0xa>
    5a92:	3001      	adds	r0, #1
    5a94:	e7f6      	b.n	5a84 <memchr+0x4>

00005a96 <__malloc_lock>:
    5a96:	4770      	bx	lr

00005a98 <__malloc_unlock>:
    5a98:	4770      	bx	lr
	...

00005a9c <_read_r>:
    5a9c:	b570      	push	{r4, r5, r6, lr}
    5a9e:	0005      	movs	r5, r0
    5aa0:	0008      	movs	r0, r1
    5aa2:	0011      	movs	r1, r2
    5aa4:	2200      	movs	r2, #0
    5aa6:	4c06      	ldr	r4, [pc, #24]	; (5ac0 <_read_r+0x24>)
    5aa8:	6022      	str	r2, [r4, #0]
    5aaa:	001a      	movs	r2, r3
    5aac:	f7fc fbd4 	bl	2258 <_read>
    5ab0:	1c43      	adds	r3, r0, #1
    5ab2:	d103      	bne.n	5abc <_read_r+0x20>
    5ab4:	6823      	ldr	r3, [r4, #0]
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	d000      	beq.n	5abc <_read_r+0x20>
    5aba:	602b      	str	r3, [r5, #0]
    5abc:	bd70      	pop	{r4, r5, r6, pc}
    5abe:	46c0      	nop			; (mov r8, r8)
    5ac0:	200001bc 	.word	0x200001bc
    5ac4:	00000292 	.word	0x00000292
    5ac8:	00000296 	.word	0x00000296
    5acc:	0000029a 	.word	0x0000029a
    5ad0:	0000029e 	.word	0x0000029e
    5ad4:	000002a2 	.word	0x000002a2
    5ad8:	000002a6 	.word	0x000002a6
    5adc:	000002aa 	.word	0x000002aa
    5ae0:	000002ae 	.word	0x000002ae
    5ae4:	000002b2 	.word	0x000002b2
    5ae8:	000002b6 	.word	0x000002b6
    5aec:	0000030e 	.word	0x0000030e
    5af0:	00000314 	.word	0x00000314
    5af4:	0000031a 	.word	0x0000031a
    5af8:	00000320 	.word	0x00000320
    5afc:	00000320 	.word	0x00000320
    5b00:	00000326 	.word	0x00000326
    5b04:	00000326 	.word	0x00000326
    5b08:	00000326 	.word	0x00000326
    5b0c:	0000032c 	.word	0x0000032c
    5b10:	00000332 	.word	0x00000332
    5b14:	0000197c 	.word	0x0000197c
    5b18:	0000197c 	.word	0x0000197c
    5b1c:	00001970 	.word	0x00001970
    5b20:	0000197c 	.word	0x0000197c
    5b24:	00001970 	.word	0x00001970
    5b28:	0000194a 	.word	0x0000194a
    5b2c:	0000194a 	.word	0x0000194a
    5b30:	0000197c 	.word	0x0000197c
    5b34:	0000197c 	.word	0x0000197c
    5b38:	0000197c 	.word	0x0000197c
    5b3c:	0000197c 	.word	0x0000197c
    5b40:	0000197c 	.word	0x0000197c
    5b44:	0000197c 	.word	0x0000197c
    5b48:	0000197c 	.word	0x0000197c
    5b4c:	0000197c 	.word	0x0000197c
    5b50:	0000197c 	.word	0x0000197c
    5b54:	0000197c 	.word	0x0000197c
    5b58:	0000197c 	.word	0x0000197c
    5b5c:	0000197c 	.word	0x0000197c
    5b60:	0000197c 	.word	0x0000197c
    5b64:	0000197c 	.word	0x0000197c
    5b68:	0000197c 	.word	0x0000197c
    5b6c:	0000197c 	.word	0x0000197c
    5b70:	0000197c 	.word	0x0000197c
    5b74:	0000197c 	.word	0x0000197c
    5b78:	0000197c 	.word	0x0000197c
    5b7c:	0000197c 	.word	0x0000197c
    5b80:	0000197c 	.word	0x0000197c
    5b84:	0000197c 	.word	0x0000197c
    5b88:	0000197c 	.word	0x0000197c
    5b8c:	0000197c 	.word	0x0000197c
    5b90:	0000197c 	.word	0x0000197c
    5b94:	0000197c 	.word	0x0000197c
    5b98:	0000197c 	.word	0x0000197c
    5b9c:	0000197c 	.word	0x0000197c
    5ba0:	0000197c 	.word	0x0000197c
    5ba4:	0000197c 	.word	0x0000197c
    5ba8:	0000197c 	.word	0x0000197c
    5bac:	0000197c 	.word	0x0000197c
    5bb0:	0000197c 	.word	0x0000197c
    5bb4:	0000197c 	.word	0x0000197c
    5bb8:	0000197c 	.word	0x0000197c
    5bbc:	0000197c 	.word	0x0000197c
    5bc0:	0000197c 	.word	0x0000197c
    5bc4:	0000197c 	.word	0x0000197c
    5bc8:	0000197c 	.word	0x0000197c
    5bcc:	0000197c 	.word	0x0000197c
    5bd0:	0000197c 	.word	0x0000197c
    5bd4:	0000197c 	.word	0x0000197c
    5bd8:	0000197c 	.word	0x0000197c
    5bdc:	0000197c 	.word	0x0000197c
    5be0:	0000197c 	.word	0x0000197c
    5be4:	0000197c 	.word	0x0000197c
    5be8:	0000197c 	.word	0x0000197c
    5bec:	0000197c 	.word	0x0000197c
    5bf0:	0000197c 	.word	0x0000197c
    5bf4:	0000197c 	.word	0x0000197c
    5bf8:	0000197c 	.word	0x0000197c
    5bfc:	0000197c 	.word	0x0000197c
    5c00:	0000197c 	.word	0x0000197c
    5c04:	0000197c 	.word	0x0000197c
    5c08:	0000197c 	.word	0x0000197c
    5c0c:	0000197c 	.word	0x0000197c
    5c10:	0000197c 	.word	0x0000197c
    5c14:	00001970 	.word	0x00001970
    5c18:	00001970 	.word	0x00001970
    5c1c:	00001986 	.word	0x00001986
    5c20:	00001986 	.word	0x00001986
    5c24:	00001986 	.word	0x00001986
    5c28:	00001986 	.word	0x00001986
    5c2c:	42000800 	.word	0x42000800
    5c30:	42000c00 	.word	0x42000c00
    5c34:	42001000 	.word	0x42001000
    5c38:	42001400 	.word	0x42001400
    5c3c:	42001800 	.word	0x42001800
    5c40:	42001c00 	.word	0x42001c00
    5c44:	0c0b0a09 	.word	0x0c0b0a09
    5c48:	00000e0d 	.word	0x00000e0d
    5c4c:	00003236 	.word	0x00003236
    5c50:	000032ae 	.word	0x000032ae
    5c54:	000032ae 	.word	0x000032ae
    5c58:	00003254 	.word	0x00003254
    5c5c:	0000324e 	.word	0x0000324e
    5c60:	0000325a 	.word	0x0000325a
    5c64:	0000323c 	.word	0x0000323c
    5c68:	00003260 	.word	0x00003260
    5c6c:	00003294 	.word	0x00003294
    5c70:	00003388 	.word	0x00003388
    5c74:	000033d8 	.word	0x000033d8
    5c78:	000033d8 	.word	0x000033d8
    5c7c:	000033d4 	.word	0x000033d4
    5c80:	0000337a 	.word	0x0000337a
    5c84:	0000339a 	.word	0x0000339a
    5c88:	0000336a 	.word	0x0000336a
    5c8c:	000033ac 	.word	0x000033ac
    5c90:	000033be 	.word	0x000033be
    5c94:	72677055 	.word	0x72677055
    5c98:	6e696461 	.word	0x6e696461
    5c9c:	69662067 	.word	0x69662067
    5ca0:	61776d72 	.word	0x61776d72
    5ca4:	74206572 	.word	0x74206572
    5ca8:	6576206f 	.word	0x6576206f
    5cac:	6f697372 	.word	0x6f697372
    5cb0:	25203a6e 	.word	0x25203a6e
    5cb4:	000a2e64 	.word	0x000a2e64
    5cb8:	73616c46 	.word	0x73616c46
    5cbc:	68432068 	.word	0x68432068
    5cc0:	64207069 	.word	0x64207069
    5cc4:	6e206469 	.word	0x6e206469
    5cc8:	7220746f 	.word	0x7220746f
    5ccc:	6f707365 	.word	0x6f707365
    5cd0:	202e646e 	.word	0x202e646e
    5cd4:	72677055 	.word	0x72677055
    5cd8:	20656461 	.word	0x20656461
    5cdc:	6c696166 	.word	0x6c696166
    5ce0:	21206465 	.word	0x21206465
    5ce4:	00000000 	.word	0x00000000
    5ce8:	72677055 	.word	0x72677055
    5cec:	20656461 	.word	0x20656461
    5cf0:	706d6f63 	.word	0x706d6f63
    5cf4:	6574656c 	.word	0x6574656c
    5cf8:	6552202e 	.word	0x6552202e
    5cfc:	74746573 	.word	0x74746573
    5d00:	20676e69 	.word	0x20676e69
    5d04:	69766564 	.word	0x69766564
    5d08:	002e6563 	.word	0x002e6563
    5d0c:	74697257 	.word	0x74697257
    5d10:	20676e69 	.word	0x20676e69
    5d14:	204d564e 	.word	0x204d564e
    5d18:	66206f74 	.word	0x66206f74
    5d1c:	6873616c 	.word	0x6873616c
    5d20:	63657320 	.word	0x63657320
    5d24:	6e6f6974 	.word	0x6e6f6974
    5d28:	6425203a 	.word	0x6425203a
    5d2c:	00000a2e 	.word	0x00000a2e
    5d30:	72646461 	.word	0x72646461
    5d34:	203a695f 	.word	0x203a695f
    5d38:	0a0d7825 	.word	0x0a0d7825
    5d3c:	00000000 	.word	0x00000000
    5d40:	62206e69 	.word	0x62206e69
    5d44:	0a746f6f 	.word	0x0a746f6f
    5d48:	0000000d 	.word	0x0000000d

00005d4c <_global_impure_ptr>:
    5d4c:	20000010                                ... 

00005d50 <__sf_fake_stderr>:
	...

00005d70 <__sf_fake_stdin>:
	...

00005d90 <__sf_fake_stdout>:
	...
    5db0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    5dc0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    5dd0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    5de0:	00006665                                ef..

00005de4 <_init>:
    5de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5de6:	46c0      	nop			; (mov r8, r8)
    5de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5dea:	bc08      	pop	{r3}
    5dec:	469e      	mov	lr, r3
    5dee:	4770      	bx	lr

00005df0 <__init_array_start>:
    5df0:	000000dd 	.word	0x000000dd

00005df4 <_fini>:
    5df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5df6:	46c0      	nop			; (mov r8, r8)
    5df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5dfa:	bc08      	pop	{r3}
    5dfc:	469e      	mov	lr, r3
    5dfe:	4770      	bx	lr

00005e00 <__fini_array_start>:
    5e00:	000000b5 	.word	0x000000b5
